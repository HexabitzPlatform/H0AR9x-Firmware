
H0AR9x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190ec  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033fc  080191a8  080191a8  000291a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c5a4  0801c5a4  00030ac8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c5a4  0801c5a4  0002c5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c5ac  0801c5ac  00030ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c5ac  0801c5ac  0002c5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c5b4  0801c5b4  0002c5b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000001c  20000000  0801c5b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000aa8  20000020  0801c5d4  00030020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006938  20000ac8  0801d07c  00030ac8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20007400  0801d07c  00037400  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00059a1f  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000090e2  00000000  00000000  0008a50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d643  00000000  00000000  000935f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001f80  00000000  00000000  000b0c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000023a0  00000000  00000000  000b2bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017c99  00000000  00000000  000b4f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b1c8  00000000  00000000  000ccbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d7db9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b48  00000000  00000000  000d7e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ac8 	.word	0x20000ac8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08019190 	.word	0x08019190

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000acc 	.word	0x20000acc
 8000100:	08019190 	.word	0x08019190

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	080191dc 	.word	0x080191dc
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	0801921c 	.word	0x0801921c
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	0801925c 	.word	0x0801925c
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <LoadROtopology+0x94>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadROtopology+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d033      	beq.n	8002d9c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d36:	d039      	beq.n	8002dac <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d3a:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <LoadROtopology+0xa0>)
 8002d3e:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d42:	781e      	ldrb	r6, [r3, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d035      	beq.n	8002db4 <LoadROtopology+0x90>
 8002d48:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002d4a:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	1dd9      	adds	r1, r3, #7
 8002d50:	2300      	movs	r3, #0
 8002d52:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d54:	4d1c      	ldr	r5, [pc, #112]	; (8002dc8 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d56:	4663      	mov	r3, ip
 8002d58:	700b      	strb	r3, [r1, #0]
 8002d5a:	780b      	ldrb	r3, [r1, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d815      	bhi.n	8002d8e <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	0098      	lsls	r0, r3, #2
 8002d66:	18c0      	adds	r0, r0, r3
 8002d68:	0040      	lsls	r0, r0, #1
 8002d6a:	18c0      	adds	r0, r0, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LoadROtopology+0x94>)
 8002d6e:	18d7      	adds	r7, r2, r3
 8002d70:	780b      	ldrb	r3, [r1, #0]
 8002d72:	883f      	ldrh	r7, [r7, #0]
 8002d74:	181b      	adds	r3, r3, r0
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002d7a:	3202      	adds	r2, #2
 8002d7c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d7e:	780b      	ldrb	r3, [r1, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	700b      	strb	r3, [r1, #0]
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d9ee      	bls.n	8002d6c <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	42b4      	cmp	r4, r6
 8002d94:	d9df      	bls.n	8002d56 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoadROtopology+0xa0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	e7f5      	b.n	8002d98 <LoadROtopology+0x74>
			N =1;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LoadROtopology+0x9c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c3      	b.n	8002d3c <LoadROtopology+0x18>
	return result;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7ef      	b.n	8002d98 <LoadROtopology+0x74>
 8002db8:	0801d800 	.word	0x0801d800
 8002dbc:	0000ffff 	.word	0x0000ffff
 8002dc0:	20000044 	.word	0x20000044
 8002dc4:	200010ea 	.word	0x200010ea
 8002dc8:	20000aec 	.word	0x20000aec

08002dcc <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoadEEportsDir+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002dd2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dd8:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoadEEportsDir+0x44>)
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f004 fcfa 	bl	80077d4 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002de0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002de2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002de4:	4f09      	ldr	r7, [pc, #36]	; (8002e0c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002de6:	4e0a      	ldr	r6, [pc, #40]	; (8002e10 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d30a      	bcc.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002df2:	1e61      	subs	r1, r4, #1
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	1989      	adds	r1, r1, r6
 8002df8:	1c60      	adds	r0, r4, #1
 8002dfa:	f004 fceb 	bl	80077d4 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002dfe:	1ca3      	adds	r3, r4, #2
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	ddf1      	ble.n	8002de8 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7ef      	b.n	8002de8 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e08:	0028      	movs	r0, r5
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	20000044 	.word	0x20000044
 8002e10:	2000735c 	.word	0x2000735c

08002e14 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46de      	mov	lr, fp
 8002e18:	4657      	mov	r7, sl
 8002e1a:	464e      	mov	r6, r9
 8002e1c:	4645      	mov	r5, r8
 8002e1e:	b5e0      	push	{r5, r6, r7, lr}
 8002e20:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e22:	466b      	mov	r3, sp
 8002e24:	2200      	movs	r2, #0
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <LoadEEalias+0x7c>)
 8002e2e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e30:	469b      	mov	fp, r3
 8002e32:	e00c      	b.n	8002e4e <LoadEEalias+0x3a>
 8002e34:	464b      	mov	r3, r9
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	444b      	add	r3, r9
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	445b      	add	r3, fp
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e42:	3701      	adds	r7, #1
 8002e44:	b2ff      	uxtb	r7, r7
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <LoadEEalias+0x80>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d317      	bcc.n	8002e7e <LoadEEalias+0x6a>
 8002e4e:	00bd      	lsls	r5, r7, #2
 8002e50:	19ed      	adds	r5, r5, r7
 8002e52:	006d      	lsls	r5, r5, #1
 8002e54:	4455      	add	r5, sl
 8002e56:	1d63      	adds	r3, r4, #5
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e5c:	466b      	mov	r3, sp
 8002e5e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002e60:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e62:	0031      	movs	r1, r6
 8002e64:	0020      	movs	r0, r4
 8002e66:	f004 fcb5 	bl	80077d4 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e6a:	8833      	ldrh	r3, [r6, #0]
 8002e6c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	702b      	strb	r3, [r5, #0]
 8002e72:	3401      	adds	r4, #1
 8002e74:	b2a4      	uxth	r4, r4
 8002e76:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e78:	45a0      	cmp	r8, r4
 8002e7a:	d1f2      	bne.n	8002e62 <LoadEEalias+0x4e>
 8002e7c:	e7da      	b.n	8002e34 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	b003      	add	sp, #12
 8002e82:	bc3c      	pop	{r2, r3, r4, r5}
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	46ab      	mov	fp, r5
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000fdc 	.word	0x20000fdc
 8002e94:	20000044 	.word	0x20000044

08002e98 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	46d6      	mov	lr, sl
 8002e9c:	464f      	mov	r7, r9
 8002e9e:	4646      	mov	r6, r8
 8002ea0:	b5c0      	push	{r6, r7, lr}
 8002ea2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <LoadEEgroup+0x9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002eb2:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	4e20      	ldr	r6, [pc, #128]	; (8002f38 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002eb6:	4c1f      	ldr	r4, [pc, #124]	; (8002f34 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb8:	b2e9      	uxtb	r1, r5
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	1871      	adds	r1, r6, r1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	30cb      	adds	r0, #203	; 0xcb
 8002ec2:	b280      	uxth	r0, r0
 8002ec4:	f004 fc86 	bl	80077d4 <EE_ReadVariable>
		add++;
 8002ec8:	3501      	adds	r5, #1
 8002eca:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	b2eb      	uxtb	r3, r5
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f1      	bhi.n	8002eb8 <LoadEEgroup+0x20>
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <LoadEEgroup+0xa4>)
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	002c      	movs	r4, r5
 8002eda:	3499      	adds	r4, #153	; 0x99
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	35cb      	adds	r5, #203	; 0xcb
 8002ee0:	b2ab      	uxth	r3, r5
 8002ee2:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ee4:	466b      	mov	r3, sp
 8002ee6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ee8:	2300      	movs	r3, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	e009      	b.n	8002f02 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7f0      	b.n	8002ed4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	725a      	strb	r2, [r3, #9]
 8002ef8:	230a      	movs	r3, #10
 8002efa:	469c      	mov	ip, r3
 8002efc:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002efe:	4544      	cmp	r4, r8
 8002f00:	d010      	beq.n	8002f24 <LoadEEgroup+0x8c>
 8002f02:	1d67      	adds	r7, r4, #5
 8002f04:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f06:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f08:	0031      	movs	r1, r6
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f004 fc62 	bl	80077d4 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f10:	8833      	ldrh	r3, [r6, #0]
 8002f12:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	702b      	strb	r3, [r5, #0]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	b2a4      	uxth	r4, r4
 8002f1c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f1e:	42bc      	cmp	r4, r7
 8002f20:	d1f2      	bne.n	8002f08 <LoadEEgroup+0x70>
 8002f22:	e7e6      	b.n	8002ef2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	bc1c      	pop	{r2, r3, r4}
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	20000044 	.word	0x20000044
 8002f38:	20000f34 	.word	0x20000f34
 8002f3c:	20000ed0 	.word	0x20000ed0

08002f40 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f44:	210e      	movs	r1, #14
 8002f46:	4469      	add	r1, sp
 8002f48:	2300      	movs	r3, #0
 8002f4a:	800b      	strh	r3, [r1, #0]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f50:	20e4      	movs	r0, #228	; 0xe4
 8002f52:	f004 fc3f 	bl	80077d4 <EE_ReadVariable>
	uint8_t direction =0;
 8002f56:	2600      	movs	r6, #0
	if(!status1){
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d102      	bne.n	8002f62 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	446b      	add	r3, sp
 8002f60:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f62:	210e      	movs	r1, #14
 8002f64:	4469      	add	r1, sp
 8002f66:	20e5      	movs	r0, #229	; 0xe5
 8002f68:	f004 fc34 	bl	80077d4 <EE_ReadVariable>
 8002f6c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f6e:	a903      	add	r1, sp, #12
 8002f70:	20e6      	movs	r0, #230	; 0xe6
 8002f72:	f004 fc2f 	bl	80077d4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002f76:	4304      	orrs	r4, r0
 8002f78:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002f7a:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d106      	bne.n	8002f8e <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f80:	230e      	movs	r3, #14
 8002f82:	446b      	add	r3, sp
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	042d      	lsls	r5, r5, #16
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8e:	210e      	movs	r1, #14
 8002f90:	4469      	add	r1, sp
 8002f92:	20e7      	movs	r0, #231	; 0xe7
 8002f94:	f004 fc1e 	bl	80077d4 <EE_ReadVariable>
 8002f98:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	20e8      	movs	r0, #232	; 0xe8
 8002f9e:	f004 fc19 	bl	80077d4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fa2:	4320      	orrs	r0, r4
 8002fa4:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002fa6:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d106      	bne.n	8002fba <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fac:	230e      	movs	r3, #14
 8002fae:	446b      	add	r3, sp
 8002fb0:	881c      	ldrh	r4, [r3, #0]
 8002fb2:	0424      	lsls	r4, r4, #16
 8002fb4:	ab03      	add	r3, sp, #12
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002fba:	210e      	movs	r1, #14
 8002fbc:	4469      	add	r1, sp
 8002fbe:	20e9      	movs	r0, #233	; 0xe9
 8002fc0:	f004 fc08 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d107      	bne.n	8002fd8 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002fc8:	230e      	movs	r3, #14
 8002fca:	446b      	add	r3, sp
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <LoadEEstreams+0x134>)
 8002fd2:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <LoadEEstreams+0x138>)
 8002fd6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fd8:	210e      	movs	r1, #14
 8002fda:	4469      	add	r1, sp
 8002fdc:	20ea      	movs	r0, #234	; 0xea
 8002fde:	f004 fbf9 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d107      	bne.n	8002ff6 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002fe6:	230e      	movs	r3, #14
 8002fe8:	446b      	add	r3, sp
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <LoadEEstreams+0x13c>)
 8002ff0:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <LoadEEstreams+0x140>)
 8002ff4:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002ff6:	210e      	movs	r1, #14
 8002ff8:	4469      	add	r1, sp
 8002ffa:	20eb      	movs	r0, #235	; 0xeb
 8002ffc:	f004 fbea 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 8003000:	2800      	cmp	r0, #0
 8003002:	d107      	bne.n	8003014 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003004:	230e      	movs	r3, #14
 8003006:	446b      	add	r3, sp
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LoadEEstreams+0x144>)
 800300e:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <LoadEEstreams+0x148>)
 8003012:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LoadEEstreams+0x134>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LoadEEstreams+0xe4>
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <LoadEEstreams+0x138>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d112      	bne.n	800304a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <LoadEEstreams+0x13c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <LoadEEstreams+0xf4>
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <LoadEEstreams+0x140>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d111      	bne.n	8003058 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoadEEstreams+0x144>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <LoadEEstreams+0x104>
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <LoadEEstreams+0x148>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d110      	bne.n	8003066 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b004      	add	sp, #16
 8003048:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	0029      	movs	r1, r5
 8003050:	0030      	movs	r0, r6
 8003052:	f006 f9fb 	bl	800944c <SetupDMAStreams>
 8003056:	e7e5      	b.n	8003024 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	0022      	movs	r2, r4
 800305c:	0029      	movs	r1, r5
 800305e:	0030      	movs	r0, r6
 8003060:	f006 f9f4 	bl	800944c <SetupDMAStreams>
 8003064:	e7e6      	b.n	8003034 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	0022      	movs	r2, r4
 800306a:	0029      	movs	r1, r5
 800306c:	0030      	movs	r0, r6
 800306e:	f006 f9ed 	bl	800944c <SetupDMAStreams>
 8003072:	e7e7      	b.n	8003044 <LoadEEstreams+0x104>
 8003074:	200011c2 	.word	0x200011c2
 8003078:	20000ecd 	.word	0x20000ecd
 800307c:	200011c3 	.word	0x200011c3
 8003080:	20000ece 	.word	0x20000ece
 8003084:	200011c4 	.word	0x200011c4
 8003088:	20000ecf 	.word	0x20000ecf

0800308c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003090:	208a      	movs	r0, #138	; 0x8a
 8003092:	466b      	mov	r3, sp
 8003094:	1d99      	adds	r1, r3, #6
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f004 fb9c 	bl	80077d4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d000      	beq.n	80030a2 <LoadEEparams+0x16>
 80030a0:	e075      	b.n	800318e <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 80030a2:	466b      	mov	r3, sp
 80030a4:	3306      	adds	r3, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a55      	ldr	r2, [pc, #340]	; (8003200 <LoadEEparams+0x174>)
 80030aa:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030b0:	208e      	movs	r0, #142	; 0x8e
 80030b2:	466b      	mov	r3, sp
 80030b4:	1d99      	adds	r1, r3, #6
 80030b6:	0040      	lsls	r0, r0, #1
 80030b8:	f004 fb8c 	bl	80077d4 <EE_ReadVariable>

	if(!status1){
 80030bc:	2800      	cmp	r0, #0
 80030be:	d000      	beq.n	80030c2 <LoadEEparams+0x36>
 80030c0:	e06c      	b.n	800319c <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030c2:	466b      	mov	r3, sp
 80030c4:	3306      	adds	r3, #6
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <LoadEEparams+0x174>)
 80030ca:	0bd9      	lsrs	r1, r3, #15
 80030cc:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030d2:	2016      	movs	r0, #22
 80030d4:	466b      	mov	r3, sp
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f004 fb7b 	bl	80077d4 <EE_ReadVariable>
	if(!status1)
 80030de:	2800      	cmp	r0, #0
 80030e0:	d163      	bne.n	80031aa <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 80030e2:	466b      	mov	r3, sp
 80030e4:	88da      	ldrh	r2, [r3, #6]
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <LoadEEparams+0x178>)
 80030e8:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030ea:	208b      	movs	r0, #139	; 0x8b
 80030ec:	466b      	mov	r3, sp
 80030ee:	1d99      	adds	r1, r3, #6
 80030f0:	0040      	lsls	r0, r0, #1
 80030f2:	f004 fb6f 	bl	80077d4 <EE_ReadVariable>
	if(!status1)
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d15c      	bne.n	80031b4 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 80030fa:	466b      	mov	r3, sp
 80030fc:	88da      	ldrh	r2, [r3, #6]
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <LoadEEparams+0x178>)
 8003100:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003102:	2018      	movs	r0, #24
 8003104:	466b      	mov	r3, sp
 8003106:	1d99      	adds	r1, r3, #6
 8003108:	30ff      	adds	r0, #255	; 0xff
 800310a:	f004 fb63 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 800310e:	2800      	cmp	r0, #0
 8003110:	d155      	bne.n	80031be <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003112:	466b      	mov	r3, sp
 8003114:	3306      	adds	r3, #6
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <LoadEEparams+0x178>)
 800311a:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003120:	208c      	movs	r0, #140	; 0x8c
 8003122:	466b      	mov	r3, sp
 8003124:	1d99      	adds	r1, r3, #6
 8003126:	0040      	lsls	r0, r0, #1
 8003128:	f004 fb54 	bl	80077d4 <EE_ReadVariable>
 800312c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800312e:	201a      	movs	r0, #26
 8003130:	a901      	add	r1, sp, #4
 8003132:	30ff      	adds	r0, #255	; 0xff
 8003134:	f004 fb4e 	bl	80077d4 <EE_ReadVariable>
	if(!status1 && !status2){
 8003138:	4304      	orrs	r4, r0
 800313a:	b2a4      	uxth	r4, r4
 800313c:	2c00      	cmp	r4, #0
 800313e:	d145      	bne.n	80031cc <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003140:	ab01      	add	r3, sp, #4
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	466a      	mov	r2, sp
 8003148:	3206      	adds	r2, #6
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <LoadEEparams+0x178>)
 8003150:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003152:	208d      	movs	r0, #141	; 0x8d
 8003154:	466b      	mov	r3, sp
 8003156:	1d99      	adds	r1, r3, #6
 8003158:	0040      	lsls	r0, r0, #1
 800315a:	f004 fb3b 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 800315e:	2800      	cmp	r0, #0
 8003160:	d142      	bne.n	80031e8 <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 8003162:	466b      	mov	r3, sp
 8003164:	3306      	adds	r3, #6
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <LoadEEparams+0x178>)
 800316a:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003170:	201c      	movs	r0, #28
 8003172:	466b      	mov	r3, sp
 8003174:	1d99      	adds	r1, r3, #6
 8003176:	30ff      	adds	r0, #255	; 0xff
 8003178:	f004 fb2c 	bl	80077d4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d039      	beq.n	80031f4 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <LoadEEparams+0x17c>)
 8003182:	7e9a      	ldrb	r2, [r3, #26]
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <LoadEEparams+0x178>)
 8003186:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 8003188:	2000      	movs	r0, #0
 800318a:	b002      	add	sp, #8
 800318c:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 800318e:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <LoadEEparams+0x174>)
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <LoadEEparams+0x180>)
 8003192:	7811      	ldrb	r1, [r2, #0]
 8003194:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003196:	7852      	ldrb	r2, [r2, #1]
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e789      	b.n	80030b0 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <LoadEEparams+0x174>)
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <LoadEEparams+0x180>)
 80031a0:	7911      	ldrb	r1, [r2, #4]
 80031a2:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031a4:	88d2      	ldrh	r2, [r2, #6]
 80031a6:	80da      	strh	r2, [r3, #6]
 80031a8:	e793      	b.n	80030d2 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <LoadEEparams+0x17c>)
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <LoadEEparams+0x178>)
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	e79a      	b.n	80030ea <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <LoadEEparams+0x17c>)
 80031b6:	885a      	ldrh	r2, [r3, #2]
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <LoadEEparams+0x178>)
 80031ba:	805a      	strh	r2, [r3, #2]
 80031bc:	e7a1      	b.n	8003102 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <LoadEEparams+0x178>)
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <LoadEEparams+0x17c>)
 80031c2:	7911      	ldrb	r1, [r2, #4]
 80031c4:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80031c6:	7952      	ldrb	r2, [r2, #5]
 80031c8:	715a      	strb	r2, [r3, #5]
 80031ca:	e7a9      	b.n	8003120 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <LoadEEparams+0x184>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <LoadEEparams+0x178>)
 80031d6:	22e1      	movs	r2, #225	; 0xe1
 80031d8:	0252      	lsls	r2, r2, #9
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e7b9      	b.n	8003152 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <LoadEEparams+0x17c>)
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <LoadEEparams+0x178>)
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	e7b4      	b.n	8003152 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <LoadEEparams+0x178>)
 80031ea:	2218      	movs	r2, #24
 80031ec:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031ee:	2200      	movs	r2, #0
 80031f0:	731a      	strb	r2, [r3, #12]
 80031f2:	e7bd      	b.n	8003170 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 80031f4:	466b      	mov	r3, sp
 80031f6:	88da      	ldrh	r2, [r3, #6]
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <LoadEEparams+0x178>)
 80031fa:	769a      	strb	r2, [r3, #26]
 80031fc:	e7c4      	b.n	8003188 <LoadEEparams+0xfc>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20006dd4 	.word	0x20006dd4
 8003204:	20006e54 	.word	0x20006e54
 8003208:	20000028 	.word	0x20000028
 800320c:	20000020 	.word	0x20000020
 8003210:	20000ae7 	.word	0x20000ae7

08003214 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	46ce      	mov	lr, r9
 8003218:	4647      	mov	r7, r8
 800321a:	b580      	push	{r7, lr}
 800321c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800321e:	231e      	movs	r3, #30
 8003220:	446b      	add	r3, sp
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	2501      	movs	r5, #1
 8003228:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800322a:	001e      	movs	r6, r3
 800322c:	230f      	movs	r3, #15
 800322e:	4698      	mov	r8, r3
 8003230:	e004      	b.n	800323c <LoadEEbuttons+0x28>
 8003232:	3404      	adds	r4, #4
 8003234:	b2a4      	uxth	r4, r4
 8003236:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003238:	2d08      	cmp	r5, #8
 800323a:	d058      	beq.n	80032ee <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800323c:	0031      	movs	r1, r6
 800323e:	0020      	movs	r0, r4
 8003240:	f004 fac8 	bl	80077d4 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 8003244:	2800      	cmp	r0, #0
 8003246:	d1f4      	bne.n	8003232 <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003248:	8831      	ldrh	r1, [r6, #0]
 800324a:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800324c:	091a      	lsrs	r2, r3, #4
 800324e:	42aa      	cmp	r2, r5
 8003250:	d1ef      	bne.n	8003232 <LoadEEbuttons+0x1e>
 8003252:	4640      	mov	r0, r8
 8003254:	4003      	ands	r3, r0
 8003256:	d0ec      	beq.n	8003232 <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003258:	00d0      	lsls	r0, r2, #3
 800325a:	1882      	adds	r2, r0, r2
 800325c:	4827      	ldr	r0, [pc, #156]	; (80032fc <LoadEEbuttons+0xe8>)
 800325e:	4681      	mov	r9, r0
 8003260:	4491      	add	r9, r2
 8003262:	464a      	mov	r2, r9
 8003264:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 8003266:	7211      	strb	r1, [r2, #8]
 8003268:	00af      	lsls	r7, r5, #2
 800326a:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800326c:	0038      	movs	r0, r7
 800326e:	30e9      	adds	r0, #233	; 0xe9
 8003270:	b280      	uxth	r0, r0
 8003272:	0031      	movs	r1, r6
 8003274:	f004 faae 	bl	80077d4 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003278:	8833      	ldrh	r3, [r6, #0]
 800327a:	0a1a      	lsrs	r2, r3, #8
 800327c:	4649      	mov	r1, r9
 800327e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003280:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003282:	0038      	movs	r0, r7
 8003284:	30ea      	adds	r0, #234	; 0xea
 8003286:	b280      	uxth	r0, r0
 8003288:	0031      	movs	r1, r6
 800328a:	f004 faa3 	bl	80077d4 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800328e:	8833      	ldrh	r3, [r6, #0]
 8003290:	0a1a      	lsrs	r2, r3, #8
 8003292:	4649      	mov	r1, r9
 8003294:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003296:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003298:	37eb      	adds	r7, #235	; 0xeb
 800329a:	b2b8      	uxth	r0, r7
 800329c:	0031      	movs	r1, r6
 800329e:	f004 fa99 	bl	80077d4 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032a2:	8833      	ldrh	r3, [r6, #0]
 80032a4:	0a1a      	lsrs	r2, r3, #8
 80032a6:	4649      	mov	r1, r9
 80032a8:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032aa:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80032ac:	b2ef      	uxtb	r7, r5
 80032ae:	7848      	ldrb	r0, [r1, #1]
 80032b0:	0039      	movs	r1, r7
 80032b2:	f005 f96d 	bl	8008590 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032b6:	464b      	mov	r3, r9
 80032b8:	7a19      	ldrb	r1, [r3, #8]
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	104a      	asrs	r2, r1, #1
 80032be:	2001      	movs	r0, #1
 80032c0:	4002      	ands	r2, r0
 80032c2:	4001      	ands	r1, r0
 80032c4:	2000      	movs	r0, #0
 80032c6:	9005      	str	r0, [sp, #20]
 80032c8:	4648      	mov	r0, r9
 80032ca:	79c0      	ldrb	r0, [r0, #7]
 80032cc:	9004      	str	r0, [sp, #16]
 80032ce:	4648      	mov	r0, r9
 80032d0:	7980      	ldrb	r0, [r0, #6]
 80032d2:	9003      	str	r0, [sp, #12]
 80032d4:	4648      	mov	r0, r9
 80032d6:	7940      	ldrb	r0, [r0, #5]
 80032d8:	9002      	str	r0, [sp, #8]
 80032da:	4648      	mov	r0, r9
 80032dc:	7900      	ldrb	r0, [r0, #4]
 80032de:	9001      	str	r0, [sp, #4]
 80032e0:	4648      	mov	r0, r9
 80032e2:	78c0      	ldrb	r0, [r0, #3]
 80032e4:	9000      	str	r0, [sp, #0]
 80032e6:	0038      	movs	r0, r7
 80032e8:	f005 fa6c 	bl	80087c4 <SetButtonEvents>
 80032ec:	e7a1      	b.n	8003232 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	b009      	add	sp, #36	; 0x24
 80032f2:	bc0c      	pop	{r2, r3}
 80032f4:	4690      	mov	r8, r2
 80032f6:	4699      	mov	r9, r3
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20001974 	.word	0x20001974

08003300 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	46de      	mov	lr, fp
 8003304:	4657      	mov	r7, sl
 8003306:	464e      	mov	r6, r9
 8003308:	b5c0      	push	{r6, r7, lr}
 800330a:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800330c:	2032      	movs	r0, #50	; 0x32
 800330e:	f011 f8cb 	bl	80144a8 <malloc>
 8003312:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003314:	d100      	bne.n	8003318 <LoadROsnippets+0x18>
 8003316:	e071      	b.n	80033fc <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <LoadROsnippets+0x100>)
 800331a:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 800331c:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 800331e:	2bfe      	cmp	r3, #254	; 0xfe
 8003320:	d166      	bne.n	80033f0 <LoadROsnippets+0xf0>
 8003322:	4e38      	ldr	r6, [pc, #224]	; (8003404 <LoadROsnippets+0x104>)
 8003324:	3b9a      	subs	r3, #154	; 0x9a
 8003326:	469b      	mov	fp, r3
 8003328:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800332a:	4d35      	ldr	r5, [pc, #212]	; (8003400 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800332c:	1c7b      	adds	r3, r7, #1
 800332e:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <LoadROsnippets+0x108>)
 8003332:	4699      	mov	r9, r3
 8003334:	e023      	b.n	800337e <LoadROsnippets+0x7e>
		i =0;
 8003336:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 8003338:	193b      	adds	r3, r7, r4
 800333a:	3b01      	subs	r3, #1
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 8003342:	3401      	adds	r4, #1
 8003344:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 8003346:	0020      	movs	r0, r4
 8003348:	f011 f8ae 	bl	80144a8 <malloc>
 800334c:	4653      	mov	r3, sl
 800334e:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003350:	2800      	cmp	r0, #0
 8003352:	d03f      	beq.n	80033d4 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003354:	0022      	movs	r2, r4
 8003356:	0039      	movs	r1, r7
 8003358:	f011 faf3 	bl	8014942 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800335c:	464b      	mov	r3, r9
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	464a      	mov	r2, r9
 8003364:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003366:	0022      	movs	r2, r4
 8003368:	2100      	movs	r1, #0
 800336a:	0038      	movs	r0, r7
 800336c:	f011 faf2 	bl	8014954 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003370:	9b00      	ldr	r3, [sp, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2bfe      	cmp	r3, #254	; 0xfe
 8003376:	d137      	bne.n	80033e8 <LoadROsnippets+0xe8>
 8003378:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 800337a:	455e      	cmp	r6, fp
 800337c:	d034      	beq.n	80033e8 <LoadROsnippets+0xe8>
 800337e:	0028      	movs	r0, r5
 8003380:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 8003382:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003384:	1b79      	subs	r1, r7, r5
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	54ca      	strb	r2, [r1, r3]
 800338a:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 800338c:	4283      	cmp	r3, r0
 800338e:	d1fa      	bne.n	8003386 <LoadROsnippets+0x86>
 8003390:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003392:	46b2      	mov	sl, r6
 8003394:	2214      	movs	r2, #20
 8003396:	9901      	ldr	r1, [sp, #4]
 8003398:	0030      	movs	r0, r6
 800339a:	f011 fad2 	bl	8014942 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 800339e:	2214      	movs	r2, #20
 80033a0:	2100      	movs	r1, #0
 80033a2:	0038      	movs	r0, r7
 80033a4:	f011 fad6 	bl	8014954 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033a8:	9500      	str	r5, [sp, #0]
 80033aa:	782a      	ldrb	r2, [r5, #0]
 80033ac:	1c93      	adds	r3, r2, #2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d9c0      	bls.n	8003336 <LoadROsnippets+0x36>
 80033b4:	0039      	movs	r1, r7
		i =0;
 80033b6:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80033b8:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 80033ba:	3501      	adds	r5, #1
			++i;
 80033bc:	3401      	adds	r4, #1
 80033be:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033c0:	9500      	str	r5, [sp, #0]
 80033c2:	782a      	ldrb	r2, [r5, #0]
 80033c4:	1c93      	adds	r3, r2, #2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d9b5      	bls.n	8003338 <LoadROsnippets+0x38>
 80033cc:	3101      	adds	r1, #1
 80033ce:	2c32      	cmp	r4, #50	; 0x32
 80033d0:	d1f2      	bne.n	80033b8 <LoadROsnippets+0xb8>
 80033d2:	e7b1      	b.n	8003338 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033d4:	2214      	movs	r2, #20
 80033d6:	2100      	movs	r1, #0
 80033d8:	4650      	mov	r0, sl
 80033da:	f011 fabb 	bl	8014954 <memset>
			free(snipBuffer);
 80033de:	0038      	movs	r0, r7
 80033e0:	f011 f86c 	bl	80144bc <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033e4:	200e      	movs	r0, #14
 80033e6:	e003      	b.n	80033f0 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 80033e8:	0038      	movs	r0, r7
 80033ea:	f011 f867 	bl	80144bc <free>
	return BOS_OK;
 80033ee:	2000      	movs	r0, #0
}
 80033f0:	b002      	add	sp, #8
 80033f2:	bc1c      	pop	{r2, r3, r4}
 80033f4:	4691      	mov	r9, r2
 80033f6:	469a      	mov	sl, r3
 80033f8:	46a3      	mov	fp, r4
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80033fc:	20fb      	movs	r0, #251	; 0xfb
 80033fe:	e7f7      	b.n	80033f0 <LoadROsnippets+0xf0>
 8003400:	0801dc00 	.word	0x0801dc00
 8003404:	20006e70 	.word	0x20006e70
 8003408:	20001297 	.word	0x20001297

0800340c <LoadEEvars>:
void LoadEEvars(void){
 800340c:	b510      	push	{r4, lr}
	LoadROtopology();
 800340e:	f7ff fc89 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 8003412:	f7ff fcdb 	bl	8002dcc <LoadEEportsDir>
	LoadEEalias();
 8003416:	f7ff fcfd 	bl	8002e14 <LoadEEalias>
	LoadEEgroup();
 800341a:	f7ff fd3d 	bl	8002e98 <LoadEEgroup>
	LoadEEstreams();
 800341e:	f7ff fd8f 	bl	8002f40 <LoadEEstreams>
	LoadEEparams();
 8003422:	f7ff fe33 	bl	800308c <LoadEEparams>
	LoadEEbuttons();
 8003426:	f7ff fef5 	bl	8003214 <LoadEEbuttons>
	LoadROsnippets();
 800342a:	f7ff ff69 	bl	8003300 <LoadROsnippets>
}
 800342e:	bd10      	pop	{r4, pc}

08003430 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <SaveEEportsDir+0x4c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <SaveEEportsDir+0x42>
 800343c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003442:	4e0f      	ldr	r6, [pc, #60]	; (8003480 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 8003444:	4f0d      	ldr	r7, [pc, #52]	; (800347c <SaveEEportsDir+0x4c>)
 8003446:	e008      	b.n	800345a <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003448:	1c60      	adds	r0, r4, #1
 800344a:	f004 f9f3 	bl	8007834 <EE_WriteVariable>
 800344e:	e00a      	b.n	8003466 <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003450:	3401      	adds	r4, #1
 8003452:	b2e4      	uxtb	r4, r4
 8003454:	783b      	ldrb	r3, [r7, #0]
 8003456:	42a3      	cmp	r3, r4
 8003458:	d30d      	bcc.n	8003476 <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 800345a:	0025      	movs	r5, r4
 800345c:	1e63      	subs	r3, r4, #1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	5b99      	ldrh	r1, [r3, r6]
 8003462:	2900      	cmp	r1, #0
 8003464:	d1f0      	bne.n	8003448 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003466:	3502      	adds	r5, #2
 8003468:	2d1b      	cmp	r5, #27
 800346a:	ddf1      	ble.n	8003450 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 800346c:	230a      	movs	r3, #10
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	e7ee      	b.n	8003450 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 8003476:	9801      	ldr	r0, [sp, #4]
 8003478:	b003      	add	sp, #12
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347c:	20000044 	.word	0x20000044
 8003480:	2000735c 	.word	0x2000735c

08003484 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	46d6      	mov	lr, sl
 8003488:	464f      	mov	r7, r9
 800348a:	4646      	mov	r6, r8
 800348c:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800348e:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003490:	2300      	movs	r3, #0
 8003492:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <SaveEEalias+0x7c>)
 8003496:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <SaveEEalias+0x80>)
 800349a:	4699      	mov	r9, r3
 800349c:	e005      	b.n	80034aa <SaveEEalias+0x26>
 800349e:	3601      	adds	r6, #1
 80034a0:	b2f6      	uxtb	r6, r6
 80034a2:	464b      	mov	r3, r9
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	42b3      	cmp	r3, r6
 80034a8:	d324      	bcc.n	80034f4 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 80034aa:	00b3      	lsls	r3, r6, #2
 80034ac:	199b      	adds	r3, r3, r6
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4652      	mov	r2, sl
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f2      	beq.n	800349e <SaveEEalias+0x1a>
 80034b8:	00b5      	lsls	r5, r6, #2
 80034ba:	19ad      	adds	r5, r5, r6
 80034bc:	006d      	lsls	r5, r5, #1
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <SaveEEalias+0x7c>)
 80034c0:	469c      	mov	ip, r3
 80034c2:	4465      	add	r5, ip
 80034c4:	4644      	mov	r4, r8
 80034c6:	341c      	adds	r4, #28
 80034c8:	b2a4      	uxth	r4, r4
 80034ca:	4647      	mov	r7, r8
 80034cc:	3721      	adds	r7, #33	; 0x21
 80034ce:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80034d0:	782b      	ldrb	r3, [r5, #0]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	7869      	ldrb	r1, [r5, #1]
 80034d6:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034d8:	b289      	uxth	r1, r1
 80034da:	0020      	movs	r0, r4
 80034dc:	f004 f9aa 	bl	8007834 <EE_WriteVariable>
 80034e0:	3502      	adds	r5, #2
 80034e2:	3401      	adds	r4, #1
 80034e4:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034e6:	42bc      	cmp	r4, r7
 80034e8:	d1f2      	bne.n	80034d0 <SaveEEalias+0x4c>
 80034ea:	4643      	mov	r3, r8
 80034ec:	3305      	adds	r3, #5
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4698      	mov	r8, r3
 80034f2:	e7d4      	b.n	800349e <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80034f4:	2000      	movs	r0, #0
 80034f6:	bc1c      	pop	{r2, r3, r4}
 80034f8:	4690      	mov	r8, r2
 80034fa:	4699      	mov	r9, r3
 80034fc:	46a2      	mov	sl, r4
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	20000fdc 	.word	0x20000fdc
 8003504:	20000044 	.word	0x20000044

08003508 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	46de      	mov	lr, fp
 800350c:	4657      	mov	r7, sl
 800350e:	464e      	mov	r6, r9
 8003510:	4645      	mov	r5, r8
 8003512:	b5e0      	push	{r5, r6, r7, lr}
 8003514:	000f      	movs	r7, r1
 8003516:	0016      	movs	r6, r2
 8003518:	4699      	mov	r9, r3
 800351a:	ab0a      	add	r3, sp, #40	; 0x28
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	469b      	mov	fp, r3
 8003520:	ab0b      	add	r3, sp, #44	; 0x2c
 8003522:	781d      	ldrb	r5, [r3, #0]
 8003524:	ab0c      	add	r3, sp, #48	; 0x30
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	469a      	mov	sl, r3
 800352a:	ab0d      	add	r3, sp, #52	; 0x34
 800352c:	781c      	ldrb	r4, [r3, #0]
 800352e:	ab0e      	add	r3, sp, #56	; 0x38
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003534:	b281      	uxth	r1, r0
 8003536:	20e4      	movs	r0, #228	; 0xe4
 8003538:	f004 f97c 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800353c:	0a39      	lsrs	r1, r7, #8
 800353e:	b289      	uxth	r1, r1
 8003540:	20e5      	movs	r0, #229	; 0xe5
 8003542:	f004 f977 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003546:	b2b9      	uxth	r1, r7
 8003548:	20e6      	movs	r0, #230	; 0xe6
 800354a:	f004 f973 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800354e:	0a31      	lsrs	r1, r6, #8
 8003550:	b289      	uxth	r1, r1
 8003552:	20e7      	movs	r0, #231	; 0xe7
 8003554:	f004 f96e 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003558:	b2b1      	uxth	r1, r6
 800355a:	20e8      	movs	r0, #232	; 0xe8
 800355c:	f004 f96a 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003560:	464b      	mov	r3, r9
 8003562:	0219      	lsls	r1, r3, #8
 8003564:	4459      	add	r1, fp
 8003566:	b289      	uxth	r1, r1
 8003568:	20e9      	movs	r0, #233	; 0xe9
 800356a:	f004 f963 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800356e:	022d      	lsls	r5, r5, #8
 8003570:	4455      	add	r5, sl
 8003572:	b2a9      	uxth	r1, r5
 8003574:	20ea      	movs	r0, #234	; 0xea
 8003576:	f004 f95d 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800357a:	0224      	lsls	r4, r4, #8
 800357c:	4444      	add	r4, r8
 800357e:	b2a1      	uxth	r1, r4
 8003580:	20eb      	movs	r0, #235	; 0xeb
 8003582:	f004 f957 	bl	8007834 <EE_WriteVariable>
	
	return result;
}
 8003586:	2000      	movs	r0, #0
 8003588:	bc3c      	pop	{r2, r3, r4, r5}
 800358a:	4690      	mov	r8, r2
 800358c:	4699      	mov	r9, r3
 800358e:	46a2      	mov	sl, r4
 8003590:	46ab      	mov	fp, r5
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003594 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003594:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003596:	4c1f      	ldr	r4, [pc, #124]	; (8003614 <SaveEEparams+0x80>)
 8003598:	7863      	ldrb	r3, [r4, #1]
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	7821      	ldrb	r1, [r4, #0]
 800359e:	4319      	orrs	r1, r3
 80035a0:	208a      	movs	r0, #138	; 0x8a
 80035a2:	0040      	lsls	r0, r0, #1
 80035a4:	f004 f946 	bl	8007834 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80035a8:	7921      	ldrb	r1, [r4, #4]
 80035aa:	03c9      	lsls	r1, r1, #15
 80035ac:	88e3      	ldrh	r3, [r4, #6]
 80035ae:	4319      	orrs	r1, r3
 80035b0:	b289      	uxth	r1, r1
 80035b2:	208e      	movs	r0, #142	; 0x8e
 80035b4:	0040      	lsls	r0, r0, #1
 80035b6:	f004 f93d 	bl	8007834 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80035ba:	4c17      	ldr	r4, [pc, #92]	; (8003618 <SaveEEparams+0x84>)
 80035bc:	8821      	ldrh	r1, [r4, #0]
 80035be:	2016      	movs	r0, #22
 80035c0:	30ff      	adds	r0, #255	; 0xff
 80035c2:	f004 f937 	bl	8007834 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035c6:	8861      	ldrh	r1, [r4, #2]
 80035c8:	208b      	movs	r0, #139	; 0x8b
 80035ca:	0040      	lsls	r0, r0, #1
 80035cc:	f004 f932 	bl	8007834 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035d0:	7963      	ldrb	r3, [r4, #5]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	7b21      	ldrb	r1, [r4, #12]
 80035d6:	4319      	orrs	r1, r3
 80035d8:	2018      	movs	r0, #24
 80035da:	30ff      	adds	r0, #255	; 0xff
 80035dc:	f004 f92a 	bl	8007834 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035e0:	8921      	ldrh	r1, [r4, #8]
 80035e2:	208c      	movs	r0, #140	; 0x8c
 80035e4:	0040      	lsls	r0, r0, #1
 80035e6:	f004 f925 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035ea:	8961      	ldrh	r1, [r4, #10]
 80035ec:	201a      	movs	r0, #26
 80035ee:	30ff      	adds	r0, #255	; 0xff
 80035f0:	f004 f920 	bl	8007834 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035f4:	7b63      	ldrb	r3, [r4, #13]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	7921      	ldrb	r1, [r4, #4]
 80035fa:	4319      	orrs	r1, r3
 80035fc:	208d      	movs	r0, #141	; 0x8d
 80035fe:	0040      	lsls	r0, r0, #1
 8003600:	f004 f918 	bl	8007834 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003604:	7ea1      	ldrb	r1, [r4, #26]
 8003606:	201c      	movs	r0, #28
 8003608:	30ff      	adds	r0, #255	; 0xff
 800360a:	f004 f913 	bl	8007834 <EE_WriteVariable>
	
	return result;
}
 800360e:	2000      	movs	r0, #0
 8003610:	bd10      	pop	{r4, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20006dd4 	.word	0x20006dd4
 8003618:	20006e54 	.word	0x20006e54

0800361c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003620:	2234      	movs	r2, #52	; 0x34
 8003622:	2100      	movs	r1, #0
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <ClearEEportsDir+0x58>)
 8003626:	f011 f995 	bl	8014954 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <ClearEEportsDir+0x5c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <ClearEEportsDir+0x4c>
 8003632:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003638:	4e0e      	ldr	r6, [pc, #56]	; (8003674 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 800363a:	4f0f      	ldr	r7, [pc, #60]	; (8003678 <ClearEEportsDir+0x5c>)
 800363c:	e008      	b.n	8003650 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800363e:	1c60      	adds	r0, r4, #1
 8003640:	f004 f8f8 	bl	8007834 <EE_WriteVariable>
 8003644:	e00a      	b.n	800365c <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 8003646:	3401      	adds	r4, #1
 8003648:	b2e4      	uxtb	r4, r4
 800364a:	783b      	ldrb	r3, [r7, #0]
 800364c:	42a3      	cmp	r3, r4
 800364e:	d30d      	bcc.n	800366c <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003650:	0025      	movs	r5, r4
 8003652:	1e63      	subs	r3, r4, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	5b99      	ldrh	r1, [r3, r6]
 8003658:	2900      	cmp	r1, #0
 800365a:	d1f0      	bne.n	800363e <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800365c:	3502      	adds	r5, #2
 800365e:	2d1b      	cmp	r5, #27
 8003660:	ddf1      	ble.n	8003646 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003662:	230a      	movs	r3, #10
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	e7ee      	b.n	8003646 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800366c:	9801      	ldr	r0, [sp, #4]
 800366e:	b003      	add	sp, #12
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	2000735c 	.word	0x2000735c
 8003678:	20000044 	.word	0x20000044

0800367c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800367c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <EE_FormatForFactoryReset+0x1c>)
 8003680:	4a06      	ldr	r2, [pc, #24]	; (800369c <EE_FormatForFactoryReset+0x20>)
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d006      	beq.n	8003696 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003688:	f004 f97c 	bl	8007984 <EE_Format>
 800368c:	2800      	cmp	r0, #0
 800368e:	d102      	bne.n	8003696 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <EE_FormatForFactoryReset+0x20>)
 8003692:	4a01      	ldr	r2, [pc, #4]	; (8003698 <EE_FormatForFactoryReset+0x1c>)
 8003694:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003696:	bd10      	pop	{r4, pc}
 8003698:	beefdead 	.word	0xbeefdead
 800369c:	20007ff0 	.word	0x20007ff0

080036a0 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036a4:	2512      	movs	r5, #18
 80036a6:	446d      	add	r5, sp
 80036a8:	ab04      	add	r3, sp, #16
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	ab07      	add	r3, sp, #28
 80036ae:	002a      	movs	r2, r5
 80036b0:	a908      	add	r1, sp, #32
 80036b2:	2001      	movs	r0, #1
 80036b4:	f00a fae6 	bl	800dc84 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036b8:	ac03      	add	r4, sp, #12
 80036ba:	9400      	str	r4, [sp, #0]
 80036bc:	ab05      	add	r3, sp, #20
 80036be:	220e      	movs	r2, #14
 80036c0:	446a      	add	r2, sp
 80036c2:	a906      	add	r1, sp, #24
 80036c4:	2002      	movs	r0, #2
 80036c6:	f00a fadd 	bl	800dc84 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ca:	2301      	movs	r3, #1
 80036cc:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2600      	movs	r6, #0
 80036d0:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036d2:	882b      	ldrh	r3, [r5, #0]
 80036d4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036d6:	a909      	add	r1, sp, #36	; 0x24
 80036d8:	9808      	ldr	r0, [sp, #32]
 80036da:	f00e fd03 	bl	80120e4 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036de:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036e0:	2302      	movs	r3, #2
 80036e2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036e4:	8823      	ldrh	r3, [r4, #0]
 80036e6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036e8:	a909      	add	r1, sp, #36	; 0x24
 80036ea:	9805      	ldr	r0, [sp, #20]
 80036ec:	f00e fcfa 	bl	80120e4 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036f0:	8829      	ldrh	r1, [r5, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	9808      	ldr	r0, [sp, #32]
 80036f6:	f00e fe69 	bl	80123cc <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036fa:	2005      	movs	r0, #5
 80036fc:	f00a fef6 	bl	800e4ec <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003700:	8821      	ldrh	r1, [r4, #0]
 8003702:	9805      	ldr	r0, [sp, #20]
 8003704:	f00e fe5c 	bl	80123c0 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003708:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800370a:	2800      	cmp	r0, #0
 800370c:	d002      	beq.n	8003714 <IsLowerCLIbaud+0x74>
}
 800370e:	0018      	movs	r0, r3
 8003710:	b00e      	add	sp, #56	; 0x38
 8003712:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003714:	3312      	adds	r3, #18
 8003716:	446b      	add	r3, sp
 8003718:	8819      	ldrh	r1, [r3, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	9808      	ldr	r0, [sp, #32]
 800371e:	f00e fe55 	bl	80123cc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003722:	2005      	movs	r0, #5
 8003724:	f00a fee2 	bl	800e4ec <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003728:	ab03      	add	r3, sp, #12
 800372a:	8819      	ldrh	r1, [r3, #0]
 800372c:	9805      	ldr	r0, [sp, #20]
 800372e:	f00e fe47 	bl	80123c0 <HAL_GPIO_ReadPin>
 8003732:	3801      	subs	r0, #1
 8003734:	4243      	negs	r3, r0
 8003736:	4143      	adcs	r3, r0
			return 1;
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e7e8      	b.n	800370e <IsLowerCLIbaud+0x6e>

0800373c <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800373c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800373e:	f00b f8af 	bl	800e8a0 <GetUart>
 8003742:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 8003744:	23e1      	movs	r3, #225	; 0xe1
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	015b      	lsls	r3, r3, #5
 8003754:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003756:	f010 fd05 	bl	8014164 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	6813      	ldr	r3, [r2, #0]
 800375e:	2120      	movs	r1, #32
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bd10      	pop	{r4, pc}
	...

08003768 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	0006      	movs	r6, r0
 800376c:	4d08      	ldr	r5, [pc, #32]	; (8003790 <IsModuleParameter+0x28>)
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 800376e:	2400      	movs	r4, #0
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003770:	68a9      	ldr	r1, [r5, #8]
 8003772:	0030      	movs	r0, r6
 8003774:	f7fc fcc6 	bl	8000104 <strcmp>
 8003778:	2800      	cmp	r0, #0
 800377a:	d006      	beq.n	800378a <IsModuleParameter+0x22>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 800377c:	3401      	adds	r4, #1
 800377e:	b2e4      	uxtb	r4, r4
 8003780:	350c      	adds	r5, #12
 8003782:	2c07      	cmp	r4, #7
 8003784:	d1f4      	bne.n	8003770 <IsModuleParameter+0x8>
			return i + 1;
	}
	return 0;
 8003786:	2000      	movs	r0, #0
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
			return i + 1;
 800378a:	3401      	adds	r4, #1
 800378c:	b2e0      	uxtb	r0, r4
 800378e:	e7fb      	b.n	8003788 <IsModuleParameter+0x20>
 8003790:	200000ac 	.word	0x200000ac

08003794 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003798:	491b      	ldr	r1, [pc, #108]	; (8003808 <IsMathOperator+0x74>)
 800379a:	f7fc fcb3 	bl	8000104 <strcmp>
 800379e:	0006      	movs	r6, r0
 80037a0:	2506      	movs	r5, #6
 80037a2:	2e00      	cmp	r6, #0
 80037a4:	d023      	beq.n	80037ee <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80037a6:	4919      	ldr	r1, [pc, #100]	; (800380c <IsMathOperator+0x78>)
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fc fcab 	bl	8000104 <strcmp>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d01f      	beq.n	80037f2 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80037b2:	4917      	ldr	r1, [pc, #92]	; (8003810 <IsMathOperator+0x7c>)
 80037b4:	0020      	movs	r0, r4
 80037b6:	f7fc fca5 	bl	8000104 <strcmp>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d01b      	beq.n	80037f6 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80037be:	4915      	ldr	r1, [pc, #84]	; (8003814 <IsMathOperator+0x80>)
 80037c0:	0020      	movs	r0, r4
 80037c2:	f7fc fc9f 	bl	8000104 <strcmp>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d017      	beq.n	80037fa <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80037ca:	4913      	ldr	r1, [pc, #76]	; (8003818 <IsMathOperator+0x84>)
 80037cc:	0020      	movs	r0, r4
 80037ce:	f7fc fc99 	bl	8000104 <strcmp>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d013      	beq.n	80037fe <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80037d6:	4911      	ldr	r1, [pc, #68]	; (800381c <IsMathOperator+0x88>)
 80037d8:	0020      	movs	r0, r4
 80037da:	f7fc fc93 	bl	8000104 <strcmp>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d00f      	beq.n	8003802 <IsMathOperator+0x6e>
 80037e2:	3d01      	subs	r5, #1
 80037e4:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	d1db      	bne.n	80037a2 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80037ee:	2001      	movs	r0, #1
 80037f0:	e7fc      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_GREATER;
 80037f2:	2002      	movs	r0, #2
 80037f4:	e7fa      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_SMALLER;
 80037f6:	2003      	movs	r0, #3
 80037f8:	e7f8      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80037fa:	2004      	movs	r0, #4
 80037fc:	e7f6      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80037fe:	2005      	movs	r0, #5
 8003800:	e7f4      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003802:	2006      	movs	r0, #6
 8003804:	e7f2      	b.n	80037ec <IsMathOperator+0x58>
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	08019508 	.word	0x08019508
 800380c:	0801950c 	.word	0x0801950c
 8003810:	08019510 	.word	0x08019510
 8003814:	08019514 	.word	0x08019514
 8003818:	08019518 	.word	0x08019518
 800381c:	0801951c 	.word	0x0801951c

08003820 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003822:	46c6      	mov	lr, r8
 8003824:	b500      	push	{lr}
 8003826:	b082      	sub	sp, #8
 8003828:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 800382a:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <ExploreNeighbors+0x4c>)
 800382e:	4698      	mov	r8, r3
 8003830:	4d0f      	ldr	r5, [pc, #60]	; (8003870 <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003832:	2703      	movs	r7, #3
		if(port != ignore){
 8003834:	42a6      	cmp	r6, r4
 8003836:	d00f      	beq.n	8003858 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003838:	4643      	mov	r3, r8
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0a1a      	lsrs	r2, r3, #8
 800383e:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003840:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 8003842:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003844:	9700      	str	r7, [sp, #0]
 8003846:	230a      	movs	r3, #10
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	0020      	movs	r0, r4
 800384e:	f005 ff1f 	bl	8009690 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003852:	200a      	movs	r0, #10
 8003854:	f00b f973 	bl	800eb3e <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003858:	3401      	adds	r4, #1
 800385a:	b2e4      	uxtb	r4, r4
 800385c:	2c07      	cmp	r4, #7
 800385e:	d1e9      	bne.n	8003834 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 8003860:	2000      	movs	r0, #0
 8003862:	b002      	add	sp, #8
 8003864:	bc04      	pop	{r2}
 8003866:	4690      	mov	r8, r2
 8003868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	20000078 	.word	0x20000078
 8003870:	20000fac 	.word	0x20000fac

08003874 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	46de      	mov	lr, fp
 8003878:	4657      	mov	r7, sl
 800387a:	464e      	mov	r6, r9
 800387c:	4645      	mov	r5, r8
 800387e:	b5e0      	push	{r5, r6, r7, lr}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003884:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <FindBroadcastRoutes+0x130>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	469c      	mov	ip, r3
 800388a:	3307      	adds	r3, #7
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	466a      	mov	r2, sp
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	469d      	mov	sp, r3
 8003896:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003898:	4663      	mov	r3, ip
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <FindBroadcastRoutes+0x46>
 800389e:	0023      	movs	r3, r4
 80038a0:	4a41      	ldr	r2, [pc, #260]	; (80039a8 <FindBroadcastRoutes+0x134>)
 80038a2:	4661      	mov	r1, ip
 80038a4:	1e4d      	subs	r5, r1, #1
 80038a6:	b2ed      	uxtb	r5, r5
 80038a8:	3501      	adds	r5, #1
 80038aa:	192d      	adds	r5, r5, r4
		modules[m] =0;
 80038ac:	2100      	movs	r1, #0
 80038ae:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 80038b0:	8011      	strh	r1, [r2, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80038b6:	42ab      	cmp	r3, r5
 80038b8:	d1f9      	bne.n	80038ae <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 80038ba:	3801      	subs	r0, #1
 80038bc:	2301      	movs	r3, #1
 80038be:	5423      	strb	r3, [r4, r0]
 80038c0:	2216      	movs	r2, #22
 80038c2:	4342      	muls	r2, r0
 80038c4:	3202      	adds	r2, #2
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <FindBroadcastRoutes+0x138>)
 80038c8:	18d2      	adds	r2, r2, r3
 80038ca:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038cc:	4d36      	ldr	r5, [pc, #216]	; (80039a8 <FindBroadcastRoutes+0x134>)
 80038ce:	0040      	lsls	r0, r0, #1
 80038d0:	2301      	movs	r3, #1
 80038d2:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038d4:	46a3      	mov	fp, r4
 80038d6:	e003      	b.n	80038e0 <FindBroadcastRoutes+0x6c>
 80038d8:	3101      	adds	r1, #1
 80038da:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80038dc:	2906      	cmp	r1, #6
 80038de:	d011      	beq.n	8003904 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 80038e0:	8813      	ldrh	r3, [r2, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f8      	beq.n	80038d8 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038e6:	5b46      	ldrh	r6, [r0, r5]
 80038e8:	46b1      	mov	r9, r6
 80038ea:	4646      	mov	r6, r8
 80038ec:	408e      	lsls	r6, r1
 80038ee:	46b2      	mov	sl, r6
 80038f0:	464e      	mov	r6, r9
 80038f2:	4654      	mov	r4, sl
 80038f4:	4326      	orrs	r6, r4
 80038f6:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	445b      	add	r3, fp
 80038fc:	3b01      	subs	r3, #1
 80038fe:	2402      	movs	r4, #2
 8003900:	701c      	strb	r4, [r3, #0]
 8003902:	e7e9      	b.n	80038d8 <FindBroadcastRoutes+0x64>
 8003904:	465c      	mov	r4, fp
	++level;												// Move one level
 8003906:	2602      	movs	r6, #2
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <FindBroadcastRoutes+0x138>)
 800390a:	3302      	adds	r3, #2
 800390c:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 800390e:	2301      	movs	r3, #1
 8003910:	469b      	mov	fp, r3
 8003912:	46b0      	mov	r8, r6
 8003914:	0026      	movs	r6, r4
		++level;											// Move one level
 8003916:	4643      	mov	r3, r8
 8003918:	3301      	adds	r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 800391e:	4663      	mov	r3, ip
 8003920:	2b00      	cmp	r3, #0
 8003922:	d035      	beq.n	8003990 <FindBroadcastRoutes+0x11c>
 8003924:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800392a:	3b01      	subs	r3, #1
 800392c:	4443      	add	r3, r8
 800392e:	4699      	mov	r9, r3
 8003930:	e01e      	b.n	8003970 <FindBroadcastRoutes+0xfc>
 8003932:	3001      	adds	r0, #1
 8003934:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003936:	2806      	cmp	r0, #6
 8003938:	d015      	beq.n	8003966 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 800393a:	880b      	ldrh	r3, [r1, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f8      	beq.n	8003932 <FindBroadcastRoutes+0xbe>
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	3b01      	subs	r3, #1
 8003944:	5cf5      	ldrb	r5, [r6, r3]
 8003946:	2d00      	cmp	r5, #0
 8003948:	d1f3      	bne.n	8003932 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <FindBroadcastRoutes+0x134>)
 800394c:	5aa5      	ldrh	r5, [r4, r2]
 800394e:	465a      	mov	r2, fp
 8003950:	4082      	lsls	r2, r0
 8003952:	4315      	orrs	r5, r2
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <FindBroadcastRoutes+0x134>)
 8003956:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003958:	4642      	mov	r2, r8
 800395a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3301      	adds	r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e7e5      	b.n	8003932 <FindBroadcastRoutes+0xbe>
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 800396a:	b2d3      	uxtb	r3, r2
 800396c:	4563      	cmp	r3, ip
 800396e:	d20c      	bcs.n	800398a <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003970:	5cb3      	ldrb	r3, [r6, r2]
 8003972:	454b      	cmp	r3, r9
 8003974:	d1f8      	bne.n	8003968 <FindBroadcastRoutes+0xf4>
 8003976:	2116      	movs	r1, #22
 8003978:	4351      	muls	r1, r2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	469a      	mov	sl, r3
 800397e:	4451      	add	r1, sl
 8003980:	0053      	lsls	r3, r2, #1
 8003982:	2000      	movs	r0, #0
 8003984:	60ba      	str	r2, [r7, #8]
 8003986:	001c      	movs	r4, r3
 8003988:	e7d7      	b.n	800393a <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1c2      	bne.n	8003916 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 8003990:	2000      	movs	r0, #0
 8003992:	46bd      	mov	sp, r7
 8003994:	b005      	add	sp, #20
 8003996:	bc3c      	pop	{r2, r3, r4, r5}
 8003998:	4690      	mov	r8, r2
 800399a:	4699      	mov	r9, r3
 800399c:	46a2      	mov	sl, r4
 800399e:	46ab      	mov	fp, r5
 80039a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	20000044 	.word	0x20000044
 80039a8:	20000d2c 	.word	0x20000d2c
 80039ac:	20000aec 	.word	0x20000aec

080039b0 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 80039b2:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 80039b4:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d100      	bne.n	80039bc <minArr+0xc>
		smallest =arr[0];
 80039ba:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <minArr+0x38>)
 80039be:	781d      	ldrb	r5, [r3, #0]
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	dd0e      	ble.n	80039e2 <minArr+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2700      	movs	r7, #0
 80039c8:	e002      	b.n	80039d0 <minArr+0x20>
 80039ca:	3301      	adds	r3, #1
 80039cc:	42ab      	cmp	r3, r5
 80039ce:	da09      	bge.n	80039e4 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 80039d0:	5cc2      	ldrb	r2, [r0, r3]
 80039d2:	42a2      	cmp	r2, r4
 80039d4:	d2f9      	bcs.n	80039ca <minArr+0x1a>
 80039d6:	5cce      	ldrb	r6, [r1, r3]
 80039d8:	2e00      	cmp	r6, #0
 80039da:	d1f6      	bne.n	80039ca <minArr+0x1a>
			smallest =arr[i];
			index =i;
 80039dc:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 80039de:	0014      	movs	r4, r2
 80039e0:	e7f3      	b.n	80039ca <minArr+0x1a>
	for(int i =0; i < N; i++){
 80039e2:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 80039e4:	0038      	movs	r0, r7
 80039e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e8:	20000044 	.word	0x20000044

080039ec <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <QnotEmpty+0x20>)
 80039ee:	7819      	ldrb	r1, [r3, #0]
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d008      	beq.n	8003a06 <QnotEmpty+0x1a>
 80039f4:	0003      	movs	r3, r0
 80039f6:	1841      	adds	r1, r0, r1
	char temp =1;
 80039f8:	2001      	movs	r0, #1
		temp &=Q[i];
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	4010      	ands	r0, r2
 80039fe:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d1fa      	bne.n	80039fa <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003a04:	4770      	bx	lr
	char temp =1;
 8003a06:	2001      	movs	r0, #1
 8003a08:	e7fc      	b.n	8003a04 <QnotEmpty+0x18>
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000044 	.word	0x20000044

08003a10 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	46de      	mov	lr, fp
 8003a14:	4657      	mov	r7, sl
 8003a16:	464e      	mov	r6, r9
 8003a18:	4645      	mov	r5, r8
 8003a1a:	b5e0      	push	{r5, r6, r7, lr}
 8003a1c:	b08f      	sub	sp, #60	; 0x3c
 8003a1e:	0005      	movs	r5, r0
 8003a20:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003a22:	2232      	movs	r2, #50	; 0x32
 8003a24:	2100      	movs	r1, #0
 8003a26:	a801      	add	r0, sp, #4
 8003a28:	f010 ff94 	bl	8014954 <memset>
	memset(route,0,sizeof(route));
 8003a2c:	221a      	movs	r2, #26
 8003a2e:	2100      	movs	r1, #0
 8003a30:	485a      	ldr	r0, [pc, #360]	; (8003b9c <FindRoute+0x18c>)
 8003a32:	f010 ff8f 	bl	8014954 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003a36:	0029      	movs	r1, r5
 8003a38:	1e68      	subs	r0, r5, #1
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <FindRoute+0x190>)
 8003a3e:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <FindRoute+0x194>)
 8003a42:	5413      	strb	r3, [r2, r0]
 8003a44:	2516      	movs	r5, #22
 8003a46:	4345      	muls	r5, r0
 8003a48:	3502      	adds	r5, #2
 8003a4a:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <FindRoute+0x198>)
 8003a4c:	18ed      	adds	r5, r5, r3
 8003a4e:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 8003a50:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003a52:	4653      	mov	r3, sl
 8003a54:	b29c      	uxth	r4, r3
 8003a56:	e003      	b.n	8003a60 <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 8003a58:	3001      	adds	r0, #1
 8003a5a:	3202      	adds	r2, #2
 8003a5c:	2807      	cmp	r0, #7
 8003a5e:	d00f      	beq.n	8003a80 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003a60:	8813      	ldrh	r3, [r2, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f8      	beq.n	8003a58 <FindRoute+0x48>
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d1f5      	bne.n	8003a58 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003a6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ba0 <FindRoute+0x190>)
 8003a6e:	4453      	add	r3, sl
 8003a70:	3b01      	subs	r3, #1
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003a76:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <FindRoute+0x18c>)
 8003a78:	4652      	mov	r2, sl
 8003a7a:	701a      	strb	r2, [r3, #0]
			return col;
 8003a7c:	b2c0      	uxtb	r0, r0
 8003a7e:	e085      	b.n	8003b8c <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003a80:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <FindRoute+0x19c>)
 8003a82:	781e      	ldrb	r6, [r3, #0]
 8003a84:	2e00      	cmp	r6, #0
 8003a86:	dd11      	ble.n	8003aac <FindRoute+0x9c>
 8003a88:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a8a:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a8c:	4f45      	ldr	r7, [pc, #276]	; (8003ba4 <FindRoute+0x194>)
 8003a8e:	2000      	movs	r0, #0
 8003a90:	46ac      	mov	ip, r5
 8003a92:	e002      	b.n	8003a9a <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003a94:	3301      	adds	r3, #1
 8003a96:	42b3      	cmp	r3, r6
 8003a98:	dc07      	bgt.n	8003aaa <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a9a:	4299      	cmp	r1, r3
 8003a9c:	d0fa      	beq.n	8003a94 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	4d3f      	ldr	r5, [pc, #252]	; (8003ba0 <FindRoute+0x190>)
 8003aa2:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003aa4:	18ba      	adds	r2, r7, r2
 8003aa6:	7010      	strb	r0, [r2, #0]
 8003aa8:	e7f4      	b.n	8003a94 <FindRoute+0x84>
 8003aaa:	4665      	mov	r5, ip
	uint8_t u =0;
 8003aac:	2400      	movs	r4, #0
 8003aae:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <FindRoute+0x198>)
 8003ab0:	4698      	mov	r8, r3
 8003ab2:	230e      	movs	r3, #14
 8003ab4:	4443      	add	r3, r8
 8003ab6:	4656      	mov	r6, sl
 8003ab8:	469b      	mov	fp, r3
 8003aba:	46a9      	mov	r9, r5
 8003abc:	e01d      	b.n	8003afa <FindRoute+0xea>
 8003abe:	464d      	mov	r5, r9
 8003ac0:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003ac2:	0034      	movs	r4, r6
 8003ac4:	e034      	b.n	8003b30 <FindRoute+0x120>
 8003ac6:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003ac8:	4281      	cmp	r1, r0
 8003aca:	d015      	beq.n	8003af8 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003acc:	880b      	ldrh	r3, [r1, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f9      	beq.n	8003ac6 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003ad2:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	5cd7      	ldrb	r7, [r2, r3]
 8003ada:	2f00      	cmp	r7, #0
 8003adc:	d1f3      	bne.n	8003ac6 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003ade:	4f30      	ldr	r7, [pc, #192]	; (8003ba0 <FindRoute+0x190>)
 8003ae0:	5d7f      	ldrb	r7, [r7, r5]
 8003ae2:	3701      	adds	r7, #1
 8003ae4:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003ae6:	4e2e      	ldr	r6, [pc, #184]	; (8003ba0 <FindRoute+0x190>)
 8003ae8:	5cf6      	ldrb	r6, [r6, r3]
 8003aea:	42be      	cmp	r6, r7
 8003aec:	d9eb      	bls.n	8003ac6 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003aee:	4e2c      	ldr	r6, [pc, #176]	; (8003ba0 <FindRoute+0x190>)
 8003af0:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003af2:	4e2c      	ldr	r6, [pc, #176]	; (8003ba4 <FindRoute+0x194>)
 8003af4:	54f4      	strb	r4, [r6, r3]
 8003af6:	e7e6      	b.n	8003ac6 <FindRoute+0xb6>
 8003af8:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003afa:	a801      	add	r0, sp, #4
 8003afc:	f7ff ff76 	bl	80039ec <QnotEmpty>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d113      	bne.n	8003b2c <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003b04:	a901      	add	r1, sp, #4
 8003b06:	4826      	ldr	r0, [pc, #152]	; (8003ba0 <FindRoute+0x190>)
 8003b08:	f7ff ff52 	bl	80039b0 <minArr>
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003b10:	42b4      	cmp	r4, r6
 8003b12:	d0d4      	beq.n	8003abe <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003b14:	1e65      	subs	r5, r4, #1
 8003b16:	ab01      	add	r3, sp, #4
 8003b18:	2201      	movs	r2, #1
 8003b1a:	555a      	strb	r2, [r3, r5]
 8003b1c:	2016      	movs	r0, #22
 8003b1e:	4368      	muls	r0, r5
 8003b20:	1c81      	adds	r1, r0, #2
 8003b22:	4441      	add	r1, r8
 8003b24:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003b26:	001a      	movs	r2, r3
 8003b28:	46b2      	mov	sl, r6
 8003b2a:	e7cf      	b.n	8003acc <FindRoute+0xbc>
 8003b2c:	464d      	mov	r5, r9
 8003b2e:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <FindRoute+0x194>)
 8003b32:	191b      	adds	r3, r3, r4
 8003b34:	3b01      	subs	r3, #1
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2a00      	cmp	r2, #0
 8003b3c:	d00e      	beq.n	8003b5c <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003b3e:	4917      	ldr	r1, [pc, #92]	; (8003b9c <FindRoute+0x18c>)
 8003b40:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b42:	4e18      	ldr	r6, [pc, #96]	; (8003ba4 <FindRoute+0x194>)
 8003b44:	e000      	b.n	8003b48 <FindRoute+0x138>
 8003b46:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003b48:	1c58      	adds	r0, r3, #1
 8003b4a:	4661      	mov	r1, ip
 8003b4c:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b4e:	18b3      	adds	r3, r6, r2
 8003b50:	3b01      	subs	r3, #1
 8003b52:	7819      	ldrb	r1, [r3, #0]
 8003b54:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003b56:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b58:	2900      	cmp	r1, #0
 8003b5a:	d1f4      	bne.n	8003b46 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003b5c:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b5e:	490f      	ldr	r1, [pc, #60]	; (8003b9c <FindRoute+0x18c>)
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <FindRoute+0x190>)
 8003b62:	4453      	add	r3, sl
 8003b64:	001f      	movs	r7, r3
 8003b66:	3f01      	subs	r7, #1
 8003b68:	e003      	b.n	8003b72 <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	3502      	adds	r5, #2
 8003b6e:	2807      	cmp	r0, #7
 8003b70:	d00b      	beq.n	8003b8a <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b72:	882b      	ldrh	r3, [r5, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f8      	beq.n	8003b6a <FindRoute+0x15a>
 8003b78:	783a      	ldrb	r2, [r7, #0]
 8003b7a:	188a      	adds	r2, r1, r2
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	7812      	ldrb	r2, [r2, #0]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d1f1      	bne.n	8003b6a <FindRoute+0x15a>
			return col;
 8003b86:	b2c0      	uxtb	r0, r0
 8003b88:	e000      	b.n	8003b8c <FindRoute+0x17c>
	return 0;
 8003b8a:	2000      	movs	r0, #0
}
 8003b8c:	b00f      	add	sp, #60	; 0x3c
 8003b8e:	bc3c      	pop	{r2, r3, r4, r5}
 8003b90:	4690      	mov	r8, r2
 8003b92:	4699      	mov	r9, r3
 8003b94:	46a2      	mov	sl, r4
 8003b96:	46ab      	mov	fp, r5
 8003b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20006f68 	.word	0x20006f68
 8003ba0:	2000118c 	.word	0x2000118c
 8003ba4:	200011a8 	.word	0x200011a8
 8003ba8:	20000aec 	.word	0x20000aec
 8003bac:	20000044 	.word	0x20000044

08003bb0 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	0007      	movs	r7, r0
 8003bb6:	000e      	movs	r6, r1
 8003bb8:	9205      	str	r2, [sp, #20]
 8003bba:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003bbc:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003bbe:	7818      	ldrb	r0, [r3, #0]
 8003bc0:	f7ff ff26 	bl	8003a10 <FindRoute>
 8003bc4:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003bc6:	2d00      	cmp	r5, #0
 8003bc8:	d020      	beq.n	8003c0c <remoteBootloaderUpdate+0x5c>
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003bcc:	781c      	ldrb	r4, [r3, #0]
 8003bce:	42b4      	cmp	r4, r6
 8003bd0:	d05f      	beq.n	8003c92 <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003bd2:	42bc      	cmp	r4, r7
 8003bd4:	d034      	beq.n	8003c40 <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003bd6:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003bd8:	9805      	ldr	r0, [sp, #20]
 8003bda:	f7ff fdaf 	bl	800373c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003bde:	9804      	ldr	r0, [sp, #16]
 8003be0:	f7ff fdac 	bl	800373c <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	d046      	beq.n	8003c7a <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003bee:	7819      	ldrb	r1, [r3, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9303      	str	r3, [sp, #12]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	3303      	adds	r3, #3
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	000b      	movs	r3, r1
 8003c00:	9a04      	ldr	r2, [sp, #16]
 8003c02:	9805      	ldr	r0, [sp, #20]
 8003c04:	f005 fff0 	bl	8009be8 <StartScastDMAStream>
}
 8003c08:	b007      	add	sp, #28
 8003c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <remoteBootloaderUpdate+0xf0>)
 8003c0e:	199b      	adds	r3, r3, r6
 8003c10:	3b01      	subs	r3, #1
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	2a01      	cmp	r2, #1
 8003c16:	d010      	beq.n	8003c3a <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003c18:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <remoteBootloaderUpdate+0xf4>)
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	42bb      	cmp	r3, r7
 8003c26:	d1d7      	bne.n	8003bd8 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c28:	f00b f89e 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 8003c2c:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <remoteBootloaderUpdate+0xf8>)
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	0032      	movs	r2, r6
 8003c34:	f011 f8ba 	bl	8014dac <sprintf>
 8003c38:	e00d      	b.n	8003c56 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003c3c:	781c      	ldrb	r4, [r3, #0]
 8003c3e:	e7ef      	b.n	8003c20 <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c40:	f00b f892 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 8003c44:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003c46:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <remoteBootloaderUpdate+0xfc>)
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	002b      	movs	r3, r5
 8003c4e:	0032      	movs	r2, r6
 8003c50:	0038      	movs	r0, r7
 8003c52:	f011 f8ab 	bl	8014dac <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <remoteBootloaderUpdate+0x100>)
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	0038      	movs	r0, r7
 8003c5c:	f011 f8c6 	bl	8014dec <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003c60:	0038      	movs	r0, r7
 8003c62:	f7fc fa59 	bl	8000118 <strlen>
 8003c66:	b282      	uxth	r2, r0
 8003c68:	2332      	movs	r3, #50	; 0x32
 8003c6a:	0039      	movs	r1, r7
 8003c6c:	9805      	ldr	r0, [sp, #20]
 8003c6e:	f00a fe61 	bl	800e934 <writePxITMutex>
		Delay_ms(100);
 8003c72:	2064      	movs	r0, #100	; 0x64
 8003c74:	f00c ff8e 	bl	8010b94 <HAL_Delay>
 8003c78:	e7ae      	b.n	8003bd8 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003c7a:	9804      	ldr	r0, [sp, #16]
 8003c7c:	f00a fe10 	bl	800e8a0 <GetUart>
 8003c80:	2101      	movs	r1, #1
 8003c82:	f00a fea7 	bl	800e9d4 <SwapUartPins>
 8003c86:	e7b1      	b.n	8003bec <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c88:	f00b f86e 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 8003c8c:	0007      	movs	r7, r0
		myOutport =outport;
 8003c8e:	9504      	str	r5, [sp, #16]
 8003c90:	e7da      	b.n	8003c48 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003c92:	42bc      	cmp	r4, r7
 8003c94:	d0f8      	beq.n	8003c88 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003c96:	9504      	str	r5, [sp, #16]
 8003c98:	e79e      	b.n	8003bd8 <remoteBootloaderUpdate+0x28>
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	200010ea 	.word	0x200010ea
 8003ca0:	2000118c 	.word	0x2000118c
 8003ca4:	20006f68 	.word	0x20006f68
 8003ca8:	200000a0 	.word	0x200000a0
 8003cac:	200000a4 	.word	0x200000a4
 8003cb0:	200000a8 	.word	0x200000a8

08003cb4 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb6:	46d6      	mov	lr, sl
 8003cb8:	464f      	mov	r7, r9
 8003cba:	4646      	mov	r6, r8
 8003cbc:	b5c0      	push	{r6, r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	0005      	movs	r5, r0
 8003cc2:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc4:	4c56      	ldr	r4, [pc, #344]	; (8003e20 <DisplayTopology+0x16c>)
 8003cc6:	4b57      	ldr	r3, [pc, #348]	; (8003e24 <DisplayTopology+0x170>)
 8003cc8:	0022      	movs	r2, r4
 8003cca:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ccc:	c243      	stmia	r2!, {r0, r1, r6}
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	6011      	str	r1, [r2, #0]
 8003cd2:	889b      	ldrh	r3, [r3, #4]
 8003cd4:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	f7fc fa1e 	bl	8000118 <strlen>
 8003cdc:	b282      	uxth	r2, r0
 8003cde:	2301      	movs	r3, #1
 8003ce0:	425b      	negs	r3, r3
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	3333      	adds	r3, #51	; 0x33
 8003ce6:	0021      	movs	r1, r4
 8003ce8:	0028      	movs	r0, r5
 8003cea:	f00a fdfb 	bl	800e8e4 <writePxMutex>
 8003cee:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003cf0:	4f4d      	ldr	r7, [pc, #308]	; (8003e28 <DisplayTopology+0x174>)
 8003cf2:	4d4b      	ldr	r5, [pc, #300]	; (8003e20 <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf4:	2601      	movs	r6, #1
 8003cf6:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003cf8:	0022      	movs	r2, r4
 8003cfa:	0039      	movs	r1, r7
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f011 f855 	bl	8014dac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d02:	0028      	movs	r0, r5
 8003d04:	f7fc fa08 	bl	8000118 <strlen>
 8003d08:	b282      	uxth	r2, r0
 8003d0a:	9600      	str	r6, [sp, #0]
 8003d0c:	2332      	movs	r3, #50	; 0x32
 8003d0e:	0029      	movs	r1, r5
 8003d10:	9803      	ldr	r0, [sp, #12]
 8003d12:	f00a fde7 	bl	800e8e4 <writePxMutex>
 8003d16:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d18:	2c07      	cmp	r4, #7
 8003d1a:	d1ed      	bne.n	8003cf8 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	425b      	negs	r3, r3
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	3333      	adds	r3, #51	; 0x33
 8003d24:	2203      	movs	r2, #3
 8003d26:	4941      	ldr	r1, [pc, #260]	; (8003e2c <DisplayTopology+0x178>)
 8003d28:	9803      	ldr	r0, [sp, #12]
 8003d2a:	f00a fddb 	bl	800e8e4 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d2e:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <DisplayTopology+0x17c>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d065      	beq.n	8003e02 <DisplayTopology+0x14e>
 8003d36:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d38:	2701      	movs	r7, #1
 8003d3a:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <DisplayTopology+0x180>)
 8003d3e:	4699      	mov	r9, r3
 8003d40:	230e      	movs	r3, #14
 8003d42:	444b      	add	r3, r9
 8003d44:	469a      	mov	sl, r3
 8003d46:	e02a      	b.n	8003d9e <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d48:	2307      	movs	r3, #7
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	08d2      	lsrs	r2, r2, #3
 8003d4e:	493a      	ldr	r1, [pc, #232]	; (8003e38 <DisplayTopology+0x184>)
 8003d50:	4833      	ldr	r0, [pc, #204]	; (8003e20 <DisplayTopology+0x16c>)
 8003d52:	f011 f82b 	bl	8014dac <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d56:	4d32      	ldr	r5, [pc, #200]	; (8003e20 <DisplayTopology+0x16c>)
 8003d58:	0028      	movs	r0, r5
 8003d5a:	f7fc f9dd 	bl	8000118 <strlen>
 8003d5e:	b282      	uxth	r2, r0
 8003d60:	9700      	str	r7, [sp, #0]
 8003d62:	2332      	movs	r3, #50	; 0x32
 8003d64:	0029      	movs	r1, r5
 8003d66:	9803      	ldr	r0, [sp, #12]
 8003d68:	f00a fdbc 	bl	800e8e4 <writePxMutex>
 8003d6c:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d6e:	42b4      	cmp	r4, r6
 8003d70:	d007      	beq.n	8003d82 <DisplayTopology+0xce>
			if(!array[row][col])
 8003d72:	8822      	ldrh	r2, [r4, #0]
 8003d74:	2a00      	cmp	r2, #0
 8003d76:	d1e7      	bne.n	8003d48 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003d78:	4930      	ldr	r1, [pc, #192]	; (8003e3c <DisplayTopology+0x188>)
 8003d7a:	4829      	ldr	r0, [pc, #164]	; (8003e20 <DisplayTopology+0x16c>)
 8003d7c:	f011 f816 	bl	8014dac <sprintf>
 8003d80:	e7e9      	b.n	8003d56 <DisplayTopology+0xa2>
 8003d82:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d84:	9700      	str	r7, [sp, #0]
 8003d86:	2332      	movs	r3, #50	; 0x32
 8003d88:	2202      	movs	r2, #2
 8003d8a:	492d      	ldr	r1, [pc, #180]	; (8003e40 <DisplayTopology+0x18c>)
 8003d8c:	9803      	ldr	r0, [sp, #12]
 8003d8e:	f00a fda9 	bl	800e8e4 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d92:	3601      	adds	r6, #1
 8003d94:	b2f6      	uxtb	r6, r6
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <DisplayTopology+0x17c>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	42b3      	cmp	r3, r6
 8003d9c:	d931      	bls.n	8003e02 <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d9e:	1c72      	adds	r2, r6, #1
 8003da0:	4c1f      	ldr	r4, [pc, #124]	; (8003e20 <DisplayTopology+0x16c>)
 8003da2:	4928      	ldr	r1, [pc, #160]	; (8003e44 <DisplayTopology+0x190>)
 8003da4:	0020      	movs	r0, r4
 8003da6:	f011 f801 	bl	8014dac <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003daa:	0020      	movs	r0, r4
 8003dac:	f7fc f9b4 	bl	8000118 <strlen>
 8003db0:	b282      	uxth	r2, r0
 8003db2:	9700      	str	r7, [sp, #0]
 8003db4:	2332      	movs	r3, #50	; 0x32
 8003db6:	0021      	movs	r1, r4
 8003db8:	9803      	ldr	r0, [sp, #12]
 8003dba:	f00a fd93 	bl	800e8e4 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003dbe:	2516      	movs	r5, #22
 8003dc0:	4375      	muls	r5, r6
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	5aeb      	ldrh	r3, [r5, r3]
 8003dc6:	0059      	lsls	r1, r3, #1
 8003dc8:	18c9      	adds	r1, r1, r3
 8003dca:	0049      	lsls	r1, r1, #1
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <DisplayTopology+0x194>)
 8003dce:	18c9      	adds	r1, r1, r3
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	0020      	movs	r0, r4
 8003dd4:	f011 f83f 	bl	8014e56 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003dd8:	9700      	str	r7, [sp, #0]
 8003dda:	2332      	movs	r3, #50	; 0x32
 8003ddc:	2205      	movs	r2, #5
 8003dde:	0021      	movs	r1, r4
 8003de0:	9c03      	ldr	r4, [sp, #12]
 8003de2:	0020      	movs	r0, r4
 8003de4:	f00a fd7e 	bl	800e8e4 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003de8:	9700      	str	r7, [sp, #0]
 8003dea:	2332      	movs	r3, #50	; 0x32
 8003dec:	2201      	movs	r2, #1
 8003dee:	4917      	ldr	r1, [pc, #92]	; (8003e4c <DisplayTopology+0x198>)
 8003df0:	0020      	movs	r0, r4
 8003df2:	f00a fd77 	bl	800e8e4 <writePxMutex>
 8003df6:	1cac      	adds	r4, r5, #2
 8003df8:	444c      	add	r4, r9
 8003dfa:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003dfc:	46b0      	mov	r8, r6
 8003dfe:	002e      	movs	r6, r5
 8003e00:	e7b7      	b.n	8003d72 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003e02:	2301      	movs	r3, #1
 8003e04:	425b      	negs	r3, r3
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	3333      	adds	r3, #51	; 0x33
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4910      	ldr	r1, [pc, #64]	; (8003e50 <DisplayTopology+0x19c>)
 8003e0e:	9803      	ldr	r0, [sp, #12]
 8003e10:	f00a fd68 	bl	800e8e4 <writePxMutex>
}
 8003e14:	b004      	add	sp, #16
 8003e16:	bc1c      	pop	{r2, r3, r4}
 8003e18:	4690      	mov	r8, r2
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	46a2      	mov	sl, r4
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e20:	2000111c 	.word	0x2000111c
 8003e24:	080194cc 	.word	0x080194cc
 8003e28:	080194e0 	.word	0x080194e0
 8003e2c:	0801a970 	.word	0x0801a970
 8003e30:	20000044 	.word	0x20000044
 8003e34:	20000aec 	.word	0x20000aec
 8003e38:	080194f8 	.word	0x080194f8
 8003e3c:	080194f4 	.word	0x080194f4
 8003e40:	08019374 	.word	0x08019374
 8003e44:	080194e8 	.word	0x080194e8
 8003e48:	08019534 	.word	0x08019534
 8003e4c:	080194dc 	.word	0x080194dc
 8003e50:	0801ab34 	.word	0x0801ab34

08003e54 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	46c6      	mov	lr, r8
 8003e58:	b500      	push	{lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	0005      	movs	r5, r0
 8003e5e:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e60:	4c30      	ldr	r4, [pc, #192]	; (8003f24 <DisplayPortsDir+0xd0>)
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <DisplayPortsDir+0xd4>)
 8003e64:	0022      	movs	r2, r4
 8003e66:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e68:	c243      	stmia	r2!, {r0, r1, r6}
 8003e6a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e6c:	c243      	stmia	r2!, {r0, r1, r6}
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e72:	0020      	movs	r0, r4
 8003e74:	f7fc f950 	bl	8000118 <strlen>
 8003e78:	b282      	uxth	r2, r0
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	3333      	adds	r3, #51	; 0x33
 8003e82:	0021      	movs	r1, r4
 8003e84:	0028      	movs	r0, r5
 8003e86:	f00a fd2d 	bl	800e8e4 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e8a:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <DisplayPortsDir+0xd8>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4690      	mov	r8, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02c      	beq.n	8003ef0 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e96:	4e26      	ldr	r6, [pc, #152]	; (8003f30 <DisplayPortsDir+0xdc>)
 8003e98:	e025      	b.n	8003ee6 <DisplayPortsDir+0x92>
 8003e9a:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e9c:	2c0a      	cmp	r4, #10
 8003e9e:	d01a      	beq.n	8003ed6 <DisplayPortsDir+0x82>
 8003ea0:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ea2:	5ba9      	ldrh	r1, [r5, r6]
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	0212      	lsls	r2, r2, #8
 8003ea8:	411a      	asrs	r2, r3
 8003eaa:	420a      	tst	r2, r1
 8003eac:	d0f5      	beq.n	8003e9a <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eae:	4f1d      	ldr	r7, [pc, #116]	; (8003f24 <DisplayPortsDir+0xd0>)
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	491f      	ldr	r1, [pc, #124]	; (8003f34 <DisplayPortsDir+0xe0>)
 8003eb6:	0038      	movs	r0, r7
 8003eb8:	f010 ff78 	bl	8014dac <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003ebc:	0038      	movs	r0, r7
 8003ebe:	f7fc f92b 	bl	8000118 <strlen>
 8003ec2:	b282      	uxth	r2, r0
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	425b      	negs	r3, r3
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	3333      	adds	r3, #51	; 0x33
 8003ecc:	0039      	movs	r1, r7
 8003ece:	9803      	ldr	r0, [sp, #12]
 8003ed0:	f00a fd08 	bl	800e8e4 <writePxMutex>
 8003ed4:	e7e1      	b.n	8003e9a <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003ed6:	4643      	mov	r3, r8
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	4698      	mov	r8, r3
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <DisplayPortsDir+0xd8>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	4543      	cmp	r3, r8
 8003ee4:	d304      	bcc.n	8003ef0 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003ee6:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ee8:	4642      	mov	r2, r8
 8003eea:	1e55      	subs	r5, r2, #1
 8003eec:	006d      	lsls	r5, r5, #1
 8003eee:	e7d7      	b.n	8003ea0 <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003ef0:	4c0c      	ldr	r4, [pc, #48]	; (8003f24 <DisplayPortsDir+0xd0>)
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <DisplayPortsDir+0xe4>)
 8003ef4:	0022      	movs	r2, r4
 8003ef6:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ef8:	c223      	stmia	r2!, {r0, r1, r5}
 8003efa:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003efc:	c223      	stmia	r2!, {r0, r1, r5}
 8003efe:	cb03      	ldmia	r3!, {r0, r1}
 8003f00:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f02:	0020      	movs	r0, r4
 8003f04:	f7fc f908 	bl	8000118 <strlen>
 8003f08:	b282      	uxth	r2, r0
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	3333      	adds	r3, #51	; 0x33
 8003f12:	0021      	movs	r1, r4
 8003f14:	9803      	ldr	r0, [sp, #12]
 8003f16:	f00a fce5 	bl	800e8e4 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bc04      	pop	{r2}
 8003f1e:	4690      	mov	r8, r2
 8003f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	2000111c 	.word	0x2000111c
 8003f28:	0801947c 	.word	0x0801947c
 8003f2c:	20000044 	.word	0x20000044
 8003f30:	2000735c 	.word	0x2000735c
 8003f34:	08019498 	.word	0x08019498
 8003f38:	080194ac 	.word	0x080194ac

08003f3c <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	46d6      	mov	lr, sl
 8003f40:	b500      	push	{lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f46:	f00a ff0f 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 8003f4a:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f50:	4b8d      	ldr	r3, [pc, #564]	; (8004188 <DisplayModuleStatus+0x24c>)
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	4d8d      	ldr	r5, [pc, #564]	; (800418c <DisplayModuleStatus+0x250>)
 8003f56:	498e      	ldr	r1, [pc, #568]	; (8004190 <DisplayModuleStatus+0x254>)
 8003f58:	0028      	movs	r0, r5
 8003f5a:	f010 ff27 	bl	8014dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f5e:	0029      	movs	r1, r5
 8003f60:	0020      	movs	r0, r4
 8003f62:	f010 ff43 	bl	8014dec <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f66:	4b8b      	ldr	r3, [pc, #556]	; (8004194 <DisplayModuleStatus+0x258>)
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	498b      	ldr	r1, [pc, #556]	; (8004198 <DisplayModuleStatus+0x25c>)
 8003f6c:	0028      	movs	r0, r5
 8003f6e:	f010 ff1d 	bl	8014dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f72:	0029      	movs	r1, r5
 8003f74:	0020      	movs	r0, r4
 8003f76:	f010 ff39 	bl	8014dec <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f7a:	2306      	movs	r3, #6
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	3b04      	subs	r3, #4
 8003f80:	2200      	movs	r2, #0
 8003f82:	4986      	ldr	r1, [pc, #536]	; (800419c <DisplayModuleStatus+0x260>)
 8003f84:	0028      	movs	r0, r5
 8003f86:	f010 ff11 	bl	8014dac <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8a:	0029      	movs	r1, r5
 8003f8c:	0020      	movs	r0, r4
 8003f8e:	f010 ff2d 	bl	8014dec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f92:	4a83      	ldr	r2, [pc, #524]	; (80041a0 <DisplayModuleStatus+0x264>)
 8003f94:	4983      	ldr	r1, [pc, #524]	; (80041a4 <DisplayModuleStatus+0x268>)
 8003f96:	0028      	movs	r0, r5
 8003f98:	f010 ff08 	bl	8014dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f9c:	0029      	movs	r1, r5
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	f010 ff24 	bl	8014dec <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003fa4:	4a80      	ldr	r2, [pc, #512]	; (80041a8 <DisplayModuleStatus+0x26c>)
 8003fa6:	4981      	ldr	r1, [pc, #516]	; (80041ac <DisplayModuleStatus+0x270>)
 8003fa8:	0028      	movs	r0, r5
 8003faa:	f010 feff 	bl	8014dac <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fae:	0029      	movs	r1, r5
 8003fb0:	0020      	movs	r0, r4
 8003fb2:	f010 ff1b 	bl	8014dec <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fb6:	4b7e      	ldr	r3, [pc, #504]	; (80041b0 <DisplayModuleStatus+0x274>)
 8003fb8:	002a      	movs	r2, r5
 8003fba:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fbc:	c243      	stmia	r2!, {r0, r1, r6}
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	6011      	str	r1, [r2, #0]
 8003fc2:	8899      	ldrh	r1, [r3, #4]
 8003fc4:	8091      	strh	r1, [r2, #4]
 8003fc6:	799b      	ldrb	r3, [r3, #6]
 8003fc8:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fca:	0029      	movs	r1, r5
 8003fcc:	0020      	movs	r0, r4
 8003fce:	f010 ff0d 	bl	8014dec <strcat>
 8003fd2:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003fd4:	4d6d      	ldr	r5, [pc, #436]	; (800418c <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003fd6:	4b77      	ldr	r3, [pc, #476]	; (80041b4 <DisplayModuleStatus+0x278>)
 8003fd8:	469a      	mov	sl, r3
 8003fda:	e00e      	b.n	8003ffa <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003fdc:	4b6b      	ldr	r3, [pc, #428]	; (800418c <DisplayModuleStatus+0x250>)
 8003fde:	4a76      	ldr	r2, [pc, #472]	; (80041b8 <DisplayModuleStatus+0x27c>)
 8003fe0:	6811      	ldr	r1, [r2, #0]
 8003fe2:	6019      	str	r1, [r3, #0]
 8003fe4:	8891      	ldrh	r1, [r2, #4]
 8003fe6:	8099      	strh	r1, [r3, #4]
 8003fe8:	7992      	ldrb	r2, [r2, #6]
 8003fea:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003fec:	4967      	ldr	r1, [pc, #412]	; (800418c <DisplayModuleStatus+0x250>)
 8003fee:	0020      	movs	r0, r4
 8003ff0:	f010 fefc 	bl	8014dec <strcat>
 8003ff4:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003ff6:	2f07      	cmp	r7, #7
 8003ff8:	d039      	beq.n	800406e <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003ffa:	003a      	movs	r2, r7
 8003ffc:	496f      	ldr	r1, [pc, #444]	; (80041bc <DisplayModuleStatus+0x280>)
 8003ffe:	0028      	movs	r0, r5
 8004000:	f010 fed4 	bl	8014dac <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004004:	0029      	movs	r1, r5
 8004006:	0020      	movs	r0, r4
 8004008:	f010 fef0 	bl	8014dec <strcat>
		switch(portStatus[i]){
 800400c:	4653      	mov	r3, sl
 800400e:	5cfb      	ldrb	r3, [r7, r3]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d8eb      	bhi.n	8003fec <DisplayModuleStatus+0xb0>
 8004014:	4653      	mov	r3, sl
 8004016:	5cfb      	ldrb	r3, [r7, r3]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4a69      	ldr	r2, [pc, #420]	; (80041c0 <DisplayModuleStatus+0x284>)
 800401c:	58d3      	ldr	r3, [r2, r3]
 800401e:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004020:	495a      	ldr	r1, [pc, #360]	; (800418c <DisplayModuleStatus+0x250>)
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <DisplayModuleStatus+0x288>)
 8004024:	000a      	movs	r2, r1
 8004026:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004028:	c243      	stmia	r2!, {r0, r1, r6}
 800402a:	cb03      	ldmia	r3!, {r0, r1}
 800402c:	c203      	stmia	r2!, {r0, r1}
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	7013      	strb	r3, [r2, #0]
				break;
 8004032:	e7db      	b.n	8003fec <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004034:	4a55      	ldr	r2, [pc, #340]	; (800418c <DisplayModuleStatus+0x250>)
 8004036:	4b64      	ldr	r3, [pc, #400]	; (80041c8 <DisplayModuleStatus+0x28c>)
 8004038:	cb43      	ldmia	r3!, {r0, r1, r6}
 800403a:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 800403c:	e7d6      	b.n	8003fec <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800403e:	4953      	ldr	r1, [pc, #332]	; (800418c <DisplayModuleStatus+0x250>)
 8004040:	4b62      	ldr	r3, [pc, #392]	; (80041cc <DisplayModuleStatus+0x290>)
 8004042:	000a      	movs	r2, r1
 8004044:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004046:	c243      	stmia	r2!, {r0, r1, r6}
 8004048:	cb43      	ldmia	r3!, {r0, r1, r6}
 800404a:	c243      	stmia	r2!, {r0, r1, r6}
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	8013      	strh	r3, [r2, #0]
				break;
 8004050:	e7cc      	b.n	8003fec <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004052:	494e      	ldr	r1, [pc, #312]	; (800418c <DisplayModuleStatus+0x250>)
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <DisplayModuleStatus+0x294>)
 8004056:	000a      	movs	r2, r1
 8004058:	cb43      	ldmia	r3!, {r0, r1, r6}
 800405a:	c243      	stmia	r2!, {r0, r1, r6}
 800405c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800405e:	c243      	stmia	r2!, {r0, r1, r6}
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	6011      	str	r1, [r2, #0]
 8004064:	8899      	ldrh	r1, [r3, #4]
 8004066:	8091      	strh	r1, [r2, #4]
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	7193      	strb	r3, [r2, #6]
				break;
 800406c:	e7be      	b.n	8003fec <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800406e:	4947      	ldr	r1, [pc, #284]	; (800418c <DisplayModuleStatus+0x250>)
 8004070:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <DisplayModuleStatus+0x298>)
 8004072:	000a      	movs	r2, r1
 8004074:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004076:	c261      	stmia	r2!, {r0, r5, r6}
 8004078:	cb61      	ldmia	r3!, {r0, r5, r6}
 800407a:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800407c:	0020      	movs	r0, r4
 800407e:	f010 feb5 	bl	8014dec <strcat>
 8004082:	4f55      	ldr	r7, [pc, #340]	; (80041d8 <DisplayModuleStatus+0x29c>)
 8004084:	2601      	movs	r6, #1
 8004086:	e00d      	b.n	80040a4 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004088:	4d40      	ldr	r5, [pc, #256]	; (800418c <DisplayModuleStatus+0x250>)
 800408a:	0032      	movs	r2, r6
 800408c:	4953      	ldr	r1, [pc, #332]	; (80041dc <DisplayModuleStatus+0x2a0>)
 800408e:	0028      	movs	r0, r5
 8004090:	f010 fe8c 	bl	8014dac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004094:	0029      	movs	r1, r5
 8004096:	0020      	movs	r0, r4
 8004098:	f010 fea8 	bl	8014dec <strcat>
 800409c:	3601      	adds	r6, #1
 800409e:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040a0:	2e07      	cmp	r6, #7
 80040a2:	d018      	beq.n	80040d6 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ee      	beq.n	8004088 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 80040aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ac:	f008 fcb6 	bl	800ca1c <GetPort>
 80040b0:	0005      	movs	r5, r0
 80040b2:	00b3      	lsls	r3, r6, #2
 80040b4:	3b04      	subs	r3, #4
 80040b6:	4a4a      	ldr	r2, [pc, #296]	; (80041e0 <DisplayModuleStatus+0x2a4>)
 80040b8:	58d0      	ldr	r0, [r2, r3]
 80040ba:	f008 fcaf 	bl	800ca1c <GetPort>
 80040be:	9000      	str	r0, [sp, #0]
 80040c0:	002b      	movs	r3, r5
 80040c2:	0032      	movs	r2, r6
 80040c4:	4947      	ldr	r1, [pc, #284]	; (80041e4 <DisplayModuleStatus+0x2a8>)
 80040c6:	4831      	ldr	r0, [pc, #196]	; (800418c <DisplayModuleStatus+0x250>)
 80040c8:	f010 fe70 	bl	8014dac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040cc:	492f      	ldr	r1, [pc, #188]	; (800418c <DisplayModuleStatus+0x250>)
 80040ce:	0020      	movs	r0, r4
 80040d0:	f010 fe8c 	bl	8014dec <strcat>
 80040d4:	e7e2      	b.n	800409c <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80040d6:	0020      	movs	r0, r4
 80040d8:	f7fc f81e 	bl	8000118 <strlen>
 80040dc:	1820      	adds	r0, r4, r0
 80040de:	2203      	movs	r2, #3
 80040e0:	4941      	ldr	r1, [pc, #260]	; (80041e8 <DisplayModuleStatus+0x2ac>)
 80040e2:	f010 fc2e 	bl	8014942 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80040e6:	0020      	movs	r0, r4
 80040e8:	f7fc f816 	bl	8000118 <strlen>
 80040ec:	1820      	adds	r0, r4, r0
 80040ee:	221d      	movs	r2, #29
 80040f0:	493e      	ldr	r1, [pc, #248]	; (80041ec <DisplayModuleStatus+0x2b0>)
 80040f2:	f010 fc26 	bl	8014942 <memcpy>
	temp =strlen((char* )pcOutputString);
 80040f6:	0020      	movs	r0, r4
 80040f8:	f7fc f80e 	bl	8000118 <strlen>
 80040fc:	4682      	mov	sl, r0
 80040fe:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004100:	4f3b      	ldr	r7, [pc, #236]	; (80041f0 <DisplayModuleStatus+0x2b4>)
 8004102:	4e21      	ldr	r6, [pc, #132]	; (8004188 <DisplayModuleStatus+0x24c>)
 8004104:	e002      	b.n	800410c <DisplayModuleStatus+0x1d0>
 8004106:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004108:	2d06      	cmp	r5, #6
 800410a:	d013      	beq.n	8004134 <DisplayModuleStatus+0x1f8>
 800410c:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800410e:	7833      	ldrb	r3, [r6, #0]
 8004110:	3b01      	subs	r3, #1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	5bd9      	ldrh	r1, [r3, r7]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	4113      	asrs	r3, r2
 800411c:	420b      	tst	r3, r1
 800411e:	d0f2      	beq.n	8004106 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004120:	002a      	movs	r2, r5
 8004122:	4934      	ldr	r1, [pc, #208]	; (80041f4 <DisplayModuleStatus+0x2b8>)
 8004124:	4819      	ldr	r0, [pc, #100]	; (800418c <DisplayModuleStatus+0x250>)
 8004126:	f010 fe41 	bl	8014dac <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800412a:	4918      	ldr	r1, [pc, #96]	; (800418c <DisplayModuleStatus+0x250>)
 800412c:	0020      	movs	r0, r4
 800412e:	f010 fe5d 	bl	8014dec <strcat>
 8004132:	e7e8      	b.n	8004106 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004134:	0020      	movs	r0, r4
 8004136:	f7fb ffef 	bl	8000118 <strlen>
 800413a:	4653      	mov	r3, sl
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	4298      	cmp	r0, r3
 8004142:	d00e      	beq.n	8004162 <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004144:	0020      	movs	r0, r4
 8004146:	f7fb ffe7 	bl	8000118 <strlen>
 800414a:	1820      	adds	r0, r4, r0
 800414c:	2203      	movs	r2, #3
 800414e:	4926      	ldr	r1, [pc, #152]	; (80041e8 <DisplayModuleStatus+0x2ac>)
 8004150:	f010 fbf7 	bl	8014942 <memcpy>
	
	/* Display output */
	if(port)
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 800415a:	b004      	add	sp, #16
 800415c:	bc04      	pop	{r2}
 800415e:	4692      	mov	sl, r2
 8004160:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8004162:	1820      	adds	r0, r4, r0
 8004164:	2205      	movs	r2, #5
 8004166:	4924      	ldr	r1, [pc, #144]	; (80041f8 <DisplayModuleStatus+0x2bc>)
 8004168:	f010 fbeb 	bl	8014942 <memcpy>
 800416c:	e7ea      	b.n	8004144 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800416e:	0020      	movs	r0, r4
 8004170:	f7fb ffd2 	bl	8000118 <strlen>
 8004174:	b282      	uxth	r2, r0
 8004176:	2301      	movs	r3, #1
 8004178:	425b      	negs	r3, r3
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	3333      	adds	r3, #51	; 0x33
 800417e:	0021      	movs	r1, r4
 8004180:	9803      	ldr	r0, [sp, #12]
 8004182:	f00a fbaf 	bl	800e8e4 <writePxMutex>
}
 8004186:	e7e8      	b.n	800415a <DisplayModuleStatus+0x21e>
 8004188:	200010ea 	.word	0x200010ea
 800418c:	2000111c 	.word	0x2000111c
 8004190:	080192c0 	.word	0x080192c0
 8004194:	20000ae8 	.word	0x20000ae8
 8004198:	080192dc 	.word	0x080192dc
 800419c:	080192f8 	.word	0x080192f8
 80041a0:	08019318 	.word	0x08019318
 80041a4:	08019324 	.word	0x08019324
 80041a8:	0801933c 	.word	0x0801933c
 80041ac:	08019348 	.word	0x08019348
 80041b0:	08019364 	.word	0x08019364
 80041b4:	2000116c 	.word	0x2000116c
 80041b8:	08019380 	.word	0x08019380
 80041bc:	08019378 	.word	0x08019378
 80041c0:	0801929c 	.word	0x0801929c
 80041c4:	08019388 	.word	0x08019388
 80041c8:	080193a0 	.word	0x080193a0
 80041cc:	080193ac 	.word	0x080193ac
 80041d0:	080193c8 	.word	0x080193c8
 80041d4:	080193e8 	.word	0x080193e8
 80041d8:	20001e1c 	.word	0x20001e1c
 80041dc:	08019400 	.word	0x08019400
 80041e0:	20001820 	.word	0x20001820
 80041e4:	0801941c 	.word	0x0801941c
 80041e8:	08019374 	.word	0x08019374
 80041ec:	0801944c 	.word	0x0801944c
 80041f0:	2000735c 	.word	0x2000735c
 80041f4:	0801946c 	.word	0x0801946c
 80041f8:	08019474 	.word	0x08019474

080041fc <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80041fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fe:	46c6      	mov	lr, r8
 8004200:	b500      	push	{lr}
 8004202:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004204:	4929      	ldr	r1, [pc, #164]	; (80042ac <GetID+0xb0>)
 8004206:	f7fb ff7d 	bl	8000104 <strcmp>
 800420a:	2800      	cmp	r0, #0
 800420c:	d010      	beq.n	8004230 <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 800420e:	4928      	ldr	r1, [pc, #160]	; (80042b0 <GetID+0xb4>)
 8004210:	0028      	movs	r0, r5
 8004212:	f7fb ff77 	bl	8000104 <strcmp>
 8004216:	2800      	cmp	r0, #0
 8004218:	d045      	beq.n	80042a6 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800421a:	782b      	ldrb	r3, [r5, #0]
 800421c:	4698      	mov	r8, r3
 800421e:	2b23      	cmp	r3, #35	; 0x23
 8004220:	d00b      	beq.n	800423a <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <GetID+0xb8>)
 8004224:	781f      	ldrb	r7, [r3, #0]
 8004226:	2f00      	cmp	r7, #0
 8004228:	d02a      	beq.n	8004280 <GetID+0x84>
 800422a:	4e23      	ldr	r6, [pc, #140]	; (80042b8 <GetID+0xbc>)
 800422c:	2400      	movs	r4, #0
 800422e:	e01c      	b.n	800426a <GetID+0x6e>
		return myID;
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <GetID+0xc0>)
 8004232:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004234:	bc04      	pop	{r2}
 8004236:	4690      	mov	r8, r2
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 800423a:	1c68      	adds	r0, r5, #1
 800423c:	f010 f8f7 	bl	801442e <atol>
 8004240:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <GetID+0x52>
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <GetID+0xb8>)
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d206      	bcs.n	800425c <GetID+0x60>
		else if(id == myID)
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <GetID+0xc0>)
 8004250:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 8004252:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004254:	429a      	cmp	r2, r3
 8004256:	d1ed      	bne.n	8004234 <GetID+0x38>
			return myID;
 8004258:	b210      	sxth	r0, r2
 800425a:	e7eb      	b.n	8004234 <GetID+0x38>
			return id;
 800425c:	b218      	sxth	r0, r3
 800425e:	e7e9      	b.n	8004234 <GetID+0x38>
		for(i =0; i < N; i++){
 8004260:	3401      	adds	r4, #1
 8004262:	b2e4      	uxtb	r4, r4
 8004264:	360a      	adds	r6, #10
 8004266:	42bc      	cmp	r4, r7
 8004268:	d00a      	beq.n	8004280 <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800426a:	0031      	movs	r1, r6
 800426c:	0028      	movs	r0, r5
 800426e:	f7fb ff49 	bl	8000104 <strcmp>
 8004272:	2800      	cmp	r0, #0
 8004274:	d1f4      	bne.n	8004260 <GetID+0x64>
 8004276:	4643      	mov	r3, r8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f1      	beq.n	8004260 <GetID+0x64>
				return (i);
 800427c:	b220      	sxth	r0, r4
 800427e:	e7d9      	b.n	8004234 <GetID+0x38>
 8004280:	4f0f      	ldr	r7, [pc, #60]	; (80042c0 <GetID+0xc4>)
		for(i =0; i < N; i++){
 8004282:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8004284:	0039      	movs	r1, r7
 8004286:	0028      	movs	r0, r5
 8004288:	f7fb ff3c 	bl	8000104 <strcmp>
 800428c:	2800      	cmp	r0, #0
 800428e:	d005      	beq.n	800429c <GetID+0xa0>
 8004290:	3601      	adds	r6, #1
 8004292:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004294:	2e0a      	cmp	r6, #10
 8004296:	d1f5      	bne.n	8004284 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004298:	2064      	movs	r0, #100	; 0x64
 800429a:	e7cb      	b.n	8004234 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 800429c:	0234      	lsls	r4, r6, #8
 800429e:	20fe      	movs	r0, #254	; 0xfe
 80042a0:	4320      	orrs	r0, r4
 80042a2:	b200      	sxth	r0, r0
 80042a4:	e7c6      	b.n	8004234 <GetID+0x38>
		return BOS_BROADCAST;
 80042a6:	20ff      	movs	r0, #255	; 0xff
 80042a8:	e7c4      	b.n	8004234 <GetID+0x38>
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	08019500 	.word	0x08019500
 80042b0:	08019504 	.word	0x08019504
 80042b4:	20000044 	.word	0x20000044
 80042b8:	20000fdc 	.word	0x20000fdc
 80042bc:	200010ea 	.word	0x200010ea
 80042c0:	20000ed0 	.word	0x20000ed0

080042c4 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	9001      	str	r0, [sp, #4]
 80042ca:	000d      	movs	r5, r1
 80042cc:	4c2a      	ldr	r4, [pc, #168]	; (8004378 <NameModule+0xb4>)
 80042ce:	0027      	movs	r7, r4
 80042d0:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042d2:	0021      	movs	r1, r4
 80042d4:	0028      	movs	r0, r5
 80042d6:	f7fb ff15 	bl	8000104 <strcmp>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d043      	beq.n	8004366 <NameModule+0xa2>
 80042de:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042e0:	42bc      	cmp	r4, r7
 80042e2:	d1f6      	bne.n	80042d2 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <NameModule+0xb8>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d90f      	bls.n	800430c <NameModule+0x48>
 80042ec:	4c24      	ldr	r4, [pc, #144]	; (8004380 <NameModule+0xbc>)
 80042ee:	009f      	lsls	r7, r3, #2
 80042f0:	18ff      	adds	r7, r7, r3
 80042f2:	007f      	lsls	r7, r7, #1
 80042f4:	0023      	movs	r3, r4
 80042f6:	3b0a      	subs	r3, #10
 80042f8:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 80042fa:	0021      	movs	r1, r4
 80042fc:	0028      	movs	r0, r5
 80042fe:	f7fb ff01 	bl	8000104 <strcmp>
 8004302:	2800      	cmp	r0, #0
 8004304:	d031      	beq.n	800436a <NameModule+0xa6>
 8004306:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 8004308:	42bc      	cmp	r4, r7
 800430a:	d1f6      	bne.n	80042fa <NameModule+0x36>
 800430c:	4c1d      	ldr	r4, [pc, #116]	; (8004384 <NameModule+0xc0>)
 800430e:	0027      	movs	r7, r4
 8004310:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 8004312:	0021      	movs	r1, r4
 8004314:	0028      	movs	r0, r5
 8004316:	f7fb fef5 	bl	8000104 <strcmp>
 800431a:	2800      	cmp	r0, #0
 800431c:	d028      	beq.n	8004370 <NameModule+0xac>
 800431e:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004320:	42bc      	cmp	r4, r7
 8004322:	d1f6      	bne.n	8004312 <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004324:	4c18      	ldr	r4, [pc, #96]	; (8004388 <NameModule+0xc4>)
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <NameModule+0xc8>)
 8004328:	601c      	str	r4, [r3, #0]
 800432a:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004330:	0038      	movs	r0, r7
 8004332:	f7fb fef1 	bl	8000118 <strlen>
 8004336:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004338:	0039      	movs	r1, r7
 800433a:	0028      	movs	r0, r5
 800433c:	f010 fd7a 	bl	8014e34 <strncmp>
 8004340:	2800      	cmp	r0, #0
 8004342:	d017      	beq.n	8004374 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004344:	6864      	ldr	r4, [r4, #4]
 8004346:	6034      	str	r4, [r6, #0]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d1ef      	bne.n	800432c <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 800434c:	9b01      	ldr	r3, [sp, #4]
 800434e:	0098      	lsls	r0, r3, #2
 8004350:	469c      	mov	ip, r3
 8004352:	4460      	add	r0, ip
 8004354:	0040      	lsls	r0, r0, #1
 8004356:	4e0e      	ldr	r6, [pc, #56]	; (8004390 <NameModule+0xcc>)
 8004358:	1980      	adds	r0, r0, r6
 800435a:	0029      	movs	r1, r5
 800435c:	f010 fd62 	bl	8014e24 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004360:	f7ff f890 	bl	8003484 <SaveEEalias>
	
	return result;
 8004364:	e002      	b.n	800436c <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004366:	2006      	movs	r0, #6
 8004368:	e000      	b.n	800436c <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 800436a:	2007      	movs	r0, #7
}
 800436c:	b003      	add	sp, #12
 800436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004370:	2007      	movs	r0, #7
 8004372:	e7fb      	b.n	800436c <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004374:	2008      	movs	r0, #8
 8004376:	e7f9      	b.n	800436c <NameModule+0xa8>
 8004378:	080192b0 	.word	0x080192b0
 800437c:	20000044 	.word	0x20000044
 8004380:	20000fe6 	.word	0x20000fe6
 8004384:	20000ed0 	.word	0x20000ed0
 8004388:	20000108 	.word	0x20000108
 800438c:	20001174 	.word	0x20001174
 8004390:	20000fdc 	.word	0x20000fdc

08004394 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	46c6      	mov	lr, r8
 8004398:	b500      	push	{lr}
 800439a:	0007      	movs	r7, r0
 800439c:	000e      	movs	r6, r1
 800439e:	4d3a      	ldr	r5, [pc, #232]	; (8004488 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80043a0:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80043a2:	0029      	movs	r1, r5
 80043a4:	0030      	movs	r0, r6
 80043a6:	f7fb fead 	bl	8000104 <strcmp>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d050      	beq.n	8004450 <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 80043ae:	3401      	adds	r4, #1
 80043b0:	350a      	adds	r5, #10
 80043b2:	2c0a      	cmp	r4, #10
 80043b4:	d1f5      	bne.n	80043a2 <AddModuleToGroup+0xe>
 80043b6:	4c35      	ldr	r4, [pc, #212]	; (800448c <AddModuleToGroup+0xf8>)
 80043b8:	0025      	movs	r5, r4
 80043ba:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043bc:	0021      	movs	r1, r4
 80043be:	0030      	movs	r0, r6
 80043c0:	f7fb fea0 	bl	8000104 <strcmp>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d058      	beq.n	800447a <AddModuleToGroup+0xe6>
 80043c8:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043ca:	42ac      	cmp	r4, r5
 80043cc:	d1f6      	bne.n	80043bc <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <AddModuleToGroup+0xfc>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d90f      	bls.n	80043f6 <AddModuleToGroup+0x62>
 80043d6:	4c2f      	ldr	r4, [pc, #188]	; (8004494 <AddModuleToGroup+0x100>)
 80043d8:	009d      	lsls	r5, r3, #2
 80043da:	18ed      	adds	r5, r5, r3
 80043dc:	006d      	lsls	r5, r5, #1
 80043de:	0023      	movs	r3, r4
 80043e0:	3b0a      	subs	r3, #10
 80043e2:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 80043e4:	0021      	movs	r1, r4
 80043e6:	0030      	movs	r0, r6
 80043e8:	f7fb fe8c 	bl	8000104 <strcmp>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d046      	beq.n	800447e <AddModuleToGroup+0xea>
 80043f0:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 80043f2:	42ac      	cmp	r4, r5
 80043f4:	d1f6      	bne.n	80043e4 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043f6:	4c28      	ldr	r4, [pc, #160]	; (8004498 <AddModuleToGroup+0x104>)
 80043f8:	4b28      	ldr	r3, [pc, #160]	; (800449c <AddModuleToGroup+0x108>)
 80043fa:	601c      	str	r4, [r3, #0]
 80043fc:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004402:	0028      	movs	r0, r5
 8004404:	f7fb fe88 	bl	8000118 <strlen>
 8004408:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800440a:	0029      	movs	r1, r5
 800440c:	0030      	movs	r0, r6
 800440e:	f010 fd11 	bl	8014e34 <strncmp>
 8004412:	2800      	cmp	r0, #0
 8004414:	d035      	beq.n	8004482 <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004416:	6864      	ldr	r4, [r4, #4]
 8004418:	4643      	mov	r3, r8
 800441a:	601c      	str	r4, [r3, #0]
 800441c:	2c00      	cmp	r4, #0
 800441e:	d1ee      	bne.n	80043fe <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <AddModuleToGroup+0xf4>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01e      	beq.n	8004466 <AddModuleToGroup+0xd2>
 8004428:	4b17      	ldr	r3, [pc, #92]	; (8004488 <AddModuleToGroup+0xf4>)
 800442a:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800442c:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	2a00      	cmp	r2, #0
 8004432:	d019      	beq.n	8004468 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004434:	3401      	adds	r4, #1
 8004436:	330a      	adds	r3, #10
 8004438:	2c0a      	cmp	r4, #10
 800443a:	d1f8      	bne.n	800442e <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 800443c:	3f01      	subs	r7, #1
 800443e:	4918      	ldr	r1, [pc, #96]	; (80044a0 <AddModuleToGroup+0x10c>)
 8004440:	007f      	lsls	r7, r7, #1
 8004442:	2201      	movs	r2, #1
 8004444:	40a2      	lsls	r2, r4
 8004446:	5a7b      	ldrh	r3, [r7, r1]
 8004448:	4313      	orrs	r3, r2
 800444a:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 800444c:	2000      	movs	r0, #0
 800444e:	e007      	b.n	8004460 <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 8004450:	3f01      	subs	r7, #1
 8004452:	4913      	ldr	r1, [pc, #76]	; (80044a0 <AddModuleToGroup+0x10c>)
 8004454:	007f      	lsls	r7, r7, #1
 8004456:	2201      	movs	r2, #1
 8004458:	40a2      	lsls	r2, r4
 800445a:	5a7b      	ldrh	r3, [r7, r1]
 800445c:	4313      	orrs	r3, r2
 800445e:	527b      	strh	r3, [r7, r1]
}
 8004460:	bc04      	pop	{r2}
 8004462:	4690      	mov	r8, r2
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004466:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004468:	00a0      	lsls	r0, r4, #2
 800446a:	1900      	adds	r0, r0, r4
 800446c:	0040      	lsls	r0, r0, #1
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <AddModuleToGroup+0xf4>)
 8004470:	1818      	adds	r0, r3, r0
 8004472:	0031      	movs	r1, r6
 8004474:	f010 fcd6 	bl	8014e24 <strcpy>
			break;
 8004478:	e7e0      	b.n	800443c <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 800447a:	2006      	movs	r0, #6
 800447c:	e7f0      	b.n	8004460 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800447e:	2007      	movs	r0, #7
 8004480:	e7ee      	b.n	8004460 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 8004482:	2008      	movs	r0, #8
 8004484:	e7ec      	b.n	8004460 <AddModuleToGroup+0xcc>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000ed0 	.word	0x20000ed0
 800448c:	080192b0 	.word	0x080192b0
 8004490:	20000044 	.word	0x20000044
 8004494:	20000fe6 	.word	0x20000fe6
 8004498:	20000108 	.word	0x20000108
 800449c:	20001178 	.word	0x20001178
 80044a0:	20000f34 	.word	0x20000f34

080044a4 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 80044a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a6:	46ce      	mov	lr, r9
 80044a8:	4647      	mov	r7, r8
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <ReadPortsDir+0x9c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d03c      	beq.n	8004530 <ReadPortsDir+0x8c>
 80044b6:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	9301      	str	r3, [sp, #4]
		if(i != myID){
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <ReadPortsDir+0xa0>)
 80044be:	4699      	mov	r9, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <ReadPortsDir+0xa4>)
 80044c2:	4698      	mov	r8, r3
 80044c4:	e021      	b.n	800450a <ReadPortsDir+0x66>
 80044c6:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044c8:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044ca:	2780      	movs	r7, #128	; 0x80
 80044cc:	023f      	lsls	r7, r7, #8
 80044ce:	e004      	b.n	80044da <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044d0:	3401      	adds	r4, #1
 80044d2:	b2e4      	uxtb	r4, r4
 80044d4:	3601      	adds	r6, #1
 80044d6:	2c07      	cmp	r4, #7
 80044d8:	d011      	beq.n	80044fe <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044da:	0020      	movs	r0, r4
 80044dc:	f00a f9e0 	bl	800e8a0 <GetUart>
 80044e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044e2:	42bb      	cmp	r3, r7
 80044e4:	d1f4      	bne.n	80044d0 <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044e6:	4b17      	ldr	r3, [pc, #92]	; (8004544 <ReadPortsDir+0xa0>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4642      	mov	r2, r8
 80044f0:	5a9a      	ldrh	r2, [r3, r2]
 80044f2:	0039      	movs	r1, r7
 80044f4:	4131      	asrs	r1, r6
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4641      	mov	r1, r8
 80044fa:	525a      	strh	r2, [r3, r1]
 80044fc:	e7e8      	b.n	80044d0 <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++){
 80044fe:	3501      	adds	r5, #1
 8004500:	b2ed      	uxtb	r5, r5
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <ReadPortsDir+0x9c>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	42ab      	cmp	r3, r5
 8004508:	d314      	bcc.n	8004534 <ReadPortsDir+0x90>
		if(i != myID){
 800450a:	464b      	mov	r3, r9
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	42ab      	cmp	r3, r5
 8004510:	d0d9      	beq.n	80044c6 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 8004512:	2200      	movs	r2, #0
 8004514:	2113      	movs	r1, #19
 8004516:	0028      	movs	r0, r5
 8004518:	f005 fb40 	bl	8009b9c <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800451c:	2032      	movs	r0, #50	; 0x32
 800451e:	f009 ffe5 	bl	800e4ec <StartMilliDelay>
			if(responseStatus != BOS_OK){
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <ReadPortsDir+0xa8>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0e9      	beq.n	80044fe <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 800452a:	2302      	movs	r3, #2
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	e7e6      	b.n	80044fe <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 8004534:	9801      	ldr	r0, [sp, #4]
 8004536:	b003      	add	sp, #12
 8004538:	bc0c      	pop	{r2, r3}
 800453a:	4690      	mov	r8, r2
 800453c:	4699      	mov	r9, r3
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	20000044 	.word	0x20000044
 8004544:	200010ea 	.word	0x200010ea
 8004548:	2000735c 	.word	0x2000735c
 800454c:	20001188 	.word	0x20001188

08004550 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004552:	46c6      	mov	lr, r8
 8004554:	b500      	push	{lr}
 8004556:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004558:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <UpdateMyPortsDir+0x54>)
 800455c:	4698      	mov	r8, r3
 800455e:	4f12      	ldr	r7, [pc, #72]	; (80045a8 <UpdateMyPortsDir+0x58>)
 8004560:	2680      	movs	r6, #128	; 0x80
 8004562:	0236      	lsls	r6, r6, #8
 8004564:	e00a      	b.n	800457c <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004566:	0020      	movs	r0, r4
 8004568:	f00a f99a 	bl	800e8a0 <GetUart>
 800456c:	2101      	movs	r1, #1
 800456e:	f00a fa31 	bl	800e9d4 <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004572:	3401      	adds	r4, #1
 8004574:	b2e4      	uxtb	r4, r4
 8004576:	3501      	adds	r5, #1
 8004578:	2c07      	cmp	r4, #7
 800457a:	d00f      	beq.n	800459c <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800457c:	783b      	ldrb	r3, [r7, #0]
 800457e:	3b01      	subs	r3, #1
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4642      	mov	r2, r8
 8004584:	5a9b      	ldrh	r3, [r3, r2]
 8004586:	0032      	movs	r2, r6
 8004588:	412a      	asrs	r2, r5
 800458a:	421a      	tst	r2, r3
 800458c:	d1eb      	bne.n	8004566 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 800458e:	0020      	movs	r0, r4
 8004590:	f00a f986 	bl	800e8a0 <GetUart>
 8004594:	2100      	movs	r1, #0
 8004596:	f00a fa1d 	bl	800e9d4 <SwapUartPins>
 800459a:	e7ea      	b.n	8004572 <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 800459c:	2000      	movs	r0, #0
 800459e:	bc04      	pop	{r2}
 80045a0:	4690      	mov	r8, r2
 80045a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a4:	2000735c 	.word	0x2000735c
 80045a8:	200010ea 	.word	0x200010ea

080045ac <BOS_Init>:
void BOS_Init(void){
 80045ac:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80045ae:	f009 fe55 	bl	800e25c <RTC_Init>
	GetTimeDate();
 80045b2:	f009 fef3 	bl	800e39c <GetTimeDate>
	EE_Init();
 80045b6:	f003 fa49 	bl	8007a4c <EE_Init>
	GPIO_Init();
 80045ba:	f009 fb01 	bl	800dbc0 <GPIO_Init>
	DMA_Init();
 80045be:	f008 fa7f 	bl	800cac0 <DMA_Init>
	TIM_USEC_Init();
 80045c2:	f009 ff1f 	bl	800e404 <TIM_USEC_Init>
	CRC_Init();
 80045c6:	f009 faa7 	bl	800db18 <CRC_Init>
	TIM_MSEC_Init();
 80045ca:	f009 ff4d 	bl	800e468 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80045ce:	f009 fbc5 	bl	800dd5c <IsFactoryReset>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d11a      	bne.n	800460c <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 80045d6:	f7ff f863 	bl	80036a0 <IsLowerCLIbaud>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d021      	beq.n	8004622 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 80045de:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <BOS_Init+0x104>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045e4:	2032      	movs	r0, #50	; 0x32
 80045e6:	f009 ff81 	bl	800e4ec <StartMilliDelay>
		Module_Peripheral_Init();
 80045ea:	f007 fb7b 	bl	800bce4 <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <BOS_Init+0x108>)
 80045f0:	22e1      	movs	r2, #225	; 0xe1
 80045f2:	0252      	lsls	r2, r2, #9
 80045f4:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045f6:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 80045f8:	001d      	movs	r5, r3
 80045fa:	68a9      	ldr	r1, [r5, #8]
 80045fc:	0020      	movs	r0, r4
 80045fe:	f00a f9df 	bl	800e9c0 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004602:	3401      	adds	r4, #1
 8004604:	b2e4      	uxtb	r4, r4
 8004606:	2c07      	cmp	r4, #7
 8004608:	d1f7      	bne.n	80045fa <BOS_Init+0x4e>
 800460a:	e00f      	b.n	800462c <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 800460c:	f7ff f836 	bl	800367c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004610:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <BOS_Init+0x10c>)
 8004616:	4a29      	ldr	r2, [pc, #164]	; (80046bc <BOS_Init+0x110>)
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	e7fd      	b.n	800461e <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004622:	2032      	movs	r0, #50	; 0x32
 8004624:	f009 ff62 	bl	800e4ec <StartMilliDelay>
		Module_Peripheral_Init();
 8004628:	f007 fb5c 	bl	800bce4 <Module_Peripheral_Init>
	LoadEEvars();
 800462c:	f7fe feee 	bl	800340c <LoadEEvars>
	UpdateMyPortsDir();
 8004630:	f7ff ff8e 	bl	8004550 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004634:	f008 feae 	bl	800d394 <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <BOS_Init+0x114>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d025      	beq.n	800468c <BOS_Init+0xe0>
		IND_ON();
 8004640:	2490      	movs	r4, #144	; 0x90
 8004642:	05e4      	lsls	r4, r4, #23
 8004644:	2201      	movs	r2, #1
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	0020      	movs	r0, r4
 800464a:	f00d febf 	bl	80123cc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800464e:	20fa      	movs	r0, #250	; 0xfa
 8004650:	0040      	lsls	r0, r0, #1
 8004652:	f009 ff4b 	bl	800e4ec <StartMilliDelay>
		IND_OFF();
 8004656:	2200      	movs	r2, #0
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	0020      	movs	r0, r4
 800465c:	f00d feb6 	bl	80123cc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004660:	2064      	movs	r0, #100	; 0x64
 8004662:	f009 ff43 	bl	800e4ec <StartMilliDelay>
		IND_ON();
 8004666:	2201      	movs	r2, #1
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	0020      	movs	r0, r4
 800466c:	f00d feae 	bl	80123cc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004670:	2064      	movs	r0, #100	; 0x64
 8004672:	f009 ff3b 	bl	800e4ec <StartMilliDelay>
		IND_OFF();
 8004676:	2200      	movs	r2, #0
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	0020      	movs	r0, r4
 800467c:	f00d fea6 	bl	80123cc <HAL_GPIO_WritePin>
	ResetUartORE();
 8004680:	f003 f820 	bl	80076c4 <ResetUartORE>
	BOS_initialized =1;
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <BOS_Init+0x118>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
}
 800468a:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 800468c:	2490      	movs	r4, #144	; 0x90
 800468e:	05e4      	lsls	r4, r4, #23
 8004690:	2201      	movs	r2, #1
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	0020      	movs	r0, r4
 8004696:	f00d fe99 	bl	80123cc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800469a:	20fa      	movs	r0, #250	; 0xfa
 800469c:	0040      	lsls	r0, r0, #1
 800469e:	f009 ff25 	bl	800e4ec <StartMilliDelay>
 80046a2:	2200      	movs	r2, #0
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	0020      	movs	r0, r4
 80046a8:	f00d fe90 	bl	80123cc <HAL_GPIO_WritePin>
 80046ac:	e7e8      	b.n	8004680 <BOS_Init+0xd4>
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	20000ae7 	.word	0x20000ae7
 80046b4:	20006e54 	.word	0x20006e54
 80046b8:	e000ed00 	.word	0xe000ed00
 80046bc:	05fa0004 	.word	0x05fa0004
 80046c0:	200010ea 	.word	0x200010ea
 80046c4:	20000ae6 	.word	0x20000ae6

080046c8 <Module_Init>:
void Module_Init(void){
 80046c8:	b510      	push	{r4, lr}
	HAL_Init();
 80046ca:	f00c fa45 	bl	8010b58 <HAL_Init>
	SystemClock_Config();
 80046ce:	f007 fa51 	bl	800bb74 <SystemClock_Config>
	BOS_Init();
 80046d2:	f7ff ff6b 	bl	80045ac <BOS_Init>
	MX_FREERTOS_Init();
 80046d6:	f003 fb83 	bl	8007de0 <MX_FREERTOS_Init>
	osKernelStart();
 80046da:	f00a fa2b 	bl	800eb34 <osKernelStart>
}
 80046de:	bd10      	pop	{r4, pc}

080046e0 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80046e0:	b510      	push	{r4, lr}
 80046e2:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80046e4:	201e      	movs	r0, #30
 80046e6:	f00f fedf 	bl	80144a8 <malloc>
 80046ea:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80046ec:	221e      	movs	r2, #30
 80046ee:	2100      	movs	r1, #0
 80046f0:	f010 f930 	bl	8014954 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80046f4:	4908      	ldr	r1, [pc, #32]	; (8004718 <GetDateString+0x38>)
 80046f6:	7d8b      	ldrb	r3, [r1, #22]
 80046f8:	7d0a      	ldrb	r2, [r1, #20]
 80046fa:	3a01      	subs	r2, #1
 80046fc:	0092      	lsls	r2, r2, #2
 80046fe:	4807      	ldr	r0, [pc, #28]	; (800471c <GetDateString+0x3c>)
 8004700:	5812      	ldr	r2, [r2, r0]
 8004702:	8b08      	ldrh	r0, [r1, #24]
 8004704:	9001      	str	r0, [sp, #4]
 8004706:	7d49      	ldrb	r1, [r1, #21]
 8004708:	9100      	str	r1, [sp, #0]
 800470a:	4905      	ldr	r1, [pc, #20]	; (8004720 <GetDateString+0x40>)
 800470c:	0020      	movs	r0, r4
 800470e:	f010 fb4d 	bl	8014dac <sprintf>
	return buffer;
}
 8004712:	0020      	movs	r0, r4
 8004714:	b002      	add	sp, #8
 8004716:	bd10      	pop	{r4, pc}
 8004718:	20006e54 	.word	0x20006e54
 800471c:	08019824 	.word	0x08019824
 8004720:	08019520 	.word	0x08019520

08004724 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004724:	b500      	push	{lr}
 8004726:	b085      	sub	sp, #20
 8004728:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <Bridge+0x24>)
 800472c:	7819      	ldrb	r1, [r3, #0]
 800472e:	2301      	movs	r3, #1
 8004730:	9303      	str	r3, [sp, #12]
 8004732:	3b02      	subs	r3, #2
 8004734:	9302      	str	r3, [sp, #8]
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	3303      	adds	r3, #3
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	000b      	movs	r3, r1
 800473e:	f005 fa53 	bl	8009be8 <StartScastDMAStream>
}
 8004742:	b005      	add	sp, #20
 8004744:	bd00      	pop	{pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	200010ea 	.word	0x200010ea

0800474c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800474c:	b530      	push	{r4, r5, lr}
 800474e:	b087      	sub	sp, #28
 8004750:	0004      	movs	r4, r0
 8004752:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004754:	2300      	movs	r3, #0
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	9303      	str	r3, [sp, #12]
 800475a:	9302      	str	r3, [sp, #8]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2200      	movs	r2, #0
 8004762:	2100      	movs	r1, #0
 8004764:	2000      	movs	r0, #0
 8004766:	f7fe fecf 	bl	8003508 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800476a:	1e62      	subs	r2, r4, #1
 800476c:	00d3      	lsls	r3, r2, #3
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <Unbridge+0x78>)
 8004774:	589b      	ldr	r3, [r3, r2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d015      	beq.n	80047a6 <Unbridge+0x5a>
 800477a:	1e6a      	subs	r2, r5, #1
 800477c:	00d3      	lsls	r3, r2, #3
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <Unbridge+0x78>)
 8004784:	589b      	ldr	r3, [r3, r2]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800478a:	0020      	movs	r0, r4
 800478c:	f002 ff0e 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004790:	2000      	movs	r0, #0
 8004792:	e006      	b.n	80047a2 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004794:	0020      	movs	r0, r4
 8004796:	f002 ff09 	bl	80075ac <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800479a:	0028      	movs	r0, r5
 800479c:	f002 ff06 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047a0:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80047a2:	b007      	add	sp, #28
 80047a4:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 80047a6:	1e6a      	subs	r2, r5, #1
 80047a8:	00d3      	lsls	r3, r2, #3
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <Unbridge+0x78>)
 80047b0:	589b      	ldr	r3, [r3, r2]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 80047b6:	0028      	movs	r0, r5
 80047b8:	f002 fef8 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047bc:	2000      	movs	r0, #0
 80047be:	e7f0      	b.n	80047a2 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 80047c0:	2068      	movs	r0, #104	; 0x68
 80047c2:	e7ee      	b.n	80047a2 <Unbridge+0x56>
 80047c4:	20001e1c 	.word	0x20001e1c

080047c8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80047cc:	7804      	ldrb	r4, [r0, #0]
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	d010      	beq.n	80047f4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80047d2:	2603      	movs	r6, #3
 80047d4:	e004      	b.n	80047e0 <StringToLowerCase+0x18>
 80047d6:	702a      	strb	r2, [r5, #0]
 80047d8:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80047da:	782c      	ldrb	r4, [r5, #0]
 80047dc:	2c00      	cmp	r4, #0
 80047de:	d009      	beq.n	80047f4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80047e0:	f00f fe54 	bl	801448c <__locale_ctype_ptr>
 80047e4:	1900      	adds	r0, r0, r4
 80047e6:	7843      	ldrb	r3, [r0, #1]
 80047e8:	4033      	ands	r3, r6
 80047ea:	0022      	movs	r2, r4
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d1f2      	bne.n	80047d6 <StringToLowerCase+0xe>
 80047f0:	3220      	adds	r2, #32
 80047f2:	e7f0      	b.n	80047d6 <StringToLowerCase+0xe>
	}
}
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080047f8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	46c6      	mov	lr, r8
 80047fc:	b500      	push	{lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004802:	4bdc      	ldr	r3, [pc, #880]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004804:	781c      	ldrb	r4, [r3, #0]
 8004806:	2c05      	cmp	r4, #5
 8004808:	d100      	bne.n	800480c <ParseSnippetCondition+0x14>
 800480a:	e210      	b.n	8004c2e <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 800480c:	49da      	ldr	r1, [pc, #872]	; (8004b78 <ParseSnippetCondition+0x380>)
 800480e:	00a3      	lsls	r3, r4, #2
 8004810:	191a      	adds	r2, r3, r4
 8004812:	0092      	lsls	r2, r2, #2
 8004814:	2000      	movs	r0, #0
 8004816:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004818:	191a      	adds	r2, r3, r4
 800481a:	0092      	lsls	r2, r2, #2
 800481c:	188a      	adds	r2, r1, r2
 800481e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004820:	1918      	adds	r0, r3, r4
 8004822:	0080      	lsls	r0, r0, #2
 8004824:	3002      	adds	r0, #2
 8004826:	1840      	adds	r0, r0, r1
 8004828:	2204      	movs	r2, #4
 800482a:	2100      	movs	r1, #0
 800482c:	f010 f892 	bl	8014954 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004830:	782b      	ldrb	r3, [r5, #0]
 8004832:	2b62      	cmp	r3, #98	; 0x62
 8004834:	d102      	bne.n	800483c <ParseSnippetCondition+0x44>
 8004836:	78ab      	ldrb	r3, [r5, #2]
 8004838:	2b2e      	cmp	r3, #46	; 0x2e
 800483a:	d032      	beq.n	80048a2 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800483c:	4ecf      	ldr	r6, [pc, #828]	; (8004b7c <ParseSnippetCondition+0x384>)
 800483e:	0029      	movs	r1, r5
 8004840:	0030      	movs	r0, r6
 8004842:	f010 faef 	bl	8014e24 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004846:	4cce      	ldr	r4, [pc, #824]	; (8004b80 <ParseSnippetCondition+0x388>)
 8004848:	0021      	movs	r1, r4
 800484a:	0030      	movs	r0, r6
 800484c:	f011 f96a 	bl	8015b24 <strtok>
 8004850:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004852:	0021      	movs	r1, r4
 8004854:	2000      	movs	r0, #0
 8004856:	f011 f965 	bl	8015b24 <strtok>
 800485a:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 800485c:	0021      	movs	r1, r4
 800485e:	2000      	movs	r0, #0
 8004860:	f011 f960 	bl	8015b24 <strtok>
 8004864:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004866:	2d00      	cmp	r5, #0
 8004868:	d100      	bne.n	800486c <ParseSnippetCondition+0x74>
 800486a:	e1e5      	b.n	8004c38 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 800486c:	0028      	movs	r0, r5
 800486e:	f7fe ff7b 	bl	8003768 <IsModuleParameter>
 8004872:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004874:	d100      	bne.n	8004878 <ParseSnippetCondition+0x80>
 8004876:	e18f      	b.n	8004b98 <ParseSnippetCondition+0x3a0>
 8004878:	2e00      	cmp	r6, #0
 800487a:	d000      	beq.n	800487e <ParseSnippetCondition+0x86>
 800487c:	e18e      	b.n	8004b9c <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 800487e:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004880:	2c00      	cmp	r4, #0
 8004882:	d000      	beq.n	8004886 <ParseSnippetCondition+0x8e>
 8004884:	e1d4      	b.n	8004c30 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004886:	4cbb      	ldr	r4, [pc, #748]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004888:	7823      	ldrb	r3, [r4, #0]
 800488a:	49bb      	ldr	r1, [pc, #748]	; (8004b78 <ParseSnippetCondition+0x380>)
 800488c:	009a      	lsls	r2, r3, #2
 800488e:	18d0      	adds	r0, r2, r3
 8004890:	0080      	lsls	r0, r0, #2
 8004892:	3602      	adds	r6, #2
 8004894:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004896:	180a      	adds	r2, r1, r0
 8004898:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800489a:	3301      	adds	r3, #1
 800489c:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 800489e:	2000      	movs	r0, #0
 80048a0:	e1c6      	b.n	8004c30 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80048a2:	786e      	ldrb	r6, [r5, #1]
 80048a4:	3e30      	subs	r6, #48	; 0x30
 80048a6:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 80048a8:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80048aa:	2e06      	cmp	r6, #6
 80048ac:	d900      	bls.n	80048b0 <ParseSnippetCondition+0xb8>
 80048ae:	e1bf      	b.n	8004c30 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80048b0:	4ab1      	ldr	r2, [pc, #708]	; (8004b78 <ParseSnippetCondition+0x380>)
 80048b2:	00a3      	lsls	r3, r4, #2
 80048b4:	1919      	adds	r1, r3, r4
 80048b6:	0089      	lsls	r1, r1, #2
 80048b8:	3001      	adds	r0, #1
 80048ba:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80048bc:	1853      	adds	r3, r2, r1
 80048be:	2200      	movs	r2, #0
 80048c0:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80048c2:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80048c4:	1cef      	adds	r7, r5, #3
 80048c6:	3207      	adds	r2, #7
 80048c8:	49ae      	ldr	r1, [pc, #696]	; (8004b84 <ParseSnippetCondition+0x38c>)
 80048ca:	0038      	movs	r0, r7
 80048cc:	f010 fab2 	bl	8014e34 <strncmp>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d121      	bne.n	8004918 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80048d4:	00a3      	lsls	r3, r4, #2
 80048d6:	191c      	adds	r4, r3, r4
 80048d8:	00a4      	lsls	r4, r4, #2
 80048da:	4ba7      	ldr	r3, [pc, #668]	; (8004b78 <ParseSnippetCondition+0x380>)
 80048dc:	191c      	adds	r4, r3, r4
 80048de:	2305      	movs	r3, #5
 80048e0:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80048e2:	00f2      	lsls	r2, r6, #3
 80048e4:	1992      	adds	r2, r2, r6
 80048e6:	4ba8      	ldr	r3, [pc, #672]	; (8004b88 <ParseSnippetCondition+0x390>)
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	7a1b      	ldrb	r3, [r3, #8]
 80048ec:	07db      	lsls	r3, r3, #31
 80048ee:	d504      	bpl.n	80048fa <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80048f0:	4aa0      	ldr	r2, [pc, #640]	; (8004b74 <ParseSnippetCondition+0x37c>)
 80048f2:	7813      	ldrb	r3, [r2, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	7013      	strb	r3, [r2, #0]
 80048f8:	e19a      	b.n	8004c30 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80048fa:	2301      	movs	r3, #1
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	2300      	movs	r3, #0
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	9303      	str	r3, [sp, #12]
 8004904:	9302      	str	r3, [sp, #8]
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	2101      	movs	r1, #1
 800490e:	0030      	movs	r0, r6
 8004910:	f003 ff58 	bl	80087c4 <SetButtonEvents>
				status =BOS_OK;
 8004914:	2000      	movs	r0, #0
 8004916:	e7eb      	b.n	80048f0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004918:	220e      	movs	r2, #14
 800491a:	499c      	ldr	r1, [pc, #624]	; (8004b8c <ParseSnippetCondition+0x394>)
 800491c:	0038      	movs	r0, r7
 800491e:	f010 fa89 	bl	8014e34 <strncmp>
 8004922:	2800      	cmp	r0, #0
 8004924:	d11c      	bne.n	8004960 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004926:	00a3      	lsls	r3, r4, #2
 8004928:	191c      	adds	r4, r3, r4
 800492a:	00a4      	lsls	r4, r4, #2
 800492c:	4b92      	ldr	r3, [pc, #584]	; (8004b78 <ParseSnippetCondition+0x380>)
 800492e:	191c      	adds	r4, r3, r4
 8004930:	2306      	movs	r3, #6
 8004932:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004934:	00f2      	lsls	r2, r6, #3
 8004936:	1992      	adds	r2, r2, r6
 8004938:	4b93      	ldr	r3, [pc, #588]	; (8004b88 <ParseSnippetCondition+0x390>)
 800493a:	189b      	adds	r3, r3, r2
 800493c:	7a1b      	ldrb	r3, [r3, #8]
 800493e:	079b      	lsls	r3, r3, #30
 8004940:	d4d6      	bmi.n	80048f0 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004942:	2301      	movs	r3, #1
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	2300      	movs	r3, #0
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	9302      	str	r3, [sp, #8]
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	2201      	movs	r2, #1
 8004954:	2100      	movs	r1, #0
 8004956:	0030      	movs	r0, r6
 8004958:	f003 ff34 	bl	80087c4 <SetButtonEvents>
				status =BOS_OK;
 800495c:	2000      	movs	r0, #0
 800495e:	e7c7      	b.n	80048f0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004960:	220c      	movs	r2, #12
 8004962:	498b      	ldr	r1, [pc, #556]	; (8004b90 <ParseSnippetCondition+0x398>)
 8004964:	0038      	movs	r0, r7
 8004966:	f010 fa65 	bl	8014e34 <strncmp>
 800496a:	2800      	cmp	r0, #0
 800496c:	d17a      	bne.n	8004a64 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 800496e:	00f2      	lsls	r2, r6, #3
 8004970:	1992      	adds	r2, r2, r6
 8004972:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004974:	189b      	adds	r3, r3, r2
 8004976:	789b      	ldrb	r3, [r3, #2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d030      	beq.n	80049de <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 800497c:	00f2      	lsls	r2, r6, #3
 800497e:	1992      	adds	r2, r2, r6
 8004980:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004982:	189b      	adds	r3, r3, r2
 8004984:	78db      	ldrb	r3, [r3, #3]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d04a      	beq.n	8004a20 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 800498a:	00f2      	lsls	r2, r6, #3
 800498c:	1992      	adds	r2, r2, r6
 800498e:	4b7e      	ldr	r3, [pc, #504]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004990:	189b      	adds	r3, r3, r2
 8004992:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004994:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1aa      	bne.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800499a:	4f77      	ldr	r7, [pc, #476]	; (8004b78 <ParseSnippetCondition+0x380>)
 800499c:	00a3      	lsls	r3, r4, #2
 800499e:	191b      	adds	r3, r3, r4
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	220b      	movs	r2, #11
 80049a6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049a8:	0028      	movs	r0, r5
 80049aa:	300f      	adds	r0, #15
 80049ac:	f00f fd39 	bl	8014422 <atoi>
 80049b0:	b2c0      	uxtb	r0, r0
 80049b2:	4b70      	ldr	r3, [pc, #448]	; (8004b74 <ParseSnippetCondition+0x37c>)
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	0093      	lsls	r3, r2, #2
 80049b8:	189b      	adds	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	18ff      	adds	r7, r7, r3
 80049be:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 80049c0:	2301      	movs	r3, #1
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	2300      	movs	r3, #0
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	9303      	str	r3, [sp, #12]
 80049ca:	9302      	str	r3, [sp, #8]
 80049cc:	9001      	str	r0, [sp, #4]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	0030      	movs	r0, r6
 80049d6:	f003 fef5 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 80049da:	2000      	movs	r0, #0
 80049dc:	e788      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80049de:	4f66      	ldr	r7, [pc, #408]	; (8004b78 <ParseSnippetCondition+0x380>)
 80049e0:	00a3      	lsls	r3, r4, #2
 80049e2:	191b      	adds	r3, r3, r4
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	2209      	movs	r2, #9
 80049ea:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049ec:	0028      	movs	r0, r5
 80049ee:	300f      	adds	r0, #15
 80049f0:	f00f fd17 	bl	8014422 <atoi>
 80049f4:	b2c3      	uxtb	r3, r0
 80049f6:	4a5f      	ldr	r2, [pc, #380]	; (8004b74 <ParseSnippetCondition+0x37c>)
 80049f8:	7811      	ldrb	r1, [r2, #0]
 80049fa:	008a      	lsls	r2, r1, #2
 80049fc:	1852      	adds	r2, r2, r1
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	18bf      	adds	r7, r7, r2
 8004a02:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a04:	2201      	movs	r2, #1
 8004a06:	9205      	str	r2, [sp, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	9204      	str	r2, [sp, #16]
 8004a0c:	9203      	str	r2, [sp, #12]
 8004a0e:	9202      	str	r2, [sp, #8]
 8004a10:	9201      	str	r2, [sp, #4]
 8004a12:	9200      	str	r2, [sp, #0]
 8004a14:	2100      	movs	r1, #0
 8004a16:	0030      	movs	r0, r6
 8004a18:	f003 fed4 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e767      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004a20:	4f55      	ldr	r7, [pc, #340]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004a22:	00a3      	lsls	r3, r4, #2
 8004a24:	191b      	adds	r3, r3, r4
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a2e:	0028      	movs	r0, r5
 8004a30:	300f      	adds	r0, #15
 8004a32:	f00f fcf6 	bl	8014422 <atoi>
 8004a36:	b2c0      	uxtb	r0, r0
 8004a38:	4b4e      	ldr	r3, [pc, #312]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	0093      	lsls	r3, r2, #2
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	18ff      	adds	r7, r7, r3
 8004a44:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a46:	2301      	movs	r3, #1
 8004a48:	9305      	str	r3, [sp, #20]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	9303      	str	r3, [sp, #12]
 8004a50:	9302      	str	r3, [sp, #8]
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	9000      	str	r0, [sp, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	0030      	movs	r0, r6
 8004a5c:	f003 feb2 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	e745      	b.n	80048f0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a64:	220d      	movs	r2, #13
 8004a66:	494b      	ldr	r1, [pc, #300]	; (8004b94 <ParseSnippetCondition+0x39c>)
 8004a68:	0038      	movs	r0, r7
 8004a6a:	f010 f9e3 	bl	8014e34 <strncmp>
 8004a6e:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004a70:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d000      	beq.n	8004a78 <ParseSnippetCondition+0x280>
 8004a76:	e73b      	b.n	80048f0 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004a78:	00f2      	lsls	r2, r6, #3
 8004a7a:	1992      	adds	r2, r2, r6
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	795b      	ldrb	r3, [r3, #5]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d031      	beq.n	8004aea <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004a86:	00f2      	lsls	r2, r6, #3
 8004a88:	1992      	adds	r2, r2, r6
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004a8c:	189b      	adds	r3, r3, r2
 8004a8e:	799b      	ldrb	r3, [r3, #6]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d04c      	beq.n	8004b2e <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004a94:	00f2      	lsls	r2, r6, #3
 8004a96:	1992      	adds	r2, r2, r6
 8004a98:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004a9e:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d000      	beq.n	8004aa6 <ParseSnippetCondition+0x2ae>
 8004aa4:	e724      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004aa6:	4f34      	ldr	r7, [pc, #208]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	4698      	mov	r8, r3
 8004aac:	435c      	muls	r4, r3
 8004aae:	193c      	adds	r4, r7, r4
 8004ab0:	3b06      	subs	r3, #6
 8004ab2:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ab4:	0028      	movs	r0, r5
 8004ab6:	3010      	adds	r0, #16
 8004ab8:	f00f fcb3 	bl	8014422 <atoi>
 8004abc:	b2c0      	uxtb	r0, r0
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	4353      	muls	r3, r2
 8004ac6:	18ff      	adds	r7, r7, r3
 8004ac8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004aca:	2301      	movs	r3, #1
 8004acc:	9305      	str	r3, [sp, #20]
 8004ace:	9004      	str	r0, [sp, #16]
 8004ad0:	2400      	movs	r4, #0
 8004ad2:	9403      	str	r4, [sp, #12]
 8004ad4:	9402      	str	r4, [sp, #8]
 8004ad6:	9401      	str	r4, [sp, #4]
 8004ad8:	9400      	str	r4, [sp, #0]
 8004ada:	0023      	movs	r3, r4
 8004adc:	0022      	movs	r2, r4
 8004ade:	0021      	movs	r1, r4
 8004ae0:	0030      	movs	r0, r6
 8004ae2:	f003 fe6f 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	e702      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004aea:	4f23      	ldr	r7, [pc, #140]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004aec:	00a3      	lsls	r3, r4, #2
 8004aee:	191b      	adds	r3, r3, r4
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	220c      	movs	r2, #12
 8004af6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004af8:	0028      	movs	r0, r5
 8004afa:	3010      	adds	r0, #16
 8004afc:	f00f fc91 	bl	8014422 <atoi>
 8004b00:	b2c0      	uxtb	r0, r0
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	0093      	lsls	r3, r2, #2
 8004b08:	189b      	adds	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	18ff      	adds	r7, r7, r3
 8004b0e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004b10:	2301      	movs	r3, #1
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	2300      	movs	r3, #0
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	9002      	str	r0, [sp, #8]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2100      	movs	r1, #0
 8004b24:	0030      	movs	r0, r6
 8004b26:	f003 fe4d 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e6e0      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004b2e:	4f12      	ldr	r7, [pc, #72]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004b30:	00a3      	lsls	r3, r4, #2
 8004b32:	191b      	adds	r3, r3, r4
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	220d      	movs	r2, #13
 8004b3a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b3c:	0028      	movs	r0, r5
 8004b3e:	3010      	adds	r0, #16
 8004b40:	f00f fc6f 	bl	8014422 <atoi>
 8004b44:	b2c0      	uxtb	r0, r0
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	0093      	lsls	r3, r2, #2
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	18ff      	adds	r7, r7, r3
 8004b52:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004b54:	2301      	movs	r3, #1
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	9003      	str	r0, [sp, #12]
 8004b5e:	9302      	str	r3, [sp, #8]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	0030      	movs	r0, r6
 8004b6a:	f003 fe2b 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e6be      	b.n	80048f0 <ParseSnippetCondition+0xf8>
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	20001297 	.word	0x20001297
 8004b78:	20006e70 	.word	0x20006e70
 8004b7c:	200011fc 	.word	0x200011fc
 8004b80:	0801937c 	.word	0x0801937c
 8004b84:	0801a9a4 	.word	0x0801a9a4
 8004b88:	20001974 	.word	0x20001974
 8004b8c:	08019a28 	.word	0x08019a28
 8004b90:	08019a38 	.word	0x08019a38
 8004b94:	08019a48 	.word	0x08019a48
			else if(secondPart != NULL && thirdPart != NULL){
 8004b98:	2e00      	cmp	r6, #0
 8004b9a:	d04f      	beq.n	8004c3c <ParseSnippetCondition+0x444>
 8004b9c:	2c00      	cmp	r4, #0
 8004b9e:	d04f      	beq.n	8004c40 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004ba0:	0020      	movs	r0, r4
 8004ba2:	f7fe fde1 	bl	8003768 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d024      	beq.n	8004bf4 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bac:	781c      	ldrb	r4, [r3, #0]
 8004bae:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <ParseSnippetCondition+0x454>)
 8004bb0:	00a3      	lsls	r3, r4, #2
 8004bb2:	1919      	adds	r1, r3, r4
 8004bb4:	0089      	lsls	r1, r1, #2
 8004bb6:	2704      	movs	r7, #4
 8004bb8:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004bba:	1919      	adds	r1, r3, r4
 8004bbc:	0089      	lsls	r1, r1, #2
 8004bbe:	1851      	adds	r1, r2, r1
 8004bc0:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004bc2:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004bc4:	4d20      	ldr	r5, [pc, #128]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bc6:	782c      	ldrb	r4, [r5, #0]
 8004bc8:	0030      	movs	r0, r6
 8004bca:	f7fe fde3 	bl	8003794 <IsMathOperator>
 8004bce:	491f      	ldr	r1, [pc, #124]	; (8004c4c <ParseSnippetCondition+0x454>)
 8004bd0:	00a3      	lsls	r3, r4, #2
 8004bd2:	191b      	adds	r3, r3, r4
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18cb      	adds	r3, r1, r3
 8004bd8:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bda:	782a      	ldrb	r2, [r5, #0]
 8004bdc:	0093      	lsls	r3, r2, #2
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	18cb      	adds	r3, r1, r3
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d02c      	beq.n	8004c44 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004bea:	3201      	adds	r2, #1
 8004bec:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bee:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	e01d      	b.n	8004c30 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bf6:	4698      	mov	r8, r3
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	4f14      	ldr	r7, [pc, #80]	; (8004c4c <ParseSnippetCondition+0x454>)
 8004bfc:	0093      	lsls	r3, r2, #2
 8004bfe:	1899      	adds	r1, r3, r2
 8004c00:	0089      	lsls	r1, r1, #2
 8004c02:	2003      	movs	r0, #3
 8004c04:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c06:	187b      	adds	r3, r7, r1
 8004c08:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004c0a:	0020      	movs	r0, r4
 8004c0c:	f00f fc04 	bl	8014418 <atof>
 8004c10:	f7fd ffda 	bl	8002bc8 <__aeabi_d2f>
 8004c14:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c16:	4643      	mov	r3, r8
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	0098      	lsls	r0, r3, #2
 8004c1c:	18c0      	adds	r0, r0, r3
 8004c1e:	0080      	lsls	r0, r0, #2
 8004c20:	3006      	adds	r0, #6
 8004c22:	19c0      	adds	r0, r0, r7
 8004c24:	2204      	movs	r2, #4
 8004c26:	a907      	add	r1, sp, #28
 8004c28:	f00f fe8b 	bl	8014942 <memcpy>
 8004c2c:	e7ca      	b.n	8004bc4 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004c2e:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004c30:	b008      	add	sp, #32
 8004c32:	bc04      	pop	{r2}
 8004c34:	4690      	mov	r8, r2
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004c38:	2067      	movs	r0, #103	; 0x67
 8004c3a:	e7f9      	b.n	8004c30 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004c3c:	2067      	movs	r0, #103	; 0x67
 8004c3e:	e7f7      	b.n	8004c30 <ParseSnippetCondition+0x438>
 8004c40:	2067      	movs	r0, #103	; 0x67
 8004c42:	e7f5      	b.n	8004c30 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004c44:	2067      	movs	r0, #103	; 0x67
 8004c46:	e7f3      	b.n	8004c30 <ParseSnippetCondition+0x438>
 8004c48:	20001297 	.word	0x20001297
 8004c4c:	20006e70 	.word	0x20006e70

08004c50 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	000c      	movs	r4, r1
	switch(code){
 8004c54:	2802      	cmp	r0, #2
 8004c56:	d017      	beq.n	8004c88 <AddSnippet+0x38>
 8004c58:	2803      	cmp	r0, #3
 8004c5a:	d003      	beq.n	8004c64 <AddSnippet+0x14>
 8004c5c:	2801      	cmp	r0, #1
 8004c5e:	d00f      	beq.n	8004c80 <AddSnippet+0x30>
	return BOS_OK;
 8004c60:	2000      	movs	r0, #0
 8004c62:	e00c      	b.n	8004c7e <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <AddSnippet+0xec>)
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	0093      	lsls	r3, r2, #2
 8004c6c:	189b      	adds	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4a33      	ldr	r2, [pc, #204]	; (8004d40 <AddSnippet+0xf0>)
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	2201      	movs	r2, #1
 8004c76:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c78:	f007 fdb2 	bl	800c7e0 <SaveToRO>
	return BOS_OK;
 8004c7c:	2000      	movs	r0, #0
}
 8004c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c80:	0008      	movs	r0, r1
 8004c82:	f7ff fdb9 	bl	80047f8 <ParseSnippetCondition>
 8004c86:	e7fa      	b.n	8004c7e <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c88:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <AddSnippet+0xec>)
 8004c8a:	781d      	ldrb	r5, [r3, #0]
 8004c8c:	3d01      	subs	r5, #1
 8004c8e:	00ab      	lsls	r3, r5, #2
 8004c90:	195b      	adds	r3, r3, r5
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <AddSnippet+0xf0>)
 8004c96:	18d3      	adds	r3, r2, r3
 8004c98:	68de      	ldr	r6, [r3, #12]
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d03d      	beq.n	8004d1a <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c9e:	0030      	movs	r0, r6
 8004ca0:	f7fb fa3a 	bl	8000118 <strlen>
 8004ca4:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004ca6:	0020      	movs	r0, r4
 8004ca8:	f7fb fa36 	bl	8000118 <strlen>
 8004cac:	1839      	adds	r1, r7, r0
 8004cae:	3102      	adds	r1, #2
 8004cb0:	0030      	movs	r0, r6
 8004cb2:	f00f fe81 	bl	80149b8 <realloc>
 8004cb6:	4e22      	ldr	r6, [pc, #136]	; (8004d40 <AddSnippet+0xf0>)
 8004cb8:	00ab      	lsls	r3, r5, #2
 8004cba:	195d      	adds	r5, r3, r5
 8004cbc:	00ad      	lsls	r5, r5, #2
 8004cbe:	1975      	adds	r5, r6, r5
 8004cc0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004cc2:	4d1e      	ldr	r5, [pc, #120]	; (8004d3c <AddSnippet+0xec>)
 8004cc4:	782a      	ldrb	r2, [r5, #0]
 8004cc6:	3a01      	subs	r2, #1
 8004cc8:	0093      	lsls	r3, r2, #2
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	18f3      	adds	r3, r6, r3
 8004cd0:	1c7a      	adds	r2, r7, #1
 8004cd2:	68d8      	ldr	r0, [r3, #12]
 8004cd4:	1880      	adds	r0, r0, r2
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	f010 f8a4 	bl	8014e24 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004cdc:	782a      	ldrb	r2, [r5, #0]
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	0093      	lsls	r3, r2, #2
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	18f6      	adds	r6, r6, r3
 8004ce8:	68f3      	ldr	r3, [r6, #12]
 8004cea:	2213      	movs	r2, #19
 8004cec:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <AddSnippet+0xec>)
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	0093      	lsls	r3, r2, #2
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4911      	ldr	r1, [pc, #68]	; (8004d40 <AddSnippet+0xf0>)
 8004cfc:	18cb      	adds	r3, r1, r3
 8004cfe:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004d00:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1bb      	bne.n	8004c7e <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004d06:	0090      	lsls	r0, r2, #2
 8004d08:	1880      	adds	r0, r0, r2
 8004d0a:	0080      	lsls	r0, r0, #2
 8004d0c:	1840      	adds	r0, r0, r1
 8004d0e:	2214      	movs	r2, #20
 8004d10:	2100      	movs	r1, #0
 8004d12:	f00f fe1f 	bl	8014954 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004d16:	200e      	movs	r0, #14
 8004d18:	e7b1      	b.n	8004c7e <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004d1a:	0008      	movs	r0, r1
 8004d1c:	f7fb f9fc 	bl	8000118 <strlen>
 8004d20:	3001      	adds	r0, #1
 8004d22:	f00f fbc1 	bl	80144a8 <malloc>
 8004d26:	00ab      	lsls	r3, r5, #2
 8004d28:	195d      	adds	r5, r3, r5
 8004d2a:	00ad      	lsls	r5, r5, #2
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <AddSnippet+0xf0>)
 8004d2e:	195d      	adds	r5, r3, r5
 8004d30:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004d32:	0021      	movs	r1, r4
 8004d34:	f010 f876 	bl	8014e24 <strcpy>
 8004d38:	e7d9      	b.n	8004cee <AddSnippet+0x9e>
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	20001297 	.word	0x20001297
 8004d40:	20006e70 	.word	0x20006e70

08004d44 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d46:	46de      	mov	lr, fp
 8004d48:	4657      	mov	r7, sl
 8004d4a:	464e      	mov	r6, r9
 8004d4c:	4645      	mov	r5, r8
 8004d4e:	b5e0      	push	{r5, r6, r7, lr}
 8004d50:	b08b      	sub	sp, #44	; 0x2c
 8004d52:	9004      	str	r0, [sp, #16]
 8004d54:	4688      	mov	r8, r1
 8004d56:	9203      	str	r2, [sp, #12]
 8004d58:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004d5a:	2209      	movs	r2, #9
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	a807      	add	r0, sp, #28
 8004d60:	f00f fdf8 	bl	8014954 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d64:	4fd5      	ldr	r7, [pc, #852]	; (80050bc <CLI_CommandParser+0x378>)
				if(id == myID){
 8004d66:	002e      	movs	r6, r5
 8004d68:	e034      	b.n	8004dd4 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d6a:	2252      	movs	r2, #82	; 0x52
 8004d6c:	49d4      	ldr	r1, [pc, #848]	; (80050c0 <CLI_CommandParser+0x37c>)
 8004d6e:	0020      	movs	r0, r4
 8004d70:	f00f fde7 	bl	8014942 <memcpy>
				recordSnippet =0;
 8004d74:	4bd1      	ldr	r3, [pc, #836]	; (80050bc <CLI_CommandParser+0x378>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e044      	b.n	8004e06 <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004d7c:	2206      	movs	r2, #6
 8004d7e:	49d1      	ldr	r1, [pc, #836]	; (80050c4 <CLI_CommandParser+0x380>)
 8004d80:	9803      	ldr	r0, [sp, #12]
 8004d82:	f010 f857 	bl	8014e34 <strncmp>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d053      	beq.n	8004e32 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004d8a:	2d02      	cmp	r5, #2
 8004d8c:	d05e      	beq.n	8004e4c <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004d8e:	212e      	movs	r1, #46	; 0x2e
 8004d90:	9803      	ldr	r0, [sp, #12]
 8004d92:	f010 f839 	bl	8014e08 <strchr>
 8004d96:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d98:	d006      	beq.n	8004da8 <CLI_CommandParser+0x64>
 8004d9a:	3803      	subs	r0, #3
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	49ca      	ldr	r1, [pc, #808]	; (80050c8 <CLI_CommandParser+0x384>)
 8004da0:	f010 f848 	bl	8014e34 <strncmp>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d160      	bne.n	8004e6a <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004da8:	2299      	movs	r2, #153	; 0x99
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	0021      	movs	r1, r4
 8004dae:	9803      	ldr	r0, [sp, #12]
 8004db0:	f009 ff5c 	bl	800ec6c <FreeRTOS_CLIProcessCommand>
 8004db4:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004db6:	7823      	ldrb	r3, [r4, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d000      	beq.n	8004dbe <CLI_CommandParser+0x7a>
 8004dbc:	e16f      	b.n	800509e <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	f7fb f9aa 	bl	8000118 <strlen>
 8004dc4:	0002      	movs	r2, r0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	0020      	movs	r0, r4
 8004dca:	f00f fdc3 	bl	8014954 <memset>
	} while(xReturned != pdFALSE);
 8004dce:	2e00      	cmp	r6, #0
 8004dd0:	d100      	bne.n	8004dd4 <CLI_CommandParser+0x90>
 8004dd2:	e1ab      	b.n	800512c <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004dd4:	9803      	ldr	r0, [sp, #12]
 8004dd6:	f7ff fcf7 	bl	80047c8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004dda:	783d      	ldrb	r5, [r7, #0]
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	d1cd      	bne.n	8004d7c <CLI_CommandParser+0x38>
 8004de0:	2203      	movs	r2, #3
 8004de2:	49ba      	ldr	r1, [pc, #744]	; (80050cc <CLI_CommandParser+0x388>)
 8004de4:	9803      	ldr	r0, [sp, #12]
 8004de6:	f010 f825 	bl	8014e34 <strncmp>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d1cf      	bne.n	8004d8e <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	1cd9      	adds	r1, r3, #3
 8004df2:	3001      	adds	r0, #1
 8004df4:	f7ff ff2c 	bl	8004c50 <AddSnippet>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d1b6      	bne.n	8004d6a <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004dfc:	4baf      	ldr	r3, [pc, #700]	; (80050bc <CLI_CommandParser+0x378>)
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004e02:	230d      	movs	r3, #13
 8004e04:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004e06:	7823      	ldrb	r3, [r4, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d100      	bne.n	8004e0e <CLI_CommandParser+0xca>
 8004e0c:	e186      	b.n	800511c <CLI_CommandParser+0x3d8>
 8004e0e:	4643      	mov	r3, r8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d100      	bne.n	8004e16 <CLI_CommandParser+0xd2>
 8004e14:	e19d      	b.n	8005152 <CLI_CommandParser+0x40e>
 8004e16:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004e18:	0020      	movs	r0, r4
 8004e1a:	f7fb f97d 	bl	8000118 <strlen>
 8004e1e:	b282      	uxth	r2, r0
 8004e20:	2301      	movs	r3, #1
 8004e22:	425b      	negs	r3, r3
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	3333      	adds	r3, #51	; 0x33
 8004e28:	0021      	movs	r1, r4
 8004e2a:	9804      	ldr	r0, [sp, #16]
 8004e2c:	f009 fd5a 	bl	800e8e4 <writePxMutex>
 8004e30:	e7c5      	b.n	8004dbe <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004e32:	4ba2      	ldr	r3, [pc, #648]	; (80050bc <CLI_CommandParser+0x378>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004e38:	49a5      	ldr	r1, [pc, #660]	; (80050d0 <CLI_CommandParser+0x38c>)
 8004e3a:	3003      	adds	r0, #3
 8004e3c:	f7ff ff08 	bl	8004c50 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004e40:	2241      	movs	r2, #65	; 0x41
 8004e42:	49a4      	ldr	r1, [pc, #656]	; (80050d4 <CLI_CommandParser+0x390>)
 8004e44:	0020      	movs	r0, r4
 8004e46:	f00f fd7c 	bl	8014942 <memcpy>
			xReturned = pdFALSE;
 8004e4a:	e7dc      	b.n	8004e06 <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e4c:	9903      	ldr	r1, [sp, #12]
 8004e4e:	2002      	movs	r0, #2
 8004e50:	f7ff fefe 	bl	8004c50 <AddSnippet>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d102      	bne.n	8004e5e <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004e58:	230d      	movs	r3, #13
 8004e5a:	7023      	strb	r3, [r4, #0]
 8004e5c:	e7d3      	b.n	8004e06 <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e5e:	2252      	movs	r2, #82	; 0x52
 8004e60:	4997      	ldr	r1, [pc, #604]	; (80050c0 <CLI_CommandParser+0x37c>)
 8004e62:	0020      	movs	r0, r4
 8004e64:	f00f fd6d 	bl	8014942 <memcpy>
 8004e68:	e7cd      	b.n	8004e06 <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004e6a:	f00f fb0f 	bl	801448c <__locale_ctype_ptr>
 8004e6e:	786b      	ldrb	r3, [r5, #1]
 8004e70:	18c0      	adds	r0, r0, r3
 8004e72:	7843      	ldrb	r3, [r0, #1]
 8004e74:	075b      	lsls	r3, r3, #29
 8004e76:	d497      	bmi.n	8004da8 <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004e78:	9903      	ldr	r1, [sp, #12]
 8004e7a:	1a6a      	subs	r2, r5, r1
 8004e7c:	a807      	add	r0, sp, #28
 8004e7e:	f00f ffea 	bl	8014e56 <strncpy>
				id =GetID(idString);
 8004e82:	a807      	add	r0, sp, #28
 8004e84:	f7ff f9ba 	bl	80041fc <GetID>
 8004e88:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004e8a:	4a93      	ldr	r2, [pc, #588]	; (80050d8 <CLI_CommandParser+0x394>)
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	4693      	mov	fp, r2
 8004e90:	4290      	cmp	r0, r2
 8004e92:	d03d      	beq.n	8004f10 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004e94:	2864      	cmp	r0, #100	; 0x64
 8004e96:	d043      	beq.n	8004f20 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004e98:	2866      	cmp	r0, #102	; 0x66
 8004e9a:	d047      	beq.n	8004f2c <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004e9c:	28ff      	cmp	r0, #255	; 0xff
 8004e9e:	d04b      	beq.n	8004f38 <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004ea0:	466b      	mov	r3, sp
 8004ea2:	7d1b      	ldrb	r3, [r3, #20]
 8004ea4:	469a      	mov	sl, r3
 8004ea6:	2bfe      	cmp	r3, #254	; 0xfe
 8004ea8:	d078      	beq.n	8004f9c <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004eaa:	3501      	adds	r5, #1
 8004eac:	2206      	movs	r2, #6
 8004eae:	498b      	ldr	r1, [pc, #556]	; (80050dc <CLI_CommandParser+0x398>)
 8004eb0:	0028      	movs	r0, r5
 8004eb2:	f00f ffbf 	bl	8014e34 <strncmp>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d000      	beq.n	8004ebc <CLI_CommandParser+0x178>
 8004eba:	e0b4      	b.n	8005026 <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004ebc:	4b88      	ldr	r3, [pc, #544]	; (80050e0 <CLI_CommandParser+0x39c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004ec2:	2119      	movs	r1, #25
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	f004 fe69 	bl	8009b9c <SendMessageToModule>
						osDelay(100);
 8004eca:	2064      	movs	r0, #100	; 0x64
 8004ecc:	f009 fe37 	bl	800eb3e <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004ed0:	4b84      	ldr	r3, [pc, #528]	; (80050e4 <CLI_CommandParser+0x3a0>)
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	4b80      	ldr	r3, [pc, #512]	; (80050d8 <CLI_CommandParser+0x394>)
 8004ed6:	7818      	ldrb	r0, [r3, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4651      	mov	r1, sl
 8004edc:	f7fe fe68 	bl	8003bb0 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004ee0:	4b7f      	ldr	r3, [pc, #508]	; (80050e0 <CLI_CommandParser+0x39c>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b60      	cmp	r3, #96	; 0x60
 8004ee6:	d18e      	bne.n	8004e06 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004ee8:	21fa      	movs	r1, #250	; 0xfa
 8004eea:	0089      	lsls	r1, r1, #2
 8004eec:	2001      	movs	r0, #1
 8004eee:	f00b f9f9 	bl	80102e4 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004ef2:	4b7d      	ldr	r3, [pc, #500]	; (80050e8 <CLI_CommandParser+0x3a4>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d085      	beq.n	8004e06 <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004efa:	4a7c      	ldr	r2, [pc, #496]	; (80050ec <CLI_CommandParser+0x3a8>)
 8004efc:	8813      	ldrh	r3, [r2, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004f02:	9b05      	ldr	r3, [sp, #20]
 8004f04:	0022      	movs	r2, r4
 8004f06:	497a      	ldr	r1, [pc, #488]	; (80050f0 <CLI_CommandParser+0x3ac>)
 8004f08:	0020      	movs	r0, r4
 8004f0a:	f00f ff4f 	bl	8014dac <sprintf>
 8004f0e:	e77a      	b.n	8004e06 <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f10:	2299      	movs	r2, #153	; 0x99
 8004f12:	1c68      	adds	r0, r5, #1
 8004f14:	0092      	lsls	r2, r2, #2
 8004f16:	0021      	movs	r1, r4
 8004f18:	f009 fea8 	bl	800ec6c <FreeRTOS_CLIProcessCommand>
 8004f1c:	0006      	movs	r6, r0
 8004f1e:	e74a      	b.n	8004db6 <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004f20:	2227      	movs	r2, #39	; 0x27
 8004f22:	4974      	ldr	r1, [pc, #464]	; (80050f4 <CLI_CommandParser+0x3b0>)
 8004f24:	0020      	movs	r0, r4
 8004f26:	f00f fd0c 	bl	8014942 <memcpy>
 8004f2a:	e76c      	b.n	8004e06 <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004f2c:	2225      	movs	r2, #37	; 0x25
 8004f2e:	4972      	ldr	r1, [pc, #456]	; (80050f8 <CLI_CommandParser+0x3b4>)
 8004f30:	0020      	movs	r0, r4
 8004f32:	f00f fd06 	bl	8014942 <memcpy>
 8004f36:	e766      	b.n	8004e06 <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f38:	221a      	movs	r2, #26
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	486f      	ldr	r0, [pc, #444]	; (80050fc <CLI_CommandParser+0x3b8>)
 8004f3e:	f00f fd09 	bl	8014954 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f42:	3501      	adds	r5, #1
 8004f44:	9803      	ldr	r0, [sp, #12]
 8004f46:	f7fb f8e7 	bl	8000118 <strlen>
 8004f4a:	0006      	movs	r6, r0
 8004f4c:	ab07      	add	r3, sp, #28
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7fb f8e2 	bl	8000118 <strlen>
 8004f54:	1e72      	subs	r2, r6, #1
 8004f56:	1a12      	subs	r2, r2, r0
 8004f58:	0029      	movs	r1, r5
 8004f5a:	4869      	ldr	r0, [pc, #420]	; (8005100 <CLI_CommandParser+0x3bc>)
 8004f5c:	f00f ff7b 	bl	8014e56 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f60:	9803      	ldr	r0, [sp, #12]
 8004f62:	f7fb f8d9 	bl	8000118 <strlen>
 8004f66:	0006      	movs	r6, r0
 8004f68:	a807      	add	r0, sp, #28
 8004f6a:	f7fb f8d5 	bl	8000118 <strlen>
 8004f6e:	1a33      	subs	r3, r6, r0
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2217      	movs	r2, #23
 8004f74:	21ff      	movs	r1, #255	; 0xff
 8004f76:	4658      	mov	r0, fp
 8004f78:	f004 fde8 	bl	8009b4c <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f7c:	2299      	movs	r2, #153	; 0x99
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	0021      	movs	r1, r4
 8004f82:	0028      	movs	r0, r5
 8004f84:	f009 fe72 	bl	800ec6c <FreeRTOS_CLIProcessCommand>
 8004f88:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	f7fb f8c4 	bl	8000118 <strlen>
 8004f90:	1820      	adds	r0, r4, r0
 8004f92:	221d      	movs	r2, #29
 8004f94:	495b      	ldr	r1, [pc, #364]	; (8005104 <CLI_CommandParser+0x3c0>)
 8004f96:	f00f fcd4 	bl	8014942 <memcpy>
 8004f9a:	e70c      	b.n	8004db6 <CLI_CommandParser+0x72>
					group =id >> 8;
 8004f9c:	9b05      	ldr	r3, [sp, #20]
 8004f9e:	121b      	asrs	r3, r3, #8
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	469a      	mov	sl, r3
 8004fa4:	4b58      	ldr	r3, [pc, #352]	; (8005108 <CLI_CommandParser+0x3c4>)
 8004fa6:	4699      	mov	r9, r3
 8004fa8:	4652      	mov	r2, sl
 8004faa:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004fac:	221a      	movs	r2, #26
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4852      	ldr	r0, [pc, #328]	; (80050fc <CLI_CommandParser+0x3b8>)
 8004fb2:	f00f fccf 	bl	8014954 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004fb6:	1c6b      	adds	r3, r5, #1
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	9803      	ldr	r0, [sp, #12]
 8004fbc:	f7fb f8ac 	bl	8000118 <strlen>
 8004fc0:	0005      	movs	r5, r0
 8004fc2:	aa07      	add	r2, sp, #28
 8004fc4:	0010      	movs	r0, r2
 8004fc6:	f7fb f8a7 	bl	8000118 <strlen>
 8004fca:	3d01      	subs	r5, #1
 8004fcc:	1a2a      	subs	r2, r5, r0
 8004fce:	9905      	ldr	r1, [sp, #20]
 8004fd0:	484b      	ldr	r0, [pc, #300]	; (8005100 <CLI_CommandParser+0x3bc>)
 8004fd2:	f00f ff40 	bl	8014e56 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004fd6:	9803      	ldr	r0, [sp, #12]
 8004fd8:	f7fb f89e 	bl	8000118 <strlen>
 8004fdc:	0005      	movs	r5, r0
 8004fde:	a807      	add	r0, sp, #28
 8004fe0:	f7fb f89a 	bl	8000118 <strlen>
 8004fe4:	1a2b      	subs	r3, r5, r0
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2217      	movs	r2, #23
 8004fea:	4651      	mov	r1, sl
 8004fec:	4658      	mov	r0, fp
 8004fee:	f004 fdad 	bl	8009b4c <BroadcastMessage>
					if(InGroup(myID,group))
 8004ff2:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <CLI_CommandParser+0x394>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4a44      	ldr	r2, [pc, #272]	; (800510c <CLI_CommandParser+0x3c8>)
 8004ffc:	5a9b      	ldrh	r3, [r3, r2]
 8004ffe:	464a      	mov	r2, r9
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	4113      	asrs	r3, r2
 8005004:	07db      	lsls	r3, r3, #31
 8005006:	d406      	bmi.n	8005016 <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8005008:	ab07      	add	r3, sp, #28
 800500a:	0022      	movs	r2, r4
 800500c:	4940      	ldr	r1, [pc, #256]	; (8005110 <CLI_CommandParser+0x3cc>)
 800500e:	0020      	movs	r0, r4
 8005010:	f00f fecc 	bl	8014dac <sprintf>
 8005014:	e6cf      	b.n	8004db6 <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005016:	2299      	movs	r2, #153	; 0x99
 8005018:	0092      	lsls	r2, r2, #2
 800501a:	0021      	movs	r1, r4
 800501c:	9805      	ldr	r0, [sp, #20]
 800501e:	f009 fe25 	bl	800ec6c <FreeRTOS_CLIProcessCommand>
 8005022:	0006      	movs	r6, r0
 8005024:	e7f0      	b.n	8005008 <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005026:	9803      	ldr	r0, [sp, #12]
 8005028:	f7fb f876 	bl	8000118 <strlen>
 800502c:	0006      	movs	r6, r0
 800502e:	ab07      	add	r3, sp, #28
 8005030:	0018      	movs	r0, r3
 8005032:	f7fb f871 	bl	8000118 <strlen>
 8005036:	1e72      	subs	r2, r6, #1
 8005038:	1a12      	subs	r2, r2, r0
 800503a:	0029      	movs	r1, r5
 800503c:	4830      	ldr	r0, [pc, #192]	; (8005100 <CLI_CommandParser+0x3bc>)
 800503e:	f00f ff0a 	bl	8014e56 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005042:	9803      	ldr	r0, [sp, #12]
 8005044:	f7fb f868 	bl	8000118 <strlen>
 8005048:	0005      	movs	r5, r0
 800504a:	a807      	add	r0, sp, #28
 800504c:	f7fb f864 	bl	8000118 <strlen>
 8005050:	3d01      	subs	r5, #1
 8005052:	1a2a      	subs	r2, r5, r0
 8005054:	b292      	uxth	r2, r2
 8005056:	2117      	movs	r1, #23
 8005058:	4650      	mov	r0, sl
 800505a:	f004 fd9f 	bl	8009b9c <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800505e:	9a05      	ldr	r2, [sp, #20]
 8005060:	492c      	ldr	r1, [pc, #176]	; (8005114 <CLI_CommandParser+0x3d0>)
 8005062:	0020      	movs	r0, r4
 8005064:	f00f fea2 	bl	8014dac <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005068:	7823      	ldrb	r3, [r4, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <CLI_CommandParser+0x330>
 800506e:	4643      	mov	r3, r8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005074:	0020      	movs	r0, r4
 8005076:	f7fb f84f 	bl	8000118 <strlen>
 800507a:	0002      	movs	r2, r0
 800507c:	2100      	movs	r1, #0
 800507e:	0020      	movs	r0, r4
 8005080:	f00f fc68 	bl	8014954 <memset>
 8005084:	e72c      	b.n	8004ee0 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005086:	0020      	movs	r0, r4
 8005088:	f7fb f846 	bl	8000118 <strlen>
 800508c:	b282      	uxth	r2, r0
 800508e:	2301      	movs	r3, #1
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	3331      	adds	r3, #49	; 0x31
 8005094:	0021      	movs	r1, r4
 8005096:	9804      	ldr	r0, [sp, #16]
 8005098:	f009 fc24 	bl	800e8e4 <writePxMutex>
 800509c:	e7ea      	b.n	8005074 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800509e:	4643      	mov	r3, r8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d100      	bne.n	80050a6 <CLI_CommandParser+0x362>
 80050a4:	e68b      	b.n	8004dbe <CLI_CommandParser+0x7a>
 80050a6:	e6b7      	b.n	8004e18 <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050a8:	2301      	movs	r3, #1
 80050aa:	425b      	negs	r3, r3
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	3333      	adds	r3, #51	; 0x33
 80050b0:	2238      	movs	r2, #56	; 0x38
 80050b2:	4919      	ldr	r1, [pc, #100]	; (8005118 <CLI_CommandParser+0x3d4>)
 80050b4:	9804      	ldr	r0, [sp, #16]
 80050b6:	f009 fc15 	bl	800e8e4 <writePxMutex>
}
 80050ba:	e043      	b.n	8005144 <CLI_CommandParser+0x400>
 80050bc:	200012c4 	.word	0x200012c4
 80050c0:	08019860 	.word	0x08019860
 80050c4:	080198b4 	.word	0x080198b4
 80050c8:	08019900 	.word	0x08019900
 80050cc:	0801985c 	.word	0x0801985c
 80050d0:	080194e4 	.word	0x080194e4
 80050d4:	080198bc 	.word	0x080198bc
 80050d8:	200010ea 	.word	0x200010ea
 80050dc:	080199a0 	.word	0x080199a0
 80050e0:	20006dd4 	.word	0x20006dd4
 80050e4:	20000ae8 	.word	0x20000ae8
 80050e8:	20001188 	.word	0x20001188
 80050ec:	20001c02 	.word	0x20001c02
 80050f0:	080199cc 	.word	0x080199cc
 80050f4:	08019904 	.word	0x08019904
 80050f8:	0801992c 	.word	0x0801992c
 80050fc:	20000d60 	.word	0x20000d60
 8005100:	20000fac 	.word	0x20000fac
 8005104:	08019954 	.word	0x08019954
 8005108:	20001296 	.word	0x20001296
 800510c:	20000f34 	.word	0x20000f34
 8005110:	08019974 	.word	0x08019974
 8005114:	080199a8 	.word	0x080199a8
 8005118:	080199ec 	.word	0x080199ec
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800511c:	0020      	movs	r0, r4
 800511e:	f7fa fffb 	bl	8000118 <strlen>
 8005122:	0002      	movs	r2, r0
 8005124:	2100      	movs	r1, #0
 8005126:	0020      	movs	r0, r4
 8005128:	f00f fc14 	bl	8014954 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 800512c:	2209      	movs	r2, #9
 800512e:	2100      	movs	r1, #0
 8005130:	a807      	add	r0, sp, #28
 8005132:	f00f fc0f 	bl	8014954 <memset>
	if(!recordSnippet && enableOutput)
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <CLI_CommandParser+0x420>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <CLI_CommandParser+0x400>
 800513e:	4643      	mov	r3, r8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1b1      	bne.n	80050a8 <CLI_CommandParser+0x364>
}
 8005144:	b00b      	add	sp, #44	; 0x2c
 8005146:	bc3c      	pop	{r2, r3, r4, r5}
 8005148:	4690      	mov	r8, r2
 800514a:	4699      	mov	r9, r3
 800514c:	46a2      	mov	sl, r4
 800514e:	46ab      	mov	fp, r5
 8005150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005152:	0020      	movs	r0, r4
 8005154:	f7fa ffe0 	bl	8000118 <strlen>
 8005158:	0002      	movs	r2, r0
 800515a:	2100      	movs	r1, #0
 800515c:	0020      	movs	r0, r4
 800515e:	f00f fbf9 	bl	8014954 <memset>
 8005162:	e7e3      	b.n	800512c <CLI_CommandParser+0x3e8>
 8005164:	200012c4 	.word	0x200012c4

08005168 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	46ce      	mov	lr, r9
 800516c:	4647      	mov	r7, r8
 800516e:	b580      	push	{r7, lr}
 8005170:	b089      	sub	sp, #36	; 0x24
	char cRxedChar ='\0';
 8005172:	230f      	movs	r3, #15
 8005174:	aa04      	add	r2, sp, #16
 8005176:	4694      	mov	ip, r2
 8005178:	4463      	add	r3, ip
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800517e:	2101      	movs	r1, #1
 8005180:	4249      	negs	r1, r1
 8005182:	2001      	movs	r0, #1
 8005184:	f00b f8ae 	bl	80102e4 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005188:	f009 fdee 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 800518c:	9005      	str	r0, [sp, #20]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800518e:	23e1      	movs	r3, #225	; 0xe1
 8005190:	031b      	lsls	r3, r3, #12
 8005192:	4a5b      	ldr	r2, [pc, #364]	; (8005300 <prvCLITask+0x198>)
 8005194:	6892      	ldr	r2, [r2, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d009      	beq.n	80051ae <prvCLITask+0x46>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800519a:	2401      	movs	r4, #1
			if(port != PcPort)
 800519c:	4e59      	ldr	r6, [pc, #356]	; (8005304 <prvCLITask+0x19c>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800519e:	001d      	movs	r5, r3
			if(port != PcPort)
 80051a0:	7833      	ldrb	r3, [r6, #0]
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	d12d      	bne.n	8005202 <prvCLITask+0x9a>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80051a6:	3401      	adds	r4, #1
 80051a8:	b2e4      	uxtb	r4, r4
 80051aa:	2c07      	cmp	r4, #7
 80051ac:	d1f8      	bne.n	80051a0 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80051ae:	4b56      	ldr	r3, [pc, #344]	; (8005308 <prvCLITask+0x1a0>)
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	0053      	lsls	r3, r2, #1
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4a54      	ldr	r2, [pc, #336]	; (800530c <prvCLITask+0x1a4>)
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	4a54      	ldr	r2, [pc, #336]	; (8005310 <prvCLITask+0x1a8>)
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	4c54      	ldr	r4, [pc, #336]	; (8005314 <prvCLITask+0x1ac>)
 80051c2:	4d50      	ldr	r5, [pc, #320]	; (8005304 <prvCLITask+0x19c>)
 80051c4:	7829      	ldrb	r1, [r5, #0]
 80051c6:	9100      	str	r1, [sp, #0]
 80051c8:	4953      	ldr	r1, [pc, #332]	; (8005318 <prvCLITask+0x1b0>)
 80051ca:	0020      	movs	r0, r4
 80051cc:	f00f fdee 	bl	8014dac <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80051d0:	22a4      	movs	r2, #164	; 0xa4
 80051d2:	7828      	ldrb	r0, [r5, #0]
 80051d4:	230a      	movs	r3, #10
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	4950      	ldr	r1, [pc, #320]	; (800531c <prvCLITask+0x1b4>)
 80051da:	f009 fbab 	bl	800e934 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80051de:	0020      	movs	r0, r4
 80051e0:	f7fa ff9a 	bl	8000118 <strlen>
 80051e4:	b282      	uxth	r2, r0
 80051e6:	7828      	ldrb	r0, [r5, #0]
 80051e8:	230a      	movs	r3, #10
 80051ea:	0021      	movs	r1, r4
 80051ec:	f009 fba2 	bl	800e934 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80051f0:	2700      	movs	r7, #0
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80051f2:	4b44      	ldr	r3, [pc, #272]	; (8005304 <prvCLITask+0x19c>)
 80051f4:	4699      	mov	r9, r3
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <prvCLITask+0x1b8>)
 80051f8:	4698      	mov	r8, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80051fa:	001e      	movs	r6, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80051fc:	2301      	movs	r3, #1
 80051fe:	9304      	str	r3, [sp, #16]
 8005200:	e05a      	b.n	80052b8 <prvCLITask+0x150>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005202:	0029      	movs	r1, r5
 8005204:	0020      	movs	r0, r4
 8005206:	f009 fbdb 	bl	800e9c0 <UpdateBaudrate>
 800520a:	e7cc      	b.n	80051a6 <prvCLITask+0x3e>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 800520c:	240f      	movs	r4, #15
 800520e:	a904      	add	r1, sp, #16
 8005210:	468c      	mov	ip, r1
 8005212:	4464      	add	r4, ip
 8005214:	7022      	strb	r2, [r4, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005216:	006a      	lsls	r2, r5, #1
 8005218:	1952      	adds	r2, r2, r5
 800521a:	0192      	lsls	r2, r2, #6
 800521c:	4c41      	ldr	r4, [pc, #260]	; (8005324 <prvCLITask+0x1bc>)
 800521e:	18a2      	adds	r2, r4, r2
 8005220:	2400      	movs	r4, #0
 8005222:	9903      	ldr	r1, [sp, #12]
 8005224:	5454      	strb	r4, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005226:	4a3e      	ldr	r2, [pc, #248]	; (8005320 <prvCLITask+0x1b8>)
 8005228:	5553      	strb	r3, [r2, r5]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 800522a:	250f      	movs	r5, #15
 800522c:	ab04      	add	r3, sp, #16
 800522e:	469c      	mov	ip, r3
 8005230:	4465      	add	r5, ip
 8005232:	230a      	movs	r3, #10
 8005234:	2201      	movs	r2, #1
 8005236:	0029      	movs	r1, r5
 8005238:	f009 fb7c 	bl	800e934 <writePxITMutex>
		if(cRxedChar == '\r'){
 800523c:	782b      	ldrb	r3, [r5, #0]
 800523e:	2b0d      	cmp	r3, #13
 8005240:	d01d      	beq.n	800527e <prvCLITask+0x116>
			if(cRxedChar == '\n'){
 8005242:	2b0a      	cmp	r3, #10
 8005244:	d036      	beq.n	80052b4 <prvCLITask+0x14c>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005246:	2b08      	cmp	r3, #8
 8005248:	d052      	beq.n	80052f0 <prvCLITask+0x188>
 800524a:	2b7f      	cmp	r3, #127	; 0x7f
 800524c:	d050      	beq.n	80052f0 <prvCLITask+0x188>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 800524e:	001a      	movs	r2, r3
 8005250:	3a20      	subs	r2, #32
 8005252:	2a5e      	cmp	r2, #94	; 0x5e
 8005254:	d82e      	bhi.n	80052b4 <prvCLITask+0x14c>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005256:	2f31      	cmp	r7, #49	; 0x31
 8005258:	dc2c      	bgt.n	80052b4 <prvCLITask+0x14c>
						cInputString[cInputIndex] =cRxedChar;
 800525a:	4a33      	ldr	r2, [pc, #204]	; (8005328 <prvCLITask+0x1c0>)
 800525c:	55d3      	strb	r3, [r2, r7]
						cInputIndex++;
 800525e:	3701      	adds	r7, #1
 8005260:	b27f      	sxtb	r7, r7
 8005262:	e027      	b.n	80052b4 <prvCLITask+0x14c>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005264:	5571      	strb	r1, [r6, r5]
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005266:	9b04      	ldr	r3, [sp, #16]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	5ce2      	ldrb	r2, [r4, r3]
 800526c:	2a00      	cmp	r2, #0
 800526e:	d1cd      	bne.n	800520c <prvCLITask+0xa4>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005270:	2bbf      	cmp	r3, #191	; 0xbf
 8005272:	d0f7      	beq.n	8005264 <prvCLITask+0xfc>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005274:	3301      	adds	r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	2bbf      	cmp	r3, #191	; 0xbf
 800527a:	d9f5      	bls.n	8005268 <prvCLITask+0x100>
 800527c:	e7d5      	b.n	800522a <prvCLITask+0xc2>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800527e:	4b21      	ldr	r3, [pc, #132]	; (8005304 <prvCLITask+0x19c>)
 8005280:	7818      	ldrb	r0, [r3, #0]
 8005282:	230a      	movs	r3, #10
 8005284:	2202      	movs	r2, #2
 8005286:	4929      	ldr	r1, [pc, #164]	; (800532c <prvCLITask+0x1c4>)
 8005288:	f009 fb54 	bl	800e934 <writePxITMutex>
			if(cInputIndex == 0){
 800528c:	2f00      	cmp	r7, #0
 800528e:	d02a      	beq.n	80052e6 <prvCLITask+0x17e>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005290:	4f25      	ldr	r7, [pc, #148]	; (8005328 <prvCLITask+0x1c0>)
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <prvCLITask+0x19c>)
 8005294:	7818      	ldrb	r0, [r3, #0]
 8005296:	9b05      	ldr	r3, [sp, #20]
 8005298:	003a      	movs	r2, r7
 800529a:	2101      	movs	r1, #1
 800529c:	f7ff fd52 	bl	8004d44 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80052a0:	0039      	movs	r1, r7
 80052a2:	4823      	ldr	r0, [pc, #140]	; (8005330 <prvCLITask+0x1c8>)
 80052a4:	f00f fdbe 	bl	8014e24 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80052a8:	2232      	movs	r2, #50	; 0x32
 80052aa:	2100      	movs	r1, #0
 80052ac:	0038      	movs	r0, r7
 80052ae:	f00f fb51 	bl	8014954 <memset>
			cInputIndex =0;
 80052b2:	2700      	movs	r7, #0
		taskYIELD();
 80052b4:	f00b faf0 	bl	8010898 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80052b8:	464b      	mov	r3, r9
 80052ba:	7818      	ldrb	r0, [r3, #0]
 80052bc:	1e45      	subs	r5, r0, #1
 80052be:	4643      	mov	r3, r8
 80052c0:	5d59      	ldrb	r1, [r3, r5]
 80052c2:	b28b      	uxth	r3, r1
 80052c4:	2bbf      	cmp	r3, #191	; 0xbf
 80052c6:	d8b0      	bhi.n	800522a <prvCLITask+0xc2>
			if(UARTRxBuf[PcPort - 1][chr]){
 80052c8:	9103      	str	r1, [sp, #12]
 80052ca:	006a      	lsls	r2, r5, #1
 80052cc:	1952      	adds	r2, r2, r5
 80052ce:	0192      	lsls	r2, r2, #6
 80052d0:	4c14      	ldr	r4, [pc, #80]	; (8005324 <prvCLITask+0x1bc>)
 80052d2:	18a2      	adds	r2, r4, r2
 80052d4:	5c52      	ldrb	r2, [r2, r1]
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	d198      	bne.n	800520c <prvCLITask+0xa4>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80052da:	2100      	movs	r1, #0
			if(UARTRxBuf[PcPort - 1][chr]){
 80052dc:	006a      	lsls	r2, r5, #1
 80052de:	1952      	adds	r2, r2, r5
 80052e0:	0192      	lsls	r2, r2, #6
 80052e2:	18a4      	adds	r4, r4, r2
 80052e4:	e7c4      	b.n	8005270 <prvCLITask+0x108>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80052e6:	4912      	ldr	r1, [pc, #72]	; (8005330 <prvCLITask+0x1c8>)
 80052e8:	480f      	ldr	r0, [pc, #60]	; (8005328 <prvCLITask+0x1c0>)
 80052ea:	f00f fd9b 	bl	8014e24 <strcpy>
 80052ee:	e7cf      	b.n	8005290 <prvCLITask+0x128>
				if(cInputIndex > 0){
 80052f0:	2f00      	cmp	r7, #0
 80052f2:	dddf      	ble.n	80052b4 <prvCLITask+0x14c>
					cInputIndex--;
 80052f4:	3f01      	subs	r7, #1
 80052f6:	b27f      	sxtb	r7, r7
					cInputString[cInputIndex] ='\0';
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <prvCLITask+0x1c0>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	55da      	strb	r2, [r3, r7]
 80052fe:	e7d9      	b.n	80052b4 <prvCLITask+0x14c>
 8005300:	20006e54 	.word	0x20006e54
 8005304:	20000ae8 	.word	0x20000ae8
 8005308:	20000078 	.word	0x20000078
 800530c:	08019534 	.word	0x08019534
 8005310:	200010ea 	.word	0x200010ea
 8005314:	20001298 	.word	0x20001298
 8005318:	08019a58 	.word	0x08019a58
 800531c:	08019a84 	.word	0x08019a84
 8005320:	200017c8 	.word	0x200017c8
 8005324:	20001348 	.word	0x20001348
 8005328:	200011c8 	.word	0x200011c8
 800532c:	0801b340 	.word	0x0801b340
 8005330:	20001264 	.word	0x20001264

08005334 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005338:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <ParseSnippetCommand+0x78>)
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	3a01      	subs	r2, #1
 800533e:	0093      	lsls	r3, r2, #2
 8005340:	189b      	adds	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <ParseSnippetCommand+0x7c>)
 8005346:	18d3      	adds	r3, r2, r3
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d02c      	beq.n	80053a8 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d014      	beq.n	8005380 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005358:	681d      	ldr	r5, [r3, #0]
 800535a:	782b      	ldrb	r3, [r5, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005360:	2113      	movs	r1, #19
 8005362:	0028      	movs	r0, r5
 8005364:	f00f fd50 	bl	8014e08 <strchr>
 8005368:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 800536a:	d011      	beq.n	8005390 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 800536c:	1b42      	subs	r2, r0, r5
 800536e:	0029      	movs	r1, r5
 8005370:	0020      	movs	r0, r4
 8005372:	f00f fd70 	bl	8014e56 <strncpy>
		ptrStart =ptrEnd + 1;
 8005376:	3601      	adds	r6, #1
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <ParseSnippetCommand+0x80>)
 800537a:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800537c:	2001      	movs	r0, #1
 800537e:	e006      	b.n	800538e <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005382:	6018      	str	r0, [r3, #0]
 8005384:	e7e7      	b.n	8005356 <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
		return false;
 800538c:	2000      	movs	r0, #0
}
 800538e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005390:	0029      	movs	r1, r5
 8005392:	0020      	movs	r0, r4
 8005394:	f00f fd46 	bl	8014e24 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005398:	0020      	movs	r0, r4
 800539a:	f7fa febd 	bl	8000118 <strlen>
 800539e:	182d      	adds	r5, r5, r0
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <ParseSnippetCommand+0x80>)
 80053a2:	601d      	str	r5, [r3, #0]
	return true;
 80053a4:	2001      	movs	r0, #1
 80053a6:	e7f2      	b.n	800538e <ParseSnippetCommand+0x5a>
		return false;
 80053a8:	2000      	movs	r0, #0
 80053aa:	e7f0      	b.n	800538e <ParseSnippetCommand+0x5a>
 80053ac:	20001297 	.word	0x20001297
 80053b0:	20006e70 	.word	0x20006e70
 80053b4:	200012c0 	.word	0x200012c0

080053b8 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	b083      	sub	sp, #12
 80053bc:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80053be:	0083      	lsls	r3, r0, #2
 80053c0:	181b      	adds	r3, r3, r0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <CheckSnippetCondition+0x10c>)
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d003      	beq.n	80053d4 <CheckSnippetCondition+0x1c>
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d015      	beq.n	80053fc <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80053d0:	2000      	movs	r0, #0
 80053d2:	e011      	b.n	80053f8 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80053d4:	493b      	ldr	r1, [pc, #236]	; (80054c4 <CheckSnippetCondition+0x10c>)
 80053d6:	0083      	lsls	r3, r0, #2
 80053d8:	181a      	adds	r2, r3, r0
 80053da:	0092      	lsls	r2, r2, #2
 80053dc:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80053de:	7890      	ldrb	r0, [r2, #2]
 80053e0:	00c2      	lsls	r2, r0, #3
 80053e2:	1812      	adds	r2, r2, r0
 80053e4:	191b      	adds	r3, r3, r4
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	18cb      	adds	r3, r1, r3
 80053ea:	4937      	ldr	r1, [pc, #220]	; (80054c8 <CheckSnippetCondition+0x110>)
 80053ec:	5c50      	ldrb	r0, [r2, r1]
 80053ee:	78db      	ldrb	r3, [r3, #3]
 80053f0:	1ac0      	subs	r0, r0, r3
 80053f2:	4243      	negs	r3, r0
 80053f4:	4158      	adcs	r0, r3
 80053f6:	b2c0      	uxtb	r0, r0
}
 80053f8:	b003      	add	sp, #12
 80053fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80053fc:	4e31      	ldr	r6, [pc, #196]	; (80054c4 <CheckSnippetCondition+0x10c>)
 80053fe:	0085      	lsls	r5, r0, #2
 8005400:	182b      	adds	r3, r5, r0
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	18f3      	adds	r3, r6, r3
 8005406:	78da      	ldrb	r2, [r3, #3]
 8005408:	3a01      	subs	r2, #1
 800540a:	0053      	lsls	r3, r2, #1
 800540c:	189b      	adds	r3, r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <CheckSnippetCondition+0x114>)
 8005412:	589b      	ldr	r3, [r3, r2]
 8005414:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005416:	1829      	adds	r1, r5, r0
 8005418:	0089      	lsls	r1, r1, #2
 800541a:	3106      	adds	r1, #6
 800541c:	1989      	adds	r1, r1, r6
 800541e:	2204      	movs	r2, #4
 8005420:	a801      	add	r0, sp, #4
 8005422:	f00f fa8e 	bl	8014942 <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005426:	192d      	adds	r5, r5, r4
 8005428:	00ad      	lsls	r5, r5, #2
 800542a:	1975      	adds	r5, r6, r5
 800542c:	786b      	ldrb	r3, [r5, #1]
 800542e:	2b06      	cmp	r3, #6
 8005430:	d83f      	bhi.n	80054b2 <CheckSnippetCondition+0xfa>
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <CheckSnippetCondition+0x118>)
 8005436:	58d3      	ldr	r3, [r2, r3]
 8005438:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800543a:	1c39      	adds	r1, r7, #0
 800543c:	9801      	ldr	r0, [sp, #4]
 800543e:	f7fb f847 	bl	80004d0 <__aeabi_fcmpeq>
 8005442:	1e43      	subs	r3, r0, #1
 8005444:	4198      	sbcs	r0, r3
 8005446:	e7d7      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005448:	1c39      	adds	r1, r7, #0
 800544a:	9801      	ldr	r0, [sp, #4]
 800544c:	f7fb f846 	bl	80004dc <__aeabi_fcmplt>
 8005450:	1e43      	subs	r3, r0, #1
 8005452:	4198      	sbcs	r0, r3
 8005454:	e7d0      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005456:	1c39      	adds	r1, r7, #0
 8005458:	9801      	ldr	r0, [sp, #4]
 800545a:	f7fb f853 	bl	8000504 <__aeabi_fcmpgt>
 800545e:	2800      	cmp	r0, #0
 8005460:	d029      	beq.n	80054b6 <CheckSnippetCondition+0xfe>
 8005462:	2100      	movs	r1, #0
 8005464:	1c38      	adds	r0, r7, #0
 8005466:	f7fb f833 	bl	80004d0 <__aeabi_fcmpeq>
 800546a:	4243      	negs	r3, r0
 800546c:	4158      	adcs	r0, r3
 800546e:	e7c3      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005470:	1c39      	adds	r1, r7, #0
 8005472:	9801      	ldr	r0, [sp, #4]
 8005474:	f7fb f83c 	bl	80004f0 <__aeabi_fcmple>
 8005478:	1e43      	subs	r3, r0, #1
 800547a:	4198      	sbcs	r0, r3
 800547c:	e7bc      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800547e:	1c39      	adds	r1, r7, #0
 8005480:	9801      	ldr	r0, [sp, #4]
 8005482:	f7fb f849 	bl	8000518 <__aeabi_fcmpge>
 8005486:	2800      	cmp	r0, #0
 8005488:	d017      	beq.n	80054ba <CheckSnippetCondition+0x102>
 800548a:	2100      	movs	r1, #0
 800548c:	1c38      	adds	r0, r7, #0
 800548e:	f7fb f81f 	bl	80004d0 <__aeabi_fcmpeq>
 8005492:	4243      	negs	r3, r0
 8005494:	4158      	adcs	r0, r3
 8005496:	e7af      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005498:	1c39      	adds	r1, r7, #0
 800549a:	9801      	ldr	r0, [sp, #4]
 800549c:	f7fb f818 	bl	80004d0 <__aeabi_fcmpeq>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d10c      	bne.n	80054be <CheckSnippetCondition+0x106>
 80054a4:	2100      	movs	r1, #0
 80054a6:	1c38      	adds	r0, r7, #0
 80054a8:	f7fb f812 	bl	80004d0 <__aeabi_fcmpeq>
 80054ac:	4243      	negs	r3, r0
 80054ae:	4158      	adcs	r0, r3
 80054b0:	e7a2      	b.n	80053f8 <CheckSnippetCondition+0x40>
	return false;
 80054b2:	2000      	movs	r0, #0
 80054b4:	e7a0      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054b6:	2000      	movs	r0, #0
 80054b8:	e79e      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054ba:	2000      	movs	r0, #0
 80054bc:	e79c      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054be:	2000      	movs	r0, #0
 80054c0:	e79a      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	20006e70 	.word	0x20006e70
 80054c8:	20001974 	.word	0x20001974
 80054cc:	200000ac 	.word	0x200000ac
 80054d0:	08019840 	.word	0x08019840

080054d4 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80054d6:	f009 fc47 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 80054da:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <ExecuteSnippet+0x7c>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d032      	beq.n	800554a <ExecuteSnippet+0x76>
 80054e4:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 80054e6:	4f1b      	ldr	r7, [pc, #108]	; (8005554 <ExecuteSnippet+0x80>)
 80054e8:	e01a      	b.n	8005520 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <ExecuteSnippet+0x84>)
 80054ec:	7818      	ldrb	r0, [r3, #0]
 80054ee:	002b      	movs	r3, r5
 80054f0:	4a1a      	ldr	r2, [pc, #104]	; (800555c <ExecuteSnippet+0x88>)
 80054f2:	2100      	movs	r1, #0
 80054f4:	f7ff fc26 	bl	8004d44 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80054f8:	0028      	movs	r0, r5
 80054fa:	f7fa fe0d 	bl	8000118 <strlen>
 80054fe:	0002      	movs	r2, r0
 8005500:	2100      	movs	r1, #0
 8005502:	0028      	movs	r0, r5
 8005504:	f00f fa26 	bl	8014954 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005508:	4914      	ldr	r1, [pc, #80]	; (800555c <ExecuteSnippet+0x88>)
 800550a:	68f0      	ldr	r0, [r6, #12]
 800550c:	f7ff ff12 	bl	8005334 <ParseSnippetCommand>
 8005510:	2800      	cmp	r0, #0
 8005512:	d1ea      	bne.n	80054ea <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005514:	3401      	adds	r4, #1
 8005516:	b2a4      	uxth	r4, r4
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <ExecuteSnippet+0x7c>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	42a3      	cmp	r3, r4
 800551e:	d914      	bls.n	800554a <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 8005520:	00a3      	lsls	r3, r4, #2
 8005522:	191b      	adds	r3, r3, r4
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	7c1b      	ldrb	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f2      	beq.n	8005514 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800552e:	b2e0      	uxtb	r0, r4
 8005530:	f7ff ff42 	bl	80053b8 <CheckSnippetCondition>
 8005534:	2800      	cmp	r0, #0
 8005536:	d0ed      	beq.n	8005514 <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <ExecuteSnippet+0x8c>)
 800553a:	2220      	movs	r2, #32
 800553c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800553e:	00a3      	lsls	r3, r4, #2
 8005540:	191e      	adds	r6, r3, r4
 8005542:	00b6      	lsls	r6, r6, #2
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <ExecuteSnippet+0x80>)
 8005546:	199e      	adds	r6, r3, r6
 8005548:	e7de      	b.n	8005508 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 800554a:	2000      	movs	r0, #0
 800554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20001297 	.word	0x20001297
 8005554:	20006e70 	.word	0x20006e70
 8005558:	20000ae8 	.word	0x20000ae8
 800555c:	20001230 	.word	0x20001230
 8005560:	20006dd4 	.word	0x20006dd4

08005564 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005564:	2000      	movs	r0, #0
 8005566:	4770      	bx	lr

08005568 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	0004      	movs	r4, r0
 800556e:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005570:	2300      	movs	r3, #0
 8005572:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005574:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005576:	2800      	cmp	r0, #0
 8005578:	d101      	bne.n	800557e <setBaudrateCommand+0x16>
 800557a:	b672      	cpsid	i
 800557c:	e7fe      	b.n	800557c <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800557e:	aa01      	add	r2, sp, #4
 8005580:	2101      	movs	r1, #1
 8005582:	0028      	movs	r0, r5
 8005584:	f009 fbf4 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005588:	2300      	movs	r3, #0
 800558a:	56c3      	ldrsb	r3, [r0, r3]
 800558c:	2b70      	cmp	r3, #112	; 0x70
 800558e:	d00c      	beq.n	80055aa <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005590:	466a      	mov	r2, sp
 8005592:	2102      	movs	r1, #2
 8005594:	0028      	movs	r0, r5
 8005596:	f009 fbeb 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800559a:	f00e ff48 	bl	801442e <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800559e:	2213      	movs	r2, #19
 80055a0:	490f      	ldr	r1, [pc, #60]	; (80055e0 <setBaudrateCommand+0x78>)
 80055a2:	0020      	movs	r0, r4
 80055a4:	f00f f9cd 	bl	8014942 <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 80055a8:	e016      	b.n	80055d8 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80055aa:	3001      	adds	r0, #1
 80055ac:	f00e ff3f 	bl	801442e <atol>
 80055b0:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055b2:	466a      	mov	r2, sp
 80055b4:	2102      	movs	r1, #2
 80055b6:	0028      	movs	r0, r5
 80055b8:	f009 fbda 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80055bc:	f00e ff37 	bl	801442e <atol>
 80055c0:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 80055c2:	b2f0      	uxtb	r0, r6
 80055c4:	0029      	movs	r1, r5
 80055c6:	f009 f9fb 	bl	800e9c0 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80055ca:	23ff      	movs	r3, #255	; 0xff
 80055cc:	4033      	ands	r3, r6
 80055ce:	002a      	movs	r2, r5
 80055d0:	4904      	ldr	r1, [pc, #16]	; (80055e4 <setBaudrateCommand+0x7c>)
 80055d2:	0020      	movs	r0, r4
 80055d4:	f00f fbea 	bl	8014dac <sprintf>
}
 80055d8:	2000      	movs	r0, #0
 80055da:	b002      	add	sp, #8
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	0801a710 	.word	0x0801a710
 80055e4:	0801a6e8 	.word	0x0801a6e8

080055e8 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055e8:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d101      	bne.n	80055f2 <flashsizeCommand+0xa>
 80055ee:	b672      	cpsid	i
 80055f0:	e7fe      	b.n	80055f0 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <flashsizeCommand+0x18>)
 80055f4:	881a      	ldrh	r2, [r3, #0]
 80055f6:	4903      	ldr	r1, [pc, #12]	; (8005604 <flashsizeCommand+0x1c>)
 80055f8:	f00f fbd8 	bl	8014dac <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80055fc:	2000      	movs	r0, #0
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	1ffff7cc 	.word	0x1ffff7cc
 8005604:	0801a0dc 	.word	0x0801a0dc

08005608 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005608:	b510      	push	{r4, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	0004      	movs	r4, r0
 800560e:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005610:	2300      	movs	r3, #0
 8005612:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005618:	2c00      	cmp	r4, #0
 800561a:	d101      	bne.n	8005620 <GetReadPrecentageCommand+0x18>
 800561c:	b672      	cpsid	i
 800561e:	e7fe      	b.n	800561e <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005620:	aa01      	add	r2, sp, #4
 8005622:	2101      	movs	r1, #1
 8005624:	f009 fba4 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005628:	7803      	ldrb	r3, [r0, #0]
 800562a:	3b32      	subs	r3, #50	; 0x32
 800562c:	2b01      	cmp	r3, #1
 800562e:	d907      	bls.n	8005640 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005630:	2215      	movs	r2, #21
 8005632:	490b      	ldr	r1, [pc, #44]	; (8005660 <GetReadPrecentageCommand+0x58>)
 8005634:	0020      	movs	r0, r4
 8005636:	f00f f984 	bl	8014942 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800563a:	2000      	movs	r0, #0
 800563c:	b002      	add	sp, #8
 800563e:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005640:	f00e fef5 	bl	801442e <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005644:	b2c0      	uxtb	r0, r0
 8005646:	4669      	mov	r1, sp
 8005648:	f003 fb58 	bl	8008cfc <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 800564c:	9800      	ldr	r0, [sp, #0]
 800564e:	f7fd fa69 	bl	8002b24 <__aeabi_f2d>
 8005652:	0002      	movs	r2, r0
 8005654:	000b      	movs	r3, r1
 8005656:	4903      	ldr	r1, [pc, #12]	; (8005664 <GetReadPrecentageCommand+0x5c>)
 8005658:	0020      	movs	r0, r4
 800565a:	f00f fba7 	bl	8014dac <sprintf>
 800565e:	e7ec      	b.n	800563a <GetReadPrecentageCommand+0x32>
 8005660:	08019dd8 	.word	0x08019dd8
 8005664:	08019db4 	.word	0x08019db4

08005668 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005668:	b510      	push	{r4, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800566e:	2300      	movs	r3, #0
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005674:	2800      	cmp	r0, #0
 8005676:	d101      	bne.n	800567c <ReadVrefCommand+0x14>
 8005678:	b672      	cpsid	i
 800567a:	e7fe      	b.n	800567a <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800567c:	4669      	mov	r1, sp
 800567e:	a801      	add	r0, sp, #4
 8005680:	f003 fa7e 	bl	8008b80 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005684:	a901      	add	r1, sp, #4
 8005686:	0020      	movs	r0, r4
 8005688:	f00f fbcc 	bl	8014e24 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 800568c:	9800      	ldr	r0, [sp, #0]
 800568e:	f7fd fa49 	bl	8002b24 <__aeabi_f2d>
 8005692:	0002      	movs	r2, r0
 8005694:	000b      	movs	r3, r1
 8005696:	4903      	ldr	r1, [pc, #12]	; (80056a4 <ReadVrefCommand+0x3c>)
 8005698:	0020      	movs	r0, r4
 800569a:	f00f fb87 	bl	8014dac <sprintf>
}
 800569e:	2000      	movs	r0, #0
 80056a0:	b002      	add	sp, #8
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	08019e24 	.word	0x08019e24

080056a8 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a8:	b510      	push	{r4, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d101      	bne.n	80056bc <ReadTempCommand+0x14>
 80056b8:	b672      	cpsid	i
 80056ba:	e7fe      	b.n	80056ba <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056bc:	4669      	mov	r1, sp
 80056be:	a801      	add	r0, sp, #4
 80056c0:	f003 fa5e 	bl	8008b80 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80056c4:	a901      	add	r1, sp, #4
 80056c6:	0020      	movs	r0, r4
 80056c8:	f00f fbac 	bl	8014e24 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80056cc:	9801      	ldr	r0, [sp, #4]
 80056ce:	f7fd fa29 	bl	8002b24 <__aeabi_f2d>
 80056d2:	0002      	movs	r2, r0
 80056d4:	000b      	movs	r3, r1
 80056d6:	4903      	ldr	r1, [pc, #12]	; (80056e4 <ReadTempCommand+0x3c>)
 80056d8:	0020      	movs	r0, r4
 80056da:	f00f fb67 	bl	8014dac <sprintf>
}
 80056de:	2000      	movs	r0, #0
 80056e0:	b002      	add	sp, #8
 80056e2:	bd10      	pop	{r4, pc}
 80056e4:	08019df0 	.word	0x08019df0

080056e8 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	0004      	movs	r4, r0
 80056ee:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80056f4:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d101      	bne.n	8005702 <ADCReadCommand+0x1a>
 80056fe:	b672      	cpsid	i
 8005700:	e7fe      	b.n	8005700 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005702:	aa03      	add	r2, sp, #12
 8005704:	2101      	movs	r1, #1
 8005706:	0030      	movs	r0, r6
 8005708:	f009 fb32 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800570c:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800570e:	aa02      	add	r2, sp, #8
 8005710:	2102      	movs	r1, #2
 8005712:	0030      	movs	r0, r6
 8005714:	f009 fb2c 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8005718:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800571a:	782b      	ldrb	r3, [r5, #0]
 800571c:	3b32      	subs	r3, #50	; 0x32
 800571e:	2b01      	cmp	r3, #1
 8005720:	d907      	bls.n	8005732 <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005722:	2215      	movs	r2, #21
 8005724:	4919      	ldr	r1, [pc, #100]	; (800578c <ADCReadCommand+0xa4>)
 8005726:	0020      	movs	r0, r4
 8005728:	f00f f90b 	bl	8014942 <memcpy>
}
 800572c:	2000      	movs	r0, #0
 800572e:	b004      	add	sp, #16
 8005730:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005732:	0028      	movs	r0, r5
 8005734:	f00e fe7b 	bl	801442e <atol>
 8005738:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800573a:	4915      	ldr	r1, [pc, #84]	; (8005790 <ADCReadCommand+0xa8>)
 800573c:	0030      	movs	r0, r6
 800573e:	f7fa fce1 	bl	8000104 <strcmp>
 8005742:	2800      	cmp	r0, #0
 8005744:	d005      	beq.n	8005752 <ADCReadCommand+0x6a>
 8005746:	4913      	ldr	r1, [pc, #76]	; (8005794 <ADCReadCommand+0xac>)
 8005748:	0030      	movs	r0, r6
 800574a:	f7fa fcdb 	bl	8000104 <strcmp>
 800574e:	2800      	cmp	r0, #0
 8005750:	d116      	bne.n	8005780 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 8005752:	4e0f      	ldr	r6, [pc, #60]	; (8005790 <ADCReadCommand+0xa8>)
 8005754:	0031      	movs	r1, r6
 8005756:	0028      	movs	r0, r5
 8005758:	f003 fbb2 	bl	8008ec0 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 800575c:	aa01      	add	r2, sp, #4
 800575e:	0031      	movs	r1, r6
 8005760:	0028      	movs	r0, r5
 8005762:	f003 fbdf 	bl	8008f24 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005766:	a901      	add	r1, sp, #4
 8005768:	0020      	movs	r0, r4
 800576a:	f00f fb5b 	bl	8014e24 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 800576e:	9801      	ldr	r0, [sp, #4]
 8005770:	f7fa ff26 	bl	80005c0 <__aeabi_f2uiz>
 8005774:	b282      	uxth	r2, r0
 8005776:	4908      	ldr	r1, [pc, #32]	; (8005798 <ADCReadCommand+0xb0>)
 8005778:	0020      	movs	r0, r4
 800577a:	f00f fb17 	bl	8014dac <sprintf>
 800577e:	e7d5      	b.n	800572c <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005780:	2212      	movs	r2, #18
 8005782:	4906      	ldr	r1, [pc, #24]	; (800579c <ADCReadCommand+0xb4>)
 8005784:	0020      	movs	r0, r4
 8005786:	f00f f8dc 	bl	8014942 <memcpy>
 800578a:	e7cf      	b.n	800572c <ADCReadCommand+0x44>
 800578c:	08019dd8 	.word	0x08019dd8
 8005790:	08019d64 	.word	0x08019d64
 8005794:	08019d68 	.word	0x08019d68
 8005798:	08019d70 	.word	0x08019d70
 800579c:	08019d80 	.word	0x08019d80

080057a0 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a2:	46d6      	mov	lr, sl
 80057a4:	4647      	mov	r7, r8
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b085      	sub	sp, #20
 80057aa:	0004      	movs	r4, r0
 80057ac:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80057b2:	4b64      	ldr	r3, [pc, #400]	; (8005944 <testportCommand+0x1a4>)
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	ab02      	add	r3, sp, #8
 80057b8:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 80057ba:	2c00      	cmp	r4, #0
 80057bc:	d101      	bne.n	80057c2 <testportCommand+0x22>
 80057be:	b672      	cpsid	i
 80057c0:	e7fe      	b.n	80057c0 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057c2:	aa03      	add	r2, sp, #12
 80057c4:	2101      	movs	r1, #1
 80057c6:	f009 fad3 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80057ca:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80057cc:	495e      	ldr	r1, [pc, #376]	; (8005948 <testportCommand+0x1a8>)
 80057ce:	f7fa fc99 	bl	8000104 <strcmp>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d177      	bne.n	80058c6 <testportCommand+0x126>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80057d6:	4b5d      	ldr	r3, [pc, #372]	; (800594c <testportCommand+0x1ac>)
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <testportCommand+0x1b0>)
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	3b01      	subs	r3, #1
 80057e0:	781e      	ldrb	r6, [r3, #0]
 80057e2:	2501      	movs	r5, #1
			if(PcPort != ports){
 80057e4:	4b59      	ldr	r3, [pc, #356]	; (800594c <testportCommand+0x1ac>)
 80057e6:	4698      	mov	r8, r3
 80057e8:	e015      	b.n	8005816 <testportCommand+0x76>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80057ea:	002a      	movs	r2, r5
 80057ec:	4959      	ldr	r1, [pc, #356]	; (8005954 <testportCommand+0x1b4>)
 80057ee:	0020      	movs	r0, r4
 80057f0:	f00f fadc 	bl	8014dac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057f4:	0020      	movs	r0, r4
 80057f6:	f7fa fc8f 	bl	8000118 <strlen>
 80057fa:	b282      	uxth	r2, r0
 80057fc:	4b53      	ldr	r3, [pc, #332]	; (800594c <testportCommand+0x1ac>)
 80057fe:	7818      	ldrb	r0, [r3, #0]
 8005800:	2364      	movs	r3, #100	; 0x64
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	3b5a      	subs	r3, #90	; 0x5a
 8005806:	0021      	movs	r1, r4
 8005808:	f009 f86c 	bl	800e8e4 <writePxMutex>
 800580c:	e02f      	b.n	800586e <testportCommand+0xce>
 800580e:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005810:	2d07      	cmp	r5, #7
 8005812:	d100      	bne.n	8005816 <testportCommand+0x76>
 8005814:	e083      	b.n	800591e <testportCommand+0x17e>
 8005816:	b2eb      	uxtb	r3, r5
 8005818:	469a      	mov	sl, r3
			if(PcPort != ports){
 800581a:	4643      	mov	r3, r8
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	4553      	cmp	r3, sl
 8005820:	d0f5      	beq.n	800580e <testportCommand+0x6e>
				WriteVaule[0] =rand();
 8005822:	f00f f8af 	bl	8014984 <rand>
 8005826:	af02      	add	r7, sp, #8
 8005828:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 800582a:	2364      	movs	r3, #100	; 0x64
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	3b5a      	subs	r3, #90	; 0x5a
 8005830:	2201      	movs	r2, #1
 8005832:	0039      	movs	r1, r7
 8005834:	4650      	mov	r0, sl
 8005836:	f009 f855 	bl	800e8e4 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800583a:	4650      	mov	r0, sl
 800583c:	f009 f830 	bl	800e8a0 <GetUart>
 8005840:	6803      	ldr	r3, [r0, #0]
 8005842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005844:	783a      	ldrb	r2, [r7, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	429a      	cmp	r2, r3
 800584a:	d0ce      	beq.n	80057ea <testportCommand+0x4a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 800584c:	002a      	movs	r2, r5
 800584e:	4942      	ldr	r1, [pc, #264]	; (8005958 <testportCommand+0x1b8>)
 8005850:	0020      	movs	r0, r4
 8005852:	f00f faab 	bl	8014dac <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005856:	0020      	movs	r0, r4
 8005858:	f7fa fc5e 	bl	8000118 <strlen>
 800585c:	b282      	uxth	r2, r0
 800585e:	4b3b      	ldr	r3, [pc, #236]	; (800594c <testportCommand+0x1ac>)
 8005860:	7818      	ldrb	r0, [r3, #0]
 8005862:	2364      	movs	r3, #100	; 0x64
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	3b5a      	subs	r3, #90	; 0x5a
 8005868:	0021      	movs	r1, r4
 800586a:	f009 f83b 	bl	800e8e4 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 800586e:	2254      	movs	r2, #84	; 0x54
 8005870:	493a      	ldr	r1, [pc, #232]	; (800595c <testportCommand+0x1bc>)
 8005872:	0020      	movs	r0, r4
 8005874:	f00f f865 	bl	8014942 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005878:	0020      	movs	r0, r4
 800587a:	f7fa fc4d 	bl	8000118 <strlen>
 800587e:	b282      	uxth	r2, r0
 8005880:	4b32      	ldr	r3, [pc, #200]	; (800594c <testportCommand+0x1ac>)
 8005882:	7818      	ldrb	r0, [r3, #0]
 8005884:	2364      	movs	r3, #100	; 0x64
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	3b5a      	subs	r3, #90	; 0x5a
 800588a:	0021      	movs	r1, r4
 800588c:	f009 f82a 	bl	800e8e4 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005890:	3601      	adds	r6, #1
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <testportCommand+0x1ac>)
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	3a01      	subs	r2, #1
 8005898:	0053      	lsls	r3, r2, #1
 800589a:	189b      	adds	r3, r3, r2
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	4a30      	ldr	r2, [pc, #192]	; (8005960 <testportCommand+0x1c0>)
 80058a0:	18d3      	adds	r3, r2, r3
 80058a2:	5d9b      	ldrb	r3, [r3, r6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1b2      	bne.n	800580e <testportCommand+0x6e>
 80058a8:	4692      	mov	sl, r2
 80058aa:	4f28      	ldr	r7, [pc, #160]	; (800594c <testportCommand+0x1ac>)
					Delay_ms(1);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f00b f971 	bl	8010b94 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80058b2:	783a      	ldrb	r2, [r7, #0]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	0053      	lsls	r3, r2, #1
 80058b8:	189b      	adds	r3, r3, r2
 80058ba:	019b      	lsls	r3, r3, #6
 80058bc:	4453      	add	r3, sl
 80058be:	5d9b      	ldrb	r3, [r3, r6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f3      	beq.n	80058ac <testportCommand+0x10c>
 80058c4:	e7a3      	b.n	800580e <testportCommand+0x6e>
	else if(pcParameterString1[0] == 'p'){
 80058c6:	2300      	movs	r3, #0
 80058c8:	56eb      	ldrsb	r3, [r5, r3]
 80058ca:	2b70      	cmp	r3, #112	; 0x70
 80058cc:	d005      	beq.n	80058da <testportCommand+0x13a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058ce:	220f      	movs	r2, #15
 80058d0:	4924      	ldr	r1, [pc, #144]	; (8005964 <testportCommand+0x1c4>)
 80058d2:	0020      	movs	r0, r4
 80058d4:	f00f f835 	bl	8014942 <memcpy>
 80058d8:	e021      	b.n	800591e <testportCommand+0x17e>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80058da:	1c68      	adds	r0, r5, #1
 80058dc:	f00e fda7 	bl	801442e <atol>
 80058e0:	0005      	movs	r5, r0
 80058e2:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 80058e4:	1e7b      	subs	r3, r7, #1
 80058e6:	2b05      	cmp	r3, #5
 80058e8:	d825      	bhi.n	8005936 <testportCommand+0x196>
				WriteVaule[0] =rand();
 80058ea:	f00f f84b 	bl	8014984 <rand>
 80058ee:	ae02      	add	r6, sp, #8
 80058f0:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80058f2:	2364      	movs	r3, #100	; 0x64
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	3b32      	subs	r3, #50	; 0x32
 80058f8:	2201      	movs	r2, #1
 80058fa:	0031      	movs	r1, r6
 80058fc:	0038      	movs	r0, r7
 80058fe:	f008 fff1 	bl	800e8e4 <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005902:	0038      	movs	r0, r7
 8005904:	f008 ffcc 	bl	800e8a0 <GetUart>
 8005908:	6803      	ldr	r3, [r0, #0]
 800590a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 800590c:	7832      	ldrb	r2, [r6, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	429a      	cmp	r2, r3
 8005912:	d10a      	bne.n	800592a <testportCommand+0x18a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005914:	b2ea      	uxtb	r2, r5
 8005916:	490f      	ldr	r1, [pc, #60]	; (8005954 <testportCommand+0x1b4>)
 8005918:	0020      	movs	r0, r4
 800591a:	f00f fa47 	bl	8014dac <sprintf>
}
 800591e:	2000      	movs	r0, #0
 8005920:	b005      	add	sp, #20
 8005922:	bc0c      	pop	{r2, r3}
 8005924:	4690      	mov	r8, r2
 8005926:	469a      	mov	sl, r3
 8005928:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 800592a:	b2ea      	uxtb	r2, r5
 800592c:	490a      	ldr	r1, [pc, #40]	; (8005958 <testportCommand+0x1b8>)
 800592e:	0020      	movs	r0, r4
 8005930:	f00f fa3c 	bl	8014dac <sprintf>
 8005934:	e7f3      	b.n	800591e <testportCommand+0x17e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005936:	221b      	movs	r2, #27
 8005938:	490b      	ldr	r1, [pc, #44]	; (8005968 <testportCommand+0x1c8>)
 800593a:	0020      	movs	r0, r4
 800593c:	f00f f801 	bl	8014942 <memcpy>
	return pdFALSE;
 8005940:	e7ed      	b.n	800591e <testportCommand+0x17e>
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	080191a8 	.word	0x080191a8
 8005948:	08019504 	.word	0x08019504
 800594c:	20000ae8 	.word	0x20000ae8
 8005950:	200017c8 	.word	0x200017c8
 8005954:	0801b9d0 	.word	0x0801b9d0
 8005958:	0801b9ec 	.word	0x0801b9ec
 800595c:	0801ba00 	.word	0x0801ba00
 8005960:	20001348 	.word	0x20001348
 8005964:	0801ba54 	.word	0x0801ba54
 8005968:	0801ba64 	.word	0x0801ba64

0800596c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800596c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800596e:	b083      	sub	sp, #12
 8005970:	0004      	movs	r4, r0
 8005972:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005974:	2300      	movs	r3, #0
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800597a:	2800      	cmp	r0, #0
 800597c:	d101      	bne.n	8005982 <unbridgeCommand+0x16>
 800597e:	b672      	cpsid	i
 8005980:	e7fe      	b.n	8005980 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005982:	aa01      	add	r2, sp, #4
 8005984:	2101      	movs	r1, #1
 8005986:	0028      	movs	r0, r5
 8005988:	f009 f9f2 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800598c:	2300      	movs	r3, #0
 800598e:	56c3      	ldrsb	r3, [r0, r3]
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d00e      	beq.n	80059b2 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005994:	466a      	mov	r2, sp
 8005996:	2102      	movs	r1, #2
 8005998:	0028      	movs	r0, r5
 800599a:	f009 f9e9 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800599e:	2300      	movs	r3, #0
 80059a0:	56c3      	ldrsb	r3, [r0, r3]
 80059a2:	2b70      	cmp	r3, #112	; 0x70
 80059a4:	d01e      	beq.n	80059e4 <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059a6:	220f      	movs	r2, #15
 80059a8:	491a      	ldr	r1, [pc, #104]	; (8005a14 <unbridgeCommand+0xa8>)
 80059aa:	0020      	movs	r0, r4
 80059ac:	f00e ffc9 	bl	8014942 <memcpy>
 80059b0:	e015      	b.n	80059de <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059b2:	3001      	adds	r0, #1
 80059b4:	f00e fd3b 	bl	801442e <atol>
 80059b8:	0006      	movs	r6, r0
 80059ba:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059bc:	466a      	mov	r2, sp
 80059be:	2102      	movs	r1, #2
 80059c0:	0028      	movs	r0, r5
 80059c2:	f009 f9d5 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059c6:	2300      	movs	r3, #0
 80059c8:	56c3      	ldrsb	r3, [r0, r3]
 80059ca:	2b70      	cmp	r3, #112	; 0x70
 80059cc:	d00e      	beq.n	80059ec <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 80059ce:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 80059d0:	2867      	cmp	r0, #103	; 0x67
 80059d2:	d0e8      	beq.n	80059a6 <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80059d4:	2219      	movs	r2, #25
 80059d6:	4910      	ldr	r1, [pc, #64]	; (8005a18 <unbridgeCommand+0xac>)
 80059d8:	0020      	movs	r0, r4
 80059da:	f00e ffb2 	bl	8014942 <memcpy>
}
 80059de:	2000      	movs	r0, #0
 80059e0:	b003      	add	sp, #12
 80059e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80059e4:	3001      	adds	r0, #1
 80059e6:	f00e fd22 	bl	801442e <atol>
 80059ea:	e7dc      	b.n	80059a6 <unbridgeCommand+0x3a>
 80059ec:	3001      	adds	r0, #1
 80059ee:	f00e fd1e 	bl	801442e <atol>
 80059f2:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 80059f4:	b2c1      	uxtb	r1, r0
 80059f6:	0038      	movs	r0, r7
 80059f8:	f7fe fea8 	bl	800474c <Unbridge>
	if(result == BOS_OK)
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d1e7      	bne.n	80059d0 <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a00:	22ff      	movs	r2, #255	; 0xff
 8005a02:	002b      	movs	r3, r5
 8005a04:	4013      	ands	r3, r2
 8005a06:	4032      	ands	r2, r6
 8005a08:	4904      	ldr	r1, [pc, #16]	; (8005a1c <unbridgeCommand+0xb0>)
 8005a0a:	0020      	movs	r0, r4
 8005a0c:	f00f f9ce 	bl	8014dac <sprintf>
 8005a10:	e7e5      	b.n	80059de <unbridgeCommand+0x72>
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	0801ba54 	.word	0x0801ba54
 8005a18:	0801bb1c 	.word	0x0801bb1c
 8005a1c:	0801bafc 	.word	0x0801bafc

08005a20 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	b083      	sub	sp, #12
 8005a24:	0004      	movs	r4, r0
 8005a26:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d101      	bne.n	8005a36 <bridgeCommand+0x16>
 8005a32:	b672      	cpsid	i
 8005a34:	e7fe      	b.n	8005a34 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a36:	aa01      	add	r2, sp, #4
 8005a38:	2101      	movs	r1, #1
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	f009 f998 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005a40:	2300      	movs	r3, #0
 8005a42:	56c3      	ldrsb	r3, [r0, r3]
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d00e      	beq.n	8005a66 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a48:	466a      	mov	r2, sp
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	0028      	movs	r0, r5
 8005a4e:	f009 f98f 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a52:	2300      	movs	r3, #0
 8005a54:	56c3      	ldrsb	r3, [r0, r3]
 8005a56:	2b70      	cmp	r3, #112	; 0x70
 8005a58:	d01e      	beq.n	8005a98 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a5a:	220f      	movs	r2, #15
 8005a5c:	491a      	ldr	r1, [pc, #104]	; (8005ac8 <bridgeCommand+0xa8>)
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f00e ff6f 	bl	8014942 <memcpy>
 8005a64:	e015      	b.n	8005a92 <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a66:	3001      	adds	r0, #1
 8005a68:	f00e fce1 	bl	801442e <atol>
 8005a6c:	0006      	movs	r6, r0
 8005a6e:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a70:	466a      	mov	r2, sp
 8005a72:	2102      	movs	r1, #2
 8005a74:	0028      	movs	r0, r5
 8005a76:	f009 f97b 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	56c3      	ldrsb	r3, [r0, r3]
 8005a7e:	2b70      	cmp	r3, #112	; 0x70
 8005a80:	d00e      	beq.n	8005aa0 <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005a82:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005a84:	2867      	cmp	r0, #103	; 0x67
 8005a86:	d0e8      	beq.n	8005a5a <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a88:	2217      	movs	r2, #23
 8005a8a:	4910      	ldr	r1, [pc, #64]	; (8005acc <bridgeCommand+0xac>)
 8005a8c:	0020      	movs	r0, r4
 8005a8e:	f00e ff58 	bl	8014942 <memcpy>
}
 8005a92:	2000      	movs	r0, #0
 8005a94:	b003      	add	sp, #12
 8005a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a98:	3001      	adds	r0, #1
 8005a9a:	f00e fcc8 	bl	801442e <atol>
 8005a9e:	e7dc      	b.n	8005a5a <bridgeCommand+0x3a>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f00e fcc4 	bl	801442e <atol>
 8005aa6:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005aa8:	b2c1      	uxtb	r1, r0
 8005aaa:	0038      	movs	r0, r7
 8005aac:	f7fe fe3a 	bl	8004724 <Bridge>
	if(result == BOS_OK)
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1e7      	bne.n	8005a84 <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	002b      	movs	r3, r5
 8005ab8:	4013      	ands	r3, r2
 8005aba:	4032      	ands	r2, r6
 8005abc:	4904      	ldr	r1, [pc, #16]	; (8005ad0 <bridgeCommand+0xb0>)
 8005abe:	0020      	movs	r0, r4
 8005ac0:	f00f f974 	bl	8014dac <sprintf>
 8005ac4:	e7e5      	b.n	8005a92 <bridgeCommand+0x72>
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	0801ba54 	.word	0x0801ba54
 8005acc:	08019f78 	.word	0x08019f78
 8005ad0:	08019f54 	.word	0x08019f54

08005ad4 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	0005      	movs	r5, r0
 8005ada:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	d101      	bne.n	8005ae8 <delSnipCommand+0x14>
 8005ae4:	b672      	cpsid	i
 8005ae6:	e7fe      	b.n	8005ae6 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae8:	aa03      	add	r2, sp, #12
 8005aea:	2101      	movs	r1, #1
 8005aec:	f009 f940 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005af0:	f00e fc97 	bl	8014422 <atoi>
 8005af4:	9001      	str	r0, [sp, #4]
 8005af6:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	d003      	beq.n	8005b04 <delSnipCommand+0x30>
 8005afc:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <delSnipCommand+0xc8>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	42b3      	cmp	r3, r6
 8005b02:	d207      	bcs.n	8005b14 <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b04:	2223      	movs	r2, #35	; 0x23
 8005b06:	4926      	ldr	r1, [pc, #152]	; (8005ba0 <delSnipCommand+0xcc>)
 8005b08:	0028      	movs	r0, r5
 8005b0a:	f00e ff1a 	bl	8014942 <memcpy>
}
 8005b0e:	2000      	movs	r0, #0
 8005b10:	b005      	add	sp, #20
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005b14:	466b      	mov	r3, sp
 8005b16:	791a      	ldrb	r2, [r3, #4]
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	4822      	ldr	r0, [pc, #136]	; (8005ba4 <delSnipCommand+0xd0>)
 8005b1c:	2314      	movs	r3, #20
 8005b1e:	4353      	muls	r3, r2
 8005b20:	2700      	movs	r7, #0
 8005b22:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005b24:	18c4      	adds	r4, r0, r3
 8005b26:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b28:	3302      	adds	r3, #2
 8005b2a:	1818      	adds	r0, r3, r0
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	0039      	movs	r1, r7
 8005b30:	f00e ff10 	bl	8014954 <memset>
		snippets[index - 1].state = false;
 8005b34:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005b36:	68e0      	ldr	r0, [r4, #12]
 8005b38:	f00e fcc0 	bl	80144bc <free>
		snippets[index - 1].cmd = NULL;
 8005b3c:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <delSnipCommand+0xc8>)
 8005b40:	781f      	ldrb	r7, [r3, #0]
 8005b42:	42be      	cmp	r6, r7
 8005b44:	d213      	bcs.n	8005b6e <delSnipCommand+0x9a>
 8005b46:	466b      	mov	r3, sp
 8005b48:	7919      	ldrb	r1, [r3, #4]
 8005b4a:	2214      	movs	r2, #20
 8005b4c:	0014      	movs	r4, r2
 8005b4e:	434c      	muls	r4, r1
 8005b50:	4814      	ldr	r0, [pc, #80]	; (8005ba4 <delSnipCommand+0xd0>)
 8005b52:	1824      	adds	r4, r4, r0
 8005b54:	1e7b      	subs	r3, r7, #1
 8005b56:	1b9b      	subs	r3, r3, r6
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	185b      	adds	r3, r3, r1
 8005b5c:	4353      	muls	r3, r2
 8005b5e:	1880      	adds	r0, r0, r2
 8005b60:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005b62:	7823      	ldrb	r3, [r4, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10d      	bne.n	8005b84 <delSnipCommand+0xb0>
 8005b68:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b6a:	42b4      	cmp	r4, r6
 8005b6c:	d1f9      	bne.n	8005b62 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005b6e:	1e7b      	subs	r3, r7, #1
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <delSnipCommand+0xc8>)
 8005b72:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005b74:	f006 fe34 	bl	800c7e0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b78:	2236      	movs	r2, #54	; 0x36
 8005b7a:	490b      	ldr	r1, [pc, #44]	; (8005ba8 <delSnipCommand+0xd4>)
 8005b7c:	0028      	movs	r0, r5
 8005b7e:	f00e fee0 	bl	8014942 <memcpy>
 8005b82:	e7c4      	b.n	8005b0e <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b84:	2214      	movs	r2, #20
 8005b86:	0021      	movs	r1, r4
 8005b88:	0020      	movs	r0, r4
 8005b8a:	3814      	subs	r0, #20
 8005b8c:	f00e fed9 	bl	8014942 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b90:	2214      	movs	r2, #20
 8005b92:	2100      	movs	r1, #0
 8005b94:	0020      	movs	r0, r4
 8005b96:	f00e fedd 	bl	8014954 <memset>
 8005b9a:	e7e5      	b.n	8005b68 <delSnipCommand+0x94>
 8005b9c:	20001297 	.word	0x20001297
 8005ba0:	0801a098 	.word	0x0801a098
 8005ba4:	20006e70 	.word	0x20006e70
 8005ba8:	0801a060 	.word	0x0801a060

08005bac <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bac:	b510      	push	{r4, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	0004      	movs	r4, r0
 8005bb2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005bb8:	2c00      	cmp	r4, #0
 8005bba:	d101      	bne.n	8005bc0 <pauseSnipCommand+0x14>
 8005bbc:	b672      	cpsid	i
 8005bbe:	e7fe      	b.n	8005bbe <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bc0:	aa01      	add	r2, sp, #4
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	f009 f8d4 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005bc8:	f00e fc2b 	bl	8014422 <atoi>
 8005bcc:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <pauseSnipCommand+0x2e>
 8005bd2:	4a0e      	ldr	r2, [pc, #56]	; (8005c0c <pauseSnipCommand+0x60>)
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d207      	bcs.n	8005bea <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bda:	2223      	movs	r2, #35	; 0x23
 8005bdc:	490c      	ldr	r1, [pc, #48]	; (8005c10 <pauseSnipCommand+0x64>)
 8005bde:	0020      	movs	r0, r4
 8005be0:	f00e feaf 	bl	8014942 <memcpy>
}
 8005be4:	2000      	movs	r0, #0
 8005be6:	b002      	add	sp, #8
 8005be8:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005bea:	b2c0      	uxtb	r0, r0
 8005bec:	3801      	subs	r0, #1
 8005bee:	2314      	movs	r3, #20
 8005bf0:	4343      	muls	r3, r0
 8005bf2:	4808      	ldr	r0, [pc, #32]	; (8005c14 <pauseSnipCommand+0x68>)
 8005bf4:	18c0      	adds	r0, r0, r3
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005bfa:	f006 fdf1 	bl	800c7e0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005bfe:	2235      	movs	r2, #53	; 0x35
 8005c00:	4905      	ldr	r1, [pc, #20]	; (8005c18 <pauseSnipCommand+0x6c>)
 8005c02:	0020      	movs	r0, r4
 8005c04:	f00e fe9d 	bl	8014942 <memcpy>
 8005c08:	e7ec      	b.n	8005be4 <pauseSnipCommand+0x38>
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	20001297 	.word	0x20001297
 8005c10:	0801a098 	.word	0x0801a098
 8005c14:	20006e70 	.word	0x20006e70
 8005c18:	0801a4a8 	.word	0x0801a4a8

08005c1c <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	0004      	movs	r4, r0
 8005c22:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005c28:	2c00      	cmp	r4, #0
 8005c2a:	d101      	bne.n	8005c30 <actSnipCommand+0x14>
 8005c2c:	b672      	cpsid	i
 8005c2e:	e7fe      	b.n	8005c2e <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c30:	aa01      	add	r2, sp, #4
 8005c32:	2101      	movs	r1, #1
 8005c34:	f009 f89c 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c38:	f00e fbf3 	bl	8014422 <atoi>
 8005c3c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <actSnipCommand+0x2e>
 8005c42:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <actSnipCommand+0x60>)
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d207      	bcs.n	8005c5a <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c4a:	2223      	movs	r2, #35	; 0x23
 8005c4c:	490c      	ldr	r1, [pc, #48]	; (8005c80 <actSnipCommand+0x64>)
 8005c4e:	0020      	movs	r0, r4
 8005c50:	f00e fe77 	bl	8014942 <memcpy>
}
 8005c54:	2000      	movs	r0, #0
 8005c56:	b002      	add	sp, #8
 8005c58:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c5a:	b2c0      	uxtb	r0, r0
 8005c5c:	3801      	subs	r0, #1
 8005c5e:	2314      	movs	r3, #20
 8005c60:	4343      	muls	r3, r0
 8005c62:	4808      	ldr	r0, [pc, #32]	; (8005c84 <actSnipCommand+0x68>)
 8005c64:	18c0      	adds	r0, r0, r3
 8005c66:	2301      	movs	r3, #1
 8005c68:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c6a:	f006 fdb9 	bl	800c7e0 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c6e:	2238      	movs	r2, #56	; 0x38
 8005c70:	4905      	ldr	r1, [pc, #20]	; (8005c88 <actSnipCommand+0x6c>)
 8005c72:	0020      	movs	r0, r4
 8005c74:	f00e fe65 	bl	8014942 <memcpy>
 8005c78:	e7ec      	b.n	8005c54 <actSnipCommand+0x38>
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	20001297 	.word	0x20001297
 8005c80:	0801a098 	.word	0x0801a098
 8005c84:	20006e70 	.word	0x20006e70
 8005c88:	08019e5c 	.word	0x08019e5c

08005c8c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8e:	46d6      	mov	lr, sl
 8005c90:	464f      	mov	r7, r9
 8005c92:	4646      	mov	r6, r8
 8005c94:	b5c0      	push	{r6, r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005c9a:	aa06      	add	r2, sp, #24
 8005c9c:	4b7a      	ldr	r3, [pc, #488]	; (8005e88 <snipCommand+0x1fc>)
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005ca2:	c223      	stmia	r2!, {r0, r1, r5}
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	d101      	bne.n	8005cb0 <snipCommand+0x24>
 8005cac:	b672      	cpsid	i
 8005cae:	e7fe      	b.n	8005cae <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005cb0:	4b76      	ldr	r3, [pc, #472]	; (8005e8c <snipCommand+0x200>)
 8005cb2:	7818      	ldrb	r0, [r3, #0]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	425b      	negs	r3, r3
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	3333      	adds	r3, #51	; 0x33
 8005cbc:	2237      	movs	r2, #55	; 0x37
 8005cbe:	4974      	ldr	r1, [pc, #464]	; (8005e90 <snipCommand+0x204>)
 8005cc0:	f008 fe10 	bl	800e8e4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005cc4:	4b73      	ldr	r3, [pc, #460]	; (8005e94 <snipCommand+0x208>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d100      	bne.n	8005cce <snipCommand+0x42>
 8005ccc:	e0d0      	b.n	8005e70 <snipCommand+0x1e4>
 8005cce:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005cd0:	4b71      	ldr	r3, [pc, #452]	; (8005e98 <snipCommand+0x20c>)
 8005cd2:	4698      	mov	r8, r3
 8005cd4:	e0ba      	b.n	8005e4c <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005cd6:	4b70      	ldr	r3, [pc, #448]	; (8005e98 <snipCommand+0x20c>)
 8005cd8:	4699      	mov	r9, r3
 8005cda:	00ab      	lsls	r3, r5, #2
 8005cdc:	469a      	mov	sl, r3
 8005cde:	195b      	adds	r3, r3, r5
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	444b      	add	r3, r9
 8005ce4:	7c1a      	ldrb	r2, [r3, #16]
 8005ce6:	00d3      	lsls	r3, r2, #3
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	aa06      	add	r2, sp, #24
 8005cec:	4694      	mov	ip, r2
 8005cee:	4463      	add	r3, ip
 8005cf0:	003a      	movs	r2, r7
 8005cf2:	496a      	ldr	r1, [pc, #424]	; (8005e9c <snipCommand+0x210>)
 8005cf4:	0020      	movs	r0, r4
 8005cf6:	f00f f859 	bl	8014dac <sprintf>
		switch(snippets[s].cond.conditionType){
 8005cfa:	4653      	mov	r3, sl
 8005cfc:	195b      	adds	r3, r3, r5
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	464a      	mov	r2, r9
 8005d02:	5c9b      	ldrb	r3, [r3, r2]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d02d      	beq.n	8005d64 <snipCommand+0xd8>
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d000      	beq.n	8005d0e <snipCommand+0x82>
 8005d0c:	e0a9      	b.n	8005e62 <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005d0e:	00a9      	lsls	r1, r5, #2
 8005d10:	1949      	adds	r1, r1, r5
 8005d12:	0089      	lsls	r1, r1, #2
 8005d14:	3106      	adds	r1, #6
 8005d16:	4b60      	ldr	r3, [pc, #384]	; (8005e98 <snipCommand+0x20c>)
 8005d18:	4699      	mov	r9, r3
 8005d1a:	4449      	add	r1, r9
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	a805      	add	r0, sp, #20
 8005d20:	f00e fe0f 	bl	8014942 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005d24:	00ad      	lsls	r5, r5, #2
 8005d26:	19ad      	adds	r5, r5, r6
 8005d28:	00ad      	lsls	r5, r5, #2
 8005d2a:	444d      	add	r5, r9
 8005d2c:	78ea      	ldrb	r2, [r5, #3]
 8005d2e:	3a01      	subs	r2, #1
 8005d30:	0053      	lsls	r3, r2, #1
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a5a      	ldr	r2, [pc, #360]	; (8005ea0 <snipCommand+0x214>)
 8005d38:	18d3      	adds	r3, r2, r3
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4699      	mov	r9, r3
 8005d3e:	9805      	ldr	r0, [sp, #20]
 8005d40:	f7fc fef0 	bl	8002b24 <__aeabi_f2d>
 8005d44:	9002      	str	r0, [sp, #8]
 8005d46:	9103      	str	r1, [sp, #12]
 8005d48:	786b      	ldrb	r3, [r5, #1]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	005a      	lsls	r2, r3, #1
 8005d4e:	18d2      	adds	r2, r2, r3
 8005d50:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <snipCommand+0x218>)
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	464b      	mov	r3, r9
 8005d58:	0022      	movs	r2, r4
 8005d5a:	4953      	ldr	r1, [pc, #332]	; (8005ea8 <snipCommand+0x21c>)
 8005d5c:	0020      	movs	r0, r4
 8005d5e:	f00f f825 	bl	8014dac <sprintf>
				break;
 8005d62:	e07e      	b.n	8005e62 <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005d64:	00ab      	lsls	r3, r5, #2
 8005d66:	195b      	adds	r3, r3, r5
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4a4b      	ldr	r2, [pc, #300]	; (8005e98 <snipCommand+0x20c>)
 8005d6c:	18d3      	adds	r3, r2, r3
 8005d6e:	78db      	ldrb	r3, [r3, #3]
 8005d70:	3b05      	subs	r3, #5
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	2a09      	cmp	r2, #9
 8005d76:	d874      	bhi.n	8005e62 <snipCommand+0x1d6>
 8005d78:	0093      	lsls	r3, r2, #2
 8005d7a:	4a4c      	ldr	r2, [pc, #304]	; (8005eac <snipCommand+0x220>)
 8005d7c:	58d3      	ldr	r3, [r2, r3]
 8005d7e:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d80:	2314      	movs	r3, #20
 8005d82:	436b      	muls	r3, r5
 8005d84:	4a44      	ldr	r2, [pc, #272]	; (8005e98 <snipCommand+0x20c>)
 8005d86:	18d2      	adds	r2, r2, r3
 8005d88:	7893      	ldrb	r3, [r2, #2]
 8005d8a:	68d2      	ldr	r2, [r2, #12]
 8005d8c:	9200      	str	r2, [sp, #0]
 8005d8e:	0022      	movs	r2, r4
 8005d90:	4947      	ldr	r1, [pc, #284]	; (8005eb0 <snipCommand+0x224>)
 8005d92:	0020      	movs	r0, r4
 8005d94:	f00f f80a 	bl	8014dac <sprintf>
						break;
 8005d98:	e063      	b.n	8005e62 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d9a:	2314      	movs	r3, #20
 8005d9c:	436b      	muls	r3, r5
 8005d9e:	4a3e      	ldr	r2, [pc, #248]	; (8005e98 <snipCommand+0x20c>)
 8005da0:	18d2      	adds	r2, r2, r3
 8005da2:	7893      	ldrb	r3, [r2, #2]
 8005da4:	68d2      	ldr	r2, [r2, #12]
 8005da6:	9200      	str	r2, [sp, #0]
 8005da8:	0022      	movs	r2, r4
 8005daa:	4942      	ldr	r1, [pc, #264]	; (8005eb4 <snipCommand+0x228>)
 8005dac:	0020      	movs	r0, r4
 8005dae:	f00e fffd 	bl	8014dac <sprintf>
						break;
 8005db2:	e056      	b.n	8005e62 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005db4:	2314      	movs	r3, #20
 8005db6:	436b      	muls	r3, r5
 8005db8:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <snipCommand+0x20c>)
 8005dba:	18d2      	adds	r2, r2, r3
 8005dbc:	7893      	ldrb	r3, [r2, #2]
 8005dbe:	68d1      	ldr	r1, [r2, #12]
 8005dc0:	9101      	str	r1, [sp, #4]
 8005dc2:	7912      	ldrb	r2, [r2, #4]
 8005dc4:	9200      	str	r2, [sp, #0]
 8005dc6:	0022      	movs	r2, r4
 8005dc8:	493b      	ldr	r1, [pc, #236]	; (8005eb8 <snipCommand+0x22c>)
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f00e ffee 	bl	8014dac <sprintf>
						break;
 8005dd0:	e047      	b.n	8005e62 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005dd2:	2314      	movs	r3, #20
 8005dd4:	436b      	muls	r3, r5
 8005dd6:	4a30      	ldr	r2, [pc, #192]	; (8005e98 <snipCommand+0x20c>)
 8005dd8:	18d2      	adds	r2, r2, r3
 8005dda:	7893      	ldrb	r3, [r2, #2]
 8005ddc:	68d1      	ldr	r1, [r2, #12]
 8005dde:	9101      	str	r1, [sp, #4]
 8005de0:	7912      	ldrb	r2, [r2, #4]
 8005de2:	9200      	str	r2, [sp, #0]
 8005de4:	0022      	movs	r2, r4
 8005de6:	4935      	ldr	r1, [pc, #212]	; (8005ebc <snipCommand+0x230>)
 8005de8:	0020      	movs	r0, r4
 8005dea:	f00e ffdf 	bl	8014dac <sprintf>
						break;
 8005dee:	e038      	b.n	8005e62 <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005df0:	4b33      	ldr	r3, [pc, #204]	; (8005ec0 <snipCommand+0x234>)
 8005df2:	0022      	movs	r2, r4
 8005df4:	4933      	ldr	r1, [pc, #204]	; (8005ec4 <snipCommand+0x238>)
 8005df6:	0020      	movs	r0, r4
 8005df8:	f00e ffd8 	bl	8014dac <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005dfc:	4830      	ldr	r0, [pc, #192]	; (8005ec0 <snipCommand+0x234>)
 8005dfe:	f7fa f98b 	bl	8000118 <strlen>
 8005e02:	0002      	movs	r2, r0
 8005e04:	2100      	movs	r1, #0
 8005e06:	482e      	ldr	r0, [pc, #184]	; (8005ec0 <snipCommand+0x234>)
 8005e08:	f00e fda4 	bl	8014954 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e0c:	0029      	movs	r1, r5
 8005e0e:	68f0      	ldr	r0, [r6, #12]
 8005e10:	f7ff fa90 	bl	8005334 <ParseSnippetCommand>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1eb      	bne.n	8005df0 <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f7fa f97d 	bl	8000118 <strlen>
 8005e1e:	1820      	adds	r0, r4, r0
 8005e20:	220c      	movs	r2, #12
 8005e22:	4929      	ldr	r1, [pc, #164]	; (8005ec8 <snipCommand+0x23c>)
 8005e24:	f00e fd8d 	bl	8014942 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005e28:	0020      	movs	r0, r4
 8005e2a:	f7fa f975 	bl	8000118 <strlen>
 8005e2e:	b282      	uxth	r2, r0
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <snipCommand+0x200>)
 8005e32:	7818      	ldrb	r0, [r3, #0]
 8005e34:	2301      	movs	r3, #1
 8005e36:	425b      	negs	r3, r3
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	3333      	adds	r3, #51	; 0x33
 8005e3c:	0021      	movs	r1, r4
 8005e3e:	f008 fd51 	bl	800e8e4 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e42:	003d      	movs	r5, r7
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <snipCommand+0x208>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	42bb      	cmp	r3, r7
 8005e4a:	d911      	bls.n	8005e70 <snipCommand+0x1e4>
 8005e4c:	1c6f      	adds	r7, r5, #1
 8005e4e:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005e50:	002e      	movs	r6, r5
 8005e52:	00ab      	lsls	r3, r5, #2
 8005e54:	195b      	adds	r3, r3, r5
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4642      	mov	r2, r8
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d000      	beq.n	8005e62 <snipCommand+0x1d6>
 8005e60:	e739      	b.n	8005cd6 <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e62:	4d17      	ldr	r5, [pc, #92]	; (8005ec0 <snipCommand+0x234>)
 8005e64:	00b3      	lsls	r3, r6, #2
 8005e66:	199b      	adds	r3, r3, r6
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4e0b      	ldr	r6, [pc, #44]	; (8005e98 <snipCommand+0x20c>)
 8005e6c:	18f6      	adds	r6, r6, r3
 8005e6e:	e7cd      	b.n	8005e0c <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005e70:	22b5      	movs	r2, #181	; 0xb5
 8005e72:	4916      	ldr	r1, [pc, #88]	; (8005ecc <snipCommand+0x240>)
 8005e74:	0020      	movs	r0, r4
 8005e76:	f00e fd64 	bl	8014942 <memcpy>
}
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	b00a      	add	sp, #40	; 0x28
 8005e7e:	bc1c      	pop	{r2, r3, r4}
 8005e80:	4690      	mov	r8, r2
 8005e82:	4699      	mov	r9, r3
 8005e84:	46a2      	mov	sl, r4
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e88:	080191a8 	.word	0x080191a8
 8005e8c:	20000ae8 	.word	0x20000ae8
 8005e90:	0801a93c 	.word	0x0801a93c
 8005e94:	20001297 	.word	0x20001297
 8005e98:	20006e70 	.word	0x20006e70
 8005e9c:	0801a974 	.word	0x0801a974
 8005ea0:	200000ac 	.word	0x200000ac
 8005ea4:	0801a46c 	.word	0x0801a46c
 8005ea8:	0801a9e0 	.word	0x0801a9e0
 8005eac:	08019d18 	.word	0x08019d18
 8005eb0:	0801a980 	.word	0x0801a980
 8005eb4:	0801a994 	.word	0x0801a994
 8005eb8:	0801a9ac 	.word	0x0801a9ac
 8005ebc:	0801a9c4 	.word	0x0801a9c4
 8005ec0:	200012c8 	.word	0x200012c8
 8005ec4:	0801a9f0 	.word	0x0801a9f0
 8005ec8:	0801a9f8 	.word	0x0801a9f8
 8005ecc:	0801aa04 	.word	0x0801aa04

08005ed0 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005ed4:	d101      	bne.n	8005eda <idcodeCommand+0xa>
 8005ed6:	b672      	cpsid	i
 8005ed8:	e7fe      	b.n	8005ed8 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8005eda:	f00a fe6f 	bl	8010bbc <HAL_GetDEVID>
	switch(dev){
 8005ede:	0403      	lsls	r3, r0, #16
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <idcodeCommand+0x80>)
 8005ee4:	4694      	mov	ip, r2
 8005ee6:	4463      	add	r3, ip
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d82a      	bhi.n	8005f42 <idcodeCommand+0x72>
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <idcodeCommand+0x84>)
 8005ef0:	58d3      	ldr	r3, [r2, r3]
 8005ef2:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005ef4:	4a18      	ldr	r2, [pc, #96]	; (8005f58 <idcodeCommand+0x88>)
 8005ef6:	4919      	ldr	r1, [pc, #100]	; (8005f5c <idcodeCommand+0x8c>)
 8005ef8:	0020      	movs	r0, r4
 8005efa:	f00e ff57 	bl	8014dac <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005efe:	f00a fe57 	bl	8010bb0 <HAL_GetREVID>
 8005f02:	0b03      	lsrs	r3, r0, #12
 8005f04:	0022      	movs	r2, r4
 8005f06:	4916      	ldr	r1, [pc, #88]	; (8005f60 <idcodeCommand+0x90>)
 8005f08:	0020      	movs	r0, r4
 8005f0a:	f00e ff4f 	bl	8014dac <sprintf>
}
 8005f0e:	2000      	movs	r0, #0
 8005f10:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005f12:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <idcodeCommand+0x94>)
 8005f14:	4911      	ldr	r1, [pc, #68]	; (8005f5c <idcodeCommand+0x8c>)
 8005f16:	0020      	movs	r0, r4
 8005f18:	f00e ff48 	bl	8014dac <sprintf>
			break;
 8005f1c:	e7ef      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005f1e:	4a12      	ldr	r2, [pc, #72]	; (8005f68 <idcodeCommand+0x98>)
 8005f20:	490e      	ldr	r1, [pc, #56]	; (8005f5c <idcodeCommand+0x8c>)
 8005f22:	0020      	movs	r0, r4
 8005f24:	f00e ff42 	bl	8014dac <sprintf>
			break;
 8005f28:	e7e9      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005f2a:	4a10      	ldr	r2, [pc, #64]	; (8005f6c <idcodeCommand+0x9c>)
 8005f2c:	490b      	ldr	r1, [pc, #44]	; (8005f5c <idcodeCommand+0x8c>)
 8005f2e:	0020      	movs	r0, r4
 8005f30:	f00e ff3c 	bl	8014dac <sprintf>
			break;
 8005f34:	e7e3      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005f36:	4a0e      	ldr	r2, [pc, #56]	; (8005f70 <idcodeCommand+0xa0>)
 8005f38:	4908      	ldr	r1, [pc, #32]	; (8005f5c <idcodeCommand+0x8c>)
 8005f3a:	0020      	movs	r0, r4
 8005f3c:	f00e ff36 	bl	8014dac <sprintf>
			break;
 8005f40:	e7dd      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005f42:	4a0c      	ldr	r2, [pc, #48]	; (8005f74 <idcodeCommand+0xa4>)
 8005f44:	4905      	ldr	r1, [pc, #20]	; (8005f5c <idcodeCommand+0x8c>)
 8005f46:	0020      	movs	r0, r4
 8005f48:	f00e ff30 	bl	8014dac <sprintf>
			break;
 8005f4c:	e7d7      	b.n	8005efe <idcodeCommand+0x2e>
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	fffffbc0 	.word	0xfffffbc0
 8005f54:	08019d40 	.word	0x08019d40
 8005f58:	0801a368 	.word	0x0801a368
 8005f5c:	0801a374 	.word	0x0801a374
 8005f60:	0801a3c0 	.word	0x0801a3c0
 8005f64:	0801a388 	.word	0x0801a388
 8005f68:	0801a394 	.word	0x0801a394
 8005f6c:	0801a3a0 	.word	0x0801a3a0
 8005f70:	0801a3ac 	.word	0x0801a3ac
 8005f74:	0801a3b8 	.word	0x0801a3b8

08005f78 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f7c:	d101      	bne.n	8005f82 <uuidCommand+0xa>
 8005f7e:	b672      	cpsid	i
 8005f80:	e7fe      	b.n	8005f80 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f82:	220e      	movs	r2, #14
 8005f84:	4911      	ldr	r1, [pc, #68]	; (8005fcc <uuidCommand+0x54>)
 8005f86:	f00e fcdc 	bl	8014942 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f8a:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <uuidCommand+0x58>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4d11      	ldr	r5, [pc, #68]	; (8005fd4 <uuidCommand+0x5c>)
 8005f90:	0022      	movs	r2, r4
 8005f92:	0029      	movs	r1, r5
 8005f94:	0020      	movs	r0, r4
 8005f96:	f00e ff09 	bl	8014dac <sprintf>
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <uuidCommand+0x60>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	0029      	movs	r1, r5
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	f00e ff02 	bl	8014dac <sprintf>
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <uuidCommand+0x64>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0022      	movs	r2, r4
 8005fae:	0029      	movs	r1, r5
 8005fb0:	0020      	movs	r0, r4
 8005fb2:	f00e fefb 	bl	8014dac <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005fb6:	0020      	movs	r0, r4
 8005fb8:	f7fa f8ae 	bl	8000118 <strlen>
 8005fbc:	1820      	adds	r0, r4, r0
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	4907      	ldr	r1, [pc, #28]	; (8005fe0 <uuidCommand+0x68>)
 8005fc2:	f00e fcbe 	bl	8014942 <memcpy>
}
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	0801bb48 	.word	0x0801bb48
 8005fd0:	1ffff7ac 	.word	0x1ffff7ac
 8005fd4:	0801bb58 	.word	0x0801bb58
 8005fd8:	1ffff7b0 	.word	0x1ffff7b0
 8005fdc:	1ffff7b4 	.word	0x1ffff7b4
 8005fe0:	0801b340 	.word	0x0801b340

08005fe4 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005fea:	d101      	bne.n	8005ff0 <timeCommand+0xc>
 8005fec:	b672      	cpsid	i
 8005fee:	e7fe      	b.n	8005fee <timeCommand+0xa>
	GetTimeDate();
 8005ff0:	f008 f9d4 	bl	800e39c <GetTimeDate>
	if(BOS.hourformat == 24)
 8005ff4:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <timeCommand+0x80>)
 8005ff6:	7b5b      	ldrb	r3, [r3, #13]
 8005ff8:	2b18      	cmp	r3, #24
 8005ffa:	d004      	beq.n	8006006 <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d00e      	beq.n	800601e <timeCommand+0x3a>
}
 8006000:	2000      	movs	r0, #0
 8006002:	b004      	add	sp, #16
 8006004:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8006006:	4917      	ldr	r1, [pc, #92]	; (8006064 <timeCommand+0x80>)
 8006008:	7c4b      	ldrb	r3, [r1, #17]
 800600a:	7c8a      	ldrb	r2, [r1, #18]
 800600c:	89c8      	ldrh	r0, [r1, #14]
 800600e:	9001      	str	r0, [sp, #4]
 8006010:	7c09      	ldrb	r1, [r1, #16]
 8006012:	9100      	str	r1, [sp, #0]
 8006014:	4914      	ldr	r1, [pc, #80]	; (8006068 <timeCommand+0x84>)
 8006016:	0020      	movs	r0, r4
 8006018:	f00e fec8 	bl	8014dac <sprintf>
 800601c:	e7f0      	b.n	8006000 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <timeCommand+0x80>)
 8006020:	7cdb      	ldrb	r3, [r3, #19]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10d      	bne.n	8006042 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8006026:	490f      	ldr	r1, [pc, #60]	; (8006064 <timeCommand+0x80>)
 8006028:	7c4b      	ldrb	r3, [r1, #17]
 800602a:	7c8a      	ldrb	r2, [r1, #18]
 800602c:	480f      	ldr	r0, [pc, #60]	; (800606c <timeCommand+0x88>)
 800602e:	9002      	str	r0, [sp, #8]
 8006030:	89c8      	ldrh	r0, [r1, #14]
 8006032:	9001      	str	r0, [sp, #4]
 8006034:	7c09      	ldrb	r1, [r1, #16]
 8006036:	9100      	str	r1, [sp, #0]
 8006038:	490d      	ldr	r1, [pc, #52]	; (8006070 <timeCommand+0x8c>)
 800603a:	0020      	movs	r0, r4
 800603c:	f00e feb6 	bl	8014dac <sprintf>
 8006040:	e7de      	b.n	8006000 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 8006042:	2b02      	cmp	r3, #2
 8006044:	d1dc      	bne.n	8006000 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8006046:	4907      	ldr	r1, [pc, #28]	; (8006064 <timeCommand+0x80>)
 8006048:	7c4b      	ldrb	r3, [r1, #17]
 800604a:	7c8a      	ldrb	r2, [r1, #18]
 800604c:	4809      	ldr	r0, [pc, #36]	; (8006074 <timeCommand+0x90>)
 800604e:	9002      	str	r0, [sp, #8]
 8006050:	89c8      	ldrh	r0, [r1, #14]
 8006052:	9001      	str	r0, [sp, #4]
 8006054:	7c09      	ldrb	r1, [r1, #16]
 8006056:	9100      	str	r1, [sp, #0]
 8006058:	4905      	ldr	r1, [pc, #20]	; (8006070 <timeCommand+0x8c>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00e fea6 	bl	8014dac <sprintf>
 8006060:	e7ce      	b.n	8006000 <timeCommand+0x1c>
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	20006e54 	.word	0x20006e54
 8006068:	0801ba90 	.word	0x0801ba90
 800606c:	0801bae4 	.word	0x0801bae4
 8006070:	0801bab8 	.word	0x0801bab8
 8006074:	0801bae8 	.word	0x0801bae8

08006078 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006078:	b510      	push	{r4, lr}
 800607a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800607c:	d101      	bne.n	8006082 <dateCommand+0xa>
 800607e:	b672      	cpsid	i
 8006080:	e7fe      	b.n	8006080 <dateCommand+0x8>
	GetTimeDate();
 8006082:	f008 f98b 	bl	800e39c <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006086:	f7fe fb2b 	bl	80046e0 <GetDateString>
 800608a:	0002      	movs	r2, r0
 800608c:	4902      	ldr	r1, [pc, #8]	; (8006098 <dateCommand+0x20>)
 800608e:	0020      	movs	r0, r4
 8006090:	f00e fe8c 	bl	8014dac <sprintf>
}
 8006094:	2000      	movs	r0, #0
 8006096:	bd10      	pop	{r4, pc}
 8006098:	08019fa0 	.word	0x08019fa0

0800609c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609e:	46c6      	mov	lr, r8
 80060a0:	b500      	push	{lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	0004      	movs	r4, r0
 80060a6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d101      	bne.n	80060b6 <getCommand+0x1a>
 80060b2:	b672      	cpsid	i
 80060b4:	e7fe      	b.n	80060b4 <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060b6:	aa01      	add	r2, sp, #4
 80060b8:	2101      	movs	r1, #1
 80060ba:	0030      	movs	r0, r6
 80060bc:	f008 fe58 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80060c0:	0005      	movs	r5, r0
 80060c2:	4b74      	ldr	r3, [pc, #464]	; (8006294 <getCommand+0x1f8>)
 80060c4:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060c6:	2204      	movs	r2, #4
 80060c8:	4973      	ldr	r1, [pc, #460]	; (8006298 <getCommand+0x1fc>)
 80060ca:	f00e feb3 	bl	8014e34 <strncmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d000      	beq.n	80060d4 <getCommand+0x38>
 80060d2:	e090      	b.n	80061f6 <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80060d4:	1d2f      	adds	r7, r5, #4
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	1f1e      	subs	r6, r3, #4
 80060da:	0032      	movs	r2, r6
 80060dc:	496f      	ldr	r1, [pc, #444]	; (800629c <getCommand+0x200>)
 80060de:	0038      	movs	r0, r7
 80060e0:	f00e fea8 	bl	8014e34 <strncmp>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d11e      	bne.n	8006126 <getCommand+0x8a>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 80060e8:	4b6d      	ldr	r3, [pc, #436]	; (80062a0 <getCommand+0x204>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b60      	cmp	r3, #96	; 0x60
 80060ee:	d109      	bne.n	8006104 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060f0:	4a6c      	ldr	r2, [pc, #432]	; (80062a4 <getCommand+0x208>)
 80060f2:	496d      	ldr	r1, [pc, #436]	; (80062a8 <getCommand+0x20c>)
 80060f4:	0020      	movs	r0, r4
 80060f6:	f00e fe59 	bl	8014dac <sprintf>
}
 80060fa:	2000      	movs	r0, #0
 80060fc:	b002      	add	sp, #8
 80060fe:	bc04      	pop	{r2}
 8006100:	4690      	mov	r8, r2
 8006102:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006104:	2b20      	cmp	r3, #32
 8006106:	d105      	bne.n	8006114 <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006108:	4a68      	ldr	r2, [pc, #416]	; (80062ac <getCommand+0x210>)
 800610a:	4967      	ldr	r1, [pc, #412]	; (80062a8 <getCommand+0x20c>)
 800610c:	0020      	movs	r0, r4
 800610e:	f00e fe4d 	bl	8014dac <sprintf>
 8006112:	e7f2      	b.n	80060fa <getCommand+0x5e>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006114:	2b00      	cmp	r3, #0
 8006116:	d000      	beq.n	800611a <getCommand+0x7e>
 8006118:	e0b6      	b.n	8006288 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800611a:	4a65      	ldr	r2, [pc, #404]	; (80062b0 <getCommand+0x214>)
 800611c:	4962      	ldr	r1, [pc, #392]	; (80062a8 <getCommand+0x20c>)
 800611e:	0020      	movs	r0, r4
 8006120:	f00e fe44 	bl	8014dac <sprintf>
 8006124:	e7e9      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006126:	0032      	movs	r2, r6
 8006128:	4962      	ldr	r1, [pc, #392]	; (80062b4 <getCommand+0x218>)
 800612a:	0038      	movs	r0, r7
 800612c:	f00e fe82 	bl	8014e34 <strncmp>
 8006130:	2800      	cmp	r0, #0
 8006132:	d11a      	bne.n	800616a <getCommand+0xce>
			if(BOSMessaging.trace == TRACE_BOTH)
 8006134:	4b5a      	ldr	r3, [pc, #360]	; (80062a0 <getCommand+0x204>)
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d105      	bne.n	8006148 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800613c:	4a59      	ldr	r2, [pc, #356]	; (80062a4 <getCommand+0x208>)
 800613e:	495a      	ldr	r1, [pc, #360]	; (80062a8 <getCommand+0x20c>)
 8006140:	0020      	movs	r0, r4
 8006142:	f00e fe33 	bl	8014dac <sprintf>
 8006146:	e7d8      	b.n	80060fa <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006148:	2b01      	cmp	r3, #1
 800614a:	d105      	bne.n	8006158 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800614c:	4a57      	ldr	r2, [pc, #348]	; (80062ac <getCommand+0x210>)
 800614e:	4956      	ldr	r1, [pc, #344]	; (80062a8 <getCommand+0x20c>)
 8006150:	0020      	movs	r0, r4
 8006152:	f00e fe2b 	bl	8014dac <sprintf>
 8006156:	e7d0      	b.n	80060fa <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_NONE)
 8006158:	2b00      	cmp	r3, #0
 800615a:	d000      	beq.n	800615e <getCommand+0xc2>
 800615c:	e094      	b.n	8006288 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800615e:	4a54      	ldr	r2, [pc, #336]	; (80062b0 <getCommand+0x214>)
 8006160:	4951      	ldr	r1, [pc, #324]	; (80062a8 <getCommand+0x20c>)
 8006162:	0020      	movs	r0, r4
 8006164:	f00e fe22 	bl	8014dac <sprintf>
 8006168:	e7c7      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800616a:	0032      	movs	r2, r6
 800616c:	4952      	ldr	r1, [pc, #328]	; (80062b8 <getCommand+0x21c>)
 800616e:	0038      	movs	r0, r7
 8006170:	f00e fe60 	bl	8014e34 <strncmp>
 8006174:	2800      	cmp	r0, #0
 8006176:	d106      	bne.n	8006186 <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006178:	4b50      	ldr	r3, [pc, #320]	; (80062bc <getCommand+0x220>)
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	4950      	ldr	r1, [pc, #320]	; (80062c0 <getCommand+0x224>)
 800617e:	0020      	movs	r0, r4
 8006180:	f00e fe14 	bl	8014dac <sprintf>
 8006184:	e7b9      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006186:	0032      	movs	r2, r6
 8006188:	494e      	ldr	r1, [pc, #312]	; (80062c4 <getCommand+0x228>)
 800618a:	0038      	movs	r0, r7
 800618c:	f00e fe52 	bl	8014e34 <strncmp>
 8006190:	2800      	cmp	r0, #0
 8006192:	d106      	bne.n	80061a2 <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006194:	4b49      	ldr	r3, [pc, #292]	; (80062bc <getCommand+0x220>)
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	4949      	ldr	r1, [pc, #292]	; (80062c0 <getCommand+0x224>)
 800619a:	0020      	movs	r0, r4
 800619c:	f00e fe06 	bl	8014dac <sprintf>
 80061a0:	e7ab      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80061a2:	0032      	movs	r2, r6
 80061a4:	4948      	ldr	r1, [pc, #288]	; (80062c8 <getCommand+0x22c>)
 80061a6:	0038      	movs	r0, r7
 80061a8:	f00e fe44 	bl	8014e34 <strncmp>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d106      	bne.n	80061be <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 80061b0:	4b42      	ldr	r3, [pc, #264]	; (80062bc <getCommand+0x220>)
 80061b2:	885a      	ldrh	r2, [r3, #2]
 80061b4:	4942      	ldr	r1, [pc, #264]	; (80062c0 <getCommand+0x224>)
 80061b6:	0020      	movs	r0, r4
 80061b8:	f00e fdf8 	bl	8014dac <sprintf>
 80061bc:	e79d      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80061be:	0032      	movs	r2, r6
 80061c0:	4942      	ldr	r1, [pc, #264]	; (80062cc <getCommand+0x230>)
 80061c2:	0038      	movs	r0, r7
 80061c4:	f00e fe36 	bl	8014e34 <strncmp>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d106      	bne.n	80061da <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80061cc:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <getCommand+0x220>)
 80061ce:	791a      	ldrb	r2, [r3, #4]
 80061d0:	493b      	ldr	r1, [pc, #236]	; (80062c0 <getCommand+0x224>)
 80061d2:	0020      	movs	r0, r4
 80061d4:	f00e fdea 	bl	8014dac <sprintf>
 80061d8:	e78f      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80061da:	0032      	movs	r2, r6
 80061dc:	493c      	ldr	r1, [pc, #240]	; (80062d0 <getCommand+0x234>)
 80061de:	0038      	movs	r0, r7
 80061e0:	f00e fe28 	bl	8014e34 <strncmp>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d10d      	bne.n	8006204 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80061e8:	4b34      	ldr	r3, [pc, #208]	; (80062bc <getCommand+0x220>)
 80061ea:	795a      	ldrb	r2, [r3, #5]
 80061ec:	4934      	ldr	r1, [pc, #208]	; (80062c0 <getCommand+0x224>)
 80061ee:	0020      	movs	r0, r4
 80061f0:	f00e fddc 	bl	8014dac <sprintf>
 80061f4:	e781      	b.n	80060fa <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80061f6:	2205      	movs	r2, #5
 80061f8:	4936      	ldr	r1, [pc, #216]	; (80062d4 <getCommand+0x238>)
 80061fa:	0028      	movs	r0, r5
 80061fc:	f00e fe1a 	bl	8014e34 <strncmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	d005      	beq.n	8006210 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006204:	2213      	movs	r2, #19
 8006206:	4934      	ldr	r1, [pc, #208]	; (80062d8 <getCommand+0x23c>)
 8006208:	0020      	movs	r0, r4
 800620a:	f00e fb9a 	bl	8014942 <memcpy>
 800620e:	e774      	b.n	80060fa <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006210:	466a      	mov	r2, sp
 8006212:	2102      	movs	r1, #2
 8006214:	0030      	movs	r0, r6
 8006216:	f008 fdab 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800621a:	0005      	movs	r5, r0
 800621c:	4f2f      	ldr	r7, [pc, #188]	; (80062dc <getCommand+0x240>)
		for(i =0; i < MaxNumOfGroups; i++){
 800621e:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8006220:	0039      	movs	r1, r7
 8006222:	0028      	movs	r0, r5
 8006224:	f7f9 ff6e 	bl	8000104 <strcmp>
 8006228:	2800      	cmp	r0, #0
 800622a:	d011      	beq.n	8006250 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 800622c:	3601      	adds	r6, #1
 800622e:	b2f6      	uxtb	r6, r6
 8006230:	370a      	adds	r7, #10
 8006232:	2e0a      	cmp	r6, #10
 8006234:	d1f4      	bne.n	8006220 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006236:	002a      	movs	r2, r5
 8006238:	4929      	ldr	r1, [pc, #164]	; (80062e0 <getCommand+0x244>)
 800623a:	0020      	movs	r0, r4
 800623c:	f00e fdb6 	bl	8014dac <sprintf>
			return pdFALSE;
 8006240:	e75b      	b.n	80060fa <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006242:	002b      	movs	r3, r5
 8006244:	0022      	movs	r2, r4
 8006246:	4927      	ldr	r1, [pc, #156]	; (80062e4 <getCommand+0x248>)
 8006248:	0020      	movs	r0, r4
 800624a:	f00e fdaf 	bl	8014dac <sprintf>
 800624e:	e015      	b.n	800627c <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006250:	002a      	movs	r2, r5
 8006252:	4925      	ldr	r1, [pc, #148]	; (80062e8 <getCommand+0x24c>)
 8006254:	0020      	movs	r0, r4
 8006256:	f00e fda9 	bl	8014dac <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800625a:	4b24      	ldr	r3, [pc, #144]	; (80062ec <getCommand+0x250>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d100      	bne.n	8006264 <getCommand+0x1c8>
 8006262:	e74a      	b.n	80060fa <getCommand+0x5e>
 8006264:	2501      	movs	r5, #1
 8006266:	002b      	movs	r3, r5
 8006268:	40b3      	lsls	r3, r6
 800626a:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 800626c:	4f20      	ldr	r7, [pc, #128]	; (80062f0 <getCommand+0x254>)
			for(j =1; j <= N; j++)						// N modules
 800626e:	4e1f      	ldr	r6, [pc, #124]	; (80062ec <getCommand+0x250>)
				if(InGroup(j,i)){
 8006270:	1e6b      	subs	r3, r5, #1
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	5bdb      	ldrh	r3, [r3, r7]
 8006276:	4642      	mov	r2, r8
 8006278:	421a      	tst	r2, r3
 800627a:	d1e2      	bne.n	8006242 <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 800627c:	3501      	adds	r5, #1
 800627e:	b2ed      	uxtb	r5, r5
 8006280:	7833      	ldrb	r3, [r6, #0]
 8006282:	42ab      	cmp	r3, r5
 8006284:	d2f4      	bcs.n	8006270 <getCommand+0x1d4>
 8006286:	e738      	b.n	80060fa <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006288:	002a      	movs	r2, r5
 800628a:	491a      	ldr	r1, [pc, #104]	; (80062f4 <getCommand+0x258>)
 800628c:	0020      	movs	r0, r4
 800628e:	f00e fd8d 	bl	8014dac <sprintf>
 8006292:	e732      	b.n	80060fa <getCommand+0x5e>
 8006294:	2000130c 	.word	0x2000130c
 8006298:	0801a10c 	.word	0x0801a10c
 800629c:	0801a114 	.word	0x0801a114
 80062a0:	20006dd4 	.word	0x20006dd4
 80062a4:	08019504 	.word	0x08019504
 80062a8:	0801935c 	.word	0x0801935c
 80062ac:	0801a120 	.word	0x0801a120
 80062b0:	0801a124 	.word	0x0801a124
 80062b4:	0801a12c 	.word	0x0801a12c
 80062b8:	0801a134 	.word	0x0801a134
 80062bc:	20006e54 	.word	0x20006e54
 80062c0:	080199c4 	.word	0x080199c4
 80062c4:	0801a140 	.word	0x0801a140
 80062c8:	0801a14c 	.word	0x0801a14c
 80062cc:	0801a15c 	.word	0x0801a15c
 80062d0:	0801a170 	.word	0x0801a170
 80062d4:	0801a184 	.word	0x0801a184
 80062d8:	0801a194 	.word	0x0801a194
 80062dc:	20000ed0 	.word	0x20000ed0
 80062e0:	0801a1a8 	.word	0x0801a1a8
 80062e4:	0801a18c 	.word	0x0801a18c
 80062e8:	0801a1c4 	.word	0x0801a1c4
 80062ec:	20000044 	.word	0x20000044
 80062f0:	20000f34 	.word	0x20000f34
 80062f4:	0801a1d8 	.word	0x0801a1d8

080062f8 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	0004      	movs	r4, r0
 80062fe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006300:	2300      	movs	r3, #0
 8006302:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006304:	2c00      	cmp	r4, #0
 8006306:	d101      	bne.n	800630c <defaultCommand+0x14>
 8006308:	b672      	cpsid	i
 800630a:	e7fe      	b.n	800630a <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800630c:	aa01      	add	r2, sp, #4
 800630e:	2101      	movs	r1, #1
 8006310:	f008 fd2e 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006314:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006316:	9e01      	ldr	r6, [sp, #4]
 8006318:	0032      	movs	r2, r6
 800631a:	491e      	ldr	r1, [pc, #120]	; (8006394 <defaultCommand+0x9c>)
 800631c:	f00e fd8a 	bl	8014e34 <strncmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	d01e      	beq.n	8006362 <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006324:	0032      	movs	r2, r6
 8006326:	491c      	ldr	r1, [pc, #112]	; (8006398 <defaultCommand+0xa0>)
 8006328:	0028      	movs	r0, r5
 800632a:	f00e fd83 	bl	8014e34 <strncmp>
 800632e:	2800      	cmp	r0, #0
 8006330:	d12a      	bne.n	8006388 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006332:	2200      	movs	r2, #0
 8006334:	2116      	movs	r1, #22
 8006336:	20ff      	movs	r0, #255	; 0xff
 8006338:	f003 fc30 	bl	8009b9c <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800633c:	4b17      	ldr	r3, [pc, #92]	; (800639c <defaultCommand+0xa4>)
 800633e:	2202      	movs	r2, #2
 8006340:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006342:	2064      	movs	r0, #100	; 0x64
 8006344:	f008 fbfb 	bl	800eb3e <osDelay>
		ClearEEportsDir();
 8006348:	f7fd f968 	bl	800361c <ClearEEportsDir>
		ClearROtopology();
 800634c:	f006 fb50 	bl	800c9f0 <ClearROtopology>
		osDelay(100);
 8006350:	2064      	movs	r0, #100	; 0x64
 8006352:	f008 fbf4 	bl	800eb3e <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	4911      	ldr	r1, [pc, #68]	; (80063a0 <defaultCommand+0xa8>)
 800635a:	0020      	movs	r0, r4
 800635c:	f00e faf1 	bl	8014942 <memcpy>
 8006360:	e00f      	b.n	8006382 <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006362:	4910      	ldr	r1, [pc, #64]	; (80063a4 <defaultCommand+0xac>)
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <defaultCommand+0xb0>)
 8006366:	000a      	movs	r2, r1
 8006368:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636a:	c223      	stmia	r2!, {r0, r1, r5}
 800636c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636e:	c223      	stmia	r2!, {r0, r1, r5}
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006374:	f7fd f90e 	bl	8003594 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006378:	2227      	movs	r2, #39	; 0x27
 800637a:	490c      	ldr	r1, [pc, #48]	; (80063ac <defaultCommand+0xb4>)
 800637c:	0020      	movs	r0, r4
 800637e:	f00e fae0 	bl	8014942 <memcpy>
}
 8006382:	2000      	movs	r0, #0
 8006384:	b002      	add	sp, #8
 8006386:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006388:	220f      	movs	r2, #15
 800638a:	4909      	ldr	r1, [pc, #36]	; (80063b0 <defaultCommand+0xb8>)
 800638c:	0020      	movs	r0, r4
 800638e:	f00e fad8 	bl	8014942 <memcpy>
 8006392:	e7f6      	b.n	8006382 <defaultCommand+0x8a>
 8006394:	08019fc8 	.word	0x08019fc8
 8006398:	08019ff8 	.word	0x08019ff8
 800639c:	20000f68 	.word	0x20000f68
 80063a0:	0801a010 	.word	0x0801a010
 80063a4:	20006e54 	.word	0x20006e54
 80063a8:	20000028 	.word	0x20000028
 80063ac:	08019fd0 	.word	0x08019fd0
 80063b0:	0801a000 	.word	0x0801a000

080063b4 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	46ce      	mov	lr, r9
 80063b8:	4647      	mov	r7, r8
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b08d      	sub	sp, #52	; 0x34
 80063be:	0005      	movs	r5, r0
 80063c0:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c6:	930a      	str	r3, [sp, #40]	; 0x28
 80063c8:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80063ca:	9308      	str	r3, [sp, #32]
 80063cc:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d101      	bne.n	80063d6 <setCommand+0x22>
 80063d2:	b672      	cpsid	i
 80063d4:	e7fe      	b.n	80063d4 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80063d8:	2101      	movs	r1, #1
 80063da:	0020      	movs	r0, r4
 80063dc:	f008 fcc8 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80063e0:	0006      	movs	r6, r0
 80063e2:	4bb3      	ldr	r3, [pc, #716]	; (80066b0 <setCommand+0x2fc>)
 80063e4:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063e6:	2204      	movs	r2, #4
 80063e8:	49b2      	ldr	r1, [pc, #712]	; (80066b4 <setCommand+0x300>)
 80063ea:	f00e fd23 	bl	8014e34 <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d015      	beq.n	800641e <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80063f2:	2204      	movs	r2, #4
 80063f4:	49b0      	ldr	r1, [pc, #704]	; (80066b8 <setCommand+0x304>)
 80063f6:	0030      	movs	r0, r6
 80063f8:	f00e fd1c 	bl	8014e34 <strncmp>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d100      	bne.n	8006402 <setCommand+0x4e>
 8006400:	e182      	b.n	8006708 <setCommand+0x354>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006402:	2204      	movs	r2, #4
 8006404:	49ad      	ldr	r1, [pc, #692]	; (80066bc <setCommand+0x308>)
 8006406:	0030      	movs	r0, r6
 8006408:	f00e fd14 	bl	8014e34 <strncmp>
 800640c:	2800      	cmp	r0, #0
 800640e:	d100      	bne.n	8006412 <setCommand+0x5e>
 8006410:	e1e8      	b.n	80067e4 <setCommand+0x430>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006412:	2213      	movs	r2, #19
 8006414:	49aa      	ldr	r1, [pc, #680]	; (80066c0 <setCommand+0x30c>)
 8006416:	0028      	movs	r0, r5
 8006418:	f00e fa93 	bl	8014942 <memcpy>
 800641c:	e1d9      	b.n	80067d2 <setCommand+0x41e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800641e:	aa0a      	add	r2, sp, #40	; 0x28
 8006420:	2102      	movs	r1, #2
 8006422:	0020      	movs	r0, r4
 8006424:	f008 fca4 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006428:	0004      	movs	r4, r0
 800642a:	4ba6      	ldr	r3, [pc, #664]	; (80066c4 <setCommand+0x310>)
 800642c:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800642e:	4ba0      	ldr	r3, [pc, #640]	; (80066b0 <setCommand+0x2fc>)
 8006430:	681e      	ldr	r6, [r3, #0]
 8006432:	3604      	adds	r6, #4
 8006434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006436:	1f1f      	subs	r7, r3, #4
 8006438:	003a      	movs	r2, r7
 800643a:	49a3      	ldr	r1, [pc, #652]	; (80066c8 <setCommand+0x314>)
 800643c:	0030      	movs	r0, r6
 800643e:	f00e fcf9 	bl	8014e34 <strncmp>
 8006442:	2800      	cmp	r0, #0
 8006444:	d153      	bne.n	80064ee <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006446:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006448:	0032      	movs	r2, r6
 800644a:	49a0      	ldr	r1, [pc, #640]	; (80066cc <setCommand+0x318>)
 800644c:	0020      	movs	r0, r4
 800644e:	f00e fcf1 	bl	8014e34 <strncmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	d115      	bne.n	8006482 <setCommand+0xce>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006456:	4b9e      	ldr	r3, [pc, #632]	; (80066d0 <setCommand+0x31c>)
 8006458:	2160      	movs	r1, #96	; 0x60
 800645a:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	4319      	orrs	r1, r3
 8006462:	308a      	adds	r0, #138	; 0x8a
 8006464:	0040      	lsls	r0, r0, #1
 8006466:	f001 f9e5 	bl	8007834 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800646a:	4b91      	ldr	r3, [pc, #580]	; (80066b0 <setCommand+0x2fc>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006472:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006474:	4b93      	ldr	r3, [pc, #588]	; (80066c4 <setCommand+0x310>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4996      	ldr	r1, [pc, #600]	; (80066d4 <setCommand+0x320>)
 800647a:	0028      	movs	r0, r5
 800647c:	f00e fc96 	bl	8014dac <sprintf>
	return pdFALSE;
 8006480:	e1a7      	b.n	80067d2 <setCommand+0x41e>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006482:	0032      	movs	r2, r6
 8006484:	4994      	ldr	r1, [pc, #592]	; (80066d8 <setCommand+0x324>)
 8006486:	0020      	movs	r0, r4
 8006488:	f00e fcd4 	bl	8014e34 <strncmp>
 800648c:	2800      	cmp	r0, #0
 800648e:	d10a      	bne.n	80064a6 <setCommand+0xf2>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006490:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <setCommand+0x31c>)
 8006492:	2120      	movs	r1, #32
 8006494:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	4319      	orrs	r1, r3
 800649c:	308a      	adds	r0, #138	; 0x8a
 800649e:	0040      	lsls	r0, r0, #1
 80064a0:	f001 f9c8 	bl	8007834 <EE_WriteVariable>
 80064a4:	e7e1      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80064a6:	0032      	movs	r2, r6
 80064a8:	498c      	ldr	r1, [pc, #560]	; (80066dc <setCommand+0x328>)
 80064aa:	0020      	movs	r0, r4
 80064ac:	f00e fcc2 	bl	8014e34 <strncmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d10a      	bne.n	80064ca <setCommand+0x116>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80064b4:	4b86      	ldr	r3, [pc, #536]	; (80066d0 <setCommand+0x31c>)
 80064b6:	2140      	movs	r1, #64	; 0x40
 80064b8:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	4319      	orrs	r1, r3
 80064c0:	308a      	adds	r0, #138	; 0x8a
 80064c2:	0040      	lsls	r0, r0, #1
 80064c4:	f001 f9b6 	bl	8007834 <EE_WriteVariable>
 80064c8:	e7cf      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80064ca:	0032      	movs	r2, r6
 80064cc:	4984      	ldr	r1, [pc, #528]	; (80066e0 <setCommand+0x32c>)
 80064ce:	0020      	movs	r0, r4
 80064d0:	f00e fcb0 	bl	8014e34 <strncmp>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d000      	beq.n	80064da <setCommand+0x126>
 80064d8:	e2a9      	b.n	8006a2e <setCommand+0x67a>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80064da:	4b7d      	ldr	r3, [pc, #500]	; (80066d0 <setCommand+0x31c>)
 80064dc:	2200      	movs	r2, #0
 80064de:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064e0:	7859      	ldrb	r1, [r3, #1]
 80064e2:	0209      	lsls	r1, r1, #8
 80064e4:	308a      	adds	r0, #138	; 0x8a
 80064e6:	0040      	lsls	r0, r0, #1
 80064e8:	f001 f9a4 	bl	8007834 <EE_WriteVariable>
 80064ec:	e7bd      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80064ee:	003a      	movs	r2, r7
 80064f0:	497c      	ldr	r1, [pc, #496]	; (80066e4 <setCommand+0x330>)
 80064f2:	0030      	movs	r0, r6
 80064f4:	f00e fc9e 	bl	8014e34 <strncmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d14a      	bne.n	8006592 <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064fe:	0032      	movs	r2, r6
 8006500:	4972      	ldr	r1, [pc, #456]	; (80066cc <setCommand+0x318>)
 8006502:	0020      	movs	r0, r4
 8006504:	f00e fc96 	bl	8014e34 <strncmp>
 8006508:	2800      	cmp	r0, #0
 800650a:	d10b      	bne.n	8006524 <setCommand+0x170>
				BOSMessaging.trace =TRACE_BOTH;
 800650c:	4b70      	ldr	r3, [pc, #448]	; (80066d0 <setCommand+0x31c>)
 800650e:	2203      	movs	r2, #3
 8006510:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	21c0      	movs	r1, #192	; 0xc0
 8006516:	0089      	lsls	r1, r1, #2
 8006518:	4319      	orrs	r1, r3
 800651a:	308a      	adds	r0, #138	; 0x8a
 800651c:	0040      	lsls	r0, r0, #1
 800651e:	f001 f989 	bl	8007834 <EE_WriteVariable>
 8006522:	e7a2      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006524:	0032      	movs	r2, r6
 8006526:	496c      	ldr	r1, [pc, #432]	; (80066d8 <setCommand+0x324>)
 8006528:	0020      	movs	r0, r4
 800652a:	f00e fc83 	bl	8014e34 <strncmp>
 800652e:	2800      	cmp	r0, #0
 8006530:	d10b      	bne.n	800654a <setCommand+0x196>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006532:	4b67      	ldr	r3, [pc, #412]	; (80066d0 <setCommand+0x31c>)
 8006534:	2201      	movs	r2, #1
 8006536:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	0049      	lsls	r1, r1, #1
 800653e:	4319      	orrs	r1, r3
 8006540:	308a      	adds	r0, #138	; 0x8a
 8006542:	4090      	lsls	r0, r2
 8006544:	f001 f976 	bl	8007834 <EE_WriteVariable>
 8006548:	e78f      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 800654a:	0032      	movs	r2, r6
 800654c:	495e      	ldr	r1, [pc, #376]	; (80066c8 <setCommand+0x314>)
 800654e:	0020      	movs	r0, r4
 8006550:	f00e fc70 	bl	8014e34 <strncmp>
 8006554:	2800      	cmp	r0, #0
 8006556:	d10b      	bne.n	8006570 <setCommand+0x1bc>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006558:	4b5d      	ldr	r3, [pc, #372]	; (80066d0 <setCommand+0x31c>)
 800655a:	2202      	movs	r2, #2
 800655c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	0089      	lsls	r1, r1, #2
 8006564:	4319      	orrs	r1, r3
 8006566:	308a      	adds	r0, #138	; 0x8a
 8006568:	0040      	lsls	r0, r0, #1
 800656a:	f001 f963 	bl	8007834 <EE_WriteVariable>
 800656e:	e77c      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006570:	0032      	movs	r2, r6
 8006572:	495b      	ldr	r1, [pc, #364]	; (80066e0 <setCommand+0x32c>)
 8006574:	0020      	movs	r0, r4
 8006576:	f00e fc5d 	bl	8014e34 <strncmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	d000      	beq.n	8006580 <setCommand+0x1cc>
 800657e:	e256      	b.n	8006a2e <setCommand+0x67a>
				BOSMessaging.trace =TRACE_NONE;
 8006580:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <setCommand+0x31c>)
 8006582:	2200      	movs	r2, #0
 8006584:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006586:	7819      	ldrb	r1, [r3, #0]
 8006588:	308a      	adds	r0, #138	; 0x8a
 800658a:	0040      	lsls	r0, r0, #1
 800658c:	f001 f952 	bl	8007834 <EE_WriteVariable>
 8006590:	e76b      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006592:	003a      	movs	r2, r7
 8006594:	4954      	ldr	r1, [pc, #336]	; (80066e8 <setCommand+0x334>)
 8006596:	0030      	movs	r0, r6
 8006598:	f00e fc4c 	bl	8014e34 <strncmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	d128      	bne.n	80065f2 <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 80065a0:	0020      	movs	r0, r4
 80065a2:	f00d ff3e 	bl	8014422 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80065a6:	23e1      	movs	r3, #225	; 0xe1
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	4298      	cmp	r0, r3
 80065ac:	d900      	bls.n	80065b0 <setCommand+0x1fc>
 80065ae:	e23e      	b.n	8006a2e <setCommand+0x67a>
				BOS.clibaudrate =temp2;
 80065b0:	4c4e      	ldr	r4, [pc, #312]	; (80066ec <setCommand+0x338>)
 80065b2:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80065b4:	b281      	uxth	r1, r0
 80065b6:	208c      	movs	r0, #140	; 0x8c
 80065b8:	0040      	lsls	r0, r0, #1
 80065ba:	f001 f93b 	bl	8007834 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80065be:	68a1      	ldr	r1, [r4, #8]
 80065c0:	0c09      	lsrs	r1, r1, #16
 80065c2:	201a      	movs	r0, #26
 80065c4:	30ff      	adds	r0, #255	; 0xff
 80065c6:	f001 f935 	bl	8007834 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80065ca:	4b39      	ldr	r3, [pc, #228]	; (80066b0 <setCommand+0x2fc>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065d2:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80065d4:	4b3b      	ldr	r3, [pc, #236]	; (80066c4 <setCommand+0x310>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	493e      	ldr	r1, [pc, #248]	; (80066d4 <setCommand+0x320>)
 80065da:	0028      	movs	r0, r5
 80065dc:	f00e fbe6 	bl	8014dac <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80065e0:	4943      	ldr	r1, [pc, #268]	; (80066f0 <setCommand+0x33c>)
 80065e2:	0028      	movs	r0, r5
 80065e4:	f00e fc02 	bl	8014dec <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80065e8:	4942      	ldr	r1, [pc, #264]	; (80066f4 <setCommand+0x340>)
 80065ea:	0028      	movs	r0, r5
 80065ec:	f00e fbfe 	bl	8014dec <strcat>
 80065f0:	e0ef      	b.n	80067d2 <setCommand+0x41e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	4940      	ldr	r1, [pc, #256]	; (80066f8 <setCommand+0x344>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00e fc1c 	bl	8014e34 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d10d      	bne.n	800661c <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 8006600:	0020      	movs	r0, r4
 8006602:	f00d ff0e 	bl	8014422 <atoi>
 8006606:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006608:	2900      	cmp	r1, #0
 800660a:	d100      	bne.n	800660e <setCommand+0x25a>
 800660c:	e20f      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.debounce =temp16;
 800660e:	4b37      	ldr	r3, [pc, #220]	; (80066ec <setCommand+0x338>)
 8006610:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006612:	2016      	movs	r0, #22
 8006614:	30ff      	adds	r0, #255	; 0xff
 8006616:	f001 f90d 	bl	8007834 <EE_WriteVariable>
 800661a:	e726      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800661c:	003a      	movs	r2, r7
 800661e:	4937      	ldr	r1, [pc, #220]	; (80066fc <setCommand+0x348>)
 8006620:	0030      	movs	r0, r6
 8006622:	f00e fc07 	bl	8014e34 <strncmp>
 8006626:	2800      	cmp	r0, #0
 8006628:	d10d      	bne.n	8006646 <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 800662a:	0020      	movs	r0, r4
 800662c:	f00d fef9 	bl	8014422 <atoi>
 8006630:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006632:	2900      	cmp	r1, #0
 8006634:	d100      	bne.n	8006638 <setCommand+0x284>
 8006636:	e1fa      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.singleClickTime =temp16;
 8006638:	4b2c      	ldr	r3, [pc, #176]	; (80066ec <setCommand+0x338>)
 800663a:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800663c:	208b      	movs	r0, #139	; 0x8b
 800663e:	0040      	lsls	r0, r0, #1
 8006640:	f001 f8f8 	bl	8007834 <EE_WriteVariable>
 8006644:	e711      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006646:	003a      	movs	r2, r7
 8006648:	492d      	ldr	r1, [pc, #180]	; (8006700 <setCommand+0x34c>)
 800664a:	0030      	movs	r0, r6
 800664c:	f00e fbf2 	bl	8014e34 <strncmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	d112      	bne.n	800667a <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 8006654:	0020      	movs	r0, r4
 8006656:	f00d fee4 	bl	8014422 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800665a:	1e43      	subs	r3, r0, #1
 800665c:	b29b      	uxth	r3, r3
 800665e:	2bfe      	cmp	r3, #254	; 0xfe
 8006660:	d900      	bls.n	8006664 <setCommand+0x2b0>
 8006662:	e1e4      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.minInterClickTime =temp16;
 8006664:	b2c0      	uxtb	r0, r0
 8006666:	4b21      	ldr	r3, [pc, #132]	; (80066ec <setCommand+0x338>)
 8006668:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800666a:	7959      	ldrb	r1, [r3, #5]
 800666c:	0209      	lsls	r1, r1, #8
 800666e:	4301      	orrs	r1, r0
 8006670:	2018      	movs	r0, #24
 8006672:	30ff      	adds	r0, #255	; 0xff
 8006674:	f001 f8de 	bl	8007834 <EE_WriteVariable>
 8006678:	e6f7      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800667a:	003a      	movs	r2, r7
 800667c:	4921      	ldr	r1, [pc, #132]	; (8006704 <setCommand+0x350>)
 800667e:	0030      	movs	r0, r6
 8006680:	f00e fbd8 	bl	8014e34 <strncmp>
 8006684:	2800      	cmp	r0, #0
 8006686:	d000      	beq.n	800668a <setCommand+0x2d6>
 8006688:	e6c3      	b.n	8006412 <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 800668a:	0020      	movs	r0, r4
 800668c:	f00d fec9 	bl	8014422 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006690:	1e43      	subs	r3, r0, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	2bfe      	cmp	r3, #254	; 0xfe
 8006696:	d900      	bls.n	800669a <setCommand+0x2e6>
 8006698:	e1c9      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.maxInterClickTime =temp16;
 800669a:	4b14      	ldr	r3, [pc, #80]	; (80066ec <setCommand+0x338>)
 800669c:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800669e:	0200      	lsls	r0, r0, #8
 80066a0:	7919      	ldrb	r1, [r3, #4]
 80066a2:	4301      	orrs	r1, r0
 80066a4:	b289      	uxth	r1, r1
 80066a6:	2018      	movs	r0, #24
 80066a8:	30ff      	adds	r0, #255	; 0xff
 80066aa:	f001 f8c3 	bl	8007834 <EE_WriteVariable>
 80066ae:	e6dc      	b.n	800646a <setCommand+0xb6>
 80066b0:	20001308 	.word	0x20001308
 80066b4:	0801a10c 	.word	0x0801a10c
 80066b8:	0801a838 	.word	0x0801a838
 80066bc:	0801a844 	.word	0x0801a844
 80066c0:	0801a194 	.word	0x0801a194
 80066c4:	20001314 	.word	0x20001314
 80066c8:	0801a114 	.word	0x0801a114
 80066cc:	08019504 	.word	0x08019504
 80066d0:	20006dd4 	.word	0x20006dd4
 80066d4:	0801a740 	.word	0x0801a740
 80066d8:	0801a734 	.word	0x0801a734
 80066dc:	0801a73c 	.word	0x0801a73c
 80066e0:	0801a124 	.word	0x0801a124
 80066e4:	0801a12c 	.word	0x0801a12c
 80066e8:	0801a134 	.word	0x0801a134
 80066ec:	20006e54 	.word	0x20006e54
 80066f0:	0801a754 	.word	0x0801a754
 80066f4:	0801a784 	.word	0x0801a784
 80066f8:	0801a140 	.word	0x0801a140
 80066fc:	0801a14c 	.word	0x0801a14c
 8006700:	0801a15c 	.word	0x0801a15c
 8006704:	0801a170 	.word	0x0801a170
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006708:	aa0a      	add	r2, sp, #40	; 0x28
 800670a:	2102      	movs	r1, #2
 800670c:	0020      	movs	r0, r4
 800670e:	f008 fb2f 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006712:	4bca      	ldr	r3, [pc, #808]	; (8006a3c <setCommand+0x688>)
 8006714:	4699      	mov	r9, r3
 8006716:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006718:	aa09      	add	r2, sp, #36	; 0x24
 800671a:	2103      	movs	r1, #3
 800671c:	0020      	movs	r0, r4
 800671e:	f008 fb27 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006722:	4fc7      	ldr	r7, [pc, #796]	; (8006a40 <setCommand+0x68c>)
 8006724:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006726:	aa08      	add	r2, sp, #32
 8006728:	2104      	movs	r1, #4
 800672a:	0020      	movs	r0, r4
 800672c:	f008 fb20 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006730:	4ec4      	ldr	r6, [pc, #784]	; (8006a44 <setCommand+0x690>)
 8006732:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006734:	aa07      	add	r2, sp, #28
 8006736:	2105      	movs	r1, #5
 8006738:	0020      	movs	r0, r4
 800673a:	f008 fb19 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800673e:	4cc2      	ldr	r4, [pc, #776]	; (8006a48 <setCommand+0x694>)
 8006740:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006742:	464b      	mov	r3, r9
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f00d fe6c 	bl	8014422 <atoi>
 800674a:	b2c3      	uxtb	r3, r0
 800674c:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800674e:	6838      	ldr	r0, [r7, #0]
 8006750:	f00d fe67 	bl	8014422 <atoi>
 8006754:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006756:	6830      	ldr	r0, [r6, #0]
 8006758:	f00d fe63 	bl	8014422 <atoi>
 800675c:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 800675e:	6824      	ldr	r4, [r4, #0]
 8006760:	2c00      	cmp	r4, #0
 8006762:	d010      	beq.n	8006786 <setCommand+0x3d2>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006764:	2202      	movs	r2, #2
 8006766:	49b9      	ldr	r1, [pc, #740]	; (8006a4c <setCommand+0x698>)
 8006768:	0020      	movs	r0, r4
 800676a:	f00e fb63 	bl	8014e34 <strncmp>
 800676e:	2800      	cmp	r0, #0
 8006770:	d035      	beq.n	80067de <setCommand+0x42a>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006772:	2202      	movs	r2, #2
 8006774:	49b6      	ldr	r1, [pc, #728]	; (8006a50 <setCommand+0x69c>)
 8006776:	0020      	movs	r0, r4
 8006778:	f00e fb5c 	bl	8014e34 <strncmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	d000      	beq.n	8006782 <setCommand+0x3ce>
 8006780:	e155      	b.n	8006a2e <setCommand+0x67a>
				temp84 =RTC_PM;
 8006782:	2302      	movs	r3, #2
 8006784:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006786:	464b      	mov	r3, r9
 8006788:	2b17      	cmp	r3, #23
 800678a:	d900      	bls.n	800678e <setCommand+0x3da>
 800678c:	e14f      	b.n	8006a2e <setCommand+0x67a>
 800678e:	2f3b      	cmp	r7, #59	; 0x3b
 8006790:	d900      	bls.n	8006794 <setCommand+0x3e0>
 8006792:	e14c      	b.n	8006a2e <setCommand+0x67a>
 8006794:	2e3b      	cmp	r6, #59	; 0x3b
 8006796:	d900      	bls.n	800679a <setCommand+0x3e6>
 8006798:	e149      	b.n	8006a2e <setCommand+0x67a>
				GetTimeDate();
 800679a:	f007 fdff 	bl	800e39c <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 800679e:	4cad      	ldr	r4, [pc, #692]	; (8006a54 <setCommand+0x6a0>)
 80067a0:	7d23      	ldrb	r3, [r4, #20]
 80067a2:	8b22      	ldrh	r2, [r4, #24]
 80067a4:	7d61      	ldrb	r1, [r4, #21]
 80067a6:	7da0      	ldrb	r0, [r4, #22]
 80067a8:	7b24      	ldrb	r4, [r4, #12]
 80067aa:	b264      	sxtb	r4, r4
 80067ac:	9404      	str	r4, [sp, #16]
 80067ae:	4644      	mov	r4, r8
 80067b0:	9403      	str	r4, [sp, #12]
 80067b2:	464c      	mov	r4, r9
 80067b4:	9402      	str	r4, [sp, #8]
 80067b6:	9701      	str	r7, [sp, #4]
 80067b8:	9600      	str	r6, [sp, #0]
 80067ba:	f007 fd95 	bl	800e2e8 <BOS_CalendarConfig>
 80067be:	0006      	movs	r6, r0
	if(result == BOS_OK){
 80067c0:	2e00      	cmp	r6, #0
 80067c2:	d100      	bne.n	80067c6 <setCommand+0x412>
 80067c4:	e651      	b.n	800646a <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 80067c6:	2e67      	cmp	r6, #103	; 0x67
 80067c8:	d100      	bne.n	80067cc <setCommand+0x418>
 80067ca:	e622      	b.n	8006412 <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 80067cc:	2e68      	cmp	r6, #104	; 0x68
 80067ce:	d100      	bne.n	80067d2 <setCommand+0x41e>
 80067d0:	e12d      	b.n	8006a2e <setCommand+0x67a>
}
 80067d2:	2000      	movs	r0, #0
 80067d4:	b00d      	add	sp, #52	; 0x34
 80067d6:	bc0c      	pop	{r2, r3}
 80067d8:	4690      	mov	r8, r2
 80067da:	4699      	mov	r9, r3
 80067dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 80067de:	2301      	movs	r3, #1
 80067e0:	4698      	mov	r8, r3
 80067e2:	e7d0      	b.n	8006786 <setCommand+0x3d2>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80067e4:	aa0a      	add	r2, sp, #40	; 0x28
 80067e6:	2102      	movs	r1, #2
 80067e8:	0020      	movs	r0, r4
 80067ea:	f008 fac1 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80067ee:	4e93      	ldr	r6, [pc, #588]	; (8006a3c <setCommand+0x688>)
 80067f0:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80067f2:	aa09      	add	r2, sp, #36	; 0x24
 80067f4:	2103      	movs	r1, #3
 80067f6:	0020      	movs	r0, r4
 80067f8:	f008 faba 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80067fc:	4b90      	ldr	r3, [pc, #576]	; (8006a40 <setCommand+0x68c>)
 80067fe:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006800:	aa08      	add	r2, sp, #32
 8006802:	2104      	movs	r1, #4
 8006804:	0020      	movs	r0, r4
 8006806:	f008 fab3 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800680a:	4b8e      	ldr	r3, [pc, #568]	; (8006a44 <setCommand+0x690>)
 800680c:	4698      	mov	r8, r3
 800680e:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006810:	aa07      	add	r2, sp, #28
 8006812:	2105      	movs	r1, #5
 8006814:	0020      	movs	r0, r4
 8006816:	f008 faab 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800681a:	4c8b      	ldr	r4, [pc, #556]	; (8006a48 <setCommand+0x694>)
 800681c:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 800681e:	4643      	mov	r3, r8
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f00d fdfe 	bl	8014422 <atoi>
 8006826:	b2c3      	uxtb	r3, r0
 8006828:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	f00d fdf9 	bl	8014422 <atoi>
 8006830:	b283      	uxth	r3, r0
 8006832:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006834:	6834      	ldr	r4, [r6, #0]
 8006836:	2206      	movs	r2, #6
 8006838:	4987      	ldr	r1, [pc, #540]	; (8006a58 <setCommand+0x6a4>)
 800683a:	0020      	movs	r0, r4
 800683c:	f00e fafa 	bl	8014e34 <strncmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	d100      	bne.n	8006846 <setCommand+0x492>
 8006844:	e195      	b.n	8006b72 <setCommand+0x7be>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006846:	2207      	movs	r2, #7
 8006848:	4984      	ldr	r1, [pc, #528]	; (8006a5c <setCommand+0x6a8>)
 800684a:	0020      	movs	r0, r4
 800684c:	f00e faf2 	bl	8014e34 <strncmp>
 8006850:	2800      	cmp	r0, #0
 8006852:	d100      	bne.n	8006856 <setCommand+0x4a2>
 8006854:	e19b      	b.n	8006b8e <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006856:	2209      	movs	r2, #9
 8006858:	4981      	ldr	r1, [pc, #516]	; (8006a60 <setCommand+0x6ac>)
 800685a:	0020      	movs	r0, r4
 800685c:	f00e faea 	bl	8014e34 <strncmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	d100      	bne.n	8006866 <setCommand+0x4b2>
 8006864:	e195      	b.n	8006b92 <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006866:	2208      	movs	r2, #8
 8006868:	497e      	ldr	r1, [pc, #504]	; (8006a64 <setCommand+0x6b0>)
 800686a:	0020      	movs	r0, r4
 800686c:	f00e fae2 	bl	8014e34 <strncmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <setCommand+0x4c2>
 8006874:	e18f      	b.n	8006b96 <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006876:	2206      	movs	r2, #6
 8006878:	497b      	ldr	r1, [pc, #492]	; (8006a68 <setCommand+0x6b4>)
 800687a:	0020      	movs	r0, r4
 800687c:	f00e fada 	bl	8014e34 <strncmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	d100      	bne.n	8006886 <setCommand+0x4d2>
 8006884:	e189      	b.n	8006b9a <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006886:	2208      	movs	r2, #8
 8006888:	4978      	ldr	r1, [pc, #480]	; (8006a6c <setCommand+0x6b8>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00e fad2 	bl	8014e34 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d100      	bne.n	8006896 <setCommand+0x4e2>
 8006894:	e183      	b.n	8006b9e <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006896:	2206      	movs	r2, #6
 8006898:	4975      	ldr	r1, [pc, #468]	; (8006a70 <setCommand+0x6bc>)
 800689a:	0020      	movs	r0, r4
 800689c:	f00e faca 	bl	8014e34 <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d100      	bne.n	80068a6 <setCommand+0x4f2>
 80068a4:	e17d      	b.n	8006ba2 <setCommand+0x7ee>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068a6:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <setCommand+0x68c>)
 80068a8:	681c      	ldr	r4, [r3, #0]
 80068aa:	2207      	movs	r2, #7
 80068ac:	4971      	ldr	r1, [pc, #452]	; (8006a74 <setCommand+0x6c0>)
 80068ae:	0020      	movs	r0, r4
 80068b0:	f00e fac0 	bl	8014e34 <strncmp>
			result =BOS_ERR_WrongValue;
 80068b4:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d101      	bne.n	80068be <setCommand+0x50a>
			result =BOS_ERR_WrongValue;
 80068ba:	2668      	movs	r6, #104	; 0x68
 80068bc:	e783      	b.n	80067c6 <setCommand+0x412>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068be:	2202      	movs	r2, #2
 80068c0:	496d      	ldr	r1, [pc, #436]	; (8006a78 <setCommand+0x6c4>)
 80068c2:	0020      	movs	r0, r4
 80068c4:	f00e fab6 	bl	8014e34 <strncmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d100      	bne.n	80068ce <setCommand+0x51a>
 80068cc:	e104      	b.n	8006ad8 <setCommand+0x724>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80068ce:	2208      	movs	r2, #8
 80068d0:	496a      	ldr	r1, [pc, #424]	; (8006a7c <setCommand+0x6c8>)
 80068d2:	0020      	movs	r0, r4
 80068d4:	f00e faae 	bl	8014e34 <strncmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d100      	bne.n	80068de <setCommand+0x52a>
 80068dc:	e11f      	b.n	8006b1e <setCommand+0x76a>
 80068de:	2202      	movs	r2, #2
 80068e0:	4967      	ldr	r1, [pc, #412]	; (8006a80 <setCommand+0x6cc>)
 80068e2:	0020      	movs	r0, r4
 80068e4:	f00e faa6 	bl	8014e34 <strncmp>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d100      	bne.n	80068ee <setCommand+0x53a>
 80068ec:	e119      	b.n	8006b22 <setCommand+0x76e>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80068ee:	2205      	movs	r2, #5
 80068f0:	4964      	ldr	r1, [pc, #400]	; (8006a84 <setCommand+0x6d0>)
 80068f2:	0020      	movs	r0, r4
 80068f4:	f00e fa9e 	bl	8014e34 <strncmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d100      	bne.n	80068fe <setCommand+0x54a>
 80068fc:	e113      	b.n	8006b26 <setCommand+0x772>
 80068fe:	2202      	movs	r2, #2
 8006900:	4961      	ldr	r1, [pc, #388]	; (8006a88 <setCommand+0x6d4>)
 8006902:	0020      	movs	r0, r4
 8006904:	f00e fa96 	bl	8014e34 <strncmp>
 8006908:	2800      	cmp	r0, #0
 800690a:	d100      	bne.n	800690e <setCommand+0x55a>
 800690c:	e10d      	b.n	8006b2a <setCommand+0x776>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800690e:	2205      	movs	r2, #5
 8006910:	495e      	ldr	r1, [pc, #376]	; (8006a8c <setCommand+0x6d8>)
 8006912:	0020      	movs	r0, r4
 8006914:	f00e fa8e 	bl	8014e34 <strncmp>
 8006918:	2800      	cmp	r0, #0
 800691a:	d100      	bne.n	800691e <setCommand+0x56a>
 800691c:	e107      	b.n	8006b2e <setCommand+0x77a>
 800691e:	2202      	movs	r2, #2
 8006920:	495b      	ldr	r1, [pc, #364]	; (8006a90 <setCommand+0x6dc>)
 8006922:	0020      	movs	r0, r4
 8006924:	f00e fa86 	bl	8014e34 <strncmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	d100      	bne.n	800692e <setCommand+0x57a>
 800692c:	e101      	b.n	8006b32 <setCommand+0x77e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 800692e:	2203      	movs	r2, #3
 8006930:	4958      	ldr	r1, [pc, #352]	; (8006a94 <setCommand+0x6e0>)
 8006932:	0020      	movs	r0, r4
 8006934:	f00e fa7e 	bl	8014e34 <strncmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	d100      	bne.n	800693e <setCommand+0x58a>
 800693c:	e0fb      	b.n	8006b36 <setCommand+0x782>
 800693e:	2202      	movs	r2, #2
 8006940:	4955      	ldr	r1, [pc, #340]	; (8006a98 <setCommand+0x6e4>)
 8006942:	0020      	movs	r0, r4
 8006944:	f00e fa76 	bl	8014e34 <strncmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	d100      	bne.n	800694e <setCommand+0x59a>
 800694c:	e0f5      	b.n	8006b3a <setCommand+0x786>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 800694e:	2204      	movs	r2, #4
 8006950:	4952      	ldr	r1, [pc, #328]	; (8006a9c <setCommand+0x6e8>)
 8006952:	0020      	movs	r0, r4
 8006954:	f00e fa6e 	bl	8014e34 <strncmp>
 8006958:	2800      	cmp	r0, #0
 800695a:	d100      	bne.n	800695e <setCommand+0x5aa>
 800695c:	e0ef      	b.n	8006b3e <setCommand+0x78a>
 800695e:	2202      	movs	r2, #2
 8006960:	494f      	ldr	r1, [pc, #316]	; (8006aa0 <setCommand+0x6ec>)
 8006962:	0020      	movs	r0, r4
 8006964:	f00e fa66 	bl	8014e34 <strncmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	d100      	bne.n	800696e <setCommand+0x5ba>
 800696c:	e0e9      	b.n	8006b42 <setCommand+0x78e>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 800696e:	2204      	movs	r2, #4
 8006970:	494c      	ldr	r1, [pc, #304]	; (8006aa4 <setCommand+0x6f0>)
 8006972:	0020      	movs	r0, r4
 8006974:	f00e fa5e 	bl	8014e34 <strncmp>
 8006978:	2800      	cmp	r0, #0
 800697a:	d100      	bne.n	800697e <setCommand+0x5ca>
 800697c:	e0e3      	b.n	8006b46 <setCommand+0x792>
 800697e:	2202      	movs	r2, #2
 8006980:	4949      	ldr	r1, [pc, #292]	; (8006aa8 <setCommand+0x6f4>)
 8006982:	0020      	movs	r0, r4
 8006984:	f00e fa56 	bl	8014e34 <strncmp>
 8006988:	2800      	cmp	r0, #0
 800698a:	d100      	bne.n	800698e <setCommand+0x5da>
 800698c:	e0dd      	b.n	8006b4a <setCommand+0x796>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 800698e:	2205      	movs	r2, #5
 8006990:	4946      	ldr	r1, [pc, #280]	; (8006aac <setCommand+0x6f8>)
 8006992:	0020      	movs	r0, r4
 8006994:	f00e fa4e 	bl	8014e34 <strncmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	d100      	bne.n	800699e <setCommand+0x5ea>
 800699c:	e0d7      	b.n	8006b4e <setCommand+0x79a>
 800699e:	2202      	movs	r2, #2
 80069a0:	4943      	ldr	r1, [pc, #268]	; (8006ab0 <setCommand+0x6fc>)
 80069a2:	0020      	movs	r0, r4
 80069a4:	f00e fa46 	bl	8014e34 <strncmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d100      	bne.n	80069ae <setCommand+0x5fa>
 80069ac:	e0d1      	b.n	8006b52 <setCommand+0x79e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80069ae:	2209      	movs	r2, #9
 80069b0:	4940      	ldr	r1, [pc, #256]	; (8006ab4 <setCommand+0x700>)
 80069b2:	0020      	movs	r0, r4
 80069b4:	f00e fa3e 	bl	8014e34 <strncmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d100      	bne.n	80069be <setCommand+0x60a>
 80069bc:	e0cb      	b.n	8006b56 <setCommand+0x7a2>
 80069be:	2202      	movs	r2, #2
 80069c0:	493d      	ldr	r1, [pc, #244]	; (8006ab8 <setCommand+0x704>)
 80069c2:	0020      	movs	r0, r4
 80069c4:	f00e fa36 	bl	8014e34 <strncmp>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d100      	bne.n	80069ce <setCommand+0x61a>
 80069cc:	e0c5      	b.n	8006b5a <setCommand+0x7a6>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 80069ce:	2207      	movs	r2, #7
 80069d0:	493a      	ldr	r1, [pc, #232]	; (8006abc <setCommand+0x708>)
 80069d2:	0020      	movs	r0, r4
 80069d4:	f00e fa2e 	bl	8014e34 <strncmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d100      	bne.n	80069de <setCommand+0x62a>
 80069dc:	e0bf      	b.n	8006b5e <setCommand+0x7aa>
 80069de:	2202      	movs	r2, #2
 80069e0:	4937      	ldr	r1, [pc, #220]	; (8006ac0 <setCommand+0x70c>)
 80069e2:	0020      	movs	r0, r4
 80069e4:	f00e fa26 	bl	8014e34 <strncmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d100      	bne.n	80069ee <setCommand+0x63a>
 80069ec:	e0b9      	b.n	8006b62 <setCommand+0x7ae>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 80069ee:	2208      	movs	r2, #8
 80069f0:	4934      	ldr	r1, [pc, #208]	; (8006ac4 <setCommand+0x710>)
 80069f2:	0020      	movs	r0, r4
 80069f4:	f00e fa1e 	bl	8014e34 <strncmp>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d100      	bne.n	80069fe <setCommand+0x64a>
 80069fc:	e0b3      	b.n	8006b66 <setCommand+0x7b2>
 80069fe:	2202      	movs	r2, #2
 8006a00:	4931      	ldr	r1, [pc, #196]	; (8006ac8 <setCommand+0x714>)
 8006a02:	0020      	movs	r0, r4
 8006a04:	f00e fa16 	bl	8014e34 <strncmp>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d100      	bne.n	8006a0e <setCommand+0x65a>
 8006a0c:	e0ad      	b.n	8006b6a <setCommand+0x7b6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006a0e:	2208      	movs	r2, #8
 8006a10:	492e      	ldr	r1, [pc, #184]	; (8006acc <setCommand+0x718>)
 8006a12:	0020      	movs	r0, r4
 8006a14:	f00e fa0e 	bl	8014e34 <strncmp>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d100      	bne.n	8006a1e <setCommand+0x66a>
 8006a1c:	e0a7      	b.n	8006b6e <setCommand+0x7ba>
 8006a1e:	2202      	movs	r2, #2
 8006a20:	492b      	ldr	r1, [pc, #172]	; (8006ad0 <setCommand+0x71c>)
 8006a22:	0020      	movs	r0, r4
 8006a24:	f00e fa06 	bl	8014e34 <strncmp>
			temp82 =DECEMBER;
 8006a28:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d055      	beq.n	8006ada <setCommand+0x726>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006a2e:	220f      	movs	r2, #15
 8006a30:	4928      	ldr	r1, [pc, #160]	; (8006ad4 <setCommand+0x720>)
 8006a32:	0028      	movs	r0, r5
 8006a34:	f00d ff85 	bl	8014942 <memcpy>
 8006a38:	e6cb      	b.n	80067d2 <setCommand+0x41e>
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	20001314 	.word	0x20001314
 8006a40:	2000131c 	.word	0x2000131c
 8006a44:	20001320 	.word	0x20001320
 8006a48:	20001324 	.word	0x20001324
 8006a4c:	0801bff4 	.word	0x0801bff4
 8006a50:	0801a840 	.word	0x0801a840
 8006a54:	20006e54 	.word	0x20006e54
 8006a58:	0801a84c 	.word	0x0801a84c
 8006a5c:	0801a854 	.word	0x0801a854
 8006a60:	0801a85c 	.word	0x0801a85c
 8006a64:	0801a868 	.word	0x0801a868
 8006a68:	0801a874 	.word	0x0801a874
 8006a6c:	0801a87c 	.word	0x0801a87c
 8006a70:	0801a888 	.word	0x0801a888
 8006a74:	0801a924 	.word	0x0801a924
 8006a78:	0801a890 	.word	0x0801a890
 8006a7c:	0801a894 	.word	0x0801a894
 8006a80:	0801a8a0 	.word	0x0801a8a0
 8006a84:	0801a8a4 	.word	0x0801a8a4
 8006a88:	0801a8ac 	.word	0x0801a8ac
 8006a8c:	0801a8b0 	.word	0x0801a8b0
 8006a90:	0801a8b8 	.word	0x0801a8b8
 8006a94:	0801a8bc 	.word	0x0801a8bc
 8006a98:	0801a8c0 	.word	0x0801a8c0
 8006a9c:	0801a8c4 	.word	0x0801a8c4
 8006aa0:	0801a8cc 	.word	0x0801a8cc
 8006aa4:	0801a8d0 	.word	0x0801a8d0
 8006aa8:	0801a8d8 	.word	0x0801a8d8
 8006aac:	0801a8dc 	.word	0x0801a8dc
 8006ab0:	0801a8e4 	.word	0x0801a8e4
 8006ab4:	0801a8e8 	.word	0x0801a8e8
 8006ab8:	0801a8f4 	.word	0x0801a8f4
 8006abc:	0801a8f8 	.word	0x0801a8f8
 8006ac0:	0801a900 	.word	0x0801a900
 8006ac4:	0801a904 	.word	0x0801a904
 8006ac8:	0801a910 	.word	0x0801a910
 8006acc:	0801a914 	.word	0x0801a914
 8006ad0:	0801a920 	.word	0x0801a920
 8006ad4:	0801a000 	.word	0x0801a000
			temp82 =JANUARY;
 8006ad8:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d000      	beq.n	8006ae0 <setCommand+0x72c>
 8006ade:	e672      	b.n	80067c6 <setCommand+0x412>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006ae0:	4643      	mov	r3, r8
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	2b1e      	cmp	r3, #30
 8006ae6:	d8a2      	bhi.n	8006a2e <setCommand+0x67a>
 8006ae8:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <setCommand+0x7f4>)
 8006aea:	444b      	add	r3, r9
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d89d      	bhi.n	8006a2e <setCommand+0x67a>
				GetTimeDate();
 8006af2:	f007 fc53 	bl	800e39c <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006af6:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <setCommand+0x7f8>)
 8006af8:	220c      	movs	r2, #12
 8006afa:	569a      	ldrsb	r2, [r3, r2]
 8006afc:	9204      	str	r2, [sp, #16]
 8006afe:	7cda      	ldrb	r2, [r3, #19]
 8006b00:	9203      	str	r2, [sp, #12]
 8006b02:	7c9a      	ldrb	r2, [r3, #18]
 8006b04:	9202      	str	r2, [sp, #8]
 8006b06:	7c5a      	ldrb	r2, [r3, #17]
 8006b08:	9201      	str	r2, [sp, #4]
 8006b0a:	7c1b      	ldrb	r3, [r3, #16]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	003b      	movs	r3, r7
 8006b10:	464a      	mov	r2, r9
 8006b12:	4641      	mov	r1, r8
 8006b14:	0020      	movs	r0, r4
 8006b16:	f007 fbe7 	bl	800e2e8 <BOS_CalendarConfig>
 8006b1a:	0006      	movs	r6, r0
 8006b1c:	e650      	b.n	80067c0 <setCommand+0x40c>
			temp82 =FEBRUARY;
 8006b1e:	2402      	movs	r4, #2
 8006b20:	e7db      	b.n	8006ada <setCommand+0x726>
 8006b22:	2402      	movs	r4, #2
 8006b24:	e7d9      	b.n	8006ada <setCommand+0x726>
			temp82 =MARCH;
 8006b26:	2403      	movs	r4, #3
 8006b28:	e7d7      	b.n	8006ada <setCommand+0x726>
 8006b2a:	2403      	movs	r4, #3
 8006b2c:	e7d5      	b.n	8006ada <setCommand+0x726>
			temp82 =APRIL;
 8006b2e:	2404      	movs	r4, #4
 8006b30:	e7d3      	b.n	8006ada <setCommand+0x726>
 8006b32:	2404      	movs	r4, #4
 8006b34:	e7d1      	b.n	8006ada <setCommand+0x726>
			temp82 =MAY;
 8006b36:	2405      	movs	r4, #5
 8006b38:	e7cf      	b.n	8006ada <setCommand+0x726>
 8006b3a:	2405      	movs	r4, #5
 8006b3c:	e7cd      	b.n	8006ada <setCommand+0x726>
			temp82 =JUNE;
 8006b3e:	2406      	movs	r4, #6
 8006b40:	e7cb      	b.n	8006ada <setCommand+0x726>
 8006b42:	2406      	movs	r4, #6
 8006b44:	e7c9      	b.n	8006ada <setCommand+0x726>
			temp82 =JULY;
 8006b46:	2407      	movs	r4, #7
 8006b48:	e7c7      	b.n	8006ada <setCommand+0x726>
 8006b4a:	2407      	movs	r4, #7
 8006b4c:	e7c5      	b.n	8006ada <setCommand+0x726>
			temp82 =AUGUST;
 8006b4e:	2408      	movs	r4, #8
 8006b50:	e7c3      	b.n	8006ada <setCommand+0x726>
 8006b52:	2408      	movs	r4, #8
 8006b54:	e7c1      	b.n	8006ada <setCommand+0x726>
			temp82 =SEPTEMBER;
 8006b56:	2409      	movs	r4, #9
 8006b58:	e7bf      	b.n	8006ada <setCommand+0x726>
 8006b5a:	2409      	movs	r4, #9
 8006b5c:	e7bd      	b.n	8006ada <setCommand+0x726>
			temp82 =OCTOBER;
 8006b5e:	240a      	movs	r4, #10
 8006b60:	e7bb      	b.n	8006ada <setCommand+0x726>
 8006b62:	240a      	movs	r4, #10
 8006b64:	e7b9      	b.n	8006ada <setCommand+0x726>
			temp82 =NOVEMBER;
 8006b66:	240b      	movs	r4, #11
 8006b68:	e7b7      	b.n	8006ada <setCommand+0x726>
 8006b6a:	240b      	movs	r4, #11
 8006b6c:	e7b5      	b.n	8006ada <setCommand+0x726>
			temp82 =DECEMBER;
 8006b6e:	240c      	movs	r4, #12
 8006b70:	e7b3      	b.n	8006ada <setCommand+0x726>
			temp81 =MONDAY;
 8006b72:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b74:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <setCommand+0x7fc>)
 8006b76:	681c      	ldr	r4, [r3, #0]
 8006b78:	2207      	movs	r2, #7
 8006b7a:	490e      	ldr	r1, [pc, #56]	; (8006bb4 <setCommand+0x800>)
 8006b7c:	0020      	movs	r0, r4
 8006b7e:	f00e f959 	bl	8014e34 <strncmp>
 8006b82:	2600      	movs	r6, #0
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d000      	beq.n	8006b8a <setCommand+0x7d6>
 8006b88:	e699      	b.n	80068be <setCommand+0x50a>
			temp82 =JANUARY;
 8006b8a:	2401      	movs	r4, #1
 8006b8c:	e7a8      	b.n	8006ae0 <setCommand+0x72c>
			temp81 =TUESDAY;
 8006b8e:	2702      	movs	r7, #2
 8006b90:	e7f0      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =WEDNESDAY;
 8006b92:	2703      	movs	r7, #3
 8006b94:	e7ee      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =THURSDAY;
 8006b96:	2704      	movs	r7, #4
 8006b98:	e7ec      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =FRIDAY;
 8006b9a:	2705      	movs	r7, #5
 8006b9c:	e7ea      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =SATURDAY;
 8006b9e:	2706      	movs	r7, #6
 8006ba0:	e7e8      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =SUNDAY;
 8006ba2:	2707      	movs	r7, #7
 8006ba4:	e7e6      	b.n	8006b74 <setCommand+0x7c0>
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	fffff830 	.word	0xfffff830
 8006bac:	20006e54 	.word	0x20006e54
 8006bb0:	2000131c 	.word	0x2000131c
 8006bb4:	0801a924 	.word	0x0801a924

08006bb8 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb8:	b530      	push	{r4, r5, lr}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	0005      	movs	r5, r0
 8006bbe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	d101      	bne.n	8006bcc <removebuttonCommand+0x14>
 8006bc8:	b672      	cpsid	i
 8006bca:	e7fe      	b.n	8006bca <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bcc:	aa01      	add	r2, sp, #4
 8006bce:	2101      	movs	r1, #1
 8006bd0:	f008 f8ce 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006bd8:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006bda:	2b70      	cmp	r3, #112	; 0x70
 8006bdc:	d007      	beq.n	8006bee <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006bde:	0020      	movs	r0, r4
 8006be0:	f001 fd68 	bl	80086b4 <RemovePortButton>
	if(result == BOS_OK){
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d007      	beq.n	8006bf8 <removebuttonCommand+0x40>
}
 8006be8:	2000      	movs	r0, #0
 8006bea:	b003      	add	sp, #12
 8006bec:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f00d fc1d 	bl	801442e <atol>
 8006bf4:	b2c4      	uxtb	r4, r0
 8006bf6:	e7f2      	b.n	8006bde <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006bf8:	0023      	movs	r3, r4
 8006bfa:	0022      	movs	r2, r4
 8006bfc:	4902      	ldr	r1, [pc, #8]	; (8006c08 <removebuttonCommand+0x50>)
 8006bfe:	0028      	movs	r0, r5
 8006c00:	f00e f8d4 	bl	8014dac <sprintf>
 8006c04:	e7f0      	b.n	8006be8 <removebuttonCommand+0x30>
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	0801a5e4 	.word	0x0801a5e4

08006c0c <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	0006      	movs	r6, r0
 8006c12:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d101      	bne.n	8006c22 <addbuttonCommand+0x16>
 8006c1e:	b672      	cpsid	i
 8006c20:	e7fe      	b.n	8006c20 <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c22:	aa05      	add	r2, sp, #20
 8006c24:	2101      	movs	r1, #1
 8006c26:	9803      	ldr	r0, [sp, #12]
 8006c28:	f008 f8a2 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006c2c:	0004      	movs	r4, r0
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <addbuttonCommand+0xb0>)
 8006c30:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c32:	9d05      	ldr	r5, [sp, #20]
 8006c34:	002a      	movs	r2, r5
 8006c36:	4922      	ldr	r1, [pc, #136]	; (8006cc0 <addbuttonCommand+0xb4>)
 8006c38:	f00e f8fc 	bl	8014e34 <strncmp>
		type =MOMENTARY_NO;
 8006c3c:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d017      	beq.n	8006c72 <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c42:	002a      	movs	r2, r5
 8006c44:	491f      	ldr	r1, [pc, #124]	; (8006cc4 <addbuttonCommand+0xb8>)
 8006c46:	0020      	movs	r0, r4
 8006c48:	f00e f8f4 	bl	8014e34 <strncmp>
		type =MOMENTARY_NC;
 8006c4c:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d00f      	beq.n	8006c72 <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c52:	002a      	movs	r2, r5
 8006c54:	491c      	ldr	r1, [pc, #112]	; (8006cc8 <addbuttonCommand+0xbc>)
 8006c56:	0020      	movs	r0, r4
 8006c58:	f00e f8ec 	bl	8014e34 <strncmp>
		type =ONOFF_NO;
 8006c5c:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d007      	beq.n	8006c72 <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c62:	002a      	movs	r2, r5
 8006c64:	4919      	ldr	r1, [pc, #100]	; (8006ccc <addbuttonCommand+0xc0>)
 8006c66:	0020      	movs	r0, r4
 8006c68:	f00e f8e4 	bl	8014e34 <strncmp>
		type =ONOFF_NC;
 8006c6c:	4243      	negs	r3, r0
 8006c6e:	4158      	adcs	r0, r3
 8006c70:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c72:	aa04      	add	r2, sp, #16
 8006c74:	2102      	movs	r1, #2
 8006c76:	9803      	ldr	r0, [sp, #12]
 8006c78:	f008 f87a 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c80:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006c82:	2b70      	cmp	r3, #112	; 0x70
 8006c84:	d008      	beq.n	8006c98 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006c86:	0021      	movs	r1, r4
 8006c88:	0038      	movs	r0, r7
 8006c8a:	f001 fc81 	bl	8008590 <AddPortButton>
	if(result == BOS_OK){
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d007      	beq.n	8006ca2 <addbuttonCommand+0x96>
}
 8006c92:	2000      	movs	r0, #0
 8006c94:	b007      	add	sp, #28
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f00d fbc8 	bl	801442e <atol>
 8006c9e:	b2c4      	uxtb	r4, r0
 8006ca0:	e7f1      	b.n	8006c86 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006ca2:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <addbuttonCommand+0xb0>)
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9905      	ldr	r1, [sp, #20]
 8006caa:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006cac:	9400      	str	r4, [sp, #0]
 8006cae:	0023      	movs	r3, r4
 8006cb0:	4907      	ldr	r1, [pc, #28]	; (8006cd0 <addbuttonCommand+0xc4>)
 8006cb2:	0030      	movs	r0, r6
 8006cb4:	f00e f87a 	bl	8014dac <sprintf>
 8006cb8:	e7eb      	b.n	8006c92 <addbuttonCommand+0x86>
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	20001304 	.word	0x20001304
 8006cc0:	08019ea4 	.word	0x08019ea4
 8006cc4:	08019eb4 	.word	0x08019eb4
 8006cc8:	08019ec4 	.word	0x08019ec4
 8006ccc:	08019ed0 	.word	0x08019ed0
 8006cd0:	08019edc 	.word	0x08019edc

08006cd4 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd6:	46de      	mov	lr, fp
 8006cd8:	4657      	mov	r7, sl
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b09b      	sub	sp, #108	; 0x6c
 8006cde:	0005      	movs	r5, r0
 8006ce0:	9009      	str	r0, [sp, #36]	; 0x24
 8006ce2:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9319      	str	r3, [sp, #100]	; 0x64
 8006ce8:	9318      	str	r3, [sp, #96]	; 0x60
 8006cea:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006cec:	9316      	str	r3, [sp, #88]	; 0x58
 8006cee:	9315      	str	r3, [sp, #84]	; 0x54
 8006cf0:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006cf2:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cf4:	220a      	movs	r2, #10
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	a810      	add	r0, sp, #64	; 0x40
 8006cfa:	f00d fe2b 	bl	8014954 <memset>
 8006cfe:	220a      	movs	r2, #10
 8006d00:	2100      	movs	r1, #0
 8006d02:	a80d      	add	r0, sp, #52	; 0x34
 8006d04:	f00d fe26 	bl	8014954 <memset>
 8006d08:	220a      	movs	r2, #10
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	a80a      	add	r0, sp, #40	; 0x28
 8006d0e:	f00d fe21 	bl	8014954 <memset>
	configASSERT(pcWriteBuffer);
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	d101      	bne.n	8006d1a <scastCommand+0x46>
 8006d16:	b672      	cpsid	i
 8006d18:	e7fe      	b.n	8006d18 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d1a:	aa19      	add	r2, sp, #100	; 0x64
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	0020      	movs	r0, r4
 8006d20:	f008 f826 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006d24:	2300      	movs	r3, #0
 8006d26:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d28:	2200      	movs	r2, #0
 8006d2a:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006d2c:	2b50      	cmp	r3, #80	; 0x50
 8006d2e:	d100      	bne.n	8006d32 <scastCommand+0x5e>
 8006d30:	e06d      	b.n	8006e0e <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d32:	aa18      	add	r2, sp, #96	; 0x60
 8006d34:	2102      	movs	r1, #2
 8006d36:	0020      	movs	r0, r4
 8006d38:	f008 f81a 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006d3c:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d40:	a810      	add	r0, sp, #64	; 0x40
 8006d42:	f00e f888 	bl	8014e56 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006d46:	a810      	add	r0, sp, #64	; 0x40
 8006d48:	f7fd fa58 	bl	80041fc <GetID>
 8006d4c:	b2c3      	uxtb	r3, r0
 8006d4e:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d50:	aa17      	add	r2, sp, #92	; 0x5c
 8006d52:	2103      	movs	r1, #3
 8006d54:	0020      	movs	r0, r4
 8006d56:	f008 f80b 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d5e:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006d60:	2b70      	cmp	r3, #112	; 0x70
 8006d62:	d05a      	beq.n	8006e1a <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d64:	aa16      	add	r2, sp, #88	; 0x58
 8006d66:	2104      	movs	r1, #4
 8006d68:	0020      	movs	r0, r4
 8006d6a:	f008 f801 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006d6e:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d72:	a80d      	add	r0, sp, #52	; 0x34
 8006d74:	f00e f86f 	bl	8014e56 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d78:	a80d      	add	r0, sp, #52	; 0x34
 8006d7a:	f7fd fa3f 	bl	80041fc <GetID>
 8006d7e:	b2c3      	uxtb	r3, r0
 8006d80:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d82:	aa15      	add	r2, sp, #84	; 0x54
 8006d84:	2105      	movs	r1, #5
 8006d86:	0020      	movs	r0, r4
 8006d88:	f007 fff2 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d8c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d8e:	0032      	movs	r2, r6
 8006d90:	492b      	ldr	r1, [pc, #172]	; (8006e40 <scastCommand+0x16c>)
 8006d92:	9007      	str	r0, [sp, #28]
 8006d94:	f00e f84e 	bl	8014e34 <strncmp>
		direction =FORWARD;
 8006d98:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d00f      	beq.n	8006dbe <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d9e:	0032      	movs	r2, r6
 8006da0:	4928      	ldr	r1, [pc, #160]	; (8006e44 <scastCommand+0x170>)
 8006da2:	9807      	ldr	r0, [sp, #28]
 8006da4:	f00e f846 	bl	8014e34 <strncmp>
		direction =BACKWARD;
 8006da8:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d007      	beq.n	8006dbe <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006dae:	0032      	movs	r2, r6
 8006db0:	4925      	ldr	r1, [pc, #148]	; (8006e48 <scastCommand+0x174>)
 8006db2:	9807      	ldr	r0, [sp, #28]
 8006db4:	f00e f83e 	bl	8014e34 <strncmp>
		direction =BIDIRECTIONAL;
 8006db8:	4243      	negs	r3, r0
 8006dba:	4158      	adcs	r0, r3
 8006dbc:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006dbe:	0032      	movs	r2, r6
 8006dc0:	9907      	ldr	r1, [sp, #28]
 8006dc2:	a80a      	add	r0, sp, #40	; 0x28
 8006dc4:	f00e f847 	bl	8014e56 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006dc8:	aa14      	add	r2, sp, #80	; 0x50
 8006dca:	2106      	movs	r1, #6
 8006dcc:	0020      	movs	r0, r4
 8006dce:	f007 ffcf 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dd2:	f00d fb2c 	bl	801442e <atol>
 8006dd6:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dd8:	aa13      	add	r2, sp, #76	; 0x4c
 8006dda:	2107      	movs	r1, #7
 8006ddc:	0020      	movs	r0, r4
 8006dde:	f007 ffc7 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006de2:	f00d fb24 	bl	801442e <atol>
 8006de6:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006de8:	2300      	movs	r3, #0
 8006dea:	9303      	str	r3, [sp, #12]
 8006dec:	9002      	str	r0, [sp, #8]
 8006dee:	9601      	str	r6, [sp, #4]
 8006df0:	9500      	str	r5, [sp, #0]
 8006df2:	465b      	mov	r3, fp
 8006df4:	003a      	movs	r2, r7
 8006df6:	4651      	mov	r1, sl
 8006df8:	9808      	ldr	r0, [sp, #32]
 8006dfa:	f002 fef5 	bl	8009be8 <StartScastDMAStream>
	if(result == BOS_OK){
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d010      	beq.n	8006e24 <scastCommand+0x150>
}
 8006e02:	2000      	movs	r0, #0
 8006e04:	b01b      	add	sp, #108	; 0x6c
 8006e06:	bc0c      	pop	{r2, r3}
 8006e08:	4692      	mov	sl, r2
 8006e0a:	469b      	mov	fp, r3
 8006e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f00d fb0d 	bl	801442e <atol>
 8006e14:	b2c3      	uxtb	r3, r0
 8006e16:	9308      	str	r3, [sp, #32]
 8006e18:	e78b      	b.n	8006d32 <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f00d fb07 	bl	801442e <atol>
 8006e20:	b2c7      	uxtb	r7, r0
 8006e22:	e79f      	b.n	8006d64 <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006e24:	9404      	str	r4, [sp, #16]
 8006e26:	9603      	str	r6, [sp, #12]
 8006e28:	ab0d      	add	r3, sp, #52	; 0x34
 8006e2a:	9302      	str	r3, [sp, #8]
 8006e2c:	9701      	str	r7, [sp, #4]
 8006e2e:	ab10      	add	r3, sp, #64	; 0x40
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	9b08      	ldr	r3, [sp, #32]
 8006e34:	aa0a      	add	r2, sp, #40	; 0x28
 8006e36:	4905      	ldr	r1, [pc, #20]	; (8006e4c <scastCommand+0x178>)
 8006e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e3a:	f00d ffb7 	bl	8014dac <sprintf>
 8006e3e:	e7e0      	b.n	8006e02 <scastCommand+0x12e>
 8006e40:	0801a62c 	.word	0x0801a62c
 8006e44:	0801a634 	.word	0x0801a634
 8006e48:	0801a640 	.word	0x0801a640
 8006e4c:	0801a650 	.word	0x0801a650

08006e50 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e52:	b083      	sub	sp, #12
 8006e54:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006e56:	d039      	beq.n	8006ecc <infoCommand+0x7c>
	if(N > 1)
 8006e58:	4b26      	ldr	r3, [pc, #152]	; (8006ef4 <infoCommand+0xa4>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006e5c:	2500      	movs	r5, #0
	if(N > 1)
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d902      	bls.n	8006e68 <infoCommand+0x18>
		result =ReadPortsDir();
 8006e62:	f7fd fb1f 	bl	80044a4 <ReadPortsDir>
 8006e66:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e68:	4b22      	ldr	r3, [pc, #136]	; (8006ef4 <infoCommand+0xa4>)
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	4922      	ldr	r1, [pc, #136]	; (8006ef8 <infoCommand+0xa8>)
 8006e6e:	0020      	movs	r0, r4
 8006e70:	f00d ff9c 	bl	8014dac <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e74:	0020      	movs	r0, r4
 8006e76:	f7f9 f94f 	bl	8000118 <strlen>
 8006e7a:	b282      	uxth	r2, r0
 8006e7c:	4e1f      	ldr	r6, [pc, #124]	; (8006efc <infoCommand+0xac>)
 8006e7e:	7830      	ldrb	r0, [r6, #0]
 8006e80:	2701      	movs	r7, #1
 8006e82:	427f      	negs	r7, r7
 8006e84:	9700      	str	r7, [sp, #0]
 8006e86:	2332      	movs	r3, #50	; 0x32
 8006e88:	0021      	movs	r1, r4
 8006e8a:	f007 fd2b 	bl	800e8e4 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e8e:	2213      	movs	r2, #19
 8006e90:	491b      	ldr	r1, [pc, #108]	; (8006f00 <infoCommand+0xb0>)
 8006e92:	0020      	movs	r0, r4
 8006e94:	f00d fd55 	bl	8014942 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e98:	0020      	movs	r0, r4
 8006e9a:	f7f9 f93d 	bl	8000118 <strlen>
 8006e9e:	b282      	uxth	r2, r0
 8006ea0:	7830      	ldrb	r0, [r6, #0]
 8006ea2:	9700      	str	r7, [sp, #0]
 8006ea4:	2332      	movs	r3, #50	; 0x32
 8006ea6:	0021      	movs	r1, r4
 8006ea8:	f007 fd1c 	bl	800e8e4 <writePxMutex>
	DisplayTopology(PcPort);
 8006eac:	7830      	ldrb	r0, [r6, #0]
 8006eae:	f7fc ff01 	bl	8003cb4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006eb2:	7830      	ldrb	r0, [r6, #0]
 8006eb4:	f7fc ffce 	bl	8003e54 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006eb8:	2d02      	cmp	r5, #2
 8006eba:	d009      	beq.n	8006ed0 <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	4911      	ldr	r1, [pc, #68]	; (8006f04 <infoCommand+0xb4>)
 8006ec0:	0020      	movs	r0, r4
 8006ec2:	f00d fd3e 	bl	8014942 <memcpy>
}
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	b003      	add	sp, #12
 8006eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006ecc:	b672      	cpsid	i
 8006ece:	e7fe      	b.n	8006ece <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006ed0:	2244      	movs	r2, #68	; 0x44
 8006ed2:	490d      	ldr	r1, [pc, #52]	; (8006f08 <infoCommand+0xb8>)
 8006ed4:	0020      	movs	r0, r4
 8006ed6:	f00d fd34 	bl	8014942 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006eda:	0020      	movs	r0, r4
 8006edc:	f7f9 f91c 	bl	8000118 <strlen>
 8006ee0:	b282      	uxth	r2, r0
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <infoCommand+0xac>)
 8006ee4:	7818      	ldrb	r0, [r3, #0]
 8006ee6:	003b      	movs	r3, r7
 8006ee8:	9700      	str	r7, [sp, #0]
 8006eea:	3333      	adds	r3, #51	; 0x33
 8006eec:	0021      	movs	r1, r4
 8006eee:	f007 fcf9 	bl	800e8e4 <writePxMutex>
 8006ef2:	e7e3      	b.n	8006ebc <infoCommand+0x6c>
 8006ef4:	20000044 	.word	0x20000044
 8006ef8:	0801a3e8 	.word	0x0801a3e8
 8006efc:	20000ae8 	.word	0x20000ae8
 8006f00:	0801a404 	.word	0x0801a404
 8006f04:	0801937c 	.word	0x0801937c
 8006f08:	0801a418 	.word	0x0801a418

08006f0c <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f0c:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d101      	bne.n	8006f16 <statusCommand+0xa>
 8006f12:	b672      	cpsid	i
 8006f14:	e7fe      	b.n	8006f14 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006f16:	2000      	movs	r0, #0
 8006f18:	f7fd f810 	bl	8003f3c <DisplayModuleStatus>
}
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f22:	46ce      	mov	lr, r9
 8006f24:	b500      	push	{lr}
 8006f26:	b090      	sub	sp, #64	; 0x40
 8006f28:	0004      	movs	r4, r0
 8006f2a:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006f2c:	2227      	movs	r2, #39	; 0x27
 8006f2e:	2100      	movs	r1, #0
 8006f30:	a806      	add	r0, sp, #24
 8006f32:	f00d fd0f 	bl	8014954 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006f36:	220a      	movs	r2, #10
 8006f38:	2100      	movs	r1, #0
 8006f3a:	a803      	add	r0, sp, #12
 8006f3c:	f00d fd0a 	bl	8014954 <memset>
	configASSERT(pcWriteBuffer);
 8006f40:	2c00      	cmp	r4, #0
 8006f42:	d101      	bne.n	8006f48 <groupCommand+0x28>
 8006f44:	b672      	cpsid	i
 8006f46:	e7fe      	b.n	8006f46 <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f48:	4d54      	ldr	r5, [pc, #336]	; (800709c <groupCommand+0x17c>)
 8006f4a:	002a      	movs	r2, r5
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	9801      	ldr	r0, [sp, #4]
 8006f50:	f007 ff0e 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006f54:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f56:	682a      	ldr	r2, [r5, #0]
 8006f58:	a803      	add	r0, sp, #12
 8006f5a:	f00d ff7c 	bl	8014e56 <strncpy>
 8006f5e:	4d50      	ldr	r5, [pc, #320]	; (80070a0 <groupCommand+0x180>)
 8006f60:	002f      	movs	r7, r5
 8006f62:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006f64:	0029      	movs	r1, r5
 8006f66:	a803      	add	r0, sp, #12
 8006f68:	f7f9 f8cc 	bl	8000104 <strcmp>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d016      	beq.n	8006f9e <groupCommand+0x7e>
 8006f70:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f72:	42bd      	cmp	r5, r7
 8006f74:	d1f6      	bne.n	8006f64 <groupCommand+0x44>
	type =1;
 8006f76:	2701      	movs	r7, #1
	count =2;
 8006f78:	4b4a      	ldr	r3, [pc, #296]	; (80070a4 <groupCommand+0x184>)
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f7e:	3208      	adds	r2, #8
 8006f80:	4949      	ldr	r1, [pc, #292]	; (80070a8 <groupCommand+0x188>)
 8006f82:	0020      	movs	r0, r4
 8006f84:	f00d fcdd 	bl	8014942 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f88:	4a48      	ldr	r2, [pc, #288]	; (80070ac <groupCommand+0x18c>)
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	9801      	ldr	r0, [sp, #4]
 8006f8e:	f007 feef 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006f92:	4b47      	ldr	r3, [pc, #284]	; (80070b0 <groupCommand+0x190>)
 8006f94:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d061      	beq.n	800705e <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f9a:	4e44      	ldr	r6, [pc, #272]	; (80070ac <groupCommand+0x18c>)
 8006f9c:	e011      	b.n	8006fc2 <groupCommand+0xa2>
			type =0;
 8006f9e:	2700      	movs	r7, #0
 8006fa0:	e7ea      	b.n	8006f78 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 8006fa2:	a906      	add	r1, sp, #24
 8006fa4:	0020      	movs	r0, r4
 8006fa6:	f00d ff21 	bl	8014dec <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006faa:	1c69      	adds	r1, r5, #1
 8006fac:	b249      	sxtb	r1, r1
 8006fae:	4b3d      	ldr	r3, [pc, #244]	; (80070a4 <groupCommand+0x184>)
 8006fb0:	7019      	strb	r1, [r3, #0]
 8006fb2:	4a3e      	ldr	r2, [pc, #248]	; (80070ac <groupCommand+0x18c>)
 8006fb4:	9801      	ldr	r0, [sp, #4]
 8006fb6:	f007 fedb 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 8006fba:	4b3d      	ldr	r3, [pc, #244]	; (80070b0 <groupCommand+0x190>)
 8006fbc:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d04d      	beq.n	800705e <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006fc2:	6833      	ldr	r3, [r6, #0]
 8006fc4:	4699      	mov	r9, r3
 8006fc6:	ad06      	add	r5, sp, #24
 8006fc8:	001a      	movs	r2, r3
 8006fca:	0001      	movs	r1, r0
 8006fcc:	0028      	movs	r0, r5
 8006fce:	f00d ff42 	bl	8014e56 <strncpy>
		module[xParameterStringLength] ='\0';
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	464a      	mov	r2, r9
 8006fd6:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8006fd8:	0028      	movs	r0, r5
 8006fda:	f7fd f90f 	bl	80041fc <GetID>
		if(modID < 0)
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	db37      	blt.n	8007052 <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 8006fe2:	b2c0      	uxtb	r0, r0
 8006fe4:	a903      	add	r1, sp, #12
 8006fe6:	f7fd f9d5 	bl	8004394 <AddModuleToGroup>
		if(result != BOS_OK)
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d146      	bne.n	800707c <groupCommand+0x15c>
		if(count > 2)
 8006fee:	4b2d      	ldr	r3, [pc, #180]	; (80070a4 <groupCommand+0x184>)
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	575d      	ldrsb	r5, [r3, r5]
 8006ff4:	2d02      	cmp	r5, #2
 8006ff6:	ddd4      	ble.n	8006fa2 <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006ff8:	0020      	movs	r0, r4
 8006ffa:	f7f9 f88d 	bl	8000118 <strlen>
 8006ffe:	1820      	adds	r0, r4, r0
 8007000:	2203      	movs	r2, #3
 8007002:	492c      	ldr	r1, [pc, #176]	; (80070b4 <groupCommand+0x194>)
 8007004:	f00d fc9d 	bl	8014942 <memcpy>
 8007008:	e7cb      	b.n	8006fa2 <groupCommand+0x82>
	else if(result == BOS_OK && type){
 800700a:	2f00      	cmp	r7, #0
 800700c:	d009      	beq.n	8007022 <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 800700e:	aa03      	add	r2, sp, #12
 8007010:	4929      	ldr	r1, [pc, #164]	; (80070b8 <groupCommand+0x198>)
 8007012:	a806      	add	r0, sp, #24
 8007014:	f00d feca 	bl	8014dac <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007018:	a906      	add	r1, sp, #24
 800701a:	0020      	movs	r0, r4
 800701c:	f00d fee6 	bl	8014dec <strcat>
 8007020:	e027      	b.n	8007072 <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007022:	aa03      	add	r2, sp, #12
 8007024:	4925      	ldr	r1, [pc, #148]	; (80070bc <groupCommand+0x19c>)
 8007026:	a806      	add	r0, sp, #24
 8007028:	f00d fec0 	bl	8014dac <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800702c:	a906      	add	r1, sp, #24
 800702e:	0020      	movs	r0, r4
 8007030:	f00d fedc 	bl	8014dec <strcat>
 8007034:	e01d      	b.n	8007072 <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007036:	aa03      	add	r2, sp, #12
 8007038:	4921      	ldr	r1, [pc, #132]	; (80070c0 <groupCommand+0x1a0>)
 800703a:	0020      	movs	r0, r4
 800703c:	f00d feb6 	bl	8014dac <sprintf>
 8007040:	e017      	b.n	8007072 <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 8007042:	2808      	cmp	r0, #8
 8007044:	d115      	bne.n	8007072 <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007046:	aa03      	add	r2, sp, #12
 8007048:	491e      	ldr	r1, [pc, #120]	; (80070c4 <groupCommand+0x1a4>)
 800704a:	0020      	movs	r0, r4
 800704c:	f00d feae 	bl	8014dac <sprintf>
 8007050:	e00f      	b.n	8007072 <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007052:	aa06      	add	r2, sp, #24
 8007054:	491c      	ldr	r1, [pc, #112]	; (80070c8 <groupCommand+0x1a8>)
 8007056:	0020      	movs	r0, r4
 8007058:	f00d fea8 	bl	8014dac <sprintf>
	return pdFALSE;
 800705c:	e009      	b.n	8007072 <groupCommand+0x152>
	else if(count == 2)
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <groupCommand+0x184>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b25b      	sxtb	r3, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d1d0      	bne.n	800700a <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007068:	aa03      	add	r2, sp, #12
 800706a:	4918      	ldr	r1, [pc, #96]	; (80070cc <groupCommand+0x1ac>)
 800706c:	0020      	movs	r0, r4
 800706e:	f00d fe9d 	bl	8014dac <sprintf>
}
 8007072:	2000      	movs	r0, #0
 8007074:	b010      	add	sp, #64	; 0x40
 8007076:	bc04      	pop	{r2}
 8007078:	4691      	mov	r9, r2
 800707a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <groupCommand+0x184>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b25b      	sxtb	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d0f0      	beq.n	8007068 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 8007086:	2806      	cmp	r0, #6
 8007088:	d0d5      	beq.n	8007036 <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 800708a:	2807      	cmp	r0, #7
 800708c:	d1d9      	bne.n	8007042 <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 800708e:	aa03      	add	r2, sp, #12
 8007090:	490f      	ldr	r1, [pc, #60]	; (80070d0 <groupCommand+0x1b0>)
 8007092:	0020      	movs	r0, r4
 8007094:	f00d fe8a 	bl	8014dac <sprintf>
 8007098:	e7eb      	b.n	8007072 <groupCommand+0x152>
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	20001334 	.word	0x20001334
 80070a0:	20000ed0 	.word	0x20000ed0
 80070a4:	200012fa 	.word	0x200012fa
 80070a8:	0801a208 	.word	0x0801a208
 80070ac:	20001328 	.word	0x20001328
 80070b0:	200012fc 	.word	0x200012fc
 80070b4:	0801a214 	.word	0x0801a214
 80070b8:	0801a244 	.word	0x0801a244
 80070bc:	0801a260 	.word	0x0801a260
 80070c0:	0801a280 	.word	0x0801a280
 80070c4:	0801a2f4 	.word	0x0801a2f4
 80070c8:	0801a334 	.word	0x0801a334
 80070cc:	0801a218 	.word	0x0801a218
 80070d0:	0801a2c0 	.word	0x0801a2c0

080070d4 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	0004      	movs	r4, r0
 80070d8:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80070da:	2c00      	cmp	r4, #0
 80070dc:	d101      	bne.n	80070e2 <nameCommand+0xe>
 80070de:	b672      	cpsid	i
 80070e0:	e7fe      	b.n	80070e0 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070e2:	4d1c      	ldr	r5, [pc, #112]	; (8007154 <nameCommand+0x80>)
 80070e4:	002a      	movs	r2, r5
 80070e6:	2101      	movs	r1, #1
 80070e8:	f007 fe42 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80070ec:	0001      	movs	r1, r0
 80070ee:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <nameCommand+0x84>)
 80070f0:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	dd01      	ble.n	80070fc <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070f8:	2300      	movs	r3, #0
 80070fa:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070fc:	4b17      	ldr	r3, [pc, #92]	; (800715c <nameCommand+0x88>)
 80070fe:	7818      	ldrb	r0, [r3, #0]
 8007100:	f7fd f8e0 	bl	80042c4 <NameModule>
	if(result == BOS_OK)
 8007104:	2800      	cmp	r0, #0
 8007106:	d007      	beq.n	8007118 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007108:	2806      	cmp	r0, #6
 800710a:	d00e      	beq.n	800712a <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 800710c:	2807      	cmp	r0, #7
 800710e:	d013      	beq.n	8007138 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 8007110:	2808      	cmp	r0, #8
 8007112:	d018      	beq.n	8007146 <nameCommand+0x72>
}
 8007114:	2000      	movs	r0, #0
 8007116:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <nameCommand+0x88>)
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <nameCommand+0x84>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	490f      	ldr	r1, [pc, #60]	; (8007160 <nameCommand+0x8c>)
 8007122:	0020      	movs	r0, r4
 8007124:	f00d fe42 	bl	8014dac <sprintf>
 8007128:	e7f4      	b.n	8007114 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <nameCommand+0x84>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	490d      	ldr	r1, [pc, #52]	; (8007164 <nameCommand+0x90>)
 8007130:	0020      	movs	r0, r4
 8007132:	f00d fe3b 	bl	8014dac <sprintf>
 8007136:	e7ed      	b.n	8007114 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <nameCommand+0x84>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	490a      	ldr	r1, [pc, #40]	; (8007168 <nameCommand+0x94>)
 800713e:	0020      	movs	r0, r4
 8007140:	f00d fe34 	bl	8014dac <sprintf>
 8007144:	e7e6      	b.n	8007114 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <nameCommand+0x84>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4908      	ldr	r1, [pc, #32]	; (800716c <nameCommand+0x98>)
 800714c:	0020      	movs	r0, r4
 800714e:	f00d fe2d 	bl	8014dac <sprintf>
 8007152:	e7df      	b.n	8007114 <nameCommand+0x40>
 8007154:	20001330 	.word	0x20001330
 8007158:	20001300 	.word	0x20001300
 800715c:	200010ea 	.word	0x200010ea
 8007160:	0801a480 	.word	0x0801a480
 8007164:	0801a280 	.word	0x0801a280
 8007168:	0801a2c0 	.word	0x0801a2c0
 800716c:	0801a2f4 	.word	0x0801a2f4

08007170 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007172:	b085      	sub	sp, #20
 8007174:	1e04      	subs	r4, r0, #0
 8007176:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007178:	d101      	bne.n	800717e <bootloaderUpdateCommand+0xe>
 800717a:	b672      	cpsid	i
 800717c:	e7fe      	b.n	800717c <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800717e:	4a4b      	ldr	r2, [pc, #300]	; (80072ac <bootloaderUpdateCommand+0x13c>)
 8007180:	2101      	movs	r1, #1
 8007182:	9803      	ldr	r0, [sp, #12]
 8007184:	f007 fdf4 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007188:	2800      	cmp	r0, #0
 800718a:	d040      	beq.n	800720e <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 800718c:	4b47      	ldr	r3, [pc, #284]	; (80072ac <bootloaderUpdateCommand+0x13c>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4947      	ldr	r1, [pc, #284]	; (80072b0 <bootloaderUpdateCommand+0x140>)
 8007192:	f00d fe4f 	bl	8014e34 <strncmp>
 8007196:	2800      	cmp	r0, #0
 8007198:	d000      	beq.n	800719c <bootloaderUpdateCommand+0x2c>
 800719a:	e080      	b.n	800729e <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800719c:	4a45      	ldr	r2, [pc, #276]	; (80072b4 <bootloaderUpdateCommand+0x144>)
 800719e:	2102      	movs	r1, #2
 80071a0:	9803      	ldr	r0, [sp, #12]
 80071a2:	f007 fde5 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80071a6:	4f44      	ldr	r7, [pc, #272]	; (80072b8 <bootloaderUpdateCommand+0x148>)
 80071a8:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071aa:	4a44      	ldr	r2, [pc, #272]	; (80072bc <bootloaderUpdateCommand+0x14c>)
 80071ac:	2103      	movs	r1, #3
 80071ae:	9803      	ldr	r0, [sp, #12]
 80071b0:	f007 fdde 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 80071b4:	4b42      	ldr	r3, [pc, #264]	; (80072c0 <bootloaderUpdateCommand+0x150>)
 80071b6:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 80071b8:	6838      	ldr	r0, [r7, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 80071be:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80071c0:	2b23      	cmp	r3, #35	; 0x23
 80071c2:	d04e      	beq.n	8007262 <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 80071c4:	4b3e      	ldr	r3, [pc, #248]	; (80072c0 <bootloaderUpdateCommand+0x150>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	56c3      	ldrsb	r3, [r0, r3]
 80071cc:	2b70      	cmp	r3, #112	; 0x70
 80071ce:	d04e      	beq.n	800726e <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 80071d0:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 80071d2:	4b3c      	ldr	r3, [pc, #240]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	42b3      	cmp	r3, r6
 80071d8:	d04e      	beq.n	8007278 <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071da:	4b3b      	ldr	r3, [pc, #236]	; (80072c8 <bootloaderUpdateCommand+0x158>)
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80071e0:	4b3a      	ldr	r3, [pc, #232]	; (80072cc <bootloaderUpdateCommand+0x15c>)
 80071e2:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071e4:	3201      	adds	r2, #1
 80071e6:	211a      	movs	r1, #26
 80071e8:	0030      	movs	r0, r6
 80071ea:	f002 fcd7 	bl	8009b9c <SendMessageToModule>
				osDelay(100);
 80071ee:	2064      	movs	r0, #100	; 0x64
 80071f0:	f007 fca5 	bl	800eb3e <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80071f4:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <bootloaderUpdateCommand+0x160>)
 80071f6:	781a      	ldrb	r2, [r3, #0]
 80071f8:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 80071fa:	7818      	ldrb	r0, [r3, #0]
 80071fc:	002b      	movs	r3, r5
 80071fe:	0031      	movs	r1, r6
 8007200:	f7fc fcd6 	bl	8003bb0 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007204:	2f68      	cmp	r7, #104	; 0x68
 8007206:	d04a      	beq.n	800729e <bootloaderUpdateCommand+0x12e>
}
 8007208:	2000      	movs	r0, #0
 800720a:	b005      	add	sp, #20
 800720c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 800720e:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	4930      	ldr	r1, [pc, #192]	; (80072d4 <bootloaderUpdateCommand+0x164>)
 8007214:	0020      	movs	r0, r4
 8007216:	f00d fdc9 	bl	8014dac <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 800721a:	4b2f      	ldr	r3, [pc, #188]	; (80072d8 <bootloaderUpdateCommand+0x168>)
 800721c:	6819      	ldr	r1, [r3, #0]
 800721e:	0020      	movs	r0, r4
 8007220:	f00d fde4 	bl	8014dec <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007224:	0020      	movs	r0, r4
 8007226:	f7f8 ff77 	bl	8000118 <strlen>
 800722a:	b282      	uxth	r2, r0
 800722c:	4b28      	ldr	r3, [pc, #160]	; (80072d0 <bootloaderUpdateCommand+0x160>)
 800722e:	7818      	ldrb	r0, [r3, #0]
 8007230:	2301      	movs	r3, #1
 8007232:	425b      	negs	r3, r3
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	3333      	adds	r3, #51	; 0x33
 8007238:	0021      	movs	r1, r4
 800723a:	f007 fb53 	bl	800e8e4 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800723e:	4b27      	ldr	r3, [pc, #156]	; (80072dc <bootloaderUpdateCommand+0x16c>)
 8007240:	4a27      	ldr	r2, [pc, #156]	; (80072e0 <bootloaderUpdateCommand+0x170>)
 8007242:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <bootloaderUpdateCommand+0x174>)
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 800724a:	200a      	movs	r0, #10
 800724c:	f007 fc77 	bl	800eb3e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <bootloaderUpdateCommand+0x178>)
 8007256:	4a25      	ldr	r2, [pc, #148]	; (80072ec <bootloaderUpdateCommand+0x17c>)
 8007258:	60da      	str	r2, [r3, #12]
 800725a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	e7fd      	b.n	800725e <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007262:	3001      	adds	r0, #1
 8007264:	f00d f8e3 	bl	801442e <atol>
 8007268:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 800726a:	2700      	movs	r7, #0
 800726c:	e7aa      	b.n	80071c4 <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800726e:	3001      	adds	r0, #1
 8007270:	f00d f8dd 	bl	801442e <atol>
 8007274:	b2c5      	uxtb	r5, r0
 8007276:	e7ac      	b.n	80071d2 <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007278:	2100      	movs	r1, #0
 800727a:	9100      	str	r1, [sp, #0]
 800727c:	2319      	movs	r3, #25
 800727e:	000a      	movs	r2, r1
 8007280:	0028      	movs	r0, r5
 8007282:	f002 fa05 	bl	8009690 <SendMessageFromPort>
				osDelay(100);
 8007286:	2064      	movs	r0, #100	; 0x64
 8007288:	f007 fc59 	bl	800eb3e <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 800728e:	7818      	ldrb	r0, [r3, #0]
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <bootloaderUpdateCommand+0x160>)
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	002b      	movs	r3, r5
 8007296:	0001      	movs	r1, r0
 8007298:	f7fc fc8a 	bl	8003bb0 <remoteBootloaderUpdate>
 800729c:	e7b2      	b.n	8007204 <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800729e:	220f      	movs	r2, #15
 80072a0:	4913      	ldr	r1, [pc, #76]	; (80072f0 <bootloaderUpdateCommand+0x180>)
 80072a2:	0020      	movs	r0, r4
 80072a4:	f00d fb4d 	bl	8014942 <memcpy>
 80072a8:	e7ae      	b.n	8007208 <bootloaderUpdateCommand+0x98>
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	2000132c 	.word	0x2000132c
 80072b0:	08019f40 	.word	0x08019f40
 80072b4:	20001338 	.word	0x20001338
 80072b8:	20001310 	.word	0x20001310
 80072bc:	2000133c 	.word	0x2000133c
 80072c0:	20001318 	.word	0x20001318
 80072c4:	200010ea 	.word	0x200010ea
 80072c8:	20006dd4 	.word	0x20006dd4
 80072cc:	20000fac 	.word	0x20000fac
 80072d0:	20000ae8 	.word	0x20000ae8
 80072d4:	08019f20 	.word	0x08019f20
 80072d8:	2000009c 	.word	0x2000009c
 80072dc:	20007ff0 	.word	0x20007ff0
 80072e0:	deadbeef 	.word	0xdeadbeef
 80072e4:	20000f68 	.word	0x20000f68
 80072e8:	e000ed00 	.word	0xe000ed00
 80072ec:	05fa0004 	.word	0x05fa0004
 80072f0:	0801a000 	.word	0x0801a000

080072f4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072f4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d01c      	beq.n	8007334 <pingCommand+0x40>
	if(!moduleAlias[myID][0])
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <pingCommand+0x58>)
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	0093      	lsls	r3, r2, #2
 8007300:	189b      	adds	r3, r3, r2
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	4912      	ldr	r1, [pc, #72]	; (8007350 <pingCommand+0x5c>)
 8007306:	5c5b      	ldrb	r3, [r3, r1]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d115      	bne.n	8007338 <pingCommand+0x44>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800730c:	4911      	ldr	r1, [pc, #68]	; (8007354 <pingCommand+0x60>)
 800730e:	f00d fd4d 	bl	8014dac <sprintf>
	RTOS_IND_blink(200);
 8007312:	2490      	movs	r4, #144	; 0x90
 8007314:	05e4      	lsls	r4, r4, #23
 8007316:	2201      	movs	r2, #1
 8007318:	2180      	movs	r1, #128	; 0x80
 800731a:	0020      	movs	r0, r4
 800731c:	f00b f856 	bl	80123cc <HAL_GPIO_WritePin>
 8007320:	20c8      	movs	r0, #200	; 0xc8
 8007322:	f007 fc0c 	bl	800eb3e <osDelay>
 8007326:	2200      	movs	r2, #0
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	0020      	movs	r0, r4
 800732c:	f00b f84e 	bl	80123cc <HAL_GPIO_WritePin>
}
 8007330:	2000      	movs	r0, #0
 8007332:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8007334:	b672      	cpsid	i
 8007336:	e7fe      	b.n	8007336 <pingCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007338:	0093      	lsls	r3, r2, #2
 800733a:	189b      	adds	r3, r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4904      	ldr	r1, [pc, #16]	; (8007350 <pingCommand+0x5c>)
 8007340:	185b      	adds	r3, r3, r1
 8007342:	4905      	ldr	r1, [pc, #20]	; (8007358 <pingCommand+0x64>)
 8007344:	f00d fd32 	bl	8014dac <sprintf>
 8007348:	e7e3      	b.n	8007312 <pingCommand+0x1e>
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	200010ea 	.word	0x200010ea
 8007350:	20000fdc 	.word	0x20000fdc
 8007354:	0801a4f0 	.word	0x0801a4f0
 8007358:	0801a504 	.word	0x0801a504

0800735c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800735c:	b510      	push	{r4, lr}
 800735e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007360:	d101      	bne.n	8007366 <prvRunTimeStatsCommand+0xa>
 8007362:	b672      	cpsid	i
 8007364:	e7fe      	b.n	8007364 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007366:	2241      	movs	r2, #65	; 0x41
 8007368:	4904      	ldr	r1, [pc, #16]	; (800737c <prvRunTimeStatsCommand+0x20>)
 800736a:	f00d faea 	bl	8014942 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800736e:	0020      	movs	r0, r4
 8007370:	3040      	adds	r0, #64	; 0x40
 8007372:	f008 ff51 	bl	8010218 <vTaskGetRunTimeStats>
}
 8007376:	2000      	movs	r0, #0
 8007378:	bd10      	pop	{r4, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	0801a530 	.word	0x0801a530

08007380 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007380:	b510      	push	{r4, lr}
 8007382:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007384:	d101      	bne.n	800738a <prvTaskStatsCommand+0xa>
 8007386:	b672      	cpsid	i
 8007388:	e7fe      	b.n	8007388 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 800738a:	2250      	movs	r2, #80	; 0x50
 800738c:	4904      	ldr	r1, [pc, #16]	; (80073a0 <prvTaskStatsCommand+0x20>)
 800738e:	f00d fad8 	bl	8014942 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007392:	0020      	movs	r0, r4
 8007394:	304f      	adds	r0, #79	; 0x4f
 8007396:	f008 fedf 	bl	8010158 <vTaskList>
}
 800739a:	2000      	movs	r0, #0
 800739c:	bd10      	pop	{r4, pc}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	0801a584 	.word	0x0801a584

080073a4 <resetCommand>:
	configASSERT(pcWriteBuffer);
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d101      	bne.n	80073ac <resetCommand+0x8>
 80073a8:	b672      	cpsid	i
 80073aa:	e7fe      	b.n	80073aa <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <resetCommand+0x1c>)
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <resetCommand+0x20>)
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	e7fd      	b.n	80073ba <resetCommand+0x16>
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	e000ed00 	.word	0xe000ed00
 80073c4:	05fa0004 	.word	0x05fa0004

080073c8 <RegisterUserCLICommands>:
}
 80073c8:	4770      	bx	lr
	...

080073cc <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80073cc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80073ce:	4835      	ldr	r0, [pc, #212]	; (80074a4 <vRegisterCLICommands+0xd8>)
 80073d0:	f007 fc30 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80073d4:	4834      	ldr	r0, [pc, #208]	; (80074a8 <vRegisterCLICommands+0xdc>)
 80073d6:	f007 fc2d 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80073da:	4834      	ldr	r0, [pc, #208]	; (80074ac <vRegisterCLICommands+0xe0>)
 80073dc:	f007 fc2a 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80073e0:	4833      	ldr	r0, [pc, #204]	; (80074b0 <vRegisterCLICommands+0xe4>)
 80073e2:	f007 fc27 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80073e6:	4833      	ldr	r0, [pc, #204]	; (80074b4 <vRegisterCLICommands+0xe8>)
 80073e8:	f007 fc24 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80073ec:	4832      	ldr	r0, [pc, #200]	; (80074b8 <vRegisterCLICommands+0xec>)
 80073ee:	f007 fc21 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80073f2:	4832      	ldr	r0, [pc, #200]	; (80074bc <vRegisterCLICommands+0xf0>)
 80073f4:	f007 fc1e 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80073f8:	4831      	ldr	r0, [pc, #196]	; (80074c0 <vRegisterCLICommands+0xf4>)
 80073fa:	f007 fc1b 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80073fe:	4831      	ldr	r0, [pc, #196]	; (80074c4 <vRegisterCLICommands+0xf8>)
 8007400:	f007 fc18 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007404:	4830      	ldr	r0, [pc, #192]	; (80074c8 <vRegisterCLICommands+0xfc>)
 8007406:	f007 fc15 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800740a:	4830      	ldr	r0, [pc, #192]	; (80074cc <vRegisterCLICommands+0x100>)
 800740c:	f007 fc12 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007410:	482f      	ldr	r0, [pc, #188]	; (80074d0 <vRegisterCLICommands+0x104>)
 8007412:	f007 fc0f 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007416:	482f      	ldr	r0, [pc, #188]	; (80074d4 <vRegisterCLICommands+0x108>)
 8007418:	f007 fc0c 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800741c:	482e      	ldr	r0, [pc, #184]	; (80074d8 <vRegisterCLICommands+0x10c>)
 800741e:	f007 fc09 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007422:	482e      	ldr	r0, [pc, #184]	; (80074dc <vRegisterCLICommands+0x110>)
 8007424:	f007 fc06 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007428:	482d      	ldr	r0, [pc, #180]	; (80074e0 <vRegisterCLICommands+0x114>)
 800742a:	f007 fc03 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800742e:	482d      	ldr	r0, [pc, #180]	; (80074e4 <vRegisterCLICommands+0x118>)
 8007430:	f007 fc00 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007434:	482c      	ldr	r0, [pc, #176]	; (80074e8 <vRegisterCLICommands+0x11c>)
 8007436:	f007 fbfd 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800743a:	482c      	ldr	r0, [pc, #176]	; (80074ec <vRegisterCLICommands+0x120>)
 800743c:	f007 fbfa 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007440:	482b      	ldr	r0, [pc, #172]	; (80074f0 <vRegisterCLICommands+0x124>)
 8007442:	f007 fbf7 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007446:	482b      	ldr	r0, [pc, #172]	; (80074f4 <vRegisterCLICommands+0x128>)
 8007448:	f007 fbf4 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800744c:	482a      	ldr	r0, [pc, #168]	; (80074f8 <vRegisterCLICommands+0x12c>)
 800744e:	f007 fbf1 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007452:	482a      	ldr	r0, [pc, #168]	; (80074fc <vRegisterCLICommands+0x130>)
 8007454:	f007 fbee 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007458:	4829      	ldr	r0, [pc, #164]	; (8007500 <vRegisterCLICommands+0x134>)
 800745a:	f007 fbeb 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800745e:	4829      	ldr	r0, [pc, #164]	; (8007504 <vRegisterCLICommands+0x138>)
 8007460:	f007 fbe8 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007464:	4828      	ldr	r0, [pc, #160]	; (8007508 <vRegisterCLICommands+0x13c>)
 8007466:	f007 fbe5 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800746a:	4828      	ldr	r0, [pc, #160]	; (800750c <vRegisterCLICommands+0x140>)
 800746c:	f007 fbe2 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007470:	4827      	ldr	r0, [pc, #156]	; (8007510 <vRegisterCLICommands+0x144>)
 8007472:	f007 fbdf 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007476:	4827      	ldr	r0, [pc, #156]	; (8007514 <vRegisterCLICommands+0x148>)
 8007478:	f007 fbdc 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800747c:	4826      	ldr	r0, [pc, #152]	; (8007518 <vRegisterCLICommands+0x14c>)
 800747e:	f007 fbd9 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007482:	4826      	ldr	r0, [pc, #152]	; (800751c <vRegisterCLICommands+0x150>)
 8007484:	f007 fbd6 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007488:	4825      	ldr	r0, [pc, #148]	; (8007520 <vRegisterCLICommands+0x154>)
 800748a:	f007 fbd3 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800748e:	4825      	ldr	r0, [pc, #148]	; (8007524 <vRegisterCLICommands+0x158>)
 8007490:	f007 fbd0 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <vRegisterCLICommands+0x15c>)
 8007496:	2223      	movs	r2, #35	; 0x23
 8007498:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800749a:	f004 fbc3 	bl	800bc24 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800749e:	f7ff ff93 	bl	80073c8 <RegisterUserCLICommands>
}
 80074a2:	bd10      	pop	{r4, pc}
 80074a4:	0801a5d4 	.word	0x0801a5d4
 80074a8:	0801a574 	.word	0x0801a574
 80074ac:	0801a520 	.word	0x0801a520
 80074b0:	08019f44 	.word	0x08019f44
 80074b4:	0801a0cc 	.word	0x0801a0cc
 80074b8:	0801a61c 	.word	0x0801a61c
 80074bc:	0801a498 	.word	0x0801a498
 80074c0:	0801a358 	.word	0x0801a358
 80074c4:	0801aacc 	.word	0x0801aacc
 80074c8:	0801a45c 	.word	0x0801a45c
 80074cc:	0801a6d8 	.word	0x0801a6d8
 80074d0:	08019f10 	.word	0x08019f10
 80074d4:	0801a60c 	.word	0x0801a60c
 80074d8:	0801a92c 	.word	0x0801a92c
 80074dc:	0801a1f8 	.word	0x0801a1f8
 80074e0:	0801a050 	.word	0x0801a050
 80074e4:	0801baec 	.word	0x0801baec
 80074e8:	08019fb8 	.word	0x08019fb8
 80074ec:	0801a724 	.word	0x0801a724
 80074f0:	0801bb60 	.word	0x0801bb60
 80074f4:	0801a3d8 	.word	0x0801a3d8
 80074f8:	0801a0fc 	.word	0x0801a0fc
 80074fc:	0801aabc 	.word	0x0801aabc
 8007500:	08019e94 	.word	0x08019e94
 8007504:	0801a4e0 	.word	0x0801a4e0
 8007508:	0801a0bc 	.word	0x0801a0bc
 800750c:	08019f90 	.word	0x08019f90
 8007510:	0801bb38 	.word	0x0801bb38
 8007514:	0801ba80 	.word	0x0801ba80
 8007518:	08019d94 	.word	0x08019d94
 800751c:	08019e14 	.word	0x08019e14
 8007520:	08019e4c 	.word	0x08019e4c
 8007524:	08019da4 	.word	0x08019da4
 8007528:	20006dd0 	.word	0x20006dd0

0800752c <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 800752c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800752e:	1e45      	subs	r5, r0, #1
 8007530:	00ec      	lsls	r4, r5, #3
 8007532:	1b60      	subs	r0, r4, r5
 8007534:	00c0      	lsls	r0, r0, #3
 8007536:	4e05      	ldr	r6, [pc, #20]	; (800754c <StopMsgDMA+0x20>)
 8007538:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800753a:	f00a f806 	bl	801154a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800753e:	1b64      	subs	r4, r4, r5
 8007540:	00e4      	lsls	r4, r4, #3
 8007542:	59a3      	ldr	r3, [r4, r6]
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]
}
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	20001c24 	.word	0x20001c24

08007550 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 8007550:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 8007552:	1e44      	subs	r4, r0, #1
 8007554:	00e5      	lsls	r5, r4, #3
 8007556:	1b28      	subs	r0, r5, r4
 8007558:	00c0      	lsls	r0, r0, #3
 800755a:	4e07      	ldr	r6, [pc, #28]	; (8007578 <StopStreamDMA+0x28>)
 800755c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800755e:	f009 fff4 	bl	801154a <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007562:	1b2d      	subs	r5, r5, r4
 8007564:	00ed      	lsls	r5, r5, #3
 8007566:	59aa      	ldr	r2, [r5, r6]
 8007568:	2300      	movs	r3, #0
 800756a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 800756c:	00a4      	lsls	r4, r4, #2
 800756e:	4a03      	ldr	r2, [pc, #12]	; (800757c <StopStreamDMA+0x2c>)
 8007570:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 8007572:	4a03      	ldr	r2, [pc, #12]	; (8007580 <StopStreamDMA+0x30>)
 8007574:	50a3      	str	r3, [r4, r2]
	
}
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	20001e1c 	.word	0x20001e1c
 800757c:	20001808 	.word	0x20001808
 8007580:	20001838 	.word	0x20001838

08007584 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007584:	b510      	push	{r4, lr}
 8007586:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007588:	f7ff ffd0 	bl	800752c <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 800758c:	3c01      	subs	r4, #1
 800758e:	00e0      	lsls	r0, r4, #3
 8007590:	1b02      	subs	r2, r0, r4
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	4903      	ldr	r1, [pc, #12]	; (80075a4 <SwitchMsgDMAToStream+0x20>)
 8007596:	5851      	ldr	r1, [r2, r1]
 8007598:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <SwitchMsgDMAToStream+0x24>)
 800759a:	18d0      	adds	r0, r2, r3
 800759c:	f005 faec 	bl	800cb78 <DMA_STREAM_CH_Init>
}
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	20001c24 	.word	0x20001c24
 80075a8:	20001e1c 	.word	0x20001e1c

080075ac <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 80075ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ae:	b083      	sub	sp, #12
 80075b0:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80075b2:	f7ff ffcd 	bl	8007550 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 80075b6:	9401      	str	r4, [sp, #4]
 80075b8:	3c01      	subs	r4, #1
 80075ba:	00e7      	lsls	r7, r4, #3
 80075bc:	1b3d      	subs	r5, r7, r4
 80075be:	00ed      	lsls	r5, r5, #3
 80075c0:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <SwitchStreamDMAToMsg+0x54>)
 80075c2:	18ed      	adds	r5, r5, r3
 80075c4:	4e0f      	ldr	r6, [pc, #60]	; (8007604 <SwitchStreamDMAToMsg+0x58>)
 80075c6:	1b3b      	subs	r3, r7, r4
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	5999      	ldr	r1, [r3, r6]
 80075cc:	0028      	movs	r0, r5
 80075ce:	f005 fa55 	bl	800ca7c <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 80075d2:	1b3b      	subs	r3, r7, r4
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	18f3      	adds	r3, r6, r3
 80075d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80075da:	f005 fa1f 	bl	800ca1c <GetPort>
 80075de:	2300      	movs	r3, #0
 80075e0:	4a09      	ldr	r2, [pc, #36]	; (8007608 <SwitchStreamDMAToMsg+0x5c>)
 80075e2:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 80075e4:	1b3f      	subs	r7, r7, r4
 80075e6:	00ff      	lsls	r7, r7, #3
 80075e8:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 80075ea:	00a4      	lsls	r4, r4, #2
 80075ec:	4a07      	ldr	r2, [pc, #28]	; (800760c <SwitchStreamDMAToMsg+0x60>)
 80075ee:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 80075f0:	9801      	ldr	r0, [sp, #4]
 80075f2:	f007 f955 	bl	800e8a0 <GetUart>
 80075f6:	0029      	movs	r1, r5
 80075f8:	f005 feb2 	bl	800d360 <DMA_MSG_RX_Setup>
	
}
 80075fc:	b003      	add	sp, #12
 80075fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007600:	20001c24 	.word	0x20001c24
 8007604:	20001e1c 	.word	0x20001e1c
 8007608:	2000116c 	.word	0x2000116c
 800760c:	20001820 	.word	0x20001820

08007610 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	0005      	movs	r5, r0
 8007614:	000e      	movs	r6, r1
 8007616:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007618:	f005 fa00 	bl	800ca1c <GetPort>
 800761c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <StartDMAstream+0x44>)
 8007620:	5c1b      	ldrb	r3, [r3, r0]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d902      	bls.n	800762c <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007626:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007628:	2b03      	cmp	r3, #3
 800762a:	d112      	bne.n	8007652 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800762c:	0020      	movs	r0, r4
 800762e:	f7ff ffa9 	bl	8007584 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007632:	1e63      	subs	r3, r4, #1
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4a08      	ldr	r2, [pc, #32]	; (8007658 <StartDMAstream+0x48>)
 8007638:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800763a:	4a06      	ldr	r2, [pc, #24]	; (8007654 <StartDMAstream+0x44>)
 800763c:	2102      	movs	r1, #2
 800763e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007640:	4a06      	ldr	r2, [pc, #24]	; (800765c <StartDMAstream+0x4c>)
 8007642:	2100      	movs	r1, #0
 8007644:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007646:	003a      	movs	r2, r7
 8007648:	0031      	movs	r1, r6
 800764a:	0028      	movs	r0, r5
 800764c:	f005 fef4 	bl	800d438 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007650:	2000      	movs	r0, #0
}
 8007652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007654:	2000116c 	.word	0x2000116c
 8007658:	20001820 	.word	0x20001820
 800765c:	20001808 	.word	0x20001808

08007660 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007664:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <DMA_IRQHandler+0x50>)
 8007666:	5c1b      	ldrb	r3, [r3, r0]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d008      	beq.n	800767e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 800766c:	3c01      	subs	r4, #1
 800766e:	00e0      	lsls	r0, r4, #3
 8007670:	1b00      	subs	r0, r0, r4
 8007672:	00c0      	lsls	r0, r0, #3
 8007674:	4c0f      	ldr	r4, [pc, #60]	; (80076b4 <DMA_IRQHandler+0x54>)
 8007676:	1900      	adds	r0, r0, r4
 8007678:	f009 ff90 	bl	801159c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 800767c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800767e:	1e45      	subs	r5, r0, #1
 8007680:	00e8      	lsls	r0, r5, #3
 8007682:	1b40      	subs	r0, r0, r5
 8007684:	00c0      	lsls	r0, r0, #3
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <DMA_IRQHandler+0x58>)
 8007688:	18c0      	adds	r0, r0, r3
 800768a:	f009 ff87 	bl	801159c <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800768e:	00aa      	lsls	r2, r5, #2
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <DMA_IRQHandler+0x5c>)
 8007692:	58d2      	ldr	r2, [r2, r3]
 8007694:	2a00      	cmp	r2, #0
 8007696:	d006      	beq.n	80076a6 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007698:	4909      	ldr	r1, [pc, #36]	; (80076c0 <DMA_IRQHandler+0x60>)
 800769a:	00ad      	lsls	r5, r5, #2
 800769c:	586b      	ldr	r3, [r5, r1]
 800769e:	3301      	adds	r3, #1
 80076a0:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d8ea      	bhi.n	800767c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80076a6:	0020      	movs	r0, r4
 80076a8:	f7ff ff52 	bl	8007550 <StopStreamDMA>
}
 80076ac:	e7e6      	b.n	800767c <DMA_IRQHandler+0x1c>
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	2000116c 	.word	0x2000116c
 80076b4:	20001c24 	.word	0x20001c24
 80076b8:	20001e1c 	.word	0x20001e1c
 80076bc:	20001838 	.word	0x20001838
 80076c0:	20001808 	.word	0x20001808

080076c4 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <ResetUartORE+0x24>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	2308      	movs	r3, #8
 80076ca:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80076cc:	4a07      	ldr	r2, [pc, #28]	; (80076ec <ResetUartORE+0x28>)
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80076d2:	4a07      	ldr	r2, [pc, #28]	; (80076f0 <ResetUartORE+0x2c>)
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80076d8:	4a06      	ldr	r2, [pc, #24]	; (80076f4 <ResetUartORE+0x30>)
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80076de:	4a06      	ldr	r2, [pc, #24]	; (80076f8 <ResetUartORE+0x34>)
 80076e0:	6812      	ldr	r2, [r2, #0]
 80076e2:	6213      	str	r3, [r2, #32]
#endif
}
 80076e4:	4770      	bx	lr
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	2000707c 	.word	0x2000707c
 80076ec:	200071e4 	.word	0x200071e4
 80076f0:	20006f8c 	.word	0x20006f8c
 80076f4:	20007004 	.word	0x20007004
 80076f8:	200070f4 	.word	0x200070f4

080076fc <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	0006      	movs	r6, r0
 8007700:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007702:	f00a fbbb 	bl	8011e7c <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007706:	4b2b      	ldr	r3, [pc, #172]	; (80077b4 <EE_VerifyPageFullWriteVariable+0xb8>)
 8007708:	881a      	ldrh	r2, [r3, #0]
 800770a:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800770c:	4b2a      	ldr	r3, [pc, #168]	; (80077b8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 8007716:	4929      	ldr	r1, [pc, #164]	; (80077bc <EE_VerifyPageFullWriteVariable+0xc0>)
 8007718:	428a      	cmp	r2, r1
 800771a:	d007      	beq.n	800772c <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 800771c:	3302      	adds	r3, #2
 800771e:	e005      	b.n	800772c <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 8007720:	2a00      	cmp	r2, #0
 8007722:	d143      	bne.n	80077ac <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 8007724:	4925      	ldr	r1, [pc, #148]	; (80077bc <EE_VerifyPageFullWriteVariable+0xc0>)
 8007726:	428b      	cmp	r3, r1
 8007728:	d042      	beq.n	80077b0 <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 800772a:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800772c:	4a24      	ldr	r2, [pc, #144]	; (80077c0 <EE_VerifyPageFullWriteVariable+0xc4>)
 800772e:	189c      	adds	r4, r3, r2
 8007730:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007732:	02db      	lsls	r3, r3, #11
 8007734:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007736:	4694      	mov	ip, r2
 8007738:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	3201      	adds	r2, #1
 800773e:	d005      	beq.n	800774c <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 8007740:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 8007742:	429c      	cmp	r4, r3
 8007744:	d22e      	bcs.n	80077a4 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	3201      	adds	r2, #1
 800774a:	d1f9      	bne.n	8007740 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800774c:	002a      	movs	r2, r5
 800774e:	2300      	movs	r3, #0
 8007750:	0021      	movs	r1, r4
 8007752:	2001      	movs	r0, #1
 8007754:	f00a fbdc 	bl	8011f10 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007758:	481b      	ldr	r0, [pc, #108]	; (80077c8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800775a:	f00a fbab 	bl	8011eb4 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800775e:	2800      	cmp	r0, #0
 8007760:	d003      	beq.n	800776a <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 8007762:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <EE_VerifyPageFullWriteVariable+0xd0>)
 8007764:	69d8      	ldr	r0, [r3, #28]
 8007766:	b280      	uxth	r0, r0
 8007768:	e01f      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800776a:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800776c:	6913      	ldr	r3, [r2, #16]
 800776e:	2101      	movs	r1, #1
 8007770:	438b      	bics	r3, r1
 8007772:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007774:	1ca1      	adds	r1, r4, #2
 8007776:	0032      	movs	r2, r6
 8007778:	2300      	movs	r3, #0
 800777a:	2001      	movs	r0, #1
 800777c:	f00a fbc8 	bl	8011f10 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007780:	4811      	ldr	r0, [pc, #68]	; (80077c8 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007782:	f00a fb97 	bl	8011eb4 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007786:	2800      	cmp	r0, #0
 8007788:	d003      	beq.n	8007792 <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <EE_VerifyPageFullWriteVariable+0xd0>)
 800778c:	69d8      	ldr	r0, [r3, #28]
 800778e:	b280      	uxth	r0, r0
 8007790:	e00b      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007792:	4a0f      	ldr	r2, [pc, #60]	; (80077d0 <EE_VerifyPageFullWriteVariable+0xd4>)
 8007794:	6913      	ldr	r3, [r2, #16]
 8007796:	2101      	movs	r1, #1
 8007798:	438b      	bics	r3, r1
 800779a:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <EE_VerifyPageFullWriteVariable+0xd0>)
 800779e:	69d8      	ldr	r0, [r3, #28]
 80077a0:	b280      	uxth	r0, r0
 80077a2:	e002      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 80077a4:	f00a fb7c 	bl	8011ea0 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80077a8:	2080      	movs	r0, #128	; 0x80
}
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 80077ac:	20ab      	movs	r0, #171	; 0xab
 80077ae:	e7fc      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 80077b0:	2302      	movs	r3, #2
 80077b2:	e7bb      	b.n	800772c <EE_VerifyPageFullWriteVariable+0x30>
 80077b4:	0801e000 	.word	0x0801e000
 80077b8:	0801f000 	.word	0x0801f000
 80077bc:	0000eeee 	.word	0x0000eeee
 80077c0:	0001003c 	.word	0x0001003c
 80077c4:	0801effe 	.word	0x0801effe
 80077c8:	0000c350 	.word	0x0000c350
 80077cc:	200073d0 	.word	0x200073d0
 80077d0:	40022000 	.word	0x40022000

080077d4 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 80077d4:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <EE_ReadVariable+0x50>)
 80077d8:	881c      	ldrh	r4, [r3, #0]
 80077da:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80077dc:	4b12      	ldr	r3, [pc, #72]	; (8007828 <EE_ReadVariable+0x54>)
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 80077e2:	2c00      	cmp	r4, #0
 80077e4:	d006      	beq.n	80077f4 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 80077ea:	20ab      	movs	r0, #171	; 0xab
 80077ec:	e019      	b.n	8007822 <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 80077ee:	2001      	movs	r0, #1
 80077f0:	e017      	b.n	8007822 <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 80077f2:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80077f4:	02e3      	lsls	r3, r4, #11
 80077f6:	4a0d      	ldr	r2, [pc, #52]	; (800782c <EE_ReadVariable+0x58>)
 80077f8:	4694      	mov	ip, r2
 80077fa:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80077fc:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 80077fe:	4a0c      	ldr	r2, [pc, #48]	; (8007830 <EE_ReadVariable+0x5c>)
 8007800:	4694      	mov	ip, r2
 8007802:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 8007808:	4290      	cmp	r0, r2
 800780a:	d006      	beq.n	800781a <EE_ReadVariable+0x46>
			Address =Address - 4;
 800780c:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800780e:	42a3      	cmp	r3, r4
 8007810:	d9ed      	bls.n	80077ee <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 8007812:	881a      	ldrh	r2, [r3, #0]
 8007814:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 8007816:	4282      	cmp	r2, r0
 8007818:	d1f8      	bne.n	800780c <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800781a:	3b02      	subs	r3, #2
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 8007820:	2000      	movs	r0, #0
}
 8007822:	bd10      	pop	{r4, pc}
 8007824:	0801e000 	.word	0x0801e000
 8007828:	0801f000 	.word	0x0801f000
 800782c:	0801effe 	.word	0x0801effe
 8007830:	0801e002 	.word	0x0801e002

08007834 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007836:	46de      	mov	lr, fp
 8007838:	4647      	mov	r7, r8
 800783a:	b580      	push	{r7, lr}
 800783c:	b083      	sub	sp, #12
 800783e:	0005      	movs	r5, r0
 8007840:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007842:	f00a fb1b 	bl	8011e7c <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007846:	0031      	movs	r1, r6
 8007848:	0028      	movs	r0, r5
 800784a:	f7ff ff57 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 800784e:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8007850:	2880      	cmp	r0, #128	; 0x80
 8007852:	d007      	beq.n	8007864 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007854:	f00a fb24 	bl	8011ea0 <HAL_FLASH_Lock>
}
 8007858:	0020      	movs	r0, r4
 800785a:	b003      	add	sp, #12
 800785c:	bc0c      	pop	{r2, r3}
 800785e:	4690      	mov	r8, r2
 8007860:	469b      	mov	fp, r3
 8007862:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007864:	f00a fb0a 	bl	8011e7c <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007868:	4b3e      	ldr	r3, [pc, #248]	; (8007964 <EE_WriteVariable+0x130>)
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800786e:	4a3e      	ldr	r2, [pc, #248]	; (8007968 <EE_WriteVariable+0x134>)
 8007870:	8812      	ldrh	r2, [r2, #0]
 8007872:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007878:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800787a:	2a00      	cmp	r2, #0
 800787c:	d1ea      	bne.n	8007854 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800787e:	4b3a      	ldr	r3, [pc, #232]	; (8007968 <EE_WriteVariable+0x134>)
 8007880:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007882:	4b38      	ldr	r3, [pc, #224]	; (8007964 <EE_WriteVariable+0x130>)
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	e003      	b.n	8007890 <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007888:	4b36      	ldr	r3, [pc, #216]	; (8007964 <EE_WriteVariable+0x130>)
 800788a:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800788c:	4b36      	ldr	r3, [pc, #216]	; (8007968 <EE_WriteVariable+0x134>)
 800788e:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007890:	4a36      	ldr	r2, [pc, #216]	; (800796c <EE_WriteVariable+0x138>)
 8007892:	2300      	movs	r3, #0
 8007894:	9901      	ldr	r1, [sp, #4]
 8007896:	2001      	movs	r0, #1
 8007898:	f00a fb3a 	bl	8011f10 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800789c:	4834      	ldr	r0, [pc, #208]	; (8007970 <EE_WriteVariable+0x13c>)
 800789e:	f00a fb09 	bl	8011eb4 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d003      	beq.n	80078ae <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 80078a6:	4b33      	ldr	r3, [pc, #204]	; (8007974 <EE_WriteVariable+0x140>)
 80078a8:	69dc      	ldr	r4, [r3, #28]
 80078aa:	b2a4      	uxth	r4, r4
 80078ac:	e7d2      	b.n	8007854 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80078ae:	4a32      	ldr	r2, [pc, #200]	; (8007978 <EE_WriteVariable+0x144>)
 80078b0:	6913      	ldr	r3, [r2, #16]
 80078b2:	2101      	movs	r1, #1
 80078b4:	438b      	bics	r3, r1
 80078b6:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80078b8:	0031      	movs	r1, r6
 80078ba:	0028      	movs	r0, r5
 80078bc:	f7ff ff1e 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 80078c0:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 80078c2:	d1c7      	bne.n	8007854 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80078c4:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 80078c6:	4b2d      	ldr	r3, [pc, #180]	; (800797c <EE_WriteVariable+0x148>)
 80078c8:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80078ca:	4e2d      	ldr	r6, [pc, #180]	; (8007980 <EE_WriteVariable+0x14c>)
 80078cc:	e003      	b.n	80078d6 <EE_WriteVariable+0xa2>
 80078ce:	3701      	adds	r7, #1
 80078d0:	b2bf      	uxth	r7, r7
 80078d2:	42b7      	cmp	r7, r6
 80078d4:	d00f      	beq.n	80078f6 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 80078d6:	42bd      	cmp	r5, r7
 80078d8:	d0f9      	beq.n	80078ce <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 80078da:	4928      	ldr	r1, [pc, #160]	; (800797c <EE_WriteVariable+0x148>)
 80078dc:	0038      	movs	r0, r7
 80078de:	f7ff ff79 	bl	80077d4 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 80078e2:	2801      	cmp	r0, #1
 80078e4:	d0f3      	beq.n	80078ce <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 80078e6:	4643      	mov	r3, r8
 80078e8:	8819      	ldrh	r1, [r3, #0]
 80078ea:	0038      	movs	r0, r7
 80078ec:	f7ff ff06 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 80078f0:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 80078f2:	d0ec      	beq.n	80078ce <EE_WriteVariable+0x9a>
 80078f4:	e7ae      	b.n	8007854 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 80078f6:	4658      	mov	r0, fp
 80078f8:	f00a fb82 	bl	8012000 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078fc:	481c      	ldr	r0, [pc, #112]	; (8007970 <EE_WriteVariable+0x13c>)
 80078fe:	f00a fad9 	bl	8011eb4 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007902:	2800      	cmp	r0, #0
 8007904:	d003      	beq.n	800790e <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 8007906:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <EE_WriteVariable+0x140>)
 8007908:	69dc      	ldr	r4, [r3, #28]
 800790a:	b2a4      	uxth	r4, r4
 800790c:	e7a2      	b.n	8007854 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800790e:	2080      	movs	r0, #128	; 0x80
 8007910:	0100      	lsls	r0, r0, #4
 8007912:	4458      	add	r0, fp
 8007914:	f00a fb74 	bl	8012000 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007918:	4815      	ldr	r0, [pc, #84]	; (8007970 <EE_WriteVariable+0x13c>)
 800791a:	f00a facb 	bl	8011eb4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800791e:	2800      	cmp	r0, #0
 8007920:	d003      	beq.n	800792a <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <EE_WriteVariable+0x140>)
 8007924:	69dc      	ldr	r4, [r3, #28]
 8007926:	b2a4      	uxth	r4, r4
 8007928:	e794      	b.n	8007854 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <EE_WriteVariable+0x144>)
 800792c:	6913      	ldr	r3, [r2, #16]
 800792e:	2102      	movs	r1, #2
 8007930:	438b      	bics	r3, r1
 8007932:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007934:	2200      	movs	r2, #0
 8007936:	2300      	movs	r3, #0
 8007938:	9901      	ldr	r1, [sp, #4]
 800793a:	2001      	movs	r0, #1
 800793c:	f00a fae8 	bl	8011f10 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007940:	480b      	ldr	r0, [pc, #44]	; (8007970 <EE_WriteVariable+0x13c>)
 8007942:	f00a fab7 	bl	8011eb4 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007946:	2800      	cmp	r0, #0
 8007948:	d003      	beq.n	8007952 <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <EE_WriteVariable+0x140>)
 800794c:	69dc      	ldr	r4, [r3, #28]
 800794e:	b2a4      	uxth	r4, r4
 8007950:	e780      	b.n	8007854 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <EE_WriteVariable+0x144>)
 8007954:	6913      	ldr	r3, [r2, #16]
 8007956:	2101      	movs	r1, #1
 8007958:	438b      	bics	r3, r1
 800795a:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 800795c:	f00a faa0 	bl	8011ea0 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 8007960:	2400      	movs	r4, #0
 8007962:	e777      	b.n	8007854 <EE_WriteVariable+0x20>
 8007964:	0801e000 	.word	0x0801e000
 8007968:	0801f000 	.word	0x0801f000
 800796c:	0000eeee 	.word	0x0000eeee
 8007970:	0000c350 	.word	0x0000c350
 8007974:	200073d0 	.word	0x200073d0
 8007978:	40022000 	.word	0x40022000
 800797c:	20001850 	.word	0x20001850
 8007980:	00000401 	.word	0x00000401

08007984 <EE_Format>:
uint16_t EE_Format(void){
 8007984:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007986:	f00a fa79 	bl	8011e7c <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800798a:	4829      	ldr	r0, [pc, #164]	; (8007a30 <EE_Format+0xac>)
 800798c:	f00a fb38 	bl	8012000 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007990:	4828      	ldr	r0, [pc, #160]	; (8007a34 <EE_Format+0xb0>)
 8007992:	f00a fa8f 	bl	8011eb4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007996:	2800      	cmp	r0, #0
 8007998:	d003      	beq.n	80079a2 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800799a:	4b27      	ldr	r3, [pc, #156]	; (8007a38 <EE_Format+0xb4>)
 800799c:	69d8      	ldr	r0, [r3, #28]
 800799e:	b280      	uxth	r0, r0
}
 80079a0:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80079a2:	4826      	ldr	r0, [pc, #152]	; (8007a3c <EE_Format+0xb8>)
 80079a4:	f00a fb2c 	bl	8012000 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079a8:	4822      	ldr	r0, [pc, #136]	; (8007a34 <EE_Format+0xb0>)
 80079aa:	f00a fa83 	bl	8011eb4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d003      	beq.n	80079ba <EE_Format+0x36>
			return pFlash.ErrorCode;
 80079b2:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <EE_Format+0xb4>)
 80079b4:	69d8      	ldr	r0, [r3, #28]
 80079b6:	b280      	uxth	r0, r0
 80079b8:	e7f2      	b.n	80079a0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079ba:	4a21      	ldr	r2, [pc, #132]	; (8007a40 <EE_Format+0xbc>)
 80079bc:	6913      	ldr	r3, [r2, #16]
 80079be:	2102      	movs	r1, #2
 80079c0:	438b      	bics	r3, r1
 80079c2:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	4919      	ldr	r1, [pc, #100]	; (8007a30 <EE_Format+0xac>)
 80079ca:	2001      	movs	r0, #1
 80079cc:	f00a faa0 	bl	8011f10 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079d0:	4818      	ldr	r0, [pc, #96]	; (8007a34 <EE_Format+0xb0>)
 80079d2:	f00a fa6f 	bl	8011eb4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d003      	beq.n	80079e2 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 80079da:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <EE_Format+0xb4>)
 80079dc:	69d8      	ldr	r0, [r3, #28]
 80079de:	b280      	uxth	r0, r0
 80079e0:	e7de      	b.n	80079a0 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079e2:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <EE_Format+0xbc>)
 80079e4:	6913      	ldr	r3, [r2, #16]
 80079e6:	2101      	movs	r1, #1
 80079e8:	438b      	bics	r3, r1
 80079ea:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80079ec:	4815      	ldr	r0, [pc, #84]	; (8007a44 <EE_Format+0xc0>)
 80079ee:	f00a fb07 	bl	8012000 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079f2:	4810      	ldr	r0, [pc, #64]	; (8007a34 <EE_Format+0xb0>)
 80079f4:	f00a fa5e 	bl	8011eb4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d003      	beq.n	8007a04 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <EE_Format+0xb4>)
 80079fe:	69d8      	ldr	r0, [r3, #28]
 8007a00:	b280      	uxth	r0, r0
 8007a02:	e7cd      	b.n	80079a0 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a04:	4810      	ldr	r0, [pc, #64]	; (8007a48 <EE_Format+0xc4>)
 8007a06:	f00a fafb 	bl	8012000 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a0a:	480a      	ldr	r0, [pc, #40]	; (8007a34 <EE_Format+0xb0>)
 8007a0c:	f00a fa52 	bl	8011eb4 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d003      	beq.n	8007a1c <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007a14:	4b08      	ldr	r3, [pc, #32]	; (8007a38 <EE_Format+0xb4>)
 8007a16:	69d8      	ldr	r0, [r3, #28]
 8007a18:	b280      	uxth	r0, r0
 8007a1a:	e7c1      	b.n	80079a0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a1c:	4a08      	ldr	r2, [pc, #32]	; (8007a40 <EE_Format+0xbc>)
 8007a1e:	6913      	ldr	r3, [r2, #16]
 8007a20:	2101      	movs	r1, #1
 8007a22:	438b      	bics	r3, r1
 8007a24:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007a26:	f00a fa3b 	bl	8011ea0 <HAL_FLASH_Lock>
	return FlashStatus;
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e7b8      	b.n	80079a0 <EE_Format+0x1c>
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	0801e000 	.word	0x0801e000
 8007a34:	0000c350 	.word	0x0000c350
 8007a38:	200073d0 	.word	0x200073d0
 8007a3c:	0801e800 	.word	0x0801e800
 8007a40:	40022000 	.word	0x40022000
 8007a44:	0801f000 	.word	0x0801f000
 8007a48:	0801f800 	.word	0x0801f800

08007a4c <EE_Init>:
uint16_t EE_Init(void){
 8007a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a4e:	46c6      	mov	lr, r8
 8007a50:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 8007a52:	f00a fa13 	bl	8011e7c <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a56:	4bbe      	ldr	r3, [pc, #760]	; (8007d50 <EE_Init+0x304>)
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a5c:	4abd      	ldr	r2, [pc, #756]	; (8007d54 <EE_Init+0x308>)
 8007a5e:	8812      	ldrh	r2, [r2, #0]
 8007a60:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a62:	49bd      	ldr	r1, [pc, #756]	; (8007d58 <EE_Init+0x30c>)
 8007a64:	428b      	cmp	r3, r1
 8007a66:	d100      	bne.n	8007a6a <EE_Init+0x1e>
 8007a68:	e074      	b.n	8007b54 <EE_Init+0x108>
 8007a6a:	49bc      	ldr	r1, [pc, #752]	; (8007d5c <EE_Init+0x310>)
 8007a6c:	428b      	cmp	r3, r1
 8007a6e:	d011      	beq.n	8007a94 <EE_Init+0x48>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d100      	bne.n	8007a76 <EE_Init+0x2a>
 8007a74:	e109      	b.n	8007c8a <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007a76:	f7ff ff85 	bl	8007984 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a7a:	48b9      	ldr	r0, [pc, #740]	; (8007d60 <EE_Init+0x314>)
 8007a7c:	f00a fa1a 	bl	8011eb4 <FLASH_WaitForLastOperation>
 8007a80:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d102      	bne.n	8007a8c <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007a86:	f00a fa0b 	bl	8011ea0 <HAL_FLASH_Lock>
	return HAL_OK;
 8007a8a:	2600      	movs	r6, #0
}
 8007a8c:	0030      	movs	r0, r6
 8007a8e:	bc04      	pop	{r2}
 8007a90:	4690      	mov	r8, r2
 8007a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	d00d      	beq.n	8007ab4 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007a98:	4baf      	ldr	r3, [pc, #700]	; (8007d58 <EE_Init+0x30c>)
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d028      	beq.n	8007af0 <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007a9e:	f7ff ff71 	bl	8007984 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aa2:	48af      	ldr	r0, [pc, #700]	; (8007d60 <EE_Init+0x314>)
 8007aa4:	f00a fa06 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d0ec      	beq.n	8007a86 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007aac:	4bad      	ldr	r3, [pc, #692]	; (8007d64 <EE_Init+0x318>)
 8007aae:	69de      	ldr	r6, [r3, #28]
 8007ab0:	b2b6      	uxth	r6, r6
 8007ab2:	e7eb      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007ab4:	48a6      	ldr	r0, [pc, #664]	; (8007d50 <EE_Init+0x304>)
 8007ab6:	f00a faa3 	bl	8012000 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aba:	48a9      	ldr	r0, [pc, #676]	; (8007d60 <EE_Init+0x314>)
 8007abc:	f00a f9fa 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d003      	beq.n	8007acc <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007ac4:	4ba7      	ldr	r3, [pc, #668]	; (8007d64 <EE_Init+0x318>)
 8007ac6:	69de      	ldr	r6, [r3, #28]
 8007ac8:	b2b6      	uxth	r6, r6
 8007aca:	e7df      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007acc:	48a6      	ldr	r0, [pc, #664]	; (8007d68 <EE_Init+0x31c>)
 8007ace:	f00a fa97 	bl	8012000 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ad2:	48a3      	ldr	r0, [pc, #652]	; (8007d60 <EE_Init+0x314>)
 8007ad4:	f00a f9ee 	bl	8011eb4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d105      	bne.n	8007ae8 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007adc:	4aa3      	ldr	r2, [pc, #652]	; (8007d6c <EE_Init+0x320>)
 8007ade:	6913      	ldr	r3, [r2, #16]
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	438b      	bics	r3, r1
 8007ae4:	6113      	str	r3, [r2, #16]
 8007ae6:	e7ce      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007ae8:	4b9e      	ldr	r3, [pc, #632]	; (8007d64 <EE_Init+0x318>)
 8007aea:	69de      	ldr	r6, [r3, #28]
 8007aec:	b2b6      	uxth	r6, r6
 8007aee:	e7cd      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007af0:	4897      	ldr	r0, [pc, #604]	; (8007d50 <EE_Init+0x304>)
 8007af2:	f00a fa85 	bl	8012000 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007af6:	489a      	ldr	r0, [pc, #616]	; (8007d60 <EE_Init+0x314>)
 8007af8:	f00a f9dc 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d003      	beq.n	8007b08 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007b00:	4b98      	ldr	r3, [pc, #608]	; (8007d64 <EE_Init+0x318>)
 8007b02:	69de      	ldr	r6, [r3, #28]
 8007b04:	b2b6      	uxth	r6, r6
 8007b06:	e7c1      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b08:	4897      	ldr	r0, [pc, #604]	; (8007d68 <EE_Init+0x31c>)
 8007b0a:	f00a fa79 	bl	8012000 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b0e:	4894      	ldr	r0, [pc, #592]	; (8007d60 <EE_Init+0x314>)
 8007b10:	f00a f9d0 	bl	8011eb4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d003      	beq.n	8007b20 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007b18:	4b92      	ldr	r3, [pc, #584]	; (8007d64 <EE_Init+0x318>)
 8007b1a:	69de      	ldr	r6, [r3, #28]
 8007b1c:	b2b6      	uxth	r6, r6
 8007b1e:	e7b5      	b.n	8007a8c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b20:	4a92      	ldr	r2, [pc, #584]	; (8007d6c <EE_Init+0x320>)
 8007b22:	6913      	ldr	r3, [r2, #16]
 8007b24:	2102      	movs	r1, #2
 8007b26:	438b      	bics	r3, r1
 8007b28:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4989      	ldr	r1, [pc, #548]	; (8007d54 <EE_Init+0x308>)
 8007b30:	2001      	movs	r0, #1
 8007b32:	f00a f9ed 	bl	8011f10 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b36:	488a      	ldr	r0, [pc, #552]	; (8007d60 <EE_Init+0x314>)
 8007b38:	f00a f9bc 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d105      	bne.n	8007b4c <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b40:	4a8a      	ldr	r2, [pc, #552]	; (8007d6c <EE_Init+0x320>)
 8007b42:	6913      	ldr	r3, [r2, #16]
 8007b44:	2101      	movs	r1, #1
 8007b46:	438b      	bics	r3, r1
 8007b48:	6113      	str	r3, [r2, #16]
 8007b4a:	e79c      	b.n	8007a86 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007b4c:	4b85      	ldr	r3, [pc, #532]	; (8007d64 <EE_Init+0x318>)
 8007b4e:	69de      	ldr	r6, [r3, #28]
 8007b50:	b2b6      	uxth	r6, r6
 8007b52:	e79b      	b.n	8007a8c <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	d157      	bne.n	8007c08 <EE_Init+0x1bc>
 8007b58:	2401      	movs	r4, #1
	int16_t x =-1;
 8007b5a:	2701      	movs	r7, #1
 8007b5c:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b5e:	4d84      	ldr	r5, [pc, #528]	; (8007d70 <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b60:	4b84      	ldr	r3, [pc, #528]	; (8007d74 <EE_Init+0x328>)
 8007b62:	4698      	mov	r8, r3
 8007b64:	e005      	b.n	8007b72 <EE_Init+0x126>
						x =VarIdx;
 8007b66:	b227      	sxth	r7, r4
 8007b68:	e008      	b.n	8007b7c <EE_Init+0x130>
 8007b6a:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b6c:	4b82      	ldr	r3, [pc, #520]	; (8007d78 <EE_Init+0x32c>)
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d018      	beq.n	8007ba4 <EE_Init+0x158>
 8007b72:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b74:	882b      	ldrh	r3, [r5, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	42b3      	cmp	r3, r6
 8007b7a:	d0f4      	beq.n	8007b66 <EE_Init+0x11a>
					if(VarIdx != x){
 8007b7c:	42bc      	cmp	r4, r7
 8007b7e:	d0f4      	beq.n	8007b6a <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b80:	497c      	ldr	r1, [pc, #496]	; (8007d74 <EE_Init+0x328>)
 8007b82:	0030      	movs	r0, r6
 8007b84:	f7ff fe26 	bl	80077d4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b88:	2801      	cmp	r0, #1
 8007b8a:	d0ee      	beq.n	8007b6a <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b8c:	4643      	mov	r3, r8
 8007b8e:	8819      	ldrh	r1, [r3, #0]
 8007b90:	0030      	movs	r0, r6
 8007b92:	f7ff fdb3 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 8007b96:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b98:	4871      	ldr	r0, [pc, #452]	; (8007d60 <EE_Init+0x314>)
 8007b9a:	f00a f98b 	bl	8011eb4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d0e3      	beq.n	8007b6a <EE_Init+0x11e>
 8007ba2:	e773      	b.n	8007a8c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4969      	ldr	r1, [pc, #420]	; (8007d50 <EE_Init+0x304>)
 8007baa:	2001      	movs	r0, #1
 8007bac:	f00a f9b0 	bl	8011f10 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bb0:	486b      	ldr	r0, [pc, #428]	; (8007d60 <EE_Init+0x314>)
 8007bb2:	f00a f97f 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d003      	beq.n	8007bc2 <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007bba:	4b6a      	ldr	r3, [pc, #424]	; (8007d64 <EE_Init+0x318>)
 8007bbc:	69de      	ldr	r6, [r3, #28]
 8007bbe:	b2b6      	uxth	r6, r6
 8007bc0:	e764      	b.n	8007a8c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bc2:	4a6a      	ldr	r2, [pc, #424]	; (8007d6c <EE_Init+0x320>)
 8007bc4:	6913      	ldr	r3, [r2, #16]
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	438b      	bics	r3, r1
 8007bca:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bcc:	4861      	ldr	r0, [pc, #388]	; (8007d54 <EE_Init+0x308>)
 8007bce:	f00a fa17 	bl	8012000 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd2:	4863      	ldr	r0, [pc, #396]	; (8007d60 <EE_Init+0x314>)
 8007bd4:	f00a f96e 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d003      	beq.n	8007be4 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007bdc:	4b61      	ldr	r3, [pc, #388]	; (8007d64 <EE_Init+0x318>)
 8007bde:	69de      	ldr	r6, [r3, #28]
 8007be0:	b2b6      	uxth	r6, r6
 8007be2:	e753      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007be4:	4865      	ldr	r0, [pc, #404]	; (8007d7c <EE_Init+0x330>)
 8007be6:	f00a fa0b 	bl	8012000 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bea:	485d      	ldr	r0, [pc, #372]	; (8007d60 <EE_Init+0x314>)
 8007bec:	f00a f962 	bl	8011eb4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d105      	bne.n	8007c00 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007bf4:	4a5d      	ldr	r2, [pc, #372]	; (8007d6c <EE_Init+0x320>)
 8007bf6:	6913      	ldr	r3, [r2, #16]
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	438b      	bics	r3, r1
 8007bfc:	6113      	str	r3, [r2, #16]
 8007bfe:	e742      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007c00:	4b58      	ldr	r3, [pc, #352]	; (8007d64 <EE_Init+0x318>)
 8007c02:	69de      	ldr	r6, [r3, #28]
 8007c04:	b2b6      	uxth	r6, r6
 8007c06:	e741      	b.n	8007a8c <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007c08:	4b54      	ldr	r3, [pc, #336]	; (8007d5c <EE_Init+0x310>)
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d00b      	beq.n	8007c26 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007c0e:	f7ff feb9 	bl	8007984 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c12:	4853      	ldr	r0, [pc, #332]	; (8007d60 <EE_Init+0x314>)
 8007c14:	f00a f94e 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d100      	bne.n	8007c1e <EE_Init+0x1d2>
 8007c1c:	e733      	b.n	8007a86 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007c1e:	4b51      	ldr	r3, [pc, #324]	; (8007d64 <EE_Init+0x318>)
 8007c20:	69de      	ldr	r6, [r3, #28]
 8007c22:	b2b6      	uxth	r6, r6
 8007c24:	e732      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c26:	484b      	ldr	r0, [pc, #300]	; (8007d54 <EE_Init+0x308>)
 8007c28:	f00a f9ea 	bl	8012000 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c2c:	484c      	ldr	r0, [pc, #304]	; (8007d60 <EE_Init+0x314>)
 8007c2e:	f00a f941 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d003      	beq.n	8007c3e <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007c36:	4b4b      	ldr	r3, [pc, #300]	; (8007d64 <EE_Init+0x318>)
 8007c38:	69de      	ldr	r6, [r3, #28]
 8007c3a:	b2b6      	uxth	r6, r6
 8007c3c:	e726      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c3e:	484f      	ldr	r0, [pc, #316]	; (8007d7c <EE_Init+0x330>)
 8007c40:	f00a f9de 	bl	8012000 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c44:	4846      	ldr	r0, [pc, #280]	; (8007d60 <EE_Init+0x314>)
 8007c46:	f00a f935 	bl	8011eb4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d003      	beq.n	8007c56 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007c4e:	4b45      	ldr	r3, [pc, #276]	; (8007d64 <EE_Init+0x318>)
 8007c50:	69de      	ldr	r6, [r3, #28]
 8007c52:	b2b6      	uxth	r6, r6
 8007c54:	e71a      	b.n	8007a8c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c56:	4a45      	ldr	r2, [pc, #276]	; (8007d6c <EE_Init+0x320>)
 8007c58:	6913      	ldr	r3, [r2, #16]
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	438b      	bics	r3, r1
 8007c5e:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c60:	2200      	movs	r2, #0
 8007c62:	2300      	movs	r3, #0
 8007c64:	493a      	ldr	r1, [pc, #232]	; (8007d50 <EE_Init+0x304>)
 8007c66:	2001      	movs	r0, #1
 8007c68:	f00a f952 	bl	8011f10 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c6c:	483c      	ldr	r0, [pc, #240]	; (8007d60 <EE_Init+0x314>)
 8007c6e:	f00a f921 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d003      	beq.n	8007c7e <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007c76:	4b3b      	ldr	r3, [pc, #236]	; (8007d64 <EE_Init+0x318>)
 8007c78:	69de      	ldr	r6, [r3, #28]
 8007c7a:	b2b6      	uxth	r6, r6
 8007c7c:	e706      	b.n	8007a8c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c7e:	4a3b      	ldr	r2, [pc, #236]	; (8007d6c <EE_Init+0x320>)
 8007c80:	6913      	ldr	r3, [r2, #16]
 8007c82:	2101      	movs	r1, #1
 8007c84:	438b      	bics	r3, r1
 8007c86:	6113      	str	r3, [r2, #16]
 8007c88:	e6fd      	b.n	8007a86 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d009      	beq.n	8007ca2 <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007c8e:	4b33      	ldr	r3, [pc, #204]	; (8007d5c <EE_Init+0x310>)
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d010      	beq.n	8007cb6 <EE_Init+0x26a>
 8007c94:	2401      	movs	r4, #1
	int16_t x =-1;
 8007c96:	2701      	movs	r7, #1
 8007c98:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007c9a:	4d39      	ldr	r5, [pc, #228]	; (8007d80 <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007c9c:	4b35      	ldr	r3, [pc, #212]	; (8007d74 <EE_Init+0x328>)
 8007c9e:	4698      	mov	r8, r3
 8007ca0:	e02d      	b.n	8007cfe <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007ca2:	f7ff fe6f 	bl	8007984 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ca6:	482e      	ldr	r0, [pc, #184]	; (8007d60 <EE_Init+0x314>)
 8007ca8:	f00a f904 	bl	8011eb4 <FLASH_WaitForLastOperation>
 8007cac:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	d100      	bne.n	8007cb4 <EE_Init+0x268>
 8007cb2:	e6e8      	b.n	8007a86 <EE_Init+0x3a>
 8007cb4:	e6ea      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007cb6:	4827      	ldr	r0, [pc, #156]	; (8007d54 <EE_Init+0x308>)
 8007cb8:	f00a f9a2 	bl	8012000 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cbc:	4828      	ldr	r0, [pc, #160]	; (8007d60 <EE_Init+0x314>)
 8007cbe:	f00a f8f9 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d003      	beq.n	8007cce <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <EE_Init+0x318>)
 8007cc8:	69de      	ldr	r6, [r3, #28]
 8007cca:	b2b6      	uxth	r6, r6
 8007ccc:	e6de      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cce:	482b      	ldr	r0, [pc, #172]	; (8007d7c <EE_Init+0x330>)
 8007cd0:	f00a f996 	bl	8012000 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd4:	4822      	ldr	r0, [pc, #136]	; (8007d60 <EE_Init+0x314>)
 8007cd6:	f00a f8ed 	bl	8011eb4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d105      	bne.n	8007cea <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007cde:	4a23      	ldr	r2, [pc, #140]	; (8007d6c <EE_Init+0x320>)
 8007ce0:	6913      	ldr	r3, [r2, #16]
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	438b      	bics	r3, r1
 8007ce6:	6113      	str	r3, [r2, #16]
 8007ce8:	e6cd      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007cea:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <EE_Init+0x318>)
 8007cec:	69de      	ldr	r6, [r3, #28]
 8007cee:	b2b6      	uxth	r6, r6
 8007cf0:	e6cc      	b.n	8007a8c <EE_Init+0x40>
						x =VarIdx;
 8007cf2:	b227      	sxth	r7, r4
 8007cf4:	e008      	b.n	8007d08 <EE_Init+0x2bc>
 8007cf6:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007cf8:	4b1f      	ldr	r3, [pc, #124]	; (8007d78 <EE_Init+0x32c>)
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	d018      	beq.n	8007d30 <EE_Init+0x2e4>
 8007cfe:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007d00:	882b      	ldrh	r3, [r5, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	42b3      	cmp	r3, r6
 8007d06:	d0f4      	beq.n	8007cf2 <EE_Init+0x2a6>
					if(VarIdx != x){
 8007d08:	42bc      	cmp	r4, r7
 8007d0a:	d0f4      	beq.n	8007cf6 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d0c:	4919      	ldr	r1, [pc, #100]	; (8007d74 <EE_Init+0x328>)
 8007d0e:	0030      	movs	r0, r6
 8007d10:	f7ff fd60 	bl	80077d4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007d14:	2801      	cmp	r0, #1
 8007d16:	d0ee      	beq.n	8007cf6 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007d18:	4643      	mov	r3, r8
 8007d1a:	8819      	ldrh	r1, [r3, #0]
 8007d1c:	0030      	movs	r0, r6
 8007d1e:	f7ff fced 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 8007d22:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d24:	480e      	ldr	r0, [pc, #56]	; (8007d60 <EE_Init+0x314>)
 8007d26:	f00a f8c5 	bl	8011eb4 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d0e3      	beq.n	8007cf6 <EE_Init+0x2aa>
 8007d2e:	e6ad      	b.n	8007a8c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007d30:	2200      	movs	r2, #0
 8007d32:	2300      	movs	r3, #0
 8007d34:	4907      	ldr	r1, [pc, #28]	; (8007d54 <EE_Init+0x308>)
 8007d36:	2001      	movs	r0, #1
 8007d38:	f00a f8ea 	bl	8011f10 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d3c:	4808      	ldr	r0, [pc, #32]	; (8007d60 <EE_Init+0x314>)
 8007d3e:	f00a f8b9 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d01e      	beq.n	8007d84 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <EE_Init+0x318>)
 8007d48:	69de      	ldr	r6, [r3, #28]
 8007d4a:	b2b6      	uxth	r6, r6
 8007d4c:	e69e      	b.n	8007a8c <EE_Init+0x40>
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	0801e000 	.word	0x0801e000
 8007d54:	0801f000 	.word	0x0801f000
 8007d58:	0000eeee 	.word	0x0000eeee
 8007d5c:	0000ffff 	.word	0x0000ffff
 8007d60:	0000c350 	.word	0x0000c350
 8007d64:	200073d0 	.word	0x200073d0
 8007d68:	0801e800 	.word	0x0801e800
 8007d6c:	40022000 	.word	0x40022000
 8007d70:	0801e006 	.word	0x0801e006
 8007d74:	20001850 	.word	0x20001850
 8007d78:	00000401 	.word	0x00000401
 8007d7c:	0801f800 	.word	0x0801f800
 8007d80:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <EE_Init+0x380>)
 8007d86:	6913      	ldr	r3, [r2, #16]
 8007d88:	2101      	movs	r1, #1
 8007d8a:	438b      	bics	r3, r1
 8007d8c:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d8e:	4810      	ldr	r0, [pc, #64]	; (8007dd0 <EE_Init+0x384>)
 8007d90:	f00a f936 	bl	8012000 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d94:	480f      	ldr	r0, [pc, #60]	; (8007dd4 <EE_Init+0x388>)
 8007d96:	f00a f88d 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d003      	beq.n	8007da6 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <EE_Init+0x38c>)
 8007da0:	69de      	ldr	r6, [r3, #28]
 8007da2:	b2b6      	uxth	r6, r6
 8007da4:	e672      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007da6:	480d      	ldr	r0, [pc, #52]	; (8007ddc <EE_Init+0x390>)
 8007da8:	f00a f92a 	bl	8012000 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dac:	4809      	ldr	r0, [pc, #36]	; (8007dd4 <EE_Init+0x388>)
 8007dae:	f00a f881 	bl	8011eb4 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d105      	bne.n	8007dc2 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007db6:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <EE_Init+0x380>)
 8007db8:	6913      	ldr	r3, [r2, #16]
 8007dba:	2102      	movs	r1, #2
 8007dbc:	438b      	bics	r3, r1
 8007dbe:	6113      	str	r3, [r2, #16]
 8007dc0:	e661      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <EE_Init+0x38c>)
 8007dc4:	69de      	ldr	r6, [r3, #28]
 8007dc6:	b2b6      	uxth	r6, r6
 8007dc8:	e660      	b.n	8007a8c <EE_Init+0x40>
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	40022000 	.word	0x40022000
 8007dd0:	0801e000 	.word	0x0801e000
 8007dd4:	0000c350 	.word	0x0000c350
 8007dd8:	200073d0 	.word	0x200073d0
 8007ddc:	0801e800 	.word	0x0801e800

08007de0 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de2:	b091      	sub	sp, #68	; 0x44
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007de4:	25a0      	movs	r5, #160	; 0xa0
 8007de6:	006d      	lsls	r5, r5, #1
 8007de8:	2400      	movs	r4, #0
 8007dea:	9403      	str	r4, [sp, #12]
 8007dec:	9402      	str	r4, [sp, #8]
 8007dee:	4b5e      	ldr	r3, [pc, #376]	; (8007f68 <MX_FREERTOS_Init+0x188>)
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	2603      	movs	r6, #3
 8007df4:	9600      	str	r6, [sp, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	002a      	movs	r2, r5
 8007dfa:	495c      	ldr	r1, [pc, #368]	; (8007f6c <MX_FREERTOS_Init+0x18c>)
 8007dfc:	485c      	ldr	r0, [pc, #368]	; (8007f70 <MX_FREERTOS_Init+0x190>)
 8007dfe:	f007 fc99 	bl	800f734 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007e02:	9403      	str	r4, [sp, #12]
 8007e04:	9402      	str	r4, [sp, #8]
 8007e06:	4b5b      	ldr	r3, [pc, #364]	; (8007f74 <MX_FREERTOS_Init+0x194>)
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	9600      	str	r6, [sp, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	002a      	movs	r2, r5
 8007e10:	4959      	ldr	r1, [pc, #356]	; (8007f78 <MX_FREERTOS_Init+0x198>)
 8007e12:	485a      	ldr	r0, [pc, #360]	; (8007f7c <MX_FREERTOS_Init+0x19c>)
 8007e14:	f007 fc8e 	bl	800f734 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007e18:	9403      	str	r4, [sp, #12]
 8007e1a:	9402      	str	r4, [sp, #8]
 8007e1c:	4b58      	ldr	r3, [pc, #352]	; (8007f80 <MX_FREERTOS_Init+0x1a0>)
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	9600      	str	r6, [sp, #0]
 8007e22:	2300      	movs	r3, #0
 8007e24:	002a      	movs	r2, r5
 8007e26:	4957      	ldr	r1, [pc, #348]	; (8007f84 <MX_FREERTOS_Init+0x1a4>)
 8007e28:	4857      	ldr	r0, [pc, #348]	; (8007f88 <MX_FREERTOS_Init+0x1a8>)
 8007e2a:	f007 fc83 	bl	800f734 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007e2e:	f7ff facd 	bl	80073cc <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007e32:	9403      	str	r4, [sp, #12]
 8007e34:	9402      	str	r4, [sp, #8]
 8007e36:	4b55      	ldr	r3, [pc, #340]	; (8007f8c <MX_FREERTOS_Init+0x1ac>)
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	9600      	str	r6, [sp, #0]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	002a      	movs	r2, r5
 8007e40:	4953      	ldr	r1, [pc, #332]	; (8007f90 <MX_FREERTOS_Init+0x1b0>)
 8007e42:	4854      	ldr	r0, [pc, #336]	; (8007f94 <MX_FREERTOS_Init+0x1b4>)
 8007e44:	f007 fc76 	bl	800f734 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007e48:	4e53      	ldr	r6, [pc, #332]	; (8007f98 <MX_FREERTOS_Init+0x1b8>)
 8007e4a:	9403      	str	r4, [sp, #12]
 8007e4c:	9402      	str	r4, [sp, #8]
 8007e4e:	4b53      	ldr	r3, [pc, #332]	; (8007f9c <MX_FREERTOS_Init+0x1bc>)
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	2704      	movs	r7, #4
 8007e54:	9700      	str	r7, [sp, #0]
 8007e56:	2301      	movs	r3, #1
 8007e58:	002a      	movs	r2, r5
 8007e5a:	4951      	ldr	r1, [pc, #324]	; (8007fa0 <MX_FREERTOS_Init+0x1c0>)
 8007e5c:	0030      	movs	r0, r6
 8007e5e:	f007 fc69 	bl	800f734 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007e62:	9403      	str	r4, [sp, #12]
 8007e64:	9402      	str	r4, [sp, #8]
 8007e66:	4b4f      	ldr	r3, [pc, #316]	; (8007fa4 <MX_FREERTOS_Init+0x1c4>)
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	9700      	str	r7, [sp, #0]
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	002a      	movs	r2, r5
 8007e70:	494d      	ldr	r1, [pc, #308]	; (8007fa8 <MX_FREERTOS_Init+0x1c8>)
 8007e72:	0030      	movs	r0, r6
 8007e74:	f007 fc5e 	bl	800f734 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007e78:	9403      	str	r4, [sp, #12]
 8007e7a:	9402      	str	r4, [sp, #8]
 8007e7c:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <MX_FREERTOS_Init+0x1cc>)
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	9700      	str	r7, [sp, #0]
 8007e82:	2303      	movs	r3, #3
 8007e84:	002a      	movs	r2, r5
 8007e86:	494a      	ldr	r1, [pc, #296]	; (8007fb0 <MX_FREERTOS_Init+0x1d0>)
 8007e88:	0030      	movs	r0, r6
 8007e8a:	f007 fc53 	bl	800f734 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007e8e:	9403      	str	r4, [sp, #12]
 8007e90:	9402      	str	r4, [sp, #8]
 8007e92:	4b48      	ldr	r3, [pc, #288]	; (8007fb4 <MX_FREERTOS_Init+0x1d4>)
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	9700      	str	r7, [sp, #0]
 8007e98:	2304      	movs	r3, #4
 8007e9a:	002a      	movs	r2, r5
 8007e9c:	4946      	ldr	r1, [pc, #280]	; (8007fb8 <MX_FREERTOS_Init+0x1d8>)
 8007e9e:	0030      	movs	r0, r6
 8007ea0:	f007 fc48 	bl	800f734 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007ea4:	9403      	str	r4, [sp, #12]
 8007ea6:	9402      	str	r4, [sp, #8]
 8007ea8:	4b44      	ldr	r3, [pc, #272]	; (8007fbc <MX_FREERTOS_Init+0x1dc>)
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	9700      	str	r7, [sp, #0]
 8007eae:	2305      	movs	r3, #5
 8007eb0:	002a      	movs	r2, r5
 8007eb2:	4943      	ldr	r1, [pc, #268]	; (8007fc0 <MX_FREERTOS_Init+0x1e0>)
 8007eb4:	0030      	movs	r0, r6
 8007eb6:	f007 fc3d 	bl	800f734 <xTaskGenericCreate>
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007eba:	9403      	str	r4, [sp, #12]
 8007ebc:	9402      	str	r4, [sp, #8]
 8007ebe:	4b41      	ldr	r3, [pc, #260]	; (8007fc4 <MX_FREERTOS_Init+0x1e4>)
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	9700      	str	r7, [sp, #0]
 8007ec4:	2306      	movs	r3, #6
 8007ec6:	002a      	movs	r2, r5
 8007ec8:	493f      	ldr	r1, [pc, #252]	; (8007fc8 <MX_FREERTOS_Init+0x1e8>)
 8007eca:	0030      	movs	r0, r6
 8007ecc:	f007 fc32 	bl	800f734 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007ed0:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	a80f      	add	r0, sp, #60	; 0x3c
 8007ed6:	f006 fe3a 	bl	800eb4e <osSemaphoreCreate>
 8007eda:	4e3c      	ldr	r6, [pc, #240]	; (8007fcc <MX_FREERTOS_Init+0x1ec>)
 8007edc:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007ede:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	a80e      	add	r0, sp, #56	; 0x38
 8007ee4:	f006 fe33 	bl	800eb4e <osSemaphoreCreate>
 8007ee8:	4d39      	ldr	r5, [pc, #228]	; (8007fd0 <MX_FREERTOS_Init+0x1f0>)
 8007eea:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007eec:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007eee:	2101      	movs	r1, #1
 8007ef0:	a80d      	add	r0, sp, #52	; 0x34
 8007ef2:	f006 fe2c 	bl	800eb4e <osSemaphoreCreate>
 8007ef6:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007ef8:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007efa:	2101      	movs	r1, #1
 8007efc:	a80c      	add	r0, sp, #48	; 0x30
 8007efe:	f006 fe26 	bl	800eb4e <osSemaphoreCreate>
 8007f02:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 8007f04:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007f06:	2101      	movs	r1, #1
 8007f08:	a80b      	add	r0, sp, #44	; 0x2c
 8007f0a:	f006 fe20 	bl	800eb4e <osSemaphoreCreate>
 8007f0e:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007f10:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007f12:	2101      	movs	r1, #1
 8007f14:	a80a      	add	r0, sp, #40	; 0x28
 8007f16:	f006 fe1a 	bl	800eb4e <osSemaphoreCreate>
 8007f1a:	60e8      	str	r0, [r5, #12]
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
 8007f1c:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007f1e:	2101      	movs	r1, #1
 8007f20:	a809      	add	r0, sp, #36	; 0x24
 8007f22:	f006 fe14 	bl	800eb4e <osSemaphoreCreate>
 8007f26:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8007f28:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	a808      	add	r0, sp, #32
 8007f2e:	f006 fe0e 	bl	800eb4e <osSemaphoreCreate>
 8007f32:	6128      	str	r0, [r5, #16]
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
 8007f34:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007f36:	2101      	movs	r1, #1
 8007f38:	a807      	add	r0, sp, #28
 8007f3a:	f006 fe08 	bl	800eb4e <osSemaphoreCreate>
 8007f3e:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007f40:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007f42:	2101      	movs	r1, #1
 8007f44:	a806      	add	r0, sp, #24
 8007f46:	f006 fe02 	bl	800eb4e <osSemaphoreCreate>
 8007f4a:	6168      	str	r0, [r5, #20]
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
 8007f4c:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007f4e:	2101      	movs	r1, #1
 8007f50:	a805      	add	r0, sp, #20
 8007f52:	f006 fdfc 	bl	800eb4e <osSemaphoreCreate>
 8007f56:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 8007f58:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	a804      	add	r0, sp, #16
 8007f5e:	f006 fdf6 	bl	800eb4e <osSemaphoreCreate>
 8007f62:	61a8      	str	r0, [r5, #24]
#endif
	
}
 8007f64:	b011      	add	sp, #68	; 0x44
 8007f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f68:	20001888 	.word	0x20001888
 8007f6c:	0801bb70 	.word	0x0801bb70
 8007f70:	08008375 	.word	0x08008375
 8007f74:	20001854 	.word	0x20001854
 8007f78:	0801bb7c 	.word	0x0801bb7c
 8007f7c:	08009d85 	.word	0x08009d85
 8007f80:	20001884 	.word	0x20001884
 8007f84:	0801bb88 	.word	0x0801bb88
 8007f88:	08014417 	.word	0x08014417
 8007f8c:	2000195c 	.word	0x2000195c
 8007f90:	0801bb94 	.word	0x0801bb94
 8007f94:	08005169 	.word	0x08005169
 8007f98:	0800a1d1 	.word	0x0800a1d1
 8007f9c:	20001858 	.word	0x20001858
 8007fa0:	0801bb9c 	.word	0x0801bb9c
 8007fa4:	2000185c 	.word	0x2000185c
 8007fa8:	0801bba8 	.word	0x0801bba8
 8007fac:	20001860 	.word	0x20001860
 8007fb0:	0801bbb4 	.word	0x0801bbb4
 8007fb4:	20001864 	.word	0x20001864
 8007fb8:	0801bbc0 	.word	0x0801bbc0
 8007fbc:	20001868 	.word	0x20001868
 8007fc0:	0801bbcc 	.word	0x0801bbcc
 8007fc4:	2000186c 	.word	0x2000186c
 8007fc8:	0801bbd8 	.word	0x0801bbd8
 8007fcc:	20006ef8 	.word	0x20006ef8
 8007fd0:	20006ed8 	.word	0x20006ed8

08007fd4 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd6:	46de      	mov	lr, fp
 8007fd8:	4657      	mov	r7, sl
 8007fda:	464e      	mov	r6, r9
 8007fdc:	4645      	mov	r5, r8
 8007fde:	b5e0      	push	{r5, r6, r7, lr}
 8007fe0:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007fe2:	4bd3      	ldr	r3, [pc, #844]	; (8008330 <ExecuteMonitor+0x35c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d000      	beq.n	8007fec <ExecuteMonitor+0x18>
 8007fea:	e19a      	b.n	8008322 <ExecuteMonitor+0x34e>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 8007fec:	4bd0      	ldr	r3, [pc, #832]	; (8008330 <ExecuteMonitor+0x35c>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
	flag=0;
 8007ff2:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8007ff4:	3220      	adds	r2, #32
 8007ff6:	715a      	strb	r2, [r3, #5]
                	    digitTheCommand=nonProcessingParameter[1]%10;
                	    numCommandParameters=nonProcessingParameter[2]%10;
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
                	    nonProcessingParameterIndex=4;
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007ff8:	4bce      	ldr	r3, [pc, #824]	; (8008334 <ExecuteMonitor+0x360>)
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4bce      	ldr	r3, [pc, #824]	; (8008338 <ExecuteMonitor+0x364>)
 8008000:	3304      	adds	r3, #4
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	e186      	b.n	8008314 <ExecuteMonitor+0x340>
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8008006:	4bcd      	ldr	r3, [pc, #820]	; (800833c <ExecuteMonitor+0x368>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2220      	movs	r2, #32
 800800c:	4393      	bics	r3, r2
 800800e:	d018      	beq.n	8008042 <ExecuteMonitor+0x6e>
 8008010:	4bc7      	ldr	r3, [pc, #796]	; (8008330 <ExecuteMonitor+0x35c>)
 8008012:	791b      	ldrb	r3, [r3, #4]
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	2a01      	cmp	r2, #1
 8008018:	d800      	bhi.n	800801c <ExecuteMonitor+0x48>
 800801a:	e0b8      	b.n	800818e <ExecuteMonitor+0x1ba>
		            	    perviousCharacter= INTIAL_VALUE;
 800801c:	703d      	strb	r5, [r7, #0]
		            	    Delay_us(100);
 800801e:	2064      	movs	r0, #100	; 0x64
 8008020:	f006 fa52 	bl	800e4c8 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8008024:	7963      	ldrb	r3, [r4, #5]
 8008026:	783a      	ldrb	r2, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d0ec      	beq.n	8008006 <ExecuteMonitor+0x32>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 800802c:	49c4      	ldr	r1, [pc, #784]	; (8008340 <ExecuteMonitor+0x36c>)
 800802e:	780a      	ldrb	r2, [r1, #0]
 8008030:	1c50      	adds	r0, r2, #1
 8008032:	7008      	strb	r0, [r1, #0]
 8008034:	49c0      	ldr	r1, [pc, #768]	; (8008338 <ExecuteMonitor+0x364>)
 8008036:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 8008038:	4ac0      	ldr	r2, [pc, #768]	; (800833c <ExecuteMonitor+0x368>)
 800803a:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 800803c:	4bbc      	ldr	r3, [pc, #752]	; (8008330 <ExecuteMonitor+0x35c>)
 800803e:	715e      	strb	r6, [r3, #5]
 8008040:	e7e1      	b.n	8008006 <ExecuteMonitor+0x32>
                   if(flag == NonActive)
 8008042:	4bbb      	ldr	r3, [pc, #748]	; (8008330 <ExecuteMonitor+0x35c>)
 8008044:	791b      	ldrb	r3, [r3, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d000      	beq.n	800804c <ExecuteMonitor+0x78>
 800804a:	e0a0      	b.n	800818e <ExecuteMonitor+0x1ba>
                	   nonProcessingParameterIndex=0;
 800804c:	4bbc      	ldr	r3, [pc, #752]	; (8008340 <ExecuteMonitor+0x36c>)
 800804e:	464a      	mov	r2, r9
 8008050:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8008052:	4bb9      	ldr	r3, [pc, #740]	; (8008338 <ExecuteMonitor+0x364>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b5b      	cmp	r3, #91	; 0x5b
 8008058:	d020      	beq.n	800809c <ExecuteMonitor+0xc8>
 		            else if(FirstCharacterInParameter == '#')
 800805a:	2b23      	cmp	r3, #35	; 0x23
 800805c:	d063      	beq.n	8008126 <ExecuteMonitor+0x152>
 		            else if(FirstCharacterInParameter == '=')
 800805e:	2b3d      	cmp	r3, #61	; 0x3d
 8008060:	d074      	beq.n	800814c <ExecuteMonitor+0x178>
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 8008062:	4cb4      	ldr	r4, [pc, #720]	; (8008334 <ExecuteMonitor+0x360>)
 8008064:	7823      	ldrb	r3, [r4, #0]
 8008066:	4ab7      	ldr	r2, [pc, #732]	; (8008344 <ExecuteMonitor+0x370>)
 8008068:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800806a:	0118      	lsls	r0, r3, #4
 800806c:	1ac3      	subs	r3, r0, r3
 800806e:	48b6      	ldr	r0, [pc, #728]	; (8008348 <ExecuteMonitor+0x374>)
 8008070:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8008072:	220f      	movs	r2, #15
 8008074:	0021      	movs	r1, r4
 8008076:	f00c fc64 	bl	8014942 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 800807a:	2214      	movs	r2, #20
 800807c:	4649      	mov	r1, r9
 800807e:	48ae      	ldr	r0, [pc, #696]	; (8008338 <ExecuteMonitor+0x364>)
 8008080:	f00c fc68 	bl	8014954 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8008084:	2214      	movs	r2, #20
 8008086:	4649      	mov	r1, r9
 8008088:	0020      	movs	r0, r4
 800808a:	f00c fc63 	bl	8014954 <memset>
		                    nonProcessingParameterIndex=0;
 800808e:	465b      	mov	r3, fp
 8008090:	4652      	mov	r2, sl
 8008092:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 8008094:	2603      	movs	r6, #3
 8008096:	1c35      	adds	r5, r6, #0
							if(currentCharacter != perviousCharacter)
 8008098:	4ca5      	ldr	r4, [pc, #660]	; (8008330 <ExecuteMonitor+0x35c>)
 800809a:	e7bf      	b.n	800801c <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 800809c:	4ba8      	ldr	r3, [pc, #672]	; (8008340 <ExecuteMonitor+0x36c>)
 800809e:	2201      	movs	r2, #1
 80080a0:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80080a2:	4baa      	ldr	r3, [pc, #680]	; (800834c <ExecuteMonitor+0x378>)
 80080a4:	781c      	ldrb	r4, [r3, #0]
 80080a6:	4ba4      	ldr	r3, [pc, #656]	; (8008338 <ExecuteMonitor+0x364>)
 80080a8:	7858      	ldrb	r0, [r3, #1]
 80080aa:	210a      	movs	r1, #10
 80080ac:	f7f8 f8d6 	bl	800025c <__aeabi_uidivmod>
 80080b0:	b2c9      	uxtb	r1, r1
 80080b2:	2603      	movs	r6, #3
 80080b4:	42a1      	cmp	r1, r4
 80080b6:	d00d      	beq.n	80080d4 <ExecuteMonitor+0x100>
 80080b8:	4b9f      	ldr	r3, [pc, #636]	; (8008338 <ExecuteMonitor+0x364>)
 80080ba:	4698      	mov	r8, r3
 80080bc:	1cb5      	adds	r5, r6, #2
 80080be:	b2ed      	uxtb	r5, r5
 80080c0:	4643      	mov	r3, r8
 80080c2:	5d98      	ldrb	r0, [r3, r6]
 80080c4:	210a      	movs	r1, #10
 80080c6:	f7f8 f8c9 	bl	800025c <__aeabi_uidivmod>
 80080ca:	b2c9      	uxtb	r1, r1
 80080cc:	42a1      	cmp	r1, r4
 80080ce:	d002      	beq.n	80080d6 <ExecuteMonitor+0x102>
 80080d0:	002e      	movs	r6, r5
 80080d2:	e7f3      	b.n	80080bc <ExecuteMonitor+0xe8>
 80080d4:	2601      	movs	r6, #1
 		            			nonProcessingParameterIndex++;
 80080d6:	1c74      	adds	r4, r6, #1
 80080d8:	b2e4      	uxtb	r4, r4
 80080da:	4b99      	ldr	r3, [pc, #612]	; (8008340 <ExecuteMonitor+0x36c>)
 80080dc:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80080de:	4b96      	ldr	r3, [pc, #600]	; (8008338 <ExecuteMonitor+0x364>)
 80080e0:	5d1d      	ldrb	r5, [r3, r4]
 80080e2:	210a      	movs	r1, #10
 80080e4:	0028      	movs	r0, r5
 80080e6:	f7f8 f8b9 	bl	800025c <__aeabi_uidivmod>
 80080ea:	4b92      	ldr	r3, [pc, #584]	; (8008334 <ExecuteMonitor+0x360>)
 80080ec:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80080ee:	2d5d      	cmp	r5, #93	; 0x5d
 80080f0:	d009      	beq.n	8008106 <ExecuteMonitor+0x132>
 80080f2:	3602      	adds	r6, #2
 80080f4:	b2f4      	uxtb	r4, r6
 80080f6:	4990      	ldr	r1, [pc, #576]	; (8008338 <ExecuteMonitor+0x364>)
 80080f8:	e000      	b.n	80080fc <ExecuteMonitor+0x128>
 80080fa:	001c      	movs	r4, r3
 80080fc:	1c63      	adds	r3, r4, #1
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	5d0a      	ldrb	r2, [r1, r4]
 8008102:	2a5d      	cmp	r2, #93	; 0x5d
 8008104:	d1f9      	bne.n	80080fa <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 8008106:	3401      	adds	r4, #1
 8008108:	b2e1      	uxtb	r1, r4
 800810a:	4b8d      	ldr	r3, [pc, #564]	; (8008340 <ExecuteMonitor+0x36c>)
 800810c:	7019      	strb	r1, [r3, #0]
 		            	processingParameterIndex=1;
 800810e:	4b90      	ldr	r3, [pc, #576]	; (8008350 <ExecuteMonitor+0x37c>)
 8008110:	2201      	movs	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008114:	4887      	ldr	r0, [pc, #540]	; (8008334 <ExecuteMonitor+0x360>)
 8008116:	3213      	adds	r2, #19
 8008118:	1a52      	subs	r2, r2, r1
 800811a:	4c87      	ldr	r4, [pc, #540]	; (8008338 <ExecuteMonitor+0x364>)
 800811c:	1861      	adds	r1, r4, r1
 800811e:	3001      	adds	r0, #1
 8008120:	f00c fc0f 	bl	8014942 <memcpy>
 8008124:	e79d      	b.n	8008062 <ExecuteMonitor+0x8e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8008126:	4c83      	ldr	r4, [pc, #524]	; (8008334 <ExecuteMonitor+0x360>)
 8008128:	4d83      	ldr	r5, [pc, #524]	; (8008338 <ExecuteMonitor+0x364>)
 800812a:	7868      	ldrb	r0, [r5, #1]
 800812c:	210a      	movs	r1, #10
 800812e:	f7f8 f895 	bl	800025c <__aeabi_uidivmod>
 8008132:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 8008134:	4b82      	ldr	r3, [pc, #520]	; (8008340 <ExecuteMonitor+0x36c>)
 8008136:	2202      	movs	r2, #2
 8008138:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800813a:	4b85      	ldr	r3, [pc, #532]	; (8008350 <ExecuteMonitor+0x37c>)
 800813c:	3a01      	subs	r2, #1
 800813e:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008140:	1c60      	adds	r0, r4, #1
 8008142:	1ca9      	adds	r1, r5, #2
 8008144:	3211      	adds	r2, #17
 8008146:	f00c fbfc 	bl	8014942 <memcpy>
 800814a:	e78a      	b.n	8008062 <ExecuteMonitor+0x8e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800814c:	4b7a      	ldr	r3, [pc, #488]	; (8008338 <ExecuteMonitor+0x364>)
 800814e:	7858      	ldrb	r0, [r3, #1]
 8008150:	210a      	movs	r1, #10
 8008152:	f7f8 f883 	bl	800025c <__aeabi_uidivmod>
 8008156:	4b7d      	ldr	r3, [pc, #500]	; (800834c <ExecuteMonitor+0x378>)
 8008158:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 800815a:	4b77      	ldr	r3, [pc, #476]	; (8008338 <ExecuteMonitor+0x364>)
 800815c:	7898      	ldrb	r0, [r3, #2]
 800815e:	210a      	movs	r1, #10
 8008160:	f7f8 f87c 	bl	800025c <__aeabi_uidivmod>
 8008164:	4b7b      	ldr	r3, [pc, #492]	; (8008354 <ExecuteMonitor+0x380>)
 8008166:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8008168:	4b73      	ldr	r3, [pc, #460]	; (8008338 <ExecuteMonitor+0x364>)
 800816a:	78d8      	ldrb	r0, [r3, #3]
 800816c:	210a      	movs	r1, #10
 800816e:	f7f8 f875 	bl	800025c <__aeabi_uidivmod>
 8008172:	4b70      	ldr	r3, [pc, #448]	; (8008334 <ExecuteMonitor+0x360>)
 8008174:	7019      	strb	r1, [r3, #0]
                	    nonProcessingParameterIndex=4;
 8008176:	4b72      	ldr	r3, [pc, #456]	; (8008340 <ExecuteMonitor+0x36c>)
 8008178:	2204      	movs	r2, #4
 800817a:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 800817c:	4b74      	ldr	r3, [pc, #464]	; (8008350 <ExecuteMonitor+0x37c>)
 800817e:	3a03      	subs	r2, #3
 8008180:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008182:	320f      	adds	r2, #15
 8008184:	9901      	ldr	r1, [sp, #4]
 8008186:	9800      	ldr	r0, [sp, #0]
 8008188:	f00c fbdb 	bl	8014942 <memcpy>
 800818c:	e769      	b.n	8008062 <ExecuteMonitor+0x8e>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 800818e:	2b01      	cmp	r3, #1
 8008190:	d015      	beq.n	80081be <ExecuteMonitor+0x1ea>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 8008192:	4b67      	ldr	r3, [pc, #412]	; (8008330 <ExecuteMonitor+0x35c>)
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d000      	beq.n	800819c <ExecuteMonitor+0x1c8>
 800819a:	e778      	b.n	800808e <ExecuteMonitor+0xba>
		           {
                	finalMatrixIndex=0;
 800819c:	2300      	movs	r3, #0
 800819e:	4a6e      	ldr	r2, [pc, #440]	; (8008358 <ExecuteMonitor+0x384>)
 80081a0:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 80081a2:	4a6e      	ldr	r2, [pc, #440]	; (800835c <ExecuteMonitor+0x388>)
 80081a4:	2101      	movs	r1, #1
 80081a6:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 80081a8:	4a6d      	ldr	r2, [pc, #436]	; (8008360 <ExecuteMonitor+0x38c>)
 80081aa:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 80081ac:	4b69      	ldr	r3, [pc, #420]	; (8008354 <ExecuteMonitor+0x380>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d100      	bne.n	80081b6 <ExecuteMonitor+0x1e2>
 80081b4:	e07f      	b.n	80082b6 <ExecuteMonitor+0x2e2>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80081b6:	0017      	movs	r7, r2
 80081b8:	4e68      	ldr	r6, [pc, #416]	; (800835c <ExecuteMonitor+0x388>)
 80081ba:	4d67      	ldr	r5, [pc, #412]	; (8008358 <ExecuteMonitor+0x384>)
 80081bc:	e062      	b.n	8008284 <ExecuteMonitor+0x2b0>
                	finalMatrixIndex=0;
 80081be:	4b66      	ldr	r3, [pc, #408]	; (8008358 <ExecuteMonitor+0x384>)
 80081c0:	464a      	mov	r2, r9
 80081c2:	701a      	strb	r2, [r3, #0]
                	twoDMatrixIndex=1;
 80081c4:	4b65      	ldr	r3, [pc, #404]	; (800835c <ExecuteMonitor+0x388>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 80081ca:	4b65      	ldr	r3, [pc, #404]	; (8008360 <ExecuteMonitor+0x38c>)
 80081cc:	464a      	mov	r2, r9
 80081ce:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 80081d0:	4b60      	ldr	r3, [pc, #384]	; (8008354 <ExecuteMonitor+0x380>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d02a      	beq.n	800822e <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80081d8:	4b61      	ldr	r3, [pc, #388]	; (8008360 <ExecuteMonitor+0x38c>)
 80081da:	4698      	mov	r8, r3
 80081dc:	4e5f      	ldr	r6, [pc, #380]	; (800835c <ExecuteMonitor+0x388>)
 80081de:	4d5e      	ldr	r5, [pc, #376]	; (8008358 <ExecuteMonitor+0x384>)
 80081e0:	e00b      	b.n	80081fa <ExecuteMonitor+0x226>
		                   counter++;
 80081e2:	4a5f      	ldr	r2, [pc, #380]	; (8008360 <ExecuteMonitor+0x38c>)
 80081e4:	7813      	ldrb	r3, [r2, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80081ec:	4a5b      	ldr	r2, [pc, #364]	; (800835c <ExecuteMonitor+0x388>)
 80081ee:	2101      	movs	r1, #1
 80081f0:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 80081f2:	4a58      	ldr	r2, [pc, #352]	; (8008354 <ExecuteMonitor+0x380>)
 80081f4:	7812      	ldrb	r2, [r2, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d019      	beq.n	800822e <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80081fa:	4643      	mov	r3, r8
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	7830      	ldrb	r0, [r6, #0]
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	7033      	strb	r3, [r6, #0]
 8008204:	7829      	ldrb	r1, [r5, #0]
 8008206:	1c4b      	adds	r3, r1, #1
 8008208:	702b      	strb	r3, [r5, #0]
 800820a:	4c56      	ldr	r4, [pc, #344]	; (8008364 <ExecuteMonitor+0x390>)
 800820c:	0113      	lsls	r3, r2, #4
 800820e:	1a9a      	subs	r2, r3, r2
 8008210:	4b4d      	ldr	r3, [pc, #308]	; (8008348 <ExecuteMonitor+0x374>)
 8008212:	189b      	adds	r3, r3, r2
 8008214:	5c1b      	ldrb	r3, [r3, r0]
 8008216:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 8008218:	2001      	movs	r0, #1
 800821a:	f008 fcbb 	bl	8010b94 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800821e:	782b      	ldrb	r3, [r5, #0]
 8008220:	18e4      	adds	r4, r4, r3
 8008222:	3c01      	subs	r4, #1
 8008224:	7823      	ldrb	r3, [r4, #0]
 8008226:	2220      	movs	r2, #32
 8008228:	4393      	bics	r3, r2
 800822a:	d1e6      	bne.n	80081fa <ExecuteMonitor+0x226>
 800822c:	e7d9      	b.n	80081e2 <ExecuteMonitor+0x20e>
		          		   flag=0;
 800822e:	4b40      	ldr	r3, [pc, #256]	; (8008330 <ExecuteMonitor+0x35c>)
 8008230:	464a      	mov	r2, r9
 8008232:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 8008234:	4b4a      	ldr	r3, [pc, #296]	; (8008360 <ExecuteMonitor+0x38c>)
 8008236:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008238:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <ExecuteMonitor+0x394>)
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	464b      	mov	r3, r9
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800823e:	4e4b      	ldr	r6, [pc, #300]	; (800836c <ExecuteMonitor+0x398>)
 8008240:	4d48      	ldr	r5, [pc, #288]	; (8008364 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008242:	4c49      	ldr	r4, [pc, #292]	; (8008368 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008244:	18f2      	adds	r2, r6, r3
 8008246:	3281      	adds	r2, #129	; 0x81
 8008248:	32ff      	adds	r2, #255	; 0xff
 800824a:	5ceb      	ldrb	r3, [r5, r3]
 800824c:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 800824e:	2001      	movs	r0, #1
 8008250:	f008 fca0 	bl	8010b94 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008254:	7823      	ldrb	r3, [r4, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	7023      	strb	r3, [r4, #0]
 800825c:	2b3f      	cmp	r3, #63	; 0x3f
 800825e:	d9f1      	bls.n	8008244 <ExecuteMonitor+0x270>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008260:	2240      	movs	r2, #64	; 0x40
 8008262:	4649      	mov	r1, r9
 8008264:	483f      	ldr	r0, [pc, #252]	; (8008364 <ExecuteMonitor+0x390>)
 8008266:	f00c fb75 	bl	8014954 <memset>
 800826a:	e792      	b.n	8008192 <ExecuteMonitor+0x1be>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 800826c:	4a3c      	ldr	r2, [pc, #240]	; (8008360 <ExecuteMonitor+0x38c>)
 800826e:	7813      	ldrb	r3, [r2, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	b2db      	uxtb	r3, r3
 8008274:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 8008276:	4a39      	ldr	r2, [pc, #228]	; (800835c <ExecuteMonitor+0x388>)
 8008278:	2101      	movs	r1, #1
 800827a:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 800827c:	4a35      	ldr	r2, [pc, #212]	; (8008354 <ExecuteMonitor+0x380>)
 800827e:	7812      	ldrb	r2, [r2, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d018      	beq.n	80082b6 <ExecuteMonitor+0x2e2>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008284:	783a      	ldrb	r2, [r7, #0]
 8008286:	7830      	ldrb	r0, [r6, #0]
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	7033      	strb	r3, [r6, #0]
 800828c:	7829      	ldrb	r1, [r5, #0]
 800828e:	1c4b      	adds	r3, r1, #1
 8008290:	702b      	strb	r3, [r5, #0]
 8008292:	4c34      	ldr	r4, [pc, #208]	; (8008364 <ExecuteMonitor+0x390>)
 8008294:	0113      	lsls	r3, r2, #4
 8008296:	1a9a      	subs	r2, r3, r2
 8008298:	4b2b      	ldr	r3, [pc, #172]	; (8008348 <ExecuteMonitor+0x374>)
 800829a:	189b      	adds	r3, r3, r2
 800829c:	5c1b      	ldrb	r3, [r3, r0]
 800829e:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 80082a0:	2001      	movs	r0, #1
 80082a2:	f008 fc77 	bl	8010b94 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80082a6:	782b      	ldrb	r3, [r5, #0]
 80082a8:	18e4      	adds	r4, r4, r3
 80082aa:	3c01      	subs	r4, #1
 80082ac:	7823      	ldrb	r3, [r4, #0]
 80082ae:	2220      	movs	r2, #32
 80082b0:	4393      	bics	r3, r2
 80082b2:	d1e7      	bne.n	8008284 <ExecuteMonitor+0x2b0>
 80082b4:	e7da      	b.n	800826c <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <ExecuteMonitor+0x38c>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 80082bc:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <ExecuteMonitor+0x35c>)
 80082be:	791b      	ldrb	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01d      	beq.n	8008300 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <ExecuteMonitor+0x394>)
 80082c6:	4699      	mov	r9, r3
 80082c8:	2500      	movs	r5, #0
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80082ca:	4f28      	ldr	r7, [pc, #160]	; (800836c <ExecuteMonitor+0x398>)
 80082cc:	4e25      	ldr	r6, [pc, #148]	; (8008364 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082ce:	464b      	mov	r3, r9
 80082d0:	701d      	strb	r5, [r3, #0]
 80082d2:	2300      	movs	r3, #0
 80082d4:	4c24      	ldr	r4, [pc, #144]	; (8008368 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80082d6:	18fa      	adds	r2, r7, r3
 80082d8:	3281      	adds	r2, #129	; 0x81
 80082da:	32ff      	adds	r2, #255	; 0xff
 80082dc:	5cf3      	ldrb	r3, [r6, r3]
 80082de:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80082e0:	20c8      	movs	r0, #200	; 0xc8
 80082e2:	f006 f8f1 	bl	800e4c8 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082e6:	7823      	ldrb	r3, [r4, #0]
 80082e8:	3301      	adds	r3, #1
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	7023      	strb	r3, [r4, #0]
 80082ee:	2b3f      	cmp	r3, #63	; 0x3f
 80082f0:	d9f1      	bls.n	80082d6 <ExecuteMonitor+0x302>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 80082f2:	4c0f      	ldr	r4, [pc, #60]	; (8008330 <ExecuteMonitor+0x35c>)
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	f008 fc4d 	bl	8010b94 <HAL_Delay>
                  while(flag != NonActive)
 80082fa:	7923      	ldrb	r3, [r4, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e6      	bne.n	80082ce <ExecuteMonitor+0x2fa>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008300:	2240      	movs	r2, #64	; 0x40
 8008302:	2100      	movs	r1, #0
 8008304:	4817      	ldr	r0, [pc, #92]	; (8008364 <ExecuteMonitor+0x390>)
 8008306:	f00c fb25 	bl	8014954 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 800830a:	22c0      	movs	r2, #192	; 0xc0
 800830c:	2100      	movs	r1, #0
 800830e:	4818      	ldr	r0, [pc, #96]	; (8008370 <ExecuteMonitor+0x39c>)
 8008310:	f00c fb20 	bl	8014954 <memset>
		                    nonProcessingParameterIndex=0;
 8008314:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <ExecuteMonitor+0x36c>)
 8008316:	469b      	mov	fp, r3
 8008318:	2300      	movs	r3, #0
 800831a:	4699      	mov	r9, r3
 800831c:	469a      	mov	sl, r3
		            	    perviousCharacter= INTIAL_VALUE;
 800831e:	4f07      	ldr	r7, [pc, #28]	; (800833c <ExecuteMonitor+0x368>)
 8008320:	e6b5      	b.n	800808e <ExecuteMonitor+0xba>
		           }
	}
  }
}
 8008322:	b003      	add	sp, #12
 8008324:	bc3c      	pop	{r2, r3, r4, r5}
 8008326:	4690      	mov	r8, r2
 8008328:	4699      	mov	r9, r3
 800832a:	46a2      	mov	sl, r4
 800832c:	46ab      	mov	fp, r5
 800832e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008330:	20000000 	.word	0x20000000
 8008334:	20001870 	.word	0x20001870
 8008338:	200018cc 	.word	0x200018cc
 800833c:	20006ed4 	.word	0x20006ed4
 8008340:	20006ef5 	.word	0x20006ef5
 8008344:	20006f17 	.word	0x20006f17
 8008348:	200018e0 	.word	0x200018e0
 800834c:	20006f16 	.word	0x20006f16
 8008350:	20006ef4 	.word	0x20006ef4
 8008354:	20006f14 	.word	0x20006f14
 8008358:	20006f18 	.word	0x20006f18
 800835c:	20006f15 	.word	0x20006f15
 8008360:	20006ef6 	.word	0x20006ef6
 8008364:	2000188c 	.word	0x2000188c
 8008368:	20006ed5 	.word	0x20006ed5
 800836c:	20001348 	.word	0x20001348
 8008370:	200014c8 	.word	0x200014c8

08008374 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch(indMode){
 8008376:	4c28      	ldr	r4, [pc, #160]	; (8008418 <StartDefaultTask+0xa4>)
				indMode =IND_OFF;
 8008378:	0026      	movs	r6, r4
				indMode =IND_OFF;
 800837a:	0025      	movs	r5, r4
 800837c:	e020      	b.n	80083c0 <StartDefaultTask+0x4c>
				RTOS_IND_blink(200);
 800837e:	2790      	movs	r7, #144	; 0x90
 8008380:	05ff      	lsls	r7, r7, #23
 8008382:	2201      	movs	r2, #1
 8008384:	2180      	movs	r1, #128	; 0x80
 8008386:	0038      	movs	r0, r7
 8008388:	f00a f820 	bl	80123cc <HAL_GPIO_WritePin>
 800838c:	20c8      	movs	r0, #200	; 0xc8
 800838e:	f006 fbd6 	bl	800eb3e <osDelay>
 8008392:	2200      	movs	r2, #0
 8008394:	2180      	movs	r1, #128	; 0x80
 8008396:	0038      	movs	r0, r7
 8008398:	f00a f818 	bl	80123cc <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800839c:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <StartDefaultTask+0xa4>)
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 80083a2:	f000 fe25 	bl	8008ff0 <CheckAttachedButtons>
		ExecuteSnippet();
 80083a6:	f7fd f895 	bl	80054d4 <ExecuteSnippet>
		ExecuteMonitor();
 80083aa:	f7ff fe13 	bl	8007fd4 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 80083ae:	4b1b      	ldr	r3, [pc, #108]	; (800841c <StartDefaultTask+0xa8>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <StartDefaultTask+0x48>
			delayButtonStateReset = false;
 80083b6:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <StartDefaultTask+0xac>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 80083bc:	f008 fa6c 	bl	8010898 <vPortYield>
		switch(indMode){
 80083c0:	7823      	ldrb	r3, [r4, #0]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d004      	beq.n	80083d0 <StartDefaultTask+0x5c>
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d014      	beq.n	80083f4 <StartDefaultTask+0x80>
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d1e9      	bne.n	80083a2 <StartDefaultTask+0x2e>
 80083ce:	e7d6      	b.n	800837e <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 80083d0:	2790      	movs	r7, #144	; 0x90
 80083d2:	05ff      	lsls	r7, r7, #23
 80083d4:	2201      	movs	r2, #1
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	0038      	movs	r0, r7
 80083da:	f009 fff7 	bl	80123cc <HAL_GPIO_WritePin>
 80083de:	2064      	movs	r0, #100	; 0x64
 80083e0:	f006 fbad 	bl	800eb3e <osDelay>
 80083e4:	2200      	movs	r2, #0
 80083e6:	2180      	movs	r1, #128	; 0x80
 80083e8:	0038      	movs	r0, r7
 80083ea:	f009 ffef 	bl	80123cc <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80083ee:	2300      	movs	r3, #0
 80083f0:	7033      	strb	r3, [r6, #0]
				break;
 80083f2:	e7d6      	b.n	80083a2 <StartDefaultTask+0x2e>
				RTOS_IND_blink(30);
 80083f4:	2790      	movs	r7, #144	; 0x90
 80083f6:	05ff      	lsls	r7, r7, #23
 80083f8:	2201      	movs	r2, #1
 80083fa:	2180      	movs	r1, #128	; 0x80
 80083fc:	0038      	movs	r0, r7
 80083fe:	f009 ffe5 	bl	80123cc <HAL_GPIO_WritePin>
 8008402:	201e      	movs	r0, #30
 8008404:	f006 fb9b 	bl	800eb3e <osDelay>
 8008408:	2200      	movs	r2, #0
 800840a:	2180      	movs	r1, #128	; 0x80
 800840c:	0038      	movs	r0, r7
 800840e:	f009 ffdd 	bl	80123cc <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008412:	2300      	movs	r3, #0
 8008414:	702b      	strb	r3, [r5, #0]
				break;
 8008416:	e7c4      	b.n	80083a2 <StartDefaultTask+0x2e>
 8008418:	20000f68 	.word	0x20000f68
 800841c:	200019c1 	.word	0x200019c1
 8008420:	200019bf 	.word	0x200019bf

08008424 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8008424:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008426:	4b04      	ldr	r3, [pc, #16]	; (8008438 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	4904      	ldr	r1, [pc, #16]	; (800843c <vMainConfigureTimerForRunTimeStats+0x18>)
 800842c:	f7f7 fe90 	bl	8000150 <__udivsi3>
 8008430:	4b03      	ldr	r3, [pc, #12]	; (8008440 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8008432:	6018      	str	r0, [r3, #0]
}
 8008434:	bd10      	pop	{r4, pc}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	20000100 	.word	0x20000100
 800843c:	00002710 	.word	0x00002710
 8008440:	20001958 	.word	0x20001958

08008444 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008444:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <ulMainGetRunTimeCounterValue+0x40>)
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	21fa      	movs	r1, #250	; 0xfa
 800844c:	0089      	lsls	r1, r1, #2
 800844e:	f7f7 fe7f 	bl	8000150 <__udivsi3>
 8008452:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <ulMainGetRunTimeCounterValue+0x44>)
 8008456:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008458:	f007 fafe 	bl	800fa58 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 800845c:	4b0b      	ldr	r3, [pc, #44]	; (800848c <ulMainGetRunTimeCounterValue+0x48>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	015b      	lsls	r3, r3, #5
 8008462:	d50d      	bpl.n	8008480 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8008464:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008466:	4b08      	ldr	r3, [pc, #32]	; (8008488 <ulMainGetRunTimeCounterValue+0x44>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 800846c:	0084      	lsls	r4, r0, #2
 800846e:	1824      	adds	r4, r4, r0
 8008470:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <ulMainGetRunTimeCounterValue+0x4c>)
 8008474:	6819      	ldr	r1, [r3, #0]
 8008476:	0028      	movs	r0, r5
 8008478:	f7f7 fe6a 	bl	8000150 <__udivsi3>
 800847c:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 800847e:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008480:	1b2d      	subs	r5, r5, r4
 8008482:	e7f3      	b.n	800846c <ulMainGetRunTimeCounterValue+0x28>
 8008484:	20000100 	.word	0x20000100
 8008488:	e000e018 	.word	0xe000e018
 800848c:	e000ed04 	.word	0xe000ed04
 8008490:	20001958 	.word	0x20001958

08008494 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 8008494:	4770      	bx	lr
	...

08008498 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 8008498:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800849a:	00c2      	lsls	r2, r0, #3
 800849c:	1812      	adds	r2, r2, r0
 800849e:	4b1b      	ldr	r3, [pc, #108]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084a0:	189b      	adds	r3, r3, r2
 80084a2:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 80084a4:	0082      	lsls	r2, r0, #2
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <CheckForTimedButtonPress+0x78>)
 80084a8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 80084aa:	0163      	lsls	r3, r4, #5
 80084ac:	1b1b      	subs	r3, r3, r4
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	191b      	adds	r3, r3, r4
 80084b2:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 80084b4:	4299      	cmp	r1, r3
 80084b6:	d01c      	beq.n	80084f2 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 80084b8:	00c2      	lsls	r2, r0, #3
 80084ba:	1812      	adds	r2, r2, r0
 80084bc:	4b13      	ldr	r3, [pc, #76]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 80084c2:	0163      	lsls	r3, r4, #5
 80084c4:	1b1b      	subs	r3, r3, r4
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	191b      	adds	r3, r3, r4
 80084ca:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d017      	beq.n	8008500 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 80084d0:	00c2      	lsls	r2, r0, #3
 80084d2:	1812      	adds	r2, r2, r0
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084d6:	189b      	adds	r3, r3, r2
 80084d8:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 80084da:	0163      	lsls	r3, r4, #5
 80084dc:	1b1b      	subs	r3, r3, r4
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	191b      	adds	r3, r3, r4
 80084e2:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 80084e4:	4299      	cmp	r1, r3
 80084e6:	d109      	bne.n	80084fc <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 80084e8:	0010      	movs	r0, r2
 80084ea:	4b08      	ldr	r3, [pc, #32]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084ec:	220a      	movs	r2, #10
 80084ee:	54c2      	strb	r2, [r0, r3]
 80084f0:	e004      	b.n	80084fc <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 80084f2:	00c3      	lsls	r3, r0, #3
 80084f4:	1818      	adds	r0, r3, r0
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084f8:	2209      	movs	r2, #9
 80084fa:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 80084fc:	2000      	movs	r0, #0
 80084fe:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008500:	0010      	movs	r0, r2
 8008502:	4b02      	ldr	r3, [pc, #8]	; (800850c <CheckForTimedButtonPress+0x74>)
 8008504:	220a      	movs	r2, #10
 8008506:	54c2      	strb	r2, [r0, r3]
 8008508:	e7f8      	b.n	80084fc <CheckForTimedButtonPress+0x64>
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	20001974 	.word	0x20001974
 8008510:	200019c8 	.word	0x200019c8

08008514 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 8008514:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8008516:	00c2      	lsls	r2, r0, #3
 8008518:	1812      	adds	r2, r2, r0
 800851a:	4b1b      	ldr	r3, [pc, #108]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 800851c:	189b      	adds	r3, r3, r2
 800851e:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 8008520:	0082      	lsls	r2, r0, #2
 8008522:	4b1a      	ldr	r3, [pc, #104]	; (800858c <CheckForTimedButtonRelease+0x78>)
 8008524:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 8008526:	0163      	lsls	r3, r4, #5
 8008528:	1b1b      	subs	r3, r3, r4
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	191b      	adds	r3, r3, r4
 800852e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 8008530:	4299      	cmp	r1, r3
 8008532:	d01c      	beq.n	800856e <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8008534:	00c2      	lsls	r2, r0, #3
 8008536:	1812      	adds	r2, r2, r0
 8008538:	4b13      	ldr	r3, [pc, #76]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 800853a:	189b      	adds	r3, r3, r2
 800853c:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800853e:	0163      	lsls	r3, r4, #5
 8008540:	1b1b      	subs	r3, r3, r4
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	191b      	adds	r3, r3, r4
 8008546:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 8008548:	4299      	cmp	r1, r3
 800854a:	d017      	beq.n	800857c <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800854c:	00c2      	lsls	r2, r0, #3
 800854e:	1812      	adds	r2, r2, r0
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008552:	189b      	adds	r3, r3, r2
 8008554:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 8008556:	0163      	lsls	r3, r4, #5
 8008558:	1b1b      	subs	r3, r3, r4
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	191b      	adds	r3, r3, r4
 800855e:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 8008560:	4299      	cmp	r1, r3
 8008562:	d109      	bne.n	8008578 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008564:	0010      	movs	r0, r2
 8008566:	4b08      	ldr	r3, [pc, #32]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008568:	220d      	movs	r2, #13
 800856a:	54c2      	strb	r2, [r0, r3]
 800856c:	e004      	b.n	8008578 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800856e:	00c3      	lsls	r3, r0, #3
 8008570:	1818      	adds	r0, r3, r0
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008574:	220c      	movs	r2, #12
 8008576:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 8008578:	2000      	movs	r0, #0
 800857a:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800857c:	0010      	movs	r0, r2
 800857e:	4b02      	ldr	r3, [pc, #8]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008580:	220d      	movs	r2, #13
 8008582:	54c2      	strb	r2, [r0, r3]
 8008584:	e7f8      	b.n	8008578 <CheckForTimedButtonRelease+0x64>
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	20001974 	.word	0x20001974
 800858c:	200019e4 	.word	0x200019e4

08008590 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	b08d      	sub	sp, #52	; 0x34
 8008594:	0006      	movs	r6, r0
 8008596:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8008598:	4b41      	ldr	r3, [pc, #260]	; (80086a0 <AddPortButton+0x110>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d157      	bne.n	8008650 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 80085a0:	4b40      	ldr	r3, [pc, #256]	; (80086a4 <AddPortButton+0x114>)
 80085a2:	2204      	movs	r2, #4
 80085a4:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 80085a6:	4b3e      	ldr	r3, [pc, #248]	; (80086a0 <AddPortButton+0x110>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d15a      	bne.n	8008664 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 80085ae:	2512      	movs	r5, #18
 80085b0:	446d      	add	r5, sp
 80085b2:	af04      	add	r7, sp, #16
 80085b4:	9700      	str	r7, [sp, #0]
 80085b6:	ab05      	add	r3, sp, #20
 80085b8:	002a      	movs	r2, r5
 80085ba:	a906      	add	r1, sp, #24
 80085bc:	0020      	movs	r0, r4
 80085be:	f005 fb61 	bl	800dc84 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 80085c2:	882b      	ldrh	r3, [r5, #0]
 80085c4:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085c6:	2301      	movs	r3, #1
 80085c8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ca:	2500      	movs	r5, #0
 80085cc:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80085ce:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 80085d0:	a907      	add	r1, sp, #28
 80085d2:	9806      	ldr	r0, [sp, #24]
 80085d4:	f009 fd86 	bl	80120e4 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 80085d8:	883b      	ldrh	r3, [r7, #0]
 80085da:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085dc:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80085de:	2302      	movs	r3, #2
 80085e0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 80085e2:	a907      	add	r1, sp, #28
 80085e4:	9805      	ldr	r0, [sp, #20]
 80085e6:	f009 fd7d 	bl	80120e4 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 80085ea:	00e2      	lsls	r2, r4, #3
 80085ec:	1912      	adds	r2, r2, r4
 80085ee:	4b2e      	ldr	r3, [pc, #184]	; (80086a8 <AddPortButton+0x118>)
 80085f0:	189b      	adds	r3, r3, r2
 80085f2:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80085f4:	0025      	movs	r5, r4
 80085f6:	353a      	adds	r5, #58	; 0x3a
 80085f8:	00ad      	lsls	r5, r5, #2
 80085fa:	210e      	movs	r1, #14
 80085fc:	4469      	add	r1, sp
 80085fe:	0028      	movs	r0, r5
 8008600:	f7ff f8e8 	bl	80077d4 <EE_ReadVariable>
	if (!res)											// This variable exists
 8008604:	2800      	cmp	r0, #0
 8008606:	d133      	bne.n	8008670 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 8008608:	230e      	movs	r3, #14
 800860a:	446b      	add	r3, sp
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8008610:	091a      	lsrs	r2, r3, #4
 8008612:	42a2      	cmp	r2, r4
 8008614:	d103      	bne.n	800861e <AddPortButton+0x8e>
 8008616:	220f      	movs	r2, #15
 8008618:	4013      	ands	r3, r2
 800861a:	42b3      	cmp	r3, r6
 800861c:	d015      	beq.n	800864a <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800861e:	0324      	lsls	r4, r4, #12
 8008620:	0231      	lsls	r1, r6, #8
 8008622:	4321      	orrs	r1, r4
 8008624:	b289      	uxth	r1, r1
 8008626:	230e      	movs	r3, #14
 8008628:	446b      	add	r3, sp
 800862a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800862c:	0028      	movs	r0, r5
 800862e:	f7ff f901 	bl	8007834 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008632:	1c68      	adds	r0, r5, #1
 8008634:	2100      	movs	r1, #0
 8008636:	f7ff f8fd 	bl	8007834 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800863a:	1ca8      	adds	r0, r5, #2
 800863c:	2100      	movs	r1, #0
 800863e:	f7ff f8f9 	bl	8007834 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008642:	1ce8      	adds	r0, r5, #3
 8008644:	2100      	movs	r1, #0
 8008646:	f7ff f8f5 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800864a:	2000      	movs	r0, #0
 800864c:	b00d      	add	sp, #52	; 0x34
 800864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008650:	008d      	lsls	r5, r1, #2
 8008652:	4b16      	ldr	r3, [pc, #88]	; (80086ac <AddPortButton+0x11c>)
 8008654:	58e8      	ldr	r0, [r5, r3]
 8008656:	f006 fabd 	bl	800ebd4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <AddPortButton+0x120>)
 800865c:	58e8      	ldr	r0, [r5, r3]
 800865e:	f006 fab9 	bl	800ebd4 <osSemaphoreRelease>
 8008662:	e79d      	b.n	80085a0 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008664:	0020      	movs	r0, r4
 8008666:	f006 f91b 	bl	800e8a0 <GetUart>
 800866a:	f00b f922 	bl	80138b2 <HAL_UART_DeInit>
 800866e:	e79e      	b.n	80085ae <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 8008670:	0324      	lsls	r4, r4, #12
 8008672:	0231      	lsls	r1, r6, #8
 8008674:	4321      	orrs	r1, r4
 8008676:	b289      	uxth	r1, r1
 8008678:	230e      	movs	r3, #14
 800867a:	446b      	add	r3, sp
 800867c:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800867e:	0028      	movs	r0, r5
 8008680:	f7ff f8d8 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008684:	1c68      	adds	r0, r5, #1
 8008686:	2100      	movs	r1, #0
 8008688:	f7ff f8d4 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800868c:	1ca8      	adds	r0, r5, #2
 800868e:	2100      	movs	r1, #0
 8008690:	f7ff f8d0 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008694:	1ce8      	adds	r0, r5, #3
 8008696:	2100      	movs	r1, #0
 8008698:	f7ff f8cc 	bl	8007834 <EE_WriteVariable>
 800869c:	e7d5      	b.n	800864a <AddPortButton+0xba>
 800869e:	46c0      	nop			; (mov r8, r8)
 80086a0:	20000ae6 	.word	0x20000ae6
 80086a4:	2000116c 	.word	0x2000116c
 80086a8:	20001974 	.word	0x20001974
 80086ac:	20006ef8 	.word	0x20006ef8
 80086b0:	20006ed8 	.word	0x20006ed8

080086b4 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 80086ba:	4837      	ldr	r0, [pc, #220]	; (8008798 <RemovePortButton+0xe4>)
 80086bc:	00e9      	lsls	r1, r5, #3
 80086be:	1949      	adds	r1, r1, r5
 80086c0:	1842      	adds	r2, r0, r1
 80086c2:	2300      	movs	r3, #0
 80086c4:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 80086c6:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 80086c8:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 80086ca:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 80086cc:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 80086ce:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 80086d0:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 80086d2:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 80086d4:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80086d6:	002c      	movs	r4, r5
 80086d8:	343a      	adds	r4, #58	; 0x3a
 80086da:	00a4      	lsls	r4, r4, #2
 80086dc:	466b      	mov	r3, sp
 80086de:	1d99      	adds	r1, r3, #6
 80086e0:	0020      	movs	r0, r4
 80086e2:	f7ff f877 	bl	80077d4 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d02b      	beq.n	8008742 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 80086ea:	0028      	movs	r0, r5
 80086ec:	f006 f8d8 	bl	800e8a0 <GetUart>
 80086f0:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 80086f2:	6803      	ldr	r3, [r0, #0]
 80086f4:	4a29      	ldr	r2, [pc, #164]	; (800879c <RemovePortButton+0xe8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d034      	beq.n	8008764 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 80086fa:	4a29      	ldr	r2, [pc, #164]	; (80087a0 <RemovePortButton+0xec>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d035      	beq.n	800876c <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 8008700:	4a28      	ldr	r2, [pc, #160]	; (80087a4 <RemovePortButton+0xf0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d036      	beq.n	8008774 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 8008706:	4a28      	ldr	r2, [pc, #160]	; (80087a8 <RemovePortButton+0xf4>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d037      	beq.n	800877c <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800870c:	4a27      	ldr	r2, [pc, #156]	; (80087ac <RemovePortButton+0xf8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d038      	beq.n	8008784 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 8008712:	4a27      	ldr	r2, [pc, #156]	; (80087b0 <RemovePortButton+0xfc>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d039      	beq.n	800878c <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 8008718:	4a26      	ldr	r2, [pc, #152]	; (80087b4 <RemovePortButton+0x100>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d03a      	beq.n	8008794 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800871e:	4a26      	ldr	r2, [pc, #152]	; (80087b8 <RemovePortButton+0x104>)
 8008720:	4694      	mov	ip, r2
 8008722:	4463      	add	r3, ip
 8008724:	1e5c      	subs	r4, r3, #1
 8008726:	41a3      	sbcs	r3, r4
 8008728:	425c      	negs	r4, r3
 800872a:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800872c:	4b23      	ldr	r3, [pc, #140]	; (80087bc <RemovePortButton+0x108>)
 800872e:	2200      	movs	r2, #0
 8008730:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 8008732:	3201      	adds	r2, #1
 8008734:	4922      	ldr	r1, [pc, #136]	; (80087c0 <RemovePortButton+0x10c>)
 8008736:	0030      	movs	r0, r6
 8008738:	f00b f914 	bl	8013964 <HAL_UART_Receive_IT>

	return result;
}
 800873c:	0020      	movs	r0, r4
 800873e:	b002      	add	sp, #8
 8008740:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 8008742:	2100      	movs	r1, #0
 8008744:	0020      	movs	r0, r4
 8008746:	f7ff f875 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800874a:	1c60      	adds	r0, r4, #1
 800874c:	2100      	movs	r1, #0
 800874e:	f7ff f871 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8008752:	1ca0      	adds	r0, r4, #2
 8008754:	2100      	movs	r1, #0
 8008756:	f7ff f86d 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800875a:	1ce0      	adds	r0, r4, #3
 800875c:	2100      	movs	r1, #0
 800875e:	f7ff f869 	bl	8007834 <EE_WriteVariable>
 8008762:	e7c2      	b.n	80086ea <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008764:	f005 fed4 	bl	800e510 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008768:	2400      	movs	r4, #0
 800876a:	e7df      	b.n	800872c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800876c:	f005 fee8 	bl	800e540 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008770:	2400      	movs	r4, #0
 8008772:	e7db      	b.n	800872c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008774:	f005 fefc 	bl	800e570 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008778:	2400      	movs	r4, #0
 800877a:	e7d7      	b.n	800872c <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800877c:	f005 ff10 	bl	800e5a0 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008780:	2400      	movs	r4, #0
 8008782:	e7d3      	b.n	800872c <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008784:	f005 ff24 	bl	800e5d0 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008788:	2400      	movs	r4, #0
 800878a:	e7cf      	b.n	800872c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800878c:	f005 ff38 	bl	800e600 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008790:	2400      	movs	r4, #0
 8008792:	e7cb      	b.n	800872c <RemovePortButton+0x78>
 8008794:	2400      	movs	r4, #0
 8008796:	e7c9      	b.n	800872c <RemovePortButton+0x78>
 8008798:	20001974 	.word	0x20001974
 800879c:	40013800 	.word	0x40013800
 80087a0:	40004400 	.word	0x40004400
 80087a4:	40004800 	.word	0x40004800
 80087a8:	40004c00 	.word	0x40004c00
 80087ac:	40005000 	.word	0x40005000
 80087b0:	40011400 	.word	0x40011400
 80087b4:	40011800 	.word	0x40011800
 80087b8:	bffee400 	.word	0xbffee400
 80087bc:	2000116c 	.word	0x2000116c
 80087c0:	20000ecc 	.word	0x20000ecc

080087c4 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 80087c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087c6:	46de      	mov	lr, fp
 80087c8:	4657      	mov	r7, sl
 80087ca:	464e      	mov	r6, r9
 80087cc:	4645      	mov	r5, r8
 80087ce:	b5e0      	push	{r5, r6, r7, lr}
 80087d0:	b085      	sub	sp, #20
 80087d2:	0007      	movs	r7, r0
 80087d4:	001e      	movs	r6, r3
 80087d6:	ab0e      	add	r3, sp, #56	; 0x38
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	4698      	mov	r8, r3
 80087dc:	ab0f      	add	r3, sp, #60	; 0x3c
 80087de:	781d      	ldrb	r5, [r3, #0]
 80087e0:	ab10      	add	r3, sp, #64	; 0x40
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	469b      	mov	fp, r3
 80087e6:	ab11      	add	r3, sp, #68	; 0x44
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	469a      	mov	sl, r3
 80087ec:	ab12      	add	r3, sp, #72	; 0x48
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4699      	mov	r9, r3
 80087f2:	ab13      	add	r3, sp, #76	; 0x4c
 80087f4:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 80087f6:	00fc      	lsls	r4, r7, #3
 80087f8:	19e4      	adds	r4, r4, r7
 80087fa:	4b9e      	ldr	r3, [pc, #632]	; (8008a74 <SetButtonEvents+0x2b0>)
 80087fc:	191b      	adds	r3, r3, r4
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d04c      	beq.n	800889e <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 8008804:	00fc      	lsls	r4, r7, #3
 8008806:	19e4      	adds	r4, r4, r7
 8008808:	4b9a      	ldr	r3, [pc, #616]	; (8008a74 <SetButtonEvents+0x2b0>)
 800880a:	191b      	adds	r3, r3, r4
 800880c:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800880e:	4644      	mov	r4, r8
 8008810:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 8008812:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 8008814:	465c      	mov	r4, fp
 8008816:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 8008818:	4654      	mov	r4, sl
 800881a:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800881c:	464c      	mov	r4, r9
 800881e:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 8008820:	2801      	cmp	r0, #1
 8008822:	d003      	beq.n	800882c <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 8008824:	2800      	cmp	r0, #0
 8008826:	d113      	bne.n	8008850 <SetButtonEvents+0x8c>
 8008828:	2900      	cmp	r1, #0
 800882a:	d042      	beq.n	80088b2 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800882c:	00f9      	lsls	r1, r7, #3
 800882e:	19c9      	adds	r1, r1, r7
 8008830:	4b90      	ldr	r3, [pc, #576]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008832:	185b      	adds	r3, r3, r1
 8008834:	7a19      	ldrb	r1, [r3, #8]
 8008836:	2401      	movs	r4, #1
 8008838:	4321      	orrs	r1, r4
 800883a:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800883c:	2801      	cmp	r0, #1
 800883e:	d10c      	bne.n	800885a <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008840:	00fa      	lsls	r2, r7, #3
 8008842:	19d2      	adds	r2, r2, r7
 8008844:	4b8b      	ldr	r3, [pc, #556]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008846:	189b      	adds	r3, r3, r2
 8008848:	7a1a      	ldrb	r2, [r3, #8]
 800884a:	2102      	movs	r1, #2
 800884c:	430a      	orrs	r2, r1
 800884e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 8008850:	2801      	cmp	r0, #1
 8008852:	d042      	beq.n	80088da <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8008854:	2800      	cmp	r0, #0
 8008856:	d152      	bne.n	80088fe <SetButtonEvents+0x13a>
 8008858:	e03d      	b.n	80088d6 <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800885a:	2800      	cmp	r0, #0
 800885c:	d031      	beq.n	80088c2 <SetButtonEvents+0xfe>
 800885e:	e044      	b.n	80088ea <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008860:	2800      	cmp	r0, #0
 8008862:	d059      	beq.n	8008918 <SetButtonEvents+0x154>
 8008864:	e06d      	b.n	8008942 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8008866:	2800      	cmp	r0, #0
 8008868:	d100      	bne.n	800886c <SetButtonEvents+0xa8>
 800886a:	e082      	b.n	8008972 <SetButtonEvents+0x1ae>
 800886c:	e097      	b.n	800899e <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800886e:	2800      	cmp	r0, #0
 8008870:	d100      	bne.n	8008874 <SetButtonEvents+0xb0>
 8008872:	e0f2      	b.n	8008a5a <SetButtonEvents+0x296>
 8008874:	e09f      	b.n	80089b6 <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8008876:	0a19      	lsrs	r1, r3, #8
 8008878:	0209      	lsls	r1, r1, #8
 800887a:	4311      	orrs	r1, r2
 800887c:	ab02      	add	r3, sp, #8
 800887e:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008880:	0020      	movs	r0, r4
 8008882:	f7fe ffd7 	bl	8007834 <EE_WriteVariable>
 8008886:	e0ad      	b.n	80089e4 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 8008888:	0019      	movs	r1, r3
 800888a:	9801      	ldr	r0, [sp, #4]
 800888c:	f7fe ffd2 	bl	8007834 <EE_WriteVariable>
 8008890:	e0b7      	b.n	8008a02 <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 8008892:	4653      	mov	r3, sl
 8008894:	4319      	orrs	r1, r3
 8008896:	0030      	movs	r0, r6
 8008898:	f7fe ffcc 	bl	8007834 <EE_WriteVariable>
 800889c:	e0c0      	b.n	8008a20 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800889e:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 80088a0:	b005      	add	sp, #20
 80088a2:	bc3c      	pop	{r2, r3, r4, r5}
 80088a4:	4690      	mov	r8, r2
 80088a6:	4699      	mov	r9, r3
 80088a8:	46a2      	mov	sl, r4
 80088aa:	46ab      	mov	fp, r5
 80088ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80088ae:	200b      	movs	r0, #11
 80088b0:	e7f6      	b.n	80088a0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 80088b2:	00f9      	lsls	r1, r7, #3
 80088b4:	19c9      	adds	r1, r1, r7
 80088b6:	4b6f      	ldr	r3, [pc, #444]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088b8:	185b      	adds	r3, r3, r1
 80088ba:	7a19      	ldrb	r1, [r3, #8]
 80088bc:	2401      	movs	r4, #1
 80088be:	43a1      	bics	r1, r4
 80088c0:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	d1bc      	bne.n	8008840 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 80088c6:	00fa      	lsls	r2, r7, #3
 80088c8:	19d2      	adds	r2, r2, r7
 80088ca:	4b6a      	ldr	r3, [pc, #424]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088cc:	189b      	adds	r3, r3, r2
 80088ce:	7a1a      	ldrb	r2, [r3, #8]
 80088d0:	2102      	movs	r1, #2
 80088d2:	438a      	bics	r2, r1
 80088d4:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d016      	beq.n	8008908 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80088da:	00fa      	lsls	r2, r7, #3
 80088dc:	19d2      	adds	r2, r2, r7
 80088de:	4b65      	ldr	r3, [pc, #404]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088e0:	189b      	adds	r3, r3, r2
 80088e2:	7a1a      	ldrb	r2, [r3, #8]
 80088e4:	2104      	movs	r1, #4
 80088e6:	430a      	orrs	r2, r1
 80088e8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80088ea:	2801      	cmp	r0, #1
 80088ec:	d1b8      	bne.n	8008860 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80088ee:	00fa      	lsls	r2, r7, #3
 80088f0:	19d2      	adds	r2, r2, r7
 80088f2:	4b60      	ldr	r3, [pc, #384]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088f4:	189b      	adds	r3, r3, r2
 80088f6:	7a1a      	ldrb	r2, [r3, #8]
 80088f8:	2108      	movs	r1, #8
 80088fa:	430a      	orrs	r2, r1
 80088fc:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80088fe:	2801      	cmp	r0, #1
 8008900:	d017      	beq.n	8008932 <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8008902:	2800      	cmp	r0, #0
 8008904:	d128      	bne.n	8008958 <SetButtonEvents+0x194>
 8008906:	e012      	b.n	800892e <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008908:	00fa      	lsls	r2, r7, #3
 800890a:	19d2      	adds	r2, r2, r7
 800890c:	4b59      	ldr	r3, [pc, #356]	; (8008a74 <SetButtonEvents+0x2b0>)
 800890e:	189b      	adds	r3, r3, r2
 8008910:	7a1a      	ldrb	r2, [r3, #8]
 8008912:	2104      	movs	r1, #4
 8008914:	438a      	bics	r2, r1
 8008916:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008918:	4643      	mov	r3, r8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e7      	bne.n	80088ee <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800891e:	00fa      	lsls	r2, r7, #3
 8008920:	19d2      	adds	r2, r2, r7
 8008922:	4b54      	ldr	r3, [pc, #336]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008924:	189b      	adds	r3, r3, r2
 8008926:	7a1a      	ldrb	r2, [r3, #8]
 8008928:	2108      	movs	r1, #8
 800892a:	438a      	bics	r2, r1
 800892c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800892e:	2d00      	cmp	r5, #0
 8008930:	d017      	beq.n	8008962 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008932:	00fa      	lsls	r2, r7, #3
 8008934:	19d2      	adds	r2, r2, r7
 8008936:	4b4f      	ldr	r3, [pc, #316]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008938:	189b      	adds	r3, r3, r2
 800893a:	7a1a      	ldrb	r2, [r3, #8]
 800893c:	2110      	movs	r1, #16
 800893e:	430a      	orrs	r2, r1
 8008940:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008942:	2801      	cmp	r0, #1
 8008944:	d000      	beq.n	8008948 <SetButtonEvents+0x184>
 8008946:	e78e      	b.n	8008866 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008948:	00fa      	lsls	r2, r7, #3
 800894a:	19d2      	adds	r2, r2, r7
 800894c:	4b49      	ldr	r3, [pc, #292]	; (8008a74 <SetButtonEvents+0x2b0>)
 800894e:	189b      	adds	r3, r3, r2
 8008950:	7a1a      	ldrb	r2, [r3, #8]
 8008952:	2120      	movs	r1, #32
 8008954:	430a      	orrs	r2, r1
 8008956:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008958:	2801      	cmp	r0, #1
 800895a:	d018      	beq.n	800898e <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800895c:	2800      	cmp	r0, #0
 800895e:	d12a      	bne.n	80089b6 <SetButtonEvents+0x1f2>
 8008960:	e012      	b.n	8008988 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008962:	00fa      	lsls	r2, r7, #3
 8008964:	19d2      	adds	r2, r2, r7
 8008966:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008968:	189b      	adds	r3, r3, r2
 800896a:	7a1a      	ldrb	r2, [r3, #8]
 800896c:	2110      	movs	r1, #16
 800896e:	438a      	bics	r2, r1
 8008970:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8008972:	465b      	mov	r3, fp
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e7      	bne.n	8008948 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008978:	00fa      	lsls	r2, r7, #3
 800897a:	19d2      	adds	r2, r2, r7
 800897c:	4b3d      	ldr	r3, [pc, #244]	; (8008a74 <SetButtonEvents+0x2b0>)
 800897e:	189b      	adds	r3, r3, r2
 8008980:	7a1a      	ldrb	r2, [r3, #8]
 8008982:	2120      	movs	r1, #32
 8008984:	438a      	bics	r2, r1
 8008986:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008988:	4653      	mov	r3, sl
 800898a:	2b00      	cmp	r3, #0
 800898c:	d05d      	beq.n	8008a4a <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800898e:	00fa      	lsls	r2, r7, #3
 8008990:	19d2      	adds	r2, r2, r7
 8008992:	4b38      	ldr	r3, [pc, #224]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008994:	189b      	adds	r3, r3, r2
 8008996:	7a1a      	ldrb	r2, [r3, #8]
 8008998:	2140      	movs	r1, #64	; 0x40
 800899a:	430a      	orrs	r2, r1
 800899c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800899e:	2801      	cmp	r0, #1
 80089a0:	d000      	beq.n	80089a4 <SetButtonEvents+0x1e0>
 80089a2:	e764      	b.n	800886e <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80089a4:	00fa      	lsls	r2, r7, #3
 80089a6:	19d2      	adds	r2, r2, r7
 80089a8:	4b32      	ldr	r3, [pc, #200]	; (8008a74 <SetButtonEvents+0x2b0>)
 80089aa:	189b      	adds	r3, r3, r2
 80089ac:	7a19      	ldrb	r1, [r3, #8]
 80089ae:	2280      	movs	r2, #128	; 0x80
 80089b0:	4252      	negs	r2, r2
 80089b2:	430a      	orrs	r2, r1
 80089b4:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80089b6:	003c      	movs	r4, r7
 80089b8:	343a      	adds	r4, #58	; 0x3a
 80089ba:	00a4      	lsls	r4, r4, #2
 80089bc:	ab02      	add	r3, sp, #8
 80089be:	1d99      	adds	r1, r3, #6
 80089c0:	0020      	movs	r0, r4
 80089c2:	f7fe ff07 	bl	80077d4 <EE_ReadVariable>
	if (!res)											// This variable exists
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d000      	beq.n	80089cc <SetButtonEvents+0x208>
 80089ca:	e770      	b.n	80088ae <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 80089cc:	ab02      	add	r3, sp, #8
 80089ce:	3306      	adds	r3, #6
 80089d0:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 80089d2:	00fa      	lsls	r2, r7, #3
 80089d4:	19d2      	adds	r2, r2, r7
 80089d6:	4f27      	ldr	r7, [pc, #156]	; (8008a74 <SetButtonEvents+0x2b0>)
 80089d8:	18bf      	adds	r7, r7, r2
 80089da:	7a3a      	ldrb	r2, [r7, #8]
 80089dc:	b2d9      	uxtb	r1, r3
 80089de:	4291      	cmp	r1, r2
 80089e0:	d000      	beq.n	80089e4 <SetButtonEvents+0x220>
 80089e2:	e748      	b.n	8008876 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 80089e4:	1c63      	adds	r3, r4, #1
 80089e6:	aa02      	add	r2, sp, #8
 80089e8:	1d97      	adds	r7, r2, #6
 80089ea:	0039      	movs	r1, r7
 80089ec:	9301      	str	r3, [sp, #4]
 80089ee:	0018      	movs	r0, r3
 80089f0:	f7fe fef0 	bl	80077d4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 80089f4:	0236      	lsls	r6, r6, #8
 80089f6:	883a      	ldrh	r2, [r7, #0]
 80089f8:	465b      	mov	r3, fp
 80089fa:	4333      	orrs	r3, r6
		if (temp16
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d000      	beq.n	8008a02 <SetButtonEvents+0x23e>
 8008a00:	e742      	b.n	8008888 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 8008a02:	1ca6      	adds	r6, r4, #2
 8008a04:	ab02      	add	r3, sp, #8
 8008a06:	1d9f      	adds	r7, r3, #6
 8008a08:	0039      	movs	r1, r7
 8008a0a:	0030      	movs	r0, r6
 8008a0c:	f7fe fee2 	bl	80077d4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 8008a10:	4643      	mov	r3, r8
 8008a12:	0219      	lsls	r1, r3, #8
 8008a14:	883a      	ldrh	r2, [r7, #0]
 8008a16:	4653      	mov	r3, sl
 8008a18:	430b      	orrs	r3, r1
		if (temp16
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d000      	beq.n	8008a20 <SetButtonEvents+0x25c>
 8008a1e:	e738      	b.n	8008892 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 8008a20:	3403      	adds	r4, #3
 8008a22:	ab02      	add	r3, sp, #8
 8008a24:	1d9e      	adds	r6, r3, #6
 8008a26:	0031      	movs	r1, r6
 8008a28:	0020      	movs	r0, r4
 8008a2a:	f7fe fed3 	bl	80077d4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 8008a2e:	022d      	lsls	r5, r5, #8
 8008a30:	8832      	ldrh	r2, [r6, #0]
 8008a32:	464b      	mov	r3, r9
 8008a34:	432b      	orrs	r3, r5
	return result;
 8008a36:	2000      	movs	r0, #0
		if (temp16
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d100      	bne.n	8008a3e <SetButtonEvents+0x27a>
 8008a3c:	e730      	b.n	80088a0 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 8008a3e:	0019      	movs	r1, r3
 8008a40:	0020      	movs	r0, r4
 8008a42:	f7fe fef7 	bl	8007834 <EE_WriteVariable>
	return result;
 8008a46:	2000      	movs	r0, #0
 8008a48:	e72a      	b.n	80088a0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008a4a:	00fa      	lsls	r2, r7, #3
 8008a4c:	19d2      	adds	r2, r2, r7
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008a50:	189b      	adds	r3, r3, r2
 8008a52:	7a1a      	ldrb	r2, [r3, #8]
 8008a54:	2140      	movs	r1, #64	; 0x40
 8008a56:	438a      	bics	r2, r1
 8008a58:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1a1      	bne.n	80089a4 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008a60:	00fa      	lsls	r2, r7, #3
 8008a62:	19d2      	adds	r2, r2, r7
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008a66:	189b      	adds	r3, r3, r2
 8008a68:	7a19      	ldrb	r1, [r3, #8]
 8008a6a:	227f      	movs	r2, #127	; 0x7f
 8008a6c:	400a      	ands	r2, r1
 8008a6e:	721a      	strb	r2, [r3, #8]
 8008a70:	e7a1      	b.n	80089b6 <SetButtonEvents+0x1f2>
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	20001974 	.word	0x20001974

08008a78 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8008a78:	b500      	push	{lr}
 8008a7a:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008a7c:	2214      	movs	r2, #20
 8008a7e:	2100      	movs	r1, #0
 8008a80:	a803      	add	r0, sp, #12
 8008a82:	f00b ff67 	bl	8014954 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008a86:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <HAL_ADC_MspInit+0x58>)
 8008a88:	6999      	ldr	r1, [r3, #24]
 8008a8a:	2080      	movs	r0, #128	; 0x80
 8008a8c:	0080      	lsls	r0, r0, #2
 8008a8e:	4301      	orrs	r1, r0
 8008a90:	6199      	str	r1, [r3, #24]
 8008a92:	699a      	ldr	r2, [r3, #24]
 8008a94:	4002      	ands	r2, r0
 8008a96:	9201      	str	r2, [sp, #4]
 8008a98:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008a9a:	695a      	ldr	r2, [r3, #20]
 8008a9c:	2180      	movs	r1, #128	; 0x80
 8008a9e:	0289      	lsls	r1, r1, #10
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	615a      	str	r2, [r3, #20]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	400b      	ands	r3, r1
 8008aa8:	9302      	str	r3, [sp, #8]
 8008aaa:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 8008aac:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <HAL_ADC_MspInit+0x5c>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d001      	beq.n	8008ab8 <HAL_ADC_MspInit+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 8008ab4:	b009      	add	sp, #36	; 0x24
 8008ab6:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008ab8:	333b      	adds	r3, #59	; 0x3b
 8008aba:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008abc:	3b39      	subs	r3, #57	; 0x39
 8008abe:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 8008ac0:	3871      	subs	r0, #113	; 0x71
 8008ac2:	38ff      	subs	r0, #255	; 0xff
 8008ac4:	a903      	add	r1, sp, #12
 8008ac6:	05c0      	lsls	r0, r0, #23
 8008ac8:	f009 fb0c 	bl	80120e4 <HAL_GPIO_Init>
}
 8008acc:	e7f2      	b.n	8008ab4 <HAL_ADC_MspInit+0x3c>
 8008ace:	46c0      	nop			; (mov r8, r8)
 8008ad0:	40021000 	.word	0x40021000
 8008ad4:	200019c0 	.word	0x200019c0

08008ad8 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 8008ad8:	6803      	ldr	r3, [r0, #0]
 8008ada:	4a0d      	ldr	r2, [pc, #52]	; (8008b10 <Get_channel+0x38>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 8008ae0:	4a0c      	ldr	r2, [pc, #48]	; (8008b14 <Get_channel+0x3c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d008      	beq.n	8008af8 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 8008ae6:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 8008ae8:	4b0b      	ldr	r3, [pc, #44]	; (8008b18 <Get_channel+0x40>)
 8008aea:	4299      	cmp	r1, r3
 8008aec:	d00c      	beq.n	8008b08 <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <Get_channel+0x44>)
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d1f8      	bne.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008af4:	2003      	movs	r0, #3
 8008af6:	e7f6      	b.n	8008ae6 <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <Get_channel+0x40>)
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d006      	beq.n	8008b0c <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 8008afe:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <Get_channel+0x44>)
 8008b00:	4299      	cmp	r1, r3
 8008b02:	d1f0      	bne.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008b04:	2005      	movs	r0, #5
 8008b06:	e7ee      	b.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 8008b08:	2002      	movs	r0, #2
 8008b0a:	e7ec      	b.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008b0c:	2004      	movs	r0, #4
 8008b0e:	e7ea      	b.n	8008ae6 <Get_channel+0xe>
 8008b10:	40004400 	.word	0x40004400
 8008b14:	40011400 	.word	0x40011400
 8008b18:	08019d64 	.word	0x08019d64
 8008b1c:	08019d68 	.word	0x08019d68

08008b20 <Error_Handler>:

void Error_Handler(void) {
 8008b20:	b510      	push	{r4, lr}

	HAL_Delay(100);
 8008b22:	2064      	movs	r0, #100	; 0x64
 8008b24:	f008 f836 	bl	8010b94 <HAL_Delay>

}
 8008b28:	bd10      	pop	{r4, pc}
	...

08008b2c <MX_ADC_Init>:
void MX_ADC_Init(void) {
 8008b2c:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008b2e:	4811      	ldr	r0, [pc, #68]	; (8008b74 <MX_ADC_Init+0x48>)
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <MX_ADC_Init+0x4c>)
 8008b32:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b34:	2380      	movs	r3, #128	; 0x80
 8008b36:	061b      	lsls	r3, r3, #24
 8008b38:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b3e:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b40:	2201      	movs	r2, #1
 8008b42:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b44:	2104      	movs	r1, #4
 8008b46:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8008b48:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008b4a:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 8008b4c:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8008b4e:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b50:	21c2      	movs	r1, #194	; 0xc2
 8008b52:	31ff      	adds	r1, #255	; 0xff
 8008b54:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b56:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008b58:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008b5a:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8008b5c:	f008 f8f4 	bl	8010d48 <HAL_ADC_Init>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d103      	bne.n	8008b6c <MX_ADC_Init+0x40>
	ADC_flag = 1;
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <MX_ADC_Init+0x50>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
}
 8008b6a:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008b6c:	f7ff ffd8 	bl	8008b20 <Error_Handler>
 8008b70:	e7f8      	b.n	8008b64 <MX_ADC_Init+0x38>
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	20006f1c 	.word	0x20006f1c
 8008b78:	40012400 	.word	0x40012400
 8008b7c:	20001960 	.word	0x20001960

08008b80 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	0005      	movs	r5, r0
 8008b86:	000e      	movs	r6, r1
	if (0 == ADC_flag)
 8008b88:	4b4d      	ldr	r3, [pc, #308]	; (8008cc0 <ReadTempAndVref+0x140>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d100      	bne.n	8008b92 <ReadTempAndVref+0x12>
 8008b90:	e087      	b.n	8008ca2 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008b92:	494c      	ldr	r1, [pc, #304]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008b94:	2310      	movs	r3, #16
 8008b96:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	015b      	lsls	r3, r3, #5
 8008b9c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008ba2:	4849      	ldr	r0, [pc, #292]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008ba4:	f008 fa30 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d000      	beq.n	8008bae <ReadTempAndVref+0x2e>
 8008bac:	e07c      	b.n	8008ca8 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 8008bae:	4c46      	ldr	r4, [pc, #280]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	f008 f971 	bl	8010e98 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008bb6:	2164      	movs	r1, #100	; 0x64
 8008bb8:	0020      	movs	r0, r4
 8008bba:	f008 f9bf 	bl	8010f3c <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	f008 fa1c 	bl	8010ffc <HAL_ADC_GetValue>
 8008bc4:	4b41      	ldr	r3, [pc, #260]	; (8008ccc <ReadTempAndVref+0x14c>)
 8008bc6:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008bc8:	0400      	lsls	r0, r0, #16
 8008bca:	0c00      	lsrs	r0, r0, #16
 8008bcc:	f7f9 ff3e 	bl	8002a4c <__aeabi_i2d>
 8008bd0:	4a3f      	ldr	r2, [pc, #252]	; (8008cd0 <ReadTempAndVref+0x150>)
 8008bd2:	4b40      	ldr	r3, [pc, #256]	; (8008cd4 <ReadTempAndVref+0x154>)
 8008bd4:	f7f9 f92e 	bl	8001e34 <__aeabi_dmul>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4b3f      	ldr	r3, [pc, #252]	; (8008cd8 <ReadTempAndVref+0x158>)
 8008bdc:	f7f8 fd20 	bl	8001620 <__aeabi_ddiv>
 8008be0:	4a3e      	ldr	r2, [pc, #248]	; (8008cdc <ReadTempAndVref+0x15c>)
 8008be2:	4b3f      	ldr	r3, [pc, #252]	; (8008ce0 <ReadTempAndVref+0x160>)
 8008be4:	f7f9 fb98 	bl	8002318 <__aeabi_dsub>
 8008be8:	4a3e      	ldr	r2, [pc, #248]	; (8008ce4 <ReadTempAndVref+0x164>)
 8008bea:	4b3f      	ldr	r3, [pc, #252]	; (8008ce8 <ReadTempAndVref+0x168>)
 8008bec:	f7f8 fd18 	bl	8001620 <__aeabi_ddiv>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <ReadTempAndVref+0x16c>)
 8008bf4:	f7f8 f9f8 	bl	8000fe8 <__aeabi_dadd>
 8008bf8:	f7f9 ffe6 	bl	8002bc8 <__aeabi_d2f>
 8008bfc:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008bfe:	0020      	movs	r0, r4
 8008c00:	f008 f97a 	bl	8010ef8 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c04:	492f      	ldr	r1, [pc, #188]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008c06:	2310      	movs	r3, #16
 8008c08:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c0a:	4b39      	ldr	r3, [pc, #228]	; (8008cf0 <ReadTempAndVref+0x170>)
 8008c0c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c12:	0020      	movs	r0, r4
 8008c14:	f008 f9f8 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d148      	bne.n	8008cae <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008c1c:	4929      	ldr	r1, [pc, #164]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008c1e:	2311      	movs	r3, #17
 8008c20:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c22:	2380      	movs	r3, #128	; 0x80
 8008c24:	015b      	lsls	r3, r3, #5
 8008c26:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008c28:	2305      	movs	r3, #5
 8008c2a:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c2c:	4826      	ldr	r0, [pc, #152]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008c2e:	f008 f9eb 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d13e      	bne.n	8008cb4 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 8008c36:	4d24      	ldr	r5, [pc, #144]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008c38:	0028      	movs	r0, r5
 8008c3a:	f008 f92d 	bl	8010e98 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008c3e:	2164      	movs	r1, #100	; 0x64
 8008c40:	0028      	movs	r0, r5
 8008c42:	f008 f97b 	bl	8010f3c <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 8008c46:	0028      	movs	r0, r5
 8008c48:	f008 f9d8 	bl	8010ffc <HAL_ADC_GetValue>
 8008c4c:	0004      	movs	r4, r0
 8008c4e:	4b29      	ldr	r3, [pc, #164]	; (8008cf4 <ReadTempAndVref+0x174>)
 8008c50:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008c52:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <ReadTempAndVref+0x178>)
 8008c54:	8818      	ldrh	r0, [r3, #0]
 8008c56:	f7f9 fef9 	bl	8002a4c <__aeabi_i2d>
 8008c5a:	4a1d      	ldr	r2, [pc, #116]	; (8008cd0 <ReadTempAndVref+0x150>)
 8008c5c:	4b1d      	ldr	r3, [pc, #116]	; (8008cd4 <ReadTempAndVref+0x154>)
 8008c5e:	f7f9 f8e9 	bl	8001e34 <__aeabi_dmul>
 8008c62:	9000      	str	r0, [sp, #0]
 8008c64:	9101      	str	r1, [sp, #4]
 8008c66:	0420      	lsls	r0, r4, #16
 8008c68:	0c00      	lsrs	r0, r0, #16
 8008c6a:	f7f9 feef 	bl	8002a4c <__aeabi_i2d>
 8008c6e:	0002      	movs	r2, r0
 8008c70:	000b      	movs	r3, r1
 8008c72:	9800      	ldr	r0, [sp, #0]
 8008c74:	9901      	ldr	r1, [sp, #4]
 8008c76:	f7f8 fcd3 	bl	8001620 <__aeabi_ddiv>
 8008c7a:	f7f9 ffa5 	bl	8002bc8 <__aeabi_d2f>
 8008c7e:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008c80:	0028      	movs	r0, r5
 8008c82:	f008 f939 	bl	8010ef8 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008c86:	490f      	ldr	r1, [pc, #60]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008c88:	2311      	movs	r3, #17
 8008c8a:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c8c:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <ReadTempAndVref+0x170>)
 8008c8e:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c90:	2301      	movs	r3, #1
 8008c92:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c94:	0028      	movs	r0, r5
 8008c96:	f008 f9b7 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d10d      	bne.n	8008cba <ReadTempAndVref+0x13a>
}
 8008c9e:	b002      	add	sp, #8
 8008ca0:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 8008ca2:	f7ff ff43 	bl	8008b2c <MX_ADC_Init>
 8008ca6:	e774      	b.n	8008b92 <ReadTempAndVref+0x12>
		Error_Handler();
 8008ca8:	f7ff ff3a 	bl	8008b20 <Error_Handler>
 8008cac:	e77f      	b.n	8008bae <ReadTempAndVref+0x2e>
		Error_Handler();
 8008cae:	f7ff ff37 	bl	8008b20 <Error_Handler>
 8008cb2:	e7b3      	b.n	8008c1c <ReadTempAndVref+0x9c>
		Error_Handler();
 8008cb4:	f7ff ff34 	bl	8008b20 <Error_Handler>
 8008cb8:	e7bd      	b.n	8008c36 <ReadTempAndVref+0xb6>
		Error_Handler();
 8008cba:	f7ff ff31 	bl	8008b20 <Error_Handler>
}
 8008cbe:	e7ee      	b.n	8008c9e <ReadTempAndVref+0x11e>
 8008cc0:	20001960 	.word	0x20001960
 8008cc4:	20001a00 	.word	0x20001a00
 8008cc8:	20006f1c 	.word	0x20006f1c
 8008ccc:	20001964 	.word	0x20001964
 8008cd0:	66666666 	.word	0x66666666
 8008cd4:	400a6666 	.word	0x400a6666
 8008cd8:	40affe00 	.word	0x40affe00
 8008cdc:	28f5c28f 	.word	0x28f5c28f
 8008ce0:	3ff68f5c 	.word	0x3ff68f5c
 8008ce4:	33333333 	.word	0x33333333
 8008ce8:	40113333 	.word	0x40113333
 8008cec:	40390000 	.word	0x40390000
 8008cf0:	00001001 	.word	0x00001001
 8008cf4:	20001962 	.word	0x20001962
 8008cf8:	1ffff7ba 	.word	0x1ffff7ba

08008cfc <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	0004      	movs	r4, r0
 8008d02:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 8008d04:	1e83      	subs	r3, r0, #2
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d901      	bls.n	8008d0e <GetReadPrecentage+0x12>
}
 8008d0a:	b006      	add	sp, #24
 8008d0c:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 8008d0e:	4b4a      	ldr	r3, [pc, #296]	; (8008e38 <GetReadPrecentage+0x13c>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d04f      	beq.n	8008db6 <GetReadPrecentage+0xba>
		Channel = Get_channel(GetUart(port), "bottom");
 8008d16:	0020      	movs	r0, r4
 8008d18:	f005 fdc2 	bl	800e8a0 <GetUart>
 8008d1c:	4947      	ldr	r1, [pc, #284]	; (8008e3c <GetReadPrecentage+0x140>)
 8008d1e:	f7ff fedb 	bl	8008ad8 <Get_channel>
 8008d22:	4b47      	ldr	r3, [pc, #284]	; (8008e40 <GetReadPrecentage+0x144>)
 8008d24:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008d26:	4947      	ldr	r1, [pc, #284]	; (8008e44 <GetReadPrecentage+0x148>)
 8008d28:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d2a:	2380      	movs	r3, #128	; 0x80
 8008d2c:	015b      	lsls	r3, r3, #5
 8008d2e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d30:	2301      	movs	r3, #1
 8008d32:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d34:	4844      	ldr	r0, [pc, #272]	; (8008e48 <GetReadPrecentage+0x14c>)
 8008d36:	f008 f967 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d178      	bne.n	8008e30 <GetReadPrecentage+0x134>
		HAL_ADC_Start(&hadc);
 8008d3e:	4c42      	ldr	r4, [pc, #264]	; (8008e48 <GetReadPrecentage+0x14c>)
 8008d40:	0020      	movs	r0, r4
 8008d42:	f008 f8a9 	bl	8010e98 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008d46:	2164      	movs	r1, #100	; 0x64
 8008d48:	0020      	movs	r0, r4
 8008d4a:	f008 f8f7 	bl	8010f3c <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 8008d4e:	0020      	movs	r0, r4
 8008d50:	f008 f954 	bl	8010ffc <HAL_ADC_GetValue>
 8008d54:	f7f8 f908 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 8008d58:	f7f9 fee4 	bl	8002b24 <__aeabi_f2d>
 8008d5c:	4a3b      	ldr	r2, [pc, #236]	; (8008e4c <GetReadPrecentage+0x150>)
 8008d5e:	4b3c      	ldr	r3, [pc, #240]	; (8008e50 <GetReadPrecentage+0x154>)
 8008d60:	f7f9 f868 	bl	8001e34 <__aeabi_dmul>
 8008d64:	2200      	movs	r2, #0
 8008d66:	4b3b      	ldr	r3, [pc, #236]	; (8008e54 <GetReadPrecentage+0x158>)
 8008d68:	f7f8 fc5a 	bl	8001620 <__aeabi_ddiv>
 8008d6c:	f7f9 ff2c 	bl	8002bc8 <__aeabi_d2f>
 8008d70:	4b39      	ldr	r3, [pc, #228]	; (8008e58 <GetReadPrecentage+0x15c>)
 8008d72:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 8008d74:	4939      	ldr	r1, [pc, #228]	; (8008e5c <GetReadPrecentage+0x160>)
 8008d76:	f7f7 fde1 	bl	800093c <__aeabi_fmul>
 8008d7a:	f7f9 fed3 	bl	8002b24 <__aeabi_f2d>
 8008d7e:	4a33      	ldr	r2, [pc, #204]	; (8008e4c <GetReadPrecentage+0x150>)
 8008d80:	4b33      	ldr	r3, [pc, #204]	; (8008e50 <GetReadPrecentage+0x154>)
 8008d82:	f7f8 fc4d 	bl	8001620 <__aeabi_ddiv>
 8008d86:	f7f9 ff1f 	bl	8002bc8 <__aeabi_d2f>
 8008d8a:	4b35      	ldr	r3, [pc, #212]	; (8008e60 <GetReadPrecentage+0x164>)
 8008d8c:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 8008d8e:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008d90:	0020      	movs	r0, r4
 8008d92:	f008 f8b1 	bl	8010ef8 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008d96:	492b      	ldr	r1, [pc, #172]	; (8008e44 <GetReadPrecentage+0x148>)
 8008d98:	4b29      	ldr	r3, [pc, #164]	; (8008e40 <GetReadPrecentage+0x144>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008d9e:	4b31      	ldr	r3, [pc, #196]	; (8008e64 <GetReadPrecentage+0x168>)
 8008da0:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008da2:	2301      	movs	r3, #1
 8008da4:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008da6:	0020      	movs	r0, r4
 8008da8:	f008 f92e 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	d0ac      	beq.n	8008d0a <GetReadPrecentage+0xe>
			Error_Handler();
 8008db0:	f7ff feb6 	bl	8008b20 <Error_Handler>
 8008db4:	e7a9      	b.n	8008d0a <GetReadPrecentage+0xe>
			MX_ADC_Init();
 8008db6:	f7ff feb9 	bl	8008b2c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008dba:	0020      	movs	r0, r4
 8008dbc:	f005 fd70 	bl	800e8a0 <GetUart>
 8008dc0:	f00a fd77 	bl	80138b2 <HAL_UART_DeInit>
			if (port == 3) {
 8008dc4:	2c03      	cmp	r4, #3
 8008dc6:	d01a      	beq.n	8008dfe <GetReadPrecentage+0x102>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 8008dc8:	2690      	movs	r6, #144	; 0x90
 8008dca:	05f6      	lsls	r6, r6, #23
 8008dcc:	2104      	movs	r1, #4
 8008dce:	0030      	movs	r0, r6
 8008dd0:	f009 fa68 	bl	80122a4 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008dd4:	2304      	movs	r3, #4
 8008dd6:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008dd8:	3b03      	subs	r3, #3
 8008dda:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008ddc:	3302      	adds	r3, #2
 8008dde:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008de0:	a901      	add	r1, sp, #4
 8008de2:	0030      	movs	r0, r6
 8008de4:	f009 f97e 	bl	80120e4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 8008de8:	4b1f      	ldr	r3, [pc, #124]	; (8008e68 <GetReadPrecentage+0x16c>)
 8008dea:	191b      	adds	r3, r3, r4
 8008dec:	3b01      	subs	r3, #1
 8008dee:	2206      	movs	r2, #6
 8008df0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8008df2:	3a05      	subs	r2, #5
 8008df4:	2104      	movs	r1, #4
 8008df6:	0030      	movs	r0, r6
 8008df8:	f009 fae8 	bl	80123cc <HAL_GPIO_WritePin>
 8008dfc:	e78b      	b.n	8008d16 <GetReadPrecentage+0x1a>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8008dfe:	2690      	movs	r6, #144	; 0x90
 8008e00:	05f6      	lsls	r6, r6, #23
 8008e02:	2110      	movs	r1, #16
 8008e04:	0030      	movs	r0, r6
 8008e06:	f009 fa4d 	bl	80122a4 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008e0a:	2310      	movs	r3, #16
 8008e0c:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e0e:	3b0f      	subs	r3, #15
 8008e10:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008e12:	3302      	adds	r3, #2
 8008e14:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e16:	a901      	add	r1, sp, #4
 8008e18:	0030      	movs	r0, r6
 8008e1a:	f009 f963 	bl	80120e4 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 8008e1e:	4b12      	ldr	r3, [pc, #72]	; (8008e68 <GetReadPrecentage+0x16c>)
 8008e20:	2206      	movs	r2, #6
 8008e22:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008e24:	3a05      	subs	r2, #5
 8008e26:	2110      	movs	r1, #16
 8008e28:	0030      	movs	r0, r6
 8008e2a:	f009 facf 	bl	80123cc <HAL_GPIO_WritePin>
 8008e2e:	e772      	b.n	8008d16 <GetReadPrecentage+0x1a>
			Error_Handler();
 8008e30:	f7ff fe76 	bl	8008b20 <Error_Handler>
 8008e34:	e783      	b.n	8008d3e <GetReadPrecentage+0x42>
 8008e36:	46c0      	nop			; (mov r8, r8)
 8008e38:	20001960 	.word	0x20001960
 8008e3c:	08019d68 	.word	0x08019d68
 8008e40:	20001970 	.word	0x20001970
 8008e44:	20001a00 	.word	0x20001a00
 8008e48:	20006f1c 	.word	0x20006f1c
 8008e4c:	66666666 	.word	0x66666666
 8008e50:	400a6666 	.word	0x400a6666
 8008e54:	40affe00 	.word	0x40affe00
 8008e58:	200019c4 	.word	0x200019c4
 8008e5c:	42c80000 	.word	0x42c80000
 8008e60:	200019b4 	.word	0x200019b4
 8008e64:	00001001 	.word	0x00001001
 8008e68:	2000116c 	.word	0x2000116c

08008e6c <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 8008e6c:	2802      	cmp	r0, #2
 8008e6e:	d004      	beq.n	8008e7a <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 8008e70:	2803      	cmp	r0, #3
 8008e72:	d010      	beq.n	8008e96 <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 8008e74:	4b0f      	ldr	r3, [pc, #60]	; (8008eb4 <Get_Rank+0x48>)
 8008e76:	7818      	ldrb	r0, [r3, #0]
}
 8008e78:	4770      	bx	lr
	if (Port == 2 && side == "top")
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	; (8008eb8 <Get_Rank+0x4c>)
 8008e7c:	4299      	cmp	r1, r3
 8008e7e:	d006      	beq.n	8008e8e <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 8008e80:	4b0e      	ldr	r3, [pc, #56]	; (8008ebc <Get_Rank+0x50>)
 8008e82:	4299      	cmp	r1, r3
 8008e84:	d1f6      	bne.n	8008e74 <Get_Rank+0x8>
		Rank_t = 1;
 8008e86:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <Get_Rank+0x48>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	e7f2      	b.n	8008e74 <Get_Rank+0x8>
		Rank_t = 0;
 8008e8e:	4b09      	ldr	r3, [pc, #36]	; (8008eb4 <Get_Rank+0x48>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	e7ee      	b.n	8008e74 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 8008e96:	4b08      	ldr	r3, [pc, #32]	; (8008eb8 <Get_Rank+0x4c>)
 8008e98:	4299      	cmp	r1, r3
 8008e9a:	d006      	beq.n	8008eaa <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <Get_Rank+0x50>)
 8008e9e:	4299      	cmp	r1, r3
 8008ea0:	d1e8      	bne.n	8008e74 <Get_Rank+0x8>
		Rank_t = 3;
 8008ea2:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <Get_Rank+0x48>)
 8008ea4:	2203      	movs	r2, #3
 8008ea6:	701a      	strb	r2, [r3, #0]
 8008ea8:	e7e4      	b.n	8008e74 <Get_Rank+0x8>
		Rank_t = 2;
 8008eaa:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <Get_Rank+0x48>)
 8008eac:	2202      	movs	r2, #2
 8008eae:	701a      	strb	r2, [r3, #0]
 8008eb0:	e7e0      	b.n	8008e74 <Get_Rank+0x8>
 8008eb2:	46c0      	nop			; (mov r8, r8)
 8008eb4:	20001971 	.word	0x20001971
 8008eb8:	08019d64 	.word	0x08019d64
 8008ebc:	08019d68 	.word	0x08019d68

08008ec0 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	0004      	movs	r4, r0
 8008ec4:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 8008ec6:	1e83      	subs	r3, r0, #2
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d900      	bls.n	8008ece <ADCSelectChannel+0xe>
}
 8008ecc:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 8008ece:	4b10      	ldr	r3, [pc, #64]	; (8008f10 <ADCSelectChannel+0x50>)
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	701a      	strb	r2, [r3, #0]
		HAL_UART_DeInit(GetUart(ADC_port));
 8008ed4:	f005 fce4 	bl	800e8a0 <GetUart>
 8008ed8:	f00a fceb 	bl	80138b2 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 8008edc:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <ADCSelectChannel+0x54>)
 8008ede:	191b      	adds	r3, r3, r4
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	2206      	movs	r2, #6
 8008ee4:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008ee6:	0020      	movs	r0, r4
 8008ee8:	f005 fcda 	bl	800e8a0 <GetUart>
 8008eec:	0029      	movs	r1, r5
 8008eee:	f7ff fdf3 	bl	8008ad8 <Get_channel>
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <ADCSelectChannel+0x58>)
 8008ef4:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 8008ef6:	0029      	movs	r1, r5
 8008ef8:	0020      	movs	r0, r4
 8008efa:	f7ff ffb7 	bl	8008e6c <Get_Rank>
 8008efe:	4b07      	ldr	r3, [pc, #28]	; (8008f1c <ADCSelectChannel+0x5c>)
 8008f00:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 8008f02:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <ADCSelectChannel+0x60>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1e0      	bne.n	8008ecc <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008f0a:	f7ff fe0f 	bl	8008b2c <MX_ADC_Init>
}
 8008f0e:	e7dd      	b.n	8008ecc <ADCSelectChannel+0xc>
 8008f10:	200019c0 	.word	0x200019c0
 8008f14:	2000116c 	.word	0x2000116c
 8008f18:	20001970 	.word	0x20001970
 8008f1c:	20001971 	.word	0x20001971
 8008f20:	20001960 	.word	0x20001960

08008f24 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	0005      	movs	r5, r0
 8008f28:	000e      	movs	r6, r1
 8008f2a:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 8008f2c:	4b26      	ldr	r3, [pc, #152]	; (8008fc8 <ReadADCChannel+0xa4>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d008      	beq.n	8008f46 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008f34:	4b25      	ldr	r3, [pc, #148]	; (8008fcc <ReadADCChannel+0xa8>)
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	4a25      	ldr	r2, [pc, #148]	; (8008fd0 <ReadADCChannel+0xac>)
 8008f3c:	5a98      	ldrh	r0, [r3, r2]
 8008f3e:	f7f8 f813 	bl	8000f68 <__aeabi_ui2f>
 8008f42:	6020      	str	r0, [r4, #0]
}
 8008f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 8008f46:	f005 fcab 	bl	800e8a0 <GetUart>
 8008f4a:	0031      	movs	r1, r6
 8008f4c:	f7ff fdc4 	bl	8008ad8 <Get_channel>
 8008f50:	4f20      	ldr	r7, [pc, #128]	; (8008fd4 <ReadADCChannel+0xb0>)
 8008f52:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 8008f54:	0031      	movs	r1, r6
 8008f56:	0028      	movs	r0, r5
 8008f58:	f7ff ff88 	bl	8008e6c <Get_Rank>
 8008f5c:	4b1b      	ldr	r3, [pc, #108]	; (8008fcc <ReadADCChannel+0xa8>)
 8008f5e:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008f60:	491d      	ldr	r1, [pc, #116]	; (8008fd8 <ReadADCChannel+0xb4>)
 8008f62:	783b      	ldrb	r3, [r7, #0]
 8008f64:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008f66:	2380      	movs	r3, #128	; 0x80
 8008f68:	015b      	lsls	r3, r3, #5
 8008f6a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008f70:	481a      	ldr	r0, [pc, #104]	; (8008fdc <ReadADCChannel+0xb8>)
 8008f72:	f008 f849 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d122      	bne.n	8008fc0 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008f7a:	4d18      	ldr	r5, [pc, #96]	; (8008fdc <ReadADCChannel+0xb8>)
 8008f7c:	0028      	movs	r0, r5
 8008f7e:	f007 ff8b 	bl	8010e98 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008f82:	2164      	movs	r1, #100	; 0x64
 8008f84:	0028      	movs	r0, r5
 8008f86:	f007 ffd9 	bl	8010f3c <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 8008f8a:	0028      	movs	r0, r5
 8008f8c:	f008 f836 	bl	8010ffc <HAL_ADC_GetValue>
 8008f90:	4b0e      	ldr	r3, [pc, #56]	; (8008fcc <ReadADCChannel+0xa8>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	4a0e      	ldr	r2, [pc, #56]	; (8008fd0 <ReadADCChannel+0xac>)
 8008f98:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008f9a:	0028      	movs	r0, r5
 8008f9c:	f007 ffac 	bl	8010ef8 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008fa0:	490d      	ldr	r1, [pc, #52]	; (8008fd8 <ReadADCChannel+0xb4>)
 8008fa2:	4b0c      	ldr	r3, [pc, #48]	; (8008fd4 <ReadADCChannel+0xb0>)
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008fa8:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <ReadADCChannel+0xbc>)
 8008faa:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008fac:	2303      	movs	r3, #3
 8008fae:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008fb0:	0028      	movs	r0, r5
 8008fb2:	f008 f829 	bl	8011008 <HAL_ADC_ConfigChannel>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	d0bc      	beq.n	8008f34 <ReadADCChannel+0x10>
			Error_Handler();
 8008fba:	f7ff fdb1 	bl	8008b20 <Error_Handler>
 8008fbe:	e7b9      	b.n	8008f34 <ReadADCChannel+0x10>
			Error_Handler();
 8008fc0:	f7ff fdae 	bl	8008b20 <Error_Handler>
 8008fc4:	e7d9      	b.n	8008f7a <ReadADCChannel+0x56>
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	20001960 	.word	0x20001960
 8008fcc:	20001971 	.word	0x20001971
 8008fd0:	20001968 	.word	0x20001968
 8008fd4:	20001970 	.word	0x20001970
 8008fd8:	20001a00 	.word	0x20001a00
 8008fdc:	20006f1c 	.word	0x20006f1c
 8008fe0:	00001001 	.word	0x00001001

08008fe4 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 8008fe4:	4770      	bx	lr

08008fe6 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 8008fe6:	4770      	bx	lr

08008fe8 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 8008fe8:	4770      	bx	lr

08008fea <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 8008fea:	4770      	bx	lr

08008fec <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 8008fec:	4770      	bx	lr
	...

08008ff0 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 8008ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff2:	46de      	mov	lr, fp
 8008ff4:	4657      	mov	r7, sl
 8008ff6:	464e      	mov	r6, r9
 8008ff8:	4645      	mov	r5, r8
 8008ffa:	b5e0      	push	{r5, r6, r7, lr}
 8008ffc:	b089      	sub	sp, #36	; 0x24
 8008ffe:	4dbd      	ldr	r5, [pc, #756]	; (80092f4 <CheckAttachedButtons+0x304>)
 8009000:	3509      	adds	r5, #9
 8009002:	2404      	movs	r4, #4
 8009004:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	469b      	mov	fp, r3
 800900a:	4699      	mov	r9, r3
 800900c:	e111      	b.n	8009232 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800900e:	230e      	movs	r3, #14
 8009010:	aa02      	add	r2, sp, #8
 8009012:	4694      	mov	ip, r2
 8009014:	4463      	add	r3, ip
 8009016:	8819      	ldrh	r1, [r3, #0]
 8009018:	2201      	movs	r2, #1
 800901a:	9807      	ldr	r0, [sp, #28]
 800901c:	f009 f9d6 	bl	80123cc <HAL_GPIO_WritePin>
				Delay_us(10);
 8009020:	200a      	movs	r0, #10
 8009022:	f005 fa51 	bl	800e4c8 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 8009026:	ab05      	add	r3, sp, #20
 8009028:	8819      	ldrh	r1, [r3, #0]
 800902a:	9806      	ldr	r0, [sp, #24]
 800902c:	f009 f9c8 	bl	80123c0 <HAL_GPIO_ReadPin>
 8009030:	4681      	mov	r9, r0
 8009032:	e126      	b.n	8009282 <CheckAttachedButtons+0x292>
			switch (button[i].type) {
 8009034:	2b01      	cmp	r3, #1
 8009036:	d105      	bne.n	8009044 <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 8009038:	464b      	mov	r3, r9
 800903a:	2b01      	cmp	r3, #1
 800903c:	d046      	beq.n	80090cc <CheckAttachedButtons+0xdc>
				else if (connected == GPIO_PIN_RESET)
 800903e:	2b00      	cmp	r3, #0
 8009040:	d100      	bne.n	8009044 <CheckAttachedButtons+0x54>
 8009042:	e1c5      	b.n	80093d0 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 8009044:	465b      	mov	r3, fp
 8009046:	2b04      	cmp	r3, #4
 8009048:	d001      	beq.n	800904e <CheckAttachedButtons+0x5e>
 800904a:	2b02      	cmp	r3, #2
 800904c:	d107      	bne.n	800905e <CheckAttachedButtons+0x6e>
				if (pressCounter[i] < 0xFFFF)
 800904e:	4baa      	ldr	r3, [pc, #680]	; (80092f8 <CheckAttachedButtons+0x308>)
 8009050:	58e3      	ldr	r3, [r4, r3]
 8009052:	4aaa      	ldr	r2, [pc, #680]	; (80092fc <CheckAttachedButtons+0x30c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d842      	bhi.n	80090de <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 8009058:	3301      	adds	r3, #1
 800905a:	4aa7      	ldr	r2, [pc, #668]	; (80092f8 <CheckAttachedButtons+0x308>)
 800905c:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 800905e:	23fd      	movs	r3, #253	; 0xfd
 8009060:	465a      	mov	r2, fp
 8009062:	4013      	ands	r3, r2
 8009064:	2b01      	cmp	r3, #1
 8009066:	d100      	bne.n	800906a <CheckAttachedButtons+0x7a>
 8009068:	e1b6      	b.n	80093d8 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800906a:	4ba3      	ldr	r3, [pc, #652]	; (80092f8 <CheckAttachedButtons+0x308>)
 800906c:	58e3      	ldr	r3, [r4, r3]
 800906e:	4aa4      	ldr	r2, [pc, #656]	; (8009300 <CheckAttachedButtons+0x310>)
 8009070:	8812      	ldrh	r2, [r2, #0]
 8009072:	4293      	cmp	r3, r2
 8009074:	d36f      	bcc.n	8009156 <CheckAttachedButtons+0x166>
				if (pressCounter[i] == BOS.buttons.debounce) {
 8009076:	d045      	beq.n	8009104 <CheckAttachedButtons+0x114>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8009078:	4ba2      	ldr	r3, [pc, #648]	; (8009304 <CheckAttachedButtons+0x314>)
 800907a:	58e3      	ldr	r3, [r4, r3]
 800907c:	429a      	cmp	r2, r3
 800907e:	d202      	bcs.n	8009086 <CheckAttachedButtons+0x96>
					releaseCounter[i] = 0;
 8009080:	4ba0      	ldr	r3, [pc, #640]	; (8009304 <CheckAttachedButtons+0x314>)
 8009082:	2200      	movs	r2, #0
 8009084:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 8009086:	4b9c      	ldr	r3, [pc, #624]	; (80092f8 <CheckAttachedButtons+0x308>)
 8009088:	58e3      	ldr	r3, [r4, r3]
 800908a:	4a9d      	ldr	r2, [pc, #628]	; (8009300 <CheckAttachedButtons+0x310>)
 800908c:	8852      	ldrh	r2, [r2, #2]
 800908e:	4293      	cmp	r3, r2
 8009090:	d952      	bls.n	8009138 <CheckAttachedButtons+0x148>
						&& pressCounter[i] < 500) {
 8009092:	22f4      	movs	r2, #244	; 0xf4
 8009094:	32ff      	adds	r2, #255	; 0xff
 8009096:	4293      	cmp	r3, r2
 8009098:	d84e      	bhi.n	8009138 <CheckAttachedButtons+0x148>
					if (clicked == 0)
 800909a:	4b9b      	ldr	r3, [pc, #620]	; (8009308 <CheckAttachedButtons+0x318>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d137      	bne.n	8009112 <CheckAttachedButtons+0x122>
						clicked = 1;		// Record a possible single click
 80090a2:	4b99      	ldr	r3, [pc, #612]	; (8009308 <CheckAttachedButtons+0x318>)
 80090a4:	3af3      	subs	r2, #243	; 0xf3
 80090a6:	3aff      	subs	r2, #255	; 0xff
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	e054      	b.n	8009156 <CheckAttachedButtons+0x166>
				if (connected == GPIO_PIN_SET)
 80090ac:	464b      	mov	r3, r9
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d00f      	beq.n	80090d2 <CheckAttachedButtons+0xe2>
				else if (connected == GPIO_PIN_RESET)
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1c6      	bne.n	8009044 <CheckAttachedButtons+0x54>
					state = OPEN;
 80090b6:	2303      	movs	r3, #3
 80090b8:	469b      	mov	fp, r3
 80090ba:	e18d      	b.n	80093d8 <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 80090bc:	464b      	mov	r3, r9
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d00a      	beq.n	80090d8 <CheckAttachedButtons+0xe8>
				else if (connected == GPIO_PIN_RESET)
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1be      	bne.n	8009044 <CheckAttachedButtons+0x54>
					state = OFF;
 80090c6:	2301      	movs	r3, #1
 80090c8:	469b      	mov	fp, r3
 80090ca:	e185      	b.n	80093d8 <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 80090cc:	2304      	movs	r3, #4
 80090ce:	469b      	mov	fp, r3
 80090d0:	e7bd      	b.n	800904e <CheckAttachedButtons+0x5e>
					state = CLOSED;
 80090d2:	2304      	movs	r3, #4
 80090d4:	469b      	mov	fp, r3
 80090d6:	e7ba      	b.n	800904e <CheckAttachedButtons+0x5e>
 80090d8:	2302      	movs	r3, #2
 80090da:	469b      	mov	fp, r3
 80090dc:	e7b7      	b.n	800904e <CheckAttachedButtons+0x5e>
					pressCounter[i] = 0;			// Reset debounce counter
 80090de:	4b86      	ldr	r3, [pc, #536]	; (80092f8 <CheckAttachedButtons+0x308>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	50e2      	str	r2, [r4, r3]
 80090e4:	e7bb      	b.n	800905e <CheckAttachedButtons+0x6e>
					releaseCounter[i] = 0;		// Reset debounce counter
 80090e6:	4b87      	ldr	r3, [pc, #540]	; (8009304 <CheckAttachedButtons+0x314>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	50e2      	str	r2, [r4, r3]
 80090ec:	e17d      	b.n	80093ea <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 80090ee:	4b87      	ldr	r3, [pc, #540]	; (800930c <CheckAttachedButtons+0x31c>)
 80090f0:	5cf3      	ldrb	r3, [r6, r3]
 80090f2:	4a83      	ldr	r2, [pc, #524]	; (8009300 <CheckAttachedButtons+0x310>)
 80090f4:	7952      	ldrb	r2, [r2, #5]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d200      	bcs.n	80090fc <CheckAttachedButtons+0x10c>
 80090fa:	e182      	b.n	8009402 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 80090fc:	3301      	adds	r3, #1
 80090fe:	4a83      	ldr	r2, [pc, #524]	; (800930c <CheckAttachedButtons+0x31c>)
 8009100:	54b3      	strb	r3, [r6, r2]
 8009102:	e7b2      	b.n	800906a <CheckAttachedButtons+0x7a>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 8009104:	2107      	movs	r1, #7
 8009106:	4640      	mov	r0, r8
 8009108:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 800910a:	3301      	adds	r3, #1
 800910c:	497a      	ldr	r1, [pc, #488]	; (80092f8 <CheckAttachedButtons+0x308>)
 800910e:	5063      	str	r3, [r4, r1]
 8009110:	e7b2      	b.n	8009078 <CheckAttachedButtons+0x88>
					else if (clicked == 2) {
 8009112:	2b02      	cmp	r3, #2
 8009114:	d11f      	bne.n	8009156 <CheckAttachedButtons+0x166>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 8009116:	4b7d      	ldr	r3, [pc, #500]	; (800930c <CheckAttachedButtons+0x31c>)
 8009118:	5cf3      	ldrb	r3, [r6, r3]
 800911a:	4a79      	ldr	r2, [pc, #484]	; (8009300 <CheckAttachedButtons+0x310>)
 800911c:	7912      	ldrb	r2, [r2, #4]
 800911e:	429a      	cmp	r2, r3
 8009120:	d219      	bcs.n	8009156 <CheckAttachedButtons+0x166>
										< BOS.buttons.maxInterClickTime) {
 8009122:	4a77      	ldr	r2, [pc, #476]	; (8009300 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 8009124:	7952      	ldrb	r2, [r2, #5]
 8009126:	429a      	cmp	r2, r3
 8009128:	d915      	bls.n	8009156 <CheckAttachedButtons+0x166>
							clicked = 3;	// Record a possible double click
 800912a:	4b77      	ldr	r3, [pc, #476]	; (8009308 <CheckAttachedButtons+0x318>)
 800912c:	2203      	movs	r2, #3
 800912e:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 8009130:	4b76      	ldr	r3, [pc, #472]	; (800930c <CheckAttachedButtons+0x31c>)
 8009132:	2200      	movs	r2, #0
 8009134:	54f2      	strb	r2, [r6, r3]
 8009136:	e00e      	b.n	8009156 <CheckAttachedButtons+0x166>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8009138:	3bf5      	subs	r3, #245	; 0xf5
 800913a:	3bff      	subs	r3, #255	; 0xff
 800913c:	4a74      	ldr	r2, [pc, #464]	; (8009310 <CheckAttachedButtons+0x320>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d809      	bhi.n	8009156 <CheckAttachedButtons+0x166>
					if (clicked)
 8009142:	4b71      	ldr	r3, [pc, #452]	; (8009308 <CheckAttachedButtons+0x318>)
 8009144:	781b      	ldrb	r3, [r3, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <CheckAttachedButtons+0x160>
						clicked = 0;						// Cannot be a click
 800914a:	4b6f      	ldr	r3, [pc, #444]	; (8009308 <CheckAttachedButtons+0x318>)
 800914c:	2200      	movs	r2, #0
 800914e:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8009150:	9803      	ldr	r0, [sp, #12]
 8009152:	f7ff f9a1 	bl	8008498 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 8009156:	4b6b      	ldr	r3, [pc, #428]	; (8009304 <CheckAttachedButtons+0x314>)
 8009158:	58e3      	ldr	r3, [r4, r3]
 800915a:	4a69      	ldr	r2, [pc, #420]	; (8009300 <CheckAttachedButtons+0x310>)
 800915c:	8812      	ldrh	r2, [r2, #0]
 800915e:	4293      	cmp	r3, r2
 8009160:	d34d      	bcc.n	80091fe <CheckAttachedButtons+0x20e>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 8009162:	d02b      	beq.n	80091bc <CheckAttachedButtons+0x1cc>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8009164:	4b64      	ldr	r3, [pc, #400]	; (80092f8 <CheckAttachedButtons+0x308>)
 8009166:	58e3      	ldr	r3, [r4, r3]
 8009168:	429a      	cmp	r2, r3
 800916a:	d202      	bcs.n	8009172 <CheckAttachedButtons+0x182>
					pressCounter[i] = 0;
 800916c:	4b62      	ldr	r3, [pc, #392]	; (80092f8 <CheckAttachedButtons+0x308>)
 800916e:	2200      	movs	r2, #0
 8009170:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 8009172:	4b64      	ldr	r3, [pc, #400]	; (8009304 <CheckAttachedButtons+0x314>)
 8009174:	58e3      	ldr	r3, [r4, r3]
 8009176:	4a62      	ldr	r2, [pc, #392]	; (8009300 <CheckAttachedButtons+0x310>)
 8009178:	8852      	ldrh	r2, [r2, #2]
 800917a:	4293      	cmp	r3, r2
 800917c:	d93a      	bls.n	80091f4 <CheckAttachedButtons+0x204>
						&& releaseCounter[i] < 500) {
 800917e:	22f4      	movs	r2, #244	; 0xf4
 8009180:	32ff      	adds	r2, #255	; 0xff
 8009182:	4293      	cmp	r3, r2
 8009184:	d836      	bhi.n	80091f4 <CheckAttachedButtons+0x204>
					if (clicked == 1) {
 8009186:	4b60      	ldr	r3, [pc, #384]	; (8009308 <CheckAttachedButtons+0x318>)
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d01d      	beq.n	80091ca <CheckAttachedButtons+0x1da>
					} else if (clicked == 3) {
 800918e:	2b03      	cmp	r3, #3
 8009190:	d135      	bne.n	80091fe <CheckAttachedButtons+0x20e>
						button[i].state = DBL_CLICKED;// Record a double button click event
 8009192:	3303      	adds	r3, #3
 8009194:	4642      	mov	r2, r8
 8009196:	7013      	strb	r3, [r2, #0]
						clicked = 0;			// Prepare for a single click
 8009198:	4b5b      	ldr	r3, [pc, #364]	; (8009308 <CheckAttachedButtons+0x318>)
 800919a:	2200      	movs	r2, #0
 800919c:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800919e:	4b5d      	ldr	r3, [pc, #372]	; (8009314 <CheckAttachedButtons+0x324>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d13f      	bne.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 80091a6:	4643      	mov	r3, r8
 80091a8:	7a1b      	ldrb	r3, [r3, #8]
 80091aa:	079b      	lsls	r3, r3, #30
 80091ac:	d53b      	bpl.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80091ae:	4b59      	ldr	r3, [pc, #356]	; (8009314 <CheckAttachedButtons+0x324>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 80091b4:	9803      	ldr	r0, [sp, #12]
 80091b6:	f7ff ff17 	bl	8008fe8 <buttonDblClickedCallback>
 80091ba:	e034      	b.n	8009226 <CheckAttachedButtons+0x236>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 80091bc:	2108      	movs	r1, #8
 80091be:	4640      	mov	r0, r8
 80091c0:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 80091c2:	3301      	adds	r3, #1
 80091c4:	494f      	ldr	r1, [pc, #316]	; (8009304 <CheckAttachedButtons+0x314>)
 80091c6:	5063      	str	r3, [r4, r1]
 80091c8:	e7cc      	b.n	8009164 <CheckAttachedButtons+0x174>
						button[i].state = CLICKED;// Record a single button click event
 80091ca:	3304      	adds	r3, #4
 80091cc:	4642      	mov	r2, r8
 80091ce:	7013      	strb	r3, [r2, #0]
						clicked = 2;			// Prepare for a double click
 80091d0:	4b4d      	ldr	r3, [pc, #308]	; (8009308 <CheckAttachedButtons+0x318>)
 80091d2:	2202      	movs	r2, #2
 80091d4:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 80091d6:	4b4f      	ldr	r3, [pc, #316]	; (8009314 <CheckAttachedButtons+0x324>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d123      	bne.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 80091de:	4643      	mov	r3, r8
 80091e0:	7a1b      	ldrb	r3, [r3, #8]
 80091e2:	07db      	lsls	r3, r3, #31
 80091e4:	d51f      	bpl.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80091e6:	4b4b      	ldr	r3, [pc, #300]	; (8009314 <CheckAttachedButtons+0x324>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 80091ec:	9803      	ldr	r0, [sp, #12]
 80091ee:	f7ff fefa 	bl	8008fe6 <buttonClickedCallback>
 80091f2:	e018      	b.n	8009226 <CheckAttachedButtons+0x236>
						&& releaseCounter[i] < 0xFFFF) {
 80091f4:	3bf5      	subs	r3, #245	; 0xf5
 80091f6:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 80091f8:	4a45      	ldr	r2, [pc, #276]	; (8009310 <CheckAttachedButtons+0x320>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d909      	bls.n	8009212 <CheckAttachedButtons+0x222>
			switch (button[i].state) {
 80091fe:	4643      	mov	r3, r8
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	3b05      	subs	r3, #5
 8009204:	b2da      	uxtb	r2, r3
 8009206:	2a09      	cmp	r2, #9
 8009208:	d80d      	bhi.n	8009226 <CheckAttachedButtons+0x236>
 800920a:	0093      	lsls	r3, r2, #2
 800920c:	4a42      	ldr	r2, [pc, #264]	; (8009318 <CheckAttachedButtons+0x328>)
 800920e:	58d3      	ldr	r3, [r2, r3]
 8009210:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 8009212:	9803      	ldr	r0, [sp, #12]
 8009214:	f7ff f97e 	bl	8008514 <CheckForTimedButtonRelease>
 8009218:	e7f1      	b.n	80091fe <CheckAttachedButtons+0x20e>
				buttonPressedCallback(i);
 800921a:	9803      	ldr	r0, [sp, #12]
 800921c:	f7ff f93a 	bl	8008494 <buttonPressedCallback>
				button[i].state = NONE;
 8009220:	2300      	movs	r3, #0
 8009222:	4642      	mov	r2, r8
 8009224:	7013      	strb	r3, [r2, #0]
 8009226:	3601      	adds	r6, #1
 8009228:	3509      	adds	r5, #9
 800922a:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800922c:	2c1c      	cmp	r4, #28
 800922e:	d100      	bne.n	8009232 <CheckAttachedButtons+0x242>
 8009230:	e0ed      	b.n	800940e <CheckAttachedButtons+0x41e>
 8009232:	b2f3      	uxtb	r3, r6
 8009234:	9303      	str	r3, [sp, #12]
 8009236:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8009238:	786b      	ldrb	r3, [r5, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0f3      	beq.n	8009226 <CheckAttachedButtons+0x236>
			if (delayButtonStateReset == false)
 800923e:	4b35      	ldr	r3, [pc, #212]	; (8009314 <CheckAttachedButtons+0x324>)
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d100      	bne.n	8009248 <CheckAttachedButtons+0x258>
				button[i].state = NONE;
 8009246:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8009248:	230e      	movs	r3, #14
 800924a:	aa02      	add	r2, sp, #8
 800924c:	4694      	mov	ip, r2
 800924e:	4463      	add	r3, ip
 8009250:	469a      	mov	sl, r3
 8009252:	af05      	add	r7, sp, #20
 8009254:	9700      	str	r7, [sp, #0]
 8009256:	ab06      	add	r3, sp, #24
 8009258:	4652      	mov	r2, sl
 800925a:	a907      	add	r1, sp, #28
 800925c:	9803      	ldr	r0, [sp, #12]
 800925e:	f004 fd11 	bl	800dc84 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8009262:	4653      	mov	r3, sl
 8009264:	8819      	ldrh	r1, [r3, #0]
 8009266:	2200      	movs	r2, #0
 8009268:	9807      	ldr	r0, [sp, #28]
 800926a:	f009 f8af 	bl	80123cc <HAL_GPIO_WritePin>
			Delay_us(10);
 800926e:	200a      	movs	r0, #10
 8009270:	f005 f92a 	bl	800e4c8 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 8009274:	8839      	ldrh	r1, [r7, #0]
 8009276:	9806      	ldr	r0, [sp, #24]
 8009278:	f009 f8a2 	bl	80123c0 <HAL_GPIO_ReadPin>
 800927c:	2800      	cmp	r0, #0
 800927e:	d100      	bne.n	8009282 <CheckAttachedButtons+0x292>
 8009280:	e6c5      	b.n	800900e <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 8009282:	230e      	movs	r3, #14
 8009284:	aa02      	add	r2, sp, #8
 8009286:	4694      	mov	ip, r2
 8009288:	4463      	add	r3, ip
 800928a:	8819      	ldrh	r1, [r3, #0]
 800928c:	2200      	movs	r2, #0
 800928e:	9807      	ldr	r0, [sp, #28]
 8009290:	f009 f89c 	bl	80123cc <HAL_GPIO_WritePin>
			switch (button[i].type) {
 8009294:	4643      	mov	r3, r8
 8009296:	785b      	ldrb	r3, [r3, #1]
 8009298:	2b02      	cmp	r3, #2
 800929a:	d100      	bne.n	800929e <CheckAttachedButtons+0x2ae>
 800929c:	e706      	b.n	80090ac <CheckAttachedButtons+0xbc>
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	2a02      	cmp	r2, #2
 80092a2:	d800      	bhi.n	80092a6 <CheckAttachedButtons+0x2b6>
 80092a4:	e6c6      	b.n	8009034 <CheckAttachedButtons+0x44>
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d100      	bne.n	80092ac <CheckAttachedButtons+0x2bc>
 80092aa:	e707      	b.n	80090bc <CheckAttachedButtons+0xcc>
 80092ac:	2b04      	cmp	r3, #4
 80092ae:	d000      	beq.n	80092b2 <CheckAttachedButtons+0x2c2>
 80092b0:	e6c8      	b.n	8009044 <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 80092b2:	464b      	mov	r3, r9
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d100      	bne.n	80092ba <CheckAttachedButtons+0x2ca>
 80092b8:	e08d      	b.n	80093d6 <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d000      	beq.n	80092c0 <CheckAttachedButtons+0x2d0>
 80092be:	e6c1      	b.n	8009044 <CheckAttachedButtons+0x54>
 80092c0:	2302      	movs	r3, #2
 80092c2:	469b      	mov	fp, r3
 80092c4:	e6c3      	b.n	800904e <CheckAttachedButtons+0x5e>
				buttonReleasedCallback(i);
 80092c6:	9803      	ldr	r0, [sp, #12]
 80092c8:	f7ff fe8c 	bl	8008fe4 <buttonReleasedCallback>
				button[i].state = NONE;
 80092cc:	2300      	movs	r3, #0
 80092ce:	4642      	mov	r2, r8
 80092d0:	7013      	strb	r3, [r2, #0]
				break;
 80092d2:	e7a8      	b.n	8009226 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 80092d4:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <CheckAttachedButtons+0x324>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1a4      	bne.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 80092dc:	4643      	mov	r3, r8
 80092de:	7a1b      	ldrb	r3, [r3, #8]
 80092e0:	075b      	lsls	r3, r3, #29
 80092e2:	d5a0      	bpl.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80092e4:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <CheckAttachedButtons+0x324>)
 80092e6:	2201      	movs	r2, #1
 80092e8:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 80092ea:	2101      	movs	r1, #1
 80092ec:	9803      	ldr	r0, [sp, #12]
 80092ee:	f7ff fe7c 	bl	8008fea <buttonPressedForXCallback>
 80092f2:	e798      	b.n	8009226 <CheckAttachedButtons+0x236>
 80092f4:	20001974 	.word	0x20001974
 80092f8:	200019c8 	.word	0x200019c8
 80092fc:	0000fffe 	.word	0x0000fffe
 8009300:	20006e54 	.word	0x20006e54
 8009304:	200019e4 	.word	0x200019e4
 8009308:	200019b3 	.word	0x200019b3
 800930c:	200019b8 	.word	0x200019b8
 8009310:	0000fe0a 	.word	0x0000fe0a
 8009314:	200019bf 	.word	0x200019bf
 8009318:	0801bbe4 	.word	0x0801bbe4
				if (!delayButtonStateReset
 800931c:	4b3f      	ldr	r3, [pc, #252]	; (800941c <CheckAttachedButtons+0x42c>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d000      	beq.n	8009326 <CheckAttachedButtons+0x336>
 8009324:	e77f      	b.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 8009326:	4643      	mov	r3, r8
 8009328:	7a1b      	ldrb	r3, [r3, #8]
 800932a:	071b      	lsls	r3, r3, #28
 800932c:	d400      	bmi.n	8009330 <CheckAttachedButtons+0x340>
 800932e:	e77a      	b.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8009330:	4b3a      	ldr	r3, [pc, #232]	; (800941c <CheckAttachedButtons+0x42c>)
 8009332:	2201      	movs	r2, #1
 8009334:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 8009336:	2102      	movs	r1, #2
 8009338:	9803      	ldr	r0, [sp, #12]
 800933a:	f7ff fe56 	bl	8008fea <buttonPressedForXCallback>
 800933e:	e772      	b.n	8009226 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 8009340:	4b36      	ldr	r3, [pc, #216]	; (800941c <CheckAttachedButtons+0x42c>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d000      	beq.n	800934a <CheckAttachedButtons+0x35a>
 8009348:	e76d      	b.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800934a:	4643      	mov	r3, r8
 800934c:	7a1b      	ldrb	r3, [r3, #8]
 800934e:	06db      	lsls	r3, r3, #27
 8009350:	d400      	bmi.n	8009354 <CheckAttachedButtons+0x364>
 8009352:	e768      	b.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8009354:	4b31      	ldr	r3, [pc, #196]	; (800941c <CheckAttachedButtons+0x42c>)
 8009356:	2201      	movs	r2, #1
 8009358:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800935a:	2103      	movs	r1, #3
 800935c:	9803      	ldr	r0, [sp, #12]
 800935e:	f7ff fe44 	bl	8008fea <buttonPressedForXCallback>
 8009362:	e760      	b.n	8009226 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 8009364:	4b2d      	ldr	r3, [pc, #180]	; (800941c <CheckAttachedButtons+0x42c>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d000      	beq.n	800936e <CheckAttachedButtons+0x37e>
 800936c:	e75b      	b.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800936e:	4643      	mov	r3, r8
 8009370:	7a1b      	ldrb	r3, [r3, #8]
 8009372:	069b      	lsls	r3, r3, #26
 8009374:	d400      	bmi.n	8009378 <CheckAttachedButtons+0x388>
 8009376:	e756      	b.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8009378:	4b28      	ldr	r3, [pc, #160]	; (800941c <CheckAttachedButtons+0x42c>)
 800937a:	2201      	movs	r2, #1
 800937c:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800937e:	2101      	movs	r1, #1
 8009380:	9803      	ldr	r0, [sp, #12]
 8009382:	f7ff fe33 	bl	8008fec <buttonReleasedForYCallback>
 8009386:	e74e      	b.n	8009226 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 8009388:	4b24      	ldr	r3, [pc, #144]	; (800941c <CheckAttachedButtons+0x42c>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d000      	beq.n	8009392 <CheckAttachedButtons+0x3a2>
 8009390:	e749      	b.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 8009392:	4643      	mov	r3, r8
 8009394:	7a1b      	ldrb	r3, [r3, #8]
 8009396:	065b      	lsls	r3, r3, #25
 8009398:	d400      	bmi.n	800939c <CheckAttachedButtons+0x3ac>
 800939a:	e744      	b.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800939c:	4b1f      	ldr	r3, [pc, #124]	; (800941c <CheckAttachedButtons+0x42c>)
 800939e:	2201      	movs	r2, #1
 80093a0:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 80093a2:	2102      	movs	r1, #2
 80093a4:	9803      	ldr	r0, [sp, #12]
 80093a6:	f7ff fe21 	bl	8008fec <buttonReleasedForYCallback>
 80093aa:	e73c      	b.n	8009226 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 80093ac:	4b1b      	ldr	r3, [pc, #108]	; (800941c <CheckAttachedButtons+0x42c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d000      	beq.n	80093b6 <CheckAttachedButtons+0x3c6>
 80093b4:	e737      	b.n	8009226 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 80093b6:	4643      	mov	r3, r8
 80093b8:	7a1b      	ldrb	r3, [r3, #8]
 80093ba:	2b7f      	cmp	r3, #127	; 0x7f
 80093bc:	d800      	bhi.n	80093c0 <CheckAttachedButtons+0x3d0>
 80093be:	e732      	b.n	8009226 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80093c0:	4b16      	ldr	r3, [pc, #88]	; (800941c <CheckAttachedButtons+0x42c>)
 80093c2:	2201      	movs	r2, #1
 80093c4:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 80093c6:	2103      	movs	r1, #3
 80093c8:	9803      	ldr	r0, [sp, #12]
 80093ca:	f7ff fe0f 	bl	8008fec <buttonReleasedForYCallback>
 80093ce:	e72a      	b.n	8009226 <CheckAttachedButtons+0x236>
					state = OPEN;
 80093d0:	2303      	movs	r3, #3
 80093d2:	469b      	mov	fp, r3
 80093d4:	e000      	b.n	80093d8 <CheckAttachedButtons+0x3e8>
					state = OFF;
 80093d6:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 80093d8:	4b11      	ldr	r3, [pc, #68]	; (8009420 <CheckAttachedButtons+0x430>)
 80093da:	58e3      	ldr	r3, [r4, r3]
 80093dc:	4a11      	ldr	r2, [pc, #68]	; (8009424 <CheckAttachedButtons+0x434>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d900      	bls.n	80093e4 <CheckAttachedButtons+0x3f4>
 80093e2:	e680      	b.n	80090e6 <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a0e      	ldr	r2, [pc, #56]	; (8009420 <CheckAttachedButtons+0x430>)
 80093e8:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 80093ea:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <CheckAttachedButtons+0x438>)
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d100      	bne.n	80093f4 <CheckAttachedButtons+0x404>
 80093f2:	e67c      	b.n	80090ee <CheckAttachedButtons+0xfe>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 80093f4:	4b0d      	ldr	r3, [pc, #52]	; (800942c <CheckAttachedButtons+0x43c>)
 80093f6:	5cf2      	ldrb	r2, [r6, r3]
 80093f8:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <CheckAttachedButtons+0x440>)
 80093fa:	795b      	ldrb	r3, [r3, #5]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d800      	bhi.n	8009402 <CheckAttachedButtons+0x412>
 8009400:	e633      	b.n	800906a <CheckAttachedButtons+0x7a>
					clicked = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	4a08      	ldr	r2, [pc, #32]	; (8009428 <CheckAttachedButtons+0x438>)
 8009406:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 8009408:	4a08      	ldr	r2, [pc, #32]	; (800942c <CheckAttachedButtons+0x43c>)
 800940a:	54b3      	strb	r3, [r6, r2]
 800940c:	e62d      	b.n	800906a <CheckAttachedButtons+0x7a>
}
 800940e:	b009      	add	sp, #36	; 0x24
 8009410:	bc3c      	pop	{r2, r3, r4, r5}
 8009412:	4690      	mov	r8, r2
 8009414:	4699      	mov	r9, r3
 8009416:	46a2      	mov	sl, r4
 8009418:	46ab      	mov	fp, r5
 800941a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941c:	200019bf 	.word	0x200019bf
 8009420:	200019e4 	.word	0x200019e4
 8009424:	0000fffe 	.word	0x0000fffe
 8009428:	200019b3 	.word	0x200019b3
 800942c:	200019b8 	.word	0x200019b8
 8009430:	20006e54 	.word	0x20006e54

08009434 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8009434:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8009436:	f007 f9cd 	bl	80107d4 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 800943a:	b2c4      	uxtb	r4, r0
 800943c:	0020      	movs	r0, r4
 800943e:	f7fe f887 	bl	8007550 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8009442:	0020      	movs	r0, r4
 8009444:	f7fe f8b2 	bl	80075ac <SwitchStreamDMAToMsg>
}
 8009448:	bd10      	pop	{r4, pc}
	...

0800944c <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 800944c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800944e:	b085      	sub	sp, #20
 8009450:	000d      	movs	r5, r1
 8009452:	0014      	movs	r4, r2
 8009454:	220f      	movs	r2, #15
 8009456:	446a      	add	r2, sp
 8009458:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 800945a:	aa0a      	add	r2, sp, #40	; 0x28
 800945c:	7812      	ldrb	r2, [r2, #0]
 800945e:	4293      	cmp	r3, r2
 8009460:	d058      	beq.n	8009514 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8009462:	2b00      	cmp	r3, #0
 8009464:	d100      	bne.n	8009468 <SetupDMAStreams+0x1c>
 8009466:	e0be      	b.n	80095e6 <SetupDMAStreams+0x19a>
 8009468:	2a00      	cmp	r2, #0
 800946a:	d100      	bne.n	800946e <SetupDMAStreams+0x22>
 800946c:	e0bf      	b.n	80095ee <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 800946e:	2800      	cmp	r0, #0
 8009470:	d055      	beq.n	800951e <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8009472:	2801      	cmp	r0, #1
 8009474:	d100      	bne.n	8009478 <SetupDMAStreams+0x2c>
 8009476:	e08b      	b.n	8009590 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8009478:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 800947a:	2802      	cmp	r0, #2
 800947c:	d000      	beq.n	8009480 <SetupDMAStreams+0x34>
 800947e:	e0b3      	b.n	80095e8 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009480:	0018      	movs	r0, r3
 8009482:	f005 fa0d 	bl	800e8a0 <GetUart>
 8009486:	0006      	movs	r6, r0
 8009488:	ab0a      	add	r3, sp, #40	; 0x28
 800948a:	7818      	ldrb	r0, [r3, #0]
 800948c:	f005 fa08 	bl	800e8a0 <GetUart>
 8009490:	0001      	movs	r1, r0
 8009492:	2201      	movs	r2, #1
 8009494:	0030      	movs	r0, r6
 8009496:	f7fe f8bb 	bl	8007610 <StartDMAstream>
 800949a:	0002      	movs	r2, r0
 800949c:	2817      	cmp	r0, #23
 800949e:	d100      	bne.n	80094a2 <SetupDMAStreams+0x56>
 80094a0:	e0a2      	b.n	80095e8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 80094a2:	0160      	lsls	r0, r4, #5
 80094a4:	1b00      	subs	r0, r0, r4
 80094a6:	0080      	lsls	r0, r0, #2
 80094a8:	1900      	adds	r0, r0, r4
 80094aa:	00c0      	lsls	r0, r0, #3
 80094ac:	21fa      	movs	r1, #250	; 0xfa
 80094ae:	0089      	lsls	r1, r1, #2
 80094b0:	f7f6 fe4e 	bl	8000150 <__udivsi3>
 80094b4:	0004      	movs	r4, r0
 80094b6:	260f      	movs	r6, #15
 80094b8:	446e      	add	r6, sp
 80094ba:	4b4e      	ldr	r3, [pc, #312]	; (80095f4 <SetupDMAStreams+0x1a8>)
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	0033      	movs	r3, r6
 80094c0:	2200      	movs	r2, #0
 80094c2:	0001      	movs	r1, r0
 80094c4:	484c      	ldr	r0, [pc, #304]	; (80095f8 <SetupDMAStreams+0x1ac>)
 80094c6:	f007 f829 	bl	801051c <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 80094ca:	7833      	ldrb	r3, [r6, #0]
 80094cc:	3b01      	subs	r3, #1
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4a4a      	ldr	r2, [pc, #296]	; (80095fc <SetupDMAStreams+0x1b0>)
 80094d2:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 80094d4:	ab0a      	add	r3, sp, #40	; 0x28
 80094d6:	7818      	ldrb	r0, [r3, #0]
 80094d8:	f005 f9e2 	bl	800e8a0 <GetUart>
 80094dc:	0007      	movs	r7, r0
 80094de:	7830      	ldrb	r0, [r6, #0]
 80094e0:	f005 f9de 	bl	800e8a0 <GetUart>
 80094e4:	0001      	movs	r1, r0
 80094e6:	2201      	movs	r2, #1
 80094e8:	0038      	movs	r0, r7
 80094ea:	f7fe f891 	bl	8007610 <StartDMAstream>
 80094ee:	0002      	movs	r2, r0
 80094f0:	2817      	cmp	r0, #23
 80094f2:	d079      	beq.n	80095e8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094f4:	4b3f      	ldr	r3, [pc, #252]	; (80095f4 <SetupDMAStreams+0x1a8>)
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	ab0a      	add	r3, sp, #40	; 0x28
 80094fa:	2200      	movs	r2, #0
 80094fc:	0021      	movs	r1, r4
 80094fe:	483e      	ldr	r0, [pc, #248]	; (80095f8 <SetupDMAStreams+0x1ac>)
 8009500:	f007 f80c 	bl	801051c <xTimerCreate>
 8009504:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8009506:	ab0a      	add	r3, sp, #40	; 0x28
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	3b01      	subs	r3, #1
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4a3b      	ldr	r2, [pc, #236]	; (80095fc <SetupDMAStreams+0x1b0>)
 8009510:	509d      	str	r5, [r3, r2]
 8009512:	e02d      	b.n	8009570 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8009514:	4a3a      	ldr	r2, [pc, #232]	; (8009600 <SetupDMAStreams+0x1b4>)
 8009516:	2102      	movs	r1, #2
 8009518:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 800951a:	2267      	movs	r2, #103	; 0x67
 800951c:	e064      	b.n	80095e8 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 800951e:	0018      	movs	r0, r3
 8009520:	f005 f9be 	bl	800e8a0 <GetUart>
 8009524:	0006      	movs	r6, r0
 8009526:	ab0a      	add	r3, sp, #40	; 0x28
 8009528:	7818      	ldrb	r0, [r3, #0]
 800952a:	f005 f9b9 	bl	800e8a0 <GetUart>
 800952e:	0001      	movs	r1, r0
 8009530:	2201      	movs	r2, #1
 8009532:	0030      	movs	r0, r6
 8009534:	f7fe f86c 	bl	8007610 <StartDMAstream>
 8009538:	0002      	movs	r2, r0
 800953a:	2817      	cmp	r0, #23
 800953c:	d054      	beq.n	80095e8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 800953e:	260f      	movs	r6, #15
 8009540:	446e      	add	r6, sp
 8009542:	0160      	lsls	r0, r4, #5
 8009544:	1b00      	subs	r0, r0, r4
 8009546:	0080      	lsls	r0, r0, #2
 8009548:	1900      	adds	r0, r0, r4
 800954a:	00c0      	lsls	r0, r0, #3
 800954c:	21fa      	movs	r1, #250	; 0xfa
 800954e:	0089      	lsls	r1, r1, #2
 8009550:	f7f6 fdfe 	bl	8000150 <__udivsi3>
 8009554:	0001      	movs	r1, r0
 8009556:	4b27      	ldr	r3, [pc, #156]	; (80095f4 <SetupDMAStreams+0x1a8>)
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	0033      	movs	r3, r6
 800955c:	2200      	movs	r2, #0
 800955e:	4826      	ldr	r0, [pc, #152]	; (80095f8 <SetupDMAStreams+0x1ac>)
 8009560:	f006 ffdc 	bl	801051c <xTimerCreate>
 8009564:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8009566:	7833      	ldrb	r3, [r6, #0]
 8009568:	3b01      	subs	r3, #1
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4a23      	ldr	r2, [pc, #140]	; (80095fc <SetupDMAStreams+0x1b0>)
 800956e:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8009570:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8009572:	2c00      	cmp	r4, #0
 8009574:	d038      	beq.n	80095e8 <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8009576:	f006 fa69 	bl	800fa4c <xTaskGetTickCount>
 800957a:	0002      	movs	r2, r0
 800957c:	2301      	movs	r3, #1
 800957e:	425b      	negs	r3, r3
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	2300      	movs	r3, #0
 8009584:	2101      	movs	r1, #1
 8009586:	0020      	movs	r0, r4
 8009588:	f006 ffe8 	bl	801055c <xTimerGenericCommand>
	return BOS_OK;
 800958c:	2200      	movs	r2, #0
 800958e:	e02b      	b.n	80095e8 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009590:	0010      	movs	r0, r2
 8009592:	f005 f985 	bl	800e8a0 <GetUart>
 8009596:	0006      	movs	r6, r0
 8009598:	230f      	movs	r3, #15
 800959a:	446b      	add	r3, sp
 800959c:	7818      	ldrb	r0, [r3, #0]
 800959e:	f005 f97f 	bl	800e8a0 <GetUart>
 80095a2:	0001      	movs	r1, r0
 80095a4:	2201      	movs	r2, #1
 80095a6:	0030      	movs	r0, r6
 80095a8:	f7fe f832 	bl	8007610 <StartDMAstream>
 80095ac:	0002      	movs	r2, r0
 80095ae:	2817      	cmp	r0, #23
 80095b0:	d01a      	beq.n	80095e8 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80095b2:	0160      	lsls	r0, r4, #5
 80095b4:	1b00      	subs	r0, r0, r4
 80095b6:	0080      	lsls	r0, r0, #2
 80095b8:	1900      	adds	r0, r0, r4
 80095ba:	00c0      	lsls	r0, r0, #3
 80095bc:	21fa      	movs	r1, #250	; 0xfa
 80095be:	0089      	lsls	r1, r1, #2
 80095c0:	f7f6 fdc6 	bl	8000150 <__udivsi3>
 80095c4:	0001      	movs	r1, r0
 80095c6:	4b0b      	ldr	r3, [pc, #44]	; (80095f4 <SetupDMAStreams+0x1a8>)
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	ab0a      	add	r3, sp, #40	; 0x28
 80095cc:	2200      	movs	r2, #0
 80095ce:	480a      	ldr	r0, [pc, #40]	; (80095f8 <SetupDMAStreams+0x1ac>)
 80095d0:	f006 ffa4 	bl	801051c <xTimerCreate>
 80095d4:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 80095d6:	230f      	movs	r3, #15
 80095d8:	446b      	add	r3, sp
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4a06      	ldr	r2, [pc, #24]	; (80095fc <SetupDMAStreams+0x1b0>)
 80095e2:	509d      	str	r5, [r3, r2]
 80095e4:	e7c4      	b.n	8009570 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 80095e6:	2267      	movs	r2, #103	; 0x67
}
 80095e8:	0010      	movs	r0, r2
 80095ea:	b005      	add	sp, #20
 80095ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80095ee:	2267      	movs	r2, #103	; 0x67
 80095f0:	e7fa      	b.n	80095e8 <SetupDMAStreams+0x19c>
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	08009435 	.word	0x08009435
 80095f8:	0801bc28 	.word	0x0801bc28
 80095fc:	20001838 	.word	0x20001838
 8009600:	2000116c 	.word	0x2000116c

08009604 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8009604:	b510      	push	{r4, lr}
	switch(port){
 8009606:	2806      	cmp	r0, #6
 8009608:	d80a      	bhi.n	8009620 <NotifyMessagingTask+0x1c>
 800960a:	0080      	lsls	r0, r0, #2
 800960c:	4b19      	ldr	r3, [pc, #100]	; (8009674 <NotifyMessagingTask+0x70>)
 800960e:	581b      	ldr	r3, [r3, r0]
 8009610:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8009612:	4b19      	ldr	r3, [pc, #100]	; (8009678 <NotifyMessagingTask+0x74>)
 8009614:	6818      	ldr	r0, [r3, #0]
 8009616:	2300      	movs	r3, #0
 8009618:	2202      	movs	r2, #2
 800961a:	2100      	movs	r1, #0
 800961c:	f006 feae 	bl	801037c <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8009620:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8009622:	4b16      	ldr	r3, [pc, #88]	; (800967c <NotifyMessagingTask+0x78>)
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	2300      	movs	r3, #0
 8009628:	2202      	movs	r2, #2
 800962a:	2100      	movs	r1, #0
 800962c:	f006 fea6 	bl	801037c <xTaskGenericNotify>
			break;
 8009630:	e7f6      	b.n	8009620 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <NotifyMessagingTask+0x7c>)
 8009634:	6818      	ldr	r0, [r3, #0]
 8009636:	2300      	movs	r3, #0
 8009638:	2202      	movs	r2, #2
 800963a:	2100      	movs	r1, #0
 800963c:	f006 fe9e 	bl	801037c <xTaskGenericNotify>
			break;
 8009640:	e7ee      	b.n	8009620 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8009642:	4b10      	ldr	r3, [pc, #64]	; (8009684 <NotifyMessagingTask+0x80>)
 8009644:	6818      	ldr	r0, [r3, #0]
 8009646:	2300      	movs	r3, #0
 8009648:	2202      	movs	r2, #2
 800964a:	2100      	movs	r1, #0
 800964c:	f006 fe96 	bl	801037c <xTaskGenericNotify>
			break;
 8009650:	e7e6      	b.n	8009620 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8009652:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <NotifyMessagingTask+0x84>)
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	2300      	movs	r3, #0
 8009658:	2202      	movs	r2, #2
 800965a:	2100      	movs	r1, #0
 800965c:	f006 fe8e 	bl	801037c <xTaskGenericNotify>
			break;
 8009660:	e7de      	b.n	8009620 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 8009662:	4b0a      	ldr	r3, [pc, #40]	; (800968c <NotifyMessagingTask+0x88>)
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	2300      	movs	r3, #0
 8009668:	2202      	movs	r2, #2
 800966a:	2100      	movs	r1, #0
 800966c:	f006 fe86 	bl	801037c <xTaskGenericNotify>
}
 8009670:	e7d6      	b.n	8009620 <NotifyMessagingTask+0x1c>
 8009672:	46c0      	nop			; (mov r8, r8)
 8009674:	0801bc0c 	.word	0x0801bc0c
 8009678:	20001858 	.word	0x20001858
 800967c:	2000185c 	.word	0x2000185c
 8009680:	20001860 	.word	0x20001860
 8009684:	20001864 	.word	0x20001864
 8009688:	20001868 	.word	0x20001868
 800968c:	2000186c 	.word	0x2000186c

08009690 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009692:	46de      	mov	lr, fp
 8009694:	4657      	mov	r7, sl
 8009696:	464e      	mov	r6, r9
 8009698:	4645      	mov	r5, r8
 800969a:	b5e0      	push	{r5, r6, r7, lr}
 800969c:	b087      	sub	sp, #28
 800969e:	0005      	movs	r5, r0
 80096a0:	9103      	str	r1, [sp, #12]
 80096a2:	0014      	movs	r4, r2
 80096a4:	4699      	mov	r9, r3
 80096a6:	ab10      	add	r3, sp, #64	; 0x40
 80096a8:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 80096aa:	0003      	movs	r3, r0
 80096ac:	4313      	orrs	r3, r2
 80096ae:	d100      	bne.n	80096b2 <SendMessageFromPort+0x22>
 80096b0:	e1e8      	b.n	8009a84 <SendMessageFromPort+0x3f4>
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d14d      	bne.n	8009752 <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80096b6:	1c93      	adds	r3, r2, #2
 80096b8:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 80096ba:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d900      	bls.n	80096c2 <SendMessageFromPort+0x32>
 80096c0:	e162      	b.n	8009988 <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 80096c2:	2000      	movs	r0, #0
 80096c4:	f006 f92a 	bl	800f91c <uxTaskPriorityGet>
 80096c8:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 80096ca:	2105      	movs	r1, #5
 80096cc:	2000      	movs	r0, #0
 80096ce:	f006 f935 	bl	800f93c <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 80096d2:	4bc4      	ldr	r3, [pc, #784]	; (80099e4 <SendMessageFromPort+0x354>)
 80096d4:	2248      	movs	r2, #72	; 0x48
 80096d6:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80096d8:	3212      	adds	r2, #18
 80096da:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80096dc:	9b03      	ldr	r3, [sp, #12]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d000      	beq.n	80096e4 <SendMessageFromPort+0x54>
 80096e2:	e1e8      	b.n	8009ab6 <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80096e4:	1e73      	subs	r3, r6, #1
 80096e6:	4ac0      	ldr	r2, [pc, #768]	; (80099e8 <SendMessageFromPort+0x358>)
 80096e8:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80096ea:	4ec0      	ldr	r6, [pc, #768]	; (80099ec <SendMessageFromPort+0x35c>)
 80096ec:	00d9      	lsls	r1, r3, #3
 80096ee:	1ac9      	subs	r1, r1, r3
 80096f0:	00c9      	lsls	r1, r1, #3
 80096f2:	4bbf      	ldr	r3, [pc, #764]	; (80099f0 <SendMessageFromPort+0x360>)
 80096f4:	18c9      	adds	r1, r1, r3
 80096f6:	003a      	movs	r2, r7
 80096f8:	0030      	movs	r0, r6
 80096fa:	f00b f922 	bl	8014942 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 80096fe:	3e03      	subs	r6, #3
 8009700:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8009702:	1cfb      	adds	r3, r7, #3
 8009704:	4698      	mov	r8, r3
 8009706:	001a      	movs	r2, r3
 8009708:	0031      	movs	r1, r6
 800970a:	48ba      	ldr	r0, [pc, #744]	; (80099f4 <SendMessageFromPort+0x364>)
 800970c:	f00b f919 	bl	8014942 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8009710:	b2bf      	uxth	r7, r7
 8009712:	1cf9      	adds	r1, r7, #3
 8009714:	48b7      	ldr	r0, [pc, #732]	; (80099f4 <SendMessageFromPort+0x364>)
 8009716:	f004 fa21 	bl	800db5c <CalculateCRC8>
 800971a:	4643      	mov	r3, r8
 800971c:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 800971e:	2238      	movs	r2, #56	; 0x38
 8009720:	2100      	movs	r1, #0
 8009722:	48b4      	ldr	r0, [pc, #720]	; (80099f4 <SendMessageFromPort+0x364>)
 8009724:	f00b f916 	bl	8014954 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009728:	3402      	adds	r4, #2
 800972a:	b2e4      	uxtb	r4, r4
 800972c:	2c01      	cmp	r4, #1
 800972e:	d800      	bhi.n	8009732 <SendMessageFromPort+0xa2>
 8009730:	e14e      	b.n	80099d0 <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8009732:	464b      	mov	r3, r9
 8009734:	3b2c      	subs	r3, #44	; 0x2c
 8009736:	b29b      	uxth	r3, r3
 8009738:	2b01      	cmp	r3, #1
 800973a:	d800      	bhi.n	800973e <SendMessageFromPort+0xae>
 800973c:	e110      	b.n	8009960 <SendMessageFromPort+0x2d0>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800973e:	4bae      	ldr	r3, [pc, #696]	; (80099f8 <SendMessageFromPort+0x368>)
 8009740:	88db      	ldrh	r3, [r3, #6]
 8009742:	2600      	movs	r6, #0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d100      	bne.n	800974a <SendMessageFromPort+0xba>
 8009748:	e111      	b.n	800996e <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 800974a:	3704      	adds	r7, #4
 800974c:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 800974e:	4cab      	ldr	r4, [pc, #684]	; (80099fc <SendMessageFromPort+0x36c>)
 8009750:	e12d      	b.n	80099ae <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8009752:	9b03      	ldr	r3, [sp, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <SendMessageFromPort+0xce>
 8009758:	2a00      	cmp	r2, #0
 800975a:	d100      	bne.n	800975e <SendMessageFromPort+0xce>
 800975c:	e194      	b.n	8009a88 <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 800975e:	2000      	movs	r0, #0
 8009760:	f006 f8dc 	bl	800f91c <uxTaskPriorityGet>
 8009764:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009766:	2105      	movs	r1, #5
 8009768:	2000      	movs	r0, #0
 800976a:	f006 f8e7 	bl	800f93c <vTaskPrioritySet>
	message[0] ='H';
 800976e:	4b9d      	ldr	r3, [pc, #628]	; (80099e4 <SendMessageFromPort+0x354>)
 8009770:	2248      	movs	r2, #72	; 0x48
 8009772:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8009774:	3212      	adds	r2, #18
 8009776:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009778:	464b      	mov	r3, r9
 800977a:	2b00      	cmp	r3, #0
 800977c:	d0b2      	beq.n	80096e4 <SendMessageFromPort+0x54>
		if(src == 0)
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <SendMessageFromPort+0xfa>
			src =myID;
 8009784:	4b9e      	ldr	r3, [pc, #632]	; (8009a00 <SendMessageFromPort+0x370>)
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	9303      	str	r3, [sp, #12]
		message[2] =length;
 800978a:	4a96      	ldr	r2, [pc, #600]	; (80099e4 <SendMessageFromPort+0x354>)
 800978c:	2300      	movs	r3, #0
 800978e:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8009790:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009796:	4998      	ldr	r1, [pc, #608]	; (80099f8 <SendMessageFromPort+0x368>)
 8009798:	790b      	ldrb	r3, [r1, #4]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	7848      	ldrb	r0, [r1, #1]
 800979e:	0080      	lsls	r0, r0, #2
 80097a0:	4303      	orrs	r3, r0
 80097a2:	7809      	ldrb	r1, [r1, #0]
 80097a4:	430b      	orrs	r3, r1
		if(code > 0xFF)
 80097a6:	21ff      	movs	r1, #255	; 0xff
 80097a8:	4549      	cmp	r1, r9
 80097aa:	4189      	sbcs	r1, r1
 80097ac:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 80097ae:	0049      	lsls	r1, r1, #1
 80097b0:	430b      	orrs	r3, r1
 80097b2:	b2db      	uxtb	r3, r3
 80097b4:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 80097b6:	4649      	mov	r1, r9
 80097b8:	7191      	strb	r1, [r2, #6]
 80097ba:	2200      	movs	r2, #0
 80097bc:	4693      	mov	fp, r2
		if(extendCode == true){
 80097be:	29ff      	cmp	r1, #255	; 0xff
 80097c0:	d904      	bls.n	80097cc <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 80097c2:	0a0a      	lsrs	r2, r1, #8
 80097c4:	4987      	ldr	r1, [pc, #540]	; (80099e4 <SendMessageFromPort+0x354>)
 80097c6:	71ca      	strb	r2, [r1, #7]
			++shift;
 80097c8:	2201      	movs	r2, #1
 80097ca:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 80097cc:	2e2e      	cmp	r6, #46	; 0x2e
 80097ce:	d932      	bls.n	8009836 <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 80097d0:	2280      	movs	r2, #128	; 0x80
 80097d2:	4252      	negs	r2, r2
 80097d4:	4313      	orrs	r3, r2
 80097d6:	4a83      	ldr	r2, [pc, #524]	; (80099e4 <SendMessageFromPort+0x354>)
 80097d8:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80097da:	4b8a      	ldr	r3, [pc, #552]	; (8009a04 <SendMessageFromPort+0x374>)
 80097dc:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 80097de:	2300      	movs	r3, #0
 80097e0:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80097e2:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80097e4:	465b      	mov	r3, fp
 80097e6:	1ddf      	adds	r7, r3, #7
 80097e8:	003b      	movs	r3, r7
 80097ea:	4694      	mov	ip, r2
 80097ec:	4463      	add	r3, ip
 80097ee:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 80097f0:	4b84      	ldr	r3, [pc, #528]	; (8009a04 <SendMessageFromPort+0x374>)
 80097f2:	881f      	ldrh	r7, [r3, #0]
 80097f4:	2f00      	cmp	r7, #0
 80097f6:	d02d      	beq.n	8009854 <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80097f8:	0031      	movs	r1, r6
 80097fa:	0038      	movs	r0, r7
 80097fc:	f7f6 fca8 	bl	8000150 <__udivsi3>
 8009800:	b280      	uxth	r0, r0
 8009802:	2800      	cmp	r0, #0
 8009804:	d141      	bne.n	800988a <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8009806:	4b77      	ldr	r3, [pc, #476]	; (80099e4 <SendMessageFromPort+0x354>)
 8009808:	795a      	ldrb	r2, [r3, #5]
 800980a:	237f      	movs	r3, #127	; 0x7f
 800980c:	4013      	ands	r3, r2
 800980e:	4a75      	ldr	r2, [pc, #468]	; (80099e4 <SendMessageFromPort+0x354>)
 8009810:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009812:	4e7d      	ldr	r6, [pc, #500]	; (8009a08 <SendMessageFromPort+0x378>)
 8009814:	8831      	ldrh	r1, [r6, #0]
 8009816:	4b7d      	ldr	r3, [pc, #500]	; (8009a0c <SendMessageFromPort+0x37c>)
 8009818:	18c9      	adds	r1, r1, r3
 800981a:	003a      	movs	r2, r7
 800981c:	9805      	ldr	r0, [sp, #20]
 800981e:	f00b f890 	bl	8014942 <memcpy>
					ptrShift =0;
 8009822:	2300      	movs	r3, #0
 8009824:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8009826:	4a77      	ldr	r2, [pc, #476]	; (8009a04 <SendMessageFromPort+0x374>)
 8009828:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	445b      	add	r3, fp
 800982e:	b2db      	uxtb	r3, r3
 8009830:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 8009832:	003e      	movs	r6, r7
 8009834:	e7dc      	b.n	80097f0 <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8009836:	465b      	mov	r3, fp
 8009838:	3307      	adds	r3, #7
 800983a:	486a      	ldr	r0, [pc, #424]	; (80099e4 <SendMessageFromPort+0x354>)
 800983c:	1818      	adds	r0, r3, r0
 800983e:	4b72      	ldr	r3, [pc, #456]	; (8009a08 <SendMessageFromPort+0x378>)
 8009840:	8819      	ldrh	r1, [r3, #0]
 8009842:	4b72      	ldr	r3, [pc, #456]	; (8009a0c <SendMessageFromPort+0x37c>)
 8009844:	18c9      	adds	r1, r1, r3
 8009846:	0032      	movs	r2, r6
 8009848:	f00b f87b 	bl	8014942 <memcpy>
			length =numberOfParams + shift + 4;
 800984c:	1d31      	adds	r1, r6, #4
 800984e:	4459      	add	r1, fp
 8009850:	b2cb      	uxtb	r3, r1
 8009852:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 8009854:	4b6e      	ldr	r3, [pc, #440]	; (8009a10 <SendMessageFromPort+0x380>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d058      	beq.n	800990e <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 800985c:	4b6d      	ldr	r3, [pc, #436]	; (8009a14 <SendMessageFromPort+0x384>)
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	2bff      	cmp	r3, #255	; 0xff
 8009862:	d100      	bne.n	8009866 <SendMessageFromPort+0x1d6>
 8009864:	e114      	b.n	8009a90 <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009866:	4a6c      	ldr	r2, [pc, #432]	; (8009a18 <SendMessageFromPort+0x388>)
 8009868:	7817      	ldrb	r7, [r2, #0]
 800986a:	2f00      	cmp	r7, #0
 800986c:	d076      	beq.n	800995c <SendMessageFromPort+0x2cc>
 800986e:	2201      	movs	r2, #1
 8009870:	409a      	lsls	r2, r3
 8009872:	4690      	mov	r8, r2
 8009874:	4869      	ldr	r0, [pc, #420]	; (8009a1c <SendMessageFromPort+0x38c>)
 8009876:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8009878:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 800987a:	495a      	ldr	r1, [pc, #360]	; (80099e4 <SendMessageFromPort+0x354>)
 800987c:	468c      	mov	ip, r1
 800987e:	44b4      	add	ip, r6
 8009880:	9505      	str	r5, [sp, #20]
 8009882:	4645      	mov	r5, r8
 8009884:	46a0      	mov	r8, r4
 8009886:	465c      	mov	r4, fp
 8009888:	e017      	b.n	80098ba <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 800988a:	9600      	str	r6, [sp, #0]
 800988c:	464b      	mov	r3, r9
 800988e:	0022      	movs	r2, r4
 8009890:	9903      	ldr	r1, [sp, #12]
 8009892:	0028      	movs	r0, r5
 8009894:	f7ff fefc 	bl	8009690 <SendMessageFromPort>
					osDelay(10);
 8009898:	200a      	movs	r0, #10
 800989a:	f005 f950 	bl	800eb3e <osDelay>
					totalNumberOfParams -=numberOfParams;
 800989e:	4a59      	ldr	r2, [pc, #356]	; (8009a04 <SendMessageFromPort+0x374>)
 80098a0:	8813      	ldrh	r3, [r2, #0]
 80098a2:	1b9b      	subs	r3, r3, r6
 80098a4:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 80098a6:	4a58      	ldr	r2, [pc, #352]	; (8009a08 <SendMessageFromPort+0x378>)
 80098a8:	8813      	ldrh	r3, [r2, #0]
 80098aa:	18f3      	adds	r3, r6, r3
 80098ac:	8013      	strh	r3, [r2, #0]
 80098ae:	e79f      	b.n	80097f0 <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 80098b0:	3301      	adds	r3, #1
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	3002      	adds	r0, #2
 80098b6:	42bb      	cmp	r3, r7
 80098b8:	d80e      	bhi.n	80098d8 <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 80098ba:	8801      	ldrh	r1, [r0, #0]
 80098bc:	420d      	tst	r5, r1
 80098be:	d0f7      	beq.n	80098b0 <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 80098c0:	3201      	adds	r2, #1
 80098c2:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 80098c4:	18b1      	adds	r1, r6, r2
 80098c6:	3101      	adds	r1, #1
 80098c8:	292d      	cmp	r1, #45	; 0x2d
 80098ca:	dd00      	ble.n	80098ce <SendMessageFromPort+0x23e>
 80098cc:	e0de      	b.n	8009a8c <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 80098ce:	4661      	mov	r1, ip
 80098d0:	1889      	adds	r1, r1, r2
 80098d2:	1909      	adds	r1, r1, r4
 80098d4:	718b      	strb	r3, [r1, #6]
 80098d6:	e7eb      	b.n	80098b0 <SendMessageFromPort+0x220>
 80098d8:	46a3      	mov	fp, r4
 80098da:	9d05      	ldr	r5, [sp, #20]
 80098dc:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80098de:	465b      	mov	r3, fp
 80098e0:	3307      	adds	r3, #7
 80098e2:	199b      	adds	r3, r3, r6
 80098e4:	189b      	adds	r3, r3, r2
 80098e6:	493f      	ldr	r1, [pc, #252]	; (80099e4 <SendMessageFromPort+0x354>)
 80098e8:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80098ea:	18b1      	adds	r1, r6, r2
 80098ec:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80098ee:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80098f0:	292d      	cmp	r1, #45	; 0x2d
 80098f2:	dc49      	bgt.n	8009988 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80098f4:	484a      	ldr	r0, [pc, #296]	; (8009a20 <SendMessageFromPort+0x390>)
 80098f6:	7801      	ldrb	r1, [r0, #0]
 80098f8:	3101      	adds	r1, #1
 80098fa:	b2c9      	uxtb	r1, r1
 80098fc:	7001      	strb	r1, [r0, #0]
 80098fe:	4839      	ldr	r0, [pc, #228]	; (80099e4 <SendMessageFromPort+0x354>)
 8009900:	18c3      	adds	r3, r0, r3
 8009902:	7059      	strb	r1, [r3, #1]
 8009904:	4651      	mov	r1, sl
 8009906:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009908:	188a      	adds	r2, r1, r2
 800990a:	b2d3      	uxtb	r3, r2
 800990c:	469a      	mov	sl, r3
	message[2] =length;
 800990e:	4b35      	ldr	r3, [pc, #212]	; (80099e4 <SendMessageFromPort+0x354>)
 8009910:	4698      	mov	r8, r3
 8009912:	4652      	mov	r2, sl
 8009914:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8009916:	1cd6      	adds	r6, r2, #3
 8009918:	0032      	movs	r2, r6
 800991a:	4641      	mov	r1, r8
 800991c:	4835      	ldr	r0, [pc, #212]	; (80099f4 <SendMessageFromPort+0x364>)
 800991e:	f00b f810 	bl	8014942 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8009922:	4653      	mov	r3, sl
 8009924:	b29f      	uxth	r7, r3
 8009926:	0031      	movs	r1, r6
 8009928:	4832      	ldr	r0, [pc, #200]	; (80099f4 <SendMessageFromPort+0x364>)
 800992a:	f004 f917 	bl	800db5c <CalculateCRC8>
 800992e:	4643      	mov	r3, r8
 8009930:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8009932:	2238      	movs	r2, #56	; 0x38
 8009934:	2100      	movs	r1, #0
 8009936:	482f      	ldr	r0, [pc, #188]	; (80099f4 <SendMessageFromPort+0x364>)
 8009938:	f00b f80c 	bl	8014954 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 800993c:	3402      	adds	r4, #2
 800993e:	b2e4      	uxtb	r4, r4
 8009940:	2c01      	cmp	r4, #1
 8009942:	d900      	bls.n	8009946 <SendMessageFromPort+0x2b6>
 8009944:	e6f5      	b.n	8009732 <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009946:	9803      	ldr	r0, [sp, #12]
 8009948:	f7f9 ff94 	bl	8003874 <FindBroadcastRoutes>
 800994c:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 800994e:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009950:	4b34      	ldr	r3, [pc, #208]	; (8009a24 <SendMessageFromPort+0x394>)
 8009952:	4699      	mov	r9, r3
 8009954:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <SendMessageFromPort+0x370>)
 8009956:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009958:	9503      	str	r5, [sp, #12]
 800995a:	e074      	b.n	8009a46 <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 800995c:	2200      	movs	r2, #0
 800995e:	e7be      	b.n	80098de <SendMessageFromPort+0x24e>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009960:	1d3a      	adds	r2, r7, #4
 8009962:	b292      	uxth	r2, r2
 8009964:	2332      	movs	r3, #50	; 0x32
 8009966:	491f      	ldr	r1, [pc, #124]	; (80099e4 <SendMessageFromPort+0x354>)
 8009968:	0028      	movs	r0, r5
 800996a:	f005 f805 	bl	800e978 <writePxDMAMutex>
		ACK_FLAG =false; rejected_FLAG=false;
 800996e:	2300      	movs	r3, #0
 8009970:	4a22      	ldr	r2, [pc, #136]	; (80099fc <SendMessageFromPort+0x36c>)
 8009972:	7013      	strb	r3, [r2, #0]
 8009974:	4a2c      	ldr	r2, [pc, #176]	; (8009a28 <SendMessageFromPort+0x398>)
 8009976:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8009978:	9904      	ldr	r1, [sp, #16]
 800997a:	2000      	movs	r0, #0
 800997c:	f005 ffde 	bl	800f93c <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8009980:	4b2a      	ldr	r3, [pc, #168]	; (8009a2c <SendMessageFromPort+0x39c>)
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
	
	return result;
 8009986:	2000      	movs	r0, #0
}
 8009988:	b007      	add	sp, #28
 800998a:	bc3c      	pop	{r2, r3, r4, r5}
 800998c:	4690      	mov	r8, r2
 800998e:	4699      	mov	r9, r3
 8009990:	46a2      	mov	sl, r4
 8009992:	46ab      	mov	fp, r5
 8009994:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009996:	2332      	movs	r3, #50	; 0x32
 8009998:	003a      	movs	r2, r7
 800999a:	4912      	ldr	r1, [pc, #72]	; (80099e4 <SendMessageFromPort+0x354>)
 800999c:	0028      	movs	r0, r5
 800999e:	f004 ffeb 	bl	800e978 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 80099a2:	3601      	adds	r6, #1
 80099a4:	b2f6      	uxtb	r6, r6
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <SendMessageFromPort+0x368>)
 80099a8:	88db      	ldrh	r3, [r3, #6]
 80099aa:	42b3      	cmp	r3, r6
 80099ac:	d9df      	bls.n	800996e <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 80099ae:	2332      	movs	r3, #50	; 0x32
 80099b0:	003a      	movs	r2, r7
 80099b2:	490c      	ldr	r1, [pc, #48]	; (80099e4 <SendMessageFromPort+0x354>)
 80099b4:	0028      	movs	r0, r5
 80099b6:	f004 ffdf 	bl	800e978 <writePxDMAMutex>
				osDelay(200);
 80099ba:	20c8      	movs	r0, #200	; 0xc8
 80099bc:	f005 f8bf 	bl	800eb3e <osDelay>
				if(ACK_FLAG == true)
 80099c0:	7823      	ldrb	r3, [r4, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d1d3      	bne.n	800996e <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 80099c6:	4b18      	ldr	r3, [pc, #96]	; (8009a28 <SendMessageFromPort+0x398>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0e9      	beq.n	80099a2 <SendMessageFromPort+0x312>
 80099ce:	e7e2      	b.n	8009996 <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 80099d0:	464b      	mov	r3, r9
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1b7      	bne.n	8009946 <SendMessageFromPort+0x2b6>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1b4      	bne.n	8009946 <SendMessageFromPort+0x2b6>
			src =message[4];
 80099dc:	4b01      	ldr	r3, [pc, #4]	; (80099e4 <SendMessageFromPort+0x354>)
 80099de:	791b      	ldrb	r3, [r3, #4]
 80099e0:	9303      	str	r3, [sp, #12]
 80099e2:	e7b0      	b.n	8009946 <SendMessageFromPort+0x2b6>
 80099e4:	20000f6c 	.word	0x20000f6c
 80099e8:	20000fa4 	.word	0x20000fa4
 80099ec:	20000f6f 	.word	0x20000f6f
 80099f0:	20000d7c 	.word	0x20000d7c
 80099f4:	200017d0 	.word	0x200017d0
 80099f8:	20006dd4 	.word	0x20006dd4
 80099fc:	20000ae4 	.word	0x20000ae4
 8009a00:	200010ea 	.word	0x200010ea
 8009a04:	20001a0e 	.word	0x20001a0e
 8009a08:	20001a0c 	.word	0x20001a0c
 8009a0c:	20000fac 	.word	0x20000fac
 8009a10:	20000ae5 	.word	0x20000ae5
 8009a14:	20000045 	.word	0x20000045
 8009a18:	20000044 	.word	0x20000044
 8009a1c:	20000f34 	.word	0x20000f34
 8009a20:	20000d28 	.word	0x20000d28
 8009a24:	20000d2c 	.word	0x20000d2c
 8009a28:	2000117c 	.word	0x2000117c
 8009a2c:	20001188 	.word	0x20001188
			rejected_FLAG=false;
 8009a30:	4b23      	ldr	r3, [pc, #140]	; (8009ac0 <SendMessageFromPort+0x430>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8009a36:	200a      	movs	r0, #10
 8009a38:	f004 fd46 	bl	800e4c8 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	b2e4      	uxtb	r4, r4
 8009a40:	3601      	adds	r6, #1
 8009a42:	2c07      	cmp	r4, #7
 8009a44:	d098      	beq.n	8009978 <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009a46:	4643      	mov	r3, r8
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	3b01      	subs	r3, #1
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	464a      	mov	r2, r9
 8009a50:	5a9b      	ldrh	r3, [r3, r2]
 8009a52:	4133      	asrs	r3, r6
 8009a54:	07db      	lsls	r3, r3, #31
 8009a56:	d5eb      	bpl.n	8009a30 <SendMessageFromPort+0x3a0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009a58:	1d3d      	adds	r5, r7, #4
 8009a5a:	b2ad      	uxth	r5, r5
 8009a5c:	2332      	movs	r3, #50	; 0x32
 8009a5e:	002a      	movs	r2, r5
 8009a60:	4918      	ldr	r1, [pc, #96]	; (8009ac4 <SendMessageFromPort+0x434>)
 8009a62:	0020      	movs	r0, r4
 8009a64:	f004 ff88 	bl	800e978 <writePxDMAMutex>
				osDelay(200);
 8009a68:	20c8      	movs	r0, #200	; 0xc8
 8009a6a:	f005 f868 	bl	800eb3e <osDelay>
				if(rejected_FLAG == true)
 8009a6e:	4b14      	ldr	r3, [pc, #80]	; (8009ac0 <SendMessageFromPort+0x430>)
 8009a70:	781b      	ldrb	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d0dc      	beq.n	8009a30 <SendMessageFromPort+0x3a0>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009a76:	2332      	movs	r3, #50	; 0x32
 8009a78:	002a      	movs	r2, r5
 8009a7a:	4912      	ldr	r1, [pc, #72]	; (8009ac4 <SendMessageFromPort+0x434>)
 8009a7c:	9803      	ldr	r0, [sp, #12]
 8009a7e:	f004 ff7b 	bl	800e978 <writePxDMAMutex>
 8009a82:	e7d5      	b.n	8009a30 <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 8009a84:	2067      	movs	r0, #103	; 0x67
 8009a86:	e77f      	b.n	8009988 <SendMessageFromPort+0x2f8>
 8009a88:	2067      	movs	r0, #103	; 0x67
 8009a8a:	e77d      	b.n	8009988 <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a8c:	2069      	movs	r0, #105	; 0x69
 8009a8e:	e77b      	b.n	8009988 <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009a90:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a92:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009a94:	2b2d      	cmp	r3, #45	; 0x2d
 8009a96:	dd00      	ble.n	8009a9a <SendMessageFromPort+0x40a>
 8009a98:	e776      	b.n	8009988 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 8009a9a:	4a0b      	ldr	r2, [pc, #44]	; (8009ac8 <SendMessageFromPort+0x438>)
 8009a9c:	7813      	ldrb	r3, [r2, #0]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	7013      	strb	r3, [r2, #0]
 8009aa4:	4a07      	ldr	r2, [pc, #28]	; (8009ac4 <SendMessageFromPort+0x434>)
 8009aa6:	1992      	adds	r2, r2, r6
 8009aa8:	445a      	add	r2, fp
 8009aaa:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 8009aac:	4651      	mov	r1, sl
 8009aae:	3101      	adds	r1, #1
 8009ab0:	b2cb      	uxtb	r3, r1
 8009ab2:	469a      	mov	sl, r3
 8009ab4:	e72b      	b.n	800990e <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009ab6:	464b      	mov	r3, r9
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d100      	bne.n	8009abe <SendMessageFromPort+0x42e>
 8009abc:	e612      	b.n	80096e4 <SendMessageFromPort+0x54>
 8009abe:	e664      	b.n	800978a <SendMessageFromPort+0xfa>
 8009ac0:	2000117c 	.word	0x2000117c
 8009ac4:	20000f6c 	.word	0x20000f6c
 8009ac8:	20000d28 	.word	0x20000d28

08009acc <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009acc:	b530      	push	{r4, r5, lr}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009ad2:	4b0b      	ldr	r3, [pc, #44]	; (8009b00 <ForwardReceivedMessage+0x34>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009ad8:	1e42      	subs	r2, r0, #1
 8009ada:	00d3      	lsls	r3, r2, #3
 8009adc:	1a9b      	subs	r3, r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	4a08      	ldr	r2, [pc, #32]	; (8009b04 <ForwardReceivedMessage+0x38>)
 8009ae2:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009ae4:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <ForwardReceivedMessage+0x3c>)
 8009ae6:	7818      	ldrb	r0, [r3, #0]
 8009ae8:	0021      	movs	r1, r4
 8009aea:	f7f9 ff91 	bl	8003a10 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009aee:	9500      	str	r5, [sp, #0]
 8009af0:	2300      	movs	r3, #0
 8009af2:	0022      	movs	r2, r4
 8009af4:	2100      	movs	r1, #0
 8009af6:	f7ff fdcb 	bl	8009690 <SendMessageFromPort>
}
 8009afa:	2000      	movs	r0, #0
 8009afc:	b003      	add	sp, #12
 8009afe:	bd30      	pop	{r4, r5, pc}
 8009b00:	20000ae5 	.word	0x20000ae5
 8009b04:	20000d7c 	.word	0x20000d7c
 8009b08:	200010ea 	.word	0x200010ea

08009b0c <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009b0c:	b500      	push	{lr}
 8009b0e:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <BroadcastReceivedMessage+0x38>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009b16:	4b0c      	ldr	r3, [pc, #48]	; (8009b48 <BroadcastReceivedMessage+0x3c>)
 8009b18:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009b1a:	28ff      	cmp	r0, #255	; 0xff
 8009b1c:	d009      	beq.n	8009b32 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009b1e:	9100      	str	r1, [sp, #0]
 8009b20:	2300      	movs	r3, #0
 8009b22:	22fe      	movs	r2, #254	; 0xfe
 8009b24:	2100      	movs	r1, #0
 8009b26:	2000      	movs	r0, #0
 8009b28:	f7ff fdb2 	bl	8009690 <SendMessageFromPort>
}
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	b003      	add	sp, #12
 8009b30:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009b32:	9100      	str	r1, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	32ff      	adds	r2, #255	; 0xff
 8009b38:	2100      	movs	r1, #0
 8009b3a:	2000      	movs	r0, #0
 8009b3c:	f7ff fda8 	bl	8009690 <SendMessageFromPort>
 8009b40:	e7f4      	b.n	8009b2c <BroadcastReceivedMessage+0x20>
 8009b42:	46c0      	nop			; (mov r8, r8)
 8009b44:	20000ae5 	.word	0x20000ae5
 8009b48:	20000045 	.word	0x20000045

08009b4c <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009b4c:	b530      	push	{r4, r5, lr}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009b52:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <BroadcastMessage+0x44>)
 8009b54:	2501      	movs	r5, #1
 8009b56:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009b58:	4b0e      	ldr	r3, [pc, #56]	; (8009b94 <BroadcastMessage+0x48>)
 8009b5a:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009b5c:	29ff      	cmp	r1, #255	; 0xff
 8009b5e:	d00e      	beq.n	8009b7e <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009b60:	9400      	str	r4, [sp, #0]
 8009b62:	0013      	movs	r3, r2
 8009b64:	22fe      	movs	r2, #254	; 0xfe
 8009b66:	0001      	movs	r1, r0
 8009b68:	2000      	movs	r0, #0
 8009b6a:	f7ff fd91 	bl	8009690 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009b6e:	0022      	movs	r2, r4
 8009b70:	2100      	movs	r1, #0
 8009b72:	4809      	ldr	r0, [pc, #36]	; (8009b98 <BroadcastMessage+0x4c>)
 8009b74:	f00a feee 	bl	8014954 <memset>
}
 8009b78:	2000      	movs	r0, #0
 8009b7a:	b003      	add	sp, #12
 8009b7c:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8009b7e:	9400      	str	r4, [sp, #0]
 8009b80:	0013      	movs	r3, r2
 8009b82:	22ff      	movs	r2, #255	; 0xff
 8009b84:	0001      	movs	r1, r0
 8009b86:	2000      	movs	r0, #0
 8009b88:	f7ff fd82 	bl	8009690 <SendMessageFromPort>
 8009b8c:	e7ef      	b.n	8009b6e <BroadcastMessage+0x22>
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	20000ae5 	.word	0x20000ae5
 8009b94:	20000045 	.word	0x20000045
 8009b98:	20000fac 	.word	0x20000fac

08009b9c <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	0004      	movs	r4, r0
 8009ba2:	000e      	movs	r6, r1
 8009ba4:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8009ba6:	28ff      	cmp	r0, #255	; 0xff
 8009ba8:	d012      	beq.n	8009bd0 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009baa:	4f0d      	ldr	r7, [pc, #52]	; (8009be0 <SendMessageToModule+0x44>)
 8009bac:	7838      	ldrb	r0, [r7, #0]
 8009bae:	0021      	movs	r1, r4
 8009bb0:	f7f9 ff2e 	bl	8003a10 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009bb4:	7839      	ldrb	r1, [r7, #0]
 8009bb6:	9500      	str	r5, [sp, #0]
 8009bb8:	0033      	movs	r3, r6
 8009bba:	0022      	movs	r2, r4
 8009bbc:	f7ff fd68 	bl	8009690 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009bc0:	002a      	movs	r2, r5
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	4807      	ldr	r0, [pc, #28]	; (8009be4 <SendMessageToModule+0x48>)
 8009bc6:	f00a fec5 	bl	8014954 <memset>
}
 8009bca:	2000      	movs	r0, #0
 8009bcc:	b003      	add	sp, #12
 8009bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009bd0:	4b03      	ldr	r3, [pc, #12]	; (8009be0 <SendMessageToModule+0x44>)
 8009bd2:	7818      	ldrb	r0, [r3, #0]
 8009bd4:	0013      	movs	r3, r2
 8009bd6:	000a      	movs	r2, r1
 8009bd8:	21ff      	movs	r1, #255	; 0xff
 8009bda:	f7ff ffb7 	bl	8009b4c <BroadcastMessage>
 8009bde:	e7f4      	b.n	8009bca <SendMessageToModule+0x2e>
 8009be0:	200010ea 	.word	0x200010ea
 8009be4:	20000fac 	.word	0x20000fac

08009be8 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bea:	46de      	mov	lr, fp
 8009bec:	4657      	mov	r7, sl
 8009bee:	464e      	mov	r6, r9
 8009bf0:	4645      	mov	r5, r8
 8009bf2:	b5e0      	push	{r5, r6, r7, lr}
 8009bf4:	b091      	sub	sp, #68	; 0x44
 8009bf6:	900f      	str	r0, [sp, #60]	; 0x3c
 8009bf8:	000c      	movs	r4, r1
 8009bfa:	9106      	str	r1, [sp, #24]
 8009bfc:	0015      	movs	r5, r2
 8009bfe:	920e      	str	r2, [sp, #56]	; 0x38
 8009c00:	001e      	movs	r6, r3
 8009c02:	ab1a      	add	r3, sp, #104	; 0x68
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	4698      	mov	r8, r3
 8009c08:	ab1d      	add	r3, sp, #116	; 0x74
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009c0e:	4b5a      	ldr	r3, [pc, #360]	; (8009d78 <StartScastDMAStream+0x190>)
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	428b      	cmp	r3, r1
 8009c14:	d11d      	bne.n	8009c52 <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c18:	0e1b      	lsrs	r3, r3, #24
 8009c1a:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c1e:	0c1b      	lsrs	r3, r3, #16
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8009c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c26:	0a1b      	lsrs	r3, r3, #8
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c2e:	0e1b      	lsrs	r3, r3, #24
 8009c30:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009c32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009c3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c3c:	0a1b      	lsrs	r3, r3, #8
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	469b      	mov	fp, r3
 8009c42:	4d4e      	ldr	r5, [pc, #312]	; (8009d7c <StartScastDMAStream+0x194>)
 8009c44:	231a      	movs	r3, #26
 8009c46:	4699      	mov	r9, r3
 8009c48:	44a9      	add	r9, r5
				temp2 =dstP;
 8009c4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c4c:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c4e:	4c4c      	ldr	r4, [pc, #304]	; (8009d80 <StartScastDMAStream+0x198>)
 8009c50:	e05c      	b.n	8009d0c <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c52:	4b4b      	ldr	r3, [pc, #300]	; (8009d80 <StartScastDMAStream+0x198>)
 8009c54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c56:	0e12      	lsrs	r2, r2, #24
 8009c58:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009c5a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c5c:	0c12      	lsrs	r2, r2, #16
 8009c5e:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009c60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c62:	0a12      	lsrs	r2, r2, #8
 8009c64:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009c66:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c68:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c6c:	0e12      	lsrs	r2, r2, #24
 8009c6e:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009c70:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c72:	0c12      	lsrs	r2, r2, #16
 8009c74:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009c76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c78:	0a12      	lsrs	r2, r2, #8
 8009c7a:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009c7c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c7e:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009c80:	4642      	mov	r2, r8
 8009c82:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009c84:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009c86:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009c88:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009c8e:	220d      	movs	r2, #13
 8009c90:	211c      	movs	r1, #28
 8009c92:	0020      	movs	r0, r4
 8009c94:	f7ff ff82 	bl	8009b9c <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009c98:	2000      	movs	r0, #0
 8009c9a:	b011      	add	sp, #68	; 0x44
 8009c9c:	bc3c      	pop	{r2, r3, r4, r5}
 8009c9e:	4690      	mov	r8, r2
 8009ca0:	4699      	mov	r9, r3
 8009ca2:	46a2      	mov	sl, r4
 8009ca4:	46ab      	mov	fp, r5
 8009ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8009ca8:	9906      	ldr	r1, [sp, #24]
 8009caa:	f7f9 feb1 	bl	8003a10 <FindRoute>
 8009cae:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8009cb0:	0031      	movs	r1, r6
 8009cb2:	9806      	ldr	r0, [sp, #24]
 8009cb4:	f7f9 feac 	bl	8003a10 <FindRoute>
			if(route[i] == dstM){
 8009cb8:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 8009cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 8009cbc:	42b0      	cmp	r0, r6
 8009cbe:	d134      	bne.n	8009d2a <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009cc0:	9a08      	ldr	r2, [sp, #32]
 8009cc2:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009cc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cc6:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009cc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cca:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009ccc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009cce:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009cd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009cd2:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009cd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd6:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009cd8:	465a      	mov	r2, fp
 8009cda:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009cdc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009cde:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009ce4:	9a07      	ldr	r2, [sp, #28]
 8009ce6:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009ce8:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009cea:	4653      	mov	r3, sl
 8009cec:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009cee:	0031      	movs	r1, r6
 8009cf0:	9806      	ldr	r0, [sp, #24]
 8009cf2:	f7f9 fe8d 	bl	8003a10 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009cf6:	7878      	ldrb	r0, [r7, #1]
 8009cf8:	220c      	movs	r2, #12
 8009cfa:	211b      	movs	r1, #27
 8009cfc:	f7ff ff4e 	bl	8009b9c <SendMessageToModule>
			osDelay(10);
 8009d00:	200a      	movs	r0, #10
 8009d02:	f004 ff1c 	bl	800eb3e <osDelay>
 8009d06:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009d08:	454d      	cmp	r5, r9
 8009d0a:	d013      	beq.n	8009d34 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009d0c:	0031      	movs	r1, r6
 8009d0e:	9806      	ldr	r0, [sp, #24]
 8009d10:	f7f9 fe7e 	bl	8003a10 <FindRoute>
 8009d14:	002f      	movs	r7, r5
		if(route[i]){
 8009d16:	7868      	ldrb	r0, [r5, #1]
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d0f4      	beq.n	8009d06 <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009d1c:	78a9      	ldrb	r1, [r5, #2]
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	d0c2      	beq.n	8009ca8 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009d22:	f7f9 fe75 	bl	8003a10 <FindRoute>
 8009d26:	9007      	str	r0, [sp, #28]
 8009d28:	e7c2      	b.n	8009cb0 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009d2a:	7839      	ldrb	r1, [r7, #0]
 8009d2c:	f7f9 fe70 	bl	8003a10 <FindRoute>
 8009d30:	0003      	movs	r3, r0
 8009d32:	e7c5      	b.n	8009cc0 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8009d34:	9806      	ldr	r0, [sp, #24]
 8009d36:	42b0      	cmp	r0, r6
 8009d38:	d118      	bne.n	8009d6c <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d40:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d42:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d44:	4640      	mov	r0, r8
 8009d46:	f7ff fb81 	bl	800944c <SetupDMAStreams>
	if(stored){
 8009d4a:	4653      	mov	r3, sl
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0a3      	beq.n	8009c98 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009d50:	2300      	movs	r3, #0
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	9302      	str	r3, [sp, #8]
 8009d58:	9301      	str	r3, [sp, #4]
 8009d5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d62:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d64:	4640      	mov	r0, r8
 8009d66:	f7f9 fbcf 	bl	8003508 <SaveEEstreams>
 8009d6a:	e795      	b.n	8009c98 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009d6c:	0031      	movs	r1, r6
 8009d6e:	f7f9 fe4f 	bl	8003a10 <FindRoute>
 8009d72:	900e      	str	r0, [sp, #56]	; 0x38
 8009d74:	e7e1      	b.n	8009d3a <StartScastDMAStream+0x152>
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	200010ea 	.word	0x200010ea
 8009d7c:	20006f67 	.word	0x20006f67
 8009d80:	20000fac 	.word	0x20000fac

08009d84 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d86:	46de      	mov	lr, fp
 8009d88:	4657      	mov	r7, sl
 8009d8a:	464e      	mov	r6, r9
 8009d8c:	4645      	mov	r5, r8
 8009d8e:	b5e0      	push	{r5, r6, r7, lr}
 8009d90:	b085      	sub	sp, #20
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009d92:	4bd2      	ldr	r3, [pc, #840]	; (800a0dc <BackEndTask+0x358>)
 8009d94:	3b70      	subs	r3, #112	; 0x70
 8009d96:	9302      	str	r3, [sp, #8]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009d98:	4bd0      	ldr	r3, [pc, #832]	; (800a0dc <BackEndTask+0x358>)
 8009d9a:	3b70      	subs	r3, #112	; 0x70
 8009d9c:	9303      	str	r3, [sp, #12]
 8009d9e:	e201      	b.n	800a1a4 <BackEndTask+0x420>
 8009da0:	1eab      	subs	r3, r5, #2
 8009da2:	4699      	mov	r9, r3
 8009da4:	4bce      	ldr	r3, [pc, #824]	; (800a0e0 <BackEndTask+0x35c>)
 8009da6:	444b      	add	r3, r9
 8009da8:	469a      	mov	sl, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009daa:	7819      	ldrb	r1, [r3, #0]
 8009dac:	29bf      	cmp	r1, #191	; 0xbf
 8009dae:	dc17      	bgt.n	8009de0 <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8009db0:	4bcc      	ldr	r3, [pc, #816]	; (800a0e4 <BackEndTask+0x360>)
 8009db2:	7e9e      	ldrb	r6, [r3, #26]
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009db4:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 8009db6:	2000      	movs	r0, #0
 8009db8:	e004      	b.n	8009dc4 <BackEndTask+0x40>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009dba:	2bbf      	cmp	r3, #191	; 0xbf
 8009dbc:	d02c      	beq.n	8009e18 <BackEndTask+0x94>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	2bc0      	cmp	r3, #192	; 0xc0
 8009dc2:	d00a      	beq.n	8009dda <BackEndTask+0x56>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009dc4:	2bbe      	cmp	r3, #190	; 0xbe
 8009dc6:	dcf8      	bgt.n	8009dba <BackEndTask+0x36>
 8009dc8:	5ce2      	ldrb	r2, [r4, r3]
 8009dca:	2a48      	cmp	r2, #72	; 0x48
 8009dcc:	d1f5      	bne.n	8009dba <BackEndTask+0x36>
 8009dce:	18e2      	adds	r2, r4, r3
 8009dd0:	7852      	ldrb	r2, [r2, #1]
 8009dd2:	2a5a      	cmp	r2, #90	; 0x5a
 8009dd4:	d1f1      	bne.n	8009dba <BackEndTask+0x36>
						packetStart =i;
 8009dd6:	4ac4      	ldr	r2, [pc, #784]	; (800a0e8 <BackEndTask+0x364>)
 8009dd8:	6013      	str	r3, [r2, #0]
				if(emptyBuffer){
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d000      	beq.n	8009de0 <BackEndTask+0x5c>
 8009dde:	e1c1      	b.n	800a164 <BackEndTask+0x3e0>
				totalnumberofrecevedmesg++;
 8009de0:	4ac2      	ldr	r2, [pc, #776]	; (800a0ec <BackEndTask+0x368>)
 8009de2:	6813      	ldr	r3, [r2, #0]
 8009de4:	3301      	adds	r3, #1
 8009de6:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009de8:	4bbf      	ldr	r3, [pc, #764]	; (800a0e8 <BackEndTask+0x364>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2bbd      	cmp	r3, #189	; 0xbd
 8009dee:	d054      	beq.n	8009e9a <BackEndTask+0x116>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009df0:	2bbe      	cmp	r3, #190	; 0xbe
 8009df2:	d100      	bne.n	8009df6 <BackEndTask+0x72>
 8009df4:	e0bb      	b.n	8009f6e <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009df6:	2bbf      	cmp	r3, #191	; 0xbf
 8009df8:	d100      	bne.n	8009dfc <BackEndTask+0x78>
 8009dfa:	e0bf      	b.n	8009f7c <BackEndTask+0x1f8>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009dfc:	464a      	mov	r2, r9
 8009dfe:	0052      	lsls	r2, r2, #1
 8009e00:	444a      	add	r2, r9
 8009e02:	0191      	lsls	r1, r2, #6
 8009e04:	4aba      	ldr	r2, [pc, #744]	; (800a0f0 <BackEndTask+0x36c>)
 8009e06:	1852      	adds	r2, r2, r1
 8009e08:	18d2      	adds	r2, r2, r3
 8009e0a:	7891      	ldrb	r1, [r2, #2]
 8009e0c:	4ab9      	ldr	r2, [pc, #740]	; (800a0f4 <BackEndTask+0x370>)
 8009e0e:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 8009e10:	3303      	adds	r3, #3
 8009e12:	4ab9      	ldr	r2, [pc, #740]	; (800a0f8 <BackEndTask+0x374>)
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	e048      	b.n	8009eaa <BackEndTask+0x126>
 8009e18:	46a4      	mov	ip, r4
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e1a:	0023      	movs	r3, r4
 8009e1c:	33bf      	adds	r3, #191	; 0xbf
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	2b48      	cmp	r3, #72	; 0x48
 8009e22:	d004      	beq.n	8009e2e <BackEndTask+0xaa>
							if(BOS.disableCLI == false){
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	d000      	beq.n	8009e2a <BackEndTask+0xa6>
 8009e28:	e19c      	b.n	800a164 <BackEndTask+0x3e0>
 8009e2a:	4660      	mov	r0, ip
 8009e2c:	e00c      	b.n	8009e48 <BackEndTask+0xc4>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009e2e:	7823      	ldrb	r3, [r4, #0]
 8009e30:	2b5a      	cmp	r3, #90	; 0x5a
 8009e32:	d1f7      	bne.n	8009e24 <BackEndTask+0xa0>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009e34:	4bac      	ldr	r3, [pc, #688]	; (800a0e8 <BackEndTask+0x364>)
 8009e36:	22bf      	movs	r2, #191	; 0xbf
 8009e38:	601a      	str	r2, [r3, #0]
						break;
 8009e3a:	e7ce      	b.n	8009dda <BackEndTask+0x56>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e3c:	29bf      	cmp	r1, #191	; 0xbf
 8009e3e:	d027      	beq.n	8009e90 <BackEndTask+0x10c>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e40:	3101      	adds	r1, #1
 8009e42:	29c0      	cmp	r1, #192	; 0xc0
 8009e44:	d100      	bne.n	8009e48 <BackEndTask+0xc4>
 8009e46:	e18d      	b.n	800a164 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e48:	5c43      	ldrb	r3, [r0, r1]
 8009e4a:	2b0d      	cmp	r3, #13
 8009e4c:	d1f8      	bne.n	8009e40 <BackEndTask+0xbc>
 8009e4e:	29be      	cmp	r1, #190	; 0xbe
 8009e50:	dcf4      	bgt.n	8009e3c <BackEndTask+0xb8>
 8009e52:	1842      	adds	r2, r0, r1
 8009e54:	7853      	ldrb	r3, [r2, #1]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1f0      	bne.n	8009e3c <BackEndTask+0xb8>
										UARTRxBuf[port - 1][j] =0;
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	005b      	lsls	r3, r3, #1
 8009e5e:	444b      	add	r3, r9
 8009e60:	019b      	lsls	r3, r3, #6
 8009e62:	4aa3      	ldr	r2, [pc, #652]	; (800a0f0 <BackEndTask+0x36c>)
 8009e64:	18d3      	adds	r3, r2, r3
 8009e66:	2200      	movs	r2, #0
 8009e68:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009e6a:	3101      	adds	r1, #1
 8009e6c:	4653      	mov	r3, sl
 8009e6e:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009e70:	4ba2      	ldr	r3, [pc, #648]	; (800a0fc <BackEndTask+0x378>)
 8009e72:	7819      	ldrb	r1, [r3, #0]
 8009e74:	48a2      	ldr	r0, [pc, #648]	; (800a100 <BackEndTask+0x37c>)
 8009e76:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009e78:	3203      	adds	r2, #3
 8009e7a:	4641      	mov	r1, r8
 8009e7c:	700a      	strb	r2, [r1, #0]
										PcPort =port;
 8009e7e:	701f      	strb	r7, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009e80:	4ba0      	ldr	r3, [pc, #640]	; (800a104 <BackEndTask+0x380>)
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	2300      	movs	r3, #0
 8009e86:	3a01      	subs	r2, #1
 8009e88:	2100      	movs	r1, #0
 8009e8a:	f006 fa77 	bl	801037c <xTaskGenericNotify>
										break;
 8009e8e:	e169      	b.n	800a164 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e90:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 8009e92:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1a0      	bne.n	8009dda <BackEndTask+0x56>
 8009e98:	e7df      	b.n	8009e5a <BackEndTask+0xd6>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009e9a:	0023      	movs	r3, r4
 8009e9c:	33bf      	adds	r3, #191	; 0xbf
 8009e9e:	781a      	ldrb	r2, [r3, #0]
 8009ea0:	4b94      	ldr	r3, [pc, #592]	; (800a0f4 <BackEndTask+0x370>)
 8009ea2:	601a      	str	r2, [r3, #0]
					parseStart =0;
 8009ea4:	4b94      	ldr	r3, [pc, #592]	; (800a0f8 <BackEndTask+0x374>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	601a      	str	r2, [r3, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009eaa:	4b92      	ldr	r3, [pc, #584]	; (800a0f4 <BackEndTask+0x370>)
 8009eac:	681e      	ldr	r6, [r3, #0]
 8009eae:	3603      	adds	r6, #3
 8009eb0:	4b8d      	ldr	r3, [pc, #564]	; (800a0e8 <BackEndTask+0x364>)
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	1873      	adds	r3, r6, r1
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009eb6:	2bbf      	cmp	r3, #191	; 0xbf
 8009eb8:	dc00      	bgt.n	8009ebc <BackEndTask+0x138>
 8009eba:	e179      	b.n	800a1b0 <BackEndTask+0x42c>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009ebc:	3bc0      	subs	r3, #192	; 0xc0
 8009ebe:	4a92      	ldr	r2, [pc, #584]	; (800a108 <BackEndTask+0x384>)
 8009ec0:	6013      	str	r3, [r2, #0]
				if(packetStart != packetEnd) // Non-empty packet
 8009ec2:	4b91      	ldr	r3, [pc, #580]	; (800a108 <BackEndTask+0x384>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4299      	cmp	r1, r3
 8009ec8:	d100      	bne.n	8009ecc <BackEndTask+0x148>
 8009eca:	e129      	b.n	800a120 <BackEndTask+0x39c>
					if(packetStart < packetEnd){
 8009ecc:	da5d      	bge.n	8009f8a <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009ece:	006b      	lsls	r3, r5, #1
 8009ed0:	195b      	adds	r3, r3, r5
 8009ed2:	019b      	lsls	r3, r3, #6
 8009ed4:	3b81      	subs	r3, #129	; 0x81
 8009ed6:	3bff      	subs	r3, #255	; 0xff
 8009ed8:	1859      	adds	r1, r3, r1
 8009eda:	4b85      	ldr	r3, [pc, #532]	; (800a0f0 <BackEndTask+0x36c>)
 8009edc:	18c9      	adds	r1, r1, r3
 8009ede:	0032      	movs	r2, r6
 8009ee0:	488a      	ldr	r0, [pc, #552]	; (800a10c <BackEndTask+0x388>)
 8009ee2:	f00a fd2e 	bl	8014942 <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8009ee6:	4b83      	ldr	r3, [pc, #524]	; (800a0f4 <BackEndTask+0x370>)
 8009ee8:	6819      	ldr	r1, [r3, #0]
 8009eea:	3103      	adds	r1, #3
 8009eec:	b289      	uxth	r1, r1
 8009eee:	4e87      	ldr	r6, [pc, #540]	; (800a10c <BackEndTask+0x388>)
 8009ef0:	0030      	movs	r0, r6
 8009ef2:	f003 fe33 	bl	800db5c <CalculateCRC8>
 8009ef6:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009ef8:	2238      	movs	r2, #56	; 0x38
 8009efa:	2100      	movs	r1, #0
 8009efc:	0030      	movs	r0, r6
 8009efe:	f00a fd29 	bl	8014954 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009f02:	4b81      	ldr	r3, [pc, #516]	; (800a108 <BackEndTask+0x384>)
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	464b      	mov	r3, r9
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	444b      	add	r3, r9
 8009f0c:	019b      	lsls	r3, r3, #6
 8009f0e:	4978      	ldr	r1, [pc, #480]	; (800a0f0 <BackEndTask+0x36c>)
 8009f10:	18cb      	adds	r3, r1, r3
 8009f12:	5c9b      	ldrb	r3, [r3, r2]
 8009f14:	9901      	ldr	r1, [sp, #4]
 8009f16:	428b      	cmp	r3, r1
 8009f18:	d04f      	beq.n	8009fba <BackEndTask+0x236>
				}

				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8009f1a:	4b73      	ldr	r3, [pc, #460]	; (800a0e8 <BackEndTask+0x364>)
 8009f1c:	6819      	ldr	r1, [r3, #0]
 8009f1e:	428a      	cmp	r2, r1
 8009f20:	dc00      	bgt.n	8009f24 <BackEndTask+0x1a0>
 8009f22:	e0fd      	b.n	800a120 <BackEndTask+0x39c>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009f24:	4b73      	ldr	r3, [pc, #460]	; (800a0f4 <BackEndTask+0x370>)
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	3204      	adds	r2, #4
 8009f2a:	0068      	lsls	r0, r5, #1
 8009f2c:	1940      	adds	r0, r0, r5
 8009f2e:	0180      	lsls	r0, r0, #6
 8009f30:	3881      	subs	r0, #129	; 0x81
 8009f32:	38ff      	subs	r0, #255	; 0xff
 8009f34:	1841      	adds	r1, r0, r1
 8009f36:	486e      	ldr	r0, [pc, #440]	; (800a0f0 <BackEndTask+0x36c>)
 8009f38:	1808      	adds	r0, r1, r0
 8009f3a:	2100      	movs	r1, #0
 8009f3c:	f00a fd0a 	bl	8014954 <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}

				/* A.6.2 Advance buffer index */
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009f40:	4b71      	ldr	r3, [pc, #452]	; (800a108 <BackEndTask+0x384>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2bbf      	cmp	r3, #191	; 0xbf
 8009f46:	d100      	bne.n	8009f4a <BackEndTask+0x1c6>
 8009f48:	e101      	b.n	800a14e <BackEndTask+0x3ca>
					UARTRxBufIndex[port - 1] =0;
				else{
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	4652      	mov	r2, sl
 8009f4e:	7013      	strb	r3, [r2, #0]
				}
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009f50:	00eb      	lsls	r3, r5, #3
 8009f52:	1b5b      	subs	r3, r3, r5
 8009f54:	00db      	lsls	r3, r3, #3
 8009f56:	3b6f      	subs	r3, #111	; 0x6f
 8009f58:	4a60      	ldr	r2, [pc, #384]	; (800a0dc <BackEndTask+0x358>)
 8009f5a:	5cd0      	ldrb	r0, [r2, r3]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	212d      	movs	r1, #45	; 0x2d
 8009f60:	f7ff fe1c 	bl	8009b9c <SendMessageToModule>
				++rejectedMsg;
 8009f64:	4a6a      	ldr	r2, [pc, #424]	; (800a110 <BackEndTask+0x38c>)
 8009f66:	8813      	ldrh	r3, [r2, #0]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	8013      	strh	r3, [r2, #0]
 8009f6c:	e107      	b.n	800a17e <BackEndTask+0x3fa>
					packetLength =UARTRxBuf[port - 1][0];
 8009f6e:	7822      	ldrb	r2, [r4, #0]
 8009f70:	4b60      	ldr	r3, [pc, #384]	; (800a0f4 <BackEndTask+0x370>)
 8009f72:	601a      	str	r2, [r3, #0]
					parseStart =1;
 8009f74:	4b60      	ldr	r3, [pc, #384]	; (800a0f8 <BackEndTask+0x374>)
 8009f76:	2201      	movs	r2, #1
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	e796      	b.n	8009eaa <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8009f7c:	7862      	ldrb	r2, [r4, #1]
 8009f7e:	4b5d      	ldr	r3, [pc, #372]	; (800a0f4 <BackEndTask+0x370>)
 8009f80:	601a      	str	r2, [r3, #0]
					parseStart =2;
 8009f82:	4b5d      	ldr	r3, [pc, #372]	; (800a0f8 <BackEndTask+0x374>)
 8009f84:	2202      	movs	r2, #2
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	e78f      	b.n	8009eaa <BackEndTask+0x126>
						MSG_RX_BUF_SIZE - packetStart);
 8009f8a:	22c0      	movs	r2, #192	; 0xc0
 8009f8c:	1a52      	subs	r2, r2, r1
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009f8e:	006b      	lsls	r3, r5, #1
 8009f90:	195b      	adds	r3, r3, r5
 8009f92:	019b      	lsls	r3, r3, #6
 8009f94:	3b81      	subs	r3, #129	; 0x81
 8009f96:	3bff      	subs	r3, #255	; 0xff
 8009f98:	1859      	adds	r1, r3, r1
 8009f9a:	4b55      	ldr	r3, [pc, #340]	; (800a0f0 <BackEndTask+0x36c>)
 8009f9c:	18c9      	adds	r1, r1, r3
 8009f9e:	9201      	str	r2, [sp, #4]
 8009fa0:	485a      	ldr	r0, [pc, #360]	; (800a10c <BackEndTask+0x388>)
 8009fa2:	f00a fcce 	bl	8014942 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009fa6:	4959      	ldr	r1, [pc, #356]	; (800a10c <BackEndTask+0x388>)
 8009fa8:	9b01      	ldr	r3, [sp, #4]
 8009faa:	469c      	mov	ip, r3
 8009fac:	4461      	add	r1, ip
 8009fae:	0008      	movs	r0, r1
 8009fb0:	1af2      	subs	r2, r6, r3
 8009fb2:	0021      	movs	r1, r4
 8009fb4:	f00a fcc5 	bl	8014942 <memcpy>
 8009fb8:	e795      	b.n	8009ee6 <BackEndTask+0x162>
						portStatus[port] =MSG;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	7013      	strb	r3, [r2, #0]
						messageLength[port - 1] =packetLength;
 8009fc0:	4b4c      	ldr	r3, [pc, #304]	; (800a0f4 <BackEndTask+0x370>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4698      	mov	r8, r3
 8009fc6:	1eab      	subs	r3, r5, #2
 8009fc8:	4a52      	ldr	r2, [pc, #328]	; (800a114 <BackEndTask+0x390>)
 8009fca:	4641      	mov	r1, r8
 8009fcc:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009fce:	4b4a      	ldr	r3, [pc, #296]	; (800a0f8 <BackEndTask+0x374>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	22bf      	movs	r2, #191	; 0xbf
 8009fd4:	1ad2      	subs	r2, r2, r3
 8009fd6:	4590      	cmp	r8, r2
 8009fd8:	dc41      	bgt.n	800a05e <BackEndTask+0x2da>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009fda:	00e8      	lsls	r0, r5, #3
 8009fdc:	1b40      	subs	r0, r0, r5
 8009fde:	00c0      	lsls	r0, r0, #3
 8009fe0:	9a03      	ldr	r2, [sp, #12]
 8009fe2:	4694      	mov	ip, r2
 8009fe4:	4460      	add	r0, ip
 8009fe6:	0069      	lsls	r1, r5, #1
 8009fe8:	1949      	adds	r1, r1, r5
 8009fea:	0189      	lsls	r1, r1, #6
 8009fec:	3981      	subs	r1, #129	; 0x81
 8009fee:	39ff      	subs	r1, #255	; 0xff
 8009ff0:	18c9      	adds	r1, r1, r3
 8009ff2:	4b3f      	ldr	r3, [pc, #252]	; (800a0f0 <BackEndTask+0x36c>)
 8009ff4:	18c9      	adds	r1, r1, r3
 8009ff6:	4642      	mov	r2, r8
 8009ff8:	f00a fca3 	bl	8014942 <memcpy>
						if(packetStart < packetEnd){
 8009ffc:	4b3a      	ldr	r3, [pc, #232]	; (800a0e8 <BackEndTask+0x364>)
 8009ffe:	6819      	ldr	r1, [r3, #0]
 800a000:	4b41      	ldr	r3, [pc, #260]	; (800a108 <BackEndTask+0x384>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4299      	cmp	r1, r3
 800a006:	da4a      	bge.n	800a09e <BackEndTask+0x31a>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 800a008:	4b3a      	ldr	r3, [pc, #232]	; (800a0f4 <BackEndTask+0x370>)
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	3204      	adds	r2, #4
 800a00e:	0068      	lsls	r0, r5, #1
 800a010:	1940      	adds	r0, r0, r5
 800a012:	0180      	lsls	r0, r0, #6
 800a014:	3881      	subs	r0, #129	; 0x81
 800a016:	38ff      	subs	r0, #255	; 0xff
 800a018:	1840      	adds	r0, r0, r1
 800a01a:	4b35      	ldr	r3, [pc, #212]	; (800a0f0 <BackEndTask+0x36c>)
 800a01c:	18c0      	adds	r0, r0, r3
 800a01e:	2100      	movs	r1, #0
 800a020:	f00a fc98 	bl	8014954 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 800a024:	4b38      	ldr	r3, [pc, #224]	; (800a108 <BackEndTask+0x384>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2bbf      	cmp	r3, #191	; 0xbf
 800a02a:	d04f      	beq.n	800a0cc <BackEndTask+0x348>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 800a02c:	3301      	adds	r3, #1
 800a02e:	4652      	mov	r2, sl
 800a030:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 800a032:	4a39      	ldr	r2, [pc, #228]	; (800a118 <BackEndTask+0x394>)
 800a034:	8813      	ldrh	r3, [r2, #0]
 800a036:	3301      	adds	r3, #1
 800a038:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 800a03a:	00eb      	lsls	r3, r5, #3
 800a03c:	1b5b      	subs	r3, r3, r5
 800a03e:	00db      	lsls	r3, r3, #3
 800a040:	3b70      	subs	r3, #112	; 0x70
 800a042:	4a26      	ldr	r2, [pc, #152]	; (800a0dc <BackEndTask+0x358>)
 800a044:	5cd3      	ldrb	r3, [r2, r3]
 800a046:	4a35      	ldr	r2, [pc, #212]	; (800a11c <BackEndTask+0x398>)
 800a048:	7812      	ldrb	r2, [r2, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d003      	beq.n	800a056 <BackEndTask+0x2d2>
 800a04e:	3302      	adds	r3, #2
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b01      	cmp	r3, #1
 800a054:	d83e      	bhi.n	800a0d4 <BackEndTask+0x350>
							NotifyMessagingTask(port);
 800a056:	0038      	movs	r0, r7
 800a058:	f7ff fad4 	bl	8009604 <NotifyMessagingTask>
 800a05c:	e082      	b.n	800a164 <BackEndTask+0x3e0>
 800a05e:	00ee      	lsls	r6, r5, #3
 800a060:	1b76      	subs	r6, r6, r5
 800a062:	00f6      	lsls	r6, r6, #3
							MSG_RX_BUF_SIZE - parseStart);
 800a064:	22c0      	movs	r2, #192	; 0xc0
 800a066:	1ad2      	subs	r2, r2, r3
 800a068:	4691      	mov	r9, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a06a:	9a02      	ldr	r2, [sp, #8]
 800a06c:	1990      	adds	r0, r2, r6
 800a06e:	0069      	lsls	r1, r5, #1
 800a070:	1949      	adds	r1, r1, r5
 800a072:	0189      	lsls	r1, r1, #6
 800a074:	3981      	subs	r1, #129	; 0x81
 800a076:	39ff      	subs	r1, #255	; 0xff
 800a078:	18c9      	adds	r1, r1, r3
 800a07a:	4b1d      	ldr	r3, [pc, #116]	; (800a0f0 <BackEndTask+0x36c>)
 800a07c:	18c9      	adds	r1, r1, r3
 800a07e:	464a      	mov	r2, r9
 800a080:	f00a fc5f 	bl	8014942 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 800a084:	0030      	movs	r0, r6
 800a086:	3870      	subs	r0, #112	; 0x70
 800a088:	4448      	add	r0, r9
 800a08a:	4b14      	ldr	r3, [pc, #80]	; (800a0dc <BackEndTask+0x358>)
 800a08c:	469c      	mov	ip, r3
 800a08e:	4460      	add	r0, ip
 800a090:	4643      	mov	r3, r8
 800a092:	464a      	mov	r2, r9
 800a094:	1a9a      	subs	r2, r3, r2
 800a096:	0021      	movs	r1, r4
 800a098:	f00a fc53 	bl	8014942 <memcpy>
 800a09c:	e7ae      	b.n	8009ffc <BackEndTask+0x278>
							MSG_RX_BUF_SIZE - packetStart);
 800a09e:	26c0      	movs	r6, #192	; 0xc0
 800a0a0:	1a76      	subs	r6, r6, r1
							memset(&UARTRxBuf[port - 1][packetStart],0,
 800a0a2:	0068      	lsls	r0, r5, #1
 800a0a4:	1940      	adds	r0, r0, r5
 800a0a6:	0180      	lsls	r0, r0, #6
 800a0a8:	3881      	subs	r0, #129	; 0x81
 800a0aa:	38ff      	subs	r0, #255	; 0xff
 800a0ac:	1840      	adds	r0, r0, r1
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <BackEndTask+0x36c>)
 800a0b0:	18c0      	adds	r0, r0, r3
 800a0b2:	0032      	movs	r2, r6
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	f00a fc4d 	bl	8014954 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <BackEndTask+0x370>)
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	3204      	adds	r2, #4
 800a0c0:	1b92      	subs	r2, r2, r6
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	0020      	movs	r0, r4
 800a0c6:	f00a fc45 	bl	8014954 <memset>
 800a0ca:	e7ab      	b.n	800a024 <BackEndTask+0x2a0>
							UARTRxBufIndex[port - 1] =0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4652      	mov	r2, sl
 800a0d0:	7013      	strb	r3, [r2, #0]
 800a0d2:	e7ae      	b.n	800a032 <BackEndTask+0x2ae>
							ForwardReceivedMessage(port);
 800a0d4:	0038      	movs	r0, r7
 800a0d6:	f7ff fcf9 	bl	8009acc <ForwardReceivedMessage>
 800a0da:	e043      	b.n	800a164 <BackEndTask+0x3e0>
 800a0dc:	20000d7c 	.word	0x20000d7c
 800a0e0:	200017c8 	.word	0x200017c8
 800a0e4:	20006e54 	.word	0x20006e54
 800a0e8:	20001ba8 	.word	0x20001ba8
 800a0ec:	20001c04 	.word	0x20001c04
 800a0f0:	20001348 	.word	0x20001348
 800a0f4:	20001ba4 	.word	0x20001ba4
 800a0f8:	20001bac 	.word	0x20001bac
 800a0fc:	20000ae8 	.word	0x20000ae8
 800a100:	2000116c 	.word	0x2000116c
 800a104:	2000195c 	.word	0x2000195c
 800a108:	20001ba0 	.word	0x20001ba0
 800a10c:	200017d0 	.word	0x200017d0
 800a110:	20001c00 	.word	0x20001c00
 800a114:	20000fa4 	.word	0x20000fa4
 800a118:	20001a48 	.word	0x20001a48
 800a11c:	200010ea 	.word	0x200010ea
					MSG_RX_BUF_SIZE - packetStart);
 800a120:	26c0      	movs	r6, #192	; 0xc0
 800a122:	1a76      	subs	r6, r6, r1
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a124:	0068      	lsls	r0, r5, #1
 800a126:	1940      	adds	r0, r0, r5
 800a128:	0180      	lsls	r0, r0, #6
 800a12a:	3881      	subs	r0, #129	; 0x81
 800a12c:	38ff      	subs	r0, #255	; 0xff
 800a12e:	1841      	adds	r1, r0, r1
 800a130:	4821      	ldr	r0, [pc, #132]	; (800a1b8 <BackEndTask+0x434>)
 800a132:	1808      	adds	r0, r1, r0
 800a134:	0032      	movs	r2, r6
 800a136:	2100      	movs	r1, #0
 800a138:	f00a fc0c 	bl	8014954 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a13c:	4b1f      	ldr	r3, [pc, #124]	; (800a1bc <BackEndTask+0x438>)
 800a13e:	681a      	ldr	r2, [r3, #0]
 800a140:	3204      	adds	r2, #4
 800a142:	1b92      	subs	r2, r2, r6
 800a144:	2100      	movs	r1, #0
 800a146:	0020      	movs	r0, r4
 800a148:	f00a fc04 	bl	8014954 <memset>
 800a14c:	e6f8      	b.n	8009f40 <BackEndTask+0x1bc>
					UARTRxBufIndex[port - 1] =0;
 800a14e:	2300      	movs	r3, #0
 800a150:	4652      	mov	r2, sl
 800a152:	7013      	strb	r3, [r2, #0]
 800a154:	e6fc      	b.n	8009f50 <BackEndTask+0x1cc>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 800a156:	0038      	movs	r0, r7
 800a158:	f004 fba2 	bl	800e8a0 <GetUart>
 800a15c:	22c0      	movs	r2, #192	; 0xc0
 800a15e:	0021      	movs	r1, r4
 800a160:	f009 fcc0 	bl	8013ae4 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 800a164:	3701      	adds	r7, #1
 800a166:	b2ff      	uxtb	r7, r7
 800a168:	3501      	adds	r5, #1
 800a16a:	34c0      	adds	r4, #192	; 0xc0
 800a16c:	2f07      	cmp	r7, #7
 800a16e:	d017      	beq.n	800a1a0 <BackEndTask+0x41c>
 800a170:	1e6b      	subs	r3, r5, #1
 800a172:	445b      	add	r3, fp
 800a174:	4698      	mov	r8, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d800      	bhi.n	800a17e <BackEndTask+0x3fa>
 800a17c:	e610      	b.n	8009da0 <BackEndTask+0x1c>
 800a17e:	1eab      	subs	r3, r5, #2
 800a180:	4a0f      	ldr	r2, [pc, #60]	; (800a1c0 <BackEndTask+0x43c>)
 800a182:	4694      	mov	ip, r2
 800a184:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 800a186:	781a      	ldrb	r2, [r3, #0]
 800a188:	2a00      	cmp	r2, #0
 800a18a:	d0eb      	beq.n	800a164 <BackEndTask+0x3e0>
				MsgDMAStopped[port - 1] = false;
 800a18c:	2200      	movs	r2, #0
 800a18e:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 800a190:	4643      	mov	r3, r8
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b05      	cmp	r3, #5
 800a196:	d1de      	bne.n	800a156 <BackEndTask+0x3d2>
					portStatus[port] =FREE;
 800a198:	2300      	movs	r3, #0
 800a19a:	4642      	mov	r2, r8
 800a19c:	7013      	strb	r3, [r2, #0]
 800a19e:	e7da      	b.n	800a156 <BackEndTask+0x3d2>
			}
		}

		taskYIELD();
 800a1a0:	f006 fb7a 	bl	8010898 <vPortYield>
 800a1a4:	4c04      	ldr	r4, [pc, #16]	; (800a1b8 <BackEndTask+0x434>)
void BackEndTask(void *argument){
 800a1a6:	2502      	movs	r5, #2
		for(port =1; port <= NumOfPorts; port++){
 800a1a8:	2701      	movs	r7, #1
 800a1aa:	4b06      	ldr	r3, [pc, #24]	; (800a1c4 <BackEndTask+0x440>)
 800a1ac:	469b      	mov	fp, r3
 800a1ae:	e7df      	b.n	800a170 <BackEndTask+0x3ec>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a1b0:	4a05      	ldr	r2, [pc, #20]	; (800a1c8 <BackEndTask+0x444>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	e685      	b.n	8009ec2 <BackEndTask+0x13e>
 800a1b6:	46c0      	nop			; (mov r8, r8)
 800a1b8:	20001348 	.word	0x20001348
 800a1bc:	20001ba4 	.word	0x20001ba4
 800a1c0:	20001340 	.word	0x20001340
 800a1c4:	2000116c 	.word	0x2000116c
 800a1c8:	20001ba0 	.word	0x20001ba0

0800a1cc <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	4770      	bx	lr

0800a1d0 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1d2:	46de      	mov	lr, fp
 800a1d4:	4657      	mov	r7, sl
 800a1d6:	464e      	mov	r6, r9
 800a1d8:	4645      	mov	r5, r8
 800a1da:	b5e0      	push	{r5, r6, r7, lr}
 800a1dc:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 800a1de:	b2c3      	uxtb	r3, r0
 800a1e0:	9308      	str	r3, [sp, #32]
 800a1e2:	23ff      	movs	r3, #255	; 0xff
 800a1e4:	4003      	ands	r3, r0
 800a1e6:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 800a1e8:	1e5d      	subs	r5, r3, #1
 800a1ea:	00eb      	lsls	r3, r5, #3
 800a1ec:	1b5b      	subs	r3, r3, r5
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a1f2:	4ae2      	ldr	r2, [pc, #904]	; (800a57c <PxMessagingTask+0x3ac>)
 800a1f4:	18d3      	adds	r3, r2, r3
 800a1f6:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 800a1fc:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 800a1fe:	000e      	movs	r6, r1
 800a200:	1853      	adds	r3, r2, r1
 800a202:	3302      	adds	r3, #2
 800a204:	9309      	str	r3, [sp, #36]	; 0x24
 800a206:	468a      	mov	sl, r1
 800a208:	e062      	b.n	800a2d0 <PxMessagingTask+0x100>
				longMessage =1;
 800a20a:	4add      	ldr	r2, [pc, #884]	; (800a580 <PxMessagingTask+0x3b0>)
 800a20c:	2101      	movs	r1, #1
 800a20e:	7011      	strb	r1, [r2, #0]
 800a210:	e06f      	b.n	800a2f2 <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 800a212:	4bda      	ldr	r3, [pc, #872]	; (800a57c <PxMessagingTask+0x3ac>)
 800a214:	199b      	adds	r3, r3, r6
 800a216:	1818      	adds	r0, r3, r0
 800a218:	78c7      	ldrb	r7, [r0, #3]
 800a21a:	e08e      	b.n	800a33a <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 800a21c:	4bd9      	ldr	r3, [pc, #868]	; (800a584 <PxMessagingTask+0x3b4>)
 800a21e:	2200      	movs	r2, #0
 800a220:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a222:	212c      	movs	r1, #44	; 0x2c
 800a224:	9804      	ldr	r0, [sp, #16]
 800a226:	f7ff fcb9 	bl	8009b9c <SendMessageToModule>
 800a22a:	e089      	b.n	800a340 <PxMessagingTask+0x170>
					Delay_ms(100);
 800a22c:	2064      	movs	r0, #100	; 0x64
 800a22e:	f006 fcb1 	bl	8010b94 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a232:	2300      	movs	r3, #0
 800a234:	9a08      	ldr	r2, [sp, #32]
 800a236:	4659      	mov	r1, fp
 800a238:	9804      	ldr	r0, [sp, #16]
 800a23a:	f7f9 fcb9 	bl	8003bb0 <remoteBootloaderUpdate>
 800a23e:	e02e      	b.n	800a29e <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a240:	4bd1      	ldr	r3, [pc, #836]	; (800a588 <PxMessagingTask+0x3b8>)
 800a242:	5d5a      	ldrb	r2, [r3, r5]
 800a244:	4bcd      	ldr	r3, [pc, #820]	; (800a57c <PxMessagingTask+0x3ac>)
 800a246:	199b      	adds	r3, r3, r6
 800a248:	189b      	adds	r3, r3, r2
 800a24a:	3b01      	subs	r3, #1
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	4acf      	ldr	r2, [pc, #828]	; (800a58c <PxMessagingTask+0x3bc>)
 800a250:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800a252:	2103      	movs	r1, #3
 800a254:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a256:	429a      	cmp	r2, r3
 800a258:	d01e      	beq.n	800a298 <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a25a:	4acc      	ldr	r2, [pc, #816]	; (800a58c <PxMessagingTask+0x3bc>)
 800a25c:	7013      	strb	r3, [r2, #0]
 800a25e:	4acc      	ldr	r2, [pc, #816]	; (800a590 <PxMessagingTask+0x3c0>)
 800a260:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a262:	9908      	ldr	r1, [sp, #32]
 800a264:	20ff      	movs	r0, #255	; 0xff
 800a266:	f7ff fc51 	bl	8009b0c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a26a:	4bc7      	ldr	r3, [pc, #796]	; (800a588 <PxMessagingTask+0x3b8>)
 800a26c:	5d5a      	ldrb	r2, [r3, r5]
 800a26e:	4bc3      	ldr	r3, [pc, #780]	; (800a57c <PxMessagingTask+0x3ac>)
 800a270:	199b      	adds	r3, r3, r6
 800a272:	189b      	adds	r3, r3, r2
 800a274:	3b01      	subs	r3, #1
 800a276:	2200      	movs	r2, #0
 800a278:	701a      	strb	r2, [r3, #0]
				shift +=4;
 800a27a:	9c06      	ldr	r4, [sp, #24]
 800a27c:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a27e:	4bc2      	ldr	r3, [pc, #776]	; (800a588 <PxMessagingTask+0x3b8>)
 800a280:	5d59      	ldrb	r1, [r3, r5]
 800a282:	1b0a      	subs	r2, r1, r4
 800a284:	b2d3      	uxtb	r3, r2
 800a286:	9306      	str	r3, [sp, #24]
					switch(code){
 800a288:	2f2d      	cmp	r7, #45	; 0x2d
 800a28a:	d901      	bls.n	800a290 <PxMessagingTask+0xc0>
 800a28c:	f001 fab7 	bl	800b7fe <PxMessagingTask+0x162e>
 800a290:	00bb      	lsls	r3, r7, #2
 800a292:	4ac0      	ldr	r2, [pc, #768]	; (800a594 <PxMessagingTask+0x3c4>)
 800a294:	58d3      	ldr	r3, [r2, r3]
 800a296:	469f      	mov	pc, r3
				if(result == BOS_OK){
 800a298:	464b      	mov	r3, r9
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d0ed      	beq.n	800a27a <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 800a29e:	464b      	mov	r3, r9
 800a2a0:	2b01      	cmp	r3, #1
 800a2a2:	d101      	bne.n	800a2a8 <PxMessagingTask+0xd8>
 800a2a4:	f001 facd 	bl	800b842 <PxMessagingTask+0x1672>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a2a8:	4cb7      	ldr	r4, [pc, #732]	; (800a588 <PxMessagingTask+0x3b8>)
 800a2aa:	5d62      	ldrb	r2, [r4, r5]
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	9807      	ldr	r0, [sp, #28]
 800a2b0:	f00a fb50 	bl	8014954 <memset>
		messageLength[port - 1] =0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a2b8:	4bb7      	ldr	r3, [pc, #732]	; (800a598 <PxMessagingTask+0x3c8>)
 800a2ba:	4642      	mov	r2, r8
 800a2bc:	5c9b      	ldrb	r3, [r3, r2]
 800a2be:	3b02      	subs	r3, #2
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d903      	bls.n	800a2cc <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 800a2c4:	4bb4      	ldr	r3, [pc, #720]	; (800a598 <PxMessagingTask+0x3c8>)
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	4641      	mov	r1, r8
 800a2ca:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a2cc:	f006 fae4 	bl	8010898 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	4249      	negs	r1, r1
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	f006 f805 	bl	80102e4 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a2da:	4bab      	ldr	r3, [pc, #684]	; (800a588 <PxMessagingTask+0x3b8>)
 800a2dc:	5d5b      	ldrb	r3, [r3, r5]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d0dd      	beq.n	800a29e <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 800a2e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	b25a      	sxtb	r2, r3
 800a2e8:	2a00      	cmp	r2, #0
 800a2ea:	db8e      	blt.n	800a20a <PxMessagingTask+0x3a>
				longMessage =0;
 800a2ec:	4aa4      	ldr	r2, [pc, #656]	; (800a580 <PxMessagingTask+0x3b0>)
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800a2f2:	4aa2      	ldr	r2, [pc, #648]	; (800a57c <PxMessagingTask+0x3ac>)
 800a2f4:	5cb1      	ldrb	r1, [r6, r2]
 800a2f6:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 800a2f8:	1992      	adds	r2, r2, r6
 800a2fa:	7852      	ldrb	r2, [r2, #1]
 800a2fc:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800a2fe:	2201      	movs	r2, #1
 800a300:	0010      	movs	r0, r2
 800a302:	4018      	ands	r0, r3
			shift =0;
 800a304:	9006      	str	r0, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a306:	499f      	ldr	r1, [pc, #636]	; (800a584 <PxMessagingTask+0x3b4>)
 800a308:	071c      	lsls	r4, r3, #28
 800a30a:	0fa4      	lsrs	r4, r4, #30
 800a30c:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a30e:	091c      	lsrs	r4, r3, #4
 800a310:	4022      	ands	r2, r4
 800a312:	0014      	movs	r4, r2
 800a314:	1e67      	subs	r7, r4, #1
 800a316:	41bc      	sbcs	r4, r7
 800a318:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a31a:	2460      	movs	r4, #96	; 0x60
 800a31c:	401c      	ands	r4, r3
 800a31e:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 800a320:	079b      	lsls	r3, r3, #30
 800a322:	d400      	bmi.n	800a326 <PxMessagingTask+0x156>
 800a324:	e775      	b.n	800a212 <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a326:	4b95      	ldr	r3, [pc, #596]	; (800a57c <PxMessagingTask+0x3ac>)
 800a328:	199b      	adds	r3, r3, r6
 800a32a:	181b      	adds	r3, r3, r0
 800a32c:	7919      	ldrb	r1, [r3, #4]
 800a32e:	0209      	lsls	r1, r1, #8
 800a330:	78df      	ldrb	r7, [r3, #3]
 800a332:	187f      	adds	r7, r7, r1
 800a334:	b2bf      	uxth	r7, r7
				++shift;
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	9306      	str	r3, [sp, #24]
			if(true == BOSMessaging.received_Acknowledgment){
 800a33a:	2a00      	cmp	r2, #0
 800a33c:	d000      	beq.n	800a340 <PxMessagingTask+0x170>
 800a33e:	e76d      	b.n	800a21c <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a340:	465b      	mov	r3, fp
 800a342:	3b01      	subs	r3, #1
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2bfc      	cmp	r3, #252	; 0xfc
 800a348:	d901      	bls.n	800a34e <PxMessagingTask+0x17e>
 800a34a:	f001 fabb 	bl	800b8c4 <PxMessagingTask+0x16f4>
 800a34e:	4b93      	ldr	r3, [pc, #588]	; (800a59c <PxMessagingTask+0x3cc>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	455b      	cmp	r3, fp
 800a354:	d101      	bne.n	800a35a <PxMessagingTask+0x18a>
 800a356:	f001 fab5 	bl	800b8c4 <PxMessagingTask+0x16f4>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d101      	bne.n	800a362 <PxMessagingTask+0x192>
 800a35e:	f001 faab 	bl	800b8b8 <PxMessagingTask+0x16e8>
				ForwardReceivedMessage(port);
 800a362:	9808      	ldr	r0, [sp, #32]
 800a364:	f7ff fbb2 	bl	8009acc <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a368:	4b86      	ldr	r3, [pc, #536]	; (800a584 <PxMessagingTask+0x3b4>)
 800a36a:	785b      	ldrb	r3, [r3, #1]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d002      	beq.n	800a376 <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 800a370:	4b8b      	ldr	r3, [pc, #556]	; (800a5a0 <PxMessagingTask+0x3d0>)
 800a372:	2203      	movs	r2, #3
 800a374:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a376:	2f19      	cmp	r7, #25
 800a378:	d100      	bne.n	800a37c <PxMessagingTask+0x1ac>
 800a37a:	e757      	b.n	800a22c <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a37c:	2f1a      	cmp	r7, #26
 800a37e:	d18e      	bne.n	800a29e <PxMessagingTask+0xce>
					Delay_ms(100);
 800a380:	2064      	movs	r0, #100	; 0x64
 800a382:	f006 fc07 	bl	8010b94 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a386:	4b7d      	ldr	r3, [pc, #500]	; (800a57c <PxMessagingTask+0x3ac>)
 800a388:	199b      	adds	r3, r3, r6
 800a38a:	9a06      	ldr	r2, [sp, #24]
 800a38c:	5c9b      	ldrb	r3, [r3, r2]
 800a38e:	9a08      	ldr	r2, [sp, #32]
 800a390:	4659      	mov	r1, fp
 800a392:	9804      	ldr	r0, [sp, #16]
 800a394:	f7f9 fc0c 	bl	8003bb0 <remoteBootloaderUpdate>
 800a398:	e781      	b.n	800a29e <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 800a39a:	9b06      	ldr	r3, [sp, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d01f      	beq.n	800a3e0 <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a3a0:	9b04      	ldr	r3, [sp, #16]
 800a3a2:	1e58      	subs	r0, r3, #1
 800a3a4:	0042      	lsls	r2, r0, #1
 800a3a6:	4b7f      	ldr	r3, [pc, #508]	; (800a5a4 <PxMessagingTask+0x3d4>)
 800a3a8:	5ad3      	ldrh	r3, [r2, r3]
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	1911      	adds	r1, r2, r4
 800a3ae:	4a73      	ldr	r2, [pc, #460]	; (800a57c <PxMessagingTask+0x3ac>)
 800a3b0:	1889      	adds	r1, r1, r2
 800a3b2:	3201      	adds	r2, #1
 800a3b4:	4452      	add	r2, sl
 800a3b6:	1914      	adds	r4, r2, r4
 800a3b8:	9a06      	ldr	r2, [sp, #24]
 800a3ba:	3a01      	subs	r2, #1
 800a3bc:	b2d2      	uxtb	r2, r2
 800a3be:	18a4      	adds	r4, r4, r2
 800a3c0:	2780      	movs	r7, #128	; 0x80
 800a3c2:	023f      	lsls	r7, r7, #8
 800a3c4:	4684      	mov	ip, r0
 800a3c6:	780a      	ldrb	r2, [r1, #0]
 800a3c8:	3a01      	subs	r2, #1
 800a3ca:	0038      	movs	r0, r7
 800a3cc:	4110      	asrs	r0, r2
 800a3ce:	4303      	orrs	r3, r0
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 800a3d4:	42a1      	cmp	r1, r4
 800a3d6:	d1f6      	bne.n	800a3c6 <PxMessagingTask+0x1f6>
 800a3d8:	4660      	mov	r0, ip
 800a3da:	0040      	lsls	r0, r0, #1
 800a3dc:	4a71      	ldr	r2, [pc, #452]	; (800a5a4 <PxMessagingTask+0x3d4>)
 800a3de:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 800a3e0:	4b71      	ldr	r3, [pc, #452]	; (800a5a8 <PxMessagingTask+0x3d8>)
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	701a      	strb	r2, [r3, #0]
							break;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4699      	mov	r9, r3
 800a3ea:	e75d      	b.n	800a2a8 <PxMessagingTask+0xd8>
							indMode =IND_PING;
 800a3ec:	4b6c      	ldr	r3, [pc, #432]	; (800a5a0 <PxMessagingTask+0x3d0>)
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a3f2:	200a      	movs	r0, #10
 800a3f4:	f004 fba3 	bl	800eb3e <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a3f8:	4b62      	ldr	r3, [pc, #392]	; (800a584 <PxMessagingTask+0x3b4>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2240      	movs	r2, #64	; 0x40
 800a3fe:	4393      	bics	r3, r2
 800a400:	2200      	movs	r2, #0
 800a402:	4691      	mov	r9, r2
 800a404:	2b20      	cmp	r3, #32
 800a406:	d000      	beq.n	800a40a <PxMessagingTask+0x23a>
 800a408:	e74e      	b.n	800a2a8 <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a40a:	2102      	movs	r1, #2
 800a40c:	9804      	ldr	r0, [sp, #16]
 800a40e:	f7ff fbc5 	bl	8009b9c <SendMessageToModule>
 800a412:	e749      	b.n	800a2a8 <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 800a414:	4b61      	ldr	r3, [pc, #388]	; (800a59c <PxMessagingTask+0x3cc>)
 800a416:	781a      	ldrb	r2, [r3, #0]
 800a418:	0093      	lsls	r3, r2, #2
 800a41a:	189b      	adds	r3, r3, r2
 800a41c:	005b      	lsls	r3, r3, #1
 800a41e:	4a63      	ldr	r2, [pc, #396]	; (800a5ac <PxMessagingTask+0x3dc>)
 800a420:	5c9b      	ldrb	r3, [r3, r2]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d118      	bne.n	800a458 <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a426:	9a04      	ldr	r2, [sp, #16]
 800a428:	4961      	ldr	r1, [pc, #388]	; (800a5b0 <PxMessagingTask+0x3e0>)
 800a42a:	4862      	ldr	r0, [pc, #392]	; (800a5b4 <PxMessagingTask+0x3e4>)
 800a42c:	f00a fcbe 	bl	8014dac <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a430:	4c60      	ldr	r4, [pc, #384]	; (800a5b4 <PxMessagingTask+0x3e4>)
 800a432:	0020      	movs	r0, r4
 800a434:	f7f5 fe70 	bl	8000118 <strlen>
 800a438:	b282      	uxth	r2, r0
 800a43a:	4b5f      	ldr	r3, [pc, #380]	; (800a5b8 <PxMessagingTask+0x3e8>)
 800a43c:	7818      	ldrb	r0, [r3, #0]
 800a43e:	2301      	movs	r3, #1
 800a440:	425b      	negs	r3, r3
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	3333      	adds	r3, #51	; 0x33
 800a446:	0021      	movs	r1, r4
 800a448:	f004 fa4c 	bl	800e8e4 <writePxMutex>
							responseStatus =BOS_OK;
 800a44c:	4b56      	ldr	r3, [pc, #344]	; (800a5a8 <PxMessagingTask+0x3d8>)
 800a44e:	2200      	movs	r2, #0
 800a450:	701a      	strb	r2, [r3, #0]
							break;
 800a452:	2300      	movs	r3, #0
 800a454:	4699      	mov	r9, r3
 800a456:	e727      	b.n	800a2a8 <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a458:	230a      	movs	r3, #10
 800a45a:	9904      	ldr	r1, [sp, #16]
 800a45c:	434b      	muls	r3, r1
 800a45e:	4a53      	ldr	r2, [pc, #332]	; (800a5ac <PxMessagingTask+0x3dc>)
 800a460:	189b      	adds	r3, r3, r2
 800a462:	000a      	movs	r2, r1
 800a464:	4955      	ldr	r1, [pc, #340]	; (800a5bc <PxMessagingTask+0x3ec>)
 800a466:	4853      	ldr	r0, [pc, #332]	; (800a5b4 <PxMessagingTask+0x3e4>)
 800a468:	f00a fca0 	bl	8014dac <sprintf>
 800a46c:	e7e0      	b.n	800a430 <PxMessagingTask+0x260>
							IND_ON();
 800a46e:	2090      	movs	r0, #144	; 0x90
 800a470:	2201      	movs	r2, #1
 800a472:	2180      	movs	r1, #128	; 0x80
 800a474:	05c0      	lsls	r0, r0, #23
 800a476:	f007 ffa9 	bl	80123cc <HAL_GPIO_WritePin>
							break;
 800a47a:	2300      	movs	r3, #0
 800a47c:	4699      	mov	r9, r3
 800a47e:	e713      	b.n	800a2a8 <PxMessagingTask+0xd8>
							IND_OFF();
 800a480:	2090      	movs	r0, #144	; 0x90
 800a482:	2200      	movs	r2, #0
 800a484:	2180      	movs	r1, #128	; 0x80
 800a486:	05c0      	lsls	r0, r0, #23
 800a488:	f007 ffa0 	bl	80123cc <HAL_GPIO_WritePin>
							break;
 800a48c:	2300      	movs	r3, #0
 800a48e:	4699      	mov	r9, r3
 800a490:	e70a      	b.n	800a2a8 <PxMessagingTask+0xd8>
							IND_toggle();
 800a492:	2090      	movs	r0, #144	; 0x90
 800a494:	2180      	movs	r1, #128	; 0x80
 800a496:	05c0      	lsls	r0, r0, #23
 800a498:	f007 ff9e 	bl	80123d8 <HAL_GPIO_TogglePin>
							break;
 800a49c:	2300      	movs	r3, #0
 800a49e:	4699      	mov	r9, r3
 800a4a0:	e702      	b.n	800a2a8 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a4a2:	4f47      	ldr	r7, [pc, #284]	; (800a5c0 <PxMessagingTask+0x3f0>)
 800a4a4:	00ab      	lsls	r3, r5, #2
 800a4a6:	4a35      	ldr	r2, [pc, #212]	; (800a57c <PxMessagingTask+0x3ac>)
 800a4a8:	1992      	adds	r2, r2, r6
 800a4aa:	1910      	adds	r0, r2, r4
 800a4ac:	7881      	ldrb	r1, [r0, #2]
 800a4ae:	468c      	mov	ip, r1
 800a4b0:	9904      	ldr	r1, [sp, #16]
 800a4b2:	0209      	lsls	r1, r1, #8
 800a4b4:	4461      	add	r1, ip
 800a4b6:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a4b8:	18fb      	adds	r3, r7, r3
 800a4ba:	5d11      	ldrb	r1, [r2, r4]
 800a4bc:	0209      	lsls	r1, r1, #8
 800a4be:	7842      	ldrb	r2, [r0, #1]
 800a4c0:	1852      	adds	r2, r2, r1
 800a4c2:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a4c4:	4b3f      	ldr	r3, [pc, #252]	; (800a5c4 <PxMessagingTask+0x3f4>)
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	4a3f      	ldr	r2, [pc, #252]	; (800a5c8 <PxMessagingTask+0x3f8>)
 800a4ca:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a4cc:	0a1b      	lsrs	r3, r3, #8
 800a4ce:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a4d0:	9c08      	ldr	r4, [sp, #32]
 800a4d2:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a4d4:	2002      	movs	r0, #2
 800a4d6:	f004 fb32 	bl	800eb3e <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a4da:	2303      	movs	r3, #3
 800a4dc:	9300      	str	r3, [sp, #0]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	0020      	movs	r0, r4
 800a4e6:	f7ff f8d3 	bl	8009690 <SendMessageFromPort>
							break;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	4699      	mov	r9, r3
 800a4ee:	e6db      	b.n	800a2a8 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a4f0:	4f33      	ldr	r7, [pc, #204]	; (800a5c0 <PxMessagingTask+0x3f0>)
 800a4f2:	00ab      	lsls	r3, r5, #2
 800a4f4:	4a21      	ldr	r2, [pc, #132]	; (800a57c <PxMessagingTask+0x3ac>)
 800a4f6:	1992      	adds	r2, r2, r6
 800a4f8:	1910      	adds	r0, r2, r4
 800a4fa:	7881      	ldrb	r1, [r0, #2]
 800a4fc:	468c      	mov	ip, r1
 800a4fe:	9904      	ldr	r1, [sp, #16]
 800a500:	0209      	lsls	r1, r1, #8
 800a502:	4461      	add	r1, ip
 800a504:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a506:	18fb      	adds	r3, r7, r3
 800a508:	5d11      	ldrb	r1, [r2, r4]
 800a50a:	0209      	lsls	r1, r1, #8
 800a50c:	7842      	ldrb	r2, [r0, #1]
 800a50e:	1852      	adds	r2, r2, r1
 800a510:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a512:	4b25      	ldr	r3, [pc, #148]	; (800a5a8 <PxMessagingTask+0x3d8>)
 800a514:	2200      	movs	r2, #0
 800a516:	701a      	strb	r2, [r3, #0]
							break;
 800a518:	2300      	movs	r3, #0
 800a51a:	4699      	mov	r9, r3
 800a51c:	e6c4      	b.n	800a2a8 <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 800a51e:	9808      	ldr	r0, [sp, #32]
 800a520:	f7f9 f97e 	bl	8003820 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a524:	4b1e      	ldr	r3, [pc, #120]	; (800a5a0 <PxMessagingTask+0x3d0>)
 800a526:	2202      	movs	r2, #2
 800a528:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a52a:	200a      	movs	r0, #10
 800a52c:	f004 fb07 	bl	800eb3e <osDelay>
 800a530:	4f23      	ldr	r7, [pc, #140]	; (800a5c0 <PxMessagingTask+0x3f0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a532:	2401      	movs	r4, #1
							temp =0;
 800a534:	2300      	movs	r3, #0
 800a536:	9305      	str	r3, [sp, #20]
 800a538:	e004      	b.n	800a544 <PxMessagingTask+0x374>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a53a:	3401      	adds	r4, #1
 800a53c:	b2e4      	uxtb	r4, r4
 800a53e:	3704      	adds	r7, #4
 800a540:	2c07      	cmp	r4, #7
 800a542:	d011      	beq.n	800a568 <PxMessagingTask+0x398>
								if(neighbors[p - 1][0]){
 800a544:	883b      	ldrh	r3, [r7, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0f7      	beq.n	800a53a <PxMessagingTask+0x36a>
									messageParams[temp] =p;
 800a54a:	4a1f      	ldr	r2, [pc, #124]	; (800a5c8 <PxMessagingTask+0x3f8>)
 800a54c:	9b05      	ldr	r3, [sp, #20]
 800a54e:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a550:	1c58      	adds	r0, r3, #1
 800a552:	4694      	mov	ip, r2
 800a554:	4460      	add	r0, ip
 800a556:	2204      	movs	r2, #4
 800a558:	0039      	movs	r1, r7
 800a55a:	f00a f9f2 	bl	8014942 <memcpy>
									temp +=5;
 800a55e:	9b05      	ldr	r3, [sp, #20]
 800a560:	3305      	adds	r3, #5
 800a562:	b2db      	uxtb	r3, r3
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	e7e8      	b.n	800a53a <PxMessagingTask+0x36a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a568:	466b      	mov	r3, sp
 800a56a:	8a9a      	ldrh	r2, [r3, #20]
 800a56c:	210d      	movs	r1, #13
 800a56e:	9804      	ldr	r0, [sp, #16]
 800a570:	f7ff fb14 	bl	8009b9c <SendMessageToModule>
							break;
 800a574:	2300      	movs	r3, #0
 800a576:	4699      	mov	r9, r3
 800a578:	e696      	b.n	800a2a8 <PxMessagingTask+0xd8>
 800a57a:	46c0      	nop			; (mov r8, r8)
 800a57c:	20000d7c 	.word	0x20000d7c
 800a580:	20000f69 	.word	0x20000f69
 800a584:	20006dd4 	.word	0x20006dd4
 800a588:	20000fa4 	.word	0x20000fa4
 800a58c:	20001a4a 	.word	0x20001a4a
 800a590:	20000d28 	.word	0x20000d28
 800a594:	0801bc34 	.word	0x0801bc34
 800a598:	2000116c 	.word	0x2000116c
 800a59c:	200010ea 	.word	0x200010ea
 800a5a0:	20000f68 	.word	0x20000f68
 800a5a4:	2000735c 	.word	0x2000735c
 800a5a8:	20001188 	.word	0x20001188
 800a5ac:	20000fdc 	.word	0x20000fdc
 800a5b0:	0801a4f0 	.word	0x0801a4f0
 800a5b4:	20001bb0 	.word	0x20001bb0
 800a5b8:	20000ae8 	.word	0x20000ae8
 800a5bc:	0801a504 	.word	0x0801a504
 800a5c0:	200010ec 	.word	0x200010ec
 800a5c4:	20000078 	.word	0x20000078
 800a5c8:	20000fac 	.word	0x20000fac
							temp =numOfParams / 5;
 800a5cc:	2105      	movs	r1, #5
 800a5ce:	9806      	ldr	r0, [sp, #24]
 800a5d0:	f7f5 fdbe 	bl	8000150 <__udivsi3>
 800a5d4:	b2c2      	uxtb	r2, r0
 800a5d6:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a5d8:	2a00      	cmp	r2, #0
 800a5da:	d018      	beq.n	800a60e <PxMessagingTask+0x43e>
 800a5dc:	4653      	mov	r3, sl
 800a5de:	191f      	adds	r7, r3, r4
 800a5e0:	4bdb      	ldr	r3, [pc, #876]	; (800a950 <PxMessagingTask+0x780>)
 800a5e2:	18ff      	adds	r7, r7, r3
 800a5e4:	3305      	adds	r3, #5
 800a5e6:	4453      	add	r3, sl
 800a5e8:	191c      	adds	r4, r3, r4
 800a5ea:	1e53      	subs	r3, r2, #1
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	009a      	lsls	r2, r3, #2
 800a5f0:	18d3      	adds	r3, r2, r3
 800a5f2:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a5f4:	4bd7      	ldr	r3, [pc, #860]	; (800a954 <PxMessagingTask+0x784>)
 800a5f6:	4699      	mov	r9, r3
 800a5f8:	7838      	ldrb	r0, [r7, #0]
 800a5fa:	3801      	subs	r0, #1
 800a5fc:	0080      	lsls	r0, r0, #2
 800a5fe:	4448      	add	r0, r9
 800a600:	1c79      	adds	r1, r7, #1
 800a602:	2204      	movs	r2, #4
 800a604:	f00a f99d 	bl	8014942 <memcpy>
 800a608:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a60a:	42bc      	cmp	r4, r7
 800a60c:	d1f4      	bne.n	800a5f8 <PxMessagingTask+0x428>
							responseStatus =BOS_OK;
 800a60e:	4bd2      	ldr	r3, [pc, #840]	; (800a958 <PxMessagingTask+0x788>)
 800a610:	2200      	movs	r2, #0
 800a612:	701a      	strb	r2, [r3, #0]
							break;
 800a614:	2300      	movs	r3, #0
 800a616:	4699      	mov	r9, r3
 800a618:	e646      	b.n	800a2a8 <PxMessagingTask+0xd8>
 800a61a:	4653      	mov	r3, sl
 800a61c:	18e3      	adds	r3, r4, r3
 800a61e:	4acc      	ldr	r2, [pc, #816]	; (800a950 <PxMessagingTask+0x780>)
 800a620:	4699      	mov	r9, r3
 800a622:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a624:	2701      	movs	r7, #1
								if(p != port)
 800a626:	9b08      	ldr	r3, [sp, #32]
 800a628:	42bb      	cmp	r3, r7
 800a62a:	d006      	beq.n	800a63a <PxMessagingTask+0x46a>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a62c:	0038      	movs	r0, r7
 800a62e:	f004 f937 	bl	800e8a0 <GetUart>
 800a632:	464b      	mov	r3, r9
 800a634:	7819      	ldrb	r1, [r3, #0]
 800a636:	f004 f9cd 	bl	800e9d4 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a63a:	3701      	adds	r7, #1
 800a63c:	b2ff      	uxtb	r7, r7
 800a63e:	2301      	movs	r3, #1
 800a640:	469c      	mov	ip, r3
 800a642:	44e1      	add	r9, ip
 800a644:	2f07      	cmp	r7, #7
 800a646:	d1ee      	bne.n	800a626 <PxMessagingTask+0x456>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a648:	9808      	ldr	r0, [sp, #32]
 800a64a:	f004 f929 	bl	800e8a0 <GetUart>
 800a64e:	4bc0      	ldr	r3, [pc, #768]	; (800a950 <PxMessagingTask+0x780>)
 800a650:	199b      	adds	r3, r3, r6
 800a652:	191c      	adds	r4, r3, r4
 800a654:	7aa1      	ldrb	r1, [r4, #10]
 800a656:	f004 f9bd 	bl	800e9d4 <SwapUartPins>
							break;
 800a65a:	2300      	movs	r3, #0
 800a65c:	4699      	mov	r9, r3
 800a65e:	e623      	b.n	800a2a8 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a660:	0020      	movs	r0, r4
 800a662:	4bbb      	ldr	r3, [pc, #748]	; (800a950 <PxMessagingTask+0x780>)
 800a664:	199b      	adds	r3, r3, r6
 800a666:	5d1b      	ldrb	r3, [r3, r4]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10a      	bne.n	800a682 <PxMessagingTask+0x4b2>
								myID =cMessage[port - 1][1 + shift];
 800a66c:	2238      	movs	r2, #56	; 0x38
 800a66e:	436a      	muls	r2, r5
 800a670:	4bb7      	ldr	r3, [pc, #732]	; (800a950 <PxMessagingTask+0x780>)
 800a672:	189b      	adds	r3, r3, r2
 800a674:	191c      	adds	r4, r3, r4
 800a676:	7862      	ldrb	r2, [r4, #1]
 800a678:	4bb8      	ldr	r3, [pc, #736]	; (800a95c <PxMessagingTask+0x78c>)
 800a67a:	701a      	strb	r2, [r3, #0]
 800a67c:	2300      	movs	r3, #0
 800a67e:	4699      	mov	r9, r3
 800a680:	e612      	b.n	800a2a8 <PxMessagingTask+0xd8>
 800a682:	2200      	movs	r2, #0
 800a684:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a686:	2b01      	cmp	r3, #1
 800a688:	d000      	beq.n	800a68c <PxMessagingTask+0x4bc>
 800a68a:	e60d      	b.n	800a2a8 <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 800a68c:	49b4      	ldr	r1, [pc, #720]	; (800a960 <PxMessagingTask+0x790>)
 800a68e:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a690:	3238      	adds	r2, #56	; 0x38
 800a692:	436a      	muls	r2, r5
 800a694:	4bae      	ldr	r3, [pc, #696]	; (800a950 <PxMessagingTask+0x780>)
 800a696:	189b      	adds	r3, r3, r2
 800a698:	181b      	adds	r3, r3, r0
 800a69a:	785a      	ldrb	r2, [r3, #1]
 800a69c:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a69e:	7898      	ldrb	r0, [r3, #2]
 800a6a0:	2303      	movs	r3, #3
 800a6a2:	9300      	str	r3, [sp, #0]
 800a6a4:	330d      	adds	r3, #13
 800a6a6:	464a      	mov	r2, r9
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7fe fff1 	bl	8009690 <SendMessageFromPort>
 800a6ae:	e5fb      	b.n	800a2a8 <PxMessagingTask+0xd8>
							if(longMessage){
 800a6b0:	4bac      	ldr	r3, [pc, #688]	; (800a964 <PxMessagingTask+0x794>)
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d012      	beq.n	800a6de <PxMessagingTask+0x50e>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6b8:	4bab      	ldr	r3, [pc, #684]	; (800a968 <PxMessagingTask+0x798>)
 800a6ba:	4699      	mov	r9, r3
 800a6bc:	881f      	ldrh	r7, [r3, #0]
 800a6be:	48ab      	ldr	r0, [pc, #684]	; (800a96c <PxMessagingTask+0x79c>)
 800a6c0:	1838      	adds	r0, r7, r0
 800a6c2:	4454      	add	r4, sl
 800a6c4:	49a2      	ldr	r1, [pc, #648]	; (800a950 <PxMessagingTask+0x780>)
 800a6c6:	1861      	adds	r1, r4, r1
 800a6c8:	9c06      	ldr	r4, [sp, #24]
 800a6ca:	0022      	movs	r2, r4
 800a6cc:	f00a f939 	bl	8014942 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6d0:	46a4      	mov	ip, r4
 800a6d2:	4467      	add	r7, ip
 800a6d4:	464b      	mov	r3, r9
 800a6d6:	801f      	strh	r7, [r3, #0]
 800a6d8:	2300      	movs	r3, #0
 800a6da:	4699      	mov	r9, r3
 800a6dc:	e5e4      	b.n	800a2a8 <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6de:	4ba2      	ldr	r3, [pc, #648]	; (800a968 <PxMessagingTask+0x798>)
 800a6e0:	469b      	mov	fp, r3
 800a6e2:	881f      	ldrh	r7, [r3, #0]
 800a6e4:	4ba1      	ldr	r3, [pc, #644]	; (800a96c <PxMessagingTask+0x79c>)
 800a6e6:	4699      	mov	r9, r3
 800a6e8:	18f8      	adds	r0, r7, r3
 800a6ea:	4454      	add	r4, sl
 800a6ec:	4998      	ldr	r1, [pc, #608]	; (800a950 <PxMessagingTask+0x780>)
 800a6ee:	1861      	adds	r1, r4, r1
 800a6f0:	9c06      	ldr	r4, [sp, #24]
 800a6f2:	0022      	movs	r2, r4
 800a6f4:	f00a f925 	bl	8014942 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6f8:	193c      	adds	r4, r7, r4
 800a6fa:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a6fc:	2116      	movs	r1, #22
 800a6fe:	0020      	movs	r0, r4
 800a700:	f7f5 fd26 	bl	8000150 <__udivsi3>
 800a704:	4b9a      	ldr	r3, [pc, #616]	; (800a970 <PxMessagingTask+0x7a0>)
 800a706:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a708:	0022      	movs	r2, r4
 800a70a:	4649      	mov	r1, r9
 800a70c:	4899      	ldr	r0, [pc, #612]	; (800a974 <PxMessagingTask+0x7a4>)
 800a70e:	f00a f918 	bl	8014942 <memcpy>
								longMessageLastPtr =0;
 800a712:	2400      	movs	r4, #0
 800a714:	465b      	mov	r3, fp
 800a716:	801c      	strh	r4, [r3, #0]
 800a718:	46a1      	mov	r9, r4
 800a71a:	e5c5      	b.n	800a2a8 <PxMessagingTask+0xd8>
							for(p =1; p <= NumOfPorts; p++){
 800a71c:	2401      	movs	r4, #1
							temp =0;
 800a71e:	2300      	movs	r3, #0
 800a720:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a722:	2780      	movs	r7, #128	; 0x80
 800a724:	023f      	lsls	r7, r7, #8
 800a726:	e003      	b.n	800a730 <PxMessagingTask+0x560>
							for(p =1; p <= NumOfPorts; p++){
 800a728:	3401      	adds	r4, #1
 800a72a:	b2e4      	uxtb	r4, r4
 800a72c:	2c07      	cmp	r4, #7
 800a72e:	d00c      	beq.n	800a74a <PxMessagingTask+0x57a>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a730:	0020      	movs	r0, r4
 800a732:	f004 f8b5 	bl	800e8a0 <GetUart>
 800a736:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a738:	42bb      	cmp	r3, r7
 800a73a:	d1f5      	bne.n	800a728 <PxMessagingTask+0x558>
									messageParams[temp++] =p;
 800a73c:	9a05      	ldr	r2, [sp, #20]
 800a73e:	1c53      	adds	r3, r2, #1
 800a740:	4987      	ldr	r1, [pc, #540]	; (800a960 <PxMessagingTask+0x790>)
 800a742:	548c      	strb	r4, [r1, r2]
 800a744:	b2db      	uxtb	r3, r3
 800a746:	9305      	str	r3, [sp, #20]
 800a748:	e7ee      	b.n	800a728 <PxMessagingTask+0x558>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a74a:	466b      	mov	r3, sp
 800a74c:	8a9a      	ldrh	r2, [r3, #20]
 800a74e:	2114      	movs	r1, #20
 800a750:	9804      	ldr	r0, [sp, #16]
 800a752:	f7ff fa23 	bl	8009b9c <SendMessageToModule>
							break;
 800a756:	2300      	movs	r3, #0
 800a758:	4699      	mov	r9, r3
 800a75a:	e5a5      	b.n	800a2a8 <PxMessagingTask+0xd8>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a75c:	4b7c      	ldr	r3, [pc, #496]	; (800a950 <PxMessagingTask+0x780>)
 800a75e:	199b      	adds	r3, r3, r6
 800a760:	5d1a      	ldrb	r2, [r3, r4]
 800a762:	0612      	lsls	r2, r2, #24
 800a764:	191b      	adds	r3, r3, r4
 800a766:	78d9      	ldrb	r1, [r3, #3]
 800a768:	1852      	adds	r2, r2, r1
 800a76a:	7859      	ldrb	r1, [r3, #1]
 800a76c:	0409      	lsls	r1, r1, #16
 800a76e:	1852      	adds	r2, r2, r1
 800a770:	7899      	ldrb	r1, [r3, #2]
 800a772:	0209      	lsls	r1, r1, #8
 800a774:	1852      	adds	r2, r2, r1
 800a776:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a778:	791b      	ldrb	r3, [r3, #4]
 800a77a:	2bff      	cmp	r3, #255	; 0xff
 800a77c:	d01c      	beq.n	800a7b8 <PxMessagingTask+0x5e8>
								for(p =0; p < numOfParams; p++){
 800a77e:	9b06      	ldr	r3, [sp, #24]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d016      	beq.n	800a7b2 <PxMessagingTask+0x5e2>
 800a784:	4653      	mov	r3, sl
 800a786:	1d1f      	adds	r7, r3, #4
 800a788:	193f      	adds	r7, r7, r4
 800a78a:	4b71      	ldr	r3, [pc, #452]	; (800a950 <PxMessagingTask+0x780>)
 800a78c:	18ff      	adds	r7, r7, r3
 800a78e:	3305      	adds	r3, #5
 800a790:	4453      	add	r3, sl
 800a792:	191c      	adds	r4, r3, r4
 800a794:	9b06      	ldr	r3, [sp, #24]
 800a796:	3b01      	subs	r3, #1
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a79c:	783b      	ldrb	r3, [r7, #0]
 800a79e:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	2b05      	cmp	r3, #5
 800a7a4:	d915      	bls.n	800a7d2 <PxMessagingTask+0x602>
 800a7a6:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a7a8:	42a7      	cmp	r7, r4
 800a7aa:	d1f7      	bne.n	800a79c <PxMessagingTask+0x5cc>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4699      	mov	r9, r3
 800a7b0:	e57a      	b.n	800a2a8 <PxMessagingTask+0xd8>
							temp =temp32 =0;
 800a7b2:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a7b4:	4699      	mov	r9, r3
 800a7b6:	e577      	b.n	800a2a8 <PxMessagingTask+0xd8>
								for(p =1; p <= NumOfPorts; p++){
 800a7b8:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a7ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7bc:	0020      	movs	r0, r4
 800a7be:	f004 f8ff 	bl	800e9c0 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a7c2:	3401      	adds	r4, #1
 800a7c4:	b2e4      	uxtb	r4, r4
 800a7c6:	2c07      	cmp	r4, #7
 800a7c8:	d1f7      	bne.n	800a7ba <PxMessagingTask+0x5ea>
							temp =temp32 =0;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	4699      	mov	r9, r3
 800a7d0:	e56a      	b.n	800a2a8 <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 800a7d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a7d4:	9805      	ldr	r0, [sp, #20]
 800a7d6:	f004 f8f3 	bl	800e9c0 <UpdateBaudrate>
 800a7da:	e7e4      	b.n	800a7a6 <PxMessagingTask+0x5d6>
							SaveToRO();
 800a7dc:	f002 f800 	bl	800c7e0 <SaveToRO>
							SaveEEportsDir();
 800a7e0:	f7f8 fe26 	bl	8003430 <SaveEEportsDir>
							indMode =IND_PING;
 800a7e4:	4b64      	ldr	r3, [pc, #400]	; (800a978 <PxMessagingTask+0x7a8>)
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	701a      	strb	r2, [r3, #0]
							break;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4699      	mov	r9, r3
 800a7ee:	e55b      	b.n	800a2a8 <PxMessagingTask+0xd8>
							ClearEEportsDir();
 800a7f0:	f7f8 ff14 	bl	800361c <ClearEEportsDir>
							ClearROtopology();
 800a7f4:	f002 f8fc 	bl	800c9f0 <ClearROtopology>
							osDelay(100);
 800a7f8:	2064      	movs	r0, #100	; 0x64
 800a7fa:	f004 f9a0 	bl	800eb3e <osDelay>
							indMode =IND_TOPOLOGY;
 800a7fe:	4b5e      	ldr	r3, [pc, #376]	; (800a978 <PxMessagingTask+0x7a8>)
 800a800:	2202      	movs	r2, #2
 800a802:	701a      	strb	r2, [r3, #0]
							break;
 800a804:	2300      	movs	r3, #0
 800a806:	4699      	mov	r9, r3
 800a808:	e54e      	b.n	800a2a8 <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a80a:	f004 faad 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 800a80e:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a810:	465b      	mov	r3, fp
 800a812:	2bff      	cmp	r3, #255	; 0xff
 800a814:	d028      	beq.n	800a868 <PxMessagingTask+0x698>
							else if(dst == BOS_MULTICAST)
 800a816:	2bfe      	cmp	r3, #254	; 0xfe
 800a818:	d02f      	beq.n	800a87a <PxMessagingTask+0x6aa>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a81a:	4454      	add	r4, sl
 800a81c:	494c      	ldr	r1, [pc, #304]	; (800a950 <PxMessagingTask+0x780>)
 800a81e:	1861      	adds	r1, r4, r1
 800a820:	9a06      	ldr	r2, [sp, #24]
 800a822:	4856      	ldr	r0, [pc, #344]	; (800a97c <PxMessagingTask+0x7ac>)
 800a824:	f00a f88d 	bl	8014942 <memcpy>
								temp =PcPort;
 800a828:	4c55      	ldr	r4, [pc, #340]	; (800a980 <PxMessagingTask+0x7b0>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a82a:	4b54      	ldr	r3, [pc, #336]	; (800a97c <PxMessagingTask+0x7ac>)
 800a82c:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a82e:	4b55      	ldr	r3, [pc, #340]	; (800a984 <PxMessagingTask+0x7b4>)
 800a830:	4699      	mov	r9, r3
								temp =PcPort;
 800a832:	7823      	ldrb	r3, [r4, #0]
 800a834:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a836:	9a08      	ldr	r2, [sp, #32]
 800a838:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a83a:	2299      	movs	r2, #153	; 0x99
 800a83c:	0092      	lsls	r2, r2, #2
 800a83e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a840:	4658      	mov	r0, fp
 800a842:	f004 fa13 	bl	800ec6c <FreeRTOS_CLIProcessCommand>
 800a846:	0007      	movs	r7, r0
								PcPort =temp;
 800a848:	9b05      	ldr	r3, [sp, #20]
 800a84a:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a84c:	464b      	mov	r3, r9
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	2b60      	cmp	r3, #96	; 0x60
 800a852:	d01d      	beq.n	800a890 <PxMessagingTask+0x6c0>
							} while(xReturned != pdFALSE);
 800a854:	2f00      	cmp	r7, #0
 800a856:	d1ec      	bne.n	800a832 <PxMessagingTask+0x662>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a858:	2232      	movs	r2, #50	; 0x32
 800a85a:	2100      	movs	r1, #0
 800a85c:	4847      	ldr	r0, [pc, #284]	; (800a97c <PxMessagingTask+0x7ac>)
 800a85e:	f00a f879 	bl	8014954 <memset>
							break;
 800a862:	2300      	movs	r3, #0
 800a864:	4699      	mov	r9, r3
 800a866:	e51f      	b.n	800a2a8 <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a868:	9a06      	ldr	r2, [sp, #24]
 800a86a:	3a01      	subs	r2, #1
 800a86c:	4454      	add	r4, sl
 800a86e:	4938      	ldr	r1, [pc, #224]	; (800a950 <PxMessagingTask+0x780>)
 800a870:	1861      	adds	r1, r4, r1
 800a872:	4842      	ldr	r0, [pc, #264]	; (800a97c <PxMessagingTask+0x7ac>)
 800a874:	f00a f865 	bl	8014942 <memcpy>
 800a878:	e7d6      	b.n	800a828 <PxMessagingTask+0x658>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a87a:	9b06      	ldr	r3, [sp, #24]
 800a87c:	9a05      	ldr	r2, [sp, #20]
 800a87e:	1a9a      	subs	r2, r3, r2
 800a880:	3a02      	subs	r2, #2
 800a882:	4454      	add	r4, sl
 800a884:	4932      	ldr	r1, [pc, #200]	; (800a950 <PxMessagingTask+0x780>)
 800a886:	1861      	adds	r1, r4, r1
 800a888:	483c      	ldr	r0, [pc, #240]	; (800a97c <PxMessagingTask+0x7ac>)
 800a88a:	f00a f85a 	bl	8014942 <memcpy>
 800a88e:	e7cb      	b.n	800a828 <PxMessagingTask+0x658>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a890:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a892:	f7f5 fc41 	bl	8000118 <strlen>
 800a896:	0002      	movs	r2, r0
 800a898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a89a:	4831      	ldr	r0, [pc, #196]	; (800a960 <PxMessagingTask+0x790>)
 800a89c:	f00a f851 	bl	8014942 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a8a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a8a2:	f7f5 fc39 	bl	8000118 <strlen>
 800a8a6:	b282      	uxth	r2, r0
 800a8a8:	2118      	movs	r1, #24
 800a8aa:	9804      	ldr	r0, [sp, #16]
 800a8ac:	f7ff f976 	bl	8009b9c <SendMessageToModule>
									osDelay(10);
 800a8b0:	200a      	movs	r0, #10
 800a8b2:	f004 f944 	bl	800eb3e <osDelay>
 800a8b6:	e7cd      	b.n	800a854 <PxMessagingTask+0x684>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a8b8:	f004 fa56 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 800a8bc:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a8be:	f7f5 fc2b 	bl	8000118 <strlen>
 800a8c2:	0002      	movs	r2, r0
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	0038      	movs	r0, r7
 800a8c8:	f00a f844 	bl	8014954 <memset>
							if(longMessage){
 800a8cc:	4b25      	ldr	r3, [pc, #148]	; (800a964 <PxMessagingTask+0x794>)
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d013      	beq.n	800a8fc <PxMessagingTask+0x72c>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a8d4:	4b24      	ldr	r3, [pc, #144]	; (800a968 <PxMessagingTask+0x798>)
 800a8d6:	4699      	mov	r9, r3
 800a8d8:	8818      	ldrh	r0, [r3, #0]
 800a8da:	1838      	adds	r0, r7, r0
 800a8dc:	4454      	add	r4, sl
 800a8de:	491c      	ldr	r1, [pc, #112]	; (800a950 <PxMessagingTask+0x780>)
 800a8e0:	1861      	adds	r1, r4, r1
 800a8e2:	9c06      	ldr	r4, [sp, #24]
 800a8e4:	0022      	movs	r2, r4
 800a8e6:	f00a f82c 	bl	8014942 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a8ea:	464b      	mov	r3, r9
 800a8ec:	881a      	ldrh	r2, [r3, #0]
 800a8ee:	46a4      	mov	ip, r4
 800a8f0:	4462      	add	r2, ip
 800a8f2:	464b      	mov	r3, r9
 800a8f4:	801a      	strh	r2, [r3, #0]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4699      	mov	r9, r3
 800a8fa:	e4d5      	b.n	800a2a8 <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a8fc:	4b1a      	ldr	r3, [pc, #104]	; (800a968 <PxMessagingTask+0x798>)
 800a8fe:	4699      	mov	r9, r3
 800a900:	8818      	ldrh	r0, [r3, #0]
 800a902:	1838      	adds	r0, r7, r0
 800a904:	4454      	add	r4, sl
 800a906:	4912      	ldr	r1, [pc, #72]	; (800a950 <PxMessagingTask+0x780>)
 800a908:	1861      	adds	r1, r4, r1
 800a90a:	9a06      	ldr	r2, [sp, #24]
 800a90c:	f00a f819 	bl	8014942 <memcpy>
								longMessageLastPtr =0;
 800a910:	2400      	movs	r4, #0
 800a912:	464b      	mov	r3, r9
 800a914:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 800a916:	4b10      	ldr	r3, [pc, #64]	; (800a958 <PxMessagingTask+0x788>)
 800a918:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a91a:	0023      	movs	r3, r4
 800a91c:	0022      	movs	r2, r4
 800a91e:	0021      	movs	r1, r4
 800a920:	4819      	ldr	r0, [pc, #100]	; (800a988 <PxMessagingTask+0x7b8>)
 800a922:	6800      	ldr	r0, [r0, #0]
 800a924:	f005 fd2a 	bl	801037c <xTaskGenericNotify>
 800a928:	46a1      	mov	r9, r4
 800a92a:	e4bd      	b.n	800a2a8 <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a92c:	4b17      	ldr	r3, [pc, #92]	; (800a98c <PxMessagingTask+0x7bc>)
 800a92e:	4a18      	ldr	r2, [pc, #96]	; (800a990 <PxMessagingTask+0x7c0>)
 800a930:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a932:	4b11      	ldr	r3, [pc, #68]	; (800a978 <PxMessagingTask+0x7a8>)
 800a934:	2201      	movs	r2, #1
 800a936:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a938:	200a      	movs	r0, #10
 800a93a:	f004 f900 	bl	800eb3e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	4b14      	ldr	r3, [pc, #80]	; (800a994 <PxMessagingTask+0x7c4>)
 800a944:	4a14      	ldr	r2, [pc, #80]	; (800a998 <PxMessagingTask+0x7c8>)
 800a946:	60da      	str	r2, [r3, #12]
 800a948:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a94c:	46c0      	nop			; (mov r8, r8)
 800a94e:	e7fd      	b.n	800a94c <PxMessagingTask+0x77c>
 800a950:	20000d7c 	.word	0x20000d7c
 800a954:	20001104 	.word	0x20001104
 800a958:	20001188 	.word	0x20001188
 800a95c:	200010ea 	.word	0x200010ea
 800a960:	20000fac 	.word	0x20000fac
 800a964:	20000f69 	.word	0x20000f69
 800a968:	20000f6a 	.word	0x20000f6a
 800a96c:	20001a80 	.word	0x20001a80
 800a970:	20000044 	.word	0x20000044
 800a974:	20000aec 	.word	0x20000aec
 800a978:	20000f68 	.word	0x20000f68
 800a97c:	20001a4c 	.word	0x20001a4c
 800a980:	20000ae8 	.word	0x20000ae8
 800a984:	20006dd4 	.word	0x20006dd4
 800a988:	2000195c 	.word	0x2000195c
 800a98c:	20007ff0 	.word	0x20007ff0
 800a990:	deadbeef 	.word	0xdeadbeef
 800a994:	e000ed00 	.word	0xe000ed00
 800a998:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a99c:	4fec      	ldr	r7, [pc, #944]	; (800ad50 <PxMessagingTask+0xb80>)
 800a99e:	19bf      	adds	r7, r7, r6
 800a9a0:	5d38      	ldrb	r0, [r7, r4]
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9300      	str	r3, [sp, #0]
 800a9a6:	3319      	adds	r3, #25
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	f7fe fe70 	bl	8009690 <SendMessageFromPort>
							osDelay(100);
 800a9b0:	2064      	movs	r0, #100	; 0x64
 800a9b2:	f004 f8c4 	bl	800eb3e <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a9b6:	5d3b      	ldrb	r3, [r7, r4]
 800a9b8:	4ae6      	ldr	r2, [pc, #920]	; (800ad54 <PxMessagingTask+0xb84>)
 800a9ba:	7811      	ldrb	r1, [r2, #0]
 800a9bc:	9a08      	ldr	r2, [sp, #32]
 800a9be:	9804      	ldr	r0, [sp, #16]
 800a9c0:	f7f9 f8f6 	bl	8003bb0 <remoteBootloaderUpdate>
							break;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4699      	mov	r9, r3
 800a9c8:	e46e      	b.n	800a2a8 <PxMessagingTask+0xd8>
							temp =cMessage[port - 1][11 + shift];
 800a9ca:	46a3      	mov	fp, r4
 800a9cc:	230b      	movs	r3, #11
 800a9ce:	4699      	mov	r9, r3
 800a9d0:	44a1      	add	r9, r4
 800a9d2:	4bdf      	ldr	r3, [pc, #892]	; (800ad50 <PxMessagingTask+0xb80>)
 800a9d4:	199b      	adds	r3, r3, r6
 800a9d6:	464a      	mov	r2, r9
 800a9d8:	5c9b      	ldrb	r3, [r3, r2]
 800a9da:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 800a9dc:	9b06      	ldr	r3, [sp, #24]
 800a9de:	2b0f      	cmp	r3, #15
 800a9e0:	d100      	bne.n	800a9e4 <PxMessagingTask+0x814>
 800a9e2:	e088      	b.n	800aaf6 <PxMessagingTask+0x926>
							if(numOfParams == 17)
 800a9e4:	9b06      	ldr	r3, [sp, #24]
 800a9e6:	2b11      	cmp	r3, #17
 800a9e8:	d100      	bne.n	800a9ec <PxMessagingTask+0x81c>
 800a9ea:	e08c      	b.n	800ab06 <PxMessagingTask+0x936>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a9ec:	465b      	mov	r3, fp
 800a9ee:	1c59      	adds	r1, r3, #1
 800a9f0:	910c      	str	r1, [sp, #48]	; 0x30
 800a9f2:	1c98      	adds	r0, r3, #2
 800a9f4:	900d      	str	r0, [sp, #52]	; 0x34
 800a9f6:	1cda      	adds	r2, r3, #3
 800a9f8:	920e      	str	r2, [sp, #56]	; 0x38
 800a9fa:	4bd5      	ldr	r3, [pc, #852]	; (800ad50 <PxMessagingTask+0xb80>)
 800a9fc:	199b      	adds	r3, r3, r6
 800a9fe:	465c      	mov	r4, fp
 800aa00:	5d1c      	ldrb	r4, [r3, r4]
 800aa02:	0624      	lsls	r4, r4, #24
 800aa04:	5c9a      	ldrb	r2, [r3, r2]
 800aa06:	18a4      	adds	r4, r4, r2
 800aa08:	5c5a      	ldrb	r2, [r3, r1]
 800aa0a:	0412      	lsls	r2, r2, #16
 800aa0c:	18a4      	adds	r4, r4, r2
 800aa0e:	5c1a      	ldrb	r2, [r3, r0]
 800aa10:	0212      	lsls	r2, r2, #8
 800aa12:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800aa14:	465a      	mov	r2, fp
 800aa16:	3204      	adds	r2, #4
 800aa18:	920f      	str	r2, [sp, #60]	; 0x3c
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	3105      	adds	r1, #5
 800aa1e:	9110      	str	r1, [sp, #64]	; 0x40
 800aa20:	4658      	mov	r0, fp
 800aa22:	3006      	adds	r0, #6
 800aa24:	9011      	str	r0, [sp, #68]	; 0x44
 800aa26:	465f      	mov	r7, fp
 800aa28:	3707      	adds	r7, #7
 800aa2a:	9705      	str	r7, [sp, #20]
 800aa2c:	5c9f      	ldrb	r7, [r3, r2]
 800aa2e:	063f      	lsls	r7, r7, #24
 800aa30:	5c5a      	ldrb	r2, [r3, r1]
 800aa32:	0412      	lsls	r2, r2, #16
 800aa34:	18bf      	adds	r7, r7, r2
 800aa36:	9a05      	ldr	r2, [sp, #20]
 800aa38:	5c9a      	ldrb	r2, [r3, r2]
 800aa3a:	18bf      	adds	r7, r7, r2
 800aa3c:	5c1b      	ldrb	r3, [r3, r0]
 800aa3e:	021b      	lsls	r3, r3, #8
 800aa40:	18ff      	adds	r7, r7, r3
							if(temp == false){
 800aa42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d166      	bne.n	800ab16 <PxMessagingTask+0x946>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800aa48:	4bc1      	ldr	r3, [pc, #772]	; (800ad50 <PxMessagingTask+0xb80>)
 800aa4a:	199b      	adds	r3, r3, r6
 800aa4c:	445b      	add	r3, fp
 800aa4e:	7a5b      	ldrb	r3, [r3, #9]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d012      	beq.n	800aa7a <PxMessagingTask+0x8aa>
 800aa54:	2138      	movs	r1, #56	; 0x38
 800aa56:	4369      	muls	r1, r5
 800aa58:	4abd      	ldr	r2, [pc, #756]	; (800ad50 <PxMessagingTask+0xb80>)
 800aa5a:	1852      	adds	r2, r2, r1
 800aa5c:	445a      	add	r2, fp
 800aa5e:	7a91      	ldrb	r1, [r2, #10]
 800aa60:	2900      	cmp	r1, #0
 800aa62:	d00a      	beq.n	800aa7a <PxMessagingTask+0x8aa>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800aa64:	2038      	movs	r0, #56	; 0x38
 800aa66:	4368      	muls	r0, r5
 800aa68:	4ab9      	ldr	r2, [pc, #740]	; (800ad50 <PxMessagingTask+0xb80>)
 800aa6a:	1812      	adds	r2, r2, r0
 800aa6c:	445a      	add	r2, fp
 800aa6e:	7a10      	ldrb	r0, [r2, #8]
 800aa70:	9100      	str	r1, [sp, #0]
 800aa72:	003a      	movs	r2, r7
 800aa74:	0021      	movs	r1, r4
 800aa76:	f7fe fce9 	bl	800944c <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800aa7a:	4bb5      	ldr	r3, [pc, #724]	; (800ad50 <PxMessagingTask+0xb80>)
 800aa7c:	199b      	adds	r3, r3, r6
 800aa7e:	464a      	mov	r2, r9
 800aa80:	5c9b      	ldrb	r3, [r3, r2]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d012      	beq.n	800aaac <PxMessagingTask+0x8dc>
 800aa86:	2138      	movs	r1, #56	; 0x38
 800aa88:	4369      	muls	r1, r5
 800aa8a:	4ab1      	ldr	r2, [pc, #708]	; (800ad50 <PxMessagingTask+0xb80>)
 800aa8c:	1852      	adds	r2, r2, r1
 800aa8e:	445a      	add	r2, fp
 800aa90:	7b11      	ldrb	r1, [r2, #12]
 800aa92:	2900      	cmp	r1, #0
 800aa94:	d00a      	beq.n	800aaac <PxMessagingTask+0x8dc>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800aa96:	2038      	movs	r0, #56	; 0x38
 800aa98:	4368      	muls	r0, r5
 800aa9a:	4aad      	ldr	r2, [pc, #692]	; (800ad50 <PxMessagingTask+0xb80>)
 800aa9c:	1812      	adds	r2, r2, r0
 800aa9e:	445a      	add	r2, fp
 800aaa0:	7a10      	ldrb	r0, [r2, #8]
 800aaa2:	9100      	str	r1, [sp, #0]
 800aaa4:	003a      	movs	r2, r7
 800aaa6:	0021      	movs	r1, r4
 800aaa8:	f7fe fcd0 	bl	800944c <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800aaac:	4ba8      	ldr	r3, [pc, #672]	; (800ad50 <PxMessagingTask+0xb80>)
 800aaae:	199b      	adds	r3, r3, r6
 800aab0:	445b      	add	r3, fp
 800aab2:	7b5b      	ldrb	r3, [r3, #13]
 800aab4:	9305      	str	r3, [sp, #20]
 800aab6:	2200      	movs	r2, #0
 800aab8:	4691      	mov	r9, r2
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d101      	bne.n	800aac2 <PxMessagingTask+0x8f2>
 800aabe:	f7ff fbf3 	bl	800a2a8 <PxMessagingTask+0xd8>
 800aac2:	3238      	adds	r2, #56	; 0x38
 800aac4:	436a      	muls	r2, r5
 800aac6:	4ba2      	ldr	r3, [pc, #648]	; (800ad50 <PxMessagingTask+0xb80>)
 800aac8:	189b      	adds	r3, r3, r2
 800aaca:	445b      	add	r3, fp
 800aacc:	7b9a      	ldrb	r2, [r3, #14]
 800aace:	454a      	cmp	r2, r9
 800aad0:	d101      	bne.n	800aad6 <PxMessagingTask+0x906>
 800aad2:	f000 fec3 	bl	800b85c <PxMessagingTask+0x168c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800aad6:	2138      	movs	r1, #56	; 0x38
 800aad8:	4369      	muls	r1, r5
 800aada:	4b9d      	ldr	r3, [pc, #628]	; (800ad50 <PxMessagingTask+0xb80>)
 800aadc:	185b      	adds	r3, r3, r1
 800aade:	445b      	add	r3, fp
 800aae0:	7a18      	ldrb	r0, [r3, #8]
 800aae2:	9200      	str	r2, [sp, #0]
 800aae4:	9b05      	ldr	r3, [sp, #20]
 800aae6:	003a      	movs	r2, r7
 800aae8:	0021      	movs	r1, r4
 800aaea:	f7fe fcaf 	bl	800944c <SetupDMAStreams>
 800aaee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaf0:	9305      	str	r3, [sp, #20]
 800aaf2:	f7ff fbd9 	bl	800a2a8 <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 800aaf6:	2238      	movs	r2, #56	; 0x38
 800aaf8:	436a      	muls	r2, r5
 800aafa:	4b95      	ldr	r3, [pc, #596]	; (800ad50 <PxMessagingTask+0xb80>)
 800aafc:	189b      	adds	r3, r3, r2
 800aafe:	191c      	adds	r4, r3, r4
 800ab00:	7b63      	ldrb	r3, [r4, #13]
 800ab02:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab04:	e772      	b.n	800a9ec <PxMessagingTask+0x81c>
								temp =cMessage[port - 1][15 + shift];
 800ab06:	2238      	movs	r2, #56	; 0x38
 800ab08:	436a      	muls	r2, r5
 800ab0a:	4b91      	ldr	r3, [pc, #580]	; (800ad50 <PxMessagingTask+0xb80>)
 800ab0c:	189b      	adds	r3, r3, r2
 800ab0e:	445b      	add	r3, fp
 800ab10:	7bdb      	ldrb	r3, [r3, #15]
 800ab12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab14:	e76a      	b.n	800a9ec <PxMessagingTask+0x81c>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800ab16:	2338      	movs	r3, #56	; 0x38
 800ab18:	436b      	muls	r3, r5
 800ab1a:	4c8d      	ldr	r4, [pc, #564]	; (800ad50 <PxMessagingTask+0xb80>)
 800ab1c:	18e4      	adds	r4, r4, r3
 800ab1e:	465b      	mov	r3, fp
 800ab20:	18e6      	adds	r6, r4, r3
 800ab22:	7a31      	ldrb	r1, [r6, #8]
 800ab24:	20e4      	movs	r0, #228	; 0xe4
 800ab26:	f7fc fe85 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800ab2a:	465b      	mov	r3, fp
 800ab2c:	5ce3      	ldrb	r3, [r4, r3]
 800ab2e:	021b      	lsls	r3, r3, #8
 800ab30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab32:	5ca1      	ldrb	r1, [r4, r2]
 800ab34:	18c9      	adds	r1, r1, r3
 800ab36:	b289      	uxth	r1, r1
 800ab38:	20e5      	movs	r0, #229	; 0xe5
 800ab3a:	f7fc fe7b 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800ab3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab40:	5ce3      	ldrb	r3, [r4, r3]
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab46:	5ca1      	ldrb	r1, [r4, r2]
 800ab48:	18c9      	adds	r1, r1, r3
 800ab4a:	b289      	uxth	r1, r1
 800ab4c:	20e6      	movs	r0, #230	; 0xe6
 800ab4e:	f7fc fe71 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800ab52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab54:	5ce3      	ldrb	r3, [r4, r3]
 800ab56:	021b      	lsls	r3, r3, #8
 800ab58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab5a:	5ca1      	ldrb	r1, [r4, r2]
 800ab5c:	18c9      	adds	r1, r1, r3
 800ab5e:	b289      	uxth	r1, r1
 800ab60:	20e7      	movs	r0, #231	; 0xe7
 800ab62:	f7fc fe67 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800ab66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab68:	5ce3      	ldrb	r3, [r4, r3]
 800ab6a:	021b      	lsls	r3, r3, #8
 800ab6c:	9a05      	ldr	r2, [sp, #20]
 800ab6e:	5ca1      	ldrb	r1, [r4, r2]
 800ab70:	18c9      	adds	r1, r1, r3
 800ab72:	b289      	uxth	r1, r1
 800ab74:	20e8      	movs	r0, #232	; 0xe8
 800ab76:	f7fc fe5d 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800ab7a:	7a73      	ldrb	r3, [r6, #9]
 800ab7c:	021b      	lsls	r3, r3, #8
 800ab7e:	7ab1      	ldrb	r1, [r6, #10]
 800ab80:	18c9      	adds	r1, r1, r3
 800ab82:	b289      	uxth	r1, r1
 800ab84:	20e9      	movs	r0, #233	; 0xe9
 800ab86:	f7fc fe55 	bl	8007834 <EE_WriteVariable>
								if(numOfParams == 19)
 800ab8a:	9b06      	ldr	r3, [sp, #24]
 800ab8c:	2b13      	cmp	r3, #19
 800ab8e:	d116      	bne.n	800abbe <PxMessagingTask+0x9ee>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800ab90:	3325      	adds	r3, #37	; 0x25
 800ab92:	436b      	muls	r3, r5
 800ab94:	4d6e      	ldr	r5, [pc, #440]	; (800ad50 <PxMessagingTask+0xb80>)
 800ab96:	18ed      	adds	r5, r5, r3
 800ab98:	464b      	mov	r3, r9
 800ab9a:	5ceb      	ldrb	r3, [r5, r3]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	445d      	add	r5, fp
 800aba0:	7b29      	ldrb	r1, [r5, #12]
 800aba2:	18c9      	adds	r1, r1, r3
 800aba4:	b289      	uxth	r1, r1
 800aba6:	20ea      	movs	r0, #234	; 0xea
 800aba8:	f7fc fe44 	bl	8007834 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800abac:	f3bf 8f4f 	dsb	sy
 800abb0:	4b69      	ldr	r3, [pc, #420]	; (800ad58 <PxMessagingTask+0xb88>)
 800abb2:	4a6a      	ldr	r2, [pc, #424]	; (800ad5c <PxMessagingTask+0xb8c>)
 800abb4:	60da      	str	r2, [r3, #12]
 800abb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800abba:	46c0      	nop			; (mov r8, r8)
 800abbc:	e7fd      	b.n	800abba <PxMessagingTask+0x9ea>
								if(numOfParams == 21)
 800abbe:	9b06      	ldr	r3, [sp, #24]
 800abc0:	2b15      	cmp	r3, #21
 800abc2:	d1f3      	bne.n	800abac <PxMessagingTask+0x9dc>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800abc4:	3323      	adds	r3, #35	; 0x23
 800abc6:	435d      	muls	r5, r3
 800abc8:	4b61      	ldr	r3, [pc, #388]	; (800ad50 <PxMessagingTask+0xb80>)
 800abca:	195b      	adds	r3, r3, r5
 800abcc:	445b      	add	r3, fp
 800abce:	7b5a      	ldrb	r2, [r3, #13]
 800abd0:	0212      	lsls	r2, r2, #8
 800abd2:	7b99      	ldrb	r1, [r3, #14]
 800abd4:	1889      	adds	r1, r1, r2
 800abd6:	b289      	uxth	r1, r1
 800abd8:	20eb      	movs	r0, #235	; 0xeb
 800abda:	f7fc fe2b 	bl	8007834 <EE_WriteVariable>
 800abde:	e7e5      	b.n	800abac <PxMessagingTask+0x9dc>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800abe0:	4f5b      	ldr	r7, [pc, #364]	; (800ad50 <PxMessagingTask+0xb80>)
 800abe2:	19bf      	adds	r7, r7, r6
 800abe4:	1939      	adds	r1, r7, r4
 800abe6:	7a8b      	ldrb	r3, [r1, #10]
 800abe8:	9306      	str	r3, [sp, #24]
 800abea:	7aca      	ldrb	r2, [r1, #11]
 800abec:	4859      	ldr	r0, [pc, #356]	; (800ad54 <PxMessagingTask+0xb84>)
 800abee:	7803      	ldrb	r3, [r0, #0]
 800abf0:	4699      	mov	r9, r3
 800abf2:	7a4b      	ldrb	r3, [r1, #9]
 800abf4:	469b      	mov	fp, r3
 800abf6:	7b08      	ldrb	r0, [r1, #12]
 800abf8:	0003      	movs	r3, r0
 800abfa:	1e58      	subs	r0, r3, #1
 800abfc:	4183      	sbcs	r3, r0
 800abfe:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800ac00:	7908      	ldrb	r0, [r1, #4]
 800ac02:	0603      	lsls	r3, r0, #24
 800ac04:	469c      	mov	ip, r3
 800ac06:	7948      	ldrb	r0, [r1, #5]
 800ac08:	0400      	lsls	r0, r0, #16
 800ac0a:	4460      	add	r0, ip
 800ac0c:	79cb      	ldrb	r3, [r1, #7]
 800ac0e:	469c      	mov	ip, r3
 800ac10:	4460      	add	r0, ip
 800ac12:	798b      	ldrb	r3, [r1, #6]
 800ac14:	021b      	lsls	r3, r3, #8
 800ac16:	469c      	mov	ip, r3
 800ac18:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800ac1a:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800ac1c:	5d38      	ldrb	r0, [r7, r4]
 800ac1e:	0600      	lsls	r0, r0, #24
 800ac20:	78cc      	ldrb	r4, [r1, #3]
 800ac22:	1900      	adds	r0, r0, r4
 800ac24:	784c      	ldrb	r4, [r1, #1]
 800ac26:	0424      	lsls	r4, r4, #16
 800ac28:	1900      	adds	r0, r0, r4
 800ac2a:	788c      	ldrb	r4, [r1, #2]
 800ac2c:	0224      	lsls	r4, r4, #8
 800ac2e:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800ac30:	9001      	str	r0, [sp, #4]
 800ac32:	7a09      	ldrb	r1, [r1, #8]
 800ac34:	9100      	str	r1, [sp, #0]
 800ac36:	9b06      	ldr	r3, [sp, #24]
 800ac38:	4649      	mov	r1, r9
 800ac3a:	4658      	mov	r0, fp
 800ac3c:	f7fe ffd4 	bl	8009be8 <StartScastDMAStream>
							break;
 800ac40:	2300      	movs	r3, #0
 800ac42:	4699      	mov	r9, r3
 800ac44:	f7ff fb30 	bl	800a2a8 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800ac48:	0023      	movs	r3, r4
 800ac4a:	4a41      	ldr	r2, [pc, #260]	; (800ad50 <PxMessagingTask+0xb80>)
 800ac4c:	1992      	adds	r2, r2, r6
 800ac4e:	5d12      	ldrb	r2, [r2, r4]
 800ac50:	2a00      	cmp	r2, #0
 800ac52:	d000      	beq.n	800ac56 <PxMessagingTask+0xa86>
 800ac54:	e09a      	b.n	800ad8c <PxMessagingTask+0xbbc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ac56:	3238      	adds	r2, #56	; 0x38
 800ac58:	436a      	muls	r2, r5
 800ac5a:	4b3d      	ldr	r3, [pc, #244]	; (800ad50 <PxMessagingTask+0xb80>)
 800ac5c:	189b      	adds	r3, r3, r2
 800ac5e:	191c      	adds	r4, r3, r4
 800ac60:	78a3      	ldrb	r3, [r4, #2]
 800ac62:	061b      	lsls	r3, r3, #24
 800ac64:	78e2      	ldrb	r2, [r4, #3]
 800ac66:	0412      	lsls	r2, r2, #16
 800ac68:	189b      	adds	r3, r3, r2
 800ac6a:	7962      	ldrb	r2, [r4, #5]
 800ac6c:	189b      	adds	r3, r3, r2
 800ac6e:	7922      	ldrb	r2, [r4, #4]
 800ac70:	0212      	lsls	r2, r2, #8
 800ac72:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800ac74:	7862      	ldrb	r2, [r4, #1]
 800ac76:	3a01      	subs	r2, #1
 800ac78:	b2d1      	uxtb	r1, r2
 800ac7a:	2907      	cmp	r1, #7
 800ac7c:	d901      	bls.n	800ac82 <PxMessagingTask+0xab2>
 800ac7e:	f000 fdd4 	bl	800b82a <PxMessagingTask+0x165a>
 800ac82:	b2d2      	uxtb	r2, r2
 800ac84:	0092      	lsls	r2, r2, #2
 800ac86:	4936      	ldr	r1, [pc, #216]	; (800ad60 <PxMessagingTask+0xb90>)
 800ac88:	588a      	ldr	r2, [r1, r2]
 800ac8a:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800ac8c:	781a      	ldrb	r2, [r3, #0]
 800ac8e:	4b35      	ldr	r3, [pc, #212]	; (800ad64 <PxMessagingTask+0xb94>)
 800ac90:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ac92:	2201      	movs	r2, #1
 800ac94:	211f      	movs	r1, #31
 800ac96:	9804      	ldr	r0, [sp, #16]
 800ac98:	f7fe ff80 	bl	8009b9c <SendMessageToModule>
										break;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	4699      	mov	r9, r3
 800aca0:	f7ff fb02 	bl	800a2a8 <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	4b2f      	ldr	r3, [pc, #188]	; (800ad64 <PxMessagingTask+0xb94>)
 800aca8:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800acaa:	2201      	movs	r2, #1
 800acac:	211f      	movs	r1, #31
 800acae:	9804      	ldr	r0, [sp, #16]
 800acb0:	f7fe ff74 	bl	8009b9c <SendMessageToModule>
										break;
 800acb4:	2300      	movs	r3, #0
 800acb6:	4699      	mov	r9, r3
 800acb8:	f7ff faf6 	bl	800a2a8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800acbc:	8819      	ldrh	r1, [r3, #0]
 800acbe:	4a29      	ldr	r2, [pc, #164]	; (800ad64 <PxMessagingTask+0xb94>)
 800acc0:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	0a1b      	lsrs	r3, r3, #8
 800acc6:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800acc8:	2202      	movs	r2, #2
 800acca:	211f      	movs	r1, #31
 800accc:	9804      	ldr	r0, [sp, #16]
 800acce:	f7fe ff65 	bl	8009b9c <SendMessageToModule>
										break;
 800acd2:	2300      	movs	r3, #0
 800acd4:	4699      	mov	r9, r3
 800acd6:	f7ff fae7 	bl	800a2a8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800acda:	8819      	ldrh	r1, [r3, #0]
 800acdc:	4a21      	ldr	r2, [pc, #132]	; (800ad64 <PxMessagingTask+0xb94>)
 800acde:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	b21b      	sxth	r3, r3
 800ace4:	121b      	asrs	r3, r3, #8
 800ace6:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ace8:	2202      	movs	r2, #2
 800acea:	211f      	movs	r1, #31
 800acec:	9804      	ldr	r0, [sp, #16]
 800acee:	f7fe ff55 	bl	8009b9c <SendMessageToModule>
										break;
 800acf2:	2300      	movs	r3, #0
 800acf4:	4699      	mov	r9, r3
 800acf6:	f7ff fad7 	bl	800a2a8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800acfa:	6819      	ldr	r1, [r3, #0]
 800acfc:	4a19      	ldr	r2, [pc, #100]	; (800ad64 <PxMessagingTask+0xb94>)
 800acfe:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ad00:	6819      	ldr	r1, [r3, #0]
 800ad02:	0a09      	lsrs	r1, r1, #8
 800ad04:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ad06:	6819      	ldr	r1, [r3, #0]
 800ad08:	0c09      	lsrs	r1, r1, #16
 800ad0a:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	0e1b      	lsrs	r3, r3, #24
 800ad10:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad12:	2204      	movs	r2, #4
 800ad14:	211f      	movs	r1, #31
 800ad16:	9804      	ldr	r0, [sp, #16]
 800ad18:	f7fe ff40 	bl	8009b9c <SendMessageToModule>
										break;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	4699      	mov	r9, r3
 800ad20:	f7ff fac2 	bl	800a2a8 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ad24:	6819      	ldr	r1, [r3, #0]
 800ad26:	4a0f      	ldr	r2, [pc, #60]	; (800ad64 <PxMessagingTask+0xb94>)
 800ad28:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ad2a:	6819      	ldr	r1, [r3, #0]
 800ad2c:	1209      	asrs	r1, r1, #8
 800ad2e:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ad30:	6819      	ldr	r1, [r3, #0]
 800ad32:	1409      	asrs	r1, r1, #16
 800ad34:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	161b      	asrs	r3, r3, #24
 800ad3a:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad3c:	2204      	movs	r2, #4
 800ad3e:	211f      	movs	r1, #31
 800ad40:	9804      	ldr	r0, [sp, #16]
 800ad42:	f7fe ff2b 	bl	8009b9c <SendMessageToModule>
										break;
 800ad46:	2300      	movs	r3, #0
 800ad48:	4699      	mov	r9, r3
 800ad4a:	f7ff faad 	bl	800a2a8 <PxMessagingTask+0xd8>
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	20000d7c 	.word	0x20000d7c
 800ad54:	200010ea 	.word	0x200010ea
 800ad58:	e000ed00 	.word	0xe000ed00
 800ad5c:	05fa0004 	.word	0x05fa0004
 800ad60:	0801bcec 	.word	0x0801bcec
 800ad64:	20000fac 	.word	0x20000fac
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800ad68:	7819      	ldrb	r1, [r3, #0]
 800ad6a:	4aef      	ldr	r2, [pc, #956]	; (800b128 <PxMessagingTask+0xf58>)
 800ad6c:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800ad6e:	7859      	ldrb	r1, [r3, #1]
 800ad70:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800ad72:	7899      	ldrb	r1, [r3, #2]
 800ad74:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ad76:	78db      	ldrb	r3, [r3, #3]
 800ad78:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad7a:	2208      	movs	r2, #8
 800ad7c:	211f      	movs	r1, #31
 800ad7e:	9804      	ldr	r0, [sp, #16]
 800ad80:	f7fe ff0c 	bl	8009b9c <SendMessageToModule>
										break; // You cannot bitwise floats
 800ad84:	2300      	movs	r3, #0
 800ad86:	4699      	mov	r9, r3
 800ad88:	f7ff fa8e 	bl	800a2a8 <PxMessagingTask+0xd8>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800ad8c:	2a02      	cmp	r2, #2
 800ad8e:	d000      	beq.n	800ad92 <PxMessagingTask+0xbc2>
 800ad90:	e09f      	b.n	800aed2 <PxMessagingTask+0xd02>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800ad92:	48e6      	ldr	r0, [pc, #920]	; (800b12c <PxMessagingTask+0xf5c>)
 800ad94:	3236      	adds	r2, #54	; 0x36
 800ad96:	436a      	muls	r2, r5
 800ad98:	1882      	adds	r2, r0, r2
 800ad9a:	1851      	adds	r1, r2, r1
 800ad9c:	3901      	subs	r1, #1
 800ad9e:	2200      	movs	r2, #0
 800ada0:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800ada2:	3301      	adds	r3, #1
 800ada4:	4453      	add	r3, sl
 800ada6:	1818      	adds	r0, r3, r0
 800ada8:	f7f8 fcde 	bl	8003768 <IsModuleParameter>
 800adac:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800adae:	2800      	cmp	r0, #0
 800adb0:	d108      	bne.n	800adc4 <PxMessagingTask+0xbf4>
									SendMessageToModule(src,
 800adb2:	2201      	movs	r2, #1
 800adb4:	211f      	movs	r1, #31
 800adb6:	9804      	ldr	r0, [sp, #16]
 800adb8:	f7fe fef0 	bl	8009b9c <SendMessageToModule>
 800adbc:	2300      	movs	r3, #0
 800adbe:	4699      	mov	r9, r3
 800adc0:	f7ff fa72 	bl	800a2a8 <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800adc4:	3801      	subs	r0, #1
 800adc6:	4ada      	ldr	r2, [pc, #872]	; (800b130 <PxMessagingTask+0xf60>)
 800adc8:	210c      	movs	r1, #12
 800adca:	4341      	muls	r1, r0
 800adcc:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800adce:	1852      	adds	r2, r2, r1
 800add0:	7912      	ldrb	r2, [r2, #4]
 800add2:	49d5      	ldr	r1, [pc, #852]	; (800b128 <PxMessagingTask+0xf58>)
 800add4:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800add6:	3a01      	subs	r2, #1
 800add8:	b2d1      	uxtb	r1, r2
 800adda:	2907      	cmp	r1, #7
 800addc:	d901      	bls.n	800ade2 <PxMessagingTask+0xc12>
 800adde:	f000 fd28 	bl	800b832 <PxMessagingTask+0x1662>
 800ade2:	b2d2      	uxtb	r2, r2
 800ade4:	0092      	lsls	r2, r2, #2
 800ade6:	49d3      	ldr	r1, [pc, #844]	; (800b134 <PxMessagingTask+0xf64>)
 800ade8:	588a      	ldr	r2, [r1, r2]
 800adea:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800adec:	781a      	ldrb	r2, [r3, #0]
 800adee:	4bce      	ldr	r3, [pc, #824]	; (800b128 <PxMessagingTask+0xf58>)
 800adf0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800adf2:	2202      	movs	r2, #2
 800adf4:	211f      	movs	r1, #31
 800adf6:	9804      	ldr	r0, [sp, #16]
 800adf8:	f7fe fed0 	bl	8009b9c <SendMessageToModule>
											break;
 800adfc:	2300      	movs	r3, #0
 800adfe:	4699      	mov	r9, r3
 800ae00:	f7ff fa52 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800ae04:	781a      	ldrb	r2, [r3, #0]
 800ae06:	4bc8      	ldr	r3, [pc, #800]	; (800b128 <PxMessagingTask+0xf58>)
 800ae08:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	211f      	movs	r1, #31
 800ae0e:	9804      	ldr	r0, [sp, #16]
 800ae10:	f7fe fec4 	bl	8009b9c <SendMessageToModule>
											break;
 800ae14:	2300      	movs	r3, #0
 800ae16:	4699      	mov	r9, r3
 800ae18:	f7ff fa46 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ae1c:	8819      	ldrh	r1, [r3, #0]
 800ae1e:	4ac2      	ldr	r2, [pc, #776]	; (800b128 <PxMessagingTask+0xf58>)
 800ae20:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	0a1b      	lsrs	r3, r3, #8
 800ae26:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ae28:	2203      	movs	r2, #3
 800ae2a:	211f      	movs	r1, #31
 800ae2c:	9804      	ldr	r0, [sp, #16]
 800ae2e:	f7fe feb5 	bl	8009b9c <SendMessageToModule>
											break;
 800ae32:	2300      	movs	r3, #0
 800ae34:	4699      	mov	r9, r3
 800ae36:	f7ff fa37 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ae3a:	8819      	ldrh	r1, [r3, #0]
 800ae3c:	4aba      	ldr	r2, [pc, #744]	; (800b128 <PxMessagingTask+0xf58>)
 800ae3e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	b21b      	sxth	r3, r3
 800ae44:	121b      	asrs	r3, r3, #8
 800ae46:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ae48:	2203      	movs	r2, #3
 800ae4a:	211f      	movs	r1, #31
 800ae4c:	9804      	ldr	r0, [sp, #16]
 800ae4e:	f7fe fea5 	bl	8009b9c <SendMessageToModule>
											break;
 800ae52:	2300      	movs	r3, #0
 800ae54:	4699      	mov	r9, r3
 800ae56:	f7ff fa27 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ae5a:	6819      	ldr	r1, [r3, #0]
 800ae5c:	4ab2      	ldr	r2, [pc, #712]	; (800b128 <PxMessagingTask+0xf58>)
 800ae5e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ae60:	6819      	ldr	r1, [r3, #0]
 800ae62:	0a09      	lsrs	r1, r1, #8
 800ae64:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ae66:	6819      	ldr	r1, [r3, #0]
 800ae68:	0c09      	lsrs	r1, r1, #16
 800ae6a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	0e1b      	lsrs	r3, r3, #24
 800ae70:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae72:	2205      	movs	r2, #5
 800ae74:	211f      	movs	r1, #31
 800ae76:	9804      	ldr	r0, [sp, #16]
 800ae78:	f7fe fe90 	bl	8009b9c <SendMessageToModule>
											break;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	4699      	mov	r9, r3
 800ae80:	f7ff fa12 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ae84:	6819      	ldr	r1, [r3, #0]
 800ae86:	4aa8      	ldr	r2, [pc, #672]	; (800b128 <PxMessagingTask+0xf58>)
 800ae88:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ae8a:	6819      	ldr	r1, [r3, #0]
 800ae8c:	1209      	asrs	r1, r1, #8
 800ae8e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ae90:	6819      	ldr	r1, [r3, #0]
 800ae92:	1409      	asrs	r1, r1, #16
 800ae94:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	161b      	asrs	r3, r3, #24
 800ae9a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae9c:	2205      	movs	r2, #5
 800ae9e:	211f      	movs	r1, #31
 800aea0:	9804      	ldr	r0, [sp, #16]
 800aea2:	f7fe fe7b 	bl	8009b9c <SendMessageToModule>
											break;
 800aea6:	2300      	movs	r3, #0
 800aea8:	4699      	mov	r9, r3
 800aeaa:	f7ff f9fd 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800aeae:	7819      	ldrb	r1, [r3, #0]
 800aeb0:	4a9d      	ldr	r2, [pc, #628]	; (800b128 <PxMessagingTask+0xf58>)
 800aeb2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800aeb4:	7859      	ldrb	r1, [r3, #1]
 800aeb6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800aeb8:	7899      	ldrb	r1, [r3, #2]
 800aeba:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800aebc:	78db      	ldrb	r3, [r3, #3]
 800aebe:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800aec0:	2209      	movs	r2, #9
 800aec2:	211f      	movs	r1, #31
 800aec4:	9804      	ldr	r0, [sp, #16]
 800aec6:	f7fe fe69 	bl	8009b9c <SendMessageToModule>
											break;
 800aeca:	2300      	movs	r3, #0
 800aecc:	4699      	mov	r9, r3
 800aece:	f7ff f9eb 	bl	800a2a8 <PxMessagingTask+0xd8>
								}
 800aed2:	2300      	movs	r3, #0
 800aed4:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800aed6:	2a02      	cmp	r2, #2
 800aed8:	d801      	bhi.n	800aede <PxMessagingTask+0xd0e>
 800aeda:	f7ff f9e5 	bl	800a2a8 <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800aede:	3a04      	subs	r2, #4
 800aee0:	0092      	lsls	r2, r2, #2
 800aee2:	4b95      	ldr	r3, [pc, #596]	; (800b138 <PxMessagingTask+0xf68>)
 800aee4:	58d1      	ldr	r1, [r2, r3]
 800aee6:	220f      	movs	r2, #15
 800aee8:	400a      	ands	r2, r1
 800aeea:	4b8f      	ldr	r3, [pc, #572]	; (800b128 <PxMessagingTask+0xf58>)
 800aeec:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800aeee:	454a      	cmp	r2, r9
 800aef0:	d106      	bne.n	800af00 <PxMessagingTask+0xd30>
									SendMessageToModule(src,
 800aef2:	2201      	movs	r2, #1
 800aef4:	211f      	movs	r1, #31
 800aef6:	9804      	ldr	r0, [sp, #16]
 800aef8:	f7fe fe50 	bl	8009b9c <SendMessageToModule>
 800aefc:	f7ff f9d4 	bl	800a2a8 <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800af00:	0c09      	lsrs	r1, r1, #16
 800af02:	2380      	movs	r3, #128	; 0x80
 800af04:	059b      	lsls	r3, r3, #22
 800af06:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800af08:	3a01      	subs	r2, #1
 800af0a:	b2d0      	uxtb	r0, r2
 800af0c:	2807      	cmp	r0, #7
 800af0e:	d901      	bls.n	800af14 <PxMessagingTask+0xd44>
 800af10:	f000 fc93 	bl	800b83a <PxMessagingTask+0x166a>
 800af14:	b2d2      	uxtb	r2, r2
 800af16:	0092      	lsls	r2, r2, #2
 800af18:	4888      	ldr	r0, [pc, #544]	; (800b13c <PxMessagingTask+0xf6c>)
 800af1a:	5882      	ldr	r2, [r0, r2]
 800af1c:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	4b81      	ldr	r3, [pc, #516]	; (800b128 <PxMessagingTask+0xf58>)
 800af22:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800af24:	2202      	movs	r2, #2
 800af26:	211f      	movs	r1, #31
 800af28:	9804      	ldr	r0, [sp, #16]
 800af2a:	f7fe fe37 	bl	8009b9c <SendMessageToModule>
											break;
 800af2e:	2300      	movs	r3, #0
 800af30:	4699      	mov	r9, r3
 800af32:	f7ff f9b9 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800af36:	781a      	ldrb	r2, [r3, #0]
 800af38:	4b7b      	ldr	r3, [pc, #492]	; (800b128 <PxMessagingTask+0xf58>)
 800af3a:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800af3c:	2202      	movs	r2, #2
 800af3e:	211f      	movs	r1, #31
 800af40:	9804      	ldr	r0, [sp, #16]
 800af42:	f7fe fe2b 	bl	8009b9c <SendMessageToModule>
											break;
 800af46:	2300      	movs	r3, #0
 800af48:	4699      	mov	r9, r3
 800af4a:	f7ff f9ad 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800af4e:	8819      	ldrh	r1, [r3, #0]
 800af50:	4a75      	ldr	r2, [pc, #468]	; (800b128 <PxMessagingTask+0xf58>)
 800af52:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	0a1b      	lsrs	r3, r3, #8
 800af58:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800af5a:	2203      	movs	r2, #3
 800af5c:	211f      	movs	r1, #31
 800af5e:	9804      	ldr	r0, [sp, #16]
 800af60:	f7fe fe1c 	bl	8009b9c <SendMessageToModule>
											break;
 800af64:	2300      	movs	r3, #0
 800af66:	4699      	mov	r9, r3
 800af68:	f7ff f99e 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800af6c:	8819      	ldrh	r1, [r3, #0]
 800af6e:	4a6e      	ldr	r2, [pc, #440]	; (800b128 <PxMessagingTask+0xf58>)
 800af70:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	b21b      	sxth	r3, r3
 800af76:	121b      	asrs	r3, r3, #8
 800af78:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800af7a:	2203      	movs	r2, #3
 800af7c:	211f      	movs	r1, #31
 800af7e:	9804      	ldr	r0, [sp, #16]
 800af80:	f7fe fe0c 	bl	8009b9c <SendMessageToModule>
											break;
 800af84:	2300      	movs	r3, #0
 800af86:	4699      	mov	r9, r3
 800af88:	f7ff f98e 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800af8c:	6819      	ldr	r1, [r3, #0]
 800af8e:	4a66      	ldr	r2, [pc, #408]	; (800b128 <PxMessagingTask+0xf58>)
 800af90:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800af92:	6819      	ldr	r1, [r3, #0]
 800af94:	0a09      	lsrs	r1, r1, #8
 800af96:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800af98:	6819      	ldr	r1, [r3, #0]
 800af9a:	0c09      	lsrs	r1, r1, #16
 800af9c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	0e1b      	lsrs	r3, r3, #24
 800afa2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800afa4:	2205      	movs	r2, #5
 800afa6:	211f      	movs	r1, #31
 800afa8:	9804      	ldr	r0, [sp, #16]
 800afaa:	f7fe fdf7 	bl	8009b9c <SendMessageToModule>
											break;
 800afae:	2300      	movs	r3, #0
 800afb0:	4699      	mov	r9, r3
 800afb2:	f7ff f979 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800afb6:	6819      	ldr	r1, [r3, #0]
 800afb8:	4a5b      	ldr	r2, [pc, #364]	; (800b128 <PxMessagingTask+0xf58>)
 800afba:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800afbc:	6819      	ldr	r1, [r3, #0]
 800afbe:	1209      	asrs	r1, r1, #8
 800afc0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	1409      	asrs	r1, r1, #16
 800afc6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	161b      	asrs	r3, r3, #24
 800afcc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800afce:	2205      	movs	r2, #5
 800afd0:	211f      	movs	r1, #31
 800afd2:	9804      	ldr	r0, [sp, #16]
 800afd4:	f7fe fde2 	bl	8009b9c <SendMessageToModule>
											break;
 800afd8:	2300      	movs	r3, #0
 800afda:	4699      	mov	r9, r3
 800afdc:	f7ff f964 	bl	800a2a8 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800afe0:	781a      	ldrb	r2, [r3, #0]
 800afe2:	4b51      	ldr	r3, [pc, #324]	; (800b128 <PxMessagingTask+0xf58>)
 800afe4:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800afe6:	4a56      	ldr	r2, [pc, #344]	; (800b140 <PxMessagingTask+0xf70>)
 800afe8:	188a      	adds	r2, r1, r2
 800afea:	7812      	ldrb	r2, [r2, #0]
 800afec:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800afee:	4a55      	ldr	r2, [pc, #340]	; (800b144 <PxMessagingTask+0xf74>)
 800aff0:	188a      	adds	r2, r1, r2
 800aff2:	7812      	ldrb	r2, [r2, #0]
 800aff4:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800aff6:	4a54      	ldr	r2, [pc, #336]	; (800b148 <PxMessagingTask+0xf78>)
 800aff8:	4694      	mov	ip, r2
 800affa:	4461      	add	r1, ip
 800affc:	780a      	ldrb	r2, [r1, #0]
 800affe:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800b000:	2209      	movs	r2, #9
 800b002:	211f      	movs	r1, #31
 800b004:	9804      	ldr	r0, [sp, #16]
 800b006:	f7fe fdc9 	bl	8009b9c <SendMessageToModule>
											break;
 800b00a:	2300      	movs	r3, #0
 800b00c:	4699      	mov	r9, r3
 800b00e:	f7ff f94b 	bl	800a2a8 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b012:	4b4e      	ldr	r3, [pc, #312]	; (800b14c <PxMessagingTask+0xf7c>)
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2002      	movs	r0, #2
 800b01a:	4240      	negs	r0, r0
 800b01c:	17c1      	asrs	r1, r0, #31
 800b01e:	1812      	adds	r2, r2, r0
 800b020:	414b      	adcs	r3, r1
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00c      	beq.n	800b040 <PxMessagingTask+0xe70>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800b026:	4b4a      	ldr	r3, [pc, #296]	; (800b150 <PxMessagingTask+0xf80>)
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	2b10      	cmp	r3, #16
 800b02c:	d101      	bne.n	800b032 <PxMessagingTask+0xe62>
 800b02e:	f000 fc1a 	bl	800b866 <PxMessagingTask+0x1696>
								responseStatus =BOS_OK;
 800b032:	4b47      	ldr	r3, [pc, #284]	; (800b150 <PxMessagingTask+0xf80>)
 800b034:	2200      	movs	r2, #0
 800b036:	701a      	strb	r2, [r3, #0]
 800b038:	2300      	movs	r3, #0
 800b03a:	4699      	mov	r9, r3
 800b03c:	f7ff f934 	bl	800a2a8 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b040:	2b00      	cmp	r3, #0
 800b042:	d101      	bne.n	800b048 <PxMessagingTask+0xe78>
 800b044:	2a01      	cmp	r2, #1
 800b046:	d8ee      	bhi.n	800b026 <PxMessagingTask+0xe56>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b048:	2138      	movs	r1, #56	; 0x38
 800b04a:	4369      	muls	r1, r5
 800b04c:	4a37      	ldr	r2, [pc, #220]	; (800b12c <PxMessagingTask+0xf5c>)
 800b04e:	1852      	adds	r2, r2, r1
 800b050:	5d12      	ldrb	r2, [r2, r4]
 800b052:	4940      	ldr	r1, [pc, #256]	; (800b154 <PxMessagingTask+0xf84>)
 800b054:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b056:	2a08      	cmp	r2, #8
 800b058:	d8e5      	bhi.n	800b026 <PxMessagingTask+0xe56>
 800b05a:	0092      	lsls	r2, r2, #2
 800b05c:	493e      	ldr	r1, [pc, #248]	; (800b158 <PxMessagingTask+0xf88>)
 800b05e:	588a      	ldr	r2, [r1, r2]
 800b060:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b062:	4b3b      	ldr	r3, [pc, #236]	; (800b150 <PxMessagingTask+0xf80>)
 800b064:	2210      	movs	r2, #16
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	2300      	movs	r3, #0
 800b06a:	4699      	mov	r9, r3
 800b06c:	f7ff f91c 	bl	800a2a8 <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b070:	4a36      	ldr	r2, [pc, #216]	; (800b14c <PxMessagingTask+0xf7c>)
 800b072:	2038      	movs	r0, #56	; 0x38
 800b074:	4368      	muls	r0, r5
 800b076:	492d      	ldr	r1, [pc, #180]	; (800b12c <PxMessagingTask+0xf5c>)
 800b078:	1809      	adds	r1, r1, r0
 800b07a:	1909      	adds	r1, r1, r4
 800b07c:	784b      	ldrb	r3, [r1, #1]
 800b07e:	6013      	str	r3, [r2, #0]
 800b080:	2300      	movs	r3, #0
 800b082:	6053      	str	r3, [r2, #4]
										break;
 800b084:	e7cf      	b.n	800b026 <PxMessagingTask+0xe56>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b086:	4a31      	ldr	r2, [pc, #196]	; (800b14c <PxMessagingTask+0xf7c>)
 800b088:	2038      	movs	r0, #56	; 0x38
 800b08a:	4368      	muls	r0, r5
 800b08c:	4927      	ldr	r1, [pc, #156]	; (800b12c <PxMessagingTask+0xf5c>)
 800b08e:	1809      	adds	r1, r1, r0
 800b090:	1909      	adds	r1, r1, r4
 800b092:	2301      	movs	r3, #1
 800b094:	56cb      	ldrsb	r3, [r1, r3]
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	17db      	asrs	r3, r3, #31
 800b09a:	6053      	str	r3, [r2, #4]
										break;
 800b09c:	e7c3      	b.n	800b026 <PxMessagingTask+0xe56>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800b09e:	4a2b      	ldr	r2, [pc, #172]	; (800b14c <PxMessagingTask+0xf7c>)
 800b0a0:	2038      	movs	r0, #56	; 0x38
 800b0a2:	4368      	muls	r0, r5
 800b0a4:	4921      	ldr	r1, [pc, #132]	; (800b12c <PxMessagingTask+0xf5c>)
 800b0a6:	1809      	adds	r1, r1, r0
 800b0a8:	1909      	adds	r1, r1, r4
 800b0aa:	788b      	ldrb	r3, [r1, #2]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	7849      	ldrb	r1, [r1, #1]
 800b0b0:	185b      	adds	r3, r3, r1
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	17db      	asrs	r3, r3, #31
 800b0b6:	6053      	str	r3, [r2, #4]
										break;
 800b0b8:	e7b5      	b.n	800b026 <PxMessagingTask+0xe56>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b0ba:	4a24      	ldr	r2, [pc, #144]	; (800b14c <PxMessagingTask+0xf7c>)
 800b0bc:	2038      	movs	r0, #56	; 0x38
 800b0be:	4368      	muls	r0, r5
 800b0c0:	491a      	ldr	r1, [pc, #104]	; (800b12c <PxMessagingTask+0xf5c>)
 800b0c2:	1809      	adds	r1, r1, r0
 800b0c4:	1909      	adds	r1, r1, r4
 800b0c6:	788b      	ldrb	r3, [r1, #2]
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	7849      	ldrb	r1, [r1, #1]
 800b0cc:	185b      	adds	r3, r3, r1
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	17db      	asrs	r3, r3, #31
 800b0d2:	6053      	str	r3, [r2, #4]
										break;
 800b0d4:	e7a7      	b.n	800b026 <PxMessagingTask+0xe56>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b0d6:	4a1d      	ldr	r2, [pc, #116]	; (800b14c <PxMessagingTask+0xf7c>)
 800b0d8:	2038      	movs	r0, #56	; 0x38
 800b0da:	4368      	muls	r0, r5
 800b0dc:	4913      	ldr	r1, [pc, #76]	; (800b12c <PxMessagingTask+0xf5c>)
 800b0de:	1809      	adds	r1, r1, r0
 800b0e0:	1909      	adds	r1, r1, r4
 800b0e2:	788b      	ldrb	r3, [r1, #2]
 800b0e4:	021b      	lsls	r3, r3, #8
 800b0e6:	78c8      	ldrb	r0, [r1, #3]
 800b0e8:	0400      	lsls	r0, r0, #16
 800b0ea:	181b      	adds	r3, r3, r0
 800b0ec:	7848      	ldrb	r0, [r1, #1]
 800b0ee:	181b      	adds	r3, r3, r0
 800b0f0:	7909      	ldrb	r1, [r1, #4]
 800b0f2:	0609      	lsls	r1, r1, #24
 800b0f4:	185b      	adds	r3, r3, r1
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	6053      	str	r3, [r2, #4]
										break;
 800b0fc:	e793      	b.n	800b026 <PxMessagingTask+0xe56>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b0fe:	4a13      	ldr	r2, [pc, #76]	; (800b14c <PxMessagingTask+0xf7c>)
 800b100:	2038      	movs	r0, #56	; 0x38
 800b102:	4368      	muls	r0, r5
 800b104:	4909      	ldr	r1, [pc, #36]	; (800b12c <PxMessagingTask+0xf5c>)
 800b106:	1809      	adds	r1, r1, r0
 800b108:	1909      	adds	r1, r1, r4
 800b10a:	788b      	ldrb	r3, [r1, #2]
 800b10c:	021b      	lsls	r3, r3, #8
 800b10e:	7848      	ldrb	r0, [r1, #1]
 800b110:	181b      	adds	r3, r3, r0
 800b112:	78c8      	ldrb	r0, [r1, #3]
 800b114:	0400      	lsls	r0, r0, #16
 800b116:	181b      	adds	r3, r3, r0
 800b118:	7909      	ldrb	r1, [r1, #4]
 800b11a:	0609      	lsls	r1, r1, #24
 800b11c:	185b      	adds	r3, r3, r1
 800b11e:	6013      	str	r3, [r2, #0]
 800b120:	17db      	asrs	r3, r3, #31
 800b122:	6053      	str	r3, [r2, #4]
										break;
 800b124:	e77f      	b.n	800b026 <PxMessagingTask+0xe56>
 800b126:	46c0      	nop			; (mov r8, r8)
 800b128:	20000fac 	.word	0x20000fac
 800b12c:	20000d7c 	.word	0x20000d7c
 800b130:	200000ac 	.word	0x200000ac
 800b134:	0801bd0c 	.word	0x0801bd0c
 800b138:	20006ddc 	.word	0x20006ddc
 800b13c:	0801bd2c 	.word	0x0801bd2c
 800b140:	20000001 	.word	0x20000001
 800b144:	20000002 	.word	0x20000002
 800b148:	20000003 	.word	0x20000003
 800b14c:	20001180 	.word	0x20001180
 800b150:	20001188 	.word	0x20001188
 800b154:	20000098 	.word	0x20000098
 800b158:	0801bd4c 	.word	0x0801bd4c
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b15c:	4ad7      	ldr	r2, [pc, #860]	; (800b4bc <PxMessagingTask+0x12ec>)
 800b15e:	2038      	movs	r0, #56	; 0x38
 800b160:	4368      	muls	r0, r5
 800b162:	49d7      	ldr	r1, [pc, #860]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b164:	1809      	adds	r1, r1, r0
 800b166:	1909      	adds	r1, r1, r4
 800b168:	788b      	ldrb	r3, [r1, #2]
 800b16a:	021b      	lsls	r3, r3, #8
 800b16c:	78c8      	ldrb	r0, [r1, #3]
 800b16e:	0400      	lsls	r0, r0, #16
 800b170:	181b      	adds	r3, r3, r0
 800b172:	7848      	ldrb	r0, [r1, #1]
 800b174:	181b      	adds	r3, r3, r0
 800b176:	7909      	ldrb	r1, [r1, #4]
 800b178:	0609      	lsls	r1, r1, #24
 800b17a:	185b      	adds	r3, r3, r1
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	2300      	movs	r3, #0
 800b180:	6053      	str	r3, [r2, #4]
										break;
 800b182:	e750      	b.n	800b026 <PxMessagingTask+0xe56>
							responseStatus =BOS_OK; // Initialize response
 800b184:	4bcf      	ldr	r3, [pc, #828]	; (800b4c4 <PxMessagingTask+0x12f4>)
 800b186:	2200      	movs	r2, #0
 800b188:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800b18a:	46a1      	mov	r9, r4
 800b18c:	4bcc      	ldr	r3, [pc, #816]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b18e:	199b      	adds	r3, r3, r6
 800b190:	5d1b      	ldrb	r3, [r3, r4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d100      	bne.n	800b198 <PxMessagingTask+0xfc8>
 800b196:	e10b      	b.n	800b3b0 <PxMessagingTask+0x11e0>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800b198:	2b1e      	cmp	r3, #30
 800b19a:	d900      	bls.n	800b19e <PxMessagingTask+0xfce>
 800b19c:	e104      	b.n	800b3a8 <PxMessagingTask+0x11d8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800b19e:	1e5c      	subs	r4, r3, #1
 800b1a0:	00a2      	lsls	r2, r4, #2
 800b1a2:	4bc9      	ldr	r3, [pc, #804]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b1a4:	58d1      	ldr	r1, [r2, r3]
 800b1a6:	0c0b      	lsrs	r3, r1, #16
 800b1a8:	2280      	movs	r2, #128	; 0x80
 800b1aa:	0592      	lsls	r2, r2, #22
 800b1ac:	4694      	mov	ip, r2
 800b1ae:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800b1b0:	464a      	mov	r2, r9
 800b1b2:	1c57      	adds	r7, r2, #1
 800b1b4:	2038      	movs	r0, #56	; 0x38
 800b1b6:	4368      	muls	r0, r5
 800b1b8:	4ac1      	ldr	r2, [pc, #772]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b1ba:	1812      	adds	r2, r2, r0
 800b1bc:	5dd2      	ldrb	r2, [r2, r7]
 800b1be:	4693      	mov	fp, r2
 800b1c0:	3a01      	subs	r2, #1
 800b1c2:	b2d0      	uxtb	r0, r2
 800b1c4:	2807      	cmp	r0, #7
 800b1c6:	d81b      	bhi.n	800b200 <PxMessagingTask+0x1030>
 800b1c8:	b2d2      	uxtb	r2, r2
 800b1ca:	0092      	lsls	r2, r2, #2
 800b1cc:	48bf      	ldr	r0, [pc, #764]	; (800b4cc <PxMessagingTask+0x12fc>)
 800b1ce:	5882      	ldr	r2, [r0, r2]
 800b1d0:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b1d2:	070a      	lsls	r2, r1, #28
 800b1d4:	d109      	bne.n	800b1ea <PxMessagingTask+0x101a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	f009 f966 	bl	80144a8 <malloc>
 800b1dc:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b1de:	d00c      	beq.n	800b1fa <PxMessagingTask+0x102a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b1e0:	00a4      	lsls	r4, r4, #2
 800b1e2:	0400      	lsls	r0, r0, #16
 800b1e4:	4458      	add	r0, fp
 800b1e6:	4ab8      	ldr	r2, [pc, #736]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b1e8:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b1ea:	2138      	movs	r1, #56	; 0x38
 800b1ec:	4369      	muls	r1, r5
 800b1ee:	4ab4      	ldr	r2, [pc, #720]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b1f0:	1852      	adds	r2, r2, r1
 800b1f2:	444a      	add	r2, r9
 800b1f4:	7892      	ldrb	r2, [r2, #2]
 800b1f6:	701a      	strb	r2, [r3, #0]
 800b1f8:	e002      	b.n	800b200 <PxMessagingTask+0x1030>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b1fa:	4bb2      	ldr	r3, [pc, #712]	; (800b4c4 <PxMessagingTask+0x12f4>)
 800b1fc:	2212      	movs	r2, #18
 800b1fe:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b200:	2338      	movs	r3, #56	; 0x38
 800b202:	436b      	muls	r3, r5
 800b204:	4aae      	ldr	r2, [pc, #696]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b206:	18d2      	adds	r2, r2, r3
 800b208:	464b      	mov	r3, r9
 800b20a:	5cd3      	ldrb	r3, [r2, r3]
 800b20c:	3b01      	subs	r3, #1
 800b20e:	0098      	lsls	r0, r3, #2
 800b210:	49ad      	ldr	r1, [pc, #692]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b212:	5841      	ldr	r1, [r0, r1]
 800b214:	5dd2      	ldrb	r2, [r2, r7]
 800b216:	200f      	movs	r0, #15
 800b218:	4008      	ands	r0, r1
 800b21a:	4290      	cmp	r0, r2
 800b21c:	d009      	beq.n	800b232 <PxMessagingTask+0x1062>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	48ab      	ldr	r0, [pc, #684]	; (800b4d0 <PxMessagingTask+0x1300>)
 800b222:	4684      	mov	ip, r0
 800b224:	4462      	add	r2, ip
 800b226:	400a      	ands	r2, r1
 800b228:	49a7      	ldr	r1, [pc, #668]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b22a:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b22c:	4ba5      	ldr	r3, [pc, #660]	; (800b4c4 <PxMessagingTask+0x12f4>)
 800b22e:	2214      	movs	r2, #20
 800b230:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800b232:	4ba8      	ldr	r3, [pc, #672]	; (800b4d4 <PxMessagingTask+0x1304>)
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2240      	movs	r2, #64	; 0x40
 800b238:	4393      	bics	r3, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	4691      	mov	r9, r2
 800b23e:	2b20      	cmp	r3, #32
 800b240:	d001      	beq.n	800b246 <PxMessagingTask+0x1076>
 800b242:	f7ff f831 	bl	800a2a8 <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 800b246:	4b9f      	ldr	r3, [pc, #636]	; (800b4c4 <PxMessagingTask+0x12f4>)
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	4ba3      	ldr	r3, [pc, #652]	; (800b4d8 <PxMessagingTask+0x1308>)
 800b24c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b24e:	2201      	movs	r2, #1
 800b250:	2121      	movs	r1, #33	; 0x21
 800b252:	9804      	ldr	r0, [sp, #16]
 800b254:	f7fe fca2 	bl	8009b9c <SendMessageToModule>
 800b258:	f7ff f826 	bl	800a2a8 <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b25c:	070a      	lsls	r2, r1, #28
 800b25e:	d10a      	bne.n	800b276 <PxMessagingTask+0x10a6>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b260:	2001      	movs	r0, #1
 800b262:	f009 f921 	bl	80144a8 <malloc>
 800b266:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b268:	d100      	bne.n	800b26c <PxMessagingTask+0x109c>
 800b26a:	e37b      	b.n	800b964 <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b26c:	00a4      	lsls	r4, r4, #2
 800b26e:	0400      	lsls	r0, r0, #16
 800b270:	3002      	adds	r0, #2
 800b272:	4a95      	ldr	r2, [pc, #596]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b274:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b276:	2138      	movs	r1, #56	; 0x38
 800b278:	4369      	muls	r1, r5
 800b27a:	4a91      	ldr	r2, [pc, #580]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b27c:	1852      	adds	r2, r2, r1
 800b27e:	444a      	add	r2, r9
 800b280:	7892      	ldrb	r2, [r2, #2]
 800b282:	b252      	sxtb	r2, r2
 800b284:	701a      	strb	r2, [r3, #0]
 800b286:	e7bb      	b.n	800b200 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b288:	070a      	lsls	r2, r1, #28
 800b28a:	d10a      	bne.n	800b2a2 <PxMessagingTask+0x10d2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b28c:	2002      	movs	r0, #2
 800b28e:	f009 f90b 	bl	80144a8 <malloc>
 800b292:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b294:	d100      	bne.n	800b298 <PxMessagingTask+0x10c8>
 800b296:	e365      	b.n	800b964 <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b298:	00a4      	lsls	r4, r4, #2
 800b29a:	0400      	lsls	r0, r0, #16
 800b29c:	3003      	adds	r0, #3
 800b29e:	4a8a      	ldr	r2, [pc, #552]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b2a0:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b2a2:	2138      	movs	r1, #56	; 0x38
 800b2a4:	4369      	muls	r1, r5
 800b2a6:	4a86      	ldr	r2, [pc, #536]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b2a8:	1852      	adds	r2, r2, r1
 800b2aa:	444a      	add	r2, r9
 800b2ac:	78d1      	ldrb	r1, [r2, #3]
 800b2ae:	0209      	lsls	r1, r1, #8
 800b2b0:	7892      	ldrb	r2, [r2, #2]
 800b2b2:	1852      	adds	r2, r2, r1
 800b2b4:	b292      	uxth	r2, r2
 800b2b6:	801a      	strh	r2, [r3, #0]
 800b2b8:	e7a2      	b.n	800b200 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2ba:	070a      	lsls	r2, r1, #28
 800b2bc:	d10a      	bne.n	800b2d4 <PxMessagingTask+0x1104>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b2be:	2002      	movs	r0, #2
 800b2c0:	f009 f8f2 	bl	80144a8 <malloc>
 800b2c4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2c6:	d100      	bne.n	800b2ca <PxMessagingTask+0x10fa>
 800b2c8:	e34c      	b.n	800b964 <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b2ca:	00a4      	lsls	r4, r4, #2
 800b2cc:	0400      	lsls	r0, r0, #16
 800b2ce:	3004      	adds	r0, #4
 800b2d0:	4a7d      	ldr	r2, [pc, #500]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b2d2:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b2d4:	2138      	movs	r1, #56	; 0x38
 800b2d6:	4369      	muls	r1, r5
 800b2d8:	4a79      	ldr	r2, [pc, #484]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b2da:	1852      	adds	r2, r2, r1
 800b2dc:	444a      	add	r2, r9
 800b2de:	78d1      	ldrb	r1, [r2, #3]
 800b2e0:	0209      	lsls	r1, r1, #8
 800b2e2:	7892      	ldrb	r2, [r2, #2]
 800b2e4:	1852      	adds	r2, r2, r1
 800b2e6:	b212      	sxth	r2, r2
 800b2e8:	801a      	strh	r2, [r3, #0]
 800b2ea:	e789      	b.n	800b200 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2ec:	070a      	lsls	r2, r1, #28
 800b2ee:	d10a      	bne.n	800b306 <PxMessagingTask+0x1136>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b2f0:	2004      	movs	r0, #4
 800b2f2:	f009 f8d9 	bl	80144a8 <malloc>
 800b2f6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2f8:	d100      	bne.n	800b2fc <PxMessagingTask+0x112c>
 800b2fa:	e333      	b.n	800b964 <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b2fc:	00a4      	lsls	r4, r4, #2
 800b2fe:	0400      	lsls	r0, r0, #16
 800b300:	3005      	adds	r0, #5
 800b302:	4a71      	ldr	r2, [pc, #452]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b304:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b306:	2238      	movs	r2, #56	; 0x38
 800b308:	436a      	muls	r2, r5
 800b30a:	496d      	ldr	r1, [pc, #436]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b30c:	1889      	adds	r1, r1, r2
 800b30e:	4449      	add	r1, r9
 800b310:	78ca      	ldrb	r2, [r1, #3]
 800b312:	0212      	lsls	r2, r2, #8
 800b314:	7908      	ldrb	r0, [r1, #4]
 800b316:	0400      	lsls	r0, r0, #16
 800b318:	1812      	adds	r2, r2, r0
 800b31a:	7888      	ldrb	r0, [r1, #2]
 800b31c:	1812      	adds	r2, r2, r0
 800b31e:	7949      	ldrb	r1, [r1, #5]
 800b320:	0609      	lsls	r1, r1, #24
 800b322:	1852      	adds	r2, r2, r1
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	e76b      	b.n	800b200 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b328:	070a      	lsls	r2, r1, #28
 800b32a:	d10a      	bne.n	800b342 <PxMessagingTask+0x1172>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b32c:	2004      	movs	r0, #4
 800b32e:	f009 f8bb 	bl	80144a8 <malloc>
 800b332:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b334:	d100      	bne.n	800b338 <PxMessagingTask+0x1168>
 800b336:	e315      	b.n	800b964 <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b338:	00a4      	lsls	r4, r4, #2
 800b33a:	0400      	lsls	r0, r0, #16
 800b33c:	3006      	adds	r0, #6
 800b33e:	4a62      	ldr	r2, [pc, #392]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b340:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b342:	2238      	movs	r2, #56	; 0x38
 800b344:	436a      	muls	r2, r5
 800b346:	495e      	ldr	r1, [pc, #376]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b348:	1889      	adds	r1, r1, r2
 800b34a:	4449      	add	r1, r9
 800b34c:	78ca      	ldrb	r2, [r1, #3]
 800b34e:	0212      	lsls	r2, r2, #8
 800b350:	7888      	ldrb	r0, [r1, #2]
 800b352:	1812      	adds	r2, r2, r0
 800b354:	7908      	ldrb	r0, [r1, #4]
 800b356:	0400      	lsls	r0, r0, #16
 800b358:	1812      	adds	r2, r2, r0
 800b35a:	7949      	ldrb	r1, [r1, #5]
 800b35c:	0609      	lsls	r1, r1, #24
 800b35e:	1852      	adds	r2, r2, r1
 800b360:	601a      	str	r2, [r3, #0]
 800b362:	e74d      	b.n	800b200 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b364:	070a      	lsls	r2, r1, #28
 800b366:	d10a      	bne.n	800b37e <PxMessagingTask+0x11ae>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b368:	2004      	movs	r0, #4
 800b36a:	f009 f89d 	bl	80144a8 <malloc>
 800b36e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b370:	d100      	bne.n	800b374 <PxMessagingTask+0x11a4>
 800b372:	e2f7      	b.n	800b964 <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b374:	00a4      	lsls	r4, r4, #2
 800b376:	0400      	lsls	r0, r0, #16
 800b378:	3007      	adds	r0, #7
 800b37a:	4a53      	ldr	r2, [pc, #332]	; (800b4c8 <PxMessagingTask+0x12f8>)
 800b37c:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b37e:	2238      	movs	r2, #56	; 0x38
 800b380:	436a      	muls	r2, r5
 800b382:	494f      	ldr	r1, [pc, #316]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b384:	1889      	adds	r1, r1, r2
 800b386:	4449      	add	r1, r9
 800b388:	78ca      	ldrb	r2, [r1, #3]
 800b38a:	0212      	lsls	r2, r2, #8
 800b38c:	7908      	ldrb	r0, [r1, #4]
 800b38e:	0400      	lsls	r0, r0, #16
 800b390:	1812      	adds	r2, r2, r0
 800b392:	7888      	ldrb	r0, [r1, #2]
 800b394:	1812      	adds	r2, r2, r0
 800b396:	7949      	ldrb	r1, [r1, #5]
 800b398:	0609      	lsls	r1, r1, #24
 800b39a:	1852      	adds	r2, r2, r1
 800b39c:	4947      	ldr	r1, [pc, #284]	; (800b4bc <PxMessagingTask+0x12ec>)
 800b39e:	600a      	str	r2, [r1, #0]
 800b3a0:	2000      	movs	r0, #0
 800b3a2:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b3a4:	601a      	str	r2, [r3, #0]
 800b3a6:	e72b      	b.n	800b200 <PxMessagingTask+0x1030>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b3a8:	4b46      	ldr	r3, [pc, #280]	; (800b4c4 <PxMessagingTask+0x12f4>)
 800b3aa:	2213      	movs	r2, #19
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	e740      	b.n	800b232 <PxMessagingTask+0x1062>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b3b0:	2238      	movs	r2, #56	; 0x38
 800b3b2:	436a      	muls	r2, r5
 800b3b4:	4b42      	ldr	r3, [pc, #264]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b3b6:	189b      	adds	r3, r3, r2
 800b3b8:	191b      	adds	r3, r3, r4
 800b3ba:	789c      	ldrb	r4, [r3, #2]
 800b3bc:	0624      	lsls	r4, r4, #24
 800b3be:	78da      	ldrb	r2, [r3, #3]
 800b3c0:	0412      	lsls	r2, r2, #16
 800b3c2:	18a4      	adds	r4, r4, r2
 800b3c4:	795a      	ldrb	r2, [r3, #5]
 800b3c6:	18a4      	adds	r4, r4, r2
 800b3c8:	791b      	ldrb	r3, [r3, #4]
 800b3ca:	021b      	lsls	r3, r3, #8
 800b3cc:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b3ce:	23e0      	movs	r3, #224	; 0xe0
 800b3d0:	061b      	lsls	r3, r3, #24
 800b3d2:	18e2      	adds	r2, r4, r3
 800b3d4:	4b41      	ldr	r3, [pc, #260]	; (800b4dc <PxMessagingTask+0x130c>)
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d900      	bls.n	800b3dc <PxMessagingTask+0x120c>
 800b3da:	e083      	b.n	800b4e4 <PxMessagingTask+0x1314>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b3dc:	2238      	movs	r2, #56	; 0x38
 800b3de:	436a      	muls	r2, r5
 800b3e0:	4b37      	ldr	r3, [pc, #220]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b3e2:	189b      	adds	r3, r3, r2
 800b3e4:	444b      	add	r3, r9
 800b3e6:	785b      	ldrb	r3, [r3, #1]
 800b3e8:	3b01      	subs	r3, #1
 800b3ea:	b2da      	uxtb	r2, r3
 800b3ec:	2a07      	cmp	r2, #7
 800b3ee:	d900      	bls.n	800b3f2 <PxMessagingTask+0x1222>
 800b3f0:	e71f      	b.n	800b232 <PxMessagingTask+0x1062>
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	4a3a      	ldr	r2, [pc, #232]	; (800b4e0 <PxMessagingTask+0x1310>)
 800b3f8:	58d3      	ldr	r3, [r2, r3]
 800b3fa:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b3fc:	2238      	movs	r2, #56	; 0x38
 800b3fe:	436a      	muls	r2, r5
 800b400:	4b2f      	ldr	r3, [pc, #188]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b402:	189b      	adds	r3, r3, r2
 800b404:	444b      	add	r3, r9
 800b406:	799b      	ldrb	r3, [r3, #6]
 800b408:	7023      	strb	r3, [r4, #0]
											break;
 800b40a:	e712      	b.n	800b232 <PxMessagingTask+0x1062>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b40c:	2238      	movs	r2, #56	; 0x38
 800b40e:	436a      	muls	r2, r5
 800b410:	4b2b      	ldr	r3, [pc, #172]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b412:	189b      	adds	r3, r3, r2
 800b414:	444b      	add	r3, r9
 800b416:	799b      	ldrb	r3, [r3, #6]
 800b418:	b25b      	sxtb	r3, r3
 800b41a:	7023      	strb	r3, [r4, #0]
											break;
 800b41c:	e709      	b.n	800b232 <PxMessagingTask+0x1062>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b41e:	2238      	movs	r2, #56	; 0x38
 800b420:	436a      	muls	r2, r5
 800b422:	4b27      	ldr	r3, [pc, #156]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b424:	189b      	adds	r3, r3, r2
 800b426:	444b      	add	r3, r9
 800b428:	79da      	ldrb	r2, [r3, #7]
 800b42a:	0212      	lsls	r2, r2, #8
 800b42c:	799b      	ldrb	r3, [r3, #6]
 800b42e:	189b      	adds	r3, r3, r2
 800b430:	b29b      	uxth	r3, r3
 800b432:	8023      	strh	r3, [r4, #0]
											break;
 800b434:	e6fd      	b.n	800b232 <PxMessagingTask+0x1062>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b436:	2238      	movs	r2, #56	; 0x38
 800b438:	436a      	muls	r2, r5
 800b43a:	4b21      	ldr	r3, [pc, #132]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b43c:	189b      	adds	r3, r3, r2
 800b43e:	444b      	add	r3, r9
 800b440:	79da      	ldrb	r2, [r3, #7]
 800b442:	0212      	lsls	r2, r2, #8
 800b444:	799b      	ldrb	r3, [r3, #6]
 800b446:	189b      	adds	r3, r3, r2
 800b448:	b21b      	sxth	r3, r3
 800b44a:	8023      	strh	r3, [r4, #0]
											break;
 800b44c:	e6f1      	b.n	800b232 <PxMessagingTask+0x1062>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b44e:	2338      	movs	r3, #56	; 0x38
 800b450:	436b      	muls	r3, r5
 800b452:	4a1b      	ldr	r2, [pc, #108]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b454:	18d2      	adds	r2, r2, r3
 800b456:	444a      	add	r2, r9
 800b458:	79d3      	ldrb	r3, [r2, #7]
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	7a11      	ldrb	r1, [r2, #8]
 800b45e:	0409      	lsls	r1, r1, #16
 800b460:	185b      	adds	r3, r3, r1
 800b462:	7991      	ldrb	r1, [r2, #6]
 800b464:	185b      	adds	r3, r3, r1
 800b466:	7a52      	ldrb	r2, [r2, #9]
 800b468:	0612      	lsls	r2, r2, #24
 800b46a:	189b      	adds	r3, r3, r2
 800b46c:	6023      	str	r3, [r4, #0]
											break;
 800b46e:	e6e0      	b.n	800b232 <PxMessagingTask+0x1062>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b470:	2338      	movs	r3, #56	; 0x38
 800b472:	436b      	muls	r3, r5
 800b474:	4a12      	ldr	r2, [pc, #72]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b476:	18d2      	adds	r2, r2, r3
 800b478:	444a      	add	r2, r9
 800b47a:	79d3      	ldrb	r3, [r2, #7]
 800b47c:	021b      	lsls	r3, r3, #8
 800b47e:	7991      	ldrb	r1, [r2, #6]
 800b480:	185b      	adds	r3, r3, r1
 800b482:	7a11      	ldrb	r1, [r2, #8]
 800b484:	0409      	lsls	r1, r1, #16
 800b486:	185b      	adds	r3, r3, r1
 800b488:	7a52      	ldrb	r2, [r2, #9]
 800b48a:	0612      	lsls	r2, r2, #24
 800b48c:	189b      	adds	r3, r3, r2
 800b48e:	6023      	str	r3, [r4, #0]
											break;
 800b490:	e6cf      	b.n	800b232 <PxMessagingTask+0x1062>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b492:	2338      	movs	r3, #56	; 0x38
 800b494:	436b      	muls	r3, r5
 800b496:	4a0a      	ldr	r2, [pc, #40]	; (800b4c0 <PxMessagingTask+0x12f0>)
 800b498:	18d2      	adds	r2, r2, r3
 800b49a:	444a      	add	r2, r9
 800b49c:	79d3      	ldrb	r3, [r2, #7]
 800b49e:	021b      	lsls	r3, r3, #8
 800b4a0:	7a11      	ldrb	r1, [r2, #8]
 800b4a2:	0409      	lsls	r1, r1, #16
 800b4a4:	185b      	adds	r3, r3, r1
 800b4a6:	7991      	ldrb	r1, [r2, #6]
 800b4a8:	185b      	adds	r3, r3, r1
 800b4aa:	7a52      	ldrb	r2, [r2, #9]
 800b4ac:	0612      	lsls	r2, r2, #24
 800b4ae:	189b      	adds	r3, r3, r2
 800b4b0:	4a02      	ldr	r2, [pc, #8]	; (800b4bc <PxMessagingTask+0x12ec>)
 800b4b2:	6013      	str	r3, [r2, #0]
 800b4b4:	2100      	movs	r1, #0
 800b4b6:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b4b8:	6023      	str	r3, [r4, #0]
											break;
 800b4ba:	e6ba      	b.n	800b232 <PxMessagingTask+0x1062>
 800b4bc:	20001180 	.word	0x20001180
 800b4c0:	20000d7c 	.word	0x20000d7c
 800b4c4:	20001188 	.word	0x20001188
 800b4c8:	20006ddc 	.word	0x20006ddc
 800b4cc:	0801bd70 	.word	0x0801bd70
 800b4d0:	0000fff0 	.word	0x0000fff0
 800b4d4:	20006dd4 	.word	0x20006dd4
 800b4d8:	20000fac 	.word	0x20000fac
 800b4dc:	00007fff 	.word	0x00007fff
 800b4e0:	0801bd90 	.word	0x0801bd90
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b4e4:	4ae2      	ldr	r2, [pc, #904]	; (800b870 <PxMessagingTask+0x16a0>)
 800b4e6:	23f8      	movs	r3, #248	; 0xf8
 800b4e8:	061b      	lsls	r3, r3, #24
 800b4ea:	18e3      	adds	r3, r4, r3
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d900      	bls.n	800b4f2 <PxMessagingTask+0x1322>
 800b4f0:	e0a6      	b.n	800b640 <PxMessagingTask+0x1470>
									HAL_FLASH_Unlock();
 800b4f2:	f006 fcc3 	bl	8011e7c <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b4f6:	2f22      	cmp	r7, #34	; 0x22
 800b4f8:	d111      	bne.n	800b51e <PxMessagingTask+0x134e>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800b4fe:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800b500:	3301      	adds	r3, #1
 800b502:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b504:	a912      	add	r1, sp, #72	; 0x48
 800b506:	a813      	add	r0, sp, #76	; 0x4c
 800b508:	f006 fd8c 	bl	8012024 <HAL_FLASHEx_Erase>
 800b50c:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b50e:	2800      	cmp	r0, #0
 800b510:	d102      	bne.n	800b518 <PxMessagingTask+0x1348>
 800b512:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b514:	3301      	adds	r3, #1
 800b516:	d002      	beq.n	800b51e <PxMessagingTask+0x134e>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b518:	4bd6      	ldr	r3, [pc, #856]	; (800b874 <PxMessagingTask+0x16a4>)
 800b51a:	2216      	movs	r2, #22
 800b51c:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800b51e:	4bd5      	ldr	r3, [pc, #852]	; (800b874 <PxMessagingTask+0x16a4>)
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d116      	bne.n	800b554 <PxMessagingTask+0x1384>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b526:	2238      	movs	r2, #56	; 0x38
 800b528:	436a      	muls	r2, r5
 800b52a:	4bd3      	ldr	r3, [pc, #844]	; (800b878 <PxMessagingTask+0x16a8>)
 800b52c:	189b      	adds	r3, r3, r2
 800b52e:	444b      	add	r3, r9
 800b530:	785b      	ldrb	r3, [r3, #1]
 800b532:	3b01      	subs	r3, #1
 800b534:	b2da      	uxtb	r2, r3
 800b536:	2a07      	cmp	r2, #7
 800b538:	d80c      	bhi.n	800b554 <PxMessagingTask+0x1384>
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4acf      	ldr	r2, [pc, #828]	; (800b87c <PxMessagingTask+0x16ac>)
 800b540:	58d3      	ldr	r3, [r2, r3]
 800b542:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b544:	8823      	ldrh	r3, [r4, #0]
 800b546:	b29b      	uxth	r3, r3
 800b548:	4acd      	ldr	r2, [pc, #820]	; (800b880 <PxMessagingTask+0x16b0>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d00c      	beq.n	800b568 <PxMessagingTask+0x1398>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b54e:	4bc9      	ldr	r3, [pc, #804]	; (800b874 <PxMessagingTask+0x16a4>)
 800b550:	2216      	movs	r2, #22
 800b552:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b554:	f006 fca4 	bl	8011ea0 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d100      	bne.n	800b560 <PxMessagingTask+0x1390>
 800b55e:	e668      	b.n	800b232 <PxMessagingTask+0x1062>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b560:	4bc4      	ldr	r3, [pc, #784]	; (800b874 <PxMessagingTask+0x16a4>)
 800b562:	2216      	movs	r2, #22
 800b564:	701a      	strb	r2, [r3, #0]
 800b566:	e664      	b.n	800b232 <PxMessagingTask+0x1062>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b568:	2238      	movs	r2, #56	; 0x38
 800b56a:	436a      	muls	r2, r5
 800b56c:	4bc2      	ldr	r3, [pc, #776]	; (800b878 <PxMessagingTask+0x16a8>)
 800b56e:	189b      	adds	r3, r3, r2
 800b570:	444b      	add	r3, r9
 800b572:	799a      	ldrb	r2, [r3, #6]
 800b574:	2300      	movs	r3, #0
 800b576:	49c3      	ldr	r1, [pc, #780]	; (800b884 <PxMessagingTask+0x16b4>)
 800b578:	600a      	str	r2, [r1, #0]
 800b57a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b57c:	0021      	movs	r1, r4
 800b57e:	2001      	movs	r0, #1
 800b580:	f006 fcc6 	bl	8011f10 <HAL_FLASH_Program>
 800b584:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b586:	e7e5      	b.n	800b554 <PxMessagingTask+0x1384>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b588:	8823      	ldrh	r3, [r4, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	4abc      	ldr	r2, [pc, #752]	; (800b880 <PxMessagingTask+0x16b0>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d003      	beq.n	800b59a <PxMessagingTask+0x13ca>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b592:	4bb8      	ldr	r3, [pc, #736]	; (800b874 <PxMessagingTask+0x16a4>)
 800b594:	2216      	movs	r2, #22
 800b596:	701a      	strb	r2, [r3, #0]
													break;
 800b598:	e7dc      	b.n	800b554 <PxMessagingTask+0x1384>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b59a:	2238      	movs	r2, #56	; 0x38
 800b59c:	436a      	muls	r2, r5
 800b59e:	4bb6      	ldr	r3, [pc, #728]	; (800b878 <PxMessagingTask+0x16a8>)
 800b5a0:	189b      	adds	r3, r3, r2
 800b5a2:	444b      	add	r3, r9
 800b5a4:	79da      	ldrb	r2, [r3, #7]
 800b5a6:	0212      	lsls	r2, r2, #8
 800b5a8:	799b      	ldrb	r3, [r3, #6]
 800b5aa:	18d2      	adds	r2, r2, r3
 800b5ac:	17d3      	asrs	r3, r2, #31
 800b5ae:	49b5      	ldr	r1, [pc, #724]	; (800b884 <PxMessagingTask+0x16b4>)
 800b5b0:	600a      	str	r2, [r1, #0]
 800b5b2:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b5b4:	0021      	movs	r1, r4
 800b5b6:	2001      	movs	r0, #1
 800b5b8:	f006 fcaa 	bl	8011f10 <HAL_FLASH_Program>
 800b5bc:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b5be:	e7c9      	b.n	800b554 <PxMessagingTask+0x1384>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	3301      	adds	r3, #1
 800b5c4:	d003      	beq.n	800b5ce <PxMessagingTask+0x13fe>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5c6:	4bab      	ldr	r3, [pc, #684]	; (800b874 <PxMessagingTask+0x16a4>)
 800b5c8:	2216      	movs	r2, #22
 800b5ca:	701a      	strb	r2, [r3, #0]
													break;
 800b5cc:	e7c2      	b.n	800b554 <PxMessagingTask+0x1384>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b5ce:	2238      	movs	r2, #56	; 0x38
 800b5d0:	436a      	muls	r2, r5
 800b5d2:	4ba9      	ldr	r3, [pc, #676]	; (800b878 <PxMessagingTask+0x16a8>)
 800b5d4:	189b      	adds	r3, r3, r2
 800b5d6:	444b      	add	r3, r9
 800b5d8:	79da      	ldrb	r2, [r3, #7]
 800b5da:	0212      	lsls	r2, r2, #8
 800b5dc:	7a19      	ldrb	r1, [r3, #8]
 800b5de:	0409      	lsls	r1, r1, #16
 800b5e0:	1852      	adds	r2, r2, r1
 800b5e2:	7999      	ldrb	r1, [r3, #6]
 800b5e4:	1852      	adds	r2, r2, r1
 800b5e6:	7a5b      	ldrb	r3, [r3, #9]
 800b5e8:	061b      	lsls	r3, r3, #24
 800b5ea:	18d2      	adds	r2, r2, r3
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	49a5      	ldr	r1, [pc, #660]	; (800b884 <PxMessagingTask+0x16b4>)
 800b5f0:	600a      	str	r2, [r1, #0]
 800b5f2:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b5f4:	0021      	movs	r1, r4
 800b5f6:	2002      	movs	r0, #2
 800b5f8:	f006 fc8a 	bl	8011f10 <HAL_FLASH_Program>
 800b5fc:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b5fe:	e7a9      	b.n	800b554 <PxMessagingTask+0x1384>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	3301      	adds	r3, #1
 800b604:	d003      	beq.n	800b60e <PxMessagingTask+0x143e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b606:	4b9b      	ldr	r3, [pc, #620]	; (800b874 <PxMessagingTask+0x16a4>)
 800b608:	2216      	movs	r2, #22
 800b60a:	701a      	strb	r2, [r3, #0]
													break;
 800b60c:	e7a2      	b.n	800b554 <PxMessagingTask+0x1384>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b60e:	2238      	movs	r2, #56	; 0x38
 800b610:	436a      	muls	r2, r5
 800b612:	4b99      	ldr	r3, [pc, #612]	; (800b878 <PxMessagingTask+0x16a8>)
 800b614:	189b      	adds	r3, r3, r2
 800b616:	444b      	add	r3, r9
 800b618:	79da      	ldrb	r2, [r3, #7]
 800b61a:	0212      	lsls	r2, r2, #8
 800b61c:	7a19      	ldrb	r1, [r3, #8]
 800b61e:	0409      	lsls	r1, r1, #16
 800b620:	1852      	adds	r2, r2, r1
 800b622:	7999      	ldrb	r1, [r3, #6]
 800b624:	1852      	adds	r2, r2, r1
 800b626:	7a5b      	ldrb	r3, [r3, #9]
 800b628:	061b      	lsls	r3, r3, #24
 800b62a:	18d2      	adds	r2, r2, r3
 800b62c:	2300      	movs	r3, #0
 800b62e:	4995      	ldr	r1, [pc, #596]	; (800b884 <PxMessagingTask+0x16b4>)
 800b630:	600a      	str	r2, [r1, #0]
 800b632:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b634:	0021      	movs	r1, r4
 800b636:	2003      	movs	r0, #3
 800b638:	f006 fc6a 	bl	8011f10 <HAL_FLASH_Program>
 800b63c:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b63e:	e789      	b.n	800b554 <PxMessagingTask+0x1384>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b640:	4b8c      	ldr	r3, [pc, #560]	; (800b874 <PxMessagingTask+0x16a4>)
 800b642:	2215      	movs	r2, #21
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	e5f4      	b.n	800b232 <PxMessagingTask+0x1062>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b648:	4b8b      	ldr	r3, [pc, #556]	; (800b878 <PxMessagingTask+0x16a8>)
 800b64a:	199b      	adds	r3, r3, r6
 800b64c:	5d1a      	ldrb	r2, [r3, r4]
 800b64e:	4b89      	ldr	r3, [pc, #548]	; (800b874 <PxMessagingTask+0x16a4>)
 800b650:	701a      	strb	r2, [r3, #0]
							break;
 800b652:	2300      	movs	r3, #0
 800b654:	4699      	mov	r9, r3
 800b656:	f7fe fe27 	bl	800a2a8 <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b65a:	9a06      	ldr	r2, [sp, #24]
 800b65c:	3a01      	subs	r2, #1
 800b65e:	b292      	uxth	r2, r2
 800b660:	1c61      	adds	r1, r4, #1
 800b662:	4451      	add	r1, sl
 800b664:	4b84      	ldr	r3, [pc, #528]	; (800b878 <PxMessagingTask+0x16a8>)
 800b666:	18c9      	adds	r1, r1, r3
 800b668:	199b      	adds	r3, r3, r6
 800b66a:	5d18      	ldrb	r0, [r3, r4]
 800b66c:	230a      	movs	r3, #10
 800b66e:	9300      	str	r3, [sp, #0]
 800b670:	f003 f938 	bl	800e8e4 <writePxMutex>
							break;
 800b674:	2300      	movs	r3, #0
 800b676:	4699      	mov	r9, r3
 800b678:	f7fe fe16 	bl	800a2a8 <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 800b67c:	0027      	movs	r7, r4
 800b67e:	4b7e      	ldr	r3, [pc, #504]	; (800b878 <PxMessagingTask+0x16a8>)
 800b680:	199b      	adds	r3, r3, r6
 800b682:	5d18      	ldrb	r0, [r3, r4]
 800b684:	282b      	cmp	r0, #43	; 0x2b
 800b686:	d900      	bls.n	800b68a <PxMessagingTask+0x14ba>
 800b688:	e09e      	b.n	800b7c8 <PxMessagingTask+0x15f8>
 800b68a:	0083      	lsls	r3, r0, #2
 800b68c:	4a7e      	ldr	r2, [pc, #504]	; (800b888 <PxMessagingTask+0x16b8>)
 800b68e:	58d3      	ldr	r3, [r2, r3]
 800b690:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b692:	2238      	movs	r2, #56	; 0x38
 800b694:	436a      	muls	r2, r5
 800b696:	4b78      	ldr	r3, [pc, #480]	; (800b878 <PxMessagingTask+0x16a8>)
 800b698:	189b      	adds	r3, r3, r2
 800b69a:	191f      	adds	r7, r3, r4
 800b69c:	78bb      	ldrb	r3, [r7, #2]
 800b69e:	021b      	lsls	r3, r3, #8
 800b6a0:	78fa      	ldrb	r2, [r7, #3]
 800b6a2:	0412      	lsls	r2, r2, #16
 800b6a4:	189b      	adds	r3, r3, r2
 800b6a6:	787a      	ldrb	r2, [r7, #1]
 800b6a8:	189b      	adds	r3, r3, r2
 800b6aa:	793a      	ldrb	r2, [r7, #4]
 800b6ac:	0612      	lsls	r2, r2, #24
 800b6ae:	189b      	adds	r3, r3, r2
 800b6b0:	4a76      	ldr	r2, [pc, #472]	; (800b88c <PxMessagingTask+0x16bc>)
 800b6b2:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b6b4:	79bb      	ldrb	r3, [r7, #6]
 800b6b6:	021b      	lsls	r3, r3, #8
 800b6b8:	79f9      	ldrb	r1, [r7, #7]
 800b6ba:	0409      	lsls	r1, r1, #16
 800b6bc:	185b      	adds	r3, r3, r1
 800b6be:	7979      	ldrb	r1, [r7, #5]
 800b6c0:	185b      	adds	r3, r3, r1
 800b6c2:	7a39      	ldrb	r1, [r7, #8]
 800b6c4:	0609      	lsls	r1, r1, #24
 800b6c6:	185b      	adds	r3, r3, r1
 800b6c8:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b6ca:	7abb      	ldrb	r3, [r7, #10]
 800b6cc:	021b      	lsls	r3, r3, #8
 800b6ce:	7af9      	ldrb	r1, [r7, #11]
 800b6d0:	0409      	lsls	r1, r1, #16
 800b6d2:	185b      	adds	r3, r3, r1
 800b6d4:	7a79      	ldrb	r1, [r7, #9]
 800b6d6:	185b      	adds	r3, r3, r1
 800b6d8:	7b39      	ldrb	r1, [r7, #12]
 800b6da:	0609      	lsls	r1, r1, #24
 800b6dc:	185b      	adds	r3, r3, r1
 800b6de:	6093      	str	r3, [r2, #8]
									break;
 800b6e0:	e072      	b.n	800b7c8 <PxMessagingTask+0x15f8>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b6e2:	2238      	movs	r2, #56	; 0x38
 800b6e4:	436a      	muls	r2, r5
 800b6e6:	4b64      	ldr	r3, [pc, #400]	; (800b878 <PxMessagingTask+0x16a8>)
 800b6e8:	189b      	adds	r3, r3, r2
 800b6ea:	191f      	adds	r7, r3, r4
 800b6ec:	78bb      	ldrb	r3, [r7, #2]
 800b6ee:	021b      	lsls	r3, r3, #8
 800b6f0:	78fa      	ldrb	r2, [r7, #3]
 800b6f2:	0412      	lsls	r2, r2, #16
 800b6f4:	189b      	adds	r3, r3, r2
 800b6f6:	787a      	ldrb	r2, [r7, #1]
 800b6f8:	189b      	adds	r3, r3, r2
 800b6fa:	793a      	ldrb	r2, [r7, #4]
 800b6fc:	0612      	lsls	r2, r2, #24
 800b6fe:	189b      	adds	r3, r3, r2
 800b700:	4a62      	ldr	r2, [pc, #392]	; (800b88c <PxMessagingTask+0x16bc>)
 800b702:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b704:	79bb      	ldrb	r3, [r7, #6]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	79f9      	ldrb	r1, [r7, #7]
 800b70a:	0409      	lsls	r1, r1, #16
 800b70c:	185b      	adds	r3, r3, r1
 800b70e:	7979      	ldrb	r1, [r7, #5]
 800b710:	185b      	adds	r3, r3, r1
 800b712:	7a39      	ldrb	r1, [r7, #8]
 800b714:	0609      	lsls	r1, r1, #24
 800b716:	185b      	adds	r3, r3, r1
 800b718:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b71a:	7abb      	ldrb	r3, [r7, #10]
 800b71c:	021b      	lsls	r3, r3, #8
 800b71e:	7af9      	ldrb	r1, [r7, #11]
 800b720:	0409      	lsls	r1, r1, #16
 800b722:	185b      	adds	r3, r3, r1
 800b724:	7a79      	ldrb	r1, [r7, #9]
 800b726:	185b      	adds	r3, r3, r1
 800b728:	7b39      	ldrb	r1, [r7, #12]
 800b72a:	0609      	lsls	r1, r1, #24
 800b72c:	185b      	adds	r3, r3, r1
 800b72e:	6153      	str	r3, [r2, #20]
									break;
 800b730:	e04a      	b.n	800b7c8 <PxMessagingTask+0x15f8>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b732:	2338      	movs	r3, #56	; 0x38
 800b734:	436b      	muls	r3, r5
 800b736:	4a50      	ldr	r2, [pc, #320]	; (800b878 <PxMessagingTask+0x16a8>)
 800b738:	18d2      	adds	r2, r2, r3
 800b73a:	1912      	adds	r2, r2, r4
 800b73c:	7893      	ldrb	r3, [r2, #2]
 800b73e:	021b      	lsls	r3, r3, #8
 800b740:	78d1      	ldrb	r1, [r2, #3]
 800b742:	0409      	lsls	r1, r1, #16
 800b744:	185b      	adds	r3, r3, r1
 800b746:	7851      	ldrb	r1, [r2, #1]
 800b748:	185b      	adds	r3, r3, r1
 800b74a:	7912      	ldrb	r2, [r2, #4]
 800b74c:	0612      	lsls	r2, r2, #24
 800b74e:	189b      	adds	r3, r3, r2
 800b750:	4a4e      	ldr	r2, [pc, #312]	; (800b88c <PxMessagingTask+0x16bc>)
 800b752:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b754:	4b4e      	ldr	r3, [pc, #312]	; (800b890 <PxMessagingTask+0x16c0>)
 800b756:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b758:	2238      	movs	r2, #56	; 0x38
 800b75a:	436a      	muls	r2, r5
 800b75c:	4b46      	ldr	r3, [pc, #280]	; (800b878 <PxMessagingTask+0x16a8>)
 800b75e:	189b      	adds	r3, r3, r2
 800b760:	19db      	adds	r3, r3, r7
 800b762:	785b      	ldrb	r3, [r3, #1]
 800b764:	4a4b      	ldr	r2, [pc, #300]	; (800b894 <PxMessagingTask+0x16c4>)
 800b766:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d134      	bne.n	800b7d6 <PxMessagingTask+0x1606>
										ADCSelectChannel(ADCPort,"top");
 800b76c:	4c4a      	ldr	r4, [pc, #296]	; (800b898 <PxMessagingTask+0x16c8>)
 800b76e:	0021      	movs	r1, r4
 800b770:	f7fd fba6 	bl	8008ec0 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b774:	4b46      	ldr	r3, [pc, #280]	; (800b890 <PxMessagingTask+0x16c0>)
 800b776:	7818      	ldrb	r0, [r3, #0]
 800b778:	4a48      	ldr	r2, [pc, #288]	; (800b89c <PxMessagingTask+0x16cc>)
 800b77a:	0021      	movs	r1, r4
 800b77c:	f7fd fbd2 	bl	8008f24 <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b780:	4947      	ldr	r1, [pc, #284]	; (800b8a0 <PxMessagingTask+0x16d0>)
 800b782:	4848      	ldr	r0, [pc, #288]	; (800b8a4 <PxMessagingTask+0x16d4>)
 800b784:	f7fd f9fc 	bl	8008b80 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b788:	4c3b      	ldr	r4, [pc, #236]	; (800b878 <PxMessagingTask+0x16a8>)
 800b78a:	19a4      	adds	r4, r4, r6
 800b78c:	5de0      	ldrb	r0, [r4, r7]
 800b78e:	4b40      	ldr	r3, [pc, #256]	; (800b890 <PxMessagingTask+0x16c0>)
 800b790:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b792:	4945      	ldr	r1, [pc, #276]	; (800b8a8 <PxMessagingTask+0x16d8>)
 800b794:	f7fd fab2 	bl	8008cfc <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b798:	19e7      	adds	r7, r4, r7
 800b79a:	79bb      	ldrb	r3, [r7, #6]
 800b79c:	021b      	lsls	r3, r3, #8
 800b79e:	79fa      	ldrb	r2, [r7, #7]
 800b7a0:	0412      	lsls	r2, r2, #16
 800b7a2:	189b      	adds	r3, r3, r2
 800b7a4:	797a      	ldrb	r2, [r7, #5]
 800b7a6:	189b      	adds	r3, r3, r2
 800b7a8:	7a3a      	ldrb	r2, [r7, #8]
 800b7aa:	0612      	lsls	r2, r2, #24
 800b7ac:	189b      	adds	r3, r3, r2
 800b7ae:	4a37      	ldr	r2, [pc, #220]	; (800b88c <PxMessagingTask+0x16bc>)
 800b7b0:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b7b2:	7abb      	ldrb	r3, [r7, #10]
 800b7b4:	021b      	lsls	r3, r3, #8
 800b7b6:	7af9      	ldrb	r1, [r7, #11]
 800b7b8:	0409      	lsls	r1, r1, #16
 800b7ba:	185b      	adds	r3, r3, r1
 800b7bc:	7a79      	ldrb	r1, [r7, #9]
 800b7be:	185b      	adds	r3, r3, r1
 800b7c0:	7b39      	ldrb	r1, [r7, #12]
 800b7c2:	0609      	lsls	r1, r1, #24
 800b7c4:	185b      	adds	r3, r3, r1
 800b7c6:	6213      	str	r3, [r2, #32]
							ACK_FLAG =1;
 800b7c8:	4b38      	ldr	r3, [pc, #224]	; (800b8ac <PxMessagingTask+0x16dc>)
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	701a      	strb	r2, [r3, #0]
							break;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	4699      	mov	r9, r3
 800b7d2:	f7fe fd69 	bl	800a2a8 <PxMessagingTask+0xd8>
									else if(1 == ADCSide){
 800b7d6:	2b01      	cmp	r3, #1
 800b7d8:	d1d2      	bne.n	800b780 <PxMessagingTask+0x15b0>
										ADCSelectChannel(ADCPort,"bottom");
 800b7da:	4c35      	ldr	r4, [pc, #212]	; (800b8b0 <PxMessagingTask+0x16e0>)
 800b7dc:	0021      	movs	r1, r4
 800b7de:	f7fd fb6f 	bl	8008ec0 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b7e2:	4b2b      	ldr	r3, [pc, #172]	; (800b890 <PxMessagingTask+0x16c0>)
 800b7e4:	7818      	ldrb	r0, [r3, #0]
 800b7e6:	4a2d      	ldr	r2, [pc, #180]	; (800b89c <PxMessagingTask+0x16cc>)
 800b7e8:	0021      	movs	r1, r4
 800b7ea:	f7fd fb9b 	bl	8008f24 <ReadADCChannel>
 800b7ee:	e7c7      	b.n	800b780 <PxMessagingTask+0x15b0>
							rejected_FLAG =1;
 800b7f0:	4b30      	ldr	r3, [pc, #192]	; (800b8b4 <PxMessagingTask+0x16e4>)
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	701a      	strb	r2, [r3, #0]
							break;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	4699      	mov	r9, r3
 800b7fa:	f7fe fd55 	bl	800a2a8 <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b7fe:	9400      	str	r4, [sp, #0]
 800b800:	465b      	mov	r3, fp
 800b802:	9a04      	ldr	r2, [sp, #16]
 800b804:	9908      	ldr	r1, [sp, #32]
 800b806:	0038      	movs	r0, r7
 800b808:	f7fe fce0 	bl	800a1cc <User_MessagingParser>
 800b80c:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 800b80e:	2801      	cmp	r0, #1
 800b810:	d001      	beq.n	800b816 <PxMessagingTask+0x1646>
 800b812:	f7fe fd49 	bl	800a2a8 <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b816:	9400      	str	r4, [sp, #0]
 800b818:	465b      	mov	r3, fp
 800b81a:	9a04      	ldr	r2, [sp, #16]
 800b81c:	9908      	ldr	r1, [sp, #32]
 800b81e:	0038      	movs	r0, r7
 800b820:	f000 fd9c 	bl	800c35c <Module_MessagingTask>
 800b824:	4681      	mov	r9, r0
 800b826:	f7fe fd3a 	bl	800a29e <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b82a:	2300      	movs	r3, #0
 800b82c:	4699      	mov	r9, r3
 800b82e:	f7fe fd36 	bl	800a29e <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b832:	2300      	movs	r3, #0
 800b834:	4699      	mov	r9, r3
 800b836:	f7fe fd32 	bl	800a29e <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b83a:	2300      	movs	r3, #0
 800b83c:	4699      	mov	r9, r3
 800b83e:	f7fe fd2e 	bl	800a29e <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b842:	2200      	movs	r2, #0
 800b844:	2100      	movs	r1, #0
 800b846:	9804      	ldr	r0, [sp, #16]
 800b848:	f7fe f9a8 	bl	8009b9c <SendMessageToModule>
			result =BOS_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	4699      	mov	r9, r3
 800b850:	f7fe fd2a 	bl	800a2a8 <PxMessagingTask+0xd8>
					switch(code){
 800b854:	2300      	movs	r3, #0
 800b856:	4699      	mov	r9, r3
 800b858:	f7fe fd26 	bl	800a2a8 <PxMessagingTask+0xd8>
 800b85c:	9205      	str	r2, [sp, #20]
 800b85e:	2300      	movs	r3, #0
 800b860:	4699      	mov	r9, r3
 800b862:	f7fe fd21 	bl	800a2a8 <PxMessagingTask+0xd8>
 800b866:	2300      	movs	r3, #0
 800b868:	4699      	mov	r9, r3
 800b86a:	f7fe fd1d 	bl	800a2a8 <PxMessagingTask+0xd8>
 800b86e:	46c0      	nop			; (mov r8, r8)
 800b870:	0001ffff 	.word	0x0001ffff
 800b874:	20001188 	.word	0x20001188
 800b878:	20000d7c 	.word	0x20000d7c
 800b87c:	0801bdb0 	.word	0x0801bdb0
 800b880:	0000ffff 	.word	0x0000ffff
 800b884:	20001180 	.word	0x20001180
 800b888:	0801bdd0 	.word	0x0801bdd0
 800b88c:	20001a24 	.word	0x20001a24
 800b890:	20001a14 	.word	0x20001a14
 800b894:	20001a16 	.word	0x20001a16
 800b898:	08019d64 	.word	0x08019d64
 800b89c:	20001a18 	.word	0x20001a18
 800b8a0:	20001a20 	.word	0x20001a20
 800b8a4:	20001a1c 	.word	0x20001a1c
 800b8a8:	20001a10 	.word	0x20001a10
 800b8ac:	20000ae4 	.word	0x20000ae4
 800b8b0:	08019d68 	.word	0x08019d68
 800b8b4:	2000117c 	.word	0x2000117c
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b8b8:	455b      	cmp	r3, fp
 800b8ba:	d003      	beq.n	800b8c4 <PxMessagingTask+0x16f4>
 800b8bc:	2f10      	cmp	r7, #16
 800b8be:	d001      	beq.n	800b8c4 <PxMessagingTask+0x16f4>
 800b8c0:	f7fe fd4f 	bl	800a362 <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b8c4:	465b      	mov	r3, fp
 800b8c6:	2bff      	cmp	r3, #255	; 0xff
 800b8c8:	d101      	bne.n	800b8ce <PxMessagingTask+0x16fe>
 800b8ca:	f7fe fcb9 	bl	800a240 <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b8ce:	2bfe      	cmp	r3, #254	; 0xfe
 800b8d0:	d001      	beq.n	800b8d6 <PxMessagingTask+0x1706>
 800b8d2:	f7fe fce1 	bl	800a298 <PxMessagingTask+0xc8>
 800b8d6:	4b2b      	ldr	r3, [pc, #172]	; (800b984 <PxMessagingTask+0x17b4>)
 800b8d8:	5d5a      	ldrb	r2, [r3, r5]
 800b8da:	4b2b      	ldr	r3, [pc, #172]	; (800b988 <PxMessagingTask+0x17b8>)
 800b8dc:	199b      	adds	r3, r3, r6
 800b8de:	189b      	adds	r3, r3, r2
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	781b      	ldrb	r3, [r3, #0]
 800b8e4:	4a29      	ldr	r2, [pc, #164]	; (800b98c <PxMessagingTask+0x17bc>)
 800b8e6:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b8e8:	2103      	movs	r1, #3
 800b8ea:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d101      	bne.n	800b8f4 <PxMessagingTask+0x1724>
 800b8f0:	f7fe fcd5 	bl	800a29e <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b8f4:	4a25      	ldr	r2, [pc, #148]	; (800b98c <PxMessagingTask+0x17bc>)
 800b8f6:	7013      	strb	r3, [r2, #0]
 800b8f8:	4a25      	ldr	r2, [pc, #148]	; (800b990 <PxMessagingTask+0x17c0>)
 800b8fa:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b8fc:	9908      	ldr	r1, [sp, #32]
 800b8fe:	20fe      	movs	r0, #254	; 0xfe
 800b900:	f7fe f904 	bl	8009b0c <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b904:	4b1f      	ldr	r3, [pc, #124]	; (800b984 <PxMessagingTask+0x17b4>)
 800b906:	5d59      	ldrb	r1, [r3, r5]
 800b908:	4b1f      	ldr	r3, [pc, #124]	; (800b988 <PxMessagingTask+0x17b8>)
 800b90a:	199b      	adds	r3, r3, r6
 800b90c:	185a      	adds	r2, r3, r1
 800b90e:	3a01      	subs	r2, #1
 800b910:	2000      	movs	r0, #0
 800b912:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b914:	1e8a      	subs	r2, r1, #2
 800b916:	5c9c      	ldrb	r4, [r3, r2]
 800b918:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b91a:	2c00      	cmp	r4, #0
 800b91c:	d02e      	beq.n	800b97c <PxMessagingTask+0x17ac>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b91e:	1b13      	subs	r3, r2, r4
 800b920:	469c      	mov	ip, r3
 800b922:	4b1c      	ldr	r3, [pc, #112]	; (800b994 <PxMessagingTask+0x17c4>)
 800b924:	7818      	ldrb	r0, [r3, #0]
 800b926:	4b18      	ldr	r3, [pc, #96]	; (800b988 <PxMessagingTask+0x17b8>)
 800b928:	199b      	adds	r3, r3, r6
 800b92a:	4662      	mov	r2, ip
 800b92c:	5c9b      	ldrb	r3, [r3, r2]
 800b92e:	4283      	cmp	r3, r0
 800b930:	d011      	beq.n	800b956 <PxMessagingTask+0x1786>
 800b932:	4653      	mov	r3, sl
 800b934:	3301      	adds	r3, #1
 800b936:	4463      	add	r3, ip
 800b938:	4a13      	ldr	r2, [pc, #76]	; (800b988 <PxMessagingTask+0x17b8>)
 800b93a:	189b      	adds	r3, r3, r2
 800b93c:	3201      	adds	r2, #1
 800b93e:	4452      	add	r2, sl
 800b940:	3c01      	subs	r4, #1
 800b942:	b2e4      	uxtb	r4, r4
 800b944:	1912      	adds	r2, r2, r4
 800b946:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b948:	4293      	cmp	r3, r2
 800b94a:	d017      	beq.n	800b97c <PxMessagingTask+0x17ac>
 800b94c:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b94e:	1e5c      	subs	r4, r3, #1
 800b950:	7824      	ldrb	r4, [r4, #0]
 800b952:	4284      	cmp	r4, r0
 800b954:	d1f8      	bne.n	800b948 <PxMessagingTask+0x1778>
				shift +=4;
 800b956:	9c06      	ldr	r4, [sp, #24]
 800b958:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b95a:	1b0a      	subs	r2, r1, r4
 800b95c:	b2d3      	uxtb	r3, r2
 800b95e:	9306      	str	r3, [sp, #24]
 800b960:	f7fe fc92 	bl	800a288 <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b964:	2338      	movs	r3, #56	; 0x38
 800b966:	436b      	muls	r3, r5
 800b968:	4a07      	ldr	r2, [pc, #28]	; (800b988 <PxMessagingTask+0x17b8>)
 800b96a:	18d2      	adds	r2, r2, r3
 800b96c:	464b      	mov	r3, r9
 800b96e:	5cd3      	ldrb	r3, [r2, r3]
 800b970:	3b01      	subs	r3, #1
 800b972:	0098      	lsls	r0, r3, #2
 800b974:	4908      	ldr	r1, [pc, #32]	; (800b998 <PxMessagingTask+0x17c8>)
 800b976:	5841      	ldr	r1, [r0, r1]
 800b978:	5dd2      	ldrb	r2, [r2, r7]
 800b97a:	e450      	b.n	800b21e <PxMessagingTask+0x104e>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b97c:	2366      	movs	r3, #102	; 0x66
 800b97e:	4699      	mov	r9, r3
 800b980:	f7fe fc92 	bl	800a2a8 <PxMessagingTask+0xd8>
 800b984:	20000fa4 	.word	0x20000fa4
 800b988:	20000d7c 	.word	0x20000d7c
 800b98c:	20001a4a 	.word	0x20001a4a
 800b990:	20000d28 	.word	0x20000d28
 800b994:	200010ea 	.word	0x200010ea
 800b998:	20006ddc 	.word	0x20006ddc

0800b99c <StreamMemsToPort>:
	}
	return status;
}

static Module_Status StreamMemsToPort(uint8_t port, uint8_t module, uint32_t period, uint32_t timeout, SampleMemsToPort function)
{
 800b99c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	9001      	str	r0, [sp, #4]
 800b9a2:	9102      	str	r1, [sp, #8]
 800b9a4:	0016      	movs	r6, r2
 800b9a6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	Module_Status status = H0AR9_OK;


	if (period < MIN_MEMS_PERIOD_MS)
 800b9a8:	2a63      	cmp	r2, #99	; 0x63
 800b9aa:	d930      	bls.n	800ba0e <StreamMemsToPort+0x72>
		return H0AR9_ERR_WrongParams;
	if (port == 0)
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d030      	beq.n	800ba12 <StreamMemsToPort+0x76>
		return H0AR9_ERR_WrongParams;
	if (port == PcPort) // Check if CLI is not enabled at that port!
 800b9b0:	4a1a      	ldr	r2, [pc, #104]	; (800ba1c <StreamMemsToPort+0x80>)
 800b9b2:	7812      	ldrb	r2, [r2, #0]
 800b9b4:	4282      	cmp	r2, r0
 800b9b6:	d02e      	beq.n	800ba16 <StreamMemsToPort+0x7a>
 800b9b8:	9603      	str	r6, [sp, #12]
 800b9ba:	429e      	cmp	r6, r3
 800b9bc:	d200      	bcs.n	800b9c0 <StreamMemsToPort+0x24>
 800b9be:	9303      	str	r3, [sp, #12]
		return H0AR9_ERR_BUSY;

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 800b9c0:	0031      	movs	r1, r6
 800b9c2:	9803      	ldr	r0, [sp, #12]
 800b9c4:	f7f4 fbc4 	bl	8000150 <__udivsi3>
 800b9c8:	0005      	movs	r5, r0
	stopStream = false;
 800b9ca:	4b15      	ldr	r3, [pc, #84]	; (800ba20 <StreamMemsToPort+0x84>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	701a      	strb	r2, [r3, #0]

	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		function(port, module);

		vTaskDelay(pdMS_TO_TICKS(period));
 800b9d0:	0170      	lsls	r0, r6, #5
 800b9d2:	1b80      	subs	r0, r0, r6
 800b9d4:	0080      	lsls	r0, r0, #2
 800b9d6:	1980      	adds	r0, r0, r6
 800b9d8:	00c0      	lsls	r0, r0, #3
 800b9da:	21fa      	movs	r1, #250	; 0xfa
 800b9dc:	0089      	lsls	r1, r1, #2
 800b9de:	f7f4 fbb7 	bl	8000150 <__udivsi3>
 800b9e2:	0006      	movs	r6, r0
		if (stopStream) {
 800b9e4:	4f0e      	ldr	r7, [pc, #56]	; (800ba20 <StreamMemsToPort+0x84>)
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b9e6:	2d00      	cmp	r5, #0
 800b9e8:	dd0c      	ble.n	800ba04 <StreamMemsToPort+0x68>
		function(port, module);
 800b9ea:	9902      	ldr	r1, [sp, #8]
 800b9ec:	9801      	ldr	r0, [sp, #4]
 800b9ee:	47a0      	blx	r4
		vTaskDelay(pdMS_TO_TICKS(period));
 800b9f0:	0030      	movs	r0, r6
 800b9f2:	f004 f933 	bl	800fc5c <vTaskDelay>
 800b9f6:	3d01      	subs	r5, #1
		if (stopStream) {
 800b9f8:	783b      	ldrb	r3, [r7, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0f3      	beq.n	800b9e6 <StreamMemsToPort+0x4a>
			status = H0AR9_ERR_TERMINATED;
 800b9fe:	200a      	movs	r0, #10
			break;
		}
	}
	return status;
}
 800ba00:	b005      	add	sp, #20
 800ba02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800ba04:	9b03      	ldr	r3, [sp, #12]
 800ba06:	3301      	adds	r3, #1
 800ba08:	d0ef      	beq.n	800b9ea <StreamMemsToPort+0x4e>
	Module_Status status = H0AR9_OK;
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	e7f8      	b.n	800ba00 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 800ba0e:	200b      	movs	r0, #11
 800ba10:	e7f6      	b.n	800ba00 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 800ba12:	200b      	movs	r0, #11
 800ba14:	e7f4      	b.n	800ba00 <StreamMemsToPort+0x64>
		return H0AR9_ERR_BUSY;
 800ba16:	2007      	movs	r0, #7
 800ba18:	e7f2      	b.n	800ba00 <StreamMemsToPort+0x64>
 800ba1a:	46c0      	nop			; (mov r8, r8)
 800ba1c:	20000ae8 	.word	0x20000ae8
 800ba20:	20001c08 	.word	0x20001c08

0800ba24 <StreamMemsToCLI>:

static Module_Status StreamMemsToCLI(uint32_t period, uint32_t timeout, SampleMemsToString function)
{
 800ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba26:	46de      	mov	lr, fp
 800ba28:	4657      	mov	r7, sl
 800ba2a:	464e      	mov	r6, r9
 800ba2c:	4645      	mov	r5, r8
 800ba2e:	b5e0      	push	{r5, r6, r7, lr}
 800ba30:	b087      	sub	sp, #28
 800ba32:	0004      	movs	r4, r0
 800ba34:	4691      	mov	r9, r2
	Module_Status status = H0AR9_OK;
	int8_t *pcOutputString = NULL;

	if (period < MIN_MEMS_PERIOD_MS)
 800ba36:	2863      	cmp	r0, #99	; 0x63
 800ba38:	d800      	bhi.n	800ba3c <StreamMemsToCLI+0x18>
 800ba3a:	e081      	b.n	800bb40 <StreamMemsToCLI+0x11c>
 800ba3c:	9004      	str	r0, [sp, #16]
 800ba3e:	4288      	cmp	r0, r1
 800ba40:	d200      	bcs.n	800ba44 <StreamMemsToCLI+0x20>
 800ba42:	9104      	str	r1, [sp, #16]
	// TODO: Check if CLI is enable or not

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 800ba44:	0021      	movs	r1, r4
 800ba46:	9804      	ldr	r0, [sp, #16]
 800ba48:	f7f4 fb82 	bl	8000150 <__udivsi3>
 800ba4c:	0006      	movs	r6, r0
	stopStream = false;
 800ba4e:	4b3d      	ldr	r3, [pc, #244]	; (800bb44 <StreamMemsToCLI+0x120>)
 800ba50:	2200      	movs	r2, #0
 800ba52:	701a      	strb	r2, [r3, #0]
	long numDeltaDelay =  period / DELTA_SLEEP_MS;
 800ba54:	2164      	movs	r1, #100	; 0x64
 800ba56:	0020      	movs	r0, r4
 800ba58:	f7f4 fb7a 	bl	8000150 <__udivsi3>
 800ba5c:	9003      	str	r0, [sp, #12]
	unsigned lastDelayMS = period % DELTA_SLEEP_MS;
 800ba5e:	2164      	movs	r1, #100	; 0x64
 800ba60:	0020      	movs	r0, r4
 800ba62:	f7f4 fbfb 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800ba66:	0148      	lsls	r0, r1, #5
 800ba68:	1a40      	subs	r0, r0, r1
 800ba6a:	0080      	lsls	r0, r0, #2
 800ba6c:	1840      	adds	r0, r0, r1
 800ba6e:	00c0      	lsls	r0, r0, #3
 800ba70:	21fa      	movs	r1, #250	; 0xfa
 800ba72:	0089      	lsls	r1, r1, #2
 800ba74:	f7f4 fb6c 	bl	8000150 <__udivsi3>
 800ba78:	9005      	str	r0, [sp, #20]
	int8_t *pcOutputString = NULL;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9302      	str	r3, [sp, #8]
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
		function((char *)pcOutputString, 100);


		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ba7e:	4b32      	ldr	r3, [pc, #200]	; (800bb48 <StreamMemsToCLI+0x124>)
 800ba80:	469a      	mov	sl, r3
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800ba82:	4698      	mov	r8, r3
 800ba84:	4f31      	ldr	r7, [pc, #196]	; (800bb4c <StreamMemsToCLI+0x128>)
 800ba86:	46bb      	mov	fp, r7
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800ba88:	2e00      	cmp	r6, #0
 800ba8a:	dd55      	ble.n	800bb38 <StreamMemsToCLI+0x114>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800ba8c:	f003 f96c 	bl	800ed68 <FreeRTOS_CLIGetOutputBuffer>
 800ba90:	0004      	movs	r4, r0
 800ba92:	9002      	str	r0, [sp, #8]
		function((char *)pcOutputString, 100);
 800ba94:	2164      	movs	r1, #100	; 0x64
 800ba96:	47c8      	blx	r9
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ba98:	0020      	movs	r0, r4
 800ba9a:	f7f4 fb3d 	bl	8000118 <strlen>
 800ba9e:	23fa      	movs	r3, #250	; 0xfa
 800baa0:	b282      	uxth	r2, r0
 800baa2:	4651      	mov	r1, sl
 800baa4:	7808      	ldrb	r0, [r1, #0]
 800baa6:	2101      	movs	r1, #1
 800baa8:	4249      	negs	r1, r1
 800baaa:	9100      	str	r1, [sp, #0]
 800baac:	005b      	lsls	r3, r3, #1
 800baae:	0021      	movs	r1, r4
 800bab0:	f002 ff18 	bl	800e8e4 <writePxMutex>
 800bab4:	9d03      	ldr	r5, [sp, #12]
	while (numDeltaDelay-- > 0) {
 800bab6:	2d00      	cmp	r5, #0
 800bab8:	dd39      	ble.n	800bb2e <StreamMemsToCLI+0x10a>
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 800baba:	2064      	movs	r0, #100	; 0x64
 800babc:	f004 f8ce 	bl	800fc5c <vTaskDelay>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800bac0:	4643      	mov	r3, r8
 800bac2:	781c      	ldrb	r4, [r3, #0]
 800bac4:	3c01      	subs	r4, #1
 800bac6:	0063      	lsls	r3, r4, #1
 800bac8:	191b      	adds	r3, r3, r4
 800baca:	019b      	lsls	r3, r3, #6
 800bacc:	5ddb      	ldrb	r3, [r3, r7]
 800bace:	2b0d      	cmp	r3, #13
 800bad0:	d011      	beq.n	800baf6 <StreamMemsToCLI+0xd2>
 800bad2:	0061      	lsls	r1, r4, #1
 800bad4:	1909      	adds	r1, r1, r4
 800bad6:	0189      	lsls	r1, r1, #6
 800bad8:	4459      	add	r1, fp
 800bada:	2301      	movs	r3, #1
 800badc:	0018      	movs	r0, r3
 800bade:	5cca      	ldrb	r2, [r1, r3]
 800bae0:	2a0d      	cmp	r2, #13
 800bae2:	d009      	beq.n	800baf8 <StreamMemsToCLI+0xd4>
 800bae4:	3301      	adds	r3, #1
		for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800bae6:	2bc0      	cmp	r3, #192	; 0xc0
 800bae8:	d1f8      	bne.n	800badc <StreamMemsToCLI+0xb8>
 800baea:	3d01      	subs	r5, #1
		if (stopStream)
 800baec:	4b15      	ldr	r3, [pc, #84]	; (800bb44 <StreamMemsToCLI+0x120>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d0e0      	beq.n	800bab6 <StreamMemsToCLI+0x92>
 800baf4:	e007      	b.n	800bb06 <StreamMemsToCLI+0xe2>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800baf6:	2000      	movs	r0, #0
				UARTRxBuf[PcPort-1][chr] = 0;
 800baf8:	0063      	lsls	r3, r4, #1
 800bafa:	191b      	adds	r3, r3, r4
 800bafc:	019b      	lsls	r3, r3, #6
 800bafe:	4a13      	ldr	r2, [pc, #76]	; (800bb4c <StreamMemsToCLI+0x128>)
 800bb00:	18d3      	adds	r3, r2, r3
 800bb02:	2200      	movs	r2, #0
 800bb04:	541a      	strb	r2, [r3, r0]
		if (PollingSleepCLISafe(period) != H0AR9_OK)
			break;
	}

	memset((char *) pcOutputString, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bb06:	2299      	movs	r2, #153	; 0x99
 800bb08:	0092      	lsls	r2, r2, #2
 800bb0a:	2100      	movs	r1, #0
 800bb0c:	9c02      	ldr	r4, [sp, #8]
 800bb0e:	0020      	movs	r0, r4
 800bb10:	f008 ff20 	bl	8014954 <memset>
  sprintf((char *)pcOutputString, "\r\n");
 800bb14:	2203      	movs	r2, #3
 800bb16:	490e      	ldr	r1, [pc, #56]	; (800bb50 <StreamMemsToCLI+0x12c>)
 800bb18:	0020      	movs	r0, r4
 800bb1a:	f008 ff12 	bl	8014942 <memcpy>
	return status;
 800bb1e:	2000      	movs	r0, #0
}
 800bb20:	b007      	add	sp, #28
 800bb22:	bc3c      	pop	{r2, r3, r4, r5}
 800bb24:	4690      	mov	r8, r2
 800bb26:	4699      	mov	r9, r3
 800bb28:	46a2      	mov	sl, r4
 800bb2a:	46ab      	mov	fp, r5
 800bb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bb2e:	3e01      	subs	r6, #1
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800bb30:	9805      	ldr	r0, [sp, #20]
 800bb32:	f004 f893 	bl	800fc5c <vTaskDelay>
 800bb36:	e7a7      	b.n	800ba88 <StreamMemsToCLI+0x64>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bb38:	9b04      	ldr	r3, [sp, #16]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	d0a6      	beq.n	800ba8c <StreamMemsToCLI+0x68>
 800bb3e:	e7e2      	b.n	800bb06 <StreamMemsToCLI+0xe2>
		return H0AR9_ERR_WrongParams;
 800bb40:	200b      	movs	r0, #11
 800bb42:	e7ed      	b.n	800bb20 <StreamMemsToCLI+0xfc>
 800bb44:	20001c08 	.word	0x20001c08
 800bb48:	20000ae8 	.word	0x20000ae8
 800bb4c:	20001348 	.word	0x20001348
 800bb50:	0801b340 	.word	0x0801b340

0800bb54 <StopStreamCommand>:
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800bb54:	b510      	push	{r4, lr}
	// Make sure we return something
	pcWriteBuffer[0] = '\0';
 800bb56:	2300      	movs	r3, #0
 800bb58:	7003      	strb	r3, [r0, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Stopping Streaming MEMS...\r\n");
 800bb5a:	4a04      	ldr	r2, [pc, #16]	; (800bb6c <StopStreamCommand+0x18>)
 800bb5c:	f009 f8f4 	bl	8014d48 <snprintf>
	stopStream = true;
 800bb60:	4b03      	ldr	r3, [pc, #12]	; (800bb70 <StopStreamCommand+0x1c>)
 800bb62:	2201      	movs	r2, #1
 800bb64:	701a      	strb	r2, [r3, #0]

	stopStreamMems();
	return pdFALSE;
}
 800bb66:	2000      	movs	r0, #0
 800bb68:	bd10      	pop	{r4, pc}
 800bb6a:	46c0      	nop			; (mov r8, r8)
 800bb6c:	0801bf70 	.word	0x0801bf70
 800bb70:	20001c08 	.word	0x20001c08

0800bb74 <SystemClock_Config>:
{
 800bb74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb76:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bb78:	2401      	movs	r4, #1
 800bb7a:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bb7c:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bb7e:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 800bb80:	2310      	movs	r3, #16
 800bb82:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bb84:	2702      	movs	r7, #2
 800bb86:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bb88:	2680      	movs	r6, #128	; 0x80
 800bb8a:	0276      	lsls	r6, r6, #9
 800bb8c:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800bb8e:	2380      	movs	r3, #128	; 0x80
 800bb90:	035b      	lsls	r3, r3, #13
 800bb92:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800bb94:	2500      	movs	r5, #0
 800bb96:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bb98:	a80d      	add	r0, sp, #52	; 0x34
 800bb9a:	f006 fec3 	bl	8012924 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800bb9e:	2307      	movs	r3, #7
 800bba0:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bba2:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bba4:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bba6:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800bba8:	2101      	movs	r1, #1
 800bbaa:	a809      	add	r0, sp, #36	; 0x24
 800bbac:	f007 f97c 	bl	8012ea8 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800bbb0:	4b1a      	ldr	r3, [pc, #104]	; (800bc1c <SystemClock_Config+0xa8>)
 800bbb2:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800bbb4:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bbb6:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800bbb8:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bbba:	a802      	add	r0, sp, #8
 800bbbc:	f007 fb22 	bl	8013204 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800bbc0:	4d17      	ldr	r5, [pc, #92]	; (800bc20 <SystemClock_Config+0xac>)
 800bbc2:	69ea      	ldr	r2, [r5, #28]
 800bbc4:	2180      	movs	r1, #128	; 0x80
 800bbc6:	0549      	lsls	r1, r1, #21
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	61ea      	str	r2, [r5, #28]
 800bbcc:	69eb      	ldr	r3, [r5, #28]
 800bbce:	400b      	ands	r3, r1
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800bbd4:	f006 fe9c 	bl	8012910 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bbd8:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800bbda:	23c0      	movs	r3, #192	; 0xc0
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bbe0:	a802      	add	r0, sp, #8
 800bbe2:	f007 fb0f 	bl	8013204 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800bbe6:	f007 fae9 	bl	80131bc <HAL_RCC_GetHCLKFreq>
 800bbea:	21fa      	movs	r1, #250	; 0xfa
 800bbec:	0089      	lsls	r1, r1, #2
 800bbee:	f7f4 faaf 	bl	8000150 <__udivsi3>
 800bbf2:	f005 faf5 	bl	80111e0 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bbf6:	2004      	movs	r0, #4
 800bbf8:	f005 fb0e 	bl	8011218 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800bbfc:	69ab      	ldr	r3, [r5, #24]
 800bbfe:	4323      	orrs	r3, r4
 800bc00:	61ab      	str	r3, [r5, #24]
 800bc02:	69ab      	ldr	r3, [r5, #24]
 800bc04:	401c      	ands	r4, r3
 800bc06:	9401      	str	r4, [sp, #4]
 800bc08:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800bc0a:	2001      	movs	r0, #1
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2100      	movs	r1, #0
 800bc10:	4240      	negs	r0, r0
 800bc12:	f005 fa9d 	bl	8011150 <HAL_NVIC_SetPriority>
}
 800bc16:	b01b      	add	sp, #108	; 0x6c
 800bc18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc1a:	46c0      	nop			; (mov r8, r8)
 800bc1c:	00040003 	.word	0x00040003
 800bc20:	40021000 	.word	0x40021000

0800bc24 <RegisterModuleCLICommands>:
{
 800bc24:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &SampleCommandDefinition );
 800bc26:	4805      	ldr	r0, [pc, #20]	; (800bc3c <RegisterModuleCLICommands+0x18>)
 800bc28:	f003 f804 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StreamCommandDefinition );
 800bc2c:	4804      	ldr	r0, [pc, #16]	; (800bc40 <RegisterModuleCLICommands+0x1c>)
 800bc2e:	f003 f801 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StopCommandDefinition);
 800bc32:	4804      	ldr	r0, [pc, #16]	; (800bc44 <RegisterModuleCLICommands+0x20>)
 800bc34:	f002 fffe 	bl	800ec34 <FreeRTOS_CLIRegisterCommand>
}
 800bc38:	bd10      	pop	{r4, pc}
 800bc3a:	46c0      	nop			; (mov r8, r8)
 800bc3c:	0801becc 	.word	0x0801becc
 800bc40:	0801bf90 	.word	0x0801bf90
 800bc44:	0801bf60 	.word	0x0801bf60

0800bc48 <APDS9950_init>:
{
 800bc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4a:	46c6      	mov	lr, r8
 800bc4c:	b500      	push	{lr}
	CONTROL = 0x0F;
 800bc4e:	4d1c      	ldr	r5, [pc, #112]	; (800bcc0 <APDS9950_init+0x78>)
 800bc50:	230f      	movs	r3, #15
 800bc52:	702b      	strb	r3, [r5, #0]
	Enable = 0x00;
 800bc54:	4c1b      	ldr	r4, [pc, #108]	; (800bcc4 <APDS9950_init+0x7c>)
 800bc56:	2300      	movs	r3, #0
 800bc58:	7023      	strb	r3, [r4, #0]
	ATIME  = 0x01;
 800bc5a:	4b1b      	ldr	r3, [pc, #108]	; (800bcc8 <APDS9950_init+0x80>)
 800bc5c:	4698      	mov	r8, r3
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4642      	mov	r2, r8
 800bc62:	7013      	strb	r3, [r2, #0]
	WTIME  = 0x03;
 800bc64:	4f19      	ldr	r7, [pc, #100]	; (800bccc <APDS9950_init+0x84>)
 800bc66:	3302      	adds	r3, #2
 800bc68:	703b      	strb	r3, [r7, #0]
	PPULSE = 0x0E;
 800bc6a:	4e19      	ldr	r6, [pc, #100]	; (800bcd0 <APDS9950_init+0x88>)
 800bc6c:	330b      	adds	r3, #11
 800bc6e:	7033      	strb	r3, [r6, #0]
	redReg = 0x16;
 800bc70:	4b18      	ldr	r3, [pc, #96]	; (800bcd4 <APDS9950_init+0x8c>)
 800bc72:	2216      	movs	r2, #22
 800bc74:	701a      	strb	r2, [r3, #0]
	greenReg = 0x18;
 800bc76:	4b18      	ldr	r3, [pc, #96]	; (800bcd8 <APDS9950_init+0x90>)
 800bc78:	3202      	adds	r2, #2
 800bc7a:	701a      	strb	r2, [r3, #0]
    blueReg = 0x1A;
 800bc7c:	4b17      	ldr	r3, [pc, #92]	; (800bcdc <APDS9950_init+0x94>)
 800bc7e:	3202      	adds	r2, #2
 800bc80:	701a      	strb	r2, [r3, #0]
    distanceReg = 0x1C;
 800bc82:	4b17      	ldr	r3, [pc, #92]	; (800bce0 <APDS9950_init+0x98>)
 800bc84:	3202      	adds	r2, #2
 800bc86:	701a      	strb	r2, [r3, #0]
    WriteRegData (Enable,0x00);
 800bc88:	2100      	movs	r1, #0
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	f002 f934 	bl	800def8 <WriteRegData>
    WriteRegData (ATIME,0x00);
 800bc90:	4643      	mov	r3, r8
 800bc92:	7818      	ldrb	r0, [r3, #0]
 800bc94:	2100      	movs	r1, #0
 800bc96:	f002 f92f 	bl	800def8 <WriteRegData>
    WriteRegData (WTIME,0xff);
 800bc9a:	7838      	ldrb	r0, [r7, #0]
 800bc9c:	21ff      	movs	r1, #255	; 0xff
 800bc9e:	f002 f92b 	bl	800def8 <WriteRegData>
    WriteRegData (PPULSE,0x01);
 800bca2:	7830      	ldrb	r0, [r6, #0]
 800bca4:	2101      	movs	r1, #1
 800bca6:	f002 f927 	bl	800def8 <WriteRegData>
    WriteRegData (CONTROL, 0x20);
 800bcaa:	7828      	ldrb	r0, [r5, #0]
 800bcac:	2120      	movs	r1, #32
 800bcae:	f002 f923 	bl	800def8 <WriteRegData>
    WriteRegData (Enable, 0x0F);
 800bcb2:	7820      	ldrb	r0, [r4, #0]
 800bcb4:	210f      	movs	r1, #15
 800bcb6:	f002 f91f 	bl	800def8 <WriteRegData>
}
 800bcba:	bc04      	pop	{r2}
 800bcbc:	4690      	mov	r8, r2
 800bcbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcc0:	2000716e 	.word	0x2000716e
 800bcc4:	200070ee 	.word	0x200070ee
 800bcc8:	20007075 	.word	0x20007075
 800bccc:	20007074 	.word	0x20007074
 800bcd0:	200070ec 	.word	0x200070ec
 800bcd4:	200070ed 	.word	0x200070ed
 800bcd8:	20007076 	.word	0x20007076
 800bcdc:	20007078 	.word	0x20007078
 800bce0:	20007258 	.word	0x20007258

0800bce4 <Module_Peripheral_Init>:
{
 800bce4:	b510      	push	{r4, lr}
	MX_USART2_UART_Init();
 800bce6:	f002 fc2b 	bl	800e540 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800bcea:	f002 fc41 	bl	800e570 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800bcee:	f002 fc57 	bl	800e5a0 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800bcf2:	f002 fc6d 	bl	800e5d0 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800bcf6:	f002 fc83 	bl	800e600 <MX_USART6_UART_Init>
	SENSORS_GPIO_Init();
 800bcfa:	f001 ff97 	bl	800dc2c <SENSORS_GPIO_Init>
	MX_I2C_Init();
 800bcfe:	f002 f8c5 	bl	800de8c <MX_I2C_Init>
	APDS9950_init();
 800bd02:	f7ff ffa1 	bl	800bc48 <APDS9950_init>
}
 800bd06:	bd10      	pop	{r4, pc}

0800bd08 <SampleColor>:
{
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	0006      	movs	r6, r0
 800bd0c:	000d      	movs	r5, r1
 800bd0e:	0014      	movs	r4, r2
	*Red = Read_Word(redReg);
 800bd10:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <SampleColor+0x28>)
 800bd12:	7818      	ldrb	r0, [r3, #0]
 800bd14:	f002 f906 	bl	800df24 <Read_Word>
 800bd18:	8030      	strh	r0, [r6, #0]
	*Green = Read_Word(greenReg);
 800bd1a:	4b06      	ldr	r3, [pc, #24]	; (800bd34 <SampleColor+0x2c>)
 800bd1c:	7818      	ldrb	r0, [r3, #0]
 800bd1e:	f002 f901 	bl	800df24 <Read_Word>
 800bd22:	8028      	strh	r0, [r5, #0]
	*Blue = Read_Word(blueReg);
 800bd24:	4b04      	ldr	r3, [pc, #16]	; (800bd38 <SampleColor+0x30>)
 800bd26:	7818      	ldrb	r0, [r3, #0]
 800bd28:	f002 f8fc 	bl	800df24 <Read_Word>
 800bd2c:	8020      	strh	r0, [r4, #0]
}
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	200070ed 	.word	0x200070ed
 800bd34:	20007076 	.word	0x20007076
 800bd38:	20007078 	.word	0x20007078

0800bd3c <SampleColorBuf>:
{
 800bd3c:	b510      	push	{r4, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	0004      	movs	r4, r0
	SampleColor(rgb,rgb+1,rgb+2);
 800bd42:	aa01      	add	r2, sp, #4
 800bd44:	466b      	mov	r3, sp
 800bd46:	1c99      	adds	r1, r3, #2
 800bd48:	4668      	mov	r0, sp
 800bd4a:	f7ff ffdd 	bl	800bd08 <SampleColor>
	buffer[0]=rgb[0];
 800bd4e:	466b      	mov	r3, sp
 800bd50:	8818      	ldrh	r0, [r3, #0]
 800bd52:	f7f5 f909 	bl	8000f68 <__aeabi_ui2f>
 800bd56:	6020      	str	r0, [r4, #0]
	buffer[1]=rgb[1];
 800bd58:	466b      	mov	r3, sp
 800bd5a:	8858      	ldrh	r0, [r3, #2]
 800bd5c:	f7f5 f904 	bl	8000f68 <__aeabi_ui2f>
 800bd60:	6060      	str	r0, [r4, #4]
	buffer[2]=rgb[2];
 800bd62:	466b      	mov	r3, sp
 800bd64:	8898      	ldrh	r0, [r3, #4]
 800bd66:	f7f5 f8ff 	bl	8000f68 <__aeabi_ui2f>
 800bd6a:	60a0      	str	r0, [r4, #8]
}
 800bd6c:	b002      	add	sp, #8
 800bd6e:	bd10      	pop	{r4, pc}

0800bd70 <SampleColorToPort>:
{
 800bd70:	b530      	push	{r4, r5, lr}
 800bd72:	b085      	sub	sp, #20
 800bd74:	0004      	movs	r4, r0
 800bd76:	000d      	movs	r5, r1
	SampleColorBuf(buffer);
 800bd78:	a801      	add	r0, sp, #4
 800bd7a:	f7ff ffdf 	bl	800bd3c <SampleColorBuf>
	if(module == myID){
 800bd7e:	4b23      	ldr	r3, [pc, #140]	; (800be0c <SampleColorToPort+0x9c>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	42ab      	cmp	r3, r5
 800bd84:	d021      	beq.n	800bdca <SampleColorToPort+0x5a>
		messageParams[0] =port;
 800bd86:	4b22      	ldr	r3, [pc, #136]	; (800be10 <SampleColorToPort+0xa0>)
 800bd88:	701c      	strb	r4, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800bd8a:	aa01      	add	r2, sp, #4
 800bd8c:	78d1      	ldrb	r1, [r2, #3]
 800bd8e:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800bd90:	7891      	ldrb	r1, [r2, #2]
 800bd92:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bd94:	7851      	ldrb	r1, [r2, #1]
 800bd96:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bd98:	7811      	ldrb	r1, [r2, #0]
 800bd9a:	7119      	strb	r1, [r3, #4]
		messageParams[5] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800bd9c:	79d1      	ldrb	r1, [r2, #7]
 800bd9e:	7159      	strb	r1, [r3, #5]
		messageParams[6] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800bda0:	7991      	ldrb	r1, [r2, #6]
 800bda2:	7199      	strb	r1, [r3, #6]
		messageParams[7] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800bda4:	7951      	ldrb	r1, [r2, #5]
 800bda6:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800bda8:	7911      	ldrb	r1, [r2, #4]
 800bdaa:	7219      	strb	r1, [r3, #8]
		messageParams[9] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800bdac:	7ad1      	ldrb	r1, [r2, #11]
 800bdae:	7259      	strb	r1, [r3, #9]
		messageParams[10] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800bdb0:	7a91      	ldrb	r1, [r2, #10]
 800bdb2:	7299      	strb	r1, [r3, #10]
		messageParams[11] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800bdb4:	7a51      	ldrb	r1, [r2, #9]
 800bdb6:	72d9      	strb	r1, [r3, #11]
		messageParams[12] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800bdb8:	7a12      	ldrb	r2, [r2, #8]
 800bdba:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800bdbc:	220d      	movs	r2, #13
 800bdbe:	2123      	movs	r1, #35	; 0x23
 800bdc0:	0028      	movs	r0, r5
 800bdc2:	f7fd feeb 	bl	8009b9c <SendMessageToModule>
}
 800bdc6:	b005      	add	sp, #20
 800bdc8:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800bdca:	ab01      	add	r3, sp, #4
 800bdcc:	78da      	ldrb	r2, [r3, #3]
 800bdce:	4911      	ldr	r1, [pc, #68]	; (800be14 <SampleColorToPort+0xa4>)
 800bdd0:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800bdd2:	789a      	ldrb	r2, [r3, #2]
 800bdd4:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bdd6:	785a      	ldrb	r2, [r3, #1]
 800bdd8:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bdda:	781a      	ldrb	r2, [r3, #0]
 800bddc:	70ca      	strb	r2, [r1, #3]
		temp[4] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800bdde:	79da      	ldrb	r2, [r3, #7]
 800bde0:	710a      	strb	r2, [r1, #4]
		temp[5] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800bde2:	799a      	ldrb	r2, [r3, #6]
 800bde4:	714a      	strb	r2, [r1, #5]
		temp[6] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800bde6:	795a      	ldrb	r2, [r3, #5]
 800bde8:	718a      	strb	r2, [r1, #6]
		temp[7] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800bdea:	791a      	ldrb	r2, [r3, #4]
 800bdec:	71ca      	strb	r2, [r1, #7]
		temp[8] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800bdee:	7ada      	ldrb	r2, [r3, #11]
 800bdf0:	720a      	strb	r2, [r1, #8]
		temp[9] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800bdf2:	7a9a      	ldrb	r2, [r3, #10]
 800bdf4:	724a      	strb	r2, [r1, #9]
		temp[10] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800bdf6:	7a5a      	ldrb	r2, [r3, #9]
 800bdf8:	728a      	strb	r2, [r1, #10]
		temp[11] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800bdfa:	7a1b      	ldrb	r3, [r3, #8]
 800bdfc:	72cb      	strb	r3, [r1, #11]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800bdfe:	230a      	movs	r3, #10
 800be00:	220c      	movs	r2, #12
 800be02:	0020      	movs	r0, r4
 800be04:	f002 fd96 	bl	800e934 <writePxITMutex>
 800be08:	e7dd      	b.n	800bdc6 <SampleColorToPort+0x56>
 800be0a:	46c0      	nop			; (mov r8, r8)
 800be0c:	200010ea 	.word	0x200010ea
 800be10:	20000fac 	.word	0x20000fac
 800be14:	20001c0c 	.word	0x20001c0c

0800be18 <SampleColorToString>:
{
 800be18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be1a:	b087      	sub	sp, #28
 800be1c:	9003      	str	r0, [sp, #12]
 800be1e:	000f      	movs	r7, r1
	uint16_t red = 0, green = 0, blue = 0;
 800be20:	260e      	movs	r6, #14
 800be22:	ab02      	add	r3, sp, #8
 800be24:	469c      	mov	ip, r3
 800be26:	4466      	add	r6, ip
 800be28:	2300      	movs	r3, #0
 800be2a:	8033      	strh	r3, [r6, #0]
 800be2c:	ad05      	add	r5, sp, #20
 800be2e:	802b      	strh	r3, [r5, #0]
 800be30:	240a      	movs	r4, #10
 800be32:	4464      	add	r4, ip
 800be34:	8023      	strh	r3, [r4, #0]
	SampleColor(&red, &green, &blue);
 800be36:	0022      	movs	r2, r4
 800be38:	0029      	movs	r1, r5
 800be3a:	0030      	movs	r0, r6
 800be3c:	f7ff ff64 	bl	800bd08 <SampleColor>
	Red=red;
 800be40:	8833      	ldrh	r3, [r6, #0]
 800be42:	4a07      	ldr	r2, [pc, #28]	; (800be60 <SampleColorToString+0x48>)
 800be44:	8013      	strh	r3, [r2, #0]
	Green=green;
 800be46:	8829      	ldrh	r1, [r5, #0]
 800be48:	8051      	strh	r1, [r2, #2]
	Blue=blue;
 800be4a:	8820      	ldrh	r0, [r4, #0]
 800be4c:	8090      	strh	r0, [r2, #4]
	snprintf(cstring, maxLen, "Red: %d, Green: %d, Blue: %d\r\n", red, green, blue);
 800be4e:	9001      	str	r0, [sp, #4]
 800be50:	9100      	str	r1, [sp, #0]
 800be52:	4a04      	ldr	r2, [pc, #16]	; (800be64 <SampleColorToString+0x4c>)
 800be54:	0039      	movs	r1, r7
 800be56:	9803      	ldr	r0, [sp, #12]
 800be58:	f008 ff76 	bl	8014d48 <snprintf>
}
 800be5c:	b007      	add	sp, #28
 800be5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be60:	20000008 	.word	0x20000008
 800be64:	0801beac 	.word	0x0801beac

0800be68 <SampleDistance>:
{
 800be68:	b510      	push	{r4, lr}
 800be6a:	0004      	movs	r4, r0
	*distance = Read_Word(distanceReg)/6.39;
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <SampleDistance+0x20>)
 800be6e:	7818      	ldrb	r0, [r3, #0]
 800be70:	f002 f858 	bl	800df24 <Read_Word>
 800be74:	f7f6 fdea 	bl	8002a4c <__aeabi_i2d>
 800be78:	4a04      	ldr	r2, [pc, #16]	; (800be8c <SampleDistance+0x24>)
 800be7a:	4b05      	ldr	r3, [pc, #20]	; (800be90 <SampleDistance+0x28>)
 800be7c:	f7f5 fbd0 	bl	8001620 <__aeabi_ddiv>
 800be80:	f7f4 fbb6 	bl	80005f0 <__aeabi_d2uiz>
 800be84:	8020      	strh	r0, [r4, #0]
}
 800be86:	bd10      	pop	{r4, pc}
 800be88:	20007258 	.word	0x20007258
 800be8c:	28f5c28f 	.word	0x28f5c28f
 800be90:	40198f5c 	.word	0x40198f5c

0800be94 <SampleDistanceBuff>:
{
 800be94:	b530      	push	{r4, r5, lr}
 800be96:	b083      	sub	sp, #12
 800be98:	0005      	movs	r5, r0
	SampleDistance(&distance);
 800be9a:	466b      	mov	r3, sp
 800be9c:	1d9c      	adds	r4, r3, #6
 800be9e:	0020      	movs	r0, r4
 800bea0:	f7ff ffe2 	bl	800be68 <SampleDistance>
	*buffer = distance;
 800bea4:	8820      	ldrh	r0, [r4, #0]
 800bea6:	f7f5 f85f 	bl	8000f68 <__aeabi_ui2f>
 800beaa:	6028      	str	r0, [r5, #0]
}
 800beac:	b003      	add	sp, #12
 800beae:	bd30      	pop	{r4, r5, pc}

0800beb0 <SampleDistanceToPort>:
{
 800beb0:	b530      	push	{r4, r5, lr}
 800beb2:	b083      	sub	sp, #12
 800beb4:	0005      	movs	r5, r0
 800beb6:	000c      	movs	r4, r1
	SampleDistanceBuff(buffer);
 800beb8:	a801      	add	r0, sp, #4
 800beba:	f7ff ffeb 	bl	800be94 <SampleDistanceBuff>
	if(module == myID){
 800bebe:	4b13      	ldr	r3, [pc, #76]	; (800bf0c <SampleDistanceToPort+0x5c>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	42a3      	cmp	r3, r4
 800bec4:	d011      	beq.n	800beea <SampleDistanceToPort+0x3a>
		messageParams[0] =port;
 800bec6:	4b12      	ldr	r3, [pc, #72]	; (800bf10 <SampleDistanceToPort+0x60>)
 800bec8:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800beca:	aa01      	add	r2, sp, #4
 800becc:	78d1      	ldrb	r1, [r2, #3]
 800bece:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800bed0:	7891      	ldrb	r1, [r2, #2]
 800bed2:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bed4:	7851      	ldrb	r1, [r2, #1]
 800bed6:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bed8:	7812      	ldrb	r2, [r2, #0]
 800beda:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800bedc:	2205      	movs	r2, #5
 800bede:	2123      	movs	r1, #35	; 0x23
 800bee0:	0020      	movs	r0, r4
 800bee2:	f7fd fe5b 	bl	8009b9c <SendMessageToModule>
}
 800bee6:	b003      	add	sp, #12
 800bee8:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800beea:	ab01      	add	r3, sp, #4
 800beec:	78da      	ldrb	r2, [r3, #3]
 800beee:	4909      	ldr	r1, [pc, #36]	; (800bf14 <SampleDistanceToPort+0x64>)
 800bef0:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800bef2:	789a      	ldrb	r2, [r3, #2]
 800bef4:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bef6:	785a      	ldrb	r2, [r3, #1]
 800bef8:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800befa:	781b      	ldrb	r3, [r3, #0]
 800befc:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800befe:	230a      	movs	r3, #10
 800bf00:	2204      	movs	r2, #4
 800bf02:	0028      	movs	r0, r5
 800bf04:	f002 fd16 	bl	800e934 <writePxITMutex>
 800bf08:	e7ed      	b.n	800bee6 <SampleDistanceToPort+0x36>
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	200010ea 	.word	0x200010ea
 800bf10:	20000fac 	.word	0x20000fac
 800bf14:	20001c18 	.word	0x20001c18

0800bf18 <SampleDistanceToString>:
{
 800bf18:	b570      	push	{r4, r5, r6, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	0005      	movs	r5, r0
 800bf1e:	000e      	movs	r6, r1
	uint16_t distance = 0;
 800bf20:	466b      	mov	r3, sp
 800bf22:	1d9c      	adds	r4, r3, #6
 800bf24:	2300      	movs	r3, #0
 800bf26:	8023      	strh	r3, [r4, #0]
	SampleDistance(&distance);
 800bf28:	0020      	movs	r0, r4
 800bf2a:	f7ff ff9d 	bl	800be68 <SampleDistance>
	distance1=distance;
 800bf2e:	8823      	ldrh	r3, [r4, #0]
 800bf30:	4a04      	ldr	r2, [pc, #16]	; (800bf44 <SampleDistanceToString+0x2c>)
 800bf32:	80d3      	strh	r3, [r2, #6]
	snprintf(cstring, maxLen, "Distance: %d\r\n", distance);
 800bf34:	4a04      	ldr	r2, [pc, #16]	; (800bf48 <SampleDistanceToString+0x30>)
 800bf36:	0031      	movs	r1, r6
 800bf38:	0028      	movs	r0, r5
 800bf3a:	f008 ff05 	bl	8014d48 <snprintf>
}
 800bf3e:	b002      	add	sp, #8
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	46c0      	nop			; (mov r8, r8)
 800bf44:	20000008 	.word	0x20000008
 800bf48:	0801bedc 	.word	0x0801bedc

0800bf4c <SampleTemperature>:
{
 800bf4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4e:	b083      	sub	sp, #12
 800bf50:	0007      	movs	r7, r0
	buf[0] = tempReg;
 800bf52:	4c19      	ldr	r4, [pc, #100]	; (800bfb8 <SampleTemperature+0x6c>)
 800bf54:	2300      	movs	r3, #0
 800bf56:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800bf58:	4d18      	ldr	r5, [pc, #96]	; (800bfbc <SampleTemperature+0x70>)
 800bf5a:	2601      	movs	r6, #1
 800bf5c:	4276      	negs	r6, r6
 800bf5e:	9600      	str	r6, [sp, #0]
 800bf60:	3301      	adds	r3, #1
 800bf62:	0022      	movs	r2, r4
 800bf64:	2180      	movs	r1, #128	; 0x80
 800bf66:	0028      	movs	r0, r5
 800bf68:	f006 fb8e 	bl	8012688 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800bf6c:	2014      	movs	r0, #20
 800bf6e:	f004 fe11 	bl	8010b94 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800bf72:	9600      	str	r6, [sp, #0]
 800bf74:	2302      	movs	r3, #2
 800bf76:	0022      	movs	r2, r4
 800bf78:	2180      	movs	r1, #128	; 0x80
 800bf7a:	0028      	movs	r0, r5
 800bf7c:	f006 fc28 	bl	80127d0 <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800bf80:	7823      	ldrb	r3, [r4, #0]
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	7860      	ldrb	r0, [r4, #1]
 800bf86:	4318      	orrs	r0, r3
 800bf88:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <SampleTemperature+0x74>)
 800bf8a:	8018      	strh	r0, [r3, #0]
	*temperature=((float)val/65536)*165.0-40.0;
 800bf8c:	f7f4 ffec 	bl	8000f68 <__aeabi_ui2f>
 800bf90:	21de      	movs	r1, #222	; 0xde
 800bf92:	0589      	lsls	r1, r1, #22
 800bf94:	f7f4 fcd2 	bl	800093c <__aeabi_fmul>
 800bf98:	f7f6 fdc4 	bl	8002b24 <__aeabi_f2d>
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <SampleTemperature+0x78>)
 800bfa0:	f7f5 ff48 	bl	8001e34 <__aeabi_dmul>
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	4b08      	ldr	r3, [pc, #32]	; (800bfc8 <SampleTemperature+0x7c>)
 800bfa8:	f7f6 f9b6 	bl	8002318 <__aeabi_dsub>
 800bfac:	f7f6 fe0c 	bl	8002bc8 <__aeabi_d2f>
 800bfb0:	6038      	str	r0, [r7, #0]
}
 800bfb2:	b003      	add	sp, #12
 800bfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb6:	46c0      	nop			; (mov r8, r8)
 800bfb8:	20007164 	.word	0x20007164
 800bfbc:	20007280 	.word	0x20007280
 800bfc0:	2000707a 	.word	0x2000707a
 800bfc4:	4064a000 	.word	0x4064a000
 800bfc8:	40440000 	.word	0x40440000

0800bfcc <SampleTemperatureToString>:
{
 800bfcc:	b530      	push	{r4, r5, lr}
 800bfce:	b085      	sub	sp, #20
 800bfd0:	0004      	movs	r4, r0
 800bfd2:	000d      	movs	r5, r1
	float temprature = 0;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	9303      	str	r3, [sp, #12]
	SampleTemperature(&temprature);
 800bfd8:	a803      	add	r0, sp, #12
 800bfda:	f7ff ffb7 	bl	800bf4c <SampleTemperature>
	temp=temprature;
 800bfde:	4b07      	ldr	r3, [pc, #28]	; (800bffc <SampleTemperatureToString+0x30>)
 800bfe0:	9a03      	ldr	r2, [sp, #12]
 800bfe2:	609a      	str	r2, [r3, #8]
	snprintf(cstring, maxLen, "Temperature: %.2f\r\n", temprature);
 800bfe4:	1c10      	adds	r0, r2, #0
 800bfe6:	f7f6 fd9d 	bl	8002b24 <__aeabi_f2d>
 800bfea:	9000      	str	r0, [sp, #0]
 800bfec:	9101      	str	r1, [sp, #4]
 800bfee:	4a04      	ldr	r2, [pc, #16]	; (800c000 <SampleTemperatureToString+0x34>)
 800bff0:	0029      	movs	r1, r5
 800bff2:	0020      	movs	r0, r4
 800bff4:	f008 fea8 	bl	8014d48 <snprintf>
}
 800bff8:	b005      	add	sp, #20
 800bffa:	bd30      	pop	{r4, r5, pc}
 800bffc:	20000008 	.word	0x20000008
 800c000:	0801bf4c 	.word	0x0801bf4c

0800c004 <SampleTemperatureToPort>:
{
 800c004:	b530      	push	{r4, r5, lr}
 800c006:	b083      	sub	sp, #12
 800c008:	0005      	movs	r5, r0
 800c00a:	000c      	movs	r4, r1
	SampleTemperature(buffer);
 800c00c:	a801      	add	r0, sp, #4
 800c00e:	f7ff ff9d 	bl	800bf4c <SampleTemperature>
	if(module == myID){
 800c012:	4b13      	ldr	r3, [pc, #76]	; (800c060 <SampleTemperatureToPort+0x5c>)
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	42a3      	cmp	r3, r4
 800c018:	d011      	beq.n	800c03e <SampleTemperatureToPort+0x3a>
		messageParams[0] =port;
 800c01a:	4b12      	ldr	r3, [pc, #72]	; (800c064 <SampleTemperatureToPort+0x60>)
 800c01c:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c01e:	aa01      	add	r2, sp, #4
 800c020:	78d1      	ldrb	r1, [r2, #3]
 800c022:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c024:	7891      	ldrb	r1, [r2, #2]
 800c026:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c028:	7851      	ldrb	r1, [r2, #1]
 800c02a:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c02c:	7812      	ldrb	r2, [r2, #0]
 800c02e:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800c030:	2205      	movs	r2, #5
 800c032:	2123      	movs	r1, #35	; 0x23
 800c034:	0020      	movs	r0, r4
 800c036:	f7fd fdb1 	bl	8009b9c <SendMessageToModule>
}
 800c03a:	b003      	add	sp, #12
 800c03c:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c03e:	ab01      	add	r3, sp, #4
 800c040:	78da      	ldrb	r2, [r3, #3]
 800c042:	4909      	ldr	r1, [pc, #36]	; (800c068 <SampleTemperatureToPort+0x64>)
 800c044:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c046:	789a      	ldrb	r2, [r3, #2]
 800c048:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c04a:	785a      	ldrb	r2, [r3, #1]
 800c04c:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800c052:	230a      	movs	r3, #10
 800c054:	2204      	movs	r2, #4
 800c056:	0028      	movs	r0, r5
 800c058:	f002 fc6c 	bl	800e934 <writePxITMutex>
 800c05c:	e7ed      	b.n	800c03a <SampleTemperatureToPort+0x36>
 800c05e:	46c0      	nop			; (mov r8, r8)
 800c060:	200010ea 	.word	0x200010ea
 800c064:	20000fac 	.word	0x20000fac
 800c068:	20001c1c 	.word	0x20001c1c

0800c06c <SampleHumidity>:
{
 800c06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c06e:	b083      	sub	sp, #12
 800c070:	0007      	movs	r7, r0
	buf[0] = humidityReg;
 800c072:	4c14      	ldr	r4, [pc, #80]	; (800c0c4 <SampleHumidity+0x58>)
 800c074:	2301      	movs	r3, #1
 800c076:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800c078:	4d13      	ldr	r5, [pc, #76]	; (800c0c8 <SampleHumidity+0x5c>)
 800c07a:	2601      	movs	r6, #1
 800c07c:	4276      	negs	r6, r6
 800c07e:	9600      	str	r6, [sp, #0]
 800c080:	0022      	movs	r2, r4
 800c082:	2180      	movs	r1, #128	; 0x80
 800c084:	0028      	movs	r0, r5
 800c086:	f006 faff 	bl	8012688 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800c08a:	2014      	movs	r0, #20
 800c08c:	f004 fd82 	bl	8010b94 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800c090:	9600      	str	r6, [sp, #0]
 800c092:	2302      	movs	r3, #2
 800c094:	0022      	movs	r2, r4
 800c096:	2180      	movs	r1, #128	; 0x80
 800c098:	0028      	movs	r0, r5
 800c09a:	f006 fb99 	bl	80127d0 <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800c09e:	7823      	ldrb	r3, [r4, #0]
 800c0a0:	021b      	lsls	r3, r3, #8
 800c0a2:	7860      	ldrb	r0, [r4, #1]
 800c0a4:	4318      	orrs	r0, r3
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <SampleHumidity+0x60>)
 800c0a8:	8018      	strh	r0, [r3, #0]
	*humidity = (((float)val*100)/65536);
 800c0aa:	f7f4 ff5d 	bl	8000f68 <__aeabi_ui2f>
 800c0ae:	4908      	ldr	r1, [pc, #32]	; (800c0d0 <SampleHumidity+0x64>)
 800c0b0:	f7f4 fc44 	bl	800093c <__aeabi_fmul>
 800c0b4:	21de      	movs	r1, #222	; 0xde
 800c0b6:	0589      	lsls	r1, r1, #22
 800c0b8:	f7f4 fc40 	bl	800093c <__aeabi_fmul>
 800c0bc:	6038      	str	r0, [r7, #0]
}
 800c0be:	b003      	add	sp, #12
 800c0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	20007164 	.word	0x20007164
 800c0c8:	20007280 	.word	0x20007280
 800c0cc:	2000707a 	.word	0x2000707a
 800c0d0:	42c80000 	.word	0x42c80000

0800c0d4 <SampleHumidityToString>:
{
 800c0d4:	b530      	push	{r4, r5, lr}
 800c0d6:	b085      	sub	sp, #20
 800c0d8:	0004      	movs	r4, r0
 800c0da:	000d      	movs	r5, r1
	float humidity = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	9303      	str	r3, [sp, #12]
	SampleHumidity(&humidity);
 800c0e0:	a803      	add	r0, sp, #12
 800c0e2:	f7ff ffc3 	bl	800c06c <SampleHumidity>
	hum=humidity;
 800c0e6:	4b07      	ldr	r3, [pc, #28]	; (800c104 <SampleHumidityToString+0x30>)
 800c0e8:	9a03      	ldr	r2, [sp, #12]
 800c0ea:	60da      	str	r2, [r3, #12]
	snprintf(cstring, maxLen, "Humidity: %.2f\r\n", humidity);
 800c0ec:	1c10      	adds	r0, r2, #0
 800c0ee:	f7f6 fd19 	bl	8002b24 <__aeabi_f2d>
 800c0f2:	9000      	str	r0, [sp, #0]
 800c0f4:	9101      	str	r1, [sp, #4]
 800c0f6:	4a04      	ldr	r2, [pc, #16]	; (800c108 <SampleHumidityToString+0x34>)
 800c0f8:	0029      	movs	r1, r5
 800c0fa:	0020      	movs	r0, r4
 800c0fc:	f008 fe24 	bl	8014d48 <snprintf>
}
 800c100:	b005      	add	sp, #20
 800c102:	bd30      	pop	{r4, r5, pc}
 800c104:	20000008 	.word	0x20000008
 800c108:	0801beec 	.word	0x0801beec

0800c10c <SampleHumidityToPort>:
{
 800c10c:	b530      	push	{r4, r5, lr}
 800c10e:	b083      	sub	sp, #12
 800c110:	0005      	movs	r5, r0
 800c112:	000c      	movs	r4, r1
	SampleHumidity(buffer);
 800c114:	a801      	add	r0, sp, #4
 800c116:	f7ff ffa9 	bl	800c06c <SampleHumidity>
	if(module == myID){
 800c11a:	4b13      	ldr	r3, [pc, #76]	; (800c168 <SampleHumidityToPort+0x5c>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	42a3      	cmp	r3, r4
 800c120:	d011      	beq.n	800c146 <SampleHumidityToPort+0x3a>
		messageParams[0] =port;
 800c122:	4b12      	ldr	r3, [pc, #72]	; (800c16c <SampleHumidityToPort+0x60>)
 800c124:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c126:	aa01      	add	r2, sp, #4
 800c128:	78d1      	ldrb	r1, [r2, #3]
 800c12a:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c12c:	7891      	ldrb	r1, [r2, #2]
 800c12e:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c130:	7851      	ldrb	r1, [r2, #1]
 800c132:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c134:	7812      	ldrb	r2, [r2, #0]
 800c136:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800c138:	2205      	movs	r2, #5
 800c13a:	2123      	movs	r1, #35	; 0x23
 800c13c:	0020      	movs	r0, r4
 800c13e:	f7fd fd2d 	bl	8009b9c <SendMessageToModule>
}
 800c142:	b003      	add	sp, #12
 800c144:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c146:	ab01      	add	r3, sp, #4
 800c148:	78da      	ldrb	r2, [r3, #3]
 800c14a:	4909      	ldr	r1, [pc, #36]	; (800c170 <SampleHumidityToPort+0x64>)
 800c14c:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c14e:	789a      	ldrb	r2, [r3, #2]
 800c150:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c152:	785a      	ldrb	r2, [r3, #1]
 800c154:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800c15a:	230a      	movs	r3, #10
 800c15c:	2204      	movs	r2, #4
 800c15e:	0028      	movs	r0, r5
 800c160:	f002 fbe8 	bl	800e934 <writePxITMutex>
 800c164:	e7ed      	b.n	800c142 <SampleHumidityToPort+0x36>
 800c166:	46c0      	nop			; (mov r8, r8)
 800c168:	200010ea 	.word	0x200010ea
 800c16c:	20000fac 	.word	0x20000fac
 800c170:	20001c20 	.word	0x20001c20

0800c174 <SamplePIR>:
{
 800c174:	b510      	push	{r4, lr}
 800c176:	0004      	movs	r4, r0
	*pir=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);/* USER CODE END WHILE */
 800c178:	2180      	movs	r1, #128	; 0x80
 800c17a:	4803      	ldr	r0, [pc, #12]	; (800c188 <SamplePIR+0x14>)
 800c17c:	f006 f920 	bl	80123c0 <HAL_GPIO_ReadPin>
 800c180:	1e43      	subs	r3, r0, #1
 800c182:	4198      	sbcs	r0, r3
 800c184:	7020      	strb	r0, [r4, #0]
}
 800c186:	bd10      	pop	{r4, pc}
 800c188:	48000400 	.word	0x48000400

0800c18c <SamplePIRBuf>:
{
 800c18c:	b530      	push	{r4, r5, lr}
 800c18e:	b083      	sub	sp, #12
 800c190:	0005      	movs	r5, r0
    SamplePIR(&pir);
 800c192:	466b      	mov	r3, sp
 800c194:	1ddc      	adds	r4, r3, #7
 800c196:	0020      	movs	r0, r4
 800c198:	f7ff ffec 	bl	800c174 <SamplePIR>
    *buffer = pir;
 800c19c:	7820      	ldrb	r0, [r4, #0]
 800c19e:	f7f4 fee3 	bl	8000f68 <__aeabi_ui2f>
 800c1a2:	6028      	str	r0, [r5, #0]
}
 800c1a4:	b003      	add	sp, #12
 800c1a6:	bd30      	pop	{r4, r5, pc}

0800c1a8 <SamplePIRToPort>:
{
 800c1a8:	b570      	push	{r4, r5, r6, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	0006      	movs	r6, r0
 800c1ae:	000c      	movs	r4, r1
	SamplePIRBuf(&buffer);
 800c1b0:	a801      	add	r0, sp, #4
 800c1b2:	f7ff ffeb 	bl	800c18c <SamplePIRBuf>
	if(module == myID){
 800c1b6:	4b10      	ldr	r3, [pc, #64]	; (800c1f8 <SamplePIRToPort+0x50>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	42a3      	cmp	r3, r4
 800c1bc:	d00c      	beq.n	800c1d8 <SamplePIRToPort+0x30>
		messageParams[0] =port;
 800c1be:	4d0f      	ldr	r5, [pc, #60]	; (800c1fc <SamplePIRToPort+0x54>)
 800c1c0:	702e      	strb	r6, [r5, #0]
		messageParams[1] =buffer;
 800c1c2:	9801      	ldr	r0, [sp, #4]
 800c1c4:	f7f4 f9fc 	bl	80005c0 <__aeabi_f2uiz>
 800c1c8:	7068      	strb	r0, [r5, #1]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(char)+1);
 800c1ca:	2202      	movs	r2, #2
 800c1cc:	2123      	movs	r1, #35	; 0x23
 800c1ce:	0020      	movs	r0, r4
 800c1d0:	f7fd fce4 	bl	8009b9c <SendMessageToModule>
}
 800c1d4:	b002      	add	sp, #8
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
		temp = buffer;
 800c1d8:	2100      	movs	r1, #0
 800c1da:	9801      	ldr	r0, [sp, #4]
 800c1dc:	f7f4 f978 	bl	80004d0 <__aeabi_fcmpeq>
 800c1e0:	4243      	negs	r3, r0
 800c1e2:	4158      	adcs	r0, r3
 800c1e4:	466b      	mov	r3, sp
 800c1e6:	70d8      	strb	r0, [r3, #3]
		writePxITMutex(port,(char* )&temp,sizeof(bool),10);
 800c1e8:	230a      	movs	r3, #10
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	4669      	mov	r1, sp
 800c1ee:	3103      	adds	r1, #3
 800c1f0:	0030      	movs	r0, r6
 800c1f2:	f002 fb9f 	bl	800e934 <writePxITMutex>
 800c1f6:	e7ed      	b.n	800c1d4 <SamplePIRToPort+0x2c>
 800c1f8:	200010ea 	.word	0x200010ea
 800c1fc:	20000fac 	.word	0x20000fac

0800c200 <SamplePIRToString>:
{
 800c200:	b570      	push	{r4, r5, r6, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	0005      	movs	r5, r0
 800c206:	000e      	movs	r6, r1
	SamplePIR(&sample);
 800c208:	466b      	mov	r3, sp
 800c20a:	1ddc      	adds	r4, r3, #7
 800c20c:	0020      	movs	r0, r4
 800c20e:	f7ff ffb1 	bl	800c174 <SamplePIR>
	Sample=sample;
 800c212:	7823      	ldrb	r3, [r4, #0]
 800c214:	4a04      	ldr	r2, [pc, #16]	; (800c228 <SamplePIRToString+0x28>)
 800c216:	7413      	strb	r3, [r2, #16]
	snprintf(cstring, maxLen, "PIR: %d\r\n", sample);
 800c218:	4a04      	ldr	r2, [pc, #16]	; (800c22c <SamplePIRToString+0x2c>)
 800c21a:	0031      	movs	r1, r6
 800c21c:	0028      	movs	r0, r5
 800c21e:	f008 fd93 	bl	8014d48 <snprintf>
}
 800c222:	b002      	add	sp, #8
 800c224:	bd70      	pop	{r4, r5, r6, pc}
 800c226:	46c0      	nop			; (mov r8, r8)
 800c228:	20000008 	.word	0x20000008
 800c22c:	0801bf00 	.word	0x0801bf00

0800c230 <SampleSensorCommand>:
{
 800c230:	b570      	push	{r4, r5, r6, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	0005      	movs	r5, r0
 800c236:	000e      	movs	r6, r1
 800c238:	0010      	movs	r0, r2
	portBASE_TYPE sensNameLen = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	9301      	str	r3, [sp, #4]
	*pcWriteBuffer = '\0';
 800c23e:	702b      	strb	r3, [r5, #0]
	pSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &sensNameLen);
 800c240:	aa01      	add	r2, sp, #4
 800c242:	2101      	movs	r1, #1
 800c244:	f002 fd94 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800c248:	1e04      	subs	r4, r0, #0
	if (pSensName == NULL) {
 800c24a:	d027      	beq.n	800c29c <SampleSensorCommand+0x6c>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c24c:	2205      	movs	r2, #5
 800c24e:	4924      	ldr	r1, [pc, #144]	; (800c2e0 <SampleSensorCommand+0xb0>)
 800c250:	f008 fdf0 	bl	8014e34 <strncmp>
 800c254:	2800      	cmp	r0, #0
 800c256:	d027      	beq.n	800c2a8 <SampleSensorCommand+0x78>
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800c258:	2208      	movs	r2, #8
 800c25a:	4922      	ldr	r1, [pc, #136]	; (800c2e4 <SampleSensorCommand+0xb4>)
 800c25c:	0020      	movs	r0, r4
 800c25e:	f008 fde9 	bl	8014e34 <strncmp>
 800c262:	2800      	cmp	r0, #0
 800c264:	d027      	beq.n	800c2b6 <SampleSensorCommand+0x86>
		} else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800c266:	2204      	movs	r2, #4
 800c268:	491f      	ldr	r1, [pc, #124]	; (800c2e8 <SampleSensorCommand+0xb8>)
 800c26a:	0020      	movs	r0, r4
 800c26c:	f008 fde2 	bl	8014e34 <strncmp>
 800c270:	2800      	cmp	r0, #0
 800c272:	d025      	beq.n	800c2c0 <SampleSensorCommand+0x90>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800c274:	2208      	movs	r2, #8
 800c276:	491d      	ldr	r1, [pc, #116]	; (800c2ec <SampleSensorCommand+0xbc>)
 800c278:	0020      	movs	r0, r4
 800c27a:	f008 fddb 	bl	8014e34 <strncmp>
 800c27e:	2800      	cmp	r0, #0
 800c280:	d023      	beq.n	800c2ca <SampleSensorCommand+0x9a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800c282:	2203      	movs	r2, #3
 800c284:	491a      	ldr	r1, [pc, #104]	; (800c2f0 <SampleSensorCommand+0xc0>)
 800c286:	0020      	movs	r0, r4
 800c288:	f008 fdd4 	bl	8014e34 <strncmp>
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d021      	beq.n	800c2d4 <SampleSensorCommand+0xa4>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c290:	4a18      	ldr	r2, [pc, #96]	; (800c2f4 <SampleSensorCommand+0xc4>)
 800c292:	0031      	movs	r1, r6
 800c294:	0028      	movs	r0, r5
 800c296:	f008 fd57 	bl	8014d48 <snprintf>
 800c29a:	e009      	b.n	800c2b0 <SampleSensorCommand+0x80>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c29c:	4a15      	ldr	r2, [pc, #84]	; (800c2f4 <SampleSensorCommand+0xc4>)
 800c29e:	0031      	movs	r1, r6
 800c2a0:	0028      	movs	r0, r5
 800c2a2:	f008 fd51 	bl	8014d48 <snprintf>
		return pdFALSE;
 800c2a6:	e003      	b.n	800c2b0 <SampleSensorCommand+0x80>
			SampleColorToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c2a8:	0031      	movs	r1, r6
 800c2aa:	0028      	movs	r0, r5
 800c2ac:	f7ff fdb4 	bl	800be18 <SampleColorToString>
}
 800c2b0:	2000      	movs	r0, #0
 800c2b2:	b002      	add	sp, #8
 800c2b4:	bd70      	pop	{r4, r5, r6, pc}
			SampleDistanceToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c2b6:	0031      	movs	r1, r6
 800c2b8:	0028      	movs	r0, r5
 800c2ba:	f7ff fe2d 	bl	800bf18 <SampleDistanceToString>
 800c2be:	e7f7      	b.n	800c2b0 <SampleSensorCommand+0x80>
			SampleTemperatureToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c2c0:	0031      	movs	r1, r6
 800c2c2:	0028      	movs	r0, r5
 800c2c4:	f7ff fe82 	bl	800bfcc <SampleTemperatureToString>
 800c2c8:	e7f2      	b.n	800c2b0 <SampleSensorCommand+0x80>
			SampleHumidityToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c2ca:	0031      	movs	r1, r6
 800c2cc:	0028      	movs	r0, r5
 800c2ce:	f7ff ff01 	bl	800c0d4 <SampleHumidityToString>
 800c2d2:	e7ed      	b.n	800c2b0 <SampleSensorCommand+0x80>
			SamplePIRToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c2d4:	0031      	movs	r1, r6
 800c2d6:	0028      	movs	r0, r5
 800c2d8:	f7ff ff92 	bl	800c200 <SamplePIRToString>
 800c2dc:	e7e8      	b.n	800c2b0 <SampleSensorCommand+0x80>
 800c2de:	46c0      	nop			; (mov r8, r8)
 800c2e0:	0801bf20 	.word	0x0801bf20
 800c2e4:	0801bf28 	.word	0x0801bf28
 800c2e8:	0801bf34 	.word	0x0801bf34
 800c2ec:	0801bf3c 	.word	0x0801bf3c
 800c2f0:	0801bf48 	.word	0x0801bf48
 800c2f4:	0801bf0c 	.word	0x0801bf0c

0800c2f8 <StreamColorToPort>:
{
 800c2f8:	b510      	push	{r4, lr}
 800c2fa:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleColorToPort);
 800c2fc:	4c02      	ldr	r4, [pc, #8]	; (800c308 <StreamColorToPort+0x10>)
 800c2fe:	9400      	str	r4, [sp, #0]
 800c300:	f7ff fb4c 	bl	800b99c <StreamMemsToPort>
}
 800c304:	b002      	add	sp, #8
 800c306:	bd10      	pop	{r4, pc}
 800c308:	0800bd71 	.word	0x0800bd71

0800c30c <StreamDistanceToPort>:
{
 800c30c:	b510      	push	{r4, lr}
 800c30e:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleDistanceToPort);
 800c310:	4c02      	ldr	r4, [pc, #8]	; (800c31c <StreamDistanceToPort+0x10>)
 800c312:	9400      	str	r4, [sp, #0]
 800c314:	f7ff fb42 	bl	800b99c <StreamMemsToPort>
}
 800c318:	b002      	add	sp, #8
 800c31a:	bd10      	pop	{r4, pc}
 800c31c:	0800beb1 	.word	0x0800beb1

0800c320 <StreamTemperatureToPort>:
{
 800c320:	b510      	push	{r4, lr}
 800c322:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleTemperatureToPort);
 800c324:	4c02      	ldr	r4, [pc, #8]	; (800c330 <StreamTemperatureToPort+0x10>)
 800c326:	9400      	str	r4, [sp, #0]
 800c328:	f7ff fb38 	bl	800b99c <StreamMemsToPort>
}
 800c32c:	b002      	add	sp, #8
 800c32e:	bd10      	pop	{r4, pc}
 800c330:	0800c005 	.word	0x0800c005

0800c334 <StreamHumidityToPort>:
{
 800c334:	b510      	push	{r4, lr}
 800c336:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleHumidityToPort);
 800c338:	4c02      	ldr	r4, [pc, #8]	; (800c344 <StreamHumidityToPort+0x10>)
 800c33a:	9400      	str	r4, [sp, #0]
 800c33c:	f7ff fb2e 	bl	800b99c <StreamMemsToPort>
}
 800c340:	b002      	add	sp, #8
 800c342:	bd10      	pop	{r4, pc}
 800c344:	0800c10d 	.word	0x0800c10d

0800c348 <StreamPIRToPort>:
{
 800c348:	b510      	push	{r4, lr}
 800c34a:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SamplePIRToPort);
 800c34c:	4c02      	ldr	r4, [pc, #8]	; (800c358 <StreamPIRToPort+0x10>)
 800c34e:	9400      	str	r4, [sp, #0]
 800c350:	f7ff fb24 	bl	800b99c <StreamMemsToPort>
}
 800c354:	b002      	add	sp, #8
 800c356:	bd10      	pop	{r4, pc}
 800c358:	0800c1a9 	.word	0x0800c1a9

0800c35c <Module_MessagingTask>:
{
 800c35c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c35e:	46c6      	mov	lr, r8
 800c360:	b500      	push	{lr}
 800c362:	ab06      	add	r3, sp, #24
 800c364:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800c366:	38f5      	subs	r0, #245	; 0xf5
 800c368:	38ff      	subs	r0, #255	; 0xff
 800c36a:	b283      	uxth	r3, r0
 800c36c:	2b0a      	cmp	r3, #10
 800c36e:	d900      	bls.n	800c372 <Module_MessagingTask+0x16>
 800c370:	e127      	b.n	800c5c2 <Module_MessagingTask+0x266>
 800c372:	0098      	lsls	r0, r3, #2
 800c374:	4b94      	ldr	r3, [pc, #592]	; (800c5c8 <Module_MessagingTask+0x26c>)
 800c376:	581b      	ldr	r3, [r3, r0]
 800c378:	469f      	mov	pc, r3
			SampleColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c37a:	1e4b      	subs	r3, r1, #1
 800c37c:	4a93      	ldr	r2, [pc, #588]	; (800c5cc <Module_MessagingTask+0x270>)
 800c37e:	00d8      	lsls	r0, r3, #3
 800c380:	1ac1      	subs	r1, r0, r3
 800c382:	00c9      	lsls	r1, r1, #3
 800c384:	1851      	adds	r1, r2, r1
 800c386:	5d09      	ldrb	r1, [r1, r4]
 800c388:	1ac3      	subs	r3, r0, r3
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	18d2      	adds	r2, r2, r3
 800c38e:	1914      	adds	r4, r2, r4
 800c390:	7860      	ldrb	r0, [r4, #1]
 800c392:	f7ff fced 	bl	800bd70 <SampleColorToPort>
	Module_Status result = H0AR9_OK;
 800c396:	2000      	movs	r0, #0
}
 800c398:	bc04      	pop	{r2}
 800c39a:	4690      	mov	r8, r2
 800c39c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SampleDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c39e:	1e4b      	subs	r3, r1, #1
 800c3a0:	4a8a      	ldr	r2, [pc, #552]	; (800c5cc <Module_MessagingTask+0x270>)
 800c3a2:	00d8      	lsls	r0, r3, #3
 800c3a4:	1ac1      	subs	r1, r0, r3
 800c3a6:	00c9      	lsls	r1, r1, #3
 800c3a8:	1851      	adds	r1, r2, r1
 800c3aa:	5d09      	ldrb	r1, [r1, r4]
 800c3ac:	1ac3      	subs	r3, r0, r3
 800c3ae:	00db      	lsls	r3, r3, #3
 800c3b0:	18d2      	adds	r2, r2, r3
 800c3b2:	1914      	adds	r4, r2, r4
 800c3b4:	7860      	ldrb	r0, [r4, #1]
 800c3b6:	f7ff fd7b 	bl	800beb0 <SampleDistanceToPort>
	Module_Status result = H0AR9_OK;
 800c3ba:	2000      	movs	r0, #0
			break;
 800c3bc:	e7ec      	b.n	800c398 <Module_MessagingTask+0x3c>
			SampleTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c3be:	1e4b      	subs	r3, r1, #1
 800c3c0:	4a82      	ldr	r2, [pc, #520]	; (800c5cc <Module_MessagingTask+0x270>)
 800c3c2:	00d8      	lsls	r0, r3, #3
 800c3c4:	1ac1      	subs	r1, r0, r3
 800c3c6:	00c9      	lsls	r1, r1, #3
 800c3c8:	1851      	adds	r1, r2, r1
 800c3ca:	5d09      	ldrb	r1, [r1, r4]
 800c3cc:	1ac3      	subs	r3, r0, r3
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	18d2      	adds	r2, r2, r3
 800c3d2:	1914      	adds	r4, r2, r4
 800c3d4:	7860      	ldrb	r0, [r4, #1]
 800c3d6:	f7ff fe15 	bl	800c004 <SampleTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800c3da:	2000      	movs	r0, #0
			break;
 800c3dc:	e7dc      	b.n	800c398 <Module_MessagingTask+0x3c>
			SampleHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c3de:	1e4b      	subs	r3, r1, #1
 800c3e0:	4a7a      	ldr	r2, [pc, #488]	; (800c5cc <Module_MessagingTask+0x270>)
 800c3e2:	00d8      	lsls	r0, r3, #3
 800c3e4:	1ac1      	subs	r1, r0, r3
 800c3e6:	00c9      	lsls	r1, r1, #3
 800c3e8:	1851      	adds	r1, r2, r1
 800c3ea:	5d09      	ldrb	r1, [r1, r4]
 800c3ec:	1ac3      	subs	r3, r0, r3
 800c3ee:	00db      	lsls	r3, r3, #3
 800c3f0:	18d2      	adds	r2, r2, r3
 800c3f2:	1914      	adds	r4, r2, r4
 800c3f4:	7860      	ldrb	r0, [r4, #1]
 800c3f6:	f7ff fe89 	bl	800c10c <SampleHumidityToPort>
	Module_Status result = H0AR9_OK;
 800c3fa:	2000      	movs	r0, #0
			break;
 800c3fc:	e7cc      	b.n	800c398 <Module_MessagingTask+0x3c>
			SamplePIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c3fe:	1e4b      	subs	r3, r1, #1
 800c400:	4a72      	ldr	r2, [pc, #456]	; (800c5cc <Module_MessagingTask+0x270>)
 800c402:	00d8      	lsls	r0, r3, #3
 800c404:	1ac1      	subs	r1, r0, r3
 800c406:	00c9      	lsls	r1, r1, #3
 800c408:	1851      	adds	r1, r2, r1
 800c40a:	5d09      	ldrb	r1, [r1, r4]
 800c40c:	1ac3      	subs	r3, r0, r3
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	18d2      	adds	r2, r2, r3
 800c412:	1914      	adds	r4, r2, r4
 800c414:	7860      	ldrb	r0, [r4, #1]
 800c416:	f7ff fec7 	bl	800c1a8 <SamplePIRToPort>
	Module_Status result = H0AR9_OK;
 800c41a:	2000      	movs	r0, #0
			break;
 800c41c:	e7bc      	b.n	800c398 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c41e:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c420:	4d6a      	ldr	r5, [pc, #424]	; (800c5cc <Module_MessagingTask+0x270>)
 800c422:	00c6      	lsls	r6, r0, #3
 800c424:	1a31      	subs	r1, r6, r0
 800c426:	00c9      	lsls	r1, r1, #3
 800c428:	1869      	adds	r1, r5, r1
 800c42a:	190f      	adds	r7, r1, r4
 800c42c:	79bb      	ldrb	r3, [r7, #6]
 800c42e:	061b      	lsls	r3, r3, #24
 800c430:	79fa      	ldrb	r2, [r7, #7]
 800c432:	0412      	lsls	r2, r2, #16
 800c434:	189b      	adds	r3, r3, r2
 800c436:	7a7a      	ldrb	r2, [r7, #9]
 800c438:	189b      	adds	r3, r3, r2
 800c43a:	7a3a      	ldrb	r2, [r7, #8]
 800c43c:	0212      	lsls	r2, r2, #8
 800c43e:	4698      	mov	r8, r3
 800c440:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c442:	78ba      	ldrb	r2, [r7, #2]
 800c444:	0612      	lsls	r2, r2, #24
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	041b      	lsls	r3, r3, #16
 800c44a:	469c      	mov	ip, r3
 800c44c:	4462      	add	r2, ip
 800c44e:	797b      	ldrb	r3, [r7, #5]
 800c450:	469c      	mov	ip, r3
 800c452:	4462      	add	r2, ip
 800c454:	793f      	ldrb	r7, [r7, #4]
 800c456:	023f      	lsls	r7, r7, #8
 800c458:	19d2      	adds	r2, r2, r7
			StreamColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c45a:	5d09      	ldrb	r1, [r1, r4]
 800c45c:	1a30      	subs	r0, r6, r0
 800c45e:	00c0      	lsls	r0, r0, #3
 800c460:	182d      	adds	r5, r5, r0
 800c462:	192c      	adds	r4, r5, r4
 800c464:	7860      	ldrb	r0, [r4, #1]
 800c466:	4643      	mov	r3, r8
 800c468:	f7ff ff46 	bl	800c2f8 <StreamColorToPort>
	Module_Status result = H0AR9_OK;
 800c46c:	2000      	movs	r0, #0
			break;
 800c46e:	e793      	b.n	800c398 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c470:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c472:	4d56      	ldr	r5, [pc, #344]	; (800c5cc <Module_MessagingTask+0x270>)
 800c474:	00c6      	lsls	r6, r0, #3
 800c476:	1a31      	subs	r1, r6, r0
 800c478:	00c9      	lsls	r1, r1, #3
 800c47a:	1869      	adds	r1, r5, r1
 800c47c:	190f      	adds	r7, r1, r4
 800c47e:	79bb      	ldrb	r3, [r7, #6]
 800c480:	061b      	lsls	r3, r3, #24
 800c482:	79fa      	ldrb	r2, [r7, #7]
 800c484:	0412      	lsls	r2, r2, #16
 800c486:	189b      	adds	r3, r3, r2
 800c488:	7a7a      	ldrb	r2, [r7, #9]
 800c48a:	189b      	adds	r3, r3, r2
 800c48c:	7a3a      	ldrb	r2, [r7, #8]
 800c48e:	0212      	lsls	r2, r2, #8
 800c490:	4698      	mov	r8, r3
 800c492:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c494:	78ba      	ldrb	r2, [r7, #2]
 800c496:	0612      	lsls	r2, r2, #24
 800c498:	78fb      	ldrb	r3, [r7, #3]
 800c49a:	041b      	lsls	r3, r3, #16
 800c49c:	469c      	mov	ip, r3
 800c49e:	4462      	add	r2, ip
 800c4a0:	797b      	ldrb	r3, [r7, #5]
 800c4a2:	469c      	mov	ip, r3
 800c4a4:	4462      	add	r2, ip
 800c4a6:	793f      	ldrb	r7, [r7, #4]
 800c4a8:	023f      	lsls	r7, r7, #8
 800c4aa:	19d2      	adds	r2, r2, r7
			StreamDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c4ac:	5d09      	ldrb	r1, [r1, r4]
 800c4ae:	1a30      	subs	r0, r6, r0
 800c4b0:	00c0      	lsls	r0, r0, #3
 800c4b2:	182d      	adds	r5, r5, r0
 800c4b4:	192c      	adds	r4, r5, r4
 800c4b6:	7860      	ldrb	r0, [r4, #1]
 800c4b8:	4643      	mov	r3, r8
 800c4ba:	f7ff ff27 	bl	800c30c <StreamDistanceToPort>
	Module_Status result = H0AR9_OK;
 800c4be:	2000      	movs	r0, #0
			break;
 800c4c0:	e76a      	b.n	800c398 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c4c2:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c4c4:	4d41      	ldr	r5, [pc, #260]	; (800c5cc <Module_MessagingTask+0x270>)
 800c4c6:	00c6      	lsls	r6, r0, #3
 800c4c8:	1a31      	subs	r1, r6, r0
 800c4ca:	00c9      	lsls	r1, r1, #3
 800c4cc:	1869      	adds	r1, r5, r1
 800c4ce:	190f      	adds	r7, r1, r4
 800c4d0:	79bb      	ldrb	r3, [r7, #6]
 800c4d2:	061b      	lsls	r3, r3, #24
 800c4d4:	79fa      	ldrb	r2, [r7, #7]
 800c4d6:	0412      	lsls	r2, r2, #16
 800c4d8:	189b      	adds	r3, r3, r2
 800c4da:	7a7a      	ldrb	r2, [r7, #9]
 800c4dc:	189b      	adds	r3, r3, r2
 800c4de:	7a3a      	ldrb	r2, [r7, #8]
 800c4e0:	0212      	lsls	r2, r2, #8
 800c4e2:	4698      	mov	r8, r3
 800c4e4:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c4e6:	78ba      	ldrb	r2, [r7, #2]
 800c4e8:	0612      	lsls	r2, r2, #24
 800c4ea:	78fb      	ldrb	r3, [r7, #3]
 800c4ec:	041b      	lsls	r3, r3, #16
 800c4ee:	469c      	mov	ip, r3
 800c4f0:	4462      	add	r2, ip
 800c4f2:	797b      	ldrb	r3, [r7, #5]
 800c4f4:	469c      	mov	ip, r3
 800c4f6:	4462      	add	r2, ip
 800c4f8:	793f      	ldrb	r7, [r7, #4]
 800c4fa:	023f      	lsls	r7, r7, #8
 800c4fc:	19d2      	adds	r2, r2, r7
			StreamTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c4fe:	5d09      	ldrb	r1, [r1, r4]
 800c500:	1a30      	subs	r0, r6, r0
 800c502:	00c0      	lsls	r0, r0, #3
 800c504:	182d      	adds	r5, r5, r0
 800c506:	192c      	adds	r4, r5, r4
 800c508:	7860      	ldrb	r0, [r4, #1]
 800c50a:	4643      	mov	r3, r8
 800c50c:	f7ff ff08 	bl	800c320 <StreamTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800c510:	2000      	movs	r0, #0
			break;
 800c512:	e741      	b.n	800c398 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c514:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c516:	4d2d      	ldr	r5, [pc, #180]	; (800c5cc <Module_MessagingTask+0x270>)
 800c518:	00c6      	lsls	r6, r0, #3
 800c51a:	1a31      	subs	r1, r6, r0
 800c51c:	00c9      	lsls	r1, r1, #3
 800c51e:	1869      	adds	r1, r5, r1
 800c520:	190f      	adds	r7, r1, r4
 800c522:	79bb      	ldrb	r3, [r7, #6]
 800c524:	061b      	lsls	r3, r3, #24
 800c526:	79fa      	ldrb	r2, [r7, #7]
 800c528:	0412      	lsls	r2, r2, #16
 800c52a:	189b      	adds	r3, r3, r2
 800c52c:	7a7a      	ldrb	r2, [r7, #9]
 800c52e:	189b      	adds	r3, r3, r2
 800c530:	7a3a      	ldrb	r2, [r7, #8]
 800c532:	0212      	lsls	r2, r2, #8
 800c534:	4698      	mov	r8, r3
 800c536:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c538:	78ba      	ldrb	r2, [r7, #2]
 800c53a:	0612      	lsls	r2, r2, #24
 800c53c:	78fb      	ldrb	r3, [r7, #3]
 800c53e:	041b      	lsls	r3, r3, #16
 800c540:	469c      	mov	ip, r3
 800c542:	4462      	add	r2, ip
 800c544:	797b      	ldrb	r3, [r7, #5]
 800c546:	469c      	mov	ip, r3
 800c548:	4462      	add	r2, ip
 800c54a:	793f      	ldrb	r7, [r7, #4]
 800c54c:	023f      	lsls	r7, r7, #8
 800c54e:	19d2      	adds	r2, r2, r7
			StreamHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c550:	5d09      	ldrb	r1, [r1, r4]
 800c552:	1a30      	subs	r0, r6, r0
 800c554:	00c0      	lsls	r0, r0, #3
 800c556:	182d      	adds	r5, r5, r0
 800c558:	192c      	adds	r4, r5, r4
 800c55a:	7860      	ldrb	r0, [r4, #1]
 800c55c:	4643      	mov	r3, r8
 800c55e:	f7ff fee9 	bl	800c334 <StreamHumidityToPort>
	Module_Status result = H0AR9_OK;
 800c562:	2000      	movs	r0, #0
			break;
 800c564:	e718      	b.n	800c398 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c566:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c568:	4d18      	ldr	r5, [pc, #96]	; (800c5cc <Module_MessagingTask+0x270>)
 800c56a:	00c6      	lsls	r6, r0, #3
 800c56c:	1a31      	subs	r1, r6, r0
 800c56e:	00c9      	lsls	r1, r1, #3
 800c570:	1869      	adds	r1, r5, r1
 800c572:	190f      	adds	r7, r1, r4
 800c574:	79bb      	ldrb	r3, [r7, #6]
 800c576:	061b      	lsls	r3, r3, #24
 800c578:	79fa      	ldrb	r2, [r7, #7]
 800c57a:	0412      	lsls	r2, r2, #16
 800c57c:	189b      	adds	r3, r3, r2
 800c57e:	7a7a      	ldrb	r2, [r7, #9]
 800c580:	189b      	adds	r3, r3, r2
 800c582:	7a3a      	ldrb	r2, [r7, #8]
 800c584:	0212      	lsls	r2, r2, #8
 800c586:	4698      	mov	r8, r3
 800c588:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c58a:	78ba      	ldrb	r2, [r7, #2]
 800c58c:	0612      	lsls	r2, r2, #24
 800c58e:	78fb      	ldrb	r3, [r7, #3]
 800c590:	041b      	lsls	r3, r3, #16
 800c592:	469c      	mov	ip, r3
 800c594:	4462      	add	r2, ip
 800c596:	797b      	ldrb	r3, [r7, #5]
 800c598:	469c      	mov	ip, r3
 800c59a:	4462      	add	r2, ip
 800c59c:	793f      	ldrb	r7, [r7, #4]
 800c59e:	023f      	lsls	r7, r7, #8
 800c5a0:	19d2      	adds	r2, r2, r7
			StreamPIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c5a2:	5d09      	ldrb	r1, [r1, r4]
 800c5a4:	1a30      	subs	r0, r6, r0
 800c5a6:	00c0      	lsls	r0, r0, #3
 800c5a8:	182d      	adds	r5, r5, r0
 800c5aa:	192c      	adds	r4, r5, r4
 800c5ac:	7860      	ldrb	r0, [r4, #1]
 800c5ae:	4643      	mov	r3, r8
 800c5b0:	f7ff feca 	bl	800c348 <StreamPIRToPort>
	Module_Status result = H0AR9_OK;
 800c5b4:	2000      	movs	r0, #0
			break;
 800c5b6:	e6ef      	b.n	800c398 <Module_MessagingTask+0x3c>
	stopStream = true;
 800c5b8:	4b05      	ldr	r3, [pc, #20]	; (800c5d0 <Module_MessagingTask+0x274>)
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	701a      	strb	r2, [r3, #0]
			result = H0AR9_OK;
 800c5be:	2000      	movs	r0, #0
 800c5c0:	e6ea      	b.n	800c398 <Module_MessagingTask+0x3c>
			result = H0AR9_ERR_UnknownMessage;
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	e6e8      	b.n	800c398 <Module_MessagingTask+0x3c>
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	0801be80 	.word	0x0801be80
 800c5cc:	20000d7c 	.word	0x20000d7c
 800c5d0:	20001c08 	.word	0x20001c08

0800c5d4 <StreamColorToCLI>:
{
 800c5d4:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleColorToString);
 800c5d6:	4a02      	ldr	r2, [pc, #8]	; (800c5e0 <StreamColorToCLI+0xc>)
 800c5d8:	f7ff fa24 	bl	800ba24 <StreamMemsToCLI>
}
 800c5dc:	bd10      	pop	{r4, pc}
 800c5de:	46c0      	nop			; (mov r8, r8)
 800c5e0:	0800be19 	.word	0x0800be19

0800c5e4 <StreamDistanceToCLI>:
{
 800c5e4:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleDistanceToString);
 800c5e6:	4a02      	ldr	r2, [pc, #8]	; (800c5f0 <StreamDistanceToCLI+0xc>)
 800c5e8:	f7ff fa1c 	bl	800ba24 <StreamMemsToCLI>
}
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	46c0      	nop			; (mov r8, r8)
 800c5f0:	0800bf19 	.word	0x0800bf19

0800c5f4 <StreamTemperatureToCLI>:
{
 800c5f4:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleTemperatureToString);
 800c5f6:	4a02      	ldr	r2, [pc, #8]	; (800c600 <StreamTemperatureToCLI+0xc>)
 800c5f8:	f7ff fa14 	bl	800ba24 <StreamMemsToCLI>
}
 800c5fc:	bd10      	pop	{r4, pc}
 800c5fe:	46c0      	nop			; (mov r8, r8)
 800c600:	0800bfcd 	.word	0x0800bfcd

0800c604 <StreamHumidityToCLI>:
{
 800c604:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleHumidityToString);
 800c606:	4a02      	ldr	r2, [pc, #8]	; (800c610 <StreamHumidityToCLI+0xc>)
 800c608:	f7ff fa0c 	bl	800ba24 <StreamMemsToCLI>
}
 800c60c:	bd10      	pop	{r4, pc}
 800c60e:	46c0      	nop			; (mov r8, r8)
 800c610:	0800c0d5 	.word	0x0800c0d5

0800c614 <StreamPIRToCLI>:
{
 800c614:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SamplePIRToString);
 800c616:	4a02      	ldr	r2, [pc, #8]	; (800c620 <StreamPIRToCLI+0xc>)
 800c618:	f7ff fa04 	bl	800ba24 <StreamMemsToCLI>
}
 800c61c:	bd10      	pop	{r4, pc}
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	0800c201 	.word	0x0800c201

0800c624 <StreamSensorCommand>:
{
 800c624:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c626:	b08b      	sub	sp, #44	; 0x2c
 800c628:	0005      	movs	r5, r0
 800c62a:	9100      	str	r1, [sp, #0]
 800c62c:	0014      	movs	r4, r2
	portBASE_TYPE sensNameLen = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	9309      	str	r3, [sp, #36]	; 0x24
	*pcWriteBuffer = '\0';
 800c632:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800c634:	9305      	str	r3, [sp, #20]
	portBASE_TYPE timeoutStrLen = 0;
 800c636:	9306      	str	r3, [sp, #24]
	portBASE_TYPE portStrLen = 0;
 800c638:	9307      	str	r3, [sp, #28]
	portBASE_TYPE modStrLen = 0;
 800c63a:	9308      	str	r3, [sp, #32]
	*ppSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, pSensNameLen);
 800c63c:	aa09      	add	r2, sp, #36	; 0x24
 800c63e:	2101      	movs	r1, #1
 800c640:	0020      	movs	r0, r4
 800c642:	f002 fb95 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800c646:	0006      	movs	r6, r0
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &periodStrLen);
 800c648:	aa05      	add	r2, sp, #20
 800c64a:	2102      	movs	r1, #2
 800c64c:	0020      	movs	r0, r4
 800c64e:	f002 fb8f 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800c652:	0007      	movs	r7, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &timeoutStrLen);
 800c654:	aa06      	add	r2, sp, #24
 800c656:	2103      	movs	r1, #3
 800c658:	9401      	str	r4, [sp, #4]
 800c65a:	0020      	movs	r0, r4
 800c65c:	f002 fb88 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800c660:	0004      	movs	r4, r0
	if ((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800c662:	2e00      	cmp	r6, #0
 800c664:	d036      	beq.n	800c6d4 <StreamSensorCommand+0xb0>
 800c666:	2f00      	cmp	r7, #0
 800c668:	d034      	beq.n	800c6d4 <StreamSensorCommand+0xb0>
 800c66a:	2800      	cmp	r0, #0
 800c66c:	d032      	beq.n	800c6d4 <StreamSensorCommand+0xb0>
	*pPeriod = atoi(pPeriodMSStr);
 800c66e:	0038      	movs	r0, r7
 800c670:	f007 fed7 	bl	8014422 <atoi>
 800c674:	9002      	str	r0, [sp, #8]
	*pTimeout = atoi(pTimeoutMSStr);
 800c676:	0020      	movs	r0, r4
 800c678:	f007 fed3 	bl	8014422 <atoi>
 800c67c:	9003      	str	r0, [sp, #12]
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &portStrLen);
 800c67e:	aa07      	add	r2, sp, #28
 800c680:	2104      	movs	r1, #4
 800c682:	9c01      	ldr	r4, [sp, #4]
 800c684:	0020      	movs	r0, r4
 800c686:	f002 fb73 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800c68a:	0007      	movs	r7, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 5, &modStrLen);
 800c68c:	aa08      	add	r2, sp, #32
 800c68e:	2105      	movs	r1, #5
 800c690:	0020      	movs	r0, r4
 800c692:	f002 fb6d 	bl	800ed70 <FreeRTOS_CLIGetParameter>
 800c696:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c698:	d01a      	beq.n	800c6d0 <StreamSensorCommand+0xac>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800c69a:	2f00      	cmp	r7, #0
 800c69c:	d01a      	beq.n	800c6d4 <StreamSensorCommand+0xb0>
	*pPort = atoi(pPortStr);
 800c69e:	0038      	movs	r0, r7
 800c6a0:	f007 febf 	bl	8014422 <atoi>
 800c6a4:	b2c3      	uxtb	r3, r0
 800c6a6:	9301      	str	r3, [sp, #4]
	*pModule = atoi(pModStr);
 800c6a8:	0020      	movs	r0, r4
 800c6aa:	f007 feba 	bl	8014422 <atoi>
 800c6ae:	b2c4      	uxtb	r4, r0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c6b0:	2205      	movs	r2, #5
 800c6b2:	4944      	ldr	r1, [pc, #272]	; (800c7c4 <StreamSensorCommand+0x1a0>)
 800c6b4:	0030      	movs	r0, r6
 800c6b6:	f008 fbbd 	bl	8014e34 <strncmp>
	*pPortOrCLI = false;
 800c6ba:	2700      	movs	r7, #0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d000      	beq.n	800c6c2 <StreamSensorCommand+0x9e>
 800c6c0:	e070      	b.n	800c7a4 <StreamSensorCommand+0x180>
				StreamColorToPort(port, module, period, timeout);
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	9a02      	ldr	r2, [sp, #8]
 800c6c6:	0021      	movs	r1, r4
 800c6c8:	9801      	ldr	r0, [sp, #4]
 800c6ca:	f7ff fe15 	bl	800c2f8 <StreamColorToPort>
 800c6ce:	e05e      	b.n	800c78e <StreamSensorCommand+0x16a>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c6d0:	2f00      	cmp	r7, #0
 800c6d2:	d051      	beq.n	800c778 <StreamSensorCommand+0x154>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c6d4:	4a3c      	ldr	r2, [pc, #240]	; (800c7c8 <StreamSensorCommand+0x1a4>)
 800c6d6:	9900      	ldr	r1, [sp, #0]
 800c6d8:	0028      	movs	r0, r5
 800c6da:	f008 fb35 	bl	8014d48 <snprintf>
		return pdFALSE;
 800c6de:	e05b      	b.n	800c798 <StreamSensorCommand+0x174>
				StreamDistanceToPort(port, module, period, timeout);
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	9a02      	ldr	r2, [sp, #8]
 800c6e4:	0021      	movs	r1, r4
 800c6e6:	9801      	ldr	r0, [sp, #4]
 800c6e8:	f7ff fe10 	bl	800c30c <StreamDistanceToPort>
 800c6ec:	e04f      	b.n	800c78e <StreamSensorCommand+0x16a>
		else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800c6ee:	2204      	movs	r2, #4
 800c6f0:	4936      	ldr	r1, [pc, #216]	; (800c7cc <StreamSensorCommand+0x1a8>)
 800c6f2:	0030      	movs	r0, r6
 800c6f4:	f008 fb9e 	bl	8014e34 <strncmp>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	d10d      	bne.n	800c718 <StreamSensorCommand+0xf4>
			if (portOrCLI) {
 800c6fc:	2f00      	cmp	r7, #0
 800c6fe:	d004      	beq.n	800c70a <StreamSensorCommand+0xe6>
				StreamTemperatureToCLI(period, timeout);
 800c700:	9903      	ldr	r1, [sp, #12]
 800c702:	9802      	ldr	r0, [sp, #8]
 800c704:	f7ff ff76 	bl	800c5f4 <StreamTemperatureToCLI>
 800c708:	e041      	b.n	800c78e <StreamSensorCommand+0x16a>
				StreamTemperatureToPort(port, module, period, timeout);
 800c70a:	9b03      	ldr	r3, [sp, #12]
 800c70c:	9a02      	ldr	r2, [sp, #8]
 800c70e:	0021      	movs	r1, r4
 800c710:	9801      	ldr	r0, [sp, #4]
 800c712:	f7ff fe05 	bl	800c320 <StreamTemperatureToPort>
 800c716:	e03a      	b.n	800c78e <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800c718:	2208      	movs	r2, #8
 800c71a:	492d      	ldr	r1, [pc, #180]	; (800c7d0 <StreamSensorCommand+0x1ac>)
 800c71c:	0030      	movs	r0, r6
 800c71e:	f008 fb89 	bl	8014e34 <strncmp>
 800c722:	2800      	cmp	r0, #0
 800c724:	d10d      	bne.n	800c742 <StreamSensorCommand+0x11e>
			if (portOrCLI) {
 800c726:	2f00      	cmp	r7, #0
 800c728:	d004      	beq.n	800c734 <StreamSensorCommand+0x110>
				StreamHumidityToCLI(period, timeout);
 800c72a:	9903      	ldr	r1, [sp, #12]
 800c72c:	9802      	ldr	r0, [sp, #8]
 800c72e:	f7ff ff69 	bl	800c604 <StreamHumidityToCLI>
 800c732:	e02c      	b.n	800c78e <StreamSensorCommand+0x16a>
				StreamHumidityToPort(port, module, period, timeout);
 800c734:	9b03      	ldr	r3, [sp, #12]
 800c736:	9a02      	ldr	r2, [sp, #8]
 800c738:	0021      	movs	r1, r4
 800c73a:	9801      	ldr	r0, [sp, #4]
 800c73c:	f7ff fdfa 	bl	800c334 <StreamHumidityToPort>
 800c740:	e025      	b.n	800c78e <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800c742:	2203      	movs	r2, #3
 800c744:	4923      	ldr	r1, [pc, #140]	; (800c7d4 <StreamSensorCommand+0x1b0>)
 800c746:	0030      	movs	r0, r6
 800c748:	f008 fb74 	bl	8014e34 <strncmp>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d10d      	bne.n	800c76c <StreamSensorCommand+0x148>
			if (portOrCLI) {
 800c750:	2f00      	cmp	r7, #0
 800c752:	d004      	beq.n	800c75e <StreamSensorCommand+0x13a>
				StreamPIRToCLI(period, timeout);
 800c754:	9903      	ldr	r1, [sp, #12]
 800c756:	9802      	ldr	r0, [sp, #8]
 800c758:	f7ff ff5c 	bl	800c614 <StreamPIRToCLI>
 800c75c:	e017      	b.n	800c78e <StreamSensorCommand+0x16a>
				StreamPIRToPort(port, module, period, timeout);
 800c75e:	9b03      	ldr	r3, [sp, #12]
 800c760:	9a02      	ldr	r2, [sp, #8]
 800c762:	0021      	movs	r1, r4
 800c764:	9801      	ldr	r0, [sp, #4]
 800c766:	f7ff fdef 	bl	800c348 <StreamPIRToPort>
 800c76a:	e010      	b.n	800c78e <StreamSensorCommand+0x16a>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c76c:	4a16      	ldr	r2, [pc, #88]	; (800c7c8 <StreamSensorCommand+0x1a4>)
 800c76e:	9900      	ldr	r1, [sp, #0]
 800c770:	0028      	movs	r0, r5
 800c772:	f008 fae9 	bl	8014d48 <snprintf>
 800c776:	e00a      	b.n	800c78e <StreamSensorCommand+0x16a>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c778:	2205      	movs	r2, #5
 800c77a:	4912      	ldr	r1, [pc, #72]	; (800c7c4 <StreamSensorCommand+0x1a0>)
 800c77c:	0030      	movs	r0, r6
 800c77e:	f008 fb59 	bl	8014e34 <strncmp>
 800c782:	2800      	cmp	r0, #0
 800c784:	d10b      	bne.n	800c79e <StreamSensorCommand+0x17a>
				StreamColorToCLI(period, timeout);
 800c786:	9903      	ldr	r1, [sp, #12]
 800c788:	9802      	ldr	r0, [sp, #8]
 800c78a:	f7ff ff23 	bl	800c5d4 <StreamColorToCLI>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800c78e:	4a12      	ldr	r2, [pc, #72]	; (800c7d8 <StreamSensorCommand+0x1b4>)
 800c790:	9900      	ldr	r1, [sp, #0]
 800c792:	0028      	movs	r0, r5
 800c794:	f008 fad8 	bl	8014d48 <snprintf>
}
 800c798:	2000      	movs	r0, #0
 800c79a:	b00b      	add	sp, #44	; 0x2c
 800c79c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pPortOrCLI = true;
 800c79e:	2701      	movs	r7, #1
	uint8_t module = 0;
 800c7a0:	2400      	movs	r4, #0
	uint8_t port = 0;
 800c7a2:	9401      	str	r4, [sp, #4]
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800c7a4:	2208      	movs	r2, #8
 800c7a6:	490d      	ldr	r1, [pc, #52]	; (800c7dc <StreamSensorCommand+0x1b8>)
 800c7a8:	0030      	movs	r0, r6
 800c7aa:	f008 fb43 	bl	8014e34 <strncmp>
 800c7ae:	2800      	cmp	r0, #0
 800c7b0:	d19d      	bne.n	800c6ee <StreamSensorCommand+0xca>
			if (portOrCLI) {
 800c7b2:	2f00      	cmp	r7, #0
 800c7b4:	d100      	bne.n	800c7b8 <StreamSensorCommand+0x194>
 800c7b6:	e793      	b.n	800c6e0 <StreamSensorCommand+0xbc>
				StreamDistanceToCLI(period, timeout);
 800c7b8:	9903      	ldr	r1, [sp, #12]
 800c7ba:	9802      	ldr	r0, [sp, #8]
 800c7bc:	f7ff ff12 	bl	800c5e4 <StreamDistanceToCLI>
 800c7c0:	e7e5      	b.n	800c78e <StreamSensorCommand+0x16a>
 800c7c2:	46c0      	nop			; (mov r8, r8)
 800c7c4:	0801bf20 	.word	0x0801bf20
 800c7c8:	0801bf0c 	.word	0x0801bf0c
 800c7cc:	0801bf34 	.word	0x0801bf34
 800c7d0:	0801bf3c 	.word	0x0801bf3c
 800c7d4:	0801bf48 	.word	0x0801bf48
 800c7d8:	0801b340 	.word	0x0801b340
 800c7dc:	0801bf28 	.word	0x0801bf28

0800c7e0 <SaveToRO>:

uint8_t SaveToRO(void)
{
 800c7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7e2:	46de      	mov	lr, fp
 800c7e4:	4657      	mov	r7, sl
 800c7e6:	464e      	mov	r6, r9
 800c7e8:	4645      	mov	r5, r8
 800c7ea:	b5e0      	push	{r5, r6, r7, lr}
 800c7ec:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800c7ee:	2215      	movs	r2, #21
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	a802      	add	r0, sp, #8
 800c7f4:	f008 f8ae 	bl	8014954 <memset>

	HAL_FLASH_Unlock();
 800c7f8:	f005 fb40 	bl	8011e7c <HAL_FLASH_Unlock>

	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800c7fc:	4872      	ldr	r0, [pc, #456]	; (800c9c8 <SaveToRO+0x1e8>)
 800c7fe:	f005 fbff 	bl	8012000 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c802:	4872      	ldr	r0, [pc, #456]	; (800c9cc <SaveToRO+0x1ec>)
 800c804:	f005 fb56 	bl	8011eb4 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800c808:	2800      	cmp	r0, #0
 800c80a:	d112      	bne.n	800c832 <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800c80c:	4a70      	ldr	r2, [pc, #448]	; (800c9d0 <SaveToRO+0x1f0>)
 800c80e:	6913      	ldr	r3, [r2, #16]
 800c810:	2102      	movs	r1, #2
 800c812:	438b      	bics	r3, r1
 800c814:	6113      	str	r3, [r2, #16]
	}

	/* Save number of modules and myID */
	if (myID)
 800c816:	4b6f      	ldr	r3, [pc, #444]	; (800c9d4 <SaveToRO+0x1f4>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d113      	bne.n	800c846 <SaveToRO+0x66>
		}
	}

	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800c81e:	4b6e      	ldr	r3, [pc, #440]	; (800c9d8 <SaveToRO+0x1f8>)
 800c820:	781b      	ldrb	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d100      	bne.n	800c828 <SaveToRO+0x48>
 800c826:	e0ca      	b.n	800c9be <SaveToRO+0x1de>
 800c828:	2500      	movs	r5, #0
 800c82a:	4c6c      	ldr	r4, [pc, #432]	; (800c9dc <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType)
 800c82c:	4b6c      	ldr	r3, [pc, #432]	; (800c9e0 <SaveToRO+0x200>)
 800c82e:	4698      	mov	r8, r3
 800c830:	e06e      	b.n	800c910 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800c832:	4b6c      	ldr	r3, [pc, #432]	; (800c9e4 <SaveToRO+0x204>)
 800c834:	69d8      	ldr	r0, [r3, #28]
 800c836:	b2c0      	uxtb	r0, r0
	}

	HAL_FLASH_Lock();

	return result;
}
 800c838:	b009      	add	sp, #36	; 0x24
 800c83a:	bc3c      	pop	{r2, r3, r4, r5}
 800c83c:	4690      	mov	r8, r2
 800c83e:	4699      	mov	r9, r3
 800c840:	46a2      	mov	sl, r4
 800c842:	46ab      	mov	fp, r5
 800c844:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800c846:	4a68      	ldr	r2, [pc, #416]	; (800c9e8 <SaveToRO+0x208>)
 800c848:	7812      	ldrb	r2, [r2, #0]
 800c84a:	0212      	lsls	r2, r2, #8
 800c84c:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800c84e:	b292      	uxth	r2, r2
 800c850:	2300      	movs	r3, #0
 800c852:	495d      	ldr	r1, [pc, #372]	; (800c9c8 <SaveToRO+0x1e8>)
 800c854:	2001      	movs	r0, #1
 800c856:	f005 fb5b 	bl	8011f10 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c85a:	485c      	ldr	r0, [pc, #368]	; (800c9cc <SaveToRO+0x1ec>)
 800c85c:	f005 fb2a 	bl	8011eb4 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800c860:	2800      	cmp	r0, #0
 800c862:	d111      	bne.n	800c888 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c864:	4a5a      	ldr	r2, [pc, #360]	; (800c9d0 <SaveToRO+0x1f0>)
 800c866:	6913      	ldr	r3, [r2, #16]
 800c868:	2101      	movs	r1, #1
 800c86a:	438b      	bics	r3, r1
 800c86c:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800c86e:	4b5e      	ldr	r3, [pc, #376]	; (800c9e8 <SaveToRO+0x208>)
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	2201      	movs	r2, #1
 800c874:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800c876:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d0d0      	beq.n	800c81e <SaveToRO+0x3e>
 800c87c:	2316      	movs	r3, #22
 800c87e:	469b      	mov	fp, r3
 800c880:	4b5a      	ldr	r3, [pc, #360]	; (800c9ec <SaveToRO+0x20c>)
 800c882:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800c884:	4698      	mov	r8, r3
 800c886:	e02a      	b.n	800c8de <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800c888:	4b56      	ldr	r3, [pc, #344]	; (800c9e4 <SaveToRO+0x204>)
 800c88a:	69d8      	ldr	r0, [r3, #28]
 800c88c:	b2c0      	uxtb	r0, r0
 800c88e:	e7d3      	b.n	800c838 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800c890:	4b54      	ldr	r3, [pc, #336]	; (800c9e4 <SaveToRO+0x204>)
 800c892:	69d8      	ldr	r0, [r3, #28]
 800c894:	b2c0      	uxtb	r0, r0
 800c896:	e7cf      	b.n	800c838 <SaveToRO+0x58>
 800c898:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800c89a:	42b4      	cmp	r4, r6
 800c89c:	d017      	beq.n	800c8ce <SaveToRO+0xee>
				if (array[i-1][0]) {
 800c89e:	4643      	mov	r3, r8
 800c8a0:	5afb      	ldrh	r3, [r7, r3]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0f8      	beq.n	800c898 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800c8a6:	8822      	ldrh	r2, [r4, #0]
 800c8a8:	4b47      	ldr	r3, [pc, #284]	; (800c9c8 <SaveToRO+0x1e8>)
 800c8aa:	18e9      	adds	r1, r5, r3
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	f005 fb2e 	bl	8011f10 <HAL_FLASH_Program>
					add += 2;
 800c8b4:	3502      	adds	r5, #2
 800c8b6:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c8b8:	4844      	ldr	r0, [pc, #272]	; (800c9cc <SaveToRO+0x1ec>)
 800c8ba:	f005 fafb 	bl	8011eb4 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d1e6      	bne.n	800c890 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c8c2:	4a43      	ldr	r2, [pc, #268]	; (800c9d0 <SaveToRO+0x1f0>)
 800c8c4:	6913      	ldr	r3, [r2, #16]
 800c8c6:	2101      	movs	r1, #1
 800c8c8:	438b      	bics	r3, r1
 800c8ca:	6113      	str	r3, [r2, #16]
 800c8cc:	e7e4      	b.n	800c898 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800c8ce:	464b      	mov	r3, r9
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	4699      	mov	r9, r3
 800c8d6:	4b44      	ldr	r3, [pc, #272]	; (800c9e8 <SaveToRO+0x208>)
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	454b      	cmp	r3, r9
 800c8dc:	d39f      	bcc.n	800c81e <SaveToRO+0x3e>
 800c8de:	465e      	mov	r6, fp
 800c8e0:	464b      	mov	r3, r9
 800c8e2:	435e      	muls	r6, r3
 800c8e4:	0034      	movs	r4, r6
 800c8e6:	3c16      	subs	r4, #22
 800c8e8:	4454      	add	r4, sl
 800c8ea:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800c8ec:	1e5f      	subs	r7, r3, #1
 800c8ee:	465b      	mov	r3, fp
 800c8f0:	435f      	muls	r7, r3
 800c8f2:	e7d4      	b.n	800c89e <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800c8f4:	4b3b      	ldr	r3, [pc, #236]	; (800c9e4 <SaveToRO+0x204>)
 800c8f6:	69d8      	ldr	r0, [r3, #28]
 800c8f8:	b2c0      	uxtb	r0, r0
 800c8fa:	e79d      	b.n	800c838 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800c8fc:	4b39      	ldr	r3, [pc, #228]	; (800c9e4 <SaveToRO+0x204>)
 800c8fe:	69d8      	ldr	r0, [r3, #28]
 800c900:	b2c0      	uxtb	r0, r0
 800c902:	e799      	b.n	800c838 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800c904:	3501      	adds	r5, #1
 800c906:	b2ed      	uxtb	r5, r5
 800c908:	4b33      	ldr	r3, [pc, #204]	; (800c9d8 <SaveToRO+0x1f8>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	42ab      	cmp	r3, r5
 800c90e:	d956      	bls.n	800c9be <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType)
 800c910:	9501      	str	r5, [sp, #4]
 800c912:	00ab      	lsls	r3, r5, #2
 800c914:	195b      	adds	r3, r3, r5
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4642      	mov	r2, r8
 800c91a:	5c9b      	ldrb	r3, [r3, r2]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d0f1      	beq.n	800c904 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800c920:	23fe      	movs	r3, #254	; 0xfe
 800c922:	aa02      	add	r2, sp, #8
 800c924:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800c926:	00a9      	lsls	r1, r5, #2
 800c928:	1949      	adds	r1, r1, r5
 800c92a:	0089      	lsls	r1, r1, #2
 800c92c:	4b2c      	ldr	r3, [pc, #176]	; (800c9e0 <SaveToRO+0x200>)
 800c92e:	469c      	mov	ip, r3
 800c930:	4461      	add	r1, ip
 800c932:	2214      	movs	r2, #20
 800c934:	ab02      	add	r3, sp, #8
 800c936:	1c58      	adds	r0, r3, #1
 800c938:	f008 f803 	bl	8014942 <memcpy>
 800c93c:	2314      	movs	r3, #20
 800c93e:	469b      	mov	fp, r3
 800c940:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800c942:	ae02      	add	r6, sp, #8
 800c944:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c946:	4f22      	ldr	r7, [pc, #136]	; (800c9d0 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800c948:	5b32      	ldrh	r2, [r6, r4]
 800c94a:	2300      	movs	r3, #0
 800c94c:	0021      	movs	r1, r4
 800c94e:	2001      	movs	r0, #1
 800c950:	f005 fade 	bl	8011f10 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c954:	481d      	ldr	r0, [pc, #116]	; (800c9cc <SaveToRO+0x1ec>)
 800c956:	f005 faad 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c95a:	2800      	cmp	r0, #0
 800c95c:	d1ca      	bne.n	800c8f4 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	2201      	movs	r2, #1
 800c962:	4393      	bics	r3, r2
 800c964:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800c966:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800c968:	455c      	cmp	r4, fp
 800c96a:	d1ed      	bne.n	800c948 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c96c:	2700      	movs	r7, #0
 800c96e:	9a01      	ldr	r2, [sp, #4]
 800c970:	0093      	lsls	r3, r2, #2
 800c972:	189e      	adds	r6, r3, r2
 800c974:	00b6      	lsls	r6, r6, #2
 800c976:	4b1a      	ldr	r3, [pc, #104]	; (800c9e0 <SaveToRO+0x200>)
 800c978:	469a      	mov	sl, r3
 800c97a:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c97c:	4b14      	ldr	r3, [pc, #80]	; (800c9d0 <SaveToRO+0x1f0>)
 800c97e:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c980:	4653      	mov	r3, sl
 800c982:	68de      	ldr	r6, [r3, #12]
 800c984:	0030      	movs	r0, r6
 800c986:	f7f3 fbc7 	bl	8000118 <strlen>
 800c98a:	3001      	adds	r0, #1
 800c98c:	0840      	lsrs	r0, r0, #1
 800c98e:	4287      	cmp	r7, r0
 800c990:	d2b8      	bcs.n	800c904 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800c992:	007b      	lsls	r3, r7, #1
 800c994:	5af2      	ldrh	r2, [r6, r3]
 800c996:	2300      	movs	r3, #0
 800c998:	0021      	movs	r1, r4
 800c99a:	2001      	movs	r0, #1
 800c99c:	f005 fab8 	bl	8011f10 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c9a0:	480a      	ldr	r0, [pc, #40]	; (800c9cc <SaveToRO+0x1ec>)
 800c9a2:	f005 fa87 	bl	8011eb4 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d1a8      	bne.n	800c8fc <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c9aa:	465b      	mov	r3, fp
 800c9ac:	691b      	ldr	r3, [r3, #16]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	4393      	bics	r3, r2
 800c9b2:	465a      	mov	r2, fp
 800c9b4:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800c9b6:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c9b8:	3701      	adds	r7, #1
 800c9ba:	b2ff      	uxtb	r7, r7
 800c9bc:	e7e0      	b.n	800c980 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800c9be:	f005 fa6f 	bl	8011ea0 <HAL_FLASH_Lock>
	return result;
 800c9c2:	2000      	movs	r0, #0
 800c9c4:	e738      	b.n	800c838 <SaveToRO+0x58>
 800c9c6:	46c0      	nop			; (mov r8, r8)
 800c9c8:	0801d800 	.word	0x0801d800
 800c9cc:	0000c350 	.word	0x0000c350
 800c9d0:	40022000 	.word	0x40022000
 800c9d4:	200010ea 	.word	0x200010ea
 800c9d8:	20001297 	.word	0x20001297
 800c9dc:	0801dc00 	.word	0x0801dc00
 800c9e0:	20006e70 	.word	0x20006e70
 800c9e4:	200073d0 	.word	0x200073d0
 800c9e8:	20000044 	.word	0x20000044
 800c9ec:	20000aec 	.word	0x20000aec

0800c9f0 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO ---
*/
uint8_t ClearROtopology(void)
{
 800c9f0:	b510      	push	{r4, lr}
	// Clear the array
	memset(array, 0, sizeof(array));
 800c9f2:	228f      	movs	r2, #143	; 0x8f
 800c9f4:	0092      	lsls	r2, r2, #2
 800c9f6:	2100      	movs	r1, #0
 800c9f8:	4805      	ldr	r0, [pc, #20]	; (800ca10 <ClearROtopology+0x20>)
 800c9fa:	f007 ffab 	bl	8014954 <memset>
	N = 1; myID = 0;
 800c9fe:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <ClearROtopology+0x24>)
 800ca00:	2201      	movs	r2, #1
 800ca02:	701a      	strb	r2, [r3, #0]
 800ca04:	4b04      	ldr	r3, [pc, #16]	; (800ca18 <ClearROtopology+0x28>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	701a      	strb	r2, [r3, #0]

	return SaveToRO();
 800ca0a:	f7ff fee9 	bl	800c7e0 <SaveToRO>
}
 800ca0e:	bd10      	pop	{r4, pc}
 800ca10:	20000aec 	.word	0x20000aec
 800ca14:	20000044 	.word	0x20000044
 800ca18:	200010ea 	.word	0x200010ea

0800ca1c <GetPort>:

/* --- Get the port for a given UART.
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800ca1c:	6800      	ldr	r0, [r0, #0]
 800ca1e:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <GetPort+0x48>)
 800ca20:	4298      	cmp	r0, r3
 800ca22:	d014      	beq.n	800ca4e <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800ca24:	4b10      	ldr	r3, [pc, #64]	; (800ca68 <GetPort+0x4c>)
 800ca26:	4298      	cmp	r0, r3
 800ca28:	d013      	beq.n	800ca52 <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART6)
 800ca2a:	4b10      	ldr	r3, [pc, #64]	; (800ca6c <GetPort+0x50>)
 800ca2c:	4298      	cmp	r0, r3
 800ca2e:	d012      	beq.n	800ca56 <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART3)
 800ca30:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <GetPort+0x54>)
 800ca32:	4298      	cmp	r0, r3
 800ca34:	d011      	beq.n	800ca5a <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART1)
 800ca36:	4b0f      	ldr	r3, [pc, #60]	; (800ca74 <GetPort+0x58>)
 800ca38:	4298      	cmp	r0, r3
 800ca3a:	d010      	beq.n	800ca5e <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART5)
			return P6;
	return 0;
 800ca3c:	4b0e      	ldr	r3, [pc, #56]	; (800ca78 <GetPort+0x5c>)
 800ca3e:	469c      	mov	ip, r3
 800ca40:	4460      	add	r0, ip
 800ca42:	4243      	negs	r3, r0
 800ca44:	4158      	adcs	r0, r3
 800ca46:	4240      	negs	r0, r0
 800ca48:	2306      	movs	r3, #6
 800ca4a:	4018      	ands	r0, r3
}
 800ca4c:	4770      	bx	lr
			return P1;
 800ca4e:	2001      	movs	r0, #1
 800ca50:	e7fc      	b.n	800ca4c <GetPort+0x30>
			return P2;
 800ca52:	2002      	movs	r0, #2
 800ca54:	e7fa      	b.n	800ca4c <GetPort+0x30>
			return P3;
 800ca56:	2003      	movs	r0, #3
 800ca58:	e7f8      	b.n	800ca4c <GetPort+0x30>
			return P4;
 800ca5a:	2004      	movs	r0, #4
 800ca5c:	e7f6      	b.n	800ca4c <GetPort+0x30>
			return P5;
 800ca5e:	2005      	movs	r0, #5
 800ca60:	e7f4      	b.n	800ca4c <GetPort+0x30>
 800ca62:	46c0      	nop			; (mov r8, r8)
 800ca64:	40004c00 	.word	0x40004c00
 800ca68:	40004400 	.word	0x40004400
 800ca6c:	40011400 	.word	0x40011400
 800ca70:	40004800 	.word	0x40004800
 800ca74:	40013800 	.word	0x40013800
 800ca78:	bfffb000 	.word	0xbfffb000

0800ca7c <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ca7c:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ca7e:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca80:	2300      	movs	r3, #0
 800ca82:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ca84:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ca86:	2280      	movs	r2, #128	; 0x80
 800ca88:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca8a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca8c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ca8e:	3320      	adds	r3, #32
 800ca90:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ca92:	2380      	movs	r3, #128	; 0x80
 800ca94:	019b      	lsls	r3, r3, #6
 800ca96:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ca98:	f004 fcf8 	bl	801148c <HAL_DMA_Init>
}
 800ca9c:	bd10      	pop	{r4, pc}

0800ca9e <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ca9e:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800caa0:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800caa2:	2310      	movs	r3, #16
 800caa4:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800caa6:	2300      	movs	r3, #0
 800caa8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800caaa:	2280      	movs	r2, #128	; 0x80
 800caac:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800caae:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cab0:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800cab2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800cab4:	2380      	movs	r3, #128	; 0x80
 800cab6:	019b      	lsls	r3, r3, #6
 800cab8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800caba:	f004 fce7 	bl	801148c <HAL_DMA_Init>
}
 800cabe:	bd10      	pop	{r4, pc}

0800cac0 <DMA_Init>:
{
 800cac0:	b510      	push	{r4, lr}
 800cac2:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800cac4:	4b20      	ldr	r3, [pc, #128]	; (800cb48 <DMA_Init+0x88>)
 800cac6:	6959      	ldr	r1, [r3, #20]
 800cac8:	2201      	movs	r2, #1
 800caca:	4311      	orrs	r1, r2
 800cacc:	6159      	str	r1, [r3, #20]
 800cace:	6959      	ldr	r1, [r3, #20]
 800cad0:	400a      	ands	r2, r1
 800cad2:	9200      	str	r2, [sp, #0]
 800cad4:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800cad6:	6959      	ldr	r1, [r3, #20]
 800cad8:	2202      	movs	r2, #2
 800cada:	4311      	orrs	r1, r2
 800cadc:	6159      	str	r1, [r3, #20]
 800cade:	695b      	ldr	r3, [r3, #20]
 800cae0:	401a      	ands	r2, r3
 800cae2:	9201      	str	r2, [sp, #4]
 800cae4:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800cae6:	4c19      	ldr	r4, [pc, #100]	; (800cb4c <DMA_Init+0x8c>)
 800cae8:	4919      	ldr	r1, [pc, #100]	; (800cb50 <DMA_Init+0x90>)
 800caea:	0020      	movs	r0, r4
 800caec:	f7ff ffc6 	bl	800ca7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800caf0:	0020      	movs	r0, r4
 800caf2:	3038      	adds	r0, #56	; 0x38
 800caf4:	4917      	ldr	r1, [pc, #92]	; (800cb54 <DMA_Init+0x94>)
 800caf6:	f7ff ffc1 	bl	800ca7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800cafa:	0020      	movs	r0, r4
 800cafc:	3070      	adds	r0, #112	; 0x70
 800cafe:	4916      	ldr	r1, [pc, #88]	; (800cb58 <DMA_Init+0x98>)
 800cb00:	f7ff ffbc 	bl	800ca7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800cb04:	0020      	movs	r0, r4
 800cb06:	30a8      	adds	r0, #168	; 0xa8
 800cb08:	4914      	ldr	r1, [pc, #80]	; (800cb5c <DMA_Init+0x9c>)
 800cb0a:	f7ff ffb7 	bl	800ca7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800cb0e:	0020      	movs	r0, r4
 800cb10:	30e0      	adds	r0, #224	; 0xe0
 800cb12:	4913      	ldr	r1, [pc, #76]	; (800cb60 <DMA_Init+0xa0>)
 800cb14:	f7ff ffb2 	bl	800ca7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800cb18:	0020      	movs	r0, r4
 800cb1a:	3019      	adds	r0, #25
 800cb1c:	30ff      	adds	r0, #255	; 0xff
 800cb1e:	4911      	ldr	r1, [pc, #68]	; (800cb64 <DMA_Init+0xa4>)
 800cb20:	f7ff ffac 	bl	800ca7c <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800cb24:	4c10      	ldr	r4, [pc, #64]	; (800cb68 <DMA_Init+0xa8>)
 800cb26:	4911      	ldr	r1, [pc, #68]	; (800cb6c <DMA_Init+0xac>)
 800cb28:	0020      	movs	r0, r4
 800cb2a:	f7ff ffb8 	bl	800ca9e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800cb2e:	0020      	movs	r0, r4
 800cb30:	3038      	adds	r0, #56	; 0x38
 800cb32:	490f      	ldr	r1, [pc, #60]	; (800cb70 <DMA_Init+0xb0>)
 800cb34:	f7ff ffb3 	bl	800ca9e <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800cb38:	0020      	movs	r0, r4
 800cb3a:	3070      	adds	r0, #112	; 0x70
 800cb3c:	490d      	ldr	r1, [pc, #52]	; (800cb74 <DMA_Init+0xb4>)
 800cb3e:	f7ff ffae 	bl	800ca9e <DMA_MSG_TX_CH_Init>
}
 800cb42:	b002      	add	sp, #8
 800cb44:	bd10      	pop	{r4, pc}
 800cb46:	46c0      	nop			; (mov r8, r8)
 800cb48:	40021000 	.word	0x40021000
 800cb4c:	20001c24 	.word	0x20001c24
 800cb50:	40020008 	.word	0x40020008
 800cb54:	40020030 	.word	0x40020030
 800cb58:	40020058 	.word	0x40020058
 800cb5c:	4002006c 	.word	0x4002006c
 800cb60:	4002041c 	.word	0x4002041c
 800cb64:	40020430 	.word	0x40020430
 800cb68:	20001d74 	.word	0x20001d74
 800cb6c:	4002001c 	.word	0x4002001c
 800cb70:	40020044 	.word	0x40020044
 800cb74:	40020080 	.word	0x40020080

0800cb78 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cb78:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cb7a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cb80:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800cb82:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb84:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb86:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800cb88:	3320      	adds	r3, #32
 800cb8a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800cb8c:	2380      	movs	r3, #128	; 0x80
 800cb8e:	015b      	lsls	r3, r3, #5
 800cb90:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cb92:	f004 fc7b 	bl	801148c <HAL_DMA_Init>
}
 800cb96:	bd10      	pop	{r4, pc}

0800cb98 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800cb98:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cb9a:	6803      	ldr	r3, [r0, #0]
 800cb9c:	4a20      	ldr	r2, [pc, #128]	; (800cc20 <SetupDMAInterrupts+0x88>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d020      	beq.n	800cbe4 <SetupDMAInterrupts+0x4c>
 800cba2:	d827      	bhi.n	800cbf4 <SetupDMAInterrupts+0x5c>
 800cba4:	4a1f      	ldr	r2, [pc, #124]	; (800cc24 <SetupDMAInterrupts+0x8c>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d00e      	beq.n	800cbc8 <SetupDMAInterrupts+0x30>
 800cbaa:	d815      	bhi.n	800cbd8 <SetupDMAInterrupts+0x40>
 800cbac:	4a1e      	ldr	r2, [pc, #120]	; (800cc28 <SetupDMAInterrupts+0x90>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d107      	bne.n	800cbc2 <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	2009      	movs	r0, #9
 800cbb6:	f004 facb 	bl	8011150 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800cbba:	2009      	movs	r0, #9
 800cbbc:	f004 fafc 	bl	80111b8 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cbc0:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cbc2:	4a1a      	ldr	r2, [pc, #104]	; (800cc2c <SetupDMAInterrupts+0x94>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d1fb      	bne.n	800cbc0 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800cbc8:	2200      	movs	r2, #0
 800cbca:	200a      	movs	r0, #10
 800cbcc:	f004 fac0 	bl	8011150 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cbd0:	200a      	movs	r0, #10
 800cbd2:	f004 faf1 	bl	80111b8 <HAL_NVIC_EnableIRQ>
			break;
 800cbd6:	e7f3      	b.n	800cbc0 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cbd8:	4a15      	ldr	r2, [pc, #84]	; (800cc30 <SetupDMAInterrupts+0x98>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d002      	beq.n	800cbe4 <SetupDMAInterrupts+0x4c>
 800cbde:	4a15      	ldr	r2, [pc, #84]	; (800cc34 <SetupDMAInterrupts+0x9c>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d1ed      	bne.n	800cbc0 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	200b      	movs	r0, #11
 800cbe8:	f004 fab2 	bl	8011150 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cbec:	200b      	movs	r0, #11
 800cbee:	f004 fae3 	bl	80111b8 <HAL_NVIC_EnableIRQ>
}
 800cbf2:	e7e5      	b.n	800cbc0 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cbf4:	4a10      	ldr	r2, [pc, #64]	; (800cc38 <SetupDMAInterrupts+0xa0>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d0e6      	beq.n	800cbc8 <SetupDMAInterrupts+0x30>
 800cbfa:	d909      	bls.n	800cc10 <SetupDMAInterrupts+0x78>
 800cbfc:	4a0f      	ldr	r2, [pc, #60]	; (800cc3c <SetupDMAInterrupts+0xa4>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d0f0      	beq.n	800cbe4 <SetupDMAInterrupts+0x4c>
 800cc02:	4a0f      	ldr	r2, [pc, #60]	; (800cc40 <SetupDMAInterrupts+0xa8>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d0ed      	beq.n	800cbe4 <SetupDMAInterrupts+0x4c>
 800cc08:	4a0e      	ldr	r2, [pc, #56]	; (800cc44 <SetupDMAInterrupts+0xac>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d1d8      	bne.n	800cbc0 <SetupDMAInterrupts+0x28>
 800cc0e:	e7e9      	b.n	800cbe4 <SetupDMAInterrupts+0x4c>
 800cc10:	4a0d      	ldr	r2, [pc, #52]	; (800cc48 <SetupDMAInterrupts+0xb0>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	d0e6      	beq.n	800cbe4 <SetupDMAInterrupts+0x4c>
 800cc16:	4a0d      	ldr	r2, [pc, #52]	; (800cc4c <SetupDMAInterrupts+0xb4>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d0d5      	beq.n	800cbc8 <SetupDMAInterrupts+0x30>
 800cc1c:	e7d0      	b.n	800cbc0 <SetupDMAInterrupts+0x28>
 800cc1e:	46c0      	nop			; (mov r8, r8)
 800cc20:	4002006c 	.word	0x4002006c
 800cc24:	40020030 	.word	0x40020030
 800cc28:	40020008 	.word	0x40020008
 800cc2c:	4002001c 	.word	0x4002001c
 800cc30:	40020044 	.word	0x40020044
 800cc34:	40020058 	.word	0x40020058
 800cc38:	4002041c 	.word	0x4002041c
 800cc3c:	40020444 	.word	0x40020444
 800cc40:	40020458 	.word	0x40020458
 800cc44:	40020430 	.word	0x40020430
 800cc48:	40020080 	.word	0x40020080
 800cc4c:	40020408 	.word	0x40020408

0800cc50 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800cc50:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cc52:	6803      	ldr	r3, [r0, #0]
 800cc54:	4a1a      	ldr	r2, [pc, #104]	; (800ccc0 <UnSetupDMAInterrupts+0x70>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	d018      	beq.n	800cc8c <UnSetupDMAInterrupts+0x3c>
 800cc5a:	d81b      	bhi.n	800cc94 <UnSetupDMAInterrupts+0x44>
 800cc5c:	4a19      	ldr	r2, [pc, #100]	; (800ccc4 <UnSetupDMAInterrupts+0x74>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d00a      	beq.n	800cc78 <UnSetupDMAInterrupts+0x28>
 800cc62:	d80d      	bhi.n	800cc80 <UnSetupDMAInterrupts+0x30>
 800cc64:	4a18      	ldr	r2, [pc, #96]	; (800ccc8 <UnSetupDMAInterrupts+0x78>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d103      	bne.n	800cc72 <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800cc6a:	2009      	movs	r0, #9
 800cc6c:	f004 faae 	bl	80111cc <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cc70:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cc72:	4a16      	ldr	r2, [pc, #88]	; (800cccc <UnSetupDMAInterrupts+0x7c>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d1fb      	bne.n	800cc70 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cc78:	200a      	movs	r0, #10
 800cc7a:	f004 faa7 	bl	80111cc <HAL_NVIC_DisableIRQ>
			break;
 800cc7e:	e7f7      	b.n	800cc70 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cc80:	4a13      	ldr	r2, [pc, #76]	; (800ccd0 <UnSetupDMAInterrupts+0x80>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d002      	beq.n	800cc8c <UnSetupDMAInterrupts+0x3c>
 800cc86:	4a13      	ldr	r2, [pc, #76]	; (800ccd4 <UnSetupDMAInterrupts+0x84>)
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d1f1      	bne.n	800cc70 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cc8c:	200b      	movs	r0, #11
 800cc8e:	f004 fa9d 	bl	80111cc <HAL_NVIC_DisableIRQ>
}
 800cc92:	e7ed      	b.n	800cc70 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cc94:	4a10      	ldr	r2, [pc, #64]	; (800ccd8 <UnSetupDMAInterrupts+0x88>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d0ee      	beq.n	800cc78 <UnSetupDMAInterrupts+0x28>
 800cc9a:	d909      	bls.n	800ccb0 <UnSetupDMAInterrupts+0x60>
 800cc9c:	4a0f      	ldr	r2, [pc, #60]	; (800ccdc <UnSetupDMAInterrupts+0x8c>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d0f4      	beq.n	800cc8c <UnSetupDMAInterrupts+0x3c>
 800cca2:	4a0f      	ldr	r2, [pc, #60]	; (800cce0 <UnSetupDMAInterrupts+0x90>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d0f1      	beq.n	800cc8c <UnSetupDMAInterrupts+0x3c>
 800cca8:	4a0e      	ldr	r2, [pc, #56]	; (800cce4 <UnSetupDMAInterrupts+0x94>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d1e0      	bne.n	800cc70 <UnSetupDMAInterrupts+0x20>
 800ccae:	e7ed      	b.n	800cc8c <UnSetupDMAInterrupts+0x3c>
 800ccb0:	4a0d      	ldr	r2, [pc, #52]	; (800cce8 <UnSetupDMAInterrupts+0x98>)
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d0ea      	beq.n	800cc8c <UnSetupDMAInterrupts+0x3c>
 800ccb6:	4a0d      	ldr	r2, [pc, #52]	; (800ccec <UnSetupDMAInterrupts+0x9c>)
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d0dd      	beq.n	800cc78 <UnSetupDMAInterrupts+0x28>
 800ccbc:	e7d8      	b.n	800cc70 <UnSetupDMAInterrupts+0x20>
 800ccbe:	46c0      	nop			; (mov r8, r8)
 800ccc0:	4002006c 	.word	0x4002006c
 800ccc4:	40020030 	.word	0x40020030
 800ccc8:	40020008 	.word	0x40020008
 800cccc:	4002001c 	.word	0x4002001c
 800ccd0:	40020044 	.word	0x40020044
 800ccd4:	40020058 	.word	0x40020058
 800ccd8:	4002041c 	.word	0x4002041c
 800ccdc:	40020444 	.word	0x40020444
 800cce0:	40020458 	.word	0x40020458
 800cce4:	40020430 	.word	0x40020430
 800cce8:	40020080 	.word	0x40020080
 800ccec:	40020408 	.word	0x40020408

0800ccf0 <DMA_MSG_TX_UnSetup>:
{	
 800ccf0:	b510      	push	{r4, lr}
 800ccf2:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ccf4:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ccf6:	f7ff ffab 	bl	800cc50 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ccfa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800cd00:	6623      	str	r3, [r4, #96]	; 0x60
}
 800cd02:	bd10      	pop	{r4, pc}

0800cd04 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cd04:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cd06:	6803      	ldr	r3, [r0, #0]
 800cd08:	4abd      	ldr	r2, [pc, #756]	; (800d000 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d02f      	beq.n	800cd6e <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cd0e:	4abd      	ldr	r2, [pc, #756]	; (800d004 <RemapAndLinkDMAtoUARTRx+0x300>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d100      	bne.n	800cd16 <RemapAndLinkDMAtoUARTRx+0x12>
 800cd14:	e087      	b.n	800ce26 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cd16:	4abc      	ldr	r2, [pc, #752]	; (800d008 <RemapAndLinkDMAtoUARTRx+0x304>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d100      	bne.n	800cd1e <RemapAndLinkDMAtoUARTRx+0x1a>
 800cd1c:	e0dc      	b.n	800ced8 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cd1e:	4abb      	ldr	r2, [pc, #748]	; (800d00c <RemapAndLinkDMAtoUARTRx+0x308>)
 800cd20:	4293      	cmp	r3, r2
 800cd22:	d000      	beq.n	800cd26 <RemapAndLinkDMAtoUARTRx+0x22>
 800cd24:	e18a      	b.n	800d03c <RemapAndLinkDMAtoUARTRx+0x338>
 800cd26:	680b      	ldr	r3, [r1, #0]
 800cd28:	4ab9      	ldr	r2, [pc, #740]	; (800d010 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d100      	bne.n	800cd30 <RemapAndLinkDMAtoUARTRx+0x2c>
 800cd2e:	e12d      	b.n	800cf8c <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800cd30:	4ab8      	ldr	r2, [pc, #736]	; (800d014 <RemapAndLinkDMAtoUARTRx+0x310>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d100      	bne.n	800cd38 <RemapAndLinkDMAtoUARTRx+0x34>
 800cd36:	e134      	b.n	800cfa2 <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800cd38:	4ab7      	ldr	r2, [pc, #732]	; (800d018 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d100      	bne.n	800cd40 <RemapAndLinkDMAtoUARTRx+0x3c>
 800cd3e:	e13c      	b.n	800cfba <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800cd40:	4ab6      	ldr	r2, [pc, #728]	; (800d01c <RemapAndLinkDMAtoUARTRx+0x318>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d100      	bne.n	800cd48 <RemapAndLinkDMAtoUARTRx+0x44>
 800cd46:	e144      	b.n	800cfd2 <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800cd48:	4ab5      	ldr	r2, [pc, #724]	; (800d020 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d100      	bne.n	800cd50 <RemapAndLinkDMAtoUARTRx+0x4c>
 800cd4e:	e14c      	b.n	800cfea <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800cd50:	4ab4      	ldr	r2, [pc, #720]	; (800d024 <RemapAndLinkDMAtoUARTRx+0x320>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d11e      	bne.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800cd56:	4ab4      	ldr	r2, [pc, #720]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cd58:	23a8      	movs	r3, #168	; 0xa8
 800cd5a:	58d4      	ldr	r4, [r2, r3]
 800cd5c:	4db3      	ldr	r5, [pc, #716]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800cd5e:	402c      	ands	r4, r5
 800cd60:	50d4      	str	r4, [r2, r3]
 800cd62:	58d5      	ldr	r5, [r2, r3]
 800cd64:	24b0      	movs	r4, #176	; 0xb0
 800cd66:	0124      	lsls	r4, r4, #4
 800cd68:	432c      	orrs	r4, r5
 800cd6a:	50d4      	str	r4, [r2, r3]
 800cd6c:	e012      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cd6e:	680b      	ldr	r3, [r1, #0]
 800cd70:	4aa7      	ldr	r2, [pc, #668]	; (800d010 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d011      	beq.n	800cd9a <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800cd76:	4aa7      	ldr	r2, [pc, #668]	; (800d014 <RemapAndLinkDMAtoUARTRx+0x310>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	d019      	beq.n	800cdb0 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800cd7c:	4aa6      	ldr	r2, [pc, #664]	; (800d018 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d022      	beq.n	800cdc8 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800cd82:	4aa6      	ldr	r2, [pc, #664]	; (800d01c <RemapAndLinkDMAtoUARTRx+0x318>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d02b      	beq.n	800cde0 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800cd88:	4aa5      	ldr	r2, [pc, #660]	; (800d020 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d034      	beq.n	800cdf8 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800cd8e:	4aa5      	ldr	r2, [pc, #660]	; (800d024 <RemapAndLinkDMAtoUARTRx+0x320>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d03c      	beq.n	800ce0e <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800cd94:	6641      	str	r1, [r0, #100]	; 0x64
 800cd96:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cd98:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800cd9a:	4aa5      	ldr	r2, [pc, #660]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd9c:	23a8      	movs	r3, #168	; 0xa8
 800cd9e:	58d4      	ldr	r4, [r2, r3]
 800cda0:	250f      	movs	r5, #15
 800cda2:	43ac      	bics	r4, r5
 800cda4:	50d4      	str	r4, [r2, r3]
 800cda6:	58d4      	ldr	r4, [r2, r3]
 800cda8:	3d07      	subs	r5, #7
 800cdaa:	432c      	orrs	r4, r5
 800cdac:	50d4      	str	r4, [r2, r3]
 800cdae:	e7f1      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800cdb0:	4a9f      	ldr	r2, [pc, #636]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdb2:	23a8      	movs	r3, #168	; 0xa8
 800cdb4:	58d4      	ldr	r4, [r2, r3]
 800cdb6:	4d9d      	ldr	r5, [pc, #628]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800cdb8:	402c      	ands	r4, r5
 800cdba:	50d4      	str	r4, [r2, r3]
 800cdbc:	58d5      	ldr	r5, [r2, r3]
 800cdbe:	2480      	movs	r4, #128	; 0x80
 800cdc0:	0124      	lsls	r4, r4, #4
 800cdc2:	432c      	orrs	r4, r5
 800cdc4:	50d4      	str	r4, [r2, r3]
 800cdc6:	e7e5      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800cdc8:	4a99      	ldr	r2, [pc, #612]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdca:	23a8      	movs	r3, #168	; 0xa8
 800cdcc:	58d4      	ldr	r4, [r2, r3]
 800cdce:	4d99      	ldr	r5, [pc, #612]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cdd0:	402c      	ands	r4, r5
 800cdd2:	50d4      	str	r4, [r2, r3]
 800cdd4:	58d5      	ldr	r5, [r2, r3]
 800cdd6:	2480      	movs	r4, #128	; 0x80
 800cdd8:	0324      	lsls	r4, r4, #12
 800cdda:	432c      	orrs	r4, r5
 800cddc:	50d4      	str	r4, [r2, r3]
 800cdde:	e7d9      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800cde0:	4a93      	ldr	r2, [pc, #588]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cde2:	23a8      	movs	r3, #168	; 0xa8
 800cde4:	58d4      	ldr	r4, [r2, r3]
 800cde6:	4d94      	ldr	r5, [pc, #592]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cde8:	402c      	ands	r4, r5
 800cdea:	50d4      	str	r4, [r2, r3]
 800cdec:	58d5      	ldr	r5, [r2, r3]
 800cdee:	2480      	movs	r4, #128	; 0x80
 800cdf0:	0424      	lsls	r4, r4, #16
 800cdf2:	432c      	orrs	r4, r5
 800cdf4:	50d4      	str	r4, [r2, r3]
 800cdf6:	e7cd      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800cdf8:	4a8b      	ldr	r2, [pc, #556]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cdfa:	23a8      	movs	r3, #168	; 0xa8
 800cdfc:	58d4      	ldr	r4, [r2, r3]
 800cdfe:	25f0      	movs	r5, #240	; 0xf0
 800ce00:	43ac      	bics	r4, r5
 800ce02:	50d4      	str	r4, [r2, r3]
 800ce04:	58d4      	ldr	r4, [r2, r3]
 800ce06:	3d70      	subs	r5, #112	; 0x70
 800ce08:	432c      	orrs	r4, r5
 800ce0a:	50d4      	str	r4, [r2, r3]
 800ce0c:	e7c2      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800ce0e:	4a86      	ldr	r2, [pc, #536]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce10:	23a8      	movs	r3, #168	; 0xa8
 800ce12:	58d4      	ldr	r4, [r2, r3]
 800ce14:	4d85      	ldr	r5, [pc, #532]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce16:	402c      	ands	r4, r5
 800ce18:	50d4      	str	r4, [r2, r3]
 800ce1a:	58d5      	ldr	r5, [r2, r3]
 800ce1c:	2480      	movs	r4, #128	; 0x80
 800ce1e:	0124      	lsls	r4, r4, #4
 800ce20:	432c      	orrs	r4, r5
 800ce22:	50d4      	str	r4, [r2, r3]
 800ce24:	e7b6      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ce26:	680b      	ldr	r3, [r1, #0]
 800ce28:	4a79      	ldr	r2, [pc, #484]	; (800d010 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d01a      	beq.n	800ce64 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800ce2e:	4a79      	ldr	r2, [pc, #484]	; (800d014 <RemapAndLinkDMAtoUARTRx+0x310>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d022      	beq.n	800ce7a <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800ce34:	4a78      	ldr	r2, [pc, #480]	; (800d018 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d02b      	beq.n	800ce92 <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ce3a:	4a78      	ldr	r2, [pc, #480]	; (800d01c <RemapAndLinkDMAtoUARTRx+0x318>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d034      	beq.n	800ceaa <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ce40:	4a77      	ldr	r2, [pc, #476]	; (800d020 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d03d      	beq.n	800cec2 <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ce46:	4a77      	ldr	r2, [pc, #476]	; (800d024 <RemapAndLinkDMAtoUARTRx+0x320>)
 800ce48:	4293      	cmp	r3, r2
 800ce4a:	d1a3      	bne.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ce4c:	4a76      	ldr	r2, [pc, #472]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce4e:	23a8      	movs	r3, #168	; 0xa8
 800ce50:	58d4      	ldr	r4, [r2, r3]
 800ce52:	4d76      	ldr	r5, [pc, #472]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce54:	402c      	ands	r4, r5
 800ce56:	50d4      	str	r4, [r2, r3]
 800ce58:	58d5      	ldr	r5, [r2, r3]
 800ce5a:	2490      	movs	r4, #144	; 0x90
 800ce5c:	0124      	lsls	r4, r4, #4
 800ce5e:	432c      	orrs	r4, r5
 800ce60:	50d4      	str	r4, [r2, r3]
 800ce62:	e797      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800ce64:	4a72      	ldr	r2, [pc, #456]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce66:	23a8      	movs	r3, #168	; 0xa8
 800ce68:	58d4      	ldr	r4, [r2, r3]
 800ce6a:	250f      	movs	r5, #15
 800ce6c:	43ac      	bics	r4, r5
 800ce6e:	50d4      	str	r4, [r2, r3]
 800ce70:	58d4      	ldr	r4, [r2, r3]
 800ce72:	3d06      	subs	r5, #6
 800ce74:	432c      	orrs	r4, r5
 800ce76:	50d4      	str	r4, [r2, r3]
 800ce78:	e78c      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ce7a:	4a6d      	ldr	r2, [pc, #436]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce7c:	23a8      	movs	r3, #168	; 0xa8
 800ce7e:	58d4      	ldr	r4, [r2, r3]
 800ce80:	4d6a      	ldr	r5, [pc, #424]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce82:	402c      	ands	r4, r5
 800ce84:	50d4      	str	r4, [r2, r3]
 800ce86:	58d5      	ldr	r5, [r2, r3]
 800ce88:	2490      	movs	r4, #144	; 0x90
 800ce8a:	0124      	lsls	r4, r4, #4
 800ce8c:	432c      	orrs	r4, r5
 800ce8e:	50d4      	str	r4, [r2, r3]
 800ce90:	e780      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ce92:	4a67      	ldr	r2, [pc, #412]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce94:	23a8      	movs	r3, #168	; 0xa8
 800ce96:	58d4      	ldr	r4, [r2, r3]
 800ce98:	4d66      	ldr	r5, [pc, #408]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x330>)
 800ce9a:	402c      	ands	r4, r5
 800ce9c:	50d4      	str	r4, [r2, r3]
 800ce9e:	58d5      	ldr	r5, [r2, r3]
 800cea0:	2490      	movs	r4, #144	; 0x90
 800cea2:	0324      	lsls	r4, r4, #12
 800cea4:	432c      	orrs	r4, r5
 800cea6:	50d4      	str	r4, [r2, r3]
 800cea8:	e774      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ceaa:	4a61      	ldr	r2, [pc, #388]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ceac:	23a8      	movs	r3, #168	; 0xa8
 800ceae:	58d4      	ldr	r4, [r2, r3]
 800ceb0:	4d61      	ldr	r5, [pc, #388]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ceb2:	402c      	ands	r4, r5
 800ceb4:	50d4      	str	r4, [r2, r3]
 800ceb6:	58d5      	ldr	r5, [r2, r3]
 800ceb8:	2490      	movs	r4, #144	; 0x90
 800ceba:	0424      	lsls	r4, r4, #16
 800cebc:	432c      	orrs	r4, r5
 800cebe:	50d4      	str	r4, [r2, r3]
 800cec0:	e768      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800cec2:	4a59      	ldr	r2, [pc, #356]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cec4:	23a8      	movs	r3, #168	; 0xa8
 800cec6:	58d4      	ldr	r4, [r2, r3]
 800cec8:	25f0      	movs	r5, #240	; 0xf0
 800ceca:	43ac      	bics	r4, r5
 800cecc:	50d4      	str	r4, [r2, r3]
 800cece:	58d4      	ldr	r4, [r2, r3]
 800ced0:	3d60      	subs	r5, #96	; 0x60
 800ced2:	432c      	orrs	r4, r5
 800ced4:	50d4      	str	r4, [r2, r3]
 800ced6:	e75d      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ced8:	680b      	ldr	r3, [r1, #0]
 800ceda:	4a4d      	ldr	r2, [pc, #308]	; (800d010 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cedc:	4293      	cmp	r3, r2
 800cede:	d01b      	beq.n	800cf18 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800cee0:	4a4c      	ldr	r2, [pc, #304]	; (800d014 <RemapAndLinkDMAtoUARTRx+0x310>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d023      	beq.n	800cf2e <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800cee6:	4a4c      	ldr	r2, [pc, #304]	; (800d018 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d02c      	beq.n	800cf46 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ceec:	4a4b      	ldr	r2, [pc, #300]	; (800d01c <RemapAndLinkDMAtoUARTRx+0x318>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d035      	beq.n	800cf5e <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800cef2:	4a4b      	ldr	r2, [pc, #300]	; (800d020 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d03e      	beq.n	800cf76 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800cef8:	4a4a      	ldr	r2, [pc, #296]	; (800d024 <RemapAndLinkDMAtoUARTRx+0x320>)
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d000      	beq.n	800cf00 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800cefe:	e749      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800cf00:	4a49      	ldr	r2, [pc, #292]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cf02:	23a8      	movs	r3, #168	; 0xa8
 800cf04:	58d4      	ldr	r4, [r2, r3]
 800cf06:	4d49      	ldr	r5, [pc, #292]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800cf08:	402c      	ands	r4, r5
 800cf0a:	50d4      	str	r4, [r2, r3]
 800cf0c:	58d5      	ldr	r5, [r2, r3]
 800cf0e:	24a0      	movs	r4, #160	; 0xa0
 800cf10:	0124      	lsls	r4, r4, #4
 800cf12:	432c      	orrs	r4, r5
 800cf14:	50d4      	str	r4, [r2, r3]
 800cf16:	e73d      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800cf18:	4a45      	ldr	r2, [pc, #276]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf1a:	23a8      	movs	r3, #168	; 0xa8
 800cf1c:	58d4      	ldr	r4, [r2, r3]
 800cf1e:	250f      	movs	r5, #15
 800cf20:	43ac      	bics	r4, r5
 800cf22:	50d4      	str	r4, [r2, r3]
 800cf24:	58d4      	ldr	r4, [r2, r3]
 800cf26:	3d05      	subs	r5, #5
 800cf28:	432c      	orrs	r4, r5
 800cf2a:	50d4      	str	r4, [r2, r3]
 800cf2c:	e732      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cf2e:	4a40      	ldr	r2, [pc, #256]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf30:	23a8      	movs	r3, #168	; 0xa8
 800cf32:	58d4      	ldr	r4, [r2, r3]
 800cf34:	4d3d      	ldr	r5, [pc, #244]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800cf36:	402c      	ands	r4, r5
 800cf38:	50d4      	str	r4, [r2, r3]
 800cf3a:	58d5      	ldr	r5, [r2, r3]
 800cf3c:	24a0      	movs	r4, #160	; 0xa0
 800cf3e:	0124      	lsls	r4, r4, #4
 800cf40:	432c      	orrs	r4, r5
 800cf42:	50d4      	str	r4, [r2, r3]
 800cf44:	e726      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800cf46:	4a3a      	ldr	r2, [pc, #232]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf48:	23a8      	movs	r3, #168	; 0xa8
 800cf4a:	58d4      	ldr	r4, [r2, r3]
 800cf4c:	4d39      	ldr	r5, [pc, #228]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cf4e:	402c      	ands	r4, r5
 800cf50:	50d4      	str	r4, [r2, r3]
 800cf52:	58d5      	ldr	r5, [r2, r3]
 800cf54:	24a0      	movs	r4, #160	; 0xa0
 800cf56:	0324      	lsls	r4, r4, #12
 800cf58:	432c      	orrs	r4, r5
 800cf5a:	50d4      	str	r4, [r2, r3]
 800cf5c:	e71a      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800cf5e:	4a34      	ldr	r2, [pc, #208]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf60:	23a8      	movs	r3, #168	; 0xa8
 800cf62:	58d4      	ldr	r4, [r2, r3]
 800cf64:	4d34      	ldr	r5, [pc, #208]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cf66:	402c      	ands	r4, r5
 800cf68:	50d4      	str	r4, [r2, r3]
 800cf6a:	58d5      	ldr	r5, [r2, r3]
 800cf6c:	24a0      	movs	r4, #160	; 0xa0
 800cf6e:	0424      	lsls	r4, r4, #16
 800cf70:	432c      	orrs	r4, r5
 800cf72:	50d4      	str	r4, [r2, r3]
 800cf74:	e70e      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800cf76:	4a2c      	ldr	r2, [pc, #176]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cf78:	23a8      	movs	r3, #168	; 0xa8
 800cf7a:	58d4      	ldr	r4, [r2, r3]
 800cf7c:	25f0      	movs	r5, #240	; 0xf0
 800cf7e:	43ac      	bics	r4, r5
 800cf80:	50d4      	str	r4, [r2, r3]
 800cf82:	58d4      	ldr	r4, [r2, r3]
 800cf84:	3d50      	subs	r5, #80	; 0x50
 800cf86:	432c      	orrs	r4, r5
 800cf88:	50d4      	str	r4, [r2, r3]
 800cf8a:	e703      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800cf8c:	4a28      	ldr	r2, [pc, #160]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf8e:	23a8      	movs	r3, #168	; 0xa8
 800cf90:	58d4      	ldr	r4, [r2, r3]
 800cf92:	250f      	movs	r5, #15
 800cf94:	43ac      	bics	r4, r5
 800cf96:	50d4      	str	r4, [r2, r3]
 800cf98:	58d4      	ldr	r4, [r2, r3]
 800cf9a:	3d04      	subs	r5, #4
 800cf9c:	432c      	orrs	r4, r5
 800cf9e:	50d4      	str	r4, [r2, r3]
 800cfa0:	e6f8      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800cfa2:	4a23      	ldr	r2, [pc, #140]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cfa4:	23a8      	movs	r3, #168	; 0xa8
 800cfa6:	58d4      	ldr	r4, [r2, r3]
 800cfa8:	4d20      	ldr	r5, [pc, #128]	; (800d02c <RemapAndLinkDMAtoUARTRx+0x328>)
 800cfaa:	402c      	ands	r4, r5
 800cfac:	50d4      	str	r4, [r2, r3]
 800cfae:	58d5      	ldr	r5, [r2, r3]
 800cfb0:	24b0      	movs	r4, #176	; 0xb0
 800cfb2:	0124      	lsls	r4, r4, #4
 800cfb4:	432c      	orrs	r4, r5
 800cfb6:	50d4      	str	r4, [r2, r3]
 800cfb8:	e6ec      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800cfba:	4a1d      	ldr	r2, [pc, #116]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cfbc:	23a8      	movs	r3, #168	; 0xa8
 800cfbe:	58d4      	ldr	r4, [r2, r3]
 800cfc0:	4d1c      	ldr	r5, [pc, #112]	; (800d034 <RemapAndLinkDMAtoUARTRx+0x330>)
 800cfc2:	402c      	ands	r4, r5
 800cfc4:	50d4      	str	r4, [r2, r3]
 800cfc6:	58d5      	ldr	r5, [r2, r3]
 800cfc8:	24b0      	movs	r4, #176	; 0xb0
 800cfca:	0324      	lsls	r4, r4, #12
 800cfcc:	432c      	orrs	r4, r5
 800cfce:	50d4      	str	r4, [r2, r3]
 800cfd0:	e6e0      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800cfd2:	4a17      	ldr	r2, [pc, #92]	; (800d030 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cfd4:	23a8      	movs	r3, #168	; 0xa8
 800cfd6:	58d4      	ldr	r4, [r2, r3]
 800cfd8:	4d17      	ldr	r5, [pc, #92]	; (800d038 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cfda:	402c      	ands	r4, r5
 800cfdc:	50d4      	str	r4, [r2, r3]
 800cfde:	58d5      	ldr	r5, [r2, r3]
 800cfe0:	24b0      	movs	r4, #176	; 0xb0
 800cfe2:	0424      	lsls	r4, r4, #16
 800cfe4:	432c      	orrs	r4, r5
 800cfe6:	50d4      	str	r4, [r2, r3]
 800cfe8:	e6d4      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800cfea:	4a0f      	ldr	r2, [pc, #60]	; (800d028 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cfec:	23a8      	movs	r3, #168	; 0xa8
 800cfee:	58d4      	ldr	r4, [r2, r3]
 800cff0:	25f0      	movs	r5, #240	; 0xf0
 800cff2:	43ac      	bics	r4, r5
 800cff4:	50d4      	str	r4, [r2, r3]
 800cff6:	58d4      	ldr	r4, [r2, r3]
 800cff8:	3d40      	subs	r5, #64	; 0x40
 800cffa:	432c      	orrs	r4, r5
 800cffc:	50d4      	str	r4, [r2, r3]
 800cffe:	e6c9      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
 800d000:	40013800 	.word	0x40013800
 800d004:	40004400 	.word	0x40004400
 800d008:	40004800 	.word	0x40004800
 800d00c:	40004c00 	.word	0x40004c00
 800d010:	40020008 	.word	0x40020008
 800d014:	40020030 	.word	0x40020030
 800d018:	40020058 	.word	0x40020058
 800d01c:	4002006c 	.word	0x4002006c
 800d020:	4002041c 	.word	0x4002041c
 800d024:	40020430 	.word	0x40020430
 800d028:	40020400 	.word	0x40020400
 800d02c:	fffff0ff 	.word	0xfffff0ff
 800d030:	40020000 	.word	0x40020000
 800d034:	fff0ffff 	.word	0xfff0ffff
 800d038:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800d03c:	4ab9      	ldr	r2, [pc, #740]	; (800d324 <RemapAndLinkDMAtoUARTRx+0x620>)
 800d03e:	4293      	cmp	r3, r2
 800d040:	d159      	bne.n	800d0f6 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800d042:	680b      	ldr	r3, [r1, #0]
 800d044:	4ab8      	ldr	r2, [pc, #736]	; (800d328 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d01b      	beq.n	800d082 <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800d04a:	4ab8      	ldr	r2, [pc, #736]	; (800d32c <RemapAndLinkDMAtoUARTRx+0x628>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d023      	beq.n	800d098 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800d050:	4ab7      	ldr	r2, [pc, #732]	; (800d330 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d02c      	beq.n	800d0b0 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800d056:	4ab7      	ldr	r2, [pc, #732]	; (800d334 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d035      	beq.n	800d0c8 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800d05c:	4ab6      	ldr	r2, [pc, #728]	; (800d338 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d03e      	beq.n	800d0e0 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800d062:	4ab6      	ldr	r2, [pc, #728]	; (800d33c <RemapAndLinkDMAtoUARTRx+0x638>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d000      	beq.n	800d06a <RemapAndLinkDMAtoUARTRx+0x366>
 800d068:	e694      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800d06a:	4ab5      	ldr	r2, [pc, #724]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d06c:	23a8      	movs	r3, #168	; 0xa8
 800d06e:	58d4      	ldr	r4, [r2, r3]
 800d070:	4db4      	ldr	r5, [pc, #720]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d072:	402c      	ands	r4, r5
 800d074:	50d4      	str	r4, [r2, r3]
 800d076:	58d5      	ldr	r5, [r2, r3]
 800d078:	24c0      	movs	r4, #192	; 0xc0
 800d07a:	0124      	lsls	r4, r4, #4
 800d07c:	432c      	orrs	r4, r5
 800d07e:	50d4      	str	r4, [r2, r3]
 800d080:	e688      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800d082:	4ab1      	ldr	r2, [pc, #708]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d084:	23a8      	movs	r3, #168	; 0xa8
 800d086:	58d4      	ldr	r4, [r2, r3]
 800d088:	250f      	movs	r5, #15
 800d08a:	43ac      	bics	r4, r5
 800d08c:	50d4      	str	r4, [r2, r3]
 800d08e:	58d4      	ldr	r4, [r2, r3]
 800d090:	3d03      	subs	r5, #3
 800d092:	432c      	orrs	r4, r5
 800d094:	50d4      	str	r4, [r2, r3]
 800d096:	e67d      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800d098:	4aab      	ldr	r2, [pc, #684]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d09a:	23a8      	movs	r3, #168	; 0xa8
 800d09c:	58d4      	ldr	r4, [r2, r3]
 800d09e:	4da9      	ldr	r5, [pc, #676]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d0a0:	402c      	ands	r4, r5
 800d0a2:	50d4      	str	r4, [r2, r3]
 800d0a4:	58d5      	ldr	r5, [r2, r3]
 800d0a6:	24c0      	movs	r4, #192	; 0xc0
 800d0a8:	0124      	lsls	r4, r4, #4
 800d0aa:	432c      	orrs	r4, r5
 800d0ac:	50d4      	str	r4, [r2, r3]
 800d0ae:	e671      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800d0b0:	4aa5      	ldr	r2, [pc, #660]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d0b2:	23a8      	movs	r3, #168	; 0xa8
 800d0b4:	58d4      	ldr	r4, [r2, r3]
 800d0b6:	4da5      	ldr	r5, [pc, #660]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x648>)
 800d0b8:	402c      	ands	r4, r5
 800d0ba:	50d4      	str	r4, [r2, r3]
 800d0bc:	58d5      	ldr	r5, [r2, r3]
 800d0be:	24c0      	movs	r4, #192	; 0xc0
 800d0c0:	0324      	lsls	r4, r4, #12
 800d0c2:	432c      	orrs	r4, r5
 800d0c4:	50d4      	str	r4, [r2, r3]
 800d0c6:	e665      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800d0c8:	4a9f      	ldr	r2, [pc, #636]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d0ca:	23a8      	movs	r3, #168	; 0xa8
 800d0cc:	58d4      	ldr	r4, [r2, r3]
 800d0ce:	4da0      	ldr	r5, [pc, #640]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d0d0:	402c      	ands	r4, r5
 800d0d2:	50d4      	str	r4, [r2, r3]
 800d0d4:	58d5      	ldr	r5, [r2, r3]
 800d0d6:	24c0      	movs	r4, #192	; 0xc0
 800d0d8:	0424      	lsls	r4, r4, #16
 800d0da:	432c      	orrs	r4, r5
 800d0dc:	50d4      	str	r4, [r2, r3]
 800d0de:	e659      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800d0e0:	4a97      	ldr	r2, [pc, #604]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d0e2:	23a8      	movs	r3, #168	; 0xa8
 800d0e4:	58d4      	ldr	r4, [r2, r3]
 800d0e6:	25f0      	movs	r5, #240	; 0xf0
 800d0e8:	43ac      	bics	r4, r5
 800d0ea:	50d4      	str	r4, [r2, r3]
 800d0ec:	58d4      	ldr	r4, [r2, r3]
 800d0ee:	3d30      	subs	r5, #48	; 0x30
 800d0f0:	432c      	orrs	r4, r5
 800d0f2:	50d4      	str	r4, [r2, r3]
 800d0f4:	e64e      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800d0f6:	4a97      	ldr	r2, [pc, #604]	; (800d354 <RemapAndLinkDMAtoUARTRx+0x650>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d159      	bne.n	800d1b0 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800d0fc:	680b      	ldr	r3, [r1, #0]
 800d0fe:	4a8a      	ldr	r2, [pc, #552]	; (800d328 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d01b      	beq.n	800d13c <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800d104:	4a89      	ldr	r2, [pc, #548]	; (800d32c <RemapAndLinkDMAtoUARTRx+0x628>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d023      	beq.n	800d152 <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800d10a:	4a89      	ldr	r2, [pc, #548]	; (800d330 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d02c      	beq.n	800d16a <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800d110:	4a88      	ldr	r2, [pc, #544]	; (800d334 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d035      	beq.n	800d182 <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800d116:	4a88      	ldr	r2, [pc, #544]	; (800d338 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d03e      	beq.n	800d19a <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800d11c:	4a87      	ldr	r2, [pc, #540]	; (800d33c <RemapAndLinkDMAtoUARTRx+0x638>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d000      	beq.n	800d124 <RemapAndLinkDMAtoUARTRx+0x420>
 800d122:	e637      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800d124:	4a86      	ldr	r2, [pc, #536]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d126:	23a8      	movs	r3, #168	; 0xa8
 800d128:	58d4      	ldr	r4, [r2, r3]
 800d12a:	4d86      	ldr	r5, [pc, #536]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d12c:	402c      	ands	r4, r5
 800d12e:	50d4      	str	r4, [r2, r3]
 800d130:	58d5      	ldr	r5, [r2, r3]
 800d132:	24d0      	movs	r4, #208	; 0xd0
 800d134:	0124      	lsls	r4, r4, #4
 800d136:	432c      	orrs	r4, r5
 800d138:	50d4      	str	r4, [r2, r3]
 800d13a:	e62b      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800d13c:	4a82      	ldr	r2, [pc, #520]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d13e:	23a8      	movs	r3, #168	; 0xa8
 800d140:	58d4      	ldr	r4, [r2, r3]
 800d142:	250f      	movs	r5, #15
 800d144:	43ac      	bics	r4, r5
 800d146:	50d4      	str	r4, [r2, r3]
 800d148:	58d4      	ldr	r4, [r2, r3]
 800d14a:	3d02      	subs	r5, #2
 800d14c:	432c      	orrs	r4, r5
 800d14e:	50d4      	str	r4, [r2, r3]
 800d150:	e620      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800d152:	4a7d      	ldr	r2, [pc, #500]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d154:	23a8      	movs	r3, #168	; 0xa8
 800d156:	58d4      	ldr	r4, [r2, r3]
 800d158:	4d7a      	ldr	r5, [pc, #488]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d15a:	402c      	ands	r4, r5
 800d15c:	50d4      	str	r4, [r2, r3]
 800d15e:	58d5      	ldr	r5, [r2, r3]
 800d160:	24d0      	movs	r4, #208	; 0xd0
 800d162:	0124      	lsls	r4, r4, #4
 800d164:	432c      	orrs	r4, r5
 800d166:	50d4      	str	r4, [r2, r3]
 800d168:	e614      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800d16a:	4a77      	ldr	r2, [pc, #476]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d16c:	23a8      	movs	r3, #168	; 0xa8
 800d16e:	58d4      	ldr	r4, [r2, r3]
 800d170:	4d76      	ldr	r5, [pc, #472]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x648>)
 800d172:	402c      	ands	r4, r5
 800d174:	50d4      	str	r4, [r2, r3]
 800d176:	58d5      	ldr	r5, [r2, r3]
 800d178:	24d0      	movs	r4, #208	; 0xd0
 800d17a:	0324      	lsls	r4, r4, #12
 800d17c:	432c      	orrs	r4, r5
 800d17e:	50d4      	str	r4, [r2, r3]
 800d180:	e608      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800d182:	4a71      	ldr	r2, [pc, #452]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d184:	23a8      	movs	r3, #168	; 0xa8
 800d186:	58d4      	ldr	r4, [r2, r3]
 800d188:	4d71      	ldr	r5, [pc, #452]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d18a:	402c      	ands	r4, r5
 800d18c:	50d4      	str	r4, [r2, r3]
 800d18e:	58d5      	ldr	r5, [r2, r3]
 800d190:	24d0      	movs	r4, #208	; 0xd0
 800d192:	0424      	lsls	r4, r4, #16
 800d194:	432c      	orrs	r4, r5
 800d196:	50d4      	str	r4, [r2, r3]
 800d198:	e5fc      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800d19a:	4a69      	ldr	r2, [pc, #420]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d19c:	23a8      	movs	r3, #168	; 0xa8
 800d19e:	58d4      	ldr	r4, [r2, r3]
 800d1a0:	25f0      	movs	r5, #240	; 0xf0
 800d1a2:	43ac      	bics	r4, r5
 800d1a4:	50d4      	str	r4, [r2, r3]
 800d1a6:	58d4      	ldr	r4, [r2, r3]
 800d1a8:	3d20      	subs	r5, #32
 800d1aa:	432c      	orrs	r4, r5
 800d1ac:	50d4      	str	r4, [r2, r3]
 800d1ae:	e5f1      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800d1b0:	4a69      	ldr	r2, [pc, #420]	; (800d358 <RemapAndLinkDMAtoUARTRx+0x654>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d159      	bne.n	800d26a <RemapAndLinkDMAtoUARTRx+0x566>
 800d1b6:	680b      	ldr	r3, [r1, #0]
 800d1b8:	4a5b      	ldr	r2, [pc, #364]	; (800d328 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d01b      	beq.n	800d1f6 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800d1be:	4a5b      	ldr	r2, [pc, #364]	; (800d32c <RemapAndLinkDMAtoUARTRx+0x628>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d023      	beq.n	800d20c <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800d1c4:	4a5a      	ldr	r2, [pc, #360]	; (800d330 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d02c      	beq.n	800d224 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800d1ca:	4a5a      	ldr	r2, [pc, #360]	; (800d334 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d1cc:	4293      	cmp	r3, r2
 800d1ce:	d035      	beq.n	800d23c <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800d1d0:	4a59      	ldr	r2, [pc, #356]	; (800d338 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d03e      	beq.n	800d254 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d1d6:	4a59      	ldr	r2, [pc, #356]	; (800d33c <RemapAndLinkDMAtoUARTRx+0x638>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d000      	beq.n	800d1de <RemapAndLinkDMAtoUARTRx+0x4da>
 800d1dc:	e5da      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d1de:	4a58      	ldr	r2, [pc, #352]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d1e0:	23a8      	movs	r3, #168	; 0xa8
 800d1e2:	58d4      	ldr	r4, [r2, r3]
 800d1e4:	4d57      	ldr	r5, [pc, #348]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d1e6:	402c      	ands	r4, r5
 800d1e8:	50d4      	str	r4, [r2, r3]
 800d1ea:	58d5      	ldr	r5, [r2, r3]
 800d1ec:	24e0      	movs	r4, #224	; 0xe0
 800d1ee:	0124      	lsls	r4, r4, #4
 800d1f0:	432c      	orrs	r4, r5
 800d1f2:	50d4      	str	r4, [r2, r3]
 800d1f4:	e5ce      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d1f6:	4a54      	ldr	r2, [pc, #336]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d1f8:	23a8      	movs	r3, #168	; 0xa8
 800d1fa:	58d4      	ldr	r4, [r2, r3]
 800d1fc:	250f      	movs	r5, #15
 800d1fe:	43ac      	bics	r4, r5
 800d200:	50d4      	str	r4, [r2, r3]
 800d202:	58d4      	ldr	r4, [r2, r3]
 800d204:	3d01      	subs	r5, #1
 800d206:	432c      	orrs	r4, r5
 800d208:	50d4      	str	r4, [r2, r3]
 800d20a:	e5c3      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d20c:	4a4e      	ldr	r2, [pc, #312]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d20e:	23a8      	movs	r3, #168	; 0xa8
 800d210:	58d4      	ldr	r4, [r2, r3]
 800d212:	4d4c      	ldr	r5, [pc, #304]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d214:	402c      	ands	r4, r5
 800d216:	50d4      	str	r4, [r2, r3]
 800d218:	58d5      	ldr	r5, [r2, r3]
 800d21a:	24e0      	movs	r4, #224	; 0xe0
 800d21c:	0124      	lsls	r4, r4, #4
 800d21e:	432c      	orrs	r4, r5
 800d220:	50d4      	str	r4, [r2, r3]
 800d222:	e5b7      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d224:	4a48      	ldr	r2, [pc, #288]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d226:	23a8      	movs	r3, #168	; 0xa8
 800d228:	58d4      	ldr	r4, [r2, r3]
 800d22a:	4d48      	ldr	r5, [pc, #288]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x648>)
 800d22c:	402c      	ands	r4, r5
 800d22e:	50d4      	str	r4, [r2, r3]
 800d230:	58d5      	ldr	r5, [r2, r3]
 800d232:	24e0      	movs	r4, #224	; 0xe0
 800d234:	0324      	lsls	r4, r4, #12
 800d236:	432c      	orrs	r4, r5
 800d238:	50d4      	str	r4, [r2, r3]
 800d23a:	e5ab      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d23c:	4a42      	ldr	r2, [pc, #264]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d23e:	23a8      	movs	r3, #168	; 0xa8
 800d240:	58d4      	ldr	r4, [r2, r3]
 800d242:	4d43      	ldr	r5, [pc, #268]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d244:	402c      	ands	r4, r5
 800d246:	50d4      	str	r4, [r2, r3]
 800d248:	58d5      	ldr	r5, [r2, r3]
 800d24a:	24e0      	movs	r4, #224	; 0xe0
 800d24c:	0424      	lsls	r4, r4, #16
 800d24e:	432c      	orrs	r4, r5
 800d250:	50d4      	str	r4, [r2, r3]
 800d252:	e59f      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d254:	4a3a      	ldr	r2, [pc, #232]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d256:	23a8      	movs	r3, #168	; 0xa8
 800d258:	58d4      	ldr	r4, [r2, r3]
 800d25a:	25f0      	movs	r5, #240	; 0xf0
 800d25c:	43ac      	bics	r4, r5
 800d25e:	50d4      	str	r4, [r2, r3]
 800d260:	58d4      	ldr	r4, [r2, r3]
 800d262:	3d10      	subs	r5, #16
 800d264:	432c      	orrs	r4, r5
 800d266:	50d4      	str	r4, [r2, r3]
 800d268:	e594      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800d26a:	4a3c      	ldr	r2, [pc, #240]	; (800d35c <RemapAndLinkDMAtoUARTRx+0x658>)
 800d26c:	4293      	cmp	r3, r2
 800d26e:	d000      	beq.n	800d272 <RemapAndLinkDMAtoUARTRx+0x56e>
 800d270:	e590      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
 800d272:	680b      	ldr	r3, [r1, #0]
 800d274:	4a2c      	ldr	r2, [pc, #176]	; (800d328 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d01b      	beq.n	800d2b2 <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800d27a:	4a2c      	ldr	r2, [pc, #176]	; (800d32c <RemapAndLinkDMAtoUARTRx+0x628>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d022      	beq.n	800d2c6 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800d280:	4a2b      	ldr	r2, [pc, #172]	; (800d330 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d02b      	beq.n	800d2de <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800d286:	4a2b      	ldr	r2, [pc, #172]	; (800d334 <RemapAndLinkDMAtoUARTRx+0x630>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d034      	beq.n	800d2f6 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800d28c:	4a2a      	ldr	r2, [pc, #168]	; (800d338 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	d03d      	beq.n	800d30e <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800d292:	4a2a      	ldr	r2, [pc, #168]	; (800d33c <RemapAndLinkDMAtoUARTRx+0x638>)
 800d294:	4293      	cmp	r3, r2
 800d296:	d000      	beq.n	800d29a <RemapAndLinkDMAtoUARTRx+0x596>
 800d298:	e57c      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800d29a:	4a29      	ldr	r2, [pc, #164]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d29c:	23a8      	movs	r3, #168	; 0xa8
 800d29e:	58d4      	ldr	r4, [r2, r3]
 800d2a0:	4d28      	ldr	r5, [pc, #160]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d2a2:	402c      	ands	r4, r5
 800d2a4:	50d4      	str	r4, [r2, r3]
 800d2a6:	58d5      	ldr	r5, [r2, r3]
 800d2a8:	24f0      	movs	r4, #240	; 0xf0
 800d2aa:	0124      	lsls	r4, r4, #4
 800d2ac:	432c      	orrs	r4, r5
 800d2ae:	50d4      	str	r4, [r2, r3]
 800d2b0:	e570      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d2b2:	4a25      	ldr	r2, [pc, #148]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2b4:	23a8      	movs	r3, #168	; 0xa8
 800d2b6:	58d5      	ldr	r5, [r2, r3]
 800d2b8:	260f      	movs	r6, #15
 800d2ba:	43b5      	bics	r5, r6
 800d2bc:	50d5      	str	r5, [r2, r3]
 800d2be:	58d4      	ldr	r4, [r2, r3]
 800d2c0:	4334      	orrs	r4, r6
 800d2c2:	50d4      	str	r4, [r2, r3]
 800d2c4:	e566      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d2c6:	4a20      	ldr	r2, [pc, #128]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2c8:	23a8      	movs	r3, #168	; 0xa8
 800d2ca:	58d4      	ldr	r4, [r2, r3]
 800d2cc:	4d1d      	ldr	r5, [pc, #116]	; (800d344 <RemapAndLinkDMAtoUARTRx+0x640>)
 800d2ce:	402c      	ands	r4, r5
 800d2d0:	50d4      	str	r4, [r2, r3]
 800d2d2:	58d5      	ldr	r5, [r2, r3]
 800d2d4:	24f0      	movs	r4, #240	; 0xf0
 800d2d6:	0124      	lsls	r4, r4, #4
 800d2d8:	432c      	orrs	r4, r5
 800d2da:	50d4      	str	r4, [r2, r3]
 800d2dc:	e55a      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800d2de:	4a1a      	ldr	r2, [pc, #104]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2e0:	23a8      	movs	r3, #168	; 0xa8
 800d2e2:	58d4      	ldr	r4, [r2, r3]
 800d2e4:	4d19      	ldr	r5, [pc, #100]	; (800d34c <RemapAndLinkDMAtoUARTRx+0x648>)
 800d2e6:	402c      	ands	r4, r5
 800d2e8:	50d4      	str	r4, [r2, r3]
 800d2ea:	58d5      	ldr	r5, [r2, r3]
 800d2ec:	24f0      	movs	r4, #240	; 0xf0
 800d2ee:	0324      	lsls	r4, r4, #12
 800d2f0:	432c      	orrs	r4, r5
 800d2f2:	50d4      	str	r4, [r2, r3]
 800d2f4:	e54e      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800d2f6:	4a14      	ldr	r2, [pc, #80]	; (800d348 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2f8:	23a8      	movs	r3, #168	; 0xa8
 800d2fa:	58d4      	ldr	r4, [r2, r3]
 800d2fc:	4d14      	ldr	r5, [pc, #80]	; (800d350 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d2fe:	402c      	ands	r4, r5
 800d300:	50d4      	str	r4, [r2, r3]
 800d302:	58d5      	ldr	r5, [r2, r3]
 800d304:	24f0      	movs	r4, #240	; 0xf0
 800d306:	0424      	lsls	r4, r4, #16
 800d308:	432c      	orrs	r4, r5
 800d30a:	50d4      	str	r4, [r2, r3]
 800d30c:	e542      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d30e:	4a0c      	ldr	r2, [pc, #48]	; (800d340 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d310:	23a8      	movs	r3, #168	; 0xa8
 800d312:	58d5      	ldr	r5, [r2, r3]
 800d314:	26f0      	movs	r6, #240	; 0xf0
 800d316:	43b5      	bics	r5, r6
 800d318:	50d5      	str	r5, [r2, r3]
 800d31a:	58d4      	ldr	r4, [r2, r3]
 800d31c:	4334      	orrs	r4, r6
 800d31e:	50d4      	str	r4, [r2, r3]
 800d320:	e538      	b.n	800cd94 <RemapAndLinkDMAtoUARTRx+0x90>
 800d322:	46c0      	nop			; (mov r8, r8)
 800d324:	40005000 	.word	0x40005000
 800d328:	40020008 	.word	0x40020008
 800d32c:	40020030 	.word	0x40020030
 800d330:	40020058 	.word	0x40020058
 800d334:	4002006c 	.word	0x4002006c
 800d338:	4002041c 	.word	0x4002041c
 800d33c:	40020430 	.word	0x40020430
 800d340:	40020400 	.word	0x40020400
 800d344:	fffff0ff 	.word	0xfffff0ff
 800d348:	40020000 	.word	0x40020000
 800d34c:	fff0ffff 	.word	0xfff0ffff
 800d350:	ff0fffff 	.word	0xff0fffff
 800d354:	40011400 	.word	0x40011400
 800d358:	40011800 	.word	0x40011800
 800d35c:	40011c00 	.word	0x40011c00

0800d360 <DMA_MSG_RX_Setup>:
{	
 800d360:	b570      	push	{r4, r5, r6, lr}
 800d362:	0004      	movs	r4, r0
 800d364:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800d366:	f7ff fccd 	bl	800cd04 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d36a:	2100      	movs	r1, #0
 800d36c:	0028      	movs	r0, r5
 800d36e:	f7ff fc13 	bl	800cb98 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800d372:	0020      	movs	r0, r4
 800d374:	f7ff fb52 	bl	800ca1c <GetPort>
 800d378:	3801      	subs	r0, #1
 800d37a:	0041      	lsls	r1, r0, #1
 800d37c:	1809      	adds	r1, r1, r0
 800d37e:	0189      	lsls	r1, r1, #6
 800d380:	4803      	ldr	r0, [pc, #12]	; (800d390 <DMA_MSG_RX_Setup+0x30>)
 800d382:	1809      	adds	r1, r1, r0
 800d384:	22c0      	movs	r2, #192	; 0xc0
 800d386:	0020      	movs	r0, r4
 800d388:	f006 fbac 	bl	8013ae4 <HAL_UART_Receive_DMA>
}
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	46c0      	nop			; (mov r8, r8)
 800d390:	20001348 	.word	0x20001348

0800d394 <SetupMessagingRxDMAs>:
{	
 800d394:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800d396:	4b1b      	ldr	r3, [pc, #108]	; (800d404 <SetupMessagingRxDMAs+0x70>)
 800d398:	785b      	ldrb	r3, [r3, #1]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d014      	beq.n	800d3c8 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800d39e:	4b19      	ldr	r3, [pc, #100]	; (800d404 <SetupMessagingRxDMAs+0x70>)
 800d3a0:	789b      	ldrb	r3, [r3, #2]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d015      	beq.n	800d3d2 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800d3a6:	4b17      	ldr	r3, [pc, #92]	; (800d404 <SetupMessagingRxDMAs+0x70>)
 800d3a8:	78db      	ldrb	r3, [r3, #3]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d016      	beq.n	800d3dc <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800d3ae:	4b15      	ldr	r3, [pc, #84]	; (800d404 <SetupMessagingRxDMAs+0x70>)
 800d3b0:	791b      	ldrb	r3, [r3, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d017      	beq.n	800d3e6 <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800d3b6:	4b13      	ldr	r3, [pc, #76]	; (800d404 <SetupMessagingRxDMAs+0x70>)
 800d3b8:	795b      	ldrb	r3, [r3, #5]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d018      	beq.n	800d3f0 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800d3be:	4b11      	ldr	r3, [pc, #68]	; (800d404 <SetupMessagingRxDMAs+0x70>)
 800d3c0:	799b      	ldrb	r3, [r3, #6]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d019      	beq.n	800d3fa <SetupMessagingRxDMAs+0x66>
}
 800d3c6:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800d3c8:	490f      	ldr	r1, [pc, #60]	; (800d408 <SetupMessagingRxDMAs+0x74>)
 800d3ca:	4810      	ldr	r0, [pc, #64]	; (800d40c <SetupMessagingRxDMAs+0x78>)
 800d3cc:	f7ff ffc8 	bl	800d360 <DMA_MSG_RX_Setup>
 800d3d0:	e7e5      	b.n	800d39e <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800d3d2:	490f      	ldr	r1, [pc, #60]	; (800d410 <SetupMessagingRxDMAs+0x7c>)
 800d3d4:	480f      	ldr	r0, [pc, #60]	; (800d414 <SetupMessagingRxDMAs+0x80>)
 800d3d6:	f7ff ffc3 	bl	800d360 <DMA_MSG_RX_Setup>
 800d3da:	e7e4      	b.n	800d3a6 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800d3dc:	490e      	ldr	r1, [pc, #56]	; (800d418 <SetupMessagingRxDMAs+0x84>)
 800d3de:	480f      	ldr	r0, [pc, #60]	; (800d41c <SetupMessagingRxDMAs+0x88>)
 800d3e0:	f7ff ffbe 	bl	800d360 <DMA_MSG_RX_Setup>
 800d3e4:	e7e3      	b.n	800d3ae <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800d3e6:	490e      	ldr	r1, [pc, #56]	; (800d420 <SetupMessagingRxDMAs+0x8c>)
 800d3e8:	480e      	ldr	r0, [pc, #56]	; (800d424 <SetupMessagingRxDMAs+0x90>)
 800d3ea:	f7ff ffb9 	bl	800d360 <DMA_MSG_RX_Setup>
 800d3ee:	e7e2      	b.n	800d3b6 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800d3f0:	490d      	ldr	r1, [pc, #52]	; (800d428 <SetupMessagingRxDMAs+0x94>)
 800d3f2:	480e      	ldr	r0, [pc, #56]	; (800d42c <SetupMessagingRxDMAs+0x98>)
 800d3f4:	f7ff ffb4 	bl	800d360 <DMA_MSG_RX_Setup>
 800d3f8:	e7e1      	b.n	800d3be <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800d3fa:	490d      	ldr	r1, [pc, #52]	; (800d430 <SetupMessagingRxDMAs+0x9c>)
 800d3fc:	480d      	ldr	r0, [pc, #52]	; (800d434 <SetupMessagingRxDMAs+0xa0>)
 800d3fe:	f7ff ffaf 	bl	800d360 <DMA_MSG_RX_Setup>
}
 800d402:	e7e0      	b.n	800d3c6 <SetupMessagingRxDMAs+0x32>
 800d404:	2000116c 	.word	0x2000116c
 800d408:	20001c24 	.word	0x20001c24
 800d40c:	20007170 	.word	0x20007170
 800d410:	20001c5c 	.word	0x20001c5c
 800d414:	200071e4 	.word	0x200071e4
 800d418:	20001c94 	.word	0x20001c94
 800d41c:	200070f4 	.word	0x200070f4
 800d420:	20001ccc 	.word	0x20001ccc
 800d424:	20006f8c 	.word	0x20006f8c
 800d428:	20001d04 	.word	0x20001d04
 800d42c:	2000707c 	.word	0x2000707c
 800d430:	20001d3c 	.word	0x20001d3c
 800d434:	20007004 	.word	0x20007004

0800d438 <DMA_STREAM_Setup>:
{	
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	0005      	movs	r5, r0
 800d43c:	000f      	movs	r7, r1
 800d43e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800d440:	f7ff faec 	bl	800ca1c <GetPort>
	hDMA = &streamDMA[port-1];
 800d444:	3801      	subs	r0, #1
 800d446:	00c4      	lsls	r4, r0, #3
 800d448:	1a24      	subs	r4, r4, r0
 800d44a:	00e4      	lsls	r4, r4, #3
 800d44c:	4809      	ldr	r0, [pc, #36]	; (800d474 <DMA_STREAM_Setup+0x3c>)
 800d44e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d450:	0021      	movs	r1, r4
 800d452:	0028      	movs	r0, r5
 800d454:	f7ff fc56 	bl	800cd04 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d458:	2101      	movs	r1, #1
 800d45a:	0020      	movs	r0, r4
 800d45c:	f7ff fb9c 	bl	800cb98 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d460:	2369      	movs	r3, #105	; 0x69
 800d462:	2201      	movs	r2, #1
 800d464:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	3128      	adds	r1, #40	; 0x28
 800d46a:	0032      	movs	r2, r6
 800d46c:	0028      	movs	r0, r5
 800d46e:	f006 fb39 	bl	8013ae4 <HAL_UART_Receive_DMA>
}
 800d472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d474:	20001e1c 	.word	0x20001e1c

0800d478 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d478:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d47a:	6803      	ldr	r3, [r0, #0]
 800d47c:	4abd      	ldr	r2, [pc, #756]	; (800d774 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d02f      	beq.n	800d4e2 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d482:	4abd      	ldr	r2, [pc, #756]	; (800d778 <RemapAndLinkDMAtoUARTTx+0x300>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d100      	bne.n	800d48a <RemapAndLinkDMAtoUARTTx+0x12>
 800d488:	e087      	b.n	800d59a <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d48a:	4abc      	ldr	r2, [pc, #752]	; (800d77c <RemapAndLinkDMAtoUARTTx+0x304>)
 800d48c:	4293      	cmp	r3, r2
 800d48e:	d100      	bne.n	800d492 <RemapAndLinkDMAtoUARTTx+0x1a>
 800d490:	e0dc      	b.n	800d64c <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d492:	4abb      	ldr	r2, [pc, #748]	; (800d780 <RemapAndLinkDMAtoUARTTx+0x308>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d000      	beq.n	800d49a <RemapAndLinkDMAtoUARTTx+0x22>
 800d498:	e18a      	b.n	800d7b0 <RemapAndLinkDMAtoUARTTx+0x338>
 800d49a:	680b      	ldr	r3, [r1, #0]
 800d49c:	4ab9      	ldr	r2, [pc, #740]	; (800d784 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d100      	bne.n	800d4a4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800d4a2:	e12d      	b.n	800d700 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d4a4:	4ab8      	ldr	r2, [pc, #736]	; (800d788 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d100      	bne.n	800d4ac <RemapAndLinkDMAtoUARTTx+0x34>
 800d4aa:	e134      	b.n	800d716 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d4ac:	4ab7      	ldr	r2, [pc, #732]	; (800d78c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d100      	bne.n	800d4b4 <RemapAndLinkDMAtoUARTTx+0x3c>
 800d4b2:	e13c      	b.n	800d72e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d4b4:	4ab6      	ldr	r2, [pc, #728]	; (800d790 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d100      	bne.n	800d4bc <RemapAndLinkDMAtoUARTTx+0x44>
 800d4ba:	e144      	b.n	800d746 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d4bc:	4ab5      	ldr	r2, [pc, #724]	; (800d794 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d100      	bne.n	800d4c4 <RemapAndLinkDMAtoUARTTx+0x4c>
 800d4c2:	e14b      	b.n	800d75c <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d4c4:	4ab4      	ldr	r2, [pc, #720]	; (800d798 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d11e      	bne.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d4ca:	4ab4      	ldr	r2, [pc, #720]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d4cc:	23a8      	movs	r3, #168	; 0xa8
 800d4ce:	58d4      	ldr	r4, [r2, r3]
 800d4d0:	4db3      	ldr	r5, [pc, #716]	; (800d7a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d4d2:	402c      	ands	r4, r5
 800d4d4:	50d4      	str	r4, [r2, r3]
 800d4d6:	58d5      	ldr	r5, [r2, r3]
 800d4d8:	24b0      	movs	r4, #176	; 0xb0
 800d4da:	0324      	lsls	r4, r4, #12
 800d4dc:	432c      	orrs	r4, r5
 800d4de:	50d4      	str	r4, [r2, r3]
 800d4e0:	e012      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d4e2:	680b      	ldr	r3, [r1, #0]
 800d4e4:	4aa7      	ldr	r2, [pc, #668]	; (800d784 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d4e6:	4293      	cmp	r3, r2
 800d4e8:	d011      	beq.n	800d50e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d4ea:	4aa7      	ldr	r2, [pc, #668]	; (800d788 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d019      	beq.n	800d524 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d4f0:	4aa6      	ldr	r2, [pc, #664]	; (800d78c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d022      	beq.n	800d53c <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d4f6:	4aa6      	ldr	r2, [pc, #664]	; (800d790 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d02b      	beq.n	800d554 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d4fc:	4aa5      	ldr	r2, [pc, #660]	; (800d794 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d033      	beq.n	800d56a <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d502:	4aa5      	ldr	r2, [pc, #660]	; (800d798 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d504:	4293      	cmp	r3, r2
 800d506:	d03c      	beq.n	800d582 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d508:	6601      	str	r1, [r0, #96]	; 0x60
 800d50a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d50c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d50e:	4aa5      	ldr	r2, [pc, #660]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d510:	23a8      	movs	r3, #168	; 0xa8
 800d512:	58d4      	ldr	r4, [r2, r3]
 800d514:	25f0      	movs	r5, #240	; 0xf0
 800d516:	43ac      	bics	r4, r5
 800d518:	50d4      	str	r4, [r2, r3]
 800d51a:	58d4      	ldr	r4, [r2, r3]
 800d51c:	3d70      	subs	r5, #112	; 0x70
 800d51e:	432c      	orrs	r4, r5
 800d520:	50d4      	str	r4, [r2, r3]
 800d522:	e7f1      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d524:	4a9f      	ldr	r2, [pc, #636]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d526:	23a8      	movs	r3, #168	; 0xa8
 800d528:	58d4      	ldr	r4, [r2, r3]
 800d52a:	4d9f      	ldr	r5, [pc, #636]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d52c:	402c      	ands	r4, r5
 800d52e:	50d4      	str	r4, [r2, r3]
 800d530:	58d5      	ldr	r5, [r2, r3]
 800d532:	2480      	movs	r4, #128	; 0x80
 800d534:	0224      	lsls	r4, r4, #8
 800d536:	432c      	orrs	r4, r5
 800d538:	50d4      	str	r4, [r2, r3]
 800d53a:	e7e5      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d53c:	4a99      	ldr	r2, [pc, #612]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d53e:	23a8      	movs	r3, #168	; 0xa8
 800d540:	58d4      	ldr	r4, [r2, r3]
 800d542:	4d9a      	ldr	r5, [pc, #616]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800d544:	402c      	ands	r4, r5
 800d546:	50d4      	str	r4, [r2, r3]
 800d548:	58d5      	ldr	r5, [r2, r3]
 800d54a:	2480      	movs	r4, #128	; 0x80
 800d54c:	0524      	lsls	r4, r4, #20
 800d54e:	432c      	orrs	r4, r5
 800d550:	50d4      	str	r4, [r2, r3]
 800d552:	e7d9      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d554:	4a91      	ldr	r2, [pc, #580]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d556:	23a8      	movs	r3, #168	; 0xa8
 800d558:	58d4      	ldr	r4, [r2, r3]
 800d55a:	250f      	movs	r5, #15
 800d55c:	43ac      	bics	r4, r5
 800d55e:	50d4      	str	r4, [r2, r3]
 800d560:	58d4      	ldr	r4, [r2, r3]
 800d562:	3d07      	subs	r5, #7
 800d564:	432c      	orrs	r4, r5
 800d566:	50d4      	str	r4, [r2, r3]
 800d568:	e7ce      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d56a:	4a8c      	ldr	r2, [pc, #560]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d56c:	23a8      	movs	r3, #168	; 0xa8
 800d56e:	58d4      	ldr	r4, [r2, r3]
 800d570:	4d8d      	ldr	r5, [pc, #564]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d572:	402c      	ands	r4, r5
 800d574:	50d4      	str	r4, [r2, r3]
 800d576:	58d5      	ldr	r5, [r2, r3]
 800d578:	2480      	movs	r4, #128	; 0x80
 800d57a:	0224      	lsls	r4, r4, #8
 800d57c:	432c      	orrs	r4, r5
 800d57e:	50d4      	str	r4, [r2, r3]
 800d580:	e7c2      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d582:	4a86      	ldr	r2, [pc, #536]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d584:	23a8      	movs	r3, #168	; 0xa8
 800d586:	58d4      	ldr	r4, [r2, r3]
 800d588:	4d85      	ldr	r5, [pc, #532]	; (800d7a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d58a:	402c      	ands	r4, r5
 800d58c:	50d4      	str	r4, [r2, r3]
 800d58e:	58d5      	ldr	r5, [r2, r3]
 800d590:	2480      	movs	r4, #128	; 0x80
 800d592:	0324      	lsls	r4, r4, #12
 800d594:	432c      	orrs	r4, r5
 800d596:	50d4      	str	r4, [r2, r3]
 800d598:	e7b6      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d59a:	680b      	ldr	r3, [r1, #0]
 800d59c:	4a79      	ldr	r2, [pc, #484]	; (800d784 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d01a      	beq.n	800d5d8 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d5a2:	4a79      	ldr	r2, [pc, #484]	; (800d788 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d022      	beq.n	800d5ee <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d5a8:	4a78      	ldr	r2, [pc, #480]	; (800d78c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d5aa:	4293      	cmp	r3, r2
 800d5ac:	d02b      	beq.n	800d606 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d5ae:	4a78      	ldr	r2, [pc, #480]	; (800d790 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d034      	beq.n	800d61e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d5b4:	4a77      	ldr	r2, [pc, #476]	; (800d794 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d03c      	beq.n	800d634 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d5ba:	4a77      	ldr	r2, [pc, #476]	; (800d798 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d5bc:	4293      	cmp	r3, r2
 800d5be:	d1a3      	bne.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d5c0:	4a76      	ldr	r2, [pc, #472]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d5c2:	23a8      	movs	r3, #168	; 0xa8
 800d5c4:	58d4      	ldr	r4, [r2, r3]
 800d5c6:	4d76      	ldr	r5, [pc, #472]	; (800d7a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d5c8:	402c      	ands	r4, r5
 800d5ca:	50d4      	str	r4, [r2, r3]
 800d5cc:	58d5      	ldr	r5, [r2, r3]
 800d5ce:	2490      	movs	r4, #144	; 0x90
 800d5d0:	0324      	lsls	r4, r4, #12
 800d5d2:	432c      	orrs	r4, r5
 800d5d4:	50d4      	str	r4, [r2, r3]
 800d5d6:	e797      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d5d8:	4a72      	ldr	r2, [pc, #456]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5da:	23a8      	movs	r3, #168	; 0xa8
 800d5dc:	58d4      	ldr	r4, [r2, r3]
 800d5de:	25f0      	movs	r5, #240	; 0xf0
 800d5e0:	43ac      	bics	r4, r5
 800d5e2:	50d4      	str	r4, [r2, r3]
 800d5e4:	58d4      	ldr	r4, [r2, r3]
 800d5e6:	3d60      	subs	r5, #96	; 0x60
 800d5e8:	432c      	orrs	r4, r5
 800d5ea:	50d4      	str	r4, [r2, r3]
 800d5ec:	e78c      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d5ee:	4a6d      	ldr	r2, [pc, #436]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5f0:	23a8      	movs	r3, #168	; 0xa8
 800d5f2:	58d4      	ldr	r4, [r2, r3]
 800d5f4:	4d6c      	ldr	r5, [pc, #432]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d5f6:	402c      	ands	r4, r5
 800d5f8:	50d4      	str	r4, [r2, r3]
 800d5fa:	58d5      	ldr	r5, [r2, r3]
 800d5fc:	2490      	movs	r4, #144	; 0x90
 800d5fe:	0224      	lsls	r4, r4, #8
 800d600:	432c      	orrs	r4, r5
 800d602:	50d4      	str	r4, [r2, r3]
 800d604:	e780      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d606:	4a67      	ldr	r2, [pc, #412]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d608:	23a8      	movs	r3, #168	; 0xa8
 800d60a:	58d4      	ldr	r4, [r2, r3]
 800d60c:	4d67      	ldr	r5, [pc, #412]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800d60e:	402c      	ands	r4, r5
 800d610:	50d4      	str	r4, [r2, r3]
 800d612:	58d5      	ldr	r5, [r2, r3]
 800d614:	2490      	movs	r4, #144	; 0x90
 800d616:	0524      	lsls	r4, r4, #20
 800d618:	432c      	orrs	r4, r5
 800d61a:	50d4      	str	r4, [r2, r3]
 800d61c:	e774      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d61e:	4a5f      	ldr	r2, [pc, #380]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d620:	23a8      	movs	r3, #168	; 0xa8
 800d622:	58d4      	ldr	r4, [r2, r3]
 800d624:	250f      	movs	r5, #15
 800d626:	43ac      	bics	r4, r5
 800d628:	50d4      	str	r4, [r2, r3]
 800d62a:	58d4      	ldr	r4, [r2, r3]
 800d62c:	3d06      	subs	r5, #6
 800d62e:	432c      	orrs	r4, r5
 800d630:	50d4      	str	r4, [r2, r3]
 800d632:	e769      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d634:	4a59      	ldr	r2, [pc, #356]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d636:	23a8      	movs	r3, #168	; 0xa8
 800d638:	58d4      	ldr	r4, [r2, r3]
 800d63a:	4d5b      	ldr	r5, [pc, #364]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d63c:	402c      	ands	r4, r5
 800d63e:	50d4      	str	r4, [r2, r3]
 800d640:	58d5      	ldr	r5, [r2, r3]
 800d642:	2490      	movs	r4, #144	; 0x90
 800d644:	0224      	lsls	r4, r4, #8
 800d646:	432c      	orrs	r4, r5
 800d648:	50d4      	str	r4, [r2, r3]
 800d64a:	e75d      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d64c:	680b      	ldr	r3, [r1, #0]
 800d64e:	4a4d      	ldr	r2, [pc, #308]	; (800d784 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d01b      	beq.n	800d68c <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d654:	4a4c      	ldr	r2, [pc, #304]	; (800d788 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d023      	beq.n	800d6a2 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d65a:	4a4c      	ldr	r2, [pc, #304]	; (800d78c <RemapAndLinkDMAtoUARTTx+0x314>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d02c      	beq.n	800d6ba <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d660:	4a4b      	ldr	r2, [pc, #300]	; (800d790 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d035      	beq.n	800d6d2 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d666:	4a4b      	ldr	r2, [pc, #300]	; (800d794 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d03d      	beq.n	800d6e8 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d66c:	4a4a      	ldr	r2, [pc, #296]	; (800d798 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d000      	beq.n	800d674 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d672:	e749      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d674:	4a49      	ldr	r2, [pc, #292]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d676:	23a8      	movs	r3, #168	; 0xa8
 800d678:	58d4      	ldr	r4, [r2, r3]
 800d67a:	4d49      	ldr	r5, [pc, #292]	; (800d7a0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d67c:	402c      	ands	r4, r5
 800d67e:	50d4      	str	r4, [r2, r3]
 800d680:	58d5      	ldr	r5, [r2, r3]
 800d682:	24a0      	movs	r4, #160	; 0xa0
 800d684:	0324      	lsls	r4, r4, #12
 800d686:	432c      	orrs	r4, r5
 800d688:	50d4      	str	r4, [r2, r3]
 800d68a:	e73d      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d68c:	4a45      	ldr	r2, [pc, #276]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d68e:	23a8      	movs	r3, #168	; 0xa8
 800d690:	58d4      	ldr	r4, [r2, r3]
 800d692:	25f0      	movs	r5, #240	; 0xf0
 800d694:	43ac      	bics	r4, r5
 800d696:	50d4      	str	r4, [r2, r3]
 800d698:	58d4      	ldr	r4, [r2, r3]
 800d69a:	3d50      	subs	r5, #80	; 0x50
 800d69c:	432c      	orrs	r4, r5
 800d69e:	50d4      	str	r4, [r2, r3]
 800d6a0:	e732      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d6a2:	4a40      	ldr	r2, [pc, #256]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6a4:	23a8      	movs	r3, #168	; 0xa8
 800d6a6:	58d4      	ldr	r4, [r2, r3]
 800d6a8:	4d3f      	ldr	r5, [pc, #252]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d6aa:	402c      	ands	r4, r5
 800d6ac:	50d4      	str	r4, [r2, r3]
 800d6ae:	58d5      	ldr	r5, [r2, r3]
 800d6b0:	24a0      	movs	r4, #160	; 0xa0
 800d6b2:	0224      	lsls	r4, r4, #8
 800d6b4:	432c      	orrs	r4, r5
 800d6b6:	50d4      	str	r4, [r2, r3]
 800d6b8:	e726      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d6ba:	4a3a      	ldr	r2, [pc, #232]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6bc:	23a8      	movs	r3, #168	; 0xa8
 800d6be:	58d4      	ldr	r4, [r2, r3]
 800d6c0:	4d3a      	ldr	r5, [pc, #232]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800d6c2:	402c      	ands	r4, r5
 800d6c4:	50d4      	str	r4, [r2, r3]
 800d6c6:	58d5      	ldr	r5, [r2, r3]
 800d6c8:	24a0      	movs	r4, #160	; 0xa0
 800d6ca:	0524      	lsls	r4, r4, #20
 800d6cc:	432c      	orrs	r4, r5
 800d6ce:	50d4      	str	r4, [r2, r3]
 800d6d0:	e71a      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d6d2:	4a32      	ldr	r2, [pc, #200]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d6d4:	23a8      	movs	r3, #168	; 0xa8
 800d6d6:	58d4      	ldr	r4, [r2, r3]
 800d6d8:	250f      	movs	r5, #15
 800d6da:	43ac      	bics	r4, r5
 800d6dc:	50d4      	str	r4, [r2, r3]
 800d6de:	58d4      	ldr	r4, [r2, r3]
 800d6e0:	3d05      	subs	r5, #5
 800d6e2:	432c      	orrs	r4, r5
 800d6e4:	50d4      	str	r4, [r2, r3]
 800d6e6:	e70f      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d6e8:	4a2c      	ldr	r2, [pc, #176]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d6ea:	23a8      	movs	r3, #168	; 0xa8
 800d6ec:	58d4      	ldr	r4, [r2, r3]
 800d6ee:	4d2e      	ldr	r5, [pc, #184]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d6f0:	402c      	ands	r4, r5
 800d6f2:	50d4      	str	r4, [r2, r3]
 800d6f4:	58d5      	ldr	r5, [r2, r3]
 800d6f6:	24a0      	movs	r4, #160	; 0xa0
 800d6f8:	0224      	lsls	r4, r4, #8
 800d6fa:	432c      	orrs	r4, r5
 800d6fc:	50d4      	str	r4, [r2, r3]
 800d6fe:	e703      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d700:	4a28      	ldr	r2, [pc, #160]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d702:	23a8      	movs	r3, #168	; 0xa8
 800d704:	58d4      	ldr	r4, [r2, r3]
 800d706:	25f0      	movs	r5, #240	; 0xf0
 800d708:	43ac      	bics	r4, r5
 800d70a:	50d4      	str	r4, [r2, r3]
 800d70c:	58d4      	ldr	r4, [r2, r3]
 800d70e:	3d40      	subs	r5, #64	; 0x40
 800d710:	432c      	orrs	r4, r5
 800d712:	50d4      	str	r4, [r2, r3]
 800d714:	e6f8      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d716:	4a23      	ldr	r2, [pc, #140]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d718:	23a8      	movs	r3, #168	; 0xa8
 800d71a:	58d4      	ldr	r4, [r2, r3]
 800d71c:	4d22      	ldr	r5, [pc, #136]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d71e:	402c      	ands	r4, r5
 800d720:	50d4      	str	r4, [r2, r3]
 800d722:	58d5      	ldr	r5, [r2, r3]
 800d724:	24b0      	movs	r4, #176	; 0xb0
 800d726:	0224      	lsls	r4, r4, #8
 800d728:	432c      	orrs	r4, r5
 800d72a:	50d4      	str	r4, [r2, r3]
 800d72c:	e6ec      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d72e:	4a1d      	ldr	r2, [pc, #116]	; (800d7a4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d730:	23a8      	movs	r3, #168	; 0xa8
 800d732:	58d4      	ldr	r4, [r2, r3]
 800d734:	4d1d      	ldr	r5, [pc, #116]	; (800d7ac <RemapAndLinkDMAtoUARTTx+0x334>)
 800d736:	402c      	ands	r4, r5
 800d738:	50d4      	str	r4, [r2, r3]
 800d73a:	58d5      	ldr	r5, [r2, r3]
 800d73c:	24b0      	movs	r4, #176	; 0xb0
 800d73e:	0524      	lsls	r4, r4, #20
 800d740:	432c      	orrs	r4, r5
 800d742:	50d4      	str	r4, [r2, r3]
 800d744:	e6e0      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d746:	4a15      	ldr	r2, [pc, #84]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d748:	23a8      	movs	r3, #168	; 0xa8
 800d74a:	58d4      	ldr	r4, [r2, r3]
 800d74c:	250f      	movs	r5, #15
 800d74e:	43ac      	bics	r4, r5
 800d750:	50d4      	str	r4, [r2, r3]
 800d752:	58d4      	ldr	r4, [r2, r3]
 800d754:	3d04      	subs	r5, #4
 800d756:	432c      	orrs	r4, r5
 800d758:	50d4      	str	r4, [r2, r3]
 800d75a:	e6d5      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d75c:	4a0f      	ldr	r2, [pc, #60]	; (800d79c <RemapAndLinkDMAtoUARTTx+0x324>)
 800d75e:	23a8      	movs	r3, #168	; 0xa8
 800d760:	58d4      	ldr	r4, [r2, r3]
 800d762:	4d11      	ldr	r5, [pc, #68]	; (800d7a8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d764:	402c      	ands	r4, r5
 800d766:	50d4      	str	r4, [r2, r3]
 800d768:	58d5      	ldr	r5, [r2, r3]
 800d76a:	24b0      	movs	r4, #176	; 0xb0
 800d76c:	0224      	lsls	r4, r4, #8
 800d76e:	432c      	orrs	r4, r5
 800d770:	50d4      	str	r4, [r2, r3]
 800d772:	e6c9      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
 800d774:	40013800 	.word	0x40013800
 800d778:	40004400 	.word	0x40004400
 800d77c:	40004800 	.word	0x40004800
 800d780:	40004c00 	.word	0x40004c00
 800d784:	4002001c 	.word	0x4002001c
 800d788:	40020044 	.word	0x40020044
 800d78c:	40020080 	.word	0x40020080
 800d790:	40020408 	.word	0x40020408
 800d794:	40020444 	.word	0x40020444
 800d798:	40020458 	.word	0x40020458
 800d79c:	40020400 	.word	0x40020400
 800d7a0:	fff0ffff 	.word	0xfff0ffff
 800d7a4:	40020000 	.word	0x40020000
 800d7a8:	ffff0fff 	.word	0xffff0fff
 800d7ac:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d7b0:	4ab9      	ldr	r2, [pc, #740]	; (800da98 <RemapAndLinkDMAtoUARTTx+0x620>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d159      	bne.n	800d86a <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d7b6:	680b      	ldr	r3, [r1, #0]
 800d7b8:	4ab8      	ldr	r2, [pc, #736]	; (800da9c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d01b      	beq.n	800d7f6 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d7be:	4ab8      	ldr	r2, [pc, #736]	; (800daa0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d7c0:	4293      	cmp	r3, r2
 800d7c2:	d023      	beq.n	800d80c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d7c4:	4ab7      	ldr	r2, [pc, #732]	; (800daa4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d02c      	beq.n	800d824 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d7ca:	4ab7      	ldr	r2, [pc, #732]	; (800daa8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d035      	beq.n	800d83c <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d7d0:	4ab6      	ldr	r2, [pc, #728]	; (800daac <RemapAndLinkDMAtoUARTTx+0x634>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d03d      	beq.n	800d852 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d7d6:	4ab6      	ldr	r2, [pc, #728]	; (800dab0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d000      	beq.n	800d7de <RemapAndLinkDMAtoUARTTx+0x366>
 800d7dc:	e694      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d7de:	4ab5      	ldr	r2, [pc, #724]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d7e0:	23a8      	movs	r3, #168	; 0xa8
 800d7e2:	58d4      	ldr	r4, [r2, r3]
 800d7e4:	4db4      	ldr	r5, [pc, #720]	; (800dab8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d7e6:	402c      	ands	r4, r5
 800d7e8:	50d4      	str	r4, [r2, r3]
 800d7ea:	58d5      	ldr	r5, [r2, r3]
 800d7ec:	24c0      	movs	r4, #192	; 0xc0
 800d7ee:	0324      	lsls	r4, r4, #12
 800d7f0:	432c      	orrs	r4, r5
 800d7f2:	50d4      	str	r4, [r2, r3]
 800d7f4:	e688      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d7f6:	4ab1      	ldr	r2, [pc, #708]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d7f8:	23a8      	movs	r3, #168	; 0xa8
 800d7fa:	58d4      	ldr	r4, [r2, r3]
 800d7fc:	25f0      	movs	r5, #240	; 0xf0
 800d7fe:	43ac      	bics	r4, r5
 800d800:	50d4      	str	r4, [r2, r3]
 800d802:	58d4      	ldr	r4, [r2, r3]
 800d804:	3d30      	subs	r5, #48	; 0x30
 800d806:	432c      	orrs	r4, r5
 800d808:	50d4      	str	r4, [r2, r3]
 800d80a:	e67d      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d80c:	4aab      	ldr	r2, [pc, #684]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d80e:	23a8      	movs	r3, #168	; 0xa8
 800d810:	58d4      	ldr	r4, [r2, r3]
 800d812:	4dab      	ldr	r5, [pc, #684]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d814:	402c      	ands	r4, r5
 800d816:	50d4      	str	r4, [r2, r3]
 800d818:	58d5      	ldr	r5, [r2, r3]
 800d81a:	24c0      	movs	r4, #192	; 0xc0
 800d81c:	0224      	lsls	r4, r4, #8
 800d81e:	432c      	orrs	r4, r5
 800d820:	50d4      	str	r4, [r2, r3]
 800d822:	e671      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d824:	4aa5      	ldr	r2, [pc, #660]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d826:	23a8      	movs	r3, #168	; 0xa8
 800d828:	58d4      	ldr	r4, [r2, r3]
 800d82a:	4da6      	ldr	r5, [pc, #664]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d82c:	402c      	ands	r4, r5
 800d82e:	50d4      	str	r4, [r2, r3]
 800d830:	58d5      	ldr	r5, [r2, r3]
 800d832:	24c0      	movs	r4, #192	; 0xc0
 800d834:	0524      	lsls	r4, r4, #20
 800d836:	432c      	orrs	r4, r5
 800d838:	50d4      	str	r4, [r2, r3]
 800d83a:	e665      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d83c:	4a9d      	ldr	r2, [pc, #628]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d83e:	23a8      	movs	r3, #168	; 0xa8
 800d840:	58d4      	ldr	r4, [r2, r3]
 800d842:	250f      	movs	r5, #15
 800d844:	43ac      	bics	r4, r5
 800d846:	50d4      	str	r4, [r2, r3]
 800d848:	58d4      	ldr	r4, [r2, r3]
 800d84a:	3d03      	subs	r5, #3
 800d84c:	432c      	orrs	r4, r5
 800d84e:	50d4      	str	r4, [r2, r3]
 800d850:	e65a      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d852:	4a98      	ldr	r2, [pc, #608]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d854:	23a8      	movs	r3, #168	; 0xa8
 800d856:	58d4      	ldr	r4, [r2, r3]
 800d858:	4d99      	ldr	r5, [pc, #612]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d85a:	402c      	ands	r4, r5
 800d85c:	50d4      	str	r4, [r2, r3]
 800d85e:	58d5      	ldr	r5, [r2, r3]
 800d860:	24c0      	movs	r4, #192	; 0xc0
 800d862:	0224      	lsls	r4, r4, #8
 800d864:	432c      	orrs	r4, r5
 800d866:	50d4      	str	r4, [r2, r3]
 800d868:	e64e      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d86a:	4a97      	ldr	r2, [pc, #604]	; (800dac8 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d159      	bne.n	800d924 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800d870:	680b      	ldr	r3, [r1, #0]
 800d872:	4a8a      	ldr	r2, [pc, #552]	; (800da9c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d874:	4293      	cmp	r3, r2
 800d876:	d01b      	beq.n	800d8b0 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d878:	4a89      	ldr	r2, [pc, #548]	; (800daa0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d023      	beq.n	800d8c6 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d87e:	4a89      	ldr	r2, [pc, #548]	; (800daa4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d02c      	beq.n	800d8de <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d884:	4a88      	ldr	r2, [pc, #544]	; (800daa8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d035      	beq.n	800d8f6 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d88a:	4a88      	ldr	r2, [pc, #544]	; (800daac <RemapAndLinkDMAtoUARTTx+0x634>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d03d      	beq.n	800d90c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d890:	4a87      	ldr	r2, [pc, #540]	; (800dab0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d000      	beq.n	800d898 <RemapAndLinkDMAtoUARTTx+0x420>
 800d896:	e637      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d898:	4a86      	ldr	r2, [pc, #536]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d89a:	23a8      	movs	r3, #168	; 0xa8
 800d89c:	58d4      	ldr	r4, [r2, r3]
 800d89e:	4d86      	ldr	r5, [pc, #536]	; (800dab8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d8a0:	402c      	ands	r4, r5
 800d8a2:	50d4      	str	r4, [r2, r3]
 800d8a4:	58d5      	ldr	r5, [r2, r3]
 800d8a6:	24d0      	movs	r4, #208	; 0xd0
 800d8a8:	0324      	lsls	r4, r4, #12
 800d8aa:	432c      	orrs	r4, r5
 800d8ac:	50d4      	str	r4, [r2, r3]
 800d8ae:	e62b      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d8b0:	4a82      	ldr	r2, [pc, #520]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8b2:	23a8      	movs	r3, #168	; 0xa8
 800d8b4:	58d4      	ldr	r4, [r2, r3]
 800d8b6:	25f0      	movs	r5, #240	; 0xf0
 800d8b8:	43ac      	bics	r4, r5
 800d8ba:	50d4      	str	r4, [r2, r3]
 800d8bc:	58d4      	ldr	r4, [r2, r3]
 800d8be:	3d20      	subs	r5, #32
 800d8c0:	432c      	orrs	r4, r5
 800d8c2:	50d4      	str	r4, [r2, r3]
 800d8c4:	e620      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d8c6:	4a7d      	ldr	r2, [pc, #500]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8c8:	23a8      	movs	r3, #168	; 0xa8
 800d8ca:	58d4      	ldr	r4, [r2, r3]
 800d8cc:	4d7c      	ldr	r5, [pc, #496]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d8ce:	402c      	ands	r4, r5
 800d8d0:	50d4      	str	r4, [r2, r3]
 800d8d2:	58d5      	ldr	r5, [r2, r3]
 800d8d4:	24d0      	movs	r4, #208	; 0xd0
 800d8d6:	0224      	lsls	r4, r4, #8
 800d8d8:	432c      	orrs	r4, r5
 800d8da:	50d4      	str	r4, [r2, r3]
 800d8dc:	e614      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d8de:	4a77      	ldr	r2, [pc, #476]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8e0:	23a8      	movs	r3, #168	; 0xa8
 800d8e2:	58d4      	ldr	r4, [r2, r3]
 800d8e4:	4d77      	ldr	r5, [pc, #476]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d8e6:	402c      	ands	r4, r5
 800d8e8:	50d4      	str	r4, [r2, r3]
 800d8ea:	58d5      	ldr	r5, [r2, r3]
 800d8ec:	24d0      	movs	r4, #208	; 0xd0
 800d8ee:	0524      	lsls	r4, r4, #20
 800d8f0:	432c      	orrs	r4, r5
 800d8f2:	50d4      	str	r4, [r2, r3]
 800d8f4:	e608      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d8f6:	4a6f      	ldr	r2, [pc, #444]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d8f8:	23a8      	movs	r3, #168	; 0xa8
 800d8fa:	58d4      	ldr	r4, [r2, r3]
 800d8fc:	250f      	movs	r5, #15
 800d8fe:	43ac      	bics	r4, r5
 800d900:	50d4      	str	r4, [r2, r3]
 800d902:	58d4      	ldr	r4, [r2, r3]
 800d904:	3d02      	subs	r5, #2
 800d906:	432c      	orrs	r4, r5
 800d908:	50d4      	str	r4, [r2, r3]
 800d90a:	e5fd      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d90c:	4a69      	ldr	r2, [pc, #420]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d90e:	23a8      	movs	r3, #168	; 0xa8
 800d910:	58d4      	ldr	r4, [r2, r3]
 800d912:	4d6b      	ldr	r5, [pc, #428]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d914:	402c      	ands	r4, r5
 800d916:	50d4      	str	r4, [r2, r3]
 800d918:	58d5      	ldr	r5, [r2, r3]
 800d91a:	24d0      	movs	r4, #208	; 0xd0
 800d91c:	0224      	lsls	r4, r4, #8
 800d91e:	432c      	orrs	r4, r5
 800d920:	50d4      	str	r4, [r2, r3]
 800d922:	e5f1      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d924:	4a69      	ldr	r2, [pc, #420]	; (800dacc <RemapAndLinkDMAtoUARTTx+0x654>)
 800d926:	4293      	cmp	r3, r2
 800d928:	d159      	bne.n	800d9de <RemapAndLinkDMAtoUARTTx+0x566>
 800d92a:	680b      	ldr	r3, [r1, #0]
 800d92c:	4a5b      	ldr	r2, [pc, #364]	; (800da9c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d01b      	beq.n	800d96a <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d932:	4a5b      	ldr	r2, [pc, #364]	; (800daa0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d023      	beq.n	800d980 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d938:	4a5a      	ldr	r2, [pc, #360]	; (800daa4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d02c      	beq.n	800d998 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d93e:	4a5a      	ldr	r2, [pc, #360]	; (800daa8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d035      	beq.n	800d9b0 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d944:	4a59      	ldr	r2, [pc, #356]	; (800daac <RemapAndLinkDMAtoUARTTx+0x634>)
 800d946:	4293      	cmp	r3, r2
 800d948:	d03d      	beq.n	800d9c6 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d94a:	4a59      	ldr	r2, [pc, #356]	; (800dab0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d000      	beq.n	800d952 <RemapAndLinkDMAtoUARTTx+0x4da>
 800d950:	e5da      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d952:	4a58      	ldr	r2, [pc, #352]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d954:	23a8      	movs	r3, #168	; 0xa8
 800d956:	58d4      	ldr	r4, [r2, r3]
 800d958:	4d57      	ldr	r5, [pc, #348]	; (800dab8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d95a:	402c      	ands	r4, r5
 800d95c:	50d4      	str	r4, [r2, r3]
 800d95e:	58d5      	ldr	r5, [r2, r3]
 800d960:	24e0      	movs	r4, #224	; 0xe0
 800d962:	0324      	lsls	r4, r4, #12
 800d964:	432c      	orrs	r4, r5
 800d966:	50d4      	str	r4, [r2, r3]
 800d968:	e5ce      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d96a:	4a54      	ldr	r2, [pc, #336]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d96c:	23a8      	movs	r3, #168	; 0xa8
 800d96e:	58d4      	ldr	r4, [r2, r3]
 800d970:	25f0      	movs	r5, #240	; 0xf0
 800d972:	43ac      	bics	r4, r5
 800d974:	50d4      	str	r4, [r2, r3]
 800d976:	58d4      	ldr	r4, [r2, r3]
 800d978:	3d10      	subs	r5, #16
 800d97a:	432c      	orrs	r4, r5
 800d97c:	50d4      	str	r4, [r2, r3]
 800d97e:	e5c3      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d980:	4a4e      	ldr	r2, [pc, #312]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d982:	23a8      	movs	r3, #168	; 0xa8
 800d984:	58d4      	ldr	r4, [r2, r3]
 800d986:	4d4e      	ldr	r5, [pc, #312]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d988:	402c      	ands	r4, r5
 800d98a:	50d4      	str	r4, [r2, r3]
 800d98c:	58d5      	ldr	r5, [r2, r3]
 800d98e:	24e0      	movs	r4, #224	; 0xe0
 800d990:	0224      	lsls	r4, r4, #8
 800d992:	432c      	orrs	r4, r5
 800d994:	50d4      	str	r4, [r2, r3]
 800d996:	e5b7      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d998:	4a48      	ldr	r2, [pc, #288]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800d99a:	23a8      	movs	r3, #168	; 0xa8
 800d99c:	58d4      	ldr	r4, [r2, r3]
 800d99e:	4d49      	ldr	r5, [pc, #292]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d9a0:	402c      	ands	r4, r5
 800d9a2:	50d4      	str	r4, [r2, r3]
 800d9a4:	58d5      	ldr	r5, [r2, r3]
 800d9a6:	24e0      	movs	r4, #224	; 0xe0
 800d9a8:	0524      	lsls	r4, r4, #20
 800d9aa:	432c      	orrs	r4, r5
 800d9ac:	50d4      	str	r4, [r2, r3]
 800d9ae:	e5ab      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d9b0:	4a40      	ldr	r2, [pc, #256]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d9b2:	23a8      	movs	r3, #168	; 0xa8
 800d9b4:	58d4      	ldr	r4, [r2, r3]
 800d9b6:	250f      	movs	r5, #15
 800d9b8:	43ac      	bics	r4, r5
 800d9ba:	50d4      	str	r4, [r2, r3]
 800d9bc:	58d4      	ldr	r4, [r2, r3]
 800d9be:	3d01      	subs	r5, #1
 800d9c0:	432c      	orrs	r4, r5
 800d9c2:	50d4      	str	r4, [r2, r3]
 800d9c4:	e5a0      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d9c6:	4a3b      	ldr	r2, [pc, #236]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d9c8:	23a8      	movs	r3, #168	; 0xa8
 800d9ca:	58d4      	ldr	r4, [r2, r3]
 800d9cc:	4d3c      	ldr	r5, [pc, #240]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d9ce:	402c      	ands	r4, r5
 800d9d0:	50d4      	str	r4, [r2, r3]
 800d9d2:	58d5      	ldr	r5, [r2, r3]
 800d9d4:	24e0      	movs	r4, #224	; 0xe0
 800d9d6:	0224      	lsls	r4, r4, #8
 800d9d8:	432c      	orrs	r4, r5
 800d9da:	50d4      	str	r4, [r2, r3]
 800d9dc:	e594      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d9de:	4a3c      	ldr	r2, [pc, #240]	; (800dad0 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d000      	beq.n	800d9e6 <RemapAndLinkDMAtoUARTTx+0x56e>
 800d9e4:	e590      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
 800d9e6:	680b      	ldr	r3, [r1, #0]
 800d9e8:	4a2c      	ldr	r2, [pc, #176]	; (800da9c <RemapAndLinkDMAtoUARTTx+0x624>)
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	d01b      	beq.n	800da26 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d9ee:	4a2c      	ldr	r2, [pc, #176]	; (800daa0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d022      	beq.n	800da3a <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d9f4:	4a2b      	ldr	r2, [pc, #172]	; (800daa4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d02b      	beq.n	800da52 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d9fa:	4a2b      	ldr	r2, [pc, #172]	; (800daa8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d034      	beq.n	800da6a <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800da00:	4a2a      	ldr	r2, [pc, #168]	; (800daac <RemapAndLinkDMAtoUARTTx+0x634>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d03b      	beq.n	800da7e <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800da06:	4a2a      	ldr	r2, [pc, #168]	; (800dab0 <RemapAndLinkDMAtoUARTTx+0x638>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d000      	beq.n	800da0e <RemapAndLinkDMAtoUARTTx+0x596>
 800da0c:	e57c      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800da0e:	4a29      	ldr	r2, [pc, #164]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da10:	23a8      	movs	r3, #168	; 0xa8
 800da12:	58d4      	ldr	r4, [r2, r3]
 800da14:	4d28      	ldr	r5, [pc, #160]	; (800dab8 <RemapAndLinkDMAtoUARTTx+0x640>)
 800da16:	402c      	ands	r4, r5
 800da18:	50d4      	str	r4, [r2, r3]
 800da1a:	58d5      	ldr	r5, [r2, r3]
 800da1c:	24f0      	movs	r4, #240	; 0xf0
 800da1e:	0324      	lsls	r4, r4, #12
 800da20:	432c      	orrs	r4, r5
 800da22:	50d4      	str	r4, [r2, r3]
 800da24:	e570      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800da26:	4a25      	ldr	r2, [pc, #148]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800da28:	23a8      	movs	r3, #168	; 0xa8
 800da2a:	58d5      	ldr	r5, [r2, r3]
 800da2c:	26f0      	movs	r6, #240	; 0xf0
 800da2e:	43b5      	bics	r5, r6
 800da30:	50d5      	str	r5, [r2, r3]
 800da32:	58d4      	ldr	r4, [r2, r3]
 800da34:	4334      	orrs	r4, r6
 800da36:	50d4      	str	r4, [r2, r3]
 800da38:	e566      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800da3a:	4a20      	ldr	r2, [pc, #128]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800da3c:	23a8      	movs	r3, #168	; 0xa8
 800da3e:	58d4      	ldr	r4, [r2, r3]
 800da40:	4d1f      	ldr	r5, [pc, #124]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800da42:	402c      	ands	r4, r5
 800da44:	50d4      	str	r4, [r2, r3]
 800da46:	58d5      	ldr	r5, [r2, r3]
 800da48:	24f0      	movs	r4, #240	; 0xf0
 800da4a:	0224      	lsls	r4, r4, #8
 800da4c:	432c      	orrs	r4, r5
 800da4e:	50d4      	str	r4, [r2, r3]
 800da50:	e55a      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800da52:	4a1a      	ldr	r2, [pc, #104]	; (800dabc <RemapAndLinkDMAtoUARTTx+0x644>)
 800da54:	23a8      	movs	r3, #168	; 0xa8
 800da56:	58d4      	ldr	r4, [r2, r3]
 800da58:	4d1a      	ldr	r5, [pc, #104]	; (800dac4 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800da5a:	402c      	ands	r4, r5
 800da5c:	50d4      	str	r4, [r2, r3]
 800da5e:	58d5      	ldr	r5, [r2, r3]
 800da60:	24f0      	movs	r4, #240	; 0xf0
 800da62:	0524      	lsls	r4, r4, #20
 800da64:	432c      	orrs	r4, r5
 800da66:	50d4      	str	r4, [r2, r3]
 800da68:	e54e      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800da6a:	4a12      	ldr	r2, [pc, #72]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da6c:	23a8      	movs	r3, #168	; 0xa8
 800da6e:	58d5      	ldr	r5, [r2, r3]
 800da70:	260f      	movs	r6, #15
 800da72:	43b5      	bics	r5, r6
 800da74:	50d5      	str	r5, [r2, r3]
 800da76:	58d4      	ldr	r4, [r2, r3]
 800da78:	4334      	orrs	r4, r6
 800da7a:	50d4      	str	r4, [r2, r3]
 800da7c:	e544      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800da7e:	4a0d      	ldr	r2, [pc, #52]	; (800dab4 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da80:	23a8      	movs	r3, #168	; 0xa8
 800da82:	58d4      	ldr	r4, [r2, r3]
 800da84:	4d0e      	ldr	r5, [pc, #56]	; (800dac0 <RemapAndLinkDMAtoUARTTx+0x648>)
 800da86:	402c      	ands	r4, r5
 800da88:	50d4      	str	r4, [r2, r3]
 800da8a:	58d5      	ldr	r5, [r2, r3]
 800da8c:	24f0      	movs	r4, #240	; 0xf0
 800da8e:	0224      	lsls	r4, r4, #8
 800da90:	432c      	orrs	r4, r5
 800da92:	50d4      	str	r4, [r2, r3]
 800da94:	e538      	b.n	800d508 <RemapAndLinkDMAtoUARTTx+0x90>
 800da96:	46c0      	nop			; (mov r8, r8)
 800da98:	40005000 	.word	0x40005000
 800da9c:	4002001c 	.word	0x4002001c
 800daa0:	40020044 	.word	0x40020044
 800daa4:	40020080 	.word	0x40020080
 800daa8:	40020408 	.word	0x40020408
 800daac:	40020444 	.word	0x40020444
 800dab0:	40020458 	.word	0x40020458
 800dab4:	40020400 	.word	0x40020400
 800dab8:	fff0ffff 	.word	0xfff0ffff
 800dabc:	40020000 	.word	0x40020000
 800dac0:	ffff0fff 	.word	0xffff0fff
 800dac4:	f0ffffff 	.word	0xf0ffffff
 800dac8:	40011400 	.word	0x40011400
 800dacc:	40011800 	.word	0x40011800
 800dad0:	40011c00 	.word	0x40011c00

0800dad4 <DMA_MSG_TX_Setup>:
{	
 800dad4:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800dad6:	4b0d      	ldr	r3, [pc, #52]	; (800db0c <DMA_MSG_TX_Setup+0x38>)
 800dad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d012      	beq.n	800db04 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800dade:	4b0b      	ldr	r3, [pc, #44]	; (800db0c <DMA_MSG_TX_Setup+0x38>)
 800dae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d010      	beq.n	800db08 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800dae6:	4a09      	ldr	r2, [pc, #36]	; (800db0c <DMA_MSG_TX_Setup+0x38>)
 800dae8:	2394      	movs	r3, #148	; 0x94
 800daea:	58d3      	ldr	r3, [r2, r3]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d007      	beq.n	800db00 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800daf0:	0021      	movs	r1, r4
 800daf2:	f7ff fcc1 	bl	800d478 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800daf6:	2100      	movs	r1, #0
 800daf8:	0020      	movs	r0, r4
 800dafa:	f7ff f84d 	bl	800cb98 <SetupDMAInterrupts>
}
 800dafe:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800db00:	4c03      	ldr	r4, [pc, #12]	; (800db10 <DMA_MSG_TX_Setup+0x3c>)
 800db02:	e7f5      	b.n	800daf0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800db04:	4c01      	ldr	r4, [pc, #4]	; (800db0c <DMA_MSG_TX_Setup+0x38>)
 800db06:	e7f3      	b.n	800daf0 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800db08:	4c02      	ldr	r4, [pc, #8]	; (800db14 <DMA_MSG_TX_Setup+0x40>)
 800db0a:	e7f1      	b.n	800daf0 <DMA_MSG_TX_Setup+0x1c>
 800db0c:	20001d74 	.word	0x20001d74
 800db10:	20001de4 	.word	0x20001de4
 800db14:	20001dac 	.word	0x20001dac

0800db18 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800db18:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800db1a:	4807      	ldr	r0, [pc, #28]	; (800db38 <CRC_Init+0x20>)
 800db1c:	4b07      	ldr	r3, [pc, #28]	; (800db3c <CRC_Init+0x24>)
 800db1e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800db20:	2310      	movs	r3, #16
 800db22:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800db24:	2300      	movs	r3, #0
 800db26:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800db28:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800db2a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800db2c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800db2e:	3303      	adds	r3, #3
 800db30:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800db32:	f003 fbd7 	bl	80112e4 <HAL_CRC_Init>
}
 800db36:	bd10      	pop	{r4, pc}
 800db38:	2000725c 	.word	0x2000725c
 800db3c:	40023000 	.word	0x40023000

0800db40 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800db40:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800db42:	4a05      	ldr	r2, [pc, #20]	; (800db58 <HAL_CRC_MspInit+0x18>)
 800db44:	6951      	ldr	r1, [r2, #20]
 800db46:	2340      	movs	r3, #64	; 0x40
 800db48:	4319      	orrs	r1, r3
 800db4a:	6151      	str	r1, [r2, #20]
 800db4c:	6952      	ldr	r2, [r2, #20]
 800db4e:	4013      	ands	r3, r2
 800db50:	9301      	str	r3, [sp, #4]
 800db52:	9b01      	ldr	r3, [sp, #4]
}
 800db54:	b002      	add	sp, #8
 800db56:	4770      	bx	lr
 800db58:	40021000 	.word	0x40021000

0800db5c <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	0004      	movs	r4, r0
 800db60:	000d      	movs	r5, r1
  uint8_t pTemp;
  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800db62:	2800      	cmp	r0, #0
 800db64:	d015      	beq.n	800db92 <CalculateCRC8+0x36>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800db66:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800db68:	2900      	cmp	r1, #0
 800db6a:	d100      	bne.n	800db6e <CalculateCRC8+0x12>
}
 800db6c:	bd70      	pop	{r4, r5, r6, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800db6e:	088e      	lsrs	r6, r1, #2
 800db70:	0032      	movs	r2, r6
 800db72:	0021      	movs	r1, r4
 800db74:	4808      	ldr	r0, [pc, #32]	; (800db98 <CalculateCRC8+0x3c>)
 800db76:	f003 fc12 	bl	801139e <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800db7a:	07ab      	lsls	r3, r5, #30
 800db7c:	d101      	bne.n	800db82 <CalculateCRC8+0x26>
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800db7e:	b2c0      	uxtb	r0, r0
 800db80:	e7f4      	b.n	800db6c <CalculateCRC8+0x10>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800db82:	00b1      	lsls	r1, r6, #2
 800db84:	1861      	adds	r1, r4, r1
 800db86:	2201      	movs	r2, #1
 800db88:	4803      	ldr	r0, [pc, #12]	; (800db98 <CalculateCRC8+0x3c>)
 800db8a:	f003 fbdc 	bl	8011346 <HAL_CRC_Accumulate>
 800db8e:	b2c0      	uxtb	r0, r0
 800db90:	e7ec      	b.n	800db6c <CalculateCRC8+0x10>
  return 0;
 800db92:	2000      	movs	r0, #0
 800db94:	e7ea      	b.n	800db6c <CalculateCRC8+0x10>
 800db96:	46c0      	nop			; (mov r8, r8)
 800db98:	2000725c 	.word	0x2000725c

0800db9c <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800db9c:	b500      	push	{lr}
 800db9e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800dba0:	2380      	movs	r3, #128	; 0x80
 800dba2:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dba4:	3b7f      	subs	r3, #127	; 0x7f
 800dba6:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dbac:	3303      	adds	r3, #3
 800dbae:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800dbb0:	2090      	movs	r0, #144	; 0x90
 800dbb2:	a901      	add	r1, sp, #4
 800dbb4:	05c0      	lsls	r0, r0, #23
 800dbb6:	f004 fa95 	bl	80120e4 <HAL_GPIO_Init>
}
 800dbba:	b007      	add	sp, #28
 800dbbc:	bd00      	pop	{pc}
	...

0800dbc0 <GPIO_Init>:
{
 800dbc0:	b500      	push	{lr}
 800dbc2:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800dbc4:	4b18      	ldr	r3, [pc, #96]	; (800dc28 <GPIO_Init+0x68>)
 800dbc6:	6959      	ldr	r1, [r3, #20]
 800dbc8:	2080      	movs	r0, #128	; 0x80
 800dbca:	0300      	lsls	r0, r0, #12
 800dbcc:	4301      	orrs	r1, r0
 800dbce:	6159      	str	r1, [r3, #20]
 800dbd0:	695a      	ldr	r2, [r3, #20]
 800dbd2:	4002      	ands	r2, r0
 800dbd4:	9201      	str	r2, [sp, #4]
 800dbd6:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800dbd8:	6959      	ldr	r1, [r3, #20]
 800dbda:	2080      	movs	r0, #128	; 0x80
 800dbdc:	0280      	lsls	r0, r0, #10
 800dbde:	4301      	orrs	r1, r0
 800dbe0:	6159      	str	r1, [r3, #20]
 800dbe2:	695a      	ldr	r2, [r3, #20]
 800dbe4:	4002      	ands	r2, r0
 800dbe6:	9202      	str	r2, [sp, #8]
 800dbe8:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800dbea:	6959      	ldr	r1, [r3, #20]
 800dbec:	2080      	movs	r0, #128	; 0x80
 800dbee:	0340      	lsls	r0, r0, #13
 800dbf0:	4301      	orrs	r1, r0
 800dbf2:	6159      	str	r1, [r3, #20]
 800dbf4:	695a      	ldr	r2, [r3, #20]
 800dbf6:	4002      	ands	r2, r0
 800dbf8:	9203      	str	r2, [sp, #12]
 800dbfa:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800dbfc:	6959      	ldr	r1, [r3, #20]
 800dbfe:	2080      	movs	r0, #128	; 0x80
 800dc00:	02c0      	lsls	r0, r0, #11
 800dc02:	4301      	orrs	r1, r0
 800dc04:	6159      	str	r1, [r3, #20]
 800dc06:	695a      	ldr	r2, [r3, #20]
 800dc08:	4002      	ands	r2, r0
 800dc0a:	9204      	str	r2, [sp, #16]
 800dc0c:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800dc0e:	695a      	ldr	r2, [r3, #20]
 800dc10:	2180      	movs	r1, #128	; 0x80
 800dc12:	03c9      	lsls	r1, r1, #15
 800dc14:	430a      	orrs	r2, r1
 800dc16:	615a      	str	r2, [r3, #20]
 800dc18:	695b      	ldr	r3, [r3, #20]
 800dc1a:	400b      	ands	r3, r1
 800dc1c:	9305      	str	r3, [sp, #20]
 800dc1e:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800dc20:	f7ff ffbc 	bl	800db9c <IND_LED_Init>
}
 800dc24:	b007      	add	sp, #28
 800dc26:	bd00      	pop	{pc}
 800dc28:	40021000 	.word	0x40021000

0800dc2c <SENSORS_GPIO_Init>:

//-- Configure indicator LED
void SENSORS_GPIO_Init(void)
{
 800dc2c:	b500      	push	{lr}
 800dc2e:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/*Configure GPIO pin : PB11 & PB12 as output*/
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dc30:	23c0      	movs	r3, #192	; 0xc0
 800dc32:	015b      	lsls	r3, r3, #5
 800dc34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dc36:	2312      	movs	r3, #18
 800dc38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc3a:	3b11      	subs	r3, #17
 800dc3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc3e:	3302      	adds	r3, #2
 800dc40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800dc42:	3302      	adds	r3, #2
 800dc44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc46:	2090      	movs	r0, #144	; 0x90
 800dc48:	a901      	add	r1, sp, #4
 800dc4a:	05c0      	lsls	r0, r0, #23
 800dc4c:	f004 fa4a 	bl	80120e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800dc50:	4a0a      	ldr	r2, [pc, #40]	; (800dc7c <SENSORS_GPIO_Init+0x50>)
 800dc52:	69d1      	ldr	r1, [r2, #28]
 800dc54:	2080      	movs	r0, #128	; 0x80
 800dc56:	03c0      	lsls	r0, r0, #15
 800dc58:	4301      	orrs	r1, r0
 800dc5a:	61d1      	str	r1, [r2, #28]
 800dc5c:	69d3      	ldr	r3, [r2, #28]
 800dc5e:	4003      	ands	r3, r0
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	9b00      	ldr	r3, [sp, #0]

    /*Configure GPIO pin : PB7 as input*/
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800dc64:	2380      	movs	r3, #128	; 0x80
 800dc66:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dc68:	2300      	movs	r3, #0
 800dc6a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dc6c:	3302      	adds	r3, #2
 800dc6e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc70:	a901      	add	r1, sp, #4
 800dc72:	4803      	ldr	r0, [pc, #12]	; (800dc80 <SENSORS_GPIO_Init+0x54>)
 800dc74:	f004 fa36 	bl	80120e4 <HAL_GPIO_Init>
}
 800dc78:	b007      	add	sp, #28
 800dc7a:	bd00      	pop	{pc}
 800dc7c:	40021000 	.word	0x40021000
 800dc80:	48000400 	.word	0x48000400

0800dc84 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800dc84:	b570      	push	{r4, r5, r6, lr}
 800dc86:	000e      	movs	r6, r1
 800dc88:	0015      	movs	r5, r2
 800dc8a:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800dc8c:	f000 fe08 	bl	800e8a0 <GetUart>
	
	if (huart == &huart1) 
 800dc90:	4b2b      	ldr	r3, [pc, #172]	; (800dd40 <GetPortGPIOs+0xbc>)
 800dc92:	4298      	cmp	r0, r3
 800dc94:	d01a      	beq.n	800dccc <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800dc96:	4b2b      	ldr	r3, [pc, #172]	; (800dd44 <GetPortGPIOs+0xc0>)
 800dc98:	4298      	cmp	r0, r3
 800dc9a:	d025      	beq.n	800dce8 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800dc9c:	4b2a      	ldr	r3, [pc, #168]	; (800dd48 <GetPortGPIOs+0xc4>)
 800dc9e:	4298      	cmp	r0, r3
 800dca0:	d02d      	beq.n	800dcfe <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800dca2:	4b2a      	ldr	r3, [pc, #168]	; (800dd4c <GetPortGPIOs+0xc8>)
 800dca4:	4298      	cmp	r0, r3
 800dca6:	d036      	beq.n	800dd16 <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800dca8:	4b29      	ldr	r3, [pc, #164]	; (800dd50 <GetPortGPIOs+0xcc>)
 800dcaa:	4298      	cmp	r0, r3
 800dcac:	d03e      	beq.n	800dd2c <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800dcae:	4a29      	ldr	r2, [pc, #164]	; (800dd54 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800dcb0:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800dcb2:	4290      	cmp	r0, r2
 800dcb4:	d116      	bne.n	800dce4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800dcb6:	2390      	movs	r3, #144	; 0x90
 800dcb8:	05db      	lsls	r3, r3, #23
 800dcba:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800dcbc:	2210      	movs	r2, #16
 800dcbe:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800dcc0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800dcc2:	2320      	movs	r3, #32
 800dcc4:	9a04      	ldr	r2, [sp, #16]
 800dcc6:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	e00b      	b.n	800dce4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800dccc:	2390      	movs	r3, #144	; 0x90
 800dcce:	05db      	lsls	r3, r3, #23
 800dcd0:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800dcd2:	2280      	movs	r2, #128	; 0x80
 800dcd4:	0092      	lsls	r2, r2, #2
 800dcd6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800dcd8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800dcda:	2380      	movs	r3, #128	; 0x80
 800dcdc:	00db      	lsls	r3, r3, #3
 800dcde:	9a04      	ldr	r2, [sp, #16]
 800dce0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dce2:	2300      	movs	r3, #0
	
	return result;	
}
 800dce4:	0018      	movs	r0, r3
 800dce6:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800dce8:	2390      	movs	r3, #144	; 0x90
 800dcea:	05db      	lsls	r3, r3, #23
 800dcec:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800dcee:	2204      	movs	r2, #4
 800dcf0:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800dcf2:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800dcf4:	2308      	movs	r3, #8
 800dcf6:	9a04      	ldr	r2, [sp, #16]
 800dcf8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e7f2      	b.n	800dce4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800dcfe:	4b16      	ldr	r3, [pc, #88]	; (800dd58 <GetPortGPIOs+0xd4>)
 800dd00:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800dd02:	2280      	movs	r2, #128	; 0x80
 800dd04:	00d2      	lsls	r2, r2, #3
 800dd06:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800dd08:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800dd0a:	2380      	movs	r3, #128	; 0x80
 800dd0c:	011b      	lsls	r3, r3, #4
 800dd0e:	9a04      	ldr	r2, [sp, #16]
 800dd10:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd12:	2300      	movs	r3, #0
 800dd14:	e7e6      	b.n	800dce4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800dd16:	2390      	movs	r3, #144	; 0x90
 800dd18:	05db      	lsls	r3, r3, #23
 800dd1a:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800dd20:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800dd22:	2302      	movs	r3, #2
 800dd24:	9a04      	ldr	r2, [sp, #16]
 800dd26:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	e7db      	b.n	800dce4 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800dd2c:	4b0a      	ldr	r3, [pc, #40]	; (800dd58 <GetPortGPIOs+0xd4>)
 800dd2e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800dd30:	2208      	movs	r2, #8
 800dd32:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800dd34:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800dd36:	2310      	movs	r3, #16
 800dd38:	9a04      	ldr	r2, [sp, #16]
 800dd3a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	e7d1      	b.n	800dce4 <GetPortGPIOs+0x60>
 800dd40:	2000707c 	.word	0x2000707c
 800dd44:	200071e4 	.word	0x200071e4
 800dd48:	20006f8c 	.word	0x20006f8c
 800dd4c:	20007170 	.word	0x20007170
 800dd50:	20007004 	.word	0x20007004
 800dd54:	200070f4 	.word	0x200070f4
 800dd58:	48000400 	.word	0x48000400

0800dd5c <IsFactoryReset>:
{
 800dd5c:	b570      	push	{r4, r5, r6, lr}
 800dd5e:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800dd60:	4b39      	ldr	r3, [pc, #228]	; (800de48 <IsFactoryReset+0xec>)
 800dd62:	6959      	ldr	r1, [r3, #20]
 800dd64:	2080      	movs	r0, #128	; 0x80
 800dd66:	0280      	lsls	r0, r0, #10
 800dd68:	4301      	orrs	r1, r0
 800dd6a:	6159      	str	r1, [r3, #20]
 800dd6c:	695a      	ldr	r2, [r3, #20]
 800dd6e:	4002      	ands	r2, r0
 800dd70:	9203      	str	r2, [sp, #12]
 800dd72:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800dd74:	6959      	ldr	r1, [r3, #20]
 800dd76:	2080      	movs	r0, #128	; 0x80
 800dd78:	02c0      	lsls	r0, r0, #11
 800dd7a:	4301      	orrs	r1, r0
 800dd7c:	6159      	str	r1, [r3, #20]
 800dd7e:	695a      	ldr	r2, [r3, #20]
 800dd80:	4002      	ands	r2, r0
 800dd82:	9204      	str	r2, [sp, #16]
 800dd84:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800dd86:	6959      	ldr	r1, [r3, #20]
 800dd88:	2080      	movs	r0, #128	; 0x80
 800dd8a:	0300      	lsls	r0, r0, #12
 800dd8c:	4301      	orrs	r1, r0
 800dd8e:	6159      	str	r1, [r3, #20]
 800dd90:	695a      	ldr	r2, [r3, #20]
 800dd92:	4002      	ands	r2, r0
 800dd94:	9205      	str	r2, [sp, #20]
 800dd96:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800dd98:	695a      	ldr	r2, [r3, #20]
 800dd9a:	2180      	movs	r1, #128	; 0x80
 800dd9c:	0349      	lsls	r1, r1, #13
 800dd9e:	430a      	orrs	r2, r1
 800dda0:	615a      	str	r2, [r3, #20]
 800dda2:	695b      	ldr	r3, [r3, #20]
 800dda4:	400b      	ands	r3, r1
 800dda6:	9306      	str	r3, [sp, #24]
 800dda8:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800ddaa:	2522      	movs	r5, #34	; 0x22
 800ddac:	446d      	add	r5, sp
 800ddae:	ab08      	add	r3, sp, #32
 800ddb0:	9300      	str	r3, [sp, #0]
 800ddb2:	ab0b      	add	r3, sp, #44	; 0x2c
 800ddb4:	002a      	movs	r2, r5
 800ddb6:	a90c      	add	r1, sp, #48	; 0x30
 800ddb8:	2001      	movs	r0, #1
 800ddba:	f7ff ff63 	bl	800dc84 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800ddbe:	ac07      	add	r4, sp, #28
 800ddc0:	9400      	str	r4, [sp, #0]
 800ddc2:	ab09      	add	r3, sp, #36	; 0x24
 800ddc4:	221e      	movs	r2, #30
 800ddc6:	446a      	add	r2, sp
 800ddc8:	a90a      	add	r1, sp, #40	; 0x28
 800ddca:	2006      	movs	r0, #6
 800ddcc:	f7ff ff5a 	bl	800dc84 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ddd4:	2600      	movs	r6, #0
 800ddd6:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800ddd8:	882b      	ldrh	r3, [r5, #0]
 800ddda:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800dddc:	a90d      	add	r1, sp, #52	; 0x34
 800ddde:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dde0:	f004 f980 	bl	80120e4 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dde4:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800dde6:	2302      	movs	r3, #2
 800dde8:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ddea:	8823      	ldrh	r3, [r4, #0]
 800ddec:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ddee:	a90d      	add	r1, sp, #52	; 0x34
 800ddf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddf2:	f004 f977 	bl	80120e4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ddf6:	8829      	ldrh	r1, [r5, #0]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ddfc:	f004 fae6 	bl	80123cc <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800de00:	2005      	movs	r0, #5
 800de02:	f000 fb73 	bl	800e4ec <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800de06:	8821      	ldrh	r1, [r4, #0]
 800de08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de0a:	f004 fad9 	bl	80123c0 <HAL_GPIO_ReadPin>
 800de0e:	2800      	cmp	r0, #0
 800de10:	d006      	beq.n	800de20 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800de12:	4b0e      	ldr	r3, [pc, #56]	; (800de4c <IsFactoryReset+0xf0>)
 800de14:	2201      	movs	r2, #1
 800de16:	4252      	negs	r2, r2
 800de18:	601a      	str	r2, [r3, #0]
	return 0;
 800de1a:	2000      	movs	r0, #0
}
 800de1c:	b012      	add	sp, #72	; 0x48
 800de1e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800de20:	2322      	movs	r3, #34	; 0x22
 800de22:	446b      	add	r3, sp
 800de24:	8819      	ldrh	r1, [r3, #0]
 800de26:	2201      	movs	r2, #1
 800de28:	980c      	ldr	r0, [sp, #48]	; 0x30
 800de2a:	f004 facf 	bl	80123cc <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800de2e:	2005      	movs	r0, #5
 800de30:	f000 fb5c 	bl	800e4ec <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800de34:	ab07      	add	r3, sp, #28
 800de36:	8819      	ldrh	r1, [r3, #0]
 800de38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de3a:	f004 fac1 	bl	80123c0 <HAL_GPIO_ReadPin>
 800de3e:	2801      	cmp	r0, #1
 800de40:	d1e7      	bne.n	800de12 <IsFactoryReset+0xb6>
			return 1;
 800de42:	2001      	movs	r0, #1
 800de44:	e7ea      	b.n	800de1c <IsFactoryReset+0xc0>
 800de46:	46c0      	nop			; (mov r8, r8)
 800de48:	40021000 	.word	0x40021000
 800de4c:	20007ff0 	.word	0x20007ff0

0800de50 <MX_I2C1_Init>:
}



void MX_I2C1_Init(void)
{
 800de50:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c1.Instance = I2C2;
 800de52:	480b      	ldr	r0, [pc, #44]	; (800de80 <MX_I2C1_Init+0x30>)
 800de54:	4b0b      	ldr	r3, [pc, #44]	; (800de84 <MX_I2C1_Init+0x34>)
 800de56:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E/*Standard mode*/;
 800de58:	4b0b      	ldr	r3, [pc, #44]	; (800de88 <MX_I2C1_Init+0x38>)
 800de5a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800de60:	2201      	movs	r2, #1
 800de62:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800de64:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800de66:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800de68:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800de6a:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800de6c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800de6e:	f004 fbad 	bl	80125cc <HAL_I2C_Init>
 800de72:	2800      	cmp	r0, #0
 800de74:	d100      	bne.n	800de78 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }


}
 800de76:	bd10      	pop	{r4, pc}
    Error_Handler();
 800de78:	f7fa fe52 	bl	8008b20 <Error_Handler>
}
 800de7c:	e7fb      	b.n	800de76 <MX_I2C1_Init+0x26>
 800de7e:	46c0      	nop			; (mov r8, r8)
 800de80:	20007280 	.word	0x20007280
 800de84:	40005800 	.word	0x40005800
 800de88:	2000090e 	.word	0x2000090e

0800de8c <MX_I2C_Init>:
{
 800de8c:	b500      	push	{lr}
 800de8e:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800de90:	4b18      	ldr	r3, [pc, #96]	; (800def4 <MX_I2C_Init+0x68>)
 800de92:	6959      	ldr	r1, [r3, #20]
 800de94:	2080      	movs	r0, #128	; 0x80
 800de96:	0300      	lsls	r0, r0, #12
 800de98:	4301      	orrs	r1, r0
 800de9a:	6159      	str	r1, [r3, #20]
 800de9c:	695a      	ldr	r2, [r3, #20]
 800de9e:	4002      	ands	r2, r0
 800dea0:	9201      	str	r2, [sp, #4]
 800dea2:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800dea4:	6959      	ldr	r1, [r3, #20]
 800dea6:	2080      	movs	r0, #128	; 0x80
 800dea8:	0280      	lsls	r0, r0, #10
 800deaa:	4301      	orrs	r1, r0
 800deac:	6159      	str	r1, [r3, #20]
 800deae:	695a      	ldr	r2, [r3, #20]
 800deb0:	4002      	ands	r2, r0
 800deb2:	9202      	str	r2, [sp, #8]
 800deb4:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800deb6:	6959      	ldr	r1, [r3, #20]
 800deb8:	2080      	movs	r0, #128	; 0x80
 800deba:	0340      	lsls	r0, r0, #13
 800debc:	4301      	orrs	r1, r0
 800debe:	6159      	str	r1, [r3, #20]
 800dec0:	695a      	ldr	r2, [r3, #20]
 800dec2:	4002      	ands	r2, r0
 800dec4:	9203      	str	r2, [sp, #12]
 800dec6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800dec8:	6959      	ldr	r1, [r3, #20]
 800deca:	2080      	movs	r0, #128	; 0x80
 800decc:	02c0      	lsls	r0, r0, #11
 800dece:	4301      	orrs	r1, r0
 800ded0:	6159      	str	r1, [r3, #20]
 800ded2:	695a      	ldr	r2, [r3, #20]
 800ded4:	4002      	ands	r2, r0
 800ded6:	9204      	str	r2, [sp, #16]
 800ded8:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800deda:	695a      	ldr	r2, [r3, #20]
 800dedc:	2180      	movs	r1, #128	; 0x80
 800dede:	03c9      	lsls	r1, r1, #15
 800dee0:	430a      	orrs	r2, r1
 800dee2:	615a      	str	r2, [r3, #20]
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	400b      	ands	r3, r1
 800dee8:	9305      	str	r3, [sp, #20]
 800deea:	9b05      	ldr	r3, [sp, #20]
  MX_I2C1_Init();
 800deec:	f7ff ffb0 	bl	800de50 <MX_I2C1_Init>
}
 800def0:	b007      	add	sp, #28
 800def2:	bd00      	pop	{pc}
 800def4:	40021000 	.word	0x40021000

0800def8 <WriteRegData>:

void WriteRegData(uint8_t reg, uint8_t data)
{
 800def8:	b500      	push	{lr}
 800defa:	b083      	sub	sp, #12
	send[0]= 0x80 | reg;
 800defc:	4a07      	ldr	r2, [pc, #28]	; (800df1c <WriteRegData+0x24>)
 800defe:	2380      	movs	r3, #128	; 0x80
 800df00:	425b      	negs	r3, r3
 800df02:	4318      	orrs	r0, r3
 800df04:	7010      	strb	r0, [r2, #0]
	send[1]= data;
 800df06:	7051      	strb	r1, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 2, HAL_MAX_DELAY);
 800df08:	337f      	adds	r3, #127	; 0x7f
 800df0a:	9300      	str	r3, [sp, #0]
 800df0c:	3303      	adds	r3, #3
 800df0e:	2172      	movs	r1, #114	; 0x72
 800df10:	4803      	ldr	r0, [pc, #12]	; (800df20 <WriteRegData+0x28>)
 800df12:	f004 fbb9 	bl	8012688 <HAL_I2C_Master_Transmit>

}
 800df16:	b003      	add	sp, #12
 800df18:	bd00      	pop	{pc}
 800df1a:	46c0      	nop			; (mov r8, r8)
 800df1c:	200072bc 	.word	0x200072bc
 800df20:	20007280 	.word	0x20007280

0800df24 <Read_Word>:


uint16_t Read_Word(uint8_t reg)
{
 800df24:	b570      	push	{r4, r5, r6, lr}
 800df26:	b082      	sub	sp, #8
   send[0]= 0xA0 | reg;
 800df28:	4a0e      	ldr	r2, [pc, #56]	; (800df64 <Read_Word+0x40>)
 800df2a:	2360      	movs	r3, #96	; 0x60
 800df2c:	425b      	negs	r3, r3
 800df2e:	4318      	orrs	r0, r3
 800df30:	7010      	strb	r0, [r2, #0]
   HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 1, HAL_MAX_DELAY);
 800df32:	4d0d      	ldr	r5, [pc, #52]	; (800df68 <Read_Word+0x44>)
 800df34:	2601      	movs	r6, #1
 800df36:	4276      	negs	r6, r6
 800df38:	9600      	str	r6, [sp, #0]
 800df3a:	3361      	adds	r3, #97	; 0x61
 800df3c:	2172      	movs	r1, #114	; 0x72
 800df3e:	0028      	movs	r0, r5
 800df40:	f004 fba2 	bl	8012688 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c1, colorProximityAdd, receive, 2, HAL_MAX_DELAY);
 800df44:	4c09      	ldr	r4, [pc, #36]	; (800df6c <Read_Word+0x48>)
 800df46:	9600      	str	r6, [sp, #0]
 800df48:	2302      	movs	r3, #2
 800df4a:	0022      	movs	r2, r4
 800df4c:	2172      	movs	r1, #114	; 0x72
 800df4e:	0028      	movs	r0, r5
 800df50:	f004 fc3e 	bl	80127d0 <HAL_I2C_Master_Receive>
    return (uint16_t)(receive[0] + (256 * receive[1]));
 800df54:	7863      	ldrb	r3, [r4, #1]
 800df56:	021b      	lsls	r3, r3, #8
 800df58:	7820      	ldrb	r0, [r4, #0]
 800df5a:	18c0      	adds	r0, r0, r3
 800df5c:	b280      	uxth	r0, r0

}
 800df5e:	b002      	add	sp, #8
 800df60:	bd70      	pop	{r4, r5, r6, pc}
 800df62:	46c0      	nop			; (mov r8, r8)
 800df64:	200072bc 	.word	0x200072bc
 800df68:	20007280 	.word	0x20007280
 800df6c:	200072c0 	.word	0x200072c0

0800df70 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800df70:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800df72:	f002 fe01 	bl	8010b78 <HAL_IncTick>
  osSystickHandler();  
 800df76:	f000 fe55 	bl	800ec24 <osSystickHandler>

}
 800df7a:	bd10      	pop	{r4, pc}

0800df7c <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800df7c:	e7fe      	b.n	800df7c <HardFault_Handler>
	...

0800df80 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800df80:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800df82:	4802      	ldr	r0, [pc, #8]	; (800df8c <USART1_IRQHandler+0xc>)
 800df84:	f006 f9c5 	bl	8014312 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800df88:	bd10      	pop	{r4, pc}
 800df8a:	46c0      	nop			; (mov r8, r8)
 800df8c:	2000707c 	.word	0x2000707c

0800df90 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800df90:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800df92:	4802      	ldr	r0, [pc, #8]	; (800df9c <USART2_IRQHandler+0xc>)
 800df94:	f006 f9bd 	bl	8014312 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800df98:	bd10      	pop	{r4, pc}
 800df9a:	46c0      	nop			; (mov r8, r8)
 800df9c:	200071e4 	.word	0x200071e4

0800dfa0 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800dfa0:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800dfa2:	4806      	ldr	r0, [pc, #24]	; (800dfbc <USART3_8_IRQHandler+0x1c>)
 800dfa4:	f006 f9b5 	bl	8014312 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800dfa8:	4805      	ldr	r0, [pc, #20]	; (800dfc0 <USART3_8_IRQHandler+0x20>)
 800dfaa:	f006 f9b2 	bl	8014312 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800dfae:	4805      	ldr	r0, [pc, #20]	; (800dfc4 <USART3_8_IRQHandler+0x24>)
 800dfb0:	f006 f9af 	bl	8014312 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800dfb4:	4804      	ldr	r0, [pc, #16]	; (800dfc8 <USART3_8_IRQHandler+0x28>)
 800dfb6:	f006 f9ac 	bl	8014312 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dfba:	bd10      	pop	{r4, pc}
 800dfbc:	20006f8c 	.word	0x20006f8c
 800dfc0:	20007170 	.word	0x20007170
 800dfc4:	20007004 	.word	0x20007004
 800dfc8:	200070f4 	.word	0x200070f4

0800dfcc <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800dfcc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800dfce:	2001      	movs	r0, #1
 800dfd0:	f7f9 fb46 	bl	8007660 <DMA_IRQHandler>
	
}
 800dfd4:	bd10      	pop	{r4, pc}
	...

0800dfd8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800dfd8:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800dfda:	4b0c      	ldr	r3, [pc, #48]	; (800e00c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	06db      	lsls	r3, r3, #27
 800dfe0:	d408      	bmi.n	800dff4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800dfe2:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	05db      	lsls	r3, r3, #23
 800dfe8:	d408      	bmi.n	800dffc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800dfea:	4b09      	ldr	r3, [pc, #36]	; (800e010 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	06db      	lsls	r3, r3, #27
 800dff0:	d408      	bmi.n	800e004 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800dff2:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800dff4:	2005      	movs	r0, #5
 800dff6:	f7f9 fb33 	bl	8007660 <DMA_IRQHandler>
 800dffa:	e7fa      	b.n	800dff2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800dffc:	2002      	movs	r0, #2
 800dffe:	f7f9 fb2f 	bl	8007660 <DMA_IRQHandler>
 800e002:	e7f6      	b.n	800dff2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800e004:	4803      	ldr	r0, [pc, #12]	; (800e014 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800e006:	f003 fac9 	bl	801159c <HAL_DMA_IRQHandler>
}
 800e00a:	e7f2      	b.n	800dff2 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800e00c:	40020400 	.word	0x40020400
 800e010:	40020000 	.word	0x40020000
 800e014:	20001d74 	.word	0x20001d74

0800e018 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800e018:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800e01a:	4b14      	ldr	r3, [pc, #80]	; (800e06c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	03db      	lsls	r3, r3, #15
 800e020:	d413      	bmi.n	800e04a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800e022:	4b12      	ldr	r3, [pc, #72]	; (800e06c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	02db      	lsls	r3, r3, #11
 800e028:	d413      	bmi.n	800e052 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800e02a:	4b11      	ldr	r3, [pc, #68]	; (800e070 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	05db      	lsls	r3, r3, #23
 800e030:	d413      	bmi.n	800e05a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800e032:	4b0e      	ldr	r3, [pc, #56]	; (800e06c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	04db      	lsls	r3, r3, #19
 800e038:	d413      	bmi.n	800e062 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800e03a:	4b0c      	ldr	r3, [pc, #48]	; (800e06c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	01db      	lsls	r3, r3, #7
 800e040:	d506      	bpl.n	800e050 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800e042:	480c      	ldr	r0, [pc, #48]	; (800e074 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800e044:	f003 faaa 	bl	801159c <HAL_DMA_IRQHandler>
	}
}
 800e048:	e002      	b.n	800e050 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800e04a:	2003      	movs	r0, #3
 800e04c:	f7f9 fb08 	bl	8007660 <DMA_IRQHandler>
}
 800e050:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800e052:	2004      	movs	r0, #4
 800e054:	f7f9 fb04 	bl	8007660 <DMA_IRQHandler>
 800e058:	e7fa      	b.n	800e050 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800e05a:	2006      	movs	r0, #6
 800e05c:	f7f9 fb00 	bl	8007660 <DMA_IRQHandler>
 800e060:	e7f6      	b.n	800e050 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800e062:	4805      	ldr	r0, [pc, #20]	; (800e078 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800e064:	f003 fa9a 	bl	801159c <HAL_DMA_IRQHandler>
 800e068:	e7f2      	b.n	800e050 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800e06a:	46c0      	nop			; (mov r8, r8)
 800e06c:	40020000 	.word	0x40020000
 800e070:	40020400 	.word	0x40020400
 800e074:	20001de4 	.word	0x20001de4
 800e078:	20001dac 	.word	0x20001dac

0800e07c <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e07c:	b510      	push	{r4, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800e082:	2300      	movs	r3, #0
 800e084:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800e086:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d001      	beq.n	800e090 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800e08c:	f7fe fe30 	bl	800ccf0 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800e090:	0020      	movs	r0, r4
 800e092:	f7fe fcc3 	bl	800ca1c <GetPort>
 800e096:	0080      	lsls	r0, r0, #2
 800e098:	4b03      	ldr	r3, [pc, #12]	; (800e0a8 <HAL_UART_TxCpltCallback+0x2c>)
 800e09a:	58c0      	ldr	r0, [r0, r3]
 800e09c:	a901      	add	r1, sp, #4
 800e09e:	f001 f945 	bl	800f32c <xQueueGiveFromISR>
}
 800e0a2:	b002      	add	sp, #8
 800e0a4:	bd10      	pop	{r4, pc}
 800e0a6:	46c0      	nop			; (mov r8, r8)
 800e0a8:	20006ed8 	.word	0x20006ed8

0800e0ac <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e0ac:	b510      	push	{r4, lr}
 800e0ae:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800e0b0:	2369      	movs	r3, #105	; 0x69
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800e0b6:	f7fe fcb1 	bl	800ca1c <GetPort>
	if (portStatus[port] == STREAM) {
 800e0ba:	4b0c      	ldr	r3, [pc, #48]	; (800e0ec <HAL_UART_ErrorCallback+0x40>)
 800e0bc:	5c1b      	ldrb	r3, [r3, r0]
 800e0be:	2b02      	cmp	r3, #2
 800e0c0:	d005      	beq.n	800e0ce <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800e0c2:	4b0b      	ldr	r3, [pc, #44]	; (800e0f0 <HAL_UART_ErrorCallback+0x44>)
 800e0c4:	1818      	adds	r0, r3, r0
 800e0c6:	3801      	subs	r0, #1
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	7003      	strb	r3, [r0, #0]
	}	
}
 800e0cc:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800e0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	685a      	ldr	r2, [r3, #4]
 800e0d4:	b292      	uxth	r2, r2
 800e0d6:	3801      	subs	r0, #1
 800e0d8:	0080      	lsls	r0, r0, #2
 800e0da:	4b06      	ldr	r3, [pc, #24]	; (800e0f4 <HAL_UART_ErrorCallback+0x48>)
 800e0dc:	58c3      	ldr	r3, [r0, r3]
 800e0de:	6819      	ldr	r1, [r3, #0]
 800e0e0:	3128      	adds	r1, #40	; 0x28
 800e0e2:	0020      	movs	r0, r4
 800e0e4:	f005 fcfe 	bl	8013ae4 <HAL_UART_Receive_DMA>
 800e0e8:	e7f0      	b.n	800e0cc <HAL_UART_ErrorCallback+0x20>
 800e0ea:	46c0      	nop			; (mov r8, r8)
 800e0ec:	2000116c 	.word	0x2000116c
 800e0f0:	20001340 	.word	0x20001340
 800e0f4:	20001820 	.word	0x20001820

0800e0f8 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0f8:	b510      	push	{r4, lr}
 800e0fa:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800e0fc:	f7fe fc8e 	bl	800ca1c <GetPort>
 800e100:	4b13      	ldr	r3, [pc, #76]	; (800e150 <HAL_UART_RxCpltCallback+0x58>)
 800e102:	5c1b      	ldrb	r3, [r3, r0]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d006      	beq.n	800e116 <HAL_UART_RxCpltCallback+0x1e>
 800e108:	0020      	movs	r0, r4
 800e10a:	f7fe fc87 	bl	800ca1c <GetPort>
 800e10e:	4b10      	ldr	r3, [pc, #64]	; (800e150 <HAL_UART_RxCpltCallback+0x58>)
 800e110:	5c1b      	ldrb	r3, [r3, r0]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d11a      	bne.n	800e14c <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800e116:	0020      	movs	r0, r4
 800e118:	f7fe fc80 	bl	800ca1c <GetPort>
 800e11c:	4b0d      	ldr	r3, [pc, #52]	; (800e154 <HAL_UART_RxCpltCallback+0x5c>)
 800e11e:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800e120:	0020      	movs	r0, r4
 800e122:	f7fe fc7b 	bl	800ca1c <GetPort>
 800e126:	4b0a      	ldr	r3, [pc, #40]	; (800e150 <HAL_UART_RxCpltCallback+0x58>)
 800e128:	2205      	movs	r2, #5
 800e12a:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800e12c:	0020      	movs	r0, r4
 800e12e:	f7fe fc75 	bl	800ca1c <GetPort>
 800e132:	4b09      	ldr	r3, [pc, #36]	; (800e158 <HAL_UART_RxCpltCallback+0x60>)
 800e134:	1818      	adds	r0, r3, r0
 800e136:	3801      	subs	r0, #1
 800e138:	2300      	movs	r3, #0
 800e13a:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800e13c:	0020      	movs	r0, r4
 800e13e:	f7fe fc6d 	bl	800ca1c <GetPort>
 800e142:	4b06      	ldr	r3, [pc, #24]	; (800e15c <HAL_UART_RxCpltCallback+0x64>)
 800e144:	1818      	adds	r0, r3, r0
 800e146:	3801      	subs	r0, #1
 800e148:	2301      	movs	r3, #1
 800e14a:	7003      	strb	r3, [r0, #0]
	}

}
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	46c0      	nop			; (mov r8, r8)
 800e150:	2000116c 	.word	0x2000116c
 800e154:	20006dd4 	.word	0x20006dd4
 800e158:	200017c8 	.word	0x200017c8
 800e15c:	20001340 	.word	0x20001340

0800e160 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800e160:	b672      	cpsid	i
 800e162:	e7fe      	b.n	800e162 <vApplicationStackOverflowHook+0x2>

0800e164 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800e164:	b672      	cpsid	i
 800e166:	e7fe      	b.n	800e166 <vApplicationMallocFailedHook+0x2>

0800e168 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800e168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e16a:	46ce      	mov	lr, r9
 800e16c:	b500      	push	{lr}
 800e16e:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800e170:	ac05      	add	r4, sp, #20
 800e172:	4b34      	ldr	r3, [pc, #208]	; (800e244 <RTC_CalendarConfig+0xdc>)
 800e174:	0022      	movs	r2, r4
 800e176:	cb43      	ldmia	r3!, {r0, r1, r6}
 800e178:	c243      	stmia	r2!, {r0, r1, r6}
 800e17a:	aa02      	add	r2, sp, #8
 800e17c:	4b32      	ldr	r3, [pc, #200]	; (800e248 <RTC_CalendarConfig+0xe0>)
 800e17e:	cb03      	ldmia	r3!, {r0, r1}
 800e180:	c203      	stmia	r2!, {r0, r1}
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800e186:	2015      	movs	r0, #21
 800e188:	ab02      	add	r3, sp, #8
 800e18a:	469c      	mov	ip, r3
 800e18c:	4460      	add	r0, ip
 800e18e:	f006 f948 	bl	8014422 <atoi>
 800e192:	b2c3      	uxtb	r3, r0
 800e194:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800e196:	2600      	movs	r6, #0
 800e198:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800e19a:	a806      	add	r0, sp, #24
 800e19c:	f006 f941 	bl	8014422 <atoi>
 800e1a0:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800e1a2:	70e6      	strb	r6, [r4, #3]
 800e1a4:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e1a6:	4e29      	ldr	r6, [pc, #164]	; (800e24c <RTC_CalendarConfig+0xe4>)
 800e1a8:	e002      	b.n	800e1b0 <RTC_CalendarConfig+0x48>
 800e1aa:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800e1ac:	2c0d      	cmp	r4, #13
 800e1ae:	d009      	beq.n	800e1c4 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e1b0:	00a3      	lsls	r3, r4, #2
 800e1b2:	3b04      	subs	r3, #4
 800e1b4:	58f1      	ldr	r1, [r6, r3]
 800e1b6:	a805      	add	r0, sp, #20
 800e1b8:	f7f1 ffa4 	bl	8000104 <strcmp>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d1f4      	bne.n	800e1aa <RTC_CalendarConfig+0x42>
			month = i + 1;
 800e1c0:	b2e5      	uxtb	r5, r4
 800e1c2:	e7f2      	b.n	800e1aa <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800e1c4:	ab02      	add	r3, sp, #8
 800e1c6:	1d98      	adds	r0, r3, #6
 800e1c8:	f006 f92b 	bl	8014422 <atoi>
 800e1cc:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800e1ce:	ac05      	add	r4, sp, #20
 800e1d0:	2600      	movs	r6, #0
 800e1d2:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800e1d4:	ab02      	add	r3, sp, #8
 800e1d6:	1cd8      	adds	r0, r3, #3
 800e1d8:	f006 f923 	bl	8014422 <atoi>
 800e1dc:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800e1de:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800e1e0:	a802      	add	r0, sp, #8
 800e1e2:	f006 f91e 	bl	8014422 <atoi>
 800e1e6:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800e1e8:	a90d      	add	r1, sp, #52	; 0x34
 800e1ea:	464b      	mov	r3, r9
 800e1ec:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800e1ee:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800e1f0:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	4815      	ldr	r0, [pc, #84]	; (800e250 <RTC_CalendarConfig+0xe8>)
 800e1fa:	f005 f9bf 	bl	801357c <HAL_RTC_SetDate>
		return BOS_ERROR;
 800e1fe:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e200:	2800      	cmp	r0, #0
 800e202:	d119      	bne.n	800e238 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800e204:	a908      	add	r1, sp, #32
 800e206:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800e208:	9b01      	ldr	r3, [sp, #4]
 800e20a:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800e20c:	9b00      	ldr	r3, [sp, #0]
 800e20e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800e210:	2300      	movs	r3, #0
 800e212:	720b      	strb	r3, [r1, #8]
 800e214:	4a0f      	ldr	r2, [pc, #60]	; (800e254 <RTC_CalendarConfig+0xec>)
 800e216:	3018      	adds	r0, #24
 800e218:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e21a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800e21c:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e21e:	2200      	movs	r2, #0
 800e220:	480b      	ldr	r0, [pc, #44]	; (800e250 <RTC_CalendarConfig+0xe8>)
 800e222:	f005 f925 	bl	8013470 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e226:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e228:	2800      	cmp	r0, #0
 800e22a:	d105      	bne.n	800e238 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e22c:	4a0a      	ldr	r2, [pc, #40]	; (800e258 <RTC_CalendarConfig+0xf0>)
 800e22e:	2101      	movs	r1, #1
 800e230:	4807      	ldr	r0, [pc, #28]	; (800e250 <RTC_CalendarConfig+0xe8>)
 800e232:	f005 fa67 	bl	8013704 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	0018      	movs	r0, r3
 800e23a:	b00e      	add	sp, #56	; 0x38
 800e23c:	bc04      	pop	{r2}
 800e23e:	4691      	mov	r9, r2
 800e240:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e242:	46c0      	nop			; (mov r8, r8)
 800e244:	08019318 	.word	0x08019318
 800e248:	0801933c 	.word	0x0801933c
 800e24c:	20000048 	.word	0x20000048
 800e250:	200072c4 	.word	0x200072c4
 800e254:	20006e54 	.word	0x20006e54
 800e258:	000032f2 	.word	0x000032f2

0800e25c <RTC_Init>:
{
 800e25c:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800e25e:	4a1c      	ldr	r2, [pc, #112]	; (800e2d0 <RTC_Init+0x74>)
 800e260:	6a11      	ldr	r1, [r2, #32]
 800e262:	2380      	movs	r3, #128	; 0x80
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	430b      	orrs	r3, r1
 800e268:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800e26a:	481a      	ldr	r0, [pc, #104]	; (800e2d4 <RTC_Init+0x78>)
 800e26c:	4b1a      	ldr	r3, [pc, #104]	; (800e2d8 <RTC_Init+0x7c>)
 800e26e:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e270:	2300      	movs	r3, #0
 800e272:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800e274:	227c      	movs	r2, #124	; 0x7c
 800e276:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800e278:	4a18      	ldr	r2, [pc, #96]	; (800e2dc <RTC_Init+0x80>)
 800e27a:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e27c:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e27e:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e280:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e282:	f005 f897 	bl	80133b4 <HAL_RTC_Init>
 800e286:	23ff      	movs	r3, #255	; 0xff
 800e288:	2800      	cmp	r0, #0
 800e28a:	d11e      	bne.n	800e2ca <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800e28c:	2101      	movs	r1, #1
 800e28e:	4811      	ldr	r0, [pc, #68]	; (800e2d4 <RTC_Init+0x78>)
 800e290:	f005 fa3e 	bl	8013710 <HAL_RTCEx_BKUPRead>
 800e294:	4b12      	ldr	r3, [pc, #72]	; (800e2e0 <RTC_Init+0x84>)
 800e296:	4298      	cmp	r0, r3
 800e298:	d10e      	bne.n	800e2b8 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800e29a:	4b0d      	ldr	r3, [pc, #52]	; (800e2d0 <RTC_Init+0x74>)
 800e29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29e:	011b      	lsls	r3, r3, #4
 800e2a0:	d502      	bpl.n	800e2a8 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800e2a2:	4b10      	ldr	r3, [pc, #64]	; (800e2e4 <RTC_Init+0x88>)
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800e2a8:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <RTC_Init+0x74>)
 800e2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ac:	015b      	lsls	r3, r3, #5
 800e2ae:	d505      	bpl.n	800e2bc <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800e2b0:	4b0c      	ldr	r3, [pc, #48]	; (800e2e4 <RTC_Init+0x88>)
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	701a      	strb	r2, [r3, #0]
 800e2b6:	e001      	b.n	800e2bc <RTC_Init+0x60>
    RTC_CalendarConfig();
 800e2b8:	f7ff ff56 	bl	800e168 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800e2bc:	4a04      	ldr	r2, [pc, #16]	; (800e2d0 <RTC_Init+0x74>)
 800e2be:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e2c0:	2380      	movs	r3, #128	; 0x80
 800e2c2:	045b      	lsls	r3, r3, #17
 800e2c4:	430b      	orrs	r3, r1
 800e2c6:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	46c0      	nop			; (mov r8, r8)
 800e2d0:	40021000 	.word	0x40021000
 800e2d4:	200072c4 	.word	0x200072c4
 800e2d8:	40002800 	.word	0x40002800
 800e2dc:	000007cf 	.word	0x000007cf
 800e2e0:	000032f2 	.word	0x000032f2
 800e2e4:	20001f6c 	.word	0x20001f6c

0800e2e8 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800e2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ea:	46c6      	mov	lr, r8
 800e2ec:	b500      	push	{lr}
 800e2ee:	b086      	sub	sp, #24
 800e2f0:	ac0c      	add	r4, sp, #48	; 0x30
 800e2f2:	7827      	ldrb	r7, [r4, #0]
 800e2f4:	ac0d      	add	r4, sp, #52	; 0x34
 800e2f6:	7824      	ldrb	r4, [r4, #0]
 800e2f8:	46a0      	mov	r8, r4
 800e2fa:	ac0e      	add	r4, sp, #56	; 0x38
 800e2fc:	7825      	ldrb	r5, [r4, #0]
 800e2fe:	ac0f      	add	r4, sp, #60	; 0x3c
 800e300:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800e302:	ac05      	add	r4, sp, #20
 800e304:	3230      	adds	r2, #48	; 0x30
 800e306:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800e308:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800e30a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800e30c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e30e:	2200      	movs	r2, #0
 800e310:	0021      	movs	r1, r4
 800e312:	481f      	ldr	r0, [pc, #124]	; (800e390 <BOS_CalendarConfig+0xa8>)
 800e314:	f005 f932 	bl	801357c <HAL_RTC_SetDate>
 800e318:	2800      	cmp	r0, #0
 800e31a:	d136      	bne.n	800e38a <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e31c:	466b      	mov	r3, sp
 800e31e:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800e320:	4642      	mov	r2, r8
 800e322:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800e324:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e326:	2300      	movs	r3, #0
 800e328:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800e32a:	2e01      	cmp	r6, #1
 800e32c:	d020      	beq.n	800e370 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800e32e:	2e02      	cmp	r6, #2
 800e330:	d024      	beq.n	800e37c <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800e332:	4b18      	ldr	r3, [pc, #96]	; (800e394 <BOS_CalendarConfig+0xac>)
 800e334:	2218      	movs	r2, #24
 800e336:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e338:	2200      	movs	r2, #0
 800e33a:	4669      	mov	r1, sp
 800e33c:	4814      	ldr	r0, [pc, #80]	; (800e390 <BOS_CalendarConfig+0xa8>)
 800e33e:	f005 f897 	bl	8013470 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e342:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e344:	2800      	cmp	r0, #0
 800e346:	d10e      	bne.n	800e366 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800e348:	4a12      	ldr	r2, [pc, #72]	; (800e394 <BOS_CalendarConfig+0xac>)
 800e34a:	7b53      	ldrb	r3, [r2, #13]
 800e34c:	021b      	lsls	r3, r3, #8
 800e34e:	7911      	ldrb	r1, [r2, #4]
 800e350:	4319      	orrs	r1, r3
 800e352:	308d      	adds	r0, #141	; 0x8d
 800e354:	0040      	lsls	r0, r0, #1
 800e356:	f7f9 fa6d 	bl	8007834 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e35a:	4a0f      	ldr	r2, [pc, #60]	; (800e398 <BOS_CalendarConfig+0xb0>)
 800e35c:	2101      	movs	r1, #1
 800e35e:	480c      	ldr	r0, [pc, #48]	; (800e390 <BOS_CalendarConfig+0xa8>)
 800e360:	f005 f9d0 	bl	8013704 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e364:	2300      	movs	r3, #0
}
 800e366:	0018      	movs	r0, r3
 800e368:	b006      	add	sp, #24
 800e36a:	bc04      	pop	{r2}
 800e36c:	4690      	mov	r8, r2
 800e36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e370:	466a      	mov	r2, sp
 800e372:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e374:	4b07      	ldr	r3, [pc, #28]	; (800e394 <BOS_CalendarConfig+0xac>)
 800e376:	220c      	movs	r2, #12
 800e378:	735a      	strb	r2, [r3, #13]
 800e37a:	e7dd      	b.n	800e338 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e37c:	2340      	movs	r3, #64	; 0x40
 800e37e:	466a      	mov	r2, sp
 800e380:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e382:	4b04      	ldr	r3, [pc, #16]	; (800e394 <BOS_CalendarConfig+0xac>)
 800e384:	220c      	movs	r2, #12
 800e386:	735a      	strb	r2, [r3, #13]
 800e388:	e7d6      	b.n	800e338 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800e38a:	23ff      	movs	r3, #255	; 0xff
 800e38c:	e7eb      	b.n	800e366 <BOS_CalendarConfig+0x7e>
 800e38e:	46c0      	nop			; (mov r8, r8)
 800e390:	200072c4 	.word	0x200072c4
 800e394:	20006e54 	.word	0x20006e54
 800e398:	000032f2 	.word	0x000032f2

0800e39c <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800e39c:	b530      	push	{r4, r5, lr}
 800e39e:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800e3a0:	4d16      	ldr	r5, [pc, #88]	; (800e3fc <GetTimeDate+0x60>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	a902      	add	r1, sp, #8
 800e3a6:	0028      	movs	r0, r5
 800e3a8:	f005 f964 	bl	8013674 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800e3ac:	ac07      	add	r4, sp, #28
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	0021      	movs	r1, r4
 800e3b2:	0028      	movs	r0, r5
 800e3b4:	f005 f984 	bl	80136c0 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800e3b8:	4b11      	ldr	r3, [pc, #68]	; (800e400 <GetTimeDate+0x64>)
 800e3ba:	aa02      	add	r2, sp, #8
 800e3bc:	7a12      	ldrb	r2, [r2, #8]
 800e3be:	09d2      	lsrs	r2, r2, #7
 800e3c0:	3201      	adds	r2, #1
 800e3c2:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800e3c4:	9a03      	ldr	r2, [sp, #12]
 800e3c6:	9201      	str	r2, [sp, #4]
 800e3c8:	0852      	lsrs	r2, r2, #1
 800e3ca:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800e3cc:	aa02      	add	r2, sp, #8
 800e3ce:	7892      	ldrb	r2, [r2, #2]
 800e3d0:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800e3d2:	aa02      	add	r2, sp, #8
 800e3d4:	7852      	ldrb	r2, [r2, #1]
 800e3d6:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800e3d8:	aa02      	add	r2, sp, #8
 800e3da:	7812      	ldrb	r2, [r2, #0]
 800e3dc:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800e3de:	78a2      	ldrb	r2, [r4, #2]
 800e3e0:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800e3e2:	7862      	ldrb	r2, [r4, #1]
 800e3e4:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800e3e6:	7822      	ldrb	r2, [r4, #0]
 800e3e8:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800e3ea:	78e2      	ldrb	r2, [r4, #3]
 800e3ec:	21fa      	movs	r1, #250	; 0xfa
 800e3ee:	00c9      	lsls	r1, r1, #3
 800e3f0:	468c      	mov	ip, r1
 800e3f2:	4462      	add	r2, ip
 800e3f4:	831a      	strh	r2, [r3, #24]
}
 800e3f6:	b009      	add	sp, #36	; 0x24
 800e3f8:	bd30      	pop	{r4, r5, pc}
 800e3fa:	46c0      	nop			; (mov r8, r8)
 800e3fc:	200072c4 	.word	0x200072c4
 800e400:	20006e54 	.word	0x20006e54

0800e404 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e404:	b530      	push	{r4, r5, lr}
 800e406:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e408:	4a12      	ldr	r2, [pc, #72]	; (800e454 <TIM_USEC_Init+0x50>)
 800e40a:	69d1      	ldr	r1, [r2, #28]
 800e40c:	2080      	movs	r0, #128	; 0x80
 800e40e:	0040      	lsls	r0, r0, #1
 800e410:	4301      	orrs	r1, r0
 800e412:	61d1      	str	r1, [r2, #28]
 800e414:	69d3      	ldr	r3, [r2, #28]
 800e416:	4003      	ands	r3, r0
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e41c:	4c0e      	ldr	r4, [pc, #56]	; (800e458 <TIM_USEC_Init+0x54>)
 800e41e:	4b0f      	ldr	r3, [pc, #60]	; (800e45c <TIM_USEC_Init+0x58>)
 800e420:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e422:	f004 fedf 	bl	80131e4 <HAL_RCC_GetPCLK1Freq>
 800e426:	490e      	ldr	r1, [pc, #56]	; (800e460 <TIM_USEC_Init+0x5c>)
 800e428:	f7f1 fe92 	bl	8000150 <__udivsi3>
 800e42c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e42e:	2500      	movs	r5, #0
 800e430:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e432:	4b0c      	ldr	r3, [pc, #48]	; (800e464 <TIM_USEC_Init+0x60>)
 800e434:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e436:	0020      	movs	r0, r4
 800e438:	f005 f9fa 	bl	8013830 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e43c:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e43e:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e440:	a902      	add	r1, sp, #8
 800e442:	0020      	movs	r0, r4
 800e444:	f005 fa0e 	bl	8013864 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e448:	0020      	movs	r0, r4
 800e44a:	f005 f968 	bl	801371e <HAL_TIM_Base_Start>
}
 800e44e:	b005      	add	sp, #20
 800e450:	bd30      	pop	{r4, r5, pc}
 800e452:	46c0      	nop			; (mov r8, r8)
 800e454:	40021000 	.word	0x40021000
 800e458:	20007320 	.word	0x20007320
 800e45c:	40002000 	.word	0x40002000
 800e460:	000f4240 	.word	0x000f4240
 800e464:	0000ffff 	.word	0x0000ffff

0800e468 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800e468:	b530      	push	{r4, r5, lr}
 800e46a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800e46c:	4a12      	ldr	r2, [pc, #72]	; (800e4b8 <TIM_MSEC_Init+0x50>)
 800e46e:	6991      	ldr	r1, [r2, #24]
 800e470:	2080      	movs	r0, #128	; 0x80
 800e472:	0240      	lsls	r0, r0, #9
 800e474:	4301      	orrs	r1, r0
 800e476:	6191      	str	r1, [r2, #24]
 800e478:	6993      	ldr	r3, [r2, #24]
 800e47a:	4003      	ands	r3, r0
 800e47c:	9301      	str	r3, [sp, #4]
 800e47e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800e480:	4c0e      	ldr	r4, [pc, #56]	; (800e4bc <TIM_MSEC_Init+0x54>)
 800e482:	4b0f      	ldr	r3, [pc, #60]	; (800e4c0 <TIM_MSEC_Init+0x58>)
 800e484:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800e486:	f004 fead 	bl	80131e4 <HAL_RCC_GetPCLK1Freq>
 800e48a:	21fa      	movs	r1, #250	; 0xfa
 800e48c:	0089      	lsls	r1, r1, #2
 800e48e:	f7f1 fe5f 	bl	8000150 <__udivsi3>
 800e492:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e494:	2500      	movs	r5, #0
 800e496:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800e498:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <TIM_MSEC_Init+0x5c>)
 800e49a:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800e49c:	0020      	movs	r0, r4
 800e49e:	f005 f9c7 	bl	8013830 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e4a2:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e4a4:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800e4a6:	a902      	add	r1, sp, #8
 800e4a8:	0020      	movs	r0, r4
 800e4aa:	f005 f9db 	bl	8013864 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e4ae:	0020      	movs	r0, r4
 800e4b0:	f005 f935 	bl	801371e <HAL_TIM_Base_Start>
}
 800e4b4:	b005      	add	sp, #20
 800e4b6:	bd30      	pop	{r4, r5, pc}
 800e4b8:	40021000 	.word	0x40021000
 800e4bc:	200072e4 	.word	0x200072e4
 800e4c0:	40014000 	.word	0x40014000
 800e4c4:	0000ffff 	.word	0x0000ffff

0800e4c8 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800e4c8:	b510      	push	{r4, lr}
 800e4ca:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800e4cc:	f002 f9f0 	bl	80108b0 <vPortEnterCritical>
	
	if (Delay)
 800e4d0:	2c00      	cmp	r4, #0
 800e4d2:	d006      	beq.n	800e4e2 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800e4d4:	4b04      	ldr	r3, [pc, #16]	; (800e4e8 <StartMicroDelay+0x20>)
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800e4da:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e4dc:	1a5b      	subs	r3, r3, r1
 800e4de:	42a3      	cmp	r3, r4
 800e4e0:	d9fb      	bls.n	800e4da <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e4e2:	f002 f9f1 	bl	80108c8 <vPortExitCritical>
}
 800e4e6:	bd10      	pop	{r4, pc}
 800e4e8:	20007320 	.word	0x20007320

0800e4ec <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800e4ec:	b510      	push	{r4, lr}
 800e4ee:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800e4f0:	f002 f9de 	bl	80108b0 <vPortEnterCritical>
	
	if (Delay)
 800e4f4:	2c00      	cmp	r4, #0
 800e4f6:	d006      	beq.n	800e506 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800e4f8:	4b04      	ldr	r3, [pc, #16]	; (800e50c <StartMilliDelay+0x20>)
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800e4fe:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e500:	1a5b      	subs	r3, r3, r1
 800e502:	42a3      	cmp	r3, r4
 800e504:	d9fb      	bls.n	800e4fe <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e506:	f002 f9df 	bl	80108c8 <vPortExitCritical>
}
 800e50a:	bd10      	pop	{r4, pc}
 800e50c:	200072e4 	.word	0x200072e4

0800e510 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800e510:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800e512:	4809      	ldr	r0, [pc, #36]	; (800e538 <MX_USART1_UART_Init+0x28>)
 800e514:	4b09      	ldr	r3, [pc, #36]	; (800e53c <MX_USART1_UART_Init+0x2c>)
 800e516:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e518:	23e1      	movs	r3, #225	; 0xe1
 800e51a:	031b      	lsls	r3, r3, #12
 800e51c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e51e:	2300      	movs	r3, #0
 800e520:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e522:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e524:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e526:	220c      	movs	r2, #12
 800e528:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e52a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e52c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e52e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e530:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800e532:	f005 fe17 	bl	8014164 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800e536:	bd10      	pop	{r4, pc}
 800e538:	2000707c 	.word	0x2000707c
 800e53c:	40013800 	.word	0x40013800

0800e540 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800e540:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800e542:	4809      	ldr	r0, [pc, #36]	; (800e568 <MX_USART2_UART_Init+0x28>)
 800e544:	4b09      	ldr	r3, [pc, #36]	; (800e56c <MX_USART2_UART_Init+0x2c>)
 800e546:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e548:	23e1      	movs	r3, #225	; 0xe1
 800e54a:	031b      	lsls	r3, r3, #12
 800e54c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e54e:	2300      	movs	r3, #0
 800e550:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e552:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e554:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e556:	220c      	movs	r2, #12
 800e558:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e55a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e55c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e55e:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e560:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e562:	f005 fdff 	bl	8014164 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800e566:	bd10      	pop	{r4, pc}
 800e568:	200071e4 	.word	0x200071e4
 800e56c:	40004400 	.word	0x40004400

0800e570 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800e570:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800e572:	4809      	ldr	r0, [pc, #36]	; (800e598 <MX_USART3_UART_Init+0x28>)
 800e574:	4b09      	ldr	r3, [pc, #36]	; (800e59c <MX_USART3_UART_Init+0x2c>)
 800e576:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e578:	23e1      	movs	r3, #225	; 0xe1
 800e57a:	031b      	lsls	r3, r3, #12
 800e57c:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e57e:	2300      	movs	r3, #0
 800e580:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e582:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e584:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e586:	220c      	movs	r2, #12
 800e588:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e58a:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e58c:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e58e:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e590:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e592:	f005 fde7 	bl	8014164 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e596:	bd10      	pop	{r4, pc}
 800e598:	20006f8c 	.word	0x20006f8c
 800e59c:	40004800 	.word	0x40004800

0800e5a0 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800e5a0:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800e5a2:	4809      	ldr	r0, [pc, #36]	; (800e5c8 <MX_USART4_UART_Init+0x28>)
 800e5a4:	4b09      	ldr	r3, [pc, #36]	; (800e5cc <MX_USART4_UART_Init+0x2c>)
 800e5a6:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e5a8:	23e1      	movs	r3, #225	; 0xe1
 800e5aa:	031b      	lsls	r3, r3, #12
 800e5ac:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e5b2:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e5b4:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e5b6:	220c      	movs	r2, #12
 800e5b8:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5ba:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5bc:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e5be:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5c0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800e5c2:	f005 fdcf 	bl	8014164 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e5c6:	bd10      	pop	{r4, pc}
 800e5c8:	20007170 	.word	0x20007170
 800e5cc:	40004c00 	.word	0x40004c00

0800e5d0 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800e5d0:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800e5d2:	4809      	ldr	r0, [pc, #36]	; (800e5f8 <MX_USART5_UART_Init+0x28>)
 800e5d4:	4b09      	ldr	r3, [pc, #36]	; (800e5fc <MX_USART5_UART_Init+0x2c>)
 800e5d6:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e5d8:	23e1      	movs	r3, #225	; 0xe1
 800e5da:	031b      	lsls	r3, r3, #12
 800e5dc:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e5e2:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e5e4:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e5e6:	220c      	movs	r2, #12
 800e5e8:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5ea:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5ec:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e5ee:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5f0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800e5f2:	f005 fdb7 	bl	8014164 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800e5f6:	bd10      	pop	{r4, pc}
 800e5f8:	20007004 	.word	0x20007004
 800e5fc:	40005000 	.word	0x40005000

0800e600 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e600:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e602:	4809      	ldr	r0, [pc, #36]	; (800e628 <MX_USART6_UART_Init+0x28>)
 800e604:	4b09      	ldr	r3, [pc, #36]	; (800e62c <MX_USART6_UART_Init+0x2c>)
 800e606:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e608:	23e1      	movs	r3, #225	; 0xe1
 800e60a:	031b      	lsls	r3, r3, #12
 800e60c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e60e:	2300      	movs	r3, #0
 800e610:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e612:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e614:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e616:	220c      	movs	r2, #12
 800e618:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e61a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e61c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e61e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e620:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e622:	f005 fd9f 	bl	8014164 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e626:	bd10      	pop	{r4, pc}
 800e628:	200070f4 	.word	0x200070f4
 800e62c:	40011400 	.word	0x40011400

0800e630 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e632:	46ce      	mov	lr, r9
 800e634:	b500      	push	{lr}
 800e636:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800e638:	6803      	ldr	r3, [r0, #0]
 800e63a:	4a91      	ldr	r2, [pc, #580]	; (800e880 <HAL_UART_MspInit+0x250>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d015      	beq.n	800e66c <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800e640:	4a90      	ldr	r2, [pc, #576]	; (800e884 <HAL_UART_MspInit+0x254>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d040      	beq.n	800e6c8 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e646:	4a90      	ldr	r2, [pc, #576]	; (800e888 <HAL_UART_MspInit+0x258>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d069      	beq.n	800e720 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800e64c:	4a8f      	ldr	r2, [pc, #572]	; (800e88c <HAL_UART_MspInit+0x25c>)
 800e64e:	4293      	cmp	r3, r2
 800e650:	d100      	bne.n	800e654 <HAL_UART_MspInit+0x24>
 800e652:	e092      	b.n	800e77a <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800e654:	4a8e      	ldr	r2, [pc, #568]	; (800e890 <HAL_UART_MspInit+0x260>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d100      	bne.n	800e65c <HAL_UART_MspInit+0x2c>
 800e65a:	e0b9      	b.n	800e7d0 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e65c:	4a8d      	ldr	r2, [pc, #564]	; (800e894 <HAL_UART_MspInit+0x264>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d100      	bne.n	800e664 <HAL_UART_MspInit+0x34>
 800e662:	e0e0      	b.n	800e826 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e664:	b00c      	add	sp, #48	; 0x30
 800e666:	bc04      	pop	{r2}
 800e668:	4691      	mov	r9, r2
 800e66a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800e66c:	4a8a      	ldr	r2, [pc, #552]	; (800e898 <HAL_UART_MspInit+0x268>)
 800e66e:	6991      	ldr	r1, [r2, #24]
 800e670:	2080      	movs	r0, #128	; 0x80
 800e672:	01c0      	lsls	r0, r0, #7
 800e674:	4301      	orrs	r1, r0
 800e676:	6191      	str	r1, [r2, #24]
 800e678:	6993      	ldr	r3, [r2, #24]
 800e67a:	4003      	ands	r3, r0
 800e67c:	9301      	str	r3, [sp, #4]
 800e67e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800e680:	2380      	movs	r3, #128	; 0x80
 800e682:	009b      	lsls	r3, r3, #2
 800e684:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e686:	2702      	movs	r7, #2
 800e688:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e68a:	2401      	movs	r4, #1
 800e68c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e68e:	2603      	movs	r6, #3
 800e690:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800e692:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800e694:	2590      	movs	r5, #144	; 0x90
 800e696:	05ed      	lsls	r5, r5, #23
 800e698:	a907      	add	r1, sp, #28
 800e69a:	0028      	movs	r0, r5
 800e69c:	f003 fd22 	bl	80120e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800e6a0:	2380      	movs	r3, #128	; 0x80
 800e6a2:	00db      	lsls	r3, r3, #3
 800e6a4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6a6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6a8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6aa:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800e6ac:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800e6ae:	a907      	add	r1, sp, #28
 800e6b0:	0028      	movs	r0, r5
 800e6b2:	f003 fd17 	bl	80120e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	2101      	movs	r1, #1
 800e6ba:	201b      	movs	r0, #27
 800e6bc:	f002 fd48 	bl	8011150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e6c0:	201b      	movs	r0, #27
 800e6c2:	f002 fd79 	bl	80111b8 <HAL_NVIC_EnableIRQ>
 800e6c6:	e7cd      	b.n	800e664 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800e6c8:	4a73      	ldr	r2, [pc, #460]	; (800e898 <HAL_UART_MspInit+0x268>)
 800e6ca:	69d1      	ldr	r1, [r2, #28]
 800e6cc:	2080      	movs	r0, #128	; 0x80
 800e6ce:	0280      	lsls	r0, r0, #10
 800e6d0:	4301      	orrs	r1, r0
 800e6d2:	61d1      	str	r1, [r2, #28]
 800e6d4:	69d3      	ldr	r3, [r2, #28]
 800e6d6:	4003      	ands	r3, r0
 800e6d8:	9302      	str	r3, [sp, #8]
 800e6da:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800e6dc:	2304      	movs	r3, #4
 800e6de:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6e0:	2702      	movs	r7, #2
 800e6e2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6e4:	2401      	movs	r4, #1
 800e6e6:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6e8:	2603      	movs	r6, #3
 800e6ea:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800e6ec:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e6ee:	2590      	movs	r5, #144	; 0x90
 800e6f0:	05ed      	lsls	r5, r5, #23
 800e6f2:	a907      	add	r1, sp, #28
 800e6f4:	0028      	movs	r0, r5
 800e6f6:	f003 fcf5 	bl	80120e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800e6fa:	2308      	movs	r3, #8
 800e6fc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6fe:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e700:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e702:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800e704:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e706:	a907      	add	r1, sp, #28
 800e708:	0028      	movs	r0, r5
 800e70a:	f003 fceb 	bl	80120e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e70e:	2200      	movs	r2, #0
 800e710:	2101      	movs	r1, #1
 800e712:	201c      	movs	r0, #28
 800e714:	f002 fd1c 	bl	8011150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e718:	201c      	movs	r0, #28
 800e71a:	f002 fd4d 	bl	80111b8 <HAL_NVIC_EnableIRQ>
 800e71e:	e7a1      	b.n	800e664 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800e720:	4a5d      	ldr	r2, [pc, #372]	; (800e898 <HAL_UART_MspInit+0x268>)
 800e722:	69d1      	ldr	r1, [r2, #28]
 800e724:	2080      	movs	r0, #128	; 0x80
 800e726:	02c0      	lsls	r0, r0, #11
 800e728:	4301      	orrs	r1, r0
 800e72a:	61d1      	str	r1, [r2, #28]
 800e72c:	69d3      	ldr	r3, [r2, #28]
 800e72e:	4003      	ands	r3, r0
 800e730:	9303      	str	r3, [sp, #12]
 800e732:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e734:	2380      	movs	r3, #128	; 0x80
 800e736:	00db      	lsls	r3, r3, #3
 800e738:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e73a:	2402      	movs	r4, #2
 800e73c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e73e:	2701      	movs	r7, #1
 800e740:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e742:	2603      	movs	r6, #3
 800e744:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e746:	2504      	movs	r5, #4
 800e748:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e74a:	a907      	add	r1, sp, #28
 800e74c:	4853      	ldr	r0, [pc, #332]	; (800e89c <HAL_UART_MspInit+0x26c>)
 800e74e:	f003 fcc9 	bl	80120e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e752:	2380      	movs	r3, #128	; 0x80
 800e754:	011b      	lsls	r3, r3, #4
 800e756:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e758:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e75a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e75c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800e75e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e760:	a907      	add	r1, sp, #28
 800e762:	484e      	ldr	r0, [pc, #312]	; (800e89c <HAL_UART_MspInit+0x26c>)
 800e764:	f003 fcbe 	bl	80120e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e768:	2200      	movs	r2, #0
 800e76a:	2101      	movs	r1, #1
 800e76c:	201d      	movs	r0, #29
 800e76e:	f002 fcef 	bl	8011150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e772:	201d      	movs	r0, #29
 800e774:	f002 fd20 	bl	80111b8 <HAL_NVIC_EnableIRQ>
 800e778:	e774      	b.n	800e664 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800e77a:	4a47      	ldr	r2, [pc, #284]	; (800e898 <HAL_UART_MspInit+0x268>)
 800e77c:	69d1      	ldr	r1, [r2, #28]
 800e77e:	2080      	movs	r0, #128	; 0x80
 800e780:	0300      	lsls	r0, r0, #12
 800e782:	4301      	orrs	r1, r0
 800e784:	61d1      	str	r1, [r2, #28]
 800e786:	69d3      	ldr	r3, [r2, #28]
 800e788:	4003      	ands	r3, r0
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800e78e:	2401      	movs	r4, #1
 800e790:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e792:	2502      	movs	r5, #2
 800e794:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e796:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e798:	2603      	movs	r6, #3
 800e79a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800e79c:	2704      	movs	r7, #4
 800e79e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800e7a0:	a907      	add	r1, sp, #28
 800e7a2:	2090      	movs	r0, #144	; 0x90
 800e7a4:	05c0      	lsls	r0, r0, #23
 800e7a6:	f003 fc9d 	bl	80120e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800e7aa:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7ac:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e7ae:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e7b0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800e7b2:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800e7b4:	a907      	add	r1, sp, #28
 800e7b6:	2090      	movs	r0, #144	; 0x90
 800e7b8:	05c0      	lsls	r0, r0, #23
 800e7ba:	f003 fc93 	bl	80120e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e7be:	2200      	movs	r2, #0
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	201d      	movs	r0, #29
 800e7c4:	f002 fcc4 	bl	8011150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e7c8:	201d      	movs	r0, #29
 800e7ca:	f002 fcf5 	bl	80111b8 <HAL_NVIC_EnableIRQ>
 800e7ce:	e749      	b.n	800e664 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800e7d0:	4a31      	ldr	r2, [pc, #196]	; (800e898 <HAL_UART_MspInit+0x268>)
 800e7d2:	69d1      	ldr	r1, [r2, #28]
 800e7d4:	2080      	movs	r0, #128	; 0x80
 800e7d6:	0340      	lsls	r0, r0, #13
 800e7d8:	4301      	orrs	r1, r0
 800e7da:	61d1      	str	r1, [r2, #28]
 800e7dc:	69d3      	ldr	r3, [r2, #28]
 800e7de:	4003      	ands	r3, r0
 800e7e0:	9305      	str	r3, [sp, #20]
 800e7e2:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800e7e4:	2308      	movs	r3, #8
 800e7e6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7e8:	2402      	movs	r4, #2
 800e7ea:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e7ec:	2701      	movs	r7, #1
 800e7ee:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e7f0:	2603      	movs	r6, #3
 800e7f2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800e7f4:	2504      	movs	r5, #4
 800e7f6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800e7f8:	a907      	add	r1, sp, #28
 800e7fa:	4828      	ldr	r0, [pc, #160]	; (800e89c <HAL_UART_MspInit+0x26c>)
 800e7fc:	f003 fc72 	bl	80120e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800e800:	2310      	movs	r3, #16
 800e802:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e804:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e806:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e808:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800e80a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800e80c:	a907      	add	r1, sp, #28
 800e80e:	4823      	ldr	r0, [pc, #140]	; (800e89c <HAL_UART_MspInit+0x26c>)
 800e810:	f003 fc68 	bl	80120e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e814:	2200      	movs	r2, #0
 800e816:	2101      	movs	r1, #1
 800e818:	201d      	movs	r0, #29
 800e81a:	f002 fc99 	bl	8011150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e81e:	201d      	movs	r0, #29
 800e820:	f002 fcca 	bl	80111b8 <HAL_NVIC_EnableIRQ>
 800e824:	e71e      	b.n	800e664 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800e826:	4b1c      	ldr	r3, [pc, #112]	; (800e898 <HAL_UART_MspInit+0x268>)
 800e828:	699a      	ldr	r2, [r3, #24]
 800e82a:	2420      	movs	r4, #32
 800e82c:	4322      	orrs	r2, r4
 800e82e:	619a      	str	r2, [r3, #24]
 800e830:	699b      	ldr	r3, [r3, #24]
 800e832:	4023      	ands	r3, r4
 800e834:	9306      	str	r3, [sp, #24]
 800e836:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e838:	2310      	movs	r3, #16
 800e83a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e83c:	3b0e      	subs	r3, #14
 800e83e:	4699      	mov	r9, r3
 800e840:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e842:	2501      	movs	r5, #1
 800e844:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e846:	2703      	movs	r7, #3
 800e848:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e84a:	2605      	movs	r6, #5
 800e84c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e84e:	a907      	add	r1, sp, #28
 800e850:	2090      	movs	r0, #144	; 0x90
 800e852:	05c0      	lsls	r0, r0, #23
 800e854:	f003 fc46 	bl	80120e4 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e858:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e85a:	464b      	mov	r3, r9
 800e85c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e85e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e860:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800e862:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e864:	a907      	add	r1, sp, #28
 800e866:	2090      	movs	r0, #144	; 0x90
 800e868:	05c0      	lsls	r0, r0, #23
 800e86a:	f003 fc3b 	bl	80120e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e86e:	2200      	movs	r2, #0
 800e870:	2101      	movs	r1, #1
 800e872:	201d      	movs	r0, #29
 800e874:	f002 fc6c 	bl	8011150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e878:	201d      	movs	r0, #29
 800e87a:	f002 fc9d 	bl	80111b8 <HAL_NVIC_EnableIRQ>
}
 800e87e:	e6f1      	b.n	800e664 <HAL_UART_MspInit+0x34>
 800e880:	40013800 	.word	0x40013800
 800e884:	40004400 	.word	0x40004400
 800e888:	40004800 	.word	0x40004800
 800e88c:	40004c00 	.word	0x40004c00
 800e890:	40005000 	.word	0x40005000
 800e894:	40011400 	.word	0x40011400
 800e898:	40021000 	.word	0x40021000
 800e89c:	48000400 	.word	0x48000400

0800e8a0 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e8a0:	2806      	cmp	r0, #6
 800e8a2:	d80d      	bhi.n	800e8c0 <GetUart+0x20>
 800e8a4:	0080      	lsls	r0, r0, #2
 800e8a6:	4b08      	ldr	r3, [pc, #32]	; (800e8c8 <GetUart+0x28>)
 800e8a8:	581b      	ldr	r3, [r3, r0]
 800e8aa:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800e8ac:	4807      	ldr	r0, [pc, #28]	; (800e8cc <GetUart+0x2c>)
 800e8ae:	e00a      	b.n	800e8c6 <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800e8b0:	4807      	ldr	r0, [pc, #28]	; (800e8d0 <GetUart+0x30>)
 800e8b2:	e008      	b.n	800e8c6 <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800e8b4:	4807      	ldr	r0, [pc, #28]	; (800e8d4 <GetUart+0x34>)
 800e8b6:	e006      	b.n	800e8c6 <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800e8b8:	4807      	ldr	r0, [pc, #28]	; (800e8d8 <GetUart+0x38>)
 800e8ba:	e004      	b.n	800e8c6 <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800e8bc:	4807      	ldr	r0, [pc, #28]	; (800e8dc <GetUart+0x3c>)
 800e8be:	e002      	b.n	800e8c6 <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	e000      	b.n	800e8c6 <GetUart+0x26>
			return P1uart;	
 800e8c4:	4806      	ldr	r0, [pc, #24]	; (800e8e0 <GetUart+0x40>)
	}		
}
 800e8c6:	4770      	bx	lr
 800e8c8:	0801c0fc 	.word	0x0801c0fc
 800e8cc:	200071e4 	.word	0x200071e4
 800e8d0:	200070f4 	.word	0x200070f4
 800e8d4:	20006f8c 	.word	0x20006f8c
 800e8d8:	2000707c 	.word	0x2000707c
 800e8dc:	20007004 	.word	0x20007004
 800e8e0:	20007170 	.word	0x20007170

0800e8e4 <writePxMutex>:
{
 800e8e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	0005      	movs	r5, r0
 800e8ea:	9100      	str	r1, [sp, #0]
 800e8ec:	0017      	movs	r7, r2
 800e8ee:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e8f0:	f7ff ffd6 	bl	800e8a0 <GetUart>
 800e8f4:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e8f6:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e8f8:	2800      	cmp	r0, #0
 800e8fa:	d016      	beq.n	800e92a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e8fc:	00ab      	lsls	r3, r5, #2
 800e8fe:	4a0c      	ldr	r2, [pc, #48]	; (800e930 <writePxMutex+0x4c>)
 800e900:	5898      	ldr	r0, [r3, r2]
 800e902:	9901      	ldr	r1, [sp, #4]
 800e904:	f000 f93a 	bl	800eb7c <osSemaphoreWait>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d10e      	bne.n	800e92a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e90c:	9b08      	ldr	r3, [sp, #32]
 800e90e:	003a      	movs	r2, r7
 800e910:	9900      	ldr	r1, [sp, #0]
 800e912:	0020      	movs	r0, r4
 800e914:	f005 fb80 	bl	8014018 <HAL_UART_Transmit>
 800e918:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e91a:	d001      	beq.n	800e920 <writePxMutex+0x3c>
 800e91c:	2803      	cmp	r0, #3
 800e91e:	d1f5      	bne.n	800e90c <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e920:	00ad      	lsls	r5, r5, #2
 800e922:	4b03      	ldr	r3, [pc, #12]	; (800e930 <writePxMutex+0x4c>)
 800e924:	58e8      	ldr	r0, [r5, r3]
 800e926:	f000 f955 	bl	800ebd4 <osSemaphoreRelease>
}
 800e92a:	0030      	movs	r0, r6
 800e92c:	b003      	add	sp, #12
 800e92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e930:	20006ed8 	.word	0x20006ed8

0800e934 <writePxITMutex>:
{
 800e934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e936:	b083      	sub	sp, #12
 800e938:	0004      	movs	r4, r0
 800e93a:	9101      	str	r1, [sp, #4]
 800e93c:	0017      	movs	r7, r2
 800e93e:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e940:	f7ff ffae 	bl	800e8a0 <GetUart>
 800e944:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e946:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e948:	2800      	cmp	r0, #0
 800e94a:	d008      	beq.n	800e95e <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e94c:	00a4      	lsls	r4, r4, #2
 800e94e:	4b09      	ldr	r3, [pc, #36]	; (800e974 <writePxITMutex+0x40>)
 800e950:	58e0      	ldr	r0, [r4, r3]
 800e952:	0029      	movs	r1, r5
 800e954:	f000 f912 	bl	800eb7c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e958:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d002      	beq.n	800e964 <writePxITMutex+0x30>
}
 800e95e:	0018      	movs	r0, r3
 800e960:	b003      	add	sp, #12
 800e962:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e964:	003a      	movs	r2, r7
 800e966:	9901      	ldr	r1, [sp, #4]
 800e968:	0030      	movs	r0, r6
 800e96a:	f004 ffbf 	bl	80138ec <HAL_UART_Transmit_IT>
 800e96e:	0003      	movs	r3, r0
 800e970:	e7f5      	b.n	800e95e <writePxITMutex+0x2a>
 800e972:	46c0      	nop			; (mov r8, r8)
 800e974:	20006ed8 	.word	0x20006ed8

0800e978 <writePxDMAMutex>:
{
 800e978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e97a:	b083      	sub	sp, #12
 800e97c:	0004      	movs	r4, r0
 800e97e:	000f      	movs	r7, r1
 800e980:	9201      	str	r2, [sp, #4]
 800e982:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e984:	f7ff ff8c 	bl	800e8a0 <GetUart>
 800e988:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e98a:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d008      	beq.n	800e9a2 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e990:	00a4      	lsls	r4, r4, #2
 800e992:	4b0a      	ldr	r3, [pc, #40]	; (800e9bc <writePxDMAMutex+0x44>)
 800e994:	58e0      	ldr	r0, [r4, r3]
 800e996:	0031      	movs	r1, r6
 800e998:	f000 f8f0 	bl	800eb7c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e99c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d002      	beq.n	800e9a8 <writePxDMAMutex+0x30>
}
 800e9a2:	0018      	movs	r0, r3
 800e9a4:	b003      	add	sp, #12
 800e9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e9a8:	0028      	movs	r0, r5
 800e9aa:	f7ff f893 	bl	800dad4 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e9ae:	9a01      	ldr	r2, [sp, #4]
 800e9b0:	0039      	movs	r1, r7
 800e9b2:	0028      	movs	r0, r5
 800e9b4:	f005 f846 	bl	8013a44 <HAL_UART_Transmit_DMA>
 800e9b8:	0003      	movs	r3, r0
 800e9ba:	e7f2      	b.n	800e9a2 <writePxDMAMutex+0x2a>
 800e9bc:	20006ed8 	.word	0x20006ed8

0800e9c0 <UpdateBaudrate>:
{
 800e9c0:	b510      	push	{r4, lr}
 800e9c2:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e9c4:	f7ff ff6c 	bl	800e8a0 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e9c8:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e9ca:	f005 fbcb 	bl	8014164 <HAL_UART_Init>
}
 800e9ce:	2000      	movs	r0, #0
 800e9d0:	bd10      	pop	{r4, pc}
	...

0800e9d4 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e9d4:	b570      	push	{r4, r5, r6, lr}
 800e9d6:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e9d8:	d003      	beq.n	800e9e2 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e9da:	2901      	cmp	r1, #1
 800e9dc:	d002      	beq.n	800e9e4 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e9de:	2900      	cmp	r1, #0
 800e9e0:	d016      	beq.n	800ea10 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e9e2:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e9e4:	f7fe f81a 	bl	800ca1c <GetPort>
 800e9e8:	4b14      	ldr	r3, [pc, #80]	; (800ea3c <SwapUartPins+0x68>)
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	3b01      	subs	r3, #1
 800e9ee:	4d14      	ldr	r5, [pc, #80]	; (800ea40 <SwapUartPins+0x6c>)
 800e9f0:	005b      	lsls	r3, r3, #1
 800e9f2:	3801      	subs	r0, #1
 800e9f4:	2180      	movs	r1, #128	; 0x80
 800e9f6:	0209      	lsls	r1, r1, #8
 800e9f8:	000a      	movs	r2, r1
 800e9fa:	4102      	asrs	r2, r0
 800e9fc:	5b58      	ldrh	r0, [r3, r5]
 800e9fe:	4302      	orrs	r2, r0
 800ea00:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ea02:	2308      	movs	r3, #8
 800ea04:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800ea06:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800ea08:	0020      	movs	r0, r4
 800ea0a:	f005 fbab 	bl	8014164 <HAL_UART_Init>
 800ea0e:	e7e8      	b.n	800e9e2 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800ea10:	f7fe f804 	bl	800ca1c <GetPort>
 800ea14:	4b09      	ldr	r3, [pc, #36]	; (800ea3c <SwapUartPins+0x68>)
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	3b01      	subs	r3, #1
 800ea1a:	4d09      	ldr	r5, [pc, #36]	; (800ea40 <SwapUartPins+0x6c>)
 800ea1c:	005b      	lsls	r3, r3, #1
 800ea1e:	3801      	subs	r0, #1
 800ea20:	2180      	movs	r1, #128	; 0x80
 800ea22:	0209      	lsls	r1, r1, #8
 800ea24:	4101      	asrs	r1, r0
 800ea26:	5b5a      	ldrh	r2, [r3, r5]
 800ea28:	438a      	bics	r2, r1
 800ea2a:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800ea2c:	2308      	movs	r3, #8
 800ea2e:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800ea30:	2300      	movs	r3, #0
 800ea32:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800ea34:	0020      	movs	r0, r4
 800ea36:	f005 fb95 	bl	8014164 <HAL_UART_Init>
}
 800ea3a:	e7d2      	b.n	800e9e2 <SwapUartPins+0xe>
 800ea3c:	200010ea 	.word	0x200010ea
 800ea40:	2000735c 	.word	0x2000735c

0800ea44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 800ea44:	4816      	ldr	r0, [pc, #88]	; (800eaa0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800ea46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800ea48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800ea4a:	e003      	b.n	800ea54 <LoopCopyDataInit>

0800ea4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800ea4c:	4b15      	ldr	r3, [pc, #84]	; (800eaa4 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800ea4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800ea50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800ea52:	3104      	adds	r1, #4

0800ea54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800ea54:	4814      	ldr	r0, [pc, #80]	; (800eaa8 <LoopForever+0xc>)
  ldr r3, =_edata
 800ea56:	4b15      	ldr	r3, [pc, #84]	; (800eaac <LoopForever+0x10>)
  adds r2, r0, r1
 800ea58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800ea5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800ea5c:	d3f6      	bcc.n	800ea4c <CopyDataInit>
  ldr r2, =_sbss
 800ea5e:	4a14      	ldr	r2, [pc, #80]	; (800eab0 <LoopForever+0x14>)
  b LoopFillZerobss
 800ea60:	e002      	b.n	800ea68 <LoopFillZerobss>

0800ea62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800ea62:	2300      	movs	r3, #0
  str  r3, [r2]
 800ea64:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ea66:	3204      	adds	r2, #4

0800ea68 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800ea68:	4b12      	ldr	r3, [pc, #72]	; (800eab4 <LoopForever+0x18>)
  cmp r2, r3
 800ea6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800ea6c:	d3f9      	bcc.n	800ea62 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800ea6e:	4812      	ldr	r0, [pc, #72]	; (800eab8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800ea70:	4912      	ldr	r1, [pc, #72]	; (800eabc <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800ea72:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800ea74:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800ea76:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800ea78:	d005      	beq.n	800ea86 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800ea7a:	f000 f82b 	bl	800ead4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800ea7e:	f005 fcdd 	bl	801443c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ea82:	f005 fcc4 	bl	801440e <main>

0800ea86 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ea86:	480e      	ldr	r0, [pc, #56]	; (800eac0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ea88:	490e      	ldr	r1, [pc, #56]	; (800eac4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ea8a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ea8c:	480e      	ldr	r0, [pc, #56]	; (800eac8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800ea8e:	490d      	ldr	r1, [pc, #52]	; (800eac4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ea90:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ea92:	480e      	ldr	r0, [pc, #56]	; (800eacc <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800ea94:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800ea96:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800ea98:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800ea9a:	4700      	bx	r0

0800ea9c <LoopForever>:


LoopForever:
    b LoopForever
 800ea9c:	e7fe      	b.n	800ea9c <LoopForever>
 800ea9e:	0000      	.short	0x0000
	  ldr   r0, =_estack
 800eaa0:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800eaa4:	0801c5d4 	.word	0x0801c5d4
  ldr r0, =_sdata
 800eaa8:	20000020 	.word	0x20000020
  ldr r3, =_edata
 800eaac:	20000ac8 	.word	0x20000ac8
  ldr r2, =_sbss
 800eab0:	20000ac8 	.word	0x20000ac8
  ldr r3, = _ebss
 800eab4:	20007400 	.word	0x20007400
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800eab8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800eabc:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800eac0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800eac4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800eac8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800eacc:	1fffd800 	.word	0x1fffd800

0800ead0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ead0:	e7fe      	b.n	800ead0 <ADC1_COMP_IRQHandler>
	...

0800ead4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ead4:	4b11      	ldr	r3, [pc, #68]	; (800eb1c <SystemInit+0x48>)
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	2101      	movs	r1, #1
 800eada:	430a      	orrs	r2, r1
 800eadc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800eade:	685a      	ldr	r2, [r3, #4]
 800eae0:	480f      	ldr	r0, [pc, #60]	; (800eb20 <SystemInit+0x4c>)
 800eae2:	4002      	ands	r2, r0
 800eae4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	480e      	ldr	r0, [pc, #56]	; (800eb24 <SystemInit+0x50>)
 800eaea:	4002      	ands	r2, r0
 800eaec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	480d      	ldr	r0, [pc, #52]	; (800eb28 <SystemInit+0x54>)
 800eaf2:	4002      	ands	r2, r0
 800eaf4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	480c      	ldr	r0, [pc, #48]	; (800eb2c <SystemInit+0x58>)
 800eafa:	4002      	ands	r2, r0
 800eafc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800eafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb00:	200f      	movs	r0, #15
 800eb02:	4382      	bics	r2, r0
 800eb04:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800eb06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb08:	4809      	ldr	r0, [pc, #36]	; (800eb30 <SystemInit+0x5c>)
 800eb0a:	4002      	ands	r2, r0
 800eb0c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800eb0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb10:	438a      	bics	r2, r1
 800eb12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800eb14:	2200      	movs	r2, #0
 800eb16:	609a      	str	r2, [r3, #8]

}
 800eb18:	4770      	bx	lr
 800eb1a:	46c0      	nop			; (mov r8, r8)
 800eb1c:	40021000 	.word	0x40021000
 800eb20:	08ffb80c 	.word	0x08ffb80c
 800eb24:	fef6ffff 	.word	0xfef6ffff
 800eb28:	fffbffff 	.word	0xfffbffff
 800eb2c:	ffc0ffff 	.word	0xffc0ffff
 800eb30:	fff0feac 	.word	0xfff0feac

0800eb34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eb34:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800eb36:	f000 ff55 	bl	800f9e4 <vTaskStartScheduler>
  
  return osOK;
}
 800eb3a:	2000      	movs	r0, #0
 800eb3c:	bd10      	pop	{r4, pc}

0800eb3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eb3e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb40:	2800      	cmp	r0, #0
 800eb42:	d100      	bne.n	800eb46 <osDelay+0x8>
 800eb44:	3001      	adds	r0, #1
 800eb46:	f001 f889 	bl	800fc5c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	bd10      	pop	{r4, pc}

0800eb4e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800eb4e:	b510      	push	{r4, lr}
 800eb50:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800eb52:	2901      	cmp	r1, #1
 800eb54:	d005      	beq.n	800eb62 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800eb56:	2100      	movs	r1, #0
 800eb58:	f000 faf6 	bl	800f148 <xQueueCreateCountingSemaphore>
 800eb5c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800eb5e:	0020      	movs	r0, r4
 800eb60:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800eb62:	2203      	movs	r2, #3
 800eb64:	2100      	movs	r1, #0
 800eb66:	f000 fac8 	bl	800f0fa <xQueueGenericCreate>
 800eb6a:	1e04      	subs	r4, r0, #0
 800eb6c:	d0f7      	beq.n	800eb5e <osSemaphoreCreate+0x10>
 800eb6e:	2300      	movs	r3, #0
 800eb70:	2200      	movs	r2, #0
 800eb72:	2100      	movs	r1, #0
 800eb74:	f000 fafc 	bl	800f170 <xQueueGenericSend>
 800eb78:	e7f1      	b.n	800eb5e <osSemaphoreCreate+0x10>
	...

0800eb7c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800eb7c:	b500      	push	{lr}
 800eb7e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800eb80:	2300      	movs	r3, #0
 800eb82:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800eb84:	2800      	cmp	r0, #0
 800eb86:	d021      	beq.n	800ebcc <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb88:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d010      	beq.n	800ebb2 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eb90:	aa01      	add	r2, sp, #4
 800eb92:	2100      	movs	r1, #0
 800eb94:	f000 fcae 	bl	800f4f4 <xQueueReceiveFromISR>
 800eb98:	0003      	movs	r3, r0
      return osErrorOS;
 800eb9a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d113      	bne.n	800ebc8 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800eba0:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800eba2:	9b01      	ldr	r3, [sp, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00f      	beq.n	800ebc8 <osSemaphoreWait+0x4c>
 800eba8:	4b09      	ldr	r3, [pc, #36]	; (800ebd0 <osSemaphoreWait+0x54>)
 800ebaa:	2280      	movs	r2, #128	; 0x80
 800ebac:	0552      	lsls	r2, r2, #21
 800ebae:	601a      	str	r2, [r3, #0]
 800ebb0:	e00a      	b.n	800ebc8 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	000a      	movs	r2, r1
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	f000 fbf3 	bl	800f3a2 <xQueueGenericReceive>
  return osOK;
 800ebbc:	3801      	subs	r0, #1
 800ebbe:	1e43      	subs	r3, r0, #1
 800ebc0:	4198      	sbcs	r0, r3
 800ebc2:	4240      	negs	r0, r0
 800ebc4:	23ff      	movs	r3, #255	; 0xff
 800ebc6:	4018      	ands	r0, r3
}
 800ebc8:	b003      	add	sp, #12
 800ebca:	bd00      	pop	{pc}
    return osErrorParameter;
 800ebcc:	2080      	movs	r0, #128	; 0x80
 800ebce:	e7fb      	b.n	800ebc8 <osSemaphoreWait+0x4c>
 800ebd0:	e000ed04 	.word	0xe000ed04

0800ebd4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ebd4:	b500      	push	{lr}
 800ebd6:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	9301      	str	r3, [sp, #4]
 800ebdc:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00f      	beq.n	800ec04 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ebe4:	a901      	add	r1, sp, #4
 800ebe6:	f000 fba1 	bl	800f32c <xQueueGiveFromISR>
 800ebea:	0003      	movs	r3, r0
      return osErrorOS;
 800ebec:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d114      	bne.n	800ec1c <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800ebf2:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebf4:	9b01      	ldr	r3, [sp, #4]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d010      	beq.n	800ec1c <osSemaphoreRelease+0x48>
 800ebfa:	4b09      	ldr	r3, [pc, #36]	; (800ec20 <osSemaphoreRelease+0x4c>)
 800ebfc:	2280      	movs	r2, #128	; 0x80
 800ebfe:	0552      	lsls	r2, r2, #21
 800ec00:	601a      	str	r2, [r3, #0]
 800ec02:	e00b      	b.n	800ec1c <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ec04:	2300      	movs	r3, #0
 800ec06:	2200      	movs	r2, #0
 800ec08:	2100      	movs	r1, #0
 800ec0a:	f000 fab1 	bl	800f170 <xQueueGenericSend>
      result = osErrorOS;
 800ec0e:	3801      	subs	r0, #1
 800ec10:	4243      	negs	r3, r0
 800ec12:	4158      	adcs	r0, r3
 800ec14:	4240      	negs	r0, r0
 800ec16:	23fe      	movs	r3, #254	; 0xfe
 800ec18:	4398      	bics	r0, r3
 800ec1a:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800ec1c:	b003      	add	sp, #12
 800ec1e:	bd00      	pop	{pc}
 800ec20:	e000ed04 	.word	0xe000ed04

0800ec24 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800ec24:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ec26:	f001 fa0f 	bl	8010048 <xTaskGetSchedulerState>
 800ec2a:	2801      	cmp	r0, #1
 800ec2c:	d001      	beq.n	800ec32 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800ec2e:	f001 fe85 	bl	801093c <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800ec32:	bd10      	pop	{r4, pc}

0800ec34 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800ec34:	b570      	push	{r4, r5, r6, lr}
 800ec36:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800ec38:	d101      	bne.n	800ec3e <FreeRTOS_CLIRegisterCommand+0xa>
 800ec3a:	b672      	cpsid	i
 800ec3c:	e7fe      	b.n	800ec3c <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800ec3e:	2008      	movs	r0, #8
 800ec40:	f001 feb8 	bl	80109b4 <pvPortMalloc>
 800ec44:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800ec46:	d101      	bne.n	800ec4c <FreeRTOS_CLIRegisterCommand+0x18>
 800ec48:	b672      	cpsid	i
 800ec4a:	e7fe      	b.n	800ec4a <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800ec4c:	f001 fe30 	bl	80108b0 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800ec50:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800ec52:	2300      	movs	r3, #0
 800ec54:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800ec56:	4b04      	ldr	r3, [pc, #16]	; (800ec68 <FreeRTOS_CLIRegisterCommand+0x34>)
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800ec5c:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800ec5e:	f001 fe33 	bl	80108c8 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800ec62:	2001      	movs	r0, #1
 800ec64:	bd70      	pop	{r4, r5, r6, pc}
 800ec66:	46c0      	nop			; (mov r8, r8)
 800ec68:	20000104 	.word	0x20000104

0800ec6c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800ec6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec6e:	46d6      	mov	lr, sl
 800ec70:	b500      	push	{lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	9001      	str	r0, [sp, #4]
 800ec76:	9102      	str	r1, [sp, #8]
 800ec78:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800ec7a:	4b37      	ldr	r3, [pc, #220]	; (800ed58 <FreeRTOS_CLIProcessCommand+0xec>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00e      	beq.n	800eca0 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	689b      	ldr	r3, [r3, #8]
 800ec86:	9a01      	ldr	r2, [sp, #4]
 800ec88:	9903      	ldr	r1, [sp, #12]
 800ec8a:	9802      	ldr	r0, [sp, #8]
 800ec8c:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800ec8e:	2800      	cmp	r0, #0
 800ec90:	d102      	bne.n	800ec98 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800ec92:	4b31      	ldr	r3, [pc, #196]	; (800ed58 <FreeRTOS_CLIProcessCommand+0xec>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800ec98:	b004      	add	sp, #16
 800ec9a:	bc04      	pop	{r2}
 800ec9c:	4692      	mov	sl, r2
 800ec9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800eca0:	4d2e      	ldr	r5, [pc, #184]	; (800ed5c <FreeRTOS_CLIProcessCommand+0xf0>)
 800eca2:	4a2d      	ldr	r2, [pc, #180]	; (800ed58 <FreeRTOS_CLIProcessCommand+0xec>)
 800eca4:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800eca6:	3320      	adds	r3, #32
 800eca8:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ecaa:	0017      	movs	r7, r2
 800ecac:	e00a      	b.n	800ecc4 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ecae:	0002      	movs	r2, r0
 800ecb0:	0021      	movs	r1, r4
 800ecb2:	9801      	ldr	r0, [sp, #4]
 800ecb4:	f006 f8be 	bl	8014e34 <strncmp>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d00e      	beq.n	800ecda <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ecbc:	686d      	ldr	r5, [r5, #4]
 800ecbe:	603d      	str	r5, [r7, #0]
 800ecc0:	2d00      	cmp	r5, #0
 800ecc2:	d012      	beq.n	800ecea <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ecc4:	682e      	ldr	r6, [r5, #0]
 800ecc6:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ecc8:	0020      	movs	r0, r4
 800ecca:	f7f1 fa25 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ecce:	9b01      	ldr	r3, [sp, #4]
 800ecd0:	5c1b      	ldrb	r3, [r3, r0]
 800ecd2:	4652      	mov	r2, sl
 800ecd4:	4393      	bics	r3, r2
 800ecd6:	d1f1      	bne.n	800ecbc <FreeRTOS_CLIProcessCommand+0x50>
 800ecd8:	e7e9      	b.n	800ecae <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ecda:	200c      	movs	r0, #12
 800ecdc:	5630      	ldrsb	r0, [r6, r0]
 800ecde:	2800      	cmp	r0, #0
 800ece0:	da0a      	bge.n	800ecf8 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ece2:	4b1d      	ldr	r3, [pc, #116]	; (800ed58 <FreeRTOS_CLIProcessCommand+0xec>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d1cb      	bne.n	800ec82 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ecea:	9a03      	ldr	r2, [sp, #12]
 800ecec:	491c      	ldr	r1, [pc, #112]	; (800ed60 <FreeRTOS_CLIProcessCommand+0xf4>)
 800ecee:	9802      	ldr	r0, [sp, #8]
 800ecf0:	f006 f8b1 	bl	8014e56 <strncpy>
		xReturn = pdFALSE;
 800ecf4:	2000      	movs	r0, #0
	return xReturn;
 800ecf6:	e7cf      	b.n	800ec98 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ecf8:	9a01      	ldr	r2, [sp, #4]
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	56d3      	ldrsb	r3, [r2, r3]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d027      	beq.n	800ed52 <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800ed02:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ed04:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ed06:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800ed08:	2501      	movs	r5, #1
 800ed0a:	e009      	b.n	800ed20 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800ed0c:	2901      	cmp	r1, #1
 800ed0e:	d002      	beq.n	800ed16 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800ed10:	3401      	adds	r4, #1
 800ed12:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800ed14:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800ed16:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800ed18:	2300      	movs	r3, #0
 800ed1a:	56d3      	ldrsb	r3, [r2, r3]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d003      	beq.n	800ed28 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800ed20:	2b20      	cmp	r3, #32
 800ed22:	d0f3      	beq.n	800ed0c <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800ed24:	0031      	movs	r1, r6
 800ed26:	e7f6      	b.n	800ed16 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ed28:	2901      	cmp	r1, #1
 800ed2a:	d00f      	beq.n	800ed4c <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ed2c:	4b0a      	ldr	r3, [pc, #40]	; (800ed58 <FreeRTOS_CLIProcessCommand+0xec>)
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d0da      	beq.n	800ecea <FreeRTOS_CLIProcessCommand+0x7e>
 800ed34:	42a0      	cmp	r0, r4
 800ed36:	d0a4      	beq.n	800ec82 <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ed38:	9a03      	ldr	r2, [sp, #12]
 800ed3a:	490a      	ldr	r1, [pc, #40]	; (800ed64 <FreeRTOS_CLIProcessCommand+0xf8>)
 800ed3c:	9802      	ldr	r0, [sp, #8]
 800ed3e:	f006 f88a 	bl	8014e56 <strncpy>
		pxCommand = NULL;
 800ed42:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <FreeRTOS_CLIProcessCommand+0xec>)
 800ed44:	2200      	movs	r2, #0
 800ed46:	601a      	str	r2, [r3, #0]
 800ed48:	2000      	movs	r0, #0
 800ed4a:	e7a5      	b.n	800ec98 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800ed4c:	3c01      	subs	r4, #1
 800ed4e:	b264      	sxtb	r4, r4
 800ed50:	e7ec      	b.n	800ed2c <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800ed52:	2400      	movs	r4, #0
 800ed54:	e7ea      	b.n	800ed2c <FreeRTOS_CLIProcessCommand+0xc0>
 800ed56:	46c0      	nop			; (mov r8, r8)
 800ed58:	200021d8 	.word	0x200021d8
 800ed5c:	20000108 	.word	0x20000108
 800ed60:	0801c170 	.word	0x0801c170
 800ed64:	0801c118 	.word	0x0801c118

0800ed68 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ed68:	4800      	ldr	r0, [pc, #0]	; (800ed6c <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ed6a:	4770      	bx	lr
 800ed6c:	20001f70 	.word	0x20001f70

0800ed70 <FreeRTOS_CLIGetParameter>:
{
 800ed70:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800ed72:	2300      	movs	r3, #0
 800ed74:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ed76:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ed78:	2900      	cmp	r1, #0
 800ed7a:	d10b      	bne.n	800ed94 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	e02a      	b.n	800edd6 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800ed80:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ed82:	2300      	movs	r3, #0
 800ed84:	56c3      	ldrsb	r3, [r0, r3]
 800ed86:	2b20      	cmp	r3, #32
 800ed88:	d0fa      	beq.n	800ed80 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d022      	beq.n	800edd4 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800ed8e:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800ed90:	42a1      	cmp	r1, r4
 800ed92:	d00d      	beq.n	800edb0 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed94:	2300      	movs	r3, #0
 800ed96:	56c3      	ldrsb	r3, [r0, r3]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d01f      	beq.n	800eddc <FreeRTOS_CLIGetParameter+0x6c>
 800ed9c:	2b20      	cmp	r3, #32
 800ed9e:	d0ef      	beq.n	800ed80 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800eda0:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eda2:	2300      	movs	r3, #0
 800eda4:	56c3      	ldrsb	r3, [r0, r3]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d018      	beq.n	800eddc <FreeRTOS_CLIGetParameter+0x6c>
 800edaa:	2b20      	cmp	r3, #32
 800edac:	d1f8      	bne.n	800eda0 <FreeRTOS_CLIGetParameter+0x30>
 800edae:	e7e7      	b.n	800ed80 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800edb0:	7803      	ldrb	r3, [r0, #0]
 800edb2:	2120      	movs	r1, #32
 800edb4:	438b      	bics	r3, r1
 800edb6:	d00f      	beq.n	800edd8 <FreeRTOS_CLIGetParameter+0x68>
 800edb8:	0004      	movs	r4, r0
 800edba:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800edbc:	6813      	ldr	r3, [r2, #0]
 800edbe:	3301      	adds	r3, #1
 800edc0:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800edc2:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800edc4:	7821      	ldrb	r1, [r4, #0]
 800edc6:	43a9      	bics	r1, r5
 800edc8:	d1f8      	bne.n	800edbc <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800edca:	1e5a      	subs	r2, r3, #1
 800edcc:	4193      	sbcs	r3, r2
 800edce:	425b      	negs	r3, r3
 800edd0:	4018      	ands	r0, r3
 800edd2:	e000      	b.n	800edd6 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800edd4:	2000      	movs	r0, #0
}
 800edd6:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800edd8:	2000      	movs	r0, #0
 800edda:	e7fc      	b.n	800edd6 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800eddc:	2300      	movs	r3, #0
 800edde:	56c3      	ldrsb	r3, [r0, r3]
 800ede0:	e7d3      	b.n	800ed8a <FreeRTOS_CLIGetParameter+0x1a>
	...

0800ede4 <prvHelpCommand>:
{
 800ede4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ede6:	b083      	sub	sp, #12
 800ede8:	0004      	movs	r4, r0
 800edea:	000d      	movs	r5, r1
 800edec:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800edee:	2300      	movs	r3, #0
 800edf0:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800edf2:	aa01      	add	r2, sp, #4
 800edf4:	2101      	movs	r1, #1
 800edf6:	f7ff ffbb 	bl	800ed70 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800edfa:	2800      	cmp	r0, #0
 800edfc:	d027      	beq.n	800ee4e <prvHelpCommand+0x6a>
 800edfe:	2206      	movs	r2, #6
 800ee00:	4930      	ldr	r1, [pc, #192]	; (800eec4 <prvHelpCommand+0xe0>)
 800ee02:	f006 f817 	bl	8014e34 <strncmp>
 800ee06:	2800      	cmp	r0, #0
 800ee08:	d149      	bne.n	800ee9e <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800ee0a:	4b2f      	ldr	r3, [pc, #188]	; (800eec8 <prvHelpCommand+0xe4>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	2b07      	cmp	r3, #7
 800ee10:	d012      	beq.n	800ee38 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ee12:	1c5f      	adds	r7, r3, #1
 800ee14:	b2ff      	uxtb	r7, r7
 800ee16:	4a2c      	ldr	r2, [pc, #176]	; (800eec8 <prvHelpCommand+0xe4>)
 800ee18:	7017      	strb	r7, [r2, #0]
 800ee1a:	009b      	lsls	r3, r3, #2
 800ee1c:	4a2b      	ldr	r2, [pc, #172]	; (800eecc <prvHelpCommand+0xe8>)
 800ee1e:	5899      	ldr	r1, [r3, r2]
 800ee20:	002a      	movs	r2, r5
 800ee22:	0020      	movs	r0, r4
 800ee24:	f006 f817 	bl	8014e56 <strncpy>
			xReturn = pdTRUE;
 800ee28:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800ee2a:	2f07      	cmp	r7, #7
 800ee2c:	d137      	bne.n	800ee9e <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800ee2e:	4b26      	ldr	r3, [pc, #152]	; (800eec8 <prvHelpCommand+0xe4>)
 800ee30:	2200      	movs	r2, #0
 800ee32:	701a      	strb	r2, [r3, #0]
 800ee34:	2600      	movs	r6, #0
 800ee36:	e032      	b.n	800ee9e <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ee38:	4b23      	ldr	r3, [pc, #140]	; (800eec8 <prvHelpCommand+0xe4>)
 800ee3a:	2201      	movs	r2, #1
 800ee3c:	701a      	strb	r2, [r3, #0]
 800ee3e:	4b23      	ldr	r3, [pc, #140]	; (800eecc <prvHelpCommand+0xe8>)
 800ee40:	6819      	ldr	r1, [r3, #0]
 800ee42:	002a      	movs	r2, r5
 800ee44:	0020      	movs	r0, r4
 800ee46:	f006 f806 	bl	8014e56 <strncpy>
			xReturn = pdTRUE;
 800ee4a:	2601      	movs	r6, #1
 800ee4c:	e027      	b.n	800ee9e <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800ee4e:	4b20      	ldr	r3, [pc, #128]	; (800eed0 <prvHelpCommand+0xec>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d026      	beq.n	800eea4 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800ee56:	4b1f      	ldr	r3, [pc, #124]	; (800eed4 <prvHelpCommand+0xf0>)
 800ee58:	781a      	ldrb	r2, [r3, #0]
 800ee5a:	4b1f      	ldr	r3, [pc, #124]	; (800eed8 <prvHelpCommand+0xf4>)
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	429a      	cmp	r2, r3
 800ee60:	d927      	bls.n	800eeb2 <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ee62:	002a      	movs	r2, r5
 800ee64:	3a08      	subs	r2, #8
 800ee66:	4b1a      	ldr	r3, [pc, #104]	; (800eed0 <prvHelpCommand+0xec>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	6859      	ldr	r1, [r3, #4]
 800ee6e:	0020      	movs	r0, r4
 800ee70:	3008      	adds	r0, #8
 800ee72:	f005 fff0 	bl	8014e56 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ee76:	1c60      	adds	r0, r4, #1
 800ee78:	4918      	ldr	r1, [pc, #96]	; (800eedc <prvHelpCommand+0xf8>)
 800ee7a:	f005 ffd3 	bl	8014e24 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ee7e:	2328      	movs	r3, #40	; 0x28
 800ee80:	7023      	strb	r3, [r4, #0]
 800ee82:	3301      	adds	r3, #1
 800ee84:	71a3      	strb	r3, [r4, #6]
 800ee86:	3b09      	subs	r3, #9
 800ee88:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800ee8a:	4b11      	ldr	r3, [pc, #68]	; (800eed0 <prvHelpCommand+0xec>)
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	6856      	ldr	r6, [r2, #4]
 800ee90:	601e      	str	r6, [r3, #0]
		counter++;
 800ee92:	4a10      	ldr	r2, [pc, #64]	; (800eed4 <prvHelpCommand+0xf0>)
 800ee94:	7813      	ldrb	r3, [r2, #0]
 800ee96:	3301      	adds	r3, #1
 800ee98:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800ee9a:	1e73      	subs	r3, r6, #1
 800ee9c:	419e      	sbcs	r6, r3
}
 800ee9e:	0030      	movs	r0, r6
 800eea0:	b003      	add	sp, #12
 800eea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800eea4:	4b0a      	ldr	r3, [pc, #40]	; (800eed0 <prvHelpCommand+0xec>)
 800eea6:	4a0e      	ldr	r2, [pc, #56]	; (800eee0 <prvHelpCommand+0xfc>)
 800eea8:	601a      	str	r2, [r3, #0]
			counter = 1;
 800eeaa:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <prvHelpCommand+0xf0>)
 800eeac:	2201      	movs	r2, #1
 800eeae:	701a      	strb	r2, [r3, #0]
 800eeb0:	e7d1      	b.n	800ee56 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800eeb2:	4b07      	ldr	r3, [pc, #28]	; (800eed0 <prvHelpCommand+0xec>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	6859      	ldr	r1, [r3, #4]
 800eeba:	002a      	movs	r2, r5
 800eebc:	0020      	movs	r0, r4
 800eebe:	f005 ffca 	bl	8014e56 <strncpy>
 800eec2:	e7e2      	b.n	800ee8a <prvHelpCommand+0xa6>
 800eec4:	08019fc8 	.word	0x08019fc8
 800eec8:	200021e0 	.word	0x200021e0
 800eecc:	2000007c 	.word	0x2000007c
 800eed0:	200021dc 	.word	0x200021dc
 800eed4:	200021d4 	.word	0x200021d4
 800eed8:	20006dd0 	.word	0x20006dd0
 800eedc:	080195a0 	.word	0x080195a0
 800eee0:	20000108 	.word	0x20000108

0800eee4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eee4:	0003      	movs	r3, r0
 800eee6:	3308      	adds	r3, #8
 800eee8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eeea:	2201      	movs	r2, #1
 800eeec:	4252      	negs	r2, r2
 800eeee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eef0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eef2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eef4:	2300      	movs	r3, #0
 800eef6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eef8:	4770      	bx	lr

0800eefa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800eefa:	2300      	movs	r3, #0
 800eefc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eefe:	4770      	bx	lr

0800ef00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ef00:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ef02:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ef04:	689a      	ldr	r2, [r3, #8]
 800ef06:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef08:	689a      	ldr	r2, [r3, #8]
 800ef0a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef0c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ef0e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ef10:	6803      	ldr	r3, [r0, #0]
 800ef12:	3301      	adds	r3, #1
 800ef14:	6003      	str	r3, [r0, #0]
}
 800ef16:	4770      	bx	lr

0800ef18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef18:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef1a:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef1c:	0002      	movs	r2, r0
 800ef1e:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800ef20:	1c63      	adds	r3, r4, #1
 800ef22:	d102      	bne.n	800ef2a <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef24:	6902      	ldr	r2, [r0, #16]
 800ef26:	e004      	b.n	800ef32 <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef28:	001a      	movs	r2, r3
 800ef2a:	6853      	ldr	r3, [r2, #4]
 800ef2c:	681d      	ldr	r5, [r3, #0]
 800ef2e:	42a5      	cmp	r5, r4
 800ef30:	d9fa      	bls.n	800ef28 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef32:	6853      	ldr	r3, [r2, #4]
 800ef34:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef36:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef38:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef3a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ef3c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ef3e:	6803      	ldr	r3, [r0, #0]
 800ef40:	3301      	adds	r3, #1
 800ef42:	6003      	str	r3, [r0, #0]
}
 800ef44:	bd30      	pop	{r4, r5, pc}

0800ef46 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ef46:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef48:	6842      	ldr	r2, [r0, #4]
 800ef4a:	6881      	ldr	r1, [r0, #8]
 800ef4c:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef4e:	6882      	ldr	r2, [r0, #8]
 800ef50:	6841      	ldr	r1, [r0, #4]
 800ef52:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef54:	685a      	ldr	r2, [r3, #4]
 800ef56:	4282      	cmp	r2, r0
 800ef58:	d005      	beq.n	800ef66 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ef5a:	2200      	movs	r2, #0
 800ef5c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	1e50      	subs	r0, r2, #1
 800ef62:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ef64:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef66:	6882      	ldr	r2, [r0, #8]
 800ef68:	605a      	str	r2, [r3, #4]
 800ef6a:	e7f6      	b.n	800ef5a <uxListRemove+0x14>

0800ef6c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef6c:	b570      	push	{r4, r5, r6, lr}
 800ef6e:	0004      	movs	r4, r0
 800ef70:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef72:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ef74:	2a00      	cmp	r2, #0
 800ef76:	d10d      	bne.n	800ef94 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ef78:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ef80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef82:	3301      	adds	r3, #1
 800ef84:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ef86:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ef88:	6860      	ldr	r0, [r4, #4]
 800ef8a:	f001 f8ab 	bl	80100e4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	6063      	str	r3, [r4, #4]
 800ef92:	e7f5      	b.n	800ef80 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ef94:	2d00      	cmp	r5, #0
 800ef96:	d10e      	bne.n	800efb6 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ef98:	6880      	ldr	r0, [r0, #8]
 800ef9a:	f005 fcd2 	bl	8014942 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ef9e:	68a3      	ldr	r3, [r4, #8]
 800efa0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800efa2:	4694      	mov	ip, r2
 800efa4:	4463      	add	r3, ip
 800efa6:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800efa8:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efaa:	6862      	ldr	r2, [r4, #4]
 800efac:	4293      	cmp	r3, r2
 800efae:	d3e7      	bcc.n	800ef80 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800efb0:	6823      	ldr	r3, [r4, #0]
 800efb2:	60a3      	str	r3, [r4, #8]
 800efb4:	e7e4      	b.n	800ef80 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb6:	68c0      	ldr	r0, [r0, #12]
 800efb8:	f005 fcc3 	bl	8014942 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800efbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efbe:	425a      	negs	r2, r3
 800efc0:	68e3      	ldr	r3, [r4, #12]
 800efc2:	189b      	adds	r3, r3, r2
 800efc4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efc6:	6821      	ldr	r1, [r4, #0]
 800efc8:	428b      	cmp	r3, r1
 800efca:	d203      	bcs.n	800efd4 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800efcc:	6863      	ldr	r3, [r4, #4]
 800efce:	469c      	mov	ip, r3
 800efd0:	4462      	add	r2, ip
 800efd2:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800efd4:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800efd6:	2d02      	cmp	r5, #2
 800efd8:	d1d2      	bne.n	800ef80 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d0cf      	beq.n	800ef80 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800efe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efe2:	3b01      	subs	r3, #1
 800efe4:	63a3      	str	r3, [r4, #56]	; 0x38
 800efe6:	e7cb      	b.n	800ef80 <prvCopyDataToQueue+0x14>

0800efe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800efe8:	b510      	push	{r4, lr}
 800efea:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800efec:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800efee:	2a00      	cmp	r2, #0
 800eff0:	d00b      	beq.n	800f00a <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800eff2:	68c3      	ldr	r3, [r0, #12]
 800eff4:	189b      	adds	r3, r3, r2
 800eff6:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eff8:	6841      	ldr	r1, [r0, #4]
 800effa:	428b      	cmp	r3, r1
 800effc:	d301      	bcc.n	800f002 <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800effe:	6803      	ldr	r3, [r0, #0]
 800f000:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800f002:	68c1      	ldr	r1, [r0, #12]
 800f004:	0020      	movs	r0, r4
 800f006:	f005 fc9c 	bl	8014942 <memcpy>
	}
}
 800f00a:	bd10      	pop	{r4, pc}

0800f00c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f00c:	b570      	push	{r4, r5, r6, lr}
 800f00e:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f010:	f001 fc4e 	bl	80108b0 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f014:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f016:	2b00      	cmp	r3, #0
 800f018:	dd04      	ble.n	800f024 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f01a:	0025      	movs	r5, r4
 800f01c:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f020:	2b00      	cmp	r3, #0
 800f022:	d11f      	bne.n	800f064 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800f024:	2301      	movs	r3, #1
 800f026:	425b      	negs	r3, r3
 800f028:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800f02a:	f001 fc4d 	bl	80108c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f02e:	f001 fc3f 	bl	80108b0 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f032:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f034:	2b00      	cmp	r3, #0
 800f036:	dd04      	ble.n	800f042 <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f038:	0025      	movs	r5, r4
 800f03a:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f03c:	6923      	ldr	r3, [r4, #16]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d121      	bne.n	800f086 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800f042:	2301      	movs	r3, #1
 800f044:	425b      	negs	r3, r3
 800f046:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f048:	f001 fc3e 	bl	80108c8 <vPortExitCritical>
}
 800f04c:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800f04e:	f000 fff5 	bl	801003c <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800f052:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f054:	3b01      	subs	r3, #1
 800f056:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f058:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	dde2      	ble.n	800f024 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f060:	2b00      	cmp	r3, #0
 800f062:	d0df      	beq.n	800f024 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f064:	0028      	movs	r0, r5
 800f066:	f000 ff67 	bl	800ff38 <xTaskRemoveFromEventList>
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d0f1      	beq.n	800f052 <prvUnlockQueue+0x46>
 800f06e:	e7ee      	b.n	800f04e <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800f070:	f000 ffe4 	bl	801003c <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800f074:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f076:	3b01      	subs	r3, #1
 800f078:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f07a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	dde0      	ble.n	800f042 <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f080:	6923      	ldr	r3, [r4, #16]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d0dd      	beq.n	800f042 <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f086:	0028      	movs	r0, r5
 800f088:	f000 ff56 	bl	800ff38 <xTaskRemoveFromEventList>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	d0f1      	beq.n	800f074 <prvUnlockQueue+0x68>
 800f090:	e7ee      	b.n	800f070 <prvUnlockQueue+0x64>

0800f092 <xQueueGenericReset>:
{
 800f092:	b570      	push	{r4, r5, r6, lr}
 800f094:	0004      	movs	r4, r0
 800f096:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800f098:	2800      	cmp	r0, #0
 800f09a:	d101      	bne.n	800f0a0 <xQueueGenericReset+0xe>
 800f09c:	b672      	cpsid	i
 800f09e:	e7fe      	b.n	800f09e <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800f0a0:	f001 fc06 	bl	80108b0 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f0a4:	6822      	ldr	r2, [r4, #0]
 800f0a6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f0a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f0aa:	434b      	muls	r3, r1
 800f0ac:	18d0      	adds	r0, r2, r3
 800f0ae:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f0b0:	2000      	movs	r0, #0
 800f0b2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f0b4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f0b6:	1a5b      	subs	r3, r3, r1
 800f0b8:	18d3      	adds	r3, r2, r3
 800f0ba:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	425b      	negs	r3, r3
 800f0c0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800f0c2:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800f0c4:	2d00      	cmp	r5, #0
 800f0c6:	d10f      	bne.n	800f0e8 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0c8:	6923      	ldr	r3, [r4, #16]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d103      	bne.n	800f0d6 <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800f0ce:	f001 fbfb 	bl	80108c8 <vPortExitCritical>
}
 800f0d2:	2001      	movs	r0, #1
 800f0d4:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f0d6:	0020      	movs	r0, r4
 800f0d8:	3010      	adds	r0, #16
 800f0da:	f000 ff2d 	bl	800ff38 <xTaskRemoveFromEventList>
 800f0de:	2801      	cmp	r0, #1
 800f0e0:	d1f5      	bne.n	800f0ce <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800f0e2:	f001 fbd9 	bl	8010898 <vPortYield>
 800f0e6:	e7f2      	b.n	800f0ce <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0e8:	0020      	movs	r0, r4
 800f0ea:	3010      	adds	r0, #16
 800f0ec:	f7ff fefa 	bl	800eee4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0f0:	0020      	movs	r0, r4
 800f0f2:	3024      	adds	r0, #36	; 0x24
 800f0f4:	f7ff fef6 	bl	800eee4 <vListInitialise>
 800f0f8:	e7e9      	b.n	800f0ce <xQueueGenericReset+0x3c>

0800f0fa <xQueueGenericCreate>:
{
 800f0fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fc:	0005      	movs	r5, r0
 800f0fe:	000e      	movs	r6, r1
 800f100:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f102:	2800      	cmp	r0, #0
 800f104:	d101      	bne.n	800f10a <xQueueGenericCreate+0x10>
 800f106:	b672      	cpsid	i
 800f108:	e7fe      	b.n	800f108 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f10a:	2900      	cmp	r1, #0
 800f10c:	d00c      	beq.n	800f128 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f10e:	0008      	movs	r0, r1
 800f110:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f112:	3055      	adds	r0, #85	; 0x55
 800f114:	f001 fc4e 	bl	80109b4 <pvPortMalloc>
 800f118:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f11a:	d101      	bne.n	800f120 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800f11c:	b672      	cpsid	i
 800f11e:	e7fe      	b.n	800f11e <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800f120:	0003      	movs	r3, r0
 800f122:	3354      	adds	r3, #84	; 0x54
 800f124:	6003      	str	r3, [r0, #0]
 800f126:	e005      	b.n	800f134 <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f128:	2054      	movs	r0, #84	; 0x54
 800f12a:	f001 fc43 	bl	80109b4 <pvPortMalloc>
 800f12e:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f130:	d0f4      	beq.n	800f11c <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f132:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800f134:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800f136:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f138:	2101      	movs	r1, #1
 800f13a:	0020      	movs	r0, r4
 800f13c:	f7ff ffa9 	bl	800f092 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800f140:	2350      	movs	r3, #80	; 0x50
 800f142:	54e7      	strb	r7, [r4, r3]
}
 800f144:	0020      	movs	r0, r4
 800f146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f148 <xQueueCreateCountingSemaphore>:
	{
 800f148:	b510      	push	{r4, lr}
 800f14a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d101      	bne.n	800f154 <xQueueCreateCountingSemaphore+0xc>
 800f150:	b672      	cpsid	i
 800f152:	e7fe      	b.n	800f152 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f154:	4288      	cmp	r0, r1
 800f156:	d201      	bcs.n	800f15c <xQueueCreateCountingSemaphore+0x14>
 800f158:	b672      	cpsid	i
 800f15a:	e7fe      	b.n	800f15a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f15c:	2202      	movs	r2, #2
 800f15e:	2100      	movs	r1, #0
 800f160:	f7ff ffcb 	bl	800f0fa <xQueueGenericCreate>
		if( xHandle != NULL )
 800f164:	2800      	cmp	r0, #0
 800f166:	d001      	beq.n	800f16c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f168:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f16a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800f16c:	b672      	cpsid	i
 800f16e:	e7fe      	b.n	800f16e <xQueueCreateCountingSemaphore+0x26>

0800f170 <xQueueGenericSend>:
{
 800f170:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f172:	46ce      	mov	lr, r9
 800f174:	b500      	push	{lr}
 800f176:	b084      	sub	sp, #16
 800f178:	0004      	movs	r4, r0
 800f17a:	9100      	str	r1, [sp, #0]
 800f17c:	9201      	str	r2, [sp, #4]
 800f17e:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800f180:	2800      	cmp	r0, #0
 800f182:	d007      	beq.n	800f194 <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f184:	9b00      	ldr	r3, [sp, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d106      	bne.n	800f198 <xQueueGenericSend+0x28>
 800f18a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d003      	beq.n	800f198 <xQueueGenericSend+0x28>
 800f190:	b672      	cpsid	i
 800f192:	e7fe      	b.n	800f192 <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800f194:	b672      	cpsid	i
 800f196:	e7fe      	b.n	800f196 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f198:	2d02      	cmp	r5, #2
 800f19a:	d104      	bne.n	800f1a6 <xQueueGenericSend+0x36>
 800f19c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d001      	beq.n	800f1a6 <xQueueGenericSend+0x36>
 800f1a2:	b672      	cpsid	i
 800f1a4:	e7fe      	b.n	800f1a4 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1a6:	f000 ff4f 	bl	8010048 <xTaskGetSchedulerState>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d104      	bne.n	800f1b8 <xQueueGenericSend+0x48>
 800f1ae:	9b01      	ldr	r3, [sp, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d004      	beq.n	800f1be <xQueueGenericSend+0x4e>
 800f1b4:	b672      	cpsid	i
 800f1b6:	e7fe      	b.n	800f1b6 <xQueueGenericSend+0x46>
 800f1b8:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800f1ba:	2700      	movs	r7, #0
 800f1bc:	e02f      	b.n	800f21e <xQueueGenericSend+0xae>
 800f1be:	2600      	movs	r6, #0
 800f1c0:	e7fb      	b.n	800f1ba <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1c2:	002a      	movs	r2, r5
 800f1c4:	9900      	ldr	r1, [sp, #0]
 800f1c6:	0020      	movs	r0, r4
 800f1c8:	f7ff fed0 	bl	800ef6c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d104      	bne.n	800f1dc <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800f1d2:	2800      	cmp	r0, #0
 800f1d4:	d00a      	beq.n	800f1ec <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800f1d6:	f001 fb5f 	bl	8010898 <vPortYield>
 800f1da:	e007      	b.n	800f1ec <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f1dc:	0020      	movs	r0, r4
 800f1de:	3024      	adds	r0, #36	; 0x24
 800f1e0:	f000 feaa 	bl	800ff38 <xTaskRemoveFromEventList>
 800f1e4:	2801      	cmp	r0, #1
 800f1e6:	d101      	bne.n	800f1ec <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800f1e8:	f001 fb56 	bl	8010898 <vPortYield>
				taskEXIT_CRITICAL();
 800f1ec:	f001 fb6c 	bl	80108c8 <vPortExitCritical>
				return pdPASS;
 800f1f0:	2001      	movs	r0, #1
}
 800f1f2:	b004      	add	sp, #16
 800f1f4:	bc04      	pop	{r2}
 800f1f6:	4691      	mov	r9, r2
 800f1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800f1fa:	f001 fb65 	bl	80108c8 <vPortExitCritical>
					return errQUEUE_FULL;
 800f1fe:	2000      	movs	r0, #0
 800f200:	e7f7      	b.n	800f1f2 <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800f202:	a802      	add	r0, sp, #8
 800f204:	f000 fed8 	bl	800ffb8 <vTaskSetTimeOutState>
 800f208:	e016      	b.n	800f238 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800f20a:	6467      	str	r7, [r4, #68]	; 0x44
 800f20c:	e01d      	b.n	800f24a <xQueueGenericSend+0xda>
 800f20e:	64a7      	str	r7, [r4, #72]	; 0x48
 800f210:	e01e      	b.n	800f250 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800f212:	0020      	movs	r0, r4
 800f214:	f7ff fefa 	bl	800f00c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f218:	f000 fcb0 	bl	800fb7c <xTaskResumeAll>
 800f21c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800f21e:	f001 fb47 	bl	80108b0 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f222:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f224:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f226:	4293      	cmp	r3, r2
 800f228:	d3cb      	bcc.n	800f1c2 <xQueueGenericSend+0x52>
 800f22a:	2d02      	cmp	r5, #2
 800f22c:	d0c9      	beq.n	800f1c2 <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f22e:	9b01      	ldr	r3, [sp, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d0e2      	beq.n	800f1fa <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800f234:	2e00      	cmp	r6, #0
 800f236:	d0e4      	beq.n	800f202 <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800f238:	f001 fb46 	bl	80108c8 <vPortExitCritical>
		vTaskSuspendAll();
 800f23c:	f000 fbfe 	bl	800fa3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f240:	f001 fb36 	bl	80108b0 <vPortEnterCritical>
 800f244:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f246:	3301      	adds	r3, #1
 800f248:	d0df      	beq.n	800f20a <xQueueGenericSend+0x9a>
 800f24a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f24c:	3301      	adds	r3, #1
 800f24e:	d0de      	beq.n	800f20e <xQueueGenericSend+0x9e>
 800f250:	f001 fb3a 	bl	80108c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f254:	a901      	add	r1, sp, #4
 800f256:	a802      	add	r0, sp, #8
 800f258:	f000 febe 	bl	800ffd8 <xTaskCheckForTimeOut>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d117      	bne.n	800f290 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f260:	f001 fb26 	bl	80108b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f264:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f266:	4699      	mov	r9, r3
 800f268:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f26a:	f001 fb2d 	bl	80108c8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f26e:	45b1      	cmp	r9, r6
 800f270:	d1cf      	bne.n	800f212 <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f272:	0020      	movs	r0, r4
 800f274:	3010      	adds	r0, #16
 800f276:	9901      	ldr	r1, [sp, #4]
 800f278:	f000 fe20 	bl	800febc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f27c:	0020      	movs	r0, r4
 800f27e:	f7ff fec5 	bl	800f00c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f282:	f000 fc7b 	bl	800fb7c <xTaskResumeAll>
 800f286:	2800      	cmp	r0, #0
 800f288:	d1c8      	bne.n	800f21c <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800f28a:	f001 fb05 	bl	8010898 <vPortYield>
 800f28e:	e7c5      	b.n	800f21c <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800f290:	0020      	movs	r0, r4
 800f292:	f7ff febb 	bl	800f00c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f296:	f000 fc71 	bl	800fb7c <xTaskResumeAll>
			return errQUEUE_FULL;
 800f29a:	2000      	movs	r0, #0
 800f29c:	e7a9      	b.n	800f1f2 <xQueueGenericSend+0x82>

0800f29e <xQueueGenericSendFromISR>:
{
 800f29e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2a0:	b083      	sub	sp, #12
 800f2a2:	0004      	movs	r4, r0
 800f2a4:	000d      	movs	r5, r1
 800f2a6:	0016      	movs	r6, r2
 800f2a8:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800f2aa:	2800      	cmp	r0, #0
 800f2ac:	d006      	beq.n	800f2bc <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2ae:	2900      	cmp	r1, #0
 800f2b0:	d106      	bne.n	800f2c0 <xQueueGenericSendFromISR+0x22>
 800f2b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d003      	beq.n	800f2c0 <xQueueGenericSendFromISR+0x22>
 800f2b8:	b672      	cpsid	i
 800f2ba:	e7fe      	b.n	800f2ba <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800f2bc:	b672      	cpsid	i
 800f2be:	e7fe      	b.n	800f2be <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f2c0:	2f02      	cmp	r7, #2
 800f2c2:	d12a      	bne.n	800f31a <xQueueGenericSendFromISR+0x7c>
 800f2c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d011      	beq.n	800f2ee <xQueueGenericSendFromISR+0x50>
 800f2ca:	b672      	cpsid	i
 800f2cc:	e7fe      	b.n	800f2cc <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800f2ce:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d01b      	beq.n	800f30e <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2d6:	0020      	movs	r0, r4
 800f2d8:	3024      	adds	r0, #36	; 0x24
 800f2da:	f000 fe2d 	bl	800ff38 <xTaskRemoveFromEventList>
 800f2de:	2800      	cmp	r0, #0
 800f2e0:	d015      	beq.n	800f30e <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800f2e2:	2e00      	cmp	r6, #0
 800f2e4:	d001      	beq.n	800f2ea <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f2e6:	6035      	str	r5, [r6, #0]
 800f2e8:	e011      	b.n	800f30e <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800f2ea:	2501      	movs	r5, #1
 800f2ec:	e00f      	b.n	800f30e <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2ee:	f001 fafb 	bl	80108e8 <ulSetInterruptMaskFromISR>
 800f2f2:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2f6:	003a      	movs	r2, r7
 800f2f8:	0029      	movs	r1, r5
 800f2fa:	0020      	movs	r0, r4
 800f2fc:	f7ff fe36 	bl	800ef6c <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f300:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f302:	3301      	adds	r3, #1
 800f304:	d0e3      	beq.n	800f2ce <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800f306:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f308:	3301      	adds	r3, #1
 800f30a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f30c:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f30e:	9801      	ldr	r0, [sp, #4]
 800f310:	f001 faef 	bl	80108f2 <vClearInterruptMaskFromISR>
}
 800f314:	0028      	movs	r0, r5
 800f316:	b003      	add	sp, #12
 800f318:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f31a:	f001 fae5 	bl	80108e8 <ulSetInterruptMaskFromISR>
 800f31e:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f322:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f324:	4293      	cmp	r3, r2
 800f326:	d3e6      	bcc.n	800f2f6 <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800f328:	2500      	movs	r5, #0
 800f32a:	e7f0      	b.n	800f30e <xQueueGenericSendFromISR+0x70>

0800f32c <xQueueGiveFromISR>:
{
 800f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32e:	0004      	movs	r4, r0
 800f330:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800f332:	2800      	cmp	r0, #0
 800f334:	d004      	beq.n	800f340 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f336:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d003      	beq.n	800f344 <xQueueGiveFromISR+0x18>
 800f33c:	b672      	cpsid	i
 800f33e:	e7fe      	b.n	800f33e <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f340:	b672      	cpsid	i
 800f342:	e7fe      	b.n	800f342 <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f344:	6803      	ldr	r3, [r0, #0]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d01f      	beq.n	800f38a <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f34a:	f001 facd 	bl	80108e8 <ulSetInterruptMaskFromISR>
 800f34e:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f350:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f352:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f354:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f356:	4293      	cmp	r3, r2
 800f358:	d212      	bcs.n	800f380 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800f35a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f35c:	3301      	adds	r3, #1
 800f35e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f360:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f362:	3301      	adds	r3, #1
 800f364:	d116      	bne.n	800f394 <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800f366:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f368:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d008      	beq.n	800f380 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f36e:	0020      	movs	r0, r4
 800f370:	3024      	adds	r0, #36	; 0x24
 800f372:	f000 fde1 	bl	800ff38 <xTaskRemoveFromEventList>
 800f376:	2800      	cmp	r0, #0
 800f378:	d002      	beq.n	800f380 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800f37a:	2f00      	cmp	r7, #0
 800f37c:	d00f      	beq.n	800f39e <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f37e:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f380:	0030      	movs	r0, r6
 800f382:	f001 fab6 	bl	80108f2 <vClearInterruptMaskFromISR>
}
 800f386:	0028      	movs	r0, r5
 800f388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f38a:	6843      	ldr	r3, [r0, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d0dc      	beq.n	800f34a <xQueueGiveFromISR+0x1e>
 800f390:	b672      	cpsid	i
 800f392:	e7fe      	b.n	800f392 <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800f394:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f396:	3301      	adds	r3, #1
 800f398:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f39a:	2501      	movs	r5, #1
 800f39c:	e7f0      	b.n	800f380 <xQueueGiveFromISR+0x54>
 800f39e:	2501      	movs	r5, #1
 800f3a0:	e7ee      	b.n	800f380 <xQueueGiveFromISR+0x54>

0800f3a2 <xQueueGenericReceive>:
{
 800f3a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3a4:	46c6      	mov	lr, r8
 800f3a6:	b500      	push	{lr}
 800f3a8:	b084      	sub	sp, #16
 800f3aa:	0004      	movs	r4, r0
 800f3ac:	000e      	movs	r6, r1
 800f3ae:	9201      	str	r2, [sp, #4]
 800f3b0:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800f3b2:	2800      	cmp	r0, #0
 800f3b4:	d006      	beq.n	800f3c4 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3b6:	2900      	cmp	r1, #0
 800f3b8:	d106      	bne.n	800f3c8 <xQueueGenericReceive+0x26>
 800f3ba:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d003      	beq.n	800f3c8 <xQueueGenericReceive+0x26>
 800f3c0:	b672      	cpsid	i
 800f3c2:	e7fe      	b.n	800f3c2 <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800f3c4:	b672      	cpsid	i
 800f3c6:	e7fe      	b.n	800f3c6 <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3c8:	f000 fe3e 	bl	8010048 <xTaskGetSchedulerState>
 800f3cc:	2800      	cmp	r0, #0
 800f3ce:	d104      	bne.n	800f3da <xQueueGenericReceive+0x38>
 800f3d0:	9b01      	ldr	r3, [sp, #4]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d004      	beq.n	800f3e0 <xQueueGenericReceive+0x3e>
 800f3d6:	b672      	cpsid	i
 800f3d8:	e7fe      	b.n	800f3d8 <xQueueGenericReceive+0x36>
 800f3da:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f3dc:	2700      	movs	r7, #0
 800f3de:	e04b      	b.n	800f478 <xQueueGenericReceive+0xd6>
 800f3e0:	2500      	movs	r5, #0
 800f3e2:	e7fb      	b.n	800f3dc <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f3e4:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3e6:	0031      	movs	r1, r6
 800f3e8:	0020      	movs	r0, r4
 800f3ea:	f7ff fdfd 	bl	800efe8 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f3ee:	4643      	mov	r3, r8
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d11a      	bne.n	800f42a <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800f3f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3f6:	3b01      	subs	r3, #1
 800f3f8:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d102      	bne.n	800f406 <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f400:	f000 ff62 	bl	80102c8 <pvTaskIncrementMutexHeldCount>
 800f404:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f406:	6923      	ldr	r3, [r4, #16]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d007      	beq.n	800f41c <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f40c:	0020      	movs	r0, r4
 800f40e:	3010      	adds	r0, #16
 800f410:	f000 fd92 	bl	800ff38 <xTaskRemoveFromEventList>
 800f414:	2801      	cmp	r0, #1
 800f416:	d101      	bne.n	800f41c <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f418:	f001 fa3e 	bl	8010898 <vPortYield>
				taskEXIT_CRITICAL();
 800f41c:	f001 fa54 	bl	80108c8 <vPortExitCritical>
				return pdPASS;
 800f420:	2001      	movs	r0, #1
}
 800f422:	b004      	add	sp, #16
 800f424:	bc04      	pop	{r2}
 800f426:	4690      	mov	r8, r2
 800f428:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f42a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f42c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d0f4      	beq.n	800f41c <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f432:	0020      	movs	r0, r4
 800f434:	3024      	adds	r0, #36	; 0x24
 800f436:	f000 fd7f 	bl	800ff38 <xTaskRemoveFromEventList>
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d0ee      	beq.n	800f41c <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f43e:	f001 fa2b 	bl	8010898 <vPortYield>
 800f442:	e7eb      	b.n	800f41c <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800f444:	f001 fa40 	bl	80108c8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f448:	2000      	movs	r0, #0
 800f44a:	e7ea      	b.n	800f422 <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800f44c:	a802      	add	r0, sp, #8
 800f44e:	f000 fdb3 	bl	800ffb8 <vTaskSetTimeOutState>
 800f452:	e01b      	b.n	800f48c <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800f454:	6467      	str	r7, [r4, #68]	; 0x44
 800f456:	e022      	b.n	800f49e <xQueueGenericReceive+0xfc>
 800f458:	64a7      	str	r7, [r4, #72]	; 0x48
 800f45a:	e023      	b.n	800f4a4 <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800f45c:	f001 fa28 	bl	80108b0 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f460:	6860      	ldr	r0, [r4, #4]
 800f462:	f000 fe01 	bl	8010068 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f466:	f001 fa2f 	bl	80108c8 <vPortExitCritical>
 800f46a:	e02d      	b.n	800f4c8 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800f46c:	0020      	movs	r0, r4
 800f46e:	f7ff fdcd 	bl	800f00c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f472:	f000 fb83 	bl	800fb7c <xTaskResumeAll>
 800f476:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800f478:	f001 fa1a 	bl	80108b0 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f47c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d1b0      	bne.n	800f3e4 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f482:	9b01      	ldr	r3, [sp, #4]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d0dd      	beq.n	800f444 <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800f488:	2d00      	cmp	r5, #0
 800f48a:	d0df      	beq.n	800f44c <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800f48c:	f001 fa1c 	bl	80108c8 <vPortExitCritical>
		vTaskSuspendAll();
 800f490:	f000 fad4 	bl	800fa3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f494:	f001 fa0c 	bl	80108b0 <vPortEnterCritical>
 800f498:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f49a:	3301      	adds	r3, #1
 800f49c:	d0da      	beq.n	800f454 <xQueueGenericReceive+0xb2>
 800f49e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	d0d9      	beq.n	800f458 <xQueueGenericReceive+0xb6>
 800f4a4:	f001 fa10 	bl	80108c8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4a8:	a901      	add	r1, sp, #4
 800f4aa:	a802      	add	r0, sp, #8
 800f4ac:	f000 fd94 	bl	800ffd8 <xTaskCheckForTimeOut>
 800f4b0:	2800      	cmp	r0, #0
 800f4b2:	d118      	bne.n	800f4e6 <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800f4b4:	f001 f9fc 	bl	80108b0 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f4ba:	f001 fa05 	bl	80108c8 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4be:	2d00      	cmp	r5, #0
 800f4c0:	d1d4      	bne.n	800f46c <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d0c9      	beq.n	800f45c <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4c8:	0020      	movs	r0, r4
 800f4ca:	3024      	adds	r0, #36	; 0x24
 800f4cc:	9901      	ldr	r1, [sp, #4]
 800f4ce:	f000 fcf5 	bl	800febc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4d2:	0020      	movs	r0, r4
 800f4d4:	f7ff fd9a 	bl	800f00c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4d8:	f000 fb50 	bl	800fb7c <xTaskResumeAll>
 800f4dc:	2800      	cmp	r0, #0
 800f4de:	d1ca      	bne.n	800f476 <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800f4e0:	f001 f9da 	bl	8010898 <vPortYield>
 800f4e4:	e7c7      	b.n	800f476 <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800f4e6:	0020      	movs	r0, r4
 800f4e8:	f7ff fd90 	bl	800f00c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4ec:	f000 fb46 	bl	800fb7c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	e796      	b.n	800f422 <xQueueGenericReceive+0x80>

0800f4f4 <xQueueReceiveFromISR>:
{
 800f4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	0004      	movs	r4, r0
 800f4fa:	000f      	movs	r7, r1
 800f4fc:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f4fe:	2800      	cmp	r0, #0
 800f500:	d006      	beq.n	800f510 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f502:	2900      	cmp	r1, #0
 800f504:	d106      	bne.n	800f514 <xQueueReceiveFromISR+0x20>
 800f506:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d003      	beq.n	800f514 <xQueueReceiveFromISR+0x20>
 800f50c:	b672      	cpsid	i
 800f50e:	e7fe      	b.n	800f50e <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800f510:	b672      	cpsid	i
 800f512:	e7fe      	b.n	800f512 <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f514:	f001 f9e8 	bl	80108e8 <ulSetInterruptMaskFromISR>
 800f518:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f51a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f51c:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d01b      	beq.n	800f55a <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f522:	0039      	movs	r1, r7
 800f524:	0020      	movs	r0, r4
 800f526:	f7ff fd5f 	bl	800efe8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f52a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f52c:	3b01      	subs	r3, #1
 800f52e:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f530:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f532:	3301      	adds	r3, #1
 800f534:	d004      	beq.n	800f540 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800f536:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f538:	3301      	adds	r3, #1
 800f53a:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f53c:	2501      	movs	r5, #1
 800f53e:	e00c      	b.n	800f55a <xQueueReceiveFromISR+0x66>
 800f540:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f542:	6923      	ldr	r3, [r4, #16]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d008      	beq.n	800f55a <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f548:	0020      	movs	r0, r4
 800f54a:	3010      	adds	r0, #16
 800f54c:	f000 fcf4 	bl	800ff38 <xTaskRemoveFromEventList>
 800f550:	2800      	cmp	r0, #0
 800f552:	d002      	beq.n	800f55a <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800f554:	2e00      	cmp	r6, #0
 800f556:	d006      	beq.n	800f566 <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f558:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f55a:	9801      	ldr	r0, [sp, #4]
 800f55c:	f001 f9c9 	bl	80108f2 <vClearInterruptMaskFromISR>
}
 800f560:	0028      	movs	r0, r5
 800f562:	b003      	add	sp, #12
 800f564:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f566:	2501      	movs	r5, #1
 800f568:	e7f7      	b.n	800f55a <xQueueReceiveFromISR+0x66>
	...

0800f56c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f56c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f56e:	4b0a      	ldr	r3, [pc, #40]	; (800f598 <vQueueAddToRegistry+0x2c>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d009      	beq.n	800f58a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f576:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f578:	4c07      	ldr	r4, [pc, #28]	; (800f598 <vQueueAddToRegistry+0x2c>)
 800f57a:	00da      	lsls	r2, r3, #3
 800f57c:	58a2      	ldr	r2, [r4, r2]
 800f57e:	2a00      	cmp	r2, #0
 800f580:	d004      	beq.n	800f58c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f582:	3301      	adds	r3, #1
 800f584:	2b08      	cmp	r3, #8
 800f586:	d1f8      	bne.n	800f57a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f588:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f58a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f58c:	4a02      	ldr	r2, [pc, #8]	; (800f598 <vQueueAddToRegistry+0x2c>)
 800f58e:	00db      	lsls	r3, r3, #3
 800f590:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f592:	18d3      	adds	r3, r2, r3
 800f594:	6058      	str	r0, [r3, #4]
				break;
 800f596:	e7f7      	b.n	800f588 <vQueueAddToRegistry+0x1c>
 800f598:	20007390 	.word	0x20007390

0800f59c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f59c:	b570      	push	{r4, r5, r6, lr}
 800f59e:	0004      	movs	r4, r0
 800f5a0:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f5a2:	f001 f985 	bl	80108b0 <vPortEnterCritical>
 800f5a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f5a8:	3301      	adds	r3, #1
 800f5aa:	d00b      	beq.n	800f5c4 <vQueueWaitForMessageRestricted+0x28>
 800f5ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	d00b      	beq.n	800f5ca <vQueueWaitForMessageRestricted+0x2e>
 800f5b2:	f001 f989 	bl	80108c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d009      	beq.n	800f5d0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5bc:	0020      	movs	r0, r4
 800f5be:	f7ff fd25 	bl	800f00c <prvUnlockQueue>
	}
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	6463      	str	r3, [r4, #68]	; 0x44
 800f5c8:	e7f0      	b.n	800f5ac <vQueueWaitForMessageRestricted+0x10>
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5ce:	e7f0      	b.n	800f5b2 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f5d0:	0020      	movs	r0, r4
 800f5d2:	3024      	adds	r0, #36	; 0x24
 800f5d4:	0029      	movs	r1, r5
 800f5d6:	f000 fc95 	bl	800ff04 <vTaskPlaceOnEventListRestricted>
 800f5da:	e7ef      	b.n	800f5bc <vQueueWaitForMessageRestricted+0x20>

0800f5dc <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f5dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5de:	46d6      	mov	lr, sl
 800f5e0:	464f      	mov	r7, r9
 800f5e2:	4646      	mov	r6, r8
 800f5e4:	b5c0      	push	{r6, r7, lr}
 800f5e6:	0006      	movs	r6, r0
 800f5e8:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f5ea:	6808      	ldr	r0, [r1, #0]
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	d044      	beq.n	800f67a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f5f0:	684b      	ldr	r3, [r1, #4]
 800f5f2:	685b      	ldr	r3, [r3, #4]
 800f5f4:	604b      	str	r3, [r1, #4]
 800f5f6:	2208      	movs	r2, #8
 800f5f8:	4690      	mov	r8, r2
 800f5fa:	4488      	add	r8, r1
 800f5fc:	4543      	cmp	r3, r8
 800f5fe:	d006      	beq.n	800f60e <prvListTaskWithinSingleList+0x32>
 800f600:	684b      	ldr	r3, [r1, #4]
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800f606:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f608:	2302      	movs	r3, #2
 800f60a:	469a      	mov	sl, r3
 800f60c:	e018      	b.n	800f640 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f60e:	68cb      	ldr	r3, [r1, #12]
 800f610:	604b      	str	r3, [r1, #4]
 800f612:	e7f5      	b.n	800f600 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f614:	68cb      	ldr	r3, [r1, #12]
 800f616:	604b      	str	r3, [r1, #4]
 800f618:	e017      	b.n	800f64a <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f61a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f61c:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f61e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f620:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f622:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f624:	783b      	ldrb	r3, [r7, #0]
 800f626:	2ba5      	cmp	r3, #165	; 0xa5
 800f628:	d125      	bne.n	800f676 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800f62a:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f62c:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f62e:	5cfc      	ldrb	r4, [r7, r3]
 800f630:	2ca5      	cmp	r4, #165	; 0xa5
 800f632:	d0fb      	beq.n	800f62c <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f634:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f636:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800f638:	3001      	adds	r0, #1
 800f63a:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800f63c:	45a9      	cmp	r9, r5
 800f63e:	d01c      	beq.n	800f67a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f640:	684b      	ldr	r3, [r1, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	604b      	str	r3, [r1, #4]
 800f646:	4598      	cmp	r8, r3
 800f648:	d0e4      	beq.n	800f614 <prvListTaskWithinSingleList+0x38>
 800f64a:	684b      	ldr	r3, [r1, #4]
 800f64c:	68dd      	ldr	r5, [r3, #12]
 800f64e:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f650:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f652:	002b      	movs	r3, r5
 800f654:	3334      	adds	r3, #52	; 0x34
 800f656:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f658:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f65a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f65c:	4663      	mov	r3, ip
 800f65e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f660:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f662:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800f664:	4663      	mov	r3, ip
 800f666:	2b03      	cmp	r3, #3
 800f668:	d1d7      	bne.n	800f61a <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f66a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d0d4      	beq.n	800f61a <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f670:	4653      	mov	r3, sl
 800f672:	7333      	strb	r3, [r6, #12]
 800f674:	e7d1      	b.n	800f61a <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800f676:	2300      	movs	r3, #0
 800f678:	e7dc      	b.n	800f634 <prvListTaskWithinSingleList+0x58>
	}
 800f67a:	bc1c      	pop	{r2, r3, r4}
 800f67c:	4690      	mov	r8, r2
 800f67e:	4699      	mov	r9, r3
 800f680:	46a2      	mov	sl, r4
 800f682:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f684 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f684:	4b08      	ldr	r3, [pc, #32]	; (800f6a8 <prvResetNextTaskUnblockTime+0x24>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d007      	beq.n	800f69e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f68e:	4b06      	ldr	r3, [pc, #24]	; (800f6a8 <prvResetNextTaskUnblockTime+0x24>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f694:	68db      	ldr	r3, [r3, #12]
 800f696:	685a      	ldr	r2, [r3, #4]
 800f698:	4b04      	ldr	r3, [pc, #16]	; (800f6ac <prvResetNextTaskUnblockTime+0x28>)
 800f69a:	601a      	str	r2, [r3, #0]
	}
}
 800f69c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800f69e:	4b03      	ldr	r3, [pc, #12]	; (800f6ac <prvResetNextTaskUnblockTime+0x28>)
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	4252      	negs	r2, r2
 800f6a4:	601a      	str	r2, [r3, #0]
 800f6a6:	e7f9      	b.n	800f69c <prvResetNextTaskUnblockTime+0x18>
 800f6a8:	200021e8 	.word	0x200021e8
 800f6ac:	20000110 	.word	0x20000110

0800f6b0 <prvAddCurrentTaskToDelayedList>:
{
 800f6b0:	b510      	push	{r4, lr}
 800f6b2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f6b4:	4b0e      	ldr	r3, [pc, #56]	; (800f6f0 <prvAddCurrentTaskToDelayedList+0x40>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	; (800f6f4 <prvAddCurrentTaskToDelayedList+0x44>)
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	4283      	cmp	r3, r0
 800f6c0:	d80d      	bhi.n	800f6de <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6c2:	4b0d      	ldr	r3, [pc, #52]	; (800f6f8 <prvAddCurrentTaskToDelayedList+0x48>)
 800f6c4:	6818      	ldr	r0, [r3, #0]
 800f6c6:	4b0a      	ldr	r3, [pc, #40]	; (800f6f0 <prvAddCurrentTaskToDelayedList+0x40>)
 800f6c8:	6819      	ldr	r1, [r3, #0]
 800f6ca:	3104      	adds	r1, #4
 800f6cc:	f7ff fc24 	bl	800ef18 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f6d0:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <prvAddCurrentTaskToDelayedList+0x4c>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	42a3      	cmp	r3, r4
 800f6d6:	d909      	bls.n	800f6ec <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800f6d8:	4b08      	ldr	r3, [pc, #32]	; (800f6fc <prvAddCurrentTaskToDelayedList+0x4c>)
 800f6da:	601c      	str	r4, [r3, #0]
}
 800f6dc:	e006      	b.n	800f6ec <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6de:	4b08      	ldr	r3, [pc, #32]	; (800f700 <prvAddCurrentTaskToDelayedList+0x50>)
 800f6e0:	6818      	ldr	r0, [r3, #0]
 800f6e2:	4b03      	ldr	r3, [pc, #12]	; (800f6f0 <prvAddCurrentTaskToDelayedList+0x40>)
 800f6e4:	6819      	ldr	r1, [r3, #0]
 800f6e6:	3104      	adds	r1, #4
 800f6e8:	f7ff fc16 	bl	800ef18 <vListInsert>
}
 800f6ec:	bd10      	pop	{r4, pc}
 800f6ee:	46c0      	nop			; (mov r8, r8)
 800f6f0:	200021e4 	.word	0x200021e4
 800f6f4:	20002304 	.word	0x20002304
 800f6f8:	200021e8 	.word	0x200021e8
 800f6fc:	20000110 	.word	0x20000110
 800f700:	200021ec 	.word	0x200021ec

0800f704 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f704:	b510      	push	{r4, lr}
 800f706:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f708:	f005 fb8c 	bl	8014e24 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f70c:	0020      	movs	r0, r4
 800f70e:	f7f0 fd03 	bl	8000118 <strlen>
 800f712:	0003      	movs	r3, r0
 800f714:	280b      	cmp	r0, #11
 800f716:	dc08      	bgt.n	800f72a <prvWriteNameToBuffer+0x26>
 800f718:	1820      	adds	r0, r4, r0
 800f71a:	0022      	movs	r2, r4
 800f71c:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800f71e:	2320      	movs	r3, #32
 800f720:	7003      	strb	r3, [r0, #0]
 800f722:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f724:	4290      	cmp	r0, r2
 800f726:	d1fb      	bne.n	800f720 <prvWriteNameToBuffer+0x1c>
 800f728:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f72a:	18e0      	adds	r0, r4, r3
 800f72c:	2300      	movs	r3, #0
 800f72e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f730:	bd10      	pop	{r4, pc}
	...

0800f734 <xTaskGenericCreate>:
{
 800f734:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f736:	46d6      	mov	lr, sl
 800f738:	4647      	mov	r7, r8
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b085      	sub	sp, #20
 800f73e:	9002      	str	r0, [sp, #8]
 800f740:	000d      	movs	r5, r1
 800f742:	0016      	movs	r6, r2
 800f744:	9303      	str	r3, [sp, #12]
 800f746:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800f748:	2800      	cmp	r0, #0
 800f74a:	d101      	bne.n	800f750 <xTaskGenericCreate+0x1c>
 800f74c:	b672      	cpsid	i
 800f74e:	e7fe      	b.n	800f74e <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f750:	2f06      	cmp	r7, #6
 800f752:	d901      	bls.n	800f758 <xTaskGenericCreate+0x24>
 800f754:	b672      	cpsid	i
 800f756:	e7fe      	b.n	800f756 <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d106      	bne.n	800f76c <xTaskGenericCreate+0x38>
 800f75e:	0090      	lsls	r0, r2, #2
 800f760:	f001 f928 	bl	80109b4 <pvPortMalloc>
 800f764:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800f766:	2800      	cmp	r0, #0
 800f768:	d100      	bne.n	800f76c <xTaskGenericCreate+0x38>
 800f76a:	e0b7      	b.n	800f8dc <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f76c:	2060      	movs	r0, #96	; 0x60
 800f76e:	f001 f921 	bl	80109b4 <pvPortMalloc>
 800f772:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f774:	d100      	bne.n	800f778 <xTaskGenericCreate+0x44>
 800f776:	e08b      	b.n	800f890 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800f778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f77a:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f77c:	00b2      	lsls	r2, r6, #2
 800f77e:	21a5      	movs	r1, #165	; 0xa5
 800f780:	0018      	movs	r0, r3
 800f782:	f005 f8e7 	bl	8014954 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f786:	4b57      	ldr	r3, [pc, #348]	; (800f8e4 <xTaskGenericCreate+0x1b0>)
 800f788:	18f3      	adds	r3, r6, r3
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f78e:	4694      	mov	ip, r2
 800f790:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f792:	2207      	movs	r2, #7
 800f794:	4393      	bics	r3, r2
 800f796:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f798:	782a      	ldrb	r2, [r5, #0]
 800f79a:	2334      	movs	r3, #52	; 0x34
 800f79c:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800f79e:	782b      	ldrb	r3, [r5, #0]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d000      	beq.n	800f7a6 <xTaskGenericCreate+0x72>
 800f7a4:	e07e      	b.n	800f8a4 <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f7a6:	2500      	movs	r5, #0
 800f7a8:	2340      	movs	r3, #64	; 0x40
 800f7aa:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800f7ac:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f7ae:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f7b0:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f7b2:	1d23      	adds	r3, r4, #4
 800f7b4:	9301      	str	r3, [sp, #4]
 800f7b6:	0018      	movs	r0, r3
 800f7b8:	f7ff fb9f 	bl	800eefa <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f7bc:	0020      	movs	r0, r4
 800f7be:	3018      	adds	r0, #24
 800f7c0:	f7ff fb9b 	bl	800eefa <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f7c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7c6:	2307      	movs	r3, #7
 800f7c8:	1bdb      	subs	r3, r3, r7
 800f7ca:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f7cc:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f7ce:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f7d0:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f7d2:	235c      	movs	r3, #92	; 0x5c
 800f7d4:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f7d6:	9a03      	ldr	r2, [sp, #12]
 800f7d8:	9902      	ldr	r1, [sp, #8]
 800f7da:	4650      	mov	r0, sl
 800f7dc:	f001 f820 	bl	8010820 <pxPortInitialiseStack>
 800f7e0:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f7e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7e4:	42ab      	cmp	r3, r5
 800f7e6:	d000      	beq.n	800f7ea <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7e8:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f7ea:	f001 f861 	bl	80108b0 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f7ee:	4a3e      	ldr	r2, [pc, #248]	; (800f8e8 <xTaskGenericCreate+0x1b4>)
 800f7f0:	6813      	ldr	r3, [r2, #0]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f7f6:	4b3d      	ldr	r3, [pc, #244]	; (800f8ec <xTaskGenericCreate+0x1b8>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d162      	bne.n	800f8c4 <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800f7fe:	4b3b      	ldr	r3, [pc, #236]	; (800f8ec <xTaskGenericCreate+0x1b8>)
 800f800:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f802:	6813      	ldr	r3, [r2, #0]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d120      	bne.n	800f84a <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f808:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f80a:	3313      	adds	r3, #19
 800f80c:	4698      	mov	r8, r3
 800f80e:	4e38      	ldr	r6, [pc, #224]	; (800f8f0 <xTaskGenericCreate+0x1bc>)
 800f810:	4640      	mov	r0, r8
 800f812:	4368      	muls	r0, r5
 800f814:	1980      	adds	r0, r0, r6
 800f816:	f7ff fb65 	bl	800eee4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f81a:	3501      	adds	r5, #1
 800f81c:	2d07      	cmp	r5, #7
 800f81e:	d1f7      	bne.n	800f810 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800f820:	4e34      	ldr	r6, [pc, #208]	; (800f8f4 <xTaskGenericCreate+0x1c0>)
 800f822:	0030      	movs	r0, r6
 800f824:	f7ff fb5e 	bl	800eee4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f828:	4d33      	ldr	r5, [pc, #204]	; (800f8f8 <xTaskGenericCreate+0x1c4>)
 800f82a:	0028      	movs	r0, r5
 800f82c:	f7ff fb5a 	bl	800eee4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f830:	4832      	ldr	r0, [pc, #200]	; (800f8fc <xTaskGenericCreate+0x1c8>)
 800f832:	f7ff fb57 	bl	800eee4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f836:	4832      	ldr	r0, [pc, #200]	; (800f900 <xTaskGenericCreate+0x1cc>)
 800f838:	f7ff fb54 	bl	800eee4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f83c:	4831      	ldr	r0, [pc, #196]	; (800f904 <xTaskGenericCreate+0x1d0>)
 800f83e:	f7ff fb51 	bl	800eee4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f842:	4b31      	ldr	r3, [pc, #196]	; (800f908 <xTaskGenericCreate+0x1d4>)
 800f844:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f846:	4b31      	ldr	r3, [pc, #196]	; (800f90c <xTaskGenericCreate+0x1d8>)
 800f848:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800f84a:	4a31      	ldr	r2, [pc, #196]	; (800f910 <xTaskGenericCreate+0x1dc>)
 800f84c:	6813      	ldr	r3, [r2, #0]
 800f84e:	3301      	adds	r3, #1
 800f850:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f852:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f854:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f856:	4a2f      	ldr	r2, [pc, #188]	; (800f914 <xTaskGenericCreate+0x1e0>)
 800f858:	6812      	ldr	r2, [r2, #0]
 800f85a:	4293      	cmp	r3, r2
 800f85c:	d901      	bls.n	800f862 <xTaskGenericCreate+0x12e>
 800f85e:	4a2d      	ldr	r2, [pc, #180]	; (800f914 <xTaskGenericCreate+0x1e0>)
 800f860:	6013      	str	r3, [r2, #0]
 800f862:	2014      	movs	r0, #20
 800f864:	4358      	muls	r0, r3
 800f866:	4b22      	ldr	r3, [pc, #136]	; (800f8f0 <xTaskGenericCreate+0x1bc>)
 800f868:	18c0      	adds	r0, r0, r3
 800f86a:	9901      	ldr	r1, [sp, #4]
 800f86c:	f7ff fb48 	bl	800ef00 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f870:	f001 f82a 	bl	80108c8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f874:	4b28      	ldr	r3, [pc, #160]	; (800f918 <xTaskGenericCreate+0x1e4>)
 800f876:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f878:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d00d      	beq.n	800f89a <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f87e:	4b1b      	ldr	r3, [pc, #108]	; (800f8ec <xTaskGenericCreate+0x1b8>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f884:	42bb      	cmp	r3, r7
 800f886:	d208      	bcs.n	800f89a <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f888:	f001 f806 	bl	8010898 <vPortYield>
			xReturn = pdPASS;
 800f88c:	2001      	movs	r0, #1
 800f88e:	e004      	b.n	800f89a <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f890:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f892:	f001 f925 	bl	8010ae0 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f896:	2001      	movs	r0, #1
 800f898:	4240      	negs	r0, r0
}
 800f89a:	b005      	add	sp, #20
 800f89c:	bc0c      	pop	{r2, r3}
 800f89e:	4690      	mov	r8, r2
 800f8a0:	469a      	mov	sl, r3
 800f8a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8a4:	1c6b      	adds	r3, r5, #1
 800f8a6:	0022      	movs	r2, r4
 800f8a8:	3235      	adds	r2, #53	; 0x35
 800f8aa:	0021      	movs	r1, r4
 800f8ac:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f8ae:	7818      	ldrb	r0, [r3, #0]
 800f8b0:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f8b2:	7818      	ldrb	r0, [r3, #0]
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d100      	bne.n	800f8ba <xTaskGenericCreate+0x186>
 800f8b8:	e775      	b.n	800f7a6 <xTaskGenericCreate+0x72>
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8be:	4291      	cmp	r1, r2
 800f8c0:	d1f5      	bne.n	800f8ae <xTaskGenericCreate+0x17a>
 800f8c2:	e770      	b.n	800f7a6 <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f8c4:	4b14      	ldr	r3, [pc, #80]	; (800f918 <xTaskGenericCreate+0x1e4>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1be      	bne.n	800f84a <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f8cc:	4b07      	ldr	r3, [pc, #28]	; (800f8ec <xTaskGenericCreate+0x1b8>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8d2:	42bb      	cmp	r3, r7
 800f8d4:	d8b9      	bhi.n	800f84a <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f8d6:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <xTaskGenericCreate+0x1b8>)
 800f8d8:	601c      	str	r4, [r3, #0]
 800f8da:	e7b6      	b.n	800f84a <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f8dc:	2001      	movs	r0, #1
 800f8de:	4240      	negs	r0, r0
 800f8e0:	e7db      	b.n	800f89a <xTaskGenericCreate+0x166>
 800f8e2:	46c0      	nop			; (mov r8, r8)
 800f8e4:	3fffffff 	.word	0x3fffffff
 800f8e8:	20002280 	.word	0x20002280
 800f8ec:	200021e4 	.word	0x200021e4
 800f8f0:	200021f0 	.word	0x200021f0
 800f8f4:	20002298 	.word	0x20002298
 800f8f8:	200022ac 	.word	0x200022ac
 800f8fc:	200022c4 	.word	0x200022c4
 800f900:	200022f0 	.word	0x200022f0
 800f904:	200022dc 	.word	0x200022dc
 800f908:	200021e8 	.word	0x200021e8
 800f90c:	200021ec 	.word	0x200021ec
 800f910:	2000228c 	.word	0x2000228c
 800f914:	20002294 	.word	0x20002294
 800f918:	200022d8 	.word	0x200022d8

0800f91c <uxTaskPriorityGet>:
	{
 800f91c:	b510      	push	{r4, lr}
 800f91e:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f920:	f000 ffc6 	bl	80108b0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f924:	2c00      	cmp	r4, #0
 800f926:	d004      	beq.n	800f932 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f928:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f92a:	f000 ffcd 	bl	80108c8 <vPortExitCritical>
	}
 800f92e:	0020      	movs	r0, r4
 800f930:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f932:	4b01      	ldr	r3, [pc, #4]	; (800f938 <uxTaskPriorityGet+0x1c>)
 800f934:	681c      	ldr	r4, [r3, #0]
 800f936:	e7f7      	b.n	800f928 <uxTaskPriorityGet+0xc>
 800f938:	200021e4 	.word	0x200021e4

0800f93c <vTaskPrioritySet>:
	{
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	0004      	movs	r4, r0
 800f940:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f942:	2906      	cmp	r1, #6
 800f944:	d901      	bls.n	800f94a <vTaskPrioritySet+0xe>
 800f946:	b672      	cpsid	i
 800f948:	e7fe      	b.n	800f948 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f94a:	f000 ffb1 	bl	80108b0 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f94e:	2c00      	cmp	r4, #0
 800f950:	d101      	bne.n	800f956 <vTaskPrioritySet+0x1a>
 800f952:	4b21      	ldr	r3, [pc, #132]	; (800f9d8 <vTaskPrioritySet+0x9c>)
 800f954:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f956:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f958:	4295      	cmp	r5, r2
 800f95a:	d032      	beq.n	800f9c2 <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f95c:	d934      	bls.n	800f9c8 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f95e:	4b1e      	ldr	r3, [pc, #120]	; (800f9d8 <vTaskPrioritySet+0x9c>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	42a3      	cmp	r3, r4
 800f964:	d036      	beq.n	800f9d4 <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f966:	4b1c      	ldr	r3, [pc, #112]	; (800f9d8 <vTaskPrioritySet+0x9c>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	2600      	movs	r6, #0
 800f96e:	429d      	cmp	r5, r3
 800f970:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f972:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f974:	428a      	cmp	r2, r1
 800f976:	d100      	bne.n	800f97a <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f978:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f97a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f97c:	69a3      	ldr	r3, [r4, #24]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	db02      	blt.n	800f988 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f982:	2207      	movs	r2, #7
 800f984:	1b55      	subs	r5, r2, r5
 800f986:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f988:	2314      	movs	r3, #20
 800f98a:	434b      	muls	r3, r1
 800f98c:	4a13      	ldr	r2, [pc, #76]	; (800f9dc <vTaskPrioritySet+0xa0>)
 800f98e:	189b      	adds	r3, r3, r2
 800f990:	6962      	ldr	r2, [r4, #20]
 800f992:	429a      	cmp	r2, r3
 800f994:	d111      	bne.n	800f9ba <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f996:	1d25      	adds	r5, r4, #4
 800f998:	0028      	movs	r0, r5
 800f99a:	f7ff fad4 	bl	800ef46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f99e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9a0:	4a0f      	ldr	r2, [pc, #60]	; (800f9e0 <vTaskPrioritySet+0xa4>)
 800f9a2:	6812      	ldr	r2, [r2, #0]
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	d901      	bls.n	800f9ac <vTaskPrioritySet+0x70>
 800f9a8:	4a0d      	ldr	r2, [pc, #52]	; (800f9e0 <vTaskPrioritySet+0xa4>)
 800f9aa:	6013      	str	r3, [r2, #0]
 800f9ac:	2014      	movs	r0, #20
 800f9ae:	4358      	muls	r0, r3
 800f9b0:	4b0a      	ldr	r3, [pc, #40]	; (800f9dc <vTaskPrioritySet+0xa0>)
 800f9b2:	18c0      	adds	r0, r0, r3
 800f9b4:	0029      	movs	r1, r5
 800f9b6:	f7ff faa3 	bl	800ef00 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f9ba:	2e01      	cmp	r6, #1
 800f9bc:	d101      	bne.n	800f9c2 <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f9be:	f000 ff6b 	bl	8010898 <vPortYield>
		taskEXIT_CRITICAL();
 800f9c2:	f000 ff81 	bl	80108c8 <vPortExitCritical>
	}
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f9c8:	4b03      	ldr	r3, [pc, #12]	; (800f9d8 <vTaskPrioritySet+0x9c>)
 800f9ca:	681e      	ldr	r6, [r3, #0]
 800f9cc:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f9ce:	4273      	negs	r3, r6
 800f9d0:	415e      	adcs	r6, r3
 800f9d2:	e7ce      	b.n	800f972 <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f9d4:	2600      	movs	r6, #0
 800f9d6:	e7cc      	b.n	800f972 <vTaskPrioritySet+0x36>
 800f9d8:	200021e4 	.word	0x200021e4
 800f9dc:	200021f0 	.word	0x200021f0
 800f9e0:	20002294 	.word	0x20002294

0800f9e4 <vTaskStartScheduler>:
{
 800f9e4:	b500      	push	{lr}
 800f9e6:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f9e8:	2300      	movs	r3, #0
 800f9ea:	9303      	str	r3, [sp, #12]
 800f9ec:	9302      	str	r3, [sp, #8]
 800f9ee:	9301      	str	r3, [sp, #4]
 800f9f0:	9300      	str	r3, [sp, #0]
 800f9f2:	22a0      	movs	r2, #160	; 0xa0
 800f9f4:	490d      	ldr	r1, [pc, #52]	; (800fa2c <vTaskStartScheduler+0x48>)
 800f9f6:	480e      	ldr	r0, [pc, #56]	; (800fa30 <vTaskStartScheduler+0x4c>)
 800f9f8:	f7ff fe9c 	bl	800f734 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f9fc:	2801      	cmp	r0, #1
 800f9fe:	d003      	beq.n	800fa08 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800fa00:	2800      	cmp	r0, #0
 800fa02:	d110      	bne.n	800fa26 <vTaskStartScheduler+0x42>
 800fa04:	b672      	cpsid	i
 800fa06:	e7fe      	b.n	800fa06 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800fa08:	f000 fd68 	bl	80104dc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800fa0c:	2801      	cmp	r0, #1
 800fa0e:	d1f7      	bne.n	800fa00 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800fa10:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800fa12:	4b08      	ldr	r3, [pc, #32]	; (800fa34 <vTaskStartScheduler+0x50>)
 800fa14:	2201      	movs	r2, #1
 800fa16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800fa18:	4b07      	ldr	r3, [pc, #28]	; (800fa38 <vTaskStartScheduler+0x54>)
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800fa1e:	f7f8 fd01 	bl	8008424 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800fa22:	f000 ff0f 	bl	8010844 <xPortStartScheduler>
}
 800fa26:	b005      	add	sp, #20
 800fa28:	bd00      	pop	{pc}
 800fa2a:	46c0      	nop			; (mov r8, r8)
 800fa2c:	0801c290 	.word	0x0801c290
 800fa30:	0800fca5 	.word	0x0800fca5
 800fa34:	200022d8 	.word	0x200022d8
 800fa38:	20002304 	.word	0x20002304

0800fa3c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fa3c:	4a02      	ldr	r2, [pc, #8]	; (800fa48 <vTaskSuspendAll+0xc>)
 800fa3e:	6813      	ldr	r3, [r2, #0]
 800fa40:	3301      	adds	r3, #1
 800fa42:	6013      	str	r3, [r2, #0]
}
 800fa44:	4770      	bx	lr
 800fa46:	46c0      	nop			; (mov r8, r8)
 800fa48:	20002288 	.word	0x20002288

0800fa4c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fa4c:	4b01      	ldr	r3, [pc, #4]	; (800fa54 <xTaskGetTickCount+0x8>)
 800fa4e:	6818      	ldr	r0, [r3, #0]
}
 800fa50:	4770      	bx	lr
 800fa52:	46c0      	nop			; (mov r8, r8)
 800fa54:	20002304 	.word	0x20002304

0800fa58 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800fa58:	4b01      	ldr	r3, [pc, #4]	; (800fa60 <xTaskGetTickCountFromISR+0x8>)
 800fa5a:	6818      	ldr	r0, [r3, #0]
}
 800fa5c:	4770      	bx	lr
 800fa5e:	46c0      	nop			; (mov r8, r8)
 800fa60:	20002304 	.word	0x20002304

0800fa64 <xTaskIncrementTick>:
{
 800fa64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa66:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa68:	4b39      	ldr	r3, [pc, #228]	; (800fb50 <xTaskIncrementTick+0xec>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d161      	bne.n	800fb34 <xTaskIncrementTick+0xd0>
		++xTickCount;
 800fa70:	4b38      	ldr	r3, [pc, #224]	; (800fb54 <xTaskIncrementTick+0xf0>)
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	3201      	adds	r2, #1
 800fa76:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800fa78:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800fa7a:	2e00      	cmp	r6, #0
 800fa7c:	d112      	bne.n	800faa4 <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800fa7e:	4b36      	ldr	r3, [pc, #216]	; (800fb58 <xTaskIncrementTick+0xf4>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d001      	beq.n	800fa8c <xTaskIncrementTick+0x28>
 800fa88:	b672      	cpsid	i
 800fa8a:	e7fe      	b.n	800fa8a <xTaskIncrementTick+0x26>
 800fa8c:	4a32      	ldr	r2, [pc, #200]	; (800fb58 <xTaskIncrementTick+0xf4>)
 800fa8e:	6811      	ldr	r1, [r2, #0]
 800fa90:	4b32      	ldr	r3, [pc, #200]	; (800fb5c <xTaskIncrementTick+0xf8>)
 800fa92:	6818      	ldr	r0, [r3, #0]
 800fa94:	6010      	str	r0, [r2, #0]
 800fa96:	6019      	str	r1, [r3, #0]
 800fa98:	4a31      	ldr	r2, [pc, #196]	; (800fb60 <xTaskIncrementTick+0xfc>)
 800fa9a:	6813      	ldr	r3, [r2, #0]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	6013      	str	r3, [r2, #0]
 800faa0:	f7ff fdf0 	bl	800f684 <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800faa4:	4b2f      	ldr	r3, [pc, #188]	; (800fb64 <xTaskIncrementTick+0x100>)
 800faa6:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800faa8:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800faaa:	42b3      	cmp	r3, r6
 800faac:	d833      	bhi.n	800fb16 <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800faae:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fab0:	4d29      	ldr	r5, [pc, #164]	; (800fb58 <xTaskIncrementTick+0xf4>)
 800fab2:	682b      	ldr	r3, [r5, #0]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d029      	beq.n	800fb0e <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800faba:	4b27      	ldr	r3, [pc, #156]	; (800fb58 <xTaskIncrementTick+0xf4>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	68db      	ldr	r3, [r3, #12]
 800fac0:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800fac2:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800fac4:	429e      	cmp	r6, r3
 800fac6:	d332      	bcc.n	800fb2e <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fac8:	1d23      	adds	r3, r4, #4
 800faca:	9301      	str	r3, [sp, #4]
 800facc:	0018      	movs	r0, r3
 800face:	f7ff fa3a 	bl	800ef46 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d003      	beq.n	800fae0 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fad8:	0020      	movs	r0, r4
 800fada:	3018      	adds	r0, #24
 800fadc:	f7ff fa33 	bl	800ef46 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800fae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fae2:	4a21      	ldr	r2, [pc, #132]	; (800fb68 <xTaskIncrementTick+0x104>)
 800fae4:	6812      	ldr	r2, [r2, #0]
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d901      	bls.n	800faee <xTaskIncrementTick+0x8a>
 800faea:	4a1f      	ldr	r2, [pc, #124]	; (800fb68 <xTaskIncrementTick+0x104>)
 800faec:	6013      	str	r3, [r2, #0]
 800faee:	0098      	lsls	r0, r3, #2
 800faf0:	18c0      	adds	r0, r0, r3
 800faf2:	0080      	lsls	r0, r0, #2
 800faf4:	4b1d      	ldr	r3, [pc, #116]	; (800fb6c <xTaskIncrementTick+0x108>)
 800faf6:	18c0      	adds	r0, r0, r3
 800faf8:	9901      	ldr	r1, [sp, #4]
 800fafa:	f7ff fa01 	bl	800ef00 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fafe:	4b1c      	ldr	r3, [pc, #112]	; (800fb70 <xTaskIncrementTick+0x10c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d3d3      	bcc.n	800fab2 <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800fb0a:	2701      	movs	r7, #1
 800fb0c:	e7d1      	b.n	800fab2 <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800fb0e:	4b15      	ldr	r3, [pc, #84]	; (800fb64 <xTaskIncrementTick+0x100>)
 800fb10:	2201      	movs	r2, #1
 800fb12:	4252      	negs	r2, r2
 800fb14:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fb16:	4b16      	ldr	r3, [pc, #88]	; (800fb70 <xTaskIncrementTick+0x10c>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb1c:	0093      	lsls	r3, r2, #2
 800fb1e:	189b      	adds	r3, r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4a12      	ldr	r2, [pc, #72]	; (800fb6c <xTaskIncrementTick+0x108>)
 800fb24:	589b      	ldr	r3, [r3, r2]
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d909      	bls.n	800fb3e <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800fb2a:	2701      	movs	r7, #1
 800fb2c:	e007      	b.n	800fb3e <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800fb2e:	4a0d      	ldr	r2, [pc, #52]	; (800fb64 <xTaskIncrementTick+0x100>)
 800fb30:	6013      	str	r3, [r2, #0]
							break;
 800fb32:	e7f0      	b.n	800fb16 <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800fb34:	4a0f      	ldr	r2, [pc, #60]	; (800fb74 <xTaskIncrementTick+0x110>)
 800fb36:	6813      	ldr	r3, [r2, #0]
 800fb38:	3301      	adds	r3, #1
 800fb3a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800fb3c:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800fb3e:	4b0e      	ldr	r3, [pc, #56]	; (800fb78 <xTaskIncrementTick+0x114>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d000      	beq.n	800fb48 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800fb46:	2701      	movs	r7, #1
}
 800fb48:	0038      	movs	r0, r7
 800fb4a:	b003      	add	sp, #12
 800fb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb4e:	46c0      	nop			; (mov r8, r8)
 800fb50:	20002288 	.word	0x20002288
 800fb54:	20002304 	.word	0x20002304
 800fb58:	200021e8 	.word	0x200021e8
 800fb5c:	200021ec 	.word	0x200021ec
 800fb60:	200022c0 	.word	0x200022c0
 800fb64:	20000110 	.word	0x20000110
 800fb68:	20002294 	.word	0x20002294
 800fb6c:	200021f0 	.word	0x200021f0
 800fb70:	200021e4 	.word	0x200021e4
 800fb74:	20002284 	.word	0x20002284
 800fb78:	20002308 	.word	0x20002308

0800fb7c <xTaskResumeAll>:
{
 800fb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800fb7e:	4b2f      	ldr	r3, [pc, #188]	; (800fc3c <xTaskResumeAll+0xc0>)
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <xTaskResumeAll+0xe>
 800fb86:	b672      	cpsid	i
 800fb88:	e7fe      	b.n	800fb88 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800fb8a:	f000 fe91 	bl	80108b0 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fb8e:	4b2b      	ldr	r3, [pc, #172]	; (800fc3c <xTaskResumeAll+0xc0>)
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	3a01      	subs	r2, #1
 800fb94:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb96:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb98:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb9a:	42a3      	cmp	r3, r4
 800fb9c:	d105      	bne.n	800fbaa <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb9e:	4b28      	ldr	r3, [pc, #160]	; (800fc40 <xTaskResumeAll+0xc4>)
 800fba0:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fba2:	4d28      	ldr	r5, [pc, #160]	; (800fc44 <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	d12a      	bne.n	800fbfe <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800fba8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fbaa:	f000 fe8d 	bl	80108c8 <vPortExitCritical>
}
 800fbae:	0020      	movs	r0, r4
 800fbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800fbb2:	0098      	lsls	r0, r3, #2
 800fbb4:	18c0      	adds	r0, r0, r3
 800fbb6:	0080      	lsls	r0, r0, #2
 800fbb8:	4b23      	ldr	r3, [pc, #140]	; (800fc48 <xTaskResumeAll+0xcc>)
 800fbba:	18c0      	adds	r0, r0, r3
 800fbbc:	0021      	movs	r1, r4
 800fbbe:	f7ff f99f 	bl	800ef00 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbc2:	4b22      	ldr	r3, [pc, #136]	; (800fc4c <xTaskResumeAll+0xd0>)
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d214      	bcs.n	800fbf8 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbce:	6833      	ldr	r3, [r6, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d016      	beq.n	800fc02 <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fbd4:	68eb      	ldr	r3, [r5, #12]
 800fbd6:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbd8:	0038      	movs	r0, r7
 800fbda:	3018      	adds	r0, #24
 800fbdc:	f7ff f9b3 	bl	800ef46 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fbe0:	1d3c      	adds	r4, r7, #4
 800fbe2:	0020      	movs	r0, r4
 800fbe4:	f7ff f9af 	bl	800ef46 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbea:	4a19      	ldr	r2, [pc, #100]	; (800fc50 <xTaskResumeAll+0xd4>)
 800fbec:	6812      	ldr	r2, [r2, #0]
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d9df      	bls.n	800fbb2 <xTaskResumeAll+0x36>
 800fbf2:	4a17      	ldr	r2, [pc, #92]	; (800fc50 <xTaskResumeAll+0xd4>)
 800fbf4:	6013      	str	r3, [r2, #0]
 800fbf6:	e7dc      	b.n	800fbb2 <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800fbf8:	4b16      	ldr	r3, [pc, #88]	; (800fc54 <xTaskResumeAll+0xd8>)
 800fbfa:	2201      	movs	r2, #1
 800fbfc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbfe:	4e11      	ldr	r6, [pc, #68]	; (800fc44 <xTaskResumeAll+0xc8>)
 800fc00:	e7e5      	b.n	800fbce <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800fc02:	4b15      	ldr	r3, [pc, #84]	; (800fc58 <xTaskResumeAll+0xdc>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d005      	beq.n	800fc16 <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fc0a:	4e13      	ldr	r6, [pc, #76]	; (800fc58 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800fc0c:	4c11      	ldr	r4, [pc, #68]	; (800fc54 <xTaskResumeAll+0xd8>)
 800fc0e:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fc10:	6833      	ldr	r3, [r6, #0]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d108      	bne.n	800fc28 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800fc16:	4b0f      	ldr	r3, [pc, #60]	; (800fc54 <xTaskResumeAll+0xd8>)
 800fc18:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fc1a:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d1c4      	bne.n	800fbaa <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800fc20:	f000 fe3a 	bl	8010898 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800fc24:	3401      	adds	r4, #1
 800fc26:	e7c0      	b.n	800fbaa <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800fc28:	f7ff ff1c 	bl	800fa64 <xTaskIncrementTick>
 800fc2c:	2800      	cmp	r0, #0
 800fc2e:	d000      	beq.n	800fc32 <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800fc30:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800fc32:	4a09      	ldr	r2, [pc, #36]	; (800fc58 <xTaskResumeAll+0xdc>)
 800fc34:	6813      	ldr	r3, [r2, #0]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	6013      	str	r3, [r2, #0]
 800fc3a:	e7e9      	b.n	800fc10 <xTaskResumeAll+0x94>
 800fc3c:	20002288 	.word	0x20002288
 800fc40:	20002280 	.word	0x20002280
 800fc44:	200022c4 	.word	0x200022c4
 800fc48:	200021f0 	.word	0x200021f0
 800fc4c:	200021e4 	.word	0x200021e4
 800fc50:	20002294 	.word	0x20002294
 800fc54:	20002308 	.word	0x20002308
 800fc58:	20002284 	.word	0x20002284

0800fc5c <vTaskDelay>:
	{
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fc60:	d016      	beq.n	800fc90 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800fc62:	4b0d      	ldr	r3, [pc, #52]	; (800fc98 <vTaskDelay+0x3c>)
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <vTaskDelay+0x12>
 800fc6a:	b672      	cpsid	i
 800fc6c:	e7fe      	b.n	800fc6c <vTaskDelay+0x10>
			vTaskSuspendAll();
 800fc6e:	f7ff fee5 	bl	800fa3c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800fc72:	4b0a      	ldr	r3, [pc, #40]	; (800fc9c <vTaskDelay+0x40>)
 800fc74:	681c      	ldr	r4, [r3, #0]
 800fc76:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fc78:	4b09      	ldr	r3, [pc, #36]	; (800fca0 <vTaskDelay+0x44>)
 800fc7a:	6818      	ldr	r0, [r3, #0]
 800fc7c:	3004      	adds	r0, #4
 800fc7e:	f7ff f962 	bl	800ef46 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fc82:	0020      	movs	r0, r4
 800fc84:	f7ff fd14 	bl	800f6b0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fc88:	f7ff ff78 	bl	800fb7c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d101      	bne.n	800fc94 <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800fc90:	f000 fe02 	bl	8010898 <vPortYield>
	}
 800fc94:	bd70      	pop	{r4, r5, r6, pc}
 800fc96:	46c0      	nop			; (mov r8, r8)
 800fc98:	20002288 	.word	0x20002288
 800fc9c:	20002304 	.word	0x20002304
 800fca0:	200021e4 	.word	0x200021e4

0800fca4 <prvIdleTask>:
{
 800fca4:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fca6:	4d16      	ldr	r5, [pc, #88]	; (800fd00 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fca8:	4e16      	ldr	r6, [pc, #88]	; (800fd04 <prvIdleTask+0x60>)
 800fcaa:	e003      	b.n	800fcb4 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fcac:	4b16      	ldr	r3, [pc, #88]	; (800fd08 <prvIdleTask+0x64>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b01      	cmp	r3, #1
 800fcb2:	d822      	bhi.n	800fcfa <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fcb4:	682b      	ldr	r3, [r5, #0]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d0f8      	beq.n	800fcac <prvIdleTask+0x8>
			vTaskSuspendAll();
 800fcba:	f7ff febf 	bl	800fa3c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fcbe:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800fcc0:	f7ff ff5c 	bl	800fb7c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800fcc4:	2c00      	cmp	r4, #0
 800fcc6:	d0f5      	beq.n	800fcb4 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800fcc8:	f000 fdf2 	bl	80108b0 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fccc:	4b0d      	ldr	r3, [pc, #52]	; (800fd04 <prvIdleTask+0x60>)
 800fcce:	68db      	ldr	r3, [r3, #12]
 800fcd0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fcd2:	1d20      	adds	r0, r4, #4
 800fcd4:	f7ff f937 	bl	800ef46 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800fcd8:	4a0c      	ldr	r2, [pc, #48]	; (800fd0c <prvIdleTask+0x68>)
 800fcda:	6813      	ldr	r3, [r2, #0]
 800fcdc:	3b01      	subs	r3, #1
 800fcde:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800fce0:	4a07      	ldr	r2, [pc, #28]	; (800fd00 <prvIdleTask+0x5c>)
 800fce2:	6813      	ldr	r3, [r2, #0]
 800fce4:	3b01      	subs	r3, #1
 800fce6:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800fce8:	f000 fdee 	bl	80108c8 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800fcec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fcee:	f000 fef7 	bl	8010ae0 <vPortFree>
		vPortFree( pxTCB );
 800fcf2:	0020      	movs	r0, r4
 800fcf4:	f000 fef4 	bl	8010ae0 <vPortFree>
 800fcf8:	e7dc      	b.n	800fcb4 <prvIdleTask+0x10>
				taskYIELD();
 800fcfa:	f000 fdcd 	bl	8010898 <vPortYield>
 800fcfe:	e7d9      	b.n	800fcb4 <prvIdleTask+0x10>
 800fd00:	20002290 	.word	0x20002290
 800fd04:	200022f0 	.word	0x200022f0
 800fd08:	200021f0 	.word	0x200021f0
 800fd0c:	20002280 	.word	0x20002280

0800fd10 <uxTaskGetSystemState>:
	{
 800fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd12:	46c6      	mov	lr, r8
 800fd14:	b500      	push	{lr}
 800fd16:	0006      	movs	r6, r0
 800fd18:	000d      	movs	r5, r1
 800fd1a:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800fd1c:	f7ff fe8e 	bl	800fa3c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fd20:	4b1e      	ldr	r3, [pc, #120]	; (800fd9c <uxTaskGetSystemState+0x8c>)
 800fd22:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800fd24:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fd26:	42ab      	cmp	r3, r5
 800fd28:	d831      	bhi.n	800fd8e <uxTaskGetSystemState+0x7e>
 800fd2a:	4d1d      	ldr	r5, [pc, #116]	; (800fda0 <uxTaskGetSystemState+0x90>)
 800fd2c:	002f      	movs	r7, r5
 800fd2e:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800fd30:	0160      	lsls	r0, r4, #5
 800fd32:	1830      	adds	r0, r6, r0
 800fd34:	2201      	movs	r2, #1
 800fd36:	0029      	movs	r1, r5
 800fd38:	f7ff fc50 	bl	800f5dc <prvListTaskWithinSingleList>
 800fd3c:	1824      	adds	r4, r4, r0
 800fd3e:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd40:	42bd      	cmp	r5, r7
 800fd42:	d1f5      	bne.n	800fd30 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800fd44:	4b17      	ldr	r3, [pc, #92]	; (800fda4 <uxTaskGetSystemState+0x94>)
 800fd46:	6819      	ldr	r1, [r3, #0]
 800fd48:	0160      	lsls	r0, r4, #5
 800fd4a:	1830      	adds	r0, r6, r0
 800fd4c:	2202      	movs	r2, #2
 800fd4e:	f7ff fc45 	bl	800f5dc <prvListTaskWithinSingleList>
 800fd52:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800fd54:	4b14      	ldr	r3, [pc, #80]	; (800fda8 <uxTaskGetSystemState+0x98>)
 800fd56:	6819      	ldr	r1, [r3, #0]
 800fd58:	0160      	lsls	r0, r4, #5
 800fd5a:	1830      	adds	r0, r6, r0
 800fd5c:	2202      	movs	r2, #2
 800fd5e:	f7ff fc3d 	bl	800f5dc <prvListTaskWithinSingleList>
 800fd62:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800fd64:	0160      	lsls	r0, r4, #5
 800fd66:	1830      	adds	r0, r6, r0
 800fd68:	2204      	movs	r2, #4
 800fd6a:	4910      	ldr	r1, [pc, #64]	; (800fdac <uxTaskGetSystemState+0x9c>)
 800fd6c:	f7ff fc36 	bl	800f5dc <prvListTaskWithinSingleList>
 800fd70:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800fd72:	0160      	lsls	r0, r4, #5
 800fd74:	1830      	adds	r0, r6, r0
 800fd76:	2203      	movs	r2, #3
 800fd78:	490d      	ldr	r1, [pc, #52]	; (800fdb0 <uxTaskGetSystemState+0xa0>)
 800fd7a:	f7ff fc2f 	bl	800f5dc <prvListTaskWithinSingleList>
 800fd7e:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800fd80:	4643      	mov	r3, r8
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d003      	beq.n	800fd8e <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fd86:	f7f8 fb5d 	bl	8008444 <ulMainGetRunTimeCounterValue>
 800fd8a:	4643      	mov	r3, r8
 800fd8c:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800fd8e:	f7ff fef5 	bl	800fb7c <xTaskResumeAll>
	}
 800fd92:	0020      	movs	r0, r4
 800fd94:	bc04      	pop	{r2}
 800fd96:	4690      	mov	r8, r2
 800fd98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd9a:	46c0      	nop			; (mov r8, r8)
 800fd9c:	20002280 	.word	0x20002280
 800fda0:	20002268 	.word	0x20002268
 800fda4:	200021e8 	.word	0x200021e8
 800fda8:	200021ec 	.word	0x200021ec
 800fdac:	200022f0 	.word	0x200022f0
 800fdb0:	200022dc 	.word	0x200022dc

0800fdb4 <vTaskSwitchContext>:
{
 800fdb4:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdb6:	4b3a      	ldr	r3, [pc, #232]	; (800fea0 <vTaskSwitchContext+0xec>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d003      	beq.n	800fdc6 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fdbe:	4b39      	ldr	r3, [pc, #228]	; (800fea4 <vTaskSwitchContext+0xf0>)
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	601a      	str	r2, [r3, #0]
}
 800fdc4:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fdc6:	4b37      	ldr	r3, [pc, #220]	; (800fea4 <vTaskSwitchContext+0xf0>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fdcc:	f7f8 fb3a 	bl	8008444 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fdd0:	4b35      	ldr	r3, [pc, #212]	; (800fea8 <vTaskSwitchContext+0xf4>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4298      	cmp	r0, r3
 800fdd6:	d905      	bls.n	800fde4 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fdd8:	4a34      	ldr	r2, [pc, #208]	; (800feac <vTaskSwitchContext+0xf8>)
 800fdda:	6812      	ldr	r2, [r2, #0]
 800fddc:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fdde:	1acb      	subs	r3, r1, r3
 800fde0:	181b      	adds	r3, r3, r0
 800fde2:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fde4:	4b30      	ldr	r3, [pc, #192]	; (800fea8 <vTaskSwitchContext+0xf4>)
 800fde6:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fde8:	4b30      	ldr	r3, [pc, #192]	; (800feac <vTaskSwitchContext+0xf8>)
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	6812      	ldr	r2, [r2, #0]
 800fdf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d805      	bhi.n	800fe02 <vTaskSwitchContext+0x4e>
 800fdf6:	4b2d      	ldr	r3, [pc, #180]	; (800feac <vTaskSwitchContext+0xf8>)
 800fdf8:	6818      	ldr	r0, [r3, #0]
 800fdfa:	6819      	ldr	r1, [r3, #0]
 800fdfc:	3134      	adds	r1, #52	; 0x34
 800fdfe:	f7fe f9af 	bl	800e160 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fe02:	4b2a      	ldr	r3, [pc, #168]	; (800feac <vTaskSwitchContext+0xf8>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe08:	2214      	movs	r2, #20
 800fe0a:	4929      	ldr	r1, [pc, #164]	; (800feb0 <vTaskSwitchContext+0xfc>)
 800fe0c:	f004 fd8a 	bl	8014924 <memcmp>
 800fe10:	2800      	cmp	r0, #0
 800fe12:	d005      	beq.n	800fe20 <vTaskSwitchContext+0x6c>
 800fe14:	4b25      	ldr	r3, [pc, #148]	; (800feac <vTaskSwitchContext+0xf8>)
 800fe16:	6818      	ldr	r0, [r3, #0]
 800fe18:	6819      	ldr	r1, [r3, #0]
 800fe1a:	3134      	adds	r1, #52	; 0x34
 800fe1c:	f7fe f9a0 	bl	800e160 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fe20:	4b24      	ldr	r3, [pc, #144]	; (800feb4 <vTaskSwitchContext+0x100>)
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	0093      	lsls	r3, r2, #2
 800fe26:	189b      	adds	r3, r3, r2
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	4a23      	ldr	r2, [pc, #140]	; (800feb8 <vTaskSwitchContext+0x104>)
 800fe2c:	589b      	ldr	r3, [r3, r2]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d115      	bne.n	800fe5e <vTaskSwitchContext+0xaa>
 800fe32:	4b20      	ldr	r3, [pc, #128]	; (800feb4 <vTaskSwitchContext+0x100>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00f      	beq.n	800fe5a <vTaskSwitchContext+0xa6>
 800fe3a:	4a1e      	ldr	r2, [pc, #120]	; (800feb4 <vTaskSwitchContext+0x100>)
 800fe3c:	4c1e      	ldr	r4, [pc, #120]	; (800feb8 <vTaskSwitchContext+0x104>)
 800fe3e:	0010      	movs	r0, r2
 800fe40:	6813      	ldr	r3, [r2, #0]
 800fe42:	3b01      	subs	r3, #1
 800fe44:	6013      	str	r3, [r2, #0]
 800fe46:	6811      	ldr	r1, [r2, #0]
 800fe48:	008b      	lsls	r3, r1, #2
 800fe4a:	185b      	adds	r3, r3, r1
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	591b      	ldr	r3, [r3, r4]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d104      	bne.n	800fe5e <vTaskSwitchContext+0xaa>
 800fe54:	6803      	ldr	r3, [r0, #0]
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1f2      	bne.n	800fe40 <vTaskSwitchContext+0x8c>
 800fe5a:	b672      	cpsid	i
 800fe5c:	e7fe      	b.n	800fe5c <vTaskSwitchContext+0xa8>
 800fe5e:	4b15      	ldr	r3, [pc, #84]	; (800feb4 <vTaskSwitchContext+0x100>)
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	4c15      	ldr	r4, [pc, #84]	; (800feb8 <vTaskSwitchContext+0x104>)
 800fe64:	0093      	lsls	r3, r2, #2
 800fe66:	1899      	adds	r1, r3, r2
 800fe68:	0089      	lsls	r1, r1, #2
 800fe6a:	1861      	adds	r1, r4, r1
 800fe6c:	6848      	ldr	r0, [r1, #4]
 800fe6e:	6840      	ldr	r0, [r0, #4]
 800fe70:	6048      	str	r0, [r1, #4]
 800fe72:	189b      	adds	r3, r3, r2
 800fe74:	009b      	lsls	r3, r3, #2
 800fe76:	3308      	adds	r3, #8
 800fe78:	191b      	adds	r3, r3, r4
 800fe7a:	4298      	cmp	r0, r3
 800fe7c:	d009      	beq.n	800fe92 <vTaskSwitchContext+0xde>
 800fe7e:	0093      	lsls	r3, r2, #2
 800fe80:	189a      	adds	r2, r3, r2
 800fe82:	0092      	lsls	r2, r2, #2
 800fe84:	4b0c      	ldr	r3, [pc, #48]	; (800feb8 <vTaskSwitchContext+0x104>)
 800fe86:	189a      	adds	r2, r3, r2
 800fe88:	6853      	ldr	r3, [r2, #4]
 800fe8a:	68da      	ldr	r2, [r3, #12]
 800fe8c:	4b07      	ldr	r3, [pc, #28]	; (800feac <vTaskSwitchContext+0xf8>)
 800fe8e:	601a      	str	r2, [r3, #0]
}
 800fe90:	e798      	b.n	800fdc4 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fe92:	6840      	ldr	r0, [r0, #4]
 800fe94:	2114      	movs	r1, #20
 800fe96:	4351      	muls	r1, r2
 800fe98:	1863      	adds	r3, r4, r1
 800fe9a:	6058      	str	r0, [r3, #4]
 800fe9c:	e7ef      	b.n	800fe7e <vTaskSwitchContext+0xca>
 800fe9e:	46c0      	nop			; (mov r8, r8)
 800fea0:	20002288 	.word	0x20002288
 800fea4:	20002308 	.word	0x20002308
 800fea8:	2000227c 	.word	0x2000227c
 800feac:	200021e4 	.word	0x200021e4
 800feb0:	0801c254 	.word	0x0801c254
 800feb4:	20002294 	.word	0x20002294
 800feb8:	200021f0 	.word	0x200021f0

0800febc <vTaskPlaceOnEventList>:
{
 800febc:	b570      	push	{r4, r5, r6, lr}
 800febe:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800fec0:	2800      	cmp	r0, #0
 800fec2:	d101      	bne.n	800fec8 <vTaskPlaceOnEventList+0xc>
 800fec4:	b672      	cpsid	i
 800fec6:	e7fe      	b.n	800fec6 <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fec8:	4d0b      	ldr	r5, [pc, #44]	; (800fef8 <vTaskPlaceOnEventList+0x3c>)
 800feca:	6829      	ldr	r1, [r5, #0]
 800fecc:	3118      	adds	r1, #24
 800fece:	f7ff f823 	bl	800ef18 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fed2:	6828      	ldr	r0, [r5, #0]
 800fed4:	3004      	adds	r0, #4
 800fed6:	f7ff f836 	bl	800ef46 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800feda:	1c63      	adds	r3, r4, #1
 800fedc:	d005      	beq.n	800feea <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800fede:	4b07      	ldr	r3, [pc, #28]	; (800fefc <vTaskPlaceOnEventList+0x40>)
 800fee0:	6818      	ldr	r0, [r3, #0]
 800fee2:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fee4:	f7ff fbe4 	bl	800f6b0 <prvAddCurrentTaskToDelayedList>
}
 800fee8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800feea:	4b03      	ldr	r3, [pc, #12]	; (800fef8 <vTaskPlaceOnEventList+0x3c>)
 800feec:	6819      	ldr	r1, [r3, #0]
 800feee:	3104      	adds	r1, #4
 800fef0:	4803      	ldr	r0, [pc, #12]	; (800ff00 <vTaskPlaceOnEventList+0x44>)
 800fef2:	f7ff f805 	bl	800ef00 <vListInsertEnd>
 800fef6:	e7f7      	b.n	800fee8 <vTaskPlaceOnEventList+0x2c>
 800fef8:	200021e4 	.word	0x200021e4
 800fefc:	20002304 	.word	0x20002304
 800ff00:	200022dc 	.word	0x200022dc

0800ff04 <vTaskPlaceOnEventListRestricted>:
	{
 800ff04:	b570      	push	{r4, r5, r6, lr}
 800ff06:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d101      	bne.n	800ff10 <vTaskPlaceOnEventListRestricted+0xc>
 800ff0c:	b672      	cpsid	i
 800ff0e:	e7fe      	b.n	800ff0e <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff10:	4c07      	ldr	r4, [pc, #28]	; (800ff30 <vTaskPlaceOnEventListRestricted+0x2c>)
 800ff12:	6821      	ldr	r1, [r4, #0]
 800ff14:	3118      	adds	r1, #24
 800ff16:	f7fe fff3 	bl	800ef00 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ff1a:	6820      	ldr	r0, [r4, #0]
 800ff1c:	3004      	adds	r0, #4
 800ff1e:	f7ff f812 	bl	800ef46 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800ff22:	4b04      	ldr	r3, [pc, #16]	; (800ff34 <vTaskPlaceOnEventListRestricted+0x30>)
 800ff24:	6818      	ldr	r0, [r3, #0]
 800ff26:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ff28:	f7ff fbc2 	bl	800f6b0 <prvAddCurrentTaskToDelayedList>
	}
 800ff2c:	bd70      	pop	{r4, r5, r6, pc}
 800ff2e:	46c0      	nop			; (mov r8, r8)
 800ff30:	200021e4 	.word	0x200021e4
 800ff34:	20002304 	.word	0x20002304

0800ff38 <xTaskRemoveFromEventList>:
{
 800ff38:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ff3a:	68c3      	ldr	r3, [r0, #12]
 800ff3c:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ff3e:	2d00      	cmp	r5, #0
 800ff40:	d101      	bne.n	800ff46 <xTaskRemoveFromEventList+0xe>
 800ff42:	b672      	cpsid	i
 800ff44:	e7fe      	b.n	800ff44 <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff46:	002c      	movs	r4, r5
 800ff48:	3418      	adds	r4, #24
 800ff4a:	0020      	movs	r0, r4
 800ff4c:	f7fe fffb 	bl	800ef46 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff50:	4b13      	ldr	r3, [pc, #76]	; (800ffa0 <xTaskRemoveFromEventList+0x68>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d11e      	bne.n	800ff96 <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ff58:	1d2c      	adds	r4, r5, #4
 800ff5a:	0020      	movs	r0, r4
 800ff5c:	f7fe fff3 	bl	800ef46 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff60:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ff62:	4a10      	ldr	r2, [pc, #64]	; (800ffa4 <xTaskRemoveFromEventList+0x6c>)
 800ff64:	6812      	ldr	r2, [r2, #0]
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d901      	bls.n	800ff6e <xTaskRemoveFromEventList+0x36>
 800ff6a:	4a0e      	ldr	r2, [pc, #56]	; (800ffa4 <xTaskRemoveFromEventList+0x6c>)
 800ff6c:	6013      	str	r3, [r2, #0]
 800ff6e:	0098      	lsls	r0, r3, #2
 800ff70:	18c0      	adds	r0, r0, r3
 800ff72:	0080      	lsls	r0, r0, #2
 800ff74:	4b0c      	ldr	r3, [pc, #48]	; (800ffa8 <xTaskRemoveFromEventList+0x70>)
 800ff76:	18c0      	adds	r0, r0, r3
 800ff78:	0021      	movs	r1, r4
 800ff7a:	f7fe ffc1 	bl	800ef00 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff7e:	4b0b      	ldr	r3, [pc, #44]	; (800ffac <xTaskRemoveFromEventList+0x74>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ff84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ff86:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d903      	bls.n	800ff94 <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800ff8c:	4b08      	ldr	r3, [pc, #32]	; (800ffb0 <xTaskRemoveFromEventList+0x78>)
 800ff8e:	2201      	movs	r2, #1
 800ff90:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ff92:	3001      	adds	r0, #1
}
 800ff94:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff96:	0021      	movs	r1, r4
 800ff98:	4806      	ldr	r0, [pc, #24]	; (800ffb4 <xTaskRemoveFromEventList+0x7c>)
 800ff9a:	f7fe ffb1 	bl	800ef00 <vListInsertEnd>
 800ff9e:	e7ee      	b.n	800ff7e <xTaskRemoveFromEventList+0x46>
 800ffa0:	20002288 	.word	0x20002288
 800ffa4:	20002294 	.word	0x20002294
 800ffa8:	200021f0 	.word	0x200021f0
 800ffac:	200021e4 	.word	0x200021e4
 800ffb0:	20002308 	.word	0x20002308
 800ffb4:	200022c4 	.word	0x200022c4

0800ffb8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	d006      	beq.n	800ffca <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffbc:	4b04      	ldr	r3, [pc, #16]	; (800ffd0 <vTaskSetTimeOutState+0x18>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffc2:	4b04      	ldr	r3, [pc, #16]	; (800ffd4 <vTaskSetTimeOutState+0x1c>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	6043      	str	r3, [r0, #4]
}
 800ffc8:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ffca:	b672      	cpsid	i
 800ffcc:	e7fe      	b.n	800ffcc <vTaskSetTimeOutState+0x14>
 800ffce:	46c0      	nop			; (mov r8, r8)
 800ffd0:	200022c0 	.word	0x200022c0
 800ffd4:	20002304 	.word	0x20002304

0800ffd8 <xTaskCheckForTimeOut>:
{
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	0004      	movs	r4, r0
 800ffdc:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d003      	beq.n	800ffea <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800ffe2:	2900      	cmp	r1, #0
 800ffe4:	d103      	bne.n	800ffee <xTaskCheckForTimeOut+0x16>
 800ffe6:	b672      	cpsid	i
 800ffe8:	e7fe      	b.n	800ffe8 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800ffea:	b672      	cpsid	i
 800ffec:	e7fe      	b.n	800ffec <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800ffee:	f000 fc5f 	bl	80108b0 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fff2:	4b10      	ldr	r3, [pc, #64]	; (8010034 <xTaskCheckForTimeOut+0x5c>)
 800fff4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fff6:	6833      	ldr	r3, [r6, #0]
 800fff8:	1c59      	adds	r1, r3, #1
 800fffa:	d019      	beq.n	8010030 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fffc:	490e      	ldr	r1, [pc, #56]	; (8010038 <xTaskCheckForTimeOut+0x60>)
 800fffe:	6809      	ldr	r1, [r1, #0]
 8010000:	6820      	ldr	r0, [r4, #0]
 8010002:	4288      	cmp	r0, r1
 8010004:	d003      	beq.n	801000e <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 8010006:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010008:	6861      	ldr	r1, [r4, #4]
 801000a:	4291      	cmp	r1, r2
 801000c:	d904      	bls.n	8010018 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 801000e:	6861      	ldr	r1, [r4, #4]
 8010010:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 8010012:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8010014:	4283      	cmp	r3, r0
 8010016:	d803      	bhi.n	8010020 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 8010018:	f000 fc56 	bl	80108c8 <vPortExitCritical>
}
 801001c:	0028      	movs	r0, r5
 801001e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8010020:	1a9b      	subs	r3, r3, r2
 8010022:	185b      	adds	r3, r3, r1
 8010024:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8010026:	0020      	movs	r0, r4
 8010028:	f7ff ffc6 	bl	800ffb8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 801002c:	2500      	movs	r5, #0
 801002e:	e7f3      	b.n	8010018 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 8010030:	2500      	movs	r5, #0
 8010032:	e7f1      	b.n	8010018 <xTaskCheckForTimeOut+0x40>
 8010034:	20002304 	.word	0x20002304
 8010038:	200022c0 	.word	0x200022c0

0801003c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 801003c:	4b01      	ldr	r3, [pc, #4]	; (8010044 <vTaskMissedYield+0x8>)
 801003e:	2201      	movs	r2, #1
 8010040:	601a      	str	r2, [r3, #0]
}
 8010042:	4770      	bx	lr
 8010044:	20002308 	.word	0x20002308

08010048 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010048:	4b05      	ldr	r3, [pc, #20]	; (8010060 <xTaskGetSchedulerState+0x18>)
 801004a:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 801004c:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 801004e:	2b00      	cmp	r3, #0
 8010050:	d004      	beq.n	801005c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010052:	4b04      	ldr	r3, [pc, #16]	; (8010064 <xTaskGetSchedulerState+0x1c>)
 8010054:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8010056:	4243      	negs	r3, r0
 8010058:	4158      	adcs	r0, r3
 801005a:	0040      	lsls	r0, r0, #1
	}
 801005c:	4770      	bx	lr
 801005e:	46c0      	nop			; (mov r8, r8)
 8010060:	200022d8 	.word	0x200022d8
 8010064:	20002288 	.word	0x20002288

08010068 <vTaskPriorityInherit>:
	{
 8010068:	b570      	push	{r4, r5, r6, lr}
 801006a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 801006c:	d01a      	beq.n	80100a4 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 801006e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010070:	4b19      	ldr	r3, [pc, #100]	; (80100d8 <vTaskPriorityInherit+0x70>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010076:	429a      	cmp	r2, r3
 8010078:	d214      	bcs.n	80100a4 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801007a:	6983      	ldr	r3, [r0, #24]
 801007c:	2b00      	cmp	r3, #0
 801007e:	db05      	blt.n	801008c <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010080:	4b15      	ldr	r3, [pc, #84]	; (80100d8 <vTaskPriorityInherit+0x70>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010086:	2307      	movs	r3, #7
 8010088:	1a5b      	subs	r3, r3, r1
 801008a:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 801008c:	0093      	lsls	r3, r2, #2
 801008e:	189b      	adds	r3, r3, r2
 8010090:	009b      	lsls	r3, r3, #2
 8010092:	4a12      	ldr	r2, [pc, #72]	; (80100dc <vTaskPriorityInherit+0x74>)
 8010094:	189b      	adds	r3, r3, r2
 8010096:	6962      	ldr	r2, [r4, #20]
 8010098:	429a      	cmp	r2, r3
 801009a:	d004      	beq.n	80100a6 <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 801009c:	4b0e      	ldr	r3, [pc, #56]	; (80100d8 <vTaskPriorityInherit+0x70>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a2:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80100a4:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80100a6:	1d25      	adds	r5, r4, #4
 80100a8:	0028      	movs	r0, r5
 80100aa:	f7fe ff4c 	bl	800ef46 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100ae:	4b0a      	ldr	r3, [pc, #40]	; (80100d8 <vTaskPriorityInherit+0x70>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b4:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80100b6:	4a0a      	ldr	r2, [pc, #40]	; (80100e0 <vTaskPriorityInherit+0x78>)
 80100b8:	6812      	ldr	r2, [r2, #0]
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d808      	bhi.n	80100d0 <vTaskPriorityInherit+0x68>
 80100be:	0098      	lsls	r0, r3, #2
 80100c0:	18c0      	adds	r0, r0, r3
 80100c2:	0080      	lsls	r0, r0, #2
 80100c4:	4b05      	ldr	r3, [pc, #20]	; (80100dc <vTaskPriorityInherit+0x74>)
 80100c6:	18c0      	adds	r0, r0, r3
 80100c8:	0029      	movs	r1, r5
 80100ca:	f7fe ff19 	bl	800ef00 <vListInsertEnd>
	}
 80100ce:	e7e9      	b.n	80100a4 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 80100d0:	4a03      	ldr	r2, [pc, #12]	; (80100e0 <vTaskPriorityInherit+0x78>)
 80100d2:	6013      	str	r3, [r2, #0]
 80100d4:	e7f3      	b.n	80100be <vTaskPriorityInherit+0x56>
 80100d6:	46c0      	nop			; (mov r8, r8)
 80100d8:	200021e4 	.word	0x200021e4
 80100dc:	200021f0 	.word	0x200021f0
 80100e0:	20002294 	.word	0x20002294

080100e4 <xTaskPriorityDisinherit>:
	{
 80100e4:	b570      	push	{r4, r5, r6, lr}
 80100e6:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80100e8:	d02b      	beq.n	8010142 <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 80100ea:	4b18      	ldr	r3, [pc, #96]	; (801014c <xTaskPriorityDisinherit+0x68>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4283      	cmp	r3, r0
 80100f0:	d001      	beq.n	80100f6 <xTaskPriorityDisinherit+0x12>
 80100f2:	b672      	cpsid	i
 80100f4:	e7fe      	b.n	80100f4 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80100f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d101      	bne.n	8010100 <xTaskPriorityDisinherit+0x1c>
 80100fc:	b672      	cpsid	i
 80100fe:	e7fe      	b.n	80100fe <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8010100:	3b01      	subs	r3, #1
 8010102:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010104:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010106:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8010108:	428a      	cmp	r2, r1
 801010a:	d01c      	beq.n	8010146 <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 801010c:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801010e:	4283      	cmp	r3, r0
 8010110:	d118      	bne.n	8010144 <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010112:	1d25      	adds	r5, r4, #4
 8010114:	0028      	movs	r0, r5
 8010116:	f7fe ff16 	bl	800ef46 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801011a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801011c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801011e:	2207      	movs	r2, #7
 8010120:	1ad2      	subs	r2, r2, r3
 8010122:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010124:	4a0a      	ldr	r2, [pc, #40]	; (8010150 <xTaskPriorityDisinherit+0x6c>)
 8010126:	6812      	ldr	r2, [r2, #0]
 8010128:	4293      	cmp	r3, r2
 801012a:	d901      	bls.n	8010130 <xTaskPriorityDisinherit+0x4c>
 801012c:	4a08      	ldr	r2, [pc, #32]	; (8010150 <xTaskPriorityDisinherit+0x6c>)
 801012e:	6013      	str	r3, [r2, #0]
 8010130:	2014      	movs	r0, #20
 8010132:	4358      	muls	r0, r3
 8010134:	4b07      	ldr	r3, [pc, #28]	; (8010154 <xTaskPriorityDisinherit+0x70>)
 8010136:	18c0      	adds	r0, r0, r3
 8010138:	0029      	movs	r1, r5
 801013a:	f7fe fee1 	bl	800ef00 <vListInsertEnd>
					xReturn = pdTRUE;
 801013e:	2001      	movs	r0, #1
 8010140:	e000      	b.n	8010144 <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 8010142:	2000      	movs	r0, #0
	}
 8010144:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 8010146:	2000      	movs	r0, #0
 8010148:	e7fc      	b.n	8010144 <xTaskPriorityDisinherit+0x60>
 801014a:	46c0      	nop			; (mov r8, r8)
 801014c:	200021e4 	.word	0x200021e4
 8010150:	20002294 	.word	0x20002294
 8010154:	200021f0 	.word	0x200021f0

08010158 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8010158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801015a:	b085      	sub	sp, #20
 801015c:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 801015e:	2300      	movs	r3, #0
 8010160:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010162:	4b2b      	ldr	r3, [pc, #172]	; (8010210 <vTaskList+0xb8>)
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010168:	6818      	ldr	r0, [r3, #0]
 801016a:	0140      	lsls	r0, r0, #5
 801016c:	f000 fc22 	bl	80109b4 <pvPortMalloc>
 8010170:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 8010172:	d04a      	beq.n	801020a <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8010174:	9903      	ldr	r1, [sp, #12]
 8010176:	2200      	movs	r2, #0
 8010178:	f7ff fdca 	bl	800fd10 <uxTaskGetSystemState>
 801017c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 801017e:	2300      	movs	r3, #0
 8010180:	9302      	str	r3, [sp, #8]
 8010182:	9a02      	ldr	r2, [sp, #8]
 8010184:	9b03      	ldr	r3, [sp, #12]
 8010186:	429a      	cmp	r2, r3
 8010188:	d23c      	bcs.n	8010204 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 801018a:	4e22      	ldr	r6, [pc, #136]	; (8010214 <vTaskList+0xbc>)
 801018c:	e027      	b.n	80101de <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 801018e:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010190:	2b01      	cmp	r3, #1
 8010192:	d133      	bne.n	80101fc <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010194:	9b02      	ldr	r3, [sp, #8]
 8010196:	015b      	lsls	r3, r3, #5
 8010198:	18fb      	adds	r3, r7, r3
 801019a:	6859      	ldr	r1, [r3, #4]
 801019c:	0020      	movs	r0, r4
 801019e:	f7ff fab1 	bl	800f704 <prvWriteNameToBuffer>
 80101a2:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80101a4:	9b02      	ldr	r3, [sp, #8]
 80101a6:	9a02      	ldr	r2, [sp, #8]
 80101a8:	9902      	ldr	r1, [sp, #8]
 80101aa:	015b      	lsls	r3, r3, #5
 80101ac:	18fb      	adds	r3, r7, r3
 80101ae:	691b      	ldr	r3, [r3, #16]
 80101b0:	0149      	lsls	r1, r1, #5
 80101b2:	1879      	adds	r1, r7, r1
 80101b4:	6889      	ldr	r1, [r1, #8]
 80101b6:	9101      	str	r1, [sp, #4]
 80101b8:	0152      	lsls	r2, r2, #5
 80101ba:	18ba      	adds	r2, r7, r2
 80101bc:	8b92      	ldrh	r2, [r2, #28]
 80101be:	9200      	str	r2, [sp, #0]
 80101c0:	002a      	movs	r2, r5
 80101c2:	0031      	movs	r1, r6
 80101c4:	f004 fdf2 	bl	8014dac <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 80101c8:	0020      	movs	r0, r4
 80101ca:	f7ef ffa5 	bl	8000118 <strlen>
 80101ce:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 80101d0:	9b02      	ldr	r3, [sp, #8]
 80101d2:	3301      	adds	r3, #1
 80101d4:	9302      	str	r3, [sp, #8]
 80101d6:	9a02      	ldr	r2, [sp, #8]
 80101d8:	9b03      	ldr	r3, [sp, #12]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d212      	bcs.n	8010204 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101de:	9b02      	ldr	r3, [sp, #8]
 80101e0:	015b      	lsls	r3, r3, #5
 80101e2:	18fb      	adds	r3, r7, r3
 80101e4:	7b1b      	ldrb	r3, [r3, #12]
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d00a      	beq.n	8010200 <vTaskList+0xa8>
 80101ea:	b2da      	uxtb	r2, r3
 80101ec:	2a02      	cmp	r2, #2
 80101ee:	d9ce      	bls.n	801018e <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80101f0:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101f2:	2b03      	cmp	r3, #3
 80101f4:	d0ce      	beq.n	8010194 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80101f6:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101f8:	2b04      	cmp	r3, #4
 80101fa:	d0cb      	beq.n	8010194 <vTaskList+0x3c>
										cStatus = 0x00;
 80101fc:	2500      	movs	r5, #0
										break;
 80101fe:	e7c9      	b.n	8010194 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8010200:	2542      	movs	r5, #66	; 0x42
 8010202:	e7c7      	b.n	8010194 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010204:	0038      	movs	r0, r7
 8010206:	f000 fc6b 	bl	8010ae0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801020a:	b005      	add	sp, #20
 801020c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801020e:	46c0      	nop			; (mov r8, r8)
 8010210:	20002280 	.word	0x20002280
 8010214:	0801c280 	.word	0x0801c280

08010218 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8010218:	b570      	push	{r4, r5, r6, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 801021e:	2300      	movs	r3, #0
 8010220:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010222:	4b26      	ldr	r3, [pc, #152]	; (80102bc <vTaskGetRunTimeStats+0xa4>)
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010228:	6818      	ldr	r0, [r3, #0]
 801022a:	0140      	lsls	r0, r0, #5
 801022c:	f000 fbc2 	bl	80109b4 <pvPortMalloc>
 8010230:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 8010232:	d014      	beq.n	801025e <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8010234:	9903      	ldr	r1, [sp, #12]
 8010236:	aa01      	add	r2, sp, #4
 8010238:	f7ff fd6a 	bl	800fd10 <uxTaskGetSystemState>
 801023c:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 801023e:	2164      	movs	r1, #100	; 0x64
 8010240:	9801      	ldr	r0, [sp, #4]
 8010242:	f7ef ff85 	bl	8000150 <__udivsi3>
 8010246:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8010248:	2800      	cmp	r0, #0
 801024a:	d005      	beq.n	8010258 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 801024c:	2300      	movs	r3, #0
 801024e:	9302      	str	r3, [sp, #8]
 8010250:	9a02      	ldr	r2, [sp, #8]
 8010252:	9b03      	ldr	r3, [sp, #12]
 8010254:	429a      	cmp	r2, r3
 8010256:	d316      	bcc.n	8010286 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010258:	0030      	movs	r0, r6
 801025a:	f000 fc41 	bl	8010ae0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801025e:	b004      	add	sp, #16
 8010260:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8010262:	9b02      	ldr	r3, [sp, #8]
 8010264:	015b      	lsls	r3, r3, #5
 8010266:	18f3      	adds	r3, r6, r3
 8010268:	699a      	ldr	r2, [r3, #24]
 801026a:	4915      	ldr	r1, [pc, #84]	; (80102c0 <vTaskGetRunTimeStats+0xa8>)
 801026c:	f004 fd9e 	bl	8014dac <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8010270:	0020      	movs	r0, r4
 8010272:	f7ef ff51 	bl	8000118 <strlen>
 8010276:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010278:	9b02      	ldr	r3, [sp, #8]
 801027a:	3301      	adds	r3, #1
 801027c:	9302      	str	r3, [sp, #8]
 801027e:	9a02      	ldr	r2, [sp, #8]
 8010280:	9b03      	ldr	r3, [sp, #12]
 8010282:	429a      	cmp	r2, r3
 8010284:	d2e8      	bcs.n	8010258 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010286:	9b02      	ldr	r3, [sp, #8]
 8010288:	015b      	lsls	r3, r3, #5
 801028a:	18f3      	adds	r3, r6, r3
 801028c:	9901      	ldr	r1, [sp, #4]
 801028e:	6998      	ldr	r0, [r3, #24]
 8010290:	f7ef ff5e 	bl	8000150 <__udivsi3>
 8010294:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010296:	9b02      	ldr	r3, [sp, #8]
 8010298:	015b      	lsls	r3, r3, #5
 801029a:	18f3      	adds	r3, r6, r3
 801029c:	6859      	ldr	r1, [r3, #4]
 801029e:	0020      	movs	r0, r4
 80102a0:	f7ff fa30 	bl	800f704 <prvWriteNameToBuffer>
 80102a4:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 80102a6:	2d00      	cmp	r5, #0
 80102a8:	d0db      	beq.n	8010262 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80102aa:	9b02      	ldr	r3, [sp, #8]
 80102ac:	015b      	lsls	r3, r3, #5
 80102ae:	18f3      	adds	r3, r6, r3
 80102b0:	699a      	ldr	r2, [r3, #24]
 80102b2:	002b      	movs	r3, r5
 80102b4:	4903      	ldr	r1, [pc, #12]	; (80102c4 <vTaskGetRunTimeStats+0xac>)
 80102b6:	f004 fd79 	bl	8014dac <sprintf>
 80102ba:	e7d9      	b.n	8010270 <vTaskGetRunTimeStats+0x58>
 80102bc:	20002280 	.word	0x20002280
 80102c0:	0801c274 	.word	0x0801c274
 80102c4:	0801c268 	.word	0x0801c268

080102c8 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80102c8:	4b05      	ldr	r3, [pc, #20]	; (80102e0 <pvTaskIncrementMutexHeldCount+0x18>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d004      	beq.n	80102da <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80102d0:	4b03      	ldr	r3, [pc, #12]	; (80102e0 <pvTaskIncrementMutexHeldCount+0x18>)
 80102d2:	681a      	ldr	r2, [r3, #0]
 80102d4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80102d6:	3301      	adds	r3, #1
 80102d8:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 80102da:	4b01      	ldr	r3, [pc, #4]	; (80102e0 <pvTaskIncrementMutexHeldCount+0x18>)
 80102dc:	6818      	ldr	r0, [r3, #0]
	}
 80102de:	4770      	bx	lr
 80102e0:	200021e4 	.word	0x200021e4

080102e4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80102e4:	b570      	push	{r4, r5, r6, lr}
 80102e6:	0005      	movs	r5, r0
 80102e8:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80102ea:	f000 fae1 	bl	80108b0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80102ee:	4b20      	ldr	r3, [pc, #128]	; (8010370 <ulTaskNotifyTake+0x8c>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d106      	bne.n	8010306 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80102f8:	4b1d      	ldr	r3, [pc, #116]	; (8010370 <ulTaskNotifyTake+0x8c>)
 80102fa:	681a      	ldr	r2, [r3, #0]
 80102fc:	235c      	movs	r3, #92	; 0x5c
 80102fe:	2101      	movs	r1, #1
 8010300:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 8010302:	2c00      	cmp	r4, #0
 8010304:	d118      	bne.n	8010338 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010306:	f000 fadf 	bl	80108c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 801030a:	f000 fad1 	bl	80108b0 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801030e:	4b18      	ldr	r3, [pc, #96]	; (8010370 <ulTaskNotifyTake+0x8c>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 8010314:	2c00      	cmp	r4, #0
 8010316:	d006      	beq.n	8010326 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 8010318:	2d00      	cmp	r5, #0
 801031a:	d123      	bne.n	8010364 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 801031c:	4b14      	ldr	r3, [pc, #80]	; (8010370 <ulTaskNotifyTake+0x8c>)
 801031e:	681a      	ldr	r2, [r3, #0]
 8010320:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8010322:	3b01      	subs	r3, #1
 8010324:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8010326:	4b12      	ldr	r3, [pc, #72]	; (8010370 <ulTaskNotifyTake+0x8c>)
 8010328:	681a      	ldr	r2, [r3, #0]
 801032a:	235c      	movs	r3, #92	; 0x5c
 801032c:	2100      	movs	r1, #0
 801032e:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 8010330:	f000 faca 	bl	80108c8 <vPortExitCritical>

		return ulReturn;
	}
 8010334:	0020      	movs	r0, r4
 8010336:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010338:	4b0d      	ldr	r3, [pc, #52]	; (8010370 <ulTaskNotifyTake+0x8c>)
 801033a:	6818      	ldr	r0, [r3, #0]
 801033c:	3004      	adds	r0, #4
 801033e:	f7fe fe02 	bl	800ef46 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 8010342:	1c63      	adds	r3, r4, #1
 8010344:	d007      	beq.n	8010356 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 8010346:	4b0b      	ldr	r3, [pc, #44]	; (8010374 <ulTaskNotifyTake+0x90>)
 8010348:	6818      	ldr	r0, [r3, #0]
 801034a:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 801034c:	f7ff f9b0 	bl	800f6b0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8010350:	f000 faa2 	bl	8010898 <vPortYield>
 8010354:	e7d7      	b.n	8010306 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010356:	4b06      	ldr	r3, [pc, #24]	; (8010370 <ulTaskNotifyTake+0x8c>)
 8010358:	6819      	ldr	r1, [r3, #0]
 801035a:	3104      	adds	r1, #4
 801035c:	4806      	ldr	r0, [pc, #24]	; (8010378 <ulTaskNotifyTake+0x94>)
 801035e:	f7fe fdcf 	bl	800ef00 <vListInsertEnd>
 8010362:	e7f5      	b.n	8010350 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010364:	4b02      	ldr	r3, [pc, #8]	; (8010370 <ulTaskNotifyTake+0x8c>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2200      	movs	r2, #0
 801036a:	659a      	str	r2, [r3, #88]	; 0x58
 801036c:	e7db      	b.n	8010326 <ulTaskNotifyTake+0x42>
 801036e:	46c0      	nop			; (mov r8, r8)
 8010370:	200021e4 	.word	0x200021e4
 8010374:	20002304 	.word	0x20002304
 8010378:	200022dc 	.word	0x200022dc

0801037c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037e:	0004      	movs	r4, r0
 8010380:	000e      	movs	r6, r1
 8010382:	0015      	movs	r5, r2
 8010384:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 8010386:	2800      	cmp	r0, #0
 8010388:	d101      	bne.n	801038e <xTaskGenericNotify+0x12>
 801038a:	b672      	cpsid	i
 801038c:	e7fe      	b.n	801038c <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 801038e:	f000 fa8f 	bl	80108b0 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8010392:	2f00      	cmp	r7, #0
 8010394:	d001      	beq.n	801039a <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8010396:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010398:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 801039a:	225c      	movs	r2, #92	; 0x5c
 801039c:	5ca3      	ldrb	r3, [r4, r2]
 801039e:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 80103a0:	2102      	movs	r1, #2
 80103a2:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 80103a4:	2d02      	cmp	r5, #2
 80103a6:	d015      	beq.n	80103d4 <xTaskGenericNotify+0x58>
 80103a8:	d907      	bls.n	80103ba <xTaskGenericNotify+0x3e>
 80103aa:	2d03      	cmp	r5, #3
 80103ac:	d016      	beq.n	80103dc <xTaskGenericNotify+0x60>
 80103ae:	2d04      	cmp	r5, #4
 80103b0:	d105      	bne.n	80103be <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 80103b2:	2b02      	cmp	r3, #2
 80103b4:	d035      	beq.n	8010422 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80103b6:	65a6      	str	r6, [r4, #88]	; 0x58
 80103b8:	e001      	b.n	80103be <xTaskGenericNotify+0x42>
			switch( eAction )
 80103ba:	2d01      	cmp	r5, #1
 80103bc:	d006      	beq.n	80103cc <xTaskGenericNotify+0x50>
 80103be:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d00d      	beq.n	80103e0 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80103c4:	f000 fa80 	bl	80108c8 <vPortExitCritical>

		return xReturn;
	}
 80103c8:	0028      	movs	r0, r5
 80103ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 80103cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80103ce:	4316      	orrs	r6, r2
 80103d0:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 80103d2:	e7f4      	b.n	80103be <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 80103d4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80103d6:	3201      	adds	r2, #1
 80103d8:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 80103da:	e7f0      	b.n	80103be <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 80103dc:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 80103de:	e7ee      	b.n	80103be <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80103e0:	1d25      	adds	r5, r4, #4
 80103e2:	0028      	movs	r0, r5
 80103e4:	f7fe fdaf 	bl	800ef46 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80103e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80103ea:	4a0f      	ldr	r2, [pc, #60]	; (8010428 <xTaskGenericNotify+0xac>)
 80103ec:	6812      	ldr	r2, [r2, #0]
 80103ee:	4293      	cmp	r3, r2
 80103f0:	d901      	bls.n	80103f6 <xTaskGenericNotify+0x7a>
 80103f2:	4a0d      	ldr	r2, [pc, #52]	; (8010428 <xTaskGenericNotify+0xac>)
 80103f4:	6013      	str	r3, [r2, #0]
 80103f6:	2014      	movs	r0, #20
 80103f8:	4358      	muls	r0, r3
 80103fa:	4b0c      	ldr	r3, [pc, #48]	; (801042c <xTaskGenericNotify+0xb0>)
 80103fc:	18c0      	adds	r0, r0, r3
 80103fe:	0029      	movs	r1, r5
 8010400:	f7fe fd7e 	bl	800ef00 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010404:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8010406:	2b00      	cmp	r3, #0
 8010408:	d001      	beq.n	801040e <xTaskGenericNotify+0x92>
 801040a:	b672      	cpsid	i
 801040c:	e7fe      	b.n	801040c <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801040e:	4b08      	ldr	r3, [pc, #32]	; (8010430 <xTaskGenericNotify+0xb4>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010416:	2501      	movs	r5, #1
 8010418:	429a      	cmp	r2, r3
 801041a:	d9d3      	bls.n	80103c4 <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 801041c:	f000 fa3c 	bl	8010898 <vPortYield>
 8010420:	e7d0      	b.n	80103c4 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 8010422:	2500      	movs	r5, #0
 8010424:	e7ce      	b.n	80103c4 <xTaskGenericNotify+0x48>
 8010426:	46c0      	nop			; (mov r8, r8)
 8010428:	20002294 	.word	0x20002294
 801042c:	200021f0 	.word	0x200021f0
 8010430:	200021e4 	.word	0x200021e4

08010434 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010434:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010436:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010438:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 801043a:	4291      	cmp	r1, r2
 801043c:	d80b      	bhi.n	8010456 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 801043e:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010440:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010442:	6983      	ldr	r3, [r0, #24]
 8010444:	429a      	cmp	r2, r3
 8010446:	d211      	bcs.n	801046c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010448:	1d01      	adds	r1, r0, #4
 801044a:	4b09      	ldr	r3, [pc, #36]	; (8010470 <prvInsertTimerInActiveList+0x3c>)
 801044c:	6818      	ldr	r0, [r3, #0]
 801044e:	f7fe fd63 	bl	800ef18 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010452:	2400      	movs	r4, #0
 8010454:	e00a      	b.n	801046c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010456:	429a      	cmp	r2, r3
 8010458:	d202      	bcs.n	8010460 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801045a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801045c:	4299      	cmp	r1, r3
 801045e:	d205      	bcs.n	801046c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010460:	1d01      	adds	r1, r0, #4
 8010462:	4b04      	ldr	r3, [pc, #16]	; (8010474 <prvInsertTimerInActiveList+0x40>)
 8010464:	6818      	ldr	r0, [r3, #0]
 8010466:	f7fe fd57 	bl	800ef18 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801046a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 801046c:	0020      	movs	r0, r4
 801046e:	bd10      	pop	{r4, pc}
 8010470:	20002310 	.word	0x20002310
 8010474:	2000230c 	.word	0x2000230c

08010478 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010478:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801047a:	f000 fa19 	bl	80108b0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801047e:	4b11      	ldr	r3, [pc, #68]	; (80104c4 <prvCheckForValidListAndQueue+0x4c>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d002      	beq.n	801048c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010486:	f000 fa1f 	bl	80108c8 <vPortExitCritical>
}
 801048a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 801048c:	4d0e      	ldr	r5, [pc, #56]	; (80104c8 <prvCheckForValidListAndQueue+0x50>)
 801048e:	0028      	movs	r0, r5
 8010490:	f7fe fd28 	bl	800eee4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010494:	4c0d      	ldr	r4, [pc, #52]	; (80104cc <prvCheckForValidListAndQueue+0x54>)
 8010496:	0020      	movs	r0, r4
 8010498:	f7fe fd24 	bl	800eee4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801049c:	4b0c      	ldr	r3, [pc, #48]	; (80104d0 <prvCheckForValidListAndQueue+0x58>)
 801049e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80104a0:	4b0c      	ldr	r3, [pc, #48]	; (80104d4 <prvCheckForValidListAndQueue+0x5c>)
 80104a2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80104a4:	2200      	movs	r2, #0
 80104a6:	2110      	movs	r1, #16
 80104a8:	2004      	movs	r0, #4
 80104aa:	f7fe fe26 	bl	800f0fa <xQueueGenericCreate>
 80104ae:	4b05      	ldr	r3, [pc, #20]	; (80104c4 <prvCheckForValidListAndQueue+0x4c>)
 80104b0:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 80104b2:	2800      	cmp	r0, #0
 80104b4:	d101      	bne.n	80104ba <prvCheckForValidListAndQueue+0x42>
 80104b6:	b672      	cpsid	i
 80104b8:	e7fe      	b.n	80104b8 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80104ba:	4907      	ldr	r1, [pc, #28]	; (80104d8 <prvCheckForValidListAndQueue+0x60>)
 80104bc:	f7ff f856 	bl	800f56c <vQueueAddToRegistry>
 80104c0:	e7e1      	b.n	8010486 <prvCheckForValidListAndQueue+0xe>
 80104c2:	46c0      	nop			; (mov r8, r8)
 80104c4:	20002340 	.word	0x20002340
 80104c8:	20002314 	.word	0x20002314
 80104cc:	20002328 	.word	0x20002328
 80104d0:	2000230c 	.word	0x2000230c
 80104d4:	20002310 	.word	0x20002310
 80104d8:	0801c2c0 	.word	0x0801c2c0

080104dc <xTimerCreateTimerTask>:
{
 80104dc:	b500      	push	{lr}
 80104de:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 80104e0:	f7ff ffca 	bl	8010478 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80104e4:	4b0a      	ldr	r3, [pc, #40]	; (8010510 <xTimerCreateTimerTask+0x34>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d00d      	beq.n	8010508 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80104ec:	2300      	movs	r3, #0
 80104ee:	9303      	str	r3, [sp, #12]
 80104f0:	9302      	str	r3, [sp, #8]
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	3303      	adds	r3, #3
 80104f6:	9300      	str	r3, [sp, #0]
 80104f8:	2300      	movs	r3, #0
 80104fa:	22a0      	movs	r2, #160	; 0xa0
 80104fc:	4905      	ldr	r1, [pc, #20]	; (8010514 <xTimerCreateTimerTask+0x38>)
 80104fe:	4806      	ldr	r0, [pc, #24]	; (8010518 <xTimerCreateTimerTask+0x3c>)
 8010500:	f7ff f918 	bl	800f734 <xTaskGenericCreate>
	configASSERT( xReturn );
 8010504:	2800      	cmp	r0, #0
 8010506:	d101      	bne.n	801050c <xTimerCreateTimerTask+0x30>
 8010508:	b672      	cpsid	i
 801050a:	e7fe      	b.n	801050a <xTimerCreateTimerTask+0x2e>
}
 801050c:	b005      	add	sp, #20
 801050e:	bd00      	pop	{pc}
 8010510:	20002340 	.word	0x20002340
 8010514:	0801c2c8 	.word	0x0801c2c8
 8010518:	08010665 	.word	0x08010665

0801051c <xTimerCreate>:
{
 801051c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801051e:	46c6      	mov	lr, r8
 8010520:	b500      	push	{lr}
 8010522:	4680      	mov	r8, r0
 8010524:	000d      	movs	r5, r1
 8010526:	0017      	movs	r7, r2
 8010528:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 801052a:	2900      	cmp	r1, #0
 801052c:	d014      	beq.n	8010558 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 801052e:	202c      	movs	r0, #44	; 0x2c
 8010530:	f000 fa40 	bl	80109b4 <pvPortMalloc>
 8010534:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 8010536:	d00b      	beq.n	8010550 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8010538:	f7ff ff9e 	bl	8010478 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 801053c:	4643      	mov	r3, r8
 801053e:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010540:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 8010542:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 8010544:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8010546:	9b06      	ldr	r3, [sp, #24]
 8010548:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 801054a:	1d20      	adds	r0, r4, #4
 801054c:	f7fe fcd5 	bl	800eefa <vListInitialiseItem>
}
 8010550:	0020      	movs	r0, r4
 8010552:	bc04      	pop	{r2}
 8010554:	4690      	mov	r8, r2
 8010556:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010558:	b672      	cpsid	i
 801055a:	e7fe      	b.n	801055a <xTimerCreate+0x3e>

0801055c <xTimerGenericCommand>:
{
 801055c:	b530      	push	{r4, r5, lr}
 801055e:	b085      	sub	sp, #20
 8010560:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 8010562:	4b13      	ldr	r3, [pc, #76]	; (80105b0 <xTimerGenericCommand+0x54>)
 8010564:	681c      	ldr	r4, [r3, #0]
 8010566:	2c00      	cmp	r4, #0
 8010568:	d020      	beq.n	80105ac <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 801056a:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801056c:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 801056e:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010570:	2905      	cmp	r1, #5
 8010572:	dc13      	bgt.n	801059c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010574:	f7ff fd68 	bl	8010048 <xTaskGetSchedulerState>
 8010578:	2802      	cmp	r0, #2
 801057a:	d007      	beq.n	801058c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801057c:	4b0c      	ldr	r3, [pc, #48]	; (80105b0 <xTimerGenericCommand+0x54>)
 801057e:	6818      	ldr	r0, [r3, #0]
 8010580:	2300      	movs	r3, #0
 8010582:	2200      	movs	r2, #0
 8010584:	4669      	mov	r1, sp
 8010586:	f7fe fdf3 	bl	800f170 <xQueueGenericSend>
 801058a:	e00d      	b.n	80105a8 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801058c:	4b08      	ldr	r3, [pc, #32]	; (80105b0 <xTimerGenericCommand+0x54>)
 801058e:	6818      	ldr	r0, [r3, #0]
 8010590:	2300      	movs	r3, #0
 8010592:	9a08      	ldr	r2, [sp, #32]
 8010594:	4669      	mov	r1, sp
 8010596:	f7fe fdeb 	bl	800f170 <xQueueGenericSend>
 801059a:	e005      	b.n	80105a8 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801059c:	2300      	movs	r3, #0
 801059e:	002a      	movs	r2, r5
 80105a0:	4669      	mov	r1, sp
 80105a2:	0020      	movs	r0, r4
 80105a4:	f7fe fe7b 	bl	800f29e <xQueueGenericSendFromISR>
}
 80105a8:	b005      	add	sp, #20
 80105aa:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 80105ac:	2000      	movs	r0, #0
	return xReturn;
 80105ae:	e7fb      	b.n	80105a8 <xTimerGenericCommand+0x4c>
 80105b0:	20002340 	.word	0x20002340

080105b4 <prvSampleTimeNow>:
{
 80105b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b6:	46d6      	mov	lr, sl
 80105b8:	464f      	mov	r7, r9
 80105ba:	4646      	mov	r6, r8
 80105bc:	b5c0      	push	{r6, r7, lr}
 80105be:	b084      	sub	sp, #16
 80105c0:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 80105c2:	f7ff fa43 	bl	800fa4c <xTaskGetTickCount>
 80105c6:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 80105c8:	4b23      	ldr	r3, [pc, #140]	; (8010658 <prvSampleTimeNow+0xa4>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4283      	cmp	r3, r0
 80105ce:	d80b      	bhi.n	80105e8 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 80105d0:	2300      	movs	r3, #0
 80105d2:	4642      	mov	r2, r8
 80105d4:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 80105d6:	4b20      	ldr	r3, [pc, #128]	; (8010658 <prvSampleTimeNow+0xa4>)
 80105d8:	601f      	str	r7, [r3, #0]
}
 80105da:	0038      	movs	r0, r7
 80105dc:	b004      	add	sp, #16
 80105de:	bc1c      	pop	{r2, r3, r4}
 80105e0:	4690      	mov	r8, r2
 80105e2:	4699      	mov	r9, r3
 80105e4:	46a2      	mov	sl, r4
 80105e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105e8:	4e1c      	ldr	r6, [pc, #112]	; (801065c <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105ea:	2300      	movs	r3, #0
 80105ec:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105ee:	6833      	ldr	r3, [r6, #0]
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	2a00      	cmp	r2, #0
 80105f4:	d026      	beq.n	8010644 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105fc:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105fe:	1d25      	adds	r5, r4, #4
 8010600:	0028      	movs	r0, r5
 8010602:	f7fe fca0 	bl	800ef46 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010606:	0020      	movs	r0, r4
 8010608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801060a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801060c:	69e3      	ldr	r3, [r4, #28]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d1ed      	bne.n	80105ee <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010612:	69a3      	ldr	r3, [r4, #24]
 8010614:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8010616:	459a      	cmp	sl, r3
 8010618:	d209      	bcs.n	801062e <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801061a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801061c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801061e:	4b0f      	ldr	r3, [pc, #60]	; (801065c <prvSampleTimeNow+0xa8>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	9303      	str	r3, [sp, #12]
 8010624:	0029      	movs	r1, r5
 8010626:	0018      	movs	r0, r3
 8010628:	f7fe fc76 	bl	800ef18 <vListInsert>
 801062c:	e7df      	b.n	80105ee <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801062e:	464b      	mov	r3, r9
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	4652      	mov	r2, sl
 8010634:	4649      	mov	r1, r9
 8010636:	0020      	movs	r0, r4
 8010638:	f7ff ff90 	bl	801055c <xTimerGenericCommand>
				configASSERT( xResult );
 801063c:	2800      	cmp	r0, #0
 801063e:	d1d6      	bne.n	80105ee <prvSampleTimeNow+0x3a>
 8010640:	b672      	cpsid	i
 8010642:	e7fe      	b.n	8010642 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 8010644:	4a06      	ldr	r2, [pc, #24]	; (8010660 <prvSampleTimeNow+0xac>)
 8010646:	4905      	ldr	r1, [pc, #20]	; (801065c <prvSampleTimeNow+0xa8>)
 8010648:	6810      	ldr	r0, [r2, #0]
 801064a:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 801064c:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 801064e:	2301      	movs	r3, #1
 8010650:	4642      	mov	r2, r8
 8010652:	6013      	str	r3, [r2, #0]
 8010654:	e7bf      	b.n	80105d6 <prvSampleTimeNow+0x22>
 8010656:	46c0      	nop			; (mov r8, r8)
 8010658:	2000233c 	.word	0x2000233c
 801065c:	2000230c 	.word	0x2000230c
 8010660:	20002310 	.word	0x20002310

08010664 <prvTimerTask>:
{
 8010664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010666:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 8010668:	4e57      	ldr	r6, [pc, #348]	; (80107c8 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801066a:	4b58      	ldr	r3, [pc, #352]	; (80107cc <prvTimerTask+0x168>)
 801066c:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	2a00      	cmp	r2, #0
 8010672:	d100      	bne.n	8010676 <prvTimerTask+0x12>
 8010674:	e09c      	b.n	80107b0 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010676:	68db      	ldr	r3, [r3, #12]
 8010678:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 801067a:	f7ff f9df 	bl	800fa3c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801067e:	a808      	add	r0, sp, #32
 8010680:	f7ff ff98 	bl	80105b4 <prvSampleTimeNow>
 8010684:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010686:	9b08      	ldr	r3, [sp, #32]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d000      	beq.n	801068e <prvTimerTask+0x2a>
 801068c:	e099      	b.n	80107c2 <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801068e:	42a0      	cmp	r0, r4
 8010690:	d233      	bcs.n	80106fa <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010692:	1b61      	subs	r1, r4, r5
 8010694:	4b4e      	ldr	r3, [pc, #312]	; (80107d0 <prvTimerTask+0x16c>)
 8010696:	6818      	ldr	r0, [r3, #0]
 8010698:	f7fe ff80 	bl	800f59c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801069c:	f7ff fa6e 	bl	800fb7c <xTaskResumeAll>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	d050      	beq.n	8010746 <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106a4:	4c4a      	ldr	r4, [pc, #296]	; (80107d0 <prvTimerTask+0x16c>)
 80106a6:	2300      	movs	r3, #0
 80106a8:	2200      	movs	r2, #0
 80106aa:	a908      	add	r1, sp, #32
 80106ac:	6820      	ldr	r0, [r4, #0]
 80106ae:	f7fe fe78 	bl	800f3a2 <xQueueGenericReceive>
 80106b2:	2800      	cmp	r0, #0
 80106b4:	d0d9      	beq.n	801066a <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80106b6:	9b08      	ldr	r3, [sp, #32]
 80106b8:	9303      	str	r3, [sp, #12]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	da0c      	bge.n	80106d8 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80106be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106c0:	9303      	str	r3, [sp, #12]
 80106c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106c4:	9304      	str	r3, [sp, #16]
 80106c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106c8:	9305      	str	r3, [sp, #20]
 80106ca:	9903      	ldr	r1, [sp, #12]
 80106cc:	9804      	ldr	r0, [sp, #16]
 80106ce:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80106d0:	9b08      	ldr	r3, [sp, #32]
 80106d2:	9303      	str	r3, [sp, #12]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	dbe6      	blt.n	80106a6 <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106d8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80106da:	696b      	ldr	r3, [r5, #20]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d002      	beq.n	80106e6 <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106e0:	1d28      	adds	r0, r5, #4
 80106e2:	f7fe fc30 	bl	800ef46 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106e6:	a807      	add	r0, sp, #28
 80106e8:	f7ff ff64 	bl	80105b4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80106ec:	9b08      	ldr	r3, [sp, #32]
 80106ee:	9303      	str	r3, [sp, #12]
 80106f0:	2b09      	cmp	r3, #9
 80106f2:	d8d8      	bhi.n	80106a6 <prvTimerTask+0x42>
 80106f4:	009b      	lsls	r3, r3, #2
 80106f6:	58f3      	ldr	r3, [r6, r3]
 80106f8:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 80106fa:	f7ff fa3f 	bl	800fb7c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106fe:	4b33      	ldr	r3, [pc, #204]	; (80107cc <prvTimerTask+0x168>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	68db      	ldr	r3, [r3, #12]
 8010704:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010706:	1d38      	adds	r0, r7, #4
 8010708:	f7fe fc1d 	bl	800ef46 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801070c:	69fb      	ldr	r3, [r7, #28]
 801070e:	2b01      	cmp	r3, #1
 8010710:	d003      	beq.n	801071a <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010714:	0038      	movs	r0, r7
 8010716:	4798      	blx	r3
 8010718:	e7c4      	b.n	80106a4 <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	18e1      	adds	r1, r4, r3
 801071e:	0023      	movs	r3, r4
 8010720:	002a      	movs	r2, r5
 8010722:	0038      	movs	r0, r7
 8010724:	f7ff fe86 	bl	8010434 <prvInsertTimerInActiveList>
 8010728:	2801      	cmp	r0, #1
 801072a:	d1f2      	bne.n	8010712 <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801072c:	2100      	movs	r1, #0
 801072e:	9100      	str	r1, [sp, #0]
 8010730:	000b      	movs	r3, r1
 8010732:	0022      	movs	r2, r4
 8010734:	0038      	movs	r0, r7
 8010736:	f7ff ff11 	bl	801055c <xTimerGenericCommand>
			configASSERT( xResult );
 801073a:	2800      	cmp	r0, #0
 801073c:	d1e9      	bne.n	8010712 <prvTimerTask+0xae>
 801073e:	b672      	cpsid	i
 8010740:	e7fe      	b.n	8010740 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 8010742:	2400      	movs	r4, #0
 8010744:	e7a5      	b.n	8010692 <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 8010746:	f000 f8a7 	bl	8010898 <vPortYield>
 801074a:	e7ab      	b.n	80106a4 <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 801074c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801074e:	69aa      	ldr	r2, [r5, #24]
 8010750:	4694      	mov	ip, r2
 8010752:	4463      	add	r3, ip
 8010754:	0019      	movs	r1, r3
 8010756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010758:	0002      	movs	r2, r0
 801075a:	0028      	movs	r0, r5
 801075c:	f7ff fe6a 	bl	8010434 <prvInsertTimerInActiveList>
 8010760:	2801      	cmp	r0, #1
 8010762:	d1a0      	bne.n	80106a6 <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010764:	0028      	movs	r0, r5
 8010766:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010768:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801076a:	69eb      	ldr	r3, [r5, #28]
 801076c:	2b01      	cmp	r3, #1
 801076e:	d19a      	bne.n	80106a6 <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010772:	69a9      	ldr	r1, [r5, #24]
 8010774:	468c      	mov	ip, r1
 8010776:	4463      	add	r3, ip
 8010778:	001a      	movs	r2, r3
 801077a:	2300      	movs	r3, #0
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	2100      	movs	r1, #0
 8010780:	0028      	movs	r0, r5
 8010782:	f7ff feeb 	bl	801055c <xTimerGenericCommand>
							configASSERT( xResult );
 8010786:	2800      	cmp	r0, #0
 8010788:	d18d      	bne.n	80106a6 <prvTimerTask+0x42>
 801078a:	b672      	cpsid	i
 801078c:	e7fe      	b.n	801078c <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801078e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010790:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010792:	2900      	cmp	r1, #0
 8010794:	d006      	beq.n	80107a4 <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010796:	1841      	adds	r1, r0, r1
 8010798:	0003      	movs	r3, r0
 801079a:	0002      	movs	r2, r0
 801079c:	0028      	movs	r0, r5
 801079e:	f7ff fe49 	bl	8010434 <prvInsertTimerInActiveList>
 80107a2:	e780      	b.n	80106a6 <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80107a4:	b672      	cpsid	i
 80107a6:	e7fe      	b.n	80107a6 <prvTimerTask+0x142>
					vPortFree( pxTimer );
 80107a8:	0028      	movs	r0, r5
 80107aa:	f000 f999 	bl	8010ae0 <vPortFree>
 80107ae:	e77a      	b.n	80106a6 <prvTimerTask+0x42>
	vTaskSuspendAll();
 80107b0:	f7ff f944 	bl	800fa3c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80107b4:	a808      	add	r0, sp, #32
 80107b6:	f7ff fefd 	bl	80105b4 <prvSampleTimeNow>
 80107ba:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80107bc:	9b08      	ldr	r3, [sp, #32]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d0bf      	beq.n	8010742 <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 80107c2:	f7ff f9db 	bl	800fb7c <xTaskResumeAll>
 80107c6:	e76d      	b.n	80106a4 <prvTimerTask+0x40>
 80107c8:	0801c298 	.word	0x0801c298
 80107cc:	2000230c 	.word	0x2000230c
 80107d0:	20002340 	.word	0x20002340

080107d4 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80107d4:	b510      	push	{r4, lr}
 80107d6:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 80107d8:	d101      	bne.n	80107de <pvTimerGetTimerID+0xa>
 80107da:	b672      	cpsid	i
 80107dc:	e7fe      	b.n	80107dc <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 80107de:	f000 f867 	bl	80108b0 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80107e2:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 80107e4:	f000 f870 	bl	80108c8 <vPortExitCritical>

	return pvReturn;
}
 80107e8:	0020      	movs	r0, r4
 80107ea:	bd10      	pop	{r4, pc}

080107ec <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80107ec:	4b03      	ldr	r3, [pc, #12]	; (80107fc <prvTaskExitError+0x10>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	3301      	adds	r3, #1
 80107f2:	d001      	beq.n	80107f8 <prvTaskExitError+0xc>
 80107f4:	b672      	cpsid	i
 80107f6:	e7fe      	b.n	80107f6 <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80107f8:	b672      	cpsid	i
 80107fa:	e7fe      	b.n	80107fa <prvTaskExitError+0xe>
 80107fc:	20000114 	.word	0x20000114

08010800 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010800:	4a06      	ldr	r2, [pc, #24]	; (801081c <pxCurrentTCBConst2>)
 8010802:	6813      	ldr	r3, [r2, #0]
 8010804:	6818      	ldr	r0, [r3, #0]
 8010806:	3020      	adds	r0, #32
 8010808:	f380 8809 	msr	PSP, r0
 801080c:	2002      	movs	r0, #2
 801080e:	f380 8814 	msr	CONTROL, r0
 8010812:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010814:	46ae      	mov	lr, r5
 8010816:	b662      	cpsie	i
 8010818:	bd00      	pop	{pc}
 801081a:	46c0      	nop			; (mov r8, r8)

0801081c <pxCurrentTCBConst2>:
 801081c:	200021e4 	.word	0x200021e4

08010820 <pxPortInitialiseStack>:
{
 8010820:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010822:	1f03      	subs	r3, r0, #4
 8010824:	2480      	movs	r4, #128	; 0x80
 8010826:	0464      	lsls	r4, r4, #17
 8010828:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801082a:	3b04      	subs	r3, #4
 801082c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801082e:	3b04      	subs	r3, #4
 8010830:	4902      	ldr	r1, [pc, #8]	; (801083c <pxPortInitialiseStack+0x1c>)
 8010832:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010834:	3b14      	subs	r3, #20
 8010836:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010838:	3840      	subs	r0, #64	; 0x40
}
 801083a:	bd10      	pop	{r4, pc}
 801083c:	080107ed 	.word	0x080107ed

08010840 <SVC_Handler>:
}
 8010840:	4770      	bx	lr
	...

08010844 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010844:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8010846:	4b0f      	ldr	r3, [pc, #60]	; (8010884 <xPortStartScheduler+0x40>)
 8010848:	6819      	ldr	r1, [r3, #0]
 801084a:	22ff      	movs	r2, #255	; 0xff
 801084c:	0412      	lsls	r2, r2, #16
 801084e:	430a      	orrs	r2, r1
 8010850:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8010852:	6819      	ldr	r1, [r3, #0]
 8010854:	22ff      	movs	r2, #255	; 0xff
 8010856:	0612      	lsls	r2, r2, #24
 8010858:	430a      	orrs	r2, r1
 801085a:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801085c:	4b0a      	ldr	r3, [pc, #40]	; (8010888 <xPortStartScheduler+0x44>)
 801085e:	6818      	ldr	r0, [r3, #0]
 8010860:	21fa      	movs	r1, #250	; 0xfa
 8010862:	0089      	lsls	r1, r1, #2
 8010864:	f7ef fc74 	bl	8000150 <__udivsi3>
 8010868:	3801      	subs	r0, #1
 801086a:	4b08      	ldr	r3, [pc, #32]	; (801088c <xPortStartScheduler+0x48>)
 801086c:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 801086e:	4b08      	ldr	r3, [pc, #32]	; (8010890 <xPortStartScheduler+0x4c>)
 8010870:	2207      	movs	r2, #7
 8010872:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 8010874:	4b07      	ldr	r3, [pc, #28]	; (8010894 <xPortStartScheduler+0x50>)
 8010876:	2200      	movs	r2, #0
 8010878:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 801087a:	f7ff ffc1 	bl	8010800 <vPortStartFirstTask>
	prvTaskExitError();
 801087e:	f7ff ffb5 	bl	80107ec <prvTaskExitError>
 8010882:	46c0      	nop			; (mov r8, r8)
 8010884:	e000ed20 	.word	0xe000ed20
 8010888:	20000100 	.word	0x20000100
 801088c:	e000e014 	.word	0xe000e014
 8010890:	e000e010 	.word	0xe000e010
 8010894:	20000114 	.word	0x20000114

08010898 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010898:	4b04      	ldr	r3, [pc, #16]	; (80108ac <vPortYield+0x14>)
 801089a:	2280      	movs	r2, #128	; 0x80
 801089c:	0552      	lsls	r2, r2, #21
 801089e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80108a0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80108a4:	f3bf 8f6f 	isb	sy
}
 80108a8:	4770      	bx	lr
 80108aa:	46c0      	nop			; (mov r8, r8)
 80108ac:	e000ed04 	.word	0xe000ed04

080108b0 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 80108b0:	b672      	cpsid	i
    uxCriticalNesting++;
 80108b2:	4a04      	ldr	r2, [pc, #16]	; (80108c4 <vPortEnterCritical+0x14>)
 80108b4:	6813      	ldr	r3, [r2, #0]
 80108b6:	3301      	adds	r3, #1
 80108b8:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 80108ba:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80108be:	f3bf 8f6f 	isb	sy
}
 80108c2:	4770      	bx	lr
 80108c4:	20000114 	.word	0x20000114

080108c8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80108c8:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <vPortExitCritical+0x1c>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d101      	bne.n	80108d4 <vPortExitCritical+0xc>
 80108d0:	b672      	cpsid	i
 80108d2:	e7fe      	b.n	80108d2 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 80108d4:	3b01      	subs	r3, #1
 80108d6:	4a03      	ldr	r2, [pc, #12]	; (80108e4 <vPortExitCritical+0x1c>)
 80108d8:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d100      	bne.n	80108e0 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 80108de:	b662      	cpsie	i
}
 80108e0:	4770      	bx	lr
 80108e2:	46c0      	nop			; (mov r8, r8)
 80108e4:	20000114 	.word	0x20000114

080108e8 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80108e8:	f3ef 8010 	mrs	r0, PRIMASK
 80108ec:	b672      	cpsid	i
 80108ee:	4770      	bx	lr
}
 80108f0:	2000      	movs	r0, #0

080108f2 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80108f2:	f380 8810 	msr	PRIMASK, r0
 80108f6:	4770      	bx	lr

080108f8 <PendSV_Handler>:
	__asm volatile
 80108f8:	f3ef 8009 	mrs	r0, PSP
 80108fc:	4b0e      	ldr	r3, [pc, #56]	; (8010938 <pxCurrentTCBConst>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	3820      	subs	r0, #32
 8010902:	6010      	str	r0, [r2, #0]
 8010904:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010906:	4644      	mov	r4, r8
 8010908:	464d      	mov	r5, r9
 801090a:	4656      	mov	r6, sl
 801090c:	465f      	mov	r7, fp
 801090e:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010910:	b508      	push	{r3, lr}
 8010912:	b672      	cpsid	i
 8010914:	f7ff fa4e 	bl	800fdb4 <vTaskSwitchContext>
 8010918:	b662      	cpsie	i
 801091a:	bc0c      	pop	{r2, r3}
 801091c:	6811      	ldr	r1, [r2, #0]
 801091e:	6808      	ldr	r0, [r1, #0]
 8010920:	3010      	adds	r0, #16
 8010922:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010924:	46a0      	mov	r8, r4
 8010926:	46a9      	mov	r9, r5
 8010928:	46b2      	mov	sl, r6
 801092a:	46bb      	mov	fp, r7
 801092c:	f380 8809 	msr	PSP, r0
 8010930:	3820      	subs	r0, #32
 8010932:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010934:	4718      	bx	r3
 8010936:	46c0      	nop			; (mov r8, r8)

08010938 <pxCurrentTCBConst>:
 8010938:	200021e4 	.word	0x200021e4

0801093c <xPortSysTickHandler>:
{
 801093c:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801093e:	f7ff ffd3 	bl	80108e8 <ulSetInterruptMaskFromISR>
 8010942:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 8010944:	f7ff f88e 	bl	800fa64 <xTaskIncrementTick>
 8010948:	2800      	cmp	r0, #0
 801094a:	d003      	beq.n	8010954 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 801094c:	4b03      	ldr	r3, [pc, #12]	; (801095c <xPortSysTickHandler+0x20>)
 801094e:	2280      	movs	r2, #128	; 0x80
 8010950:	0552      	lsls	r2, r2, #21
 8010952:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8010954:	0020      	movs	r0, r4
 8010956:	f7ff ffcc 	bl	80108f2 <vClearInterruptMaskFromISR>
}
 801095a:	bd10      	pop	{r4, pc}
 801095c:	e000ed04 	.word	0xe000ed04

08010960 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010960:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010962:	4b12      	ldr	r3, [pc, #72]	; (80109ac <prvInsertBlockIntoFreeList+0x4c>)
 8010964:	681a      	ldr	r2, [r3, #0]
 8010966:	4282      	cmp	r2, r0
 8010968:	d319      	bcc.n	801099e <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801096a:	685c      	ldr	r4, [r3, #4]
 801096c:	1919      	adds	r1, r3, r4
 801096e:	4288      	cmp	r0, r1
 8010970:	d103      	bne.n	801097a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010972:	6841      	ldr	r1, [r0, #4]
 8010974:	1909      	adds	r1, r1, r4
 8010976:	6059      	str	r1, [r3, #4]
 8010978:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801097a:	6841      	ldr	r1, [r0, #4]
 801097c:	1844      	adds	r4, r0, r1
 801097e:	42a2      	cmp	r2, r4
 8010980:	d111      	bne.n	80109a6 <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010982:	4c0b      	ldr	r4, [pc, #44]	; (80109b0 <prvInsertBlockIntoFreeList+0x50>)
 8010984:	6824      	ldr	r4, [r4, #0]
 8010986:	42a2      	cmp	r2, r4
 8010988:	d00b      	beq.n	80109a2 <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801098a:	6852      	ldr	r2, [r2, #4]
 801098c:	1852      	adds	r2, r2, r1
 801098e:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010990:	681a      	ldr	r2, [r3, #0]
 8010992:	6812      	ldr	r2, [r2, #0]
 8010994:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010996:	4298      	cmp	r0, r3
 8010998:	d000      	beq.n	801099c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801099a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801099c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801099e:	0013      	movs	r3, r2
 80109a0:	e7e0      	b.n	8010964 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80109a2:	6002      	str	r2, [r0, #0]
 80109a4:	e7f7      	b.n	8010996 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80109a6:	6002      	str	r2, [r0, #0]
 80109a8:	e7f5      	b.n	8010996 <prvInsertBlockIntoFreeList+0x36>
 80109aa:	46c0      	nop			; (mov r8, r8)
 80109ac:	20006d8c 	.word	0x20006d8c
 80109b0:	20002344 	.word	0x20002344

080109b4 <pvPortMalloc>:
{
 80109b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109b6:	0004      	movs	r4, r0
	vTaskSuspendAll();
 80109b8:	f7ff f840 	bl	800fa3c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80109bc:	4b41      	ldr	r3, [pc, #260]	; (8010ac4 <pvPortMalloc+0x110>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d00a      	beq.n	80109da <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80109c4:	4b40      	ldr	r3, [pc, #256]	; (8010ac8 <pvPortMalloc+0x114>)
 80109c6:	681f      	ldr	r7, [r3, #0]
 80109c8:	423c      	tst	r4, r7
 80109ca:	d02a      	beq.n	8010a22 <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 80109cc:	f7ff f8d6 	bl	800fb7c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80109d0:	f7fd fbc8 	bl	800e164 <vApplicationMallocFailedHook>
 80109d4:	2500      	movs	r5, #0
}
 80109d6:	0028      	movs	r0, r5
 80109d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 80109da:	4a3c      	ldr	r2, [pc, #240]	; (8010acc <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109dc:	0753      	lsls	r3, r2, #29
 80109de:	d01e      	beq.n	8010a1e <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80109e0:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80109e2:	2307      	movs	r3, #7
 80109e4:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80109e6:	4b3a      	ldr	r3, [pc, #232]	; (8010ad0 <pvPortMalloc+0x11c>)
 80109e8:	18d3      	adds	r3, r2, r3
 80109ea:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80109ec:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80109ee:	4839      	ldr	r0, [pc, #228]	; (8010ad4 <pvPortMalloc+0x120>)
 80109f0:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80109f2:	2100      	movs	r1, #0
 80109f4:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80109f6:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80109f8:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80109fa:	2007      	movs	r0, #7
 80109fc:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80109fe:	4831      	ldr	r0, [pc, #196]	; (8010ac4 <pvPortMalloc+0x110>)
 8010a00:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8010a02:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a04:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8010a06:	1a99      	subs	r1, r3, r2
 8010a08:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a0a:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a0c:	4b32      	ldr	r3, [pc, #200]	; (8010ad8 <pvPortMalloc+0x124>)
 8010a0e:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a10:	4b32      	ldr	r3, [pc, #200]	; (8010adc <pvPortMalloc+0x128>)
 8010a12:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a14:	4b2c      	ldr	r3, [pc, #176]	; (8010ac8 <pvPortMalloc+0x114>)
 8010a16:	2280      	movs	r2, #128	; 0x80
 8010a18:	0612      	lsls	r2, r2, #24
 8010a1a:	601a      	str	r2, [r3, #0]
 8010a1c:	e7d2      	b.n	80109c4 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a1e:	4b2c      	ldr	r3, [pc, #176]	; (8010ad0 <pvPortMalloc+0x11c>)
 8010a20:	e7e5      	b.n	80109ee <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 8010a22:	2c00      	cmp	r4, #0
 8010a24:	d008      	beq.n	8010a38 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 8010a26:	0023      	movs	r3, r4
 8010a28:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a2a:	075a      	lsls	r2, r3, #29
 8010a2c:	d002      	beq.n	8010a34 <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a2e:	2207      	movs	r2, #7
 8010a30:	4393      	bics	r3, r2
 8010a32:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d102      	bne.n	8010a3e <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 8010a38:	f7ff f8a0 	bl	800fb7c <xTaskResumeAll>
 8010a3c:	e7c8      	b.n	80109d0 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a3e:	4a27      	ldr	r2, [pc, #156]	; (8010adc <pvPortMalloc+0x128>)
 8010a40:	6816      	ldr	r6, [r2, #0]
 8010a42:	429e      	cmp	r6, r3
 8010a44:	d302      	bcc.n	8010a4c <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8010a46:	4a23      	ldr	r2, [pc, #140]	; (8010ad4 <pvPortMalloc+0x120>)
 8010a48:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a4a:	e004      	b.n	8010a56 <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 8010a4c:	f7ff f896 	bl	800fb7c <xTaskResumeAll>
 8010a50:	e7be      	b.n	80109d0 <pvPortMalloc+0x1c>
 8010a52:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a54:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a56:	6861      	ldr	r1, [r4, #4]
 8010a58:	4299      	cmp	r1, r3
 8010a5a:	d202      	bcs.n	8010a62 <pvPortMalloc+0xae>
 8010a5c:	6821      	ldr	r1, [r4, #0]
 8010a5e:	2900      	cmp	r1, #0
 8010a60:	d1f7      	bne.n	8010a52 <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8010a62:	4918      	ldr	r1, [pc, #96]	; (8010ac4 <pvPortMalloc+0x110>)
 8010a64:	6809      	ldr	r1, [r1, #0]
 8010a66:	42a1      	cmp	r1, r4
 8010a68:	d00b      	beq.n	8010a82 <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a6a:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a6c:	6821      	ldr	r1, [r4, #0]
 8010a6e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a70:	6862      	ldr	r2, [r4, #4]
 8010a72:	1ad2      	subs	r2, r2, r3
 8010a74:	2a10      	cmp	r2, #16
 8010a76:	d90b      	bls.n	8010a90 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a78:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a7a:	0741      	lsls	r1, r0, #29
 8010a7c:	d004      	beq.n	8010a88 <pvPortMalloc+0xd4>
 8010a7e:	b672      	cpsid	i
 8010a80:	e7fe      	b.n	8010a80 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 8010a82:	f7ff f87b 	bl	800fb7c <xTaskResumeAll>
 8010a86:	e7a3      	b.n	80109d0 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a88:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a8a:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010a8c:	f7ff ff68 	bl	8010960 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a90:	6862      	ldr	r2, [r4, #4]
 8010a92:	1ab6      	subs	r6, r6, r2
 8010a94:	4911      	ldr	r1, [pc, #68]	; (8010adc <pvPortMalloc+0x128>)
 8010a96:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a98:	490f      	ldr	r1, [pc, #60]	; (8010ad8 <pvPortMalloc+0x124>)
 8010a9a:	6809      	ldr	r1, [r1, #0]
 8010a9c:	428e      	cmp	r6, r1
 8010a9e:	d201      	bcs.n	8010aa4 <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010aa0:	490d      	ldr	r1, [pc, #52]	; (8010ad8 <pvPortMalloc+0x124>)
 8010aa2:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010aa4:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010aa6:	4317      	orrs	r7, r2
 8010aa8:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8010aae:	f7ff f865 	bl	800fb7c <xTaskResumeAll>
		if( pvReturn == NULL )
 8010ab2:	2d00      	cmp	r5, #0
 8010ab4:	d100      	bne.n	8010ab8 <pvPortMalloc+0x104>
 8010ab6:	e78b      	b.n	80109d0 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ab8:	076b      	lsls	r3, r5, #29
 8010aba:	d100      	bne.n	8010abe <pvPortMalloc+0x10a>
 8010abc:	e78b      	b.n	80109d6 <pvPortMalloc+0x22>
 8010abe:	b672      	cpsid	i
 8010ac0:	e7fe      	b.n	8010ac0 <pvPortMalloc+0x10c>
 8010ac2:	46c0      	nop			; (mov r8, r8)
 8010ac4:	20002344 	.word	0x20002344
 8010ac8:	20006d80 	.word	0x20006d80
 8010acc:	20002348 	.word	0x20002348
 8010ad0:	00004a38 	.word	0x00004a38
 8010ad4:	20006d8c 	.word	0x20006d8c
 8010ad8:	20006d88 	.word	0x20006d88
 8010adc:	20006d84 	.word	0x20006d84

08010ae0 <vPortFree>:
{
 8010ae0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d020      	beq.n	8010b28 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ae6:	0003      	movs	r3, r0
 8010ae8:	3b08      	subs	r3, #8
 8010aea:	685b      	ldr	r3, [r3, #4]
 8010aec:	4a0f      	ldr	r2, [pc, #60]	; (8010b2c <vPortFree+0x4c>)
 8010aee:	6812      	ldr	r2, [r2, #0]
 8010af0:	421a      	tst	r2, r3
 8010af2:	d101      	bne.n	8010af8 <vPortFree+0x18>
 8010af4:	b672      	cpsid	i
 8010af6:	e7fe      	b.n	8010af6 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010af8:	0001      	movs	r1, r0
 8010afa:	3908      	subs	r1, #8
 8010afc:	6809      	ldr	r1, [r1, #0]
 8010afe:	2900      	cmp	r1, #0
 8010b00:	d001      	beq.n	8010b06 <vPortFree+0x26>
 8010b02:	b672      	cpsid	i
 8010b04:	e7fe      	b.n	8010b04 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b06:	3808      	subs	r0, #8
 8010b08:	0004      	movs	r4, r0
 8010b0a:	4393      	bics	r3, r2
 8010b0c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8010b0e:	f7fe ff95 	bl	800fa3c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b12:	4a07      	ldr	r2, [pc, #28]	; (8010b30 <vPortFree+0x50>)
 8010b14:	6863      	ldr	r3, [r4, #4]
 8010b16:	6811      	ldr	r1, [r2, #0]
 8010b18:	468c      	mov	ip, r1
 8010b1a:	4463      	add	r3, ip
 8010b1c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b1e:	0020      	movs	r0, r4
 8010b20:	f7ff ff1e 	bl	8010960 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010b24:	f7ff f82a 	bl	800fb7c <xTaskResumeAll>
}
 8010b28:	bd10      	pop	{r4, pc}
 8010b2a:	46c0      	nop			; (mov r8, r8)
 8010b2c:	20006d80 	.word	0x20006d80
 8010b30:	20006d84 	.word	0x20006d84

08010b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010b34:	b510      	push	{r4, lr}
 8010b36:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010b38:	f002 fb40 	bl	80131bc <HAL_RCC_GetHCLKFreq>
 8010b3c:	21fa      	movs	r1, #250	; 0xfa
 8010b3e:	0089      	lsls	r1, r1, #2
 8010b40:	f7ef fb06 	bl	8000150 <__udivsi3>
 8010b44:	f000 fb4c 	bl	80111e0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010b48:	2001      	movs	r0, #1
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	0021      	movs	r1, r4
 8010b4e:	4240      	negs	r0, r0
 8010b50:	f000 fafe 	bl	8011150 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010b54:	2000      	movs	r0, #0
 8010b56:	bd10      	pop	{r4, pc}

08010b58 <HAL_Init>:
{
 8010b58:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b5a:	4a06      	ldr	r2, [pc, #24]	; (8010b74 <HAL_Init+0x1c>)
 8010b5c:	6813      	ldr	r3, [r2, #0]
 8010b5e:	2110      	movs	r1, #16
 8010b60:	430b      	orrs	r3, r1
 8010b62:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b64:	2000      	movs	r0, #0
 8010b66:	f7ff ffe5 	bl	8010b34 <HAL_InitTick>
  HAL_MspInit();
 8010b6a:	f001 fecf 	bl	801290c <HAL_MspInit>
}
 8010b6e:	2000      	movs	r0, #0
 8010b70:	bd10      	pop	{r4, pc}
 8010b72:	46c0      	nop			; (mov r8, r8)
 8010b74:	40022000 	.word	0x40022000

08010b78 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010b78:	4a02      	ldr	r2, [pc, #8]	; (8010b84 <HAL_IncTick+0xc>)
 8010b7a:	6813      	ldr	r3, [r2, #0]
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	6013      	str	r3, [r2, #0]
}
 8010b80:	4770      	bx	lr
 8010b82:	46c0      	nop			; (mov r8, r8)
 8010b84:	20006d94 	.word	0x20006d94

08010b88 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010b88:	4b01      	ldr	r3, [pc, #4]	; (8010b90 <HAL_GetTick+0x8>)
 8010b8a:	6818      	ldr	r0, [r3, #0]
}
 8010b8c:	4770      	bx	lr
 8010b8e:	46c0      	nop			; (mov r8, r8)
 8010b90:	20006d94 	.word	0x20006d94

08010b94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010b94:	b510      	push	{r4, lr}
 8010b96:	b082      	sub	sp, #8
 8010b98:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010b9a:	f7ff fff5 	bl	8010b88 <HAL_GetTick>
 8010b9e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010ba0:	f7ff fff2 	bl	8010b88 <HAL_GetTick>
 8010ba4:	9b01      	ldr	r3, [sp, #4]
 8010ba6:	1b00      	subs	r0, r0, r4
 8010ba8:	4298      	cmp	r0, r3
 8010baa:	d3f9      	bcc.n	8010ba0 <HAL_Delay+0xc>
  {
  }
}
 8010bac:	b002      	add	sp, #8
 8010bae:	bd10      	pop	{r4, pc}

08010bb0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010bb0:	4b01      	ldr	r3, [pc, #4]	; (8010bb8 <HAL_GetREVID+0x8>)
 8010bb2:	6818      	ldr	r0, [r3, #0]
 8010bb4:	0c00      	lsrs	r0, r0, #16
}
 8010bb6:	4770      	bx	lr
 8010bb8:	40015800 	.word	0x40015800

08010bbc <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010bbc:	4b02      	ldr	r3, [pc, #8]	; (8010bc8 <HAL_GetDEVID+0xc>)
 8010bbe:	6818      	ldr	r0, [r3, #0]
 8010bc0:	0500      	lsls	r0, r0, #20
 8010bc2:	0d00      	lsrs	r0, r0, #20
}
 8010bc4:	4770      	bx	lr
 8010bc6:	46c0      	nop			; (mov r8, r8)
 8010bc8:	40015800 	.word	0x40015800

08010bcc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010bcc:	b570      	push	{r4, r5, r6, lr}
 8010bce:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010bd0:	6803      	ldr	r3, [r0, #0]
 8010bd2:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010bd4:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010bd6:	0752      	lsls	r2, r2, #29
 8010bd8:	d521      	bpl.n	8010c1e <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010bda:	689a      	ldr	r2, [r3, #8]
 8010bdc:	0752      	lsls	r2, r2, #29
 8010bde:	d506      	bpl.n	8010bee <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010be0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010be2:	0792      	lsls	r2, r2, #30
 8010be4:	d403      	bmi.n	8010bee <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010be6:	689a      	ldr	r2, [r3, #8]
 8010be8:	2110      	movs	r1, #16
 8010bea:	430a      	orrs	r2, r1
 8010bec:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8010bee:	f7ff ffcb 	bl	8010b88 <HAL_GetTick>
 8010bf2:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010bf4:	2504      	movs	r5, #4
 8010bf6:	6823      	ldr	r3, [r4, #0]
 8010bf8:	689b      	ldr	r3, [r3, #8]
 8010bfa:	421d      	tst	r5, r3
 8010bfc:	d00e      	beq.n	8010c1c <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8010bfe:	f7ff ffc3 	bl	8010b88 <HAL_GetTick>
 8010c02:	1b80      	subs	r0, r0, r6
 8010c04:	2802      	cmp	r0, #2
 8010c06:	d9f6      	bls.n	8010bf6 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c0a:	2210      	movs	r2, #16
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010c10:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010c12:	3a0f      	subs	r2, #15
 8010c14:	4313      	orrs	r3, r2
 8010c16:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010c18:	2001      	movs	r0, #1
 8010c1a:	e000      	b.n	8010c1e <ADC_ConversionStop+0x52>
  return HAL_OK;
 8010c1c:	2000      	movs	r0, #0
}
 8010c1e:	bd70      	pop	{r4, r5, r6, pc}

08010c20 <ADC_Disable>:
{
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010c24:	6802      	ldr	r2, [r0, #0]
 8010c26:	6891      	ldr	r1, [r2, #8]
 8010c28:	2303      	movs	r3, #3
 8010c2a:	400b      	ands	r3, r1
  return HAL_OK;
 8010c2c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010c2e:	2b01      	cmp	r3, #1
 8010c30:	d000      	beq.n	8010c34 <ADC_Disable+0x14>
}
 8010c32:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010c34:	6813      	ldr	r3, [r2, #0]
 8010c36:	07db      	lsls	r3, r3, #31
 8010c38:	d402      	bmi.n	8010c40 <ADC_Disable+0x20>
 8010c3a:	68d3      	ldr	r3, [r2, #12]
 8010c3c:	041b      	lsls	r3, r3, #16
 8010c3e:	d5f8      	bpl.n	8010c32 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8010c40:	6891      	ldr	r1, [r2, #8]
 8010c42:	2305      	movs	r3, #5
 8010c44:	400b      	ands	r3, r1
 8010c46:	2b01      	cmp	r3, #1
 8010c48:	d009      	beq.n	8010c5e <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c4c:	2210      	movs	r2, #16
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010c52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010c54:	3a0f      	subs	r2, #15
 8010c56:	4313      	orrs	r3, r2
 8010c58:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010c5a:	2001      	movs	r0, #1
 8010c5c:	e7e9      	b.n	8010c32 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8010c5e:	6893      	ldr	r3, [r2, #8]
 8010c60:	2102      	movs	r1, #2
 8010c62:	430b      	orrs	r3, r1
 8010c64:	6093      	str	r3, [r2, #8]
 8010c66:	6823      	ldr	r3, [r4, #0]
 8010c68:	2203      	movs	r2, #3
 8010c6a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8010c6c:	f7ff ff8c 	bl	8010b88 <HAL_GetTick>
 8010c70:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8010c72:	2501      	movs	r5, #1
 8010c74:	6823      	ldr	r3, [r4, #0]
 8010c76:	689b      	ldr	r3, [r3, #8]
 8010c78:	421d      	tst	r5, r3
 8010c7a:	d00e      	beq.n	8010c9a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010c7c:	f7ff ff84 	bl	8010b88 <HAL_GetTick>
 8010c80:	1b80      	subs	r0, r0, r6
 8010c82:	2802      	cmp	r0, #2
 8010c84:	d9f6      	bls.n	8010c74 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c86:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c88:	2210      	movs	r2, #16
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010c8e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010c90:	3a0f      	subs	r2, #15
 8010c92:	4313      	orrs	r3, r2
 8010c94:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010c96:	2001      	movs	r0, #1
 8010c98:	e7cb      	b.n	8010c32 <ADC_Disable+0x12>
  return HAL_OK;
 8010c9a:	2000      	movs	r0, #0
 8010c9c:	e7c9      	b.n	8010c32 <ADC_Disable+0x12>
	...

08010ca0 <ADC_Enable>:
{
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	b082      	sub	sp, #8
 8010ca4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010caa:	6803      	ldr	r3, [r0, #0]
 8010cac:	6899      	ldr	r1, [r3, #8]
 8010cae:	2203      	movs	r2, #3
 8010cb0:	400a      	ands	r2, r1
 8010cb2:	2a01      	cmp	r2, #1
 8010cb4:	d02d      	beq.n	8010d12 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010cb6:	6899      	ldr	r1, [r3, #8]
 8010cb8:	4a20      	ldr	r2, [pc, #128]	; (8010d3c <ADC_Enable+0x9c>)
 8010cba:	4211      	tst	r1, r2
 8010cbc:	d131      	bne.n	8010d22 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 8010cbe:	689a      	ldr	r2, [r3, #8]
 8010cc0:	2101      	movs	r1, #1
 8010cc2:	430a      	orrs	r2, r1
 8010cc4:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010cc6:	4b1e      	ldr	r3, [pc, #120]	; (8010d40 <ADC_Enable+0xa0>)
 8010cc8:	6818      	ldr	r0, [r3, #0]
 8010cca:	491e      	ldr	r1, [pc, #120]	; (8010d44 <ADC_Enable+0xa4>)
 8010ccc:	f7ef fa40 	bl	8000150 <__udivsi3>
 8010cd0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010cd2:	9b01      	ldr	r3, [sp, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d005      	beq.n	8010ce4 <ADC_Enable+0x44>
      wait_loop_index--;
 8010cd8:	9b01      	ldr	r3, [sp, #4]
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010cde:	9b01      	ldr	r3, [sp, #4]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d1f9      	bne.n	8010cd8 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010ce4:	f7ff ff50 	bl	8010b88 <HAL_GetTick>
 8010ce8:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010cea:	2501      	movs	r5, #1
 8010cec:	6823      	ldr	r3, [r4, #0]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	421d      	tst	r5, r3
 8010cf2:	d121      	bne.n	8010d38 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010cf4:	f7ff ff48 	bl	8010b88 <HAL_GetTick>
 8010cf8:	1b80      	subs	r0, r0, r6
 8010cfa:	2802      	cmp	r0, #2
 8010cfc:	d9f6      	bls.n	8010cec <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010cfe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d00:	2210      	movs	r2, #16
 8010d02:	4313      	orrs	r3, r2
 8010d04:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010d06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010d08:	3a0f      	subs	r2, #15
 8010d0a:	4313      	orrs	r3, r2
 8010d0c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010d0e:	2001      	movs	r0, #1
 8010d10:	e010      	b.n	8010d34 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010d12:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010d14:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010d16:	07d2      	lsls	r2, r2, #31
 8010d18:	d40c      	bmi.n	8010d34 <ADC_Enable+0x94>
 8010d1a:	68da      	ldr	r2, [r3, #12]
 8010d1c:	0412      	lsls	r2, r2, #16
 8010d1e:	d5ca      	bpl.n	8010cb6 <ADC_Enable+0x16>
 8010d20:	e008      	b.n	8010d34 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010d22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d24:	2210      	movs	r2, #16
 8010d26:	4313      	orrs	r3, r2
 8010d28:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010d2a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010d2c:	3a0f      	subs	r2, #15
 8010d2e:	4313      	orrs	r3, r2
 8010d30:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010d32:	2001      	movs	r0, #1
}
 8010d34:	b002      	add	sp, #8
 8010d36:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010d38:	2000      	movs	r0, #0
 8010d3a:	e7fb      	b.n	8010d34 <ADC_Enable+0x94>
 8010d3c:	80000017 	.word	0x80000017
 8010d40:	20000100 	.word	0x20000100
 8010d44:	000f4240 	.word	0x000f4240

08010d48 <HAL_ADC_Init>:
{
 8010d48:	b570      	push	{r4, r5, r6, lr}
 8010d4a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010d4c:	d100      	bne.n	8010d50 <HAL_ADC_Init+0x8>
 8010d4e:	e09b      	b.n	8010e88 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010d50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d073      	beq.n	8010e3e <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010d56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d58:	06db      	lsls	r3, r3, #27
 8010d5a:	d500      	bpl.n	8010d5e <HAL_ADC_Init+0x16>
 8010d5c:	e08e      	b.n	8010e7c <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010d5e:	6822      	ldr	r2, [r4, #0]
 8010d60:	6893      	ldr	r3, [r2, #8]
 8010d62:	2104      	movs	r1, #4
 8010d64:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8010d66:	d000      	beq.n	8010d6a <HAL_ADC_Init+0x22>
 8010d68:	e088      	b.n	8010e7c <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 8010d6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d6c:	4847      	ldr	r0, [pc, #284]	; (8010e8c <HAL_ADC_Init+0x144>)
 8010d6e:	4003      	ands	r3, r0
 8010d70:	3006      	adds	r0, #6
 8010d72:	30ff      	adds	r0, #255	; 0xff
 8010d74:	4303      	orrs	r3, r0
 8010d76:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010d78:	6890      	ldr	r0, [r2, #8]
 8010d7a:	2303      	movs	r3, #3
 8010d7c:	4003      	ands	r3, r0
 8010d7e:	2b01      	cmp	r3, #1
 8010d80:	d063      	beq.n	8010e4a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010d82:	68d3      	ldr	r3, [r2, #12]
 8010d84:	2018      	movs	r0, #24
 8010d86:	4383      	bics	r3, r0
 8010d88:	68a0      	ldr	r0, [r4, #8]
 8010d8a:	4303      	orrs	r3, r0
 8010d8c:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010d8e:	6822      	ldr	r2, [r4, #0]
 8010d90:	6913      	ldr	r3, [r2, #16]
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	089b      	lsrs	r3, r3, #2
 8010d96:	6860      	ldr	r0, [r4, #4]
 8010d98:	4303      	orrs	r3, r0
 8010d9a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010d9c:	6822      	ldr	r2, [r4, #0]
 8010d9e:	68d3      	ldr	r3, [r2, #12]
 8010da0:	483b      	ldr	r0, [pc, #236]	; (8010e90 <HAL_ADC_Init+0x148>)
 8010da2:	4003      	ands	r3, r0
 8010da4:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010da6:	69a3      	ldr	r3, [r4, #24]
 8010da8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010daa:	69e3      	ldr	r3, [r4, #28]
 8010dac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010dae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010db0:	6a20      	ldr	r0, [r4, #32]
 8010db2:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010db4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010db6:	000e      	movs	r6, r1
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d001      	beq.n	8010dc0 <HAL_ADC_Init+0x78>
 8010dbc:	2680      	movs	r6, #128	; 0x80
 8010dbe:	0176      	lsls	r6, r6, #5
 8010dc0:	68e3      	ldr	r3, [r4, #12]
 8010dc2:	431a      	orrs	r2, r3
 8010dc4:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010dc6:	6923      	ldr	r3, [r4, #16]
 8010dc8:	2b02      	cmp	r3, #2
 8010dca:	d045      	beq.n	8010e58 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010dcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010dce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010dd0:	4313      	orrs	r3, r2
 8010dd2:	4333      	orrs	r3, r6
 8010dd4:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010dd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010dd8:	2a01      	cmp	r2, #1
 8010dda:	d03f      	beq.n	8010e5c <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010ddc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010dde:	21c2      	movs	r1, #194	; 0xc2
 8010de0:	31ff      	adds	r1, #255	; 0xff
 8010de2:	428a      	cmp	r2, r1
 8010de4:	d002      	beq.n	8010dec <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010de6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010de8:	430a      	orrs	r2, r1
 8010dea:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010dec:	6821      	ldr	r1, [r4, #0]
 8010dee:	68ca      	ldr	r2, [r1, #12]
 8010df0:	431a      	orrs	r2, r3
 8010df2:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010df4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010df6:	2180      	movs	r1, #128	; 0x80
 8010df8:	0549      	lsls	r1, r1, #21
 8010dfa:	428a      	cmp	r2, r1
 8010dfc:	d002      	beq.n	8010e04 <HAL_ADC_Init+0xbc>
 8010dfe:	3a01      	subs	r2, #1
 8010e00:	2a06      	cmp	r2, #6
 8010e02:	d80a      	bhi.n	8010e1a <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010e04:	6820      	ldr	r0, [r4, #0]
 8010e06:	6941      	ldr	r1, [r0, #20]
 8010e08:	2207      	movs	r2, #7
 8010e0a:	4391      	bics	r1, r2
 8010e0c:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010e0e:	6821      	ldr	r1, [r4, #0]
 8010e10:	6948      	ldr	r0, [r1, #20]
 8010e12:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010e14:	402a      	ands	r2, r5
 8010e16:	4302      	orrs	r2, r0
 8010e18:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8010e1a:	6822      	ldr	r2, [r4, #0]
 8010e1c:	68d2      	ldr	r2, [r2, #12]
 8010e1e:	491d      	ldr	r1, [pc, #116]	; (8010e94 <HAL_ADC_Init+0x14c>)
 8010e20:	400a      	ands	r2, r1
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d020      	beq.n	8010e68 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 8010e26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010e28:	2212      	movs	r2, #18
 8010e2a:	4393      	bics	r3, r2
 8010e2c:	3a02      	subs	r2, #2
 8010e2e:	4313      	orrs	r3, r2
 8010e30:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010e32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010e34:	3a0f      	subs	r2, #15
 8010e36:	4313      	orrs	r3, r2
 8010e38:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	e023      	b.n	8010e86 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 8010e3e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8010e40:	2240      	movs	r2, #64	; 0x40
 8010e42:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010e44:	f7f7 fe18 	bl	8008a78 <HAL_ADC_MspInit>
 8010e48:	e785      	b.n	8010d56 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010e4a:	6813      	ldr	r3, [r2, #0]
 8010e4c:	07db      	lsls	r3, r3, #31
 8010e4e:	d4a5      	bmi.n	8010d9c <HAL_ADC_Init+0x54>
 8010e50:	68d3      	ldr	r3, [r2, #12]
 8010e52:	041b      	lsls	r3, r3, #16
 8010e54:	d4a2      	bmi.n	8010d9c <HAL_ADC_Init+0x54>
 8010e56:	e794      	b.n	8010d82 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010e58:	2104      	movs	r1, #4
 8010e5a:	e7b7      	b.n	8010dcc <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010e5c:	2800      	cmp	r0, #0
 8010e5e:	d1bd      	bne.n	8010ddc <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010e60:	2280      	movs	r2, #128	; 0x80
 8010e62:	0252      	lsls	r2, r2, #9
 8010e64:	4313      	orrs	r3, r2
 8010e66:	e7b9      	b.n	8010ddc <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8010e68:	2300      	movs	r3, #0
 8010e6a:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010e6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010e6e:	2203      	movs	r2, #3
 8010e70:	4393      	bics	r3, r2
 8010e72:	3a02      	subs	r2, #2
 8010e74:	4313      	orrs	r3, r2
 8010e76:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e78:	2000      	movs	r0, #0
 8010e7a:	e004      	b.n	8010e86 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010e7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010e7e:	2210      	movs	r2, #16
 8010e80:	4313      	orrs	r3, r2
 8010e82:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010e84:	2001      	movs	r0, #1
}
 8010e86:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010e88:	2001      	movs	r0, #1
 8010e8a:	e7fc      	b.n	8010e86 <HAL_ADC_Init+0x13e>
 8010e8c:	fffffefd 	.word	0xfffffefd
 8010e90:	fffe0219 	.word	0xfffe0219
 8010e94:	833fffe7 	.word	0x833fffe7

08010e98 <HAL_ADC_Start>:
{
 8010e98:	b510      	push	{r4, lr}
 8010e9a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010e9c:	6803      	ldr	r3, [r0, #0]
 8010e9e:	689b      	ldr	r3, [r3, #8]
 8010ea0:	075b      	lsls	r3, r3, #29
 8010ea2:	d423      	bmi.n	8010eec <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010ea4:	2340      	movs	r3, #64	; 0x40
 8010ea6:	5cc3      	ldrb	r3, [r0, r3]
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d021      	beq.n	8010ef0 <HAL_ADC_Start+0x58>
 8010eac:	2340      	movs	r3, #64	; 0x40
 8010eae:	2201      	movs	r2, #1
 8010eb0:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010eb2:	69c3      	ldr	r3, [r0, #28]
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d114      	bne.n	8010ee2 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010eb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010eba:	4a0e      	ldr	r2, [pc, #56]	; (8010ef4 <HAL_ADC_Start+0x5c>)
 8010ebc:	401a      	ands	r2, r3
 8010ebe:	2380      	movs	r3, #128	; 0x80
 8010ec0:	005b      	lsls	r3, r3, #1
 8010ec2:	4313      	orrs	r3, r2
 8010ec4:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010eca:	2240      	movs	r2, #64	; 0x40
 8010ecc:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010ece:	6823      	ldr	r3, [r4, #0]
 8010ed0:	3a24      	subs	r2, #36	; 0x24
 8010ed2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010ed4:	6822      	ldr	r2, [r4, #0]
 8010ed6:	6893      	ldr	r3, [r2, #8]
 8010ed8:	2104      	movs	r1, #4
 8010eda:	430b      	orrs	r3, r1
 8010edc:	6093      	str	r3, [r2, #8]
 8010ede:	2000      	movs	r0, #0
}
 8010ee0:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010ee2:	f7ff fedd 	bl	8010ca0 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010ee6:	2800      	cmp	r0, #0
 8010ee8:	d0e6      	beq.n	8010eb8 <HAL_ADC_Start+0x20>
 8010eea:	e7f9      	b.n	8010ee0 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8010eec:	2002      	movs	r0, #2
 8010eee:	e7f7      	b.n	8010ee0 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010ef0:	2002      	movs	r0, #2
 8010ef2:	e7f5      	b.n	8010ee0 <HAL_ADC_Start+0x48>
 8010ef4:	fffff0fe 	.word	0xfffff0fe

08010ef8 <HAL_ADC_Stop>:
{ 
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010efc:	2340      	movs	r3, #64	; 0x40
 8010efe:	5cc3      	ldrb	r3, [r0, r3]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	d017      	beq.n	8010f34 <HAL_ADC_Stop+0x3c>
 8010f04:	2340      	movs	r3, #64	; 0x40
 8010f06:	2201      	movs	r2, #1
 8010f08:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010f0a:	f7ff fe5f 	bl	8010bcc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d003      	beq.n	8010f1a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010f12:	2340      	movs	r3, #64	; 0x40
 8010f14:	2200      	movs	r2, #0
 8010f16:	54e2      	strb	r2, [r4, r3]
}
 8010f18:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010f1a:	0020      	movs	r0, r4
 8010f1c:	f7ff fe80 	bl	8010c20 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d1f6      	bne.n	8010f12 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010f24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010f26:	4a04      	ldr	r2, [pc, #16]	; (8010f38 <HAL_ADC_Stop+0x40>)
 8010f28:	4013      	ands	r3, r2
 8010f2a:	3204      	adds	r2, #4
 8010f2c:	32ff      	adds	r2, #255	; 0xff
 8010f2e:	4313      	orrs	r3, r2
 8010f30:	6463      	str	r3, [r4, #68]	; 0x44
 8010f32:	e7ee      	b.n	8010f12 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010f34:	2002      	movs	r0, #2
 8010f36:	e7ef      	b.n	8010f18 <HAL_ADC_Stop+0x20>
 8010f38:	fffffefe 	.word	0xfffffefe

08010f3c <HAL_ADC_PollForConversion>:
{
 8010f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f3e:	0006      	movs	r6, r0
 8010f40:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010f42:	6943      	ldr	r3, [r0, #20]
 8010f44:	2b08      	cmp	r3, #8
 8010f46:	d026      	beq.n	8010f96 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010f48:	6803      	ldr	r3, [r0, #0]
 8010f4a:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010f4c:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010f4e:	07db      	lsls	r3, r3, #31
 8010f50:	d418      	bmi.n	8010f84 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8010f52:	f7ff fe19 	bl	8010b88 <HAL_GetTick>
 8010f56:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010f58:	6832      	ldr	r2, [r6, #0]
 8010f5a:	6813      	ldr	r3, [r2, #0]
 8010f5c:	421d      	tst	r5, r3
 8010f5e:	d11c      	bne.n	8010f9a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8010f60:	1c63      	adds	r3, r4, #1
 8010f62:	d0fa      	beq.n	8010f5a <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010f64:	2c00      	cmp	r4, #0
 8010f66:	d004      	beq.n	8010f72 <HAL_ADC_PollForConversion+0x36>
 8010f68:	f7ff fe0e 	bl	8010b88 <HAL_GetTick>
 8010f6c:	1bc0      	subs	r0, r0, r7
 8010f6e:	42a0      	cmp	r0, r4
 8010f70:	d9f2      	bls.n	8010f58 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010f72:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010f74:	2204      	movs	r2, #4
 8010f76:	4313      	orrs	r3, r2
 8010f78:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010f7a:	2340      	movs	r3, #64	; 0x40
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010f80:	2003      	movs	r0, #3
 8010f82:	e007      	b.n	8010f94 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010f84:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010f86:	2220      	movs	r2, #32
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010f8c:	2340      	movs	r3, #64	; 0x40
 8010f8e:	2200      	movs	r2, #0
 8010f90:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010f92:	2001      	movs	r0, #1
}
 8010f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010f96:	2508      	movs	r5, #8
 8010f98:	e7db      	b.n	8010f52 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010f9a:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8010f9c:	2380      	movs	r3, #128	; 0x80
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	430b      	orrs	r3, r1
 8010fa2:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010fa4:	68d1      	ldr	r1, [r2, #12]
 8010fa6:	23c0      	movs	r3, #192	; 0xc0
 8010fa8:	011b      	lsls	r3, r3, #4
 8010faa:	4219      	tst	r1, r3
 8010fac:	d113      	bne.n	8010fd6 <HAL_ADC_PollForConversion+0x9a>
 8010fae:	6a33      	ldr	r3, [r6, #32]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d110      	bne.n	8010fd6 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010fb4:	6813      	ldr	r3, [r2, #0]
 8010fb6:	071b      	lsls	r3, r3, #28
 8010fb8:	d50d      	bpl.n	8010fd6 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010fba:	6893      	ldr	r3, [r2, #8]
 8010fbc:	075b      	lsls	r3, r3, #29
 8010fbe:	d412      	bmi.n	8010fe6 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010fc0:	6853      	ldr	r3, [r2, #4]
 8010fc2:	210c      	movs	r1, #12
 8010fc4:	438b      	bics	r3, r1
 8010fc6:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010fc8:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010fca:	4a0b      	ldr	r2, [pc, #44]	; (8010ff8 <HAL_ADC_PollForConversion+0xbc>)
 8010fcc:	4013      	ands	r3, r2
 8010fce:	3204      	adds	r2, #4
 8010fd0:	32ff      	adds	r2, #255	; 0xff
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010fd6:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010fd8:	69b3      	ldr	r3, [r6, #24]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d1da      	bne.n	8010f94 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010fde:	6833      	ldr	r3, [r6, #0]
 8010fe0:	220c      	movs	r2, #12
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	e7d6      	b.n	8010f94 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010fe6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010fe8:	2220      	movs	r2, #32
 8010fea:	4313      	orrs	r3, r2
 8010fec:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010fee:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010ff0:	3a1f      	subs	r2, #31
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	64b3      	str	r3, [r6, #72]	; 0x48
 8010ff6:	e7ee      	b.n	8010fd6 <HAL_ADC_PollForConversion+0x9a>
 8010ff8:	fffffefe 	.word	0xfffffefe

08010ffc <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010ffc:	6803      	ldr	r3, [r0, #0]
 8010ffe:	2208      	movs	r2, #8
 8011000:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8011002:	6803      	ldr	r3, [r0, #0]
 8011004:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8011006:	4770      	bx	lr

08011008 <HAL_ADC_ConfigChannel>:
{
 8011008:	b530      	push	{r4, r5, lr}
 801100a:	b083      	sub	sp, #12
 801100c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801100e:	2300      	movs	r3, #0
 8011010:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8011012:	3340      	adds	r3, #64	; 0x40
 8011014:	5cc3      	ldrb	r3, [r0, r3]
 8011016:	2b01      	cmp	r3, #1
 8011018:	d100      	bne.n	801101c <HAL_ADC_ConfigChannel+0x14>
 801101a:	e088      	b.n	801112e <HAL_ADC_ConfigChannel+0x126>
 801101c:	2340      	movs	r3, #64	; 0x40
 801101e:	2201      	movs	r2, #1
 8011020:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8011022:	6803      	ldr	r3, [r0, #0]
 8011024:	689a      	ldr	r2, [r3, #8]
 8011026:	0752      	lsls	r2, r2, #29
 8011028:	d475      	bmi.n	8011116 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 801102a:	4a42      	ldr	r2, [pc, #264]	; (8011134 <HAL_ADC_ConfigChannel+0x12c>)
 801102c:	6848      	ldr	r0, [r1, #4]
 801102e:	4290      	cmp	r0, r2
 8011030:	d050      	beq.n	80110d4 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8011032:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8011034:	2201      	movs	r2, #1
 8011036:	680d      	ldr	r5, [r1, #0]
 8011038:	40aa      	lsls	r2, r5
 801103a:	4302      	orrs	r2, r0
 801103c:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 801103e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011040:	2280      	movs	r2, #128	; 0x80
 8011042:	0552      	lsls	r2, r2, #21
 8011044:	4293      	cmp	r3, r2
 8011046:	d013      	beq.n	8011070 <HAL_ADC_ConfigChannel+0x68>
 8011048:	3b01      	subs	r3, #1
 801104a:	2b06      	cmp	r3, #6
 801104c:	d910      	bls.n	8011070 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 801104e:	6822      	ldr	r2, [r4, #0]
 8011050:	6950      	ldr	r0, [r2, #20]
 8011052:	2307      	movs	r3, #7
 8011054:	4003      	ands	r3, r0
 8011056:	6888      	ldr	r0, [r1, #8]
 8011058:	4298      	cmp	r0, r3
 801105a:	d009      	beq.n	8011070 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 801105c:	6950      	ldr	r0, [r2, #20]
 801105e:	2307      	movs	r3, #7
 8011060:	4398      	bics	r0, r3
 8011062:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8011064:	6822      	ldr	r2, [r4, #0]
 8011066:	6950      	ldr	r0, [r2, #20]
 8011068:	688d      	ldr	r5, [r1, #8]
 801106a:	402b      	ands	r3, r5
 801106c:	4303      	orrs	r3, r0
 801106e:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011070:	680b      	ldr	r3, [r1, #0]
 8011072:	001a      	movs	r2, r3
 8011074:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011076:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011078:	2a02      	cmp	r2, #2
 801107a:	d851      	bhi.n	8011120 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801107c:	4a2e      	ldr	r2, [pc, #184]	; (8011138 <HAL_ADC_ConfigChannel+0x130>)
 801107e:	6810      	ldr	r0, [r2, #0]
 8011080:	2b10      	cmp	r3, #16
 8011082:	d024      	beq.n	80110ce <HAL_ADC_ConfigChannel+0xc6>
 8011084:	3b11      	subs	r3, #17
 8011086:	425a      	negs	r2, r3
 8011088:	415a      	adcs	r2, r3
 801108a:	4253      	negs	r3, r2
 801108c:	4a2b      	ldr	r2, [pc, #172]	; (801113c <HAL_ADC_ConfigChannel+0x134>)
 801108e:	4013      	ands	r3, r2
 8011090:	2280      	movs	r2, #128	; 0x80
 8011092:	0452      	lsls	r2, r2, #17
 8011094:	4694      	mov	ip, r2
 8011096:	4463      	add	r3, ip
 8011098:	4303      	orrs	r3, r0
 801109a:	4a27      	ldr	r2, [pc, #156]	; (8011138 <HAL_ADC_ConfigChannel+0x130>)
 801109c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801109e:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110a0:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80110a2:	2b10      	cmp	r3, #16
 80110a4:	d13c      	bne.n	8011120 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80110a6:	4b26      	ldr	r3, [pc, #152]	; (8011140 <HAL_ADC_ConfigChannel+0x138>)
 80110a8:	6818      	ldr	r0, [r3, #0]
 80110aa:	4926      	ldr	r1, [pc, #152]	; (8011144 <HAL_ADC_ConfigChannel+0x13c>)
 80110ac:	f7ef f850 	bl	8000150 <__udivsi3>
 80110b0:	0083      	lsls	r3, r0, #2
 80110b2:	1818      	adds	r0, r3, r0
 80110b4:	0040      	lsls	r0, r0, #1
 80110b6:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 80110b8:	9b01      	ldr	r3, [sp, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d035      	beq.n	801112a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 80110be:	9b01      	ldr	r3, [sp, #4]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 80110c4:	9b01      	ldr	r3, [sp, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1f9      	bne.n	80110be <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110ca:	2000      	movs	r0, #0
 80110cc:	e028      	b.n	8011120 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80110ce:	2380      	movs	r3, #128	; 0x80
 80110d0:	041b      	lsls	r3, r3, #16
 80110d2:	e7e1      	b.n	8011098 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80110d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80110d6:	2001      	movs	r0, #1
 80110d8:	680d      	ldr	r5, [r1, #0]
 80110da:	40a8      	lsls	r0, r5
 80110dc:	4382      	bics	r2, r0
 80110de:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80110e0:	680b      	ldr	r3, [r1, #0]
 80110e2:	001a      	movs	r2, r3
 80110e4:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110e6:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80110e8:	2a02      	cmp	r2, #2
 80110ea:	d819      	bhi.n	8011120 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80110ec:	4a12      	ldr	r2, [pc, #72]	; (8011138 <HAL_ADC_ConfigChannel+0x130>)
 80110ee:	6811      	ldr	r1, [r2, #0]
 80110f0:	2b10      	cmp	r3, #16
 80110f2:	d00e      	beq.n	8011112 <HAL_ADC_ConfigChannel+0x10a>
 80110f4:	3b11      	subs	r3, #17
 80110f6:	425a      	negs	r2, r3
 80110f8:	415a      	adcs	r2, r3
 80110fa:	4252      	negs	r2, r2
 80110fc:	23c0      	movs	r3, #192	; 0xc0
 80110fe:	041b      	lsls	r3, r3, #16
 8011100:	4013      	ands	r3, r2
 8011102:	4a11      	ldr	r2, [pc, #68]	; (8011148 <HAL_ADC_ConfigChannel+0x140>)
 8011104:	4694      	mov	ip, r2
 8011106:	4463      	add	r3, ip
 8011108:	400b      	ands	r3, r1
 801110a:	4a0b      	ldr	r2, [pc, #44]	; (8011138 <HAL_ADC_ConfigChannel+0x130>)
 801110c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801110e:	2000      	movs	r0, #0
 8011110:	e006      	b.n	8011120 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011112:	4b0e      	ldr	r3, [pc, #56]	; (801114c <HAL_ADC_ConfigChannel+0x144>)
 8011114:	e7f8      	b.n	8011108 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011116:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8011118:	2220      	movs	r2, #32
 801111a:	4313      	orrs	r3, r2
 801111c:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 801111e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8011120:	2340      	movs	r3, #64	; 0x40
 8011122:	2200      	movs	r2, #0
 8011124:	54e2      	strb	r2, [r4, r3]
}
 8011126:	b003      	add	sp, #12
 8011128:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801112a:	2000      	movs	r0, #0
 801112c:	e7f8      	b.n	8011120 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 801112e:	2002      	movs	r0, #2
 8011130:	e7f9      	b.n	8011126 <HAL_ADC_ConfigChannel+0x11e>
 8011132:	46c0      	nop			; (mov r8, r8)
 8011134:	00001001 	.word	0x00001001
 8011138:	40012708 	.word	0x40012708
 801113c:	ff400000 	.word	0xff400000
 8011140:	20000100 	.word	0x20000100
 8011144:	000f4240 	.word	0x000f4240
 8011148:	feffffff 	.word	0xfeffffff
 801114c:	ff7fffff 	.word	0xff7fffff

08011150 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011150:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8011152:	2800      	cmp	r0, #0
 8011154:	db14      	blt.n	8011180 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011156:	0883      	lsrs	r3, r0, #2
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	4a15      	ldr	r2, [pc, #84]	; (80111b0 <HAL_NVIC_SetPriority+0x60>)
 801115c:	4694      	mov	ip, r2
 801115e:	4463      	add	r3, ip
 8011160:	26c0      	movs	r6, #192	; 0xc0
 8011162:	00b6      	lsls	r6, r6, #2
 8011164:	599d      	ldr	r5, [r3, r6]
 8011166:	2403      	movs	r4, #3
 8011168:	4020      	ands	r0, r4
 801116a:	00c0      	lsls	r0, r0, #3
 801116c:	22ff      	movs	r2, #255	; 0xff
 801116e:	0014      	movs	r4, r2
 8011170:	4084      	lsls	r4, r0
 8011172:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011174:	0189      	lsls	r1, r1, #6
 8011176:	400a      	ands	r2, r1
 8011178:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801117a:	432a      	orrs	r2, r5
 801117c:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 801117e:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011180:	b2c0      	uxtb	r0, r0
 8011182:	230f      	movs	r3, #15
 8011184:	4003      	ands	r3, r0
 8011186:	3b08      	subs	r3, #8
 8011188:	089b      	lsrs	r3, r3, #2
 801118a:	009b      	lsls	r3, r3, #2
 801118c:	4a09      	ldr	r2, [pc, #36]	; (80111b4 <HAL_NVIC_SetPriority+0x64>)
 801118e:	4694      	mov	ip, r2
 8011190:	4463      	add	r3, ip
 8011192:	69dd      	ldr	r5, [r3, #28]
 8011194:	2203      	movs	r2, #3
 8011196:	4010      	ands	r0, r2
 8011198:	00c0      	lsls	r0, r0, #3
 801119a:	24ff      	movs	r4, #255	; 0xff
 801119c:	0022      	movs	r2, r4
 801119e:	4082      	lsls	r2, r0
 80111a0:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80111a2:	0189      	lsls	r1, r1, #6
 80111a4:	400c      	ands	r4, r1
 80111a6:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111a8:	432c      	orrs	r4, r5
 80111aa:	61dc      	str	r4, [r3, #28]
 80111ac:	e7e7      	b.n	801117e <HAL_NVIC_SetPriority+0x2e>
 80111ae:	46c0      	nop			; (mov r8, r8)
 80111b0:	e000e100 	.word	0xe000e100
 80111b4:	e000ed00 	.word	0xe000ed00

080111b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80111b8:	231f      	movs	r3, #31
 80111ba:	4018      	ands	r0, r3
 80111bc:	3b1e      	subs	r3, #30
 80111be:	4083      	lsls	r3, r0
 80111c0:	4a01      	ldr	r2, [pc, #4]	; (80111c8 <HAL_NVIC_EnableIRQ+0x10>)
 80111c2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80111c4:	4770      	bx	lr
 80111c6:	46c0      	nop			; (mov r8, r8)
 80111c8:	e000e100 	.word	0xe000e100

080111cc <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80111cc:	231f      	movs	r3, #31
 80111ce:	4018      	ands	r0, r3
 80111d0:	3b1e      	subs	r3, #30
 80111d2:	4083      	lsls	r3, r0
 80111d4:	4901      	ldr	r1, [pc, #4]	; (80111dc <HAL_NVIC_DisableIRQ+0x10>)
 80111d6:	2280      	movs	r2, #128	; 0x80
 80111d8:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80111da:	4770      	bx	lr
 80111dc:	e000e100 	.word	0xe000e100

080111e0 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 80111e0:	1e43      	subs	r3, r0, #1
 80111e2:	4a0a      	ldr	r2, [pc, #40]	; (801120c <HAL_SYSTICK_Config+0x2c>)
 80111e4:	2001      	movs	r0, #1
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d80e      	bhi.n	8011208 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80111ea:	4a09      	ldr	r2, [pc, #36]	; (8011210 <HAL_SYSTICK_Config+0x30>)
 80111ec:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111ee:	4809      	ldr	r0, [pc, #36]	; (8011214 <HAL_SYSTICK_Config+0x34>)
 80111f0:	6a03      	ldr	r3, [r0, #32]
 80111f2:	021b      	lsls	r3, r3, #8
 80111f4:	0a1b      	lsrs	r3, r3, #8
 80111f6:	21c0      	movs	r1, #192	; 0xc0
 80111f8:	0609      	lsls	r1, r1, #24
 80111fa:	430b      	orrs	r3, r1
 80111fc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80111fe:	2300      	movs	r3, #0
 8011200:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011202:	3307      	adds	r3, #7
 8011204:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8011206:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8011208:	4770      	bx	lr
 801120a:	46c0      	nop			; (mov r8, r8)
 801120c:	00ffffff 	.word	0x00ffffff
 8011210:	e000e010 	.word	0xe000e010
 8011214:	e000ed00 	.word	0xe000ed00

08011218 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8011218:	2804      	cmp	r0, #4
 801121a:	d005      	beq.n	8011228 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 801121c:	4a05      	ldr	r2, [pc, #20]	; (8011234 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801121e:	6813      	ldr	r3, [r2, #0]
 8011220:	2104      	movs	r1, #4
 8011222:	438b      	bics	r3, r1
 8011224:	6013      	str	r3, [r2, #0]
  }
}
 8011226:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8011228:	4a02      	ldr	r2, [pc, #8]	; (8011234 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801122a:	6813      	ldr	r3, [r2, #0]
 801122c:	2104      	movs	r1, #4
 801122e:	430b      	orrs	r3, r1
 8011230:	6013      	str	r3, [r2, #0]
 8011232:	e7f8      	b.n	8011226 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8011234:	e000e010 	.word	0xe000e010

08011238 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8011238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801123a:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 801123c:	0891      	lsrs	r1, r2, #2
 801123e:	d013      	beq.n	8011268 <CRC_Handle_8+0x30>
 8011240:	0034      	movs	r4, r6
 8011242:	2303      	movs	r3, #3
 8011244:	0017      	movs	r7, r2
 8011246:	439f      	bics	r7, r3
 8011248:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 801124a:	7823      	ldrb	r3, [r4, #0]
 801124c:	061b      	lsls	r3, r3, #24
 801124e:	7865      	ldrb	r5, [r4, #1]
 8011250:	042d      	lsls	r5, r5, #16
 8011252:	432b      	orrs	r3, r5
 8011254:	78e5      	ldrb	r5, [r4, #3]
 8011256:	432b      	orrs	r3, r5
 8011258:	78a5      	ldrb	r5, [r4, #2]
 801125a:	022d      	lsls	r5, r5, #8
 801125c:	432b      	orrs	r3, r5
 801125e:	6805      	ldr	r5, [r0, #0]
 8011260:	602b      	str	r3, [r5, #0]
 8011262:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8011264:	42bc      	cmp	r4, r7
 8011266:	d1f0      	bne.n	801124a <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8011268:	2303      	movs	r3, #3
 801126a:	401a      	ands	r2, r3
 801126c:	d01e      	beq.n	80112ac <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 801126e:	2a01      	cmp	r2, #1
 8011270:	d00a      	beq.n	8011288 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8011272:	2a02      	cmp	r2, #2
 8011274:	d10d      	bne.n	8011292 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8011276:	0089      	lsls	r1, r1, #2
 8011278:	5c72      	ldrb	r2, [r6, r1]
 801127a:	0212      	lsls	r2, r2, #8
 801127c:	1871      	adds	r1, r6, r1
 801127e:	784b      	ldrb	r3, [r1, #1]
 8011280:	4313      	orrs	r3, r2
 8011282:	6802      	ldr	r2, [r0, #0]
 8011284:	8013      	strh	r3, [r2, #0]
 8011286:	e011      	b.n	80112ac <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8011288:	0089      	lsls	r1, r1, #2
 801128a:	5d8b      	ldrb	r3, [r1, r6]
 801128c:	6802      	ldr	r2, [r0, #0]
 801128e:	7013      	strb	r3, [r2, #0]
 8011290:	e00c      	b.n	80112ac <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8011292:	2a03      	cmp	r2, #3
 8011294:	d10a      	bne.n	80112ac <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8011296:	0089      	lsls	r1, r1, #2
 8011298:	5c72      	ldrb	r2, [r6, r1]
 801129a:	0212      	lsls	r2, r2, #8
 801129c:	1871      	adds	r1, r6, r1
 801129e:	784b      	ldrb	r3, [r1, #1]
 80112a0:	4313      	orrs	r3, r2
 80112a2:	6802      	ldr	r2, [r0, #0]
 80112a4:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 80112a6:	788b      	ldrb	r3, [r1, #2]
 80112a8:	6802      	ldr	r2, [r0, #0]
 80112aa:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80112ac:	6803      	ldr	r3, [r0, #0]
 80112ae:	6818      	ldr	r0, [r3, #0]
}
 80112b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112b2 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80112b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112b4:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 80112b6:	0852      	lsrs	r2, r2, #1
 80112b8:	d00b      	beq.n	80112d2 <CRC_Handle_16+0x20>
 80112ba:	000c      	movs	r4, r1
 80112bc:	0097      	lsls	r7, r2, #2
 80112be:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 80112c0:	8823      	ldrh	r3, [r4, #0]
 80112c2:	041b      	lsls	r3, r3, #16
 80112c4:	8866      	ldrh	r6, [r4, #2]
 80112c6:	4333      	orrs	r3, r6
 80112c8:	6806      	ldr	r6, [r0, #0]
 80112ca:	6033      	str	r3, [r6, #0]
 80112cc:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 80112ce:	42bc      	cmp	r4, r7
 80112d0:	d1f6      	bne.n	80112c0 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 80112d2:	07eb      	lsls	r3, r5, #31
 80112d4:	d503      	bpl.n	80112de <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 80112d6:	0092      	lsls	r2, r2, #2
 80112d8:	5a53      	ldrh	r3, [r2, r1]
 80112da:	6802      	ldr	r2, [r0, #0]
 80112dc:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 80112de:	6803      	ldr	r3, [r0, #0]
 80112e0:	6818      	ldr	r0, [r3, #0]
}
 80112e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112e4 <HAL_CRC_Init>:
{
 80112e4:	b510      	push	{r4, lr}
 80112e6:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 80112e8:	d029      	beq.n	801133e <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 80112ea:	7f43      	ldrb	r3, [r0, #29]
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d01e      	beq.n	801132e <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80112f0:	2302      	movs	r3, #2
 80112f2:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80112f4:	0020      	movs	r0, r4
 80112f6:	f000 f8b1 	bl	801145c <HAL_CRCEx_Init>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	d121      	bne.n	8011342 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80112fe:	7963      	ldrb	r3, [r4, #5]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d118      	bne.n	8011336 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8011304:	6823      	ldr	r3, [r4, #0]
 8011306:	2201      	movs	r2, #1
 8011308:	4252      	negs	r2, r2
 801130a:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 801130c:	6822      	ldr	r2, [r4, #0]
 801130e:	6893      	ldr	r3, [r2, #8]
 8011310:	2160      	movs	r1, #96	; 0x60
 8011312:	438b      	bics	r3, r1
 8011314:	6961      	ldr	r1, [r4, #20]
 8011316:	430b      	orrs	r3, r1
 8011318:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801131a:	6822      	ldr	r2, [r4, #0]
 801131c:	6893      	ldr	r3, [r2, #8]
 801131e:	2180      	movs	r1, #128	; 0x80
 8011320:	438b      	bics	r3, r1
 8011322:	69a1      	ldr	r1, [r4, #24]
 8011324:	430b      	orrs	r3, r1
 8011326:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8011328:	2301      	movs	r3, #1
 801132a:	7763      	strb	r3, [r4, #29]
}
 801132c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 801132e:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8011330:	f7fc fc06 	bl	800db40 <HAL_CRC_MspInit>
 8011334:	e7dc      	b.n	80112f0 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8011336:	6823      	ldr	r3, [r4, #0]
 8011338:	6922      	ldr	r2, [r4, #16]
 801133a:	611a      	str	r2, [r3, #16]
 801133c:	e7e6      	b.n	801130c <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801133e:	2001      	movs	r0, #1
 8011340:	e7f4      	b.n	801132c <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8011342:	2001      	movs	r0, #1
 8011344:	e7f2      	b.n	801132c <HAL_CRC_Init+0x48>

08011346 <HAL_CRC_Accumulate>:
{
 8011346:	b510      	push	{r4, lr}
 8011348:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 801134a:	7f03      	ldrb	r3, [r0, #28]
 801134c:	2b01      	cmp	r3, #1
 801134e:	d024      	beq.n	801139a <HAL_CRC_Accumulate+0x54>
 8011350:	2301      	movs	r3, #1
 8011352:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8011354:	3301      	adds	r3, #1
 8011356:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8011358:	6a03      	ldr	r3, [r0, #32]
 801135a:	2b02      	cmp	r3, #2
 801135c:	d01a      	beq.n	8011394 <HAL_CRC_Accumulate+0x4e>
 801135e:	2b03      	cmp	r3, #3
 8011360:	d007      	beq.n	8011372 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8011362:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8011364:	2b01      	cmp	r3, #1
 8011366:	d011      	beq.n	801138c <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 8011368:	2301      	movs	r3, #1
 801136a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 801136c:	2300      	movs	r3, #0
 801136e:	7723      	strb	r3, [r4, #28]
}
 8011370:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8011372:	2a00      	cmp	r2, #0
 8011374:	d007      	beq.n	8011386 <HAL_CRC_Accumulate+0x40>
 8011376:	000b      	movs	r3, r1
 8011378:	0092      	lsls	r2, r2, #2
 801137a:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 801137c:	6822      	ldr	r2, [r4, #0]
 801137e:	cb01      	ldmia	r3!, {r0}
 8011380:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8011382:	428b      	cmp	r3, r1
 8011384:	d1fa      	bne.n	801137c <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8011386:	6823      	ldr	r3, [r4, #0]
 8011388:	6818      	ldr	r0, [r3, #0]
      break;
 801138a:	e7ed      	b.n	8011368 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 801138c:	0020      	movs	r0, r4
 801138e:	f7ff ff53 	bl	8011238 <CRC_Handle_8>
      break;
 8011392:	e7e9      	b.n	8011368 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8011394:	f7ff ff8d 	bl	80112b2 <CRC_Handle_16>
      break;
 8011398:	e7e6      	b.n	8011368 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 801139a:	2002      	movs	r0, #2
 801139c:	e7e8      	b.n	8011370 <HAL_CRC_Accumulate+0x2a>

0801139e <HAL_CRC_Calculate>:
{
 801139e:	b570      	push	{r4, r5, r6, lr}
 80113a0:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80113a2:	7f03      	ldrb	r3, [r0, #28]
 80113a4:	2b01      	cmp	r3, #1
 80113a6:	d029      	beq.n	80113fc <HAL_CRC_Calculate+0x5e>
 80113a8:	2501      	movs	r5, #1
 80113aa:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80113ac:	2302      	movs	r3, #2
 80113ae:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80113b0:	6800      	ldr	r0, [r0, #0]
 80113b2:	6883      	ldr	r3, [r0, #8]
 80113b4:	432b      	orrs	r3, r5
 80113b6:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 80113b8:	6a23      	ldr	r3, [r4, #32]
 80113ba:	2b02      	cmp	r3, #2
 80113bc:	d01a      	beq.n	80113f4 <HAL_CRC_Calculate+0x56>
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d007      	beq.n	80113d2 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80113c2:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d011      	beq.n	80113ec <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 80113c8:	2301      	movs	r3, #1
 80113ca:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80113cc:	2300      	movs	r3, #0
 80113ce:	7723      	strb	r3, [r4, #28]
}
 80113d0:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 80113d2:	2a00      	cmp	r2, #0
 80113d4:	d007      	beq.n	80113e6 <HAL_CRC_Calculate+0x48>
 80113d6:	000b      	movs	r3, r1
 80113d8:	0092      	lsls	r2, r2, #2
 80113da:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80113dc:	6820      	ldr	r0, [r4, #0]
 80113de:	cb20      	ldmia	r3!, {r5}
 80113e0:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 80113e2:	428b      	cmp	r3, r1
 80113e4:	d1fa      	bne.n	80113dc <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	6818      	ldr	r0, [r3, #0]
      break;
 80113ea:	e7ed      	b.n	80113c8 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80113ec:	0020      	movs	r0, r4
 80113ee:	f7ff ff23 	bl	8011238 <CRC_Handle_8>
      break;
 80113f2:	e7e9      	b.n	80113c8 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80113f4:	0020      	movs	r0, r4
 80113f6:	f7ff ff5c 	bl	80112b2 <CRC_Handle_16>
      break;
 80113fa:	e7e5      	b.n	80113c8 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 80113fc:	2002      	movs	r0, #2
 80113fe:	e7e7      	b.n	80113d0 <HAL_CRC_Calculate+0x32>

08011400 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011400:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011402:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011404:	2501      	movs	r5, #1
 8011406:	002c      	movs	r4, r5
 8011408:	409c      	lsls	r4, r3
 801140a:	4221      	tst	r1, r4
 801140c:	d10b      	bne.n	8011426 <HAL_CRCEx_Polynomial_Set+0x26>
 801140e:	3b01      	subs	r3, #1
 8011410:	d2f9      	bcs.n	8011406 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8011412:	2a10      	cmp	r2, #16
 8011414:	d01c      	beq.n	8011450 <HAL_CRCEx_Polynomial_Set+0x50>
 8011416:	2a18      	cmp	r2, #24
 8011418:	d01e      	beq.n	8011458 <HAL_CRCEx_Polynomial_Set+0x58>
 801141a:	2a08      	cmp	r2, #8
 801141c:	d109      	bne.n	8011432 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 801141e:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8011420:	2b0f      	cmp	r3, #15
 8011422:	d906      	bls.n	8011432 <HAL_CRCEx_Polynomial_Set+0x32>
 8011424:	e00e      	b.n	8011444 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8011426:	2a10      	cmp	r2, #16
 8011428:	d012      	beq.n	8011450 <HAL_CRCEx_Polynomial_Set+0x50>
 801142a:	2a18      	cmp	r2, #24
 801142c:	d00c      	beq.n	8011448 <HAL_CRCEx_Polynomial_Set+0x48>
 801142e:	2a08      	cmp	r2, #8
 8011430:	d0f5      	beq.n	801141e <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8011432:	6803      	ldr	r3, [r0, #0]
 8011434:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8011436:	6801      	ldr	r1, [r0, #0]
 8011438:	688b      	ldr	r3, [r1, #8]
 801143a:	2018      	movs	r0, #24
 801143c:	4383      	bics	r3, r0
 801143e:	431a      	orrs	r2, r3
 8011440:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8011442:	2400      	movs	r4, #0
}
 8011444:	0020      	movs	r0, r4
 8011446:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8011448:	2b06      	cmp	r3, #6
 801144a:	d9f2      	bls.n	8011432 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 801144c:	2401      	movs	r4, #1
 801144e:	e7f9      	b.n	8011444 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8011450:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8011452:	2b07      	cmp	r3, #7
 8011454:	d9ed      	bls.n	8011432 <HAL_CRCEx_Polynomial_Set+0x32>
 8011456:	e7f5      	b.n	8011444 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8011458:	2401      	movs	r4, #1
 801145a:	e7f3      	b.n	8011444 <HAL_CRCEx_Polynomial_Set+0x44>

0801145c <HAL_CRCEx_Init>:
{
 801145c:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 801145e:	7903      	ldrb	r3, [r0, #4]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d109      	bne.n	8011478 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8011464:	6803      	ldr	r3, [r0, #0]
 8011466:	4a08      	ldr	r2, [pc, #32]	; (8011488 <HAL_CRCEx_Init+0x2c>)
 8011468:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 801146a:	6802      	ldr	r2, [r0, #0]
 801146c:	6893      	ldr	r3, [r2, #8]
 801146e:	2118      	movs	r1, #24
 8011470:	438b      	bics	r3, r1
 8011472:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8011474:	2000      	movs	r0, #0
}
 8011476:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8011478:	68c2      	ldr	r2, [r0, #12]
 801147a:	6881      	ldr	r1, [r0, #8]
 801147c:	f7ff ffc0 	bl	8011400 <HAL_CRCEx_Polynomial_Set>
 8011480:	1e43      	subs	r3, r0, #1
 8011482:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8011484:	b2c0      	uxtb	r0, r0
 8011486:	e7f6      	b.n	8011476 <HAL_CRCEx_Init+0x1a>
 8011488:	04c11db7 	.word	0x04c11db7

0801148c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 801148c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 801148e:	2800      	cmp	r0, #0
 8011490:	d022      	beq.n	80114d8 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8011492:	2321      	movs	r3, #33	; 0x21
 8011494:	5cc3      	ldrb	r3, [r0, r3]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d102      	bne.n	80114a0 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 801149a:	3320      	adds	r3, #32
 801149c:	2200      	movs	r2, #0
 801149e:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80114a0:	2121      	movs	r1, #33	; 0x21
 80114a2:	2302      	movs	r3, #2
 80114a4:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80114a6:	6804      	ldr	r4, [r0, #0]
 80114a8:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80114aa:	4a0c      	ldr	r2, [pc, #48]	; (80114dc <HAL_DMA_Init+0x50>)
 80114ac:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80114ae:	6843      	ldr	r3, [r0, #4]
 80114b0:	6885      	ldr	r5, [r0, #8]
 80114b2:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80114b4:	68c5      	ldr	r5, [r0, #12]
 80114b6:	432b      	orrs	r3, r5
 80114b8:	6905      	ldr	r5, [r0, #16]
 80114ba:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80114bc:	6945      	ldr	r5, [r0, #20]
 80114be:	432b      	orrs	r3, r5
 80114c0:	6985      	ldr	r5, [r0, #24]
 80114c2:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80114c4:	69c5      	ldr	r5, [r0, #28]
 80114c6:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80114c8:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80114ca:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80114cc:	2300      	movs	r3, #0
 80114ce:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80114d0:	3301      	adds	r3, #1
 80114d2:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 80114d4:	2000      	movs	r0, #0
}  
 80114d6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80114d8:	2001      	movs	r0, #1
 80114da:	e7fc      	b.n	80114d6 <HAL_DMA_Init+0x4a>
 80114dc:	ffffc00f 	.word	0xffffc00f

080114e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80114e0:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 80114e2:	2420      	movs	r4, #32
 80114e4:	5d04      	ldrb	r4, [r0, r4]
 80114e6:	2c01      	cmp	r4, #1
 80114e8:	d02d      	beq.n	8011546 <HAL_DMA_Start_IT+0x66>
 80114ea:	2601      	movs	r6, #1
 80114ec:	2420      	movs	r4, #32
 80114ee:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 80114f0:	3401      	adds	r4, #1
 80114f2:	2502      	movs	r5, #2
 80114f4:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80114f6:	6805      	ldr	r5, [r0, #0]
 80114f8:	682c      	ldr	r4, [r5, #0]
 80114fa:	43b4      	bics	r4, r6
 80114fc:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80114fe:	6804      	ldr	r4, [r0, #0]
 8011500:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011502:	6843      	ldr	r3, [r0, #4]
 8011504:	2b10      	cmp	r3, #16
 8011506:	d019      	beq.n	801153c <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011508:	6803      	ldr	r3, [r0, #0]
 801150a:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 801150c:	6803      	ldr	r3, [r0, #0]
 801150e:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011510:	6802      	ldr	r2, [r0, #0]
 8011512:	6813      	ldr	r3, [r2, #0]
 8011514:	2102      	movs	r1, #2
 8011516:	430b      	orrs	r3, r1
 8011518:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801151a:	6802      	ldr	r2, [r0, #0]
 801151c:	6813      	ldr	r3, [r2, #0]
 801151e:	3102      	adds	r1, #2
 8011520:	430b      	orrs	r3, r1
 8011522:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011524:	6802      	ldr	r2, [r0, #0]
 8011526:	6813      	ldr	r3, [r2, #0]
 8011528:	3104      	adds	r1, #4
 801152a:	430b      	orrs	r3, r1
 801152c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801152e:	6802      	ldr	r2, [r0, #0]
 8011530:	6813      	ldr	r3, [r2, #0]
 8011532:	3907      	subs	r1, #7
 8011534:	430b      	orrs	r3, r1
 8011536:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8011538:	2000      	movs	r0, #0
} 
 801153a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 801153c:	6803      	ldr	r3, [r0, #0]
 801153e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8011540:	6803      	ldr	r3, [r0, #0]
 8011542:	60d9      	str	r1, [r3, #12]
 8011544:	e7e4      	b.n	8011510 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8011546:	2002      	movs	r0, #2
 8011548:	e7f7      	b.n	801153a <HAL_DMA_Start_IT+0x5a>

0801154a <HAL_DMA_Abort>:
{
 801154a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801154c:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801154e:	6802      	ldr	r2, [r0, #0]
 8011550:	6813      	ldr	r3, [r2, #0]
 8011552:	2101      	movs	r1, #1
 8011554:	438b      	bics	r3, r1
 8011556:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8011558:	f7ff fb16 	bl	8010b88 <HAL_GetTick>
 801155c:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801155e:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011560:	26fa      	movs	r6, #250	; 0xfa
 8011562:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8011564:	6823      	ldr	r3, [r4, #0]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	421d      	tst	r5, r3
 801156a:	d00f      	beq.n	801158c <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801156c:	f7ff fb0c 	bl	8010b88 <HAL_GetTick>
 8011570:	1bc0      	subs	r0, r0, r7
 8011572:	42b0      	cmp	r0, r6
 8011574:	d9f6      	bls.n	8011564 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8011576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011578:	2220      	movs	r2, #32
 801157a:	4313      	orrs	r3, r2
 801157c:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801157e:	2321      	movs	r3, #33	; 0x21
 8011580:	2103      	movs	r1, #3
 8011582:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011584:	2300      	movs	r3, #0
 8011586:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8011588:	2003      	movs	r0, #3
 801158a:	e006      	b.n	801159a <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 801158c:	2321      	movs	r3, #33	; 0x21
 801158e:	2201      	movs	r2, #1
 8011590:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8011592:	3b01      	subs	r3, #1
 8011594:	2200      	movs	r2, #0
 8011596:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8011598:	2000      	movs	r0, #0
}
 801159a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801159c <HAL_DMA_IRQHandler>:
{        
 801159c:	b510      	push	{r4, lr}
 801159e:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80115a0:	6803      	ldr	r3, [r0, #0]
 80115a2:	4ab4      	ldr	r2, [pc, #720]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d94d      	bls.n	8011644 <HAL_DMA_IRQHandler+0xa8>
 80115a8:	4ab3      	ldr	r2, [pc, #716]	; (8011878 <HAL_DMA_IRQHandler+0x2dc>)
 80115aa:	6811      	ldr	r1, [r2, #0]
 80115ac:	4ab3      	ldr	r2, [pc, #716]	; (801187c <HAL_DMA_IRQHandler+0x2e0>)
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d026      	beq.n	8011600 <HAL_DMA_IRQHandler+0x64>
 80115b2:	4ab3      	ldr	r2, [pc, #716]	; (8011880 <HAL_DMA_IRQHandler+0x2e4>)
 80115b4:	4293      	cmp	r3, r2
 80115b6:	d02d      	beq.n	8011614 <HAL_DMA_IRQHandler+0x78>
 80115b8:	4ab2      	ldr	r2, [pc, #712]	; (8011884 <HAL_DMA_IRQHandler+0x2e8>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d02c      	beq.n	8011618 <HAL_DMA_IRQHandler+0x7c>
 80115be:	4ab2      	ldr	r2, [pc, #712]	; (8011888 <HAL_DMA_IRQHandler+0x2ec>)
 80115c0:	4293      	cmp	r3, r2
 80115c2:	d02c      	beq.n	801161e <HAL_DMA_IRQHandler+0x82>
 80115c4:	4ab1      	ldr	r2, [pc, #708]	; (801188c <HAL_DMA_IRQHandler+0x2f0>)
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d02c      	beq.n	8011624 <HAL_DMA_IRQHandler+0x88>
 80115ca:	4ab1      	ldr	r2, [pc, #708]	; (8011890 <HAL_DMA_IRQHandler+0x2f4>)
 80115cc:	4293      	cmp	r3, r2
 80115ce:	d02c      	beq.n	801162a <HAL_DMA_IRQHandler+0x8e>
 80115d0:	4aa8      	ldr	r2, [pc, #672]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d02c      	beq.n	8011630 <HAL_DMA_IRQHandler+0x94>
 80115d6:	4aaf      	ldr	r2, [pc, #700]	; (8011894 <HAL_DMA_IRQHandler+0x2f8>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d02c      	beq.n	8011636 <HAL_DMA_IRQHandler+0x9a>
 80115dc:	4aae      	ldr	r2, [pc, #696]	; (8011898 <HAL_DMA_IRQHandler+0x2fc>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d02b      	beq.n	801163a <HAL_DMA_IRQHandler+0x9e>
 80115e2:	4aae      	ldr	r2, [pc, #696]	; (801189c <HAL_DMA_IRQHandler+0x300>)
 80115e4:	4293      	cmp	r3, r2
 80115e6:	d02a      	beq.n	801163e <HAL_DMA_IRQHandler+0xa2>
 80115e8:	4aad      	ldr	r2, [pc, #692]	; (80118a0 <HAL_DMA_IRQHandler+0x304>)
 80115ea:	189a      	adds	r2, r3, r2
 80115ec:	4250      	negs	r0, r2
 80115ee:	4142      	adcs	r2, r0
 80115f0:	4252      	negs	r2, r2
 80115f2:	48ac      	ldr	r0, [pc, #688]	; (80118a4 <HAL_DMA_IRQHandler+0x308>)
 80115f4:	4002      	ands	r2, r0
 80115f6:	2080      	movs	r0, #128	; 0x80
 80115f8:	0300      	lsls	r0, r0, #12
 80115fa:	4684      	mov	ip, r0
 80115fc:	4462      	add	r2, ip
 80115fe:	e000      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 8011600:	2208      	movs	r2, #8
 8011602:	420a      	tst	r2, r1
 8011604:	d100      	bne.n	8011608 <HAL_DMA_IRQHandler+0x6c>
 8011606:	e0e6      	b.n	80117d6 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011608:	681a      	ldr	r2, [r3, #0]
 801160a:	0712      	lsls	r2, r2, #28
 801160c:	d500      	bpl.n	8011610 <HAL_DMA_IRQHandler+0x74>
 801160e:	e097      	b.n	8011740 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011610:	6823      	ldr	r3, [r4, #0]
 8011612:	e0e0      	b.n	80117d6 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011614:	2280      	movs	r2, #128	; 0x80
 8011616:	e7f4      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 8011618:	2280      	movs	r2, #128	; 0x80
 801161a:	0112      	lsls	r2, r2, #4
 801161c:	e7f1      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 801161e:	2280      	movs	r2, #128	; 0x80
 8011620:	0212      	lsls	r2, r2, #8
 8011622:	e7ee      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 8011624:	2280      	movs	r2, #128	; 0x80
 8011626:	0312      	lsls	r2, r2, #12
 8011628:	e7eb      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 801162a:	2280      	movs	r2, #128	; 0x80
 801162c:	0412      	lsls	r2, r2, #16
 801162e:	e7e8      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 8011630:	2280      	movs	r2, #128	; 0x80
 8011632:	0512      	lsls	r2, r2, #20
 8011634:	e7e5      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 8011636:	2208      	movs	r2, #8
 8011638:	e7e3      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 801163a:	2280      	movs	r2, #128	; 0x80
 801163c:	e7e1      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 801163e:	2280      	movs	r2, #128	; 0x80
 8011640:	0112      	lsls	r2, r2, #4
 8011642:	e7de      	b.n	8011602 <HAL_DMA_IRQHandler+0x66>
 8011644:	4a98      	ldr	r2, [pc, #608]	; (80118a8 <HAL_DMA_IRQHandler+0x30c>)
 8011646:	6811      	ldr	r1, [r2, #0]
 8011648:	4a8c      	ldr	r2, [pc, #560]	; (801187c <HAL_DMA_IRQHandler+0x2e0>)
 801164a:	4293      	cmp	r3, r2
 801164c:	d026      	beq.n	801169c <HAL_DMA_IRQHandler+0x100>
 801164e:	4a8c      	ldr	r2, [pc, #560]	; (8011880 <HAL_DMA_IRQHandler+0x2e4>)
 8011650:	4293      	cmp	r3, r2
 8011652:	d05d      	beq.n	8011710 <HAL_DMA_IRQHandler+0x174>
 8011654:	4a8b      	ldr	r2, [pc, #556]	; (8011884 <HAL_DMA_IRQHandler+0x2e8>)
 8011656:	4293      	cmp	r3, r2
 8011658:	d05c      	beq.n	8011714 <HAL_DMA_IRQHandler+0x178>
 801165a:	4a8b      	ldr	r2, [pc, #556]	; (8011888 <HAL_DMA_IRQHandler+0x2ec>)
 801165c:	4293      	cmp	r3, r2
 801165e:	d05c      	beq.n	801171a <HAL_DMA_IRQHandler+0x17e>
 8011660:	4a8a      	ldr	r2, [pc, #552]	; (801188c <HAL_DMA_IRQHandler+0x2f0>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d05c      	beq.n	8011720 <HAL_DMA_IRQHandler+0x184>
 8011666:	4a8a      	ldr	r2, [pc, #552]	; (8011890 <HAL_DMA_IRQHandler+0x2f4>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d05c      	beq.n	8011726 <HAL_DMA_IRQHandler+0x18a>
 801166c:	4a81      	ldr	r2, [pc, #516]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 801166e:	4293      	cmp	r3, r2
 8011670:	d05c      	beq.n	801172c <HAL_DMA_IRQHandler+0x190>
 8011672:	4a88      	ldr	r2, [pc, #544]	; (8011894 <HAL_DMA_IRQHandler+0x2f8>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d05c      	beq.n	8011732 <HAL_DMA_IRQHandler+0x196>
 8011678:	4a87      	ldr	r2, [pc, #540]	; (8011898 <HAL_DMA_IRQHandler+0x2fc>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d05b      	beq.n	8011736 <HAL_DMA_IRQHandler+0x19a>
 801167e:	4a87      	ldr	r2, [pc, #540]	; (801189c <HAL_DMA_IRQHandler+0x300>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d05a      	beq.n	801173a <HAL_DMA_IRQHandler+0x19e>
 8011684:	4a86      	ldr	r2, [pc, #536]	; (80118a0 <HAL_DMA_IRQHandler+0x304>)
 8011686:	189a      	adds	r2, r3, r2
 8011688:	4250      	negs	r0, r2
 801168a:	4142      	adcs	r2, r0
 801168c:	4252      	negs	r2, r2
 801168e:	4885      	ldr	r0, [pc, #532]	; (80118a4 <HAL_DMA_IRQHandler+0x308>)
 8011690:	4002      	ands	r2, r0
 8011692:	2080      	movs	r0, #128	; 0x80
 8011694:	0300      	lsls	r0, r0, #12
 8011696:	4684      	mov	ip, r0
 8011698:	4462      	add	r2, ip
 801169a:	e000      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 801169c:	2208      	movs	r2, #8
 801169e:	420a      	tst	r2, r1
 80116a0:	d000      	beq.n	80116a4 <HAL_DMA_IRQHandler+0x108>
 80116a2:	e3ad      	b.n	8011e00 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80116a4:	4a80      	ldr	r2, [pc, #512]	; (80118a8 <HAL_DMA_IRQHandler+0x30c>)
 80116a6:	6811      	ldr	r1, [r2, #0]
 80116a8:	4a74      	ldr	r2, [pc, #464]	; (801187c <HAL_DMA_IRQHandler+0x2e0>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d100      	bne.n	80116b0 <HAL_DMA_IRQHandler+0x114>
 80116ae:	e198      	b.n	80119e2 <HAL_DMA_IRQHandler+0x446>
 80116b0:	4a73      	ldr	r2, [pc, #460]	; (8011880 <HAL_DMA_IRQHandler+0x2e4>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d100      	bne.n	80116b8 <HAL_DMA_IRQHandler+0x11c>
 80116b6:	e1da      	b.n	8011a6e <HAL_DMA_IRQHandler+0x4d2>
 80116b8:	4a72      	ldr	r2, [pc, #456]	; (8011884 <HAL_DMA_IRQHandler+0x2e8>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d100      	bne.n	80116c0 <HAL_DMA_IRQHandler+0x124>
 80116be:	e1d8      	b.n	8011a72 <HAL_DMA_IRQHandler+0x4d6>
 80116c0:	4a71      	ldr	r2, [pc, #452]	; (8011888 <HAL_DMA_IRQHandler+0x2ec>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d100      	bne.n	80116c8 <HAL_DMA_IRQHandler+0x12c>
 80116c6:	e1d7      	b.n	8011a78 <HAL_DMA_IRQHandler+0x4dc>
 80116c8:	4a70      	ldr	r2, [pc, #448]	; (801188c <HAL_DMA_IRQHandler+0x2f0>)
 80116ca:	4293      	cmp	r3, r2
 80116cc:	d100      	bne.n	80116d0 <HAL_DMA_IRQHandler+0x134>
 80116ce:	e1d6      	b.n	8011a7e <HAL_DMA_IRQHandler+0x4e2>
 80116d0:	4a6f      	ldr	r2, [pc, #444]	; (8011890 <HAL_DMA_IRQHandler+0x2f4>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d100      	bne.n	80116d8 <HAL_DMA_IRQHandler+0x13c>
 80116d6:	e1d5      	b.n	8011a84 <HAL_DMA_IRQHandler+0x4e8>
 80116d8:	4a66      	ldr	r2, [pc, #408]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d100      	bne.n	80116e0 <HAL_DMA_IRQHandler+0x144>
 80116de:	e1d4      	b.n	8011a8a <HAL_DMA_IRQHandler+0x4ee>
 80116e0:	4a6c      	ldr	r2, [pc, #432]	; (8011894 <HAL_DMA_IRQHandler+0x2f8>)
 80116e2:	4293      	cmp	r3, r2
 80116e4:	d100      	bne.n	80116e8 <HAL_DMA_IRQHandler+0x14c>
 80116e6:	e1d3      	b.n	8011a90 <HAL_DMA_IRQHandler+0x4f4>
 80116e8:	4a6b      	ldr	r2, [pc, #428]	; (8011898 <HAL_DMA_IRQHandler+0x2fc>)
 80116ea:	4293      	cmp	r3, r2
 80116ec:	d100      	bne.n	80116f0 <HAL_DMA_IRQHandler+0x154>
 80116ee:	e1d1      	b.n	8011a94 <HAL_DMA_IRQHandler+0x4f8>
 80116f0:	4a6a      	ldr	r2, [pc, #424]	; (801189c <HAL_DMA_IRQHandler+0x300>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d100      	bne.n	80116f8 <HAL_DMA_IRQHandler+0x15c>
 80116f6:	e1cf      	b.n	8011a98 <HAL_DMA_IRQHandler+0x4fc>
 80116f8:	4a69      	ldr	r2, [pc, #420]	; (80118a0 <HAL_DMA_IRQHandler+0x304>)
 80116fa:	189a      	adds	r2, r3, r2
 80116fc:	4250      	negs	r0, r2
 80116fe:	4142      	adcs	r2, r0
 8011700:	4252      	negs	r2, r2
 8011702:	486a      	ldr	r0, [pc, #424]	; (80118ac <HAL_DMA_IRQHandler+0x310>)
 8011704:	4002      	ands	r2, r0
 8011706:	2080      	movs	r0, #128	; 0x80
 8011708:	02c0      	lsls	r0, r0, #11
 801170a:	4684      	mov	ip, r0
 801170c:	4462      	add	r2, ip
 801170e:	e169      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011710:	2280      	movs	r2, #128	; 0x80
 8011712:	e7c4      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 8011714:	2280      	movs	r2, #128	; 0x80
 8011716:	0112      	lsls	r2, r2, #4
 8011718:	e7c1      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 801171a:	2280      	movs	r2, #128	; 0x80
 801171c:	0212      	lsls	r2, r2, #8
 801171e:	e7be      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 8011720:	2280      	movs	r2, #128	; 0x80
 8011722:	0312      	lsls	r2, r2, #12
 8011724:	e7bb      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 8011726:	2280      	movs	r2, #128	; 0x80
 8011728:	0412      	lsls	r2, r2, #16
 801172a:	e7b8      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 801172c:	2280      	movs	r2, #128	; 0x80
 801172e:	0512      	lsls	r2, r2, #20
 8011730:	e7b5      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 8011732:	2208      	movs	r2, #8
 8011734:	e7b3      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 8011736:	2280      	movs	r2, #128	; 0x80
 8011738:	e7b1      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
 801173a:	2280      	movs	r2, #128	; 0x80
 801173c:	0112      	lsls	r2, r2, #4
 801173e:	e7ae      	b.n	801169e <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	2108      	movs	r1, #8
 8011744:	438a      	bics	r2, r1
 8011746:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011748:	6823      	ldr	r3, [r4, #0]
 801174a:	4a4a      	ldr	r2, [pc, #296]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 801174c:	4293      	cmp	r3, r2
 801174e:	d800      	bhi.n	8011752 <HAL_DMA_IRQHandler+0x1b6>
 8011750:	e0ae      	b.n	80118b0 <HAL_DMA_IRQHandler+0x314>
 8011752:	4a4a      	ldr	r2, [pc, #296]	; (801187c <HAL_DMA_IRQHandler+0x2e0>)
 8011754:	4293      	cmp	r3, r2
 8011756:	d027      	beq.n	80117a8 <HAL_DMA_IRQHandler+0x20c>
 8011758:	4a49      	ldr	r2, [pc, #292]	; (8011880 <HAL_DMA_IRQHandler+0x2e4>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d071      	beq.n	8011842 <HAL_DMA_IRQHandler+0x2a6>
 801175e:	4a49      	ldr	r2, [pc, #292]	; (8011884 <HAL_DMA_IRQHandler+0x2e8>)
 8011760:	4293      	cmp	r3, r2
 8011762:	d070      	beq.n	8011846 <HAL_DMA_IRQHandler+0x2aa>
 8011764:	4a48      	ldr	r2, [pc, #288]	; (8011888 <HAL_DMA_IRQHandler+0x2ec>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d070      	beq.n	801184c <HAL_DMA_IRQHandler+0x2b0>
 801176a:	4a48      	ldr	r2, [pc, #288]	; (801188c <HAL_DMA_IRQHandler+0x2f0>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d070      	beq.n	8011852 <HAL_DMA_IRQHandler+0x2b6>
 8011770:	4a47      	ldr	r2, [pc, #284]	; (8011890 <HAL_DMA_IRQHandler+0x2f4>)
 8011772:	4293      	cmp	r3, r2
 8011774:	d070      	beq.n	8011858 <HAL_DMA_IRQHandler+0x2bc>
 8011776:	4a3f      	ldr	r2, [pc, #252]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 8011778:	4293      	cmp	r3, r2
 801177a:	d070      	beq.n	801185e <HAL_DMA_IRQHandler+0x2c2>
 801177c:	4a45      	ldr	r2, [pc, #276]	; (8011894 <HAL_DMA_IRQHandler+0x2f8>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d070      	beq.n	8011864 <HAL_DMA_IRQHandler+0x2c8>
 8011782:	4a45      	ldr	r2, [pc, #276]	; (8011898 <HAL_DMA_IRQHandler+0x2fc>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d06f      	beq.n	8011868 <HAL_DMA_IRQHandler+0x2cc>
 8011788:	4a44      	ldr	r2, [pc, #272]	; (801189c <HAL_DMA_IRQHandler+0x300>)
 801178a:	4293      	cmp	r3, r2
 801178c:	d06e      	beq.n	801186c <HAL_DMA_IRQHandler+0x2d0>
 801178e:	4a44      	ldr	r2, [pc, #272]	; (80118a0 <HAL_DMA_IRQHandler+0x304>)
 8011790:	4694      	mov	ip, r2
 8011792:	4463      	add	r3, ip
 8011794:	425a      	negs	r2, r3
 8011796:	4153      	adcs	r3, r2
 8011798:	425b      	negs	r3, r3
 801179a:	4a42      	ldr	r2, [pc, #264]	; (80118a4 <HAL_DMA_IRQHandler+0x308>)
 801179c:	4013      	ands	r3, r2
 801179e:	2280      	movs	r2, #128	; 0x80
 80117a0:	0312      	lsls	r2, r2, #12
 80117a2:	4694      	mov	ip, r2
 80117a4:	4463      	add	r3, ip
 80117a6:	e000      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 80117a8:	2308      	movs	r3, #8
 80117aa:	4a33      	ldr	r2, [pc, #204]	; (8011878 <HAL_DMA_IRQHandler+0x2dc>)
 80117ac:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80117ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80117b0:	2201      	movs	r2, #1
 80117b2:	4313      	orrs	r3, r2
 80117b4:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80117b6:	2321      	movs	r3, #33	; 0x21
 80117b8:	3203      	adds	r2, #3
 80117ba:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80117bc:	3b01      	subs	r3, #1
 80117be:	2200      	movs	r2, #0
 80117c0:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80117c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d001      	beq.n	80117cc <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 80117c8:	0020      	movs	r0, r4
 80117ca:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80117cc:	6823      	ldr	r3, [r4, #0]
 80117ce:	4a29      	ldr	r2, [pc, #164]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d800      	bhi.n	80117d6 <HAL_DMA_IRQHandler+0x23a>
 80117d4:	e766      	b.n	80116a4 <HAL_DMA_IRQHandler+0x108>
 80117d6:	4a28      	ldr	r2, [pc, #160]	; (8011878 <HAL_DMA_IRQHandler+0x2dc>)
 80117d8:	6811      	ldr	r1, [r2, #0]
 80117da:	4a28      	ldr	r2, [pc, #160]	; (801187c <HAL_DMA_IRQHandler+0x2e0>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d100      	bne.n	80117e2 <HAL_DMA_IRQHandler+0x246>
 80117e0:	e0ad      	b.n	801193e <HAL_DMA_IRQHandler+0x3a2>
 80117e2:	4a27      	ldr	r2, [pc, #156]	; (8011880 <HAL_DMA_IRQHandler+0x2e4>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d100      	bne.n	80117ea <HAL_DMA_IRQHandler+0x24e>
 80117e8:	e0e3      	b.n	80119b2 <HAL_DMA_IRQHandler+0x416>
 80117ea:	4a26      	ldr	r2, [pc, #152]	; (8011884 <HAL_DMA_IRQHandler+0x2e8>)
 80117ec:	4293      	cmp	r3, r2
 80117ee:	d100      	bne.n	80117f2 <HAL_DMA_IRQHandler+0x256>
 80117f0:	e0e1      	b.n	80119b6 <HAL_DMA_IRQHandler+0x41a>
 80117f2:	4a25      	ldr	r2, [pc, #148]	; (8011888 <HAL_DMA_IRQHandler+0x2ec>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d100      	bne.n	80117fa <HAL_DMA_IRQHandler+0x25e>
 80117f8:	e0e0      	b.n	80119bc <HAL_DMA_IRQHandler+0x420>
 80117fa:	4a24      	ldr	r2, [pc, #144]	; (801188c <HAL_DMA_IRQHandler+0x2f0>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d100      	bne.n	8011802 <HAL_DMA_IRQHandler+0x266>
 8011800:	e0df      	b.n	80119c2 <HAL_DMA_IRQHandler+0x426>
 8011802:	4a23      	ldr	r2, [pc, #140]	; (8011890 <HAL_DMA_IRQHandler+0x2f4>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d100      	bne.n	801180a <HAL_DMA_IRQHandler+0x26e>
 8011808:	e0de      	b.n	80119c8 <HAL_DMA_IRQHandler+0x42c>
 801180a:	4a1a      	ldr	r2, [pc, #104]	; (8011874 <HAL_DMA_IRQHandler+0x2d8>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d100      	bne.n	8011812 <HAL_DMA_IRQHandler+0x276>
 8011810:	e0dd      	b.n	80119ce <HAL_DMA_IRQHandler+0x432>
 8011812:	4a20      	ldr	r2, [pc, #128]	; (8011894 <HAL_DMA_IRQHandler+0x2f8>)
 8011814:	4293      	cmp	r3, r2
 8011816:	d100      	bne.n	801181a <HAL_DMA_IRQHandler+0x27e>
 8011818:	e0dc      	b.n	80119d4 <HAL_DMA_IRQHandler+0x438>
 801181a:	4a1f      	ldr	r2, [pc, #124]	; (8011898 <HAL_DMA_IRQHandler+0x2fc>)
 801181c:	4293      	cmp	r3, r2
 801181e:	d100      	bne.n	8011822 <HAL_DMA_IRQHandler+0x286>
 8011820:	e0da      	b.n	80119d8 <HAL_DMA_IRQHandler+0x43c>
 8011822:	4a1e      	ldr	r2, [pc, #120]	; (801189c <HAL_DMA_IRQHandler+0x300>)
 8011824:	4293      	cmp	r3, r2
 8011826:	d100      	bne.n	801182a <HAL_DMA_IRQHandler+0x28e>
 8011828:	e0d8      	b.n	80119dc <HAL_DMA_IRQHandler+0x440>
 801182a:	4a1d      	ldr	r2, [pc, #116]	; (80118a0 <HAL_DMA_IRQHandler+0x304>)
 801182c:	189a      	adds	r2, r3, r2
 801182e:	4250      	negs	r0, r2
 8011830:	4142      	adcs	r2, r0
 8011832:	4252      	negs	r2, r2
 8011834:	481d      	ldr	r0, [pc, #116]	; (80118ac <HAL_DMA_IRQHandler+0x310>)
 8011836:	4002      	ands	r2, r0
 8011838:	2080      	movs	r0, #128	; 0x80
 801183a:	02c0      	lsls	r0, r0, #11
 801183c:	4684      	mov	ip, r0
 801183e:	4462      	add	r2, ip
 8011840:	e07e      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011842:	2380      	movs	r3, #128	; 0x80
 8011844:	e7b1      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 8011846:	2380      	movs	r3, #128	; 0x80
 8011848:	011b      	lsls	r3, r3, #4
 801184a:	e7ae      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 801184c:	2380      	movs	r3, #128	; 0x80
 801184e:	021b      	lsls	r3, r3, #8
 8011850:	e7ab      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 8011852:	2380      	movs	r3, #128	; 0x80
 8011854:	031b      	lsls	r3, r3, #12
 8011856:	e7a8      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 8011858:	2380      	movs	r3, #128	; 0x80
 801185a:	041b      	lsls	r3, r3, #16
 801185c:	e7a5      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 801185e:	2380      	movs	r3, #128	; 0x80
 8011860:	051b      	lsls	r3, r3, #20
 8011862:	e7a2      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 8011864:	2308      	movs	r3, #8
 8011866:	e7a0      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 8011868:	2380      	movs	r3, #128	; 0x80
 801186a:	e79e      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 801186c:	2380      	movs	r3, #128	; 0x80
 801186e:	011b      	lsls	r3, r3, #4
 8011870:	e79b      	b.n	80117aa <HAL_DMA_IRQHandler+0x20e>
 8011872:	46c0      	nop			; (mov r8, r8)
 8011874:	40020080 	.word	0x40020080
 8011878:	40020400 	.word	0x40020400
 801187c:	40020008 	.word	0x40020008
 8011880:	4002001c 	.word	0x4002001c
 8011884:	40020030 	.word	0x40020030
 8011888:	40020044 	.word	0x40020044
 801188c:	40020058 	.word	0x40020058
 8011890:	4002006c 	.word	0x4002006c
 8011894:	40020408 	.word	0x40020408
 8011898:	4002041c 	.word	0x4002041c
 801189c:	40020430 	.word	0x40020430
 80118a0:	bffdfbbc 	.word	0xbffdfbbc
 80118a4:	fff88000 	.word	0xfff88000
 80118a8:	40020000 	.word	0x40020000
 80118ac:	fffc4000 	.word	0xfffc4000
 80118b0:	4aaa      	ldr	r2, [pc, #680]	; (8011b5c <HAL_DMA_IRQHandler+0x5c0>)
 80118b2:	4293      	cmp	r3, r2
 80118b4:	d027      	beq.n	8011906 <HAL_DMA_IRQHandler+0x36a>
 80118b6:	4aaa      	ldr	r2, [pc, #680]	; (8011b60 <HAL_DMA_IRQHandler+0x5c4>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d028      	beq.n	801190e <HAL_DMA_IRQHandler+0x372>
 80118bc:	4aa9      	ldr	r2, [pc, #676]	; (8011b64 <HAL_DMA_IRQHandler+0x5c8>)
 80118be:	4293      	cmp	r3, r2
 80118c0:	d027      	beq.n	8011912 <HAL_DMA_IRQHandler+0x376>
 80118c2:	4aa9      	ldr	r2, [pc, #676]	; (8011b68 <HAL_DMA_IRQHandler+0x5cc>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	d027      	beq.n	8011918 <HAL_DMA_IRQHandler+0x37c>
 80118c8:	4aa8      	ldr	r2, [pc, #672]	; (8011b6c <HAL_DMA_IRQHandler+0x5d0>)
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d027      	beq.n	801191e <HAL_DMA_IRQHandler+0x382>
 80118ce:	4aa8      	ldr	r2, [pc, #672]	; (8011b70 <HAL_DMA_IRQHandler+0x5d4>)
 80118d0:	4293      	cmp	r3, r2
 80118d2:	d027      	beq.n	8011924 <HAL_DMA_IRQHandler+0x388>
 80118d4:	4aa7      	ldr	r2, [pc, #668]	; (8011b74 <HAL_DMA_IRQHandler+0x5d8>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d027      	beq.n	801192a <HAL_DMA_IRQHandler+0x38e>
 80118da:	4aa7      	ldr	r2, [pc, #668]	; (8011b78 <HAL_DMA_IRQHandler+0x5dc>)
 80118dc:	4293      	cmp	r3, r2
 80118de:	d027      	beq.n	8011930 <HAL_DMA_IRQHandler+0x394>
 80118e0:	4aa6      	ldr	r2, [pc, #664]	; (8011b7c <HAL_DMA_IRQHandler+0x5e0>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d026      	beq.n	8011934 <HAL_DMA_IRQHandler+0x398>
 80118e6:	4aa6      	ldr	r2, [pc, #664]	; (8011b80 <HAL_DMA_IRQHandler+0x5e4>)
 80118e8:	4293      	cmp	r3, r2
 80118ea:	d025      	beq.n	8011938 <HAL_DMA_IRQHandler+0x39c>
 80118ec:	4aa5      	ldr	r2, [pc, #660]	; (8011b84 <HAL_DMA_IRQHandler+0x5e8>)
 80118ee:	4694      	mov	ip, r2
 80118f0:	4463      	add	r3, ip
 80118f2:	425a      	negs	r2, r3
 80118f4:	4153      	adcs	r3, r2
 80118f6:	425b      	negs	r3, r3
 80118f8:	4aa3      	ldr	r2, [pc, #652]	; (8011b88 <HAL_DMA_IRQHandler+0x5ec>)
 80118fa:	4013      	ands	r3, r2
 80118fc:	2280      	movs	r2, #128	; 0x80
 80118fe:	0312      	lsls	r2, r2, #12
 8011900:	4694      	mov	ip, r2
 8011902:	4463      	add	r3, ip
 8011904:	e000      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 8011906:	2308      	movs	r3, #8
 8011908:	4aa0      	ldr	r2, [pc, #640]	; (8011b8c <HAL_DMA_IRQHandler+0x5f0>)
 801190a:	6053      	str	r3, [r2, #4]
 801190c:	e74f      	b.n	80117ae <HAL_DMA_IRQHandler+0x212>
 801190e:	2380      	movs	r3, #128	; 0x80
 8011910:	e7fa      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 8011912:	2380      	movs	r3, #128	; 0x80
 8011914:	011b      	lsls	r3, r3, #4
 8011916:	e7f7      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 8011918:	2380      	movs	r3, #128	; 0x80
 801191a:	021b      	lsls	r3, r3, #8
 801191c:	e7f4      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 801191e:	2380      	movs	r3, #128	; 0x80
 8011920:	031b      	lsls	r3, r3, #12
 8011922:	e7f1      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 8011924:	2380      	movs	r3, #128	; 0x80
 8011926:	041b      	lsls	r3, r3, #16
 8011928:	e7ee      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 801192a:	2380      	movs	r3, #128	; 0x80
 801192c:	051b      	lsls	r3, r3, #20
 801192e:	e7eb      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 8011930:	2308      	movs	r3, #8
 8011932:	e7e9      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 8011934:	2380      	movs	r3, #128	; 0x80
 8011936:	e7e7      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
 8011938:	2380      	movs	r3, #128	; 0x80
 801193a:	011b      	lsls	r3, r3, #4
 801193c:	e7e4      	b.n	8011908 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801193e:	2204      	movs	r2, #4
 8011940:	420a      	tst	r2, r1
 8011942:	d152      	bne.n	80119ea <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011944:	6821      	ldr	r1, [r4, #0]
 8011946:	4b92      	ldr	r3, [pc, #584]	; (8011b90 <HAL_DMA_IRQHandler+0x5f4>)
 8011948:	6818      	ldr	r0, [r3, #0]
 801194a:	4a84      	ldr	r2, [pc, #528]	; (8011b5c <HAL_DMA_IRQHandler+0x5c0>)
 801194c:	4291      	cmp	r1, r2
 801194e:	d100      	bne.n	8011952 <HAL_DMA_IRQHandler+0x3b6>
 8011950:	e16b      	b.n	8011c2a <HAL_DMA_IRQHandler+0x68e>
 8011952:	4a83      	ldr	r2, [pc, #524]	; (8011b60 <HAL_DMA_IRQHandler+0x5c4>)
 8011954:	4291      	cmp	r1, r2
 8011956:	d100      	bne.n	801195a <HAL_DMA_IRQHandler+0x3be>
 8011958:	e1aa      	b.n	8011cb0 <HAL_DMA_IRQHandler+0x714>
 801195a:	4a82      	ldr	r2, [pc, #520]	; (8011b64 <HAL_DMA_IRQHandler+0x5c8>)
 801195c:	4291      	cmp	r1, r2
 801195e:	d100      	bne.n	8011962 <HAL_DMA_IRQHandler+0x3c6>
 8011960:	e1a8      	b.n	8011cb4 <HAL_DMA_IRQHandler+0x718>
 8011962:	4a81      	ldr	r2, [pc, #516]	; (8011b68 <HAL_DMA_IRQHandler+0x5cc>)
 8011964:	4291      	cmp	r1, r2
 8011966:	d100      	bne.n	801196a <HAL_DMA_IRQHandler+0x3ce>
 8011968:	e1a7      	b.n	8011cba <HAL_DMA_IRQHandler+0x71e>
 801196a:	4b80      	ldr	r3, [pc, #512]	; (8011b6c <HAL_DMA_IRQHandler+0x5d0>)
 801196c:	4299      	cmp	r1, r3
 801196e:	d100      	bne.n	8011972 <HAL_DMA_IRQHandler+0x3d6>
 8011970:	e1a6      	b.n	8011cc0 <HAL_DMA_IRQHandler+0x724>
 8011972:	4b7f      	ldr	r3, [pc, #508]	; (8011b70 <HAL_DMA_IRQHandler+0x5d4>)
 8011974:	4299      	cmp	r1, r3
 8011976:	d100      	bne.n	801197a <HAL_DMA_IRQHandler+0x3de>
 8011978:	e1a5      	b.n	8011cc6 <HAL_DMA_IRQHandler+0x72a>
 801197a:	4b7e      	ldr	r3, [pc, #504]	; (8011b74 <HAL_DMA_IRQHandler+0x5d8>)
 801197c:	4299      	cmp	r1, r3
 801197e:	d100      	bne.n	8011982 <HAL_DMA_IRQHandler+0x3e6>
 8011980:	e1a4      	b.n	8011ccc <HAL_DMA_IRQHandler+0x730>
 8011982:	4b7d      	ldr	r3, [pc, #500]	; (8011b78 <HAL_DMA_IRQHandler+0x5dc>)
 8011984:	4299      	cmp	r1, r3
 8011986:	d100      	bne.n	801198a <HAL_DMA_IRQHandler+0x3ee>
 8011988:	e1a3      	b.n	8011cd2 <HAL_DMA_IRQHandler+0x736>
 801198a:	4b7c      	ldr	r3, [pc, #496]	; (8011b7c <HAL_DMA_IRQHandler+0x5e0>)
 801198c:	4299      	cmp	r1, r3
 801198e:	d100      	bne.n	8011992 <HAL_DMA_IRQHandler+0x3f6>
 8011990:	e1a1      	b.n	8011cd6 <HAL_DMA_IRQHandler+0x73a>
 8011992:	4b7b      	ldr	r3, [pc, #492]	; (8011b80 <HAL_DMA_IRQHandler+0x5e4>)
 8011994:	4299      	cmp	r1, r3
 8011996:	d100      	bne.n	801199a <HAL_DMA_IRQHandler+0x3fe>
 8011998:	e19f      	b.n	8011cda <HAL_DMA_IRQHandler+0x73e>
 801199a:	4b7a      	ldr	r3, [pc, #488]	; (8011b84 <HAL_DMA_IRQHandler+0x5e8>)
 801199c:	18ca      	adds	r2, r1, r3
 801199e:	4253      	negs	r3, r2
 80119a0:	415a      	adcs	r2, r3
 80119a2:	4252      	negs	r2, r2
 80119a4:	4b7b      	ldr	r3, [pc, #492]	; (8011b94 <HAL_DMA_IRQHandler+0x5f8>)
 80119a6:	4013      	ands	r3, r2
 80119a8:	2280      	movs	r2, #128	; 0x80
 80119aa:	0292      	lsls	r2, r2, #10
 80119ac:	4694      	mov	ip, r2
 80119ae:	4463      	add	r3, ip
 80119b0:	e13c      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80119b2:	2240      	movs	r2, #64	; 0x40
 80119b4:	e7c4      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119b6:	2280      	movs	r2, #128	; 0x80
 80119b8:	00d2      	lsls	r2, r2, #3
 80119ba:	e7c1      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119bc:	2280      	movs	r2, #128	; 0x80
 80119be:	01d2      	lsls	r2, r2, #7
 80119c0:	e7be      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119c2:	2280      	movs	r2, #128	; 0x80
 80119c4:	02d2      	lsls	r2, r2, #11
 80119c6:	e7bb      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119c8:	2280      	movs	r2, #128	; 0x80
 80119ca:	03d2      	lsls	r2, r2, #15
 80119cc:	e7b8      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119ce:	2280      	movs	r2, #128	; 0x80
 80119d0:	04d2      	lsls	r2, r2, #19
 80119d2:	e7b5      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119d4:	2204      	movs	r2, #4
 80119d6:	e7b3      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119d8:	2240      	movs	r2, #64	; 0x40
 80119da:	e7b1      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119dc:	2280      	movs	r2, #128	; 0x80
 80119de:	00d2      	lsls	r2, r2, #3
 80119e0:	e7ae      	b.n	8011940 <HAL_DMA_IRQHandler+0x3a4>
 80119e2:	2204      	movs	r2, #4
 80119e4:	420a      	tst	r2, r1
 80119e6:	d100      	bne.n	80119ea <HAL_DMA_IRQHandler+0x44e>
 80119e8:	e208      	b.n	8011dfc <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80119ea:	681a      	ldr	r2, [r3, #0]
 80119ec:	0752      	lsls	r2, r2, #29
 80119ee:	d561      	bpl.n	8011ab4 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80119f0:	681a      	ldr	r2, [r3, #0]
 80119f2:	0692      	lsls	r2, r2, #26
 80119f4:	d403      	bmi.n	80119fe <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80119f6:	681a      	ldr	r2, [r3, #0]
 80119f8:	2104      	movs	r1, #4
 80119fa:	438a      	bics	r2, r1
 80119fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80119fe:	6823      	ldr	r3, [r4, #0]
 8011a00:	4a5c      	ldr	r2, [pc, #368]	; (8011b74 <HAL_DMA_IRQHandler+0x5d8>)
 8011a02:	4293      	cmp	r3, r2
 8011a04:	d800      	bhi.n	8011a08 <HAL_DMA_IRQHandler+0x46c>
 8011a06:	e0c9      	b.n	8011b9c <HAL_DMA_IRQHandler+0x600>
 8011a08:	4a54      	ldr	r2, [pc, #336]	; (8011b5c <HAL_DMA_IRQHandler+0x5c0>)
 8011a0a:	4293      	cmp	r3, r2
 8011a0c:	d047      	beq.n	8011a9e <HAL_DMA_IRQHandler+0x502>
 8011a0e:	4a54      	ldr	r2, [pc, #336]	; (8011b60 <HAL_DMA_IRQHandler+0x5c4>)
 8011a10:	4293      	cmp	r3, r2
 8011a12:	d100      	bne.n	8011a16 <HAL_DMA_IRQHandler+0x47a>
 8011a14:	e089      	b.n	8011b2a <HAL_DMA_IRQHandler+0x58e>
 8011a16:	4a53      	ldr	r2, [pc, #332]	; (8011b64 <HAL_DMA_IRQHandler+0x5c8>)
 8011a18:	4293      	cmp	r3, r2
 8011a1a:	d100      	bne.n	8011a1e <HAL_DMA_IRQHandler+0x482>
 8011a1c:	e087      	b.n	8011b2e <HAL_DMA_IRQHandler+0x592>
 8011a1e:	4a52      	ldr	r2, [pc, #328]	; (8011b68 <HAL_DMA_IRQHandler+0x5cc>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d100      	bne.n	8011a26 <HAL_DMA_IRQHandler+0x48a>
 8011a24:	e086      	b.n	8011b34 <HAL_DMA_IRQHandler+0x598>
 8011a26:	4a51      	ldr	r2, [pc, #324]	; (8011b6c <HAL_DMA_IRQHandler+0x5d0>)
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	d100      	bne.n	8011a2e <HAL_DMA_IRQHandler+0x492>
 8011a2c:	e085      	b.n	8011b3a <HAL_DMA_IRQHandler+0x59e>
 8011a2e:	4a50      	ldr	r2, [pc, #320]	; (8011b70 <HAL_DMA_IRQHandler+0x5d4>)
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d100      	bne.n	8011a36 <HAL_DMA_IRQHandler+0x49a>
 8011a34:	e084      	b.n	8011b40 <HAL_DMA_IRQHandler+0x5a4>
 8011a36:	4a4f      	ldr	r2, [pc, #316]	; (8011b74 <HAL_DMA_IRQHandler+0x5d8>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d100      	bne.n	8011a3e <HAL_DMA_IRQHandler+0x4a2>
 8011a3c:	e083      	b.n	8011b46 <HAL_DMA_IRQHandler+0x5aa>
 8011a3e:	4a4e      	ldr	r2, [pc, #312]	; (8011b78 <HAL_DMA_IRQHandler+0x5dc>)
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d100      	bne.n	8011a46 <HAL_DMA_IRQHandler+0x4aa>
 8011a44:	e082      	b.n	8011b4c <HAL_DMA_IRQHandler+0x5b0>
 8011a46:	4a4d      	ldr	r2, [pc, #308]	; (8011b7c <HAL_DMA_IRQHandler+0x5e0>)
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d100      	bne.n	8011a4e <HAL_DMA_IRQHandler+0x4b2>
 8011a4c:	e080      	b.n	8011b50 <HAL_DMA_IRQHandler+0x5b4>
 8011a4e:	4a4c      	ldr	r2, [pc, #304]	; (8011b80 <HAL_DMA_IRQHandler+0x5e4>)
 8011a50:	4293      	cmp	r3, r2
 8011a52:	d07f      	beq.n	8011b54 <HAL_DMA_IRQHandler+0x5b8>
 8011a54:	4a4b      	ldr	r2, [pc, #300]	; (8011b84 <HAL_DMA_IRQHandler+0x5e8>)
 8011a56:	4694      	mov	ip, r2
 8011a58:	4463      	add	r3, ip
 8011a5a:	425a      	negs	r2, r3
 8011a5c:	4153      	adcs	r3, r2
 8011a5e:	425b      	negs	r3, r3
 8011a60:	4a4d      	ldr	r2, [pc, #308]	; (8011b98 <HAL_DMA_IRQHandler+0x5fc>)
 8011a62:	4013      	ands	r3, r2
 8011a64:	2280      	movs	r2, #128	; 0x80
 8011a66:	02d2      	lsls	r2, r2, #11
 8011a68:	4694      	mov	ip, r2
 8011a6a:	4463      	add	r3, ip
 8011a6c:	e018      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011a6e:	2240      	movs	r2, #64	; 0x40
 8011a70:	e7b8      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a72:	2280      	movs	r2, #128	; 0x80
 8011a74:	00d2      	lsls	r2, r2, #3
 8011a76:	e7b5      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a78:	2280      	movs	r2, #128	; 0x80
 8011a7a:	01d2      	lsls	r2, r2, #7
 8011a7c:	e7b2      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a7e:	2280      	movs	r2, #128	; 0x80
 8011a80:	02d2      	lsls	r2, r2, #11
 8011a82:	e7af      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a84:	2280      	movs	r2, #128	; 0x80
 8011a86:	03d2      	lsls	r2, r2, #15
 8011a88:	e7ac      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a8a:	2280      	movs	r2, #128	; 0x80
 8011a8c:	04d2      	lsls	r2, r2, #19
 8011a8e:	e7a9      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a90:	2204      	movs	r2, #4
 8011a92:	e7a7      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a94:	2240      	movs	r2, #64	; 0x40
 8011a96:	e7a5      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
 8011a98:	2280      	movs	r2, #128	; 0x80
 8011a9a:	00d2      	lsls	r2, r2, #3
 8011a9c:	e7a2      	b.n	80119e4 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011a9e:	2304      	movs	r3, #4
 8011aa0:	4a3b      	ldr	r2, [pc, #236]	; (8011b90 <HAL_DMA_IRQHandler+0x5f4>)
 8011aa2:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011aa4:	2321      	movs	r3, #33	; 0x21
 8011aa6:	2211      	movs	r2, #17
 8011aa8:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011aaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d001      	beq.n	8011ab4 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8011ab0:	0020      	movs	r0, r4
 8011ab2:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011ab4:	6821      	ldr	r1, [r4, #0]
 8011ab6:	4b2f      	ldr	r3, [pc, #188]	; (8011b74 <HAL_DMA_IRQHandler+0x5d8>)
 8011ab8:	4299      	cmp	r1, r3
 8011aba:	d900      	bls.n	8011abe <HAL_DMA_IRQHandler+0x522>
 8011abc:	e743      	b.n	8011946 <HAL_DMA_IRQHandler+0x3aa>
 8011abe:	4b33      	ldr	r3, [pc, #204]	; (8011b8c <HAL_DMA_IRQHandler+0x5f0>)
 8011ac0:	6818      	ldr	r0, [r3, #0]
 8011ac2:	4a26      	ldr	r2, [pc, #152]	; (8011b5c <HAL_DMA_IRQHandler+0x5c0>)
 8011ac4:	4291      	cmp	r1, r2
 8011ac6:	d100      	bne.n	8011aca <HAL_DMA_IRQHandler+0x52e>
 8011ac8:	e10a      	b.n	8011ce0 <HAL_DMA_IRQHandler+0x744>
 8011aca:	4a25      	ldr	r2, [pc, #148]	; (8011b60 <HAL_DMA_IRQHandler+0x5c4>)
 8011acc:	4291      	cmp	r1, r2
 8011ace:	d100      	bne.n	8011ad2 <HAL_DMA_IRQHandler+0x536>
 8011ad0:	e10c      	b.n	8011cec <HAL_DMA_IRQHandler+0x750>
 8011ad2:	4a24      	ldr	r2, [pc, #144]	; (8011b64 <HAL_DMA_IRQHandler+0x5c8>)
 8011ad4:	4291      	cmp	r1, r2
 8011ad6:	d100      	bne.n	8011ada <HAL_DMA_IRQHandler+0x53e>
 8011ad8:	e10a      	b.n	8011cf0 <HAL_DMA_IRQHandler+0x754>
 8011ada:	4a23      	ldr	r2, [pc, #140]	; (8011b68 <HAL_DMA_IRQHandler+0x5cc>)
 8011adc:	4291      	cmp	r1, r2
 8011ade:	d100      	bne.n	8011ae2 <HAL_DMA_IRQHandler+0x546>
 8011ae0:	e109      	b.n	8011cf6 <HAL_DMA_IRQHandler+0x75a>
 8011ae2:	4b22      	ldr	r3, [pc, #136]	; (8011b6c <HAL_DMA_IRQHandler+0x5d0>)
 8011ae4:	4299      	cmp	r1, r3
 8011ae6:	d100      	bne.n	8011aea <HAL_DMA_IRQHandler+0x54e>
 8011ae8:	e108      	b.n	8011cfc <HAL_DMA_IRQHandler+0x760>
 8011aea:	4b21      	ldr	r3, [pc, #132]	; (8011b70 <HAL_DMA_IRQHandler+0x5d4>)
 8011aec:	4299      	cmp	r1, r3
 8011aee:	d100      	bne.n	8011af2 <HAL_DMA_IRQHandler+0x556>
 8011af0:	e107      	b.n	8011d02 <HAL_DMA_IRQHandler+0x766>
 8011af2:	4b20      	ldr	r3, [pc, #128]	; (8011b74 <HAL_DMA_IRQHandler+0x5d8>)
 8011af4:	4299      	cmp	r1, r3
 8011af6:	d100      	bne.n	8011afa <HAL_DMA_IRQHandler+0x55e>
 8011af8:	e106      	b.n	8011d08 <HAL_DMA_IRQHandler+0x76c>
 8011afa:	4b1f      	ldr	r3, [pc, #124]	; (8011b78 <HAL_DMA_IRQHandler+0x5dc>)
 8011afc:	4299      	cmp	r1, r3
 8011afe:	d100      	bne.n	8011b02 <HAL_DMA_IRQHandler+0x566>
 8011b00:	e105      	b.n	8011d0e <HAL_DMA_IRQHandler+0x772>
 8011b02:	4b1e      	ldr	r3, [pc, #120]	; (8011b7c <HAL_DMA_IRQHandler+0x5e0>)
 8011b04:	4299      	cmp	r1, r3
 8011b06:	d100      	bne.n	8011b0a <HAL_DMA_IRQHandler+0x56e>
 8011b08:	e103      	b.n	8011d12 <HAL_DMA_IRQHandler+0x776>
 8011b0a:	4b1d      	ldr	r3, [pc, #116]	; (8011b80 <HAL_DMA_IRQHandler+0x5e4>)
 8011b0c:	4299      	cmp	r1, r3
 8011b0e:	d100      	bne.n	8011b12 <HAL_DMA_IRQHandler+0x576>
 8011b10:	e101      	b.n	8011d16 <HAL_DMA_IRQHandler+0x77a>
 8011b12:	4b1c      	ldr	r3, [pc, #112]	; (8011b84 <HAL_DMA_IRQHandler+0x5e8>)
 8011b14:	18ca      	adds	r2, r1, r3
 8011b16:	4253      	negs	r3, r2
 8011b18:	415a      	adcs	r2, r3
 8011b1a:	4252      	negs	r2, r2
 8011b1c:	4b1d      	ldr	r3, [pc, #116]	; (8011b94 <HAL_DMA_IRQHandler+0x5f8>)
 8011b1e:	4013      	ands	r3, r2
 8011b20:	2280      	movs	r2, #128	; 0x80
 8011b22:	0292      	lsls	r2, r2, #10
 8011b24:	4694      	mov	ip, r2
 8011b26:	4463      	add	r3, ip
 8011b28:	e0db      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011b2a:	2340      	movs	r3, #64	; 0x40
 8011b2c:	e7b8      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b2e:	2380      	movs	r3, #128	; 0x80
 8011b30:	00db      	lsls	r3, r3, #3
 8011b32:	e7b5      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b34:	2380      	movs	r3, #128	; 0x80
 8011b36:	01db      	lsls	r3, r3, #7
 8011b38:	e7b2      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b3a:	2380      	movs	r3, #128	; 0x80
 8011b3c:	02db      	lsls	r3, r3, #11
 8011b3e:	e7af      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b40:	2380      	movs	r3, #128	; 0x80
 8011b42:	03db      	lsls	r3, r3, #15
 8011b44:	e7ac      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b46:	2380      	movs	r3, #128	; 0x80
 8011b48:	04db      	lsls	r3, r3, #19
 8011b4a:	e7a9      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b4c:	2304      	movs	r3, #4
 8011b4e:	e7a7      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b50:	2340      	movs	r3, #64	; 0x40
 8011b52:	e7a5      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b54:	2380      	movs	r3, #128	; 0x80
 8011b56:	00db      	lsls	r3, r3, #3
 8011b58:	e7a2      	b.n	8011aa0 <HAL_DMA_IRQHandler+0x504>
 8011b5a:	46c0      	nop			; (mov r8, r8)
 8011b5c:	40020008 	.word	0x40020008
 8011b60:	4002001c 	.word	0x4002001c
 8011b64:	40020030 	.word	0x40020030
 8011b68:	40020044 	.word	0x40020044
 8011b6c:	40020058 	.word	0x40020058
 8011b70:	4002006c 	.word	0x4002006c
 8011b74:	40020080 	.word	0x40020080
 8011b78:	40020408 	.word	0x40020408
 8011b7c:	4002041c 	.word	0x4002041c
 8011b80:	40020430 	.word	0x40020430
 8011b84:	bffdfbbc 	.word	0xbffdfbbc
 8011b88:	fff88000 	.word	0xfff88000
 8011b8c:	40020000 	.word	0x40020000
 8011b90:	40020400 	.word	0x40020400
 8011b94:	fffe2000 	.word	0xfffe2000
 8011b98:	fffc4000 	.word	0xfffc4000
 8011b9c:	4a9b      	ldr	r2, [pc, #620]	; (8011e0c <HAL_DMA_IRQHandler+0x870>)
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	d027      	beq.n	8011bf2 <HAL_DMA_IRQHandler+0x656>
 8011ba2:	4a9b      	ldr	r2, [pc, #620]	; (8011e10 <HAL_DMA_IRQHandler+0x874>)
 8011ba4:	4293      	cmp	r3, r2
 8011ba6:	d028      	beq.n	8011bfa <HAL_DMA_IRQHandler+0x65e>
 8011ba8:	4a9a      	ldr	r2, [pc, #616]	; (8011e14 <HAL_DMA_IRQHandler+0x878>)
 8011baa:	4293      	cmp	r3, r2
 8011bac:	d027      	beq.n	8011bfe <HAL_DMA_IRQHandler+0x662>
 8011bae:	4a9a      	ldr	r2, [pc, #616]	; (8011e18 <HAL_DMA_IRQHandler+0x87c>)
 8011bb0:	4293      	cmp	r3, r2
 8011bb2:	d027      	beq.n	8011c04 <HAL_DMA_IRQHandler+0x668>
 8011bb4:	4a99      	ldr	r2, [pc, #612]	; (8011e1c <HAL_DMA_IRQHandler+0x880>)
 8011bb6:	4293      	cmp	r3, r2
 8011bb8:	d027      	beq.n	8011c0a <HAL_DMA_IRQHandler+0x66e>
 8011bba:	4a99      	ldr	r2, [pc, #612]	; (8011e20 <HAL_DMA_IRQHandler+0x884>)
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d027      	beq.n	8011c10 <HAL_DMA_IRQHandler+0x674>
 8011bc0:	4a98      	ldr	r2, [pc, #608]	; (8011e24 <HAL_DMA_IRQHandler+0x888>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d027      	beq.n	8011c16 <HAL_DMA_IRQHandler+0x67a>
 8011bc6:	4a98      	ldr	r2, [pc, #608]	; (8011e28 <HAL_DMA_IRQHandler+0x88c>)
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	d027      	beq.n	8011c1c <HAL_DMA_IRQHandler+0x680>
 8011bcc:	4a97      	ldr	r2, [pc, #604]	; (8011e2c <HAL_DMA_IRQHandler+0x890>)
 8011bce:	4293      	cmp	r3, r2
 8011bd0:	d026      	beq.n	8011c20 <HAL_DMA_IRQHandler+0x684>
 8011bd2:	4a97      	ldr	r2, [pc, #604]	; (8011e30 <HAL_DMA_IRQHandler+0x894>)
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d025      	beq.n	8011c24 <HAL_DMA_IRQHandler+0x688>
 8011bd8:	4a96      	ldr	r2, [pc, #600]	; (8011e34 <HAL_DMA_IRQHandler+0x898>)
 8011bda:	4694      	mov	ip, r2
 8011bdc:	4463      	add	r3, ip
 8011bde:	425a      	negs	r2, r3
 8011be0:	4153      	adcs	r3, r2
 8011be2:	425b      	negs	r3, r3
 8011be4:	4a94      	ldr	r2, [pc, #592]	; (8011e38 <HAL_DMA_IRQHandler+0x89c>)
 8011be6:	4013      	ands	r3, r2
 8011be8:	2280      	movs	r2, #128	; 0x80
 8011bea:	02d2      	lsls	r2, r2, #11
 8011bec:	4694      	mov	ip, r2
 8011bee:	4463      	add	r3, ip
 8011bf0:	e000      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011bf2:	2304      	movs	r3, #4
 8011bf4:	4a91      	ldr	r2, [pc, #580]	; (8011e3c <HAL_DMA_IRQHandler+0x8a0>)
 8011bf6:	6053      	str	r3, [r2, #4]
 8011bf8:	e754      	b.n	8011aa4 <HAL_DMA_IRQHandler+0x508>
 8011bfa:	2340      	movs	r3, #64	; 0x40
 8011bfc:	e7fa      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011bfe:	2380      	movs	r3, #128	; 0x80
 8011c00:	00db      	lsls	r3, r3, #3
 8011c02:	e7f7      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011c04:	2380      	movs	r3, #128	; 0x80
 8011c06:	01db      	lsls	r3, r3, #7
 8011c08:	e7f4      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011c0a:	2380      	movs	r3, #128	; 0x80
 8011c0c:	02db      	lsls	r3, r3, #11
 8011c0e:	e7f1      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011c10:	2380      	movs	r3, #128	; 0x80
 8011c12:	03db      	lsls	r3, r3, #15
 8011c14:	e7ee      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011c16:	2380      	movs	r3, #128	; 0x80
 8011c18:	04db      	lsls	r3, r3, #19
 8011c1a:	e7eb      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011c1c:	2304      	movs	r3, #4
 8011c1e:	e7e9      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011c20:	2340      	movs	r3, #64	; 0x40
 8011c22:	e7e7      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
 8011c24:	2380      	movs	r3, #128	; 0x80
 8011c26:	00db      	lsls	r3, r3, #3
 8011c28:	e7e4      	b.n	8011bf4 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011c2a:	2302      	movs	r3, #2
 8011c2c:	4003      	ands	r3, r0
 8011c2e:	1e5a      	subs	r2, r3, #1
 8011c30:	4193      	sbcs	r3, r2
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d100      	bne.n	8011c3a <HAL_DMA_IRQHandler+0x69e>
 8011c38:	e080      	b.n	8011d3c <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011c3a:	680b      	ldr	r3, [r1, #0]
 8011c3c:	079b      	lsls	r3, r3, #30
 8011c3e:	d57d      	bpl.n	8011d3c <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011c40:	680b      	ldr	r3, [r1, #0]
 8011c42:	069b      	lsls	r3, r3, #26
 8011c44:	d403      	bmi.n	8011c4e <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011c46:	680b      	ldr	r3, [r1, #0]
 8011c48:	2202      	movs	r2, #2
 8011c4a:	4393      	bics	r3, r2
 8011c4c:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011c4e:	6823      	ldr	r3, [r4, #0]
 8011c50:	4a74      	ldr	r2, [pc, #464]	; (8011e24 <HAL_DMA_IRQHandler+0x888>)
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d800      	bhi.n	8011c58 <HAL_DMA_IRQHandler+0x6bc>
 8011c56:	e08a      	b.n	8011d6e <HAL_DMA_IRQHandler+0x7d2>
 8011c58:	4a6c      	ldr	r2, [pc, #432]	; (8011e0c <HAL_DMA_IRQHandler+0x870>)
 8011c5a:	4293      	cmp	r3, r2
 8011c5c:	d05e      	beq.n	8011d1c <HAL_DMA_IRQHandler+0x780>
 8011c5e:	4a6c      	ldr	r2, [pc, #432]	; (8011e10 <HAL_DMA_IRQHandler+0x874>)
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d100      	bne.n	8011c66 <HAL_DMA_IRQHandler+0x6ca>
 8011c64:	e06b      	b.n	8011d3e <HAL_DMA_IRQHandler+0x7a2>
 8011c66:	4a6b      	ldr	r2, [pc, #428]	; (8011e14 <HAL_DMA_IRQHandler+0x878>)
 8011c68:	4293      	cmp	r3, r2
 8011c6a:	d06a      	beq.n	8011d42 <HAL_DMA_IRQHandler+0x7a6>
 8011c6c:	4a6a      	ldr	r2, [pc, #424]	; (8011e18 <HAL_DMA_IRQHandler+0x87c>)
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d06a      	beq.n	8011d48 <HAL_DMA_IRQHandler+0x7ac>
 8011c72:	4a6a      	ldr	r2, [pc, #424]	; (8011e1c <HAL_DMA_IRQHandler+0x880>)
 8011c74:	4293      	cmp	r3, r2
 8011c76:	d06a      	beq.n	8011d4e <HAL_DMA_IRQHandler+0x7b2>
 8011c78:	4a69      	ldr	r2, [pc, #420]	; (8011e20 <HAL_DMA_IRQHandler+0x884>)
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	d06a      	beq.n	8011d54 <HAL_DMA_IRQHandler+0x7b8>
 8011c7e:	4a69      	ldr	r2, [pc, #420]	; (8011e24 <HAL_DMA_IRQHandler+0x888>)
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d06a      	beq.n	8011d5a <HAL_DMA_IRQHandler+0x7be>
 8011c84:	4a68      	ldr	r2, [pc, #416]	; (8011e28 <HAL_DMA_IRQHandler+0x88c>)
 8011c86:	4293      	cmp	r3, r2
 8011c88:	d06a      	beq.n	8011d60 <HAL_DMA_IRQHandler+0x7c4>
 8011c8a:	4a68      	ldr	r2, [pc, #416]	; (8011e2c <HAL_DMA_IRQHandler+0x890>)
 8011c8c:	4293      	cmp	r3, r2
 8011c8e:	d069      	beq.n	8011d64 <HAL_DMA_IRQHandler+0x7c8>
 8011c90:	4a67      	ldr	r2, [pc, #412]	; (8011e30 <HAL_DMA_IRQHandler+0x894>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d068      	beq.n	8011d68 <HAL_DMA_IRQHandler+0x7cc>
 8011c96:	4a67      	ldr	r2, [pc, #412]	; (8011e34 <HAL_DMA_IRQHandler+0x898>)
 8011c98:	4694      	mov	ip, r2
 8011c9a:	4463      	add	r3, ip
 8011c9c:	425a      	negs	r2, r3
 8011c9e:	4153      	adcs	r3, r2
 8011ca0:	425b      	negs	r3, r3
 8011ca2:	4a67      	ldr	r2, [pc, #412]	; (8011e40 <HAL_DMA_IRQHandler+0x8a4>)
 8011ca4:	4013      	ands	r3, r2
 8011ca6:	2280      	movs	r2, #128	; 0x80
 8011ca8:	0292      	lsls	r2, r2, #10
 8011caa:	4694      	mov	ip, r2
 8011cac:	4463      	add	r3, ip
 8011cae:	e036      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011cb0:	2320      	movs	r3, #32
 8011cb2:	e7bb      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011cb4:	2380      	movs	r3, #128	; 0x80
 8011cb6:	009b      	lsls	r3, r3, #2
 8011cb8:	e7b8      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011cba:	2380      	movs	r3, #128	; 0x80
 8011cbc:	019b      	lsls	r3, r3, #6
 8011cbe:	e7b5      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011cc0:	2380      	movs	r3, #128	; 0x80
 8011cc2:	029b      	lsls	r3, r3, #10
 8011cc4:	e7b2      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011cc6:	2380      	movs	r3, #128	; 0x80
 8011cc8:	039b      	lsls	r3, r3, #14
 8011cca:	e7af      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011ccc:	2380      	movs	r3, #128	; 0x80
 8011cce:	049b      	lsls	r3, r3, #18
 8011cd0:	e7ac      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011cd2:	2302      	movs	r3, #2
 8011cd4:	e7aa      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011cd6:	2320      	movs	r3, #32
 8011cd8:	e7a8      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011cda:	2380      	movs	r3, #128	; 0x80
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	e7a5      	b.n	8011c2c <HAL_DMA_IRQHandler+0x690>
 8011ce0:	2302      	movs	r3, #2
 8011ce2:	4003      	ands	r3, r0
 8011ce4:	1e5a      	subs	r2, r3, #1
 8011ce6:	4193      	sbcs	r3, r2
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	e7a3      	b.n	8011c34 <HAL_DMA_IRQHandler+0x698>
 8011cec:	2320      	movs	r3, #32
 8011cee:	e7f8      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011cf0:	2380      	movs	r3, #128	; 0x80
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	e7f5      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011cf6:	2380      	movs	r3, #128	; 0x80
 8011cf8:	019b      	lsls	r3, r3, #6
 8011cfa:	e7f2      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011cfc:	2380      	movs	r3, #128	; 0x80
 8011cfe:	029b      	lsls	r3, r3, #10
 8011d00:	e7ef      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011d02:	2380      	movs	r3, #128	; 0x80
 8011d04:	039b      	lsls	r3, r3, #14
 8011d06:	e7ec      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011d08:	2380      	movs	r3, #128	; 0x80
 8011d0a:	049b      	lsls	r3, r3, #18
 8011d0c:	e7e9      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011d0e:	2302      	movs	r3, #2
 8011d10:	e7e7      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011d12:	2320      	movs	r3, #32
 8011d14:	e7e5      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
 8011d16:	2380      	movs	r3, #128	; 0x80
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	e7e2      	b.n	8011ce2 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011d1c:	2302      	movs	r3, #2
 8011d1e:	4a49      	ldr	r2, [pc, #292]	; (8011e44 <HAL_DMA_IRQHandler+0x8a8>)
 8011d20:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011d22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d24:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011d26:	2321      	movs	r3, #33	; 0x21
 8011d28:	2201      	movs	r2, #1
 8011d2a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	2200      	movs	r2, #0
 8011d30:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011d32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d001      	beq.n	8011d3c <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8011d38:	0020      	movs	r0, r4
 8011d3a:	4798      	blx	r3
}  
 8011d3c:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011d3e:	2320      	movs	r3, #32
 8011d40:	e7ed      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d42:	2380      	movs	r3, #128	; 0x80
 8011d44:	009b      	lsls	r3, r3, #2
 8011d46:	e7ea      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d48:	2380      	movs	r3, #128	; 0x80
 8011d4a:	019b      	lsls	r3, r3, #6
 8011d4c:	e7e7      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d4e:	2380      	movs	r3, #128	; 0x80
 8011d50:	029b      	lsls	r3, r3, #10
 8011d52:	e7e4      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d54:	2380      	movs	r3, #128	; 0x80
 8011d56:	039b      	lsls	r3, r3, #14
 8011d58:	e7e1      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d5a:	2380      	movs	r3, #128	; 0x80
 8011d5c:	049b      	lsls	r3, r3, #18
 8011d5e:	e7de      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d60:	2302      	movs	r3, #2
 8011d62:	e7dc      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d64:	2320      	movs	r3, #32
 8011d66:	e7da      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d68:	2380      	movs	r3, #128	; 0x80
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	e7d7      	b.n	8011d1e <HAL_DMA_IRQHandler+0x782>
 8011d6e:	4a27      	ldr	r2, [pc, #156]	; (8011e0c <HAL_DMA_IRQHandler+0x870>)
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d027      	beq.n	8011dc4 <HAL_DMA_IRQHandler+0x828>
 8011d74:	4a26      	ldr	r2, [pc, #152]	; (8011e10 <HAL_DMA_IRQHandler+0x874>)
 8011d76:	4293      	cmp	r3, r2
 8011d78:	d028      	beq.n	8011dcc <HAL_DMA_IRQHandler+0x830>
 8011d7a:	4a26      	ldr	r2, [pc, #152]	; (8011e14 <HAL_DMA_IRQHandler+0x878>)
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	d027      	beq.n	8011dd0 <HAL_DMA_IRQHandler+0x834>
 8011d80:	4a25      	ldr	r2, [pc, #148]	; (8011e18 <HAL_DMA_IRQHandler+0x87c>)
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d027      	beq.n	8011dd6 <HAL_DMA_IRQHandler+0x83a>
 8011d86:	4a25      	ldr	r2, [pc, #148]	; (8011e1c <HAL_DMA_IRQHandler+0x880>)
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d027      	beq.n	8011ddc <HAL_DMA_IRQHandler+0x840>
 8011d8c:	4a24      	ldr	r2, [pc, #144]	; (8011e20 <HAL_DMA_IRQHandler+0x884>)
 8011d8e:	4293      	cmp	r3, r2
 8011d90:	d027      	beq.n	8011de2 <HAL_DMA_IRQHandler+0x846>
 8011d92:	4a24      	ldr	r2, [pc, #144]	; (8011e24 <HAL_DMA_IRQHandler+0x888>)
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d027      	beq.n	8011de8 <HAL_DMA_IRQHandler+0x84c>
 8011d98:	4a23      	ldr	r2, [pc, #140]	; (8011e28 <HAL_DMA_IRQHandler+0x88c>)
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	d027      	beq.n	8011dee <HAL_DMA_IRQHandler+0x852>
 8011d9e:	4a23      	ldr	r2, [pc, #140]	; (8011e2c <HAL_DMA_IRQHandler+0x890>)
 8011da0:	4293      	cmp	r3, r2
 8011da2:	d026      	beq.n	8011df2 <HAL_DMA_IRQHandler+0x856>
 8011da4:	4a22      	ldr	r2, [pc, #136]	; (8011e30 <HAL_DMA_IRQHandler+0x894>)
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d025      	beq.n	8011df6 <HAL_DMA_IRQHandler+0x85a>
 8011daa:	4a22      	ldr	r2, [pc, #136]	; (8011e34 <HAL_DMA_IRQHandler+0x898>)
 8011dac:	4694      	mov	ip, r2
 8011dae:	4463      	add	r3, ip
 8011db0:	425a      	negs	r2, r3
 8011db2:	4153      	adcs	r3, r2
 8011db4:	425b      	negs	r3, r3
 8011db6:	4a22      	ldr	r2, [pc, #136]	; (8011e40 <HAL_DMA_IRQHandler+0x8a4>)
 8011db8:	4013      	ands	r3, r2
 8011dba:	2280      	movs	r2, #128	; 0x80
 8011dbc:	0292      	lsls	r2, r2, #10
 8011dbe:	4694      	mov	ip, r2
 8011dc0:	4463      	add	r3, ip
 8011dc2:	e000      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	4a1d      	ldr	r2, [pc, #116]	; (8011e3c <HAL_DMA_IRQHandler+0x8a0>)
 8011dc8:	6053      	str	r3, [r2, #4]
 8011dca:	e7aa      	b.n	8011d22 <HAL_DMA_IRQHandler+0x786>
 8011dcc:	2320      	movs	r3, #32
 8011dce:	e7fa      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011dd0:	2380      	movs	r3, #128	; 0x80
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	e7f7      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011dd6:	2380      	movs	r3, #128	; 0x80
 8011dd8:	019b      	lsls	r3, r3, #6
 8011dda:	e7f4      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011ddc:	2380      	movs	r3, #128	; 0x80
 8011dde:	029b      	lsls	r3, r3, #10
 8011de0:	e7f1      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011de2:	2380      	movs	r3, #128	; 0x80
 8011de4:	039b      	lsls	r3, r3, #14
 8011de6:	e7ee      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011de8:	2380      	movs	r3, #128	; 0x80
 8011dea:	049b      	lsls	r3, r3, #18
 8011dec:	e7eb      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011dee:	2302      	movs	r3, #2
 8011df0:	e7e9      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011df2:	2320      	movs	r3, #32
 8011df4:	e7e7      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
 8011df6:	2380      	movs	r3, #128	; 0x80
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	e7e4      	b.n	8011dc6 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011dfc:	6821      	ldr	r1, [r4, #0]
 8011dfe:	e65e      	b.n	8011abe <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	0712      	lsls	r2, r2, #28
 8011e04:	d500      	bpl.n	8011e08 <HAL_DMA_IRQHandler+0x86c>
 8011e06:	e49b      	b.n	8011740 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011e08:	6823      	ldr	r3, [r4, #0]
 8011e0a:	e44b      	b.n	80116a4 <HAL_DMA_IRQHandler+0x108>
 8011e0c:	40020008 	.word	0x40020008
 8011e10:	4002001c 	.word	0x4002001c
 8011e14:	40020030 	.word	0x40020030
 8011e18:	40020044 	.word	0x40020044
 8011e1c:	40020058 	.word	0x40020058
 8011e20:	4002006c 	.word	0x4002006c
 8011e24:	40020080 	.word	0x40020080
 8011e28:	40020408 	.word	0x40020408
 8011e2c:	4002041c 	.word	0x4002041c
 8011e30:	40020430 	.word	0x40020430
 8011e34:	bffdfbbc 	.word	0xbffdfbbc
 8011e38:	fffc4000 	.word	0xfffc4000
 8011e3c:	40020000 	.word	0x40020000
 8011e40:	fffe2000 	.word	0xfffe2000
 8011e44:	40020400 	.word	0x40020400

08011e48 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011e48:	4b0a      	ldr	r3, [pc, #40]	; (8011e74 <FLASH_SetErrorCode+0x2c>)
 8011e4a:	68db      	ldr	r3, [r3, #12]
 8011e4c:	06db      	lsls	r3, r3, #27
 8011e4e:	d504      	bpl.n	8011e5a <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011e50:	4a09      	ldr	r2, [pc, #36]	; (8011e78 <FLASH_SetErrorCode+0x30>)
 8011e52:	69d3      	ldr	r3, [r2, #28]
 8011e54:	2102      	movs	r1, #2
 8011e56:	430b      	orrs	r3, r1
 8011e58:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011e5a:	4b06      	ldr	r3, [pc, #24]	; (8011e74 <FLASH_SetErrorCode+0x2c>)
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	075b      	lsls	r3, r3, #29
 8011e60:	d504      	bpl.n	8011e6c <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011e62:	4a05      	ldr	r2, [pc, #20]	; (8011e78 <FLASH_SetErrorCode+0x30>)
 8011e64:	69d3      	ldr	r3, [r2, #28]
 8011e66:	2101      	movs	r1, #1
 8011e68:	430b      	orrs	r3, r1
 8011e6a:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011e6c:	4b01      	ldr	r3, [pc, #4]	; (8011e74 <FLASH_SetErrorCode+0x2c>)
 8011e6e:	2214      	movs	r2, #20
 8011e70:	60da      	str	r2, [r3, #12]
}  
 8011e72:	4770      	bx	lr
 8011e74:	40022000 	.word	0x40022000
 8011e78:	200073d0 	.word	0x200073d0

08011e7c <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011e7c:	4b05      	ldr	r3, [pc, #20]	; (8011e94 <HAL_FLASH_Unlock+0x18>)
 8011e7e:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011e80:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011e82:	061b      	lsls	r3, r3, #24
 8011e84:	d505      	bpl.n	8011e92 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011e86:	4b03      	ldr	r3, [pc, #12]	; (8011e94 <HAL_FLASH_Unlock+0x18>)
 8011e88:	4a03      	ldr	r2, [pc, #12]	; (8011e98 <HAL_FLASH_Unlock+0x1c>)
 8011e8a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011e8c:	4a03      	ldr	r2, [pc, #12]	; (8011e9c <HAL_FLASH_Unlock+0x20>)
 8011e8e:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011e90:	2000      	movs	r0, #0
}
 8011e92:	4770      	bx	lr
 8011e94:	40022000 	.word	0x40022000
 8011e98:	45670123 	.word	0x45670123
 8011e9c:	cdef89ab 	.word	0xcdef89ab

08011ea0 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011ea0:	4a03      	ldr	r2, [pc, #12]	; (8011eb0 <HAL_FLASH_Lock+0x10>)
 8011ea2:	6913      	ldr	r3, [r2, #16]
 8011ea4:	2180      	movs	r1, #128	; 0x80
 8011ea6:	430b      	orrs	r3, r1
 8011ea8:	6113      	str	r3, [r2, #16]
}
 8011eaa:	2000      	movs	r0, #0
 8011eac:	4770      	bx	lr
 8011eae:	46c0      	nop			; (mov r8, r8)
 8011eb0:	40022000 	.word	0x40022000

08011eb4 <FLASH_WaitForLastOperation>:
{
 8011eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eb6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011eb8:	f7fe fe66 	bl	8010b88 <HAL_GetTick>
 8011ebc:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011ebe:	4e13      	ldr	r6, [pc, #76]	; (8011f0c <FLASH_WaitForLastOperation+0x58>)
 8011ec0:	2501      	movs	r5, #1
 8011ec2:	68f3      	ldr	r3, [r6, #12]
 8011ec4:	421d      	tst	r5, r3
 8011ec6:	d00a      	beq.n	8011ede <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011ec8:	1c63      	adds	r3, r4, #1
 8011eca:	d0fa      	beq.n	8011ec2 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011ecc:	2c00      	cmp	r4, #0
 8011ece:	d01a      	beq.n	8011f06 <FLASH_WaitForLastOperation+0x52>
 8011ed0:	f7fe fe5a 	bl	8010b88 <HAL_GetTick>
 8011ed4:	1bc0      	subs	r0, r0, r7
 8011ed6:	42a0      	cmp	r0, r4
 8011ed8:	d9f3      	bls.n	8011ec2 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011eda:	2003      	movs	r0, #3
 8011edc:	e012      	b.n	8011f04 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011ede:	4b0b      	ldr	r3, [pc, #44]	; (8011f0c <FLASH_WaitForLastOperation+0x58>)
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	069b      	lsls	r3, r3, #26
 8011ee4:	d502      	bpl.n	8011eec <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011ee6:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <FLASH_WaitForLastOperation+0x58>)
 8011ee8:	2220      	movs	r2, #32
 8011eea:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011eec:	4b07      	ldr	r3, [pc, #28]	; (8011f0c <FLASH_WaitForLastOperation+0x58>)
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	06db      	lsls	r3, r3, #27
 8011ef2:	d404      	bmi.n	8011efe <FLASH_WaitForLastOperation+0x4a>
 8011ef4:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <FLASH_WaitForLastOperation+0x58>)
 8011ef6:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011ef8:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011efa:	075b      	lsls	r3, r3, #29
 8011efc:	d502      	bpl.n	8011f04 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011efe:	f7ff ffa3 	bl	8011e48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011f02:	2001      	movs	r0, #1
}
 8011f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011f06:	2003      	movs	r0, #3
 8011f08:	e7fc      	b.n	8011f04 <FLASH_WaitForLastOperation+0x50>
 8011f0a:	46c0      	nop			; (mov r8, r8)
 8011f0c:	40022000 	.word	0x40022000

08011f10 <HAL_FLASH_Program>:
{
 8011f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f12:	46de      	mov	lr, fp
 8011f14:	4657      	mov	r7, sl
 8011f16:	464e      	mov	r6, r9
 8011f18:	4645      	mov	r5, r8
 8011f1a:	b5e0      	push	{r5, r6, r7, lr}
 8011f1c:	b083      	sub	sp, #12
 8011f1e:	0004      	movs	r4, r0
 8011f20:	000e      	movs	r6, r1
 8011f22:	9201      	str	r2, [sp, #4]
 8011f24:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011f26:	4b2a      	ldr	r3, [pc, #168]	; (8011fd0 <HAL_FLASH_Program+0xc0>)
 8011f28:	7e1b      	ldrb	r3, [r3, #24]
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	d04b      	beq.n	8011fc6 <HAL_FLASH_Program+0xb6>
 8011f2e:	4b28      	ldr	r3, [pc, #160]	; (8011fd0 <HAL_FLASH_Program+0xc0>)
 8011f30:	2201      	movs	r2, #1
 8011f32:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011f34:	4827      	ldr	r0, [pc, #156]	; (8011fd4 <HAL_FLASH_Program+0xc4>)
 8011f36:	f7ff ffbd 	bl	8011eb4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011f3a:	2800      	cmp	r0, #0
 8011f3c:	d139      	bne.n	8011fb2 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011f3e:	2c01      	cmp	r4, #1
 8011f40:	d043      	beq.n	8011fca <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011f42:	3c02      	subs	r4, #2
 8011f44:	4263      	negs	r3, r4
 8011f46:	415c      	adcs	r4, r3
 8011f48:	4264      	negs	r4, r4
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	439c      	bics	r4, r3
 8011f4e:	46a0      	mov	r8, r4
 8011f50:	3303      	adds	r3, #3
 8011f52:	469c      	mov	ip, r3
 8011f54:	44e0      	add	r8, ip
{
 8011f56:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011f58:	4b1d      	ldr	r3, [pc, #116]	; (8011fd0 <HAL_FLASH_Program+0xc0>)
 8011f5a:	469b      	mov	fp, r3
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011f60:	4c1d      	ldr	r4, [pc, #116]	; (8011fd8 <HAL_FLASH_Program+0xc8>)
 8011f62:	e01e      	b.n	8011fa2 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011f64:	2220      	movs	r2, #32
 8011f66:	1ad2      	subs	r2, r2, r3
 8011f68:	4649      	mov	r1, r9
 8011f6a:	4091      	lsls	r1, r2
 8011f6c:	000a      	movs	r2, r1
 8011f6e:	9901      	ldr	r1, [sp, #4]
 8011f70:	40d9      	lsrs	r1, r3
 8011f72:	000b      	movs	r3, r1
 8011f74:	4313      	orrs	r3, r2
 8011f76:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011f78:	465a      	mov	r2, fp
 8011f7a:	4651      	mov	r1, sl
 8011f7c:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011f7e:	6922      	ldr	r2, [r4, #16]
 8011f80:	2701      	movs	r7, #1
 8011f82:	433a      	orrs	r2, r7
 8011f84:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011f86:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011f88:	4812      	ldr	r0, [pc, #72]	; (8011fd4 <HAL_FLASH_Program+0xc4>)
 8011f8a:	f7ff ff93 	bl	8011eb4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011f8e:	6923      	ldr	r3, [r4, #16]
 8011f90:	43bb      	bics	r3, r7
 8011f92:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d10c      	bne.n	8011fb2 <HAL_FLASH_Program+0xa2>
 8011f98:	3501      	adds	r5, #1
 8011f9a:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8011f9c:	b2eb      	uxtb	r3, r5
 8011f9e:	4598      	cmp	r8, r3
 8011fa0:	d907      	bls.n	8011fb2 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011fa2:	012b      	lsls	r3, r5, #4
 8011fa4:	2220      	movs	r2, #32
 8011fa6:	4252      	negs	r2, r2
 8011fa8:	189a      	adds	r2, r3, r2
 8011faa:	d4db      	bmi.n	8011f64 <HAL_FLASH_Program+0x54>
 8011fac:	464b      	mov	r3, r9
 8011fae:	40d3      	lsrs	r3, r2
 8011fb0:	e7e1      	b.n	8011f76 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8011fb2:	4b07      	ldr	r3, [pc, #28]	; (8011fd0 <HAL_FLASH_Program+0xc0>)
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	761a      	strb	r2, [r3, #24]
}
 8011fb8:	b003      	add	sp, #12
 8011fba:	bc3c      	pop	{r2, r3, r4, r5}
 8011fbc:	4690      	mov	r8, r2
 8011fbe:	4699      	mov	r9, r3
 8011fc0:	46a2      	mov	sl, r4
 8011fc2:	46ab      	mov	fp, r5
 8011fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011fc6:	2002      	movs	r0, #2
 8011fc8:	e7f6      	b.n	8011fb8 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8011fca:	2301      	movs	r3, #1
 8011fcc:	4698      	mov	r8, r3
 8011fce:	e7c2      	b.n	8011f56 <HAL_FLASH_Program+0x46>
 8011fd0:	200073d0 	.word	0x200073d0
 8011fd4:	0000c350 	.word	0x0000c350
 8011fd8:	40022000 	.word	0x40022000

08011fdc <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011fdc:	4b06      	ldr	r3, [pc, #24]	; (8011ff8 <FLASH_MassErase+0x1c>)
 8011fde:	2200      	movs	r2, #0
 8011fe0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011fe2:	4b06      	ldr	r3, [pc, #24]	; (8011ffc <FLASH_MassErase+0x20>)
 8011fe4:	691a      	ldr	r2, [r3, #16]
 8011fe6:	2104      	movs	r1, #4
 8011fe8:	430a      	orrs	r2, r1
 8011fea:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011fec:	691a      	ldr	r2, [r3, #16]
 8011fee:	313c      	adds	r1, #60	; 0x3c
 8011ff0:	430a      	orrs	r2, r1
 8011ff2:	611a      	str	r2, [r3, #16]
}
 8011ff4:	4770      	bx	lr
 8011ff6:	46c0      	nop			; (mov r8, r8)
 8011ff8:	200073d0 	.word	0x200073d0
 8011ffc:	40022000 	.word	0x40022000

08012000 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012000:	4b06      	ldr	r3, [pc, #24]	; (801201c <FLASH_PageErase+0x1c>)
 8012002:	2200      	movs	r2, #0
 8012004:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8012006:	4b06      	ldr	r3, [pc, #24]	; (8012020 <FLASH_PageErase+0x20>)
 8012008:	691a      	ldr	r2, [r3, #16]
 801200a:	2102      	movs	r1, #2
 801200c:	430a      	orrs	r2, r1
 801200e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8012010:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012012:	691a      	ldr	r2, [r3, #16]
 8012014:	313e      	adds	r1, #62	; 0x3e
 8012016:	430a      	orrs	r2, r1
 8012018:	611a      	str	r2, [r3, #16]
}
 801201a:	4770      	bx	lr
 801201c:	200073d0 	.word	0x200073d0
 8012020:	40022000 	.word	0x40022000

08012024 <HAL_FLASHEx_Erase>:
{
 8012024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012026:	46c6      	mov	lr, r8
 8012028:	b500      	push	{lr}
 801202a:	0006      	movs	r6, r0
 801202c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 801202e:	4b2a      	ldr	r3, [pc, #168]	; (80120d8 <HAL_FLASHEx_Erase+0xb4>)
 8012030:	7e1b      	ldrb	r3, [r3, #24]
 8012032:	2b01      	cmp	r3, #1
 8012034:	d04d      	beq.n	80120d2 <HAL_FLASHEx_Erase+0xae>
 8012036:	4b28      	ldr	r3, [pc, #160]	; (80120d8 <HAL_FLASHEx_Erase+0xb4>)
 8012038:	2201      	movs	r2, #1
 801203a:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801203c:	6803      	ldr	r3, [r0, #0]
 801203e:	2b01      	cmp	r3, #1
 8012040:	d029      	beq.n	8012096 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012042:	4826      	ldr	r0, [pc, #152]	; (80120dc <HAL_FLASHEx_Erase+0xb8>)
 8012044:	f7ff ff36 	bl	8011eb4 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8012048:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801204a:	2800      	cmp	r0, #0
 801204c:	d129      	bne.n	80120a2 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 801204e:	2301      	movs	r3, #1
 8012050:	425b      	negs	r3, r3
 8012052:	4642      	mov	r2, r8
 8012054:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8012056:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8012058:	68b3      	ldr	r3, [r6, #8]
 801205a:	02db      	lsls	r3, r3, #11
 801205c:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 801205e:	429c      	cmp	r4, r3
 8012060:	d235      	bcs.n	80120ce <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8012062:	4f1f      	ldr	r7, [pc, #124]	; (80120e0 <HAL_FLASHEx_Erase+0xbc>)
 8012064:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8012066:	0020      	movs	r0, r4
 8012068:	f7ff ffca 	bl	8012000 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801206c:	481b      	ldr	r0, [pc, #108]	; (80120dc <HAL_FLASHEx_Erase+0xb8>)
 801206e:	f7ff ff21 	bl	8011eb4 <FLASH_WaitForLastOperation>
 8012072:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8012074:	693b      	ldr	r3, [r7, #16]
 8012076:	43ab      	bics	r3, r5
 8012078:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 801207a:	2800      	cmp	r0, #0
 801207c:	d124      	bne.n	80120c8 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 801207e:	2380      	movs	r3, #128	; 0x80
 8012080:	011b      	lsls	r3, r3, #4
 8012082:	469c      	mov	ip, r3
 8012084:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8012086:	68b3      	ldr	r3, [r6, #8]
 8012088:	02db      	lsls	r3, r3, #11
 801208a:	6871      	ldr	r1, [r6, #4]
 801208c:	468c      	mov	ip, r1
 801208e:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8012090:	42a3      	cmp	r3, r4
 8012092:	d8e8      	bhi.n	8012066 <HAL_FLASHEx_Erase+0x42>
 8012094:	e005      	b.n	80120a2 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012096:	4811      	ldr	r0, [pc, #68]	; (80120dc <HAL_FLASHEx_Erase+0xb8>)
 8012098:	f7ff ff0c 	bl	8011eb4 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 801209c:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801209e:	2800      	cmp	r0, #0
 80120a0:	d006      	beq.n	80120b0 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 80120a2:	4b0d      	ldr	r3, [pc, #52]	; (80120d8 <HAL_FLASHEx_Erase+0xb4>)
 80120a4:	2100      	movs	r1, #0
 80120a6:	7619      	strb	r1, [r3, #24]
}
 80120a8:	0010      	movs	r0, r2
 80120aa:	bc04      	pop	{r2}
 80120ac:	4690      	mov	r8, r2
 80120ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80120b0:	f7ff ff94 	bl	8011fdc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120b4:	4809      	ldr	r0, [pc, #36]	; (80120dc <HAL_FLASHEx_Erase+0xb8>)
 80120b6:	f7ff fefd 	bl	8011eb4 <FLASH_WaitForLastOperation>
 80120ba:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80120bc:	4908      	ldr	r1, [pc, #32]	; (80120e0 <HAL_FLASHEx_Erase+0xbc>)
 80120be:	690b      	ldr	r3, [r1, #16]
 80120c0:	2004      	movs	r0, #4
 80120c2:	4383      	bics	r3, r0
 80120c4:	610b      	str	r3, [r1, #16]
 80120c6:	e7ec      	b.n	80120a2 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 80120c8:	4643      	mov	r3, r8
 80120ca:	601c      	str	r4, [r3, #0]
            break;
 80120cc:	e7e9      	b.n	80120a2 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80120ce:	2201      	movs	r2, #1
 80120d0:	e7e7      	b.n	80120a2 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 80120d2:	2202      	movs	r2, #2
 80120d4:	e7e8      	b.n	80120a8 <HAL_FLASHEx_Erase+0x84>
 80120d6:	46c0      	nop			; (mov r8, r8)
 80120d8:	200073d0 	.word	0x200073d0
 80120dc:	0000c350 	.word	0x0000c350
 80120e0:	40022000 	.word	0x40022000

080120e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80120e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120e6:	46de      	mov	lr, fp
 80120e8:	4657      	mov	r7, sl
 80120ea:	464e      	mov	r6, r9
 80120ec:	4645      	mov	r5, r8
 80120ee:	b5e0      	push	{r5, r6, r7, lr}
 80120f0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 80120f2:	680a      	ldr	r2, [r1, #0]
 80120f4:	2a00      	cmp	r2, #0
 80120f6:	d100      	bne.n	80120fa <HAL_GPIO_Init+0x16>
 80120f8:	e0bf      	b.n	801227a <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 80120fa:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80120fc:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80120fe:	2410      	movs	r4, #16
 8012100:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8012102:	3c0d      	subs	r4, #13
 8012104:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012106:	2480      	movs	r4, #128	; 0x80
 8012108:	0564      	lsls	r4, r4, #21
 801210a:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801210c:	4c5e      	ldr	r4, [pc, #376]	; (8012288 <HAL_GPIO_Init+0x1a4>)
 801210e:	1904      	adds	r4, r0, r4
 8012110:	1e65      	subs	r5, r4, #1
 8012112:	41ac      	sbcs	r4, r5
 8012114:	3404      	adds	r4, #4
 8012116:	46a1      	mov	r9, r4
 8012118:	e03b      	b.n	8012192 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 801211a:	08dc      	lsrs	r4, r3, #3
 801211c:	00a4      	lsls	r4, r4, #2
 801211e:	1904      	adds	r4, r0, r4
 8012120:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8012122:	2507      	movs	r5, #7
 8012124:	401d      	ands	r5, r3
 8012126:	00ad      	lsls	r5, r5, #2
 8012128:	220f      	movs	r2, #15
 801212a:	40aa      	lsls	r2, r5
 801212c:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801212e:	690a      	ldr	r2, [r1, #16]
 8012130:	40aa      	lsls	r2, r5
 8012132:	0015      	movs	r5, r2
 8012134:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8012136:	6225      	str	r5, [r4, #32]
 8012138:	e035      	b.n	80121a6 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801213a:	2500      	movs	r5, #0
 801213c:	465a      	mov	r2, fp
 801213e:	4095      	lsls	r5, r2
 8012140:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8012142:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012144:	4c51      	ldr	r4, [pc, #324]	; (801228c <HAL_GPIO_Init+0x1a8>)
 8012146:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8012148:	9a01      	ldr	r2, [sp, #4]
 801214a:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 801214c:	684a      	ldr	r2, [r1, #4]
 801214e:	03d2      	lsls	r2, r2, #15
 8012150:	d500      	bpl.n	8012154 <HAL_GPIO_Init+0x70>
 8012152:	e086      	b.n	8012262 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8012154:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8012156:	4f4d      	ldr	r7, [pc, #308]	; (801228c <HAL_GPIO_Init+0x1a8>)
 8012158:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 801215a:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 801215c:	684a      	ldr	r2, [r1, #4]
 801215e:	0392      	lsls	r2, r2, #14
 8012160:	d500      	bpl.n	8012164 <HAL_GPIO_Init+0x80>
 8012162:	e081      	b.n	8012268 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8012164:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8012166:	4f49      	ldr	r7, [pc, #292]	; (801228c <HAL_GPIO_Init+0x1a8>)
 8012168:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801216a:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801216c:	684a      	ldr	r2, [r1, #4]
 801216e:	02d2      	lsls	r2, r2, #11
 8012170:	d47d      	bmi.n	801226e <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8012172:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8012174:	4f45      	ldr	r7, [pc, #276]	; (801228c <HAL_GPIO_Init+0x1a8>)
 8012176:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8012178:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801217a:	684a      	ldr	r2, [r1, #4]
 801217c:	0292      	lsls	r2, r2, #10
 801217e:	d479      	bmi.n	8012274 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8012180:	0022      	movs	r2, r4
 8012182:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8012184:	4c41      	ldr	r4, [pc, #260]	; (801228c <HAL_GPIO_Init+0x1a8>)
 8012186:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8012188:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 801218a:	680a      	ldr	r2, [r1, #0]
 801218c:	0014      	movs	r4, r2
 801218e:	40dc      	lsrs	r4, r3
 8012190:	d073      	beq.n	801227a <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8012192:	0034      	movs	r4, r6
 8012194:	409c      	lsls	r4, r3
 8012196:	4022      	ands	r2, r4
 8012198:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 801219a:	d0f5      	beq.n	8012188 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801219c:	684c      	ldr	r4, [r1, #4]
 801219e:	4642      	mov	r2, r8
 80121a0:	4394      	bics	r4, r2
 80121a2:	2c02      	cmp	r4, #2
 80121a4:	d0b9      	beq.n	801211a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80121a6:	6804      	ldr	r4, [r0, #0]
 80121a8:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 80121aa:	4665      	mov	r5, ip
 80121ac:	40bd      	lsls	r5, r7
 80121ae:	43ed      	mvns	r5, r5
 80121b0:	402c      	ands	r4, r5
 80121b2:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80121b4:	684c      	ldr	r4, [r1, #4]
 80121b6:	4662      	mov	r2, ip
 80121b8:	4014      	ands	r4, r2
 80121ba:	40bc      	lsls	r4, r7
 80121bc:	465a      	mov	r2, fp
 80121be:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80121c0:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80121c2:	684c      	ldr	r4, [r1, #4]
 80121c4:	4642      	mov	r2, r8
 80121c6:	4394      	bics	r4, r2
 80121c8:	3c01      	subs	r4, #1
 80121ca:	2c01      	cmp	r4, #1
 80121cc:	d813      	bhi.n	80121f6 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 80121ce:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80121d0:	402c      	ands	r4, r5
 80121d2:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80121d4:	68cc      	ldr	r4, [r1, #12]
 80121d6:	40bc      	lsls	r4, r7
 80121d8:	465a      	mov	r2, fp
 80121da:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 80121dc:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 80121de:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80121e0:	0032      	movs	r2, r6
 80121e2:	409a      	lsls	r2, r3
 80121e4:	4394      	bics	r4, r2
 80121e6:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80121e8:	684a      	ldr	r2, [r1, #4]
 80121ea:	0914      	lsrs	r4, r2, #4
 80121ec:	4034      	ands	r4, r6
 80121ee:	409c      	lsls	r4, r3
 80121f0:	465a      	mov	r2, fp
 80121f2:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 80121f4:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 80121f6:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80121f8:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80121fa:	688d      	ldr	r5, [r1, #8]
 80121fc:	40bd      	lsls	r5, r7
 80121fe:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8012200:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012202:	684a      	ldr	r2, [r1, #4]
 8012204:	4654      	mov	r4, sl
 8012206:	4222      	tst	r2, r4
 8012208:	d0be      	beq.n	8012188 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801220a:	4c21      	ldr	r4, [pc, #132]	; (8012290 <HAL_GPIO_Init+0x1ac>)
 801220c:	69a5      	ldr	r5, [r4, #24]
 801220e:	4335      	orrs	r5, r6
 8012210:	61a5      	str	r5, [r4, #24]
 8012212:	69a4      	ldr	r4, [r4, #24]
 8012214:	4034      	ands	r4, r6
 8012216:	9403      	str	r4, [sp, #12]
 8012218:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 801221a:	089c      	lsrs	r4, r3, #2
 801221c:	00a4      	lsls	r4, r4, #2
 801221e:	4a1d      	ldr	r2, [pc, #116]	; (8012294 <HAL_GPIO_Init+0x1b0>)
 8012220:	4693      	mov	fp, r2
 8012222:	445c      	add	r4, fp
 8012224:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012226:	4667      	mov	r7, ip
 8012228:	401f      	ands	r7, r3
 801222a:	00ba      	lsls	r2, r7, #2
 801222c:	4693      	mov	fp, r2
 801222e:	270f      	movs	r7, #15
 8012230:	4097      	lsls	r7, r2
 8012232:	43bd      	bics	r5, r7
 8012234:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8012236:	2590      	movs	r5, #144	; 0x90
 8012238:	05ed      	lsls	r5, r5, #23
 801223a:	42a8      	cmp	r0, r5
 801223c:	d100      	bne.n	8012240 <HAL_GPIO_Init+0x15c>
 801223e:	e77c      	b.n	801213a <HAL_GPIO_Init+0x56>
 8012240:	4d15      	ldr	r5, [pc, #84]	; (8012298 <HAL_GPIO_Init+0x1b4>)
 8012242:	42a8      	cmp	r0, r5
 8012244:	d007      	beq.n	8012256 <HAL_GPIO_Init+0x172>
 8012246:	4d15      	ldr	r5, [pc, #84]	; (801229c <HAL_GPIO_Init+0x1b8>)
 8012248:	42a8      	cmp	r0, r5
 801224a:	d006      	beq.n	801225a <HAL_GPIO_Init+0x176>
 801224c:	4d14      	ldr	r5, [pc, #80]	; (80122a0 <HAL_GPIO_Init+0x1bc>)
 801224e:	42a8      	cmp	r0, r5
 8012250:	d005      	beq.n	801225e <HAL_GPIO_Init+0x17a>
 8012252:	464d      	mov	r5, r9
 8012254:	e772      	b.n	801213c <HAL_GPIO_Init+0x58>
 8012256:	0035      	movs	r5, r6
 8012258:	e770      	b.n	801213c <HAL_GPIO_Init+0x58>
 801225a:	2502      	movs	r5, #2
 801225c:	e76e      	b.n	801213c <HAL_GPIO_Init+0x58>
 801225e:	4665      	mov	r5, ip
 8012260:	e76c      	b.n	801213c <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8012262:	9a01      	ldr	r2, [sp, #4]
 8012264:	4314      	orrs	r4, r2
 8012266:	e776      	b.n	8012156 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8012268:	9a01      	ldr	r2, [sp, #4]
 801226a:	4314      	orrs	r4, r2
 801226c:	e77b      	b.n	8012166 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 801226e:	9a01      	ldr	r2, [sp, #4]
 8012270:	4314      	orrs	r4, r2
 8012272:	e77f      	b.n	8012174 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8012274:	9a01      	ldr	r2, [sp, #4]
 8012276:	4322      	orrs	r2, r4
 8012278:	e784      	b.n	8012184 <HAL_GPIO_Init+0xa0>
  } 
}
 801227a:	b005      	add	sp, #20
 801227c:	bc3c      	pop	{r2, r3, r4, r5}
 801227e:	4690      	mov	r8, r2
 8012280:	4699      	mov	r9, r3
 8012282:	46a2      	mov	sl, r4
 8012284:	46ab      	mov	fp, r5
 8012286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012288:	b7fff000 	.word	0xb7fff000
 801228c:	40010400 	.word	0x40010400
 8012290:	40021000 	.word	0x40021000
 8012294:	40010000 	.word	0x40010000
 8012298:	48000400 	.word	0x48000400
 801229c:	48000800 	.word	0x48000800
 80122a0:	48000c00 	.word	0x48000c00

080122a4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80122a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122a6:	46de      	mov	lr, fp
 80122a8:	4657      	mov	r7, sl
 80122aa:	464e      	mov	r6, r9
 80122ac:	4645      	mov	r5, r8
 80122ae:	b5e0      	push	{r5, r6, r7, lr}
 80122b0:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 80122b2:	2900      	cmp	r1, #0
 80122b4:	d071      	beq.n	801239a <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 80122b6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 80122b8:	2201      	movs	r2, #1
 80122ba:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80122bc:	3202      	adds	r2, #2
 80122be:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80122c0:	3204      	adds	r2, #4
 80122c2:	4693      	mov	fp, r2
 80122c4:	3208      	adds	r2, #8
 80122c6:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80122c8:	4a37      	ldr	r2, [pc, #220]	; (80123a8 <HAL_GPIO_DeInit+0x104>)
 80122ca:	1882      	adds	r2, r0, r2
 80122cc:	1e54      	subs	r4, r2, #1
 80122ce:	41a2      	sbcs	r2, r4
 80122d0:	3204      	adds	r2, #4
 80122d2:	9201      	str	r2, [sp, #4]
 80122d4:	9100      	str	r1, [sp, #0]
 80122d6:	e009      	b.n	80122ec <HAL_GPIO_DeInit+0x48>
 80122d8:	2100      	movs	r1, #0
 80122da:	4689      	mov	r9, r1
 80122dc:	4649      	mov	r1, r9
 80122de:	40a9      	lsls	r1, r5
 80122e0:	42b1      	cmp	r1, r6
 80122e2:	d048      	beq.n	8012376 <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 80122e4:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 80122e6:	9a00      	ldr	r2, [sp, #0]
 80122e8:	40da      	lsrs	r2, r3
 80122ea:	d056      	beq.n	801239a <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 80122ec:	4662      	mov	r2, ip
 80122ee:	409a      	lsls	r2, r3
 80122f0:	9900      	ldr	r1, [sp, #0]
 80122f2:	400a      	ands	r2, r1
    if (iocurrent)
 80122f4:	d0f6      	beq.n	80122e4 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 80122f6:	6804      	ldr	r4, [r0, #0]
 80122f8:	005d      	lsls	r5, r3, #1
 80122fa:	4646      	mov	r6, r8
 80122fc:	40ae      	lsls	r6, r5
 80122fe:	43f5      	mvns	r5, r6
 8012300:	402c      	ands	r4, r5
 8012302:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012304:	08dc      	lsrs	r4, r3, #3
 8012306:	00a4      	lsls	r4, r4, #2
 8012308:	1904      	adds	r4, r0, r4
 801230a:	6a26      	ldr	r6, [r4, #32]
 801230c:	465f      	mov	r7, fp
 801230e:	401f      	ands	r7, r3
 8012310:	00bf      	lsls	r7, r7, #2
 8012312:	4651      	mov	r1, sl
 8012314:	40b9      	lsls	r1, r7
 8012316:	438e      	bics	r6, r1
 8012318:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801231a:	6884      	ldr	r4, [r0, #8]
 801231c:	402c      	ands	r4, r5
 801231e:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8012320:	6844      	ldr	r4, [r0, #4]
 8012322:	4666      	mov	r6, ip
 8012324:	409e      	lsls	r6, r3
 8012326:	43b4      	bics	r4, r6
 8012328:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801232a:	68c4      	ldr	r4, [r0, #12]
 801232c:	4025      	ands	r5, r4
 801232e:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8012330:	089c      	lsrs	r4, r3, #2
 8012332:	00a4      	lsls	r4, r4, #2
 8012334:	491d      	ldr	r1, [pc, #116]	; (80123ac <HAL_GPIO_DeInit+0x108>)
 8012336:	4689      	mov	r9, r1
 8012338:	444c      	add	r4, r9
 801233a:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 801233c:	4645      	mov	r5, r8
 801233e:	401d      	ands	r5, r3
 8012340:	00ad      	lsls	r5, r5, #2
 8012342:	4657      	mov	r7, sl
 8012344:	40af      	lsls	r7, r5
 8012346:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8012348:	2190      	movs	r1, #144	; 0x90
 801234a:	05c9      	lsls	r1, r1, #23
 801234c:	4288      	cmp	r0, r1
 801234e:	d0c3      	beq.n	80122d8 <HAL_GPIO_DeInit+0x34>
 8012350:	4917      	ldr	r1, [pc, #92]	; (80123b0 <HAL_GPIO_DeInit+0x10c>)
 8012352:	4288      	cmp	r0, r1
 8012354:	d008      	beq.n	8012368 <HAL_GPIO_DeInit+0xc4>
 8012356:	4917      	ldr	r1, [pc, #92]	; (80123b4 <HAL_GPIO_DeInit+0x110>)
 8012358:	4288      	cmp	r0, r1
 801235a:	d007      	beq.n	801236c <HAL_GPIO_DeInit+0xc8>
 801235c:	4916      	ldr	r1, [pc, #88]	; (80123b8 <HAL_GPIO_DeInit+0x114>)
 801235e:	4288      	cmp	r0, r1
 8012360:	d007      	beq.n	8012372 <HAL_GPIO_DeInit+0xce>
 8012362:	9901      	ldr	r1, [sp, #4]
 8012364:	4689      	mov	r9, r1
 8012366:	e7b9      	b.n	80122dc <HAL_GPIO_DeInit+0x38>
 8012368:	46e1      	mov	r9, ip
 801236a:	e7b7      	b.n	80122dc <HAL_GPIO_DeInit+0x38>
 801236c:	2102      	movs	r1, #2
 801236e:	4689      	mov	r9, r1
 8012370:	e7b4      	b.n	80122dc <HAL_GPIO_DeInit+0x38>
 8012372:	46c1      	mov	r9, r8
 8012374:	e7b2      	b.n	80122dc <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 8012376:	68a5      	ldr	r5, [r4, #8]
 8012378:	43bd      	bics	r5, r7
 801237a:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 801237c:	4c0f      	ldr	r4, [pc, #60]	; (80123bc <HAL_GPIO_DeInit+0x118>)
 801237e:	6825      	ldr	r5, [r4, #0]
 8012380:	43d2      	mvns	r2, r2
 8012382:	4015      	ands	r5, r2
 8012384:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8012386:	6865      	ldr	r5, [r4, #4]
 8012388:	4015      	ands	r5, r2
 801238a:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 801238c:	68a5      	ldr	r5, [r4, #8]
 801238e:	4015      	ands	r5, r2
 8012390:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8012392:	68e5      	ldr	r5, [r4, #12]
 8012394:	402a      	ands	r2, r5
 8012396:	60e2      	str	r2, [r4, #12]
 8012398:	e7a4      	b.n	80122e4 <HAL_GPIO_DeInit+0x40>
  }
}
 801239a:	b003      	add	sp, #12
 801239c:	bc3c      	pop	{r2, r3, r4, r5}
 801239e:	4690      	mov	r8, r2
 80123a0:	4699      	mov	r9, r3
 80123a2:	46a2      	mov	sl, r4
 80123a4:	46ab      	mov	fp, r5
 80123a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123a8:	b7fff000 	.word	0xb7fff000
 80123ac:	40010000 	.word	0x40010000
 80123b0:	48000400 	.word	0x48000400
 80123b4:	48000800 	.word	0x48000800
 80123b8:	48000c00 	.word	0x48000c00
 80123bc:	40010400 	.word	0x40010400

080123c0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80123c0:	6900      	ldr	r0, [r0, #16]
 80123c2:	4008      	ands	r0, r1
 80123c4:	1e41      	subs	r1, r0, #1
 80123c6:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80123c8:	b2c0      	uxtb	r0, r0
  }
 80123ca:	4770      	bx	lr

080123cc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80123cc:	2a00      	cmp	r2, #0
 80123ce:	d101      	bne.n	80123d4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80123d0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80123d2:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80123d4:	6181      	str	r1, [r0, #24]
 80123d6:	e7fc      	b.n	80123d2 <HAL_GPIO_WritePin+0x6>

080123d8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80123d8:	6943      	ldr	r3, [r0, #20]
 80123da:	4059      	eors	r1, r3
 80123dc:	6141      	str	r1, [r0, #20]
}
 80123de:	4770      	bx	lr

080123e0 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80123e0:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80123e2:	6804      	ldr	r4, [r0, #0]
 80123e4:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80123e6:	4d06      	ldr	r5, [pc, #24]	; (8012400 <I2C_TransferConfig+0x20>)
 80123e8:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 80123ea:	0412      	lsls	r2, r2, #16
 80123ec:	9d03      	ldr	r5, [sp, #12]
 80123ee:	432b      	orrs	r3, r5
 80123f0:	431a      	orrs	r2, r3
 80123f2:	0589      	lsls	r1, r1, #22
 80123f4:	0d89      	lsrs	r1, r1, #22
 80123f6:	430a      	orrs	r2, r1
 80123f8:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 80123fa:	6062      	str	r2, [r4, #4]
}  
 80123fc:	bd30      	pop	{r4, r5, pc}
 80123fe:	46c0      	nop			; (mov r8, r8)
 8012400:	fc009800 	.word	0xfc009800

08012404 <I2C_IsAcknowledgeFailed>:
{
 8012404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012406:	0007      	movs	r7, r0
 8012408:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 801240a:	f7fe fbbd 	bl	8010b88 <HAL_GetTick>
 801240e:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8012414:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012416:	06d2      	lsls	r2, r2, #27
 8012418:	d53c      	bpl.n	8012494 <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 801241a:	2235      	movs	r2, #53	; 0x35
 801241c:	5cba      	ldrb	r2, [r7, r2]
 801241e:	2a12      	cmp	r2, #18
 8012420:	d007      	beq.n	8012432 <I2C_IsAcknowledgeFailed+0x2e>
 8012422:	2235      	movs	r2, #53	; 0x35
 8012424:	5cba      	ldrb	r2, [r7, r2]
 8012426:	2a52      	cmp	r2, #82	; 0x52
 8012428:	d003      	beq.n	8012432 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 801242a:	2235      	movs	r2, #53	; 0x35
 801242c:	5cba      	ldrb	r2, [r7, r2]
 801242e:	2a62      	cmp	r2, #98	; 0x62
 8012430:	d107      	bne.n	8012442 <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8012432:	685a      	ldr	r2, [r3, #4]
 8012434:	0192      	lsls	r2, r2, #6
 8012436:	d404      	bmi.n	8012442 <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012438:	6859      	ldr	r1, [r3, #4]
 801243a:	2280      	movs	r2, #128	; 0x80
 801243c:	01d2      	lsls	r2, r2, #7
 801243e:	430a      	orrs	r2, r1
 8012440:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012442:	2620      	movs	r6, #32
 8012444:	683a      	ldr	r2, [r7, #0]
 8012446:	6993      	ldr	r3, [r2, #24]
 8012448:	421e      	tst	r6, r3
 801244a:	d110      	bne.n	801246e <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 801244c:	1c63      	adds	r3, r4, #1
 801244e:	d0fa      	beq.n	8012446 <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012450:	2c00      	cmp	r4, #0
 8012452:	d004      	beq.n	801245e <I2C_IsAcknowledgeFailed+0x5a>
 8012454:	f7fe fb98 	bl	8010b88 <HAL_GetTick>
 8012458:	1b40      	subs	r0, r0, r5
 801245a:	42a0      	cmp	r0, r4
 801245c:	d9f2      	bls.n	8012444 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 801245e:	2335      	movs	r3, #53	; 0x35
 8012460:	2201      	movs	r2, #1
 8012462:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8012464:	3b01      	subs	r3, #1
 8012466:	2200      	movs	r2, #0
 8012468:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 801246a:	2003      	movs	r0, #3
 801246c:	e012      	b.n	8012494 <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801246e:	2310      	movs	r3, #16
 8012470:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	2220      	movs	r2, #32
 8012476:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012478:	683a      	ldr	r2, [r7, #0]
 801247a:	6853      	ldr	r3, [r2, #4]
 801247c:	4906      	ldr	r1, [pc, #24]	; (8012498 <I2C_IsAcknowledgeFailed+0x94>)
 801247e:	400b      	ands	r3, r1
 8012480:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8012482:	2304      	movs	r3, #4
 8012484:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 8012486:	3331      	adds	r3, #49	; 0x31
 8012488:	2201      	movs	r2, #1
 801248a:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 801248c:	3b01      	subs	r3, #1
 801248e:	2200      	movs	r2, #0
 8012490:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 8012492:	2001      	movs	r0, #1
}
 8012494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012496:	46c0      	nop			; (mov r8, r8)
 8012498:	fe00e800 	.word	0xfe00e800

0801249c <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 801249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801249e:	0004      	movs	r4, r0
 80124a0:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80124a2:	f7fe fb71 	bl	8010b88 <HAL_GetTick>
 80124a6:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80124a8:	2702      	movs	r7, #2
 80124aa:	6823      	ldr	r3, [r4, #0]
 80124ac:	699b      	ldr	r3, [r3, #24]
 80124ae:	421f      	tst	r7, r3
 80124b0:	d11a      	bne.n	80124e8 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 80124b2:	0029      	movs	r1, r5
 80124b4:	0020      	movs	r0, r4
 80124b6:	f7ff ffa5 	bl	8012404 <I2C_IsAcknowledgeFailed>
 80124ba:	2800      	cmp	r0, #0
 80124bc:	d116      	bne.n	80124ec <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 80124be:	1c6b      	adds	r3, r5, #1
 80124c0:	d0f3      	beq.n	80124aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80124c2:	2d00      	cmp	r5, #0
 80124c4:	d004      	beq.n	80124d0 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 80124c6:	f7fe fb5f 	bl	8010b88 <HAL_GetTick>
 80124ca:	1b80      	subs	r0, r0, r6
 80124cc:	42a8      	cmp	r0, r5
 80124ce:	d9ec      	bls.n	80124aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80124d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80124d2:	2220      	movs	r2, #32
 80124d4:	4313      	orrs	r3, r2
 80124d6:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 80124d8:	2335      	movs	r3, #53	; 0x35
 80124da:	3a1f      	subs	r2, #31
 80124dc:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 80124de:	3b01      	subs	r3, #1
 80124e0:	2200      	movs	r2, #0
 80124e2:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 80124e4:	2003      	movs	r0, #3
 80124e6:	e000      	b.n	80124ea <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 80124e8:	2000      	movs	r0, #0
}
 80124ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80124ec:	2001      	movs	r0, #1
 80124ee:	e7fc      	b.n	80124ea <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

080124f0 <I2C_WaitOnFlagUntilTimeout>:
{  
 80124f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124f2:	46c6      	mov	lr, r8
 80124f4:	b500      	push	{lr}
 80124f6:	0006      	movs	r6, r0
 80124f8:	000c      	movs	r4, r1
 80124fa:	0017      	movs	r7, r2
 80124fc:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80124fe:	f7fe fb43 	bl	8010b88 <HAL_GetTick>
 8012502:	4680      	mov	r8, r0
  if(Status == RESET)
 8012504:	2f00      	cmp	r7, #0
 8012506:	d118      	bne.n	801253a <I2C_WaitOnFlagUntilTimeout+0x4a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012508:	03e4      	lsls	r4, r4, #15
 801250a:	0be4      	lsrs	r4, r4, #15
 801250c:	6832      	ldr	r2, [r6, #0]
 801250e:	6993      	ldr	r3, [r2, #24]
 8012510:	0021      	movs	r1, r4
 8012512:	4399      	bics	r1, r3
 8012514:	d02a      	beq.n	801256c <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 8012516:	1c6b      	adds	r3, r5, #1
 8012518:	d0f9      	beq.n	801250e <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 801251a:	2d00      	cmp	r5, #0
 801251c:	d005      	beq.n	801252a <I2C_WaitOnFlagUntilTimeout+0x3a>
 801251e:	f7fe fb33 	bl	8010b88 <HAL_GetTick>
 8012522:	4643      	mov	r3, r8
 8012524:	1ac0      	subs	r0, r0, r3
 8012526:	42a8      	cmp	r0, r5
 8012528:	d9f0      	bls.n	801250c <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 801252a:	2335      	movs	r3, #53	; 0x35
 801252c:	2201      	movs	r2, #1
 801252e:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8012530:	3b01      	subs	r3, #1
 8012532:	2200      	movs	r2, #0
 8012534:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012536:	2003      	movs	r0, #3
 8012538:	e019      	b.n	801256e <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 801253a:	03e4      	lsls	r4, r4, #15
 801253c:	0be4      	lsrs	r4, r4, #15
 801253e:	6832      	ldr	r2, [r6, #0]
 8012540:	6993      	ldr	r3, [r2, #24]
 8012542:	0021      	movs	r1, r4
 8012544:	4399      	bics	r1, r3
 8012546:	d115      	bne.n	8012574 <I2C_WaitOnFlagUntilTimeout+0x84>
      if(Timeout != HAL_MAX_DELAY)
 8012548:	1c6b      	adds	r3, r5, #1
 801254a:	d0f9      	beq.n	8012540 <I2C_WaitOnFlagUntilTimeout+0x50>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 801254c:	2d00      	cmp	r5, #0
 801254e:	d005      	beq.n	801255c <I2C_WaitOnFlagUntilTimeout+0x6c>
 8012550:	f7fe fb1a 	bl	8010b88 <HAL_GetTick>
 8012554:	4643      	mov	r3, r8
 8012556:	1ac0      	subs	r0, r0, r3
 8012558:	42a8      	cmp	r0, r5
 801255a:	d9f0      	bls.n	801253e <I2C_WaitOnFlagUntilTimeout+0x4e>
          hi2c->State= HAL_I2C_STATE_READY;
 801255c:	2335      	movs	r3, #53	; 0x35
 801255e:	2201      	movs	r2, #1
 8012560:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8012562:	3b01      	subs	r3, #1
 8012564:	2200      	movs	r2, #0
 8012566:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012568:	2003      	movs	r0, #3
 801256a:	e000      	b.n	801256e <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 801256c:	2000      	movs	r0, #0
}
 801256e:	bc04      	pop	{r2}
 8012570:	4690      	mov	r8, r2
 8012572:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 8012574:	2000      	movs	r0, #0
 8012576:	e7fa      	b.n	801256e <I2C_WaitOnFlagUntilTimeout+0x7e>

08012578 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8012578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801257a:	0005      	movs	r5, r0
 801257c:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 801257e:	f7fe fb03 	bl	8010b88 <HAL_GetTick>
 8012582:	0007      	movs	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8012584:	2620      	movs	r6, #32
 8012586:	682b      	ldr	r3, [r5, #0]
 8012588:	699b      	ldr	r3, [r3, #24]
 801258a:	421e      	tst	r6, r3
 801258c:	d118      	bne.n	80125c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 801258e:	0021      	movs	r1, r4
 8012590:	0028      	movs	r0, r5
 8012592:	f7ff ff37 	bl	8012404 <I2C_IsAcknowledgeFailed>
 8012596:	2800      	cmp	r0, #0
 8012598:	d114      	bne.n	80125c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 801259a:	2c00      	cmp	r4, #0
 801259c:	d004      	beq.n	80125a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 801259e:	f7fe faf3 	bl	8010b88 <HAL_GetTick>
 80125a2:	1bc0      	subs	r0, r0, r7
 80125a4:	42a0      	cmp	r0, r4
 80125a6:	d9ee      	bls.n	8012586 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80125a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80125aa:	2220      	movs	r2, #32
 80125ac:	4313      	orrs	r3, r2
 80125ae:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 80125b0:	2335      	movs	r3, #53	; 0x35
 80125b2:	3a1f      	subs	r2, #31
 80125b4:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 80125b6:	3b01      	subs	r3, #1
 80125b8:	2200      	movs	r2, #0
 80125ba:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 80125bc:	2003      	movs	r0, #3
}
 80125be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80125c0:	2000      	movs	r0, #0
 80125c2:	e7fc      	b.n	80125be <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80125c4:	2001      	movs	r0, #1
 80125c6:	e7fa      	b.n	80125be <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080125c8 <HAL_I2C_MspInit>:
}
 80125c8:	4770      	bx	lr
	...

080125cc <HAL_I2C_Init>:
{ 
 80125cc:	b510      	push	{r4, lr}
 80125ce:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 80125d0:	d051      	beq.n	8012676 <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80125d2:	2335      	movs	r3, #53	; 0x35
 80125d4:	5cc3      	ldrb	r3, [r0, r3]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d03c      	beq.n	8012654 <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80125da:	2335      	movs	r3, #53	; 0x35
 80125dc:	2202      	movs	r2, #2
 80125de:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80125e0:	6822      	ldr	r2, [r4, #0]
 80125e2:	6813      	ldr	r3, [r2, #0]
 80125e4:	2101      	movs	r1, #1
 80125e6:	438b      	bics	r3, r1
 80125e8:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80125ea:	6822      	ldr	r2, [r4, #0]
 80125ec:	4b23      	ldr	r3, [pc, #140]	; (801267c <HAL_I2C_Init+0xb0>)
 80125ee:	6861      	ldr	r1, [r4, #4]
 80125f0:	400b      	ands	r3, r1
 80125f2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80125f4:	6822      	ldr	r2, [r4, #0]
 80125f6:	6893      	ldr	r3, [r2, #8]
 80125f8:	4921      	ldr	r1, [pc, #132]	; (8012680 <HAL_I2C_Init+0xb4>)
 80125fa:	400b      	ands	r3, r1
 80125fc:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 80125fe:	68a3      	ldr	r3, [r4, #8]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d007      	beq.n	8012614 <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012604:	68e2      	ldr	r2, [r4, #12]
 8012606:	2a01      	cmp	r2, #1
 8012608:	d02a      	beq.n	8012660 <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801260a:	6821      	ldr	r1, [r4, #0]
 801260c:	2284      	movs	r2, #132	; 0x84
 801260e:	0212      	lsls	r2, r2, #8
 8012610:	4313      	orrs	r3, r2
 8012612:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012614:	68e3      	ldr	r3, [r4, #12]
 8012616:	2b02      	cmp	r3, #2
 8012618:	d028      	beq.n	801266c <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801261a:	6822      	ldr	r2, [r4, #0]
 801261c:	6851      	ldr	r1, [r2, #4]
 801261e:	4b19      	ldr	r3, [pc, #100]	; (8012684 <HAL_I2C_Init+0xb8>)
 8012620:	430b      	orrs	r3, r1
 8012622:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012624:	6821      	ldr	r1, [r4, #0]
 8012626:	6923      	ldr	r3, [r4, #16]
 8012628:	6962      	ldr	r2, [r4, #20]
 801262a:	4313      	orrs	r3, r2
 801262c:	69a2      	ldr	r2, [r4, #24]
 801262e:	0212      	lsls	r2, r2, #8
 8012630:	4313      	orrs	r3, r2
 8012632:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012634:	6822      	ldr	r2, [r4, #0]
 8012636:	69e3      	ldr	r3, [r4, #28]
 8012638:	6a21      	ldr	r1, [r4, #32]
 801263a:	430b      	orrs	r3, r1
 801263c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 801263e:	6821      	ldr	r1, [r4, #0]
 8012640:	680b      	ldr	r3, [r1, #0]
 8012642:	2201      	movs	r2, #1
 8012644:	4313      	orrs	r3, r2
 8012646:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012648:	2300      	movs	r3, #0
 801264a:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 801264c:	3335      	adds	r3, #53	; 0x35
 801264e:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012650:	2000      	movs	r0, #0
}
 8012652:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8012654:	3334      	adds	r3, #52	; 0x34
 8012656:	2200      	movs	r2, #0
 8012658:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 801265a:	f7ff ffb5 	bl	80125c8 <HAL_I2C_MspInit>
 801265e:	e7bc      	b.n	80125da <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012660:	6821      	ldr	r1, [r4, #0]
 8012662:	2280      	movs	r2, #128	; 0x80
 8012664:	0212      	lsls	r2, r2, #8
 8012666:	4313      	orrs	r3, r2
 8012668:	608b      	str	r3, [r1, #8]
 801266a:	e7d3      	b.n	8012614 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801266c:	6823      	ldr	r3, [r4, #0]
 801266e:	2280      	movs	r2, #128	; 0x80
 8012670:	0112      	lsls	r2, r2, #4
 8012672:	605a      	str	r2, [r3, #4]
 8012674:	e7d1      	b.n	801261a <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8012676:	2001      	movs	r0, #1
 8012678:	e7eb      	b.n	8012652 <HAL_I2C_Init+0x86>
 801267a:	46c0      	nop			; (mov r8, r8)
 801267c:	f0ffffff 	.word	0xf0ffffff
 8012680:	ffff7fff 	.word	0xffff7fff
 8012684:	02008000 	.word	0x02008000

08012688 <HAL_I2C_Master_Transmit>:
{
 8012688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801268a:	b085      	sub	sp, #20
 801268c:	0007      	movs	r7, r0
 801268e:	9103      	str	r1, [sp, #12]
 8012690:	0016      	movs	r6, r2
 8012692:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012694:	2335      	movs	r3, #53	; 0x35
 8012696:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 8012698:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 801269a:	2b01      	cmp	r3, #1
 801269c:	d000      	beq.n	80126a0 <HAL_I2C_Master_Transmit+0x18>
 801269e:	e08c      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
    if((pData == NULL ) || (Size == 0)) 
 80126a0:	2a00      	cmp	r2, #0
 80126a2:	d100      	bne.n	80126a6 <HAL_I2C_Master_Transmit+0x1e>
 80126a4:	e088      	b.n	80127b8 <HAL_I2C_Master_Transmit+0x130>
      return  HAL_ERROR;                                    
 80126a6:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 80126a8:	2c00      	cmp	r4, #0
 80126aa:	d100      	bne.n	80126ae <HAL_I2C_Master_Transmit+0x26>
 80126ac:	e085      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	699b      	ldr	r3, [r3, #24]
 80126b2:	041b      	lsls	r3, r3, #16
 80126b4:	d500      	bpl.n	80126b8 <HAL_I2C_Master_Transmit+0x30>
 80126b6:	e082      	b.n	80127be <HAL_I2C_Master_Transmit+0x136>
    __HAL_LOCK(hi2c);
 80126b8:	2334      	movs	r3, #52	; 0x34
 80126ba:	5cfb      	ldrb	r3, [r7, r3]
 80126bc:	2b01      	cmp	r3, #1
 80126be:	d100      	bne.n	80126c2 <HAL_I2C_Master_Transmit+0x3a>
 80126c0:	e07f      	b.n	80127c2 <HAL_I2C_Master_Transmit+0x13a>
 80126c2:	2334      	movs	r3, #52	; 0x34
 80126c4:	2201      	movs	r2, #1
 80126c6:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_TX;
 80126c8:	3301      	adds	r3, #1
 80126ca:	3211      	adds	r2, #17
 80126cc:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80126ce:	2300      	movs	r3, #0
 80126d0:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 80126d2:	2cff      	cmp	r4, #255	; 0xff
 80126d4:	d90a      	bls.n	80126ec <HAL_I2C_Master_Transmit+0x64>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80126d6:	3380      	adds	r3, #128	; 0x80
 80126d8:	2280      	movs	r2, #128	; 0x80
 80126da:	0192      	lsls	r2, r2, #6
 80126dc:	9200      	str	r2, [sp, #0]
 80126de:	045b      	lsls	r3, r3, #17
 80126e0:	22ff      	movs	r2, #255	; 0xff
 80126e2:	0038      	movs	r0, r7
 80126e4:	f7ff fe7c 	bl	80123e0 <I2C_TransferConfig>
      sizetmp = 255;
 80126e8:	25ff      	movs	r5, #255	; 0xff
 80126ea:	e037      	b.n	801275c <HAL_I2C_Master_Transmit+0xd4>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80126ec:	2380      	movs	r3, #128	; 0x80
 80126ee:	b2e2      	uxtb	r2, r4
 80126f0:	2180      	movs	r1, #128	; 0x80
 80126f2:	0189      	lsls	r1, r1, #6
 80126f4:	9100      	str	r1, [sp, #0]
 80126f6:	049b      	lsls	r3, r3, #18
 80126f8:	9903      	ldr	r1, [sp, #12]
 80126fa:	0038      	movs	r0, r7
 80126fc:	f7ff fe70 	bl	80123e0 <I2C_TransferConfig>
      sizetmp = Size;
 8012700:	0025      	movs	r5, r4
 8012702:	e02b      	b.n	801275c <HAL_I2C_Master_Transmit+0xd4>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
          return HAL_TIMEOUT;
 8012706:	3804      	subs	r0, #4
 8012708:	4243      	negs	r3, r0
 801270a:	4158      	adcs	r0, r3
 801270c:	4240      	negs	r0, r0
 801270e:	2301      	movs	r3, #1
 8012710:	4398      	bics	r0, r3
 8012712:	3003      	adds	r0, #3
 8012714:	e051      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8012716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012718:	2200      	movs	r2, #0
 801271a:	2180      	movs	r1, #128	; 0x80
 801271c:	0038      	movs	r0, r7
 801271e:	f7ff fee7 	bl	80124f0 <I2C_WaitOnFlagUntilTimeout>
 8012722:	2800      	cmp	r0, #0
 8012724:	d14f      	bne.n	80127c6 <HAL_I2C_Master_Transmit+0x13e>
        if(Size > 255)
 8012726:	2cff      	cmp	r4, #255	; 0xff
 8012728:	d90a      	bls.n	8012740 <HAL_I2C_Master_Transmit+0xb8>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801272a:	2300      	movs	r3, #0
 801272c:	9300      	str	r3, [sp, #0]
 801272e:	2380      	movs	r3, #128	; 0x80
 8012730:	045b      	lsls	r3, r3, #17
 8012732:	22ff      	movs	r2, #255	; 0xff
 8012734:	9903      	ldr	r1, [sp, #12]
 8012736:	0038      	movs	r0, r7
 8012738:	f7ff fe52 	bl	80123e0 <I2C_TransferConfig>
          sizetmp = 255;
 801273c:	35ff      	adds	r5, #255	; 0xff
 801273e:	e00c      	b.n	801275a <HAL_I2C_Master_Transmit+0xd2>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8012740:	b2e2      	uxtb	r2, r4
 8012742:	2300      	movs	r3, #0
 8012744:	9300      	str	r3, [sp, #0]
 8012746:	2380      	movs	r3, #128	; 0x80
 8012748:	049b      	lsls	r3, r3, #18
 801274a:	9903      	ldr	r1, [sp, #12]
 801274c:	0038      	movs	r0, r7
 801274e:	f7ff fe47 	bl	80123e0 <I2C_TransferConfig>
          sizetmp = Size;
 8012752:	0025      	movs	r5, r4
 8012754:	e001      	b.n	801275a <HAL_I2C_Master_Transmit+0xd2>
    }while(Size > 0);
 8012756:	2c00      	cmp	r4, #0
 8012758:	d010      	beq.n	801277c <HAL_I2C_Master_Transmit+0xf4>
 801275a:	3601      	adds	r6, #1
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 801275c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801275e:	0038      	movs	r0, r7
 8012760:	f7ff fe9c 	bl	801249c <I2C_WaitOnTXISFlagUntilTimeout>
 8012764:	2800      	cmp	r0, #0
 8012766:	d1cd      	bne.n	8012704 <HAL_I2C_Master_Transmit+0x7c>
      hi2c->Instance->TXDR = (*pData++);
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	7832      	ldrb	r2, [r6, #0]
 801276c:	629a      	str	r2, [r3, #40]	; 0x28
      sizetmp--;
 801276e:	3d01      	subs	r5, #1
      Size--;
 8012770:	3c01      	subs	r4, #1
 8012772:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 8012774:	2d00      	cmp	r5, #0
 8012776:	d1ee      	bne.n	8012756 <HAL_I2C_Master_Transmit+0xce>
 8012778:	2c00      	cmp	r4, #0
 801277a:	d1cc      	bne.n	8012716 <HAL_I2C_Master_Transmit+0x8e>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 801277c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801277e:	0038      	movs	r0, r7
 8012780:	f7ff fefa 	bl	8012578 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012784:	2800      	cmp	r0, #0
 8012786:	d008      	beq.n	801279a <HAL_I2C_Master_Transmit+0x112>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012788:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 801278a:	3804      	subs	r0, #4
 801278c:	4243      	negs	r3, r0
 801278e:	4158      	adcs	r0, r3
 8012790:	4240      	negs	r0, r0
 8012792:	2301      	movs	r3, #1
 8012794:	4398      	bics	r0, r3
 8012796:	3003      	adds	r0, #3
 8012798:	e00f      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	2220      	movs	r2, #32
 801279e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80127a0:	683a      	ldr	r2, [r7, #0]
 80127a2:	6853      	ldr	r3, [r2, #4]
 80127a4:	4909      	ldr	r1, [pc, #36]	; (80127cc <HAL_I2C_Master_Transmit+0x144>)
 80127a6:	400b      	ands	r3, r1
 80127a8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80127aa:	2335      	movs	r3, #53	; 0x35
 80127ac:	2201      	movs	r2, #1
 80127ae:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 80127b0:	3b01      	subs	r3, #1
 80127b2:	2200      	movs	r2, #0
 80127b4:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 80127b6:	e000      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
      return  HAL_ERROR;                                    
 80127b8:	2001      	movs	r0, #1
}
 80127ba:	b005      	add	sp, #20
 80127bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 80127be:	2002      	movs	r0, #2
 80127c0:	e7fb      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
    __HAL_LOCK(hi2c);
 80127c2:	2002      	movs	r0, #2
 80127c4:	e7f9      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
          return HAL_TIMEOUT;
 80127c6:	2003      	movs	r0, #3
 80127c8:	e7f7      	b.n	80127ba <HAL_I2C_Master_Transmit+0x132>
 80127ca:	46c0      	nop			; (mov r8, r8)
 80127cc:	fe00e800 	.word	0xfe00e800

080127d0 <HAL_I2C_Master_Receive>:
{
 80127d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80127d2:	b085      	sub	sp, #20
 80127d4:	0007      	movs	r7, r0
 80127d6:	9103      	str	r1, [sp, #12]
 80127d8:	0016      	movs	r6, r2
 80127da:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 80127dc:	2335      	movs	r3, #53	; 0x35
 80127de:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 80127e0:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d000      	beq.n	80127e8 <HAL_I2C_Master_Receive+0x18>
 80127e6:	e084      	b.n	80128f2 <HAL_I2C_Master_Receive+0x122>
    if((pData == NULL ) || (Size == 0)) 
 80127e8:	2a00      	cmp	r2, #0
 80127ea:	d100      	bne.n	80127ee <HAL_I2C_Master_Receive+0x1e>
 80127ec:	e080      	b.n	80128f0 <HAL_I2C_Master_Receive+0x120>
      return  HAL_ERROR;                                    
 80127ee:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 80127f0:	2c00      	cmp	r4, #0
 80127f2:	d07e      	beq.n	80128f2 <HAL_I2C_Master_Receive+0x122>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	699b      	ldr	r3, [r3, #24]
 80127f8:	041b      	lsls	r3, r3, #16
 80127fa:	d500      	bpl.n	80127fe <HAL_I2C_Master_Receive+0x2e>
 80127fc:	e07b      	b.n	80128f6 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 80127fe:	2334      	movs	r3, #52	; 0x34
 8012800:	5cfb      	ldrb	r3, [r7, r3]
 8012802:	2b01      	cmp	r3, #1
 8012804:	d100      	bne.n	8012808 <HAL_I2C_Master_Receive+0x38>
 8012806:	e078      	b.n	80128fa <HAL_I2C_Master_Receive+0x12a>
 8012808:	2334      	movs	r3, #52	; 0x34
 801280a:	2201      	movs	r2, #1
 801280c:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_RX;
 801280e:	3301      	adds	r3, #1
 8012810:	3221      	adds	r2, #33	; 0x21
 8012812:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012814:	2300      	movs	r3, #0
 8012816:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 8012818:	2cff      	cmp	r4, #255	; 0xff
 801281a:	d90a      	bls.n	8012832 <HAL_I2C_Master_Receive+0x62>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 801281c:	3380      	adds	r3, #128	; 0x80
 801281e:	2290      	movs	r2, #144	; 0x90
 8012820:	0192      	lsls	r2, r2, #6
 8012822:	9200      	str	r2, [sp, #0]
 8012824:	045b      	lsls	r3, r3, #17
 8012826:	22ff      	movs	r2, #255	; 0xff
 8012828:	0038      	movs	r0, r7
 801282a:	f7ff fdd9 	bl	80123e0 <I2C_TransferConfig>
      sizetmp = 255;
 801282e:	25ff      	movs	r5, #255	; 0xff
 8012830:	e02e      	b.n	8012890 <HAL_I2C_Master_Receive+0xc0>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8012832:	2380      	movs	r3, #128	; 0x80
 8012834:	b2e2      	uxtb	r2, r4
 8012836:	2190      	movs	r1, #144	; 0x90
 8012838:	0189      	lsls	r1, r1, #6
 801283a:	9100      	str	r1, [sp, #0]
 801283c:	049b      	lsls	r3, r3, #18
 801283e:	9903      	ldr	r1, [sp, #12]
 8012840:	0038      	movs	r0, r7
 8012842:	f7ff fdcd 	bl	80123e0 <I2C_TransferConfig>
      sizetmp = Size;
 8012846:	0025      	movs	r5, r4
 8012848:	e022      	b.n	8012890 <HAL_I2C_Master_Receive+0xc0>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 801284a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801284c:	2200      	movs	r2, #0
 801284e:	2180      	movs	r1, #128	; 0x80
 8012850:	0038      	movs	r0, r7
 8012852:	f7ff fe4d 	bl	80124f0 <I2C_WaitOnFlagUntilTimeout>
 8012856:	2800      	cmp	r0, #0
 8012858:	d153      	bne.n	8012902 <HAL_I2C_Master_Receive+0x132>
        if(Size > 255)
 801285a:	2cff      	cmp	r4, #255	; 0xff
 801285c:	d90a      	bls.n	8012874 <HAL_I2C_Master_Receive+0xa4>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801285e:	2300      	movs	r3, #0
 8012860:	9300      	str	r3, [sp, #0]
 8012862:	2380      	movs	r3, #128	; 0x80
 8012864:	045b      	lsls	r3, r3, #17
 8012866:	22ff      	movs	r2, #255	; 0xff
 8012868:	9903      	ldr	r1, [sp, #12]
 801286a:	0038      	movs	r0, r7
 801286c:	f7ff fdb8 	bl	80123e0 <I2C_TransferConfig>
          sizetmp = 255;
 8012870:	35ff      	adds	r5, #255	; 0xff
 8012872:	e00c      	b.n	801288e <HAL_I2C_Master_Receive+0xbe>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8012874:	b2e2      	uxtb	r2, r4
 8012876:	2300      	movs	r3, #0
 8012878:	9300      	str	r3, [sp, #0]
 801287a:	2380      	movs	r3, #128	; 0x80
 801287c:	049b      	lsls	r3, r3, #18
 801287e:	9903      	ldr	r1, [sp, #12]
 8012880:	0038      	movs	r0, r7
 8012882:	f7ff fdad 	bl	80123e0 <I2C_TransferConfig>
          sizetmp = Size;
 8012886:	0025      	movs	r5, r4
 8012888:	e001      	b.n	801288e <HAL_I2C_Master_Receive+0xbe>
    }while(Size > 0);
 801288a:	2c00      	cmp	r4, #0
 801288c:	d012      	beq.n	80128b4 <HAL_I2C_Master_Receive+0xe4>
 801288e:	3601      	adds	r6, #1
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8012890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012892:	2200      	movs	r2, #0
 8012894:	2104      	movs	r1, #4
 8012896:	0038      	movs	r0, r7
 8012898:	f7ff fe2a 	bl	80124f0 <I2C_WaitOnFlagUntilTimeout>
 801289c:	2800      	cmp	r0, #0
 801289e:	d12e      	bne.n	80128fe <HAL_I2C_Master_Receive+0x12e>
      (*pData++) =hi2c->Instance->RXDR;
 80128a0:	683b      	ldr	r3, [r7, #0]
 80128a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a4:	7033      	strb	r3, [r6, #0]
      sizetmp--;
 80128a6:	3d01      	subs	r5, #1
      Size--;
 80128a8:	3c01      	subs	r4, #1
 80128aa:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 80128ac:	2d00      	cmp	r5, #0
 80128ae:	d1ec      	bne.n	801288a <HAL_I2C_Master_Receive+0xba>
 80128b0:	2c00      	cmp	r4, #0
 80128b2:	d1ca      	bne.n	801284a <HAL_I2C_Master_Receive+0x7a>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 80128b4:	2119      	movs	r1, #25
 80128b6:	0038      	movs	r0, r7
 80128b8:	f7ff fe5e 	bl	8012578 <I2C_WaitOnSTOPFlagUntilTimeout>
 80128bc:	2800      	cmp	r0, #0
 80128be:	d008      	beq.n	80128d2 <HAL_I2C_Master_Receive+0x102>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80128c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 80128c2:	3804      	subs	r0, #4
 80128c4:	4243      	negs	r3, r0
 80128c6:	4158      	adcs	r0, r3
 80128c8:	4240      	negs	r0, r0
 80128ca:	2301      	movs	r3, #1
 80128cc:	4398      	bics	r0, r3
 80128ce:	3003      	adds	r0, #3
 80128d0:	e00f      	b.n	80128f2 <HAL_I2C_Master_Receive+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	2220      	movs	r2, #32
 80128d6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80128d8:	683a      	ldr	r2, [r7, #0]
 80128da:	6853      	ldr	r3, [r2, #4]
 80128dc:	490a      	ldr	r1, [pc, #40]	; (8012908 <HAL_I2C_Master_Receive+0x138>)
 80128de:	400b      	ands	r3, r1
 80128e0:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80128e2:	2335      	movs	r3, #53	; 0x35
 80128e4:	2201      	movs	r2, #1
 80128e6:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 80128e8:	3b01      	subs	r3, #1
 80128ea:	2200      	movs	r2, #0
 80128ec:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 80128ee:	e000      	b.n	80128f2 <HAL_I2C_Master_Receive+0x122>
      return  HAL_ERROR;                                    
 80128f0:	2001      	movs	r0, #1
}
 80128f2:	b005      	add	sp, #20
 80128f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 80128f6:	2002      	movs	r0, #2
 80128f8:	e7fb      	b.n	80128f2 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 80128fa:	2002      	movs	r0, #2
 80128fc:	e7f9      	b.n	80128f2 <HAL_I2C_Master_Receive+0x122>
        return HAL_TIMEOUT;
 80128fe:	2003      	movs	r0, #3
 8012900:	e7f7      	b.n	80128f2 <HAL_I2C_Master_Receive+0x122>
          return HAL_TIMEOUT;
 8012902:	2003      	movs	r0, #3
 8012904:	e7f5      	b.n	80128f2 <HAL_I2C_Master_Receive+0x122>
 8012906:	46c0      	nop			; (mov r8, r8)
 8012908:	fe00e800 	.word	0xfe00e800

0801290c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 801290c:	4770      	bx	lr
	...

08012910 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8012910:	4a03      	ldr	r2, [pc, #12]	; (8012920 <HAL_PWR_EnableBkUpAccess+0x10>)
 8012912:	6811      	ldr	r1, [r2, #0]
 8012914:	2380      	movs	r3, #128	; 0x80
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	430b      	orrs	r3, r1
 801291a:	6013      	str	r3, [r2, #0]
}
 801291c:	4770      	bx	lr
 801291e:	46c0      	nop			; (mov r8, r8)
 8012920:	40007000 	.word	0x40007000

08012924 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012924:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012926:	46c6      	mov	lr, r8
 8012928:	b500      	push	{lr}
 801292a:	b082      	sub	sp, #8
 801292c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801292e:	6803      	ldr	r3, [r0, #0]
 8012930:	07db      	lsls	r3, r3, #31
 8012932:	d538      	bpl.n	80129a6 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012934:	4bbd      	ldr	r3, [pc, #756]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012936:	685a      	ldr	r2, [r3, #4]
 8012938:	230c      	movs	r3, #12
 801293a:	4013      	ands	r3, r2
 801293c:	2b04      	cmp	r3, #4
 801293e:	d02a      	beq.n	8012996 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8012940:	4bba      	ldr	r3, [pc, #744]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012942:	685a      	ldr	r2, [r3, #4]
 8012944:	230c      	movs	r3, #12
 8012946:	4013      	ands	r3, r2
 8012948:	2b08      	cmp	r3, #8
 801294a:	d108      	bne.n	801295e <HAL_RCC_OscConfig+0x3a>
 801294c:	4bb7      	ldr	r3, [pc, #732]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	22c0      	movs	r2, #192	; 0xc0
 8012952:	0252      	lsls	r2, r2, #9
 8012954:	4013      	ands	r3, r2
 8012956:	2280      	movs	r2, #128	; 0x80
 8012958:	0252      	lsls	r2, r2, #9
 801295a:	4293      	cmp	r3, r2
 801295c:	d01b      	beq.n	8012996 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 801295e:	4bb3      	ldr	r3, [pc, #716]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012960:	681a      	ldr	r2, [r3, #0]
 8012962:	49b3      	ldr	r1, [pc, #716]	; (8012c30 <HAL_RCC_OscConfig+0x30c>)
 8012964:	400a      	ands	r2, r1
 8012966:	601a      	str	r2, [r3, #0]
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	49b2      	ldr	r1, [pc, #712]	; (8012c34 <HAL_RCC_OscConfig+0x310>)
 801296c:	400a      	ands	r2, r1
 801296e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012970:	f7fe f90a 	bl	8010b88 <HAL_GetTick>
 8012974:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012976:	4ead      	ldr	r6, [pc, #692]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012978:	2580      	movs	r5, #128	; 0x80
 801297a:	02ad      	lsls	r5, r5, #10
 801297c:	6833      	ldr	r3, [r6, #0]
 801297e:	422b      	tst	r3, r5
 8012980:	d039      	beq.n	80129f6 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012982:	f7fe f901 	bl	8010b88 <HAL_GetTick>
 8012986:	1bc0      	subs	r0, r0, r7
 8012988:	2864      	cmp	r0, #100	; 0x64
 801298a:	d9f7      	bls.n	801297c <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 801298c:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 801298e:	b002      	add	sp, #8
 8012990:	bc04      	pop	{r2}
 8012992:	4690      	mov	r8, r2
 8012994:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012996:	4ba5      	ldr	r3, [pc, #660]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	039b      	lsls	r3, r3, #14
 801299c:	d503      	bpl.n	80129a6 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 801299e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80129a0:	6863      	ldr	r3, [r4, #4]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d0f3      	beq.n	801298e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80129a6:	6823      	ldr	r3, [r4, #0]
 80129a8:	079b      	lsls	r3, r3, #30
 80129aa:	d400      	bmi.n	80129ae <HAL_RCC_OscConfig+0x8a>
 80129ac:	e08d      	b.n	8012aca <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80129ae:	4b9f      	ldr	r3, [pc, #636]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 80129b0:	685b      	ldr	r3, [r3, #4]
 80129b2:	220c      	movs	r2, #12
 80129b4:	421a      	tst	r2, r3
 80129b6:	d077      	beq.n	8012aa8 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80129b8:	4b9c      	ldr	r3, [pc, #624]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 80129ba:	685a      	ldr	r2, [r3, #4]
 80129bc:	230c      	movs	r3, #12
 80129be:	4013      	ands	r3, r2
 80129c0:	2b08      	cmp	r3, #8
 80129c2:	d068      	beq.n	8012a96 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80129c4:	68e3      	ldr	r3, [r4, #12]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d100      	bne.n	80129cc <HAL_RCC_OscConfig+0xa8>
 80129ca:	e0a1      	b.n	8012b10 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 80129cc:	4a97      	ldr	r2, [pc, #604]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 80129ce:	6813      	ldr	r3, [r2, #0]
 80129d0:	2101      	movs	r1, #1
 80129d2:	430b      	orrs	r3, r1
 80129d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80129d6:	f7fe f8d7 	bl	8010b88 <HAL_GetTick>
 80129da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80129dc:	4e93      	ldr	r6, [pc, #588]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 80129de:	2502      	movs	r5, #2
 80129e0:	6833      	ldr	r3, [r6, #0]
 80129e2:	421d      	tst	r5, r3
 80129e4:	d000      	beq.n	80129e8 <HAL_RCC_OscConfig+0xc4>
 80129e6:	e08a      	b.n	8012afe <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80129e8:	f7fe f8ce 	bl	8010b88 <HAL_GetTick>
 80129ec:	1bc0      	subs	r0, r0, r7
 80129ee:	2864      	cmp	r0, #100	; 0x64
 80129f0:	d9f6      	bls.n	80129e0 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 80129f2:	2003      	movs	r0, #3
 80129f4:	e7cb      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80129f6:	6863      	ldr	r3, [r4, #4]
 80129f8:	2b01      	cmp	r3, #1
 80129fa:	d00b      	beq.n	8012a14 <HAL_RCC_OscConfig+0xf0>
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d122      	bne.n	8012a46 <HAL_RCC_OscConfig+0x122>
 8012a00:	4b8a      	ldr	r3, [pc, #552]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012a02:	681a      	ldr	r2, [r3, #0]
 8012a04:	498a      	ldr	r1, [pc, #552]	; (8012c30 <HAL_RCC_OscConfig+0x30c>)
 8012a06:	400a      	ands	r2, r1
 8012a08:	601a      	str	r2, [r3, #0]
 8012a0a:	681a      	ldr	r2, [r3, #0]
 8012a0c:	4989      	ldr	r1, [pc, #548]	; (8012c34 <HAL_RCC_OscConfig+0x310>)
 8012a0e:	400a      	ands	r2, r1
 8012a10:	601a      	str	r2, [r3, #0]
 8012a12:	e005      	b.n	8012a20 <HAL_RCC_OscConfig+0xfc>
 8012a14:	4a85      	ldr	r2, [pc, #532]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012a16:	6811      	ldr	r1, [r2, #0]
 8012a18:	2380      	movs	r3, #128	; 0x80
 8012a1a:	025b      	lsls	r3, r3, #9
 8012a1c:	430b      	orrs	r3, r1
 8012a1e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012a20:	6863      	ldr	r3, [r4, #4]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d027      	beq.n	8012a76 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8012a26:	f7fe f8af 	bl	8010b88 <HAL_GetTick>
 8012a2a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a2c:	4e7f      	ldr	r6, [pc, #508]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012a2e:	2580      	movs	r5, #128	; 0x80
 8012a30:	02ad      	lsls	r5, r5, #10
 8012a32:	6833      	ldr	r3, [r6, #0]
 8012a34:	422b      	tst	r3, r5
 8012a36:	d1b6      	bne.n	80129a6 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a38:	f7fe f8a6 	bl	8010b88 <HAL_GetTick>
 8012a3c:	1bc0      	subs	r0, r0, r7
 8012a3e:	2864      	cmp	r0, #100	; 0x64
 8012a40:	d9f7      	bls.n	8012a32 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8012a42:	2003      	movs	r0, #3
 8012a44:	e7a3      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012a46:	2b05      	cmp	r3, #5
 8012a48:	d009      	beq.n	8012a5e <HAL_RCC_OscConfig+0x13a>
 8012a4a:	4b78      	ldr	r3, [pc, #480]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	4978      	ldr	r1, [pc, #480]	; (8012c30 <HAL_RCC_OscConfig+0x30c>)
 8012a50:	400a      	ands	r2, r1
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	4977      	ldr	r1, [pc, #476]	; (8012c34 <HAL_RCC_OscConfig+0x310>)
 8012a58:	400a      	ands	r2, r1
 8012a5a:	601a      	str	r2, [r3, #0]
 8012a5c:	e7e0      	b.n	8012a20 <HAL_RCC_OscConfig+0xfc>
 8012a5e:	4b73      	ldr	r3, [pc, #460]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012a60:	6819      	ldr	r1, [r3, #0]
 8012a62:	2280      	movs	r2, #128	; 0x80
 8012a64:	02d2      	lsls	r2, r2, #11
 8012a66:	430a      	orrs	r2, r1
 8012a68:	601a      	str	r2, [r3, #0]
 8012a6a:	6819      	ldr	r1, [r3, #0]
 8012a6c:	2280      	movs	r2, #128	; 0x80
 8012a6e:	0252      	lsls	r2, r2, #9
 8012a70:	430a      	orrs	r2, r1
 8012a72:	601a      	str	r2, [r3, #0]
 8012a74:	e7d4      	b.n	8012a20 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8012a76:	f7fe f887 	bl	8010b88 <HAL_GetTick>
 8012a7a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a7c:	4e6b      	ldr	r6, [pc, #428]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012a7e:	2580      	movs	r5, #128	; 0x80
 8012a80:	02ad      	lsls	r5, r5, #10
 8012a82:	6833      	ldr	r3, [r6, #0]
 8012a84:	422b      	tst	r3, r5
 8012a86:	d08e      	beq.n	80129a6 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a88:	f7fe f87e 	bl	8010b88 <HAL_GetTick>
 8012a8c:	1bc0      	subs	r0, r0, r7
 8012a8e:	2864      	cmp	r0, #100	; 0x64
 8012a90:	d9f7      	bls.n	8012a82 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8012a92:	2003      	movs	r0, #3
 8012a94:	e77b      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012a96:	4b65      	ldr	r3, [pc, #404]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	22c0      	movs	r2, #192	; 0xc0
 8012a9c:	0252      	lsls	r2, r2, #9
 8012a9e:	4013      	ands	r3, r2
 8012aa0:	2280      	movs	r2, #128	; 0x80
 8012aa2:	0212      	lsls	r2, r2, #8
 8012aa4:	4293      	cmp	r3, r2
 8012aa6:	d18d      	bne.n	80129c4 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012aa8:	4b60      	ldr	r3, [pc, #384]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	079b      	lsls	r3, r3, #30
 8012aae:	d504      	bpl.n	8012aba <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8012ab0:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012ab2:	68e3      	ldr	r3, [r4, #12]
 8012ab4:	2b01      	cmp	r3, #1
 8012ab6:	d000      	beq.n	8012aba <HAL_RCC_OscConfig+0x196>
 8012ab8:	e769      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012aba:	495c      	ldr	r1, [pc, #368]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012abc:	680a      	ldr	r2, [r1, #0]
 8012abe:	6923      	ldr	r3, [r4, #16]
 8012ac0:	00db      	lsls	r3, r3, #3
 8012ac2:	20f8      	movs	r0, #248	; 0xf8
 8012ac4:	4382      	bics	r2, r0
 8012ac6:	4313      	orrs	r3, r2
 8012ac8:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	071b      	lsls	r3, r3, #28
 8012ace:	d547      	bpl.n	8012b60 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012ad0:	6a23      	ldr	r3, [r4, #32]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d030      	beq.n	8012b38 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8012ad6:	4a55      	ldr	r2, [pc, #340]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012ad8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012ada:	2101      	movs	r1, #1
 8012adc:	430b      	orrs	r3, r1
 8012ade:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012ae0:	f7fe f852 	bl	8010b88 <HAL_GetTick>
 8012ae4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012ae6:	4e51      	ldr	r6, [pc, #324]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012ae8:	2502      	movs	r5, #2
 8012aea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012aec:	421d      	tst	r5, r3
 8012aee:	d137      	bne.n	8012b60 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012af0:	f7fe f84a 	bl	8010b88 <HAL_GetTick>
 8012af4:	1bc0      	subs	r0, r0, r7
 8012af6:	2864      	cmp	r0, #100	; 0x64
 8012af8:	d9f7      	bls.n	8012aea <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8012afa:	2003      	movs	r0, #3
 8012afc:	e747      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012afe:	494b      	ldr	r1, [pc, #300]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012b00:	680a      	ldr	r2, [r1, #0]
 8012b02:	6923      	ldr	r3, [r4, #16]
 8012b04:	00db      	lsls	r3, r3, #3
 8012b06:	20f8      	movs	r0, #248	; 0xf8
 8012b08:	4382      	bics	r2, r0
 8012b0a:	4313      	orrs	r3, r2
 8012b0c:	600b      	str	r3, [r1, #0]
 8012b0e:	e7dc      	b.n	8012aca <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012b10:	4a46      	ldr	r2, [pc, #280]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012b12:	6813      	ldr	r3, [r2, #0]
 8012b14:	2101      	movs	r1, #1
 8012b16:	438b      	bics	r3, r1
 8012b18:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012b1a:	f7fe f835 	bl	8010b88 <HAL_GetTick>
 8012b1e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012b20:	4e42      	ldr	r6, [pc, #264]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012b22:	2502      	movs	r5, #2
 8012b24:	6833      	ldr	r3, [r6, #0]
 8012b26:	421d      	tst	r5, r3
 8012b28:	d0cf      	beq.n	8012aca <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012b2a:	f7fe f82d 	bl	8010b88 <HAL_GetTick>
 8012b2e:	1bc0      	subs	r0, r0, r7
 8012b30:	2864      	cmp	r0, #100	; 0x64
 8012b32:	d9f7      	bls.n	8012b24 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012b34:	2003      	movs	r0, #3
 8012b36:	e72a      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8012b38:	4a3c      	ldr	r2, [pc, #240]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012b3a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012b3c:	2101      	movs	r1, #1
 8012b3e:	438b      	bics	r3, r1
 8012b40:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012b42:	f7fe f821 	bl	8010b88 <HAL_GetTick>
 8012b46:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b48:	4e38      	ldr	r6, [pc, #224]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012b4a:	2502      	movs	r5, #2
 8012b4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012b4e:	421d      	tst	r5, r3
 8012b50:	d006      	beq.n	8012b60 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b52:	f7fe f819 	bl	8010b88 <HAL_GetTick>
 8012b56:	1bc0      	subs	r0, r0, r7
 8012b58:	2864      	cmp	r0, #100	; 0x64
 8012b5a:	d9f7      	bls.n	8012b4c <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8012b5c:	2003      	movs	r0, #3
 8012b5e:	e716      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012b60:	6823      	ldr	r3, [r4, #0]
 8012b62:	075b      	lsls	r3, r3, #29
 8012b64:	d442      	bmi.n	8012bec <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	06db      	lsls	r3, r3, #27
 8012b6a:	d512      	bpl.n	8012b92 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8012b6c:	6963      	ldr	r3, [r4, #20]
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d100      	bne.n	8012b74 <HAL_RCC_OscConfig+0x250>
 8012b72:	e0ce      	b.n	8012d12 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8012b74:	3305      	adds	r3, #5
 8012b76:	d000      	beq.n	8012b7a <HAL_RCC_OscConfig+0x256>
 8012b78:	e0ec      	b.n	8012d54 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8012b7a:	4a2c      	ldr	r2, [pc, #176]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012b7c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012b7e:	2104      	movs	r1, #4
 8012b80:	438b      	bics	r3, r1
 8012b82:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012b84:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012b86:	69a3      	ldr	r3, [r4, #24]
 8012b88:	00db      	lsls	r3, r3, #3
 8012b8a:	20f8      	movs	r0, #248	; 0xf8
 8012b8c:	4381      	bics	r1, r0
 8012b8e:	430b      	orrs	r3, r1
 8012b90:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012b92:	6823      	ldr	r3, [r4, #0]
 8012b94:	069b      	lsls	r3, r3, #26
 8012b96:	d400      	bmi.n	8012b9a <HAL_RCC_OscConfig+0x276>
 8012b98:	e106      	b.n	8012da8 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012b9a:	4b24      	ldr	r3, [pc, #144]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012b9c:	685a      	ldr	r2, [r3, #4]
 8012b9e:	230c      	movs	r3, #12
 8012ba0:	4013      	ands	r3, r2
 8012ba2:	2b0c      	cmp	r3, #12
 8012ba4:	d100      	bne.n	8012ba8 <HAL_RCC_OscConfig+0x284>
 8012ba6:	e0f6      	b.n	8012d96 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012ba8:	4b20      	ldr	r3, [pc, #128]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012baa:	685a      	ldr	r2, [r3, #4]
 8012bac:	230c      	movs	r3, #12
 8012bae:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012bb0:	2b08      	cmp	r3, #8
 8012bb2:	d100      	bne.n	8012bb6 <HAL_RCC_OscConfig+0x292>
 8012bb4:	e0e7      	b.n	8012d86 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012bb6:	69e3      	ldr	r3, [r4, #28]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d100      	bne.n	8012bbe <HAL_RCC_OscConfig+0x29a>
 8012bbc:	e116      	b.n	8012dec <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8012bbe:	4a1b      	ldr	r2, [pc, #108]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012bc0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012bc2:	2380      	movs	r3, #128	; 0x80
 8012bc4:	025b      	lsls	r3, r3, #9
 8012bc6:	430b      	orrs	r3, r1
 8012bc8:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012bca:	f7fd ffdd 	bl	8010b88 <HAL_GetTick>
 8012bce:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012bd0:	4e16      	ldr	r6, [pc, #88]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012bd2:	2580      	movs	r5, #128	; 0x80
 8012bd4:	026d      	lsls	r5, r5, #9
 8012bd6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012bd8:	422b      	tst	r3, r5
 8012bda:	d000      	beq.n	8012bde <HAL_RCC_OscConfig+0x2ba>
 8012bdc:	e0e4      	b.n	8012da8 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012bde:	f7fd ffd3 	bl	8010b88 <HAL_GetTick>
 8012be2:	1bc0      	subs	r0, r0, r7
 8012be4:	2864      	cmp	r0, #100	; 0x64
 8012be6:	d9f6      	bls.n	8012bd6 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012be8:	2003      	movs	r0, #3
 8012bea:	e6d0      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012bec:	4a0f      	ldr	r2, [pc, #60]	; (8012c2c <HAL_RCC_OscConfig+0x308>)
 8012bee:	69d1      	ldr	r1, [r2, #28]
 8012bf0:	2080      	movs	r0, #128	; 0x80
 8012bf2:	0540      	lsls	r0, r0, #21
 8012bf4:	4301      	orrs	r1, r0
 8012bf6:	61d1      	str	r1, [r2, #28]
 8012bf8:	69d3      	ldr	r3, [r2, #28]
 8012bfa:	4003      	ands	r3, r0
 8012bfc:	9301      	str	r3, [sp, #4]
 8012bfe:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012c00:	4a0d      	ldr	r2, [pc, #52]	; (8012c38 <HAL_RCC_OscConfig+0x314>)
 8012c02:	6811      	ldr	r1, [r2, #0]
 8012c04:	2380      	movs	r3, #128	; 0x80
 8012c06:	005b      	lsls	r3, r3, #1
 8012c08:	430b      	orrs	r3, r1
 8012c0a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012c0c:	f7fd ffbc 	bl	8010b88 <HAL_GetTick>
 8012c10:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012c12:	4e09      	ldr	r6, [pc, #36]	; (8012c38 <HAL_RCC_OscConfig+0x314>)
 8012c14:	2580      	movs	r5, #128	; 0x80
 8012c16:	006d      	lsls	r5, r5, #1
 8012c18:	6833      	ldr	r3, [r6, #0]
 8012c1a:	422b      	tst	r3, r5
 8012c1c:	d10e      	bne.n	8012c3c <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012c1e:	f7fd ffb3 	bl	8010b88 <HAL_GetTick>
 8012c22:	1bc0      	subs	r0, r0, r7
 8012c24:	2864      	cmp	r0, #100	; 0x64
 8012c26:	d9f7      	bls.n	8012c18 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8012c28:	2003      	movs	r0, #3
 8012c2a:	e6b0      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
 8012c2c:	40021000 	.word	0x40021000
 8012c30:	fffeffff 	.word	0xfffeffff
 8012c34:	fffbffff 	.word	0xfffbffff
 8012c38:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012c3c:	4b95      	ldr	r3, [pc, #596]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012c3e:	6a1a      	ldr	r2, [r3, #32]
 8012c40:	2101      	movs	r1, #1
 8012c42:	438a      	bics	r2, r1
 8012c44:	621a      	str	r2, [r3, #32]
 8012c46:	6a1a      	ldr	r2, [r3, #32]
 8012c48:	3103      	adds	r1, #3
 8012c4a:	438a      	bics	r2, r1
 8012c4c:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8012c4e:	f7fd ff9b 	bl	8010b88 <HAL_GetTick>
 8012c52:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c54:	4e8f      	ldr	r6, [pc, #572]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012c56:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c58:	4f8f      	ldr	r7, [pc, #572]	; (8012e98 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012c5a:	6a33      	ldr	r3, [r6, #32]
 8012c5c:	421d      	tst	r5, r3
 8012c5e:	d007      	beq.n	8012c70 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c60:	f7fd ff92 	bl	8010b88 <HAL_GetTick>
 8012c64:	4643      	mov	r3, r8
 8012c66:	1ac0      	subs	r0, r0, r3
 8012c68:	42b8      	cmp	r0, r7
 8012c6a:	d9f6      	bls.n	8012c5a <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8012c6c:	2003      	movs	r0, #3
 8012c6e:	e68e      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012c70:	68a3      	ldr	r3, [r4, #8]
 8012c72:	2b01      	cmp	r3, #1
 8012c74:	d00b      	beq.n	8012c8e <HAL_RCC_OscConfig+0x36a>
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d123      	bne.n	8012cc2 <HAL_RCC_OscConfig+0x39e>
 8012c7a:	4b86      	ldr	r3, [pc, #536]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012c7c:	6a1a      	ldr	r2, [r3, #32]
 8012c7e:	2101      	movs	r1, #1
 8012c80:	438a      	bics	r2, r1
 8012c82:	621a      	str	r2, [r3, #32]
 8012c84:	6a1a      	ldr	r2, [r3, #32]
 8012c86:	3103      	adds	r1, #3
 8012c88:	438a      	bics	r2, r1
 8012c8a:	621a      	str	r2, [r3, #32]
 8012c8c:	e004      	b.n	8012c98 <HAL_RCC_OscConfig+0x374>
 8012c8e:	4a81      	ldr	r2, [pc, #516]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012c90:	6a13      	ldr	r3, [r2, #32]
 8012c92:	2101      	movs	r1, #1
 8012c94:	430b      	orrs	r3, r1
 8012c96:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012c98:	68a3      	ldr	r3, [r4, #8]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d027      	beq.n	8012cee <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8012c9e:	f7fd ff73 	bl	8010b88 <HAL_GetTick>
 8012ca2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012ca4:	4e7b      	ldr	r6, [pc, #492]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012ca6:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012ca8:	4f7b      	ldr	r7, [pc, #492]	; (8012e98 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012caa:	6a33      	ldr	r3, [r6, #32]
 8012cac:	421d      	tst	r5, r3
 8012cae:	d000      	beq.n	8012cb2 <HAL_RCC_OscConfig+0x38e>
 8012cb0:	e759      	b.n	8012b66 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012cb2:	f7fd ff69 	bl	8010b88 <HAL_GetTick>
 8012cb6:	4643      	mov	r3, r8
 8012cb8:	1ac0      	subs	r0, r0, r3
 8012cba:	42b8      	cmp	r0, r7
 8012cbc:	d9f5      	bls.n	8012caa <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8012cbe:	2003      	movs	r0, #3
 8012cc0:	e665      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012cc2:	2b05      	cmp	r3, #5
 8012cc4:	d009      	beq.n	8012cda <HAL_RCC_OscConfig+0x3b6>
 8012cc6:	4b73      	ldr	r3, [pc, #460]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012cc8:	6a1a      	ldr	r2, [r3, #32]
 8012cca:	2101      	movs	r1, #1
 8012ccc:	438a      	bics	r2, r1
 8012cce:	621a      	str	r2, [r3, #32]
 8012cd0:	6a1a      	ldr	r2, [r3, #32]
 8012cd2:	3103      	adds	r1, #3
 8012cd4:	438a      	bics	r2, r1
 8012cd6:	621a      	str	r2, [r3, #32]
 8012cd8:	e7de      	b.n	8012c98 <HAL_RCC_OscConfig+0x374>
 8012cda:	4b6e      	ldr	r3, [pc, #440]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012cdc:	6a1a      	ldr	r2, [r3, #32]
 8012cde:	2104      	movs	r1, #4
 8012ce0:	430a      	orrs	r2, r1
 8012ce2:	621a      	str	r2, [r3, #32]
 8012ce4:	6a1a      	ldr	r2, [r3, #32]
 8012ce6:	3903      	subs	r1, #3
 8012ce8:	430a      	orrs	r2, r1
 8012cea:	621a      	str	r2, [r3, #32]
 8012cec:	e7d4      	b.n	8012c98 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012cee:	f7fd ff4b 	bl	8010b88 <HAL_GetTick>
 8012cf2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cf4:	4e67      	ldr	r6, [pc, #412]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012cf6:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012cf8:	4f67      	ldr	r7, [pc, #412]	; (8012e98 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cfa:	6a33      	ldr	r3, [r6, #32]
 8012cfc:	421d      	tst	r5, r3
 8012cfe:	d100      	bne.n	8012d02 <HAL_RCC_OscConfig+0x3de>
 8012d00:	e731      	b.n	8012b66 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d02:	f7fd ff41 	bl	8010b88 <HAL_GetTick>
 8012d06:	4643      	mov	r3, r8
 8012d08:	1ac0      	subs	r0, r0, r3
 8012d0a:	42b8      	cmp	r0, r7
 8012d0c:	d9f5      	bls.n	8012cfa <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8012d0e:	2003      	movs	r0, #3
 8012d10:	e63d      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012d12:	4b60      	ldr	r3, [pc, #384]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d16:	2104      	movs	r1, #4
 8012d18:	430a      	orrs	r2, r1
 8012d1a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d1e:	3903      	subs	r1, #3
 8012d20:	430a      	orrs	r2, r1
 8012d22:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012d24:	f7fd ff30 	bl	8010b88 <HAL_GetTick>
 8012d28:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8012d2a:	4e5a      	ldr	r6, [pc, #360]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012d2c:	2502      	movs	r5, #2
 8012d2e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012d30:	421d      	tst	r5, r3
 8012d32:	d106      	bne.n	8012d42 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012d34:	f7fd ff28 	bl	8010b88 <HAL_GetTick>
 8012d38:	1bc0      	subs	r0, r0, r7
 8012d3a:	2864      	cmp	r0, #100	; 0x64
 8012d3c:	d9f7      	bls.n	8012d2e <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012d3e:	2003      	movs	r0, #3
 8012d40:	e625      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012d42:	4954      	ldr	r1, [pc, #336]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012d44:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8012d46:	69a3      	ldr	r3, [r4, #24]
 8012d48:	00db      	lsls	r3, r3, #3
 8012d4a:	20f8      	movs	r0, #248	; 0xf8
 8012d4c:	4382      	bics	r2, r0
 8012d4e:	4313      	orrs	r3, r2
 8012d50:	634b      	str	r3, [r1, #52]	; 0x34
 8012d52:	e71e      	b.n	8012b92 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012d54:	4b4f      	ldr	r3, [pc, #316]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012d56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d58:	2104      	movs	r1, #4
 8012d5a:	430a      	orrs	r2, r1
 8012d5c:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8012d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d60:	3903      	subs	r1, #3
 8012d62:	438a      	bics	r2, r1
 8012d64:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012d66:	f7fd ff0f 	bl	8010b88 <HAL_GetTick>
 8012d6a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012d6c:	4e49      	ldr	r6, [pc, #292]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012d6e:	2502      	movs	r5, #2
 8012d70:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012d72:	421d      	tst	r5, r3
 8012d74:	d100      	bne.n	8012d78 <HAL_RCC_OscConfig+0x454>
 8012d76:	e70c      	b.n	8012b92 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012d78:	f7fd ff06 	bl	8010b88 <HAL_GetTick>
 8012d7c:	1bc0      	subs	r0, r0, r7
 8012d7e:	2864      	cmp	r0, #100	; 0x64
 8012d80:	d9f6      	bls.n	8012d70 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8012d82:	2003      	movs	r0, #3
 8012d84:	e603      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012d86:	4b43      	ldr	r3, [pc, #268]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	22c0      	movs	r2, #192	; 0xc0
 8012d8c:	0252      	lsls	r2, r2, #9
 8012d8e:	4013      	ands	r3, r2
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d000      	beq.n	8012d96 <HAL_RCC_OscConfig+0x472>
 8012d94:	e70f      	b.n	8012bb6 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012d96:	4b3f      	ldr	r3, [pc, #252]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d9a:	03db      	lsls	r3, r3, #15
 8012d9c:	d504      	bpl.n	8012da8 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8012d9e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012da0:	69e3      	ldr	r3, [r4, #28]
 8012da2:	2b01      	cmp	r3, #1
 8012da4:	d000      	beq.n	8012da8 <HAL_RCC_OscConfig+0x484>
 8012da6:	e5f2      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012daa:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d100      	bne.n	8012db2 <HAL_RCC_OscConfig+0x48e>
 8012db0:	e5ed      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012db2:	4a38      	ldr	r2, [pc, #224]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012db4:	6851      	ldr	r1, [r2, #4]
 8012db6:	220c      	movs	r2, #12
 8012db8:	400a      	ands	r2, r1
 8012dba:	2a08      	cmp	r2, #8
 8012dbc:	d068      	beq.n	8012e90 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012dbe:	2b02      	cmp	r3, #2
 8012dc0:	d029      	beq.n	8012e16 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8012dc2:	4a34      	ldr	r2, [pc, #208]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012dc4:	6813      	ldr	r3, [r2, #0]
 8012dc6:	4935      	ldr	r1, [pc, #212]	; (8012e9c <HAL_RCC_OscConfig+0x578>)
 8012dc8:	400b      	ands	r3, r1
 8012dca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012dcc:	f7fd fedc 	bl	8010b88 <HAL_GetTick>
 8012dd0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012dd2:	4d30      	ldr	r5, [pc, #192]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012dd4:	2480      	movs	r4, #128	; 0x80
 8012dd6:	04a4      	lsls	r4, r4, #18
 8012dd8:	682b      	ldr	r3, [r5, #0]
 8012dda:	4223      	tst	r3, r4
 8012ddc:	d056      	beq.n	8012e8c <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012dde:	f7fd fed3 	bl	8010b88 <HAL_GetTick>
 8012de2:	1b80      	subs	r0, r0, r6
 8012de4:	2864      	cmp	r0, #100	; 0x64
 8012de6:	d9f7      	bls.n	8012dd8 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012de8:	2003      	movs	r0, #3
 8012dea:	e5d0      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012dec:	4a29      	ldr	r2, [pc, #164]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012dee:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012df0:	492b      	ldr	r1, [pc, #172]	; (8012ea0 <HAL_RCC_OscConfig+0x57c>)
 8012df2:	400b      	ands	r3, r1
 8012df4:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012df6:	f7fd fec7 	bl	8010b88 <HAL_GetTick>
 8012dfa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012dfc:	4e25      	ldr	r6, [pc, #148]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012dfe:	2580      	movs	r5, #128	; 0x80
 8012e00:	026d      	lsls	r5, r5, #9
 8012e02:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012e04:	422b      	tst	r3, r5
 8012e06:	d0cf      	beq.n	8012da8 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012e08:	f7fd febe 	bl	8010b88 <HAL_GetTick>
 8012e0c:	1bc0      	subs	r0, r0, r7
 8012e0e:	2864      	cmp	r0, #100	; 0x64
 8012e10:	d9f7      	bls.n	8012e02 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012e12:	2003      	movs	r0, #3
 8012e14:	e5bb      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8012e16:	4a1f      	ldr	r2, [pc, #124]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012e18:	6813      	ldr	r3, [r2, #0]
 8012e1a:	4920      	ldr	r1, [pc, #128]	; (8012e9c <HAL_RCC_OscConfig+0x578>)
 8012e1c:	400b      	ands	r3, r1
 8012e1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012e20:	f7fd feb2 	bl	8010b88 <HAL_GetTick>
 8012e24:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012e26:	4e1b      	ldr	r6, [pc, #108]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012e28:	2580      	movs	r5, #128	; 0x80
 8012e2a:	04ad      	lsls	r5, r5, #18
 8012e2c:	6833      	ldr	r3, [r6, #0]
 8012e2e:	422b      	tst	r3, r5
 8012e30:	d006      	beq.n	8012e40 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012e32:	f7fd fea9 	bl	8010b88 <HAL_GetTick>
 8012e36:	1bc0      	subs	r0, r0, r7
 8012e38:	2864      	cmp	r0, #100	; 0x64
 8012e3a:	d9f7      	bls.n	8012e2c <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012e3c:	2003      	movs	r0, #3
 8012e3e:	e5a6      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012e40:	4b14      	ldr	r3, [pc, #80]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e44:	210f      	movs	r1, #15
 8012e46:	438a      	bics	r2, r1
 8012e48:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012e4a:	430a      	orrs	r2, r1
 8012e4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8012e4e:	6859      	ldr	r1, [r3, #4]
 8012e50:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012e52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012e54:	4302      	orrs	r2, r0
 8012e56:	4813      	ldr	r0, [pc, #76]	; (8012ea4 <HAL_RCC_OscConfig+0x580>)
 8012e58:	4001      	ands	r1, r0
 8012e5a:	430a      	orrs	r2, r1
 8012e5c:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012e5e:	6819      	ldr	r1, [r3, #0]
 8012e60:	2280      	movs	r2, #128	; 0x80
 8012e62:	0452      	lsls	r2, r2, #17
 8012e64:	430a      	orrs	r2, r1
 8012e66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012e68:	f7fd fe8e 	bl	8010b88 <HAL_GetTick>
 8012e6c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012e6e:	4d09      	ldr	r5, [pc, #36]	; (8012e94 <HAL_RCC_OscConfig+0x570>)
 8012e70:	2480      	movs	r4, #128	; 0x80
 8012e72:	04a4      	lsls	r4, r4, #18
 8012e74:	682b      	ldr	r3, [r5, #0]
 8012e76:	4223      	tst	r3, r4
 8012e78:	d106      	bne.n	8012e88 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012e7a:	f7fd fe85 	bl	8010b88 <HAL_GetTick>
 8012e7e:	1b80      	subs	r0, r0, r6
 8012e80:	2864      	cmp	r0, #100	; 0x64
 8012e82:	d9f7      	bls.n	8012e74 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012e84:	2003      	movs	r0, #3
 8012e86:	e582      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012e88:	2000      	movs	r0, #0
 8012e8a:	e580      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	e57e      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8012e90:	2001      	movs	r0, #1
 8012e92:	e57c      	b.n	801298e <HAL_RCC_OscConfig+0x6a>
 8012e94:	40021000 	.word	0x40021000
 8012e98:	00001388 	.word	0x00001388
 8012e9c:	feffffff 	.word	0xfeffffff
 8012ea0:	fffeffff 	.word	0xfffeffff
 8012ea4:	ffc27fff 	.word	0xffc27fff

08012ea8 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eaa:	46ce      	mov	lr, r9
 8012eac:	4647      	mov	r7, r8
 8012eae:	b580      	push	{r7, lr}
 8012eb0:	0005      	movs	r5, r0
 8012eb2:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012eb4:	4b95      	ldr	r3, [pc, #596]	; (801310c <HAL_RCC_ClockConfig+0x264>)
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	2301      	movs	r3, #1
 8012eba:	4013      	ands	r3, r2
 8012ebc:	428b      	cmp	r3, r1
 8012ebe:	d300      	bcc.n	8012ec2 <HAL_RCC_ClockConfig+0x1a>
 8012ec0:	e089      	b.n	8012fd6 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012ec2:	4992      	ldr	r1, [pc, #584]	; (801310c <HAL_RCC_ClockConfig+0x264>)
 8012ec4:	680b      	ldr	r3, [r1, #0]
 8012ec6:	2201      	movs	r2, #1
 8012ec8:	4393      	bics	r3, r2
 8012eca:	4323      	orrs	r3, r4
 8012ecc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012ece:	680b      	ldr	r3, [r1, #0]
 8012ed0:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012ed2:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012ed4:	42a2      	cmp	r2, r4
 8012ed6:	d003      	beq.n	8012ee0 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012ed8:	bc0c      	pop	{r2, r3}
 8012eda:	4690      	mov	r8, r2
 8012edc:	4699      	mov	r9, r3
 8012ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012ee0:	682b      	ldr	r3, [r5, #0]
 8012ee2:	079b      	lsls	r3, r3, #30
 8012ee4:	d506      	bpl.n	8012ef4 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012ee6:	4a8a      	ldr	r2, [pc, #552]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012ee8:	6853      	ldr	r3, [r2, #4]
 8012eea:	21f0      	movs	r1, #240	; 0xf0
 8012eec:	438b      	bics	r3, r1
 8012eee:	68a9      	ldr	r1, [r5, #8]
 8012ef0:	430b      	orrs	r3, r1
 8012ef2:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012ef4:	682b      	ldr	r3, [r5, #0]
 8012ef6:	07db      	lsls	r3, r3, #31
 8012ef8:	d400      	bmi.n	8012efc <HAL_RCC_ClockConfig+0x54>
 8012efa:	e0f7      	b.n	80130ec <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012efc:	686b      	ldr	r3, [r5, #4]
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d009      	beq.n	8012f16 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012f02:	2b02      	cmp	r3, #2
 8012f04:	d02b      	beq.n	8012f5e <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012f06:	2b03      	cmp	r3, #3
 8012f08:	d02f      	beq.n	8012f6a <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f0a:	4a81      	ldr	r2, [pc, #516]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f0c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012f0e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f10:	0792      	lsls	r2, r2, #30
 8012f12:	d405      	bmi.n	8012f20 <HAL_RCC_ClockConfig+0x78>
 8012f14:	e7e0      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012f16:	4a7e      	ldr	r2, [pc, #504]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f18:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012f1a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012f1c:	0392      	lsls	r2, r2, #14
 8012f1e:	d5db      	bpl.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012f20:	497b      	ldr	r1, [pc, #492]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f22:	684a      	ldr	r2, [r1, #4]
 8012f24:	2003      	movs	r0, #3
 8012f26:	4382      	bics	r2, r0
 8012f28:	4313      	orrs	r3, r2
 8012f2a:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012f2c:	f7fd fe2c 	bl	8010b88 <HAL_GetTick>
 8012f30:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012f32:	686b      	ldr	r3, [r5, #4]
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d01e      	beq.n	8012f76 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012f38:	2b02      	cmp	r3, #2
 8012f3a:	d02c      	beq.n	8012f96 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012f3c:	2b03      	cmp	r3, #3
 8012f3e:	d03a      	beq.n	8012fb6 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012f40:	4f73      	ldr	r7, [pc, #460]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f42:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f44:	4b73      	ldr	r3, [pc, #460]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 8012f46:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	421e      	tst	r6, r3
 8012f4c:	d100      	bne.n	8012f50 <HAL_RCC_ClockConfig+0xa8>
 8012f4e:	e0cd      	b.n	80130ec <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f50:	f7fd fe1a 	bl	8010b88 <HAL_GetTick>
 8012f54:	1b00      	subs	r0, r0, r4
 8012f56:	4540      	cmp	r0, r8
 8012f58:	d9f6      	bls.n	8012f48 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8012f5a:	2003      	movs	r0, #3
 8012f5c:	e7bc      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f5e:	4a6c      	ldr	r2, [pc, #432]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f60:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012f62:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012f64:	0192      	lsls	r2, r2, #6
 8012f66:	d4db      	bmi.n	8012f20 <HAL_RCC_ClockConfig+0x78>
 8012f68:	e7b6      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012f6a:	4a69      	ldr	r2, [pc, #420]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012f6e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012f70:	03d2      	lsls	r2, r2, #15
 8012f72:	d4d5      	bmi.n	8012f20 <HAL_RCC_ClockConfig+0x78>
 8012f74:	e7b0      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012f76:	4f66      	ldr	r7, [pc, #408]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f78:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f7a:	4b66      	ldr	r3, [pc, #408]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 8012f7c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	4033      	ands	r3, r6
 8012f82:	2b04      	cmp	r3, #4
 8012f84:	d100      	bne.n	8012f88 <HAL_RCC_ClockConfig+0xe0>
 8012f86:	e0b1      	b.n	80130ec <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f88:	f7fd fdfe 	bl	8010b88 <HAL_GetTick>
 8012f8c:	1b00      	subs	r0, r0, r4
 8012f8e:	4540      	cmp	r0, r8
 8012f90:	d9f5      	bls.n	8012f7e <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8012f92:	2003      	movs	r0, #3
 8012f94:	e7a0      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012f96:	4f5e      	ldr	r7, [pc, #376]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012f98:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f9a:	4b5e      	ldr	r3, [pc, #376]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 8012f9c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	4033      	ands	r3, r6
 8012fa2:	2b08      	cmp	r3, #8
 8012fa4:	d100      	bne.n	8012fa8 <HAL_RCC_ClockConfig+0x100>
 8012fa6:	e0a1      	b.n	80130ec <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fa8:	f7fd fdee 	bl	8010b88 <HAL_GetTick>
 8012fac:	1b00      	subs	r0, r0, r4
 8012fae:	4540      	cmp	r0, r8
 8012fb0:	d9f5      	bls.n	8012f9e <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8012fb2:	2003      	movs	r0, #3
 8012fb4:	e790      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012fb6:	4f56      	ldr	r7, [pc, #344]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012fb8:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fba:	4b56      	ldr	r3, [pc, #344]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 8012fbc:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	4033      	ands	r3, r6
 8012fc2:	2b0c      	cmp	r3, #12
 8012fc4:	d100      	bne.n	8012fc8 <HAL_RCC_ClockConfig+0x120>
 8012fc6:	e091      	b.n	80130ec <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fc8:	f7fd fdde 	bl	8010b88 <HAL_GetTick>
 8012fcc:	1b00      	subs	r0, r0, r4
 8012fce:	4540      	cmp	r0, r8
 8012fd0:	d9f5      	bls.n	8012fbe <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8012fd2:	2003      	movs	r0, #3
 8012fd4:	e780      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012fd6:	6803      	ldr	r3, [r0, #0]
 8012fd8:	079b      	lsls	r3, r3, #30
 8012fda:	d506      	bpl.n	8012fea <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012fdc:	4a4c      	ldr	r2, [pc, #304]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8012fde:	6853      	ldr	r3, [r2, #4]
 8012fe0:	21f0      	movs	r1, #240	; 0xf0
 8012fe2:	438b      	bics	r3, r1
 8012fe4:	6881      	ldr	r1, [r0, #8]
 8012fe6:	430b      	orrs	r3, r1
 8012fe8:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012fea:	682b      	ldr	r3, [r5, #0]
 8012fec:	07db      	lsls	r3, r3, #31
 8012fee:	d571      	bpl.n	80130d4 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012ff0:	686b      	ldr	r3, [r5, #4]
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d009      	beq.n	801300a <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012ff6:	2b02      	cmp	r3, #2
 8012ff8:	d02d      	beq.n	8013056 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012ffa:	2b03      	cmp	r3, #3
 8012ffc:	d031      	beq.n	8013062 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ffe:	4a44      	ldr	r2, [pc, #272]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8013000:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8013002:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013004:	0792      	lsls	r2, r2, #30
 8013006:	d406      	bmi.n	8013016 <HAL_RCC_ClockConfig+0x16e>
 8013008:	e766      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801300a:	4a41      	ldr	r2, [pc, #260]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 801300c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801300e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013010:	0392      	lsls	r2, r2, #14
 8013012:	d400      	bmi.n	8013016 <HAL_RCC_ClockConfig+0x16e>
 8013014:	e760      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8013016:	493e      	ldr	r1, [pc, #248]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8013018:	684a      	ldr	r2, [r1, #4]
 801301a:	2003      	movs	r0, #3
 801301c:	4382      	bics	r2, r0
 801301e:	4313      	orrs	r3, r2
 8013020:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8013022:	f7fd fdb1 	bl	8010b88 <HAL_GetTick>
 8013026:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013028:	686b      	ldr	r3, [r5, #4]
 801302a:	2b01      	cmp	r3, #1
 801302c:	d01f      	beq.n	801306e <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801302e:	2b02      	cmp	r3, #2
 8013030:	d02e      	beq.n	8013090 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013032:	2b03      	cmp	r3, #3
 8013034:	d03d      	beq.n	80130b2 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013036:	4b36      	ldr	r3, [pc, #216]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8013038:	4698      	mov	r8, r3
 801303a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801303c:	4b35      	ldr	r3, [pc, #212]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 801303e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8013040:	4643      	mov	r3, r8
 8013042:	685b      	ldr	r3, [r3, #4]
 8013044:	421f      	tst	r7, r3
 8013046:	d045      	beq.n	80130d4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013048:	f7fd fd9e 	bl	8010b88 <HAL_GetTick>
 801304c:	1b80      	subs	r0, r0, r6
 801304e:	4548      	cmp	r0, r9
 8013050:	d9f6      	bls.n	8013040 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8013052:	2003      	movs	r0, #3
 8013054:	e740      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013056:	4a2e      	ldr	r2, [pc, #184]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8013058:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801305a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801305c:	0192      	lsls	r2, r2, #6
 801305e:	d4da      	bmi.n	8013016 <HAL_RCC_ClockConfig+0x16e>
 8013060:	e73a      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013062:	4a2b      	ldr	r2, [pc, #172]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8013064:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8013066:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8013068:	03d2      	lsls	r2, r2, #15
 801306a:	d4d4      	bmi.n	8013016 <HAL_RCC_ClockConfig+0x16e>
 801306c:	e734      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 801306e:	4b28      	ldr	r3, [pc, #160]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8013070:	4698      	mov	r8, r3
 8013072:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013074:	4b27      	ldr	r3, [pc, #156]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 8013076:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8013078:	4643      	mov	r3, r8
 801307a:	685b      	ldr	r3, [r3, #4]
 801307c:	403b      	ands	r3, r7
 801307e:	2b04      	cmp	r3, #4
 8013080:	d028      	beq.n	80130d4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013082:	f7fd fd81 	bl	8010b88 <HAL_GetTick>
 8013086:	1b80      	subs	r0, r0, r6
 8013088:	4548      	cmp	r0, r9
 801308a:	d9f5      	bls.n	8013078 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 801308c:	2003      	movs	r0, #3
 801308e:	e723      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013090:	4b1f      	ldr	r3, [pc, #124]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 8013092:	4698      	mov	r8, r3
 8013094:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013096:	4b1f      	ldr	r3, [pc, #124]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 8013098:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801309a:	4643      	mov	r3, r8
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	403b      	ands	r3, r7
 80130a0:	2b08      	cmp	r3, #8
 80130a2:	d017      	beq.n	80130d4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130a4:	f7fd fd70 	bl	8010b88 <HAL_GetTick>
 80130a8:	1b80      	subs	r0, r0, r6
 80130aa:	4548      	cmp	r0, r9
 80130ac:	d9f5      	bls.n	801309a <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 80130ae:	2003      	movs	r0, #3
 80130b0:	e712      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80130b2:	4b17      	ldr	r3, [pc, #92]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 80130b4:	4698      	mov	r8, r3
 80130b6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130b8:	4b16      	ldr	r3, [pc, #88]	; (8013114 <HAL_RCC_ClockConfig+0x26c>)
 80130ba:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80130bc:	4643      	mov	r3, r8
 80130be:	685b      	ldr	r3, [r3, #4]
 80130c0:	403b      	ands	r3, r7
 80130c2:	2b0c      	cmp	r3, #12
 80130c4:	d006      	beq.n	80130d4 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130c6:	f7fd fd5f 	bl	8010b88 <HAL_GetTick>
 80130ca:	1b80      	subs	r0, r0, r6
 80130cc:	4548      	cmp	r0, r9
 80130ce:	d9f5      	bls.n	80130bc <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 80130d0:	2003      	movs	r0, #3
 80130d2:	e701      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80130d4:	490d      	ldr	r1, [pc, #52]	; (801310c <HAL_RCC_ClockConfig+0x264>)
 80130d6:	680b      	ldr	r3, [r1, #0]
 80130d8:	2201      	movs	r2, #1
 80130da:	4393      	bics	r3, r2
 80130dc:	4323      	orrs	r3, r4
 80130de:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80130e0:	680b      	ldr	r3, [r1, #0]
 80130e2:	401a      	ands	r2, r3
      return HAL_ERROR;
 80130e4:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80130e6:	42a2      	cmp	r2, r4
 80130e8:	d000      	beq.n	80130ec <HAL_RCC_ClockConfig+0x244>
 80130ea:	e6f5      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80130ec:	682b      	ldr	r3, [r5, #0]
 80130ee:	075b      	lsls	r3, r3, #29
 80130f0:	d506      	bpl.n	8013100 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80130f2:	4a07      	ldr	r2, [pc, #28]	; (8013110 <HAL_RCC_ClockConfig+0x268>)
 80130f4:	6853      	ldr	r3, [r2, #4]
 80130f6:	4908      	ldr	r1, [pc, #32]	; (8013118 <HAL_RCC_ClockConfig+0x270>)
 80130f8:	400b      	ands	r3, r1
 80130fa:	68e9      	ldr	r1, [r5, #12]
 80130fc:	430b      	orrs	r3, r1
 80130fe:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8013100:	2000      	movs	r0, #0
 8013102:	f7fd fd17 	bl	8010b34 <HAL_InitTick>
  return HAL_OK;
 8013106:	2000      	movs	r0, #0
 8013108:	e6e6      	b.n	8012ed8 <HAL_RCC_ClockConfig+0x30>
 801310a:	46c0      	nop			; (mov r8, r8)
 801310c:	40022000 	.word	0x40022000
 8013110:	40021000 	.word	0x40021000
 8013114:	00001388 	.word	0x00001388
 8013118:	fffff8ff 	.word	0xfffff8ff

0801311c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801311c:	b530      	push	{r4, r5, lr}
 801311e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8013120:	aa04      	add	r2, sp, #16
 8013122:	4b21      	ldr	r3, [pc, #132]	; (80131a8 <HAL_RCC_GetSysClockFreq+0x8c>)
 8013124:	0018      	movs	r0, r3
 8013126:	c832      	ldmia	r0!, {r1, r4, r5}
 8013128:	c232      	stmia	r2!, {r1, r4, r5}
 801312a:	0011      	movs	r1, r2
 801312c:	6802      	ldr	r2, [r0, #0]
 801312e:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8013130:	466a      	mov	r2, sp
 8013132:	3310      	adds	r3, #16
 8013134:	cb13      	ldmia	r3!, {r0, r1, r4}
 8013136:	c213      	stmia	r2!, {r0, r1, r4}
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 801313c:	4b1b      	ldr	r3, [pc, #108]	; (80131ac <HAL_RCC_GetSysClockFreq+0x90>)
 801313e:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8013140:	200c      	movs	r0, #12
 8013142:	4018      	ands	r0, r3
 8013144:	2808      	cmp	r0, #8
 8013146:	d00a      	beq.n	801315e <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8013148:	380c      	subs	r0, #12
 801314a:	4243      	negs	r3, r0
 801314c:	4158      	adcs	r0, r3
 801314e:	4240      	negs	r0, r0
 8013150:	4b17      	ldr	r3, [pc, #92]	; (80131b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8013152:	4018      	ands	r0, r3
 8013154:	4b17      	ldr	r3, [pc, #92]	; (80131b4 <HAL_RCC_GetSysClockFreq+0x98>)
 8013156:	469c      	mov	ip, r3
 8013158:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801315a:	b009      	add	sp, #36	; 0x24
 801315c:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 801315e:	0c99      	lsrs	r1, r3, #18
 8013160:	220f      	movs	r2, #15
 8013162:	4011      	ands	r1, r2
 8013164:	a804      	add	r0, sp, #16
 8013166:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8013168:	4910      	ldr	r1, [pc, #64]	; (80131ac <HAL_RCC_GetSysClockFreq+0x90>)
 801316a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 801316c:	400a      	ands	r2, r1
 801316e:	4669      	mov	r1, sp
 8013170:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8013172:	22c0      	movs	r2, #192	; 0xc0
 8013174:	0252      	lsls	r2, r2, #9
 8013176:	4013      	ands	r3, r2
 8013178:	2280      	movs	r2, #128	; 0x80
 801317a:	0252      	lsls	r2, r2, #9
 801317c:	4293      	cmp	r3, r2
 801317e:	d008      	beq.n	8013192 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8013180:	22c0      	movs	r2, #192	; 0xc0
 8013182:	0252      	lsls	r2, r2, #9
 8013184:	4293      	cmp	r3, r2
 8013186:	d009      	beq.n	801319c <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8013188:	480a      	ldr	r0, [pc, #40]	; (80131b4 <HAL_RCC_GetSysClockFreq+0x98>)
 801318a:	f7ec ffe1 	bl	8000150 <__udivsi3>
 801318e:	4360      	muls	r0, r4
 8013190:	e7e3      	b.n	801315a <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8013192:	4808      	ldr	r0, [pc, #32]	; (80131b4 <HAL_RCC_GetSysClockFreq+0x98>)
 8013194:	f7ec ffdc 	bl	8000150 <__udivsi3>
 8013198:	4360      	muls	r0, r4
 801319a:	e7de      	b.n	801315a <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 801319c:	4806      	ldr	r0, [pc, #24]	; (80131b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 801319e:	f7ec ffd7 	bl	8000150 <__udivsi3>
 80131a2:	4360      	muls	r0, r4
 80131a4:	e7d9      	b.n	801315a <HAL_RCC_GetSysClockFreq+0x3e>
 80131a6:	46c0      	nop			; (mov r8, r8)
 80131a8:	080191bc 	.word	0x080191bc
 80131ac:	40021000 	.word	0x40021000
 80131b0:	02625a00 	.word	0x02625a00
 80131b4:	007a1200 	.word	0x007a1200
 80131b8:	02dc6c00 	.word	0x02dc6c00

080131bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80131bc:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80131be:	f7ff ffad 	bl	801311c <HAL_RCC_GetSysClockFreq>
 80131c2:	4b05      	ldr	r3, [pc, #20]	; (80131d8 <HAL_RCC_GetHCLKFreq+0x1c>)
 80131c4:	685b      	ldr	r3, [r3, #4]
 80131c6:	061b      	lsls	r3, r3, #24
 80131c8:	0f1b      	lsrs	r3, r3, #28
 80131ca:	4a04      	ldr	r2, [pc, #16]	; (80131dc <HAL_RCC_GetHCLKFreq+0x20>)
 80131cc:	5cd3      	ldrb	r3, [r2, r3]
 80131ce:	40d8      	lsrs	r0, r3
 80131d0:	4b03      	ldr	r3, [pc, #12]	; (80131e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80131d2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80131d4:	bd10      	pop	{r4, pc}
 80131d6:	46c0      	nop			; (mov r8, r8)
 80131d8:	40021000 	.word	0x40021000
 80131dc:	0801c2d0 	.word	0x0801c2d0
 80131e0:	20000100 	.word	0x20000100

080131e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80131e4:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 80131e6:	f7ff ffe9 	bl	80131bc <HAL_RCC_GetHCLKFreq>
 80131ea:	4b04      	ldr	r3, [pc, #16]	; (80131fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	055b      	lsls	r3, r3, #21
 80131f0:	0f5b      	lsrs	r3, r3, #29
 80131f2:	4a03      	ldr	r2, [pc, #12]	; (8013200 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80131f4:	5cd3      	ldrb	r3, [r2, r3]
 80131f6:	40d8      	lsrs	r0, r3
}    
 80131f8:	bd10      	pop	{r4, pc}
 80131fa:	46c0      	nop			; (mov r8, r8)
 80131fc:	40021000 	.word	0x40021000
 8013200:	0801c2d0 	.word	0x0801c2d0

08013204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013206:	46c6      	mov	lr, r8
 8013208:	b500      	push	{lr}
 801320a:	b082      	sub	sp, #8
 801320c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801320e:	6803      	ldr	r3, [r0, #0]
 8013210:	03db      	lsls	r3, r3, #15
 8013212:	d507      	bpl.n	8013224 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013214:	4b43      	ldr	r3, [pc, #268]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013216:	6a1b      	ldr	r3, [r3, #32]
 8013218:	6842      	ldr	r2, [r0, #4]
 801321a:	4053      	eors	r3, r2
 801321c:	22c0      	movs	r2, #192	; 0xc0
 801321e:	0092      	lsls	r2, r2, #2
 8013220:	4213      	tst	r3, r2
 8013222:	d136      	bne.n	8013292 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013224:	6823      	ldr	r3, [r4, #0]
 8013226:	07db      	lsls	r3, r3, #31
 8013228:	d506      	bpl.n	8013238 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801322a:	4a3e      	ldr	r2, [pc, #248]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801322c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801322e:	2103      	movs	r1, #3
 8013230:	438b      	bics	r3, r1
 8013232:	68a1      	ldr	r1, [r4, #8]
 8013234:	430b      	orrs	r3, r1
 8013236:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	079b      	lsls	r3, r3, #30
 801323c:	d506      	bpl.n	801324c <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801323e:	4a39      	ldr	r2, [pc, #228]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013240:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013242:	4939      	ldr	r1, [pc, #228]	; (8013328 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8013244:	400b      	ands	r3, r1
 8013246:	68e1      	ldr	r1, [r4, #12]
 8013248:	430b      	orrs	r3, r1
 801324a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801324c:	6823      	ldr	r3, [r4, #0]
 801324e:	035b      	lsls	r3, r3, #13
 8013250:	d506      	bpl.n	8013260 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8013252:	4a34      	ldr	r2, [pc, #208]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013254:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013256:	4935      	ldr	r1, [pc, #212]	; (801332c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8013258:	400b      	ands	r3, r1
 801325a:	6921      	ldr	r1, [r4, #16]
 801325c:	430b      	orrs	r3, r1
 801325e:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8013260:	6823      	ldr	r3, [r4, #0]
 8013262:	069b      	lsls	r3, r3, #26
 8013264:	d506      	bpl.n	8013274 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8013266:	4a2f      	ldr	r2, [pc, #188]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013268:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801326a:	2110      	movs	r1, #16
 801326c:	438b      	bics	r3, r1
 801326e:	6961      	ldr	r1, [r4, #20]
 8013270:	430b      	orrs	r3, r1
 8013272:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8013274:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8013276:	6823      	ldr	r3, [r4, #0]
 8013278:	055b      	lsls	r3, r3, #21
 801327a:	d506      	bpl.n	801328a <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801327c:	4a29      	ldr	r2, [pc, #164]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801327e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013280:	2140      	movs	r1, #64	; 0x40
 8013282:	438b      	bics	r3, r1
 8013284:	69a1      	ldr	r1, [r4, #24]
 8013286:	430b      	orrs	r3, r1
 8013288:	6313      	str	r3, [r2, #48]	; 0x30
}
 801328a:	b002      	add	sp, #8
 801328c:	bc04      	pop	{r2}
 801328e:	4690      	mov	r8, r2
 8013290:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8013292:	4a24      	ldr	r2, [pc, #144]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013294:	69d1      	ldr	r1, [r2, #28]
 8013296:	2080      	movs	r0, #128	; 0x80
 8013298:	0540      	lsls	r0, r0, #21
 801329a:	4301      	orrs	r1, r0
 801329c:	61d1      	str	r1, [r2, #28]
 801329e:	69d3      	ldr	r3, [r2, #28]
 80132a0:	4003      	ands	r3, r0
 80132a2:	9301      	str	r3, [sp, #4]
 80132a4:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80132a6:	4a22      	ldr	r2, [pc, #136]	; (8013330 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80132a8:	6811      	ldr	r1, [r2, #0]
 80132aa:	2380      	movs	r3, #128	; 0x80
 80132ac:	005b      	lsls	r3, r3, #1
 80132ae:	430b      	orrs	r3, r1
 80132b0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80132b2:	f7fd fc69 	bl	8010b88 <HAL_GetTick>
 80132b6:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 80132b8:	4e1d      	ldr	r6, [pc, #116]	; (8013330 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80132ba:	2580      	movs	r5, #128	; 0x80
 80132bc:	006d      	lsls	r5, r5, #1
 80132be:	6833      	ldr	r3, [r6, #0]
 80132c0:	422b      	tst	r3, r5
 80132c2:	d106      	bne.n	80132d2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80132c4:	f7fd fc60 	bl	8010b88 <HAL_GetTick>
 80132c8:	1bc0      	subs	r0, r0, r7
 80132ca:	2864      	cmp	r0, #100	; 0x64
 80132cc:	d9f7      	bls.n	80132be <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 80132ce:	2003      	movs	r0, #3
 80132d0:	e7db      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80132d2:	4b14      	ldr	r3, [pc, #80]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80132d4:	6a18      	ldr	r0, [r3, #32]
 80132d6:	4a17      	ldr	r2, [pc, #92]	; (8013334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80132d8:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 80132da:	6a1d      	ldr	r5, [r3, #32]
 80132dc:	2180      	movs	r1, #128	; 0x80
 80132de:	0249      	lsls	r1, r1, #9
 80132e0:	4329      	orrs	r1, r5
 80132e2:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80132e4:	6a19      	ldr	r1, [r3, #32]
 80132e6:	4d14      	ldr	r5, [pc, #80]	; (8013338 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80132e8:	4029      	ands	r1, r5
 80132ea:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 80132ec:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 80132ee:	0783      	lsls	r3, r0, #30
 80132f0:	d407      	bmi.n	8013302 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80132f2:	4a0c      	ldr	r2, [pc, #48]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80132f4:	6a13      	ldr	r3, [r2, #32]
 80132f6:	490f      	ldr	r1, [pc, #60]	; (8013334 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80132f8:	400b      	ands	r3, r1
 80132fa:	6861      	ldr	r1, [r4, #4]
 80132fc:	430b      	orrs	r3, r1
 80132fe:	6213      	str	r3, [r2, #32]
 8013300:	e790      	b.n	8013224 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8013302:	f7fd fc41 	bl	8010b88 <HAL_GetTick>
 8013306:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013308:	4e06      	ldr	r6, [pc, #24]	; (8013324 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801330a:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801330c:	4f0b      	ldr	r7, [pc, #44]	; (801333c <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801330e:	6a33      	ldr	r3, [r6, #32]
 8013310:	421d      	tst	r5, r3
 8013312:	d1ee      	bne.n	80132f2 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013314:	f7fd fc38 	bl	8010b88 <HAL_GetTick>
 8013318:	4643      	mov	r3, r8
 801331a:	1ac0      	subs	r0, r0, r3
 801331c:	42b8      	cmp	r0, r7
 801331e:	d9f6      	bls.n	801330e <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8013320:	2003      	movs	r0, #3
 8013322:	e7b2      	b.n	801328a <HAL_RCCEx_PeriphCLKConfig+0x86>
 8013324:	40021000 	.word	0x40021000
 8013328:	fffcffff 	.word	0xfffcffff
 801332c:	fff3ffff 	.word	0xfff3ffff
 8013330:	40007000 	.word	0x40007000
 8013334:	fffffcff 	.word	0xfffffcff
 8013338:	fffeffff 	.word	0xfffeffff
 801333c:	00001388 	.word	0x00001388

08013340 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8013340:	4770      	bx	lr

08013342 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8013342:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013344:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013346:	6802      	ldr	r2, [r0, #0]
 8013348:	68d3      	ldr	r3, [r2, #12]
 801334a:	21a0      	movs	r1, #160	; 0xa0
 801334c:	438b      	bics	r3, r1
 801334e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8013350:	f7fd fc1a 	bl	8010b88 <HAL_GetTick>
 8013354:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8013356:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013358:	26fa      	movs	r6, #250	; 0xfa
 801335a:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 801335c:	6823      	ldr	r3, [r4, #0]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	421d      	tst	r5, r3
 8013362:	d106      	bne.n	8013372 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013364:	f7fd fc10 	bl	8010b88 <HAL_GetTick>
 8013368:	1bc0      	subs	r0, r0, r7
 801336a:	42b0      	cmp	r0, r6
 801336c:	d9f6      	bls.n	801335c <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 801336e:	2003      	movs	r0, #3
 8013370:	e000      	b.n	8013374 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8013372:	2000      	movs	r0, #0
}
 8013374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013376 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8013376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013378:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801337a:	6803      	ldr	r3, [r0, #0]
 801337c:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 801337e:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013380:	0652      	lsls	r2, r2, #25
 8013382:	d500      	bpl.n	8013386 <RTC_EnterInitMode+0x10>
}
 8013384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013386:	2201      	movs	r2, #1
 8013388:	4252      	negs	r2, r2
 801338a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 801338c:	f7fd fbfc 	bl	8010b88 <HAL_GetTick>
 8013390:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013392:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013394:	26fa      	movs	r6, #250	; 0xfa
 8013396:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013398:	6823      	ldr	r3, [r4, #0]
 801339a:	68db      	ldr	r3, [r3, #12]
 801339c:	421d      	tst	r5, r3
 801339e:	d106      	bne.n	80133ae <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80133a0:	f7fd fbf2 	bl	8010b88 <HAL_GetTick>
 80133a4:	1bc0      	subs	r0, r0, r7
 80133a6:	42b0      	cmp	r0, r6
 80133a8:	d9f6      	bls.n	8013398 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80133aa:	2003      	movs	r0, #3
 80133ac:	e7ea      	b.n	8013384 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80133ae:	2000      	movs	r0, #0
 80133b0:	e7e8      	b.n	8013384 <RTC_EnterInitMode+0xe>
	...

080133b4 <HAL_RTC_Init>:
{
 80133b4:	b570      	push	{r4, r5, r6, lr}
 80133b6:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 80133b8:	d046      	beq.n	8013448 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80133ba:	7f43      	ldrb	r3, [r0, #29]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d038      	beq.n	8013432 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80133c0:	2302      	movs	r3, #2
 80133c2:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80133c4:	6823      	ldr	r3, [r4, #0]
 80133c6:	22ca      	movs	r2, #202	; 0xca
 80133c8:	625a      	str	r2, [r3, #36]	; 0x24
 80133ca:	6823      	ldr	r3, [r4, #0]
 80133cc:	3a77      	subs	r2, #119	; 0x77
 80133ce:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80133d0:	0020      	movs	r0, r4
 80133d2:	f7ff ffd0 	bl	8013376 <RTC_EnterInitMode>
 80133d6:	2800      	cmp	r0, #0
 80133d8:	d12f      	bne.n	801343a <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80133da:	6822      	ldr	r2, [r4, #0]
 80133dc:	6893      	ldr	r3, [r2, #8]
 80133de:	491b      	ldr	r1, [pc, #108]	; (801344c <HAL_RTC_Init+0x98>)
 80133e0:	400b      	ands	r3, r1
 80133e2:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80133e4:	6822      	ldr	r2, [r4, #0]
 80133e6:	6891      	ldr	r1, [r2, #8]
 80133e8:	6863      	ldr	r3, [r4, #4]
 80133ea:	6925      	ldr	r5, [r4, #16]
 80133ec:	432b      	orrs	r3, r5
 80133ee:	6965      	ldr	r5, [r4, #20]
 80133f0:	432b      	orrs	r3, r5
 80133f2:	430b      	orrs	r3, r1
 80133f4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80133f6:	6823      	ldr	r3, [r4, #0]
 80133f8:	68e2      	ldr	r2, [r4, #12]
 80133fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80133fc:	6822      	ldr	r2, [r4, #0]
 80133fe:	6911      	ldr	r1, [r2, #16]
 8013400:	68a3      	ldr	r3, [r4, #8]
 8013402:	041b      	lsls	r3, r3, #16
 8013404:	430b      	orrs	r3, r1
 8013406:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8013408:	6822      	ldr	r2, [r4, #0]
 801340a:	68d3      	ldr	r3, [r2, #12]
 801340c:	2180      	movs	r1, #128	; 0x80
 801340e:	438b      	bics	r3, r1
 8013410:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8013412:	6822      	ldr	r2, [r4, #0]
 8013414:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013416:	490e      	ldr	r1, [pc, #56]	; (8013450 <HAL_RTC_Init+0x9c>)
 8013418:	400b      	ands	r3, r1
 801341a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 801341c:	6822      	ldr	r2, [r4, #0]
 801341e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013420:	69a1      	ldr	r1, [r4, #24]
 8013422:	430b      	orrs	r3, r1
 8013424:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013426:	6823      	ldr	r3, [r4, #0]
 8013428:	22ff      	movs	r2, #255	; 0xff
 801342a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 801342c:	2301      	movs	r3, #1
 801342e:	7763      	strb	r3, [r4, #29]
}
 8013430:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8013432:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8013434:	f7ff ff84 	bl	8013340 <HAL_RTC_MspInit>
 8013438:	e7c2      	b.n	80133c0 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801343a:	6823      	ldr	r3, [r4, #0]
 801343c:	22ff      	movs	r2, #255	; 0xff
 801343e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013440:	2304      	movs	r3, #4
 8013442:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8013444:	2001      	movs	r0, #1
 8013446:	e7f3      	b.n	8013430 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8013448:	2001      	movs	r0, #1
 801344a:	e7f1      	b.n	8013430 <HAL_RTC_Init+0x7c>
 801344c:	ff8fffbf 	.word	0xff8fffbf
 8013450:	fffbffff 	.word	0xfffbffff

08013454 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8013454:	2809      	cmp	r0, #9
 8013456:	d909      	bls.n	801346c <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8013458:	2300      	movs	r3, #0
  {
    bcdhigh++;
 801345a:	3301      	adds	r3, #1
    Value -= 10;
 801345c:	380a      	subs	r0, #10
 801345e:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8013460:	2809      	cmp	r0, #9
 8013462:	d8fa      	bhi.n	801345a <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8013464:	011b      	lsls	r3, r3, #4
 8013466:	4318      	orrs	r0, r3
 8013468:	b2c0      	uxtb	r0, r0
}
 801346a:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 801346c:	2300      	movs	r3, #0
 801346e:	e7f9      	b.n	8013464 <RTC_ByteToBcd2+0x10>

08013470 <HAL_RTC_SetTime>:
{
 8013470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013472:	46c6      	mov	lr, r8
 8013474:	b500      	push	{lr}
 8013476:	0004      	movs	r4, r0
 8013478:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 801347a:	7f03      	ldrb	r3, [r0, #28]
 801347c:	2b01      	cmp	r3, #1
 801347e:	d100      	bne.n	8013482 <HAL_RTC_SetTime+0x12>
 8013480:	e075      	b.n	801356e <HAL_RTC_SetTime+0xfe>
 8013482:	2301      	movs	r3, #1
 8013484:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8013486:	3301      	adds	r3, #1
 8013488:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 801348a:	2a00      	cmp	r2, #0
 801348c:	d144      	bne.n	8013518 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801348e:	6803      	ldr	r3, [r0, #0]
 8013490:	689b      	ldr	r3, [r3, #8]
 8013492:	065b      	lsls	r3, r3, #25
 8013494:	d401      	bmi.n	801349a <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8013496:	2300      	movs	r3, #0
 8013498:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801349a:	7830      	ldrb	r0, [r6, #0]
 801349c:	f7ff ffda 	bl	8013454 <RTC_ByteToBcd2>
 80134a0:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80134a2:	7870      	ldrb	r0, [r6, #1]
 80134a4:	f7ff ffd6 	bl	8013454 <RTC_ByteToBcd2>
 80134a8:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80134aa:	78b0      	ldrb	r0, [r6, #2]
 80134ac:	f7ff ffd2 	bl	8013454 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80134b0:	7a35      	ldrb	r5, [r6, #8]
 80134b2:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80134b4:	4305      	orrs	r5, r0
 80134b6:	4643      	mov	r3, r8
 80134b8:	0418      	lsls	r0, r3, #16
 80134ba:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80134bc:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80134be:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80134c0:	6823      	ldr	r3, [r4, #0]
 80134c2:	22ca      	movs	r2, #202	; 0xca
 80134c4:	625a      	str	r2, [r3, #36]	; 0x24
 80134c6:	6823      	ldr	r3, [r4, #0]
 80134c8:	3a77      	subs	r2, #119	; 0x77
 80134ca:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80134cc:	0020      	movs	r0, r4
 80134ce:	f7ff ff52 	bl	8013376 <RTC_EnterInitMode>
 80134d2:	1e07      	subs	r7, r0, #0
 80134d4:	d131      	bne.n	801353a <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80134d6:	6823      	ldr	r3, [r4, #0]
 80134d8:	4826      	ldr	r0, [pc, #152]	; (8013574 <HAL_RTC_SetTime+0x104>)
 80134da:	4005      	ands	r5, r0
 80134dc:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 80134de:	6822      	ldr	r2, [r4, #0]
 80134e0:	6893      	ldr	r3, [r2, #8]
 80134e2:	4925      	ldr	r1, [pc, #148]	; (8013578 <HAL_RTC_SetTime+0x108>)
 80134e4:	400b      	ands	r3, r1
 80134e6:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80134e8:	6822      	ldr	r2, [r4, #0]
 80134ea:	6891      	ldr	r1, [r2, #8]
 80134ec:	68f3      	ldr	r3, [r6, #12]
 80134ee:	6930      	ldr	r0, [r6, #16]
 80134f0:	4303      	orrs	r3, r0
 80134f2:	430b      	orrs	r3, r1
 80134f4:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80134f6:	6822      	ldr	r2, [r4, #0]
 80134f8:	68d3      	ldr	r3, [r2, #12]
 80134fa:	2180      	movs	r1, #128	; 0x80
 80134fc:	438b      	bics	r3, r1
 80134fe:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013500:	6823      	ldr	r3, [r4, #0]
 8013502:	689b      	ldr	r3, [r3, #8]
 8013504:	069b      	lsls	r3, r3, #26
 8013506:	d524      	bpl.n	8013552 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013508:	6823      	ldr	r3, [r4, #0]
 801350a:	22ff      	movs	r2, #255	; 0xff
 801350c:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801350e:	2301      	movs	r3, #1
 8013510:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8013512:	2300      	movs	r3, #0
 8013514:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8013516:	e018      	b.n	801354a <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013518:	6803      	ldr	r3, [r0, #0]
 801351a:	689b      	ldr	r3, [r3, #8]
 801351c:	065b      	lsls	r3, r3, #25
 801351e:	d401      	bmi.n	8013524 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8013520:	2300      	movs	r3, #0
 8013522:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013524:	7835      	ldrb	r5, [r6, #0]
 8013526:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013528:	7870      	ldrb	r0, [r6, #1]
 801352a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801352c:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 801352e:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013530:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8013532:	7a30      	ldrb	r0, [r6, #8]
 8013534:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013536:	4305      	orrs	r5, r0
 8013538:	e7c2      	b.n	80134c0 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801353a:	6823      	ldr	r3, [r4, #0]
 801353c:	22ff      	movs	r2, #255	; 0xff
 801353e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013540:	2304      	movs	r3, #4
 8013542:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013544:	2300      	movs	r3, #0
 8013546:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8013548:	2701      	movs	r7, #1
}
 801354a:	0038      	movs	r0, r7
 801354c:	bc04      	pop	{r2}
 801354e:	4690      	mov	r8, r2
 8013550:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013552:	0020      	movs	r0, r4
 8013554:	f7ff fef5 	bl	8013342 <HAL_RTC_WaitForSynchro>
 8013558:	2800      	cmp	r0, #0
 801355a:	d0d5      	beq.n	8013508 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801355c:	6823      	ldr	r3, [r4, #0]
 801355e:	22ff      	movs	r2, #255	; 0xff
 8013560:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013562:	2304      	movs	r3, #4
 8013564:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8013566:	2300      	movs	r3, #0
 8013568:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 801356a:	2701      	movs	r7, #1
 801356c:	e7ed      	b.n	801354a <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 801356e:	2702      	movs	r7, #2
 8013570:	e7eb      	b.n	801354a <HAL_RTC_SetTime+0xda>
 8013572:	46c0      	nop			; (mov r8, r8)
 8013574:	007f7f7f 	.word	0x007f7f7f
 8013578:	fffbffff 	.word	0xfffbffff

0801357c <HAL_RTC_SetDate>:
{
 801357c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801357e:	46c6      	mov	lr, r8
 8013580:	b500      	push	{lr}
 8013582:	0004      	movs	r4, r0
 8013584:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8013586:	7f03      	ldrb	r3, [r0, #28]
 8013588:	2b01      	cmp	r3, #1
 801358a:	d03a      	beq.n	8013602 <HAL_RTC_SetDate+0x86>
 801358c:	2301      	movs	r3, #1
 801358e:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8013590:	3301      	adds	r3, #1
 8013592:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8013594:	2a00      	cmp	r2, #0
 8013596:	d136      	bne.n	8013606 <HAL_RTC_SetDate+0x8a>
 8013598:	784b      	ldrb	r3, [r1, #1]
 801359a:	06da      	lsls	r2, r3, #27
 801359c:	d503      	bpl.n	80135a6 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 801359e:	2210      	movs	r2, #16
 80135a0:	4393      	bics	r3, r2
 80135a2:	330a      	adds	r3, #10
 80135a4:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80135a6:	78f0      	ldrb	r0, [r6, #3]
 80135a8:	f7ff ff54 	bl	8013454 <RTC_ByteToBcd2>
 80135ac:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80135ae:	7870      	ldrb	r0, [r6, #1]
 80135b0:	f7ff ff50 	bl	8013454 <RTC_ByteToBcd2>
 80135b4:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80135b6:	78b0      	ldrb	r0, [r6, #2]
 80135b8:	f7ff ff4c 	bl	8013454 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 80135bc:	7835      	ldrb	r5, [r6, #0]
 80135be:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80135c0:	4305      	orrs	r5, r0
 80135c2:	4643      	mov	r3, r8
 80135c4:	0418      	lsls	r0, r3, #16
 80135c6:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80135c8:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80135ca:	433d      	orrs	r5, r7
 80135cc:	e025      	b.n	801361a <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80135ce:	6823      	ldr	r3, [r4, #0]
 80135d0:	22ff      	movs	r2, #255	; 0xff
 80135d2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80135d4:	2304      	movs	r3, #4
 80135d6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80135d8:	2300      	movs	r3, #0
 80135da:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80135dc:	2601      	movs	r6, #1
}
 80135de:	0030      	movs	r0, r6
 80135e0:	bc04      	pop	{r2}
 80135e2:	4690      	mov	r8, r2
 80135e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80135e6:	0020      	movs	r0, r4
 80135e8:	f7ff feab 	bl	8013342 <HAL_RTC_WaitForSynchro>
 80135ec:	2800      	cmp	r0, #0
 80135ee:	d02c      	beq.n	801364a <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80135f0:	6823      	ldr	r3, [r4, #0]
 80135f2:	22ff      	movs	r2, #255	; 0xff
 80135f4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80135f6:	2304      	movs	r3, #4
 80135f8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80135fa:	2300      	movs	r3, #0
 80135fc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80135fe:	2601      	movs	r6, #1
 8013600:	e7ed      	b.n	80135de <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8013602:	2602      	movs	r6, #2
 8013604:	e7eb      	b.n	80135de <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013606:	78cd      	ldrb	r5, [r1, #3]
 8013608:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801360a:	7848      	ldrb	r0, [r1, #1]
 801360c:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801360e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8013610:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8013612:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8013614:	7808      	ldrb	r0, [r1, #0]
 8013616:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013618:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801361a:	6823      	ldr	r3, [r4, #0]
 801361c:	22ca      	movs	r2, #202	; 0xca
 801361e:	625a      	str	r2, [r3, #36]	; 0x24
 8013620:	6823      	ldr	r3, [r4, #0]
 8013622:	3a77      	subs	r2, #119	; 0x77
 8013624:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013626:	0020      	movs	r0, r4
 8013628:	f7ff fea5 	bl	8013376 <RTC_EnterInitMode>
 801362c:	1e06      	subs	r6, r0, #0
 801362e:	d1ce      	bne.n	80135ce <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013630:	6823      	ldr	r3, [r4, #0]
 8013632:	480a      	ldr	r0, [pc, #40]	; (801365c <HAL_RTC_SetDate+0xe0>)
 8013634:	4005      	ands	r5, r0
 8013636:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013638:	6822      	ldr	r2, [r4, #0]
 801363a:	68d3      	ldr	r3, [r2, #12]
 801363c:	2180      	movs	r1, #128	; 0x80
 801363e:	438b      	bics	r3, r1
 8013640:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013642:	6823      	ldr	r3, [r4, #0]
 8013644:	689b      	ldr	r3, [r3, #8]
 8013646:	069b      	lsls	r3, r3, #26
 8013648:	d5cd      	bpl.n	80135e6 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801364a:	6823      	ldr	r3, [r4, #0]
 801364c:	22ff      	movs	r2, #255	; 0xff
 801364e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8013650:	2301      	movs	r3, #1
 8013652:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013654:	2300      	movs	r3, #0
 8013656:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8013658:	e7c1      	b.n	80135de <HAL_RTC_SetDate+0x62>
 801365a:	46c0      	nop			; (mov r8, r8)
 801365c:	00ffff3f 	.word	0x00ffff3f

08013660 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013660:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8013662:	0900      	lsrs	r0, r0, #4
 8013664:	0083      	lsls	r3, r0, #2
 8013666:	181b      	adds	r3, r3, r0
 8013668:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 801366a:	200f      	movs	r0, #15
 801366c:	4010      	ands	r0, r2
 801366e:	1818      	adds	r0, r3, r0
 8013670:	b2c0      	uxtb	r0, r0
}
 8013672:	4770      	bx	lr

08013674 <HAL_RTC_GetTime>:
{
 8013674:	b570      	push	{r4, r5, r6, lr}
 8013676:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8013678:	6803      	ldr	r3, [r0, #0]
 801367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801367c:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 801367e:	6803      	ldr	r3, [r0, #0]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	490e      	ldr	r1, [pc, #56]	; (80136bc <HAL_RTC_GetTime+0x48>)
 8013684:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8013686:	0c19      	lsrs	r1, r3, #16
 8013688:	203f      	movs	r0, #63	; 0x3f
 801368a:	4008      	ands	r0, r1
 801368c:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 801368e:	0a1e      	lsrs	r6, r3, #8
 8013690:	b2f6      	uxtb	r6, r6
 8013692:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8013694:	b2dc      	uxtb	r4, r3
 8013696:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8013698:	2340      	movs	r3, #64	; 0x40
 801369a:	400b      	ands	r3, r1
 801369c:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 801369e:	2a00      	cmp	r2, #0
 80136a0:	d10a      	bne.n	80136b8 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80136a2:	f7ff ffdd 	bl	8013660 <RTC_Bcd2ToByte>
 80136a6:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80136a8:	0030      	movs	r0, r6
 80136aa:	f7ff ffd9 	bl	8013660 <RTC_Bcd2ToByte>
 80136ae:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80136b0:	0020      	movs	r0, r4
 80136b2:	f7ff ffd5 	bl	8013660 <RTC_Bcd2ToByte>
 80136b6:	70a8      	strb	r0, [r5, #2]
}
 80136b8:	2000      	movs	r0, #0
 80136ba:	bd70      	pop	{r4, r5, r6, pc}
 80136bc:	007f7f7f 	.word	0x007f7f7f

080136c0 <HAL_RTC_GetDate>:
{
 80136c0:	b570      	push	{r4, r5, r6, lr}
 80136c2:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 80136c4:	6803      	ldr	r3, [r0, #0]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	490d      	ldr	r1, [pc, #52]	; (8013700 <HAL_RTC_GetDate+0x40>)
 80136ca:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80136cc:	0c18      	lsrs	r0, r3, #16
 80136ce:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80136d0:	04dd      	lsls	r5, r3, #19
 80136d2:	0eed      	lsrs	r5, r5, #27
 80136d4:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80136d6:	b2de      	uxtb	r6, r3
 80136d8:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 80136da:	041b      	lsls	r3, r3, #16
 80136dc:	0f5b      	lsrs	r3, r3, #29
 80136de:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 80136e0:	2a00      	cmp	r2, #0
 80136e2:	d10a      	bne.n	80136fa <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80136e4:	f7ff ffbc 	bl	8013660 <RTC_Bcd2ToByte>
 80136e8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80136ea:	0028      	movs	r0, r5
 80136ec:	f7ff ffb8 	bl	8013660 <RTC_Bcd2ToByte>
 80136f0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 80136f2:	0030      	movs	r0, r6
 80136f4:	f7ff ffb4 	bl	8013660 <RTC_Bcd2ToByte>
 80136f8:	70a0      	strb	r0, [r4, #2]
}
 80136fa:	2000      	movs	r0, #0
 80136fc:	bd70      	pop	{r4, r5, r6, pc}
 80136fe:	46c0      	nop			; (mov r8, r8)
 8013700:	00ffff3f 	.word	0x00ffff3f

08013704 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013704:	6803      	ldr	r3, [r0, #0]
 8013706:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013708:	0089      	lsls	r1, r1, #2
 801370a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801370c:	600a      	str	r2, [r1, #0]
}
 801370e:	4770      	bx	lr

08013710 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013710:	6803      	ldr	r3, [r0, #0]
 8013712:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013714:	0089      	lsls	r1, r1, #2
 8013716:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8013718:	6808      	ldr	r0, [r1, #0]
}
 801371a:	4770      	bx	lr

0801371c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801371c:	4770      	bx	lr

0801371e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801371e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8013720:	2239      	movs	r2, #57	; 0x39
 8013722:	2302      	movs	r3, #2
 8013724:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013726:	6804      	ldr	r4, [r0, #0]
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	2101      	movs	r1, #1
 801372c:	430b      	orrs	r3, r1
 801372e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8013730:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8013732:	2000      	movs	r0, #0
 8013734:	bd10      	pop	{r4, pc}
	...

08013738 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8013738:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801373a:	4a36      	ldr	r2, [pc, #216]	; (8013814 <TIM_Base_SetConfig+0xdc>)
 801373c:	4290      	cmp	r0, r2
 801373e:	d022      	beq.n	8013786 <TIM_Base_SetConfig+0x4e>
 8013740:	2280      	movs	r2, #128	; 0x80
 8013742:	05d2      	lsls	r2, r2, #23
 8013744:	4290      	cmp	r0, r2
 8013746:	d014      	beq.n	8013772 <TIM_Base_SetConfig+0x3a>
 8013748:	4a33      	ldr	r2, [pc, #204]	; (8013818 <TIM_Base_SetConfig+0xe0>)
 801374a:	4290      	cmp	r0, r2
 801374c:	d016      	beq.n	801377c <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801374e:	4a33      	ldr	r2, [pc, #204]	; (801381c <TIM_Base_SetConfig+0xe4>)
 8013750:	4290      	cmp	r0, r2
 8013752:	d040      	beq.n	80137d6 <TIM_Base_SetConfig+0x9e>
 8013754:	4a32      	ldr	r2, [pc, #200]	; (8013820 <TIM_Base_SetConfig+0xe8>)
 8013756:	4290      	cmp	r0, r2
 8013758:	d047      	beq.n	80137ea <TIM_Base_SetConfig+0xb2>
 801375a:	4a32      	ldr	r2, [pc, #200]	; (8013824 <TIM_Base_SetConfig+0xec>)
 801375c:	4290      	cmp	r0, r2
 801375e:	d04e      	beq.n	80137fe <TIM_Base_SetConfig+0xc6>
 8013760:	4a31      	ldr	r2, [pc, #196]	; (8013828 <TIM_Base_SetConfig+0xf0>)
 8013762:	4290      	cmp	r0, r2
 8013764:	d02d      	beq.n	80137c2 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8013766:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013768:	688b      	ldr	r3, [r1, #8]
 801376a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801376c:	680b      	ldr	r3, [r1, #0]
 801376e:	6283      	str	r3, [r0, #40]	; 0x28
 8013770:	e024      	b.n	80137bc <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013772:	2270      	movs	r2, #112	; 0x70
 8013774:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013776:	684a      	ldr	r2, [r1, #4]
 8013778:	4313      	orrs	r3, r2
 801377a:	e008      	b.n	801378e <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801377c:	2270      	movs	r2, #112	; 0x70
 801377e:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013780:	684a      	ldr	r2, [r1, #4]
 8013782:	4313      	orrs	r3, r2
 8013784:	e003      	b.n	801378e <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013786:	2270      	movs	r2, #112	; 0x70
 8013788:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801378a:	684a      	ldr	r2, [r1, #4]
 801378c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 801378e:	4a27      	ldr	r2, [pc, #156]	; (801382c <TIM_Base_SetConfig+0xf4>)
 8013790:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013792:	68ca      	ldr	r2, [r1, #12]
 8013794:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013796:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013798:	688b      	ldr	r3, [r1, #8]
 801379a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801379c:	680b      	ldr	r3, [r1, #0]
 801379e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80137a0:	4b1c      	ldr	r3, [pc, #112]	; (8013814 <TIM_Base_SetConfig+0xdc>)
 80137a2:	4298      	cmp	r0, r3
 80137a4:	d008      	beq.n	80137b8 <TIM_Base_SetConfig+0x80>
 80137a6:	4b1e      	ldr	r3, [pc, #120]	; (8013820 <TIM_Base_SetConfig+0xe8>)
 80137a8:	4298      	cmp	r0, r3
 80137aa:	d005      	beq.n	80137b8 <TIM_Base_SetConfig+0x80>
 80137ac:	4b1d      	ldr	r3, [pc, #116]	; (8013824 <TIM_Base_SetConfig+0xec>)
 80137ae:	4298      	cmp	r0, r3
 80137b0:	d002      	beq.n	80137b8 <TIM_Base_SetConfig+0x80>
 80137b2:	4b1d      	ldr	r3, [pc, #116]	; (8013828 <TIM_Base_SetConfig+0xf0>)
 80137b4:	4298      	cmp	r0, r3
 80137b6:	d101      	bne.n	80137bc <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80137b8:	690b      	ldr	r3, [r1, #16]
 80137ba:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80137bc:	2301      	movs	r3, #1
 80137be:	6143      	str	r3, [r0, #20]
}
 80137c0:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 80137c2:	4a1a      	ldr	r2, [pc, #104]	; (801382c <TIM_Base_SetConfig+0xf4>)
 80137c4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80137c6:	68ca      	ldr	r2, [r1, #12]
 80137c8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80137ca:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80137cc:	688b      	ldr	r3, [r1, #8]
 80137ce:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80137d0:	680b      	ldr	r3, [r1, #0]
 80137d2:	6283      	str	r3, [r0, #40]	; 0x28
 80137d4:	e7f0      	b.n	80137b8 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80137d6:	4a15      	ldr	r2, [pc, #84]	; (801382c <TIM_Base_SetConfig+0xf4>)
 80137d8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80137da:	68ca      	ldr	r2, [r1, #12]
 80137dc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80137de:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80137e0:	688b      	ldr	r3, [r1, #8]
 80137e2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80137e4:	680b      	ldr	r3, [r1, #0]
 80137e6:	6283      	str	r3, [r0, #40]	; 0x28
 80137e8:	e7e8      	b.n	80137bc <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 80137ea:	4a10      	ldr	r2, [pc, #64]	; (801382c <TIM_Base_SetConfig+0xf4>)
 80137ec:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80137ee:	68ca      	ldr	r2, [r1, #12]
 80137f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80137f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80137f4:	688b      	ldr	r3, [r1, #8]
 80137f6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80137f8:	680b      	ldr	r3, [r1, #0]
 80137fa:	6283      	str	r3, [r0, #40]	; 0x28
 80137fc:	e7dc      	b.n	80137b8 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80137fe:	4a0b      	ldr	r2, [pc, #44]	; (801382c <TIM_Base_SetConfig+0xf4>)
 8013800:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013802:	68ca      	ldr	r2, [r1, #12]
 8013804:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013806:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013808:	688b      	ldr	r3, [r1, #8]
 801380a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801380c:	680b      	ldr	r3, [r1, #0]
 801380e:	6283      	str	r3, [r0, #40]	; 0x28
 8013810:	e7d2      	b.n	80137b8 <TIM_Base_SetConfig+0x80>
 8013812:	46c0      	nop			; (mov r8, r8)
 8013814:	40012c00 	.word	0x40012c00
 8013818:	40000400 	.word	0x40000400
 801381c:	40002000 	.word	0x40002000
 8013820:	40014000 	.word	0x40014000
 8013824:	40014400 	.word	0x40014400
 8013828:	40014800 	.word	0x40014800
 801382c:	fffffcff 	.word	0xfffffcff

08013830 <HAL_TIM_Base_Init>:
{
 8013830:	b570      	push	{r4, r5, r6, lr}
 8013832:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013834:	d014      	beq.n	8013860 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8013836:	2339      	movs	r3, #57	; 0x39
 8013838:	5cc3      	ldrb	r3, [r0, r3]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00a      	beq.n	8013854 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801383e:	2539      	movs	r5, #57	; 0x39
 8013840:	2302      	movs	r3, #2
 8013842:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013844:	1d21      	adds	r1, r4, #4
 8013846:	6820      	ldr	r0, [r4, #0]
 8013848:	f7ff ff76 	bl	8013738 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 801384c:	2301      	movs	r3, #1
 801384e:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8013850:	2000      	movs	r0, #0
}
 8013852:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8013854:	3338      	adds	r3, #56	; 0x38
 8013856:	2200      	movs	r2, #0
 8013858:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 801385a:	f7ff ff5f 	bl	801371c <HAL_TIM_Base_MspInit>
 801385e:	e7ee      	b.n	801383e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8013860:	2001      	movs	r0, #1
 8013862:	e7f6      	b.n	8013852 <HAL_TIM_Base_Init+0x22>

08013864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8013864:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8013866:	2338      	movs	r3, #56	; 0x38
 8013868:	5cc3      	ldrb	r3, [r0, r3]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d01e      	beq.n	80138ac <HAL_TIMEx_MasterConfigSynchronization+0x48>
 801386e:	2238      	movs	r2, #56	; 0x38
 8013870:	2501      	movs	r5, #1
 8013872:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8013874:	2439      	movs	r4, #57	; 0x39
 8013876:	2302      	movs	r3, #2
 8013878:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 801387a:	6806      	ldr	r6, [r0, #0]
 801387c:	6873      	ldr	r3, [r6, #4]
 801387e:	2770      	movs	r7, #112	; 0x70
 8013880:	43bb      	bics	r3, r7
 8013882:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8013884:	6806      	ldr	r6, [r0, #0]
 8013886:	6873      	ldr	r3, [r6, #4]
 8013888:	680f      	ldr	r7, [r1, #0]
 801388a:	433b      	orrs	r3, r7
 801388c:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 801388e:	6806      	ldr	r6, [r0, #0]
 8013890:	68b3      	ldr	r3, [r6, #8]
 8013892:	2780      	movs	r7, #128	; 0x80
 8013894:	43bb      	bics	r3, r7
 8013896:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8013898:	6806      	ldr	r6, [r0, #0]
 801389a:	68b3      	ldr	r3, [r6, #8]
 801389c:	6849      	ldr	r1, [r1, #4]
 801389e:	430b      	orrs	r3, r1
 80138a0:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80138a2:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80138a4:	2300      	movs	r3, #0
 80138a6:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80138a8:	2000      	movs	r0, #0
}
 80138aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80138ac:	2002      	movs	r0, #2
 80138ae:	e7fc      	b.n	80138aa <HAL_TIMEx_MasterConfigSynchronization+0x46>

080138b0 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80138b0:	4770      	bx	lr

080138b2 <HAL_UART_DeInit>:
{
 80138b2:	b570      	push	{r4, r5, r6, lr}
 80138b4:	0004      	movs	r4, r0
    return HAL_ERROR;
 80138b6:	2001      	movs	r0, #1
  if(huart == NULL)
 80138b8:	2c00      	cmp	r4, #0
 80138ba:	d016      	beq.n	80138ea <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 80138bc:	2669      	movs	r6, #105	; 0x69
 80138be:	2302      	movs	r3, #2
 80138c0:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 80138c2:	6822      	ldr	r2, [r4, #0]
 80138c4:	6813      	ldr	r3, [r2, #0]
 80138c6:	2101      	movs	r1, #1
 80138c8:	438b      	bics	r3, r1
 80138ca:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 80138cc:	6823      	ldr	r3, [r4, #0]
 80138ce:	2500      	movs	r5, #0
 80138d0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 80138d2:	6823      	ldr	r3, [r4, #0]
 80138d4:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 80138d6:	6823      	ldr	r3, [r4, #0]
 80138d8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80138da:	0020      	movs	r0, r4
 80138dc:	f7ff ffe8 	bl	80138b0 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138e0:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 80138e2:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 80138e4:	2368      	movs	r3, #104	; 0x68
 80138e6:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 80138e8:	2000      	movs	r0, #0
}
 80138ea:	bd70      	pop	{r4, r5, r6, pc}

080138ec <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80138ec:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80138ee:	2369      	movs	r3, #105	; 0x69
 80138f0:	5cc3      	ldrb	r3, [r0, r3]
 80138f2:	2b01      	cmp	r3, #1
 80138f4:	d004      	beq.n	8013900 <HAL_UART_Transmit_IT+0x14>
 80138f6:	2369      	movs	r3, #105	; 0x69
 80138f8:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80138fa:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80138fc:	2c22      	cmp	r4, #34	; 0x22
 80138fe:	d127      	bne.n	8013950 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8013900:	2900      	cmp	r1, #0
 8013902:	d02b      	beq.n	801395c <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8013904:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8013906:	2a00      	cmp	r2, #0
 8013908:	d022      	beq.n	8013950 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 801390a:	3367      	adds	r3, #103	; 0x67
 801390c:	5cc3      	ldrb	r3, [r0, r3]
 801390e:	2b01      	cmp	r3, #1
 8013910:	d026      	beq.n	8013960 <HAL_UART_Transmit_IT+0x74>
 8013912:	2368      	movs	r3, #104	; 0x68
 8013914:	2401      	movs	r4, #1
 8013916:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8013918:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 801391a:	3b18      	subs	r3, #24
 801391c:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 801391e:	3302      	adds	r3, #2
 8013920:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013922:	2300      	movs	r3, #0
 8013924:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013926:	3369      	adds	r3, #105	; 0x69
 8013928:	5cc3      	ldrb	r3, [r0, r3]
 801392a:	2b22      	cmp	r3, #34	; 0x22
 801392c:	d012      	beq.n	8013954 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801392e:	2369      	movs	r3, #105	; 0x69
 8013930:	2212      	movs	r2, #18
 8013932:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013934:	6802      	ldr	r2, [r0, #0]
 8013936:	6893      	ldr	r3, [r2, #8]
 8013938:	2101      	movs	r1, #1
 801393a:	430b      	orrs	r3, r1
 801393c:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 801393e:	2368      	movs	r3, #104	; 0x68
 8013940:	2200      	movs	r2, #0
 8013942:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013944:	6802      	ldr	r2, [r0, #0]
 8013946:	6813      	ldr	r3, [r2, #0]
 8013948:	317f      	adds	r1, #127	; 0x7f
 801394a:	430b      	orrs	r3, r1
 801394c:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 801394e:	2300      	movs	r3, #0
  }
}
 8013950:	0018      	movs	r0, r3
 8013952:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013954:	3347      	adds	r3, #71	; 0x47
 8013956:	2232      	movs	r2, #50	; 0x32
 8013958:	54c2      	strb	r2, [r0, r3]
 801395a:	e7eb      	b.n	8013934 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 801395c:	2301      	movs	r3, #1
 801395e:	e7f7      	b.n	8013950 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8013960:	2302      	movs	r3, #2
 8013962:	e7f5      	b.n	8013950 <HAL_UART_Transmit_IT+0x64>

08013964 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013964:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013966:	2369      	movs	r3, #105	; 0x69
 8013968:	5cc3      	ldrb	r3, [r0, r3]
 801396a:	2b01      	cmp	r3, #1
 801396c:	d004      	beq.n	8013978 <HAL_UART_Receive_IT+0x14>
 801396e:	2369      	movs	r3, #105	; 0x69
 8013970:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013972:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013974:	2c12      	cmp	r4, #18
 8013976:	d14e      	bne.n	8013a16 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8013978:	2900      	cmp	r1, #0
 801397a:	d05d      	beq.n	8013a38 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 801397c:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 801397e:	2a00      	cmp	r2, #0
 8013980:	d049      	beq.n	8013a16 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8013982:	3367      	adds	r3, #103	; 0x67
 8013984:	5cc3      	ldrb	r3, [r0, r3]
 8013986:	2b01      	cmp	r3, #1
 8013988:	d058      	beq.n	8013a3c <HAL_UART_Receive_IT+0xd8>
 801398a:	2368      	movs	r3, #104	; 0x68
 801398c:	2401      	movs	r4, #1
 801398e:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8013990:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8013992:	3b10      	subs	r3, #16
 8013994:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8013996:	3302      	adds	r3, #2
 8013998:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 801399a:	6883      	ldr	r3, [r0, #8]
 801399c:	2280      	movs	r2, #128	; 0x80
 801399e:	0152      	lsls	r2, r2, #5
 80139a0:	4293      	cmp	r3, r2
 80139a2:	d008      	beq.n	80139b6 <HAL_UART_Receive_IT+0x52>
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d115      	bne.n	80139d4 <HAL_UART_Receive_IT+0x70>
 80139a8:	6903      	ldr	r3, [r0, #16]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d10e      	bne.n	80139cc <HAL_UART_Receive_IT+0x68>
 80139ae:	335c      	adds	r3, #92	; 0x5c
 80139b0:	22ff      	movs	r2, #255	; 0xff
 80139b2:	52c2      	strh	r2, [r0, r3]
 80139b4:	e012      	b.n	80139dc <HAL_UART_Receive_IT+0x78>
 80139b6:	6903      	ldr	r3, [r0, #16]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d103      	bne.n	80139c4 <HAL_UART_Receive_IT+0x60>
 80139bc:	335c      	adds	r3, #92	; 0x5c
 80139be:	4a20      	ldr	r2, [pc, #128]	; (8013a40 <HAL_UART_Receive_IT+0xdc>)
 80139c0:	52c2      	strh	r2, [r0, r3]
 80139c2:	e00b      	b.n	80139dc <HAL_UART_Receive_IT+0x78>
 80139c4:	235c      	movs	r3, #92	; 0x5c
 80139c6:	22ff      	movs	r2, #255	; 0xff
 80139c8:	52c2      	strh	r2, [r0, r3]
 80139ca:	e007      	b.n	80139dc <HAL_UART_Receive_IT+0x78>
 80139cc:	235c      	movs	r3, #92	; 0x5c
 80139ce:	227f      	movs	r2, #127	; 0x7f
 80139d0:	52c2      	strh	r2, [r0, r3]
 80139d2:	e003      	b.n	80139dc <HAL_UART_Receive_IT+0x78>
 80139d4:	2280      	movs	r2, #128	; 0x80
 80139d6:	0552      	lsls	r2, r2, #21
 80139d8:	4293      	cmp	r3, r2
 80139da:	d01e      	beq.n	8013a1a <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80139dc:	2300      	movs	r3, #0
 80139de:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80139e0:	3369      	adds	r3, #105	; 0x69
 80139e2:	5cc3      	ldrb	r3, [r0, r3]
 80139e4:	2b12      	cmp	r3, #18
 80139e6:	d023      	beq.n	8013a30 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80139e8:	2369      	movs	r3, #105	; 0x69
 80139ea:	2222      	movs	r2, #34	; 0x22
 80139ec:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80139ee:	6802      	ldr	r2, [r0, #0]
 80139f0:	6811      	ldr	r1, [r2, #0]
 80139f2:	2380      	movs	r3, #128	; 0x80
 80139f4:	005b      	lsls	r3, r3, #1
 80139f6:	430b      	orrs	r3, r1
 80139f8:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80139fa:	6802      	ldr	r2, [r0, #0]
 80139fc:	6893      	ldr	r3, [r2, #8]
 80139fe:	2101      	movs	r1, #1
 8013a00:	430b      	orrs	r3, r1
 8013a02:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013a04:	2368      	movs	r3, #104	; 0x68
 8013a06:	2200      	movs	r2, #0
 8013a08:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013a0a:	6802      	ldr	r2, [r0, #0]
 8013a0c:	6813      	ldr	r3, [r2, #0]
 8013a0e:	311f      	adds	r1, #31
 8013a10:	430b      	orrs	r3, r1
 8013a12:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8013a14:	2300      	movs	r3, #0
  }
}
 8013a16:	0018      	movs	r0, r3
 8013a18:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013a1a:	6903      	ldr	r3, [r0, #16]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d103      	bne.n	8013a28 <HAL_UART_Receive_IT+0xc4>
 8013a20:	335c      	adds	r3, #92	; 0x5c
 8013a22:	227f      	movs	r2, #127	; 0x7f
 8013a24:	52c2      	strh	r2, [r0, r3]
 8013a26:	e7d9      	b.n	80139dc <HAL_UART_Receive_IT+0x78>
 8013a28:	235c      	movs	r3, #92	; 0x5c
 8013a2a:	223f      	movs	r2, #63	; 0x3f
 8013a2c:	52c2      	strh	r2, [r0, r3]
 8013a2e:	e7d5      	b.n	80139dc <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013a30:	3357      	adds	r3, #87	; 0x57
 8013a32:	2232      	movs	r2, #50	; 0x32
 8013a34:	54c2      	strb	r2, [r0, r3]
 8013a36:	e7da      	b.n	80139ee <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	e7ec      	b.n	8013a16 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8013a3c:	2302      	movs	r3, #2
 8013a3e:	e7ea      	b.n	8013a16 <HAL_UART_Receive_IT+0xb2>
 8013a40:	000001ff 	.word	0x000001ff

08013a44 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013a44:	b510      	push	{r4, lr}
 8013a46:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013a48:	2369      	movs	r3, #105	; 0x69
 8013a4a:	5cc3      	ldrb	r3, [r0, r3]
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d004      	beq.n	8013a5a <HAL_UART_Transmit_DMA+0x16>
 8013a50:	2369      	movs	r3, #105	; 0x69
 8013a52:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013a54:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013a56:	2b22      	cmp	r3, #34	; 0x22
 8013a58:	d134      	bne.n	8013ac4 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8013a5a:	2900      	cmp	r1, #0
 8013a5c:	d037      	beq.n	8013ace <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8013a5e:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013a60:	2a00      	cmp	r2, #0
 8013a62:	d02f      	beq.n	8013ac4 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013a64:	2368      	movs	r3, #104	; 0x68
 8013a66:	5ce3      	ldrb	r3, [r4, r3]
 8013a68:	2b01      	cmp	r3, #1
 8013a6a:	d032      	beq.n	8013ad2 <HAL_UART_Transmit_DMA+0x8e>
 8013a6c:	2368      	movs	r3, #104	; 0x68
 8013a6e:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8013a70:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013a72:	3b18      	subs	r3, #24
 8013a74:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8013a76:	3302      	adds	r3, #2
 8013a78:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013a7e:	3369      	adds	r3, #105	; 0x69
 8013a80:	5ce3      	ldrb	r3, [r4, r3]
 8013a82:	2b22      	cmp	r3, #34	; 0x22
 8013a84:	d01f      	beq.n	8013ac6 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013a86:	2369      	movs	r3, #105	; 0x69
 8013a88:	2012      	movs	r0, #18
 8013a8a:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013a8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013a8e:	4812      	ldr	r0, [pc, #72]	; (8013ad8 <HAL_UART_Transmit_DMA+0x94>)
 8013a90:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013a92:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013a94:	4811      	ldr	r0, [pc, #68]	; (8013adc <HAL_UART_Transmit_DMA+0x98>)
 8013a96:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013a98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013a9a:	4811      	ldr	r0, [pc, #68]	; (8013ae0 <HAL_UART_Transmit_DMA+0x9c>)
 8013a9c:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8013a9e:	6820      	ldr	r0, [r4, #0]
 8013aa0:	3028      	adds	r0, #40	; 0x28
 8013aa2:	0013      	movs	r3, r2
 8013aa4:	0002      	movs	r2, r0
 8013aa6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013aa8:	f7fd fd1a 	bl	80114e0 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013aac:	6823      	ldr	r3, [r4, #0]
 8013aae:	2240      	movs	r2, #64	; 0x40
 8013ab0:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8013ab2:	6822      	ldr	r2, [r4, #0]
 8013ab4:	6893      	ldr	r3, [r2, #8]
 8013ab6:	2180      	movs	r1, #128	; 0x80
 8013ab8:	430b      	orrs	r3, r1
 8013aba:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013abc:	2368      	movs	r3, #104	; 0x68
 8013abe:	2200      	movs	r2, #0
 8013ac0:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013ac2:	2000      	movs	r0, #0
  }
}
 8013ac4:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013ac6:	3347      	adds	r3, #71	; 0x47
 8013ac8:	3031      	adds	r0, #49	; 0x31
 8013aca:	54e0      	strb	r0, [r4, r3]
 8013acc:	e7de      	b.n	8013a8c <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8013ace:	2001      	movs	r0, #1
 8013ad0:	e7f8      	b.n	8013ac4 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013ad2:	2002      	movs	r0, #2
 8013ad4:	e7f6      	b.n	8013ac4 <HAL_UART_Transmit_DMA+0x80>
 8013ad6:	46c0      	nop			; (mov r8, r8)
 8013ad8:	08013b7d 	.word	0x08013b7d
 8013adc:	08013baf 	.word	0x08013baf
 8013ae0:	08013bff 	.word	0x08013bff

08013ae4 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ae4:	b510      	push	{r4, lr}
 8013ae6:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013ae8:	2069      	movs	r0, #105	; 0x69
 8013aea:	5c20      	ldrb	r0, [r4, r0]
 8013aec:	2801      	cmp	r0, #1
 8013aee:	d004      	beq.n	8013afa <HAL_UART_Receive_DMA+0x16>
 8013af0:	2369      	movs	r3, #105	; 0x69
 8013af2:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013af4:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013af6:	2b12      	cmp	r3, #18
 8013af8:	d130      	bne.n	8013b5c <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8013afa:	2900      	cmp	r1, #0
 8013afc:	d033      	beq.n	8013b66 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8013afe:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013b00:	2a00      	cmp	r2, #0
 8013b02:	d02b      	beq.n	8013b5c <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013b04:	2368      	movs	r3, #104	; 0x68
 8013b06:	5ce3      	ldrb	r3, [r4, r3]
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	d02e      	beq.n	8013b6a <HAL_UART_Receive_DMA+0x86>
 8013b0c:	2368      	movs	r3, #104	; 0x68
 8013b0e:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8013b10:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013b12:	3b10      	subs	r3, #16
 8013b14:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b16:	2300      	movs	r3, #0
 8013b18:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013b1a:	3369      	adds	r3, #105	; 0x69
 8013b1c:	5ce3      	ldrb	r3, [r4, r3]
 8013b1e:	2b12      	cmp	r3, #18
 8013b20:	d01d      	beq.n	8013b5e <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013b22:	2369      	movs	r3, #105	; 0x69
 8013b24:	2022      	movs	r0, #34	; 0x22
 8013b26:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b2a:	4811      	ldr	r0, [pc, #68]	; (8013b70 <HAL_UART_Receive_DMA+0x8c>)
 8013b2c:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b30:	4810      	ldr	r0, [pc, #64]	; (8013b74 <HAL_UART_Receive_DMA+0x90>)
 8013b32:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013b34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b36:	4810      	ldr	r0, [pc, #64]	; (8013b78 <HAL_UART_Receive_DMA+0x94>)
 8013b38:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013b3a:	6820      	ldr	r0, [r4, #0]
 8013b3c:	3024      	adds	r0, #36	; 0x24
 8013b3e:	0013      	movs	r3, r2
 8013b40:	000a      	movs	r2, r1
 8013b42:	0001      	movs	r1, r0
 8013b44:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013b46:	f7fd fccb 	bl	80114e0 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013b4a:	6822      	ldr	r2, [r4, #0]
 8013b4c:	6893      	ldr	r3, [r2, #8]
 8013b4e:	2140      	movs	r1, #64	; 0x40
 8013b50:	430b      	orrs	r3, r1
 8013b52:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8013b54:	2368      	movs	r3, #104	; 0x68
 8013b56:	2200      	movs	r2, #0
 8013b58:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013b5a:	2000      	movs	r0, #0
  }
}
 8013b5c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013b5e:	3357      	adds	r3, #87	; 0x57
 8013b60:	3031      	adds	r0, #49	; 0x31
 8013b62:	54e0      	strb	r0, [r4, r3]
 8013b64:	e7e0      	b.n	8013b28 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8013b66:	2001      	movs	r0, #1
 8013b68:	e7f8      	b.n	8013b5c <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013b6a:	2002      	movs	r0, #2
 8013b6c:	e7f6      	b.n	8013b5c <HAL_UART_Receive_DMA+0x78>
 8013b6e:	46c0      	nop			; (mov r8, r8)
 8013b70:	08013bb9 	.word	0x08013bb9
 8013b74:	08013bf5 	.word	0x08013bf5
 8013b78:	08013bff 	.word	0x08013bff

08013b7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013b7c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013b7e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013b80:	6802      	ldr	r2, [r0, #0]
 8013b82:	6812      	ldr	r2, [r2, #0]
 8013b84:	0692      	lsls	r2, r2, #26
 8013b86:	d40d      	bmi.n	8013ba4 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8013b88:	2252      	movs	r2, #82	; 0x52
 8013b8a:	2100      	movs	r1, #0
 8013b8c:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8013b8e:	6819      	ldr	r1, [r3, #0]
 8013b90:	688a      	ldr	r2, [r1, #8]
 8013b92:	2080      	movs	r0, #128	; 0x80
 8013b94:	4382      	bics	r2, r0
 8013b96:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	6813      	ldr	r3, [r2, #0]
 8013b9c:	2140      	movs	r1, #64	; 0x40
 8013b9e:	430b      	orrs	r3, r1
 8013ba0:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8013ba2:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8013ba4:	0018      	movs	r0, r3
 8013ba6:	f7fa fa69 	bl	800e07c <HAL_UART_TxCpltCallback>
}
 8013baa:	e7fa      	b.n	8013ba2 <UART_DMATransmitCplt+0x26>

08013bac <HAL_UART_TxHalfCpltCallback>:
}
 8013bac:	4770      	bx	lr

08013bae <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013bae:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8013bb0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013bb2:	f7ff fffb 	bl	8013bac <HAL_UART_TxHalfCpltCallback>
}
 8013bb6:	bd10      	pop	{r4, pc}

08013bb8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013bb8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013bba:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013bbc:	6802      	ldr	r2, [r0, #0]
 8013bbe:	6812      	ldr	r2, [r2, #0]
 8013bc0:	0692      	lsls	r2, r2, #26
 8013bc2:	d40e      	bmi.n	8013be2 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013bc4:	225a      	movs	r2, #90	; 0x5a
 8013bc6:	2100      	movs	r1, #0
 8013bc8:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013bca:	6819      	ldr	r1, [r3, #0]
 8013bcc:	688a      	ldr	r2, [r1, #8]
 8013bce:	2040      	movs	r0, #64	; 0x40
 8013bd0:	4382      	bics	r2, r0
 8013bd2:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013bd4:	2269      	movs	r2, #105	; 0x69
 8013bd6:	5c9a      	ldrb	r2, [r3, r2]
 8013bd8:	2a32      	cmp	r2, #50	; 0x32
 8013bda:	d006      	beq.n	8013bea <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013bdc:	2269      	movs	r2, #105	; 0x69
 8013bde:	2101      	movs	r1, #1
 8013be0:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013be2:	0018      	movs	r0, r3
 8013be4:	f7fa fa88 	bl	800e0f8 <HAL_UART_RxCpltCallback>
}
 8013be8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013bea:	3237      	adds	r2, #55	; 0x37
 8013bec:	2112      	movs	r1, #18
 8013bee:	5499      	strb	r1, [r3, r2]
 8013bf0:	e7f7      	b.n	8013be2 <UART_DMAReceiveCplt+0x2a>

08013bf2 <HAL_UART_RxHalfCpltCallback>:
}
 8013bf2:	4770      	bx	lr

08013bf4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013bf4:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013bf6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013bf8:	f7ff fffb 	bl	8013bf2 <HAL_UART_RxHalfCpltCallback>
}
 8013bfc:	bd10      	pop	{r4, pc}

08013bfe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013bfe:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013c00:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013c02:	2300      	movs	r3, #0
 8013c04:	225a      	movs	r2, #90	; 0x5a
 8013c06:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013c08:	3a08      	subs	r2, #8
 8013c0a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013c0c:	3369      	adds	r3, #105	; 0x69
 8013c0e:	3a51      	subs	r2, #81	; 0x51
 8013c10:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013c12:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013c14:	320f      	adds	r2, #15
 8013c16:	4313      	orrs	r3, r2
 8013c18:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8013c1a:	f7fa fa47 	bl	800e0ac <HAL_UART_ErrorCallback>
}
 8013c1e:	bd10      	pop	{r4, pc}

08013c20 <UART_SetConfig>:
{
 8013c20:	b570      	push	{r4, r5, r6, lr}
 8013c22:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013c24:	6801      	ldr	r1, [r0, #0]
 8013c26:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013c28:	6883      	ldr	r3, [r0, #8]
 8013c2a:	6900      	ldr	r0, [r0, #16]
 8013c2c:	4303      	orrs	r3, r0
 8013c2e:	6960      	ldr	r0, [r4, #20]
 8013c30:	4303      	orrs	r3, r0
 8013c32:	69e0      	ldr	r0, [r4, #28]
 8013c34:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013c36:	487e      	ldr	r0, [pc, #504]	; (8013e30 <UART_SetConfig+0x210>)
 8013c38:	4002      	ands	r2, r0
 8013c3a:	4313      	orrs	r3, r2
 8013c3c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013c3e:	6822      	ldr	r2, [r4, #0]
 8013c40:	6853      	ldr	r3, [r2, #4]
 8013c42:	497c      	ldr	r1, [pc, #496]	; (8013e34 <UART_SetConfig+0x214>)
 8013c44:	400b      	ands	r3, r1
 8013c46:	68e1      	ldr	r1, [r4, #12]
 8013c48:	430b      	orrs	r3, r1
 8013c4a:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013c4c:	6821      	ldr	r1, [r4, #0]
 8013c4e:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013c50:	69a3      	ldr	r3, [r4, #24]
 8013c52:	6a20      	ldr	r0, [r4, #32]
 8013c54:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013c56:	4878      	ldr	r0, [pc, #480]	; (8013e38 <UART_SetConfig+0x218>)
 8013c58:	4002      	ands	r2, r0
 8013c5a:	4313      	orrs	r3, r2
 8013c5c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013c5e:	6825      	ldr	r5, [r4, #0]
 8013c60:	4b76      	ldr	r3, [pc, #472]	; (8013e3c <UART_SetConfig+0x21c>)
 8013c62:	429d      	cmp	r5, r3
 8013c64:	d022      	beq.n	8013cac <UART_SetConfig+0x8c>
 8013c66:	4b76      	ldr	r3, [pc, #472]	; (8013e40 <UART_SetConfig+0x220>)
 8013c68:	429d      	cmp	r5, r3
 8013c6a:	d034      	beq.n	8013cd6 <UART_SetConfig+0xb6>
 8013c6c:	4b75      	ldr	r3, [pc, #468]	; (8013e44 <UART_SetConfig+0x224>)
 8013c6e:	429d      	cmp	r5, r3
 8013c70:	d100      	bne.n	8013c74 <UART_SetConfig+0x54>
 8013c72:	e06b      	b.n	8013d4c <UART_SetConfig+0x12c>
 8013c74:	4b74      	ldr	r3, [pc, #464]	; (8013e48 <UART_SetConfig+0x228>)
 8013c76:	429d      	cmp	r5, r3
 8013c78:	d100      	bne.n	8013c7c <UART_SetConfig+0x5c>
 8013c7a:	e08e      	b.n	8013d9a <UART_SetConfig+0x17a>
 8013c7c:	4b73      	ldr	r3, [pc, #460]	; (8013e4c <UART_SetConfig+0x22c>)
 8013c7e:	429d      	cmp	r5, r3
 8013c80:	d100      	bne.n	8013c84 <UART_SetConfig+0x64>
 8013c82:	e08a      	b.n	8013d9a <UART_SetConfig+0x17a>
 8013c84:	4b72      	ldr	r3, [pc, #456]	; (8013e50 <UART_SetConfig+0x230>)
 8013c86:	429d      	cmp	r5, r3
 8013c88:	d100      	bne.n	8013c8c <UART_SetConfig+0x6c>
 8013c8a:	e086      	b.n	8013d9a <UART_SetConfig+0x17a>
 8013c8c:	4b71      	ldr	r3, [pc, #452]	; (8013e54 <UART_SetConfig+0x234>)
 8013c8e:	429d      	cmp	r5, r3
 8013c90:	d100      	bne.n	8013c94 <UART_SetConfig+0x74>
 8013c92:	e082      	b.n	8013d9a <UART_SetConfig+0x17a>
 8013c94:	4b70      	ldr	r3, [pc, #448]	; (8013e58 <UART_SetConfig+0x238>)
 8013c96:	429d      	cmp	r5, r3
 8013c98:	d100      	bne.n	8013c9c <UART_SetConfig+0x7c>
 8013c9a:	e07e      	b.n	8013d9a <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013c9c:	2380      	movs	r3, #128	; 0x80
 8013c9e:	021b      	lsls	r3, r3, #8
 8013ca0:	69e2      	ldr	r2, [r4, #28]
 8013ca2:	429a      	cmp	r2, r3
 8013ca4:	d100      	bne.n	8013ca8 <UART_SetConfig+0x88>
 8013ca6:	e072      	b.n	8013d8e <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8013ca8:	2001      	movs	r0, #1
 8013caa:	e04e      	b.n	8013d4a <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013cac:	4b6b      	ldr	r3, [pc, #428]	; (8013e5c <UART_SetConfig+0x23c>)
 8013cae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cb0:	2303      	movs	r3, #3
 8013cb2:	4013      	ands	r3, r2
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d100      	bne.n	8013cba <UART_SetConfig+0x9a>
 8013cb8:	e09a      	b.n	8013df0 <UART_SetConfig+0x1d0>
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d02f      	beq.n	8013d1e <UART_SetConfig+0xfe>
 8013cbe:	2b02      	cmp	r3, #2
 8013cc0:	d100      	bne.n	8013cc4 <UART_SetConfig+0xa4>
 8013cc2:	e0a5      	b.n	8013e10 <UART_SetConfig+0x1f0>
 8013cc4:	2b03      	cmp	r3, #3
 8013cc6:	d01a      	beq.n	8013cfe <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013cc8:	2380      	movs	r3, #128	; 0x80
 8013cca:	021b      	lsls	r3, r3, #8
 8013ccc:	69e2      	ldr	r2, [r4, #28]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d060      	beq.n	8013d94 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8013cd2:	2001      	movs	r0, #1
 8013cd4:	e039      	b.n	8013d4a <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013cd6:	4b61      	ldr	r3, [pc, #388]	; (8013e5c <UART_SetConfig+0x23c>)
 8013cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cda:	22c0      	movs	r2, #192	; 0xc0
 8013cdc:	0292      	lsls	r2, r2, #10
 8013cde:	4013      	ands	r3, r2
 8013ce0:	2280      	movs	r2, #128	; 0x80
 8013ce2:	0252      	lsls	r2, r2, #9
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	d100      	bne.n	8013cea <UART_SetConfig+0xca>
 8013ce8:	e082      	b.n	8013df0 <UART_SetConfig+0x1d0>
 8013cea:	d916      	bls.n	8013d1a <UART_SetConfig+0xfa>
 8013cec:	2280      	movs	r2, #128	; 0x80
 8013cee:	0292      	lsls	r2, r2, #10
 8013cf0:	4293      	cmp	r3, r2
 8013cf2:	d100      	bne.n	8013cf6 <UART_SetConfig+0xd6>
 8013cf4:	e08c      	b.n	8013e10 <UART_SetConfig+0x1f0>
 8013cf6:	22c0      	movs	r2, #192	; 0xc0
 8013cf8:	0292      	lsls	r2, r2, #10
 8013cfa:	4293      	cmp	r3, r2
 8013cfc:	d1e4      	bne.n	8013cc8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013cfe:	2380      	movs	r3, #128	; 0x80
 8013d00:	021b      	lsls	r3, r3, #8
 8013d02:	69e2      	ldr	r2, [r4, #28]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d038      	beq.n	8013d7a <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013d08:	6861      	ldr	r1, [r4, #4]
 8013d0a:	4855      	ldr	r0, [pc, #340]	; (8013e60 <UART_SetConfig+0x240>)
 8013d0c:	f7ec fa20 	bl	8000150 <__udivsi3>
 8013d10:	0400      	lsls	r0, r0, #16
 8013d12:	0c00      	lsrs	r0, r0, #16
 8013d14:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013d16:	2000      	movs	r0, #0
        break;
 8013d18:	e017      	b.n	8013d4a <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d1d4      	bne.n	8013cc8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d1e:	2380      	movs	r3, #128	; 0x80
 8013d20:	021b      	lsls	r3, r3, #8
 8013d22:	69e2      	ldr	r2, [r4, #28]
 8013d24:	429a      	cmp	r2, r3
 8013d26:	d13d      	bne.n	8013da4 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013d28:	f7ff fa5c 	bl	80131e4 <HAL_RCC_GetPCLK1Freq>
 8013d2c:	0040      	lsls	r0, r0, #1
 8013d2e:	6861      	ldr	r1, [r4, #4]
 8013d30:	f7ec fa0e 	bl	8000150 <__udivsi3>
 8013d34:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013d36:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013d38:	220f      	movs	r2, #15
 8013d3a:	0019      	movs	r1, r3
 8013d3c:	4391      	bics	r1, r2
 8013d3e:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013d40:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013d42:	071b      	lsls	r3, r3, #28
 8013d44:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8013d46:	4313      	orrs	r3, r2
 8013d48:	60cb      	str	r3, [r1, #12]
}
 8013d4a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d4c:	4b43      	ldr	r3, [pc, #268]	; (8013e5c <UART_SetConfig+0x23c>)
 8013d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d50:	22c0      	movs	r2, #192	; 0xc0
 8013d52:	0312      	lsls	r2, r2, #12
 8013d54:	4013      	ands	r3, r2
 8013d56:	2280      	movs	r2, #128	; 0x80
 8013d58:	02d2      	lsls	r2, r2, #11
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d02d      	beq.n	8013dba <UART_SetConfig+0x19a>
 8013d5e:	d913      	bls.n	8013d88 <UART_SetConfig+0x168>
 8013d60:	2280      	movs	r2, #128	; 0x80
 8013d62:	0312      	lsls	r2, r2, #12
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d036      	beq.n	8013dd6 <UART_SetConfig+0x1b6>
 8013d68:	22c0      	movs	r2, #192	; 0xc0
 8013d6a:	0312      	lsls	r2, r2, #12
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	d1ab      	bne.n	8013cc8 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d70:	2380      	movs	r3, #128	; 0x80
 8013d72:	021b      	lsls	r3, r3, #8
 8013d74:	69e2      	ldr	r2, [r4, #28]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d1c6      	bne.n	8013d08 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013d7a:	6861      	ldr	r1, [r4, #4]
 8013d7c:	4839      	ldr	r0, [pc, #228]	; (8013e64 <UART_SetConfig+0x244>)
 8013d7e:	f7ec f9e7 	bl	8000150 <__udivsi3>
 8013d82:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013d84:	2000      	movs	r0, #0
        break;
 8013d86:	e7d7      	b.n	8013d38 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d0c8      	beq.n	8013d1e <UART_SetConfig+0xfe>
 8013d8c:	e79c      	b.n	8013cc8 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8013d8e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013d90:	2300      	movs	r3, #0
 8013d92:	e7d1      	b.n	8013d38 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8013d94:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013d96:	2300      	movs	r3, #0
 8013d98:	e7ce      	b.n	8013d38 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d9a:	2380      	movs	r3, #128	; 0x80
 8013d9c:	021b      	lsls	r3, r3, #8
 8013d9e:	69e2      	ldr	r2, [r4, #28]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d0c1      	beq.n	8013d28 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013da4:	f7ff fa1e 	bl	80131e4 <HAL_RCC_GetPCLK1Freq>
 8013da8:	6825      	ldr	r5, [r4, #0]
 8013daa:	6861      	ldr	r1, [r4, #4]
 8013dac:	f7ec f9d0 	bl	8000150 <__udivsi3>
 8013db0:	0400      	lsls	r0, r0, #16
 8013db2:	0c00      	lsrs	r0, r0, #16
 8013db4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013db6:	2000      	movs	r0, #0
  return ret;
 8013db8:	e7c7      	b.n	8013d4a <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013dba:	2380      	movs	r3, #128	; 0x80
 8013dbc:	021b      	lsls	r3, r3, #8
 8013dbe:	69e2      	ldr	r2, [r4, #28]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d11a      	bne.n	8013dfa <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013dc4:	f7ff f9aa 	bl	801311c <HAL_RCC_GetSysClockFreq>
 8013dc8:	0040      	lsls	r0, r0, #1
 8013dca:	6861      	ldr	r1, [r4, #4]
 8013dcc:	f7ec f9c0 	bl	8000150 <__udivsi3>
 8013dd0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013dd2:	2000      	movs	r0, #0
        break;
 8013dd4:	e7b0      	b.n	8013d38 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013dd6:	2380      	movs	r3, #128	; 0x80
 8013dd8:	021b      	lsls	r3, r3, #8
 8013dda:	69e2      	ldr	r2, [r4, #28]
 8013ddc:	429a      	cmp	r2, r3
 8013dde:	d11c      	bne.n	8013e1a <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013de0:	6861      	ldr	r1, [r4, #4]
 8013de2:	2080      	movs	r0, #128	; 0x80
 8013de4:	0240      	lsls	r0, r0, #9
 8013de6:	f7ec f9b3 	bl	8000150 <__udivsi3>
 8013dea:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013dec:	2000      	movs	r0, #0
        break;
 8013dee:	e7a3      	b.n	8013d38 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013df0:	2380      	movs	r3, #128	; 0x80
 8013df2:	021b      	lsls	r3, r3, #8
 8013df4:	69e2      	ldr	r2, [r4, #28]
 8013df6:	429a      	cmp	r2, r3
 8013df8:	d0e4      	beq.n	8013dc4 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013dfa:	f7ff f98f 	bl	801311c <HAL_RCC_GetSysClockFreq>
 8013dfe:	6825      	ldr	r5, [r4, #0]
 8013e00:	6861      	ldr	r1, [r4, #4]
 8013e02:	f7ec f9a5 	bl	8000150 <__udivsi3>
 8013e06:	0400      	lsls	r0, r0, #16
 8013e08:	0c00      	lsrs	r0, r0, #16
 8013e0a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e0c:	2000      	movs	r0, #0
        break;
 8013e0e:	e79c      	b.n	8013d4a <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e10:	2380      	movs	r3, #128	; 0x80
 8013e12:	021b      	lsls	r3, r3, #8
 8013e14:	69e2      	ldr	r2, [r4, #28]
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d0e2      	beq.n	8013de0 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013e1a:	6861      	ldr	r1, [r4, #4]
 8013e1c:	2080      	movs	r0, #128	; 0x80
 8013e1e:	0200      	lsls	r0, r0, #8
 8013e20:	f7ec f996 	bl	8000150 <__udivsi3>
 8013e24:	0400      	lsls	r0, r0, #16
 8013e26:	0c00      	lsrs	r0, r0, #16
 8013e28:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e2a:	2000      	movs	r0, #0
        break;
 8013e2c:	e78d      	b.n	8013d4a <UART_SetConfig+0x12a>
 8013e2e:	46c0      	nop			; (mov r8, r8)
 8013e30:	efff69f3 	.word	0xefff69f3
 8013e34:	ffffcfff 	.word	0xffffcfff
 8013e38:	fffff4ff 	.word	0xfffff4ff
 8013e3c:	40013800 	.word	0x40013800
 8013e40:	40004400 	.word	0x40004400
 8013e44:	40004800 	.word	0x40004800
 8013e48:	40004c00 	.word	0x40004c00
 8013e4c:	40005000 	.word	0x40005000
 8013e50:	40011400 	.word	0x40011400
 8013e54:	40011800 	.word	0x40011800
 8013e58:	40011c00 	.word	0x40011c00
 8013e5c:	40021000 	.word	0x40021000
 8013e60:	007a1200 	.word	0x007a1200
 8013e64:	00f42400 	.word	0x00f42400

08013e68 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013e68:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013e6a:	07db      	lsls	r3, r3, #31
 8013e6c:	d506      	bpl.n	8013e7c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013e6e:	6802      	ldr	r2, [r0, #0]
 8013e70:	6853      	ldr	r3, [r2, #4]
 8013e72:	492c      	ldr	r1, [pc, #176]	; (8013f24 <UART_AdvFeatureConfig+0xbc>)
 8013e74:	400b      	ands	r3, r1
 8013e76:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013e78:	430b      	orrs	r3, r1
 8013e7a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013e7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013e7e:	079b      	lsls	r3, r3, #30
 8013e80:	d506      	bpl.n	8013e90 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013e82:	6802      	ldr	r2, [r0, #0]
 8013e84:	6853      	ldr	r3, [r2, #4]
 8013e86:	4928      	ldr	r1, [pc, #160]	; (8013f28 <UART_AdvFeatureConfig+0xc0>)
 8013e88:	400b      	ands	r3, r1
 8013e8a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013e8c:	430b      	orrs	r3, r1
 8013e8e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013e90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013e92:	075b      	lsls	r3, r3, #29
 8013e94:	d506      	bpl.n	8013ea4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013e96:	6802      	ldr	r2, [r0, #0]
 8013e98:	6853      	ldr	r3, [r2, #4]
 8013e9a:	4924      	ldr	r1, [pc, #144]	; (8013f2c <UART_AdvFeatureConfig+0xc4>)
 8013e9c:	400b      	ands	r3, r1
 8013e9e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013ea0:	430b      	orrs	r3, r1
 8013ea2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013ea4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ea6:	071b      	lsls	r3, r3, #28
 8013ea8:	d506      	bpl.n	8013eb8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013eaa:	6802      	ldr	r2, [r0, #0]
 8013eac:	6853      	ldr	r3, [r2, #4]
 8013eae:	4920      	ldr	r1, [pc, #128]	; (8013f30 <UART_AdvFeatureConfig+0xc8>)
 8013eb0:	400b      	ands	r3, r1
 8013eb2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013eb4:	430b      	orrs	r3, r1
 8013eb6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013eb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013eba:	06db      	lsls	r3, r3, #27
 8013ebc:	d506      	bpl.n	8013ecc <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013ebe:	6802      	ldr	r2, [r0, #0]
 8013ec0:	6893      	ldr	r3, [r2, #8]
 8013ec2:	491c      	ldr	r1, [pc, #112]	; (8013f34 <UART_AdvFeatureConfig+0xcc>)
 8013ec4:	400b      	ands	r3, r1
 8013ec6:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013ec8:	430b      	orrs	r3, r1
 8013eca:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013ecc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ece:	069b      	lsls	r3, r3, #26
 8013ed0:	d506      	bpl.n	8013ee0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013ed2:	6802      	ldr	r2, [r0, #0]
 8013ed4:	6893      	ldr	r3, [r2, #8]
 8013ed6:	4918      	ldr	r1, [pc, #96]	; (8013f38 <UART_AdvFeatureConfig+0xd0>)
 8013ed8:	400b      	ands	r3, r1
 8013eda:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013edc:	430b      	orrs	r3, r1
 8013ede:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013ee0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ee2:	065b      	lsls	r3, r3, #25
 8013ee4:	d50b      	bpl.n	8013efe <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013ee6:	6802      	ldr	r2, [r0, #0]
 8013ee8:	6853      	ldr	r3, [r2, #4]
 8013eea:	4914      	ldr	r1, [pc, #80]	; (8013f3c <UART_AdvFeatureConfig+0xd4>)
 8013eec:	400b      	ands	r3, r1
 8013eee:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013ef0:	430b      	orrs	r3, r1
 8013ef2:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013ef4:	2380      	movs	r3, #128	; 0x80
 8013ef6:	035b      	lsls	r3, r3, #13
 8013ef8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013efa:	429a      	cmp	r2, r3
 8013efc:	d00a      	beq.n	8013f14 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013efe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f00:	061b      	lsls	r3, r3, #24
 8013f02:	d506      	bpl.n	8013f12 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013f04:	6802      	ldr	r2, [r0, #0]
 8013f06:	6853      	ldr	r3, [r2, #4]
 8013f08:	490d      	ldr	r1, [pc, #52]	; (8013f40 <UART_AdvFeatureConfig+0xd8>)
 8013f0a:	400b      	ands	r3, r1
 8013f0c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013f0e:	430b      	orrs	r3, r1
 8013f10:	6053      	str	r3, [r2, #4]
}
 8013f12:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013f14:	6802      	ldr	r2, [r0, #0]
 8013f16:	6853      	ldr	r3, [r2, #4]
 8013f18:	490a      	ldr	r1, [pc, #40]	; (8013f44 <UART_AdvFeatureConfig+0xdc>)
 8013f1a:	400b      	ands	r3, r1
 8013f1c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013f1e:	430b      	orrs	r3, r1
 8013f20:	6053      	str	r3, [r2, #4]
 8013f22:	e7ec      	b.n	8013efe <UART_AdvFeatureConfig+0x96>
 8013f24:	fffdffff 	.word	0xfffdffff
 8013f28:	fffeffff 	.word	0xfffeffff
 8013f2c:	fffbffff 	.word	0xfffbffff
 8013f30:	ffff7fff 	.word	0xffff7fff
 8013f34:	ffffefff 	.word	0xffffefff
 8013f38:	ffffdfff 	.word	0xffffdfff
 8013f3c:	ffefffff 	.word	0xffefffff
 8013f40:	fff7ffff 	.word	0xfff7ffff
 8013f44:	ff9fffff 	.word	0xff9fffff

08013f48 <UART_WaitOnFlagUntilTimeout>:
{
 8013f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f4a:	46c6      	mov	lr, r8
 8013f4c:	b500      	push	{lr}
 8013f4e:	0006      	movs	r6, r0
 8013f50:	000c      	movs	r4, r1
 8013f52:	0017      	movs	r7, r2
 8013f54:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013f56:	f7fc fe17 	bl	8010b88 <HAL_GetTick>
 8013f5a:	4680      	mov	r8, r0
  if(Status == RESET)
 8013f5c:	2f00      	cmp	r7, #0
 8013f5e:	d029      	beq.n	8013fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013f60:	6832      	ldr	r2, [r6, #0]
 8013f62:	69d3      	ldr	r3, [r2, #28]
 8013f64:	4023      	ands	r3, r4
 8013f66:	42a3      	cmp	r3, r4
 8013f68:	d152      	bne.n	8014010 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013f6a:	1c6b      	adds	r3, r5, #1
 8013f6c:	d0f9      	beq.n	8013f62 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013f6e:	2d00      	cmp	r5, #0
 8013f70:	d005      	beq.n	8013f7e <UART_WaitOnFlagUntilTimeout+0x36>
 8013f72:	f7fc fe09 	bl	8010b88 <HAL_GetTick>
 8013f76:	4643      	mov	r3, r8
 8013f78:	1ac0      	subs	r0, r0, r3
 8013f7a:	42a8      	cmp	r0, r5
 8013f7c:	d9f0      	bls.n	8013f60 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013f7e:	6832      	ldr	r2, [r6, #0]
 8013f80:	6813      	ldr	r3, [r2, #0]
 8013f82:	2180      	movs	r1, #128	; 0x80
 8013f84:	438b      	bics	r3, r1
 8013f86:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013f88:	6832      	ldr	r2, [r6, #0]
 8013f8a:	6813      	ldr	r3, [r2, #0]
 8013f8c:	3960      	subs	r1, #96	; 0x60
 8013f8e:	438b      	bics	r3, r1
 8013f90:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013f92:	6832      	ldr	r2, [r6, #0]
 8013f94:	6813      	ldr	r3, [r2, #0]
 8013f96:	491f      	ldr	r1, [pc, #124]	; (8014014 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013f98:	400b      	ands	r3, r1
 8013f9a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013f9c:	6831      	ldr	r1, [r6, #0]
 8013f9e:	688b      	ldr	r3, [r1, #8]
 8013fa0:	2201      	movs	r2, #1
 8013fa2:	4393      	bics	r3, r2
 8013fa4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013fa6:	2369      	movs	r3, #105	; 0x69
 8013fa8:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013faa:	3b01      	subs	r3, #1
 8013fac:	2200      	movs	r2, #0
 8013fae:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013fb0:	2003      	movs	r0, #3
 8013fb2:	e02a      	b.n	801400a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013fb4:	6832      	ldr	r2, [r6, #0]
 8013fb6:	69d3      	ldr	r3, [r2, #28]
 8013fb8:	4023      	ands	r3, r4
 8013fba:	42a3      	cmp	r3, r4
 8013fbc:	d024      	beq.n	8014008 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8013fbe:	1c6b      	adds	r3, r5, #1
 8013fc0:	d0f9      	beq.n	8013fb6 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013fc2:	2d00      	cmp	r5, #0
 8013fc4:	d005      	beq.n	8013fd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8013fc6:	f7fc fddf 	bl	8010b88 <HAL_GetTick>
 8013fca:	4643      	mov	r3, r8
 8013fcc:	1ac0      	subs	r0, r0, r3
 8013fce:	42a8      	cmp	r0, r5
 8013fd0:	d9f0      	bls.n	8013fb4 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013fd2:	6832      	ldr	r2, [r6, #0]
 8013fd4:	6813      	ldr	r3, [r2, #0]
 8013fd6:	2180      	movs	r1, #128	; 0x80
 8013fd8:	438b      	bics	r3, r1
 8013fda:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013fdc:	6832      	ldr	r2, [r6, #0]
 8013fde:	6813      	ldr	r3, [r2, #0]
 8013fe0:	3960      	subs	r1, #96	; 0x60
 8013fe2:	438b      	bics	r3, r1
 8013fe4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013fe6:	6832      	ldr	r2, [r6, #0]
 8013fe8:	6813      	ldr	r3, [r2, #0]
 8013fea:	490a      	ldr	r1, [pc, #40]	; (8014014 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013fec:	400b      	ands	r3, r1
 8013fee:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013ff0:	6831      	ldr	r1, [r6, #0]
 8013ff2:	688b      	ldr	r3, [r1, #8]
 8013ff4:	2201      	movs	r2, #1
 8013ff6:	4393      	bics	r3, r2
 8013ff8:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013ffa:	2369      	movs	r3, #105	; 0x69
 8013ffc:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013ffe:	3b01      	subs	r3, #1
 8014000:	2200      	movs	r2, #0
 8014002:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8014004:	2003      	movs	r0, #3
 8014006:	e000      	b.n	801400a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8014008:	2000      	movs	r0, #0
}
 801400a:	bc04      	pop	{r2}
 801400c:	4690      	mov	r8, r2
 801400e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8014010:	2000      	movs	r0, #0
 8014012:	e7fa      	b.n	801400a <UART_WaitOnFlagUntilTimeout+0xc2>
 8014014:	fffffeff 	.word	0xfffffeff

08014018 <HAL_UART_Transmit>:
{
 8014018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801401a:	b083      	sub	sp, #12
 801401c:	0004      	movs	r4, r0
 801401e:	000e      	movs	r6, r1
 8014020:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014022:	2369      	movs	r3, #105	; 0x69
 8014024:	5cc3      	ldrb	r3, [r0, r3]
 8014026:	2b01      	cmp	r3, #1
 8014028:	d004      	beq.n	8014034 <HAL_UART_Transmit+0x1c>
 801402a:	2369      	movs	r3, #105	; 0x69
 801402c:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 801402e:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014030:	2b22      	cmp	r3, #34	; 0x22
 8014032:	d153      	bne.n	80140dc <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8014034:	2e00      	cmp	r6, #0
 8014036:	d050      	beq.n	80140da <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8014038:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801403a:	2a00      	cmp	r2, #0
 801403c:	d04e      	beq.n	80140dc <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 801403e:	2368      	movs	r3, #104	; 0x68
 8014040:	5ce3      	ldrb	r3, [r4, r3]
 8014042:	2b01      	cmp	r3, #1
 8014044:	d04c      	beq.n	80140e0 <HAL_UART_Transmit+0xc8>
 8014046:	2368      	movs	r3, #104	; 0x68
 8014048:	2101      	movs	r1, #1
 801404a:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801404c:	2300      	movs	r3, #0
 801404e:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8014050:	3369      	adds	r3, #105	; 0x69
 8014052:	5ce3      	ldrb	r3, [r4, r3]
 8014054:	2b22      	cmp	r3, #34	; 0x22
 8014056:	d008      	beq.n	801406a <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8014058:	2369      	movs	r3, #105	; 0x69
 801405a:	2112      	movs	r1, #18
 801405c:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 801405e:	2350      	movs	r3, #80	; 0x50
 8014060:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8014062:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014064:	2580      	movs	r5, #128	; 0x80
 8014066:	016d      	lsls	r5, r5, #5
 8014068:	e00a      	b.n	8014080 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801406a:	3347      	adds	r3, #71	; 0x47
 801406c:	3131      	adds	r1, #49	; 0x31
 801406e:	54e1      	strb	r1, [r4, r3]
 8014070:	e7f5      	b.n	801405e <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8014072:	7833      	ldrb	r3, [r6, #0]
 8014074:	6822      	ldr	r2, [r4, #0]
 8014076:	8513      	strh	r3, [r2, #40]	; 0x28
 8014078:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 801407a:	5be2      	ldrh	r2, [r4, r7]
 801407c:	2a00      	cmp	r2, #0
 801407e:	d016      	beq.n	80140ae <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8014080:	3a01      	subs	r2, #1
 8014082:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8014084:	9b01      	ldr	r3, [sp, #4]
 8014086:	2200      	movs	r2, #0
 8014088:	2180      	movs	r1, #128	; 0x80
 801408a:	0020      	movs	r0, r4
 801408c:	f7ff ff5c 	bl	8013f48 <UART_WaitOnFlagUntilTimeout>
 8014090:	2800      	cmp	r0, #0
 8014092:	d127      	bne.n	80140e4 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014094:	68a3      	ldr	r3, [r4, #8]
 8014096:	42ab      	cmp	r3, r5
 8014098:	d1eb      	bne.n	8014072 <HAL_UART_Transmit+0x5a>
 801409a:	6923      	ldr	r3, [r4, #16]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1e8      	bne.n	8014072 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80140a0:	8833      	ldrh	r3, [r6, #0]
 80140a2:	05db      	lsls	r3, r3, #23
 80140a4:	0ddb      	lsrs	r3, r3, #23
 80140a6:	6822      	ldr	r2, [r4, #0]
 80140a8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80140aa:	3602      	adds	r6, #2
 80140ac:	e7e5      	b.n	801407a <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80140ae:	9b01      	ldr	r3, [sp, #4]
 80140b0:	2140      	movs	r1, #64	; 0x40
 80140b2:	0020      	movs	r0, r4
 80140b4:	f7ff ff48 	bl	8013f48 <UART_WaitOnFlagUntilTimeout>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d115      	bne.n	80140e8 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80140bc:	2369      	movs	r3, #105	; 0x69
 80140be:	5ce3      	ldrb	r3, [r4, r3]
 80140c0:	2b32      	cmp	r3, #50	; 0x32
 80140c2:	d006      	beq.n	80140d2 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 80140c4:	2369      	movs	r3, #105	; 0x69
 80140c6:	2201      	movs	r2, #1
 80140c8:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80140ca:	2368      	movs	r3, #104	; 0x68
 80140cc:	2200      	movs	r2, #0
 80140ce:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80140d0:	e004      	b.n	80140dc <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80140d2:	3337      	adds	r3, #55	; 0x37
 80140d4:	2222      	movs	r2, #34	; 0x22
 80140d6:	54e2      	strb	r2, [r4, r3]
 80140d8:	e7f7      	b.n	80140ca <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 80140da:	2001      	movs	r0, #1
}
 80140dc:	b003      	add	sp, #12
 80140de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 80140e0:	2002      	movs	r0, #2
 80140e2:	e7fb      	b.n	80140dc <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 80140e4:	2003      	movs	r0, #3
 80140e6:	e7f9      	b.n	80140dc <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 80140e8:	2003      	movs	r0, #3
 80140ea:	e7f7      	b.n	80140dc <HAL_UART_Transmit+0xc4>

080140ec <UART_CheckIdleState>:
{
 80140ec:	b510      	push	{r4, lr}
 80140ee:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140f0:	2300      	movs	r3, #0
 80140f2:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 80140f4:	6803      	ldr	r3, [r0, #0]
 80140f6:	4a18      	ldr	r2, [pc, #96]	; (8014158 <UART_CheckIdleState+0x6c>)
 80140f8:	4293      	cmp	r3, r2
 80140fa:	d005      	beq.n	8014108 <UART_CheckIdleState+0x1c>
 80140fc:	4a17      	ldr	r2, [pc, #92]	; (801415c <UART_CheckIdleState+0x70>)
 80140fe:	4293      	cmp	r3, r2
 8014100:	d002      	beq.n	8014108 <UART_CheckIdleState+0x1c>
 8014102:	4a17      	ldr	r2, [pc, #92]	; (8014160 <UART_CheckIdleState+0x74>)
 8014104:	4293      	cmp	r3, r2
 8014106:	d106      	bne.n	8014116 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	071b      	lsls	r3, r3, #28
 801410c:	d40b      	bmi.n	8014126 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801410e:	6823      	ldr	r3, [r4, #0]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	075b      	lsls	r3, r3, #29
 8014114:	d413      	bmi.n	801413e <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8014116:	2369      	movs	r3, #105	; 0x69
 8014118:	2201      	movs	r2, #1
 801411a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 801411c:	3b01      	subs	r3, #1
 801411e:	2200      	movs	r2, #0
 8014120:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8014122:	2000      	movs	r0, #0
}
 8014124:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8014126:	23fa      	movs	r3, #250	; 0xfa
 8014128:	2180      	movs	r1, #128	; 0x80
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	2200      	movs	r2, #0
 801412e:	0389      	lsls	r1, r1, #14
 8014130:	0020      	movs	r0, r4
 8014132:	f7ff ff09 	bl	8013f48 <UART_WaitOnFlagUntilTimeout>
 8014136:	2800      	cmp	r0, #0
 8014138:	d0e9      	beq.n	801410e <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 801413a:	2003      	movs	r0, #3
 801413c:	e7f2      	b.n	8014124 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801413e:	23fa      	movs	r3, #250	; 0xfa
 8014140:	2180      	movs	r1, #128	; 0x80
 8014142:	009b      	lsls	r3, r3, #2
 8014144:	2200      	movs	r2, #0
 8014146:	03c9      	lsls	r1, r1, #15
 8014148:	0020      	movs	r0, r4
 801414a:	f7ff fefd 	bl	8013f48 <UART_WaitOnFlagUntilTimeout>
 801414e:	2800      	cmp	r0, #0
 8014150:	d0e1      	beq.n	8014116 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8014152:	2003      	movs	r0, #3
 8014154:	e7e6      	b.n	8014124 <UART_CheckIdleState+0x38>
 8014156:	46c0      	nop			; (mov r8, r8)
 8014158:	40013800 	.word	0x40013800
 801415c:	40004400 	.word	0x40004400
 8014160:	40004800 	.word	0x40004800

08014164 <HAL_UART_Init>:
{
 8014164:	b510      	push	{r4, lr}
 8014166:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8014168:	d030      	beq.n	80141cc <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 801416a:	2369      	movs	r3, #105	; 0x69
 801416c:	5cc3      	ldrb	r3, [r0, r3]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d022      	beq.n	80141b8 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8014172:	2369      	movs	r3, #105	; 0x69
 8014174:	2202      	movs	r2, #2
 8014176:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8014178:	6822      	ldr	r2, [r4, #0]
 801417a:	6813      	ldr	r3, [r2, #0]
 801417c:	2101      	movs	r1, #1
 801417e:	438b      	bics	r3, r1
 8014180:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014182:	0020      	movs	r0, r4
 8014184:	f7ff fd4c 	bl	8013c20 <UART_SetConfig>
 8014188:	2801      	cmp	r0, #1
 801418a:	d014      	beq.n	80141b6 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801418c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801418e:	2b00      	cmp	r3, #0
 8014190:	d118      	bne.n	80141c4 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8014192:	6822      	ldr	r2, [r4, #0]
 8014194:	6853      	ldr	r3, [r2, #4]
 8014196:	490e      	ldr	r1, [pc, #56]	; (80141d0 <HAL_UART_Init+0x6c>)
 8014198:	400b      	ands	r3, r1
 801419a:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 801419c:	6822      	ldr	r2, [r4, #0]
 801419e:	6893      	ldr	r3, [r2, #8]
 80141a0:	212a      	movs	r1, #42	; 0x2a
 80141a2:	438b      	bics	r3, r1
 80141a4:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80141a6:	6822      	ldr	r2, [r4, #0]
 80141a8:	6813      	ldr	r3, [r2, #0]
 80141aa:	3929      	subs	r1, #41	; 0x29
 80141ac:	430b      	orrs	r3, r1
 80141ae:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80141b0:	0020      	movs	r0, r4
 80141b2:	f7ff ff9b 	bl	80140ec <UART_CheckIdleState>
}
 80141b6:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80141b8:	3368      	adds	r3, #104	; 0x68
 80141ba:	2200      	movs	r2, #0
 80141bc:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80141be:	f7fa fa37 	bl	800e630 <HAL_UART_MspInit>
 80141c2:	e7d6      	b.n	8014172 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80141c4:	0020      	movs	r0, r4
 80141c6:	f7ff fe4f 	bl	8013e68 <UART_AdvFeatureConfig>
 80141ca:	e7e2      	b.n	8014192 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80141cc:	2001      	movs	r0, #1
 80141ce:	e7f2      	b.n	80141b6 <HAL_UART_Init+0x52>
 80141d0:	ffffb7ff 	.word	0xffffb7ff

080141d4 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80141d4:	2369      	movs	r3, #105	; 0x69
 80141d6:	5cc3      	ldrb	r3, [r0, r3]
 80141d8:	2b12      	cmp	r3, #18
 80141da:	d004      	beq.n	80141e6 <UART_Transmit_IT+0x12>
 80141dc:	2369      	movs	r3, #105	; 0x69
 80141de:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 80141e0:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80141e2:	2a32      	cmp	r2, #50	; 0x32
 80141e4:	d113      	bne.n	801420e <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 80141e6:	2352      	movs	r3, #82	; 0x52
 80141e8:	5ac3      	ldrh	r3, [r0, r3]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d011      	beq.n	8014212 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80141ee:	2380      	movs	r3, #128	; 0x80
 80141f0:	015b      	lsls	r3, r3, #5
 80141f2:	6882      	ldr	r2, [r0, #8]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d018      	beq.n	801422a <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 80141f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80141fa:	1c5a      	adds	r2, r3, #1
 80141fc:	64c2      	str	r2, [r0, #76]	; 0x4c
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	6802      	ldr	r2, [r0, #0]
 8014202:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8014204:	2252      	movs	r2, #82	; 0x52
 8014206:	5a83      	ldrh	r3, [r0, r2]
 8014208:	3b01      	subs	r3, #1
 801420a:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 801420c:	2300      	movs	r3, #0
  }
}
 801420e:	0018      	movs	r0, r3
 8014210:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014212:	6802      	ldr	r2, [r0, #0]
 8014214:	6813      	ldr	r3, [r2, #0]
 8014216:	2180      	movs	r1, #128	; 0x80
 8014218:	438b      	bics	r3, r1
 801421a:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801421c:	6802      	ldr	r2, [r0, #0]
 801421e:	6813      	ldr	r3, [r2, #0]
 8014220:	3940      	subs	r1, #64	; 0x40
 8014222:	430b      	orrs	r3, r1
 8014224:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8014226:	2300      	movs	r3, #0
 8014228:	e7f1      	b.n	801420e <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801422a:	6903      	ldr	r3, [r0, #16]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d1e3      	bne.n	80141f8 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014230:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014232:	881b      	ldrh	r3, [r3, #0]
 8014234:	05db      	lsls	r3, r3, #23
 8014236:	0ddb      	lsrs	r3, r3, #23
 8014238:	6802      	ldr	r2, [r0, #0]
 801423a:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 801423c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801423e:	3302      	adds	r3, #2
 8014240:	64c3      	str	r3, [r0, #76]	; 0x4c
 8014242:	e7df      	b.n	8014204 <UART_Transmit_IT+0x30>

08014244 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014244:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8014246:	6802      	ldr	r2, [r0, #0]
 8014248:	6813      	ldr	r3, [r2, #0]
 801424a:	2140      	movs	r1, #64	; 0x40
 801424c:	438b      	bics	r3, r1
 801424e:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014250:	2369      	movs	r3, #105	; 0x69
 8014252:	5cc3      	ldrb	r3, [r0, r3]
 8014254:	2b32      	cmp	r3, #50	; 0x32
 8014256:	d00a      	beq.n	801426e <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014258:	6801      	ldr	r1, [r0, #0]
 801425a:	688b      	ldr	r3, [r1, #8]
 801425c:	2201      	movs	r2, #1
 801425e:	4393      	bics	r3, r2
 8014260:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8014262:	2369      	movs	r3, #105	; 0x69
 8014264:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8014266:	f7f9 ff09 	bl	800e07c <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 801426a:	2000      	movs	r0, #0
 801426c:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 801426e:	3337      	adds	r3, #55	; 0x37
 8014270:	2222      	movs	r2, #34	; 0x22
 8014272:	54c2      	strb	r2, [r0, r3]
 8014274:	e7f7      	b.n	8014266 <UART_EndTransmit_IT+0x22>
	...

08014278 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8014278:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801427a:	2369      	movs	r3, #105	; 0x69
 801427c:	5cc3      	ldrb	r3, [r0, r3]
 801427e:	2b22      	cmp	r3, #34	; 0x22
 8014280:	d004      	beq.n	801428c <UART_Receive_IT+0x14>
 8014282:	2369      	movs	r3, #105	; 0x69
 8014284:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8014286:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014288:	2b32      	cmp	r3, #50	; 0x32
 801428a:	d12d      	bne.n	80142e8 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 801428c:	235c      	movs	r3, #92	; 0x5c
 801428e:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014290:	2280      	movs	r2, #128	; 0x80
 8014292:	0152      	lsls	r2, r2, #5
 8014294:	6883      	ldr	r3, [r0, #8]
 8014296:	4293      	cmp	r3, r2
 8014298:	d028      	beq.n	80142ec <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801429a:	6803      	ldr	r3, [r0, #0]
 801429c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801429e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80142a0:	1c54      	adds	r4, r2, #1
 80142a2:	6544      	str	r4, [r0, #84]	; 0x54
 80142a4:	400b      	ands	r3, r1
 80142a6:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 80142a8:	225a      	movs	r2, #90	; 0x5a
 80142aa:	5a83      	ldrh	r3, [r0, r2]
 80142ac:	3b01      	subs	r3, #1
 80142ae:	b29b      	uxth	r3, r3
 80142b0:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 80142b2:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d117      	bne.n	80142e8 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80142b8:	6802      	ldr	r2, [r0, #0]
 80142ba:	6813      	ldr	r3, [r2, #0]
 80142bc:	2120      	movs	r1, #32
 80142be:	438b      	bics	r3, r1
 80142c0:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80142c2:	2369      	movs	r3, #105	; 0x69
 80142c4:	5cc3      	ldrb	r3, [r0, r3]
 80142c6:	2b32      	cmp	r3, #50	; 0x32
 80142c8:	d01c      	beq.n	8014304 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80142ca:	6802      	ldr	r2, [r0, #0]
 80142cc:	6813      	ldr	r3, [r2, #0]
 80142ce:	490f      	ldr	r1, [pc, #60]	; (801430c <UART_Receive_IT+0x94>)
 80142d0:	400b      	ands	r3, r1
 80142d2:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80142d4:	6801      	ldr	r1, [r0, #0]
 80142d6:	688b      	ldr	r3, [r1, #8]
 80142d8:	2201      	movs	r2, #1
 80142da:	4393      	bics	r3, r2
 80142dc:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 80142de:	2369      	movs	r3, #105	; 0x69
 80142e0:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 80142e2:	f7f9 ff09 	bl	800e0f8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80142e6:	2200      	movs	r2, #0
  }
}
 80142e8:	0010      	movs	r0, r2
 80142ea:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80142ec:	6903      	ldr	r3, [r0, #16]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d1d3      	bne.n	801429a <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 80142f2:	6803      	ldr	r3, [r0, #0]
 80142f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80142f6:	400b      	ands	r3, r1
 80142f8:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80142fa:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 80142fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80142fe:	3302      	adds	r3, #2
 8014300:	6543      	str	r3, [r0, #84]	; 0x54
 8014302:	e7d1      	b.n	80142a8 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8014304:	3337      	adds	r3, #55	; 0x37
 8014306:	2212      	movs	r2, #18
 8014308:	54c2      	strb	r2, [r0, r3]
 801430a:	e7ea      	b.n	80142e2 <UART_Receive_IT+0x6a>
 801430c:	fffffeff 	.word	0xfffffeff

08014310 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8014310:	4770      	bx	lr

08014312 <HAL_UART_IRQHandler>:
{
 8014312:	b510      	push	{r4, lr}
 8014314:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8014316:	6803      	ldr	r3, [r0, #0]
 8014318:	69da      	ldr	r2, [r3, #28]
 801431a:	07d2      	lsls	r2, r2, #31
 801431c:	d509      	bpl.n	8014332 <HAL_UART_IRQHandler+0x20>
 801431e:	681a      	ldr	r2, [r3, #0]
 8014320:	05d2      	lsls	r2, r2, #23
 8014322:	d506      	bpl.n	8014332 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014324:	2201      	movs	r2, #1
 8014326:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014328:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801432a:	4313      	orrs	r3, r2
 801432c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801432e:	2369      	movs	r3, #105	; 0x69
 8014330:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014332:	6823      	ldr	r3, [r4, #0]
 8014334:	69da      	ldr	r2, [r3, #28]
 8014336:	0792      	lsls	r2, r2, #30
 8014338:	d50b      	bpl.n	8014352 <HAL_UART_IRQHandler+0x40>
 801433a:	689a      	ldr	r2, [r3, #8]
 801433c:	07d2      	lsls	r2, r2, #31
 801433e:	d508      	bpl.n	8014352 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8014340:	2202      	movs	r2, #2
 8014342:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014344:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014346:	3202      	adds	r2, #2
 8014348:	4313      	orrs	r3, r2
 801434a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801434c:	2369      	movs	r3, #105	; 0x69
 801434e:	3a03      	subs	r2, #3
 8014350:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014352:	6823      	ldr	r3, [r4, #0]
 8014354:	69da      	ldr	r2, [r3, #28]
 8014356:	0752      	lsls	r2, r2, #29
 8014358:	d50b      	bpl.n	8014372 <HAL_UART_IRQHandler+0x60>
 801435a:	689a      	ldr	r2, [r3, #8]
 801435c:	07d2      	lsls	r2, r2, #31
 801435e:	d508      	bpl.n	8014372 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8014360:	2204      	movs	r2, #4
 8014362:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014364:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014366:	3a02      	subs	r2, #2
 8014368:	4313      	orrs	r3, r2
 801436a:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801436c:	2369      	movs	r3, #105	; 0x69
 801436e:	3a01      	subs	r2, #1
 8014370:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014372:	6823      	ldr	r3, [r4, #0]
 8014374:	69da      	ldr	r2, [r3, #28]
 8014376:	0712      	lsls	r2, r2, #28
 8014378:	d50a      	bpl.n	8014390 <HAL_UART_IRQHandler+0x7e>
 801437a:	689a      	ldr	r2, [r3, #8]
 801437c:	07d2      	lsls	r2, r2, #31
 801437e:	d507      	bpl.n	8014390 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8014380:	2208      	movs	r2, #8
 8014382:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014384:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014386:	4313      	orrs	r3, r2
 8014388:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801438a:	2369      	movs	r3, #105	; 0x69
 801438c:	3a07      	subs	r2, #7
 801438e:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014390:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014392:	2b00      	cmp	r3, #0
 8014394:	d11c      	bne.n	80143d0 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8014396:	6823      	ldr	r3, [r4, #0]
 8014398:	69da      	ldr	r2, [r3, #28]
 801439a:	02d2      	lsls	r2, r2, #11
 801439c:	d502      	bpl.n	80143a4 <HAL_UART_IRQHandler+0x92>
 801439e:	689a      	ldr	r2, [r3, #8]
 80143a0:	0252      	lsls	r2, r2, #9
 80143a2:	d419      	bmi.n	80143d8 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80143a4:	6823      	ldr	r3, [r4, #0]
 80143a6:	69da      	ldr	r2, [r3, #28]
 80143a8:	0692      	lsls	r2, r2, #26
 80143aa:	d502      	bpl.n	80143b2 <HAL_UART_IRQHandler+0xa0>
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	069b      	lsls	r3, r3, #26
 80143b0:	d41c      	bmi.n	80143ec <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80143b2:	6823      	ldr	r3, [r4, #0]
 80143b4:	69da      	ldr	r2, [r3, #28]
 80143b6:	0612      	lsls	r2, r2, #24
 80143b8:	d502      	bpl.n	80143c0 <HAL_UART_IRQHandler+0xae>
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	061b      	lsls	r3, r3, #24
 80143be:	d41e      	bmi.n	80143fe <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 80143c0:	6823      	ldr	r3, [r4, #0]
 80143c2:	69da      	ldr	r2, [r3, #28]
 80143c4:	0652      	lsls	r2, r2, #25
 80143c6:	d502      	bpl.n	80143ce <HAL_UART_IRQHandler+0xbc>
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	065b      	lsls	r3, r3, #25
 80143cc:	d41b      	bmi.n	8014406 <HAL_UART_IRQHandler+0xf4>
}
 80143ce:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 80143d0:	0020      	movs	r0, r4
 80143d2:	f7f9 fe6b 	bl	800e0ac <HAL_UART_ErrorCallback>
 80143d6:	e7de      	b.n	8014396 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80143d8:	2280      	movs	r2, #128	; 0x80
 80143da:	0352      	lsls	r2, r2, #13
 80143dc:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 80143de:	2369      	movs	r3, #105	; 0x69
 80143e0:	2201      	movs	r2, #1
 80143e2:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 80143e4:	0020      	movs	r0, r4
 80143e6:	f7ff ff93 	bl	8014310 <HAL_UARTEx_WakeupCallback>
 80143ea:	e7db      	b.n	80143a4 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 80143ec:	0020      	movs	r0, r4
 80143ee:	f7ff ff43 	bl	8014278 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80143f2:	6822      	ldr	r2, [r4, #0]
 80143f4:	6993      	ldr	r3, [r2, #24]
 80143f6:	2108      	movs	r1, #8
 80143f8:	430b      	orrs	r3, r1
 80143fa:	6193      	str	r3, [r2, #24]
 80143fc:	e7d9      	b.n	80143b2 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 80143fe:	0020      	movs	r0, r4
 8014400:	f7ff fee8 	bl	80141d4 <UART_Transmit_IT>
 8014404:	e7dc      	b.n	80143c0 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8014406:	0020      	movs	r0, r4
 8014408:	f7ff ff1c 	bl	8014244 <UART_EndTransmit_IT>
}
 801440c:	e7df      	b.n	80143ce <HAL_UART_IRQHandler+0xbc>

0801440e <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 801440e:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8014410:	f7f0 f95a 	bl	80046c8 <Module_Init>
 8014414:	e7fe      	b.n	8014414 <main+0x6>

08014416 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8014416:	e7fe      	b.n	8014416 <UserTask>

08014418 <atof>:
 8014418:	b510      	push	{r4, lr}
 801441a:	2100      	movs	r1, #0
 801441c:	f001 fb70 	bl	8015b00 <strtod>
 8014420:	bd10      	pop	{r4, pc}

08014422 <atoi>:
 8014422:	b510      	push	{r4, lr}
 8014424:	220a      	movs	r2, #10
 8014426:	2100      	movs	r1, #0
 8014428:	f001 fc36 	bl	8015c98 <strtol>
 801442c:	bd10      	pop	{r4, pc}

0801442e <atol>:
 801442e:	b510      	push	{r4, lr}
 8014430:	220a      	movs	r2, #10
 8014432:	2100      	movs	r1, #0
 8014434:	f001 fc30 	bl	8015c98 <strtol>
 8014438:	bd10      	pop	{r4, pc}
	...

0801443c <__libc_init_array>:
 801443c:	b570      	push	{r4, r5, r6, lr}
 801443e:	2600      	movs	r6, #0
 8014440:	4d0c      	ldr	r5, [pc, #48]	; (8014474 <__libc_init_array+0x38>)
 8014442:	4c0d      	ldr	r4, [pc, #52]	; (8014478 <__libc_init_array+0x3c>)
 8014444:	1b64      	subs	r4, r4, r5
 8014446:	10a4      	asrs	r4, r4, #2
 8014448:	42a6      	cmp	r6, r4
 801444a:	d109      	bne.n	8014460 <__libc_init_array+0x24>
 801444c:	2600      	movs	r6, #0
 801444e:	f004 fe9f 	bl	8019190 <_init>
 8014452:	4d0a      	ldr	r5, [pc, #40]	; (801447c <__libc_init_array+0x40>)
 8014454:	4c0a      	ldr	r4, [pc, #40]	; (8014480 <__libc_init_array+0x44>)
 8014456:	1b64      	subs	r4, r4, r5
 8014458:	10a4      	asrs	r4, r4, #2
 801445a:	42a6      	cmp	r6, r4
 801445c:	d105      	bne.n	801446a <__libc_init_array+0x2e>
 801445e:	bd70      	pop	{r4, r5, r6, pc}
 8014460:	00b3      	lsls	r3, r6, #2
 8014462:	58eb      	ldr	r3, [r5, r3]
 8014464:	4798      	blx	r3
 8014466:	3601      	adds	r6, #1
 8014468:	e7ee      	b.n	8014448 <__libc_init_array+0xc>
 801446a:	00b3      	lsls	r3, r6, #2
 801446c:	58eb      	ldr	r3, [r5, r3]
 801446e:	4798      	blx	r3
 8014470:	3601      	adds	r6, #1
 8014472:	e7f2      	b.n	801445a <__libc_init_array+0x1e>
 8014474:	0801c5ac 	.word	0x0801c5ac
 8014478:	0801c5ac 	.word	0x0801c5ac
 801447c:	0801c5ac 	.word	0x0801c5ac
 8014480:	0801c5b4 	.word	0x0801c5b4

08014484 <__locale_ctype_ptr_l>:
 8014484:	30ec      	adds	r0, #236	; 0xec
 8014486:	6800      	ldr	r0, [r0, #0]
 8014488:	4770      	bx	lr
	...

0801448c <__locale_ctype_ptr>:
 801448c:	4b04      	ldr	r3, [pc, #16]	; (80144a0 <__locale_ctype_ptr+0x14>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014492:	2b00      	cmp	r3, #0
 8014494:	d100      	bne.n	8014498 <__locale_ctype_ptr+0xc>
 8014496:	4b03      	ldr	r3, [pc, #12]	; (80144a4 <__locale_ctype_ptr+0x18>)
 8014498:	33ec      	adds	r3, #236	; 0xec
 801449a:	6818      	ldr	r0, [r3, #0]
 801449c:	4770      	bx	lr
 801449e:	46c0      	nop			; (mov r8, r8)
 80144a0:	20000118 	.word	0x20000118
 80144a4:	20000548 	.word	0x20000548

080144a8 <malloc>:
 80144a8:	b510      	push	{r4, lr}
 80144aa:	4b03      	ldr	r3, [pc, #12]	; (80144b8 <malloc+0x10>)
 80144ac:	0001      	movs	r1, r0
 80144ae:	6818      	ldr	r0, [r3, #0]
 80144b0:	f000 f80e 	bl	80144d0 <_malloc_r>
 80144b4:	bd10      	pop	{r4, pc}
 80144b6:	46c0      	nop			; (mov r8, r8)
 80144b8:	20000118 	.word	0x20000118

080144bc <free>:
 80144bc:	b510      	push	{r4, lr}
 80144be:	4b03      	ldr	r3, [pc, #12]	; (80144cc <free+0x10>)
 80144c0:	0001      	movs	r1, r0
 80144c2:	6818      	ldr	r0, [r3, #0]
 80144c4:	f003 fd42 	bl	8017f4c <_free_r>
 80144c8:	bd10      	pop	{r4, pc}
 80144ca:	46c0      	nop			; (mov r8, r8)
 80144cc:	20000118 	.word	0x20000118

080144d0 <_malloc_r>:
 80144d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144d2:	000d      	movs	r5, r1
 80144d4:	b085      	sub	sp, #20
 80144d6:	350b      	adds	r5, #11
 80144d8:	9001      	str	r0, [sp, #4]
 80144da:	2d16      	cmp	r5, #22
 80144dc:	d908      	bls.n	80144f0 <_malloc_r+0x20>
 80144de:	2307      	movs	r3, #7
 80144e0:	439d      	bics	r5, r3
 80144e2:	d506      	bpl.n	80144f2 <_malloc_r+0x22>
 80144e4:	230c      	movs	r3, #12
 80144e6:	9a01      	ldr	r2, [sp, #4]
 80144e8:	6013      	str	r3, [r2, #0]
 80144ea:	2000      	movs	r0, #0
 80144ec:	b005      	add	sp, #20
 80144ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f0:	2510      	movs	r5, #16
 80144f2:	428d      	cmp	r5, r1
 80144f4:	d3f6      	bcc.n	80144e4 <_malloc_r+0x14>
 80144f6:	9801      	ldr	r0, [sp, #4]
 80144f8:	f000 fa34 	bl	8014964 <__malloc_lock>
 80144fc:	23f8      	movs	r3, #248	; 0xf8
 80144fe:	33ff      	adds	r3, #255	; 0xff
 8014500:	4ac4      	ldr	r2, [pc, #784]	; (8014814 <_malloc_r+0x344>)
 8014502:	429d      	cmp	r5, r3
 8014504:	d820      	bhi.n	8014548 <_malloc_r+0x78>
 8014506:	0029      	movs	r1, r5
 8014508:	3108      	adds	r1, #8
 801450a:	1851      	adds	r1, r2, r1
 801450c:	0008      	movs	r0, r1
 801450e:	684c      	ldr	r4, [r1, #4]
 8014510:	3808      	subs	r0, #8
 8014512:	08eb      	lsrs	r3, r5, #3
 8014514:	4284      	cmp	r4, r0
 8014516:	d104      	bne.n	8014522 <_malloc_r+0x52>
 8014518:	68cc      	ldr	r4, [r1, #12]
 801451a:	3302      	adds	r3, #2
 801451c:	469c      	mov	ip, r3
 801451e:	42a1      	cmp	r1, r4
 8014520:	d02a      	beq.n	8014578 <_malloc_r+0xa8>
 8014522:	2303      	movs	r3, #3
 8014524:	6862      	ldr	r2, [r4, #4]
 8014526:	68a1      	ldr	r1, [r4, #8]
 8014528:	439a      	bics	r2, r3
 801452a:	0013      	movs	r3, r2
 801452c:	68e2      	ldr	r2, [r4, #12]
 801452e:	18e3      	adds	r3, r4, r3
 8014530:	60ca      	str	r2, [r1, #12]
 8014532:	6091      	str	r1, [r2, #8]
 8014534:	2201      	movs	r2, #1
 8014536:	6859      	ldr	r1, [r3, #4]
 8014538:	430a      	orrs	r2, r1
 801453a:	605a      	str	r2, [r3, #4]
 801453c:	9801      	ldr	r0, [sp, #4]
 801453e:	f000 fa19 	bl	8014974 <__malloc_unlock>
 8014542:	0020      	movs	r0, r4
 8014544:	3008      	adds	r0, #8
 8014546:	e7d1      	b.n	80144ec <_malloc_r+0x1c>
 8014548:	0a69      	lsrs	r1, r5, #9
 801454a:	233f      	movs	r3, #63	; 0x3f
 801454c:	2900      	cmp	r1, #0
 801454e:	d003      	beq.n	8014558 <_malloc_r+0x88>
 8014550:	2904      	cmp	r1, #4
 8014552:	d828      	bhi.n	80145a6 <_malloc_r+0xd6>
 8014554:	09ab      	lsrs	r3, r5, #6
 8014556:	3338      	adds	r3, #56	; 0x38
 8014558:	2103      	movs	r1, #3
 801455a:	468c      	mov	ip, r1
 801455c:	00d8      	lsls	r0, r3, #3
 801455e:	1880      	adds	r0, r0, r2
 8014560:	68c4      	ldr	r4, [r0, #12]
 8014562:	4284      	cmp	r4, r0
 8014564:	d006      	beq.n	8014574 <_malloc_r+0xa4>
 8014566:	4666      	mov	r6, ip
 8014568:	6861      	ldr	r1, [r4, #4]
 801456a:	43b1      	bics	r1, r6
 801456c:	1b4f      	subs	r7, r1, r5
 801456e:	2f0f      	cmp	r7, #15
 8014570:	dd31      	ble.n	80145d6 <_malloc_r+0x106>
 8014572:	3b01      	subs	r3, #1
 8014574:	3301      	adds	r3, #1
 8014576:	469c      	mov	ip, r3
 8014578:	6914      	ldr	r4, [r2, #16]
 801457a:	49a7      	ldr	r1, [pc, #668]	; (8014818 <_malloc_r+0x348>)
 801457c:	428c      	cmp	r4, r1
 801457e:	d055      	beq.n	801462c <_malloc_r+0x15c>
 8014580:	2303      	movs	r3, #3
 8014582:	6860      	ldr	r0, [r4, #4]
 8014584:	4398      	bics	r0, r3
 8014586:	0003      	movs	r3, r0
 8014588:	1b46      	subs	r6, r0, r5
 801458a:	2e0f      	cmp	r6, #15
 801458c:	dd31      	ble.n	80145f2 <_malloc_r+0x122>
 801458e:	2701      	movs	r7, #1
 8014590:	1960      	adds	r0, r4, r5
 8014592:	433d      	orrs	r5, r7
 8014594:	4337      	orrs	r7, r6
 8014596:	6065      	str	r5, [r4, #4]
 8014598:	6150      	str	r0, [r2, #20]
 801459a:	6110      	str	r0, [r2, #16]
 801459c:	60c1      	str	r1, [r0, #12]
 801459e:	6081      	str	r1, [r0, #8]
 80145a0:	6047      	str	r7, [r0, #4]
 80145a2:	50e6      	str	r6, [r4, r3]
 80145a4:	e7ca      	b.n	801453c <_malloc_r+0x6c>
 80145a6:	2914      	cmp	r1, #20
 80145a8:	d802      	bhi.n	80145b0 <_malloc_r+0xe0>
 80145aa:	000b      	movs	r3, r1
 80145ac:	335b      	adds	r3, #91	; 0x5b
 80145ae:	e7d3      	b.n	8014558 <_malloc_r+0x88>
 80145b0:	2954      	cmp	r1, #84	; 0x54
 80145b2:	d802      	bhi.n	80145ba <_malloc_r+0xea>
 80145b4:	0b2b      	lsrs	r3, r5, #12
 80145b6:	336e      	adds	r3, #110	; 0x6e
 80145b8:	e7ce      	b.n	8014558 <_malloc_r+0x88>
 80145ba:	23aa      	movs	r3, #170	; 0xaa
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	4299      	cmp	r1, r3
 80145c0:	d802      	bhi.n	80145c8 <_malloc_r+0xf8>
 80145c2:	0beb      	lsrs	r3, r5, #15
 80145c4:	3377      	adds	r3, #119	; 0x77
 80145c6:	e7c7      	b.n	8014558 <_malloc_r+0x88>
 80145c8:	4894      	ldr	r0, [pc, #592]	; (801481c <_malloc_r+0x34c>)
 80145ca:	237e      	movs	r3, #126	; 0x7e
 80145cc:	4281      	cmp	r1, r0
 80145ce:	d8c3      	bhi.n	8014558 <_malloc_r+0x88>
 80145d0:	0cab      	lsrs	r3, r5, #18
 80145d2:	337c      	adds	r3, #124	; 0x7c
 80145d4:	e7c0      	b.n	8014558 <_malloc_r+0x88>
 80145d6:	68e6      	ldr	r6, [r4, #12]
 80145d8:	2f00      	cmp	r7, #0
 80145da:	db08      	blt.n	80145ee <_malloc_r+0x11e>
 80145dc:	68a3      	ldr	r3, [r4, #8]
 80145de:	1861      	adds	r1, r4, r1
 80145e0:	60de      	str	r6, [r3, #12]
 80145e2:	60b3      	str	r3, [r6, #8]
 80145e4:	2301      	movs	r3, #1
 80145e6:	684a      	ldr	r2, [r1, #4]
 80145e8:	4313      	orrs	r3, r2
 80145ea:	604b      	str	r3, [r1, #4]
 80145ec:	e7a6      	b.n	801453c <_malloc_r+0x6c>
 80145ee:	0034      	movs	r4, r6
 80145f0:	e7b7      	b.n	8014562 <_malloc_r+0x92>
 80145f2:	6151      	str	r1, [r2, #20]
 80145f4:	6111      	str	r1, [r2, #16]
 80145f6:	2e00      	cmp	r6, #0
 80145f8:	db05      	blt.n	8014606 <_malloc_r+0x136>
 80145fa:	2101      	movs	r1, #1
 80145fc:	1823      	adds	r3, r4, r0
 80145fe:	685a      	ldr	r2, [r3, #4]
 8014600:	4311      	orrs	r1, r2
 8014602:	6059      	str	r1, [r3, #4]
 8014604:	e79a      	b.n	801453c <_malloc_r+0x6c>
 8014606:	4986      	ldr	r1, [pc, #536]	; (8014820 <_malloc_r+0x350>)
 8014608:	6857      	ldr	r7, [r2, #4]
 801460a:	4288      	cmp	r0, r1
 801460c:	d900      	bls.n	8014610 <_malloc_r+0x140>
 801460e:	e090      	b.n	8014732 <_malloc_r+0x262>
 8014610:	08c3      	lsrs	r3, r0, #3
 8014612:	39ff      	subs	r1, #255	; 0xff
 8014614:	1098      	asrs	r0, r3, #2
 8014616:	39ff      	subs	r1, #255	; 0xff
 8014618:	4081      	lsls	r1, r0
 801461a:	00db      	lsls	r3, r3, #3
 801461c:	4339      	orrs	r1, r7
 801461e:	6051      	str	r1, [r2, #4]
 8014620:	189a      	adds	r2, r3, r2
 8014622:	6893      	ldr	r3, [r2, #8]
 8014624:	60e2      	str	r2, [r4, #12]
 8014626:	60a3      	str	r3, [r4, #8]
 8014628:	6094      	str	r4, [r2, #8]
 801462a:	60dc      	str	r4, [r3, #12]
 801462c:	4663      	mov	r3, ip
 801462e:	2201      	movs	r2, #1
 8014630:	4978      	ldr	r1, [pc, #480]	; (8014814 <_malloc_r+0x344>)
 8014632:	109b      	asrs	r3, r3, #2
 8014634:	6848      	ldr	r0, [r1, #4]
 8014636:	409a      	lsls	r2, r3
 8014638:	4290      	cmp	r0, r2
 801463a:	d32d      	bcc.n	8014698 <_malloc_r+0x1c8>
 801463c:	4202      	tst	r2, r0
 801463e:	d109      	bne.n	8014654 <_malloc_r+0x184>
 8014640:	2303      	movs	r3, #3
 8014642:	4664      	mov	r4, ip
 8014644:	439c      	bics	r4, r3
 8014646:	0023      	movs	r3, r4
 8014648:	3304      	adds	r3, #4
 801464a:	469c      	mov	ip, r3
 801464c:	0052      	lsls	r2, r2, #1
 801464e:	4202      	tst	r2, r0
 8014650:	d100      	bne.n	8014654 <_malloc_r+0x184>
 8014652:	e0a4      	b.n	801479e <_malloc_r+0x2ce>
 8014654:	4663      	mov	r3, ip
 8014656:	00db      	lsls	r3, r3, #3
 8014658:	18cb      	adds	r3, r1, r3
 801465a:	9303      	str	r3, [sp, #12]
 801465c:	001f      	movs	r7, r3
 801465e:	4663      	mov	r3, ip
 8014660:	9302      	str	r3, [sp, #8]
 8014662:	68fc      	ldr	r4, [r7, #12]
 8014664:	42bc      	cmp	r4, r7
 8014666:	d000      	beq.n	801466a <_malloc_r+0x19a>
 8014668:	e09c      	b.n	80147a4 <_malloc_r+0x2d4>
 801466a:	2003      	movs	r0, #3
 801466c:	9b02      	ldr	r3, [sp, #8]
 801466e:	3708      	adds	r7, #8
 8014670:	3301      	adds	r3, #1
 8014672:	9302      	str	r3, [sp, #8]
 8014674:	4203      	tst	r3, r0
 8014676:	d1f4      	bne.n	8014662 <_malloc_r+0x192>
 8014678:	4663      	mov	r3, ip
 801467a:	2003      	movs	r0, #3
 801467c:	4203      	tst	r3, r0
 801467e:	d000      	beq.n	8014682 <_malloc_r+0x1b2>
 8014680:	e0b3      	b.n	80147ea <_malloc_r+0x31a>
 8014682:	684b      	ldr	r3, [r1, #4]
 8014684:	4393      	bics	r3, r2
 8014686:	604b      	str	r3, [r1, #4]
 8014688:	4b62      	ldr	r3, [pc, #392]	; (8014814 <_malloc_r+0x344>)
 801468a:	0052      	lsls	r2, r2, #1
 801468c:	685b      	ldr	r3, [r3, #4]
 801468e:	4293      	cmp	r3, r2
 8014690:	d302      	bcc.n	8014698 <_malloc_r+0x1c8>
 8014692:	2a00      	cmp	r2, #0
 8014694:	d000      	beq.n	8014698 <_malloc_r+0x1c8>
 8014696:	e0b9      	b.n	801480c <_malloc_r+0x33c>
 8014698:	2303      	movs	r3, #3
 801469a:	688f      	ldr	r7, [r1, #8]
 801469c:	687a      	ldr	r2, [r7, #4]
 801469e:	439a      	bics	r2, r3
 80146a0:	9202      	str	r2, [sp, #8]
 80146a2:	42aa      	cmp	r2, r5
 80146a4:	d303      	bcc.n	80146ae <_malloc_r+0x1de>
 80146a6:	1b52      	subs	r2, r2, r5
 80146a8:	2a0f      	cmp	r2, #15
 80146aa:	dd00      	ble.n	80146ae <_malloc_r+0x1de>
 80146ac:	e116      	b.n	80148dc <_malloc_r+0x40c>
 80146ae:	4b5d      	ldr	r3, [pc, #372]	; (8014824 <_malloc_r+0x354>)
 80146b0:	2008      	movs	r0, #8
 80146b2:	681e      	ldr	r6, [r3, #0]
 80146b4:	f002 fd58 	bl	8017168 <sysconf>
 80146b8:	4b5b      	ldr	r3, [pc, #364]	; (8014828 <_malloc_r+0x358>)
 80146ba:	3610      	adds	r6, #16
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	1976      	adds	r6, r6, r5
 80146c0:	9003      	str	r0, [sp, #12]
 80146c2:	3301      	adds	r3, #1
 80146c4:	d003      	beq.n	80146ce <_malloc_r+0x1fe>
 80146c6:	3e01      	subs	r6, #1
 80146c8:	1836      	adds	r6, r6, r0
 80146ca:	4243      	negs	r3, r0
 80146cc:	401e      	ands	r6, r3
 80146ce:	0031      	movs	r1, r6
 80146d0:	9801      	ldr	r0, [sp, #4]
 80146d2:	f000 fb27 	bl	8014d24 <_sbrk_r>
 80146d6:	0004      	movs	r4, r0
 80146d8:	1c43      	adds	r3, r0, #1
 80146da:	d100      	bne.n	80146de <_malloc_r+0x20e>
 80146dc:	e0d6      	b.n	801488c <_malloc_r+0x3bc>
 80146de:	9b02      	ldr	r3, [sp, #8]
 80146e0:	18fb      	adds	r3, r7, r3
 80146e2:	4283      	cmp	r3, r0
 80146e4:	d903      	bls.n	80146ee <_malloc_r+0x21e>
 80146e6:	4a4b      	ldr	r2, [pc, #300]	; (8014814 <_malloc_r+0x344>)
 80146e8:	4297      	cmp	r7, r2
 80146ea:	d000      	beq.n	80146ee <_malloc_r+0x21e>
 80146ec:	e0ce      	b.n	801488c <_malloc_r+0x3bc>
 80146ee:	494f      	ldr	r1, [pc, #316]	; (801482c <_malloc_r+0x35c>)
 80146f0:	680a      	ldr	r2, [r1, #0]
 80146f2:	18b2      	adds	r2, r6, r2
 80146f4:	600a      	str	r2, [r1, #0]
 80146f6:	9903      	ldr	r1, [sp, #12]
 80146f8:	4694      	mov	ip, r2
 80146fa:	1e48      	subs	r0, r1, #1
 80146fc:	42a3      	cmp	r3, r4
 80146fe:	d000      	beq.n	8014702 <_malloc_r+0x232>
 8014700:	e09a      	b.n	8014838 <_malloc_r+0x368>
 8014702:	4203      	tst	r3, r0
 8014704:	d000      	beq.n	8014708 <_malloc_r+0x238>
 8014706:	e097      	b.n	8014838 <_malloc_r+0x368>
 8014708:	9a02      	ldr	r2, [sp, #8]
 801470a:	4b42      	ldr	r3, [pc, #264]	; (8014814 <_malloc_r+0x344>)
 801470c:	1992      	adds	r2, r2, r6
 801470e:	2601      	movs	r6, #1
 8014710:	689b      	ldr	r3, [r3, #8]
 8014712:	4316      	orrs	r6, r2
 8014714:	605e      	str	r6, [r3, #4]
 8014716:	4b45      	ldr	r3, [pc, #276]	; (801482c <_malloc_r+0x35c>)
 8014718:	4a45      	ldr	r2, [pc, #276]	; (8014830 <_malloc_r+0x360>)
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	6811      	ldr	r1, [r2, #0]
 801471e:	428b      	cmp	r3, r1
 8014720:	d900      	bls.n	8014724 <_malloc_r+0x254>
 8014722:	6013      	str	r3, [r2, #0]
 8014724:	4a43      	ldr	r2, [pc, #268]	; (8014834 <_malloc_r+0x364>)
 8014726:	6811      	ldr	r1, [r2, #0]
 8014728:	428b      	cmp	r3, r1
 801472a:	d800      	bhi.n	801472e <_malloc_r+0x25e>
 801472c:	e0ae      	b.n	801488c <_malloc_r+0x3bc>
 801472e:	6013      	str	r3, [r2, #0]
 8014730:	e0ac      	b.n	801488c <_malloc_r+0x3bc>
 8014732:	0a40      	lsrs	r0, r0, #9
 8014734:	2804      	cmp	r0, #4
 8014736:	d810      	bhi.n	801475a <_malloc_r+0x28a>
 8014738:	0999      	lsrs	r1, r3, #6
 801473a:	3138      	adds	r1, #56	; 0x38
 801473c:	00ce      	lsls	r6, r1, #3
 801473e:	18b6      	adds	r6, r6, r2
 8014740:	68b0      	ldr	r0, [r6, #8]
 8014742:	4286      	cmp	r6, r0
 8014744:	d124      	bne.n	8014790 <_malloc_r+0x2c0>
 8014746:	2301      	movs	r3, #1
 8014748:	1089      	asrs	r1, r1, #2
 801474a:	408b      	lsls	r3, r1
 801474c:	433b      	orrs	r3, r7
 801474e:	6053      	str	r3, [r2, #4]
 8014750:	60e6      	str	r6, [r4, #12]
 8014752:	60a0      	str	r0, [r4, #8]
 8014754:	60b4      	str	r4, [r6, #8]
 8014756:	60c4      	str	r4, [r0, #12]
 8014758:	e768      	b.n	801462c <_malloc_r+0x15c>
 801475a:	2814      	cmp	r0, #20
 801475c:	d802      	bhi.n	8014764 <_malloc_r+0x294>
 801475e:	0001      	movs	r1, r0
 8014760:	315b      	adds	r1, #91	; 0x5b
 8014762:	e7eb      	b.n	801473c <_malloc_r+0x26c>
 8014764:	2854      	cmp	r0, #84	; 0x54
 8014766:	d802      	bhi.n	801476e <_malloc_r+0x29e>
 8014768:	0b19      	lsrs	r1, r3, #12
 801476a:	316e      	adds	r1, #110	; 0x6e
 801476c:	e7e6      	b.n	801473c <_malloc_r+0x26c>
 801476e:	21aa      	movs	r1, #170	; 0xaa
 8014770:	0049      	lsls	r1, r1, #1
 8014772:	4288      	cmp	r0, r1
 8014774:	d802      	bhi.n	801477c <_malloc_r+0x2ac>
 8014776:	0bd9      	lsrs	r1, r3, #15
 8014778:	3177      	adds	r1, #119	; 0x77
 801477a:	e7df      	b.n	801473c <_malloc_r+0x26c>
 801477c:	4e27      	ldr	r6, [pc, #156]	; (801481c <_malloc_r+0x34c>)
 801477e:	217e      	movs	r1, #126	; 0x7e
 8014780:	42b0      	cmp	r0, r6
 8014782:	d8db      	bhi.n	801473c <_malloc_r+0x26c>
 8014784:	0c99      	lsrs	r1, r3, #18
 8014786:	317c      	adds	r1, #124	; 0x7c
 8014788:	e7d8      	b.n	801473c <_malloc_r+0x26c>
 801478a:	6880      	ldr	r0, [r0, #8]
 801478c:	4286      	cmp	r6, r0
 801478e:	d004      	beq.n	801479a <_malloc_r+0x2ca>
 8014790:	2103      	movs	r1, #3
 8014792:	6842      	ldr	r2, [r0, #4]
 8014794:	438a      	bics	r2, r1
 8014796:	429a      	cmp	r2, r3
 8014798:	d8f7      	bhi.n	801478a <_malloc_r+0x2ba>
 801479a:	68c6      	ldr	r6, [r0, #12]
 801479c:	e7d8      	b.n	8014750 <_malloc_r+0x280>
 801479e:	2304      	movs	r3, #4
 80147a0:	449c      	add	ip, r3
 80147a2:	e753      	b.n	801464c <_malloc_r+0x17c>
 80147a4:	2003      	movs	r0, #3
 80147a6:	6863      	ldr	r3, [r4, #4]
 80147a8:	4383      	bics	r3, r0
 80147aa:	1b5e      	subs	r6, r3, r5
 80147ac:	68e0      	ldr	r0, [r4, #12]
 80147ae:	2e0f      	cmp	r6, #15
 80147b0:	dd0e      	ble.n	80147d0 <_malloc_r+0x300>
 80147b2:	2701      	movs	r7, #1
 80147b4:	1962      	adds	r2, r4, r5
 80147b6:	433d      	orrs	r5, r7
 80147b8:	6065      	str	r5, [r4, #4]
 80147ba:	68a5      	ldr	r5, [r4, #8]
 80147bc:	4337      	orrs	r7, r6
 80147be:	60e8      	str	r0, [r5, #12]
 80147c0:	6085      	str	r5, [r0, #8]
 80147c2:	614a      	str	r2, [r1, #20]
 80147c4:	610a      	str	r2, [r1, #16]
 80147c6:	4914      	ldr	r1, [pc, #80]	; (8014818 <_malloc_r+0x348>)
 80147c8:	6057      	str	r7, [r2, #4]
 80147ca:	60d1      	str	r1, [r2, #12]
 80147cc:	6091      	str	r1, [r2, #8]
 80147ce:	e6e8      	b.n	80145a2 <_malloc_r+0xd2>
 80147d0:	2e00      	cmp	r6, #0
 80147d2:	db08      	blt.n	80147e6 <_malloc_r+0x316>
 80147d4:	2201      	movs	r2, #1
 80147d6:	18e3      	adds	r3, r4, r3
 80147d8:	6859      	ldr	r1, [r3, #4]
 80147da:	430a      	orrs	r2, r1
 80147dc:	605a      	str	r2, [r3, #4]
 80147de:	68a3      	ldr	r3, [r4, #8]
 80147e0:	60d8      	str	r0, [r3, #12]
 80147e2:	6083      	str	r3, [r0, #8]
 80147e4:	e6aa      	b.n	801453c <_malloc_r+0x6c>
 80147e6:	0004      	movs	r4, r0
 80147e8:	e73c      	b.n	8014664 <_malloc_r+0x194>
 80147ea:	2301      	movs	r3, #1
 80147ec:	425b      	negs	r3, r3
 80147ee:	449c      	add	ip, r3
 80147f0:	9b03      	ldr	r3, [sp, #12]
 80147f2:	6818      	ldr	r0, [r3, #0]
 80147f4:	3b08      	subs	r3, #8
 80147f6:	9003      	str	r0, [sp, #12]
 80147f8:	4298      	cmp	r0, r3
 80147fa:	d100      	bne.n	80147fe <_malloc_r+0x32e>
 80147fc:	e73c      	b.n	8014678 <_malloc_r+0x1a8>
 80147fe:	e743      	b.n	8014688 <_malloc_r+0x1b8>
 8014800:	2004      	movs	r0, #4
 8014802:	0052      	lsls	r2, r2, #1
 8014804:	4484      	add	ip, r0
 8014806:	421a      	tst	r2, r3
 8014808:	d0fa      	beq.n	8014800 <_malloc_r+0x330>
 801480a:	e723      	b.n	8014654 <_malloc_r+0x184>
 801480c:	9802      	ldr	r0, [sp, #8]
 801480e:	4684      	mov	ip, r0
 8014810:	e7f9      	b.n	8014806 <_malloc_r+0x336>
 8014812:	46c0      	nop			; (mov r8, r8)
 8014814:	200006b4 	.word	0x200006b4
 8014818:	200006bc 	.word	0x200006bc
 801481c:	00000554 	.word	0x00000554
 8014820:	000001ff 	.word	0x000001ff
 8014824:	20006dc8 	.word	0x20006dc8
 8014828:	20000abc 	.word	0x20000abc
 801482c:	20006d98 	.word	0x20006d98
 8014830:	20006dc0 	.word	0x20006dc0
 8014834:	20006dc4 	.word	0x20006dc4
 8014838:	492e      	ldr	r1, [pc, #184]	; (80148f4 <_malloc_r+0x424>)
 801483a:	680a      	ldr	r2, [r1, #0]
 801483c:	3201      	adds	r2, #1
 801483e:	d133      	bne.n	80148a8 <_malloc_r+0x3d8>
 8014840:	600c      	str	r4, [r1, #0]
 8014842:	2307      	movs	r3, #7
 8014844:	4023      	ands	r3, r4
 8014846:	d002      	beq.n	801484e <_malloc_r+0x37e>
 8014848:	2208      	movs	r2, #8
 801484a:	1ad3      	subs	r3, r2, r3
 801484c:	18e4      	adds	r4, r4, r3
 801484e:	9a03      	ldr	r2, [sp, #12]
 8014850:	19a6      	adds	r6, r4, r6
 8014852:	18d3      	adds	r3, r2, r3
 8014854:	4006      	ands	r6, r0
 8014856:	1b9e      	subs	r6, r3, r6
 8014858:	0031      	movs	r1, r6
 801485a:	9801      	ldr	r0, [sp, #4]
 801485c:	f000 fa62 	bl	8014d24 <_sbrk_r>
 8014860:	1c43      	adds	r3, r0, #1
 8014862:	d101      	bne.n	8014868 <_malloc_r+0x398>
 8014864:	0020      	movs	r0, r4
 8014866:	2600      	movs	r6, #0
 8014868:	4a23      	ldr	r2, [pc, #140]	; (80148f8 <_malloc_r+0x428>)
 801486a:	1b00      	subs	r0, r0, r4
 801486c:	6813      	ldr	r3, [r2, #0]
 801486e:	199b      	adds	r3, r3, r6
 8014870:	6013      	str	r3, [r2, #0]
 8014872:	2301      	movs	r3, #1
 8014874:	4a21      	ldr	r2, [pc, #132]	; (80148fc <_malloc_r+0x42c>)
 8014876:	1986      	adds	r6, r0, r6
 8014878:	431e      	orrs	r6, r3
 801487a:	6094      	str	r4, [r2, #8]
 801487c:	6066      	str	r6, [r4, #4]
 801487e:	4297      	cmp	r7, r2
 8014880:	d100      	bne.n	8014884 <_malloc_r+0x3b4>
 8014882:	e748      	b.n	8014716 <_malloc_r+0x246>
 8014884:	9a02      	ldr	r2, [sp, #8]
 8014886:	2a0f      	cmp	r2, #15
 8014888:	d813      	bhi.n	80148b2 <_malloc_r+0x3e2>
 801488a:	6063      	str	r3, [r4, #4]
 801488c:	2203      	movs	r2, #3
 801488e:	4b1b      	ldr	r3, [pc, #108]	; (80148fc <_malloc_r+0x42c>)
 8014890:	689b      	ldr	r3, [r3, #8]
 8014892:	685b      	ldr	r3, [r3, #4]
 8014894:	4393      	bics	r3, r2
 8014896:	1b5a      	subs	r2, r3, r5
 8014898:	42ab      	cmp	r3, r5
 801489a:	d301      	bcc.n	80148a0 <_malloc_r+0x3d0>
 801489c:	2a0f      	cmp	r2, #15
 801489e:	dc1d      	bgt.n	80148dc <_malloc_r+0x40c>
 80148a0:	9801      	ldr	r0, [sp, #4]
 80148a2:	f000 f867 	bl	8014974 <__malloc_unlock>
 80148a6:	e620      	b.n	80144ea <_malloc_r+0x1a>
 80148a8:	1ae3      	subs	r3, r4, r3
 80148aa:	4a13      	ldr	r2, [pc, #76]	; (80148f8 <_malloc_r+0x428>)
 80148ac:	4463      	add	r3, ip
 80148ae:	6013      	str	r3, [r2, #0]
 80148b0:	e7c7      	b.n	8014842 <_malloc_r+0x372>
 80148b2:	2207      	movs	r2, #7
 80148b4:	9e02      	ldr	r6, [sp, #8]
 80148b6:	3e0c      	subs	r6, #12
 80148b8:	4396      	bics	r6, r2
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	4013      	ands	r3, r2
 80148be:	2205      	movs	r2, #5
 80148c0:	4333      	orrs	r3, r6
 80148c2:	607b      	str	r3, [r7, #4]
 80148c4:	19bb      	adds	r3, r7, r6
 80148c6:	605a      	str	r2, [r3, #4]
 80148c8:	609a      	str	r2, [r3, #8]
 80148ca:	2e0f      	cmp	r6, #15
 80148cc:	d800      	bhi.n	80148d0 <_malloc_r+0x400>
 80148ce:	e722      	b.n	8014716 <_malloc_r+0x246>
 80148d0:	0039      	movs	r1, r7
 80148d2:	9801      	ldr	r0, [sp, #4]
 80148d4:	3108      	adds	r1, #8
 80148d6:	f003 fb39 	bl	8017f4c <_free_r>
 80148da:	e71c      	b.n	8014716 <_malloc_r+0x246>
 80148dc:	2301      	movs	r3, #1
 80148de:	0018      	movs	r0, r3
 80148e0:	4906      	ldr	r1, [pc, #24]	; (80148fc <_malloc_r+0x42c>)
 80148e2:	4328      	orrs	r0, r5
 80148e4:	688c      	ldr	r4, [r1, #8]
 80148e6:	4313      	orrs	r3, r2
 80148e8:	1965      	adds	r5, r4, r5
 80148ea:	6060      	str	r0, [r4, #4]
 80148ec:	608d      	str	r5, [r1, #8]
 80148ee:	606b      	str	r3, [r5, #4]
 80148f0:	e624      	b.n	801453c <_malloc_r+0x6c>
 80148f2:	46c0      	nop			; (mov r8, r8)
 80148f4:	20000abc 	.word	0x20000abc
 80148f8:	20006d98 	.word	0x20006d98
 80148fc:	200006b4 	.word	0x200006b4

08014900 <__ascii_mbtowc>:
 8014900:	b082      	sub	sp, #8
 8014902:	2900      	cmp	r1, #0
 8014904:	d100      	bne.n	8014908 <__ascii_mbtowc+0x8>
 8014906:	a901      	add	r1, sp, #4
 8014908:	1e10      	subs	r0, r2, #0
 801490a:	d006      	beq.n	801491a <__ascii_mbtowc+0x1a>
 801490c:	2b00      	cmp	r3, #0
 801490e:	d006      	beq.n	801491e <__ascii_mbtowc+0x1e>
 8014910:	7813      	ldrb	r3, [r2, #0]
 8014912:	600b      	str	r3, [r1, #0]
 8014914:	7810      	ldrb	r0, [r2, #0]
 8014916:	1e43      	subs	r3, r0, #1
 8014918:	4198      	sbcs	r0, r3
 801491a:	b002      	add	sp, #8
 801491c:	4770      	bx	lr
 801491e:	2002      	movs	r0, #2
 8014920:	4240      	negs	r0, r0
 8014922:	e7fa      	b.n	801491a <__ascii_mbtowc+0x1a>

08014924 <memcmp>:
 8014924:	b530      	push	{r4, r5, lr}
 8014926:	2400      	movs	r4, #0
 8014928:	42a2      	cmp	r2, r4
 801492a:	d101      	bne.n	8014930 <memcmp+0xc>
 801492c:	2000      	movs	r0, #0
 801492e:	e005      	b.n	801493c <memcmp+0x18>
 8014930:	5d03      	ldrb	r3, [r0, r4]
 8014932:	1c65      	adds	r5, r4, #1
 8014934:	5d0c      	ldrb	r4, [r1, r4]
 8014936:	42a3      	cmp	r3, r4
 8014938:	d001      	beq.n	801493e <memcmp+0x1a>
 801493a:	1b18      	subs	r0, r3, r4
 801493c:	bd30      	pop	{r4, r5, pc}
 801493e:	002c      	movs	r4, r5
 8014940:	e7f2      	b.n	8014928 <memcmp+0x4>

08014942 <memcpy>:
 8014942:	2300      	movs	r3, #0
 8014944:	b510      	push	{r4, lr}
 8014946:	429a      	cmp	r2, r3
 8014948:	d100      	bne.n	801494c <memcpy+0xa>
 801494a:	bd10      	pop	{r4, pc}
 801494c:	5ccc      	ldrb	r4, [r1, r3]
 801494e:	54c4      	strb	r4, [r0, r3]
 8014950:	3301      	adds	r3, #1
 8014952:	e7f8      	b.n	8014946 <memcpy+0x4>

08014954 <memset>:
 8014954:	0003      	movs	r3, r0
 8014956:	1812      	adds	r2, r2, r0
 8014958:	4293      	cmp	r3, r2
 801495a:	d100      	bne.n	801495e <memset+0xa>
 801495c:	4770      	bx	lr
 801495e:	7019      	strb	r1, [r3, #0]
 8014960:	3301      	adds	r3, #1
 8014962:	e7f9      	b.n	8014958 <memset+0x4>

08014964 <__malloc_lock>:
 8014964:	b510      	push	{r4, lr}
 8014966:	4802      	ldr	r0, [pc, #8]	; (8014970 <__malloc_lock+0xc>)
 8014968:	f003 fee4 	bl	8018734 <__retarget_lock_acquire_recursive>
 801496c:	bd10      	pop	{r4, pc}
 801496e:	46c0      	nop			; (mov r8, r8)
 8014970:	200073f4 	.word	0x200073f4

08014974 <__malloc_unlock>:
 8014974:	b510      	push	{r4, lr}
 8014976:	4802      	ldr	r0, [pc, #8]	; (8014980 <__malloc_unlock+0xc>)
 8014978:	f003 fedd 	bl	8018736 <__retarget_lock_release_recursive>
 801497c:	bd10      	pop	{r4, pc}
 801497e:	46c0      	nop			; (mov r8, r8)
 8014980:	200073f4 	.word	0x200073f4

08014984 <rand>:
 8014984:	4b09      	ldr	r3, [pc, #36]	; (80149ac <rand+0x28>)
 8014986:	b510      	push	{r4, lr}
 8014988:	681c      	ldr	r4, [r3, #0]
 801498a:	4a09      	ldr	r2, [pc, #36]	; (80149b0 <rand+0x2c>)
 801498c:	34a8      	adds	r4, #168	; 0xa8
 801498e:	6820      	ldr	r0, [r4, #0]
 8014990:	6861      	ldr	r1, [r4, #4]
 8014992:	4b08      	ldr	r3, [pc, #32]	; (80149b4 <rand+0x30>)
 8014994:	f7eb fdea 	bl	800056c <__aeabi_lmul>
 8014998:	2201      	movs	r2, #1
 801499a:	2300      	movs	r3, #0
 801499c:	1880      	adds	r0, r0, r2
 801499e:	4159      	adcs	r1, r3
 80149a0:	6020      	str	r0, [r4, #0]
 80149a2:	6061      	str	r1, [r4, #4]
 80149a4:	0048      	lsls	r0, r1, #1
 80149a6:	0840      	lsrs	r0, r0, #1
 80149a8:	bd10      	pop	{r4, pc}
 80149aa:	46c0      	nop			; (mov r8, r8)
 80149ac:	20000118 	.word	0x20000118
 80149b0:	4c957f2d 	.word	0x4c957f2d
 80149b4:	5851f42d 	.word	0x5851f42d

080149b8 <realloc>:
 80149b8:	b510      	push	{r4, lr}
 80149ba:	4b03      	ldr	r3, [pc, #12]	; (80149c8 <realloc+0x10>)
 80149bc:	000a      	movs	r2, r1
 80149be:	0001      	movs	r1, r0
 80149c0:	6818      	ldr	r0, [r3, #0]
 80149c2:	f000 f803 	bl	80149cc <_realloc_r>
 80149c6:	bd10      	pop	{r4, pc}
 80149c8:	20000118 	.word	0x20000118

080149cc <_realloc_r>:
 80149cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149ce:	b087      	sub	sp, #28
 80149d0:	9003      	str	r0, [sp, #12]
 80149d2:	1e0c      	subs	r4, r1, #0
 80149d4:	9205      	str	r2, [sp, #20]
 80149d6:	d106      	bne.n	80149e6 <_realloc_r+0x1a>
 80149d8:	0011      	movs	r1, r2
 80149da:	f7ff fd79 	bl	80144d0 <_malloc_r>
 80149de:	0007      	movs	r7, r0
 80149e0:	0038      	movs	r0, r7
 80149e2:	b007      	add	sp, #28
 80149e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149e6:	9803      	ldr	r0, [sp, #12]
 80149e8:	f7ff ffbc 	bl	8014964 <__malloc_lock>
 80149ec:	0023      	movs	r3, r4
 80149ee:	3b08      	subs	r3, #8
 80149f0:	685f      	ldr	r7, [r3, #4]
 80149f2:	9302      	str	r3, [sp, #8]
 80149f4:	003a      	movs	r2, r7
 80149f6:	2303      	movs	r3, #3
 80149f8:	9e05      	ldr	r6, [sp, #20]
 80149fa:	439a      	bics	r2, r3
 80149fc:	360b      	adds	r6, #11
 80149fe:	9204      	str	r2, [sp, #16]
 8014a00:	2e16      	cmp	r6, #22
 8014a02:	d908      	bls.n	8014a16 <_realloc_r+0x4a>
 8014a04:	3304      	adds	r3, #4
 8014a06:	439e      	bics	r6, r3
 8014a08:	9601      	str	r6, [sp, #4]
 8014a0a:	d506      	bpl.n	8014a1a <_realloc_r+0x4e>
 8014a0c:	230c      	movs	r3, #12
 8014a0e:	9a03      	ldr	r2, [sp, #12]
 8014a10:	2700      	movs	r7, #0
 8014a12:	6013      	str	r3, [r2, #0]
 8014a14:	e7e4      	b.n	80149e0 <_realloc_r+0x14>
 8014a16:	2310      	movs	r3, #16
 8014a18:	9301      	str	r3, [sp, #4]
 8014a1a:	9b01      	ldr	r3, [sp, #4]
 8014a1c:	9a05      	ldr	r2, [sp, #20]
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	d3f4      	bcc.n	8014a0c <_realloc_r+0x40>
 8014a22:	9b01      	ldr	r3, [sp, #4]
 8014a24:	9a04      	ldr	r2, [sp, #16]
 8014a26:	4293      	cmp	r3, r2
 8014a28:	dc00      	bgt.n	8014a2c <_realloc_r+0x60>
 8014a2a:	e16f      	b.n	8014d0c <_realloc_r+0x340>
 8014a2c:	9b02      	ldr	r3, [sp, #8]
 8014a2e:	48bc      	ldr	r0, [pc, #752]	; (8014d20 <_realloc_r+0x354>)
 8014a30:	189b      	adds	r3, r3, r2
 8014a32:	6882      	ldr	r2, [r0, #8]
 8014a34:	4694      	mov	ip, r2
 8014a36:	685a      	ldr	r2, [r3, #4]
 8014a38:	459c      	cmp	ip, r3
 8014a3a:	d006      	beq.n	8014a4a <_realloc_r+0x7e>
 8014a3c:	2501      	movs	r5, #1
 8014a3e:	0011      	movs	r1, r2
 8014a40:	43a9      	bics	r1, r5
 8014a42:	1859      	adds	r1, r3, r1
 8014a44:	6849      	ldr	r1, [r1, #4]
 8014a46:	4229      	tst	r1, r5
 8014a48:	d146      	bne.n	8014ad8 <_realloc_r+0x10c>
 8014a4a:	2103      	movs	r1, #3
 8014a4c:	438a      	bics	r2, r1
 8014a4e:	9904      	ldr	r1, [sp, #16]
 8014a50:	188e      	adds	r6, r1, r2
 8014a52:	9901      	ldr	r1, [sp, #4]
 8014a54:	459c      	cmp	ip, r3
 8014a56:	d117      	bne.n	8014a88 <_realloc_r+0xbc>
 8014a58:	3110      	adds	r1, #16
 8014a5a:	42b1      	cmp	r1, r6
 8014a5c:	dc3e      	bgt.n	8014adc <_realloc_r+0x110>
 8014a5e:	9901      	ldr	r1, [sp, #4]
 8014a60:	9b02      	ldr	r3, [sp, #8]
 8014a62:	468c      	mov	ip, r1
 8014a64:	4463      	add	r3, ip
 8014a66:	6083      	str	r3, [r0, #8]
 8014a68:	001a      	movs	r2, r3
 8014a6a:	1a73      	subs	r3, r6, r1
 8014a6c:	2601      	movs	r6, #1
 8014a6e:	4333      	orrs	r3, r6
 8014a70:	6053      	str	r3, [r2, #4]
 8014a72:	0023      	movs	r3, r4
 8014a74:	3b08      	subs	r3, #8
 8014a76:	685a      	ldr	r2, [r3, #4]
 8014a78:	9803      	ldr	r0, [sp, #12]
 8014a7a:	4016      	ands	r6, r2
 8014a7c:	430e      	orrs	r6, r1
 8014a7e:	605e      	str	r6, [r3, #4]
 8014a80:	f7ff ff78 	bl	8014974 <__malloc_unlock>
 8014a84:	0027      	movs	r7, r4
 8014a86:	e7ab      	b.n	80149e0 <_realloc_r+0x14>
 8014a88:	42b1      	cmp	r1, r6
 8014a8a:	dc27      	bgt.n	8014adc <_realloc_r+0x110>
 8014a8c:	68da      	ldr	r2, [r3, #12]
 8014a8e:	689b      	ldr	r3, [r3, #8]
 8014a90:	60da      	str	r2, [r3, #12]
 8014a92:	6093      	str	r3, [r2, #8]
 8014a94:	9b01      	ldr	r3, [sp, #4]
 8014a96:	9a02      	ldr	r2, [sp, #8]
 8014a98:	1af4      	subs	r4, r6, r3
 8014a9a:	9b02      	ldr	r3, [sp, #8]
 8014a9c:	1992      	adds	r2, r2, r6
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	9304      	str	r3, [sp, #16]
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	9804      	ldr	r0, [sp, #16]
 8014aa6:	4018      	ands	r0, r3
 8014aa8:	2c0f      	cmp	r4, #15
 8014aaa:	d800      	bhi.n	8014aae <_realloc_r+0xe2>
 8014aac:	e130      	b.n	8014d10 <_realloc_r+0x344>
 8014aae:	9d01      	ldr	r5, [sp, #4]
 8014ab0:	9902      	ldr	r1, [sp, #8]
 8014ab2:	4328      	orrs	r0, r5
 8014ab4:	1949      	adds	r1, r1, r5
 8014ab6:	9d02      	ldr	r5, [sp, #8]
 8014ab8:	431c      	orrs	r4, r3
 8014aba:	6068      	str	r0, [r5, #4]
 8014abc:	604c      	str	r4, [r1, #4]
 8014abe:	6850      	ldr	r0, [r2, #4]
 8014ac0:	3108      	adds	r1, #8
 8014ac2:	4303      	orrs	r3, r0
 8014ac4:	6053      	str	r3, [r2, #4]
 8014ac6:	9803      	ldr	r0, [sp, #12]
 8014ac8:	f003 fa40 	bl	8017f4c <_free_r>
 8014acc:	9803      	ldr	r0, [sp, #12]
 8014ace:	f7ff ff51 	bl	8014974 <__malloc_unlock>
 8014ad2:	9f02      	ldr	r7, [sp, #8]
 8014ad4:	3708      	adds	r7, #8
 8014ad6:	e783      	b.n	80149e0 <_realloc_r+0x14>
 8014ad8:	2200      	movs	r2, #0
 8014ada:	0013      	movs	r3, r2
 8014adc:	07f9      	lsls	r1, r7, #31
 8014ade:	d500      	bpl.n	8014ae2 <_realloc_r+0x116>
 8014ae0:	e0c6      	b.n	8014c70 <_realloc_r+0x2a4>
 8014ae2:	0021      	movs	r1, r4
 8014ae4:	3908      	subs	r1, #8
 8014ae6:	680d      	ldr	r5, [r1, #0]
 8014ae8:	9902      	ldr	r1, [sp, #8]
 8014aea:	1b4d      	subs	r5, r1, r5
 8014aec:	2103      	movs	r1, #3
 8014aee:	686f      	ldr	r7, [r5, #4]
 8014af0:	438f      	bics	r7, r1
 8014af2:	9904      	ldr	r1, [sp, #16]
 8014af4:	187f      	adds	r7, r7, r1
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d100      	bne.n	8014afc <_realloc_r+0x130>
 8014afa:	e084      	b.n	8014c06 <_realloc_r+0x23a>
 8014afc:	19d6      	adds	r6, r2, r7
 8014afe:	459c      	cmp	ip, r3
 8014b00:	d148      	bne.n	8014b94 <_realloc_r+0x1c8>
 8014b02:	9b01      	ldr	r3, [sp, #4]
 8014b04:	3310      	adds	r3, #16
 8014b06:	42b3      	cmp	r3, r6
 8014b08:	dc7d      	bgt.n	8014c06 <_realloc_r+0x23a>
 8014b0a:	68aa      	ldr	r2, [r5, #8]
 8014b0c:	68eb      	ldr	r3, [r5, #12]
 8014b0e:	002f      	movs	r7, r5
 8014b10:	60d3      	str	r3, [r2, #12]
 8014b12:	609a      	str	r2, [r3, #8]
 8014b14:	000a      	movs	r2, r1
 8014b16:	3a04      	subs	r2, #4
 8014b18:	3708      	adds	r7, #8
 8014b1a:	2a24      	cmp	r2, #36	; 0x24
 8014b1c:	d835      	bhi.n	8014b8a <_realloc_r+0x1be>
 8014b1e:	003b      	movs	r3, r7
 8014b20:	2a13      	cmp	r2, #19
 8014b22:	d908      	bls.n	8014b36 <_realloc_r+0x16a>
 8014b24:	6823      	ldr	r3, [r4, #0]
 8014b26:	60ab      	str	r3, [r5, #8]
 8014b28:	6863      	ldr	r3, [r4, #4]
 8014b2a:	60eb      	str	r3, [r5, #12]
 8014b2c:	2a1b      	cmp	r2, #27
 8014b2e:	d81a      	bhi.n	8014b66 <_realloc_r+0x19a>
 8014b30:	002b      	movs	r3, r5
 8014b32:	3408      	adds	r4, #8
 8014b34:	3310      	adds	r3, #16
 8014b36:	6822      	ldr	r2, [r4, #0]
 8014b38:	601a      	str	r2, [r3, #0]
 8014b3a:	6862      	ldr	r2, [r4, #4]
 8014b3c:	605a      	str	r2, [r3, #4]
 8014b3e:	68a2      	ldr	r2, [r4, #8]
 8014b40:	609a      	str	r2, [r3, #8]
 8014b42:	9b01      	ldr	r3, [sp, #4]
 8014b44:	18ea      	adds	r2, r5, r3
 8014b46:	4b76      	ldr	r3, [pc, #472]	; (8014d20 <_realloc_r+0x354>)
 8014b48:	609a      	str	r2, [r3, #8]
 8014b4a:	9b01      	ldr	r3, [sp, #4]
 8014b4c:	1af3      	subs	r3, r6, r3
 8014b4e:	2601      	movs	r6, #1
 8014b50:	4333      	orrs	r3, r6
 8014b52:	6053      	str	r3, [r2, #4]
 8014b54:	686b      	ldr	r3, [r5, #4]
 8014b56:	401e      	ands	r6, r3
 8014b58:	9b01      	ldr	r3, [sp, #4]
 8014b5a:	431e      	orrs	r6, r3
 8014b5c:	606e      	str	r6, [r5, #4]
 8014b5e:	9803      	ldr	r0, [sp, #12]
 8014b60:	f7ff ff08 	bl	8014974 <__malloc_unlock>
 8014b64:	e73c      	b.n	80149e0 <_realloc_r+0x14>
 8014b66:	68a3      	ldr	r3, [r4, #8]
 8014b68:	612b      	str	r3, [r5, #16]
 8014b6a:	68e3      	ldr	r3, [r4, #12]
 8014b6c:	616b      	str	r3, [r5, #20]
 8014b6e:	2a24      	cmp	r2, #36	; 0x24
 8014b70:	d003      	beq.n	8014b7a <_realloc_r+0x1ae>
 8014b72:	002b      	movs	r3, r5
 8014b74:	3410      	adds	r4, #16
 8014b76:	3318      	adds	r3, #24
 8014b78:	e7dd      	b.n	8014b36 <_realloc_r+0x16a>
 8014b7a:	6923      	ldr	r3, [r4, #16]
 8014b7c:	61ab      	str	r3, [r5, #24]
 8014b7e:	002b      	movs	r3, r5
 8014b80:	6962      	ldr	r2, [r4, #20]
 8014b82:	3320      	adds	r3, #32
 8014b84:	61ea      	str	r2, [r5, #28]
 8014b86:	3418      	adds	r4, #24
 8014b88:	e7d5      	b.n	8014b36 <_realloc_r+0x16a>
 8014b8a:	0021      	movs	r1, r4
 8014b8c:	0038      	movs	r0, r7
 8014b8e:	f003 fdde 	bl	801874e <memmove>
 8014b92:	e7d6      	b.n	8014b42 <_realloc_r+0x176>
 8014b94:	9a01      	ldr	r2, [sp, #4]
 8014b96:	42b2      	cmp	r2, r6
 8014b98:	dc35      	bgt.n	8014c06 <_realloc_r+0x23a>
 8014b9a:	0028      	movs	r0, r5
 8014b9c:	68da      	ldr	r2, [r3, #12]
 8014b9e:	689b      	ldr	r3, [r3, #8]
 8014ba0:	3008      	adds	r0, #8
 8014ba2:	60da      	str	r2, [r3, #12]
 8014ba4:	6093      	str	r3, [r2, #8]
 8014ba6:	68aa      	ldr	r2, [r5, #8]
 8014ba8:	68eb      	ldr	r3, [r5, #12]
 8014baa:	60d3      	str	r3, [r2, #12]
 8014bac:	609a      	str	r2, [r3, #8]
 8014bae:	9a04      	ldr	r2, [sp, #16]
 8014bb0:	3a04      	subs	r2, #4
 8014bb2:	2a24      	cmp	r2, #36	; 0x24
 8014bb4:	d823      	bhi.n	8014bfe <_realloc_r+0x232>
 8014bb6:	2a13      	cmp	r2, #19
 8014bb8:	d907      	bls.n	8014bca <_realloc_r+0x1fe>
 8014bba:	6823      	ldr	r3, [r4, #0]
 8014bbc:	60ab      	str	r3, [r5, #8]
 8014bbe:	6863      	ldr	r3, [r4, #4]
 8014bc0:	60eb      	str	r3, [r5, #12]
 8014bc2:	2a1b      	cmp	r2, #27
 8014bc4:	d809      	bhi.n	8014bda <_realloc_r+0x20e>
 8014bc6:	3408      	adds	r4, #8
 8014bc8:	3008      	adds	r0, #8
 8014bca:	6823      	ldr	r3, [r4, #0]
 8014bcc:	6003      	str	r3, [r0, #0]
 8014bce:	6863      	ldr	r3, [r4, #4]
 8014bd0:	6043      	str	r3, [r0, #4]
 8014bd2:	68a3      	ldr	r3, [r4, #8]
 8014bd4:	6083      	str	r3, [r0, #8]
 8014bd6:	9502      	str	r5, [sp, #8]
 8014bd8:	e75c      	b.n	8014a94 <_realloc_r+0xc8>
 8014bda:	68a3      	ldr	r3, [r4, #8]
 8014bdc:	612b      	str	r3, [r5, #16]
 8014bde:	68e3      	ldr	r3, [r4, #12]
 8014be0:	616b      	str	r3, [r5, #20]
 8014be2:	2a24      	cmp	r2, #36	; 0x24
 8014be4:	d003      	beq.n	8014bee <_realloc_r+0x222>
 8014be6:	0028      	movs	r0, r5
 8014be8:	3410      	adds	r4, #16
 8014bea:	3018      	adds	r0, #24
 8014bec:	e7ed      	b.n	8014bca <_realloc_r+0x1fe>
 8014bee:	0028      	movs	r0, r5
 8014bf0:	6923      	ldr	r3, [r4, #16]
 8014bf2:	3020      	adds	r0, #32
 8014bf4:	61ab      	str	r3, [r5, #24]
 8014bf6:	6963      	ldr	r3, [r4, #20]
 8014bf8:	3418      	adds	r4, #24
 8014bfa:	61eb      	str	r3, [r5, #28]
 8014bfc:	e7e5      	b.n	8014bca <_realloc_r+0x1fe>
 8014bfe:	0021      	movs	r1, r4
 8014c00:	f003 fda5 	bl	801874e <memmove>
 8014c04:	e7e7      	b.n	8014bd6 <_realloc_r+0x20a>
 8014c06:	9b01      	ldr	r3, [sp, #4]
 8014c08:	42bb      	cmp	r3, r7
 8014c0a:	dc31      	bgt.n	8014c70 <_realloc_r+0x2a4>
 8014c0c:	0028      	movs	r0, r5
 8014c0e:	68aa      	ldr	r2, [r5, #8]
 8014c10:	68eb      	ldr	r3, [r5, #12]
 8014c12:	3008      	adds	r0, #8
 8014c14:	60d3      	str	r3, [r2, #12]
 8014c16:	609a      	str	r2, [r3, #8]
 8014c18:	9a04      	ldr	r2, [sp, #16]
 8014c1a:	3a04      	subs	r2, #4
 8014c1c:	2a24      	cmp	r2, #36	; 0x24
 8014c1e:	d823      	bhi.n	8014c68 <_realloc_r+0x29c>
 8014c20:	2a13      	cmp	r2, #19
 8014c22:	d907      	bls.n	8014c34 <_realloc_r+0x268>
 8014c24:	6823      	ldr	r3, [r4, #0]
 8014c26:	60ab      	str	r3, [r5, #8]
 8014c28:	6863      	ldr	r3, [r4, #4]
 8014c2a:	60eb      	str	r3, [r5, #12]
 8014c2c:	2a1b      	cmp	r2, #27
 8014c2e:	d809      	bhi.n	8014c44 <_realloc_r+0x278>
 8014c30:	3408      	adds	r4, #8
 8014c32:	3008      	adds	r0, #8
 8014c34:	6823      	ldr	r3, [r4, #0]
 8014c36:	6003      	str	r3, [r0, #0]
 8014c38:	6863      	ldr	r3, [r4, #4]
 8014c3a:	6043      	str	r3, [r0, #4]
 8014c3c:	68a3      	ldr	r3, [r4, #8]
 8014c3e:	6083      	str	r3, [r0, #8]
 8014c40:	003e      	movs	r6, r7
 8014c42:	e7c8      	b.n	8014bd6 <_realloc_r+0x20a>
 8014c44:	68a3      	ldr	r3, [r4, #8]
 8014c46:	612b      	str	r3, [r5, #16]
 8014c48:	68e3      	ldr	r3, [r4, #12]
 8014c4a:	616b      	str	r3, [r5, #20]
 8014c4c:	2a24      	cmp	r2, #36	; 0x24
 8014c4e:	d003      	beq.n	8014c58 <_realloc_r+0x28c>
 8014c50:	0028      	movs	r0, r5
 8014c52:	3410      	adds	r4, #16
 8014c54:	3018      	adds	r0, #24
 8014c56:	e7ed      	b.n	8014c34 <_realloc_r+0x268>
 8014c58:	0028      	movs	r0, r5
 8014c5a:	6923      	ldr	r3, [r4, #16]
 8014c5c:	3020      	adds	r0, #32
 8014c5e:	61ab      	str	r3, [r5, #24]
 8014c60:	6963      	ldr	r3, [r4, #20]
 8014c62:	3418      	adds	r4, #24
 8014c64:	61eb      	str	r3, [r5, #28]
 8014c66:	e7e5      	b.n	8014c34 <_realloc_r+0x268>
 8014c68:	0021      	movs	r1, r4
 8014c6a:	f003 fd70 	bl	801874e <memmove>
 8014c6e:	e7e7      	b.n	8014c40 <_realloc_r+0x274>
 8014c70:	9905      	ldr	r1, [sp, #20]
 8014c72:	9803      	ldr	r0, [sp, #12]
 8014c74:	f7ff fc2c 	bl	80144d0 <_malloc_r>
 8014c78:	1e07      	subs	r7, r0, #0
 8014c7a:	d100      	bne.n	8014c7e <_realloc_r+0x2b2>
 8014c7c:	e76f      	b.n	8014b5e <_realloc_r+0x192>
 8014c7e:	0023      	movs	r3, r4
 8014c80:	2201      	movs	r2, #1
 8014c82:	3b08      	subs	r3, #8
 8014c84:	685b      	ldr	r3, [r3, #4]
 8014c86:	4393      	bics	r3, r2
 8014c88:	9a02      	ldr	r2, [sp, #8]
 8014c8a:	18d3      	adds	r3, r2, r3
 8014c8c:	0002      	movs	r2, r0
 8014c8e:	3a08      	subs	r2, #8
 8014c90:	4293      	cmp	r3, r2
 8014c92:	d105      	bne.n	8014ca0 <_realloc_r+0x2d4>
 8014c94:	685e      	ldr	r6, [r3, #4]
 8014c96:	2303      	movs	r3, #3
 8014c98:	439e      	bics	r6, r3
 8014c9a:	9b04      	ldr	r3, [sp, #16]
 8014c9c:	18f6      	adds	r6, r6, r3
 8014c9e:	e6f9      	b.n	8014a94 <_realloc_r+0xc8>
 8014ca0:	9a04      	ldr	r2, [sp, #16]
 8014ca2:	3a04      	subs	r2, #4
 8014ca4:	2a24      	cmp	r2, #36	; 0x24
 8014ca6:	d82d      	bhi.n	8014d04 <_realloc_r+0x338>
 8014ca8:	2a13      	cmp	r2, #19
 8014caa:	d928      	bls.n	8014cfe <_realloc_r+0x332>
 8014cac:	6823      	ldr	r3, [r4, #0]
 8014cae:	6003      	str	r3, [r0, #0]
 8014cb0:	6863      	ldr	r3, [r4, #4]
 8014cb2:	6043      	str	r3, [r0, #4]
 8014cb4:	2a1b      	cmp	r2, #27
 8014cb6:	d80e      	bhi.n	8014cd6 <_realloc_r+0x30a>
 8014cb8:	0022      	movs	r2, r4
 8014cba:	0003      	movs	r3, r0
 8014cbc:	3208      	adds	r2, #8
 8014cbe:	3308      	adds	r3, #8
 8014cc0:	6811      	ldr	r1, [r2, #0]
 8014cc2:	6019      	str	r1, [r3, #0]
 8014cc4:	6851      	ldr	r1, [r2, #4]
 8014cc6:	6059      	str	r1, [r3, #4]
 8014cc8:	6892      	ldr	r2, [r2, #8]
 8014cca:	609a      	str	r2, [r3, #8]
 8014ccc:	0021      	movs	r1, r4
 8014cce:	9803      	ldr	r0, [sp, #12]
 8014cd0:	f003 f93c 	bl	8017f4c <_free_r>
 8014cd4:	e743      	b.n	8014b5e <_realloc_r+0x192>
 8014cd6:	68a3      	ldr	r3, [r4, #8]
 8014cd8:	6083      	str	r3, [r0, #8]
 8014cda:	68e3      	ldr	r3, [r4, #12]
 8014cdc:	60c3      	str	r3, [r0, #12]
 8014cde:	2a24      	cmp	r2, #36	; 0x24
 8014ce0:	d004      	beq.n	8014cec <_realloc_r+0x320>
 8014ce2:	0022      	movs	r2, r4
 8014ce4:	0003      	movs	r3, r0
 8014ce6:	3210      	adds	r2, #16
 8014ce8:	3310      	adds	r3, #16
 8014cea:	e7e9      	b.n	8014cc0 <_realloc_r+0x2f4>
 8014cec:	6923      	ldr	r3, [r4, #16]
 8014cee:	0022      	movs	r2, r4
 8014cf0:	6103      	str	r3, [r0, #16]
 8014cf2:	0003      	movs	r3, r0
 8014cf4:	6961      	ldr	r1, [r4, #20]
 8014cf6:	3218      	adds	r2, #24
 8014cf8:	3318      	adds	r3, #24
 8014cfa:	6141      	str	r1, [r0, #20]
 8014cfc:	e7e0      	b.n	8014cc0 <_realloc_r+0x2f4>
 8014cfe:	0003      	movs	r3, r0
 8014d00:	0022      	movs	r2, r4
 8014d02:	e7dd      	b.n	8014cc0 <_realloc_r+0x2f4>
 8014d04:	0021      	movs	r1, r4
 8014d06:	f003 fd22 	bl	801874e <memmove>
 8014d0a:	e7df      	b.n	8014ccc <_realloc_r+0x300>
 8014d0c:	9e04      	ldr	r6, [sp, #16]
 8014d0e:	e6c1      	b.n	8014a94 <_realloc_r+0xc8>
 8014d10:	9902      	ldr	r1, [sp, #8]
 8014d12:	4306      	orrs	r6, r0
 8014d14:	604e      	str	r6, [r1, #4]
 8014d16:	6851      	ldr	r1, [r2, #4]
 8014d18:	430b      	orrs	r3, r1
 8014d1a:	6053      	str	r3, [r2, #4]
 8014d1c:	e6d6      	b.n	8014acc <_realloc_r+0x100>
 8014d1e:	46c0      	nop			; (mov r8, r8)
 8014d20:	200006b4 	.word	0x200006b4

08014d24 <_sbrk_r>:
 8014d24:	2300      	movs	r3, #0
 8014d26:	b570      	push	{r4, r5, r6, lr}
 8014d28:	4c06      	ldr	r4, [pc, #24]	; (8014d44 <_sbrk_r+0x20>)
 8014d2a:	0005      	movs	r5, r0
 8014d2c:	0008      	movs	r0, r1
 8014d2e:	6023      	str	r3, [r4, #0]
 8014d30:	f004 fa1e 	bl	8019170 <_sbrk>
 8014d34:	1c43      	adds	r3, r0, #1
 8014d36:	d103      	bne.n	8014d40 <_sbrk_r+0x1c>
 8014d38:	6823      	ldr	r3, [r4, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d000      	beq.n	8014d40 <_sbrk_r+0x1c>
 8014d3e:	602b      	str	r3, [r5, #0]
 8014d40:	bd70      	pop	{r4, r5, r6, pc}
 8014d42:	46c0      	nop			; (mov r8, r8)
 8014d44:	200073fc 	.word	0x200073fc

08014d48 <snprintf>:
 8014d48:	b40c      	push	{r2, r3}
 8014d4a:	b530      	push	{r4, r5, lr}
 8014d4c:	4b16      	ldr	r3, [pc, #88]	; (8014da8 <snprintf+0x60>)
 8014d4e:	b09d      	sub	sp, #116	; 0x74
 8014d50:	1e0c      	subs	r4, r1, #0
 8014d52:	681d      	ldr	r5, [r3, #0]
 8014d54:	da08      	bge.n	8014d68 <snprintf+0x20>
 8014d56:	238b      	movs	r3, #139	; 0x8b
 8014d58:	2001      	movs	r0, #1
 8014d5a:	602b      	str	r3, [r5, #0]
 8014d5c:	4240      	negs	r0, r0
 8014d5e:	b01d      	add	sp, #116	; 0x74
 8014d60:	bc30      	pop	{r4, r5}
 8014d62:	bc08      	pop	{r3}
 8014d64:	b002      	add	sp, #8
 8014d66:	4718      	bx	r3
 8014d68:	2382      	movs	r3, #130	; 0x82
 8014d6a:	a902      	add	r1, sp, #8
 8014d6c:	009b      	lsls	r3, r3, #2
 8014d6e:	818b      	strh	r3, [r1, #12]
 8014d70:	2300      	movs	r3, #0
 8014d72:	9002      	str	r0, [sp, #8]
 8014d74:	6108      	str	r0, [r1, #16]
 8014d76:	429c      	cmp	r4, r3
 8014d78:	d000      	beq.n	8014d7c <snprintf+0x34>
 8014d7a:	1e63      	subs	r3, r4, #1
 8014d7c:	608b      	str	r3, [r1, #8]
 8014d7e:	614b      	str	r3, [r1, #20]
 8014d80:	2301      	movs	r3, #1
 8014d82:	425b      	negs	r3, r3
 8014d84:	81cb      	strh	r3, [r1, #14]
 8014d86:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014d88:	ab21      	add	r3, sp, #132	; 0x84
 8014d8a:	0028      	movs	r0, r5
 8014d8c:	9301      	str	r3, [sp, #4]
 8014d8e:	f000 ff97 	bl	8015cc0 <_svfprintf_r>
 8014d92:	1c43      	adds	r3, r0, #1
 8014d94:	da01      	bge.n	8014d9a <snprintf+0x52>
 8014d96:	238b      	movs	r3, #139	; 0x8b
 8014d98:	602b      	str	r3, [r5, #0]
 8014d9a:	2c00      	cmp	r4, #0
 8014d9c:	d0df      	beq.n	8014d5e <snprintf+0x16>
 8014d9e:	2300      	movs	r3, #0
 8014da0:	9a02      	ldr	r2, [sp, #8]
 8014da2:	7013      	strb	r3, [r2, #0]
 8014da4:	e7db      	b.n	8014d5e <snprintf+0x16>
 8014da6:	46c0      	nop			; (mov r8, r8)
 8014da8:	20000118 	.word	0x20000118

08014dac <sprintf>:
 8014dac:	b40e      	push	{r1, r2, r3}
 8014dae:	b500      	push	{lr}
 8014db0:	490b      	ldr	r1, [pc, #44]	; (8014de0 <sprintf+0x34>)
 8014db2:	b09c      	sub	sp, #112	; 0x70
 8014db4:	ab1d      	add	r3, sp, #116	; 0x74
 8014db6:	9002      	str	r0, [sp, #8]
 8014db8:	9006      	str	r0, [sp, #24]
 8014dba:	9107      	str	r1, [sp, #28]
 8014dbc:	9104      	str	r1, [sp, #16]
 8014dbe:	4809      	ldr	r0, [pc, #36]	; (8014de4 <sprintf+0x38>)
 8014dc0:	4909      	ldr	r1, [pc, #36]	; (8014de8 <sprintf+0x3c>)
 8014dc2:	cb04      	ldmia	r3!, {r2}
 8014dc4:	9105      	str	r1, [sp, #20]
 8014dc6:	6800      	ldr	r0, [r0, #0]
 8014dc8:	a902      	add	r1, sp, #8
 8014dca:	9301      	str	r3, [sp, #4]
 8014dcc:	f000 ff78 	bl	8015cc0 <_svfprintf_r>
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	9a02      	ldr	r2, [sp, #8]
 8014dd4:	7013      	strb	r3, [r2, #0]
 8014dd6:	b01c      	add	sp, #112	; 0x70
 8014dd8:	bc08      	pop	{r3}
 8014dda:	b003      	add	sp, #12
 8014ddc:	4718      	bx	r3
 8014dde:	46c0      	nop			; (mov r8, r8)
 8014de0:	7fffffff 	.word	0x7fffffff
 8014de4:	20000118 	.word	0x20000118
 8014de8:	ffff0208 	.word	0xffff0208

08014dec <strcat>:
 8014dec:	0002      	movs	r2, r0
 8014dee:	b510      	push	{r4, lr}
 8014df0:	7813      	ldrb	r3, [r2, #0]
 8014df2:	1c54      	adds	r4, r2, #1
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d105      	bne.n	8014e04 <strcat+0x18>
 8014df8:	5ccc      	ldrb	r4, [r1, r3]
 8014dfa:	54d4      	strb	r4, [r2, r3]
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	2c00      	cmp	r4, #0
 8014e00:	d1fa      	bne.n	8014df8 <strcat+0xc>
 8014e02:	bd10      	pop	{r4, pc}
 8014e04:	0022      	movs	r2, r4
 8014e06:	e7f3      	b.n	8014df0 <strcat+0x4>

08014e08 <strchr>:
 8014e08:	b2c9      	uxtb	r1, r1
 8014e0a:	7803      	ldrb	r3, [r0, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d004      	beq.n	8014e1a <strchr+0x12>
 8014e10:	428b      	cmp	r3, r1
 8014e12:	d100      	bne.n	8014e16 <strchr+0xe>
 8014e14:	4770      	bx	lr
 8014e16:	3001      	adds	r0, #1
 8014e18:	e7f7      	b.n	8014e0a <strchr+0x2>
 8014e1a:	424b      	negs	r3, r1
 8014e1c:	4159      	adcs	r1, r3
 8014e1e:	4249      	negs	r1, r1
 8014e20:	4008      	ands	r0, r1
 8014e22:	e7f7      	b.n	8014e14 <strchr+0xc>

08014e24 <strcpy>:
 8014e24:	0003      	movs	r3, r0
 8014e26:	780a      	ldrb	r2, [r1, #0]
 8014e28:	3101      	adds	r1, #1
 8014e2a:	701a      	strb	r2, [r3, #0]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	2a00      	cmp	r2, #0
 8014e30:	d1f9      	bne.n	8014e26 <strcpy+0x2>
 8014e32:	4770      	bx	lr

08014e34 <strncmp>:
 8014e34:	2300      	movs	r3, #0
 8014e36:	b530      	push	{r4, r5, lr}
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d00a      	beq.n	8014e52 <strncmp+0x1e>
 8014e3c:	3a01      	subs	r2, #1
 8014e3e:	5cc4      	ldrb	r4, [r0, r3]
 8014e40:	5ccd      	ldrb	r5, [r1, r3]
 8014e42:	42ac      	cmp	r4, r5
 8014e44:	d104      	bne.n	8014e50 <strncmp+0x1c>
 8014e46:	4293      	cmp	r3, r2
 8014e48:	d002      	beq.n	8014e50 <strncmp+0x1c>
 8014e4a:	3301      	adds	r3, #1
 8014e4c:	2c00      	cmp	r4, #0
 8014e4e:	d1f6      	bne.n	8014e3e <strncmp+0xa>
 8014e50:	1b63      	subs	r3, r4, r5
 8014e52:	0018      	movs	r0, r3
 8014e54:	bd30      	pop	{r4, r5, pc}

08014e56 <strncpy>:
 8014e56:	b530      	push	{r4, r5, lr}
 8014e58:	0005      	movs	r5, r0
 8014e5a:	2a00      	cmp	r2, #0
 8014e5c:	d100      	bne.n	8014e60 <strncpy+0xa>
 8014e5e:	bd30      	pop	{r4, r5, pc}
 8014e60:	780c      	ldrb	r4, [r1, #0]
 8014e62:	3a01      	subs	r2, #1
 8014e64:	1c6b      	adds	r3, r5, #1
 8014e66:	702c      	strb	r4, [r5, #0]
 8014e68:	3101      	adds	r1, #1
 8014e6a:	2c00      	cmp	r4, #0
 8014e6c:	d105      	bne.n	8014e7a <strncpy+0x24>
 8014e6e:	189a      	adds	r2, r3, r2
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d0f4      	beq.n	8014e5e <strncpy+0x8>
 8014e74:	701c      	strb	r4, [r3, #0]
 8014e76:	3301      	adds	r3, #1
 8014e78:	e7fa      	b.n	8014e70 <strncpy+0x1a>
 8014e7a:	001d      	movs	r5, r3
 8014e7c:	e7ed      	b.n	8014e5a <strncpy+0x4>
	...

08014e80 <sulp>:
 8014e80:	b570      	push	{r4, r5, r6, lr}
 8014e82:	0016      	movs	r6, r2
 8014e84:	000d      	movs	r5, r1
 8014e86:	f003 ff17 	bl	8018cb8 <__ulp>
 8014e8a:	2e00      	cmp	r6, #0
 8014e8c:	d00d      	beq.n	8014eaa <sulp+0x2a>
 8014e8e:	236b      	movs	r3, #107	; 0x6b
 8014e90:	006a      	lsls	r2, r5, #1
 8014e92:	0d52      	lsrs	r2, r2, #21
 8014e94:	1a9b      	subs	r3, r3, r2
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	dd07      	ble.n	8014eaa <sulp+0x2a>
 8014e9a:	2400      	movs	r4, #0
 8014e9c:	4a03      	ldr	r2, [pc, #12]	; (8014eac <sulp+0x2c>)
 8014e9e:	051b      	lsls	r3, r3, #20
 8014ea0:	189d      	adds	r5, r3, r2
 8014ea2:	002b      	movs	r3, r5
 8014ea4:	0022      	movs	r2, r4
 8014ea6:	f7ec ffc5 	bl	8001e34 <__aeabi_dmul>
 8014eaa:	bd70      	pop	{r4, r5, r6, pc}
 8014eac:	3ff00000 	.word	0x3ff00000

08014eb0 <_strtod_l>:
 8014eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eb2:	b0a7      	sub	sp, #156	; 0x9c
 8014eb4:	9307      	str	r3, [sp, #28]
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	9004      	str	r0, [sp, #16]
 8014eba:	9807      	ldr	r0, [sp, #28]
 8014ebc:	9322      	str	r3, [sp, #136]	; 0x88
 8014ebe:	9106      	str	r1, [sp, #24]
 8014ec0:	921d      	str	r2, [sp, #116]	; 0x74
 8014ec2:	f003 fc28 	bl	8018716 <__localeconv_l>
 8014ec6:	0005      	movs	r5, r0
 8014ec8:	6800      	ldr	r0, [r0, #0]
 8014eca:	f7eb f925 	bl	8000118 <strlen>
 8014ece:	2600      	movs	r6, #0
 8014ed0:	2700      	movs	r7, #0
 8014ed2:	9b06      	ldr	r3, [sp, #24]
 8014ed4:	9005      	str	r0, [sp, #20]
 8014ed6:	9321      	str	r3, [sp, #132]	; 0x84
 8014ed8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014eda:	781a      	ldrb	r2, [r3, #0]
 8014edc:	2a0d      	cmp	r2, #13
 8014ede:	d839      	bhi.n	8014f54 <_strtod_l+0xa4>
 8014ee0:	2a09      	cmp	r2, #9
 8014ee2:	d23d      	bcs.n	8014f60 <_strtod_l+0xb0>
 8014ee4:	2a00      	cmp	r2, #0
 8014ee6:	d044      	beq.n	8014f72 <_strtod_l+0xc2>
 8014ee8:	2300      	movs	r3, #0
 8014eea:	9313      	str	r3, [sp, #76]	; 0x4c
 8014eec:	2200      	movs	r2, #0
 8014eee:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014ef0:	920c      	str	r2, [sp, #48]	; 0x30
 8014ef2:	7823      	ldrb	r3, [r4, #0]
 8014ef4:	2b30      	cmp	r3, #48	; 0x30
 8014ef6:	d000      	beq.n	8014efa <_strtod_l+0x4a>
 8014ef8:	e07e      	b.n	8014ff8 <_strtod_l+0x148>
 8014efa:	7863      	ldrb	r3, [r4, #1]
 8014efc:	2b58      	cmp	r3, #88	; 0x58
 8014efe:	d002      	beq.n	8014f06 <_strtod_l+0x56>
 8014f00:	2b78      	cmp	r3, #120	; 0x78
 8014f02:	d000      	beq.n	8014f06 <_strtod_l+0x56>
 8014f04:	e06e      	b.n	8014fe4 <_strtod_l+0x134>
 8014f06:	9b07      	ldr	r3, [sp, #28]
 8014f08:	4a96      	ldr	r2, [pc, #600]	; (8015164 <_strtod_l+0x2b4>)
 8014f0a:	9302      	str	r3, [sp, #8]
 8014f0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f0e:	a921      	add	r1, sp, #132	; 0x84
 8014f10:	9301      	str	r3, [sp, #4]
 8014f12:	ab22      	add	r3, sp, #136	; 0x88
 8014f14:	9300      	str	r3, [sp, #0]
 8014f16:	9804      	ldr	r0, [sp, #16]
 8014f18:	ab23      	add	r3, sp, #140	; 0x8c
 8014f1a:	f003 f914 	bl	8018146 <__gethex>
 8014f1e:	2507      	movs	r5, #7
 8014f20:	9005      	str	r0, [sp, #20]
 8014f22:	4005      	ands	r5, r0
 8014f24:	d005      	beq.n	8014f32 <_strtod_l+0x82>
 8014f26:	2d06      	cmp	r5, #6
 8014f28:	d12f      	bne.n	8014f8a <_strtod_l+0xda>
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	3401      	adds	r4, #1
 8014f2e:	9421      	str	r4, [sp, #132]	; 0x84
 8014f30:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d002      	beq.n	8014f3e <_strtod_l+0x8e>
 8014f38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f3a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014f3c:	601a      	str	r2, [r3, #0]
 8014f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d01d      	beq.n	8014f80 <_strtod_l+0xd0>
 8014f44:	2380      	movs	r3, #128	; 0x80
 8014f46:	0032      	movs	r2, r6
 8014f48:	061b      	lsls	r3, r3, #24
 8014f4a:	18fb      	adds	r3, r7, r3
 8014f4c:	0010      	movs	r0, r2
 8014f4e:	0019      	movs	r1, r3
 8014f50:	b027      	add	sp, #156	; 0x9c
 8014f52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f54:	2a2b      	cmp	r2, #43	; 0x2b
 8014f56:	d016      	beq.n	8014f86 <_strtod_l+0xd6>
 8014f58:	2a2d      	cmp	r2, #45	; 0x2d
 8014f5a:	d003      	beq.n	8014f64 <_strtod_l+0xb4>
 8014f5c:	2a20      	cmp	r2, #32
 8014f5e:	d1c3      	bne.n	8014ee8 <_strtod_l+0x38>
 8014f60:	3301      	adds	r3, #1
 8014f62:	e7b8      	b.n	8014ed6 <_strtod_l+0x26>
 8014f64:	2201      	movs	r2, #1
 8014f66:	9213      	str	r2, [sp, #76]	; 0x4c
 8014f68:	1c5a      	adds	r2, r3, #1
 8014f6a:	9221      	str	r2, [sp, #132]	; 0x84
 8014f6c:	785b      	ldrb	r3, [r3, #1]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d1bc      	bne.n	8014eec <_strtod_l+0x3c>
 8014f72:	9b06      	ldr	r3, [sp, #24]
 8014f74:	9321      	str	r3, [sp, #132]	; 0x84
 8014f76:	2300      	movs	r3, #0
 8014f78:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d1db      	bne.n	8014f38 <_strtod_l+0x88>
 8014f80:	0032      	movs	r2, r6
 8014f82:	003b      	movs	r3, r7
 8014f84:	e7e2      	b.n	8014f4c <_strtod_l+0x9c>
 8014f86:	2200      	movs	r2, #0
 8014f88:	e7ed      	b.n	8014f66 <_strtod_l+0xb6>
 8014f8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014f8c:	2a00      	cmp	r2, #0
 8014f8e:	d007      	beq.n	8014fa0 <_strtod_l+0xf0>
 8014f90:	2135      	movs	r1, #53	; 0x35
 8014f92:	a824      	add	r0, sp, #144	; 0x90
 8014f94:	f003 ff7d 	bl	8018e92 <__copybits>
 8014f98:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014f9a:	9804      	ldr	r0, [sp, #16]
 8014f9c:	f003 fc12 	bl	80187c4 <_Bfree>
 8014fa0:	1e68      	subs	r0, r5, #1
 8014fa2:	2804      	cmp	r0, #4
 8014fa4:	d806      	bhi.n	8014fb4 <_strtod_l+0x104>
 8014fa6:	f7eb f8bf 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014faa:	030c      	.short	0x030c
 8014fac:	1917      	.short	0x1917
 8014fae:	0c          	.byte	0x0c
 8014faf:	00          	.byte	0x00
 8014fb0:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014fb2:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014fb4:	9b05      	ldr	r3, [sp, #20]
 8014fb6:	071b      	lsls	r3, r3, #28
 8014fb8:	d5bb      	bpl.n	8014f32 <_strtod_l+0x82>
 8014fba:	2380      	movs	r3, #128	; 0x80
 8014fbc:	061b      	lsls	r3, r3, #24
 8014fbe:	431f      	orrs	r7, r3
 8014fc0:	e7b7      	b.n	8014f32 <_strtod_l+0x82>
 8014fc2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014fc4:	4a68      	ldr	r2, [pc, #416]	; (8015168 <_strtod_l+0x2b8>)
 8014fc6:	4969      	ldr	r1, [pc, #420]	; (801516c <_strtod_l+0x2bc>)
 8014fc8:	401a      	ands	r2, r3
 8014fca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014fcc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014fce:	185b      	adds	r3, r3, r1
 8014fd0:	051b      	lsls	r3, r3, #20
 8014fd2:	431a      	orrs	r2, r3
 8014fd4:	0017      	movs	r7, r2
 8014fd6:	e7ed      	b.n	8014fb4 <_strtod_l+0x104>
 8014fd8:	4f65      	ldr	r7, [pc, #404]	; (8015170 <_strtod_l+0x2c0>)
 8014fda:	e7eb      	b.n	8014fb4 <_strtod_l+0x104>
 8014fdc:	2601      	movs	r6, #1
 8014fde:	4f65      	ldr	r7, [pc, #404]	; (8015174 <_strtod_l+0x2c4>)
 8014fe0:	4276      	negs	r6, r6
 8014fe2:	e7e7      	b.n	8014fb4 <_strtod_l+0x104>
 8014fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fe6:	1c5a      	adds	r2, r3, #1
 8014fe8:	9221      	str	r2, [sp, #132]	; 0x84
 8014fea:	785b      	ldrb	r3, [r3, #1]
 8014fec:	2b30      	cmp	r3, #48	; 0x30
 8014fee:	d0f9      	beq.n	8014fe4 <_strtod_l+0x134>
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d09e      	beq.n	8014f32 <_strtod_l+0x82>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ffa:	220a      	movs	r2, #10
 8014ffc:	9312      	str	r3, [sp, #72]	; 0x48
 8014ffe:	2300      	movs	r3, #0
 8015000:	930b      	str	r3, [sp, #44]	; 0x2c
 8015002:	9308      	str	r3, [sp, #32]
 8015004:	930a      	str	r3, [sp, #40]	; 0x28
 8015006:	9821      	ldr	r0, [sp, #132]	; 0x84
 8015008:	7804      	ldrb	r4, [r0, #0]
 801500a:	0023      	movs	r3, r4
 801500c:	3b30      	subs	r3, #48	; 0x30
 801500e:	b2d9      	uxtb	r1, r3
 8015010:	2909      	cmp	r1, #9
 8015012:	d934      	bls.n	801507e <_strtod_l+0x1ce>
 8015014:	9a05      	ldr	r2, [sp, #20]
 8015016:	6829      	ldr	r1, [r5, #0]
 8015018:	f7ff ff0c 	bl	8014e34 <strncmp>
 801501c:	2800      	cmp	r0, #0
 801501e:	d040      	beq.n	80150a2 <_strtod_l+0x1f2>
 8015020:	2000      	movs	r0, #0
 8015022:	0023      	movs	r3, r4
 8015024:	4684      	mov	ip, r0
 8015026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015028:	9007      	str	r0, [sp, #28]
 801502a:	9205      	str	r2, [sp, #20]
 801502c:	2220      	movs	r2, #32
 801502e:	0019      	movs	r1, r3
 8015030:	4391      	bics	r1, r2
 8015032:	000a      	movs	r2, r1
 8015034:	2100      	movs	r1, #0
 8015036:	2a45      	cmp	r2, #69	; 0x45
 8015038:	d000      	beq.n	801503c <_strtod_l+0x18c>
 801503a:	e0bf      	b.n	80151bc <_strtod_l+0x30c>
 801503c:	9b05      	ldr	r3, [sp, #20]
 801503e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015040:	4303      	orrs	r3, r0
 8015042:	4313      	orrs	r3, r2
 8015044:	428b      	cmp	r3, r1
 8015046:	d094      	beq.n	8014f72 <_strtod_l+0xc2>
 8015048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801504a:	9306      	str	r3, [sp, #24]
 801504c:	3301      	adds	r3, #1
 801504e:	9321      	str	r3, [sp, #132]	; 0x84
 8015050:	9b06      	ldr	r3, [sp, #24]
 8015052:	785b      	ldrb	r3, [r3, #1]
 8015054:	2b2b      	cmp	r3, #43	; 0x2b
 8015056:	d100      	bne.n	801505a <_strtod_l+0x1aa>
 8015058:	e082      	b.n	8015160 <_strtod_l+0x2b0>
 801505a:	000c      	movs	r4, r1
 801505c:	2b2d      	cmp	r3, #45	; 0x2d
 801505e:	d105      	bne.n	801506c <_strtod_l+0x1bc>
 8015060:	2401      	movs	r4, #1
 8015062:	9b06      	ldr	r3, [sp, #24]
 8015064:	3302      	adds	r3, #2
 8015066:	9321      	str	r3, [sp, #132]	; 0x84
 8015068:	9b06      	ldr	r3, [sp, #24]
 801506a:	789b      	ldrb	r3, [r3, #2]
 801506c:	001a      	movs	r2, r3
 801506e:	3a30      	subs	r2, #48	; 0x30
 8015070:	2a09      	cmp	r2, #9
 8015072:	d800      	bhi.n	8015076 <_strtod_l+0x1c6>
 8015074:	e084      	b.n	8015180 <_strtod_l+0x2d0>
 8015076:	9a06      	ldr	r2, [sp, #24]
 8015078:	2100      	movs	r1, #0
 801507a:	9221      	str	r2, [sp, #132]	; 0x84
 801507c:	e09e      	b.n	80151bc <_strtod_l+0x30c>
 801507e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015080:	2908      	cmp	r1, #8
 8015082:	dc09      	bgt.n	8015098 <_strtod_l+0x1e8>
 8015084:	9908      	ldr	r1, [sp, #32]
 8015086:	4351      	muls	r1, r2
 8015088:	18cb      	adds	r3, r1, r3
 801508a:	9308      	str	r3, [sp, #32]
 801508c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801508e:	3001      	adds	r0, #1
 8015090:	3301      	adds	r3, #1
 8015092:	930a      	str	r3, [sp, #40]	; 0x28
 8015094:	9021      	str	r0, [sp, #132]	; 0x84
 8015096:	e7b6      	b.n	8015006 <_strtod_l+0x156>
 8015098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801509a:	4351      	muls	r1, r2
 801509c:	18cb      	adds	r3, r1, r3
 801509e:	930b      	str	r3, [sp, #44]	; 0x2c
 80150a0:	e7f4      	b.n	801508c <_strtod_l+0x1dc>
 80150a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80150a4:	9b05      	ldr	r3, [sp, #20]
 80150a6:	4694      	mov	ip, r2
 80150a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150aa:	4463      	add	r3, ip
 80150ac:	9321      	str	r3, [sp, #132]	; 0x84
 80150ae:	781b      	ldrb	r3, [r3, #0]
 80150b0:	2a00      	cmp	r2, #0
 80150b2:	d036      	beq.n	8015122 <_strtod_l+0x272>
 80150b4:	4684      	mov	ip, r0
 80150b6:	9205      	str	r2, [sp, #20]
 80150b8:	001a      	movs	r2, r3
 80150ba:	3a30      	subs	r2, #48	; 0x30
 80150bc:	2a09      	cmp	r2, #9
 80150be:	d912      	bls.n	80150e6 <_strtod_l+0x236>
 80150c0:	2201      	movs	r2, #1
 80150c2:	9207      	str	r2, [sp, #28]
 80150c4:	e7b2      	b.n	801502c <_strtod_l+0x17c>
 80150c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150c8:	3001      	adds	r0, #1
 80150ca:	1c5a      	adds	r2, r3, #1
 80150cc:	9221      	str	r2, [sp, #132]	; 0x84
 80150ce:	785b      	ldrb	r3, [r3, #1]
 80150d0:	2b30      	cmp	r3, #48	; 0x30
 80150d2:	d0f8      	beq.n	80150c6 <_strtod_l+0x216>
 80150d4:	001a      	movs	r2, r3
 80150d6:	3a31      	subs	r2, #49	; 0x31
 80150d8:	2a08      	cmp	r2, #8
 80150da:	d83c      	bhi.n	8015156 <_strtod_l+0x2a6>
 80150dc:	4684      	mov	ip, r0
 80150de:	2000      	movs	r0, #0
 80150e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80150e2:	9005      	str	r0, [sp, #20]
 80150e4:	9212      	str	r2, [sp, #72]	; 0x48
 80150e6:	3b30      	subs	r3, #48	; 0x30
 80150e8:	1c42      	adds	r2, r0, #1
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d013      	beq.n	8015116 <_strtod_l+0x266>
 80150ee:	210a      	movs	r1, #10
 80150f0:	4494      	add	ip, r2
 80150f2:	9a05      	ldr	r2, [sp, #20]
 80150f4:	1885      	adds	r5, r0, r2
 80150f6:	42aa      	cmp	r2, r5
 80150f8:	d115      	bne.n	8015126 <_strtod_l+0x276>
 80150fa:	9905      	ldr	r1, [sp, #20]
 80150fc:	9a05      	ldr	r2, [sp, #20]
 80150fe:	3101      	adds	r1, #1
 8015100:	1809      	adds	r1, r1, r0
 8015102:	1812      	adds	r2, r2, r0
 8015104:	9105      	str	r1, [sp, #20]
 8015106:	2a08      	cmp	r2, #8
 8015108:	dc1b      	bgt.n	8015142 <_strtod_l+0x292>
 801510a:	220a      	movs	r2, #10
 801510c:	9908      	ldr	r1, [sp, #32]
 801510e:	434a      	muls	r2, r1
 8015110:	189b      	adds	r3, r3, r2
 8015112:	2200      	movs	r2, #0
 8015114:	9308      	str	r3, [sp, #32]
 8015116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015118:	0010      	movs	r0, r2
 801511a:	1c59      	adds	r1, r3, #1
 801511c:	9121      	str	r1, [sp, #132]	; 0x84
 801511e:	785b      	ldrb	r3, [r3, #1]
 8015120:	e7ca      	b.n	80150b8 <_strtod_l+0x208>
 8015122:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015124:	e7d4      	b.n	80150d0 <_strtod_l+0x220>
 8015126:	1c54      	adds	r4, r2, #1
 8015128:	2a08      	cmp	r2, #8
 801512a:	dc04      	bgt.n	8015136 <_strtod_l+0x286>
 801512c:	9a08      	ldr	r2, [sp, #32]
 801512e:	434a      	muls	r2, r1
 8015130:	9208      	str	r2, [sp, #32]
 8015132:	0022      	movs	r2, r4
 8015134:	e7df      	b.n	80150f6 <_strtod_l+0x246>
 8015136:	2c10      	cmp	r4, #16
 8015138:	dcfb      	bgt.n	8015132 <_strtod_l+0x282>
 801513a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801513c:	434a      	muls	r2, r1
 801513e:	920b      	str	r2, [sp, #44]	; 0x2c
 8015140:	e7f7      	b.n	8015132 <_strtod_l+0x282>
 8015142:	9905      	ldr	r1, [sp, #20]
 8015144:	2200      	movs	r2, #0
 8015146:	2910      	cmp	r1, #16
 8015148:	dce5      	bgt.n	8015116 <_strtod_l+0x266>
 801514a:	210a      	movs	r1, #10
 801514c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801514e:	4341      	muls	r1, r0
 8015150:	185b      	adds	r3, r3, r1
 8015152:	930b      	str	r3, [sp, #44]	; 0x2c
 8015154:	e7df      	b.n	8015116 <_strtod_l+0x266>
 8015156:	2200      	movs	r2, #0
 8015158:	4694      	mov	ip, r2
 801515a:	9205      	str	r2, [sp, #20]
 801515c:	3201      	adds	r2, #1
 801515e:	e7b0      	b.n	80150c2 <_strtod_l+0x212>
 8015160:	000c      	movs	r4, r1
 8015162:	e77e      	b.n	8015062 <_strtod_l+0x1b2>
 8015164:	0801c2f0 	.word	0x0801c2f0
 8015168:	ffefffff 	.word	0xffefffff
 801516c:	00000433 	.word	0x00000433
 8015170:	7ff00000 	.word	0x7ff00000
 8015174:	7fffffff 	.word	0x7fffffff
 8015178:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801517a:	1c5a      	adds	r2, r3, #1
 801517c:	9221      	str	r2, [sp, #132]	; 0x84
 801517e:	785b      	ldrb	r3, [r3, #1]
 8015180:	2b30      	cmp	r3, #48	; 0x30
 8015182:	d0f9      	beq.n	8015178 <_strtod_l+0x2c8>
 8015184:	001a      	movs	r2, r3
 8015186:	3a31      	subs	r2, #49	; 0x31
 8015188:	2100      	movs	r1, #0
 801518a:	2a08      	cmp	r2, #8
 801518c:	d816      	bhi.n	80151bc <_strtod_l+0x30c>
 801518e:	3b30      	subs	r3, #48	; 0x30
 8015190:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8015192:	930e      	str	r3, [sp, #56]	; 0x38
 8015194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015196:	1c59      	adds	r1, r3, #1
 8015198:	9121      	str	r1, [sp, #132]	; 0x84
 801519a:	785b      	ldrb	r3, [r3, #1]
 801519c:	001a      	movs	r2, r3
 801519e:	3a30      	subs	r2, #48	; 0x30
 80151a0:	2a09      	cmp	r2, #9
 80151a2:	d932      	bls.n	801520a <_strtod_l+0x35a>
 80151a4:	1b4a      	subs	r2, r1, r5
 80151a6:	4dad      	ldr	r5, [pc, #692]	; (801545c <_strtod_l+0x5ac>)
 80151a8:	0029      	movs	r1, r5
 80151aa:	2a08      	cmp	r2, #8
 80151ac:	dc03      	bgt.n	80151b6 <_strtod_l+0x306>
 80151ae:	990e      	ldr	r1, [sp, #56]	; 0x38
 80151b0:	42a9      	cmp	r1, r5
 80151b2:	dd00      	ble.n	80151b6 <_strtod_l+0x306>
 80151b4:	0029      	movs	r1, r5
 80151b6:	2c00      	cmp	r4, #0
 80151b8:	d000      	beq.n	80151bc <_strtod_l+0x30c>
 80151ba:	4249      	negs	r1, r1
 80151bc:	9a05      	ldr	r2, [sp, #20]
 80151be:	2a00      	cmp	r2, #0
 80151c0:	d149      	bne.n	8015256 <_strtod_l+0x3a6>
 80151c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80151c4:	4310      	orrs	r0, r2
 80151c6:	d000      	beq.n	80151ca <_strtod_l+0x31a>
 80151c8:	e6b3      	b.n	8014f32 <_strtod_l+0x82>
 80151ca:	9a07      	ldr	r2, [sp, #28]
 80151cc:	2a00      	cmp	r2, #0
 80151ce:	d000      	beq.n	80151d2 <_strtod_l+0x322>
 80151d0:	e6cf      	b.n	8014f72 <_strtod_l+0xc2>
 80151d2:	2b4e      	cmp	r3, #78	; 0x4e
 80151d4:	d025      	beq.n	8015222 <_strtod_l+0x372>
 80151d6:	dc1f      	bgt.n	8015218 <_strtod_l+0x368>
 80151d8:	2b49      	cmp	r3, #73	; 0x49
 80151da:	d000      	beq.n	80151de <_strtod_l+0x32e>
 80151dc:	e6c9      	b.n	8014f72 <_strtod_l+0xc2>
 80151de:	49a0      	ldr	r1, [pc, #640]	; (8015460 <_strtod_l+0x5b0>)
 80151e0:	a821      	add	r0, sp, #132	; 0x84
 80151e2:	f003 f9ed 	bl	80185c0 <__match>
 80151e6:	2800      	cmp	r0, #0
 80151e8:	d100      	bne.n	80151ec <_strtod_l+0x33c>
 80151ea:	e6c2      	b.n	8014f72 <_strtod_l+0xc2>
 80151ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151ee:	499d      	ldr	r1, [pc, #628]	; (8015464 <_strtod_l+0x5b4>)
 80151f0:	3b01      	subs	r3, #1
 80151f2:	a821      	add	r0, sp, #132	; 0x84
 80151f4:	9321      	str	r3, [sp, #132]	; 0x84
 80151f6:	f003 f9e3 	bl	80185c0 <__match>
 80151fa:	2800      	cmp	r0, #0
 80151fc:	d102      	bne.n	8015204 <_strtod_l+0x354>
 80151fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015200:	3301      	adds	r3, #1
 8015202:	9321      	str	r3, [sp, #132]	; 0x84
 8015204:	4f98      	ldr	r7, [pc, #608]	; (8015468 <_strtod_l+0x5b8>)
 8015206:	2600      	movs	r6, #0
 8015208:	e693      	b.n	8014f32 <_strtod_l+0x82>
 801520a:	220a      	movs	r2, #10
 801520c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801520e:	434a      	muls	r2, r1
 8015210:	18d2      	adds	r2, r2, r3
 8015212:	3a30      	subs	r2, #48	; 0x30
 8015214:	920e      	str	r2, [sp, #56]	; 0x38
 8015216:	e7bd      	b.n	8015194 <_strtod_l+0x2e4>
 8015218:	2b69      	cmp	r3, #105	; 0x69
 801521a:	d0e0      	beq.n	80151de <_strtod_l+0x32e>
 801521c:	2b6e      	cmp	r3, #110	; 0x6e
 801521e:	d000      	beq.n	8015222 <_strtod_l+0x372>
 8015220:	e6a7      	b.n	8014f72 <_strtod_l+0xc2>
 8015222:	4992      	ldr	r1, [pc, #584]	; (801546c <_strtod_l+0x5bc>)
 8015224:	a821      	add	r0, sp, #132	; 0x84
 8015226:	f003 f9cb 	bl	80185c0 <__match>
 801522a:	2800      	cmp	r0, #0
 801522c:	d100      	bne.n	8015230 <_strtod_l+0x380>
 801522e:	e6a0      	b.n	8014f72 <_strtod_l+0xc2>
 8015230:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015232:	781b      	ldrb	r3, [r3, #0]
 8015234:	2b28      	cmp	r3, #40	; 0x28
 8015236:	d10c      	bne.n	8015252 <_strtod_l+0x3a2>
 8015238:	aa24      	add	r2, sp, #144	; 0x90
 801523a:	498d      	ldr	r1, [pc, #564]	; (8015470 <_strtod_l+0x5c0>)
 801523c:	a821      	add	r0, sp, #132	; 0x84
 801523e:	f003 f9d3 	bl	80185e8 <__hexnan>
 8015242:	2805      	cmp	r0, #5
 8015244:	d105      	bne.n	8015252 <_strtod_l+0x3a2>
 8015246:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015248:	4a87      	ldr	r2, [pc, #540]	; (8015468 <_strtod_l+0x5b8>)
 801524a:	9e24      	ldr	r6, [sp, #144]	; 0x90
 801524c:	431a      	orrs	r2, r3
 801524e:	0017      	movs	r7, r2
 8015250:	e66f      	b.n	8014f32 <_strtod_l+0x82>
 8015252:	4f88      	ldr	r7, [pc, #544]	; (8015474 <_strtod_l+0x5c4>)
 8015254:	e7d7      	b.n	8015206 <_strtod_l+0x356>
 8015256:	4663      	mov	r3, ip
 8015258:	1acb      	subs	r3, r1, r3
 801525a:	9307      	str	r3, [sp, #28]
 801525c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801525e:	2b00      	cmp	r3, #0
 8015260:	d101      	bne.n	8015266 <_strtod_l+0x3b6>
 8015262:	9b05      	ldr	r3, [sp, #20]
 8015264:	930a      	str	r3, [sp, #40]	; 0x28
 8015266:	9c05      	ldr	r4, [sp, #20]
 8015268:	2c10      	cmp	r4, #16
 801526a:	dd00      	ble.n	801526e <_strtod_l+0x3be>
 801526c:	2410      	movs	r4, #16
 801526e:	9808      	ldr	r0, [sp, #32]
 8015270:	f7ed fc26 	bl	8002ac0 <__aeabi_ui2d>
 8015274:	9b05      	ldr	r3, [sp, #20]
 8015276:	0006      	movs	r6, r0
 8015278:	000f      	movs	r7, r1
 801527a:	2b09      	cmp	r3, #9
 801527c:	dc15      	bgt.n	80152aa <_strtod_l+0x3fa>
 801527e:	9b07      	ldr	r3, [sp, #28]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d100      	bne.n	8015286 <_strtod_l+0x3d6>
 8015284:	e655      	b.n	8014f32 <_strtod_l+0x82>
 8015286:	9b07      	ldr	r3, [sp, #28]
 8015288:	2b00      	cmp	r3, #0
 801528a:	dc00      	bgt.n	801528e <_strtod_l+0x3de>
 801528c:	e07d      	b.n	801538a <_strtod_l+0x4da>
 801528e:	2b16      	cmp	r3, #22
 8015290:	dc62      	bgt.n	8015358 <_strtod_l+0x4a8>
 8015292:	00dc      	lsls	r4, r3, #3
 8015294:	4b78      	ldr	r3, [pc, #480]	; (8015478 <_strtod_l+0x5c8>)
 8015296:	0032      	movs	r2, r6
 8015298:	1919      	adds	r1, r3, r4
 801529a:	003b      	movs	r3, r7
 801529c:	6808      	ldr	r0, [r1, #0]
 801529e:	6849      	ldr	r1, [r1, #4]
 80152a0:	f7ec fdc8 	bl	8001e34 <__aeabi_dmul>
 80152a4:	0006      	movs	r6, r0
 80152a6:	000f      	movs	r7, r1
 80152a8:	e643      	b.n	8014f32 <_strtod_l+0x82>
 80152aa:	0022      	movs	r2, r4
 80152ac:	4b72      	ldr	r3, [pc, #456]	; (8015478 <_strtod_l+0x5c8>)
 80152ae:	3a09      	subs	r2, #9
 80152b0:	00d2      	lsls	r2, r2, #3
 80152b2:	189b      	adds	r3, r3, r2
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	685b      	ldr	r3, [r3, #4]
 80152b8:	f7ec fdbc 	bl	8001e34 <__aeabi_dmul>
 80152bc:	0006      	movs	r6, r0
 80152be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80152c0:	000f      	movs	r7, r1
 80152c2:	f7ed fbfd 	bl	8002ac0 <__aeabi_ui2d>
 80152c6:	000b      	movs	r3, r1
 80152c8:	0002      	movs	r2, r0
 80152ca:	0039      	movs	r1, r7
 80152cc:	0030      	movs	r0, r6
 80152ce:	f7eb fe8b 	bl	8000fe8 <__aeabi_dadd>
 80152d2:	9b05      	ldr	r3, [sp, #20]
 80152d4:	0006      	movs	r6, r0
 80152d6:	000f      	movs	r7, r1
 80152d8:	2b0f      	cmp	r3, #15
 80152da:	ddd0      	ble.n	801527e <_strtod_l+0x3ce>
 80152dc:	9b05      	ldr	r3, [sp, #20]
 80152de:	1b1c      	subs	r4, r3, r4
 80152e0:	9b07      	ldr	r3, [sp, #28]
 80152e2:	18e4      	adds	r4, r4, r3
 80152e4:	2c00      	cmp	r4, #0
 80152e6:	dc00      	bgt.n	80152ea <_strtod_l+0x43a>
 80152e8:	e094      	b.n	8015414 <_strtod_l+0x564>
 80152ea:	230f      	movs	r3, #15
 80152ec:	4023      	ands	r3, r4
 80152ee:	d00a      	beq.n	8015306 <_strtod_l+0x456>
 80152f0:	4961      	ldr	r1, [pc, #388]	; (8015478 <_strtod_l+0x5c8>)
 80152f2:	00db      	lsls	r3, r3, #3
 80152f4:	18c9      	adds	r1, r1, r3
 80152f6:	0032      	movs	r2, r6
 80152f8:	6808      	ldr	r0, [r1, #0]
 80152fa:	6849      	ldr	r1, [r1, #4]
 80152fc:	003b      	movs	r3, r7
 80152fe:	f7ec fd99 	bl	8001e34 <__aeabi_dmul>
 8015302:	0006      	movs	r6, r0
 8015304:	000f      	movs	r7, r1
 8015306:	230f      	movs	r3, #15
 8015308:	439c      	bics	r4, r3
 801530a:	d06e      	beq.n	80153ea <_strtod_l+0x53a>
 801530c:	3326      	adds	r3, #38	; 0x26
 801530e:	33ff      	adds	r3, #255	; 0xff
 8015310:	429c      	cmp	r4, r3
 8015312:	dd48      	ble.n	80153a6 <_strtod_l+0x4f6>
 8015314:	2400      	movs	r4, #0
 8015316:	9405      	str	r4, [sp, #20]
 8015318:	940b      	str	r4, [sp, #44]	; 0x2c
 801531a:	940a      	str	r4, [sp, #40]	; 0x28
 801531c:	2322      	movs	r3, #34	; 0x22
 801531e:	2600      	movs	r6, #0
 8015320:	9a04      	ldr	r2, [sp, #16]
 8015322:	4f51      	ldr	r7, [pc, #324]	; (8015468 <_strtod_l+0x5b8>)
 8015324:	6013      	str	r3, [r2, #0]
 8015326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015328:	42b3      	cmp	r3, r6
 801532a:	d100      	bne.n	801532e <_strtod_l+0x47e>
 801532c:	e601      	b.n	8014f32 <_strtod_l+0x82>
 801532e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015330:	9804      	ldr	r0, [sp, #16]
 8015332:	f003 fa47 	bl	80187c4 <_Bfree>
 8015336:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015338:	9804      	ldr	r0, [sp, #16]
 801533a:	f003 fa43 	bl	80187c4 <_Bfree>
 801533e:	9905      	ldr	r1, [sp, #20]
 8015340:	9804      	ldr	r0, [sp, #16]
 8015342:	f003 fa3f 	bl	80187c4 <_Bfree>
 8015346:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015348:	9804      	ldr	r0, [sp, #16]
 801534a:	f003 fa3b 	bl	80187c4 <_Bfree>
 801534e:	0021      	movs	r1, r4
 8015350:	9804      	ldr	r0, [sp, #16]
 8015352:	f003 fa37 	bl	80187c4 <_Bfree>
 8015356:	e5ec      	b.n	8014f32 <_strtod_l+0x82>
 8015358:	2325      	movs	r3, #37	; 0x25
 801535a:	9a05      	ldr	r2, [sp, #20]
 801535c:	1a9b      	subs	r3, r3, r2
 801535e:	9a07      	ldr	r2, [sp, #28]
 8015360:	4293      	cmp	r3, r2
 8015362:	dbbb      	blt.n	80152dc <_strtod_l+0x42c>
 8015364:	230f      	movs	r3, #15
 8015366:	9a05      	ldr	r2, [sp, #20]
 8015368:	4c43      	ldr	r4, [pc, #268]	; (8015478 <_strtod_l+0x5c8>)
 801536a:	1a9d      	subs	r5, r3, r2
 801536c:	00e9      	lsls	r1, r5, #3
 801536e:	1861      	adds	r1, r4, r1
 8015370:	0032      	movs	r2, r6
 8015372:	6808      	ldr	r0, [r1, #0]
 8015374:	6849      	ldr	r1, [r1, #4]
 8015376:	003b      	movs	r3, r7
 8015378:	f7ec fd5c 	bl	8001e34 <__aeabi_dmul>
 801537c:	9b07      	ldr	r3, [sp, #28]
 801537e:	1b5e      	subs	r6, r3, r5
 8015380:	00f6      	lsls	r6, r6, #3
 8015382:	19a6      	adds	r6, r4, r6
 8015384:	6832      	ldr	r2, [r6, #0]
 8015386:	6873      	ldr	r3, [r6, #4]
 8015388:	e78a      	b.n	80152a0 <_strtod_l+0x3f0>
 801538a:	9b07      	ldr	r3, [sp, #28]
 801538c:	3316      	adds	r3, #22
 801538e:	dba5      	blt.n	80152dc <_strtod_l+0x42c>
 8015390:	9b07      	ldr	r3, [sp, #28]
 8015392:	0030      	movs	r0, r6
 8015394:	00da      	lsls	r2, r3, #3
 8015396:	4b38      	ldr	r3, [pc, #224]	; (8015478 <_strtod_l+0x5c8>)
 8015398:	0039      	movs	r1, r7
 801539a:	1a9b      	subs	r3, r3, r2
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	685b      	ldr	r3, [r3, #4]
 80153a0:	f7ec f93e 	bl	8001620 <__aeabi_ddiv>
 80153a4:	e77e      	b.n	80152a4 <_strtod_l+0x3f4>
 80153a6:	2300      	movs	r3, #0
 80153a8:	0030      	movs	r0, r6
 80153aa:	0039      	movs	r1, r7
 80153ac:	001d      	movs	r5, r3
 80153ae:	1124      	asrs	r4, r4, #4
 80153b0:	2c01      	cmp	r4, #1
 80153b2:	dc1d      	bgt.n	80153f0 <_strtod_l+0x540>
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d001      	beq.n	80153bc <_strtod_l+0x50c>
 80153b8:	0006      	movs	r6, r0
 80153ba:	000f      	movs	r7, r1
 80153bc:	4b2f      	ldr	r3, [pc, #188]	; (801547c <_strtod_l+0x5cc>)
 80153be:	00ed      	lsls	r5, r5, #3
 80153c0:	18ff      	adds	r7, r7, r3
 80153c2:	4b2f      	ldr	r3, [pc, #188]	; (8015480 <_strtod_l+0x5d0>)
 80153c4:	0032      	movs	r2, r6
 80153c6:	195d      	adds	r5, r3, r5
 80153c8:	6828      	ldr	r0, [r5, #0]
 80153ca:	6869      	ldr	r1, [r5, #4]
 80153cc:	003b      	movs	r3, r7
 80153ce:	f7ec fd31 	bl	8001e34 <__aeabi_dmul>
 80153d2:	4b25      	ldr	r3, [pc, #148]	; (8015468 <_strtod_l+0x5b8>)
 80153d4:	4a2b      	ldr	r2, [pc, #172]	; (8015484 <_strtod_l+0x5d4>)
 80153d6:	0006      	movs	r6, r0
 80153d8:	400b      	ands	r3, r1
 80153da:	4293      	cmp	r3, r2
 80153dc:	d89a      	bhi.n	8015314 <_strtod_l+0x464>
 80153de:	4a2a      	ldr	r2, [pc, #168]	; (8015488 <_strtod_l+0x5d8>)
 80153e0:	4293      	cmp	r3, r2
 80153e2:	d913      	bls.n	801540c <_strtod_l+0x55c>
 80153e4:	2601      	movs	r6, #1
 80153e6:	4f29      	ldr	r7, [pc, #164]	; (801548c <_strtod_l+0x5dc>)
 80153e8:	4276      	negs	r6, r6
 80153ea:	2300      	movs	r3, #0
 80153ec:	9306      	str	r3, [sp, #24]
 80153ee:	e07b      	b.n	80154e8 <_strtod_l+0x638>
 80153f0:	2201      	movs	r2, #1
 80153f2:	4214      	tst	r4, r2
 80153f4:	d007      	beq.n	8015406 <_strtod_l+0x556>
 80153f6:	4a22      	ldr	r2, [pc, #136]	; (8015480 <_strtod_l+0x5d0>)
 80153f8:	00eb      	lsls	r3, r5, #3
 80153fa:	189b      	adds	r3, r3, r2
 80153fc:	681a      	ldr	r2, [r3, #0]
 80153fe:	685b      	ldr	r3, [r3, #4]
 8015400:	f7ec fd18 	bl	8001e34 <__aeabi_dmul>
 8015404:	2301      	movs	r3, #1
 8015406:	3501      	adds	r5, #1
 8015408:	1064      	asrs	r4, r4, #1
 801540a:	e7d1      	b.n	80153b0 <_strtod_l+0x500>
 801540c:	23d4      	movs	r3, #212	; 0xd4
 801540e:	049b      	lsls	r3, r3, #18
 8015410:	18cf      	adds	r7, r1, r3
 8015412:	e7ea      	b.n	80153ea <_strtod_l+0x53a>
 8015414:	2c00      	cmp	r4, #0
 8015416:	d0e8      	beq.n	80153ea <_strtod_l+0x53a>
 8015418:	230f      	movs	r3, #15
 801541a:	4264      	negs	r4, r4
 801541c:	4023      	ands	r3, r4
 801541e:	d00a      	beq.n	8015436 <_strtod_l+0x586>
 8015420:	4a15      	ldr	r2, [pc, #84]	; (8015478 <_strtod_l+0x5c8>)
 8015422:	00db      	lsls	r3, r3, #3
 8015424:	18d3      	adds	r3, r2, r3
 8015426:	0030      	movs	r0, r6
 8015428:	681a      	ldr	r2, [r3, #0]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	0039      	movs	r1, r7
 801542e:	f7ec f8f7 	bl	8001620 <__aeabi_ddiv>
 8015432:	0006      	movs	r6, r0
 8015434:	000f      	movs	r7, r1
 8015436:	1124      	asrs	r4, r4, #4
 8015438:	d0d7      	beq.n	80153ea <_strtod_l+0x53a>
 801543a:	2c1f      	cmp	r4, #31
 801543c:	dd28      	ble.n	8015490 <_strtod_l+0x5e0>
 801543e:	2400      	movs	r4, #0
 8015440:	9405      	str	r4, [sp, #20]
 8015442:	940b      	str	r4, [sp, #44]	; 0x2c
 8015444:	940a      	str	r4, [sp, #40]	; 0x28
 8015446:	2322      	movs	r3, #34	; 0x22
 8015448:	9a04      	ldr	r2, [sp, #16]
 801544a:	2600      	movs	r6, #0
 801544c:	6013      	str	r3, [r2, #0]
 801544e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015450:	2700      	movs	r7, #0
 8015452:	2b00      	cmp	r3, #0
 8015454:	d000      	beq.n	8015458 <_strtod_l+0x5a8>
 8015456:	e76a      	b.n	801532e <_strtod_l+0x47e>
 8015458:	e56b      	b.n	8014f32 <_strtod_l+0x82>
 801545a:	46c0      	nop			; (mov r8, r8)
 801545c:	00004e1f 	.word	0x00004e1f
 8015460:	0801c345 	.word	0x0801c345
 8015464:	0801c498 	.word	0x0801c498
 8015468:	7ff00000 	.word	0x7ff00000
 801546c:	0801c34d 	.word	0x0801c34d
 8015470:	0801c304 	.word	0x0801c304
 8015474:	fff80000 	.word	0xfff80000
 8015478:	0801c4d0 	.word	0x0801c4d0
 801547c:	fcb00000 	.word	0xfcb00000
 8015480:	0801c4a8 	.word	0x0801c4a8
 8015484:	7ca00000 	.word	0x7ca00000
 8015488:	7c900000 	.word	0x7c900000
 801548c:	7fefffff 	.word	0x7fefffff
 8015490:	2310      	movs	r3, #16
 8015492:	4023      	ands	r3, r4
 8015494:	9306      	str	r3, [sp, #24]
 8015496:	d001      	beq.n	801549c <_strtod_l+0x5ec>
 8015498:	236a      	movs	r3, #106	; 0x6a
 801549a:	9306      	str	r3, [sp, #24]
 801549c:	2300      	movs	r3, #0
 801549e:	0030      	movs	r0, r6
 80154a0:	0039      	movs	r1, r7
 80154a2:	001d      	movs	r5, r3
 80154a4:	2c00      	cmp	r4, #0
 80154a6:	dd00      	ble.n	80154aa <_strtod_l+0x5fa>
 80154a8:	e10e      	b.n	80156c8 <_strtod_l+0x818>
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d001      	beq.n	80154b2 <_strtod_l+0x602>
 80154ae:	0006      	movs	r6, r0
 80154b0:	000f      	movs	r7, r1
 80154b2:	9b06      	ldr	r3, [sp, #24]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d00f      	beq.n	80154d8 <_strtod_l+0x628>
 80154b8:	236b      	movs	r3, #107	; 0x6b
 80154ba:	0079      	lsls	r1, r7, #1
 80154bc:	0d49      	lsrs	r1, r1, #21
 80154be:	003a      	movs	r2, r7
 80154c0:	1a5b      	subs	r3, r3, r1
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	dd08      	ble.n	80154d8 <_strtod_l+0x628>
 80154c6:	2b1f      	cmp	r3, #31
 80154c8:	dc00      	bgt.n	80154cc <_strtod_l+0x61c>
 80154ca:	e112      	b.n	80156f2 <_strtod_l+0x842>
 80154cc:	2600      	movs	r6, #0
 80154ce:	2b34      	cmp	r3, #52	; 0x34
 80154d0:	dc00      	bgt.n	80154d4 <_strtod_l+0x624>
 80154d2:	e107      	b.n	80156e4 <_strtod_l+0x834>
 80154d4:	27dc      	movs	r7, #220	; 0xdc
 80154d6:	04bf      	lsls	r7, r7, #18
 80154d8:	2200      	movs	r2, #0
 80154da:	2300      	movs	r3, #0
 80154dc:	0030      	movs	r0, r6
 80154de:	0039      	movs	r1, r7
 80154e0:	f7ea ffbc 	bl	800045c <__aeabi_dcmpeq>
 80154e4:	2800      	cmp	r0, #0
 80154e6:	d1aa      	bne.n	801543e <_strtod_l+0x58e>
 80154e8:	9b08      	ldr	r3, [sp, #32]
 80154ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154ec:	9300      	str	r3, [sp, #0]
 80154ee:	9912      	ldr	r1, [sp, #72]	; 0x48
 80154f0:	9b05      	ldr	r3, [sp, #20]
 80154f2:	9804      	ldr	r0, [sp, #16]
 80154f4:	f003 f9ae 	bl	8018854 <__s2b>
 80154f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80154fa:	2800      	cmp	r0, #0
 80154fc:	d100      	bne.n	8015500 <_strtod_l+0x650>
 80154fe:	e709      	b.n	8015314 <_strtod_l+0x464>
 8015500:	9b07      	ldr	r3, [sp, #28]
 8015502:	9a07      	ldr	r2, [sp, #28]
 8015504:	17db      	asrs	r3, r3, #31
 8015506:	4252      	negs	r2, r2
 8015508:	4013      	ands	r3, r2
 801550a:	9315      	str	r3, [sp, #84]	; 0x54
 801550c:	9b07      	ldr	r3, [sp, #28]
 801550e:	2400      	movs	r4, #0
 8015510:	43db      	mvns	r3, r3
 8015512:	9a07      	ldr	r2, [sp, #28]
 8015514:	17db      	asrs	r3, r3, #31
 8015516:	401a      	ands	r2, r3
 8015518:	921c      	str	r2, [sp, #112]	; 0x70
 801551a:	9405      	str	r4, [sp, #20]
 801551c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801551e:	9804      	ldr	r0, [sp, #16]
 8015520:	6859      	ldr	r1, [r3, #4]
 8015522:	f003 f927 	bl	8018774 <_Balloc>
 8015526:	900a      	str	r0, [sp, #40]	; 0x28
 8015528:	2800      	cmp	r0, #0
 801552a:	d100      	bne.n	801552e <_strtod_l+0x67e>
 801552c:	e6f6      	b.n	801531c <_strtod_l+0x46c>
 801552e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015532:	691b      	ldr	r3, [r3, #16]
 8015534:	310c      	adds	r1, #12
 8015536:	1c9a      	adds	r2, r3, #2
 8015538:	0092      	lsls	r2, r2, #2
 801553a:	300c      	adds	r0, #12
 801553c:	9308      	str	r3, [sp, #32]
 801553e:	f7ff fa00 	bl	8014942 <memcpy>
 8015542:	ab24      	add	r3, sp, #144	; 0x90
 8015544:	9301      	str	r3, [sp, #4]
 8015546:	ab23      	add	r3, sp, #140	; 0x8c
 8015548:	9300      	str	r3, [sp, #0]
 801554a:	0032      	movs	r2, r6
 801554c:	003b      	movs	r3, r7
 801554e:	9804      	ldr	r0, [sp, #16]
 8015550:	960e      	str	r6, [sp, #56]	; 0x38
 8015552:	970f      	str	r7, [sp, #60]	; 0x3c
 8015554:	f003 fc22 	bl	8018d9c <__d2b>
 8015558:	9022      	str	r0, [sp, #136]	; 0x88
 801555a:	2800      	cmp	r0, #0
 801555c:	d100      	bne.n	8015560 <_strtod_l+0x6b0>
 801555e:	e6dd      	b.n	801531c <_strtod_l+0x46c>
 8015560:	2101      	movs	r1, #1
 8015562:	9804      	ldr	r0, [sp, #16]
 8015564:	f003 f9fd 	bl	8018962 <__i2b>
 8015568:	9005      	str	r0, [sp, #20]
 801556a:	2800      	cmp	r0, #0
 801556c:	d100      	bne.n	8015570 <_strtod_l+0x6c0>
 801556e:	e6d5      	b.n	801531c <_strtod_l+0x46c>
 8015570:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015572:	2b00      	cmp	r3, #0
 8015574:	da00      	bge.n	8015578 <_strtod_l+0x6c8>
 8015576:	e0c1      	b.n	80156fc <_strtod_l+0x84c>
 8015578:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801557a:	189d      	adds	r5, r3, r2
 801557c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801557e:	4694      	mov	ip, r2
 8015580:	9906      	ldr	r1, [sp, #24]
 8015582:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8015584:	1a5b      	subs	r3, r3, r1
 8015586:	2136      	movs	r1, #54	; 0x36
 8015588:	189b      	adds	r3, r3, r2
 801558a:	1a8a      	subs	r2, r1, r2
 801558c:	49b2      	ldr	r1, [pc, #712]	; (8015858 <_strtod_l+0x9a8>)
 801558e:	3b01      	subs	r3, #1
 8015590:	2001      	movs	r0, #1
 8015592:	428b      	cmp	r3, r1
 8015594:	db00      	blt.n	8015598 <_strtod_l+0x6e8>
 8015596:	e0bd      	b.n	8015714 <_strtod_l+0x864>
 8015598:	1ac9      	subs	r1, r1, r3
 801559a:	1a52      	subs	r2, r2, r1
 801559c:	291f      	cmp	r1, #31
 801559e:	dd00      	ble.n	80155a2 <_strtod_l+0x6f2>
 80155a0:	e0b1      	b.n	8015706 <_strtod_l+0x856>
 80155a2:	4088      	lsls	r0, r1
 80155a4:	2300      	movs	r3, #0
 80155a6:	9014      	str	r0, [sp, #80]	; 0x50
 80155a8:	9310      	str	r3, [sp, #64]	; 0x40
 80155aa:	18ab      	adds	r3, r5, r2
 80155ac:	9308      	str	r3, [sp, #32]
 80155ae:	0013      	movs	r3, r2
 80155b0:	9a06      	ldr	r2, [sp, #24]
 80155b2:	4463      	add	r3, ip
 80155b4:	18d3      	adds	r3, r2, r3
 80155b6:	9a08      	ldr	r2, [sp, #32]
 80155b8:	930c      	str	r3, [sp, #48]	; 0x30
 80155ba:	002b      	movs	r3, r5
 80155bc:	4295      	cmp	r5, r2
 80155be:	dd00      	ble.n	80155c2 <_strtod_l+0x712>
 80155c0:	0013      	movs	r3, r2
 80155c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80155c4:	4293      	cmp	r3, r2
 80155c6:	dd00      	ble.n	80155ca <_strtod_l+0x71a>
 80155c8:	0013      	movs	r3, r2
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	dd06      	ble.n	80155dc <_strtod_l+0x72c>
 80155ce:	9a08      	ldr	r2, [sp, #32]
 80155d0:	1aed      	subs	r5, r5, r3
 80155d2:	1ad2      	subs	r2, r2, r3
 80155d4:	9208      	str	r2, [sp, #32]
 80155d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80155d8:	1ad2      	subs	r2, r2, r3
 80155da:	920c      	str	r2, [sp, #48]	; 0x30
 80155dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d017      	beq.n	8015612 <_strtod_l+0x762>
 80155e2:	001a      	movs	r2, r3
 80155e4:	9905      	ldr	r1, [sp, #20]
 80155e6:	9804      	ldr	r0, [sp, #16]
 80155e8:	f003 fa54 	bl	8018a94 <__pow5mult>
 80155ec:	9005      	str	r0, [sp, #20]
 80155ee:	2800      	cmp	r0, #0
 80155f0:	d100      	bne.n	80155f4 <_strtod_l+0x744>
 80155f2:	e693      	b.n	801531c <_strtod_l+0x46c>
 80155f4:	0001      	movs	r1, r0
 80155f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80155f8:	9804      	ldr	r0, [sp, #16]
 80155fa:	f003 f9bb 	bl	8018974 <__multiply>
 80155fe:	9012      	str	r0, [sp, #72]	; 0x48
 8015600:	2800      	cmp	r0, #0
 8015602:	d100      	bne.n	8015606 <_strtod_l+0x756>
 8015604:	e68a      	b.n	801531c <_strtod_l+0x46c>
 8015606:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015608:	9804      	ldr	r0, [sp, #16]
 801560a:	f003 f8db 	bl	80187c4 <_Bfree>
 801560e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015610:	9322      	str	r3, [sp, #136]	; 0x88
 8015612:	9b08      	ldr	r3, [sp, #32]
 8015614:	2b00      	cmp	r3, #0
 8015616:	dd00      	ble.n	801561a <_strtod_l+0x76a>
 8015618:	e07f      	b.n	801571a <_strtod_l+0x86a>
 801561a:	9b07      	ldr	r3, [sp, #28]
 801561c:	2b00      	cmp	r3, #0
 801561e:	dd08      	ble.n	8015632 <_strtod_l+0x782>
 8015620:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015622:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015624:	9804      	ldr	r0, [sp, #16]
 8015626:	f003 fa35 	bl	8018a94 <__pow5mult>
 801562a:	900a      	str	r0, [sp, #40]	; 0x28
 801562c:	2800      	cmp	r0, #0
 801562e:	d100      	bne.n	8015632 <_strtod_l+0x782>
 8015630:	e674      	b.n	801531c <_strtod_l+0x46c>
 8015632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015634:	2b00      	cmp	r3, #0
 8015636:	dd08      	ble.n	801564a <_strtod_l+0x79a>
 8015638:	001a      	movs	r2, r3
 801563a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801563c:	9804      	ldr	r0, [sp, #16]
 801563e:	f003 fa6b 	bl	8018b18 <__lshift>
 8015642:	900a      	str	r0, [sp, #40]	; 0x28
 8015644:	2800      	cmp	r0, #0
 8015646:	d100      	bne.n	801564a <_strtod_l+0x79a>
 8015648:	e668      	b.n	801531c <_strtod_l+0x46c>
 801564a:	2d00      	cmp	r5, #0
 801564c:	dd08      	ble.n	8015660 <_strtod_l+0x7b0>
 801564e:	002a      	movs	r2, r5
 8015650:	9905      	ldr	r1, [sp, #20]
 8015652:	9804      	ldr	r0, [sp, #16]
 8015654:	f003 fa60 	bl	8018b18 <__lshift>
 8015658:	9005      	str	r0, [sp, #20]
 801565a:	2800      	cmp	r0, #0
 801565c:	d100      	bne.n	8015660 <_strtod_l+0x7b0>
 801565e:	e65d      	b.n	801531c <_strtod_l+0x46c>
 8015660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015662:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015664:	9804      	ldr	r0, [sp, #16]
 8015666:	f003 fac3 	bl	8018bf0 <__mdiff>
 801566a:	1e04      	subs	r4, r0, #0
 801566c:	d100      	bne.n	8015670 <_strtod_l+0x7c0>
 801566e:	e655      	b.n	801531c <_strtod_l+0x46c>
 8015670:	2500      	movs	r5, #0
 8015672:	68c3      	ldr	r3, [r0, #12]
 8015674:	9905      	ldr	r1, [sp, #20]
 8015676:	60c5      	str	r5, [r0, #12]
 8015678:	9312      	str	r3, [sp, #72]	; 0x48
 801567a:	f003 fa9f 	bl	8018bbc <__mcmp>
 801567e:	42a8      	cmp	r0, r5
 8015680:	da55      	bge.n	801572e <_strtod_l+0x87e>
 8015682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015684:	42ab      	cmp	r3, r5
 8015686:	d11b      	bne.n	80156c0 <_strtod_l+0x810>
 8015688:	42ae      	cmp	r6, r5
 801568a:	d119      	bne.n	80156c0 <_strtod_l+0x810>
 801568c:	033b      	lsls	r3, r7, #12
 801568e:	42ab      	cmp	r3, r5
 8015690:	d116      	bne.n	80156c0 <_strtod_l+0x810>
 8015692:	22d6      	movs	r2, #214	; 0xd6
 8015694:	4b71      	ldr	r3, [pc, #452]	; (801585c <_strtod_l+0x9ac>)
 8015696:	04d2      	lsls	r2, r2, #19
 8015698:	403b      	ands	r3, r7
 801569a:	4293      	cmp	r3, r2
 801569c:	d910      	bls.n	80156c0 <_strtod_l+0x810>
 801569e:	6963      	ldr	r3, [r4, #20]
 80156a0:	42ab      	cmp	r3, r5
 80156a2:	d102      	bne.n	80156aa <_strtod_l+0x7fa>
 80156a4:	6923      	ldr	r3, [r4, #16]
 80156a6:	2b01      	cmp	r3, #1
 80156a8:	dd0a      	ble.n	80156c0 <_strtod_l+0x810>
 80156aa:	0021      	movs	r1, r4
 80156ac:	2201      	movs	r2, #1
 80156ae:	9804      	ldr	r0, [sp, #16]
 80156b0:	f003 fa32 	bl	8018b18 <__lshift>
 80156b4:	9905      	ldr	r1, [sp, #20]
 80156b6:	0004      	movs	r4, r0
 80156b8:	f003 fa80 	bl	8018bbc <__mcmp>
 80156bc:	2800      	cmp	r0, #0
 80156be:	dc6b      	bgt.n	8015798 <_strtod_l+0x8e8>
 80156c0:	9b06      	ldr	r3, [sp, #24]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	d178      	bne.n	80157b8 <_strtod_l+0x908>
 80156c6:	e632      	b.n	801532e <_strtod_l+0x47e>
 80156c8:	2201      	movs	r2, #1
 80156ca:	4214      	tst	r4, r2
 80156cc:	d007      	beq.n	80156de <_strtod_l+0x82e>
 80156ce:	4a64      	ldr	r2, [pc, #400]	; (8015860 <_strtod_l+0x9b0>)
 80156d0:	00eb      	lsls	r3, r5, #3
 80156d2:	18d3      	adds	r3, r2, r3
 80156d4:	681a      	ldr	r2, [r3, #0]
 80156d6:	685b      	ldr	r3, [r3, #4]
 80156d8:	f7ec fbac 	bl	8001e34 <__aeabi_dmul>
 80156dc:	2301      	movs	r3, #1
 80156de:	3501      	adds	r5, #1
 80156e0:	1064      	asrs	r4, r4, #1
 80156e2:	e6df      	b.n	80154a4 <_strtod_l+0x5f4>
 80156e4:	2101      	movs	r1, #1
 80156e6:	3b20      	subs	r3, #32
 80156e8:	4249      	negs	r1, r1
 80156ea:	4099      	lsls	r1, r3
 80156ec:	400a      	ands	r2, r1
 80156ee:	0017      	movs	r7, r2
 80156f0:	e6f2      	b.n	80154d8 <_strtod_l+0x628>
 80156f2:	2201      	movs	r2, #1
 80156f4:	4252      	negs	r2, r2
 80156f6:	409a      	lsls	r2, r3
 80156f8:	4016      	ands	r6, r2
 80156fa:	e6ed      	b.n	80154d8 <_strtod_l+0x628>
 80156fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80156fe:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015700:	1ad2      	subs	r2, r2, r3
 8015702:	4694      	mov	ip, r2
 8015704:	e73c      	b.n	8015580 <_strtod_l+0x6d0>
 8015706:	4957      	ldr	r1, [pc, #348]	; (8015864 <_strtod_l+0x9b4>)
 8015708:	1acb      	subs	r3, r1, r3
 801570a:	0001      	movs	r1, r0
 801570c:	4099      	lsls	r1, r3
 801570e:	9110      	str	r1, [sp, #64]	; 0x40
 8015710:	9014      	str	r0, [sp, #80]	; 0x50
 8015712:	e74a      	b.n	80155aa <_strtod_l+0x6fa>
 8015714:	2300      	movs	r3, #0
 8015716:	9310      	str	r3, [sp, #64]	; 0x40
 8015718:	e7fa      	b.n	8015710 <_strtod_l+0x860>
 801571a:	9a08      	ldr	r2, [sp, #32]
 801571c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801571e:	9804      	ldr	r0, [sp, #16]
 8015720:	f003 f9fa 	bl	8018b18 <__lshift>
 8015724:	9022      	str	r0, [sp, #136]	; 0x88
 8015726:	2800      	cmp	r0, #0
 8015728:	d000      	beq.n	801572c <_strtod_l+0x87c>
 801572a:	e776      	b.n	801561a <_strtod_l+0x76a>
 801572c:	e5f6      	b.n	801531c <_strtod_l+0x46c>
 801572e:	970c      	str	r7, [sp, #48]	; 0x30
 8015730:	2800      	cmp	r0, #0
 8015732:	d000      	beq.n	8015736 <_strtod_l+0x886>
 8015734:	e0a0      	b.n	8015878 <_strtod_l+0x9c8>
 8015736:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015738:	033b      	lsls	r3, r7, #12
 801573a:	0b1b      	lsrs	r3, r3, #12
 801573c:	2a00      	cmp	r2, #0
 801573e:	d027      	beq.n	8015790 <_strtod_l+0x8e0>
 8015740:	4a49      	ldr	r2, [pc, #292]	; (8015868 <_strtod_l+0x9b8>)
 8015742:	4293      	cmp	r3, r2
 8015744:	d157      	bne.n	80157f6 <_strtod_l+0x946>
 8015746:	2201      	movs	r2, #1
 8015748:	9b06      	ldr	r3, [sp, #24]
 801574a:	4252      	negs	r2, r2
 801574c:	0031      	movs	r1, r6
 801574e:	0010      	movs	r0, r2
 8015750:	2b00      	cmp	r3, #0
 8015752:	d00b      	beq.n	801576c <_strtod_l+0x8bc>
 8015754:	25d4      	movs	r5, #212	; 0xd4
 8015756:	4b41      	ldr	r3, [pc, #260]	; (801585c <_strtod_l+0x9ac>)
 8015758:	04ed      	lsls	r5, r5, #19
 801575a:	403b      	ands	r3, r7
 801575c:	0010      	movs	r0, r2
 801575e:	42ab      	cmp	r3, r5
 8015760:	d804      	bhi.n	801576c <_strtod_l+0x8bc>
 8015762:	306c      	adds	r0, #108	; 0x6c
 8015764:	0d1b      	lsrs	r3, r3, #20
 8015766:	1ac3      	subs	r3, r0, r3
 8015768:	409a      	lsls	r2, r3
 801576a:	0010      	movs	r0, r2
 801576c:	4281      	cmp	r1, r0
 801576e:	d142      	bne.n	80157f6 <_strtod_l+0x946>
 8015770:	4b3e      	ldr	r3, [pc, #248]	; (801586c <_strtod_l+0x9bc>)
 8015772:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015774:	429a      	cmp	r2, r3
 8015776:	d102      	bne.n	801577e <_strtod_l+0x8ce>
 8015778:	1c4b      	adds	r3, r1, #1
 801577a:	d100      	bne.n	801577e <_strtod_l+0x8ce>
 801577c:	e5ce      	b.n	801531c <_strtod_l+0x46c>
 801577e:	4b37      	ldr	r3, [pc, #220]	; (801585c <_strtod_l+0x9ac>)
 8015780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015782:	2600      	movs	r6, #0
 8015784:	401a      	ands	r2, r3
 8015786:	0013      	movs	r3, r2
 8015788:	2280      	movs	r2, #128	; 0x80
 801578a:	0352      	lsls	r2, r2, #13
 801578c:	189f      	adds	r7, r3, r2
 801578e:	e797      	b.n	80156c0 <_strtod_l+0x810>
 8015790:	2b00      	cmp	r3, #0
 8015792:	d130      	bne.n	80157f6 <_strtod_l+0x946>
 8015794:	2e00      	cmp	r6, #0
 8015796:	d12e      	bne.n	80157f6 <_strtod_l+0x946>
 8015798:	9906      	ldr	r1, [sp, #24]
 801579a:	003b      	movs	r3, r7
 801579c:	4a2f      	ldr	r2, [pc, #188]	; (801585c <_strtod_l+0x9ac>)
 801579e:	2900      	cmp	r1, #0
 80157a0:	d020      	beq.n	80157e4 <_strtod_l+0x934>
 80157a2:	0011      	movs	r1, r2
 80157a4:	20d6      	movs	r0, #214	; 0xd6
 80157a6:	4039      	ands	r1, r7
 80157a8:	04c0      	lsls	r0, r0, #19
 80157aa:	4281      	cmp	r1, r0
 80157ac:	dc1a      	bgt.n	80157e4 <_strtod_l+0x934>
 80157ae:	23dc      	movs	r3, #220	; 0xdc
 80157b0:	049b      	lsls	r3, r3, #18
 80157b2:	4299      	cmp	r1, r3
 80157b4:	dc00      	bgt.n	80157b8 <_strtod_l+0x908>
 80157b6:	e646      	b.n	8015446 <_strtod_l+0x596>
 80157b8:	4b2d      	ldr	r3, [pc, #180]	; (8015870 <_strtod_l+0x9c0>)
 80157ba:	0030      	movs	r0, r6
 80157bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80157be:	2300      	movs	r3, #0
 80157c0:	931a      	str	r3, [sp, #104]	; 0x68
 80157c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80157c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157c6:	0039      	movs	r1, r7
 80157c8:	f7ec fb34 	bl	8001e34 <__aeabi_dmul>
 80157cc:	0006      	movs	r6, r0
 80157ce:	000f      	movs	r7, r1
 80157d0:	1e0b      	subs	r3, r1, #0
 80157d2:	d000      	beq.n	80157d6 <_strtod_l+0x926>
 80157d4:	e5ab      	b.n	801532e <_strtod_l+0x47e>
 80157d6:	2800      	cmp	r0, #0
 80157d8:	d000      	beq.n	80157dc <_strtod_l+0x92c>
 80157da:	e5a8      	b.n	801532e <_strtod_l+0x47e>
 80157dc:	9a04      	ldr	r2, [sp, #16]
 80157de:	3322      	adds	r3, #34	; 0x22
 80157e0:	6013      	str	r3, [r2, #0]
 80157e2:	e5a4      	b.n	801532e <_strtod_l+0x47e>
 80157e4:	2601      	movs	r6, #1
 80157e6:	4013      	ands	r3, r2
 80157e8:	4a22      	ldr	r2, [pc, #136]	; (8015874 <_strtod_l+0x9c4>)
 80157ea:	4276      	negs	r6, r6
 80157ec:	189b      	adds	r3, r3, r2
 80157ee:	4a1e      	ldr	r2, [pc, #120]	; (8015868 <_strtod_l+0x9b8>)
 80157f0:	431a      	orrs	r2, r3
 80157f2:	0017      	movs	r7, r2
 80157f4:	e764      	b.n	80156c0 <_strtod_l+0x810>
 80157f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d015      	beq.n	8015828 <_strtod_l+0x978>
 80157fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015800:	4213      	tst	r3, r2
 8015802:	d100      	bne.n	8015806 <_strtod_l+0x956>
 8015804:	e75c      	b.n	80156c0 <_strtod_l+0x810>
 8015806:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015808:	9a06      	ldr	r2, [sp, #24]
 801580a:	0030      	movs	r0, r6
 801580c:	0039      	movs	r1, r7
 801580e:	2b00      	cmp	r3, #0
 8015810:	d00f      	beq.n	8015832 <_strtod_l+0x982>
 8015812:	f7ff fb35 	bl	8014e80 <sulp>
 8015816:	0002      	movs	r2, r0
 8015818:	000b      	movs	r3, r1
 801581a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801581c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801581e:	f7eb fbe3 	bl	8000fe8 <__aeabi_dadd>
 8015822:	0006      	movs	r6, r0
 8015824:	000f      	movs	r7, r1
 8015826:	e74b      	b.n	80156c0 <_strtod_l+0x810>
 8015828:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801582a:	4233      	tst	r3, r6
 801582c:	d100      	bne.n	8015830 <_strtod_l+0x980>
 801582e:	e747      	b.n	80156c0 <_strtod_l+0x810>
 8015830:	e7e9      	b.n	8015806 <_strtod_l+0x956>
 8015832:	f7ff fb25 	bl	8014e80 <sulp>
 8015836:	0002      	movs	r2, r0
 8015838:	000b      	movs	r3, r1
 801583a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801583c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801583e:	f7ec fd6b 	bl	8002318 <__aeabi_dsub>
 8015842:	2200      	movs	r2, #0
 8015844:	2300      	movs	r3, #0
 8015846:	0006      	movs	r6, r0
 8015848:	000f      	movs	r7, r1
 801584a:	f7ea fe07 	bl	800045c <__aeabi_dcmpeq>
 801584e:	2800      	cmp	r0, #0
 8015850:	d000      	beq.n	8015854 <_strtod_l+0x9a4>
 8015852:	e5f8      	b.n	8015446 <_strtod_l+0x596>
 8015854:	e734      	b.n	80156c0 <_strtod_l+0x810>
 8015856:	46c0      	nop			; (mov r8, r8)
 8015858:	fffffc02 	.word	0xfffffc02
 801585c:	7ff00000 	.word	0x7ff00000
 8015860:	0801c318 	.word	0x0801c318
 8015864:	fffffbe2 	.word	0xfffffbe2
 8015868:	000fffff 	.word	0x000fffff
 801586c:	7fefffff 	.word	0x7fefffff
 8015870:	39500000 	.word	0x39500000
 8015874:	fff00000 	.word	0xfff00000
 8015878:	9905      	ldr	r1, [sp, #20]
 801587a:	0020      	movs	r0, r4
 801587c:	f003 fae2 	bl	8018e44 <__ratio>
 8015880:	2380      	movs	r3, #128	; 0x80
 8015882:	2200      	movs	r2, #0
 8015884:	05db      	lsls	r3, r3, #23
 8015886:	9008      	str	r0, [sp, #32]
 8015888:	9109      	str	r1, [sp, #36]	; 0x24
 801588a:	f7ea fdf7 	bl	800047c <__aeabi_dcmple>
 801588e:	2800      	cmp	r0, #0
 8015890:	d100      	bne.n	8015894 <_strtod_l+0x9e4>
 8015892:	e07f      	b.n	8015994 <_strtod_l+0xae4>
 8015894:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015896:	2b00      	cmp	r3, #0
 8015898:	d04b      	beq.n	8015932 <_strtod_l+0xa82>
 801589a:	2200      	movs	r2, #0
 801589c:	4b8a      	ldr	r3, [pc, #552]	; (8015ac8 <_strtod_l+0xc18>)
 801589e:	9210      	str	r2, [sp, #64]	; 0x40
 80158a0:	9311      	str	r3, [sp, #68]	; 0x44
 80158a2:	4b89      	ldr	r3, [pc, #548]	; (8015ac8 <_strtod_l+0xc18>)
 80158a4:	9308      	str	r3, [sp, #32]
 80158a6:	4a89      	ldr	r2, [pc, #548]	; (8015acc <_strtod_l+0xc1c>)
 80158a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158aa:	4013      	ands	r3, r2
 80158ac:	9314      	str	r3, [sp, #80]	; 0x50
 80158ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80158b0:	4b87      	ldr	r3, [pc, #540]	; (8015ad0 <_strtod_l+0xc20>)
 80158b2:	429a      	cmp	r2, r3
 80158b4:	d000      	beq.n	80158b8 <_strtod_l+0xa08>
 80158b6:	e0ba      	b.n	8015a2e <_strtod_l+0xb7e>
 80158b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80158ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158bc:	921a      	str	r2, [sp, #104]	; 0x68
 80158be:	931b      	str	r3, [sp, #108]	; 0x6c
 80158c0:	4a84      	ldr	r2, [pc, #528]	; (8015ad4 <_strtod_l+0xc24>)
 80158c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80158c4:	4694      	mov	ip, r2
 80158c6:	4463      	add	r3, ip
 80158c8:	001f      	movs	r7, r3
 80158ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80158cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80158ce:	0030      	movs	r0, r6
 80158d0:	0039      	movs	r1, r7
 80158d2:	920c      	str	r2, [sp, #48]	; 0x30
 80158d4:	930d      	str	r3, [sp, #52]	; 0x34
 80158d6:	f003 f9ef 	bl	8018cb8 <__ulp>
 80158da:	0002      	movs	r2, r0
 80158dc:	000b      	movs	r3, r1
 80158de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80158e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80158e2:	f7ec faa7 	bl	8001e34 <__aeabi_dmul>
 80158e6:	0032      	movs	r2, r6
 80158e8:	003b      	movs	r3, r7
 80158ea:	f7eb fb7d 	bl	8000fe8 <__aeabi_dadd>
 80158ee:	4a77      	ldr	r2, [pc, #476]	; (8015acc <_strtod_l+0xc1c>)
 80158f0:	4b79      	ldr	r3, [pc, #484]	; (8015ad8 <_strtod_l+0xc28>)
 80158f2:	0006      	movs	r6, r0
 80158f4:	400a      	ands	r2, r1
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d964      	bls.n	80159c4 <_strtod_l+0xb14>
 80158fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158fc:	4a77      	ldr	r2, [pc, #476]	; (8015adc <_strtod_l+0xc2c>)
 80158fe:	4293      	cmp	r3, r2
 8015900:	d103      	bne.n	801590a <_strtod_l+0xa5a>
 8015902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015904:	3301      	adds	r3, #1
 8015906:	d100      	bne.n	801590a <_strtod_l+0xa5a>
 8015908:	e508      	b.n	801531c <_strtod_l+0x46c>
 801590a:	2601      	movs	r6, #1
 801590c:	4f73      	ldr	r7, [pc, #460]	; (8015adc <_strtod_l+0xc2c>)
 801590e:	4276      	negs	r6, r6
 8015910:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015912:	9804      	ldr	r0, [sp, #16]
 8015914:	f002 ff56 	bl	80187c4 <_Bfree>
 8015918:	990a      	ldr	r1, [sp, #40]	; 0x28
 801591a:	9804      	ldr	r0, [sp, #16]
 801591c:	f002 ff52 	bl	80187c4 <_Bfree>
 8015920:	9905      	ldr	r1, [sp, #20]
 8015922:	9804      	ldr	r0, [sp, #16]
 8015924:	f002 ff4e 	bl	80187c4 <_Bfree>
 8015928:	0021      	movs	r1, r4
 801592a:	9804      	ldr	r0, [sp, #16]
 801592c:	f002 ff4a 	bl	80187c4 <_Bfree>
 8015930:	e5f4      	b.n	801551c <_strtod_l+0x66c>
 8015932:	2e00      	cmp	r6, #0
 8015934:	d11e      	bne.n	8015974 <_strtod_l+0xac4>
 8015936:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015938:	031b      	lsls	r3, r3, #12
 801593a:	d121      	bne.n	8015980 <_strtod_l+0xad0>
 801593c:	9808      	ldr	r0, [sp, #32]
 801593e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015940:	2200      	movs	r2, #0
 8015942:	4b61      	ldr	r3, [pc, #388]	; (8015ac8 <_strtod_l+0xc18>)
 8015944:	f7ea fd90 	bl	8000468 <__aeabi_dcmplt>
 8015948:	2800      	cmp	r0, #0
 801594a:	d11f      	bne.n	801598c <_strtod_l+0xadc>
 801594c:	9808      	ldr	r0, [sp, #32]
 801594e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015950:	2200      	movs	r2, #0
 8015952:	4b63      	ldr	r3, [pc, #396]	; (8015ae0 <_strtod_l+0xc30>)
 8015954:	f7ec fa6e 	bl	8001e34 <__aeabi_dmul>
 8015958:	0005      	movs	r5, r0
 801595a:	9108      	str	r1, [sp, #32]
 801595c:	2280      	movs	r2, #128	; 0x80
 801595e:	0612      	lsls	r2, r2, #24
 8015960:	4694      	mov	ip, r2
 8015962:	9b08      	ldr	r3, [sp, #32]
 8015964:	951e      	str	r5, [sp, #120]	; 0x78
 8015966:	4463      	add	r3, ip
 8015968:	931f      	str	r3, [sp, #124]	; 0x7c
 801596a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801596c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801596e:	9210      	str	r2, [sp, #64]	; 0x40
 8015970:	9311      	str	r3, [sp, #68]	; 0x44
 8015972:	e798      	b.n	80158a6 <_strtod_l+0x9f6>
 8015974:	2e01      	cmp	r6, #1
 8015976:	d103      	bne.n	8015980 <_strtod_l+0xad0>
 8015978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801597a:	2b00      	cmp	r3, #0
 801597c:	d100      	bne.n	8015980 <_strtod_l+0xad0>
 801597e:	e562      	b.n	8015446 <_strtod_l+0x596>
 8015980:	2200      	movs	r2, #0
 8015982:	4b58      	ldr	r3, [pc, #352]	; (8015ae4 <_strtod_l+0xc34>)
 8015984:	2500      	movs	r5, #0
 8015986:	9210      	str	r2, [sp, #64]	; 0x40
 8015988:	9311      	str	r3, [sp, #68]	; 0x44
 801598a:	e78a      	b.n	80158a2 <_strtod_l+0x9f2>
 801598c:	4b54      	ldr	r3, [pc, #336]	; (8015ae0 <_strtod_l+0xc30>)
 801598e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8015990:	9308      	str	r3, [sp, #32]
 8015992:	e7e3      	b.n	801595c <_strtod_l+0xaac>
 8015994:	4b52      	ldr	r3, [pc, #328]	; (8015ae0 <_strtod_l+0xc30>)
 8015996:	9808      	ldr	r0, [sp, #32]
 8015998:	9909      	ldr	r1, [sp, #36]	; 0x24
 801599a:	2200      	movs	r2, #0
 801599c:	f7ec fa4a 	bl	8001e34 <__aeabi_dmul>
 80159a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80159a2:	0005      	movs	r5, r0
 80159a4:	9108      	str	r1, [sp, #32]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d107      	bne.n	80159ba <_strtod_l+0xb0a>
 80159aa:	2380      	movs	r3, #128	; 0x80
 80159ac:	061b      	lsls	r3, r3, #24
 80159ae:	18cb      	adds	r3, r1, r3
 80159b0:	9016      	str	r0, [sp, #88]	; 0x58
 80159b2:	9317      	str	r3, [sp, #92]	; 0x5c
 80159b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80159b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80159b8:	e7d9      	b.n	801596e <_strtod_l+0xabe>
 80159ba:	0002      	movs	r2, r0
 80159bc:	9b08      	ldr	r3, [sp, #32]
 80159be:	9216      	str	r2, [sp, #88]	; 0x58
 80159c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80159c2:	e7f7      	b.n	80159b4 <_strtod_l+0xb04>
 80159c4:	23d4      	movs	r3, #212	; 0xd4
 80159c6:	049b      	lsls	r3, r3, #18
 80159c8:	18cf      	adds	r7, r1, r3
 80159ca:	9b06      	ldr	r3, [sp, #24]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d19f      	bne.n	8015910 <_strtod_l+0xa60>
 80159d0:	4b3e      	ldr	r3, [pc, #248]	; (8015acc <_strtod_l+0xc1c>)
 80159d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80159d4:	970c      	str	r7, [sp, #48]	; 0x30
 80159d6:	403b      	ands	r3, r7
 80159d8:	429a      	cmp	r2, r3
 80159da:	d199      	bne.n	8015910 <_strtod_l+0xa60>
 80159dc:	9908      	ldr	r1, [sp, #32]
 80159de:	0028      	movs	r0, r5
 80159e0:	f7ec fffe 	bl	80029e0 <__aeabi_d2iz>
 80159e4:	f7ed f832 	bl	8002a4c <__aeabi_i2d>
 80159e8:	000b      	movs	r3, r1
 80159ea:	0002      	movs	r2, r0
 80159ec:	9908      	ldr	r1, [sp, #32]
 80159ee:	0028      	movs	r0, r5
 80159f0:	f7ec fc92 	bl	8002318 <__aeabi_dsub>
 80159f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80159f6:	9008      	str	r0, [sp, #32]
 80159f8:	9109      	str	r1, [sp, #36]	; 0x24
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d104      	bne.n	8015a08 <_strtod_l+0xb58>
 80159fe:	2e00      	cmp	r6, #0
 8015a00:	d102      	bne.n	8015a08 <_strtod_l+0xb58>
 8015a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a04:	031b      	lsls	r3, r3, #12
 8015a06:	d058      	beq.n	8015aba <_strtod_l+0xc0a>
 8015a08:	9808      	ldr	r0, [sp, #32]
 8015a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a0c:	4a36      	ldr	r2, [pc, #216]	; (8015ae8 <_strtod_l+0xc38>)
 8015a0e:	4b37      	ldr	r3, [pc, #220]	; (8015aec <_strtod_l+0xc3c>)
 8015a10:	f7ea fd2a 	bl	8000468 <__aeabi_dcmplt>
 8015a14:	2800      	cmp	r0, #0
 8015a16:	d000      	beq.n	8015a1a <_strtod_l+0xb6a>
 8015a18:	e489      	b.n	801532e <_strtod_l+0x47e>
 8015a1a:	9808      	ldr	r0, [sp, #32]
 8015a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a1e:	4a34      	ldr	r2, [pc, #208]	; (8015af0 <_strtod_l+0xc40>)
 8015a20:	4b2f      	ldr	r3, [pc, #188]	; (8015ae0 <_strtod_l+0xc30>)
 8015a22:	f7ea fd35 	bl	8000490 <__aeabi_dcmpgt>
 8015a26:	2800      	cmp	r0, #0
 8015a28:	d100      	bne.n	8015a2c <_strtod_l+0xb7c>
 8015a2a:	e771      	b.n	8015910 <_strtod_l+0xa60>
 8015a2c:	e47f      	b.n	801532e <_strtod_l+0x47e>
 8015a2e:	9b06      	ldr	r3, [sp, #24]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d02a      	beq.n	8015a8a <_strtod_l+0xbda>
 8015a34:	23d4      	movs	r3, #212	; 0xd4
 8015a36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a38:	04db      	lsls	r3, r3, #19
 8015a3a:	429a      	cmp	r2, r3
 8015a3c:	d825      	bhi.n	8015a8a <_strtod_l+0xbda>
 8015a3e:	4a2d      	ldr	r2, [pc, #180]	; (8015af4 <_strtod_l+0xc44>)
 8015a40:	4b2d      	ldr	r3, [pc, #180]	; (8015af8 <_strtod_l+0xc48>)
 8015a42:	0028      	movs	r0, r5
 8015a44:	9908      	ldr	r1, [sp, #32]
 8015a46:	f7ea fd19 	bl	800047c <__aeabi_dcmple>
 8015a4a:	2800      	cmp	r0, #0
 8015a4c:	d016      	beq.n	8015a7c <_strtod_l+0xbcc>
 8015a4e:	0028      	movs	r0, r5
 8015a50:	9908      	ldr	r1, [sp, #32]
 8015a52:	f7ea fdcd 	bl	80005f0 <__aeabi_d2uiz>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d100      	bne.n	8015a5c <_strtod_l+0xbac>
 8015a5a:	3001      	adds	r0, #1
 8015a5c:	f7ed f830 	bl	8002ac0 <__aeabi_ui2d>
 8015a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a62:	0005      	movs	r5, r0
 8015a64:	9108      	str	r1, [sp, #32]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d122      	bne.n	8015ab0 <_strtod_l+0xc00>
 8015a6a:	2380      	movs	r3, #128	; 0x80
 8015a6c:	061b      	lsls	r3, r3, #24
 8015a6e:	18cb      	adds	r3, r1, r3
 8015a70:	9018      	str	r0, [sp, #96]	; 0x60
 8015a72:	9319      	str	r3, [sp, #100]	; 0x64
 8015a74:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015a76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015a78:	9210      	str	r2, [sp, #64]	; 0x40
 8015a7a:	9311      	str	r3, [sp, #68]	; 0x44
 8015a7c:	22d6      	movs	r2, #214	; 0xd6
 8015a7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015a80:	04d2      	lsls	r2, r2, #19
 8015a82:	189b      	adds	r3, r3, r2
 8015a84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a86:	1a9b      	subs	r3, r3, r2
 8015a88:	9311      	str	r3, [sp, #68]	; 0x44
 8015a8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015a8c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015a8e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015a90:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015a92:	f003 f911 	bl	8018cb8 <__ulp>
 8015a96:	0002      	movs	r2, r0
 8015a98:	000b      	movs	r3, r1
 8015a9a:	0030      	movs	r0, r6
 8015a9c:	0039      	movs	r1, r7
 8015a9e:	f7ec f9c9 	bl	8001e34 <__aeabi_dmul>
 8015aa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015aa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015aa6:	f7eb fa9f 	bl	8000fe8 <__aeabi_dadd>
 8015aaa:	0006      	movs	r6, r0
 8015aac:	000f      	movs	r7, r1
 8015aae:	e78c      	b.n	80159ca <_strtod_l+0xb1a>
 8015ab0:	0002      	movs	r2, r0
 8015ab2:	9b08      	ldr	r3, [sp, #32]
 8015ab4:	9218      	str	r2, [sp, #96]	; 0x60
 8015ab6:	9319      	str	r3, [sp, #100]	; 0x64
 8015ab8:	e7dc      	b.n	8015a74 <_strtod_l+0xbc4>
 8015aba:	4a0b      	ldr	r2, [pc, #44]	; (8015ae8 <_strtod_l+0xc38>)
 8015abc:	4b0f      	ldr	r3, [pc, #60]	; (8015afc <_strtod_l+0xc4c>)
 8015abe:	9808      	ldr	r0, [sp, #32]
 8015ac0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015ac2:	f7ea fcd1 	bl	8000468 <__aeabi_dcmplt>
 8015ac6:	e7ae      	b.n	8015a26 <_strtod_l+0xb76>
 8015ac8:	3ff00000 	.word	0x3ff00000
 8015acc:	7ff00000 	.word	0x7ff00000
 8015ad0:	7fe00000 	.word	0x7fe00000
 8015ad4:	fcb00000 	.word	0xfcb00000
 8015ad8:	7c9fffff 	.word	0x7c9fffff
 8015adc:	7fefffff 	.word	0x7fefffff
 8015ae0:	3fe00000 	.word	0x3fe00000
 8015ae4:	bff00000 	.word	0xbff00000
 8015ae8:	94a03595 	.word	0x94a03595
 8015aec:	3fdfffff 	.word	0x3fdfffff
 8015af0:	35afe535 	.word	0x35afe535
 8015af4:	ffc00000 	.word	0xffc00000
 8015af8:	41dfffff 	.word	0x41dfffff
 8015afc:	3fcfffff 	.word	0x3fcfffff

08015b00 <strtod>:
 8015b00:	4b06      	ldr	r3, [pc, #24]	; (8015b1c <strtod+0x1c>)
 8015b02:	b510      	push	{r4, lr}
 8015b04:	0004      	movs	r4, r0
 8015b06:	6818      	ldr	r0, [r3, #0]
 8015b08:	000a      	movs	r2, r1
 8015b0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d100      	bne.n	8015b12 <strtod+0x12>
 8015b10:	4b03      	ldr	r3, [pc, #12]	; (8015b20 <strtod+0x20>)
 8015b12:	0021      	movs	r1, r4
 8015b14:	f7ff f9cc 	bl	8014eb0 <_strtod_l>
 8015b18:	bd10      	pop	{r4, pc}
 8015b1a:	46c0      	nop			; (mov r8, r8)
 8015b1c:	20000118 	.word	0x20000118
 8015b20:	20000548 	.word	0x20000548

08015b24 <strtok>:
 8015b24:	4b03      	ldr	r3, [pc, #12]	; (8015b34 <strtok+0x10>)
 8015b26:	b510      	push	{r4, lr}
 8015b28:	681a      	ldr	r2, [r3, #0]
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	325c      	adds	r2, #92	; 0x5c
 8015b2e:	f000 f803 	bl	8015b38 <__strtok_r>
 8015b32:	bd10      	pop	{r4, pc}
 8015b34:	20000118 	.word	0x20000118

08015b38 <__strtok_r>:
 8015b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b3a:	2800      	cmp	r0, #0
 8015b3c:	d104      	bne.n	8015b48 <__strtok_r+0x10>
 8015b3e:	6810      	ldr	r0, [r2, #0]
 8015b40:	2800      	cmp	r0, #0
 8015b42:	d101      	bne.n	8015b48 <__strtok_r+0x10>
 8015b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b46:	0020      	movs	r0, r4
 8015b48:	000e      	movs	r6, r1
 8015b4a:	7805      	ldrb	r5, [r0, #0]
 8015b4c:	1c44      	adds	r4, r0, #1
 8015b4e:	7837      	ldrb	r7, [r6, #0]
 8015b50:	2f00      	cmp	r7, #0
 8015b52:	d104      	bne.n	8015b5e <__strtok_r+0x26>
 8015b54:	2d00      	cmp	r5, #0
 8015b56:	d110      	bne.n	8015b7a <__strtok_r+0x42>
 8015b58:	6015      	str	r5, [r2, #0]
 8015b5a:	0028      	movs	r0, r5
 8015b5c:	e7f2      	b.n	8015b44 <__strtok_r+0xc>
 8015b5e:	3601      	adds	r6, #1
 8015b60:	42bd      	cmp	r5, r7
 8015b62:	d1f4      	bne.n	8015b4e <__strtok_r+0x16>
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d1ee      	bne.n	8015b46 <__strtok_r+0xe>
 8015b68:	6014      	str	r4, [r2, #0]
 8015b6a:	7003      	strb	r3, [r0, #0]
 8015b6c:	e7ea      	b.n	8015b44 <__strtok_r+0xc>
 8015b6e:	0033      	movs	r3, r6
 8015b70:	e00d      	b.n	8015b8e <__strtok_r+0x56>
 8015b72:	3501      	adds	r5, #1
 8015b74:	2f00      	cmp	r7, #0
 8015b76:	d103      	bne.n	8015b80 <__strtok_r+0x48>
 8015b78:	001c      	movs	r4, r3
 8015b7a:	000d      	movs	r5, r1
 8015b7c:	7826      	ldrb	r6, [r4, #0]
 8015b7e:	1c63      	adds	r3, r4, #1
 8015b80:	782f      	ldrb	r7, [r5, #0]
 8015b82:	42be      	cmp	r6, r7
 8015b84:	d1f5      	bne.n	8015b72 <__strtok_r+0x3a>
 8015b86:	2e00      	cmp	r6, #0
 8015b88:	d0f1      	beq.n	8015b6e <__strtok_r+0x36>
 8015b8a:	2100      	movs	r1, #0
 8015b8c:	7021      	strb	r1, [r4, #0]
 8015b8e:	6013      	str	r3, [r2, #0]
 8015b90:	e7d8      	b.n	8015b44 <__strtok_r+0xc>
	...

08015b94 <_strtol_l.isra.0>:
 8015b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b96:	001f      	movs	r7, r3
 8015b98:	000e      	movs	r6, r1
 8015b9a:	b087      	sub	sp, #28
 8015b9c:	9005      	str	r0, [sp, #20]
 8015b9e:	9101      	str	r1, [sp, #4]
 8015ba0:	9202      	str	r2, [sp, #8]
 8015ba2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015ba4:	7834      	ldrb	r4, [r6, #0]
 8015ba6:	f7fe fc6d 	bl	8014484 <__locale_ctype_ptr_l>
 8015baa:	2208      	movs	r2, #8
 8015bac:	1900      	adds	r0, r0, r4
 8015bae:	7843      	ldrb	r3, [r0, #1]
 8015bb0:	1c75      	adds	r5, r6, #1
 8015bb2:	4013      	ands	r3, r2
 8015bb4:	d136      	bne.n	8015c24 <_strtol_l.isra.0+0x90>
 8015bb6:	2c2d      	cmp	r4, #45	; 0x2d
 8015bb8:	d136      	bne.n	8015c28 <_strtol_l.isra.0+0x94>
 8015bba:	1cb5      	adds	r5, r6, #2
 8015bbc:	7874      	ldrb	r4, [r6, #1]
 8015bbe:	2601      	movs	r6, #1
 8015bc0:	2f00      	cmp	r7, #0
 8015bc2:	d062      	beq.n	8015c8a <_strtol_l.isra.0+0xf6>
 8015bc4:	2f10      	cmp	r7, #16
 8015bc6:	d109      	bne.n	8015bdc <_strtol_l.isra.0+0x48>
 8015bc8:	2c30      	cmp	r4, #48	; 0x30
 8015bca:	d107      	bne.n	8015bdc <_strtol_l.isra.0+0x48>
 8015bcc:	2220      	movs	r2, #32
 8015bce:	782b      	ldrb	r3, [r5, #0]
 8015bd0:	4393      	bics	r3, r2
 8015bd2:	2b58      	cmp	r3, #88	; 0x58
 8015bd4:	d154      	bne.n	8015c80 <_strtol_l.isra.0+0xec>
 8015bd6:	2710      	movs	r7, #16
 8015bd8:	786c      	ldrb	r4, [r5, #1]
 8015bda:	3502      	adds	r5, #2
 8015bdc:	4b2d      	ldr	r3, [pc, #180]	; (8015c94 <_strtol_l.isra.0+0x100>)
 8015bde:	0039      	movs	r1, r7
 8015be0:	18f3      	adds	r3, r6, r3
 8015be2:	0018      	movs	r0, r3
 8015be4:	9303      	str	r3, [sp, #12]
 8015be6:	f7ea fb39 	bl	800025c <__aeabi_uidivmod>
 8015bea:	9104      	str	r1, [sp, #16]
 8015bec:	2101      	movs	r1, #1
 8015bee:	2300      	movs	r3, #0
 8015bf0:	4249      	negs	r1, r1
 8015bf2:	0002      	movs	r2, r0
 8015bf4:	468c      	mov	ip, r1
 8015bf6:	0018      	movs	r0, r3
 8015bf8:	0021      	movs	r1, r4
 8015bfa:	3930      	subs	r1, #48	; 0x30
 8015bfc:	2909      	cmp	r1, #9
 8015bfe:	d81a      	bhi.n	8015c36 <_strtol_l.isra.0+0xa2>
 8015c00:	000c      	movs	r4, r1
 8015c02:	42a7      	cmp	r7, r4
 8015c04:	dd23      	ble.n	8015c4e <_strtol_l.isra.0+0xba>
 8015c06:	1c59      	adds	r1, r3, #1
 8015c08:	d009      	beq.n	8015c1e <_strtol_l.isra.0+0x8a>
 8015c0a:	4663      	mov	r3, ip
 8015c0c:	4282      	cmp	r2, r0
 8015c0e:	d306      	bcc.n	8015c1e <_strtol_l.isra.0+0x8a>
 8015c10:	d102      	bne.n	8015c18 <_strtol_l.isra.0+0x84>
 8015c12:	9904      	ldr	r1, [sp, #16]
 8015c14:	42a1      	cmp	r1, r4
 8015c16:	db02      	blt.n	8015c1e <_strtol_l.isra.0+0x8a>
 8015c18:	2301      	movs	r3, #1
 8015c1a:	4378      	muls	r0, r7
 8015c1c:	1820      	adds	r0, r4, r0
 8015c1e:	782c      	ldrb	r4, [r5, #0]
 8015c20:	3501      	adds	r5, #1
 8015c22:	e7e9      	b.n	8015bf8 <_strtol_l.isra.0+0x64>
 8015c24:	002e      	movs	r6, r5
 8015c26:	e7bc      	b.n	8015ba2 <_strtol_l.isra.0+0xe>
 8015c28:	2c2b      	cmp	r4, #43	; 0x2b
 8015c2a:	d001      	beq.n	8015c30 <_strtol_l.isra.0+0x9c>
 8015c2c:	001e      	movs	r6, r3
 8015c2e:	e7c7      	b.n	8015bc0 <_strtol_l.isra.0+0x2c>
 8015c30:	1cb5      	adds	r5, r6, #2
 8015c32:	7874      	ldrb	r4, [r6, #1]
 8015c34:	e7fa      	b.n	8015c2c <_strtol_l.isra.0+0x98>
 8015c36:	0021      	movs	r1, r4
 8015c38:	3941      	subs	r1, #65	; 0x41
 8015c3a:	2919      	cmp	r1, #25
 8015c3c:	d801      	bhi.n	8015c42 <_strtol_l.isra.0+0xae>
 8015c3e:	3c37      	subs	r4, #55	; 0x37
 8015c40:	e7df      	b.n	8015c02 <_strtol_l.isra.0+0x6e>
 8015c42:	0021      	movs	r1, r4
 8015c44:	3961      	subs	r1, #97	; 0x61
 8015c46:	2919      	cmp	r1, #25
 8015c48:	d801      	bhi.n	8015c4e <_strtol_l.isra.0+0xba>
 8015c4a:	3c57      	subs	r4, #87	; 0x57
 8015c4c:	e7d9      	b.n	8015c02 <_strtol_l.isra.0+0x6e>
 8015c4e:	1c5a      	adds	r2, r3, #1
 8015c50:	d108      	bne.n	8015c64 <_strtol_l.isra.0+0xd0>
 8015c52:	9a05      	ldr	r2, [sp, #20]
 8015c54:	3323      	adds	r3, #35	; 0x23
 8015c56:	6013      	str	r3, [r2, #0]
 8015c58:	9b02      	ldr	r3, [sp, #8]
 8015c5a:	9803      	ldr	r0, [sp, #12]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d109      	bne.n	8015c74 <_strtol_l.isra.0+0xe0>
 8015c60:	b007      	add	sp, #28
 8015c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c64:	2e00      	cmp	r6, #0
 8015c66:	d000      	beq.n	8015c6a <_strtol_l.isra.0+0xd6>
 8015c68:	4240      	negs	r0, r0
 8015c6a:	9a02      	ldr	r2, [sp, #8]
 8015c6c:	2a00      	cmp	r2, #0
 8015c6e:	d0f7      	beq.n	8015c60 <_strtol_l.isra.0+0xcc>
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d001      	beq.n	8015c78 <_strtol_l.isra.0+0xe4>
 8015c74:	1e6b      	subs	r3, r5, #1
 8015c76:	9301      	str	r3, [sp, #4]
 8015c78:	9b02      	ldr	r3, [sp, #8]
 8015c7a:	9a01      	ldr	r2, [sp, #4]
 8015c7c:	601a      	str	r2, [r3, #0]
 8015c7e:	e7ef      	b.n	8015c60 <_strtol_l.isra.0+0xcc>
 8015c80:	2430      	movs	r4, #48	; 0x30
 8015c82:	2f00      	cmp	r7, #0
 8015c84:	d1aa      	bne.n	8015bdc <_strtol_l.isra.0+0x48>
 8015c86:	2708      	movs	r7, #8
 8015c88:	e7a8      	b.n	8015bdc <_strtol_l.isra.0+0x48>
 8015c8a:	2c30      	cmp	r4, #48	; 0x30
 8015c8c:	d09e      	beq.n	8015bcc <_strtol_l.isra.0+0x38>
 8015c8e:	270a      	movs	r7, #10
 8015c90:	e7a4      	b.n	8015bdc <_strtol_l.isra.0+0x48>
 8015c92:	46c0      	nop			; (mov r8, r8)
 8015c94:	7fffffff 	.word	0x7fffffff

08015c98 <strtol>:
 8015c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015c9a:	0013      	movs	r3, r2
 8015c9c:	4a06      	ldr	r2, [pc, #24]	; (8015cb8 <strtol+0x20>)
 8015c9e:	0005      	movs	r5, r0
 8015ca0:	6810      	ldr	r0, [r2, #0]
 8015ca2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015ca4:	2c00      	cmp	r4, #0
 8015ca6:	d100      	bne.n	8015caa <strtol+0x12>
 8015ca8:	4c04      	ldr	r4, [pc, #16]	; (8015cbc <strtol+0x24>)
 8015caa:	000a      	movs	r2, r1
 8015cac:	9400      	str	r4, [sp, #0]
 8015cae:	0029      	movs	r1, r5
 8015cb0:	f7ff ff70 	bl	8015b94 <_strtol_l.isra.0>
 8015cb4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015cb6:	46c0      	nop			; (mov r8, r8)
 8015cb8:	20000118 	.word	0x20000118
 8015cbc:	20000548 	.word	0x20000548

08015cc0 <_svfprintf_r>:
 8015cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cc2:	b0d9      	sub	sp, #356	; 0x164
 8015cc4:	910b      	str	r1, [sp, #44]	; 0x2c
 8015cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8015cc8:	001c      	movs	r4, r3
 8015cca:	900a      	str	r0, [sp, #40]	; 0x28
 8015ccc:	f002 fd26 	bl	801871c <_localeconv_r>
 8015cd0:	6803      	ldr	r3, [r0, #0]
 8015cd2:	0018      	movs	r0, r3
 8015cd4:	931c      	str	r3, [sp, #112]	; 0x70
 8015cd6:	f7ea fa1f 	bl	8000118 <strlen>
 8015cda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cdc:	9014      	str	r0, [sp, #80]	; 0x50
 8015cde:	899b      	ldrh	r3, [r3, #12]
 8015ce0:	061b      	lsls	r3, r3, #24
 8015ce2:	d518      	bpl.n	8015d16 <_svfprintf_r+0x56>
 8015ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ce6:	691b      	ldr	r3, [r3, #16]
 8015ce8:	9308      	str	r3, [sp, #32]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d113      	bne.n	8015d16 <_svfprintf_r+0x56>
 8015cee:	2140      	movs	r1, #64	; 0x40
 8015cf0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cf2:	f7fe fbed 	bl	80144d0 <_malloc_r>
 8015cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015cf8:	6018      	str	r0, [r3, #0]
 8015cfa:	6118      	str	r0, [r3, #16]
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	d107      	bne.n	8015d10 <_svfprintf_r+0x50>
 8015d00:	230c      	movs	r3, #12
 8015d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d04:	6013      	str	r3, [r2, #0]
 8015d06:	3b0d      	subs	r3, #13
 8015d08:	9315      	str	r3, [sp, #84]	; 0x54
 8015d0a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015d0c:	b059      	add	sp, #356	; 0x164
 8015d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d10:	2340      	movs	r3, #64	; 0x40
 8015d12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d14:	6153      	str	r3, [r2, #20]
 8015d16:	2600      	movs	r6, #0
 8015d18:	af2f      	add	r7, sp, #188	; 0xbc
 8015d1a:	972c      	str	r7, [sp, #176]	; 0xb0
 8015d1c:	962e      	str	r6, [sp, #184]	; 0xb8
 8015d1e:	962d      	str	r6, [sp, #180]	; 0xb4
 8015d20:	960d      	str	r6, [sp, #52]	; 0x34
 8015d22:	961a      	str	r6, [sp, #104]	; 0x68
 8015d24:	9619      	str	r6, [sp, #100]	; 0x64
 8015d26:	961e      	str	r6, [sp, #120]	; 0x78
 8015d28:	961d      	str	r6, [sp, #116]	; 0x74
 8015d2a:	9613      	str	r6, [sp, #76]	; 0x4c
 8015d2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8015d2e:	961f      	str	r6, [sp, #124]	; 0x7c
 8015d30:	9615      	str	r6, [sp, #84]	; 0x54
 8015d32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015d34:	782b      	ldrb	r3, [r5, #0]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d002      	beq.n	8015d40 <_svfprintf_r+0x80>
 8015d3a:	2b25      	cmp	r3, #37	; 0x25
 8015d3c:	d000      	beq.n	8015d40 <_svfprintf_r+0x80>
 8015d3e:	e095      	b.n	8015e6c <_svfprintf_r+0x1ac>
 8015d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d42:	1aee      	subs	r6, r5, r3
 8015d44:	d017      	beq.n	8015d76 <_svfprintf_r+0xb6>
 8015d46:	603b      	str	r3, [r7, #0]
 8015d48:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015d4a:	607e      	str	r6, [r7, #4]
 8015d4c:	199b      	adds	r3, r3, r6
 8015d4e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015d50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d52:	3708      	adds	r7, #8
 8015d54:	9308      	str	r3, [sp, #32]
 8015d56:	3301      	adds	r3, #1
 8015d58:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d5a:	2b07      	cmp	r3, #7
 8015d5c:	dd08      	ble.n	8015d70 <_svfprintf_r+0xb0>
 8015d5e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d64:	f003 f900 	bl	8018f68 <__ssprint_r>
 8015d68:	2800      	cmp	r0, #0
 8015d6a:	d000      	beq.n	8015d6e <_svfprintf_r+0xae>
 8015d6c:	e2d9      	b.n	8016322 <_svfprintf_r+0x662>
 8015d6e:	af2f      	add	r7, sp, #188	; 0xbc
 8015d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d72:	199b      	adds	r3, r3, r6
 8015d74:	9315      	str	r3, [sp, #84]	; 0x54
 8015d76:	782b      	ldrb	r3, [r5, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d101      	bne.n	8015d80 <_svfprintf_r+0xc0>
 8015d7c:	f001 f9e5 	bl	801714a <_svfprintf_r+0x148a>
 8015d80:	1c6b      	adds	r3, r5, #1
 8015d82:	221b      	movs	r2, #27
 8015d84:	9311      	str	r3, [sp, #68]	; 0x44
 8015d86:	2300      	movs	r3, #0
 8015d88:	a91e      	add	r1, sp, #120	; 0x78
 8015d8a:	1852      	adds	r2, r2, r1
 8015d8c:	7013      	strb	r3, [r2, #0]
 8015d8e:	2201      	movs	r2, #1
 8015d90:	001e      	movs	r6, r3
 8015d92:	2520      	movs	r5, #32
 8015d94:	4252      	negs	r2, r2
 8015d96:	9208      	str	r2, [sp, #32]
 8015d98:	9316      	str	r3, [sp, #88]	; 0x58
 8015d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d9c:	781b      	ldrb	r3, [r3, #0]
 8015d9e:	930e      	str	r3, [sp, #56]	; 0x38
 8015da0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015da2:	3301      	adds	r3, #1
 8015da4:	9311      	str	r3, [sp, #68]	; 0x44
 8015da6:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015da8:	3820      	subs	r0, #32
 8015daa:	285a      	cmp	r0, #90	; 0x5a
 8015dac:	d901      	bls.n	8015db2 <_svfprintf_r+0xf2>
 8015dae:	f000 fe3d 	bl	8016a2c <_svfprintf_r+0xd6c>
 8015db2:	f7ea f9c3 	bl	800013c <__gnu_thumb1_case_shi>
 8015db6:	009e      	.short	0x009e
 8015db8:	063b063b 	.word	0x063b063b
 8015dbc:	063b00a7 	.word	0x063b00a7
 8015dc0:	063b063b 	.word	0x063b063b
 8015dc4:	063b0080 	.word	0x063b0080
 8015dc8:	00a9063b 	.word	0x00a9063b
 8015dcc:	063b00b3 	.word	0x063b00b3
 8015dd0:	00b900b1 	.word	0x00b900b1
 8015dd4:	00dd063b 	.word	0x00dd063b
 8015dd8:	00df00df 	.word	0x00df00df
 8015ddc:	00df00df 	.word	0x00df00df
 8015de0:	00df00df 	.word	0x00df00df
 8015de4:	00df00df 	.word	0x00df00df
 8015de8:	063b00df 	.word	0x063b00df
 8015dec:	063b063b 	.word	0x063b063b
 8015df0:	063b063b 	.word	0x063b063b
 8015df4:	063b063b 	.word	0x063b063b
 8015df8:	063b0240 	.word	0x063b0240
 8015dfc:	01fd010a 	.word	0x01fd010a
 8015e00:	02400240 	.word	0x02400240
 8015e04:	063b0240 	.word	0x063b0240
 8015e08:	063b063b 	.word	0x063b063b
 8015e0c:	00f1063b 	.word	0x00f1063b
 8015e10:	063b063b 	.word	0x063b063b
 8015e14:	063b04e2 	.word	0x063b04e2
 8015e18:	063b063b 	.word	0x063b063b
 8015e1c:	063b0537 	.word	0x063b0537
 8015e20:	063b0557 	.word	0x063b0557
 8015e24:	005d063b 	.word	0x005d063b
 8015e28:	063b063b 	.word	0x063b063b
 8015e2c:	063b063b 	.word	0x063b063b
 8015e30:	063b063b 	.word	0x063b063b
 8015e34:	063b063b 	.word	0x063b063b
 8015e38:	063b0240 	.word	0x063b0240
 8015e3c:	01ff010a 	.word	0x01ff010a
 8015e40:	02400240 	.word	0x02400240
 8015e44:	00f30240 	.word	0x00f30240
 8015e48:	010601ff 	.word	0x010601ff
 8015e4c:	00ff063b 	.word	0x00ff063b
 8015e50:	04c5063b 	.word	0x04c5063b
 8015e54:	052704e4 	.word	0x052704e4
 8015e58:	063b0106 	.word	0x063b0106
 8015e5c:	fff20537 	.word	0xfff20537
 8015e60:	063b0559 	.word	0x063b0559
 8015e64:	0582063b 	.word	0x0582063b
 8015e68:	fff2063b 	.word	0xfff2063b
 8015e6c:	3501      	adds	r5, #1
 8015e6e:	e761      	b.n	8015d34 <_svfprintf_r+0x74>
 8015e70:	4bcb      	ldr	r3, [pc, #812]	; (80161a0 <_svfprintf_r+0x4e0>)
 8015e72:	2220      	movs	r2, #32
 8015e74:	931e      	str	r3, [sp, #120]	; 0x78
 8015e76:	4032      	ands	r2, r6
 8015e78:	d101      	bne.n	8015e7e <_svfprintf_r+0x1be>
 8015e7a:	f000 fd21 	bl	80168c0 <_svfprintf_r+0xc00>
 8015e7e:	2307      	movs	r3, #7
 8015e80:	3407      	adds	r4, #7
 8015e82:	439c      	bics	r4, r3
 8015e84:	0023      	movs	r3, r4
 8015e86:	3308      	adds	r3, #8
 8015e88:	9312      	str	r3, [sp, #72]	; 0x48
 8015e8a:	6823      	ldr	r3, [r4, #0]
 8015e8c:	6864      	ldr	r4, [r4, #4]
 8015e8e:	9306      	str	r3, [sp, #24]
 8015e90:	9407      	str	r4, [sp, #28]
 8015e92:	07f3      	lsls	r3, r6, #31
 8015e94:	d50a      	bpl.n	8015eac <_svfprintf_r+0x1ec>
 8015e96:	9b06      	ldr	r3, [sp, #24]
 8015e98:	9a07      	ldr	r2, [sp, #28]
 8015e9a:	4313      	orrs	r3, r2
 8015e9c:	d006      	beq.n	8015eac <_svfprintf_r+0x1ec>
 8015e9e:	2230      	movs	r2, #48	; 0x30
 8015ea0:	ab25      	add	r3, sp, #148	; 0x94
 8015ea2:	701a      	strb	r2, [r3, #0]
 8015ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ea6:	705a      	strb	r2, [r3, #1]
 8015ea8:	2302      	movs	r3, #2
 8015eaa:	431e      	orrs	r6, r3
 8015eac:	4bbd      	ldr	r3, [pc, #756]	; (80161a4 <_svfprintf_r+0x4e4>)
 8015eae:	401e      	ands	r6, r3
 8015eb0:	2302      	movs	r3, #2
 8015eb2:	f000 fc74 	bl	801679e <_svfprintf_r+0xade>
 8015eb6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015eb8:	f002 fc30 	bl	801871c <_localeconv_r>
 8015ebc:	6843      	ldr	r3, [r0, #4]
 8015ebe:	0018      	movs	r0, r3
 8015ec0:	931f      	str	r3, [sp, #124]	; 0x7c
 8015ec2:	f7ea f929 	bl	8000118 <strlen>
 8015ec6:	901b      	str	r0, [sp, #108]	; 0x6c
 8015ec8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015eca:	f002 fc27 	bl	801871c <_localeconv_r>
 8015ece:	6883      	ldr	r3, [r0, #8]
 8015ed0:	9313      	str	r3, [sp, #76]	; 0x4c
 8015ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d100      	bne.n	8015eda <_svfprintf_r+0x21a>
 8015ed8:	e75f      	b.n	8015d9a <_svfprintf_r+0xda>
 8015eda:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d100      	bne.n	8015ee2 <_svfprintf_r+0x222>
 8015ee0:	e75b      	b.n	8015d9a <_svfprintf_r+0xda>
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d100      	bne.n	8015eea <_svfprintf_r+0x22a>
 8015ee8:	e757      	b.n	8015d9a <_svfprintf_r+0xda>
 8015eea:	2380      	movs	r3, #128	; 0x80
 8015eec:	00db      	lsls	r3, r3, #3
 8015eee:	431e      	orrs	r6, r3
 8015ef0:	e753      	b.n	8015d9a <_svfprintf_r+0xda>
 8015ef2:	231b      	movs	r3, #27
 8015ef4:	aa1e      	add	r2, sp, #120	; 0x78
 8015ef6:	189b      	adds	r3, r3, r2
 8015ef8:	781a      	ldrb	r2, [r3, #0]
 8015efa:	2a00      	cmp	r2, #0
 8015efc:	d000      	beq.n	8015f00 <_svfprintf_r+0x240>
 8015efe:	e74c      	b.n	8015d9a <_svfprintf_r+0xda>
 8015f00:	701d      	strb	r5, [r3, #0]
 8015f02:	e74a      	b.n	8015d9a <_svfprintf_r+0xda>
 8015f04:	2301      	movs	r3, #1
 8015f06:	e7f2      	b.n	8015eee <_svfprintf_r+0x22e>
 8015f08:	6823      	ldr	r3, [r4, #0]
 8015f0a:	3404      	adds	r4, #4
 8015f0c:	9316      	str	r3, [sp, #88]	; 0x58
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	db00      	blt.n	8015f14 <_svfprintf_r+0x254>
 8015f12:	e742      	b.n	8015d9a <_svfprintf_r+0xda>
 8015f14:	425b      	negs	r3, r3
 8015f16:	9316      	str	r3, [sp, #88]	; 0x58
 8015f18:	2304      	movs	r3, #4
 8015f1a:	e7e8      	b.n	8015eee <_svfprintf_r+0x22e>
 8015f1c:	231b      	movs	r3, #27
 8015f1e:	aa1e      	add	r2, sp, #120	; 0x78
 8015f20:	189b      	adds	r3, r3, r2
 8015f22:	222b      	movs	r2, #43	; 0x2b
 8015f24:	701a      	strb	r2, [r3, #0]
 8015f26:	e738      	b.n	8015d9a <_svfprintf_r+0xda>
 8015f28:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f2c:	7812      	ldrb	r2, [r2, #0]
 8015f2e:	3301      	adds	r3, #1
 8015f30:	920e      	str	r2, [sp, #56]	; 0x38
 8015f32:	2a2a      	cmp	r2, #42	; 0x2a
 8015f34:	d008      	beq.n	8015f48 <_svfprintf_r+0x288>
 8015f36:	2200      	movs	r2, #0
 8015f38:	9208      	str	r2, [sp, #32]
 8015f3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015f3c:	001a      	movs	r2, r3
 8015f3e:	3930      	subs	r1, #48	; 0x30
 8015f40:	2909      	cmp	r1, #9
 8015f42:	d90c      	bls.n	8015f5e <_svfprintf_r+0x29e>
 8015f44:	9211      	str	r2, [sp, #68]	; 0x44
 8015f46:	e72e      	b.n	8015da6 <_svfprintf_r+0xe6>
 8015f48:	6821      	ldr	r1, [r4, #0]
 8015f4a:	1d22      	adds	r2, r4, #4
 8015f4c:	9108      	str	r1, [sp, #32]
 8015f4e:	2900      	cmp	r1, #0
 8015f50:	da02      	bge.n	8015f58 <_svfprintf_r+0x298>
 8015f52:	2101      	movs	r1, #1
 8015f54:	4249      	negs	r1, r1
 8015f56:	9108      	str	r1, [sp, #32]
 8015f58:	0014      	movs	r4, r2
 8015f5a:	9311      	str	r3, [sp, #68]	; 0x44
 8015f5c:	e71d      	b.n	8015d9a <_svfprintf_r+0xda>
 8015f5e:	200a      	movs	r0, #10
 8015f60:	9a08      	ldr	r2, [sp, #32]
 8015f62:	4342      	muls	r2, r0
 8015f64:	1852      	adds	r2, r2, r1
 8015f66:	9208      	str	r2, [sp, #32]
 8015f68:	781a      	ldrb	r2, [r3, #0]
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	920e      	str	r2, [sp, #56]	; 0x38
 8015f6e:	e7e4      	b.n	8015f3a <_svfprintf_r+0x27a>
 8015f70:	2380      	movs	r3, #128	; 0x80
 8015f72:	e7bc      	b.n	8015eee <_svfprintf_r+0x22e>
 8015f74:	2300      	movs	r3, #0
 8015f76:	9316      	str	r3, [sp, #88]	; 0x58
 8015f78:	220a      	movs	r2, #10
 8015f7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015f7c:	4353      	muls	r3, r2
 8015f7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f80:	3a30      	subs	r2, #48	; 0x30
 8015f82:	18d3      	adds	r3, r2, r3
 8015f84:	9316      	str	r3, [sp, #88]	; 0x58
 8015f86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f88:	1c5a      	adds	r2, r3, #1
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	9211      	str	r2, [sp, #68]	; 0x44
 8015f8e:	930e      	str	r3, [sp, #56]	; 0x38
 8015f90:	3b30      	subs	r3, #48	; 0x30
 8015f92:	2b09      	cmp	r3, #9
 8015f94:	d9f0      	bls.n	8015f78 <_svfprintf_r+0x2b8>
 8015f96:	e7d5      	b.n	8015f44 <_svfprintf_r+0x284>
 8015f98:	2308      	movs	r3, #8
 8015f9a:	e7a8      	b.n	8015eee <_svfprintf_r+0x22e>
 8015f9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f9e:	781b      	ldrb	r3, [r3, #0]
 8015fa0:	2b68      	cmp	r3, #104	; 0x68
 8015fa2:	d105      	bne.n	8015fb0 <_svfprintf_r+0x2f0>
 8015fa4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	9311      	str	r3, [sp, #68]	; 0x44
 8015faa:	2380      	movs	r3, #128	; 0x80
 8015fac:	009b      	lsls	r3, r3, #2
 8015fae:	e79e      	b.n	8015eee <_svfprintf_r+0x22e>
 8015fb0:	2340      	movs	r3, #64	; 0x40
 8015fb2:	e79c      	b.n	8015eee <_svfprintf_r+0x22e>
 8015fb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	2b6c      	cmp	r3, #108	; 0x6c
 8015fba:	d104      	bne.n	8015fc6 <_svfprintf_r+0x306>
 8015fbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fbe:	3301      	adds	r3, #1
 8015fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8015fc2:	432e      	orrs	r6, r5
 8015fc4:	e6e9      	b.n	8015d9a <_svfprintf_r+0xda>
 8015fc6:	2310      	movs	r3, #16
 8015fc8:	e791      	b.n	8015eee <_svfprintf_r+0x22e>
 8015fca:	1d23      	adds	r3, r4, #4
 8015fcc:	6822      	ldr	r2, [r4, #0]
 8015fce:	9312      	str	r3, [sp, #72]	; 0x48
 8015fd0:	ab3f      	add	r3, sp, #252	; 0xfc
 8015fd2:	701a      	strb	r2, [r3, #0]
 8015fd4:	221b      	movs	r2, #27
 8015fd6:	2000      	movs	r0, #0
 8015fd8:	a91e      	add	r1, sp, #120	; 0x78
 8015fda:	1852      	adds	r2, r2, r1
 8015fdc:	7010      	strb	r0, [r2, #0]
 8015fde:	2201      	movs	r2, #1
 8015fe0:	0005      	movs	r5, r0
 8015fe2:	900c      	str	r0, [sp, #48]	; 0x30
 8015fe4:	9208      	str	r2, [sp, #32]
 8015fe6:	9017      	str	r0, [sp, #92]	; 0x5c
 8015fe8:	9010      	str	r0, [sp, #64]	; 0x40
 8015fea:	900f      	str	r0, [sp, #60]	; 0x3c
 8015fec:	9309      	str	r3, [sp, #36]	; 0x24
 8015fee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ff0:	9a08      	ldr	r2, [sp, #32]
 8015ff2:	9318      	str	r3, [sp, #96]	; 0x60
 8015ff4:	4293      	cmp	r3, r2
 8015ff6:	da00      	bge.n	8015ffa <_svfprintf_r+0x33a>
 8015ff8:	9218      	str	r2, [sp, #96]	; 0x60
 8015ffa:	231b      	movs	r3, #27
 8015ffc:	aa1e      	add	r2, sp, #120	; 0x78
 8015ffe:	189b      	adds	r3, r3, r2
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	1e5a      	subs	r2, r3, #1
 8016004:	4193      	sbcs	r3, r2
 8016006:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016008:	18d3      	adds	r3, r2, r3
 801600a:	9318      	str	r3, [sp, #96]	; 0x60
 801600c:	2302      	movs	r3, #2
 801600e:	4033      	ands	r3, r6
 8016010:	9320      	str	r3, [sp, #128]	; 0x80
 8016012:	d002      	beq.n	801601a <_svfprintf_r+0x35a>
 8016014:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016016:	3302      	adds	r3, #2
 8016018:	9318      	str	r3, [sp, #96]	; 0x60
 801601a:	2384      	movs	r3, #132	; 0x84
 801601c:	4033      	ands	r3, r6
 801601e:	9321      	str	r3, [sp, #132]	; 0x84
 8016020:	d121      	bne.n	8016066 <_svfprintf_r+0x3a6>
 8016022:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016024:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016026:	1a9c      	subs	r4, r3, r2
 8016028:	2c00      	cmp	r4, #0
 801602a:	dd1c      	ble.n	8016066 <_svfprintf_r+0x3a6>
 801602c:	0039      	movs	r1, r7
 801602e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016030:	485d      	ldr	r0, [pc, #372]	; (80161a8 <_svfprintf_r+0x4e8>)
 8016032:	9322      	str	r3, [sp, #136]	; 0x88
 8016034:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016036:	3301      	adds	r3, #1
 8016038:	3108      	adds	r1, #8
 801603a:	6038      	str	r0, [r7, #0]
 801603c:	2c10      	cmp	r4, #16
 801603e:	dd01      	ble.n	8016044 <_svfprintf_r+0x384>
 8016040:	f000 fd08 	bl	8016a54 <_svfprintf_r+0xd94>
 8016044:	607c      	str	r4, [r7, #4]
 8016046:	18a4      	adds	r4, r4, r2
 8016048:	942e      	str	r4, [sp, #184]	; 0xb8
 801604a:	932d      	str	r3, [sp, #180]	; 0xb4
 801604c:	000f      	movs	r7, r1
 801604e:	2b07      	cmp	r3, #7
 8016050:	dd09      	ble.n	8016066 <_svfprintf_r+0x3a6>
 8016052:	aa2c      	add	r2, sp, #176	; 0xb0
 8016054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016056:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016058:	f002 ff86 	bl	8018f68 <__ssprint_r>
 801605c:	2800      	cmp	r0, #0
 801605e:	d001      	beq.n	8016064 <_svfprintf_r+0x3a4>
 8016060:	f001 f852 	bl	8017108 <_svfprintf_r+0x1448>
 8016064:	af2f      	add	r7, sp, #188	; 0xbc
 8016066:	231b      	movs	r3, #27
 8016068:	aa1e      	add	r2, sp, #120	; 0x78
 801606a:	189b      	adds	r3, r3, r2
 801606c:	781a      	ldrb	r2, [r3, #0]
 801606e:	2a00      	cmp	r2, #0
 8016070:	d017      	beq.n	80160a2 <_svfprintf_r+0x3e2>
 8016072:	603b      	str	r3, [r7, #0]
 8016074:	2301      	movs	r3, #1
 8016076:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016078:	607b      	str	r3, [r7, #4]
 801607a:	0013      	movs	r3, r2
 801607c:	3301      	adds	r3, #1
 801607e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016080:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016082:	3708      	adds	r7, #8
 8016084:	9322      	str	r3, [sp, #136]	; 0x88
 8016086:	3301      	adds	r3, #1
 8016088:	932d      	str	r3, [sp, #180]	; 0xb4
 801608a:	2b07      	cmp	r3, #7
 801608c:	dd09      	ble.n	80160a2 <_svfprintf_r+0x3e2>
 801608e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016092:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016094:	f002 ff68 	bl	8018f68 <__ssprint_r>
 8016098:	2800      	cmp	r0, #0
 801609a:	d001      	beq.n	80160a0 <_svfprintf_r+0x3e0>
 801609c:	f001 f834 	bl	8017108 <_svfprintf_r+0x1448>
 80160a0:	af2f      	add	r7, sp, #188	; 0xbc
 80160a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d019      	beq.n	80160dc <_svfprintf_r+0x41c>
 80160a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80160aa:	9320      	str	r3, [sp, #128]	; 0x80
 80160ac:	ab25      	add	r3, sp, #148	; 0x94
 80160ae:	603b      	str	r3, [r7, #0]
 80160b0:	2302      	movs	r3, #2
 80160b2:	607b      	str	r3, [r7, #4]
 80160b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80160b6:	3708      	adds	r7, #8
 80160b8:	3302      	adds	r3, #2
 80160ba:	932e      	str	r3, [sp, #184]	; 0xb8
 80160bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160be:	9320      	str	r3, [sp, #128]	; 0x80
 80160c0:	3301      	adds	r3, #1
 80160c2:	932d      	str	r3, [sp, #180]	; 0xb4
 80160c4:	2b07      	cmp	r3, #7
 80160c6:	dd09      	ble.n	80160dc <_svfprintf_r+0x41c>
 80160c8:	aa2c      	add	r2, sp, #176	; 0xb0
 80160ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160ce:	f002 ff4b 	bl	8018f68 <__ssprint_r>
 80160d2:	2800      	cmp	r0, #0
 80160d4:	d001      	beq.n	80160da <_svfprintf_r+0x41a>
 80160d6:	f001 f817 	bl	8017108 <_svfprintf_r+0x1448>
 80160da:	af2f      	add	r7, sp, #188	; 0xbc
 80160dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80160de:	2b80      	cmp	r3, #128	; 0x80
 80160e0:	d121      	bne.n	8016126 <_svfprintf_r+0x466>
 80160e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80160e4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80160e6:	1a9c      	subs	r4, r3, r2
 80160e8:	2c00      	cmp	r4, #0
 80160ea:	dd1c      	ble.n	8016126 <_svfprintf_r+0x466>
 80160ec:	0039      	movs	r1, r7
 80160ee:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160f0:	482e      	ldr	r0, [pc, #184]	; (80161ac <_svfprintf_r+0x4ec>)
 80160f2:	9320      	str	r3, [sp, #128]	; 0x80
 80160f4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80160f6:	3301      	adds	r3, #1
 80160f8:	3108      	adds	r1, #8
 80160fa:	6038      	str	r0, [r7, #0]
 80160fc:	2c10      	cmp	r4, #16
 80160fe:	dd01      	ble.n	8016104 <_svfprintf_r+0x444>
 8016100:	f000 fcbc 	bl	8016a7c <_svfprintf_r+0xdbc>
 8016104:	607c      	str	r4, [r7, #4]
 8016106:	18a4      	adds	r4, r4, r2
 8016108:	942e      	str	r4, [sp, #184]	; 0xb8
 801610a:	932d      	str	r3, [sp, #180]	; 0xb4
 801610c:	000f      	movs	r7, r1
 801610e:	2b07      	cmp	r3, #7
 8016110:	dd09      	ble.n	8016126 <_svfprintf_r+0x466>
 8016112:	aa2c      	add	r2, sp, #176	; 0xb0
 8016114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016116:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016118:	f002 ff26 	bl	8018f68 <__ssprint_r>
 801611c:	2800      	cmp	r0, #0
 801611e:	d001      	beq.n	8016124 <_svfprintf_r+0x464>
 8016120:	f000 fff2 	bl	8017108 <_svfprintf_r+0x1448>
 8016124:	af2f      	add	r7, sp, #188	; 0xbc
 8016126:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016128:	9a08      	ldr	r2, [sp, #32]
 801612a:	1a9c      	subs	r4, r3, r2
 801612c:	2c00      	cmp	r4, #0
 801612e:	dd1c      	ble.n	801616a <_svfprintf_r+0x4aa>
 8016130:	0039      	movs	r1, r7
 8016132:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016134:	481d      	ldr	r0, [pc, #116]	; (80161ac <_svfprintf_r+0x4ec>)
 8016136:	9317      	str	r3, [sp, #92]	; 0x5c
 8016138:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801613a:	3301      	adds	r3, #1
 801613c:	3108      	adds	r1, #8
 801613e:	6038      	str	r0, [r7, #0]
 8016140:	2c10      	cmp	r4, #16
 8016142:	dd01      	ble.n	8016148 <_svfprintf_r+0x488>
 8016144:	f000 fcb4 	bl	8016ab0 <_svfprintf_r+0xdf0>
 8016148:	18a2      	adds	r2, r4, r2
 801614a:	607c      	str	r4, [r7, #4]
 801614c:	922e      	str	r2, [sp, #184]	; 0xb8
 801614e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016150:	000f      	movs	r7, r1
 8016152:	2b07      	cmp	r3, #7
 8016154:	dd09      	ble.n	801616a <_svfprintf_r+0x4aa>
 8016156:	aa2c      	add	r2, sp, #176	; 0xb0
 8016158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801615a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801615c:	f002 ff04 	bl	8018f68 <__ssprint_r>
 8016160:	2800      	cmp	r0, #0
 8016162:	d001      	beq.n	8016168 <_svfprintf_r+0x4a8>
 8016164:	f000 ffd0 	bl	8017108 <_svfprintf_r+0x1448>
 8016168:	af2f      	add	r7, sp, #188	; 0xbc
 801616a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801616c:	9317      	str	r3, [sp, #92]	; 0x5c
 801616e:	05f3      	lsls	r3, r6, #23
 8016170:	d501      	bpl.n	8016176 <_svfprintf_r+0x4b6>
 8016172:	f000 fcb1 	bl	8016ad8 <_svfprintf_r+0xe18>
 8016176:	9a08      	ldr	r2, [sp, #32]
 8016178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801617a:	4694      	mov	ip, r2
 801617c:	603b      	str	r3, [r7, #0]
 801617e:	9b08      	ldr	r3, [sp, #32]
 8016180:	607b      	str	r3, [r7, #4]
 8016182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016184:	4463      	add	r3, ip
 8016186:	932e      	str	r3, [sp, #184]	; 0xb8
 8016188:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801618a:	9308      	str	r3, [sp, #32]
 801618c:	3301      	adds	r3, #1
 801618e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016190:	2b07      	cmp	r3, #7
 8016192:	dd01      	ble.n	8016198 <_svfprintf_r+0x4d8>
 8016194:	f000 fd94 	bl	8016cc0 <_svfprintf_r+0x1000>
 8016198:	3708      	adds	r7, #8
 801619a:	f000 fce4 	bl	8016b66 <_svfprintf_r+0xea6>
 801619e:	46c0      	nop			; (mov r8, r8)
 80161a0:	0801c361 	.word	0x0801c361
 80161a4:	fffffbff 	.word	0xfffffbff
 80161a8:	0801c374 	.word	0x0801c374
 80161ac:	0801c384 	.word	0x0801c384
 80161b0:	2310      	movs	r3, #16
 80161b2:	431e      	orrs	r6, r3
 80161b4:	06b3      	lsls	r3, r6, #26
 80161b6:	d52c      	bpl.n	8016212 <_svfprintf_r+0x552>
 80161b8:	2307      	movs	r3, #7
 80161ba:	3407      	adds	r4, #7
 80161bc:	439c      	bics	r4, r3
 80161be:	0023      	movs	r3, r4
 80161c0:	3308      	adds	r3, #8
 80161c2:	9312      	str	r3, [sp, #72]	; 0x48
 80161c4:	6823      	ldr	r3, [r4, #0]
 80161c6:	6864      	ldr	r4, [r4, #4]
 80161c8:	9306      	str	r3, [sp, #24]
 80161ca:	9407      	str	r4, [sp, #28]
 80161cc:	9b07      	ldr	r3, [sp, #28]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	da0b      	bge.n	80161ea <_svfprintf_r+0x52a>
 80161d2:	9906      	ldr	r1, [sp, #24]
 80161d4:	9a07      	ldr	r2, [sp, #28]
 80161d6:	2400      	movs	r4, #0
 80161d8:	424b      	negs	r3, r1
 80161da:	4194      	sbcs	r4, r2
 80161dc:	9306      	str	r3, [sp, #24]
 80161de:	9407      	str	r4, [sp, #28]
 80161e0:	231b      	movs	r3, #27
 80161e2:	aa1e      	add	r2, sp, #120	; 0x78
 80161e4:	189b      	adds	r3, r3, r2
 80161e6:	222d      	movs	r2, #45	; 0x2d
 80161e8:	701a      	strb	r2, [r3, #0]
 80161ea:	9b08      	ldr	r3, [sp, #32]
 80161ec:	3301      	adds	r3, #1
 80161ee:	d000      	beq.n	80161f2 <_svfprintf_r+0x532>
 80161f0:	e382      	b.n	80168f8 <_svfprintf_r+0xc38>
 80161f2:	9b07      	ldr	r3, [sp, #28]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d000      	beq.n	80161fa <_svfprintf_r+0x53a>
 80161f8:	e3b0      	b.n	801695c <_svfprintf_r+0xc9c>
 80161fa:	9b06      	ldr	r3, [sp, #24]
 80161fc:	2b09      	cmp	r3, #9
 80161fe:	d900      	bls.n	8016202 <_svfprintf_r+0x542>
 8016200:	e3ac      	b.n	801695c <_svfprintf_r+0xc9c>
 8016202:	23e7      	movs	r3, #231	; 0xe7
 8016204:	aa1e      	add	r2, sp, #120	; 0x78
 8016206:	189b      	adds	r3, r3, r2
 8016208:	9a06      	ldr	r2, [sp, #24]
 801620a:	3230      	adds	r2, #48	; 0x30
 801620c:	701a      	strb	r2, [r3, #0]
 801620e:	9309      	str	r3, [sp, #36]	; 0x24
 8016210:	e395      	b.n	801693e <_svfprintf_r+0xc7e>
 8016212:	1d23      	adds	r3, r4, #4
 8016214:	9312      	str	r3, [sp, #72]	; 0x48
 8016216:	06f3      	lsls	r3, r6, #27
 8016218:	d504      	bpl.n	8016224 <_svfprintf_r+0x564>
 801621a:	6823      	ldr	r3, [r4, #0]
 801621c:	9306      	str	r3, [sp, #24]
 801621e:	17db      	asrs	r3, r3, #31
 8016220:	9307      	str	r3, [sp, #28]
 8016222:	e7d3      	b.n	80161cc <_svfprintf_r+0x50c>
 8016224:	6823      	ldr	r3, [r4, #0]
 8016226:	0672      	lsls	r2, r6, #25
 8016228:	d501      	bpl.n	801622e <_svfprintf_r+0x56e>
 801622a:	b21b      	sxth	r3, r3
 801622c:	e7f6      	b.n	801621c <_svfprintf_r+0x55c>
 801622e:	05b2      	lsls	r2, r6, #22
 8016230:	d5f4      	bpl.n	801621c <_svfprintf_r+0x55c>
 8016232:	b25b      	sxtb	r3, r3
 8016234:	e7f2      	b.n	801621c <_svfprintf_r+0x55c>
 8016236:	2307      	movs	r3, #7
 8016238:	3407      	adds	r4, #7
 801623a:	439c      	bics	r4, r3
 801623c:	0023      	movs	r3, r4
 801623e:	2201      	movs	r2, #1
 8016240:	3308      	adds	r3, #8
 8016242:	9312      	str	r3, [sp, #72]	; 0x48
 8016244:	6823      	ldr	r3, [r4, #0]
 8016246:	4252      	negs	r2, r2
 8016248:	931a      	str	r3, [sp, #104]	; 0x68
 801624a:	6863      	ldr	r3, [r4, #4]
 801624c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801624e:	005c      	lsls	r4, r3, #1
 8016250:	0864      	lsrs	r4, r4, #1
 8016252:	9319      	str	r3, [sp, #100]	; 0x64
 8016254:	0028      	movs	r0, r5
 8016256:	4bcf      	ldr	r3, [pc, #828]	; (8016594 <_svfprintf_r+0x8d4>)
 8016258:	0021      	movs	r1, r4
 801625a:	f7ec fba5 	bl	80029a8 <__aeabi_dcmpun>
 801625e:	2800      	cmp	r0, #0
 8016260:	d125      	bne.n	80162ae <_svfprintf_r+0x5ee>
 8016262:	2201      	movs	r2, #1
 8016264:	4bcb      	ldr	r3, [pc, #812]	; (8016594 <_svfprintf_r+0x8d4>)
 8016266:	4252      	negs	r2, r2
 8016268:	0028      	movs	r0, r5
 801626a:	0021      	movs	r1, r4
 801626c:	f7ea f906 	bl	800047c <__aeabi_dcmple>
 8016270:	2800      	cmp	r0, #0
 8016272:	d11c      	bne.n	80162ae <_svfprintf_r+0x5ee>
 8016274:	2200      	movs	r2, #0
 8016276:	2300      	movs	r3, #0
 8016278:	981a      	ldr	r0, [sp, #104]	; 0x68
 801627a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801627c:	f7ea f8f4 	bl	8000468 <__aeabi_dcmplt>
 8016280:	2800      	cmp	r0, #0
 8016282:	d004      	beq.n	801628e <_svfprintf_r+0x5ce>
 8016284:	231b      	movs	r3, #27
 8016286:	aa1e      	add	r2, sp, #120	; 0x78
 8016288:	189b      	adds	r3, r3, r2
 801628a:	222d      	movs	r2, #45	; 0x2d
 801628c:	701a      	strb	r2, [r3, #0]
 801628e:	4bc2      	ldr	r3, [pc, #776]	; (8016598 <_svfprintf_r+0x8d8>)
 8016290:	9309      	str	r3, [sp, #36]	; 0x24
 8016292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016294:	2b47      	cmp	r3, #71	; 0x47
 8016296:	dc01      	bgt.n	801629c <_svfprintf_r+0x5dc>
 8016298:	4bc0      	ldr	r3, [pc, #768]	; (801659c <_svfprintf_r+0x8dc>)
 801629a:	9309      	str	r3, [sp, #36]	; 0x24
 801629c:	2380      	movs	r3, #128	; 0x80
 801629e:	439e      	bics	r6, r3
 80162a0:	2300      	movs	r3, #0
 80162a2:	930c      	str	r3, [sp, #48]	; 0x30
 80162a4:	3303      	adds	r3, #3
 80162a6:	9308      	str	r3, [sp, #32]
 80162a8:	2300      	movs	r3, #0
 80162aa:	9317      	str	r3, [sp, #92]	; 0x5c
 80162ac:	e34f      	b.n	801694e <_svfprintf_r+0xc8e>
 80162ae:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80162b0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80162b2:	981a      	ldr	r0, [sp, #104]	; 0x68
 80162b4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80162b6:	f7ec fb77 	bl	80029a8 <__aeabi_dcmpun>
 80162ba:	2800      	cmp	r0, #0
 80162bc:	d00e      	beq.n	80162dc <_svfprintf_r+0x61c>
 80162be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	da04      	bge.n	80162ce <_svfprintf_r+0x60e>
 80162c4:	231b      	movs	r3, #27
 80162c6:	aa1e      	add	r2, sp, #120	; 0x78
 80162c8:	189b      	adds	r3, r3, r2
 80162ca:	222d      	movs	r2, #45	; 0x2d
 80162cc:	701a      	strb	r2, [r3, #0]
 80162ce:	4bb4      	ldr	r3, [pc, #720]	; (80165a0 <_svfprintf_r+0x8e0>)
 80162d0:	9309      	str	r3, [sp, #36]	; 0x24
 80162d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162d4:	2b47      	cmp	r3, #71	; 0x47
 80162d6:	dce1      	bgt.n	801629c <_svfprintf_r+0x5dc>
 80162d8:	4bb2      	ldr	r3, [pc, #712]	; (80165a4 <_svfprintf_r+0x8e4>)
 80162da:	e7de      	b.n	801629a <_svfprintf_r+0x5da>
 80162dc:	2320      	movs	r3, #32
 80162de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162e0:	439a      	bics	r2, r3
 80162e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80162e4:	2a41      	cmp	r2, #65	; 0x41
 80162e6:	d124      	bne.n	8016332 <_svfprintf_r+0x672>
 80162e8:	2230      	movs	r2, #48	; 0x30
 80162ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80162ec:	ab25      	add	r3, sp, #148	; 0x94
 80162ee:	701a      	strb	r2, [r3, #0]
 80162f0:	3228      	adds	r2, #40	; 0x28
 80162f2:	2961      	cmp	r1, #97	; 0x61
 80162f4:	d100      	bne.n	80162f8 <_svfprintf_r+0x638>
 80162f6:	3220      	adds	r2, #32
 80162f8:	705a      	strb	r2, [r3, #1]
 80162fa:	2302      	movs	r3, #2
 80162fc:	431e      	orrs	r6, r3
 80162fe:	9b08      	ldr	r3, [sp, #32]
 8016300:	2b63      	cmp	r3, #99	; 0x63
 8016302:	dc00      	bgt.n	8016306 <_svfprintf_r+0x646>
 8016304:	e09e      	b.n	8016444 <_svfprintf_r+0x784>
 8016306:	1c59      	adds	r1, r3, #1
 8016308:	980a      	ldr	r0, [sp, #40]	; 0x28
 801630a:	f7fe f8e1 	bl	80144d0 <_malloc_r>
 801630e:	9009      	str	r0, [sp, #36]	; 0x24
 8016310:	2800      	cmp	r0, #0
 8016312:	d000      	beq.n	8016316 <_svfprintf_r+0x656>
 8016314:	e09b      	b.n	801644e <_svfprintf_r+0x78e>
 8016316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016318:	899a      	ldrh	r2, [r3, #12]
 801631a:	2340      	movs	r3, #64	; 0x40
 801631c:	4313      	orrs	r3, r2
 801631e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016320:	8193      	strh	r3, [r2, #12]
 8016322:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016324:	899b      	ldrh	r3, [r3, #12]
 8016326:	065b      	lsls	r3, r3, #25
 8016328:	d400      	bmi.n	801632c <_svfprintf_r+0x66c>
 801632a:	e4ee      	b.n	8015d0a <_svfprintf_r+0x4a>
 801632c:	2301      	movs	r3, #1
 801632e:	425b      	negs	r3, r3
 8016330:	e4ea      	b.n	8015d08 <_svfprintf_r+0x48>
 8016332:	9b08      	ldr	r3, [sp, #32]
 8016334:	900c      	str	r0, [sp, #48]	; 0x30
 8016336:	3301      	adds	r3, #1
 8016338:	d100      	bne.n	801633c <_svfprintf_r+0x67c>
 801633a:	e08b      	b.n	8016454 <_svfprintf_r+0x794>
 801633c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801633e:	2b47      	cmp	r3, #71	; 0x47
 8016340:	d103      	bne.n	801634a <_svfprintf_r+0x68a>
 8016342:	9b08      	ldr	r3, [sp, #32]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d100      	bne.n	801634a <_svfprintf_r+0x68a>
 8016348:	e087      	b.n	801645a <_svfprintf_r+0x79a>
 801634a:	2380      	movs	r3, #128	; 0x80
 801634c:	005b      	lsls	r3, r3, #1
 801634e:	4333      	orrs	r3, r6
 8016350:	9320      	str	r3, [sp, #128]	; 0x80
 8016352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016354:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8016356:	2b00      	cmp	r3, #0
 8016358:	db00      	blt.n	801635c <_svfprintf_r+0x69c>
 801635a:	e082      	b.n	8016462 <_svfprintf_r+0x7a2>
 801635c:	2280      	movs	r2, #128	; 0x80
 801635e:	0612      	lsls	r2, r2, #24
 8016360:	4694      	mov	ip, r2
 8016362:	4463      	add	r3, ip
 8016364:	930d      	str	r3, [sp, #52]	; 0x34
 8016366:	232d      	movs	r3, #45	; 0x2d
 8016368:	9322      	str	r3, [sp, #136]	; 0x88
 801636a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801636c:	2b41      	cmp	r3, #65	; 0x41
 801636e:	d000      	beq.n	8016372 <_svfprintf_r+0x6b2>
 8016370:	e105      	b.n	801657e <_svfprintf_r+0x8be>
 8016372:	aa26      	add	r2, sp, #152	; 0x98
 8016374:	0020      	movs	r0, r4
 8016376:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016378:	f002 fdc4 	bl	8018f04 <frexp>
 801637c:	23ff      	movs	r3, #255	; 0xff
 801637e:	2200      	movs	r2, #0
 8016380:	059b      	lsls	r3, r3, #22
 8016382:	f7eb fd57 	bl	8001e34 <__aeabi_dmul>
 8016386:	2200      	movs	r2, #0
 8016388:	2300      	movs	r3, #0
 801638a:	0004      	movs	r4, r0
 801638c:	000d      	movs	r5, r1
 801638e:	f7ea f865 	bl	800045c <__aeabi_dcmpeq>
 8016392:	2800      	cmp	r0, #0
 8016394:	d001      	beq.n	801639a <_svfprintf_r+0x6da>
 8016396:	2301      	movs	r3, #1
 8016398:	9326      	str	r3, [sp, #152]	; 0x98
 801639a:	4b83      	ldr	r3, [pc, #524]	; (80165a8 <_svfprintf_r+0x8e8>)
 801639c:	9317      	str	r3, [sp, #92]	; 0x5c
 801639e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80163a0:	2b61      	cmp	r3, #97	; 0x61
 80163a2:	d101      	bne.n	80163a8 <_svfprintf_r+0x6e8>
 80163a4:	4b81      	ldr	r3, [pc, #516]	; (80165ac <_svfprintf_r+0x8ec>)
 80163a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80163a8:	9b08      	ldr	r3, [sp, #32]
 80163aa:	3b01      	subs	r3, #1
 80163ac:	9310      	str	r3, [sp, #64]	; 0x40
 80163ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163b0:	9318      	str	r3, [sp, #96]	; 0x60
 80163b2:	2200      	movs	r2, #0
 80163b4:	4b7e      	ldr	r3, [pc, #504]	; (80165b0 <_svfprintf_r+0x8f0>)
 80163b6:	0020      	movs	r0, r4
 80163b8:	0029      	movs	r1, r5
 80163ba:	f7eb fd3b 	bl	8001e34 <__aeabi_dmul>
 80163be:	000d      	movs	r5, r1
 80163c0:	0004      	movs	r4, r0
 80163c2:	f7ec fb0d 	bl	80029e0 <__aeabi_d2iz>
 80163c6:	9021      	str	r0, [sp, #132]	; 0x84
 80163c8:	f7ec fb40 	bl	8002a4c <__aeabi_i2d>
 80163cc:	0002      	movs	r2, r0
 80163ce:	000b      	movs	r3, r1
 80163d0:	0020      	movs	r0, r4
 80163d2:	0029      	movs	r1, r5
 80163d4:	f7eb ffa0 	bl	8002318 <__aeabi_dsub>
 80163d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80163da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80163dc:	3301      	adds	r3, #1
 80163de:	930d      	str	r3, [sp, #52]	; 0x34
 80163e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80163e2:	0004      	movs	r4, r0
 80163e4:	5c9b      	ldrb	r3, [r3, r2]
 80163e6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80163e8:	000d      	movs	r5, r1
 80163ea:	7013      	strb	r3, [r2, #0]
 80163ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163ee:	9323      	str	r3, [sp, #140]	; 0x8c
 80163f0:	3301      	adds	r3, #1
 80163f2:	d00a      	beq.n	801640a <_svfprintf_r+0x74a>
 80163f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80163f6:	2200      	movs	r2, #0
 80163f8:	3b01      	subs	r3, #1
 80163fa:	9310      	str	r3, [sp, #64]	; 0x40
 80163fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163fe:	9318      	str	r3, [sp, #96]	; 0x60
 8016400:	2300      	movs	r3, #0
 8016402:	f7ea f82b 	bl	800045c <__aeabi_dcmpeq>
 8016406:	2800      	cmp	r0, #0
 8016408:	d0d3      	beq.n	80163b2 <_svfprintf_r+0x6f2>
 801640a:	2200      	movs	r2, #0
 801640c:	4b69      	ldr	r3, [pc, #420]	; (80165b4 <_svfprintf_r+0x8f4>)
 801640e:	0020      	movs	r0, r4
 8016410:	0029      	movs	r1, r5
 8016412:	f7ea f83d 	bl	8000490 <__aeabi_dcmpgt>
 8016416:	2800      	cmp	r0, #0
 8016418:	d126      	bne.n	8016468 <_svfprintf_r+0x7a8>
 801641a:	2200      	movs	r2, #0
 801641c:	4b65      	ldr	r3, [pc, #404]	; (80165b4 <_svfprintf_r+0x8f4>)
 801641e:	0020      	movs	r0, r4
 8016420:	0029      	movs	r1, r5
 8016422:	f7ea f81b 	bl	800045c <__aeabi_dcmpeq>
 8016426:	2800      	cmp	r0, #0
 8016428:	d002      	beq.n	8016430 <_svfprintf_r+0x770>
 801642a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801642c:	07db      	lsls	r3, r3, #31
 801642e:	d41b      	bmi.n	8016468 <_svfprintf_r+0x7a8>
 8016430:	2130      	movs	r1, #48	; 0x30
 8016432:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016434:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016436:	1898      	adds	r0, r3, r2
 8016438:	930d      	str	r3, [sp, #52]	; 0x34
 801643a:	1ac2      	subs	r2, r0, r3
 801643c:	d426      	bmi.n	801648c <_svfprintf_r+0x7cc>
 801643e:	7019      	strb	r1, [r3, #0]
 8016440:	3301      	adds	r3, #1
 8016442:	e7f9      	b.n	8016438 <_svfprintf_r+0x778>
 8016444:	2300      	movs	r3, #0
 8016446:	930c      	str	r3, [sp, #48]	; 0x30
 8016448:	ab3f      	add	r3, sp, #252	; 0xfc
 801644a:	9309      	str	r3, [sp, #36]	; 0x24
 801644c:	e77d      	b.n	801634a <_svfprintf_r+0x68a>
 801644e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016450:	930c      	str	r3, [sp, #48]	; 0x30
 8016452:	e77a      	b.n	801634a <_svfprintf_r+0x68a>
 8016454:	2306      	movs	r3, #6
 8016456:	9308      	str	r3, [sp, #32]
 8016458:	e777      	b.n	801634a <_svfprintf_r+0x68a>
 801645a:	9b08      	ldr	r3, [sp, #32]
 801645c:	930c      	str	r3, [sp, #48]	; 0x30
 801645e:	2301      	movs	r3, #1
 8016460:	e7f9      	b.n	8016456 <_svfprintf_r+0x796>
 8016462:	930d      	str	r3, [sp, #52]	; 0x34
 8016464:	2300      	movs	r3, #0
 8016466:	e77f      	b.n	8016368 <_svfprintf_r+0x6a8>
 8016468:	2030      	movs	r0, #48	; 0x30
 801646a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801646c:	932a      	str	r3, [sp, #168]	; 0xa8
 801646e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016470:	7bda      	ldrb	r2, [r3, #15]
 8016472:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016474:	3b01      	subs	r3, #1
 8016476:	932a      	str	r3, [sp, #168]	; 0xa8
 8016478:	7819      	ldrb	r1, [r3, #0]
 801647a:	4291      	cmp	r1, r2
 801647c:	d07d      	beq.n	801657a <_svfprintf_r+0x8ba>
 801647e:	1c4a      	adds	r2, r1, #1
 8016480:	b2d2      	uxtb	r2, r2
 8016482:	2939      	cmp	r1, #57	; 0x39
 8016484:	d101      	bne.n	801648a <_svfprintf_r+0x7ca>
 8016486:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016488:	7a92      	ldrb	r2, [r2, #10]
 801648a:	701a      	strb	r2, [r3, #0]
 801648c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801648e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016490:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8016492:	1a9b      	subs	r3, r3, r2
 8016494:	930d      	str	r3, [sp, #52]	; 0x34
 8016496:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016498:	2b47      	cmp	r3, #71	; 0x47
 801649a:	d000      	beq.n	801649e <_svfprintf_r+0x7de>
 801649c:	e0d2      	b.n	8016644 <_svfprintf_r+0x984>
 801649e:	1ceb      	adds	r3, r5, #3
 80164a0:	db03      	blt.n	80164aa <_svfprintf_r+0x7ea>
 80164a2:	9b08      	ldr	r3, [sp, #32]
 80164a4:	42ab      	cmp	r3, r5
 80164a6:	db00      	blt.n	80164aa <_svfprintf_r+0x7ea>
 80164a8:	e0fd      	b.n	80166a6 <_svfprintf_r+0x9e6>
 80164aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164ac:	3b02      	subs	r3, #2
 80164ae:	930e      	str	r3, [sp, #56]	; 0x38
 80164b0:	2238      	movs	r2, #56	; 0x38
 80164b2:	466b      	mov	r3, sp
 80164b4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80164b6:	189b      	adds	r3, r3, r2
 80164b8:	3a18      	subs	r2, #24
 80164ba:	4391      	bics	r1, r2
 80164bc:	1e6c      	subs	r4, r5, #1
 80164be:	000a      	movs	r2, r1
 80164c0:	9426      	str	r4, [sp, #152]	; 0x98
 80164c2:	781b      	ldrb	r3, [r3, #0]
 80164c4:	2100      	movs	r1, #0
 80164c6:	2a41      	cmp	r2, #65	; 0x41
 80164c8:	d102      	bne.n	80164d0 <_svfprintf_r+0x810>
 80164ca:	330f      	adds	r3, #15
 80164cc:	b2db      	uxtb	r3, r3
 80164ce:	3101      	adds	r1, #1
 80164d0:	aa28      	add	r2, sp, #160	; 0xa0
 80164d2:	7013      	strb	r3, [r2, #0]
 80164d4:	232b      	movs	r3, #43	; 0x2b
 80164d6:	2c00      	cmp	r4, #0
 80164d8:	da02      	bge.n	80164e0 <_svfprintf_r+0x820>
 80164da:	2401      	movs	r4, #1
 80164dc:	232d      	movs	r3, #45	; 0x2d
 80164de:	1b64      	subs	r4, r4, r5
 80164e0:	7053      	strb	r3, [r2, #1]
 80164e2:	2c09      	cmp	r4, #9
 80164e4:	dc00      	bgt.n	80164e8 <_svfprintf_r+0x828>
 80164e6:	e0c7      	b.n	8016678 <_svfprintf_r+0x9b8>
 80164e8:	2537      	movs	r5, #55	; 0x37
 80164ea:	ab1e      	add	r3, sp, #120	; 0x78
 80164ec:	18ed      	adds	r5, r5, r3
 80164ee:	1e6b      	subs	r3, r5, #1
 80164f0:	0020      	movs	r0, r4
 80164f2:	210a      	movs	r1, #10
 80164f4:	9308      	str	r3, [sp, #32]
 80164f6:	f7e9 ff9b 	bl	8000430 <__aeabi_idivmod>
 80164fa:	1e6b      	subs	r3, r5, #1
 80164fc:	3130      	adds	r1, #48	; 0x30
 80164fe:	7019      	strb	r1, [r3, #0]
 8016500:	0020      	movs	r0, r4
 8016502:	210a      	movs	r1, #10
 8016504:	f7e9 feae 	bl	8000264 <__divsi3>
 8016508:	0004      	movs	r4, r0
 801650a:	2809      	cmp	r0, #9
 801650c:	dd00      	ble.n	8016510 <_svfprintf_r+0x850>
 801650e:	e0ac      	b.n	801666a <_svfprintf_r+0x9aa>
 8016510:	232a      	movs	r3, #42	; 0x2a
 8016512:	2137      	movs	r1, #55	; 0x37
 8016514:	aa1e      	add	r2, sp, #120	; 0x78
 8016516:	3d02      	subs	r5, #2
 8016518:	3430      	adds	r4, #48	; 0x30
 801651a:	702c      	strb	r4, [r5, #0]
 801651c:	189b      	adds	r3, r3, r2
 801651e:	1889      	adds	r1, r1, r2
 8016520:	001a      	movs	r2, r3
 8016522:	428d      	cmp	r5, r1
 8016524:	d200      	bcs.n	8016528 <_svfprintf_r+0x868>
 8016526:	e0a2      	b.n	801666e <_svfprintf_r+0x9ae>
 8016528:	ab28      	add	r3, sp, #160	; 0xa0
 801652a:	1ad3      	subs	r3, r2, r3
 801652c:	931d      	str	r3, [sp, #116]	; 0x74
 801652e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016532:	4694      	mov	ip, r2
 8016534:	4463      	add	r3, ip
 8016536:	9308      	str	r3, [sp, #32]
 8016538:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801653a:	2b01      	cmp	r3, #1
 801653c:	dc01      	bgt.n	8016542 <_svfprintf_r+0x882>
 801653e:	07f3      	lsls	r3, r6, #31
 8016540:	d504      	bpl.n	801654c <_svfprintf_r+0x88c>
 8016542:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016544:	9b08      	ldr	r3, [sp, #32]
 8016546:	4694      	mov	ip, r2
 8016548:	4463      	add	r3, ip
 801654a:	9308      	str	r3, [sp, #32]
 801654c:	2280      	movs	r2, #128	; 0x80
 801654e:	4b1a      	ldr	r3, [pc, #104]	; (80165b8 <_svfprintf_r+0x8f8>)
 8016550:	0052      	lsls	r2, r2, #1
 8016552:	4033      	ands	r3, r6
 8016554:	431a      	orrs	r2, r3
 8016556:	2300      	movs	r3, #0
 8016558:	001d      	movs	r5, r3
 801655a:	9220      	str	r2, [sp, #128]	; 0x80
 801655c:	9310      	str	r3, [sp, #64]	; 0x40
 801655e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016560:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016562:	2b00      	cmp	r3, #0
 8016564:	d100      	bne.n	8016568 <_svfprintf_r+0x8a8>
 8016566:	e270      	b.n	8016a4a <_svfprintf_r+0xd8a>
 8016568:	231b      	movs	r3, #27
 801656a:	aa1e      	add	r2, sp, #120	; 0x78
 801656c:	189b      	adds	r3, r3, r2
 801656e:	222d      	movs	r2, #45	; 0x2d
 8016570:	701a      	strb	r2, [r3, #0]
 8016572:	2300      	movs	r3, #0
 8016574:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016576:	9317      	str	r3, [sp, #92]	; 0x5c
 8016578:	e539      	b.n	8015fee <_svfprintf_r+0x32e>
 801657a:	7018      	strb	r0, [r3, #0]
 801657c:	e779      	b.n	8016472 <_svfprintf_r+0x7b2>
 801657e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016580:	2b46      	cmp	r3, #70	; 0x46
 8016582:	d01b      	beq.n	80165bc <_svfprintf_r+0x8fc>
 8016584:	9d08      	ldr	r5, [sp, #32]
 8016586:	2b45      	cmp	r3, #69	; 0x45
 8016588:	d101      	bne.n	801658e <_svfprintf_r+0x8ce>
 801658a:	9b08      	ldr	r3, [sp, #32]
 801658c:	1c5d      	adds	r5, r3, #1
 801658e:	2302      	movs	r3, #2
 8016590:	e016      	b.n	80165c0 <_svfprintf_r+0x900>
 8016592:	46c0      	nop			; (mov r8, r8)
 8016594:	7fefffff 	.word	0x7fefffff
 8016598:	0801c344 	.word	0x0801c344
 801659c:	0801c340 	.word	0x0801c340
 80165a0:	0801c34c 	.word	0x0801c34c
 80165a4:	0801c348 	.word	0x0801c348
 80165a8:	0801c361 	.word	0x0801c361
 80165ac:	0801c350 	.word	0x0801c350
 80165b0:	40300000 	.word	0x40300000
 80165b4:	3fe00000 	.word	0x3fe00000
 80165b8:	fffffbff 	.word	0xfffffbff
 80165bc:	2303      	movs	r3, #3
 80165be:	9d08      	ldr	r5, [sp, #32]
 80165c0:	aa2a      	add	r2, sp, #168	; 0xa8
 80165c2:	9204      	str	r2, [sp, #16]
 80165c4:	aa27      	add	r2, sp, #156	; 0x9c
 80165c6:	9203      	str	r2, [sp, #12]
 80165c8:	aa26      	add	r2, sp, #152	; 0x98
 80165ca:	9202      	str	r2, [sp, #8]
 80165cc:	9300      	str	r3, [sp, #0]
 80165ce:	9501      	str	r5, [sp, #4]
 80165d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165d2:	0022      	movs	r2, r4
 80165d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165d6:	f000 fe79 	bl	80172cc <_dtoa_r>
 80165da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165dc:	9009      	str	r0, [sp, #36]	; 0x24
 80165de:	2b47      	cmp	r3, #71	; 0x47
 80165e0:	d101      	bne.n	80165e6 <_svfprintf_r+0x926>
 80165e2:	07f3      	lsls	r3, r6, #31
 80165e4:	d524      	bpl.n	8016630 <_svfprintf_r+0x970>
 80165e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165e8:	195b      	adds	r3, r3, r5
 80165ea:	9310      	str	r3, [sp, #64]	; 0x40
 80165ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165ee:	2b46      	cmp	r3, #70	; 0x46
 80165f0:	d113      	bne.n	801661a <_svfprintf_r+0x95a>
 80165f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	2b30      	cmp	r3, #48	; 0x30
 80165f8:	d10a      	bne.n	8016610 <_svfprintf_r+0x950>
 80165fa:	2200      	movs	r2, #0
 80165fc:	2300      	movs	r3, #0
 80165fe:	0020      	movs	r0, r4
 8016600:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016602:	f7e9 ff2b 	bl	800045c <__aeabi_dcmpeq>
 8016606:	2800      	cmp	r0, #0
 8016608:	d102      	bne.n	8016610 <_svfprintf_r+0x950>
 801660a:	2301      	movs	r3, #1
 801660c:	1b5d      	subs	r5, r3, r5
 801660e:	9526      	str	r5, [sp, #152]	; 0x98
 8016610:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016612:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016614:	4694      	mov	ip, r2
 8016616:	4463      	add	r3, ip
 8016618:	9310      	str	r3, [sp, #64]	; 0x40
 801661a:	2200      	movs	r2, #0
 801661c:	2300      	movs	r3, #0
 801661e:	0020      	movs	r0, r4
 8016620:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016622:	f7e9 ff1b 	bl	800045c <__aeabi_dcmpeq>
 8016626:	2230      	movs	r2, #48	; 0x30
 8016628:	2800      	cmp	r0, #0
 801662a:	d006      	beq.n	801663a <_svfprintf_r+0x97a>
 801662c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801662e:	932a      	str	r3, [sp, #168]	; 0xa8
 8016630:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016632:	e72c      	b.n	801648e <_svfprintf_r+0x7ce>
 8016634:	1c59      	adds	r1, r3, #1
 8016636:	912a      	str	r1, [sp, #168]	; 0xa8
 8016638:	701a      	strb	r2, [r3, #0]
 801663a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801663c:	9910      	ldr	r1, [sp, #64]	; 0x40
 801663e:	4299      	cmp	r1, r3
 8016640:	d8f8      	bhi.n	8016634 <_svfprintf_r+0x974>
 8016642:	e7f5      	b.n	8016630 <_svfprintf_r+0x970>
 8016644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016646:	2b46      	cmp	r3, #70	; 0x46
 8016648:	d000      	beq.n	801664c <_svfprintf_r+0x98c>
 801664a:	e731      	b.n	80164b0 <_svfprintf_r+0x7f0>
 801664c:	9b08      	ldr	r3, [sp, #32]
 801664e:	2d00      	cmp	r5, #0
 8016650:	dd21      	ble.n	8016696 <_svfprintf_r+0x9d6>
 8016652:	2b00      	cmp	r3, #0
 8016654:	d101      	bne.n	801665a <_svfprintf_r+0x99a>
 8016656:	07f3      	lsls	r3, r6, #31
 8016658:	d54a      	bpl.n	80166f0 <_svfprintf_r+0xa30>
 801665a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801665c:	18eb      	adds	r3, r5, r3
 801665e:	9a08      	ldr	r2, [sp, #32]
 8016660:	18d3      	adds	r3, r2, r3
 8016662:	9308      	str	r3, [sp, #32]
 8016664:	2366      	movs	r3, #102	; 0x66
 8016666:	930e      	str	r3, [sp, #56]	; 0x38
 8016668:	e034      	b.n	80166d4 <_svfprintf_r+0xa14>
 801666a:	9d08      	ldr	r5, [sp, #32]
 801666c:	e73f      	b.n	80164ee <_svfprintf_r+0x82e>
 801666e:	782a      	ldrb	r2, [r5, #0]
 8016670:	3501      	adds	r5, #1
 8016672:	701a      	strb	r2, [r3, #0]
 8016674:	3301      	adds	r3, #1
 8016676:	e753      	b.n	8016520 <_svfprintf_r+0x860>
 8016678:	232a      	movs	r3, #42	; 0x2a
 801667a:	aa1e      	add	r2, sp, #120	; 0x78
 801667c:	189b      	adds	r3, r3, r2
 801667e:	2900      	cmp	r1, #0
 8016680:	d105      	bne.n	801668e <_svfprintf_r+0x9ce>
 8016682:	2230      	movs	r2, #48	; 0x30
 8016684:	ab28      	add	r3, sp, #160	; 0xa0
 8016686:	709a      	strb	r2, [r3, #2]
 8016688:	232b      	movs	r3, #43	; 0x2b
 801668a:	aa1e      	add	r2, sp, #120	; 0x78
 801668c:	189b      	adds	r3, r3, r2
 801668e:	3430      	adds	r4, #48	; 0x30
 8016690:	1c5a      	adds	r2, r3, #1
 8016692:	701c      	strb	r4, [r3, #0]
 8016694:	e748      	b.n	8016528 <_svfprintf_r+0x868>
 8016696:	2b00      	cmp	r3, #0
 8016698:	d102      	bne.n	80166a0 <_svfprintf_r+0x9e0>
 801669a:	3301      	adds	r3, #1
 801669c:	421e      	tst	r6, r3
 801669e:	d029      	beq.n	80166f4 <_svfprintf_r+0xa34>
 80166a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166a2:	3301      	adds	r3, #1
 80166a4:	e7db      	b.n	801665e <_svfprintf_r+0x99e>
 80166a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166a8:	42ab      	cmp	r3, r5
 80166aa:	dc06      	bgt.n	80166ba <_svfprintf_r+0x9fa>
 80166ac:	07f3      	lsls	r3, r6, #31
 80166ae:	d524      	bpl.n	80166fa <_svfprintf_r+0xa3a>
 80166b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166b2:	18eb      	adds	r3, r5, r3
 80166b4:	9308      	str	r3, [sp, #32]
 80166b6:	2367      	movs	r3, #103	; 0x67
 80166b8:	e7d5      	b.n	8016666 <_svfprintf_r+0x9a6>
 80166ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80166bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166be:	4694      	mov	ip, r2
 80166c0:	4463      	add	r3, ip
 80166c2:	9308      	str	r3, [sp, #32]
 80166c4:	2367      	movs	r3, #103	; 0x67
 80166c6:	930e      	str	r3, [sp, #56]	; 0x38
 80166c8:	2d00      	cmp	r5, #0
 80166ca:	dc03      	bgt.n	80166d4 <_svfprintf_r+0xa14>
 80166cc:	9b08      	ldr	r3, [sp, #32]
 80166ce:	1b5b      	subs	r3, r3, r5
 80166d0:	3301      	adds	r3, #1
 80166d2:	9308      	str	r3, [sp, #32]
 80166d4:	2380      	movs	r3, #128	; 0x80
 80166d6:	00db      	lsls	r3, r3, #3
 80166d8:	401e      	ands	r6, r3
 80166da:	2300      	movs	r3, #0
 80166dc:	960f      	str	r6, [sp, #60]	; 0x3c
 80166de:	9310      	str	r3, [sp, #64]	; 0x40
 80166e0:	2e00      	cmp	r6, #0
 80166e2:	d100      	bne.n	80166e6 <_svfprintf_r+0xa26>
 80166e4:	e73c      	b.n	8016560 <_svfprintf_r+0x8a0>
 80166e6:	2d00      	cmp	r5, #0
 80166e8:	dc27      	bgt.n	801673a <_svfprintf_r+0xa7a>
 80166ea:	2300      	movs	r3, #0
 80166ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80166ee:	e737      	b.n	8016560 <_svfprintf_r+0x8a0>
 80166f0:	9508      	str	r5, [sp, #32]
 80166f2:	e7b7      	b.n	8016664 <_svfprintf_r+0x9a4>
 80166f4:	2266      	movs	r2, #102	; 0x66
 80166f6:	920e      	str	r2, [sp, #56]	; 0x38
 80166f8:	e7eb      	b.n	80166d2 <_svfprintf_r+0xa12>
 80166fa:	9508      	str	r5, [sp, #32]
 80166fc:	e7db      	b.n	80166b6 <_svfprintf_r+0x9f6>
 80166fe:	42ab      	cmp	r3, r5
 8016700:	da0e      	bge.n	8016720 <_svfprintf_r+0xa60>
 8016702:	1aed      	subs	r5, r5, r3
 8016704:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016706:	785b      	ldrb	r3, [r3, #1]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d012      	beq.n	8016732 <_svfprintf_r+0xa72>
 801670c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801670e:	3301      	adds	r3, #1
 8016710:	930f      	str	r3, [sp, #60]	; 0x3c
 8016712:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016714:	3301      	adds	r3, #1
 8016716:	9313      	str	r3, [sp, #76]	; 0x4c
 8016718:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801671a:	781b      	ldrb	r3, [r3, #0]
 801671c:	2bff      	cmp	r3, #255	; 0xff
 801671e:	d1ee      	bne.n	80166fe <_svfprintf_r+0xa3e>
 8016720:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016724:	189b      	adds	r3, r3, r2
 8016726:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016728:	4353      	muls	r3, r2
 801672a:	9a08      	ldr	r2, [sp, #32]
 801672c:	189b      	adds	r3, r3, r2
 801672e:	9308      	str	r3, [sp, #32]
 8016730:	e716      	b.n	8016560 <_svfprintf_r+0x8a0>
 8016732:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016734:	3301      	adds	r3, #1
 8016736:	9310      	str	r3, [sp, #64]	; 0x40
 8016738:	e7ee      	b.n	8016718 <_svfprintf_r+0xa58>
 801673a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801673c:	930f      	str	r3, [sp, #60]	; 0x3c
 801673e:	e7eb      	b.n	8016718 <_svfprintf_r+0xa58>
 8016740:	0022      	movs	r2, r4
 8016742:	ca08      	ldmia	r2!, {r3}
 8016744:	9212      	str	r2, [sp, #72]	; 0x48
 8016746:	06b2      	lsls	r2, r6, #26
 8016748:	d508      	bpl.n	801675c <_svfprintf_r+0xa9c>
 801674a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801674c:	601a      	str	r2, [r3, #0]
 801674e:	17d2      	asrs	r2, r2, #31
 8016750:	605a      	str	r2, [r3, #4]
 8016752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016754:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8016756:	9309      	str	r3, [sp, #36]	; 0x24
 8016758:	f7ff faeb 	bl	8015d32 <_svfprintf_r+0x72>
 801675c:	06f2      	lsls	r2, r6, #27
 801675e:	d502      	bpl.n	8016766 <_svfprintf_r+0xaa6>
 8016760:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016762:	601a      	str	r2, [r3, #0]
 8016764:	e7f5      	b.n	8016752 <_svfprintf_r+0xa92>
 8016766:	0672      	lsls	r2, r6, #25
 8016768:	d502      	bpl.n	8016770 <_svfprintf_r+0xab0>
 801676a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801676c:	801a      	strh	r2, [r3, #0]
 801676e:	e7f0      	b.n	8016752 <_svfprintf_r+0xa92>
 8016770:	05b2      	lsls	r2, r6, #22
 8016772:	d5f5      	bpl.n	8016760 <_svfprintf_r+0xaa0>
 8016774:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016776:	701a      	strb	r2, [r3, #0]
 8016778:	e7eb      	b.n	8016752 <_svfprintf_r+0xa92>
 801677a:	2310      	movs	r3, #16
 801677c:	431e      	orrs	r6, r3
 801677e:	2220      	movs	r2, #32
 8016780:	4032      	ands	r2, r6
 8016782:	d025      	beq.n	80167d0 <_svfprintf_r+0xb10>
 8016784:	2307      	movs	r3, #7
 8016786:	3407      	adds	r4, #7
 8016788:	439c      	bics	r4, r3
 801678a:	0023      	movs	r3, r4
 801678c:	3308      	adds	r3, #8
 801678e:	9312      	str	r3, [sp, #72]	; 0x48
 8016790:	6823      	ldr	r3, [r4, #0]
 8016792:	6864      	ldr	r4, [r4, #4]
 8016794:	9306      	str	r3, [sp, #24]
 8016796:	9407      	str	r4, [sp, #28]
 8016798:	4bc2      	ldr	r3, [pc, #776]	; (8016aa4 <_svfprintf_r+0xde4>)
 801679a:	401e      	ands	r6, r3
 801679c:	2300      	movs	r3, #0
 801679e:	221b      	movs	r2, #27
 80167a0:	a91e      	add	r1, sp, #120	; 0x78
 80167a2:	1852      	adds	r2, r2, r1
 80167a4:	2100      	movs	r1, #0
 80167a6:	7011      	strb	r1, [r2, #0]
 80167a8:	9a08      	ldr	r2, [sp, #32]
 80167aa:	3201      	adds	r2, #1
 80167ac:	d100      	bne.n	80167b0 <_svfprintf_r+0xaf0>
 80167ae:	e0a6      	b.n	80168fe <_svfprintf_r+0xc3e>
 80167b0:	0032      	movs	r2, r6
 80167b2:	2180      	movs	r1, #128	; 0x80
 80167b4:	9807      	ldr	r0, [sp, #28]
 80167b6:	438e      	bics	r6, r1
 80167b8:	9906      	ldr	r1, [sp, #24]
 80167ba:	4301      	orrs	r1, r0
 80167bc:	d000      	beq.n	80167c0 <_svfprintf_r+0xb00>
 80167be:	e09e      	b.n	80168fe <_svfprintf_r+0xc3e>
 80167c0:	9908      	ldr	r1, [sp, #32]
 80167c2:	2900      	cmp	r1, #0
 80167c4:	d100      	bne.n	80167c8 <_svfprintf_r+0xb08>
 80167c6:	e125      	b.n	8016a14 <_svfprintf_r+0xd54>
 80167c8:	2b01      	cmp	r3, #1
 80167ca:	d000      	beq.n	80167ce <_svfprintf_r+0xb0e>
 80167cc:	e09a      	b.n	8016904 <_svfprintf_r+0xc44>
 80167ce:	e518      	b.n	8016202 <_svfprintf_r+0x542>
 80167d0:	1d23      	adds	r3, r4, #4
 80167d2:	9312      	str	r3, [sp, #72]	; 0x48
 80167d4:	2310      	movs	r3, #16
 80167d6:	4033      	ands	r3, r6
 80167d8:	d003      	beq.n	80167e2 <_svfprintf_r+0xb22>
 80167da:	6823      	ldr	r3, [r4, #0]
 80167dc:	9306      	str	r3, [sp, #24]
 80167de:	9207      	str	r2, [sp, #28]
 80167e0:	e7da      	b.n	8016798 <_svfprintf_r+0xad8>
 80167e2:	2240      	movs	r2, #64	; 0x40
 80167e4:	4032      	ands	r2, r6
 80167e6:	d004      	beq.n	80167f2 <_svfprintf_r+0xb32>
 80167e8:	6822      	ldr	r2, [r4, #0]
 80167ea:	b292      	uxth	r2, r2
 80167ec:	9206      	str	r2, [sp, #24]
 80167ee:	9307      	str	r3, [sp, #28]
 80167f0:	e7d2      	b.n	8016798 <_svfprintf_r+0xad8>
 80167f2:	2380      	movs	r3, #128	; 0x80
 80167f4:	009b      	lsls	r3, r3, #2
 80167f6:	4033      	ands	r3, r6
 80167f8:	d002      	beq.n	8016800 <_svfprintf_r+0xb40>
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	b2db      	uxtb	r3, r3
 80167fe:	e7ed      	b.n	80167dc <_svfprintf_r+0xb1c>
 8016800:	6822      	ldr	r2, [r4, #0]
 8016802:	e7f3      	b.n	80167ec <_svfprintf_r+0xb2c>
 8016804:	1d23      	adds	r3, r4, #4
 8016806:	49a8      	ldr	r1, [pc, #672]	; (8016aa8 <_svfprintf_r+0xde8>)
 8016808:	aa25      	add	r2, sp, #148	; 0x94
 801680a:	9312      	str	r3, [sp, #72]	; 0x48
 801680c:	6823      	ldr	r3, [r4, #0]
 801680e:	8011      	strh	r1, [r2, #0]
 8016810:	4aa6      	ldr	r2, [pc, #664]	; (8016aac <_svfprintf_r+0xdec>)
 8016812:	9306      	str	r3, [sp, #24]
 8016814:	2300      	movs	r3, #0
 8016816:	921e      	str	r2, [sp, #120]	; 0x78
 8016818:	2278      	movs	r2, #120	; 0x78
 801681a:	9307      	str	r3, [sp, #28]
 801681c:	3302      	adds	r3, #2
 801681e:	431e      	orrs	r6, r3
 8016820:	920e      	str	r2, [sp, #56]	; 0x38
 8016822:	e7bc      	b.n	801679e <_svfprintf_r+0xade>
 8016824:	1d23      	adds	r3, r4, #4
 8016826:	9312      	str	r3, [sp, #72]	; 0x48
 8016828:	6823      	ldr	r3, [r4, #0]
 801682a:	2400      	movs	r4, #0
 801682c:	9309      	str	r3, [sp, #36]	; 0x24
 801682e:	231b      	movs	r3, #27
 8016830:	aa1e      	add	r2, sp, #120	; 0x78
 8016832:	189b      	adds	r3, r3, r2
 8016834:	701c      	strb	r4, [r3, #0]
 8016836:	9b08      	ldr	r3, [sp, #32]
 8016838:	3301      	adds	r3, #1
 801683a:	d00e      	beq.n	801685a <_svfprintf_r+0xb9a>
 801683c:	9a08      	ldr	r2, [sp, #32]
 801683e:	0021      	movs	r1, r4
 8016840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016842:	f001 ff79 	bl	8018738 <memchr>
 8016846:	900c      	str	r0, [sp, #48]	; 0x30
 8016848:	42a0      	cmp	r0, r4
 801684a:	d100      	bne.n	801684e <_svfprintf_r+0xb8e>
 801684c:	e100      	b.n	8016a50 <_svfprintf_r+0xd90>
 801684e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016850:	1a83      	subs	r3, r0, r2
 8016852:	9308      	str	r3, [sp, #32]
 8016854:	940c      	str	r4, [sp, #48]	; 0x30
 8016856:	0023      	movs	r3, r4
 8016858:	e527      	b.n	80162aa <_svfprintf_r+0x5ea>
 801685a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801685c:	f7e9 fc5c 	bl	8000118 <strlen>
 8016860:	9008      	str	r0, [sp, #32]
 8016862:	e7f7      	b.n	8016854 <_svfprintf_r+0xb94>
 8016864:	2310      	movs	r3, #16
 8016866:	431e      	orrs	r6, r3
 8016868:	2220      	movs	r2, #32
 801686a:	4032      	ands	r2, r6
 801686c:	d00b      	beq.n	8016886 <_svfprintf_r+0xbc6>
 801686e:	2307      	movs	r3, #7
 8016870:	3407      	adds	r4, #7
 8016872:	439c      	bics	r4, r3
 8016874:	0023      	movs	r3, r4
 8016876:	3308      	adds	r3, #8
 8016878:	9312      	str	r3, [sp, #72]	; 0x48
 801687a:	6823      	ldr	r3, [r4, #0]
 801687c:	6864      	ldr	r4, [r4, #4]
 801687e:	9306      	str	r3, [sp, #24]
 8016880:	9407      	str	r4, [sp, #28]
 8016882:	2301      	movs	r3, #1
 8016884:	e78b      	b.n	801679e <_svfprintf_r+0xade>
 8016886:	1d23      	adds	r3, r4, #4
 8016888:	9312      	str	r3, [sp, #72]	; 0x48
 801688a:	2310      	movs	r3, #16
 801688c:	4033      	ands	r3, r6
 801688e:	d003      	beq.n	8016898 <_svfprintf_r+0xbd8>
 8016890:	6823      	ldr	r3, [r4, #0]
 8016892:	9306      	str	r3, [sp, #24]
 8016894:	9207      	str	r2, [sp, #28]
 8016896:	e7f4      	b.n	8016882 <_svfprintf_r+0xbc2>
 8016898:	2240      	movs	r2, #64	; 0x40
 801689a:	4032      	ands	r2, r6
 801689c:	d004      	beq.n	80168a8 <_svfprintf_r+0xbe8>
 801689e:	6822      	ldr	r2, [r4, #0]
 80168a0:	b292      	uxth	r2, r2
 80168a2:	9206      	str	r2, [sp, #24]
 80168a4:	9307      	str	r3, [sp, #28]
 80168a6:	e7ec      	b.n	8016882 <_svfprintf_r+0xbc2>
 80168a8:	2380      	movs	r3, #128	; 0x80
 80168aa:	009b      	lsls	r3, r3, #2
 80168ac:	4033      	ands	r3, r6
 80168ae:	d002      	beq.n	80168b6 <_svfprintf_r+0xbf6>
 80168b0:	6823      	ldr	r3, [r4, #0]
 80168b2:	b2db      	uxtb	r3, r3
 80168b4:	e7ed      	b.n	8016892 <_svfprintf_r+0xbd2>
 80168b6:	6822      	ldr	r2, [r4, #0]
 80168b8:	e7f3      	b.n	80168a2 <_svfprintf_r+0xbe2>
 80168ba:	4b7c      	ldr	r3, [pc, #496]	; (8016aac <_svfprintf_r+0xdec>)
 80168bc:	f7ff fad9 	bl	8015e72 <_svfprintf_r+0x1b2>
 80168c0:	1d23      	adds	r3, r4, #4
 80168c2:	9312      	str	r3, [sp, #72]	; 0x48
 80168c4:	2310      	movs	r3, #16
 80168c6:	4033      	ands	r3, r6
 80168c8:	d004      	beq.n	80168d4 <_svfprintf_r+0xc14>
 80168ca:	6823      	ldr	r3, [r4, #0]
 80168cc:	9306      	str	r3, [sp, #24]
 80168ce:	9207      	str	r2, [sp, #28]
 80168d0:	f7ff fadf 	bl	8015e92 <_svfprintf_r+0x1d2>
 80168d4:	2240      	movs	r2, #64	; 0x40
 80168d6:	4032      	ands	r2, r6
 80168d8:	d005      	beq.n	80168e6 <_svfprintf_r+0xc26>
 80168da:	6822      	ldr	r2, [r4, #0]
 80168dc:	b292      	uxth	r2, r2
 80168de:	9206      	str	r2, [sp, #24]
 80168e0:	9307      	str	r3, [sp, #28]
 80168e2:	f7ff fad6 	bl	8015e92 <_svfprintf_r+0x1d2>
 80168e6:	2380      	movs	r3, #128	; 0x80
 80168e8:	009b      	lsls	r3, r3, #2
 80168ea:	4033      	ands	r3, r6
 80168ec:	d002      	beq.n	80168f4 <_svfprintf_r+0xc34>
 80168ee:	6823      	ldr	r3, [r4, #0]
 80168f0:	b2db      	uxtb	r3, r3
 80168f2:	e7eb      	b.n	80168cc <_svfprintf_r+0xc0c>
 80168f4:	6822      	ldr	r2, [r4, #0]
 80168f6:	e7f2      	b.n	80168de <_svfprintf_r+0xc1e>
 80168f8:	0032      	movs	r2, r6
 80168fa:	2301      	movs	r3, #1
 80168fc:	e759      	b.n	80167b2 <_svfprintf_r+0xaf2>
 80168fe:	2b01      	cmp	r3, #1
 8016900:	d100      	bne.n	8016904 <_svfprintf_r+0xc44>
 8016902:	e476      	b.n	80161f2 <_svfprintf_r+0x532>
 8016904:	2b02      	cmp	r3, #2
 8016906:	d06b      	beq.n	80169e0 <_svfprintf_r+0xd20>
 8016908:	2507      	movs	r5, #7
 801690a:	ab58      	add	r3, sp, #352	; 0x160
 801690c:	1e5a      	subs	r2, r3, #1
 801690e:	9209      	str	r2, [sp, #36]	; 0x24
 8016910:	9a06      	ldr	r2, [sp, #24]
 8016912:	1e59      	subs	r1, r3, #1
 8016914:	402a      	ands	r2, r5
 8016916:	3230      	adds	r2, #48	; 0x30
 8016918:	700a      	strb	r2, [r1, #0]
 801691a:	9907      	ldr	r1, [sp, #28]
 801691c:	074c      	lsls	r4, r1, #29
 801691e:	9906      	ldr	r1, [sp, #24]
 8016920:	08c8      	lsrs	r0, r1, #3
 8016922:	9907      	ldr	r1, [sp, #28]
 8016924:	4304      	orrs	r4, r0
 8016926:	08c9      	lsrs	r1, r1, #3
 8016928:	9107      	str	r1, [sp, #28]
 801692a:	0021      	movs	r1, r4
 801692c:	9807      	ldr	r0, [sp, #28]
 801692e:	9406      	str	r4, [sp, #24]
 8016930:	4301      	orrs	r1, r0
 8016932:	d111      	bne.n	8016958 <_svfprintf_r+0xc98>
 8016934:	07f1      	lsls	r1, r6, #31
 8016936:	d502      	bpl.n	801693e <_svfprintf_r+0xc7e>
 8016938:	3b02      	subs	r3, #2
 801693a:	2a30      	cmp	r2, #48	; 0x30
 801693c:	d173      	bne.n	8016a26 <_svfprintf_r+0xd66>
 801693e:	9b08      	ldr	r3, [sp, #32]
 8016940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016942:	9317      	str	r3, [sp, #92]	; 0x5c
 8016944:	ab58      	add	r3, sp, #352	; 0x160
 8016946:	1a9b      	subs	r3, r3, r2
 8016948:	9308      	str	r3, [sp, #32]
 801694a:	2300      	movs	r3, #0
 801694c:	930c      	str	r3, [sp, #48]	; 0x30
 801694e:	9310      	str	r3, [sp, #64]	; 0x40
 8016950:	930f      	str	r3, [sp, #60]	; 0x3c
 8016952:	001d      	movs	r5, r3
 8016954:	f7ff fb4b 	bl	8015fee <_svfprintf_r+0x32e>
 8016958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801695a:	e7d7      	b.n	801690c <_svfprintf_r+0xc4c>
 801695c:	2480      	movs	r4, #128	; 0x80
 801695e:	2300      	movs	r3, #0
 8016960:	00e4      	lsls	r4, r4, #3
 8016962:	930d      	str	r3, [sp, #52]	; 0x34
 8016964:	4034      	ands	r4, r6
 8016966:	ab58      	add	r3, sp, #352	; 0x160
 8016968:	3b01      	subs	r3, #1
 801696a:	9309      	str	r3, [sp, #36]	; 0x24
 801696c:	220a      	movs	r2, #10
 801696e:	9806      	ldr	r0, [sp, #24]
 8016970:	9907      	ldr	r1, [sp, #28]
 8016972:	2300      	movs	r3, #0
 8016974:	f7e9 fdda 	bl	800052c <__aeabi_uldivmod>
 8016978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801697a:	3230      	adds	r2, #48	; 0x30
 801697c:	701a      	strb	r2, [r3, #0]
 801697e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016980:	3301      	adds	r3, #1
 8016982:	930d      	str	r3, [sp, #52]	; 0x34
 8016984:	2c00      	cmp	r4, #0
 8016986:	d01d      	beq.n	80169c4 <_svfprintf_r+0xd04>
 8016988:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801698a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801698c:	781b      	ldrb	r3, [r3, #0]
 801698e:	429a      	cmp	r2, r3
 8016990:	d118      	bne.n	80169c4 <_svfprintf_r+0xd04>
 8016992:	2aff      	cmp	r2, #255	; 0xff
 8016994:	d016      	beq.n	80169c4 <_svfprintf_r+0xd04>
 8016996:	9b07      	ldr	r3, [sp, #28]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d102      	bne.n	80169a2 <_svfprintf_r+0xce2>
 801699c:	9b06      	ldr	r3, [sp, #24]
 801699e:	2b09      	cmp	r3, #9
 80169a0:	d910      	bls.n	80169c4 <_svfprintf_r+0xd04>
 80169a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80169a6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80169a8:	1a9b      	subs	r3, r3, r2
 80169aa:	0018      	movs	r0, r3
 80169ac:	9309      	str	r3, [sp, #36]	; 0x24
 80169ae:	f7fe fa52 	bl	8014e56 <strncpy>
 80169b2:	2200      	movs	r2, #0
 80169b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169b6:	920d      	str	r2, [sp, #52]	; 0x34
 80169b8:	785b      	ldrb	r3, [r3, #1]
 80169ba:	1e5a      	subs	r2, r3, #1
 80169bc:	4193      	sbcs	r3, r2
 80169be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80169c0:	18d3      	adds	r3, r2, r3
 80169c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80169c4:	220a      	movs	r2, #10
 80169c6:	9806      	ldr	r0, [sp, #24]
 80169c8:	9907      	ldr	r1, [sp, #28]
 80169ca:	2300      	movs	r3, #0
 80169cc:	f7e9 fdae 	bl	800052c <__aeabi_uldivmod>
 80169d0:	9006      	str	r0, [sp, #24]
 80169d2:	9107      	str	r1, [sp, #28]
 80169d4:	9b06      	ldr	r3, [sp, #24]
 80169d6:	9a07      	ldr	r2, [sp, #28]
 80169d8:	4313      	orrs	r3, r2
 80169da:	d0b0      	beq.n	801693e <_svfprintf_r+0xc7e>
 80169dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169de:	e7c3      	b.n	8016968 <_svfprintf_r+0xca8>
 80169e0:	200f      	movs	r0, #15
 80169e2:	ab58      	add	r3, sp, #352	; 0x160
 80169e4:	9309      	str	r3, [sp, #36]	; 0x24
 80169e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169e8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80169ea:	3b01      	subs	r3, #1
 80169ec:	9309      	str	r3, [sp, #36]	; 0x24
 80169ee:	9b06      	ldr	r3, [sp, #24]
 80169f0:	4003      	ands	r3, r0
 80169f2:	5cd3      	ldrb	r3, [r2, r3]
 80169f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169f6:	7013      	strb	r3, [r2, #0]
 80169f8:	9b07      	ldr	r3, [sp, #28]
 80169fa:	0719      	lsls	r1, r3, #28
 80169fc:	9b06      	ldr	r3, [sp, #24]
 80169fe:	091a      	lsrs	r2, r3, #4
 8016a00:	9b07      	ldr	r3, [sp, #28]
 8016a02:	4311      	orrs	r1, r2
 8016a04:	091b      	lsrs	r3, r3, #4
 8016a06:	9307      	str	r3, [sp, #28]
 8016a08:	000b      	movs	r3, r1
 8016a0a:	9a07      	ldr	r2, [sp, #28]
 8016a0c:	9106      	str	r1, [sp, #24]
 8016a0e:	4313      	orrs	r3, r2
 8016a10:	d1e9      	bne.n	80169e6 <_svfprintf_r+0xd26>
 8016a12:	e794      	b.n	801693e <_svfprintf_r+0xc7e>
 8016a14:	a958      	add	r1, sp, #352	; 0x160
 8016a16:	9109      	str	r1, [sp, #36]	; 0x24
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d190      	bne.n	801693e <_svfprintf_r+0xc7e>
 8016a1c:	07d3      	lsls	r3, r2, #31
 8016a1e:	d58e      	bpl.n	801693e <_svfprintf_r+0xc7e>
 8016a20:	23e7      	movs	r3, #231	; 0xe7
 8016a22:	aa1e      	add	r2, sp, #120	; 0x78
 8016a24:	189b      	adds	r3, r3, r2
 8016a26:	2230      	movs	r2, #48	; 0x30
 8016a28:	f7ff fbf0 	bl	801620c <_svfprintf_r+0x54c>
 8016a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d100      	bne.n	8016a34 <_svfprintf_r+0xd74>
 8016a32:	e38a      	b.n	801714a <_svfprintf_r+0x148a>
 8016a34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a36:	ab3f      	add	r3, sp, #252	; 0xfc
 8016a38:	701a      	strb	r2, [r3, #0]
 8016a3a:	221b      	movs	r2, #27
 8016a3c:	2000      	movs	r0, #0
 8016a3e:	a91e      	add	r1, sp, #120	; 0x78
 8016a40:	1852      	adds	r2, r2, r1
 8016a42:	7010      	strb	r0, [r2, #0]
 8016a44:	9412      	str	r4, [sp, #72]	; 0x48
 8016a46:	f7ff faca 	bl	8015fde <_svfprintf_r+0x31e>
 8016a4a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016a4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016a4e:	e592      	b.n	8016576 <_svfprintf_r+0x8b6>
 8016a50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a52:	e42a      	b.n	80162aa <_svfprintf_r+0x5ea>
 8016a54:	2010      	movs	r0, #16
 8016a56:	1812      	adds	r2, r2, r0
 8016a58:	6078      	str	r0, [r7, #4]
 8016a5a:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a5c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a5e:	2b07      	cmp	r3, #7
 8016a60:	dd08      	ble.n	8016a74 <_svfprintf_r+0xdb4>
 8016a62:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a66:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a68:	f002 fa7e 	bl	8018f68 <__ssprint_r>
 8016a6c:	2800      	cmp	r0, #0
 8016a6e:	d000      	beq.n	8016a72 <_svfprintf_r+0xdb2>
 8016a70:	e34a      	b.n	8017108 <_svfprintf_r+0x1448>
 8016a72:	a92f      	add	r1, sp, #188	; 0xbc
 8016a74:	3c10      	subs	r4, #16
 8016a76:	000f      	movs	r7, r1
 8016a78:	f7ff fad8 	bl	801602c <_svfprintf_r+0x36c>
 8016a7c:	2010      	movs	r0, #16
 8016a7e:	1812      	adds	r2, r2, r0
 8016a80:	6078      	str	r0, [r7, #4]
 8016a82:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a84:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a86:	2b07      	cmp	r3, #7
 8016a88:	dd08      	ble.n	8016a9c <_svfprintf_r+0xddc>
 8016a8a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a90:	f002 fa6a 	bl	8018f68 <__ssprint_r>
 8016a94:	2800      	cmp	r0, #0
 8016a96:	d000      	beq.n	8016a9a <_svfprintf_r+0xdda>
 8016a98:	e336      	b.n	8017108 <_svfprintf_r+0x1448>
 8016a9a:	a92f      	add	r1, sp, #188	; 0xbc
 8016a9c:	3c10      	subs	r4, #16
 8016a9e:	000f      	movs	r7, r1
 8016aa0:	f7ff fb24 	bl	80160ec <_svfprintf_r+0x42c>
 8016aa4:	fffffbff 	.word	0xfffffbff
 8016aa8:	00007830 	.word	0x00007830
 8016aac:	0801c350 	.word	0x0801c350
 8016ab0:	2010      	movs	r0, #16
 8016ab2:	1812      	adds	r2, r2, r0
 8016ab4:	6078      	str	r0, [r7, #4]
 8016ab6:	922e      	str	r2, [sp, #184]	; 0xb8
 8016ab8:	932d      	str	r3, [sp, #180]	; 0xb4
 8016aba:	2b07      	cmp	r3, #7
 8016abc:	dd08      	ble.n	8016ad0 <_svfprintf_r+0xe10>
 8016abe:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ac0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ac2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ac4:	f002 fa50 	bl	8018f68 <__ssprint_r>
 8016ac8:	2800      	cmp	r0, #0
 8016aca:	d000      	beq.n	8016ace <_svfprintf_r+0xe0e>
 8016acc:	e31c      	b.n	8017108 <_svfprintf_r+0x1448>
 8016ace:	a92f      	add	r1, sp, #188	; 0xbc
 8016ad0:	3c10      	subs	r4, #16
 8016ad2:	000f      	movs	r7, r1
 8016ad4:	f7ff fb2c 	bl	8016130 <_svfprintf_r+0x470>
 8016ad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ada:	2b65      	cmp	r3, #101	; 0x65
 8016adc:	dc00      	bgt.n	8016ae0 <_svfprintf_r+0xe20>
 8016ade:	e259      	b.n	8016f94 <_svfprintf_r+0x12d4>
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	2300      	movs	r3, #0
 8016ae4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016ae6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016ae8:	f7e9 fcb8 	bl	800045c <__aeabi_dcmpeq>
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d07c      	beq.n	8016bea <_svfprintf_r+0xf2a>
 8016af0:	4b81      	ldr	r3, [pc, #516]	; (8016cf8 <_svfprintf_r+0x1038>)
 8016af2:	603b      	str	r3, [r7, #0]
 8016af4:	2301      	movs	r3, #1
 8016af6:	607b      	str	r3, [r7, #4]
 8016af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016afa:	3708      	adds	r7, #8
 8016afc:	3301      	adds	r3, #1
 8016afe:	932e      	str	r3, [sp, #184]	; 0xb8
 8016b00:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b02:	9308      	str	r3, [sp, #32]
 8016b04:	3301      	adds	r3, #1
 8016b06:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b08:	2b07      	cmp	r3, #7
 8016b0a:	dd08      	ble.n	8016b1e <_svfprintf_r+0xe5e>
 8016b0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b12:	f002 fa29 	bl	8018f68 <__ssprint_r>
 8016b16:	2800      	cmp	r0, #0
 8016b18:	d000      	beq.n	8016b1c <_svfprintf_r+0xe5c>
 8016b1a:	e2f5      	b.n	8017108 <_svfprintf_r+0x1448>
 8016b1c:	af2f      	add	r7, sp, #188	; 0xbc
 8016b1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016b20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b22:	4293      	cmp	r3, r2
 8016b24:	db01      	blt.n	8016b2a <_svfprintf_r+0xe6a>
 8016b26:	07f3      	lsls	r3, r6, #31
 8016b28:	d51d      	bpl.n	8016b66 <_svfprintf_r+0xea6>
 8016b2a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016b2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016b2e:	4694      	mov	ip, r2
 8016b30:	603b      	str	r3, [r7, #0]
 8016b32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b34:	607b      	str	r3, [r7, #4]
 8016b36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016b38:	3708      	adds	r7, #8
 8016b3a:	4463      	add	r3, ip
 8016b3c:	932e      	str	r3, [sp, #184]	; 0xb8
 8016b3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b40:	9308      	str	r3, [sp, #32]
 8016b42:	3301      	adds	r3, #1
 8016b44:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b46:	2b07      	cmp	r3, #7
 8016b48:	dd08      	ble.n	8016b5c <_svfprintf_r+0xe9c>
 8016b4a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b4e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b50:	f002 fa0a 	bl	8018f68 <__ssprint_r>
 8016b54:	2800      	cmp	r0, #0
 8016b56:	d000      	beq.n	8016b5a <_svfprintf_r+0xe9a>
 8016b58:	e2d6      	b.n	8017108 <_svfprintf_r+0x1448>
 8016b5a:	af2f      	add	r7, sp, #188	; 0xbc
 8016b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b5e:	2510      	movs	r5, #16
 8016b60:	1e5c      	subs	r4, r3, #1
 8016b62:	2c00      	cmp	r4, #0
 8016b64:	dc2f      	bgt.n	8016bc6 <_svfprintf_r+0xf06>
 8016b66:	0773      	lsls	r3, r6, #29
 8016b68:	d500      	bpl.n	8016b6c <_svfprintf_r+0xeac>
 8016b6a:	e2af      	b.n	80170cc <_svfprintf_r+0x140c>
 8016b6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016b6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016b70:	4293      	cmp	r3, r2
 8016b72:	da00      	bge.n	8016b76 <_svfprintf_r+0xeb6>
 8016b74:	0013      	movs	r3, r2
 8016b76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016b78:	18d3      	adds	r3, r2, r3
 8016b7a:	9315      	str	r3, [sp, #84]	; 0x54
 8016b7c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016b7e:	9308      	str	r3, [sp, #32]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d007      	beq.n	8016b94 <_svfprintf_r+0xed4>
 8016b84:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b88:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b8a:	f002 f9ed 	bl	8018f68 <__ssprint_r>
 8016b8e:	2800      	cmp	r0, #0
 8016b90:	d000      	beq.n	8016b94 <_svfprintf_r+0xed4>
 8016b92:	e2b9      	b.n	8017108 <_svfprintf_r+0x1448>
 8016b94:	2300      	movs	r3, #0
 8016b96:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d000      	beq.n	8016ba0 <_svfprintf_r+0xee0>
 8016b9e:	e2cf      	b.n	8017140 <_svfprintf_r+0x1480>
 8016ba0:	af2f      	add	r7, sp, #188	; 0xbc
 8016ba2:	e5d6      	b.n	8016752 <_svfprintf_r+0xa92>
 8016ba4:	3210      	adds	r2, #16
 8016ba6:	607d      	str	r5, [r7, #4]
 8016ba8:	922e      	str	r2, [sp, #184]	; 0xb8
 8016baa:	932d      	str	r3, [sp, #180]	; 0xb4
 8016bac:	2b07      	cmp	r3, #7
 8016bae:	dd08      	ble.n	8016bc2 <_svfprintf_r+0xf02>
 8016bb0:	aa2c      	add	r2, sp, #176	; 0xb0
 8016bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bb6:	f002 f9d7 	bl	8018f68 <__ssprint_r>
 8016bba:	2800      	cmp	r0, #0
 8016bbc:	d000      	beq.n	8016bc0 <_svfprintf_r+0xf00>
 8016bbe:	e2a3      	b.n	8017108 <_svfprintf_r+0x1448>
 8016bc0:	a92f      	add	r1, sp, #188	; 0xbc
 8016bc2:	000f      	movs	r7, r1
 8016bc4:	3c10      	subs	r4, #16
 8016bc6:	0039      	movs	r1, r7
 8016bc8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016bca:	484c      	ldr	r0, [pc, #304]	; (8016cfc <_svfprintf_r+0x103c>)
 8016bcc:	9308      	str	r3, [sp, #32]
 8016bce:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016bd0:	3301      	adds	r3, #1
 8016bd2:	3108      	adds	r1, #8
 8016bd4:	6038      	str	r0, [r7, #0]
 8016bd6:	2c10      	cmp	r4, #16
 8016bd8:	dce4      	bgt.n	8016ba4 <_svfprintf_r+0xee4>
 8016bda:	607c      	str	r4, [r7, #4]
 8016bdc:	18a4      	adds	r4, r4, r2
 8016bde:	942e      	str	r4, [sp, #184]	; 0xb8
 8016be0:	932d      	str	r3, [sp, #180]	; 0xb4
 8016be2:	000f      	movs	r7, r1
 8016be4:	2b07      	cmp	r3, #7
 8016be6:	ddbe      	ble.n	8016b66 <_svfprintf_r+0xea6>
 8016be8:	e06a      	b.n	8016cc0 <_svfprintf_r+0x1000>
 8016bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	dd00      	ble.n	8016bf2 <_svfprintf_r+0xf32>
 8016bf0:	e086      	b.n	8016d00 <_svfprintf_r+0x1040>
 8016bf2:	4b41      	ldr	r3, [pc, #260]	; (8016cf8 <_svfprintf_r+0x1038>)
 8016bf4:	603b      	str	r3, [r7, #0]
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	607b      	str	r3, [r7, #4]
 8016bfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016bfc:	3708      	adds	r7, #8
 8016bfe:	3301      	adds	r3, #1
 8016c00:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c04:	9308      	str	r3, [sp, #32]
 8016c06:	3301      	adds	r3, #1
 8016c08:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c0a:	2b07      	cmp	r3, #7
 8016c0c:	dd08      	ble.n	8016c20 <_svfprintf_r+0xf60>
 8016c0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c14:	f002 f9a8 	bl	8018f68 <__ssprint_r>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	d000      	beq.n	8016c1e <_svfprintf_r+0xf5e>
 8016c1c:	e274      	b.n	8017108 <_svfprintf_r+0x1448>
 8016c1e:	af2f      	add	r7, sp, #188	; 0xbc
 8016c20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d104      	bne.n	8016c30 <_svfprintf_r+0xf70>
 8016c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d101      	bne.n	8016c30 <_svfprintf_r+0xf70>
 8016c2c:	07f3      	lsls	r3, r6, #31
 8016c2e:	d59a      	bpl.n	8016b66 <_svfprintf_r+0xea6>
 8016c30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016c34:	4694      	mov	ip, r2
 8016c36:	603b      	str	r3, [r7, #0]
 8016c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c3a:	607b      	str	r3, [r7, #4]
 8016c3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c3e:	3708      	adds	r7, #8
 8016c40:	4463      	add	r3, ip
 8016c42:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c44:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c46:	9308      	str	r3, [sp, #32]
 8016c48:	3301      	adds	r3, #1
 8016c4a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c4c:	2b07      	cmp	r3, #7
 8016c4e:	dd08      	ble.n	8016c62 <_svfprintf_r+0xfa2>
 8016c50:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c56:	f002 f987 	bl	8018f68 <__ssprint_r>
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	d000      	beq.n	8016c60 <_svfprintf_r+0xfa0>
 8016c5e:	e253      	b.n	8017108 <_svfprintf_r+0x1448>
 8016c60:	af2f      	add	r7, sp, #188	; 0xbc
 8016c62:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016c64:	2c00      	cmp	r4, #0
 8016c66:	da1a      	bge.n	8016c9e <_svfprintf_r+0xfde>
 8016c68:	0039      	movs	r1, r7
 8016c6a:	2510      	movs	r5, #16
 8016c6c:	4264      	negs	r4, r4
 8016c6e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c70:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8016c72:	9308      	str	r3, [sp, #32]
 8016c74:	1c5a      	adds	r2, r3, #1
 8016c76:	4b21      	ldr	r3, [pc, #132]	; (8016cfc <_svfprintf_r+0x103c>)
 8016c78:	3708      	adds	r7, #8
 8016c7a:	600b      	str	r3, [r1, #0]
 8016c7c:	2c10      	cmp	r4, #16
 8016c7e:	dc29      	bgt.n	8016cd4 <_svfprintf_r+0x1014>
 8016c80:	604c      	str	r4, [r1, #4]
 8016c82:	1824      	adds	r4, r4, r0
 8016c84:	942e      	str	r4, [sp, #184]	; 0xb8
 8016c86:	922d      	str	r2, [sp, #180]	; 0xb4
 8016c88:	2a07      	cmp	r2, #7
 8016c8a:	dd08      	ble.n	8016c9e <_svfprintf_r+0xfde>
 8016c8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c92:	f002 f969 	bl	8018f68 <__ssprint_r>
 8016c96:	2800      	cmp	r0, #0
 8016c98:	d000      	beq.n	8016c9c <_svfprintf_r+0xfdc>
 8016c9a:	e235      	b.n	8017108 <_svfprintf_r+0x1448>
 8016c9c:	af2f      	add	r7, sp, #188	; 0xbc
 8016c9e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ca2:	468c      	mov	ip, r1
 8016ca4:	603b      	str	r3, [r7, #0]
 8016ca6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ca8:	607b      	str	r3, [r7, #4]
 8016caa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016cac:	4463      	add	r3, ip
 8016cae:	932e      	str	r3, [sp, #184]	; 0xb8
 8016cb0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016cb2:	1c5a      	adds	r2, r3, #1
 8016cb4:	9308      	str	r3, [sp, #32]
 8016cb6:	922d      	str	r2, [sp, #180]	; 0xb4
 8016cb8:	2a07      	cmp	r2, #7
 8016cba:	dc01      	bgt.n	8016cc0 <_svfprintf_r+0x1000>
 8016cbc:	f7ff fa6c 	bl	8016198 <_svfprintf_r+0x4d8>
 8016cc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cc6:	f002 f94f 	bl	8018f68 <__ssprint_r>
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d000      	beq.n	8016cd0 <_svfprintf_r+0x1010>
 8016cce:	e21b      	b.n	8017108 <_svfprintf_r+0x1448>
 8016cd0:	af2f      	add	r7, sp, #188	; 0xbc
 8016cd2:	e748      	b.n	8016b66 <_svfprintf_r+0xea6>
 8016cd4:	3010      	adds	r0, #16
 8016cd6:	604d      	str	r5, [r1, #4]
 8016cd8:	902e      	str	r0, [sp, #184]	; 0xb8
 8016cda:	922d      	str	r2, [sp, #180]	; 0xb4
 8016cdc:	2a07      	cmp	r2, #7
 8016cde:	dd08      	ble.n	8016cf2 <_svfprintf_r+0x1032>
 8016ce0:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ce4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ce6:	f002 f93f 	bl	8018f68 <__ssprint_r>
 8016cea:	2800      	cmp	r0, #0
 8016cec:	d000      	beq.n	8016cf0 <_svfprintf_r+0x1030>
 8016cee:	e20b      	b.n	8017108 <_svfprintf_r+0x1448>
 8016cf0:	af2f      	add	r7, sp, #188	; 0xbc
 8016cf2:	3c10      	subs	r4, #16
 8016cf4:	0039      	movs	r1, r7
 8016cf6:	e7ba      	b.n	8016c6e <_svfprintf_r+0xfae>
 8016cf8:	0801c372 	.word	0x0801c372
 8016cfc:	0801c384 	.word	0x0801c384
 8016d00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d02:	002c      	movs	r4, r5
 8016d04:	429d      	cmp	r5, r3
 8016d06:	dd00      	ble.n	8016d0a <_svfprintf_r+0x104a>
 8016d08:	001c      	movs	r4, r3
 8016d0a:	2c00      	cmp	r4, #0
 8016d0c:	dd15      	ble.n	8016d3a <_svfprintf_r+0x107a>
 8016d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d10:	607c      	str	r4, [r7, #4]
 8016d12:	603b      	str	r3, [r7, #0]
 8016d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d16:	3708      	adds	r7, #8
 8016d18:	18e3      	adds	r3, r4, r3
 8016d1a:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d1c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d1e:	9308      	str	r3, [sp, #32]
 8016d20:	3301      	adds	r3, #1
 8016d22:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d24:	2b07      	cmp	r3, #7
 8016d26:	dd08      	ble.n	8016d3a <_svfprintf_r+0x107a>
 8016d28:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d2e:	f002 f91b 	bl	8018f68 <__ssprint_r>
 8016d32:	2800      	cmp	r0, #0
 8016d34:	d000      	beq.n	8016d38 <_svfprintf_r+0x1078>
 8016d36:	e1e7      	b.n	8017108 <_svfprintf_r+0x1448>
 8016d38:	af2f      	add	r7, sp, #188	; 0xbc
 8016d3a:	43e3      	mvns	r3, r4
 8016d3c:	17db      	asrs	r3, r3, #31
 8016d3e:	401c      	ands	r4, r3
 8016d40:	1b2c      	subs	r4, r5, r4
 8016d42:	2c00      	cmp	r4, #0
 8016d44:	dd1a      	ble.n	8016d7c <_svfprintf_r+0x10bc>
 8016d46:	0039      	movs	r1, r7
 8016d48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d4a:	48d4      	ldr	r0, [pc, #848]	; (801709c <_svfprintf_r+0x13dc>)
 8016d4c:	9308      	str	r3, [sp, #32]
 8016d4e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016d50:	3301      	adds	r3, #1
 8016d52:	3108      	adds	r1, #8
 8016d54:	6038      	str	r0, [r7, #0]
 8016d56:	2c10      	cmp	r4, #16
 8016d58:	dd00      	ble.n	8016d5c <_svfprintf_r+0x109c>
 8016d5a:	e089      	b.n	8016e70 <_svfprintf_r+0x11b0>
 8016d5c:	607c      	str	r4, [r7, #4]
 8016d5e:	18a4      	adds	r4, r4, r2
 8016d60:	942e      	str	r4, [sp, #184]	; 0xb8
 8016d62:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d64:	000f      	movs	r7, r1
 8016d66:	2b07      	cmp	r3, #7
 8016d68:	dd08      	ble.n	8016d7c <_svfprintf_r+0x10bc>
 8016d6a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d70:	f002 f8fa 	bl	8018f68 <__ssprint_r>
 8016d74:	2800      	cmp	r0, #0
 8016d76:	d000      	beq.n	8016d7a <_svfprintf_r+0x10ba>
 8016d78:	e1c6      	b.n	8017108 <_svfprintf_r+0x1448>
 8016d7a:	af2f      	add	r7, sp, #188	; 0xbc
 8016d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d7e:	195d      	adds	r5, r3, r5
 8016d80:	0573      	lsls	r3, r6, #21
 8016d82:	d50d      	bpl.n	8016da0 <_svfprintf_r+0x10e0>
 8016d84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d000      	beq.n	8016d8c <_svfprintf_r+0x10cc>
 8016d8a:	e084      	b.n	8016e96 <_svfprintf_r+0x11d6>
 8016d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d000      	beq.n	8016d94 <_svfprintf_r+0x10d4>
 8016d92:	e083      	b.n	8016e9c <_svfprintf_r+0x11dc>
 8016d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d98:	189b      	adds	r3, r3, r2
 8016d9a:	429d      	cmp	r5, r3
 8016d9c:	d900      	bls.n	8016da0 <_svfprintf_r+0x10e0>
 8016d9e:	001d      	movs	r5, r3
 8016da0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016da2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016da4:	4293      	cmp	r3, r2
 8016da6:	db01      	blt.n	8016dac <_svfprintf_r+0x10ec>
 8016da8:	07f3      	lsls	r3, r6, #31
 8016daa:	d518      	bpl.n	8016dde <_svfprintf_r+0x111e>
 8016dac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016dae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016db0:	4694      	mov	ip, r2
 8016db2:	603b      	str	r3, [r7, #0]
 8016db4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016db6:	607b      	str	r3, [r7, #4]
 8016db8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016dba:	3708      	adds	r7, #8
 8016dbc:	4463      	add	r3, ip
 8016dbe:	932e      	str	r3, [sp, #184]	; 0xb8
 8016dc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016dc2:	9308      	str	r3, [sp, #32]
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	932d      	str	r3, [sp, #180]	; 0xb4
 8016dc8:	2b07      	cmp	r3, #7
 8016dca:	dd08      	ble.n	8016dde <_svfprintf_r+0x111e>
 8016dcc:	aa2c      	add	r2, sp, #176	; 0xb0
 8016dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dd0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016dd2:	f002 f8c9 	bl	8018f68 <__ssprint_r>
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	d000      	beq.n	8016ddc <_svfprintf_r+0x111c>
 8016dda:	e195      	b.n	8017108 <_svfprintf_r+0x1448>
 8016ddc:	af2f      	add	r7, sp, #188	; 0xbc
 8016dde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016de2:	4694      	mov	ip, r2
 8016de4:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016de6:	4463      	add	r3, ip
 8016de8:	1b5b      	subs	r3, r3, r5
 8016dea:	1a54      	subs	r4, r2, r1
 8016dec:	429c      	cmp	r4, r3
 8016dee:	dd00      	ble.n	8016df2 <_svfprintf_r+0x1132>
 8016df0:	001c      	movs	r4, r3
 8016df2:	2c00      	cmp	r4, #0
 8016df4:	dd14      	ble.n	8016e20 <_svfprintf_r+0x1160>
 8016df6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016df8:	603d      	str	r5, [r7, #0]
 8016dfa:	18e3      	adds	r3, r4, r3
 8016dfc:	932e      	str	r3, [sp, #184]	; 0xb8
 8016dfe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e00:	607c      	str	r4, [r7, #4]
 8016e02:	9308      	str	r3, [sp, #32]
 8016e04:	3301      	adds	r3, #1
 8016e06:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e08:	3708      	adds	r7, #8
 8016e0a:	2b07      	cmp	r3, #7
 8016e0c:	dd08      	ble.n	8016e20 <_svfprintf_r+0x1160>
 8016e0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e14:	f002 f8a8 	bl	8018f68 <__ssprint_r>
 8016e18:	2800      	cmp	r0, #0
 8016e1a:	d000      	beq.n	8016e1e <_svfprintf_r+0x115e>
 8016e1c:	e174      	b.n	8017108 <_svfprintf_r+0x1448>
 8016e1e:	af2f      	add	r7, sp, #188	; 0xbc
 8016e20:	43e3      	mvns	r3, r4
 8016e22:	17db      	asrs	r3, r3, #31
 8016e24:	401c      	ands	r4, r3
 8016e26:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e2a:	2510      	movs	r5, #16
 8016e2c:	1a9b      	subs	r3, r3, r2
 8016e2e:	1b1c      	subs	r4, r3, r4
 8016e30:	2c00      	cmp	r4, #0
 8016e32:	dc00      	bgt.n	8016e36 <_svfprintf_r+0x1176>
 8016e34:	e697      	b.n	8016b66 <_svfprintf_r+0xea6>
 8016e36:	0039      	movs	r1, r7
 8016e38:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e3a:	4898      	ldr	r0, [pc, #608]	; (801709c <_svfprintf_r+0x13dc>)
 8016e3c:	9308      	str	r3, [sp, #32]
 8016e3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016e40:	3301      	adds	r3, #1
 8016e42:	3108      	adds	r1, #8
 8016e44:	6038      	str	r0, [r7, #0]
 8016e46:	2c10      	cmp	r4, #16
 8016e48:	dc00      	bgt.n	8016e4c <_svfprintf_r+0x118c>
 8016e4a:	e6c6      	b.n	8016bda <_svfprintf_r+0xf1a>
 8016e4c:	3210      	adds	r2, #16
 8016e4e:	607d      	str	r5, [r7, #4]
 8016e50:	922e      	str	r2, [sp, #184]	; 0xb8
 8016e52:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e54:	2b07      	cmp	r3, #7
 8016e56:	dd08      	ble.n	8016e6a <_svfprintf_r+0x11aa>
 8016e58:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e5a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e5c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e5e:	f002 f883 	bl	8018f68 <__ssprint_r>
 8016e62:	2800      	cmp	r0, #0
 8016e64:	d000      	beq.n	8016e68 <_svfprintf_r+0x11a8>
 8016e66:	e14f      	b.n	8017108 <_svfprintf_r+0x1448>
 8016e68:	a92f      	add	r1, sp, #188	; 0xbc
 8016e6a:	3c10      	subs	r4, #16
 8016e6c:	000f      	movs	r7, r1
 8016e6e:	e7e2      	b.n	8016e36 <_svfprintf_r+0x1176>
 8016e70:	2010      	movs	r0, #16
 8016e72:	1812      	adds	r2, r2, r0
 8016e74:	6078      	str	r0, [r7, #4]
 8016e76:	922e      	str	r2, [sp, #184]	; 0xb8
 8016e78:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e7a:	2b07      	cmp	r3, #7
 8016e7c:	dd08      	ble.n	8016e90 <_svfprintf_r+0x11d0>
 8016e7e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e84:	f002 f870 	bl	8018f68 <__ssprint_r>
 8016e88:	2800      	cmp	r0, #0
 8016e8a:	d000      	beq.n	8016e8e <_svfprintf_r+0x11ce>
 8016e8c:	e13c      	b.n	8017108 <_svfprintf_r+0x1448>
 8016e8e:	a92f      	add	r1, sp, #188	; 0xbc
 8016e90:	3c10      	subs	r4, #16
 8016e92:	000f      	movs	r7, r1
 8016e94:	e757      	b.n	8016d46 <_svfprintf_r+0x1086>
 8016e96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d061      	beq.n	8016f60 <_svfprintf_r+0x12a0>
 8016e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e9e:	3b01      	subs	r3, #1
 8016ea0:	9310      	str	r3, [sp, #64]	; 0x40
 8016ea2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016ea4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016ea6:	4694      	mov	ip, r2
 8016ea8:	603b      	str	r3, [r7, #0]
 8016eaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016eac:	607b      	str	r3, [r7, #4]
 8016eae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016eb0:	3708      	adds	r7, #8
 8016eb2:	4463      	add	r3, ip
 8016eb4:	932e      	str	r3, [sp, #184]	; 0xb8
 8016eb6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016eb8:	9308      	str	r3, [sp, #32]
 8016eba:	3301      	adds	r3, #1
 8016ebc:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ebe:	2b07      	cmp	r3, #7
 8016ec0:	dd08      	ble.n	8016ed4 <_svfprintf_r+0x1214>
 8016ec2:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ec6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ec8:	f002 f84e 	bl	8018f68 <__ssprint_r>
 8016ecc:	2800      	cmp	r0, #0
 8016ece:	d000      	beq.n	8016ed2 <_svfprintf_r+0x1212>
 8016ed0:	e11a      	b.n	8017108 <_svfprintf_r+0x1448>
 8016ed2:	af2f      	add	r7, sp, #188	; 0xbc
 8016ed4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ed8:	189b      	adds	r3, r3, r2
 8016eda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016edc:	1b5b      	subs	r3, r3, r5
 8016ede:	7814      	ldrb	r4, [r2, #0]
 8016ee0:	429c      	cmp	r4, r3
 8016ee2:	dd00      	ble.n	8016ee6 <_svfprintf_r+0x1226>
 8016ee4:	001c      	movs	r4, r3
 8016ee6:	2c00      	cmp	r4, #0
 8016ee8:	dd14      	ble.n	8016f14 <_svfprintf_r+0x1254>
 8016eea:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016eec:	603d      	str	r5, [r7, #0]
 8016eee:	18e3      	adds	r3, r4, r3
 8016ef0:	932e      	str	r3, [sp, #184]	; 0xb8
 8016ef2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ef4:	607c      	str	r4, [r7, #4]
 8016ef6:	9308      	str	r3, [sp, #32]
 8016ef8:	3301      	adds	r3, #1
 8016efa:	932d      	str	r3, [sp, #180]	; 0xb4
 8016efc:	3708      	adds	r7, #8
 8016efe:	2b07      	cmp	r3, #7
 8016f00:	dd08      	ble.n	8016f14 <_svfprintf_r+0x1254>
 8016f02:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f08:	f002 f82e 	bl	8018f68 <__ssprint_r>
 8016f0c:	2800      	cmp	r0, #0
 8016f0e:	d000      	beq.n	8016f12 <_svfprintf_r+0x1252>
 8016f10:	e0fa      	b.n	8017108 <_svfprintf_r+0x1448>
 8016f12:	af2f      	add	r7, sp, #188	; 0xbc
 8016f14:	43e3      	mvns	r3, r4
 8016f16:	17db      	asrs	r3, r3, #31
 8016f18:	401c      	ands	r4, r3
 8016f1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f1c:	781b      	ldrb	r3, [r3, #0]
 8016f1e:	1b1c      	subs	r4, r3, r4
 8016f20:	2c00      	cmp	r4, #0
 8016f22:	dd19      	ble.n	8016f58 <_svfprintf_r+0x1298>
 8016f24:	0039      	movs	r1, r7
 8016f26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f28:	485c      	ldr	r0, [pc, #368]	; (801709c <_svfprintf_r+0x13dc>)
 8016f2a:	9308      	str	r3, [sp, #32]
 8016f2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016f2e:	3301      	adds	r3, #1
 8016f30:	3108      	adds	r1, #8
 8016f32:	6038      	str	r0, [r7, #0]
 8016f34:	2c10      	cmp	r4, #16
 8016f36:	dc1a      	bgt.n	8016f6e <_svfprintf_r+0x12ae>
 8016f38:	607c      	str	r4, [r7, #4]
 8016f3a:	18a4      	adds	r4, r4, r2
 8016f3c:	942e      	str	r4, [sp, #184]	; 0xb8
 8016f3e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f40:	000f      	movs	r7, r1
 8016f42:	2b07      	cmp	r3, #7
 8016f44:	dd08      	ble.n	8016f58 <_svfprintf_r+0x1298>
 8016f46:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f4c:	f002 f80c 	bl	8018f68 <__ssprint_r>
 8016f50:	2800      	cmp	r0, #0
 8016f52:	d000      	beq.n	8016f56 <_svfprintf_r+0x1296>
 8016f54:	e0d8      	b.n	8017108 <_svfprintf_r+0x1448>
 8016f56:	af2f      	add	r7, sp, #188	; 0xbc
 8016f58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f5a:	781b      	ldrb	r3, [r3, #0]
 8016f5c:	18ed      	adds	r5, r5, r3
 8016f5e:	e711      	b.n	8016d84 <_svfprintf_r+0x10c4>
 8016f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f62:	3b01      	subs	r3, #1
 8016f64:	9313      	str	r3, [sp, #76]	; 0x4c
 8016f66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f68:	3b01      	subs	r3, #1
 8016f6a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f6c:	e799      	b.n	8016ea2 <_svfprintf_r+0x11e2>
 8016f6e:	2010      	movs	r0, #16
 8016f70:	1812      	adds	r2, r2, r0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	922e      	str	r2, [sp, #184]	; 0xb8
 8016f76:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f78:	2b07      	cmp	r3, #7
 8016f7a:	dd08      	ble.n	8016f8e <_svfprintf_r+0x12ce>
 8016f7c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f82:	f001 fff1 	bl	8018f68 <__ssprint_r>
 8016f86:	2800      	cmp	r0, #0
 8016f88:	d000      	beq.n	8016f8c <_svfprintf_r+0x12cc>
 8016f8a:	e0bd      	b.n	8017108 <_svfprintf_r+0x1448>
 8016f8c:	a92f      	add	r1, sp, #188	; 0xbc
 8016f8e:	3c10      	subs	r4, #16
 8016f90:	000f      	movs	r7, r1
 8016f92:	e7c7      	b.n	8016f24 <_svfprintf_r+0x1264>
 8016f94:	003c      	movs	r4, r7
 8016f96:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f98:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016f9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f9c:	9308      	str	r3, [sp, #32]
 8016f9e:	3101      	adds	r1, #1
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	3408      	adds	r4, #8
 8016fa4:	2a01      	cmp	r2, #1
 8016fa6:	dc03      	bgt.n	8016fb0 <_svfprintf_r+0x12f0>
 8016fa8:	2201      	movs	r2, #1
 8016faa:	4216      	tst	r6, r2
 8016fac:	d100      	bne.n	8016fb0 <_svfprintf_r+0x12f0>
 8016fae:	e088      	b.n	80170c2 <_svfprintf_r+0x1402>
 8016fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fb2:	912e      	str	r1, [sp, #184]	; 0xb8
 8016fb4:	603a      	str	r2, [r7, #0]
 8016fb6:	2201      	movs	r2, #1
 8016fb8:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fba:	607a      	str	r2, [r7, #4]
 8016fbc:	2b07      	cmp	r3, #7
 8016fbe:	dd08      	ble.n	8016fd2 <_svfprintf_r+0x1312>
 8016fc0:	aa2c      	add	r2, sp, #176	; 0xb0
 8016fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fc4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016fc6:	f001 ffcf 	bl	8018f68 <__ssprint_r>
 8016fca:	2800      	cmp	r0, #0
 8016fcc:	d000      	beq.n	8016fd0 <_svfprintf_r+0x1310>
 8016fce:	e09b      	b.n	8017108 <_svfprintf_r+0x1448>
 8016fd0:	ac2f      	add	r4, sp, #188	; 0xbc
 8016fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016fd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016fd6:	4694      	mov	ip, r2
 8016fd8:	6023      	str	r3, [r4, #0]
 8016fda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016fdc:	6063      	str	r3, [r4, #4]
 8016fde:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016fe0:	3408      	adds	r4, #8
 8016fe2:	4463      	add	r3, ip
 8016fe4:	932e      	str	r3, [sp, #184]	; 0xb8
 8016fe6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016fe8:	9308      	str	r3, [sp, #32]
 8016fea:	3301      	adds	r3, #1
 8016fec:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fee:	2b07      	cmp	r3, #7
 8016ff0:	dd08      	ble.n	8017004 <_svfprintf_r+0x1344>
 8016ff2:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ff8:	f001 ffb6 	bl	8018f68 <__ssprint_r>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	d000      	beq.n	8017002 <_svfprintf_r+0x1342>
 8017000:	e082      	b.n	8017108 <_svfprintf_r+0x1448>
 8017002:	ac2f      	add	r4, sp, #188	; 0xbc
 8017004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017006:	2200      	movs	r2, #0
 8017008:	1e5d      	subs	r5, r3, #1
 801700a:	981a      	ldr	r0, [sp, #104]	; 0x68
 801700c:	2300      	movs	r3, #0
 801700e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017010:	f7e9 fa24 	bl	800045c <__aeabi_dcmpeq>
 8017014:	2800      	cmp	r0, #0
 8017016:	d12c      	bne.n	8017072 <_svfprintf_r+0x13b2>
 8017018:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801701a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801701c:	9308      	str	r3, [sp, #32]
 801701e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017020:	6065      	str	r5, [r4, #4]
 8017022:	1c5a      	adds	r2, r3, #1
 8017024:	930e      	str	r3, [sp, #56]	; 0x38
 8017026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017028:	922d      	str	r2, [sp, #180]	; 0xb4
 801702a:	3301      	adds	r3, #1
 801702c:	6023      	str	r3, [r4, #0]
 801702e:	9b08      	ldr	r3, [sp, #32]
 8017030:	3408      	adds	r4, #8
 8017032:	3b01      	subs	r3, #1
 8017034:	185b      	adds	r3, r3, r1
 8017036:	932e      	str	r3, [sp, #184]	; 0xb8
 8017038:	2a07      	cmp	r2, #7
 801703a:	dd07      	ble.n	801704c <_svfprintf_r+0x138c>
 801703c:	aa2c      	add	r2, sp, #176	; 0xb0
 801703e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017040:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017042:	f001 ff91 	bl	8018f68 <__ssprint_r>
 8017046:	2800      	cmp	r0, #0
 8017048:	d15e      	bne.n	8017108 <_svfprintf_r+0x1448>
 801704a:	ac2f      	add	r4, sp, #188	; 0xbc
 801704c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801704e:	ab28      	add	r3, sp, #160	; 0xa0
 8017050:	4694      	mov	ip, r2
 8017052:	6023      	str	r3, [r4, #0]
 8017054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017056:	6063      	str	r3, [r4, #4]
 8017058:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801705a:	4463      	add	r3, ip
 801705c:	932e      	str	r3, [sp, #184]	; 0xb8
 801705e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017060:	9308      	str	r3, [sp, #32]
 8017062:	3301      	adds	r3, #1
 8017064:	932d      	str	r3, [sp, #180]	; 0xb4
 8017066:	2b07      	cmp	r3, #7
 8017068:	dd00      	ble.n	801706c <_svfprintf_r+0x13ac>
 801706a:	e629      	b.n	8016cc0 <_svfprintf_r+0x1000>
 801706c:	3408      	adds	r4, #8
 801706e:	0027      	movs	r7, r4
 8017070:	e579      	b.n	8016b66 <_svfprintf_r+0xea6>
 8017072:	2710      	movs	r7, #16
 8017074:	2d00      	cmp	r5, #0
 8017076:	dde9      	ble.n	801704c <_svfprintf_r+0x138c>
 8017078:	0021      	movs	r1, r4
 801707a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801707c:	4807      	ldr	r0, [pc, #28]	; (801709c <_svfprintf_r+0x13dc>)
 801707e:	9308      	str	r3, [sp, #32]
 8017080:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017082:	3301      	adds	r3, #1
 8017084:	3108      	adds	r1, #8
 8017086:	6020      	str	r0, [r4, #0]
 8017088:	2d10      	cmp	r5, #16
 801708a:	dc09      	bgt.n	80170a0 <_svfprintf_r+0x13e0>
 801708c:	6065      	str	r5, [r4, #4]
 801708e:	000c      	movs	r4, r1
 8017090:	18ad      	adds	r5, r5, r2
 8017092:	952e      	str	r5, [sp, #184]	; 0xb8
 8017094:	932d      	str	r3, [sp, #180]	; 0xb4
 8017096:	2b07      	cmp	r3, #7
 8017098:	ddd8      	ble.n	801704c <_svfprintf_r+0x138c>
 801709a:	e7cf      	b.n	801703c <_svfprintf_r+0x137c>
 801709c:	0801c384 	.word	0x0801c384
 80170a0:	3210      	adds	r2, #16
 80170a2:	6067      	str	r7, [r4, #4]
 80170a4:	922e      	str	r2, [sp, #184]	; 0xb8
 80170a6:	932d      	str	r3, [sp, #180]	; 0xb4
 80170a8:	2b07      	cmp	r3, #7
 80170aa:	dd07      	ble.n	80170bc <_svfprintf_r+0x13fc>
 80170ac:	aa2c      	add	r2, sp, #176	; 0xb0
 80170ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170b2:	f001 ff59 	bl	8018f68 <__ssprint_r>
 80170b6:	2800      	cmp	r0, #0
 80170b8:	d126      	bne.n	8017108 <_svfprintf_r+0x1448>
 80170ba:	a92f      	add	r1, sp, #188	; 0xbc
 80170bc:	3d10      	subs	r5, #16
 80170be:	000c      	movs	r4, r1
 80170c0:	e7da      	b.n	8017078 <_svfprintf_r+0x13b8>
 80170c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80170c4:	912e      	str	r1, [sp, #184]	; 0xb8
 80170c6:	c705      	stmia	r7!, {r0, r2}
 80170c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80170ca:	e7e4      	b.n	8017096 <_svfprintf_r+0x13d6>
 80170cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80170ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80170d0:	2510      	movs	r5, #16
 80170d2:	1a9c      	subs	r4, r3, r2
 80170d4:	2c00      	cmp	r4, #0
 80170d6:	dc00      	bgt.n	80170da <_svfprintf_r+0x141a>
 80170d8:	e548      	b.n	8016b6c <_svfprintf_r+0xeac>
 80170da:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80170dc:	4921      	ldr	r1, [pc, #132]	; (8017164 <_svfprintf_r+0x14a4>)
 80170de:	9308      	str	r3, [sp, #32]
 80170e0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80170e2:	3301      	adds	r3, #1
 80170e4:	6039      	str	r1, [r7, #0]
 80170e6:	2c10      	cmp	r4, #16
 80170e8:	dc19      	bgt.n	801711e <_svfprintf_r+0x145e>
 80170ea:	607c      	str	r4, [r7, #4]
 80170ec:	18a4      	adds	r4, r4, r2
 80170ee:	942e      	str	r4, [sp, #184]	; 0xb8
 80170f0:	932d      	str	r3, [sp, #180]	; 0xb4
 80170f2:	2b07      	cmp	r3, #7
 80170f4:	dc00      	bgt.n	80170f8 <_svfprintf_r+0x1438>
 80170f6:	e539      	b.n	8016b6c <_svfprintf_r+0xeac>
 80170f8:	aa2c      	add	r2, sp, #176	; 0xb0
 80170fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170fe:	f001 ff33 	bl	8018f68 <__ssprint_r>
 8017102:	2800      	cmp	r0, #0
 8017104:	d100      	bne.n	8017108 <_svfprintf_r+0x1448>
 8017106:	e531      	b.n	8016b6c <_svfprintf_r+0xeac>
 8017108:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801710a:	2b00      	cmp	r3, #0
 801710c:	d101      	bne.n	8017112 <_svfprintf_r+0x1452>
 801710e:	f7ff f908 	bl	8016322 <_svfprintf_r+0x662>
 8017112:	0019      	movs	r1, r3
 8017114:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017116:	f000 ff19 	bl	8017f4c <_free_r>
 801711a:	f7ff f902 	bl	8016322 <_svfprintf_r+0x662>
 801711e:	3210      	adds	r2, #16
 8017120:	607d      	str	r5, [r7, #4]
 8017122:	922e      	str	r2, [sp, #184]	; 0xb8
 8017124:	932d      	str	r3, [sp, #180]	; 0xb4
 8017126:	3708      	adds	r7, #8
 8017128:	2b07      	cmp	r3, #7
 801712a:	dd07      	ble.n	801713c <_svfprintf_r+0x147c>
 801712c:	aa2c      	add	r2, sp, #176	; 0xb0
 801712e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017132:	f001 ff19 	bl	8018f68 <__ssprint_r>
 8017136:	2800      	cmp	r0, #0
 8017138:	d1e6      	bne.n	8017108 <_svfprintf_r+0x1448>
 801713a:	af2f      	add	r7, sp, #188	; 0xbc
 801713c:	3c10      	subs	r4, #16
 801713e:	e7cc      	b.n	80170da <_svfprintf_r+0x141a>
 8017140:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017142:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017144:	f000 ff02 	bl	8017f4c <_free_r>
 8017148:	e52a      	b.n	8016ba0 <_svfprintf_r+0xee0>
 801714a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801714c:	9306      	str	r3, [sp, #24]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d101      	bne.n	8017156 <_svfprintf_r+0x1496>
 8017152:	f7ff f8e6 	bl	8016322 <_svfprintf_r+0x662>
 8017156:	aa2c      	add	r2, sp, #176	; 0xb0
 8017158:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801715a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801715c:	f001 ff04 	bl	8018f68 <__ssprint_r>
 8017160:	f7ff f8df 	bl	8016322 <_svfprintf_r+0x662>
 8017164:	0801c374 	.word	0x0801c374

08017168 <sysconf>:
 8017168:	2380      	movs	r3, #128	; 0x80
 801716a:	b510      	push	{r4, lr}
 801716c:	015b      	lsls	r3, r3, #5
 801716e:	2808      	cmp	r0, #8
 8017170:	d004      	beq.n	801717c <sysconf+0x14>
 8017172:	f000 fe7d 	bl	8017e70 <__errno>
 8017176:	2316      	movs	r3, #22
 8017178:	6003      	str	r3, [r0, #0]
 801717a:	3b17      	subs	r3, #23
 801717c:	0018      	movs	r0, r3
 801717e:	bd10      	pop	{r4, pc}

08017180 <__ascii_wctomb>:
 8017180:	1e0b      	subs	r3, r1, #0
 8017182:	d004      	beq.n	801718e <__ascii_wctomb+0xe>
 8017184:	2aff      	cmp	r2, #255	; 0xff
 8017186:	d904      	bls.n	8017192 <__ascii_wctomb+0x12>
 8017188:	238a      	movs	r3, #138	; 0x8a
 801718a:	6003      	str	r3, [r0, #0]
 801718c:	3b8b      	subs	r3, #139	; 0x8b
 801718e:	0018      	movs	r0, r3
 8017190:	4770      	bx	lr
 8017192:	700a      	strb	r2, [r1, #0]
 8017194:	2301      	movs	r3, #1
 8017196:	e7fa      	b.n	801718e <__ascii_wctomb+0xe>

08017198 <register_fini>:
 8017198:	4b03      	ldr	r3, [pc, #12]	; (80171a8 <register_fini+0x10>)
 801719a:	b510      	push	{r4, lr}
 801719c:	2b00      	cmp	r3, #0
 801719e:	d002      	beq.n	80171a6 <register_fini+0xe>
 80171a0:	4802      	ldr	r0, [pc, #8]	; (80171ac <register_fini+0x14>)
 80171a2:	f000 f805 	bl	80171b0 <atexit>
 80171a6:	bd10      	pop	{r4, pc}
 80171a8:	00000000 	.word	0x00000000
 80171ac:	08017e7d 	.word	0x08017e7d

080171b0 <atexit>:
 80171b0:	2300      	movs	r3, #0
 80171b2:	b510      	push	{r4, lr}
 80171b4:	0001      	movs	r1, r0
 80171b6:	001a      	movs	r2, r3
 80171b8:	0018      	movs	r0, r3
 80171ba:	f001 ff53 	bl	8019064 <__register_exitproc>
 80171be:	bd10      	pop	{r4, pc}

080171c0 <quorem>:
 80171c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171c2:	6903      	ldr	r3, [r0, #16]
 80171c4:	690c      	ldr	r4, [r1, #16]
 80171c6:	b089      	sub	sp, #36	; 0x24
 80171c8:	0007      	movs	r7, r0
 80171ca:	9105      	str	r1, [sp, #20]
 80171cc:	2600      	movs	r6, #0
 80171ce:	42a3      	cmp	r3, r4
 80171d0:	db65      	blt.n	801729e <quorem+0xde>
 80171d2:	000b      	movs	r3, r1
 80171d4:	3c01      	subs	r4, #1
 80171d6:	3314      	adds	r3, #20
 80171d8:	00a5      	lsls	r5, r4, #2
 80171da:	9303      	str	r3, [sp, #12]
 80171dc:	195b      	adds	r3, r3, r5
 80171de:	9304      	str	r3, [sp, #16]
 80171e0:	0003      	movs	r3, r0
 80171e2:	3314      	adds	r3, #20
 80171e4:	9302      	str	r3, [sp, #8]
 80171e6:	195d      	adds	r5, r3, r5
 80171e8:	9b04      	ldr	r3, [sp, #16]
 80171ea:	6828      	ldr	r0, [r5, #0]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	1c59      	adds	r1, r3, #1
 80171f0:	9301      	str	r3, [sp, #4]
 80171f2:	f7e8 ffad 	bl	8000150 <__udivsi3>
 80171f6:	9001      	str	r0, [sp, #4]
 80171f8:	42b0      	cmp	r0, r6
 80171fa:	d029      	beq.n	8017250 <quorem+0x90>
 80171fc:	9b03      	ldr	r3, [sp, #12]
 80171fe:	9802      	ldr	r0, [sp, #8]
 8017200:	469c      	mov	ip, r3
 8017202:	9606      	str	r6, [sp, #24]
 8017204:	4662      	mov	r2, ip
 8017206:	ca08      	ldmia	r2!, {r3}
 8017208:	4694      	mov	ip, r2
 801720a:	9a01      	ldr	r2, [sp, #4]
 801720c:	b299      	uxth	r1, r3
 801720e:	4351      	muls	r1, r2
 8017210:	0c1b      	lsrs	r3, r3, #16
 8017212:	4353      	muls	r3, r2
 8017214:	1989      	adds	r1, r1, r6
 8017216:	0c0a      	lsrs	r2, r1, #16
 8017218:	189b      	adds	r3, r3, r2
 801721a:	9307      	str	r3, [sp, #28]
 801721c:	0c1e      	lsrs	r6, r3, #16
 801721e:	6803      	ldr	r3, [r0, #0]
 8017220:	b289      	uxth	r1, r1
 8017222:	b29a      	uxth	r2, r3
 8017224:	9b06      	ldr	r3, [sp, #24]
 8017226:	18d2      	adds	r2, r2, r3
 8017228:	6803      	ldr	r3, [r0, #0]
 801722a:	1a52      	subs	r2, r2, r1
 801722c:	0c19      	lsrs	r1, r3, #16
 801722e:	466b      	mov	r3, sp
 8017230:	8b9b      	ldrh	r3, [r3, #28]
 8017232:	1acb      	subs	r3, r1, r3
 8017234:	1411      	asrs	r1, r2, #16
 8017236:	185b      	adds	r3, r3, r1
 8017238:	1419      	asrs	r1, r3, #16
 801723a:	b292      	uxth	r2, r2
 801723c:	041b      	lsls	r3, r3, #16
 801723e:	431a      	orrs	r2, r3
 8017240:	9b04      	ldr	r3, [sp, #16]
 8017242:	9106      	str	r1, [sp, #24]
 8017244:	c004      	stmia	r0!, {r2}
 8017246:	4563      	cmp	r3, ip
 8017248:	d2dc      	bcs.n	8017204 <quorem+0x44>
 801724a:	682b      	ldr	r3, [r5, #0]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d02d      	beq.n	80172ac <quorem+0xec>
 8017250:	9905      	ldr	r1, [sp, #20]
 8017252:	0038      	movs	r0, r7
 8017254:	f001 fcb2 	bl	8018bbc <__mcmp>
 8017258:	2800      	cmp	r0, #0
 801725a:	db1f      	blt.n	801729c <quorem+0xdc>
 801725c:	2500      	movs	r5, #0
 801725e:	9b01      	ldr	r3, [sp, #4]
 8017260:	9802      	ldr	r0, [sp, #8]
 8017262:	3301      	adds	r3, #1
 8017264:	9903      	ldr	r1, [sp, #12]
 8017266:	9301      	str	r3, [sp, #4]
 8017268:	6802      	ldr	r2, [r0, #0]
 801726a:	c908      	ldmia	r1!, {r3}
 801726c:	b292      	uxth	r2, r2
 801726e:	1955      	adds	r5, r2, r5
 8017270:	b29a      	uxth	r2, r3
 8017272:	1aaa      	subs	r2, r5, r2
 8017274:	6805      	ldr	r5, [r0, #0]
 8017276:	0c1b      	lsrs	r3, r3, #16
 8017278:	0c2d      	lsrs	r5, r5, #16
 801727a:	1aeb      	subs	r3, r5, r3
 801727c:	1415      	asrs	r5, r2, #16
 801727e:	195b      	adds	r3, r3, r5
 8017280:	141d      	asrs	r5, r3, #16
 8017282:	b292      	uxth	r2, r2
 8017284:	041b      	lsls	r3, r3, #16
 8017286:	4313      	orrs	r3, r2
 8017288:	c008      	stmia	r0!, {r3}
 801728a:	9b04      	ldr	r3, [sp, #16]
 801728c:	428b      	cmp	r3, r1
 801728e:	d2eb      	bcs.n	8017268 <quorem+0xa8>
 8017290:	9a02      	ldr	r2, [sp, #8]
 8017292:	00a3      	lsls	r3, r4, #2
 8017294:	18d3      	adds	r3, r2, r3
 8017296:	681a      	ldr	r2, [r3, #0]
 8017298:	2a00      	cmp	r2, #0
 801729a:	d011      	beq.n	80172c0 <quorem+0x100>
 801729c:	9e01      	ldr	r6, [sp, #4]
 801729e:	0030      	movs	r0, r6
 80172a0:	b009      	add	sp, #36	; 0x24
 80172a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172a4:	682b      	ldr	r3, [r5, #0]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d104      	bne.n	80172b4 <quorem+0xf4>
 80172aa:	3c01      	subs	r4, #1
 80172ac:	9b02      	ldr	r3, [sp, #8]
 80172ae:	3d04      	subs	r5, #4
 80172b0:	42ab      	cmp	r3, r5
 80172b2:	d3f7      	bcc.n	80172a4 <quorem+0xe4>
 80172b4:	613c      	str	r4, [r7, #16]
 80172b6:	e7cb      	b.n	8017250 <quorem+0x90>
 80172b8:	681a      	ldr	r2, [r3, #0]
 80172ba:	2a00      	cmp	r2, #0
 80172bc:	d104      	bne.n	80172c8 <quorem+0x108>
 80172be:	3c01      	subs	r4, #1
 80172c0:	9a02      	ldr	r2, [sp, #8]
 80172c2:	3b04      	subs	r3, #4
 80172c4:	429a      	cmp	r2, r3
 80172c6:	d3f7      	bcc.n	80172b8 <quorem+0xf8>
 80172c8:	613c      	str	r4, [r7, #16]
 80172ca:	e7e7      	b.n	801729c <quorem+0xdc>

080172cc <_dtoa_r>:
 80172cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172ce:	0014      	movs	r4, r2
 80172d0:	001d      	movs	r5, r3
 80172d2:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80172d4:	b09b      	sub	sp, #108	; 0x6c
 80172d6:	9002      	str	r0, [sp, #8]
 80172d8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80172da:	9406      	str	r4, [sp, #24]
 80172dc:	9507      	str	r5, [sp, #28]
 80172de:	2900      	cmp	r1, #0
 80172e0:	d009      	beq.n	80172f6 <_dtoa_r+0x2a>
 80172e2:	2301      	movs	r3, #1
 80172e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80172e6:	4093      	lsls	r3, r2
 80172e8:	604a      	str	r2, [r1, #4]
 80172ea:	608b      	str	r3, [r1, #8]
 80172ec:	f001 fa6a 	bl	80187c4 <_Bfree>
 80172f0:	2300      	movs	r3, #0
 80172f2:	9a02      	ldr	r2, [sp, #8]
 80172f4:	6413      	str	r3, [r2, #64]	; 0x40
 80172f6:	2d00      	cmp	r5, #0
 80172f8:	da20      	bge.n	801733c <_dtoa_r+0x70>
 80172fa:	2301      	movs	r3, #1
 80172fc:	6033      	str	r3, [r6, #0]
 80172fe:	006b      	lsls	r3, r5, #1
 8017300:	085b      	lsrs	r3, r3, #1
 8017302:	9307      	str	r3, [sp, #28]
 8017304:	9c07      	ldr	r4, [sp, #28]
 8017306:	4bb2      	ldr	r3, [pc, #712]	; (80175d0 <_dtoa_r+0x304>)
 8017308:	0022      	movs	r2, r4
 801730a:	9317      	str	r3, [sp, #92]	; 0x5c
 801730c:	401a      	ands	r2, r3
 801730e:	429a      	cmp	r2, r3
 8017310:	d117      	bne.n	8017342 <_dtoa_r+0x76>
 8017312:	4bb0      	ldr	r3, [pc, #704]	; (80175d4 <_dtoa_r+0x308>)
 8017314:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017316:	6013      	str	r3, [r2, #0]
 8017318:	9b06      	ldr	r3, [sp, #24]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d103      	bne.n	8017326 <_dtoa_r+0x5a>
 801731e:	0324      	lsls	r4, r4, #12
 8017320:	d101      	bne.n	8017326 <_dtoa_r+0x5a>
 8017322:	f000 fd89 	bl	8017e38 <_dtoa_r+0xb6c>
 8017326:	4bac      	ldr	r3, [pc, #688]	; (80175d8 <_dtoa_r+0x30c>)
 8017328:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801732a:	9308      	str	r3, [sp, #32]
 801732c:	2a00      	cmp	r2, #0
 801732e:	d002      	beq.n	8017336 <_dtoa_r+0x6a>
 8017330:	4baa      	ldr	r3, [pc, #680]	; (80175dc <_dtoa_r+0x310>)
 8017332:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017334:	6013      	str	r3, [r2, #0]
 8017336:	9808      	ldr	r0, [sp, #32]
 8017338:	b01b      	add	sp, #108	; 0x6c
 801733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801733c:	2300      	movs	r3, #0
 801733e:	6033      	str	r3, [r6, #0]
 8017340:	e7e0      	b.n	8017304 <_dtoa_r+0x38>
 8017342:	9e06      	ldr	r6, [sp, #24]
 8017344:	9f07      	ldr	r7, [sp, #28]
 8017346:	2200      	movs	r2, #0
 8017348:	2300      	movs	r3, #0
 801734a:	0030      	movs	r0, r6
 801734c:	0039      	movs	r1, r7
 801734e:	f7e9 f885 	bl	800045c <__aeabi_dcmpeq>
 8017352:	1e05      	subs	r5, r0, #0
 8017354:	d00b      	beq.n	801736e <_dtoa_r+0xa2>
 8017356:	2301      	movs	r3, #1
 8017358:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801735a:	6013      	str	r3, [r2, #0]
 801735c:	4ba0      	ldr	r3, [pc, #640]	; (80175e0 <_dtoa_r+0x314>)
 801735e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017360:	9308      	str	r3, [sp, #32]
 8017362:	2a00      	cmp	r2, #0
 8017364:	d0e7      	beq.n	8017336 <_dtoa_r+0x6a>
 8017366:	4a9f      	ldr	r2, [pc, #636]	; (80175e4 <_dtoa_r+0x318>)
 8017368:	9924      	ldr	r1, [sp, #144]	; 0x90
 801736a:	600a      	str	r2, [r1, #0]
 801736c:	e7e3      	b.n	8017336 <_dtoa_r+0x6a>
 801736e:	ab18      	add	r3, sp, #96	; 0x60
 8017370:	9301      	str	r3, [sp, #4]
 8017372:	ab19      	add	r3, sp, #100	; 0x64
 8017374:	9300      	str	r3, [sp, #0]
 8017376:	0032      	movs	r2, r6
 8017378:	003b      	movs	r3, r7
 801737a:	9802      	ldr	r0, [sp, #8]
 801737c:	f001 fd0e 	bl	8018d9c <__d2b>
 8017380:	0063      	lsls	r3, r4, #1
 8017382:	9003      	str	r0, [sp, #12]
 8017384:	0d5b      	lsrs	r3, r3, #21
 8017386:	d074      	beq.n	8017472 <_dtoa_r+0x1a6>
 8017388:	033a      	lsls	r2, r7, #12
 801738a:	4c97      	ldr	r4, [pc, #604]	; (80175e8 <_dtoa_r+0x31c>)
 801738c:	0b12      	lsrs	r2, r2, #12
 801738e:	4314      	orrs	r4, r2
 8017390:	0021      	movs	r1, r4
 8017392:	4a96      	ldr	r2, [pc, #600]	; (80175ec <_dtoa_r+0x320>)
 8017394:	0030      	movs	r0, r6
 8017396:	9516      	str	r5, [sp, #88]	; 0x58
 8017398:	189e      	adds	r6, r3, r2
 801739a:	2200      	movs	r2, #0
 801739c:	4b94      	ldr	r3, [pc, #592]	; (80175f0 <_dtoa_r+0x324>)
 801739e:	f7ea ffbb 	bl	8002318 <__aeabi_dsub>
 80173a2:	4a94      	ldr	r2, [pc, #592]	; (80175f4 <_dtoa_r+0x328>)
 80173a4:	4b94      	ldr	r3, [pc, #592]	; (80175f8 <_dtoa_r+0x32c>)
 80173a6:	f7ea fd45 	bl	8001e34 <__aeabi_dmul>
 80173aa:	4a94      	ldr	r2, [pc, #592]	; (80175fc <_dtoa_r+0x330>)
 80173ac:	4b94      	ldr	r3, [pc, #592]	; (8017600 <_dtoa_r+0x334>)
 80173ae:	f7e9 fe1b 	bl	8000fe8 <__aeabi_dadd>
 80173b2:	0004      	movs	r4, r0
 80173b4:	0030      	movs	r0, r6
 80173b6:	000d      	movs	r5, r1
 80173b8:	f7eb fb48 	bl	8002a4c <__aeabi_i2d>
 80173bc:	4a91      	ldr	r2, [pc, #580]	; (8017604 <_dtoa_r+0x338>)
 80173be:	4b92      	ldr	r3, [pc, #584]	; (8017608 <_dtoa_r+0x33c>)
 80173c0:	f7ea fd38 	bl	8001e34 <__aeabi_dmul>
 80173c4:	0002      	movs	r2, r0
 80173c6:	000b      	movs	r3, r1
 80173c8:	0020      	movs	r0, r4
 80173ca:	0029      	movs	r1, r5
 80173cc:	f7e9 fe0c 	bl	8000fe8 <__aeabi_dadd>
 80173d0:	0004      	movs	r4, r0
 80173d2:	000d      	movs	r5, r1
 80173d4:	f7eb fb04 	bl	80029e0 <__aeabi_d2iz>
 80173d8:	2200      	movs	r2, #0
 80173da:	0007      	movs	r7, r0
 80173dc:	2300      	movs	r3, #0
 80173de:	0020      	movs	r0, r4
 80173e0:	0029      	movs	r1, r5
 80173e2:	f7e9 f841 	bl	8000468 <__aeabi_dcmplt>
 80173e6:	2800      	cmp	r0, #0
 80173e8:	d009      	beq.n	80173fe <_dtoa_r+0x132>
 80173ea:	0038      	movs	r0, r7
 80173ec:	f7eb fb2e 	bl	8002a4c <__aeabi_i2d>
 80173f0:	002b      	movs	r3, r5
 80173f2:	0022      	movs	r2, r4
 80173f4:	f7e9 f832 	bl	800045c <__aeabi_dcmpeq>
 80173f8:	4243      	negs	r3, r0
 80173fa:	4158      	adcs	r0, r3
 80173fc:	1a3f      	subs	r7, r7, r0
 80173fe:	2301      	movs	r3, #1
 8017400:	9314      	str	r3, [sp, #80]	; 0x50
 8017402:	2f16      	cmp	r7, #22
 8017404:	d80d      	bhi.n	8017422 <_dtoa_r+0x156>
 8017406:	4981      	ldr	r1, [pc, #516]	; (801760c <_dtoa_r+0x340>)
 8017408:	00fb      	lsls	r3, r7, #3
 801740a:	18c9      	adds	r1, r1, r3
 801740c:	6808      	ldr	r0, [r1, #0]
 801740e:	6849      	ldr	r1, [r1, #4]
 8017410:	9a06      	ldr	r2, [sp, #24]
 8017412:	9b07      	ldr	r3, [sp, #28]
 8017414:	f7e9 f83c 	bl	8000490 <__aeabi_dcmpgt>
 8017418:	2800      	cmp	r0, #0
 801741a:	d046      	beq.n	80174aa <_dtoa_r+0x1de>
 801741c:	2300      	movs	r3, #0
 801741e:	3f01      	subs	r7, #1
 8017420:	9314      	str	r3, [sp, #80]	; 0x50
 8017422:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017424:	1b9e      	subs	r6, r3, r6
 8017426:	2300      	movs	r3, #0
 8017428:	930a      	str	r3, [sp, #40]	; 0x28
 801742a:	0033      	movs	r3, r6
 801742c:	3b01      	subs	r3, #1
 801742e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017430:	d504      	bpl.n	801743c <_dtoa_r+0x170>
 8017432:	2301      	movs	r3, #1
 8017434:	1b9b      	subs	r3, r3, r6
 8017436:	930a      	str	r3, [sp, #40]	; 0x28
 8017438:	2300      	movs	r3, #0
 801743a:	930b      	str	r3, [sp, #44]	; 0x2c
 801743c:	2f00      	cmp	r7, #0
 801743e:	db36      	blt.n	80174ae <_dtoa_r+0x1e2>
 8017440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017442:	9711      	str	r7, [sp, #68]	; 0x44
 8017444:	19db      	adds	r3, r3, r7
 8017446:	930b      	str	r3, [sp, #44]	; 0x2c
 8017448:	2300      	movs	r3, #0
 801744a:	9304      	str	r3, [sp, #16]
 801744c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801744e:	2401      	movs	r4, #1
 8017450:	2b09      	cmp	r3, #9
 8017452:	d900      	bls.n	8017456 <_dtoa_r+0x18a>
 8017454:	e082      	b.n	801755c <_dtoa_r+0x290>
 8017456:	2b05      	cmp	r3, #5
 8017458:	dd02      	ble.n	8017460 <_dtoa_r+0x194>
 801745a:	2400      	movs	r4, #0
 801745c:	3b04      	subs	r3, #4
 801745e:	9320      	str	r3, [sp, #128]	; 0x80
 8017460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017462:	1e98      	subs	r0, r3, #2
 8017464:	2803      	cmp	r0, #3
 8017466:	d900      	bls.n	801746a <_dtoa_r+0x19e>
 8017468:	e082      	b.n	8017570 <_dtoa_r+0x2a4>
 801746a:	f7e8 fe5d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801746e:	7573      	.short	0x7573
 8017470:	6828      	.short	0x6828
 8017472:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017474:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8017476:	189e      	adds	r6, r3, r2
 8017478:	4b65      	ldr	r3, [pc, #404]	; (8017610 <_dtoa_r+0x344>)
 801747a:	18f2      	adds	r2, r6, r3
 801747c:	2a20      	cmp	r2, #32
 801747e:	dd0f      	ble.n	80174a0 <_dtoa_r+0x1d4>
 8017480:	2340      	movs	r3, #64	; 0x40
 8017482:	1a9b      	subs	r3, r3, r2
 8017484:	409c      	lsls	r4, r3
 8017486:	4b63      	ldr	r3, [pc, #396]	; (8017614 <_dtoa_r+0x348>)
 8017488:	9806      	ldr	r0, [sp, #24]
 801748a:	18f3      	adds	r3, r6, r3
 801748c:	40d8      	lsrs	r0, r3
 801748e:	4320      	orrs	r0, r4
 8017490:	f7eb fb16 	bl	8002ac0 <__aeabi_ui2d>
 8017494:	2301      	movs	r3, #1
 8017496:	4c60      	ldr	r4, [pc, #384]	; (8017618 <_dtoa_r+0x34c>)
 8017498:	3e01      	subs	r6, #1
 801749a:	1909      	adds	r1, r1, r4
 801749c:	9316      	str	r3, [sp, #88]	; 0x58
 801749e:	e77c      	b.n	801739a <_dtoa_r+0xce>
 80174a0:	2320      	movs	r3, #32
 80174a2:	9806      	ldr	r0, [sp, #24]
 80174a4:	1a9b      	subs	r3, r3, r2
 80174a6:	4098      	lsls	r0, r3
 80174a8:	e7f2      	b.n	8017490 <_dtoa_r+0x1c4>
 80174aa:	9014      	str	r0, [sp, #80]	; 0x50
 80174ac:	e7b9      	b.n	8017422 <_dtoa_r+0x156>
 80174ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174b0:	1bdb      	subs	r3, r3, r7
 80174b2:	930a      	str	r3, [sp, #40]	; 0x28
 80174b4:	427b      	negs	r3, r7
 80174b6:	9304      	str	r3, [sp, #16]
 80174b8:	2300      	movs	r3, #0
 80174ba:	9311      	str	r3, [sp, #68]	; 0x44
 80174bc:	e7c6      	b.n	801744c <_dtoa_r+0x180>
 80174be:	2301      	movs	r3, #1
 80174c0:	930d      	str	r3, [sp, #52]	; 0x34
 80174c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	dd57      	ble.n	8017578 <_dtoa_r+0x2ac>
 80174c8:	930c      	str	r3, [sp, #48]	; 0x30
 80174ca:	9309      	str	r3, [sp, #36]	; 0x24
 80174cc:	2200      	movs	r2, #0
 80174ce:	9902      	ldr	r1, [sp, #8]
 80174d0:	644a      	str	r2, [r1, #68]	; 0x44
 80174d2:	3204      	adds	r2, #4
 80174d4:	0010      	movs	r0, r2
 80174d6:	9902      	ldr	r1, [sp, #8]
 80174d8:	3014      	adds	r0, #20
 80174da:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80174dc:	4298      	cmp	r0, r3
 80174de:	d950      	bls.n	8017582 <_dtoa_r+0x2b6>
 80174e0:	9802      	ldr	r0, [sp, #8]
 80174e2:	f001 f947 	bl	8018774 <_Balloc>
 80174e6:	9b02      	ldr	r3, [sp, #8]
 80174e8:	9008      	str	r0, [sp, #32]
 80174ea:	6418      	str	r0, [r3, #64]	; 0x40
 80174ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174ee:	2b0e      	cmp	r3, #14
 80174f0:	d900      	bls.n	80174f4 <_dtoa_r+0x228>
 80174f2:	e10c      	b.n	801770e <_dtoa_r+0x442>
 80174f4:	2c00      	cmp	r4, #0
 80174f6:	d100      	bne.n	80174fa <_dtoa_r+0x22e>
 80174f8:	e109      	b.n	801770e <_dtoa_r+0x442>
 80174fa:	9b06      	ldr	r3, [sp, #24]
 80174fc:	9c07      	ldr	r4, [sp, #28]
 80174fe:	9312      	str	r3, [sp, #72]	; 0x48
 8017500:	9413      	str	r4, [sp, #76]	; 0x4c
 8017502:	2f00      	cmp	r7, #0
 8017504:	dc00      	bgt.n	8017508 <_dtoa_r+0x23c>
 8017506:	e08b      	b.n	8017620 <_dtoa_r+0x354>
 8017508:	210f      	movs	r1, #15
 801750a:	003a      	movs	r2, r7
 801750c:	4b3f      	ldr	r3, [pc, #252]	; (801760c <_dtoa_r+0x340>)
 801750e:	400a      	ands	r2, r1
 8017510:	00d2      	lsls	r2, r2, #3
 8017512:	189b      	adds	r3, r3, r2
 8017514:	681d      	ldr	r5, [r3, #0]
 8017516:	685e      	ldr	r6, [r3, #4]
 8017518:	2302      	movs	r3, #2
 801751a:	113c      	asrs	r4, r7, #4
 801751c:	930e      	str	r3, [sp, #56]	; 0x38
 801751e:	06e3      	lsls	r3, r4, #27
 8017520:	d50b      	bpl.n	801753a <_dtoa_r+0x26e>
 8017522:	4b3e      	ldr	r3, [pc, #248]	; (801761c <_dtoa_r+0x350>)
 8017524:	400c      	ands	r4, r1
 8017526:	6a1a      	ldr	r2, [r3, #32]
 8017528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801752a:	9812      	ldr	r0, [sp, #72]	; 0x48
 801752c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801752e:	f7ea f877 	bl	8001620 <__aeabi_ddiv>
 8017532:	2303      	movs	r3, #3
 8017534:	9006      	str	r0, [sp, #24]
 8017536:	9107      	str	r1, [sp, #28]
 8017538:	930e      	str	r3, [sp, #56]	; 0x38
 801753a:	2300      	movs	r3, #0
 801753c:	e03b      	b.n	80175b6 <_dtoa_r+0x2ea>
 801753e:	2301      	movs	r3, #1
 8017540:	930d      	str	r3, [sp, #52]	; 0x34
 8017542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017544:	18fb      	adds	r3, r7, r3
 8017546:	930c      	str	r3, [sp, #48]	; 0x30
 8017548:	3301      	adds	r3, #1
 801754a:	9309      	str	r3, [sp, #36]	; 0x24
 801754c:	2b00      	cmp	r3, #0
 801754e:	dcbd      	bgt.n	80174cc <_dtoa_r+0x200>
 8017550:	2301      	movs	r3, #1
 8017552:	e7bb      	b.n	80174cc <_dtoa_r+0x200>
 8017554:	2300      	movs	r3, #0
 8017556:	e7b3      	b.n	80174c0 <_dtoa_r+0x1f4>
 8017558:	2300      	movs	r3, #0
 801755a:	e7f1      	b.n	8017540 <_dtoa_r+0x274>
 801755c:	2300      	movs	r3, #0
 801755e:	940d      	str	r4, [sp, #52]	; 0x34
 8017560:	9320      	str	r3, [sp, #128]	; 0x80
 8017562:	3b01      	subs	r3, #1
 8017564:	2200      	movs	r2, #0
 8017566:	930c      	str	r3, [sp, #48]	; 0x30
 8017568:	9309      	str	r3, [sp, #36]	; 0x24
 801756a:	3313      	adds	r3, #19
 801756c:	9221      	str	r2, [sp, #132]	; 0x84
 801756e:	e7ad      	b.n	80174cc <_dtoa_r+0x200>
 8017570:	2301      	movs	r3, #1
 8017572:	930d      	str	r3, [sp, #52]	; 0x34
 8017574:	3b02      	subs	r3, #2
 8017576:	e7f5      	b.n	8017564 <_dtoa_r+0x298>
 8017578:	2301      	movs	r3, #1
 801757a:	930c      	str	r3, [sp, #48]	; 0x30
 801757c:	9309      	str	r3, [sp, #36]	; 0x24
 801757e:	001a      	movs	r2, r3
 8017580:	e7f4      	b.n	801756c <_dtoa_r+0x2a0>
 8017582:	9802      	ldr	r0, [sp, #8]
 8017584:	3101      	adds	r1, #1
 8017586:	6441      	str	r1, [r0, #68]	; 0x44
 8017588:	0052      	lsls	r2, r2, #1
 801758a:	e7a3      	b.n	80174d4 <_dtoa_r+0x208>
 801758c:	2301      	movs	r3, #1
 801758e:	421c      	tst	r4, r3
 8017590:	d00e      	beq.n	80175b0 <_dtoa_r+0x2e4>
 8017592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017594:	4a21      	ldr	r2, [pc, #132]	; (801761c <_dtoa_r+0x350>)
 8017596:	3301      	adds	r3, #1
 8017598:	930e      	str	r3, [sp, #56]	; 0x38
 801759a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801759c:	0028      	movs	r0, r5
 801759e:	00db      	lsls	r3, r3, #3
 80175a0:	189b      	adds	r3, r3, r2
 80175a2:	0031      	movs	r1, r6
 80175a4:	681a      	ldr	r2, [r3, #0]
 80175a6:	685b      	ldr	r3, [r3, #4]
 80175a8:	f7ea fc44 	bl	8001e34 <__aeabi_dmul>
 80175ac:	0005      	movs	r5, r0
 80175ae:	000e      	movs	r6, r1
 80175b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175b2:	1064      	asrs	r4, r4, #1
 80175b4:	3301      	adds	r3, #1
 80175b6:	9310      	str	r3, [sp, #64]	; 0x40
 80175b8:	2c00      	cmp	r4, #0
 80175ba:	d1e7      	bne.n	801758c <_dtoa_r+0x2c0>
 80175bc:	9806      	ldr	r0, [sp, #24]
 80175be:	9907      	ldr	r1, [sp, #28]
 80175c0:	002a      	movs	r2, r5
 80175c2:	0033      	movs	r3, r6
 80175c4:	f7ea f82c 	bl	8001620 <__aeabi_ddiv>
 80175c8:	9006      	str	r0, [sp, #24]
 80175ca:	9107      	str	r1, [sp, #28]
 80175cc:	e043      	b.n	8017656 <_dtoa_r+0x38a>
 80175ce:	46c0      	nop			; (mov r8, r8)
 80175d0:	7ff00000 	.word	0x7ff00000
 80175d4:	0000270f 	.word	0x0000270f
 80175d8:	0801c49e 	.word	0x0801c49e
 80175dc:	0801c4a1 	.word	0x0801c4a1
 80175e0:	0801c372 	.word	0x0801c372
 80175e4:	0801c373 	.word	0x0801c373
 80175e8:	3ff00000 	.word	0x3ff00000
 80175ec:	fffffc01 	.word	0xfffffc01
 80175f0:	3ff80000 	.word	0x3ff80000
 80175f4:	636f4361 	.word	0x636f4361
 80175f8:	3fd287a7 	.word	0x3fd287a7
 80175fc:	8b60c8b3 	.word	0x8b60c8b3
 8017600:	3fc68a28 	.word	0x3fc68a28
 8017604:	509f79fb 	.word	0x509f79fb
 8017608:	3fd34413 	.word	0x3fd34413
 801760c:	0801c4d0 	.word	0x0801c4d0
 8017610:	00000432 	.word	0x00000432
 8017614:	00000412 	.word	0x00000412
 8017618:	fe100000 	.word	0xfe100000
 801761c:	0801c4a8 	.word	0x0801c4a8
 8017620:	2302      	movs	r3, #2
 8017622:	930e      	str	r3, [sp, #56]	; 0x38
 8017624:	2f00      	cmp	r7, #0
 8017626:	d016      	beq.n	8017656 <_dtoa_r+0x38a>
 8017628:	9812      	ldr	r0, [sp, #72]	; 0x48
 801762a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801762c:	427c      	negs	r4, r7
 801762e:	330d      	adds	r3, #13
 8017630:	4023      	ands	r3, r4
 8017632:	4acf      	ldr	r2, [pc, #828]	; (8017970 <_dtoa_r+0x6a4>)
 8017634:	00db      	lsls	r3, r3, #3
 8017636:	18d3      	adds	r3, r2, r3
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	685b      	ldr	r3, [r3, #4]
 801763c:	f7ea fbfa 	bl	8001e34 <__aeabi_dmul>
 8017640:	2300      	movs	r3, #0
 8017642:	2601      	movs	r6, #1
 8017644:	001d      	movs	r5, r3
 8017646:	9006      	str	r0, [sp, #24]
 8017648:	9107      	str	r1, [sp, #28]
 801764a:	1124      	asrs	r4, r4, #4
 801764c:	2c00      	cmp	r4, #0
 801764e:	d000      	beq.n	8017652 <_dtoa_r+0x386>
 8017650:	e08c      	b.n	801776c <_dtoa_r+0x4a0>
 8017652:	2b00      	cmp	r3, #0
 8017654:	d1b8      	bne.n	80175c8 <_dtoa_r+0x2fc>
 8017656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017658:	2b00      	cmp	r3, #0
 801765a:	d100      	bne.n	801765e <_dtoa_r+0x392>
 801765c:	e096      	b.n	801778c <_dtoa_r+0x4c0>
 801765e:	9c06      	ldr	r4, [sp, #24]
 8017660:	9d07      	ldr	r5, [sp, #28]
 8017662:	2200      	movs	r2, #0
 8017664:	4bc3      	ldr	r3, [pc, #780]	; (8017974 <_dtoa_r+0x6a8>)
 8017666:	0020      	movs	r0, r4
 8017668:	0029      	movs	r1, r5
 801766a:	f7e8 fefd 	bl	8000468 <__aeabi_dcmplt>
 801766e:	2800      	cmp	r0, #0
 8017670:	d100      	bne.n	8017674 <_dtoa_r+0x3a8>
 8017672:	e08b      	b.n	801778c <_dtoa_r+0x4c0>
 8017674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017676:	2b00      	cmp	r3, #0
 8017678:	d100      	bne.n	801767c <_dtoa_r+0x3b0>
 801767a:	e087      	b.n	801778c <_dtoa_r+0x4c0>
 801767c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801767e:	2b00      	cmp	r3, #0
 8017680:	dd41      	ble.n	8017706 <_dtoa_r+0x43a>
 8017682:	4bbd      	ldr	r3, [pc, #756]	; (8017978 <_dtoa_r+0x6ac>)
 8017684:	2200      	movs	r2, #0
 8017686:	0020      	movs	r0, r4
 8017688:	0029      	movs	r1, r5
 801768a:	f7ea fbd3 	bl	8001e34 <__aeabi_dmul>
 801768e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017690:	9006      	str	r0, [sp, #24]
 8017692:	9107      	str	r1, [sp, #28]
 8017694:	3301      	adds	r3, #1
 8017696:	930e      	str	r3, [sp, #56]	; 0x38
 8017698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801769a:	1e7e      	subs	r6, r7, #1
 801769c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801769e:	9310      	str	r3, [sp, #64]	; 0x40
 80176a0:	f7eb f9d4 	bl	8002a4c <__aeabi_i2d>
 80176a4:	9a06      	ldr	r2, [sp, #24]
 80176a6:	9b07      	ldr	r3, [sp, #28]
 80176a8:	f7ea fbc4 	bl	8001e34 <__aeabi_dmul>
 80176ac:	2200      	movs	r2, #0
 80176ae:	4bb3      	ldr	r3, [pc, #716]	; (801797c <_dtoa_r+0x6b0>)
 80176b0:	f7e9 fc9a 	bl	8000fe8 <__aeabi_dadd>
 80176b4:	4ab2      	ldr	r2, [pc, #712]	; (8017980 <_dtoa_r+0x6b4>)
 80176b6:	900e      	str	r0, [sp, #56]	; 0x38
 80176b8:	910f      	str	r1, [sp, #60]	; 0x3c
 80176ba:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80176bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80176be:	4694      	mov	ip, r2
 80176c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80176c2:	4463      	add	r3, ip
 80176c4:	9315      	str	r3, [sp, #84]	; 0x54
 80176c6:	001d      	movs	r5, r3
 80176c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d161      	bne.n	8017792 <_dtoa_r+0x4c6>
 80176ce:	9806      	ldr	r0, [sp, #24]
 80176d0:	9907      	ldr	r1, [sp, #28]
 80176d2:	2200      	movs	r2, #0
 80176d4:	4bab      	ldr	r3, [pc, #684]	; (8017984 <_dtoa_r+0x6b8>)
 80176d6:	f7ea fe1f 	bl	8002318 <__aeabi_dsub>
 80176da:	0022      	movs	r2, r4
 80176dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80176de:	9006      	str	r0, [sp, #24]
 80176e0:	9107      	str	r1, [sp, #28]
 80176e2:	f7e8 fed5 	bl	8000490 <__aeabi_dcmpgt>
 80176e6:	2800      	cmp	r0, #0
 80176e8:	d000      	beq.n	80176ec <_dtoa_r+0x420>
 80176ea:	e2aa      	b.n	8017c42 <_dtoa_r+0x976>
 80176ec:	48a6      	ldr	r0, [pc, #664]	; (8017988 <_dtoa_r+0x6bc>)
 80176ee:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80176f0:	4684      	mov	ip, r0
 80176f2:	4461      	add	r1, ip
 80176f4:	000b      	movs	r3, r1
 80176f6:	9806      	ldr	r0, [sp, #24]
 80176f8:	9907      	ldr	r1, [sp, #28]
 80176fa:	0022      	movs	r2, r4
 80176fc:	f7e8 feb4 	bl	8000468 <__aeabi_dcmplt>
 8017700:	2800      	cmp	r0, #0
 8017702:	d000      	beq.n	8017706 <_dtoa_r+0x43a>
 8017704:	e297      	b.n	8017c36 <_dtoa_r+0x96a>
 8017706:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017708:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801770a:	9306      	str	r3, [sp, #24]
 801770c:	9407      	str	r4, [sp, #28]
 801770e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017710:	2b00      	cmp	r3, #0
 8017712:	da00      	bge.n	8017716 <_dtoa_r+0x44a>
 8017714:	e15e      	b.n	80179d4 <_dtoa_r+0x708>
 8017716:	2f0e      	cmp	r7, #14
 8017718:	dd00      	ble.n	801771c <_dtoa_r+0x450>
 801771a:	e15b      	b.n	80179d4 <_dtoa_r+0x708>
 801771c:	4b94      	ldr	r3, [pc, #592]	; (8017970 <_dtoa_r+0x6a4>)
 801771e:	00fa      	lsls	r2, r7, #3
 8017720:	189b      	adds	r3, r3, r2
 8017722:	685c      	ldr	r4, [r3, #4]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	9304      	str	r3, [sp, #16]
 8017728:	9405      	str	r4, [sp, #20]
 801772a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801772c:	2b00      	cmp	r3, #0
 801772e:	db00      	blt.n	8017732 <_dtoa_r+0x466>
 8017730:	e0da      	b.n	80178e8 <_dtoa_r+0x61c>
 8017732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017734:	2b00      	cmp	r3, #0
 8017736:	dd00      	ble.n	801773a <_dtoa_r+0x46e>
 8017738:	e0d6      	b.n	80178e8 <_dtoa_r+0x61c>
 801773a:	d000      	beq.n	801773e <_dtoa_r+0x472>
 801773c:	e27f      	b.n	8017c3e <_dtoa_r+0x972>
 801773e:	9804      	ldr	r0, [sp, #16]
 8017740:	9905      	ldr	r1, [sp, #20]
 8017742:	2200      	movs	r2, #0
 8017744:	4b8f      	ldr	r3, [pc, #572]	; (8017984 <_dtoa_r+0x6b8>)
 8017746:	f7ea fb75 	bl	8001e34 <__aeabi_dmul>
 801774a:	9a06      	ldr	r2, [sp, #24]
 801774c:	9b07      	ldr	r3, [sp, #28]
 801774e:	f7e8 fea9 	bl	80004a4 <__aeabi_dcmpge>
 8017752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017754:	9304      	str	r3, [sp, #16]
 8017756:	001e      	movs	r6, r3
 8017758:	2800      	cmp	r0, #0
 801775a:	d000      	beq.n	801775e <_dtoa_r+0x492>
 801775c:	e251      	b.n	8017c02 <_dtoa_r+0x936>
 801775e:	9b08      	ldr	r3, [sp, #32]
 8017760:	9a08      	ldr	r2, [sp, #32]
 8017762:	1c5d      	adds	r5, r3, #1
 8017764:	2331      	movs	r3, #49	; 0x31
 8017766:	3701      	adds	r7, #1
 8017768:	7013      	strb	r3, [r2, #0]
 801776a:	e24d      	b.n	8017c08 <_dtoa_r+0x93c>
 801776c:	4234      	tst	r4, r6
 801776e:	d00a      	beq.n	8017786 <_dtoa_r+0x4ba>
 8017770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017772:	4a86      	ldr	r2, [pc, #536]	; (801798c <_dtoa_r+0x6c0>)
 8017774:	3301      	adds	r3, #1
 8017776:	930e      	str	r3, [sp, #56]	; 0x38
 8017778:	00eb      	lsls	r3, r5, #3
 801777a:	189b      	adds	r3, r3, r2
 801777c:	681a      	ldr	r2, [r3, #0]
 801777e:	685b      	ldr	r3, [r3, #4]
 8017780:	f7ea fb58 	bl	8001e34 <__aeabi_dmul>
 8017784:	0033      	movs	r3, r6
 8017786:	1064      	asrs	r4, r4, #1
 8017788:	3501      	adds	r5, #1
 801778a:	e75f      	b.n	801764c <_dtoa_r+0x380>
 801778c:	003e      	movs	r6, r7
 801778e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017790:	e784      	b.n	801769c <_dtoa_r+0x3d0>
 8017792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017794:	1e5a      	subs	r2, r3, #1
 8017796:	4b76      	ldr	r3, [pc, #472]	; (8017970 <_dtoa_r+0x6a4>)
 8017798:	00d2      	lsls	r2, r2, #3
 801779a:	189b      	adds	r3, r3, r2
 801779c:	6818      	ldr	r0, [r3, #0]
 801779e:	6859      	ldr	r1, [r3, #4]
 80177a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d04b      	beq.n	801783e <_dtoa_r+0x572>
 80177a6:	0002      	movs	r2, r0
 80177a8:	000b      	movs	r3, r1
 80177aa:	2000      	movs	r0, #0
 80177ac:	4978      	ldr	r1, [pc, #480]	; (8017990 <_dtoa_r+0x6c4>)
 80177ae:	f7e9 ff37 	bl	8001620 <__aeabi_ddiv>
 80177b2:	002b      	movs	r3, r5
 80177b4:	0022      	movs	r2, r4
 80177b6:	f7ea fdaf 	bl	8002318 <__aeabi_dsub>
 80177ba:	9b08      	ldr	r3, [sp, #32]
 80177bc:	900e      	str	r0, [sp, #56]	; 0x38
 80177be:	910f      	str	r1, [sp, #60]	; 0x3c
 80177c0:	9315      	str	r3, [sp, #84]	; 0x54
 80177c2:	9806      	ldr	r0, [sp, #24]
 80177c4:	9907      	ldr	r1, [sp, #28]
 80177c6:	f7eb f90b 	bl	80029e0 <__aeabi_d2iz>
 80177ca:	0004      	movs	r4, r0
 80177cc:	f7eb f93e 	bl	8002a4c <__aeabi_i2d>
 80177d0:	0002      	movs	r2, r0
 80177d2:	000b      	movs	r3, r1
 80177d4:	9806      	ldr	r0, [sp, #24]
 80177d6:	9907      	ldr	r1, [sp, #28]
 80177d8:	f7ea fd9e 	bl	8002318 <__aeabi_dsub>
 80177dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80177de:	3430      	adds	r4, #48	; 0x30
 80177e0:	1c5d      	adds	r5, r3, #1
 80177e2:	701c      	strb	r4, [r3, #0]
 80177e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80177e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177e8:	9006      	str	r0, [sp, #24]
 80177ea:	9107      	str	r1, [sp, #28]
 80177ec:	f7e8 fe3c 	bl	8000468 <__aeabi_dcmplt>
 80177f0:	2800      	cmp	r0, #0
 80177f2:	d16c      	bne.n	80178ce <_dtoa_r+0x602>
 80177f4:	9a06      	ldr	r2, [sp, #24]
 80177f6:	9b07      	ldr	r3, [sp, #28]
 80177f8:	2000      	movs	r0, #0
 80177fa:	495e      	ldr	r1, [pc, #376]	; (8017974 <_dtoa_r+0x6a8>)
 80177fc:	f7ea fd8c 	bl	8002318 <__aeabi_dsub>
 8017800:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017802:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017804:	f7e8 fe30 	bl	8000468 <__aeabi_dcmplt>
 8017808:	2800      	cmp	r0, #0
 801780a:	d000      	beq.n	801780e <_dtoa_r+0x542>
 801780c:	e0c3      	b.n	8017996 <_dtoa_r+0x6ca>
 801780e:	9b08      	ldr	r3, [sp, #32]
 8017810:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017812:	1aeb      	subs	r3, r5, r3
 8017814:	429a      	cmp	r2, r3
 8017816:	dc00      	bgt.n	801781a <_dtoa_r+0x54e>
 8017818:	e775      	b.n	8017706 <_dtoa_r+0x43a>
 801781a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801781c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801781e:	2200      	movs	r2, #0
 8017820:	4b55      	ldr	r3, [pc, #340]	; (8017978 <_dtoa_r+0x6ac>)
 8017822:	f7ea fb07 	bl	8001e34 <__aeabi_dmul>
 8017826:	2200      	movs	r2, #0
 8017828:	900e      	str	r0, [sp, #56]	; 0x38
 801782a:	910f      	str	r1, [sp, #60]	; 0x3c
 801782c:	9806      	ldr	r0, [sp, #24]
 801782e:	9907      	ldr	r1, [sp, #28]
 8017830:	4b51      	ldr	r3, [pc, #324]	; (8017978 <_dtoa_r+0x6ac>)
 8017832:	f7ea faff 	bl	8001e34 <__aeabi_dmul>
 8017836:	9515      	str	r5, [sp, #84]	; 0x54
 8017838:	9006      	str	r0, [sp, #24]
 801783a:	9107      	str	r1, [sp, #28]
 801783c:	e7c1      	b.n	80177c2 <_dtoa_r+0x4f6>
 801783e:	0022      	movs	r2, r4
 8017840:	002b      	movs	r3, r5
 8017842:	f7ea faf7 	bl	8001e34 <__aeabi_dmul>
 8017846:	9c08      	ldr	r4, [sp, #32]
 8017848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801784a:	0023      	movs	r3, r4
 801784c:	4694      	mov	ip, r2
 801784e:	900e      	str	r0, [sp, #56]	; 0x38
 8017850:	910f      	str	r1, [sp, #60]	; 0x3c
 8017852:	4463      	add	r3, ip
 8017854:	9315      	str	r3, [sp, #84]	; 0x54
 8017856:	9806      	ldr	r0, [sp, #24]
 8017858:	9907      	ldr	r1, [sp, #28]
 801785a:	f7eb f8c1 	bl	80029e0 <__aeabi_d2iz>
 801785e:	0005      	movs	r5, r0
 8017860:	f7eb f8f4 	bl	8002a4c <__aeabi_i2d>
 8017864:	000b      	movs	r3, r1
 8017866:	0002      	movs	r2, r0
 8017868:	9806      	ldr	r0, [sp, #24]
 801786a:	9907      	ldr	r1, [sp, #28]
 801786c:	f7ea fd54 	bl	8002318 <__aeabi_dsub>
 8017870:	3530      	adds	r5, #48	; 0x30
 8017872:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017874:	7025      	strb	r5, [r4, #0]
 8017876:	3401      	adds	r4, #1
 8017878:	9006      	str	r0, [sp, #24]
 801787a:	9107      	str	r1, [sp, #28]
 801787c:	42a3      	cmp	r3, r4
 801787e:	d12a      	bne.n	80178d6 <_dtoa_r+0x60a>
 8017880:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017882:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017884:	9a08      	ldr	r2, [sp, #32]
 8017886:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017888:	4694      	mov	ip, r2
 801788a:	4463      	add	r3, ip
 801788c:	2200      	movs	r2, #0
 801788e:	001d      	movs	r5, r3
 8017890:	4b3f      	ldr	r3, [pc, #252]	; (8017990 <_dtoa_r+0x6c4>)
 8017892:	f7e9 fba9 	bl	8000fe8 <__aeabi_dadd>
 8017896:	0002      	movs	r2, r0
 8017898:	000b      	movs	r3, r1
 801789a:	9806      	ldr	r0, [sp, #24]
 801789c:	9907      	ldr	r1, [sp, #28]
 801789e:	f7e8 fdf7 	bl	8000490 <__aeabi_dcmpgt>
 80178a2:	2800      	cmp	r0, #0
 80178a4:	d000      	beq.n	80178a8 <_dtoa_r+0x5dc>
 80178a6:	e076      	b.n	8017996 <_dtoa_r+0x6ca>
 80178a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80178aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178ac:	2000      	movs	r0, #0
 80178ae:	4938      	ldr	r1, [pc, #224]	; (8017990 <_dtoa_r+0x6c4>)
 80178b0:	f7ea fd32 	bl	8002318 <__aeabi_dsub>
 80178b4:	0002      	movs	r2, r0
 80178b6:	000b      	movs	r3, r1
 80178b8:	9806      	ldr	r0, [sp, #24]
 80178ba:	9907      	ldr	r1, [sp, #28]
 80178bc:	f7e8 fdd4 	bl	8000468 <__aeabi_dcmplt>
 80178c0:	2800      	cmp	r0, #0
 80178c2:	d100      	bne.n	80178c6 <_dtoa_r+0x5fa>
 80178c4:	e71f      	b.n	8017706 <_dtoa_r+0x43a>
 80178c6:	1e6b      	subs	r3, r5, #1
 80178c8:	781a      	ldrb	r2, [r3, #0]
 80178ca:	2a30      	cmp	r2, #48	; 0x30
 80178cc:	d001      	beq.n	80178d2 <_dtoa_r+0x606>
 80178ce:	0037      	movs	r7, r6
 80178d0:	e03f      	b.n	8017952 <_dtoa_r+0x686>
 80178d2:	001d      	movs	r5, r3
 80178d4:	e7f7      	b.n	80178c6 <_dtoa_r+0x5fa>
 80178d6:	9806      	ldr	r0, [sp, #24]
 80178d8:	9907      	ldr	r1, [sp, #28]
 80178da:	2200      	movs	r2, #0
 80178dc:	4b26      	ldr	r3, [pc, #152]	; (8017978 <_dtoa_r+0x6ac>)
 80178de:	f7ea faa9 	bl	8001e34 <__aeabi_dmul>
 80178e2:	9006      	str	r0, [sp, #24]
 80178e4:	9107      	str	r1, [sp, #28]
 80178e6:	e7b6      	b.n	8017856 <_dtoa_r+0x58a>
 80178e8:	9e08      	ldr	r6, [sp, #32]
 80178ea:	9a04      	ldr	r2, [sp, #16]
 80178ec:	9b05      	ldr	r3, [sp, #20]
 80178ee:	9806      	ldr	r0, [sp, #24]
 80178f0:	9907      	ldr	r1, [sp, #28]
 80178f2:	f7e9 fe95 	bl	8001620 <__aeabi_ddiv>
 80178f6:	f7eb f873 	bl	80029e0 <__aeabi_d2iz>
 80178fa:	0004      	movs	r4, r0
 80178fc:	f7eb f8a6 	bl	8002a4c <__aeabi_i2d>
 8017900:	9a04      	ldr	r2, [sp, #16]
 8017902:	9b05      	ldr	r3, [sp, #20]
 8017904:	f7ea fa96 	bl	8001e34 <__aeabi_dmul>
 8017908:	0002      	movs	r2, r0
 801790a:	000b      	movs	r3, r1
 801790c:	9806      	ldr	r0, [sp, #24]
 801790e:	9907      	ldr	r1, [sp, #28]
 8017910:	f7ea fd02 	bl	8002318 <__aeabi_dsub>
 8017914:	0023      	movs	r3, r4
 8017916:	3330      	adds	r3, #48	; 0x30
 8017918:	7033      	strb	r3, [r6, #0]
 801791a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801791c:	9b08      	ldr	r3, [sp, #32]
 801791e:	1c75      	adds	r5, r6, #1
 8017920:	1aeb      	subs	r3, r5, r3
 8017922:	429a      	cmp	r2, r3
 8017924:	d148      	bne.n	80179b8 <_dtoa_r+0x6ec>
 8017926:	0002      	movs	r2, r0
 8017928:	000b      	movs	r3, r1
 801792a:	f7e9 fb5d 	bl	8000fe8 <__aeabi_dadd>
 801792e:	9a04      	ldr	r2, [sp, #16]
 8017930:	9b05      	ldr	r3, [sp, #20]
 8017932:	9006      	str	r0, [sp, #24]
 8017934:	9107      	str	r1, [sp, #28]
 8017936:	f7e8 fdab 	bl	8000490 <__aeabi_dcmpgt>
 801793a:	2800      	cmp	r0, #0
 801793c:	d12a      	bne.n	8017994 <_dtoa_r+0x6c8>
 801793e:	9a04      	ldr	r2, [sp, #16]
 8017940:	9b05      	ldr	r3, [sp, #20]
 8017942:	9806      	ldr	r0, [sp, #24]
 8017944:	9907      	ldr	r1, [sp, #28]
 8017946:	f7e8 fd89 	bl	800045c <__aeabi_dcmpeq>
 801794a:	2800      	cmp	r0, #0
 801794c:	d001      	beq.n	8017952 <_dtoa_r+0x686>
 801794e:	07e3      	lsls	r3, r4, #31
 8017950:	d420      	bmi.n	8017994 <_dtoa_r+0x6c8>
 8017952:	9903      	ldr	r1, [sp, #12]
 8017954:	9802      	ldr	r0, [sp, #8]
 8017956:	f000 ff35 	bl	80187c4 <_Bfree>
 801795a:	2300      	movs	r3, #0
 801795c:	702b      	strb	r3, [r5, #0]
 801795e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017960:	3701      	adds	r7, #1
 8017962:	601f      	str	r7, [r3, #0]
 8017964:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8017966:	2b00      	cmp	r3, #0
 8017968:	d100      	bne.n	801796c <_dtoa_r+0x6a0>
 801796a:	e4e4      	b.n	8017336 <_dtoa_r+0x6a>
 801796c:	601d      	str	r5, [r3, #0]
 801796e:	e4e2      	b.n	8017336 <_dtoa_r+0x6a>
 8017970:	0801c4d0 	.word	0x0801c4d0
 8017974:	3ff00000 	.word	0x3ff00000
 8017978:	40240000 	.word	0x40240000
 801797c:	401c0000 	.word	0x401c0000
 8017980:	fcc00000 	.word	0xfcc00000
 8017984:	40140000 	.word	0x40140000
 8017988:	7cc00000 	.word	0x7cc00000
 801798c:	0801c4a8 	.word	0x0801c4a8
 8017990:	3fe00000 	.word	0x3fe00000
 8017994:	003e      	movs	r6, r7
 8017996:	1e6b      	subs	r3, r5, #1
 8017998:	781a      	ldrb	r2, [r3, #0]
 801799a:	2a39      	cmp	r2, #57	; 0x39
 801799c:	d106      	bne.n	80179ac <_dtoa_r+0x6e0>
 801799e:	9a08      	ldr	r2, [sp, #32]
 80179a0:	429a      	cmp	r2, r3
 80179a2:	d107      	bne.n	80179b4 <_dtoa_r+0x6e8>
 80179a4:	2330      	movs	r3, #48	; 0x30
 80179a6:	7013      	strb	r3, [r2, #0]
 80179a8:	0013      	movs	r3, r2
 80179aa:	3601      	adds	r6, #1
 80179ac:	781a      	ldrb	r2, [r3, #0]
 80179ae:	3201      	adds	r2, #1
 80179b0:	701a      	strb	r2, [r3, #0]
 80179b2:	e78c      	b.n	80178ce <_dtoa_r+0x602>
 80179b4:	001d      	movs	r5, r3
 80179b6:	e7ee      	b.n	8017996 <_dtoa_r+0x6ca>
 80179b8:	2200      	movs	r2, #0
 80179ba:	4ba4      	ldr	r3, [pc, #656]	; (8017c4c <_dtoa_r+0x980>)
 80179bc:	f7ea fa3a 	bl	8001e34 <__aeabi_dmul>
 80179c0:	2200      	movs	r2, #0
 80179c2:	2300      	movs	r3, #0
 80179c4:	9006      	str	r0, [sp, #24]
 80179c6:	9107      	str	r1, [sp, #28]
 80179c8:	002e      	movs	r6, r5
 80179ca:	f7e8 fd47 	bl	800045c <__aeabi_dcmpeq>
 80179ce:	2800      	cmp	r0, #0
 80179d0:	d08b      	beq.n	80178ea <_dtoa_r+0x61e>
 80179d2:	e7be      	b.n	8017952 <_dtoa_r+0x686>
 80179d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179d6:	2a00      	cmp	r2, #0
 80179d8:	d100      	bne.n	80179dc <_dtoa_r+0x710>
 80179da:	e0da      	b.n	8017b92 <_dtoa_r+0x8c6>
 80179dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80179de:	2a01      	cmp	r2, #1
 80179e0:	dd00      	ble.n	80179e4 <_dtoa_r+0x718>
 80179e2:	e0bd      	b.n	8017b60 <_dtoa_r+0x894>
 80179e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80179e6:	2a00      	cmp	r2, #0
 80179e8:	d100      	bne.n	80179ec <_dtoa_r+0x720>
 80179ea:	e0b5      	b.n	8017b58 <_dtoa_r+0x88c>
 80179ec:	4a98      	ldr	r2, [pc, #608]	; (8017c50 <_dtoa_r+0x984>)
 80179ee:	189b      	adds	r3, r3, r2
 80179f0:	9d04      	ldr	r5, [sp, #16]
 80179f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80179f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80179f6:	2101      	movs	r1, #1
 80179f8:	18d2      	adds	r2, r2, r3
 80179fa:	920a      	str	r2, [sp, #40]	; 0x28
 80179fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80179fe:	9802      	ldr	r0, [sp, #8]
 8017a00:	18d3      	adds	r3, r2, r3
 8017a02:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a04:	f000 ffad 	bl	8018962 <__i2b>
 8017a08:	0006      	movs	r6, r0
 8017a0a:	2c00      	cmp	r4, #0
 8017a0c:	dd0e      	ble.n	8017a2c <_dtoa_r+0x760>
 8017a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	dd0b      	ble.n	8017a2c <_dtoa_r+0x760>
 8017a14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a16:	0023      	movs	r3, r4
 8017a18:	4294      	cmp	r4, r2
 8017a1a:	dd00      	ble.n	8017a1e <_dtoa_r+0x752>
 8017a1c:	0013      	movs	r3, r2
 8017a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a20:	1ae4      	subs	r4, r4, r3
 8017a22:	1ad2      	subs	r2, r2, r3
 8017a24:	920a      	str	r2, [sp, #40]	; 0x28
 8017a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a2c:	9b04      	ldr	r3, [sp, #16]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d01f      	beq.n	8017a72 <_dtoa_r+0x7a6>
 8017a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d100      	bne.n	8017a3a <_dtoa_r+0x76e>
 8017a38:	e0af      	b.n	8017b9a <_dtoa_r+0x8ce>
 8017a3a:	2d00      	cmp	r5, #0
 8017a3c:	d011      	beq.n	8017a62 <_dtoa_r+0x796>
 8017a3e:	0031      	movs	r1, r6
 8017a40:	002a      	movs	r2, r5
 8017a42:	9802      	ldr	r0, [sp, #8]
 8017a44:	f001 f826 	bl	8018a94 <__pow5mult>
 8017a48:	9a03      	ldr	r2, [sp, #12]
 8017a4a:	0001      	movs	r1, r0
 8017a4c:	0006      	movs	r6, r0
 8017a4e:	9802      	ldr	r0, [sp, #8]
 8017a50:	f000 ff90 	bl	8018974 <__multiply>
 8017a54:	9903      	ldr	r1, [sp, #12]
 8017a56:	9010      	str	r0, [sp, #64]	; 0x40
 8017a58:	9802      	ldr	r0, [sp, #8]
 8017a5a:	f000 feb3 	bl	80187c4 <_Bfree>
 8017a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a60:	9303      	str	r3, [sp, #12]
 8017a62:	9b04      	ldr	r3, [sp, #16]
 8017a64:	1b5a      	subs	r2, r3, r5
 8017a66:	d004      	beq.n	8017a72 <_dtoa_r+0x7a6>
 8017a68:	9903      	ldr	r1, [sp, #12]
 8017a6a:	9802      	ldr	r0, [sp, #8]
 8017a6c:	f001 f812 	bl	8018a94 <__pow5mult>
 8017a70:	9003      	str	r0, [sp, #12]
 8017a72:	2101      	movs	r1, #1
 8017a74:	9802      	ldr	r0, [sp, #8]
 8017a76:	f000 ff74 	bl	8018962 <__i2b>
 8017a7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a7c:	9004      	str	r0, [sp, #16]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d100      	bne.n	8017a84 <_dtoa_r+0x7b8>
 8017a82:	e1e3      	b.n	8017e4c <_dtoa_r+0xb80>
 8017a84:	001a      	movs	r2, r3
 8017a86:	0001      	movs	r1, r0
 8017a88:	9802      	ldr	r0, [sp, #8]
 8017a8a:	f001 f803 	bl	8018a94 <__pow5mult>
 8017a8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017a90:	9004      	str	r0, [sp, #16]
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	dd00      	ble.n	8017a98 <_dtoa_r+0x7cc>
 8017a96:	e082      	b.n	8017b9e <_dtoa_r+0x8d2>
 8017a98:	2500      	movs	r5, #0
 8017a9a:	9b06      	ldr	r3, [sp, #24]
 8017a9c:	42ab      	cmp	r3, r5
 8017a9e:	d10e      	bne.n	8017abe <_dtoa_r+0x7f2>
 8017aa0:	9b07      	ldr	r3, [sp, #28]
 8017aa2:	031b      	lsls	r3, r3, #12
 8017aa4:	42ab      	cmp	r3, r5
 8017aa6:	d10a      	bne.n	8017abe <_dtoa_r+0x7f2>
 8017aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017aaa:	9a07      	ldr	r2, [sp, #28]
 8017aac:	4213      	tst	r3, r2
 8017aae:	d006      	beq.n	8017abe <_dtoa_r+0x7f2>
 8017ab0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ab2:	3501      	adds	r5, #1
 8017ab4:	3301      	adds	r3, #1
 8017ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8017ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017aba:	3301      	adds	r3, #1
 8017abc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017abe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ac0:	2001      	movs	r0, #1
 8017ac2:	2b00      	cmp	r3, #0
 8017ac4:	d16c      	bne.n	8017ba0 <_dtoa_r+0x8d4>
 8017ac6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ac8:	1818      	adds	r0, r3, r0
 8017aca:	231f      	movs	r3, #31
 8017acc:	4018      	ands	r0, r3
 8017ace:	d07e      	beq.n	8017bce <_dtoa_r+0x902>
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	1a1b      	subs	r3, r3, r0
 8017ad4:	2b04      	cmp	r3, #4
 8017ad6:	dd70      	ble.n	8017bba <_dtoa_r+0x8ee>
 8017ad8:	231c      	movs	r3, #28
 8017ada:	1a18      	subs	r0, r3, r0
 8017adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ade:	1824      	adds	r4, r4, r0
 8017ae0:	181b      	adds	r3, r3, r0
 8017ae2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ae6:	181b      	adds	r3, r3, r0
 8017ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8017aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	dd05      	ble.n	8017afc <_dtoa_r+0x830>
 8017af0:	001a      	movs	r2, r3
 8017af2:	9903      	ldr	r1, [sp, #12]
 8017af4:	9802      	ldr	r0, [sp, #8]
 8017af6:	f001 f80f 	bl	8018b18 <__lshift>
 8017afa:	9003      	str	r0, [sp, #12]
 8017afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	dd05      	ble.n	8017b0e <_dtoa_r+0x842>
 8017b02:	001a      	movs	r2, r3
 8017b04:	9904      	ldr	r1, [sp, #16]
 8017b06:	9802      	ldr	r0, [sp, #8]
 8017b08:	f001 f806 	bl	8018b18 <__lshift>
 8017b0c:	9004      	str	r0, [sp, #16]
 8017b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d05e      	beq.n	8017bd2 <_dtoa_r+0x906>
 8017b14:	9904      	ldr	r1, [sp, #16]
 8017b16:	9803      	ldr	r0, [sp, #12]
 8017b18:	f001 f850 	bl	8018bbc <__mcmp>
 8017b1c:	2800      	cmp	r0, #0
 8017b1e:	da58      	bge.n	8017bd2 <_dtoa_r+0x906>
 8017b20:	2300      	movs	r3, #0
 8017b22:	220a      	movs	r2, #10
 8017b24:	9903      	ldr	r1, [sp, #12]
 8017b26:	9802      	ldr	r0, [sp, #8]
 8017b28:	f000 fe56 	bl	80187d8 <__multadd>
 8017b2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b2e:	3f01      	subs	r7, #1
 8017b30:	9003      	str	r0, [sp, #12]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d100      	bne.n	8017b38 <_dtoa_r+0x86c>
 8017b36:	e190      	b.n	8017e5a <_dtoa_r+0xb8e>
 8017b38:	2300      	movs	r3, #0
 8017b3a:	0031      	movs	r1, r6
 8017b3c:	220a      	movs	r2, #10
 8017b3e:	9802      	ldr	r0, [sp, #8]
 8017b40:	f000 fe4a 	bl	80187d8 <__multadd>
 8017b44:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017b46:	0006      	movs	r6, r0
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	dd00      	ble.n	8017b4e <_dtoa_r+0x882>
 8017b4c:	e088      	b.n	8017c60 <_dtoa_r+0x994>
 8017b4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017b50:	2b02      	cmp	r3, #2
 8017b52:	dc00      	bgt.n	8017b56 <_dtoa_r+0x88a>
 8017b54:	e084      	b.n	8017c60 <_dtoa_r+0x994>
 8017b56:	e044      	b.n	8017be2 <_dtoa_r+0x916>
 8017b58:	2336      	movs	r3, #54	; 0x36
 8017b5a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017b5c:	1a9b      	subs	r3, r3, r2
 8017b5e:	e747      	b.n	80179f0 <_dtoa_r+0x724>
 8017b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b62:	1e5d      	subs	r5, r3, #1
 8017b64:	9b04      	ldr	r3, [sp, #16]
 8017b66:	42ab      	cmp	r3, r5
 8017b68:	db08      	blt.n	8017b7c <_dtoa_r+0x8b0>
 8017b6a:	1b5d      	subs	r5, r3, r5
 8017b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	da0c      	bge.n	8017b8c <_dtoa_r+0x8c0>
 8017b72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b76:	1a9c      	subs	r4, r3, r2
 8017b78:	2300      	movs	r3, #0
 8017b7a:	e73b      	b.n	80179f4 <_dtoa_r+0x728>
 8017b7c:	9b04      	ldr	r3, [sp, #16]
 8017b7e:	9504      	str	r5, [sp, #16]
 8017b80:	1aea      	subs	r2, r5, r3
 8017b82:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b84:	2500      	movs	r5, #0
 8017b86:	189b      	adds	r3, r3, r2
 8017b88:	9311      	str	r3, [sp, #68]	; 0x44
 8017b8a:	e7ef      	b.n	8017b6c <_dtoa_r+0x8a0>
 8017b8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b90:	e730      	b.n	80179f4 <_dtoa_r+0x728>
 8017b92:	9d04      	ldr	r5, [sp, #16]
 8017b94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017b96:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017b98:	e737      	b.n	8017a0a <_dtoa_r+0x73e>
 8017b9a:	9a04      	ldr	r2, [sp, #16]
 8017b9c:	e764      	b.n	8017a68 <_dtoa_r+0x79c>
 8017b9e:	2500      	movs	r5, #0
 8017ba0:	9b04      	ldr	r3, [sp, #16]
 8017ba2:	9a04      	ldr	r2, [sp, #16]
 8017ba4:	691b      	ldr	r3, [r3, #16]
 8017ba6:	9310      	str	r3, [sp, #64]	; 0x40
 8017ba8:	3303      	adds	r3, #3
 8017baa:	009b      	lsls	r3, r3, #2
 8017bac:	18d3      	adds	r3, r2, r3
 8017bae:	6858      	ldr	r0, [r3, #4]
 8017bb0:	f000 fe8e 	bl	80188d0 <__hi0bits>
 8017bb4:	2320      	movs	r3, #32
 8017bb6:	1a18      	subs	r0, r3, r0
 8017bb8:	e785      	b.n	8017ac6 <_dtoa_r+0x7fa>
 8017bba:	2b04      	cmp	r3, #4
 8017bbc:	d095      	beq.n	8017aea <_dtoa_r+0x81e>
 8017bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bc0:	331c      	adds	r3, #28
 8017bc2:	18d2      	adds	r2, r2, r3
 8017bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8017bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017bc8:	18e4      	adds	r4, r4, r3
 8017bca:	18d3      	adds	r3, r2, r3
 8017bcc:	e78c      	b.n	8017ae8 <_dtoa_r+0x81c>
 8017bce:	0003      	movs	r3, r0
 8017bd0:	e7f5      	b.n	8017bbe <_dtoa_r+0x8f2>
 8017bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	dc3d      	bgt.n	8017c54 <_dtoa_r+0x988>
 8017bd8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017bda:	2b02      	cmp	r3, #2
 8017bdc:	dd3a      	ble.n	8017c54 <_dtoa_r+0x988>
 8017bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017be0:	930c      	str	r3, [sp, #48]	; 0x30
 8017be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d10c      	bne.n	8017c02 <_dtoa_r+0x936>
 8017be8:	9904      	ldr	r1, [sp, #16]
 8017bea:	2205      	movs	r2, #5
 8017bec:	9802      	ldr	r0, [sp, #8]
 8017bee:	f000 fdf3 	bl	80187d8 <__multadd>
 8017bf2:	9004      	str	r0, [sp, #16]
 8017bf4:	0001      	movs	r1, r0
 8017bf6:	9803      	ldr	r0, [sp, #12]
 8017bf8:	f000 ffe0 	bl	8018bbc <__mcmp>
 8017bfc:	2800      	cmp	r0, #0
 8017bfe:	dd00      	ble.n	8017c02 <_dtoa_r+0x936>
 8017c00:	e5ad      	b.n	801775e <_dtoa_r+0x492>
 8017c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c04:	9d08      	ldr	r5, [sp, #32]
 8017c06:	43df      	mvns	r7, r3
 8017c08:	2300      	movs	r3, #0
 8017c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8017c0c:	9904      	ldr	r1, [sp, #16]
 8017c0e:	9802      	ldr	r0, [sp, #8]
 8017c10:	f000 fdd8 	bl	80187c4 <_Bfree>
 8017c14:	2e00      	cmp	r6, #0
 8017c16:	d100      	bne.n	8017c1a <_dtoa_r+0x94e>
 8017c18:	e69b      	b.n	8017952 <_dtoa_r+0x686>
 8017c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d005      	beq.n	8017c2c <_dtoa_r+0x960>
 8017c20:	42b3      	cmp	r3, r6
 8017c22:	d003      	beq.n	8017c2c <_dtoa_r+0x960>
 8017c24:	0019      	movs	r1, r3
 8017c26:	9802      	ldr	r0, [sp, #8]
 8017c28:	f000 fdcc 	bl	80187c4 <_Bfree>
 8017c2c:	0031      	movs	r1, r6
 8017c2e:	9802      	ldr	r0, [sp, #8]
 8017c30:	f000 fdc8 	bl	80187c4 <_Bfree>
 8017c34:	e68d      	b.n	8017952 <_dtoa_r+0x686>
 8017c36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c38:	9304      	str	r3, [sp, #16]
 8017c3a:	001e      	movs	r6, r3
 8017c3c:	e7e1      	b.n	8017c02 <_dtoa_r+0x936>
 8017c3e:	2300      	movs	r3, #0
 8017c40:	e7fa      	b.n	8017c38 <_dtoa_r+0x96c>
 8017c42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c44:	0037      	movs	r7, r6
 8017c46:	9304      	str	r3, [sp, #16]
 8017c48:	001e      	movs	r6, r3
 8017c4a:	e588      	b.n	801775e <_dtoa_r+0x492>
 8017c4c:	40240000 	.word	0x40240000
 8017c50:	00000433 	.word	0x00000433
 8017c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d100      	bne.n	8017c5c <_dtoa_r+0x990>
 8017c5a:	e0b2      	b.n	8017dc2 <_dtoa_r+0xaf6>
 8017c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c5e:	930c      	str	r3, [sp, #48]	; 0x30
 8017c60:	2c00      	cmp	r4, #0
 8017c62:	dd05      	ble.n	8017c70 <_dtoa_r+0x9a4>
 8017c64:	0031      	movs	r1, r6
 8017c66:	0022      	movs	r2, r4
 8017c68:	9802      	ldr	r0, [sp, #8]
 8017c6a:	f000 ff55 	bl	8018b18 <__lshift>
 8017c6e:	0006      	movs	r6, r0
 8017c70:	0030      	movs	r0, r6
 8017c72:	2d00      	cmp	r5, #0
 8017c74:	d011      	beq.n	8017c9a <_dtoa_r+0x9ce>
 8017c76:	6871      	ldr	r1, [r6, #4]
 8017c78:	9802      	ldr	r0, [sp, #8]
 8017c7a:	f000 fd7b 	bl	8018774 <_Balloc>
 8017c7e:	0031      	movs	r1, r6
 8017c80:	0004      	movs	r4, r0
 8017c82:	6933      	ldr	r3, [r6, #16]
 8017c84:	310c      	adds	r1, #12
 8017c86:	1c9a      	adds	r2, r3, #2
 8017c88:	0092      	lsls	r2, r2, #2
 8017c8a:	300c      	adds	r0, #12
 8017c8c:	f7fc fe59 	bl	8014942 <memcpy>
 8017c90:	2201      	movs	r2, #1
 8017c92:	0021      	movs	r1, r4
 8017c94:	9802      	ldr	r0, [sp, #8]
 8017c96:	f000 ff3f 	bl	8018b18 <__lshift>
 8017c9a:	9609      	str	r6, [sp, #36]	; 0x24
 8017c9c:	0006      	movs	r6, r0
 8017c9e:	9b08      	ldr	r3, [sp, #32]
 8017ca0:	930a      	str	r3, [sp, #40]	; 0x28
 8017ca2:	9904      	ldr	r1, [sp, #16]
 8017ca4:	9803      	ldr	r0, [sp, #12]
 8017ca6:	f7ff fa8b 	bl	80171c0 <quorem>
 8017caa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017cac:	900d      	str	r0, [sp, #52]	; 0x34
 8017cae:	0004      	movs	r4, r0
 8017cb0:	9803      	ldr	r0, [sp, #12]
 8017cb2:	f000 ff83 	bl	8018bbc <__mcmp>
 8017cb6:	0032      	movs	r2, r6
 8017cb8:	9010      	str	r0, [sp, #64]	; 0x40
 8017cba:	9904      	ldr	r1, [sp, #16]
 8017cbc:	9802      	ldr	r0, [sp, #8]
 8017cbe:	f000 ff97 	bl	8018bf0 <__mdiff>
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8017cc6:	68c3      	ldr	r3, [r0, #12]
 8017cc8:	3430      	adds	r4, #48	; 0x30
 8017cca:	0005      	movs	r5, r0
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d104      	bne.n	8017cda <_dtoa_r+0xa0e>
 8017cd0:	0001      	movs	r1, r0
 8017cd2:	9803      	ldr	r0, [sp, #12]
 8017cd4:	f000 ff72 	bl	8018bbc <__mcmp>
 8017cd8:	900b      	str	r0, [sp, #44]	; 0x2c
 8017cda:	0029      	movs	r1, r5
 8017cdc:	9802      	ldr	r0, [sp, #8]
 8017cde:	f000 fd71 	bl	80187c4 <_Bfree>
 8017ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017ce4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017ce6:	4313      	orrs	r3, r2
 8017ce8:	d10e      	bne.n	8017d08 <_dtoa_r+0xa3c>
 8017cea:	9a06      	ldr	r2, [sp, #24]
 8017cec:	3301      	adds	r3, #1
 8017cee:	4213      	tst	r3, r2
 8017cf0:	d10a      	bne.n	8017d08 <_dtoa_r+0xa3c>
 8017cf2:	2c39      	cmp	r4, #57	; 0x39
 8017cf4:	d026      	beq.n	8017d44 <_dtoa_r+0xa78>
 8017cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	dd01      	ble.n	8017d00 <_dtoa_r+0xa34>
 8017cfc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017cfe:	3431      	adds	r4, #49	; 0x31
 8017d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d02:	1c5d      	adds	r5, r3, #1
 8017d04:	701c      	strb	r4, [r3, #0]
 8017d06:	e781      	b.n	8017c0c <_dtoa_r+0x940>
 8017d08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d0a:	2b00      	cmp	r3, #0
 8017d0c:	db07      	blt.n	8017d1e <_dtoa_r+0xa52>
 8017d0e:	001d      	movs	r5, r3
 8017d10:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017d12:	431d      	orrs	r5, r3
 8017d14:	d122      	bne.n	8017d5c <_dtoa_r+0xa90>
 8017d16:	2301      	movs	r3, #1
 8017d18:	9a06      	ldr	r2, [sp, #24]
 8017d1a:	4213      	tst	r3, r2
 8017d1c:	d11e      	bne.n	8017d5c <_dtoa_r+0xa90>
 8017d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	dded      	ble.n	8017d00 <_dtoa_r+0xa34>
 8017d24:	9903      	ldr	r1, [sp, #12]
 8017d26:	2201      	movs	r2, #1
 8017d28:	9802      	ldr	r0, [sp, #8]
 8017d2a:	f000 fef5 	bl	8018b18 <__lshift>
 8017d2e:	9904      	ldr	r1, [sp, #16]
 8017d30:	9003      	str	r0, [sp, #12]
 8017d32:	f000 ff43 	bl	8018bbc <__mcmp>
 8017d36:	2800      	cmp	r0, #0
 8017d38:	dc02      	bgt.n	8017d40 <_dtoa_r+0xa74>
 8017d3a:	d1e1      	bne.n	8017d00 <_dtoa_r+0xa34>
 8017d3c:	07e3      	lsls	r3, r4, #31
 8017d3e:	d5df      	bpl.n	8017d00 <_dtoa_r+0xa34>
 8017d40:	2c39      	cmp	r4, #57	; 0x39
 8017d42:	d1db      	bne.n	8017cfc <_dtoa_r+0xa30>
 8017d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d48:	1c5d      	adds	r5, r3, #1
 8017d4a:	2339      	movs	r3, #57	; 0x39
 8017d4c:	7013      	strb	r3, [r2, #0]
 8017d4e:	1e6b      	subs	r3, r5, #1
 8017d50:	781a      	ldrb	r2, [r3, #0]
 8017d52:	2a39      	cmp	r2, #57	; 0x39
 8017d54:	d067      	beq.n	8017e26 <_dtoa_r+0xb5a>
 8017d56:	3201      	adds	r2, #1
 8017d58:	701a      	strb	r2, [r3, #0]
 8017d5a:	e757      	b.n	8017c0c <_dtoa_r+0x940>
 8017d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d5e:	1c5d      	adds	r5, r3, #1
 8017d60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	dd04      	ble.n	8017d70 <_dtoa_r+0xaa4>
 8017d66:	2c39      	cmp	r4, #57	; 0x39
 8017d68:	d0ec      	beq.n	8017d44 <_dtoa_r+0xa78>
 8017d6a:	3401      	adds	r4, #1
 8017d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d6e:	e7c9      	b.n	8017d04 <_dtoa_r+0xa38>
 8017d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d74:	701c      	strb	r4, [r3, #0]
 8017d76:	9b08      	ldr	r3, [sp, #32]
 8017d78:	1aeb      	subs	r3, r5, r3
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d03e      	beq.n	8017dfc <_dtoa_r+0xb30>
 8017d7e:	2300      	movs	r3, #0
 8017d80:	220a      	movs	r2, #10
 8017d82:	9903      	ldr	r1, [sp, #12]
 8017d84:	9802      	ldr	r0, [sp, #8]
 8017d86:	f000 fd27 	bl	80187d8 <__multadd>
 8017d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d8c:	9003      	str	r0, [sp, #12]
 8017d8e:	42b3      	cmp	r3, r6
 8017d90:	d109      	bne.n	8017da6 <_dtoa_r+0xada>
 8017d92:	2300      	movs	r3, #0
 8017d94:	220a      	movs	r2, #10
 8017d96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d98:	9802      	ldr	r0, [sp, #8]
 8017d9a:	f000 fd1d 	bl	80187d8 <__multadd>
 8017d9e:	9009      	str	r0, [sp, #36]	; 0x24
 8017da0:	0006      	movs	r6, r0
 8017da2:	950a      	str	r5, [sp, #40]	; 0x28
 8017da4:	e77d      	b.n	8017ca2 <_dtoa_r+0x9d6>
 8017da6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017da8:	2300      	movs	r3, #0
 8017daa:	220a      	movs	r2, #10
 8017dac:	9802      	ldr	r0, [sp, #8]
 8017dae:	f000 fd13 	bl	80187d8 <__multadd>
 8017db2:	2300      	movs	r3, #0
 8017db4:	9009      	str	r0, [sp, #36]	; 0x24
 8017db6:	220a      	movs	r2, #10
 8017db8:	0031      	movs	r1, r6
 8017dba:	9802      	ldr	r0, [sp, #8]
 8017dbc:	f000 fd0c 	bl	80187d8 <__multadd>
 8017dc0:	e7ee      	b.n	8017da0 <_dtoa_r+0xad4>
 8017dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8017dc6:	9b08      	ldr	r3, [sp, #32]
 8017dc8:	9306      	str	r3, [sp, #24]
 8017dca:	9904      	ldr	r1, [sp, #16]
 8017dcc:	9803      	ldr	r0, [sp, #12]
 8017dce:	f7ff f9f7 	bl	80171c0 <quorem>
 8017dd2:	9b06      	ldr	r3, [sp, #24]
 8017dd4:	3030      	adds	r0, #48	; 0x30
 8017dd6:	1c5d      	adds	r5, r3, #1
 8017dd8:	7018      	strb	r0, [r3, #0]
 8017dda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ddc:	9b08      	ldr	r3, [sp, #32]
 8017dde:	0004      	movs	r4, r0
 8017de0:	1aeb      	subs	r3, r5, r3
 8017de2:	429a      	cmp	r2, r3
 8017de4:	dd08      	ble.n	8017df8 <_dtoa_r+0xb2c>
 8017de6:	2300      	movs	r3, #0
 8017de8:	220a      	movs	r2, #10
 8017dea:	9903      	ldr	r1, [sp, #12]
 8017dec:	9802      	ldr	r0, [sp, #8]
 8017dee:	f000 fcf3 	bl	80187d8 <__multadd>
 8017df2:	9506      	str	r5, [sp, #24]
 8017df4:	9003      	str	r0, [sp, #12]
 8017df6:	e7e8      	b.n	8017dca <_dtoa_r+0xafe>
 8017df8:	2300      	movs	r3, #0
 8017dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8017dfc:	9903      	ldr	r1, [sp, #12]
 8017dfe:	2201      	movs	r2, #1
 8017e00:	9802      	ldr	r0, [sp, #8]
 8017e02:	f000 fe89 	bl	8018b18 <__lshift>
 8017e06:	9904      	ldr	r1, [sp, #16]
 8017e08:	9003      	str	r0, [sp, #12]
 8017e0a:	f000 fed7 	bl	8018bbc <__mcmp>
 8017e0e:	2800      	cmp	r0, #0
 8017e10:	dc9d      	bgt.n	8017d4e <_dtoa_r+0xa82>
 8017e12:	d101      	bne.n	8017e18 <_dtoa_r+0xb4c>
 8017e14:	07e3      	lsls	r3, r4, #31
 8017e16:	d49a      	bmi.n	8017d4e <_dtoa_r+0xa82>
 8017e18:	1e6b      	subs	r3, r5, #1
 8017e1a:	781a      	ldrb	r2, [r3, #0]
 8017e1c:	2a30      	cmp	r2, #48	; 0x30
 8017e1e:	d000      	beq.n	8017e22 <_dtoa_r+0xb56>
 8017e20:	e6f4      	b.n	8017c0c <_dtoa_r+0x940>
 8017e22:	001d      	movs	r5, r3
 8017e24:	e7f8      	b.n	8017e18 <_dtoa_r+0xb4c>
 8017e26:	9a08      	ldr	r2, [sp, #32]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d103      	bne.n	8017e34 <_dtoa_r+0xb68>
 8017e2c:	2331      	movs	r3, #49	; 0x31
 8017e2e:	3701      	adds	r7, #1
 8017e30:	7013      	strb	r3, [r2, #0]
 8017e32:	e6eb      	b.n	8017c0c <_dtoa_r+0x940>
 8017e34:	001d      	movs	r5, r3
 8017e36:	e78a      	b.n	8017d4e <_dtoa_r+0xa82>
 8017e38:	4b0b      	ldr	r3, [pc, #44]	; (8017e68 <_dtoa_r+0xb9c>)
 8017e3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017e3c:	9308      	str	r3, [sp, #32]
 8017e3e:	4b0b      	ldr	r3, [pc, #44]	; (8017e6c <_dtoa_r+0xba0>)
 8017e40:	2a00      	cmp	r2, #0
 8017e42:	d001      	beq.n	8017e48 <_dtoa_r+0xb7c>
 8017e44:	f7ff fa75 	bl	8017332 <_dtoa_r+0x66>
 8017e48:	f7ff fa75 	bl	8017336 <_dtoa_r+0x6a>
 8017e4c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017e4e:	2b01      	cmp	r3, #1
 8017e50:	dc00      	bgt.n	8017e54 <_dtoa_r+0xb88>
 8017e52:	e621      	b.n	8017a98 <_dtoa_r+0x7cc>
 8017e54:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017e56:	2001      	movs	r0, #1
 8017e58:	e635      	b.n	8017ac6 <_dtoa_r+0x7fa>
 8017e5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	dcb2      	bgt.n	8017dc6 <_dtoa_r+0xafa>
 8017e60:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017e62:	2b02      	cmp	r3, #2
 8017e64:	ddaf      	ble.n	8017dc6 <_dtoa_r+0xafa>
 8017e66:	e6bc      	b.n	8017be2 <_dtoa_r+0x916>
 8017e68:	0801c495 	.word	0x0801c495
 8017e6c:	0801c49d 	.word	0x0801c49d

08017e70 <__errno>:
 8017e70:	4b01      	ldr	r3, [pc, #4]	; (8017e78 <__errno+0x8>)
 8017e72:	6818      	ldr	r0, [r3, #0]
 8017e74:	4770      	bx	lr
 8017e76:	46c0      	nop			; (mov r8, r8)
 8017e78:	20000118 	.word	0x20000118

08017e7c <__libc_fini_array>:
 8017e7c:	b570      	push	{r4, r5, r6, lr}
 8017e7e:	4d07      	ldr	r5, [pc, #28]	; (8017e9c <__libc_fini_array+0x20>)
 8017e80:	4c07      	ldr	r4, [pc, #28]	; (8017ea0 <__libc_fini_array+0x24>)
 8017e82:	1b64      	subs	r4, r4, r5
 8017e84:	10a4      	asrs	r4, r4, #2
 8017e86:	2c00      	cmp	r4, #0
 8017e88:	d102      	bne.n	8017e90 <__libc_fini_array+0x14>
 8017e8a:	f001 f987 	bl	801919c <_fini>
 8017e8e:	bd70      	pop	{r4, r5, r6, pc}
 8017e90:	3c01      	subs	r4, #1
 8017e92:	00a3      	lsls	r3, r4, #2
 8017e94:	58eb      	ldr	r3, [r5, r3]
 8017e96:	4798      	blx	r3
 8017e98:	e7f5      	b.n	8017e86 <__libc_fini_array+0xa>
 8017e9a:	46c0      	nop			; (mov r8, r8)
 8017e9c:	0801c5b4 	.word	0x0801c5b4
 8017ea0:	0801c5b8 	.word	0x0801c5b8

08017ea4 <_malloc_trim_r>:
 8017ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ea6:	0005      	movs	r5, r0
 8017ea8:	2008      	movs	r0, #8
 8017eaa:	000c      	movs	r4, r1
 8017eac:	f7ff f95c 	bl	8017168 <sysconf>
 8017eb0:	0007      	movs	r7, r0
 8017eb2:	0028      	movs	r0, r5
 8017eb4:	f7fc fd56 	bl	8014964 <__malloc_lock>
 8017eb8:	2203      	movs	r2, #3
 8017eba:	4e21      	ldr	r6, [pc, #132]	; (8017f40 <_malloc_trim_r+0x9c>)
 8017ebc:	0039      	movs	r1, r7
 8017ebe:	68b3      	ldr	r3, [r6, #8]
 8017ec0:	685b      	ldr	r3, [r3, #4]
 8017ec2:	4393      	bics	r3, r2
 8017ec4:	1b18      	subs	r0, r3, r4
 8017ec6:	3811      	subs	r0, #17
 8017ec8:	19c0      	adds	r0, r0, r7
 8017eca:	9301      	str	r3, [sp, #4]
 8017ecc:	f7e8 f940 	bl	8000150 <__udivsi3>
 8017ed0:	1e44      	subs	r4, r0, #1
 8017ed2:	437c      	muls	r4, r7
 8017ed4:	42a7      	cmp	r7, r4
 8017ed6:	dd04      	ble.n	8017ee2 <_malloc_trim_r+0x3e>
 8017ed8:	0028      	movs	r0, r5
 8017eda:	f7fc fd4b 	bl	8014974 <__malloc_unlock>
 8017ede:	2000      	movs	r0, #0
 8017ee0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017ee2:	2100      	movs	r1, #0
 8017ee4:	0028      	movs	r0, r5
 8017ee6:	f7fc ff1d 	bl	8014d24 <_sbrk_r>
 8017eea:	68b3      	ldr	r3, [r6, #8]
 8017eec:	9a01      	ldr	r2, [sp, #4]
 8017eee:	189b      	adds	r3, r3, r2
 8017ef0:	4298      	cmp	r0, r3
 8017ef2:	d1f1      	bne.n	8017ed8 <_malloc_trim_r+0x34>
 8017ef4:	4261      	negs	r1, r4
 8017ef6:	0028      	movs	r0, r5
 8017ef8:	f7fc ff14 	bl	8014d24 <_sbrk_r>
 8017efc:	1c43      	adds	r3, r0, #1
 8017efe:	d110      	bne.n	8017f22 <_malloc_trim_r+0x7e>
 8017f00:	2100      	movs	r1, #0
 8017f02:	0028      	movs	r0, r5
 8017f04:	f7fc ff0e 	bl	8014d24 <_sbrk_r>
 8017f08:	68b2      	ldr	r2, [r6, #8]
 8017f0a:	1a81      	subs	r1, r0, r2
 8017f0c:	290f      	cmp	r1, #15
 8017f0e:	dde3      	ble.n	8017ed8 <_malloc_trim_r+0x34>
 8017f10:	4b0c      	ldr	r3, [pc, #48]	; (8017f44 <_malloc_trim_r+0xa0>)
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	1ac0      	subs	r0, r0, r3
 8017f16:	4b0c      	ldr	r3, [pc, #48]	; (8017f48 <_malloc_trim_r+0xa4>)
 8017f18:	6018      	str	r0, [r3, #0]
 8017f1a:	2301      	movs	r3, #1
 8017f1c:	430b      	orrs	r3, r1
 8017f1e:	6053      	str	r3, [r2, #4]
 8017f20:	e7da      	b.n	8017ed8 <_malloc_trim_r+0x34>
 8017f22:	68b2      	ldr	r2, [r6, #8]
 8017f24:	2601      	movs	r6, #1
 8017f26:	9b01      	ldr	r3, [sp, #4]
 8017f28:	0028      	movs	r0, r5
 8017f2a:	1b1b      	subs	r3, r3, r4
 8017f2c:	4333      	orrs	r3, r6
 8017f2e:	6053      	str	r3, [r2, #4]
 8017f30:	4b05      	ldr	r3, [pc, #20]	; (8017f48 <_malloc_trim_r+0xa4>)
 8017f32:	681a      	ldr	r2, [r3, #0]
 8017f34:	1b14      	subs	r4, r2, r4
 8017f36:	601c      	str	r4, [r3, #0]
 8017f38:	f7fc fd1c 	bl	8014974 <__malloc_unlock>
 8017f3c:	0030      	movs	r0, r6
 8017f3e:	e7cf      	b.n	8017ee0 <_malloc_trim_r+0x3c>
 8017f40:	200006b4 	.word	0x200006b4
 8017f44:	20000abc 	.word	0x20000abc
 8017f48:	20006d98 	.word	0x20006d98

08017f4c <_free_r>:
 8017f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f4e:	1e0d      	subs	r5, r1, #0
 8017f50:	9001      	str	r0, [sp, #4]
 8017f52:	d02d      	beq.n	8017fb0 <_free_r+0x64>
 8017f54:	f7fc fd06 	bl	8014964 <__malloc_lock>
 8017f58:	2301      	movs	r3, #1
 8017f5a:	0029      	movs	r1, r5
 8017f5c:	469c      	mov	ip, r3
 8017f5e:	3908      	subs	r1, #8
 8017f60:	684f      	ldr	r7, [r1, #4]
 8017f62:	4662      	mov	r2, ip
 8017f64:	003b      	movs	r3, r7
 8017f66:	4666      	mov	r6, ip
 8017f68:	4393      	bics	r3, r2
 8017f6a:	18c8      	adds	r0, r1, r3
 8017f6c:	6845      	ldr	r5, [r0, #4]
 8017f6e:	3202      	adds	r2, #2
 8017f70:	4395      	bics	r5, r2
 8017f72:	4a4a      	ldr	r2, [pc, #296]	; (801809c <_free_r+0x150>)
 8017f74:	4037      	ands	r7, r6
 8017f76:	6896      	ldr	r6, [r2, #8]
 8017f78:	4286      	cmp	r6, r0
 8017f7a:	d11a      	bne.n	8017fb2 <_free_r+0x66>
 8017f7c:	195b      	adds	r3, r3, r5
 8017f7e:	2f00      	cmp	r7, #0
 8017f80:	d106      	bne.n	8017f90 <_free_r+0x44>
 8017f82:	6808      	ldr	r0, [r1, #0]
 8017f84:	1a09      	subs	r1, r1, r0
 8017f86:	688d      	ldr	r5, [r1, #8]
 8017f88:	181b      	adds	r3, r3, r0
 8017f8a:	68c8      	ldr	r0, [r1, #12]
 8017f8c:	60e8      	str	r0, [r5, #12]
 8017f8e:	6085      	str	r5, [r0, #8]
 8017f90:	2001      	movs	r0, #1
 8017f92:	4318      	orrs	r0, r3
 8017f94:	6048      	str	r0, [r1, #4]
 8017f96:	6091      	str	r1, [r2, #8]
 8017f98:	4a41      	ldr	r2, [pc, #260]	; (80180a0 <_free_r+0x154>)
 8017f9a:	6812      	ldr	r2, [r2, #0]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d804      	bhi.n	8017faa <_free_r+0x5e>
 8017fa0:	4b40      	ldr	r3, [pc, #256]	; (80180a4 <_free_r+0x158>)
 8017fa2:	9801      	ldr	r0, [sp, #4]
 8017fa4:	6819      	ldr	r1, [r3, #0]
 8017fa6:	f7ff ff7d 	bl	8017ea4 <_malloc_trim_r>
 8017faa:	9801      	ldr	r0, [sp, #4]
 8017fac:	f7fc fce2 	bl	8014974 <__malloc_unlock>
 8017fb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017fb2:	2600      	movs	r6, #0
 8017fb4:	6045      	str	r5, [r0, #4]
 8017fb6:	42b7      	cmp	r7, r6
 8017fb8:	d109      	bne.n	8017fce <_free_r+0x82>
 8017fba:	680f      	ldr	r7, [r1, #0]
 8017fbc:	4c3a      	ldr	r4, [pc, #232]	; (80180a8 <_free_r+0x15c>)
 8017fbe:	1bc9      	subs	r1, r1, r7
 8017fc0:	19db      	adds	r3, r3, r7
 8017fc2:	688f      	ldr	r7, [r1, #8]
 8017fc4:	42a7      	cmp	r7, r4
 8017fc6:	d02b      	beq.n	8018020 <_free_r+0xd4>
 8017fc8:	68cc      	ldr	r4, [r1, #12]
 8017fca:	60fc      	str	r4, [r7, #12]
 8017fcc:	60a7      	str	r7, [r4, #8]
 8017fce:	1947      	adds	r7, r0, r5
 8017fd0:	687c      	ldr	r4, [r7, #4]
 8017fd2:	2701      	movs	r7, #1
 8017fd4:	423c      	tst	r4, r7
 8017fd6:	d10b      	bne.n	8017ff0 <_free_r+0xa4>
 8017fd8:	195b      	adds	r3, r3, r5
 8017fda:	6885      	ldr	r5, [r0, #8]
 8017fdc:	2e00      	cmp	r6, #0
 8017fde:	d121      	bne.n	8018024 <_free_r+0xd8>
 8017fe0:	4c31      	ldr	r4, [pc, #196]	; (80180a8 <_free_r+0x15c>)
 8017fe2:	42a5      	cmp	r5, r4
 8017fe4:	d11e      	bne.n	8018024 <_free_r+0xd8>
 8017fe6:	003e      	movs	r6, r7
 8017fe8:	6151      	str	r1, [r2, #20]
 8017fea:	6111      	str	r1, [r2, #16]
 8017fec:	60cd      	str	r5, [r1, #12]
 8017fee:	608d      	str	r5, [r1, #8]
 8017ff0:	2001      	movs	r0, #1
 8017ff2:	0005      	movs	r5, r0
 8017ff4:	431d      	orrs	r5, r3
 8017ff6:	604d      	str	r5, [r1, #4]
 8017ff8:	50cb      	str	r3, [r1, r3]
 8017ffa:	2e00      	cmp	r6, #0
 8017ffc:	d1d5      	bne.n	8017faa <_free_r+0x5e>
 8017ffe:	4d2b      	ldr	r5, [pc, #172]	; (80180ac <_free_r+0x160>)
 8018000:	42ab      	cmp	r3, r5
 8018002:	d813      	bhi.n	801802c <_free_r+0xe0>
 8018004:	08db      	lsrs	r3, r3, #3
 8018006:	109d      	asrs	r5, r3, #2
 8018008:	40a8      	lsls	r0, r5
 801800a:	6854      	ldr	r4, [r2, #4]
 801800c:	00db      	lsls	r3, r3, #3
 801800e:	4320      	orrs	r0, r4
 8018010:	6050      	str	r0, [r2, #4]
 8018012:	189a      	adds	r2, r3, r2
 8018014:	6893      	ldr	r3, [r2, #8]
 8018016:	60ca      	str	r2, [r1, #12]
 8018018:	608b      	str	r3, [r1, #8]
 801801a:	6091      	str	r1, [r2, #8]
 801801c:	60d9      	str	r1, [r3, #12]
 801801e:	e7c4      	b.n	8017faa <_free_r+0x5e>
 8018020:	4666      	mov	r6, ip
 8018022:	e7d4      	b.n	8017fce <_free_r+0x82>
 8018024:	68c0      	ldr	r0, [r0, #12]
 8018026:	60e8      	str	r0, [r5, #12]
 8018028:	6085      	str	r5, [r0, #8]
 801802a:	e7e1      	b.n	8017ff0 <_free_r+0xa4>
 801802c:	0a5d      	lsrs	r5, r3, #9
 801802e:	2d04      	cmp	r5, #4
 8018030:	d812      	bhi.n	8018058 <_free_r+0x10c>
 8018032:	0998      	lsrs	r0, r3, #6
 8018034:	3038      	adds	r0, #56	; 0x38
 8018036:	00c6      	lsls	r6, r0, #3
 8018038:	18b6      	adds	r6, r6, r2
 801803a:	68b5      	ldr	r5, [r6, #8]
 801803c:	2703      	movs	r7, #3
 801803e:	42ae      	cmp	r6, r5
 8018040:	d125      	bne.n	801808e <_free_r+0x142>
 8018042:	2301      	movs	r3, #1
 8018044:	1080      	asrs	r0, r0, #2
 8018046:	4083      	lsls	r3, r0
 8018048:	6850      	ldr	r0, [r2, #4]
 801804a:	4303      	orrs	r3, r0
 801804c:	6053      	str	r3, [r2, #4]
 801804e:	60ce      	str	r6, [r1, #12]
 8018050:	608d      	str	r5, [r1, #8]
 8018052:	60b1      	str	r1, [r6, #8]
 8018054:	60e9      	str	r1, [r5, #12]
 8018056:	e7a8      	b.n	8017faa <_free_r+0x5e>
 8018058:	2d14      	cmp	r5, #20
 801805a:	d802      	bhi.n	8018062 <_free_r+0x116>
 801805c:	0028      	movs	r0, r5
 801805e:	305b      	adds	r0, #91	; 0x5b
 8018060:	e7e9      	b.n	8018036 <_free_r+0xea>
 8018062:	2d54      	cmp	r5, #84	; 0x54
 8018064:	d802      	bhi.n	801806c <_free_r+0x120>
 8018066:	0b18      	lsrs	r0, r3, #12
 8018068:	306e      	adds	r0, #110	; 0x6e
 801806a:	e7e4      	b.n	8018036 <_free_r+0xea>
 801806c:	20aa      	movs	r0, #170	; 0xaa
 801806e:	0040      	lsls	r0, r0, #1
 8018070:	4285      	cmp	r5, r0
 8018072:	d802      	bhi.n	801807a <_free_r+0x12e>
 8018074:	0bd8      	lsrs	r0, r3, #15
 8018076:	3077      	adds	r0, #119	; 0x77
 8018078:	e7dd      	b.n	8018036 <_free_r+0xea>
 801807a:	4e0d      	ldr	r6, [pc, #52]	; (80180b0 <_free_r+0x164>)
 801807c:	207e      	movs	r0, #126	; 0x7e
 801807e:	42b5      	cmp	r5, r6
 8018080:	d8d9      	bhi.n	8018036 <_free_r+0xea>
 8018082:	0c98      	lsrs	r0, r3, #18
 8018084:	307c      	adds	r0, #124	; 0x7c
 8018086:	e7d6      	b.n	8018036 <_free_r+0xea>
 8018088:	68ad      	ldr	r5, [r5, #8]
 801808a:	42ae      	cmp	r6, r5
 801808c:	d003      	beq.n	8018096 <_free_r+0x14a>
 801808e:	686a      	ldr	r2, [r5, #4]
 8018090:	43ba      	bics	r2, r7
 8018092:	429a      	cmp	r2, r3
 8018094:	d8f8      	bhi.n	8018088 <_free_r+0x13c>
 8018096:	68ee      	ldr	r6, [r5, #12]
 8018098:	e7d9      	b.n	801804e <_free_r+0x102>
 801809a:	46c0      	nop			; (mov r8, r8)
 801809c:	200006b4 	.word	0x200006b4
 80180a0:	20000ac0 	.word	0x20000ac0
 80180a4:	20006dc8 	.word	0x20006dc8
 80180a8:	200006bc 	.word	0x200006bc
 80180ac:	000001ff 	.word	0x000001ff
 80180b0:	00000554 	.word	0x00000554

080180b4 <rshift>:
 80180b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180b6:	0004      	movs	r4, r0
 80180b8:	6905      	ldr	r5, [r0, #16]
 80180ba:	3414      	adds	r4, #20
 80180bc:	114b      	asrs	r3, r1, #5
 80180be:	0026      	movs	r6, r4
 80180c0:	429d      	cmp	r5, r3
 80180c2:	dd14      	ble.n	80180ee <rshift+0x3a>
 80180c4:	221f      	movs	r2, #31
 80180c6:	00ad      	lsls	r5, r5, #2
 80180c8:	009b      	lsls	r3, r3, #2
 80180ca:	4011      	ands	r1, r2
 80180cc:	1965      	adds	r5, r4, r5
 80180ce:	18e3      	adds	r3, r4, r3
 80180d0:	0022      	movs	r2, r4
 80180d2:	2900      	cmp	r1, #0
 80180d4:	d01e      	beq.n	8018114 <rshift+0x60>
 80180d6:	cb04      	ldmia	r3!, {r2}
 80180d8:	2720      	movs	r7, #32
 80180da:	40ca      	lsrs	r2, r1
 80180dc:	46a4      	mov	ip, r4
 80180de:	1a7f      	subs	r7, r7, r1
 80180e0:	4666      	mov	r6, ip
 80180e2:	429d      	cmp	r5, r3
 80180e4:	d80b      	bhi.n	80180fe <rshift+0x4a>
 80180e6:	6032      	str	r2, [r6, #0]
 80180e8:	2a00      	cmp	r2, #0
 80180ea:	d000      	beq.n	80180ee <rshift+0x3a>
 80180ec:	3604      	adds	r6, #4
 80180ee:	1b33      	subs	r3, r6, r4
 80180f0:	109b      	asrs	r3, r3, #2
 80180f2:	6103      	str	r3, [r0, #16]
 80180f4:	42a6      	cmp	r6, r4
 80180f6:	d101      	bne.n	80180fc <rshift+0x48>
 80180f8:	2300      	movs	r3, #0
 80180fa:	6143      	str	r3, [r0, #20]
 80180fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180fe:	681e      	ldr	r6, [r3, #0]
 8018100:	40be      	lsls	r6, r7
 8018102:	4332      	orrs	r2, r6
 8018104:	4666      	mov	r6, ip
 8018106:	c604      	stmia	r6!, {r2}
 8018108:	cb04      	ldmia	r3!, {r2}
 801810a:	46b4      	mov	ip, r6
 801810c:	40ca      	lsrs	r2, r1
 801810e:	e7e7      	b.n	80180e0 <rshift+0x2c>
 8018110:	cb02      	ldmia	r3!, {r1}
 8018112:	c202      	stmia	r2!, {r1}
 8018114:	0016      	movs	r6, r2
 8018116:	429d      	cmp	r5, r3
 8018118:	d8fa      	bhi.n	8018110 <rshift+0x5c>
 801811a:	e7e8      	b.n	80180ee <rshift+0x3a>

0801811c <__hexdig_fun>:
 801811c:	0003      	movs	r3, r0
 801811e:	3b30      	subs	r3, #48	; 0x30
 8018120:	2b09      	cmp	r3, #9
 8018122:	d803      	bhi.n	801812c <__hexdig_fun+0x10>
 8018124:	3820      	subs	r0, #32
 8018126:	b2c3      	uxtb	r3, r0
 8018128:	0018      	movs	r0, r3
 801812a:	4770      	bx	lr
 801812c:	0003      	movs	r3, r0
 801812e:	3b61      	subs	r3, #97	; 0x61
 8018130:	2b05      	cmp	r3, #5
 8018132:	d801      	bhi.n	8018138 <__hexdig_fun+0x1c>
 8018134:	3847      	subs	r0, #71	; 0x47
 8018136:	e7f6      	b.n	8018126 <__hexdig_fun+0xa>
 8018138:	0002      	movs	r2, r0
 801813a:	3a41      	subs	r2, #65	; 0x41
 801813c:	2300      	movs	r3, #0
 801813e:	2a05      	cmp	r2, #5
 8018140:	d8f2      	bhi.n	8018128 <__hexdig_fun+0xc>
 8018142:	3827      	subs	r0, #39	; 0x27
 8018144:	e7ef      	b.n	8018126 <__hexdig_fun+0xa>

08018146 <__gethex>:
 8018146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018148:	b08d      	sub	sp, #52	; 0x34
 801814a:	9005      	str	r0, [sp, #20]
 801814c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801814e:	9109      	str	r1, [sp, #36]	; 0x24
 8018150:	9202      	str	r2, [sp, #8]
 8018152:	930a      	str	r3, [sp, #40]	; 0x28
 8018154:	f000 fadf 	bl	8018716 <__localeconv_l>
 8018158:	6803      	ldr	r3, [r0, #0]
 801815a:	0018      	movs	r0, r3
 801815c:	9307      	str	r3, [sp, #28]
 801815e:	f7e7 ffdb 	bl	8000118 <strlen>
 8018162:	2202      	movs	r2, #2
 8018164:	9b07      	ldr	r3, [sp, #28]
 8018166:	4252      	negs	r2, r2
 8018168:	181b      	adds	r3, r3, r0
 801816a:	3b01      	subs	r3, #1
 801816c:	781b      	ldrb	r3, [r3, #0]
 801816e:	9004      	str	r0, [sp, #16]
 8018170:	930b      	str	r3, [sp, #44]	; 0x2c
 8018172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018174:	6819      	ldr	r1, [r3, #0]
 8018176:	1c8b      	adds	r3, r1, #2
 8018178:	1a52      	subs	r2, r2, r1
 801817a:	18d1      	adds	r1, r2, r3
 801817c:	9301      	str	r3, [sp, #4]
 801817e:	9108      	str	r1, [sp, #32]
 8018180:	9901      	ldr	r1, [sp, #4]
 8018182:	3301      	adds	r3, #1
 8018184:	7808      	ldrb	r0, [r1, #0]
 8018186:	2830      	cmp	r0, #48	; 0x30
 8018188:	d0f7      	beq.n	801817a <__gethex+0x34>
 801818a:	f7ff ffc7 	bl	801811c <__hexdig_fun>
 801818e:	1e07      	subs	r7, r0, #0
 8018190:	d000      	beq.n	8018194 <__gethex+0x4e>
 8018192:	e06f      	b.n	8018274 <__gethex+0x12e>
 8018194:	9a04      	ldr	r2, [sp, #16]
 8018196:	9907      	ldr	r1, [sp, #28]
 8018198:	9801      	ldr	r0, [sp, #4]
 801819a:	f7fc fe4b 	bl	8014e34 <strncmp>
 801819e:	2800      	cmp	r0, #0
 80181a0:	d000      	beq.n	80181a4 <__gethex+0x5e>
 80181a2:	e06d      	b.n	8018280 <__gethex+0x13a>
 80181a4:	9b01      	ldr	r3, [sp, #4]
 80181a6:	9a04      	ldr	r2, [sp, #16]
 80181a8:	189c      	adds	r4, r3, r2
 80181aa:	7820      	ldrb	r0, [r4, #0]
 80181ac:	f7ff ffb6 	bl	801811c <__hexdig_fun>
 80181b0:	2800      	cmp	r0, #0
 80181b2:	d069      	beq.n	8018288 <__gethex+0x142>
 80181b4:	9401      	str	r4, [sp, #4]
 80181b6:	9b01      	ldr	r3, [sp, #4]
 80181b8:	7818      	ldrb	r0, [r3, #0]
 80181ba:	2830      	cmp	r0, #48	; 0x30
 80181bc:	d009      	beq.n	80181d2 <__gethex+0x8c>
 80181be:	f7ff ffad 	bl	801811c <__hexdig_fun>
 80181c2:	4243      	negs	r3, r0
 80181c4:	4143      	adcs	r3, r0
 80181c6:	9303      	str	r3, [sp, #12]
 80181c8:	2301      	movs	r3, #1
 80181ca:	0026      	movs	r6, r4
 80181cc:	9308      	str	r3, [sp, #32]
 80181ce:	9c01      	ldr	r4, [sp, #4]
 80181d0:	e004      	b.n	80181dc <__gethex+0x96>
 80181d2:	9b01      	ldr	r3, [sp, #4]
 80181d4:	3301      	adds	r3, #1
 80181d6:	9301      	str	r3, [sp, #4]
 80181d8:	e7ed      	b.n	80181b6 <__gethex+0x70>
 80181da:	3401      	adds	r4, #1
 80181dc:	7820      	ldrb	r0, [r4, #0]
 80181de:	f7ff ff9d 	bl	801811c <__hexdig_fun>
 80181e2:	2800      	cmp	r0, #0
 80181e4:	d1f9      	bne.n	80181da <__gethex+0x94>
 80181e6:	9a04      	ldr	r2, [sp, #16]
 80181e8:	9907      	ldr	r1, [sp, #28]
 80181ea:	0020      	movs	r0, r4
 80181ec:	f7fc fe22 	bl	8014e34 <strncmp>
 80181f0:	2800      	cmp	r0, #0
 80181f2:	d109      	bne.n	8018208 <__gethex+0xc2>
 80181f4:	2e00      	cmp	r6, #0
 80181f6:	d10a      	bne.n	801820e <__gethex+0xc8>
 80181f8:	9b04      	ldr	r3, [sp, #16]
 80181fa:	18e4      	adds	r4, r4, r3
 80181fc:	0026      	movs	r6, r4
 80181fe:	7820      	ldrb	r0, [r4, #0]
 8018200:	f7ff ff8c 	bl	801811c <__hexdig_fun>
 8018204:	2800      	cmp	r0, #0
 8018206:	d139      	bne.n	801827c <__gethex+0x136>
 8018208:	2700      	movs	r7, #0
 801820a:	42be      	cmp	r6, r7
 801820c:	d001      	beq.n	8018212 <__gethex+0xcc>
 801820e:	1b37      	subs	r7, r6, r4
 8018210:	00bf      	lsls	r7, r7, #2
 8018212:	7823      	ldrb	r3, [r4, #0]
 8018214:	2b50      	cmp	r3, #80	; 0x50
 8018216:	d001      	beq.n	801821c <__gethex+0xd6>
 8018218:	2b70      	cmp	r3, #112	; 0x70
 801821a:	d142      	bne.n	80182a2 <__gethex+0x15c>
 801821c:	7863      	ldrb	r3, [r4, #1]
 801821e:	2b2b      	cmp	r3, #43	; 0x2b
 8018220:	d034      	beq.n	801828c <__gethex+0x146>
 8018222:	2b2d      	cmp	r3, #45	; 0x2d
 8018224:	d036      	beq.n	8018294 <__gethex+0x14e>
 8018226:	2300      	movs	r3, #0
 8018228:	1c66      	adds	r6, r4, #1
 801822a:	9306      	str	r3, [sp, #24]
 801822c:	7830      	ldrb	r0, [r6, #0]
 801822e:	f7ff ff75 	bl	801811c <__hexdig_fun>
 8018232:	1e43      	subs	r3, r0, #1
 8018234:	b2db      	uxtb	r3, r3
 8018236:	2b18      	cmp	r3, #24
 8018238:	d833      	bhi.n	80182a2 <__gethex+0x15c>
 801823a:	3810      	subs	r0, #16
 801823c:	0005      	movs	r5, r0
 801823e:	3601      	adds	r6, #1
 8018240:	7830      	ldrb	r0, [r6, #0]
 8018242:	f7ff ff6b 	bl	801811c <__hexdig_fun>
 8018246:	1e43      	subs	r3, r0, #1
 8018248:	b2db      	uxtb	r3, r3
 801824a:	2b18      	cmp	r3, #24
 801824c:	d924      	bls.n	8018298 <__gethex+0x152>
 801824e:	9b06      	ldr	r3, [sp, #24]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d000      	beq.n	8018256 <__gethex+0x110>
 8018254:	426d      	negs	r5, r5
 8018256:	197f      	adds	r7, r7, r5
 8018258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801825a:	601e      	str	r6, [r3, #0]
 801825c:	9b03      	ldr	r3, [sp, #12]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d021      	beq.n	80182a6 <__gethex+0x160>
 8018262:	9b08      	ldr	r3, [sp, #32]
 8018264:	2606      	movs	r6, #6
 8018266:	425a      	negs	r2, r3
 8018268:	4153      	adcs	r3, r2
 801826a:	425b      	negs	r3, r3
 801826c:	401e      	ands	r6, r3
 801826e:	0030      	movs	r0, r6
 8018270:	b00d      	add	sp, #52	; 0x34
 8018272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018274:	2300      	movs	r3, #0
 8018276:	9303      	str	r3, [sp, #12]
 8018278:	001e      	movs	r6, r3
 801827a:	e7a8      	b.n	80181ce <__gethex+0x88>
 801827c:	3401      	adds	r4, #1
 801827e:	e7be      	b.n	80181fe <__gethex+0xb8>
 8018280:	9c01      	ldr	r4, [sp, #4]
 8018282:	2301      	movs	r3, #1
 8018284:	9303      	str	r3, [sp, #12]
 8018286:	e7c4      	b.n	8018212 <__gethex+0xcc>
 8018288:	0007      	movs	r7, r0
 801828a:	e7fa      	b.n	8018282 <__gethex+0x13c>
 801828c:	2300      	movs	r3, #0
 801828e:	9306      	str	r3, [sp, #24]
 8018290:	1ca6      	adds	r6, r4, #2
 8018292:	e7cb      	b.n	801822c <__gethex+0xe6>
 8018294:	2301      	movs	r3, #1
 8018296:	e7fa      	b.n	801828e <__gethex+0x148>
 8018298:	230a      	movs	r3, #10
 801829a:	435d      	muls	r5, r3
 801829c:	182d      	adds	r5, r5, r0
 801829e:	3d10      	subs	r5, #16
 80182a0:	e7cd      	b.n	801823e <__gethex+0xf8>
 80182a2:	0026      	movs	r6, r4
 80182a4:	e7d8      	b.n	8018258 <__gethex+0x112>
 80182a6:	9b01      	ldr	r3, [sp, #4]
 80182a8:	9903      	ldr	r1, [sp, #12]
 80182aa:	1ae3      	subs	r3, r4, r3
 80182ac:	3b01      	subs	r3, #1
 80182ae:	2b07      	cmp	r3, #7
 80182b0:	dc47      	bgt.n	8018342 <__gethex+0x1fc>
 80182b2:	9805      	ldr	r0, [sp, #20]
 80182b4:	f000 fa5e 	bl	8018774 <_Balloc>
 80182b8:	0003      	movs	r3, r0
 80182ba:	3314      	adds	r3, #20
 80182bc:	9303      	str	r3, [sp, #12]
 80182be:	9308      	str	r3, [sp, #32]
 80182c0:	2300      	movs	r3, #0
 80182c2:	0005      	movs	r5, r0
 80182c4:	001e      	movs	r6, r3
 80182c6:	9306      	str	r3, [sp, #24]
 80182c8:	9b01      	ldr	r3, [sp, #4]
 80182ca:	42a3      	cmp	r3, r4
 80182cc:	d33c      	bcc.n	8018348 <__gethex+0x202>
 80182ce:	9c08      	ldr	r4, [sp, #32]
 80182d0:	9b03      	ldr	r3, [sp, #12]
 80182d2:	c440      	stmia	r4!, {r6}
 80182d4:	1ae4      	subs	r4, r4, r3
 80182d6:	10a4      	asrs	r4, r4, #2
 80182d8:	612c      	str	r4, [r5, #16]
 80182da:	0030      	movs	r0, r6
 80182dc:	f000 faf8 	bl	80188d0 <__hi0bits>
 80182e0:	9b02      	ldr	r3, [sp, #8]
 80182e2:	0164      	lsls	r4, r4, #5
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	1a26      	subs	r6, r4, r0
 80182e8:	9301      	str	r3, [sp, #4]
 80182ea:	429e      	cmp	r6, r3
 80182ec:	dd5f      	ble.n	80183ae <__gethex+0x268>
 80182ee:	1af6      	subs	r6, r6, r3
 80182f0:	0031      	movs	r1, r6
 80182f2:	0028      	movs	r0, r5
 80182f4:	f000 fde3 	bl	8018ebe <__any_on>
 80182f8:	1e04      	subs	r4, r0, #0
 80182fa:	d00f      	beq.n	801831c <__gethex+0x1d6>
 80182fc:	2401      	movs	r4, #1
 80182fe:	211f      	movs	r1, #31
 8018300:	0020      	movs	r0, r4
 8018302:	1e73      	subs	r3, r6, #1
 8018304:	4019      	ands	r1, r3
 8018306:	4088      	lsls	r0, r1
 8018308:	0001      	movs	r1, r0
 801830a:	115a      	asrs	r2, r3, #5
 801830c:	9803      	ldr	r0, [sp, #12]
 801830e:	0092      	lsls	r2, r2, #2
 8018310:	5812      	ldr	r2, [r2, r0]
 8018312:	420a      	tst	r2, r1
 8018314:	d002      	beq.n	801831c <__gethex+0x1d6>
 8018316:	42a3      	cmp	r3, r4
 8018318:	dc41      	bgt.n	801839e <__gethex+0x258>
 801831a:	2402      	movs	r4, #2
 801831c:	0031      	movs	r1, r6
 801831e:	0028      	movs	r0, r5
 8018320:	f7ff fec8 	bl	80180b4 <rshift>
 8018324:	19bf      	adds	r7, r7, r6
 8018326:	9b02      	ldr	r3, [sp, #8]
 8018328:	689b      	ldr	r3, [r3, #8]
 801832a:	9304      	str	r3, [sp, #16]
 801832c:	42bb      	cmp	r3, r7
 801832e:	da4e      	bge.n	80183ce <__gethex+0x288>
 8018330:	0029      	movs	r1, r5
 8018332:	9805      	ldr	r0, [sp, #20]
 8018334:	f000 fa46 	bl	80187c4 <_Bfree>
 8018338:	2300      	movs	r3, #0
 801833a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801833c:	26a3      	movs	r6, #163	; 0xa3
 801833e:	6013      	str	r3, [r2, #0]
 8018340:	e795      	b.n	801826e <__gethex+0x128>
 8018342:	3101      	adds	r1, #1
 8018344:	105b      	asrs	r3, r3, #1
 8018346:	e7b2      	b.n	80182ae <__gethex+0x168>
 8018348:	1e63      	subs	r3, r4, #1
 801834a:	9309      	str	r3, [sp, #36]	; 0x24
 801834c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	4293      	cmp	r3, r2
 8018352:	d015      	beq.n	8018380 <__gethex+0x23a>
 8018354:	9b06      	ldr	r3, [sp, #24]
 8018356:	2b20      	cmp	r3, #32
 8018358:	d105      	bne.n	8018366 <__gethex+0x220>
 801835a:	9b08      	ldr	r3, [sp, #32]
 801835c:	601e      	str	r6, [r3, #0]
 801835e:	2600      	movs	r6, #0
 8018360:	3304      	adds	r3, #4
 8018362:	9308      	str	r3, [sp, #32]
 8018364:	9606      	str	r6, [sp, #24]
 8018366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018368:	7818      	ldrb	r0, [r3, #0]
 801836a:	f7ff fed7 	bl	801811c <__hexdig_fun>
 801836e:	230f      	movs	r3, #15
 8018370:	4018      	ands	r0, r3
 8018372:	9b06      	ldr	r3, [sp, #24]
 8018374:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8018376:	4098      	lsls	r0, r3
 8018378:	3304      	adds	r3, #4
 801837a:	4306      	orrs	r6, r0
 801837c:	9306      	str	r3, [sp, #24]
 801837e:	e7a3      	b.n	80182c8 <__gethex+0x182>
 8018380:	2301      	movs	r3, #1
 8018382:	9a04      	ldr	r2, [sp, #16]
 8018384:	1a9c      	subs	r4, r3, r2
 8018386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018388:	191c      	adds	r4, r3, r4
 801838a:	9b01      	ldr	r3, [sp, #4]
 801838c:	429c      	cmp	r4, r3
 801838e:	d3e1      	bcc.n	8018354 <__gethex+0x20e>
 8018390:	9907      	ldr	r1, [sp, #28]
 8018392:	0020      	movs	r0, r4
 8018394:	f7fc fd4e 	bl	8014e34 <strncmp>
 8018398:	2800      	cmp	r0, #0
 801839a:	d1db      	bne.n	8018354 <__gethex+0x20e>
 801839c:	e794      	b.n	80182c8 <__gethex+0x182>
 801839e:	1eb1      	subs	r1, r6, #2
 80183a0:	0028      	movs	r0, r5
 80183a2:	f000 fd8c 	bl	8018ebe <__any_on>
 80183a6:	2800      	cmp	r0, #0
 80183a8:	d0b7      	beq.n	801831a <__gethex+0x1d4>
 80183aa:	2403      	movs	r4, #3
 80183ac:	e7b6      	b.n	801831c <__gethex+0x1d6>
 80183ae:	9b01      	ldr	r3, [sp, #4]
 80183b0:	2400      	movs	r4, #0
 80183b2:	429e      	cmp	r6, r3
 80183b4:	dab7      	bge.n	8018326 <__gethex+0x1e0>
 80183b6:	1b9e      	subs	r6, r3, r6
 80183b8:	0029      	movs	r1, r5
 80183ba:	0032      	movs	r2, r6
 80183bc:	9805      	ldr	r0, [sp, #20]
 80183be:	f000 fbab 	bl	8018b18 <__lshift>
 80183c2:	0003      	movs	r3, r0
 80183c4:	3314      	adds	r3, #20
 80183c6:	0005      	movs	r5, r0
 80183c8:	1bbf      	subs	r7, r7, r6
 80183ca:	9303      	str	r3, [sp, #12]
 80183cc:	e7ab      	b.n	8018326 <__gethex+0x1e0>
 80183ce:	9b02      	ldr	r3, [sp, #8]
 80183d0:	685e      	ldr	r6, [r3, #4]
 80183d2:	42be      	cmp	r6, r7
 80183d4:	dd6b      	ble.n	80184ae <__gethex+0x368>
 80183d6:	9b01      	ldr	r3, [sp, #4]
 80183d8:	1bf6      	subs	r6, r6, r7
 80183da:	42b3      	cmp	r3, r6
 80183dc:	dc32      	bgt.n	8018444 <__gethex+0x2fe>
 80183de:	9b02      	ldr	r3, [sp, #8]
 80183e0:	68db      	ldr	r3, [r3, #12]
 80183e2:	2b02      	cmp	r3, #2
 80183e4:	d026      	beq.n	8018434 <__gethex+0x2ee>
 80183e6:	2b03      	cmp	r3, #3
 80183e8:	d028      	beq.n	801843c <__gethex+0x2f6>
 80183ea:	2b01      	cmp	r3, #1
 80183ec:	d119      	bne.n	8018422 <__gethex+0x2dc>
 80183ee:	9b01      	ldr	r3, [sp, #4]
 80183f0:	42b3      	cmp	r3, r6
 80183f2:	d116      	bne.n	8018422 <__gethex+0x2dc>
 80183f4:	2b01      	cmp	r3, #1
 80183f6:	dc0d      	bgt.n	8018414 <__gethex+0x2ce>
 80183f8:	9b02      	ldr	r3, [sp, #8]
 80183fa:	2662      	movs	r6, #98	; 0x62
 80183fc:	685b      	ldr	r3, [r3, #4]
 80183fe:	9301      	str	r3, [sp, #4]
 8018400:	9a01      	ldr	r2, [sp, #4]
 8018402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018404:	601a      	str	r2, [r3, #0]
 8018406:	2301      	movs	r3, #1
 8018408:	9a03      	ldr	r2, [sp, #12]
 801840a:	612b      	str	r3, [r5, #16]
 801840c:	6013      	str	r3, [r2, #0]
 801840e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018410:	601d      	str	r5, [r3, #0]
 8018412:	e72c      	b.n	801826e <__gethex+0x128>
 8018414:	9901      	ldr	r1, [sp, #4]
 8018416:	0028      	movs	r0, r5
 8018418:	3901      	subs	r1, #1
 801841a:	f000 fd50 	bl	8018ebe <__any_on>
 801841e:	2800      	cmp	r0, #0
 8018420:	d1ea      	bne.n	80183f8 <__gethex+0x2b2>
 8018422:	0029      	movs	r1, r5
 8018424:	9805      	ldr	r0, [sp, #20]
 8018426:	f000 f9cd 	bl	80187c4 <_Bfree>
 801842a:	2300      	movs	r3, #0
 801842c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801842e:	2650      	movs	r6, #80	; 0x50
 8018430:	6013      	str	r3, [r2, #0]
 8018432:	e71c      	b.n	801826e <__gethex+0x128>
 8018434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018436:	2b00      	cmp	r3, #0
 8018438:	d0de      	beq.n	80183f8 <__gethex+0x2b2>
 801843a:	e7f2      	b.n	8018422 <__gethex+0x2dc>
 801843c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801843e:	2b00      	cmp	r3, #0
 8018440:	d1da      	bne.n	80183f8 <__gethex+0x2b2>
 8018442:	e7ee      	b.n	8018422 <__gethex+0x2dc>
 8018444:	1e77      	subs	r7, r6, #1
 8018446:	2c00      	cmp	r4, #0
 8018448:	d12f      	bne.n	80184aa <__gethex+0x364>
 801844a:	2f00      	cmp	r7, #0
 801844c:	d004      	beq.n	8018458 <__gethex+0x312>
 801844e:	0039      	movs	r1, r7
 8018450:	0028      	movs	r0, r5
 8018452:	f000 fd34 	bl	8018ebe <__any_on>
 8018456:	0004      	movs	r4, r0
 8018458:	231f      	movs	r3, #31
 801845a:	117a      	asrs	r2, r7, #5
 801845c:	401f      	ands	r7, r3
 801845e:	3b1e      	subs	r3, #30
 8018460:	40bb      	lsls	r3, r7
 8018462:	9903      	ldr	r1, [sp, #12]
 8018464:	0092      	lsls	r2, r2, #2
 8018466:	5852      	ldr	r2, [r2, r1]
 8018468:	421a      	tst	r2, r3
 801846a:	d001      	beq.n	8018470 <__gethex+0x32a>
 801846c:	2302      	movs	r3, #2
 801846e:	431c      	orrs	r4, r3
 8018470:	9b01      	ldr	r3, [sp, #4]
 8018472:	0031      	movs	r1, r6
 8018474:	1b9b      	subs	r3, r3, r6
 8018476:	2602      	movs	r6, #2
 8018478:	0028      	movs	r0, r5
 801847a:	9301      	str	r3, [sp, #4]
 801847c:	f7ff fe1a 	bl	80180b4 <rshift>
 8018480:	9b02      	ldr	r3, [sp, #8]
 8018482:	685f      	ldr	r7, [r3, #4]
 8018484:	2c00      	cmp	r4, #0
 8018486:	d040      	beq.n	801850a <__gethex+0x3c4>
 8018488:	9b02      	ldr	r3, [sp, #8]
 801848a:	68db      	ldr	r3, [r3, #12]
 801848c:	2b02      	cmp	r3, #2
 801848e:	d010      	beq.n	80184b2 <__gethex+0x36c>
 8018490:	2b03      	cmp	r3, #3
 8018492:	d012      	beq.n	80184ba <__gethex+0x374>
 8018494:	2b01      	cmp	r3, #1
 8018496:	d106      	bne.n	80184a6 <__gethex+0x360>
 8018498:	07a2      	lsls	r2, r4, #30
 801849a:	d504      	bpl.n	80184a6 <__gethex+0x360>
 801849c:	9a03      	ldr	r2, [sp, #12]
 801849e:	6812      	ldr	r2, [r2, #0]
 80184a0:	4314      	orrs	r4, r2
 80184a2:	421c      	tst	r4, r3
 80184a4:	d10c      	bne.n	80184c0 <__gethex+0x37a>
 80184a6:	2310      	movs	r3, #16
 80184a8:	e02e      	b.n	8018508 <__gethex+0x3c2>
 80184aa:	2401      	movs	r4, #1
 80184ac:	e7d4      	b.n	8018458 <__gethex+0x312>
 80184ae:	2601      	movs	r6, #1
 80184b0:	e7e8      	b.n	8018484 <__gethex+0x33e>
 80184b2:	2301      	movs	r3, #1
 80184b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80184b6:	1a9b      	subs	r3, r3, r2
 80184b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80184ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d0f2      	beq.n	80184a6 <__gethex+0x360>
 80184c0:	692c      	ldr	r4, [r5, #16]
 80184c2:	00a3      	lsls	r3, r4, #2
 80184c4:	9304      	str	r3, [sp, #16]
 80184c6:	002b      	movs	r3, r5
 80184c8:	00a2      	lsls	r2, r4, #2
 80184ca:	3314      	adds	r3, #20
 80184cc:	1899      	adds	r1, r3, r2
 80184ce:	2200      	movs	r2, #0
 80184d0:	4694      	mov	ip, r2
 80184d2:	681a      	ldr	r2, [r3, #0]
 80184d4:	1c50      	adds	r0, r2, #1
 80184d6:	d01d      	beq.n	8018514 <__gethex+0x3ce>
 80184d8:	3201      	adds	r2, #1
 80184da:	601a      	str	r2, [r3, #0]
 80184dc:	002b      	movs	r3, r5
 80184de:	3314      	adds	r3, #20
 80184e0:	2e02      	cmp	r6, #2
 80184e2:	d13a      	bne.n	801855a <__gethex+0x414>
 80184e4:	9a02      	ldr	r2, [sp, #8]
 80184e6:	9901      	ldr	r1, [sp, #4]
 80184e8:	6812      	ldr	r2, [r2, #0]
 80184ea:	3a01      	subs	r2, #1
 80184ec:	428a      	cmp	r2, r1
 80184ee:	d10a      	bne.n	8018506 <__gethex+0x3c0>
 80184f0:	114a      	asrs	r2, r1, #5
 80184f2:	211f      	movs	r1, #31
 80184f4:	9801      	ldr	r0, [sp, #4]
 80184f6:	0092      	lsls	r2, r2, #2
 80184f8:	4001      	ands	r1, r0
 80184fa:	2001      	movs	r0, #1
 80184fc:	0004      	movs	r4, r0
 80184fe:	408c      	lsls	r4, r1
 8018500:	58d3      	ldr	r3, [r2, r3]
 8018502:	4223      	tst	r3, r4
 8018504:	d148      	bne.n	8018598 <__gethex+0x452>
 8018506:	2320      	movs	r3, #32
 8018508:	431e      	orrs	r6, r3
 801850a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801850c:	601d      	str	r5, [r3, #0]
 801850e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018510:	601f      	str	r7, [r3, #0]
 8018512:	e6ac      	b.n	801826e <__gethex+0x128>
 8018514:	4662      	mov	r2, ip
 8018516:	c304      	stmia	r3!, {r2}
 8018518:	4299      	cmp	r1, r3
 801851a:	d8da      	bhi.n	80184d2 <__gethex+0x38c>
 801851c:	68ab      	ldr	r3, [r5, #8]
 801851e:	429c      	cmp	r4, r3
 8018520:	db12      	blt.n	8018548 <__gethex+0x402>
 8018522:	686b      	ldr	r3, [r5, #4]
 8018524:	9805      	ldr	r0, [sp, #20]
 8018526:	1c59      	adds	r1, r3, #1
 8018528:	f000 f924 	bl	8018774 <_Balloc>
 801852c:	0029      	movs	r1, r5
 801852e:	692b      	ldr	r3, [r5, #16]
 8018530:	9003      	str	r0, [sp, #12]
 8018532:	1c9a      	adds	r2, r3, #2
 8018534:	0092      	lsls	r2, r2, #2
 8018536:	310c      	adds	r1, #12
 8018538:	300c      	adds	r0, #12
 801853a:	f7fc fa02 	bl	8014942 <memcpy>
 801853e:	0029      	movs	r1, r5
 8018540:	9805      	ldr	r0, [sp, #20]
 8018542:	f000 f93f 	bl	80187c4 <_Bfree>
 8018546:	9d03      	ldr	r5, [sp, #12]
 8018548:	692b      	ldr	r3, [r5, #16]
 801854a:	1c5a      	adds	r2, r3, #1
 801854c:	612a      	str	r2, [r5, #16]
 801854e:	2201      	movs	r2, #1
 8018550:	3304      	adds	r3, #4
 8018552:	009b      	lsls	r3, r3, #2
 8018554:	18eb      	adds	r3, r5, r3
 8018556:	605a      	str	r2, [r3, #4]
 8018558:	e7c0      	b.n	80184dc <__gethex+0x396>
 801855a:	692a      	ldr	r2, [r5, #16]
 801855c:	42a2      	cmp	r2, r4
 801855e:	dd0a      	ble.n	8018576 <__gethex+0x430>
 8018560:	2101      	movs	r1, #1
 8018562:	0028      	movs	r0, r5
 8018564:	f7ff fda6 	bl	80180b4 <rshift>
 8018568:	9b02      	ldr	r3, [sp, #8]
 801856a:	3701      	adds	r7, #1
 801856c:	689b      	ldr	r3, [r3, #8]
 801856e:	2601      	movs	r6, #1
 8018570:	42bb      	cmp	r3, r7
 8018572:	dac8      	bge.n	8018506 <__gethex+0x3c0>
 8018574:	e6dc      	b.n	8018330 <__gethex+0x1ea>
 8018576:	241f      	movs	r4, #31
 8018578:	9a01      	ldr	r2, [sp, #4]
 801857a:	2601      	movs	r6, #1
 801857c:	4022      	ands	r2, r4
 801857e:	1e14      	subs	r4, r2, #0
 8018580:	d0c1      	beq.n	8018506 <__gethex+0x3c0>
 8018582:	9a04      	ldr	r2, [sp, #16]
 8018584:	189b      	adds	r3, r3, r2
 8018586:	3b04      	subs	r3, #4
 8018588:	6818      	ldr	r0, [r3, #0]
 801858a:	f000 f9a1 	bl	80188d0 <__hi0bits>
 801858e:	2120      	movs	r1, #32
 8018590:	1b0c      	subs	r4, r1, r4
 8018592:	42a0      	cmp	r0, r4
 8018594:	dbe4      	blt.n	8018560 <__gethex+0x41a>
 8018596:	e7b6      	b.n	8018506 <__gethex+0x3c0>
 8018598:	0006      	movs	r6, r0
 801859a:	e7b4      	b.n	8018506 <__gethex+0x3c0>

0801859c <L_shift>:
 801859c:	2308      	movs	r3, #8
 801859e:	b570      	push	{r4, r5, r6, lr}
 80185a0:	2520      	movs	r5, #32
 80185a2:	1a9a      	subs	r2, r3, r2
 80185a4:	0092      	lsls	r2, r2, #2
 80185a6:	1aad      	subs	r5, r5, r2
 80185a8:	6843      	ldr	r3, [r0, #4]
 80185aa:	6806      	ldr	r6, [r0, #0]
 80185ac:	001c      	movs	r4, r3
 80185ae:	40ac      	lsls	r4, r5
 80185b0:	40d3      	lsrs	r3, r2
 80185b2:	4334      	orrs	r4, r6
 80185b4:	6004      	str	r4, [r0, #0]
 80185b6:	6043      	str	r3, [r0, #4]
 80185b8:	3004      	adds	r0, #4
 80185ba:	4288      	cmp	r0, r1
 80185bc:	d3f4      	bcc.n	80185a8 <L_shift+0xc>
 80185be:	bd70      	pop	{r4, r5, r6, pc}

080185c0 <__match>:
 80185c0:	b530      	push	{r4, r5, lr}
 80185c2:	6803      	ldr	r3, [r0, #0]
 80185c4:	780c      	ldrb	r4, [r1, #0]
 80185c6:	3301      	adds	r3, #1
 80185c8:	2c00      	cmp	r4, #0
 80185ca:	d102      	bne.n	80185d2 <__match+0x12>
 80185cc:	6003      	str	r3, [r0, #0]
 80185ce:	2001      	movs	r0, #1
 80185d0:	bd30      	pop	{r4, r5, pc}
 80185d2:	781a      	ldrb	r2, [r3, #0]
 80185d4:	0015      	movs	r5, r2
 80185d6:	3d41      	subs	r5, #65	; 0x41
 80185d8:	2d19      	cmp	r5, #25
 80185da:	d800      	bhi.n	80185de <__match+0x1e>
 80185dc:	3220      	adds	r2, #32
 80185de:	3101      	adds	r1, #1
 80185e0:	42a2      	cmp	r2, r4
 80185e2:	d0ef      	beq.n	80185c4 <__match+0x4>
 80185e4:	2000      	movs	r0, #0
 80185e6:	e7f3      	b.n	80185d0 <__match+0x10>

080185e8 <__hexnan>:
 80185e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80185ea:	b08b      	sub	sp, #44	; 0x2c
 80185ec:	9201      	str	r2, [sp, #4]
 80185ee:	680a      	ldr	r2, [r1, #0]
 80185f0:	9901      	ldr	r1, [sp, #4]
 80185f2:	1153      	asrs	r3, r2, #5
 80185f4:	009b      	lsls	r3, r3, #2
 80185f6:	18cb      	adds	r3, r1, r3
 80185f8:	9304      	str	r3, [sp, #16]
 80185fa:	231f      	movs	r3, #31
 80185fc:	401a      	ands	r2, r3
 80185fe:	9008      	str	r0, [sp, #32]
 8018600:	9206      	str	r2, [sp, #24]
 8018602:	d002      	beq.n	801860a <__hexnan+0x22>
 8018604:	9b04      	ldr	r3, [sp, #16]
 8018606:	3304      	adds	r3, #4
 8018608:	9304      	str	r3, [sp, #16]
 801860a:	9b04      	ldr	r3, [sp, #16]
 801860c:	2500      	movs	r5, #0
 801860e:	1f1e      	subs	r6, r3, #4
 8018610:	0037      	movs	r7, r6
 8018612:	0034      	movs	r4, r6
 8018614:	9b08      	ldr	r3, [sp, #32]
 8018616:	6035      	str	r5, [r6, #0]
 8018618:	681b      	ldr	r3, [r3, #0]
 801861a:	9507      	str	r5, [sp, #28]
 801861c:	9305      	str	r3, [sp, #20]
 801861e:	9502      	str	r5, [sp, #8]
 8018620:	9b05      	ldr	r3, [sp, #20]
 8018622:	3301      	adds	r3, #1
 8018624:	9309      	str	r3, [sp, #36]	; 0x24
 8018626:	9b05      	ldr	r3, [sp, #20]
 8018628:	785b      	ldrb	r3, [r3, #1]
 801862a:	9303      	str	r3, [sp, #12]
 801862c:	2b00      	cmp	r3, #0
 801862e:	d028      	beq.n	8018682 <__hexnan+0x9a>
 8018630:	9803      	ldr	r0, [sp, #12]
 8018632:	f7ff fd73 	bl	801811c <__hexdig_fun>
 8018636:	2800      	cmp	r0, #0
 8018638:	d145      	bne.n	80186c6 <__hexnan+0xde>
 801863a:	9b03      	ldr	r3, [sp, #12]
 801863c:	2b20      	cmp	r3, #32
 801863e:	d819      	bhi.n	8018674 <__hexnan+0x8c>
 8018640:	9b02      	ldr	r3, [sp, #8]
 8018642:	9a07      	ldr	r2, [sp, #28]
 8018644:	4293      	cmp	r3, r2
 8018646:	dd12      	ble.n	801866e <__hexnan+0x86>
 8018648:	42bc      	cmp	r4, r7
 801864a:	d206      	bcs.n	801865a <__hexnan+0x72>
 801864c:	2d07      	cmp	r5, #7
 801864e:	dc04      	bgt.n	801865a <__hexnan+0x72>
 8018650:	002a      	movs	r2, r5
 8018652:	0039      	movs	r1, r7
 8018654:	0020      	movs	r0, r4
 8018656:	f7ff ffa1 	bl	801859c <L_shift>
 801865a:	9b01      	ldr	r3, [sp, #4]
 801865c:	2508      	movs	r5, #8
 801865e:	429c      	cmp	r4, r3
 8018660:	d905      	bls.n	801866e <__hexnan+0x86>
 8018662:	1f27      	subs	r7, r4, #4
 8018664:	2500      	movs	r5, #0
 8018666:	003c      	movs	r4, r7
 8018668:	9b02      	ldr	r3, [sp, #8]
 801866a:	603d      	str	r5, [r7, #0]
 801866c:	9307      	str	r3, [sp, #28]
 801866e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018670:	9305      	str	r3, [sp, #20]
 8018672:	e7d5      	b.n	8018620 <__hexnan+0x38>
 8018674:	9b03      	ldr	r3, [sp, #12]
 8018676:	2b29      	cmp	r3, #41	; 0x29
 8018678:	d14a      	bne.n	8018710 <__hexnan+0x128>
 801867a:	9b05      	ldr	r3, [sp, #20]
 801867c:	9a08      	ldr	r2, [sp, #32]
 801867e:	3302      	adds	r3, #2
 8018680:	6013      	str	r3, [r2, #0]
 8018682:	9b02      	ldr	r3, [sp, #8]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d043      	beq.n	8018710 <__hexnan+0x128>
 8018688:	42bc      	cmp	r4, r7
 801868a:	d206      	bcs.n	801869a <__hexnan+0xb2>
 801868c:	2d07      	cmp	r5, #7
 801868e:	dc04      	bgt.n	801869a <__hexnan+0xb2>
 8018690:	002a      	movs	r2, r5
 8018692:	0039      	movs	r1, r7
 8018694:	0020      	movs	r0, r4
 8018696:	f7ff ff81 	bl	801859c <L_shift>
 801869a:	9b01      	ldr	r3, [sp, #4]
 801869c:	429c      	cmp	r4, r3
 801869e:	d926      	bls.n	80186ee <__hexnan+0x106>
 80186a0:	cc04      	ldmia	r4!, {r2}
 80186a2:	601a      	str	r2, [r3, #0]
 80186a4:	3304      	adds	r3, #4
 80186a6:	42a6      	cmp	r6, r4
 80186a8:	d2fa      	bcs.n	80186a0 <__hexnan+0xb8>
 80186aa:	2200      	movs	r2, #0
 80186ac:	c304      	stmia	r3!, {r2}
 80186ae:	429e      	cmp	r6, r3
 80186b0:	d2fc      	bcs.n	80186ac <__hexnan+0xc4>
 80186b2:	6833      	ldr	r3, [r6, #0]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d104      	bne.n	80186c2 <__hexnan+0xda>
 80186b8:	9b01      	ldr	r3, [sp, #4]
 80186ba:	429e      	cmp	r6, r3
 80186bc:	d126      	bne.n	801870c <__hexnan+0x124>
 80186be:	2301      	movs	r3, #1
 80186c0:	6033      	str	r3, [r6, #0]
 80186c2:	2005      	movs	r0, #5
 80186c4:	e025      	b.n	8018712 <__hexnan+0x12a>
 80186c6:	9b02      	ldr	r3, [sp, #8]
 80186c8:	3501      	adds	r5, #1
 80186ca:	3301      	adds	r3, #1
 80186cc:	9302      	str	r3, [sp, #8]
 80186ce:	2d08      	cmp	r5, #8
 80186d0:	dd06      	ble.n	80186e0 <__hexnan+0xf8>
 80186d2:	9b01      	ldr	r3, [sp, #4]
 80186d4:	429c      	cmp	r4, r3
 80186d6:	d9ca      	bls.n	801866e <__hexnan+0x86>
 80186d8:	2300      	movs	r3, #0
 80186da:	2501      	movs	r5, #1
 80186dc:	3c04      	subs	r4, #4
 80186de:	6023      	str	r3, [r4, #0]
 80186e0:	220f      	movs	r2, #15
 80186e2:	6823      	ldr	r3, [r4, #0]
 80186e4:	4010      	ands	r0, r2
 80186e6:	011b      	lsls	r3, r3, #4
 80186e8:	4318      	orrs	r0, r3
 80186ea:	6020      	str	r0, [r4, #0]
 80186ec:	e7bf      	b.n	801866e <__hexnan+0x86>
 80186ee:	9b06      	ldr	r3, [sp, #24]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d0de      	beq.n	80186b2 <__hexnan+0xca>
 80186f4:	2120      	movs	r1, #32
 80186f6:	9a06      	ldr	r2, [sp, #24]
 80186f8:	9b04      	ldr	r3, [sp, #16]
 80186fa:	1a89      	subs	r1, r1, r2
 80186fc:	2201      	movs	r2, #1
 80186fe:	4252      	negs	r2, r2
 8018700:	40ca      	lsrs	r2, r1
 8018702:	3b04      	subs	r3, #4
 8018704:	6819      	ldr	r1, [r3, #0]
 8018706:	400a      	ands	r2, r1
 8018708:	601a      	str	r2, [r3, #0]
 801870a:	e7d2      	b.n	80186b2 <__hexnan+0xca>
 801870c:	3e04      	subs	r6, #4
 801870e:	e7d0      	b.n	80186b2 <__hexnan+0xca>
 8018710:	2004      	movs	r0, #4
 8018712:	b00b      	add	sp, #44	; 0x2c
 8018714:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018716 <__localeconv_l>:
 8018716:	30f0      	adds	r0, #240	; 0xf0
 8018718:	4770      	bx	lr
	...

0801871c <_localeconv_r>:
 801871c:	4b03      	ldr	r3, [pc, #12]	; (801872c <_localeconv_r+0x10>)
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018722:	2800      	cmp	r0, #0
 8018724:	d100      	bne.n	8018728 <_localeconv_r+0xc>
 8018726:	4802      	ldr	r0, [pc, #8]	; (8018730 <_localeconv_r+0x14>)
 8018728:	30f0      	adds	r0, #240	; 0xf0
 801872a:	4770      	bx	lr
 801872c:	20000118 	.word	0x20000118
 8018730:	20000548 	.word	0x20000548

08018734 <__retarget_lock_acquire_recursive>:
 8018734:	4770      	bx	lr

08018736 <__retarget_lock_release_recursive>:
 8018736:	4770      	bx	lr

08018738 <memchr>:
 8018738:	b2c9      	uxtb	r1, r1
 801873a:	1882      	adds	r2, r0, r2
 801873c:	4290      	cmp	r0, r2
 801873e:	d101      	bne.n	8018744 <memchr+0xc>
 8018740:	2000      	movs	r0, #0
 8018742:	4770      	bx	lr
 8018744:	7803      	ldrb	r3, [r0, #0]
 8018746:	428b      	cmp	r3, r1
 8018748:	d0fb      	beq.n	8018742 <memchr+0xa>
 801874a:	3001      	adds	r0, #1
 801874c:	e7f6      	b.n	801873c <memchr+0x4>

0801874e <memmove>:
 801874e:	b510      	push	{r4, lr}
 8018750:	4288      	cmp	r0, r1
 8018752:	d902      	bls.n	801875a <memmove+0xc>
 8018754:	188b      	adds	r3, r1, r2
 8018756:	4298      	cmp	r0, r3
 8018758:	d303      	bcc.n	8018762 <memmove+0x14>
 801875a:	2300      	movs	r3, #0
 801875c:	e007      	b.n	801876e <memmove+0x20>
 801875e:	5c8b      	ldrb	r3, [r1, r2]
 8018760:	5483      	strb	r3, [r0, r2]
 8018762:	3a01      	subs	r2, #1
 8018764:	d2fb      	bcs.n	801875e <memmove+0x10>
 8018766:	bd10      	pop	{r4, pc}
 8018768:	5ccc      	ldrb	r4, [r1, r3]
 801876a:	54c4      	strb	r4, [r0, r3]
 801876c:	3301      	adds	r3, #1
 801876e:	429a      	cmp	r2, r3
 8018770:	d1fa      	bne.n	8018768 <memmove+0x1a>
 8018772:	e7f8      	b.n	8018766 <memmove+0x18>

08018774 <_Balloc>:
 8018774:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018776:	b570      	push	{r4, r5, r6, lr}
 8018778:	0004      	movs	r4, r0
 801877a:	000d      	movs	r5, r1
 801877c:	2b00      	cmp	r3, #0
 801877e:	d012      	beq.n	80187a6 <_Balloc+0x32>
 8018780:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8018782:	00ab      	lsls	r3, r5, #2
 8018784:	18d3      	adds	r3, r2, r3
 8018786:	6818      	ldr	r0, [r3, #0]
 8018788:	2800      	cmp	r0, #0
 801878a:	d115      	bne.n	80187b8 <_Balloc+0x44>
 801878c:	2101      	movs	r1, #1
 801878e:	000e      	movs	r6, r1
 8018790:	40ae      	lsls	r6, r5
 8018792:	1d72      	adds	r2, r6, #5
 8018794:	0092      	lsls	r2, r2, #2
 8018796:	0020      	movs	r0, r4
 8018798:	f000 fcbe 	bl	8019118 <_calloc_r>
 801879c:	2800      	cmp	r0, #0
 801879e:	d009      	beq.n	80187b4 <_Balloc+0x40>
 80187a0:	6045      	str	r5, [r0, #4]
 80187a2:	6086      	str	r6, [r0, #8]
 80187a4:	e00a      	b.n	80187bc <_Balloc+0x48>
 80187a6:	2221      	movs	r2, #33	; 0x21
 80187a8:	2104      	movs	r1, #4
 80187aa:	f000 fcb5 	bl	8019118 <_calloc_r>
 80187ae:	64e0      	str	r0, [r4, #76]	; 0x4c
 80187b0:	2800      	cmp	r0, #0
 80187b2:	d1e5      	bne.n	8018780 <_Balloc+0xc>
 80187b4:	2000      	movs	r0, #0
 80187b6:	bd70      	pop	{r4, r5, r6, pc}
 80187b8:	6802      	ldr	r2, [r0, #0]
 80187ba:	601a      	str	r2, [r3, #0]
 80187bc:	2300      	movs	r3, #0
 80187be:	6103      	str	r3, [r0, #16]
 80187c0:	60c3      	str	r3, [r0, #12]
 80187c2:	e7f8      	b.n	80187b6 <_Balloc+0x42>

080187c4 <_Bfree>:
 80187c4:	2900      	cmp	r1, #0
 80187c6:	d006      	beq.n	80187d6 <_Bfree+0x12>
 80187c8:	684b      	ldr	r3, [r1, #4]
 80187ca:	009a      	lsls	r2, r3, #2
 80187cc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80187ce:	189b      	adds	r3, r3, r2
 80187d0:	681a      	ldr	r2, [r3, #0]
 80187d2:	600a      	str	r2, [r1, #0]
 80187d4:	6019      	str	r1, [r3, #0]
 80187d6:	4770      	bx	lr

080187d8 <__multadd>:
 80187d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80187da:	001e      	movs	r6, r3
 80187dc:	2314      	movs	r3, #20
 80187de:	469c      	mov	ip, r3
 80187e0:	0007      	movs	r7, r0
 80187e2:	000c      	movs	r4, r1
 80187e4:	2000      	movs	r0, #0
 80187e6:	690d      	ldr	r5, [r1, #16]
 80187e8:	448c      	add	ip, r1
 80187ea:	4663      	mov	r3, ip
 80187ec:	681b      	ldr	r3, [r3, #0]
 80187ee:	3001      	adds	r0, #1
 80187f0:	b299      	uxth	r1, r3
 80187f2:	4663      	mov	r3, ip
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	4351      	muls	r1, r2
 80187f8:	0c1b      	lsrs	r3, r3, #16
 80187fa:	4353      	muls	r3, r2
 80187fc:	1989      	adds	r1, r1, r6
 80187fe:	0c0e      	lsrs	r6, r1, #16
 8018800:	199b      	adds	r3, r3, r6
 8018802:	b289      	uxth	r1, r1
 8018804:	0c1e      	lsrs	r6, r3, #16
 8018806:	041b      	lsls	r3, r3, #16
 8018808:	185b      	adds	r3, r3, r1
 801880a:	4661      	mov	r1, ip
 801880c:	c108      	stmia	r1!, {r3}
 801880e:	468c      	mov	ip, r1
 8018810:	4285      	cmp	r5, r0
 8018812:	dcea      	bgt.n	80187ea <__multadd+0x12>
 8018814:	2e00      	cmp	r6, #0
 8018816:	d01b      	beq.n	8018850 <__multadd+0x78>
 8018818:	68a3      	ldr	r3, [r4, #8]
 801881a:	42ab      	cmp	r3, r5
 801881c:	dc12      	bgt.n	8018844 <__multadd+0x6c>
 801881e:	6863      	ldr	r3, [r4, #4]
 8018820:	0038      	movs	r0, r7
 8018822:	1c59      	adds	r1, r3, #1
 8018824:	f7ff ffa6 	bl	8018774 <_Balloc>
 8018828:	0021      	movs	r1, r4
 801882a:	6923      	ldr	r3, [r4, #16]
 801882c:	9001      	str	r0, [sp, #4]
 801882e:	1c9a      	adds	r2, r3, #2
 8018830:	0092      	lsls	r2, r2, #2
 8018832:	310c      	adds	r1, #12
 8018834:	300c      	adds	r0, #12
 8018836:	f7fc f884 	bl	8014942 <memcpy>
 801883a:	0021      	movs	r1, r4
 801883c:	0038      	movs	r0, r7
 801883e:	f7ff ffc1 	bl	80187c4 <_Bfree>
 8018842:	9c01      	ldr	r4, [sp, #4]
 8018844:	1d2b      	adds	r3, r5, #4
 8018846:	009b      	lsls	r3, r3, #2
 8018848:	18e3      	adds	r3, r4, r3
 801884a:	3501      	adds	r5, #1
 801884c:	605e      	str	r6, [r3, #4]
 801884e:	6125      	str	r5, [r4, #16]
 8018850:	0020      	movs	r0, r4
 8018852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08018854 <__s2b>:
 8018854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018856:	0006      	movs	r6, r0
 8018858:	0018      	movs	r0, r3
 801885a:	000c      	movs	r4, r1
 801885c:	3008      	adds	r0, #8
 801885e:	2109      	movs	r1, #9
 8018860:	9301      	str	r3, [sp, #4]
 8018862:	0015      	movs	r5, r2
 8018864:	f7e7 fcfe 	bl	8000264 <__divsi3>
 8018868:	2301      	movs	r3, #1
 801886a:	2100      	movs	r1, #0
 801886c:	4283      	cmp	r3, r0
 801886e:	db1f      	blt.n	80188b0 <__s2b+0x5c>
 8018870:	0030      	movs	r0, r6
 8018872:	f7ff ff7f 	bl	8018774 <_Balloc>
 8018876:	9b08      	ldr	r3, [sp, #32]
 8018878:	6143      	str	r3, [r0, #20]
 801887a:	2301      	movs	r3, #1
 801887c:	6103      	str	r3, [r0, #16]
 801887e:	2d09      	cmp	r5, #9
 8018880:	dd19      	ble.n	80188b6 <__s2b+0x62>
 8018882:	0023      	movs	r3, r4
 8018884:	3309      	adds	r3, #9
 8018886:	001f      	movs	r7, r3
 8018888:	9300      	str	r3, [sp, #0]
 801888a:	1964      	adds	r4, r4, r5
 801888c:	783b      	ldrb	r3, [r7, #0]
 801888e:	0001      	movs	r1, r0
 8018890:	3b30      	subs	r3, #48	; 0x30
 8018892:	220a      	movs	r2, #10
 8018894:	0030      	movs	r0, r6
 8018896:	3701      	adds	r7, #1
 8018898:	f7ff ff9e 	bl	80187d8 <__multadd>
 801889c:	42a7      	cmp	r7, r4
 801889e:	d1f5      	bne.n	801888c <__s2b+0x38>
 80188a0:	9b00      	ldr	r3, [sp, #0]
 80188a2:	195c      	adds	r4, r3, r5
 80188a4:	3c08      	subs	r4, #8
 80188a6:	002f      	movs	r7, r5
 80188a8:	9b01      	ldr	r3, [sp, #4]
 80188aa:	429f      	cmp	r7, r3
 80188ac:	db06      	blt.n	80188bc <__s2b+0x68>
 80188ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80188b0:	005b      	lsls	r3, r3, #1
 80188b2:	3101      	adds	r1, #1
 80188b4:	e7da      	b.n	801886c <__s2b+0x18>
 80188b6:	340a      	adds	r4, #10
 80188b8:	2509      	movs	r5, #9
 80188ba:	e7f4      	b.n	80188a6 <__s2b+0x52>
 80188bc:	1b63      	subs	r3, r4, r5
 80188be:	5ddb      	ldrb	r3, [r3, r7]
 80188c0:	0001      	movs	r1, r0
 80188c2:	3b30      	subs	r3, #48	; 0x30
 80188c4:	220a      	movs	r2, #10
 80188c6:	0030      	movs	r0, r6
 80188c8:	f7ff ff86 	bl	80187d8 <__multadd>
 80188cc:	3701      	adds	r7, #1
 80188ce:	e7eb      	b.n	80188a8 <__s2b+0x54>

080188d0 <__hi0bits>:
 80188d0:	0003      	movs	r3, r0
 80188d2:	0c02      	lsrs	r2, r0, #16
 80188d4:	2000      	movs	r0, #0
 80188d6:	4282      	cmp	r2, r0
 80188d8:	d101      	bne.n	80188de <__hi0bits+0xe>
 80188da:	041b      	lsls	r3, r3, #16
 80188dc:	3010      	adds	r0, #16
 80188de:	0e1a      	lsrs	r2, r3, #24
 80188e0:	d101      	bne.n	80188e6 <__hi0bits+0x16>
 80188e2:	3008      	adds	r0, #8
 80188e4:	021b      	lsls	r3, r3, #8
 80188e6:	0f1a      	lsrs	r2, r3, #28
 80188e8:	d101      	bne.n	80188ee <__hi0bits+0x1e>
 80188ea:	3004      	adds	r0, #4
 80188ec:	011b      	lsls	r3, r3, #4
 80188ee:	0f9a      	lsrs	r2, r3, #30
 80188f0:	d101      	bne.n	80188f6 <__hi0bits+0x26>
 80188f2:	3002      	adds	r0, #2
 80188f4:	009b      	lsls	r3, r3, #2
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	db03      	blt.n	8018902 <__hi0bits+0x32>
 80188fa:	3001      	adds	r0, #1
 80188fc:	005b      	lsls	r3, r3, #1
 80188fe:	d400      	bmi.n	8018902 <__hi0bits+0x32>
 8018900:	2020      	movs	r0, #32
 8018902:	4770      	bx	lr

08018904 <__lo0bits>:
 8018904:	2207      	movs	r2, #7
 8018906:	6803      	ldr	r3, [r0, #0]
 8018908:	b510      	push	{r4, lr}
 801890a:	0001      	movs	r1, r0
 801890c:	401a      	ands	r2, r3
 801890e:	d00d      	beq.n	801892c <__lo0bits+0x28>
 8018910:	2401      	movs	r4, #1
 8018912:	2000      	movs	r0, #0
 8018914:	4223      	tst	r3, r4
 8018916:	d105      	bne.n	8018924 <__lo0bits+0x20>
 8018918:	3002      	adds	r0, #2
 801891a:	4203      	tst	r3, r0
 801891c:	d003      	beq.n	8018926 <__lo0bits+0x22>
 801891e:	40e3      	lsrs	r3, r4
 8018920:	0020      	movs	r0, r4
 8018922:	600b      	str	r3, [r1, #0]
 8018924:	bd10      	pop	{r4, pc}
 8018926:	089b      	lsrs	r3, r3, #2
 8018928:	600b      	str	r3, [r1, #0]
 801892a:	e7fb      	b.n	8018924 <__lo0bits+0x20>
 801892c:	b29c      	uxth	r4, r3
 801892e:	0010      	movs	r0, r2
 8018930:	2c00      	cmp	r4, #0
 8018932:	d101      	bne.n	8018938 <__lo0bits+0x34>
 8018934:	2010      	movs	r0, #16
 8018936:	0c1b      	lsrs	r3, r3, #16
 8018938:	b2da      	uxtb	r2, r3
 801893a:	2a00      	cmp	r2, #0
 801893c:	d101      	bne.n	8018942 <__lo0bits+0x3e>
 801893e:	3008      	adds	r0, #8
 8018940:	0a1b      	lsrs	r3, r3, #8
 8018942:	071a      	lsls	r2, r3, #28
 8018944:	d101      	bne.n	801894a <__lo0bits+0x46>
 8018946:	3004      	adds	r0, #4
 8018948:	091b      	lsrs	r3, r3, #4
 801894a:	079a      	lsls	r2, r3, #30
 801894c:	d101      	bne.n	8018952 <__lo0bits+0x4e>
 801894e:	3002      	adds	r0, #2
 8018950:	089b      	lsrs	r3, r3, #2
 8018952:	07da      	lsls	r2, r3, #31
 8018954:	d4e8      	bmi.n	8018928 <__lo0bits+0x24>
 8018956:	085b      	lsrs	r3, r3, #1
 8018958:	d001      	beq.n	801895e <__lo0bits+0x5a>
 801895a:	3001      	adds	r0, #1
 801895c:	e7e4      	b.n	8018928 <__lo0bits+0x24>
 801895e:	2020      	movs	r0, #32
 8018960:	e7e0      	b.n	8018924 <__lo0bits+0x20>

08018962 <__i2b>:
 8018962:	b510      	push	{r4, lr}
 8018964:	000c      	movs	r4, r1
 8018966:	2101      	movs	r1, #1
 8018968:	f7ff ff04 	bl	8018774 <_Balloc>
 801896c:	2301      	movs	r3, #1
 801896e:	6144      	str	r4, [r0, #20]
 8018970:	6103      	str	r3, [r0, #16]
 8018972:	bd10      	pop	{r4, pc}

08018974 <__multiply>:
 8018974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018976:	690b      	ldr	r3, [r1, #16]
 8018978:	0014      	movs	r4, r2
 801897a:	6912      	ldr	r2, [r2, #16]
 801897c:	b089      	sub	sp, #36	; 0x24
 801897e:	000d      	movs	r5, r1
 8018980:	4293      	cmp	r3, r2
 8018982:	da01      	bge.n	8018988 <__multiply+0x14>
 8018984:	0025      	movs	r5, r4
 8018986:	000c      	movs	r4, r1
 8018988:	692f      	ldr	r7, [r5, #16]
 801898a:	6926      	ldr	r6, [r4, #16]
 801898c:	6869      	ldr	r1, [r5, #4]
 801898e:	19bb      	adds	r3, r7, r6
 8018990:	9302      	str	r3, [sp, #8]
 8018992:	68ab      	ldr	r3, [r5, #8]
 8018994:	19ba      	adds	r2, r7, r6
 8018996:	4293      	cmp	r3, r2
 8018998:	da00      	bge.n	801899c <__multiply+0x28>
 801899a:	3101      	adds	r1, #1
 801899c:	f7ff feea 	bl	8018774 <_Balloc>
 80189a0:	0002      	movs	r2, r0
 80189a2:	19bb      	adds	r3, r7, r6
 80189a4:	3214      	adds	r2, #20
 80189a6:	009b      	lsls	r3, r3, #2
 80189a8:	18d3      	adds	r3, r2, r3
 80189aa:	469c      	mov	ip, r3
 80189ac:	2100      	movs	r1, #0
 80189ae:	0013      	movs	r3, r2
 80189b0:	9004      	str	r0, [sp, #16]
 80189b2:	4563      	cmp	r3, ip
 80189b4:	d31d      	bcc.n	80189f2 <__multiply+0x7e>
 80189b6:	3514      	adds	r5, #20
 80189b8:	00bf      	lsls	r7, r7, #2
 80189ba:	19eb      	adds	r3, r5, r7
 80189bc:	3414      	adds	r4, #20
 80189be:	00b6      	lsls	r6, r6, #2
 80189c0:	9305      	str	r3, [sp, #20]
 80189c2:	19a3      	adds	r3, r4, r6
 80189c4:	9503      	str	r5, [sp, #12]
 80189c6:	9401      	str	r4, [sp, #4]
 80189c8:	9307      	str	r3, [sp, #28]
 80189ca:	9b07      	ldr	r3, [sp, #28]
 80189cc:	9901      	ldr	r1, [sp, #4]
 80189ce:	4299      	cmp	r1, r3
 80189d0:	d311      	bcc.n	80189f6 <__multiply+0x82>
 80189d2:	9b02      	ldr	r3, [sp, #8]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	dd06      	ble.n	80189e6 <__multiply+0x72>
 80189d8:	2304      	movs	r3, #4
 80189da:	425b      	negs	r3, r3
 80189dc:	449c      	add	ip, r3
 80189de:	4663      	mov	r3, ip
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	d051      	beq.n	8018a8a <__multiply+0x116>
 80189e6:	9b04      	ldr	r3, [sp, #16]
 80189e8:	9a02      	ldr	r2, [sp, #8]
 80189ea:	0018      	movs	r0, r3
 80189ec:	611a      	str	r2, [r3, #16]
 80189ee:	b009      	add	sp, #36	; 0x24
 80189f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80189f2:	c302      	stmia	r3!, {r1}
 80189f4:	e7dd      	b.n	80189b2 <__multiply+0x3e>
 80189f6:	9b01      	ldr	r3, [sp, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	b298      	uxth	r0, r3
 80189fc:	2800      	cmp	r0, #0
 80189fe:	d01c      	beq.n	8018a3a <__multiply+0xc6>
 8018a00:	0015      	movs	r5, r2
 8018a02:	2600      	movs	r6, #0
 8018a04:	9f03      	ldr	r7, [sp, #12]
 8018a06:	cf02      	ldmia	r7!, {r1}
 8018a08:	682c      	ldr	r4, [r5, #0]
 8018a0a:	b28b      	uxth	r3, r1
 8018a0c:	4343      	muls	r3, r0
 8018a0e:	0c09      	lsrs	r1, r1, #16
 8018a10:	4341      	muls	r1, r0
 8018a12:	b2a4      	uxth	r4, r4
 8018a14:	191b      	adds	r3, r3, r4
 8018a16:	199b      	adds	r3, r3, r6
 8018a18:	000e      	movs	r6, r1
 8018a1a:	6829      	ldr	r1, [r5, #0]
 8018a1c:	9506      	str	r5, [sp, #24]
 8018a1e:	0c09      	lsrs	r1, r1, #16
 8018a20:	1871      	adds	r1, r6, r1
 8018a22:	0c1e      	lsrs	r6, r3, #16
 8018a24:	1989      	adds	r1, r1, r6
 8018a26:	0c0e      	lsrs	r6, r1, #16
 8018a28:	b29b      	uxth	r3, r3
 8018a2a:	0409      	lsls	r1, r1, #16
 8018a2c:	430b      	orrs	r3, r1
 8018a2e:	c508      	stmia	r5!, {r3}
 8018a30:	9b05      	ldr	r3, [sp, #20]
 8018a32:	42bb      	cmp	r3, r7
 8018a34:	d8e7      	bhi.n	8018a06 <__multiply+0x92>
 8018a36:	9b06      	ldr	r3, [sp, #24]
 8018a38:	605e      	str	r6, [r3, #4]
 8018a3a:	9b01      	ldr	r3, [sp, #4]
 8018a3c:	681b      	ldr	r3, [r3, #0]
 8018a3e:	0c1d      	lsrs	r5, r3, #16
 8018a40:	d01e      	beq.n	8018a80 <__multiply+0x10c>
 8018a42:	0010      	movs	r0, r2
 8018a44:	2700      	movs	r7, #0
 8018a46:	6813      	ldr	r3, [r2, #0]
 8018a48:	9e03      	ldr	r6, [sp, #12]
 8018a4a:	6831      	ldr	r1, [r6, #0]
 8018a4c:	6804      	ldr	r4, [r0, #0]
 8018a4e:	b289      	uxth	r1, r1
 8018a50:	4369      	muls	r1, r5
 8018a52:	0c24      	lsrs	r4, r4, #16
 8018a54:	1909      	adds	r1, r1, r4
 8018a56:	19c9      	adds	r1, r1, r7
 8018a58:	040f      	lsls	r7, r1, #16
 8018a5a:	b29b      	uxth	r3, r3
 8018a5c:	433b      	orrs	r3, r7
 8018a5e:	6003      	str	r3, [r0, #0]
 8018a60:	ce80      	ldmia	r6!, {r7}
 8018a62:	6843      	ldr	r3, [r0, #4]
 8018a64:	0c3f      	lsrs	r7, r7, #16
 8018a66:	436f      	muls	r7, r5
 8018a68:	b29b      	uxth	r3, r3
 8018a6a:	18fb      	adds	r3, r7, r3
 8018a6c:	0c09      	lsrs	r1, r1, #16
 8018a6e:	185b      	adds	r3, r3, r1
 8018a70:	9905      	ldr	r1, [sp, #20]
 8018a72:	9006      	str	r0, [sp, #24]
 8018a74:	0c1f      	lsrs	r7, r3, #16
 8018a76:	3004      	adds	r0, #4
 8018a78:	42b1      	cmp	r1, r6
 8018a7a:	d8e6      	bhi.n	8018a4a <__multiply+0xd6>
 8018a7c:	9906      	ldr	r1, [sp, #24]
 8018a7e:	604b      	str	r3, [r1, #4]
 8018a80:	9b01      	ldr	r3, [sp, #4]
 8018a82:	3204      	adds	r2, #4
 8018a84:	3304      	adds	r3, #4
 8018a86:	9301      	str	r3, [sp, #4]
 8018a88:	e79f      	b.n	80189ca <__multiply+0x56>
 8018a8a:	9b02      	ldr	r3, [sp, #8]
 8018a8c:	3b01      	subs	r3, #1
 8018a8e:	9302      	str	r3, [sp, #8]
 8018a90:	e79f      	b.n	80189d2 <__multiply+0x5e>
	...

08018a94 <__pow5mult>:
 8018a94:	2303      	movs	r3, #3
 8018a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a98:	4013      	ands	r3, r2
 8018a9a:	0006      	movs	r6, r0
 8018a9c:	000f      	movs	r7, r1
 8018a9e:	0015      	movs	r5, r2
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d008      	beq.n	8018ab6 <__pow5mult+0x22>
 8018aa4:	491a      	ldr	r1, [pc, #104]	; (8018b10 <__pow5mult+0x7c>)
 8018aa6:	3b01      	subs	r3, #1
 8018aa8:	009a      	lsls	r2, r3, #2
 8018aaa:	5852      	ldr	r2, [r2, r1]
 8018aac:	2300      	movs	r3, #0
 8018aae:	0039      	movs	r1, r7
 8018ab0:	f7ff fe92 	bl	80187d8 <__multadd>
 8018ab4:	0007      	movs	r7, r0
 8018ab6:	10ad      	asrs	r5, r5, #2
 8018ab8:	d027      	beq.n	8018b0a <__pow5mult+0x76>
 8018aba:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018abc:	2c00      	cmp	r4, #0
 8018abe:	d107      	bne.n	8018ad0 <__pow5mult+0x3c>
 8018ac0:	4914      	ldr	r1, [pc, #80]	; (8018b14 <__pow5mult+0x80>)
 8018ac2:	0030      	movs	r0, r6
 8018ac4:	f7ff ff4d 	bl	8018962 <__i2b>
 8018ac8:	2300      	movs	r3, #0
 8018aca:	0004      	movs	r4, r0
 8018acc:	64b0      	str	r0, [r6, #72]	; 0x48
 8018ace:	6003      	str	r3, [r0, #0]
 8018ad0:	2301      	movs	r3, #1
 8018ad2:	421d      	tst	r5, r3
 8018ad4:	d00a      	beq.n	8018aec <__pow5mult+0x58>
 8018ad6:	0039      	movs	r1, r7
 8018ad8:	0022      	movs	r2, r4
 8018ada:	0030      	movs	r0, r6
 8018adc:	f7ff ff4a 	bl	8018974 <__multiply>
 8018ae0:	0039      	movs	r1, r7
 8018ae2:	9001      	str	r0, [sp, #4]
 8018ae4:	0030      	movs	r0, r6
 8018ae6:	f7ff fe6d 	bl	80187c4 <_Bfree>
 8018aea:	9f01      	ldr	r7, [sp, #4]
 8018aec:	106d      	asrs	r5, r5, #1
 8018aee:	d00c      	beq.n	8018b0a <__pow5mult+0x76>
 8018af0:	6820      	ldr	r0, [r4, #0]
 8018af2:	2800      	cmp	r0, #0
 8018af4:	d107      	bne.n	8018b06 <__pow5mult+0x72>
 8018af6:	0022      	movs	r2, r4
 8018af8:	0021      	movs	r1, r4
 8018afa:	0030      	movs	r0, r6
 8018afc:	f7ff ff3a 	bl	8018974 <__multiply>
 8018b00:	2300      	movs	r3, #0
 8018b02:	6020      	str	r0, [r4, #0]
 8018b04:	6003      	str	r3, [r0, #0]
 8018b06:	0004      	movs	r4, r0
 8018b08:	e7e2      	b.n	8018ad0 <__pow5mult+0x3c>
 8018b0a:	0038      	movs	r0, r7
 8018b0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b0e:	46c0      	nop			; (mov r8, r8)
 8018b10:	0801c598 	.word	0x0801c598
 8018b14:	00000271 	.word	0x00000271

08018b18 <__lshift>:
 8018b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b1a:	000d      	movs	r5, r1
 8018b1c:	0017      	movs	r7, r2
 8018b1e:	692b      	ldr	r3, [r5, #16]
 8018b20:	1154      	asrs	r4, r2, #5
 8018b22:	b085      	sub	sp, #20
 8018b24:	18e3      	adds	r3, r4, r3
 8018b26:	9301      	str	r3, [sp, #4]
 8018b28:	3301      	adds	r3, #1
 8018b2a:	9300      	str	r3, [sp, #0]
 8018b2c:	6849      	ldr	r1, [r1, #4]
 8018b2e:	68ab      	ldr	r3, [r5, #8]
 8018b30:	9002      	str	r0, [sp, #8]
 8018b32:	9a00      	ldr	r2, [sp, #0]
 8018b34:	4293      	cmp	r3, r2
 8018b36:	db35      	blt.n	8018ba4 <__lshift+0x8c>
 8018b38:	9802      	ldr	r0, [sp, #8]
 8018b3a:	f7ff fe1b 	bl	8018774 <_Balloc>
 8018b3e:	2300      	movs	r3, #0
 8018b40:	0002      	movs	r2, r0
 8018b42:	0006      	movs	r6, r0
 8018b44:	0019      	movs	r1, r3
 8018b46:	3214      	adds	r2, #20
 8018b48:	42a3      	cmp	r3, r4
 8018b4a:	db2e      	blt.n	8018baa <__lshift+0x92>
 8018b4c:	43e3      	mvns	r3, r4
 8018b4e:	17db      	asrs	r3, r3, #31
 8018b50:	401c      	ands	r4, r3
 8018b52:	002b      	movs	r3, r5
 8018b54:	00a4      	lsls	r4, r4, #2
 8018b56:	1914      	adds	r4, r2, r4
 8018b58:	692a      	ldr	r2, [r5, #16]
 8018b5a:	3314      	adds	r3, #20
 8018b5c:	0092      	lsls	r2, r2, #2
 8018b5e:	189a      	adds	r2, r3, r2
 8018b60:	4694      	mov	ip, r2
 8018b62:	221f      	movs	r2, #31
 8018b64:	4017      	ands	r7, r2
 8018b66:	d024      	beq.n	8018bb2 <__lshift+0x9a>
 8018b68:	3201      	adds	r2, #1
 8018b6a:	1bd2      	subs	r2, r2, r7
 8018b6c:	9203      	str	r2, [sp, #12]
 8018b6e:	2200      	movs	r2, #0
 8018b70:	6819      	ldr	r1, [r3, #0]
 8018b72:	0020      	movs	r0, r4
 8018b74:	40b9      	lsls	r1, r7
 8018b76:	430a      	orrs	r2, r1
 8018b78:	c404      	stmia	r4!, {r2}
 8018b7a:	cb04      	ldmia	r3!, {r2}
 8018b7c:	9903      	ldr	r1, [sp, #12]
 8018b7e:	40ca      	lsrs	r2, r1
 8018b80:	459c      	cmp	ip, r3
 8018b82:	d8f5      	bhi.n	8018b70 <__lshift+0x58>
 8018b84:	6042      	str	r2, [r0, #4]
 8018b86:	2a00      	cmp	r2, #0
 8018b88:	d002      	beq.n	8018b90 <__lshift+0x78>
 8018b8a:	9b01      	ldr	r3, [sp, #4]
 8018b8c:	3302      	adds	r3, #2
 8018b8e:	9300      	str	r3, [sp, #0]
 8018b90:	9b00      	ldr	r3, [sp, #0]
 8018b92:	9802      	ldr	r0, [sp, #8]
 8018b94:	3b01      	subs	r3, #1
 8018b96:	6133      	str	r3, [r6, #16]
 8018b98:	0029      	movs	r1, r5
 8018b9a:	f7ff fe13 	bl	80187c4 <_Bfree>
 8018b9e:	0030      	movs	r0, r6
 8018ba0:	b005      	add	sp, #20
 8018ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ba4:	3101      	adds	r1, #1
 8018ba6:	005b      	lsls	r3, r3, #1
 8018ba8:	e7c3      	b.n	8018b32 <__lshift+0x1a>
 8018baa:	0098      	lsls	r0, r3, #2
 8018bac:	5011      	str	r1, [r2, r0]
 8018bae:	3301      	adds	r3, #1
 8018bb0:	e7ca      	b.n	8018b48 <__lshift+0x30>
 8018bb2:	cb04      	ldmia	r3!, {r2}
 8018bb4:	c404      	stmia	r4!, {r2}
 8018bb6:	459c      	cmp	ip, r3
 8018bb8:	d8fb      	bhi.n	8018bb2 <__lshift+0x9a>
 8018bba:	e7e9      	b.n	8018b90 <__lshift+0x78>

08018bbc <__mcmp>:
 8018bbc:	690a      	ldr	r2, [r1, #16]
 8018bbe:	6903      	ldr	r3, [r0, #16]
 8018bc0:	b530      	push	{r4, r5, lr}
 8018bc2:	1a9b      	subs	r3, r3, r2
 8018bc4:	d10d      	bne.n	8018be2 <__mcmp+0x26>
 8018bc6:	0092      	lsls	r2, r2, #2
 8018bc8:	3014      	adds	r0, #20
 8018bca:	3114      	adds	r1, #20
 8018bcc:	1884      	adds	r4, r0, r2
 8018bce:	1889      	adds	r1, r1, r2
 8018bd0:	3c04      	subs	r4, #4
 8018bd2:	3904      	subs	r1, #4
 8018bd4:	6825      	ldr	r5, [r4, #0]
 8018bd6:	680a      	ldr	r2, [r1, #0]
 8018bd8:	4295      	cmp	r5, r2
 8018bda:	d004      	beq.n	8018be6 <__mcmp+0x2a>
 8018bdc:	2301      	movs	r3, #1
 8018bde:	4295      	cmp	r5, r2
 8018be0:	d304      	bcc.n	8018bec <__mcmp+0x30>
 8018be2:	0018      	movs	r0, r3
 8018be4:	bd30      	pop	{r4, r5, pc}
 8018be6:	42a0      	cmp	r0, r4
 8018be8:	d3f2      	bcc.n	8018bd0 <__mcmp+0x14>
 8018bea:	e7fa      	b.n	8018be2 <__mcmp+0x26>
 8018bec:	425b      	negs	r3, r3
 8018bee:	e7f8      	b.n	8018be2 <__mcmp+0x26>

08018bf0 <__mdiff>:
 8018bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bf2:	000d      	movs	r5, r1
 8018bf4:	b085      	sub	sp, #20
 8018bf6:	0007      	movs	r7, r0
 8018bf8:	0011      	movs	r1, r2
 8018bfa:	0028      	movs	r0, r5
 8018bfc:	0014      	movs	r4, r2
 8018bfe:	f7ff ffdd 	bl	8018bbc <__mcmp>
 8018c02:	1e06      	subs	r6, r0, #0
 8018c04:	d108      	bne.n	8018c18 <__mdiff+0x28>
 8018c06:	0001      	movs	r1, r0
 8018c08:	0038      	movs	r0, r7
 8018c0a:	f7ff fdb3 	bl	8018774 <_Balloc>
 8018c0e:	2301      	movs	r3, #1
 8018c10:	6146      	str	r6, [r0, #20]
 8018c12:	6103      	str	r3, [r0, #16]
 8018c14:	b005      	add	sp, #20
 8018c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c18:	2301      	movs	r3, #1
 8018c1a:	9301      	str	r3, [sp, #4]
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	db04      	blt.n	8018c2a <__mdiff+0x3a>
 8018c20:	0023      	movs	r3, r4
 8018c22:	002c      	movs	r4, r5
 8018c24:	001d      	movs	r5, r3
 8018c26:	2300      	movs	r3, #0
 8018c28:	9301      	str	r3, [sp, #4]
 8018c2a:	6861      	ldr	r1, [r4, #4]
 8018c2c:	0038      	movs	r0, r7
 8018c2e:	f7ff fda1 	bl	8018774 <_Balloc>
 8018c32:	002f      	movs	r7, r5
 8018c34:	2200      	movs	r2, #0
 8018c36:	9b01      	ldr	r3, [sp, #4]
 8018c38:	6926      	ldr	r6, [r4, #16]
 8018c3a:	60c3      	str	r3, [r0, #12]
 8018c3c:	3414      	adds	r4, #20
 8018c3e:	00b3      	lsls	r3, r6, #2
 8018c40:	18e3      	adds	r3, r4, r3
 8018c42:	9302      	str	r3, [sp, #8]
 8018c44:	692b      	ldr	r3, [r5, #16]
 8018c46:	3714      	adds	r7, #20
 8018c48:	009b      	lsls	r3, r3, #2
 8018c4a:	18fb      	adds	r3, r7, r3
 8018c4c:	9303      	str	r3, [sp, #12]
 8018c4e:	0003      	movs	r3, r0
 8018c50:	4694      	mov	ip, r2
 8018c52:	3314      	adds	r3, #20
 8018c54:	cc20      	ldmia	r4!, {r5}
 8018c56:	cf04      	ldmia	r7!, {r2}
 8018c58:	9201      	str	r2, [sp, #4]
 8018c5a:	b2aa      	uxth	r2, r5
 8018c5c:	4494      	add	ip, r2
 8018c5e:	466a      	mov	r2, sp
 8018c60:	4661      	mov	r1, ip
 8018c62:	8892      	ldrh	r2, [r2, #4]
 8018c64:	0c2d      	lsrs	r5, r5, #16
 8018c66:	1a8a      	subs	r2, r1, r2
 8018c68:	9901      	ldr	r1, [sp, #4]
 8018c6a:	0c09      	lsrs	r1, r1, #16
 8018c6c:	1a69      	subs	r1, r5, r1
 8018c6e:	1415      	asrs	r5, r2, #16
 8018c70:	1949      	adds	r1, r1, r5
 8018c72:	140d      	asrs	r5, r1, #16
 8018c74:	b292      	uxth	r2, r2
 8018c76:	0409      	lsls	r1, r1, #16
 8018c78:	430a      	orrs	r2, r1
 8018c7a:	601a      	str	r2, [r3, #0]
 8018c7c:	9a03      	ldr	r2, [sp, #12]
 8018c7e:	46ac      	mov	ip, r5
 8018c80:	3304      	adds	r3, #4
 8018c82:	42ba      	cmp	r2, r7
 8018c84:	d8e6      	bhi.n	8018c54 <__mdiff+0x64>
 8018c86:	9902      	ldr	r1, [sp, #8]
 8018c88:	001a      	movs	r2, r3
 8018c8a:	428c      	cmp	r4, r1
 8018c8c:	d305      	bcc.n	8018c9a <__mdiff+0xaa>
 8018c8e:	3a04      	subs	r2, #4
 8018c90:	6813      	ldr	r3, [r2, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d00e      	beq.n	8018cb4 <__mdiff+0xc4>
 8018c96:	6106      	str	r6, [r0, #16]
 8018c98:	e7bc      	b.n	8018c14 <__mdiff+0x24>
 8018c9a:	cc04      	ldmia	r4!, {r2}
 8018c9c:	b291      	uxth	r1, r2
 8018c9e:	4461      	add	r1, ip
 8018ca0:	140d      	asrs	r5, r1, #16
 8018ca2:	0c12      	lsrs	r2, r2, #16
 8018ca4:	1952      	adds	r2, r2, r5
 8018ca6:	1415      	asrs	r5, r2, #16
 8018ca8:	b289      	uxth	r1, r1
 8018caa:	0412      	lsls	r2, r2, #16
 8018cac:	430a      	orrs	r2, r1
 8018cae:	46ac      	mov	ip, r5
 8018cb0:	c304      	stmia	r3!, {r2}
 8018cb2:	e7e8      	b.n	8018c86 <__mdiff+0x96>
 8018cb4:	3e01      	subs	r6, #1
 8018cb6:	e7ea      	b.n	8018c8e <__mdiff+0x9e>

08018cb8 <__ulp>:
 8018cb8:	000b      	movs	r3, r1
 8018cba:	4910      	ldr	r1, [pc, #64]	; (8018cfc <__ulp+0x44>)
 8018cbc:	b510      	push	{r4, lr}
 8018cbe:	4019      	ands	r1, r3
 8018cc0:	4b0f      	ldr	r3, [pc, #60]	; (8018d00 <__ulp+0x48>)
 8018cc2:	18c9      	adds	r1, r1, r3
 8018cc4:	2900      	cmp	r1, #0
 8018cc6:	dd04      	ble.n	8018cd2 <__ulp+0x1a>
 8018cc8:	2200      	movs	r2, #0
 8018cca:	000b      	movs	r3, r1
 8018ccc:	0010      	movs	r0, r2
 8018cce:	0019      	movs	r1, r3
 8018cd0:	bd10      	pop	{r4, pc}
 8018cd2:	4249      	negs	r1, r1
 8018cd4:	1509      	asrs	r1, r1, #20
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	2300      	movs	r3, #0
 8018cda:	2913      	cmp	r1, #19
 8018cdc:	dc04      	bgt.n	8018ce8 <__ulp+0x30>
 8018cde:	2080      	movs	r0, #128	; 0x80
 8018ce0:	0300      	lsls	r0, r0, #12
 8018ce2:	4108      	asrs	r0, r1
 8018ce4:	0003      	movs	r3, r0
 8018ce6:	e7f1      	b.n	8018ccc <__ulp+0x14>
 8018ce8:	3914      	subs	r1, #20
 8018cea:	2001      	movs	r0, #1
 8018cec:	291e      	cmp	r1, #30
 8018cee:	dc02      	bgt.n	8018cf6 <__ulp+0x3e>
 8018cf0:	241f      	movs	r4, #31
 8018cf2:	1a61      	subs	r1, r4, r1
 8018cf4:	4088      	lsls	r0, r1
 8018cf6:	0002      	movs	r2, r0
 8018cf8:	e7e8      	b.n	8018ccc <__ulp+0x14>
 8018cfa:	46c0      	nop			; (mov r8, r8)
 8018cfc:	7ff00000 	.word	0x7ff00000
 8018d00:	fcc00000 	.word	0xfcc00000

08018d04 <__b2d>:
 8018d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d06:	0006      	movs	r6, r0
 8018d08:	6903      	ldr	r3, [r0, #16]
 8018d0a:	3614      	adds	r6, #20
 8018d0c:	009b      	lsls	r3, r3, #2
 8018d0e:	18f3      	adds	r3, r6, r3
 8018d10:	1f1d      	subs	r5, r3, #4
 8018d12:	682c      	ldr	r4, [r5, #0]
 8018d14:	000f      	movs	r7, r1
 8018d16:	0020      	movs	r0, r4
 8018d18:	9301      	str	r3, [sp, #4]
 8018d1a:	f7ff fdd9 	bl	80188d0 <__hi0bits>
 8018d1e:	2320      	movs	r3, #32
 8018d20:	1a1b      	subs	r3, r3, r0
 8018d22:	603b      	str	r3, [r7, #0]
 8018d24:	491c      	ldr	r1, [pc, #112]	; (8018d98 <__b2d+0x94>)
 8018d26:	280a      	cmp	r0, #10
 8018d28:	dc16      	bgt.n	8018d58 <__b2d+0x54>
 8018d2a:	230b      	movs	r3, #11
 8018d2c:	0027      	movs	r7, r4
 8018d2e:	1a1b      	subs	r3, r3, r0
 8018d30:	40df      	lsrs	r7, r3
 8018d32:	4339      	orrs	r1, r7
 8018d34:	469c      	mov	ip, r3
 8018d36:	000b      	movs	r3, r1
 8018d38:	2100      	movs	r1, #0
 8018d3a:	42ae      	cmp	r6, r5
 8018d3c:	d202      	bcs.n	8018d44 <__b2d+0x40>
 8018d3e:	9901      	ldr	r1, [sp, #4]
 8018d40:	3908      	subs	r1, #8
 8018d42:	6809      	ldr	r1, [r1, #0]
 8018d44:	3015      	adds	r0, #21
 8018d46:	4084      	lsls	r4, r0
 8018d48:	4660      	mov	r0, ip
 8018d4a:	40c1      	lsrs	r1, r0
 8018d4c:	430c      	orrs	r4, r1
 8018d4e:	0022      	movs	r2, r4
 8018d50:	0010      	movs	r0, r2
 8018d52:	0019      	movs	r1, r3
 8018d54:	b003      	add	sp, #12
 8018d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d58:	2700      	movs	r7, #0
 8018d5a:	42ae      	cmp	r6, r5
 8018d5c:	d202      	bcs.n	8018d64 <__b2d+0x60>
 8018d5e:	9d01      	ldr	r5, [sp, #4]
 8018d60:	3d08      	subs	r5, #8
 8018d62:	682f      	ldr	r7, [r5, #0]
 8018d64:	380b      	subs	r0, #11
 8018d66:	4684      	mov	ip, r0
 8018d68:	1e03      	subs	r3, r0, #0
 8018d6a:	d012      	beq.n	8018d92 <__b2d+0x8e>
 8018d6c:	409c      	lsls	r4, r3
 8018d6e:	2020      	movs	r0, #32
 8018d70:	4321      	orrs	r1, r4
 8018d72:	003c      	movs	r4, r7
 8018d74:	1ac0      	subs	r0, r0, r3
 8018d76:	40c4      	lsrs	r4, r0
 8018d78:	4321      	orrs	r1, r4
 8018d7a:	000b      	movs	r3, r1
 8018d7c:	2100      	movs	r1, #0
 8018d7e:	42b5      	cmp	r5, r6
 8018d80:	d901      	bls.n	8018d86 <__b2d+0x82>
 8018d82:	3d04      	subs	r5, #4
 8018d84:	6829      	ldr	r1, [r5, #0]
 8018d86:	4664      	mov	r4, ip
 8018d88:	40c1      	lsrs	r1, r0
 8018d8a:	40a7      	lsls	r7, r4
 8018d8c:	430f      	orrs	r7, r1
 8018d8e:	003a      	movs	r2, r7
 8018d90:	e7de      	b.n	8018d50 <__b2d+0x4c>
 8018d92:	4321      	orrs	r1, r4
 8018d94:	000b      	movs	r3, r1
 8018d96:	e7fa      	b.n	8018d8e <__b2d+0x8a>
 8018d98:	3ff00000 	.word	0x3ff00000

08018d9c <__d2b>:
 8018d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d9e:	001d      	movs	r5, r3
 8018da0:	2101      	movs	r1, #1
 8018da2:	0014      	movs	r4, r2
 8018da4:	9f08      	ldr	r7, [sp, #32]
 8018da6:	f7ff fce5 	bl	8018774 <_Balloc>
 8018daa:	032b      	lsls	r3, r5, #12
 8018dac:	006d      	lsls	r5, r5, #1
 8018dae:	0006      	movs	r6, r0
 8018db0:	0b1b      	lsrs	r3, r3, #12
 8018db2:	0d6d      	lsrs	r5, r5, #21
 8018db4:	d124      	bne.n	8018e00 <__d2b+0x64>
 8018db6:	9301      	str	r3, [sp, #4]
 8018db8:	2c00      	cmp	r4, #0
 8018dba:	d027      	beq.n	8018e0c <__d2b+0x70>
 8018dbc:	4668      	mov	r0, sp
 8018dbe:	9400      	str	r4, [sp, #0]
 8018dc0:	f7ff fda0 	bl	8018904 <__lo0bits>
 8018dc4:	9c00      	ldr	r4, [sp, #0]
 8018dc6:	2800      	cmp	r0, #0
 8018dc8:	d01e      	beq.n	8018e08 <__d2b+0x6c>
 8018dca:	9b01      	ldr	r3, [sp, #4]
 8018dcc:	2120      	movs	r1, #32
 8018dce:	001a      	movs	r2, r3
 8018dd0:	1a09      	subs	r1, r1, r0
 8018dd2:	408a      	lsls	r2, r1
 8018dd4:	40c3      	lsrs	r3, r0
 8018dd6:	4322      	orrs	r2, r4
 8018dd8:	6172      	str	r2, [r6, #20]
 8018dda:	9301      	str	r3, [sp, #4]
 8018ddc:	9c01      	ldr	r4, [sp, #4]
 8018dde:	61b4      	str	r4, [r6, #24]
 8018de0:	1e63      	subs	r3, r4, #1
 8018de2:	419c      	sbcs	r4, r3
 8018de4:	3401      	adds	r4, #1
 8018de6:	6134      	str	r4, [r6, #16]
 8018de8:	2d00      	cmp	r5, #0
 8018dea:	d018      	beq.n	8018e1e <__d2b+0x82>
 8018dec:	4b12      	ldr	r3, [pc, #72]	; (8018e38 <__d2b+0x9c>)
 8018dee:	18ed      	adds	r5, r5, r3
 8018df0:	2335      	movs	r3, #53	; 0x35
 8018df2:	182d      	adds	r5, r5, r0
 8018df4:	603d      	str	r5, [r7, #0]
 8018df6:	1a18      	subs	r0, r3, r0
 8018df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dfa:	6018      	str	r0, [r3, #0]
 8018dfc:	0030      	movs	r0, r6
 8018dfe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018e00:	2280      	movs	r2, #128	; 0x80
 8018e02:	0352      	lsls	r2, r2, #13
 8018e04:	4313      	orrs	r3, r2
 8018e06:	e7d6      	b.n	8018db6 <__d2b+0x1a>
 8018e08:	6174      	str	r4, [r6, #20]
 8018e0a:	e7e7      	b.n	8018ddc <__d2b+0x40>
 8018e0c:	a801      	add	r0, sp, #4
 8018e0e:	f7ff fd79 	bl	8018904 <__lo0bits>
 8018e12:	2401      	movs	r4, #1
 8018e14:	9b01      	ldr	r3, [sp, #4]
 8018e16:	6134      	str	r4, [r6, #16]
 8018e18:	6173      	str	r3, [r6, #20]
 8018e1a:	3020      	adds	r0, #32
 8018e1c:	e7e4      	b.n	8018de8 <__d2b+0x4c>
 8018e1e:	4b07      	ldr	r3, [pc, #28]	; (8018e3c <__d2b+0xa0>)
 8018e20:	18c0      	adds	r0, r0, r3
 8018e22:	4b07      	ldr	r3, [pc, #28]	; (8018e40 <__d2b+0xa4>)
 8018e24:	6038      	str	r0, [r7, #0]
 8018e26:	18e3      	adds	r3, r4, r3
 8018e28:	009b      	lsls	r3, r3, #2
 8018e2a:	18f3      	adds	r3, r6, r3
 8018e2c:	6958      	ldr	r0, [r3, #20]
 8018e2e:	f7ff fd4f 	bl	80188d0 <__hi0bits>
 8018e32:	0164      	lsls	r4, r4, #5
 8018e34:	1a20      	subs	r0, r4, r0
 8018e36:	e7df      	b.n	8018df8 <__d2b+0x5c>
 8018e38:	fffffbcd 	.word	0xfffffbcd
 8018e3c:	fffffbce 	.word	0xfffffbce
 8018e40:	3fffffff 	.word	0x3fffffff

08018e44 <__ratio>:
 8018e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e46:	b085      	sub	sp, #20
 8018e48:	000f      	movs	r7, r1
 8018e4a:	a902      	add	r1, sp, #8
 8018e4c:	0006      	movs	r6, r0
 8018e4e:	f7ff ff59 	bl	8018d04 <__b2d>
 8018e52:	0004      	movs	r4, r0
 8018e54:	000d      	movs	r5, r1
 8018e56:	0038      	movs	r0, r7
 8018e58:	a903      	add	r1, sp, #12
 8018e5a:	9400      	str	r4, [sp, #0]
 8018e5c:	9501      	str	r5, [sp, #4]
 8018e5e:	f7ff ff51 	bl	8018d04 <__b2d>
 8018e62:	6936      	ldr	r6, [r6, #16]
 8018e64:	693f      	ldr	r7, [r7, #16]
 8018e66:	0002      	movs	r2, r0
 8018e68:	1bf7      	subs	r7, r6, r7
 8018e6a:	017e      	lsls	r6, r7, #5
 8018e6c:	46b4      	mov	ip, r6
 8018e6e:	9f03      	ldr	r7, [sp, #12]
 8018e70:	9e02      	ldr	r6, [sp, #8]
 8018e72:	000b      	movs	r3, r1
 8018e74:	1bf6      	subs	r6, r6, r7
 8018e76:	4466      	add	r6, ip
 8018e78:	0537      	lsls	r7, r6, #20
 8018e7a:	2e00      	cmp	r6, #0
 8018e7c:	dd07      	ble.n	8018e8e <__ratio+0x4a>
 8018e7e:	1979      	adds	r1, r7, r5
 8018e80:	9101      	str	r1, [sp, #4]
 8018e82:	9800      	ldr	r0, [sp, #0]
 8018e84:	9901      	ldr	r1, [sp, #4]
 8018e86:	f7e8 fbcb 	bl	8001620 <__aeabi_ddiv>
 8018e8a:	b005      	add	sp, #20
 8018e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e8e:	1bcb      	subs	r3, r1, r7
 8018e90:	e7f7      	b.n	8018e82 <__ratio+0x3e>

08018e92 <__copybits>:
 8018e92:	0013      	movs	r3, r2
 8018e94:	3901      	subs	r1, #1
 8018e96:	b510      	push	{r4, lr}
 8018e98:	1149      	asrs	r1, r1, #5
 8018e9a:	6912      	ldr	r2, [r2, #16]
 8018e9c:	3101      	adds	r1, #1
 8018e9e:	0089      	lsls	r1, r1, #2
 8018ea0:	3314      	adds	r3, #20
 8018ea2:	0092      	lsls	r2, r2, #2
 8018ea4:	1841      	adds	r1, r0, r1
 8018ea6:	189a      	adds	r2, r3, r2
 8018ea8:	429a      	cmp	r2, r3
 8018eaa:	d803      	bhi.n	8018eb4 <__copybits+0x22>
 8018eac:	2300      	movs	r3, #0
 8018eae:	4281      	cmp	r1, r0
 8018eb0:	d803      	bhi.n	8018eba <__copybits+0x28>
 8018eb2:	bd10      	pop	{r4, pc}
 8018eb4:	cb10      	ldmia	r3!, {r4}
 8018eb6:	c010      	stmia	r0!, {r4}
 8018eb8:	e7f6      	b.n	8018ea8 <__copybits+0x16>
 8018eba:	c008      	stmia	r0!, {r3}
 8018ebc:	e7f7      	b.n	8018eae <__copybits+0x1c>

08018ebe <__any_on>:
 8018ebe:	0002      	movs	r2, r0
 8018ec0:	6900      	ldr	r0, [r0, #16]
 8018ec2:	b510      	push	{r4, lr}
 8018ec4:	3214      	adds	r2, #20
 8018ec6:	114b      	asrs	r3, r1, #5
 8018ec8:	4298      	cmp	r0, r3
 8018eca:	db12      	blt.n	8018ef2 <__any_on+0x34>
 8018ecc:	dd0b      	ble.n	8018ee6 <__any_on+0x28>
 8018ece:	201f      	movs	r0, #31
 8018ed0:	4001      	ands	r1, r0
 8018ed2:	d008      	beq.n	8018ee6 <__any_on+0x28>
 8018ed4:	0098      	lsls	r0, r3, #2
 8018ed6:	5884      	ldr	r4, [r0, r2]
 8018ed8:	0020      	movs	r0, r4
 8018eda:	40c8      	lsrs	r0, r1
 8018edc:	4088      	lsls	r0, r1
 8018ede:	0001      	movs	r1, r0
 8018ee0:	2001      	movs	r0, #1
 8018ee2:	428c      	cmp	r4, r1
 8018ee4:	d104      	bne.n	8018ef0 <__any_on+0x32>
 8018ee6:	009b      	lsls	r3, r3, #2
 8018ee8:	18d3      	adds	r3, r2, r3
 8018eea:	4293      	cmp	r3, r2
 8018eec:	d803      	bhi.n	8018ef6 <__any_on+0x38>
 8018eee:	2000      	movs	r0, #0
 8018ef0:	bd10      	pop	{r4, pc}
 8018ef2:	0003      	movs	r3, r0
 8018ef4:	e7f7      	b.n	8018ee6 <__any_on+0x28>
 8018ef6:	3b04      	subs	r3, #4
 8018ef8:	6819      	ldr	r1, [r3, #0]
 8018efa:	2900      	cmp	r1, #0
 8018efc:	d0f5      	beq.n	8018eea <__any_on+0x2c>
 8018efe:	2001      	movs	r0, #1
 8018f00:	e7f6      	b.n	8018ef0 <__any_on+0x32>
	...

08018f04 <frexp>:
 8018f04:	b570      	push	{r4, r5, r6, lr}
 8018f06:	0014      	movs	r4, r2
 8018f08:	2500      	movs	r5, #0
 8018f0a:	6025      	str	r5, [r4, #0]
 8018f0c:	4d10      	ldr	r5, [pc, #64]	; (8018f50 <frexp+0x4c>)
 8018f0e:	004b      	lsls	r3, r1, #1
 8018f10:	000a      	movs	r2, r1
 8018f12:	085b      	lsrs	r3, r3, #1
 8018f14:	42ab      	cmp	r3, r5
 8018f16:	dc1a      	bgt.n	8018f4e <frexp+0x4a>
 8018f18:	001d      	movs	r5, r3
 8018f1a:	4305      	orrs	r5, r0
 8018f1c:	d017      	beq.n	8018f4e <frexp+0x4a>
 8018f1e:	4d0d      	ldr	r5, [pc, #52]	; (8018f54 <frexp+0x50>)
 8018f20:	42ab      	cmp	r3, r5
 8018f22:	dc09      	bgt.n	8018f38 <frexp+0x34>
 8018f24:	2200      	movs	r2, #0
 8018f26:	4b0c      	ldr	r3, [pc, #48]	; (8018f58 <frexp+0x54>)
 8018f28:	f7e8 ff84 	bl	8001e34 <__aeabi_dmul>
 8018f2c:	2536      	movs	r5, #54	; 0x36
 8018f2e:	000a      	movs	r2, r1
 8018f30:	004b      	lsls	r3, r1, #1
 8018f32:	426d      	negs	r5, r5
 8018f34:	085b      	lsrs	r3, r3, #1
 8018f36:	6025      	str	r5, [r4, #0]
 8018f38:	4d08      	ldr	r5, [pc, #32]	; (8018f5c <frexp+0x58>)
 8018f3a:	151b      	asrs	r3, r3, #20
 8018f3c:	195b      	adds	r3, r3, r5
 8018f3e:	6825      	ldr	r5, [r4, #0]
 8018f40:	18eb      	adds	r3, r5, r3
 8018f42:	6023      	str	r3, [r4, #0]
 8018f44:	4b06      	ldr	r3, [pc, #24]	; (8018f60 <frexp+0x5c>)
 8018f46:	401a      	ands	r2, r3
 8018f48:	4b06      	ldr	r3, [pc, #24]	; (8018f64 <frexp+0x60>)
 8018f4a:	4313      	orrs	r3, r2
 8018f4c:	0019      	movs	r1, r3
 8018f4e:	bd70      	pop	{r4, r5, r6, pc}
 8018f50:	7fefffff 	.word	0x7fefffff
 8018f54:	000fffff 	.word	0x000fffff
 8018f58:	43500000 	.word	0x43500000
 8018f5c:	fffffc02 	.word	0xfffffc02
 8018f60:	800fffff 	.word	0x800fffff
 8018f64:	3fe00000 	.word	0x3fe00000

08018f68 <__ssprint_r>:
 8018f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f6a:	6893      	ldr	r3, [r2, #8]
 8018f6c:	b087      	sub	sp, #28
 8018f6e:	9002      	str	r0, [sp, #8]
 8018f70:	000c      	movs	r4, r1
 8018f72:	0016      	movs	r6, r2
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d063      	beq.n	8019040 <__ssprint_r+0xd8>
 8018f78:	6813      	ldr	r3, [r2, #0]
 8018f7a:	9303      	str	r3, [sp, #12]
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	001f      	movs	r7, r3
 8018f80:	9305      	str	r3, [sp, #20]
 8018f82:	2f00      	cmp	r7, #0
 8018f84:	d02e      	beq.n	8018fe4 <__ssprint_r+0x7c>
 8018f86:	68a5      	ldr	r5, [r4, #8]
 8018f88:	42af      	cmp	r7, r5
 8018f8a:	d347      	bcc.n	801901c <__ssprint_r+0xb4>
 8018f8c:	2390      	movs	r3, #144	; 0x90
 8018f8e:	89a2      	ldrh	r2, [r4, #12]
 8018f90:	00db      	lsls	r3, r3, #3
 8018f92:	421a      	tst	r2, r3
 8018f94:	d042      	beq.n	801901c <__ssprint_r+0xb4>
 8018f96:	2003      	movs	r0, #3
 8018f98:	6921      	ldr	r1, [r4, #16]
 8018f9a:	6823      	ldr	r3, [r4, #0]
 8018f9c:	1a5b      	subs	r3, r3, r1
 8018f9e:	9304      	str	r3, [sp, #16]
 8018fa0:	6963      	ldr	r3, [r4, #20]
 8018fa2:	4343      	muls	r3, r0
 8018fa4:	0fd8      	lsrs	r0, r3, #31
 8018fa6:	18c3      	adds	r3, r0, r3
 8018fa8:	105b      	asrs	r3, r3, #1
 8018faa:	9301      	str	r3, [sp, #4]
 8018fac:	9b04      	ldr	r3, [sp, #16]
 8018fae:	9801      	ldr	r0, [sp, #4]
 8018fb0:	3301      	adds	r3, #1
 8018fb2:	19db      	adds	r3, r3, r7
 8018fb4:	4283      	cmp	r3, r0
 8018fb6:	d900      	bls.n	8018fba <__ssprint_r+0x52>
 8018fb8:	9301      	str	r3, [sp, #4]
 8018fba:	0553      	lsls	r3, r2, #21
 8018fbc:	d544      	bpl.n	8019048 <__ssprint_r+0xe0>
 8018fbe:	9901      	ldr	r1, [sp, #4]
 8018fc0:	9802      	ldr	r0, [sp, #8]
 8018fc2:	f7fb fa85 	bl	80144d0 <_malloc_r>
 8018fc6:	1e05      	subs	r5, r0, #0
 8018fc8:	d114      	bne.n	8018ff4 <__ssprint_r+0x8c>
 8018fca:	230c      	movs	r3, #12
 8018fcc:	9a02      	ldr	r2, [sp, #8]
 8018fce:	2001      	movs	r0, #1
 8018fd0:	6013      	str	r3, [r2, #0]
 8018fd2:	2340      	movs	r3, #64	; 0x40
 8018fd4:	89a2      	ldrh	r2, [r4, #12]
 8018fd6:	4240      	negs	r0, r0
 8018fd8:	4313      	orrs	r3, r2
 8018fda:	81a3      	strh	r3, [r4, #12]
 8018fdc:	2300      	movs	r3, #0
 8018fde:	60b3      	str	r3, [r6, #8]
 8018fe0:	6073      	str	r3, [r6, #4]
 8018fe2:	e02f      	b.n	8019044 <__ssprint_r+0xdc>
 8018fe4:	9b03      	ldr	r3, [sp, #12]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	9305      	str	r3, [sp, #20]
 8018fea:	9b03      	ldr	r3, [sp, #12]
 8018fec:	685f      	ldr	r7, [r3, #4]
 8018fee:	3308      	adds	r3, #8
 8018ff0:	9303      	str	r3, [sp, #12]
 8018ff2:	e7c6      	b.n	8018f82 <__ssprint_r+0x1a>
 8018ff4:	9a04      	ldr	r2, [sp, #16]
 8018ff6:	6921      	ldr	r1, [r4, #16]
 8018ff8:	f7fb fca3 	bl	8014942 <memcpy>
 8018ffc:	89a3      	ldrh	r3, [r4, #12]
 8018ffe:	4a18      	ldr	r2, [pc, #96]	; (8019060 <__ssprint_r+0xf8>)
 8019000:	401a      	ands	r2, r3
 8019002:	2380      	movs	r3, #128	; 0x80
 8019004:	4313      	orrs	r3, r2
 8019006:	81a3      	strh	r3, [r4, #12]
 8019008:	9b04      	ldr	r3, [sp, #16]
 801900a:	6125      	str	r5, [r4, #16]
 801900c:	18ed      	adds	r5, r5, r3
 801900e:	6025      	str	r5, [r4, #0]
 8019010:	003d      	movs	r5, r7
 8019012:	9b01      	ldr	r3, [sp, #4]
 8019014:	9a04      	ldr	r2, [sp, #16]
 8019016:	6163      	str	r3, [r4, #20]
 8019018:	1a9b      	subs	r3, r3, r2
 801901a:	60a3      	str	r3, [r4, #8]
 801901c:	42bd      	cmp	r5, r7
 801901e:	d900      	bls.n	8019022 <__ssprint_r+0xba>
 8019020:	003d      	movs	r5, r7
 8019022:	002a      	movs	r2, r5
 8019024:	9905      	ldr	r1, [sp, #20]
 8019026:	6820      	ldr	r0, [r4, #0]
 8019028:	f7ff fb91 	bl	801874e <memmove>
 801902c:	68a3      	ldr	r3, [r4, #8]
 801902e:	1b5b      	subs	r3, r3, r5
 8019030:	60a3      	str	r3, [r4, #8]
 8019032:	6823      	ldr	r3, [r4, #0]
 8019034:	195d      	adds	r5, r3, r5
 8019036:	68b3      	ldr	r3, [r6, #8]
 8019038:	6025      	str	r5, [r4, #0]
 801903a:	1bdb      	subs	r3, r3, r7
 801903c:	60b3      	str	r3, [r6, #8]
 801903e:	d1d1      	bne.n	8018fe4 <__ssprint_r+0x7c>
 8019040:	2000      	movs	r0, #0
 8019042:	6070      	str	r0, [r6, #4]
 8019044:	b007      	add	sp, #28
 8019046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019048:	9a01      	ldr	r2, [sp, #4]
 801904a:	9802      	ldr	r0, [sp, #8]
 801904c:	f7fb fcbe 	bl	80149cc <_realloc_r>
 8019050:	1e05      	subs	r5, r0, #0
 8019052:	d1d9      	bne.n	8019008 <__ssprint_r+0xa0>
 8019054:	6921      	ldr	r1, [r4, #16]
 8019056:	9802      	ldr	r0, [sp, #8]
 8019058:	f7fe ff78 	bl	8017f4c <_free_r>
 801905c:	e7b5      	b.n	8018fca <__ssprint_r+0x62>
 801905e:	46c0      	nop			; (mov r8, r8)
 8019060:	fffffb7f 	.word	0xfffffb7f

08019064 <__register_exitproc>:
 8019064:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019066:	4d29      	ldr	r5, [pc, #164]	; (801910c <__register_exitproc+0xa8>)
 8019068:	0006      	movs	r6, r0
 801906a:	6828      	ldr	r0, [r5, #0]
 801906c:	9301      	str	r3, [sp, #4]
 801906e:	9100      	str	r1, [sp, #0]
 8019070:	0017      	movs	r7, r2
 8019072:	f7ff fb5f 	bl	8018734 <__retarget_lock_acquire_recursive>
 8019076:	4b26      	ldr	r3, [pc, #152]	; (8019110 <__register_exitproc+0xac>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	001c      	movs	r4, r3
 801907c:	34fc      	adds	r4, #252	; 0xfc
 801907e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8019080:	2800      	cmp	r0, #0
 8019082:	d103      	bne.n	801908c <__register_exitproc+0x28>
 8019084:	334d      	adds	r3, #77	; 0x4d
 8019086:	33ff      	adds	r3, #255	; 0xff
 8019088:	0018      	movs	r0, r3
 801908a:	64e3      	str	r3, [r4, #76]	; 0x4c
 801908c:	6843      	ldr	r3, [r0, #4]
 801908e:	2b1f      	cmp	r3, #31
 8019090:	dd18      	ble.n	80190c4 <__register_exitproc+0x60>
 8019092:	4b20      	ldr	r3, [pc, #128]	; (8019114 <__register_exitproc+0xb0>)
 8019094:	2b00      	cmp	r3, #0
 8019096:	d105      	bne.n	80190a4 <__register_exitproc+0x40>
 8019098:	6828      	ldr	r0, [r5, #0]
 801909a:	f7ff fb4c 	bl	8018736 <__retarget_lock_release_recursive>
 801909e:	2001      	movs	r0, #1
 80190a0:	4240      	negs	r0, r0
 80190a2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80190a4:	20c8      	movs	r0, #200	; 0xc8
 80190a6:	0040      	lsls	r0, r0, #1
 80190a8:	f7fb f9fe 	bl	80144a8 <malloc>
 80190ac:	2800      	cmp	r0, #0
 80190ae:	d0f3      	beq.n	8019098 <__register_exitproc+0x34>
 80190b0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80190b2:	2300      	movs	r3, #0
 80190b4:	6002      	str	r2, [r0, #0]
 80190b6:	22c4      	movs	r2, #196	; 0xc4
 80190b8:	0052      	lsls	r2, r2, #1
 80190ba:	6043      	str	r3, [r0, #4]
 80190bc:	64e0      	str	r0, [r4, #76]	; 0x4c
 80190be:	5083      	str	r3, [r0, r2]
 80190c0:	3204      	adds	r2, #4
 80190c2:	5083      	str	r3, [r0, r2]
 80190c4:	6843      	ldr	r3, [r0, #4]
 80190c6:	2e00      	cmp	r6, #0
 80190c8:	d014      	beq.n	80190f4 <__register_exitproc+0x90>
 80190ca:	009a      	lsls	r2, r3, #2
 80190cc:	1882      	adds	r2, r0, r2
 80190ce:	0011      	movs	r1, r2
 80190d0:	3188      	adds	r1, #136	; 0x88
 80190d2:	600f      	str	r7, [r1, #0]
 80190d4:	2101      	movs	r1, #1
 80190d6:	0004      	movs	r4, r0
 80190d8:	4099      	lsls	r1, r3
 80190da:	3485      	adds	r4, #133	; 0x85
 80190dc:	34ff      	adds	r4, #255	; 0xff
 80190de:	6865      	ldr	r5, [r4, #4]
 80190e0:	32fc      	adds	r2, #252	; 0xfc
 80190e2:	430d      	orrs	r5, r1
 80190e4:	6065      	str	r5, [r4, #4]
 80190e6:	9d01      	ldr	r5, [sp, #4]
 80190e8:	60d5      	str	r5, [r2, #12]
 80190ea:	2e02      	cmp	r6, #2
 80190ec:	d102      	bne.n	80190f4 <__register_exitproc+0x90>
 80190ee:	68a2      	ldr	r2, [r4, #8]
 80190f0:	4311      	orrs	r1, r2
 80190f2:	60a1      	str	r1, [r4, #8]
 80190f4:	1c5a      	adds	r2, r3, #1
 80190f6:	6042      	str	r2, [r0, #4]
 80190f8:	3302      	adds	r3, #2
 80190fa:	9a00      	ldr	r2, [sp, #0]
 80190fc:	009b      	lsls	r3, r3, #2
 80190fe:	501a      	str	r2, [r3, r0]
 8019100:	4b02      	ldr	r3, [pc, #8]	; (801910c <__register_exitproc+0xa8>)
 8019102:	6818      	ldr	r0, [r3, #0]
 8019104:	f7ff fb17 	bl	8018736 <__retarget_lock_release_recursive>
 8019108:	2000      	movs	r0, #0
 801910a:	e7ca      	b.n	80190a2 <__register_exitproc+0x3e>
 801910c:	20000ac4 	.word	0x20000ac4
 8019110:	0801c2e0 	.word	0x0801c2e0
 8019114:	080144a9 	.word	0x080144a9

08019118 <_calloc_r>:
 8019118:	b510      	push	{r4, lr}
 801911a:	4351      	muls	r1, r2
 801911c:	f7fb f9d8 	bl	80144d0 <_malloc_r>
 8019120:	1e04      	subs	r4, r0, #0
 8019122:	d01a      	beq.n	801915a <_calloc_r+0x42>
 8019124:	0003      	movs	r3, r0
 8019126:	3b08      	subs	r3, #8
 8019128:	685a      	ldr	r2, [r3, #4]
 801912a:	2303      	movs	r3, #3
 801912c:	439a      	bics	r2, r3
 801912e:	3a04      	subs	r2, #4
 8019130:	2a24      	cmp	r2, #36	; 0x24
 8019132:	d819      	bhi.n	8019168 <_calloc_r+0x50>
 8019134:	0003      	movs	r3, r0
 8019136:	2a13      	cmp	r2, #19
 8019138:	d90b      	bls.n	8019152 <_calloc_r+0x3a>
 801913a:	2100      	movs	r1, #0
 801913c:	3308      	adds	r3, #8
 801913e:	6001      	str	r1, [r0, #0]
 8019140:	6041      	str	r1, [r0, #4]
 8019142:	2a1b      	cmp	r2, #27
 8019144:	d905      	bls.n	8019152 <_calloc_r+0x3a>
 8019146:	6081      	str	r1, [r0, #8]
 8019148:	60c1      	str	r1, [r0, #12]
 801914a:	2a24      	cmp	r2, #36	; 0x24
 801914c:	d007      	beq.n	801915e <_calloc_r+0x46>
 801914e:	0003      	movs	r3, r0
 8019150:	3310      	adds	r3, #16
 8019152:	2200      	movs	r2, #0
 8019154:	601a      	str	r2, [r3, #0]
 8019156:	605a      	str	r2, [r3, #4]
 8019158:	609a      	str	r2, [r3, #8]
 801915a:	0020      	movs	r0, r4
 801915c:	bd10      	pop	{r4, pc}
 801915e:	0003      	movs	r3, r0
 8019160:	6101      	str	r1, [r0, #16]
 8019162:	3318      	adds	r3, #24
 8019164:	6141      	str	r1, [r0, #20]
 8019166:	e7f4      	b.n	8019152 <_calloc_r+0x3a>
 8019168:	2100      	movs	r1, #0
 801916a:	f7fb fbf3 	bl	8014954 <memset>
 801916e:	e7f4      	b.n	801915a <_calloc_r+0x42>

08019170 <_sbrk>:
 8019170:	4b05      	ldr	r3, [pc, #20]	; (8019188 <_sbrk+0x18>)
 8019172:	0002      	movs	r2, r0
 8019174:	6819      	ldr	r1, [r3, #0]
 8019176:	2900      	cmp	r1, #0
 8019178:	d101      	bne.n	801917e <_sbrk+0xe>
 801917a:	4904      	ldr	r1, [pc, #16]	; (801918c <_sbrk+0x1c>)
 801917c:	6019      	str	r1, [r3, #0]
 801917e:	6818      	ldr	r0, [r3, #0]
 8019180:	1882      	adds	r2, r0, r2
 8019182:	601a      	str	r2, [r3, #0]
 8019184:	4770      	bx	lr
 8019186:	46c0      	nop			; (mov r8, r8)
 8019188:	20006dcc 	.word	0x20006dcc
 801918c:	20007400 	.word	0x20007400

08019190 <_init>:
 8019190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019192:	46c0      	nop			; (mov r8, r8)
 8019194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019196:	bc08      	pop	{r3}
 8019198:	469e      	mov	lr, r3
 801919a:	4770      	bx	lr

0801919c <_fini>:
 801919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801919e:	46c0      	nop			; (mov r8, r8)
 80191a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191a2:	bc08      	pop	{r3}
 80191a4:	469e      	mov	lr, r3
 80191a6:	4770      	bx	lr
