
H0AR9x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e38  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003354  08018ef8  08018ef8  00028ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c24c  0801c24c  00030ac8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c24c  0801c24c  0002c24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c254  0801c254  00030ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c254  0801c254  0002c254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c25c  0801c25c  0002c25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000001c  20000000  0801c260  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000aa8  20000020  0801c27c  00030020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006938  20000ac8  0801cd24  00030ac8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20007400  0801cd24  00037400  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a029  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009184  00000000  00000000  0008ab19  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d3f1  00000000  00000000  00093c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001f90  00000000  00000000  000b1090  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000023b0  00000000  00000000  000b3020  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017e4c  00000000  00000000  000b53d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b243  00000000  00000000  000cd21c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d845f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b88  00000000  00000000  000d84dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ac8 	.word	0x20000ac8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08018edc 	.word	0x08018edc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000acc 	.word	0x20000acc
 8000100:	08018edc 	.word	0x08018edc

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08018f2c 	.word	0x08018f2c
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08018f6c 	.word	0x08018f6c
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	08018fac 	.word	0x08018fac
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <LoadROtopology+0x94>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadROtopology+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d033      	beq.n	8002d9c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d36:	d039      	beq.n	8002dac <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d3a:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <LoadROtopology+0xa0>)
 8002d3e:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d42:	781e      	ldrb	r6, [r3, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d035      	beq.n	8002db4 <LoadROtopology+0x90>
 8002d48:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002d4a:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	1dd9      	adds	r1, r3, #7
 8002d50:	2300      	movs	r3, #0
 8002d52:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d54:	4d1c      	ldr	r5, [pc, #112]	; (8002dc8 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d56:	4663      	mov	r3, ip
 8002d58:	700b      	strb	r3, [r1, #0]
 8002d5a:	780b      	ldrb	r3, [r1, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d815      	bhi.n	8002d8e <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	0098      	lsls	r0, r3, #2
 8002d66:	18c0      	adds	r0, r0, r3
 8002d68:	0040      	lsls	r0, r0, #1
 8002d6a:	18c0      	adds	r0, r0, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LoadROtopology+0x94>)
 8002d6e:	18d7      	adds	r7, r2, r3
 8002d70:	780b      	ldrb	r3, [r1, #0]
 8002d72:	883f      	ldrh	r7, [r7, #0]
 8002d74:	181b      	adds	r3, r3, r0
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002d7a:	3202      	adds	r2, #2
 8002d7c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d7e:	780b      	ldrb	r3, [r1, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	700b      	strb	r3, [r1, #0]
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d9ee      	bls.n	8002d6c <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	42b4      	cmp	r4, r6
 8002d94:	d9df      	bls.n	8002d56 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoadROtopology+0xa0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	e7f5      	b.n	8002d98 <LoadROtopology+0x74>
			N =1;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LoadROtopology+0x9c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c3      	b.n	8002d3c <LoadROtopology+0x18>
	return result;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7ef      	b.n	8002d98 <LoadROtopology+0x74>
 8002db8:	0801d800 	.word	0x0801d800
 8002dbc:	0000ffff 	.word	0x0000ffff
 8002dc0:	20000044 	.word	0x20000044
 8002dc4:	200010ea 	.word	0x200010ea
 8002dc8:	20000aec 	.word	0x20000aec

08002dcc <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoadEEportsDir+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002dd2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dd8:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoadEEportsDir+0x44>)
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f009 faf2 	bl	800c3c4 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002de0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002de2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002de4:	4f09      	ldr	r7, [pc, #36]	; (8002e0c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002de6:	4e0a      	ldr	r6, [pc, #40]	; (8002e10 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d30a      	bcc.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002df2:	1e61      	subs	r1, r4, #1
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	1989      	adds	r1, r1, r6
 8002df8:	1c60      	adds	r0, r4, #1
 8002dfa:	f009 fae3 	bl	800c3c4 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002dfe:	1ca3      	adds	r3, r4, #2
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	ddf1      	ble.n	8002de8 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7ef      	b.n	8002de8 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e08:	0028      	movs	r0, r5
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	20000044 	.word	0x20000044
 8002e10:	20007358 	.word	0x20007358

08002e14 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46de      	mov	lr, fp
 8002e18:	4657      	mov	r7, sl
 8002e1a:	464e      	mov	r6, r9
 8002e1c:	4645      	mov	r5, r8
 8002e1e:	b5e0      	push	{r5, r6, r7, lr}
 8002e20:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e22:	466b      	mov	r3, sp
 8002e24:	2200      	movs	r2, #0
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <LoadEEalias+0x7c>)
 8002e2e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e30:	469b      	mov	fp, r3
 8002e32:	e00c      	b.n	8002e4e <LoadEEalias+0x3a>
 8002e34:	464b      	mov	r3, r9
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	444b      	add	r3, r9
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	445b      	add	r3, fp
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e42:	3701      	adds	r7, #1
 8002e44:	b2ff      	uxtb	r7, r7
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <LoadEEalias+0x80>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d317      	bcc.n	8002e7e <LoadEEalias+0x6a>
 8002e4e:	00bd      	lsls	r5, r7, #2
 8002e50:	19ed      	adds	r5, r5, r7
 8002e52:	006d      	lsls	r5, r5, #1
 8002e54:	4455      	add	r5, sl
 8002e56:	1d63      	adds	r3, r4, #5
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e5c:	466b      	mov	r3, sp
 8002e5e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002e60:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e62:	0031      	movs	r1, r6
 8002e64:	0020      	movs	r0, r4
 8002e66:	f009 faad 	bl	800c3c4 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e6a:	8833      	ldrh	r3, [r6, #0]
 8002e6c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	702b      	strb	r3, [r5, #0]
 8002e72:	3401      	adds	r4, #1
 8002e74:	b2a4      	uxth	r4, r4
 8002e76:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e78:	45a0      	cmp	r8, r4
 8002e7a:	d1f2      	bne.n	8002e62 <LoadEEalias+0x4e>
 8002e7c:	e7da      	b.n	8002e34 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	b003      	add	sp, #12
 8002e82:	bc3c      	pop	{r2, r3, r4, r5}
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	46ab      	mov	fp, r5
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000fdc 	.word	0x20000fdc
 8002e94:	20000044 	.word	0x20000044

08002e98 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	46d6      	mov	lr, sl
 8002e9c:	464f      	mov	r7, r9
 8002e9e:	4646      	mov	r6, r8
 8002ea0:	b5c0      	push	{r6, r7, lr}
 8002ea2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <LoadEEgroup+0x9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002eb2:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	4e20      	ldr	r6, [pc, #128]	; (8002f38 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002eb6:	4c1f      	ldr	r4, [pc, #124]	; (8002f34 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb8:	b2e9      	uxtb	r1, r5
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	1871      	adds	r1, r6, r1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	30cb      	adds	r0, #203	; 0xcb
 8002ec2:	b280      	uxth	r0, r0
 8002ec4:	f009 fa7e 	bl	800c3c4 <EE_ReadVariable>
		add++;
 8002ec8:	3501      	adds	r5, #1
 8002eca:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	b2eb      	uxtb	r3, r5
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f1      	bhi.n	8002eb8 <LoadEEgroup+0x20>
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <LoadEEgroup+0xa4>)
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	002c      	movs	r4, r5
 8002eda:	3499      	adds	r4, #153	; 0x99
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	35cb      	adds	r5, #203	; 0xcb
 8002ee0:	b2ab      	uxth	r3, r5
 8002ee2:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ee4:	466b      	mov	r3, sp
 8002ee6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ee8:	2300      	movs	r3, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	e009      	b.n	8002f02 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7f0      	b.n	8002ed4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	725a      	strb	r2, [r3, #9]
 8002ef8:	230a      	movs	r3, #10
 8002efa:	469c      	mov	ip, r3
 8002efc:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002efe:	4544      	cmp	r4, r8
 8002f00:	d010      	beq.n	8002f24 <LoadEEgroup+0x8c>
 8002f02:	1d67      	adds	r7, r4, #5
 8002f04:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f06:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f08:	0031      	movs	r1, r6
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f009 fa5a 	bl	800c3c4 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f10:	8833      	ldrh	r3, [r6, #0]
 8002f12:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	702b      	strb	r3, [r5, #0]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	b2a4      	uxth	r4, r4
 8002f1c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f1e:	42bc      	cmp	r4, r7
 8002f20:	d1f2      	bne.n	8002f08 <LoadEEgroup+0x70>
 8002f22:	e7e6      	b.n	8002ef2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	bc1c      	pop	{r2, r3, r4}
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	20000044 	.word	0x20000044
 8002f38:	20000f34 	.word	0x20000f34
 8002f3c:	20000ed0 	.word	0x20000ed0

08002f40 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f44:	210e      	movs	r1, #14
 8002f46:	4469      	add	r1, sp
 8002f48:	2300      	movs	r3, #0
 8002f4a:	800b      	strh	r3, [r1, #0]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f50:	20e4      	movs	r0, #228	; 0xe4
 8002f52:	f009 fa37 	bl	800c3c4 <EE_ReadVariable>
	uint8_t direction =0;
 8002f56:	2600      	movs	r6, #0
	if(!status1){
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d102      	bne.n	8002f62 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	446b      	add	r3, sp
 8002f60:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f62:	210e      	movs	r1, #14
 8002f64:	4469      	add	r1, sp
 8002f66:	20e5      	movs	r0, #229	; 0xe5
 8002f68:	f009 fa2c 	bl	800c3c4 <EE_ReadVariable>
 8002f6c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f6e:	a903      	add	r1, sp, #12
 8002f70:	20e6      	movs	r0, #230	; 0xe6
 8002f72:	f009 fa27 	bl	800c3c4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002f76:	4304      	orrs	r4, r0
 8002f78:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002f7a:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d106      	bne.n	8002f8e <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f80:	230e      	movs	r3, #14
 8002f82:	446b      	add	r3, sp
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	042d      	lsls	r5, r5, #16
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8e:	210e      	movs	r1, #14
 8002f90:	4469      	add	r1, sp
 8002f92:	20e7      	movs	r0, #231	; 0xe7
 8002f94:	f009 fa16 	bl	800c3c4 <EE_ReadVariable>
 8002f98:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	20e8      	movs	r0, #232	; 0xe8
 8002f9e:	f009 fa11 	bl	800c3c4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fa2:	4320      	orrs	r0, r4
 8002fa4:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002fa6:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d106      	bne.n	8002fba <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fac:	230e      	movs	r3, #14
 8002fae:	446b      	add	r3, sp
 8002fb0:	881c      	ldrh	r4, [r3, #0]
 8002fb2:	0424      	lsls	r4, r4, #16
 8002fb4:	ab03      	add	r3, sp, #12
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002fba:	210e      	movs	r1, #14
 8002fbc:	4469      	add	r1, sp
 8002fbe:	20e9      	movs	r0, #233	; 0xe9
 8002fc0:	f009 fa00 	bl	800c3c4 <EE_ReadVariable>
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d107      	bne.n	8002fd8 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002fc8:	230e      	movs	r3, #14
 8002fca:	446b      	add	r3, sp
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <LoadEEstreams+0x134>)
 8002fd2:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <LoadEEstreams+0x138>)
 8002fd6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fd8:	210e      	movs	r1, #14
 8002fda:	4469      	add	r1, sp
 8002fdc:	20ea      	movs	r0, #234	; 0xea
 8002fde:	f009 f9f1 	bl	800c3c4 <EE_ReadVariable>
	if(!status1){
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d107      	bne.n	8002ff6 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002fe6:	230e      	movs	r3, #14
 8002fe8:	446b      	add	r3, sp
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <LoadEEstreams+0x13c>)
 8002ff0:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <LoadEEstreams+0x140>)
 8002ff4:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002ff6:	210e      	movs	r1, #14
 8002ff8:	4469      	add	r1, sp
 8002ffa:	20eb      	movs	r0, #235	; 0xeb
 8002ffc:	f009 f9e2 	bl	800c3c4 <EE_ReadVariable>
	if(!status1){
 8003000:	2800      	cmp	r0, #0
 8003002:	d107      	bne.n	8003014 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003004:	230e      	movs	r3, #14
 8003006:	446b      	add	r3, sp
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LoadEEstreams+0x144>)
 800300e:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <LoadEEstreams+0x148>)
 8003012:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LoadEEstreams+0x134>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LoadEEstreams+0xe4>
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <LoadEEstreams+0x138>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d112      	bne.n	800304a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <LoadEEstreams+0x13c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <LoadEEstreams+0xf4>
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <LoadEEstreams+0x140>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d111      	bne.n	8003058 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoadEEstreams+0x144>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <LoadEEstreams+0x104>
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <LoadEEstreams+0x148>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d110      	bne.n	8003066 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b004      	add	sp, #16
 8003048:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	0029      	movs	r1, r5
 8003050:	0030      	movs	r0, r6
 8003052:	f004 fcdd 	bl	8007a10 <SetupDMAStreams>
 8003056:	e7e5      	b.n	8003024 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	0022      	movs	r2, r4
 800305c:	0029      	movs	r1, r5
 800305e:	0030      	movs	r0, r6
 8003060:	f004 fcd6 	bl	8007a10 <SetupDMAStreams>
 8003064:	e7e6      	b.n	8003034 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	0022      	movs	r2, r4
 800306a:	0029      	movs	r1, r5
 800306c:	0030      	movs	r0, r6
 800306e:	f004 fccf 	bl	8007a10 <SetupDMAStreams>
 8003072:	e7e7      	b.n	8003044 <LoadEEstreams+0x104>
 8003074:	200011c2 	.word	0x200011c2
 8003078:	20000ecd 	.word	0x20000ecd
 800307c:	200011c3 	.word	0x200011c3
 8003080:	20000ece 	.word	0x20000ece
 8003084:	200011c4 	.word	0x200011c4
 8003088:	20000ecf 	.word	0x20000ecf

0800308c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003090:	208a      	movs	r0, #138	; 0x8a
 8003092:	466b      	mov	r3, sp
 8003094:	1d99      	adds	r1, r3, #6
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f009 f994 	bl	800c3c4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d000      	beq.n	80030a2 <LoadEEparams+0x16>
 80030a0:	e075      	b.n	800318e <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 80030a2:	466b      	mov	r3, sp
 80030a4:	3306      	adds	r3, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a55      	ldr	r2, [pc, #340]	; (8003200 <LoadEEparams+0x174>)
 80030aa:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030b0:	208e      	movs	r0, #142	; 0x8e
 80030b2:	466b      	mov	r3, sp
 80030b4:	1d99      	adds	r1, r3, #6
 80030b6:	0040      	lsls	r0, r0, #1
 80030b8:	f009 f984 	bl	800c3c4 <EE_ReadVariable>

	if(!status1){
 80030bc:	2800      	cmp	r0, #0
 80030be:	d000      	beq.n	80030c2 <LoadEEparams+0x36>
 80030c0:	e06c      	b.n	800319c <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030c2:	466b      	mov	r3, sp
 80030c4:	3306      	adds	r3, #6
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <LoadEEparams+0x174>)
 80030ca:	0bd9      	lsrs	r1, r3, #15
 80030cc:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030d2:	2016      	movs	r0, #22
 80030d4:	466b      	mov	r3, sp
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f009 f973 	bl	800c3c4 <EE_ReadVariable>
	if(!status1)
 80030de:	2800      	cmp	r0, #0
 80030e0:	d163      	bne.n	80031aa <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 80030e2:	466b      	mov	r3, sp
 80030e4:	88da      	ldrh	r2, [r3, #6]
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <LoadEEparams+0x178>)
 80030e8:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030ea:	208b      	movs	r0, #139	; 0x8b
 80030ec:	466b      	mov	r3, sp
 80030ee:	1d99      	adds	r1, r3, #6
 80030f0:	0040      	lsls	r0, r0, #1
 80030f2:	f009 f967 	bl	800c3c4 <EE_ReadVariable>
	if(!status1)
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d15c      	bne.n	80031b4 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 80030fa:	466b      	mov	r3, sp
 80030fc:	88da      	ldrh	r2, [r3, #6]
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <LoadEEparams+0x178>)
 8003100:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003102:	2018      	movs	r0, #24
 8003104:	466b      	mov	r3, sp
 8003106:	1d99      	adds	r1, r3, #6
 8003108:	30ff      	adds	r0, #255	; 0xff
 800310a:	f009 f95b 	bl	800c3c4 <EE_ReadVariable>
	if(!status1){
 800310e:	2800      	cmp	r0, #0
 8003110:	d155      	bne.n	80031be <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003112:	466b      	mov	r3, sp
 8003114:	3306      	adds	r3, #6
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <LoadEEparams+0x178>)
 800311a:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003120:	208c      	movs	r0, #140	; 0x8c
 8003122:	466b      	mov	r3, sp
 8003124:	1d99      	adds	r1, r3, #6
 8003126:	0040      	lsls	r0, r0, #1
 8003128:	f009 f94c 	bl	800c3c4 <EE_ReadVariable>
 800312c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800312e:	201a      	movs	r0, #26
 8003130:	a901      	add	r1, sp, #4
 8003132:	30ff      	adds	r0, #255	; 0xff
 8003134:	f009 f946 	bl	800c3c4 <EE_ReadVariable>
	if(!status1 && !status2){
 8003138:	4304      	orrs	r4, r0
 800313a:	b2a4      	uxth	r4, r4
 800313c:	2c00      	cmp	r4, #0
 800313e:	d145      	bne.n	80031cc <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003140:	ab01      	add	r3, sp, #4
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	466a      	mov	r2, sp
 8003148:	3206      	adds	r2, #6
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <LoadEEparams+0x178>)
 8003150:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003152:	208d      	movs	r0, #141	; 0x8d
 8003154:	466b      	mov	r3, sp
 8003156:	1d99      	adds	r1, r3, #6
 8003158:	0040      	lsls	r0, r0, #1
 800315a:	f009 f933 	bl	800c3c4 <EE_ReadVariable>
	if(!status1){
 800315e:	2800      	cmp	r0, #0
 8003160:	d142      	bne.n	80031e8 <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 8003162:	466b      	mov	r3, sp
 8003164:	3306      	adds	r3, #6
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <LoadEEparams+0x178>)
 800316a:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003170:	201c      	movs	r0, #28
 8003172:	466b      	mov	r3, sp
 8003174:	1d99      	adds	r1, r3, #6
 8003176:	30ff      	adds	r0, #255	; 0xff
 8003178:	f009 f924 	bl	800c3c4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d039      	beq.n	80031f4 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <LoadEEparams+0x17c>)
 8003182:	7e9a      	ldrb	r2, [r3, #26]
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <LoadEEparams+0x178>)
 8003186:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 8003188:	2000      	movs	r0, #0
 800318a:	b002      	add	sp, #8
 800318c:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 800318e:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <LoadEEparams+0x174>)
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <LoadEEparams+0x180>)
 8003192:	7811      	ldrb	r1, [r2, #0]
 8003194:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003196:	7852      	ldrb	r2, [r2, #1]
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e789      	b.n	80030b0 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <LoadEEparams+0x174>)
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <LoadEEparams+0x180>)
 80031a0:	7911      	ldrb	r1, [r2, #4]
 80031a2:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031a4:	88d2      	ldrh	r2, [r2, #6]
 80031a6:	80da      	strh	r2, [r3, #6]
 80031a8:	e793      	b.n	80030d2 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <LoadEEparams+0x17c>)
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <LoadEEparams+0x178>)
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	e79a      	b.n	80030ea <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <LoadEEparams+0x17c>)
 80031b6:	885a      	ldrh	r2, [r3, #2]
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <LoadEEparams+0x178>)
 80031ba:	805a      	strh	r2, [r3, #2]
 80031bc:	e7a1      	b.n	8003102 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <LoadEEparams+0x178>)
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <LoadEEparams+0x17c>)
 80031c2:	7911      	ldrb	r1, [r2, #4]
 80031c4:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80031c6:	7952      	ldrb	r2, [r2, #5]
 80031c8:	715a      	strb	r2, [r3, #5]
 80031ca:	e7a9      	b.n	8003120 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <LoadEEparams+0x184>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <LoadEEparams+0x178>)
 80031d6:	22e1      	movs	r2, #225	; 0xe1
 80031d8:	0252      	lsls	r2, r2, #9
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e7b9      	b.n	8003152 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <LoadEEparams+0x17c>)
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <LoadEEparams+0x178>)
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	e7b4      	b.n	8003152 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <LoadEEparams+0x178>)
 80031ea:	2218      	movs	r2, #24
 80031ec:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031ee:	2200      	movs	r2, #0
 80031f0:	731a      	strb	r2, [r3, #12]
 80031f2:	e7bd      	b.n	8003170 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 80031f4:	466b      	mov	r3, sp
 80031f6:	88da      	ldrh	r2, [r3, #6]
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <LoadEEparams+0x178>)
 80031fa:	769a      	strb	r2, [r3, #26]
 80031fc:	e7c4      	b.n	8003188 <LoadEEparams+0xfc>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20006dd0 	.word	0x20006dd0
 8003204:	20006e50 	.word	0x20006e50
 8003208:	20000028 	.word	0x20000028
 800320c:	20000020 	.word	0x20000020
 8003210:	20000ae7 	.word	0x20000ae7

08003214 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	46ce      	mov	lr, r9
 8003218:	4647      	mov	r7, r8
 800321a:	b580      	push	{r7, lr}
 800321c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800321e:	231e      	movs	r3, #30
 8003220:	446b      	add	r3, sp
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	2501      	movs	r5, #1
 8003228:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800322a:	001e      	movs	r6, r3
 800322c:	230f      	movs	r3, #15
 800322e:	4698      	mov	r8, r3
 8003230:	e004      	b.n	800323c <LoadEEbuttons+0x28>
 8003232:	3404      	adds	r4, #4
 8003234:	b2a4      	uxth	r4, r4
 8003236:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003238:	2d08      	cmp	r5, #8
 800323a:	d058      	beq.n	80032ee <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800323c:	0031      	movs	r1, r6
 800323e:	0020      	movs	r0, r4
 8003240:	f009 f8c0 	bl	800c3c4 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 8003244:	2800      	cmp	r0, #0
 8003246:	d1f4      	bne.n	8003232 <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003248:	8831      	ldrh	r1, [r6, #0]
 800324a:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800324c:	091a      	lsrs	r2, r3, #4
 800324e:	42aa      	cmp	r2, r5
 8003250:	d1ef      	bne.n	8003232 <LoadEEbuttons+0x1e>
 8003252:	4640      	mov	r0, r8
 8003254:	4003      	ands	r3, r0
 8003256:	d0ec      	beq.n	8003232 <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003258:	00d0      	lsls	r0, r2, #3
 800325a:	1882      	adds	r2, r0, r2
 800325c:	4827      	ldr	r0, [pc, #156]	; (80032fc <LoadEEbuttons+0xe8>)
 800325e:	4681      	mov	r9, r0
 8003260:	4491      	add	r9, r2
 8003262:	464a      	mov	r2, r9
 8003264:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 8003266:	7211      	strb	r1, [r2, #8]
 8003268:	00af      	lsls	r7, r5, #2
 800326a:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800326c:	0038      	movs	r0, r7
 800326e:	30e9      	adds	r0, #233	; 0xe9
 8003270:	b280      	uxth	r0, r0
 8003272:	0031      	movs	r1, r6
 8003274:	f009 f8a6 	bl	800c3c4 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003278:	8833      	ldrh	r3, [r6, #0]
 800327a:	0a1a      	lsrs	r2, r3, #8
 800327c:	4649      	mov	r1, r9
 800327e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003280:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003282:	0038      	movs	r0, r7
 8003284:	30ea      	adds	r0, #234	; 0xea
 8003286:	b280      	uxth	r0, r0
 8003288:	0031      	movs	r1, r6
 800328a:	f009 f89b 	bl	800c3c4 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800328e:	8833      	ldrh	r3, [r6, #0]
 8003290:	0a1a      	lsrs	r2, r3, #8
 8003292:	4649      	mov	r1, r9
 8003294:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003296:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003298:	37eb      	adds	r7, #235	; 0xeb
 800329a:	b2b8      	uxth	r0, r7
 800329c:	0031      	movs	r1, r6
 800329e:	f009 f891 	bl	800c3c4 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032a2:	8833      	ldrh	r3, [r6, #0]
 80032a4:	0a1a      	lsrs	r2, r3, #8
 80032a6:	4649      	mov	r1, r9
 80032a8:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032aa:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80032ac:	b2ef      	uxtb	r7, r5
 80032ae:	7848      	ldrb	r0, [r1, #1]
 80032b0:	0039      	movs	r1, r7
 80032b2:	f009 fe0d 	bl	800ced0 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032b6:	464b      	mov	r3, r9
 80032b8:	7a19      	ldrb	r1, [r3, #8]
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	104a      	asrs	r2, r1, #1
 80032be:	2001      	movs	r0, #1
 80032c0:	4002      	ands	r2, r0
 80032c2:	4001      	ands	r1, r0
 80032c4:	2000      	movs	r0, #0
 80032c6:	9005      	str	r0, [sp, #20]
 80032c8:	4648      	mov	r0, r9
 80032ca:	79c0      	ldrb	r0, [r0, #7]
 80032cc:	9004      	str	r0, [sp, #16]
 80032ce:	4648      	mov	r0, r9
 80032d0:	7980      	ldrb	r0, [r0, #6]
 80032d2:	9003      	str	r0, [sp, #12]
 80032d4:	4648      	mov	r0, r9
 80032d6:	7940      	ldrb	r0, [r0, #5]
 80032d8:	9002      	str	r0, [sp, #8]
 80032da:	4648      	mov	r0, r9
 80032dc:	7900      	ldrb	r0, [r0, #4]
 80032de:	9001      	str	r0, [sp, #4]
 80032e0:	4648      	mov	r0, r9
 80032e2:	78c0      	ldrb	r0, [r0, #3]
 80032e4:	9000      	str	r0, [sp, #0]
 80032e6:	0038      	movs	r0, r7
 80032e8:	f009 ff0c 	bl	800d104 <SetButtonEvents>
 80032ec:	e7a1      	b.n	8003232 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	b009      	add	sp, #36	; 0x24
 80032f2:	bc0c      	pop	{r2, r3}
 80032f4:	4690      	mov	r8, r2
 80032f6:	4699      	mov	r9, r3
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20001ed0 	.word	0x20001ed0

08003300 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	46de      	mov	lr, fp
 8003304:	4657      	mov	r7, sl
 8003306:	464e      	mov	r6, r9
 8003308:	b5c0      	push	{r6, r7, lr}
 800330a:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800330c:	2032      	movs	r0, #50	; 0x32
 800330e:	f010 ff71 	bl	80141f4 <malloc>
 8003312:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003314:	d100      	bne.n	8003318 <LoadROsnippets+0x18>
 8003316:	e071      	b.n	80033fc <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <LoadROsnippets+0x100>)
 800331a:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 800331c:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 800331e:	2bfe      	cmp	r3, #254	; 0xfe
 8003320:	d166      	bne.n	80033f0 <LoadROsnippets+0xf0>
 8003322:	4e38      	ldr	r6, [pc, #224]	; (8003404 <LoadROsnippets+0x104>)
 8003324:	3b9a      	subs	r3, #154	; 0x9a
 8003326:	469b      	mov	fp, r3
 8003328:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800332a:	4d35      	ldr	r5, [pc, #212]	; (8003400 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800332c:	1c7b      	adds	r3, r7, #1
 800332e:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <LoadROsnippets+0x108>)
 8003332:	4699      	mov	r9, r3
 8003334:	e023      	b.n	800337e <LoadROsnippets+0x7e>
		i =0;
 8003336:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 8003338:	193b      	adds	r3, r7, r4
 800333a:	3b01      	subs	r3, #1
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 8003342:	3401      	adds	r4, #1
 8003344:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 8003346:	0020      	movs	r0, r4
 8003348:	f010 ff54 	bl	80141f4 <malloc>
 800334c:	4653      	mov	r3, sl
 800334e:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003350:	2800      	cmp	r0, #0
 8003352:	d03f      	beq.n	80033d4 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003354:	0022      	movs	r2, r4
 8003356:	0039      	movs	r1, r7
 8003358:	f011 f999 	bl	801468e <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800335c:	464b      	mov	r3, r9
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	464a      	mov	r2, r9
 8003364:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003366:	0022      	movs	r2, r4
 8003368:	2100      	movs	r1, #0
 800336a:	0038      	movs	r0, r7
 800336c:	f011 f998 	bl	80146a0 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003370:	9b00      	ldr	r3, [sp, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2bfe      	cmp	r3, #254	; 0xfe
 8003376:	d137      	bne.n	80033e8 <LoadROsnippets+0xe8>
 8003378:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 800337a:	455e      	cmp	r6, fp
 800337c:	d034      	beq.n	80033e8 <LoadROsnippets+0xe8>
 800337e:	0028      	movs	r0, r5
 8003380:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 8003382:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003384:	1b79      	subs	r1, r7, r5
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	54ca      	strb	r2, [r1, r3]
 800338a:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 800338c:	4283      	cmp	r3, r0
 800338e:	d1fa      	bne.n	8003386 <LoadROsnippets+0x86>
 8003390:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003392:	46b2      	mov	sl, r6
 8003394:	2214      	movs	r2, #20
 8003396:	9901      	ldr	r1, [sp, #4]
 8003398:	0030      	movs	r0, r6
 800339a:	f011 f978 	bl	801468e <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 800339e:	2214      	movs	r2, #20
 80033a0:	2100      	movs	r1, #0
 80033a2:	0038      	movs	r0, r7
 80033a4:	f011 f97c 	bl	80146a0 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033a8:	9500      	str	r5, [sp, #0]
 80033aa:	782a      	ldrb	r2, [r5, #0]
 80033ac:	1c93      	adds	r3, r2, #2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d9c0      	bls.n	8003336 <LoadROsnippets+0x36>
 80033b4:	0039      	movs	r1, r7
		i =0;
 80033b6:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80033b8:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 80033ba:	3501      	adds	r5, #1
			++i;
 80033bc:	3401      	adds	r4, #1
 80033be:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033c0:	9500      	str	r5, [sp, #0]
 80033c2:	782a      	ldrb	r2, [r5, #0]
 80033c4:	1c93      	adds	r3, r2, #2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d9b5      	bls.n	8003338 <LoadROsnippets+0x38>
 80033cc:	3101      	adds	r1, #1
 80033ce:	2c32      	cmp	r4, #50	; 0x32
 80033d0:	d1f2      	bne.n	80033b8 <LoadROsnippets+0xb8>
 80033d2:	e7b1      	b.n	8003338 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033d4:	2214      	movs	r2, #20
 80033d6:	2100      	movs	r1, #0
 80033d8:	4650      	mov	r0, sl
 80033da:	f011 f961 	bl	80146a0 <memset>
			free(snipBuffer);
 80033de:	0038      	movs	r0, r7
 80033e0:	f010 ff12 	bl	8014208 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033e4:	200e      	movs	r0, #14
 80033e6:	e003      	b.n	80033f0 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 80033e8:	0038      	movs	r0, r7
 80033ea:	f010 ff0d 	bl	8014208 <free>
	return BOS_OK;
 80033ee:	2000      	movs	r0, #0
}
 80033f0:	b002      	add	sp, #8
 80033f2:	bc1c      	pop	{r2, r3, r4}
 80033f4:	4691      	mov	r9, r2
 80033f6:	469a      	mov	sl, r3
 80033f8:	46a3      	mov	fp, r4
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80033fc:	20fb      	movs	r0, #251	; 0xfb
 80033fe:	e7f7      	b.n	80033f0 <LoadROsnippets+0xf0>
 8003400:	0801dc00 	.word	0x0801dc00
 8003404:	20006e6c 	.word	0x20006e6c
 8003408:	20001297 	.word	0x20001297

0800340c <LoadEEvars>:
void LoadEEvars(void){
 800340c:	b510      	push	{r4, lr}
	LoadROtopology();
 800340e:	f7ff fc89 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 8003412:	f7ff fcdb 	bl	8002dcc <LoadEEportsDir>
	LoadEEalias();
 8003416:	f7ff fcfd 	bl	8002e14 <LoadEEalias>
	LoadEEgroup();
 800341a:	f7ff fd3d 	bl	8002e98 <LoadEEgroup>
	LoadEEstreams();
 800341e:	f7ff fd8f 	bl	8002f40 <LoadEEstreams>
	LoadEEparams();
 8003422:	f7ff fe33 	bl	800308c <LoadEEparams>
	LoadEEbuttons();
 8003426:	f7ff fef5 	bl	8003214 <LoadEEbuttons>
	LoadROsnippets();
 800342a:	f7ff ff69 	bl	8003300 <LoadROsnippets>
}
 800342e:	bd10      	pop	{r4, pc}

08003430 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <SaveEEportsDir+0x4c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <SaveEEportsDir+0x42>
 800343c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003442:	4e0f      	ldr	r6, [pc, #60]	; (8003480 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 8003444:	4f0d      	ldr	r7, [pc, #52]	; (800347c <SaveEEportsDir+0x4c>)
 8003446:	e008      	b.n	800345a <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003448:	1c60      	adds	r0, r4, #1
 800344a:	f008 ffeb 	bl	800c424 <EE_WriteVariable>
 800344e:	e00a      	b.n	8003466 <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003450:	3401      	adds	r4, #1
 8003452:	b2e4      	uxtb	r4, r4
 8003454:	783b      	ldrb	r3, [r7, #0]
 8003456:	42a3      	cmp	r3, r4
 8003458:	d30d      	bcc.n	8003476 <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 800345a:	0025      	movs	r5, r4
 800345c:	1e63      	subs	r3, r4, #1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	5b99      	ldrh	r1, [r3, r6]
 8003462:	2900      	cmp	r1, #0
 8003464:	d1f0      	bne.n	8003448 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003466:	3502      	adds	r5, #2
 8003468:	2d1b      	cmp	r5, #27
 800346a:	ddf1      	ble.n	8003450 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 800346c:	230a      	movs	r3, #10
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	e7ee      	b.n	8003450 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 8003476:	9801      	ldr	r0, [sp, #4]
 8003478:	b003      	add	sp, #12
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347c:	20000044 	.word	0x20000044
 8003480:	20007358 	.word	0x20007358

08003484 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	46d6      	mov	lr, sl
 8003488:	464f      	mov	r7, r9
 800348a:	4646      	mov	r6, r8
 800348c:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800348e:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003490:	2300      	movs	r3, #0
 8003492:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <SaveEEalias+0x7c>)
 8003496:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <SaveEEalias+0x80>)
 800349a:	4699      	mov	r9, r3
 800349c:	e005      	b.n	80034aa <SaveEEalias+0x26>
 800349e:	3601      	adds	r6, #1
 80034a0:	b2f6      	uxtb	r6, r6
 80034a2:	464b      	mov	r3, r9
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	42b3      	cmp	r3, r6
 80034a8:	d324      	bcc.n	80034f4 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 80034aa:	00b3      	lsls	r3, r6, #2
 80034ac:	199b      	adds	r3, r3, r6
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4652      	mov	r2, sl
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f2      	beq.n	800349e <SaveEEalias+0x1a>
 80034b8:	00b5      	lsls	r5, r6, #2
 80034ba:	19ad      	adds	r5, r5, r6
 80034bc:	006d      	lsls	r5, r5, #1
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <SaveEEalias+0x7c>)
 80034c0:	469c      	mov	ip, r3
 80034c2:	4465      	add	r5, ip
 80034c4:	4644      	mov	r4, r8
 80034c6:	341c      	adds	r4, #28
 80034c8:	b2a4      	uxth	r4, r4
 80034ca:	4647      	mov	r7, r8
 80034cc:	3721      	adds	r7, #33	; 0x21
 80034ce:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80034d0:	782b      	ldrb	r3, [r5, #0]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	7869      	ldrb	r1, [r5, #1]
 80034d6:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034d8:	b289      	uxth	r1, r1
 80034da:	0020      	movs	r0, r4
 80034dc:	f008 ffa2 	bl	800c424 <EE_WriteVariable>
 80034e0:	3502      	adds	r5, #2
 80034e2:	3401      	adds	r4, #1
 80034e4:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034e6:	42bc      	cmp	r4, r7
 80034e8:	d1f2      	bne.n	80034d0 <SaveEEalias+0x4c>
 80034ea:	4643      	mov	r3, r8
 80034ec:	3305      	adds	r3, #5
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4698      	mov	r8, r3
 80034f2:	e7d4      	b.n	800349e <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80034f4:	2000      	movs	r0, #0
 80034f6:	bc1c      	pop	{r2, r3, r4}
 80034f8:	4690      	mov	r8, r2
 80034fa:	4699      	mov	r9, r3
 80034fc:	46a2      	mov	sl, r4
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	20000fdc 	.word	0x20000fdc
 8003504:	20000044 	.word	0x20000044

08003508 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	46de      	mov	lr, fp
 800350c:	4657      	mov	r7, sl
 800350e:	464e      	mov	r6, r9
 8003510:	4645      	mov	r5, r8
 8003512:	b5e0      	push	{r5, r6, r7, lr}
 8003514:	000f      	movs	r7, r1
 8003516:	0016      	movs	r6, r2
 8003518:	4699      	mov	r9, r3
 800351a:	ab0a      	add	r3, sp, #40	; 0x28
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	469b      	mov	fp, r3
 8003520:	ab0b      	add	r3, sp, #44	; 0x2c
 8003522:	781d      	ldrb	r5, [r3, #0]
 8003524:	ab0c      	add	r3, sp, #48	; 0x30
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	469a      	mov	sl, r3
 800352a:	ab0d      	add	r3, sp, #52	; 0x34
 800352c:	781c      	ldrb	r4, [r3, #0]
 800352e:	ab0e      	add	r3, sp, #56	; 0x38
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003534:	b281      	uxth	r1, r0
 8003536:	20e4      	movs	r0, #228	; 0xe4
 8003538:	f008 ff74 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800353c:	0a39      	lsrs	r1, r7, #8
 800353e:	b289      	uxth	r1, r1
 8003540:	20e5      	movs	r0, #229	; 0xe5
 8003542:	f008 ff6f 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003546:	b2b9      	uxth	r1, r7
 8003548:	20e6      	movs	r0, #230	; 0xe6
 800354a:	f008 ff6b 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800354e:	0a31      	lsrs	r1, r6, #8
 8003550:	b289      	uxth	r1, r1
 8003552:	20e7      	movs	r0, #231	; 0xe7
 8003554:	f008 ff66 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003558:	b2b1      	uxth	r1, r6
 800355a:	20e8      	movs	r0, #232	; 0xe8
 800355c:	f008 ff62 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003560:	464b      	mov	r3, r9
 8003562:	0219      	lsls	r1, r3, #8
 8003564:	4459      	add	r1, fp
 8003566:	b289      	uxth	r1, r1
 8003568:	20e9      	movs	r0, #233	; 0xe9
 800356a:	f008 ff5b 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800356e:	022d      	lsls	r5, r5, #8
 8003570:	4455      	add	r5, sl
 8003572:	b2a9      	uxth	r1, r5
 8003574:	20ea      	movs	r0, #234	; 0xea
 8003576:	f008 ff55 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800357a:	0224      	lsls	r4, r4, #8
 800357c:	4444      	add	r4, r8
 800357e:	b2a1      	uxth	r1, r4
 8003580:	20eb      	movs	r0, #235	; 0xeb
 8003582:	f008 ff4f 	bl	800c424 <EE_WriteVariable>
	
	return result;
}
 8003586:	2000      	movs	r0, #0
 8003588:	bc3c      	pop	{r2, r3, r4, r5}
 800358a:	4690      	mov	r8, r2
 800358c:	4699      	mov	r9, r3
 800358e:	46a2      	mov	sl, r4
 8003590:	46ab      	mov	fp, r5
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003594 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003594:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003596:	4c1f      	ldr	r4, [pc, #124]	; (8003614 <SaveEEparams+0x80>)
 8003598:	7863      	ldrb	r3, [r4, #1]
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	7821      	ldrb	r1, [r4, #0]
 800359e:	4319      	orrs	r1, r3
 80035a0:	208a      	movs	r0, #138	; 0x8a
 80035a2:	0040      	lsls	r0, r0, #1
 80035a4:	f008 ff3e 	bl	800c424 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80035a8:	7921      	ldrb	r1, [r4, #4]
 80035aa:	03c9      	lsls	r1, r1, #15
 80035ac:	88e3      	ldrh	r3, [r4, #6]
 80035ae:	4319      	orrs	r1, r3
 80035b0:	b289      	uxth	r1, r1
 80035b2:	208e      	movs	r0, #142	; 0x8e
 80035b4:	0040      	lsls	r0, r0, #1
 80035b6:	f008 ff35 	bl	800c424 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80035ba:	4c17      	ldr	r4, [pc, #92]	; (8003618 <SaveEEparams+0x84>)
 80035bc:	8821      	ldrh	r1, [r4, #0]
 80035be:	2016      	movs	r0, #22
 80035c0:	30ff      	adds	r0, #255	; 0xff
 80035c2:	f008 ff2f 	bl	800c424 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035c6:	8861      	ldrh	r1, [r4, #2]
 80035c8:	208b      	movs	r0, #139	; 0x8b
 80035ca:	0040      	lsls	r0, r0, #1
 80035cc:	f008 ff2a 	bl	800c424 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035d0:	7963      	ldrb	r3, [r4, #5]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	7b21      	ldrb	r1, [r4, #12]
 80035d6:	4319      	orrs	r1, r3
 80035d8:	2018      	movs	r0, #24
 80035da:	30ff      	adds	r0, #255	; 0xff
 80035dc:	f008 ff22 	bl	800c424 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035e0:	8921      	ldrh	r1, [r4, #8]
 80035e2:	208c      	movs	r0, #140	; 0x8c
 80035e4:	0040      	lsls	r0, r0, #1
 80035e6:	f008 ff1d 	bl	800c424 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035ea:	8961      	ldrh	r1, [r4, #10]
 80035ec:	201a      	movs	r0, #26
 80035ee:	30ff      	adds	r0, #255	; 0xff
 80035f0:	f008 ff18 	bl	800c424 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035f4:	7b63      	ldrb	r3, [r4, #13]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	7921      	ldrb	r1, [r4, #4]
 80035fa:	4319      	orrs	r1, r3
 80035fc:	208d      	movs	r0, #141	; 0x8d
 80035fe:	0040      	lsls	r0, r0, #1
 8003600:	f008 ff10 	bl	800c424 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003604:	7ea1      	ldrb	r1, [r4, #26]
 8003606:	201c      	movs	r0, #28
 8003608:	30ff      	adds	r0, #255	; 0xff
 800360a:	f008 ff0b 	bl	800c424 <EE_WriteVariable>
	
	return result;
}
 800360e:	2000      	movs	r0, #0
 8003610:	bd10      	pop	{r4, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20006dd0 	.word	0x20006dd0
 8003618:	20006e50 	.word	0x20006e50

0800361c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003620:	2234      	movs	r2, #52	; 0x34
 8003622:	2100      	movs	r1, #0
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <ClearEEportsDir+0x58>)
 8003626:	f011 f83b 	bl	80146a0 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <ClearEEportsDir+0x5c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <ClearEEportsDir+0x4c>
 8003632:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003638:	4e0e      	ldr	r6, [pc, #56]	; (8003674 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 800363a:	4f0f      	ldr	r7, [pc, #60]	; (8003678 <ClearEEportsDir+0x5c>)
 800363c:	e008      	b.n	8003650 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800363e:	1c60      	adds	r0, r4, #1
 8003640:	f008 fef0 	bl	800c424 <EE_WriteVariable>
 8003644:	e00a      	b.n	800365c <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 8003646:	3401      	adds	r4, #1
 8003648:	b2e4      	uxtb	r4, r4
 800364a:	783b      	ldrb	r3, [r7, #0]
 800364c:	42a3      	cmp	r3, r4
 800364e:	d30d      	bcc.n	800366c <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003650:	0025      	movs	r5, r4
 8003652:	1e63      	subs	r3, r4, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	5b99      	ldrh	r1, [r3, r6]
 8003658:	2900      	cmp	r1, #0
 800365a:	d1f0      	bne.n	800363e <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800365c:	3502      	adds	r5, #2
 800365e:	2d1b      	cmp	r5, #27
 8003660:	ddf1      	ble.n	8003646 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003662:	230a      	movs	r3, #10
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	e7ee      	b.n	8003646 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800366c:	9801      	ldr	r0, [sp, #4]
 800366e:	b003      	add	sp, #12
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	20007358 	.word	0x20007358
 8003678:	20000044 	.word	0x20000044

0800367c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800367c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <EE_FormatForFactoryReset+0x1c>)
 8003680:	4a06      	ldr	r2, [pc, #24]	; (800369c <EE_FormatForFactoryReset+0x20>)
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d006      	beq.n	8003696 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003688:	f008 ff74 	bl	800c574 <EE_Format>
 800368c:	2800      	cmp	r0, #0
 800368e:	d102      	bne.n	8003696 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <EE_FormatForFactoryReset+0x20>)
 8003692:	4a01      	ldr	r2, [pc, #4]	; (8003698 <EE_FormatForFactoryReset+0x1c>)
 8003694:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003696:	bd10      	pop	{r4, pc}
 8003698:	beefdead 	.word	0xbeefdead
 800369c:	20007ff0 	.word	0x20007ff0

080036a0 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036a4:	2512      	movs	r5, #18
 80036a6:	446d      	add	r5, sp
 80036a8:	ab04      	add	r3, sp, #16
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	ab07      	add	r3, sp, #28
 80036ae:	002a      	movs	r2, r5
 80036b0:	a908      	add	r1, sp, #32
 80036b2:	2001      	movs	r0, #1
 80036b4:	f009 fa18 	bl	800cae8 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036b8:	ac03      	add	r4, sp, #12
 80036ba:	9400      	str	r4, [sp, #0]
 80036bc:	ab05      	add	r3, sp, #20
 80036be:	220e      	movs	r2, #14
 80036c0:	446a      	add	r2, sp
 80036c2:	a906      	add	r1, sp, #24
 80036c4:	2002      	movs	r0, #2
 80036c6:	f009 fa0f 	bl	800cae8 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ca:	2301      	movs	r3, #1
 80036cc:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2600      	movs	r6, #0
 80036d0:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036d2:	882b      	ldrh	r3, [r5, #0]
 80036d4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036d6:	a909      	add	r1, sp, #36	; 0x24
 80036d8:	9808      	ldr	r0, [sp, #32]
 80036da:	f00e fba9 	bl	8011e30 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036de:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036e0:	2302      	movs	r3, #2
 80036e2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036e4:	8823      	ldrh	r3, [r4, #0]
 80036e6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036e8:	a909      	add	r1, sp, #36	; 0x24
 80036ea:	9805      	ldr	r0, [sp, #20]
 80036ec:	f00e fba0 	bl	8011e30 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036f0:	8829      	ldrh	r1, [r5, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	9808      	ldr	r0, [sp, #32]
 80036f6:	f00e fd0f 	bl	8012118 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036fa:	2005      	movs	r0, #5
 80036fc:	f00a fdf8 	bl	800e2f0 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003700:	8821      	ldrh	r1, [r4, #0]
 8003702:	9805      	ldr	r0, [sp, #20]
 8003704:	f00e fd02 	bl	801210c <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003708:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800370a:	2800      	cmp	r0, #0
 800370c:	d002      	beq.n	8003714 <IsLowerCLIbaud+0x74>
}
 800370e:	0018      	movs	r0, r3
 8003710:	b00e      	add	sp, #56	; 0x38
 8003712:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003714:	3312      	adds	r3, #18
 8003716:	446b      	add	r3, sp
 8003718:	8819      	ldrh	r1, [r3, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	9808      	ldr	r0, [sp, #32]
 800371e:	f00e fcfb 	bl	8012118 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003722:	2005      	movs	r0, #5
 8003724:	f00a fde4 	bl	800e2f0 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003728:	ab03      	add	r3, sp, #12
 800372a:	8819      	ldrh	r1, [r3, #0]
 800372c:	9805      	ldr	r0, [sp, #20]
 800372e:	f00e fced 	bl	801210c <HAL_GPIO_ReadPin>
 8003732:	3801      	subs	r0, #1
 8003734:	4243      	negs	r3, r0
 8003736:	4143      	adcs	r3, r0
			return 1;
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e7e8      	b.n	800370e <IsLowerCLIbaud+0x6e>

0800373c <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	0006      	movs	r6, r0
 8003740:	4d08      	ldr	r5, [pc, #32]	; (8003764 <IsModuleParameter+0x28>)
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003742:	2400      	movs	r4, #0
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003744:	68a9      	ldr	r1, [r5, #8]
 8003746:	0030      	movs	r0, r6
 8003748:	f7fc fcdc 	bl	8000104 <strcmp>
 800374c:	2800      	cmp	r0, #0
 800374e:	d006      	beq.n	800375e <IsModuleParameter+0x22>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 8003750:	3401      	adds	r4, #1
 8003752:	b2e4      	uxtb	r4, r4
 8003754:	350c      	adds	r5, #12
 8003756:	2c07      	cmp	r4, #7
 8003758:	d1f4      	bne.n	8003744 <IsModuleParameter+0x8>
			return i + 1;
	}
	return 0;
 800375a:	2000      	movs	r0, #0
}
 800375c:	bd70      	pop	{r4, r5, r6, pc}
			return i + 1;
 800375e:	3401      	adds	r4, #1
 8003760:	b2e0      	uxtb	r0, r4
 8003762:	e7fb      	b.n	800375c <IsModuleParameter+0x20>
 8003764:	200000ac 	.word	0x200000ac

08003768 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 800376c:	491b      	ldr	r1, [pc, #108]	; (80037dc <IsMathOperator+0x74>)
 800376e:	f7fc fcc9 	bl	8000104 <strcmp>
 8003772:	0006      	movs	r6, r0
 8003774:	2506      	movs	r5, #6
 8003776:	2e00      	cmp	r6, #0
 8003778:	d023      	beq.n	80037c2 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 800377a:	4919      	ldr	r1, [pc, #100]	; (80037e0 <IsMathOperator+0x78>)
 800377c:	0020      	movs	r0, r4
 800377e:	f7fc fcc1 	bl	8000104 <strcmp>
 8003782:	2800      	cmp	r0, #0
 8003784:	d01f      	beq.n	80037c6 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 8003786:	4917      	ldr	r1, [pc, #92]	; (80037e4 <IsMathOperator+0x7c>)
 8003788:	0020      	movs	r0, r4
 800378a:	f7fc fcbb 	bl	8000104 <strcmp>
 800378e:	2800      	cmp	r0, #0
 8003790:	d01b      	beq.n	80037ca <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 8003792:	4915      	ldr	r1, [pc, #84]	; (80037e8 <IsMathOperator+0x80>)
 8003794:	0020      	movs	r0, r4
 8003796:	f7fc fcb5 	bl	8000104 <strcmp>
 800379a:	2800      	cmp	r0, #0
 800379c:	d017      	beq.n	80037ce <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 800379e:	4913      	ldr	r1, [pc, #76]	; (80037ec <IsMathOperator+0x84>)
 80037a0:	0020      	movs	r0, r4
 80037a2:	f7fc fcaf 	bl	8000104 <strcmp>
 80037a6:	2800      	cmp	r0, #0
 80037a8:	d013      	beq.n	80037d2 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80037aa:	4911      	ldr	r1, [pc, #68]	; (80037f0 <IsMathOperator+0x88>)
 80037ac:	0020      	movs	r0, r4
 80037ae:	f7fc fca9 	bl	8000104 <strcmp>
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d00f      	beq.n	80037d6 <IsMathOperator+0x6e>
 80037b6:	3d01      	subs	r5, #1
 80037b8:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80037ba:	2d00      	cmp	r5, #0
 80037bc:	d1db      	bne.n	8003776 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80037be:	2000      	movs	r0, #0
}
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80037c2:	2001      	movs	r0, #1
 80037c4:	e7fc      	b.n	80037c0 <IsMathOperator+0x58>
			return MATH_GREATER;
 80037c6:	2002      	movs	r0, #2
 80037c8:	e7fa      	b.n	80037c0 <IsMathOperator+0x58>
			return MATH_SMALLER;
 80037ca:	2003      	movs	r0, #3
 80037cc:	e7f8      	b.n	80037c0 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80037ce:	2004      	movs	r0, #4
 80037d0:	e7f6      	b.n	80037c0 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80037d2:	2005      	movs	r0, #5
 80037d4:	e7f4      	b.n	80037c0 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 80037d6:	2006      	movs	r0, #6
 80037d8:	e7f2      	b.n	80037c0 <IsMathOperator+0x58>
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	08019258 	.word	0x08019258
 80037e0:	0801925c 	.word	0x0801925c
 80037e4:	08019260 	.word	0x08019260
 80037e8:	08019264 	.word	0x08019264
 80037ec:	08019268 	.word	0x08019268
 80037f0:	0801926c 	.word	0x0801926c

080037f4 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 80037f4:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and configure RTC */
	RTC_Init();
 80037f6:	f00a fc33 	bl	800e060 <RTC_Init>
	GetTimeDate();
 80037fa:	f00a fcd1 	bl	800e1a0 <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 80037fe:	f008 ff1d 	bl	800c63c <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003802:	f009 f90f 	bl	800ca24 <GPIO_Init>
	DMA_Init();
 8003806:	f007 fc91 	bl	800b12c <DMA_Init>
	TIM_USEC_Init();
 800380a:	f00a fcfd 	bl	800e208 <TIM_USEC_Init>
	CRC_Init();
 800380e:	f008 fd2b 	bl	800c268 <CRC_Init>
	TIM_MSEC_Init();
 8003812:	f00a fd2b 	bl	800e26c <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 8003816:	f009 f9d3 	bl	800cbc0 <IsFactoryReset>
 800381a:	2800      	cmp	r0, #0
 800381c:	d11a      	bne.n	8003854 <BOS_Init+0x60>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 800381e:	f7ff ff3f 	bl	80036a0 <IsLowerCLIbaud>
 8003822:	2800      	cmp	r0, #0
 8003824:	d021      	beq.n	800386a <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 8003826:	4b34      	ldr	r3, [pc, #208]	; (80038f8 <BOS_Init+0x104>)
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800382c:	2032      	movs	r0, #50	; 0x32
 800382e:	f00a fd5f 	bl	800e2f0 <StartMilliDelay>
		Module_Peripheral_Init();
 8003832:	f006 fd8d 	bl	800a350 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003836:	4b31      	ldr	r3, [pc, #196]	; (80038fc <BOS_Init+0x108>)
 8003838:	22e1      	movs	r2, #225	; 0xe1
 800383a:	0252      	lsls	r2, r2, #9
 800383c:	609a      	str	r2, [r3, #8]
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800383e:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 8003840:	001d      	movs	r5, r3
 8003842:	68a9      	ldr	r1, [r5, #8]
 8003844:	0020      	movs	r0, r4
 8003846:	f00a ffbd 	bl	800e7c4 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800384a:	3401      	adds	r4, #1
 800384c:	b2e4      	uxtb	r4, r4
 800384e:	2c07      	cmp	r4, #7
 8003850:	d1f7      	bne.n	8003842 <BOS_Init+0x4e>
 8003852:	e00f      	b.n	8003874 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 8003854:	f7ff ff12 	bl	800367c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003858:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800385c:	4b28      	ldr	r3, [pc, #160]	; (8003900 <BOS_Init+0x10c>)
 800385e:	4a29      	ldr	r2, [pc, #164]	; (8003904 <BOS_Init+0x110>)
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003866:	46c0      	nop			; (mov r8, r8)
 8003868:	e7fd      	b.n	8003866 <BOS_Init+0x72>
		}
	}
	else{
		/* Initialize the module with default baudrate */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 800386a:	2032      	movs	r0, #50	; 0x32
 800386c:	f00a fd40 	bl	800e2f0 <StartMilliDelay>
		Module_Peripheral_Init();
 8003870:	f006 fd6e 	bl	800a350 <Module_Peripheral_Init>
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003874:	f7ff fdca 	bl	800340c <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 8003878:	f00b f836 	bl	800e8e8 <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 800387c:	f008 f900 	bl	800ba80 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 8003880:	4b21      	ldr	r3, [pc, #132]	; (8003908 <BOS_Init+0x114>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d025      	beq.n	80038d4 <BOS_Init+0xe0>
		IND_ON();
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 8003888:	2490      	movs	r4, #144	; 0x90
 800388a:	05e4      	lsls	r4, r4, #23
 800388c:	2201      	movs	r2, #1
 800388e:	2180      	movs	r1, #128	; 0x80
 8003890:	0020      	movs	r0, r4
 8003892:	f00e fc41 	bl	8012118 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 8003896:	20fa      	movs	r0, #250	; 0xfa
 8003898:	0040      	lsls	r0, r0, #1
 800389a:	f00a fd29 	bl	800e2f0 <StartMilliDelay>
		IND_OFF();
 800389e:	2200      	movs	r2, #0
 80038a0:	2180      	movs	r1, #128	; 0x80
 80038a2:	0020      	movs	r0, r4
 80038a4:	f00e fc38 	bl	8012118 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038a8:	2064      	movs	r0, #100	; 0x64
 80038aa:	f00a fd21 	bl	800e2f0 <StartMilliDelay>
		IND_ON();
 80038ae:	2201      	movs	r2, #1
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	0020      	movs	r0, r4
 80038b4:	f00e fc30 	bl	8012118 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 80038b8:	2064      	movs	r0, #100	; 0x64
 80038ba:	f00a fd19 	bl	800e2f0 <StartMilliDelay>
		IND_OFF();
 80038be:	2200      	movs	r2, #0
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	0020      	movs	r0, r4
 80038c4:	f00e fc28 	bl	8012118 <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 80038c8:	f003 fd1c 	bl	8007304 <ResetUartORE>
	
	BOS_initialized =1;
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <BOS_Init+0x118>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	701a      	strb	r2, [r3, #0]
}
 80038d2:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 80038d4:	2490      	movs	r4, #144	; 0x90
 80038d6:	05e4      	lsls	r4, r4, #23
 80038d8:	2201      	movs	r2, #1
 80038da:	2180      	movs	r1, #128	; 0x80
 80038dc:	0020      	movs	r0, r4
 80038de:	f00e fc1b 	bl	8012118 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 80038e2:	20fa      	movs	r0, #250	; 0xfa
 80038e4:	0040      	lsls	r0, r0, #1
 80038e6:	f00a fd03 	bl	800e2f0 <StartMilliDelay>
 80038ea:	2200      	movs	r2, #0
 80038ec:	2180      	movs	r1, #128	; 0x80
 80038ee:	0020      	movs	r0, r4
 80038f0:	f00e fc12 	bl	8012118 <HAL_GPIO_WritePin>
 80038f4:	e7e8      	b.n	80038c8 <BOS_Init+0xd4>
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	20000ae7 	.word	0x20000ae7
 80038fc:	20006e50 	.word	0x20006e50
 8003900:	e000ed00 	.word	0xe000ed00
 8003904:	05fa0004 	.word	0x05fa0004
 8003908:	200010ea 	.word	0x200010ea
 800390c:	20000ae6 	.word	0x20000ae6

08003910 <Module_Init>:
void Module_Init(void){
 8003910:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003912:	f00c ffc7 	bl	80108a4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8003916:	f006 fbe7 	bl	800a0e8 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 800391a:	f7ff ff6b 	bl	80037f4 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800391e:	f003 fd11 	bl	8007344 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003922:	f00b f887 	bl	800ea34 <osKernelStart>
}
 8003926:	bd10      	pop	{r4, pc}

08003928 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800392a:	46c6      	mov	lr, r8
 800392c:	b500      	push	{lr}
 800392e:	b082      	sub	sp, #8
 8003930:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003932:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <ExploreNeighbors+0x4c>)
 8003936:	4698      	mov	r8, r3
 8003938:	4d0f      	ldr	r5, [pc, #60]	; (8003978 <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800393a:	2703      	movs	r7, #3
		if(port != ignore){
 800393c:	42a6      	cmp	r6, r4
 800393e:	d00f      	beq.n	8003960 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003940:	4643      	mov	r3, r8
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	0a1a      	lsrs	r2, r3, #8
 8003946:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003948:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 800394a:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800394c:	9700      	str	r7, [sp, #0]
 800394e:	230a      	movs	r3, #10
 8003950:	2200      	movs	r2, #0
 8003952:	2100      	movs	r1, #0
 8003954:	0020      	movs	r0, r4
 8003956:	f004 f97d 	bl	8007c54 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 800395a:	200a      	movs	r0, #10
 800395c:	f00b f86f 	bl	800ea3e <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003960:	3401      	adds	r4, #1
 8003962:	b2e4      	uxtb	r4, r4
 8003964:	2c07      	cmp	r4, #7
 8003966:	d1e9      	bne.n	800393c <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 8003968:	2000      	movs	r0, #0
 800396a:	b002      	add	sp, #8
 800396c:	bc04      	pop	{r2}
 800396e:	4690      	mov	r8, r2
 8003970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	20000078 	.word	0x20000078
 8003978:	20000fac 	.word	0x20000fac

0800397c <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 800397c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800397e:	46de      	mov	lr, fp
 8003980:	4657      	mov	r7, sl
 8003982:	464e      	mov	r6, r9
 8003984:	4645      	mov	r5, r8
 8003986:	b5e0      	push	{r5, r6, r7, lr}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 800398c:	4b47      	ldr	r3, [pc, #284]	; (8003aac <FindBroadcastRoutes+0x130>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	469c      	mov	ip, r3
 8003992:	3307      	adds	r3, #7
 8003994:	08db      	lsrs	r3, r3, #3
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	466a      	mov	r2, sp
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	469d      	mov	sp, r3
 800399e:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 80039a0:	4663      	mov	r3, ip
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <FindBroadcastRoutes+0x46>
 80039a6:	0023      	movs	r3, r4
 80039a8:	4a41      	ldr	r2, [pc, #260]	; (8003ab0 <FindBroadcastRoutes+0x134>)
 80039aa:	4661      	mov	r1, ip
 80039ac:	1e4d      	subs	r5, r1, #1
 80039ae:	b2ed      	uxtb	r5, r5
 80039b0:	3501      	adds	r5, #1
 80039b2:	192d      	adds	r5, r5, r4
		modules[m] =0;
 80039b4:	2100      	movs	r1, #0
 80039b6:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 80039b8:	8011      	strh	r1, [r2, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80039be:	42ab      	cmp	r3, r5
 80039c0:	d1f9      	bne.n	80039b6 <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 80039c2:	3801      	subs	r0, #1
 80039c4:	2301      	movs	r3, #1
 80039c6:	5423      	strb	r3, [r4, r0]
 80039c8:	2216      	movs	r2, #22
 80039ca:	4342      	muls	r2, r0
 80039cc:	3202      	adds	r2, #2
 80039ce:	4b39      	ldr	r3, [pc, #228]	; (8003ab4 <FindBroadcastRoutes+0x138>)
 80039d0:	18d2      	adds	r2, r2, r3
 80039d2:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039d4:	4d36      	ldr	r5, [pc, #216]	; (8003ab0 <FindBroadcastRoutes+0x134>)
 80039d6:	0040      	lsls	r0, r0, #1
 80039d8:	2301      	movs	r3, #1
 80039da:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80039dc:	46a3      	mov	fp, r4
 80039de:	e003      	b.n	80039e8 <FindBroadcastRoutes+0x6c>
 80039e0:	3101      	adds	r1, #1
 80039e2:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80039e4:	2906      	cmp	r1, #6
 80039e6:	d011      	beq.n	8003a0c <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 80039e8:	8813      	ldrh	r3, [r2, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0f8      	beq.n	80039e0 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80039ee:	5b46      	ldrh	r6, [r0, r5]
 80039f0:	46b1      	mov	r9, r6
 80039f2:	4646      	mov	r6, r8
 80039f4:	408e      	lsls	r6, r1
 80039f6:	46b2      	mov	sl, r6
 80039f8:	464e      	mov	r6, r9
 80039fa:	4654      	mov	r4, sl
 80039fc:	4326      	orrs	r6, r4
 80039fe:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	445b      	add	r3, fp
 8003a04:	3b01      	subs	r3, #1
 8003a06:	2402      	movs	r4, #2
 8003a08:	701c      	strb	r4, [r3, #0]
 8003a0a:	e7e9      	b.n	80039e0 <FindBroadcastRoutes+0x64>
 8003a0c:	465c      	mov	r4, fp
	++level;												// Move one level
 8003a0e:	2602      	movs	r6, #2
 8003a10:	4b28      	ldr	r3, [pc, #160]	; (8003ab4 <FindBroadcastRoutes+0x138>)
 8003a12:	3302      	adds	r3, #2
 8003a14:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a16:	2301      	movs	r3, #1
 8003a18:	469b      	mov	fp, r3
 8003a1a:	46b0      	mov	r8, r6
 8003a1c:	0026      	movs	r6, r4
		++level;											// Move one level
 8003a1e:	4643      	mov	r3, r8
 8003a20:	3301      	adds	r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a26:	4663      	mov	r3, ip
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d035      	beq.n	8003a98 <FindBroadcastRoutes+0x11c>
 8003a2c:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a32:	3b01      	subs	r3, #1
 8003a34:	4443      	add	r3, r8
 8003a36:	4699      	mov	r9, r3
 8003a38:	e01e      	b.n	8003a78 <FindBroadcastRoutes+0xfc>
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003a3e:	2806      	cmp	r0, #6
 8003a40:	d015      	beq.n	8003a6e <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003a42:	880b      	ldrh	r3, [r1, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f8      	beq.n	8003a3a <FindBroadcastRoutes+0xbe>
 8003a48:	08db      	lsrs	r3, r3, #3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	5cf5      	ldrb	r5, [r6, r3]
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	d1f3      	bne.n	8003a3a <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a52:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <FindBroadcastRoutes+0x134>)
 8003a54:	5aa5      	ldrh	r5, [r4, r2]
 8003a56:	465a      	mov	r2, fp
 8003a58:	4082      	lsls	r2, r0
 8003a5a:	4315      	orrs	r5, r2
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <FindBroadcastRoutes+0x134>)
 8003a5e:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003a60:	4642      	mov	r2, r8
 8003a62:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	60fb      	str	r3, [r7, #12]
 8003a6c:	e7e5      	b.n	8003a3a <FindBroadcastRoutes+0xbe>
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a72:	b2d3      	uxtb	r3, r2
 8003a74:	4563      	cmp	r3, ip
 8003a76:	d20c      	bcs.n	8003a92 <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a78:	5cb3      	ldrb	r3, [r6, r2]
 8003a7a:	454b      	cmp	r3, r9
 8003a7c:	d1f8      	bne.n	8003a70 <FindBroadcastRoutes+0xf4>
 8003a7e:	2116      	movs	r1, #22
 8003a80:	4351      	muls	r1, r2
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	469a      	mov	sl, r3
 8003a86:	4451      	add	r1, sl
 8003a88:	0053      	lsls	r3, r2, #1
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	60ba      	str	r2, [r7, #8]
 8003a8e:	001c      	movs	r4, r3
 8003a90:	e7d7      	b.n	8003a42 <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1c2      	bne.n	8003a1e <FindBroadcastRoutes+0xa2>
	
	return result;
}
 8003a98:	2000      	movs	r0, #0
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b005      	add	sp, #20
 8003a9e:	bc3c      	pop	{r2, r3, r4, r5}
 8003aa0:	4690      	mov	r8, r2
 8003aa2:	4699      	mov	r9, r3
 8003aa4:	46a2      	mov	sl, r4
 8003aa6:	46ab      	mov	fp, r5
 8003aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	20000044 	.word	0x20000044
 8003ab0:	20000d2c 	.word	0x20000d2c
 8003ab4:	20000aec 	.word	0x20000aec

08003ab8 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003aba:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003abc:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d100      	bne.n	8003ac4 <minArr+0xc>
		smallest =arr[0];
 8003ac2:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <minArr+0x38>)
 8003ac6:	781d      	ldrb	r5, [r3, #0]
 8003ac8:	2d00      	cmp	r5, #0
 8003aca:	dd0e      	ble.n	8003aea <minArr+0x32>
 8003acc:	2300      	movs	r3, #0
 8003ace:	2700      	movs	r7, #0
 8003ad0:	e002      	b.n	8003ad8 <minArr+0x20>
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	42ab      	cmp	r3, r5
 8003ad6:	da09      	bge.n	8003aec <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 8003ad8:	5cc2      	ldrb	r2, [r0, r3]
 8003ada:	42a2      	cmp	r2, r4
 8003adc:	d2f9      	bcs.n	8003ad2 <minArr+0x1a>
 8003ade:	5cce      	ldrb	r6, [r1, r3]
 8003ae0:	2e00      	cmp	r6, #0
 8003ae2:	d1f6      	bne.n	8003ad2 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003ae4:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 8003ae6:	0014      	movs	r4, r2
 8003ae8:	e7f3      	b.n	8003ad2 <minArr+0x1a>
	for(int i =0; i < N; i++){
 8003aea:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003aec:	0038      	movs	r0, r7
 8003aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af0:	20000044 	.word	0x20000044

08003af4 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003af4:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <QnotEmpty+0x20>)
 8003af6:	7819      	ldrb	r1, [r3, #0]
 8003af8:	2900      	cmp	r1, #0
 8003afa:	d008      	beq.n	8003b0e <QnotEmpty+0x1a>
 8003afc:	0003      	movs	r3, r0
 8003afe:	1841      	adds	r1, r0, r1
	char temp =1;
 8003b00:	2001      	movs	r0, #1
		temp &=Q[i];
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	4010      	ands	r0, r2
 8003b06:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d1fa      	bne.n	8003b02 <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003b0c:	4770      	bx	lr
	char temp =1;
 8003b0e:	2001      	movs	r0, #1
 8003b10:	e7fc      	b.n	8003b0c <QnotEmpty+0x18>
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	20000044 	.word	0x20000044

08003b18 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b1a:	46de      	mov	lr, fp
 8003b1c:	4657      	mov	r7, sl
 8003b1e:	464e      	mov	r6, r9
 8003b20:	4645      	mov	r5, r8
 8003b22:	b5e0      	push	{r5, r6, r7, lr}
 8003b24:	b08f      	sub	sp, #60	; 0x3c
 8003b26:	0005      	movs	r5, r0
 8003b28:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b2a:	2232      	movs	r2, #50	; 0x32
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	a801      	add	r0, sp, #4
 8003b30:	f010 fdb6 	bl	80146a0 <memset>
	memset(route,0,sizeof(route));
 8003b34:	221a      	movs	r2, #26
 8003b36:	2100      	movs	r1, #0
 8003b38:	485a      	ldr	r0, [pc, #360]	; (8003ca4 <FindRoute+0x18c>)
 8003b3a:	f010 fdb1 	bl	80146a0 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003b3e:	0029      	movs	r1, r5
 8003b40:	1e68      	subs	r0, r5, #1
 8003b42:	2300      	movs	r3, #0
 8003b44:	4a58      	ldr	r2, [pc, #352]	; (8003ca8 <FindRoute+0x190>)
 8003b46:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003b48:	4a58      	ldr	r2, [pc, #352]	; (8003cac <FindRoute+0x194>)
 8003b4a:	5413      	strb	r3, [r2, r0]
 8003b4c:	2516      	movs	r5, #22
 8003b4e:	4345      	muls	r5, r0
 8003b50:	3502      	adds	r5, #2
 8003b52:	4b57      	ldr	r3, [pc, #348]	; (8003cb0 <FindRoute+0x198>)
 8003b54:	18ed      	adds	r5, r5, r3
 8003b56:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 8003b58:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b5a:	4653      	mov	r3, sl
 8003b5c:	b29c      	uxth	r4, r3
 8003b5e:	e003      	b.n	8003b68 <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 8003b60:	3001      	adds	r0, #1
 8003b62:	3202      	adds	r2, #2
 8003b64:	2807      	cmp	r0, #7
 8003b66:	d00f      	beq.n	8003b88 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003b68:	8813      	ldrh	r3, [r2, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f8      	beq.n	8003b60 <FindRoute+0x48>
 8003b6e:	08db      	lsrs	r3, r3, #3
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d1f5      	bne.n	8003b60 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003b74:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <FindRoute+0x190>)
 8003b76:	4453      	add	r3, sl
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003b7e:	4b49      	ldr	r3, [pc, #292]	; (8003ca4 <FindRoute+0x18c>)
 8003b80:	4652      	mov	r2, sl
 8003b82:	701a      	strb	r2, [r3, #0]
			return col;
 8003b84:	b2c0      	uxtb	r0, r0
 8003b86:	e085      	b.n	8003c94 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003b88:	4b4a      	ldr	r3, [pc, #296]	; (8003cb4 <FindRoute+0x19c>)
 8003b8a:	781e      	ldrb	r6, [r3, #0]
 8003b8c:	2e00      	cmp	r6, #0
 8003b8e:	dd11      	ble.n	8003bb4 <FindRoute+0x9c>
 8003b90:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003b92:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003b94:	4f45      	ldr	r7, [pc, #276]	; (8003cac <FindRoute+0x194>)
 8003b96:	2000      	movs	r0, #0
 8003b98:	46ac      	mov	ip, r5
 8003b9a:	e002      	b.n	8003ba2 <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	42b3      	cmp	r3, r6
 8003ba0:	dc07      	bgt.n	8003bb2 <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003ba2:	4299      	cmp	r1, r3
 8003ba4:	d0fa      	beq.n	8003b9c <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003ba6:	1e5a      	subs	r2, r3, #1
 8003ba8:	4d3f      	ldr	r5, [pc, #252]	; (8003ca8 <FindRoute+0x190>)
 8003baa:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003bac:	18ba      	adds	r2, r7, r2
 8003bae:	7010      	strb	r0, [r2, #0]
 8003bb0:	e7f4      	b.n	8003b9c <FindRoute+0x84>
 8003bb2:	4665      	mov	r5, ip
	uint8_t u =0;
 8003bb4:	2400      	movs	r4, #0
 8003bb6:	4b3e      	ldr	r3, [pc, #248]	; (8003cb0 <FindRoute+0x198>)
 8003bb8:	4698      	mov	r8, r3
 8003bba:	230e      	movs	r3, #14
 8003bbc:	4443      	add	r3, r8
 8003bbe:	4656      	mov	r6, sl
 8003bc0:	469b      	mov	fp, r3
 8003bc2:	46a9      	mov	r9, r5
 8003bc4:	e01d      	b.n	8003c02 <FindRoute+0xea>
 8003bc6:	464d      	mov	r5, r9
 8003bc8:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003bca:	0034      	movs	r4, r6
 8003bcc:	e034      	b.n	8003c38 <FindRoute+0x120>
 8003bce:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003bd0:	4281      	cmp	r1, r0
 8003bd2:	d015      	beq.n	8003c00 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003bd4:	880b      	ldrh	r3, [r1, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f9      	beq.n	8003bce <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003bda:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	3b01      	subs	r3, #1
 8003be0:	5cd7      	ldrb	r7, [r2, r3]
 8003be2:	2f00      	cmp	r7, #0
 8003be4:	d1f3      	bne.n	8003bce <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003be6:	4f30      	ldr	r7, [pc, #192]	; (8003ca8 <FindRoute+0x190>)
 8003be8:	5d7f      	ldrb	r7, [r7, r5]
 8003bea:	3701      	adds	r7, #1
 8003bec:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003bee:	4e2e      	ldr	r6, [pc, #184]	; (8003ca8 <FindRoute+0x190>)
 8003bf0:	5cf6      	ldrb	r6, [r6, r3]
 8003bf2:	42be      	cmp	r6, r7
 8003bf4:	d9eb      	bls.n	8003bce <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003bf6:	4e2c      	ldr	r6, [pc, #176]	; (8003ca8 <FindRoute+0x190>)
 8003bf8:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003bfa:	4e2c      	ldr	r6, [pc, #176]	; (8003cac <FindRoute+0x194>)
 8003bfc:	54f4      	strb	r4, [r6, r3]
 8003bfe:	e7e6      	b.n	8003bce <FindRoute+0xb6>
 8003c00:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003c02:	a801      	add	r0, sp, #4
 8003c04:	f7ff ff76 	bl	8003af4 <QnotEmpty>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d113      	bne.n	8003c34 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003c0c:	a901      	add	r1, sp, #4
 8003c0e:	4826      	ldr	r0, [pc, #152]	; (8003ca8 <FindRoute+0x190>)
 8003c10:	f7ff ff52 	bl	8003ab8 <minArr>
 8003c14:	3001      	adds	r0, #1
 8003c16:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003c18:	42b4      	cmp	r4, r6
 8003c1a:	d0d4      	beq.n	8003bc6 <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003c1c:	1e65      	subs	r5, r4, #1
 8003c1e:	ab01      	add	r3, sp, #4
 8003c20:	2201      	movs	r2, #1
 8003c22:	555a      	strb	r2, [r3, r5]
 8003c24:	2016      	movs	r0, #22
 8003c26:	4368      	muls	r0, r5
 8003c28:	1c81      	adds	r1, r0, #2
 8003c2a:	4441      	add	r1, r8
 8003c2c:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003c2e:	001a      	movs	r2, r3
 8003c30:	46b2      	mov	sl, r6
 8003c32:	e7cf      	b.n	8003bd4 <FindRoute+0xbc>
 8003c34:	464d      	mov	r5, r9
 8003c36:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c38:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <FindRoute+0x194>)
 8003c3a:	191b      	adds	r3, r3, r4
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	781a      	ldrb	r2, [r3, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	2a00      	cmp	r2, #0
 8003c44:	d00e      	beq.n	8003c64 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003c46:	4917      	ldr	r1, [pc, #92]	; (8003ca4 <FindRoute+0x18c>)
 8003c48:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c4a:	4e18      	ldr	r6, [pc, #96]	; (8003cac <FindRoute+0x194>)
 8003c4c:	e000      	b.n	8003c50 <FindRoute+0x138>
 8003c4e:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003c50:	1c58      	adds	r0, r3, #1
 8003c52:	4661      	mov	r1, ip
 8003c54:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c56:	18b3      	adds	r3, r6, r2
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	7819      	ldrb	r1, [r3, #0]
 8003c5c:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003c5e:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c60:	2900      	cmp	r1, #0
 8003c62:	d1f4      	bne.n	8003c4e <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003c64:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c66:	490f      	ldr	r1, [pc, #60]	; (8003ca4 <FindRoute+0x18c>)
 8003c68:	4b0f      	ldr	r3, [pc, #60]	; (8003ca8 <FindRoute+0x190>)
 8003c6a:	4453      	add	r3, sl
 8003c6c:	001f      	movs	r7, r3
 8003c6e:	3f01      	subs	r7, #1
 8003c70:	e003      	b.n	8003c7a <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003c72:	3001      	adds	r0, #1
 8003c74:	3502      	adds	r5, #2
 8003c76:	2807      	cmp	r0, #7
 8003c78:	d00b      	beq.n	8003c92 <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003c7a:	882b      	ldrh	r3, [r5, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0f8      	beq.n	8003c72 <FindRoute+0x15a>
 8003c80:	783a      	ldrb	r2, [r7, #0]
 8003c82:	188a      	adds	r2, r1, r2
 8003c84:	3a01      	subs	r2, #1
 8003c86:	7812      	ldrb	r2, [r2, #0]
 8003c88:	08db      	lsrs	r3, r3, #3
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d1f1      	bne.n	8003c72 <FindRoute+0x15a>
			return col;
 8003c8e:	b2c0      	uxtb	r0, r0
 8003c90:	e000      	b.n	8003c94 <FindRoute+0x17c>
	return 0;
 8003c92:	2000      	movs	r0, #0
}
 8003c94:	b00f      	add	sp, #60	; 0x3c
 8003c96:	bc3c      	pop	{r2, r3, r4, r5}
 8003c98:	4690      	mov	r8, r2
 8003c9a:	4699      	mov	r9, r3
 8003c9c:	46a2      	mov	sl, r4
 8003c9e:	46ab      	mov	fp, r5
 8003ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	20006f18 	.word	0x20006f18
 8003ca8:	2000118c 	.word	0x2000118c
 8003cac:	200011a8 	.word	0x200011a8
 8003cb0:	20000aec 	.word	0x20000aec
 8003cb4:	20000044 	.word	0x20000044

08003cb8 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	46d6      	mov	lr, sl
 8003cbc:	464f      	mov	r7, r9
 8003cbe:	4646      	mov	r6, r8
 8003cc0:	b5c0      	push	{r6, r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	0005      	movs	r5, r0
 8003cc6:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc8:	4c56      	ldr	r4, [pc, #344]	; (8003e24 <DisplayTopology+0x16c>)
 8003cca:	4b57      	ldr	r3, [pc, #348]	; (8003e28 <DisplayTopology+0x170>)
 8003ccc:	0022      	movs	r2, r4
 8003cce:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003cd0:	c243      	stmia	r2!, {r0, r1, r6}
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	889b      	ldrh	r3, [r3, #4]
 8003cd8:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cda:	0020      	movs	r0, r4
 8003cdc:	f7fc fa1c 	bl	8000118 <strlen>
 8003ce0:	b282      	uxth	r2, r0
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	425b      	negs	r3, r3
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	3333      	adds	r3, #51	; 0x33
 8003cea:	0021      	movs	r1, r4
 8003cec:	0028      	movs	r0, r5
 8003cee:	f00a fcfb 	bl	800e6e8 <writePxMutex>
 8003cf2:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003cf4:	4f4d      	ldr	r7, [pc, #308]	; (8003e2c <DisplayTopology+0x174>)
 8003cf6:	4d4b      	ldr	r5, [pc, #300]	; (8003e24 <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf8:	2601      	movs	r6, #1
 8003cfa:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003cfc:	0022      	movs	r2, r4
 8003cfe:	0039      	movs	r1, r7
 8003d00:	0028      	movs	r0, r5
 8003d02:	f010 fef9 	bl	8014af8 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d06:	0028      	movs	r0, r5
 8003d08:	f7fc fa06 	bl	8000118 <strlen>
 8003d0c:	b282      	uxth	r2, r0
 8003d0e:	9600      	str	r6, [sp, #0]
 8003d10:	2332      	movs	r3, #50	; 0x32
 8003d12:	0029      	movs	r1, r5
 8003d14:	9803      	ldr	r0, [sp, #12]
 8003d16:	f00a fce7 	bl	800e6e8 <writePxMutex>
 8003d1a:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d1c:	2c07      	cmp	r4, #7
 8003d1e:	d1ed      	bne.n	8003cfc <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d20:	2301      	movs	r3, #1
 8003d22:	425b      	negs	r3, r3
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	3333      	adds	r3, #51	; 0x33
 8003d28:	2203      	movs	r2, #3
 8003d2a:	4941      	ldr	r1, [pc, #260]	; (8003e30 <DisplayTopology+0x178>)
 8003d2c:	9803      	ldr	r0, [sp, #12]
 8003d2e:	f00a fcdb 	bl	800e6e8 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d32:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <DisplayTopology+0x17c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d065      	beq.n	8003e06 <DisplayTopology+0x14e>
 8003d3a:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d3c:	2701      	movs	r7, #1
 8003d3e:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d40:	4b3d      	ldr	r3, [pc, #244]	; (8003e38 <DisplayTopology+0x180>)
 8003d42:	4699      	mov	r9, r3
 8003d44:	230e      	movs	r3, #14
 8003d46:	444b      	add	r3, r9
 8003d48:	469a      	mov	sl, r3
 8003d4a:	e02a      	b.n	8003da2 <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d4c:	2307      	movs	r3, #7
 8003d4e:	4013      	ands	r3, r2
 8003d50:	08d2      	lsrs	r2, r2, #3
 8003d52:	493a      	ldr	r1, [pc, #232]	; (8003e3c <DisplayTopology+0x184>)
 8003d54:	4833      	ldr	r0, [pc, #204]	; (8003e24 <DisplayTopology+0x16c>)
 8003d56:	f010 fecf 	bl	8014af8 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d5a:	4d32      	ldr	r5, [pc, #200]	; (8003e24 <DisplayTopology+0x16c>)
 8003d5c:	0028      	movs	r0, r5
 8003d5e:	f7fc f9db 	bl	8000118 <strlen>
 8003d62:	b282      	uxth	r2, r0
 8003d64:	9700      	str	r7, [sp, #0]
 8003d66:	2332      	movs	r3, #50	; 0x32
 8003d68:	0029      	movs	r1, r5
 8003d6a:	9803      	ldr	r0, [sp, #12]
 8003d6c:	f00a fcbc 	bl	800e6e8 <writePxMutex>
 8003d70:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d72:	42b4      	cmp	r4, r6
 8003d74:	d007      	beq.n	8003d86 <DisplayTopology+0xce>
			if(!array[row][col])
 8003d76:	8822      	ldrh	r2, [r4, #0]
 8003d78:	2a00      	cmp	r2, #0
 8003d7a:	d1e7      	bne.n	8003d4c <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003d7c:	4930      	ldr	r1, [pc, #192]	; (8003e40 <DisplayTopology+0x188>)
 8003d7e:	4829      	ldr	r0, [pc, #164]	; (8003e24 <DisplayTopology+0x16c>)
 8003d80:	f010 feba 	bl	8014af8 <sprintf>
 8003d84:	e7e9      	b.n	8003d5a <DisplayTopology+0xa2>
 8003d86:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d88:	9700      	str	r7, [sp, #0]
 8003d8a:	2332      	movs	r3, #50	; 0x32
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	492d      	ldr	r1, [pc, #180]	; (8003e44 <DisplayTopology+0x18c>)
 8003d90:	9803      	ldr	r0, [sp, #12]
 8003d92:	f00a fca9 	bl	800e6e8 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d96:	3601      	adds	r6, #1
 8003d98:	b2f6      	uxtb	r6, r6
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <DisplayTopology+0x17c>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	42b3      	cmp	r3, r6
 8003da0:	d931      	bls.n	8003e06 <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003da2:	1c72      	adds	r2, r6, #1
 8003da4:	4c1f      	ldr	r4, [pc, #124]	; (8003e24 <DisplayTopology+0x16c>)
 8003da6:	4928      	ldr	r1, [pc, #160]	; (8003e48 <DisplayTopology+0x190>)
 8003da8:	0020      	movs	r0, r4
 8003daa:	f010 fea5 	bl	8014af8 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dae:	0020      	movs	r0, r4
 8003db0:	f7fc f9b2 	bl	8000118 <strlen>
 8003db4:	b282      	uxth	r2, r0
 8003db6:	9700      	str	r7, [sp, #0]
 8003db8:	2332      	movs	r3, #50	; 0x32
 8003dba:	0021      	movs	r1, r4
 8003dbc:	9803      	ldr	r0, [sp, #12]
 8003dbe:	f00a fc93 	bl	800e6e8 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003dc2:	2516      	movs	r5, #22
 8003dc4:	4375      	muls	r5, r6
 8003dc6:	464b      	mov	r3, r9
 8003dc8:	5aeb      	ldrh	r3, [r5, r3]
 8003dca:	0059      	lsls	r1, r3, #1
 8003dcc:	18c9      	adds	r1, r1, r3
 8003dce:	0049      	lsls	r1, r1, #1
 8003dd0:	4b1e      	ldr	r3, [pc, #120]	; (8003e4c <DisplayTopology+0x194>)
 8003dd2:	18c9      	adds	r1, r1, r3
 8003dd4:	2205      	movs	r2, #5
 8003dd6:	0020      	movs	r0, r4
 8003dd8:	f010 fee3 	bl	8014ba2 <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003ddc:	9700      	str	r7, [sp, #0]
 8003dde:	2332      	movs	r3, #50	; 0x32
 8003de0:	2205      	movs	r2, #5
 8003de2:	0021      	movs	r1, r4
 8003de4:	9c03      	ldr	r4, [sp, #12]
 8003de6:	0020      	movs	r0, r4
 8003de8:	f00a fc7e 	bl	800e6e8 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003dec:	9700      	str	r7, [sp, #0]
 8003dee:	2332      	movs	r3, #50	; 0x32
 8003df0:	2201      	movs	r2, #1
 8003df2:	4917      	ldr	r1, [pc, #92]	; (8003e50 <DisplayTopology+0x198>)
 8003df4:	0020      	movs	r0, r4
 8003df6:	f00a fc77 	bl	800e6e8 <writePxMutex>
 8003dfa:	1cac      	adds	r4, r5, #2
 8003dfc:	444c      	add	r4, r9
 8003dfe:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003e00:	46b0      	mov	r8, r6
 8003e02:	002e      	movs	r6, r5
 8003e04:	e7b7      	b.n	8003d76 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003e06:	2301      	movs	r3, #1
 8003e08:	425b      	negs	r3, r3
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	3333      	adds	r3, #51	; 0x33
 8003e0e:	2201      	movs	r2, #1
 8003e10:	4910      	ldr	r1, [pc, #64]	; (8003e54 <DisplayTopology+0x19c>)
 8003e12:	9803      	ldr	r0, [sp, #12]
 8003e14:	f00a fc68 	bl	800e6e8 <writePxMutex>
}
 8003e18:	b004      	add	sp, #16
 8003e1a:	bc1c      	pop	{r2, r3, r4}
 8003e1c:	4690      	mov	r8, r2
 8003e1e:	4699      	mov	r9, r3
 8003e20:	46a2      	mov	sl, r4
 8003e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e24:	2000111c 	.word	0x2000111c
 8003e28:	0801921c 	.word	0x0801921c
 8003e2c:	08019230 	.word	0x08019230
 8003e30:	0801a940 	.word	0x0801a940
 8003e34:	20000044 	.word	0x20000044
 8003e38:	20000aec 	.word	0x20000aec
 8003e3c:	08019248 	.word	0x08019248
 8003e40:	08019244 	.word	0x08019244
 8003e44:	080190c4 	.word	0x080190c4
 8003e48:	08019238 	.word	0x08019238
 8003e4c:	08019284 	.word	0x08019284
 8003e50:	0801922c 	.word	0x0801922c
 8003e54:	0801ab04 	.word	0x0801ab04

08003e58 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e5a:	46c6      	mov	lr, r8
 8003e5c:	b500      	push	{lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	0005      	movs	r5, r0
 8003e62:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e64:	4c30      	ldr	r4, [pc, #192]	; (8003f28 <DisplayPortsDir+0xd0>)
 8003e66:	4b31      	ldr	r3, [pc, #196]	; (8003f2c <DisplayPortsDir+0xd4>)
 8003e68:	0022      	movs	r2, r4
 8003e6a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e6c:	c243      	stmia	r2!, {r0, r1, r6}
 8003e6e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e70:	c243      	stmia	r2!, {r0, r1, r6}
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e76:	0020      	movs	r0, r4
 8003e78:	f7fc f94e 	bl	8000118 <strlen>
 8003e7c:	b282      	uxth	r2, r0
 8003e7e:	2301      	movs	r3, #1
 8003e80:	425b      	negs	r3, r3
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	3333      	adds	r3, #51	; 0x33
 8003e86:	0021      	movs	r1, r4
 8003e88:	0028      	movs	r0, r5
 8003e8a:	f00a fc2d 	bl	800e6e8 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e8e:	4b28      	ldr	r3, [pc, #160]	; (8003f30 <DisplayPortsDir+0xd8>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2201      	movs	r2, #1
 8003e94:	4690      	mov	r8, r2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d02c      	beq.n	8003ef4 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e9a:	4e26      	ldr	r6, [pc, #152]	; (8003f34 <DisplayPortsDir+0xdc>)
 8003e9c:	e025      	b.n	8003eea <DisplayPortsDir+0x92>
 8003e9e:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003ea0:	2c0a      	cmp	r4, #10
 8003ea2:	d01a      	beq.n	8003eda <DisplayPortsDir+0x82>
 8003ea4:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ea6:	5ba9      	ldrh	r1, [r5, r6]
 8003ea8:	2280      	movs	r2, #128	; 0x80
 8003eaa:	0212      	lsls	r2, r2, #8
 8003eac:	411a      	asrs	r2, r3
 8003eae:	420a      	tst	r2, r1
 8003eb0:	d0f5      	beq.n	8003e9e <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eb2:	4f1d      	ldr	r7, [pc, #116]	; (8003f28 <DisplayPortsDir+0xd0>)
 8003eb4:	0023      	movs	r3, r4
 8003eb6:	4642      	mov	r2, r8
 8003eb8:	491f      	ldr	r1, [pc, #124]	; (8003f38 <DisplayPortsDir+0xe0>)
 8003eba:	0038      	movs	r0, r7
 8003ebc:	f010 fe1c 	bl	8014af8 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003ec0:	0038      	movs	r0, r7
 8003ec2:	f7fc f929 	bl	8000118 <strlen>
 8003ec6:	b282      	uxth	r2, r0
 8003ec8:	2301      	movs	r3, #1
 8003eca:	425b      	negs	r3, r3
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	3333      	adds	r3, #51	; 0x33
 8003ed0:	0039      	movs	r1, r7
 8003ed2:	9803      	ldr	r0, [sp, #12]
 8003ed4:	f00a fc08 	bl	800e6e8 <writePxMutex>
 8003ed8:	e7e1      	b.n	8003e9e <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003eda:	4643      	mov	r3, r8
 8003edc:	3301      	adds	r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4698      	mov	r8, r3
 8003ee2:	4b13      	ldr	r3, [pc, #76]	; (8003f30 <DisplayPortsDir+0xd8>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	4543      	cmp	r3, r8
 8003ee8:	d304      	bcc.n	8003ef4 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003eea:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003eec:	4642      	mov	r2, r8
 8003eee:	1e55      	subs	r5, r2, #1
 8003ef0:	006d      	lsls	r5, r5, #1
 8003ef2:	e7d7      	b.n	8003ea4 <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003ef4:	4c0c      	ldr	r4, [pc, #48]	; (8003f28 <DisplayPortsDir+0xd0>)
 8003ef6:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <DisplayPortsDir+0xe4>)
 8003ef8:	0022      	movs	r2, r4
 8003efa:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003efc:	c223      	stmia	r2!, {r0, r1, r5}
 8003efe:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f00:	c223      	stmia	r2!, {r0, r1, r5}
 8003f02:	cb03      	ldmia	r3!, {r0, r1}
 8003f04:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f06:	0020      	movs	r0, r4
 8003f08:	f7fc f906 	bl	8000118 <strlen>
 8003f0c:	b282      	uxth	r2, r0
 8003f0e:	2301      	movs	r3, #1
 8003f10:	425b      	negs	r3, r3
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	3333      	adds	r3, #51	; 0x33
 8003f16:	0021      	movs	r1, r4
 8003f18:	9803      	ldr	r0, [sp, #12]
 8003f1a:	f00a fbe5 	bl	800e6e8 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f1e:	b004      	add	sp, #16
 8003f20:	bc04      	pop	{r2}
 8003f22:	4690      	mov	r8, r2
 8003f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	2000111c 	.word	0x2000111c
 8003f2c:	080191cc 	.word	0x080191cc
 8003f30:	20000044 	.word	0x20000044
 8003f34:	20007358 	.word	0x20007358
 8003f38:	080191e8 	.word	0x080191e8
 8003f3c:	080191fc 	.word	0x080191fc

08003f40 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f42:	46d6      	mov	lr, sl
 8003f44:	b500      	push	{lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f4a:	f00a fe89 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 8003f4e:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003f50:	2300      	movs	r3, #0
 8003f52:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f54:	4b8d      	ldr	r3, [pc, #564]	; (800418c <DisplayModuleStatus+0x24c>)
 8003f56:	781a      	ldrb	r2, [r3, #0]
 8003f58:	4d8d      	ldr	r5, [pc, #564]	; (8004190 <DisplayModuleStatus+0x250>)
 8003f5a:	498e      	ldr	r1, [pc, #568]	; (8004194 <DisplayModuleStatus+0x254>)
 8003f5c:	0028      	movs	r0, r5
 8003f5e:	f010 fdcb 	bl	8014af8 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f62:	0029      	movs	r1, r5
 8003f64:	0020      	movs	r0, r4
 8003f66:	f010 fde7 	bl	8014b38 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f6a:	4b8b      	ldr	r3, [pc, #556]	; (8004198 <DisplayModuleStatus+0x258>)
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	498b      	ldr	r1, [pc, #556]	; (800419c <DisplayModuleStatus+0x25c>)
 8003f70:	0028      	movs	r0, r5
 8003f72:	f010 fdc1 	bl	8014af8 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f76:	0029      	movs	r1, r5
 8003f78:	0020      	movs	r0, r4
 8003f7a:	f010 fddd 	bl	8014b38 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f7e:	2306      	movs	r3, #6
 8003f80:	9300      	str	r3, [sp, #0]
 8003f82:	3b04      	subs	r3, #4
 8003f84:	2200      	movs	r2, #0
 8003f86:	4986      	ldr	r1, [pc, #536]	; (80041a0 <DisplayModuleStatus+0x260>)
 8003f88:	0028      	movs	r0, r5
 8003f8a:	f010 fdb5 	bl	8014af8 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8e:	0029      	movs	r1, r5
 8003f90:	0020      	movs	r0, r4
 8003f92:	f010 fdd1 	bl	8014b38 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f96:	4a83      	ldr	r2, [pc, #524]	; (80041a4 <DisplayModuleStatus+0x264>)
 8003f98:	4983      	ldr	r1, [pc, #524]	; (80041a8 <DisplayModuleStatus+0x268>)
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	f010 fdac 	bl	8014af8 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fa0:	0029      	movs	r1, r5
 8003fa2:	0020      	movs	r0, r4
 8003fa4:	f010 fdc8 	bl	8014b38 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003fa8:	4a80      	ldr	r2, [pc, #512]	; (80041ac <DisplayModuleStatus+0x26c>)
 8003faa:	4981      	ldr	r1, [pc, #516]	; (80041b0 <DisplayModuleStatus+0x270>)
 8003fac:	0028      	movs	r0, r5
 8003fae:	f010 fda3 	bl	8014af8 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fb2:	0029      	movs	r1, r5
 8003fb4:	0020      	movs	r0, r4
 8003fb6:	f010 fdbf 	bl	8014b38 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fba:	4b7e      	ldr	r3, [pc, #504]	; (80041b4 <DisplayModuleStatus+0x274>)
 8003fbc:	002a      	movs	r2, r5
 8003fbe:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fc0:	c243      	stmia	r2!, {r0, r1, r6}
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	6011      	str	r1, [r2, #0]
 8003fc6:	8899      	ldrh	r1, [r3, #4]
 8003fc8:	8091      	strh	r1, [r2, #4]
 8003fca:	799b      	ldrb	r3, [r3, #6]
 8003fcc:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fce:	0029      	movs	r1, r5
 8003fd0:	0020      	movs	r0, r4
 8003fd2:	f010 fdb1 	bl	8014b38 <strcat>
 8003fd6:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003fd8:	4d6d      	ldr	r5, [pc, #436]	; (8004190 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003fda:	4b77      	ldr	r3, [pc, #476]	; (80041b8 <DisplayModuleStatus+0x278>)
 8003fdc:	469a      	mov	sl, r3
 8003fde:	e00e      	b.n	8003ffe <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003fe0:	4b6b      	ldr	r3, [pc, #428]	; (8004190 <DisplayModuleStatus+0x250>)
 8003fe2:	4a76      	ldr	r2, [pc, #472]	; (80041bc <DisplayModuleStatus+0x27c>)
 8003fe4:	6811      	ldr	r1, [r2, #0]
 8003fe6:	6019      	str	r1, [r3, #0]
 8003fe8:	8891      	ldrh	r1, [r2, #4]
 8003fea:	8099      	strh	r1, [r3, #4]
 8003fec:	7992      	ldrb	r2, [r2, #6]
 8003fee:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003ff0:	4967      	ldr	r1, [pc, #412]	; (8004190 <DisplayModuleStatus+0x250>)
 8003ff2:	0020      	movs	r0, r4
 8003ff4:	f010 fda0 	bl	8014b38 <strcat>
 8003ff8:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003ffa:	2f07      	cmp	r7, #7
 8003ffc:	d039      	beq.n	8004072 <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003ffe:	003a      	movs	r2, r7
 8004000:	496f      	ldr	r1, [pc, #444]	; (80041c0 <DisplayModuleStatus+0x280>)
 8004002:	0028      	movs	r0, r5
 8004004:	f010 fd78 	bl	8014af8 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004008:	0029      	movs	r1, r5
 800400a:	0020      	movs	r0, r4
 800400c:	f010 fd94 	bl	8014b38 <strcat>
		switch(portStatus[i]){
 8004010:	4653      	mov	r3, sl
 8004012:	5cfb      	ldrb	r3, [r7, r3]
 8004014:	2b04      	cmp	r3, #4
 8004016:	d8eb      	bhi.n	8003ff0 <DisplayModuleStatus+0xb0>
 8004018:	4653      	mov	r3, sl
 800401a:	5cfb      	ldrb	r3, [r7, r3]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4a69      	ldr	r2, [pc, #420]	; (80041c4 <DisplayModuleStatus+0x284>)
 8004020:	58d3      	ldr	r3, [r2, r3]
 8004022:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004024:	495a      	ldr	r1, [pc, #360]	; (8004190 <DisplayModuleStatus+0x250>)
 8004026:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <DisplayModuleStatus+0x288>)
 8004028:	000a      	movs	r2, r1
 800402a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800402c:	c243      	stmia	r2!, {r0, r1, r6}
 800402e:	cb03      	ldmia	r3!, {r0, r1}
 8004030:	c203      	stmia	r2!, {r0, r1}
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	7013      	strb	r3, [r2, #0]
				break;
 8004036:	e7db      	b.n	8003ff0 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004038:	4a55      	ldr	r2, [pc, #340]	; (8004190 <DisplayModuleStatus+0x250>)
 800403a:	4b64      	ldr	r3, [pc, #400]	; (80041cc <DisplayModuleStatus+0x28c>)
 800403c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800403e:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 8004040:	e7d6      	b.n	8003ff0 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 8004042:	4953      	ldr	r1, [pc, #332]	; (8004190 <DisplayModuleStatus+0x250>)
 8004044:	4b62      	ldr	r3, [pc, #392]	; (80041d0 <DisplayModuleStatus+0x290>)
 8004046:	000a      	movs	r2, r1
 8004048:	cb43      	ldmia	r3!, {r0, r1, r6}
 800404a:	c243      	stmia	r2!, {r0, r1, r6}
 800404c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800404e:	c243      	stmia	r2!, {r0, r1, r6}
 8004050:	881b      	ldrh	r3, [r3, #0]
 8004052:	8013      	strh	r3, [r2, #0]
				break;
 8004054:	e7cc      	b.n	8003ff0 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004056:	494e      	ldr	r1, [pc, #312]	; (8004190 <DisplayModuleStatus+0x250>)
 8004058:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <DisplayModuleStatus+0x294>)
 800405a:	000a      	movs	r2, r1
 800405c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800405e:	c243      	stmia	r2!, {r0, r1, r6}
 8004060:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004062:	c243      	stmia	r2!, {r0, r1, r6}
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	6011      	str	r1, [r2, #0]
 8004068:	8899      	ldrh	r1, [r3, #4]
 800406a:	8091      	strh	r1, [r2, #4]
 800406c:	799b      	ldrb	r3, [r3, #6]
 800406e:	7193      	strb	r3, [r2, #6]
				break;
 8004070:	e7be      	b.n	8003ff0 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 8004072:	4947      	ldr	r1, [pc, #284]	; (8004190 <DisplayModuleStatus+0x250>)
 8004074:	4b58      	ldr	r3, [pc, #352]	; (80041d8 <DisplayModuleStatus+0x298>)
 8004076:	000a      	movs	r2, r1
 8004078:	cb61      	ldmia	r3!, {r0, r5, r6}
 800407a:	c261      	stmia	r2!, {r0, r5, r6}
 800407c:	cb61      	ldmia	r3!, {r0, r5, r6}
 800407e:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 8004080:	0020      	movs	r0, r4
 8004082:	f010 fd59 	bl	8014b38 <strcat>
 8004086:	4f55      	ldr	r7, [pc, #340]	; (80041dc <DisplayModuleStatus+0x29c>)
 8004088:	2601      	movs	r6, #1
 800408a:	e00d      	b.n	80040a8 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 800408c:	4d40      	ldr	r5, [pc, #256]	; (8004190 <DisplayModuleStatus+0x250>)
 800408e:	0032      	movs	r2, r6
 8004090:	4953      	ldr	r1, [pc, #332]	; (80041e0 <DisplayModuleStatus+0x2a0>)
 8004092:	0028      	movs	r0, r5
 8004094:	f010 fd30 	bl	8014af8 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004098:	0029      	movs	r1, r5
 800409a:	0020      	movs	r0, r4
 800409c:	f010 fd4c 	bl	8014b38 <strcat>
 80040a0:	3601      	adds	r6, #1
 80040a2:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040a4:	2e07      	cmp	r6, #7
 80040a6:	d018      	beq.n	80040da <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0ee      	beq.n	800408c <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 80040ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040b0:	f006 ffea 	bl	800b088 <GetPort>
 80040b4:	0005      	movs	r5, r0
 80040b6:	00b3      	lsls	r3, r6, #2
 80040b8:	3b04      	subs	r3, #4
 80040ba:	4a4a      	ldr	r2, [pc, #296]	; (80041e4 <DisplayModuleStatus+0x2a4>)
 80040bc:	58d0      	ldr	r0, [r2, r3]
 80040be:	f006 ffe3 	bl	800b088 <GetPort>
 80040c2:	9000      	str	r0, [sp, #0]
 80040c4:	002b      	movs	r3, r5
 80040c6:	0032      	movs	r2, r6
 80040c8:	4947      	ldr	r1, [pc, #284]	; (80041e8 <DisplayModuleStatus+0x2a8>)
 80040ca:	4831      	ldr	r0, [pc, #196]	; (8004190 <DisplayModuleStatus+0x250>)
 80040cc:	f010 fd14 	bl	8014af8 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040d0:	492f      	ldr	r1, [pc, #188]	; (8004190 <DisplayModuleStatus+0x250>)
 80040d2:	0020      	movs	r0, r4
 80040d4:	f010 fd30 	bl	8014b38 <strcat>
 80040d8:	e7e2      	b.n	80040a0 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80040da:	0020      	movs	r0, r4
 80040dc:	f7fc f81c 	bl	8000118 <strlen>
 80040e0:	1820      	adds	r0, r4, r0
 80040e2:	2203      	movs	r2, #3
 80040e4:	4941      	ldr	r1, [pc, #260]	; (80041ec <DisplayModuleStatus+0x2ac>)
 80040e6:	f010 fad2 	bl	801468e <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80040ea:	0020      	movs	r0, r4
 80040ec:	f7fc f814 	bl	8000118 <strlen>
 80040f0:	1820      	adds	r0, r4, r0
 80040f2:	221d      	movs	r2, #29
 80040f4:	493e      	ldr	r1, [pc, #248]	; (80041f0 <DisplayModuleStatus+0x2b0>)
 80040f6:	f010 faca 	bl	801468e <memcpy>
	temp =strlen((char* )pcOutputString);
 80040fa:	0020      	movs	r0, r4
 80040fc:	f7fc f80c 	bl	8000118 <strlen>
 8004100:	4682      	mov	sl, r0
 8004102:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004104:	4f3b      	ldr	r7, [pc, #236]	; (80041f4 <DisplayModuleStatus+0x2b4>)
 8004106:	4e21      	ldr	r6, [pc, #132]	; (800418c <DisplayModuleStatus+0x24c>)
 8004108:	e002      	b.n	8004110 <DisplayModuleStatus+0x1d0>
 800410a:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 800410c:	2d06      	cmp	r5, #6
 800410e:	d013      	beq.n	8004138 <DisplayModuleStatus+0x1f8>
 8004110:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004112:	7833      	ldrb	r3, [r6, #0]
 8004114:	3b01      	subs	r3, #1
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	5bd9      	ldrh	r1, [r3, r7]
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	4113      	asrs	r3, r2
 8004120:	420b      	tst	r3, r1
 8004122:	d0f2      	beq.n	800410a <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004124:	002a      	movs	r2, r5
 8004126:	4934      	ldr	r1, [pc, #208]	; (80041f8 <DisplayModuleStatus+0x2b8>)
 8004128:	4819      	ldr	r0, [pc, #100]	; (8004190 <DisplayModuleStatus+0x250>)
 800412a:	f010 fce5 	bl	8014af8 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800412e:	4918      	ldr	r1, [pc, #96]	; (8004190 <DisplayModuleStatus+0x250>)
 8004130:	0020      	movs	r0, r4
 8004132:	f010 fd01 	bl	8014b38 <strcat>
 8004136:	e7e8      	b.n	800410a <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004138:	0020      	movs	r0, r4
 800413a:	f7fb ffed 	bl	8000118 <strlen>
 800413e:	4653      	mov	r3, sl
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	0c1b      	lsrs	r3, r3, #16
 8004144:	4298      	cmp	r0, r3
 8004146:	d00e      	beq.n	8004166 <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004148:	0020      	movs	r0, r4
 800414a:	f7fb ffe5 	bl	8000118 <strlen>
 800414e:	1820      	adds	r0, r4, r0
 8004150:	2203      	movs	r2, #3
 8004152:	4926      	ldr	r1, [pc, #152]	; (80041ec <DisplayModuleStatus+0x2ac>)
 8004154:	f010 fa9b 	bl	801468e <memcpy>
	
	/* Display output */
	if(port)
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 800415e:	b004      	add	sp, #16
 8004160:	bc04      	pop	{r2}
 8004162:	4692      	mov	sl, r2
 8004164:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8004166:	1820      	adds	r0, r4, r0
 8004168:	2205      	movs	r2, #5
 800416a:	4924      	ldr	r1, [pc, #144]	; (80041fc <DisplayModuleStatus+0x2bc>)
 800416c:	f010 fa8f 	bl	801468e <memcpy>
 8004170:	e7ea      	b.n	8004148 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004172:	0020      	movs	r0, r4
 8004174:	f7fb ffd0 	bl	8000118 <strlen>
 8004178:	b282      	uxth	r2, r0
 800417a:	2301      	movs	r3, #1
 800417c:	425b      	negs	r3, r3
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	3333      	adds	r3, #51	; 0x33
 8004182:	0021      	movs	r1, r4
 8004184:	9803      	ldr	r0, [sp, #12]
 8004186:	f00a faaf 	bl	800e6e8 <writePxMutex>
}
 800418a:	e7e8      	b.n	800415e <DisplayModuleStatus+0x21e>
 800418c:	200010ea 	.word	0x200010ea
 8004190:	2000111c 	.word	0x2000111c
 8004194:	08019010 	.word	0x08019010
 8004198:	20000ae8 	.word	0x20000ae8
 800419c:	0801902c 	.word	0x0801902c
 80041a0:	08019048 	.word	0x08019048
 80041a4:	08019068 	.word	0x08019068
 80041a8:	08019074 	.word	0x08019074
 80041ac:	0801908c 	.word	0x0801908c
 80041b0:	08019098 	.word	0x08019098
 80041b4:	080190b4 	.word	0x080190b4
 80041b8:	2000116c 	.word	0x2000116c
 80041bc:	080190d0 	.word	0x080190d0
 80041c0:	080190c8 	.word	0x080190c8
 80041c4:	08018fec 	.word	0x08018fec
 80041c8:	080190d8 	.word	0x080190d8
 80041cc:	080190f0 	.word	0x080190f0
 80041d0:	080190fc 	.word	0x080190fc
 80041d4:	08019118 	.word	0x08019118
 80041d8:	08019138 	.word	0x08019138
 80041dc:	20001d6c 	.word	0x20001d6c
 80041e0:	08019150 	.word	0x08019150
 80041e4:	20001820 	.word	0x20001820
 80041e8:	0801916c 	.word	0x0801916c
 80041ec:	080190c4 	.word	0x080190c4
 80041f0:	0801919c 	.word	0x0801919c
 80041f4:	20007358 	.word	0x20007358
 80041f8:	080191bc 	.word	0x080191bc
 80041fc:	080191c4 	.word	0x080191c4

08004200 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	46c6      	mov	lr, r8
 8004204:	b500      	push	{lr}
 8004206:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004208:	4929      	ldr	r1, [pc, #164]	; (80042b0 <GetID+0xb0>)
 800420a:	f7fb ff7b 	bl	8000104 <strcmp>
 800420e:	2800      	cmp	r0, #0
 8004210:	d010      	beq.n	8004234 <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 8004212:	4928      	ldr	r1, [pc, #160]	; (80042b4 <GetID+0xb4>)
 8004214:	0028      	movs	r0, r5
 8004216:	f7fb ff75 	bl	8000104 <strcmp>
 800421a:	2800      	cmp	r0, #0
 800421c:	d045      	beq.n	80042aa <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800421e:	782b      	ldrb	r3, [r5, #0]
 8004220:	4698      	mov	r8, r3
 8004222:	2b23      	cmp	r3, #35	; 0x23
 8004224:	d00b      	beq.n	800423e <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004226:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <GetID+0xb8>)
 8004228:	781f      	ldrb	r7, [r3, #0]
 800422a:	2f00      	cmp	r7, #0
 800422c:	d02a      	beq.n	8004284 <GetID+0x84>
 800422e:	4e23      	ldr	r6, [pc, #140]	; (80042bc <GetID+0xbc>)
 8004230:	2400      	movs	r4, #0
 8004232:	e01c      	b.n	800426e <GetID+0x6e>
		return myID;
 8004234:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <GetID+0xc0>)
 8004236:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004238:	bc04      	pop	{r2}
 800423a:	4690      	mov	r8, r2
 800423c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 800423e:	1c68      	adds	r0, r5, #1
 8004240:	f00f ff9b 	bl	801417a <atol>
 8004244:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <GetID+0x52>
 800424a:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <GetID+0xb8>)
 800424c:	7812      	ldrb	r2, [r2, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d206      	bcs.n	8004260 <GetID+0x60>
		else if(id == myID)
 8004252:	4a1b      	ldr	r2, [pc, #108]	; (80042c0 <GetID+0xc0>)
 8004254:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 8004256:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004258:	429a      	cmp	r2, r3
 800425a:	d1ed      	bne.n	8004238 <GetID+0x38>
			return myID;
 800425c:	b210      	sxth	r0, r2
 800425e:	e7eb      	b.n	8004238 <GetID+0x38>
			return id;
 8004260:	b218      	sxth	r0, r3
 8004262:	e7e9      	b.n	8004238 <GetID+0x38>
		for(i =0; i < N; i++){
 8004264:	3401      	adds	r4, #1
 8004266:	b2e4      	uxtb	r4, r4
 8004268:	360a      	adds	r6, #10
 800426a:	42bc      	cmp	r4, r7
 800426c:	d00a      	beq.n	8004284 <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800426e:	0031      	movs	r1, r6
 8004270:	0028      	movs	r0, r5
 8004272:	f7fb ff47 	bl	8000104 <strcmp>
 8004276:	2800      	cmp	r0, #0
 8004278:	d1f4      	bne.n	8004264 <GetID+0x64>
 800427a:	4643      	mov	r3, r8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d0f1      	beq.n	8004264 <GetID+0x64>
				return (i);
 8004280:	b220      	sxth	r0, r4
 8004282:	e7d9      	b.n	8004238 <GetID+0x38>
 8004284:	4f0f      	ldr	r7, [pc, #60]	; (80042c4 <GetID+0xc4>)
		for(i =0; i < N; i++){
 8004286:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8004288:	0039      	movs	r1, r7
 800428a:	0028      	movs	r0, r5
 800428c:	f7fb ff3a 	bl	8000104 <strcmp>
 8004290:	2800      	cmp	r0, #0
 8004292:	d005      	beq.n	80042a0 <GetID+0xa0>
 8004294:	3601      	adds	r6, #1
 8004296:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004298:	2e0a      	cmp	r6, #10
 800429a:	d1f5      	bne.n	8004288 <GetID+0x88>
		return BOS_ERR_WrongName;
 800429c:	2064      	movs	r0, #100	; 0x64
 800429e:	e7cb      	b.n	8004238 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 80042a0:	0234      	lsls	r4, r6, #8
 80042a2:	20fe      	movs	r0, #254	; 0xfe
 80042a4:	4320      	orrs	r0, r4
 80042a6:	b200      	sxth	r0, r0
 80042a8:	e7c6      	b.n	8004238 <GetID+0x38>
		return BOS_BROADCAST;
 80042aa:	20ff      	movs	r0, #255	; 0xff
 80042ac:	e7c4      	b.n	8004238 <GetID+0x38>
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	08019250 	.word	0x08019250
 80042b4:	08019254 	.word	0x08019254
 80042b8:	20000044 	.word	0x20000044
 80042bc:	20000fdc 	.word	0x20000fdc
 80042c0:	200010ea 	.word	0x200010ea
 80042c4:	20000ed0 	.word	0x20000ed0

080042c8 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	b083      	sub	sp, #12
 80042cc:	9001      	str	r0, [sp, #4]
 80042ce:	000d      	movs	r5, r1
 80042d0:	4c2a      	ldr	r4, [pc, #168]	; (800437c <NameModule+0xb4>)
 80042d2:	0027      	movs	r7, r4
 80042d4:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042d6:	0021      	movs	r1, r4
 80042d8:	0028      	movs	r0, r5
 80042da:	f7fb ff13 	bl	8000104 <strcmp>
 80042de:	2800      	cmp	r0, #0
 80042e0:	d043      	beq.n	800436a <NameModule+0xa2>
 80042e2:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042e4:	42bc      	cmp	r4, r7
 80042e6:	d1f6      	bne.n	80042d6 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042e8:	4b25      	ldr	r3, [pc, #148]	; (8004380 <NameModule+0xb8>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d90f      	bls.n	8004310 <NameModule+0x48>
 80042f0:	4c24      	ldr	r4, [pc, #144]	; (8004384 <NameModule+0xbc>)
 80042f2:	009f      	lsls	r7, r3, #2
 80042f4:	18ff      	adds	r7, r7, r3
 80042f6:	007f      	lsls	r7, r7, #1
 80042f8:	0023      	movs	r3, r4
 80042fa:	3b0a      	subs	r3, #10
 80042fc:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 80042fe:	0021      	movs	r1, r4
 8004300:	0028      	movs	r0, r5
 8004302:	f7fb feff 	bl	8000104 <strcmp>
 8004306:	2800      	cmp	r0, #0
 8004308:	d031      	beq.n	800436e <NameModule+0xa6>
 800430a:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 800430c:	42bc      	cmp	r4, r7
 800430e:	d1f6      	bne.n	80042fe <NameModule+0x36>
 8004310:	4c1d      	ldr	r4, [pc, #116]	; (8004388 <NameModule+0xc0>)
 8004312:	0027      	movs	r7, r4
 8004314:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 8004316:	0021      	movs	r1, r4
 8004318:	0028      	movs	r0, r5
 800431a:	f7fb fef3 	bl	8000104 <strcmp>
 800431e:	2800      	cmp	r0, #0
 8004320:	d028      	beq.n	8004374 <NameModule+0xac>
 8004322:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004324:	42bc      	cmp	r4, r7
 8004326:	d1f6      	bne.n	8004316 <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004328:	4c18      	ldr	r4, [pc, #96]	; (800438c <NameModule+0xc4>)
 800432a:	4b19      	ldr	r3, [pc, #100]	; (8004390 <NameModule+0xc8>)
 800432c:	601c      	str	r4, [r3, #0]
 800432e:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004334:	0038      	movs	r0, r7
 8004336:	f7fb feef 	bl	8000118 <strlen>
 800433a:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800433c:	0039      	movs	r1, r7
 800433e:	0028      	movs	r0, r5
 8004340:	f010 fc1e 	bl	8014b80 <strncmp>
 8004344:	2800      	cmp	r0, #0
 8004346:	d017      	beq.n	8004378 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004348:	6864      	ldr	r4, [r4, #4]
 800434a:	6034      	str	r4, [r6, #0]
 800434c:	2c00      	cmp	r4, #0
 800434e:	d1ef      	bne.n	8004330 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 8004350:	9b01      	ldr	r3, [sp, #4]
 8004352:	0098      	lsls	r0, r3, #2
 8004354:	469c      	mov	ip, r3
 8004356:	4460      	add	r0, ip
 8004358:	0040      	lsls	r0, r0, #1
 800435a:	4e0e      	ldr	r6, [pc, #56]	; (8004394 <NameModule+0xcc>)
 800435c:	1980      	adds	r0, r0, r6
 800435e:	0029      	movs	r1, r5
 8004360:	f010 fc06 	bl	8014b70 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004364:	f7ff f88e 	bl	8003484 <SaveEEalias>
	
	return result;
 8004368:	e002      	b.n	8004370 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 800436a:	2006      	movs	r0, #6
 800436c:	e000      	b.n	8004370 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 800436e:	2007      	movs	r0, #7
}
 8004370:	b003      	add	sp, #12
 8004372:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004374:	2007      	movs	r0, #7
 8004376:	e7fb      	b.n	8004370 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004378:	2008      	movs	r0, #8
 800437a:	e7f9      	b.n	8004370 <NameModule+0xa8>
 800437c:	08019000 	.word	0x08019000
 8004380:	20000044 	.word	0x20000044
 8004384:	20000fe6 	.word	0x20000fe6
 8004388:	20000ed0 	.word	0x20000ed0
 800438c:	20000108 	.word	0x20000108
 8004390:	20001174 	.word	0x20001174
 8004394:	20000fdc 	.word	0x20000fdc

08004398 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439a:	46c6      	mov	lr, r8
 800439c:	b500      	push	{lr}
 800439e:	0007      	movs	r7, r0
 80043a0:	000e      	movs	r6, r1
 80043a2:	4d3a      	ldr	r5, [pc, #232]	; (800448c <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80043a4:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80043a6:	0029      	movs	r1, r5
 80043a8:	0030      	movs	r0, r6
 80043aa:	f7fb feab 	bl	8000104 <strcmp>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d050      	beq.n	8004454 <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 80043b2:	3401      	adds	r4, #1
 80043b4:	350a      	adds	r5, #10
 80043b6:	2c0a      	cmp	r4, #10
 80043b8:	d1f5      	bne.n	80043a6 <AddModuleToGroup+0xe>
 80043ba:	4c35      	ldr	r4, [pc, #212]	; (8004490 <AddModuleToGroup+0xf8>)
 80043bc:	0025      	movs	r5, r4
 80043be:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043c0:	0021      	movs	r1, r4
 80043c2:	0030      	movs	r0, r6
 80043c4:	f7fb fe9e 	bl	8000104 <strcmp>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d058      	beq.n	800447e <AddModuleToGroup+0xe6>
 80043cc:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043ce:	42ac      	cmp	r4, r5
 80043d0:	d1f6      	bne.n	80043c0 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043d2:	4b30      	ldr	r3, [pc, #192]	; (8004494 <AddModuleToGroup+0xfc>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d90f      	bls.n	80043fa <AddModuleToGroup+0x62>
 80043da:	4c2f      	ldr	r4, [pc, #188]	; (8004498 <AddModuleToGroup+0x100>)
 80043dc:	009d      	lsls	r5, r3, #2
 80043de:	18ed      	adds	r5, r5, r3
 80043e0:	006d      	lsls	r5, r5, #1
 80043e2:	0023      	movs	r3, r4
 80043e4:	3b0a      	subs	r3, #10
 80043e6:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 80043e8:	0021      	movs	r1, r4
 80043ea:	0030      	movs	r0, r6
 80043ec:	f7fb fe8a 	bl	8000104 <strcmp>
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d046      	beq.n	8004482 <AddModuleToGroup+0xea>
 80043f4:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 80043f6:	42ac      	cmp	r4, r5
 80043f8:	d1f6      	bne.n	80043e8 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043fa:	4c28      	ldr	r4, [pc, #160]	; (800449c <AddModuleToGroup+0x104>)
 80043fc:	4b28      	ldr	r3, [pc, #160]	; (80044a0 <AddModuleToGroup+0x108>)
 80043fe:	601c      	str	r4, [r3, #0]
 8004400:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004406:	0028      	movs	r0, r5
 8004408:	f7fb fe86 	bl	8000118 <strlen>
 800440c:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800440e:	0029      	movs	r1, r5
 8004410:	0030      	movs	r0, r6
 8004412:	f010 fbb5 	bl	8014b80 <strncmp>
 8004416:	2800      	cmp	r0, #0
 8004418:	d035      	beq.n	8004486 <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800441a:	6864      	ldr	r4, [r4, #4]
 800441c:	4643      	mov	r3, r8
 800441e:	601c      	str	r4, [r3, #0]
 8004420:	2c00      	cmp	r4, #0
 8004422:	d1ee      	bne.n	8004402 <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <AddModuleToGroup+0xf4>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01e      	beq.n	800446a <AddModuleToGroup+0xd2>
 800442c:	4b17      	ldr	r3, [pc, #92]	; (800448c <AddModuleToGroup+0xf4>)
 800442e:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004430:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 8004432:	781a      	ldrb	r2, [r3, #0]
 8004434:	2a00      	cmp	r2, #0
 8004436:	d019      	beq.n	800446c <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004438:	3401      	adds	r4, #1
 800443a:	330a      	adds	r3, #10
 800443c:	2c0a      	cmp	r4, #10
 800443e:	d1f8      	bne.n	8004432 <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 8004440:	3f01      	subs	r7, #1
 8004442:	4918      	ldr	r1, [pc, #96]	; (80044a4 <AddModuleToGroup+0x10c>)
 8004444:	007f      	lsls	r7, r7, #1
 8004446:	2201      	movs	r2, #1
 8004448:	40a2      	lsls	r2, r4
 800444a:	5a7b      	ldrh	r3, [r7, r1]
 800444c:	4313      	orrs	r3, r2
 800444e:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 8004450:	2000      	movs	r0, #0
 8004452:	e007      	b.n	8004464 <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 8004454:	3f01      	subs	r7, #1
 8004456:	4913      	ldr	r1, [pc, #76]	; (80044a4 <AddModuleToGroup+0x10c>)
 8004458:	007f      	lsls	r7, r7, #1
 800445a:	2201      	movs	r2, #1
 800445c:	40a2      	lsls	r2, r4
 800445e:	5a7b      	ldrh	r3, [r7, r1]
 8004460:	4313      	orrs	r3, r2
 8004462:	527b      	strh	r3, [r7, r1]
}
 8004464:	bc04      	pop	{r2}
 8004466:	4690      	mov	r8, r2
 8004468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 800446a:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 800446c:	00a0      	lsls	r0, r4, #2
 800446e:	1900      	adds	r0, r0, r4
 8004470:	0040      	lsls	r0, r0, #1
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <AddModuleToGroup+0xf4>)
 8004474:	1818      	adds	r0, r3, r0
 8004476:	0031      	movs	r1, r6
 8004478:	f010 fb7a 	bl	8014b70 <strcpy>
			break;
 800447c:	e7e0      	b.n	8004440 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 800447e:	2006      	movs	r0, #6
 8004480:	e7f0      	b.n	8004464 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 8004482:	2007      	movs	r0, #7
 8004484:	e7ee      	b.n	8004464 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 8004486:	2008      	movs	r0, #8
 8004488:	e7ec      	b.n	8004464 <AddModuleToGroup+0xcc>
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	20000ed0 	.word	0x20000ed0
 8004490:	08019000 	.word	0x08019000
 8004494:	20000044 	.word	0x20000044
 8004498:	20000fe6 	.word	0x20000fe6
 800449c:	20000108 	.word	0x20000108
 80044a0:	20001178 	.word	0x20001178
 80044a4:	20000f34 	.word	0x20000f34

080044a8 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80044a8:	b510      	push	{r4, lr}
 80044aa:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80044ac:	201e      	movs	r0, #30
 80044ae:	f00f fea1 	bl	80141f4 <malloc>
 80044b2:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80044b4:	221e      	movs	r2, #30
 80044b6:	2100      	movs	r1, #0
 80044b8:	f010 f8f2 	bl	80146a0 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80044bc:	4908      	ldr	r1, [pc, #32]	; (80044e0 <GetDateString+0x38>)
 80044be:	7d8b      	ldrb	r3, [r1, #22]
 80044c0:	7d0a      	ldrb	r2, [r1, #20]
 80044c2:	3a01      	subs	r2, #1
 80044c4:	0092      	lsls	r2, r2, #2
 80044c6:	4807      	ldr	r0, [pc, #28]	; (80044e4 <GetDateString+0x3c>)
 80044c8:	5812      	ldr	r2, [r2, r0]
 80044ca:	8b08      	ldrh	r0, [r1, #24]
 80044cc:	9001      	str	r0, [sp, #4]
 80044ce:	7d49      	ldrb	r1, [r1, #21]
 80044d0:	9100      	str	r1, [sp, #0]
 80044d2:	4905      	ldr	r1, [pc, #20]	; (80044e8 <GetDateString+0x40>)
 80044d4:	0020      	movs	r0, r4
 80044d6:	f010 fb0f 	bl	8014af8 <sprintf>
	return buffer;
}
 80044da:	0020      	movs	r0, r4
 80044dc:	b002      	add	sp, #8
 80044de:	bd10      	pop	{r4, pc}
 80044e0:	20006e50 	.word	0x20006e50
 80044e4:	080197f4 	.word	0x080197f4
 80044e8:	08019270 	.word	0x08019270

080044ec <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 80044ec:	b500      	push	{lr}
 80044ee:	b085      	sub	sp, #20
 80044f0:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <Bridge+0x24>)
 80044f4:	7819      	ldrb	r1, [r3, #0]
 80044f6:	2301      	movs	r3, #1
 80044f8:	9303      	str	r3, [sp, #12]
 80044fa:	3b02      	subs	r3, #2
 80044fc:	9302      	str	r3, [sp, #8]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	3303      	adds	r3, #3
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	000b      	movs	r3, r1
 8004506:	f003 fe51 	bl	80081ac <StartScastDMAStream>
}
 800450a:	b005      	add	sp, #20
 800450c:	bd00      	pop	{pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	200010ea 	.word	0x200010ea

08004514 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004514:	b530      	push	{r4, r5, lr}
 8004516:	b087      	sub	sp, #28
 8004518:	0004      	movs	r4, r0
 800451a:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 800451c:	2300      	movs	r3, #0
 800451e:	9304      	str	r3, [sp, #16]
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	9302      	str	r3, [sp, #8]
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	2200      	movs	r2, #0
 800452a:	2100      	movs	r1, #0
 800452c:	2000      	movs	r0, #0
 800452e:	f7fe ffeb 	bl	8003508 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004532:	1e62      	subs	r2, r4, #1
 8004534:	00d3      	lsls	r3, r2, #3
 8004536:	1a9b      	subs	r3, r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4a14      	ldr	r2, [pc, #80]	; (800458c <Unbridge+0x78>)
 800453c:	589b      	ldr	r3, [r3, r2]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d015      	beq.n	800456e <Unbridge+0x5a>
 8004542:	1e6a      	subs	r2, r5, #1
 8004544:	00d3      	lsls	r3, r2, #3
 8004546:	1a9b      	subs	r3, r3, r2
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <Unbridge+0x78>)
 800454c:	589b      	ldr	r3, [r3, r2]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 8004552:	0020      	movs	r0, r4
 8004554:	f007 fae6 	bl	800bb24 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004558:	2000      	movs	r0, #0
 800455a:	e006      	b.n	800456a <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 800455c:	0020      	movs	r0, r4
 800455e:	f007 fae1 	bl	800bb24 <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 8004562:	0028      	movs	r0, r5
 8004564:	f007 fade 	bl	800bb24 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004568:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 800456a:	b007      	add	sp, #28
 800456c:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 800456e:	1e6a      	subs	r2, r5, #1
 8004570:	00d3      	lsls	r3, r2, #3
 8004572:	1a9b      	subs	r3, r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4a05      	ldr	r2, [pc, #20]	; (800458c <Unbridge+0x78>)
 8004578:	589b      	ldr	r3, [r3, r2]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d004      	beq.n	8004588 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 800457e:	0028      	movs	r0, r5
 8004580:	f007 fad0 	bl	800bb24 <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004584:	2000      	movs	r0, #0
 8004586:	e7f0      	b.n	800456a <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 8004588:	2068      	movs	r0, #104	; 0x68
 800458a:	e7ee      	b.n	800456a <Unbridge+0x56>
 800458c:	20001d6c 	.word	0x20001d6c

08004590 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 8004594:	7804      	ldrb	r4, [r0, #0]
 8004596:	2c00      	cmp	r4, #0
 8004598:	d010      	beq.n	80045bc <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 800459a:	2603      	movs	r6, #3
 800459c:	e004      	b.n	80045a8 <StringToLowerCase+0x18>
 800459e:	702a      	strb	r2, [r5, #0]
 80045a0:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80045a2:	782c      	ldrb	r4, [r5, #0]
 80045a4:	2c00      	cmp	r4, #0
 80045a6:	d009      	beq.n	80045bc <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80045a8:	f00f fe16 	bl	80141d8 <__locale_ctype_ptr>
 80045ac:	1900      	adds	r0, r0, r4
 80045ae:	7843      	ldrb	r3, [r0, #1]
 80045b0:	4033      	ands	r3, r6
 80045b2:	0022      	movs	r2, r4
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d1f2      	bne.n	800459e <StringToLowerCase+0xe>
 80045b8:	3220      	adds	r2, #32
 80045ba:	e7f0      	b.n	800459e <StringToLowerCase+0xe>
	}
}
 80045bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080045c0 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c2:	46c6      	mov	lr, r8
 80045c4:	b500      	push	{lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 80045ca:	4bdc      	ldr	r3, [pc, #880]	; (800493c <ParseSnippetCondition+0x37c>)
 80045cc:	781c      	ldrb	r4, [r3, #0]
 80045ce:	2c05      	cmp	r4, #5
 80045d0:	d100      	bne.n	80045d4 <ParseSnippetCondition+0x14>
 80045d2:	e210      	b.n	80049f6 <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 80045d4:	49da      	ldr	r1, [pc, #872]	; (8004940 <ParseSnippetCondition+0x380>)
 80045d6:	00a3      	lsls	r3, r4, #2
 80045d8:	191a      	adds	r2, r3, r4
 80045da:	0092      	lsls	r2, r2, #2
 80045dc:	2000      	movs	r0, #0
 80045de:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 80045e0:	191a      	adds	r2, r3, r4
 80045e2:	0092      	lsls	r2, r2, #2
 80045e4:	188a      	adds	r2, r1, r2
 80045e6:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 80045e8:	1918      	adds	r0, r3, r4
 80045ea:	0080      	lsls	r0, r0, #2
 80045ec:	3002      	adds	r0, #2
 80045ee:	1840      	adds	r0, r0, r1
 80045f0:	2204      	movs	r2, #4
 80045f2:	2100      	movs	r1, #0
 80045f4:	f010 f854 	bl	80146a0 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 80045f8:	782b      	ldrb	r3, [r5, #0]
 80045fa:	2b62      	cmp	r3, #98	; 0x62
 80045fc:	d102      	bne.n	8004604 <ParseSnippetCondition+0x44>
 80045fe:	78ab      	ldrb	r3, [r5, #2]
 8004600:	2b2e      	cmp	r3, #46	; 0x2e
 8004602:	d032      	beq.n	800466a <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004604:	4ecf      	ldr	r6, [pc, #828]	; (8004944 <ParseSnippetCondition+0x384>)
 8004606:	0029      	movs	r1, r5
 8004608:	0030      	movs	r0, r6
 800460a:	f010 fab1 	bl	8014b70 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 800460e:	4cce      	ldr	r4, [pc, #824]	; (8004948 <ParseSnippetCondition+0x388>)
 8004610:	0021      	movs	r1, r4
 8004612:	0030      	movs	r0, r6
 8004614:	f011 f92c 	bl	8015870 <strtok>
 8004618:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 800461a:	0021      	movs	r1, r4
 800461c:	2000      	movs	r0, #0
 800461e:	f011 f927 	bl	8015870 <strtok>
 8004622:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004624:	0021      	movs	r1, r4
 8004626:	2000      	movs	r0, #0
 8004628:	f011 f922 	bl	8015870 <strtok>
 800462c:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 800462e:	2d00      	cmp	r5, #0
 8004630:	d100      	bne.n	8004634 <ParseSnippetCondition+0x74>
 8004632:	e1e5      	b.n	8004a00 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004634:	0028      	movs	r0, r5
 8004636:	f7ff f881 	bl	800373c <IsModuleParameter>
 800463a:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 800463c:	d100      	bne.n	8004640 <ParseSnippetCondition+0x80>
 800463e:	e18f      	b.n	8004960 <ParseSnippetCondition+0x3a0>
 8004640:	2e00      	cmp	r6, #0
 8004642:	d000      	beq.n	8004646 <ParseSnippetCondition+0x86>
 8004644:	e18e      	b.n	8004964 <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 8004646:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004648:	2c00      	cmp	r4, #0
 800464a:	d000      	beq.n	800464e <ParseSnippetCondition+0x8e>
 800464c:	e1d4      	b.n	80049f8 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 800464e:	4cbb      	ldr	r4, [pc, #748]	; (800493c <ParseSnippetCondition+0x37c>)
 8004650:	7823      	ldrb	r3, [r4, #0]
 8004652:	49bb      	ldr	r1, [pc, #748]	; (8004940 <ParseSnippetCondition+0x380>)
 8004654:	009a      	lsls	r2, r3, #2
 8004656:	18d0      	adds	r0, r2, r3
 8004658:	0080      	lsls	r0, r0, #2
 800465a:	3602      	adds	r6, #2
 800465c:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 800465e:	180a      	adds	r2, r1, r0
 8004660:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004662:	3301      	adds	r3, #1
 8004664:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 8004666:	2000      	movs	r0, #0
 8004668:	e1c6      	b.n	80049f8 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 800466a:	786e      	ldrb	r6, [r5, #1]
 800466c:	3e30      	subs	r6, #48	; 0x30
 800466e:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 8004670:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 8004672:	2e06      	cmp	r6, #6
 8004674:	d900      	bls.n	8004678 <ParseSnippetCondition+0xb8>
 8004676:	e1bf      	b.n	80049f8 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004678:	4ab1      	ldr	r2, [pc, #708]	; (8004940 <ParseSnippetCondition+0x380>)
 800467a:	00a3      	lsls	r3, r4, #2
 800467c:	1919      	adds	r1, r3, r4
 800467e:	0089      	lsls	r1, r1, #2
 8004680:	3001      	adds	r0, #1
 8004682:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 8004684:	1853      	adds	r3, r2, r1
 8004686:	2200      	movs	r2, #0
 8004688:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 800468a:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 800468c:	1cef      	adds	r7, r5, #3
 800468e:	3207      	adds	r2, #7
 8004690:	49ae      	ldr	r1, [pc, #696]	; (800494c <ParseSnippetCondition+0x38c>)
 8004692:	0038      	movs	r0, r7
 8004694:	f010 fa74 	bl	8014b80 <strncmp>
 8004698:	2800      	cmp	r0, #0
 800469a:	d121      	bne.n	80046e0 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 800469c:	00a3      	lsls	r3, r4, #2
 800469e:	191c      	adds	r4, r3, r4
 80046a0:	00a4      	lsls	r4, r4, #2
 80046a2:	4ba7      	ldr	r3, [pc, #668]	; (8004940 <ParseSnippetCondition+0x380>)
 80046a4:	191c      	adds	r4, r3, r4
 80046a6:	2305      	movs	r3, #5
 80046a8:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80046aa:	00f2      	lsls	r2, r6, #3
 80046ac:	1992      	adds	r2, r2, r6
 80046ae:	4ba8      	ldr	r3, [pc, #672]	; (8004950 <ParseSnippetCondition+0x390>)
 80046b0:	189b      	adds	r3, r3, r2
 80046b2:	7a1b      	ldrb	r3, [r3, #8]
 80046b4:	07db      	lsls	r3, r3, #31
 80046b6:	d504      	bpl.n	80046c2 <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80046b8:	4aa0      	ldr	r2, [pc, #640]	; (800493c <ParseSnippetCondition+0x37c>)
 80046ba:	7813      	ldrb	r3, [r2, #0]
 80046bc:	3301      	adds	r3, #1
 80046be:	7013      	strb	r3, [r2, #0]
 80046c0:	e19a      	b.n	80049f8 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80046c2:	2301      	movs	r3, #1
 80046c4:	9305      	str	r3, [sp, #20]
 80046c6:	2300      	movs	r3, #0
 80046c8:	9304      	str	r3, [sp, #16]
 80046ca:	9303      	str	r3, [sp, #12]
 80046cc:	9302      	str	r3, [sp, #8]
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	2101      	movs	r1, #1
 80046d6:	0030      	movs	r0, r6
 80046d8:	f008 fd14 	bl	800d104 <SetButtonEvents>
				status =BOS_OK;
 80046dc:	2000      	movs	r0, #0
 80046de:	e7eb      	b.n	80046b8 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 80046e0:	220e      	movs	r2, #14
 80046e2:	499c      	ldr	r1, [pc, #624]	; (8004954 <ParseSnippetCondition+0x394>)
 80046e4:	0038      	movs	r0, r7
 80046e6:	f010 fa4b 	bl	8014b80 <strncmp>
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d11c      	bne.n	8004728 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 80046ee:	00a3      	lsls	r3, r4, #2
 80046f0:	191c      	adds	r4, r3, r4
 80046f2:	00a4      	lsls	r4, r4, #2
 80046f4:	4b92      	ldr	r3, [pc, #584]	; (8004940 <ParseSnippetCondition+0x380>)
 80046f6:	191c      	adds	r4, r3, r4
 80046f8:	2306      	movs	r3, #6
 80046fa:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 80046fc:	00f2      	lsls	r2, r6, #3
 80046fe:	1992      	adds	r2, r2, r6
 8004700:	4b93      	ldr	r3, [pc, #588]	; (8004950 <ParseSnippetCondition+0x390>)
 8004702:	189b      	adds	r3, r3, r2
 8004704:	7a1b      	ldrb	r3, [r3, #8]
 8004706:	079b      	lsls	r3, r3, #30
 8004708:	d4d6      	bmi.n	80046b8 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 800470a:	2301      	movs	r3, #1
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	2300      	movs	r3, #0
 8004710:	9304      	str	r3, [sp, #16]
 8004712:	9303      	str	r3, [sp, #12]
 8004714:	9302      	str	r3, [sp, #8]
 8004716:	9301      	str	r3, [sp, #4]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	2201      	movs	r2, #1
 800471c:	2100      	movs	r1, #0
 800471e:	0030      	movs	r0, r6
 8004720:	f008 fcf0 	bl	800d104 <SetButtonEvents>
				status =BOS_OK;
 8004724:	2000      	movs	r0, #0
 8004726:	e7c7      	b.n	80046b8 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004728:	220c      	movs	r2, #12
 800472a:	498b      	ldr	r1, [pc, #556]	; (8004958 <ParseSnippetCondition+0x398>)
 800472c:	0038      	movs	r0, r7
 800472e:	f010 fa27 	bl	8014b80 <strncmp>
 8004732:	2800      	cmp	r0, #0
 8004734:	d17a      	bne.n	800482c <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 8004736:	00f2      	lsls	r2, r6, #3
 8004738:	1992      	adds	r2, r2, r6
 800473a:	4b85      	ldr	r3, [pc, #532]	; (8004950 <ParseSnippetCondition+0x390>)
 800473c:	189b      	adds	r3, r3, r2
 800473e:	789b      	ldrb	r3, [r3, #2]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d030      	beq.n	80047a6 <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 8004744:	00f2      	lsls	r2, r6, #3
 8004746:	1992      	adds	r2, r2, r6
 8004748:	4b81      	ldr	r3, [pc, #516]	; (8004950 <ParseSnippetCondition+0x390>)
 800474a:	189b      	adds	r3, r3, r2
 800474c:	78db      	ldrb	r3, [r3, #3]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d04a      	beq.n	80047e8 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 8004752:	00f2      	lsls	r2, r6, #3
 8004754:	1992      	adds	r2, r2, r6
 8004756:	4b7e      	ldr	r3, [pc, #504]	; (8004950 <ParseSnippetCondition+0x390>)
 8004758:	189b      	adds	r3, r3, r2
 800475a:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 800475c:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 800475e:	2b00      	cmp	r3, #0
 8004760:	d1aa      	bne.n	80046b8 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 8004762:	4f77      	ldr	r7, [pc, #476]	; (8004940 <ParseSnippetCondition+0x380>)
 8004764:	00a3      	lsls	r3, r4, #2
 8004766:	191b      	adds	r3, r3, r4
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	220b      	movs	r2, #11
 800476e:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004770:	0028      	movs	r0, r5
 8004772:	300f      	adds	r0, #15
 8004774:	f00f fcfb 	bl	801416e <atoi>
 8004778:	b2c0      	uxtb	r0, r0
 800477a:	4b70      	ldr	r3, [pc, #448]	; (800493c <ParseSnippetCondition+0x37c>)
 800477c:	781a      	ldrb	r2, [r3, #0]
 800477e:	0093      	lsls	r3, r2, #2
 8004780:	189b      	adds	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	18ff      	adds	r7, r7, r3
 8004786:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 8004788:	2301      	movs	r3, #1
 800478a:	9305      	str	r3, [sp, #20]
 800478c:	2300      	movs	r3, #0
 800478e:	9304      	str	r3, [sp, #16]
 8004790:	9303      	str	r3, [sp, #12]
 8004792:	9302      	str	r3, [sp, #8]
 8004794:	9001      	str	r0, [sp, #4]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	2100      	movs	r1, #0
 800479c:	0030      	movs	r0, r6
 800479e:	f008 fcb1 	bl	800d104 <SetButtonEvents>
					status =BOS_OK;
 80047a2:	2000      	movs	r0, #0
 80047a4:	e788      	b.n	80046b8 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80047a6:	4f66      	ldr	r7, [pc, #408]	; (8004940 <ParseSnippetCondition+0x380>)
 80047a8:	00a3      	lsls	r3, r4, #2
 80047aa:	191b      	adds	r3, r3, r4
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2209      	movs	r2, #9
 80047b2:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80047b4:	0028      	movs	r0, r5
 80047b6:	300f      	adds	r0, #15
 80047b8:	f00f fcd9 	bl	801416e <atoi>
 80047bc:	b2c3      	uxtb	r3, r0
 80047be:	4a5f      	ldr	r2, [pc, #380]	; (800493c <ParseSnippetCondition+0x37c>)
 80047c0:	7811      	ldrb	r1, [r2, #0]
 80047c2:	008a      	lsls	r2, r1, #2
 80047c4:	1852      	adds	r2, r2, r1
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	18bf      	adds	r7, r7, r2
 80047ca:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80047cc:	2201      	movs	r2, #1
 80047ce:	9205      	str	r2, [sp, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	9204      	str	r2, [sp, #16]
 80047d4:	9203      	str	r2, [sp, #12]
 80047d6:	9202      	str	r2, [sp, #8]
 80047d8:	9201      	str	r2, [sp, #4]
 80047da:	9200      	str	r2, [sp, #0]
 80047dc:	2100      	movs	r1, #0
 80047de:	0030      	movs	r0, r6
 80047e0:	f008 fc90 	bl	800d104 <SetButtonEvents>
					status =BOS_OK;
 80047e4:	2000      	movs	r0, #0
 80047e6:	e767      	b.n	80046b8 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 80047e8:	4f55      	ldr	r7, [pc, #340]	; (8004940 <ParseSnippetCondition+0x380>)
 80047ea:	00a3      	lsls	r3, r4, #2
 80047ec:	191b      	adds	r3, r3, r4
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	220a      	movs	r2, #10
 80047f4:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80047f6:	0028      	movs	r0, r5
 80047f8:	300f      	adds	r0, #15
 80047fa:	f00f fcb8 	bl	801416e <atoi>
 80047fe:	b2c0      	uxtb	r0, r0
 8004800:	4b4e      	ldr	r3, [pc, #312]	; (800493c <ParseSnippetCondition+0x37c>)
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	0093      	lsls	r3, r2, #2
 8004806:	189b      	adds	r3, r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	18ff      	adds	r7, r7, r3
 800480c:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 800480e:	2301      	movs	r3, #1
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	2300      	movs	r3, #0
 8004814:	9304      	str	r3, [sp, #16]
 8004816:	9303      	str	r3, [sp, #12]
 8004818:	9302      	str	r3, [sp, #8]
 800481a:	9301      	str	r3, [sp, #4]
 800481c:	9000      	str	r0, [sp, #0]
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	0030      	movs	r0, r6
 8004824:	f008 fc6e 	bl	800d104 <SetButtonEvents>
					status =BOS_OK;
 8004828:	2000      	movs	r0, #0
 800482a:	e745      	b.n	80046b8 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 800482c:	220d      	movs	r2, #13
 800482e:	494b      	ldr	r1, [pc, #300]	; (800495c <ParseSnippetCondition+0x39c>)
 8004830:	0038      	movs	r0, r7
 8004832:	f010 f9a5 	bl	8014b80 <strncmp>
 8004836:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004838:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 800483a:	2b00      	cmp	r3, #0
 800483c:	d000      	beq.n	8004840 <ParseSnippetCondition+0x280>
 800483e:	e73b      	b.n	80046b8 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004840:	00f2      	lsls	r2, r6, #3
 8004842:	1992      	adds	r2, r2, r6
 8004844:	4b42      	ldr	r3, [pc, #264]	; (8004950 <ParseSnippetCondition+0x390>)
 8004846:	189b      	adds	r3, r3, r2
 8004848:	795b      	ldrb	r3, [r3, #5]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d031      	beq.n	80048b2 <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 800484e:	00f2      	lsls	r2, r6, #3
 8004850:	1992      	adds	r2, r2, r6
 8004852:	4b3f      	ldr	r3, [pc, #252]	; (8004950 <ParseSnippetCondition+0x390>)
 8004854:	189b      	adds	r3, r3, r2
 8004856:	799b      	ldrb	r3, [r3, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d04c      	beq.n	80048f6 <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 800485c:	00f2      	lsls	r2, r6, #3
 800485e:	1992      	adds	r2, r2, r6
 8004860:	4b3b      	ldr	r3, [pc, #236]	; (8004950 <ParseSnippetCondition+0x390>)
 8004862:	189b      	adds	r3, r3, r2
 8004864:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004866:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004868:	2b00      	cmp	r3, #0
 800486a:	d000      	beq.n	800486e <ParseSnippetCondition+0x2ae>
 800486c:	e724      	b.n	80046b8 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 800486e:	4f34      	ldr	r7, [pc, #208]	; (8004940 <ParseSnippetCondition+0x380>)
 8004870:	3314      	adds	r3, #20
 8004872:	4698      	mov	r8, r3
 8004874:	435c      	muls	r4, r3
 8004876:	193c      	adds	r4, r7, r4
 8004878:	3b06      	subs	r3, #6
 800487a:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 800487c:	0028      	movs	r0, r5
 800487e:	3010      	adds	r0, #16
 8004880:	f00f fc75 	bl	801416e <atoi>
 8004884:	b2c0      	uxtb	r0, r0
 8004886:	4b2d      	ldr	r3, [pc, #180]	; (800493c <ParseSnippetCondition+0x37c>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	4642      	mov	r2, r8
 800488c:	4353      	muls	r3, r2
 800488e:	18ff      	adds	r7, r7, r3
 8004890:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004892:	2301      	movs	r3, #1
 8004894:	9305      	str	r3, [sp, #20]
 8004896:	9004      	str	r0, [sp, #16]
 8004898:	2400      	movs	r4, #0
 800489a:	9403      	str	r4, [sp, #12]
 800489c:	9402      	str	r4, [sp, #8]
 800489e:	9401      	str	r4, [sp, #4]
 80048a0:	9400      	str	r4, [sp, #0]
 80048a2:	0023      	movs	r3, r4
 80048a4:	0022      	movs	r2, r4
 80048a6:	0021      	movs	r1, r4
 80048a8:	0030      	movs	r0, r6
 80048aa:	f008 fc2b 	bl	800d104 <SetButtonEvents>
					status =BOS_OK;
 80048ae:	0020      	movs	r0, r4
 80048b0:	e702      	b.n	80046b8 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 80048b2:	4f23      	ldr	r7, [pc, #140]	; (8004940 <ParseSnippetCondition+0x380>)
 80048b4:	00a3      	lsls	r3, r4, #2
 80048b6:	191b      	adds	r3, r3, r4
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	18fb      	adds	r3, r7, r3
 80048bc:	220c      	movs	r2, #12
 80048be:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80048c0:	0028      	movs	r0, r5
 80048c2:	3010      	adds	r0, #16
 80048c4:	f00f fc53 	bl	801416e <atoi>
 80048c8:	b2c0      	uxtb	r0, r0
 80048ca:	4b1c      	ldr	r3, [pc, #112]	; (800493c <ParseSnippetCondition+0x37c>)
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	0093      	lsls	r3, r2, #2
 80048d0:	189b      	adds	r3, r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	18ff      	adds	r7, r7, r3
 80048d6:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 80048d8:	2301      	movs	r3, #1
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	2300      	movs	r3, #0
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	9303      	str	r3, [sp, #12]
 80048e2:	9002      	str	r0, [sp, #8]
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2100      	movs	r1, #0
 80048ec:	0030      	movs	r0, r6
 80048ee:	f008 fc09 	bl	800d104 <SetButtonEvents>
					status =BOS_OK;
 80048f2:	2000      	movs	r0, #0
 80048f4:	e6e0      	b.n	80046b8 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 80048f6:	4f12      	ldr	r7, [pc, #72]	; (8004940 <ParseSnippetCondition+0x380>)
 80048f8:	00a3      	lsls	r3, r4, #2
 80048fa:	191b      	adds	r3, r3, r4
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	220d      	movs	r2, #13
 8004902:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004904:	0028      	movs	r0, r5
 8004906:	3010      	adds	r0, #16
 8004908:	f00f fc31 	bl	801416e <atoi>
 800490c:	b2c0      	uxtb	r0, r0
 800490e:	4b0b      	ldr	r3, [pc, #44]	; (800493c <ParseSnippetCondition+0x37c>)
 8004910:	781a      	ldrb	r2, [r3, #0]
 8004912:	0093      	lsls	r3, r2, #2
 8004914:	189b      	adds	r3, r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	18ff      	adds	r7, r7, r3
 800491a:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 800491c:	2301      	movs	r3, #1
 800491e:	9305      	str	r3, [sp, #20]
 8004920:	2300      	movs	r3, #0
 8004922:	9304      	str	r3, [sp, #16]
 8004924:	9003      	str	r0, [sp, #12]
 8004926:	9302      	str	r3, [sp, #8]
 8004928:	9301      	str	r3, [sp, #4]
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2200      	movs	r2, #0
 800492e:	2100      	movs	r1, #0
 8004930:	0030      	movs	r0, r6
 8004932:	f008 fbe7 	bl	800d104 <SetButtonEvents>
					status =BOS_OK;
 8004936:	2000      	movs	r0, #0
 8004938:	e6be      	b.n	80046b8 <ParseSnippetCondition+0xf8>
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	20001297 	.word	0x20001297
 8004940:	20006e6c 	.word	0x20006e6c
 8004944:	200011fc 	.word	0x200011fc
 8004948:	080190cc 	.word	0x080190cc
 800494c:	0801a974 	.word	0x0801a974
 8004950:	20001ed0 	.word	0x20001ed0
 8004954:	080199f8 	.word	0x080199f8
 8004958:	08019a08 	.word	0x08019a08
 800495c:	08019a18 	.word	0x08019a18
			else if(secondPart != NULL && thirdPart != NULL){
 8004960:	2e00      	cmp	r6, #0
 8004962:	d04f      	beq.n	8004a04 <ParseSnippetCondition+0x444>
 8004964:	2c00      	cmp	r4, #0
 8004966:	d04f      	beq.n	8004a08 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004968:	0020      	movs	r0, r4
 800496a:	f7fe fee7 	bl	800373c <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 800496e:	2800      	cmp	r0, #0
 8004970:	d024      	beq.n	80049bc <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004972:	4b27      	ldr	r3, [pc, #156]	; (8004a10 <ParseSnippetCondition+0x450>)
 8004974:	781c      	ldrb	r4, [r3, #0]
 8004976:	4a27      	ldr	r2, [pc, #156]	; (8004a14 <ParseSnippetCondition+0x454>)
 8004978:	00a3      	lsls	r3, r4, #2
 800497a:	1919      	adds	r1, r3, r4
 800497c:	0089      	lsls	r1, r1, #2
 800497e:	2704      	movs	r7, #4
 8004980:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004982:	1919      	adds	r1, r3, r4
 8004984:	0089      	lsls	r1, r1, #2
 8004986:	1851      	adds	r1, r2, r1
 8004988:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 800498a:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 800498c:	4d20      	ldr	r5, [pc, #128]	; (8004a10 <ParseSnippetCondition+0x450>)
 800498e:	782c      	ldrb	r4, [r5, #0]
 8004990:	0030      	movs	r0, r6
 8004992:	f7fe fee9 	bl	8003768 <IsMathOperator>
 8004996:	491f      	ldr	r1, [pc, #124]	; (8004a14 <ParseSnippetCondition+0x454>)
 8004998:	00a3      	lsls	r3, r4, #2
 800499a:	191b      	adds	r3, r3, r4
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	18cb      	adds	r3, r1, r3
 80049a0:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 80049a2:	782a      	ldrb	r2, [r5, #0]
 80049a4:	0093      	lsls	r3, r2, #2
 80049a6:	189b      	adds	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	18cb      	adds	r3, r1, r3
 80049ac:	785b      	ldrb	r3, [r3, #1]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d02c      	beq.n	8004a0c <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 80049b2:	3201      	adds	r2, #1
 80049b4:	4b16      	ldr	r3, [pc, #88]	; (8004a10 <ParseSnippetCondition+0x450>)
 80049b6:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 80049b8:	2000      	movs	r0, #0
 80049ba:	e01d      	b.n	80049f8 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 80049bc:	4b14      	ldr	r3, [pc, #80]	; (8004a10 <ParseSnippetCondition+0x450>)
 80049be:	4698      	mov	r8, r3
 80049c0:	781a      	ldrb	r2, [r3, #0]
 80049c2:	4f14      	ldr	r7, [pc, #80]	; (8004a14 <ParseSnippetCondition+0x454>)
 80049c4:	0093      	lsls	r3, r2, #2
 80049c6:	1899      	adds	r1, r3, r2
 80049c8:	0089      	lsls	r1, r1, #2
 80049ca:	2003      	movs	r0, #3
 80049cc:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80049ce:	187b      	adds	r3, r7, r1
 80049d0:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 80049d2:	0020      	movs	r0, r4
 80049d4:	f00f fbc6 	bl	8014164 <atof>
 80049d8:	f7fe f8f6 	bl	8002bc8 <__aeabi_d2f>
 80049dc:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80049de:	4643      	mov	r3, r8
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	0098      	lsls	r0, r3, #2
 80049e4:	18c0      	adds	r0, r0, r3
 80049e6:	0080      	lsls	r0, r0, #2
 80049e8:	3006      	adds	r0, #6
 80049ea:	19c0      	adds	r0, r0, r7
 80049ec:	2204      	movs	r2, #4
 80049ee:	a907      	add	r1, sp, #28
 80049f0:	f00f fe4d 	bl	801468e <memcpy>
 80049f4:	e7ca      	b.n	800498c <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 80049f6:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 80049f8:	b008      	add	sp, #32
 80049fa:	bc04      	pop	{r2}
 80049fc:	4690      	mov	r8, r2
 80049fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004a00:	2067      	movs	r0, #103	; 0x67
 8004a02:	e7f9      	b.n	80049f8 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004a04:	2067      	movs	r0, #103	; 0x67
 8004a06:	e7f7      	b.n	80049f8 <ParseSnippetCondition+0x438>
 8004a08:	2067      	movs	r0, #103	; 0x67
 8004a0a:	e7f5      	b.n	80049f8 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004a0c:	2067      	movs	r0, #103	; 0x67
 8004a0e:	e7f3      	b.n	80049f8 <ParseSnippetCondition+0x438>
 8004a10:	20001297 	.word	0x20001297
 8004a14:	20006e6c 	.word	0x20006e6c

08004a18 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1a:	000c      	movs	r4, r1
	switch(code){
 8004a1c:	2802      	cmp	r0, #2
 8004a1e:	d017      	beq.n	8004a50 <AddSnippet+0x38>
 8004a20:	2803      	cmp	r0, #3
 8004a22:	d003      	beq.n	8004a2c <AddSnippet+0x14>
 8004a24:	2801      	cmp	r0, #1
 8004a26:	d00f      	beq.n	8004a48 <AddSnippet+0x30>
	return BOS_OK;
 8004a28:	2000      	movs	r0, #0
 8004a2a:	e00c      	b.n	8004a46 <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004a2c:	4b35      	ldr	r3, [pc, #212]	; (8004b04 <AddSnippet+0xec>)
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	3a01      	subs	r2, #1
 8004a32:	0093      	lsls	r3, r2, #2
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4a33      	ldr	r2, [pc, #204]	; (8004b08 <AddSnippet+0xf0>)
 8004a3a:	18d3      	adds	r3, r2, r3
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004a40:	f006 fa04 	bl	800ae4c <SaveToRO>
	return BOS_OK;
 8004a44:	2000      	movs	r0, #0
}
 8004a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004a48:	0008      	movs	r0, r1
 8004a4a:	f7ff fdb9 	bl	80045c0 <ParseSnippetCondition>
 8004a4e:	e7fa      	b.n	8004a46 <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004a50:	4b2c      	ldr	r3, [pc, #176]	; (8004b04 <AddSnippet+0xec>)
 8004a52:	781d      	ldrb	r5, [r3, #0]
 8004a54:	3d01      	subs	r5, #1
 8004a56:	00ab      	lsls	r3, r5, #2
 8004a58:	195b      	adds	r3, r3, r5
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4a2a      	ldr	r2, [pc, #168]	; (8004b08 <AddSnippet+0xf0>)
 8004a5e:	18d3      	adds	r3, r2, r3
 8004a60:	68de      	ldr	r6, [r3, #12]
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	d03d      	beq.n	8004ae2 <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004a66:	0030      	movs	r0, r6
 8004a68:	f7fb fb56 	bl	8000118 <strlen>
 8004a6c:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004a6e:	0020      	movs	r0, r4
 8004a70:	f7fb fb52 	bl	8000118 <strlen>
 8004a74:	1839      	adds	r1, r7, r0
 8004a76:	3102      	adds	r1, #2
 8004a78:	0030      	movs	r0, r6
 8004a7a:	f00f fe43 	bl	8014704 <realloc>
 8004a7e:	4e22      	ldr	r6, [pc, #136]	; (8004b08 <AddSnippet+0xf0>)
 8004a80:	00ab      	lsls	r3, r5, #2
 8004a82:	195d      	adds	r5, r3, r5
 8004a84:	00ad      	lsls	r5, r5, #2
 8004a86:	1975      	adds	r5, r6, r5
 8004a88:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004a8a:	4d1e      	ldr	r5, [pc, #120]	; (8004b04 <AddSnippet+0xec>)
 8004a8c:	782a      	ldrb	r2, [r5, #0]
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	0093      	lsls	r3, r2, #2
 8004a92:	189b      	adds	r3, r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	18f3      	adds	r3, r6, r3
 8004a98:	1c7a      	adds	r2, r7, #1
 8004a9a:	68d8      	ldr	r0, [r3, #12]
 8004a9c:	1880      	adds	r0, r0, r2
 8004a9e:	0021      	movs	r1, r4
 8004aa0:	f010 f866 	bl	8014b70 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004aa4:	782a      	ldrb	r2, [r5, #0]
 8004aa6:	3a01      	subs	r2, #1
 8004aa8:	0093      	lsls	r3, r2, #2
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	18f6      	adds	r6, r6, r3
 8004ab0:	68f3      	ldr	r3, [r6, #12]
 8004ab2:	2213      	movs	r2, #19
 8004ab4:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004ab6:	4b13      	ldr	r3, [pc, #76]	; (8004b04 <AddSnippet+0xec>)
 8004ab8:	781a      	ldrb	r2, [r3, #0]
 8004aba:	3a01      	subs	r2, #1
 8004abc:	0093      	lsls	r3, r2, #2
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4911      	ldr	r1, [pc, #68]	; (8004b08 <AddSnippet+0xf0>)
 8004ac4:	18cb      	adds	r3, r1, r3
 8004ac6:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004ac8:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1bb      	bne.n	8004a46 <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004ace:	0090      	lsls	r0, r2, #2
 8004ad0:	1880      	adds	r0, r0, r2
 8004ad2:	0080      	lsls	r0, r0, #2
 8004ad4:	1840      	adds	r0, r0, r1
 8004ad6:	2214      	movs	r2, #20
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f00f fde1 	bl	80146a0 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004ade:	200e      	movs	r0, #14
 8004ae0:	e7b1      	b.n	8004a46 <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004ae2:	0008      	movs	r0, r1
 8004ae4:	f7fb fb18 	bl	8000118 <strlen>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f00f fb83 	bl	80141f4 <malloc>
 8004aee:	00ab      	lsls	r3, r5, #2
 8004af0:	195d      	adds	r5, r3, r5
 8004af2:	00ad      	lsls	r5, r5, #2
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <AddSnippet+0xf0>)
 8004af6:	195d      	adds	r5, r3, r5
 8004af8:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004afa:	0021      	movs	r1, r4
 8004afc:	f010 f838 	bl	8014b70 <strcpy>
 8004b00:	e7d9      	b.n	8004ab6 <AddSnippet+0x9e>
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	20001297 	.word	0x20001297
 8004b08:	20006e6c 	.word	0x20006e6c

08004b0c <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0e:	46de      	mov	lr, fp
 8004b10:	4657      	mov	r7, sl
 8004b12:	464e      	mov	r6, r9
 8004b14:	4645      	mov	r5, r8
 8004b16:	b5e0      	push	{r5, r6, r7, lr}
 8004b18:	b08b      	sub	sp, #44	; 0x2c
 8004b1a:	9004      	str	r0, [sp, #16]
 8004b1c:	4688      	mov	r8, r1
 8004b1e:	9203      	str	r2, [sp, #12]
 8004b20:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004b22:	2209      	movs	r2, #9
 8004b24:	2100      	movs	r1, #0
 8004b26:	a807      	add	r0, sp, #28
 8004b28:	f00f fdba 	bl	80146a0 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004b2c:	4fd5      	ldr	r7, [pc, #852]	; (8004e84 <CLI_CommandParser+0x378>)
				if(id == myID){
 8004b2e:	002e      	movs	r6, r5
 8004b30:	e034      	b.n	8004b9c <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004b32:	2252      	movs	r2, #82	; 0x52
 8004b34:	49d4      	ldr	r1, [pc, #848]	; (8004e88 <CLI_CommandParser+0x37c>)
 8004b36:	0020      	movs	r0, r4
 8004b38:	f00f fda9 	bl	801468e <memcpy>
				recordSnippet =0;
 8004b3c:	4bd1      	ldr	r3, [pc, #836]	; (8004e84 <CLI_CommandParser+0x378>)
 8004b3e:	2200      	movs	r2, #0
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e044      	b.n	8004bce <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004b44:	2206      	movs	r2, #6
 8004b46:	49d1      	ldr	r1, [pc, #836]	; (8004e8c <CLI_CommandParser+0x380>)
 8004b48:	9803      	ldr	r0, [sp, #12]
 8004b4a:	f010 f819 	bl	8014b80 <strncmp>
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d053      	beq.n	8004bfa <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004b52:	2d02      	cmp	r5, #2
 8004b54:	d05e      	beq.n	8004c14 <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004b56:	212e      	movs	r1, #46	; 0x2e
 8004b58:	9803      	ldr	r0, [sp, #12]
 8004b5a:	f00f fffb 	bl	8014b54 <strchr>
 8004b5e:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004b60:	d006      	beq.n	8004b70 <CLI_CommandParser+0x64>
 8004b62:	3803      	subs	r0, #3
 8004b64:	2203      	movs	r2, #3
 8004b66:	49ca      	ldr	r1, [pc, #808]	; (8004e90 <CLI_CommandParser+0x384>)
 8004b68:	f010 f80a 	bl	8014b80 <strncmp>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d160      	bne.n	8004c32 <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004b70:	2299      	movs	r2, #153	; 0x99
 8004b72:	0092      	lsls	r2, r2, #2
 8004b74:	0021      	movs	r1, r4
 8004b76:	9803      	ldr	r0, [sp, #12]
 8004b78:	f009 fff4 	bl	800eb64 <FreeRTOS_CLIProcessCommand>
 8004b7c:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004b7e:	7823      	ldrb	r3, [r4, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d000      	beq.n	8004b86 <CLI_CommandParser+0x7a>
 8004b84:	e16f      	b.n	8004e66 <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004b86:	0020      	movs	r0, r4
 8004b88:	f7fb fac6 	bl	8000118 <strlen>
 8004b8c:	0002      	movs	r2, r0
 8004b8e:	2100      	movs	r1, #0
 8004b90:	0020      	movs	r0, r4
 8004b92:	f00f fd85 	bl	80146a0 <memset>
	} while(xReturned != pdFALSE);
 8004b96:	2e00      	cmp	r6, #0
 8004b98:	d100      	bne.n	8004b9c <CLI_CommandParser+0x90>
 8004b9a:	e1ab      	b.n	8004ef4 <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004b9c:	9803      	ldr	r0, [sp, #12]
 8004b9e:	f7ff fcf7 	bl	8004590 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004ba2:	783d      	ldrb	r5, [r7, #0]
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	d1cd      	bne.n	8004b44 <CLI_CommandParser+0x38>
 8004ba8:	2203      	movs	r2, #3
 8004baa:	49ba      	ldr	r1, [pc, #744]	; (8004e94 <CLI_CommandParser+0x388>)
 8004bac:	9803      	ldr	r0, [sp, #12]
 8004bae:	f00f ffe7 	bl	8014b80 <strncmp>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d1cf      	bne.n	8004b56 <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004bb6:	9b03      	ldr	r3, [sp, #12]
 8004bb8:	1cd9      	adds	r1, r3, #3
 8004bba:	3001      	adds	r0, #1
 8004bbc:	f7ff ff2c 	bl	8004a18 <AddSnippet>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d1b6      	bne.n	8004b32 <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004bc4:	4baf      	ldr	r3, [pc, #700]	; (8004e84 <CLI_CommandParser+0x378>)
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004bca:	230d      	movs	r3, #13
 8004bcc:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004bce:	7823      	ldrb	r3, [r4, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d100      	bne.n	8004bd6 <CLI_CommandParser+0xca>
 8004bd4:	e186      	b.n	8004ee4 <CLI_CommandParser+0x3d8>
 8004bd6:	4643      	mov	r3, r8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d100      	bne.n	8004bde <CLI_CommandParser+0xd2>
 8004bdc:	e19d      	b.n	8004f1a <CLI_CommandParser+0x40e>
 8004bde:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004be0:	0020      	movs	r0, r4
 8004be2:	f7fb fa99 	bl	8000118 <strlen>
 8004be6:	b282      	uxth	r2, r0
 8004be8:	2301      	movs	r3, #1
 8004bea:	425b      	negs	r3, r3
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	3333      	adds	r3, #51	; 0x33
 8004bf0:	0021      	movs	r1, r4
 8004bf2:	9804      	ldr	r0, [sp, #16]
 8004bf4:	f009 fd78 	bl	800e6e8 <writePxMutex>
 8004bf8:	e7c5      	b.n	8004b86 <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004bfa:	4ba2      	ldr	r3, [pc, #648]	; (8004e84 <CLI_CommandParser+0x378>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004c00:	49a5      	ldr	r1, [pc, #660]	; (8004e98 <CLI_CommandParser+0x38c>)
 8004c02:	3003      	adds	r0, #3
 8004c04:	f7ff ff08 	bl	8004a18 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004c08:	2241      	movs	r2, #65	; 0x41
 8004c0a:	49a4      	ldr	r1, [pc, #656]	; (8004e9c <CLI_CommandParser+0x390>)
 8004c0c:	0020      	movs	r0, r4
 8004c0e:	f00f fd3e 	bl	801468e <memcpy>
			xReturned = pdFALSE;
 8004c12:	e7dc      	b.n	8004bce <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004c14:	9903      	ldr	r1, [sp, #12]
 8004c16:	2002      	movs	r0, #2
 8004c18:	f7ff fefe 	bl	8004a18 <AddSnippet>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d102      	bne.n	8004c26 <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004c20:	230d      	movs	r3, #13
 8004c22:	7023      	strb	r3, [r4, #0]
 8004c24:	e7d3      	b.n	8004bce <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004c26:	2252      	movs	r2, #82	; 0x52
 8004c28:	4997      	ldr	r1, [pc, #604]	; (8004e88 <CLI_CommandParser+0x37c>)
 8004c2a:	0020      	movs	r0, r4
 8004c2c:	f00f fd2f 	bl	801468e <memcpy>
 8004c30:	e7cd      	b.n	8004bce <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004c32:	f00f fad1 	bl	80141d8 <__locale_ctype_ptr>
 8004c36:	786b      	ldrb	r3, [r5, #1]
 8004c38:	18c0      	adds	r0, r0, r3
 8004c3a:	7843      	ldrb	r3, [r0, #1]
 8004c3c:	075b      	lsls	r3, r3, #29
 8004c3e:	d497      	bmi.n	8004b70 <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004c40:	9903      	ldr	r1, [sp, #12]
 8004c42:	1a6a      	subs	r2, r5, r1
 8004c44:	a807      	add	r0, sp, #28
 8004c46:	f00f ffac 	bl	8014ba2 <strncpy>
				id =GetID(idString);
 8004c4a:	a807      	add	r0, sp, #28
 8004c4c:	f7ff fad8 	bl	8004200 <GetID>
 8004c50:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004c52:	4a93      	ldr	r2, [pc, #588]	; (8004ea0 <CLI_CommandParser+0x394>)
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	4693      	mov	fp, r2
 8004c58:	4290      	cmp	r0, r2
 8004c5a:	d03d      	beq.n	8004cd8 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004c5c:	2864      	cmp	r0, #100	; 0x64
 8004c5e:	d043      	beq.n	8004ce8 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004c60:	2866      	cmp	r0, #102	; 0x66
 8004c62:	d047      	beq.n	8004cf4 <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004c64:	28ff      	cmp	r0, #255	; 0xff
 8004c66:	d04b      	beq.n	8004d00 <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004c68:	466b      	mov	r3, sp
 8004c6a:	7d1b      	ldrb	r3, [r3, #20]
 8004c6c:	469a      	mov	sl, r3
 8004c6e:	2bfe      	cmp	r3, #254	; 0xfe
 8004c70:	d078      	beq.n	8004d64 <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004c72:	3501      	adds	r5, #1
 8004c74:	2206      	movs	r2, #6
 8004c76:	498b      	ldr	r1, [pc, #556]	; (8004ea4 <CLI_CommandParser+0x398>)
 8004c78:	0028      	movs	r0, r5
 8004c7a:	f00f ff81 	bl	8014b80 <strncmp>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d000      	beq.n	8004c84 <CLI_CommandParser+0x178>
 8004c82:	e0b4      	b.n	8004dee <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004c84:	4b88      	ldr	r3, [pc, #544]	; (8004ea8 <CLI_CommandParser+0x39c>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004c8a:	2119      	movs	r1, #25
 8004c8c:	4650      	mov	r0, sl
 8004c8e:	f003 fa67 	bl	8008160 <SendMessageToModule>
						osDelay(100);
 8004c92:	2064      	movs	r0, #100	; 0x64
 8004c94:	f009 fed3 	bl	800ea3e <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004c98:	4b84      	ldr	r3, [pc, #528]	; (8004eac <CLI_CommandParser+0x3a0>)
 8004c9a:	781a      	ldrb	r2, [r3, #0]
 8004c9c:	4b80      	ldr	r3, [pc, #512]	; (8004ea0 <CLI_CommandParser+0x394>)
 8004c9e:	7818      	ldrb	r0, [r3, #0]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	4651      	mov	r1, sl
 8004ca4:	f005 faa0 	bl	800a1e8 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004ca8:	4b7f      	ldr	r3, [pc, #508]	; (8004ea8 <CLI_CommandParser+0x39c>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b60      	cmp	r3, #96	; 0x60
 8004cae:	d18e      	bne.n	8004bce <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004cb0:	21fa      	movs	r1, #250	; 0xfa
 8004cb2:	0089      	lsls	r1, r1, #2
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	f00b f9ed 	bl	8010094 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004cba:	4b7d      	ldr	r3, [pc, #500]	; (8004eb0 <CLI_CommandParser+0x3a4>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d085      	beq.n	8004bce <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004cc2:	4a7c      	ldr	r2, [pc, #496]	; (8004eb4 <CLI_CommandParser+0x3a8>)
 8004cc4:	8813      	ldrh	r3, [r2, #0]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004cca:	9b05      	ldr	r3, [sp, #20]
 8004ccc:	0022      	movs	r2, r4
 8004cce:	497a      	ldr	r1, [pc, #488]	; (8004eb8 <CLI_CommandParser+0x3ac>)
 8004cd0:	0020      	movs	r0, r4
 8004cd2:	f00f ff11 	bl	8014af8 <sprintf>
 8004cd6:	e77a      	b.n	8004bce <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004cd8:	2299      	movs	r2, #153	; 0x99
 8004cda:	1c68      	adds	r0, r5, #1
 8004cdc:	0092      	lsls	r2, r2, #2
 8004cde:	0021      	movs	r1, r4
 8004ce0:	f009 ff40 	bl	800eb64 <FreeRTOS_CLIProcessCommand>
 8004ce4:	0006      	movs	r6, r0
 8004ce6:	e74a      	b.n	8004b7e <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004ce8:	2227      	movs	r2, #39	; 0x27
 8004cea:	4974      	ldr	r1, [pc, #464]	; (8004ebc <CLI_CommandParser+0x3b0>)
 8004cec:	0020      	movs	r0, r4
 8004cee:	f00f fcce 	bl	801468e <memcpy>
 8004cf2:	e76c      	b.n	8004bce <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004cf4:	2225      	movs	r2, #37	; 0x25
 8004cf6:	4972      	ldr	r1, [pc, #456]	; (8004ec0 <CLI_CommandParser+0x3b4>)
 8004cf8:	0020      	movs	r0, r4
 8004cfa:	f00f fcc8 	bl	801468e <memcpy>
 8004cfe:	e766      	b.n	8004bce <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004d00:	221a      	movs	r2, #26
 8004d02:	2100      	movs	r1, #0
 8004d04:	486f      	ldr	r0, [pc, #444]	; (8004ec4 <CLI_CommandParser+0x3b8>)
 8004d06:	f00f fccb 	bl	80146a0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004d0a:	3501      	adds	r5, #1
 8004d0c:	9803      	ldr	r0, [sp, #12]
 8004d0e:	f7fb fa03 	bl	8000118 <strlen>
 8004d12:	0006      	movs	r6, r0
 8004d14:	ab07      	add	r3, sp, #28
 8004d16:	0018      	movs	r0, r3
 8004d18:	f7fb f9fe 	bl	8000118 <strlen>
 8004d1c:	1e72      	subs	r2, r6, #1
 8004d1e:	1a12      	subs	r2, r2, r0
 8004d20:	0029      	movs	r1, r5
 8004d22:	4869      	ldr	r0, [pc, #420]	; (8004ec8 <CLI_CommandParser+0x3bc>)
 8004d24:	f00f ff3d 	bl	8014ba2 <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004d28:	9803      	ldr	r0, [sp, #12]
 8004d2a:	f7fb f9f5 	bl	8000118 <strlen>
 8004d2e:	0006      	movs	r6, r0
 8004d30:	a807      	add	r0, sp, #28
 8004d32:	f7fb f9f1 	bl	8000118 <strlen>
 8004d36:	1a33      	subs	r3, r6, r0
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2217      	movs	r2, #23
 8004d3c:	21ff      	movs	r1, #255	; 0xff
 8004d3e:	4658      	mov	r0, fp
 8004d40:	f003 f9e6 	bl	8008110 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004d44:	2299      	movs	r2, #153	; 0x99
 8004d46:	0092      	lsls	r2, r2, #2
 8004d48:	0021      	movs	r1, r4
 8004d4a:	0028      	movs	r0, r5
 8004d4c:	f009 ff0a 	bl	800eb64 <FreeRTOS_CLIProcessCommand>
 8004d50:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004d52:	0020      	movs	r0, r4
 8004d54:	f7fb f9e0 	bl	8000118 <strlen>
 8004d58:	1820      	adds	r0, r4, r0
 8004d5a:	221d      	movs	r2, #29
 8004d5c:	495b      	ldr	r1, [pc, #364]	; (8004ecc <CLI_CommandParser+0x3c0>)
 8004d5e:	f00f fc96 	bl	801468e <memcpy>
 8004d62:	e70c      	b.n	8004b7e <CLI_CommandParser+0x72>
					group =id >> 8;
 8004d64:	9b05      	ldr	r3, [sp, #20]
 8004d66:	121b      	asrs	r3, r3, #8
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	469a      	mov	sl, r3
 8004d6c:	4b58      	ldr	r3, [pc, #352]	; (8004ed0 <CLI_CommandParser+0x3c4>)
 8004d6e:	4699      	mov	r9, r3
 8004d70:	4652      	mov	r2, sl
 8004d72:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004d74:	221a      	movs	r2, #26
 8004d76:	2100      	movs	r1, #0
 8004d78:	4852      	ldr	r0, [pc, #328]	; (8004ec4 <CLI_CommandParser+0x3b8>)
 8004d7a:	f00f fc91 	bl	80146a0 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004d7e:	1c6b      	adds	r3, r5, #1
 8004d80:	9305      	str	r3, [sp, #20]
 8004d82:	9803      	ldr	r0, [sp, #12]
 8004d84:	f7fb f9c8 	bl	8000118 <strlen>
 8004d88:	0005      	movs	r5, r0
 8004d8a:	aa07      	add	r2, sp, #28
 8004d8c:	0010      	movs	r0, r2
 8004d8e:	f7fb f9c3 	bl	8000118 <strlen>
 8004d92:	3d01      	subs	r5, #1
 8004d94:	1a2a      	subs	r2, r5, r0
 8004d96:	9905      	ldr	r1, [sp, #20]
 8004d98:	484b      	ldr	r0, [pc, #300]	; (8004ec8 <CLI_CommandParser+0x3bc>)
 8004d9a:	f00f ff02 	bl	8014ba2 <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004d9e:	9803      	ldr	r0, [sp, #12]
 8004da0:	f7fb f9ba 	bl	8000118 <strlen>
 8004da4:	0005      	movs	r5, r0
 8004da6:	a807      	add	r0, sp, #28
 8004da8:	f7fb f9b6 	bl	8000118 <strlen>
 8004dac:	1a2b      	subs	r3, r5, r0
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2217      	movs	r2, #23
 8004db2:	4651      	mov	r1, sl
 8004db4:	4658      	mov	r0, fp
 8004db6:	f003 f9ab 	bl	8008110 <BroadcastMessage>
					if(InGroup(myID,group))
 8004dba:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <CLI_CommandParser+0x394>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4a44      	ldr	r2, [pc, #272]	; (8004ed4 <CLI_CommandParser+0x3c8>)
 8004dc4:	5a9b      	ldrh	r3, [r3, r2]
 8004dc6:	464a      	mov	r2, r9
 8004dc8:	7812      	ldrb	r2, [r2, #0]
 8004dca:	4113      	asrs	r3, r2
 8004dcc:	07db      	lsls	r3, r3, #31
 8004dce:	d406      	bmi.n	8004dde <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004dd0:	ab07      	add	r3, sp, #28
 8004dd2:	0022      	movs	r2, r4
 8004dd4:	4940      	ldr	r1, [pc, #256]	; (8004ed8 <CLI_CommandParser+0x3cc>)
 8004dd6:	0020      	movs	r0, r4
 8004dd8:	f00f fe8e 	bl	8014af8 <sprintf>
 8004ddc:	e6cf      	b.n	8004b7e <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004dde:	2299      	movs	r2, #153	; 0x99
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	0021      	movs	r1, r4
 8004de4:	9805      	ldr	r0, [sp, #20]
 8004de6:	f009 febd 	bl	800eb64 <FreeRTOS_CLIProcessCommand>
 8004dea:	0006      	movs	r6, r0
 8004dec:	e7f0      	b.n	8004dd0 <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004dee:	9803      	ldr	r0, [sp, #12]
 8004df0:	f7fb f992 	bl	8000118 <strlen>
 8004df4:	0006      	movs	r6, r0
 8004df6:	ab07      	add	r3, sp, #28
 8004df8:	0018      	movs	r0, r3
 8004dfa:	f7fb f98d 	bl	8000118 <strlen>
 8004dfe:	1e72      	subs	r2, r6, #1
 8004e00:	1a12      	subs	r2, r2, r0
 8004e02:	0029      	movs	r1, r5
 8004e04:	4830      	ldr	r0, [pc, #192]	; (8004ec8 <CLI_CommandParser+0x3bc>)
 8004e06:	f00f fecc 	bl	8014ba2 <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004e0a:	9803      	ldr	r0, [sp, #12]
 8004e0c:	f7fb f984 	bl	8000118 <strlen>
 8004e10:	0005      	movs	r5, r0
 8004e12:	a807      	add	r0, sp, #28
 8004e14:	f7fb f980 	bl	8000118 <strlen>
 8004e18:	3d01      	subs	r5, #1
 8004e1a:	1a2a      	subs	r2, r5, r0
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	2117      	movs	r1, #23
 8004e20:	4650      	mov	r0, sl
 8004e22:	f003 f99d 	bl	8008160 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004e26:	9a05      	ldr	r2, [sp, #20]
 8004e28:	492c      	ldr	r1, [pc, #176]	; (8004edc <CLI_CommandParser+0x3d0>)
 8004e2a:	0020      	movs	r0, r4
 8004e2c:	f00f fe64 	bl	8014af8 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004e30:	7823      	ldrb	r3, [r4, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <CLI_CommandParser+0x330>
 8004e36:	4643      	mov	r3, r8
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d108      	bne.n	8004e4e <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004e3c:	0020      	movs	r0, r4
 8004e3e:	f7fb f96b 	bl	8000118 <strlen>
 8004e42:	0002      	movs	r2, r0
 8004e44:	2100      	movs	r1, #0
 8004e46:	0020      	movs	r0, r4
 8004e48:	f00f fc2a 	bl	80146a0 <memset>
 8004e4c:	e72c      	b.n	8004ca8 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f7fb f962 	bl	8000118 <strlen>
 8004e54:	b282      	uxth	r2, r0
 8004e56:	2301      	movs	r3, #1
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	3331      	adds	r3, #49	; 0x31
 8004e5c:	0021      	movs	r1, r4
 8004e5e:	9804      	ldr	r0, [sp, #16]
 8004e60:	f009 fc42 	bl	800e6e8 <writePxMutex>
 8004e64:	e7ea      	b.n	8004e3c <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004e66:	4643      	mov	r3, r8
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d100      	bne.n	8004e6e <CLI_CommandParser+0x362>
 8004e6c:	e68b      	b.n	8004b86 <CLI_CommandParser+0x7a>
 8004e6e:	e6b7      	b.n	8004be0 <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004e70:	2301      	movs	r3, #1
 8004e72:	425b      	negs	r3, r3
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	3333      	adds	r3, #51	; 0x33
 8004e78:	2238      	movs	r2, #56	; 0x38
 8004e7a:	4919      	ldr	r1, [pc, #100]	; (8004ee0 <CLI_CommandParser+0x3d4>)
 8004e7c:	9804      	ldr	r0, [sp, #16]
 8004e7e:	f009 fc33 	bl	800e6e8 <writePxMutex>
}
 8004e82:	e043      	b.n	8004f0c <CLI_CommandParser+0x400>
 8004e84:	200012c4 	.word	0x200012c4
 8004e88:	08019830 	.word	0x08019830
 8004e8c:	08019884 	.word	0x08019884
 8004e90:	080198d0 	.word	0x080198d0
 8004e94:	0801982c 	.word	0x0801982c
 8004e98:	08019234 	.word	0x08019234
 8004e9c:	0801988c 	.word	0x0801988c
 8004ea0:	200010ea 	.word	0x200010ea
 8004ea4:	08019970 	.word	0x08019970
 8004ea8:	20006dd0 	.word	0x20006dd0
 8004eac:	20000ae8 	.word	0x20000ae8
 8004eb0:	20001188 	.word	0x20001188
 8004eb4:	20001b52 	.word	0x20001b52
 8004eb8:	0801999c 	.word	0x0801999c
 8004ebc:	080198d4 	.word	0x080198d4
 8004ec0:	080198fc 	.word	0x080198fc
 8004ec4:	20000d60 	.word	0x20000d60
 8004ec8:	20000fac 	.word	0x20000fac
 8004ecc:	08019924 	.word	0x08019924
 8004ed0:	20001296 	.word	0x20001296
 8004ed4:	20000f34 	.word	0x20000f34
 8004ed8:	08019944 	.word	0x08019944
 8004edc:	08019978 	.word	0x08019978
 8004ee0:	080199bc 	.word	0x080199bc
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004ee4:	0020      	movs	r0, r4
 8004ee6:	f7fb f917 	bl	8000118 <strlen>
 8004eea:	0002      	movs	r2, r0
 8004eec:	2100      	movs	r1, #0
 8004eee:	0020      	movs	r0, r4
 8004ef0:	f00f fbd6 	bl	80146a0 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004ef4:	2209      	movs	r2, #9
 8004ef6:	2100      	movs	r1, #0
 8004ef8:	a807      	add	r0, sp, #28
 8004efa:	f00f fbd1 	bl	80146a0 <memset>
	if(!recordSnippet && enableOutput)
 8004efe:	4b0b      	ldr	r3, [pc, #44]	; (8004f2c <CLI_CommandParser+0x420>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <CLI_CommandParser+0x400>
 8004f06:	4643      	mov	r3, r8
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1b1      	bne.n	8004e70 <CLI_CommandParser+0x364>
}
 8004f0c:	b00b      	add	sp, #44	; 0x2c
 8004f0e:	bc3c      	pop	{r2, r3, r4, r5}
 8004f10:	4690      	mov	r8, r2
 8004f12:	4699      	mov	r9, r3
 8004f14:	46a2      	mov	sl, r4
 8004f16:	46ab      	mov	fp, r5
 8004f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f1a:	0020      	movs	r0, r4
 8004f1c:	f7fb f8fc 	bl	8000118 <strlen>
 8004f20:	0002      	movs	r2, r0
 8004f22:	2100      	movs	r1, #0
 8004f24:	0020      	movs	r0, r4
 8004f26:	f00f fbbb 	bl	80146a0 <memset>
 8004f2a:	e7e3      	b.n	8004ef4 <CLI_CommandParser+0x3e8>
 8004f2c:	200012c4 	.word	0x200012c4

08004f30 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8004f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f32:	46ce      	mov	lr, r9
 8004f34:	4647      	mov	r7, r8
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b089      	sub	sp, #36	; 0x24
	char cRxedChar ='\0';
 8004f3a:	230f      	movs	r3, #15
 8004f3c:	aa04      	add	r2, sp, #16
 8004f3e:	4694      	mov	ip, r2
 8004f40:	4463      	add	r3, ip
 8004f42:	2200      	movs	r2, #0
 8004f44:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8004f46:	2101      	movs	r1, #1
 8004f48:	4249      	negs	r1, r1
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f00b f8a2 	bl	8010094 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004f50:	f009 fe86 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 8004f54:	9005      	str	r0, [sp, #20]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8004f56:	23e1      	movs	r3, #225	; 0xe1
 8004f58:	031b      	lsls	r3, r3, #12
 8004f5a:	4a5b      	ldr	r2, [pc, #364]	; (80050c8 <prvCLITask+0x198>)
 8004f5c:	6892      	ldr	r2, [r2, #8]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d009      	beq.n	8004f76 <prvCLITask+0x46>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004f62:	2401      	movs	r4, #1
			if(port != PcPort)
 8004f64:	4e59      	ldr	r6, [pc, #356]	; (80050cc <prvCLITask+0x19c>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004f66:	001d      	movs	r5, r3
			if(port != PcPort)
 8004f68:	7833      	ldrb	r3, [r6, #0]
 8004f6a:	42a3      	cmp	r3, r4
 8004f6c:	d12d      	bne.n	8004fca <prvCLITask+0x9a>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004f6e:	3401      	adds	r4, #1
 8004f70:	b2e4      	uxtb	r4, r4
 8004f72:	2c07      	cmp	r4, #7
 8004f74:	d1f8      	bne.n	8004f68 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8004f76:	4b56      	ldr	r3, [pc, #344]	; (80050d0 <prvCLITask+0x1a0>)
 8004f78:	881a      	ldrh	r2, [r3, #0]
 8004f7a:	0053      	lsls	r3, r2, #1
 8004f7c:	189b      	adds	r3, r3, r2
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	4a54      	ldr	r2, [pc, #336]	; (80050d4 <prvCLITask+0x1a4>)
 8004f82:	189b      	adds	r3, r3, r2
 8004f84:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <prvCLITask+0x1a8>)
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	4c54      	ldr	r4, [pc, #336]	; (80050dc <prvCLITask+0x1ac>)
 8004f8a:	4d50      	ldr	r5, [pc, #320]	; (80050cc <prvCLITask+0x19c>)
 8004f8c:	7829      	ldrb	r1, [r5, #0]
 8004f8e:	9100      	str	r1, [sp, #0]
 8004f90:	4953      	ldr	r1, [pc, #332]	; (80050e0 <prvCLITask+0x1b0>)
 8004f92:	0020      	movs	r0, r4
 8004f94:	f00f fdb0 	bl	8014af8 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8004f98:	22a4      	movs	r2, #164	; 0xa4
 8004f9a:	7828      	ldrb	r0, [r5, #0]
 8004f9c:	230a      	movs	r3, #10
 8004f9e:	0092      	lsls	r2, r2, #2
 8004fa0:	4950      	ldr	r1, [pc, #320]	; (80050e4 <prvCLITask+0x1b4>)
 8004fa2:	f009 fbc9 	bl	800e738 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8004fa6:	0020      	movs	r0, r4
 8004fa8:	f7fb f8b6 	bl	8000118 <strlen>
 8004fac:	b282      	uxth	r2, r0
 8004fae:	7828      	ldrb	r0, [r5, #0]
 8004fb0:	230a      	movs	r3, #10
 8004fb2:	0021      	movs	r1, r4
 8004fb4:	f009 fbc0 	bl	800e738 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8004fb8:	2700      	movs	r7, #0
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8004fba:	4b44      	ldr	r3, [pc, #272]	; (80050cc <prvCLITask+0x19c>)
 8004fbc:	4699      	mov	r9, r3
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	; (80050e8 <prvCLITask+0x1b8>)
 8004fc0:	4698      	mov	r8, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8004fc2:	001e      	movs	r6, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	9304      	str	r3, [sp, #16]
 8004fc8:	e05a      	b.n	8005080 <prvCLITask+0x150>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004fca:	0029      	movs	r1, r5
 8004fcc:	0020      	movs	r0, r4
 8004fce:	f009 fbf9 	bl	800e7c4 <UpdateBaudrate>
 8004fd2:	e7cc      	b.n	8004f6e <prvCLITask+0x3e>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 8004fd4:	240f      	movs	r4, #15
 8004fd6:	a904      	add	r1, sp, #16
 8004fd8:	468c      	mov	ip, r1
 8004fda:	4464      	add	r4, ip
 8004fdc:	7022      	strb	r2, [r4, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8004fde:	006a      	lsls	r2, r5, #1
 8004fe0:	1952      	adds	r2, r2, r5
 8004fe2:	0192      	lsls	r2, r2, #6
 8004fe4:	4c41      	ldr	r4, [pc, #260]	; (80050ec <prvCLITask+0x1bc>)
 8004fe6:	18a2      	adds	r2, r4, r2
 8004fe8:	2400      	movs	r4, #0
 8004fea:	9903      	ldr	r1, [sp, #12]
 8004fec:	5454      	strb	r4, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 8004fee:	4a3e      	ldr	r2, [pc, #248]	; (80050e8 <prvCLITask+0x1b8>)
 8004ff0:	5553      	strb	r3, [r2, r5]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 8004ff2:	250f      	movs	r5, #15
 8004ff4:	ab04      	add	r3, sp, #16
 8004ff6:	469c      	mov	ip, r3
 8004ff8:	4465      	add	r5, ip
 8004ffa:	230a      	movs	r3, #10
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	0029      	movs	r1, r5
 8005000:	f009 fb9a 	bl	800e738 <writePxITMutex>
		if(cRxedChar == '\r'){
 8005004:	782b      	ldrb	r3, [r5, #0]
 8005006:	2b0d      	cmp	r3, #13
 8005008:	d01d      	beq.n	8005046 <prvCLITask+0x116>
			if(cRxedChar == '\n'){
 800500a:	2b0a      	cmp	r3, #10
 800500c:	d036      	beq.n	800507c <prvCLITask+0x14c>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 800500e:	2b08      	cmp	r3, #8
 8005010:	d052      	beq.n	80050b8 <prvCLITask+0x188>
 8005012:	2b7f      	cmp	r3, #127	; 0x7f
 8005014:	d050      	beq.n	80050b8 <prvCLITask+0x188>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 8005016:	001a      	movs	r2, r3
 8005018:	3a20      	subs	r2, #32
 800501a:	2a5e      	cmp	r2, #94	; 0x5e
 800501c:	d82e      	bhi.n	800507c <prvCLITask+0x14c>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 800501e:	2f31      	cmp	r7, #49	; 0x31
 8005020:	dc2c      	bgt.n	800507c <prvCLITask+0x14c>
						cInputString[cInputIndex] =cRxedChar;
 8005022:	4a33      	ldr	r2, [pc, #204]	; (80050f0 <prvCLITask+0x1c0>)
 8005024:	55d3      	strb	r3, [r2, r7]
						cInputIndex++;
 8005026:	3701      	adds	r7, #1
 8005028:	b27f      	sxtb	r7, r7
 800502a:	e027      	b.n	800507c <prvCLITask+0x14c>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 800502c:	5571      	strb	r1, [r6, r5]
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800502e:	9b04      	ldr	r3, [sp, #16]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005030:	9303      	str	r3, [sp, #12]
 8005032:	5ce2      	ldrb	r2, [r4, r3]
 8005034:	2a00      	cmp	r2, #0
 8005036:	d1cd      	bne.n	8004fd4 <prvCLITask+0xa4>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005038:	2bbf      	cmp	r3, #191	; 0xbf
 800503a:	d0f7      	beq.n	800502c <prvCLITask+0xfc>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 800503c:	3301      	adds	r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	2bbf      	cmp	r3, #191	; 0xbf
 8005042:	d9f5      	bls.n	8005030 <prvCLITask+0x100>
 8005044:	e7d5      	b.n	8004ff2 <prvCLITask+0xc2>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005046:	4b21      	ldr	r3, [pc, #132]	; (80050cc <prvCLITask+0x19c>)
 8005048:	7818      	ldrb	r0, [r3, #0]
 800504a:	230a      	movs	r3, #10
 800504c:	2202      	movs	r2, #2
 800504e:	4929      	ldr	r1, [pc, #164]	; (80050f4 <prvCLITask+0x1c4>)
 8005050:	f009 fb72 	bl	800e738 <writePxITMutex>
			if(cInputIndex == 0){
 8005054:	2f00      	cmp	r7, #0
 8005056:	d02a      	beq.n	80050ae <prvCLITask+0x17e>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005058:	4f25      	ldr	r7, [pc, #148]	; (80050f0 <prvCLITask+0x1c0>)
 800505a:	4b1c      	ldr	r3, [pc, #112]	; (80050cc <prvCLITask+0x19c>)
 800505c:	7818      	ldrb	r0, [r3, #0]
 800505e:	9b05      	ldr	r3, [sp, #20]
 8005060:	003a      	movs	r2, r7
 8005062:	2101      	movs	r1, #1
 8005064:	f7ff fd52 	bl	8004b0c <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 8005068:	0039      	movs	r1, r7
 800506a:	4823      	ldr	r0, [pc, #140]	; (80050f8 <prvCLITask+0x1c8>)
 800506c:	f00f fd80 	bl	8014b70 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 8005070:	2232      	movs	r2, #50	; 0x32
 8005072:	2100      	movs	r1, #0
 8005074:	0038      	movs	r0, r7
 8005076:	f00f fb13 	bl	80146a0 <memset>
			cInputIndex =0;
 800507a:	2700      	movs	r7, #0
		taskYIELD();
 800507c:	f00b fac4 	bl	8010608 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005080:	464b      	mov	r3, r9
 8005082:	7818      	ldrb	r0, [r3, #0]
 8005084:	1e45      	subs	r5, r0, #1
 8005086:	4643      	mov	r3, r8
 8005088:	5d59      	ldrb	r1, [r3, r5]
 800508a:	b28b      	uxth	r3, r1
 800508c:	2bbf      	cmp	r3, #191	; 0xbf
 800508e:	d8b0      	bhi.n	8004ff2 <prvCLITask+0xc2>
			if(UARTRxBuf[PcPort - 1][chr]){
 8005090:	9103      	str	r1, [sp, #12]
 8005092:	006a      	lsls	r2, r5, #1
 8005094:	1952      	adds	r2, r2, r5
 8005096:	0192      	lsls	r2, r2, #6
 8005098:	4c14      	ldr	r4, [pc, #80]	; (80050ec <prvCLITask+0x1bc>)
 800509a:	18a2      	adds	r2, r4, r2
 800509c:	5c52      	ldrb	r2, [r2, r1]
 800509e:	2a00      	cmp	r2, #0
 80050a0:	d198      	bne.n	8004fd4 <prvCLITask+0xa4>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80050a2:	2100      	movs	r1, #0
			if(UARTRxBuf[PcPort - 1][chr]){
 80050a4:	006a      	lsls	r2, r5, #1
 80050a6:	1952      	adds	r2, r2, r5
 80050a8:	0192      	lsls	r2, r2, #6
 80050aa:	18a4      	adds	r4, r4, r2
 80050ac:	e7c4      	b.n	8005038 <prvCLITask+0x108>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80050ae:	4912      	ldr	r1, [pc, #72]	; (80050f8 <prvCLITask+0x1c8>)
 80050b0:	480f      	ldr	r0, [pc, #60]	; (80050f0 <prvCLITask+0x1c0>)
 80050b2:	f00f fd5d 	bl	8014b70 <strcpy>
 80050b6:	e7cf      	b.n	8005058 <prvCLITask+0x128>
				if(cInputIndex > 0){
 80050b8:	2f00      	cmp	r7, #0
 80050ba:	dddf      	ble.n	800507c <prvCLITask+0x14c>
					cInputIndex--;
 80050bc:	3f01      	subs	r7, #1
 80050be:	b27f      	sxtb	r7, r7
					cInputString[cInputIndex] ='\0';
 80050c0:	4b0b      	ldr	r3, [pc, #44]	; (80050f0 <prvCLITask+0x1c0>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	55da      	strb	r2, [r3, r7]
 80050c6:	e7d9      	b.n	800507c <prvCLITask+0x14c>
 80050c8:	20006e50 	.word	0x20006e50
 80050cc:	20000ae8 	.word	0x20000ae8
 80050d0:	20000078 	.word	0x20000078
 80050d4:	08019284 	.word	0x08019284
 80050d8:	200010ea 	.word	0x200010ea
 80050dc:	20001298 	.word	0x20001298
 80050e0:	08019a28 	.word	0x08019a28
 80050e4:	08019a54 	.word	0x08019a54
 80050e8:	200017c8 	.word	0x200017c8
 80050ec:	20001348 	.word	0x20001348
 80050f0:	200011c8 	.word	0x200011c8
 80050f4:	0801b310 	.word	0x0801b310
 80050f8:	20001264 	.word	0x20001264

080050fc <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005100:	4b1c      	ldr	r3, [pc, #112]	; (8005174 <ParseSnippetCommand+0x78>)
 8005102:	781a      	ldrb	r2, [r3, #0]
 8005104:	3a01      	subs	r2, #1
 8005106:	0093      	lsls	r3, r2, #2
 8005108:	189b      	adds	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4a1a      	ldr	r2, [pc, #104]	; (8005178 <ParseSnippetCommand+0x7c>)
 800510e:	18d3      	adds	r3, r2, r3
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d02c      	beq.n	8005170 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005116:	4b19      	ldr	r3, [pc, #100]	; (800517c <ParseSnippetCommand+0x80>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800511e:	4b17      	ldr	r3, [pc, #92]	; (800517c <ParseSnippetCommand+0x80>)
 8005120:	681d      	ldr	r5, [r3, #0]
 8005122:	782b      	ldrb	r3, [r5, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d012      	beq.n	800514e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005128:	2113      	movs	r1, #19
 800512a:	0028      	movs	r0, r5
 800512c:	f00f fd12 	bl	8014b54 <strchr>
 8005130:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005132:	d011      	beq.n	8005158 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005134:	1b42      	subs	r2, r0, r5
 8005136:	0029      	movs	r1, r5
 8005138:	0020      	movs	r0, r4
 800513a:	f00f fd32 	bl	8014ba2 <strncpy>
		ptrStart =ptrEnd + 1;
 800513e:	3601      	adds	r6, #1
 8005140:	4b0e      	ldr	r3, [pc, #56]	; (800517c <ParseSnippetCommand+0x80>)
 8005142:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005144:	2001      	movs	r0, #1
 8005146:	e006      	b.n	8005156 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005148:	4b0c      	ldr	r3, [pc, #48]	; (800517c <ParseSnippetCommand+0x80>)
 800514a:	6018      	str	r0, [r3, #0]
 800514c:	e7e7      	b.n	800511e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800514e:	4b0b      	ldr	r3, [pc, #44]	; (800517c <ParseSnippetCommand+0x80>)
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
		return false;
 8005154:	2000      	movs	r0, #0
}
 8005156:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005158:	0029      	movs	r1, r5
 800515a:	0020      	movs	r0, r4
 800515c:	f00f fd08 	bl	8014b70 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005160:	0020      	movs	r0, r4
 8005162:	f7fa ffd9 	bl	8000118 <strlen>
 8005166:	182d      	adds	r5, r5, r0
 8005168:	4b04      	ldr	r3, [pc, #16]	; (800517c <ParseSnippetCommand+0x80>)
 800516a:	601d      	str	r5, [r3, #0]
	return true;
 800516c:	2001      	movs	r0, #1
 800516e:	e7f2      	b.n	8005156 <ParseSnippetCommand+0x5a>
		return false;
 8005170:	2000      	movs	r0, #0
 8005172:	e7f0      	b.n	8005156 <ParseSnippetCommand+0x5a>
 8005174:	20001297 	.word	0x20001297
 8005178:	20006e6c 	.word	0x20006e6c
 800517c:	200012c0 	.word	0x200012c0

08005180 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 8005180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005182:	b083      	sub	sp, #12
 8005184:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 8005186:	0083      	lsls	r3, r0, #2
 8005188:	181b      	adds	r3, r3, r0
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4a3f      	ldr	r2, [pc, #252]	; (800528c <CheckSnippetCondition+0x10c>)
 800518e:	5c9b      	ldrb	r3, [r3, r2]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d003      	beq.n	800519c <CheckSnippetCondition+0x1c>
 8005194:	2b03      	cmp	r3, #3
 8005196:	d015      	beq.n	80051c4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 8005198:	2000      	movs	r0, #0
 800519a:	e011      	b.n	80051c0 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 800519c:	493b      	ldr	r1, [pc, #236]	; (800528c <CheckSnippetCondition+0x10c>)
 800519e:	0083      	lsls	r3, r0, #2
 80051a0:	181a      	adds	r2, r3, r0
 80051a2:	0092      	lsls	r2, r2, #2
 80051a4:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80051a6:	7890      	ldrb	r0, [r2, #2]
 80051a8:	00c2      	lsls	r2, r0, #3
 80051aa:	1812      	adds	r2, r2, r0
 80051ac:	191b      	adds	r3, r3, r4
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	18cb      	adds	r3, r1, r3
 80051b2:	4937      	ldr	r1, [pc, #220]	; (8005290 <CheckSnippetCondition+0x110>)
 80051b4:	5c50      	ldrb	r0, [r2, r1]
 80051b6:	78db      	ldrb	r3, [r3, #3]
 80051b8:	1ac0      	subs	r0, r0, r3
 80051ba:	4243      	negs	r3, r0
 80051bc:	4158      	adcs	r0, r3
 80051be:	b2c0      	uxtb	r0, r0
}
 80051c0:	b003      	add	sp, #12
 80051c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80051c4:	4e31      	ldr	r6, [pc, #196]	; (800528c <CheckSnippetCondition+0x10c>)
 80051c6:	0085      	lsls	r5, r0, #2
 80051c8:	182b      	adds	r3, r5, r0
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	18f3      	adds	r3, r6, r3
 80051ce:	78da      	ldrb	r2, [r3, #3]
 80051d0:	3a01      	subs	r2, #1
 80051d2:	0053      	lsls	r3, r2, #1
 80051d4:	189b      	adds	r3, r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4a2e      	ldr	r2, [pc, #184]	; (8005294 <CheckSnippetCondition+0x114>)
 80051da:	589b      	ldr	r3, [r3, r2]
 80051dc:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80051de:	1829      	adds	r1, r5, r0
 80051e0:	0089      	lsls	r1, r1, #2
 80051e2:	3106      	adds	r1, #6
 80051e4:	1989      	adds	r1, r1, r6
 80051e6:	2204      	movs	r2, #4
 80051e8:	a801      	add	r0, sp, #4
 80051ea:	f00f fa50 	bl	801468e <memcpy>
			switch(snippets[index].cond.mathOperator){
 80051ee:	192d      	adds	r5, r5, r4
 80051f0:	00ad      	lsls	r5, r5, #2
 80051f2:	1975      	adds	r5, r6, r5
 80051f4:	786b      	ldrb	r3, [r5, #1]
 80051f6:	2b06      	cmp	r3, #6
 80051f8:	d83f      	bhi.n	800527a <CheckSnippetCondition+0xfa>
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4a26      	ldr	r2, [pc, #152]	; (8005298 <CheckSnippetCondition+0x118>)
 80051fe:	58d3      	ldr	r3, [r2, r3]
 8005200:	469f      	mov	pc, r3
					if(flt1 == flt2)
 8005202:	1c39      	adds	r1, r7, #0
 8005204:	9801      	ldr	r0, [sp, #4]
 8005206:	f7fb f963 	bl	80004d0 <__aeabi_fcmpeq>
 800520a:	1e43      	subs	r3, r0, #1
 800520c:	4198      	sbcs	r0, r3
 800520e:	e7d7      	b.n	80051c0 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005210:	1c39      	adds	r1, r7, #0
 8005212:	9801      	ldr	r0, [sp, #4]
 8005214:	f7fb f962 	bl	80004dc <__aeabi_fcmplt>
 8005218:	1e43      	subs	r3, r0, #1
 800521a:	4198      	sbcs	r0, r3
 800521c:	e7d0      	b.n	80051c0 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 800521e:	1c39      	adds	r1, r7, #0
 8005220:	9801      	ldr	r0, [sp, #4]
 8005222:	f7fb f96f 	bl	8000504 <__aeabi_fcmpgt>
 8005226:	2800      	cmp	r0, #0
 8005228:	d029      	beq.n	800527e <CheckSnippetCondition+0xfe>
 800522a:	2100      	movs	r1, #0
 800522c:	1c38      	adds	r0, r7, #0
 800522e:	f7fb f94f 	bl	80004d0 <__aeabi_fcmpeq>
 8005232:	4243      	negs	r3, r0
 8005234:	4158      	adcs	r0, r3
 8005236:	e7c3      	b.n	80051c0 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005238:	1c39      	adds	r1, r7, #0
 800523a:	9801      	ldr	r0, [sp, #4]
 800523c:	f7fb f958 	bl	80004f0 <__aeabi_fcmple>
 8005240:	1e43      	subs	r3, r0, #1
 8005242:	4198      	sbcs	r0, r3
 8005244:	e7bc      	b.n	80051c0 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005246:	1c39      	adds	r1, r7, #0
 8005248:	9801      	ldr	r0, [sp, #4]
 800524a:	f7fb f965 	bl	8000518 <__aeabi_fcmpge>
 800524e:	2800      	cmp	r0, #0
 8005250:	d017      	beq.n	8005282 <CheckSnippetCondition+0x102>
 8005252:	2100      	movs	r1, #0
 8005254:	1c38      	adds	r0, r7, #0
 8005256:	f7fb f93b 	bl	80004d0 <__aeabi_fcmpeq>
 800525a:	4243      	negs	r3, r0
 800525c:	4158      	adcs	r0, r3
 800525e:	e7af      	b.n	80051c0 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005260:	1c39      	adds	r1, r7, #0
 8005262:	9801      	ldr	r0, [sp, #4]
 8005264:	f7fb f934 	bl	80004d0 <__aeabi_fcmpeq>
 8005268:	2800      	cmp	r0, #0
 800526a:	d10c      	bne.n	8005286 <CheckSnippetCondition+0x106>
 800526c:	2100      	movs	r1, #0
 800526e:	1c38      	adds	r0, r7, #0
 8005270:	f7fb f92e 	bl	80004d0 <__aeabi_fcmpeq>
 8005274:	4243      	negs	r3, r0
 8005276:	4158      	adcs	r0, r3
 8005278:	e7a2      	b.n	80051c0 <CheckSnippetCondition+0x40>
	return false;
 800527a:	2000      	movs	r0, #0
 800527c:	e7a0      	b.n	80051c0 <CheckSnippetCondition+0x40>
 800527e:	2000      	movs	r0, #0
 8005280:	e79e      	b.n	80051c0 <CheckSnippetCondition+0x40>
 8005282:	2000      	movs	r0, #0
 8005284:	e79c      	b.n	80051c0 <CheckSnippetCondition+0x40>
 8005286:	2000      	movs	r0, #0
 8005288:	e79a      	b.n	80051c0 <CheckSnippetCondition+0x40>
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	20006e6c 	.word	0x20006e6c
 8005290:	20001ed0 	.word	0x20001ed0
 8005294:	200000ac 	.word	0x200000ac
 8005298:	08019810 	.word	0x08019810

0800529c <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800529e:	f009 fcdf 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 80052a2:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80052a4:	4b1c      	ldr	r3, [pc, #112]	; (8005318 <ExecuteSnippet+0x7c>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d032      	beq.n	8005312 <ExecuteSnippet+0x76>
 80052ac:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 80052ae:	4f1b      	ldr	r7, [pc, #108]	; (800531c <ExecuteSnippet+0x80>)
 80052b0:	e01a      	b.n	80052e8 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <ExecuteSnippet+0x84>)
 80052b4:	7818      	ldrb	r0, [r3, #0]
 80052b6:	002b      	movs	r3, r5
 80052b8:	4a1a      	ldr	r2, [pc, #104]	; (8005324 <ExecuteSnippet+0x88>)
 80052ba:	2100      	movs	r1, #0
 80052bc:	f7ff fc26 	bl	8004b0c <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80052c0:	0028      	movs	r0, r5
 80052c2:	f7fa ff29 	bl	8000118 <strlen>
 80052c6:	0002      	movs	r2, r0
 80052c8:	2100      	movs	r1, #0
 80052ca:	0028      	movs	r0, r5
 80052cc:	f00f f9e8 	bl	80146a0 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80052d0:	4914      	ldr	r1, [pc, #80]	; (8005324 <ExecuteSnippet+0x88>)
 80052d2:	68f0      	ldr	r0, [r6, #12]
 80052d4:	f7ff ff12 	bl	80050fc <ParseSnippetCommand>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d1ea      	bne.n	80052b2 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 80052dc:	3401      	adds	r4, #1
 80052de:	b2a4      	uxth	r4, r4
 80052e0:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <ExecuteSnippet+0x7c>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	42a3      	cmp	r3, r4
 80052e6:	d914      	bls.n	8005312 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 80052e8:	00a3      	lsls	r3, r4, #2
 80052ea:	191b      	adds	r3, r3, r4
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	7c1b      	ldrb	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0f2      	beq.n	80052dc <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 80052f6:	b2e0      	uxtb	r0, r4
 80052f8:	f7ff ff42 	bl	8005180 <CheckSnippetCondition>
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d0ed      	beq.n	80052dc <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005300:	4b09      	ldr	r3, [pc, #36]	; (8005328 <ExecuteSnippet+0x8c>)
 8005302:	2220      	movs	r2, #32
 8005304:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005306:	00a3      	lsls	r3, r4, #2
 8005308:	191e      	adds	r6, r3, r4
 800530a:	00b6      	lsls	r6, r6, #2
 800530c:	4b03      	ldr	r3, [pc, #12]	; (800531c <ExecuteSnippet+0x80>)
 800530e:	199e      	adds	r6, r3, r6
 8005310:	e7de      	b.n	80052d0 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8005312:	2000      	movs	r0, #0
 8005314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	20001297 	.word	0x20001297
 800531c:	20006e6c 	.word	0x20006e6c
 8005320:	20000ae8 	.word	0x20000ae8
 8005324:	20001230 	.word	0x20001230
 8005328:	20006dd0 	.word	0x20006dd0

0800532c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800532c:	2000      	movs	r0, #0
 800532e:	4770      	bx	lr

08005330 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	0005      	movs	r5, r0
 8005336:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005338:	2300      	movs	r3, #0
 800533a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800533c:	9300      	str	r3, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800533e:	aa01      	add	r2, sp, #4
 8005340:	2101      	movs	r1, #1
 8005342:	0020      	movs	r0, r4
 8005344:	f009 fc90 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005348:	2300      	movs	r3, #0
 800534a:	56c3      	ldrsb	r3, [r0, r3]
 800534c:	2b70      	cmp	r3, #112	; 0x70
 800534e:	d00e      	beq.n	800536e <setBaudrateCommand+0x3e>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005350:	466a      	mov	r2, sp
 8005352:	2102      	movs	r1, #2
 8005354:	0020      	movs	r0, r4
 8005356:	f009 fc87 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800535a:	f00e ff0e 	bl	801417a <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800535e:	2213      	movs	r2, #19
 8005360:	490f      	ldr	r1, [pc, #60]	; (80053a0 <setBaudrateCommand+0x70>)
 8005362:	0028      	movs	r0, r5
 8005364:	f00f f993 	bl	801468e <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005368:	2000      	movs	r0, #0
 800536a:	b002      	add	sp, #8
 800536c:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800536e:	3001      	adds	r0, #1
 8005370:	f00e ff03 	bl	801417a <atol>
 8005374:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005376:	466a      	mov	r2, sp
 8005378:	2102      	movs	r1, #2
 800537a:	0020      	movs	r0, r4
 800537c:	f009 fc74 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 8005380:	f00e fefb 	bl	801417a <atol>
 8005384:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 8005386:	b2f0      	uxtb	r0, r6
 8005388:	0021      	movs	r1, r4
 800538a:	f009 fa1b 	bl	800e7c4 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 800538e:	23ff      	movs	r3, #255	; 0xff
 8005390:	4033      	ands	r3, r6
 8005392:	0022      	movs	r2, r4
 8005394:	4903      	ldr	r1, [pc, #12]	; (80053a4 <setBaudrateCommand+0x74>)
 8005396:	0028      	movs	r0, r5
 8005398:	f00f fbae 	bl	8014af8 <sprintf>
 800539c:	e7e4      	b.n	8005368 <setBaudrateCommand+0x38>
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	0801a6e0 	.word	0x0801a6e0
 80053a4:	0801a6b8 	.word	0x0801a6b8

080053a8 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80053a8:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80053aa:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <flashsizeCommand+0x10>)
 80053ac:	881a      	ldrh	r2, [r3, #0]
 80053ae:	4903      	ldr	r1, [pc, #12]	; (80053bc <flashsizeCommand+0x14>)
 80053b0:	f00f fba2 	bl	8014af8 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80053b4:	2000      	movs	r0, #0
 80053b6:	bd10      	pop	{r4, pc}
 80053b8:	1ffff7cc 	.word	0x1ffff7cc
 80053bc:	0801a0ac 	.word	0x0801a0ac

080053c0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80053c0:	b510      	push	{r4, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	0004      	movs	r4, r0
 80053c6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80053d0:	aa01      	add	r2, sp, #4
 80053d2:	2101      	movs	r1, #1
 80053d4:	f009 fc48 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80053d8:	7803      	ldrb	r3, [r0, #0]
 80053da:	3b32      	subs	r3, #50	; 0x32
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d907      	bls.n	80053f0 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80053e0:	2215      	movs	r2, #21
 80053e2:	490b      	ldr	r1, [pc, #44]	; (8005410 <GetReadPrecentageCommand+0x50>)
 80053e4:	0020      	movs	r0, r4
 80053e6:	f00f f952 	bl	801468e <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 80053ea:	2000      	movs	r0, #0
 80053ec:	b002      	add	sp, #8
 80053ee:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80053f0:	f00e fec3 	bl	801417a <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 80053f4:	b2c0      	uxtb	r0, r0
 80053f6:	4669      	mov	r1, sp
 80053f8:	f008 f920 	bl	800d63c <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 80053fc:	9800      	ldr	r0, [sp, #0]
 80053fe:	f7fd fb91 	bl	8002b24 <__aeabi_f2d>
 8005402:	0002      	movs	r2, r0
 8005404:	000b      	movs	r3, r1
 8005406:	4903      	ldr	r1, [pc, #12]	; (8005414 <GetReadPrecentageCommand+0x54>)
 8005408:	0020      	movs	r0, r4
 800540a:	f00f fb75 	bl	8014af8 <sprintf>
 800540e:	e7ec      	b.n	80053ea <GetReadPrecentageCommand+0x2a>
 8005410:	08019da8 	.word	0x08019da8
 8005414:	08019d84 	.word	0x08019d84

08005418 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005418:	b510      	push	{r4, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800541e:	2300      	movs	r3, #0
 8005420:	9301      	str	r3, [sp, #4]
 8005422:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005424:	4669      	mov	r1, sp
 8005426:	a801      	add	r0, sp, #4
 8005428:	f008 f84a 	bl	800d4c0 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800542c:	a901      	add	r1, sp, #4
 800542e:	0020      	movs	r0, r4
 8005430:	f00f fb9e 	bl	8014b70 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005434:	9800      	ldr	r0, [sp, #0]
 8005436:	f7fd fb75 	bl	8002b24 <__aeabi_f2d>
 800543a:	0002      	movs	r2, r0
 800543c:	000b      	movs	r3, r1
 800543e:	4903      	ldr	r1, [pc, #12]	; (800544c <ReadVrefCommand+0x34>)
 8005440:	0020      	movs	r0, r4
 8005442:	f00f fb59 	bl	8014af8 <sprintf>
}
 8005446:	2000      	movs	r0, #0
 8005448:	b002      	add	sp, #8
 800544a:	bd10      	pop	{r4, pc}
 800544c:	08019df4 	.word	0x08019df4

08005450 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005450:	b510      	push	{r4, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005456:	2300      	movs	r3, #0
 8005458:	9301      	str	r3, [sp, #4]
 800545a:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800545c:	4669      	mov	r1, sp
 800545e:	a801      	add	r0, sp, #4
 8005460:	f008 f82e 	bl	800d4c0 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005464:	a901      	add	r1, sp, #4
 8005466:	0020      	movs	r0, r4
 8005468:	f00f fb82 	bl	8014b70 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 800546c:	9801      	ldr	r0, [sp, #4]
 800546e:	f7fd fb59 	bl	8002b24 <__aeabi_f2d>
 8005472:	0002      	movs	r2, r0
 8005474:	000b      	movs	r3, r1
 8005476:	4903      	ldr	r1, [pc, #12]	; (8005484 <ReadTempCommand+0x34>)
 8005478:	0020      	movs	r0, r4
 800547a:	f00f fb3d 	bl	8014af8 <sprintf>
}
 800547e:	2000      	movs	r0, #0
 8005480:	b002      	add	sp, #8
 8005482:	bd10      	pop	{r4, pc}
 8005484:	08019dc0 	.word	0x08019dc0

08005488 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	0005      	movs	r5, r0
 800548e:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005490:	2300      	movs	r3, #0
 8005492:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 8005494:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 8005496:	2300      	movs	r3, #0
 8005498:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800549a:	aa03      	add	r2, sp, #12
 800549c:	2101      	movs	r1, #1
 800549e:	0030      	movs	r0, r6
 80054a0:	f009 fbe2 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 80054a4:	0004      	movs	r4, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80054a6:	aa02      	add	r2, sp, #8
 80054a8:	2102      	movs	r1, #2
 80054aa:	0030      	movs	r0, r6
 80054ac:	f009 fbdc 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 80054b0:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80054b2:	7823      	ldrb	r3, [r4, #0]
 80054b4:	3b32      	subs	r3, #50	; 0x32
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d907      	bls.n	80054ca <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80054ba:	2215      	movs	r2, #21
 80054bc:	4919      	ldr	r1, [pc, #100]	; (8005524 <ADCReadCommand+0x9c>)
 80054be:	0028      	movs	r0, r5
 80054c0:	f00f f8e5 	bl	801468e <memcpy>
}
 80054c4:	2000      	movs	r0, #0
 80054c6:	b004      	add	sp, #16
 80054c8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80054ca:	0020      	movs	r0, r4
 80054cc:	f00e fe55 	bl	801417a <atol>
 80054d0:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80054d2:	4915      	ldr	r1, [pc, #84]	; (8005528 <ADCReadCommand+0xa0>)
 80054d4:	0030      	movs	r0, r6
 80054d6:	f7fa fe15 	bl	8000104 <strcmp>
 80054da:	2800      	cmp	r0, #0
 80054dc:	d005      	beq.n	80054ea <ADCReadCommand+0x62>
 80054de:	4913      	ldr	r1, [pc, #76]	; (800552c <ADCReadCommand+0xa4>)
 80054e0:	0030      	movs	r0, r6
 80054e2:	f7fa fe0f 	bl	8000104 <strcmp>
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d116      	bne.n	8005518 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 80054ea:	4e0f      	ldr	r6, [pc, #60]	; (8005528 <ADCReadCommand+0xa0>)
 80054ec:	0031      	movs	r1, r6
 80054ee:	0020      	movs	r0, r4
 80054f0:	f008 f986 	bl	800d800 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 80054f4:	aa01      	add	r2, sp, #4
 80054f6:	0031      	movs	r1, r6
 80054f8:	0020      	movs	r0, r4
 80054fa:	f008 f9b3 	bl	800d864 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 80054fe:	a901      	add	r1, sp, #4
 8005500:	0028      	movs	r0, r5
 8005502:	f00f fb35 	bl	8014b70 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005506:	9801      	ldr	r0, [sp, #4]
 8005508:	f7fb f85a 	bl	80005c0 <__aeabi_f2uiz>
 800550c:	b282      	uxth	r2, r0
 800550e:	4908      	ldr	r1, [pc, #32]	; (8005530 <ADCReadCommand+0xa8>)
 8005510:	0028      	movs	r0, r5
 8005512:	f00f faf1 	bl	8014af8 <sprintf>
 8005516:	e7d5      	b.n	80054c4 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005518:	2212      	movs	r2, #18
 800551a:	4906      	ldr	r1, [pc, #24]	; (8005534 <ADCReadCommand+0xac>)
 800551c:	0028      	movs	r0, r5
 800551e:	f00f f8b6 	bl	801468e <memcpy>
 8005522:	e7cf      	b.n	80054c4 <ADCReadCommand+0x3c>
 8005524:	08019da8 	.word	0x08019da8
 8005528:	08019d34 	.word	0x08019d34
 800552c:	08019d38 	.word	0x08019d38
 8005530:	08019d40 	.word	0x08019d40
 8005534:	08019d50 	.word	0x08019d50

08005538 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553a:	46d6      	mov	lr, sl
 800553c:	b500      	push	{lr}
 800553e:	b086      	sub	sp, #24
 8005540:	9003      	str	r0, [sp, #12]
 8005542:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005544:	2300      	movs	r3, #0
 8005546:	9305      	str	r3, [sp, #20]
	char WriteVaule[1] ="H";
 8005548:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <testportCommand+0x198>)
 800554a:	781a      	ldrb	r2, [r3, #0]
 800554c:	ab04      	add	r3, sp, #16
 800554e:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005550:	aa05      	add	r2, sp, #20
 8005552:	2101      	movs	r1, #1
 8005554:	f009 fb88 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8005558:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 800555a:	495e      	ldr	r1, [pc, #376]	; (80056d4 <testportCommand+0x19c>)
 800555c:	f7fa fdd2 	bl	8000104 <strcmp>
 8005560:	2800      	cmp	r0, #0
 8005562:	d176      	bne.n	8005652 <testportCommand+0x11a>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005564:	4b5c      	ldr	r3, [pc, #368]	; (80056d8 <testportCommand+0x1a0>)
 8005566:	781a      	ldrb	r2, [r3, #0]
 8005568:	4b5c      	ldr	r3, [pc, #368]	; (80056dc <testportCommand+0x1a4>)
 800556a:	189b      	adds	r3, r3, r2
 800556c:	3b01      	subs	r3, #1
 800556e:	781e      	ldrb	r6, [r3, #0]
 8005570:	2401      	movs	r4, #1
			if(PcPort != ports){
 8005572:	4d59      	ldr	r5, [pc, #356]	; (80056d8 <testportCommand+0x1a0>)
 8005574:	e040      	b.n	80055f8 <testportCommand+0xc0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005576:	0022      	movs	r2, r4
 8005578:	4959      	ldr	r1, [pc, #356]	; (80056e0 <testportCommand+0x1a8>)
 800557a:	9f03      	ldr	r7, [sp, #12]
 800557c:	0038      	movs	r0, r7
 800557e:	f00f fabb 	bl	8014af8 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005582:	0038      	movs	r0, r7
 8005584:	f7fa fdc8 	bl	8000118 <strlen>
 8005588:	b282      	uxth	r2, r0
 800558a:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <testportCommand+0x1a0>)
 800558c:	7818      	ldrb	r0, [r3, #0]
 800558e:	2364      	movs	r3, #100	; 0x64
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	3b5a      	subs	r3, #90	; 0x5a
 8005594:	0039      	movs	r1, r7
 8005596:	f009 f8a7 	bl	800e6e8 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 800559a:	2254      	movs	r2, #84	; 0x54
 800559c:	4951      	ldr	r1, [pc, #324]	; (80056e4 <testportCommand+0x1ac>)
 800559e:	9f03      	ldr	r7, [sp, #12]
 80055a0:	0038      	movs	r0, r7
 80055a2:	f00f f874 	bl	801468e <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80055a6:	0038      	movs	r0, r7
 80055a8:	f7fa fdb6 	bl	8000118 <strlen>
 80055ac:	b282      	uxth	r2, r0
 80055ae:	4b4a      	ldr	r3, [pc, #296]	; (80056d8 <testportCommand+0x1a0>)
 80055b0:	7818      	ldrb	r0, [r3, #0]
 80055b2:	2364      	movs	r3, #100	; 0x64
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	3b5a      	subs	r3, #90	; 0x5a
 80055b8:	0039      	movs	r1, r7
 80055ba:	f009 f895 	bl	800e6e8 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055be:	3601      	adds	r6, #1
 80055c0:	4b45      	ldr	r3, [pc, #276]	; (80056d8 <testportCommand+0x1a0>)
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	3a01      	subs	r2, #1
 80055c6:	0053      	lsls	r3, r2, #1
 80055c8:	189b      	adds	r3, r3, r2
 80055ca:	019b      	lsls	r3, r3, #6
 80055cc:	4a46      	ldr	r2, [pc, #280]	; (80056e8 <testportCommand+0x1b0>)
 80055ce:	18d3      	adds	r3, r2, r3
 80055d0:	5d9b      	ldrb	r3, [r3, r6]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10d      	bne.n	80055f2 <testportCommand+0xba>
 80055d6:	4692      	mov	sl, r2
 80055d8:	4f3f      	ldr	r7, [pc, #252]	; (80056d8 <testportCommand+0x1a0>)
					Delay_ms(1);
 80055da:	2001      	movs	r0, #1
 80055dc:	f00b f980 	bl	80108e0 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055e0:	783a      	ldrb	r2, [r7, #0]
 80055e2:	3a01      	subs	r2, #1
 80055e4:	0053      	lsls	r3, r2, #1
 80055e6:	189b      	adds	r3, r3, r2
 80055e8:	019b      	lsls	r3, r3, #6
 80055ea:	4453      	add	r3, sl
 80055ec:	5d9b      	ldrb	r3, [r3, r6]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f3      	beq.n	80055da <testportCommand+0xa2>
 80055f2:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 80055f4:	2c07      	cmp	r4, #7
 80055f6:	d035      	beq.n	8005664 <testportCommand+0x12c>
 80055f8:	b2e7      	uxtb	r7, r4
			if(PcPort != ports){
 80055fa:	782b      	ldrb	r3, [r5, #0]
 80055fc:	42bb      	cmp	r3, r7
 80055fe:	d0f8      	beq.n	80055f2 <testportCommand+0xba>
				WriteVaule[0] =rand();
 8005600:	f00f f866 	bl	80146d0 <rand>
 8005604:	ab02      	add	r3, sp, #8
 8005606:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005608:	2364      	movs	r3, #100	; 0x64
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	3b5a      	subs	r3, #90	; 0x5a
 800560e:	2201      	movs	r2, #1
 8005610:	a904      	add	r1, sp, #16
 8005612:	0038      	movs	r0, r7
 8005614:	f009 f868 	bl	800e6e8 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005618:	0038      	movs	r0, r7
 800561a:	f009 f843 	bl	800e6a4 <GetUart>
 800561e:	6803      	ldr	r3, [r0, #0]
 8005620:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005622:	aa02      	add	r2, sp, #8
 8005624:	7a12      	ldrb	r2, [r2, #8]
 8005626:	b2db      	uxtb	r3, r3
 8005628:	429a      	cmp	r2, r3
 800562a:	d0a4      	beq.n	8005576 <testportCommand+0x3e>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 800562c:	0022      	movs	r2, r4
 800562e:	492f      	ldr	r1, [pc, #188]	; (80056ec <testportCommand+0x1b4>)
 8005630:	9f03      	ldr	r7, [sp, #12]
 8005632:	0038      	movs	r0, r7
 8005634:	f00f fa60 	bl	8014af8 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005638:	0038      	movs	r0, r7
 800563a:	f7fa fd6d 	bl	8000118 <strlen>
 800563e:	b282      	uxth	r2, r0
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <testportCommand+0x1a0>)
 8005642:	7818      	ldrb	r0, [r3, #0]
 8005644:	2364      	movs	r3, #100	; 0x64
 8005646:	9300      	str	r3, [sp, #0]
 8005648:	3b5a      	subs	r3, #90	; 0x5a
 800564a:	0039      	movs	r1, r7
 800564c:	f009 f84c 	bl	800e6e8 <writePxMutex>
 8005650:	e7a3      	b.n	800559a <testportCommand+0x62>
	else if(pcParameterString1[0] == 'p'){
 8005652:	2300      	movs	r3, #0
 8005654:	56e3      	ldrsb	r3, [r4, r3]
 8005656:	2b70      	cmp	r3, #112	; 0x70
 8005658:	d009      	beq.n	800566e <testportCommand+0x136>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800565a:	220f      	movs	r2, #15
 800565c:	4924      	ldr	r1, [pc, #144]	; (80056f0 <testportCommand+0x1b8>)
 800565e:	9803      	ldr	r0, [sp, #12]
 8005660:	f00f f815 	bl	801468e <memcpy>
}
 8005664:	2000      	movs	r0, #0
 8005666:	b006      	add	sp, #24
 8005668:	bc04      	pop	{r2}
 800566a:	4692      	mov	sl, r2
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800566e:	1c60      	adds	r0, r4, #1
 8005670:	f00e fd83 	bl	801417a <atol>
 8005674:	0004      	movs	r4, r0
 8005676:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005678:	1e73      	subs	r3, r6, #1
 800567a:	2b05      	cmp	r3, #5
 800567c:	d905      	bls.n	800568a <testportCommand+0x152>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800567e:	221b      	movs	r2, #27
 8005680:	491c      	ldr	r1, [pc, #112]	; (80056f4 <testportCommand+0x1bc>)
 8005682:	9803      	ldr	r0, [sp, #12]
 8005684:	f00f f803 	bl	801468e <memcpy>
 8005688:	e7ec      	b.n	8005664 <testportCommand+0x12c>
				WriteVaule[0] =rand();
 800568a:	f00f f821 	bl	80146d0 <rand>
 800568e:	af04      	add	r7, sp, #16
 8005690:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 8005692:	2364      	movs	r3, #100	; 0x64
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	3b32      	subs	r3, #50	; 0x32
 8005698:	2201      	movs	r2, #1
 800569a:	0039      	movs	r1, r7
 800569c:	0030      	movs	r0, r6
 800569e:	f009 f823 	bl	800e6e8 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80056a2:	2000      	movs	r0, #0
 80056a4:	f008 fffe 	bl	800e6a4 <GetUart>
 80056a8:	6803      	ldr	r3, [r0, #0]
 80056aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80056ac:	783a      	ldrb	r2, [r7, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d006      	beq.n	80056c2 <testportCommand+0x18a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	4022      	ands	r2, r4
 80056b8:	490c      	ldr	r1, [pc, #48]	; (80056ec <testportCommand+0x1b4>)
 80056ba:	9803      	ldr	r0, [sp, #12]
 80056bc:	f00f fa1c 	bl	8014af8 <sprintf>
	return pdFALSE;
 80056c0:	e7d0      	b.n	8005664 <testportCommand+0x12c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80056c2:	22ff      	movs	r2, #255	; 0xff
 80056c4:	4022      	ands	r2, r4
 80056c6:	4906      	ldr	r1, [pc, #24]	; (80056e0 <testportCommand+0x1a8>)
 80056c8:	9803      	ldr	r0, [sp, #12]
 80056ca:	f00f fa15 	bl	8014af8 <sprintf>
 80056ce:	e7c9      	b.n	8005664 <testportCommand+0x12c>
 80056d0:	08018ef8 	.word	0x08018ef8
 80056d4:	08019254 	.word	0x08019254
 80056d8:	20000ae8 	.word	0x20000ae8
 80056dc:	200017c8 	.word	0x200017c8
 80056e0:	0801b728 	.word	0x0801b728
 80056e4:	0801b758 	.word	0x0801b758
 80056e8:	20001348 	.word	0x20001348
 80056ec:	0801b744 	.word	0x0801b744
 80056f0:	0801b7ac 	.word	0x0801b7ac
 80056f4:	0801b7bc 	.word	0x0801b7bc

080056f8 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056f8:	b570      	push	{r4, r5, r6, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	0005      	movs	r5, r0
 80056fe:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005700:	2300      	movs	r3, #0
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005706:	aa01      	add	r2, sp, #4
 8005708:	2101      	movs	r1, #1
 800570a:	0020      	movs	r0, r4
 800570c:	f009 faac 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005710:	2300      	movs	r3, #0
 8005712:	56c3      	ldrsb	r3, [r0, r3]
 8005714:	2b70      	cmp	r3, #112	; 0x70
 8005716:	d00e      	beq.n	8005736 <unbridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005718:	466a      	mov	r2, sp
 800571a:	2102      	movs	r1, #2
 800571c:	0020      	movs	r0, r4
 800571e:	f009 faa3 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005722:	2300      	movs	r3, #0
 8005724:	56c3      	ldrsb	r3, [r0, r3]
 8005726:	2b70      	cmp	r3, #112	; 0x70
 8005728:	d01d      	beq.n	8005766 <unbridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800572a:	220f      	movs	r2, #15
 800572c:	4919      	ldr	r1, [pc, #100]	; (8005794 <unbridgeCommand+0x9c>)
 800572e:	0028      	movs	r0, r5
 8005730:	f00e ffad 	bl	801468e <memcpy>
 8005734:	e014      	b.n	8005760 <unbridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005736:	3001      	adds	r0, #1
 8005738:	f00e fd1f 	bl	801417a <atol>
 800573c:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800573e:	466a      	mov	r2, sp
 8005740:	2102      	movs	r1, #2
 8005742:	0020      	movs	r0, r4
 8005744:	f009 fa90 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005748:	2300      	movs	r3, #0
 800574a:	56c3      	ldrsb	r3, [r0, r3]
 800574c:	2b70      	cmp	r3, #112	; 0x70
 800574e:	d00e      	beq.n	800576e <unbridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 8005750:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005752:	2867      	cmp	r0, #103	; 0x67
 8005754:	d0e9      	beq.n	800572a <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005756:	2219      	movs	r2, #25
 8005758:	490f      	ldr	r1, [pc, #60]	; (8005798 <unbridgeCommand+0xa0>)
 800575a:	0028      	movs	r0, r5
 800575c:	f00e ff97 	bl	801468e <memcpy>
}
 8005760:	2000      	movs	r0, #0
 8005762:	b002      	add	sp, #8
 8005764:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005766:	3001      	adds	r0, #1
 8005768:	f00e fd07 	bl	801417a <atol>
 800576c:	e7dd      	b.n	800572a <unbridgeCommand+0x32>
 800576e:	3001      	adds	r0, #1
 8005770:	f00e fd03 	bl	801417a <atol>
 8005774:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 8005776:	b2c1      	uxtb	r1, r0
 8005778:	b2f0      	uxtb	r0, r6
 800577a:	f7fe fecb 	bl	8004514 <Unbridge>
	if(result == BOS_OK)
 800577e:	2800      	cmp	r0, #0
 8005780:	d1e7      	bne.n	8005752 <unbridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005782:	22ff      	movs	r2, #255	; 0xff
 8005784:	0023      	movs	r3, r4
 8005786:	4013      	ands	r3, r2
 8005788:	4032      	ands	r2, r6
 800578a:	4904      	ldr	r1, [pc, #16]	; (800579c <unbridgeCommand+0xa4>)
 800578c:	0028      	movs	r0, r5
 800578e:	f00f f9b3 	bl	8014af8 <sprintf>
 8005792:	e7e5      	b.n	8005760 <unbridgeCommand+0x68>
 8005794:	0801b7ac 	.word	0x0801b7ac
 8005798:	0801b874 	.word	0x0801b874
 800579c:	0801b854 	.word	0x0801b854

080057a0 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057a0:	b570      	push	{r4, r5, r6, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	0005      	movs	r5, r0
 80057a6:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057ae:	aa01      	add	r2, sp, #4
 80057b0:	2101      	movs	r1, #1
 80057b2:	0020      	movs	r0, r4
 80057b4:	f009 fa58 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80057b8:	2300      	movs	r3, #0
 80057ba:	56c3      	ldrsb	r3, [r0, r3]
 80057bc:	2b70      	cmp	r3, #112	; 0x70
 80057be:	d00e      	beq.n	80057de <bridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057c0:	466a      	mov	r2, sp
 80057c2:	2102      	movs	r1, #2
 80057c4:	0020      	movs	r0, r4
 80057c6:	f009 fa4f 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80057ca:	2300      	movs	r3, #0
 80057cc:	56c3      	ldrsb	r3, [r0, r3]
 80057ce:	2b70      	cmp	r3, #112	; 0x70
 80057d0:	d01d      	beq.n	800580e <bridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057d2:	220f      	movs	r2, #15
 80057d4:	4919      	ldr	r1, [pc, #100]	; (800583c <bridgeCommand+0x9c>)
 80057d6:	0028      	movs	r0, r5
 80057d8:	f00e ff59 	bl	801468e <memcpy>
 80057dc:	e014      	b.n	8005808 <bridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80057de:	3001      	adds	r0, #1
 80057e0:	f00e fccb 	bl	801417a <atol>
 80057e4:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057e6:	466a      	mov	r2, sp
 80057e8:	2102      	movs	r1, #2
 80057ea:	0020      	movs	r0, r4
 80057ec:	f009 fa3c 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80057f0:	2300      	movs	r3, #0
 80057f2:	56c3      	ldrsb	r3, [r0, r3]
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d00e      	beq.n	8005816 <bridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 80057f8:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 80057fa:	2867      	cmp	r0, #103	; 0x67
 80057fc:	d0e9      	beq.n	80057d2 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80057fe:	2217      	movs	r2, #23
 8005800:	490f      	ldr	r1, [pc, #60]	; (8005840 <bridgeCommand+0xa0>)
 8005802:	0028      	movs	r0, r5
 8005804:	f00e ff43 	bl	801468e <memcpy>
}
 8005808:	2000      	movs	r0, #0
 800580a:	b002      	add	sp, #8
 800580c:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800580e:	3001      	adds	r0, #1
 8005810:	f00e fcb3 	bl	801417a <atol>
 8005814:	e7dd      	b.n	80057d2 <bridgeCommand+0x32>
 8005816:	3001      	adds	r0, #1
 8005818:	f00e fcaf 	bl	801417a <atol>
 800581c:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 800581e:	b2c1      	uxtb	r1, r0
 8005820:	b2f0      	uxtb	r0, r6
 8005822:	f7fe fe63 	bl	80044ec <Bridge>
	if(result == BOS_OK)
 8005826:	2800      	cmp	r0, #0
 8005828:	d1e7      	bne.n	80057fa <bridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 800582a:	22ff      	movs	r2, #255	; 0xff
 800582c:	0023      	movs	r3, r4
 800582e:	4013      	ands	r3, r2
 8005830:	4032      	ands	r2, r6
 8005832:	4904      	ldr	r1, [pc, #16]	; (8005844 <bridgeCommand+0xa4>)
 8005834:	0028      	movs	r0, r5
 8005836:	f00f f95f 	bl	8014af8 <sprintf>
 800583a:	e7e5      	b.n	8005808 <bridgeCommand+0x68>
 800583c:	0801b7ac 	.word	0x0801b7ac
 8005840:	08019f48 	.word	0x08019f48
 8005844:	08019f24 	.word	0x08019f24

08005848 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584a:	46de      	mov	lr, fp
 800584c:	464f      	mov	r7, r9
 800584e:	4646      	mov	r6, r8
 8005850:	b5c0      	push	{r6, r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	9001      	str	r0, [sp, #4]
 8005856:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005858:	2300      	movs	r3, #0
 800585a:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800585c:	aa03      	add	r2, sp, #12
 800585e:	2101      	movs	r1, #1
 8005860:	f009 fa02 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005864:	f00e fc83 	bl	801416e <atoi>
 8005868:	0004      	movs	r4, r0
 800586a:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 800586c:	2d00      	cmp	r5, #0
 800586e:	d003      	beq.n	8005878 <delSnipCommand+0x30>
 8005870:	4b31      	ldr	r3, [pc, #196]	; (8005938 <delSnipCommand+0xf0>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	42ab      	cmp	r3, r5
 8005876:	d20b      	bcs.n	8005890 <delSnipCommand+0x48>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005878:	2223      	movs	r2, #35	; 0x23
 800587a:	4930      	ldr	r1, [pc, #192]	; (800593c <delSnipCommand+0xf4>)
 800587c:	9801      	ldr	r0, [sp, #4]
 800587e:	f00e ff06 	bl	801468e <memcpy>
}
 8005882:	2000      	movs	r0, #0
 8005884:	b004      	add	sp, #16
 8005886:	bc1c      	pop	{r2, r3, r4}
 8005888:	4690      	mov	r8, r2
 800588a:	4699      	mov	r9, r3
 800588c:	46a3      	mov	fp, r4
 800588e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005890:	27ff      	movs	r7, #255	; 0xff
 8005892:	4007      	ands	r7, r0
 8005894:	3f01      	subs	r7, #1
 8005896:	4b2a      	ldr	r3, [pc, #168]	; (8005940 <delSnipCommand+0xf8>)
 8005898:	4699      	mov	r9, r3
 800589a:	00bb      	lsls	r3, r7, #2
 800589c:	4698      	mov	r8, r3
 800589e:	19db      	adds	r3, r3, r7
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	2600      	movs	r6, #0
 80058a4:	464a      	mov	r2, r9
 80058a6:	549e      	strb	r6, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 80058a8:	4643      	mov	r3, r8
 80058aa:	19db      	adds	r3, r3, r7
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	444b      	add	r3, r9
 80058b0:	469b      	mov	fp, r3
 80058b2:	705e      	strb	r6, [r3, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 80058b4:	4643      	mov	r3, r8
 80058b6:	19d8      	adds	r0, r3, r7
 80058b8:	0080      	lsls	r0, r0, #2
 80058ba:	3002      	adds	r0, #2
 80058bc:	4448      	add	r0, r9
 80058be:	2204      	movs	r2, #4
 80058c0:	2100      	movs	r1, #0
 80058c2:	f00e feed 	bl	80146a0 <memset>
		snippets[index - 1].state = false;
 80058c6:	465b      	mov	r3, fp
 80058c8:	741e      	strb	r6, [r3, #16]
		free(snippets[index - 1].cmd);
 80058ca:	68d8      	ldr	r0, [r3, #12]
 80058cc:	f00e fc9c 	bl	8014208 <free>
		snippets[index - 1].cmd = NULL;
 80058d0:	465f      	mov	r7, fp
 80058d2:	60fe      	str	r6, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <delSnipCommand+0xf0>)
 80058d6:	781f      	ldrb	r7, [r3, #0]
 80058d8:	42bd      	cmp	r5, r7
 80058da:	d222      	bcs.n	8005922 <delSnipCommand+0xda>
 80058dc:	23ff      	movs	r3, #255	; 0xff
 80058de:	4023      	ands	r3, r4
 80058e0:	009c      	lsls	r4, r3, #2
 80058e2:	18e4      	adds	r4, r4, r3
 80058e4:	00a4      	lsls	r4, r4, #2
 80058e6:	4916      	ldr	r1, [pc, #88]	; (8005940 <delSnipCommand+0xf8>)
 80058e8:	1864      	adds	r4, r4, r1
 80058ea:	1e7a      	subs	r2, r7, #1
 80058ec:	1b52      	subs	r2, r2, r5
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	18d3      	adds	r3, r2, r3
 80058f2:	009d      	lsls	r5, r3, #2
 80058f4:	18ed      	adds	r5, r5, r3
 80058f6:	00ad      	lsls	r5, r5, #2
 80058f8:	3114      	adds	r1, #20
 80058fa:	186d      	adds	r5, r5, r1
 80058fc:	e002      	b.n	8005904 <delSnipCommand+0xbc>
 80058fe:	3414      	adds	r4, #20
 8005900:	42ac      	cmp	r4, r5
 8005902:	d00e      	beq.n	8005922 <delSnipCommand+0xda>
			if(snippets[s].cond.conditionType){
 8005904:	7823      	ldrb	r3, [r4, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f9      	beq.n	80058fe <delSnipCommand+0xb6>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 800590a:	2214      	movs	r2, #20
 800590c:	0021      	movs	r1, r4
 800590e:	0020      	movs	r0, r4
 8005910:	3814      	subs	r0, #20
 8005912:	f00e febc 	bl	801468e <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005916:	2214      	movs	r2, #20
 8005918:	2100      	movs	r1, #0
 800591a:	0020      	movs	r0, r4
 800591c:	f00e fec0 	bl	80146a0 <memset>
 8005920:	e7ed      	b.n	80058fe <delSnipCommand+0xb6>
		--numOfRecordedSnippets;
 8005922:	3f01      	subs	r7, #1
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <delSnipCommand+0xf0>)
 8005926:	701f      	strb	r7, [r3, #0]
		SaveToRO();
 8005928:	f005 fa90 	bl	800ae4c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 800592c:	2236      	movs	r2, #54	; 0x36
 800592e:	4905      	ldr	r1, [pc, #20]	; (8005944 <delSnipCommand+0xfc>)
 8005930:	9801      	ldr	r0, [sp, #4]
 8005932:	f00e feac 	bl	801468e <memcpy>
 8005936:	e7a4      	b.n	8005882 <delSnipCommand+0x3a>
 8005938:	20001297 	.word	0x20001297
 800593c:	0801a068 	.word	0x0801a068
 8005940:	20006e6c 	.word	0x20006e6c
 8005944:	0801a030 	.word	0x0801a030

08005948 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005948:	b510      	push	{r4, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	0004      	movs	r4, r0
 800594e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005950:	2300      	movs	r3, #0
 8005952:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005954:	aa01      	add	r2, sp, #4
 8005956:	2101      	movs	r1, #1
 8005958:	f009 f986 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 800595c:	f00e fc07 	bl	801416e <atoi>
 8005960:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <pauseSnipCommand+0x26>
 8005966:	4a0f      	ldr	r2, [pc, #60]	; (80059a4 <pauseSnipCommand+0x5c>)
 8005968:	7812      	ldrb	r2, [r2, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d207      	bcs.n	800597e <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800596e:	2223      	movs	r2, #35	; 0x23
 8005970:	490d      	ldr	r1, [pc, #52]	; (80059a8 <pauseSnipCommand+0x60>)
 8005972:	0020      	movs	r0, r4
 8005974:	f00e fe8b 	bl	801468e <memcpy>
}
 8005978:	2000      	movs	r0, #0
 800597a:	b002      	add	sp, #8
 800597c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 800597e:	23ff      	movs	r3, #255	; 0xff
 8005980:	4018      	ands	r0, r3
 8005982:	3801      	subs	r0, #1
 8005984:	0083      	lsls	r3, r0, #2
 8005986:	1818      	adds	r0, r3, r0
 8005988:	0080      	lsls	r0, r0, #2
 800598a:	4b08      	ldr	r3, [pc, #32]	; (80059ac <pauseSnipCommand+0x64>)
 800598c:	1818      	adds	r0, r3, r0
 800598e:	2300      	movs	r3, #0
 8005990:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005992:	f005 fa5b 	bl	800ae4c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005996:	2235      	movs	r2, #53	; 0x35
 8005998:	4905      	ldr	r1, [pc, #20]	; (80059b0 <pauseSnipCommand+0x68>)
 800599a:	0020      	movs	r0, r4
 800599c:	f00e fe77 	bl	801468e <memcpy>
 80059a0:	e7ea      	b.n	8005978 <pauseSnipCommand+0x30>
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	20001297 	.word	0x20001297
 80059a8:	0801a068 	.word	0x0801a068
 80059ac:	20006e6c 	.word	0x20006e6c
 80059b0:	0801a478 	.word	0x0801a478

080059b4 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059b4:	b510      	push	{r4, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	0004      	movs	r4, r0
 80059ba:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80059bc:	2300      	movs	r3, #0
 80059be:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059c0:	aa01      	add	r2, sp, #4
 80059c2:	2101      	movs	r1, #1
 80059c4:	f009 f950 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80059c8:	f00e fbd1 	bl	801416e <atoi>
 80059cc:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <actSnipCommand+0x26>
 80059d2:	4a0f      	ldr	r2, [pc, #60]	; (8005a10 <actSnipCommand+0x5c>)
 80059d4:	7812      	ldrb	r2, [r2, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d207      	bcs.n	80059ea <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059da:	2223      	movs	r2, #35	; 0x23
 80059dc:	490d      	ldr	r1, [pc, #52]	; (8005a14 <actSnipCommand+0x60>)
 80059de:	0020      	movs	r0, r4
 80059e0:	f00e fe55 	bl	801468e <memcpy>
}
 80059e4:	2000      	movs	r0, #0
 80059e6:	b002      	add	sp, #8
 80059e8:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 80059ea:	23ff      	movs	r3, #255	; 0xff
 80059ec:	4018      	ands	r0, r3
 80059ee:	3801      	subs	r0, #1
 80059f0:	0083      	lsls	r3, r0, #2
 80059f2:	1818      	adds	r0, r3, r0
 80059f4:	0080      	lsls	r0, r0, #2
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <actSnipCommand+0x64>)
 80059f8:	1818      	adds	r0, r3, r0
 80059fa:	2301      	movs	r3, #1
 80059fc:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 80059fe:	f005 fa25 	bl	800ae4c <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a02:	2238      	movs	r2, #56	; 0x38
 8005a04:	4905      	ldr	r1, [pc, #20]	; (8005a1c <actSnipCommand+0x68>)
 8005a06:	0020      	movs	r0, r4
 8005a08:	f00e fe41 	bl	801468e <memcpy>
 8005a0c:	e7ea      	b.n	80059e4 <actSnipCommand+0x30>
 8005a0e:	46c0      	nop			; (mov r8, r8)
 8005a10:	20001297 	.word	0x20001297
 8005a14:	0801a068 	.word	0x0801a068
 8005a18:	20006e6c 	.word	0x20006e6c
 8005a1c:	08019e2c 	.word	0x08019e2c

08005a20 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	46de      	mov	lr, fp
 8005a24:	4657      	mov	r7, sl
 8005a26:	464e      	mov	r6, r9
 8005a28:	4645      	mov	r5, r8
 8005a2a:	b5e0      	push	{r5, r6, r7, lr}
 8005a2c:	b08b      	sub	sp, #44	; 0x2c
 8005a2e:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005a30:	aa06      	add	r2, sp, #24
 8005a32:	4b7c      	ldr	r3, [pc, #496]	; (8005c24 <snipCommand+0x204>)
 8005a34:	3304      	adds	r3, #4
 8005a36:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005a38:	c223      	stmia	r2!, {r0, r1, r5}
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a3e:	4b7a      	ldr	r3, [pc, #488]	; (8005c28 <snipCommand+0x208>)
 8005a40:	7818      	ldrb	r0, [r3, #0]
 8005a42:	2301      	movs	r3, #1
 8005a44:	425b      	negs	r3, r3
 8005a46:	9300      	str	r3, [sp, #0]
 8005a48:	3333      	adds	r3, #51	; 0x33
 8005a4a:	2237      	movs	r2, #55	; 0x37
 8005a4c:	4977      	ldr	r1, [pc, #476]	; (8005c2c <snipCommand+0x20c>)
 8005a4e:	f008 fe4b 	bl	800e6e8 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005a52:	4b77      	ldr	r3, [pc, #476]	; (8005c30 <snipCommand+0x210>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d100      	bne.n	8005a5c <snipCommand+0x3c>
 8005a5a:	e0d5      	b.n	8005c08 <snipCommand+0x1e8>
 8005a5c:	2600      	movs	r6, #0
		if(snippets[s].cond.conditionType)
 8005a5e:	4b75      	ldr	r3, [pc, #468]	; (8005c34 <snipCommand+0x214>)
 8005a60:	4699      	mov	r9, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005a62:	4d75      	ldr	r5, [pc, #468]	; (8005c38 <snipCommand+0x218>)
 8005a64:	e0bd      	b.n	8005be2 <snipCommand+0x1c2>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005a66:	4b73      	ldr	r3, [pc, #460]	; (8005c34 <snipCommand+0x214>)
 8005a68:	469b      	mov	fp, r3
 8005a6a:	00b3      	lsls	r3, r6, #2
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	199b      	adds	r3, r3, r6
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	445b      	add	r3, fp
 8005a74:	7c1a      	ldrb	r2, [r3, #16]
 8005a76:	00d3      	lsls	r3, r2, #3
 8005a78:	1a9b      	subs	r3, r3, r2
 8005a7a:	aa06      	add	r2, sp, #24
 8005a7c:	4694      	mov	ip, r2
 8005a7e:	4463      	add	r3, ip
 8005a80:	4642      	mov	r2, r8
 8005a82:	496e      	ldr	r1, [pc, #440]	; (8005c3c <snipCommand+0x21c>)
 8005a84:	0020      	movs	r0, r4
 8005a86:	f00f f837 	bl	8014af8 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005a8a:	4653      	mov	r3, sl
 8005a8c:	199b      	adds	r3, r3, r6
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	465a      	mov	r2, fp
 8005a92:	5c9b      	ldrb	r3, [r3, r2]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d02c      	beq.n	8005af2 <snipCommand+0xd2>
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d000      	beq.n	8005a9e <snipCommand+0x7e>
 8005a9c:	e0ad      	b.n	8005bfa <snipCommand+0x1da>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005a9e:	00b1      	lsls	r1, r6, #2
 8005aa0:	1989      	adds	r1, r1, r6
 8005aa2:	0089      	lsls	r1, r1, #2
 8005aa4:	3106      	adds	r1, #6
 8005aa6:	4e63      	ldr	r6, [pc, #396]	; (8005c34 <snipCommand+0x214>)
 8005aa8:	1989      	adds	r1, r1, r6
 8005aaa:	2204      	movs	r2, #4
 8005aac:	a805      	add	r0, sp, #20
 8005aae:	f00e fdee 	bl	801468e <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005ab2:	00bb      	lsls	r3, r7, #2
 8005ab4:	19db      	adds	r3, r3, r7
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	18f6      	adds	r6, r6, r3
 8005aba:	78f2      	ldrb	r2, [r6, #3]
 8005abc:	3a01      	subs	r2, #1
 8005abe:	0053      	lsls	r3, r2, #1
 8005ac0:	189b      	adds	r3, r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4a5e      	ldr	r2, [pc, #376]	; (8005c40 <snipCommand+0x220>)
 8005ac6:	18d3      	adds	r3, r2, r3
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	469a      	mov	sl, r3
 8005acc:	9805      	ldr	r0, [sp, #20]
 8005ace:	f7fd f829 	bl	8002b24 <__aeabi_f2d>
 8005ad2:	9002      	str	r0, [sp, #8]
 8005ad4:	9103      	str	r1, [sp, #12]
 8005ad6:	7873      	ldrb	r3, [r6, #1]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	005a      	lsls	r2, r3, #1
 8005adc:	18d2      	adds	r2, r2, r3
 8005ade:	4b59      	ldr	r3, [pc, #356]	; (8005c44 <snipCommand+0x224>)
 8005ae0:	189b      	adds	r3, r3, r2
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	4653      	mov	r3, sl
 8005ae6:	0022      	movs	r2, r4
 8005ae8:	4957      	ldr	r1, [pc, #348]	; (8005c48 <snipCommand+0x228>)
 8005aea:	0020      	movs	r0, r4
 8005aec:	f00f f804 	bl	8014af8 <sprintf>
				break;
 8005af0:	e083      	b.n	8005bfa <snipCommand+0x1da>
				switch(snippets[s].cond.buffer1[1]){
 8005af2:	00b3      	lsls	r3, r6, #2
 8005af4:	199b      	adds	r3, r3, r6
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4a4e      	ldr	r2, [pc, #312]	; (8005c34 <snipCommand+0x214>)
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	78db      	ldrb	r3, [r3, #3]
 8005afe:	3b05      	subs	r3, #5
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	2a09      	cmp	r2, #9
 8005b04:	d879      	bhi.n	8005bfa <snipCommand+0x1da>
 8005b06:	0093      	lsls	r3, r2, #2
 8005b08:	4a50      	ldr	r2, [pc, #320]	; (8005c4c <snipCommand+0x22c>)
 8005b0a:	58d3      	ldr	r3, [r2, r3]
 8005b0c:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005b0e:	00b3      	lsls	r3, r6, #2
 8005b10:	199b      	adds	r3, r3, r6
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4a47      	ldr	r2, [pc, #284]	; (8005c34 <snipCommand+0x214>)
 8005b16:	18d2      	adds	r2, r2, r3
 8005b18:	7893      	ldrb	r3, [r2, #2]
 8005b1a:	68d2      	ldr	r2, [r2, #12]
 8005b1c:	9200      	str	r2, [sp, #0]
 8005b1e:	0022      	movs	r2, r4
 8005b20:	494b      	ldr	r1, [pc, #300]	; (8005c50 <snipCommand+0x230>)
 8005b22:	0020      	movs	r0, r4
 8005b24:	f00e ffe8 	bl	8014af8 <sprintf>
						break;
 8005b28:	e067      	b.n	8005bfa <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005b2a:	00b3      	lsls	r3, r6, #2
 8005b2c:	199b      	adds	r3, r3, r6
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4a40      	ldr	r2, [pc, #256]	; (8005c34 <snipCommand+0x214>)
 8005b32:	18d2      	adds	r2, r2, r3
 8005b34:	7893      	ldrb	r3, [r2, #2]
 8005b36:	68d2      	ldr	r2, [r2, #12]
 8005b38:	9200      	str	r2, [sp, #0]
 8005b3a:	0022      	movs	r2, r4
 8005b3c:	4945      	ldr	r1, [pc, #276]	; (8005c54 <snipCommand+0x234>)
 8005b3e:	0020      	movs	r0, r4
 8005b40:	f00e ffda 	bl	8014af8 <sprintf>
						break;
 8005b44:	e059      	b.n	8005bfa <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005b46:	00b2      	lsls	r2, r6, #2
 8005b48:	1992      	adds	r2, r2, r6
 8005b4a:	0093      	lsls	r3, r2, #2
 8005b4c:	4a39      	ldr	r2, [pc, #228]	; (8005c34 <snipCommand+0x214>)
 8005b4e:	18d2      	adds	r2, r2, r3
 8005b50:	7893      	ldrb	r3, [r2, #2]
 8005b52:	68d1      	ldr	r1, [r2, #12]
 8005b54:	9101      	str	r1, [sp, #4]
 8005b56:	7912      	ldrb	r2, [r2, #4]
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	0022      	movs	r2, r4
 8005b5c:	493e      	ldr	r1, [pc, #248]	; (8005c58 <snipCommand+0x238>)
 8005b5e:	0020      	movs	r0, r4
 8005b60:	f00e ffca 	bl	8014af8 <sprintf>
						break;
 8005b64:	e049      	b.n	8005bfa <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005b66:	00b2      	lsls	r2, r6, #2
 8005b68:	1992      	adds	r2, r2, r6
 8005b6a:	0093      	lsls	r3, r2, #2
 8005b6c:	4a31      	ldr	r2, [pc, #196]	; (8005c34 <snipCommand+0x214>)
 8005b6e:	18d2      	adds	r2, r2, r3
 8005b70:	7893      	ldrb	r3, [r2, #2]
 8005b72:	68d1      	ldr	r1, [r2, #12]
 8005b74:	9101      	str	r1, [sp, #4]
 8005b76:	7912      	ldrb	r2, [r2, #4]
 8005b78:	9200      	str	r2, [sp, #0]
 8005b7a:	0022      	movs	r2, r4
 8005b7c:	4937      	ldr	r1, [pc, #220]	; (8005c5c <snipCommand+0x23c>)
 8005b7e:	0020      	movs	r0, r4
 8005b80:	f00e ffba 	bl	8014af8 <sprintf>
						break;
 8005b84:	e039      	b.n	8005bfa <snipCommand+0x1da>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005b86:	002b      	movs	r3, r5
 8005b88:	0022      	movs	r2, r4
 8005b8a:	4935      	ldr	r1, [pc, #212]	; (8005c60 <snipCommand+0x240>)
 8005b8c:	0020      	movs	r0, r4
 8005b8e:	f00e ffb3 	bl	8014af8 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005b92:	0028      	movs	r0, r5
 8005b94:	f7fa fac0 	bl	8000118 <strlen>
 8005b98:	0002      	movs	r2, r0
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	0028      	movs	r0, r5
 8005b9e:	f00e fd7f 	bl	80146a0 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005ba2:	0031      	movs	r1, r6
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff faa9 	bl	80050fc <ParseSnippetCommand>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d1eb      	bne.n	8005b86 <snipCommand+0x166>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005bae:	0020      	movs	r0, r4
 8005bb0:	f7fa fab2 	bl	8000118 <strlen>
 8005bb4:	1820      	adds	r0, r4, r0
 8005bb6:	220c      	movs	r2, #12
 8005bb8:	492a      	ldr	r1, [pc, #168]	; (8005c64 <snipCommand+0x244>)
 8005bba:	f00e fd68 	bl	801468e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005bbe:	0020      	movs	r0, r4
 8005bc0:	f7fa faaa 	bl	8000118 <strlen>
 8005bc4:	b282      	uxth	r2, r0
 8005bc6:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <snipCommand+0x208>)
 8005bc8:	7818      	ldrb	r0, [r3, #0]
 8005bca:	2301      	movs	r3, #1
 8005bcc:	425b      	negs	r3, r3
 8005bce:	9300      	str	r3, [sp, #0]
 8005bd0:	3333      	adds	r3, #51	; 0x33
 8005bd2:	0021      	movs	r1, r4
 8005bd4:	f008 fd88 	bl	800e6e8 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005bd8:	4646      	mov	r6, r8
 8005bda:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <snipCommand+0x210>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	4543      	cmp	r3, r8
 8005be0:	d912      	bls.n	8005c08 <snipCommand+0x1e8>
 8005be2:	1c73      	adds	r3, r6, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	4698      	mov	r8, r3
		if(snippets[s].cond.conditionType)
 8005be8:	0037      	movs	r7, r6
 8005bea:	00b3      	lsls	r3, r6, #2
 8005bec:	199b      	adds	r3, r3, r6
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	464a      	mov	r2, r9
 8005bf2:	5c9b      	ldrb	r3, [r3, r2]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d000      	beq.n	8005bfa <snipCommand+0x1da>
 8005bf8:	e735      	b.n	8005a66 <snipCommand+0x46>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005bfa:	4e0f      	ldr	r6, [pc, #60]	; (8005c38 <snipCommand+0x218>)
 8005bfc:	00bb      	lsls	r3, r7, #2
 8005bfe:	19db      	adds	r3, r3, r7
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4f0c      	ldr	r7, [pc, #48]	; (8005c34 <snipCommand+0x214>)
 8005c04:	18ff      	adds	r7, r7, r3
 8005c06:	e7cc      	b.n	8005ba2 <snipCommand+0x182>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005c08:	22b5      	movs	r2, #181	; 0xb5
 8005c0a:	4917      	ldr	r1, [pc, #92]	; (8005c68 <snipCommand+0x248>)
 8005c0c:	0020      	movs	r0, r4
 8005c0e:	f00e fd3e 	bl	801468e <memcpy>
}
 8005c12:	2000      	movs	r0, #0
 8005c14:	b00b      	add	sp, #44	; 0x2c
 8005c16:	bc3c      	pop	{r2, r3, r4, r5}
 8005c18:	4690      	mov	r8, r2
 8005c1a:	4699      	mov	r9, r3
 8005c1c:	46a2      	mov	sl, r4
 8005c1e:	46ab      	mov	fp, r5
 8005c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c22:	46c0      	nop			; (mov r8, r8)
 8005c24:	08018ef8 	.word	0x08018ef8
 8005c28:	20000ae8 	.word	0x20000ae8
 8005c2c:	0801a90c 	.word	0x0801a90c
 8005c30:	20001297 	.word	0x20001297
 8005c34:	20006e6c 	.word	0x20006e6c
 8005c38:	200012c8 	.word	0x200012c8
 8005c3c:	0801a944 	.word	0x0801a944
 8005c40:	200000ac 	.word	0x200000ac
 8005c44:	0801a43c 	.word	0x0801a43c
 8005c48:	0801a9b0 	.word	0x0801a9b0
 8005c4c:	08019ce8 	.word	0x08019ce8
 8005c50:	0801a950 	.word	0x0801a950
 8005c54:	0801a964 	.word	0x0801a964
 8005c58:	0801a97c 	.word	0x0801a97c
 8005c5c:	0801a994 	.word	0x0801a994
 8005c60:	0801a9c0 	.word	0x0801a9c0
 8005c64:	0801a9c8 	.word	0x0801a9c8
 8005c68:	0801a9d4 	.word	0x0801a9d4

08005c6c <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005c70:	f00a fe4a 	bl	8010908 <HAL_GetDEVID>
	switch(dev){
 8005c74:	0400      	lsls	r0, r0, #16
 8005c76:	0c00      	lsrs	r0, r0, #16
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <idcodeCommand+0x78>)
 8005c7a:	469c      	mov	ip, r3
 8005c7c:	4460      	add	r0, ip
 8005c7e:	2808      	cmp	r0, #8
 8005c80:	d82a      	bhi.n	8005cd8 <idcodeCommand+0x6c>
 8005c82:	0080      	lsls	r0, r0, #2
 8005c84:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <idcodeCommand+0x7c>)
 8005c86:	581b      	ldr	r3, [r3, r0]
 8005c88:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005c8a:	4a18      	ldr	r2, [pc, #96]	; (8005cec <idcodeCommand+0x80>)
 8005c8c:	4918      	ldr	r1, [pc, #96]	; (8005cf0 <idcodeCommand+0x84>)
 8005c8e:	0020      	movs	r0, r4
 8005c90:	f00e ff32 	bl	8014af8 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005c94:	f00a fe32 	bl	80108fc <HAL_GetREVID>
 8005c98:	0b03      	lsrs	r3, r0, #12
 8005c9a:	0022      	movs	r2, r4
 8005c9c:	4915      	ldr	r1, [pc, #84]	; (8005cf4 <idcodeCommand+0x88>)
 8005c9e:	0020      	movs	r0, r4
 8005ca0:	f00e ff2a 	bl	8014af8 <sprintf>
}
 8005ca4:	2000      	movs	r0, #0
 8005ca6:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005ca8:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <idcodeCommand+0x8c>)
 8005caa:	4911      	ldr	r1, [pc, #68]	; (8005cf0 <idcodeCommand+0x84>)
 8005cac:	0020      	movs	r0, r4
 8005cae:	f00e ff23 	bl	8014af8 <sprintf>
			break;
 8005cb2:	e7ef      	b.n	8005c94 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <idcodeCommand+0x90>)
 8005cb6:	490e      	ldr	r1, [pc, #56]	; (8005cf0 <idcodeCommand+0x84>)
 8005cb8:	0020      	movs	r0, r4
 8005cba:	f00e ff1d 	bl	8014af8 <sprintf>
			break;
 8005cbe:	e7e9      	b.n	8005c94 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005cc0:	4a0f      	ldr	r2, [pc, #60]	; (8005d00 <idcodeCommand+0x94>)
 8005cc2:	490b      	ldr	r1, [pc, #44]	; (8005cf0 <idcodeCommand+0x84>)
 8005cc4:	0020      	movs	r0, r4
 8005cc6:	f00e ff17 	bl	8014af8 <sprintf>
			break;
 8005cca:	e7e3      	b.n	8005c94 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <idcodeCommand+0x98>)
 8005cce:	4908      	ldr	r1, [pc, #32]	; (8005cf0 <idcodeCommand+0x84>)
 8005cd0:	0020      	movs	r0, r4
 8005cd2:	f00e ff11 	bl	8014af8 <sprintf>
			break;
 8005cd6:	e7dd      	b.n	8005c94 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005cd8:	4a0b      	ldr	r2, [pc, #44]	; (8005d08 <idcodeCommand+0x9c>)
 8005cda:	4905      	ldr	r1, [pc, #20]	; (8005cf0 <idcodeCommand+0x84>)
 8005cdc:	0020      	movs	r0, r4
 8005cde:	f00e ff0b 	bl	8014af8 <sprintf>
			break;
 8005ce2:	e7d7      	b.n	8005c94 <idcodeCommand+0x28>
 8005ce4:	fffffbc0 	.word	0xfffffbc0
 8005ce8:	08019d10 	.word	0x08019d10
 8005cec:	0801a338 	.word	0x0801a338
 8005cf0:	0801a344 	.word	0x0801a344
 8005cf4:	0801a390 	.word	0x0801a390
 8005cf8:	0801a358 	.word	0x0801a358
 8005cfc:	0801a364 	.word	0x0801a364
 8005d00:	0801a370 	.word	0x0801a370
 8005d04:	0801a37c 	.word	0x0801a37c
 8005d08:	0801a388 	.word	0x0801a388

08005d0c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005d10:	220e      	movs	r2, #14
 8005d12:	4911      	ldr	r1, [pc, #68]	; (8005d58 <uuidCommand+0x4c>)
 8005d14:	f00e fcbb 	bl	801468e <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <uuidCommand+0x50>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4d10      	ldr	r5, [pc, #64]	; (8005d60 <uuidCommand+0x54>)
 8005d1e:	0022      	movs	r2, r4
 8005d20:	0029      	movs	r1, r5
 8005d22:	0020      	movs	r0, r4
 8005d24:	f00e fee8 	bl	8014af8 <sprintf>
 8005d28:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <uuidCommand+0x58>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	0022      	movs	r2, r4
 8005d2e:	0029      	movs	r1, r5
 8005d30:	0020      	movs	r0, r4
 8005d32:	f00e fee1 	bl	8014af8 <sprintf>
 8005d36:	4b0c      	ldr	r3, [pc, #48]	; (8005d68 <uuidCommand+0x5c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	0022      	movs	r2, r4
 8005d3c:	0029      	movs	r1, r5
 8005d3e:	0020      	movs	r0, r4
 8005d40:	f00e feda 	bl	8014af8 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005d44:	0020      	movs	r0, r4
 8005d46:	f7fa f9e7 	bl	8000118 <strlen>
 8005d4a:	1820      	adds	r0, r4, r0
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	4907      	ldr	r1, [pc, #28]	; (8005d6c <uuidCommand+0x60>)
 8005d50:	f00e fc9d 	bl	801468e <memcpy>
}
 8005d54:	2000      	movs	r0, #0
 8005d56:	bd70      	pop	{r4, r5, r6, pc}
 8005d58:	0801b8a0 	.word	0x0801b8a0
 8005d5c:	1ffff7ac 	.word	0x1ffff7ac
 8005d60:	0801b8b0 	.word	0x0801b8b0
 8005d64:	1ffff7b0 	.word	0x1ffff7b0
 8005d68:	1ffff7b4 	.word	0x1ffff7b4
 8005d6c:	0801b310 	.word	0x0801b310

08005d70 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d70:	b510      	push	{r4, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	0004      	movs	r4, r0
	GetTimeDate();
 8005d76:	f008 fa13 	bl	800e1a0 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <timeCommand+0x78>)
 8005d7c:	7b5b      	ldrb	r3, [r3, #13]
 8005d7e:	2b18      	cmp	r3, #24
 8005d80:	d004      	beq.n	8005d8c <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 8005d82:	2b0c      	cmp	r3, #12
 8005d84:	d00e      	beq.n	8005da4 <timeCommand+0x34>
}
 8005d86:	2000      	movs	r0, #0
 8005d88:	b004      	add	sp, #16
 8005d8a:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005d8c:	4916      	ldr	r1, [pc, #88]	; (8005de8 <timeCommand+0x78>)
 8005d8e:	7c4b      	ldrb	r3, [r1, #17]
 8005d90:	7c8a      	ldrb	r2, [r1, #18]
 8005d92:	89c8      	ldrh	r0, [r1, #14]
 8005d94:	9001      	str	r0, [sp, #4]
 8005d96:	7c09      	ldrb	r1, [r1, #16]
 8005d98:	9100      	str	r1, [sp, #0]
 8005d9a:	4914      	ldr	r1, [pc, #80]	; (8005dec <timeCommand+0x7c>)
 8005d9c:	0020      	movs	r0, r4
 8005d9e:	f00e feab 	bl	8014af8 <sprintf>
 8005da2:	e7f0      	b.n	8005d86 <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <timeCommand+0x78>)
 8005da6:	7cdb      	ldrb	r3, [r3, #19]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d00f      	beq.n	8005dcc <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d1ea      	bne.n	8005d86 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005db0:	490d      	ldr	r1, [pc, #52]	; (8005de8 <timeCommand+0x78>)
 8005db2:	7c4b      	ldrb	r3, [r1, #17]
 8005db4:	7c8a      	ldrb	r2, [r1, #18]
 8005db6:	480e      	ldr	r0, [pc, #56]	; (8005df0 <timeCommand+0x80>)
 8005db8:	9002      	str	r0, [sp, #8]
 8005dba:	89c8      	ldrh	r0, [r1, #14]
 8005dbc:	9001      	str	r0, [sp, #4]
 8005dbe:	7c09      	ldrb	r1, [r1, #16]
 8005dc0:	9100      	str	r1, [sp, #0]
 8005dc2:	490c      	ldr	r1, [pc, #48]	; (8005df4 <timeCommand+0x84>)
 8005dc4:	0020      	movs	r0, r4
 8005dc6:	f00e fe97 	bl	8014af8 <sprintf>
 8005dca:	e7dc      	b.n	8005d86 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005dcc:	4906      	ldr	r1, [pc, #24]	; (8005de8 <timeCommand+0x78>)
 8005dce:	7c4b      	ldrb	r3, [r1, #17]
 8005dd0:	7c8a      	ldrb	r2, [r1, #18]
 8005dd2:	4809      	ldr	r0, [pc, #36]	; (8005df8 <timeCommand+0x88>)
 8005dd4:	9002      	str	r0, [sp, #8]
 8005dd6:	89c8      	ldrh	r0, [r1, #14]
 8005dd8:	9001      	str	r0, [sp, #4]
 8005dda:	7c09      	ldrb	r1, [r1, #16]
 8005ddc:	9100      	str	r1, [sp, #0]
 8005dde:	4905      	ldr	r1, [pc, #20]	; (8005df4 <timeCommand+0x84>)
 8005de0:	0020      	movs	r0, r4
 8005de2:	f00e fe89 	bl	8014af8 <sprintf>
 8005de6:	e7ce      	b.n	8005d86 <timeCommand+0x16>
 8005de8:	20006e50 	.word	0x20006e50
 8005dec:	0801b7e8 	.word	0x0801b7e8
 8005df0:	0801b840 	.word	0x0801b840
 8005df4:	0801b810 	.word	0x0801b810
 8005df8:	0801b83c 	.word	0x0801b83c

08005dfc <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	0004      	movs	r4, r0
	GetTimeDate();
 8005e00:	f008 f9ce 	bl	800e1a0 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005e04:	f7fe fb50 	bl	80044a8 <GetDateString>
 8005e08:	0002      	movs	r2, r0
 8005e0a:	4903      	ldr	r1, [pc, #12]	; (8005e18 <dateCommand+0x1c>)
 8005e0c:	0020      	movs	r0, r4
 8005e0e:	f00e fe73 	bl	8014af8 <sprintf>
}
 8005e12:	2000      	movs	r0, #0
 8005e14:	bd10      	pop	{r4, pc}
 8005e16:	46c0      	nop			; (mov r8, r8)
 8005e18:	08019f70 	.word	0x08019f70

08005e1c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	9001      	str	r0, [sp, #4]
 8005e22:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	9303      	str	r3, [sp, #12]
 8005e28:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e2a:	aa03      	add	r2, sp, #12
 8005e2c:	2101      	movs	r1, #1
 8005e2e:	0030      	movs	r0, r6
 8005e30:	f008 ff1a 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8005e34:	0004      	movs	r4, r0
 8005e36:	4b71      	ldr	r3, [pc, #452]	; (8005ffc <getCommand+0x1e0>)
 8005e38:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e3a:	2204      	movs	r2, #4
 8005e3c:	4970      	ldr	r1, [pc, #448]	; (8006000 <getCommand+0x1e4>)
 8005e3e:	f00e fe9f 	bl	8014b80 <strncmp>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d000      	beq.n	8005e48 <getCommand+0x2c>
 8005e46:	e090      	b.n	8005f6a <getCommand+0x14e>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005e48:	1d27      	adds	r7, r4, #4
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	1f1e      	subs	r6, r3, #4
 8005e4e:	0032      	movs	r2, r6
 8005e50:	496c      	ldr	r1, [pc, #432]	; (8006004 <getCommand+0x1e8>)
 8005e52:	0038      	movs	r0, r7
 8005e54:	f00e fe94 	bl	8014b80 <strncmp>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	d11f      	bne.n	8005e9c <getCommand+0x80>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005e5c:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <getCommand+0x1ec>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b60      	cmp	r3, #96	; 0x60
 8005e62:	d009      	beq.n	8005e78 <getCommand+0x5c>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005e64:	2b20      	cmp	r3, #32
 8005e66:	d00d      	beq.n	8005e84 <getCommand+0x68>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d011      	beq.n	8005e90 <getCommand+0x74>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005e6c:	0022      	movs	r2, r4
 8005e6e:	4967      	ldr	r1, [pc, #412]	; (800600c <getCommand+0x1f0>)
 8005e70:	9801      	ldr	r0, [sp, #4]
 8005e72:	f00e fe41 	bl	8014af8 <sprintf>
 8005e76:	e084      	b.n	8005f82 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005e78:	4a65      	ldr	r2, [pc, #404]	; (8006010 <getCommand+0x1f4>)
 8005e7a:	4966      	ldr	r1, [pc, #408]	; (8006014 <getCommand+0x1f8>)
 8005e7c:	9801      	ldr	r0, [sp, #4]
 8005e7e:	f00e fe3b 	bl	8014af8 <sprintf>
 8005e82:	e07e      	b.n	8005f82 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005e84:	4a64      	ldr	r2, [pc, #400]	; (8006018 <getCommand+0x1fc>)
 8005e86:	4963      	ldr	r1, [pc, #396]	; (8006014 <getCommand+0x1f8>)
 8005e88:	9801      	ldr	r0, [sp, #4]
 8005e8a:	f00e fe35 	bl	8014af8 <sprintf>
 8005e8e:	e078      	b.n	8005f82 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005e90:	4a62      	ldr	r2, [pc, #392]	; (800601c <getCommand+0x200>)
 8005e92:	4960      	ldr	r1, [pc, #384]	; (8006014 <getCommand+0x1f8>)
 8005e94:	9801      	ldr	r0, [sp, #4]
 8005e96:	f00e fe2f 	bl	8014af8 <sprintf>
 8005e9a:	e072      	b.n	8005f82 <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005e9c:	0032      	movs	r2, r6
 8005e9e:	4960      	ldr	r1, [pc, #384]	; (8006020 <getCommand+0x204>)
 8005ea0:	0038      	movs	r0, r7
 8005ea2:	f00e fe6d 	bl	8014b80 <strncmp>
 8005ea6:	2800      	cmp	r0, #0
 8005ea8:	d119      	bne.n	8005ede <getCommand+0xc2>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005eaa:	4b57      	ldr	r3, [pc, #348]	; (8006008 <getCommand+0x1ec>)
 8005eac:	785b      	ldrb	r3, [r3, #1]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d009      	beq.n	8005ec6 <getCommand+0xaa>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d00d      	beq.n	8005ed2 <getCommand+0xb6>
			else if(BOSMessaging.trace == TRACE_NONE)
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1d8      	bne.n	8005e6c <getCommand+0x50>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005eba:	4a58      	ldr	r2, [pc, #352]	; (800601c <getCommand+0x200>)
 8005ebc:	4955      	ldr	r1, [pc, #340]	; (8006014 <getCommand+0x1f8>)
 8005ebe:	9801      	ldr	r0, [sp, #4]
 8005ec0:	f00e fe1a 	bl	8014af8 <sprintf>
 8005ec4:	e05d      	b.n	8005f82 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005ec6:	4a52      	ldr	r2, [pc, #328]	; (8006010 <getCommand+0x1f4>)
 8005ec8:	4952      	ldr	r1, [pc, #328]	; (8006014 <getCommand+0x1f8>)
 8005eca:	9801      	ldr	r0, [sp, #4]
 8005ecc:	f00e fe14 	bl	8014af8 <sprintf>
 8005ed0:	e057      	b.n	8005f82 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005ed2:	4a51      	ldr	r2, [pc, #324]	; (8006018 <getCommand+0x1fc>)
 8005ed4:	494f      	ldr	r1, [pc, #316]	; (8006014 <getCommand+0x1f8>)
 8005ed6:	9801      	ldr	r0, [sp, #4]
 8005ed8:	f00e fe0e 	bl	8014af8 <sprintf>
 8005edc:	e051      	b.n	8005f82 <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005ede:	0032      	movs	r2, r6
 8005ee0:	4950      	ldr	r1, [pc, #320]	; (8006024 <getCommand+0x208>)
 8005ee2:	0038      	movs	r0, r7
 8005ee4:	f00e fe4c 	bl	8014b80 <strncmp>
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d022      	beq.n	8005f32 <getCommand+0x116>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005eec:	0032      	movs	r2, r6
 8005eee:	494e      	ldr	r1, [pc, #312]	; (8006028 <getCommand+0x20c>)
 8005ef0:	0038      	movs	r0, r7
 8005ef2:	f00e fe45 	bl	8014b80 <strncmp>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d022      	beq.n	8005f40 <getCommand+0x124>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005efa:	0032      	movs	r2, r6
 8005efc:	494b      	ldr	r1, [pc, #300]	; (800602c <getCommand+0x210>)
 8005efe:	0038      	movs	r0, r7
 8005f00:	f00e fe3e 	bl	8014b80 <strncmp>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	d022      	beq.n	8005f4e <getCommand+0x132>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005f08:	0032      	movs	r2, r6
 8005f0a:	4949      	ldr	r1, [pc, #292]	; (8006030 <getCommand+0x214>)
 8005f0c:	0038      	movs	r0, r7
 8005f0e:	f00e fe37 	bl	8014b80 <strncmp>
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d022      	beq.n	8005f5c <getCommand+0x140>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005f16:	0032      	movs	r2, r6
 8005f18:	4946      	ldr	r1, [pc, #280]	; (8006034 <getCommand+0x218>)
 8005f1a:	0038      	movs	r0, r7
 8005f1c:	f00e fe30 	bl	8014b80 <strncmp>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	d129      	bne.n	8005f78 <getCommand+0x15c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005f24:	4b44      	ldr	r3, [pc, #272]	; (8006038 <getCommand+0x21c>)
 8005f26:	795a      	ldrb	r2, [r3, #5]
 8005f28:	4944      	ldr	r1, [pc, #272]	; (800603c <getCommand+0x220>)
 8005f2a:	9801      	ldr	r0, [sp, #4]
 8005f2c:	f00e fde4 	bl	8014af8 <sprintf>
 8005f30:	e027      	b.n	8005f82 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005f32:	4b41      	ldr	r3, [pc, #260]	; (8006038 <getCommand+0x21c>)
 8005f34:	689a      	ldr	r2, [r3, #8]
 8005f36:	4941      	ldr	r1, [pc, #260]	; (800603c <getCommand+0x220>)
 8005f38:	9801      	ldr	r0, [sp, #4]
 8005f3a:	f00e fddd 	bl	8014af8 <sprintf>
 8005f3e:	e020      	b.n	8005f82 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005f40:	4b3d      	ldr	r3, [pc, #244]	; (8006038 <getCommand+0x21c>)
 8005f42:	881a      	ldrh	r2, [r3, #0]
 8005f44:	493d      	ldr	r1, [pc, #244]	; (800603c <getCommand+0x220>)
 8005f46:	9801      	ldr	r0, [sp, #4]
 8005f48:	f00e fdd6 	bl	8014af8 <sprintf>
 8005f4c:	e019      	b.n	8005f82 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005f4e:	4b3a      	ldr	r3, [pc, #232]	; (8006038 <getCommand+0x21c>)
 8005f50:	885a      	ldrh	r2, [r3, #2]
 8005f52:	493a      	ldr	r1, [pc, #232]	; (800603c <getCommand+0x220>)
 8005f54:	9801      	ldr	r0, [sp, #4]
 8005f56:	f00e fdcf 	bl	8014af8 <sprintf>
 8005f5a:	e012      	b.n	8005f82 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005f5c:	4b36      	ldr	r3, [pc, #216]	; (8006038 <getCommand+0x21c>)
 8005f5e:	791a      	ldrb	r2, [r3, #4]
 8005f60:	4936      	ldr	r1, [pc, #216]	; (800603c <getCommand+0x220>)
 8005f62:	9801      	ldr	r0, [sp, #4]
 8005f64:	f00e fdc8 	bl	8014af8 <sprintf>
 8005f68:	e00b      	b.n	8005f82 <getCommand+0x166>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005f6a:	2205      	movs	r2, #5
 8005f6c:	4934      	ldr	r1, [pc, #208]	; (8006040 <getCommand+0x224>)
 8005f6e:	0020      	movs	r0, r4
 8005f70:	f00e fe06 	bl	8014b80 <strncmp>
 8005f74:	2800      	cmp	r0, #0
 8005f76:	d007      	beq.n	8005f88 <getCommand+0x16c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005f78:	2213      	movs	r2, #19
 8005f7a:	4932      	ldr	r1, [pc, #200]	; (8006044 <getCommand+0x228>)
 8005f7c:	9801      	ldr	r0, [sp, #4]
 8005f7e:	f00e fb86 	bl	801468e <memcpy>
}
 8005f82:	2000      	movs	r0, #0
 8005f84:	b005      	add	sp, #20
 8005f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005f88:	aa02      	add	r2, sp, #8
 8005f8a:	2102      	movs	r1, #2
 8005f8c:	0030      	movs	r0, r6
 8005f8e:	f008 fe6b 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8005f92:	0006      	movs	r6, r0
 8005f94:	4f2c      	ldr	r7, [pc, #176]	; (8006048 <getCommand+0x22c>)
		for(i =0; i < MaxNumOfGroups; i++){
 8005f96:	2400      	movs	r4, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005f98:	0039      	movs	r1, r7
 8005f9a:	0030      	movs	r0, r6
 8005f9c:	f7fa f8b2 	bl	8000104 <strcmp>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d01b      	beq.n	8005fdc <getCommand+0x1c0>
		for(i =0; i < MaxNumOfGroups; i++){
 8005fa4:	3401      	adds	r4, #1
 8005fa6:	b2e4      	uxtb	r4, r4
 8005fa8:	370a      	adds	r7, #10
 8005faa:	2c0a      	cmp	r4, #10
 8005fac:	d1f4      	bne.n	8005f98 <getCommand+0x17c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005fae:	0032      	movs	r2, r6
 8005fb0:	4926      	ldr	r1, [pc, #152]	; (800604c <getCommand+0x230>)
 8005fb2:	9801      	ldr	r0, [sp, #4]
 8005fb4:	f00e fda0 	bl	8014af8 <sprintf>
			return pdFALSE;
 8005fb8:	e7e3      	b.n	8005f82 <getCommand+0x166>
			for(j =1; j <= N; j++)						// N modules
 8005fba:	3401      	adds	r4, #1
 8005fbc:	b2e4      	uxtb	r4, r4
 8005fbe:	783b      	ldrb	r3, [r7, #0]
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d3de      	bcc.n	8005f82 <getCommand+0x166>
				if(InGroup(j,i)){
 8005fc4:	1e63      	subs	r3, r4, #1
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	5b5b      	ldrh	r3, [r3, r5]
 8005fca:	421e      	tst	r6, r3
 8005fcc:	d0f5      	beq.n	8005fba <getCommand+0x19e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005fce:	0023      	movs	r3, r4
 8005fd0:	9801      	ldr	r0, [sp, #4]
 8005fd2:	0002      	movs	r2, r0
 8005fd4:	491e      	ldr	r1, [pc, #120]	; (8006050 <getCommand+0x234>)
 8005fd6:	f00e fd8f 	bl	8014af8 <sprintf>
 8005fda:	e7ee      	b.n	8005fba <getCommand+0x19e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005fdc:	0032      	movs	r2, r6
 8005fde:	491d      	ldr	r1, [pc, #116]	; (8006054 <getCommand+0x238>)
 8005fe0:	9801      	ldr	r0, [sp, #4]
 8005fe2:	f00e fd89 	bl	8014af8 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8005fe6:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <getCommand+0x23c>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0c9      	beq.n	8005f82 <getCommand+0x166>
 8005fee:	2601      	movs	r6, #1
 8005ff0:	40a6      	lsls	r6, r4
 8005ff2:	2401      	movs	r4, #1
				if(InGroup(j,i)){
 8005ff4:	4d19      	ldr	r5, [pc, #100]	; (800605c <getCommand+0x240>)
			for(j =1; j <= N; j++)						// N modules
 8005ff6:	4f18      	ldr	r7, [pc, #96]	; (8006058 <getCommand+0x23c>)
 8005ff8:	e7e4      	b.n	8005fc4 <getCommand+0x1a8>
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	2000130c 	.word	0x2000130c
 8006000:	0801a0dc 	.word	0x0801a0dc
 8006004:	0801a0e4 	.word	0x0801a0e4
 8006008:	20006dd0 	.word	0x20006dd0
 800600c:	0801a1a8 	.word	0x0801a1a8
 8006010:	08019254 	.word	0x08019254
 8006014:	080190ac 	.word	0x080190ac
 8006018:	0801a0f0 	.word	0x0801a0f0
 800601c:	0801a0f4 	.word	0x0801a0f4
 8006020:	0801a0fc 	.word	0x0801a0fc
 8006024:	0801a104 	.word	0x0801a104
 8006028:	0801a110 	.word	0x0801a110
 800602c:	0801a11c 	.word	0x0801a11c
 8006030:	0801a12c 	.word	0x0801a12c
 8006034:	0801a140 	.word	0x0801a140
 8006038:	20006e50 	.word	0x20006e50
 800603c:	08019994 	.word	0x08019994
 8006040:	0801a154 	.word	0x0801a154
 8006044:	0801a164 	.word	0x0801a164
 8006048:	20000ed0 	.word	0x20000ed0
 800604c:	0801a178 	.word	0x0801a178
 8006050:	0801a15c 	.word	0x0801a15c
 8006054:	0801a194 	.word	0x0801a194
 8006058:	20000044 	.word	0x20000044
 800605c:	20000f34 	.word	0x20000f34

08006060 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006060:	b570      	push	{r4, r5, r6, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	0005      	movs	r5, r0
 8006066:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006068:	2300      	movs	r3, #0
 800606a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800606c:	aa01      	add	r2, sp, #4
 800606e:	2101      	movs	r1, #1
 8006070:	f008 fdfa 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006074:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006076:	9e01      	ldr	r6, [sp, #4]
 8006078:	0032      	movs	r2, r6
 800607a:	491e      	ldr	r1, [pc, #120]	; (80060f4 <defaultCommand+0x94>)
 800607c:	f00e fd80 	bl	8014b80 <strncmp>
 8006080:	2800      	cmp	r0, #0
 8006082:	d020      	beq.n	80060c6 <defaultCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006084:	0032      	movs	r2, r6
 8006086:	491c      	ldr	r1, [pc, #112]	; (80060f8 <defaultCommand+0x98>)
 8006088:	0020      	movs	r0, r4
 800608a:	f00e fd79 	bl	8014b80 <strncmp>
 800608e:	2800      	cmp	r0, #0
 8006090:	d12a      	bne.n	80060e8 <defaultCommand+0x88>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006092:	2200      	movs	r2, #0
 8006094:	2116      	movs	r1, #22
 8006096:	20ff      	movs	r0, #255	; 0xff
 8006098:	f002 f862 	bl	8008160 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800609c:	4b17      	ldr	r3, [pc, #92]	; (80060fc <defaultCommand+0x9c>)
 800609e:	2202      	movs	r2, #2
 80060a0:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80060a2:	2064      	movs	r0, #100	; 0x64
 80060a4:	f008 fccb 	bl	800ea3e <osDelay>
		ClearEEportsDir();
 80060a8:	f7fd fab8 	bl	800361c <ClearEEportsDir>
		ClearROtopology();
 80060ac:	f004 ffd6 	bl	800b05c <ClearROtopology>
		osDelay(100);
 80060b0:	2064      	movs	r0, #100	; 0x64
 80060b2:	f008 fcc4 	bl	800ea3e <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80060b6:	2240      	movs	r2, #64	; 0x40
 80060b8:	4911      	ldr	r1, [pc, #68]	; (8006100 <defaultCommand+0xa0>)
 80060ba:	0028      	movs	r0, r5
 80060bc:	f00e fae7 	bl	801468e <memcpy>
}
 80060c0:	2000      	movs	r0, #0
 80060c2:	b002      	add	sp, #8
 80060c4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80060c6:	490f      	ldr	r1, [pc, #60]	; (8006104 <defaultCommand+0xa4>)
 80060c8:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <defaultCommand+0xa8>)
 80060ca:	000a      	movs	r2, r1
 80060cc:	cb13      	ldmia	r3!, {r0, r1, r4}
 80060ce:	c213      	stmia	r2!, {r0, r1, r4}
 80060d0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80060d2:	c213      	stmia	r2!, {r0, r1, r4}
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80060d8:	f7fd fa5c 	bl	8003594 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 80060dc:	2227      	movs	r2, #39	; 0x27
 80060de:	490b      	ldr	r1, [pc, #44]	; (800610c <defaultCommand+0xac>)
 80060e0:	0028      	movs	r0, r5
 80060e2:	f00e fad4 	bl	801468e <memcpy>
 80060e6:	e7eb      	b.n	80060c0 <defaultCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80060e8:	220f      	movs	r2, #15
 80060ea:	4909      	ldr	r1, [pc, #36]	; (8006110 <defaultCommand+0xb0>)
 80060ec:	0028      	movs	r0, r5
 80060ee:	f00e face 	bl	801468e <memcpy>
 80060f2:	e7e5      	b.n	80060c0 <defaultCommand+0x60>
 80060f4:	08019f98 	.word	0x08019f98
 80060f8:	08019fc8 	.word	0x08019fc8
 80060fc:	20000f68 	.word	0x20000f68
 8006100:	08019fe0 	.word	0x08019fe0
 8006104:	20006e50 	.word	0x20006e50
 8006108:	20000028 	.word	0x20000028
 800610c:	08019fa0 	.word	0x08019fa0
 8006110:	08019fd0 	.word	0x08019fd0

08006114 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006116:	46ce      	mov	lr, r9
 8006118:	4647      	mov	r7, r8
 800611a:	b580      	push	{r7, lr}
 800611c:	b08f      	sub	sp, #60	; 0x3c
 800611e:	9007      	str	r0, [sp, #28]
 8006120:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006122:	2300      	movs	r3, #0
 8006124:	930d      	str	r3, [sp, #52]	; 0x34
 8006126:	930c      	str	r3, [sp, #48]	; 0x30
 8006128:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 800612a:	930a      	str	r3, [sp, #40]	; 0x28
 800612c:	9309      	str	r3, [sp, #36]	; 0x24
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800612e:	aa0d      	add	r2, sp, #52	; 0x34
 8006130:	2101      	movs	r1, #1
 8006132:	0028      	movs	r0, r5
 8006134:	f008 fd98 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006138:	0004      	movs	r4, r0
 800613a:	4bda      	ldr	r3, [pc, #872]	; (80064a4 <setCommand+0x390>)
 800613c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800613e:	2204      	movs	r2, #4
 8006140:	49d9      	ldr	r1, [pc, #868]	; (80064a8 <setCommand+0x394>)
 8006142:	f00e fd1d 	bl	8014b80 <strncmp>
 8006146:	2800      	cmp	r0, #0
 8006148:	d015      	beq.n	8006176 <setCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800614a:	2204      	movs	r2, #4
 800614c:	49d7      	ldr	r1, [pc, #860]	; (80064ac <setCommand+0x398>)
 800614e:	0020      	movs	r0, r4
 8006150:	f00e fd16 	bl	8014b80 <strncmp>
 8006154:	2800      	cmp	r0, #0
 8006156:	d100      	bne.n	800615a <setCommand+0x46>
 8006158:	e167      	b.n	800642a <setCommand+0x316>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800615a:	2204      	movs	r2, #4
 800615c:	49d4      	ldr	r1, [pc, #848]	; (80064b0 <setCommand+0x39c>)
 800615e:	0020      	movs	r0, r4
 8006160:	f00e fd0e 	bl	8014b80 <strncmp>
 8006164:	2800      	cmp	r0, #0
 8006166:	d100      	bne.n	800616a <setCommand+0x56>
 8006168:	e1f9      	b.n	800655e <setCommand+0x44a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800616a:	2213      	movs	r2, #19
 800616c:	49d1      	ldr	r1, [pc, #836]	; (80064b4 <setCommand+0x3a0>)
 800616e:	9807      	ldr	r0, [sp, #28]
 8006170:	f00e fa8d 	bl	801468e <memcpy>
 8006174:	e266      	b.n	8006644 <setCommand+0x530>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006176:	aa0c      	add	r2, sp, #48	; 0x30
 8006178:	2102      	movs	r1, #2
 800617a:	0028      	movs	r0, r5
 800617c:	f008 fd74 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006180:	0007      	movs	r7, r0
 8006182:	4bcd      	ldr	r3, [pc, #820]	; (80064b8 <setCommand+0x3a4>)
 8006184:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8006186:	4bc7      	ldr	r3, [pc, #796]	; (80064a4 <setCommand+0x390>)
 8006188:	681c      	ldr	r4, [r3, #0]
 800618a:	3404      	adds	r4, #4
 800618c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800618e:	1f1d      	subs	r5, r3, #4
 8006190:	002a      	movs	r2, r5
 8006192:	49ca      	ldr	r1, [pc, #808]	; (80064bc <setCommand+0x3a8>)
 8006194:	0020      	movs	r0, r4
 8006196:	f00e fcf3 	bl	8014b80 <strncmp>
 800619a:	2800      	cmp	r0, #0
 800619c:	d15b      	bne.n	8006256 <setCommand+0x142>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 800619e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80061a0:	0022      	movs	r2, r4
 80061a2:	49c7      	ldr	r1, [pc, #796]	; (80064c0 <setCommand+0x3ac>)
 80061a4:	0038      	movs	r0, r7
 80061a6:	f00e fceb 	bl	8014b80 <strncmp>
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d01a      	beq.n	80061e4 <setCommand+0xd0>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80061ae:	0022      	movs	r2, r4
 80061b0:	49c4      	ldr	r1, [pc, #784]	; (80064c4 <setCommand+0x3b0>)
 80061b2:	0038      	movs	r0, r7
 80061b4:	f00e fce4 	bl	8014b80 <strncmp>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d02a      	beq.n	8006212 <setCommand+0xfe>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80061bc:	0022      	movs	r2, r4
 80061be:	49c2      	ldr	r1, [pc, #776]	; (80064c8 <setCommand+0x3b4>)
 80061c0:	0038      	movs	r0, r7
 80061c2:	f00e fcdd 	bl	8014b80 <strncmp>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d02f      	beq.n	800622a <setCommand+0x116>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80061ca:	0022      	movs	r2, r4
 80061cc:	49bf      	ldr	r1, [pc, #764]	; (80064cc <setCommand+0x3b8>)
 80061ce:	0038      	movs	r0, r7
 80061d0:	f00e fcd6 	bl	8014b80 <strncmp>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d034      	beq.n	8006242 <setCommand+0x12e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80061d8:	220f      	movs	r2, #15
 80061da:	49bd      	ldr	r1, [pc, #756]	; (80064d0 <setCommand+0x3bc>)
 80061dc:	9807      	ldr	r0, [sp, #28]
 80061de:	f00e fa56 	bl	801468e <memcpy>
 80061e2:	e22f      	b.n	8006644 <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 80061e4:	4bbb      	ldr	r3, [pc, #748]	; (80064d4 <setCommand+0x3c0>)
 80061e6:	2260      	movs	r2, #96	; 0x60
 80061e8:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80061ea:	7859      	ldrb	r1, [r3, #1]
 80061ec:	0209      	lsls	r1, r1, #8
 80061ee:	2360      	movs	r3, #96	; 0x60
 80061f0:	4319      	orrs	r1, r3
 80061f2:	308a      	adds	r0, #138	; 0x8a
 80061f4:	0040      	lsls	r0, r0, #1
 80061f6:	f006 f915 	bl	800c424 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80061fa:	4baa      	ldr	r3, [pc, #680]	; (80064a4 <setCommand+0x390>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	2300      	movs	r3, #0
 8006200:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006202:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006204:	4bac      	ldr	r3, [pc, #688]	; (80064b8 <setCommand+0x3a4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	49b3      	ldr	r1, [pc, #716]	; (80064d8 <setCommand+0x3c4>)
 800620a:	9807      	ldr	r0, [sp, #28]
 800620c:	f00e fc74 	bl	8014af8 <sprintf>
	return pdFALSE;
 8006210:	e218      	b.n	8006644 <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006212:	4bb0      	ldr	r3, [pc, #704]	; (80064d4 <setCommand+0x3c0>)
 8006214:	2220      	movs	r2, #32
 8006216:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006218:	7859      	ldrb	r1, [r3, #1]
 800621a:	0209      	lsls	r1, r1, #8
 800621c:	2320      	movs	r3, #32
 800621e:	4319      	orrs	r1, r3
 8006220:	308a      	adds	r0, #138	; 0x8a
 8006222:	0040      	lsls	r0, r0, #1
 8006224:	f006 f8fe 	bl	800c424 <EE_WriteVariable>
 8006228:	e7e7      	b.n	80061fa <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800622a:	4baa      	ldr	r3, [pc, #680]	; (80064d4 <setCommand+0x3c0>)
 800622c:	2240      	movs	r2, #64	; 0x40
 800622e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006230:	7859      	ldrb	r1, [r3, #1]
 8006232:	0209      	lsls	r1, r1, #8
 8006234:	2340      	movs	r3, #64	; 0x40
 8006236:	4319      	orrs	r1, r3
 8006238:	308a      	adds	r0, #138	; 0x8a
 800623a:	0040      	lsls	r0, r0, #1
 800623c:	f006 f8f2 	bl	800c424 <EE_WriteVariable>
 8006240:	e7db      	b.n	80061fa <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006242:	4ba4      	ldr	r3, [pc, #656]	; (80064d4 <setCommand+0x3c0>)
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006248:	7859      	ldrb	r1, [r3, #1]
 800624a:	0209      	lsls	r1, r1, #8
 800624c:	308a      	adds	r0, #138	; 0x8a
 800624e:	0040      	lsls	r0, r0, #1
 8006250:	f006 f8e8 	bl	800c424 <EE_WriteVariable>
 8006254:	e7d1      	b.n	80061fa <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006256:	002a      	movs	r2, r5
 8006258:	49a0      	ldr	r1, [pc, #640]	; (80064dc <setCommand+0x3c8>)
 800625a:	0020      	movs	r0, r4
 800625c:	f00e fc90 	bl	8014b80 <strncmp>
 8006260:	2800      	cmp	r0, #0
 8006262:	d149      	bne.n	80062f8 <setCommand+0x1e4>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006264:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006266:	0022      	movs	r2, r4
 8006268:	4995      	ldr	r1, [pc, #596]	; (80064c0 <setCommand+0x3ac>)
 800626a:	0038      	movs	r0, r7
 800626c:	f00e fc88 	bl	8014b80 <strncmp>
 8006270:	2800      	cmp	r0, #0
 8006272:	d01d      	beq.n	80062b0 <setCommand+0x19c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006274:	0022      	movs	r2, r4
 8006276:	4993      	ldr	r1, [pc, #588]	; (80064c4 <setCommand+0x3b0>)
 8006278:	0038      	movs	r0, r7
 800627a:	f00e fc81 	bl	8014b80 <strncmp>
 800627e:	2800      	cmp	r0, #0
 8006280:	d022      	beq.n	80062c8 <setCommand+0x1b4>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 8006282:	0022      	movs	r2, r4
 8006284:	498d      	ldr	r1, [pc, #564]	; (80064bc <setCommand+0x3a8>)
 8006286:	0038      	movs	r0, r7
 8006288:	f00e fc7a 	bl	8014b80 <strncmp>
 800628c:	2800      	cmp	r0, #0
 800628e:	d027      	beq.n	80062e0 <setCommand+0x1cc>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006290:	0022      	movs	r2, r4
 8006292:	498e      	ldr	r1, [pc, #568]	; (80064cc <setCommand+0x3b8>)
 8006294:	0038      	movs	r0, r7
 8006296:	f00e fc73 	bl	8014b80 <strncmp>
 800629a:	2800      	cmp	r0, #0
 800629c:	d19c      	bne.n	80061d8 <setCommand+0xc4>
				BOSMessaging.trace =TRACE_NONE;
 800629e:	4b8d      	ldr	r3, [pc, #564]	; (80064d4 <setCommand+0x3c0>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062a4:	7819      	ldrb	r1, [r3, #0]
 80062a6:	308a      	adds	r0, #138	; 0x8a
 80062a8:	0040      	lsls	r0, r0, #1
 80062aa:	f006 f8bb 	bl	800c424 <EE_WriteVariable>
 80062ae:	e7a4      	b.n	80061fa <setCommand+0xe6>
				BOSMessaging.trace =TRACE_BOTH;
 80062b0:	4b88      	ldr	r3, [pc, #544]	; (80064d4 <setCommand+0x3c0>)
 80062b2:	2203      	movs	r2, #3
 80062b4:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	21c0      	movs	r1, #192	; 0xc0
 80062ba:	0089      	lsls	r1, r1, #2
 80062bc:	4319      	orrs	r1, r3
 80062be:	308a      	adds	r0, #138	; 0x8a
 80062c0:	0040      	lsls	r0, r0, #1
 80062c2:	f006 f8af 	bl	800c424 <EE_WriteVariable>
 80062c6:	e798      	b.n	80061fa <setCommand+0xe6>
				BOSMessaging.trace =TRACE_MESSAGE;
 80062c8:	4b82      	ldr	r3, [pc, #520]	; (80064d4 <setCommand+0x3c0>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2180      	movs	r1, #128	; 0x80
 80062d2:	0049      	lsls	r1, r1, #1
 80062d4:	4319      	orrs	r1, r3
 80062d6:	308a      	adds	r0, #138	; 0x8a
 80062d8:	0040      	lsls	r0, r0, #1
 80062da:	f006 f8a3 	bl	800c424 <EE_WriteVariable>
 80062de:	e78c      	b.n	80061fa <setCommand+0xe6>
				BOSMessaging.trace =TRACE_RESPONSE;
 80062e0:	4b7c      	ldr	r3, [pc, #496]	; (80064d4 <setCommand+0x3c0>)
 80062e2:	2202      	movs	r2, #2
 80062e4:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	0089      	lsls	r1, r1, #2
 80062ec:	4319      	orrs	r1, r3
 80062ee:	308a      	adds	r0, #138	; 0x8a
 80062f0:	0040      	lsls	r0, r0, #1
 80062f2:	f006 f897 	bl	800c424 <EE_WriteVariable>
 80062f6:	e780      	b.n	80061fa <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 80062f8:	002a      	movs	r2, r5
 80062fa:	4979      	ldr	r1, [pc, #484]	; (80064e0 <setCommand+0x3cc>)
 80062fc:	0020      	movs	r0, r4
 80062fe:	f00e fc3f 	bl	8014b80 <strncmp>
 8006302:	2800      	cmp	r0, #0
 8006304:	d02f      	beq.n	8006366 <setCommand+0x252>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006306:	002a      	movs	r2, r5
 8006308:	4976      	ldr	r1, [pc, #472]	; (80064e4 <setCommand+0x3d0>)
 800630a:	0020      	movs	r0, r4
 800630c:	f00e fc38 	bl	8014b80 <strncmp>
 8006310:	2800      	cmp	r0, #0
 8006312:	d05b      	beq.n	80063cc <setCommand+0x2b8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006314:	002a      	movs	r2, r5
 8006316:	4974      	ldr	r1, [pc, #464]	; (80064e8 <setCommand+0x3d4>)
 8006318:	0020      	movs	r0, r4
 800631a:	f00e fc31 	bl	8014b80 <strncmp>
 800631e:	2800      	cmp	r0, #0
 8006320:	d062      	beq.n	80063e8 <setCommand+0x2d4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006322:	002a      	movs	r2, r5
 8006324:	4971      	ldr	r1, [pc, #452]	; (80064ec <setCommand+0x3d8>)
 8006326:	0020      	movs	r0, r4
 8006328:	f00e fc2a 	bl	8014b80 <strncmp>
 800632c:	2800      	cmp	r0, #0
 800632e:	d069      	beq.n	8006404 <setCommand+0x2f0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006330:	002a      	movs	r2, r5
 8006332:	496f      	ldr	r1, [pc, #444]	; (80064f0 <setCommand+0x3dc>)
 8006334:	0020      	movs	r0, r4
 8006336:	f00e fc23 	bl	8014b80 <strncmp>
 800633a:	2800      	cmp	r0, #0
 800633c:	d000      	beq.n	8006340 <setCommand+0x22c>
 800633e:	e714      	b.n	800616a <setCommand+0x56>
			temp16 =atoi((const char* )pcParameterString2);
 8006340:	0038      	movs	r0, r7
 8006342:	f00d ff14 	bl	801416e <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006346:	1e43      	subs	r3, r0, #1
 8006348:	b29b      	uxth	r3, r3
 800634a:	2bfe      	cmp	r3, #254	; 0xfe
 800634c:	d900      	bls.n	8006350 <setCommand+0x23c>
 800634e:	e743      	b.n	80061d8 <setCommand+0xc4>
				BOS.buttons.maxInterClickTime =temp16;
 8006350:	4b68      	ldr	r3, [pc, #416]	; (80064f4 <setCommand+0x3e0>)
 8006352:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006354:	0200      	lsls	r0, r0, #8
 8006356:	7919      	ldrb	r1, [r3, #4]
 8006358:	4301      	orrs	r1, r0
 800635a:	b289      	uxth	r1, r1
 800635c:	2018      	movs	r0, #24
 800635e:	30ff      	adds	r0, #255	; 0xff
 8006360:	f006 f860 	bl	800c424 <EE_WriteVariable>
 8006364:	e749      	b.n	80061fa <setCommand+0xe6>
			temp2 =atoi((const char* )pcParameterString2);
 8006366:	0038      	movs	r0, r7
 8006368:	f00d ff01 	bl	801416e <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800636c:	23e1      	movs	r3, #225	; 0xe1
 800636e:	031b      	lsls	r3, r3, #12
 8006370:	4298      	cmp	r0, r3
 8006372:	d900      	bls.n	8006376 <setCommand+0x262>
 8006374:	e730      	b.n	80061d8 <setCommand+0xc4>
				BOS.clibaudrate =temp2;
 8006376:	4c5f      	ldr	r4, [pc, #380]	; (80064f4 <setCommand+0x3e0>)
 8006378:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800637a:	b281      	uxth	r1, r0
 800637c:	208c      	movs	r0, #140	; 0x8c
 800637e:	0040      	lsls	r0, r0, #1
 8006380:	f006 f850 	bl	800c424 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 8006384:	8961      	ldrh	r1, [r4, #10]
 8006386:	201a      	movs	r0, #26
 8006388:	30ff      	adds	r0, #255	; 0xff
 800638a:	f006 f84b 	bl	800c424 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800638e:	4b45      	ldr	r3, [pc, #276]	; (80064a4 <setCommand+0x390>)
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006396:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006398:	4b47      	ldr	r3, [pc, #284]	; (80064b8 <setCommand+0x3a4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	494e      	ldr	r1, [pc, #312]	; (80064d8 <setCommand+0x3c4>)
 800639e:	9c07      	ldr	r4, [sp, #28]
 80063a0:	0020      	movs	r0, r4
 80063a2:	f00e fba9 	bl	8014af8 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80063a6:	0020      	movs	r0, r4
 80063a8:	f7f9 feb6 	bl	8000118 <strlen>
 80063ac:	46a4      	mov	ip, r4
 80063ae:	4460      	add	r0, ip
 80063b0:	2230      	movs	r2, #48	; 0x30
 80063b2:	4951      	ldr	r1, [pc, #324]	; (80064f8 <setCommand+0x3e4>)
 80063b4:	f00e f96b 	bl	801468e <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80063b8:	0020      	movs	r0, r4
 80063ba:	f7f9 fead 	bl	8000118 <strlen>
 80063be:	46a4      	mov	ip, r4
 80063c0:	4460      	add	r0, ip
 80063c2:	22b2      	movs	r2, #178	; 0xb2
 80063c4:	494d      	ldr	r1, [pc, #308]	; (80064fc <setCommand+0x3e8>)
 80063c6:	f00e f962 	bl	801468e <memcpy>
 80063ca:	e13b      	b.n	8006644 <setCommand+0x530>
			temp16 =atoi((const char* )pcParameterString2);
 80063cc:	0038      	movs	r0, r7
 80063ce:	f00d fece 	bl	801416e <atoi>
 80063d2:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80063d4:	2900      	cmp	r1, #0
 80063d6:	d100      	bne.n	80063da <setCommand+0x2c6>
 80063d8:	e6fe      	b.n	80061d8 <setCommand+0xc4>
				BOS.buttons.debounce =temp16;
 80063da:	4b46      	ldr	r3, [pc, #280]	; (80064f4 <setCommand+0x3e0>)
 80063dc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80063de:	2016      	movs	r0, #22
 80063e0:	30ff      	adds	r0, #255	; 0xff
 80063e2:	f006 f81f 	bl	800c424 <EE_WriteVariable>
 80063e6:	e708      	b.n	80061fa <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 80063e8:	0038      	movs	r0, r7
 80063ea:	f00d fec0 	bl	801416e <atoi>
 80063ee:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80063f0:	2900      	cmp	r1, #0
 80063f2:	d100      	bne.n	80063f6 <setCommand+0x2e2>
 80063f4:	e6f0      	b.n	80061d8 <setCommand+0xc4>
				BOS.buttons.singleClickTime =temp16;
 80063f6:	4b3f      	ldr	r3, [pc, #252]	; (80064f4 <setCommand+0x3e0>)
 80063f8:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 80063fa:	208b      	movs	r0, #139	; 0x8b
 80063fc:	0040      	lsls	r0, r0, #1
 80063fe:	f006 f811 	bl	800c424 <EE_WriteVariable>
 8006402:	e6fa      	b.n	80061fa <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 8006404:	0038      	movs	r0, r7
 8006406:	f00d feb2 	bl	801416e <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800640a:	1e43      	subs	r3, r0, #1
 800640c:	b29b      	uxth	r3, r3
 800640e:	2bfe      	cmp	r3, #254	; 0xfe
 8006410:	d900      	bls.n	8006414 <setCommand+0x300>
 8006412:	e6e1      	b.n	80061d8 <setCommand+0xc4>
				BOS.buttons.minInterClickTime =temp16;
 8006414:	b2c0      	uxtb	r0, r0
 8006416:	4b37      	ldr	r3, [pc, #220]	; (80064f4 <setCommand+0x3e0>)
 8006418:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800641a:	7959      	ldrb	r1, [r3, #5]
 800641c:	0209      	lsls	r1, r1, #8
 800641e:	4301      	orrs	r1, r0
 8006420:	2018      	movs	r0, #24
 8006422:	30ff      	adds	r0, #255	; 0xff
 8006424:	f005 fffe 	bl	800c424 <EE_WriteVariable>
 8006428:	e6e7      	b.n	80061fa <setCommand+0xe6>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800642a:	aa0c      	add	r2, sp, #48	; 0x30
 800642c:	2102      	movs	r1, #2
 800642e:	0028      	movs	r0, r5
 8006430:	f008 fc1a 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006434:	4f20      	ldr	r7, [pc, #128]	; (80064b8 <setCommand+0x3a4>)
 8006436:	6038      	str	r0, [r7, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006438:	aa0b      	add	r2, sp, #44	; 0x2c
 800643a:	2103      	movs	r1, #3
 800643c:	0028      	movs	r0, r5
 800643e:	f008 fc13 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006442:	4c2f      	ldr	r4, [pc, #188]	; (8006500 <setCommand+0x3ec>)
 8006444:	6020      	str	r0, [r4, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006446:	aa0a      	add	r2, sp, #40	; 0x28
 8006448:	2104      	movs	r1, #4
 800644a:	0028      	movs	r0, r5
 800644c:	f008 fc0c 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006450:	4e2c      	ldr	r6, [pc, #176]	; (8006504 <setCommand+0x3f0>)
 8006452:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006454:	aa09      	add	r2, sp, #36	; 0x24
 8006456:	2105      	movs	r1, #5
 8006458:	0028      	movs	r0, r5
 800645a:	f008 fc05 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800645e:	4d2a      	ldr	r5, [pc, #168]	; (8006508 <setCommand+0x3f4>)
 8006460:	6028      	str	r0, [r5, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006462:	6838      	ldr	r0, [r7, #0]
 8006464:	f00d fe83 	bl	801416e <atoi>
 8006468:	b2c7      	uxtb	r7, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800646a:	6820      	ldr	r0, [r4, #0]
 800646c:	f00d fe7f 	bl	801416e <atoi>
 8006470:	0004      	movs	r4, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006472:	6830      	ldr	r0, [r6, #0]
 8006474:	f00d fe7b 	bl	801416e <atoi>
 8006478:	0006      	movs	r6, r0
		if(pcParameterString5 != NULL){
 800647a:	682d      	ldr	r5, [r5, #0]
 800647c:	2d00      	cmp	r5, #0
 800647e:	d04b      	beq.n	8006518 <setCommand+0x404>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006480:	2202      	movs	r2, #2
 8006482:	4922      	ldr	r1, [pc, #136]	; (800650c <setCommand+0x3f8>)
 8006484:	0028      	movs	r0, r5
 8006486:	f00e fb7b 	bl	8014b80 <strncmp>
 800648a:	2800      	cmp	r0, #0
 800648c:	d042      	beq.n	8006514 <setCommand+0x400>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 800648e:	2202      	movs	r2, #2
 8006490:	491f      	ldr	r1, [pc, #124]	; (8006510 <setCommand+0x3fc>)
 8006492:	0028      	movs	r0, r5
 8006494:	f00e fb74 	bl	8014b80 <strncmp>
 8006498:	2800      	cmp	r0, #0
 800649a:	d000      	beq.n	800649e <setCommand+0x38a>
 800649c:	e69c      	b.n	80061d8 <setCommand+0xc4>
				temp84 =RTC_PM;
 800649e:	2302      	movs	r3, #2
 80064a0:	4699      	mov	r9, r3
 80064a2:	e039      	b.n	8006518 <setCommand+0x404>
 80064a4:	20001308 	.word	0x20001308
 80064a8:	0801a0dc 	.word	0x0801a0dc
 80064ac:	0801a808 	.word	0x0801a808
 80064b0:	0801a814 	.word	0x0801a814
 80064b4:	0801a164 	.word	0x0801a164
 80064b8:	20001314 	.word	0x20001314
 80064bc:	0801a0e4 	.word	0x0801a0e4
 80064c0:	08019254 	.word	0x08019254
 80064c4:	0801a704 	.word	0x0801a704
 80064c8:	0801a70c 	.word	0x0801a70c
 80064cc:	0801a0f4 	.word	0x0801a0f4
 80064d0:	08019fd0 	.word	0x08019fd0
 80064d4:	20006dd0 	.word	0x20006dd0
 80064d8:	0801a710 	.word	0x0801a710
 80064dc:	0801a0fc 	.word	0x0801a0fc
 80064e0:	0801a104 	.word	0x0801a104
 80064e4:	0801a110 	.word	0x0801a110
 80064e8:	0801a11c 	.word	0x0801a11c
 80064ec:	0801a12c 	.word	0x0801a12c
 80064f0:	0801a140 	.word	0x0801a140
 80064f4:	20006e50 	.word	0x20006e50
 80064f8:	0801a724 	.word	0x0801a724
 80064fc:	0801a754 	.word	0x0801a754
 8006500:	2000131c 	.word	0x2000131c
 8006504:	20001320 	.word	0x20001320
 8006508:	20001324 	.word	0x20001324
 800650c:	0801bc74 	.word	0x0801bc74
 8006510:	0801a810 	.word	0x0801a810
				temp84 =RTC_AM;
 8006514:	2301      	movs	r3, #1
 8006516:	4699      	mov	r9, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006518:	2f17      	cmp	r7, #23
 800651a:	d900      	bls.n	800651e <setCommand+0x40a>
 800651c:	e65c      	b.n	80061d8 <setCommand+0xc4>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800651e:	b2e4      	uxtb	r4, r4
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006520:	2c3b      	cmp	r4, #59	; 0x3b
 8006522:	d900      	bls.n	8006526 <setCommand+0x412>
 8006524:	e658      	b.n	80061d8 <setCommand+0xc4>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006526:	b2f5      	uxtb	r5, r6
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006528:	2d3b      	cmp	r5, #59	; 0x3b
 800652a:	d900      	bls.n	800652e <setCommand+0x41a>
 800652c:	e654      	b.n	80061d8 <setCommand+0xc4>
				GetTimeDate();
 800652e:	f007 fe37 	bl	800e1a0 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006532:	4bd0      	ldr	r3, [pc, #832]	; (8006874 <setCommand+0x760>)
 8006534:	7d1a      	ldrb	r2, [r3, #20]
 8006536:	4694      	mov	ip, r2
 8006538:	8b1a      	ldrh	r2, [r3, #24]
 800653a:	7d59      	ldrb	r1, [r3, #21]
 800653c:	7d98      	ldrb	r0, [r3, #22]
 800653e:	7b1b      	ldrb	r3, [r3, #12]
 8006540:	b25b      	sxtb	r3, r3
 8006542:	9304      	str	r3, [sp, #16]
 8006544:	464b      	mov	r3, r9
 8006546:	9303      	str	r3, [sp, #12]
 8006548:	9702      	str	r7, [sp, #8]
 800654a:	9401      	str	r4, [sp, #4]
 800654c:	9500      	str	r5, [sp, #0]
 800654e:	4663      	mov	r3, ip
 8006550:	f007 fdcc 	bl	800e0ec <BOS_CalendarConfig>
 8006554:	0007      	movs	r7, r0
	if(result == BOS_OK){
 8006556:	2f00      	cmp	r7, #0
 8006558:	d100      	bne.n	800655c <setCommand+0x448>
 800655a:	e64e      	b.n	80061fa <setCommand+0xe6>
 800655c:	e06c      	b.n	8006638 <setCommand+0x524>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800655e:	aa0c      	add	r2, sp, #48	; 0x30
 8006560:	2102      	movs	r1, #2
 8006562:	0028      	movs	r0, r5
 8006564:	f008 fb80 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006568:	4cc3      	ldr	r4, [pc, #780]	; (8006878 <setCommand+0x764>)
 800656a:	6020      	str	r0, [r4, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800656c:	aa0b      	add	r2, sp, #44	; 0x2c
 800656e:	2103      	movs	r1, #3
 8006570:	0028      	movs	r0, r5
 8006572:	f008 fb79 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006576:	4bc1      	ldr	r3, [pc, #772]	; (800687c <setCommand+0x768>)
 8006578:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800657a:	aa0a      	add	r2, sp, #40	; 0x28
 800657c:	2104      	movs	r1, #4
 800657e:	0028      	movs	r0, r5
 8006580:	f008 fb72 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006584:	4bbe      	ldr	r3, [pc, #760]	; (8006880 <setCommand+0x76c>)
 8006586:	4699      	mov	r9, r3
 8006588:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 800658a:	aa09      	add	r2, sp, #36	; 0x24
 800658c:	2105      	movs	r1, #5
 800658e:	0028      	movs	r0, r5
 8006590:	f008 fb6a 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006594:	4fbb      	ldr	r7, [pc, #748]	; (8006884 <setCommand+0x770>)
 8006596:	6038      	str	r0, [r7, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 8006598:	464b      	mov	r3, r9
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	f00d fde7 	bl	801416e <atoi>
 80065a0:	0005      	movs	r5, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80065a2:	6838      	ldr	r0, [r7, #0]
 80065a4:	f00d fde3 	bl	801416e <atoi>
 80065a8:	0006      	movs	r6, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80065aa:	6824      	ldr	r4, [r4, #0]
 80065ac:	2206      	movs	r2, #6
 80065ae:	49b6      	ldr	r1, [pc, #728]	; (8006888 <setCommand+0x774>)
 80065b0:	0020      	movs	r0, r4
 80065b2:	f00e fae5 	bl	8014b80 <strncmp>
 80065b6:	2800      	cmp	r0, #0
 80065b8:	d100      	bne.n	80065bc <setCommand+0x4a8>
 80065ba:	e096      	b.n	80066ea <setCommand+0x5d6>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80065bc:	2207      	movs	r2, #7
 80065be:	49b3      	ldr	r1, [pc, #716]	; (800688c <setCommand+0x778>)
 80065c0:	0020      	movs	r0, r4
 80065c2:	f00e fadd 	bl	8014b80 <strncmp>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d100      	bne.n	80065cc <setCommand+0x4b8>
 80065ca:	e14f      	b.n	800686c <setCommand+0x758>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80065cc:	2209      	movs	r2, #9
 80065ce:	49b0      	ldr	r1, [pc, #704]	; (8006890 <setCommand+0x77c>)
 80065d0:	0020      	movs	r0, r4
 80065d2:	f00e fad5 	bl	8014b80 <strncmp>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d100      	bne.n	80065dc <setCommand+0x4c8>
 80065da:	e195      	b.n	8006908 <setCommand+0x7f4>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 80065dc:	2208      	movs	r2, #8
 80065de:	49ad      	ldr	r1, [pc, #692]	; (8006894 <setCommand+0x780>)
 80065e0:	0020      	movs	r0, r4
 80065e2:	f00e facd 	bl	8014b80 <strncmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d100      	bne.n	80065ec <setCommand+0x4d8>
 80065ea:	e190      	b.n	800690e <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 80065ec:	2206      	movs	r2, #6
 80065ee:	49aa      	ldr	r1, [pc, #680]	; (8006898 <setCommand+0x784>)
 80065f0:	0020      	movs	r0, r4
 80065f2:	f00e fac5 	bl	8014b80 <strncmp>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d100      	bne.n	80065fc <setCommand+0x4e8>
 80065fa:	e18b      	b.n	8006914 <setCommand+0x800>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 80065fc:	2208      	movs	r2, #8
 80065fe:	49a7      	ldr	r1, [pc, #668]	; (800689c <setCommand+0x788>)
 8006600:	0020      	movs	r0, r4
 8006602:	f00e fabd 	bl	8014b80 <strncmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	d100      	bne.n	800660c <setCommand+0x4f8>
 800660a:	e186      	b.n	800691a <setCommand+0x806>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800660c:	2206      	movs	r2, #6
 800660e:	49a4      	ldr	r1, [pc, #656]	; (80068a0 <setCommand+0x78c>)
 8006610:	0020      	movs	r0, r4
 8006612:	f00e fab5 	bl	8014b80 <strncmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	d100      	bne.n	800661c <setCommand+0x508>
 800661a:	e181      	b.n	8006920 <setCommand+0x80c>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800661c:	4b97      	ldr	r3, [pc, #604]	; (800687c <setCommand+0x768>)
 800661e:	681c      	ldr	r4, [r3, #0]
 8006620:	2207      	movs	r2, #7
 8006622:	49a0      	ldr	r1, [pc, #640]	; (80068a4 <setCommand+0x790>)
 8006624:	0020      	movs	r0, r4
 8006626:	f00e faab 	bl	8014b80 <strncmp>
			result =BOS_ERR_WrongValue;
 800662a:	2768      	movs	r7, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800662c:	2800      	cmp	r0, #0
 800662e:	d003      	beq.n	8006638 <setCommand+0x524>
 8006630:	e067      	b.n	8006702 <setCommand+0x5ee>
			temp82 =JANUARY;
 8006632:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006634:	2f00      	cmp	r7, #0
 8006636:	d036      	beq.n	80066a6 <setCommand+0x592>
	else if(result == BOS_ERR_WrongParam)
 8006638:	2f67      	cmp	r7, #103	; 0x67
 800663a:	d100      	bne.n	800663e <setCommand+0x52a>
 800663c:	e595      	b.n	800616a <setCommand+0x56>
	else if(result == BOS_ERR_WrongValue)
 800663e:	2f68      	cmp	r7, #104	; 0x68
 8006640:	d100      	bne.n	8006644 <setCommand+0x530>
 8006642:	e5c9      	b.n	80061d8 <setCommand+0xc4>
}
 8006644:	2000      	movs	r0, #0
 8006646:	b00f      	add	sp, #60	; 0x3c
 8006648:	bc0c      	pop	{r2, r3}
 800664a:	4690      	mov	r8, r2
 800664c:	4699      	mov	r9, r3
 800664e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp82 =FEBRUARY;
 8006650:	2402      	movs	r4, #2
 8006652:	e7ef      	b.n	8006634 <setCommand+0x520>
 8006654:	2402      	movs	r4, #2
 8006656:	e7ed      	b.n	8006634 <setCommand+0x520>
			temp82 =MARCH;
 8006658:	2403      	movs	r4, #3
 800665a:	e7eb      	b.n	8006634 <setCommand+0x520>
 800665c:	2403      	movs	r4, #3
 800665e:	e7e9      	b.n	8006634 <setCommand+0x520>
			temp82 =APRIL;
 8006660:	2404      	movs	r4, #4
 8006662:	e7e7      	b.n	8006634 <setCommand+0x520>
 8006664:	2404      	movs	r4, #4
 8006666:	e7e5      	b.n	8006634 <setCommand+0x520>
			temp82 =MAY;
 8006668:	2405      	movs	r4, #5
 800666a:	e7e3      	b.n	8006634 <setCommand+0x520>
 800666c:	2405      	movs	r4, #5
 800666e:	e7e1      	b.n	8006634 <setCommand+0x520>
			temp82 =JUNE;
 8006670:	2406      	movs	r4, #6
 8006672:	e7df      	b.n	8006634 <setCommand+0x520>
 8006674:	2406      	movs	r4, #6
 8006676:	e7dd      	b.n	8006634 <setCommand+0x520>
			temp82 =JULY;
 8006678:	2407      	movs	r4, #7
 800667a:	e7db      	b.n	8006634 <setCommand+0x520>
 800667c:	2407      	movs	r4, #7
 800667e:	e7d9      	b.n	8006634 <setCommand+0x520>
			temp82 =AUGUST;
 8006680:	2408      	movs	r4, #8
 8006682:	e7d7      	b.n	8006634 <setCommand+0x520>
 8006684:	2408      	movs	r4, #8
 8006686:	e7d5      	b.n	8006634 <setCommand+0x520>
			temp82 =SEPTEMBER;
 8006688:	2409      	movs	r4, #9
 800668a:	e7d3      	b.n	8006634 <setCommand+0x520>
 800668c:	2409      	movs	r4, #9
 800668e:	e7d1      	b.n	8006634 <setCommand+0x520>
			temp82 =OCTOBER;
 8006690:	240a      	movs	r4, #10
 8006692:	e7cf      	b.n	8006634 <setCommand+0x520>
 8006694:	240a      	movs	r4, #10
 8006696:	e7cd      	b.n	8006634 <setCommand+0x520>
			temp82 =NOVEMBER;
 8006698:	240b      	movs	r4, #11
 800669a:	e7cb      	b.n	8006634 <setCommand+0x520>
 800669c:	240b      	movs	r4, #11
 800669e:	e7c9      	b.n	8006634 <setCommand+0x520>
			temp82 =DECEMBER;
 80066a0:	240c      	movs	r4, #12
 80066a2:	e7c7      	b.n	8006634 <setCommand+0x520>
			temp82 =JANUARY;
 80066a4:	2401      	movs	r4, #1
		temp83 =atoi((const char* )pcParameterString4);		// day
 80066a6:	b2ed      	uxtb	r5, r5
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066a8:	1e6b      	subs	r3, r5, #1
 80066aa:	2b1e      	cmp	r3, #30
 80066ac:	d900      	bls.n	80066b0 <setCommand+0x59c>
 80066ae:	e593      	b.n	80061d8 <setCommand+0xc4>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80066b0:	b2b7      	uxth	r7, r6
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066b2:	4b7d      	ldr	r3, [pc, #500]	; (80068a8 <setCommand+0x794>)
 80066b4:	18fb      	adds	r3, r7, r3
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	2b64      	cmp	r3, #100	; 0x64
 80066ba:	d900      	bls.n	80066be <setCommand+0x5aa>
 80066bc:	e58c      	b.n	80061d8 <setCommand+0xc4>
				GetTimeDate();
 80066be:	f007 fd6f 	bl	800e1a0 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80066c2:	4b6c      	ldr	r3, [pc, #432]	; (8006874 <setCommand+0x760>)
 80066c4:	220c      	movs	r2, #12
 80066c6:	569a      	ldrsb	r2, [r3, r2]
 80066c8:	9204      	str	r2, [sp, #16]
 80066ca:	7cda      	ldrb	r2, [r3, #19]
 80066cc:	9203      	str	r2, [sp, #12]
 80066ce:	7c9a      	ldrb	r2, [r3, #18]
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	7c5a      	ldrb	r2, [r3, #17]
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	7c1b      	ldrb	r3, [r3, #16]
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	4643      	mov	r3, r8
 80066dc:	003a      	movs	r2, r7
 80066de:	0029      	movs	r1, r5
 80066e0:	0020      	movs	r0, r4
 80066e2:	f007 fd03 	bl	800e0ec <BOS_CalendarConfig>
 80066e6:	0007      	movs	r7, r0
 80066e8:	e735      	b.n	8006556 <setCommand+0x442>
			temp81 =MONDAY;
 80066ea:	2301      	movs	r3, #1
 80066ec:	4698      	mov	r8, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80066ee:	4b63      	ldr	r3, [pc, #396]	; (800687c <setCommand+0x768>)
 80066f0:	681c      	ldr	r4, [r3, #0]
 80066f2:	2207      	movs	r2, #7
 80066f4:	496b      	ldr	r1, [pc, #428]	; (80068a4 <setCommand+0x790>)
 80066f6:	0020      	movs	r0, r4
 80066f8:	f00e fa42 	bl	8014b80 <strncmp>
 80066fc:	2700      	movs	r7, #0
 80066fe:	2800      	cmp	r0, #0
 8006700:	d0d0      	beq.n	80066a4 <setCommand+0x590>
 8006702:	2202      	movs	r2, #2
 8006704:	4969      	ldr	r1, [pc, #420]	; (80068ac <setCommand+0x798>)
 8006706:	0020      	movs	r0, r4
 8006708:	f00e fa3a 	bl	8014b80 <strncmp>
 800670c:	2800      	cmp	r0, #0
 800670e:	d100      	bne.n	8006712 <setCommand+0x5fe>
 8006710:	e78f      	b.n	8006632 <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006712:	2208      	movs	r2, #8
 8006714:	4966      	ldr	r1, [pc, #408]	; (80068b0 <setCommand+0x79c>)
 8006716:	0020      	movs	r0, r4
 8006718:	f00e fa32 	bl	8014b80 <strncmp>
 800671c:	2800      	cmp	r0, #0
 800671e:	d097      	beq.n	8006650 <setCommand+0x53c>
 8006720:	2202      	movs	r2, #2
 8006722:	4964      	ldr	r1, [pc, #400]	; (80068b4 <setCommand+0x7a0>)
 8006724:	0020      	movs	r0, r4
 8006726:	f00e fa2b 	bl	8014b80 <strncmp>
 800672a:	2800      	cmp	r0, #0
 800672c:	d092      	beq.n	8006654 <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 800672e:	2205      	movs	r2, #5
 8006730:	4961      	ldr	r1, [pc, #388]	; (80068b8 <setCommand+0x7a4>)
 8006732:	0020      	movs	r0, r4
 8006734:	f00e fa24 	bl	8014b80 <strncmp>
 8006738:	2800      	cmp	r0, #0
 800673a:	d08d      	beq.n	8006658 <setCommand+0x544>
 800673c:	2202      	movs	r2, #2
 800673e:	495f      	ldr	r1, [pc, #380]	; (80068bc <setCommand+0x7a8>)
 8006740:	0020      	movs	r0, r4
 8006742:	f00e fa1d 	bl	8014b80 <strncmp>
 8006746:	2800      	cmp	r0, #0
 8006748:	d088      	beq.n	800665c <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800674a:	2205      	movs	r2, #5
 800674c:	495c      	ldr	r1, [pc, #368]	; (80068c0 <setCommand+0x7ac>)
 800674e:	0020      	movs	r0, r4
 8006750:	f00e fa16 	bl	8014b80 <strncmp>
 8006754:	2800      	cmp	r0, #0
 8006756:	d083      	beq.n	8006660 <setCommand+0x54c>
 8006758:	2202      	movs	r2, #2
 800675a:	495a      	ldr	r1, [pc, #360]	; (80068c4 <setCommand+0x7b0>)
 800675c:	0020      	movs	r0, r4
 800675e:	f00e fa0f 	bl	8014b80 <strncmp>
 8006762:	2800      	cmp	r0, #0
 8006764:	d100      	bne.n	8006768 <setCommand+0x654>
 8006766:	e77d      	b.n	8006664 <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006768:	2203      	movs	r2, #3
 800676a:	4957      	ldr	r1, [pc, #348]	; (80068c8 <setCommand+0x7b4>)
 800676c:	0020      	movs	r0, r4
 800676e:	f00e fa07 	bl	8014b80 <strncmp>
 8006772:	2800      	cmp	r0, #0
 8006774:	d100      	bne.n	8006778 <setCommand+0x664>
 8006776:	e777      	b.n	8006668 <setCommand+0x554>
 8006778:	2202      	movs	r2, #2
 800677a:	4954      	ldr	r1, [pc, #336]	; (80068cc <setCommand+0x7b8>)
 800677c:	0020      	movs	r0, r4
 800677e:	f00e f9ff 	bl	8014b80 <strncmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	d100      	bne.n	8006788 <setCommand+0x674>
 8006786:	e771      	b.n	800666c <setCommand+0x558>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 8006788:	2204      	movs	r2, #4
 800678a:	4951      	ldr	r1, [pc, #324]	; (80068d0 <setCommand+0x7bc>)
 800678c:	0020      	movs	r0, r4
 800678e:	f00e f9f7 	bl	8014b80 <strncmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	d100      	bne.n	8006798 <setCommand+0x684>
 8006796:	e76b      	b.n	8006670 <setCommand+0x55c>
 8006798:	2202      	movs	r2, #2
 800679a:	494e      	ldr	r1, [pc, #312]	; (80068d4 <setCommand+0x7c0>)
 800679c:	0020      	movs	r0, r4
 800679e:	f00e f9ef 	bl	8014b80 <strncmp>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d100      	bne.n	80067a8 <setCommand+0x694>
 80067a6:	e765      	b.n	8006674 <setCommand+0x560>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80067a8:	2204      	movs	r2, #4
 80067aa:	494b      	ldr	r1, [pc, #300]	; (80068d8 <setCommand+0x7c4>)
 80067ac:	0020      	movs	r0, r4
 80067ae:	f00e f9e7 	bl	8014b80 <strncmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d100      	bne.n	80067b8 <setCommand+0x6a4>
 80067b6:	e75f      	b.n	8006678 <setCommand+0x564>
 80067b8:	2202      	movs	r2, #2
 80067ba:	4948      	ldr	r1, [pc, #288]	; (80068dc <setCommand+0x7c8>)
 80067bc:	0020      	movs	r0, r4
 80067be:	f00e f9df 	bl	8014b80 <strncmp>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d100      	bne.n	80067c8 <setCommand+0x6b4>
 80067c6:	e759      	b.n	800667c <setCommand+0x568>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80067c8:	2205      	movs	r2, #5
 80067ca:	4945      	ldr	r1, [pc, #276]	; (80068e0 <setCommand+0x7cc>)
 80067cc:	0020      	movs	r0, r4
 80067ce:	f00e f9d7 	bl	8014b80 <strncmp>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d100      	bne.n	80067d8 <setCommand+0x6c4>
 80067d6:	e753      	b.n	8006680 <setCommand+0x56c>
 80067d8:	2202      	movs	r2, #2
 80067da:	4942      	ldr	r1, [pc, #264]	; (80068e4 <setCommand+0x7d0>)
 80067dc:	0020      	movs	r0, r4
 80067de:	f00e f9cf 	bl	8014b80 <strncmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d100      	bne.n	80067e8 <setCommand+0x6d4>
 80067e6:	e74d      	b.n	8006684 <setCommand+0x570>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80067e8:	2209      	movs	r2, #9
 80067ea:	493f      	ldr	r1, [pc, #252]	; (80068e8 <setCommand+0x7d4>)
 80067ec:	0020      	movs	r0, r4
 80067ee:	f00e f9c7 	bl	8014b80 <strncmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d100      	bne.n	80067f8 <setCommand+0x6e4>
 80067f6:	e747      	b.n	8006688 <setCommand+0x574>
 80067f8:	2202      	movs	r2, #2
 80067fa:	493c      	ldr	r1, [pc, #240]	; (80068ec <setCommand+0x7d8>)
 80067fc:	0020      	movs	r0, r4
 80067fe:	f00e f9bf 	bl	8014b80 <strncmp>
 8006802:	2800      	cmp	r0, #0
 8006804:	d100      	bne.n	8006808 <setCommand+0x6f4>
 8006806:	e741      	b.n	800668c <setCommand+0x578>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006808:	2207      	movs	r2, #7
 800680a:	4939      	ldr	r1, [pc, #228]	; (80068f0 <setCommand+0x7dc>)
 800680c:	0020      	movs	r0, r4
 800680e:	f00e f9b7 	bl	8014b80 <strncmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	d100      	bne.n	8006818 <setCommand+0x704>
 8006816:	e73b      	b.n	8006690 <setCommand+0x57c>
 8006818:	2202      	movs	r2, #2
 800681a:	4936      	ldr	r1, [pc, #216]	; (80068f4 <setCommand+0x7e0>)
 800681c:	0020      	movs	r0, r4
 800681e:	f00e f9af 	bl	8014b80 <strncmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	d100      	bne.n	8006828 <setCommand+0x714>
 8006826:	e735      	b.n	8006694 <setCommand+0x580>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006828:	2208      	movs	r2, #8
 800682a:	4933      	ldr	r1, [pc, #204]	; (80068f8 <setCommand+0x7e4>)
 800682c:	0020      	movs	r0, r4
 800682e:	f00e f9a7 	bl	8014b80 <strncmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	d100      	bne.n	8006838 <setCommand+0x724>
 8006836:	e72f      	b.n	8006698 <setCommand+0x584>
 8006838:	2202      	movs	r2, #2
 800683a:	4930      	ldr	r1, [pc, #192]	; (80068fc <setCommand+0x7e8>)
 800683c:	0020      	movs	r0, r4
 800683e:	f00e f99f 	bl	8014b80 <strncmp>
 8006842:	2800      	cmp	r0, #0
 8006844:	d100      	bne.n	8006848 <setCommand+0x734>
 8006846:	e729      	b.n	800669c <setCommand+0x588>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006848:	2208      	movs	r2, #8
 800684a:	492d      	ldr	r1, [pc, #180]	; (8006900 <setCommand+0x7ec>)
 800684c:	0020      	movs	r0, r4
 800684e:	f00e f997 	bl	8014b80 <strncmp>
 8006852:	2800      	cmp	r0, #0
 8006854:	d100      	bne.n	8006858 <setCommand+0x744>
 8006856:	e723      	b.n	80066a0 <setCommand+0x58c>
 8006858:	2202      	movs	r2, #2
 800685a:	492a      	ldr	r1, [pc, #168]	; (8006904 <setCommand+0x7f0>)
 800685c:	0020      	movs	r0, r4
 800685e:	f00e f98f 	bl	8014b80 <strncmp>
			temp82 =DECEMBER;
 8006862:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006864:	2800      	cmp	r0, #0
 8006866:	d100      	bne.n	800686a <setCommand+0x756>
 8006868:	e6e4      	b.n	8006634 <setCommand+0x520>
 800686a:	e4b5      	b.n	80061d8 <setCommand+0xc4>
			temp81 =TUESDAY;
 800686c:	2302      	movs	r3, #2
 800686e:	4698      	mov	r8, r3
 8006870:	e73d      	b.n	80066ee <setCommand+0x5da>
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	20006e50 	.word	0x20006e50
 8006878:	20001314 	.word	0x20001314
 800687c:	2000131c 	.word	0x2000131c
 8006880:	20001320 	.word	0x20001320
 8006884:	20001324 	.word	0x20001324
 8006888:	0801a81c 	.word	0x0801a81c
 800688c:	0801a824 	.word	0x0801a824
 8006890:	0801a82c 	.word	0x0801a82c
 8006894:	0801a838 	.word	0x0801a838
 8006898:	0801a844 	.word	0x0801a844
 800689c:	0801a84c 	.word	0x0801a84c
 80068a0:	0801a858 	.word	0x0801a858
 80068a4:	0801a8f4 	.word	0x0801a8f4
 80068a8:	fffff830 	.word	0xfffff830
 80068ac:	0801a860 	.word	0x0801a860
 80068b0:	0801a864 	.word	0x0801a864
 80068b4:	0801a870 	.word	0x0801a870
 80068b8:	0801a874 	.word	0x0801a874
 80068bc:	0801a87c 	.word	0x0801a87c
 80068c0:	0801a880 	.word	0x0801a880
 80068c4:	0801a888 	.word	0x0801a888
 80068c8:	0801a88c 	.word	0x0801a88c
 80068cc:	0801a890 	.word	0x0801a890
 80068d0:	0801a894 	.word	0x0801a894
 80068d4:	0801a89c 	.word	0x0801a89c
 80068d8:	0801a8a0 	.word	0x0801a8a0
 80068dc:	0801a8a8 	.word	0x0801a8a8
 80068e0:	0801a8ac 	.word	0x0801a8ac
 80068e4:	0801a8b4 	.word	0x0801a8b4
 80068e8:	0801a8b8 	.word	0x0801a8b8
 80068ec:	0801a8c4 	.word	0x0801a8c4
 80068f0:	0801a8c8 	.word	0x0801a8c8
 80068f4:	0801a8d0 	.word	0x0801a8d0
 80068f8:	0801a8d4 	.word	0x0801a8d4
 80068fc:	0801a8e0 	.word	0x0801a8e0
 8006900:	0801a8e4 	.word	0x0801a8e4
 8006904:	0801a8f0 	.word	0x0801a8f0
			temp81 =WEDNESDAY;
 8006908:	2303      	movs	r3, #3
 800690a:	4698      	mov	r8, r3
 800690c:	e6ef      	b.n	80066ee <setCommand+0x5da>
			temp81 =THURSDAY;
 800690e:	2304      	movs	r3, #4
 8006910:	4698      	mov	r8, r3
 8006912:	e6ec      	b.n	80066ee <setCommand+0x5da>
			temp81 =FRIDAY;
 8006914:	2305      	movs	r3, #5
 8006916:	4698      	mov	r8, r3
 8006918:	e6e9      	b.n	80066ee <setCommand+0x5da>
			temp81 =SATURDAY;
 800691a:	2306      	movs	r3, #6
 800691c:	4698      	mov	r8, r3
 800691e:	e6e6      	b.n	80066ee <setCommand+0x5da>
			temp81 =SUNDAY;
 8006920:	2307      	movs	r3, #7
 8006922:	4698      	mov	r8, r3
 8006924:	e6e3      	b.n	80066ee <setCommand+0x5da>
 8006926:	46c0      	nop			; (mov r8, r8)

08006928 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006928:	b530      	push	{r4, r5, lr}
 800692a:	b083      	sub	sp, #12
 800692c:	0005      	movs	r5, r0
 800692e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006930:	2300      	movs	r3, #0
 8006932:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006934:	aa01      	add	r2, sp, #4
 8006936:	2101      	movs	r1, #1
 8006938:	f008 f996 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800693c:	2300      	movs	r3, #0
 800693e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006940:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006942:	2b70      	cmp	r3, #112	; 0x70
 8006944:	d007      	beq.n	8006956 <removebuttonCommand+0x2e>
	result =RemovePortButton(port);
 8006946:	0020      	movs	r0, r4
 8006948:	f006 fb54 	bl	800cff4 <RemovePortButton>
	if(result == BOS_OK){
 800694c:	2800      	cmp	r0, #0
 800694e:	d007      	beq.n	8006960 <removebuttonCommand+0x38>
}
 8006950:	2000      	movs	r0, #0
 8006952:	b003      	add	sp, #12
 8006954:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006956:	3001      	adds	r0, #1
 8006958:	f00d fc0f 	bl	801417a <atol>
 800695c:	b2c4      	uxtb	r4, r0
 800695e:	e7f2      	b.n	8006946 <removebuttonCommand+0x1e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006960:	0023      	movs	r3, r4
 8006962:	0022      	movs	r2, r4
 8006964:	4902      	ldr	r1, [pc, #8]	; (8006970 <removebuttonCommand+0x48>)
 8006966:	0028      	movs	r0, r5
 8006968:	f00e f8c6 	bl	8014af8 <sprintf>
 800696c:	e7f0      	b.n	8006950 <removebuttonCommand+0x28>
 800696e:	46c0      	nop			; (mov r8, r8)
 8006970:	0801a5b4 	.word	0x0801a5b4

08006974 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006976:	b087      	sub	sp, #28
 8006978:	9003      	str	r0, [sp, #12]
 800697a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800697c:	2300      	movs	r3, #0
 800697e:	9305      	str	r3, [sp, #20]
 8006980:	9304      	str	r3, [sp, #16]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006982:	aa05      	add	r2, sp, #20
 8006984:	2101      	movs	r1, #1
 8006986:	0030      	movs	r0, r6
 8006988:	f008 f96e 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800698c:	0004      	movs	r4, r0
 800698e:	4b23      	ldr	r3, [pc, #140]	; (8006a1c <addbuttonCommand+0xa8>)
 8006990:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006992:	9f05      	ldr	r7, [sp, #20]
 8006994:	003a      	movs	r2, r7
 8006996:	4922      	ldr	r1, [pc, #136]	; (8006a20 <addbuttonCommand+0xac>)
 8006998:	f00e f8f2 	bl	8014b80 <strncmp>
		type =MOMENTARY_NO;
 800699c:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 800699e:	2800      	cmp	r0, #0
 80069a0:	d017      	beq.n	80069d2 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 80069a2:	003a      	movs	r2, r7
 80069a4:	491f      	ldr	r1, [pc, #124]	; (8006a24 <addbuttonCommand+0xb0>)
 80069a6:	0020      	movs	r0, r4
 80069a8:	f00e f8ea 	bl	8014b80 <strncmp>
		type =MOMENTARY_NC;
 80069ac:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d00f      	beq.n	80069d2 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069b2:	003a      	movs	r2, r7
 80069b4:	491c      	ldr	r1, [pc, #112]	; (8006a28 <addbuttonCommand+0xb4>)
 80069b6:	0020      	movs	r0, r4
 80069b8:	f00e f8e2 	bl	8014b80 <strncmp>
		type =ONOFF_NO;
 80069bc:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069be:	2800      	cmp	r0, #0
 80069c0:	d007      	beq.n	80069d2 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80069c2:	003a      	movs	r2, r7
 80069c4:	4919      	ldr	r1, [pc, #100]	; (8006a2c <addbuttonCommand+0xb8>)
 80069c6:	0020      	movs	r0, r4
 80069c8:	f00e f8da 	bl	8014b80 <strncmp>
		type =ONOFF_NC;
 80069cc:	4245      	negs	r5, r0
 80069ce:	4145      	adcs	r5, r0
 80069d0:	00ad      	lsls	r5, r5, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80069d2:	aa04      	add	r2, sp, #16
 80069d4:	2102      	movs	r1, #2
 80069d6:	0030      	movs	r0, r6
 80069d8:	f008 f946 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80069dc:	2300      	movs	r3, #0
 80069de:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 80069e0:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 80069e2:	2b70      	cmp	r3, #112	; 0x70
 80069e4:	d008      	beq.n	80069f8 <addbuttonCommand+0x84>
	result =AddPortButton(type,port);
 80069e6:	0021      	movs	r1, r4
 80069e8:	0028      	movs	r0, r5
 80069ea:	f006 fa71 	bl	800ced0 <AddPortButton>
	if(result == BOS_OK){
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d007      	beq.n	8006a02 <addbuttonCommand+0x8e>
}
 80069f2:	2000      	movs	r0, #0
 80069f4:	b007      	add	sp, #28
 80069f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 80069f8:	3001      	adds	r0, #1
 80069fa:	f00d fbbe 	bl	801417a <atol>
 80069fe:	b2c4      	uxtb	r4, r0
 8006a00:	e7f1      	b.n	80069e6 <addbuttonCommand+0x72>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006a02:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <addbuttonCommand+0xa8>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	2300      	movs	r3, #0
 8006a08:	9905      	ldr	r1, [sp, #20]
 8006a0a:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006a0c:	9400      	str	r4, [sp, #0]
 8006a0e:	0023      	movs	r3, r4
 8006a10:	4907      	ldr	r1, [pc, #28]	; (8006a30 <addbuttonCommand+0xbc>)
 8006a12:	9803      	ldr	r0, [sp, #12]
 8006a14:	f00e f870 	bl	8014af8 <sprintf>
 8006a18:	e7eb      	b.n	80069f2 <addbuttonCommand+0x7e>
 8006a1a:	46c0      	nop			; (mov r8, r8)
 8006a1c:	20001304 	.word	0x20001304
 8006a20:	08019e74 	.word	0x08019e74
 8006a24:	08019e84 	.word	0x08019e84
 8006a28:	08019e94 	.word	0x08019e94
 8006a2c:	08019ea0 	.word	0x08019ea0
 8006a30:	08019eac 	.word	0x08019eac

08006a34 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a36:	46d6      	mov	lr, sl
 8006a38:	464f      	mov	r7, r9
 8006a3a:	4646      	mov	r6, r8
 8006a3c:	b5c0      	push	{r6, r7, lr}
 8006a3e:	b098      	sub	sp, #96	; 0x60
 8006a40:	9007      	str	r0, [sp, #28]
 8006a42:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006a44:	2300      	movs	r3, #0
 8006a46:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a48:	9316      	str	r3, [sp, #88]	; 0x58
 8006a4a:	9315      	str	r3, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006a4c:	9314      	str	r3, [sp, #80]	; 0x50
 8006a4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a50:	9312      	str	r3, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006a52:	9311      	str	r3, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a54:	220a      	movs	r2, #10
 8006a56:	2100      	movs	r1, #0
 8006a58:	a80e      	add	r0, sp, #56	; 0x38
 8006a5a:	f00d fe21 	bl	80146a0 <memset>
 8006a5e:	220a      	movs	r2, #10
 8006a60:	2100      	movs	r1, #0
 8006a62:	a80b      	add	r0, sp, #44	; 0x2c
 8006a64:	f00d fe1c 	bl	80146a0 <memset>
 8006a68:	220a      	movs	r2, #10
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	a808      	add	r0, sp, #32
 8006a6e:	f00d fe17 	bl	80146a0 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a72:	aa17      	add	r2, sp, #92	; 0x5c
 8006a74:	2101      	movs	r1, #1
 8006a76:	0020      	movs	r0, r4
 8006a78:	f008 f8f6 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006a80:	2200      	movs	r2, #0
 8006a82:	9206      	str	r2, [sp, #24]
	if(pcParameterString1[0] == 'P'){
 8006a84:	2b50      	cmp	r3, #80	; 0x50
 8006a86:	d100      	bne.n	8006a8a <scastCommand+0x56>
 8006a88:	e06f      	b.n	8006b6a <scastCommand+0x136>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006a8a:	aa16      	add	r2, sp, #88	; 0x58
 8006a8c:	2102      	movs	r1, #2
 8006a8e:	0020      	movs	r0, r4
 8006a90:	f008 f8ea 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006a94:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006a96:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006a98:	a80e      	add	r0, sp, #56	; 0x38
 8006a9a:	f00e f882 	bl	8014ba2 <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006a9e:	a80e      	add	r0, sp, #56	; 0x38
 8006aa0:	f7fd fbae 	bl	8004200 <GetID>
 8006aa4:	b2c3      	uxtb	r3, r0
 8006aa6:	4698      	mov	r8, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006aa8:	aa15      	add	r2, sp, #84	; 0x54
 8006aaa:	2103      	movs	r1, #3
 8006aac:	0020      	movs	r0, r4
 8006aae:	f008 f8db 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006aba:	2b70      	cmp	r3, #112	; 0x70
 8006abc:	d05b      	beq.n	8006b76 <scastCommand+0x142>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006abe:	aa14      	add	r2, sp, #80	; 0x50
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	f008 f8d0 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006ac8:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006aca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006acc:	a80b      	add	r0, sp, #44	; 0x2c
 8006ace:	f00e f868 	bl	8014ba2 <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006ad2:	a80b      	add	r0, sp, #44	; 0x2c
 8006ad4:	f7fd fb94 	bl	8004200 <GetID>
 8006ad8:	b2c3      	uxtb	r3, r0
 8006ada:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006adc:	aa13      	add	r2, sp, #76	; 0x4c
 8006ade:	2105      	movs	r1, #5
 8006ae0:	0020      	movs	r0, r4
 8006ae2:	f008 f8c1 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006ae6:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006ae8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006aea:	0032      	movs	r2, r6
 8006aec:	492c      	ldr	r1, [pc, #176]	; (8006ba0 <scastCommand+0x16c>)
 8006aee:	f00e f847 	bl	8014b80 <strncmp>
		direction =FORWARD;
 8006af2:	2700      	movs	r7, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006af4:	2800      	cmp	r0, #0
 8006af6:	d00f      	beq.n	8006b18 <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006af8:	0032      	movs	r2, r6
 8006afa:	492a      	ldr	r1, [pc, #168]	; (8006ba4 <scastCommand+0x170>)
 8006afc:	0028      	movs	r0, r5
 8006afe:	f00e f83f 	bl	8014b80 <strncmp>
		direction =BACKWARD;
 8006b02:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006b04:	2800      	cmp	r0, #0
 8006b06:	d007      	beq.n	8006b18 <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006b08:	0032      	movs	r2, r6
 8006b0a:	4927      	ldr	r1, [pc, #156]	; (8006ba8 <scastCommand+0x174>)
 8006b0c:	0028      	movs	r0, r5
 8006b0e:	f00e f837 	bl	8014b80 <strncmp>
		direction =BIDIRECTIONAL;
 8006b12:	4247      	negs	r7, r0
 8006b14:	4147      	adcs	r7, r0
 8006b16:	007f      	lsls	r7, r7, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006b18:	0032      	movs	r2, r6
 8006b1a:	0029      	movs	r1, r5
 8006b1c:	a808      	add	r0, sp, #32
 8006b1e:	f00e f840 	bl	8014ba2 <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006b22:	aa12      	add	r2, sp, #72	; 0x48
 8006b24:	2106      	movs	r1, #6
 8006b26:	0020      	movs	r0, r4
 8006b28:	f008 f89e 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006b2c:	f00d fb25 	bl	801417a <atol>
 8006b30:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006b32:	aa11      	add	r2, sp, #68	; 0x44
 8006b34:	2107      	movs	r1, #7
 8006b36:	0020      	movs	r0, r4
 8006b38:	f008 f896 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006b3c:	f00d fb1d 	bl	801417a <atol>
 8006b40:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006b42:	2300      	movs	r3, #0
 8006b44:	9303      	str	r3, [sp, #12]
 8006b46:	9002      	str	r0, [sp, #8]
 8006b48:	9501      	str	r5, [sp, #4]
 8006b4a:	9700      	str	r7, [sp, #0]
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	4652      	mov	r2, sl
 8006b50:	4641      	mov	r1, r8
 8006b52:	9806      	ldr	r0, [sp, #24]
 8006b54:	f001 fb2a 	bl	80081ac <StartScastDMAStream>
	if(result == BOS_OK){
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d012      	beq.n	8006b82 <scastCommand+0x14e>
}
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	b018      	add	sp, #96	; 0x60
 8006b60:	bc1c      	pop	{r2, r3, r4}
 8006b62:	4690      	mov	r8, r2
 8006b64:	4699      	mov	r9, r3
 8006b66:	46a2      	mov	sl, r4
 8006b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	f00d fb05 	bl	801417a <atol>
 8006b70:	b2c3      	uxtb	r3, r0
 8006b72:	9306      	str	r3, [sp, #24]
 8006b74:	e789      	b.n	8006a8a <scastCommand+0x56>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006b76:	3001      	adds	r0, #1
 8006b78:	f00d faff 	bl	801417a <atol>
 8006b7c:	b2c3      	uxtb	r3, r0
 8006b7e:	469a      	mov	sl, r3
 8006b80:	e79d      	b.n	8006abe <scastCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006b82:	9404      	str	r4, [sp, #16]
 8006b84:	9503      	str	r5, [sp, #12]
 8006b86:	ab0b      	add	r3, sp, #44	; 0x2c
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	4653      	mov	r3, sl
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8006b90:	9300      	str	r3, [sp, #0]
 8006b92:	9b06      	ldr	r3, [sp, #24]
 8006b94:	aa08      	add	r2, sp, #32
 8006b96:	4905      	ldr	r1, [pc, #20]	; (8006bac <scastCommand+0x178>)
 8006b98:	9807      	ldr	r0, [sp, #28]
 8006b9a:	f00d ffad 	bl	8014af8 <sprintf>
 8006b9e:	e7dd      	b.n	8006b5c <scastCommand+0x128>
 8006ba0:	0801a5fc 	.word	0x0801a5fc
 8006ba4:	0801a604 	.word	0x0801a604
 8006ba8:	0801a610 	.word	0x0801a610
 8006bac:	0801a620 	.word	0x0801a620

08006bb0 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	0004      	movs	r4, r0
	if(N > 1)
 8006bb6:	4b26      	ldr	r3, [pc, #152]	; (8006c50 <infoCommand+0xa0>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006bba:	2600      	movs	r6, #0
	if(N > 1)
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d831      	bhi.n	8006c24 <infoCommand+0x74>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006bc0:	4b23      	ldr	r3, [pc, #140]	; (8006c50 <infoCommand+0xa0>)
 8006bc2:	781a      	ldrb	r2, [r3, #0]
 8006bc4:	4923      	ldr	r1, [pc, #140]	; (8006c54 <infoCommand+0xa4>)
 8006bc6:	0020      	movs	r0, r4
 8006bc8:	f00d ff96 	bl	8014af8 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006bcc:	0020      	movs	r0, r4
 8006bce:	f7f9 faa3 	bl	8000118 <strlen>
 8006bd2:	b282      	uxth	r2, r0
 8006bd4:	4d20      	ldr	r5, [pc, #128]	; (8006c58 <infoCommand+0xa8>)
 8006bd6:	7828      	ldrb	r0, [r5, #0]
 8006bd8:	2701      	movs	r7, #1
 8006bda:	427f      	negs	r7, r7
 8006bdc:	9700      	str	r7, [sp, #0]
 8006bde:	2332      	movs	r3, #50	; 0x32
 8006be0:	0021      	movs	r1, r4
 8006be2:	f007 fd81 	bl	800e6e8 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006be6:	2213      	movs	r2, #19
 8006be8:	491c      	ldr	r1, [pc, #112]	; (8006c5c <infoCommand+0xac>)
 8006bea:	0020      	movs	r0, r4
 8006bec:	f00d fd4f 	bl	801468e <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006bf0:	0020      	movs	r0, r4
 8006bf2:	f7f9 fa91 	bl	8000118 <strlen>
 8006bf6:	b282      	uxth	r2, r0
 8006bf8:	7828      	ldrb	r0, [r5, #0]
 8006bfa:	9700      	str	r7, [sp, #0]
 8006bfc:	2332      	movs	r3, #50	; 0x32
 8006bfe:	0021      	movs	r1, r4
 8006c00:	f007 fd72 	bl	800e6e8 <writePxMutex>
	DisplayTopology(PcPort);
 8006c04:	7828      	ldrb	r0, [r5, #0]
 8006c06:	f7fd f857 	bl	8003cb8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006c0a:	7828      	ldrb	r0, [r5, #0]
 8006c0c:	f7fd f924 	bl	8003e58 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006c10:	2e02      	cmp	r6, #2
 8006c12:	d00b      	beq.n	8006c2c <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8006c14:	2202      	movs	r2, #2
 8006c16:	4912      	ldr	r1, [pc, #72]	; (8006c60 <infoCommand+0xb0>)
 8006c18:	0020      	movs	r0, r4
 8006c1a:	f00d fd38 	bl	801468e <memcpy>
}
 8006c1e:	2000      	movs	r0, #0
 8006c20:	b003      	add	sp, #12
 8006c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006c24:	f007 fe10 	bl	800e848 <ReadPortsDir>
 8006c28:	0006      	movs	r6, r0
 8006c2a:	e7c9      	b.n	8006bc0 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006c2c:	2244      	movs	r2, #68	; 0x44
 8006c2e:	490d      	ldr	r1, [pc, #52]	; (8006c64 <infoCommand+0xb4>)
 8006c30:	0020      	movs	r0, r4
 8006c32:	f00d fd2c 	bl	801468e <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006c36:	0020      	movs	r0, r4
 8006c38:	f7f9 fa6e 	bl	8000118 <strlen>
 8006c3c:	b282      	uxth	r2, r0
 8006c3e:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <infoCommand+0xa8>)
 8006c40:	7818      	ldrb	r0, [r3, #0]
 8006c42:	003b      	movs	r3, r7
 8006c44:	9700      	str	r7, [sp, #0]
 8006c46:	3333      	adds	r3, #51	; 0x33
 8006c48:	0021      	movs	r1, r4
 8006c4a:	f007 fd4d 	bl	800e6e8 <writePxMutex>
 8006c4e:	e7e1      	b.n	8006c14 <infoCommand+0x64>
 8006c50:	20000044 	.word	0x20000044
 8006c54:	0801a3b8 	.word	0x0801a3b8
 8006c58:	20000ae8 	.word	0x20000ae8
 8006c5c:	0801a3d4 	.word	0x0801a3d4
 8006c60:	080190cc 	.word	0x080190cc
 8006c64:	0801a3e8 	.word	0x0801a3e8

08006c68 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c68:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	f7fd f968 	bl	8003f40 <DisplayModuleStatus>
}
 8006c70:	2000      	movs	r0, #0
 8006c72:	bd10      	pop	{r4, pc}

08006c74 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c76:	46ce      	mov	lr, r9
 8006c78:	b500      	push	{lr}
 8006c7a:	b090      	sub	sp, #64	; 0x40
 8006c7c:	9000      	str	r0, [sp, #0]
 8006c7e:	0015      	movs	r5, r2
 8006c80:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006c82:	2227      	movs	r2, #39	; 0x27
 8006c84:	2100      	movs	r1, #0
 8006c86:	a806      	add	r0, sp, #24
 8006c88:	f00d fd0a 	bl	80146a0 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	2100      	movs	r1, #0
 8006c90:	a803      	add	r0, sp, #12
 8006c92:	f00d fd05 	bl	80146a0 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c96:	4c56      	ldr	r4, [pc, #344]	; (8006df0 <groupCommand+0x17c>)
 8006c98:	0022      	movs	r2, r4
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	0028      	movs	r0, r5
 8006c9e:	f007 ffe3 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006ca2:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006ca4:	6822      	ldr	r2, [r4, #0]
 8006ca6:	a803      	add	r0, sp, #12
 8006ca8:	f00d ff7b 	bl	8014ba2 <strncpy>
 8006cac:	4c51      	ldr	r4, [pc, #324]	; (8006df4 <groupCommand+0x180>)
 8006cae:	0027      	movs	r7, r4
 8006cb0:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006cb2:	0021      	movs	r1, r4
 8006cb4:	a803      	add	r0, sp, #12
 8006cb6:	f7f9 fa25 	bl	8000104 <strcmp>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d018      	beq.n	8006cf0 <groupCommand+0x7c>
 8006cbe:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006cc0:	42bc      	cmp	r4, r7
 8006cc2:	d1f6      	bne.n	8006cb2 <groupCommand+0x3e>
	type =1;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4699      	mov	r9, r3
	count =2;
 8006cc8:	4b4b      	ldr	r3, [pc, #300]	; (8006df8 <groupCommand+0x184>)
 8006cca:	2202      	movs	r2, #2
 8006ccc:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006cce:	3208      	adds	r2, #8
 8006cd0:	494a      	ldr	r1, [pc, #296]	; (8006dfc <groupCommand+0x188>)
 8006cd2:	9800      	ldr	r0, [sp, #0]
 8006cd4:	f00d fcdb 	bl	801468e <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006cd8:	4a49      	ldr	r2, [pc, #292]	; (8006e00 <groupCommand+0x18c>)
 8006cda:	2102      	movs	r1, #2
 8006cdc:	9801      	ldr	r0, [sp, #4]
 8006cde:	f007 ffc3 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006ce2:	4b48      	ldr	r3, [pc, #288]	; (8006e04 <groupCommand+0x190>)
 8006ce4:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d05e      	beq.n	8006da8 <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006cea:	4f45      	ldr	r7, [pc, #276]	; (8006e00 <groupCommand+0x18c>)
		if(count > 2)
 8006cec:	4e42      	ldr	r6, [pc, #264]	; (8006df8 <groupCommand+0x184>)
 8006cee:	e012      	b.n	8006d16 <groupCommand+0xa2>
			type =0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4699      	mov	r9, r3
 8006cf4:	e7e8      	b.n	8006cc8 <groupCommand+0x54>
		strcat((char* )pcWriteBuffer,module);
 8006cf6:	a906      	add	r1, sp, #24
 8006cf8:	9800      	ldr	r0, [sp, #0]
 8006cfa:	f00d ff1d 	bl	8014b38 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006cfe:	3401      	adds	r4, #1
 8006d00:	b261      	sxtb	r1, r4
 8006d02:	4b3d      	ldr	r3, [pc, #244]	; (8006df8 <groupCommand+0x184>)
 8006d04:	7019      	strb	r1, [r3, #0]
 8006d06:	4a3e      	ldr	r2, [pc, #248]	; (8006e00 <groupCommand+0x18c>)
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	f007 ffad 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006d0e:	4b3d      	ldr	r3, [pc, #244]	; (8006e04 <groupCommand+0x190>)
 8006d10:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d048      	beq.n	8006da8 <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006d16:	683d      	ldr	r5, [r7, #0]
 8006d18:	ac06      	add	r4, sp, #24
 8006d1a:	002a      	movs	r2, r5
 8006d1c:	0001      	movs	r1, r0
 8006d1e:	0020      	movs	r0, r4
 8006d20:	f00d ff3f 	bl	8014ba2 <strncpy>
		module[xParameterStringLength] ='\0';
 8006d24:	2300      	movs	r3, #0
 8006d26:	5563      	strb	r3, [r4, r5]
		modID =GetID(module);
 8006d28:	0020      	movs	r0, r4
 8006d2a:	f7fd fa69 	bl	8004200 <GetID>
		if(modID < 0)
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	db30      	blt.n	8006d94 <groupCommand+0x120>
		result =AddModuleToGroup(modID,alias);
 8006d32:	b2c0      	uxtb	r0, r0
 8006d34:	a903      	add	r1, sp, #12
 8006d36:	f7fd fb2f 	bl	8004398 <AddModuleToGroup>
		if(result != BOS_OK)
 8006d3a:	2800      	cmp	r0, #0
 8006d3c:	d146      	bne.n	8006dcc <groupCommand+0x158>
		if(count > 2)
 8006d3e:	2400      	movs	r4, #0
 8006d40:	5734      	ldrsb	r4, [r6, r4]
 8006d42:	2c02      	cmp	r4, #2
 8006d44:	ddd7      	ble.n	8006cf6 <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006d46:	9d00      	ldr	r5, [sp, #0]
 8006d48:	0028      	movs	r0, r5
 8006d4a:	f7f9 f9e5 	bl	8000118 <strlen>
 8006d4e:	46ac      	mov	ip, r5
 8006d50:	4460      	add	r0, ip
 8006d52:	2203      	movs	r2, #3
 8006d54:	492c      	ldr	r1, [pc, #176]	; (8006e08 <groupCommand+0x194>)
 8006d56:	f00d fc9a 	bl	801468e <memcpy>
 8006d5a:	e7cc      	b.n	8006cf6 <groupCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006d5c:	aa03      	add	r2, sp, #12
 8006d5e:	492b      	ldr	r1, [pc, #172]	; (8006e0c <groupCommand+0x198>)
 8006d60:	9800      	ldr	r0, [sp, #0]
 8006d62:	f00d fec9 	bl	8014af8 <sprintf>
 8006d66:	e01a      	b.n	8006d9e <groupCommand+0x12a>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d68:	aa03      	add	r2, sp, #12
 8006d6a:	4929      	ldr	r1, [pc, #164]	; (8006e10 <groupCommand+0x19c>)
 8006d6c:	a806      	add	r0, sp, #24
 8006d6e:	f00d fec3 	bl	8014af8 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006d72:	a906      	add	r1, sp, #24
 8006d74:	9800      	ldr	r0, [sp, #0]
 8006d76:	f00d fedf 	bl	8014b38 <strcat>
 8006d7a:	e010      	b.n	8006d9e <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006d7c:	aa03      	add	r2, sp, #12
 8006d7e:	4925      	ldr	r1, [pc, #148]	; (8006e14 <groupCommand+0x1a0>)
 8006d80:	9800      	ldr	r0, [sp, #0]
 8006d82:	f00d feb9 	bl	8014af8 <sprintf>
 8006d86:	e00a      	b.n	8006d9e <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006d88:	aa03      	add	r2, sp, #12
 8006d8a:	4923      	ldr	r1, [pc, #140]	; (8006e18 <groupCommand+0x1a4>)
 8006d8c:	9800      	ldr	r0, [sp, #0]
 8006d8e:	f00d feb3 	bl	8014af8 <sprintf>
 8006d92:	e004      	b.n	8006d9e <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006d94:	aa06      	add	r2, sp, #24
 8006d96:	4921      	ldr	r1, [pc, #132]	; (8006e1c <groupCommand+0x1a8>)
 8006d98:	9800      	ldr	r0, [sp, #0]
 8006d9a:	f00d fead 	bl	8014af8 <sprintf>
}
 8006d9e:	2000      	movs	r0, #0
 8006da0:	b010      	add	sp, #64	; 0x40
 8006da2:	bc04      	pop	{r2}
 8006da4:	4691      	mov	r9, r2
 8006da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006da8:	4b13      	ldr	r3, [pc, #76]	; (8006df8 <groupCommand+0x184>)
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d0d4      	beq.n	8006d5c <groupCommand+0xe8>
	else if(result == BOS_OK && type){
 8006db2:	464b      	mov	r3, r9
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d1d7      	bne.n	8006d68 <groupCommand+0xf4>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006db8:	aa03      	add	r2, sp, #12
 8006dba:	4919      	ldr	r1, [pc, #100]	; (8006e20 <groupCommand+0x1ac>)
 8006dbc:	a806      	add	r0, sp, #24
 8006dbe:	f00d fe9b 	bl	8014af8 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006dc2:	a906      	add	r1, sp, #24
 8006dc4:	9800      	ldr	r0, [sp, #0]
 8006dc6:	f00d feb7 	bl	8014b38 <strcat>
 8006dca:	e7e8      	b.n	8006d9e <groupCommand+0x12a>
	else if(count == 2)
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <groupCommand+0x184>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	b25b      	sxtb	r3, r3
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d0c2      	beq.n	8006d5c <groupCommand+0xe8>
	else if(result == BOS_ERR_Keyword)
 8006dd6:	2806      	cmp	r0, #6
 8006dd8:	d0d0      	beq.n	8006d7c <groupCommand+0x108>
	else if(result == BOS_ERR_ExistingAlias)
 8006dda:	2807      	cmp	r0, #7
 8006ddc:	d0d4      	beq.n	8006d88 <groupCommand+0x114>
	else if(result == BOS_ERR_ExistingCmd)
 8006dde:	2808      	cmp	r0, #8
 8006de0:	d1dd      	bne.n	8006d9e <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006de2:	aa03      	add	r2, sp, #12
 8006de4:	490f      	ldr	r1, [pc, #60]	; (8006e24 <groupCommand+0x1b0>)
 8006de6:	9800      	ldr	r0, [sp, #0]
 8006de8:	f00d fe86 	bl	8014af8 <sprintf>
 8006dec:	e7d7      	b.n	8006d9e <groupCommand+0x12a>
 8006dee:	46c0      	nop			; (mov r8, r8)
 8006df0:	20001334 	.word	0x20001334
 8006df4:	20000ed0 	.word	0x20000ed0
 8006df8:	200012fa 	.word	0x200012fa
 8006dfc:	0801a1d8 	.word	0x0801a1d8
 8006e00:	20001328 	.word	0x20001328
 8006e04:	200012fc 	.word	0x200012fc
 8006e08:	0801a1e4 	.word	0x0801a1e4
 8006e0c:	0801a1e8 	.word	0x0801a1e8
 8006e10:	0801a214 	.word	0x0801a214
 8006e14:	0801a250 	.word	0x0801a250
 8006e18:	0801a290 	.word	0x0801a290
 8006e1c:	0801a304 	.word	0x0801a304
 8006e20:	0801a230 	.word	0x0801a230
 8006e24:	0801a2c4 	.word	0x0801a2c4

08006e28 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	0004      	movs	r4, r0
 8006e2c:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e2e:	4d1c      	ldr	r5, [pc, #112]	; (8006ea0 <nameCommand+0x78>)
 8006e30:	002a      	movs	r2, r5
 8006e32:	2101      	movs	r1, #1
 8006e34:	f007 ff18 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006e38:	0001      	movs	r1, r0
 8006e3a:	4b1a      	ldr	r3, [pc, #104]	; (8006ea4 <nameCommand+0x7c>)
 8006e3c:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	dd01      	ble.n	8006e48 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006e44:	2300      	movs	r3, #0
 8006e46:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006e48:	4b17      	ldr	r3, [pc, #92]	; (8006ea8 <nameCommand+0x80>)
 8006e4a:	7818      	ldrb	r0, [r3, #0]
 8006e4c:	f7fd fa3c 	bl	80042c8 <NameModule>
	if(result == BOS_OK)
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d007      	beq.n	8006e64 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006e54:	2806      	cmp	r0, #6
 8006e56:	d00e      	beq.n	8006e76 <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 8006e58:	2807      	cmp	r0, #7
 8006e5a:	d013      	beq.n	8006e84 <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 8006e5c:	2808      	cmp	r0, #8
 8006e5e:	d018      	beq.n	8006e92 <nameCommand+0x6a>
}
 8006e60:	2000      	movs	r0, #0
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <nameCommand+0x7c>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a0f      	ldr	r2, [pc, #60]	; (8006ea8 <nameCommand+0x80>)
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	490f      	ldr	r1, [pc, #60]	; (8006eac <nameCommand+0x84>)
 8006e6e:	0020      	movs	r0, r4
 8006e70:	f00d fe42 	bl	8014af8 <sprintf>
 8006e74:	e7f4      	b.n	8006e60 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <nameCommand+0x7c>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	490d      	ldr	r1, [pc, #52]	; (8006eb0 <nameCommand+0x88>)
 8006e7c:	0020      	movs	r0, r4
 8006e7e:	f00d fe3b 	bl	8014af8 <sprintf>
 8006e82:	e7ed      	b.n	8006e60 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006e84:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <nameCommand+0x7c>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	490a      	ldr	r1, [pc, #40]	; (8006eb4 <nameCommand+0x8c>)
 8006e8a:	0020      	movs	r0, r4
 8006e8c:	f00d fe34 	bl	8014af8 <sprintf>
 8006e90:	e7e6      	b.n	8006e60 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006e92:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <nameCommand+0x7c>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4908      	ldr	r1, [pc, #32]	; (8006eb8 <nameCommand+0x90>)
 8006e98:	0020      	movs	r0, r4
 8006e9a:	f00d fe2d 	bl	8014af8 <sprintf>
 8006e9e:	e7df      	b.n	8006e60 <nameCommand+0x38>
 8006ea0:	20001330 	.word	0x20001330
 8006ea4:	20001300 	.word	0x20001300
 8006ea8:	200010ea 	.word	0x200010ea
 8006eac:	0801a450 	.word	0x0801a450
 8006eb0:	0801a250 	.word	0x0801a250
 8006eb4:	0801a290 	.word	0x0801a290
 8006eb8:	0801a2c4 	.word	0x0801a2c4

08006ebc <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	9003      	str	r0, [sp, #12]
 8006ec2:	0014      	movs	r4, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ec4:	4a4a      	ldr	r2, [pc, #296]	; (8006ff0 <bootloaderUpdateCommand+0x134>)
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	0020      	movs	r0, r4
 8006eca:	f007 fecd 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006ece:	2800      	cmp	r0, #0
 8006ed0:	d044      	beq.n	8006f5c <bootloaderUpdateCommand+0xa0>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006ed2:	4b47      	ldr	r3, [pc, #284]	; (8006ff0 <bootloaderUpdateCommand+0x134>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4947      	ldr	r1, [pc, #284]	; (8006ff4 <bootloaderUpdateCommand+0x138>)
 8006ed8:	f00d fe52 	bl	8014b80 <strncmp>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d135      	bne.n	8006f4c <bootloaderUpdateCommand+0x90>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006ee0:	4a45      	ldr	r2, [pc, #276]	; (8006ff8 <bootloaderUpdateCommand+0x13c>)
 8006ee2:	2102      	movs	r1, #2
 8006ee4:	0020      	movs	r0, r4
 8006ee6:	f007 febf 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006eea:	4d44      	ldr	r5, [pc, #272]	; (8006ffc <bootloaderUpdateCommand+0x140>)
 8006eec:	6028      	str	r0, [r5, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006eee:	4a44      	ldr	r2, [pc, #272]	; (8007000 <bootloaderUpdateCommand+0x144>)
 8006ef0:	2103      	movs	r1, #3
 8006ef2:	0020      	movs	r0, r4
 8006ef4:	f007 feb8 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 8006ef8:	4b42      	ldr	r3, [pc, #264]	; (8007004 <bootloaderUpdateCommand+0x148>)
 8006efa:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8006efc:	6828      	ldr	r0, [r5, #0]
 8006efe:	2300      	movs	r3, #0
 8006f00:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8006f02:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006f04:	2b23      	cmp	r3, #35	; 0x23
 8006f06:	d054      	beq.n	8006fb2 <bootloaderUpdateCommand+0xf6>
			if(pcParameterString3[0] == 'p'){
 8006f08:	4b3e      	ldr	r3, [pc, #248]	; (8007004 <bootloaderUpdateCommand+0x148>)
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	56c3      	ldrsb	r3, [r0, r3]
 8006f10:	2b70      	cmp	r3, #112	; 0x70
 8006f12:	d054      	beq.n	8006fbe <bootloaderUpdateCommand+0x102>
				result =BOS_ERR_WrongValue;
 8006f14:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 8006f16:	4b3c      	ldr	r3, [pc, #240]	; (8007008 <bootloaderUpdateCommand+0x14c>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	42bb      	cmp	r3, r7
 8006f1c:	d054      	beq.n	8006fc8 <bootloaderUpdateCommand+0x10c>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006f1e:	4b3b      	ldr	r3, [pc, #236]	; (800700c <bootloaderUpdateCommand+0x150>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006f24:	4b3a      	ldr	r3, [pc, #232]	; (8007010 <bootloaderUpdateCommand+0x154>)
 8006f26:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006f28:	3201      	adds	r2, #1
 8006f2a:	211a      	movs	r1, #26
 8006f2c:	0038      	movs	r0, r7
 8006f2e:	f001 f917 	bl	8008160 <SendMessageToModule>
				osDelay(100);
 8006f32:	2064      	movs	r0, #100	; 0x64
 8006f34:	f007 fd83 	bl	800ea3e <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006f38:	4b36      	ldr	r3, [pc, #216]	; (8007014 <bootloaderUpdateCommand+0x158>)
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	4b32      	ldr	r3, [pc, #200]	; (8007008 <bootloaderUpdateCommand+0x14c>)
 8006f3e:	7818      	ldrb	r0, [r3, #0]
 8006f40:	0033      	movs	r3, r6
 8006f42:	0039      	movs	r1, r7
 8006f44:	f003 f950 	bl	800a1e8 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006f48:	2c68      	cmp	r4, #104	; 0x68
 8006f4a:	d104      	bne.n	8006f56 <bootloaderUpdateCommand+0x9a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006f4c:	220f      	movs	r2, #15
 8006f4e:	4932      	ldr	r1, [pc, #200]	; (8007018 <bootloaderUpdateCommand+0x15c>)
 8006f50:	9803      	ldr	r0, [sp, #12]
 8006f52:	f00d fb9c 	bl	801468e <memcpy>
}
 8006f56:	2000      	movs	r0, #0
 8006f58:	b005      	add	sp, #20
 8006f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006f5c:	4b2a      	ldr	r3, [pc, #168]	; (8007008 <bootloaderUpdateCommand+0x14c>)
 8006f5e:	781a      	ldrb	r2, [r3, #0]
 8006f60:	492e      	ldr	r1, [pc, #184]	; (800701c <bootloaderUpdateCommand+0x160>)
 8006f62:	9c03      	ldr	r4, [sp, #12]
 8006f64:	0020      	movs	r0, r4
 8006f66:	f00d fdc7 	bl	8014af8 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006f6a:	4b2d      	ldr	r3, [pc, #180]	; (8007020 <bootloaderUpdateCommand+0x164>)
 8006f6c:	6819      	ldr	r1, [r3, #0]
 8006f6e:	0020      	movs	r0, r4
 8006f70:	f00d fde2 	bl	8014b38 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f74:	0020      	movs	r0, r4
 8006f76:	f7f9 f8cf 	bl	8000118 <strlen>
 8006f7a:	b282      	uxth	r2, r0
 8006f7c:	4b25      	ldr	r3, [pc, #148]	; (8007014 <bootloaderUpdateCommand+0x158>)
 8006f7e:	7818      	ldrb	r0, [r3, #0]
 8006f80:	2301      	movs	r3, #1
 8006f82:	425b      	negs	r3, r3
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	3333      	adds	r3, #51	; 0x33
 8006f88:	0021      	movs	r1, r4
 8006f8a:	f007 fbad 	bl	800e6e8 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006f8e:	4b25      	ldr	r3, [pc, #148]	; (8007024 <bootloaderUpdateCommand+0x168>)
 8006f90:	4a25      	ldr	r2, [pc, #148]	; (8007028 <bootloaderUpdateCommand+0x16c>)
 8006f92:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006f94:	4b25      	ldr	r3, [pc, #148]	; (800702c <bootloaderUpdateCommand+0x170>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006f9a:	200a      	movs	r0, #10
 8006f9c:	f007 fd4f 	bl	800ea3e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	4b22      	ldr	r3, [pc, #136]	; (8007030 <bootloaderUpdateCommand+0x174>)
 8006fa6:	4a23      	ldr	r2, [pc, #140]	; (8007034 <bootloaderUpdateCommand+0x178>)
 8006fa8:	60da      	str	r2, [r3, #12]
 8006faa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	e7fd      	b.n	8006fae <bootloaderUpdateCommand+0xf2>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	f00d f8e1 	bl	801417a <atol>
 8006fb8:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8006fba:	2400      	movs	r4, #0
 8006fbc:	e7a4      	b.n	8006f08 <bootloaderUpdateCommand+0x4c>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	f00d f8db 	bl	801417a <atol>
 8006fc4:	b2c6      	uxtb	r6, r0
 8006fc6:	e7a6      	b.n	8006f16 <bootloaderUpdateCommand+0x5a>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006fc8:	2300      	movs	r3, #0
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	3319      	adds	r3, #25
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	0030      	movs	r0, r6
 8006fd4:	f000 fe3e 	bl	8007c54 <SendMessageFromPort>
				osDelay(100);
 8006fd8:	2064      	movs	r0, #100	; 0x64
 8006fda:	f007 fd30 	bl	800ea3e <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006fde:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <bootloaderUpdateCommand+0x14c>)
 8006fe0:	7818      	ldrb	r0, [r3, #0]
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	; (8007014 <bootloaderUpdateCommand+0x158>)
 8006fe4:	781a      	ldrb	r2, [r3, #0]
 8006fe6:	0033      	movs	r3, r6
 8006fe8:	0001      	movs	r1, r0
 8006fea:	f003 f8fd 	bl	800a1e8 <remoteBootloaderUpdate>
 8006fee:	e7ab      	b.n	8006f48 <bootloaderUpdateCommand+0x8c>
 8006ff0:	2000132c 	.word	0x2000132c
 8006ff4:	08019f10 	.word	0x08019f10
 8006ff8:	20001338 	.word	0x20001338
 8006ffc:	20001310 	.word	0x20001310
 8007000:	2000133c 	.word	0x2000133c
 8007004:	20001318 	.word	0x20001318
 8007008:	200010ea 	.word	0x200010ea
 800700c:	20006dd0 	.word	0x20006dd0
 8007010:	20000fac 	.word	0x20000fac
 8007014:	20000ae8 	.word	0x20000ae8
 8007018:	08019fd0 	.word	0x08019fd0
 800701c:	08019ef0 	.word	0x08019ef0
 8007020:	2000007c 	.word	0x2000007c
 8007024:	20007ff0 	.word	0x20007ff0
 8007028:	deadbeef 	.word	0xdeadbeef
 800702c:	20000f68 	.word	0x20000f68
 8007030:	e000ed00 	.word	0xe000ed00
 8007034:	05fa0004 	.word	0x05fa0004

08007038 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007038:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 800703a:	4b13      	ldr	r3, [pc, #76]	; (8007088 <pingCommand+0x50>)
 800703c:	781a      	ldrb	r2, [r3, #0]
 800703e:	0093      	lsls	r3, r2, #2
 8007040:	189b      	adds	r3, r3, r2
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4911      	ldr	r1, [pc, #68]	; (800708c <pingCommand+0x54>)
 8007046:	5c5b      	ldrb	r3, [r3, r1]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d018      	beq.n	800707e <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 800704c:	0093      	lsls	r3, r2, #2
 800704e:	189b      	adds	r3, r3, r2
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	490e      	ldr	r1, [pc, #56]	; (800708c <pingCommand+0x54>)
 8007054:	185b      	adds	r3, r3, r1
 8007056:	490e      	ldr	r1, [pc, #56]	; (8007090 <pingCommand+0x58>)
 8007058:	f00d fd4e 	bl	8014af8 <sprintf>
	RTOS_IND_blink(200);
 800705c:	2490      	movs	r4, #144	; 0x90
 800705e:	05e4      	lsls	r4, r4, #23
 8007060:	2201      	movs	r2, #1
 8007062:	2180      	movs	r1, #128	; 0x80
 8007064:	0020      	movs	r0, r4
 8007066:	f00b f857 	bl	8012118 <HAL_GPIO_WritePin>
 800706a:	20c8      	movs	r0, #200	; 0xc8
 800706c:	f007 fce7 	bl	800ea3e <osDelay>
 8007070:	2200      	movs	r2, #0
 8007072:	2180      	movs	r1, #128	; 0x80
 8007074:	0020      	movs	r0, r4
 8007076:	f00b f84f 	bl	8012118 <HAL_GPIO_WritePin>
}
 800707a:	2000      	movs	r0, #0
 800707c:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800707e:	4905      	ldr	r1, [pc, #20]	; (8007094 <pingCommand+0x5c>)
 8007080:	f00d fd3a 	bl	8014af8 <sprintf>
 8007084:	e7ea      	b.n	800705c <pingCommand+0x24>
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	200010ea 	.word	0x200010ea
 800708c:	20000fdc 	.word	0x20000fdc
 8007090:	0801a4d4 	.word	0x0801a4d4
 8007094:	0801a4c0 	.word	0x0801a4c0

08007098 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007098:	b510      	push	{r4, lr}
 800709a:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 800709c:	2241      	movs	r2, #65	; 0x41
 800709e:	4904      	ldr	r1, [pc, #16]	; (80070b0 <prvRunTimeStatsCommand+0x18>)
 80070a0:	f00d faf5 	bl	801468e <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80070a4:	0020      	movs	r0, r4
 80070a6:	3040      	adds	r0, #64	; 0x40
 80070a8:	f008 ff8e 	bl	800ffc8 <vTaskGetRunTimeStats>
}
 80070ac:	2000      	movs	r0, #0
 80070ae:	bd10      	pop	{r4, pc}
 80070b0:	0801a500 	.word	0x0801a500

080070b4 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070b4:	b510      	push	{r4, lr}
 80070b6:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80070b8:	2250      	movs	r2, #80	; 0x50
 80070ba:	4904      	ldr	r1, [pc, #16]	; (80070cc <prvTaskStatsCommand+0x18>)
 80070bc:	f00d fae7 	bl	801468e <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80070c0:	0020      	movs	r0, r4
 80070c2:	304f      	adds	r0, #79	; 0x4f
 80070c4:	f008 ff20 	bl	800ff08 <vTaskList>
}
 80070c8:	2000      	movs	r0, #0
 80070ca:	bd10      	pop	{r4, pc}
 80070cc:	0801a554 	.word	0x0801a554

080070d0 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	4b03      	ldr	r3, [pc, #12]	; (80070e4 <resetCommand+0x14>)
 80070d6:	4a04      	ldr	r2, [pc, #16]	; (80070e8 <resetCommand+0x18>)
 80070d8:	60da      	str	r2, [r3, #12]
 80070da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	e7fd      	b.n	80070de <resetCommand+0xe>
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	e000ed00 	.word	0xe000ed00
 80070e8:	05fa0004 	.word	0x05fa0004

080070ec <RegisterUserCLICommands>:
}
 80070ec:	4770      	bx	lr
	...

080070f0 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80070f0:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80070f2:	4835      	ldr	r0, [pc, #212]	; (80071c8 <vRegisterCLICommands+0xd8>)
 80070f4:	f007 fd1e 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80070f8:	4834      	ldr	r0, [pc, #208]	; (80071cc <vRegisterCLICommands+0xdc>)
 80070fa:	f007 fd1b 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80070fe:	4834      	ldr	r0, [pc, #208]	; (80071d0 <vRegisterCLICommands+0xe0>)
 8007100:	f007 fd18 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007104:	4833      	ldr	r0, [pc, #204]	; (80071d4 <vRegisterCLICommands+0xe4>)
 8007106:	f007 fd15 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 800710a:	4833      	ldr	r0, [pc, #204]	; (80071d8 <vRegisterCLICommands+0xe8>)
 800710c:	f007 fd12 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007110:	4832      	ldr	r0, [pc, #200]	; (80071dc <vRegisterCLICommands+0xec>)
 8007112:	f007 fd0f 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007116:	4832      	ldr	r0, [pc, #200]	; (80071e0 <vRegisterCLICommands+0xf0>)
 8007118:	f007 fd0c 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 800711c:	4831      	ldr	r0, [pc, #196]	; (80071e4 <vRegisterCLICommands+0xf4>)
 800711e:	f007 fd09 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007122:	4831      	ldr	r0, [pc, #196]	; (80071e8 <vRegisterCLICommands+0xf8>)
 8007124:	f007 fd06 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007128:	4830      	ldr	r0, [pc, #192]	; (80071ec <vRegisterCLICommands+0xfc>)
 800712a:	f007 fd03 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800712e:	4830      	ldr	r0, [pc, #192]	; (80071f0 <vRegisterCLICommands+0x100>)
 8007130:	f007 fd00 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007134:	482f      	ldr	r0, [pc, #188]	; (80071f4 <vRegisterCLICommands+0x104>)
 8007136:	f007 fcfd 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 800713a:	482f      	ldr	r0, [pc, #188]	; (80071f8 <vRegisterCLICommands+0x108>)
 800713c:	f007 fcfa 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007140:	482e      	ldr	r0, [pc, #184]	; (80071fc <vRegisterCLICommands+0x10c>)
 8007142:	f007 fcf7 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007146:	482e      	ldr	r0, [pc, #184]	; (8007200 <vRegisterCLICommands+0x110>)
 8007148:	f007 fcf4 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 800714c:	482d      	ldr	r0, [pc, #180]	; (8007204 <vRegisterCLICommands+0x114>)
 800714e:	f007 fcf1 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007152:	482d      	ldr	r0, [pc, #180]	; (8007208 <vRegisterCLICommands+0x118>)
 8007154:	f007 fcee 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007158:	482c      	ldr	r0, [pc, #176]	; (800720c <vRegisterCLICommands+0x11c>)
 800715a:	f007 fceb 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800715e:	482c      	ldr	r0, [pc, #176]	; (8007210 <vRegisterCLICommands+0x120>)
 8007160:	f007 fce8 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007164:	482b      	ldr	r0, [pc, #172]	; (8007214 <vRegisterCLICommands+0x124>)
 8007166:	f007 fce5 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800716a:	482b      	ldr	r0, [pc, #172]	; (8007218 <vRegisterCLICommands+0x128>)
 800716c:	f007 fce2 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007170:	482a      	ldr	r0, [pc, #168]	; (800721c <vRegisterCLICommands+0x12c>)
 8007172:	f007 fcdf 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007176:	482a      	ldr	r0, [pc, #168]	; (8007220 <vRegisterCLICommands+0x130>)
 8007178:	f007 fcdc 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800717c:	4829      	ldr	r0, [pc, #164]	; (8007224 <vRegisterCLICommands+0x134>)
 800717e:	f007 fcd9 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 8007182:	4829      	ldr	r0, [pc, #164]	; (8007228 <vRegisterCLICommands+0x138>)
 8007184:	f007 fcd6 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007188:	4828      	ldr	r0, [pc, #160]	; (800722c <vRegisterCLICommands+0x13c>)
 800718a:	f007 fcd3 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800718e:	4828      	ldr	r0, [pc, #160]	; (8007230 <vRegisterCLICommands+0x140>)
 8007190:	f007 fcd0 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007194:	4827      	ldr	r0, [pc, #156]	; (8007234 <vRegisterCLICommands+0x144>)
 8007196:	f007 fccd 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 800719a:	4827      	ldr	r0, [pc, #156]	; (8007238 <vRegisterCLICommands+0x148>)
 800719c:	f007 fcca 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80071a0:	4826      	ldr	r0, [pc, #152]	; (800723c <vRegisterCLICommands+0x14c>)
 80071a2:	f007 fcc7 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80071a6:	4826      	ldr	r0, [pc, #152]	; (8007240 <vRegisterCLICommands+0x150>)
 80071a8:	f007 fcc4 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80071ac:	4825      	ldr	r0, [pc, #148]	; (8007244 <vRegisterCLICommands+0x154>)
 80071ae:	f007 fcc1 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80071b2:	4825      	ldr	r0, [pc, #148]	; (8007248 <vRegisterCLICommands+0x158>)
 80071b4:	f007 fcbe 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80071b8:	4b24      	ldr	r3, [pc, #144]	; (800724c <vRegisterCLICommands+0x15c>)
 80071ba:	2223      	movs	r2, #35	; 0x23
 80071bc:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80071be:	f002 ffeb 	bl	800a198 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80071c2:	f7ff ff93 	bl	80070ec <RegisterUserCLICommands>
}
 80071c6:	bd10      	pop	{r4, pc}
 80071c8:	0801a5a4 	.word	0x0801a5a4
 80071cc:	0801a544 	.word	0x0801a544
 80071d0:	0801a4f0 	.word	0x0801a4f0
 80071d4:	08019f14 	.word	0x08019f14
 80071d8:	0801a09c 	.word	0x0801a09c
 80071dc:	0801a5ec 	.word	0x0801a5ec
 80071e0:	0801a468 	.word	0x0801a468
 80071e4:	0801a328 	.word	0x0801a328
 80071e8:	0801aa9c 	.word	0x0801aa9c
 80071ec:	0801a42c 	.word	0x0801a42c
 80071f0:	0801a6a8 	.word	0x0801a6a8
 80071f4:	08019ee0 	.word	0x08019ee0
 80071f8:	0801a5dc 	.word	0x0801a5dc
 80071fc:	0801a8fc 	.word	0x0801a8fc
 8007200:	0801a1c8 	.word	0x0801a1c8
 8007204:	0801a020 	.word	0x0801a020
 8007208:	0801b844 	.word	0x0801b844
 800720c:	08019f88 	.word	0x08019f88
 8007210:	0801a6f4 	.word	0x0801a6f4
 8007214:	0801b8b8 	.word	0x0801b8b8
 8007218:	0801a3a8 	.word	0x0801a3a8
 800721c:	0801a0cc 	.word	0x0801a0cc
 8007220:	0801aa8c 	.word	0x0801aa8c
 8007224:	08019e64 	.word	0x08019e64
 8007228:	0801a4b0 	.word	0x0801a4b0
 800722c:	0801a08c 	.word	0x0801a08c
 8007230:	08019f60 	.word	0x08019f60
 8007234:	0801b890 	.word	0x0801b890
 8007238:	0801b7d8 	.word	0x0801b7d8
 800723c:	08019d64 	.word	0x08019d64
 8007240:	08019de4 	.word	0x08019de4
 8007244:	08019e1c 	.word	0x08019e1c
 8007248:	08019d74 	.word	0x08019d74
 800724c:	20006dcc 	.word	0x20006dcc

08007250 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	0005      	movs	r5, r0
 8007254:	000e      	movs	r6, r1
 8007256:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007258:	f003 ff16 	bl	800b088 <GetPort>
 800725c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <StartDMAstream+0x44>)
 8007260:	5c1b      	ldrb	r3, [r3, r0]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d902      	bls.n	800726c <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007266:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007268:	2b03      	cmp	r3, #3
 800726a:	d112      	bne.n	8007292 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800726c:	0020      	movs	r0, r4
 800726e:	f003 fff5 	bl	800b25c <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007272:	1e63      	subs	r3, r4, #1
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4a08      	ldr	r2, [pc, #32]	; (8007298 <StartDMAstream+0x48>)
 8007278:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800727a:	4a06      	ldr	r2, [pc, #24]	; (8007294 <StartDMAstream+0x44>)
 800727c:	2102      	movs	r1, #2
 800727e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007280:	4a06      	ldr	r2, [pc, #24]	; (800729c <StartDMAstream+0x4c>)
 8007282:	2100      	movs	r1, #0
 8007284:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007286:	003a      	movs	r2, r7
 8007288:	0031      	movs	r1, r6
 800728a:	0028      	movs	r0, r5
 800728c:	f004 fc7c 	bl	800bb88 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007290:	2000      	movs	r0, #0
}
 8007292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007294:	2000116c 	.word	0x2000116c
 8007298:	20001820 	.word	0x20001820
 800729c:	20001808 	.word	0x20001808

080072a0 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80072a0:	b570      	push	{r4, r5, r6, lr}
 80072a2:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80072a4:	4b12      	ldr	r3, [pc, #72]	; (80072f0 <DMA_IRQHandler+0x50>)
 80072a6:	5c1b      	ldrb	r3, [r3, r0]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d008      	beq.n	80072be <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80072ac:	3c01      	subs	r4, #1
 80072ae:	00e0      	lsls	r0, r4, #3
 80072b0:	1b00      	subs	r0, r0, r4
 80072b2:	00c0      	lsls	r0, r0, #3
 80072b4:	4c0f      	ldr	r4, [pc, #60]	; (80072f4 <DMA_IRQHandler+0x54>)
 80072b6:	1900      	adds	r0, r0, r4
 80072b8:	f00a f816 	bl	80112e8 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80072bc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80072be:	1e45      	subs	r5, r0, #1
 80072c0:	00e8      	lsls	r0, r5, #3
 80072c2:	1b40      	subs	r0, r0, r5
 80072c4:	00c0      	lsls	r0, r0, #3
 80072c6:	4b0c      	ldr	r3, [pc, #48]	; (80072f8 <DMA_IRQHandler+0x58>)
 80072c8:	18c0      	adds	r0, r0, r3
 80072ca:	f00a f80d 	bl	80112e8 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80072ce:	00aa      	lsls	r2, r5, #2
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <DMA_IRQHandler+0x5c>)
 80072d2:	58d2      	ldr	r2, [r2, r3]
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	d006      	beq.n	80072e6 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 80072d8:	4909      	ldr	r1, [pc, #36]	; (8007300 <DMA_IRQHandler+0x60>)
 80072da:	00ad      	lsls	r5, r5, #2
 80072dc:	586b      	ldr	r3, [r5, r1]
 80072de:	3301      	adds	r3, #1
 80072e0:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d8ea      	bhi.n	80072bc <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80072e6:	0020      	movs	r0, r4
 80072e8:	f003 ff8c 	bl	800b204 <StopStreamDMA>
}
 80072ec:	e7e6      	b.n	80072bc <DMA_IRQHandler+0x1c>
 80072ee:	46c0      	nop			; (mov r8, r8)
 80072f0:	2000116c 	.word	0x2000116c
 80072f4:	20001b74 	.word	0x20001b74
 80072f8:	20001d6c 	.word	0x20001d6c
 80072fc:	20001838 	.word	0x20001838
 8007300:	20001808 	.word	0x20001808

08007304 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007304:	4b09      	ldr	r3, [pc, #36]	; (800732c <ResetUartORE+0x28>)
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	2308      	movs	r3, #8
 800730a:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <ResetUartORE+0x2c>)
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007312:	4a08      	ldr	r2, [pc, #32]	; (8007334 <ResetUartORE+0x30>)
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007318:	4a07      	ldr	r2, [pc, #28]	; (8007338 <ResetUartORE+0x34>)
 800731a:	6812      	ldr	r2, [r2, #0]
 800731c:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800731e:	4a07      	ldr	r2, [pc, #28]	; (800733c <ResetUartORE+0x38>)
 8007320:	6812      	ldr	r2, [r2, #0]
 8007322:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007324:	4a06      	ldr	r2, [pc, #24]	; (8007340 <ResetUartORE+0x3c>)
 8007326:	6812      	ldr	r2, [r2, #0]
 8007328:	6213      	str	r3, [r2, #32]
#endif
}
 800732a:	4770      	bx	lr
 800732c:	2000702c 	.word	0x2000702c
 8007330:	20007194 	.word	0x20007194
 8007334:	20006f3c 	.word	0x20006f3c
 8007338:	20007120 	.word	0x20007120
 800733c:	20006fb4 	.word	0x20006fb4
 8007340:	200070a4 	.word	0x200070a4

08007344 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007346:	b091      	sub	sp, #68	; 0x44
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007348:	25a0      	movs	r5, #160	; 0xa0
 800734a:	006d      	lsls	r5, r5, #1
 800734c:	2400      	movs	r4, #0
 800734e:	9403      	str	r4, [sp, #12]
 8007350:	9402      	str	r4, [sp, #8]
 8007352:	4b5e      	ldr	r3, [pc, #376]	; (80074cc <MX_FREERTOS_Init+0x188>)
 8007354:	9301      	str	r3, [sp, #4]
 8007356:	2603      	movs	r6, #3
 8007358:	9600      	str	r6, [sp, #0]
 800735a:	2300      	movs	r3, #0
 800735c:	002a      	movs	r2, r5
 800735e:	495c      	ldr	r1, [pc, #368]	; (80074d0 <MX_FREERTOS_Init+0x18c>)
 8007360:	485c      	ldr	r0, [pc, #368]	; (80074d4 <MX_FREERTOS_Init+0x190>)
 8007362:	f008 f8ef 	bl	800f544 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007366:	9403      	str	r4, [sp, #12]
 8007368:	9402      	str	r4, [sp, #8]
 800736a:	4b5b      	ldr	r3, [pc, #364]	; (80074d8 <MX_FREERTOS_Init+0x194>)
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	9600      	str	r6, [sp, #0]
 8007370:	2300      	movs	r3, #0
 8007372:	002a      	movs	r2, r5
 8007374:	4959      	ldr	r1, [pc, #356]	; (80074dc <MX_FREERTOS_Init+0x198>)
 8007376:	485a      	ldr	r0, [pc, #360]	; (80074e0 <MX_FREERTOS_Init+0x19c>)
 8007378:	f008 f8e4 	bl	800f544 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 800737c:	9403      	str	r4, [sp, #12]
 800737e:	9402      	str	r4, [sp, #8]
 8007380:	4b58      	ldr	r3, [pc, #352]	; (80074e4 <MX_FREERTOS_Init+0x1a0>)
 8007382:	9301      	str	r3, [sp, #4]
 8007384:	9600      	str	r6, [sp, #0]
 8007386:	2300      	movs	r3, #0
 8007388:	002a      	movs	r2, r5
 800738a:	4957      	ldr	r1, [pc, #348]	; (80074e8 <MX_FREERTOS_Init+0x1a4>)
 800738c:	4857      	ldr	r0, [pc, #348]	; (80074ec <MX_FREERTOS_Init+0x1a8>)
 800738e:	f008 f8d9 	bl	800f544 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007392:	f7ff fead 	bl	80070f0 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007396:	9403      	str	r4, [sp, #12]
 8007398:	9402      	str	r4, [sp, #8]
 800739a:	4b55      	ldr	r3, [pc, #340]	; (80074f0 <MX_FREERTOS_Init+0x1ac>)
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	9600      	str	r6, [sp, #0]
 80073a0:	2300      	movs	r3, #0
 80073a2:	002a      	movs	r2, r5
 80073a4:	4953      	ldr	r1, [pc, #332]	; (80074f4 <MX_FREERTOS_Init+0x1b0>)
 80073a6:	4854      	ldr	r0, [pc, #336]	; (80074f8 <MX_FREERTOS_Init+0x1b4>)
 80073a8:	f008 f8cc 	bl	800f544 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 80073ac:	4e53      	ldr	r6, [pc, #332]	; (80074fc <MX_FREERTOS_Init+0x1b8>)
 80073ae:	9403      	str	r4, [sp, #12]
 80073b0:	9402      	str	r4, [sp, #8]
 80073b2:	4b53      	ldr	r3, [pc, #332]	; (8007500 <MX_FREERTOS_Init+0x1bc>)
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	2704      	movs	r7, #4
 80073b8:	9700      	str	r7, [sp, #0]
 80073ba:	2301      	movs	r3, #1
 80073bc:	002a      	movs	r2, r5
 80073be:	4951      	ldr	r1, [pc, #324]	; (8007504 <MX_FREERTOS_Init+0x1c0>)
 80073c0:	0030      	movs	r0, r6
 80073c2:	f008 f8bf 	bl	800f544 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80073c6:	9403      	str	r4, [sp, #12]
 80073c8:	9402      	str	r4, [sp, #8]
 80073ca:	4b4f      	ldr	r3, [pc, #316]	; (8007508 <MX_FREERTOS_Init+0x1c4>)
 80073cc:	9301      	str	r3, [sp, #4]
 80073ce:	9700      	str	r7, [sp, #0]
 80073d0:	2302      	movs	r3, #2
 80073d2:	002a      	movs	r2, r5
 80073d4:	494d      	ldr	r1, [pc, #308]	; (800750c <MX_FREERTOS_Init+0x1c8>)
 80073d6:	0030      	movs	r0, r6
 80073d8:	f008 f8b4 	bl	800f544 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 80073dc:	9403      	str	r4, [sp, #12]
 80073de:	9402      	str	r4, [sp, #8]
 80073e0:	4b4b      	ldr	r3, [pc, #300]	; (8007510 <MX_FREERTOS_Init+0x1cc>)
 80073e2:	9301      	str	r3, [sp, #4]
 80073e4:	9700      	str	r7, [sp, #0]
 80073e6:	2303      	movs	r3, #3
 80073e8:	002a      	movs	r2, r5
 80073ea:	494a      	ldr	r1, [pc, #296]	; (8007514 <MX_FREERTOS_Init+0x1d0>)
 80073ec:	0030      	movs	r0, r6
 80073ee:	f008 f8a9 	bl	800f544 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 80073f2:	9403      	str	r4, [sp, #12]
 80073f4:	9402      	str	r4, [sp, #8]
 80073f6:	4b48      	ldr	r3, [pc, #288]	; (8007518 <MX_FREERTOS_Init+0x1d4>)
 80073f8:	9301      	str	r3, [sp, #4]
 80073fa:	9700      	str	r7, [sp, #0]
 80073fc:	2304      	movs	r3, #4
 80073fe:	002a      	movs	r2, r5
 8007400:	4946      	ldr	r1, [pc, #280]	; (800751c <MX_FREERTOS_Init+0x1d8>)
 8007402:	0030      	movs	r0, r6
 8007404:	f008 f89e 	bl	800f544 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007408:	9403      	str	r4, [sp, #12]
 800740a:	9402      	str	r4, [sp, #8]
 800740c:	4b44      	ldr	r3, [pc, #272]	; (8007520 <MX_FREERTOS_Init+0x1dc>)
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	9700      	str	r7, [sp, #0]
 8007412:	2305      	movs	r3, #5
 8007414:	002a      	movs	r2, r5
 8007416:	4943      	ldr	r1, [pc, #268]	; (8007524 <MX_FREERTOS_Init+0x1e0>)
 8007418:	0030      	movs	r0, r6
 800741a:	f008 f893 	bl	800f544 <xTaskGenericCreate>
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 800741e:	9403      	str	r4, [sp, #12]
 8007420:	9402      	str	r4, [sp, #8]
 8007422:	4b41      	ldr	r3, [pc, #260]	; (8007528 <MX_FREERTOS_Init+0x1e4>)
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	9700      	str	r7, [sp, #0]
 8007428:	2306      	movs	r3, #6
 800742a:	002a      	movs	r2, r5
 800742c:	493f      	ldr	r1, [pc, #252]	; (800752c <MX_FREERTOS_Init+0x1e8>)
 800742e:	0030      	movs	r0, r6
 8007430:	f008 f888 	bl	800f544 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007434:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007436:	2101      	movs	r1, #1
 8007438:	a80f      	add	r0, sp, #60	; 0x3c
 800743a:	f007 fb08 	bl	800ea4e <osSemaphoreCreate>
 800743e:	4e3c      	ldr	r6, [pc, #240]	; (8007530 <MX_FREERTOS_Init+0x1ec>)
 8007440:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007442:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007444:	2101      	movs	r1, #1
 8007446:	a80e      	add	r0, sp, #56	; 0x38
 8007448:	f007 fb01 	bl	800ea4e <osSemaphoreCreate>
 800744c:	4d39      	ldr	r5, [pc, #228]	; (8007534 <MX_FREERTOS_Init+0x1f0>)
 800744e:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007450:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007452:	2101      	movs	r1, #1
 8007454:	a80d      	add	r0, sp, #52	; 0x34
 8007456:	f007 fafa 	bl	800ea4e <osSemaphoreCreate>
 800745a:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 800745c:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800745e:	2101      	movs	r1, #1
 8007460:	a80c      	add	r0, sp, #48	; 0x30
 8007462:	f007 faf4 	bl	800ea4e <osSemaphoreCreate>
 8007466:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 8007468:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 800746a:	2101      	movs	r1, #1
 800746c:	a80b      	add	r0, sp, #44	; 0x2c
 800746e:	f007 faee 	bl	800ea4e <osSemaphoreCreate>
 8007472:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007474:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007476:	2101      	movs	r1, #1
 8007478:	a80a      	add	r0, sp, #40	; 0x28
 800747a:	f007 fae8 	bl	800ea4e <osSemaphoreCreate>
 800747e:	60e8      	str	r0, [r5, #12]
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
 8007480:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007482:	2101      	movs	r1, #1
 8007484:	a809      	add	r0, sp, #36	; 0x24
 8007486:	f007 fae2 	bl	800ea4e <osSemaphoreCreate>
 800748a:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 800748c:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 800748e:	2101      	movs	r1, #1
 8007490:	a808      	add	r0, sp, #32
 8007492:	f007 fadc 	bl	800ea4e <osSemaphoreCreate>
 8007496:	6128      	str	r0, [r5, #16]
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
 8007498:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 800749a:	2101      	movs	r1, #1
 800749c:	a807      	add	r0, sp, #28
 800749e:	f007 fad6 	bl	800ea4e <osSemaphoreCreate>
 80074a2:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 80074a4:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 80074a6:	2101      	movs	r1, #1
 80074a8:	a806      	add	r0, sp, #24
 80074aa:	f007 fad0 	bl	800ea4e <osSemaphoreCreate>
 80074ae:	6168      	str	r0, [r5, #20]
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
 80074b0:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 80074b2:	2101      	movs	r1, #1
 80074b4:	a805      	add	r0, sp, #20
 80074b6:	f007 faca 	bl	800ea4e <osSemaphoreCreate>
 80074ba:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 80074bc:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 80074be:	2101      	movs	r1, #1
 80074c0:	a804      	add	r0, sp, #16
 80074c2:	f007 fac4 	bl	800ea4e <osSemaphoreCreate>
 80074c6:	61a8      	str	r0, [r5, #24]
#endif
	
}
 80074c8:	b011      	add	sp, #68	; 0x44
 80074ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074cc:	20001884 	.word	0x20001884
 80074d0:	0801b8c8 	.word	0x0801b8c8
 80074d4:	080078d9 	.word	0x080078d9
 80074d8:	20001850 	.word	0x20001850
 80074dc:	0801b8d4 	.word	0x0801b8d4
 80074e0:	08008349 	.word	0x08008349
 80074e4:	20001880 	.word	0x20001880
 80074e8:	0801b8e0 	.word	0x0801b8e0
 80074ec:	08014163 	.word	0x08014163
 80074f0:	20001958 	.word	0x20001958
 80074f4:	0801b8ec 	.word	0x0801b8ec
 80074f8:	08004f31 	.word	0x08004f31
 80074fc:	08008795 	.word	0x08008795
 8007500:	20001854 	.word	0x20001854
 8007504:	0801b8f4 	.word	0x0801b8f4
 8007508:	20001858 	.word	0x20001858
 800750c:	0801b900 	.word	0x0801b900
 8007510:	2000185c 	.word	0x2000185c
 8007514:	0801b90c 	.word	0x0801b90c
 8007518:	20001860 	.word	0x20001860
 800751c:	0801b918 	.word	0x0801b918
 8007520:	20001864 	.word	0x20001864
 8007524:	0801b924 	.word	0x0801b924
 8007528:	20001868 	.word	0x20001868
 800752c:	0801b930 	.word	0x0801b930
 8007530:	20006ef4 	.word	0x20006ef4
 8007534:	20006ed4 	.word	0x20006ed4

08007538 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800753a:	46de      	mov	lr, fp
 800753c:	4657      	mov	r7, sl
 800753e:	464e      	mov	r6, r9
 8007540:	4645      	mov	r5, r8
 8007542:	b5e0      	push	{r5, r6, r7, lr}
 8007544:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007546:	4bd3      	ldr	r3, [pc, #844]	; (8007894 <ExecuteMonitor+0x35c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b03      	cmp	r3, #3
 800754c:	d000      	beq.n	8007550 <ExecuteMonitor+0x18>
 800754e:	e19a      	b.n	8007886 <ExecuteMonitor+0x34e>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 8007550:	4bd0      	ldr	r3, [pc, #832]	; (8007894 <ExecuteMonitor+0x35c>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]
	flag=0;
 8007556:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8007558:	3220      	adds	r2, #32
 800755a:	715a      	strb	r2, [r3, #5]
                	    digitTheCommand=nonProcessingParameter[1]%10;
                	    numCommandParameters=nonProcessingParameter[2]%10;
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
                	    nonProcessingParameterIndex=4;
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800755c:	4bce      	ldr	r3, [pc, #824]	; (8007898 <ExecuteMonitor+0x360>)
 800755e:	3301      	adds	r3, #1
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	4bce      	ldr	r3, [pc, #824]	; (800789c <ExecuteMonitor+0x364>)
 8007564:	3304      	adds	r3, #4
 8007566:	9301      	str	r3, [sp, #4]
 8007568:	e186      	b.n	8007878 <ExecuteMonitor+0x340>
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800756a:	4bcd      	ldr	r3, [pc, #820]	; (80078a0 <ExecuteMonitor+0x368>)
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	2220      	movs	r2, #32
 8007570:	4393      	bics	r3, r2
 8007572:	d018      	beq.n	80075a6 <ExecuteMonitor+0x6e>
 8007574:	4bc7      	ldr	r3, [pc, #796]	; (8007894 <ExecuteMonitor+0x35c>)
 8007576:	791b      	ldrb	r3, [r3, #4]
 8007578:	1e5a      	subs	r2, r3, #1
 800757a:	2a01      	cmp	r2, #1
 800757c:	d800      	bhi.n	8007580 <ExecuteMonitor+0x48>
 800757e:	e0b8      	b.n	80076f2 <ExecuteMonitor+0x1ba>
		            	    perviousCharacter= INTIAL_VALUE;
 8007580:	703d      	strb	r5, [r7, #0]
		            	    Delay_us(100);
 8007582:	2064      	movs	r0, #100	; 0x64
 8007584:	f006 fea2 	bl	800e2cc <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8007588:	7963      	ldrb	r3, [r4, #5]
 800758a:	783a      	ldrb	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d0ec      	beq.n	800756a <ExecuteMonitor+0x32>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 8007590:	49c4      	ldr	r1, [pc, #784]	; (80078a4 <ExecuteMonitor+0x36c>)
 8007592:	780a      	ldrb	r2, [r1, #0]
 8007594:	1c50      	adds	r0, r2, #1
 8007596:	7008      	strb	r0, [r1, #0]
 8007598:	49c0      	ldr	r1, [pc, #768]	; (800789c <ExecuteMonitor+0x364>)
 800759a:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 800759c:	4ac0      	ldr	r2, [pc, #768]	; (80078a0 <ExecuteMonitor+0x368>)
 800759e:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 80075a0:	4bbc      	ldr	r3, [pc, #752]	; (8007894 <ExecuteMonitor+0x35c>)
 80075a2:	715e      	strb	r6, [r3, #5]
 80075a4:	e7e1      	b.n	800756a <ExecuteMonitor+0x32>
                   if(flag == NonActive)
 80075a6:	4bbb      	ldr	r3, [pc, #748]	; (8007894 <ExecuteMonitor+0x35c>)
 80075a8:	791b      	ldrb	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d000      	beq.n	80075b0 <ExecuteMonitor+0x78>
 80075ae:	e0a0      	b.n	80076f2 <ExecuteMonitor+0x1ba>
                	   nonProcessingParameterIndex=0;
 80075b0:	4bbc      	ldr	r3, [pc, #752]	; (80078a4 <ExecuteMonitor+0x36c>)
 80075b2:	464a      	mov	r2, r9
 80075b4:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 80075b6:	4bb9      	ldr	r3, [pc, #740]	; (800789c <ExecuteMonitor+0x364>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	2b5b      	cmp	r3, #91	; 0x5b
 80075bc:	d020      	beq.n	8007600 <ExecuteMonitor+0xc8>
 		            else if(FirstCharacterInParameter == '#')
 80075be:	2b23      	cmp	r3, #35	; 0x23
 80075c0:	d063      	beq.n	800768a <ExecuteMonitor+0x152>
 		            else if(FirstCharacterInParameter == '=')
 80075c2:	2b3d      	cmp	r3, #61	; 0x3d
 80075c4:	d074      	beq.n	80076b0 <ExecuteMonitor+0x178>
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 80075c6:	4cb4      	ldr	r4, [pc, #720]	; (8007898 <ExecuteMonitor+0x360>)
 80075c8:	7823      	ldrb	r3, [r4, #0]
 80075ca:	4ab7      	ldr	r2, [pc, #732]	; (80078a8 <ExecuteMonitor+0x370>)
 80075cc:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80075ce:	0118      	lsls	r0, r3, #4
 80075d0:	1ac3      	subs	r3, r0, r3
 80075d2:	48b6      	ldr	r0, [pc, #728]	; (80078ac <ExecuteMonitor+0x374>)
 80075d4:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 80075d6:	220f      	movs	r2, #15
 80075d8:	0021      	movs	r1, r4
 80075da:	f00d f858 	bl	801468e <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 80075de:	2214      	movs	r2, #20
 80075e0:	4649      	mov	r1, r9
 80075e2:	48ae      	ldr	r0, [pc, #696]	; (800789c <ExecuteMonitor+0x364>)
 80075e4:	f00d f85c 	bl	80146a0 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 80075e8:	2214      	movs	r2, #20
 80075ea:	4649      	mov	r1, r9
 80075ec:	0020      	movs	r0, r4
 80075ee:	f00d f857 	bl	80146a0 <memset>
		                    nonProcessingParameterIndex=0;
 80075f2:	465b      	mov	r3, fp
 80075f4:	4652      	mov	r2, sl
 80075f6:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 80075f8:	2603      	movs	r6, #3
 80075fa:	1c35      	adds	r5, r6, #0
							if(currentCharacter != perviousCharacter)
 80075fc:	4ca5      	ldr	r4, [pc, #660]	; (8007894 <ExecuteMonitor+0x35c>)
 80075fe:	e7bf      	b.n	8007580 <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 8007600:	4ba8      	ldr	r3, [pc, #672]	; (80078a4 <ExecuteMonitor+0x36c>)
 8007602:	2201      	movs	r2, #1
 8007604:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007606:	4baa      	ldr	r3, [pc, #680]	; (80078b0 <ExecuteMonitor+0x378>)
 8007608:	781c      	ldrb	r4, [r3, #0]
 800760a:	4ba4      	ldr	r3, [pc, #656]	; (800789c <ExecuteMonitor+0x364>)
 800760c:	7858      	ldrb	r0, [r3, #1]
 800760e:	210a      	movs	r1, #10
 8007610:	f7f8 fe24 	bl	800025c <__aeabi_uidivmod>
 8007614:	b2c9      	uxtb	r1, r1
 8007616:	2603      	movs	r6, #3
 8007618:	42a1      	cmp	r1, r4
 800761a:	d00d      	beq.n	8007638 <ExecuteMonitor+0x100>
 800761c:	4b9f      	ldr	r3, [pc, #636]	; (800789c <ExecuteMonitor+0x364>)
 800761e:	4698      	mov	r8, r3
 8007620:	1cb5      	adds	r5, r6, #2
 8007622:	b2ed      	uxtb	r5, r5
 8007624:	4643      	mov	r3, r8
 8007626:	5d98      	ldrb	r0, [r3, r6]
 8007628:	210a      	movs	r1, #10
 800762a:	f7f8 fe17 	bl	800025c <__aeabi_uidivmod>
 800762e:	b2c9      	uxtb	r1, r1
 8007630:	42a1      	cmp	r1, r4
 8007632:	d002      	beq.n	800763a <ExecuteMonitor+0x102>
 8007634:	002e      	movs	r6, r5
 8007636:	e7f3      	b.n	8007620 <ExecuteMonitor+0xe8>
 8007638:	2601      	movs	r6, #1
 		            			nonProcessingParameterIndex++;
 800763a:	1c74      	adds	r4, r6, #1
 800763c:	b2e4      	uxtb	r4, r4
 800763e:	4b99      	ldr	r3, [pc, #612]	; (80078a4 <ExecuteMonitor+0x36c>)
 8007640:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007642:	4b96      	ldr	r3, [pc, #600]	; (800789c <ExecuteMonitor+0x364>)
 8007644:	5d1d      	ldrb	r5, [r3, r4]
 8007646:	210a      	movs	r1, #10
 8007648:	0028      	movs	r0, r5
 800764a:	f7f8 fe07 	bl	800025c <__aeabi_uidivmod>
 800764e:	4b92      	ldr	r3, [pc, #584]	; (8007898 <ExecuteMonitor+0x360>)
 8007650:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007652:	2d5d      	cmp	r5, #93	; 0x5d
 8007654:	d009      	beq.n	800766a <ExecuteMonitor+0x132>
 8007656:	3602      	adds	r6, #2
 8007658:	b2f4      	uxtb	r4, r6
 800765a:	4990      	ldr	r1, [pc, #576]	; (800789c <ExecuteMonitor+0x364>)
 800765c:	e000      	b.n	8007660 <ExecuteMonitor+0x128>
 800765e:	001c      	movs	r4, r3
 8007660:	1c63      	adds	r3, r4, #1
 8007662:	b2db      	uxtb	r3, r3
 8007664:	5d0a      	ldrb	r2, [r1, r4]
 8007666:	2a5d      	cmp	r2, #93	; 0x5d
 8007668:	d1f9      	bne.n	800765e <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 800766a:	3401      	adds	r4, #1
 800766c:	b2e1      	uxtb	r1, r4
 800766e:	4b8d      	ldr	r3, [pc, #564]	; (80078a4 <ExecuteMonitor+0x36c>)
 8007670:	7019      	strb	r1, [r3, #0]
 		            	processingParameterIndex=1;
 8007672:	4b90      	ldr	r3, [pc, #576]	; (80078b4 <ExecuteMonitor+0x37c>)
 8007674:	2201      	movs	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007678:	4887      	ldr	r0, [pc, #540]	; (8007898 <ExecuteMonitor+0x360>)
 800767a:	3213      	adds	r2, #19
 800767c:	1a52      	subs	r2, r2, r1
 800767e:	4c87      	ldr	r4, [pc, #540]	; (800789c <ExecuteMonitor+0x364>)
 8007680:	1861      	adds	r1, r4, r1
 8007682:	3001      	adds	r0, #1
 8007684:	f00d f803 	bl	801468e <memcpy>
 8007688:	e79d      	b.n	80075c6 <ExecuteMonitor+0x8e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 800768a:	4c83      	ldr	r4, [pc, #524]	; (8007898 <ExecuteMonitor+0x360>)
 800768c:	4d83      	ldr	r5, [pc, #524]	; (800789c <ExecuteMonitor+0x364>)
 800768e:	7868      	ldrb	r0, [r5, #1]
 8007690:	210a      	movs	r1, #10
 8007692:	f7f8 fde3 	bl	800025c <__aeabi_uidivmod>
 8007696:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 8007698:	4b82      	ldr	r3, [pc, #520]	; (80078a4 <ExecuteMonitor+0x36c>)
 800769a:	2202      	movs	r2, #2
 800769c:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800769e:	4b85      	ldr	r3, [pc, #532]	; (80078b4 <ExecuteMonitor+0x37c>)
 80076a0:	3a01      	subs	r2, #1
 80076a2:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80076a4:	1c60      	adds	r0, r4, #1
 80076a6:	1ca9      	adds	r1, r5, #2
 80076a8:	3211      	adds	r2, #17
 80076aa:	f00c fff0 	bl	801468e <memcpy>
 80076ae:	e78a      	b.n	80075c6 <ExecuteMonitor+0x8e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 80076b0:	4b7a      	ldr	r3, [pc, #488]	; (800789c <ExecuteMonitor+0x364>)
 80076b2:	7858      	ldrb	r0, [r3, #1]
 80076b4:	210a      	movs	r1, #10
 80076b6:	f7f8 fdd1 	bl	800025c <__aeabi_uidivmod>
 80076ba:	4b7d      	ldr	r3, [pc, #500]	; (80078b0 <ExecuteMonitor+0x378>)
 80076bc:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 80076be:	4b77      	ldr	r3, [pc, #476]	; (800789c <ExecuteMonitor+0x364>)
 80076c0:	7898      	ldrb	r0, [r3, #2]
 80076c2:	210a      	movs	r1, #10
 80076c4:	f7f8 fdca 	bl	800025c <__aeabi_uidivmod>
 80076c8:	4b7b      	ldr	r3, [pc, #492]	; (80078b8 <ExecuteMonitor+0x380>)
 80076ca:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80076cc:	4b73      	ldr	r3, [pc, #460]	; (800789c <ExecuteMonitor+0x364>)
 80076ce:	78d8      	ldrb	r0, [r3, #3]
 80076d0:	210a      	movs	r1, #10
 80076d2:	f7f8 fdc3 	bl	800025c <__aeabi_uidivmod>
 80076d6:	4b70      	ldr	r3, [pc, #448]	; (8007898 <ExecuteMonitor+0x360>)
 80076d8:	7019      	strb	r1, [r3, #0]
                	    nonProcessingParameterIndex=4;
 80076da:	4b72      	ldr	r3, [pc, #456]	; (80078a4 <ExecuteMonitor+0x36c>)
 80076dc:	2204      	movs	r2, #4
 80076de:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 80076e0:	4b74      	ldr	r3, [pc, #464]	; (80078b4 <ExecuteMonitor+0x37c>)
 80076e2:	3a03      	subs	r2, #3
 80076e4:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80076e6:	320f      	adds	r2, #15
 80076e8:	9901      	ldr	r1, [sp, #4]
 80076ea:	9800      	ldr	r0, [sp, #0]
 80076ec:	f00c ffcf 	bl	801468e <memcpy>
 80076f0:	e769      	b.n	80075c6 <ExecuteMonitor+0x8e>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d015      	beq.n	8007722 <ExecuteMonitor+0x1ea>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 80076f6:	4b67      	ldr	r3, [pc, #412]	; (8007894 <ExecuteMonitor+0x35c>)
 80076f8:	791b      	ldrb	r3, [r3, #4]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d000      	beq.n	8007700 <ExecuteMonitor+0x1c8>
 80076fe:	e778      	b.n	80075f2 <ExecuteMonitor+0xba>
		           {
                	finalMatrixIndex=0;
 8007700:	2300      	movs	r3, #0
 8007702:	4a6e      	ldr	r2, [pc, #440]	; (80078bc <ExecuteMonitor+0x384>)
 8007704:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8007706:	4a6e      	ldr	r2, [pc, #440]	; (80078c0 <ExecuteMonitor+0x388>)
 8007708:	2101      	movs	r1, #1
 800770a:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 800770c:	4a6d      	ldr	r2, [pc, #436]	; (80078c4 <ExecuteMonitor+0x38c>)
 800770e:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 8007710:	4b69      	ldr	r3, [pc, #420]	; (80078b8 <ExecuteMonitor+0x380>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d100      	bne.n	800771a <ExecuteMonitor+0x1e2>
 8007718:	e07f      	b.n	800781a <ExecuteMonitor+0x2e2>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800771a:	0017      	movs	r7, r2
 800771c:	4e68      	ldr	r6, [pc, #416]	; (80078c0 <ExecuteMonitor+0x388>)
 800771e:	4d67      	ldr	r5, [pc, #412]	; (80078bc <ExecuteMonitor+0x384>)
 8007720:	e062      	b.n	80077e8 <ExecuteMonitor+0x2b0>
                	finalMatrixIndex=0;
 8007722:	4b66      	ldr	r3, [pc, #408]	; (80078bc <ExecuteMonitor+0x384>)
 8007724:	464a      	mov	r2, r9
 8007726:	701a      	strb	r2, [r3, #0]
                	twoDMatrixIndex=1;
 8007728:	4b65      	ldr	r3, [pc, #404]	; (80078c0 <ExecuteMonitor+0x388>)
 800772a:	2201      	movs	r2, #1
 800772c:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 800772e:	4b65      	ldr	r3, [pc, #404]	; (80078c4 <ExecuteMonitor+0x38c>)
 8007730:	464a      	mov	r2, r9
 8007732:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8007734:	4b60      	ldr	r3, [pc, #384]	; (80078b8 <ExecuteMonitor+0x380>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d02a      	beq.n	8007792 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800773c:	4b61      	ldr	r3, [pc, #388]	; (80078c4 <ExecuteMonitor+0x38c>)
 800773e:	4698      	mov	r8, r3
 8007740:	4e5f      	ldr	r6, [pc, #380]	; (80078c0 <ExecuteMonitor+0x388>)
 8007742:	4d5e      	ldr	r5, [pc, #376]	; (80078bc <ExecuteMonitor+0x384>)
 8007744:	e00b      	b.n	800775e <ExecuteMonitor+0x226>
		                   counter++;
 8007746:	4a5f      	ldr	r2, [pc, #380]	; (80078c4 <ExecuteMonitor+0x38c>)
 8007748:	7813      	ldrb	r3, [r2, #0]
 800774a:	3301      	adds	r3, #1
 800774c:	b2db      	uxtb	r3, r3
 800774e:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8007750:	4a5b      	ldr	r2, [pc, #364]	; (80078c0 <ExecuteMonitor+0x388>)
 8007752:	2101      	movs	r1, #1
 8007754:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 8007756:	4a58      	ldr	r2, [pc, #352]	; (80078b8 <ExecuteMonitor+0x380>)
 8007758:	7812      	ldrb	r2, [r2, #0]
 800775a:	429a      	cmp	r2, r3
 800775c:	d019      	beq.n	8007792 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800775e:	4643      	mov	r3, r8
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	7830      	ldrb	r0, [r6, #0]
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	7033      	strb	r3, [r6, #0]
 8007768:	7829      	ldrb	r1, [r5, #0]
 800776a:	1c4b      	adds	r3, r1, #1
 800776c:	702b      	strb	r3, [r5, #0]
 800776e:	4c56      	ldr	r4, [pc, #344]	; (80078c8 <ExecuteMonitor+0x390>)
 8007770:	0113      	lsls	r3, r2, #4
 8007772:	1a9a      	subs	r2, r3, r2
 8007774:	4b4d      	ldr	r3, [pc, #308]	; (80078ac <ExecuteMonitor+0x374>)
 8007776:	189b      	adds	r3, r3, r2
 8007778:	5c1b      	ldrb	r3, [r3, r0]
 800777a:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 800777c:	2001      	movs	r0, #1
 800777e:	f009 f8af 	bl	80108e0 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 8007782:	782b      	ldrb	r3, [r5, #0]
 8007784:	18e4      	adds	r4, r4, r3
 8007786:	3c01      	subs	r4, #1
 8007788:	7823      	ldrb	r3, [r4, #0]
 800778a:	2220      	movs	r2, #32
 800778c:	4393      	bics	r3, r2
 800778e:	d1e6      	bne.n	800775e <ExecuteMonitor+0x226>
 8007790:	e7d9      	b.n	8007746 <ExecuteMonitor+0x20e>
		          		   flag=0;
 8007792:	4b40      	ldr	r3, [pc, #256]	; (8007894 <ExecuteMonitor+0x35c>)
 8007794:	464a      	mov	r2, r9
 8007796:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 8007798:	4b4a      	ldr	r3, [pc, #296]	; (80078c4 <ExecuteMonitor+0x38c>)
 800779a:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800779c:	4b4b      	ldr	r3, [pc, #300]	; (80078cc <ExecuteMonitor+0x394>)
 800779e:	701a      	strb	r2, [r3, #0]
 80077a0:	464b      	mov	r3, r9
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077a2:	4e4b      	ldr	r6, [pc, #300]	; (80078d0 <ExecuteMonitor+0x398>)
 80077a4:	4d48      	ldr	r5, [pc, #288]	; (80078c8 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077a6:	4c49      	ldr	r4, [pc, #292]	; (80078cc <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077a8:	18f2      	adds	r2, r6, r3
 80077aa:	3281      	adds	r2, #129	; 0x81
 80077ac:	32ff      	adds	r2, #255	; 0xff
 80077ae:	5ceb      	ldrb	r3, [r5, r3]
 80077b0:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 80077b2:	2001      	movs	r0, #1
 80077b4:	f009 f894 	bl	80108e0 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077b8:	7823      	ldrb	r3, [r4, #0]
 80077ba:	3301      	adds	r3, #1
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	7023      	strb	r3, [r4, #0]
 80077c0:	2b3f      	cmp	r3, #63	; 0x3f
 80077c2:	d9f1      	bls.n	80077a8 <ExecuteMonitor+0x270>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80077c4:	2240      	movs	r2, #64	; 0x40
 80077c6:	4649      	mov	r1, r9
 80077c8:	483f      	ldr	r0, [pc, #252]	; (80078c8 <ExecuteMonitor+0x390>)
 80077ca:	f00c ff69 	bl	80146a0 <memset>
 80077ce:	e792      	b.n	80076f6 <ExecuteMonitor+0x1be>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 80077d0:	4a3c      	ldr	r2, [pc, #240]	; (80078c4 <ExecuteMonitor+0x38c>)
 80077d2:	7813      	ldrb	r3, [r2, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 80077da:	4a39      	ldr	r2, [pc, #228]	; (80078c0 <ExecuteMonitor+0x388>)
 80077dc:	2101      	movs	r1, #1
 80077de:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 80077e0:	4a35      	ldr	r2, [pc, #212]	; (80078b8 <ExecuteMonitor+0x380>)
 80077e2:	7812      	ldrb	r2, [r2, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d018      	beq.n	800781a <ExecuteMonitor+0x2e2>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80077e8:	783a      	ldrb	r2, [r7, #0]
 80077ea:	7830      	ldrb	r0, [r6, #0]
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	7033      	strb	r3, [r6, #0]
 80077f0:	7829      	ldrb	r1, [r5, #0]
 80077f2:	1c4b      	adds	r3, r1, #1
 80077f4:	702b      	strb	r3, [r5, #0]
 80077f6:	4c34      	ldr	r4, [pc, #208]	; (80078c8 <ExecuteMonitor+0x390>)
 80077f8:	0113      	lsls	r3, r2, #4
 80077fa:	1a9a      	subs	r2, r3, r2
 80077fc:	4b2b      	ldr	r3, [pc, #172]	; (80078ac <ExecuteMonitor+0x374>)
 80077fe:	189b      	adds	r3, r3, r2
 8007800:	5c1b      	ldrb	r3, [r3, r0]
 8007802:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 8007804:	2001      	movs	r0, #1
 8007806:	f009 f86b 	bl	80108e0 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800780a:	782b      	ldrb	r3, [r5, #0]
 800780c:	18e4      	adds	r4, r4, r3
 800780e:	3c01      	subs	r4, #1
 8007810:	7823      	ldrb	r3, [r4, #0]
 8007812:	2220      	movs	r2, #32
 8007814:	4393      	bics	r3, r2
 8007816:	d1e7      	bne.n	80077e8 <ExecuteMonitor+0x2b0>
 8007818:	e7da      	b.n	80077d0 <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 800781a:	4b2a      	ldr	r3, [pc, #168]	; (80078c4 <ExecuteMonitor+0x38c>)
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 8007820:	4b1c      	ldr	r3, [pc, #112]	; (8007894 <ExecuteMonitor+0x35c>)
 8007822:	791b      	ldrb	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01d      	beq.n	8007864 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007828:	4b28      	ldr	r3, [pc, #160]	; (80078cc <ExecuteMonitor+0x394>)
 800782a:	4699      	mov	r9, r3
 800782c:	2500      	movs	r5, #0
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800782e:	4f28      	ldr	r7, [pc, #160]	; (80078d0 <ExecuteMonitor+0x398>)
 8007830:	4e25      	ldr	r6, [pc, #148]	; (80078c8 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007832:	464b      	mov	r3, r9
 8007834:	701d      	strb	r5, [r3, #0]
 8007836:	2300      	movs	r3, #0
 8007838:	4c24      	ldr	r4, [pc, #144]	; (80078cc <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800783a:	18fa      	adds	r2, r7, r3
 800783c:	3281      	adds	r2, #129	; 0x81
 800783e:	32ff      	adds	r2, #255	; 0xff
 8007840:	5cf3      	ldrb	r3, [r6, r3]
 8007842:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8007844:	20c8      	movs	r0, #200	; 0xc8
 8007846:	f006 fd41 	bl	800e2cc <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800784a:	7823      	ldrb	r3, [r4, #0]
 800784c:	3301      	adds	r3, #1
 800784e:	b2db      	uxtb	r3, r3
 8007850:	7023      	strb	r3, [r4, #0]
 8007852:	2b3f      	cmp	r3, #63	; 0x3f
 8007854:	d9f1      	bls.n	800783a <ExecuteMonitor+0x302>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 8007856:	4c0f      	ldr	r4, [pc, #60]	; (8007894 <ExecuteMonitor+0x35c>)
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	f009 f841 	bl	80108e0 <HAL_Delay>
                  while(flag != NonActive)
 800785e:	7923      	ldrb	r3, [r4, #4]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1e6      	bne.n	8007832 <ExecuteMonitor+0x2fa>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007864:	2240      	movs	r2, #64	; 0x40
 8007866:	2100      	movs	r1, #0
 8007868:	4817      	ldr	r0, [pc, #92]	; (80078c8 <ExecuteMonitor+0x390>)
 800786a:	f00c ff19 	bl	80146a0 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 800786e:	22c0      	movs	r2, #192	; 0xc0
 8007870:	2100      	movs	r1, #0
 8007872:	4818      	ldr	r0, [pc, #96]	; (80078d4 <ExecuteMonitor+0x39c>)
 8007874:	f00c ff14 	bl	80146a0 <memset>
		                    nonProcessingParameterIndex=0;
 8007878:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <ExecuteMonitor+0x36c>)
 800787a:	469b      	mov	fp, r3
 800787c:	2300      	movs	r3, #0
 800787e:	4699      	mov	r9, r3
 8007880:	469a      	mov	sl, r3
		            	    perviousCharacter= INTIAL_VALUE;
 8007882:	4f07      	ldr	r7, [pc, #28]	; (80078a0 <ExecuteMonitor+0x368>)
 8007884:	e6b5      	b.n	80075f2 <ExecuteMonitor+0xba>
		           }
	}
  }
}
 8007886:	b003      	add	sp, #12
 8007888:	bc3c      	pop	{r2, r3, r4, r5}
 800788a:	4690      	mov	r8, r2
 800788c:	4699      	mov	r9, r3
 800788e:	46a2      	mov	sl, r4
 8007890:	46ab      	mov	fp, r5
 8007892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007894:	20000000 	.word	0x20000000
 8007898:	2000186c 	.word	0x2000186c
 800789c:	200018c8 	.word	0x200018c8
 80078a0:	20006ed0 	.word	0x20006ed0
 80078a4:	20006ef1 	.word	0x20006ef1
 80078a8:	20006f13 	.word	0x20006f13
 80078ac:	200018dc 	.word	0x200018dc
 80078b0:	20006f12 	.word	0x20006f12
 80078b4:	20006ef0 	.word	0x20006ef0
 80078b8:	20006f10 	.word	0x20006f10
 80078bc:	20006f14 	.word	0x20006f14
 80078c0:	20006f11 	.word	0x20006f11
 80078c4:	20006ef2 	.word	0x20006ef2
 80078c8:	20001888 	.word	0x20001888
 80078cc:	20006ed1 	.word	0x20006ed1
 80078d0:	20001348 	.word	0x20001348
 80078d4:	200014c8 	.word	0x200014c8

080078d8 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 80078d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch(indMode){
 80078da:	4c28      	ldr	r4, [pc, #160]	; (800797c <StartDefaultTask+0xa4>)
				indMode =IND_OFF;
 80078dc:	0026      	movs	r6, r4
				indMode =IND_OFF;
 80078de:	0025      	movs	r5, r4
 80078e0:	e020      	b.n	8007924 <StartDefaultTask+0x4c>
				RTOS_IND_blink(200);
 80078e2:	2790      	movs	r7, #144	; 0x90
 80078e4:	05ff      	lsls	r7, r7, #23
 80078e6:	2201      	movs	r2, #1
 80078e8:	2180      	movs	r1, #128	; 0x80
 80078ea:	0038      	movs	r0, r7
 80078ec:	f00a fc14 	bl	8012118 <HAL_GPIO_WritePin>
 80078f0:	20c8      	movs	r0, #200	; 0xc8
 80078f2:	f007 f8a4 	bl	800ea3e <osDelay>
 80078f6:	2200      	movs	r2, #0
 80078f8:	2180      	movs	r1, #128	; 0x80
 80078fa:	0038      	movs	r0, r7
 80078fc:	f00a fc0c 	bl	8012118 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007900:	4b1e      	ldr	r3, [pc, #120]	; (800797c <StartDefaultTask+0xa4>)
 8007902:	2200      	movs	r2, #0
 8007904:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 8007906:	f006 f813 	bl	800d930 <CheckAttachedButtons>
		ExecuteSnippet();
 800790a:	f7fd fcc7 	bl	800529c <ExecuteSnippet>
		ExecuteMonitor();
 800790e:	f7ff fe13 	bl	8007538 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007912:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <StartDefaultTask+0xa8>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d102      	bne.n	8007920 <StartDefaultTask+0x48>
			delayButtonStateReset = false;
 800791a:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <StartDefaultTask+0xac>)
 800791c:	2200      	movs	r2, #0
 800791e:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8007920:	f008 fe72 	bl	8010608 <vPortYield>
		switch(indMode){
 8007924:	7823      	ldrb	r3, [r4, #0]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d004      	beq.n	8007934 <StartDefaultTask+0x5c>
 800792a:	2b03      	cmp	r3, #3
 800792c:	d014      	beq.n	8007958 <StartDefaultTask+0x80>
 800792e:	2b01      	cmp	r3, #1
 8007930:	d1e9      	bne.n	8007906 <StartDefaultTask+0x2e>
 8007932:	e7d6      	b.n	80078e2 <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8007934:	2790      	movs	r7, #144	; 0x90
 8007936:	05ff      	lsls	r7, r7, #23
 8007938:	2201      	movs	r2, #1
 800793a:	2180      	movs	r1, #128	; 0x80
 800793c:	0038      	movs	r0, r7
 800793e:	f00a fbeb 	bl	8012118 <HAL_GPIO_WritePin>
 8007942:	2064      	movs	r0, #100	; 0x64
 8007944:	f007 f87b 	bl	800ea3e <osDelay>
 8007948:	2200      	movs	r2, #0
 800794a:	2180      	movs	r1, #128	; 0x80
 800794c:	0038      	movs	r0, r7
 800794e:	f00a fbe3 	bl	8012118 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007952:	2300      	movs	r3, #0
 8007954:	7033      	strb	r3, [r6, #0]
				break;
 8007956:	e7d6      	b.n	8007906 <StartDefaultTask+0x2e>
				RTOS_IND_blink(30);
 8007958:	2790      	movs	r7, #144	; 0x90
 800795a:	05ff      	lsls	r7, r7, #23
 800795c:	2201      	movs	r2, #1
 800795e:	2180      	movs	r1, #128	; 0x80
 8007960:	0038      	movs	r0, r7
 8007962:	f00a fbd9 	bl	8012118 <HAL_GPIO_WritePin>
 8007966:	201e      	movs	r0, #30
 8007968:	f007 f869 	bl	800ea3e <osDelay>
 800796c:	2200      	movs	r2, #0
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	0038      	movs	r0, r7
 8007972:	f00a fbd1 	bl	8012118 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007976:	2300      	movs	r3, #0
 8007978:	702b      	strb	r3, [r5, #0]
				break;
 800797a:	e7c4      	b.n	8007906 <StartDefaultTask+0x2e>
 800797c:	20000f68 	.word	0x20000f68
 8007980:	20001f1d 	.word	0x20001f1d
 8007984:	20001f1b 	.word	0x20001f1b

08007988 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8007988:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 800798a:	4b04      	ldr	r3, [pc, #16]	; (800799c <vMainConfigureTimerForRunTimeStats+0x14>)
 800798c:	6818      	ldr	r0, [r3, #0]
 800798e:	4904      	ldr	r1, [pc, #16]	; (80079a0 <vMainConfigureTimerForRunTimeStats+0x18>)
 8007990:	f7f8 fbde 	bl	8000150 <__udivsi3>
 8007994:	4b03      	ldr	r3, [pc, #12]	; (80079a4 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8007996:	6018      	str	r0, [r3, #0]
}
 8007998:	bd10      	pop	{r4, pc}
 800799a:	46c0      	nop			; (mov r8, r8)
 800799c:	20000100 	.word	0x20000100
 80079a0:	00002710 	.word	0x00002710
 80079a4:	20001954 	.word	0x20001954

080079a8 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 80079a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80079aa:	4b0f      	ldr	r3, [pc, #60]	; (80079e8 <ulMainGetRunTimeCounterValue+0x40>)
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	21fa      	movs	r1, #250	; 0xfa
 80079b0:	0089      	lsls	r1, r1, #2
 80079b2:	f7f8 fbcd 	bl	8000150 <__udivsi3>
 80079b6:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80079b8:	4b0c      	ldr	r3, [pc, #48]	; (80079ec <ulMainGetRunTimeCounterValue+0x44>)
 80079ba:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80079bc:	f007 ff4a 	bl	800f854 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80079c0:	4b0b      	ldr	r3, [pc, #44]	; (80079f0 <ulMainGetRunTimeCounterValue+0x48>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	015b      	lsls	r3, r3, #5
 80079c6:	d50d      	bpl.n	80079e4 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 80079c8:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80079ca:	4b08      	ldr	r3, [pc, #32]	; (80079ec <ulMainGetRunTimeCounterValue+0x44>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 80079d0:	0084      	lsls	r4, r0, #2
 80079d2:	1824      	adds	r4, r4, r0
 80079d4:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80079d6:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <ulMainGetRunTimeCounterValue+0x4c>)
 80079d8:	6819      	ldr	r1, [r3, #0]
 80079da:	0028      	movs	r0, r5
 80079dc:	f7f8 fbb8 	bl	8000150 <__udivsi3>
 80079e0:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 80079e2:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80079e4:	1b2d      	subs	r5, r5, r4
 80079e6:	e7f3      	b.n	80079d0 <ulMainGetRunTimeCounterValue+0x28>
 80079e8:	20000100 	.word	0x20000100
 80079ec:	e000e018 	.word	0xe000e018
 80079f0:	e000ed04 	.word	0xe000ed04
 80079f4:	20001954 	.word	0x20001954

080079f8 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 80079f8:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 80079fa:	f008 fdad 	bl	8010558 <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 80079fe:	b2c4      	uxtb	r4, r0
 8007a00:	0020      	movs	r0, r4
 8007a02:	f003 fbff 	bl	800b204 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007a06:	0020      	movs	r0, r4
 8007a08:	f004 f88c 	bl	800bb24 <SwitchStreamDMAToMsg>
}
 8007a0c:	bd10      	pop	{r4, pc}
	...

08007a10 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a12:	b085      	sub	sp, #20
 8007a14:	000d      	movs	r5, r1
 8007a16:	0014      	movs	r4, r2
 8007a18:	220f      	movs	r2, #15
 8007a1a:	446a      	add	r2, sp
 8007a1c:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a1e:	aa0a      	add	r2, sp, #40	; 0x28
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d058      	beq.n	8007ad8 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d100      	bne.n	8007a2c <SetupDMAStreams+0x1c>
 8007a2a:	e0be      	b.n	8007baa <SetupDMAStreams+0x19a>
 8007a2c:	2a00      	cmp	r2, #0
 8007a2e:	d100      	bne.n	8007a32 <SetupDMAStreams+0x22>
 8007a30:	e0bf      	b.n	8007bb2 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 8007a32:	2800      	cmp	r0, #0
 8007a34:	d055      	beq.n	8007ae2 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8007a36:	2801      	cmp	r0, #1
 8007a38:	d100      	bne.n	8007a3c <SetupDMAStreams+0x2c>
 8007a3a:	e08b      	b.n	8007b54 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8007a3c:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007a3e:	2802      	cmp	r0, #2
 8007a40:	d000      	beq.n	8007a44 <SetupDMAStreams+0x34>
 8007a42:	e0b3      	b.n	8007bac <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007a44:	0018      	movs	r0, r3
 8007a46:	f006 fe2d 	bl	800e6a4 <GetUart>
 8007a4a:	0006      	movs	r6, r0
 8007a4c:	ab0a      	add	r3, sp, #40	; 0x28
 8007a4e:	7818      	ldrb	r0, [r3, #0]
 8007a50:	f006 fe28 	bl	800e6a4 <GetUart>
 8007a54:	0001      	movs	r1, r0
 8007a56:	2201      	movs	r2, #1
 8007a58:	0030      	movs	r0, r6
 8007a5a:	f7ff fbf9 	bl	8007250 <StartDMAstream>
 8007a5e:	0002      	movs	r2, r0
 8007a60:	2817      	cmp	r0, #23
 8007a62:	d100      	bne.n	8007a66 <SetupDMAStreams+0x56>
 8007a64:	e0a2      	b.n	8007bac <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007a66:	0160      	lsls	r0, r4, #5
 8007a68:	1b00      	subs	r0, r0, r4
 8007a6a:	0080      	lsls	r0, r0, #2
 8007a6c:	1900      	adds	r0, r0, r4
 8007a6e:	00c0      	lsls	r0, r0, #3
 8007a70:	21fa      	movs	r1, #250	; 0xfa
 8007a72:	0089      	lsls	r1, r1, #2
 8007a74:	f7f8 fb6c 	bl	8000150 <__udivsi3>
 8007a78:	0004      	movs	r4, r0
 8007a7a:	260f      	movs	r6, #15
 8007a7c:	446e      	add	r6, sp
 8007a7e:	4b4e      	ldr	r3, [pc, #312]	; (8007bb8 <SetupDMAStreams+0x1a8>)
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	0033      	movs	r3, r6
 8007a84:	2200      	movs	r2, #0
 8007a86:	0001      	movs	r1, r0
 8007a88:	484c      	ldr	r0, [pc, #304]	; (8007bbc <SetupDMAStreams+0x1ac>)
 8007a8a:	f008 fc11 	bl	80102b0 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007a8e:	7833      	ldrb	r3, [r6, #0]
 8007a90:	3b01      	subs	r3, #1
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	4a4a      	ldr	r2, [pc, #296]	; (8007bc0 <SetupDMAStreams+0x1b0>)
 8007a96:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007a98:	ab0a      	add	r3, sp, #40	; 0x28
 8007a9a:	7818      	ldrb	r0, [r3, #0]
 8007a9c:	f006 fe02 	bl	800e6a4 <GetUart>
 8007aa0:	0007      	movs	r7, r0
 8007aa2:	7830      	ldrb	r0, [r6, #0]
 8007aa4:	f006 fdfe 	bl	800e6a4 <GetUart>
 8007aa8:	0001      	movs	r1, r0
 8007aaa:	2201      	movs	r2, #1
 8007aac:	0038      	movs	r0, r7
 8007aae:	f7ff fbcf 	bl	8007250 <StartDMAstream>
 8007ab2:	0002      	movs	r2, r0
 8007ab4:	2817      	cmp	r0, #23
 8007ab6:	d079      	beq.n	8007bac <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007ab8:	4b3f      	ldr	r3, [pc, #252]	; (8007bb8 <SetupDMAStreams+0x1a8>)
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	ab0a      	add	r3, sp, #40	; 0x28
 8007abe:	2200      	movs	r2, #0
 8007ac0:	0021      	movs	r1, r4
 8007ac2:	483e      	ldr	r0, [pc, #248]	; (8007bbc <SetupDMAStreams+0x1ac>)
 8007ac4:	f008 fbf4 	bl	80102b0 <xTimerCreate>
 8007ac8:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8007aca:	ab0a      	add	r3, sp, #40	; 0x28
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4a3b      	ldr	r2, [pc, #236]	; (8007bc0 <SetupDMAStreams+0x1b0>)
 8007ad4:	509d      	str	r5, [r3, r2]
 8007ad6:	e02d      	b.n	8007b34 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8007ad8:	4a3a      	ldr	r2, [pc, #232]	; (8007bc4 <SetupDMAStreams+0x1b4>)
 8007ada:	2102      	movs	r1, #2
 8007adc:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007ade:	2267      	movs	r2, #103	; 0x67
 8007ae0:	e064      	b.n	8007bac <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f006 fdde 	bl	800e6a4 <GetUart>
 8007ae8:	0006      	movs	r6, r0
 8007aea:	ab0a      	add	r3, sp, #40	; 0x28
 8007aec:	7818      	ldrb	r0, [r3, #0]
 8007aee:	f006 fdd9 	bl	800e6a4 <GetUart>
 8007af2:	0001      	movs	r1, r0
 8007af4:	2201      	movs	r2, #1
 8007af6:	0030      	movs	r0, r6
 8007af8:	f7ff fbaa 	bl	8007250 <StartDMAstream>
 8007afc:	0002      	movs	r2, r0
 8007afe:	2817      	cmp	r0, #23
 8007b00:	d054      	beq.n	8007bac <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007b02:	260f      	movs	r6, #15
 8007b04:	446e      	add	r6, sp
 8007b06:	0160      	lsls	r0, r4, #5
 8007b08:	1b00      	subs	r0, r0, r4
 8007b0a:	0080      	lsls	r0, r0, #2
 8007b0c:	1900      	adds	r0, r0, r4
 8007b0e:	00c0      	lsls	r0, r0, #3
 8007b10:	21fa      	movs	r1, #250	; 0xfa
 8007b12:	0089      	lsls	r1, r1, #2
 8007b14:	f7f8 fb1c 	bl	8000150 <__udivsi3>
 8007b18:	0001      	movs	r1, r0
 8007b1a:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <SetupDMAStreams+0x1a8>)
 8007b1c:	9300      	str	r3, [sp, #0]
 8007b1e:	0033      	movs	r3, r6
 8007b20:	2200      	movs	r2, #0
 8007b22:	4826      	ldr	r0, [pc, #152]	; (8007bbc <SetupDMAStreams+0x1ac>)
 8007b24:	f008 fbc4 	bl	80102b0 <xTimerCreate>
 8007b28:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007b2a:	7833      	ldrb	r3, [r6, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4a23      	ldr	r2, [pc, #140]	; (8007bc0 <SetupDMAStreams+0x1b0>)
 8007b32:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8007b34:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	d038      	beq.n	8007bac <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007b3a:	f007 fe85 	bl	800f848 <xTaskGetTickCount>
 8007b3e:	0002      	movs	r2, r0
 8007b40:	2301      	movs	r3, #1
 8007b42:	425b      	negs	r3, r3
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2300      	movs	r3, #0
 8007b48:	2101      	movs	r1, #1
 8007b4a:	0020      	movs	r0, r4
 8007b4c:	f008 fbce 	bl	80102ec <xTimerGenericCommand>
	return BOS_OK;
 8007b50:	2200      	movs	r2, #0
 8007b52:	e02b      	b.n	8007bac <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b54:	0010      	movs	r0, r2
 8007b56:	f006 fda5 	bl	800e6a4 <GetUart>
 8007b5a:	0006      	movs	r6, r0
 8007b5c:	230f      	movs	r3, #15
 8007b5e:	446b      	add	r3, sp
 8007b60:	7818      	ldrb	r0, [r3, #0]
 8007b62:	f006 fd9f 	bl	800e6a4 <GetUart>
 8007b66:	0001      	movs	r1, r0
 8007b68:	2201      	movs	r2, #1
 8007b6a:	0030      	movs	r0, r6
 8007b6c:	f7ff fb70 	bl	8007250 <StartDMAstream>
 8007b70:	0002      	movs	r2, r0
 8007b72:	2817      	cmp	r0, #23
 8007b74:	d01a      	beq.n	8007bac <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b76:	0160      	lsls	r0, r4, #5
 8007b78:	1b00      	subs	r0, r0, r4
 8007b7a:	0080      	lsls	r0, r0, #2
 8007b7c:	1900      	adds	r0, r0, r4
 8007b7e:	00c0      	lsls	r0, r0, #3
 8007b80:	21fa      	movs	r1, #250	; 0xfa
 8007b82:	0089      	lsls	r1, r1, #2
 8007b84:	f7f8 fae4 	bl	8000150 <__udivsi3>
 8007b88:	0001      	movs	r1, r0
 8007b8a:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <SetupDMAStreams+0x1a8>)
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	ab0a      	add	r3, sp, #40	; 0x28
 8007b90:	2200      	movs	r2, #0
 8007b92:	480a      	ldr	r0, [pc, #40]	; (8007bbc <SetupDMAStreams+0x1ac>)
 8007b94:	f008 fb8c 	bl	80102b0 <xTimerCreate>
 8007b98:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007b9a:	230f      	movs	r3, #15
 8007b9c:	446b      	add	r3, sp
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	3b01      	subs	r3, #1
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4a06      	ldr	r2, [pc, #24]	; (8007bc0 <SetupDMAStreams+0x1b0>)
 8007ba6:	509d      	str	r5, [r3, r2]
 8007ba8:	e7c4      	b.n	8007b34 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 8007baa:	2267      	movs	r2, #103	; 0x67
}
 8007bac:	0010      	movs	r0, r2
 8007bae:	b005      	add	sp, #20
 8007bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8007bb2:	2267      	movs	r2, #103	; 0x67
 8007bb4:	e7fa      	b.n	8007bac <SetupDMAStreams+0x19c>
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	080079f9 	.word	0x080079f9
 8007bbc:	0801b958 	.word	0x0801b958
 8007bc0:	20001838 	.word	0x20001838
 8007bc4:	2000116c 	.word	0x2000116c

08007bc8 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007bc8:	b510      	push	{r4, lr}
	switch(port){
 8007bca:	2806      	cmp	r0, #6
 8007bcc:	d80a      	bhi.n	8007be4 <NotifyMessagingTask+0x1c>
 8007bce:	0080      	lsls	r0, r0, #2
 8007bd0:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <NotifyMessagingTask+0x70>)
 8007bd2:	581b      	ldr	r3, [r3, r0]
 8007bd4:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8007bd6:	4b19      	ldr	r3, [pc, #100]	; (8007c3c <NotifyMessagingTask+0x74>)
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2202      	movs	r2, #2
 8007bde:	2100      	movs	r1, #0
 8007be0:	f008 faa4 	bl	801012c <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007be4:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8007be6:	4b16      	ldr	r3, [pc, #88]	; (8007c40 <NotifyMessagingTask+0x78>)
 8007be8:	6818      	ldr	r0, [r3, #0]
 8007bea:	2300      	movs	r3, #0
 8007bec:	2202      	movs	r2, #2
 8007bee:	2100      	movs	r1, #0
 8007bf0:	f008 fa9c 	bl	801012c <xTaskGenericNotify>
			break;
 8007bf4:	e7f6      	b.n	8007be4 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007bf6:	4b13      	ldr	r3, [pc, #76]	; (8007c44 <NotifyMessagingTask+0x7c>)
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	2100      	movs	r1, #0
 8007c00:	f008 fa94 	bl	801012c <xTaskGenericNotify>
			break;
 8007c04:	e7ee      	b.n	8007be4 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007c06:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <NotifyMessagingTask+0x80>)
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	2100      	movs	r1, #0
 8007c10:	f008 fa8c 	bl	801012c <xTaskGenericNotify>
			break;
 8007c14:	e7e6      	b.n	8007be4 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8007c16:	4b0d      	ldr	r3, [pc, #52]	; (8007c4c <NotifyMessagingTask+0x84>)
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	2100      	movs	r1, #0
 8007c20:	f008 fa84 	bl	801012c <xTaskGenericNotify>
			break;
 8007c24:	e7de      	b.n	8007be4 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <NotifyMessagingTask+0x88>)
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	2100      	movs	r1, #0
 8007c30:	f008 fa7c 	bl	801012c <xTaskGenericNotify>
}
 8007c34:	e7d6      	b.n	8007be4 <NotifyMessagingTask+0x1c>
 8007c36:	46c0      	nop			; (mov r8, r8)
 8007c38:	0801b93c 	.word	0x0801b93c
 8007c3c:	20001854 	.word	0x20001854
 8007c40:	20001858 	.word	0x20001858
 8007c44:	2000185c 	.word	0x2000185c
 8007c48:	20001860 	.word	0x20001860
 8007c4c:	20001864 	.word	0x20001864
 8007c50:	20001868 	.word	0x20001868

08007c54 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c56:	46de      	mov	lr, fp
 8007c58:	4657      	mov	r7, sl
 8007c5a:	464e      	mov	r6, r9
 8007c5c:	4645      	mov	r5, r8
 8007c5e:	b5e0      	push	{r5, r6, r7, lr}
 8007c60:	b087      	sub	sp, #28
 8007c62:	0005      	movs	r5, r0
 8007c64:	9103      	str	r1, [sp, #12]
 8007c66:	0014      	movs	r4, r2
 8007c68:	4699      	mov	r9, r3
 8007c6a:	ab10      	add	r3, sp, #64	; 0x40
 8007c6c:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007c6e:	0003      	movs	r3, r0
 8007c70:	4313      	orrs	r3, r2
 8007c72:	d100      	bne.n	8007c76 <SendMessageFromPort+0x22>
 8007c74:	e1e8      	b.n	8008048 <SendMessageFromPort+0x3f4>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d14d      	bne.n	8007d16 <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c7a:	1c93      	adds	r3, r2, #2
 8007c7c:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007c7e:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d900      	bls.n	8007c86 <SendMessageFromPort+0x32>
 8007c84:	e162      	b.n	8007f4c <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8007c86:	2000      	movs	r0, #0
 8007c88:	f007 fd44 	bl	800f714 <uxTaskPriorityGet>
 8007c8c:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007c8e:	2105      	movs	r1, #5
 8007c90:	2000      	movs	r0, #0
 8007c92:	f007 fd4f 	bl	800f734 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8007c96:	4bc4      	ldr	r3, [pc, #784]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007c98:	2248      	movs	r2, #72	; 0x48
 8007c9a:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007c9c:	3212      	adds	r2, #18
 8007c9e:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d000      	beq.n	8007ca8 <SendMessageFromPort+0x54>
 8007ca6:	e1e8      	b.n	800807a <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8007ca8:	1e73      	subs	r3, r6, #1
 8007caa:	4ac0      	ldr	r2, [pc, #768]	; (8007fac <SendMessageFromPort+0x358>)
 8007cac:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007cae:	4ec0      	ldr	r6, [pc, #768]	; (8007fb0 <SendMessageFromPort+0x35c>)
 8007cb0:	00d9      	lsls	r1, r3, #3
 8007cb2:	1ac9      	subs	r1, r1, r3
 8007cb4:	00c9      	lsls	r1, r1, #3
 8007cb6:	4bbf      	ldr	r3, [pc, #764]	; (8007fb4 <SendMessageFromPort+0x360>)
 8007cb8:	18c9      	adds	r1, r1, r3
 8007cba:	003a      	movs	r2, r7
 8007cbc:	0030      	movs	r0, r6
 8007cbe:	f00c fce6 	bl	801468e <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8007cc2:	3e03      	subs	r6, #3
 8007cc4:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8007cc6:	1cfb      	adds	r3, r7, #3
 8007cc8:	4698      	mov	r8, r3
 8007cca:	001a      	movs	r2, r3
 8007ccc:	0031      	movs	r1, r6
 8007cce:	48ba      	ldr	r0, [pc, #744]	; (8007fb8 <SendMessageFromPort+0x364>)
 8007cd0:	f00c fcdd 	bl	801468e <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007cd4:	b2bf      	uxth	r7, r7
 8007cd6:	1cf9      	adds	r1, r7, #3
 8007cd8:	48b7      	ldr	r0, [pc, #732]	; (8007fb8 <SendMessageFromPort+0x364>)
 8007cda:	f004 fae7 	bl	800c2ac <CalculateCRC8>
 8007cde:	4643      	mov	r3, r8
 8007ce0:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8007ce2:	2238      	movs	r2, #56	; 0x38
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	48b4      	ldr	r0, [pc, #720]	; (8007fb8 <SendMessageFromPort+0x364>)
 8007ce8:	f00c fcda 	bl	80146a0 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007cec:	3402      	adds	r4, #2
 8007cee:	b2e4      	uxtb	r4, r4
 8007cf0:	2c01      	cmp	r4, #1
 8007cf2:	d800      	bhi.n	8007cf6 <SendMessageFromPort+0xa2>
 8007cf4:	e14e      	b.n	8007f94 <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007cf6:	464b      	mov	r3, r9
 8007cf8:	3b2c      	subs	r3, #44	; 0x2c
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d800      	bhi.n	8007d02 <SendMessageFromPort+0xae>
 8007d00:	e110      	b.n	8007f24 <SendMessageFromPort+0x2d0>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007d02:	4bae      	ldr	r3, [pc, #696]	; (8007fbc <SendMessageFromPort+0x368>)
 8007d04:	88db      	ldrh	r3, [r3, #6]
 8007d06:	2600      	movs	r6, #0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d100      	bne.n	8007d0e <SendMessageFromPort+0xba>
 8007d0c:	e111      	b.n	8007f32 <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007d0e:	3704      	adds	r7, #4
 8007d10:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 8007d12:	4cab      	ldr	r4, [pc, #684]	; (8007fc0 <SendMessageFromPort+0x36c>)
 8007d14:	e12d      	b.n	8007f72 <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007d16:	9b03      	ldr	r3, [sp, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d002      	beq.n	8007d22 <SendMessageFromPort+0xce>
 8007d1c:	2a00      	cmp	r2, #0
 8007d1e:	d100      	bne.n	8007d22 <SendMessageFromPort+0xce>
 8007d20:	e194      	b.n	800804c <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d22:	2000      	movs	r0, #0
 8007d24:	f007 fcf6 	bl	800f714 <uxTaskPriorityGet>
 8007d28:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d2a:	2105      	movs	r1, #5
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f007 fd01 	bl	800f734 <vTaskPrioritySet>
	message[0] ='H';
 8007d32:	4b9d      	ldr	r3, [pc, #628]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007d34:	2248      	movs	r2, #72	; 0x48
 8007d36:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007d38:	3212      	adds	r2, #18
 8007d3a:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d3c:	464b      	mov	r3, r9
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0b2      	beq.n	8007ca8 <SendMessageFromPort+0x54>
		if(src == 0)
 8007d42:	9b03      	ldr	r3, [sp, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <SendMessageFromPort+0xfa>
			src =myID;
 8007d48:	4b9e      	ldr	r3, [pc, #632]	; (8007fc4 <SendMessageFromPort+0x370>)
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	9303      	str	r3, [sp, #12]
		message[2] =length;
 8007d4e:	4a96      	ldr	r2, [pc, #600]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007d50:	2300      	movs	r3, #0
 8007d52:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8007d54:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 8007d56:	9b03      	ldr	r3, [sp, #12]
 8007d58:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d5a:	4998      	ldr	r1, [pc, #608]	; (8007fbc <SendMessageFromPort+0x368>)
 8007d5c:	790b      	ldrb	r3, [r1, #4]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	7848      	ldrb	r0, [r1, #1]
 8007d62:	0080      	lsls	r0, r0, #2
 8007d64:	4303      	orrs	r3, r0
 8007d66:	7809      	ldrb	r1, [r1, #0]
 8007d68:	430b      	orrs	r3, r1
		if(code > 0xFF)
 8007d6a:	21ff      	movs	r1, #255	; 0xff
 8007d6c:	4549      	cmp	r1, r9
 8007d6e:	4189      	sbcs	r1, r1
 8007d70:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d72:	0049      	lsls	r1, r1, #1
 8007d74:	430b      	orrs	r3, r1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	7191      	strb	r1, [r2, #6]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	4693      	mov	fp, r2
		if(extendCode == true){
 8007d82:	29ff      	cmp	r1, #255	; 0xff
 8007d84:	d904      	bls.n	8007d90 <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007d86:	0a0a      	lsrs	r2, r1, #8
 8007d88:	4987      	ldr	r1, [pc, #540]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007d8a:	71ca      	strb	r2, [r1, #7]
			++shift;
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007d90:	2e2e      	cmp	r6, #46	; 0x2e
 8007d92:	d932      	bls.n	8007dfa <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 8007d94:	2280      	movs	r2, #128	; 0x80
 8007d96:	4252      	negs	r2, r2
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	4a83      	ldr	r2, [pc, #524]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007d9c:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8007d9e:	4b8a      	ldr	r3, [pc, #552]	; (8007fc8 <SendMessageFromPort+0x374>)
 8007da0:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 8007da2:	2300      	movs	r3, #0
 8007da4:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8007da6:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007da8:	465b      	mov	r3, fp
 8007daa:	1ddf      	adds	r7, r3, #7
 8007dac:	003b      	movs	r3, r7
 8007dae:	4694      	mov	ip, r2
 8007db0:	4463      	add	r3, ip
 8007db2:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 8007db4:	4b84      	ldr	r3, [pc, #528]	; (8007fc8 <SendMessageFromPort+0x374>)
 8007db6:	881f      	ldrh	r7, [r3, #0]
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	d02d      	beq.n	8007e18 <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007dbc:	0031      	movs	r1, r6
 8007dbe:	0038      	movs	r0, r7
 8007dc0:	f7f8 f9c6 	bl	8000150 <__udivsi3>
 8007dc4:	b280      	uxth	r0, r0
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d141      	bne.n	8007e4e <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007dca:	4b77      	ldr	r3, [pc, #476]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007dcc:	795a      	ldrb	r2, [r3, #5]
 8007dce:	237f      	movs	r3, #127	; 0x7f
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	4a75      	ldr	r2, [pc, #468]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007dd4:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007dd6:	4e7d      	ldr	r6, [pc, #500]	; (8007fcc <SendMessageFromPort+0x378>)
 8007dd8:	8831      	ldrh	r1, [r6, #0]
 8007dda:	4b7d      	ldr	r3, [pc, #500]	; (8007fd0 <SendMessageFromPort+0x37c>)
 8007ddc:	18c9      	adds	r1, r1, r3
 8007dde:	003a      	movs	r2, r7
 8007de0:	9805      	ldr	r0, [sp, #20]
 8007de2:	f00c fc54 	bl	801468e <memcpy>
					ptrShift =0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8007dea:	4a77      	ldr	r2, [pc, #476]	; (8007fc8 <SendMessageFromPort+0x374>)
 8007dec:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8007dee:	1d3b      	adds	r3, r7, #4
 8007df0:	445b      	add	r3, fp
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 8007df6:	003e      	movs	r6, r7
 8007df8:	e7dc      	b.n	8007db4 <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007dfa:	465b      	mov	r3, fp
 8007dfc:	3307      	adds	r3, #7
 8007dfe:	486a      	ldr	r0, [pc, #424]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007e00:	1818      	adds	r0, r3, r0
 8007e02:	4b72      	ldr	r3, [pc, #456]	; (8007fcc <SendMessageFromPort+0x378>)
 8007e04:	8819      	ldrh	r1, [r3, #0]
 8007e06:	4b72      	ldr	r3, [pc, #456]	; (8007fd0 <SendMessageFromPort+0x37c>)
 8007e08:	18c9      	adds	r1, r1, r3
 8007e0a:	0032      	movs	r2, r6
 8007e0c:	f00c fc3f 	bl	801468e <memcpy>
			length =numberOfParams + shift + 4;
 8007e10:	1d31      	adds	r1, r6, #4
 8007e12:	4459      	add	r1, fp
 8007e14:	b2cb      	uxtb	r3, r1
 8007e16:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 8007e18:	4b6e      	ldr	r3, [pc, #440]	; (8007fd4 <SendMessageFromPort+0x380>)
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d058      	beq.n	8007ed2 <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 8007e20:	4b6d      	ldr	r3, [pc, #436]	; (8007fd8 <SendMessageFromPort+0x384>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2bff      	cmp	r3, #255	; 0xff
 8007e26:	d100      	bne.n	8007e2a <SendMessageFromPort+0x1d6>
 8007e28:	e114      	b.n	8008054 <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007e2a:	4a6c      	ldr	r2, [pc, #432]	; (8007fdc <SendMessageFromPort+0x388>)
 8007e2c:	7817      	ldrb	r7, [r2, #0]
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d076      	beq.n	8007f20 <SendMessageFromPort+0x2cc>
 8007e32:	2201      	movs	r2, #1
 8007e34:	409a      	lsls	r2, r3
 8007e36:	4690      	mov	r8, r2
 8007e38:	4869      	ldr	r0, [pc, #420]	; (8007fe0 <SendMessageFromPort+0x38c>)
 8007e3a:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8007e3c:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007e3e:	495a      	ldr	r1, [pc, #360]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007e40:	468c      	mov	ip, r1
 8007e42:	44b4      	add	ip, r6
 8007e44:	9505      	str	r5, [sp, #20]
 8007e46:	4645      	mov	r5, r8
 8007e48:	46a0      	mov	r8, r4
 8007e4a:	465c      	mov	r4, fp
 8007e4c:	e017      	b.n	8007e7e <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007e4e:	9600      	str	r6, [sp, #0]
 8007e50:	464b      	mov	r3, r9
 8007e52:	0022      	movs	r2, r4
 8007e54:	9903      	ldr	r1, [sp, #12]
 8007e56:	0028      	movs	r0, r5
 8007e58:	f7ff fefc 	bl	8007c54 <SendMessageFromPort>
					osDelay(10);
 8007e5c:	200a      	movs	r0, #10
 8007e5e:	f006 fdee 	bl	800ea3e <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007e62:	4a59      	ldr	r2, [pc, #356]	; (8007fc8 <SendMessageFromPort+0x374>)
 8007e64:	8813      	ldrh	r3, [r2, #0]
 8007e66:	1b9b      	subs	r3, r3, r6
 8007e68:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8007e6a:	4a58      	ldr	r2, [pc, #352]	; (8007fcc <SendMessageFromPort+0x378>)
 8007e6c:	8813      	ldrh	r3, [r2, #0]
 8007e6e:	18f3      	adds	r3, r6, r3
 8007e70:	8013      	strh	r3, [r2, #0]
 8007e72:	e79f      	b.n	8007db4 <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007e74:	3301      	adds	r3, #1
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	3002      	adds	r0, #2
 8007e7a:	42bb      	cmp	r3, r7
 8007e7c:	d80e      	bhi.n	8007e9c <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 8007e7e:	8801      	ldrh	r1, [r0, #0]
 8007e80:	420d      	tst	r5, r1
 8007e82:	d0f7      	beq.n	8007e74 <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 8007e84:	3201      	adds	r2, #1
 8007e86:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007e88:	18b1      	adds	r1, r6, r2
 8007e8a:	3101      	adds	r1, #1
 8007e8c:	292d      	cmp	r1, #45	; 0x2d
 8007e8e:	dd00      	ble.n	8007e92 <SendMessageFromPort+0x23e>
 8007e90:	e0de      	b.n	8008050 <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007e92:	4661      	mov	r1, ip
 8007e94:	1889      	adds	r1, r1, r2
 8007e96:	1909      	adds	r1, r1, r4
 8007e98:	718b      	strb	r3, [r1, #6]
 8007e9a:	e7eb      	b.n	8007e74 <SendMessageFromPort+0x220>
 8007e9c:	46a3      	mov	fp, r4
 8007e9e:	9d05      	ldr	r5, [sp, #20]
 8007ea0:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007ea2:	465b      	mov	r3, fp
 8007ea4:	3307      	adds	r3, #7
 8007ea6:	199b      	adds	r3, r3, r6
 8007ea8:	189b      	adds	r3, r3, r2
 8007eaa:	493f      	ldr	r1, [pc, #252]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007eac:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007eae:	18b1      	adds	r1, r6, r2
 8007eb0:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8007eb2:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007eb4:	292d      	cmp	r1, #45	; 0x2d
 8007eb6:	dc49      	bgt.n	8007f4c <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007eb8:	484a      	ldr	r0, [pc, #296]	; (8007fe4 <SendMessageFromPort+0x390>)
 8007eba:	7801      	ldrb	r1, [r0, #0]
 8007ebc:	3101      	adds	r1, #1
 8007ebe:	b2c9      	uxtb	r1, r1
 8007ec0:	7001      	strb	r1, [r0, #0]
 8007ec2:	4839      	ldr	r0, [pc, #228]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007ec4:	18c3      	adds	r3, r0, r3
 8007ec6:	7059      	strb	r1, [r3, #1]
 8007ec8:	4651      	mov	r1, sl
 8007eca:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007ecc:	188a      	adds	r2, r1, r2
 8007ece:	b2d3      	uxtb	r3, r2
 8007ed0:	469a      	mov	sl, r3
	message[2] =length;
 8007ed2:	4b35      	ldr	r3, [pc, #212]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007ed4:	4698      	mov	r8, r3
 8007ed6:	4652      	mov	r2, sl
 8007ed8:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007eda:	1cd6      	adds	r6, r2, #3
 8007edc:	0032      	movs	r2, r6
 8007ede:	4641      	mov	r1, r8
 8007ee0:	4835      	ldr	r0, [pc, #212]	; (8007fb8 <SendMessageFromPort+0x364>)
 8007ee2:	f00c fbd4 	bl	801468e <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007ee6:	4653      	mov	r3, sl
 8007ee8:	b29f      	uxth	r7, r3
 8007eea:	0031      	movs	r1, r6
 8007eec:	4832      	ldr	r0, [pc, #200]	; (8007fb8 <SendMessageFromPort+0x364>)
 8007eee:	f004 f9dd 	bl	800c2ac <CalculateCRC8>
 8007ef2:	4643      	mov	r3, r8
 8007ef4:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007ef6:	2238      	movs	r2, #56	; 0x38
 8007ef8:	2100      	movs	r1, #0
 8007efa:	482f      	ldr	r0, [pc, #188]	; (8007fb8 <SendMessageFromPort+0x364>)
 8007efc:	f00c fbd0 	bl	80146a0 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007f00:	3402      	adds	r4, #2
 8007f02:	b2e4      	uxtb	r4, r4
 8007f04:	2c01      	cmp	r4, #1
 8007f06:	d900      	bls.n	8007f0a <SendMessageFromPort+0x2b6>
 8007f08:	e6f5      	b.n	8007cf6 <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8007f0a:	9803      	ldr	r0, [sp, #12]
 8007f0c:	f7fb fd36 	bl	800397c <FindBroadcastRoutes>
 8007f10:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f12:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f14:	4b34      	ldr	r3, [pc, #208]	; (8007fe8 <SendMessageFromPort+0x394>)
 8007f16:	4699      	mov	r9, r3
 8007f18:	4b2a      	ldr	r3, [pc, #168]	; (8007fc4 <SendMessageFromPort+0x370>)
 8007f1a:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8007f1c:	9503      	str	r5, [sp, #12]
 8007f1e:	e074      	b.n	800800a <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 8007f20:	2200      	movs	r2, #0
 8007f22:	e7be      	b.n	8007ea2 <SendMessageFromPort+0x24e>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007f24:	1d3a      	adds	r2, r7, #4
 8007f26:	b292      	uxth	r2, r2
 8007f28:	2332      	movs	r3, #50	; 0x32
 8007f2a:	491f      	ldr	r1, [pc, #124]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007f2c:	0028      	movs	r0, r5
 8007f2e:	f006 fc25 	bl	800e77c <writePxDMAMutex>
		ACK_FLAG =false; rejected_FLAG=false;
 8007f32:	2300      	movs	r3, #0
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <SendMessageFromPort+0x36c>)
 8007f36:	7013      	strb	r3, [r2, #0]
 8007f38:	4a2c      	ldr	r2, [pc, #176]	; (8007fec <SendMessageFromPort+0x398>)
 8007f3a:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8007f3c:	9904      	ldr	r1, [sp, #16]
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f007 fbf8 	bl	800f734 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8007f44:	4b2a      	ldr	r3, [pc, #168]	; (8007ff0 <SendMessageFromPort+0x39c>)
 8007f46:	2202      	movs	r2, #2
 8007f48:	701a      	strb	r2, [r3, #0]
	
	return result;
 8007f4a:	2000      	movs	r0, #0
}
 8007f4c:	b007      	add	sp, #28
 8007f4e:	bc3c      	pop	{r2, r3, r4, r5}
 8007f50:	4690      	mov	r8, r2
 8007f52:	4699      	mov	r9, r3
 8007f54:	46a2      	mov	sl, r4
 8007f56:	46ab      	mov	fp, r5
 8007f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007f5a:	2332      	movs	r3, #50	; 0x32
 8007f5c:	003a      	movs	r2, r7
 8007f5e:	4912      	ldr	r1, [pc, #72]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007f60:	0028      	movs	r0, r5
 8007f62:	f006 fc0b 	bl	800e77c <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007f66:	3601      	adds	r6, #1
 8007f68:	b2f6      	uxtb	r6, r6
 8007f6a:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <SendMessageFromPort+0x368>)
 8007f6c:	88db      	ldrh	r3, [r3, #6]
 8007f6e:	42b3      	cmp	r3, r6
 8007f70:	d9df      	bls.n	8007f32 <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8007f72:	2332      	movs	r3, #50	; 0x32
 8007f74:	003a      	movs	r2, r7
 8007f76:	490c      	ldr	r1, [pc, #48]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007f78:	0028      	movs	r0, r5
 8007f7a:	f006 fbff 	bl	800e77c <writePxDMAMutex>
				osDelay(200);
 8007f7e:	20c8      	movs	r0, #200	; 0xc8
 8007f80:	f006 fd5d 	bl	800ea3e <osDelay>
				if(ACK_FLAG == true)
 8007f84:	7823      	ldrb	r3, [r4, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1d3      	bne.n	8007f32 <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 8007f8a:	4b18      	ldr	r3, [pc, #96]	; (8007fec <SendMessageFromPort+0x398>)
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0e9      	beq.n	8007f66 <SendMessageFromPort+0x312>
 8007f92:	e7e2      	b.n	8007f5a <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007f94:	464b      	mov	r3, r9
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1b7      	bne.n	8007f0a <SendMessageFromPort+0x2b6>
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1b4      	bne.n	8007f0a <SendMessageFromPort+0x2b6>
			src =message[4];
 8007fa0:	4b01      	ldr	r3, [pc, #4]	; (8007fa8 <SendMessageFromPort+0x354>)
 8007fa2:	791b      	ldrb	r3, [r3, #4]
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	e7b0      	b.n	8007f0a <SendMessageFromPort+0x2b6>
 8007fa8:	20000f6c 	.word	0x20000f6c
 8007fac:	20000fa4 	.word	0x20000fa4
 8007fb0:	20000f6f 	.word	0x20000f6f
 8007fb4:	20000d7c 	.word	0x20000d7c
 8007fb8:	200017d0 	.word	0x200017d0
 8007fbc:	20006dd0 	.word	0x20006dd0
 8007fc0:	20000ae4 	.word	0x20000ae4
 8007fc4:	200010ea 	.word	0x200010ea
 8007fc8:	2000195e 	.word	0x2000195e
 8007fcc:	2000195c 	.word	0x2000195c
 8007fd0:	20000fac 	.word	0x20000fac
 8007fd4:	20000ae5 	.word	0x20000ae5
 8007fd8:	20000045 	.word	0x20000045
 8007fdc:	20000044 	.word	0x20000044
 8007fe0:	20000f34 	.word	0x20000f34
 8007fe4:	20000d28 	.word	0x20000d28
 8007fe8:	20000d2c 	.word	0x20000d2c
 8007fec:	2000117c 	.word	0x2000117c
 8007ff0:	20001188 	.word	0x20001188
			rejected_FLAG=false;
 8007ff4:	4b23      	ldr	r3, [pc, #140]	; (8008084 <SendMessageFromPort+0x430>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 8007ffa:	200a      	movs	r0, #10
 8007ffc:	f006 f966 	bl	800e2cc <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008000:	3401      	adds	r4, #1
 8008002:	b2e4      	uxtb	r4, r4
 8008004:	3601      	adds	r6, #1
 8008006:	2c07      	cmp	r4, #7
 8008008:	d098      	beq.n	8007f3c <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800800a:	4643      	mov	r3, r8
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	3b01      	subs	r3, #1
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	464a      	mov	r2, r9
 8008014:	5a9b      	ldrh	r3, [r3, r2]
 8008016:	4133      	asrs	r3, r6
 8008018:	07db      	lsls	r3, r3, #31
 800801a:	d5eb      	bpl.n	8007ff4 <SendMessageFromPort+0x3a0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 800801c:	1d3d      	adds	r5, r7, #4
 800801e:	b2ad      	uxth	r5, r5
 8008020:	2332      	movs	r3, #50	; 0x32
 8008022:	002a      	movs	r2, r5
 8008024:	4918      	ldr	r1, [pc, #96]	; (8008088 <SendMessageFromPort+0x434>)
 8008026:	0020      	movs	r0, r4
 8008028:	f006 fba8 	bl	800e77c <writePxDMAMutex>
				osDelay(200);
 800802c:	20c8      	movs	r0, #200	; 0xc8
 800802e:	f006 fd06 	bl	800ea3e <osDelay>
				if(rejected_FLAG == true)
 8008032:	4b14      	ldr	r3, [pc, #80]	; (8008084 <SendMessageFromPort+0x430>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0dc      	beq.n	8007ff4 <SendMessageFromPort+0x3a0>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 800803a:	2332      	movs	r3, #50	; 0x32
 800803c:	002a      	movs	r2, r5
 800803e:	4912      	ldr	r1, [pc, #72]	; (8008088 <SendMessageFromPort+0x434>)
 8008040:	9803      	ldr	r0, [sp, #12]
 8008042:	f006 fb9b 	bl	800e77c <writePxDMAMutex>
 8008046:	e7d5      	b.n	8007ff4 <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 8008048:	2067      	movs	r0, #103	; 0x67
 800804a:	e77f      	b.n	8007f4c <SendMessageFromPort+0x2f8>
 800804c:	2067      	movs	r0, #103	; 0x67
 800804e:	e77d      	b.n	8007f4c <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008050:	2069      	movs	r0, #105	; 0x69
 8008052:	e77b      	b.n	8007f4c <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8008054:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008056:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8008058:	2b2d      	cmp	r3, #45	; 0x2d
 800805a:	dd00      	ble.n	800805e <SendMessageFromPort+0x40a>
 800805c:	e776      	b.n	8007f4c <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 800805e:	4a0b      	ldr	r2, [pc, #44]	; (800808c <SendMessageFromPort+0x438>)
 8008060:	7813      	ldrb	r3, [r2, #0]
 8008062:	3301      	adds	r3, #1
 8008064:	b2db      	uxtb	r3, r3
 8008066:	7013      	strb	r3, [r2, #0]
 8008068:	4a07      	ldr	r2, [pc, #28]	; (8008088 <SendMessageFromPort+0x434>)
 800806a:	1992      	adds	r2, r2, r6
 800806c:	445a      	add	r2, fp
 800806e:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 8008070:	4651      	mov	r1, sl
 8008072:	3101      	adds	r1, #1
 8008074:	b2cb      	uxtb	r3, r1
 8008076:	469a      	mov	sl, r3
 8008078:	e72b      	b.n	8007ed2 <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800807a:	464b      	mov	r3, r9
 800807c:	2b00      	cmp	r3, #0
 800807e:	d100      	bne.n	8008082 <SendMessageFromPort+0x42e>
 8008080:	e612      	b.n	8007ca8 <SendMessageFromPort+0x54>
 8008082:	e664      	b.n	8007d4e <SendMessageFromPort+0xfa>
 8008084:	2000117c 	.word	0x2000117c
 8008088:	20000f6c 	.word	0x20000f6c
 800808c:	20000d28 	.word	0x20000d28

08008090 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8008090:	b530      	push	{r4, r5, lr}
 8008092:	b083      	sub	sp, #12
 8008094:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8008096:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <ForwardReceivedMessage+0x34>)
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 800809c:	1e42      	subs	r2, r0, #1
 800809e:	00d3      	lsls	r3, r2, #3
 80080a0:	1a9b      	subs	r3, r3, r2
 80080a2:	00db      	lsls	r3, r3, #3
 80080a4:	4a08      	ldr	r2, [pc, #32]	; (80080c8 <ForwardReceivedMessage+0x38>)
 80080a6:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 80080a8:	4b08      	ldr	r3, [pc, #32]	; (80080cc <ForwardReceivedMessage+0x3c>)
 80080aa:	7818      	ldrb	r0, [r3, #0]
 80080ac:	0021      	movs	r1, r4
 80080ae:	f7fb fd33 	bl	8003b18 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80080b2:	9500      	str	r5, [sp, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	0022      	movs	r2, r4
 80080b8:	2100      	movs	r1, #0
 80080ba:	f7ff fdcb 	bl	8007c54 <SendMessageFromPort>
}
 80080be:	2000      	movs	r0, #0
 80080c0:	b003      	add	sp, #12
 80080c2:	bd30      	pop	{r4, r5, pc}
 80080c4:	20000ae5 	.word	0x20000ae5
 80080c8:	20000d7c 	.word	0x20000d7c
 80080cc:	200010ea 	.word	0x200010ea

080080d0 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80080d0:	b500      	push	{lr}
 80080d2:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <BroadcastReceivedMessage+0x38>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <BroadcastReceivedMessage+0x3c>)
 80080dc:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80080de:	28ff      	cmp	r0, #255	; 0xff
 80080e0:	d009      	beq.n	80080f6 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 80080e2:	9100      	str	r1, [sp, #0]
 80080e4:	2300      	movs	r3, #0
 80080e6:	22fe      	movs	r2, #254	; 0xfe
 80080e8:	2100      	movs	r1, #0
 80080ea:	2000      	movs	r0, #0
 80080ec:	f7ff fdb2 	bl	8007c54 <SendMessageFromPort>
}
 80080f0:	2000      	movs	r0, #0
 80080f2:	b003      	add	sp, #12
 80080f4:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 80080f6:	9100      	str	r1, [sp, #0]
 80080f8:	2300      	movs	r3, #0
 80080fa:	32ff      	adds	r2, #255	; 0xff
 80080fc:	2100      	movs	r1, #0
 80080fe:	2000      	movs	r0, #0
 8008100:	f7ff fda8 	bl	8007c54 <SendMessageFromPort>
 8008104:	e7f4      	b.n	80080f0 <BroadcastReceivedMessage+0x20>
 8008106:	46c0      	nop			; (mov r8, r8)
 8008108:	20000ae5 	.word	0x20000ae5
 800810c:	20000045 	.word	0x20000045

08008110 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008110:	b530      	push	{r4, r5, lr}
 8008112:	b083      	sub	sp, #12
 8008114:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8008116:	4b0f      	ldr	r3, [pc, #60]	; (8008154 <BroadcastMessage+0x44>)
 8008118:	2501      	movs	r5, #1
 800811a:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 800811c:	4b0e      	ldr	r3, [pc, #56]	; (8008158 <BroadcastMessage+0x48>)
 800811e:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008120:	29ff      	cmp	r1, #255	; 0xff
 8008122:	d00e      	beq.n	8008142 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8008124:	9400      	str	r4, [sp, #0]
 8008126:	0013      	movs	r3, r2
 8008128:	22fe      	movs	r2, #254	; 0xfe
 800812a:	0001      	movs	r1, r0
 800812c:	2000      	movs	r0, #0
 800812e:	f7ff fd91 	bl	8007c54 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8008132:	0022      	movs	r2, r4
 8008134:	2100      	movs	r1, #0
 8008136:	4809      	ldr	r0, [pc, #36]	; (800815c <BroadcastMessage+0x4c>)
 8008138:	f00c fab2 	bl	80146a0 <memset>
}
 800813c:	2000      	movs	r0, #0
 800813e:	b003      	add	sp, #12
 8008140:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8008142:	9400      	str	r4, [sp, #0]
 8008144:	0013      	movs	r3, r2
 8008146:	22ff      	movs	r2, #255	; 0xff
 8008148:	0001      	movs	r1, r0
 800814a:	2000      	movs	r0, #0
 800814c:	f7ff fd82 	bl	8007c54 <SendMessageFromPort>
 8008150:	e7ef      	b.n	8008132 <BroadcastMessage+0x22>
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	20000ae5 	.word	0x20000ae5
 8008158:	20000045 	.word	0x20000045
 800815c:	20000fac 	.word	0x20000fac

08008160 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008162:	b083      	sub	sp, #12
 8008164:	0004      	movs	r4, r0
 8008166:	000e      	movs	r6, r1
 8008168:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 800816a:	28ff      	cmp	r0, #255	; 0xff
 800816c:	d012      	beq.n	8008194 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 800816e:	4f0d      	ldr	r7, [pc, #52]	; (80081a4 <SendMessageToModule+0x44>)
 8008170:	7838      	ldrb	r0, [r7, #0]
 8008172:	0021      	movs	r1, r4
 8008174:	f7fb fcd0 	bl	8003b18 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008178:	7839      	ldrb	r1, [r7, #0]
 800817a:	9500      	str	r5, [sp, #0]
 800817c:	0033      	movs	r3, r6
 800817e:	0022      	movs	r2, r4
 8008180:	f7ff fd68 	bl	8007c54 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8008184:	002a      	movs	r2, r5
 8008186:	2100      	movs	r1, #0
 8008188:	4807      	ldr	r0, [pc, #28]	; (80081a8 <SendMessageToModule+0x48>)
 800818a:	f00c fa89 	bl	80146a0 <memset>
}
 800818e:	2000      	movs	r0, #0
 8008190:	b003      	add	sp, #12
 8008192:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8008194:	4b03      	ldr	r3, [pc, #12]	; (80081a4 <SendMessageToModule+0x44>)
 8008196:	7818      	ldrb	r0, [r3, #0]
 8008198:	0013      	movs	r3, r2
 800819a:	000a      	movs	r2, r1
 800819c:	21ff      	movs	r1, #255	; 0xff
 800819e:	f7ff ffb7 	bl	8008110 <BroadcastMessage>
 80081a2:	e7f4      	b.n	800818e <SendMessageToModule+0x2e>
 80081a4:	200010ea 	.word	0x200010ea
 80081a8:	20000fac 	.word	0x20000fac

080081ac <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80081ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ae:	46de      	mov	lr, fp
 80081b0:	4657      	mov	r7, sl
 80081b2:	464e      	mov	r6, r9
 80081b4:	4645      	mov	r5, r8
 80081b6:	b5e0      	push	{r5, r6, r7, lr}
 80081b8:	b091      	sub	sp, #68	; 0x44
 80081ba:	900f      	str	r0, [sp, #60]	; 0x3c
 80081bc:	000c      	movs	r4, r1
 80081be:	9106      	str	r1, [sp, #24]
 80081c0:	0015      	movs	r5, r2
 80081c2:	920e      	str	r2, [sp, #56]	; 0x38
 80081c4:	001e      	movs	r6, r3
 80081c6:	ab1a      	add	r3, sp, #104	; 0x68
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	4698      	mov	r8, r3
 80081cc:	ab1d      	add	r3, sp, #116	; 0x74
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80081d2:	4b5a      	ldr	r3, [pc, #360]	; (800833c <StartScastDMAStream+0x190>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	428b      	cmp	r3, r1
 80081d8:	d11d      	bne.n	8008216 <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081dc:	0e1b      	lsrs	r3, r3, #24
 80081de:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 80081e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081e2:	0c1b      	lsrs	r3, r3, #16
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 80081e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081ea:	0a1b      	lsrs	r3, r3, #8
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80081f0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80081f2:	0e1b      	lsrs	r3, r3, #24
 80081f4:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 80081f6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80081f8:	0c1b      	lsrs	r3, r3, #16
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 80081fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008200:	0a1b      	lsrs	r3, r3, #8
 8008202:	b2db      	uxtb	r3, r3
 8008204:	469b      	mov	fp, r3
 8008206:	4d4e      	ldr	r5, [pc, #312]	; (8008340 <StartScastDMAStream+0x194>)
 8008208:	231a      	movs	r3, #26
 800820a:	4699      	mov	r9, r3
 800820c:	44a9      	add	r9, r5
				temp2 =dstP;
 800820e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008210:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008212:	4c4c      	ldr	r4, [pc, #304]	; (8008344 <StartScastDMAStream+0x198>)
 8008214:	e05c      	b.n	80082d0 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008216:	4b4b      	ldr	r3, [pc, #300]	; (8008344 <StartScastDMAStream+0x198>)
 8008218:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800821a:	0e12      	lsrs	r2, r2, #24
 800821c:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 800821e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008220:	0c12      	lsrs	r2, r2, #16
 8008222:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8008224:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008226:	0a12      	lsrs	r2, r2, #8
 8008228:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800822a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800822c:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800822e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008230:	0e12      	lsrs	r2, r2, #24
 8008232:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8008234:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008236:	0c12      	lsrs	r2, r2, #16
 8008238:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800823a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800823c:	0a12      	lsrs	r2, r2, #8
 800823e:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8008240:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008242:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8008244:	4642      	mov	r2, r8
 8008246:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8008248:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 800824a:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 800824c:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 800824e:	4652      	mov	r2, sl
 8008250:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008252:	220d      	movs	r2, #13
 8008254:	211c      	movs	r1, #28
 8008256:	0020      	movs	r0, r4
 8008258:	f7ff ff82 	bl	8008160 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 800825c:	2000      	movs	r0, #0
 800825e:	b011      	add	sp, #68	; 0x44
 8008260:	bc3c      	pop	{r2, r3, r4, r5}
 8008262:	4690      	mov	r8, r2
 8008264:	4699      	mov	r9, r3
 8008266:	46a2      	mov	sl, r4
 8008268:	46ab      	mov	fp, r5
 800826a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 800826c:	9906      	ldr	r1, [sp, #24]
 800826e:	f7fb fc53 	bl	8003b18 <FindRoute>
 8008272:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8008274:	0031      	movs	r1, r6
 8008276:	9806      	ldr	r0, [sp, #24]
 8008278:	f7fb fc4e 	bl	8003b18 <FindRoute>
			if(route[i] == dstM){
 800827c:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 800827e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 8008280:	42b0      	cmp	r0, r6
 8008282:	d134      	bne.n	80082ee <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008284:	9a08      	ldr	r2, [sp, #32]
 8008286:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8008288:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800828a:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 800828c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800828e:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8008290:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008292:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008296:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008298:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800829a:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 800829c:	465a      	mov	r2, fp
 800829e:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 80082a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80082a2:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 80082a4:	4642      	mov	r2, r8
 80082a6:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 80082a8:	9a07      	ldr	r2, [sp, #28]
 80082aa:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 80082ac:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 80082ae:	4653      	mov	r3, sl
 80082b0:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 80082b2:	0031      	movs	r1, r6
 80082b4:	9806      	ldr	r0, [sp, #24]
 80082b6:	f7fb fc2f 	bl	8003b18 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 80082ba:	7878      	ldrb	r0, [r7, #1]
 80082bc:	220c      	movs	r2, #12
 80082be:	211b      	movs	r1, #27
 80082c0:	f7ff ff4e 	bl	8008160 <SendMessageToModule>
			osDelay(10);
 80082c4:	200a      	movs	r0, #10
 80082c6:	f006 fbba 	bl	800ea3e <osDelay>
 80082ca:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 80082cc:	454d      	cmp	r5, r9
 80082ce:	d013      	beq.n	80082f8 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 80082d0:	0031      	movs	r1, r6
 80082d2:	9806      	ldr	r0, [sp, #24]
 80082d4:	f7fb fc20 	bl	8003b18 <FindRoute>
 80082d8:	002f      	movs	r7, r5
		if(route[i]){
 80082da:	7868      	ldrb	r0, [r5, #1]
 80082dc:	2800      	cmp	r0, #0
 80082de:	d0f4      	beq.n	80082ca <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 80082e0:	78a9      	ldrb	r1, [r5, #2]
 80082e2:	2900      	cmp	r1, #0
 80082e4:	d0c2      	beq.n	800826c <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 80082e6:	f7fb fc17 	bl	8003b18 <FindRoute>
 80082ea:	9007      	str	r0, [sp, #28]
 80082ec:	e7c2      	b.n	8008274 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 80082ee:	7839      	ldrb	r1, [r7, #0]
 80082f0:	f7fb fc12 	bl	8003b18 <FindRoute>
 80082f4:	0003      	movs	r3, r0
 80082f6:	e7c5      	b.n	8008284 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 80082f8:	9806      	ldr	r0, [sp, #24]
 80082fa:	42b0      	cmp	r0, r6
 80082fc:	d118      	bne.n	8008330 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 80082fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008304:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008306:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008308:	4640      	mov	r0, r8
 800830a:	f7ff fb81 	bl	8007a10 <SetupDMAStreams>
	if(stored){
 800830e:	4653      	mov	r3, sl
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0a3      	beq.n	800825c <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8008314:	2300      	movs	r3, #0
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	9303      	str	r3, [sp, #12]
 800831a:	9302      	str	r3, [sp, #8]
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008324:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008326:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008328:	4640      	mov	r0, r8
 800832a:	f7fb f8ed 	bl	8003508 <SaveEEstreams>
 800832e:	e795      	b.n	800825c <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8008330:	0031      	movs	r1, r6
 8008332:	f7fb fbf1 	bl	8003b18 <FindRoute>
 8008336:	900e      	str	r0, [sp, #56]	; 0x38
 8008338:	e7e1      	b.n	80082fe <StartScastDMAStream+0x152>
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	200010ea 	.word	0x200010ea
 8008340:	20006f17 	.word	0x20006f17
 8008344:	20000fac 	.word	0x20000fac

08008348 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800834a:	46de      	mov	lr, fp
 800834c:	4657      	mov	r7, sl
 800834e:	464e      	mov	r6, r9
 8008350:	4645      	mov	r5, r8
 8008352:	b5e0      	push	{r5, r6, r7, lr}
 8008354:	b085      	sub	sp, #20
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8008356:	4bd2      	ldr	r3, [pc, #840]	; (80086a0 <BackEndTask+0x358>)
 8008358:	3b70      	subs	r3, #112	; 0x70
 800835a:	9302      	str	r3, [sp, #8]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 800835c:	4bd0      	ldr	r3, [pc, #832]	; (80086a0 <BackEndTask+0x358>)
 800835e:	3b70      	subs	r3, #112	; 0x70
 8008360:	9303      	str	r3, [sp, #12]
 8008362:	e201      	b.n	8008768 <BackEndTask+0x420>
 8008364:	1eab      	subs	r3, r5, #2
 8008366:	4699      	mov	r9, r3
 8008368:	4bce      	ldr	r3, [pc, #824]	; (80086a4 <BackEndTask+0x35c>)
 800836a:	444b      	add	r3, r9
 800836c:	469a      	mov	sl, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 800836e:	7819      	ldrb	r1, [r3, #0]
 8008370:	29bf      	cmp	r1, #191	; 0xbf
 8008372:	dc17      	bgt.n	80083a4 <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8008374:	4bcc      	ldr	r3, [pc, #816]	; (80086a8 <BackEndTask+0x360>)
 8008376:	7e9e      	ldrb	r6, [r3, #26]
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8008378:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 800837a:	2000      	movs	r0, #0
 800837c:	e004      	b.n	8008388 <BackEndTask+0x40>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 800837e:	2bbf      	cmp	r3, #191	; 0xbf
 8008380:	d02c      	beq.n	80083dc <BackEndTask+0x94>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8008382:	3301      	adds	r3, #1
 8008384:	2bc0      	cmp	r3, #192	; 0xc0
 8008386:	d00a      	beq.n	800839e <BackEndTask+0x56>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8008388:	2bbe      	cmp	r3, #190	; 0xbe
 800838a:	dcf8      	bgt.n	800837e <BackEndTask+0x36>
 800838c:	5ce2      	ldrb	r2, [r4, r3]
 800838e:	2a48      	cmp	r2, #72	; 0x48
 8008390:	d1f5      	bne.n	800837e <BackEndTask+0x36>
 8008392:	18e2      	adds	r2, r4, r3
 8008394:	7852      	ldrb	r2, [r2, #1]
 8008396:	2a5a      	cmp	r2, #90	; 0x5a
 8008398:	d1f1      	bne.n	800837e <BackEndTask+0x36>
						packetStart =i;
 800839a:	4ac4      	ldr	r2, [pc, #784]	; (80086ac <BackEndTask+0x364>)
 800839c:	6013      	str	r3, [r2, #0]
				if(emptyBuffer){
 800839e:	2800      	cmp	r0, #0
 80083a0:	d000      	beq.n	80083a4 <BackEndTask+0x5c>
 80083a2:	e1c1      	b.n	8008728 <BackEndTask+0x3e0>
				totalnumberofrecevedmesg++;
 80083a4:	4ac2      	ldr	r2, [pc, #776]	; (80086b0 <BackEndTask+0x368>)
 80083a6:	6813      	ldr	r3, [r2, #0]
 80083a8:	3301      	adds	r3, #1
 80083aa:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 80083ac:	4bbf      	ldr	r3, [pc, #764]	; (80086ac <BackEndTask+0x364>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2bbd      	cmp	r3, #189	; 0xbd
 80083b2:	d054      	beq.n	800845e <BackEndTask+0x116>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 80083b4:	2bbe      	cmp	r3, #190	; 0xbe
 80083b6:	d100      	bne.n	80083ba <BackEndTask+0x72>
 80083b8:	e0bb      	b.n	8008532 <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 80083ba:	2bbf      	cmp	r3, #191	; 0xbf
 80083bc:	d100      	bne.n	80083c0 <BackEndTask+0x78>
 80083be:	e0bf      	b.n	8008540 <BackEndTask+0x1f8>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 80083c0:	464a      	mov	r2, r9
 80083c2:	0052      	lsls	r2, r2, #1
 80083c4:	444a      	add	r2, r9
 80083c6:	0191      	lsls	r1, r2, #6
 80083c8:	4aba      	ldr	r2, [pc, #744]	; (80086b4 <BackEndTask+0x36c>)
 80083ca:	1852      	adds	r2, r2, r1
 80083cc:	18d2      	adds	r2, r2, r3
 80083ce:	7891      	ldrb	r1, [r2, #2]
 80083d0:	4ab9      	ldr	r2, [pc, #740]	; (80086b8 <BackEndTask+0x370>)
 80083d2:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 80083d4:	3303      	adds	r3, #3
 80083d6:	4ab9      	ldr	r2, [pc, #740]	; (80086bc <BackEndTask+0x374>)
 80083d8:	6013      	str	r3, [r2, #0]
 80083da:	e048      	b.n	800846e <BackEndTask+0x126>
 80083dc:	46a4      	mov	ip, r4
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80083de:	0023      	movs	r3, r4
 80083e0:	33bf      	adds	r3, #191	; 0xbf
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b48      	cmp	r3, #72	; 0x48
 80083e6:	d004      	beq.n	80083f2 <BackEndTask+0xaa>
							if(BOS.disableCLI == false){
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	d000      	beq.n	80083ee <BackEndTask+0xa6>
 80083ec:	e19c      	b.n	8008728 <BackEndTask+0x3e0>
 80083ee:	4660      	mov	r0, ip
 80083f0:	e00c      	b.n	800840c <BackEndTask+0xc4>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 80083f2:	7823      	ldrb	r3, [r4, #0]
 80083f4:	2b5a      	cmp	r3, #90	; 0x5a
 80083f6:	d1f7      	bne.n	80083e8 <BackEndTask+0xa0>
						packetStart = MSG_RX_BUF_SIZE - 1;
 80083f8:	4bac      	ldr	r3, [pc, #688]	; (80086ac <BackEndTask+0x364>)
 80083fa:	22bf      	movs	r2, #191	; 0xbf
 80083fc:	601a      	str	r2, [r3, #0]
						break;
 80083fe:	e7ce      	b.n	800839e <BackEndTask+0x56>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008400:	29bf      	cmp	r1, #191	; 0xbf
 8008402:	d027      	beq.n	8008454 <BackEndTask+0x10c>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8008404:	3101      	adds	r1, #1
 8008406:	29c0      	cmp	r1, #192	; 0xc0
 8008408:	d100      	bne.n	800840c <BackEndTask+0xc4>
 800840a:	e18d      	b.n	8008728 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 800840c:	5c43      	ldrb	r3, [r0, r1]
 800840e:	2b0d      	cmp	r3, #13
 8008410:	d1f8      	bne.n	8008404 <BackEndTask+0xbc>
 8008412:	29be      	cmp	r1, #190	; 0xbe
 8008414:	dcf4      	bgt.n	8008400 <BackEndTask+0xb8>
 8008416:	1842      	adds	r2, r0, r1
 8008418:	7853      	ldrb	r3, [r2, #1]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1f0      	bne.n	8008400 <BackEndTask+0xb8>
										UARTRxBuf[port - 1][j] =0;
 800841e:	464b      	mov	r3, r9
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	444b      	add	r3, r9
 8008424:	019b      	lsls	r3, r3, #6
 8008426:	4aa3      	ldr	r2, [pc, #652]	; (80086b4 <BackEndTask+0x36c>)
 8008428:	18d3      	adds	r3, r2, r3
 800842a:	2200      	movs	r2, #0
 800842c:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 800842e:	3101      	adds	r1, #1
 8008430:	4653      	mov	r3, sl
 8008432:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8008434:	4ba2      	ldr	r3, [pc, #648]	; (80086c0 <BackEndTask+0x378>)
 8008436:	7819      	ldrb	r1, [r3, #0]
 8008438:	48a2      	ldr	r0, [pc, #648]	; (80086c4 <BackEndTask+0x37c>)
 800843a:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 800843c:	3203      	adds	r2, #3
 800843e:	4641      	mov	r1, r8
 8008440:	700a      	strb	r2, [r1, #0]
										PcPort =port;
 8008442:	701f      	strb	r7, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8008444:	4ba0      	ldr	r3, [pc, #640]	; (80086c8 <BackEndTask+0x380>)
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	2300      	movs	r3, #0
 800844a:	3a01      	subs	r2, #1
 800844c:	2100      	movs	r1, #0
 800844e:	f007 fe6d 	bl	801012c <xTaskGenericNotify>
										break;
 8008452:	e169      	b.n	8008728 <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008454:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 8008456:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1a0      	bne.n	800839e <BackEndTask+0x56>
 800845c:	e7df      	b.n	800841e <BackEndTask+0xd6>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 800845e:	0023      	movs	r3, r4
 8008460:	33bf      	adds	r3, #191	; 0xbf
 8008462:	781a      	ldrb	r2, [r3, #0]
 8008464:	4b94      	ldr	r3, [pc, #592]	; (80086b8 <BackEndTask+0x370>)
 8008466:	601a      	str	r2, [r3, #0]
					parseStart =0;
 8008468:	4b94      	ldr	r3, [pc, #592]	; (80086bc <BackEndTask+0x374>)
 800846a:	2200      	movs	r2, #0
 800846c:	601a      	str	r2, [r3, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800846e:	4b92      	ldr	r3, [pc, #584]	; (80086b8 <BackEndTask+0x370>)
 8008470:	681e      	ldr	r6, [r3, #0]
 8008472:	3603      	adds	r6, #3
 8008474:	4b8d      	ldr	r3, [pc, #564]	; (80086ac <BackEndTask+0x364>)
 8008476:	6819      	ldr	r1, [r3, #0]
 8008478:	1873      	adds	r3, r6, r1
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 800847a:	2bbf      	cmp	r3, #191	; 0xbf
 800847c:	dc00      	bgt.n	8008480 <BackEndTask+0x138>
 800847e:	e179      	b.n	8008774 <BackEndTask+0x42c>
					packetEnd -= MSG_RX_BUF_SIZE;
 8008480:	3bc0      	subs	r3, #192	; 0xc0
 8008482:	4a92      	ldr	r2, [pc, #584]	; (80086cc <BackEndTask+0x384>)
 8008484:	6013      	str	r3, [r2, #0]
				if(packetStart != packetEnd) // Non-empty packet
 8008486:	4b91      	ldr	r3, [pc, #580]	; (80086cc <BackEndTask+0x384>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4299      	cmp	r1, r3
 800848c:	d100      	bne.n	8008490 <BackEndTask+0x148>
 800848e:	e129      	b.n	80086e4 <BackEndTask+0x39c>
					if(packetStart < packetEnd){
 8008490:	da5d      	bge.n	800854e <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8008492:	006b      	lsls	r3, r5, #1
 8008494:	195b      	adds	r3, r3, r5
 8008496:	019b      	lsls	r3, r3, #6
 8008498:	3b81      	subs	r3, #129	; 0x81
 800849a:	3bff      	subs	r3, #255	; 0xff
 800849c:	1859      	adds	r1, r3, r1
 800849e:	4b85      	ldr	r3, [pc, #532]	; (80086b4 <BackEndTask+0x36c>)
 80084a0:	18c9      	adds	r1, r1, r3
 80084a2:	0032      	movs	r2, r6
 80084a4:	488a      	ldr	r0, [pc, #552]	; (80086d0 <BackEndTask+0x388>)
 80084a6:	f00c f8f2 	bl	801468e <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 80084aa:	4b83      	ldr	r3, [pc, #524]	; (80086b8 <BackEndTask+0x370>)
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	3103      	adds	r1, #3
 80084b0:	b289      	uxth	r1, r1
 80084b2:	4e87      	ldr	r6, [pc, #540]	; (80086d0 <BackEndTask+0x388>)
 80084b4:	0030      	movs	r0, r6
 80084b6:	f003 fef9 	bl	800c2ac <CalculateCRC8>
 80084ba:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 80084bc:	2238      	movs	r2, #56	; 0x38
 80084be:	2100      	movs	r1, #0
 80084c0:	0030      	movs	r0, r6
 80084c2:	f00c f8ed 	bl	80146a0 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 80084c6:	4b81      	ldr	r3, [pc, #516]	; (80086cc <BackEndTask+0x384>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	464b      	mov	r3, r9
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	444b      	add	r3, r9
 80084d0:	019b      	lsls	r3, r3, #6
 80084d2:	4978      	ldr	r1, [pc, #480]	; (80086b4 <BackEndTask+0x36c>)
 80084d4:	18cb      	adds	r3, r1, r3
 80084d6:	5c9b      	ldrb	r3, [r3, r2]
 80084d8:	9901      	ldr	r1, [sp, #4]
 80084da:	428b      	cmp	r3, r1
 80084dc:	d04f      	beq.n	800857e <BackEndTask+0x236>
				}

				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 80084de:	4b73      	ldr	r3, [pc, #460]	; (80086ac <BackEndTask+0x364>)
 80084e0:	6819      	ldr	r1, [r3, #0]
 80084e2:	428a      	cmp	r2, r1
 80084e4:	dc00      	bgt.n	80084e8 <BackEndTask+0x1a0>
 80084e6:	e0fd      	b.n	80086e4 <BackEndTask+0x39c>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 80084e8:	4b73      	ldr	r3, [pc, #460]	; (80086b8 <BackEndTask+0x370>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	3204      	adds	r2, #4
 80084ee:	0068      	lsls	r0, r5, #1
 80084f0:	1940      	adds	r0, r0, r5
 80084f2:	0180      	lsls	r0, r0, #6
 80084f4:	3881      	subs	r0, #129	; 0x81
 80084f6:	38ff      	subs	r0, #255	; 0xff
 80084f8:	1841      	adds	r1, r0, r1
 80084fa:	486e      	ldr	r0, [pc, #440]	; (80086b4 <BackEndTask+0x36c>)
 80084fc:	1808      	adds	r0, r1, r0
 80084fe:	2100      	movs	r1, #0
 8008500:	f00c f8ce 	bl	80146a0 <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}

				/* A.6.2 Advance buffer index */
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8008504:	4b71      	ldr	r3, [pc, #452]	; (80086cc <BackEndTask+0x384>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2bbf      	cmp	r3, #191	; 0xbf
 800850a:	d100      	bne.n	800850e <BackEndTask+0x1c6>
 800850c:	e101      	b.n	8008712 <BackEndTask+0x3ca>
					UARTRxBufIndex[port - 1] =0;
				else{
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 800850e:	3301      	adds	r3, #1
 8008510:	4652      	mov	r2, sl
 8008512:	7013      	strb	r3, [r2, #0]
				}
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8008514:	00eb      	lsls	r3, r5, #3
 8008516:	1b5b      	subs	r3, r3, r5
 8008518:	00db      	lsls	r3, r3, #3
 800851a:	3b6f      	subs	r3, #111	; 0x6f
 800851c:	4a60      	ldr	r2, [pc, #384]	; (80086a0 <BackEndTask+0x358>)
 800851e:	5cd0      	ldrb	r0, [r2, r3]
 8008520:	2200      	movs	r2, #0
 8008522:	212d      	movs	r1, #45	; 0x2d
 8008524:	f7ff fe1c 	bl	8008160 <SendMessageToModule>
				++rejectedMsg;
 8008528:	4a6a      	ldr	r2, [pc, #424]	; (80086d4 <BackEndTask+0x38c>)
 800852a:	8813      	ldrh	r3, [r2, #0]
 800852c:	3301      	adds	r3, #1
 800852e:	8013      	strh	r3, [r2, #0]
 8008530:	e107      	b.n	8008742 <BackEndTask+0x3fa>
					packetLength =UARTRxBuf[port - 1][0];
 8008532:	7822      	ldrb	r2, [r4, #0]
 8008534:	4b60      	ldr	r3, [pc, #384]	; (80086b8 <BackEndTask+0x370>)
 8008536:	601a      	str	r2, [r3, #0]
					parseStart =1;
 8008538:	4b60      	ldr	r3, [pc, #384]	; (80086bc <BackEndTask+0x374>)
 800853a:	2201      	movs	r2, #1
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	e796      	b.n	800846e <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8008540:	7862      	ldrb	r2, [r4, #1]
 8008542:	4b5d      	ldr	r3, [pc, #372]	; (80086b8 <BackEndTask+0x370>)
 8008544:	601a      	str	r2, [r3, #0]
					parseStart =2;
 8008546:	4b5d      	ldr	r3, [pc, #372]	; (80086bc <BackEndTask+0x374>)
 8008548:	2202      	movs	r2, #2
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	e78f      	b.n	800846e <BackEndTask+0x126>
						MSG_RX_BUF_SIZE - packetStart);
 800854e:	22c0      	movs	r2, #192	; 0xc0
 8008550:	1a52      	subs	r2, r2, r1
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8008552:	006b      	lsls	r3, r5, #1
 8008554:	195b      	adds	r3, r3, r5
 8008556:	019b      	lsls	r3, r3, #6
 8008558:	3b81      	subs	r3, #129	; 0x81
 800855a:	3bff      	subs	r3, #255	; 0xff
 800855c:	1859      	adds	r1, r3, r1
 800855e:	4b55      	ldr	r3, [pc, #340]	; (80086b4 <BackEndTask+0x36c>)
 8008560:	18c9      	adds	r1, r1, r3
 8008562:	9201      	str	r2, [sp, #4]
 8008564:	485a      	ldr	r0, [pc, #360]	; (80086d0 <BackEndTask+0x388>)
 8008566:	f00c f892 	bl	801468e <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 800856a:	4959      	ldr	r1, [pc, #356]	; (80086d0 <BackEndTask+0x388>)
 800856c:	9b01      	ldr	r3, [sp, #4]
 800856e:	469c      	mov	ip, r3
 8008570:	4461      	add	r1, ip
 8008572:	0008      	movs	r0, r1
 8008574:	1af2      	subs	r2, r6, r3
 8008576:	0021      	movs	r1, r4
 8008578:	f00c f889 	bl	801468e <memcpy>
 800857c:	e795      	b.n	80084aa <BackEndTask+0x162>
						portStatus[port] =MSG;
 800857e:	2301      	movs	r3, #1
 8008580:	4642      	mov	r2, r8
 8008582:	7013      	strb	r3, [r2, #0]
						messageLength[port - 1] =packetLength;
 8008584:	4b4c      	ldr	r3, [pc, #304]	; (80086b8 <BackEndTask+0x370>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4698      	mov	r8, r3
 800858a:	1eab      	subs	r3, r5, #2
 800858c:	4a52      	ldr	r2, [pc, #328]	; (80086d8 <BackEndTask+0x390>)
 800858e:	4641      	mov	r1, r8
 8008590:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8008592:	4b4a      	ldr	r3, [pc, #296]	; (80086bc <BackEndTask+0x374>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	22bf      	movs	r2, #191	; 0xbf
 8008598:	1ad2      	subs	r2, r2, r3
 800859a:	4590      	cmp	r8, r2
 800859c:	dc41      	bgt.n	8008622 <BackEndTask+0x2da>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 800859e:	00e8      	lsls	r0, r5, #3
 80085a0:	1b40      	subs	r0, r0, r5
 80085a2:	00c0      	lsls	r0, r0, #3
 80085a4:	9a03      	ldr	r2, [sp, #12]
 80085a6:	4694      	mov	ip, r2
 80085a8:	4460      	add	r0, ip
 80085aa:	0069      	lsls	r1, r5, #1
 80085ac:	1949      	adds	r1, r1, r5
 80085ae:	0189      	lsls	r1, r1, #6
 80085b0:	3981      	subs	r1, #129	; 0x81
 80085b2:	39ff      	subs	r1, #255	; 0xff
 80085b4:	18c9      	adds	r1, r1, r3
 80085b6:	4b3f      	ldr	r3, [pc, #252]	; (80086b4 <BackEndTask+0x36c>)
 80085b8:	18c9      	adds	r1, r1, r3
 80085ba:	4642      	mov	r2, r8
 80085bc:	f00c f867 	bl	801468e <memcpy>
						if(packetStart < packetEnd){
 80085c0:	4b3a      	ldr	r3, [pc, #232]	; (80086ac <BackEndTask+0x364>)
 80085c2:	6819      	ldr	r1, [r3, #0]
 80085c4:	4b41      	ldr	r3, [pc, #260]	; (80086cc <BackEndTask+0x384>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4299      	cmp	r1, r3
 80085ca:	da4a      	bge.n	8008662 <BackEndTask+0x31a>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 80085cc:	4b3a      	ldr	r3, [pc, #232]	; (80086b8 <BackEndTask+0x370>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	3204      	adds	r2, #4
 80085d2:	0068      	lsls	r0, r5, #1
 80085d4:	1940      	adds	r0, r0, r5
 80085d6:	0180      	lsls	r0, r0, #6
 80085d8:	3881      	subs	r0, #129	; 0x81
 80085da:	38ff      	subs	r0, #255	; 0xff
 80085dc:	1840      	adds	r0, r0, r1
 80085de:	4b35      	ldr	r3, [pc, #212]	; (80086b4 <BackEndTask+0x36c>)
 80085e0:	18c0      	adds	r0, r0, r3
 80085e2:	2100      	movs	r1, #0
 80085e4:	f00c f85c 	bl	80146a0 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 80085e8:	4b38      	ldr	r3, [pc, #224]	; (80086cc <BackEndTask+0x384>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2bbf      	cmp	r3, #191	; 0xbf
 80085ee:	d04f      	beq.n	8008690 <BackEndTask+0x348>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 80085f0:	3301      	adds	r3, #1
 80085f2:	4652      	mov	r2, sl
 80085f4:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 80085f6:	4a39      	ldr	r2, [pc, #228]	; (80086dc <BackEndTask+0x394>)
 80085f8:	8813      	ldrh	r3, [r2, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 80085fe:	00eb      	lsls	r3, r5, #3
 8008600:	1b5b      	subs	r3, r3, r5
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	3b70      	subs	r3, #112	; 0x70
 8008606:	4a26      	ldr	r2, [pc, #152]	; (80086a0 <BackEndTask+0x358>)
 8008608:	5cd3      	ldrb	r3, [r2, r3]
 800860a:	4a35      	ldr	r2, [pc, #212]	; (80086e0 <BackEndTask+0x398>)
 800860c:	7812      	ldrb	r2, [r2, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d003      	beq.n	800861a <BackEndTask+0x2d2>
 8008612:	3302      	adds	r3, #2
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b01      	cmp	r3, #1
 8008618:	d83e      	bhi.n	8008698 <BackEndTask+0x350>
							NotifyMessagingTask(port);
 800861a:	0038      	movs	r0, r7
 800861c:	f7ff fad4 	bl	8007bc8 <NotifyMessagingTask>
 8008620:	e082      	b.n	8008728 <BackEndTask+0x3e0>
 8008622:	00ee      	lsls	r6, r5, #3
 8008624:	1b76      	subs	r6, r6, r5
 8008626:	00f6      	lsls	r6, r6, #3
							MSG_RX_BUF_SIZE - parseStart);
 8008628:	22c0      	movs	r2, #192	; 0xc0
 800862a:	1ad2      	subs	r2, r2, r3
 800862c:	4691      	mov	r9, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800862e:	9a02      	ldr	r2, [sp, #8]
 8008630:	1990      	adds	r0, r2, r6
 8008632:	0069      	lsls	r1, r5, #1
 8008634:	1949      	adds	r1, r1, r5
 8008636:	0189      	lsls	r1, r1, #6
 8008638:	3981      	subs	r1, #129	; 0x81
 800863a:	39ff      	subs	r1, #255	; 0xff
 800863c:	18c9      	adds	r1, r1, r3
 800863e:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <BackEndTask+0x36c>)
 8008640:	18c9      	adds	r1, r1, r3
 8008642:	464a      	mov	r2, r9
 8008644:	f00c f823 	bl	801468e <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 8008648:	0030      	movs	r0, r6
 800864a:	3870      	subs	r0, #112	; 0x70
 800864c:	4448      	add	r0, r9
 800864e:	4b14      	ldr	r3, [pc, #80]	; (80086a0 <BackEndTask+0x358>)
 8008650:	469c      	mov	ip, r3
 8008652:	4460      	add	r0, ip
 8008654:	4643      	mov	r3, r8
 8008656:	464a      	mov	r2, r9
 8008658:	1a9a      	subs	r2, r3, r2
 800865a:	0021      	movs	r1, r4
 800865c:	f00c f817 	bl	801468e <memcpy>
 8008660:	e7ae      	b.n	80085c0 <BackEndTask+0x278>
							MSG_RX_BUF_SIZE - packetStart);
 8008662:	26c0      	movs	r6, #192	; 0xc0
 8008664:	1a76      	subs	r6, r6, r1
							memset(&UARTRxBuf[port - 1][packetStart],0,
 8008666:	0068      	lsls	r0, r5, #1
 8008668:	1940      	adds	r0, r0, r5
 800866a:	0180      	lsls	r0, r0, #6
 800866c:	3881      	subs	r0, #129	; 0x81
 800866e:	38ff      	subs	r0, #255	; 0xff
 8008670:	1840      	adds	r0, r0, r1
 8008672:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <BackEndTask+0x36c>)
 8008674:	18c0      	adds	r0, r0, r3
 8008676:	0032      	movs	r2, r6
 8008678:	2100      	movs	r1, #0
 800867a:	f00c f811 	bl	80146a0 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800867e:	4b0e      	ldr	r3, [pc, #56]	; (80086b8 <BackEndTask+0x370>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	3204      	adds	r2, #4
 8008684:	1b92      	subs	r2, r2, r6
 8008686:	2100      	movs	r1, #0
 8008688:	0020      	movs	r0, r4
 800868a:	f00c f809 	bl	80146a0 <memset>
 800868e:	e7ab      	b.n	80085e8 <BackEndTask+0x2a0>
							UARTRxBufIndex[port - 1] =0;
 8008690:	2300      	movs	r3, #0
 8008692:	4652      	mov	r2, sl
 8008694:	7013      	strb	r3, [r2, #0]
 8008696:	e7ae      	b.n	80085f6 <BackEndTask+0x2ae>
							ForwardReceivedMessage(port);
 8008698:	0038      	movs	r0, r7
 800869a:	f7ff fcf9 	bl	8008090 <ForwardReceivedMessage>
 800869e:	e043      	b.n	8008728 <BackEndTask+0x3e0>
 80086a0:	20000d7c 	.word	0x20000d7c
 80086a4:	200017c8 	.word	0x200017c8
 80086a8:	20006e50 	.word	0x20006e50
 80086ac:	20001af8 	.word	0x20001af8
 80086b0:	20001b54 	.word	0x20001b54
 80086b4:	20001348 	.word	0x20001348
 80086b8:	20001af4 	.word	0x20001af4
 80086bc:	20001afc 	.word	0x20001afc
 80086c0:	20000ae8 	.word	0x20000ae8
 80086c4:	2000116c 	.word	0x2000116c
 80086c8:	20001958 	.word	0x20001958
 80086cc:	20001af0 	.word	0x20001af0
 80086d0:	200017d0 	.word	0x200017d0
 80086d4:	20001b50 	.word	0x20001b50
 80086d8:	20000fa4 	.word	0x20000fa4
 80086dc:	20001998 	.word	0x20001998
 80086e0:	200010ea 	.word	0x200010ea
					MSG_RX_BUF_SIZE - packetStart);
 80086e4:	26c0      	movs	r6, #192	; 0xc0
 80086e6:	1a76      	subs	r6, r6, r1
					memset(&UARTRxBuf[port - 1][packetStart],0,
 80086e8:	0068      	lsls	r0, r5, #1
 80086ea:	1940      	adds	r0, r0, r5
 80086ec:	0180      	lsls	r0, r0, #6
 80086ee:	3881      	subs	r0, #129	; 0x81
 80086f0:	38ff      	subs	r0, #255	; 0xff
 80086f2:	1841      	adds	r1, r0, r1
 80086f4:	4821      	ldr	r0, [pc, #132]	; (800877c <BackEndTask+0x434>)
 80086f6:	1808      	adds	r0, r1, r0
 80086f8:	0032      	movs	r2, r6
 80086fa:	2100      	movs	r1, #0
 80086fc:	f00b ffd0 	bl	80146a0 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 8008700:	4b1f      	ldr	r3, [pc, #124]	; (8008780 <BackEndTask+0x438>)
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	3204      	adds	r2, #4
 8008706:	1b92      	subs	r2, r2, r6
 8008708:	2100      	movs	r1, #0
 800870a:	0020      	movs	r0, r4
 800870c:	f00b ffc8 	bl	80146a0 <memset>
 8008710:	e6f8      	b.n	8008504 <BackEndTask+0x1bc>
					UARTRxBufIndex[port - 1] =0;
 8008712:	2300      	movs	r3, #0
 8008714:	4652      	mov	r2, sl
 8008716:	7013      	strb	r3, [r2, #0]
 8008718:	e6fc      	b.n	8008514 <BackEndTask+0x1cc>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 800871a:	0038      	movs	r0, r7
 800871c:	f005 ffc2 	bl	800e6a4 <GetUart>
 8008720:	22c0      	movs	r2, #192	; 0xc0
 8008722:	0021      	movs	r1, r4
 8008724:	f00b f884 	bl	8013830 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 8008728:	3701      	adds	r7, #1
 800872a:	b2ff      	uxtb	r7, r7
 800872c:	3501      	adds	r5, #1
 800872e:	34c0      	adds	r4, #192	; 0xc0
 8008730:	2f07      	cmp	r7, #7
 8008732:	d017      	beq.n	8008764 <BackEndTask+0x41c>
 8008734:	1e6b      	subs	r3, r5, #1
 8008736:	445b      	add	r3, fp
 8008738:	4698      	mov	r8, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d800      	bhi.n	8008742 <BackEndTask+0x3fa>
 8008740:	e610      	b.n	8008364 <BackEndTask+0x1c>
 8008742:	1eab      	subs	r3, r5, #2
 8008744:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <BackEndTask+0x43c>)
 8008746:	4694      	mov	ip, r2
 8008748:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	2a00      	cmp	r2, #0
 800874e:	d0eb      	beq.n	8008728 <BackEndTask+0x3e0>
				MsgDMAStopped[port - 1] = false;
 8008750:	2200      	movs	r2, #0
 8008752:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 8008754:	4643      	mov	r3, r8
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	2b05      	cmp	r3, #5
 800875a:	d1de      	bne.n	800871a <BackEndTask+0x3d2>
					portStatus[port] =FREE;
 800875c:	2300      	movs	r3, #0
 800875e:	4642      	mov	r2, r8
 8008760:	7013      	strb	r3, [r2, #0]
 8008762:	e7da      	b.n	800871a <BackEndTask+0x3d2>
			}
		}

		taskYIELD();
 8008764:	f007 ff50 	bl	8010608 <vPortYield>
 8008768:	4c04      	ldr	r4, [pc, #16]	; (800877c <BackEndTask+0x434>)
void BackEndTask(void *argument){
 800876a:	2502      	movs	r5, #2
		for(port =1; port <= NumOfPorts; port++){
 800876c:	2701      	movs	r7, #1
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <BackEndTask+0x440>)
 8008770:	469b      	mov	fp, r3
 8008772:	e7df      	b.n	8008734 <BackEndTask+0x3ec>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8008774:	4a05      	ldr	r2, [pc, #20]	; (800878c <BackEndTask+0x444>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	e685      	b.n	8008486 <BackEndTask+0x13e>
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	20001348 	.word	0x20001348
 8008780:	20001af4 	.word	0x20001af4
 8008784:	20001340 	.word	0x20001340
 8008788:	2000116c 	.word	0x2000116c
 800878c:	20001af0 	.word	0x20001af0

08008790 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008790:	2001      	movs	r0, #1
 8008792:	4770      	bx	lr

08008794 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008796:	46de      	mov	lr, fp
 8008798:	4657      	mov	r7, sl
 800879a:	464e      	mov	r6, r9
 800879c:	4645      	mov	r5, r8
 800879e:	b5e0      	push	{r5, r6, r7, lr}
 80087a0:	b093      	sub	sp, #76	; 0x4c
	port =(int8_t )(unsigned )argument;
 80087a2:	b2c3      	uxtb	r3, r0
 80087a4:	9308      	str	r3, [sp, #32]
 80087a6:	23ff      	movs	r3, #255	; 0xff
 80087a8:	4003      	ands	r3, r0
 80087aa:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 80087ac:	1e5d      	subs	r5, r3, #1
 80087ae:	00eb      	lsls	r3, r5, #3
 80087b0:	1b5b      	subs	r3, r3, r5
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80087b6:	4ae2      	ldr	r2, [pc, #904]	; (8008b40 <PxMessagingTask+0x3ac>)
 80087b8:	18d3      	adds	r3, r2, r3
 80087ba:	9306      	str	r3, [sp, #24]
	HAL_StatusTypeDef status =HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 80087c0:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 80087c2:	000e      	movs	r6, r1
 80087c4:	1853      	adds	r3, r2, r1
 80087c6:	3302      	adds	r3, #2
 80087c8:	9309      	str	r3, [sp, #36]	; 0x24
 80087ca:	468a      	mov	sl, r1
 80087cc:	e062      	b.n	8008894 <PxMessagingTask+0x100>
				longMessage =1;
 80087ce:	4add      	ldr	r2, [pc, #884]	; (8008b44 <PxMessagingTask+0x3b0>)
 80087d0:	2101      	movs	r1, #1
 80087d2:	7011      	strb	r1, [r2, #0]
 80087d4:	e06f      	b.n	80088b6 <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 80087d6:	4bda      	ldr	r3, [pc, #872]	; (8008b40 <PxMessagingTask+0x3ac>)
 80087d8:	199b      	adds	r3, r3, r6
 80087da:	1818      	adds	r0, r3, r0
 80087dc:	78c7      	ldrb	r7, [r0, #3]
 80087de:	e08e      	b.n	80088fe <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 80087e0:	4bd9      	ldr	r3, [pc, #868]	; (8008b48 <PxMessagingTask+0x3b4>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 80087e6:	212c      	movs	r1, #44	; 0x2c
 80087e8:	9804      	ldr	r0, [sp, #16]
 80087ea:	f7ff fcb9 	bl	8008160 <SendMessageToModule>
 80087ee:	e089      	b.n	8008904 <PxMessagingTask+0x170>
					Delay_ms(100);
 80087f0:	2064      	movs	r0, #100	; 0x64
 80087f2:	f008 f875 	bl	80108e0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 80087f6:	2300      	movs	r3, #0
 80087f8:	9a08      	ldr	r2, [sp, #32]
 80087fa:	4659      	mov	r1, fp
 80087fc:	9804      	ldr	r0, [sp, #16]
 80087fe:	f001 fcf3 	bl	800a1e8 <remoteBootloaderUpdate>
 8008802:	e02e      	b.n	8008862 <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008804:	4bd1      	ldr	r3, [pc, #836]	; (8008b4c <PxMessagingTask+0x3b8>)
 8008806:	5d5a      	ldrb	r2, [r3, r5]
 8008808:	4bcd      	ldr	r3, [pc, #820]	; (8008b40 <PxMessagingTask+0x3ac>)
 800880a:	199b      	adds	r3, r3, r6
 800880c:	189b      	adds	r3, r3, r2
 800880e:	3b01      	subs	r3, #1
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	4acf      	ldr	r2, [pc, #828]	; (8008b50 <PxMessagingTask+0x3bc>)
 8008814:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 8008816:	2103      	movs	r1, #3
 8008818:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800881a:	429a      	cmp	r2, r3
 800881c:	d01e      	beq.n	800885c <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800881e:	4acc      	ldr	r2, [pc, #816]	; (8008b50 <PxMessagingTask+0x3bc>)
 8008820:	7013      	strb	r3, [r2, #0]
 8008822:	4acc      	ldr	r2, [pc, #816]	; (8008b54 <PxMessagingTask+0x3c0>)
 8008824:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008826:	9908      	ldr	r1, [sp, #32]
 8008828:	20ff      	movs	r0, #255	; 0xff
 800882a:	f7ff fc51 	bl	80080d0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800882e:	4bc7      	ldr	r3, [pc, #796]	; (8008b4c <PxMessagingTask+0x3b8>)
 8008830:	5d5a      	ldrb	r2, [r3, r5]
 8008832:	4bc3      	ldr	r3, [pc, #780]	; (8008b40 <PxMessagingTask+0x3ac>)
 8008834:	199b      	adds	r3, r3, r6
 8008836:	189b      	adds	r3, r3, r2
 8008838:	3b01      	subs	r3, #1
 800883a:	2200      	movs	r2, #0
 800883c:	701a      	strb	r2, [r3, #0]
				shift +=4;
 800883e:	9c05      	ldr	r4, [sp, #20]
 8008840:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8008842:	4bc2      	ldr	r3, [pc, #776]	; (8008b4c <PxMessagingTask+0x3b8>)
 8008844:	5d59      	ldrb	r1, [r3, r5]
 8008846:	1b0a      	subs	r2, r1, r4
 8008848:	b2d3      	uxtb	r3, r2
 800884a:	9305      	str	r3, [sp, #20]
					switch(code){
 800884c:	2f2d      	cmp	r7, #45	; 0x2d
 800884e:	d901      	bls.n	8008854 <PxMessagingTask+0xc0>
 8008850:	f001 fa96 	bl	8009d80 <PxMessagingTask+0x15ec>
 8008854:	00bb      	lsls	r3, r7, #2
 8008856:	4ac0      	ldr	r2, [pc, #768]	; (8008b58 <PxMessagingTask+0x3c4>)
 8008858:	58d3      	ldr	r3, [r2, r3]
 800885a:	469f      	mov	pc, r3
				if(result == BOS_OK){
 800885c:	464b      	mov	r3, r9
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0ed      	beq.n	800883e <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 8008862:	464b      	mov	r3, r9
 8008864:	2b01      	cmp	r3, #1
 8008866:	d101      	bne.n	800886c <PxMessagingTask+0xd8>
 8008868:	f001 faac 	bl	8009dc4 <PxMessagingTask+0x1630>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800886c:	4cb7      	ldr	r4, [pc, #732]	; (8008b4c <PxMessagingTask+0x3b8>)
 800886e:	5d62      	ldrb	r2, [r4, r5]
 8008870:	2100      	movs	r1, #0
 8008872:	9806      	ldr	r0, [sp, #24]
 8008874:	f00b ff14 	bl	80146a0 <memset>
		messageLength[port - 1] =0;
 8008878:	2300      	movs	r3, #0
 800887a:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800887c:	4bb7      	ldr	r3, [pc, #732]	; (8008b5c <PxMessagingTask+0x3c8>)
 800887e:	4642      	mov	r2, r8
 8008880:	5c9b      	ldrb	r3, [r3, r2]
 8008882:	3b02      	subs	r3, #2
 8008884:	2b02      	cmp	r3, #2
 8008886:	d903      	bls.n	8008890 <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 8008888:	4bb4      	ldr	r3, [pc, #720]	; (8008b5c <PxMessagingTask+0x3c8>)
 800888a:	2200      	movs	r2, #0
 800888c:	4641      	mov	r1, r8
 800888e:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008890:	f007 feba 	bl	8010608 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008894:	2101      	movs	r1, #1
 8008896:	4249      	negs	r1, r1
 8008898:	2001      	movs	r0, #1
 800889a:	f007 fbfb 	bl	8010094 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800889e:	4bab      	ldr	r3, [pc, #684]	; (8008b4c <PxMessagingTask+0x3b8>)
 80088a0:	5d5b      	ldrb	r3, [r3, r5]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0dd      	beq.n	8008862 <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 80088a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088a8:	781b      	ldrb	r3, [r3, #0]
 80088aa:	b25a      	sxtb	r2, r3
 80088ac:	2a00      	cmp	r2, #0
 80088ae:	db8e      	blt.n	80087ce <PxMessagingTask+0x3a>
				longMessage =0;
 80088b0:	4aa4      	ldr	r2, [pc, #656]	; (8008b44 <PxMessagingTask+0x3b0>)
 80088b2:	2100      	movs	r1, #0
 80088b4:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 80088b6:	4aa2      	ldr	r2, [pc, #648]	; (8008b40 <PxMessagingTask+0x3ac>)
 80088b8:	5cb1      	ldrb	r1, [r6, r2]
 80088ba:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 80088bc:	1992      	adds	r2, r2, r6
 80088be:	7852      	ldrb	r2, [r2, #1]
 80088c0:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 80088c2:	2201      	movs	r2, #1
 80088c4:	0010      	movs	r0, r2
 80088c6:	4018      	ands	r0, r3
			shift =0;
 80088c8:	9005      	str	r0, [sp, #20]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 80088ca:	499f      	ldr	r1, [pc, #636]	; (8008b48 <PxMessagingTask+0x3b4>)
 80088cc:	071c      	lsls	r4, r3, #28
 80088ce:	0fa4      	lsrs	r4, r4, #30
 80088d0:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 80088d2:	091c      	lsrs	r4, r3, #4
 80088d4:	4022      	ands	r2, r4
 80088d6:	0014      	movs	r4, r2
 80088d8:	1e67      	subs	r7, r4, #1
 80088da:	41bc      	sbcs	r4, r7
 80088dc:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 80088de:	2460      	movs	r4, #96	; 0x60
 80088e0:	401c      	ands	r4, r3
 80088e2:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 80088e4:	079b      	lsls	r3, r3, #30
 80088e6:	d400      	bmi.n	80088ea <PxMessagingTask+0x156>
 80088e8:	e775      	b.n	80087d6 <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 80088ea:	4b95      	ldr	r3, [pc, #596]	; (8008b40 <PxMessagingTask+0x3ac>)
 80088ec:	199b      	adds	r3, r3, r6
 80088ee:	181b      	adds	r3, r3, r0
 80088f0:	7919      	ldrb	r1, [r3, #4]
 80088f2:	0209      	lsls	r1, r1, #8
 80088f4:	78df      	ldrb	r7, [r3, #3]
 80088f6:	187f      	adds	r7, r7, r1
 80088f8:	b2bf      	uxth	r7, r7
				++shift;
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	9305      	str	r3, [sp, #20]
			if(true == BOSMessaging.received_Acknowledgment){
 80088fe:	2a00      	cmp	r2, #0
 8008900:	d000      	beq.n	8008904 <PxMessagingTask+0x170>
 8008902:	e76d      	b.n	80087e0 <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008904:	465b      	mov	r3, fp
 8008906:	3b01      	subs	r3, #1
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2bfc      	cmp	r3, #252	; 0xfc
 800890c:	d901      	bls.n	8008912 <PxMessagingTask+0x17e>
 800890e:	f001 fa93 	bl	8009e38 <PxMessagingTask+0x16a4>
 8008912:	4b93      	ldr	r3, [pc, #588]	; (8008b60 <PxMessagingTask+0x3cc>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	455b      	cmp	r3, fp
 8008918:	d101      	bne.n	800891e <PxMessagingTask+0x18a>
 800891a:	f001 fa8d 	bl	8009e38 <PxMessagingTask+0x16a4>
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <PxMessagingTask+0x192>
 8008922:	f001 fa83 	bl	8009e2c <PxMessagingTask+0x1698>
				ForwardReceivedMessage(port);
 8008926:	9808      	ldr	r0, [sp, #32]
 8008928:	f7ff fbb2 	bl	8008090 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800892c:	4b86      	ldr	r3, [pc, #536]	; (8008b48 <PxMessagingTask+0x3b4>)
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 8008934:	4b8b      	ldr	r3, [pc, #556]	; (8008b64 <PxMessagingTask+0x3d0>)
 8008936:	2203      	movs	r2, #3
 8008938:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800893a:	2f19      	cmp	r7, #25
 800893c:	d100      	bne.n	8008940 <PxMessagingTask+0x1ac>
 800893e:	e757      	b.n	80087f0 <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 8008940:	2f1a      	cmp	r7, #26
 8008942:	d18e      	bne.n	8008862 <PxMessagingTask+0xce>
					Delay_ms(100);
 8008944:	2064      	movs	r0, #100	; 0x64
 8008946:	f007 ffcb 	bl	80108e0 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800894a:	4b7d      	ldr	r3, [pc, #500]	; (8008b40 <PxMessagingTask+0x3ac>)
 800894c:	199b      	adds	r3, r3, r6
 800894e:	9a05      	ldr	r2, [sp, #20]
 8008950:	5c9b      	ldrb	r3, [r3, r2]
 8008952:	9a08      	ldr	r2, [sp, #32]
 8008954:	4659      	mov	r1, fp
 8008956:	9804      	ldr	r0, [sp, #16]
 8008958:	f001 fc46 	bl	800a1e8 <remoteBootloaderUpdate>
 800895c:	e781      	b.n	8008862 <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 800895e:	9b05      	ldr	r3, [sp, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01f      	beq.n	80089a4 <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 8008964:	9b04      	ldr	r3, [sp, #16]
 8008966:	1e58      	subs	r0, r3, #1
 8008968:	0042      	lsls	r2, r0, #1
 800896a:	4b7f      	ldr	r3, [pc, #508]	; (8008b68 <PxMessagingTask+0x3d4>)
 800896c:	5ad3      	ldrh	r3, [r2, r3]
 800896e:	4652      	mov	r2, sl
 8008970:	1911      	adds	r1, r2, r4
 8008972:	4a73      	ldr	r2, [pc, #460]	; (8008b40 <PxMessagingTask+0x3ac>)
 8008974:	1889      	adds	r1, r1, r2
 8008976:	3201      	adds	r2, #1
 8008978:	4452      	add	r2, sl
 800897a:	1914      	adds	r4, r2, r4
 800897c:	9a05      	ldr	r2, [sp, #20]
 800897e:	3a01      	subs	r2, #1
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	18a4      	adds	r4, r4, r2
 8008984:	2780      	movs	r7, #128	; 0x80
 8008986:	023f      	lsls	r7, r7, #8
 8008988:	4684      	mov	ip, r0
 800898a:	780a      	ldrb	r2, [r1, #0]
 800898c:	3a01      	subs	r2, #1
 800898e:	0038      	movs	r0, r7
 8008990:	4110      	asrs	r0, r2
 8008992:	4303      	orrs	r3, r0
 8008994:	b29b      	uxth	r3, r3
 8008996:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 8008998:	42a1      	cmp	r1, r4
 800899a:	d1f6      	bne.n	800898a <PxMessagingTask+0x1f6>
 800899c:	4660      	mov	r0, ip
 800899e:	0040      	lsls	r0, r0, #1
 80089a0:	4a71      	ldr	r2, [pc, #452]	; (8008b68 <PxMessagingTask+0x3d4>)
 80089a2:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 80089a4:	4b71      	ldr	r3, [pc, #452]	; (8008b6c <PxMessagingTask+0x3d8>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	701a      	strb	r2, [r3, #0]
							break;
 80089aa:	2300      	movs	r3, #0
 80089ac:	4699      	mov	r9, r3
 80089ae:	e75d      	b.n	800886c <PxMessagingTask+0xd8>
							indMode =IND_PING;
 80089b0:	4b6c      	ldr	r3, [pc, #432]	; (8008b64 <PxMessagingTask+0x3d0>)
 80089b2:	2201      	movs	r2, #1
 80089b4:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 80089b6:	200a      	movs	r0, #10
 80089b8:	f006 f841 	bl	800ea3e <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 80089bc:	4b62      	ldr	r3, [pc, #392]	; (8008b48 <PxMessagingTask+0x3b4>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	2240      	movs	r2, #64	; 0x40
 80089c2:	4393      	bics	r3, r2
 80089c4:	2200      	movs	r2, #0
 80089c6:	4691      	mov	r9, r2
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	d000      	beq.n	80089ce <PxMessagingTask+0x23a>
 80089cc:	e74e      	b.n	800886c <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 80089ce:	2102      	movs	r1, #2
 80089d0:	9804      	ldr	r0, [sp, #16]
 80089d2:	f7ff fbc5 	bl	8008160 <SendMessageToModule>
 80089d6:	e749      	b.n	800886c <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 80089d8:	4b61      	ldr	r3, [pc, #388]	; (8008b60 <PxMessagingTask+0x3cc>)
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	0093      	lsls	r3, r2, #2
 80089de:	189b      	adds	r3, r3, r2
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	4a63      	ldr	r2, [pc, #396]	; (8008b70 <PxMessagingTask+0x3dc>)
 80089e4:	5c9b      	ldrb	r3, [r3, r2]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d118      	bne.n	8008a1c <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 80089ea:	9a04      	ldr	r2, [sp, #16]
 80089ec:	4961      	ldr	r1, [pc, #388]	; (8008b74 <PxMessagingTask+0x3e0>)
 80089ee:	4862      	ldr	r0, [pc, #392]	; (8008b78 <PxMessagingTask+0x3e4>)
 80089f0:	f00c f882 	bl	8014af8 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 80089f4:	4c60      	ldr	r4, [pc, #384]	; (8008b78 <PxMessagingTask+0x3e4>)
 80089f6:	0020      	movs	r0, r4
 80089f8:	f7f7 fb8e 	bl	8000118 <strlen>
 80089fc:	b282      	uxth	r2, r0
 80089fe:	4b5f      	ldr	r3, [pc, #380]	; (8008b7c <PxMessagingTask+0x3e8>)
 8008a00:	7818      	ldrb	r0, [r3, #0]
 8008a02:	2301      	movs	r3, #1
 8008a04:	425b      	negs	r3, r3
 8008a06:	9300      	str	r3, [sp, #0]
 8008a08:	3333      	adds	r3, #51	; 0x33
 8008a0a:	0021      	movs	r1, r4
 8008a0c:	f005 fe6c 	bl	800e6e8 <writePxMutex>
							responseStatus =BOS_OK;
 8008a10:	4b56      	ldr	r3, [pc, #344]	; (8008b6c <PxMessagingTask+0x3d8>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
							break;
 8008a16:	2300      	movs	r3, #0
 8008a18:	4699      	mov	r9, r3
 8008a1a:	e727      	b.n	800886c <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 8008a1c:	230a      	movs	r3, #10
 8008a1e:	9904      	ldr	r1, [sp, #16]
 8008a20:	434b      	muls	r3, r1
 8008a22:	4a53      	ldr	r2, [pc, #332]	; (8008b70 <PxMessagingTask+0x3dc>)
 8008a24:	189b      	adds	r3, r3, r2
 8008a26:	000a      	movs	r2, r1
 8008a28:	4955      	ldr	r1, [pc, #340]	; (8008b80 <PxMessagingTask+0x3ec>)
 8008a2a:	4853      	ldr	r0, [pc, #332]	; (8008b78 <PxMessagingTask+0x3e4>)
 8008a2c:	f00c f864 	bl	8014af8 <sprintf>
 8008a30:	e7e0      	b.n	80089f4 <PxMessagingTask+0x260>
							IND_ON();
 8008a32:	2090      	movs	r0, #144	; 0x90
 8008a34:	2201      	movs	r2, #1
 8008a36:	2180      	movs	r1, #128	; 0x80
 8008a38:	05c0      	lsls	r0, r0, #23
 8008a3a:	f009 fb6d 	bl	8012118 <HAL_GPIO_WritePin>
							break;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4699      	mov	r9, r3
 8008a42:	e713      	b.n	800886c <PxMessagingTask+0xd8>
							IND_OFF();
 8008a44:	2090      	movs	r0, #144	; 0x90
 8008a46:	2200      	movs	r2, #0
 8008a48:	2180      	movs	r1, #128	; 0x80
 8008a4a:	05c0      	lsls	r0, r0, #23
 8008a4c:	f009 fb64 	bl	8012118 <HAL_GPIO_WritePin>
							break;
 8008a50:	2300      	movs	r3, #0
 8008a52:	4699      	mov	r9, r3
 8008a54:	e70a      	b.n	800886c <PxMessagingTask+0xd8>
							IND_toggle();
 8008a56:	2090      	movs	r0, #144	; 0x90
 8008a58:	2180      	movs	r1, #128	; 0x80
 8008a5a:	05c0      	lsls	r0, r0, #23
 8008a5c:	f009 fb62 	bl	8012124 <HAL_GPIO_TogglePin>
							break;
 8008a60:	2300      	movs	r3, #0
 8008a62:	4699      	mov	r9, r3
 8008a64:	e702      	b.n	800886c <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008a66:	4f47      	ldr	r7, [pc, #284]	; (8008b84 <PxMessagingTask+0x3f0>)
 8008a68:	00ab      	lsls	r3, r5, #2
 8008a6a:	4a35      	ldr	r2, [pc, #212]	; (8008b40 <PxMessagingTask+0x3ac>)
 8008a6c:	1992      	adds	r2, r2, r6
 8008a6e:	1910      	adds	r0, r2, r4
 8008a70:	7881      	ldrb	r1, [r0, #2]
 8008a72:	468c      	mov	ip, r1
 8008a74:	9904      	ldr	r1, [sp, #16]
 8008a76:	0209      	lsls	r1, r1, #8
 8008a78:	4461      	add	r1, ip
 8008a7a:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008a7c:	18fb      	adds	r3, r7, r3
 8008a7e:	5d11      	ldrb	r1, [r2, r4]
 8008a80:	0209      	lsls	r1, r1, #8
 8008a82:	7842      	ldrb	r2, [r0, #1]
 8008a84:	1852      	adds	r2, r2, r1
 8008a86:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 8008a88:	4b3f      	ldr	r3, [pc, #252]	; (8008b88 <PxMessagingTask+0x3f4>)
 8008a8a:	881b      	ldrh	r3, [r3, #0]
 8008a8c:	4a3f      	ldr	r2, [pc, #252]	; (8008b8c <PxMessagingTask+0x3f8>)
 8008a8e:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008a94:	9c08      	ldr	r4, [sp, #32]
 8008a96:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8008a98:	2002      	movs	r0, #2
 8008a9a:	f005 ffd0 	bl	800ea3e <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 8008a9e:	2303      	movs	r3, #3
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	0020      	movs	r0, r4
 8008aaa:	f7ff f8d3 	bl	8007c54 <SendMessageFromPort>
							break;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4699      	mov	r9, r3
 8008ab2:	e6db      	b.n	800886c <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008ab4:	4f33      	ldr	r7, [pc, #204]	; (8008b84 <PxMessagingTask+0x3f0>)
 8008ab6:	00ab      	lsls	r3, r5, #2
 8008ab8:	4a21      	ldr	r2, [pc, #132]	; (8008b40 <PxMessagingTask+0x3ac>)
 8008aba:	1992      	adds	r2, r2, r6
 8008abc:	1910      	adds	r0, r2, r4
 8008abe:	7881      	ldrb	r1, [r0, #2]
 8008ac0:	468c      	mov	ip, r1
 8008ac2:	9904      	ldr	r1, [sp, #16]
 8008ac4:	0209      	lsls	r1, r1, #8
 8008ac6:	4461      	add	r1, ip
 8008ac8:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 8008aca:	18fb      	adds	r3, r7, r3
 8008acc:	5d11      	ldrb	r1, [r2, r4]
 8008ace:	0209      	lsls	r1, r1, #8
 8008ad0:	7842      	ldrb	r2, [r0, #1]
 8008ad2:	1852      	adds	r2, r2, r1
 8008ad4:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8008ad6:	4b25      	ldr	r3, [pc, #148]	; (8008b6c <PxMessagingTask+0x3d8>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
							break;
 8008adc:	2300      	movs	r3, #0
 8008ade:	4699      	mov	r9, r3
 8008ae0:	e6c4      	b.n	800886c <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 8008ae2:	9808      	ldr	r0, [sp, #32]
 8008ae4:	f7fa ff20 	bl	8003928 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008ae8:	4b1e      	ldr	r3, [pc, #120]	; (8008b64 <PxMessagingTask+0x3d0>)
 8008aea:	2202      	movs	r2, #2
 8008aec:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008aee:	200a      	movs	r0, #10
 8008af0:	f005 ffa5 	bl	800ea3e <osDelay>
 8008af4:	4f23      	ldr	r7, [pc, #140]	; (8008b84 <PxMessagingTask+0x3f0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008af6:	2401      	movs	r4, #1
							temp =0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	9307      	str	r3, [sp, #28]
 8008afc:	e004      	b.n	8008b08 <PxMessagingTask+0x374>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008afe:	3401      	adds	r4, #1
 8008b00:	b2e4      	uxtb	r4, r4
 8008b02:	3704      	adds	r7, #4
 8008b04:	2c07      	cmp	r4, #7
 8008b06:	d011      	beq.n	8008b2c <PxMessagingTask+0x398>
								if(neighbors[p - 1][0]){
 8008b08:	883b      	ldrh	r3, [r7, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d0f7      	beq.n	8008afe <PxMessagingTask+0x36a>
									messageParams[temp] =p;
 8008b0e:	4a1f      	ldr	r2, [pc, #124]	; (8008b8c <PxMessagingTask+0x3f8>)
 8008b10:	9b07      	ldr	r3, [sp, #28]
 8008b12:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008b14:	1c58      	adds	r0, r3, #1
 8008b16:	4694      	mov	ip, r2
 8008b18:	4460      	add	r0, ip
 8008b1a:	2204      	movs	r2, #4
 8008b1c:	0039      	movs	r1, r7
 8008b1e:	f00b fdb6 	bl	801468e <memcpy>
									temp +=5;
 8008b22:	9b07      	ldr	r3, [sp, #28]
 8008b24:	3305      	adds	r3, #5
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	9307      	str	r3, [sp, #28]
 8008b2a:	e7e8      	b.n	8008afe <PxMessagingTask+0x36a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 8008b2c:	466b      	mov	r3, sp
 8008b2e:	8b9a      	ldrh	r2, [r3, #28]
 8008b30:	210d      	movs	r1, #13
 8008b32:	9804      	ldr	r0, [sp, #16]
 8008b34:	f7ff fb14 	bl	8008160 <SendMessageToModule>
							break;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	4699      	mov	r9, r3
 8008b3c:	e696      	b.n	800886c <PxMessagingTask+0xd8>
 8008b3e:	46c0      	nop			; (mov r8, r8)
 8008b40:	20000d7c 	.word	0x20000d7c
 8008b44:	20000f69 	.word	0x20000f69
 8008b48:	20006dd0 	.word	0x20006dd0
 8008b4c:	20000fa4 	.word	0x20000fa4
 8008b50:	2000199a 	.word	0x2000199a
 8008b54:	20000d28 	.word	0x20000d28
 8008b58:	0801b964 	.word	0x0801b964
 8008b5c:	2000116c 	.word	0x2000116c
 8008b60:	200010ea 	.word	0x200010ea
 8008b64:	20000f68 	.word	0x20000f68
 8008b68:	20007358 	.word	0x20007358
 8008b6c:	20001188 	.word	0x20001188
 8008b70:	20000fdc 	.word	0x20000fdc
 8008b74:	0801a4c0 	.word	0x0801a4c0
 8008b78:	20001b00 	.word	0x20001b00
 8008b7c:	20000ae8 	.word	0x20000ae8
 8008b80:	0801a4d4 	.word	0x0801a4d4
 8008b84:	200010ec 	.word	0x200010ec
 8008b88:	20000078 	.word	0x20000078
 8008b8c:	20000fac 	.word	0x20000fac
							temp =numOfParams / 5;
 8008b90:	2105      	movs	r1, #5
 8008b92:	9805      	ldr	r0, [sp, #20]
 8008b94:	f7f7 fadc 	bl	8000150 <__udivsi3>
 8008b98:	b2c2      	uxtb	r2, r0
 8008b9a:	9207      	str	r2, [sp, #28]
							for(uint8_t k =0; k < temp; k++){
 8008b9c:	2a00      	cmp	r2, #0
 8008b9e:	d018      	beq.n	8008bd2 <PxMessagingTask+0x43e>
 8008ba0:	4653      	mov	r3, sl
 8008ba2:	191f      	adds	r7, r3, r4
 8008ba4:	4bda      	ldr	r3, [pc, #872]	; (8008f10 <PxMessagingTask+0x77c>)
 8008ba6:	18ff      	adds	r7, r7, r3
 8008ba8:	3305      	adds	r3, #5
 8008baa:	4453      	add	r3, sl
 8008bac:	191c      	adds	r4, r3, r4
 8008bae:	1e53      	subs	r3, r2, #1
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	009a      	lsls	r2, r3, #2
 8008bb4:	18d3      	adds	r3, r2, r3
 8008bb6:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008bb8:	4bd6      	ldr	r3, [pc, #856]	; (8008f14 <PxMessagingTask+0x780>)
 8008bba:	4699      	mov	r9, r3
 8008bbc:	7838      	ldrb	r0, [r7, #0]
 8008bbe:	3801      	subs	r0, #1
 8008bc0:	0080      	lsls	r0, r0, #2
 8008bc2:	4448      	add	r0, r9
 8008bc4:	1c79      	adds	r1, r7, #1
 8008bc6:	2204      	movs	r2, #4
 8008bc8:	f00b fd61 	bl	801468e <memcpy>
 8008bcc:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 8008bce:	42bc      	cmp	r4, r7
 8008bd0:	d1f4      	bne.n	8008bbc <PxMessagingTask+0x428>
							responseStatus =BOS_OK;
 8008bd2:	4bd1      	ldr	r3, [pc, #836]	; (8008f18 <PxMessagingTask+0x784>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
							break;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	4699      	mov	r9, r3
 8008bdc:	e646      	b.n	800886c <PxMessagingTask+0xd8>
 8008bde:	4653      	mov	r3, sl
 8008be0:	18e3      	adds	r3, r4, r3
 8008be2:	4acb      	ldr	r2, [pc, #812]	; (8008f10 <PxMessagingTask+0x77c>)
 8008be4:	4699      	mov	r9, r3
 8008be6:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008be8:	2701      	movs	r7, #1
								if(p != port)
 8008bea:	9b08      	ldr	r3, [sp, #32]
 8008bec:	42bb      	cmp	r3, r7
 8008bee:	d006      	beq.n	8008bfe <PxMessagingTask+0x46a>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008bf0:	0038      	movs	r0, r7
 8008bf2:	f005 fd57 	bl	800e6a4 <GetUart>
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	7819      	ldrb	r1, [r3, #0]
 8008bfa:	f005 fded 	bl	800e7d8 <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008bfe:	3701      	adds	r7, #1
 8008c00:	b2ff      	uxtb	r7, r7
 8008c02:	2301      	movs	r3, #1
 8008c04:	469c      	mov	ip, r3
 8008c06:	44e1      	add	r9, ip
 8008c08:	2f07      	cmp	r7, #7
 8008c0a:	d1ee      	bne.n	8008bea <PxMessagingTask+0x456>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 8008c0c:	9808      	ldr	r0, [sp, #32]
 8008c0e:	f005 fd49 	bl	800e6a4 <GetUart>
 8008c12:	4bbf      	ldr	r3, [pc, #764]	; (8008f10 <PxMessagingTask+0x77c>)
 8008c14:	199b      	adds	r3, r3, r6
 8008c16:	191c      	adds	r4, r3, r4
 8008c18:	7aa1      	ldrb	r1, [r4, #10]
 8008c1a:	f005 fddd 	bl	800e7d8 <SwapUartPins>
							break;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	4699      	mov	r9, r3
 8008c22:	e623      	b.n	800886c <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008c24:	0020      	movs	r0, r4
 8008c26:	4bba      	ldr	r3, [pc, #744]	; (8008f10 <PxMessagingTask+0x77c>)
 8008c28:	199b      	adds	r3, r3, r6
 8008c2a:	5d1b      	ldrb	r3, [r3, r4]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d10a      	bne.n	8008c46 <PxMessagingTask+0x4b2>
								myID =cMessage[port - 1][1 + shift];
 8008c30:	2238      	movs	r2, #56	; 0x38
 8008c32:	436a      	muls	r2, r5
 8008c34:	4bb6      	ldr	r3, [pc, #728]	; (8008f10 <PxMessagingTask+0x77c>)
 8008c36:	189b      	adds	r3, r3, r2
 8008c38:	191c      	adds	r4, r3, r4
 8008c3a:	7862      	ldrb	r2, [r4, #1]
 8008c3c:	4bb7      	ldr	r3, [pc, #732]	; (8008f1c <PxMessagingTask+0x788>)
 8008c3e:	701a      	strb	r2, [r3, #0]
 8008c40:	2300      	movs	r3, #0
 8008c42:	4699      	mov	r9, r3
 8008c44:	e612      	b.n	800886c <PxMessagingTask+0xd8>
 8008c46:	2200      	movs	r2, #0
 8008c48:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d000      	beq.n	8008c50 <PxMessagingTask+0x4bc>
 8008c4e:	e60d      	b.n	800886c <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 8008c50:	49b3      	ldr	r1, [pc, #716]	; (8008f20 <PxMessagingTask+0x78c>)
 8008c52:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 8008c54:	3238      	adds	r2, #56	; 0x38
 8008c56:	436a      	muls	r2, r5
 8008c58:	4bad      	ldr	r3, [pc, #692]	; (8008f10 <PxMessagingTask+0x77c>)
 8008c5a:	189b      	adds	r3, r3, r2
 8008c5c:	181b      	adds	r3, r3, r0
 8008c5e:	785a      	ldrb	r2, [r3, #1]
 8008c60:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 8008c62:	7898      	ldrb	r0, [r3, #2]
 8008c64:	2303      	movs	r3, #3
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	330d      	adds	r3, #13
 8008c6a:	464a      	mov	r2, r9
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	f7fe fff1 	bl	8007c54 <SendMessageFromPort>
 8008c72:	e5fb      	b.n	800886c <PxMessagingTask+0xd8>
							if(longMessage){
 8008c74:	4bab      	ldr	r3, [pc, #684]	; (8008f24 <PxMessagingTask+0x790>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d012      	beq.n	8008ca2 <PxMessagingTask+0x50e>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008c7c:	4baa      	ldr	r3, [pc, #680]	; (8008f28 <PxMessagingTask+0x794>)
 8008c7e:	4699      	mov	r9, r3
 8008c80:	881f      	ldrh	r7, [r3, #0]
 8008c82:	48aa      	ldr	r0, [pc, #680]	; (8008f2c <PxMessagingTask+0x798>)
 8008c84:	1838      	adds	r0, r7, r0
 8008c86:	4454      	add	r4, sl
 8008c88:	49a1      	ldr	r1, [pc, #644]	; (8008f10 <PxMessagingTask+0x77c>)
 8008c8a:	1861      	adds	r1, r4, r1
 8008c8c:	9c05      	ldr	r4, [sp, #20]
 8008c8e:	0022      	movs	r2, r4
 8008c90:	f00b fcfd 	bl	801468e <memcpy>
								longMessageLastPtr +=numOfParams;
 8008c94:	46a4      	mov	ip, r4
 8008c96:	4467      	add	r7, ip
 8008c98:	464b      	mov	r3, r9
 8008c9a:	801f      	strh	r7, [r3, #0]
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	4699      	mov	r9, r3
 8008ca0:	e5e4      	b.n	800886c <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008ca2:	4ba1      	ldr	r3, [pc, #644]	; (8008f28 <PxMessagingTask+0x794>)
 8008ca4:	469b      	mov	fp, r3
 8008ca6:	881f      	ldrh	r7, [r3, #0]
 8008ca8:	4ba0      	ldr	r3, [pc, #640]	; (8008f2c <PxMessagingTask+0x798>)
 8008caa:	4699      	mov	r9, r3
 8008cac:	18f8      	adds	r0, r7, r3
 8008cae:	4454      	add	r4, sl
 8008cb0:	4997      	ldr	r1, [pc, #604]	; (8008f10 <PxMessagingTask+0x77c>)
 8008cb2:	1861      	adds	r1, r4, r1
 8008cb4:	9c05      	ldr	r4, [sp, #20]
 8008cb6:	0022      	movs	r2, r4
 8008cb8:	f00b fce9 	bl	801468e <memcpy>
								longMessageLastPtr +=numOfParams;
 8008cbc:	193c      	adds	r4, r7, r4
 8008cbe:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8008cc0:	2116      	movs	r1, #22
 8008cc2:	0020      	movs	r0, r4
 8008cc4:	f7f7 fa44 	bl	8000150 <__udivsi3>
 8008cc8:	4b99      	ldr	r3, [pc, #612]	; (8008f30 <PxMessagingTask+0x79c>)
 8008cca:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8008ccc:	0022      	movs	r2, r4
 8008cce:	4649      	mov	r1, r9
 8008cd0:	4898      	ldr	r0, [pc, #608]	; (8008f34 <PxMessagingTask+0x7a0>)
 8008cd2:	f00b fcdc 	bl	801468e <memcpy>
								longMessageLastPtr =0;
 8008cd6:	2400      	movs	r4, #0
 8008cd8:	465b      	mov	r3, fp
 8008cda:	801c      	strh	r4, [r3, #0]
 8008cdc:	46a1      	mov	r9, r4
 8008cde:	e5c5      	b.n	800886c <PxMessagingTask+0xd8>
							ReadPortsDirMSG(src);
 8008ce0:	9804      	ldr	r0, [sp, #16]
 8008ce2:	f005 fddf 	bl	800e8a4 <ReadPortsDirMSG>
								break;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	4699      	mov	r9, r3
 8008cea:	e5bf      	b.n	800886c <PxMessagingTask+0xd8>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008cec:	4b88      	ldr	r3, [pc, #544]	; (8008f10 <PxMessagingTask+0x77c>)
 8008cee:	199b      	adds	r3, r3, r6
 8008cf0:	5d1a      	ldrb	r2, [r3, r4]
 8008cf2:	0612      	lsls	r2, r2, #24
 8008cf4:	191b      	adds	r3, r3, r4
 8008cf6:	78d9      	ldrb	r1, [r3, #3]
 8008cf8:	1852      	adds	r2, r2, r1
 8008cfa:	7859      	ldrb	r1, [r3, #1]
 8008cfc:	0409      	lsls	r1, r1, #16
 8008cfe:	1852      	adds	r2, r2, r1
 8008d00:	7899      	ldrb	r1, [r3, #2]
 8008d02:	0209      	lsls	r1, r1, #8
 8008d04:	1852      	adds	r2, r2, r1
 8008d06:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008d08:	791b      	ldrb	r3, [r3, #4]
 8008d0a:	2bff      	cmp	r3, #255	; 0xff
 8008d0c:	d01c      	beq.n	8008d48 <PxMessagingTask+0x5b4>
								for(p =0; p < numOfParams; p++){
 8008d0e:	9b05      	ldr	r3, [sp, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d016      	beq.n	8008d42 <PxMessagingTask+0x5ae>
 8008d14:	4653      	mov	r3, sl
 8008d16:	1d1f      	adds	r7, r3, #4
 8008d18:	193f      	adds	r7, r7, r4
 8008d1a:	4b7d      	ldr	r3, [pc, #500]	; (8008f10 <PxMessagingTask+0x77c>)
 8008d1c:	18ff      	adds	r7, r7, r3
 8008d1e:	3305      	adds	r3, #5
 8008d20:	4453      	add	r3, sl
 8008d22:	191c      	adds	r4, r3, r4
 8008d24:	9b05      	ldr	r3, [sp, #20]
 8008d26:	3b01      	subs	r3, #1
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 8008d2c:	783b      	ldrb	r3, [r7, #0]
 8008d2e:	9307      	str	r3, [sp, #28]
									if(temp > 0 && temp <= NumOfPorts){
 8008d30:	3b01      	subs	r3, #1
 8008d32:	2b05      	cmp	r3, #5
 8008d34:	d915      	bls.n	8008d62 <PxMessagingTask+0x5ce>
 8008d36:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 8008d38:	42a7      	cmp	r7, r4
 8008d3a:	d1f7      	bne.n	8008d2c <PxMessagingTask+0x598>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	4699      	mov	r9, r3
 8008d40:	e594      	b.n	800886c <PxMessagingTask+0xd8>
							temp =temp32 =0;
 8008d42:	9307      	str	r3, [sp, #28]
								for(p =0; p < numOfParams; p++){
 8008d44:	4699      	mov	r9, r3
 8008d46:	e591      	b.n	800886c <PxMessagingTask+0xd8>
								for(p =1; p <= NumOfPorts; p++){
 8008d48:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 8008d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d4c:	0020      	movs	r0, r4
 8008d4e:	f005 fd39 	bl	800e7c4 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8008d52:	3401      	adds	r4, #1
 8008d54:	b2e4      	uxtb	r4, r4
 8008d56:	2c07      	cmp	r4, #7
 8008d58:	d1f7      	bne.n	8008d4a <PxMessagingTask+0x5b6>
							temp =temp32 =0;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	4699      	mov	r9, r3
 8008d60:	e584      	b.n	800886c <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 8008d62:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008d64:	9807      	ldr	r0, [sp, #28]
 8008d66:	f005 fd2d 	bl	800e7c4 <UpdateBaudrate>
 8008d6a:	e7e4      	b.n	8008d36 <PxMessagingTask+0x5a2>
							SaveToRO();
 8008d6c:	f002 f86e 	bl	800ae4c <SaveToRO>
							SaveEEportsDir();
 8008d70:	f7fa fb5e 	bl	8003430 <SaveEEportsDir>
							indMode =IND_PING;
 8008d74:	4b70      	ldr	r3, [pc, #448]	; (8008f38 <PxMessagingTask+0x7a4>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	701a      	strb	r2, [r3, #0]
							break;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4699      	mov	r9, r3
 8008d7e:	e575      	b.n	800886c <PxMessagingTask+0xd8>
							ClearEEportsDir();
 8008d80:	f7fa fc4c 	bl	800361c <ClearEEportsDir>
							ClearROtopology();
 8008d84:	f002 f96a 	bl	800b05c <ClearROtopology>
							osDelay(100);
 8008d88:	2064      	movs	r0, #100	; 0x64
 8008d8a:	f005 fe58 	bl	800ea3e <osDelay>
							indMode =IND_TOPOLOGY;
 8008d8e:	4b6a      	ldr	r3, [pc, #424]	; (8008f38 <PxMessagingTask+0x7a4>)
 8008d90:	2202      	movs	r2, #2
 8008d92:	701a      	strb	r2, [r3, #0]
							break;
 8008d94:	2300      	movs	r3, #0
 8008d96:	4699      	mov	r9, r3
 8008d98:	e568      	b.n	800886c <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008d9a:	f005 ff61 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 8008d9e:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 8008da0:	465b      	mov	r3, fp
 8008da2:	2bff      	cmp	r3, #255	; 0xff
 8008da4:	d028      	beq.n	8008df8 <PxMessagingTask+0x664>
							else if(dst == BOS_MULTICAST)
 8008da6:	2bfe      	cmp	r3, #254	; 0xfe
 8008da8:	d02f      	beq.n	8008e0a <PxMessagingTask+0x676>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008daa:	4454      	add	r4, sl
 8008dac:	4958      	ldr	r1, [pc, #352]	; (8008f10 <PxMessagingTask+0x77c>)
 8008dae:	1861      	adds	r1, r4, r1
 8008db0:	9a05      	ldr	r2, [sp, #20]
 8008db2:	4862      	ldr	r0, [pc, #392]	; (8008f3c <PxMessagingTask+0x7a8>)
 8008db4:	f00b fc6b 	bl	801468e <memcpy>
								temp =PcPort;
 8008db8:	4c61      	ldr	r4, [pc, #388]	; (8008f40 <PxMessagingTask+0x7ac>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008dba:	4b60      	ldr	r3, [pc, #384]	; (8008f3c <PxMessagingTask+0x7a8>)
 8008dbc:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008dbe:	4b61      	ldr	r3, [pc, #388]	; (8008f44 <PxMessagingTask+0x7b0>)
 8008dc0:	4699      	mov	r9, r3
								temp =PcPort;
 8008dc2:	7823      	ldrb	r3, [r4, #0]
 8008dc4:	9307      	str	r3, [sp, #28]
								PcPort =port;
 8008dc6:	9a08      	ldr	r2, [sp, #32]
 8008dc8:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008dca:	2299      	movs	r2, #153	; 0x99
 8008dcc:	0092      	lsls	r2, r2, #2
 8008dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008dd0:	4658      	mov	r0, fp
 8008dd2:	f005 fec7 	bl	800eb64 <FreeRTOS_CLIProcessCommand>
 8008dd6:	0007      	movs	r7, r0
								PcPort =temp;
 8008dd8:	9b07      	ldr	r3, [sp, #28]
 8008dda:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008ddc:	464b      	mov	r3, r9
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b60      	cmp	r3, #96	; 0x60
 8008de2:	d01d      	beq.n	8008e20 <PxMessagingTask+0x68c>
							} while(xReturned != pdFALSE);
 8008de4:	2f00      	cmp	r7, #0
 8008de6:	d1ec      	bne.n	8008dc2 <PxMessagingTask+0x62e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008de8:	2232      	movs	r2, #50	; 0x32
 8008dea:	2100      	movs	r1, #0
 8008dec:	4853      	ldr	r0, [pc, #332]	; (8008f3c <PxMessagingTask+0x7a8>)
 8008dee:	f00b fc57 	bl	80146a0 <memset>
							break;
 8008df2:	2300      	movs	r3, #0
 8008df4:	4699      	mov	r9, r3
 8008df6:	e539      	b.n	800886c <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008df8:	9a05      	ldr	r2, [sp, #20]
 8008dfa:	3a01      	subs	r2, #1
 8008dfc:	4454      	add	r4, sl
 8008dfe:	4944      	ldr	r1, [pc, #272]	; (8008f10 <PxMessagingTask+0x77c>)
 8008e00:	1861      	adds	r1, r4, r1
 8008e02:	484e      	ldr	r0, [pc, #312]	; (8008f3c <PxMessagingTask+0x7a8>)
 8008e04:	f00b fc43 	bl	801468e <memcpy>
 8008e08:	e7d6      	b.n	8008db8 <PxMessagingTask+0x624>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008e0a:	9b05      	ldr	r3, [sp, #20]
 8008e0c:	9a07      	ldr	r2, [sp, #28]
 8008e0e:	1a9a      	subs	r2, r3, r2
 8008e10:	3a02      	subs	r2, #2
 8008e12:	4454      	add	r4, sl
 8008e14:	493e      	ldr	r1, [pc, #248]	; (8008f10 <PxMessagingTask+0x77c>)
 8008e16:	1861      	adds	r1, r4, r1
 8008e18:	4848      	ldr	r0, [pc, #288]	; (8008f3c <PxMessagingTask+0x7a8>)
 8008e1a:	f00b fc38 	bl	801468e <memcpy>
 8008e1e:	e7cb      	b.n	8008db8 <PxMessagingTask+0x624>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008e20:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e22:	f7f7 f979 	bl	8000118 <strlen>
 8008e26:	0002      	movs	r2, r0
 8008e28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e2a:	483d      	ldr	r0, [pc, #244]	; (8008f20 <PxMessagingTask+0x78c>)
 8008e2c:	f00b fc2f 	bl	801468e <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008e30:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e32:	f7f7 f971 	bl	8000118 <strlen>
 8008e36:	b282      	uxth	r2, r0
 8008e38:	2118      	movs	r1, #24
 8008e3a:	9804      	ldr	r0, [sp, #16]
 8008e3c:	f7ff f990 	bl	8008160 <SendMessageToModule>
									osDelay(10);
 8008e40:	200a      	movs	r0, #10
 8008e42:	f005 fdfc 	bl	800ea3e <osDelay>
 8008e46:	e7cd      	b.n	8008de4 <PxMessagingTask+0x650>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008e48:	f005 ff0a 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 8008e4c:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008e4e:	f7f7 f963 	bl	8000118 <strlen>
 8008e52:	0002      	movs	r2, r0
 8008e54:	2100      	movs	r1, #0
 8008e56:	0038      	movs	r0, r7
 8008e58:	f00b fc22 	bl	80146a0 <memset>
							if(longMessage){
 8008e5c:	4b31      	ldr	r3, [pc, #196]	; (8008f24 <PxMessagingTask+0x790>)
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d013      	beq.n	8008e8c <PxMessagingTask+0x6f8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e64:	4b30      	ldr	r3, [pc, #192]	; (8008f28 <PxMessagingTask+0x794>)
 8008e66:	4699      	mov	r9, r3
 8008e68:	8818      	ldrh	r0, [r3, #0]
 8008e6a:	1838      	adds	r0, r7, r0
 8008e6c:	4454      	add	r4, sl
 8008e6e:	4928      	ldr	r1, [pc, #160]	; (8008f10 <PxMessagingTask+0x77c>)
 8008e70:	1861      	adds	r1, r4, r1
 8008e72:	9c05      	ldr	r4, [sp, #20]
 8008e74:	0022      	movs	r2, r4
 8008e76:	f00b fc0a 	bl	801468e <memcpy>
								longMessageLastPtr +=numOfParams;
 8008e7a:	464b      	mov	r3, r9
 8008e7c:	881a      	ldrh	r2, [r3, #0]
 8008e7e:	46a4      	mov	ip, r4
 8008e80:	4462      	add	r2, ip
 8008e82:	464b      	mov	r3, r9
 8008e84:	801a      	strh	r2, [r3, #0]
 8008e86:	2300      	movs	r3, #0
 8008e88:	4699      	mov	r9, r3
 8008e8a:	e4ef      	b.n	800886c <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008e8c:	4b26      	ldr	r3, [pc, #152]	; (8008f28 <PxMessagingTask+0x794>)
 8008e8e:	4699      	mov	r9, r3
 8008e90:	8818      	ldrh	r0, [r3, #0]
 8008e92:	1838      	adds	r0, r7, r0
 8008e94:	4454      	add	r4, sl
 8008e96:	491e      	ldr	r1, [pc, #120]	; (8008f10 <PxMessagingTask+0x77c>)
 8008e98:	1861      	adds	r1, r4, r1
 8008e9a:	9a05      	ldr	r2, [sp, #20]
 8008e9c:	f00b fbf7 	bl	801468e <memcpy>
								longMessageLastPtr =0;
 8008ea0:	2400      	movs	r4, #0
 8008ea2:	464b      	mov	r3, r9
 8008ea4:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 8008ea6:	4b1c      	ldr	r3, [pc, #112]	; (8008f18 <PxMessagingTask+0x784>)
 8008ea8:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008eaa:	0023      	movs	r3, r4
 8008eac:	0022      	movs	r2, r4
 8008eae:	0021      	movs	r1, r4
 8008eb0:	4825      	ldr	r0, [pc, #148]	; (8008f48 <PxMessagingTask+0x7b4>)
 8008eb2:	6800      	ldr	r0, [r0, #0]
 8008eb4:	f007 f93a 	bl	801012c <xTaskGenericNotify>
 8008eb8:	46a1      	mov	r9, r4
 8008eba:	e4d7      	b.n	800886c <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008ebc:	4b23      	ldr	r3, [pc, #140]	; (8008f4c <PxMessagingTask+0x7b8>)
 8008ebe:	4a24      	ldr	r2, [pc, #144]	; (8008f50 <PxMessagingTask+0x7bc>)
 8008ec0:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008ec2:	4b1d      	ldr	r3, [pc, #116]	; (8008f38 <PxMessagingTask+0x7a4>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008ec8:	200a      	movs	r0, #10
 8008eca:	f005 fdb8 	bl	800ea3e <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	4b20      	ldr	r3, [pc, #128]	; (8008f54 <PxMessagingTask+0x7c0>)
 8008ed4:	4a20      	ldr	r2, [pc, #128]	; (8008f58 <PxMessagingTask+0x7c4>)
 8008ed6:	60da      	str	r2, [r3, #12]
 8008ed8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008edc:	46c0      	nop			; (mov r8, r8)
 8008ede:	e7fd      	b.n	8008edc <PxMessagingTask+0x748>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008ee0:	4f0b      	ldr	r7, [pc, #44]	; (8008f10 <PxMessagingTask+0x77c>)
 8008ee2:	19bf      	adds	r7, r7, r6
 8008ee4:	5d38      	ldrb	r0, [r7, r4]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	3319      	adds	r3, #25
 8008eec:	2200      	movs	r2, #0
 8008eee:	2100      	movs	r1, #0
 8008ef0:	f7fe feb0 	bl	8007c54 <SendMessageFromPort>
							osDelay(100);
 8008ef4:	2064      	movs	r0, #100	; 0x64
 8008ef6:	f005 fda2 	bl	800ea3e <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008efa:	5d3b      	ldrb	r3, [r7, r4]
 8008efc:	4a07      	ldr	r2, [pc, #28]	; (8008f1c <PxMessagingTask+0x788>)
 8008efe:	7811      	ldrb	r1, [r2, #0]
 8008f00:	9a08      	ldr	r2, [sp, #32]
 8008f02:	9804      	ldr	r0, [sp, #16]
 8008f04:	f001 f970 	bl	800a1e8 <remoteBootloaderUpdate>
							break;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	4699      	mov	r9, r3
 8008f0c:	e4ae      	b.n	800886c <PxMessagingTask+0xd8>
 8008f0e:	46c0      	nop			; (mov r8, r8)
 8008f10:	20000d7c 	.word	0x20000d7c
 8008f14:	20001104 	.word	0x20001104
 8008f18:	20001188 	.word	0x20001188
 8008f1c:	200010ea 	.word	0x200010ea
 8008f20:	20000fac 	.word	0x20000fac
 8008f24:	20000f69 	.word	0x20000f69
 8008f28:	20000f6a 	.word	0x20000f6a
 8008f2c:	200019d0 	.word	0x200019d0
 8008f30:	20000044 	.word	0x20000044
 8008f34:	20000aec 	.word	0x20000aec
 8008f38:	20000f68 	.word	0x20000f68
 8008f3c:	2000199c 	.word	0x2000199c
 8008f40:	20000ae8 	.word	0x20000ae8
 8008f44:	20006dd0 	.word	0x20006dd0
 8008f48:	20001958 	.word	0x20001958
 8008f4c:	20007ff0 	.word	0x20007ff0
 8008f50:	deadbeef 	.word	0xdeadbeef
 8008f54:	e000ed00 	.word	0xe000ed00
 8008f58:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008f5c:	46a3      	mov	fp, r4
 8008f5e:	230b      	movs	r3, #11
 8008f60:	4699      	mov	r9, r3
 8008f62:	44a1      	add	r9, r4
 8008f64:	4be7      	ldr	r3, [pc, #924]	; (8009304 <PxMessagingTask+0xb70>)
 8008f66:	199b      	adds	r3, r3, r6
 8008f68:	464a      	mov	r2, r9
 8008f6a:	5c9b      	ldrb	r3, [r3, r2]
 8008f6c:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 8008f6e:	9b05      	ldr	r3, [sp, #20]
 8008f70:	2b0f      	cmp	r3, #15
 8008f72:	d100      	bne.n	8008f76 <PxMessagingTask+0x7e2>
 8008f74:	e088      	b.n	8009088 <PxMessagingTask+0x8f4>
							if(numOfParams == 17)
 8008f76:	9b05      	ldr	r3, [sp, #20]
 8008f78:	2b11      	cmp	r3, #17
 8008f7a:	d100      	bne.n	8008f7e <PxMessagingTask+0x7ea>
 8008f7c:	e08c      	b.n	8009098 <PxMessagingTask+0x904>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008f7e:	465b      	mov	r3, fp
 8008f80:	1c59      	adds	r1, r3, #1
 8008f82:	910c      	str	r1, [sp, #48]	; 0x30
 8008f84:	1c98      	adds	r0, r3, #2
 8008f86:	900d      	str	r0, [sp, #52]	; 0x34
 8008f88:	1cda      	adds	r2, r3, #3
 8008f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8008f8c:	4bdd      	ldr	r3, [pc, #884]	; (8009304 <PxMessagingTask+0xb70>)
 8008f8e:	199b      	adds	r3, r3, r6
 8008f90:	465c      	mov	r4, fp
 8008f92:	5d1c      	ldrb	r4, [r3, r4]
 8008f94:	0624      	lsls	r4, r4, #24
 8008f96:	5c9a      	ldrb	r2, [r3, r2]
 8008f98:	18a4      	adds	r4, r4, r2
 8008f9a:	5c5a      	ldrb	r2, [r3, r1]
 8008f9c:	0412      	lsls	r2, r2, #16
 8008f9e:	18a4      	adds	r4, r4, r2
 8008fa0:	5c1a      	ldrb	r2, [r3, r0]
 8008fa2:	0212      	lsls	r2, r2, #8
 8008fa4:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008fa6:	465a      	mov	r2, fp
 8008fa8:	3204      	adds	r2, #4
 8008faa:	920f      	str	r2, [sp, #60]	; 0x3c
 8008fac:	4659      	mov	r1, fp
 8008fae:	3105      	adds	r1, #5
 8008fb0:	9110      	str	r1, [sp, #64]	; 0x40
 8008fb2:	4658      	mov	r0, fp
 8008fb4:	3006      	adds	r0, #6
 8008fb6:	9011      	str	r0, [sp, #68]	; 0x44
 8008fb8:	465f      	mov	r7, fp
 8008fba:	3707      	adds	r7, #7
 8008fbc:	9707      	str	r7, [sp, #28]
 8008fbe:	5c9f      	ldrb	r7, [r3, r2]
 8008fc0:	063f      	lsls	r7, r7, #24
 8008fc2:	5c5a      	ldrb	r2, [r3, r1]
 8008fc4:	0412      	lsls	r2, r2, #16
 8008fc6:	18bf      	adds	r7, r7, r2
 8008fc8:	9a07      	ldr	r2, [sp, #28]
 8008fca:	5c9a      	ldrb	r2, [r3, r2]
 8008fcc:	18bf      	adds	r7, r7, r2
 8008fce:	5c1b      	ldrb	r3, [r3, r0]
 8008fd0:	021b      	lsls	r3, r3, #8
 8008fd2:	18ff      	adds	r7, r7, r3
							if(temp == false){
 8008fd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d166      	bne.n	80090a8 <PxMessagingTask+0x914>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008fda:	4bca      	ldr	r3, [pc, #808]	; (8009304 <PxMessagingTask+0xb70>)
 8008fdc:	199b      	adds	r3, r3, r6
 8008fde:	445b      	add	r3, fp
 8008fe0:	7a5b      	ldrb	r3, [r3, #9]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d012      	beq.n	800900c <PxMessagingTask+0x878>
 8008fe6:	2138      	movs	r1, #56	; 0x38
 8008fe8:	4369      	muls	r1, r5
 8008fea:	4ac6      	ldr	r2, [pc, #792]	; (8009304 <PxMessagingTask+0xb70>)
 8008fec:	1852      	adds	r2, r2, r1
 8008fee:	445a      	add	r2, fp
 8008ff0:	7a91      	ldrb	r1, [r2, #10]
 8008ff2:	2900      	cmp	r1, #0
 8008ff4:	d00a      	beq.n	800900c <PxMessagingTask+0x878>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008ff6:	2038      	movs	r0, #56	; 0x38
 8008ff8:	4368      	muls	r0, r5
 8008ffa:	4ac2      	ldr	r2, [pc, #776]	; (8009304 <PxMessagingTask+0xb70>)
 8008ffc:	1812      	adds	r2, r2, r0
 8008ffe:	445a      	add	r2, fp
 8009000:	7a10      	ldrb	r0, [r2, #8]
 8009002:	9100      	str	r1, [sp, #0]
 8009004:	003a      	movs	r2, r7
 8009006:	0021      	movs	r1, r4
 8009008:	f7fe fd02 	bl	8007a10 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800900c:	4bbd      	ldr	r3, [pc, #756]	; (8009304 <PxMessagingTask+0xb70>)
 800900e:	199b      	adds	r3, r3, r6
 8009010:	464a      	mov	r2, r9
 8009012:	5c9b      	ldrb	r3, [r3, r2]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d012      	beq.n	800903e <PxMessagingTask+0x8aa>
 8009018:	2138      	movs	r1, #56	; 0x38
 800901a:	4369      	muls	r1, r5
 800901c:	4ab9      	ldr	r2, [pc, #740]	; (8009304 <PxMessagingTask+0xb70>)
 800901e:	1852      	adds	r2, r2, r1
 8009020:	445a      	add	r2, fp
 8009022:	7b11      	ldrb	r1, [r2, #12]
 8009024:	2900      	cmp	r1, #0
 8009026:	d00a      	beq.n	800903e <PxMessagingTask+0x8aa>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8009028:	2038      	movs	r0, #56	; 0x38
 800902a:	4368      	muls	r0, r5
 800902c:	4ab5      	ldr	r2, [pc, #724]	; (8009304 <PxMessagingTask+0xb70>)
 800902e:	1812      	adds	r2, r2, r0
 8009030:	445a      	add	r2, fp
 8009032:	7a10      	ldrb	r0, [r2, #8]
 8009034:	9100      	str	r1, [sp, #0]
 8009036:	003a      	movs	r2, r7
 8009038:	0021      	movs	r1, r4
 800903a:	f7fe fce9 	bl	8007a10 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800903e:	4bb1      	ldr	r3, [pc, #708]	; (8009304 <PxMessagingTask+0xb70>)
 8009040:	199b      	adds	r3, r3, r6
 8009042:	445b      	add	r3, fp
 8009044:	7b5b      	ldrb	r3, [r3, #13]
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	2200      	movs	r2, #0
 800904a:	4691      	mov	r9, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	d101      	bne.n	8009054 <PxMessagingTask+0x8c0>
 8009050:	f7ff fc0c 	bl	800886c <PxMessagingTask+0xd8>
 8009054:	3238      	adds	r2, #56	; 0x38
 8009056:	436a      	muls	r2, r5
 8009058:	4baa      	ldr	r3, [pc, #680]	; (8009304 <PxMessagingTask+0xb70>)
 800905a:	189b      	adds	r3, r3, r2
 800905c:	445b      	add	r3, fp
 800905e:	7b9a      	ldrb	r2, [r3, #14]
 8009060:	454a      	cmp	r2, r9
 8009062:	d101      	bne.n	8009068 <PxMessagingTask+0x8d4>
 8009064:	f000 febb 	bl	8009dde <PxMessagingTask+0x164a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8009068:	2138      	movs	r1, #56	; 0x38
 800906a:	4369      	muls	r1, r5
 800906c:	4ba5      	ldr	r3, [pc, #660]	; (8009304 <PxMessagingTask+0xb70>)
 800906e:	185b      	adds	r3, r3, r1
 8009070:	445b      	add	r3, fp
 8009072:	7a18      	ldrb	r0, [r3, #8]
 8009074:	9200      	str	r2, [sp, #0]
 8009076:	9b07      	ldr	r3, [sp, #28]
 8009078:	003a      	movs	r2, r7
 800907a:	0021      	movs	r1, r4
 800907c:	f7fe fcc8 	bl	8007a10 <SetupDMAStreams>
 8009080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009082:	9307      	str	r3, [sp, #28]
 8009084:	f7ff fbf2 	bl	800886c <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 8009088:	2238      	movs	r2, #56	; 0x38
 800908a:	436a      	muls	r2, r5
 800908c:	4b9d      	ldr	r3, [pc, #628]	; (8009304 <PxMessagingTask+0xb70>)
 800908e:	189b      	adds	r3, r3, r2
 8009090:	191c      	adds	r4, r3, r4
 8009092:	7b63      	ldrb	r3, [r4, #13]
 8009094:	930b      	str	r3, [sp, #44]	; 0x2c
 8009096:	e772      	b.n	8008f7e <PxMessagingTask+0x7ea>
								temp =cMessage[port - 1][15 + shift];
 8009098:	2238      	movs	r2, #56	; 0x38
 800909a:	436a      	muls	r2, r5
 800909c:	4b99      	ldr	r3, [pc, #612]	; (8009304 <PxMessagingTask+0xb70>)
 800909e:	189b      	adds	r3, r3, r2
 80090a0:	445b      	add	r3, fp
 80090a2:	7bdb      	ldrb	r3, [r3, #15]
 80090a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80090a6:	e76a      	b.n	8008f7e <PxMessagingTask+0x7ea>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 80090a8:	2338      	movs	r3, #56	; 0x38
 80090aa:	436b      	muls	r3, r5
 80090ac:	4c95      	ldr	r4, [pc, #596]	; (8009304 <PxMessagingTask+0xb70>)
 80090ae:	18e4      	adds	r4, r4, r3
 80090b0:	465b      	mov	r3, fp
 80090b2:	18e6      	adds	r6, r4, r3
 80090b4:	7a31      	ldrb	r1, [r6, #8]
 80090b6:	20e4      	movs	r0, #228	; 0xe4
 80090b8:	f003 f9b4 	bl	800c424 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 80090bc:	465b      	mov	r3, fp
 80090be:	5ce3      	ldrb	r3, [r4, r3]
 80090c0:	021b      	lsls	r3, r3, #8
 80090c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80090c4:	5ca1      	ldrb	r1, [r4, r2]
 80090c6:	18c9      	adds	r1, r1, r3
 80090c8:	b289      	uxth	r1, r1
 80090ca:	20e5      	movs	r0, #229	; 0xe5
 80090cc:	f003 f9aa 	bl	800c424 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 80090d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80090d2:	5ce3      	ldrb	r3, [r4, r3]
 80090d4:	021b      	lsls	r3, r3, #8
 80090d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d8:	5ca1      	ldrb	r1, [r4, r2]
 80090da:	18c9      	adds	r1, r1, r3
 80090dc:	b289      	uxth	r1, r1
 80090de:	20e6      	movs	r0, #230	; 0xe6
 80090e0:	f003 f9a0 	bl	800c424 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 80090e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090e6:	5ce3      	ldrb	r3, [r4, r3]
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090ec:	5ca1      	ldrb	r1, [r4, r2]
 80090ee:	18c9      	adds	r1, r1, r3
 80090f0:	b289      	uxth	r1, r1
 80090f2:	20e7      	movs	r0, #231	; 0xe7
 80090f4:	f003 f996 	bl	800c424 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 80090f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090fa:	5ce3      	ldrb	r3, [r4, r3]
 80090fc:	021b      	lsls	r3, r3, #8
 80090fe:	9a07      	ldr	r2, [sp, #28]
 8009100:	5ca1      	ldrb	r1, [r4, r2]
 8009102:	18c9      	adds	r1, r1, r3
 8009104:	b289      	uxth	r1, r1
 8009106:	20e8      	movs	r0, #232	; 0xe8
 8009108:	f003 f98c 	bl	800c424 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800910c:	7a73      	ldrb	r3, [r6, #9]
 800910e:	021b      	lsls	r3, r3, #8
 8009110:	7ab1      	ldrb	r1, [r6, #10]
 8009112:	18c9      	adds	r1, r1, r3
 8009114:	b289      	uxth	r1, r1
 8009116:	20e9      	movs	r0, #233	; 0xe9
 8009118:	f003 f984 	bl	800c424 <EE_WriteVariable>
								if(numOfParams == 19)
 800911c:	9b05      	ldr	r3, [sp, #20]
 800911e:	2b13      	cmp	r3, #19
 8009120:	d116      	bne.n	8009150 <PxMessagingTask+0x9bc>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8009122:	3325      	adds	r3, #37	; 0x25
 8009124:	436b      	muls	r3, r5
 8009126:	4d77      	ldr	r5, [pc, #476]	; (8009304 <PxMessagingTask+0xb70>)
 8009128:	18ed      	adds	r5, r5, r3
 800912a:	464b      	mov	r3, r9
 800912c:	5ceb      	ldrb	r3, [r5, r3]
 800912e:	021b      	lsls	r3, r3, #8
 8009130:	445d      	add	r5, fp
 8009132:	7b29      	ldrb	r1, [r5, #12]
 8009134:	18c9      	adds	r1, r1, r3
 8009136:	b289      	uxth	r1, r1
 8009138:	20ea      	movs	r0, #234	; 0xea
 800913a:	f003 f973 	bl	800c424 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	4b71      	ldr	r3, [pc, #452]	; (8009308 <PxMessagingTask+0xb74>)
 8009144:	4a71      	ldr	r2, [pc, #452]	; (800930c <PxMessagingTask+0xb78>)
 8009146:	60da      	str	r2, [r3, #12]
 8009148:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800914c:	46c0      	nop			; (mov r8, r8)
 800914e:	e7fd      	b.n	800914c <PxMessagingTask+0x9b8>
								if(numOfParams == 21)
 8009150:	9b05      	ldr	r3, [sp, #20]
 8009152:	2b15      	cmp	r3, #21
 8009154:	d1f3      	bne.n	800913e <PxMessagingTask+0x9aa>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 8009156:	3323      	adds	r3, #35	; 0x23
 8009158:	435d      	muls	r5, r3
 800915a:	4b6a      	ldr	r3, [pc, #424]	; (8009304 <PxMessagingTask+0xb70>)
 800915c:	195b      	adds	r3, r3, r5
 800915e:	445b      	add	r3, fp
 8009160:	7b5a      	ldrb	r2, [r3, #13]
 8009162:	0212      	lsls	r2, r2, #8
 8009164:	7b99      	ldrb	r1, [r3, #14]
 8009166:	1889      	adds	r1, r1, r2
 8009168:	b289      	uxth	r1, r1
 800916a:	20eb      	movs	r0, #235	; 0xeb
 800916c:	f003 f95a 	bl	800c424 <EE_WriteVariable>
 8009170:	e7e5      	b.n	800913e <PxMessagingTask+0x9aa>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8009172:	4f64      	ldr	r7, [pc, #400]	; (8009304 <PxMessagingTask+0xb70>)
 8009174:	19bf      	adds	r7, r7, r6
 8009176:	1939      	adds	r1, r7, r4
 8009178:	7a8b      	ldrb	r3, [r1, #10]
 800917a:	9305      	str	r3, [sp, #20]
 800917c:	7aca      	ldrb	r2, [r1, #11]
 800917e:	4864      	ldr	r0, [pc, #400]	; (8009310 <PxMessagingTask+0xb7c>)
 8009180:	7803      	ldrb	r3, [r0, #0]
 8009182:	4699      	mov	r9, r3
 8009184:	7a4b      	ldrb	r3, [r1, #9]
 8009186:	469b      	mov	fp, r3
 8009188:	7b08      	ldrb	r0, [r1, #12]
 800918a:	0003      	movs	r3, r0
 800918c:	1e58      	subs	r0, r3, #1
 800918e:	4183      	sbcs	r3, r0
 8009190:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8009192:	7908      	ldrb	r0, [r1, #4]
 8009194:	0603      	lsls	r3, r0, #24
 8009196:	469c      	mov	ip, r3
 8009198:	7948      	ldrb	r0, [r1, #5]
 800919a:	0400      	lsls	r0, r0, #16
 800919c:	4460      	add	r0, ip
 800919e:	79cb      	ldrb	r3, [r1, #7]
 80091a0:	469c      	mov	ip, r3
 80091a2:	4460      	add	r0, ip
 80091a4:	798b      	ldrb	r3, [r1, #6]
 80091a6:	021b      	lsls	r3, r3, #8
 80091a8:	469c      	mov	ip, r3
 80091aa:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80091ac:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 80091ae:	5d38      	ldrb	r0, [r7, r4]
 80091b0:	0600      	lsls	r0, r0, #24
 80091b2:	78cc      	ldrb	r4, [r1, #3]
 80091b4:	1900      	adds	r0, r0, r4
 80091b6:	784c      	ldrb	r4, [r1, #1]
 80091b8:	0424      	lsls	r4, r4, #16
 80091ba:	1900      	adds	r0, r0, r4
 80091bc:	788c      	ldrb	r4, [r1, #2]
 80091be:	0224      	lsls	r4, r4, #8
 80091c0:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 80091c2:	9001      	str	r0, [sp, #4]
 80091c4:	7a09      	ldrb	r1, [r1, #8]
 80091c6:	9100      	str	r1, [sp, #0]
 80091c8:	9b05      	ldr	r3, [sp, #20]
 80091ca:	4649      	mov	r1, r9
 80091cc:	4658      	mov	r0, fp
 80091ce:	f7fe ffed 	bl	80081ac <StartScastDMAStream>
							break;
 80091d2:	2300      	movs	r3, #0
 80091d4:	4699      	mov	r9, r3
 80091d6:	f7ff fb49 	bl	800886c <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 80091da:	0023      	movs	r3, r4
 80091dc:	4a49      	ldr	r2, [pc, #292]	; (8009304 <PxMessagingTask+0xb70>)
 80091de:	1992      	adds	r2, r2, r6
 80091e0:	5d12      	ldrb	r2, [r2, r4]
 80091e2:	2a00      	cmp	r2, #0
 80091e4:	d000      	beq.n	80091e8 <PxMessagingTask+0xa54>
 80091e6:	e099      	b.n	800931c <PxMessagingTask+0xb88>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80091e8:	3238      	adds	r2, #56	; 0x38
 80091ea:	436a      	muls	r2, r5
 80091ec:	4b45      	ldr	r3, [pc, #276]	; (8009304 <PxMessagingTask+0xb70>)
 80091ee:	189b      	adds	r3, r3, r2
 80091f0:	191c      	adds	r4, r3, r4
 80091f2:	78a3      	ldrb	r3, [r4, #2]
 80091f4:	061b      	lsls	r3, r3, #24
 80091f6:	78e2      	ldrb	r2, [r4, #3]
 80091f8:	0412      	lsls	r2, r2, #16
 80091fa:	189b      	adds	r3, r3, r2
 80091fc:	7962      	ldrb	r2, [r4, #5]
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	7922      	ldrb	r2, [r4, #4]
 8009202:	0212      	lsls	r2, r2, #8
 8009204:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8009206:	7862      	ldrb	r2, [r4, #1]
 8009208:	3a01      	subs	r2, #1
 800920a:	b2d1      	uxtb	r1, r2
 800920c:	2907      	cmp	r1, #7
 800920e:	d901      	bls.n	8009214 <PxMessagingTask+0xa80>
 8009210:	f000 fdcc 	bl	8009dac <PxMessagingTask+0x1618>
 8009214:	b2d2      	uxtb	r2, r2
 8009216:	0092      	lsls	r2, r2, #2
 8009218:	493e      	ldr	r1, [pc, #248]	; (8009314 <PxMessagingTask+0xb80>)
 800921a:	588a      	ldr	r2, [r1, r2]
 800921c:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	4b3d      	ldr	r3, [pc, #244]	; (8009318 <PxMessagingTask+0xb84>)
 8009222:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8009224:	2201      	movs	r2, #1
 8009226:	211f      	movs	r1, #31
 8009228:	9804      	ldr	r0, [sp, #16]
 800922a:	f7fe ff99 	bl	8008160 <SendMessageToModule>
										break;
 800922e:	2300      	movs	r3, #0
 8009230:	4699      	mov	r9, r3
 8009232:	f7ff fb1b 	bl	800886c <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	4b37      	ldr	r3, [pc, #220]	; (8009318 <PxMessagingTask+0xb84>)
 800923a:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800923c:	2201      	movs	r2, #1
 800923e:	211f      	movs	r1, #31
 8009240:	9804      	ldr	r0, [sp, #16]
 8009242:	f7fe ff8d 	bl	8008160 <SendMessageToModule>
										break;
 8009246:	2300      	movs	r3, #0
 8009248:	4699      	mov	r9, r3
 800924a:	f7ff fb0f 	bl	800886c <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800924e:	8819      	ldrh	r1, [r3, #0]
 8009250:	4a31      	ldr	r2, [pc, #196]	; (8009318 <PxMessagingTask+0xb84>)
 8009252:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800925a:	2202      	movs	r2, #2
 800925c:	211f      	movs	r1, #31
 800925e:	9804      	ldr	r0, [sp, #16]
 8009260:	f7fe ff7e 	bl	8008160 <SendMessageToModule>
										break;
 8009264:	2300      	movs	r3, #0
 8009266:	4699      	mov	r9, r3
 8009268:	f7ff fb00 	bl	800886c <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800926c:	8819      	ldrh	r1, [r3, #0]
 800926e:	4a2a      	ldr	r2, [pc, #168]	; (8009318 <PxMessagingTask+0xb84>)
 8009270:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b21b      	sxth	r3, r3
 8009276:	121b      	asrs	r3, r3, #8
 8009278:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800927a:	2202      	movs	r2, #2
 800927c:	211f      	movs	r1, #31
 800927e:	9804      	ldr	r0, [sp, #16]
 8009280:	f7fe ff6e 	bl	8008160 <SendMessageToModule>
										break;
 8009284:	2300      	movs	r3, #0
 8009286:	4699      	mov	r9, r3
 8009288:	f7ff faf0 	bl	800886c <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	4a22      	ldr	r2, [pc, #136]	; (8009318 <PxMessagingTask+0xb84>)
 8009290:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	0a09      	lsrs	r1, r1, #8
 8009296:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009298:	6819      	ldr	r1, [r3, #0]
 800929a:	0c09      	lsrs	r1, r1, #16
 800929c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	0e1b      	lsrs	r3, r3, #24
 80092a2:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80092a4:	2204      	movs	r2, #4
 80092a6:	211f      	movs	r1, #31
 80092a8:	9804      	ldr	r0, [sp, #16]
 80092aa:	f7fe ff59 	bl	8008160 <SendMessageToModule>
										break;
 80092ae:	2300      	movs	r3, #0
 80092b0:	4699      	mov	r9, r3
 80092b2:	f7ff fadb 	bl	800886c <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	4a17      	ldr	r2, [pc, #92]	; (8009318 <PxMessagingTask+0xb84>)
 80092ba:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80092bc:	6819      	ldr	r1, [r3, #0]
 80092be:	1209      	asrs	r1, r1, #8
 80092c0:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80092c2:	6819      	ldr	r1, [r3, #0]
 80092c4:	1409      	asrs	r1, r1, #16
 80092c6:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	161b      	asrs	r3, r3, #24
 80092cc:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80092ce:	2204      	movs	r2, #4
 80092d0:	211f      	movs	r1, #31
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	f7fe ff44 	bl	8008160 <SendMessageToModule>
										break;
 80092d8:	2300      	movs	r3, #0
 80092da:	4699      	mov	r9, r3
 80092dc:	f7ff fac6 	bl	800886c <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 80092e0:	7819      	ldrb	r1, [r3, #0]
 80092e2:	4a0d      	ldr	r2, [pc, #52]	; (8009318 <PxMessagingTask+0xb84>)
 80092e4:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 80092e6:	7859      	ldrb	r1, [r3, #1]
 80092e8:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 80092ea:	7899      	ldrb	r1, [r3, #2]
 80092ec:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 80092ee:	78db      	ldrb	r3, [r3, #3]
 80092f0:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 80092f2:	2208      	movs	r2, #8
 80092f4:	211f      	movs	r1, #31
 80092f6:	9804      	ldr	r0, [sp, #16]
 80092f8:	f7fe ff32 	bl	8008160 <SendMessageToModule>
										break; // You cannot bitwise floats
 80092fc:	2300      	movs	r3, #0
 80092fe:	4699      	mov	r9, r3
 8009300:	f7ff fab4 	bl	800886c <PxMessagingTask+0xd8>
 8009304:	20000d7c 	.word	0x20000d7c
 8009308:	e000ed00 	.word	0xe000ed00
 800930c:	05fa0004 	.word	0x05fa0004
 8009310:	200010ea 	.word	0x200010ea
 8009314:	0801ba1c 	.word	0x0801ba1c
 8009318:	20000fac 	.word	0x20000fac
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800931c:	2a02      	cmp	r2, #2
 800931e:	d000      	beq.n	8009322 <PxMessagingTask+0xb8e>
 8009320:	e09f      	b.n	8009462 <PxMessagingTask+0xcce>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009322:	48ef      	ldr	r0, [pc, #956]	; (80096e0 <PxMessagingTask+0xf4c>)
 8009324:	3236      	adds	r2, #54	; 0x36
 8009326:	436a      	muls	r2, r5
 8009328:	1882      	adds	r2, r0, r2
 800932a:	1851      	adds	r1, r2, r1
 800932c:	3901      	subs	r1, #1
 800932e:	2200      	movs	r2, #0
 8009330:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 8009332:	3301      	adds	r3, #1
 8009334:	4453      	add	r3, sl
 8009336:	1818      	adds	r0, r3, r0
 8009338:	f7fa fa00 	bl	800373c <IsModuleParameter>
 800933c:	9007      	str	r0, [sp, #28]
								if(temp == 0){ // Parameter does not exist
 800933e:	2800      	cmp	r0, #0
 8009340:	d108      	bne.n	8009354 <PxMessagingTask+0xbc0>
									SendMessageToModule(src,
 8009342:	2201      	movs	r2, #1
 8009344:	211f      	movs	r1, #31
 8009346:	9804      	ldr	r0, [sp, #16]
 8009348:	f7fe ff0a 	bl	8008160 <SendMessageToModule>
 800934c:	2300      	movs	r3, #0
 800934e:	4699      	mov	r9, r3
 8009350:	f7ff fa8c 	bl	800886c <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 8009354:	3801      	subs	r0, #1
 8009356:	4ae3      	ldr	r2, [pc, #908]	; (80096e4 <PxMessagingTask+0xf50>)
 8009358:	210c      	movs	r1, #12
 800935a:	4341      	muls	r1, r0
 800935c:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800935e:	1852      	adds	r2, r2, r1
 8009360:	7912      	ldrb	r2, [r2, #4]
 8009362:	49e1      	ldr	r1, [pc, #900]	; (80096e8 <PxMessagingTask+0xf54>)
 8009364:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 8009366:	3a01      	subs	r2, #1
 8009368:	b2d1      	uxtb	r1, r2
 800936a:	2907      	cmp	r1, #7
 800936c:	d901      	bls.n	8009372 <PxMessagingTask+0xbde>
 800936e:	f000 fd21 	bl	8009db4 <PxMessagingTask+0x1620>
 8009372:	b2d2      	uxtb	r2, r2
 8009374:	0092      	lsls	r2, r2, #2
 8009376:	49dd      	ldr	r1, [pc, #884]	; (80096ec <PxMessagingTask+0xf58>)
 8009378:	588a      	ldr	r2, [r1, r2]
 800937a:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800937c:	781a      	ldrb	r2, [r3, #0]
 800937e:	4bda      	ldr	r3, [pc, #872]	; (80096e8 <PxMessagingTask+0xf54>)
 8009380:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009382:	2202      	movs	r2, #2
 8009384:	211f      	movs	r1, #31
 8009386:	9804      	ldr	r0, [sp, #16]
 8009388:	f7fe feea 	bl	8008160 <SendMessageToModule>
											break;
 800938c:	2300      	movs	r3, #0
 800938e:	4699      	mov	r9, r3
 8009390:	f7ff fa6c 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009394:	781a      	ldrb	r2, [r3, #0]
 8009396:	4bd4      	ldr	r3, [pc, #848]	; (80096e8 <PxMessagingTask+0xf54>)
 8009398:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800939a:	2202      	movs	r2, #2
 800939c:	211f      	movs	r1, #31
 800939e:	9804      	ldr	r0, [sp, #16]
 80093a0:	f7fe fede 	bl	8008160 <SendMessageToModule>
											break;
 80093a4:	2300      	movs	r3, #0
 80093a6:	4699      	mov	r9, r3
 80093a8:	f7ff fa60 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80093ac:	8819      	ldrh	r1, [r3, #0]
 80093ae:	4ace      	ldr	r2, [pc, #824]	; (80096e8 <PxMessagingTask+0xf54>)
 80093b0:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	0a1b      	lsrs	r3, r3, #8
 80093b6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80093b8:	2203      	movs	r2, #3
 80093ba:	211f      	movs	r1, #31
 80093bc:	9804      	ldr	r0, [sp, #16]
 80093be:	f7fe fecf 	bl	8008160 <SendMessageToModule>
											break;
 80093c2:	2300      	movs	r3, #0
 80093c4:	4699      	mov	r9, r3
 80093c6:	f7ff fa51 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80093ca:	8819      	ldrh	r1, [r3, #0]
 80093cc:	4ac6      	ldr	r2, [pc, #792]	; (80096e8 <PxMessagingTask+0xf54>)
 80093ce:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b21b      	sxth	r3, r3
 80093d4:	121b      	asrs	r3, r3, #8
 80093d6:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80093d8:	2203      	movs	r2, #3
 80093da:	211f      	movs	r1, #31
 80093dc:	9804      	ldr	r0, [sp, #16]
 80093de:	f7fe febf 	bl	8008160 <SendMessageToModule>
											break;
 80093e2:	2300      	movs	r3, #0
 80093e4:	4699      	mov	r9, r3
 80093e6:	f7ff fa41 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 80093ea:	6819      	ldr	r1, [r3, #0]
 80093ec:	4abe      	ldr	r2, [pc, #760]	; (80096e8 <PxMessagingTask+0xf54>)
 80093ee:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 80093f0:	6819      	ldr	r1, [r3, #0]
 80093f2:	0a09      	lsrs	r1, r1, #8
 80093f4:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 80093f6:	6819      	ldr	r1, [r3, #0]
 80093f8:	0c09      	lsrs	r1, r1, #16
 80093fa:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	0e1b      	lsrs	r3, r3, #24
 8009400:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009402:	2205      	movs	r2, #5
 8009404:	211f      	movs	r1, #31
 8009406:	9804      	ldr	r0, [sp, #16]
 8009408:	f7fe feaa 	bl	8008160 <SendMessageToModule>
											break;
 800940c:	2300      	movs	r3, #0
 800940e:	4699      	mov	r9, r3
 8009410:	f7ff fa2c 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009414:	6819      	ldr	r1, [r3, #0]
 8009416:	4ab4      	ldr	r2, [pc, #720]	; (80096e8 <PxMessagingTask+0xf54>)
 8009418:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800941a:	6819      	ldr	r1, [r3, #0]
 800941c:	1209      	asrs	r1, r1, #8
 800941e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009420:	6819      	ldr	r1, [r3, #0]
 8009422:	1409      	asrs	r1, r1, #16
 8009424:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	161b      	asrs	r3, r3, #24
 800942a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800942c:	2205      	movs	r2, #5
 800942e:	211f      	movs	r1, #31
 8009430:	9804      	ldr	r0, [sp, #16]
 8009432:	f7fe fe95 	bl	8008160 <SendMessageToModule>
											break;
 8009436:	2300      	movs	r3, #0
 8009438:	4699      	mov	r9, r3
 800943a:	f7ff fa17 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800943e:	7819      	ldrb	r1, [r3, #0]
 8009440:	4aa9      	ldr	r2, [pc, #676]	; (80096e8 <PxMessagingTask+0xf54>)
 8009442:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009444:	7859      	ldrb	r1, [r3, #1]
 8009446:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 8009448:	7899      	ldrb	r1, [r3, #2]
 800944a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800944c:	78db      	ldrb	r3, [r3, #3]
 800944e:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009450:	2209      	movs	r2, #9
 8009452:	211f      	movs	r1, #31
 8009454:	9804      	ldr	r0, [sp, #16]
 8009456:	f7fe fe83 	bl	8008160 <SendMessageToModule>
											break;
 800945a:	2300      	movs	r3, #0
 800945c:	4699      	mov	r9, r3
 800945e:	f7ff fa05 	bl	800886c <PxMessagingTask+0xd8>
								}
 8009462:	2300      	movs	r3, #0
 8009464:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 8009466:	2a02      	cmp	r2, #2
 8009468:	d801      	bhi.n	800946e <PxMessagingTask+0xcda>
 800946a:	f7ff f9ff 	bl	800886c <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800946e:	3a04      	subs	r2, #4
 8009470:	0092      	lsls	r2, r2, #2
 8009472:	4b9f      	ldr	r3, [pc, #636]	; (80096f0 <PxMessagingTask+0xf5c>)
 8009474:	58d1      	ldr	r1, [r2, r3]
 8009476:	220f      	movs	r2, #15
 8009478:	400a      	ands	r2, r1
 800947a:	4b9b      	ldr	r3, [pc, #620]	; (80096e8 <PxMessagingTask+0xf54>)
 800947c:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800947e:	454a      	cmp	r2, r9
 8009480:	d106      	bne.n	8009490 <PxMessagingTask+0xcfc>
									SendMessageToModule(src,
 8009482:	2201      	movs	r2, #1
 8009484:	211f      	movs	r1, #31
 8009486:	9804      	ldr	r0, [sp, #16]
 8009488:	f7fe fe6a 	bl	8008160 <SendMessageToModule>
 800948c:	f7ff f9ee 	bl	800886c <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009490:	0c09      	lsrs	r1, r1, #16
 8009492:	2380      	movs	r3, #128	; 0x80
 8009494:	059b      	lsls	r3, r3, #22
 8009496:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 8009498:	3a01      	subs	r2, #1
 800949a:	b2d0      	uxtb	r0, r2
 800949c:	2807      	cmp	r0, #7
 800949e:	d901      	bls.n	80094a4 <PxMessagingTask+0xd10>
 80094a0:	f000 fc8c 	bl	8009dbc <PxMessagingTask+0x1628>
 80094a4:	b2d2      	uxtb	r2, r2
 80094a6:	0092      	lsls	r2, r2, #2
 80094a8:	4892      	ldr	r0, [pc, #584]	; (80096f4 <PxMessagingTask+0xf60>)
 80094aa:	5882      	ldr	r2, [r0, r2]
 80094ac:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 80094ae:	781a      	ldrb	r2, [r3, #0]
 80094b0:	4b8d      	ldr	r3, [pc, #564]	; (80096e8 <PxMessagingTask+0xf54>)
 80094b2:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80094b4:	2202      	movs	r2, #2
 80094b6:	211f      	movs	r1, #31
 80094b8:	9804      	ldr	r0, [sp, #16]
 80094ba:	f7fe fe51 	bl	8008160 <SendMessageToModule>
											break;
 80094be:	2300      	movs	r3, #0
 80094c0:	4699      	mov	r9, r3
 80094c2:	f7ff f9d3 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 80094c6:	781a      	ldrb	r2, [r3, #0]
 80094c8:	4b87      	ldr	r3, [pc, #540]	; (80096e8 <PxMessagingTask+0xf54>)
 80094ca:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80094cc:	2202      	movs	r2, #2
 80094ce:	211f      	movs	r1, #31
 80094d0:	9804      	ldr	r0, [sp, #16]
 80094d2:	f7fe fe45 	bl	8008160 <SendMessageToModule>
											break;
 80094d6:	2300      	movs	r3, #0
 80094d8:	4699      	mov	r9, r3
 80094da:	f7ff f9c7 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 80094de:	8819      	ldrh	r1, [r3, #0]
 80094e0:	4a81      	ldr	r2, [pc, #516]	; (80096e8 <PxMessagingTask+0xf54>)
 80094e2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	0a1b      	lsrs	r3, r3, #8
 80094e8:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 80094ea:	2203      	movs	r2, #3
 80094ec:	211f      	movs	r1, #31
 80094ee:	9804      	ldr	r0, [sp, #16]
 80094f0:	f7fe fe36 	bl	8008160 <SendMessageToModule>
											break;
 80094f4:	2300      	movs	r3, #0
 80094f6:	4699      	mov	r9, r3
 80094f8:	f7ff f9b8 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 80094fc:	8819      	ldrh	r1, [r3, #0]
 80094fe:	4a7a      	ldr	r2, [pc, #488]	; (80096e8 <PxMessagingTask+0xf54>)
 8009500:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009502:	881b      	ldrh	r3, [r3, #0]
 8009504:	b21b      	sxth	r3, r3
 8009506:	121b      	asrs	r3, r3, #8
 8009508:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800950a:	2203      	movs	r2, #3
 800950c:	211f      	movs	r1, #31
 800950e:	9804      	ldr	r0, [sp, #16]
 8009510:	f7fe fe26 	bl	8008160 <SendMessageToModule>
											break;
 8009514:	2300      	movs	r3, #0
 8009516:	4699      	mov	r9, r3
 8009518:	f7ff f9a8 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800951c:	6819      	ldr	r1, [r3, #0]
 800951e:	4a72      	ldr	r2, [pc, #456]	; (80096e8 <PxMessagingTask+0xf54>)
 8009520:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009522:	6819      	ldr	r1, [r3, #0]
 8009524:	0a09      	lsrs	r1, r1, #8
 8009526:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009528:	6819      	ldr	r1, [r3, #0]
 800952a:	0c09      	lsrs	r1, r1, #16
 800952c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	0e1b      	lsrs	r3, r3, #24
 8009532:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009534:	2205      	movs	r2, #5
 8009536:	211f      	movs	r1, #31
 8009538:	9804      	ldr	r0, [sp, #16]
 800953a:	f7fe fe11 	bl	8008160 <SendMessageToModule>
											break;
 800953e:	2300      	movs	r3, #0
 8009540:	4699      	mov	r9, r3
 8009542:	f7ff f993 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009546:	6819      	ldr	r1, [r3, #0]
 8009548:	4a67      	ldr	r2, [pc, #412]	; (80096e8 <PxMessagingTask+0xf54>)
 800954a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800954c:	6819      	ldr	r1, [r3, #0]
 800954e:	1209      	asrs	r1, r1, #8
 8009550:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	1409      	asrs	r1, r1, #16
 8009556:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	161b      	asrs	r3, r3, #24
 800955c:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800955e:	2205      	movs	r2, #5
 8009560:	211f      	movs	r1, #31
 8009562:	9804      	ldr	r0, [sp, #16]
 8009564:	f7fe fdfc 	bl	8008160 <SendMessageToModule>
											break;
 8009568:	2300      	movs	r3, #0
 800956a:	4699      	mov	r9, r3
 800956c:	f7ff f97e 	bl	800886c <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 8009570:	781a      	ldrb	r2, [r3, #0]
 8009572:	4b5d      	ldr	r3, [pc, #372]	; (80096e8 <PxMessagingTask+0xf54>)
 8009574:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 8009576:	4a60      	ldr	r2, [pc, #384]	; (80096f8 <PxMessagingTask+0xf64>)
 8009578:	188a      	adds	r2, r1, r2
 800957a:	7812      	ldrb	r2, [r2, #0]
 800957c:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800957e:	4a5f      	ldr	r2, [pc, #380]	; (80096fc <PxMessagingTask+0xf68>)
 8009580:	188a      	adds	r2, r1, r2
 8009582:	7812      	ldrb	r2, [r2, #0]
 8009584:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 8009586:	4a5e      	ldr	r2, [pc, #376]	; (8009700 <PxMessagingTask+0xf6c>)
 8009588:	4694      	mov	ip, r2
 800958a:	4461      	add	r1, ip
 800958c:	780a      	ldrb	r2, [r1, #0]
 800958e:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 8009590:	2209      	movs	r2, #9
 8009592:	211f      	movs	r1, #31
 8009594:	9804      	ldr	r0, [sp, #16]
 8009596:	f7fe fde3 	bl	8008160 <SendMessageToModule>
											break;
 800959a:	2300      	movs	r3, #0
 800959c:	4699      	mov	r9, r3
 800959e:	f7ff f965 	bl	800886c <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80095a2:	4b58      	ldr	r3, [pc, #352]	; (8009704 <PxMessagingTask+0xf70>)
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	2002      	movs	r0, #2
 80095aa:	4240      	negs	r0, r0
 80095ac:	17c1      	asrs	r1, r0, #31
 80095ae:	1812      	adds	r2, r2, r0
 80095b0:	414b      	adcs	r3, r1
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00c      	beq.n	80095d0 <PxMessagingTask+0xe3c>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 80095b6:	4b54      	ldr	r3, [pc, #336]	; (8009708 <PxMessagingTask+0xf74>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	2b10      	cmp	r3, #16
 80095bc:	d101      	bne.n	80095c2 <PxMessagingTask+0xe2e>
 80095be:	f000 fc13 	bl	8009de8 <PxMessagingTask+0x1654>
								responseStatus =BOS_OK;
 80095c2:	4b51      	ldr	r3, [pc, #324]	; (8009708 <PxMessagingTask+0xf74>)
 80095c4:	2200      	movs	r2, #0
 80095c6:	701a      	strb	r2, [r3, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	4699      	mov	r9, r3
 80095cc:	f7ff f94e 	bl	800886c <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d101      	bne.n	80095d8 <PxMessagingTask+0xe44>
 80095d4:	2a01      	cmp	r2, #1
 80095d6:	d8ee      	bhi.n	80095b6 <PxMessagingTask+0xe22>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 80095d8:	2138      	movs	r1, #56	; 0x38
 80095da:	4369      	muls	r1, r5
 80095dc:	4a40      	ldr	r2, [pc, #256]	; (80096e0 <PxMessagingTask+0xf4c>)
 80095de:	1852      	adds	r2, r2, r1
 80095e0:	5d12      	ldrb	r2, [r2, r4]
 80095e2:	494a      	ldr	r1, [pc, #296]	; (800970c <PxMessagingTask+0xf78>)
 80095e4:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 80095e6:	2a08      	cmp	r2, #8
 80095e8:	d8e5      	bhi.n	80095b6 <PxMessagingTask+0xe22>
 80095ea:	0092      	lsls	r2, r2, #2
 80095ec:	4948      	ldr	r1, [pc, #288]	; (8009710 <PxMessagingTask+0xf7c>)
 80095ee:	588a      	ldr	r2, [r1, r2]
 80095f0:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 80095f2:	4b45      	ldr	r3, [pc, #276]	; (8009708 <PxMessagingTask+0xf74>)
 80095f4:	2210      	movs	r2, #16
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	4699      	mov	r9, r3
 80095fc:	f7ff f936 	bl	800886c <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 8009600:	4a40      	ldr	r2, [pc, #256]	; (8009704 <PxMessagingTask+0xf70>)
 8009602:	2038      	movs	r0, #56	; 0x38
 8009604:	4368      	muls	r0, r5
 8009606:	4936      	ldr	r1, [pc, #216]	; (80096e0 <PxMessagingTask+0xf4c>)
 8009608:	1809      	adds	r1, r1, r0
 800960a:	1909      	adds	r1, r1, r4
 800960c:	784b      	ldrb	r3, [r1, #1]
 800960e:	6013      	str	r3, [r2, #0]
 8009610:	2300      	movs	r3, #0
 8009612:	6053      	str	r3, [r2, #4]
										break;
 8009614:	e7cf      	b.n	80095b6 <PxMessagingTask+0xe22>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009616:	4a3b      	ldr	r2, [pc, #236]	; (8009704 <PxMessagingTask+0xf70>)
 8009618:	2038      	movs	r0, #56	; 0x38
 800961a:	4368      	muls	r0, r5
 800961c:	4930      	ldr	r1, [pc, #192]	; (80096e0 <PxMessagingTask+0xf4c>)
 800961e:	1809      	adds	r1, r1, r0
 8009620:	1909      	adds	r1, r1, r4
 8009622:	2301      	movs	r3, #1
 8009624:	56cb      	ldrsb	r3, [r1, r3]
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	17db      	asrs	r3, r3, #31
 800962a:	6053      	str	r3, [r2, #4]
										break;
 800962c:	e7c3      	b.n	80095b6 <PxMessagingTask+0xe22>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800962e:	4a35      	ldr	r2, [pc, #212]	; (8009704 <PxMessagingTask+0xf70>)
 8009630:	2038      	movs	r0, #56	; 0x38
 8009632:	4368      	muls	r0, r5
 8009634:	492a      	ldr	r1, [pc, #168]	; (80096e0 <PxMessagingTask+0xf4c>)
 8009636:	1809      	adds	r1, r1, r0
 8009638:	1909      	adds	r1, r1, r4
 800963a:	788b      	ldrb	r3, [r1, #2]
 800963c:	021b      	lsls	r3, r3, #8
 800963e:	7849      	ldrb	r1, [r1, #1]
 8009640:	185b      	adds	r3, r3, r1
 8009642:	6013      	str	r3, [r2, #0]
 8009644:	17db      	asrs	r3, r3, #31
 8009646:	6053      	str	r3, [r2, #4]
										break;
 8009648:	e7b5      	b.n	80095b6 <PxMessagingTask+0xe22>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800964a:	4a2e      	ldr	r2, [pc, #184]	; (8009704 <PxMessagingTask+0xf70>)
 800964c:	2038      	movs	r0, #56	; 0x38
 800964e:	4368      	muls	r0, r5
 8009650:	4923      	ldr	r1, [pc, #140]	; (80096e0 <PxMessagingTask+0xf4c>)
 8009652:	1809      	adds	r1, r1, r0
 8009654:	1909      	adds	r1, r1, r4
 8009656:	788b      	ldrb	r3, [r1, #2]
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	7849      	ldrb	r1, [r1, #1]
 800965c:	185b      	adds	r3, r3, r1
 800965e:	6013      	str	r3, [r2, #0]
 8009660:	17db      	asrs	r3, r3, #31
 8009662:	6053      	str	r3, [r2, #4]
										break;
 8009664:	e7a7      	b.n	80095b6 <PxMessagingTask+0xe22>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009666:	4a27      	ldr	r2, [pc, #156]	; (8009704 <PxMessagingTask+0xf70>)
 8009668:	2038      	movs	r0, #56	; 0x38
 800966a:	4368      	muls	r0, r5
 800966c:	491c      	ldr	r1, [pc, #112]	; (80096e0 <PxMessagingTask+0xf4c>)
 800966e:	1809      	adds	r1, r1, r0
 8009670:	1909      	adds	r1, r1, r4
 8009672:	788b      	ldrb	r3, [r1, #2]
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	78c8      	ldrb	r0, [r1, #3]
 8009678:	0400      	lsls	r0, r0, #16
 800967a:	181b      	adds	r3, r3, r0
 800967c:	7848      	ldrb	r0, [r1, #1]
 800967e:	181b      	adds	r3, r3, r0
 8009680:	7909      	ldrb	r1, [r1, #4]
 8009682:	0609      	lsls	r1, r1, #24
 8009684:	185b      	adds	r3, r3, r1
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	2300      	movs	r3, #0
 800968a:	6053      	str	r3, [r2, #4]
										break;
 800968c:	e793      	b.n	80095b6 <PxMessagingTask+0xe22>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800968e:	4a1d      	ldr	r2, [pc, #116]	; (8009704 <PxMessagingTask+0xf70>)
 8009690:	2038      	movs	r0, #56	; 0x38
 8009692:	4368      	muls	r0, r5
 8009694:	4912      	ldr	r1, [pc, #72]	; (80096e0 <PxMessagingTask+0xf4c>)
 8009696:	1809      	adds	r1, r1, r0
 8009698:	1909      	adds	r1, r1, r4
 800969a:	788b      	ldrb	r3, [r1, #2]
 800969c:	021b      	lsls	r3, r3, #8
 800969e:	7848      	ldrb	r0, [r1, #1]
 80096a0:	181b      	adds	r3, r3, r0
 80096a2:	78c8      	ldrb	r0, [r1, #3]
 80096a4:	0400      	lsls	r0, r0, #16
 80096a6:	181b      	adds	r3, r3, r0
 80096a8:	7909      	ldrb	r1, [r1, #4]
 80096aa:	0609      	lsls	r1, r1, #24
 80096ac:	185b      	adds	r3, r3, r1
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	17db      	asrs	r3, r3, #31
 80096b2:	6053      	str	r3, [r2, #4]
										break;
 80096b4:	e77f      	b.n	80095b6 <PxMessagingTask+0xe22>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80096b6:	4a13      	ldr	r2, [pc, #76]	; (8009704 <PxMessagingTask+0xf70>)
 80096b8:	2038      	movs	r0, #56	; 0x38
 80096ba:	4368      	muls	r0, r5
 80096bc:	4908      	ldr	r1, [pc, #32]	; (80096e0 <PxMessagingTask+0xf4c>)
 80096be:	1809      	adds	r1, r1, r0
 80096c0:	1909      	adds	r1, r1, r4
 80096c2:	788b      	ldrb	r3, [r1, #2]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	78c8      	ldrb	r0, [r1, #3]
 80096c8:	0400      	lsls	r0, r0, #16
 80096ca:	181b      	adds	r3, r3, r0
 80096cc:	7848      	ldrb	r0, [r1, #1]
 80096ce:	181b      	adds	r3, r3, r0
 80096d0:	7909      	ldrb	r1, [r1, #4]
 80096d2:	0609      	lsls	r1, r1, #24
 80096d4:	185b      	adds	r3, r3, r1
 80096d6:	6013      	str	r3, [r2, #0]
 80096d8:	2300      	movs	r3, #0
 80096da:	6053      	str	r3, [r2, #4]
										break;
 80096dc:	e76b      	b.n	80095b6 <PxMessagingTask+0xe22>
 80096de:	46c0      	nop			; (mov r8, r8)
 80096e0:	20000d7c 	.word	0x20000d7c
 80096e4:	200000ac 	.word	0x200000ac
 80096e8:	20000fac 	.word	0x20000fac
 80096ec:	0801ba3c 	.word	0x0801ba3c
 80096f0:	20006dd8 	.word	0x20006dd8
 80096f4:	0801ba5c 	.word	0x0801ba5c
 80096f8:	20000001 	.word	0x20000001
 80096fc:	20000002 	.word	0x20000002
 8009700:	20000003 	.word	0x20000003
 8009704:	20001180 	.word	0x20001180
 8009708:	20001188 	.word	0x20001188
 800970c:	200000a8 	.word	0x200000a8
 8009710:	0801ba7c 	.word	0x0801ba7c
							responseStatus =BOS_OK; // Initialize response
 8009714:	4bdd      	ldr	r3, [pc, #884]	; (8009a8c <PxMessagingTask+0x12f8>)
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800971a:	46a1      	mov	r9, r4
 800971c:	4bdc      	ldr	r3, [pc, #880]	; (8009a90 <PxMessagingTask+0x12fc>)
 800971e:	199b      	adds	r3, r3, r6
 8009720:	5d1b      	ldrb	r3, [r3, r4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d100      	bne.n	8009728 <PxMessagingTask+0xf94>
 8009726:	e10b      	b.n	8009940 <PxMessagingTask+0x11ac>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8009728:	2b1e      	cmp	r3, #30
 800972a:	d900      	bls.n	800972e <PxMessagingTask+0xf9a>
 800972c:	e104      	b.n	8009938 <PxMessagingTask+0x11a4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800972e:	1e5c      	subs	r4, r3, #1
 8009730:	00a2      	lsls	r2, r4, #2
 8009732:	4bd8      	ldr	r3, [pc, #864]	; (8009a94 <PxMessagingTask+0x1300>)
 8009734:	58d1      	ldr	r1, [r2, r3]
 8009736:	0c0b      	lsrs	r3, r1, #16
 8009738:	2280      	movs	r2, #128	; 0x80
 800973a:	0592      	lsls	r2, r2, #22
 800973c:	4694      	mov	ip, r2
 800973e:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 8009740:	464a      	mov	r2, r9
 8009742:	1c57      	adds	r7, r2, #1
 8009744:	2038      	movs	r0, #56	; 0x38
 8009746:	4368      	muls	r0, r5
 8009748:	4ad1      	ldr	r2, [pc, #836]	; (8009a90 <PxMessagingTask+0x12fc>)
 800974a:	1812      	adds	r2, r2, r0
 800974c:	5dd2      	ldrb	r2, [r2, r7]
 800974e:	4693      	mov	fp, r2
 8009750:	3a01      	subs	r2, #1
 8009752:	b2d0      	uxtb	r0, r2
 8009754:	2807      	cmp	r0, #7
 8009756:	d81b      	bhi.n	8009790 <PxMessagingTask+0xffc>
 8009758:	b2d2      	uxtb	r2, r2
 800975a:	0092      	lsls	r2, r2, #2
 800975c:	48ce      	ldr	r0, [pc, #824]	; (8009a98 <PxMessagingTask+0x1304>)
 800975e:	5882      	ldr	r2, [r0, r2]
 8009760:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009762:	070a      	lsls	r2, r1, #28
 8009764:	d109      	bne.n	800977a <PxMessagingTask+0xfe6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 8009766:	2001      	movs	r0, #1
 8009768:	f00a fd44 	bl	80141f4 <malloc>
 800976c:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800976e:	d00c      	beq.n	800978a <PxMessagingTask+0xff6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009770:	00a4      	lsls	r4, r4, #2
 8009772:	0400      	lsls	r0, r0, #16
 8009774:	4458      	add	r0, fp
 8009776:	4ac7      	ldr	r2, [pc, #796]	; (8009a94 <PxMessagingTask+0x1300>)
 8009778:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800977a:	2138      	movs	r1, #56	; 0x38
 800977c:	4369      	muls	r1, r5
 800977e:	4ac4      	ldr	r2, [pc, #784]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009780:	1852      	adds	r2, r2, r1
 8009782:	444a      	add	r2, r9
 8009784:	7892      	ldrb	r2, [r2, #2]
 8009786:	701a      	strb	r2, [r3, #0]
 8009788:	e002      	b.n	8009790 <PxMessagingTask+0xffc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800978a:	4bc0      	ldr	r3, [pc, #768]	; (8009a8c <PxMessagingTask+0x12f8>)
 800978c:	2212      	movs	r2, #18
 800978e:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009790:	2338      	movs	r3, #56	; 0x38
 8009792:	436b      	muls	r3, r5
 8009794:	4abe      	ldr	r2, [pc, #760]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009796:	18d2      	adds	r2, r2, r3
 8009798:	464b      	mov	r3, r9
 800979a:	5cd3      	ldrb	r3, [r2, r3]
 800979c:	3b01      	subs	r3, #1
 800979e:	0098      	lsls	r0, r3, #2
 80097a0:	49bc      	ldr	r1, [pc, #752]	; (8009a94 <PxMessagingTask+0x1300>)
 80097a2:	5841      	ldr	r1, [r0, r1]
 80097a4:	5dd2      	ldrb	r2, [r2, r7]
 80097a6:	200f      	movs	r0, #15
 80097a8:	4008      	ands	r0, r1
 80097aa:	4290      	cmp	r0, r2
 80097ac:	d009      	beq.n	80097c2 <PxMessagingTask+0x102e>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	48ba      	ldr	r0, [pc, #744]	; (8009a9c <PxMessagingTask+0x1308>)
 80097b2:	4684      	mov	ip, r0
 80097b4:	4462      	add	r2, ip
 80097b6:	400a      	ands	r2, r1
 80097b8:	49b6      	ldr	r1, [pc, #728]	; (8009a94 <PxMessagingTask+0x1300>)
 80097ba:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 80097bc:	4bb3      	ldr	r3, [pc, #716]	; (8009a8c <PxMessagingTask+0x12f8>)
 80097be:	2214      	movs	r2, #20
 80097c0:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 80097c2:	4bb7      	ldr	r3, [pc, #732]	; (8009aa0 <PxMessagingTask+0x130c>)
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	2240      	movs	r2, #64	; 0x40
 80097c8:	4393      	bics	r3, r2
 80097ca:	2200      	movs	r2, #0
 80097cc:	4691      	mov	r9, r2
 80097ce:	2b20      	cmp	r3, #32
 80097d0:	d001      	beq.n	80097d6 <PxMessagingTask+0x1042>
 80097d2:	f7ff f84b 	bl	800886c <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 80097d6:	4bad      	ldr	r3, [pc, #692]	; (8009a8c <PxMessagingTask+0x12f8>)
 80097d8:	781a      	ldrb	r2, [r3, #0]
 80097da:	4bb2      	ldr	r3, [pc, #712]	; (8009aa4 <PxMessagingTask+0x1310>)
 80097dc:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 80097de:	2201      	movs	r2, #1
 80097e0:	2121      	movs	r1, #33	; 0x21
 80097e2:	9804      	ldr	r0, [sp, #16]
 80097e4:	f7fe fcbc 	bl	8008160 <SendMessageToModule>
 80097e8:	f7ff f840 	bl	800886c <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80097ec:	070a      	lsls	r2, r1, #28
 80097ee:	d10a      	bne.n	8009806 <PxMessagingTask+0x1072>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 80097f0:	2001      	movs	r0, #1
 80097f2:	f00a fcff 	bl	80141f4 <malloc>
 80097f6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80097f8:	d100      	bne.n	80097fc <PxMessagingTask+0x1068>
 80097fa:	e36d      	b.n	8009ed8 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80097fc:	00a4      	lsls	r4, r4, #2
 80097fe:	0400      	lsls	r0, r0, #16
 8009800:	3002      	adds	r0, #2
 8009802:	4aa4      	ldr	r2, [pc, #656]	; (8009a94 <PxMessagingTask+0x1300>)
 8009804:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009806:	2138      	movs	r1, #56	; 0x38
 8009808:	4369      	muls	r1, r5
 800980a:	4aa1      	ldr	r2, [pc, #644]	; (8009a90 <PxMessagingTask+0x12fc>)
 800980c:	1852      	adds	r2, r2, r1
 800980e:	444a      	add	r2, r9
 8009810:	7892      	ldrb	r2, [r2, #2]
 8009812:	b252      	sxtb	r2, r2
 8009814:	701a      	strb	r2, [r3, #0]
 8009816:	e7bb      	b.n	8009790 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009818:	070a      	lsls	r2, r1, #28
 800981a:	d10a      	bne.n	8009832 <PxMessagingTask+0x109e>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800981c:	2002      	movs	r0, #2
 800981e:	f00a fce9 	bl	80141f4 <malloc>
 8009822:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009824:	d100      	bne.n	8009828 <PxMessagingTask+0x1094>
 8009826:	e357      	b.n	8009ed8 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009828:	00a4      	lsls	r4, r4, #2
 800982a:	0400      	lsls	r0, r0, #16
 800982c:	3003      	adds	r0, #3
 800982e:	4a99      	ldr	r2, [pc, #612]	; (8009a94 <PxMessagingTask+0x1300>)
 8009830:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 8009832:	2138      	movs	r1, #56	; 0x38
 8009834:	4369      	muls	r1, r5
 8009836:	4a96      	ldr	r2, [pc, #600]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009838:	1852      	adds	r2, r2, r1
 800983a:	444a      	add	r2, r9
 800983c:	78d1      	ldrb	r1, [r2, #3]
 800983e:	0209      	lsls	r1, r1, #8
 8009840:	7892      	ldrb	r2, [r2, #2]
 8009842:	1852      	adds	r2, r2, r1
 8009844:	b292      	uxth	r2, r2
 8009846:	801a      	strh	r2, [r3, #0]
 8009848:	e7a2      	b.n	8009790 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800984a:	070a      	lsls	r2, r1, #28
 800984c:	d10a      	bne.n	8009864 <PxMessagingTask+0x10d0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800984e:	2002      	movs	r0, #2
 8009850:	f00a fcd0 	bl	80141f4 <malloc>
 8009854:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009856:	d100      	bne.n	800985a <PxMessagingTask+0x10c6>
 8009858:	e33e      	b.n	8009ed8 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800985a:	00a4      	lsls	r4, r4, #2
 800985c:	0400      	lsls	r0, r0, #16
 800985e:	3004      	adds	r0, #4
 8009860:	4a8c      	ldr	r2, [pc, #560]	; (8009a94 <PxMessagingTask+0x1300>)
 8009862:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 8009864:	2138      	movs	r1, #56	; 0x38
 8009866:	4369      	muls	r1, r5
 8009868:	4a89      	ldr	r2, [pc, #548]	; (8009a90 <PxMessagingTask+0x12fc>)
 800986a:	1852      	adds	r2, r2, r1
 800986c:	444a      	add	r2, r9
 800986e:	78d1      	ldrb	r1, [r2, #3]
 8009870:	0209      	lsls	r1, r1, #8
 8009872:	7892      	ldrb	r2, [r2, #2]
 8009874:	1852      	adds	r2, r2, r1
 8009876:	b212      	sxth	r2, r2
 8009878:	801a      	strh	r2, [r3, #0]
 800987a:	e789      	b.n	8009790 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800987c:	070a      	lsls	r2, r1, #28
 800987e:	d10a      	bne.n	8009896 <PxMessagingTask+0x1102>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 8009880:	2004      	movs	r0, #4
 8009882:	f00a fcb7 	bl	80141f4 <malloc>
 8009886:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009888:	d100      	bne.n	800988c <PxMessagingTask+0x10f8>
 800988a:	e325      	b.n	8009ed8 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800988c:	00a4      	lsls	r4, r4, #2
 800988e:	0400      	lsls	r0, r0, #16
 8009890:	3005      	adds	r0, #5
 8009892:	4a80      	ldr	r2, [pc, #512]	; (8009a94 <PxMessagingTask+0x1300>)
 8009894:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009896:	2238      	movs	r2, #56	; 0x38
 8009898:	436a      	muls	r2, r5
 800989a:	497d      	ldr	r1, [pc, #500]	; (8009a90 <PxMessagingTask+0x12fc>)
 800989c:	1889      	adds	r1, r1, r2
 800989e:	4449      	add	r1, r9
 80098a0:	78ca      	ldrb	r2, [r1, #3]
 80098a2:	0212      	lsls	r2, r2, #8
 80098a4:	7908      	ldrb	r0, [r1, #4]
 80098a6:	0400      	lsls	r0, r0, #16
 80098a8:	1812      	adds	r2, r2, r0
 80098aa:	7888      	ldrb	r0, [r1, #2]
 80098ac:	1812      	adds	r2, r2, r0
 80098ae:	7949      	ldrb	r1, [r1, #5]
 80098b0:	0609      	lsls	r1, r1, #24
 80098b2:	1852      	adds	r2, r2, r1
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	e76b      	b.n	8009790 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80098b8:	070a      	lsls	r2, r1, #28
 80098ba:	d10a      	bne.n	80098d2 <PxMessagingTask+0x113e>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 80098bc:	2004      	movs	r0, #4
 80098be:	f00a fc99 	bl	80141f4 <malloc>
 80098c2:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80098c4:	d100      	bne.n	80098c8 <PxMessagingTask+0x1134>
 80098c6:	e307      	b.n	8009ed8 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80098c8:	00a4      	lsls	r4, r4, #2
 80098ca:	0400      	lsls	r0, r0, #16
 80098cc:	3006      	adds	r0, #6
 80098ce:	4a71      	ldr	r2, [pc, #452]	; (8009a94 <PxMessagingTask+0x1300>)
 80098d0:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 80098d2:	2238      	movs	r2, #56	; 0x38
 80098d4:	436a      	muls	r2, r5
 80098d6:	496e      	ldr	r1, [pc, #440]	; (8009a90 <PxMessagingTask+0x12fc>)
 80098d8:	1889      	adds	r1, r1, r2
 80098da:	4449      	add	r1, r9
 80098dc:	78ca      	ldrb	r2, [r1, #3]
 80098de:	0212      	lsls	r2, r2, #8
 80098e0:	7888      	ldrb	r0, [r1, #2]
 80098e2:	1812      	adds	r2, r2, r0
 80098e4:	7908      	ldrb	r0, [r1, #4]
 80098e6:	0400      	lsls	r0, r0, #16
 80098e8:	1812      	adds	r2, r2, r0
 80098ea:	7949      	ldrb	r1, [r1, #5]
 80098ec:	0609      	lsls	r1, r1, #24
 80098ee:	1852      	adds	r2, r2, r1
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	e74d      	b.n	8009790 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80098f4:	070a      	lsls	r2, r1, #28
 80098f6:	d10a      	bne.n	800990e <PxMessagingTask+0x117a>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 80098f8:	2004      	movs	r0, #4
 80098fa:	f00a fc7b 	bl	80141f4 <malloc>
 80098fe:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009900:	d100      	bne.n	8009904 <PxMessagingTask+0x1170>
 8009902:	e2e9      	b.n	8009ed8 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009904:	00a4      	lsls	r4, r4, #2
 8009906:	0400      	lsls	r0, r0, #16
 8009908:	3007      	adds	r0, #7
 800990a:	4a62      	ldr	r2, [pc, #392]	; (8009a94 <PxMessagingTask+0x1300>)
 800990c:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800990e:	2238      	movs	r2, #56	; 0x38
 8009910:	436a      	muls	r2, r5
 8009912:	495f      	ldr	r1, [pc, #380]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009914:	1889      	adds	r1, r1, r2
 8009916:	4449      	add	r1, r9
 8009918:	78ca      	ldrb	r2, [r1, #3]
 800991a:	0212      	lsls	r2, r2, #8
 800991c:	7908      	ldrb	r0, [r1, #4]
 800991e:	0400      	lsls	r0, r0, #16
 8009920:	1812      	adds	r2, r2, r0
 8009922:	7888      	ldrb	r0, [r1, #2]
 8009924:	1812      	adds	r2, r2, r0
 8009926:	7949      	ldrb	r1, [r1, #5]
 8009928:	0609      	lsls	r1, r1, #24
 800992a:	1852      	adds	r2, r2, r1
 800992c:	495e      	ldr	r1, [pc, #376]	; (8009aa8 <PxMessagingTask+0x1314>)
 800992e:	600a      	str	r2, [r1, #0]
 8009930:	2000      	movs	r0, #0
 8009932:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	e72b      	b.n	8009790 <PxMessagingTask+0xffc>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 8009938:	4b54      	ldr	r3, [pc, #336]	; (8009a8c <PxMessagingTask+0x12f8>)
 800993a:	2213      	movs	r2, #19
 800993c:	701a      	strb	r2, [r3, #0]
 800993e:	e740      	b.n	80097c2 <PxMessagingTask+0x102e>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8009940:	2238      	movs	r2, #56	; 0x38
 8009942:	436a      	muls	r2, r5
 8009944:	4b52      	ldr	r3, [pc, #328]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009946:	189b      	adds	r3, r3, r2
 8009948:	191b      	adds	r3, r3, r4
 800994a:	789c      	ldrb	r4, [r3, #2]
 800994c:	0624      	lsls	r4, r4, #24
 800994e:	78da      	ldrb	r2, [r3, #3]
 8009950:	0412      	lsls	r2, r2, #16
 8009952:	18a4      	adds	r4, r4, r2
 8009954:	795a      	ldrb	r2, [r3, #5]
 8009956:	18a4      	adds	r4, r4, r2
 8009958:	791b      	ldrb	r3, [r3, #4]
 800995a:	021b      	lsls	r3, r3, #8
 800995c:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800995e:	23e0      	movs	r3, #224	; 0xe0
 8009960:	061b      	lsls	r3, r3, #24
 8009962:	18e2      	adds	r2, r4, r3
 8009964:	4b51      	ldr	r3, [pc, #324]	; (8009aac <PxMessagingTask+0x1318>)
 8009966:	429a      	cmp	r2, r3
 8009968:	d86f      	bhi.n	8009a4a <PxMessagingTask+0x12b6>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800996a:	2238      	movs	r2, #56	; 0x38
 800996c:	436a      	muls	r2, r5
 800996e:	4b48      	ldr	r3, [pc, #288]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009970:	189b      	adds	r3, r3, r2
 8009972:	444b      	add	r3, r9
 8009974:	785b      	ldrb	r3, [r3, #1]
 8009976:	3b01      	subs	r3, #1
 8009978:	b2da      	uxtb	r2, r3
 800997a:	2a07      	cmp	r2, #7
 800997c:	d900      	bls.n	8009980 <PxMessagingTask+0x11ec>
 800997e:	e720      	b.n	80097c2 <PxMessagingTask+0x102e>
 8009980:	b2db      	uxtb	r3, r3
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4a4a      	ldr	r2, [pc, #296]	; (8009ab0 <PxMessagingTask+0x131c>)
 8009986:	58d3      	ldr	r3, [r2, r3]
 8009988:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800998a:	2238      	movs	r2, #56	; 0x38
 800998c:	436a      	muls	r2, r5
 800998e:	4b40      	ldr	r3, [pc, #256]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009990:	189b      	adds	r3, r3, r2
 8009992:	444b      	add	r3, r9
 8009994:	799b      	ldrb	r3, [r3, #6]
 8009996:	7023      	strb	r3, [r4, #0]
											break;
 8009998:	e713      	b.n	80097c2 <PxMessagingTask+0x102e>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800999a:	2238      	movs	r2, #56	; 0x38
 800999c:	436a      	muls	r2, r5
 800999e:	4b3c      	ldr	r3, [pc, #240]	; (8009a90 <PxMessagingTask+0x12fc>)
 80099a0:	189b      	adds	r3, r3, r2
 80099a2:	444b      	add	r3, r9
 80099a4:	799b      	ldrb	r3, [r3, #6]
 80099a6:	b25b      	sxtb	r3, r3
 80099a8:	7023      	strb	r3, [r4, #0]
											break;
 80099aa:	e70a      	b.n	80097c2 <PxMessagingTask+0x102e>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 80099ac:	2238      	movs	r2, #56	; 0x38
 80099ae:	436a      	muls	r2, r5
 80099b0:	4b37      	ldr	r3, [pc, #220]	; (8009a90 <PxMessagingTask+0x12fc>)
 80099b2:	189b      	adds	r3, r3, r2
 80099b4:	444b      	add	r3, r9
 80099b6:	79da      	ldrb	r2, [r3, #7]
 80099b8:	0212      	lsls	r2, r2, #8
 80099ba:	799b      	ldrb	r3, [r3, #6]
 80099bc:	189b      	adds	r3, r3, r2
 80099be:	b29b      	uxth	r3, r3
 80099c0:	8023      	strh	r3, [r4, #0]
											break;
 80099c2:	e6fe      	b.n	80097c2 <PxMessagingTask+0x102e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 80099c4:	2238      	movs	r2, #56	; 0x38
 80099c6:	436a      	muls	r2, r5
 80099c8:	4b31      	ldr	r3, [pc, #196]	; (8009a90 <PxMessagingTask+0x12fc>)
 80099ca:	189b      	adds	r3, r3, r2
 80099cc:	444b      	add	r3, r9
 80099ce:	79da      	ldrb	r2, [r3, #7]
 80099d0:	0212      	lsls	r2, r2, #8
 80099d2:	799b      	ldrb	r3, [r3, #6]
 80099d4:	189b      	adds	r3, r3, r2
 80099d6:	b21b      	sxth	r3, r3
 80099d8:	8023      	strh	r3, [r4, #0]
											break;
 80099da:	e6f2      	b.n	80097c2 <PxMessagingTask+0x102e>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80099dc:	2338      	movs	r3, #56	; 0x38
 80099de:	436b      	muls	r3, r5
 80099e0:	4a2b      	ldr	r2, [pc, #172]	; (8009a90 <PxMessagingTask+0x12fc>)
 80099e2:	18d2      	adds	r2, r2, r3
 80099e4:	444a      	add	r2, r9
 80099e6:	79d3      	ldrb	r3, [r2, #7]
 80099e8:	021b      	lsls	r3, r3, #8
 80099ea:	7a11      	ldrb	r1, [r2, #8]
 80099ec:	0409      	lsls	r1, r1, #16
 80099ee:	185b      	adds	r3, r3, r1
 80099f0:	7991      	ldrb	r1, [r2, #6]
 80099f2:	185b      	adds	r3, r3, r1
 80099f4:	7a52      	ldrb	r2, [r2, #9]
 80099f6:	0612      	lsls	r2, r2, #24
 80099f8:	189b      	adds	r3, r3, r2
 80099fa:	6023      	str	r3, [r4, #0]
											break;
 80099fc:	e6e1      	b.n	80097c2 <PxMessagingTask+0x102e>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 80099fe:	2338      	movs	r3, #56	; 0x38
 8009a00:	436b      	muls	r3, r5
 8009a02:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009a04:	18d2      	adds	r2, r2, r3
 8009a06:	444a      	add	r2, r9
 8009a08:	79d3      	ldrb	r3, [r2, #7]
 8009a0a:	021b      	lsls	r3, r3, #8
 8009a0c:	7991      	ldrb	r1, [r2, #6]
 8009a0e:	185b      	adds	r3, r3, r1
 8009a10:	7a11      	ldrb	r1, [r2, #8]
 8009a12:	0409      	lsls	r1, r1, #16
 8009a14:	185b      	adds	r3, r3, r1
 8009a16:	7a52      	ldrb	r2, [r2, #9]
 8009a18:	0612      	lsls	r2, r2, #24
 8009a1a:	189b      	adds	r3, r3, r2
 8009a1c:	6023      	str	r3, [r4, #0]
											break;
 8009a1e:	e6d0      	b.n	80097c2 <PxMessagingTask+0x102e>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009a20:	2338      	movs	r3, #56	; 0x38
 8009a22:	436b      	muls	r3, r5
 8009a24:	4a1a      	ldr	r2, [pc, #104]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009a26:	18d2      	adds	r2, r2, r3
 8009a28:	444a      	add	r2, r9
 8009a2a:	79d3      	ldrb	r3, [r2, #7]
 8009a2c:	021b      	lsls	r3, r3, #8
 8009a2e:	7a11      	ldrb	r1, [r2, #8]
 8009a30:	0409      	lsls	r1, r1, #16
 8009a32:	185b      	adds	r3, r3, r1
 8009a34:	7991      	ldrb	r1, [r2, #6]
 8009a36:	185b      	adds	r3, r3, r1
 8009a38:	7a52      	ldrb	r2, [r2, #9]
 8009a3a:	0612      	lsls	r2, r2, #24
 8009a3c:	189b      	adds	r3, r3, r2
 8009a3e:	4a1a      	ldr	r2, [pc, #104]	; (8009aa8 <PxMessagingTask+0x1314>)
 8009a40:	6013      	str	r3, [r2, #0]
 8009a42:	2100      	movs	r1, #0
 8009a44:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 8009a46:	6023      	str	r3, [r4, #0]
											break;
 8009a48:	e6bb      	b.n	80097c2 <PxMessagingTask+0x102e>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 8009a4a:	4a1a      	ldr	r2, [pc, #104]	; (8009ab4 <PxMessagingTask+0x1320>)
 8009a4c:	23f8      	movs	r3, #248	; 0xf8
 8009a4e:	061b      	lsls	r3, r3, #24
 8009a50:	18e3      	adds	r3, r4, r3
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d900      	bls.n	8009a58 <PxMessagingTask+0x12c4>
 8009a56:	e0af      	b.n	8009bb8 <PxMessagingTask+0x1424>
									HAL_FLASH_Unlock();
 8009a58:	f008 f8b6 	bl	8011bc8 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 8009a5c:	2f22      	cmp	r7, #34	; 0x22
 8009a5e:	d102      	bne.n	8009a66 <PxMessagingTask+0x12d2>
										EraseSector(temp32);
 8009a60:	0020      	movs	r0, r4
 8009a62:	f002 ffb5 	bl	800c9d0 <EraseSector>
									if(responseStatus == BOS_OK){
 8009a66:	4b09      	ldr	r3, [pc, #36]	; (8009a8c <PxMessagingTask+0x12f8>)
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d12e      	bne.n	8009acc <PxMessagingTask+0x1338>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 8009a6e:	2238      	movs	r2, #56	; 0x38
 8009a70:	436a      	muls	r2, r5
 8009a72:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <PxMessagingTask+0x12fc>)
 8009a74:	189b      	adds	r3, r3, r2
 8009a76:	444b      	add	r3, r9
 8009a78:	785b      	ldrb	r3, [r3, #1]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	2a07      	cmp	r2, #7
 8009a80:	d824      	bhi.n	8009acc <PxMessagingTask+0x1338>
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4a0c      	ldr	r2, [pc, #48]	; (8009ab8 <PxMessagingTask+0x1324>)
 8009a88:	58d3      	ldr	r3, [r2, r3]
 8009a8a:	469f      	mov	pc, r3
 8009a8c:	20001188 	.word	0x20001188
 8009a90:	20000d7c 	.word	0x20000d7c
 8009a94:	20006dd8 	.word	0x20006dd8
 8009a98:	0801baa0 	.word	0x0801baa0
 8009a9c:	0000fff0 	.word	0x0000fff0
 8009aa0:	20006dd0 	.word	0x20006dd0
 8009aa4:	20000fac 	.word	0x20000fac
 8009aa8:	20001180 	.word	0x20001180
 8009aac:	00007fff 	.word	0x00007fff
 8009ab0:	0801bac0 	.word	0x0801bac0
 8009ab4:	0001ffff 	.word	0x0001ffff
 8009ab8:	0801bae0 	.word	0x0801bae0
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009abc:	8823      	ldrh	r3, [r4, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	4acb      	ldr	r2, [pc, #812]	; (8009df0 <PxMessagingTask+0x165c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d00c      	beq.n	8009ae0 <PxMessagingTask+0x134c>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009ac6:	4bcb      	ldr	r3, [pc, #812]	; (8009df4 <PxMessagingTask+0x1660>)
 8009ac8:	2216      	movs	r2, #22
 8009aca:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 8009acc:	f008 f88e 	bl	8011bec <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d100      	bne.n	8009ad8 <PxMessagingTask+0x1344>
 8009ad6:	e674      	b.n	80097c2 <PxMessagingTask+0x102e>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009ad8:	4bc6      	ldr	r3, [pc, #792]	; (8009df4 <PxMessagingTask+0x1660>)
 8009ada:	2216      	movs	r2, #22
 8009adc:	701a      	strb	r2, [r3, #0]
 8009ade:	e670      	b.n	80097c2 <PxMessagingTask+0x102e>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009ae0:	2238      	movs	r2, #56	; 0x38
 8009ae2:	436a      	muls	r2, r5
 8009ae4:	4bc4      	ldr	r3, [pc, #784]	; (8009df8 <PxMessagingTask+0x1664>)
 8009ae6:	189b      	adds	r3, r3, r2
 8009ae8:	444b      	add	r3, r9
 8009aea:	799a      	ldrb	r2, [r3, #6]
 8009aec:	2300      	movs	r3, #0
 8009aee:	49c3      	ldr	r1, [pc, #780]	; (8009dfc <PxMessagingTask+0x1668>)
 8009af0:	600a      	str	r2, [r1, #0]
 8009af2:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009af4:	0021      	movs	r1, r4
 8009af6:	2001      	movs	r0, #1
 8009af8:	f008 f8b0 	bl	8011c5c <HAL_FLASH_Program>
 8009afc:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009afe:	e7e5      	b.n	8009acc <PxMessagingTask+0x1338>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009b00:	8823      	ldrh	r3, [r4, #0]
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	4aba      	ldr	r2, [pc, #744]	; (8009df0 <PxMessagingTask+0x165c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d003      	beq.n	8009b12 <PxMessagingTask+0x137e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b0a:	4bba      	ldr	r3, [pc, #744]	; (8009df4 <PxMessagingTask+0x1660>)
 8009b0c:	2216      	movs	r2, #22
 8009b0e:	701a      	strb	r2, [r3, #0]
													break;
 8009b10:	e7dc      	b.n	8009acc <PxMessagingTask+0x1338>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009b12:	2238      	movs	r2, #56	; 0x38
 8009b14:	436a      	muls	r2, r5
 8009b16:	4bb8      	ldr	r3, [pc, #736]	; (8009df8 <PxMessagingTask+0x1664>)
 8009b18:	189b      	adds	r3, r3, r2
 8009b1a:	444b      	add	r3, r9
 8009b1c:	79da      	ldrb	r2, [r3, #7]
 8009b1e:	0212      	lsls	r2, r2, #8
 8009b20:	799b      	ldrb	r3, [r3, #6]
 8009b22:	18d2      	adds	r2, r2, r3
 8009b24:	17d3      	asrs	r3, r2, #31
 8009b26:	49b5      	ldr	r1, [pc, #724]	; (8009dfc <PxMessagingTask+0x1668>)
 8009b28:	600a      	str	r2, [r1, #0]
 8009b2a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009b2c:	0021      	movs	r1, r4
 8009b2e:	2001      	movs	r0, #1
 8009b30:	f008 f894 	bl	8011c5c <HAL_FLASH_Program>
 8009b34:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009b36:	e7c9      	b.n	8009acc <PxMessagingTask+0x1338>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	d003      	beq.n	8009b46 <PxMessagingTask+0x13b2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b3e:	4bad      	ldr	r3, [pc, #692]	; (8009df4 <PxMessagingTask+0x1660>)
 8009b40:	2216      	movs	r2, #22
 8009b42:	701a      	strb	r2, [r3, #0]
													break;
 8009b44:	e7c2      	b.n	8009acc <PxMessagingTask+0x1338>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009b46:	2238      	movs	r2, #56	; 0x38
 8009b48:	436a      	muls	r2, r5
 8009b4a:	4bab      	ldr	r3, [pc, #684]	; (8009df8 <PxMessagingTask+0x1664>)
 8009b4c:	189b      	adds	r3, r3, r2
 8009b4e:	444b      	add	r3, r9
 8009b50:	79da      	ldrb	r2, [r3, #7]
 8009b52:	0212      	lsls	r2, r2, #8
 8009b54:	7a19      	ldrb	r1, [r3, #8]
 8009b56:	0409      	lsls	r1, r1, #16
 8009b58:	1852      	adds	r2, r2, r1
 8009b5a:	7999      	ldrb	r1, [r3, #6]
 8009b5c:	1852      	adds	r2, r2, r1
 8009b5e:	7a5b      	ldrb	r3, [r3, #9]
 8009b60:	061b      	lsls	r3, r3, #24
 8009b62:	18d2      	adds	r2, r2, r3
 8009b64:	2300      	movs	r3, #0
 8009b66:	49a5      	ldr	r1, [pc, #660]	; (8009dfc <PxMessagingTask+0x1668>)
 8009b68:	600a      	str	r2, [r1, #0]
 8009b6a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009b6c:	0021      	movs	r1, r4
 8009b6e:	2002      	movs	r0, #2
 8009b70:	f008 f874 	bl	8011c5c <HAL_FLASH_Program>
 8009b74:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009b76:	e7a9      	b.n	8009acc <PxMessagingTask+0x1338>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	d003      	beq.n	8009b86 <PxMessagingTask+0x13f2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009b7e:	4b9d      	ldr	r3, [pc, #628]	; (8009df4 <PxMessagingTask+0x1660>)
 8009b80:	2216      	movs	r2, #22
 8009b82:	701a      	strb	r2, [r3, #0]
													break;
 8009b84:	e7a2      	b.n	8009acc <PxMessagingTask+0x1338>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009b86:	2238      	movs	r2, #56	; 0x38
 8009b88:	436a      	muls	r2, r5
 8009b8a:	4b9b      	ldr	r3, [pc, #620]	; (8009df8 <PxMessagingTask+0x1664>)
 8009b8c:	189b      	adds	r3, r3, r2
 8009b8e:	444b      	add	r3, r9
 8009b90:	79da      	ldrb	r2, [r3, #7]
 8009b92:	0212      	lsls	r2, r2, #8
 8009b94:	7a19      	ldrb	r1, [r3, #8]
 8009b96:	0409      	lsls	r1, r1, #16
 8009b98:	1852      	adds	r2, r2, r1
 8009b9a:	7999      	ldrb	r1, [r3, #6]
 8009b9c:	1852      	adds	r2, r2, r1
 8009b9e:	7a5b      	ldrb	r3, [r3, #9]
 8009ba0:	061b      	lsls	r3, r3, #24
 8009ba2:	18d2      	adds	r2, r2, r3
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4995      	ldr	r1, [pc, #596]	; (8009dfc <PxMessagingTask+0x1668>)
 8009ba8:	600a      	str	r2, [r1, #0]
 8009baa:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009bac:	0021      	movs	r1, r4
 8009bae:	2003      	movs	r0, #3
 8009bb0:	f008 f854 	bl	8011c5c <HAL_FLASH_Program>
 8009bb4:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009bb6:	e789      	b.n	8009acc <PxMessagingTask+0x1338>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009bb8:	4b8e      	ldr	r3, [pc, #568]	; (8009df4 <PxMessagingTask+0x1660>)
 8009bba:	2215      	movs	r2, #21
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	e600      	b.n	80097c2 <PxMessagingTask+0x102e>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8009bc0:	4b8d      	ldr	r3, [pc, #564]	; (8009df8 <PxMessagingTask+0x1664>)
 8009bc2:	199b      	adds	r3, r3, r6
 8009bc4:	5d1a      	ldrb	r2, [r3, r4]
 8009bc6:	4b8b      	ldr	r3, [pc, #556]	; (8009df4 <PxMessagingTask+0x1660>)
 8009bc8:	701a      	strb	r2, [r3, #0]
							break;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4699      	mov	r9, r3
 8009bce:	f7fe fe4d 	bl	800886c <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8009bd2:	9a05      	ldr	r2, [sp, #20]
 8009bd4:	3a01      	subs	r2, #1
 8009bd6:	b292      	uxth	r2, r2
 8009bd8:	1c61      	adds	r1, r4, #1
 8009bda:	4451      	add	r1, sl
 8009bdc:	4b86      	ldr	r3, [pc, #536]	; (8009df8 <PxMessagingTask+0x1664>)
 8009bde:	18c9      	adds	r1, r1, r3
 8009be0:	199b      	adds	r3, r3, r6
 8009be2:	5d18      	ldrb	r0, [r3, r4]
 8009be4:	230a      	movs	r3, #10
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	f004 fd7e 	bl	800e6e8 <writePxMutex>
							break;
 8009bec:	2300      	movs	r3, #0
 8009bee:	4699      	mov	r9, r3
 8009bf0:	f7fe fe3c 	bl	800886c <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 8009bf4:	4a80      	ldr	r2, [pc, #512]	; (8009df8 <PxMessagingTask+0x1664>)
 8009bf6:	1992      	adds	r2, r2, r6
 8009bf8:	5d12      	ldrb	r2, [r2, r4]
 8009bfa:	2a01      	cmp	r2, #1
 8009bfc:	d06a      	beq.n	8009cd4 <PxMessagingTask+0x1540>
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	d040      	beq.n	8009c84 <PxMessagingTask+0x14f0>
 8009c02:	2a02      	cmp	r2, #2
 8009c04:	d100      	bne.n	8009c08 <PxMessagingTask+0x1474>
 8009c06:	e08d      	b.n	8009d24 <PxMessagingTask+0x1590>
							ADCPort =cMessage[port - 1][shift];
 8009c08:	4b7b      	ldr	r3, [pc, #492]	; (8009df8 <PxMessagingTask+0x1664>)
 8009c0a:	199b      	adds	r3, r3, r6
 8009c0c:	5d18      	ldrb	r0, [r3, r4]
 8009c0e:	4a7c      	ldr	r2, [pc, #496]	; (8009e00 <PxMessagingTask+0x166c>)
 8009c10:	8010      	strh	r0, [r2, #0]
							ADCSide =cMessage[port - 1][shift + 1];
 8009c12:	191b      	adds	r3, r3, r4
 8009c14:	785b      	ldrb	r3, [r3, #1]
 8009c16:	4a7b      	ldr	r2, [pc, #492]	; (8009e04 <PxMessagingTask+0x1670>)
 8009c18:	8013      	strh	r3, [r2, #0]
							if(0 == ADCSide){
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d000      	beq.n	8009c20 <PxMessagingTask+0x148c>
 8009c1e:	e093      	b.n	8009d48 <PxMessagingTask+0x15b4>
								ADCSelectChannel(ADCPort,"top");
 8009c20:	4f79      	ldr	r7, [pc, #484]	; (8009e08 <PxMessagingTask+0x1674>)
 8009c22:	0039      	movs	r1, r7
 8009c24:	f003 fdec 	bl	800d800 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8009c28:	4b75      	ldr	r3, [pc, #468]	; (8009e00 <PxMessagingTask+0x166c>)
 8009c2a:	7818      	ldrb	r0, [r3, #0]
 8009c2c:	4a77      	ldr	r2, [pc, #476]	; (8009e0c <PxMessagingTask+0x1678>)
 8009c2e:	0039      	movs	r1, r7
 8009c30:	f003 fe18 	bl	800d864 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 8009c34:	4976      	ldr	r1, [pc, #472]	; (8009e10 <PxMessagingTask+0x167c>)
 8009c36:	4877      	ldr	r0, [pc, #476]	; (8009e14 <PxMessagingTask+0x1680>)
 8009c38:	f003 fc42 	bl	800d4c0 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 8009c3c:	4f6e      	ldr	r7, [pc, #440]	; (8009df8 <PxMessagingTask+0x1664>)
 8009c3e:	19bf      	adds	r7, r7, r6
 8009c40:	5d38      	ldrb	r0, [r7, r4]
 8009c42:	4b6f      	ldr	r3, [pc, #444]	; (8009e00 <PxMessagingTask+0x166c>)
 8009c44:	8018      	strh	r0, [r3, #0]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 8009c46:	4974      	ldr	r1, [pc, #464]	; (8009e18 <PxMessagingTask+0x1684>)
 8009c48:	f003 fcf8 	bl	800d63c <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009c4c:	193c      	adds	r4, r7, r4
 8009c4e:	79a3      	ldrb	r3, [r4, #6]
 8009c50:	021b      	lsls	r3, r3, #8
 8009c52:	79e2      	ldrb	r2, [r4, #7]
 8009c54:	0412      	lsls	r2, r2, #16
 8009c56:	189b      	adds	r3, r3, r2
 8009c58:	7962      	ldrb	r2, [r4, #5]
 8009c5a:	189b      	adds	r3, r3, r2
 8009c5c:	7a22      	ldrb	r2, [r4, #8]
 8009c5e:	0612      	lsls	r2, r2, #24
 8009c60:	189b      	adds	r3, r3, r2
 8009c62:	4a6e      	ldr	r2, [pc, #440]	; (8009e1c <PxMessagingTask+0x1688>)
 8009c64:	61d3      	str	r3, [r2, #28]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009c66:	7aa3      	ldrb	r3, [r4, #10]
 8009c68:	021b      	lsls	r3, r3, #8
 8009c6a:	7ae1      	ldrb	r1, [r4, #11]
 8009c6c:	0409      	lsls	r1, r1, #16
 8009c6e:	185b      	adds	r3, r3, r1
 8009c70:	7a61      	ldrb	r1, [r4, #9]
 8009c72:	185b      	adds	r3, r3, r1
 8009c74:	7b21      	ldrb	r1, [r4, #12]
 8009c76:	0609      	lsls	r1, r1, #24
 8009c78:	185b      	adds	r3, r3, r1
 8009c7a:	6213      	str	r3, [r2, #32]
							break;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	4699      	mov	r9, r3
 8009c80:	f7fe fdf4 	bl	800886c <PxMessagingTask+0xd8>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009c84:	2138      	movs	r1, #56	; 0x38
 8009c86:	4369      	muls	r1, r5
 8009c88:	4a5b      	ldr	r2, [pc, #364]	; (8009df8 <PxMessagingTask+0x1664>)
 8009c8a:	1852      	adds	r2, r2, r1
 8009c8c:	1913      	adds	r3, r2, r4
 8009c8e:	789a      	ldrb	r2, [r3, #2]
 8009c90:	0212      	lsls	r2, r2, #8
 8009c92:	78d9      	ldrb	r1, [r3, #3]
 8009c94:	0409      	lsls	r1, r1, #16
 8009c96:	1852      	adds	r2, r2, r1
 8009c98:	7859      	ldrb	r1, [r3, #1]
 8009c9a:	1852      	adds	r2, r2, r1
 8009c9c:	7919      	ldrb	r1, [r3, #4]
 8009c9e:	0609      	lsls	r1, r1, #24
 8009ca0:	1852      	adds	r2, r2, r1
 8009ca2:	495e      	ldr	r1, [pc, #376]	; (8009e1c <PxMessagingTask+0x1688>)
 8009ca4:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009ca6:	799a      	ldrb	r2, [r3, #6]
 8009ca8:	0212      	lsls	r2, r2, #8
 8009caa:	79d8      	ldrb	r0, [r3, #7]
 8009cac:	0400      	lsls	r0, r0, #16
 8009cae:	1812      	adds	r2, r2, r0
 8009cb0:	7958      	ldrb	r0, [r3, #5]
 8009cb2:	1812      	adds	r2, r2, r0
 8009cb4:	7a18      	ldrb	r0, [r3, #8]
 8009cb6:	0600      	lsls	r0, r0, #24
 8009cb8:	1812      	adds	r2, r2, r0
 8009cba:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009cbc:	7a9a      	ldrb	r2, [r3, #10]
 8009cbe:	0212      	lsls	r2, r2, #8
 8009cc0:	7ad8      	ldrb	r0, [r3, #11]
 8009cc2:	0400      	lsls	r0, r0, #16
 8009cc4:	1812      	adds	r2, r2, r0
 8009cc6:	7a58      	ldrb	r0, [r3, #9]
 8009cc8:	1812      	adds	r2, r2, r0
 8009cca:	7b1b      	ldrb	r3, [r3, #12]
 8009ccc:	061b      	lsls	r3, r3, #24
 8009cce:	18d3      	adds	r3, r2, r3
 8009cd0:	608b      	str	r3, [r1, #8]
									break;
 8009cd2:	e799      	b.n	8009c08 <PxMessagingTask+0x1474>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009cd4:	2238      	movs	r2, #56	; 0x38
 8009cd6:	436a      	muls	r2, r5
 8009cd8:	4b47      	ldr	r3, [pc, #284]	; (8009df8 <PxMessagingTask+0x1664>)
 8009cda:	189b      	adds	r3, r3, r2
 8009cdc:	191b      	adds	r3, r3, r4
 8009cde:	789a      	ldrb	r2, [r3, #2]
 8009ce0:	0212      	lsls	r2, r2, #8
 8009ce2:	78d9      	ldrb	r1, [r3, #3]
 8009ce4:	0409      	lsls	r1, r1, #16
 8009ce6:	1852      	adds	r2, r2, r1
 8009ce8:	7859      	ldrb	r1, [r3, #1]
 8009cea:	1852      	adds	r2, r2, r1
 8009cec:	7919      	ldrb	r1, [r3, #4]
 8009cee:	0609      	lsls	r1, r1, #24
 8009cf0:	1852      	adds	r2, r2, r1
 8009cf2:	494a      	ldr	r1, [pc, #296]	; (8009e1c <PxMessagingTask+0x1688>)
 8009cf4:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009cf6:	799a      	ldrb	r2, [r3, #6]
 8009cf8:	0212      	lsls	r2, r2, #8
 8009cfa:	79d8      	ldrb	r0, [r3, #7]
 8009cfc:	0400      	lsls	r0, r0, #16
 8009cfe:	1812      	adds	r2, r2, r0
 8009d00:	7958      	ldrb	r0, [r3, #5]
 8009d02:	1812      	adds	r2, r2, r0
 8009d04:	7a18      	ldrb	r0, [r3, #8]
 8009d06:	0600      	lsls	r0, r0, #24
 8009d08:	1812      	adds	r2, r2, r0
 8009d0a:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009d0c:	7a9a      	ldrb	r2, [r3, #10]
 8009d0e:	0212      	lsls	r2, r2, #8
 8009d10:	7ad8      	ldrb	r0, [r3, #11]
 8009d12:	0400      	lsls	r0, r0, #16
 8009d14:	1812      	adds	r2, r2, r0
 8009d16:	7a58      	ldrb	r0, [r3, #9]
 8009d18:	1812      	adds	r2, r2, r0
 8009d1a:	7b1b      	ldrb	r3, [r3, #12]
 8009d1c:	061b      	lsls	r3, r3, #24
 8009d1e:	18d3      	adds	r3, r2, r3
 8009d20:	614b      	str	r3, [r1, #20]
									break;
 8009d22:	e771      	b.n	8009c08 <PxMessagingTask+0x1474>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009d24:	2138      	movs	r1, #56	; 0x38
 8009d26:	4369      	muls	r1, r5
 8009d28:	4a33      	ldr	r2, [pc, #204]	; (8009df8 <PxMessagingTask+0x1664>)
 8009d2a:	1852      	adds	r2, r2, r1
 8009d2c:	1912      	adds	r2, r2, r4
 8009d2e:	7893      	ldrb	r3, [r2, #2]
 8009d30:	021b      	lsls	r3, r3, #8
 8009d32:	78d1      	ldrb	r1, [r2, #3]
 8009d34:	0409      	lsls	r1, r1, #16
 8009d36:	185b      	adds	r3, r3, r1
 8009d38:	7851      	ldrb	r1, [r2, #1]
 8009d3a:	185b      	adds	r3, r3, r1
 8009d3c:	7912      	ldrb	r2, [r2, #4]
 8009d3e:	0612      	lsls	r2, r2, #24
 8009d40:	189b      	adds	r3, r3, r2
 8009d42:	4a36      	ldr	r2, [pc, #216]	; (8009e1c <PxMessagingTask+0x1688>)
 8009d44:	6193      	str	r3, [r2, #24]
 8009d46:	e75f      	b.n	8009c08 <PxMessagingTask+0x1474>
							else if(1 == ADCSide){
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d000      	beq.n	8009d4e <PxMessagingTask+0x15ba>
 8009d4c:	e772      	b.n	8009c34 <PxMessagingTask+0x14a0>
								ADCSelectChannel(ADCPort,"bottom");
 8009d4e:	4f34      	ldr	r7, [pc, #208]	; (8009e20 <PxMessagingTask+0x168c>)
 8009d50:	0039      	movs	r1, r7
 8009d52:	f003 fd55 	bl	800d800 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8009d56:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <PxMessagingTask+0x166c>)
 8009d58:	7818      	ldrb	r0, [r3, #0]
 8009d5a:	4a2c      	ldr	r2, [pc, #176]	; (8009e0c <PxMessagingTask+0x1678>)
 8009d5c:	0039      	movs	r1, r7
 8009d5e:	f003 fd81 	bl	800d864 <ReadADCChannel>
 8009d62:	e767      	b.n	8009c34 <PxMessagingTask+0x14a0>
							ACK_FLAG =1;
 8009d64:	4b2f      	ldr	r3, [pc, #188]	; (8009e24 <PxMessagingTask+0x1690>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	701a      	strb	r2, [r3, #0]
							break;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	4699      	mov	r9, r3
 8009d6e:	f7fe fd7d 	bl	800886c <PxMessagingTask+0xd8>
							rejected_FLAG =1;
 8009d72:	4b2d      	ldr	r3, [pc, #180]	; (8009e28 <PxMessagingTask+0x1694>)
 8009d74:	2201      	movs	r2, #1
 8009d76:	701a      	strb	r2, [r3, #0]
							break;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4699      	mov	r9, r3
 8009d7c:	f7fe fd76 	bl	800886c <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8009d80:	9400      	str	r4, [sp, #0]
 8009d82:	465b      	mov	r3, fp
 8009d84:	9a04      	ldr	r2, [sp, #16]
 8009d86:	9908      	ldr	r1, [sp, #32]
 8009d88:	0038      	movs	r0, r7
 8009d8a:	f7fe fd01 	bl	8008790 <User_MessagingParser>
 8009d8e:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 8009d90:	2801      	cmp	r0, #1
 8009d92:	d001      	beq.n	8009d98 <PxMessagingTask+0x1604>
 8009d94:	f7fe fd6a 	bl	800886c <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8009d98:	9400      	str	r4, [sp, #0]
 8009d9a:	465b      	mov	r3, fp
 8009d9c:	9a04      	ldr	r2, [sp, #16]
 8009d9e:	9908      	ldr	r1, [sp, #32]
 8009da0:	0038      	movs	r0, r7
 8009da2:	f000 fe11 	bl	800a9c8 <Module_MessagingTask>
 8009da6:	4681      	mov	r9, r0
 8009da8:	f7fe fd5b 	bl	8008862 <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 8009dac:	2300      	movs	r3, #0
 8009dae:	4699      	mov	r9, r3
 8009db0:	f7fe fd57 	bl	8008862 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 8009db4:	2300      	movs	r3, #0
 8009db6:	4699      	mov	r9, r3
 8009db8:	f7fe fd53 	bl	8008862 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4699      	mov	r9, r3
 8009dc0:	f7fe fd4f 	bl	8008862 <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	9804      	ldr	r0, [sp, #16]
 8009dca:	f7fe f9c9 	bl	8008160 <SendMessageToModule>
			result =BOS_OK;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	4699      	mov	r9, r3
 8009dd2:	f7fe fd4b 	bl	800886c <PxMessagingTask+0xd8>
					switch(code){
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4699      	mov	r9, r3
 8009dda:	f7fe fd47 	bl	800886c <PxMessagingTask+0xd8>
 8009dde:	9207      	str	r2, [sp, #28]
 8009de0:	2300      	movs	r3, #0
 8009de2:	4699      	mov	r9, r3
 8009de4:	f7fe fd42 	bl	800886c <PxMessagingTask+0xd8>
 8009de8:	2300      	movs	r3, #0
 8009dea:	4699      	mov	r9, r3
 8009dec:	f7fe fd3e 	bl	800886c <PxMessagingTask+0xd8>
 8009df0:	0000ffff 	.word	0x0000ffff
 8009df4:	20001188 	.word	0x20001188
 8009df8:	20000d7c 	.word	0x20000d7c
 8009dfc:	20001180 	.word	0x20001180
 8009e00:	20001964 	.word	0x20001964
 8009e04:	20001966 	.word	0x20001966
 8009e08:	08019d34 	.word	0x08019d34
 8009e0c:	20001968 	.word	0x20001968
 8009e10:	20001970 	.word	0x20001970
 8009e14:	2000196c 	.word	0x2000196c
 8009e18:	20001960 	.word	0x20001960
 8009e1c:	20001974 	.word	0x20001974
 8009e20:	08019d38 	.word	0x08019d38
 8009e24:	20000ae4 	.word	0x20000ae4
 8009e28:	2000117c 	.word	0x2000117c
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009e2c:	455b      	cmp	r3, fp
 8009e2e:	d003      	beq.n	8009e38 <PxMessagingTask+0x16a4>
 8009e30:	2f10      	cmp	r7, #16
 8009e32:	d001      	beq.n	8009e38 <PxMessagingTask+0x16a4>
 8009e34:	f7fe fd77 	bl	8008926 <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009e38:	465b      	mov	r3, fp
 8009e3a:	2bff      	cmp	r3, #255	; 0xff
 8009e3c:	d101      	bne.n	8009e42 <PxMessagingTask+0x16ae>
 8009e3e:	f7fe fce1 	bl	8008804 <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009e42:	2bfe      	cmp	r3, #254	; 0xfe
 8009e44:	d001      	beq.n	8009e4a <PxMessagingTask+0x16b6>
 8009e46:	f7fe fd09 	bl	800885c <PxMessagingTask+0xc8>
 8009e4a:	4b2b      	ldr	r3, [pc, #172]	; (8009ef8 <PxMessagingTask+0x1764>)
 8009e4c:	5d5a      	ldrb	r2, [r3, r5]
 8009e4e:	4b2b      	ldr	r3, [pc, #172]	; (8009efc <PxMessagingTask+0x1768>)
 8009e50:	199b      	adds	r3, r3, r6
 8009e52:	189b      	adds	r3, r3, r2
 8009e54:	3b01      	subs	r3, #1
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	4a29      	ldr	r2, [pc, #164]	; (8009f00 <PxMessagingTask+0x176c>)
 8009e5a:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 8009e5c:	2103      	movs	r1, #3
 8009e5e:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d101      	bne.n	8009e68 <PxMessagingTask+0x16d4>
 8009e64:	f7fe fcfd 	bl	8008862 <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009e68:	4a25      	ldr	r2, [pc, #148]	; (8009f00 <PxMessagingTask+0x176c>)
 8009e6a:	7013      	strb	r3, [r2, #0]
 8009e6c:	4a25      	ldr	r2, [pc, #148]	; (8009f04 <PxMessagingTask+0x1770>)
 8009e6e:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009e70:	9908      	ldr	r1, [sp, #32]
 8009e72:	20fe      	movs	r0, #254	; 0xfe
 8009e74:	f7fe f92c 	bl	80080d0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009e78:	4b1f      	ldr	r3, [pc, #124]	; (8009ef8 <PxMessagingTask+0x1764>)
 8009e7a:	5d59      	ldrb	r1, [r3, r5]
 8009e7c:	4b1f      	ldr	r3, [pc, #124]	; (8009efc <PxMessagingTask+0x1768>)
 8009e7e:	199b      	adds	r3, r3, r6
 8009e80:	185a      	adds	r2, r3, r1
 8009e82:	3a01      	subs	r2, #1
 8009e84:	2000      	movs	r0, #0
 8009e86:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009e88:	1e8a      	subs	r2, r1, #2
 8009e8a:	5c9c      	ldrb	r4, [r3, r2]
 8009e8c:	9407      	str	r4, [sp, #28]
					for(i =0; i < temp; i++){
 8009e8e:	2c00      	cmp	r4, #0
 8009e90:	d02e      	beq.n	8009ef0 <PxMessagingTask+0x175c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009e92:	1b13      	subs	r3, r2, r4
 8009e94:	469c      	mov	ip, r3
 8009e96:	4b1c      	ldr	r3, [pc, #112]	; (8009f08 <PxMessagingTask+0x1774>)
 8009e98:	7818      	ldrb	r0, [r3, #0]
 8009e9a:	4b18      	ldr	r3, [pc, #96]	; (8009efc <PxMessagingTask+0x1768>)
 8009e9c:	199b      	adds	r3, r3, r6
 8009e9e:	4662      	mov	r2, ip
 8009ea0:	5c9b      	ldrb	r3, [r3, r2]
 8009ea2:	4283      	cmp	r3, r0
 8009ea4:	d011      	beq.n	8009eca <PxMessagingTask+0x1736>
 8009ea6:	4653      	mov	r3, sl
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	4463      	add	r3, ip
 8009eac:	4a13      	ldr	r2, [pc, #76]	; (8009efc <PxMessagingTask+0x1768>)
 8009eae:	189b      	adds	r3, r3, r2
 8009eb0:	3201      	adds	r2, #1
 8009eb2:	4452      	add	r2, sl
 8009eb4:	3c01      	subs	r4, #1
 8009eb6:	b2e4      	uxtb	r4, r4
 8009eb8:	1912      	adds	r2, r2, r4
 8009eba:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d017      	beq.n	8009ef0 <PxMessagingTask+0x175c>
 8009ec0:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009ec2:	1e5c      	subs	r4, r3, #1
 8009ec4:	7824      	ldrb	r4, [r4, #0]
 8009ec6:	4284      	cmp	r4, r0
 8009ec8:	d1f8      	bne.n	8009ebc <PxMessagingTask+0x1728>
				shift +=4;
 8009eca:	9c05      	ldr	r4, [sp, #20]
 8009ecc:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009ece:	1b0a      	subs	r2, r1, r4
 8009ed0:	b2d3      	uxtb	r3, r2
 8009ed2:	9305      	str	r3, [sp, #20]
 8009ed4:	f7fe fcba 	bl	800884c <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009ed8:	2338      	movs	r3, #56	; 0x38
 8009eda:	436b      	muls	r3, r5
 8009edc:	4a07      	ldr	r2, [pc, #28]	; (8009efc <PxMessagingTask+0x1768>)
 8009ede:	18d2      	adds	r2, r2, r3
 8009ee0:	464b      	mov	r3, r9
 8009ee2:	5cd3      	ldrb	r3, [r2, r3]
 8009ee4:	3b01      	subs	r3, #1
 8009ee6:	0098      	lsls	r0, r3, #2
 8009ee8:	4908      	ldr	r1, [pc, #32]	; (8009f0c <PxMessagingTask+0x1778>)
 8009eea:	5841      	ldr	r1, [r0, r1]
 8009eec:	5dd2      	ldrb	r2, [r2, r7]
 8009eee:	e45e      	b.n	80097ae <PxMessagingTask+0x101a>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009ef0:	2366      	movs	r3, #102	; 0x66
 8009ef2:	4699      	mov	r9, r3
 8009ef4:	f7fe fcba 	bl	800886c <PxMessagingTask+0xd8>
 8009ef8:	20000fa4 	.word	0x20000fa4
 8009efc:	20000d7c 	.word	0x20000d7c
 8009f00:	2000199a 	.word	0x2000199a
 8009f04:	20000d28 	.word	0x20000d28
 8009f08:	200010ea 	.word	0x200010ea
 8009f0c:	20006dd8 	.word	0x20006dd8

08009f10 <StreamMemsToPort>:
	}
	return status;
}

static Module_Status StreamMemsToPort(uint8_t port, uint8_t module, uint32_t period, uint32_t timeout, SampleMemsToPort function)
{
 8009f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f12:	b085      	sub	sp, #20
 8009f14:	9001      	str	r0, [sp, #4]
 8009f16:	9102      	str	r1, [sp, #8]
 8009f18:	0016      	movs	r6, r2
 8009f1a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	Module_Status status = H0AR9_OK;


	if (period < MIN_MEMS_PERIOD_MS)
 8009f1c:	2a63      	cmp	r2, #99	; 0x63
 8009f1e:	d930      	bls.n	8009f82 <StreamMemsToPort+0x72>
		return H0AR9_ERR_WrongParams;
	if (port == 0)
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d030      	beq.n	8009f86 <StreamMemsToPort+0x76>
		return H0AR9_ERR_WrongParams;
	if (port == PcPort) // Check if CLI is not enabled at that port!
 8009f24:	4a1a      	ldr	r2, [pc, #104]	; (8009f90 <StreamMemsToPort+0x80>)
 8009f26:	7812      	ldrb	r2, [r2, #0]
 8009f28:	4282      	cmp	r2, r0
 8009f2a:	d02e      	beq.n	8009f8a <StreamMemsToPort+0x7a>
 8009f2c:	9603      	str	r6, [sp, #12]
 8009f2e:	429e      	cmp	r6, r3
 8009f30:	d200      	bcs.n	8009f34 <StreamMemsToPort+0x24>
 8009f32:	9303      	str	r3, [sp, #12]
		return H0AR9_ERR_BUSY;

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 8009f34:	0031      	movs	r1, r6
 8009f36:	9803      	ldr	r0, [sp, #12]
 8009f38:	f7f6 f90a 	bl	8000150 <__udivsi3>
 8009f3c:	0005      	movs	r5, r0
	stopStream = false;
 8009f3e:	4b15      	ldr	r3, [pc, #84]	; (8009f94 <StreamMemsToPort+0x84>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	701a      	strb	r2, [r3, #0]

	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		function(port, module);

		vTaskDelay(pdMS_TO_TICKS(period));
 8009f44:	0170      	lsls	r0, r6, #5
 8009f46:	1b80      	subs	r0, r0, r6
 8009f48:	0080      	lsls	r0, r0, #2
 8009f4a:	1980      	adds	r0, r0, r6
 8009f4c:	00c0      	lsls	r0, r0, #3
 8009f4e:	21fa      	movs	r1, #250	; 0xfa
 8009f50:	0089      	lsls	r1, r1, #2
 8009f52:	f7f6 f8fd 	bl	8000150 <__udivsi3>
 8009f56:	0006      	movs	r6, r0
		if (stopStream) {
 8009f58:	4f0e      	ldr	r7, [pc, #56]	; (8009f94 <StreamMemsToPort+0x84>)
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009f5a:	2d00      	cmp	r5, #0
 8009f5c:	dd0c      	ble.n	8009f78 <StreamMemsToPort+0x68>
		function(port, module);
 8009f5e:	9902      	ldr	r1, [sp, #8]
 8009f60:	9801      	ldr	r0, [sp, #4]
 8009f62:	47a0      	blx	r4
		vTaskDelay(pdMS_TO_TICKS(period));
 8009f64:	0030      	movs	r0, r6
 8009f66:	f005 fd83 	bl	800fa70 <vTaskDelay>
 8009f6a:	3d01      	subs	r5, #1
		if (stopStream) {
 8009f6c:	783b      	ldrb	r3, [r7, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0f3      	beq.n	8009f5a <StreamMemsToPort+0x4a>
			status = H0AR9_ERR_TERMINATED;
 8009f72:	200a      	movs	r0, #10
			break;
		}
	}
	return status;
}
 8009f74:	b005      	add	sp, #20
 8009f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	d0ef      	beq.n	8009f5e <StreamMemsToPort+0x4e>
	Module_Status status = H0AR9_OK;
 8009f7e:	2000      	movs	r0, #0
 8009f80:	e7f8      	b.n	8009f74 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 8009f82:	200b      	movs	r0, #11
 8009f84:	e7f6      	b.n	8009f74 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 8009f86:	200b      	movs	r0, #11
 8009f88:	e7f4      	b.n	8009f74 <StreamMemsToPort+0x64>
		return H0AR9_ERR_BUSY;
 8009f8a:	2007      	movs	r0, #7
 8009f8c:	e7f2      	b.n	8009f74 <StreamMemsToPort+0x64>
 8009f8e:	46c0      	nop			; (mov r8, r8)
 8009f90:	20000ae8 	.word	0x20000ae8
 8009f94:	20001b58 	.word	0x20001b58

08009f98 <StreamMemsToCLI>:

static Module_Status StreamMemsToCLI(uint32_t period, uint32_t timeout, SampleMemsToString function)
{
 8009f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9a:	46de      	mov	lr, fp
 8009f9c:	4657      	mov	r7, sl
 8009f9e:	464e      	mov	r6, r9
 8009fa0:	4645      	mov	r5, r8
 8009fa2:	b5e0      	push	{r5, r6, r7, lr}
 8009fa4:	b087      	sub	sp, #28
 8009fa6:	0004      	movs	r4, r0
 8009fa8:	4691      	mov	r9, r2
	Module_Status status = H0AR9_OK;
	int8_t *pcOutputString = NULL;

	if (period < MIN_MEMS_PERIOD_MS)
 8009faa:	2863      	cmp	r0, #99	; 0x63
 8009fac:	d800      	bhi.n	8009fb0 <StreamMemsToCLI+0x18>
 8009fae:	e081      	b.n	800a0b4 <StreamMemsToCLI+0x11c>
 8009fb0:	9004      	str	r0, [sp, #16]
 8009fb2:	4288      	cmp	r0, r1
 8009fb4:	d200      	bcs.n	8009fb8 <StreamMemsToCLI+0x20>
 8009fb6:	9104      	str	r1, [sp, #16]
	// TODO: Check if CLI is enable or not

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 8009fb8:	0021      	movs	r1, r4
 8009fba:	9804      	ldr	r0, [sp, #16]
 8009fbc:	f7f6 f8c8 	bl	8000150 <__udivsi3>
 8009fc0:	0006      	movs	r6, r0
	stopStream = false;
 8009fc2:	4b3d      	ldr	r3, [pc, #244]	; (800a0b8 <StreamMemsToCLI+0x120>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
	long numDeltaDelay =  period / DELTA_SLEEP_MS;
 8009fc8:	2164      	movs	r1, #100	; 0x64
 8009fca:	0020      	movs	r0, r4
 8009fcc:	f7f6 f8c0 	bl	8000150 <__udivsi3>
 8009fd0:	9003      	str	r0, [sp, #12]
	unsigned lastDelayMS = period % DELTA_SLEEP_MS;
 8009fd2:	2164      	movs	r1, #100	; 0x64
 8009fd4:	0020      	movs	r0, r4
 8009fd6:	f7f6 f941 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 8009fda:	0148      	lsls	r0, r1, #5
 8009fdc:	1a40      	subs	r0, r0, r1
 8009fde:	0080      	lsls	r0, r0, #2
 8009fe0:	1840      	adds	r0, r0, r1
 8009fe2:	00c0      	lsls	r0, r0, #3
 8009fe4:	21fa      	movs	r1, #250	; 0xfa
 8009fe6:	0089      	lsls	r1, r1, #2
 8009fe8:	f7f6 f8b2 	bl	8000150 <__udivsi3>
 8009fec:	9005      	str	r0, [sp, #20]
	int8_t *pcOutputString = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	9302      	str	r3, [sp, #8]
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
		function((char *)pcOutputString, 100);


		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 8009ff2:	4b32      	ldr	r3, [pc, #200]	; (800a0bc <StreamMemsToCLI+0x124>)
 8009ff4:	469a      	mov	sl, r3
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 8009ff6:	4698      	mov	r8, r3
 8009ff8:	4f31      	ldr	r7, [pc, #196]	; (800a0c0 <StreamMemsToCLI+0x128>)
 8009ffa:	46bb      	mov	fp, r7
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009ffc:	2e00      	cmp	r6, #0
 8009ffe:	dd55      	ble.n	800a0ac <StreamMemsToCLI+0x114>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a000:	f004 fe2e 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 800a004:	0004      	movs	r4, r0
 800a006:	9002      	str	r0, [sp, #8]
		function((char *)pcOutputString, 100);
 800a008:	2164      	movs	r1, #100	; 0x64
 800a00a:	47c8      	blx	r9
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800a00c:	0020      	movs	r0, r4
 800a00e:	f7f6 f883 	bl	8000118 <strlen>
 800a012:	23fa      	movs	r3, #250	; 0xfa
 800a014:	b282      	uxth	r2, r0
 800a016:	4651      	mov	r1, sl
 800a018:	7808      	ldrb	r0, [r1, #0]
 800a01a:	2101      	movs	r1, #1
 800a01c:	4249      	negs	r1, r1
 800a01e:	9100      	str	r1, [sp, #0]
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	0021      	movs	r1, r4
 800a024:	f004 fb60 	bl	800e6e8 <writePxMutex>
 800a028:	9d03      	ldr	r5, [sp, #12]
	while (numDeltaDelay-- > 0) {
 800a02a:	2d00      	cmp	r5, #0
 800a02c:	dd39      	ble.n	800a0a2 <StreamMemsToCLI+0x10a>
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 800a02e:	2064      	movs	r0, #100	; 0x64
 800a030:	f005 fd1e 	bl	800fa70 <vTaskDelay>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800a034:	4643      	mov	r3, r8
 800a036:	781c      	ldrb	r4, [r3, #0]
 800a038:	3c01      	subs	r4, #1
 800a03a:	0063      	lsls	r3, r4, #1
 800a03c:	191b      	adds	r3, r3, r4
 800a03e:	019b      	lsls	r3, r3, #6
 800a040:	5ddb      	ldrb	r3, [r3, r7]
 800a042:	2b0d      	cmp	r3, #13
 800a044:	d011      	beq.n	800a06a <StreamMemsToCLI+0xd2>
 800a046:	0061      	lsls	r1, r4, #1
 800a048:	1909      	adds	r1, r1, r4
 800a04a:	0189      	lsls	r1, r1, #6
 800a04c:	4459      	add	r1, fp
 800a04e:	2301      	movs	r3, #1
 800a050:	0018      	movs	r0, r3
 800a052:	5cca      	ldrb	r2, [r1, r3]
 800a054:	2a0d      	cmp	r2, #13
 800a056:	d009      	beq.n	800a06c <StreamMemsToCLI+0xd4>
 800a058:	3301      	adds	r3, #1
		for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800a05a:	2bc0      	cmp	r3, #192	; 0xc0
 800a05c:	d1f8      	bne.n	800a050 <StreamMemsToCLI+0xb8>
 800a05e:	3d01      	subs	r5, #1
		if (stopStream)
 800a060:	4b15      	ldr	r3, [pc, #84]	; (800a0b8 <StreamMemsToCLI+0x120>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d0e0      	beq.n	800a02a <StreamMemsToCLI+0x92>
 800a068:	e007      	b.n	800a07a <StreamMemsToCLI+0xe2>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800a06a:	2000      	movs	r0, #0
				UARTRxBuf[PcPort-1][chr] = 0;
 800a06c:	0063      	lsls	r3, r4, #1
 800a06e:	191b      	adds	r3, r3, r4
 800a070:	019b      	lsls	r3, r3, #6
 800a072:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <StreamMemsToCLI+0x128>)
 800a074:	18d3      	adds	r3, r2, r3
 800a076:	2200      	movs	r2, #0
 800a078:	541a      	strb	r2, [r3, r0]
		if (PollingSleepCLISafe(period) != H0AR9_OK)
			break;
	}

	memset((char *) pcOutputString, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a07a:	2299      	movs	r2, #153	; 0x99
 800a07c:	0092      	lsls	r2, r2, #2
 800a07e:	2100      	movs	r1, #0
 800a080:	9c02      	ldr	r4, [sp, #8]
 800a082:	0020      	movs	r0, r4
 800a084:	f00a fb0c 	bl	80146a0 <memset>
  sprintf((char *)pcOutputString, "\r\n");
 800a088:	2203      	movs	r2, #3
 800a08a:	490e      	ldr	r1, [pc, #56]	; (800a0c4 <StreamMemsToCLI+0x12c>)
 800a08c:	0020      	movs	r0, r4
 800a08e:	f00a fafe 	bl	801468e <memcpy>
	return status;
 800a092:	2000      	movs	r0, #0
}
 800a094:	b007      	add	sp, #28
 800a096:	bc3c      	pop	{r2, r3, r4, r5}
 800a098:	4690      	mov	r8, r2
 800a09a:	4699      	mov	r9, r3
 800a09c:	46a2      	mov	sl, r4
 800a09e:	46ab      	mov	fp, r5
 800a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800a0a2:	3e01      	subs	r6, #1
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800a0a4:	9805      	ldr	r0, [sp, #20]
 800a0a6:	f005 fce3 	bl	800fa70 <vTaskDelay>
 800a0aa:	e7a7      	b.n	8009ffc <StreamMemsToCLI+0x64>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800a0ac:	9b04      	ldr	r3, [sp, #16]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	d0a6      	beq.n	800a000 <StreamMemsToCLI+0x68>
 800a0b2:	e7e2      	b.n	800a07a <StreamMemsToCLI+0xe2>
		return H0AR9_ERR_WrongParams;
 800a0b4:	200b      	movs	r0, #11
 800a0b6:	e7ed      	b.n	800a094 <StreamMemsToCLI+0xfc>
 800a0b8:	20001b58 	.word	0x20001b58
 800a0bc:	20000ae8 	.word	0x20000ae8
 800a0c0:	20001348 	.word	0x20001348
 800a0c4:	0801b310 	.word	0x0801b310

0800a0c8 <StopStreamCommand>:
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800a0c8:	b510      	push	{r4, lr}
	// Make sure we return something
	pcWriteBuffer[0] = '\0';
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	7003      	strb	r3, [r0, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Stopping Streaming MEMS...\r\n");
 800a0ce:	4a04      	ldr	r2, [pc, #16]	; (800a0e0 <StopStreamCommand+0x18>)
 800a0d0:	f00a fce0 	bl	8014a94 <snprintf>
	stopStream = true;
 800a0d4:	4b03      	ldr	r3, [pc, #12]	; (800a0e4 <StopStreamCommand+0x1c>)
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	701a      	strb	r2, [r3, #0]

	stopStreamMems();
	return pdFALSE;
}
 800a0da:	2000      	movs	r0, #0
 800a0dc:	bd10      	pop	{r4, pc}
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	0801bbf0 	.word	0x0801bbf0
 800a0e4:	20001b58 	.word	0x20001b58

0800a0e8 <SystemClock_Config>:
{
 800a0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ea:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a0ec:	2401      	movs	r4, #1
 800a0ee:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a0f0:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a0f2:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a0f8:	2702      	movs	r7, #2
 800a0fa:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a0fc:	2680      	movs	r6, #128	; 0x80
 800a0fe:	0276      	lsls	r6, r6, #9
 800a100:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800a102:	2380      	movs	r3, #128	; 0x80
 800a104:	035b      	lsls	r3, r3, #13
 800a106:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a108:	2500      	movs	r5, #0
 800a10a:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800a10c:	a80d      	add	r0, sp, #52	; 0x34
 800a10e:	f008 faaf 	bl	8012670 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800a112:	2307      	movs	r3, #7
 800a114:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a116:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a118:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800a11a:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800a11c:	2101      	movs	r1, #1
 800a11e:	a809      	add	r0, sp, #36	; 0x24
 800a120:	f008 fd68 	bl	8012bf4 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800a124:	4b1a      	ldr	r3, [pc, #104]	; (800a190 <SystemClock_Config+0xa8>)
 800a126:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800a128:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a12a:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a12c:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a12e:	a802      	add	r0, sp, #8
 800a130:	f008 ff0e 	bl	8012f50 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800a134:	4d17      	ldr	r5, [pc, #92]	; (800a194 <SystemClock_Config+0xac>)
 800a136:	69ea      	ldr	r2, [r5, #28]
 800a138:	2180      	movs	r1, #128	; 0x80
 800a13a:	0549      	lsls	r1, r1, #21
 800a13c:	430a      	orrs	r2, r1
 800a13e:	61ea      	str	r2, [r5, #28]
 800a140:	69eb      	ldr	r3, [r5, #28]
 800a142:	400b      	ands	r3, r1
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800a148:	f008 fa88 	bl	801265c <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a14c:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800a14e:	23c0      	movs	r3, #192	; 0xc0
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800a154:	a802      	add	r0, sp, #8
 800a156:	f008 fefb 	bl	8012f50 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800a15a:	f008 fed5 	bl	8012f08 <HAL_RCC_GetHCLKFreq>
 800a15e:	21fa      	movs	r1, #250	; 0xfa
 800a160:	0089      	lsls	r1, r1, #2
 800a162:	f7f5 fff5 	bl	8000150 <__udivsi3>
 800a166:	f006 fee1 	bl	8010f2c <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800a16a:	2004      	movs	r0, #4
 800a16c:	f006 fefa 	bl	8010f64 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800a170:	69ab      	ldr	r3, [r5, #24]
 800a172:	4323      	orrs	r3, r4
 800a174:	61ab      	str	r3, [r5, #24]
 800a176:	69ab      	ldr	r3, [r5, #24]
 800a178:	401c      	ands	r4, r3
 800a17a:	9401      	str	r4, [sp, #4]
 800a17c:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800a17e:	2001      	movs	r0, #1
 800a180:	2200      	movs	r2, #0
 800a182:	2100      	movs	r1, #0
 800a184:	4240      	negs	r0, r0
 800a186:	f006 fe89 	bl	8010e9c <HAL_NVIC_SetPriority>
}
 800a18a:	b01b      	add	sp, #108	; 0x6c
 800a18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a18e:	46c0      	nop			; (mov r8, r8)
 800a190:	00040003 	.word	0x00040003
 800a194:	40021000 	.word	0x40021000

0800a198 <RegisterModuleCLICommands>:
{
 800a198:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &SampleCommandDefinition );
 800a19a:	4805      	ldr	r0, [pc, #20]	; (800a1b0 <RegisterModuleCLICommands+0x18>)
 800a19c:	f004 fcca 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StreamCommandDefinition );
 800a1a0:	4804      	ldr	r0, [pc, #16]	; (800a1b4 <RegisterModuleCLICommands+0x1c>)
 800a1a2:	f004 fcc7 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StopCommandDefinition);
 800a1a6:	4804      	ldr	r0, [pc, #16]	; (800a1b8 <RegisterModuleCLICommands+0x20>)
 800a1a8:	f004 fcc4 	bl	800eb34 <FreeRTOS_CLIRegisterCommand>
}
 800a1ac:	bd10      	pop	{r4, pc}
 800a1ae:	46c0      	nop			; (mov r8, r8)
 800a1b0:	0801bb4c 	.word	0x0801bb4c
 800a1b4:	0801bc10 	.word	0x0801bc10
 800a1b8:	0801bbe0 	.word	0x0801bbe0

0800a1bc <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800a1bc:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800a1be:	f004 fa71 	bl	800e6a4 <GetUart>
 800a1c2:	0004      	movs	r4, r0
	huart->Init.BaudRate =57600;
 800a1c4:	23e1      	movs	r3, #225	; 0xe1
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800a1ca:	2380      	movs	r3, #128	; 0x80
 800a1cc:	00db      	lsls	r3, r3, #3
 800a1ce:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	015b      	lsls	r3, r3, #5
 800a1d4:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 800a1d6:	f009 fe6b 	bl	8013eb0 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800a1da:	6822      	ldr	r2, [r4, #0]
 800a1dc:	6813      	ldr	r3, [r2, #0]
 800a1de:	2120      	movs	r1, #32
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	6013      	str	r3, [r2, #0]
}
 800a1e4:	bd10      	pop	{r4, pc}
	...

0800a1e8 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 800a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	0007      	movs	r7, r0
 800a1ee:	000e      	movs	r6, r1
 800a1f0:	0015      	movs	r5, r2
 800a1f2:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 800a1f4:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <remoteBootloaderUpdate+0xbc>)
 800a1f6:	7818      	ldrb	r0, [r3, #0]
 800a1f8:	f7f9 fc8e 	bl	8003b18 <FindRoute>
 800a1fc:	9005      	str	r0, [sp, #20]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 800a1fe:	2c00      	cmp	r4, #0
 800a200:	d035      	beq.n	800a26e <remoteBootloaderUpdate+0x86>
 800a202:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <remoteBootloaderUpdate+0xbc>)
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	42b3      	cmp	r3, r6
 800a208:	d024      	beq.n	800a254 <remoteBootloaderUpdate+0x6c>
	if(src == myID){
 800a20a:	4b26      	ldr	r3, [pc, #152]	; (800a2a4 <remoteBootloaderUpdate+0xbc>)
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	42bb      	cmp	r3, r7
 800a210:	d131      	bne.n	800a276 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a212:	f004 fd25 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 800a216:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 800a218:	4b23      	ldr	r3, [pc, #140]	; (800a2a8 <remoteBootloaderUpdate+0xc0>)
 800a21a:	6819      	ldr	r1, [r3, #0]
 800a21c:	0023      	movs	r3, r4
 800a21e:	0032      	movs	r2, r6
 800a220:	0038      	movs	r0, r7
 800a222:	f00a fc69 	bl	8014af8 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 800a226:	4b21      	ldr	r3, [pc, #132]	; (800a2ac <remoteBootloaderUpdate+0xc4>)
 800a228:	6819      	ldr	r1, [r3, #0]
 800a22a:	0038      	movs	r0, r7
 800a22c:	f00a fc84 	bl	8014b38 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 800a230:	0038      	movs	r0, r7
 800a232:	f7f5 ff71 	bl	8000118 <strlen>
 800a236:	b282      	uxth	r2, r0
 800a238:	2332      	movs	r3, #50	; 0x32
 800a23a:	0039      	movs	r1, r7
 800a23c:	0028      	movs	r0, r5
 800a23e:	f004 fa7b 	bl	800e738 <writePxITMutex>
		Delay_ms(100);
 800a242:	2064      	movs	r0, #100	; 0x64
 800a244:	f006 fb4c 	bl	80108e0 <HAL_Delay>
 800a248:	e015      	b.n	800a276 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a24a:	f004 fd09 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 800a24e:	0007      	movs	r7, r0
		myOutport =outport;
 800a250:	9405      	str	r4, [sp, #20]
 800a252:	e7e1      	b.n	800a218 <remoteBootloaderUpdate+0x30>
	if(src == myID){
 800a254:	42bb      	cmp	r3, r7
 800a256:	d0f8      	beq.n	800a24a <remoteBootloaderUpdate+0x62>
		myOutport =outport;
 800a258:	9405      	str	r4, [sp, #20]
 800a25a:	e00c      	b.n	800a276 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a25c:	f004 fd00 	bl	800ec60 <FreeRTOS_CLIGetOutputBuffer>
 800a260:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 800a262:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <remoteBootloaderUpdate+0xc8>)
 800a264:	6819      	ldr	r1, [r3, #0]
 800a266:	0032      	movs	r2, r6
 800a268:	f00a fc46 	bl	8014af8 <sprintf>
 800a26c:	e7db      	b.n	800a226 <remoteBootloaderUpdate+0x3e>
	if(src == myID){
 800a26e:	4b0d      	ldr	r3, [pc, #52]	; (800a2a4 <remoteBootloaderUpdate+0xbc>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	42bb      	cmp	r3, r7
 800a274:	d0f2      	beq.n	800a25c <remoteBootloaderUpdate+0x74>
	SetupPortForRemoteBootloaderUpdate(inport);
 800a276:	0028      	movs	r0, r5
 800a278:	f7ff ffa0 	bl	800a1bc <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800a27c:	9c05      	ldr	r4, [sp, #20]
 800a27e:	0020      	movs	r0, r4
 800a280:	f7ff ff9c 	bl	800a1bc <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 800a284:	4b07      	ldr	r3, [pc, #28]	; (800a2a4 <remoteBootloaderUpdate+0xbc>)
 800a286:	7819      	ldrb	r1, [r3, #0]
 800a288:	2300      	movs	r3, #0
 800a28a:	9303      	str	r3, [sp, #12]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	9302      	str	r3, [sp, #8]
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	3303      	adds	r3, #3
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	000b      	movs	r3, r1
 800a298:	0022      	movs	r2, r4
 800a29a:	0028      	movs	r0, r5
 800a29c:	f7fd ff86 	bl	80081ac <StartScastDMAStream>
}
 800a2a0:	b007      	add	sp, #28
 800a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a4:	200010ea 	.word	0x200010ea
 800a2a8:	200000a0 	.word	0x200000a0
 800a2ac:	200000a4 	.word	0x200000a4
 800a2b0:	2000009c 	.word	0x2000009c

0800a2b4 <APDS9950_init>:
{
 800a2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2b6:	46c6      	mov	lr, r8
 800a2b8:	b500      	push	{lr}
	CONTROL = 0x0F;
 800a2ba:	4d1c      	ldr	r5, [pc, #112]	; (800a32c <APDS9950_init+0x78>)
 800a2bc:	230f      	movs	r3, #15
 800a2be:	702b      	strb	r3, [r5, #0]
	Enable = 0x00;
 800a2c0:	4c1b      	ldr	r4, [pc, #108]	; (800a330 <APDS9950_init+0x7c>)
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	7023      	strb	r3, [r4, #0]
	ATIME  = 0x01;
 800a2c6:	4b1b      	ldr	r3, [pc, #108]	; (800a334 <APDS9950_init+0x80>)
 800a2c8:	4698      	mov	r8, r3
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	4642      	mov	r2, r8
 800a2ce:	7013      	strb	r3, [r2, #0]
	WTIME  = 0x03;
 800a2d0:	4f19      	ldr	r7, [pc, #100]	; (800a338 <APDS9950_init+0x84>)
 800a2d2:	3302      	adds	r3, #2
 800a2d4:	703b      	strb	r3, [r7, #0]
	PPULSE = 0x0E;
 800a2d6:	4e19      	ldr	r6, [pc, #100]	; (800a33c <APDS9950_init+0x88>)
 800a2d8:	330b      	adds	r3, #11
 800a2da:	7033      	strb	r3, [r6, #0]
	redReg = 0x16;
 800a2dc:	4b18      	ldr	r3, [pc, #96]	; (800a340 <APDS9950_init+0x8c>)
 800a2de:	2216      	movs	r2, #22
 800a2e0:	701a      	strb	r2, [r3, #0]
	greenReg = 0x18;
 800a2e2:	4b18      	ldr	r3, [pc, #96]	; (800a344 <APDS9950_init+0x90>)
 800a2e4:	3202      	adds	r2, #2
 800a2e6:	701a      	strb	r2, [r3, #0]
    blueReg = 0x1A;
 800a2e8:	4b17      	ldr	r3, [pc, #92]	; (800a348 <APDS9950_init+0x94>)
 800a2ea:	3202      	adds	r2, #2
 800a2ec:	701a      	strb	r2, [r3, #0]
    distanceReg = 0x1C;
 800a2ee:	4b17      	ldr	r3, [pc, #92]	; (800a34c <APDS9950_init+0x98>)
 800a2f0:	3202      	adds	r2, #2
 800a2f2:	701a      	strb	r2, [r3, #0]
    WriteRegData (Enable,0x00);
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	2000      	movs	r0, #0
 800a2f8:	f002 fd30 	bl	800cd5c <WriteRegData>
    WriteRegData (ATIME,0x00);
 800a2fc:	4643      	mov	r3, r8
 800a2fe:	7818      	ldrb	r0, [r3, #0]
 800a300:	2100      	movs	r1, #0
 800a302:	f002 fd2b 	bl	800cd5c <WriteRegData>
    WriteRegData (WTIME,0xff);
 800a306:	7838      	ldrb	r0, [r7, #0]
 800a308:	21ff      	movs	r1, #255	; 0xff
 800a30a:	f002 fd27 	bl	800cd5c <WriteRegData>
    WriteRegData (PPULSE,0x01);
 800a30e:	7830      	ldrb	r0, [r6, #0]
 800a310:	2101      	movs	r1, #1
 800a312:	f002 fd23 	bl	800cd5c <WriteRegData>
    WriteRegData (CONTROL, 0x20);
 800a316:	7828      	ldrb	r0, [r5, #0]
 800a318:	2120      	movs	r1, #32
 800a31a:	f002 fd1f 	bl	800cd5c <WriteRegData>
    WriteRegData (Enable, 0x0F);
 800a31e:	7820      	ldrb	r0, [r4, #0]
 800a320:	210f      	movs	r1, #15
 800a322:	f002 fd1b 	bl	800cd5c <WriteRegData>
}
 800a326:	bc04      	pop	{r2}
 800a328:	4690      	mov	r8, r2
 800a32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a32c:	2000711e 	.word	0x2000711e
 800a330:	2000709e 	.word	0x2000709e
 800a334:	20007025 	.word	0x20007025
 800a338:	20007024 	.word	0x20007024
 800a33c:	2000709c 	.word	0x2000709c
 800a340:	2000709d 	.word	0x2000709d
 800a344:	20007026 	.word	0x20007026
 800a348:	20007028 	.word	0x20007028
 800a34c:	20007208 	.word	0x20007208

0800a350 <Module_Peripheral_Init>:
{
 800a350:	b510      	push	{r4, lr}
	MX_USART2_UART_Init();
 800a352:	f003 fff7 	bl	800e344 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a356:	f004 f80d 	bl	800e374 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800a35a:	f004 f823 	bl	800e3a4 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800a35e:	f004 f839 	bl	800e3d4 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800a362:	f004 f84f 	bl	800e404 <MX_USART6_UART_Init>
	SENSORS_GPIO_Init();
 800a366:	f002 fb93 	bl	800ca90 <SENSORS_GPIO_Init>
	MX_I2C_Init();
 800a36a:	f002 fcc1 	bl	800ccf0 <MX_I2C_Init>
	APDS9950_init();
 800a36e:	f7ff ffa1 	bl	800a2b4 <APDS9950_init>
}
 800a372:	bd10      	pop	{r4, pc}

0800a374 <SampleColor>:
{
 800a374:	b570      	push	{r4, r5, r6, lr}
 800a376:	0006      	movs	r6, r0
 800a378:	000d      	movs	r5, r1
 800a37a:	0014      	movs	r4, r2
	*Red = Read_Word(redReg);
 800a37c:	4b07      	ldr	r3, [pc, #28]	; (800a39c <SampleColor+0x28>)
 800a37e:	7818      	ldrb	r0, [r3, #0]
 800a380:	f002 fd02 	bl	800cd88 <Read_Word>
 800a384:	8030      	strh	r0, [r6, #0]
	*Green = Read_Word(greenReg);
 800a386:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <SampleColor+0x2c>)
 800a388:	7818      	ldrb	r0, [r3, #0]
 800a38a:	f002 fcfd 	bl	800cd88 <Read_Word>
 800a38e:	8028      	strh	r0, [r5, #0]
	*Blue = Read_Word(blueReg);
 800a390:	4b04      	ldr	r3, [pc, #16]	; (800a3a4 <SampleColor+0x30>)
 800a392:	7818      	ldrb	r0, [r3, #0]
 800a394:	f002 fcf8 	bl	800cd88 <Read_Word>
 800a398:	8020      	strh	r0, [r4, #0]
}
 800a39a:	bd70      	pop	{r4, r5, r6, pc}
 800a39c:	2000709d 	.word	0x2000709d
 800a3a0:	20007026 	.word	0x20007026
 800a3a4:	20007028 	.word	0x20007028

0800a3a8 <SampleColorBuf>:
{
 800a3a8:	b510      	push	{r4, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	0004      	movs	r4, r0
	SampleColor(rgb,rgb+1,rgb+2);
 800a3ae:	aa01      	add	r2, sp, #4
 800a3b0:	466b      	mov	r3, sp
 800a3b2:	1c99      	adds	r1, r3, #2
 800a3b4:	4668      	mov	r0, sp
 800a3b6:	f7ff ffdd 	bl	800a374 <SampleColor>
	buffer[0]=rgb[0];
 800a3ba:	466b      	mov	r3, sp
 800a3bc:	8818      	ldrh	r0, [r3, #0]
 800a3be:	f7f6 fdd3 	bl	8000f68 <__aeabi_ui2f>
 800a3c2:	6020      	str	r0, [r4, #0]
	buffer[1]=rgb[1];
 800a3c4:	466b      	mov	r3, sp
 800a3c6:	8858      	ldrh	r0, [r3, #2]
 800a3c8:	f7f6 fdce 	bl	8000f68 <__aeabi_ui2f>
 800a3cc:	6060      	str	r0, [r4, #4]
	buffer[2]=rgb[2];
 800a3ce:	466b      	mov	r3, sp
 800a3d0:	8898      	ldrh	r0, [r3, #4]
 800a3d2:	f7f6 fdc9 	bl	8000f68 <__aeabi_ui2f>
 800a3d6:	60a0      	str	r0, [r4, #8]
}
 800a3d8:	b002      	add	sp, #8
 800a3da:	bd10      	pop	{r4, pc}

0800a3dc <SampleColorToPort>:
{
 800a3dc:	b530      	push	{r4, r5, lr}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	0004      	movs	r4, r0
 800a3e2:	000d      	movs	r5, r1
	SampleColorBuf(buffer);
 800a3e4:	a801      	add	r0, sp, #4
 800a3e6:	f7ff ffdf 	bl	800a3a8 <SampleColorBuf>
	if(module == myID){
 800a3ea:	4b23      	ldr	r3, [pc, #140]	; (800a478 <SampleColorToPort+0x9c>)
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	42ab      	cmp	r3, r5
 800a3f0:	d021      	beq.n	800a436 <SampleColorToPort+0x5a>
		messageParams[0] =port;
 800a3f2:	4b22      	ldr	r3, [pc, #136]	; (800a47c <SampleColorToPort+0xa0>)
 800a3f4:	701c      	strb	r4, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a3f6:	aa01      	add	r2, sp, #4
 800a3f8:	78d1      	ldrb	r1, [r2, #3]
 800a3fa:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a3fc:	7891      	ldrb	r1, [r2, #2]
 800a3fe:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a400:	7851      	ldrb	r1, [r2, #1]
 800a402:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a404:	7811      	ldrb	r1, [r2, #0]
 800a406:	7119      	strb	r1, [r3, #4]
		messageParams[5] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800a408:	79d1      	ldrb	r1, [r2, #7]
 800a40a:	7159      	strb	r1, [r3, #5]
		messageParams[6] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800a40c:	7991      	ldrb	r1, [r2, #6]
 800a40e:	7199      	strb	r1, [r3, #6]
		messageParams[7] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800a410:	7951      	ldrb	r1, [r2, #5]
 800a412:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800a414:	7911      	ldrb	r1, [r2, #4]
 800a416:	7219      	strb	r1, [r3, #8]
		messageParams[9] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800a418:	7ad1      	ldrb	r1, [r2, #11]
 800a41a:	7259      	strb	r1, [r3, #9]
		messageParams[10] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800a41c:	7a91      	ldrb	r1, [r2, #10]
 800a41e:	7299      	strb	r1, [r3, #10]
		messageParams[11] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800a420:	7a51      	ldrb	r1, [r2, #9]
 800a422:	72d9      	strb	r1, [r3, #11]
		messageParams[12] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800a424:	7a12      	ldrb	r2, [r2, #8]
 800a426:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800a428:	220d      	movs	r2, #13
 800a42a:	2123      	movs	r1, #35	; 0x23
 800a42c:	0028      	movs	r0, r5
 800a42e:	f7fd fe97 	bl	8008160 <SendMessageToModule>
}
 800a432:	b005      	add	sp, #20
 800a434:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a436:	ab01      	add	r3, sp, #4
 800a438:	78da      	ldrb	r2, [r3, #3]
 800a43a:	4911      	ldr	r1, [pc, #68]	; (800a480 <SampleColorToPort+0xa4>)
 800a43c:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a43e:	789a      	ldrb	r2, [r3, #2]
 800a440:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a442:	785a      	ldrb	r2, [r3, #1]
 800a444:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a446:	781a      	ldrb	r2, [r3, #0]
 800a448:	70ca      	strb	r2, [r1, #3]
		temp[4] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800a44a:	79da      	ldrb	r2, [r3, #7]
 800a44c:	710a      	strb	r2, [r1, #4]
		temp[5] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800a44e:	799a      	ldrb	r2, [r3, #6]
 800a450:	714a      	strb	r2, [r1, #5]
		temp[6] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800a452:	795a      	ldrb	r2, [r3, #5]
 800a454:	718a      	strb	r2, [r1, #6]
		temp[7] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800a456:	791a      	ldrb	r2, [r3, #4]
 800a458:	71ca      	strb	r2, [r1, #7]
		temp[8] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800a45a:	7ada      	ldrb	r2, [r3, #11]
 800a45c:	720a      	strb	r2, [r1, #8]
		temp[9] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800a45e:	7a9a      	ldrb	r2, [r3, #10]
 800a460:	724a      	strb	r2, [r1, #9]
		temp[10] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800a462:	7a5a      	ldrb	r2, [r3, #9]
 800a464:	728a      	strb	r2, [r1, #10]
		temp[11] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800a466:	7a1b      	ldrb	r3, [r3, #8]
 800a468:	72cb      	strb	r3, [r1, #11]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800a46a:	230a      	movs	r3, #10
 800a46c:	220c      	movs	r2, #12
 800a46e:	0020      	movs	r0, r4
 800a470:	f004 f962 	bl	800e738 <writePxITMutex>
 800a474:	e7dd      	b.n	800a432 <SampleColorToPort+0x56>
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	200010ea 	.word	0x200010ea
 800a47c:	20000fac 	.word	0x20000fac
 800a480:	20001b5c 	.word	0x20001b5c

0800a484 <SampleColorToString>:
{
 800a484:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a486:	b087      	sub	sp, #28
 800a488:	9003      	str	r0, [sp, #12]
 800a48a:	000f      	movs	r7, r1
	uint16_t red = 0, green = 0, blue = 0;
 800a48c:	260e      	movs	r6, #14
 800a48e:	ab02      	add	r3, sp, #8
 800a490:	469c      	mov	ip, r3
 800a492:	4466      	add	r6, ip
 800a494:	2300      	movs	r3, #0
 800a496:	8033      	strh	r3, [r6, #0]
 800a498:	ad05      	add	r5, sp, #20
 800a49a:	802b      	strh	r3, [r5, #0]
 800a49c:	240a      	movs	r4, #10
 800a49e:	4464      	add	r4, ip
 800a4a0:	8023      	strh	r3, [r4, #0]
	SampleColor(&red, &green, &blue);
 800a4a2:	0022      	movs	r2, r4
 800a4a4:	0029      	movs	r1, r5
 800a4a6:	0030      	movs	r0, r6
 800a4a8:	f7ff ff64 	bl	800a374 <SampleColor>
	Red=red;
 800a4ac:	8833      	ldrh	r3, [r6, #0]
 800a4ae:	4a07      	ldr	r2, [pc, #28]	; (800a4cc <SampleColorToString+0x48>)
 800a4b0:	8013      	strh	r3, [r2, #0]
	Green=green;
 800a4b2:	8829      	ldrh	r1, [r5, #0]
 800a4b4:	8051      	strh	r1, [r2, #2]
	Blue=blue;
 800a4b6:	8820      	ldrh	r0, [r4, #0]
 800a4b8:	8090      	strh	r0, [r2, #4]
	snprintf(cstring, maxLen, "Red: %d, Green: %d, Blue: %d\r\n", red, green, blue);
 800a4ba:	9001      	str	r0, [sp, #4]
 800a4bc:	9100      	str	r1, [sp, #0]
 800a4be:	4a04      	ldr	r2, [pc, #16]	; (800a4d0 <SampleColorToString+0x4c>)
 800a4c0:	0039      	movs	r1, r7
 800a4c2:	9803      	ldr	r0, [sp, #12]
 800a4c4:	f00a fae6 	bl	8014a94 <snprintf>
}
 800a4c8:	b007      	add	sp, #28
 800a4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4cc:	20000008 	.word	0x20000008
 800a4d0:	0801bb2c 	.word	0x0801bb2c

0800a4d4 <SampleDistance>:
{
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	0004      	movs	r4, r0
	*distance = Read_Word(distanceReg)/6.39;
 800a4d8:	4b06      	ldr	r3, [pc, #24]	; (800a4f4 <SampleDistance+0x20>)
 800a4da:	7818      	ldrb	r0, [r3, #0]
 800a4dc:	f002 fc54 	bl	800cd88 <Read_Word>
 800a4e0:	f7f8 fab4 	bl	8002a4c <__aeabi_i2d>
 800a4e4:	4a04      	ldr	r2, [pc, #16]	; (800a4f8 <SampleDistance+0x24>)
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <SampleDistance+0x28>)
 800a4e8:	f7f7 f89a 	bl	8001620 <__aeabi_ddiv>
 800a4ec:	f7f6 f880 	bl	80005f0 <__aeabi_d2uiz>
 800a4f0:	8020      	strh	r0, [r4, #0]
}
 800a4f2:	bd10      	pop	{r4, pc}
 800a4f4:	20007208 	.word	0x20007208
 800a4f8:	28f5c28f 	.word	0x28f5c28f
 800a4fc:	40198f5c 	.word	0x40198f5c

0800a500 <SampleDistanceBuff>:
{
 800a500:	b530      	push	{r4, r5, lr}
 800a502:	b083      	sub	sp, #12
 800a504:	0005      	movs	r5, r0
	SampleDistance(&distance);
 800a506:	466b      	mov	r3, sp
 800a508:	1d9c      	adds	r4, r3, #6
 800a50a:	0020      	movs	r0, r4
 800a50c:	f7ff ffe2 	bl	800a4d4 <SampleDistance>
	*buffer = distance;
 800a510:	8820      	ldrh	r0, [r4, #0]
 800a512:	f7f6 fd29 	bl	8000f68 <__aeabi_ui2f>
 800a516:	6028      	str	r0, [r5, #0]
}
 800a518:	b003      	add	sp, #12
 800a51a:	bd30      	pop	{r4, r5, pc}

0800a51c <SampleDistanceToPort>:
{
 800a51c:	b530      	push	{r4, r5, lr}
 800a51e:	b083      	sub	sp, #12
 800a520:	0005      	movs	r5, r0
 800a522:	000c      	movs	r4, r1
	SampleDistanceBuff(buffer);
 800a524:	a801      	add	r0, sp, #4
 800a526:	f7ff ffeb 	bl	800a500 <SampleDistanceBuff>
	if(module == myID){
 800a52a:	4b13      	ldr	r3, [pc, #76]	; (800a578 <SampleDistanceToPort+0x5c>)
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	42a3      	cmp	r3, r4
 800a530:	d011      	beq.n	800a556 <SampleDistanceToPort+0x3a>
		messageParams[0] =port;
 800a532:	4b12      	ldr	r3, [pc, #72]	; (800a57c <SampleDistanceToPort+0x60>)
 800a534:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a536:	aa01      	add	r2, sp, #4
 800a538:	78d1      	ldrb	r1, [r2, #3]
 800a53a:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a53c:	7891      	ldrb	r1, [r2, #2]
 800a53e:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a540:	7851      	ldrb	r1, [r2, #1]
 800a542:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a544:	7812      	ldrb	r2, [r2, #0]
 800a546:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800a548:	2205      	movs	r2, #5
 800a54a:	2123      	movs	r1, #35	; 0x23
 800a54c:	0020      	movs	r0, r4
 800a54e:	f7fd fe07 	bl	8008160 <SendMessageToModule>
}
 800a552:	b003      	add	sp, #12
 800a554:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a556:	ab01      	add	r3, sp, #4
 800a558:	78da      	ldrb	r2, [r3, #3]
 800a55a:	4909      	ldr	r1, [pc, #36]	; (800a580 <SampleDistanceToPort+0x64>)
 800a55c:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a55e:	789a      	ldrb	r2, [r3, #2]
 800a560:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a562:	785a      	ldrb	r2, [r3, #1]
 800a564:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800a56a:	230a      	movs	r3, #10
 800a56c:	2204      	movs	r2, #4
 800a56e:	0028      	movs	r0, r5
 800a570:	f004 f8e2 	bl	800e738 <writePxITMutex>
 800a574:	e7ed      	b.n	800a552 <SampleDistanceToPort+0x36>
 800a576:	46c0      	nop			; (mov r8, r8)
 800a578:	200010ea 	.word	0x200010ea
 800a57c:	20000fac 	.word	0x20000fac
 800a580:	20001b68 	.word	0x20001b68

0800a584 <SampleDistanceToString>:
{
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	0005      	movs	r5, r0
 800a58a:	000e      	movs	r6, r1
	uint16_t distance = 0;
 800a58c:	466b      	mov	r3, sp
 800a58e:	1d9c      	adds	r4, r3, #6
 800a590:	2300      	movs	r3, #0
 800a592:	8023      	strh	r3, [r4, #0]
	SampleDistance(&distance);
 800a594:	0020      	movs	r0, r4
 800a596:	f7ff ff9d 	bl	800a4d4 <SampleDistance>
	distance1=distance;
 800a59a:	8823      	ldrh	r3, [r4, #0]
 800a59c:	4a04      	ldr	r2, [pc, #16]	; (800a5b0 <SampleDistanceToString+0x2c>)
 800a59e:	80d3      	strh	r3, [r2, #6]
	snprintf(cstring, maxLen, "Distance: %d\r\n", distance);
 800a5a0:	4a04      	ldr	r2, [pc, #16]	; (800a5b4 <SampleDistanceToString+0x30>)
 800a5a2:	0031      	movs	r1, r6
 800a5a4:	0028      	movs	r0, r5
 800a5a6:	f00a fa75 	bl	8014a94 <snprintf>
}
 800a5aa:	b002      	add	sp, #8
 800a5ac:	bd70      	pop	{r4, r5, r6, pc}
 800a5ae:	46c0      	nop			; (mov r8, r8)
 800a5b0:	20000008 	.word	0x20000008
 800a5b4:	0801bb5c 	.word	0x0801bb5c

0800a5b8 <SampleTemperature>:
{
 800a5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ba:	b083      	sub	sp, #12
 800a5bc:	0007      	movs	r7, r0
	buf[0] = tempReg;
 800a5be:	4c19      	ldr	r4, [pc, #100]	; (800a624 <SampleTemperature+0x6c>)
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800a5c4:	4d18      	ldr	r5, [pc, #96]	; (800a628 <SampleTemperature+0x70>)
 800a5c6:	2601      	movs	r6, #1
 800a5c8:	4276      	negs	r6, r6
 800a5ca:	9600      	str	r6, [sp, #0]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	0022      	movs	r2, r4
 800a5d0:	2180      	movs	r1, #128	; 0x80
 800a5d2:	0028      	movs	r0, r5
 800a5d4:	f007 fefe 	bl	80123d4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800a5d8:	2014      	movs	r0, #20
 800a5da:	f006 f981 	bl	80108e0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800a5de:	9600      	str	r6, [sp, #0]
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	0022      	movs	r2, r4
 800a5e4:	2180      	movs	r1, #128	; 0x80
 800a5e6:	0028      	movs	r0, r5
 800a5e8:	f007 ff98 	bl	801251c <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800a5ec:	7823      	ldrb	r3, [r4, #0]
 800a5ee:	021b      	lsls	r3, r3, #8
 800a5f0:	7860      	ldrb	r0, [r4, #1]
 800a5f2:	4318      	orrs	r0, r3
 800a5f4:	4b0d      	ldr	r3, [pc, #52]	; (800a62c <SampleTemperature+0x74>)
 800a5f6:	8018      	strh	r0, [r3, #0]
	*temperature=((float)val/65536)*165.0-40.0;
 800a5f8:	f7f6 fcb6 	bl	8000f68 <__aeabi_ui2f>
 800a5fc:	21de      	movs	r1, #222	; 0xde
 800a5fe:	0589      	lsls	r1, r1, #22
 800a600:	f7f6 f99c 	bl	800093c <__aeabi_fmul>
 800a604:	f7f8 fa8e 	bl	8002b24 <__aeabi_f2d>
 800a608:	2200      	movs	r2, #0
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <SampleTemperature+0x78>)
 800a60c:	f7f7 fc12 	bl	8001e34 <__aeabi_dmul>
 800a610:	2200      	movs	r2, #0
 800a612:	4b08      	ldr	r3, [pc, #32]	; (800a634 <SampleTemperature+0x7c>)
 800a614:	f7f7 fe80 	bl	8002318 <__aeabi_dsub>
 800a618:	f7f8 fad6 	bl	8002bc8 <__aeabi_d2f>
 800a61c:	6038      	str	r0, [r7, #0]
}
 800a61e:	b003      	add	sp, #12
 800a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a622:	46c0      	nop			; (mov r8, r8)
 800a624:	20007114 	.word	0x20007114
 800a628:	20007230 	.word	0x20007230
 800a62c:	2000702a 	.word	0x2000702a
 800a630:	4064a000 	.word	0x4064a000
 800a634:	40440000 	.word	0x40440000

0800a638 <SampleTemperatureToString>:
{
 800a638:	b530      	push	{r4, r5, lr}
 800a63a:	b085      	sub	sp, #20
 800a63c:	0004      	movs	r4, r0
 800a63e:	000d      	movs	r5, r1
	float temprature = 0;
 800a640:	2300      	movs	r3, #0
 800a642:	9303      	str	r3, [sp, #12]
	SampleTemperature(&temprature);
 800a644:	a803      	add	r0, sp, #12
 800a646:	f7ff ffb7 	bl	800a5b8 <SampleTemperature>
	temp=temprature;
 800a64a:	4b07      	ldr	r3, [pc, #28]	; (800a668 <SampleTemperatureToString+0x30>)
 800a64c:	9a03      	ldr	r2, [sp, #12]
 800a64e:	609a      	str	r2, [r3, #8]
	snprintf(cstring, maxLen, "Temperature: %.2f\r\n", temprature);
 800a650:	1c10      	adds	r0, r2, #0
 800a652:	f7f8 fa67 	bl	8002b24 <__aeabi_f2d>
 800a656:	9000      	str	r0, [sp, #0]
 800a658:	9101      	str	r1, [sp, #4]
 800a65a:	4a04      	ldr	r2, [pc, #16]	; (800a66c <SampleTemperatureToString+0x34>)
 800a65c:	0029      	movs	r1, r5
 800a65e:	0020      	movs	r0, r4
 800a660:	f00a fa18 	bl	8014a94 <snprintf>
}
 800a664:	b005      	add	sp, #20
 800a666:	bd30      	pop	{r4, r5, pc}
 800a668:	20000008 	.word	0x20000008
 800a66c:	0801bbcc 	.word	0x0801bbcc

0800a670 <SampleTemperatureToPort>:
{
 800a670:	b530      	push	{r4, r5, lr}
 800a672:	b083      	sub	sp, #12
 800a674:	0005      	movs	r5, r0
 800a676:	000c      	movs	r4, r1
	SampleTemperature(buffer);
 800a678:	a801      	add	r0, sp, #4
 800a67a:	f7ff ff9d 	bl	800a5b8 <SampleTemperature>
	if(module == myID){
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <SampleTemperatureToPort+0x5c>)
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	42a3      	cmp	r3, r4
 800a684:	d011      	beq.n	800a6aa <SampleTemperatureToPort+0x3a>
		messageParams[0] =port;
 800a686:	4b12      	ldr	r3, [pc, #72]	; (800a6d0 <SampleTemperatureToPort+0x60>)
 800a688:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a68a:	aa01      	add	r2, sp, #4
 800a68c:	78d1      	ldrb	r1, [r2, #3]
 800a68e:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a690:	7891      	ldrb	r1, [r2, #2]
 800a692:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a694:	7851      	ldrb	r1, [r2, #1]
 800a696:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a698:	7812      	ldrb	r2, [r2, #0]
 800a69a:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800a69c:	2205      	movs	r2, #5
 800a69e:	2123      	movs	r1, #35	; 0x23
 800a6a0:	0020      	movs	r0, r4
 800a6a2:	f7fd fd5d 	bl	8008160 <SendMessageToModule>
}
 800a6a6:	b003      	add	sp, #12
 800a6a8:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a6aa:	ab01      	add	r3, sp, #4
 800a6ac:	78da      	ldrb	r2, [r3, #3]
 800a6ae:	4909      	ldr	r1, [pc, #36]	; (800a6d4 <SampleTemperatureToPort+0x64>)
 800a6b0:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a6b2:	789a      	ldrb	r2, [r3, #2]
 800a6b4:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a6b6:	785a      	ldrb	r2, [r3, #1]
 800a6b8:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800a6be:	230a      	movs	r3, #10
 800a6c0:	2204      	movs	r2, #4
 800a6c2:	0028      	movs	r0, r5
 800a6c4:	f004 f838 	bl	800e738 <writePxITMutex>
 800a6c8:	e7ed      	b.n	800a6a6 <SampleTemperatureToPort+0x36>
 800a6ca:	46c0      	nop			; (mov r8, r8)
 800a6cc:	200010ea 	.word	0x200010ea
 800a6d0:	20000fac 	.word	0x20000fac
 800a6d4:	20001b6c 	.word	0x20001b6c

0800a6d8 <SampleHumidity>:
{
 800a6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	0007      	movs	r7, r0
	buf[0] = humidityReg;
 800a6de:	4c14      	ldr	r4, [pc, #80]	; (800a730 <SampleHumidity+0x58>)
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800a6e4:	4d13      	ldr	r5, [pc, #76]	; (800a734 <SampleHumidity+0x5c>)
 800a6e6:	2601      	movs	r6, #1
 800a6e8:	4276      	negs	r6, r6
 800a6ea:	9600      	str	r6, [sp, #0]
 800a6ec:	0022      	movs	r2, r4
 800a6ee:	2180      	movs	r1, #128	; 0x80
 800a6f0:	0028      	movs	r0, r5
 800a6f2:	f007 fe6f 	bl	80123d4 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800a6f6:	2014      	movs	r0, #20
 800a6f8:	f006 f8f2 	bl	80108e0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800a6fc:	9600      	str	r6, [sp, #0]
 800a6fe:	2302      	movs	r3, #2
 800a700:	0022      	movs	r2, r4
 800a702:	2180      	movs	r1, #128	; 0x80
 800a704:	0028      	movs	r0, r5
 800a706:	f007 ff09 	bl	801251c <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800a70a:	7823      	ldrb	r3, [r4, #0]
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	7860      	ldrb	r0, [r4, #1]
 800a710:	4318      	orrs	r0, r3
 800a712:	4b09      	ldr	r3, [pc, #36]	; (800a738 <SampleHumidity+0x60>)
 800a714:	8018      	strh	r0, [r3, #0]
	*humidity = (((float)val*100)/65536);
 800a716:	f7f6 fc27 	bl	8000f68 <__aeabi_ui2f>
 800a71a:	4908      	ldr	r1, [pc, #32]	; (800a73c <SampleHumidity+0x64>)
 800a71c:	f7f6 f90e 	bl	800093c <__aeabi_fmul>
 800a720:	21de      	movs	r1, #222	; 0xde
 800a722:	0589      	lsls	r1, r1, #22
 800a724:	f7f6 f90a 	bl	800093c <__aeabi_fmul>
 800a728:	6038      	str	r0, [r7, #0]
}
 800a72a:	b003      	add	sp, #12
 800a72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a72e:	46c0      	nop			; (mov r8, r8)
 800a730:	20007114 	.word	0x20007114
 800a734:	20007230 	.word	0x20007230
 800a738:	2000702a 	.word	0x2000702a
 800a73c:	42c80000 	.word	0x42c80000

0800a740 <SampleHumidityToString>:
{
 800a740:	b530      	push	{r4, r5, lr}
 800a742:	b085      	sub	sp, #20
 800a744:	0004      	movs	r4, r0
 800a746:	000d      	movs	r5, r1
	float humidity = 0;
 800a748:	2300      	movs	r3, #0
 800a74a:	9303      	str	r3, [sp, #12]
	SampleHumidity(&humidity);
 800a74c:	a803      	add	r0, sp, #12
 800a74e:	f7ff ffc3 	bl	800a6d8 <SampleHumidity>
	hum=humidity;
 800a752:	4b07      	ldr	r3, [pc, #28]	; (800a770 <SampleHumidityToString+0x30>)
 800a754:	9a03      	ldr	r2, [sp, #12]
 800a756:	60da      	str	r2, [r3, #12]
	snprintf(cstring, maxLen, "Humidity: %.2f\r\n", humidity);
 800a758:	1c10      	adds	r0, r2, #0
 800a75a:	f7f8 f9e3 	bl	8002b24 <__aeabi_f2d>
 800a75e:	9000      	str	r0, [sp, #0]
 800a760:	9101      	str	r1, [sp, #4]
 800a762:	4a04      	ldr	r2, [pc, #16]	; (800a774 <SampleHumidityToString+0x34>)
 800a764:	0029      	movs	r1, r5
 800a766:	0020      	movs	r0, r4
 800a768:	f00a f994 	bl	8014a94 <snprintf>
}
 800a76c:	b005      	add	sp, #20
 800a76e:	bd30      	pop	{r4, r5, pc}
 800a770:	20000008 	.word	0x20000008
 800a774:	0801bb6c 	.word	0x0801bb6c

0800a778 <SampleHumidityToPort>:
{
 800a778:	b530      	push	{r4, r5, lr}
 800a77a:	b083      	sub	sp, #12
 800a77c:	0005      	movs	r5, r0
 800a77e:	000c      	movs	r4, r1
	SampleHumidity(buffer);
 800a780:	a801      	add	r0, sp, #4
 800a782:	f7ff ffa9 	bl	800a6d8 <SampleHumidity>
	if(module == myID){
 800a786:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <SampleHumidityToPort+0x5c>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	42a3      	cmp	r3, r4
 800a78c:	d011      	beq.n	800a7b2 <SampleHumidityToPort+0x3a>
		messageParams[0] =port;
 800a78e:	4b12      	ldr	r3, [pc, #72]	; (800a7d8 <SampleHumidityToPort+0x60>)
 800a790:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a792:	aa01      	add	r2, sp, #4
 800a794:	78d1      	ldrb	r1, [r2, #3]
 800a796:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a798:	7891      	ldrb	r1, [r2, #2]
 800a79a:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a79c:	7851      	ldrb	r1, [r2, #1]
 800a79e:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a7a0:	7812      	ldrb	r2, [r2, #0]
 800a7a2:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800a7a4:	2205      	movs	r2, #5
 800a7a6:	2123      	movs	r1, #35	; 0x23
 800a7a8:	0020      	movs	r0, r4
 800a7aa:	f7fd fcd9 	bl	8008160 <SendMessageToModule>
}
 800a7ae:	b003      	add	sp, #12
 800a7b0:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a7b2:	ab01      	add	r3, sp, #4
 800a7b4:	78da      	ldrb	r2, [r3, #3]
 800a7b6:	4909      	ldr	r1, [pc, #36]	; (800a7dc <SampleHumidityToPort+0x64>)
 800a7b8:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a7ba:	789a      	ldrb	r2, [r3, #2]
 800a7bc:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a7be:	785a      	ldrb	r2, [r3, #1]
 800a7c0:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800a7c6:	230a      	movs	r3, #10
 800a7c8:	2204      	movs	r2, #4
 800a7ca:	0028      	movs	r0, r5
 800a7cc:	f003 ffb4 	bl	800e738 <writePxITMutex>
 800a7d0:	e7ed      	b.n	800a7ae <SampleHumidityToPort+0x36>
 800a7d2:	46c0      	nop			; (mov r8, r8)
 800a7d4:	200010ea 	.word	0x200010ea
 800a7d8:	20000fac 	.word	0x20000fac
 800a7dc:	20001b70 	.word	0x20001b70

0800a7e0 <SamplePIR>:
{
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	0004      	movs	r4, r0
	*pir=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);/* USER CODE END WHILE */
 800a7e4:	2180      	movs	r1, #128	; 0x80
 800a7e6:	4803      	ldr	r0, [pc, #12]	; (800a7f4 <SamplePIR+0x14>)
 800a7e8:	f007 fc90 	bl	801210c <HAL_GPIO_ReadPin>
 800a7ec:	1e43      	subs	r3, r0, #1
 800a7ee:	4198      	sbcs	r0, r3
 800a7f0:	7020      	strb	r0, [r4, #0]
}
 800a7f2:	bd10      	pop	{r4, pc}
 800a7f4:	48000400 	.word	0x48000400

0800a7f8 <SamplePIRBuf>:
{
 800a7f8:	b530      	push	{r4, r5, lr}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	0005      	movs	r5, r0
    SamplePIR(&pir);
 800a7fe:	466b      	mov	r3, sp
 800a800:	1ddc      	adds	r4, r3, #7
 800a802:	0020      	movs	r0, r4
 800a804:	f7ff ffec 	bl	800a7e0 <SamplePIR>
    *buffer = pir;
 800a808:	7820      	ldrb	r0, [r4, #0]
 800a80a:	f7f6 fbad 	bl	8000f68 <__aeabi_ui2f>
 800a80e:	6028      	str	r0, [r5, #0]
}
 800a810:	b003      	add	sp, #12
 800a812:	bd30      	pop	{r4, r5, pc}

0800a814 <SamplePIRToPort>:
{
 800a814:	b570      	push	{r4, r5, r6, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	0006      	movs	r6, r0
 800a81a:	000c      	movs	r4, r1
	SamplePIRBuf(&buffer);
 800a81c:	a801      	add	r0, sp, #4
 800a81e:	f7ff ffeb 	bl	800a7f8 <SamplePIRBuf>
	if(module == myID){
 800a822:	4b10      	ldr	r3, [pc, #64]	; (800a864 <SamplePIRToPort+0x50>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	42a3      	cmp	r3, r4
 800a828:	d00c      	beq.n	800a844 <SamplePIRToPort+0x30>
		messageParams[0] =port;
 800a82a:	4d0f      	ldr	r5, [pc, #60]	; (800a868 <SamplePIRToPort+0x54>)
 800a82c:	702e      	strb	r6, [r5, #0]
		messageParams[1] =buffer;
 800a82e:	9801      	ldr	r0, [sp, #4]
 800a830:	f7f5 fec6 	bl	80005c0 <__aeabi_f2uiz>
 800a834:	7068      	strb	r0, [r5, #1]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(char)+1);
 800a836:	2202      	movs	r2, #2
 800a838:	2123      	movs	r1, #35	; 0x23
 800a83a:	0020      	movs	r0, r4
 800a83c:	f7fd fc90 	bl	8008160 <SendMessageToModule>
}
 800a840:	b002      	add	sp, #8
 800a842:	bd70      	pop	{r4, r5, r6, pc}
		temp = buffer;
 800a844:	2100      	movs	r1, #0
 800a846:	9801      	ldr	r0, [sp, #4]
 800a848:	f7f5 fe42 	bl	80004d0 <__aeabi_fcmpeq>
 800a84c:	4243      	negs	r3, r0
 800a84e:	4158      	adcs	r0, r3
 800a850:	466b      	mov	r3, sp
 800a852:	70d8      	strb	r0, [r3, #3]
		writePxITMutex(port,(char* )&temp,sizeof(bool),10);
 800a854:	230a      	movs	r3, #10
 800a856:	2201      	movs	r2, #1
 800a858:	4669      	mov	r1, sp
 800a85a:	3103      	adds	r1, #3
 800a85c:	0030      	movs	r0, r6
 800a85e:	f003 ff6b 	bl	800e738 <writePxITMutex>
 800a862:	e7ed      	b.n	800a840 <SamplePIRToPort+0x2c>
 800a864:	200010ea 	.word	0x200010ea
 800a868:	20000fac 	.word	0x20000fac

0800a86c <SamplePIRToString>:
{
 800a86c:	b570      	push	{r4, r5, r6, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	0005      	movs	r5, r0
 800a872:	000e      	movs	r6, r1
	SamplePIR(&sample);
 800a874:	466b      	mov	r3, sp
 800a876:	1ddc      	adds	r4, r3, #7
 800a878:	0020      	movs	r0, r4
 800a87a:	f7ff ffb1 	bl	800a7e0 <SamplePIR>
	Sample=sample;
 800a87e:	7823      	ldrb	r3, [r4, #0]
 800a880:	4a04      	ldr	r2, [pc, #16]	; (800a894 <SamplePIRToString+0x28>)
 800a882:	7413      	strb	r3, [r2, #16]
	snprintf(cstring, maxLen, "PIR: %d\r\n", sample);
 800a884:	4a04      	ldr	r2, [pc, #16]	; (800a898 <SamplePIRToString+0x2c>)
 800a886:	0031      	movs	r1, r6
 800a888:	0028      	movs	r0, r5
 800a88a:	f00a f903 	bl	8014a94 <snprintf>
}
 800a88e:	b002      	add	sp, #8
 800a890:	bd70      	pop	{r4, r5, r6, pc}
 800a892:	46c0      	nop			; (mov r8, r8)
 800a894:	20000008 	.word	0x20000008
 800a898:	0801bb80 	.word	0x0801bb80

0800a89c <SampleSensorCommand>:
{
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	0005      	movs	r5, r0
 800a8a2:	000e      	movs	r6, r1
 800a8a4:	0010      	movs	r0, r2
	portBASE_TYPE sensNameLen = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9301      	str	r3, [sp, #4]
	*pcWriteBuffer = '\0';
 800a8aa:	702b      	strb	r3, [r5, #0]
	pSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &sensNameLen);
 800a8ac:	aa01      	add	r2, sp, #4
 800a8ae:	2101      	movs	r1, #1
 800a8b0:	f004 f9da 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800a8b4:	1e04      	subs	r4, r0, #0
	if (pSensName == NULL) {
 800a8b6:	d027      	beq.n	800a908 <SampleSensorCommand+0x6c>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800a8b8:	2205      	movs	r2, #5
 800a8ba:	4924      	ldr	r1, [pc, #144]	; (800a94c <SampleSensorCommand+0xb0>)
 800a8bc:	f00a f960 	bl	8014b80 <strncmp>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d027      	beq.n	800a914 <SampleSensorCommand+0x78>
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	4922      	ldr	r1, [pc, #136]	; (800a950 <SampleSensorCommand+0xb4>)
 800a8c8:	0020      	movs	r0, r4
 800a8ca:	f00a f959 	bl	8014b80 <strncmp>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d027      	beq.n	800a922 <SampleSensorCommand+0x86>
		} else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800a8d2:	2204      	movs	r2, #4
 800a8d4:	491f      	ldr	r1, [pc, #124]	; (800a954 <SampleSensorCommand+0xb8>)
 800a8d6:	0020      	movs	r0, r4
 800a8d8:	f00a f952 	bl	8014b80 <strncmp>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d025      	beq.n	800a92c <SampleSensorCommand+0x90>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800a8e0:	2208      	movs	r2, #8
 800a8e2:	491d      	ldr	r1, [pc, #116]	; (800a958 <SampleSensorCommand+0xbc>)
 800a8e4:	0020      	movs	r0, r4
 800a8e6:	f00a f94b 	bl	8014b80 <strncmp>
 800a8ea:	2800      	cmp	r0, #0
 800a8ec:	d023      	beq.n	800a936 <SampleSensorCommand+0x9a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800a8ee:	2203      	movs	r2, #3
 800a8f0:	491a      	ldr	r1, [pc, #104]	; (800a95c <SampleSensorCommand+0xc0>)
 800a8f2:	0020      	movs	r0, r4
 800a8f4:	f00a f944 	bl	8014b80 <strncmp>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d021      	beq.n	800a940 <SampleSensorCommand+0xa4>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800a8fc:	4a18      	ldr	r2, [pc, #96]	; (800a960 <SampleSensorCommand+0xc4>)
 800a8fe:	0031      	movs	r1, r6
 800a900:	0028      	movs	r0, r5
 800a902:	f00a f8c7 	bl	8014a94 <snprintf>
 800a906:	e009      	b.n	800a91c <SampleSensorCommand+0x80>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800a908:	4a15      	ldr	r2, [pc, #84]	; (800a960 <SampleSensorCommand+0xc4>)
 800a90a:	0031      	movs	r1, r6
 800a90c:	0028      	movs	r0, r5
 800a90e:	f00a f8c1 	bl	8014a94 <snprintf>
		return pdFALSE;
 800a912:	e003      	b.n	800a91c <SampleSensorCommand+0x80>
			SampleColorToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a914:	0031      	movs	r1, r6
 800a916:	0028      	movs	r0, r5
 800a918:	f7ff fdb4 	bl	800a484 <SampleColorToString>
}
 800a91c:	2000      	movs	r0, #0
 800a91e:	b002      	add	sp, #8
 800a920:	bd70      	pop	{r4, r5, r6, pc}
			SampleDistanceToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a922:	0031      	movs	r1, r6
 800a924:	0028      	movs	r0, r5
 800a926:	f7ff fe2d 	bl	800a584 <SampleDistanceToString>
 800a92a:	e7f7      	b.n	800a91c <SampleSensorCommand+0x80>
			SampleTemperatureToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a92c:	0031      	movs	r1, r6
 800a92e:	0028      	movs	r0, r5
 800a930:	f7ff fe82 	bl	800a638 <SampleTemperatureToString>
 800a934:	e7f2      	b.n	800a91c <SampleSensorCommand+0x80>
			SampleHumidityToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a936:	0031      	movs	r1, r6
 800a938:	0028      	movs	r0, r5
 800a93a:	f7ff ff01 	bl	800a740 <SampleHumidityToString>
 800a93e:	e7ed      	b.n	800a91c <SampleSensorCommand+0x80>
			SamplePIRToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a940:	0031      	movs	r1, r6
 800a942:	0028      	movs	r0, r5
 800a944:	f7ff ff92 	bl	800a86c <SamplePIRToString>
 800a948:	e7e8      	b.n	800a91c <SampleSensorCommand+0x80>
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	0801bba0 	.word	0x0801bba0
 800a950:	0801bba8 	.word	0x0801bba8
 800a954:	0801bbb4 	.word	0x0801bbb4
 800a958:	0801bbbc 	.word	0x0801bbbc
 800a95c:	0801bbc8 	.word	0x0801bbc8
 800a960:	0801bb8c 	.word	0x0801bb8c

0800a964 <StreamColorToPort>:
{
 800a964:	b510      	push	{r4, lr}
 800a966:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleColorToPort);
 800a968:	4c02      	ldr	r4, [pc, #8]	; (800a974 <StreamColorToPort+0x10>)
 800a96a:	9400      	str	r4, [sp, #0]
 800a96c:	f7ff fad0 	bl	8009f10 <StreamMemsToPort>
}
 800a970:	b002      	add	sp, #8
 800a972:	bd10      	pop	{r4, pc}
 800a974:	0800a3dd 	.word	0x0800a3dd

0800a978 <StreamDistanceToPort>:
{
 800a978:	b510      	push	{r4, lr}
 800a97a:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleDistanceToPort);
 800a97c:	4c02      	ldr	r4, [pc, #8]	; (800a988 <StreamDistanceToPort+0x10>)
 800a97e:	9400      	str	r4, [sp, #0]
 800a980:	f7ff fac6 	bl	8009f10 <StreamMemsToPort>
}
 800a984:	b002      	add	sp, #8
 800a986:	bd10      	pop	{r4, pc}
 800a988:	0800a51d 	.word	0x0800a51d

0800a98c <StreamTemperatureToPort>:
{
 800a98c:	b510      	push	{r4, lr}
 800a98e:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleTemperatureToPort);
 800a990:	4c02      	ldr	r4, [pc, #8]	; (800a99c <StreamTemperatureToPort+0x10>)
 800a992:	9400      	str	r4, [sp, #0]
 800a994:	f7ff fabc 	bl	8009f10 <StreamMemsToPort>
}
 800a998:	b002      	add	sp, #8
 800a99a:	bd10      	pop	{r4, pc}
 800a99c:	0800a671 	.word	0x0800a671

0800a9a0 <StreamHumidityToPort>:
{
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleHumidityToPort);
 800a9a4:	4c02      	ldr	r4, [pc, #8]	; (800a9b0 <StreamHumidityToPort+0x10>)
 800a9a6:	9400      	str	r4, [sp, #0]
 800a9a8:	f7ff fab2 	bl	8009f10 <StreamMemsToPort>
}
 800a9ac:	b002      	add	sp, #8
 800a9ae:	bd10      	pop	{r4, pc}
 800a9b0:	0800a779 	.word	0x0800a779

0800a9b4 <StreamPIRToPort>:
{
 800a9b4:	b510      	push	{r4, lr}
 800a9b6:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SamplePIRToPort);
 800a9b8:	4c02      	ldr	r4, [pc, #8]	; (800a9c4 <StreamPIRToPort+0x10>)
 800a9ba:	9400      	str	r4, [sp, #0]
 800a9bc:	f7ff faa8 	bl	8009f10 <StreamMemsToPort>
}
 800a9c0:	b002      	add	sp, #8
 800a9c2:	bd10      	pop	{r4, pc}
 800a9c4:	0800a815 	.word	0x0800a815

0800a9c8 <Module_MessagingTask>:
{
 800a9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9ca:	46c6      	mov	lr, r8
 800a9cc:	b500      	push	{lr}
 800a9ce:	ab06      	add	r3, sp, #24
 800a9d0:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800a9d2:	38f5      	subs	r0, #245	; 0xf5
 800a9d4:	38ff      	subs	r0, #255	; 0xff
 800a9d6:	b283      	uxth	r3, r0
 800a9d8:	2b0a      	cmp	r3, #10
 800a9da:	d900      	bls.n	800a9de <Module_MessagingTask+0x16>
 800a9dc:	e127      	b.n	800ac2e <Module_MessagingTask+0x266>
 800a9de:	0098      	lsls	r0, r3, #2
 800a9e0:	4b94      	ldr	r3, [pc, #592]	; (800ac34 <Module_MessagingTask+0x26c>)
 800a9e2:	581b      	ldr	r3, [r3, r0]
 800a9e4:	469f      	mov	pc, r3
			SampleColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800a9e6:	1e4b      	subs	r3, r1, #1
 800a9e8:	4a93      	ldr	r2, [pc, #588]	; (800ac38 <Module_MessagingTask+0x270>)
 800a9ea:	00d8      	lsls	r0, r3, #3
 800a9ec:	1ac1      	subs	r1, r0, r3
 800a9ee:	00c9      	lsls	r1, r1, #3
 800a9f0:	1851      	adds	r1, r2, r1
 800a9f2:	5d09      	ldrb	r1, [r1, r4]
 800a9f4:	1ac3      	subs	r3, r0, r3
 800a9f6:	00db      	lsls	r3, r3, #3
 800a9f8:	18d2      	adds	r2, r2, r3
 800a9fa:	1914      	adds	r4, r2, r4
 800a9fc:	7860      	ldrb	r0, [r4, #1]
 800a9fe:	f7ff fced 	bl	800a3dc <SampleColorToPort>
	Module_Status result = H0AR9_OK;
 800aa02:	2000      	movs	r0, #0
}
 800aa04:	bc04      	pop	{r2}
 800aa06:	4690      	mov	r8, r2
 800aa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SampleDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800aa0a:	1e4b      	subs	r3, r1, #1
 800aa0c:	4a8a      	ldr	r2, [pc, #552]	; (800ac38 <Module_MessagingTask+0x270>)
 800aa0e:	00d8      	lsls	r0, r3, #3
 800aa10:	1ac1      	subs	r1, r0, r3
 800aa12:	00c9      	lsls	r1, r1, #3
 800aa14:	1851      	adds	r1, r2, r1
 800aa16:	5d09      	ldrb	r1, [r1, r4]
 800aa18:	1ac3      	subs	r3, r0, r3
 800aa1a:	00db      	lsls	r3, r3, #3
 800aa1c:	18d2      	adds	r2, r2, r3
 800aa1e:	1914      	adds	r4, r2, r4
 800aa20:	7860      	ldrb	r0, [r4, #1]
 800aa22:	f7ff fd7b 	bl	800a51c <SampleDistanceToPort>
	Module_Status result = H0AR9_OK;
 800aa26:	2000      	movs	r0, #0
			break;
 800aa28:	e7ec      	b.n	800aa04 <Module_MessagingTask+0x3c>
			SampleTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800aa2a:	1e4b      	subs	r3, r1, #1
 800aa2c:	4a82      	ldr	r2, [pc, #520]	; (800ac38 <Module_MessagingTask+0x270>)
 800aa2e:	00d8      	lsls	r0, r3, #3
 800aa30:	1ac1      	subs	r1, r0, r3
 800aa32:	00c9      	lsls	r1, r1, #3
 800aa34:	1851      	adds	r1, r2, r1
 800aa36:	5d09      	ldrb	r1, [r1, r4]
 800aa38:	1ac3      	subs	r3, r0, r3
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	18d2      	adds	r2, r2, r3
 800aa3e:	1914      	adds	r4, r2, r4
 800aa40:	7860      	ldrb	r0, [r4, #1]
 800aa42:	f7ff fe15 	bl	800a670 <SampleTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800aa46:	2000      	movs	r0, #0
			break;
 800aa48:	e7dc      	b.n	800aa04 <Module_MessagingTask+0x3c>
			SampleHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800aa4a:	1e4b      	subs	r3, r1, #1
 800aa4c:	4a7a      	ldr	r2, [pc, #488]	; (800ac38 <Module_MessagingTask+0x270>)
 800aa4e:	00d8      	lsls	r0, r3, #3
 800aa50:	1ac1      	subs	r1, r0, r3
 800aa52:	00c9      	lsls	r1, r1, #3
 800aa54:	1851      	adds	r1, r2, r1
 800aa56:	5d09      	ldrb	r1, [r1, r4]
 800aa58:	1ac3      	subs	r3, r0, r3
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	18d2      	adds	r2, r2, r3
 800aa5e:	1914      	adds	r4, r2, r4
 800aa60:	7860      	ldrb	r0, [r4, #1]
 800aa62:	f7ff fe89 	bl	800a778 <SampleHumidityToPort>
	Module_Status result = H0AR9_OK;
 800aa66:	2000      	movs	r0, #0
			break;
 800aa68:	e7cc      	b.n	800aa04 <Module_MessagingTask+0x3c>
			SamplePIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800aa6a:	1e4b      	subs	r3, r1, #1
 800aa6c:	4a72      	ldr	r2, [pc, #456]	; (800ac38 <Module_MessagingTask+0x270>)
 800aa6e:	00d8      	lsls	r0, r3, #3
 800aa70:	1ac1      	subs	r1, r0, r3
 800aa72:	00c9      	lsls	r1, r1, #3
 800aa74:	1851      	adds	r1, r2, r1
 800aa76:	5d09      	ldrb	r1, [r1, r4]
 800aa78:	1ac3      	subs	r3, r0, r3
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	18d2      	adds	r2, r2, r3
 800aa7e:	1914      	adds	r4, r2, r4
 800aa80:	7860      	ldrb	r0, [r4, #1]
 800aa82:	f7ff fec7 	bl	800a814 <SamplePIRToPort>
	Module_Status result = H0AR9_OK;
 800aa86:	2000      	movs	r0, #0
			break;
 800aa88:	e7bc      	b.n	800aa04 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aa8a:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800aa8c:	4d6a      	ldr	r5, [pc, #424]	; (800ac38 <Module_MessagingTask+0x270>)
 800aa8e:	00c6      	lsls	r6, r0, #3
 800aa90:	1a31      	subs	r1, r6, r0
 800aa92:	00c9      	lsls	r1, r1, #3
 800aa94:	1869      	adds	r1, r5, r1
 800aa96:	190f      	adds	r7, r1, r4
 800aa98:	79bb      	ldrb	r3, [r7, #6]
 800aa9a:	061b      	lsls	r3, r3, #24
 800aa9c:	79fa      	ldrb	r2, [r7, #7]
 800aa9e:	0412      	lsls	r2, r2, #16
 800aaa0:	189b      	adds	r3, r3, r2
 800aaa2:	7a7a      	ldrb	r2, [r7, #9]
 800aaa4:	189b      	adds	r3, r3, r2
 800aaa6:	7a3a      	ldrb	r2, [r7, #8]
 800aaa8:	0212      	lsls	r2, r2, #8
 800aaaa:	4698      	mov	r8, r3
 800aaac:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aaae:	78ba      	ldrb	r2, [r7, #2]
 800aab0:	0612      	lsls	r2, r2, #24
 800aab2:	78fb      	ldrb	r3, [r7, #3]
 800aab4:	041b      	lsls	r3, r3, #16
 800aab6:	469c      	mov	ip, r3
 800aab8:	4462      	add	r2, ip
 800aaba:	797b      	ldrb	r3, [r7, #5]
 800aabc:	469c      	mov	ip, r3
 800aabe:	4462      	add	r2, ip
 800aac0:	793f      	ldrb	r7, [r7, #4]
 800aac2:	023f      	lsls	r7, r7, #8
 800aac4:	19d2      	adds	r2, r2, r7
			StreamColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800aac6:	5d09      	ldrb	r1, [r1, r4]
 800aac8:	1a30      	subs	r0, r6, r0
 800aaca:	00c0      	lsls	r0, r0, #3
 800aacc:	182d      	adds	r5, r5, r0
 800aace:	192c      	adds	r4, r5, r4
 800aad0:	7860      	ldrb	r0, [r4, #1]
 800aad2:	4643      	mov	r3, r8
 800aad4:	f7ff ff46 	bl	800a964 <StreamColorToPort>
	Module_Status result = H0AR9_OK;
 800aad8:	2000      	movs	r0, #0
			break;
 800aada:	e793      	b.n	800aa04 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aadc:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800aade:	4d56      	ldr	r5, [pc, #344]	; (800ac38 <Module_MessagingTask+0x270>)
 800aae0:	00c6      	lsls	r6, r0, #3
 800aae2:	1a31      	subs	r1, r6, r0
 800aae4:	00c9      	lsls	r1, r1, #3
 800aae6:	1869      	adds	r1, r5, r1
 800aae8:	190f      	adds	r7, r1, r4
 800aaea:	79bb      	ldrb	r3, [r7, #6]
 800aaec:	061b      	lsls	r3, r3, #24
 800aaee:	79fa      	ldrb	r2, [r7, #7]
 800aaf0:	0412      	lsls	r2, r2, #16
 800aaf2:	189b      	adds	r3, r3, r2
 800aaf4:	7a7a      	ldrb	r2, [r7, #9]
 800aaf6:	189b      	adds	r3, r3, r2
 800aaf8:	7a3a      	ldrb	r2, [r7, #8]
 800aafa:	0212      	lsls	r2, r2, #8
 800aafc:	4698      	mov	r8, r3
 800aafe:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ab00:	78ba      	ldrb	r2, [r7, #2]
 800ab02:	0612      	lsls	r2, r2, #24
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	041b      	lsls	r3, r3, #16
 800ab08:	469c      	mov	ip, r3
 800ab0a:	4462      	add	r2, ip
 800ab0c:	797b      	ldrb	r3, [r7, #5]
 800ab0e:	469c      	mov	ip, r3
 800ab10:	4462      	add	r2, ip
 800ab12:	793f      	ldrb	r7, [r7, #4]
 800ab14:	023f      	lsls	r7, r7, #8
 800ab16:	19d2      	adds	r2, r2, r7
			StreamDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800ab18:	5d09      	ldrb	r1, [r1, r4]
 800ab1a:	1a30      	subs	r0, r6, r0
 800ab1c:	00c0      	lsls	r0, r0, #3
 800ab1e:	182d      	adds	r5, r5, r0
 800ab20:	192c      	adds	r4, r5, r4
 800ab22:	7860      	ldrb	r0, [r4, #1]
 800ab24:	4643      	mov	r3, r8
 800ab26:	f7ff ff27 	bl	800a978 <StreamDistanceToPort>
	Module_Status result = H0AR9_OK;
 800ab2a:	2000      	movs	r0, #0
			break;
 800ab2c:	e76a      	b.n	800aa04 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ab2e:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800ab30:	4d41      	ldr	r5, [pc, #260]	; (800ac38 <Module_MessagingTask+0x270>)
 800ab32:	00c6      	lsls	r6, r0, #3
 800ab34:	1a31      	subs	r1, r6, r0
 800ab36:	00c9      	lsls	r1, r1, #3
 800ab38:	1869      	adds	r1, r5, r1
 800ab3a:	190f      	adds	r7, r1, r4
 800ab3c:	79bb      	ldrb	r3, [r7, #6]
 800ab3e:	061b      	lsls	r3, r3, #24
 800ab40:	79fa      	ldrb	r2, [r7, #7]
 800ab42:	0412      	lsls	r2, r2, #16
 800ab44:	189b      	adds	r3, r3, r2
 800ab46:	7a7a      	ldrb	r2, [r7, #9]
 800ab48:	189b      	adds	r3, r3, r2
 800ab4a:	7a3a      	ldrb	r2, [r7, #8]
 800ab4c:	0212      	lsls	r2, r2, #8
 800ab4e:	4698      	mov	r8, r3
 800ab50:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ab52:	78ba      	ldrb	r2, [r7, #2]
 800ab54:	0612      	lsls	r2, r2, #24
 800ab56:	78fb      	ldrb	r3, [r7, #3]
 800ab58:	041b      	lsls	r3, r3, #16
 800ab5a:	469c      	mov	ip, r3
 800ab5c:	4462      	add	r2, ip
 800ab5e:	797b      	ldrb	r3, [r7, #5]
 800ab60:	469c      	mov	ip, r3
 800ab62:	4462      	add	r2, ip
 800ab64:	793f      	ldrb	r7, [r7, #4]
 800ab66:	023f      	lsls	r7, r7, #8
 800ab68:	19d2      	adds	r2, r2, r7
			StreamTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800ab6a:	5d09      	ldrb	r1, [r1, r4]
 800ab6c:	1a30      	subs	r0, r6, r0
 800ab6e:	00c0      	lsls	r0, r0, #3
 800ab70:	182d      	adds	r5, r5, r0
 800ab72:	192c      	adds	r4, r5, r4
 800ab74:	7860      	ldrb	r0, [r4, #1]
 800ab76:	4643      	mov	r3, r8
 800ab78:	f7ff ff08 	bl	800a98c <StreamTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800ab7c:	2000      	movs	r0, #0
			break;
 800ab7e:	e741      	b.n	800aa04 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ab80:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800ab82:	4d2d      	ldr	r5, [pc, #180]	; (800ac38 <Module_MessagingTask+0x270>)
 800ab84:	00c6      	lsls	r6, r0, #3
 800ab86:	1a31      	subs	r1, r6, r0
 800ab88:	00c9      	lsls	r1, r1, #3
 800ab8a:	1869      	adds	r1, r5, r1
 800ab8c:	190f      	adds	r7, r1, r4
 800ab8e:	79bb      	ldrb	r3, [r7, #6]
 800ab90:	061b      	lsls	r3, r3, #24
 800ab92:	79fa      	ldrb	r2, [r7, #7]
 800ab94:	0412      	lsls	r2, r2, #16
 800ab96:	189b      	adds	r3, r3, r2
 800ab98:	7a7a      	ldrb	r2, [r7, #9]
 800ab9a:	189b      	adds	r3, r3, r2
 800ab9c:	7a3a      	ldrb	r2, [r7, #8]
 800ab9e:	0212      	lsls	r2, r2, #8
 800aba0:	4698      	mov	r8, r3
 800aba2:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800aba4:	78ba      	ldrb	r2, [r7, #2]
 800aba6:	0612      	lsls	r2, r2, #24
 800aba8:	78fb      	ldrb	r3, [r7, #3]
 800abaa:	041b      	lsls	r3, r3, #16
 800abac:	469c      	mov	ip, r3
 800abae:	4462      	add	r2, ip
 800abb0:	797b      	ldrb	r3, [r7, #5]
 800abb2:	469c      	mov	ip, r3
 800abb4:	4462      	add	r2, ip
 800abb6:	793f      	ldrb	r7, [r7, #4]
 800abb8:	023f      	lsls	r7, r7, #8
 800abba:	19d2      	adds	r2, r2, r7
			StreamHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800abbc:	5d09      	ldrb	r1, [r1, r4]
 800abbe:	1a30      	subs	r0, r6, r0
 800abc0:	00c0      	lsls	r0, r0, #3
 800abc2:	182d      	adds	r5, r5, r0
 800abc4:	192c      	adds	r4, r5, r4
 800abc6:	7860      	ldrb	r0, [r4, #1]
 800abc8:	4643      	mov	r3, r8
 800abca:	f7ff fee9 	bl	800a9a0 <StreamHumidityToPort>
	Module_Status result = H0AR9_OK;
 800abce:	2000      	movs	r0, #0
			break;
 800abd0:	e718      	b.n	800aa04 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800abd2:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800abd4:	4d18      	ldr	r5, [pc, #96]	; (800ac38 <Module_MessagingTask+0x270>)
 800abd6:	00c6      	lsls	r6, r0, #3
 800abd8:	1a31      	subs	r1, r6, r0
 800abda:	00c9      	lsls	r1, r1, #3
 800abdc:	1869      	adds	r1, r5, r1
 800abde:	190f      	adds	r7, r1, r4
 800abe0:	79bb      	ldrb	r3, [r7, #6]
 800abe2:	061b      	lsls	r3, r3, #24
 800abe4:	79fa      	ldrb	r2, [r7, #7]
 800abe6:	0412      	lsls	r2, r2, #16
 800abe8:	189b      	adds	r3, r3, r2
 800abea:	7a7a      	ldrb	r2, [r7, #9]
 800abec:	189b      	adds	r3, r3, r2
 800abee:	7a3a      	ldrb	r2, [r7, #8]
 800abf0:	0212      	lsls	r2, r2, #8
 800abf2:	4698      	mov	r8, r3
 800abf4:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800abf6:	78ba      	ldrb	r2, [r7, #2]
 800abf8:	0612      	lsls	r2, r2, #24
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	041b      	lsls	r3, r3, #16
 800abfe:	469c      	mov	ip, r3
 800ac00:	4462      	add	r2, ip
 800ac02:	797b      	ldrb	r3, [r7, #5]
 800ac04:	469c      	mov	ip, r3
 800ac06:	4462      	add	r2, ip
 800ac08:	793f      	ldrb	r7, [r7, #4]
 800ac0a:	023f      	lsls	r7, r7, #8
 800ac0c:	19d2      	adds	r2, r2, r7
			StreamPIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800ac0e:	5d09      	ldrb	r1, [r1, r4]
 800ac10:	1a30      	subs	r0, r6, r0
 800ac12:	00c0      	lsls	r0, r0, #3
 800ac14:	182d      	adds	r5, r5, r0
 800ac16:	192c      	adds	r4, r5, r4
 800ac18:	7860      	ldrb	r0, [r4, #1]
 800ac1a:	4643      	mov	r3, r8
 800ac1c:	f7ff feca 	bl	800a9b4 <StreamPIRToPort>
	Module_Status result = H0AR9_OK;
 800ac20:	2000      	movs	r0, #0
			break;
 800ac22:	e6ef      	b.n	800aa04 <Module_MessagingTask+0x3c>
	stopStream = true;
 800ac24:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <Module_MessagingTask+0x274>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	701a      	strb	r2, [r3, #0]
			result = H0AR9_OK;
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	e6ea      	b.n	800aa04 <Module_MessagingTask+0x3c>
			result = H0AR9_ERR_UnknownMessage;
 800ac2e:	2001      	movs	r0, #1
 800ac30:	e6e8      	b.n	800aa04 <Module_MessagingTask+0x3c>
 800ac32:	46c0      	nop			; (mov r8, r8)
 800ac34:	0801bb00 	.word	0x0801bb00
 800ac38:	20000d7c 	.word	0x20000d7c
 800ac3c:	20001b58 	.word	0x20001b58

0800ac40 <StreamColorToCLI>:
{
 800ac40:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleColorToString);
 800ac42:	4a02      	ldr	r2, [pc, #8]	; (800ac4c <StreamColorToCLI+0xc>)
 800ac44:	f7ff f9a8 	bl	8009f98 <StreamMemsToCLI>
}
 800ac48:	bd10      	pop	{r4, pc}
 800ac4a:	46c0      	nop			; (mov r8, r8)
 800ac4c:	0800a485 	.word	0x0800a485

0800ac50 <StreamDistanceToCLI>:
{
 800ac50:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleDistanceToString);
 800ac52:	4a02      	ldr	r2, [pc, #8]	; (800ac5c <StreamDistanceToCLI+0xc>)
 800ac54:	f7ff f9a0 	bl	8009f98 <StreamMemsToCLI>
}
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	0800a585 	.word	0x0800a585

0800ac60 <StreamTemperatureToCLI>:
{
 800ac60:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleTemperatureToString);
 800ac62:	4a02      	ldr	r2, [pc, #8]	; (800ac6c <StreamTemperatureToCLI+0xc>)
 800ac64:	f7ff f998 	bl	8009f98 <StreamMemsToCLI>
}
 800ac68:	bd10      	pop	{r4, pc}
 800ac6a:	46c0      	nop			; (mov r8, r8)
 800ac6c:	0800a639 	.word	0x0800a639

0800ac70 <StreamHumidityToCLI>:
{
 800ac70:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleHumidityToString);
 800ac72:	4a02      	ldr	r2, [pc, #8]	; (800ac7c <StreamHumidityToCLI+0xc>)
 800ac74:	f7ff f990 	bl	8009f98 <StreamMemsToCLI>
}
 800ac78:	bd10      	pop	{r4, pc}
 800ac7a:	46c0      	nop			; (mov r8, r8)
 800ac7c:	0800a741 	.word	0x0800a741

0800ac80 <StreamPIRToCLI>:
{
 800ac80:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SamplePIRToString);
 800ac82:	4a02      	ldr	r2, [pc, #8]	; (800ac8c <StreamPIRToCLI+0xc>)
 800ac84:	f7ff f988 	bl	8009f98 <StreamMemsToCLI>
}
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	0800a86d 	.word	0x0800a86d

0800ac90 <StreamSensorCommand>:
{
 800ac90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac92:	b08b      	sub	sp, #44	; 0x2c
 800ac94:	0005      	movs	r5, r0
 800ac96:	9100      	str	r1, [sp, #0]
 800ac98:	0014      	movs	r4, r2
	portBASE_TYPE sensNameLen = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	9309      	str	r3, [sp, #36]	; 0x24
	*pcWriteBuffer = '\0';
 800ac9e:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800aca0:	9305      	str	r3, [sp, #20]
	portBASE_TYPE timeoutStrLen = 0;
 800aca2:	9306      	str	r3, [sp, #24]
	portBASE_TYPE portStrLen = 0;
 800aca4:	9307      	str	r3, [sp, #28]
	portBASE_TYPE modStrLen = 0;
 800aca6:	9308      	str	r3, [sp, #32]
	*ppSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, pSensNameLen);
 800aca8:	aa09      	add	r2, sp, #36	; 0x24
 800acaa:	2101      	movs	r1, #1
 800acac:	0020      	movs	r0, r4
 800acae:	f003 ffdb 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800acb2:	0006      	movs	r6, r0
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &periodStrLen);
 800acb4:	aa05      	add	r2, sp, #20
 800acb6:	2102      	movs	r1, #2
 800acb8:	0020      	movs	r0, r4
 800acba:	f003 ffd5 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800acbe:	0007      	movs	r7, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &timeoutStrLen);
 800acc0:	aa06      	add	r2, sp, #24
 800acc2:	2103      	movs	r1, #3
 800acc4:	9401      	str	r4, [sp, #4]
 800acc6:	0020      	movs	r0, r4
 800acc8:	f003 ffce 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800accc:	0004      	movs	r4, r0
	if ((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800acce:	2e00      	cmp	r6, #0
 800acd0:	d036      	beq.n	800ad40 <StreamSensorCommand+0xb0>
 800acd2:	2f00      	cmp	r7, #0
 800acd4:	d034      	beq.n	800ad40 <StreamSensorCommand+0xb0>
 800acd6:	2800      	cmp	r0, #0
 800acd8:	d032      	beq.n	800ad40 <StreamSensorCommand+0xb0>
	*pPeriod = atoi(pPeriodMSStr);
 800acda:	0038      	movs	r0, r7
 800acdc:	f009 fa47 	bl	801416e <atoi>
 800ace0:	9002      	str	r0, [sp, #8]
	*pTimeout = atoi(pTimeoutMSStr);
 800ace2:	0020      	movs	r0, r4
 800ace4:	f009 fa43 	bl	801416e <atoi>
 800ace8:	9003      	str	r0, [sp, #12]
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &portStrLen);
 800acea:	aa07      	add	r2, sp, #28
 800acec:	2104      	movs	r1, #4
 800acee:	9c01      	ldr	r4, [sp, #4]
 800acf0:	0020      	movs	r0, r4
 800acf2:	f003 ffb9 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800acf6:	0007      	movs	r7, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 5, &modStrLen);
 800acf8:	aa08      	add	r2, sp, #32
 800acfa:	2105      	movs	r1, #5
 800acfc:	0020      	movs	r0, r4
 800acfe:	f003 ffb3 	bl	800ec68 <FreeRTOS_CLIGetParameter>
 800ad02:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800ad04:	d01a      	beq.n	800ad3c <StreamSensorCommand+0xac>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800ad06:	2f00      	cmp	r7, #0
 800ad08:	d01a      	beq.n	800ad40 <StreamSensorCommand+0xb0>
	*pPort = atoi(pPortStr);
 800ad0a:	0038      	movs	r0, r7
 800ad0c:	f009 fa2f 	bl	801416e <atoi>
 800ad10:	b2c3      	uxtb	r3, r0
 800ad12:	9301      	str	r3, [sp, #4]
	*pModule = atoi(pModStr);
 800ad14:	0020      	movs	r0, r4
 800ad16:	f009 fa2a 	bl	801416e <atoi>
 800ad1a:	b2c4      	uxtb	r4, r0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800ad1c:	2205      	movs	r2, #5
 800ad1e:	4944      	ldr	r1, [pc, #272]	; (800ae30 <StreamSensorCommand+0x1a0>)
 800ad20:	0030      	movs	r0, r6
 800ad22:	f009 ff2d 	bl	8014b80 <strncmp>
	*pPortOrCLI = false;
 800ad26:	2700      	movs	r7, #0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800ad28:	2800      	cmp	r0, #0
 800ad2a:	d000      	beq.n	800ad2e <StreamSensorCommand+0x9e>
 800ad2c:	e070      	b.n	800ae10 <StreamSensorCommand+0x180>
				StreamColorToPort(port, module, period, timeout);
 800ad2e:	9b03      	ldr	r3, [sp, #12]
 800ad30:	9a02      	ldr	r2, [sp, #8]
 800ad32:	0021      	movs	r1, r4
 800ad34:	9801      	ldr	r0, [sp, #4]
 800ad36:	f7ff fe15 	bl	800a964 <StreamColorToPort>
 800ad3a:	e05e      	b.n	800adfa <StreamSensorCommand+0x16a>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800ad3c:	2f00      	cmp	r7, #0
 800ad3e:	d051      	beq.n	800ade4 <StreamSensorCommand+0x154>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800ad40:	4a3c      	ldr	r2, [pc, #240]	; (800ae34 <StreamSensorCommand+0x1a4>)
 800ad42:	9900      	ldr	r1, [sp, #0]
 800ad44:	0028      	movs	r0, r5
 800ad46:	f009 fea5 	bl	8014a94 <snprintf>
		return pdFALSE;
 800ad4a:	e05b      	b.n	800ae04 <StreamSensorCommand+0x174>
				StreamDistanceToPort(port, module, period, timeout);
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	9a02      	ldr	r2, [sp, #8]
 800ad50:	0021      	movs	r1, r4
 800ad52:	9801      	ldr	r0, [sp, #4]
 800ad54:	f7ff fe10 	bl	800a978 <StreamDistanceToPort>
 800ad58:	e04f      	b.n	800adfa <StreamSensorCommand+0x16a>
		else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800ad5a:	2204      	movs	r2, #4
 800ad5c:	4936      	ldr	r1, [pc, #216]	; (800ae38 <StreamSensorCommand+0x1a8>)
 800ad5e:	0030      	movs	r0, r6
 800ad60:	f009 ff0e 	bl	8014b80 <strncmp>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d10d      	bne.n	800ad84 <StreamSensorCommand+0xf4>
			if (portOrCLI) {
 800ad68:	2f00      	cmp	r7, #0
 800ad6a:	d004      	beq.n	800ad76 <StreamSensorCommand+0xe6>
				StreamTemperatureToCLI(period, timeout);
 800ad6c:	9903      	ldr	r1, [sp, #12]
 800ad6e:	9802      	ldr	r0, [sp, #8]
 800ad70:	f7ff ff76 	bl	800ac60 <StreamTemperatureToCLI>
 800ad74:	e041      	b.n	800adfa <StreamSensorCommand+0x16a>
				StreamTemperatureToPort(port, module, period, timeout);
 800ad76:	9b03      	ldr	r3, [sp, #12]
 800ad78:	9a02      	ldr	r2, [sp, #8]
 800ad7a:	0021      	movs	r1, r4
 800ad7c:	9801      	ldr	r0, [sp, #4]
 800ad7e:	f7ff fe05 	bl	800a98c <StreamTemperatureToPort>
 800ad82:	e03a      	b.n	800adfa <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800ad84:	2208      	movs	r2, #8
 800ad86:	492d      	ldr	r1, [pc, #180]	; (800ae3c <StreamSensorCommand+0x1ac>)
 800ad88:	0030      	movs	r0, r6
 800ad8a:	f009 fef9 	bl	8014b80 <strncmp>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d10d      	bne.n	800adae <StreamSensorCommand+0x11e>
			if (portOrCLI) {
 800ad92:	2f00      	cmp	r7, #0
 800ad94:	d004      	beq.n	800ada0 <StreamSensorCommand+0x110>
				StreamHumidityToCLI(period, timeout);
 800ad96:	9903      	ldr	r1, [sp, #12]
 800ad98:	9802      	ldr	r0, [sp, #8]
 800ad9a:	f7ff ff69 	bl	800ac70 <StreamHumidityToCLI>
 800ad9e:	e02c      	b.n	800adfa <StreamSensorCommand+0x16a>
				StreamHumidityToPort(port, module, period, timeout);
 800ada0:	9b03      	ldr	r3, [sp, #12]
 800ada2:	9a02      	ldr	r2, [sp, #8]
 800ada4:	0021      	movs	r1, r4
 800ada6:	9801      	ldr	r0, [sp, #4]
 800ada8:	f7ff fdfa 	bl	800a9a0 <StreamHumidityToPort>
 800adac:	e025      	b.n	800adfa <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800adae:	2203      	movs	r2, #3
 800adb0:	4923      	ldr	r1, [pc, #140]	; (800ae40 <StreamSensorCommand+0x1b0>)
 800adb2:	0030      	movs	r0, r6
 800adb4:	f009 fee4 	bl	8014b80 <strncmp>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d10d      	bne.n	800add8 <StreamSensorCommand+0x148>
			if (portOrCLI) {
 800adbc:	2f00      	cmp	r7, #0
 800adbe:	d004      	beq.n	800adca <StreamSensorCommand+0x13a>
				StreamPIRToCLI(period, timeout);
 800adc0:	9903      	ldr	r1, [sp, #12]
 800adc2:	9802      	ldr	r0, [sp, #8]
 800adc4:	f7ff ff5c 	bl	800ac80 <StreamPIRToCLI>
 800adc8:	e017      	b.n	800adfa <StreamSensorCommand+0x16a>
				StreamPIRToPort(port, module, period, timeout);
 800adca:	9b03      	ldr	r3, [sp, #12]
 800adcc:	9a02      	ldr	r2, [sp, #8]
 800adce:	0021      	movs	r1, r4
 800add0:	9801      	ldr	r0, [sp, #4]
 800add2:	f7ff fdef 	bl	800a9b4 <StreamPIRToPort>
 800add6:	e010      	b.n	800adfa <StreamSensorCommand+0x16a>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800add8:	4a16      	ldr	r2, [pc, #88]	; (800ae34 <StreamSensorCommand+0x1a4>)
 800adda:	9900      	ldr	r1, [sp, #0]
 800addc:	0028      	movs	r0, r5
 800adde:	f009 fe59 	bl	8014a94 <snprintf>
 800ade2:	e00a      	b.n	800adfa <StreamSensorCommand+0x16a>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800ade4:	2205      	movs	r2, #5
 800ade6:	4912      	ldr	r1, [pc, #72]	; (800ae30 <StreamSensorCommand+0x1a0>)
 800ade8:	0030      	movs	r0, r6
 800adea:	f009 fec9 	bl	8014b80 <strncmp>
 800adee:	2800      	cmp	r0, #0
 800adf0:	d10b      	bne.n	800ae0a <StreamSensorCommand+0x17a>
				StreamColorToCLI(period, timeout);
 800adf2:	9903      	ldr	r1, [sp, #12]
 800adf4:	9802      	ldr	r0, [sp, #8]
 800adf6:	f7ff ff23 	bl	800ac40 <StreamColorToCLI>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800adfa:	4a12      	ldr	r2, [pc, #72]	; (800ae44 <StreamSensorCommand+0x1b4>)
 800adfc:	9900      	ldr	r1, [sp, #0]
 800adfe:	0028      	movs	r0, r5
 800ae00:	f009 fe48 	bl	8014a94 <snprintf>
}
 800ae04:	2000      	movs	r0, #0
 800ae06:	b00b      	add	sp, #44	; 0x2c
 800ae08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pPortOrCLI = true;
 800ae0a:	2701      	movs	r7, #1
	uint8_t module = 0;
 800ae0c:	2400      	movs	r4, #0
	uint8_t port = 0;
 800ae0e:	9401      	str	r4, [sp, #4]
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800ae10:	2208      	movs	r2, #8
 800ae12:	490d      	ldr	r1, [pc, #52]	; (800ae48 <StreamSensorCommand+0x1b8>)
 800ae14:	0030      	movs	r0, r6
 800ae16:	f009 feb3 	bl	8014b80 <strncmp>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d19d      	bne.n	800ad5a <StreamSensorCommand+0xca>
			if (portOrCLI) {
 800ae1e:	2f00      	cmp	r7, #0
 800ae20:	d100      	bne.n	800ae24 <StreamSensorCommand+0x194>
 800ae22:	e793      	b.n	800ad4c <StreamSensorCommand+0xbc>
				StreamDistanceToCLI(period, timeout);
 800ae24:	9903      	ldr	r1, [sp, #12]
 800ae26:	9802      	ldr	r0, [sp, #8]
 800ae28:	f7ff ff12 	bl	800ac50 <StreamDistanceToCLI>
 800ae2c:	e7e5      	b.n	800adfa <StreamSensorCommand+0x16a>
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	0801bba0 	.word	0x0801bba0
 800ae34:	0801bb8c 	.word	0x0801bb8c
 800ae38:	0801bbb4 	.word	0x0801bbb4
 800ae3c:	0801bbbc 	.word	0x0801bbbc
 800ae40:	0801bbc8 	.word	0x0801bbc8
 800ae44:	0801b310 	.word	0x0801b310
 800ae48:	0801bba8 	.word	0x0801bba8

0800ae4c <SaveToRO>:

uint8_t SaveToRO(void)
{
 800ae4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae4e:	46de      	mov	lr, fp
 800ae50:	4657      	mov	r7, sl
 800ae52:	464e      	mov	r6, r9
 800ae54:	4645      	mov	r5, r8
 800ae56:	b5e0      	push	{r5, r6, r7, lr}
 800ae58:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800ae5a:	2215      	movs	r2, #21
 800ae5c:	2100      	movs	r1, #0
 800ae5e:	a802      	add	r0, sp, #8
 800ae60:	f009 fc1e 	bl	80146a0 <memset>

	HAL_FLASH_Unlock();
 800ae64:	f006 feb0 	bl	8011bc8 <HAL_FLASH_Unlock>

	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800ae68:	4872      	ldr	r0, [pc, #456]	; (800b034 <SaveToRO+0x1e8>)
 800ae6a:	f006 ff6f 	bl	8011d4c <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800ae6e:	4872      	ldr	r0, [pc, #456]	; (800b038 <SaveToRO+0x1ec>)
 800ae70:	f006 fec6 	bl	8011c00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d112      	bne.n	800ae9e <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800ae78:	4a70      	ldr	r2, [pc, #448]	; (800b03c <SaveToRO+0x1f0>)
 800ae7a:	6913      	ldr	r3, [r2, #16]
 800ae7c:	2102      	movs	r1, #2
 800ae7e:	438b      	bics	r3, r1
 800ae80:	6113      	str	r3, [r2, #16]
	}

	/* Save number of modules and myID */
	if (myID)
 800ae82:	4b6f      	ldr	r3, [pc, #444]	; (800b040 <SaveToRO+0x1f4>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d113      	bne.n	800aeb2 <SaveToRO+0x66>
		}
	}

	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800ae8a:	4b6e      	ldr	r3, [pc, #440]	; (800b044 <SaveToRO+0x1f8>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d100      	bne.n	800ae94 <SaveToRO+0x48>
 800ae92:	e0ca      	b.n	800b02a <SaveToRO+0x1de>
 800ae94:	2500      	movs	r5, #0
 800ae96:	4c6c      	ldr	r4, [pc, #432]	; (800b048 <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType)
 800ae98:	4b6c      	ldr	r3, [pc, #432]	; (800b04c <SaveToRO+0x200>)
 800ae9a:	4698      	mov	r8, r3
 800ae9c:	e06e      	b.n	800af7c <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800ae9e:	4b6c      	ldr	r3, [pc, #432]	; (800b050 <SaveToRO+0x204>)
 800aea0:	69d8      	ldr	r0, [r3, #28]
 800aea2:	b2c0      	uxtb	r0, r0
	}

	HAL_FLASH_Lock();

	return result;
}
 800aea4:	b009      	add	sp, #36	; 0x24
 800aea6:	bc3c      	pop	{r2, r3, r4, r5}
 800aea8:	4690      	mov	r8, r2
 800aeaa:	4699      	mov	r9, r3
 800aeac:	46a2      	mov	sl, r4
 800aeae:	46ab      	mov	fp, r5
 800aeb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800aeb2:	4a68      	ldr	r2, [pc, #416]	; (800b054 <SaveToRO+0x208>)
 800aeb4:	7812      	ldrb	r2, [r2, #0]
 800aeb6:	0212      	lsls	r2, r2, #8
 800aeb8:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800aeba:	b292      	uxth	r2, r2
 800aebc:	2300      	movs	r3, #0
 800aebe:	495d      	ldr	r1, [pc, #372]	; (800b034 <SaveToRO+0x1e8>)
 800aec0:	2001      	movs	r0, #1
 800aec2:	f006 fecb 	bl	8011c5c <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800aec6:	485c      	ldr	r0, [pc, #368]	; (800b038 <SaveToRO+0x1ec>)
 800aec8:	f006 fe9a 	bl	8011c00 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800aecc:	2800      	cmp	r0, #0
 800aece:	d111      	bne.n	800aef4 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800aed0:	4a5a      	ldr	r2, [pc, #360]	; (800b03c <SaveToRO+0x1f0>)
 800aed2:	6913      	ldr	r3, [r2, #16]
 800aed4:	2101      	movs	r1, #1
 800aed6:	438b      	bics	r3, r1
 800aed8:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800aeda:	4b5e      	ldr	r3, [pc, #376]	; (800b054 <SaveToRO+0x208>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	2201      	movs	r2, #1
 800aee0:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800aee2:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0d0      	beq.n	800ae8a <SaveToRO+0x3e>
 800aee8:	2316      	movs	r3, #22
 800aeea:	469b      	mov	fp, r3
 800aeec:	4b5a      	ldr	r3, [pc, #360]	; (800b058 <SaveToRO+0x20c>)
 800aeee:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800aef0:	4698      	mov	r8, r3
 800aef2:	e02a      	b.n	800af4a <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800aef4:	4b56      	ldr	r3, [pc, #344]	; (800b050 <SaveToRO+0x204>)
 800aef6:	69d8      	ldr	r0, [r3, #28]
 800aef8:	b2c0      	uxtb	r0, r0
 800aefa:	e7d3      	b.n	800aea4 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800aefc:	4b54      	ldr	r3, [pc, #336]	; (800b050 <SaveToRO+0x204>)
 800aefe:	69d8      	ldr	r0, [r3, #28]
 800af00:	b2c0      	uxtb	r0, r0
 800af02:	e7cf      	b.n	800aea4 <SaveToRO+0x58>
 800af04:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800af06:	42b4      	cmp	r4, r6
 800af08:	d017      	beq.n	800af3a <SaveToRO+0xee>
				if (array[i-1][0]) {
 800af0a:	4643      	mov	r3, r8
 800af0c:	5afb      	ldrh	r3, [r7, r3]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0f8      	beq.n	800af04 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800af12:	8822      	ldrh	r2, [r4, #0]
 800af14:	4b47      	ldr	r3, [pc, #284]	; (800b034 <SaveToRO+0x1e8>)
 800af16:	18e9      	adds	r1, r5, r3
 800af18:	2300      	movs	r3, #0
 800af1a:	2001      	movs	r0, #1
 800af1c:	f006 fe9e 	bl	8011c5c <HAL_FLASH_Program>
					add += 2;
 800af20:	3502      	adds	r5, #2
 800af22:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800af24:	4844      	ldr	r0, [pc, #272]	; (800b038 <SaveToRO+0x1ec>)
 800af26:	f006 fe6b 	bl	8011c00 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d1e6      	bne.n	800aefc <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800af2e:	4a43      	ldr	r2, [pc, #268]	; (800b03c <SaveToRO+0x1f0>)
 800af30:	6913      	ldr	r3, [r2, #16]
 800af32:	2101      	movs	r1, #1
 800af34:	438b      	bics	r3, r1
 800af36:	6113      	str	r3, [r2, #16]
 800af38:	e7e4      	b.n	800af04 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800af3a:	464b      	mov	r3, r9
 800af3c:	3301      	adds	r3, #1
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	4699      	mov	r9, r3
 800af42:	4b44      	ldr	r3, [pc, #272]	; (800b054 <SaveToRO+0x208>)
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	454b      	cmp	r3, r9
 800af48:	d39f      	bcc.n	800ae8a <SaveToRO+0x3e>
 800af4a:	465e      	mov	r6, fp
 800af4c:	464b      	mov	r3, r9
 800af4e:	435e      	muls	r6, r3
 800af50:	0034      	movs	r4, r6
 800af52:	3c16      	subs	r4, #22
 800af54:	4454      	add	r4, sl
 800af56:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800af58:	1e5f      	subs	r7, r3, #1
 800af5a:	465b      	mov	r3, fp
 800af5c:	435f      	muls	r7, r3
 800af5e:	e7d4      	b.n	800af0a <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800af60:	4b3b      	ldr	r3, [pc, #236]	; (800b050 <SaveToRO+0x204>)
 800af62:	69d8      	ldr	r0, [r3, #28]
 800af64:	b2c0      	uxtb	r0, r0
 800af66:	e79d      	b.n	800aea4 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800af68:	4b39      	ldr	r3, [pc, #228]	; (800b050 <SaveToRO+0x204>)
 800af6a:	69d8      	ldr	r0, [r3, #28]
 800af6c:	b2c0      	uxtb	r0, r0
 800af6e:	e799      	b.n	800aea4 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800af70:	3501      	adds	r5, #1
 800af72:	b2ed      	uxtb	r5, r5
 800af74:	4b33      	ldr	r3, [pc, #204]	; (800b044 <SaveToRO+0x1f8>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	42ab      	cmp	r3, r5
 800af7a:	d956      	bls.n	800b02a <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType)
 800af7c:	9501      	str	r5, [sp, #4]
 800af7e:	00ab      	lsls	r3, r5, #2
 800af80:	195b      	adds	r3, r3, r5
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4642      	mov	r2, r8
 800af86:	5c9b      	ldrb	r3, [r3, r2]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d0f1      	beq.n	800af70 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800af8c:	23fe      	movs	r3, #254	; 0xfe
 800af8e:	aa02      	add	r2, sp, #8
 800af90:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800af92:	00a9      	lsls	r1, r5, #2
 800af94:	1949      	adds	r1, r1, r5
 800af96:	0089      	lsls	r1, r1, #2
 800af98:	4b2c      	ldr	r3, [pc, #176]	; (800b04c <SaveToRO+0x200>)
 800af9a:	469c      	mov	ip, r3
 800af9c:	4461      	add	r1, ip
 800af9e:	2214      	movs	r2, #20
 800afa0:	ab02      	add	r3, sp, #8
 800afa2:	1c58      	adds	r0, r3, #1
 800afa4:	f009 fb73 	bl	801468e <memcpy>
 800afa8:	2314      	movs	r3, #20
 800afaa:	469b      	mov	fp, r3
 800afac:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800afae:	ae02      	add	r6, sp, #8
 800afb0:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800afb2:	4f22      	ldr	r7, [pc, #136]	; (800b03c <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800afb4:	5b32      	ldrh	r2, [r6, r4]
 800afb6:	2300      	movs	r3, #0
 800afb8:	0021      	movs	r1, r4
 800afba:	2001      	movs	r0, #1
 800afbc:	f006 fe4e 	bl	8011c5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800afc0:	481d      	ldr	r0, [pc, #116]	; (800b038 <SaveToRO+0x1ec>)
 800afc2:	f006 fe1d 	bl	8011c00 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d1ca      	bne.n	800af60 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2201      	movs	r2, #1
 800afce:	4393      	bics	r3, r2
 800afd0:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800afd2:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800afd4:	455c      	cmp	r4, fp
 800afd6:	d1ed      	bne.n	800afb4 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800afd8:	2700      	movs	r7, #0
 800afda:	9a01      	ldr	r2, [sp, #4]
 800afdc:	0093      	lsls	r3, r2, #2
 800afde:	189e      	adds	r6, r3, r2
 800afe0:	00b6      	lsls	r6, r6, #2
 800afe2:	4b1a      	ldr	r3, [pc, #104]	; (800b04c <SaveToRO+0x200>)
 800afe4:	469a      	mov	sl, r3
 800afe6:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800afe8:	4b14      	ldr	r3, [pc, #80]	; (800b03c <SaveToRO+0x1f0>)
 800afea:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800afec:	4653      	mov	r3, sl
 800afee:	68de      	ldr	r6, [r3, #12]
 800aff0:	0030      	movs	r0, r6
 800aff2:	f7f5 f891 	bl	8000118 <strlen>
 800aff6:	3001      	adds	r0, #1
 800aff8:	0840      	lsrs	r0, r0, #1
 800affa:	4287      	cmp	r7, r0
 800affc:	d2b8      	bcs.n	800af70 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800affe:	007b      	lsls	r3, r7, #1
 800b000:	5af2      	ldrh	r2, [r6, r3]
 800b002:	2300      	movs	r3, #0
 800b004:	0021      	movs	r1, r4
 800b006:	2001      	movs	r0, #1
 800b008:	f006 fe28 	bl	8011c5c <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800b00c:	480a      	ldr	r0, [pc, #40]	; (800b038 <SaveToRO+0x1ec>)
 800b00e:	f006 fdf7 	bl	8011c00 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800b012:	2800      	cmp	r0, #0
 800b014:	d1a8      	bne.n	800af68 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800b016:	465b      	mov	r3, fp
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	2201      	movs	r2, #1
 800b01c:	4393      	bics	r3, r2
 800b01e:	465a      	mov	r2, fp
 800b020:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800b022:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800b024:	3701      	adds	r7, #1
 800b026:	b2ff      	uxtb	r7, r7
 800b028:	e7e0      	b.n	800afec <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800b02a:	f006 fddf 	bl	8011bec <HAL_FLASH_Lock>
	return result;
 800b02e:	2000      	movs	r0, #0
 800b030:	e738      	b.n	800aea4 <SaveToRO+0x58>
 800b032:	46c0      	nop			; (mov r8, r8)
 800b034:	0801d800 	.word	0x0801d800
 800b038:	0000c350 	.word	0x0000c350
 800b03c:	40022000 	.word	0x40022000
 800b040:	200010ea 	.word	0x200010ea
 800b044:	20001297 	.word	0x20001297
 800b048:	0801dc00 	.word	0x0801dc00
 800b04c:	20006e6c 	.word	0x20006e6c
 800b050:	200073d0 	.word	0x200073d0
 800b054:	20000044 	.word	0x20000044
 800b058:	20000aec 	.word	0x20000aec

0800b05c <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO ---
*/
uint8_t ClearROtopology(void)
{
 800b05c:	b510      	push	{r4, lr}
	// Clear the array
	memset(array, 0, sizeof(array));
 800b05e:	228f      	movs	r2, #143	; 0x8f
 800b060:	0092      	lsls	r2, r2, #2
 800b062:	2100      	movs	r1, #0
 800b064:	4805      	ldr	r0, [pc, #20]	; (800b07c <ClearROtopology+0x20>)
 800b066:	f009 fb1b 	bl	80146a0 <memset>
	N = 1; myID = 0;
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <ClearROtopology+0x24>)
 800b06c:	2201      	movs	r2, #1
 800b06e:	701a      	strb	r2, [r3, #0]
 800b070:	4b04      	ldr	r3, [pc, #16]	; (800b084 <ClearROtopology+0x28>)
 800b072:	2200      	movs	r2, #0
 800b074:	701a      	strb	r2, [r3, #0]

	return SaveToRO();
 800b076:	f7ff fee9 	bl	800ae4c <SaveToRO>
}
 800b07a:	bd10      	pop	{r4, pc}
 800b07c:	20000aec 	.word	0x20000aec
 800b080:	20000044 	.word	0x20000044
 800b084:	200010ea 	.word	0x200010ea

0800b088 <GetPort>:

/* --- Get the port for a given UART.
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800b088:	6800      	ldr	r0, [r0, #0]
 800b08a:	4b11      	ldr	r3, [pc, #68]	; (800b0d0 <GetPort+0x48>)
 800b08c:	4298      	cmp	r0, r3
 800b08e:	d014      	beq.n	800b0ba <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800b090:	4b10      	ldr	r3, [pc, #64]	; (800b0d4 <GetPort+0x4c>)
 800b092:	4298      	cmp	r0, r3
 800b094:	d013      	beq.n	800b0be <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART6)
 800b096:	4b10      	ldr	r3, [pc, #64]	; (800b0d8 <GetPort+0x50>)
 800b098:	4298      	cmp	r0, r3
 800b09a:	d012      	beq.n	800b0c2 <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART3)
 800b09c:	4b0f      	ldr	r3, [pc, #60]	; (800b0dc <GetPort+0x54>)
 800b09e:	4298      	cmp	r0, r3
 800b0a0:	d011      	beq.n	800b0c6 <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART1)
 800b0a2:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <GetPort+0x58>)
 800b0a4:	4298      	cmp	r0, r3
 800b0a6:	d010      	beq.n	800b0ca <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART5)
			return P6;
	return 0;
 800b0a8:	4b0e      	ldr	r3, [pc, #56]	; (800b0e4 <GetPort+0x5c>)
 800b0aa:	469c      	mov	ip, r3
 800b0ac:	4460      	add	r0, ip
 800b0ae:	4243      	negs	r3, r0
 800b0b0:	4158      	adcs	r0, r3
 800b0b2:	4240      	negs	r0, r0
 800b0b4:	2306      	movs	r3, #6
 800b0b6:	4018      	ands	r0, r3
}
 800b0b8:	4770      	bx	lr
			return P1;
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	e7fc      	b.n	800b0b8 <GetPort+0x30>
			return P2;
 800b0be:	2002      	movs	r0, #2
 800b0c0:	e7fa      	b.n	800b0b8 <GetPort+0x30>
			return P3;
 800b0c2:	2003      	movs	r0, #3
 800b0c4:	e7f8      	b.n	800b0b8 <GetPort+0x30>
			return P4;
 800b0c6:	2004      	movs	r0, #4
 800b0c8:	e7f6      	b.n	800b0b8 <GetPort+0x30>
			return P5;
 800b0ca:	2005      	movs	r0, #5
 800b0cc:	e7f4      	b.n	800b0b8 <GetPort+0x30>
 800b0ce:	46c0      	nop			; (mov r8, r8)
 800b0d0:	40004c00 	.word	0x40004c00
 800b0d4:	40004400 	.word	0x40004400
 800b0d8:	40011400 	.word	0x40011400
 800b0dc:	40004800 	.word	0x40004800
 800b0e0:	40013800 	.word	0x40013800
 800b0e4:	bfffb000 	.word	0xbfffb000

0800b0e8 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b0e8:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b0ea:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b0f0:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b0f2:	2280      	movs	r2, #128	; 0x80
 800b0f4:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b0f6:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b0f8:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b0fa:	3320      	adds	r3, #32
 800b0fc:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b0fe:	2380      	movs	r3, #128	; 0x80
 800b100:	019b      	lsls	r3, r3, #6
 800b102:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b104:	f006 f868 	bl	80111d8 <HAL_DMA_Init>
}
 800b108:	bd10      	pop	{r4, pc}

0800b10a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b10a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b10c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b10e:	2310      	movs	r3, #16
 800b110:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b112:	2300      	movs	r3, #0
 800b114:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800b116:	2280      	movs	r2, #128	; 0x80
 800b118:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b11a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b11c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800b11e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800b120:	2380      	movs	r3, #128	; 0x80
 800b122:	019b      	lsls	r3, r3, #6
 800b124:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b126:	f006 f857 	bl	80111d8 <HAL_DMA_Init>
}
 800b12a:	bd10      	pop	{r4, pc}

0800b12c <DMA_Init>:
{
 800b12c:	b510      	push	{r4, lr}
 800b12e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800b130:	4b20      	ldr	r3, [pc, #128]	; (800b1b4 <DMA_Init+0x88>)
 800b132:	6959      	ldr	r1, [r3, #20]
 800b134:	2201      	movs	r2, #1
 800b136:	4311      	orrs	r1, r2
 800b138:	6159      	str	r1, [r3, #20]
 800b13a:	6959      	ldr	r1, [r3, #20]
 800b13c:	400a      	ands	r2, r1
 800b13e:	9200      	str	r2, [sp, #0]
 800b140:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800b142:	6959      	ldr	r1, [r3, #20]
 800b144:	2202      	movs	r2, #2
 800b146:	4311      	orrs	r1, r2
 800b148:	6159      	str	r1, [r3, #20]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	401a      	ands	r2, r3
 800b14e:	9201      	str	r2, [sp, #4]
 800b150:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800b152:	4c19      	ldr	r4, [pc, #100]	; (800b1b8 <DMA_Init+0x8c>)
 800b154:	4919      	ldr	r1, [pc, #100]	; (800b1bc <DMA_Init+0x90>)
 800b156:	0020      	movs	r0, r4
 800b158:	f7ff ffc6 	bl	800b0e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800b15c:	0020      	movs	r0, r4
 800b15e:	3038      	adds	r0, #56	; 0x38
 800b160:	4917      	ldr	r1, [pc, #92]	; (800b1c0 <DMA_Init+0x94>)
 800b162:	f7ff ffc1 	bl	800b0e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800b166:	0020      	movs	r0, r4
 800b168:	3070      	adds	r0, #112	; 0x70
 800b16a:	4916      	ldr	r1, [pc, #88]	; (800b1c4 <DMA_Init+0x98>)
 800b16c:	f7ff ffbc 	bl	800b0e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800b170:	0020      	movs	r0, r4
 800b172:	30a8      	adds	r0, #168	; 0xa8
 800b174:	4914      	ldr	r1, [pc, #80]	; (800b1c8 <DMA_Init+0x9c>)
 800b176:	f7ff ffb7 	bl	800b0e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800b17a:	0020      	movs	r0, r4
 800b17c:	30e0      	adds	r0, #224	; 0xe0
 800b17e:	4913      	ldr	r1, [pc, #76]	; (800b1cc <DMA_Init+0xa0>)
 800b180:	f7ff ffb2 	bl	800b0e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800b184:	0020      	movs	r0, r4
 800b186:	3019      	adds	r0, #25
 800b188:	30ff      	adds	r0, #255	; 0xff
 800b18a:	4911      	ldr	r1, [pc, #68]	; (800b1d0 <DMA_Init+0xa4>)
 800b18c:	f7ff ffac 	bl	800b0e8 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800b190:	4c10      	ldr	r4, [pc, #64]	; (800b1d4 <DMA_Init+0xa8>)
 800b192:	4911      	ldr	r1, [pc, #68]	; (800b1d8 <DMA_Init+0xac>)
 800b194:	0020      	movs	r0, r4
 800b196:	f7ff ffb8 	bl	800b10a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800b19a:	0020      	movs	r0, r4
 800b19c:	3038      	adds	r0, #56	; 0x38
 800b19e:	490f      	ldr	r1, [pc, #60]	; (800b1dc <DMA_Init+0xb0>)
 800b1a0:	f7ff ffb3 	bl	800b10a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800b1a4:	0020      	movs	r0, r4
 800b1a6:	3070      	adds	r0, #112	; 0x70
 800b1a8:	490d      	ldr	r1, [pc, #52]	; (800b1e0 <DMA_Init+0xb4>)
 800b1aa:	f7ff ffae 	bl	800b10a <DMA_MSG_TX_CH_Init>
}
 800b1ae:	b002      	add	sp, #8
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	46c0      	nop			; (mov r8, r8)
 800b1b4:	40021000 	.word	0x40021000
 800b1b8:	20001b74 	.word	0x20001b74
 800b1bc:	40020008 	.word	0x40020008
 800b1c0:	40020030 	.word	0x40020030
 800b1c4:	40020058 	.word	0x40020058
 800b1c8:	4002006c 	.word	0x4002006c
 800b1cc:	4002041c 	.word	0x4002041c
 800b1d0:	40020430 	.word	0x40020430
 800b1d4:	20001cc4 	.word	0x20001cc4
 800b1d8:	4002001c 	.word	0x4002001c
 800b1dc:	40020044 	.word	0x40020044
 800b1e0:	40020080 	.word	0x40020080

0800b1e4 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800b1e4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800b1e6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800b1ec:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800b1ee:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b1f0:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b1f2:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800b1f4:	3320      	adds	r3, #32
 800b1f6:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800b1f8:	2380      	movs	r3, #128	; 0x80
 800b1fa:	015b      	lsls	r3, r3, #5
 800b1fc:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800b1fe:	f005 ffeb 	bl	80111d8 <HAL_DMA_Init>
}
 800b202:	bd10      	pop	{r4, pc}

0800b204 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800b204:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800b206:	1e44      	subs	r4, r0, #1
 800b208:	00e5      	lsls	r5, r4, #3
 800b20a:	1b28      	subs	r0, r5, r4
 800b20c:	00c0      	lsls	r0, r0, #3
 800b20e:	4e07      	ldr	r6, [pc, #28]	; (800b22c <StopStreamDMA+0x28>)
 800b210:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800b212:	f006 f840 	bl	8011296 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800b216:	1b2d      	subs	r5, r5, r4
 800b218:	00ed      	lsls	r5, r5, #3
 800b21a:	59aa      	ldr	r2, [r5, r6]
 800b21c:	2300      	movs	r3, #0
 800b21e:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800b220:	00a4      	lsls	r4, r4, #2
 800b222:	4a03      	ldr	r2, [pc, #12]	; (800b230 <StopStreamDMA+0x2c>)
 800b224:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800b226:	4a03      	ldr	r2, [pc, #12]	; (800b234 <StopStreamDMA+0x30>)
 800b228:	50a3      	str	r3, [r4, r2]

}
 800b22a:	bd70      	pop	{r4, r5, r6, pc}
 800b22c:	20001d6c 	.word	0x20001d6c
 800b230:	20001808 	.word	0x20001808
 800b234:	20001838 	.word	0x20001838

0800b238 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800b238:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800b23a:	1e45      	subs	r5, r0, #1
 800b23c:	00ec      	lsls	r4, r5, #3
 800b23e:	1b60      	subs	r0, r4, r5
 800b240:	00c0      	lsls	r0, r0, #3
 800b242:	4e05      	ldr	r6, [pc, #20]	; (800b258 <StopMsgDMA+0x20>)
 800b244:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800b246:	f006 f826 	bl	8011296 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800b24a:	1b64      	subs	r4, r4, r5
 800b24c:	00e4      	lsls	r4, r4, #3
 800b24e:	59a3      	ldr	r3, [r4, r6]
 800b250:	2200      	movs	r2, #0
 800b252:	605a      	str	r2, [r3, #4]
}
 800b254:	bd70      	pop	{r4, r5, r6, pc}
 800b256:	46c0      	nop			; (mov r8, r8)
 800b258:	20001b74 	.word	0x20001b74

0800b25c <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800b25c:	b510      	push	{r4, lr}
 800b25e:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800b260:	f7ff ffea 	bl	800b238 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800b264:	3c01      	subs	r4, #1
 800b266:	00e0      	lsls	r0, r4, #3
 800b268:	1b02      	subs	r2, r0, r4
 800b26a:	00d2      	lsls	r2, r2, #3
 800b26c:	4903      	ldr	r1, [pc, #12]	; (800b27c <SwitchMsgDMAToStream+0x20>)
 800b26e:	5851      	ldr	r1, [r2, r1]
 800b270:	4b03      	ldr	r3, [pc, #12]	; (800b280 <SwitchMsgDMAToStream+0x24>)
 800b272:	18d0      	adds	r0, r2, r3
 800b274:	f7ff ffb6 	bl	800b1e4 <DMA_STREAM_CH_Init>
}
 800b278:	bd10      	pop	{r4, pc}
 800b27a:	46c0      	nop			; (mov r8, r8)
 800b27c:	20001b74 	.word	0x20001b74
 800b280:	20001d6c 	.word	0x20001d6c

0800b284 <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800b284:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b286:	6803      	ldr	r3, [r0, #0]
 800b288:	4a20      	ldr	r2, [pc, #128]	; (800b30c <SetupDMAInterrupts+0x88>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d020      	beq.n	800b2d0 <SetupDMAInterrupts+0x4c>
 800b28e:	d827      	bhi.n	800b2e0 <SetupDMAInterrupts+0x5c>
 800b290:	4a1f      	ldr	r2, [pc, #124]	; (800b310 <SetupDMAInterrupts+0x8c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00e      	beq.n	800b2b4 <SetupDMAInterrupts+0x30>
 800b296:	d815      	bhi.n	800b2c4 <SetupDMAInterrupts+0x40>
 800b298:	4a1e      	ldr	r2, [pc, #120]	; (800b314 <SetupDMAInterrupts+0x90>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d107      	bne.n	800b2ae <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b29e:	2200      	movs	r2, #0
 800b2a0:	2009      	movs	r0, #9
 800b2a2:	f005 fdfb 	bl	8010e9c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b2a6:	2009      	movs	r0, #9
 800b2a8:	f005 fe2c 	bl	8010f04 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b2ac:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b2ae:	4a1a      	ldr	r2, [pc, #104]	; (800b318 <SetupDMAInterrupts+0x94>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d1fb      	bne.n	800b2ac <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	200a      	movs	r0, #10
 800b2b8:	f005 fdf0 	bl	8010e9c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b2bc:	200a      	movs	r0, #10
 800b2be:	f005 fe21 	bl	8010f04 <HAL_NVIC_EnableIRQ>
			break;
 800b2c2:	e7f3      	b.n	800b2ac <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b2c4:	4a15      	ldr	r2, [pc, #84]	; (800b31c <SetupDMAInterrupts+0x98>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d002      	beq.n	800b2d0 <SetupDMAInterrupts+0x4c>
 800b2ca:	4a15      	ldr	r2, [pc, #84]	; (800b320 <SetupDMAInterrupts+0x9c>)
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	d1ed      	bne.n	800b2ac <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	200b      	movs	r0, #11
 800b2d4:	f005 fde2 	bl	8010e9c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b2d8:	200b      	movs	r0, #11
 800b2da:	f005 fe13 	bl	8010f04 <HAL_NVIC_EnableIRQ>
}
 800b2de:	e7e5      	b.n	800b2ac <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b2e0:	4a10      	ldr	r2, [pc, #64]	; (800b324 <SetupDMAInterrupts+0xa0>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d0e6      	beq.n	800b2b4 <SetupDMAInterrupts+0x30>
 800b2e6:	d909      	bls.n	800b2fc <SetupDMAInterrupts+0x78>
 800b2e8:	4a0f      	ldr	r2, [pc, #60]	; (800b328 <SetupDMAInterrupts+0xa4>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d0f0      	beq.n	800b2d0 <SetupDMAInterrupts+0x4c>
 800b2ee:	4a0f      	ldr	r2, [pc, #60]	; (800b32c <SetupDMAInterrupts+0xa8>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d0ed      	beq.n	800b2d0 <SetupDMAInterrupts+0x4c>
 800b2f4:	4a0e      	ldr	r2, [pc, #56]	; (800b330 <SetupDMAInterrupts+0xac>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d1d8      	bne.n	800b2ac <SetupDMAInterrupts+0x28>
 800b2fa:	e7e9      	b.n	800b2d0 <SetupDMAInterrupts+0x4c>
 800b2fc:	4a0d      	ldr	r2, [pc, #52]	; (800b334 <SetupDMAInterrupts+0xb0>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d0e6      	beq.n	800b2d0 <SetupDMAInterrupts+0x4c>
 800b302:	4a0d      	ldr	r2, [pc, #52]	; (800b338 <SetupDMAInterrupts+0xb4>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d0d5      	beq.n	800b2b4 <SetupDMAInterrupts+0x30>
 800b308:	e7d0      	b.n	800b2ac <SetupDMAInterrupts+0x28>
 800b30a:	46c0      	nop			; (mov r8, r8)
 800b30c:	4002006c 	.word	0x4002006c
 800b310:	40020030 	.word	0x40020030
 800b314:	40020008 	.word	0x40020008
 800b318:	4002001c 	.word	0x4002001c
 800b31c:	40020044 	.word	0x40020044
 800b320:	40020058 	.word	0x40020058
 800b324:	4002041c 	.word	0x4002041c
 800b328:	40020444 	.word	0x40020444
 800b32c:	40020458 	.word	0x40020458
 800b330:	40020430 	.word	0x40020430
 800b334:	40020080 	.word	0x40020080
 800b338:	40020408 	.word	0x40020408

0800b33c <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b33c:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b33e:	6803      	ldr	r3, [r0, #0]
 800b340:	4a1a      	ldr	r2, [pc, #104]	; (800b3ac <UnSetupDMAInterrupts+0x70>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d018      	beq.n	800b378 <UnSetupDMAInterrupts+0x3c>
 800b346:	d81b      	bhi.n	800b380 <UnSetupDMAInterrupts+0x44>
 800b348:	4a19      	ldr	r2, [pc, #100]	; (800b3b0 <UnSetupDMAInterrupts+0x74>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d00a      	beq.n	800b364 <UnSetupDMAInterrupts+0x28>
 800b34e:	d80d      	bhi.n	800b36c <UnSetupDMAInterrupts+0x30>
 800b350:	4a18      	ldr	r2, [pc, #96]	; (800b3b4 <UnSetupDMAInterrupts+0x78>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d103      	bne.n	800b35e <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b356:	2009      	movs	r0, #9
 800b358:	f005 fdde 	bl	8010f18 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b35c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b35e:	4a16      	ldr	r2, [pc, #88]	; (800b3b8 <UnSetupDMAInterrupts+0x7c>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d1fb      	bne.n	800b35c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b364:	200a      	movs	r0, #10
 800b366:	f005 fdd7 	bl	8010f18 <HAL_NVIC_DisableIRQ>
			break;
 800b36a:	e7f7      	b.n	800b35c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b36c:	4a13      	ldr	r2, [pc, #76]	; (800b3bc <UnSetupDMAInterrupts+0x80>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d002      	beq.n	800b378 <UnSetupDMAInterrupts+0x3c>
 800b372:	4a13      	ldr	r2, [pc, #76]	; (800b3c0 <UnSetupDMAInterrupts+0x84>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d1f1      	bne.n	800b35c <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b378:	200b      	movs	r0, #11
 800b37a:	f005 fdcd 	bl	8010f18 <HAL_NVIC_DisableIRQ>
}
 800b37e:	e7ed      	b.n	800b35c <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b380:	4a10      	ldr	r2, [pc, #64]	; (800b3c4 <UnSetupDMAInterrupts+0x88>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d0ee      	beq.n	800b364 <UnSetupDMAInterrupts+0x28>
 800b386:	d909      	bls.n	800b39c <UnSetupDMAInterrupts+0x60>
 800b388:	4a0f      	ldr	r2, [pc, #60]	; (800b3c8 <UnSetupDMAInterrupts+0x8c>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d0f4      	beq.n	800b378 <UnSetupDMAInterrupts+0x3c>
 800b38e:	4a0f      	ldr	r2, [pc, #60]	; (800b3cc <UnSetupDMAInterrupts+0x90>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d0f1      	beq.n	800b378 <UnSetupDMAInterrupts+0x3c>
 800b394:	4a0e      	ldr	r2, [pc, #56]	; (800b3d0 <UnSetupDMAInterrupts+0x94>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d1e0      	bne.n	800b35c <UnSetupDMAInterrupts+0x20>
 800b39a:	e7ed      	b.n	800b378 <UnSetupDMAInterrupts+0x3c>
 800b39c:	4a0d      	ldr	r2, [pc, #52]	; (800b3d4 <UnSetupDMAInterrupts+0x98>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d0ea      	beq.n	800b378 <UnSetupDMAInterrupts+0x3c>
 800b3a2:	4a0d      	ldr	r2, [pc, #52]	; (800b3d8 <UnSetupDMAInterrupts+0x9c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d0dd      	beq.n	800b364 <UnSetupDMAInterrupts+0x28>
 800b3a8:	e7d8      	b.n	800b35c <UnSetupDMAInterrupts+0x20>
 800b3aa:	46c0      	nop			; (mov r8, r8)
 800b3ac:	4002006c 	.word	0x4002006c
 800b3b0:	40020030 	.word	0x40020030
 800b3b4:	40020008 	.word	0x40020008
 800b3b8:	4002001c 	.word	0x4002001c
 800b3bc:	40020044 	.word	0x40020044
 800b3c0:	40020058 	.word	0x40020058
 800b3c4:	4002041c 	.word	0x4002041c
 800b3c8:	40020444 	.word	0x40020444
 800b3cc:	40020458 	.word	0x40020458
 800b3d0:	40020430 	.word	0x40020430
 800b3d4:	40020080 	.word	0x40020080
 800b3d8:	40020408 	.word	0x40020408

0800b3dc <DMA_MSG_TX_UnSetup>:
{	
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b3e0:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b3e2:	f7ff ffab 	bl	800b33c <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b3e6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b3ec:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b3ee:	bd10      	pop	{r4, pc}

0800b3f0 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b3f0:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b3f2:	6803      	ldr	r3, [r0, #0]
 800b3f4:	4abd      	ldr	r2, [pc, #756]	; (800b6ec <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d02f      	beq.n	800b45a <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b3fa:	4abd      	ldr	r2, [pc, #756]	; (800b6f0 <RemapAndLinkDMAtoUARTRx+0x300>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d100      	bne.n	800b402 <RemapAndLinkDMAtoUARTRx+0x12>
 800b400:	e087      	b.n	800b512 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b402:	4abc      	ldr	r2, [pc, #752]	; (800b6f4 <RemapAndLinkDMAtoUARTRx+0x304>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d100      	bne.n	800b40a <RemapAndLinkDMAtoUARTRx+0x1a>
 800b408:	e0dc      	b.n	800b5c4 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b40a:	4abb      	ldr	r2, [pc, #748]	; (800b6f8 <RemapAndLinkDMAtoUARTRx+0x308>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d000      	beq.n	800b412 <RemapAndLinkDMAtoUARTRx+0x22>
 800b410:	e18a      	b.n	800b728 <RemapAndLinkDMAtoUARTRx+0x338>
 800b412:	680b      	ldr	r3, [r1, #0]
 800b414:	4ab9      	ldr	r2, [pc, #740]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b416:	4293      	cmp	r3, r2
 800b418:	d100      	bne.n	800b41c <RemapAndLinkDMAtoUARTRx+0x2c>
 800b41a:	e12d      	b.n	800b678 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b41c:	4ab8      	ldr	r2, [pc, #736]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d100      	bne.n	800b424 <RemapAndLinkDMAtoUARTRx+0x34>
 800b422:	e134      	b.n	800b68e <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b424:	4ab7      	ldr	r2, [pc, #732]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d100      	bne.n	800b42c <RemapAndLinkDMAtoUARTRx+0x3c>
 800b42a:	e13c      	b.n	800b6a6 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b42c:	4ab6      	ldr	r2, [pc, #728]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d100      	bne.n	800b434 <RemapAndLinkDMAtoUARTRx+0x44>
 800b432:	e144      	b.n	800b6be <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b434:	4ab5      	ldr	r2, [pc, #724]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d100      	bne.n	800b43c <RemapAndLinkDMAtoUARTRx+0x4c>
 800b43a:	e14c      	b.n	800b6d6 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b43c:	4ab4      	ldr	r2, [pc, #720]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d11e      	bne.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b442:	4ab4      	ldr	r2, [pc, #720]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b444:	23a8      	movs	r3, #168	; 0xa8
 800b446:	58d4      	ldr	r4, [r2, r3]
 800b448:	4db3      	ldr	r5, [pc, #716]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b44a:	402c      	ands	r4, r5
 800b44c:	50d4      	str	r4, [r2, r3]
 800b44e:	58d5      	ldr	r5, [r2, r3]
 800b450:	24b0      	movs	r4, #176	; 0xb0
 800b452:	0124      	lsls	r4, r4, #4
 800b454:	432c      	orrs	r4, r5
 800b456:	50d4      	str	r4, [r2, r3]
 800b458:	e012      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b45a:	680b      	ldr	r3, [r1, #0]
 800b45c:	4aa7      	ldr	r2, [pc, #668]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d011      	beq.n	800b486 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b462:	4aa7      	ldr	r2, [pc, #668]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d019      	beq.n	800b49c <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b468:	4aa6      	ldr	r2, [pc, #664]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d022      	beq.n	800b4b4 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b46e:	4aa6      	ldr	r2, [pc, #664]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d02b      	beq.n	800b4cc <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b474:	4aa5      	ldr	r2, [pc, #660]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d034      	beq.n	800b4e4 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b47a:	4aa5      	ldr	r2, [pc, #660]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d03c      	beq.n	800b4fa <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b480:	6641      	str	r1, [r0, #100]	; 0x64
 800b482:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b484:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b486:	4aa5      	ldr	r2, [pc, #660]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b488:	23a8      	movs	r3, #168	; 0xa8
 800b48a:	58d4      	ldr	r4, [r2, r3]
 800b48c:	250f      	movs	r5, #15
 800b48e:	43ac      	bics	r4, r5
 800b490:	50d4      	str	r4, [r2, r3]
 800b492:	58d4      	ldr	r4, [r2, r3]
 800b494:	3d07      	subs	r5, #7
 800b496:	432c      	orrs	r4, r5
 800b498:	50d4      	str	r4, [r2, r3]
 800b49a:	e7f1      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b49c:	4a9f      	ldr	r2, [pc, #636]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b49e:	23a8      	movs	r3, #168	; 0xa8
 800b4a0:	58d4      	ldr	r4, [r2, r3]
 800b4a2:	4d9d      	ldr	r5, [pc, #628]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b4a4:	402c      	ands	r4, r5
 800b4a6:	50d4      	str	r4, [r2, r3]
 800b4a8:	58d5      	ldr	r5, [r2, r3]
 800b4aa:	2480      	movs	r4, #128	; 0x80
 800b4ac:	0124      	lsls	r4, r4, #4
 800b4ae:	432c      	orrs	r4, r5
 800b4b0:	50d4      	str	r4, [r2, r3]
 800b4b2:	e7e5      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b4b4:	4a99      	ldr	r2, [pc, #612]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b4b6:	23a8      	movs	r3, #168	; 0xa8
 800b4b8:	58d4      	ldr	r4, [r2, r3]
 800b4ba:	4d99      	ldr	r5, [pc, #612]	; (800b720 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b4bc:	402c      	ands	r4, r5
 800b4be:	50d4      	str	r4, [r2, r3]
 800b4c0:	58d5      	ldr	r5, [r2, r3]
 800b4c2:	2480      	movs	r4, #128	; 0x80
 800b4c4:	0324      	lsls	r4, r4, #12
 800b4c6:	432c      	orrs	r4, r5
 800b4c8:	50d4      	str	r4, [r2, r3]
 800b4ca:	e7d9      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b4cc:	4a93      	ldr	r2, [pc, #588]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b4ce:	23a8      	movs	r3, #168	; 0xa8
 800b4d0:	58d4      	ldr	r4, [r2, r3]
 800b4d2:	4d94      	ldr	r5, [pc, #592]	; (800b724 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b4d4:	402c      	ands	r4, r5
 800b4d6:	50d4      	str	r4, [r2, r3]
 800b4d8:	58d5      	ldr	r5, [r2, r3]
 800b4da:	2480      	movs	r4, #128	; 0x80
 800b4dc:	0424      	lsls	r4, r4, #16
 800b4de:	432c      	orrs	r4, r5
 800b4e0:	50d4      	str	r4, [r2, r3]
 800b4e2:	e7cd      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b4e4:	4a8b      	ldr	r2, [pc, #556]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b4e6:	23a8      	movs	r3, #168	; 0xa8
 800b4e8:	58d4      	ldr	r4, [r2, r3]
 800b4ea:	25f0      	movs	r5, #240	; 0xf0
 800b4ec:	43ac      	bics	r4, r5
 800b4ee:	50d4      	str	r4, [r2, r3]
 800b4f0:	58d4      	ldr	r4, [r2, r3]
 800b4f2:	3d70      	subs	r5, #112	; 0x70
 800b4f4:	432c      	orrs	r4, r5
 800b4f6:	50d4      	str	r4, [r2, r3]
 800b4f8:	e7c2      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b4fa:	4a86      	ldr	r2, [pc, #536]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b4fc:	23a8      	movs	r3, #168	; 0xa8
 800b4fe:	58d4      	ldr	r4, [r2, r3]
 800b500:	4d85      	ldr	r5, [pc, #532]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b502:	402c      	ands	r4, r5
 800b504:	50d4      	str	r4, [r2, r3]
 800b506:	58d5      	ldr	r5, [r2, r3]
 800b508:	2480      	movs	r4, #128	; 0x80
 800b50a:	0124      	lsls	r4, r4, #4
 800b50c:	432c      	orrs	r4, r5
 800b50e:	50d4      	str	r4, [r2, r3]
 800b510:	e7b6      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b512:	680b      	ldr	r3, [r1, #0]
 800b514:	4a79      	ldr	r2, [pc, #484]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d01a      	beq.n	800b550 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b51a:	4a79      	ldr	r2, [pc, #484]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d022      	beq.n	800b566 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b520:	4a78      	ldr	r2, [pc, #480]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d02b      	beq.n	800b57e <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b526:	4a78      	ldr	r2, [pc, #480]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d034      	beq.n	800b596 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b52c:	4a77      	ldr	r2, [pc, #476]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d03d      	beq.n	800b5ae <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b532:	4a77      	ldr	r2, [pc, #476]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d1a3      	bne.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b538:	4a76      	ldr	r2, [pc, #472]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b53a:	23a8      	movs	r3, #168	; 0xa8
 800b53c:	58d4      	ldr	r4, [r2, r3]
 800b53e:	4d76      	ldr	r5, [pc, #472]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b540:	402c      	ands	r4, r5
 800b542:	50d4      	str	r4, [r2, r3]
 800b544:	58d5      	ldr	r5, [r2, r3]
 800b546:	2490      	movs	r4, #144	; 0x90
 800b548:	0124      	lsls	r4, r4, #4
 800b54a:	432c      	orrs	r4, r5
 800b54c:	50d4      	str	r4, [r2, r3]
 800b54e:	e797      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b550:	4a72      	ldr	r2, [pc, #456]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b552:	23a8      	movs	r3, #168	; 0xa8
 800b554:	58d4      	ldr	r4, [r2, r3]
 800b556:	250f      	movs	r5, #15
 800b558:	43ac      	bics	r4, r5
 800b55a:	50d4      	str	r4, [r2, r3]
 800b55c:	58d4      	ldr	r4, [r2, r3]
 800b55e:	3d06      	subs	r5, #6
 800b560:	432c      	orrs	r4, r5
 800b562:	50d4      	str	r4, [r2, r3]
 800b564:	e78c      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b566:	4a6d      	ldr	r2, [pc, #436]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b568:	23a8      	movs	r3, #168	; 0xa8
 800b56a:	58d4      	ldr	r4, [r2, r3]
 800b56c:	4d6a      	ldr	r5, [pc, #424]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b56e:	402c      	ands	r4, r5
 800b570:	50d4      	str	r4, [r2, r3]
 800b572:	58d5      	ldr	r5, [r2, r3]
 800b574:	2490      	movs	r4, #144	; 0x90
 800b576:	0124      	lsls	r4, r4, #4
 800b578:	432c      	orrs	r4, r5
 800b57a:	50d4      	str	r4, [r2, r3]
 800b57c:	e780      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b57e:	4a67      	ldr	r2, [pc, #412]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b580:	23a8      	movs	r3, #168	; 0xa8
 800b582:	58d4      	ldr	r4, [r2, r3]
 800b584:	4d66      	ldr	r5, [pc, #408]	; (800b720 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b586:	402c      	ands	r4, r5
 800b588:	50d4      	str	r4, [r2, r3]
 800b58a:	58d5      	ldr	r5, [r2, r3]
 800b58c:	2490      	movs	r4, #144	; 0x90
 800b58e:	0324      	lsls	r4, r4, #12
 800b590:	432c      	orrs	r4, r5
 800b592:	50d4      	str	r4, [r2, r3]
 800b594:	e774      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b596:	4a61      	ldr	r2, [pc, #388]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b598:	23a8      	movs	r3, #168	; 0xa8
 800b59a:	58d4      	ldr	r4, [r2, r3]
 800b59c:	4d61      	ldr	r5, [pc, #388]	; (800b724 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b59e:	402c      	ands	r4, r5
 800b5a0:	50d4      	str	r4, [r2, r3]
 800b5a2:	58d5      	ldr	r5, [r2, r3]
 800b5a4:	2490      	movs	r4, #144	; 0x90
 800b5a6:	0424      	lsls	r4, r4, #16
 800b5a8:	432c      	orrs	r4, r5
 800b5aa:	50d4      	str	r4, [r2, r3]
 800b5ac:	e768      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b5ae:	4a59      	ldr	r2, [pc, #356]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b5b0:	23a8      	movs	r3, #168	; 0xa8
 800b5b2:	58d4      	ldr	r4, [r2, r3]
 800b5b4:	25f0      	movs	r5, #240	; 0xf0
 800b5b6:	43ac      	bics	r4, r5
 800b5b8:	50d4      	str	r4, [r2, r3]
 800b5ba:	58d4      	ldr	r4, [r2, r3]
 800b5bc:	3d60      	subs	r5, #96	; 0x60
 800b5be:	432c      	orrs	r4, r5
 800b5c0:	50d4      	str	r4, [r2, r3]
 800b5c2:	e75d      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b5c4:	680b      	ldr	r3, [r1, #0]
 800b5c6:	4a4d      	ldr	r2, [pc, #308]	; (800b6fc <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d01b      	beq.n	800b604 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b5cc:	4a4c      	ldr	r2, [pc, #304]	; (800b700 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d023      	beq.n	800b61a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b5d2:	4a4c      	ldr	r2, [pc, #304]	; (800b704 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d02c      	beq.n	800b632 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b5d8:	4a4b      	ldr	r2, [pc, #300]	; (800b708 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b5da:	4293      	cmp	r3, r2
 800b5dc:	d035      	beq.n	800b64a <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b5de:	4a4b      	ldr	r2, [pc, #300]	; (800b70c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d03e      	beq.n	800b662 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b5e4:	4a4a      	ldr	r2, [pc, #296]	; (800b710 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d000      	beq.n	800b5ec <RemapAndLinkDMAtoUARTRx+0x1fc>
 800b5ea:	e749      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b5ec:	4a49      	ldr	r2, [pc, #292]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b5ee:	23a8      	movs	r3, #168	; 0xa8
 800b5f0:	58d4      	ldr	r4, [r2, r3]
 800b5f2:	4d49      	ldr	r5, [pc, #292]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b5f4:	402c      	ands	r4, r5
 800b5f6:	50d4      	str	r4, [r2, r3]
 800b5f8:	58d5      	ldr	r5, [r2, r3]
 800b5fa:	24a0      	movs	r4, #160	; 0xa0
 800b5fc:	0124      	lsls	r4, r4, #4
 800b5fe:	432c      	orrs	r4, r5
 800b600:	50d4      	str	r4, [r2, r3]
 800b602:	e73d      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b604:	4a45      	ldr	r2, [pc, #276]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b606:	23a8      	movs	r3, #168	; 0xa8
 800b608:	58d4      	ldr	r4, [r2, r3]
 800b60a:	250f      	movs	r5, #15
 800b60c:	43ac      	bics	r4, r5
 800b60e:	50d4      	str	r4, [r2, r3]
 800b610:	58d4      	ldr	r4, [r2, r3]
 800b612:	3d05      	subs	r5, #5
 800b614:	432c      	orrs	r4, r5
 800b616:	50d4      	str	r4, [r2, r3]
 800b618:	e732      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b61a:	4a40      	ldr	r2, [pc, #256]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b61c:	23a8      	movs	r3, #168	; 0xa8
 800b61e:	58d4      	ldr	r4, [r2, r3]
 800b620:	4d3d      	ldr	r5, [pc, #244]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b622:	402c      	ands	r4, r5
 800b624:	50d4      	str	r4, [r2, r3]
 800b626:	58d5      	ldr	r5, [r2, r3]
 800b628:	24a0      	movs	r4, #160	; 0xa0
 800b62a:	0124      	lsls	r4, r4, #4
 800b62c:	432c      	orrs	r4, r5
 800b62e:	50d4      	str	r4, [r2, r3]
 800b630:	e726      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b632:	4a3a      	ldr	r2, [pc, #232]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b634:	23a8      	movs	r3, #168	; 0xa8
 800b636:	58d4      	ldr	r4, [r2, r3]
 800b638:	4d39      	ldr	r5, [pc, #228]	; (800b720 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b63a:	402c      	ands	r4, r5
 800b63c:	50d4      	str	r4, [r2, r3]
 800b63e:	58d5      	ldr	r5, [r2, r3]
 800b640:	24a0      	movs	r4, #160	; 0xa0
 800b642:	0324      	lsls	r4, r4, #12
 800b644:	432c      	orrs	r4, r5
 800b646:	50d4      	str	r4, [r2, r3]
 800b648:	e71a      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b64a:	4a34      	ldr	r2, [pc, #208]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b64c:	23a8      	movs	r3, #168	; 0xa8
 800b64e:	58d4      	ldr	r4, [r2, r3]
 800b650:	4d34      	ldr	r5, [pc, #208]	; (800b724 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b652:	402c      	ands	r4, r5
 800b654:	50d4      	str	r4, [r2, r3]
 800b656:	58d5      	ldr	r5, [r2, r3]
 800b658:	24a0      	movs	r4, #160	; 0xa0
 800b65a:	0424      	lsls	r4, r4, #16
 800b65c:	432c      	orrs	r4, r5
 800b65e:	50d4      	str	r4, [r2, r3]
 800b660:	e70e      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b662:	4a2c      	ldr	r2, [pc, #176]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b664:	23a8      	movs	r3, #168	; 0xa8
 800b666:	58d4      	ldr	r4, [r2, r3]
 800b668:	25f0      	movs	r5, #240	; 0xf0
 800b66a:	43ac      	bics	r4, r5
 800b66c:	50d4      	str	r4, [r2, r3]
 800b66e:	58d4      	ldr	r4, [r2, r3]
 800b670:	3d50      	subs	r5, #80	; 0x50
 800b672:	432c      	orrs	r4, r5
 800b674:	50d4      	str	r4, [r2, r3]
 800b676:	e703      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b678:	4a28      	ldr	r2, [pc, #160]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b67a:	23a8      	movs	r3, #168	; 0xa8
 800b67c:	58d4      	ldr	r4, [r2, r3]
 800b67e:	250f      	movs	r5, #15
 800b680:	43ac      	bics	r4, r5
 800b682:	50d4      	str	r4, [r2, r3]
 800b684:	58d4      	ldr	r4, [r2, r3]
 800b686:	3d04      	subs	r5, #4
 800b688:	432c      	orrs	r4, r5
 800b68a:	50d4      	str	r4, [r2, r3]
 800b68c:	e6f8      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b68e:	4a23      	ldr	r2, [pc, #140]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b690:	23a8      	movs	r3, #168	; 0xa8
 800b692:	58d4      	ldr	r4, [r2, r3]
 800b694:	4d20      	ldr	r5, [pc, #128]	; (800b718 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b696:	402c      	ands	r4, r5
 800b698:	50d4      	str	r4, [r2, r3]
 800b69a:	58d5      	ldr	r5, [r2, r3]
 800b69c:	24b0      	movs	r4, #176	; 0xb0
 800b69e:	0124      	lsls	r4, r4, #4
 800b6a0:	432c      	orrs	r4, r5
 800b6a2:	50d4      	str	r4, [r2, r3]
 800b6a4:	e6ec      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b6a6:	4a1d      	ldr	r2, [pc, #116]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b6a8:	23a8      	movs	r3, #168	; 0xa8
 800b6aa:	58d4      	ldr	r4, [r2, r3]
 800b6ac:	4d1c      	ldr	r5, [pc, #112]	; (800b720 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b6ae:	402c      	ands	r4, r5
 800b6b0:	50d4      	str	r4, [r2, r3]
 800b6b2:	58d5      	ldr	r5, [r2, r3]
 800b6b4:	24b0      	movs	r4, #176	; 0xb0
 800b6b6:	0324      	lsls	r4, r4, #12
 800b6b8:	432c      	orrs	r4, r5
 800b6ba:	50d4      	str	r4, [r2, r3]
 800b6bc:	e6e0      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b6be:	4a17      	ldr	r2, [pc, #92]	; (800b71c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b6c0:	23a8      	movs	r3, #168	; 0xa8
 800b6c2:	58d4      	ldr	r4, [r2, r3]
 800b6c4:	4d17      	ldr	r5, [pc, #92]	; (800b724 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b6c6:	402c      	ands	r4, r5
 800b6c8:	50d4      	str	r4, [r2, r3]
 800b6ca:	58d5      	ldr	r5, [r2, r3]
 800b6cc:	24b0      	movs	r4, #176	; 0xb0
 800b6ce:	0424      	lsls	r4, r4, #16
 800b6d0:	432c      	orrs	r4, r5
 800b6d2:	50d4      	str	r4, [r2, r3]
 800b6d4:	e6d4      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b6d6:	4a0f      	ldr	r2, [pc, #60]	; (800b714 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b6d8:	23a8      	movs	r3, #168	; 0xa8
 800b6da:	58d4      	ldr	r4, [r2, r3]
 800b6dc:	25f0      	movs	r5, #240	; 0xf0
 800b6de:	43ac      	bics	r4, r5
 800b6e0:	50d4      	str	r4, [r2, r3]
 800b6e2:	58d4      	ldr	r4, [r2, r3]
 800b6e4:	3d40      	subs	r5, #64	; 0x40
 800b6e6:	432c      	orrs	r4, r5
 800b6e8:	50d4      	str	r4, [r2, r3]
 800b6ea:	e6c9      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
 800b6ec:	40013800 	.word	0x40013800
 800b6f0:	40004400 	.word	0x40004400
 800b6f4:	40004800 	.word	0x40004800
 800b6f8:	40004c00 	.word	0x40004c00
 800b6fc:	40020008 	.word	0x40020008
 800b700:	40020030 	.word	0x40020030
 800b704:	40020058 	.word	0x40020058
 800b708:	4002006c 	.word	0x4002006c
 800b70c:	4002041c 	.word	0x4002041c
 800b710:	40020430 	.word	0x40020430
 800b714:	40020400 	.word	0x40020400
 800b718:	fffff0ff 	.word	0xfffff0ff
 800b71c:	40020000 	.word	0x40020000
 800b720:	fff0ffff 	.word	0xfff0ffff
 800b724:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b728:	4ab9      	ldr	r2, [pc, #740]	; (800ba10 <RemapAndLinkDMAtoUARTRx+0x620>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d159      	bne.n	800b7e2 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800b72e:	680b      	ldr	r3, [r1, #0]
 800b730:	4ab8      	ldr	r2, [pc, #736]	; (800ba14 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d01b      	beq.n	800b76e <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b736:	4ab8      	ldr	r2, [pc, #736]	; (800ba18 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d023      	beq.n	800b784 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b73c:	4ab7      	ldr	r2, [pc, #732]	; (800ba1c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d02c      	beq.n	800b79c <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b742:	4ab7      	ldr	r2, [pc, #732]	; (800ba20 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b744:	4293      	cmp	r3, r2
 800b746:	d035      	beq.n	800b7b4 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b748:	4ab6      	ldr	r2, [pc, #728]	; (800ba24 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d03e      	beq.n	800b7cc <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b74e:	4ab6      	ldr	r2, [pc, #728]	; (800ba28 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d000      	beq.n	800b756 <RemapAndLinkDMAtoUARTRx+0x366>
 800b754:	e694      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b756:	4ab5      	ldr	r2, [pc, #724]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b758:	23a8      	movs	r3, #168	; 0xa8
 800b75a:	58d4      	ldr	r4, [r2, r3]
 800b75c:	4db4      	ldr	r5, [pc, #720]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b75e:	402c      	ands	r4, r5
 800b760:	50d4      	str	r4, [r2, r3]
 800b762:	58d5      	ldr	r5, [r2, r3]
 800b764:	24c0      	movs	r4, #192	; 0xc0
 800b766:	0124      	lsls	r4, r4, #4
 800b768:	432c      	orrs	r4, r5
 800b76a:	50d4      	str	r4, [r2, r3]
 800b76c:	e688      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b76e:	4ab1      	ldr	r2, [pc, #708]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b770:	23a8      	movs	r3, #168	; 0xa8
 800b772:	58d4      	ldr	r4, [r2, r3]
 800b774:	250f      	movs	r5, #15
 800b776:	43ac      	bics	r4, r5
 800b778:	50d4      	str	r4, [r2, r3]
 800b77a:	58d4      	ldr	r4, [r2, r3]
 800b77c:	3d03      	subs	r5, #3
 800b77e:	432c      	orrs	r4, r5
 800b780:	50d4      	str	r4, [r2, r3]
 800b782:	e67d      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b784:	4aab      	ldr	r2, [pc, #684]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b786:	23a8      	movs	r3, #168	; 0xa8
 800b788:	58d4      	ldr	r4, [r2, r3]
 800b78a:	4da9      	ldr	r5, [pc, #676]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b78c:	402c      	ands	r4, r5
 800b78e:	50d4      	str	r4, [r2, r3]
 800b790:	58d5      	ldr	r5, [r2, r3]
 800b792:	24c0      	movs	r4, #192	; 0xc0
 800b794:	0124      	lsls	r4, r4, #4
 800b796:	432c      	orrs	r4, r5
 800b798:	50d4      	str	r4, [r2, r3]
 800b79a:	e671      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b79c:	4aa5      	ldr	r2, [pc, #660]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b79e:	23a8      	movs	r3, #168	; 0xa8
 800b7a0:	58d4      	ldr	r4, [r2, r3]
 800b7a2:	4da5      	ldr	r5, [pc, #660]	; (800ba38 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b7a4:	402c      	ands	r4, r5
 800b7a6:	50d4      	str	r4, [r2, r3]
 800b7a8:	58d5      	ldr	r5, [r2, r3]
 800b7aa:	24c0      	movs	r4, #192	; 0xc0
 800b7ac:	0324      	lsls	r4, r4, #12
 800b7ae:	432c      	orrs	r4, r5
 800b7b0:	50d4      	str	r4, [r2, r3]
 800b7b2:	e665      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b7b4:	4a9f      	ldr	r2, [pc, #636]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b7b6:	23a8      	movs	r3, #168	; 0xa8
 800b7b8:	58d4      	ldr	r4, [r2, r3]
 800b7ba:	4da0      	ldr	r5, [pc, #640]	; (800ba3c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b7bc:	402c      	ands	r4, r5
 800b7be:	50d4      	str	r4, [r2, r3]
 800b7c0:	58d5      	ldr	r5, [r2, r3]
 800b7c2:	24c0      	movs	r4, #192	; 0xc0
 800b7c4:	0424      	lsls	r4, r4, #16
 800b7c6:	432c      	orrs	r4, r5
 800b7c8:	50d4      	str	r4, [r2, r3]
 800b7ca:	e659      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b7cc:	4a97      	ldr	r2, [pc, #604]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b7ce:	23a8      	movs	r3, #168	; 0xa8
 800b7d0:	58d4      	ldr	r4, [r2, r3]
 800b7d2:	25f0      	movs	r5, #240	; 0xf0
 800b7d4:	43ac      	bics	r4, r5
 800b7d6:	50d4      	str	r4, [r2, r3]
 800b7d8:	58d4      	ldr	r4, [r2, r3]
 800b7da:	3d30      	subs	r5, #48	; 0x30
 800b7dc:	432c      	orrs	r4, r5
 800b7de:	50d4      	str	r4, [r2, r3]
 800b7e0:	e64e      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b7e2:	4a97      	ldr	r2, [pc, #604]	; (800ba40 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d159      	bne.n	800b89c <RemapAndLinkDMAtoUARTRx+0x4ac>
 800b7e8:	680b      	ldr	r3, [r1, #0]
 800b7ea:	4a8a      	ldr	r2, [pc, #552]	; (800ba14 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d01b      	beq.n	800b828 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b7f0:	4a89      	ldr	r2, [pc, #548]	; (800ba18 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d023      	beq.n	800b83e <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b7f6:	4a89      	ldr	r2, [pc, #548]	; (800ba1c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d02c      	beq.n	800b856 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b7fc:	4a88      	ldr	r2, [pc, #544]	; (800ba20 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d035      	beq.n	800b86e <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b802:	4a88      	ldr	r2, [pc, #544]	; (800ba24 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b804:	4293      	cmp	r3, r2
 800b806:	d03e      	beq.n	800b886 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b808:	4a87      	ldr	r2, [pc, #540]	; (800ba28 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d000      	beq.n	800b810 <RemapAndLinkDMAtoUARTRx+0x420>
 800b80e:	e637      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b810:	4a86      	ldr	r2, [pc, #536]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b812:	23a8      	movs	r3, #168	; 0xa8
 800b814:	58d4      	ldr	r4, [r2, r3]
 800b816:	4d86      	ldr	r5, [pc, #536]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b818:	402c      	ands	r4, r5
 800b81a:	50d4      	str	r4, [r2, r3]
 800b81c:	58d5      	ldr	r5, [r2, r3]
 800b81e:	24d0      	movs	r4, #208	; 0xd0
 800b820:	0124      	lsls	r4, r4, #4
 800b822:	432c      	orrs	r4, r5
 800b824:	50d4      	str	r4, [r2, r3]
 800b826:	e62b      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b828:	4a82      	ldr	r2, [pc, #520]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b82a:	23a8      	movs	r3, #168	; 0xa8
 800b82c:	58d4      	ldr	r4, [r2, r3]
 800b82e:	250f      	movs	r5, #15
 800b830:	43ac      	bics	r4, r5
 800b832:	50d4      	str	r4, [r2, r3]
 800b834:	58d4      	ldr	r4, [r2, r3]
 800b836:	3d02      	subs	r5, #2
 800b838:	432c      	orrs	r4, r5
 800b83a:	50d4      	str	r4, [r2, r3]
 800b83c:	e620      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b83e:	4a7d      	ldr	r2, [pc, #500]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b840:	23a8      	movs	r3, #168	; 0xa8
 800b842:	58d4      	ldr	r4, [r2, r3]
 800b844:	4d7a      	ldr	r5, [pc, #488]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b846:	402c      	ands	r4, r5
 800b848:	50d4      	str	r4, [r2, r3]
 800b84a:	58d5      	ldr	r5, [r2, r3]
 800b84c:	24d0      	movs	r4, #208	; 0xd0
 800b84e:	0124      	lsls	r4, r4, #4
 800b850:	432c      	orrs	r4, r5
 800b852:	50d4      	str	r4, [r2, r3]
 800b854:	e614      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b856:	4a77      	ldr	r2, [pc, #476]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b858:	23a8      	movs	r3, #168	; 0xa8
 800b85a:	58d4      	ldr	r4, [r2, r3]
 800b85c:	4d76      	ldr	r5, [pc, #472]	; (800ba38 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b85e:	402c      	ands	r4, r5
 800b860:	50d4      	str	r4, [r2, r3]
 800b862:	58d5      	ldr	r5, [r2, r3]
 800b864:	24d0      	movs	r4, #208	; 0xd0
 800b866:	0324      	lsls	r4, r4, #12
 800b868:	432c      	orrs	r4, r5
 800b86a:	50d4      	str	r4, [r2, r3]
 800b86c:	e608      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b86e:	4a71      	ldr	r2, [pc, #452]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b870:	23a8      	movs	r3, #168	; 0xa8
 800b872:	58d4      	ldr	r4, [r2, r3]
 800b874:	4d71      	ldr	r5, [pc, #452]	; (800ba3c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b876:	402c      	ands	r4, r5
 800b878:	50d4      	str	r4, [r2, r3]
 800b87a:	58d5      	ldr	r5, [r2, r3]
 800b87c:	24d0      	movs	r4, #208	; 0xd0
 800b87e:	0424      	lsls	r4, r4, #16
 800b880:	432c      	orrs	r4, r5
 800b882:	50d4      	str	r4, [r2, r3]
 800b884:	e5fc      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b886:	4a69      	ldr	r2, [pc, #420]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b888:	23a8      	movs	r3, #168	; 0xa8
 800b88a:	58d4      	ldr	r4, [r2, r3]
 800b88c:	25f0      	movs	r5, #240	; 0xf0
 800b88e:	43ac      	bics	r4, r5
 800b890:	50d4      	str	r4, [r2, r3]
 800b892:	58d4      	ldr	r4, [r2, r3]
 800b894:	3d20      	subs	r5, #32
 800b896:	432c      	orrs	r4, r5
 800b898:	50d4      	str	r4, [r2, r3]
 800b89a:	e5f1      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b89c:	4a69      	ldr	r2, [pc, #420]	; (800ba44 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d159      	bne.n	800b956 <RemapAndLinkDMAtoUARTRx+0x566>
 800b8a2:	680b      	ldr	r3, [r1, #0]
 800b8a4:	4a5b      	ldr	r2, [pc, #364]	; (800ba14 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d01b      	beq.n	800b8e2 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b8aa:	4a5b      	ldr	r2, [pc, #364]	; (800ba18 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d023      	beq.n	800b8f8 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b8b0:	4a5a      	ldr	r2, [pc, #360]	; (800ba1c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d02c      	beq.n	800b910 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b8b6:	4a5a      	ldr	r2, [pc, #360]	; (800ba20 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d035      	beq.n	800b928 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b8bc:	4a59      	ldr	r2, [pc, #356]	; (800ba24 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d03e      	beq.n	800b940 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b8c2:	4a59      	ldr	r2, [pc, #356]	; (800ba28 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d000      	beq.n	800b8ca <RemapAndLinkDMAtoUARTRx+0x4da>
 800b8c8:	e5da      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b8ca:	4a58      	ldr	r2, [pc, #352]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b8cc:	23a8      	movs	r3, #168	; 0xa8
 800b8ce:	58d4      	ldr	r4, [r2, r3]
 800b8d0:	4d57      	ldr	r5, [pc, #348]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b8d2:	402c      	ands	r4, r5
 800b8d4:	50d4      	str	r4, [r2, r3]
 800b8d6:	58d5      	ldr	r5, [r2, r3]
 800b8d8:	24e0      	movs	r4, #224	; 0xe0
 800b8da:	0124      	lsls	r4, r4, #4
 800b8dc:	432c      	orrs	r4, r5
 800b8de:	50d4      	str	r4, [r2, r3]
 800b8e0:	e5ce      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b8e2:	4a54      	ldr	r2, [pc, #336]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b8e4:	23a8      	movs	r3, #168	; 0xa8
 800b8e6:	58d4      	ldr	r4, [r2, r3]
 800b8e8:	250f      	movs	r5, #15
 800b8ea:	43ac      	bics	r4, r5
 800b8ec:	50d4      	str	r4, [r2, r3]
 800b8ee:	58d4      	ldr	r4, [r2, r3]
 800b8f0:	3d01      	subs	r5, #1
 800b8f2:	432c      	orrs	r4, r5
 800b8f4:	50d4      	str	r4, [r2, r3]
 800b8f6:	e5c3      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b8f8:	4a4e      	ldr	r2, [pc, #312]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b8fa:	23a8      	movs	r3, #168	; 0xa8
 800b8fc:	58d4      	ldr	r4, [r2, r3]
 800b8fe:	4d4c      	ldr	r5, [pc, #304]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b900:	402c      	ands	r4, r5
 800b902:	50d4      	str	r4, [r2, r3]
 800b904:	58d5      	ldr	r5, [r2, r3]
 800b906:	24e0      	movs	r4, #224	; 0xe0
 800b908:	0124      	lsls	r4, r4, #4
 800b90a:	432c      	orrs	r4, r5
 800b90c:	50d4      	str	r4, [r2, r3]
 800b90e:	e5b7      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b910:	4a48      	ldr	r2, [pc, #288]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b912:	23a8      	movs	r3, #168	; 0xa8
 800b914:	58d4      	ldr	r4, [r2, r3]
 800b916:	4d48      	ldr	r5, [pc, #288]	; (800ba38 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b918:	402c      	ands	r4, r5
 800b91a:	50d4      	str	r4, [r2, r3]
 800b91c:	58d5      	ldr	r5, [r2, r3]
 800b91e:	24e0      	movs	r4, #224	; 0xe0
 800b920:	0324      	lsls	r4, r4, #12
 800b922:	432c      	orrs	r4, r5
 800b924:	50d4      	str	r4, [r2, r3]
 800b926:	e5ab      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b928:	4a42      	ldr	r2, [pc, #264]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b92a:	23a8      	movs	r3, #168	; 0xa8
 800b92c:	58d4      	ldr	r4, [r2, r3]
 800b92e:	4d43      	ldr	r5, [pc, #268]	; (800ba3c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b930:	402c      	ands	r4, r5
 800b932:	50d4      	str	r4, [r2, r3]
 800b934:	58d5      	ldr	r5, [r2, r3]
 800b936:	24e0      	movs	r4, #224	; 0xe0
 800b938:	0424      	lsls	r4, r4, #16
 800b93a:	432c      	orrs	r4, r5
 800b93c:	50d4      	str	r4, [r2, r3]
 800b93e:	e59f      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b940:	4a3a      	ldr	r2, [pc, #232]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b942:	23a8      	movs	r3, #168	; 0xa8
 800b944:	58d4      	ldr	r4, [r2, r3]
 800b946:	25f0      	movs	r5, #240	; 0xf0
 800b948:	43ac      	bics	r4, r5
 800b94a:	50d4      	str	r4, [r2, r3]
 800b94c:	58d4      	ldr	r4, [r2, r3]
 800b94e:	3d10      	subs	r5, #16
 800b950:	432c      	orrs	r4, r5
 800b952:	50d4      	str	r4, [r2, r3]
 800b954:	e594      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b956:	4a3c      	ldr	r2, [pc, #240]	; (800ba48 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d000      	beq.n	800b95e <RemapAndLinkDMAtoUARTRx+0x56e>
 800b95c:	e590      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
 800b95e:	680b      	ldr	r3, [r1, #0]
 800b960:	4a2c      	ldr	r2, [pc, #176]	; (800ba14 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d01b      	beq.n	800b99e <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b966:	4a2c      	ldr	r2, [pc, #176]	; (800ba18 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d022      	beq.n	800b9b2 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b96c:	4a2b      	ldr	r2, [pc, #172]	; (800ba1c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d02b      	beq.n	800b9ca <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b972:	4a2b      	ldr	r2, [pc, #172]	; (800ba20 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d034      	beq.n	800b9e2 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b978:	4a2a      	ldr	r2, [pc, #168]	; (800ba24 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d03d      	beq.n	800b9fa <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b97e:	4a2a      	ldr	r2, [pc, #168]	; (800ba28 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d000      	beq.n	800b986 <RemapAndLinkDMAtoUARTRx+0x596>
 800b984:	e57c      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b986:	4a29      	ldr	r2, [pc, #164]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b988:	23a8      	movs	r3, #168	; 0xa8
 800b98a:	58d4      	ldr	r4, [r2, r3]
 800b98c:	4d28      	ldr	r5, [pc, #160]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b98e:	402c      	ands	r4, r5
 800b990:	50d4      	str	r4, [r2, r3]
 800b992:	58d5      	ldr	r5, [r2, r3]
 800b994:	24f0      	movs	r4, #240	; 0xf0
 800b996:	0124      	lsls	r4, r4, #4
 800b998:	432c      	orrs	r4, r5
 800b99a:	50d4      	str	r4, [r2, r3]
 800b99c:	e570      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b99e:	4a25      	ldr	r2, [pc, #148]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b9a0:	23a8      	movs	r3, #168	; 0xa8
 800b9a2:	58d5      	ldr	r5, [r2, r3]
 800b9a4:	260f      	movs	r6, #15
 800b9a6:	43b5      	bics	r5, r6
 800b9a8:	50d5      	str	r5, [r2, r3]
 800b9aa:	58d4      	ldr	r4, [r2, r3]
 800b9ac:	4334      	orrs	r4, r6
 800b9ae:	50d4      	str	r4, [r2, r3]
 800b9b0:	e566      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b9b2:	4a20      	ldr	r2, [pc, #128]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b9b4:	23a8      	movs	r3, #168	; 0xa8
 800b9b6:	58d4      	ldr	r4, [r2, r3]
 800b9b8:	4d1d      	ldr	r5, [pc, #116]	; (800ba30 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b9ba:	402c      	ands	r4, r5
 800b9bc:	50d4      	str	r4, [r2, r3]
 800b9be:	58d5      	ldr	r5, [r2, r3]
 800b9c0:	24f0      	movs	r4, #240	; 0xf0
 800b9c2:	0124      	lsls	r4, r4, #4
 800b9c4:	432c      	orrs	r4, r5
 800b9c6:	50d4      	str	r4, [r2, r3]
 800b9c8:	e55a      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b9ca:	4a1a      	ldr	r2, [pc, #104]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b9cc:	23a8      	movs	r3, #168	; 0xa8
 800b9ce:	58d4      	ldr	r4, [r2, r3]
 800b9d0:	4d19      	ldr	r5, [pc, #100]	; (800ba38 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b9d2:	402c      	ands	r4, r5
 800b9d4:	50d4      	str	r4, [r2, r3]
 800b9d6:	58d5      	ldr	r5, [r2, r3]
 800b9d8:	24f0      	movs	r4, #240	; 0xf0
 800b9da:	0324      	lsls	r4, r4, #12
 800b9dc:	432c      	orrs	r4, r5
 800b9de:	50d4      	str	r4, [r2, r3]
 800b9e0:	e54e      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b9e2:	4a14      	ldr	r2, [pc, #80]	; (800ba34 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b9e4:	23a8      	movs	r3, #168	; 0xa8
 800b9e6:	58d4      	ldr	r4, [r2, r3]
 800b9e8:	4d14      	ldr	r5, [pc, #80]	; (800ba3c <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b9ea:	402c      	ands	r4, r5
 800b9ec:	50d4      	str	r4, [r2, r3]
 800b9ee:	58d5      	ldr	r5, [r2, r3]
 800b9f0:	24f0      	movs	r4, #240	; 0xf0
 800b9f2:	0424      	lsls	r4, r4, #16
 800b9f4:	432c      	orrs	r4, r5
 800b9f6:	50d4      	str	r4, [r2, r3]
 800b9f8:	e542      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b9fa:	4a0c      	ldr	r2, [pc, #48]	; (800ba2c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b9fc:	23a8      	movs	r3, #168	; 0xa8
 800b9fe:	58d5      	ldr	r5, [r2, r3]
 800ba00:	26f0      	movs	r6, #240	; 0xf0
 800ba02:	43b5      	bics	r5, r6
 800ba04:	50d5      	str	r5, [r2, r3]
 800ba06:	58d4      	ldr	r4, [r2, r3]
 800ba08:	4334      	orrs	r4, r6
 800ba0a:	50d4      	str	r4, [r2, r3]
 800ba0c:	e538      	b.n	800b480 <RemapAndLinkDMAtoUARTRx+0x90>
 800ba0e:	46c0      	nop			; (mov r8, r8)
 800ba10:	40005000 	.word	0x40005000
 800ba14:	40020008 	.word	0x40020008
 800ba18:	40020030 	.word	0x40020030
 800ba1c:	40020058 	.word	0x40020058
 800ba20:	4002006c 	.word	0x4002006c
 800ba24:	4002041c 	.word	0x4002041c
 800ba28:	40020430 	.word	0x40020430
 800ba2c:	40020400 	.word	0x40020400
 800ba30:	fffff0ff 	.word	0xfffff0ff
 800ba34:	40020000 	.word	0x40020000
 800ba38:	fff0ffff 	.word	0xfff0ffff
 800ba3c:	ff0fffff 	.word	0xff0fffff
 800ba40:	40011400 	.word	0x40011400
 800ba44:	40011800 	.word	0x40011800
 800ba48:	40011c00 	.word	0x40011c00

0800ba4c <DMA_MSG_RX_Setup>:
{	
 800ba4c:	b570      	push	{r4, r5, r6, lr}
 800ba4e:	0004      	movs	r4, r0
 800ba50:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800ba52:	f7ff fccd 	bl	800b3f0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800ba56:	2100      	movs	r1, #0
 800ba58:	0028      	movs	r0, r5
 800ba5a:	f7ff fc13 	bl	800b284 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800ba5e:	0020      	movs	r0, r4
 800ba60:	f7ff fb12 	bl	800b088 <GetPort>
 800ba64:	3801      	subs	r0, #1
 800ba66:	0041      	lsls	r1, r0, #1
 800ba68:	1809      	adds	r1, r1, r0
 800ba6a:	0189      	lsls	r1, r1, #6
 800ba6c:	4803      	ldr	r0, [pc, #12]	; (800ba7c <DMA_MSG_RX_Setup+0x30>)
 800ba6e:	1809      	adds	r1, r1, r0
 800ba70:	22c0      	movs	r2, #192	; 0xc0
 800ba72:	0020      	movs	r0, r4
 800ba74:	f007 fedc 	bl	8013830 <HAL_UART_Receive_DMA>
}
 800ba78:	bd70      	pop	{r4, r5, r6, pc}
 800ba7a:	46c0      	nop			; (mov r8, r8)
 800ba7c:	20001348 	.word	0x20001348

0800ba80 <SetupMessagingRxDMAs>:
{	
 800ba80:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800ba82:	4b1b      	ldr	r3, [pc, #108]	; (800baf0 <SetupMessagingRxDMAs+0x70>)
 800ba84:	785b      	ldrb	r3, [r3, #1]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d014      	beq.n	800bab4 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800ba8a:	4b19      	ldr	r3, [pc, #100]	; (800baf0 <SetupMessagingRxDMAs+0x70>)
 800ba8c:	789b      	ldrb	r3, [r3, #2]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d015      	beq.n	800babe <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800ba92:	4b17      	ldr	r3, [pc, #92]	; (800baf0 <SetupMessagingRxDMAs+0x70>)
 800ba94:	78db      	ldrb	r3, [r3, #3]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d016      	beq.n	800bac8 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800ba9a:	4b15      	ldr	r3, [pc, #84]	; (800baf0 <SetupMessagingRxDMAs+0x70>)
 800ba9c:	791b      	ldrb	r3, [r3, #4]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d017      	beq.n	800bad2 <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800baa2:	4b13      	ldr	r3, [pc, #76]	; (800baf0 <SetupMessagingRxDMAs+0x70>)
 800baa4:	795b      	ldrb	r3, [r3, #5]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d018      	beq.n	800badc <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800baaa:	4b11      	ldr	r3, [pc, #68]	; (800baf0 <SetupMessagingRxDMAs+0x70>)
 800baac:	799b      	ldrb	r3, [r3, #6]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d019      	beq.n	800bae6 <SetupMessagingRxDMAs+0x66>
}
 800bab2:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800bab4:	490f      	ldr	r1, [pc, #60]	; (800baf4 <SetupMessagingRxDMAs+0x74>)
 800bab6:	4810      	ldr	r0, [pc, #64]	; (800baf8 <SetupMessagingRxDMAs+0x78>)
 800bab8:	f7ff ffc8 	bl	800ba4c <DMA_MSG_RX_Setup>
 800babc:	e7e5      	b.n	800ba8a <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800babe:	490f      	ldr	r1, [pc, #60]	; (800bafc <SetupMessagingRxDMAs+0x7c>)
 800bac0:	480f      	ldr	r0, [pc, #60]	; (800bb00 <SetupMessagingRxDMAs+0x80>)
 800bac2:	f7ff ffc3 	bl	800ba4c <DMA_MSG_RX_Setup>
 800bac6:	e7e4      	b.n	800ba92 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800bac8:	490e      	ldr	r1, [pc, #56]	; (800bb04 <SetupMessagingRxDMAs+0x84>)
 800baca:	480f      	ldr	r0, [pc, #60]	; (800bb08 <SetupMessagingRxDMAs+0x88>)
 800bacc:	f7ff ffbe 	bl	800ba4c <DMA_MSG_RX_Setup>
 800bad0:	e7e3      	b.n	800ba9a <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800bad2:	490e      	ldr	r1, [pc, #56]	; (800bb0c <SetupMessagingRxDMAs+0x8c>)
 800bad4:	480e      	ldr	r0, [pc, #56]	; (800bb10 <SetupMessagingRxDMAs+0x90>)
 800bad6:	f7ff ffb9 	bl	800ba4c <DMA_MSG_RX_Setup>
 800bada:	e7e2      	b.n	800baa2 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800badc:	490d      	ldr	r1, [pc, #52]	; (800bb14 <SetupMessagingRxDMAs+0x94>)
 800bade:	480e      	ldr	r0, [pc, #56]	; (800bb18 <SetupMessagingRxDMAs+0x98>)
 800bae0:	f7ff ffb4 	bl	800ba4c <DMA_MSG_RX_Setup>
 800bae4:	e7e1      	b.n	800baaa <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800bae6:	490d      	ldr	r1, [pc, #52]	; (800bb1c <SetupMessagingRxDMAs+0x9c>)
 800bae8:	480d      	ldr	r0, [pc, #52]	; (800bb20 <SetupMessagingRxDMAs+0xa0>)
 800baea:	f7ff ffaf 	bl	800ba4c <DMA_MSG_RX_Setup>
}
 800baee:	e7e0      	b.n	800bab2 <SetupMessagingRxDMAs+0x32>
 800baf0:	2000116c 	.word	0x2000116c
 800baf4:	20001b74 	.word	0x20001b74
 800baf8:	20007120 	.word	0x20007120
 800bafc:	20001bac 	.word	0x20001bac
 800bb00:	20007194 	.word	0x20007194
 800bb04:	20001be4 	.word	0x20001be4
 800bb08:	200070a4 	.word	0x200070a4
 800bb0c:	20001c1c 	.word	0x20001c1c
 800bb10:	20006f3c 	.word	0x20006f3c
 800bb14:	20001c54 	.word	0x20001c54
 800bb18:	2000702c 	.word	0x2000702c
 800bb1c:	20001c8c 	.word	0x20001c8c
 800bb20:	20006fb4 	.word	0x20006fb4

0800bb24 <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800bb24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb26:	b083      	sub	sp, #12
 800bb28:	0004      	movs	r4, r0
	StopStreamDMA(port);
 800bb2a:	f7ff fb6b 	bl	800b204 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800bb2e:	9401      	str	r4, [sp, #4]
 800bb30:	3c01      	subs	r4, #1
 800bb32:	00e7      	lsls	r7, r4, #3
 800bb34:	1b3d      	subs	r5, r7, r4
 800bb36:	00ed      	lsls	r5, r5, #3
 800bb38:	4b0f      	ldr	r3, [pc, #60]	; (800bb78 <SwitchStreamDMAToMsg+0x54>)
 800bb3a:	18ed      	adds	r5, r5, r3
 800bb3c:	4e0f      	ldr	r6, [pc, #60]	; (800bb7c <SwitchStreamDMAToMsg+0x58>)
 800bb3e:	1b3b      	subs	r3, r7, r4
 800bb40:	00db      	lsls	r3, r3, #3
 800bb42:	5999      	ldr	r1, [r3, r6]
 800bb44:	0028      	movs	r0, r5
 800bb46:	f7ff facf 	bl	800b0e8 <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800bb4a:	1b3b      	subs	r3, r7, r4
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	18f3      	adds	r3, r6, r3
 800bb50:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800bb52:	f7ff fa99 	bl	800b088 <GetPort>
 800bb56:	2300      	movs	r3, #0
 800bb58:	4a09      	ldr	r2, [pc, #36]	; (800bb80 <SwitchStreamDMAToMsg+0x5c>)
 800bb5a:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800bb5c:	1b3f      	subs	r7, r7, r4
 800bb5e:	00ff      	lsls	r7, r7, #3
 800bb60:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] = 0;
 800bb62:	00a4      	lsls	r4, r4, #2
 800bb64:	4a07      	ldr	r2, [pc, #28]	; (800bb84 <SwitchStreamDMAToMsg+0x60>)
 800bb66:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800bb68:	9801      	ldr	r0, [sp, #4]
 800bb6a:	f002 fd9b 	bl	800e6a4 <GetUart>
 800bb6e:	0029      	movs	r1, r5
 800bb70:	f7ff ff6c 	bl	800ba4c <DMA_MSG_RX_Setup>
}
 800bb74:	b003      	add	sp, #12
 800bb76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb78:	20001b74 	.word	0x20001b74
 800bb7c:	20001d6c 	.word	0x20001d6c
 800bb80:	2000116c 	.word	0x2000116c
 800bb84:	20001820 	.word	0x20001820

0800bb88 <DMA_STREAM_Setup>:
{	
 800bb88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb8a:	0005      	movs	r5, r0
 800bb8c:	000f      	movs	r7, r1
 800bb8e:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800bb90:	f7ff fa7a 	bl	800b088 <GetPort>
	hDMA = &streamDMA[port-1];
 800bb94:	3801      	subs	r0, #1
 800bb96:	00c4      	lsls	r4, r0, #3
 800bb98:	1a24      	subs	r4, r4, r0
 800bb9a:	00e4      	lsls	r4, r4, #3
 800bb9c:	4809      	ldr	r0, [pc, #36]	; (800bbc4 <DMA_STREAM_Setup+0x3c>)
 800bb9e:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800bba0:	0021      	movs	r1, r4
 800bba2:	0028      	movs	r0, r5
 800bba4:	f7ff fc24 	bl	800b3f0 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800bba8:	2101      	movs	r1, #1
 800bbaa:	0020      	movs	r0, r4
 800bbac:	f7ff fb6a 	bl	800b284 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800bbb0:	2369      	movs	r3, #105	; 0x69
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	3128      	adds	r1, #40	; 0x28
 800bbba:	0032      	movs	r2, r6
 800bbbc:	0028      	movs	r0, r5
 800bbbe:	f007 fe37 	bl	8013830 <HAL_UART_Receive_DMA>
}
 800bbc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbc4:	20001d6c 	.word	0x20001d6c

0800bbc8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800bbc8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800bbca:	6803      	ldr	r3, [r0, #0]
 800bbcc:	4abd      	ldr	r2, [pc, #756]	; (800bec4 <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d02f      	beq.n	800bc32 <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800bbd2:	4abd      	ldr	r2, [pc, #756]	; (800bec8 <RemapAndLinkDMAtoUARTTx+0x300>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d100      	bne.n	800bbda <RemapAndLinkDMAtoUARTTx+0x12>
 800bbd8:	e087      	b.n	800bcea <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800bbda:	4abc      	ldr	r2, [pc, #752]	; (800becc <RemapAndLinkDMAtoUARTTx+0x304>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d100      	bne.n	800bbe2 <RemapAndLinkDMAtoUARTTx+0x1a>
 800bbe0:	e0dc      	b.n	800bd9c <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800bbe2:	4abb      	ldr	r2, [pc, #748]	; (800bed0 <RemapAndLinkDMAtoUARTTx+0x308>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d000      	beq.n	800bbea <RemapAndLinkDMAtoUARTTx+0x22>
 800bbe8:	e18a      	b.n	800bf00 <RemapAndLinkDMAtoUARTTx+0x338>
 800bbea:	680b      	ldr	r3, [r1, #0]
 800bbec:	4ab9      	ldr	r2, [pc, #740]	; (800bed4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d100      	bne.n	800bbf4 <RemapAndLinkDMAtoUARTTx+0x2c>
 800bbf2:	e12d      	b.n	800be50 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800bbf4:	4ab8      	ldr	r2, [pc, #736]	; (800bed8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d100      	bne.n	800bbfc <RemapAndLinkDMAtoUARTTx+0x34>
 800bbfa:	e134      	b.n	800be66 <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800bbfc:	4ab7      	ldr	r2, [pc, #732]	; (800bedc <RemapAndLinkDMAtoUARTTx+0x314>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d100      	bne.n	800bc04 <RemapAndLinkDMAtoUARTTx+0x3c>
 800bc02:	e13c      	b.n	800be7e <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800bc04:	4ab6      	ldr	r2, [pc, #728]	; (800bee0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d100      	bne.n	800bc0c <RemapAndLinkDMAtoUARTTx+0x44>
 800bc0a:	e144      	b.n	800be96 <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800bc0c:	4ab5      	ldr	r2, [pc, #724]	; (800bee4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d100      	bne.n	800bc14 <RemapAndLinkDMAtoUARTTx+0x4c>
 800bc12:	e14b      	b.n	800beac <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800bc14:	4ab4      	ldr	r2, [pc, #720]	; (800bee8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800bc16:	4293      	cmp	r3, r2
 800bc18:	d11e      	bne.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800bc1a:	4ab4      	ldr	r2, [pc, #720]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bc1c:	23a8      	movs	r3, #168	; 0xa8
 800bc1e:	58d4      	ldr	r4, [r2, r3]
 800bc20:	4db3      	ldr	r5, [pc, #716]	; (800bef0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800bc22:	402c      	ands	r4, r5
 800bc24:	50d4      	str	r4, [r2, r3]
 800bc26:	58d5      	ldr	r5, [r2, r3]
 800bc28:	24b0      	movs	r4, #176	; 0xb0
 800bc2a:	0324      	lsls	r4, r4, #12
 800bc2c:	432c      	orrs	r4, r5
 800bc2e:	50d4      	str	r4, [r2, r3]
 800bc30:	e012      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800bc32:	680b      	ldr	r3, [r1, #0]
 800bc34:	4aa7      	ldr	r2, [pc, #668]	; (800bed4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d011      	beq.n	800bc5e <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800bc3a:	4aa7      	ldr	r2, [pc, #668]	; (800bed8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d019      	beq.n	800bc74 <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800bc40:	4aa6      	ldr	r2, [pc, #664]	; (800bedc <RemapAndLinkDMAtoUARTTx+0x314>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d022      	beq.n	800bc8c <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800bc46:	4aa6      	ldr	r2, [pc, #664]	; (800bee0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d02b      	beq.n	800bca4 <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800bc4c:	4aa5      	ldr	r2, [pc, #660]	; (800bee4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d033      	beq.n	800bcba <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800bc52:	4aa5      	ldr	r2, [pc, #660]	; (800bee8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800bc54:	4293      	cmp	r3, r2
 800bc56:	d03c      	beq.n	800bcd2 <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800bc58:	6601      	str	r1, [r0, #96]	; 0x60
 800bc5a:	6248      	str	r0, [r1, #36]	; 0x24
}
 800bc5c:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800bc5e:	4aa5      	ldr	r2, [pc, #660]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc60:	23a8      	movs	r3, #168	; 0xa8
 800bc62:	58d4      	ldr	r4, [r2, r3]
 800bc64:	25f0      	movs	r5, #240	; 0xf0
 800bc66:	43ac      	bics	r4, r5
 800bc68:	50d4      	str	r4, [r2, r3]
 800bc6a:	58d4      	ldr	r4, [r2, r3]
 800bc6c:	3d70      	subs	r5, #112	; 0x70
 800bc6e:	432c      	orrs	r4, r5
 800bc70:	50d4      	str	r4, [r2, r3]
 800bc72:	e7f1      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800bc74:	4a9f      	ldr	r2, [pc, #636]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc76:	23a8      	movs	r3, #168	; 0xa8
 800bc78:	58d4      	ldr	r4, [r2, r3]
 800bc7a:	4d9f      	ldr	r5, [pc, #636]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bc7c:	402c      	ands	r4, r5
 800bc7e:	50d4      	str	r4, [r2, r3]
 800bc80:	58d5      	ldr	r5, [r2, r3]
 800bc82:	2480      	movs	r4, #128	; 0x80
 800bc84:	0224      	lsls	r4, r4, #8
 800bc86:	432c      	orrs	r4, r5
 800bc88:	50d4      	str	r4, [r2, r3]
 800bc8a:	e7e5      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800bc8c:	4a99      	ldr	r2, [pc, #612]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bc8e:	23a8      	movs	r3, #168	; 0xa8
 800bc90:	58d4      	ldr	r4, [r2, r3]
 800bc92:	4d9a      	ldr	r5, [pc, #616]	; (800befc <RemapAndLinkDMAtoUARTTx+0x334>)
 800bc94:	402c      	ands	r4, r5
 800bc96:	50d4      	str	r4, [r2, r3]
 800bc98:	58d5      	ldr	r5, [r2, r3]
 800bc9a:	2480      	movs	r4, #128	; 0x80
 800bc9c:	0524      	lsls	r4, r4, #20
 800bc9e:	432c      	orrs	r4, r5
 800bca0:	50d4      	str	r4, [r2, r3]
 800bca2:	e7d9      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800bca4:	4a91      	ldr	r2, [pc, #580]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bca6:	23a8      	movs	r3, #168	; 0xa8
 800bca8:	58d4      	ldr	r4, [r2, r3]
 800bcaa:	250f      	movs	r5, #15
 800bcac:	43ac      	bics	r4, r5
 800bcae:	50d4      	str	r4, [r2, r3]
 800bcb0:	58d4      	ldr	r4, [r2, r3]
 800bcb2:	3d07      	subs	r5, #7
 800bcb4:	432c      	orrs	r4, r5
 800bcb6:	50d4      	str	r4, [r2, r3]
 800bcb8:	e7ce      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800bcba:	4a8c      	ldr	r2, [pc, #560]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bcbc:	23a8      	movs	r3, #168	; 0xa8
 800bcbe:	58d4      	ldr	r4, [r2, r3]
 800bcc0:	4d8d      	ldr	r5, [pc, #564]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bcc2:	402c      	ands	r4, r5
 800bcc4:	50d4      	str	r4, [r2, r3]
 800bcc6:	58d5      	ldr	r5, [r2, r3]
 800bcc8:	2480      	movs	r4, #128	; 0x80
 800bcca:	0224      	lsls	r4, r4, #8
 800bccc:	432c      	orrs	r4, r5
 800bcce:	50d4      	str	r4, [r2, r3]
 800bcd0:	e7c2      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800bcd2:	4a86      	ldr	r2, [pc, #536]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bcd4:	23a8      	movs	r3, #168	; 0xa8
 800bcd6:	58d4      	ldr	r4, [r2, r3]
 800bcd8:	4d85      	ldr	r5, [pc, #532]	; (800bef0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800bcda:	402c      	ands	r4, r5
 800bcdc:	50d4      	str	r4, [r2, r3]
 800bcde:	58d5      	ldr	r5, [r2, r3]
 800bce0:	2480      	movs	r4, #128	; 0x80
 800bce2:	0324      	lsls	r4, r4, #12
 800bce4:	432c      	orrs	r4, r5
 800bce6:	50d4      	str	r4, [r2, r3]
 800bce8:	e7b6      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800bcea:	680b      	ldr	r3, [r1, #0]
 800bcec:	4a79      	ldr	r2, [pc, #484]	; (800bed4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d01a      	beq.n	800bd28 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800bcf2:	4a79      	ldr	r2, [pc, #484]	; (800bed8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d022      	beq.n	800bd3e <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800bcf8:	4a78      	ldr	r2, [pc, #480]	; (800bedc <RemapAndLinkDMAtoUARTTx+0x314>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d02b      	beq.n	800bd56 <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800bcfe:	4a78      	ldr	r2, [pc, #480]	; (800bee0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d034      	beq.n	800bd6e <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800bd04:	4a77      	ldr	r2, [pc, #476]	; (800bee4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d03c      	beq.n	800bd84 <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800bd0a:	4a77      	ldr	r2, [pc, #476]	; (800bee8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d1a3      	bne.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800bd10:	4a76      	ldr	r2, [pc, #472]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bd12:	23a8      	movs	r3, #168	; 0xa8
 800bd14:	58d4      	ldr	r4, [r2, r3]
 800bd16:	4d76      	ldr	r5, [pc, #472]	; (800bef0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800bd18:	402c      	ands	r4, r5
 800bd1a:	50d4      	str	r4, [r2, r3]
 800bd1c:	58d5      	ldr	r5, [r2, r3]
 800bd1e:	2490      	movs	r4, #144	; 0x90
 800bd20:	0324      	lsls	r4, r4, #12
 800bd22:	432c      	orrs	r4, r5
 800bd24:	50d4      	str	r4, [r2, r3]
 800bd26:	e797      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800bd28:	4a72      	ldr	r2, [pc, #456]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bd2a:	23a8      	movs	r3, #168	; 0xa8
 800bd2c:	58d4      	ldr	r4, [r2, r3]
 800bd2e:	25f0      	movs	r5, #240	; 0xf0
 800bd30:	43ac      	bics	r4, r5
 800bd32:	50d4      	str	r4, [r2, r3]
 800bd34:	58d4      	ldr	r4, [r2, r3]
 800bd36:	3d60      	subs	r5, #96	; 0x60
 800bd38:	432c      	orrs	r4, r5
 800bd3a:	50d4      	str	r4, [r2, r3]
 800bd3c:	e78c      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800bd3e:	4a6d      	ldr	r2, [pc, #436]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bd40:	23a8      	movs	r3, #168	; 0xa8
 800bd42:	58d4      	ldr	r4, [r2, r3]
 800bd44:	4d6c      	ldr	r5, [pc, #432]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bd46:	402c      	ands	r4, r5
 800bd48:	50d4      	str	r4, [r2, r3]
 800bd4a:	58d5      	ldr	r5, [r2, r3]
 800bd4c:	2490      	movs	r4, #144	; 0x90
 800bd4e:	0224      	lsls	r4, r4, #8
 800bd50:	432c      	orrs	r4, r5
 800bd52:	50d4      	str	r4, [r2, r3]
 800bd54:	e780      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800bd56:	4a67      	ldr	r2, [pc, #412]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bd58:	23a8      	movs	r3, #168	; 0xa8
 800bd5a:	58d4      	ldr	r4, [r2, r3]
 800bd5c:	4d67      	ldr	r5, [pc, #412]	; (800befc <RemapAndLinkDMAtoUARTTx+0x334>)
 800bd5e:	402c      	ands	r4, r5
 800bd60:	50d4      	str	r4, [r2, r3]
 800bd62:	58d5      	ldr	r5, [r2, r3]
 800bd64:	2490      	movs	r4, #144	; 0x90
 800bd66:	0524      	lsls	r4, r4, #20
 800bd68:	432c      	orrs	r4, r5
 800bd6a:	50d4      	str	r4, [r2, r3]
 800bd6c:	e774      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800bd6e:	4a5f      	ldr	r2, [pc, #380]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bd70:	23a8      	movs	r3, #168	; 0xa8
 800bd72:	58d4      	ldr	r4, [r2, r3]
 800bd74:	250f      	movs	r5, #15
 800bd76:	43ac      	bics	r4, r5
 800bd78:	50d4      	str	r4, [r2, r3]
 800bd7a:	58d4      	ldr	r4, [r2, r3]
 800bd7c:	3d06      	subs	r5, #6
 800bd7e:	432c      	orrs	r4, r5
 800bd80:	50d4      	str	r4, [r2, r3]
 800bd82:	e769      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800bd84:	4a59      	ldr	r2, [pc, #356]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bd86:	23a8      	movs	r3, #168	; 0xa8
 800bd88:	58d4      	ldr	r4, [r2, r3]
 800bd8a:	4d5b      	ldr	r5, [pc, #364]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bd8c:	402c      	ands	r4, r5
 800bd8e:	50d4      	str	r4, [r2, r3]
 800bd90:	58d5      	ldr	r5, [r2, r3]
 800bd92:	2490      	movs	r4, #144	; 0x90
 800bd94:	0224      	lsls	r4, r4, #8
 800bd96:	432c      	orrs	r4, r5
 800bd98:	50d4      	str	r4, [r2, r3]
 800bd9a:	e75d      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800bd9c:	680b      	ldr	r3, [r1, #0]
 800bd9e:	4a4d      	ldr	r2, [pc, #308]	; (800bed4 <RemapAndLinkDMAtoUARTTx+0x30c>)
 800bda0:	4293      	cmp	r3, r2
 800bda2:	d01b      	beq.n	800bddc <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800bda4:	4a4c      	ldr	r2, [pc, #304]	; (800bed8 <RemapAndLinkDMAtoUARTTx+0x310>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d023      	beq.n	800bdf2 <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800bdaa:	4a4c      	ldr	r2, [pc, #304]	; (800bedc <RemapAndLinkDMAtoUARTTx+0x314>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d02c      	beq.n	800be0a <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800bdb0:	4a4b      	ldr	r2, [pc, #300]	; (800bee0 <RemapAndLinkDMAtoUARTTx+0x318>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d035      	beq.n	800be22 <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800bdb6:	4a4b      	ldr	r2, [pc, #300]	; (800bee4 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d03d      	beq.n	800be38 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800bdbc:	4a4a      	ldr	r2, [pc, #296]	; (800bee8 <RemapAndLinkDMAtoUARTTx+0x320>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d000      	beq.n	800bdc4 <RemapAndLinkDMAtoUARTTx+0x1fc>
 800bdc2:	e749      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800bdc4:	4a49      	ldr	r2, [pc, #292]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800bdc6:	23a8      	movs	r3, #168	; 0xa8
 800bdc8:	58d4      	ldr	r4, [r2, r3]
 800bdca:	4d49      	ldr	r5, [pc, #292]	; (800bef0 <RemapAndLinkDMAtoUARTTx+0x328>)
 800bdcc:	402c      	ands	r4, r5
 800bdce:	50d4      	str	r4, [r2, r3]
 800bdd0:	58d5      	ldr	r5, [r2, r3]
 800bdd2:	24a0      	movs	r4, #160	; 0xa0
 800bdd4:	0324      	lsls	r4, r4, #12
 800bdd6:	432c      	orrs	r4, r5
 800bdd8:	50d4      	str	r4, [r2, r3]
 800bdda:	e73d      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800bddc:	4a45      	ldr	r2, [pc, #276]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bdde:	23a8      	movs	r3, #168	; 0xa8
 800bde0:	58d4      	ldr	r4, [r2, r3]
 800bde2:	25f0      	movs	r5, #240	; 0xf0
 800bde4:	43ac      	bics	r4, r5
 800bde6:	50d4      	str	r4, [r2, r3]
 800bde8:	58d4      	ldr	r4, [r2, r3]
 800bdea:	3d50      	subs	r5, #80	; 0x50
 800bdec:	432c      	orrs	r4, r5
 800bdee:	50d4      	str	r4, [r2, r3]
 800bdf0:	e732      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800bdf2:	4a40      	ldr	r2, [pc, #256]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800bdf4:	23a8      	movs	r3, #168	; 0xa8
 800bdf6:	58d4      	ldr	r4, [r2, r3]
 800bdf8:	4d3f      	ldr	r5, [pc, #252]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800bdfa:	402c      	ands	r4, r5
 800bdfc:	50d4      	str	r4, [r2, r3]
 800bdfe:	58d5      	ldr	r5, [r2, r3]
 800be00:	24a0      	movs	r4, #160	; 0xa0
 800be02:	0224      	lsls	r4, r4, #8
 800be04:	432c      	orrs	r4, r5
 800be06:	50d4      	str	r4, [r2, r3]
 800be08:	e726      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800be0a:	4a3a      	ldr	r2, [pc, #232]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800be0c:	23a8      	movs	r3, #168	; 0xa8
 800be0e:	58d4      	ldr	r4, [r2, r3]
 800be10:	4d3a      	ldr	r5, [pc, #232]	; (800befc <RemapAndLinkDMAtoUARTTx+0x334>)
 800be12:	402c      	ands	r4, r5
 800be14:	50d4      	str	r4, [r2, r3]
 800be16:	58d5      	ldr	r5, [r2, r3]
 800be18:	24a0      	movs	r4, #160	; 0xa0
 800be1a:	0524      	lsls	r4, r4, #20
 800be1c:	432c      	orrs	r4, r5
 800be1e:	50d4      	str	r4, [r2, r3]
 800be20:	e71a      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800be22:	4a32      	ldr	r2, [pc, #200]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800be24:	23a8      	movs	r3, #168	; 0xa8
 800be26:	58d4      	ldr	r4, [r2, r3]
 800be28:	250f      	movs	r5, #15
 800be2a:	43ac      	bics	r4, r5
 800be2c:	50d4      	str	r4, [r2, r3]
 800be2e:	58d4      	ldr	r4, [r2, r3]
 800be30:	3d05      	subs	r5, #5
 800be32:	432c      	orrs	r4, r5
 800be34:	50d4      	str	r4, [r2, r3]
 800be36:	e70f      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800be38:	4a2c      	ldr	r2, [pc, #176]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800be3a:	23a8      	movs	r3, #168	; 0xa8
 800be3c:	58d4      	ldr	r4, [r2, r3]
 800be3e:	4d2e      	ldr	r5, [pc, #184]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800be40:	402c      	ands	r4, r5
 800be42:	50d4      	str	r4, [r2, r3]
 800be44:	58d5      	ldr	r5, [r2, r3]
 800be46:	24a0      	movs	r4, #160	; 0xa0
 800be48:	0224      	lsls	r4, r4, #8
 800be4a:	432c      	orrs	r4, r5
 800be4c:	50d4      	str	r4, [r2, r3]
 800be4e:	e703      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800be50:	4a28      	ldr	r2, [pc, #160]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800be52:	23a8      	movs	r3, #168	; 0xa8
 800be54:	58d4      	ldr	r4, [r2, r3]
 800be56:	25f0      	movs	r5, #240	; 0xf0
 800be58:	43ac      	bics	r4, r5
 800be5a:	50d4      	str	r4, [r2, r3]
 800be5c:	58d4      	ldr	r4, [r2, r3]
 800be5e:	3d40      	subs	r5, #64	; 0x40
 800be60:	432c      	orrs	r4, r5
 800be62:	50d4      	str	r4, [r2, r3]
 800be64:	e6f8      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800be66:	4a23      	ldr	r2, [pc, #140]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800be68:	23a8      	movs	r3, #168	; 0xa8
 800be6a:	58d4      	ldr	r4, [r2, r3]
 800be6c:	4d22      	ldr	r5, [pc, #136]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800be6e:	402c      	ands	r4, r5
 800be70:	50d4      	str	r4, [r2, r3]
 800be72:	58d5      	ldr	r5, [r2, r3]
 800be74:	24b0      	movs	r4, #176	; 0xb0
 800be76:	0224      	lsls	r4, r4, #8
 800be78:	432c      	orrs	r4, r5
 800be7a:	50d4      	str	r4, [r2, r3]
 800be7c:	e6ec      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800be7e:	4a1d      	ldr	r2, [pc, #116]	; (800bef4 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800be80:	23a8      	movs	r3, #168	; 0xa8
 800be82:	58d4      	ldr	r4, [r2, r3]
 800be84:	4d1d      	ldr	r5, [pc, #116]	; (800befc <RemapAndLinkDMAtoUARTTx+0x334>)
 800be86:	402c      	ands	r4, r5
 800be88:	50d4      	str	r4, [r2, r3]
 800be8a:	58d5      	ldr	r5, [r2, r3]
 800be8c:	24b0      	movs	r4, #176	; 0xb0
 800be8e:	0524      	lsls	r4, r4, #20
 800be90:	432c      	orrs	r4, r5
 800be92:	50d4      	str	r4, [r2, r3]
 800be94:	e6e0      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800be96:	4a15      	ldr	r2, [pc, #84]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800be98:	23a8      	movs	r3, #168	; 0xa8
 800be9a:	58d4      	ldr	r4, [r2, r3]
 800be9c:	250f      	movs	r5, #15
 800be9e:	43ac      	bics	r4, r5
 800bea0:	50d4      	str	r4, [r2, r3]
 800bea2:	58d4      	ldr	r4, [r2, r3]
 800bea4:	3d04      	subs	r5, #4
 800bea6:	432c      	orrs	r4, r5
 800bea8:	50d4      	str	r4, [r2, r3]
 800beaa:	e6d5      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800beac:	4a0f      	ldr	r2, [pc, #60]	; (800beec <RemapAndLinkDMAtoUARTTx+0x324>)
 800beae:	23a8      	movs	r3, #168	; 0xa8
 800beb0:	58d4      	ldr	r4, [r2, r3]
 800beb2:	4d11      	ldr	r5, [pc, #68]	; (800bef8 <RemapAndLinkDMAtoUARTTx+0x330>)
 800beb4:	402c      	ands	r4, r5
 800beb6:	50d4      	str	r4, [r2, r3]
 800beb8:	58d5      	ldr	r5, [r2, r3]
 800beba:	24b0      	movs	r4, #176	; 0xb0
 800bebc:	0224      	lsls	r4, r4, #8
 800bebe:	432c      	orrs	r4, r5
 800bec0:	50d4      	str	r4, [r2, r3]
 800bec2:	e6c9      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
 800bec4:	40013800 	.word	0x40013800
 800bec8:	40004400 	.word	0x40004400
 800becc:	40004800 	.word	0x40004800
 800bed0:	40004c00 	.word	0x40004c00
 800bed4:	4002001c 	.word	0x4002001c
 800bed8:	40020044 	.word	0x40020044
 800bedc:	40020080 	.word	0x40020080
 800bee0:	40020408 	.word	0x40020408
 800bee4:	40020444 	.word	0x40020444
 800bee8:	40020458 	.word	0x40020458
 800beec:	40020400 	.word	0x40020400
 800bef0:	fff0ffff 	.word	0xfff0ffff
 800bef4:	40020000 	.word	0x40020000
 800bef8:	ffff0fff 	.word	0xffff0fff
 800befc:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800bf00:	4ab9      	ldr	r2, [pc, #740]	; (800c1e8 <RemapAndLinkDMAtoUARTTx+0x620>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d159      	bne.n	800bfba <RemapAndLinkDMAtoUARTTx+0x3f2>
 800bf06:	680b      	ldr	r3, [r1, #0]
 800bf08:	4ab8      	ldr	r2, [pc, #736]	; (800c1ec <RemapAndLinkDMAtoUARTTx+0x624>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d01b      	beq.n	800bf46 <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800bf0e:	4ab8      	ldr	r2, [pc, #736]	; (800c1f0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d023      	beq.n	800bf5c <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800bf14:	4ab7      	ldr	r2, [pc, #732]	; (800c1f4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d02c      	beq.n	800bf74 <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800bf1a:	4ab7      	ldr	r2, [pc, #732]	; (800c1f8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d035      	beq.n	800bf8c <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800bf20:	4ab6      	ldr	r2, [pc, #728]	; (800c1fc <RemapAndLinkDMAtoUARTTx+0x634>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d03d      	beq.n	800bfa2 <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800bf26:	4ab6      	ldr	r2, [pc, #728]	; (800c200 <RemapAndLinkDMAtoUARTTx+0x638>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d000      	beq.n	800bf2e <RemapAndLinkDMAtoUARTTx+0x366>
 800bf2c:	e694      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800bf2e:	4ab5      	ldr	r2, [pc, #724]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bf30:	23a8      	movs	r3, #168	; 0xa8
 800bf32:	58d4      	ldr	r4, [r2, r3]
 800bf34:	4db4      	ldr	r5, [pc, #720]	; (800c208 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bf36:	402c      	ands	r4, r5
 800bf38:	50d4      	str	r4, [r2, r3]
 800bf3a:	58d5      	ldr	r5, [r2, r3]
 800bf3c:	24c0      	movs	r4, #192	; 0xc0
 800bf3e:	0324      	lsls	r4, r4, #12
 800bf40:	432c      	orrs	r4, r5
 800bf42:	50d4      	str	r4, [r2, r3]
 800bf44:	e688      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800bf46:	4ab1      	ldr	r2, [pc, #708]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800bf48:	23a8      	movs	r3, #168	; 0xa8
 800bf4a:	58d4      	ldr	r4, [r2, r3]
 800bf4c:	25f0      	movs	r5, #240	; 0xf0
 800bf4e:	43ac      	bics	r4, r5
 800bf50:	50d4      	str	r4, [r2, r3]
 800bf52:	58d4      	ldr	r4, [r2, r3]
 800bf54:	3d30      	subs	r5, #48	; 0x30
 800bf56:	432c      	orrs	r4, r5
 800bf58:	50d4      	str	r4, [r2, r3]
 800bf5a:	e67d      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800bf5c:	4aab      	ldr	r2, [pc, #684]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800bf5e:	23a8      	movs	r3, #168	; 0xa8
 800bf60:	58d4      	ldr	r4, [r2, r3]
 800bf62:	4dab      	ldr	r5, [pc, #684]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800bf64:	402c      	ands	r4, r5
 800bf66:	50d4      	str	r4, [r2, r3]
 800bf68:	58d5      	ldr	r5, [r2, r3]
 800bf6a:	24c0      	movs	r4, #192	; 0xc0
 800bf6c:	0224      	lsls	r4, r4, #8
 800bf6e:	432c      	orrs	r4, r5
 800bf70:	50d4      	str	r4, [r2, r3]
 800bf72:	e671      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800bf74:	4aa5      	ldr	r2, [pc, #660]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800bf76:	23a8      	movs	r3, #168	; 0xa8
 800bf78:	58d4      	ldr	r4, [r2, r3]
 800bf7a:	4da6      	ldr	r5, [pc, #664]	; (800c214 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800bf7c:	402c      	ands	r4, r5
 800bf7e:	50d4      	str	r4, [r2, r3]
 800bf80:	58d5      	ldr	r5, [r2, r3]
 800bf82:	24c0      	movs	r4, #192	; 0xc0
 800bf84:	0524      	lsls	r4, r4, #20
 800bf86:	432c      	orrs	r4, r5
 800bf88:	50d4      	str	r4, [r2, r3]
 800bf8a:	e665      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800bf8c:	4a9d      	ldr	r2, [pc, #628]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bf8e:	23a8      	movs	r3, #168	; 0xa8
 800bf90:	58d4      	ldr	r4, [r2, r3]
 800bf92:	250f      	movs	r5, #15
 800bf94:	43ac      	bics	r4, r5
 800bf96:	50d4      	str	r4, [r2, r3]
 800bf98:	58d4      	ldr	r4, [r2, r3]
 800bf9a:	3d03      	subs	r5, #3
 800bf9c:	432c      	orrs	r4, r5
 800bf9e:	50d4      	str	r4, [r2, r3]
 800bfa0:	e65a      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800bfa2:	4a98      	ldr	r2, [pc, #608]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bfa4:	23a8      	movs	r3, #168	; 0xa8
 800bfa6:	58d4      	ldr	r4, [r2, r3]
 800bfa8:	4d99      	ldr	r5, [pc, #612]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800bfaa:	402c      	ands	r4, r5
 800bfac:	50d4      	str	r4, [r2, r3]
 800bfae:	58d5      	ldr	r5, [r2, r3]
 800bfb0:	24c0      	movs	r4, #192	; 0xc0
 800bfb2:	0224      	lsls	r4, r4, #8
 800bfb4:	432c      	orrs	r4, r5
 800bfb6:	50d4      	str	r4, [r2, r3]
 800bfb8:	e64e      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800bfba:	4a97      	ldr	r2, [pc, #604]	; (800c218 <RemapAndLinkDMAtoUARTTx+0x650>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d159      	bne.n	800c074 <RemapAndLinkDMAtoUARTTx+0x4ac>
 800bfc0:	680b      	ldr	r3, [r1, #0]
 800bfc2:	4a8a      	ldr	r2, [pc, #552]	; (800c1ec <RemapAndLinkDMAtoUARTTx+0x624>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d01b      	beq.n	800c000 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800bfc8:	4a89      	ldr	r2, [pc, #548]	; (800c1f0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d023      	beq.n	800c016 <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800bfce:	4a89      	ldr	r2, [pc, #548]	; (800c1f4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d02c      	beq.n	800c02e <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800bfd4:	4a88      	ldr	r2, [pc, #544]	; (800c1f8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d035      	beq.n	800c046 <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800bfda:	4a88      	ldr	r2, [pc, #544]	; (800c1fc <RemapAndLinkDMAtoUARTTx+0x634>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d03d      	beq.n	800c05c <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800bfe0:	4a87      	ldr	r2, [pc, #540]	; (800c200 <RemapAndLinkDMAtoUARTTx+0x638>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	d000      	beq.n	800bfe8 <RemapAndLinkDMAtoUARTTx+0x420>
 800bfe6:	e637      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800bfe8:	4a86      	ldr	r2, [pc, #536]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800bfea:	23a8      	movs	r3, #168	; 0xa8
 800bfec:	58d4      	ldr	r4, [r2, r3]
 800bfee:	4d86      	ldr	r5, [pc, #536]	; (800c208 <RemapAndLinkDMAtoUARTTx+0x640>)
 800bff0:	402c      	ands	r4, r5
 800bff2:	50d4      	str	r4, [r2, r3]
 800bff4:	58d5      	ldr	r5, [r2, r3]
 800bff6:	24d0      	movs	r4, #208	; 0xd0
 800bff8:	0324      	lsls	r4, r4, #12
 800bffa:	432c      	orrs	r4, r5
 800bffc:	50d4      	str	r4, [r2, r3]
 800bffe:	e62b      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800c000:	4a82      	ldr	r2, [pc, #520]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c002:	23a8      	movs	r3, #168	; 0xa8
 800c004:	58d4      	ldr	r4, [r2, r3]
 800c006:	25f0      	movs	r5, #240	; 0xf0
 800c008:	43ac      	bics	r4, r5
 800c00a:	50d4      	str	r4, [r2, r3]
 800c00c:	58d4      	ldr	r4, [r2, r3]
 800c00e:	3d20      	subs	r5, #32
 800c010:	432c      	orrs	r4, r5
 800c012:	50d4      	str	r4, [r2, r3]
 800c014:	e620      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800c016:	4a7d      	ldr	r2, [pc, #500]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c018:	23a8      	movs	r3, #168	; 0xa8
 800c01a:	58d4      	ldr	r4, [r2, r3]
 800c01c:	4d7c      	ldr	r5, [pc, #496]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c01e:	402c      	ands	r4, r5
 800c020:	50d4      	str	r4, [r2, r3]
 800c022:	58d5      	ldr	r5, [r2, r3]
 800c024:	24d0      	movs	r4, #208	; 0xd0
 800c026:	0224      	lsls	r4, r4, #8
 800c028:	432c      	orrs	r4, r5
 800c02a:	50d4      	str	r4, [r2, r3]
 800c02c:	e614      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800c02e:	4a77      	ldr	r2, [pc, #476]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c030:	23a8      	movs	r3, #168	; 0xa8
 800c032:	58d4      	ldr	r4, [r2, r3]
 800c034:	4d77      	ldr	r5, [pc, #476]	; (800c214 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c036:	402c      	ands	r4, r5
 800c038:	50d4      	str	r4, [r2, r3]
 800c03a:	58d5      	ldr	r5, [r2, r3]
 800c03c:	24d0      	movs	r4, #208	; 0xd0
 800c03e:	0524      	lsls	r4, r4, #20
 800c040:	432c      	orrs	r4, r5
 800c042:	50d4      	str	r4, [r2, r3]
 800c044:	e608      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800c046:	4a6f      	ldr	r2, [pc, #444]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c048:	23a8      	movs	r3, #168	; 0xa8
 800c04a:	58d4      	ldr	r4, [r2, r3]
 800c04c:	250f      	movs	r5, #15
 800c04e:	43ac      	bics	r4, r5
 800c050:	50d4      	str	r4, [r2, r3]
 800c052:	58d4      	ldr	r4, [r2, r3]
 800c054:	3d02      	subs	r5, #2
 800c056:	432c      	orrs	r4, r5
 800c058:	50d4      	str	r4, [r2, r3]
 800c05a:	e5fd      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800c05c:	4a69      	ldr	r2, [pc, #420]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c05e:	23a8      	movs	r3, #168	; 0xa8
 800c060:	58d4      	ldr	r4, [r2, r3]
 800c062:	4d6b      	ldr	r5, [pc, #428]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c064:	402c      	ands	r4, r5
 800c066:	50d4      	str	r4, [r2, r3]
 800c068:	58d5      	ldr	r5, [r2, r3]
 800c06a:	24d0      	movs	r4, #208	; 0xd0
 800c06c:	0224      	lsls	r4, r4, #8
 800c06e:	432c      	orrs	r4, r5
 800c070:	50d4      	str	r4, [r2, r3]
 800c072:	e5f1      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800c074:	4a69      	ldr	r2, [pc, #420]	; (800c21c <RemapAndLinkDMAtoUARTTx+0x654>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d159      	bne.n	800c12e <RemapAndLinkDMAtoUARTTx+0x566>
 800c07a:	680b      	ldr	r3, [r1, #0]
 800c07c:	4a5b      	ldr	r2, [pc, #364]	; (800c1ec <RemapAndLinkDMAtoUARTTx+0x624>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d01b      	beq.n	800c0ba <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800c082:	4a5b      	ldr	r2, [pc, #364]	; (800c1f0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d023      	beq.n	800c0d0 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800c088:	4a5a      	ldr	r2, [pc, #360]	; (800c1f4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d02c      	beq.n	800c0e8 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800c08e:	4a5a      	ldr	r2, [pc, #360]	; (800c1f8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d035      	beq.n	800c100 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800c094:	4a59      	ldr	r2, [pc, #356]	; (800c1fc <RemapAndLinkDMAtoUARTTx+0x634>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d03d      	beq.n	800c116 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800c09a:	4a59      	ldr	r2, [pc, #356]	; (800c200 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d000      	beq.n	800c0a2 <RemapAndLinkDMAtoUARTTx+0x4da>
 800c0a0:	e5da      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800c0a2:	4a58      	ldr	r2, [pc, #352]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c0a4:	23a8      	movs	r3, #168	; 0xa8
 800c0a6:	58d4      	ldr	r4, [r2, r3]
 800c0a8:	4d57      	ldr	r5, [pc, #348]	; (800c208 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c0aa:	402c      	ands	r4, r5
 800c0ac:	50d4      	str	r4, [r2, r3]
 800c0ae:	58d5      	ldr	r5, [r2, r3]
 800c0b0:	24e0      	movs	r4, #224	; 0xe0
 800c0b2:	0324      	lsls	r4, r4, #12
 800c0b4:	432c      	orrs	r4, r5
 800c0b6:	50d4      	str	r4, [r2, r3]
 800c0b8:	e5ce      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800c0ba:	4a54      	ldr	r2, [pc, #336]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c0bc:	23a8      	movs	r3, #168	; 0xa8
 800c0be:	58d4      	ldr	r4, [r2, r3]
 800c0c0:	25f0      	movs	r5, #240	; 0xf0
 800c0c2:	43ac      	bics	r4, r5
 800c0c4:	50d4      	str	r4, [r2, r3]
 800c0c6:	58d4      	ldr	r4, [r2, r3]
 800c0c8:	3d10      	subs	r5, #16
 800c0ca:	432c      	orrs	r4, r5
 800c0cc:	50d4      	str	r4, [r2, r3]
 800c0ce:	e5c3      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800c0d0:	4a4e      	ldr	r2, [pc, #312]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c0d2:	23a8      	movs	r3, #168	; 0xa8
 800c0d4:	58d4      	ldr	r4, [r2, r3]
 800c0d6:	4d4e      	ldr	r5, [pc, #312]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c0d8:	402c      	ands	r4, r5
 800c0da:	50d4      	str	r4, [r2, r3]
 800c0dc:	58d5      	ldr	r5, [r2, r3]
 800c0de:	24e0      	movs	r4, #224	; 0xe0
 800c0e0:	0224      	lsls	r4, r4, #8
 800c0e2:	432c      	orrs	r4, r5
 800c0e4:	50d4      	str	r4, [r2, r3]
 800c0e6:	e5b7      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800c0e8:	4a48      	ldr	r2, [pc, #288]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c0ea:	23a8      	movs	r3, #168	; 0xa8
 800c0ec:	58d4      	ldr	r4, [r2, r3]
 800c0ee:	4d49      	ldr	r5, [pc, #292]	; (800c214 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c0f0:	402c      	ands	r4, r5
 800c0f2:	50d4      	str	r4, [r2, r3]
 800c0f4:	58d5      	ldr	r5, [r2, r3]
 800c0f6:	24e0      	movs	r4, #224	; 0xe0
 800c0f8:	0524      	lsls	r4, r4, #20
 800c0fa:	432c      	orrs	r4, r5
 800c0fc:	50d4      	str	r4, [r2, r3]
 800c0fe:	e5ab      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800c100:	4a40      	ldr	r2, [pc, #256]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c102:	23a8      	movs	r3, #168	; 0xa8
 800c104:	58d4      	ldr	r4, [r2, r3]
 800c106:	250f      	movs	r5, #15
 800c108:	43ac      	bics	r4, r5
 800c10a:	50d4      	str	r4, [r2, r3]
 800c10c:	58d4      	ldr	r4, [r2, r3]
 800c10e:	3d01      	subs	r5, #1
 800c110:	432c      	orrs	r4, r5
 800c112:	50d4      	str	r4, [r2, r3]
 800c114:	e5a0      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800c116:	4a3b      	ldr	r2, [pc, #236]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c118:	23a8      	movs	r3, #168	; 0xa8
 800c11a:	58d4      	ldr	r4, [r2, r3]
 800c11c:	4d3c      	ldr	r5, [pc, #240]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c11e:	402c      	ands	r4, r5
 800c120:	50d4      	str	r4, [r2, r3]
 800c122:	58d5      	ldr	r5, [r2, r3]
 800c124:	24e0      	movs	r4, #224	; 0xe0
 800c126:	0224      	lsls	r4, r4, #8
 800c128:	432c      	orrs	r4, r5
 800c12a:	50d4      	str	r4, [r2, r3]
 800c12c:	e594      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800c12e:	4a3c      	ldr	r2, [pc, #240]	; (800c220 <RemapAndLinkDMAtoUARTTx+0x658>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d000      	beq.n	800c136 <RemapAndLinkDMAtoUARTTx+0x56e>
 800c134:	e590      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
 800c136:	680b      	ldr	r3, [r1, #0]
 800c138:	4a2c      	ldr	r2, [pc, #176]	; (800c1ec <RemapAndLinkDMAtoUARTTx+0x624>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d01b      	beq.n	800c176 <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800c13e:	4a2c      	ldr	r2, [pc, #176]	; (800c1f0 <RemapAndLinkDMAtoUARTTx+0x628>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d022      	beq.n	800c18a <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800c144:	4a2b      	ldr	r2, [pc, #172]	; (800c1f4 <RemapAndLinkDMAtoUARTTx+0x62c>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d02b      	beq.n	800c1a2 <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800c14a:	4a2b      	ldr	r2, [pc, #172]	; (800c1f8 <RemapAndLinkDMAtoUARTTx+0x630>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d034      	beq.n	800c1ba <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800c150:	4a2a      	ldr	r2, [pc, #168]	; (800c1fc <RemapAndLinkDMAtoUARTTx+0x634>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d03b      	beq.n	800c1ce <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800c156:	4a2a      	ldr	r2, [pc, #168]	; (800c200 <RemapAndLinkDMAtoUARTTx+0x638>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d000      	beq.n	800c15e <RemapAndLinkDMAtoUARTTx+0x596>
 800c15c:	e57c      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800c15e:	4a29      	ldr	r2, [pc, #164]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c160:	23a8      	movs	r3, #168	; 0xa8
 800c162:	58d4      	ldr	r4, [r2, r3]
 800c164:	4d28      	ldr	r5, [pc, #160]	; (800c208 <RemapAndLinkDMAtoUARTTx+0x640>)
 800c166:	402c      	ands	r4, r5
 800c168:	50d4      	str	r4, [r2, r3]
 800c16a:	58d5      	ldr	r5, [r2, r3]
 800c16c:	24f0      	movs	r4, #240	; 0xf0
 800c16e:	0324      	lsls	r4, r4, #12
 800c170:	432c      	orrs	r4, r5
 800c172:	50d4      	str	r4, [r2, r3]
 800c174:	e570      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800c176:	4a25      	ldr	r2, [pc, #148]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c178:	23a8      	movs	r3, #168	; 0xa8
 800c17a:	58d5      	ldr	r5, [r2, r3]
 800c17c:	26f0      	movs	r6, #240	; 0xf0
 800c17e:	43b5      	bics	r5, r6
 800c180:	50d5      	str	r5, [r2, r3]
 800c182:	58d4      	ldr	r4, [r2, r3]
 800c184:	4334      	orrs	r4, r6
 800c186:	50d4      	str	r4, [r2, r3]
 800c188:	e566      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800c18a:	4a20      	ldr	r2, [pc, #128]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c18c:	23a8      	movs	r3, #168	; 0xa8
 800c18e:	58d4      	ldr	r4, [r2, r3]
 800c190:	4d1f      	ldr	r5, [pc, #124]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c192:	402c      	ands	r4, r5
 800c194:	50d4      	str	r4, [r2, r3]
 800c196:	58d5      	ldr	r5, [r2, r3]
 800c198:	24f0      	movs	r4, #240	; 0xf0
 800c19a:	0224      	lsls	r4, r4, #8
 800c19c:	432c      	orrs	r4, r5
 800c19e:	50d4      	str	r4, [r2, r3]
 800c1a0:	e55a      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800c1a2:	4a1a      	ldr	r2, [pc, #104]	; (800c20c <RemapAndLinkDMAtoUARTTx+0x644>)
 800c1a4:	23a8      	movs	r3, #168	; 0xa8
 800c1a6:	58d4      	ldr	r4, [r2, r3]
 800c1a8:	4d1a      	ldr	r5, [pc, #104]	; (800c214 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800c1aa:	402c      	ands	r4, r5
 800c1ac:	50d4      	str	r4, [r2, r3]
 800c1ae:	58d5      	ldr	r5, [r2, r3]
 800c1b0:	24f0      	movs	r4, #240	; 0xf0
 800c1b2:	0524      	lsls	r4, r4, #20
 800c1b4:	432c      	orrs	r4, r5
 800c1b6:	50d4      	str	r4, [r2, r3]
 800c1b8:	e54e      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800c1ba:	4a12      	ldr	r2, [pc, #72]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c1bc:	23a8      	movs	r3, #168	; 0xa8
 800c1be:	58d5      	ldr	r5, [r2, r3]
 800c1c0:	260f      	movs	r6, #15
 800c1c2:	43b5      	bics	r5, r6
 800c1c4:	50d5      	str	r5, [r2, r3]
 800c1c6:	58d4      	ldr	r4, [r2, r3]
 800c1c8:	4334      	orrs	r4, r6
 800c1ca:	50d4      	str	r4, [r2, r3]
 800c1cc:	e544      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800c1ce:	4a0d      	ldr	r2, [pc, #52]	; (800c204 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800c1d0:	23a8      	movs	r3, #168	; 0xa8
 800c1d2:	58d4      	ldr	r4, [r2, r3]
 800c1d4:	4d0e      	ldr	r5, [pc, #56]	; (800c210 <RemapAndLinkDMAtoUARTTx+0x648>)
 800c1d6:	402c      	ands	r4, r5
 800c1d8:	50d4      	str	r4, [r2, r3]
 800c1da:	58d5      	ldr	r5, [r2, r3]
 800c1dc:	24f0      	movs	r4, #240	; 0xf0
 800c1de:	0224      	lsls	r4, r4, #8
 800c1e0:	432c      	orrs	r4, r5
 800c1e2:	50d4      	str	r4, [r2, r3]
 800c1e4:	e538      	b.n	800bc58 <RemapAndLinkDMAtoUARTTx+0x90>
 800c1e6:	46c0      	nop			; (mov r8, r8)
 800c1e8:	40005000 	.word	0x40005000
 800c1ec:	4002001c 	.word	0x4002001c
 800c1f0:	40020044 	.word	0x40020044
 800c1f4:	40020080 	.word	0x40020080
 800c1f8:	40020408 	.word	0x40020408
 800c1fc:	40020444 	.word	0x40020444
 800c200:	40020458 	.word	0x40020458
 800c204:	40020400 	.word	0x40020400
 800c208:	fff0ffff 	.word	0xfff0ffff
 800c20c:	40020000 	.word	0x40020000
 800c210:	ffff0fff 	.word	0xffff0fff
 800c214:	f0ffffff 	.word	0xf0ffffff
 800c218:	40011400 	.word	0x40011400
 800c21c:	40011800 	.word	0x40011800
 800c220:	40011c00 	.word	0x40011c00

0800c224 <DMA_MSG_TX_Setup>:
{	
 800c224:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800c226:	4b0d      	ldr	r3, [pc, #52]	; (800c25c <DMA_MSG_TX_Setup+0x38>)
 800c228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d012      	beq.n	800c254 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800c22e:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <DMA_MSG_TX_Setup+0x38>)
 800c230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c232:	2b00      	cmp	r3, #0
 800c234:	d010      	beq.n	800c258 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800c236:	4a09      	ldr	r2, [pc, #36]	; (800c25c <DMA_MSG_TX_Setup+0x38>)
 800c238:	2394      	movs	r3, #148	; 0x94
 800c23a:	58d3      	ldr	r3, [r2, r3]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d007      	beq.n	800c250 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800c240:	0021      	movs	r1, r4
 800c242:	f7ff fcc1 	bl	800bbc8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800c246:	2100      	movs	r1, #0
 800c248:	0020      	movs	r0, r4
 800c24a:	f7ff f81b 	bl	800b284 <SetupDMAInterrupts>
}
 800c24e:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800c250:	4c03      	ldr	r4, [pc, #12]	; (800c260 <DMA_MSG_TX_Setup+0x3c>)
 800c252:	e7f5      	b.n	800c240 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800c254:	4c01      	ldr	r4, [pc, #4]	; (800c25c <DMA_MSG_TX_Setup+0x38>)
 800c256:	e7f3      	b.n	800c240 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800c258:	4c02      	ldr	r4, [pc, #8]	; (800c264 <DMA_MSG_TX_Setup+0x40>)
 800c25a:	e7f1      	b.n	800c240 <DMA_MSG_TX_Setup+0x1c>
 800c25c:	20001cc4 	.word	0x20001cc4
 800c260:	20001d34 	.word	0x20001d34
 800c264:	20001cfc 	.word	0x20001cfc

0800c268 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800c268:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800c26a:	4807      	ldr	r0, [pc, #28]	; (800c288 <CRC_Init+0x20>)
 800c26c:	4b07      	ldr	r3, [pc, #28]	; (800c28c <CRC_Init+0x24>)
 800c26e:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800c270:	2310      	movs	r3, #16
 800c272:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800c274:	2300      	movs	r3, #0
 800c276:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800c278:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800c27a:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800c27c:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800c27e:	3303      	adds	r3, #3
 800c280:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800c282:	f004 fed5 	bl	8011030 <HAL_CRC_Init>
}
 800c286:	bd10      	pop	{r4, pc}
 800c288:	2000720c 	.word	0x2000720c
 800c28c:	40023000 	.word	0x40023000

0800c290 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800c290:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800c292:	4a05      	ldr	r2, [pc, #20]	; (800c2a8 <HAL_CRC_MspInit+0x18>)
 800c294:	6951      	ldr	r1, [r2, #20]
 800c296:	2340      	movs	r3, #64	; 0x40
 800c298:	4319      	orrs	r1, r3
 800c29a:	6151      	str	r1, [r2, #20]
 800c29c:	6952      	ldr	r2, [r2, #20]
 800c29e:	4013      	ands	r3, r2
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	9b01      	ldr	r3, [sp, #4]
}
 800c2a4:	b002      	add	sp, #8
 800c2a6:	4770      	bx	lr
 800c2a8:	40021000 	.word	0x40021000

0800c2ac <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800c2ac:	b570      	push	{r4, r5, r6, lr}
 800c2ae:	0004      	movs	r4, r0
 800c2b0:	000d      	movs	r5, r1
  uint8_t pTemp;
  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	d015      	beq.n	800c2e2 <CalculateCRC8+0x36>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800c2b6:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800c2b8:	2900      	cmp	r1, #0
 800c2ba:	d100      	bne.n	800c2be <CalculateCRC8+0x12>
}
 800c2bc:	bd70      	pop	{r4, r5, r6, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800c2be:	088e      	lsrs	r6, r1, #2
 800c2c0:	0032      	movs	r2, r6
 800c2c2:	0021      	movs	r1, r4
 800c2c4:	4808      	ldr	r0, [pc, #32]	; (800c2e8 <CalculateCRC8+0x3c>)
 800c2c6:	f004 ff10 	bl	80110ea <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800c2ca:	07ab      	lsls	r3, r5, #30
 800c2cc:	d101      	bne.n	800c2d2 <CalculateCRC8+0x26>
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800c2ce:	b2c0      	uxtb	r0, r0
 800c2d0:	e7f4      	b.n	800c2bc <CalculateCRC8+0x10>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800c2d2:	00b1      	lsls	r1, r6, #2
 800c2d4:	1861      	adds	r1, r4, r1
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	4803      	ldr	r0, [pc, #12]	; (800c2e8 <CalculateCRC8+0x3c>)
 800c2da:	f004 feda 	bl	8011092 <HAL_CRC_Accumulate>
 800c2de:	b2c0      	uxtb	r0, r0
 800c2e0:	e7ec      	b.n	800c2bc <CalculateCRC8+0x10>
  return 0;
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	e7ea      	b.n	800c2bc <CalculateCRC8+0x10>
 800c2e6:	46c0      	nop			; (mov r8, r8)
 800c2e8:	2000720c 	.word	0x2000720c

0800c2ec <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800c2ec:	b570      	push	{r4, r5, r6, lr}
 800c2ee:	0006      	movs	r6, r0
 800c2f0:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800c2f2:	f005 fc69 	bl	8011bc8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c2f6:	4b2b      	ldr	r3, [pc, #172]	; (800c3a4 <EE_VerifyPageFullWriteVariable+0xb8>)
 800c2f8:	881a      	ldrh	r2, [r3, #0]
 800c2fa:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c2fc:	4b2a      	ldr	r3, [pc, #168]	; (800c3a8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800c2fe:	881b      	ldrh	r3, [r3, #0]
 800c300:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800c302:	2b00      	cmp	r3, #0
 800c304:	d104      	bne.n	800c310 <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 800c306:	4929      	ldr	r1, [pc, #164]	; (800c3ac <EE_VerifyPageFullWriteVariable+0xc0>)
 800c308:	428a      	cmp	r2, r1
 800c30a:	d007      	beq.n	800c31c <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 800c30c:	3302      	adds	r3, #2
 800c30e:	e005      	b.n	800c31c <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 800c310:	2a00      	cmp	r2, #0
 800c312:	d143      	bne.n	800c39c <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 800c314:	4925      	ldr	r1, [pc, #148]	; (800c3ac <EE_VerifyPageFullWriteVariable+0xc0>)
 800c316:	428b      	cmp	r3, r1
 800c318:	d042      	beq.n	800c3a0 <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 800c31a:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800c31c:	4a24      	ldr	r2, [pc, #144]	; (800c3b0 <EE_VerifyPageFullWriteVariable+0xc4>)
 800c31e:	189c      	adds	r4, r3, r2
 800c320:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800c322:	02db      	lsls	r3, r3, #11
 800c324:	4a23      	ldr	r2, [pc, #140]	; (800c3b4 <EE_VerifyPageFullWriteVariable+0xc8>)
 800c326:	4694      	mov	ip, r2
 800c328:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800c32a:	6822      	ldr	r2, [r4, #0]
 800c32c:	3201      	adds	r2, #1
 800c32e:	d005      	beq.n	800c33c <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800c330:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800c332:	429c      	cmp	r4, r3
 800c334:	d22e      	bcs.n	800c394 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800c336:	6822      	ldr	r2, [r4, #0]
 800c338:	3201      	adds	r2, #1
 800c33a:	d1f9      	bne.n	800c330 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800c33c:	002a      	movs	r2, r5
 800c33e:	2300      	movs	r3, #0
 800c340:	0021      	movs	r1, r4
 800c342:	2001      	movs	r0, #1
 800c344:	f005 fc8a 	bl	8011c5c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c348:	481b      	ldr	r0, [pc, #108]	; (800c3b8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c34a:	f005 fc59 	bl	8011c00 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800c34e:	2800      	cmp	r0, #0
 800c350:	d003      	beq.n	800c35a <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800c352:	4b1a      	ldr	r3, [pc, #104]	; (800c3bc <EE_VerifyPageFullWriteVariable+0xd0>)
 800c354:	69d8      	ldr	r0, [r3, #28]
 800c356:	b280      	uxth	r0, r0
 800c358:	e01f      	b.n	800c39a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c35a:	4a19      	ldr	r2, [pc, #100]	; (800c3c0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800c35c:	6913      	ldr	r3, [r2, #16]
 800c35e:	2101      	movs	r1, #1
 800c360:	438b      	bics	r3, r1
 800c362:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800c364:	1ca1      	adds	r1, r4, #2
 800c366:	0032      	movs	r2, r6
 800c368:	2300      	movs	r3, #0
 800c36a:	2001      	movs	r0, #1
 800c36c:	f005 fc76 	bl	8011c5c <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c370:	4811      	ldr	r0, [pc, #68]	; (800c3b8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800c372:	f005 fc45 	bl	8011c00 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800c376:	2800      	cmp	r0, #0
 800c378:	d003      	beq.n	800c382 <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 800c37a:	4b10      	ldr	r3, [pc, #64]	; (800c3bc <EE_VerifyPageFullWriteVariable+0xd0>)
 800c37c:	69d8      	ldr	r0, [r3, #28]
 800c37e:	b280      	uxth	r0, r0
 800c380:	e00b      	b.n	800c39a <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c382:	4a0f      	ldr	r2, [pc, #60]	; (800c3c0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800c384:	6913      	ldr	r3, [r2, #16]
 800c386:	2101      	movs	r1, #1
 800c388:	438b      	bics	r3, r1
 800c38a:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800c38c:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <EE_VerifyPageFullWriteVariable+0xd0>)
 800c38e:	69d8      	ldr	r0, [r3, #28]
 800c390:	b280      	uxth	r0, r0
 800c392:	e002      	b.n	800c39a <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 800c394:	f005 fc2a 	bl	8011bec <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800c398:	2080      	movs	r0, #128	; 0x80
}
 800c39a:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 800c39c:	20ab      	movs	r0, #171	; 0xab
 800c39e:	e7fc      	b.n	800c39a <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	e7bb      	b.n	800c31c <EE_VerifyPageFullWriteVariable+0x30>
 800c3a4:	0801e000 	.word	0x0801e000
 800c3a8:	0801f000 	.word	0x0801f000
 800c3ac:	0000eeee 	.word	0x0000eeee
 800c3b0:	0001003c 	.word	0x0001003c
 800c3b4:	0801effe 	.word	0x0801effe
 800c3b8:	0000c350 	.word	0x0000c350
 800c3bc:	200073d0 	.word	0x200073d0
 800c3c0:	40022000 	.word	0x40022000

0800c3c4 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800c3c4:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c3c6:	4b13      	ldr	r3, [pc, #76]	; (800c414 <EE_ReadVariable+0x50>)
 800c3c8:	881c      	ldrh	r4, [r3, #0]
 800c3ca:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c3cc:	4b12      	ldr	r3, [pc, #72]	; (800c418 <EE_ReadVariable+0x54>)
 800c3ce:	881b      	ldrh	r3, [r3, #0]
 800c3d0:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800c3d2:	2c00      	cmp	r4, #0
 800c3d4:	d006      	beq.n	800c3e4 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 800c3da:	20ab      	movs	r0, #171	; 0xab
 800c3dc:	e019      	b.n	800c412 <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800c3de:	2001      	movs	r0, #1
 800c3e0:	e017      	b.n	800c412 <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800c3e2:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800c3e4:	02e3      	lsls	r3, r4, #11
 800c3e6:	4a0d      	ldr	r2, [pc, #52]	; (800c41c <EE_ReadVariable+0x58>)
 800c3e8:	4694      	mov	ip, r2
 800c3ea:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800c3ec:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 800c3ee:	4a0c      	ldr	r2, [pc, #48]	; (800c420 <EE_ReadVariable+0x5c>)
 800c3f0:	4694      	mov	ip, r2
 800c3f2:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 800c3f4:	881a      	ldrh	r2, [r3, #0]
 800c3f6:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800c3f8:	4290      	cmp	r0, r2
 800c3fa:	d006      	beq.n	800c40a <EE_ReadVariable+0x46>
			Address =Address - 4;
 800c3fc:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800c3fe:	42a3      	cmp	r3, r4
 800c400:	d9ed      	bls.n	800c3de <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 800c402:	881a      	ldrh	r2, [r3, #0]
 800c404:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800c406:	4282      	cmp	r2, r0
 800c408:	d1f8      	bne.n	800c3fc <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800c40a:	3b02      	subs	r3, #2
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 800c410:	2000      	movs	r0, #0
}
 800c412:	bd10      	pop	{r4, pc}
 800c414:	0801e000 	.word	0x0801e000
 800c418:	0801f000 	.word	0x0801f000
 800c41c:	0801effe 	.word	0x0801effe
 800c420:	0801e002 	.word	0x0801e002

0800c424 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800c424:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c426:	46de      	mov	lr, fp
 800c428:	4647      	mov	r7, r8
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b083      	sub	sp, #12
 800c42e:	0005      	movs	r5, r0
 800c430:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800c432:	f005 fbc9 	bl	8011bc8 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800c436:	0031      	movs	r1, r6
 800c438:	0028      	movs	r0, r5
 800c43a:	f7ff ff57 	bl	800c2ec <EE_VerifyPageFullWriteVariable>
 800c43e:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800c440:	2880      	cmp	r0, #128	; 0x80
 800c442:	d007      	beq.n	800c454 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800c444:	f005 fbd2 	bl	8011bec <HAL_FLASH_Lock>
}
 800c448:	0020      	movs	r0, r4
 800c44a:	b003      	add	sp, #12
 800c44c:	bc0c      	pop	{r2, r3}
 800c44e:	4690      	mov	r8, r2
 800c450:	469b      	mov	fp, r3
 800c452:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800c454:	f005 fbb8 	bl	8011bc8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c458:	4b3e      	ldr	r3, [pc, #248]	; (800c554 <EE_WriteVariable+0x130>)
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c45e:	4a3e      	ldr	r2, [pc, #248]	; (800c558 <EE_WriteVariable+0x134>)
 800c460:	8812      	ldrh	r2, [r2, #0]
 800c462:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 800c464:	2b00      	cmp	r3, #0
 800c466:	d007      	beq.n	800c478 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800c468:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800c46a:	2a00      	cmp	r2, #0
 800c46c:	d1ea      	bne.n	800c444 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800c46e:	4b3a      	ldr	r3, [pc, #232]	; (800c558 <EE_WriteVariable+0x134>)
 800c470:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800c472:	4b38      	ldr	r3, [pc, #224]	; (800c554 <EE_WriteVariable+0x130>)
 800c474:	9301      	str	r3, [sp, #4]
 800c476:	e003      	b.n	800c480 <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800c478:	4b36      	ldr	r3, [pc, #216]	; (800c554 <EE_WriteVariable+0x130>)
 800c47a:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800c47c:	4b36      	ldr	r3, [pc, #216]	; (800c558 <EE_WriteVariable+0x134>)
 800c47e:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800c480:	4a36      	ldr	r2, [pc, #216]	; (800c55c <EE_WriteVariable+0x138>)
 800c482:	2300      	movs	r3, #0
 800c484:	9901      	ldr	r1, [sp, #4]
 800c486:	2001      	movs	r0, #1
 800c488:	f005 fbe8 	bl	8011c5c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c48c:	4834      	ldr	r0, [pc, #208]	; (800c560 <EE_WriteVariable+0x13c>)
 800c48e:	f005 fbb7 	bl	8011c00 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c492:	2800      	cmp	r0, #0
 800c494:	d003      	beq.n	800c49e <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 800c496:	4b33      	ldr	r3, [pc, #204]	; (800c564 <EE_WriteVariable+0x140>)
 800c498:	69dc      	ldr	r4, [r3, #28]
 800c49a:	b2a4      	uxth	r4, r4
 800c49c:	e7d2      	b.n	800c444 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c49e:	4a32      	ldr	r2, [pc, #200]	; (800c568 <EE_WriteVariable+0x144>)
 800c4a0:	6913      	ldr	r3, [r2, #16]
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	438b      	bics	r3, r1
 800c4a6:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800c4a8:	0031      	movs	r1, r6
 800c4aa:	0028      	movs	r0, r5
 800c4ac:	f7ff ff1e 	bl	800c2ec <EE_VerifyPageFullWriteVariable>
 800c4b0:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800c4b2:	d1c7      	bne.n	800c444 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c4b4:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c4b6:	4b2d      	ldr	r3, [pc, #180]	; (800c56c <EE_WriteVariable+0x148>)
 800c4b8:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c4ba:	4e2d      	ldr	r6, [pc, #180]	; (800c570 <EE_WriteVariable+0x14c>)
 800c4bc:	e003      	b.n	800c4c6 <EE_WriteVariable+0xa2>
 800c4be:	3701      	adds	r7, #1
 800c4c0:	b2bf      	uxth	r7, r7
 800c4c2:	42b7      	cmp	r7, r6
 800c4c4:	d00f      	beq.n	800c4e6 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800c4c6:	42bd      	cmp	r5, r7
 800c4c8:	d0f9      	beq.n	800c4be <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c4ca:	4928      	ldr	r1, [pc, #160]	; (800c56c <EE_WriteVariable+0x148>)
 800c4cc:	0038      	movs	r0, r7
 800c4ce:	f7ff ff79 	bl	800c3c4 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800c4d2:	2801      	cmp	r0, #1
 800c4d4:	d0f3      	beq.n	800c4be <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c4d6:	4643      	mov	r3, r8
 800c4d8:	8819      	ldrh	r1, [r3, #0]
 800c4da:	0038      	movs	r0, r7
 800c4dc:	f7ff ff06 	bl	800c2ec <EE_VerifyPageFullWriteVariable>
 800c4e0:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800c4e2:	d0ec      	beq.n	800c4be <EE_WriteVariable+0x9a>
 800c4e4:	e7ae      	b.n	800c444 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800c4e6:	4658      	mov	r0, fp
 800c4e8:	f005 fc30 	bl	8011d4c <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c4ec:	481c      	ldr	r0, [pc, #112]	; (800c560 <EE_WriteVariable+0x13c>)
 800c4ee:	f005 fb87 	bl	8011c00 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d003      	beq.n	800c4fe <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 800c4f6:	4b1b      	ldr	r3, [pc, #108]	; (800c564 <EE_WriteVariable+0x140>)
 800c4f8:	69dc      	ldr	r4, [r3, #28]
 800c4fa:	b2a4      	uxth	r4, r4
 800c4fc:	e7a2      	b.n	800c444 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800c4fe:	2080      	movs	r0, #128	; 0x80
 800c500:	0100      	lsls	r0, r0, #4
 800c502:	4458      	add	r0, fp
 800c504:	f005 fc22 	bl	8011d4c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c508:	4815      	ldr	r0, [pc, #84]	; (800c560 <EE_WriteVariable+0x13c>)
 800c50a:	f005 fb79 	bl	8011c00 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c50e:	2800      	cmp	r0, #0
 800c510:	d003      	beq.n	800c51a <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 800c512:	4b14      	ldr	r3, [pc, #80]	; (800c564 <EE_WriteVariable+0x140>)
 800c514:	69dc      	ldr	r4, [r3, #28]
 800c516:	b2a4      	uxth	r4, r4
 800c518:	e794      	b.n	800c444 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c51a:	4a13      	ldr	r2, [pc, #76]	; (800c568 <EE_WriteVariable+0x144>)
 800c51c:	6913      	ldr	r3, [r2, #16]
 800c51e:	2102      	movs	r1, #2
 800c520:	438b      	bics	r3, r1
 800c522:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800c524:	2200      	movs	r2, #0
 800c526:	2300      	movs	r3, #0
 800c528:	9901      	ldr	r1, [sp, #4]
 800c52a:	2001      	movs	r0, #1
 800c52c:	f005 fb96 	bl	8011c5c <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c530:	480b      	ldr	r0, [pc, #44]	; (800c560 <EE_WriteVariable+0x13c>)
 800c532:	f005 fb65 	bl	8011c00 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800c536:	2800      	cmp	r0, #0
 800c538:	d003      	beq.n	800c542 <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 800c53a:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <EE_WriteVariable+0x140>)
 800c53c:	69dc      	ldr	r4, [r3, #28]
 800c53e:	b2a4      	uxth	r4, r4
 800c540:	e780      	b.n	800c444 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c542:	4a09      	ldr	r2, [pc, #36]	; (800c568 <EE_WriteVariable+0x144>)
 800c544:	6913      	ldr	r3, [r2, #16]
 800c546:	2101      	movs	r1, #1
 800c548:	438b      	bics	r3, r1
 800c54a:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 800c54c:	f005 fb4e 	bl	8011bec <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800c550:	2400      	movs	r4, #0
 800c552:	e777      	b.n	800c444 <EE_WriteVariable+0x20>
 800c554:	0801e000 	.word	0x0801e000
 800c558:	0801f000 	.word	0x0801f000
 800c55c:	0000eeee 	.word	0x0000eeee
 800c560:	0000c350 	.word	0x0000c350
 800c564:	200073d0 	.word	0x200073d0
 800c568:	40022000 	.word	0x40022000
 800c56c:	20001ebc 	.word	0x20001ebc
 800c570:	00000401 	.word	0x00000401

0800c574 <EE_Format>:
uint16_t EE_Format(void){
 800c574:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800c576:	f005 fb27 	bl	8011bc8 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c57a:	4829      	ldr	r0, [pc, #164]	; (800c620 <EE_Format+0xac>)
 800c57c:	f005 fbe6 	bl	8011d4c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c580:	4828      	ldr	r0, [pc, #160]	; (800c624 <EE_Format+0xb0>)
 800c582:	f005 fb3d 	bl	8011c00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c586:	2800      	cmp	r0, #0
 800c588:	d003      	beq.n	800c592 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800c58a:	4b27      	ldr	r3, [pc, #156]	; (800c628 <EE_Format+0xb4>)
 800c58c:	69d8      	ldr	r0, [r3, #28]
 800c58e:	b280      	uxth	r0, r0
}
 800c590:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c592:	4826      	ldr	r0, [pc, #152]	; (800c62c <EE_Format+0xb8>)
 800c594:	f005 fbda 	bl	8011d4c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c598:	4822      	ldr	r0, [pc, #136]	; (800c624 <EE_Format+0xb0>)
 800c59a:	f005 fb31 	bl	8011c00 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d003      	beq.n	800c5aa <EE_Format+0x36>
			return pFlash.ErrorCode;
 800c5a2:	4b21      	ldr	r3, [pc, #132]	; (800c628 <EE_Format+0xb4>)
 800c5a4:	69d8      	ldr	r0, [r3, #28]
 800c5a6:	b280      	uxth	r0, r0
 800c5a8:	e7f2      	b.n	800c590 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c5aa:	4a21      	ldr	r2, [pc, #132]	; (800c630 <EE_Format+0xbc>)
 800c5ac:	6913      	ldr	r3, [r2, #16]
 800c5ae:	2102      	movs	r1, #2
 800c5b0:	438b      	bics	r3, r1
 800c5b2:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	4919      	ldr	r1, [pc, #100]	; (800c620 <EE_Format+0xac>)
 800c5ba:	2001      	movs	r0, #1
 800c5bc:	f005 fb4e 	bl	8011c5c <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5c0:	4818      	ldr	r0, [pc, #96]	; (800c624 <EE_Format+0xb0>)
 800c5c2:	f005 fb1d 	bl	8011c00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d003      	beq.n	800c5d2 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800c5ca:	4b17      	ldr	r3, [pc, #92]	; (800c628 <EE_Format+0xb4>)
 800c5cc:	69d8      	ldr	r0, [r3, #28]
 800c5ce:	b280      	uxth	r0, r0
 800c5d0:	e7de      	b.n	800c590 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c5d2:	4a17      	ldr	r2, [pc, #92]	; (800c630 <EE_Format+0xbc>)
 800c5d4:	6913      	ldr	r3, [r2, #16]
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	438b      	bics	r3, r1
 800c5da:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c5dc:	4815      	ldr	r0, [pc, #84]	; (800c634 <EE_Format+0xc0>)
 800c5de:	f005 fbb5 	bl	8011d4c <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5e2:	4810      	ldr	r0, [pc, #64]	; (800c624 <EE_Format+0xb0>)
 800c5e4:	f005 fb0c 	bl	8011c00 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d003      	beq.n	800c5f4 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800c5ec:	4b0e      	ldr	r3, [pc, #56]	; (800c628 <EE_Format+0xb4>)
 800c5ee:	69d8      	ldr	r0, [r3, #28]
 800c5f0:	b280      	uxth	r0, r0
 800c5f2:	e7cd      	b.n	800c590 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c5f4:	4810      	ldr	r0, [pc, #64]	; (800c638 <EE_Format+0xc4>)
 800c5f6:	f005 fba9 	bl	8011d4c <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c5fa:	480a      	ldr	r0, [pc, #40]	; (800c624 <EE_Format+0xb0>)
 800c5fc:	f005 fb00 	bl	8011c00 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800c600:	2800      	cmp	r0, #0
 800c602:	d003      	beq.n	800c60c <EE_Format+0x98>
			return pFlash.ErrorCode;
 800c604:	4b08      	ldr	r3, [pc, #32]	; (800c628 <EE_Format+0xb4>)
 800c606:	69d8      	ldr	r0, [r3, #28]
 800c608:	b280      	uxth	r0, r0
 800c60a:	e7c1      	b.n	800c590 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c60c:	4a08      	ldr	r2, [pc, #32]	; (800c630 <EE_Format+0xbc>)
 800c60e:	6913      	ldr	r3, [r2, #16]
 800c610:	2101      	movs	r1, #1
 800c612:	438b      	bics	r3, r1
 800c614:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800c616:	f005 fae9 	bl	8011bec <HAL_FLASH_Lock>
	return FlashStatus;
 800c61a:	2000      	movs	r0, #0
 800c61c:	e7b8      	b.n	800c590 <EE_Format+0x1c>
 800c61e:	46c0      	nop			; (mov r8, r8)
 800c620:	0801e000 	.word	0x0801e000
 800c624:	0000c350 	.word	0x0000c350
 800c628:	200073d0 	.word	0x200073d0
 800c62c:	0801e800 	.word	0x0801e800
 800c630:	40022000 	.word	0x40022000
 800c634:	0801f000 	.word	0x0801f000
 800c638:	0801f800 	.word	0x0801f800

0800c63c <EE_Init>:
uint16_t EE_Init(void){
 800c63c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c63e:	46c6      	mov	lr, r8
 800c640:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800c642:	f005 fac1 	bl	8011bc8 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800c646:	4bbe      	ldr	r3, [pc, #760]	; (800c940 <EE_Init+0x304>)
 800c648:	881b      	ldrh	r3, [r3, #0]
 800c64a:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800c64c:	4abd      	ldr	r2, [pc, #756]	; (800c944 <EE_Init+0x308>)
 800c64e:	8812      	ldrh	r2, [r2, #0]
 800c650:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800c652:	49bd      	ldr	r1, [pc, #756]	; (800c948 <EE_Init+0x30c>)
 800c654:	428b      	cmp	r3, r1
 800c656:	d100      	bne.n	800c65a <EE_Init+0x1e>
 800c658:	e074      	b.n	800c744 <EE_Init+0x108>
 800c65a:	49bc      	ldr	r1, [pc, #752]	; (800c94c <EE_Init+0x310>)
 800c65c:	428b      	cmp	r3, r1
 800c65e:	d011      	beq.n	800c684 <EE_Init+0x48>
 800c660:	2b00      	cmp	r3, #0
 800c662:	d100      	bne.n	800c666 <EE_Init+0x2a>
 800c664:	e109      	b.n	800c87a <EE_Init+0x23e>
			FlashStatus =EE_Format();
 800c666:	f7ff ff85 	bl	800c574 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c66a:	48b9      	ldr	r0, [pc, #740]	; (800c950 <EE_Init+0x314>)
 800c66c:	f005 fac8 	bl	8011c00 <FLASH_WaitForLastOperation>
 800c670:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 800c672:	2e00      	cmp	r6, #0
 800c674:	d102      	bne.n	800c67c <EE_Init+0x40>
	HAL_FLASH_Lock();
 800c676:	f005 fab9 	bl	8011bec <HAL_FLASH_Lock>
	return HAL_OK;
 800c67a:	2600      	movs	r6, #0
}
 800c67c:	0030      	movs	r0, r6
 800c67e:	bc04      	pop	{r2}
 800c680:	4690      	mov	r8, r2
 800c682:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800c684:	2a00      	cmp	r2, #0
 800c686:	d00d      	beq.n	800c6a4 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800c688:	4baf      	ldr	r3, [pc, #700]	; (800c948 <EE_Init+0x30c>)
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d028      	beq.n	800c6e0 <EE_Init+0xa4>
				FlashStatus =EE_Format();
 800c68e:	f7ff ff71 	bl	800c574 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c692:	48af      	ldr	r0, [pc, #700]	; (800c950 <EE_Init+0x314>)
 800c694:	f005 fab4 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c698:	2800      	cmp	r0, #0
 800c69a:	d0ec      	beq.n	800c676 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800c69c:	4bad      	ldr	r3, [pc, #692]	; (800c954 <EE_Init+0x318>)
 800c69e:	69de      	ldr	r6, [r3, #28]
 800c6a0:	b2b6      	uxth	r6, r6
 800c6a2:	e7eb      	b.n	800c67c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c6a4:	48a6      	ldr	r0, [pc, #664]	; (800c940 <EE_Init+0x304>)
 800c6a6:	f005 fb51 	bl	8011d4c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6aa:	48a9      	ldr	r0, [pc, #676]	; (800c950 <EE_Init+0x314>)
 800c6ac:	f005 faa8 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c6b0:	2800      	cmp	r0, #0
 800c6b2:	d003      	beq.n	800c6bc <EE_Init+0x80>
					return pFlash.ErrorCode;
 800c6b4:	4ba7      	ldr	r3, [pc, #668]	; (800c954 <EE_Init+0x318>)
 800c6b6:	69de      	ldr	r6, [r3, #28]
 800c6b8:	b2b6      	uxth	r6, r6
 800c6ba:	e7df      	b.n	800c67c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c6bc:	48a6      	ldr	r0, [pc, #664]	; (800c958 <EE_Init+0x31c>)
 800c6be:	f005 fb45 	bl	8011d4c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6c2:	48a3      	ldr	r0, [pc, #652]	; (800c950 <EE_Init+0x314>)
 800c6c4:	f005 fa9c 	bl	8011c00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d105      	bne.n	800c6d8 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c6cc:	4aa3      	ldr	r2, [pc, #652]	; (800c95c <EE_Init+0x320>)
 800c6ce:	6913      	ldr	r3, [r2, #16]
 800c6d0:	2102      	movs	r1, #2
 800c6d2:	438b      	bics	r3, r1
 800c6d4:	6113      	str	r3, [r2, #16]
 800c6d6:	e7ce      	b.n	800c676 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c6d8:	4b9e      	ldr	r3, [pc, #632]	; (800c954 <EE_Init+0x318>)
 800c6da:	69de      	ldr	r6, [r3, #28]
 800c6dc:	b2b6      	uxth	r6, r6
 800c6de:	e7cd      	b.n	800c67c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c6e0:	4897      	ldr	r0, [pc, #604]	; (800c940 <EE_Init+0x304>)
 800c6e2:	f005 fb33 	bl	8011d4c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6e6:	489a      	ldr	r0, [pc, #616]	; (800c950 <EE_Init+0x314>)
 800c6e8:	f005 fa8a 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d003      	beq.n	800c6f8 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 800c6f0:	4b98      	ldr	r3, [pc, #608]	; (800c954 <EE_Init+0x318>)
 800c6f2:	69de      	ldr	r6, [r3, #28]
 800c6f4:	b2b6      	uxth	r6, r6
 800c6f6:	e7c1      	b.n	800c67c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c6f8:	4897      	ldr	r0, [pc, #604]	; (800c958 <EE_Init+0x31c>)
 800c6fa:	f005 fb27 	bl	8011d4c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c6fe:	4894      	ldr	r0, [pc, #592]	; (800c950 <EE_Init+0x314>)
 800c700:	f005 fa7e 	bl	8011c00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c704:	2800      	cmp	r0, #0
 800c706:	d003      	beq.n	800c710 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 800c708:	4b92      	ldr	r3, [pc, #584]	; (800c954 <EE_Init+0x318>)
 800c70a:	69de      	ldr	r6, [r3, #28]
 800c70c:	b2b6      	uxth	r6, r6
 800c70e:	e7b5      	b.n	800c67c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c710:	4a92      	ldr	r2, [pc, #584]	; (800c95c <EE_Init+0x320>)
 800c712:	6913      	ldr	r3, [r2, #16]
 800c714:	2102      	movs	r1, #2
 800c716:	438b      	bics	r3, r1
 800c718:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800c71a:	2200      	movs	r2, #0
 800c71c:	2300      	movs	r3, #0
 800c71e:	4989      	ldr	r1, [pc, #548]	; (800c944 <EE_Init+0x308>)
 800c720:	2001      	movs	r0, #1
 800c722:	f005 fa9b 	bl	8011c5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c726:	488a      	ldr	r0, [pc, #552]	; (800c950 <EE_Init+0x314>)
 800c728:	f005 fa6a 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c72c:	2800      	cmp	r0, #0
 800c72e:	d105      	bne.n	800c73c <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c730:	4a8a      	ldr	r2, [pc, #552]	; (800c95c <EE_Init+0x320>)
 800c732:	6913      	ldr	r3, [r2, #16]
 800c734:	2101      	movs	r1, #1
 800c736:	438b      	bics	r3, r1
 800c738:	6113      	str	r3, [r2, #16]
 800c73a:	e79c      	b.n	800c676 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800c73c:	4b85      	ldr	r3, [pc, #532]	; (800c954 <EE_Init+0x318>)
 800c73e:	69de      	ldr	r6, [r3, #28]
 800c740:	b2b6      	uxth	r6, r6
 800c742:	e79b      	b.n	800c67c <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800c744:	2a00      	cmp	r2, #0
 800c746:	d157      	bne.n	800c7f8 <EE_Init+0x1bc>
 800c748:	2401      	movs	r4, #1
	int16_t x =-1;
 800c74a:	2701      	movs	r7, #1
 800c74c:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800c74e:	4d84      	ldr	r5, [pc, #528]	; (800c960 <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c750:	4b84      	ldr	r3, [pc, #528]	; (800c964 <EE_Init+0x328>)
 800c752:	4698      	mov	r8, r3
 800c754:	e005      	b.n	800c762 <EE_Init+0x126>
						x =VarIdx;
 800c756:	b227      	sxth	r7, r4
 800c758:	e008      	b.n	800c76c <EE_Init+0x130>
 800c75a:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c75c:	4b82      	ldr	r3, [pc, #520]	; (800c968 <EE_Init+0x32c>)
 800c75e:	429c      	cmp	r4, r3
 800c760:	d018      	beq.n	800c794 <EE_Init+0x158>
 800c762:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800c764:	882b      	ldrh	r3, [r5, #0]
 800c766:	b29b      	uxth	r3, r3
 800c768:	42b3      	cmp	r3, r6
 800c76a:	d0f4      	beq.n	800c756 <EE_Init+0x11a>
					if(VarIdx != x){
 800c76c:	42bc      	cmp	r4, r7
 800c76e:	d0f4      	beq.n	800c75a <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c770:	497c      	ldr	r1, [pc, #496]	; (800c964 <EE_Init+0x328>)
 800c772:	0030      	movs	r0, r6
 800c774:	f7ff fe26 	bl	800c3c4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800c778:	2801      	cmp	r0, #1
 800c77a:	d0ee      	beq.n	800c75a <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c77c:	4643      	mov	r3, r8
 800c77e:	8819      	ldrh	r1, [r3, #0]
 800c780:	0030      	movs	r0, r6
 800c782:	f7ff fdb3 	bl	800c2ec <EE_VerifyPageFullWriteVariable>
 800c786:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c788:	4871      	ldr	r0, [pc, #452]	; (800c950 <EE_Init+0x314>)
 800c78a:	f005 fa39 	bl	8011c00 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800c78e:	2800      	cmp	r0, #0
 800c790:	d0e3      	beq.n	800c75a <EE_Init+0x11e>
 800c792:	e773      	b.n	800c67c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c794:	2200      	movs	r2, #0
 800c796:	2300      	movs	r3, #0
 800c798:	4969      	ldr	r1, [pc, #420]	; (800c940 <EE_Init+0x304>)
 800c79a:	2001      	movs	r0, #1
 800c79c:	f005 fa5e 	bl	8011c5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7a0:	486b      	ldr	r0, [pc, #428]	; (800c950 <EE_Init+0x314>)
 800c7a2:	f005 fa2d 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c7a6:	2800      	cmp	r0, #0
 800c7a8:	d003      	beq.n	800c7b2 <EE_Init+0x176>
					return pFlash.ErrorCode;
 800c7aa:	4b6a      	ldr	r3, [pc, #424]	; (800c954 <EE_Init+0x318>)
 800c7ac:	69de      	ldr	r6, [r3, #28]
 800c7ae:	b2b6      	uxth	r6, r6
 800c7b0:	e764      	b.n	800c67c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c7b2:	4a6a      	ldr	r2, [pc, #424]	; (800c95c <EE_Init+0x320>)
 800c7b4:	6913      	ldr	r3, [r2, #16]
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	438b      	bics	r3, r1
 800c7ba:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c7bc:	4861      	ldr	r0, [pc, #388]	; (800c944 <EE_Init+0x308>)
 800c7be:	f005 fac5 	bl	8011d4c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7c2:	4863      	ldr	r0, [pc, #396]	; (800c950 <EE_Init+0x314>)
 800c7c4:	f005 fa1c 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d003      	beq.n	800c7d4 <EE_Init+0x198>
					return pFlash.ErrorCode;
 800c7cc:	4b61      	ldr	r3, [pc, #388]	; (800c954 <EE_Init+0x318>)
 800c7ce:	69de      	ldr	r6, [r3, #28]
 800c7d0:	b2b6      	uxth	r6, r6
 800c7d2:	e753      	b.n	800c67c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c7d4:	4865      	ldr	r0, [pc, #404]	; (800c96c <EE_Init+0x330>)
 800c7d6:	f005 fab9 	bl	8011d4c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c7da:	485d      	ldr	r0, [pc, #372]	; (800c950 <EE_Init+0x314>)
 800c7dc:	f005 fa10 	bl	8011c00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c7e0:	2800      	cmp	r0, #0
 800c7e2:	d105      	bne.n	800c7f0 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c7e4:	4a5d      	ldr	r2, [pc, #372]	; (800c95c <EE_Init+0x320>)
 800c7e6:	6913      	ldr	r3, [r2, #16]
 800c7e8:	2102      	movs	r1, #2
 800c7ea:	438b      	bics	r3, r1
 800c7ec:	6113      	str	r3, [r2, #16]
 800c7ee:	e742      	b.n	800c676 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c7f0:	4b58      	ldr	r3, [pc, #352]	; (800c954 <EE_Init+0x318>)
 800c7f2:	69de      	ldr	r6, [r3, #28]
 800c7f4:	b2b6      	uxth	r6, r6
 800c7f6:	e741      	b.n	800c67c <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800c7f8:	4b54      	ldr	r3, [pc, #336]	; (800c94c <EE_Init+0x310>)
 800c7fa:	429a      	cmp	r2, r3
 800c7fc:	d00b      	beq.n	800c816 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 800c7fe:	f7ff feb9 	bl	800c574 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c802:	4853      	ldr	r0, [pc, #332]	; (800c950 <EE_Init+0x314>)
 800c804:	f005 f9fc 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c808:	2800      	cmp	r0, #0
 800c80a:	d100      	bne.n	800c80e <EE_Init+0x1d2>
 800c80c:	e733      	b.n	800c676 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800c80e:	4b51      	ldr	r3, [pc, #324]	; (800c954 <EE_Init+0x318>)
 800c810:	69de      	ldr	r6, [r3, #28]
 800c812:	b2b6      	uxth	r6, r6
 800c814:	e732      	b.n	800c67c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c816:	484b      	ldr	r0, [pc, #300]	; (800c944 <EE_Init+0x308>)
 800c818:	f005 fa98 	bl	8011d4c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c81c:	484c      	ldr	r0, [pc, #304]	; (800c950 <EE_Init+0x314>)
 800c81e:	f005 f9ef 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c822:	2800      	cmp	r0, #0
 800c824:	d003      	beq.n	800c82e <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 800c826:	4b4b      	ldr	r3, [pc, #300]	; (800c954 <EE_Init+0x318>)
 800c828:	69de      	ldr	r6, [r3, #28]
 800c82a:	b2b6      	uxth	r6, r6
 800c82c:	e726      	b.n	800c67c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c82e:	484f      	ldr	r0, [pc, #316]	; (800c96c <EE_Init+0x330>)
 800c830:	f005 fa8c 	bl	8011d4c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c834:	4846      	ldr	r0, [pc, #280]	; (800c950 <EE_Init+0x314>)
 800c836:	f005 f9e3 	bl	8011c00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d003      	beq.n	800c846 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 800c83e:	4b45      	ldr	r3, [pc, #276]	; (800c954 <EE_Init+0x318>)
 800c840:	69de      	ldr	r6, [r3, #28]
 800c842:	b2b6      	uxth	r6, r6
 800c844:	e71a      	b.n	800c67c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c846:	4a45      	ldr	r2, [pc, #276]	; (800c95c <EE_Init+0x320>)
 800c848:	6913      	ldr	r3, [r2, #16]
 800c84a:	2102      	movs	r1, #2
 800c84c:	438b      	bics	r3, r1
 800c84e:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800c850:	2200      	movs	r2, #0
 800c852:	2300      	movs	r3, #0
 800c854:	493a      	ldr	r1, [pc, #232]	; (800c940 <EE_Init+0x304>)
 800c856:	2001      	movs	r0, #1
 800c858:	f005 fa00 	bl	8011c5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c85c:	483c      	ldr	r0, [pc, #240]	; (800c950 <EE_Init+0x314>)
 800c85e:	f005 f9cf 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c862:	2800      	cmp	r0, #0
 800c864:	d003      	beq.n	800c86e <EE_Init+0x232>
					return pFlash.ErrorCode;
 800c866:	4b3b      	ldr	r3, [pc, #236]	; (800c954 <EE_Init+0x318>)
 800c868:	69de      	ldr	r6, [r3, #28]
 800c86a:	b2b6      	uxth	r6, r6
 800c86c:	e706      	b.n	800c67c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c86e:	4a3b      	ldr	r2, [pc, #236]	; (800c95c <EE_Init+0x320>)
 800c870:	6913      	ldr	r3, [r2, #16]
 800c872:	2101      	movs	r1, #1
 800c874:	438b      	bics	r3, r1
 800c876:	6113      	str	r3, [r2, #16]
 800c878:	e6fd      	b.n	800c676 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800c87a:	2a00      	cmp	r2, #0
 800c87c:	d009      	beq.n	800c892 <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800c87e:	4b33      	ldr	r3, [pc, #204]	; (800c94c <EE_Init+0x310>)
 800c880:	429a      	cmp	r2, r3
 800c882:	d010      	beq.n	800c8a6 <EE_Init+0x26a>
 800c884:	2401      	movs	r4, #1
	int16_t x =-1;
 800c886:	2701      	movs	r7, #1
 800c888:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800c88a:	4d39      	ldr	r5, [pc, #228]	; (800c970 <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c88c:	4b35      	ldr	r3, [pc, #212]	; (800c964 <EE_Init+0x328>)
 800c88e:	4698      	mov	r8, r3
 800c890:	e02d      	b.n	800c8ee <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 800c892:	f7ff fe6f 	bl	800c574 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c896:	482e      	ldr	r0, [pc, #184]	; (800c950 <EE_Init+0x314>)
 800c898:	f005 f9b2 	bl	8011c00 <FLASH_WaitForLastOperation>
 800c89c:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 800c89e:	2e00      	cmp	r6, #0
 800c8a0:	d100      	bne.n	800c8a4 <EE_Init+0x268>
 800c8a2:	e6e8      	b.n	800c676 <EE_Init+0x3a>
 800c8a4:	e6ea      	b.n	800c67c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800c8a6:	4827      	ldr	r0, [pc, #156]	; (800c944 <EE_Init+0x308>)
 800c8a8:	f005 fa50 	bl	8011d4c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c8ac:	4828      	ldr	r0, [pc, #160]	; (800c950 <EE_Init+0x314>)
 800c8ae:	f005 f9a7 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	d003      	beq.n	800c8be <EE_Init+0x282>
					return pFlash.ErrorCode;
 800c8b6:	4b27      	ldr	r3, [pc, #156]	; (800c954 <EE_Init+0x318>)
 800c8b8:	69de      	ldr	r6, [r3, #28]
 800c8ba:	b2b6      	uxth	r6, r6
 800c8bc:	e6de      	b.n	800c67c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800c8be:	482b      	ldr	r0, [pc, #172]	; (800c96c <EE_Init+0x330>)
 800c8c0:	f005 fa44 	bl	8011d4c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c8c4:	4822      	ldr	r0, [pc, #136]	; (800c950 <EE_Init+0x314>)
 800c8c6:	f005 f99b 	bl	8011c00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d105      	bne.n	800c8da <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c8ce:	4a23      	ldr	r2, [pc, #140]	; (800c95c <EE_Init+0x320>)
 800c8d0:	6913      	ldr	r3, [r2, #16]
 800c8d2:	2102      	movs	r1, #2
 800c8d4:	438b      	bics	r3, r1
 800c8d6:	6113      	str	r3, [r2, #16]
 800c8d8:	e6cd      	b.n	800c676 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c8da:	4b1e      	ldr	r3, [pc, #120]	; (800c954 <EE_Init+0x318>)
 800c8dc:	69de      	ldr	r6, [r3, #28]
 800c8de:	b2b6      	uxth	r6, r6
 800c8e0:	e6cc      	b.n	800c67c <EE_Init+0x40>
						x =VarIdx;
 800c8e2:	b227      	sxth	r7, r4
 800c8e4:	e008      	b.n	800c8f8 <EE_Init+0x2bc>
 800c8e6:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c8e8:	4b1f      	ldr	r3, [pc, #124]	; (800c968 <EE_Init+0x32c>)
 800c8ea:	429c      	cmp	r4, r3
 800c8ec:	d018      	beq.n	800c920 <EE_Init+0x2e4>
 800c8ee:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800c8f0:	882b      	ldrh	r3, [r5, #0]
 800c8f2:	b29b      	uxth	r3, r3
 800c8f4:	42b3      	cmp	r3, r6
 800c8f6:	d0f4      	beq.n	800c8e2 <EE_Init+0x2a6>
					if(VarIdx != x){
 800c8f8:	42bc      	cmp	r4, r7
 800c8fa:	d0f4      	beq.n	800c8e6 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c8fc:	4919      	ldr	r1, [pc, #100]	; (800c964 <EE_Init+0x328>)
 800c8fe:	0030      	movs	r0, r6
 800c900:	f7ff fd60 	bl	800c3c4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800c904:	2801      	cmp	r0, #1
 800c906:	d0ee      	beq.n	800c8e6 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c908:	4643      	mov	r3, r8
 800c90a:	8819      	ldrh	r1, [r3, #0]
 800c90c:	0030      	movs	r0, r6
 800c90e:	f7ff fced 	bl	800c2ec <EE_VerifyPageFullWriteVariable>
 800c912:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c914:	480e      	ldr	r0, [pc, #56]	; (800c950 <EE_Init+0x314>)
 800c916:	f005 f973 	bl	8011c00 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800c91a:	2800      	cmp	r0, #0
 800c91c:	d0e3      	beq.n	800c8e6 <EE_Init+0x2aa>
 800c91e:	e6ad      	b.n	800c67c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800c920:	2200      	movs	r2, #0
 800c922:	2300      	movs	r3, #0
 800c924:	4907      	ldr	r1, [pc, #28]	; (800c944 <EE_Init+0x308>)
 800c926:	2001      	movs	r0, #1
 800c928:	f005 f998 	bl	8011c5c <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c92c:	4808      	ldr	r0, [pc, #32]	; (800c950 <EE_Init+0x314>)
 800c92e:	f005 f967 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c932:	2800      	cmp	r0, #0
 800c934:	d01e      	beq.n	800c974 <EE_Init+0x338>
					return pFlash.ErrorCode;
 800c936:	4b07      	ldr	r3, [pc, #28]	; (800c954 <EE_Init+0x318>)
 800c938:	69de      	ldr	r6, [r3, #28]
 800c93a:	b2b6      	uxth	r6, r6
 800c93c:	e69e      	b.n	800c67c <EE_Init+0x40>
 800c93e:	46c0      	nop			; (mov r8, r8)
 800c940:	0801e000 	.word	0x0801e000
 800c944:	0801f000 	.word	0x0801f000
 800c948:	0000eeee 	.word	0x0000eeee
 800c94c:	0000ffff 	.word	0x0000ffff
 800c950:	0000c350 	.word	0x0000c350
 800c954:	200073d0 	.word	0x200073d0
 800c958:	0801e800 	.word	0x0801e800
 800c95c:	40022000 	.word	0x40022000
 800c960:	0801e006 	.word	0x0801e006
 800c964:	20001ebc 	.word	0x20001ebc
 800c968:	00000401 	.word	0x00000401
 800c96c:	0801f800 	.word	0x0801f800
 800c970:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c974:	4a11      	ldr	r2, [pc, #68]	; (800c9bc <EE_Init+0x380>)
 800c976:	6913      	ldr	r3, [r2, #16]
 800c978:	2101      	movs	r1, #1
 800c97a:	438b      	bics	r3, r1
 800c97c:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c97e:	4810      	ldr	r0, [pc, #64]	; (800c9c0 <EE_Init+0x384>)
 800c980:	f005 f9e4 	bl	8011d4c <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c984:	480f      	ldr	r0, [pc, #60]	; (800c9c4 <EE_Init+0x388>)
 800c986:	f005 f93b 	bl	8011c00 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d003      	beq.n	800c996 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 800c98e:	4b0e      	ldr	r3, [pc, #56]	; (800c9c8 <EE_Init+0x38c>)
 800c990:	69de      	ldr	r6, [r3, #28]
 800c992:	b2b6      	uxth	r6, r6
 800c994:	e672      	b.n	800c67c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c996:	480d      	ldr	r0, [pc, #52]	; (800c9cc <EE_Init+0x390>)
 800c998:	f005 f9d8 	bl	8011d4c <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c99c:	4809      	ldr	r0, [pc, #36]	; (800c9c4 <EE_Init+0x388>)
 800c99e:	f005 f92f 	bl	8011c00 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c9a2:	2800      	cmp	r0, #0
 800c9a4:	d105      	bne.n	800c9b2 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c9a6:	4a05      	ldr	r2, [pc, #20]	; (800c9bc <EE_Init+0x380>)
 800c9a8:	6913      	ldr	r3, [r2, #16]
 800c9aa:	2102      	movs	r1, #2
 800c9ac:	438b      	bics	r3, r1
 800c9ae:	6113      	str	r3, [r2, #16]
 800c9b0:	e661      	b.n	800c676 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c9b2:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <EE_Init+0x38c>)
 800c9b4:	69de      	ldr	r6, [r3, #28]
 800c9b6:	b2b6      	uxth	r6, r6
 800c9b8:	e660      	b.n	800c67c <EE_Init+0x40>
 800c9ba:	46c0      	nop			; (mov r8, r8)
 800c9bc:	40022000 	.word	0x40022000
 800c9c0:	0801e000 	.word	0x0801e000
 800c9c4:	0000c350 	.word	0x0000c350
 800c9c8:	200073d0 	.word	0x200073d0
 800c9cc:	0801e800 	.word	0x0801e800

0800c9d0 <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800c9d0:	b500      	push	{lr}
 800c9d2:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9301      	str	r3, [sp, #4]
		erase.PageAddress =sector;
 800c9d8:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800c9da:	3301      	adds	r3, #1
 800c9dc:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800c9de:	4669      	mov	r1, sp
 800c9e0:	a801      	add	r0, sp, #4
 800c9e2:	f005 f9c5 	bl	8011d70 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d102      	bne.n	800c9f0 <EraseSector+0x20>
 800c9ea:	9b00      	ldr	r3, [sp, #0]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	d002      	beq.n	800c9f6 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800c9f0:	4b02      	ldr	r3, [pc, #8]	; (800c9fc <EraseSector+0x2c>)
 800c9f2:	2216      	movs	r2, #22
 800c9f4:	701a      	strb	r2, [r3, #0]

	return result;
}
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	b005      	add	sp, #20
 800c9fa:	bd00      	pop	{pc}
 800c9fc:	20001188 	.word	0x20001188

0800ca00 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800ca00:	b500      	push	{lr}
 800ca02:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800ca04:	2380      	movs	r3, #128	; 0x80
 800ca06:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ca08:	3b7f      	subs	r3, #127	; 0x7f
 800ca0a:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ca10:	3303      	adds	r3, #3
 800ca12:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800ca14:	2090      	movs	r0, #144	; 0x90
 800ca16:	a901      	add	r1, sp, #4
 800ca18:	05c0      	lsls	r0, r0, #23
 800ca1a:	f005 fa09 	bl	8011e30 <HAL_GPIO_Init>
}
 800ca1e:	b007      	add	sp, #28
 800ca20:	bd00      	pop	{pc}
	...

0800ca24 <GPIO_Init>:
{
 800ca24:	b500      	push	{lr}
 800ca26:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ca28:	4b18      	ldr	r3, [pc, #96]	; (800ca8c <GPIO_Init+0x68>)
 800ca2a:	6959      	ldr	r1, [r3, #20]
 800ca2c:	2080      	movs	r0, #128	; 0x80
 800ca2e:	0300      	lsls	r0, r0, #12
 800ca30:	4301      	orrs	r1, r0
 800ca32:	6159      	str	r1, [r3, #20]
 800ca34:	695a      	ldr	r2, [r3, #20]
 800ca36:	4002      	ands	r2, r0
 800ca38:	9201      	str	r2, [sp, #4]
 800ca3a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800ca3c:	6959      	ldr	r1, [r3, #20]
 800ca3e:	2080      	movs	r0, #128	; 0x80
 800ca40:	0280      	lsls	r0, r0, #10
 800ca42:	4301      	orrs	r1, r0
 800ca44:	6159      	str	r1, [r3, #20]
 800ca46:	695a      	ldr	r2, [r3, #20]
 800ca48:	4002      	ands	r2, r0
 800ca4a:	9202      	str	r2, [sp, #8]
 800ca4c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800ca4e:	6959      	ldr	r1, [r3, #20]
 800ca50:	2080      	movs	r0, #128	; 0x80
 800ca52:	0340      	lsls	r0, r0, #13
 800ca54:	4301      	orrs	r1, r0
 800ca56:	6159      	str	r1, [r3, #20]
 800ca58:	695a      	ldr	r2, [r3, #20]
 800ca5a:	4002      	ands	r2, r0
 800ca5c:	9203      	str	r2, [sp, #12]
 800ca5e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800ca60:	6959      	ldr	r1, [r3, #20]
 800ca62:	2080      	movs	r0, #128	; 0x80
 800ca64:	02c0      	lsls	r0, r0, #11
 800ca66:	4301      	orrs	r1, r0
 800ca68:	6159      	str	r1, [r3, #20]
 800ca6a:	695a      	ldr	r2, [r3, #20]
 800ca6c:	4002      	ands	r2, r0
 800ca6e:	9204      	str	r2, [sp, #16]
 800ca70:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800ca72:	695a      	ldr	r2, [r3, #20]
 800ca74:	2180      	movs	r1, #128	; 0x80
 800ca76:	03c9      	lsls	r1, r1, #15
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	615a      	str	r2, [r3, #20]
 800ca7c:	695b      	ldr	r3, [r3, #20]
 800ca7e:	400b      	ands	r3, r1
 800ca80:	9305      	str	r3, [sp, #20]
 800ca82:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800ca84:	f7ff ffbc 	bl	800ca00 <IND_LED_Init>
}
 800ca88:	b007      	add	sp, #28
 800ca8a:	bd00      	pop	{pc}
 800ca8c:	40021000 	.word	0x40021000

0800ca90 <SENSORS_GPIO_Init>:

//-- Configure indicator LED
void SENSORS_GPIO_Init(void)
{
 800ca90:	b500      	push	{lr}
 800ca92:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/*Configure GPIO pin : PB11 & PB12 as output*/
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ca94:	23c0      	movs	r3, #192	; 0xc0
 800ca96:	015b      	lsls	r3, r3, #5
 800ca98:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ca9a:	2312      	movs	r3, #18
 800ca9c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ca9e:	3b11      	subs	r3, #17
 800caa0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800caa2:	3302      	adds	r3, #2
 800caa4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800caa6:	3302      	adds	r3, #2
 800caa8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800caaa:	2090      	movs	r0, #144	; 0x90
 800caac:	a901      	add	r1, sp, #4
 800caae:	05c0      	lsls	r0, r0, #23
 800cab0:	f005 f9be 	bl	8011e30 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cab4:	4a0a      	ldr	r2, [pc, #40]	; (800cae0 <SENSORS_GPIO_Init+0x50>)
 800cab6:	69d1      	ldr	r1, [r2, #28]
 800cab8:	2080      	movs	r0, #128	; 0x80
 800caba:	03c0      	lsls	r0, r0, #15
 800cabc:	4301      	orrs	r1, r0
 800cabe:	61d1      	str	r1, [r2, #28]
 800cac0:	69d3      	ldr	r3, [r2, #28]
 800cac2:	4003      	ands	r3, r0
 800cac4:	9300      	str	r3, [sp, #0]
 800cac6:	9b00      	ldr	r3, [sp, #0]

    /*Configure GPIO pin : PB7 as input*/
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800cac8:	2380      	movs	r3, #128	; 0x80
 800caca:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cacc:	2300      	movs	r3, #0
 800cace:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cad0:	3302      	adds	r3, #2
 800cad2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cad4:	a901      	add	r1, sp, #4
 800cad6:	4803      	ldr	r0, [pc, #12]	; (800cae4 <SENSORS_GPIO_Init+0x54>)
 800cad8:	f005 f9aa 	bl	8011e30 <HAL_GPIO_Init>
}
 800cadc:	b007      	add	sp, #28
 800cade:	bd00      	pop	{pc}
 800cae0:	40021000 	.word	0x40021000
 800cae4:	48000400 	.word	0x48000400

0800cae8 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800cae8:	b570      	push	{r4, r5, r6, lr}
 800caea:	000e      	movs	r6, r1
 800caec:	0015      	movs	r5, r2
 800caee:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800caf0:	f001 fdd8 	bl	800e6a4 <GetUart>
	
	if (huart == &huart1) 
 800caf4:	4b2b      	ldr	r3, [pc, #172]	; (800cba4 <GetPortGPIOs+0xbc>)
 800caf6:	4298      	cmp	r0, r3
 800caf8:	d01a      	beq.n	800cb30 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800cafa:	4b2b      	ldr	r3, [pc, #172]	; (800cba8 <GetPortGPIOs+0xc0>)
 800cafc:	4298      	cmp	r0, r3
 800cafe:	d025      	beq.n	800cb4c <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800cb00:	4b2a      	ldr	r3, [pc, #168]	; (800cbac <GetPortGPIOs+0xc4>)
 800cb02:	4298      	cmp	r0, r3
 800cb04:	d02d      	beq.n	800cb62 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800cb06:	4b2a      	ldr	r3, [pc, #168]	; (800cbb0 <GetPortGPIOs+0xc8>)
 800cb08:	4298      	cmp	r0, r3
 800cb0a:	d036      	beq.n	800cb7a <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800cb0c:	4b29      	ldr	r3, [pc, #164]	; (800cbb4 <GetPortGPIOs+0xcc>)
 800cb0e:	4298      	cmp	r0, r3
 800cb10:	d03e      	beq.n	800cb90 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800cb12:	4a29      	ldr	r2, [pc, #164]	; (800cbb8 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800cb14:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800cb16:	4290      	cmp	r0, r2
 800cb18:	d116      	bne.n	800cb48 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800cb1a:	2390      	movs	r3, #144	; 0x90
 800cb1c:	05db      	lsls	r3, r3, #23
 800cb1e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800cb20:	2210      	movs	r2, #16
 800cb22:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800cb24:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800cb26:	2320      	movs	r3, #32
 800cb28:	9a04      	ldr	r2, [sp, #16]
 800cb2a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	e00b      	b.n	800cb48 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800cb30:	2390      	movs	r3, #144	; 0x90
 800cb32:	05db      	lsls	r3, r3, #23
 800cb34:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800cb36:	2280      	movs	r2, #128	; 0x80
 800cb38:	0092      	lsls	r2, r2, #2
 800cb3a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800cb3c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800cb3e:	2380      	movs	r3, #128	; 0x80
 800cb40:	00db      	lsls	r3, r3, #3
 800cb42:	9a04      	ldr	r2, [sp, #16]
 800cb44:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb46:	2300      	movs	r3, #0
	
	return result;	
}
 800cb48:	0018      	movs	r0, r3
 800cb4a:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800cb4c:	2390      	movs	r3, #144	; 0x90
 800cb4e:	05db      	lsls	r3, r3, #23
 800cb50:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800cb52:	2204      	movs	r2, #4
 800cb54:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800cb56:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800cb58:	2308      	movs	r3, #8
 800cb5a:	9a04      	ldr	r2, [sp, #16]
 800cb5c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e7f2      	b.n	800cb48 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800cb62:	4b16      	ldr	r3, [pc, #88]	; (800cbbc <GetPortGPIOs+0xd4>)
 800cb64:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800cb66:	2280      	movs	r2, #128	; 0x80
 800cb68:	00d2      	lsls	r2, r2, #3
 800cb6a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800cb6c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800cb6e:	2380      	movs	r3, #128	; 0x80
 800cb70:	011b      	lsls	r3, r3, #4
 800cb72:	9a04      	ldr	r2, [sp, #16]
 800cb74:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	e7e6      	b.n	800cb48 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800cb7a:	2390      	movs	r3, #144	; 0x90
 800cb7c:	05db      	lsls	r3, r3, #23
 800cb7e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800cb80:	2201      	movs	r2, #1
 800cb82:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800cb84:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800cb86:	2302      	movs	r3, #2
 800cb88:	9a04      	ldr	r2, [sp, #16]
 800cb8a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e7db      	b.n	800cb48 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800cb90:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <GetPortGPIOs+0xd4>)
 800cb92:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800cb94:	2208      	movs	r2, #8
 800cb96:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800cb98:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800cb9a:	2310      	movs	r3, #16
 800cb9c:	9a04      	ldr	r2, [sp, #16]
 800cb9e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	e7d1      	b.n	800cb48 <GetPortGPIOs+0x60>
 800cba4:	2000702c 	.word	0x2000702c
 800cba8:	20007194 	.word	0x20007194
 800cbac:	20006f3c 	.word	0x20006f3c
 800cbb0:	20007120 	.word	0x20007120
 800cbb4:	20006fb4 	.word	0x20006fb4
 800cbb8:	200070a4 	.word	0x200070a4
 800cbbc:	48000400 	.word	0x48000400

0800cbc0 <IsFactoryReset>:
{
 800cbc0:	b570      	push	{r4, r5, r6, lr}
 800cbc2:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800cbc4:	4b39      	ldr	r3, [pc, #228]	; (800ccac <IsFactoryReset+0xec>)
 800cbc6:	6959      	ldr	r1, [r3, #20]
 800cbc8:	2080      	movs	r0, #128	; 0x80
 800cbca:	0280      	lsls	r0, r0, #10
 800cbcc:	4301      	orrs	r1, r0
 800cbce:	6159      	str	r1, [r3, #20]
 800cbd0:	695a      	ldr	r2, [r3, #20]
 800cbd2:	4002      	ands	r2, r0
 800cbd4:	9203      	str	r2, [sp, #12]
 800cbd6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800cbd8:	6959      	ldr	r1, [r3, #20]
 800cbda:	2080      	movs	r0, #128	; 0x80
 800cbdc:	02c0      	lsls	r0, r0, #11
 800cbde:	4301      	orrs	r1, r0
 800cbe0:	6159      	str	r1, [r3, #20]
 800cbe2:	695a      	ldr	r2, [r3, #20]
 800cbe4:	4002      	ands	r2, r0
 800cbe6:	9204      	str	r2, [sp, #16]
 800cbe8:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800cbea:	6959      	ldr	r1, [r3, #20]
 800cbec:	2080      	movs	r0, #128	; 0x80
 800cbee:	0300      	lsls	r0, r0, #12
 800cbf0:	4301      	orrs	r1, r0
 800cbf2:	6159      	str	r1, [r3, #20]
 800cbf4:	695a      	ldr	r2, [r3, #20]
 800cbf6:	4002      	ands	r2, r0
 800cbf8:	9205      	str	r2, [sp, #20]
 800cbfa:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800cbfc:	695a      	ldr	r2, [r3, #20]
 800cbfe:	2180      	movs	r1, #128	; 0x80
 800cc00:	0349      	lsls	r1, r1, #13
 800cc02:	430a      	orrs	r2, r1
 800cc04:	615a      	str	r2, [r3, #20]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	400b      	ands	r3, r1
 800cc0a:	9306      	str	r3, [sp, #24]
 800cc0c:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800cc0e:	2522      	movs	r5, #34	; 0x22
 800cc10:	446d      	add	r5, sp
 800cc12:	ab08      	add	r3, sp, #32
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	ab0b      	add	r3, sp, #44	; 0x2c
 800cc18:	002a      	movs	r2, r5
 800cc1a:	a90c      	add	r1, sp, #48	; 0x30
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	f7ff ff63 	bl	800cae8 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800cc22:	ac07      	add	r4, sp, #28
 800cc24:	9400      	str	r4, [sp, #0]
 800cc26:	ab09      	add	r3, sp, #36	; 0x24
 800cc28:	221e      	movs	r2, #30
 800cc2a:	446a      	add	r2, sp
 800cc2c:	a90a      	add	r1, sp, #40	; 0x28
 800cc2e:	2006      	movs	r0, #6
 800cc30:	f7ff ff5a 	bl	800cae8 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cc34:	2301      	movs	r3, #1
 800cc36:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc38:	2600      	movs	r6, #0
 800cc3a:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800cc3c:	882b      	ldrh	r3, [r5, #0]
 800cc3e:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800cc40:	a90d      	add	r1, sp, #52	; 0x34
 800cc42:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc44:	f005 f8f4 	bl	8011e30 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cc48:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800cc4a:	2302      	movs	r3, #2
 800cc4c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800cc4e:	8823      	ldrh	r3, [r4, #0]
 800cc50:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800cc52:	a90d      	add	r1, sp, #52	; 0x34
 800cc54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc56:	f005 f8eb 	bl	8011e30 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800cc5a:	8829      	ldrh	r1, [r5, #0]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc60:	f005 fa5a 	bl	8012118 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800cc64:	2005      	movs	r0, #5
 800cc66:	f001 fb43 	bl	800e2f0 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800cc6a:	8821      	ldrh	r1, [r4, #0]
 800cc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc6e:	f005 fa4d 	bl	801210c <HAL_GPIO_ReadPin>
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d006      	beq.n	800cc84 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800cc76:	4b0e      	ldr	r3, [pc, #56]	; (800ccb0 <IsFactoryReset+0xf0>)
 800cc78:	2201      	movs	r2, #1
 800cc7a:	4252      	negs	r2, r2
 800cc7c:	601a      	str	r2, [r3, #0]
	return 0;
 800cc7e:	2000      	movs	r0, #0
}
 800cc80:	b012      	add	sp, #72	; 0x48
 800cc82:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800cc84:	2322      	movs	r3, #34	; 0x22
 800cc86:	446b      	add	r3, sp
 800cc88:	8819      	ldrh	r1, [r3, #0]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cc8e:	f005 fa43 	bl	8012118 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800cc92:	2005      	movs	r0, #5
 800cc94:	f001 fb2c 	bl	800e2f0 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800cc98:	ab07      	add	r3, sp, #28
 800cc9a:	8819      	ldrh	r1, [r3, #0]
 800cc9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc9e:	f005 fa35 	bl	801210c <HAL_GPIO_ReadPin>
 800cca2:	2801      	cmp	r0, #1
 800cca4:	d1e7      	bne.n	800cc76 <IsFactoryReset+0xb6>
			return 1;
 800cca6:	2001      	movs	r0, #1
 800cca8:	e7ea      	b.n	800cc80 <IsFactoryReset+0xc0>
 800ccaa:	46c0      	nop			; (mov r8, r8)
 800ccac:	40021000 	.word	0x40021000
 800ccb0:	20007ff0 	.word	0x20007ff0

0800ccb4 <MX_I2C1_Init>:
}



void MX_I2C1_Init(void)
{
 800ccb4:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c1.Instance = I2C2;
 800ccb6:	480b      	ldr	r0, [pc, #44]	; (800cce4 <MX_I2C1_Init+0x30>)
 800ccb8:	4b0b      	ldr	r3, [pc, #44]	; (800cce8 <MX_I2C1_Init+0x34>)
 800ccba:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E/*Standard mode*/;
 800ccbc:	4b0b      	ldr	r3, [pc, #44]	; (800ccec <MX_I2C1_Init+0x38>)
 800ccbe:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ccc4:	2201      	movs	r2, #1
 800ccc6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ccc8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800ccca:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800cccc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ccce:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ccd0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800ccd2:	f005 fb21 	bl	8012318 <HAL_I2C_Init>
 800ccd6:	2800      	cmp	r0, #0
 800ccd8:	d100      	bne.n	800ccdc <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }


}
 800ccda:	bd10      	pop	{r4, pc}
    Error_Handler();
 800ccdc:	f000 fbc0 	bl	800d460 <Error_Handler>
}
 800cce0:	e7fb      	b.n	800ccda <MX_I2C1_Init+0x26>
 800cce2:	46c0      	nop			; (mov r8, r8)
 800cce4:	20007230 	.word	0x20007230
 800cce8:	40005800 	.word	0x40005800
 800ccec:	2000090e 	.word	0x2000090e

0800ccf0 <MX_I2C_Init>:
{
 800ccf0:	b500      	push	{lr}
 800ccf2:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800ccf4:	4b18      	ldr	r3, [pc, #96]	; (800cd58 <MX_I2C_Init+0x68>)
 800ccf6:	6959      	ldr	r1, [r3, #20]
 800ccf8:	2080      	movs	r0, #128	; 0x80
 800ccfa:	0300      	lsls	r0, r0, #12
 800ccfc:	4301      	orrs	r1, r0
 800ccfe:	6159      	str	r1, [r3, #20]
 800cd00:	695a      	ldr	r2, [r3, #20]
 800cd02:	4002      	ands	r2, r0
 800cd04:	9201      	str	r2, [sp, #4]
 800cd06:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800cd08:	6959      	ldr	r1, [r3, #20]
 800cd0a:	2080      	movs	r0, #128	; 0x80
 800cd0c:	0280      	lsls	r0, r0, #10
 800cd0e:	4301      	orrs	r1, r0
 800cd10:	6159      	str	r1, [r3, #20]
 800cd12:	695a      	ldr	r2, [r3, #20]
 800cd14:	4002      	ands	r2, r0
 800cd16:	9202      	str	r2, [sp, #8]
 800cd18:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800cd1a:	6959      	ldr	r1, [r3, #20]
 800cd1c:	2080      	movs	r0, #128	; 0x80
 800cd1e:	0340      	lsls	r0, r0, #13
 800cd20:	4301      	orrs	r1, r0
 800cd22:	6159      	str	r1, [r3, #20]
 800cd24:	695a      	ldr	r2, [r3, #20]
 800cd26:	4002      	ands	r2, r0
 800cd28:	9203      	str	r2, [sp, #12]
 800cd2a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800cd2c:	6959      	ldr	r1, [r3, #20]
 800cd2e:	2080      	movs	r0, #128	; 0x80
 800cd30:	02c0      	lsls	r0, r0, #11
 800cd32:	4301      	orrs	r1, r0
 800cd34:	6159      	str	r1, [r3, #20]
 800cd36:	695a      	ldr	r2, [r3, #20]
 800cd38:	4002      	ands	r2, r0
 800cd3a:	9204      	str	r2, [sp, #16]
 800cd3c:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800cd3e:	695a      	ldr	r2, [r3, #20]
 800cd40:	2180      	movs	r1, #128	; 0x80
 800cd42:	03c9      	lsls	r1, r1, #15
 800cd44:	430a      	orrs	r2, r1
 800cd46:	615a      	str	r2, [r3, #20]
 800cd48:	695b      	ldr	r3, [r3, #20]
 800cd4a:	400b      	ands	r3, r1
 800cd4c:	9305      	str	r3, [sp, #20]
 800cd4e:	9b05      	ldr	r3, [sp, #20]
  MX_I2C1_Init();
 800cd50:	f7ff ffb0 	bl	800ccb4 <MX_I2C1_Init>
}
 800cd54:	b007      	add	sp, #28
 800cd56:	bd00      	pop	{pc}
 800cd58:	40021000 	.word	0x40021000

0800cd5c <WriteRegData>:

void WriteRegData(uint8_t reg, uint8_t data)
{
 800cd5c:	b500      	push	{lr}
 800cd5e:	b083      	sub	sp, #12
	send[0]= 0x80 | reg;
 800cd60:	4a07      	ldr	r2, [pc, #28]	; (800cd80 <WriteRegData+0x24>)
 800cd62:	2380      	movs	r3, #128	; 0x80
 800cd64:	425b      	negs	r3, r3
 800cd66:	4318      	orrs	r0, r3
 800cd68:	7010      	strb	r0, [r2, #0]
	send[1]= data;
 800cd6a:	7051      	strb	r1, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 2, HAL_MAX_DELAY);
 800cd6c:	337f      	adds	r3, #127	; 0x7f
 800cd6e:	9300      	str	r3, [sp, #0]
 800cd70:	3303      	adds	r3, #3
 800cd72:	2172      	movs	r1, #114	; 0x72
 800cd74:	4803      	ldr	r0, [pc, #12]	; (800cd84 <WriteRegData+0x28>)
 800cd76:	f005 fb2d 	bl	80123d4 <HAL_I2C_Master_Transmit>

}
 800cd7a:	b003      	add	sp, #12
 800cd7c:	bd00      	pop	{pc}
 800cd7e:	46c0      	nop			; (mov r8, r8)
 800cd80:	2000726c 	.word	0x2000726c
 800cd84:	20007230 	.word	0x20007230

0800cd88 <Read_Word>:


uint16_t Read_Word(uint8_t reg)
{
 800cd88:	b570      	push	{r4, r5, r6, lr}
 800cd8a:	b082      	sub	sp, #8
   send[0]= 0xA0 | reg;
 800cd8c:	4a0e      	ldr	r2, [pc, #56]	; (800cdc8 <Read_Word+0x40>)
 800cd8e:	2360      	movs	r3, #96	; 0x60
 800cd90:	425b      	negs	r3, r3
 800cd92:	4318      	orrs	r0, r3
 800cd94:	7010      	strb	r0, [r2, #0]
   HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 1, HAL_MAX_DELAY);
 800cd96:	4d0d      	ldr	r5, [pc, #52]	; (800cdcc <Read_Word+0x44>)
 800cd98:	2601      	movs	r6, #1
 800cd9a:	4276      	negs	r6, r6
 800cd9c:	9600      	str	r6, [sp, #0]
 800cd9e:	3361      	adds	r3, #97	; 0x61
 800cda0:	2172      	movs	r1, #114	; 0x72
 800cda2:	0028      	movs	r0, r5
 800cda4:	f005 fb16 	bl	80123d4 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c1, colorProximityAdd, receive, 2, HAL_MAX_DELAY);
 800cda8:	4c09      	ldr	r4, [pc, #36]	; (800cdd0 <Read_Word+0x48>)
 800cdaa:	9600      	str	r6, [sp, #0]
 800cdac:	2302      	movs	r3, #2
 800cdae:	0022      	movs	r2, r4
 800cdb0:	2172      	movs	r1, #114	; 0x72
 800cdb2:	0028      	movs	r0, r5
 800cdb4:	f005 fbb2 	bl	801251c <HAL_I2C_Master_Receive>
    return (uint16_t)(receive[0] + (256 * receive[1]));
 800cdb8:	7863      	ldrb	r3, [r4, #1]
 800cdba:	021b      	lsls	r3, r3, #8
 800cdbc:	7820      	ldrb	r0, [r4, #0]
 800cdbe:	18c0      	adds	r0, r0, r3
 800cdc0:	b280      	uxth	r0, r0

}
 800cdc2:	b002      	add	sp, #8
 800cdc4:	bd70      	pop	{r4, r5, r6, pc}
 800cdc6:	46c0      	nop			; (mov r8, r8)
 800cdc8:	2000726c 	.word	0x2000726c
 800cdcc:	20007230 	.word	0x20007230
 800cdd0:	20007270 	.word	0x20007270

0800cdd4 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800cdd4:	4770      	bx	lr
	...

0800cdd8 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800cdd8:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800cdda:	00c2      	lsls	r2, r0, #3
 800cddc:	1812      	adds	r2, r2, r0
 800cdde:	4b1b      	ldr	r3, [pc, #108]	; (800ce4c <CheckForTimedButtonPress+0x74>)
 800cde0:	189b      	adds	r3, r3, r2
 800cde2:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800cde4:	0082      	lsls	r2, r0, #2
 800cde6:	4b1a      	ldr	r3, [pc, #104]	; (800ce50 <CheckForTimedButtonPress+0x78>)
 800cde8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800cdea:	0163      	lsls	r3, r4, #5
 800cdec:	1b1b      	subs	r3, r3, r4
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	191b      	adds	r3, r3, r4
 800cdf2:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800cdf4:	4299      	cmp	r1, r3
 800cdf6:	d01c      	beq.n	800ce32 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800cdf8:	00c2      	lsls	r2, r0, #3
 800cdfa:	1812      	adds	r2, r2, r0
 800cdfc:	4b13      	ldr	r3, [pc, #76]	; (800ce4c <CheckForTimedButtonPress+0x74>)
 800cdfe:	189b      	adds	r3, r3, r2
 800ce00:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 800ce02:	0163      	lsls	r3, r4, #5
 800ce04:	1b1b      	subs	r3, r3, r4
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	191b      	adds	r3, r3, r4
 800ce0a:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800ce0c:	4299      	cmp	r1, r3
 800ce0e:	d017      	beq.n	800ce40 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 800ce10:	00c2      	lsls	r2, r0, #3
 800ce12:	1812      	adds	r2, r2, r0
 800ce14:	4b0d      	ldr	r3, [pc, #52]	; (800ce4c <CheckForTimedButtonPress+0x74>)
 800ce16:	189b      	adds	r3, r3, r2
 800ce18:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 800ce1a:	0163      	lsls	r3, r4, #5
 800ce1c:	1b1b      	subs	r3, r3, r4
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	191b      	adds	r3, r3, r4
 800ce22:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800ce24:	4299      	cmp	r1, r3
 800ce26:	d109      	bne.n	800ce3c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 800ce28:	0010      	movs	r0, r2
 800ce2a:	4b08      	ldr	r3, [pc, #32]	; (800ce4c <CheckForTimedButtonPress+0x74>)
 800ce2c:	220a      	movs	r2, #10
 800ce2e:	54c2      	strb	r2, [r0, r3]
 800ce30:	e004      	b.n	800ce3c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800ce32:	00c3      	lsls	r3, r0, #3
 800ce34:	1818      	adds	r0, r3, r0
 800ce36:	4b05      	ldr	r3, [pc, #20]	; (800ce4c <CheckForTimedButtonPress+0x74>)
 800ce38:	2209      	movs	r2, #9
 800ce3a:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800ce40:	0010      	movs	r0, r2
 800ce42:	4b02      	ldr	r3, [pc, #8]	; (800ce4c <CheckForTimedButtonPress+0x74>)
 800ce44:	220a      	movs	r2, #10
 800ce46:	54c2      	strb	r2, [r0, r3]
 800ce48:	e7f8      	b.n	800ce3c <CheckForTimedButtonPress+0x64>
 800ce4a:	46c0      	nop			; (mov r8, r8)
 800ce4c:	20001ed0 	.word	0x20001ed0
 800ce50:	20001f24 	.word	0x20001f24

0800ce54 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800ce54:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800ce56:	00c2      	lsls	r2, r0, #3
 800ce58:	1812      	adds	r2, r2, r0
 800ce5a:	4b1b      	ldr	r3, [pc, #108]	; (800cec8 <CheckForTimedButtonRelease+0x74>)
 800ce5c:	189b      	adds	r3, r3, r2
 800ce5e:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 800ce60:	0082      	lsls	r2, r0, #2
 800ce62:	4b1a      	ldr	r3, [pc, #104]	; (800cecc <CheckForTimedButtonRelease+0x78>)
 800ce64:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800ce66:	0163      	lsls	r3, r4, #5
 800ce68:	1b1b      	subs	r3, r3, r4
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	191b      	adds	r3, r3, r4
 800ce6e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800ce70:	4299      	cmp	r1, r3
 800ce72:	d01c      	beq.n	800ceae <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800ce74:	00c2      	lsls	r2, r0, #3
 800ce76:	1812      	adds	r2, r2, r0
 800ce78:	4b13      	ldr	r3, [pc, #76]	; (800cec8 <CheckForTimedButtonRelease+0x74>)
 800ce7a:	189b      	adds	r3, r3, r2
 800ce7c:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800ce7e:	0163      	lsls	r3, r4, #5
 800ce80:	1b1b      	subs	r3, r3, r4
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	191b      	adds	r3, r3, r4
 800ce86:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800ce88:	4299      	cmp	r1, r3
 800ce8a:	d017      	beq.n	800cebc <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800ce8c:	00c2      	lsls	r2, r0, #3
 800ce8e:	1812      	adds	r2, r2, r0
 800ce90:	4b0d      	ldr	r3, [pc, #52]	; (800cec8 <CheckForTimedButtonRelease+0x74>)
 800ce92:	189b      	adds	r3, r3, r2
 800ce94:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 800ce96:	0163      	lsls	r3, r4, #5
 800ce98:	1b1b      	subs	r3, r3, r4
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	191b      	adds	r3, r3, r4
 800ce9e:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800cea0:	4299      	cmp	r1, r3
 800cea2:	d109      	bne.n	800ceb8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800cea4:	0010      	movs	r0, r2
 800cea6:	4b08      	ldr	r3, [pc, #32]	; (800cec8 <CheckForTimedButtonRelease+0x74>)
 800cea8:	220d      	movs	r2, #13
 800ceaa:	54c2      	strb	r2, [r0, r3]
 800ceac:	e004      	b.n	800ceb8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800ceae:	00c3      	lsls	r3, r0, #3
 800ceb0:	1818      	adds	r0, r3, r0
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <CheckForTimedButtonRelease+0x74>)
 800ceb4:	220c      	movs	r2, #12
 800ceb6:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800ceb8:	2000      	movs	r0, #0
 800ceba:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800cebc:	0010      	movs	r0, r2
 800cebe:	4b02      	ldr	r3, [pc, #8]	; (800cec8 <CheckForTimedButtonRelease+0x74>)
 800cec0:	220d      	movs	r2, #13
 800cec2:	54c2      	strb	r2, [r0, r3]
 800cec4:	e7f8      	b.n	800ceb8 <CheckForTimedButtonRelease+0x64>
 800cec6:	46c0      	nop			; (mov r8, r8)
 800cec8:	20001ed0 	.word	0x20001ed0
 800cecc:	20001f40 	.word	0x20001f40

0800ced0 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800ced0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ced2:	b08d      	sub	sp, #52	; 0x34
 800ced4:	0006      	movs	r6, r0
 800ced6:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800ced8:	4b41      	ldr	r3, [pc, #260]	; (800cfe0 <AddPortButton+0x110>)
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d157      	bne.n	800cf90 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800cee0:	4b40      	ldr	r3, [pc, #256]	; (800cfe4 <AddPortButton+0x114>)
 800cee2:	2204      	movs	r2, #4
 800cee4:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800cee6:	4b3e      	ldr	r3, [pc, #248]	; (800cfe0 <AddPortButton+0x110>)
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d15a      	bne.n	800cfa4 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800ceee:	2512      	movs	r5, #18
 800cef0:	446d      	add	r5, sp
 800cef2:	af04      	add	r7, sp, #16
 800cef4:	9700      	str	r7, [sp, #0]
 800cef6:	ab05      	add	r3, sp, #20
 800cef8:	002a      	movs	r2, r5
 800cefa:	a906      	add	r1, sp, #24
 800cefc:	0020      	movs	r0, r4
 800cefe:	f7ff fdf3 	bl	800cae8 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800cf02:	882b      	ldrh	r3, [r5, #0]
 800cf04:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800cf06:	2301      	movs	r3, #1
 800cf08:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf0a:	2500      	movs	r5, #0
 800cf0c:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800cf0e:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800cf10:	a907      	add	r1, sp, #28
 800cf12:	9806      	ldr	r0, [sp, #24]
 800cf14:	f004 ff8c 	bl	8011e30 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800cf18:	883b      	ldrh	r3, [r7, #0]
 800cf1a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf1c:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800cf1e:	2302      	movs	r3, #2
 800cf20:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800cf22:	a907      	add	r1, sp, #28
 800cf24:	9805      	ldr	r0, [sp, #20]
 800cf26:	f004 ff83 	bl	8011e30 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800cf2a:	00e2      	lsls	r2, r4, #3
 800cf2c:	1912      	adds	r2, r2, r4
 800cf2e:	4b2e      	ldr	r3, [pc, #184]	; (800cfe8 <AddPortButton+0x118>)
 800cf30:	189b      	adds	r3, r3, r2
 800cf32:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800cf34:	0025      	movs	r5, r4
 800cf36:	353a      	adds	r5, #58	; 0x3a
 800cf38:	00ad      	lsls	r5, r5, #2
 800cf3a:	210e      	movs	r1, #14
 800cf3c:	4469      	add	r1, sp
 800cf3e:	0028      	movs	r0, r5
 800cf40:	f7ff fa40 	bl	800c3c4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d133      	bne.n	800cfb0 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800cf48:	230e      	movs	r3, #14
 800cf4a:	446b      	add	r3, sp
 800cf4c:	881b      	ldrh	r3, [r3, #0]
 800cf4e:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800cf50:	091a      	lsrs	r2, r3, #4
 800cf52:	42a2      	cmp	r2, r4
 800cf54:	d103      	bne.n	800cf5e <AddPortButton+0x8e>
 800cf56:	220f      	movs	r2, #15
 800cf58:	4013      	ands	r3, r2
 800cf5a:	42b3      	cmp	r3, r6
 800cf5c:	d015      	beq.n	800cf8a <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800cf5e:	0324      	lsls	r4, r4, #12
 800cf60:	0231      	lsls	r1, r6, #8
 800cf62:	4321      	orrs	r1, r4
 800cf64:	b289      	uxth	r1, r1
 800cf66:	230e      	movs	r3, #14
 800cf68:	446b      	add	r3, sp
 800cf6a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800cf6c:	0028      	movs	r0, r5
 800cf6e:	f7ff fa59 	bl	800c424 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800cf72:	1c68      	adds	r0, r5, #1
 800cf74:	2100      	movs	r1, #0
 800cf76:	f7ff fa55 	bl	800c424 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800cf7a:	1ca8      	adds	r0, r5, #2
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	f7ff fa51 	bl	800c424 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800cf82:	1ce8      	adds	r0, r5, #3
 800cf84:	2100      	movs	r1, #0
 800cf86:	f7ff fa4d 	bl	800c424 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	b00d      	add	sp, #52	; 0x34
 800cf8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800cf90:	008d      	lsls	r5, r1, #2
 800cf92:	4b16      	ldr	r3, [pc, #88]	; (800cfec <AddPortButton+0x11c>)
 800cf94:	58e8      	ldr	r0, [r5, r3]
 800cf96:	f001 fd9d 	bl	800ead4 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800cf9a:	4b15      	ldr	r3, [pc, #84]	; (800cff0 <AddPortButton+0x120>)
 800cf9c:	58e8      	ldr	r0, [r5, r3]
 800cf9e:	f001 fd99 	bl	800ead4 <osSemaphoreRelease>
 800cfa2:	e79d      	b.n	800cee0 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800cfa4:	0020      	movs	r0, r4
 800cfa6:	f001 fb7d 	bl	800e6a4 <GetUart>
 800cfaa:	f006 fb28 	bl	80135fe <HAL_UART_DeInit>
 800cfae:	e79e      	b.n	800ceee <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800cfb0:	0324      	lsls	r4, r4, #12
 800cfb2:	0231      	lsls	r1, r6, #8
 800cfb4:	4321      	orrs	r1, r4
 800cfb6:	b289      	uxth	r1, r1
 800cfb8:	230e      	movs	r3, #14
 800cfba:	446b      	add	r3, sp
 800cfbc:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800cfbe:	0028      	movs	r0, r5
 800cfc0:	f7ff fa30 	bl	800c424 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800cfc4:	1c68      	adds	r0, r5, #1
 800cfc6:	2100      	movs	r1, #0
 800cfc8:	f7ff fa2c 	bl	800c424 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800cfcc:	1ca8      	adds	r0, r5, #2
 800cfce:	2100      	movs	r1, #0
 800cfd0:	f7ff fa28 	bl	800c424 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800cfd4:	1ce8      	adds	r0, r5, #3
 800cfd6:	2100      	movs	r1, #0
 800cfd8:	f7ff fa24 	bl	800c424 <EE_WriteVariable>
 800cfdc:	e7d5      	b.n	800cf8a <AddPortButton+0xba>
 800cfde:	46c0      	nop			; (mov r8, r8)
 800cfe0:	20000ae6 	.word	0x20000ae6
 800cfe4:	2000116c 	.word	0x2000116c
 800cfe8:	20001ed0 	.word	0x20001ed0
 800cfec:	20006ef4 	.word	0x20006ef4
 800cff0:	20006ed4 	.word	0x20006ed4

0800cff4 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800cff4:	b570      	push	{r4, r5, r6, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800cffa:	4837      	ldr	r0, [pc, #220]	; (800d0d8 <RemovePortButton+0xe4>)
 800cffc:	00e9      	lsls	r1, r5, #3
 800cffe:	1949      	adds	r1, r1, r5
 800d000:	1842      	adds	r2, r0, r1
 800d002:	2300      	movs	r3, #0
 800d004:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800d006:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800d008:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800d00a:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800d00c:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800d00e:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800d010:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800d012:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800d014:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800d016:	002c      	movs	r4, r5
 800d018:	343a      	adds	r4, #58	; 0x3a
 800d01a:	00a4      	lsls	r4, r4, #2
 800d01c:	466b      	mov	r3, sp
 800d01e:	1d99      	adds	r1, r3, #6
 800d020:	0020      	movs	r0, r4
 800d022:	f7ff f9cf 	bl	800c3c4 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800d026:	2800      	cmp	r0, #0
 800d028:	d02b      	beq.n	800d082 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800d02a:	0028      	movs	r0, r5
 800d02c:	f001 fb3a 	bl	800e6a4 <GetUart>
 800d030:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 800d032:	6803      	ldr	r3, [r0, #0]
 800d034:	4a29      	ldr	r2, [pc, #164]	; (800d0dc <RemovePortButton+0xe8>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d034      	beq.n	800d0a4 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800d03a:	4a29      	ldr	r2, [pc, #164]	; (800d0e0 <RemovePortButton+0xec>)
 800d03c:	4293      	cmp	r3, r2
 800d03e:	d035      	beq.n	800d0ac <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800d040:	4a28      	ldr	r2, [pc, #160]	; (800d0e4 <RemovePortButton+0xf0>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d036      	beq.n	800d0b4 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800d046:	4a28      	ldr	r2, [pc, #160]	; (800d0e8 <RemovePortButton+0xf4>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d037      	beq.n	800d0bc <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800d04c:	4a27      	ldr	r2, [pc, #156]	; (800d0ec <RemovePortButton+0xf8>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d038      	beq.n	800d0c4 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800d052:	4a27      	ldr	r2, [pc, #156]	; (800d0f0 <RemovePortButton+0xfc>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d039      	beq.n	800d0cc <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800d058:	4a26      	ldr	r2, [pc, #152]	; (800d0f4 <RemovePortButton+0x100>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d03a      	beq.n	800d0d4 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800d05e:	4a26      	ldr	r2, [pc, #152]	; (800d0f8 <RemovePortButton+0x104>)
 800d060:	4694      	mov	ip, r2
 800d062:	4463      	add	r3, ip
 800d064:	1e5c      	subs	r4, r3, #1
 800d066:	41a3      	sbcs	r3, r4
 800d068:	425c      	negs	r4, r3
 800d06a:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800d06c:	4b23      	ldr	r3, [pc, #140]	; (800d0fc <RemovePortButton+0x108>)
 800d06e:	2200      	movs	r2, #0
 800d070:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800d072:	3201      	adds	r2, #1
 800d074:	4922      	ldr	r1, [pc, #136]	; (800d100 <RemovePortButton+0x10c>)
 800d076:	0030      	movs	r0, r6
 800d078:	f006 fb1a 	bl	80136b0 <HAL_UART_Receive_IT>

	return result;
}
 800d07c:	0020      	movs	r0, r4
 800d07e:	b002      	add	sp, #8
 800d080:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800d082:	2100      	movs	r1, #0
 800d084:	0020      	movs	r0, r4
 800d086:	f7ff f9cd 	bl	800c424 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800d08a:	1c60      	adds	r0, r4, #1
 800d08c:	2100      	movs	r1, #0
 800d08e:	f7ff f9c9 	bl	800c424 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800d092:	1ca0      	adds	r0, r4, #2
 800d094:	2100      	movs	r1, #0
 800d096:	f7ff f9c5 	bl	800c424 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800d09a:	1ce0      	adds	r0, r4, #3
 800d09c:	2100      	movs	r1, #0
 800d09e:	f7ff f9c1 	bl	800c424 <EE_WriteVariable>
 800d0a2:	e7c2      	b.n	800d02a <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800d0a4:	f001 f936 	bl	800e314 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800d0a8:	2400      	movs	r4, #0
 800d0aa:	e7df      	b.n	800d06c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800d0ac:	f001 f94a 	bl	800e344 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800d0b0:	2400      	movs	r4, #0
 800d0b2:	e7db      	b.n	800d06c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800d0b4:	f001 f95e 	bl	800e374 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800d0b8:	2400      	movs	r4, #0
 800d0ba:	e7d7      	b.n	800d06c <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800d0bc:	f001 f972 	bl	800e3a4 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800d0c0:	2400      	movs	r4, #0
 800d0c2:	e7d3      	b.n	800d06c <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800d0c4:	f001 f986 	bl	800e3d4 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800d0c8:	2400      	movs	r4, #0
 800d0ca:	e7cf      	b.n	800d06c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800d0cc:	f001 f99a 	bl	800e404 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800d0d0:	2400      	movs	r4, #0
 800d0d2:	e7cb      	b.n	800d06c <RemovePortButton+0x78>
 800d0d4:	2400      	movs	r4, #0
 800d0d6:	e7c9      	b.n	800d06c <RemovePortButton+0x78>
 800d0d8:	20001ed0 	.word	0x20001ed0
 800d0dc:	40013800 	.word	0x40013800
 800d0e0:	40004400 	.word	0x40004400
 800d0e4:	40004800 	.word	0x40004800
 800d0e8:	40004c00 	.word	0x40004c00
 800d0ec:	40005000 	.word	0x40005000
 800d0f0:	40011400 	.word	0x40011400
 800d0f4:	40011800 	.word	0x40011800
 800d0f8:	bffee400 	.word	0xbffee400
 800d0fc:	2000116c 	.word	0x2000116c
 800d100:	20000ecc 	.word	0x20000ecc

0800d104 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800d104:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d106:	46de      	mov	lr, fp
 800d108:	4657      	mov	r7, sl
 800d10a:	464e      	mov	r6, r9
 800d10c:	4645      	mov	r5, r8
 800d10e:	b5e0      	push	{r5, r6, r7, lr}
 800d110:	b085      	sub	sp, #20
 800d112:	0007      	movs	r7, r0
 800d114:	001e      	movs	r6, r3
 800d116:	ab0e      	add	r3, sp, #56	; 0x38
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	4698      	mov	r8, r3
 800d11c:	ab0f      	add	r3, sp, #60	; 0x3c
 800d11e:	781d      	ldrb	r5, [r3, #0]
 800d120:	ab10      	add	r3, sp, #64	; 0x40
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	469b      	mov	fp, r3
 800d126:	ab11      	add	r3, sp, #68	; 0x44
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	469a      	mov	sl, r3
 800d12c:	ab12      	add	r3, sp, #72	; 0x48
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	4699      	mov	r9, r3
 800d132:	ab13      	add	r3, sp, #76	; 0x4c
 800d134:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800d136:	00fc      	lsls	r4, r7, #3
 800d138:	19e4      	adds	r4, r4, r7
 800d13a:	4b9e      	ldr	r3, [pc, #632]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d13c:	191b      	adds	r3, r3, r4
 800d13e:	785b      	ldrb	r3, [r3, #1]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d04c      	beq.n	800d1de <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800d144:	00fc      	lsls	r4, r7, #3
 800d146:	19e4      	adds	r4, r4, r7
 800d148:	4b9a      	ldr	r3, [pc, #616]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d14a:	191b      	adds	r3, r3, r4
 800d14c:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800d14e:	4644      	mov	r4, r8
 800d150:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800d152:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800d154:	465c      	mov	r4, fp
 800d156:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800d158:	4654      	mov	r4, sl
 800d15a:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800d15c:	464c      	mov	r4, r9
 800d15e:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800d160:	2801      	cmp	r0, #1
 800d162:	d003      	beq.n	800d16c <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800d164:	2800      	cmp	r0, #0
 800d166:	d113      	bne.n	800d190 <SetButtonEvents+0x8c>
 800d168:	2900      	cmp	r1, #0
 800d16a:	d042      	beq.n	800d1f2 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800d16c:	00f9      	lsls	r1, r7, #3
 800d16e:	19c9      	adds	r1, r1, r7
 800d170:	4b90      	ldr	r3, [pc, #576]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d172:	185b      	adds	r3, r3, r1
 800d174:	7a19      	ldrb	r1, [r3, #8]
 800d176:	2401      	movs	r4, #1
 800d178:	4321      	orrs	r1, r4
 800d17a:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800d17c:	2801      	cmp	r0, #1
 800d17e:	d10c      	bne.n	800d19a <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800d180:	00fa      	lsls	r2, r7, #3
 800d182:	19d2      	adds	r2, r2, r7
 800d184:	4b8b      	ldr	r3, [pc, #556]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d186:	189b      	adds	r3, r3, r2
 800d188:	7a1a      	ldrb	r2, [r3, #8]
 800d18a:	2102      	movs	r1, #2
 800d18c:	430a      	orrs	r2, r1
 800d18e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800d190:	2801      	cmp	r0, #1
 800d192:	d042      	beq.n	800d21a <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800d194:	2800      	cmp	r0, #0
 800d196:	d152      	bne.n	800d23e <SetButtonEvents+0x13a>
 800d198:	e03d      	b.n	800d216 <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d031      	beq.n	800d202 <SetButtonEvents+0xfe>
 800d19e:	e044      	b.n	800d22a <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800d1a0:	2800      	cmp	r0, #0
 800d1a2:	d059      	beq.n	800d258 <SetButtonEvents+0x154>
 800d1a4:	e06d      	b.n	800d282 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d100      	bne.n	800d1ac <SetButtonEvents+0xa8>
 800d1aa:	e082      	b.n	800d2b2 <SetButtonEvents+0x1ae>
 800d1ac:	e097      	b.n	800d2de <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d100      	bne.n	800d1b4 <SetButtonEvents+0xb0>
 800d1b2:	e0f2      	b.n	800d39a <SetButtonEvents+0x296>
 800d1b4:	e09f      	b.n	800d2f6 <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800d1b6:	0a19      	lsrs	r1, r3, #8
 800d1b8:	0209      	lsls	r1, r1, #8
 800d1ba:	4311      	orrs	r1, r2
 800d1bc:	ab02      	add	r3, sp, #8
 800d1be:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800d1c0:	0020      	movs	r0, r4
 800d1c2:	f7ff f92f 	bl	800c424 <EE_WriteVariable>
 800d1c6:	e0ad      	b.n	800d324 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800d1c8:	0019      	movs	r1, r3
 800d1ca:	9801      	ldr	r0, [sp, #4]
 800d1cc:	f7ff f92a 	bl	800c424 <EE_WriteVariable>
 800d1d0:	e0b7      	b.n	800d342 <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800d1d2:	4653      	mov	r3, sl
 800d1d4:	4319      	orrs	r1, r3
 800d1d6:	0030      	movs	r0, r6
 800d1d8:	f7ff f924 	bl	800c424 <EE_WriteVariable>
 800d1dc:	e0c0      	b.n	800d360 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800d1de:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800d1e0:	b005      	add	sp, #20
 800d1e2:	bc3c      	pop	{r2, r3, r4, r5}
 800d1e4:	4690      	mov	r8, r2
 800d1e6:	4699      	mov	r9, r3
 800d1e8:	46a2      	mov	sl, r4
 800d1ea:	46ab      	mov	fp, r5
 800d1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800d1ee:	200b      	movs	r0, #11
 800d1f0:	e7f6      	b.n	800d1e0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800d1f2:	00f9      	lsls	r1, r7, #3
 800d1f4:	19c9      	adds	r1, r1, r7
 800d1f6:	4b6f      	ldr	r3, [pc, #444]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d1f8:	185b      	adds	r3, r3, r1
 800d1fa:	7a19      	ldrb	r1, [r3, #8]
 800d1fc:	2401      	movs	r4, #1
 800d1fe:	43a1      	bics	r1, r4
 800d200:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800d202:	2a00      	cmp	r2, #0
 800d204:	d1bc      	bne.n	800d180 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800d206:	00fa      	lsls	r2, r7, #3
 800d208:	19d2      	adds	r2, r2, r7
 800d20a:	4b6a      	ldr	r3, [pc, #424]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d20c:	189b      	adds	r3, r3, r2
 800d20e:	7a1a      	ldrb	r2, [r3, #8]
 800d210:	2102      	movs	r1, #2
 800d212:	438a      	bics	r2, r1
 800d214:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800d216:	2e00      	cmp	r6, #0
 800d218:	d016      	beq.n	800d248 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800d21a:	00fa      	lsls	r2, r7, #3
 800d21c:	19d2      	adds	r2, r2, r7
 800d21e:	4b65      	ldr	r3, [pc, #404]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d220:	189b      	adds	r3, r3, r2
 800d222:	7a1a      	ldrb	r2, [r3, #8]
 800d224:	2104      	movs	r1, #4
 800d226:	430a      	orrs	r2, r1
 800d228:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d22a:	2801      	cmp	r0, #1
 800d22c:	d1b8      	bne.n	800d1a0 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800d22e:	00fa      	lsls	r2, r7, #3
 800d230:	19d2      	adds	r2, r2, r7
 800d232:	4b60      	ldr	r3, [pc, #384]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d234:	189b      	adds	r3, r3, r2
 800d236:	7a1a      	ldrb	r2, [r3, #8]
 800d238:	2108      	movs	r1, #8
 800d23a:	430a      	orrs	r2, r1
 800d23c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d23e:	2801      	cmp	r0, #1
 800d240:	d017      	beq.n	800d272 <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800d242:	2800      	cmp	r0, #0
 800d244:	d128      	bne.n	800d298 <SetButtonEvents+0x194>
 800d246:	e012      	b.n	800d26e <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800d248:	00fa      	lsls	r2, r7, #3
 800d24a:	19d2      	adds	r2, r2, r7
 800d24c:	4b59      	ldr	r3, [pc, #356]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d24e:	189b      	adds	r3, r3, r2
 800d250:	7a1a      	ldrb	r2, [r3, #8]
 800d252:	2104      	movs	r1, #4
 800d254:	438a      	bics	r2, r1
 800d256:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800d258:	4643      	mov	r3, r8
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1e7      	bne.n	800d22e <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800d25e:	00fa      	lsls	r2, r7, #3
 800d260:	19d2      	adds	r2, r2, r7
 800d262:	4b54      	ldr	r3, [pc, #336]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d264:	189b      	adds	r3, r3, r2
 800d266:	7a1a      	ldrb	r2, [r3, #8]
 800d268:	2108      	movs	r1, #8
 800d26a:	438a      	bics	r2, r1
 800d26c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800d26e:	2d00      	cmp	r5, #0
 800d270:	d017      	beq.n	800d2a2 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800d272:	00fa      	lsls	r2, r7, #3
 800d274:	19d2      	adds	r2, r2, r7
 800d276:	4b4f      	ldr	r3, [pc, #316]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d278:	189b      	adds	r3, r3, r2
 800d27a:	7a1a      	ldrb	r2, [r3, #8]
 800d27c:	2110      	movs	r1, #16
 800d27e:	430a      	orrs	r2, r1
 800d280:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d282:	2801      	cmp	r0, #1
 800d284:	d000      	beq.n	800d288 <SetButtonEvents+0x184>
 800d286:	e78e      	b.n	800d1a6 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800d288:	00fa      	lsls	r2, r7, #3
 800d28a:	19d2      	adds	r2, r2, r7
 800d28c:	4b49      	ldr	r3, [pc, #292]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d28e:	189b      	adds	r3, r3, r2
 800d290:	7a1a      	ldrb	r2, [r3, #8]
 800d292:	2120      	movs	r1, #32
 800d294:	430a      	orrs	r2, r1
 800d296:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d298:	2801      	cmp	r0, #1
 800d29a:	d018      	beq.n	800d2ce <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800d29c:	2800      	cmp	r0, #0
 800d29e:	d12a      	bne.n	800d2f6 <SetButtonEvents+0x1f2>
 800d2a0:	e012      	b.n	800d2c8 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800d2a2:	00fa      	lsls	r2, r7, #3
 800d2a4:	19d2      	adds	r2, r2, r7
 800d2a6:	4b43      	ldr	r3, [pc, #268]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d2a8:	189b      	adds	r3, r3, r2
 800d2aa:	7a1a      	ldrb	r2, [r3, #8]
 800d2ac:	2110      	movs	r1, #16
 800d2ae:	438a      	bics	r2, r1
 800d2b0:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800d2b2:	465b      	mov	r3, fp
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d1e7      	bne.n	800d288 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800d2b8:	00fa      	lsls	r2, r7, #3
 800d2ba:	19d2      	adds	r2, r2, r7
 800d2bc:	4b3d      	ldr	r3, [pc, #244]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d2be:	189b      	adds	r3, r3, r2
 800d2c0:	7a1a      	ldrb	r2, [r3, #8]
 800d2c2:	2120      	movs	r1, #32
 800d2c4:	438a      	bics	r2, r1
 800d2c6:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800d2c8:	4653      	mov	r3, sl
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d05d      	beq.n	800d38a <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800d2ce:	00fa      	lsls	r2, r7, #3
 800d2d0:	19d2      	adds	r2, r2, r7
 800d2d2:	4b38      	ldr	r3, [pc, #224]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d2d4:	189b      	adds	r3, r3, r2
 800d2d6:	7a1a      	ldrb	r2, [r3, #8]
 800d2d8:	2140      	movs	r1, #64	; 0x40
 800d2da:	430a      	orrs	r2, r1
 800d2dc:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800d2de:	2801      	cmp	r0, #1
 800d2e0:	d000      	beq.n	800d2e4 <SetButtonEvents+0x1e0>
 800d2e2:	e764      	b.n	800d1ae <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800d2e4:	00fa      	lsls	r2, r7, #3
 800d2e6:	19d2      	adds	r2, r2, r7
 800d2e8:	4b32      	ldr	r3, [pc, #200]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d2ea:	189b      	adds	r3, r3, r2
 800d2ec:	7a19      	ldrb	r1, [r3, #8]
 800d2ee:	2280      	movs	r2, #128	; 0x80
 800d2f0:	4252      	negs	r2, r2
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800d2f6:	003c      	movs	r4, r7
 800d2f8:	343a      	adds	r4, #58	; 0x3a
 800d2fa:	00a4      	lsls	r4, r4, #2
 800d2fc:	ab02      	add	r3, sp, #8
 800d2fe:	1d99      	adds	r1, r3, #6
 800d300:	0020      	movs	r0, r4
 800d302:	f7ff f85f 	bl	800c3c4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800d306:	2800      	cmp	r0, #0
 800d308:	d000      	beq.n	800d30c <SetButtonEvents+0x208>
 800d30a:	e770      	b.n	800d1ee <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800d30c:	ab02      	add	r3, sp, #8
 800d30e:	3306      	adds	r3, #6
 800d310:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800d312:	00fa      	lsls	r2, r7, #3
 800d314:	19d2      	adds	r2, r2, r7
 800d316:	4f27      	ldr	r7, [pc, #156]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d318:	18bf      	adds	r7, r7, r2
 800d31a:	7a3a      	ldrb	r2, [r7, #8]
 800d31c:	b2d9      	uxtb	r1, r3
 800d31e:	4291      	cmp	r1, r2
 800d320:	d000      	beq.n	800d324 <SetButtonEvents+0x220>
 800d322:	e748      	b.n	800d1b6 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800d324:	1c63      	adds	r3, r4, #1
 800d326:	aa02      	add	r2, sp, #8
 800d328:	1d97      	adds	r7, r2, #6
 800d32a:	0039      	movs	r1, r7
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	0018      	movs	r0, r3
 800d330:	f7ff f848 	bl	800c3c4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800d334:	0236      	lsls	r6, r6, #8
 800d336:	883a      	ldrh	r2, [r7, #0]
 800d338:	465b      	mov	r3, fp
 800d33a:	4333      	orrs	r3, r6
		if (temp16
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d000      	beq.n	800d342 <SetButtonEvents+0x23e>
 800d340:	e742      	b.n	800d1c8 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800d342:	1ca6      	adds	r6, r4, #2
 800d344:	ab02      	add	r3, sp, #8
 800d346:	1d9f      	adds	r7, r3, #6
 800d348:	0039      	movs	r1, r7
 800d34a:	0030      	movs	r0, r6
 800d34c:	f7ff f83a 	bl	800c3c4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800d350:	4643      	mov	r3, r8
 800d352:	0219      	lsls	r1, r3, #8
 800d354:	883a      	ldrh	r2, [r7, #0]
 800d356:	4653      	mov	r3, sl
 800d358:	430b      	orrs	r3, r1
		if (temp16
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d000      	beq.n	800d360 <SetButtonEvents+0x25c>
 800d35e:	e738      	b.n	800d1d2 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800d360:	3403      	adds	r4, #3
 800d362:	ab02      	add	r3, sp, #8
 800d364:	1d9e      	adds	r6, r3, #6
 800d366:	0031      	movs	r1, r6
 800d368:	0020      	movs	r0, r4
 800d36a:	f7ff f82b 	bl	800c3c4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800d36e:	022d      	lsls	r5, r5, #8
 800d370:	8832      	ldrh	r2, [r6, #0]
 800d372:	464b      	mov	r3, r9
 800d374:	432b      	orrs	r3, r5
	return result;
 800d376:	2000      	movs	r0, #0
		if (temp16
 800d378:	429a      	cmp	r2, r3
 800d37a:	d100      	bne.n	800d37e <SetButtonEvents+0x27a>
 800d37c:	e730      	b.n	800d1e0 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800d37e:	0019      	movs	r1, r3
 800d380:	0020      	movs	r0, r4
 800d382:	f7ff f84f 	bl	800c424 <EE_WriteVariable>
	return result;
 800d386:	2000      	movs	r0, #0
 800d388:	e72a      	b.n	800d1e0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800d38a:	00fa      	lsls	r2, r7, #3
 800d38c:	19d2      	adds	r2, r2, r7
 800d38e:	4b09      	ldr	r3, [pc, #36]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d390:	189b      	adds	r3, r3, r2
 800d392:	7a1a      	ldrb	r2, [r3, #8]
 800d394:	2140      	movs	r1, #64	; 0x40
 800d396:	438a      	bics	r2, r1
 800d398:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800d39a:	464b      	mov	r3, r9
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1a1      	bne.n	800d2e4 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800d3a0:	00fa      	lsls	r2, r7, #3
 800d3a2:	19d2      	adds	r2, r2, r7
 800d3a4:	4b03      	ldr	r3, [pc, #12]	; (800d3b4 <SetButtonEvents+0x2b0>)
 800d3a6:	189b      	adds	r3, r3, r2
 800d3a8:	7a19      	ldrb	r1, [r3, #8]
 800d3aa:	227f      	movs	r2, #127	; 0x7f
 800d3ac:	400a      	ands	r2, r1
 800d3ae:	721a      	strb	r2, [r3, #8]
 800d3b0:	e7a1      	b.n	800d2f6 <SetButtonEvents+0x1f2>
 800d3b2:	46c0      	nop			; (mov r8, r8)
 800d3b4:	20001ed0 	.word	0x20001ed0

0800d3b8 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800d3b8:	b500      	push	{lr}
 800d3ba:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800d3bc:	2214      	movs	r2, #20
 800d3be:	2100      	movs	r1, #0
 800d3c0:	a803      	add	r0, sp, #12
 800d3c2:	f007 f96d 	bl	80146a0 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800d3c6:	4b12      	ldr	r3, [pc, #72]	; (800d410 <HAL_ADC_MspInit+0x58>)
 800d3c8:	6999      	ldr	r1, [r3, #24]
 800d3ca:	2080      	movs	r0, #128	; 0x80
 800d3cc:	0080      	lsls	r0, r0, #2
 800d3ce:	4301      	orrs	r1, r0
 800d3d0:	6199      	str	r1, [r3, #24]
 800d3d2:	699a      	ldr	r2, [r3, #24]
 800d3d4:	4002      	ands	r2, r0
 800d3d6:	9201      	str	r2, [sp, #4]
 800d3d8:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800d3da:	695a      	ldr	r2, [r3, #20]
 800d3dc:	2180      	movs	r1, #128	; 0x80
 800d3de:	0289      	lsls	r1, r1, #10
 800d3e0:	430a      	orrs	r2, r1
 800d3e2:	615a      	str	r2, [r3, #20]
 800d3e4:	695b      	ldr	r3, [r3, #20]
 800d3e6:	400b      	ands	r3, r1
 800d3e8:	9302      	str	r3, [sp, #8]
 800d3ea:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800d3ec:	4b09      	ldr	r3, [pc, #36]	; (800d414 <HAL_ADC_MspInit+0x5c>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d001      	beq.n	800d3f8 <HAL_ADC_MspInit+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800d3f4:	b009      	add	sp, #36	; 0x24
 800d3f6:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800d3f8:	333b      	adds	r3, #59	; 0x3b
 800d3fa:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d3fc:	3b39      	subs	r3, #57	; 0x39
 800d3fe:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800d400:	3871      	subs	r0, #113	; 0x71
 800d402:	38ff      	subs	r0, #255	; 0xff
 800d404:	a903      	add	r1, sp, #12
 800d406:	05c0      	lsls	r0, r0, #23
 800d408:	f004 fd12 	bl	8011e30 <HAL_GPIO_Init>
}
 800d40c:	e7f2      	b.n	800d3f4 <HAL_ADC_MspInit+0x3c>
 800d40e:	46c0      	nop			; (mov r8, r8)
 800d410:	40021000 	.word	0x40021000
 800d414:	20001f1c 	.word	0x20001f1c

0800d418 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800d418:	6803      	ldr	r3, [r0, #0]
 800d41a:	4a0d      	ldr	r2, [pc, #52]	; (800d450 <Get_channel+0x38>)
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d003      	beq.n	800d428 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800d420:	4a0c      	ldr	r2, [pc, #48]	; (800d454 <Get_channel+0x3c>)
 800d422:	4293      	cmp	r3, r2
 800d424:	d008      	beq.n	800d438 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800d426:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800d428:	4b0b      	ldr	r3, [pc, #44]	; (800d458 <Get_channel+0x40>)
 800d42a:	4299      	cmp	r1, r3
 800d42c:	d00c      	beq.n	800d448 <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 800d42e:	4b0b      	ldr	r3, [pc, #44]	; (800d45c <Get_channel+0x44>)
 800d430:	4299      	cmp	r1, r3
 800d432:	d1f8      	bne.n	800d426 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800d434:	2003      	movs	r0, #3
 800d436:	e7f6      	b.n	800d426 <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800d438:	4b07      	ldr	r3, [pc, #28]	; (800d458 <Get_channel+0x40>)
 800d43a:	4299      	cmp	r1, r3
 800d43c:	d006      	beq.n	800d44c <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 800d43e:	4b07      	ldr	r3, [pc, #28]	; (800d45c <Get_channel+0x44>)
 800d440:	4299      	cmp	r1, r3
 800d442:	d1f0      	bne.n	800d426 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 800d444:	2005      	movs	r0, #5
 800d446:	e7ee      	b.n	800d426 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 800d448:	2002      	movs	r0, #2
 800d44a:	e7ec      	b.n	800d426 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 800d44c:	2004      	movs	r0, #4
 800d44e:	e7ea      	b.n	800d426 <Get_channel+0xe>
 800d450:	40004400 	.word	0x40004400
 800d454:	40011400 	.word	0x40011400
 800d458:	08019d34 	.word	0x08019d34
 800d45c:	08019d38 	.word	0x08019d38

0800d460 <Error_Handler>:

void Error_Handler(void) {
 800d460:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800d462:	2064      	movs	r0, #100	; 0x64
 800d464:	f003 fa3c 	bl	80108e0 <HAL_Delay>

}
 800d468:	bd10      	pop	{r4, pc}
	...

0800d46c <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800d46c:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800d46e:	4811      	ldr	r0, [pc, #68]	; (800d4b4 <MX_ADC_Init+0x48>)
 800d470:	4b11      	ldr	r3, [pc, #68]	; (800d4b8 <MX_ADC_Init+0x4c>)
 800d472:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800d474:	2380      	movs	r3, #128	; 0x80
 800d476:	061b      	lsls	r3, r3, #24
 800d478:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800d47a:	2300      	movs	r3, #0
 800d47c:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800d47e:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800d480:	2201      	movs	r2, #1
 800d482:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800d484:	2104      	movs	r1, #4
 800d486:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800d488:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800d48a:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800d48c:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800d48e:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800d490:	21c2      	movs	r1, #194	; 0xc2
 800d492:	31ff      	adds	r1, #255	; 0xff
 800d494:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800d496:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800d498:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800d49a:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800d49c:	f003 fafa 	bl	8010a94 <HAL_ADC_Init>
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	d103      	bne.n	800d4ac <MX_ADC_Init+0x40>
	ADC_flag = 1;
 800d4a4:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <MX_ADC_Init+0x50>)
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	701a      	strb	r2, [r3, #0]
}
 800d4aa:	bd10      	pop	{r4, pc}
		Error_Handler();
 800d4ac:	f7ff ffd8 	bl	800d460 <Error_Handler>
 800d4b0:	e7f8      	b.n	800d4a4 <MX_ADC_Init+0x38>
 800d4b2:	46c0      	nop			; (mov r8, r8)
 800d4b4:	20007274 	.word	0x20007274
 800d4b8:	40012400 	.word	0x40012400
 800d4bc:	20001ebe 	.word	0x20001ebe

0800d4c0 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	0005      	movs	r5, r0
 800d4c6:	000e      	movs	r6, r1
	if (0 == ADC_flag)
 800d4c8:	4b4d      	ldr	r3, [pc, #308]	; (800d600 <ReadTempAndVref+0x140>)
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d100      	bne.n	800d4d2 <ReadTempAndVref+0x12>
 800d4d0:	e087      	b.n	800d5e2 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d4d2:	494c      	ldr	r1, [pc, #304]	; (800d604 <ReadTempAndVref+0x144>)
 800d4d4:	2310      	movs	r3, #16
 800d4d6:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d4d8:	2380      	movs	r3, #128	; 0x80
 800d4da:	015b      	lsls	r3, r3, #5
 800d4dc:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d4e2:	4849      	ldr	r0, [pc, #292]	; (800d608 <ReadTempAndVref+0x148>)
 800d4e4:	f003 fc36 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d000      	beq.n	800d4ee <ReadTempAndVref+0x2e>
 800d4ec:	e07c      	b.n	800d5e8 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 800d4ee:	4c46      	ldr	r4, [pc, #280]	; (800d608 <ReadTempAndVref+0x148>)
 800d4f0:	0020      	movs	r0, r4
 800d4f2:	f003 fb77 	bl	8010be4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800d4f6:	2164      	movs	r1, #100	; 0x64
 800d4f8:	0020      	movs	r0, r4
 800d4fa:	f003 fbc5 	bl	8010c88 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800d4fe:	0020      	movs	r0, r4
 800d500:	f003 fc22 	bl	8010d48 <HAL_ADC_GetValue>
 800d504:	4b41      	ldr	r3, [pc, #260]	; (800d60c <ReadTempAndVref+0x14c>)
 800d506:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800d508:	0400      	lsls	r0, r0, #16
 800d50a:	0c00      	lsrs	r0, r0, #16
 800d50c:	f7f5 fa9e 	bl	8002a4c <__aeabi_i2d>
 800d510:	4a3f      	ldr	r2, [pc, #252]	; (800d610 <ReadTempAndVref+0x150>)
 800d512:	4b40      	ldr	r3, [pc, #256]	; (800d614 <ReadTempAndVref+0x154>)
 800d514:	f7f4 fc8e 	bl	8001e34 <__aeabi_dmul>
 800d518:	2200      	movs	r2, #0
 800d51a:	4b3f      	ldr	r3, [pc, #252]	; (800d618 <ReadTempAndVref+0x158>)
 800d51c:	f7f4 f880 	bl	8001620 <__aeabi_ddiv>
 800d520:	4a3e      	ldr	r2, [pc, #248]	; (800d61c <ReadTempAndVref+0x15c>)
 800d522:	4b3f      	ldr	r3, [pc, #252]	; (800d620 <ReadTempAndVref+0x160>)
 800d524:	f7f4 fef8 	bl	8002318 <__aeabi_dsub>
 800d528:	4a3e      	ldr	r2, [pc, #248]	; (800d624 <ReadTempAndVref+0x164>)
 800d52a:	4b3f      	ldr	r3, [pc, #252]	; (800d628 <ReadTempAndVref+0x168>)
 800d52c:	f7f4 f878 	bl	8001620 <__aeabi_ddiv>
 800d530:	2200      	movs	r2, #0
 800d532:	4b3e      	ldr	r3, [pc, #248]	; (800d62c <ReadTempAndVref+0x16c>)
 800d534:	f7f3 fd58 	bl	8000fe8 <__aeabi_dadd>
 800d538:	f7f5 fb46 	bl	8002bc8 <__aeabi_d2f>
 800d53c:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800d53e:	0020      	movs	r0, r4
 800d540:	f003 fb80 	bl	8010c44 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800d544:	492f      	ldr	r1, [pc, #188]	; (800d604 <ReadTempAndVref+0x144>)
 800d546:	2310      	movs	r3, #16
 800d548:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800d54a:	4b39      	ldr	r3, [pc, #228]	; (800d630 <ReadTempAndVref+0x170>)
 800d54c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d54e:	2301      	movs	r3, #1
 800d550:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d552:	0020      	movs	r0, r4
 800d554:	f003 fbfe 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d148      	bne.n	800d5ee <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d55c:	4929      	ldr	r1, [pc, #164]	; (800d604 <ReadTempAndVref+0x144>)
 800d55e:	2311      	movs	r3, #17
 800d560:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d562:	2380      	movs	r3, #128	; 0x80
 800d564:	015b      	lsls	r3, r3, #5
 800d566:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800d568:	2305      	movs	r3, #5
 800d56a:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d56c:	4826      	ldr	r0, [pc, #152]	; (800d608 <ReadTempAndVref+0x148>)
 800d56e:	f003 fbf1 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d572:	2800      	cmp	r0, #0
 800d574:	d13e      	bne.n	800d5f4 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 800d576:	4d24      	ldr	r5, [pc, #144]	; (800d608 <ReadTempAndVref+0x148>)
 800d578:	0028      	movs	r0, r5
 800d57a:	f003 fb33 	bl	8010be4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800d57e:	2164      	movs	r1, #100	; 0x64
 800d580:	0028      	movs	r0, r5
 800d582:	f003 fb81 	bl	8010c88 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800d586:	0028      	movs	r0, r5
 800d588:	f003 fbde 	bl	8010d48 <HAL_ADC_GetValue>
 800d58c:	0004      	movs	r4, r0
 800d58e:	4b29      	ldr	r3, [pc, #164]	; (800d634 <ReadTempAndVref+0x174>)
 800d590:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800d592:	4b29      	ldr	r3, [pc, #164]	; (800d638 <ReadTempAndVref+0x178>)
 800d594:	8818      	ldrh	r0, [r3, #0]
 800d596:	f7f5 fa59 	bl	8002a4c <__aeabi_i2d>
 800d59a:	4a1d      	ldr	r2, [pc, #116]	; (800d610 <ReadTempAndVref+0x150>)
 800d59c:	4b1d      	ldr	r3, [pc, #116]	; (800d614 <ReadTempAndVref+0x154>)
 800d59e:	f7f4 fc49 	bl	8001e34 <__aeabi_dmul>
 800d5a2:	9000      	str	r0, [sp, #0]
 800d5a4:	9101      	str	r1, [sp, #4]
 800d5a6:	0420      	lsls	r0, r4, #16
 800d5a8:	0c00      	lsrs	r0, r0, #16
 800d5aa:	f7f5 fa4f 	bl	8002a4c <__aeabi_i2d>
 800d5ae:	0002      	movs	r2, r0
 800d5b0:	000b      	movs	r3, r1
 800d5b2:	9800      	ldr	r0, [sp, #0]
 800d5b4:	9901      	ldr	r1, [sp, #4]
 800d5b6:	f7f4 f833 	bl	8001620 <__aeabi_ddiv>
 800d5ba:	f7f5 fb05 	bl	8002bc8 <__aeabi_d2f>
 800d5be:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800d5c0:	0028      	movs	r0, r5
 800d5c2:	f003 fb3f 	bl	8010c44 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800d5c6:	490f      	ldr	r1, [pc, #60]	; (800d604 <ReadTempAndVref+0x144>)
 800d5c8:	2311      	movs	r3, #17
 800d5ca:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800d5cc:	4b18      	ldr	r3, [pc, #96]	; (800d630 <ReadTempAndVref+0x170>)
 800d5ce:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d5d4:	0028      	movs	r0, r5
 800d5d6:	f003 fbbd 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d10d      	bne.n	800d5fa <ReadTempAndVref+0x13a>
}
 800d5de:	b002      	add	sp, #8
 800d5e0:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 800d5e2:	f7ff ff43 	bl	800d46c <MX_ADC_Init>
 800d5e6:	e774      	b.n	800d4d2 <ReadTempAndVref+0x12>
		Error_Handler();
 800d5e8:	f7ff ff3a 	bl	800d460 <Error_Handler>
 800d5ec:	e77f      	b.n	800d4ee <ReadTempAndVref+0x2e>
		Error_Handler();
 800d5ee:	f7ff ff37 	bl	800d460 <Error_Handler>
 800d5f2:	e7b3      	b.n	800d55c <ReadTempAndVref+0x9c>
		Error_Handler();
 800d5f4:	f7ff ff34 	bl	800d460 <Error_Handler>
 800d5f8:	e7bd      	b.n	800d576 <ReadTempAndVref+0xb6>
		Error_Handler();
 800d5fa:	f7ff ff31 	bl	800d460 <Error_Handler>
}
 800d5fe:	e7ee      	b.n	800d5de <ReadTempAndVref+0x11e>
 800d600:	20001ebe 	.word	0x20001ebe
 800d604:	20001f5c 	.word	0x20001f5c
 800d608:	20007274 	.word	0x20007274
 800d60c:	20001ec2 	.word	0x20001ec2
 800d610:	66666666 	.word	0x66666666
 800d614:	400a6666 	.word	0x400a6666
 800d618:	40affe00 	.word	0x40affe00
 800d61c:	28f5c28f 	.word	0x28f5c28f
 800d620:	3ff68f5c 	.word	0x3ff68f5c
 800d624:	33333333 	.word	0x33333333
 800d628:	40113333 	.word	0x40113333
 800d62c:	40390000 	.word	0x40390000
 800d630:	00001001 	.word	0x00001001
 800d634:	20001ec0 	.word	0x20001ec0
 800d638:	1ffff7ba 	.word	0x1ffff7ba

0800d63c <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800d63c:	b570      	push	{r4, r5, r6, lr}
 800d63e:	b086      	sub	sp, #24
 800d640:	0004      	movs	r4, r0
 800d642:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800d644:	1e83      	subs	r3, r0, #2
 800d646:	2b01      	cmp	r3, #1
 800d648:	d901      	bls.n	800d64e <GetReadPrecentage+0x12>
}
 800d64a:	b006      	add	sp, #24
 800d64c:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800d64e:	4b4a      	ldr	r3, [pc, #296]	; (800d778 <GetReadPrecentage+0x13c>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d04f      	beq.n	800d6f6 <GetReadPrecentage+0xba>
		Channel = Get_channel(GetUart(port), "bottom");
 800d656:	0020      	movs	r0, r4
 800d658:	f001 f824 	bl	800e6a4 <GetUart>
 800d65c:	4947      	ldr	r1, [pc, #284]	; (800d77c <GetReadPrecentage+0x140>)
 800d65e:	f7ff fedb 	bl	800d418 <Get_channel>
 800d662:	4b47      	ldr	r3, [pc, #284]	; (800d780 <GetReadPrecentage+0x144>)
 800d664:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800d666:	4947      	ldr	r1, [pc, #284]	; (800d784 <GetReadPrecentage+0x148>)
 800d668:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d66a:	2380      	movs	r3, #128	; 0x80
 800d66c:	015b      	lsls	r3, r3, #5
 800d66e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d670:	2301      	movs	r3, #1
 800d672:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d674:	4844      	ldr	r0, [pc, #272]	; (800d788 <GetReadPrecentage+0x14c>)
 800d676:	f003 fb6d 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d67a:	2800      	cmp	r0, #0
 800d67c:	d178      	bne.n	800d770 <GetReadPrecentage+0x134>
		HAL_ADC_Start(&hadc);
 800d67e:	4c42      	ldr	r4, [pc, #264]	; (800d788 <GetReadPrecentage+0x14c>)
 800d680:	0020      	movs	r0, r4
 800d682:	f003 faaf 	bl	8010be4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800d686:	2164      	movs	r1, #100	; 0x64
 800d688:	0020      	movs	r0, r4
 800d68a:	f003 fafd 	bl	8010c88 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800d68e:	0020      	movs	r0, r4
 800d690:	f003 fb5a 	bl	8010d48 <HAL_ADC_GetValue>
 800d694:	f7f3 fc68 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800d698:	f7f5 fa44 	bl	8002b24 <__aeabi_f2d>
 800d69c:	4a3b      	ldr	r2, [pc, #236]	; (800d78c <GetReadPrecentage+0x150>)
 800d69e:	4b3c      	ldr	r3, [pc, #240]	; (800d790 <GetReadPrecentage+0x154>)
 800d6a0:	f7f4 fbc8 	bl	8001e34 <__aeabi_dmul>
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	4b3b      	ldr	r3, [pc, #236]	; (800d794 <GetReadPrecentage+0x158>)
 800d6a8:	f7f3 ffba 	bl	8001620 <__aeabi_ddiv>
 800d6ac:	f7f5 fa8c 	bl	8002bc8 <__aeabi_d2f>
 800d6b0:	4b39      	ldr	r3, [pc, #228]	; (800d798 <GetReadPrecentage+0x15c>)
 800d6b2:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 800d6b4:	4939      	ldr	r1, [pc, #228]	; (800d79c <GetReadPrecentage+0x160>)
 800d6b6:	f7f3 f941 	bl	800093c <__aeabi_fmul>
 800d6ba:	f7f5 fa33 	bl	8002b24 <__aeabi_f2d>
 800d6be:	4a33      	ldr	r2, [pc, #204]	; (800d78c <GetReadPrecentage+0x150>)
 800d6c0:	4b33      	ldr	r3, [pc, #204]	; (800d790 <GetReadPrecentage+0x154>)
 800d6c2:	f7f3 ffad 	bl	8001620 <__aeabi_ddiv>
 800d6c6:	f7f5 fa7f 	bl	8002bc8 <__aeabi_d2f>
 800d6ca:	4b35      	ldr	r3, [pc, #212]	; (800d7a0 <GetReadPrecentage+0x164>)
 800d6cc:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 800d6ce:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800d6d0:	0020      	movs	r0, r4
 800d6d2:	f003 fab7 	bl	8010c44 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800d6d6:	492b      	ldr	r1, [pc, #172]	; (800d784 <GetReadPrecentage+0x148>)
 800d6d8:	4b29      	ldr	r3, [pc, #164]	; (800d780 <GetReadPrecentage+0x144>)
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800d6de:	4b31      	ldr	r3, [pc, #196]	; (800d7a4 <GetReadPrecentage+0x168>)
 800d6e0:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d6e6:	0020      	movs	r0, r4
 800d6e8:	f003 fb34 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d0ac      	beq.n	800d64a <GetReadPrecentage+0xe>
			Error_Handler();
 800d6f0:	f7ff feb6 	bl	800d460 <Error_Handler>
 800d6f4:	e7a9      	b.n	800d64a <GetReadPrecentage+0xe>
			MX_ADC_Init();
 800d6f6:	f7ff feb9 	bl	800d46c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800d6fa:	0020      	movs	r0, r4
 800d6fc:	f000 ffd2 	bl	800e6a4 <GetUart>
 800d700:	f005 ff7d 	bl	80135fe <HAL_UART_DeInit>
			if (port == 3) {
 800d704:	2c03      	cmp	r4, #3
 800d706:	d01a      	beq.n	800d73e <GetReadPrecentage+0x102>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800d708:	2690      	movs	r6, #144	; 0x90
 800d70a:	05f6      	lsls	r6, r6, #23
 800d70c:	2104      	movs	r1, #4
 800d70e:	0030      	movs	r0, r6
 800d710:	f004 fc6e 	bl	8011ff0 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800d714:	2304      	movs	r3, #4
 800d716:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d718:	3b03      	subs	r3, #3
 800d71a:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d71c:	3302      	adds	r3, #2
 800d71e:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d720:	a901      	add	r1, sp, #4
 800d722:	0030      	movs	r0, r6
 800d724:	f004 fb84 	bl	8011e30 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800d728:	4b1f      	ldr	r3, [pc, #124]	; (800d7a8 <GetReadPrecentage+0x16c>)
 800d72a:	191b      	adds	r3, r3, r4
 800d72c:	3b01      	subs	r3, #1
 800d72e:	2206      	movs	r2, #6
 800d730:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800d732:	3a05      	subs	r2, #5
 800d734:	2104      	movs	r1, #4
 800d736:	0030      	movs	r0, r6
 800d738:	f004 fcee 	bl	8012118 <HAL_GPIO_WritePin>
 800d73c:	e78b      	b.n	800d656 <GetReadPrecentage+0x1a>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800d73e:	2690      	movs	r6, #144	; 0x90
 800d740:	05f6      	lsls	r6, r6, #23
 800d742:	2110      	movs	r1, #16
 800d744:	0030      	movs	r0, r6
 800d746:	f004 fc53 	bl	8011ff0 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d74a:	2310      	movs	r3, #16
 800d74c:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d74e:	3b0f      	subs	r3, #15
 800d750:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d752:	3302      	adds	r3, #2
 800d754:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d756:	a901      	add	r1, sp, #4
 800d758:	0030      	movs	r0, r6
 800d75a:	f004 fb69 	bl	8011e30 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800d75e:	4b12      	ldr	r3, [pc, #72]	; (800d7a8 <GetReadPrecentage+0x16c>)
 800d760:	2206      	movs	r2, #6
 800d762:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800d764:	3a05      	subs	r2, #5
 800d766:	2110      	movs	r1, #16
 800d768:	0030      	movs	r0, r6
 800d76a:	f004 fcd5 	bl	8012118 <HAL_GPIO_WritePin>
 800d76e:	e772      	b.n	800d656 <GetReadPrecentage+0x1a>
			Error_Handler();
 800d770:	f7ff fe76 	bl	800d460 <Error_Handler>
 800d774:	e783      	b.n	800d67e <GetReadPrecentage+0x42>
 800d776:	46c0      	nop			; (mov r8, r8)
 800d778:	20001ebe 	.word	0x20001ebe
 800d77c:	08019d38 	.word	0x08019d38
 800d780:	20001ecc 	.word	0x20001ecc
 800d784:	20001f5c 	.word	0x20001f5c
 800d788:	20007274 	.word	0x20007274
 800d78c:	66666666 	.word	0x66666666
 800d790:	400a6666 	.word	0x400a6666
 800d794:	40affe00 	.word	0x40affe00
 800d798:	20001f20 	.word	0x20001f20
 800d79c:	42c80000 	.word	0x42c80000
 800d7a0:	20001f10 	.word	0x20001f10
 800d7a4:	00001001 	.word	0x00001001
 800d7a8:	2000116c 	.word	0x2000116c

0800d7ac <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800d7ac:	2802      	cmp	r0, #2
 800d7ae:	d004      	beq.n	800d7ba <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800d7b0:	2803      	cmp	r0, #3
 800d7b2:	d010      	beq.n	800d7d6 <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 800d7b4:	4b0f      	ldr	r3, [pc, #60]	; (800d7f4 <Get_Rank+0x48>)
 800d7b6:	7818      	ldrb	r0, [r3, #0]
}
 800d7b8:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800d7ba:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <Get_Rank+0x4c>)
 800d7bc:	4299      	cmp	r1, r3
 800d7be:	d006      	beq.n	800d7ce <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 800d7c0:	4b0e      	ldr	r3, [pc, #56]	; (800d7fc <Get_Rank+0x50>)
 800d7c2:	4299      	cmp	r1, r3
 800d7c4:	d1f6      	bne.n	800d7b4 <Get_Rank+0x8>
		Rank_t = 1;
 800d7c6:	4b0b      	ldr	r3, [pc, #44]	; (800d7f4 <Get_Rank+0x48>)
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	701a      	strb	r2, [r3, #0]
 800d7cc:	e7f2      	b.n	800d7b4 <Get_Rank+0x8>
		Rank_t = 0;
 800d7ce:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <Get_Rank+0x48>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
 800d7d4:	e7ee      	b.n	800d7b4 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 800d7d6:	4b08      	ldr	r3, [pc, #32]	; (800d7f8 <Get_Rank+0x4c>)
 800d7d8:	4299      	cmp	r1, r3
 800d7da:	d006      	beq.n	800d7ea <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 800d7dc:	4b07      	ldr	r3, [pc, #28]	; (800d7fc <Get_Rank+0x50>)
 800d7de:	4299      	cmp	r1, r3
 800d7e0:	d1e8      	bne.n	800d7b4 <Get_Rank+0x8>
		Rank_t = 3;
 800d7e2:	4b04      	ldr	r3, [pc, #16]	; (800d7f4 <Get_Rank+0x48>)
 800d7e4:	2203      	movs	r2, #3
 800d7e6:	701a      	strb	r2, [r3, #0]
 800d7e8:	e7e4      	b.n	800d7b4 <Get_Rank+0x8>
		Rank_t = 2;
 800d7ea:	4b02      	ldr	r3, [pc, #8]	; (800d7f4 <Get_Rank+0x48>)
 800d7ec:	2202      	movs	r2, #2
 800d7ee:	701a      	strb	r2, [r3, #0]
 800d7f0:	e7e0      	b.n	800d7b4 <Get_Rank+0x8>
 800d7f2:	46c0      	nop			; (mov r8, r8)
 800d7f4:	20001ecd 	.word	0x20001ecd
 800d7f8:	08019d34 	.word	0x08019d34
 800d7fc:	08019d38 	.word	0x08019d38

0800d800 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800d800:	b570      	push	{r4, r5, r6, lr}
 800d802:	0004      	movs	r4, r0
 800d804:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800d806:	1e83      	subs	r3, r0, #2
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d900      	bls.n	800d80e <ADCSelectChannel+0xe>
}
 800d80c:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800d80e:	4b10      	ldr	r3, [pc, #64]	; (800d850 <ADCSelectChannel+0x50>)
 800d810:	2201      	movs	r2, #1
 800d812:	701a      	strb	r2, [r3, #0]
		HAL_UART_DeInit(GetUart(ADC_port));
 800d814:	f000 ff46 	bl	800e6a4 <GetUart>
 800d818:	f005 fef1 	bl	80135fe <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800d81c:	4b0d      	ldr	r3, [pc, #52]	; (800d854 <ADCSelectChannel+0x54>)
 800d81e:	191b      	adds	r3, r3, r4
 800d820:	3b01      	subs	r3, #1
 800d822:	2206      	movs	r2, #6
 800d824:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800d826:	0020      	movs	r0, r4
 800d828:	f000 ff3c 	bl	800e6a4 <GetUart>
 800d82c:	0029      	movs	r1, r5
 800d82e:	f7ff fdf3 	bl	800d418 <Get_channel>
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <ADCSelectChannel+0x58>)
 800d834:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 800d836:	0029      	movs	r1, r5
 800d838:	0020      	movs	r0, r4
 800d83a:	f7ff ffb7 	bl	800d7ac <Get_Rank>
 800d83e:	4b07      	ldr	r3, [pc, #28]	; (800d85c <ADCSelectChannel+0x5c>)
 800d840:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 800d842:	4b07      	ldr	r3, [pc, #28]	; (800d860 <ADCSelectChannel+0x60>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1e0      	bne.n	800d80c <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800d84a:	f7ff fe0f 	bl	800d46c <MX_ADC_Init>
}
 800d84e:	e7dd      	b.n	800d80c <ADCSelectChannel+0xc>
 800d850:	20001f1c 	.word	0x20001f1c
 800d854:	2000116c 	.word	0x2000116c
 800d858:	20001ecc 	.word	0x20001ecc
 800d85c:	20001ecd 	.word	0x20001ecd
 800d860:	20001ebe 	.word	0x20001ebe

0800d864 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800d864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d866:	0005      	movs	r5, r0
 800d868:	000e      	movs	r6, r1
 800d86a:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800d86c:	4b26      	ldr	r3, [pc, #152]	; (800d908 <ReadADCChannel+0xa4>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d008      	beq.n	800d886 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800d874:	4b25      	ldr	r3, [pc, #148]	; (800d90c <ReadADCChannel+0xa8>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	005b      	lsls	r3, r3, #1
 800d87a:	4a25      	ldr	r2, [pc, #148]	; (800d910 <ReadADCChannel+0xac>)
 800d87c:	5a98      	ldrh	r0, [r3, r2]
 800d87e:	f7f3 fb73 	bl	8000f68 <__aeabi_ui2f>
 800d882:	6020      	str	r0, [r4, #0]
}
 800d884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800d886:	f000 ff0d 	bl	800e6a4 <GetUart>
 800d88a:	0031      	movs	r1, r6
 800d88c:	f7ff fdc4 	bl	800d418 <Get_channel>
 800d890:	4f20      	ldr	r7, [pc, #128]	; (800d914 <ReadADCChannel+0xb0>)
 800d892:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 800d894:	0031      	movs	r1, r6
 800d896:	0028      	movs	r0, r5
 800d898:	f7ff ff88 	bl	800d7ac <Get_Rank>
 800d89c:	4b1b      	ldr	r3, [pc, #108]	; (800d90c <ReadADCChannel+0xa8>)
 800d89e:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800d8a0:	491d      	ldr	r1, [pc, #116]	; (800d918 <ReadADCChannel+0xb4>)
 800d8a2:	783b      	ldrb	r3, [r7, #0]
 800d8a4:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800d8a6:	2380      	movs	r3, #128	; 0x80
 800d8a8:	015b      	lsls	r3, r3, #5
 800d8aa:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d8b0:	481a      	ldr	r0, [pc, #104]	; (800d91c <ReadADCChannel+0xb8>)
 800d8b2:	f003 fa4f 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d122      	bne.n	800d900 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 800d8ba:	4d18      	ldr	r5, [pc, #96]	; (800d91c <ReadADCChannel+0xb8>)
 800d8bc:	0028      	movs	r0, r5
 800d8be:	f003 f991 	bl	8010be4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800d8c2:	2164      	movs	r1, #100	; 0x64
 800d8c4:	0028      	movs	r0, r5
 800d8c6:	f003 f9df 	bl	8010c88 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800d8ca:	0028      	movs	r0, r5
 800d8cc:	f003 fa3c 	bl	8010d48 <HAL_ADC_GetValue>
 800d8d0:	4b0e      	ldr	r3, [pc, #56]	; (800d90c <ReadADCChannel+0xa8>)
 800d8d2:	781b      	ldrb	r3, [r3, #0]
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	4a0e      	ldr	r2, [pc, #56]	; (800d910 <ReadADCChannel+0xac>)
 800d8d8:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800d8da:	0028      	movs	r0, r5
 800d8dc:	f003 f9b2 	bl	8010c44 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800d8e0:	490d      	ldr	r1, [pc, #52]	; (800d918 <ReadADCChannel+0xb4>)
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <ReadADCChannel+0xb0>)
 800d8e4:	781b      	ldrb	r3, [r3, #0]
 800d8e6:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800d8e8:	4b0d      	ldr	r3, [pc, #52]	; (800d920 <ReadADCChannel+0xbc>)
 800d8ea:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800d8ec:	2303      	movs	r3, #3
 800d8ee:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d8f0:	0028      	movs	r0, r5
 800d8f2:	f003 fa2f 	bl	8010d54 <HAL_ADC_ConfigChannel>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	d0bc      	beq.n	800d874 <ReadADCChannel+0x10>
			Error_Handler();
 800d8fa:	f7ff fdb1 	bl	800d460 <Error_Handler>
 800d8fe:	e7b9      	b.n	800d874 <ReadADCChannel+0x10>
			Error_Handler();
 800d900:	f7ff fdae 	bl	800d460 <Error_Handler>
 800d904:	e7d9      	b.n	800d8ba <ReadADCChannel+0x56>
 800d906:	46c0      	nop			; (mov r8, r8)
 800d908:	20001ebe 	.word	0x20001ebe
 800d90c:	20001ecd 	.word	0x20001ecd
 800d910:	20001ec4 	.word	0x20001ec4
 800d914:	20001ecc 	.word	0x20001ecc
 800d918:	20001f5c 	.word	0x20001f5c
 800d91c:	20007274 	.word	0x20007274
 800d920:	00001001 	.word	0x00001001

0800d924 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800d924:	4770      	bx	lr

0800d926 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800d926:	4770      	bx	lr

0800d928 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800d928:	4770      	bx	lr

0800d92a <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800d92a:	4770      	bx	lr

0800d92c <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800d92c:	4770      	bx	lr
	...

0800d930 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800d930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d932:	46de      	mov	lr, fp
 800d934:	4657      	mov	r7, sl
 800d936:	464e      	mov	r6, r9
 800d938:	4645      	mov	r5, r8
 800d93a:	b5e0      	push	{r5, r6, r7, lr}
 800d93c:	b089      	sub	sp, #36	; 0x24
 800d93e:	4dbd      	ldr	r5, [pc, #756]	; (800dc34 <CheckAttachedButtons+0x304>)
 800d940:	3509      	adds	r5, #9
 800d942:	2404      	movs	r4, #4
 800d944:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	469b      	mov	fp, r3
 800d94a:	4699      	mov	r9, r3
 800d94c:	e111      	b.n	800db72 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800d94e:	230e      	movs	r3, #14
 800d950:	aa02      	add	r2, sp, #8
 800d952:	4694      	mov	ip, r2
 800d954:	4463      	add	r3, ip
 800d956:	8819      	ldrh	r1, [r3, #0]
 800d958:	2201      	movs	r2, #1
 800d95a:	9807      	ldr	r0, [sp, #28]
 800d95c:	f004 fbdc 	bl	8012118 <HAL_GPIO_WritePin>
				Delay_us(10);
 800d960:	200a      	movs	r0, #10
 800d962:	f000 fcb3 	bl	800e2cc <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800d966:	ab05      	add	r3, sp, #20
 800d968:	8819      	ldrh	r1, [r3, #0]
 800d96a:	9806      	ldr	r0, [sp, #24]
 800d96c:	f004 fbce 	bl	801210c <HAL_GPIO_ReadPin>
 800d970:	4681      	mov	r9, r0
 800d972:	e126      	b.n	800dbc2 <CheckAttachedButtons+0x292>
			switch (button[i].type) {
 800d974:	2b01      	cmp	r3, #1
 800d976:	d105      	bne.n	800d984 <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 800d978:	464b      	mov	r3, r9
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d046      	beq.n	800da0c <CheckAttachedButtons+0xdc>
				else if (connected == GPIO_PIN_RESET)
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d100      	bne.n	800d984 <CheckAttachedButtons+0x54>
 800d982:	e1c5      	b.n	800dd10 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 800d984:	465b      	mov	r3, fp
 800d986:	2b04      	cmp	r3, #4
 800d988:	d001      	beq.n	800d98e <CheckAttachedButtons+0x5e>
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d107      	bne.n	800d99e <CheckAttachedButtons+0x6e>
				if (pressCounter[i] < 0xFFFF)
 800d98e:	4baa      	ldr	r3, [pc, #680]	; (800dc38 <CheckAttachedButtons+0x308>)
 800d990:	58e3      	ldr	r3, [r4, r3]
 800d992:	4aaa      	ldr	r2, [pc, #680]	; (800dc3c <CheckAttachedButtons+0x30c>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d842      	bhi.n	800da1e <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 800d998:	3301      	adds	r3, #1
 800d99a:	4aa7      	ldr	r2, [pc, #668]	; (800dc38 <CheckAttachedButtons+0x308>)
 800d99c:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 800d99e:	23fd      	movs	r3, #253	; 0xfd
 800d9a0:	465a      	mov	r2, fp
 800d9a2:	4013      	ands	r3, r2
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d100      	bne.n	800d9aa <CheckAttachedButtons+0x7a>
 800d9a8:	e1b6      	b.n	800dd18 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800d9aa:	4ba3      	ldr	r3, [pc, #652]	; (800dc38 <CheckAttachedButtons+0x308>)
 800d9ac:	58e3      	ldr	r3, [r4, r3]
 800d9ae:	4aa4      	ldr	r2, [pc, #656]	; (800dc40 <CheckAttachedButtons+0x310>)
 800d9b0:	8812      	ldrh	r2, [r2, #0]
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d36f      	bcc.n	800da96 <CheckAttachedButtons+0x166>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800d9b6:	d045      	beq.n	800da44 <CheckAttachedButtons+0x114>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800d9b8:	4ba2      	ldr	r3, [pc, #648]	; (800dc44 <CheckAttachedButtons+0x314>)
 800d9ba:	58e3      	ldr	r3, [r4, r3]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d202      	bcs.n	800d9c6 <CheckAttachedButtons+0x96>
					releaseCounter[i] = 0;
 800d9c0:	4ba0      	ldr	r3, [pc, #640]	; (800dc44 <CheckAttachedButtons+0x314>)
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800d9c6:	4b9c      	ldr	r3, [pc, #624]	; (800dc38 <CheckAttachedButtons+0x308>)
 800d9c8:	58e3      	ldr	r3, [r4, r3]
 800d9ca:	4a9d      	ldr	r2, [pc, #628]	; (800dc40 <CheckAttachedButtons+0x310>)
 800d9cc:	8852      	ldrh	r2, [r2, #2]
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d952      	bls.n	800da78 <CheckAttachedButtons+0x148>
						&& pressCounter[i] < 500) {
 800d9d2:	22f4      	movs	r2, #244	; 0xf4
 800d9d4:	32ff      	adds	r2, #255	; 0xff
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d84e      	bhi.n	800da78 <CheckAttachedButtons+0x148>
					if (clicked == 0)
 800d9da:	4b9b      	ldr	r3, [pc, #620]	; (800dc48 <CheckAttachedButtons+0x318>)
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d137      	bne.n	800da52 <CheckAttachedButtons+0x122>
						clicked = 1;		// Record a possible single click
 800d9e2:	4b99      	ldr	r3, [pc, #612]	; (800dc48 <CheckAttachedButtons+0x318>)
 800d9e4:	3af3      	subs	r2, #243	; 0xf3
 800d9e6:	3aff      	subs	r2, #255	; 0xff
 800d9e8:	701a      	strb	r2, [r3, #0]
 800d9ea:	e054      	b.n	800da96 <CheckAttachedButtons+0x166>
				if (connected == GPIO_PIN_SET)
 800d9ec:	464b      	mov	r3, r9
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d00f      	beq.n	800da12 <CheckAttachedButtons+0xe2>
				else if (connected == GPIO_PIN_RESET)
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d1c6      	bne.n	800d984 <CheckAttachedButtons+0x54>
					state = OPEN;
 800d9f6:	2303      	movs	r3, #3
 800d9f8:	469b      	mov	fp, r3
 800d9fa:	e18d      	b.n	800dd18 <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 800d9fc:	464b      	mov	r3, r9
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d00a      	beq.n	800da18 <CheckAttachedButtons+0xe8>
				else if (connected == GPIO_PIN_RESET)
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1be      	bne.n	800d984 <CheckAttachedButtons+0x54>
					state = OFF;
 800da06:	2301      	movs	r3, #1
 800da08:	469b      	mov	fp, r3
 800da0a:	e185      	b.n	800dd18 <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 800da0c:	2304      	movs	r3, #4
 800da0e:	469b      	mov	fp, r3
 800da10:	e7bd      	b.n	800d98e <CheckAttachedButtons+0x5e>
					state = CLOSED;
 800da12:	2304      	movs	r3, #4
 800da14:	469b      	mov	fp, r3
 800da16:	e7ba      	b.n	800d98e <CheckAttachedButtons+0x5e>
 800da18:	2302      	movs	r3, #2
 800da1a:	469b      	mov	fp, r3
 800da1c:	e7b7      	b.n	800d98e <CheckAttachedButtons+0x5e>
					pressCounter[i] = 0;			// Reset debounce counter
 800da1e:	4b86      	ldr	r3, [pc, #536]	; (800dc38 <CheckAttachedButtons+0x308>)
 800da20:	2200      	movs	r2, #0
 800da22:	50e2      	str	r2, [r4, r3]
 800da24:	e7bb      	b.n	800d99e <CheckAttachedButtons+0x6e>
					releaseCounter[i] = 0;		// Reset debounce counter
 800da26:	4b87      	ldr	r3, [pc, #540]	; (800dc44 <CheckAttachedButtons+0x314>)
 800da28:	2200      	movs	r2, #0
 800da2a:	50e2      	str	r2, [r4, r3]
 800da2c:	e17d      	b.n	800dd2a <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800da2e:	4b87      	ldr	r3, [pc, #540]	; (800dc4c <CheckAttachedButtons+0x31c>)
 800da30:	5cf3      	ldrb	r3, [r6, r3]
 800da32:	4a83      	ldr	r2, [pc, #524]	; (800dc40 <CheckAttachedButtons+0x310>)
 800da34:	7952      	ldrb	r2, [r2, #5]
 800da36:	429a      	cmp	r2, r3
 800da38:	d200      	bcs.n	800da3c <CheckAttachedButtons+0x10c>
 800da3a:	e182      	b.n	800dd42 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 800da3c:	3301      	adds	r3, #1
 800da3e:	4a83      	ldr	r2, [pc, #524]	; (800dc4c <CheckAttachedButtons+0x31c>)
 800da40:	54b3      	strb	r3, [r6, r2]
 800da42:	e7b2      	b.n	800d9aa <CheckAttachedButtons+0x7a>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800da44:	2107      	movs	r1, #7
 800da46:	4640      	mov	r0, r8
 800da48:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 800da4a:	3301      	adds	r3, #1
 800da4c:	497a      	ldr	r1, [pc, #488]	; (800dc38 <CheckAttachedButtons+0x308>)
 800da4e:	5063      	str	r3, [r4, r1]
 800da50:	e7b2      	b.n	800d9b8 <CheckAttachedButtons+0x88>
					else if (clicked == 2) {
 800da52:	2b02      	cmp	r3, #2
 800da54:	d11f      	bne.n	800da96 <CheckAttachedButtons+0x166>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800da56:	4b7d      	ldr	r3, [pc, #500]	; (800dc4c <CheckAttachedButtons+0x31c>)
 800da58:	5cf3      	ldrb	r3, [r6, r3]
 800da5a:	4a79      	ldr	r2, [pc, #484]	; (800dc40 <CheckAttachedButtons+0x310>)
 800da5c:	7912      	ldrb	r2, [r2, #4]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d219      	bcs.n	800da96 <CheckAttachedButtons+0x166>
										< BOS.buttons.maxInterClickTime) {
 800da62:	4a77      	ldr	r2, [pc, #476]	; (800dc40 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 800da64:	7952      	ldrb	r2, [r2, #5]
 800da66:	429a      	cmp	r2, r3
 800da68:	d915      	bls.n	800da96 <CheckAttachedButtons+0x166>
							clicked = 3;	// Record a possible double click
 800da6a:	4b77      	ldr	r3, [pc, #476]	; (800dc48 <CheckAttachedButtons+0x318>)
 800da6c:	2203      	movs	r2, #3
 800da6e:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800da70:	4b76      	ldr	r3, [pc, #472]	; (800dc4c <CheckAttachedButtons+0x31c>)
 800da72:	2200      	movs	r2, #0
 800da74:	54f2      	strb	r2, [r6, r3]
 800da76:	e00e      	b.n	800da96 <CheckAttachedButtons+0x166>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800da78:	3bf5      	subs	r3, #245	; 0xf5
 800da7a:	3bff      	subs	r3, #255	; 0xff
 800da7c:	4a74      	ldr	r2, [pc, #464]	; (800dc50 <CheckAttachedButtons+0x320>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d809      	bhi.n	800da96 <CheckAttachedButtons+0x166>
					if (clicked)
 800da82:	4b71      	ldr	r3, [pc, #452]	; (800dc48 <CheckAttachedButtons+0x318>)
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <CheckAttachedButtons+0x160>
						clicked = 0;						// Cannot be a click
 800da8a:	4b6f      	ldr	r3, [pc, #444]	; (800dc48 <CheckAttachedButtons+0x318>)
 800da8c:	2200      	movs	r2, #0
 800da8e:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800da90:	9803      	ldr	r0, [sp, #12]
 800da92:	f7ff f9a1 	bl	800cdd8 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800da96:	4b6b      	ldr	r3, [pc, #428]	; (800dc44 <CheckAttachedButtons+0x314>)
 800da98:	58e3      	ldr	r3, [r4, r3]
 800da9a:	4a69      	ldr	r2, [pc, #420]	; (800dc40 <CheckAttachedButtons+0x310>)
 800da9c:	8812      	ldrh	r2, [r2, #0]
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d34d      	bcc.n	800db3e <CheckAttachedButtons+0x20e>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800daa2:	d02b      	beq.n	800dafc <CheckAttachedButtons+0x1cc>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800daa4:	4b64      	ldr	r3, [pc, #400]	; (800dc38 <CheckAttachedButtons+0x308>)
 800daa6:	58e3      	ldr	r3, [r4, r3]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d202      	bcs.n	800dab2 <CheckAttachedButtons+0x182>
					pressCounter[i] = 0;
 800daac:	4b62      	ldr	r3, [pc, #392]	; (800dc38 <CheckAttachedButtons+0x308>)
 800daae:	2200      	movs	r2, #0
 800dab0:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800dab2:	4b64      	ldr	r3, [pc, #400]	; (800dc44 <CheckAttachedButtons+0x314>)
 800dab4:	58e3      	ldr	r3, [r4, r3]
 800dab6:	4a62      	ldr	r2, [pc, #392]	; (800dc40 <CheckAttachedButtons+0x310>)
 800dab8:	8852      	ldrh	r2, [r2, #2]
 800daba:	4293      	cmp	r3, r2
 800dabc:	d93a      	bls.n	800db34 <CheckAttachedButtons+0x204>
						&& releaseCounter[i] < 500) {
 800dabe:	22f4      	movs	r2, #244	; 0xf4
 800dac0:	32ff      	adds	r2, #255	; 0xff
 800dac2:	4293      	cmp	r3, r2
 800dac4:	d836      	bhi.n	800db34 <CheckAttachedButtons+0x204>
					if (clicked == 1) {
 800dac6:	4b60      	ldr	r3, [pc, #384]	; (800dc48 <CheckAttachedButtons+0x318>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d01d      	beq.n	800db0a <CheckAttachedButtons+0x1da>
					} else if (clicked == 3) {
 800dace:	2b03      	cmp	r3, #3
 800dad0:	d135      	bne.n	800db3e <CheckAttachedButtons+0x20e>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800dad2:	3303      	adds	r3, #3
 800dad4:	4642      	mov	r2, r8
 800dad6:	7013      	strb	r3, [r2, #0]
						clicked = 0;			// Prepare for a single click
 800dad8:	4b5b      	ldr	r3, [pc, #364]	; (800dc48 <CheckAttachedButtons+0x318>)
 800dada:	2200      	movs	r2, #0
 800dadc:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800dade:	4b5d      	ldr	r3, [pc, #372]	; (800dc54 <CheckAttachedButtons+0x324>)
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d13f      	bne.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800dae6:	4643      	mov	r3, r8
 800dae8:	7a1b      	ldrb	r3, [r3, #8]
 800daea:	079b      	lsls	r3, r3, #30
 800daec:	d53b      	bpl.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800daee:	4b59      	ldr	r3, [pc, #356]	; (800dc54 <CheckAttachedButtons+0x324>)
 800daf0:	2201      	movs	r2, #1
 800daf2:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 800daf4:	9803      	ldr	r0, [sp, #12]
 800daf6:	f7ff ff17 	bl	800d928 <buttonDblClickedCallback>
 800dafa:	e034      	b.n	800db66 <CheckAttachedButtons+0x236>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800dafc:	2108      	movs	r1, #8
 800dafe:	4640      	mov	r0, r8
 800db00:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 800db02:	3301      	adds	r3, #1
 800db04:	494f      	ldr	r1, [pc, #316]	; (800dc44 <CheckAttachedButtons+0x314>)
 800db06:	5063      	str	r3, [r4, r1]
 800db08:	e7cc      	b.n	800daa4 <CheckAttachedButtons+0x174>
						button[i].state = CLICKED;// Record a single button click event
 800db0a:	3304      	adds	r3, #4
 800db0c:	4642      	mov	r2, r8
 800db0e:	7013      	strb	r3, [r2, #0]
						clicked = 2;			// Prepare for a double click
 800db10:	4b4d      	ldr	r3, [pc, #308]	; (800dc48 <CheckAttachedButtons+0x318>)
 800db12:	2202      	movs	r2, #2
 800db14:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800db16:	4b4f      	ldr	r3, [pc, #316]	; (800dc54 <CheckAttachedButtons+0x324>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d123      	bne.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800db1e:	4643      	mov	r3, r8
 800db20:	7a1b      	ldrb	r3, [r3, #8]
 800db22:	07db      	lsls	r3, r3, #31
 800db24:	d51f      	bpl.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800db26:	4b4b      	ldr	r3, [pc, #300]	; (800dc54 <CheckAttachedButtons+0x324>)
 800db28:	2201      	movs	r2, #1
 800db2a:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 800db2c:	9803      	ldr	r0, [sp, #12]
 800db2e:	f7ff fefa 	bl	800d926 <buttonClickedCallback>
 800db32:	e018      	b.n	800db66 <CheckAttachedButtons+0x236>
						&& releaseCounter[i] < 0xFFFF) {
 800db34:	3bf5      	subs	r3, #245	; 0xf5
 800db36:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800db38:	4a45      	ldr	r2, [pc, #276]	; (800dc50 <CheckAttachedButtons+0x320>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d909      	bls.n	800db52 <CheckAttachedButtons+0x222>
			switch (button[i].state) {
 800db3e:	4643      	mov	r3, r8
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	3b05      	subs	r3, #5
 800db44:	b2da      	uxtb	r2, r3
 800db46:	2a09      	cmp	r2, #9
 800db48:	d80d      	bhi.n	800db66 <CheckAttachedButtons+0x236>
 800db4a:	0093      	lsls	r3, r2, #2
 800db4c:	4a42      	ldr	r2, [pc, #264]	; (800dc58 <CheckAttachedButtons+0x328>)
 800db4e:	58d3      	ldr	r3, [r2, r3]
 800db50:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800db52:	9803      	ldr	r0, [sp, #12]
 800db54:	f7ff f97e 	bl	800ce54 <CheckForTimedButtonRelease>
 800db58:	e7f1      	b.n	800db3e <CheckAttachedButtons+0x20e>
				buttonPressedCallback(i);
 800db5a:	9803      	ldr	r0, [sp, #12]
 800db5c:	f7ff f93a 	bl	800cdd4 <buttonPressedCallback>
				button[i].state = NONE;
 800db60:	2300      	movs	r3, #0
 800db62:	4642      	mov	r2, r8
 800db64:	7013      	strb	r3, [r2, #0]
 800db66:	3601      	adds	r6, #1
 800db68:	3509      	adds	r5, #9
 800db6a:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800db6c:	2c1c      	cmp	r4, #28
 800db6e:	d100      	bne.n	800db72 <CheckAttachedButtons+0x242>
 800db70:	e0ed      	b.n	800dd4e <CheckAttachedButtons+0x41e>
 800db72:	b2f3      	uxtb	r3, r6
 800db74:	9303      	str	r3, [sp, #12]
 800db76:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 800db78:	786b      	ldrb	r3, [r5, #1]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d0f3      	beq.n	800db66 <CheckAttachedButtons+0x236>
			if (delayButtonStateReset == false)
 800db7e:	4b35      	ldr	r3, [pc, #212]	; (800dc54 <CheckAttachedButtons+0x324>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d100      	bne.n	800db88 <CheckAttachedButtons+0x258>
				button[i].state = NONE;
 800db86:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800db88:	230e      	movs	r3, #14
 800db8a:	aa02      	add	r2, sp, #8
 800db8c:	4694      	mov	ip, r2
 800db8e:	4463      	add	r3, ip
 800db90:	469a      	mov	sl, r3
 800db92:	af05      	add	r7, sp, #20
 800db94:	9700      	str	r7, [sp, #0]
 800db96:	ab06      	add	r3, sp, #24
 800db98:	4652      	mov	r2, sl
 800db9a:	a907      	add	r1, sp, #28
 800db9c:	9803      	ldr	r0, [sp, #12]
 800db9e:	f7fe ffa3 	bl	800cae8 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800dba2:	4653      	mov	r3, sl
 800dba4:	8819      	ldrh	r1, [r3, #0]
 800dba6:	2200      	movs	r2, #0
 800dba8:	9807      	ldr	r0, [sp, #28]
 800dbaa:	f004 fab5 	bl	8012118 <HAL_GPIO_WritePin>
			Delay_us(10);
 800dbae:	200a      	movs	r0, #10
 800dbb0:	f000 fb8c 	bl	800e2cc <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800dbb4:	8839      	ldrh	r1, [r7, #0]
 800dbb6:	9806      	ldr	r0, [sp, #24]
 800dbb8:	f004 faa8 	bl	801210c <HAL_GPIO_ReadPin>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	d100      	bne.n	800dbc2 <CheckAttachedButtons+0x292>
 800dbc0:	e6c5      	b.n	800d94e <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800dbc2:	230e      	movs	r3, #14
 800dbc4:	aa02      	add	r2, sp, #8
 800dbc6:	4694      	mov	ip, r2
 800dbc8:	4463      	add	r3, ip
 800dbca:	8819      	ldrh	r1, [r3, #0]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	9807      	ldr	r0, [sp, #28]
 800dbd0:	f004 faa2 	bl	8012118 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800dbd4:	4643      	mov	r3, r8
 800dbd6:	785b      	ldrb	r3, [r3, #1]
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d100      	bne.n	800dbde <CheckAttachedButtons+0x2ae>
 800dbdc:	e706      	b.n	800d9ec <CheckAttachedButtons+0xbc>
 800dbde:	b2da      	uxtb	r2, r3
 800dbe0:	2a02      	cmp	r2, #2
 800dbe2:	d800      	bhi.n	800dbe6 <CheckAttachedButtons+0x2b6>
 800dbe4:	e6c6      	b.n	800d974 <CheckAttachedButtons+0x44>
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d100      	bne.n	800dbec <CheckAttachedButtons+0x2bc>
 800dbea:	e707      	b.n	800d9fc <CheckAttachedButtons+0xcc>
 800dbec:	2b04      	cmp	r3, #4
 800dbee:	d000      	beq.n	800dbf2 <CheckAttachedButtons+0x2c2>
 800dbf0:	e6c8      	b.n	800d984 <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 800dbf2:	464b      	mov	r3, r9
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d100      	bne.n	800dbfa <CheckAttachedButtons+0x2ca>
 800dbf8:	e08d      	b.n	800dd16 <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d000      	beq.n	800dc00 <CheckAttachedButtons+0x2d0>
 800dbfe:	e6c1      	b.n	800d984 <CheckAttachedButtons+0x54>
 800dc00:	2302      	movs	r3, #2
 800dc02:	469b      	mov	fp, r3
 800dc04:	e6c3      	b.n	800d98e <CheckAttachedButtons+0x5e>
				buttonReleasedCallback(i);
 800dc06:	9803      	ldr	r0, [sp, #12]
 800dc08:	f7ff fe8c 	bl	800d924 <buttonReleasedCallback>
				button[i].state = NONE;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	4642      	mov	r2, r8
 800dc10:	7013      	strb	r3, [r2, #0]
				break;
 800dc12:	e7a8      	b.n	800db66 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800dc14:	4b0f      	ldr	r3, [pc, #60]	; (800dc54 <CheckAttachedButtons+0x324>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1a4      	bne.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800dc1c:	4643      	mov	r3, r8
 800dc1e:	7a1b      	ldrb	r3, [r3, #8]
 800dc20:	075b      	lsls	r3, r3, #29
 800dc22:	d5a0      	bpl.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800dc24:	4b0b      	ldr	r3, [pc, #44]	; (800dc54 <CheckAttachedButtons+0x324>)
 800dc26:	2201      	movs	r2, #1
 800dc28:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800dc2a:	2101      	movs	r1, #1
 800dc2c:	9803      	ldr	r0, [sp, #12]
 800dc2e:	f7ff fe7c 	bl	800d92a <buttonPressedForXCallback>
 800dc32:	e798      	b.n	800db66 <CheckAttachedButtons+0x236>
 800dc34:	20001ed0 	.word	0x20001ed0
 800dc38:	20001f24 	.word	0x20001f24
 800dc3c:	0000fffe 	.word	0x0000fffe
 800dc40:	20006e50 	.word	0x20006e50
 800dc44:	20001f40 	.word	0x20001f40
 800dc48:	20001f0f 	.word	0x20001f0f
 800dc4c:	20001f14 	.word	0x20001f14
 800dc50:	0000fe0a 	.word	0x0000fe0a
 800dc54:	20001f1b 	.word	0x20001f1b
 800dc58:	0801bd7c 	.word	0x0801bd7c
				if (!delayButtonStateReset
 800dc5c:	4b3f      	ldr	r3, [pc, #252]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d000      	beq.n	800dc66 <CheckAttachedButtons+0x336>
 800dc64:	e77f      	b.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800dc66:	4643      	mov	r3, r8
 800dc68:	7a1b      	ldrb	r3, [r3, #8]
 800dc6a:	071b      	lsls	r3, r3, #28
 800dc6c:	d400      	bmi.n	800dc70 <CheckAttachedButtons+0x340>
 800dc6e:	e77a      	b.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800dc70:	4b3a      	ldr	r3, [pc, #232]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dc72:	2201      	movs	r2, #1
 800dc74:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800dc76:	2102      	movs	r1, #2
 800dc78:	9803      	ldr	r0, [sp, #12]
 800dc7a:	f7ff fe56 	bl	800d92a <buttonPressedForXCallback>
 800dc7e:	e772      	b.n	800db66 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800dc80:	4b36      	ldr	r3, [pc, #216]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d000      	beq.n	800dc8a <CheckAttachedButtons+0x35a>
 800dc88:	e76d      	b.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800dc8a:	4643      	mov	r3, r8
 800dc8c:	7a1b      	ldrb	r3, [r3, #8]
 800dc8e:	06db      	lsls	r3, r3, #27
 800dc90:	d400      	bmi.n	800dc94 <CheckAttachedButtons+0x364>
 800dc92:	e768      	b.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800dc94:	4b31      	ldr	r3, [pc, #196]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dc96:	2201      	movs	r2, #1
 800dc98:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800dc9a:	2103      	movs	r1, #3
 800dc9c:	9803      	ldr	r0, [sp, #12]
 800dc9e:	f7ff fe44 	bl	800d92a <buttonPressedForXCallback>
 800dca2:	e760      	b.n	800db66 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800dca4:	4b2d      	ldr	r3, [pc, #180]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d000      	beq.n	800dcae <CheckAttachedButtons+0x37e>
 800dcac:	e75b      	b.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800dcae:	4643      	mov	r3, r8
 800dcb0:	7a1b      	ldrb	r3, [r3, #8]
 800dcb2:	069b      	lsls	r3, r3, #26
 800dcb4:	d400      	bmi.n	800dcb8 <CheckAttachedButtons+0x388>
 800dcb6:	e756      	b.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800dcb8:	4b28      	ldr	r3, [pc, #160]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dcba:	2201      	movs	r2, #1
 800dcbc:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800dcbe:	2101      	movs	r1, #1
 800dcc0:	9803      	ldr	r0, [sp, #12]
 800dcc2:	f7ff fe33 	bl	800d92c <buttonReleasedForYCallback>
 800dcc6:	e74e      	b.n	800db66 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800dcc8:	4b24      	ldr	r3, [pc, #144]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dcca:	781b      	ldrb	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d000      	beq.n	800dcd2 <CheckAttachedButtons+0x3a2>
 800dcd0:	e749      	b.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800dcd2:	4643      	mov	r3, r8
 800dcd4:	7a1b      	ldrb	r3, [r3, #8]
 800dcd6:	065b      	lsls	r3, r3, #25
 800dcd8:	d400      	bmi.n	800dcdc <CheckAttachedButtons+0x3ac>
 800dcda:	e744      	b.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800dcdc:	4b1f      	ldr	r3, [pc, #124]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dcde:	2201      	movs	r2, #1
 800dce0:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800dce2:	2102      	movs	r1, #2
 800dce4:	9803      	ldr	r0, [sp, #12]
 800dce6:	f7ff fe21 	bl	800d92c <buttonReleasedForYCallback>
 800dcea:	e73c      	b.n	800db66 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800dcec:	4b1b      	ldr	r3, [pc, #108]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d000      	beq.n	800dcf6 <CheckAttachedButtons+0x3c6>
 800dcf4:	e737      	b.n	800db66 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800dcf6:	4643      	mov	r3, r8
 800dcf8:	7a1b      	ldrb	r3, [r3, #8]
 800dcfa:	2b7f      	cmp	r3, #127	; 0x7f
 800dcfc:	d800      	bhi.n	800dd00 <CheckAttachedButtons+0x3d0>
 800dcfe:	e732      	b.n	800db66 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800dd00:	4b16      	ldr	r3, [pc, #88]	; (800dd5c <CheckAttachedButtons+0x42c>)
 800dd02:	2201      	movs	r2, #1
 800dd04:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800dd06:	2103      	movs	r1, #3
 800dd08:	9803      	ldr	r0, [sp, #12]
 800dd0a:	f7ff fe0f 	bl	800d92c <buttonReleasedForYCallback>
 800dd0e:	e72a      	b.n	800db66 <CheckAttachedButtons+0x236>
					state = OPEN;
 800dd10:	2303      	movs	r3, #3
 800dd12:	469b      	mov	fp, r3
 800dd14:	e000      	b.n	800dd18 <CheckAttachedButtons+0x3e8>
					state = OFF;
 800dd16:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 800dd18:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <CheckAttachedButtons+0x430>)
 800dd1a:	58e3      	ldr	r3, [r4, r3]
 800dd1c:	4a11      	ldr	r2, [pc, #68]	; (800dd64 <CheckAttachedButtons+0x434>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d900      	bls.n	800dd24 <CheckAttachedButtons+0x3f4>
 800dd22:	e680      	b.n	800da26 <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 800dd24:	3301      	adds	r3, #1
 800dd26:	4a0e      	ldr	r2, [pc, #56]	; (800dd60 <CheckAttachedButtons+0x430>)
 800dd28:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 800dd2a:	4b0f      	ldr	r3, [pc, #60]	; (800dd68 <CheckAttachedButtons+0x438>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d100      	bne.n	800dd34 <CheckAttachedButtons+0x404>
 800dd32:	e67c      	b.n	800da2e <CheckAttachedButtons+0xfe>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800dd34:	4b0d      	ldr	r3, [pc, #52]	; (800dd6c <CheckAttachedButtons+0x43c>)
 800dd36:	5cf2      	ldrb	r2, [r6, r3]
 800dd38:	4b0d      	ldr	r3, [pc, #52]	; (800dd70 <CheckAttachedButtons+0x440>)
 800dd3a:	795b      	ldrb	r3, [r3, #5]
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	d800      	bhi.n	800dd42 <CheckAttachedButtons+0x412>
 800dd40:	e633      	b.n	800d9aa <CheckAttachedButtons+0x7a>
					clicked = 0;
 800dd42:	2300      	movs	r3, #0
 800dd44:	4a08      	ldr	r2, [pc, #32]	; (800dd68 <CheckAttachedButtons+0x438>)
 800dd46:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800dd48:	4a08      	ldr	r2, [pc, #32]	; (800dd6c <CheckAttachedButtons+0x43c>)
 800dd4a:	54b3      	strb	r3, [r6, r2]
 800dd4c:	e62d      	b.n	800d9aa <CheckAttachedButtons+0x7a>
}
 800dd4e:	b009      	add	sp, #36	; 0x24
 800dd50:	bc3c      	pop	{r2, r3, r4, r5}
 800dd52:	4690      	mov	r8, r2
 800dd54:	4699      	mov	r9, r3
 800dd56:	46a2      	mov	sl, r4
 800dd58:	46ab      	mov	fp, r5
 800dd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd5c:	20001f1b 	.word	0x20001f1b
 800dd60:	20001f40 	.word	0x20001f40
 800dd64:	0000fffe 	.word	0x0000fffe
 800dd68:	20001f0f 	.word	0x20001f0f
 800dd6c:	20001f14 	.word	0x20001f14
 800dd70:	20006e50 	.word	0x20006e50

0800dd74 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800dd74:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800dd76:	f002 fda5 	bl	80108c4 <HAL_IncTick>
  osSystickHandler();  
 800dd7a:	f000 fed3 	bl	800eb24 <osSystickHandler>

}
 800dd7e:	bd10      	pop	{r4, pc}

0800dd80 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800dd80:	e7fe      	b.n	800dd80 <HardFault_Handler>
	...

0800dd84 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800dd84:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800dd86:	4802      	ldr	r0, [pc, #8]	; (800dd90 <USART1_IRQHandler+0xc>)
 800dd88:	f006 f969 	bl	801405e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dd8c:	bd10      	pop	{r4, pc}
 800dd8e:	46c0      	nop			; (mov r8, r8)
 800dd90:	2000702c 	.word	0x2000702c

0800dd94 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800dd94:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800dd96:	4802      	ldr	r0, [pc, #8]	; (800dda0 <USART2_IRQHandler+0xc>)
 800dd98:	f006 f961 	bl	801405e <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800dd9c:	bd10      	pop	{r4, pc}
 800dd9e:	46c0      	nop			; (mov r8, r8)
 800dda0:	20007194 	.word	0x20007194

0800dda4 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800dda4:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800dda6:	4806      	ldr	r0, [pc, #24]	; (800ddc0 <USART3_8_IRQHandler+0x1c>)
 800dda8:	f006 f959 	bl	801405e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800ddac:	4805      	ldr	r0, [pc, #20]	; (800ddc4 <USART3_8_IRQHandler+0x20>)
 800ddae:	f006 f956 	bl	801405e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800ddb2:	4805      	ldr	r0, [pc, #20]	; (800ddc8 <USART3_8_IRQHandler+0x24>)
 800ddb4:	f006 f953 	bl	801405e <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800ddb8:	4804      	ldr	r0, [pc, #16]	; (800ddcc <USART3_8_IRQHandler+0x28>)
 800ddba:	f006 f950 	bl	801405e <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800ddbe:	bd10      	pop	{r4, pc}
 800ddc0:	20006f3c 	.word	0x20006f3c
 800ddc4:	20007120 	.word	0x20007120
 800ddc8:	20006fb4 	.word	0x20006fb4
 800ddcc:	200070a4 	.word	0x200070a4

0800ddd0 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800ddd0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800ddd2:	2001      	movs	r0, #1
 800ddd4:	f7f9 fa64 	bl	80072a0 <DMA_IRQHandler>
	
}
 800ddd8:	bd10      	pop	{r4, pc}
	...

0800dddc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800dddc:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800ddde:	4b0c      	ldr	r3, [pc, #48]	; (800de10 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	06db      	lsls	r3, r3, #27
 800dde4:	d408      	bmi.n	800ddf8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800dde6:	4b0b      	ldr	r3, [pc, #44]	; (800de14 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	05db      	lsls	r3, r3, #23
 800ddec:	d408      	bmi.n	800de00 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800ddee:	4b09      	ldr	r3, [pc, #36]	; (800de14 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	06db      	lsls	r3, r3, #27
 800ddf4:	d408      	bmi.n	800de08 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800ddf6:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800ddf8:	2005      	movs	r0, #5
 800ddfa:	f7f9 fa51 	bl	80072a0 <DMA_IRQHandler>
 800ddfe:	e7fa      	b.n	800ddf6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800de00:	2002      	movs	r0, #2
 800de02:	f7f9 fa4d 	bl	80072a0 <DMA_IRQHandler>
 800de06:	e7f6      	b.n	800ddf6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800de08:	4803      	ldr	r0, [pc, #12]	; (800de18 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800de0a:	f003 fa6d 	bl	80112e8 <HAL_DMA_IRQHandler>
}
 800de0e:	e7f2      	b.n	800ddf6 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800de10:	40020400 	.word	0x40020400
 800de14:	40020000 	.word	0x40020000
 800de18:	20001cc4 	.word	0x20001cc4

0800de1c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800de1c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800de1e:	4b14      	ldr	r3, [pc, #80]	; (800de70 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	03db      	lsls	r3, r3, #15
 800de24:	d413      	bmi.n	800de4e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800de26:	4b12      	ldr	r3, [pc, #72]	; (800de70 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	02db      	lsls	r3, r3, #11
 800de2c:	d413      	bmi.n	800de56 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800de2e:	4b11      	ldr	r3, [pc, #68]	; (800de74 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	05db      	lsls	r3, r3, #23
 800de34:	d413      	bmi.n	800de5e <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800de36:	4b0e      	ldr	r3, [pc, #56]	; (800de70 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	04db      	lsls	r3, r3, #19
 800de3c:	d413      	bmi.n	800de66 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800de3e:	4b0c      	ldr	r3, [pc, #48]	; (800de70 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	01db      	lsls	r3, r3, #7
 800de44:	d506      	bpl.n	800de54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800de46:	480c      	ldr	r0, [pc, #48]	; (800de78 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800de48:	f003 fa4e 	bl	80112e8 <HAL_DMA_IRQHandler>
	}
}
 800de4c:	e002      	b.n	800de54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800de4e:	2003      	movs	r0, #3
 800de50:	f7f9 fa26 	bl	80072a0 <DMA_IRQHandler>
}
 800de54:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800de56:	2004      	movs	r0, #4
 800de58:	f7f9 fa22 	bl	80072a0 <DMA_IRQHandler>
 800de5c:	e7fa      	b.n	800de54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800de5e:	2006      	movs	r0, #6
 800de60:	f7f9 fa1e 	bl	80072a0 <DMA_IRQHandler>
 800de64:	e7f6      	b.n	800de54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800de66:	4805      	ldr	r0, [pc, #20]	; (800de7c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800de68:	f003 fa3e 	bl	80112e8 <HAL_DMA_IRQHandler>
 800de6c:	e7f2      	b.n	800de54 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800de6e:	46c0      	nop			; (mov r8, r8)
 800de70:	40020000 	.word	0x40020000
 800de74:	40020400 	.word	0x40020400
 800de78:	20001d34 	.word	0x20001d34
 800de7c:	20001cfc 	.word	0x20001cfc

0800de80 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800de80:	b510      	push	{r4, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800de86:	2300      	movs	r3, #0
 800de88:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800de8a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d001      	beq.n	800de94 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800de90:	f7fd faa4 	bl	800b3dc <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800de94:	0020      	movs	r0, r4
 800de96:	f7fd f8f7 	bl	800b088 <GetPort>
 800de9a:	0080      	lsls	r0, r0, #2
 800de9c:	4b03      	ldr	r3, [pc, #12]	; (800deac <HAL_UART_TxCpltCallback+0x2c>)
 800de9e:	58c0      	ldr	r0, [r0, r3]
 800dea0:	a901      	add	r1, sp, #4
 800dea2:	f001 f97d 	bl	800f1a0 <xQueueGiveFromISR>
}
 800dea6:	b002      	add	sp, #8
 800dea8:	bd10      	pop	{r4, pc}
 800deaa:	46c0      	nop			; (mov r8, r8)
 800deac:	20006ed4 	.word	0x20006ed4

0800deb0 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800deb0:	b510      	push	{r4, lr}
 800deb2:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800deb4:	2369      	movs	r3, #105	; 0x69
 800deb6:	2201      	movs	r2, #1
 800deb8:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800deba:	f7fd f8e5 	bl	800b088 <GetPort>
	if (portStatus[port] == STREAM) {
 800debe:	4b0c      	ldr	r3, [pc, #48]	; (800def0 <HAL_UART_ErrorCallback+0x40>)
 800dec0:	5c1b      	ldrb	r3, [r3, r0]
 800dec2:	2b02      	cmp	r3, #2
 800dec4:	d005      	beq.n	800ded2 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800dec6:	4b0b      	ldr	r3, [pc, #44]	; (800def4 <HAL_UART_ErrorCallback+0x44>)
 800dec8:	1818      	adds	r0, r3, r0
 800deca:	3801      	subs	r0, #1
 800decc:	2301      	movs	r3, #1
 800dece:	7003      	strb	r3, [r0, #0]
	}	
}
 800ded0:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800ded2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	b292      	uxth	r2, r2
 800deda:	3801      	subs	r0, #1
 800dedc:	0080      	lsls	r0, r0, #2
 800dede:	4b06      	ldr	r3, [pc, #24]	; (800def8 <HAL_UART_ErrorCallback+0x48>)
 800dee0:	58c3      	ldr	r3, [r0, r3]
 800dee2:	6819      	ldr	r1, [r3, #0]
 800dee4:	3128      	adds	r1, #40	; 0x28
 800dee6:	0020      	movs	r0, r4
 800dee8:	f005 fca2 	bl	8013830 <HAL_UART_Receive_DMA>
 800deec:	e7f0      	b.n	800ded0 <HAL_UART_ErrorCallback+0x20>
 800deee:	46c0      	nop			; (mov r8, r8)
 800def0:	2000116c 	.word	0x2000116c
 800def4:	20001340 	.word	0x20001340
 800def8:	20001820 	.word	0x20001820

0800defc <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800defc:	b510      	push	{r4, lr}
 800defe:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800df00:	f7fd f8c2 	bl	800b088 <GetPort>
 800df04:	4b13      	ldr	r3, [pc, #76]	; (800df54 <HAL_UART_RxCpltCallback+0x58>)
 800df06:	5c1b      	ldrb	r3, [r3, r0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d006      	beq.n	800df1a <HAL_UART_RxCpltCallback+0x1e>
 800df0c:	0020      	movs	r0, r4
 800df0e:	f7fd f8bb 	bl	800b088 <GetPort>
 800df12:	4b10      	ldr	r3, [pc, #64]	; (800df54 <HAL_UART_RxCpltCallback+0x58>)
 800df14:	5c1b      	ldrb	r3, [r3, r0]
 800df16:	2b01      	cmp	r3, #1
 800df18:	d11a      	bne.n	800df50 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800df1a:	0020      	movs	r0, r4
 800df1c:	f7fd f8b4 	bl	800b088 <GetPort>
 800df20:	4b0d      	ldr	r3, [pc, #52]	; (800df58 <HAL_UART_RxCpltCallback+0x5c>)
 800df22:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800df24:	0020      	movs	r0, r4
 800df26:	f7fd f8af 	bl	800b088 <GetPort>
 800df2a:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <HAL_UART_RxCpltCallback+0x58>)
 800df2c:	2205      	movs	r2, #5
 800df2e:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800df30:	0020      	movs	r0, r4
 800df32:	f7fd f8a9 	bl	800b088 <GetPort>
 800df36:	4b09      	ldr	r3, [pc, #36]	; (800df5c <HAL_UART_RxCpltCallback+0x60>)
 800df38:	1818      	adds	r0, r3, r0
 800df3a:	3801      	subs	r0, #1
 800df3c:	2300      	movs	r3, #0
 800df3e:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800df40:	0020      	movs	r0, r4
 800df42:	f7fd f8a1 	bl	800b088 <GetPort>
 800df46:	4b06      	ldr	r3, [pc, #24]	; (800df60 <HAL_UART_RxCpltCallback+0x64>)
 800df48:	1818      	adds	r0, r3, r0
 800df4a:	3801      	subs	r0, #1
 800df4c:	2301      	movs	r3, #1
 800df4e:	7003      	strb	r3, [r0, #0]
	}

}
 800df50:	bd10      	pop	{r4, pc}
 800df52:	46c0      	nop			; (mov r8, r8)
 800df54:	2000116c 	.word	0x2000116c
 800df58:	20006dd0 	.word	0x20006dd0
 800df5c:	200017c8 	.word	0x200017c8
 800df60:	20001340 	.word	0x20001340

0800df64 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800df64:	b672      	cpsid	i
 800df66:	e7fe      	b.n	800df66 <vApplicationStackOverflowHook+0x2>

0800df68 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800df68:	b672      	cpsid	i
 800df6a:	e7fe      	b.n	800df6a <vApplicationMallocFailedHook+0x2>

0800df6c <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800df6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df6e:	46ce      	mov	lr, r9
 800df70:	b500      	push	{lr}
 800df72:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800df74:	ac05      	add	r4, sp, #20
 800df76:	4b34      	ldr	r3, [pc, #208]	; (800e048 <RTC_CalendarConfig+0xdc>)
 800df78:	0022      	movs	r2, r4
 800df7a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800df7c:	c243      	stmia	r2!, {r0, r1, r6}
 800df7e:	aa02      	add	r2, sp, #8
 800df80:	4b32      	ldr	r3, [pc, #200]	; (800e04c <RTC_CalendarConfig+0xe0>)
 800df82:	cb03      	ldmia	r3!, {r0, r1}
 800df84:	c203      	stmia	r2!, {r0, r1}
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800df8a:	2015      	movs	r0, #21
 800df8c:	ab02      	add	r3, sp, #8
 800df8e:	469c      	mov	ip, r3
 800df90:	4460      	add	r0, ip
 800df92:	f006 f8ec 	bl	801416e <atoi>
 800df96:	b2c3      	uxtb	r3, r0
 800df98:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800df9a:	2600      	movs	r6, #0
 800df9c:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800df9e:	a806      	add	r0, sp, #24
 800dfa0:	f006 f8e5 	bl	801416e <atoi>
 800dfa4:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800dfa6:	70e6      	strb	r6, [r4, #3]
 800dfa8:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800dfaa:	4e29      	ldr	r6, [pc, #164]	; (800e050 <RTC_CalendarConfig+0xe4>)
 800dfac:	e002      	b.n	800dfb4 <RTC_CalendarConfig+0x48>
 800dfae:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800dfb0:	2c0d      	cmp	r4, #13
 800dfb2:	d009      	beq.n	800dfc8 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800dfb4:	00a3      	lsls	r3, r4, #2
 800dfb6:	3b04      	subs	r3, #4
 800dfb8:	58f1      	ldr	r1, [r6, r3]
 800dfba:	a805      	add	r0, sp, #20
 800dfbc:	f7f2 f8a2 	bl	8000104 <strcmp>
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d1f4      	bne.n	800dfae <RTC_CalendarConfig+0x42>
			month = i + 1;
 800dfc4:	b2e5      	uxtb	r5, r4
 800dfc6:	e7f2      	b.n	800dfae <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800dfc8:	ab02      	add	r3, sp, #8
 800dfca:	1d98      	adds	r0, r3, #6
 800dfcc:	f006 f8cf 	bl	801416e <atoi>
 800dfd0:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800dfd2:	ac05      	add	r4, sp, #20
 800dfd4:	2600      	movs	r6, #0
 800dfd6:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800dfd8:	ab02      	add	r3, sp, #8
 800dfda:	1cd8      	adds	r0, r3, #3
 800dfdc:	f006 f8c7 	bl	801416e <atoi>
 800dfe0:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800dfe2:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800dfe4:	a802      	add	r0, sp, #8
 800dfe6:	f006 f8c2 	bl	801416e <atoi>
 800dfea:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800dfec:	a90d      	add	r1, sp, #52	; 0x34
 800dfee:	464b      	mov	r3, r9
 800dff0:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800dff2:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800dff4:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800dff6:	2301      	movs	r3, #1
 800dff8:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800dffa:	2200      	movs	r2, #0
 800dffc:	4815      	ldr	r0, [pc, #84]	; (800e054 <RTC_CalendarConfig+0xe8>)
 800dffe:	f005 f963 	bl	80132c8 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800e002:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e004:	2800      	cmp	r0, #0
 800e006:	d119      	bne.n	800e03c <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800e008:	a908      	add	r1, sp, #32
 800e00a:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800e00c:	9b01      	ldr	r3, [sp, #4]
 800e00e:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800e010:	9b00      	ldr	r3, [sp, #0]
 800e012:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800e014:	2300      	movs	r3, #0
 800e016:	720b      	strb	r3, [r1, #8]
 800e018:	4a0f      	ldr	r2, [pc, #60]	; (800e058 <RTC_CalendarConfig+0xec>)
 800e01a:	3018      	adds	r0, #24
 800e01c:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e01e:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800e020:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e022:	2200      	movs	r2, #0
 800e024:	480b      	ldr	r0, [pc, #44]	; (800e054 <RTC_CalendarConfig+0xe8>)
 800e026:	f005 f8c9 	bl	80131bc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e02a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e02c:	2800      	cmp	r0, #0
 800e02e:	d105      	bne.n	800e03c <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e030:	4a0a      	ldr	r2, [pc, #40]	; (800e05c <RTC_CalendarConfig+0xf0>)
 800e032:	2101      	movs	r1, #1
 800e034:	4807      	ldr	r0, [pc, #28]	; (800e054 <RTC_CalendarConfig+0xe8>)
 800e036:	f005 fa0b 	bl	8013450 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e03a:	2300      	movs	r3, #0
}
 800e03c:	0018      	movs	r0, r3
 800e03e:	b00e      	add	sp, #56	; 0x38
 800e040:	bc04      	pop	{r2}
 800e042:	4691      	mov	r9, r2
 800e044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e046:	46c0      	nop			; (mov r8, r8)
 800e048:	08019068 	.word	0x08019068
 800e04c:	0801908c 	.word	0x0801908c
 800e050:	20000048 	.word	0x20000048
 800e054:	200072c0 	.word	0x200072c0
 800e058:	20006e50 	.word	0x20006e50
 800e05c:	000032f2 	.word	0x000032f2

0800e060 <RTC_Init>:
{
 800e060:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800e062:	4a1c      	ldr	r2, [pc, #112]	; (800e0d4 <RTC_Init+0x74>)
 800e064:	6a11      	ldr	r1, [r2, #32]
 800e066:	2380      	movs	r3, #128	; 0x80
 800e068:	021b      	lsls	r3, r3, #8
 800e06a:	430b      	orrs	r3, r1
 800e06c:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800e06e:	481a      	ldr	r0, [pc, #104]	; (800e0d8 <RTC_Init+0x78>)
 800e070:	4b1a      	ldr	r3, [pc, #104]	; (800e0dc <RTC_Init+0x7c>)
 800e072:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e074:	2300      	movs	r3, #0
 800e076:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800e078:	227c      	movs	r2, #124	; 0x7c
 800e07a:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800e07c:	4a18      	ldr	r2, [pc, #96]	; (800e0e0 <RTC_Init+0x80>)
 800e07e:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e080:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e082:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e084:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e086:	f005 f83b 	bl	8013100 <HAL_RTC_Init>
 800e08a:	23ff      	movs	r3, #255	; 0xff
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d11e      	bne.n	800e0ce <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800e090:	2101      	movs	r1, #1
 800e092:	4811      	ldr	r0, [pc, #68]	; (800e0d8 <RTC_Init+0x78>)
 800e094:	f005 f9e2 	bl	801345c <HAL_RTCEx_BKUPRead>
 800e098:	4b12      	ldr	r3, [pc, #72]	; (800e0e4 <RTC_Init+0x84>)
 800e09a:	4298      	cmp	r0, r3
 800e09c:	d10e      	bne.n	800e0bc <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800e09e:	4b0d      	ldr	r3, [pc, #52]	; (800e0d4 <RTC_Init+0x74>)
 800e0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0a2:	011b      	lsls	r3, r3, #4
 800e0a4:	d502      	bpl.n	800e0ac <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800e0a6:	4b10      	ldr	r3, [pc, #64]	; (800e0e8 <RTC_Init+0x88>)
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800e0ac:	4b09      	ldr	r3, [pc, #36]	; (800e0d4 <RTC_Init+0x74>)
 800e0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0b0:	015b      	lsls	r3, r3, #5
 800e0b2:	d505      	bpl.n	800e0c0 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800e0b4:	4b0c      	ldr	r3, [pc, #48]	; (800e0e8 <RTC_Init+0x88>)
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	701a      	strb	r2, [r3, #0]
 800e0ba:	e001      	b.n	800e0c0 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800e0bc:	f7ff ff56 	bl	800df6c <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800e0c0:	4a04      	ldr	r2, [pc, #16]	; (800e0d4 <RTC_Init+0x74>)
 800e0c2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e0c4:	2380      	movs	r3, #128	; 0x80
 800e0c6:	045b      	lsls	r3, r3, #17
 800e0c8:	430b      	orrs	r3, r1
 800e0ca:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800e0cc:	2300      	movs	r3, #0
}
 800e0ce:	0018      	movs	r0, r3
 800e0d0:	bd10      	pop	{r4, pc}
 800e0d2:	46c0      	nop			; (mov r8, r8)
 800e0d4:	40021000 	.word	0x40021000
 800e0d8:	200072c0 	.word	0x200072c0
 800e0dc:	40002800 	.word	0x40002800
 800e0e0:	000007cf 	.word	0x000007cf
 800e0e4:	000032f2 	.word	0x000032f2
 800e0e8:	20001f68 	.word	0x20001f68

0800e0ec <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800e0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ee:	46c6      	mov	lr, r8
 800e0f0:	b500      	push	{lr}
 800e0f2:	b086      	sub	sp, #24
 800e0f4:	ac0c      	add	r4, sp, #48	; 0x30
 800e0f6:	7827      	ldrb	r7, [r4, #0]
 800e0f8:	ac0d      	add	r4, sp, #52	; 0x34
 800e0fa:	7824      	ldrb	r4, [r4, #0]
 800e0fc:	46a0      	mov	r8, r4
 800e0fe:	ac0e      	add	r4, sp, #56	; 0x38
 800e100:	7825      	ldrb	r5, [r4, #0]
 800e102:	ac0f      	add	r4, sp, #60	; 0x3c
 800e104:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800e106:	ac05      	add	r4, sp, #20
 800e108:	3230      	adds	r2, #48	; 0x30
 800e10a:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800e10c:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800e10e:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800e110:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e112:	2200      	movs	r2, #0
 800e114:	0021      	movs	r1, r4
 800e116:	481f      	ldr	r0, [pc, #124]	; (800e194 <BOS_CalendarConfig+0xa8>)
 800e118:	f005 f8d6 	bl	80132c8 <HAL_RTC_SetDate>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	d136      	bne.n	800e18e <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e120:	466b      	mov	r3, sp
 800e122:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800e124:	4642      	mov	r2, r8
 800e126:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800e128:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e12a:	2300      	movs	r3, #0
 800e12c:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800e12e:	2e01      	cmp	r6, #1
 800e130:	d020      	beq.n	800e174 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800e132:	2e02      	cmp	r6, #2
 800e134:	d024      	beq.n	800e180 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800e136:	4b18      	ldr	r3, [pc, #96]	; (800e198 <BOS_CalendarConfig+0xac>)
 800e138:	2218      	movs	r2, #24
 800e13a:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e13c:	2200      	movs	r2, #0
 800e13e:	4669      	mov	r1, sp
 800e140:	4814      	ldr	r0, [pc, #80]	; (800e194 <BOS_CalendarConfig+0xa8>)
 800e142:	f005 f83b 	bl	80131bc <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e146:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e148:	2800      	cmp	r0, #0
 800e14a:	d10e      	bne.n	800e16a <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800e14c:	4a12      	ldr	r2, [pc, #72]	; (800e198 <BOS_CalendarConfig+0xac>)
 800e14e:	7b53      	ldrb	r3, [r2, #13]
 800e150:	021b      	lsls	r3, r3, #8
 800e152:	7911      	ldrb	r1, [r2, #4]
 800e154:	4319      	orrs	r1, r3
 800e156:	308d      	adds	r0, #141	; 0x8d
 800e158:	0040      	lsls	r0, r0, #1
 800e15a:	f7fe f963 	bl	800c424 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e15e:	4a0f      	ldr	r2, [pc, #60]	; (800e19c <BOS_CalendarConfig+0xb0>)
 800e160:	2101      	movs	r1, #1
 800e162:	480c      	ldr	r0, [pc, #48]	; (800e194 <BOS_CalendarConfig+0xa8>)
 800e164:	f005 f974 	bl	8013450 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	0018      	movs	r0, r3
 800e16c:	b006      	add	sp, #24
 800e16e:	bc04      	pop	{r2}
 800e170:	4690      	mov	r8, r2
 800e172:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e174:	466a      	mov	r2, sp
 800e176:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e178:	4b07      	ldr	r3, [pc, #28]	; (800e198 <BOS_CalendarConfig+0xac>)
 800e17a:	220c      	movs	r2, #12
 800e17c:	735a      	strb	r2, [r3, #13]
 800e17e:	e7dd      	b.n	800e13c <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e180:	2340      	movs	r3, #64	; 0x40
 800e182:	466a      	mov	r2, sp
 800e184:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e186:	4b04      	ldr	r3, [pc, #16]	; (800e198 <BOS_CalendarConfig+0xac>)
 800e188:	220c      	movs	r2, #12
 800e18a:	735a      	strb	r2, [r3, #13]
 800e18c:	e7d6      	b.n	800e13c <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800e18e:	23ff      	movs	r3, #255	; 0xff
 800e190:	e7eb      	b.n	800e16a <BOS_CalendarConfig+0x7e>
 800e192:	46c0      	nop			; (mov r8, r8)
 800e194:	200072c0 	.word	0x200072c0
 800e198:	20006e50 	.word	0x20006e50
 800e19c:	000032f2 	.word	0x000032f2

0800e1a0 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800e1a0:	b530      	push	{r4, r5, lr}
 800e1a2:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800e1a4:	4d16      	ldr	r5, [pc, #88]	; (800e200 <GetTimeDate+0x60>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	a902      	add	r1, sp, #8
 800e1aa:	0028      	movs	r0, r5
 800e1ac:	f005 f908 	bl	80133c0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800e1b0:	ac07      	add	r4, sp, #28
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	0021      	movs	r1, r4
 800e1b6:	0028      	movs	r0, r5
 800e1b8:	f005 f928 	bl	801340c <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800e1bc:	4b11      	ldr	r3, [pc, #68]	; (800e204 <GetTimeDate+0x64>)
 800e1be:	aa02      	add	r2, sp, #8
 800e1c0:	7a12      	ldrb	r2, [r2, #8]
 800e1c2:	09d2      	lsrs	r2, r2, #7
 800e1c4:	3201      	adds	r2, #1
 800e1c6:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800e1c8:	9a03      	ldr	r2, [sp, #12]
 800e1ca:	9201      	str	r2, [sp, #4]
 800e1cc:	0852      	lsrs	r2, r2, #1
 800e1ce:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800e1d0:	aa02      	add	r2, sp, #8
 800e1d2:	7892      	ldrb	r2, [r2, #2]
 800e1d4:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800e1d6:	aa02      	add	r2, sp, #8
 800e1d8:	7852      	ldrb	r2, [r2, #1]
 800e1da:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800e1dc:	aa02      	add	r2, sp, #8
 800e1de:	7812      	ldrb	r2, [r2, #0]
 800e1e0:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800e1e2:	78a2      	ldrb	r2, [r4, #2]
 800e1e4:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800e1e6:	7862      	ldrb	r2, [r4, #1]
 800e1e8:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800e1ea:	7822      	ldrb	r2, [r4, #0]
 800e1ec:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800e1ee:	78e2      	ldrb	r2, [r4, #3]
 800e1f0:	21fa      	movs	r1, #250	; 0xfa
 800e1f2:	00c9      	lsls	r1, r1, #3
 800e1f4:	468c      	mov	ip, r1
 800e1f6:	4462      	add	r2, ip
 800e1f8:	831a      	strh	r2, [r3, #24]
}
 800e1fa:	b009      	add	sp, #36	; 0x24
 800e1fc:	bd30      	pop	{r4, r5, pc}
 800e1fe:	46c0      	nop			; (mov r8, r8)
 800e200:	200072c0 	.word	0x200072c0
 800e204:	20006e50 	.word	0x20006e50

0800e208 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e208:	b530      	push	{r4, r5, lr}
 800e20a:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e20c:	4a12      	ldr	r2, [pc, #72]	; (800e258 <TIM_USEC_Init+0x50>)
 800e20e:	69d1      	ldr	r1, [r2, #28]
 800e210:	2080      	movs	r0, #128	; 0x80
 800e212:	0040      	lsls	r0, r0, #1
 800e214:	4301      	orrs	r1, r0
 800e216:	61d1      	str	r1, [r2, #28]
 800e218:	69d3      	ldr	r3, [r2, #28]
 800e21a:	4003      	ands	r3, r0
 800e21c:	9301      	str	r3, [sp, #4]
 800e21e:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e220:	4c0e      	ldr	r4, [pc, #56]	; (800e25c <TIM_USEC_Init+0x54>)
 800e222:	4b0f      	ldr	r3, [pc, #60]	; (800e260 <TIM_USEC_Init+0x58>)
 800e224:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e226:	f004 fe83 	bl	8012f30 <HAL_RCC_GetPCLK1Freq>
 800e22a:	490e      	ldr	r1, [pc, #56]	; (800e264 <TIM_USEC_Init+0x5c>)
 800e22c:	f7f1 ff90 	bl	8000150 <__udivsi3>
 800e230:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e232:	2500      	movs	r5, #0
 800e234:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e236:	4b0c      	ldr	r3, [pc, #48]	; (800e268 <TIM_USEC_Init+0x60>)
 800e238:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e23a:	0020      	movs	r0, r4
 800e23c:	f005 f99e 	bl	801357c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e240:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e242:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e244:	a902      	add	r1, sp, #8
 800e246:	0020      	movs	r0, r4
 800e248:	f005 f9b2 	bl	80135b0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e24c:	0020      	movs	r0, r4
 800e24e:	f005 f90c 	bl	801346a <HAL_TIM_Base_Start>
}
 800e252:	b005      	add	sp, #20
 800e254:	bd30      	pop	{r4, r5, pc}
 800e256:	46c0      	nop			; (mov r8, r8)
 800e258:	40021000 	.word	0x40021000
 800e25c:	2000731c 	.word	0x2000731c
 800e260:	40002000 	.word	0x40002000
 800e264:	000f4240 	.word	0x000f4240
 800e268:	0000ffff 	.word	0x0000ffff

0800e26c <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800e26c:	b530      	push	{r4, r5, lr}
 800e26e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800e270:	4a12      	ldr	r2, [pc, #72]	; (800e2bc <TIM_MSEC_Init+0x50>)
 800e272:	6991      	ldr	r1, [r2, #24]
 800e274:	2080      	movs	r0, #128	; 0x80
 800e276:	0240      	lsls	r0, r0, #9
 800e278:	4301      	orrs	r1, r0
 800e27a:	6191      	str	r1, [r2, #24]
 800e27c:	6993      	ldr	r3, [r2, #24]
 800e27e:	4003      	ands	r3, r0
 800e280:	9301      	str	r3, [sp, #4]
 800e282:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800e284:	4c0e      	ldr	r4, [pc, #56]	; (800e2c0 <TIM_MSEC_Init+0x54>)
 800e286:	4b0f      	ldr	r3, [pc, #60]	; (800e2c4 <TIM_MSEC_Init+0x58>)
 800e288:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800e28a:	f004 fe51 	bl	8012f30 <HAL_RCC_GetPCLK1Freq>
 800e28e:	21fa      	movs	r1, #250	; 0xfa
 800e290:	0089      	lsls	r1, r1, #2
 800e292:	f7f1 ff5d 	bl	8000150 <__udivsi3>
 800e296:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e298:	2500      	movs	r5, #0
 800e29a:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800e29c:	4b0a      	ldr	r3, [pc, #40]	; (800e2c8 <TIM_MSEC_Init+0x5c>)
 800e29e:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800e2a0:	0020      	movs	r0, r4
 800e2a2:	f005 f96b 	bl	801357c <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e2a6:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e2a8:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800e2aa:	a902      	add	r1, sp, #8
 800e2ac:	0020      	movs	r0, r4
 800e2ae:	f005 f97f 	bl	80135b0 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e2b2:	0020      	movs	r0, r4
 800e2b4:	f005 f8d9 	bl	801346a <HAL_TIM_Base_Start>
}
 800e2b8:	b005      	add	sp, #20
 800e2ba:	bd30      	pop	{r4, r5, pc}
 800e2bc:	40021000 	.word	0x40021000
 800e2c0:	200072e0 	.word	0x200072e0
 800e2c4:	40014000 	.word	0x40014000
 800e2c8:	0000ffff 	.word	0x0000ffff

0800e2cc <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800e2cc:	b510      	push	{r4, lr}
 800e2ce:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800e2d0:	f002 f9a6 	bl	8010620 <vPortEnterCritical>
	
	if (Delay)
 800e2d4:	2c00      	cmp	r4, #0
 800e2d6:	d006      	beq.n	800e2e6 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800e2d8:	4b04      	ldr	r3, [pc, #16]	; (800e2ec <StartMicroDelay+0x20>)
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800e2de:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e2e0:	1a5b      	subs	r3, r3, r1
 800e2e2:	42a3      	cmp	r3, r4
 800e2e4:	d9fb      	bls.n	800e2de <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e2e6:	f002 f9a7 	bl	8010638 <vPortExitCritical>
}
 800e2ea:	bd10      	pop	{r4, pc}
 800e2ec:	2000731c 	.word	0x2000731c

0800e2f0 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800e2f4:	f002 f994 	bl	8010620 <vPortEnterCritical>
	
	if (Delay)
 800e2f8:	2c00      	cmp	r4, #0
 800e2fa:	d006      	beq.n	800e30a <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800e2fc:	4b04      	ldr	r3, [pc, #16]	; (800e310 <StartMilliDelay+0x20>)
 800e2fe:	681a      	ldr	r2, [r3, #0]
 800e300:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800e302:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e304:	1a5b      	subs	r3, r3, r1
 800e306:	42a3      	cmp	r3, r4
 800e308:	d9fb      	bls.n	800e302 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e30a:	f002 f995 	bl	8010638 <vPortExitCritical>
}
 800e30e:	bd10      	pop	{r4, pc}
 800e310:	200072e0 	.word	0x200072e0

0800e314 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800e314:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800e316:	4809      	ldr	r0, [pc, #36]	; (800e33c <MX_USART1_UART_Init+0x28>)
 800e318:	4b09      	ldr	r3, [pc, #36]	; (800e340 <MX_USART1_UART_Init+0x2c>)
 800e31a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e31c:	23e1      	movs	r3, #225	; 0xe1
 800e31e:	031b      	lsls	r3, r3, #12
 800e320:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e322:	2300      	movs	r3, #0
 800e324:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e326:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e328:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e32a:	220c      	movs	r2, #12
 800e32c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e32e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e330:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e332:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e334:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800e336:	f005 fdbb 	bl	8013eb0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800e33a:	bd10      	pop	{r4, pc}
 800e33c:	2000702c 	.word	0x2000702c
 800e340:	40013800 	.word	0x40013800

0800e344 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800e344:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800e346:	4809      	ldr	r0, [pc, #36]	; (800e36c <MX_USART2_UART_Init+0x28>)
 800e348:	4b09      	ldr	r3, [pc, #36]	; (800e370 <MX_USART2_UART_Init+0x2c>)
 800e34a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e34c:	23e1      	movs	r3, #225	; 0xe1
 800e34e:	031b      	lsls	r3, r3, #12
 800e350:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e352:	2300      	movs	r3, #0
 800e354:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e356:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e358:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e35a:	220c      	movs	r2, #12
 800e35c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e35e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e360:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e362:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e364:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e366:	f005 fda3 	bl	8013eb0 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800e36a:	bd10      	pop	{r4, pc}
 800e36c:	20007194 	.word	0x20007194
 800e370:	40004400 	.word	0x40004400

0800e374 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800e374:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800e376:	4809      	ldr	r0, [pc, #36]	; (800e39c <MX_USART3_UART_Init+0x28>)
 800e378:	4b09      	ldr	r3, [pc, #36]	; (800e3a0 <MX_USART3_UART_Init+0x2c>)
 800e37a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e37c:	23e1      	movs	r3, #225	; 0xe1
 800e37e:	031b      	lsls	r3, r3, #12
 800e380:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e382:	2300      	movs	r3, #0
 800e384:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e386:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e388:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e38a:	220c      	movs	r2, #12
 800e38c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e38e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e390:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e392:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e394:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e396:	f005 fd8b 	bl	8013eb0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e39a:	bd10      	pop	{r4, pc}
 800e39c:	20006f3c 	.word	0x20006f3c
 800e3a0:	40004800 	.word	0x40004800

0800e3a4 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800e3a4:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800e3a6:	4809      	ldr	r0, [pc, #36]	; (800e3cc <MX_USART4_UART_Init+0x28>)
 800e3a8:	4b09      	ldr	r3, [pc, #36]	; (800e3d0 <MX_USART4_UART_Init+0x2c>)
 800e3aa:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e3ac:	23e1      	movs	r3, #225	; 0xe1
 800e3ae:	031b      	lsls	r3, r3, #12
 800e3b0:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e3b6:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e3b8:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e3ba:	220c      	movs	r2, #12
 800e3bc:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e3be:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e3c0:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e3c2:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e3c4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800e3c6:	f005 fd73 	bl	8013eb0 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e3ca:	bd10      	pop	{r4, pc}
 800e3cc:	20007120 	.word	0x20007120
 800e3d0:	40004c00 	.word	0x40004c00

0800e3d4 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800e3d4:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800e3d6:	4809      	ldr	r0, [pc, #36]	; (800e3fc <MX_USART5_UART_Init+0x28>)
 800e3d8:	4b09      	ldr	r3, [pc, #36]	; (800e400 <MX_USART5_UART_Init+0x2c>)
 800e3da:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e3dc:	23e1      	movs	r3, #225	; 0xe1
 800e3de:	031b      	lsls	r3, r3, #12
 800e3e0:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e3e6:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e3e8:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e3ea:	220c      	movs	r2, #12
 800e3ec:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e3ee:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e3f0:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e3f2:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e3f4:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800e3f6:	f005 fd5b 	bl	8013eb0 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800e3fa:	bd10      	pop	{r4, pc}
 800e3fc:	20006fb4 	.word	0x20006fb4
 800e400:	40005000 	.word	0x40005000

0800e404 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e404:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e406:	4809      	ldr	r0, [pc, #36]	; (800e42c <MX_USART6_UART_Init+0x28>)
 800e408:	4b09      	ldr	r3, [pc, #36]	; (800e430 <MX_USART6_UART_Init+0x2c>)
 800e40a:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e40c:	23e1      	movs	r3, #225	; 0xe1
 800e40e:	031b      	lsls	r3, r3, #12
 800e410:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e412:	2300      	movs	r3, #0
 800e414:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e416:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e418:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e41a:	220c      	movs	r2, #12
 800e41c:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e41e:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e420:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e422:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e424:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e426:	f005 fd43 	bl	8013eb0 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e42a:	bd10      	pop	{r4, pc}
 800e42c:	200070a4 	.word	0x200070a4
 800e430:	40011400 	.word	0x40011400

0800e434 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e434:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e436:	46ce      	mov	lr, r9
 800e438:	b500      	push	{lr}
 800e43a:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800e43c:	6803      	ldr	r3, [r0, #0]
 800e43e:	4a91      	ldr	r2, [pc, #580]	; (800e684 <HAL_UART_MspInit+0x250>)
 800e440:	4293      	cmp	r3, r2
 800e442:	d015      	beq.n	800e470 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800e444:	4a90      	ldr	r2, [pc, #576]	; (800e688 <HAL_UART_MspInit+0x254>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d040      	beq.n	800e4cc <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e44a:	4a90      	ldr	r2, [pc, #576]	; (800e68c <HAL_UART_MspInit+0x258>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d069      	beq.n	800e524 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800e450:	4a8f      	ldr	r2, [pc, #572]	; (800e690 <HAL_UART_MspInit+0x25c>)
 800e452:	4293      	cmp	r3, r2
 800e454:	d100      	bne.n	800e458 <HAL_UART_MspInit+0x24>
 800e456:	e092      	b.n	800e57e <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800e458:	4a8e      	ldr	r2, [pc, #568]	; (800e694 <HAL_UART_MspInit+0x260>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d100      	bne.n	800e460 <HAL_UART_MspInit+0x2c>
 800e45e:	e0b9      	b.n	800e5d4 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e460:	4a8d      	ldr	r2, [pc, #564]	; (800e698 <HAL_UART_MspInit+0x264>)
 800e462:	4293      	cmp	r3, r2
 800e464:	d100      	bne.n	800e468 <HAL_UART_MspInit+0x34>
 800e466:	e0e0      	b.n	800e62a <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e468:	b00c      	add	sp, #48	; 0x30
 800e46a:	bc04      	pop	{r2}
 800e46c:	4691      	mov	r9, r2
 800e46e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800e470:	4a8a      	ldr	r2, [pc, #552]	; (800e69c <HAL_UART_MspInit+0x268>)
 800e472:	6991      	ldr	r1, [r2, #24]
 800e474:	2080      	movs	r0, #128	; 0x80
 800e476:	01c0      	lsls	r0, r0, #7
 800e478:	4301      	orrs	r1, r0
 800e47a:	6191      	str	r1, [r2, #24]
 800e47c:	6993      	ldr	r3, [r2, #24]
 800e47e:	4003      	ands	r3, r0
 800e480:	9301      	str	r3, [sp, #4]
 800e482:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800e484:	2380      	movs	r3, #128	; 0x80
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e48a:	2702      	movs	r7, #2
 800e48c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e48e:	2401      	movs	r4, #1
 800e490:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e492:	2603      	movs	r6, #3
 800e494:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800e496:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800e498:	2590      	movs	r5, #144	; 0x90
 800e49a:	05ed      	lsls	r5, r5, #23
 800e49c:	a907      	add	r1, sp, #28
 800e49e:	0028      	movs	r0, r5
 800e4a0:	f003 fcc6 	bl	8011e30 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800e4a4:	2380      	movs	r3, #128	; 0x80
 800e4a6:	00db      	lsls	r3, r3, #3
 800e4a8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4aa:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e4ac:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e4ae:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800e4b0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800e4b2:	a907      	add	r1, sp, #28
 800e4b4:	0028      	movs	r0, r5
 800e4b6:	f003 fcbb 	bl	8011e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	2101      	movs	r1, #1
 800e4be:	201b      	movs	r0, #27
 800e4c0:	f002 fcec 	bl	8010e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e4c4:	201b      	movs	r0, #27
 800e4c6:	f002 fd1d 	bl	8010f04 <HAL_NVIC_EnableIRQ>
 800e4ca:	e7cd      	b.n	800e468 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800e4cc:	4a73      	ldr	r2, [pc, #460]	; (800e69c <HAL_UART_MspInit+0x268>)
 800e4ce:	69d1      	ldr	r1, [r2, #28]
 800e4d0:	2080      	movs	r0, #128	; 0x80
 800e4d2:	0280      	lsls	r0, r0, #10
 800e4d4:	4301      	orrs	r1, r0
 800e4d6:	61d1      	str	r1, [r2, #28]
 800e4d8:	69d3      	ldr	r3, [r2, #28]
 800e4da:	4003      	ands	r3, r0
 800e4dc:	9302      	str	r3, [sp, #8]
 800e4de:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800e4e0:	2304      	movs	r3, #4
 800e4e2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4e4:	2702      	movs	r7, #2
 800e4e6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e4e8:	2401      	movs	r4, #1
 800e4ea:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e4ec:	2603      	movs	r6, #3
 800e4ee:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800e4f0:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e4f2:	2590      	movs	r5, #144	; 0x90
 800e4f4:	05ed      	lsls	r5, r5, #23
 800e4f6:	a907      	add	r1, sp, #28
 800e4f8:	0028      	movs	r0, r5
 800e4fa:	f003 fc99 	bl	8011e30 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800e4fe:	2308      	movs	r3, #8
 800e500:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e502:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e504:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e506:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800e508:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e50a:	a907      	add	r1, sp, #28
 800e50c:	0028      	movs	r0, r5
 800e50e:	f003 fc8f 	bl	8011e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e512:	2200      	movs	r2, #0
 800e514:	2101      	movs	r1, #1
 800e516:	201c      	movs	r0, #28
 800e518:	f002 fcc0 	bl	8010e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e51c:	201c      	movs	r0, #28
 800e51e:	f002 fcf1 	bl	8010f04 <HAL_NVIC_EnableIRQ>
 800e522:	e7a1      	b.n	800e468 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800e524:	4a5d      	ldr	r2, [pc, #372]	; (800e69c <HAL_UART_MspInit+0x268>)
 800e526:	69d1      	ldr	r1, [r2, #28]
 800e528:	2080      	movs	r0, #128	; 0x80
 800e52a:	02c0      	lsls	r0, r0, #11
 800e52c:	4301      	orrs	r1, r0
 800e52e:	61d1      	str	r1, [r2, #28]
 800e530:	69d3      	ldr	r3, [r2, #28]
 800e532:	4003      	ands	r3, r0
 800e534:	9303      	str	r3, [sp, #12]
 800e536:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e538:	2380      	movs	r3, #128	; 0x80
 800e53a:	00db      	lsls	r3, r3, #3
 800e53c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e53e:	2402      	movs	r4, #2
 800e540:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e542:	2701      	movs	r7, #1
 800e544:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e546:	2603      	movs	r6, #3
 800e548:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e54a:	2504      	movs	r5, #4
 800e54c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e54e:	a907      	add	r1, sp, #28
 800e550:	4853      	ldr	r0, [pc, #332]	; (800e6a0 <HAL_UART_MspInit+0x26c>)
 800e552:	f003 fc6d 	bl	8011e30 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e556:	2380      	movs	r3, #128	; 0x80
 800e558:	011b      	lsls	r3, r3, #4
 800e55a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e55c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e55e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e560:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800e562:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e564:	a907      	add	r1, sp, #28
 800e566:	484e      	ldr	r0, [pc, #312]	; (800e6a0 <HAL_UART_MspInit+0x26c>)
 800e568:	f003 fc62 	bl	8011e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e56c:	2200      	movs	r2, #0
 800e56e:	2101      	movs	r1, #1
 800e570:	201d      	movs	r0, #29
 800e572:	f002 fc93 	bl	8010e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e576:	201d      	movs	r0, #29
 800e578:	f002 fcc4 	bl	8010f04 <HAL_NVIC_EnableIRQ>
 800e57c:	e774      	b.n	800e468 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800e57e:	4a47      	ldr	r2, [pc, #284]	; (800e69c <HAL_UART_MspInit+0x268>)
 800e580:	69d1      	ldr	r1, [r2, #28]
 800e582:	2080      	movs	r0, #128	; 0x80
 800e584:	0300      	lsls	r0, r0, #12
 800e586:	4301      	orrs	r1, r0
 800e588:	61d1      	str	r1, [r2, #28]
 800e58a:	69d3      	ldr	r3, [r2, #28]
 800e58c:	4003      	ands	r3, r0
 800e58e:	9304      	str	r3, [sp, #16]
 800e590:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800e592:	2401      	movs	r4, #1
 800e594:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e596:	2502      	movs	r5, #2
 800e598:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e59a:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e59c:	2603      	movs	r6, #3
 800e59e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800e5a0:	2704      	movs	r7, #4
 800e5a2:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800e5a4:	a907      	add	r1, sp, #28
 800e5a6:	2090      	movs	r0, #144	; 0x90
 800e5a8:	05c0      	lsls	r0, r0, #23
 800e5aa:	f003 fc41 	bl	8011e30 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800e5ae:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5b0:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5b2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5b4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800e5b6:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800e5b8:	a907      	add	r1, sp, #28
 800e5ba:	2090      	movs	r0, #144	; 0x90
 800e5bc:	05c0      	lsls	r0, r0, #23
 800e5be:	f003 fc37 	bl	8011e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	2101      	movs	r1, #1
 800e5c6:	201d      	movs	r0, #29
 800e5c8:	f002 fc68 	bl	8010e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e5cc:	201d      	movs	r0, #29
 800e5ce:	f002 fc99 	bl	8010f04 <HAL_NVIC_EnableIRQ>
 800e5d2:	e749      	b.n	800e468 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800e5d4:	4a31      	ldr	r2, [pc, #196]	; (800e69c <HAL_UART_MspInit+0x268>)
 800e5d6:	69d1      	ldr	r1, [r2, #28]
 800e5d8:	2080      	movs	r0, #128	; 0x80
 800e5da:	0340      	lsls	r0, r0, #13
 800e5dc:	4301      	orrs	r1, r0
 800e5de:	61d1      	str	r1, [r2, #28]
 800e5e0:	69d3      	ldr	r3, [r2, #28]
 800e5e2:	4003      	ands	r3, r0
 800e5e4:	9305      	str	r3, [sp, #20]
 800e5e6:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800e5e8:	2308      	movs	r3, #8
 800e5ea:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5ec:	2402      	movs	r4, #2
 800e5ee:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e5f0:	2701      	movs	r7, #1
 800e5f2:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e5f4:	2603      	movs	r6, #3
 800e5f6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800e5f8:	2504      	movs	r5, #4
 800e5fa:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800e5fc:	a907      	add	r1, sp, #28
 800e5fe:	4828      	ldr	r0, [pc, #160]	; (800e6a0 <HAL_UART_MspInit+0x26c>)
 800e600:	f003 fc16 	bl	8011e30 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800e604:	2310      	movs	r3, #16
 800e606:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e608:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e60a:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e60c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800e60e:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800e610:	a907      	add	r1, sp, #28
 800e612:	4823      	ldr	r0, [pc, #140]	; (800e6a0 <HAL_UART_MspInit+0x26c>)
 800e614:	f003 fc0c 	bl	8011e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e618:	2200      	movs	r2, #0
 800e61a:	2101      	movs	r1, #1
 800e61c:	201d      	movs	r0, #29
 800e61e:	f002 fc3d 	bl	8010e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e622:	201d      	movs	r0, #29
 800e624:	f002 fc6e 	bl	8010f04 <HAL_NVIC_EnableIRQ>
 800e628:	e71e      	b.n	800e468 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800e62a:	4b1c      	ldr	r3, [pc, #112]	; (800e69c <HAL_UART_MspInit+0x268>)
 800e62c:	699a      	ldr	r2, [r3, #24]
 800e62e:	2420      	movs	r4, #32
 800e630:	4322      	orrs	r2, r4
 800e632:	619a      	str	r2, [r3, #24]
 800e634:	699b      	ldr	r3, [r3, #24]
 800e636:	4023      	ands	r3, r4
 800e638:	9306      	str	r3, [sp, #24]
 800e63a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e63c:	2310      	movs	r3, #16
 800e63e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e640:	3b0e      	subs	r3, #14
 800e642:	4699      	mov	r9, r3
 800e644:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e646:	2501      	movs	r5, #1
 800e648:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e64a:	2703      	movs	r7, #3
 800e64c:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e64e:	2605      	movs	r6, #5
 800e650:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e652:	a907      	add	r1, sp, #28
 800e654:	2090      	movs	r0, #144	; 0x90
 800e656:	05c0      	lsls	r0, r0, #23
 800e658:	f003 fbea 	bl	8011e30 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e65c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e65e:	464b      	mov	r3, r9
 800e660:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e662:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e664:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800e666:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e668:	a907      	add	r1, sp, #28
 800e66a:	2090      	movs	r0, #144	; 0x90
 800e66c:	05c0      	lsls	r0, r0, #23
 800e66e:	f003 fbdf 	bl	8011e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e672:	2200      	movs	r2, #0
 800e674:	2101      	movs	r1, #1
 800e676:	201d      	movs	r0, #29
 800e678:	f002 fc10 	bl	8010e9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e67c:	201d      	movs	r0, #29
 800e67e:	f002 fc41 	bl	8010f04 <HAL_NVIC_EnableIRQ>
}
 800e682:	e6f1      	b.n	800e468 <HAL_UART_MspInit+0x34>
 800e684:	40013800 	.word	0x40013800
 800e688:	40004400 	.word	0x40004400
 800e68c:	40004800 	.word	0x40004800
 800e690:	40004c00 	.word	0x40004c00
 800e694:	40005000 	.word	0x40005000
 800e698:	40011400 	.word	0x40011400
 800e69c:	40021000 	.word	0x40021000
 800e6a0:	48000400 	.word	0x48000400

0800e6a4 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e6a4:	2806      	cmp	r0, #6
 800e6a6:	d80d      	bhi.n	800e6c4 <GetUart+0x20>
 800e6a8:	0080      	lsls	r0, r0, #2
 800e6aa:	4b08      	ldr	r3, [pc, #32]	; (800e6cc <GetUart+0x28>)
 800e6ac:	581b      	ldr	r3, [r3, r0]
 800e6ae:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800e6b0:	4807      	ldr	r0, [pc, #28]	; (800e6d0 <GetUart+0x2c>)
 800e6b2:	e00a      	b.n	800e6ca <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800e6b4:	4807      	ldr	r0, [pc, #28]	; (800e6d4 <GetUart+0x30>)
 800e6b6:	e008      	b.n	800e6ca <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800e6b8:	4807      	ldr	r0, [pc, #28]	; (800e6d8 <GetUart+0x34>)
 800e6ba:	e006      	b.n	800e6ca <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800e6bc:	4807      	ldr	r0, [pc, #28]	; (800e6dc <GetUart+0x38>)
 800e6be:	e004      	b.n	800e6ca <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800e6c0:	4807      	ldr	r0, [pc, #28]	; (800e6e0 <GetUart+0x3c>)
 800e6c2:	e002      	b.n	800e6ca <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	e000      	b.n	800e6ca <GetUart+0x26>
			return P1uart;	
 800e6c8:	4806      	ldr	r0, [pc, #24]	; (800e6e4 <GetUart+0x40>)
	}		
}
 800e6ca:	4770      	bx	lr
 800e6cc:	0801bda4 	.word	0x0801bda4
 800e6d0:	20007194 	.word	0x20007194
 800e6d4:	200070a4 	.word	0x200070a4
 800e6d8:	20006f3c 	.word	0x20006f3c
 800e6dc:	2000702c 	.word	0x2000702c
 800e6e0:	20006fb4 	.word	0x20006fb4
 800e6e4:	20007120 	.word	0x20007120

0800e6e8 <writePxMutex>:
{
 800e6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	0005      	movs	r5, r0
 800e6ee:	9100      	str	r1, [sp, #0]
 800e6f0:	0017      	movs	r7, r2
 800e6f2:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e6f4:	f7ff ffd6 	bl	800e6a4 <GetUart>
 800e6f8:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e6fa:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d016      	beq.n	800e72e <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e700:	00ab      	lsls	r3, r5, #2
 800e702:	4a0c      	ldr	r2, [pc, #48]	; (800e734 <writePxMutex+0x4c>)
 800e704:	5898      	ldr	r0, [r3, r2]
 800e706:	9901      	ldr	r1, [sp, #4]
 800e708:	f000 f9b8 	bl	800ea7c <osSemaphoreWait>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d10e      	bne.n	800e72e <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e710:	9b08      	ldr	r3, [sp, #32]
 800e712:	003a      	movs	r2, r7
 800e714:	9900      	ldr	r1, [sp, #0]
 800e716:	0020      	movs	r0, r4
 800e718:	f005 fb24 	bl	8013d64 <HAL_UART_Transmit>
 800e71c:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e71e:	d001      	beq.n	800e724 <writePxMutex+0x3c>
 800e720:	2803      	cmp	r0, #3
 800e722:	d1f5      	bne.n	800e710 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e724:	00ad      	lsls	r5, r5, #2
 800e726:	4b03      	ldr	r3, [pc, #12]	; (800e734 <writePxMutex+0x4c>)
 800e728:	58e8      	ldr	r0, [r5, r3]
 800e72a:	f000 f9d3 	bl	800ead4 <osSemaphoreRelease>
}
 800e72e:	0030      	movs	r0, r6
 800e730:	b003      	add	sp, #12
 800e732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e734:	20006ed4 	.word	0x20006ed4

0800e738 <writePxITMutex>:
{
 800e738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e73a:	b083      	sub	sp, #12
 800e73c:	0004      	movs	r4, r0
 800e73e:	9101      	str	r1, [sp, #4]
 800e740:	0017      	movs	r7, r2
 800e742:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e744:	f7ff ffae 	bl	800e6a4 <GetUart>
 800e748:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e74a:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e74c:	2800      	cmp	r0, #0
 800e74e:	d008      	beq.n	800e762 <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e750:	00a4      	lsls	r4, r4, #2
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <writePxITMutex+0x40>)
 800e754:	58e0      	ldr	r0, [r4, r3]
 800e756:	0029      	movs	r1, r5
 800e758:	f000 f990 	bl	800ea7c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e75c:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e75e:	2800      	cmp	r0, #0
 800e760:	d002      	beq.n	800e768 <writePxITMutex+0x30>
}
 800e762:	0018      	movs	r0, r3
 800e764:	b003      	add	sp, #12
 800e766:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e768:	003a      	movs	r2, r7
 800e76a:	9901      	ldr	r1, [sp, #4]
 800e76c:	0030      	movs	r0, r6
 800e76e:	f004 ff63 	bl	8013638 <HAL_UART_Transmit_IT>
 800e772:	0003      	movs	r3, r0
 800e774:	e7f5      	b.n	800e762 <writePxITMutex+0x2a>
 800e776:	46c0      	nop			; (mov r8, r8)
 800e778:	20006ed4 	.word	0x20006ed4

0800e77c <writePxDMAMutex>:
{
 800e77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e77e:	b083      	sub	sp, #12
 800e780:	0004      	movs	r4, r0
 800e782:	000f      	movs	r7, r1
 800e784:	9201      	str	r2, [sp, #4]
 800e786:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e788:	f7ff ff8c 	bl	800e6a4 <GetUart>
 800e78c:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e78e:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800e790:	2800      	cmp	r0, #0
 800e792:	d008      	beq.n	800e7a6 <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e794:	00a4      	lsls	r4, r4, #2
 800e796:	4b0a      	ldr	r3, [pc, #40]	; (800e7c0 <writePxDMAMutex+0x44>)
 800e798:	58e0      	ldr	r0, [r4, r3]
 800e79a:	0031      	movs	r1, r6
 800e79c:	f000 f96e 	bl	800ea7c <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e7a0:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e7a2:	2800      	cmp	r0, #0
 800e7a4:	d002      	beq.n	800e7ac <writePxDMAMutex+0x30>
}
 800e7a6:	0018      	movs	r0, r3
 800e7a8:	b003      	add	sp, #12
 800e7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e7ac:	0028      	movs	r0, r5
 800e7ae:	f7fd fd39 	bl	800c224 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e7b2:	9a01      	ldr	r2, [sp, #4]
 800e7b4:	0039      	movs	r1, r7
 800e7b6:	0028      	movs	r0, r5
 800e7b8:	f004 ffea 	bl	8013790 <HAL_UART_Transmit_DMA>
 800e7bc:	0003      	movs	r3, r0
 800e7be:	e7f2      	b.n	800e7a6 <writePxDMAMutex+0x2a>
 800e7c0:	20006ed4 	.word	0x20006ed4

0800e7c4 <UpdateBaudrate>:
{
 800e7c4:	b510      	push	{r4, lr}
 800e7c6:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e7c8:	f7ff ff6c 	bl	800e6a4 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e7cc:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e7ce:	f005 fb6f 	bl	8013eb0 <HAL_UART_Init>
}
 800e7d2:	2000      	movs	r0, #0
 800e7d4:	bd10      	pop	{r4, pc}
	...

0800e7d8 <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e7d8:	b570      	push	{r4, r5, r6, lr}
 800e7da:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e7dc:	d003      	beq.n	800e7e6 <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e7de:	2901      	cmp	r1, #1
 800e7e0:	d002      	beq.n	800e7e8 <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e7e2:	2900      	cmp	r1, #0
 800e7e4:	d016      	beq.n	800e814 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e7e6:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e7e8:	f7fc fc4e 	bl	800b088 <GetPort>
 800e7ec:	4b14      	ldr	r3, [pc, #80]	; (800e840 <SwapUartPins+0x68>)
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	3b01      	subs	r3, #1
 800e7f2:	4d14      	ldr	r5, [pc, #80]	; (800e844 <SwapUartPins+0x6c>)
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	3801      	subs	r0, #1
 800e7f8:	2180      	movs	r1, #128	; 0x80
 800e7fa:	0209      	lsls	r1, r1, #8
 800e7fc:	000a      	movs	r2, r1
 800e7fe:	4102      	asrs	r2, r0
 800e800:	5b58      	ldrh	r0, [r3, r5]
 800e802:	4302      	orrs	r2, r0
 800e804:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e806:	2308      	movs	r3, #8
 800e808:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e80a:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e80c:	0020      	movs	r0, r4
 800e80e:	f005 fb4f 	bl	8013eb0 <HAL_UART_Init>
 800e812:	e7e8      	b.n	800e7e6 <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e814:	f7fc fc38 	bl	800b088 <GetPort>
 800e818:	4b09      	ldr	r3, [pc, #36]	; (800e840 <SwapUartPins+0x68>)
 800e81a:	781b      	ldrb	r3, [r3, #0]
 800e81c:	3b01      	subs	r3, #1
 800e81e:	4d09      	ldr	r5, [pc, #36]	; (800e844 <SwapUartPins+0x6c>)
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	3801      	subs	r0, #1
 800e824:	2180      	movs	r1, #128	; 0x80
 800e826:	0209      	lsls	r1, r1, #8
 800e828:	4101      	asrs	r1, r0
 800e82a:	5b5a      	ldrh	r2, [r3, r5]
 800e82c:	438a      	bics	r2, r1
 800e82e:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e830:	2308      	movs	r3, #8
 800e832:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e834:	2300      	movs	r3, #0
 800e836:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e838:	0020      	movs	r0, r4
 800e83a:	f005 fb39 	bl	8013eb0 <HAL_UART_Init>
}
 800e83e:	e7d2      	b.n	800e7e6 <SwapUartPins+0xe>
 800e840:	200010ea 	.word	0x200010ea
 800e844:	20007358 	.word	0x20007358

0800e848 <ReadPortsDir>:
/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800e848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e84a:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800e84c:	4b12      	ldr	r3, [pc, #72]	; (800e898 <ReadPortsDir+0x50>)
 800e84e:	781b      	ldrb	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d01c      	beq.n	800e88e <ReadPortsDir+0x46>
 800e854:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 800e85a:	4e10      	ldr	r6, [pc, #64]	; (800e89c <ReadPortsDir+0x54>)
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800e85c:	4d10      	ldr	r5, [pc, #64]	; (800e8a0 <ReadPortsDir+0x58>)
	for (uint8_t i = 1; i <= N; i++) {
 800e85e:	4f0e      	ldr	r7, [pc, #56]	; (800e898 <ReadPortsDir+0x50>)
 800e860:	e004      	b.n	800e86c <ReadPortsDir+0x24>
 800e862:	3401      	adds	r4, #1
 800e864:	b2e4      	uxtb	r4, r4
 800e866:	783b      	ldrb	r3, [r7, #0]
 800e868:	42a3      	cmp	r3, r4
 800e86a:	d312      	bcc.n	800e892 <ReadPortsDir+0x4a>
		if (i != myID) {
 800e86c:	7833      	ldrb	r3, [r6, #0]
 800e86e:	42a3      	cmp	r3, r4
 800e870:	d0f7      	beq.n	800e862 <ReadPortsDir+0x1a>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800e872:	2200      	movs	r2, #0
 800e874:	2113      	movs	r1, #19
 800e876:	0020      	movs	r0, r4
 800e878:	f7f9 fc72 	bl	8008160 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800e87c:	2032      	movs	r0, #50	; 0x32
 800e87e:	f7ff fd37 	bl	800e2f0 <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800e882:	782b      	ldrb	r3, [r5, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d0ec      	beq.n	800e862 <ReadPortsDir+0x1a>
				result = BOS_ERR_NoResponse;
 800e888:	2302      	movs	r3, #2
 800e88a:	9301      	str	r3, [sp, #4]
 800e88c:	e7e9      	b.n	800e862 <ReadPortsDir+0x1a>
	BOS_Status result = BOS_OK;
 800e88e:	2300      	movs	r3, #0
 800e890:	9301      	str	r3, [sp, #4]
			}
		}
	}

	return result;
}
 800e892:	9801      	ldr	r0, [sp, #4]
 800e894:	b003      	add	sp, #12
 800e896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e898:	20000044 	.word	0x20000044
 800e89c:	200010ea 	.word	0x200010ea
 800e8a0:	20001188 	.word	0x20001188

0800e8a4 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800e8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	9001      	str	r0, [sp, #4]
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800e8aa:	2401      	movs	r4, #1
	uint16_t temp =0;
 800e8ac:	2600      	movs	r6, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e8ae:	2780      	movs	r7, #128	; 0x80
 800e8b0:	023f      	lsls	r7, r7, #8
 800e8b2:	e002      	b.n	800e8ba <ReadPortsDirMSG+0x16>
	for (int p = 1; p <= NumOfPorts; p++) {
 800e8b4:	3401      	adds	r4, #1
 800e8b6:	2c07      	cmp	r4, #7
 800e8b8:	d00b      	beq.n	800e8d2 <ReadPortsDirMSG+0x2e>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e8ba:	b2e5      	uxtb	r5, r4
 800e8bc:	0028      	movs	r0, r5
 800e8be:	f7ff fef1 	bl	800e6a4 <GetUart>
 800e8c2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e8c4:	42bb      	cmp	r3, r7
 800e8c6:	d1f5      	bne.n	800e8b4 <ReadPortsDirMSG+0x10>
			messageParams[temp++] = p;
 800e8c8:	1c73      	adds	r3, r6, #1
 800e8ca:	4a06      	ldr	r2, [pc, #24]	; (800e8e4 <ReadPortsDirMSG+0x40>)
 800e8cc:	5595      	strb	r5, [r2, r6]
 800e8ce:	b29e      	uxth	r6, r3
 800e8d0:	e7f0      	b.n	800e8b4 <ReadPortsDirMSG+0x10>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800e8d2:	0032      	movs	r2, r6
 800e8d4:	2114      	movs	r1, #20
 800e8d6:	9801      	ldr	r0, [sp, #4]
 800e8d8:	f7f9 fc42 	bl	8008160 <SendMessageToModule>
	return result;
}
 800e8dc:	2000      	movs	r0, #0
 800e8de:	b003      	add	sp, #12
 800e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e2:	46c0      	nop			; (mov r8, r8)
 800e8e4:	20000fac 	.word	0x20000fac

0800e8e8 <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800e8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ea:	46c6      	mov	lr, r8
 800e8ec:	b500      	push	{lr}
 800e8ee:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e8f0:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e8f2:	4b12      	ldr	r3, [pc, #72]	; (800e93c <UpdateMyPortsDir+0x54>)
 800e8f4:	4698      	mov	r8, r3
 800e8f6:	4f12      	ldr	r7, [pc, #72]	; (800e940 <UpdateMyPortsDir+0x58>)
 800e8f8:	2680      	movs	r6, #128	; 0x80
 800e8fa:	0236      	lsls	r6, r6, #8
 800e8fc:	e00a      	b.n	800e914 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800e8fe:	0020      	movs	r0, r4
 800e900:	f7ff fed0 	bl	800e6a4 <GetUart>
 800e904:	2101      	movs	r1, #1
 800e906:	f7ff ff67 	bl	800e7d8 <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e90a:	3401      	adds	r4, #1
 800e90c:	b2e4      	uxtb	r4, r4
 800e90e:	3501      	adds	r5, #1
 800e910:	2c07      	cmp	r4, #7
 800e912:	d00f      	beq.n	800e934 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e914:	783b      	ldrb	r3, [r7, #0]
 800e916:	3b01      	subs	r3, #1
 800e918:	005b      	lsls	r3, r3, #1
 800e91a:	4642      	mov	r2, r8
 800e91c:	5a9b      	ldrh	r3, [r3, r2]
 800e91e:	0032      	movs	r2, r6
 800e920:	412a      	asrs	r2, r5
 800e922:	421a      	tst	r2, r3
 800e924:	d1eb      	bne.n	800e8fe <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 800e926:	0020      	movs	r0, r4
 800e928:	f7ff febc 	bl	800e6a4 <GetUart>
 800e92c:	2100      	movs	r1, #0
 800e92e:	f7ff ff53 	bl	800e7d8 <SwapUartPins>
 800e932:	e7ea      	b.n	800e90a <UpdateMyPortsDir+0x22>
		}
	}

	return result;
}
 800e934:	2000      	movs	r0, #0
 800e936:	bc04      	pop	{r2}
 800e938:	4690      	mov	r8, r2
 800e93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e93c:	20007358 	.word	0x20007358
 800e940:	200010ea 	.word	0x200010ea

0800e944 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 800e944:	4816      	ldr	r0, [pc, #88]	; (800e9a0 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e946:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e948:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e94a:	e003      	b.n	800e954 <LoopCopyDataInit>

0800e94c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e94c:	4b15      	ldr	r3, [pc, #84]	; (800e9a4 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e94e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e950:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e952:	3104      	adds	r1, #4

0800e954 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e954:	4814      	ldr	r0, [pc, #80]	; (800e9a8 <LoopForever+0xc>)
  ldr r3, =_edata
 800e956:	4b15      	ldr	r3, [pc, #84]	; (800e9ac <LoopForever+0x10>)
  adds r2, r0, r1
 800e958:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e95a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e95c:	d3f6      	bcc.n	800e94c <CopyDataInit>
  ldr r2, =_sbss
 800e95e:	4a14      	ldr	r2, [pc, #80]	; (800e9b0 <LoopForever+0x14>)
  b LoopFillZerobss
 800e960:	e002      	b.n	800e968 <LoopFillZerobss>

0800e962 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e962:	2300      	movs	r3, #0
  str  r3, [r2]
 800e964:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e966:	3204      	adds	r2, #4

0800e968 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e968:	4b12      	ldr	r3, [pc, #72]	; (800e9b4 <LoopForever+0x18>)
  cmp r2, r3
 800e96a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e96c:	d3f9      	bcc.n	800e962 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e96e:	4812      	ldr	r0, [pc, #72]	; (800e9b8 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e970:	4912      	ldr	r1, [pc, #72]	; (800e9bc <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e972:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e974:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e976:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e978:	d005      	beq.n	800e986 <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e97a:	f000 f82b 	bl	800e9d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e97e:	f005 fc03 	bl	8014188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e982:	f005 fbea 	bl	801415a <main>

0800e986 <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e986:	480e      	ldr	r0, [pc, #56]	; (800e9c0 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e988:	490e      	ldr	r1, [pc, #56]	; (800e9c4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e98a:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e98c:	480e      	ldr	r0, [pc, #56]	; (800e9c8 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e98e:	490d      	ldr	r1, [pc, #52]	; (800e9c4 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e990:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e992:	480e      	ldr	r0, [pc, #56]	; (800e9cc <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e994:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e996:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e998:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e99a:	4700      	bx	r0

0800e99c <LoopForever>:


LoopForever:
    b LoopForever
 800e99c:	e7fe      	b.n	800e99c <LoopForever>
 800e99e:	0000      	.short	0x0000
	  ldr   r0, =_estack
 800e9a0:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e9a4:	0801c27c 	.word	0x0801c27c
  ldr r0, =_sdata
 800e9a8:	20000020 	.word	0x20000020
  ldr r3, =_edata
 800e9ac:	20000ac8 	.word	0x20000ac8
  ldr r2, =_sbss
 800e9b0:	20000ac8 	.word	0x20000ac8
  ldr r3, = _ebss
 800e9b4:	20007400 	.word	0x20007400
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e9b8:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e9bc:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e9c0:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e9c4:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e9c8:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e9cc:	1fffd800 	.word	0x1fffd800

0800e9d0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e9d0:	e7fe      	b.n	800e9d0 <ADC1_COMP_IRQHandler>
	...

0800e9d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e9d4:	4b11      	ldr	r3, [pc, #68]	; (800ea1c <SystemInit+0x48>)
 800e9d6:	681a      	ldr	r2, [r3, #0]
 800e9d8:	2101      	movs	r1, #1
 800e9da:	430a      	orrs	r2, r1
 800e9dc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e9de:	685a      	ldr	r2, [r3, #4]
 800e9e0:	480f      	ldr	r0, [pc, #60]	; (800ea20 <SystemInit+0x4c>)
 800e9e2:	4002      	ands	r2, r0
 800e9e4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	480e      	ldr	r0, [pc, #56]	; (800ea24 <SystemInit+0x50>)
 800e9ea:	4002      	ands	r2, r0
 800e9ec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	480d      	ldr	r0, [pc, #52]	; (800ea28 <SystemInit+0x54>)
 800e9f2:	4002      	ands	r2, r0
 800e9f4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e9f6:	685a      	ldr	r2, [r3, #4]
 800e9f8:	480c      	ldr	r0, [pc, #48]	; (800ea2c <SystemInit+0x58>)
 800e9fa:	4002      	ands	r2, r0
 800e9fc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea00:	200f      	movs	r0, #15
 800ea02:	4382      	bics	r2, r0
 800ea04:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800ea06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea08:	4809      	ldr	r0, [pc, #36]	; (800ea30 <SystemInit+0x5c>)
 800ea0a:	4002      	ands	r2, r0
 800ea0c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800ea0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea10:	438a      	bics	r2, r1
 800ea12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800ea14:	2200      	movs	r2, #0
 800ea16:	609a      	str	r2, [r3, #8]

}
 800ea18:	4770      	bx	lr
 800ea1a:	46c0      	nop			; (mov r8, r8)
 800ea1c:	40021000 	.word	0x40021000
 800ea20:	08ffb80c 	.word	0x08ffb80c
 800ea24:	fef6ffff 	.word	0xfef6ffff
 800ea28:	fffbffff 	.word	0xfffbffff
 800ea2c:	ffc0ffff 	.word	0xffc0ffff
 800ea30:	fff0feac 	.word	0xfff0feac

0800ea34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800ea34:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800ea36:	f000 fed7 	bl	800f7e8 <vTaskStartScheduler>
  
  return osOK;
}
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	bd10      	pop	{r4, pc}

0800ea3e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ea3e:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ea40:	2800      	cmp	r0, #0
 800ea42:	d100      	bne.n	800ea46 <osDelay+0x8>
 800ea44:	3001      	adds	r0, #1
 800ea46:	f001 f813 	bl	800fa70 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	bd10      	pop	{r4, pc}

0800ea4e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800ea4e:	b510      	push	{r4, lr}
 800ea50:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800ea52:	2901      	cmp	r1, #1
 800ea54:	d005      	beq.n	800ea62 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800ea56:	2100      	movs	r1, #0
 800ea58:	f000 fae7 	bl	800f02a <xQueueCreateCountingSemaphore>
 800ea5c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800ea5e:	0020      	movs	r0, r4
 800ea60:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800ea62:	2203      	movs	r2, #3
 800ea64:	2100      	movs	r1, #0
 800ea66:	f000 fac0 	bl	800efea <xQueueGenericCreate>
 800ea6a:	1e04      	subs	r4, r0, #0
 800ea6c:	d0f7      	beq.n	800ea5e <osSemaphoreCreate+0x10>
 800ea6e:	2300      	movs	r3, #0
 800ea70:	2200      	movs	r2, #0
 800ea72:	2100      	movs	r1, #0
 800ea74:	f000 fae3 	bl	800f03e <xQueueGenericSend>
 800ea78:	e7f1      	b.n	800ea5e <osSemaphoreCreate+0x10>
	...

0800ea7c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ea7c:	b500      	push	{lr}
 800ea7e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ea80:	2300      	movs	r3, #0
 800ea82:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d021      	beq.n	800eacc <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea88:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d010      	beq.n	800eab2 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ea90:	aa01      	add	r2, sp, #4
 800ea92:	2100      	movs	r1, #0
 800ea94:	f000 fc3f 	bl	800f316 <xQueueReceiveFromISR>
 800ea98:	0003      	movs	r3, r0
      return osErrorOS;
 800ea9a:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d113      	bne.n	800eac8 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800eaa0:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800eaa2:	9b01      	ldr	r3, [sp, #4]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00f      	beq.n	800eac8 <osSemaphoreWait+0x4c>
 800eaa8:	4b09      	ldr	r3, [pc, #36]	; (800ead0 <osSemaphoreWait+0x54>)
 800eaaa:	2280      	movs	r2, #128	; 0x80
 800eaac:	0552      	lsls	r2, r2, #21
 800eaae:	601a      	str	r2, [r3, #0]
 800eab0:	e00a      	b.n	800eac8 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800eab2:	2300      	movs	r3, #0
 800eab4:	000a      	movs	r2, r1
 800eab6:	2100      	movs	r1, #0
 800eab8:	f000 fb9d 	bl	800f1f6 <xQueueGenericReceive>
  return osOK;
 800eabc:	3801      	subs	r0, #1
 800eabe:	1e43      	subs	r3, r0, #1
 800eac0:	4198      	sbcs	r0, r3
 800eac2:	4240      	negs	r0, r0
 800eac4:	23ff      	movs	r3, #255	; 0xff
 800eac6:	4018      	ands	r0, r3
}
 800eac8:	b003      	add	sp, #12
 800eaca:	bd00      	pop	{pc}
    return osErrorParameter;
 800eacc:	2080      	movs	r0, #128	; 0x80
 800eace:	e7fb      	b.n	800eac8 <osSemaphoreWait+0x4c>
 800ead0:	e000ed04 	.word	0xe000ed04

0800ead4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ead4:	b500      	push	{lr}
 800ead6:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800ead8:	2300      	movs	r3, #0
 800eada:	9301      	str	r3, [sp, #4]
 800eadc:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00f      	beq.n	800eb04 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eae4:	a901      	add	r1, sp, #4
 800eae6:	f000 fb5b 	bl	800f1a0 <xQueueGiveFromISR>
 800eaea:	0003      	movs	r3, r0
      return osErrorOS;
 800eaec:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d114      	bne.n	800eb1c <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800eaf2:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800eaf4:	9b01      	ldr	r3, [sp, #4]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d010      	beq.n	800eb1c <osSemaphoreRelease+0x48>
 800eafa:	4b09      	ldr	r3, [pc, #36]	; (800eb20 <osSemaphoreRelease+0x4c>)
 800eafc:	2280      	movs	r2, #128	; 0x80
 800eafe:	0552      	lsls	r2, r2, #21
 800eb00:	601a      	str	r2, [r3, #0]
 800eb02:	e00b      	b.n	800eb1c <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800eb04:	2300      	movs	r3, #0
 800eb06:	2200      	movs	r2, #0
 800eb08:	2100      	movs	r1, #0
 800eb0a:	f000 fa98 	bl	800f03e <xQueueGenericSend>
      result = osErrorOS;
 800eb0e:	3801      	subs	r0, #1
 800eb10:	4243      	negs	r3, r0
 800eb12:	4158      	adcs	r0, r3
 800eb14:	4240      	negs	r0, r0
 800eb16:	23fe      	movs	r3, #254	; 0xfe
 800eb18:	4398      	bics	r0, r3
 800eb1a:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800eb1c:	b003      	add	sp, #12
 800eb1e:	bd00      	pop	{pc}
 800eb20:	e000ed04 	.word	0xe000ed04

0800eb24 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800eb24:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800eb26:	f001 f971 	bl	800fe0c <xTaskGetSchedulerState>
 800eb2a:	2801      	cmp	r0, #1
 800eb2c:	d001      	beq.n	800eb32 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800eb2e:	f001 fdb7 	bl	80106a0 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800eb32:	bd10      	pop	{r4, pc}

0800eb34 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	0005      	movs	r5, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800eb38:	2008      	movs	r0, #8
 800eb3a:	f001 fded 	bl	8010718 <pvPortMalloc>
 800eb3e:	0004      	movs	r4, r0
portBASE_TYPE xReturn = pdFAIL;
 800eb40:	2000      	movs	r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800eb42:	2c00      	cmp	r4, #0
 800eb44:	d00b      	beq.n	800eb5e <FreeRTOS_CLIRegisterCommand+0x2a>
	{
		taskENTER_CRITICAL();
 800eb46:	f001 fd6b 	bl	8010620 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800eb4a:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800eb50:	4b03      	ldr	r3, [pc, #12]	; (800eb60 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800eb56:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800eb58:	f001 fd6e 	bl	8010638 <vPortExitCritical>

		xReturn = pdPASS;
 800eb5c:	2001      	movs	r0, #1
	}

	return xReturn;
}
 800eb5e:	bd70      	pop	{r4, r5, r6, pc}
 800eb60:	20000104 	.word	0x20000104

0800eb64 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800eb64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb66:	46d6      	mov	lr, sl
 800eb68:	b500      	push	{lr}
 800eb6a:	b084      	sub	sp, #16
 800eb6c:	9001      	str	r0, [sp, #4]
 800eb6e:	9102      	str	r1, [sp, #8]
 800eb70:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800eb72:	4b37      	ldr	r3, [pc, #220]	; (800ec50 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d00e      	beq.n	800eb98 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	9a01      	ldr	r2, [sp, #4]
 800eb80:	9903      	ldr	r1, [sp, #12]
 800eb82:	9802      	ldr	r0, [sp, #8]
 800eb84:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d102      	bne.n	800eb90 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800eb8a:	4b31      	ldr	r3, [pc, #196]	; (800ec50 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800eb90:	b004      	add	sp, #16
 800eb92:	bc04      	pop	{r2}
 800eb94:	4692      	mov	sl, r2
 800eb96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800eb98:	4d2e      	ldr	r5, [pc, #184]	; (800ec54 <FreeRTOS_CLIProcessCommand+0xf0>)
 800eb9a:	4a2d      	ldr	r2, [pc, #180]	; (800ec50 <FreeRTOS_CLIProcessCommand+0xec>)
 800eb9c:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800eb9e:	3320      	adds	r3, #32
 800eba0:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800eba2:	0017      	movs	r7, r2
 800eba4:	e00a      	b.n	800ebbc <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800eba6:	0002      	movs	r2, r0
 800eba8:	0021      	movs	r1, r4
 800ebaa:	9801      	ldr	r0, [sp, #4]
 800ebac:	f005 ffe8 	bl	8014b80 <strncmp>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d00e      	beq.n	800ebd2 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ebb4:	686d      	ldr	r5, [r5, #4]
 800ebb6:	603d      	str	r5, [r7, #0]
 800ebb8:	2d00      	cmp	r5, #0
 800ebba:	d012      	beq.n	800ebe2 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ebbc:	682e      	ldr	r6, [r5, #0]
 800ebbe:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ebc0:	0020      	movs	r0, r4
 800ebc2:	f7f1 faa9 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ebc6:	9b01      	ldr	r3, [sp, #4]
 800ebc8:	5c1b      	ldrb	r3, [r3, r0]
 800ebca:	4652      	mov	r2, sl
 800ebcc:	4393      	bics	r3, r2
 800ebce:	d1f1      	bne.n	800ebb4 <FreeRTOS_CLIProcessCommand+0x50>
 800ebd0:	e7e9      	b.n	800eba6 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ebd2:	200c      	movs	r0, #12
 800ebd4:	5630      	ldrsb	r0, [r6, r0]
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	da0a      	bge.n	800ebf0 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ebda:	4b1d      	ldr	r3, [pc, #116]	; (800ec50 <FreeRTOS_CLIProcessCommand+0xec>)
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1cb      	bne.n	800eb7a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ebe2:	9a03      	ldr	r2, [sp, #12]
 800ebe4:	491c      	ldr	r1, [pc, #112]	; (800ec58 <FreeRTOS_CLIProcessCommand+0xf4>)
 800ebe6:	9802      	ldr	r0, [sp, #8]
 800ebe8:	f005 ffdb 	bl	8014ba2 <strncpy>
		xReturn = pdFALSE;
 800ebec:	2000      	movs	r0, #0
	return xReturn;
 800ebee:	e7cf      	b.n	800eb90 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ebf0:	9a01      	ldr	r2, [sp, #4]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	56d3      	ldrsb	r3, [r2, r3]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d027      	beq.n	800ec4a <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800ebfa:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ebfc:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ebfe:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800ec00:	2501      	movs	r5, #1
 800ec02:	e009      	b.n	800ec18 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800ec04:	2901      	cmp	r1, #1
 800ec06:	d002      	beq.n	800ec0e <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800ec08:	3401      	adds	r4, #1
 800ec0a:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800ec0c:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800ec0e:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800ec10:	2300      	movs	r3, #0
 800ec12:	56d3      	ldrsb	r3, [r2, r3]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800ec18:	2b20      	cmp	r3, #32
 800ec1a:	d0f3      	beq.n	800ec04 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800ec1c:	0031      	movs	r1, r6
 800ec1e:	e7f6      	b.n	800ec0e <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ec20:	2901      	cmp	r1, #1
 800ec22:	d00f      	beq.n	800ec44 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ec24:	4b0a      	ldr	r3, [pc, #40]	; (800ec50 <FreeRTOS_CLIProcessCommand+0xec>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d0da      	beq.n	800ebe2 <FreeRTOS_CLIProcessCommand+0x7e>
 800ec2c:	42a0      	cmp	r0, r4
 800ec2e:	d0a4      	beq.n	800eb7a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ec30:	9a03      	ldr	r2, [sp, #12]
 800ec32:	490a      	ldr	r1, [pc, #40]	; (800ec5c <FreeRTOS_CLIProcessCommand+0xf8>)
 800ec34:	9802      	ldr	r0, [sp, #8]
 800ec36:	f005 ffb4 	bl	8014ba2 <strncpy>
		pxCommand = NULL;
 800ec3a:	4b05      	ldr	r3, [pc, #20]	; (800ec50 <FreeRTOS_CLIProcessCommand+0xec>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	601a      	str	r2, [r3, #0]
 800ec40:	2000      	movs	r0, #0
 800ec42:	e7a5      	b.n	800eb90 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800ec44:	3c01      	subs	r4, #1
 800ec46:	b264      	sxtb	r4, r4
 800ec48:	e7ec      	b.n	800ec24 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800ec4a:	2400      	movs	r4, #0
 800ec4c:	e7ea      	b.n	800ec24 <FreeRTOS_CLIProcessCommand+0xc0>
 800ec4e:	46c0      	nop			; (mov r8, r8)
 800ec50:	200021d4 	.word	0x200021d4
 800ec54:	20000108 	.word	0x20000108
 800ec58:	0801be18 	.word	0x0801be18
 800ec5c:	0801bdc0 	.word	0x0801bdc0

0800ec60 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ec60:	4800      	ldr	r0, [pc, #0]	; (800ec64 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ec62:	4770      	bx	lr
 800ec64:	20001f6c 	.word	0x20001f6c

0800ec68 <FreeRTOS_CLIGetParameter>:
{
 800ec68:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ec6e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ec70:	2900      	cmp	r1, #0
 800ec72:	d10b      	bne.n	800ec8c <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800ec74:	2000      	movs	r0, #0
 800ec76:	e02a      	b.n	800ecce <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800ec78:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	56c3      	ldrsb	r3, [r0, r3]
 800ec7e:	2b20      	cmp	r3, #32
 800ec80:	d0fa      	beq.n	800ec78 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d022      	beq.n	800eccc <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800ec86:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800ec88:	42a1      	cmp	r1, r4
 800ec8a:	d00d      	beq.n	800eca8 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	56c3      	ldrsb	r3, [r0, r3]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d01f      	beq.n	800ecd4 <FreeRTOS_CLIGetParameter+0x6c>
 800ec94:	2b20      	cmp	r3, #32
 800ec96:	d0ef      	beq.n	800ec78 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800ec98:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	56c3      	ldrsb	r3, [r0, r3]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d018      	beq.n	800ecd4 <FreeRTOS_CLIGetParameter+0x6c>
 800eca2:	2b20      	cmp	r3, #32
 800eca4:	d1f8      	bne.n	800ec98 <FreeRTOS_CLIGetParameter+0x30>
 800eca6:	e7e7      	b.n	800ec78 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eca8:	7803      	ldrb	r3, [r0, #0]
 800ecaa:	2120      	movs	r1, #32
 800ecac:	438b      	bics	r3, r1
 800ecae:	d00f      	beq.n	800ecd0 <FreeRTOS_CLIGetParameter+0x68>
 800ecb0:	0004      	movs	r4, r0
 800ecb2:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800ecb4:	6813      	ldr	r3, [r2, #0]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800ecba:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ecbc:	7821      	ldrb	r1, [r4, #0]
 800ecbe:	43a9      	bics	r1, r5
 800ecc0:	d1f8      	bne.n	800ecb4 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800ecc2:	1e5a      	subs	r2, r3, #1
 800ecc4:	4193      	sbcs	r3, r2
 800ecc6:	425b      	negs	r3, r3
 800ecc8:	4018      	ands	r0, r3
 800ecca:	e000      	b.n	800ecce <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800eccc:	2000      	movs	r0, #0
}
 800ecce:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	e7fc      	b.n	800ecce <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	56c3      	ldrsb	r3, [r0, r3]
 800ecd8:	e7d3      	b.n	800ec82 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800ecdc <prvHelpCommand>:
{
 800ecdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecde:	b083      	sub	sp, #12
 800ece0:	0004      	movs	r4, r0
 800ece2:	000d      	movs	r5, r1
 800ece4:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800ecea:	aa01      	add	r2, sp, #4
 800ecec:	2101      	movs	r1, #1
 800ecee:	f7ff ffbb 	bl	800ec68 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d027      	beq.n	800ed46 <prvHelpCommand+0x6a>
 800ecf6:	2206      	movs	r2, #6
 800ecf8:	4930      	ldr	r1, [pc, #192]	; (800edbc <prvHelpCommand+0xe0>)
 800ecfa:	f005 ff41 	bl	8014b80 <strncmp>
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d149      	bne.n	800ed96 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800ed02:	4b2f      	ldr	r3, [pc, #188]	; (800edc0 <prvHelpCommand+0xe4>)
 800ed04:	781b      	ldrb	r3, [r3, #0]
 800ed06:	2b07      	cmp	r3, #7
 800ed08:	d012      	beq.n	800ed30 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ed0a:	1c5f      	adds	r7, r3, #1
 800ed0c:	b2ff      	uxtb	r7, r7
 800ed0e:	4a2c      	ldr	r2, [pc, #176]	; (800edc0 <prvHelpCommand+0xe4>)
 800ed10:	7017      	strb	r7, [r2, #0]
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4a2b      	ldr	r2, [pc, #172]	; (800edc4 <prvHelpCommand+0xe8>)
 800ed16:	5899      	ldr	r1, [r3, r2]
 800ed18:	002a      	movs	r2, r5
 800ed1a:	0020      	movs	r0, r4
 800ed1c:	f005 ff41 	bl	8014ba2 <strncpy>
			xReturn = pdTRUE;
 800ed20:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800ed22:	2f07      	cmp	r7, #7
 800ed24:	d137      	bne.n	800ed96 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800ed26:	4b26      	ldr	r3, [pc, #152]	; (800edc0 <prvHelpCommand+0xe4>)
 800ed28:	2200      	movs	r2, #0
 800ed2a:	701a      	strb	r2, [r3, #0]
 800ed2c:	2600      	movs	r6, #0
 800ed2e:	e032      	b.n	800ed96 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ed30:	4b23      	ldr	r3, [pc, #140]	; (800edc0 <prvHelpCommand+0xe4>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	701a      	strb	r2, [r3, #0]
 800ed36:	4b23      	ldr	r3, [pc, #140]	; (800edc4 <prvHelpCommand+0xe8>)
 800ed38:	6819      	ldr	r1, [r3, #0]
 800ed3a:	002a      	movs	r2, r5
 800ed3c:	0020      	movs	r0, r4
 800ed3e:	f005 ff30 	bl	8014ba2 <strncpy>
			xReturn = pdTRUE;
 800ed42:	2601      	movs	r6, #1
 800ed44:	e027      	b.n	800ed96 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800ed46:	4b20      	ldr	r3, [pc, #128]	; (800edc8 <prvHelpCommand+0xec>)
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d026      	beq.n	800ed9c <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800ed4e:	4b1f      	ldr	r3, [pc, #124]	; (800edcc <prvHelpCommand+0xf0>)
 800ed50:	781a      	ldrb	r2, [r3, #0]
 800ed52:	4b1f      	ldr	r3, [pc, #124]	; (800edd0 <prvHelpCommand+0xf4>)
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d927      	bls.n	800edaa <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ed5a:	002a      	movs	r2, r5
 800ed5c:	3a08      	subs	r2, #8
 800ed5e:	4b1a      	ldr	r3, [pc, #104]	; (800edc8 <prvHelpCommand+0xec>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	6859      	ldr	r1, [r3, #4]
 800ed66:	0020      	movs	r0, r4
 800ed68:	3008      	adds	r0, #8
 800ed6a:	f005 ff1a 	bl	8014ba2 <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ed6e:	1c60      	adds	r0, r4, #1
 800ed70:	4918      	ldr	r1, [pc, #96]	; (800edd4 <prvHelpCommand+0xf8>)
 800ed72:	f005 fefd 	bl	8014b70 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ed76:	2328      	movs	r3, #40	; 0x28
 800ed78:	7023      	strb	r3, [r4, #0]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	71a3      	strb	r3, [r4, #6]
 800ed7e:	3b09      	subs	r3, #9
 800ed80:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800ed82:	4b11      	ldr	r3, [pc, #68]	; (800edc8 <prvHelpCommand+0xec>)
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	6856      	ldr	r6, [r2, #4]
 800ed88:	601e      	str	r6, [r3, #0]
		counter++;
 800ed8a:	4a10      	ldr	r2, [pc, #64]	; (800edcc <prvHelpCommand+0xf0>)
 800ed8c:	7813      	ldrb	r3, [r2, #0]
 800ed8e:	3301      	adds	r3, #1
 800ed90:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800ed92:	1e73      	subs	r3, r6, #1
 800ed94:	419e      	sbcs	r6, r3
}
 800ed96:	0030      	movs	r0, r6
 800ed98:	b003      	add	sp, #12
 800ed9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ed9c:	4b0a      	ldr	r3, [pc, #40]	; (800edc8 <prvHelpCommand+0xec>)
 800ed9e:	4a0e      	ldr	r2, [pc, #56]	; (800edd8 <prvHelpCommand+0xfc>)
 800eda0:	601a      	str	r2, [r3, #0]
			counter = 1;
 800eda2:	4b0a      	ldr	r3, [pc, #40]	; (800edcc <prvHelpCommand+0xf0>)
 800eda4:	2201      	movs	r2, #1
 800eda6:	701a      	strb	r2, [r3, #0]
 800eda8:	e7d1      	b.n	800ed4e <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800edaa:	4b07      	ldr	r3, [pc, #28]	; (800edc8 <prvHelpCommand+0xec>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	6859      	ldr	r1, [r3, #4]
 800edb2:	002a      	movs	r2, r5
 800edb4:	0020      	movs	r0, r4
 800edb6:	f005 fef4 	bl	8014ba2 <strncpy>
 800edba:	e7e2      	b.n	800ed82 <prvHelpCommand+0xa6>
 800edbc:	08019f98 	.word	0x08019f98
 800edc0:	200021dc 	.word	0x200021dc
 800edc4:	20000080 	.word	0x20000080
 800edc8:	200021d8 	.word	0x200021d8
 800edcc:	200021d0 	.word	0x200021d0
 800edd0:	20006dcc 	.word	0x20006dcc
 800edd4:	080192f0 	.word	0x080192f0
 800edd8:	20000108 	.word	0x20000108

0800eddc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eddc:	0003      	movs	r3, r0
 800edde:	3308      	adds	r3, #8
 800ede0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ede2:	2201      	movs	r2, #1
 800ede4:	4252      	negs	r2, r2
 800ede6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ede8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800edea:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800edec:	2300      	movs	r3, #0
 800edee:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800edf0:	4770      	bx	lr

0800edf2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800edf2:	2300      	movs	r3, #0
 800edf4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800edf6:	4770      	bx	lr

0800edf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800edf8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800edfa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800edfc:	689a      	ldr	r2, [r3, #8]
 800edfe:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ee00:	689a      	ldr	r2, [r3, #8]
 800ee02:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ee04:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ee06:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ee08:	6803      	ldr	r3, [r0, #0]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	6003      	str	r3, [r0, #0]
}
 800ee0e:	4770      	bx	lr

0800ee10 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ee10:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ee12:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee14:	0002      	movs	r2, r0
 800ee16:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800ee18:	1c63      	adds	r3, r4, #1
 800ee1a:	d102      	bne.n	800ee22 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800ee1c:	6902      	ldr	r2, [r0, #16]
 800ee1e:	e004      	b.n	800ee2a <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ee20:	001a      	movs	r2, r3
 800ee22:	6853      	ldr	r3, [r2, #4]
 800ee24:	681d      	ldr	r5, [r3, #0]
 800ee26:	42a5      	cmp	r5, r4
 800ee28:	d9fa      	bls.n	800ee20 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ee2a:	6853      	ldr	r3, [r2, #4]
 800ee2c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ee2e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ee30:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ee32:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ee34:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ee36:	6803      	ldr	r3, [r0, #0]
 800ee38:	3301      	adds	r3, #1
 800ee3a:	6003      	str	r3, [r0, #0]
}
 800ee3c:	bd30      	pop	{r4, r5, pc}

0800ee3e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ee3e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ee40:	6842      	ldr	r2, [r0, #4]
 800ee42:	6881      	ldr	r1, [r0, #8]
 800ee44:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ee46:	6882      	ldr	r2, [r0, #8]
 800ee48:	6841      	ldr	r1, [r0, #4]
 800ee4a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ee4c:	685a      	ldr	r2, [r3, #4]
 800ee4e:	4282      	cmp	r2, r0
 800ee50:	d005      	beq.n	800ee5e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ee52:	2200      	movs	r2, #0
 800ee54:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	1e50      	subs	r0, r2, #1
 800ee5a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ee5c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ee5e:	6882      	ldr	r2, [r0, #8]
 800ee60:	605a      	str	r2, [r3, #4]
 800ee62:	e7f6      	b.n	800ee52 <uxListRemove+0x14>

0800ee64 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	0004      	movs	r4, r0
 800ee68:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ee6c:	2a00      	cmp	r2, #0
 800ee6e:	d10d      	bne.n	800ee8c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ee70:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee72:	6823      	ldr	r3, [r4, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ee78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ee7a:	3301      	adds	r3, #1
 800ee7c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ee7e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ee80:	6860      	ldr	r0, [r4, #4]
 800ee82:	f001 f811 	bl	800fea8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ee86:	2300      	movs	r3, #0
 800ee88:	6063      	str	r3, [r4, #4]
 800ee8a:	e7f5      	b.n	800ee78 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ee8c:	2d00      	cmp	r5, #0
 800ee8e:	d10e      	bne.n	800eeae <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ee90:	6880      	ldr	r0, [r0, #8]
 800ee92:	f005 fbfc 	bl	801468e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ee96:	68a3      	ldr	r3, [r4, #8]
 800ee98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ee9a:	4694      	mov	ip, r2
 800ee9c:	4463      	add	r3, ip
 800ee9e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800eea0:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eea2:	6862      	ldr	r2, [r4, #4]
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d3e7      	bcc.n	800ee78 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	60a3      	str	r3, [r4, #8]
 800eeac:	e7e4      	b.n	800ee78 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eeae:	68c0      	ldr	r0, [r0, #12]
 800eeb0:	f005 fbed 	bl	801468e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800eeb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eeb6:	425a      	negs	r2, r3
 800eeb8:	68e3      	ldr	r3, [r4, #12]
 800eeba:	189b      	adds	r3, r3, r2
 800eebc:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eebe:	6821      	ldr	r1, [r4, #0]
 800eec0:	428b      	cmp	r3, r1
 800eec2:	d203      	bcs.n	800eecc <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800eec4:	6863      	ldr	r3, [r4, #4]
 800eec6:	469c      	mov	ip, r3
 800eec8:	4462      	add	r2, ip
 800eeca:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800eecc:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800eece:	2d02      	cmp	r5, #2
 800eed0:	d1d2      	bne.n	800ee78 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d0cf      	beq.n	800ee78 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800eed8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eeda:	3b01      	subs	r3, #1
 800eedc:	63a3      	str	r3, [r4, #56]	; 0x38
 800eede:	e7cb      	b.n	800ee78 <prvCopyDataToQueue+0x14>

0800eee0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800eee0:	b510      	push	{r4, lr}
 800eee2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800eee4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800eee6:	2a00      	cmp	r2, #0
 800eee8:	d00b      	beq.n	800ef02 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800eeea:	68c3      	ldr	r3, [r0, #12]
 800eeec:	189b      	adds	r3, r3, r2
 800eeee:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800eef0:	6841      	ldr	r1, [r0, #4]
 800eef2:	428b      	cmp	r3, r1
 800eef4:	d301      	bcc.n	800eefa <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800eef6:	6803      	ldr	r3, [r0, #0]
 800eef8:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800eefa:	68c1      	ldr	r1, [r0, #12]
 800eefc:	0020      	movs	r0, r4
 800eefe:	f005 fbc6 	bl	801468e <memcpy>
	}
}
 800ef02:	bd10      	pop	{r4, pc}

0800ef04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef08:	f001 fb8a 	bl	8010620 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ef0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	dd04      	ble.n	800ef1c <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef12:	0025      	movs	r5, r4
 800ef14:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d11f      	bne.n	800ef5c <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	425b      	negs	r3, r3
 800ef20:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800ef22:	f001 fb89 	bl	8010638 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ef26:	f001 fb7b 	bl	8010620 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ef2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	dd04      	ble.n	800ef3a <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef30:	0025      	movs	r5, r4
 800ef32:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef34:	6923      	ldr	r3, [r4, #16]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d121      	bne.n	800ef7e <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	425b      	negs	r3, r3
 800ef3e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ef40:	f001 fb7a 	bl	8010638 <vPortExitCritical>
}
 800ef44:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800ef46:	f000 ff5b 	bl	800fe00 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800ef4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef4c:	3b01      	subs	r3, #1
 800ef4e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800ef50:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	dde2      	ble.n	800ef1c <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d0df      	beq.n	800ef1c <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef5c:	0028      	movs	r0, r5
 800ef5e:	f000 fedd 	bl	800fd1c <xTaskRemoveFromEventList>
 800ef62:	2800      	cmp	r0, #0
 800ef64:	d0f1      	beq.n	800ef4a <prvUnlockQueue+0x46>
 800ef66:	e7ee      	b.n	800ef46 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800ef68:	f000 ff4a 	bl	800fe00 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800ef6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800ef72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dde0      	ble.n	800ef3a <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef78:	6923      	ldr	r3, [r4, #16]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d0dd      	beq.n	800ef3a <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef7e:	0028      	movs	r0, r5
 800ef80:	f000 fecc 	bl	800fd1c <xTaskRemoveFromEventList>
 800ef84:	2800      	cmp	r0, #0
 800ef86:	d0f1      	beq.n	800ef6c <prvUnlockQueue+0x68>
 800ef88:	e7ee      	b.n	800ef68 <prvUnlockQueue+0x64>

0800ef8a <xQueueGenericReset>:
{
 800ef8a:	b570      	push	{r4, r5, r6, lr}
 800ef8c:	0004      	movs	r4, r0
 800ef8e:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800ef90:	f001 fb46 	bl	8010620 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800ef94:	6822      	ldr	r2, [r4, #0]
 800ef96:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ef98:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ef9a:	434b      	muls	r3, r1
 800ef9c:	18d0      	adds	r0, r2, r3
 800ef9e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800efa0:	2000      	movs	r0, #0
 800efa2:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800efa4:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800efa6:	1a5b      	subs	r3, r3, r1
 800efa8:	18d3      	adds	r3, r2, r3
 800efaa:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800efac:	2301      	movs	r3, #1
 800efae:	425b      	negs	r3, r3
 800efb0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800efb2:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800efb4:	2d00      	cmp	r5, #0
 800efb6:	d10f      	bne.n	800efd8 <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d103      	bne.n	800efc6 <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800efbe:	f001 fb3b 	bl	8010638 <vPortExitCritical>
}
 800efc2:	2001      	movs	r0, #1
 800efc4:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800efc6:	0020      	movs	r0, r4
 800efc8:	3010      	adds	r0, #16
 800efca:	f000 fea7 	bl	800fd1c <xTaskRemoveFromEventList>
 800efce:	2801      	cmp	r0, #1
 800efd0:	d1f5      	bne.n	800efbe <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800efd2:	f001 fb19 	bl	8010608 <vPortYield>
 800efd6:	e7f2      	b.n	800efbe <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800efd8:	0020      	movs	r0, r4
 800efda:	3010      	adds	r0, #16
 800efdc:	f7ff fefe 	bl	800eddc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800efe0:	0020      	movs	r0, r4
 800efe2:	3024      	adds	r0, #36	; 0x24
 800efe4:	f7ff fefa 	bl	800eddc <vListInitialise>
 800efe8:	e7e9      	b.n	800efbe <xQueueGenericReset+0x34>

0800efea <xQueueGenericCreate>:
{
 800efea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efec:	0006      	movs	r6, r0
 800efee:	000d      	movs	r5, r1
 800eff0:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800eff2:	2900      	cmp	r1, #0
 800eff4:	d009      	beq.n	800f00a <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff6:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800eff8:	3055      	adds	r0, #85	; 0x55
 800effa:	f001 fb8d 	bl	8010718 <pvPortMalloc>
 800effe:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f000:	d011      	beq.n	800f026 <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800f002:	0003      	movs	r3, r0
 800f004:	3354      	adds	r3, #84	; 0x54
 800f006:	6003      	str	r3, [r0, #0]
 800f008:	e005      	b.n	800f016 <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f00a:	2054      	movs	r0, #84	; 0x54
 800f00c:	f001 fb84 	bl	8010718 <pvPortMalloc>
 800f010:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f012:	d008      	beq.n	800f026 <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f014:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800f016:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800f018:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f01a:	2101      	movs	r1, #1
 800f01c:	0020      	movs	r0, r4
 800f01e:	f7ff ffb4 	bl	800ef8a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800f022:	2350      	movs	r3, #80	; 0x50
 800f024:	54e7      	strb	r7, [r4, r3]
}
 800f026:	0020      	movs	r0, r4
 800f028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f02a <xQueueCreateCountingSemaphore>:
	{
 800f02a:	b510      	push	{r4, lr}
 800f02c:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f02e:	2202      	movs	r2, #2
 800f030:	2100      	movs	r1, #0
 800f032:	f7ff ffda 	bl	800efea <xQueueGenericCreate>
		if( xHandle != NULL )
 800f036:	2800      	cmp	r0, #0
 800f038:	d000      	beq.n	800f03c <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f03a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f03c:	bd10      	pop	{r4, pc}

0800f03e <xQueueGenericSend>:
{
 800f03e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f040:	46c6      	mov	lr, r8
 800f042:	b500      	push	{lr}
 800f044:	b084      	sub	sp, #16
 800f046:	0004      	movs	r4, r0
 800f048:	9100      	str	r1, [sp, #0]
 800f04a:	9201      	str	r2, [sp, #4]
 800f04c:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f04e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f050:	2300      	movs	r3, #0
 800f052:	4698      	mov	r8, r3
 800f054:	e030      	b.n	800f0b8 <xQueueGenericSend+0x7a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f056:	003a      	movs	r2, r7
 800f058:	9900      	ldr	r1, [sp, #0]
 800f05a:	0020      	movs	r0, r4
 800f05c:	f7ff ff02 	bl	800ee64 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f062:	2b00      	cmp	r3, #0
 800f064:	d108      	bne.n	800f078 <xQueueGenericSend+0x3a>
					else if( xYieldRequired != pdFALSE )
 800f066:	2800      	cmp	r0, #0
 800f068:	d10f      	bne.n	800f08a <xQueueGenericSend+0x4c>
				taskEXIT_CRITICAL();
 800f06a:	f001 fae5 	bl	8010638 <vPortExitCritical>
				return pdPASS;
 800f06e:	2001      	movs	r0, #1
}
 800f070:	b004      	add	sp, #16
 800f072:	bc04      	pop	{r2}
 800f074:	4690      	mov	r8, r2
 800f076:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f078:	0020      	movs	r0, r4
 800f07a:	3024      	adds	r0, #36	; 0x24
 800f07c:	f000 fe4e 	bl	800fd1c <xTaskRemoveFromEventList>
 800f080:	2801      	cmp	r0, #1
 800f082:	d1f2      	bne.n	800f06a <xQueueGenericSend+0x2c>
							queueYIELD_IF_USING_PREEMPTION();
 800f084:	f001 fac0 	bl	8010608 <vPortYield>
 800f088:	e7ef      	b.n	800f06a <xQueueGenericSend+0x2c>
						queueYIELD_IF_USING_PREEMPTION();
 800f08a:	f001 fabd 	bl	8010608 <vPortYield>
 800f08e:	e7ec      	b.n	800f06a <xQueueGenericSend+0x2c>
					taskEXIT_CRITICAL();
 800f090:	f001 fad2 	bl	8010638 <vPortExitCritical>
					return errQUEUE_FULL;
 800f094:	2000      	movs	r0, #0
 800f096:	e7eb      	b.n	800f070 <xQueueGenericSend+0x32>
					vTaskSetTimeOutState( &xTimeOut );
 800f098:	a802      	add	r0, sp, #8
 800f09a:	f000 fe7b 	bl	800fd94 <vTaskSetTimeOutState>
 800f09e:	e018      	b.n	800f0d2 <xQueueGenericSend+0x94>
		prvLockQueue( pxQueue );
 800f0a0:	4643      	mov	r3, r8
 800f0a2:	6463      	str	r3, [r4, #68]	; 0x44
 800f0a4:	e01e      	b.n	800f0e4 <xQueueGenericSend+0xa6>
 800f0a6:	4643      	mov	r3, r8
 800f0a8:	64a3      	str	r3, [r4, #72]	; 0x48
 800f0aa:	e01e      	b.n	800f0ea <xQueueGenericSend+0xac>
				prvUnlockQueue( pxQueue );
 800f0ac:	0020      	movs	r0, r4
 800f0ae:	f7ff ff29 	bl	800ef04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0b2:	f000 fc65 	bl	800f980 <xTaskResumeAll>
 800f0b6:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800f0b8:	f001 fab2 	bl	8010620 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f0bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f0be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f0c0:	4293      	cmp	r3, r2
 800f0c2:	d3c8      	bcc.n	800f056 <xQueueGenericSend+0x18>
 800f0c4:	2f02      	cmp	r7, #2
 800f0c6:	d0c6      	beq.n	800f056 <xQueueGenericSend+0x18>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f0c8:	9b01      	ldr	r3, [sp, #4]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d0e0      	beq.n	800f090 <xQueueGenericSend+0x52>
				else if( xEntryTimeSet == pdFALSE )
 800f0ce:	2d00      	cmp	r5, #0
 800f0d0:	d0e2      	beq.n	800f098 <xQueueGenericSend+0x5a>
		taskEXIT_CRITICAL();
 800f0d2:	f001 fab1 	bl	8010638 <vPortExitCritical>
		vTaskSuspendAll();
 800f0d6:	f000 fbaf 	bl	800f838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f0da:	f001 faa1 	bl	8010620 <vPortEnterCritical>
 800f0de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	d0dd      	beq.n	800f0a0 <xQueueGenericSend+0x62>
 800f0e4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	d0dd      	beq.n	800f0a6 <xQueueGenericSend+0x68>
 800f0ea:	f001 faa5 	bl	8010638 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0ee:	a901      	add	r1, sp, #4
 800f0f0:	a802      	add	r0, sp, #8
 800f0f2:	f000 fe5b 	bl	800fdac <xTaskCheckForTimeOut>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	d116      	bne.n	800f128 <xQueueGenericSend+0xea>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f0fa:	f001 fa91 	bl	8010620 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f0fe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800f100:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f102:	f001 fa99 	bl	8010638 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f106:	42ae      	cmp	r6, r5
 800f108:	d1d0      	bne.n	800f0ac <xQueueGenericSend+0x6e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f10a:	0020      	movs	r0, r4
 800f10c:	3010      	adds	r0, #16
 800f10e:	9901      	ldr	r1, [sp, #4]
 800f110:	f000 fdce 	bl	800fcb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f114:	0020      	movs	r0, r4
 800f116:	f7ff fef5 	bl	800ef04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f11a:	f000 fc31 	bl	800f980 <xTaskResumeAll>
 800f11e:	2800      	cmp	r0, #0
 800f120:	d1c9      	bne.n	800f0b6 <xQueueGenericSend+0x78>
					portYIELD_WITHIN_API();
 800f122:	f001 fa71 	bl	8010608 <vPortYield>
 800f126:	e7c6      	b.n	800f0b6 <xQueueGenericSend+0x78>
			prvUnlockQueue( pxQueue );
 800f128:	0020      	movs	r0, r4
 800f12a:	f7ff feeb 	bl	800ef04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f12e:	f000 fc27 	bl	800f980 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f132:	2000      	movs	r0, #0
 800f134:	e79c      	b.n	800f070 <xQueueGenericSend+0x32>

0800f136 <xQueueGenericSendFromISR>:
{
 800f136:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f138:	b083      	sub	sp, #12
 800f13a:	0007      	movs	r7, r0
 800f13c:	9100      	str	r1, [sp, #0]
 800f13e:	9201      	str	r2, [sp, #4]
 800f140:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f142:	f001 fa83 	bl	801064c <ulSetInterruptMaskFromISR>
 800f146:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d308      	bcc.n	800f162 <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800f150:	2400      	movs	r4, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f152:	2d02      	cmp	r5, #2
 800f154:	d005      	beq.n	800f162 <xQueueGenericSendFromISR+0x2c>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f156:	0030      	movs	r0, r6
 800f158:	f001 fa7d 	bl	8010656 <vClearInterruptMaskFromISR>
}
 800f15c:	0020      	movs	r0, r4
 800f15e:	b003      	add	sp, #12
 800f160:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f162:	002a      	movs	r2, r5
 800f164:	9900      	ldr	r1, [sp, #0]
 800f166:	0038      	movs	r0, r7
 800f168:	f7ff fe7c 	bl	800ee64 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f16e:	3301      	adds	r3, #1
 800f170:	d004      	beq.n	800f17c <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800f172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f174:	3301      	adds	r3, #1
 800f176:	64bb      	str	r3, [r7, #72]	; 0x48
			xReturn = pdPASS;
 800f178:	2401      	movs	r4, #1
 800f17a:	e7ec      	b.n	800f156 <xQueueGenericSendFromISR+0x20>
 800f17c:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f180:	2b00      	cmp	r3, #0
 800f182:	d0e8      	beq.n	800f156 <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f184:	0038      	movs	r0, r7
 800f186:	3024      	adds	r0, #36	; 0x24
 800f188:	f000 fdc8 	bl	800fd1c <xTaskRemoveFromEventList>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d0e2      	beq.n	800f156 <xQueueGenericSendFromISR+0x20>
							if( pxHigherPriorityTaskWoken != NULL )
 800f190:	9a01      	ldr	r2, [sp, #4]
 800f192:	2a00      	cmp	r2, #0
 800f194:	d002      	beq.n	800f19c <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f196:	2301      	movs	r3, #1
 800f198:	6013      	str	r3, [r2, #0]
 800f19a:	e7dc      	b.n	800f156 <xQueueGenericSendFromISR+0x20>
			xReturn = pdPASS;
 800f19c:	2401      	movs	r4, #1
 800f19e:	e7da      	b.n	800f156 <xQueueGenericSendFromISR+0x20>

0800f1a0 <xQueueGiveFromISR>:
{
 800f1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1a2:	0004      	movs	r4, r0
 800f1a4:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1a6:	f001 fa51 	bl	801064c <ulSetInterruptMaskFromISR>
 800f1aa:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f1ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f1ae:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f1b0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d209      	bcs.n	800f1ca <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800f1b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f1bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1be:	3301      	adds	r3, #1
 800f1c0:	d008      	beq.n	800f1d4 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800f1c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f1c8:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f1ca:	0030      	movs	r0, r6
 800f1cc:	f001 fa43 	bl	8010656 <vClearInterruptMaskFromISR>
}
 800f1d0:	0028      	movs	r0, r5
 800f1d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f1d4:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d0f6      	beq.n	800f1ca <xQueueGiveFromISR+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f1dc:	0020      	movs	r0, r4
 800f1de:	3024      	adds	r0, #36	; 0x24
 800f1e0:	f000 fd9c 	bl	800fd1c <xTaskRemoveFromEventList>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	d0f0      	beq.n	800f1ca <xQueueGiveFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
 800f1e8:	2f00      	cmp	r7, #0
 800f1ea:	d002      	beq.n	800f1f2 <xQueueGiveFromISR+0x52>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	603b      	str	r3, [r7, #0]
 800f1f0:	e7eb      	b.n	800f1ca <xQueueGiveFromISR+0x2a>
			xReturn = pdPASS;
 800f1f2:	2501      	movs	r5, #1
 800f1f4:	e7e9      	b.n	800f1ca <xQueueGiveFromISR+0x2a>

0800f1f6 <xQueueGenericReceive>:
{
 800f1f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1f8:	b085      	sub	sp, #20
 800f1fa:	0004      	movs	r4, r0
 800f1fc:	9100      	str	r1, [sp, #0]
 800f1fe:	9201      	str	r2, [sp, #4]
 800f200:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800f202:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800f204:	2600      	movs	r6, #0
 800f206:	e048      	b.n	800f29a <xQueueGenericReceive+0xa4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f208:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f20a:	9900      	ldr	r1, [sp, #0]
 800f20c:	0020      	movs	r0, r4
 800f20e:	f7ff fe67 	bl	800eee0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f212:	2d00      	cmp	r5, #0
 800f214:	d11a      	bne.n	800f24c <xQueueGenericReceive+0x56>
					--( pxQueue->uxMessagesWaiting );
 800f216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f218:	3b01      	subs	r3, #1
 800f21a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f21c:	6823      	ldr	r3, [r4, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d007      	beq.n	800f232 <xQueueGenericReceive+0x3c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f222:	6923      	ldr	r3, [r4, #16]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d108      	bne.n	800f23a <xQueueGenericReceive+0x44>
				taskEXIT_CRITICAL();
 800f228:	f001 fa06 	bl	8010638 <vPortExitCritical>
				return pdPASS;
 800f22c:	2001      	movs	r0, #1
}
 800f22e:	b005      	add	sp, #20
 800f230:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f232:	f000 ff21 	bl	8010078 <pvTaskIncrementMutexHeldCount>
 800f236:	6060      	str	r0, [r4, #4]
 800f238:	e7f3      	b.n	800f222 <xQueueGenericReceive+0x2c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f23a:	0020      	movs	r0, r4
 800f23c:	3010      	adds	r0, #16
 800f23e:	f000 fd6d 	bl	800fd1c <xTaskRemoveFromEventList>
 800f242:	2801      	cmp	r0, #1
 800f244:	d1f0      	bne.n	800f228 <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800f246:	f001 f9df 	bl	8010608 <vPortYield>
 800f24a:	e7ed      	b.n	800f228 <xQueueGenericReceive+0x32>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f24c:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f250:	2b00      	cmp	r3, #0
 800f252:	d0e9      	beq.n	800f228 <xQueueGenericReceive+0x32>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f254:	0020      	movs	r0, r4
 800f256:	3024      	adds	r0, #36	; 0x24
 800f258:	f000 fd60 	bl	800fd1c <xTaskRemoveFromEventList>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	d0e3      	beq.n	800f228 <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800f260:	f001 f9d2 	bl	8010608 <vPortYield>
 800f264:	e7e0      	b.n	800f228 <xQueueGenericReceive+0x32>
					taskEXIT_CRITICAL();
 800f266:	f001 f9e7 	bl	8010638 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f26a:	2000      	movs	r0, #0
 800f26c:	e7df      	b.n	800f22e <xQueueGenericReceive+0x38>
					vTaskSetTimeOutState( &xTimeOut );
 800f26e:	a802      	add	r0, sp, #8
 800f270:	f000 fd90 	bl	800fd94 <vTaskSetTimeOutState>
 800f274:	e01b      	b.n	800f2ae <xQueueGenericReceive+0xb8>
		prvLockQueue( pxQueue );
 800f276:	6466      	str	r6, [r4, #68]	; 0x44
 800f278:	e022      	b.n	800f2c0 <xQueueGenericReceive+0xca>
 800f27a:	64a6      	str	r6, [r4, #72]	; 0x48
 800f27c:	e023      	b.n	800f2c6 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800f27e:	f001 f9cf 	bl	8010620 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f282:	6860      	ldr	r0, [r4, #4]
 800f284:	f000 fdd2 	bl	800fe2c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f288:	f001 f9d6 	bl	8010638 <vPortExitCritical>
 800f28c:	e02d      	b.n	800f2ea <xQueueGenericReceive+0xf4>
				prvUnlockQueue( pxQueue );
 800f28e:	0020      	movs	r0, r4
 800f290:	f7ff fe38 	bl	800ef04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f294:	f000 fb74 	bl	800f980 <xTaskResumeAll>
 800f298:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800f29a:	f001 f9c1 	bl	8010620 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f29e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d1b1      	bne.n	800f208 <xQueueGenericReceive+0x12>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f2a4:	9b01      	ldr	r3, [sp, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0dd      	beq.n	800f266 <xQueueGenericReceive+0x70>
				else if( xEntryTimeSet == pdFALSE )
 800f2aa:	2f00      	cmp	r7, #0
 800f2ac:	d0df      	beq.n	800f26e <xQueueGenericReceive+0x78>
		taskEXIT_CRITICAL();
 800f2ae:	f001 f9c3 	bl	8010638 <vPortExitCritical>
		vTaskSuspendAll();
 800f2b2:	f000 fac1 	bl	800f838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2b6:	f001 f9b3 	bl	8010620 <vPortEnterCritical>
 800f2ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f2bc:	3301      	adds	r3, #1
 800f2be:	d0da      	beq.n	800f276 <xQueueGenericReceive+0x80>
 800f2c0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	d0d9      	beq.n	800f27a <xQueueGenericReceive+0x84>
 800f2c6:	f001 f9b7 	bl	8010638 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2ca:	a901      	add	r1, sp, #4
 800f2cc:	a802      	add	r0, sp, #8
 800f2ce:	f000 fd6d 	bl	800fdac <xTaskCheckForTimeOut>
 800f2d2:	2800      	cmp	r0, #0
 800f2d4:	d118      	bne.n	800f308 <xQueueGenericReceive+0x112>
	taskENTER_CRITICAL();
 800f2d6:	f001 f9a3 	bl	8010620 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f2da:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f2dc:	f001 f9ac 	bl	8010638 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2e0:	2f00      	cmp	r7, #0
 800f2e2:	d1d4      	bne.n	800f28e <xQueueGenericReceive+0x98>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f2e4:	6823      	ldr	r3, [r4, #0]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d0c9      	beq.n	800f27e <xQueueGenericReceive+0x88>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f2ea:	0020      	movs	r0, r4
 800f2ec:	3024      	adds	r0, #36	; 0x24
 800f2ee:	9901      	ldr	r1, [sp, #4]
 800f2f0:	f000 fcde 	bl	800fcb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f2f4:	0020      	movs	r0, r4
 800f2f6:	f7ff fe05 	bl	800ef04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f2fa:	f000 fb41 	bl	800f980 <xTaskResumeAll>
 800f2fe:	2800      	cmp	r0, #0
 800f300:	d1ca      	bne.n	800f298 <xQueueGenericReceive+0xa2>
					portYIELD_WITHIN_API();
 800f302:	f001 f981 	bl	8010608 <vPortYield>
 800f306:	e7c7      	b.n	800f298 <xQueueGenericReceive+0xa2>
			prvUnlockQueue( pxQueue );
 800f308:	0020      	movs	r0, r4
 800f30a:	f7ff fdfb 	bl	800ef04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f30e:	f000 fb37 	bl	800f980 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f312:	2000      	movs	r0, #0
 800f314:	e78b      	b.n	800f22e <xQueueGenericReceive+0x38>

0800f316 <xQueueReceiveFromISR>:
{
 800f316:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f318:	b083      	sub	sp, #12
 800f31a:	0006      	movs	r6, r0
 800f31c:	9101      	str	r1, [sp, #4]
 800f31e:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f320:	f001 f994 	bl	801064c <ulSetInterruptMaskFromISR>
 800f324:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f326:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			xReturn = pdFAIL;
 800f328:	2400      	movs	r4, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d105      	bne.n	800f33a <xQueueReceiveFromISR+0x24>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f32e:	0028      	movs	r0, r5
 800f330:	f001 f991 	bl	8010656 <vClearInterruptMaskFromISR>
}
 800f334:	0020      	movs	r0, r4
 800f336:	b003      	add	sp, #12
 800f338:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f33a:	9901      	ldr	r1, [sp, #4]
 800f33c:	0030      	movs	r0, r6
 800f33e:	f7ff fdcf 	bl	800eee0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f342:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800f344:	3b01      	subs	r3, #1
 800f346:	63b3      	str	r3, [r6, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f348:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f34a:	3301      	adds	r3, #1
 800f34c:	d004      	beq.n	800f358 <xQueueReceiveFromISR+0x42>
				++( pxQueue->xRxLock );
 800f34e:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800f350:	3301      	adds	r3, #1
 800f352:	6473      	str	r3, [r6, #68]	; 0x44
			xReturn = pdPASS;
 800f354:	2401      	movs	r4, #1
 800f356:	e7ea      	b.n	800f32e <xQueueReceiveFromISR+0x18>
 800f358:	3401      	adds	r4, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f35a:	6933      	ldr	r3, [r6, #16]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d0e6      	beq.n	800f32e <xQueueReceiveFromISR+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f360:	0030      	movs	r0, r6
 800f362:	3010      	adds	r0, #16
 800f364:	f000 fcda 	bl	800fd1c <xTaskRemoveFromEventList>
 800f368:	2800      	cmp	r0, #0
 800f36a:	d0e0      	beq.n	800f32e <xQueueReceiveFromISR+0x18>
						if( pxHigherPriorityTaskWoken != NULL )
 800f36c:	2f00      	cmp	r7, #0
 800f36e:	d002      	beq.n	800f376 <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f370:	2301      	movs	r3, #1
 800f372:	603b      	str	r3, [r7, #0]
 800f374:	e7db      	b.n	800f32e <xQueueReceiveFromISR+0x18>
			xReturn = pdPASS;
 800f376:	2401      	movs	r4, #1
 800f378:	e7d9      	b.n	800f32e <xQueueReceiveFromISR+0x18>
	...

0800f37c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f37c:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f37e:	4b0a      	ldr	r3, [pc, #40]	; (800f3a8 <vQueueAddToRegistry+0x2c>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d009      	beq.n	800f39a <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f386:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f388:	4c07      	ldr	r4, [pc, #28]	; (800f3a8 <vQueueAddToRegistry+0x2c>)
 800f38a:	00da      	lsls	r2, r3, #3
 800f38c:	58a2      	ldr	r2, [r4, r2]
 800f38e:	2a00      	cmp	r2, #0
 800f390:	d004      	beq.n	800f39c <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f392:	3301      	adds	r3, #1
 800f394:	2b08      	cmp	r3, #8
 800f396:	d1f8      	bne.n	800f38a <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f398:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f39a:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f39c:	4a02      	ldr	r2, [pc, #8]	; (800f3a8 <vQueueAddToRegistry+0x2c>)
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f3a2:	18d3      	adds	r3, r2, r3
 800f3a4:	6058      	str	r0, [r3, #4]
				break;
 800f3a6:	e7f7      	b.n	800f398 <vQueueAddToRegistry+0x1c>
 800f3a8:	2000738c 	.word	0x2000738c

0800f3ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	0004      	movs	r4, r0
 800f3b0:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f3b2:	f001 f935 	bl	8010620 <vPortEnterCritical>
 800f3b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	d00b      	beq.n	800f3d4 <vQueueWaitForMessageRestricted+0x28>
 800f3bc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f3be:	3301      	adds	r3, #1
 800f3c0:	d00b      	beq.n	800f3da <vQueueWaitForMessageRestricted+0x2e>
 800f3c2:	f001 f939 	bl	8010638 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f3c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d009      	beq.n	800f3e0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f3cc:	0020      	movs	r0, r4
 800f3ce:	f7ff fd99 	bl	800ef04 <prvUnlockQueue>
	}
 800f3d2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	6463      	str	r3, [r4, #68]	; 0x44
 800f3d8:	e7f0      	b.n	800f3bc <vQueueWaitForMessageRestricted+0x10>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	64a3      	str	r3, [r4, #72]	; 0x48
 800f3de:	e7f0      	b.n	800f3c2 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f3e0:	0020      	movs	r0, r4
 800f3e2:	3024      	adds	r0, #36	; 0x24
 800f3e4:	0029      	movs	r1, r5
 800f3e6:	f000 fc83 	bl	800fcf0 <vTaskPlaceOnEventListRestricted>
 800f3ea:	e7ef      	b.n	800f3cc <vQueueWaitForMessageRestricted+0x20>

0800f3ec <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f3ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3ee:	46d6      	mov	lr, sl
 800f3f0:	464f      	mov	r7, r9
 800f3f2:	4646      	mov	r6, r8
 800f3f4:	b5c0      	push	{r6, r7, lr}
 800f3f6:	0006      	movs	r6, r0
 800f3f8:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f3fa:	6808      	ldr	r0, [r1, #0]
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	d044      	beq.n	800f48a <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f400:	684b      	ldr	r3, [r1, #4]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	604b      	str	r3, [r1, #4]
 800f406:	2208      	movs	r2, #8
 800f408:	4690      	mov	r8, r2
 800f40a:	4488      	add	r8, r1
 800f40c:	4543      	cmp	r3, r8
 800f40e:	d006      	beq.n	800f41e <prvListTaskWithinSingleList+0x32>
 800f410:	684b      	ldr	r3, [r1, #4]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800f416:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f418:	2302      	movs	r3, #2
 800f41a:	469a      	mov	sl, r3
 800f41c:	e018      	b.n	800f450 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f41e:	68cb      	ldr	r3, [r1, #12]
 800f420:	604b      	str	r3, [r1, #4]
 800f422:	e7f5      	b.n	800f410 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f424:	68cb      	ldr	r3, [r1, #12]
 800f426:	604b      	str	r3, [r1, #4]
 800f428:	e017      	b.n	800f45a <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f42a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f42c:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f42e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f430:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f432:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f434:	783b      	ldrb	r3, [r7, #0]
 800f436:	2ba5      	cmp	r3, #165	; 0xa5
 800f438:	d125      	bne.n	800f486 <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800f43a:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f43c:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f43e:	5cfc      	ldrb	r4, [r7, r3]
 800f440:	2ca5      	cmp	r4, #165	; 0xa5
 800f442:	d0fb      	beq.n	800f43c <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f444:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f446:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800f448:	3001      	adds	r0, #1
 800f44a:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800f44c:	45a9      	cmp	r9, r5
 800f44e:	d01c      	beq.n	800f48a <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f450:	684b      	ldr	r3, [r1, #4]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	604b      	str	r3, [r1, #4]
 800f456:	4598      	cmp	r8, r3
 800f458:	d0e4      	beq.n	800f424 <prvListTaskWithinSingleList+0x38>
 800f45a:	684b      	ldr	r3, [r1, #4]
 800f45c:	68dd      	ldr	r5, [r3, #12]
 800f45e:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f460:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f462:	002b      	movs	r3, r5
 800f464:	3334      	adds	r3, #52	; 0x34
 800f466:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f468:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f46a:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f46c:	4663      	mov	r3, ip
 800f46e:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f470:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f472:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800f474:	4663      	mov	r3, ip
 800f476:	2b03      	cmp	r3, #3
 800f478:	d1d7      	bne.n	800f42a <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f47a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d0d4      	beq.n	800f42a <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f480:	4653      	mov	r3, sl
 800f482:	7333      	strb	r3, [r6, #12]
 800f484:	e7d1      	b.n	800f42a <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800f486:	2300      	movs	r3, #0
 800f488:	e7dc      	b.n	800f444 <prvListTaskWithinSingleList+0x58>
	}
 800f48a:	bc1c      	pop	{r2, r3, r4}
 800f48c:	4690      	mov	r8, r2
 800f48e:	4699      	mov	r9, r3
 800f490:	46a2      	mov	sl, r4
 800f492:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f494 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f494:	4b08      	ldr	r3, [pc, #32]	; (800f4b8 <prvResetNextTaskUnblockTime+0x24>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d007      	beq.n	800f4ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f49e:	4b06      	ldr	r3, [pc, #24]	; (800f4b8 <prvResetNextTaskUnblockTime+0x24>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f4a4:	68db      	ldr	r3, [r3, #12]
 800f4a6:	685a      	ldr	r2, [r3, #4]
 800f4a8:	4b04      	ldr	r3, [pc, #16]	; (800f4bc <prvResetNextTaskUnblockTime+0x28>)
 800f4aa:	601a      	str	r2, [r3, #0]
	}
}
 800f4ac:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800f4ae:	4b03      	ldr	r3, [pc, #12]	; (800f4bc <prvResetNextTaskUnblockTime+0x28>)
 800f4b0:	2201      	movs	r2, #1
 800f4b2:	4252      	negs	r2, r2
 800f4b4:	601a      	str	r2, [r3, #0]
 800f4b6:	e7f9      	b.n	800f4ac <prvResetNextTaskUnblockTime+0x18>
 800f4b8:	200021e4 	.word	0x200021e4
 800f4bc:	20000110 	.word	0x20000110

0800f4c0 <prvAddCurrentTaskToDelayedList>:
{
 800f4c0:	b510      	push	{r4, lr}
 800f4c2:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f4c4:	4b0e      	ldr	r3, [pc, #56]	; (800f500 <prvAddCurrentTaskToDelayedList+0x40>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f4ca:	4b0e      	ldr	r3, [pc, #56]	; (800f504 <prvAddCurrentTaskToDelayedList+0x44>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	4283      	cmp	r3, r0
 800f4d0:	d80d      	bhi.n	800f4ee <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f4d2:	4b0d      	ldr	r3, [pc, #52]	; (800f508 <prvAddCurrentTaskToDelayedList+0x48>)
 800f4d4:	6818      	ldr	r0, [r3, #0]
 800f4d6:	4b0a      	ldr	r3, [pc, #40]	; (800f500 <prvAddCurrentTaskToDelayedList+0x40>)
 800f4d8:	6819      	ldr	r1, [r3, #0]
 800f4da:	3104      	adds	r1, #4
 800f4dc:	f7ff fc98 	bl	800ee10 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f4e0:	4b0a      	ldr	r3, [pc, #40]	; (800f50c <prvAddCurrentTaskToDelayedList+0x4c>)
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	42a3      	cmp	r3, r4
 800f4e6:	d909      	bls.n	800f4fc <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800f4e8:	4b08      	ldr	r3, [pc, #32]	; (800f50c <prvAddCurrentTaskToDelayedList+0x4c>)
 800f4ea:	601c      	str	r4, [r3, #0]
}
 800f4ec:	e006      	b.n	800f4fc <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f4ee:	4b08      	ldr	r3, [pc, #32]	; (800f510 <prvAddCurrentTaskToDelayedList+0x50>)
 800f4f0:	6818      	ldr	r0, [r3, #0]
 800f4f2:	4b03      	ldr	r3, [pc, #12]	; (800f500 <prvAddCurrentTaskToDelayedList+0x40>)
 800f4f4:	6819      	ldr	r1, [r3, #0]
 800f4f6:	3104      	adds	r1, #4
 800f4f8:	f7ff fc8a 	bl	800ee10 <vListInsert>
}
 800f4fc:	bd10      	pop	{r4, pc}
 800f4fe:	46c0      	nop			; (mov r8, r8)
 800f500:	200021e0 	.word	0x200021e0
 800f504:	20002300 	.word	0x20002300
 800f508:	200021e4 	.word	0x200021e4
 800f50c:	20000110 	.word	0x20000110
 800f510:	200021e8 	.word	0x200021e8

0800f514 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f514:	b510      	push	{r4, lr}
 800f516:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f518:	f005 fb2a 	bl	8014b70 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f51c:	0020      	movs	r0, r4
 800f51e:	f7f0 fdfb 	bl	8000118 <strlen>
 800f522:	0003      	movs	r3, r0
 800f524:	280b      	cmp	r0, #11
 800f526:	dc08      	bgt.n	800f53a <prvWriteNameToBuffer+0x26>
 800f528:	1820      	adds	r0, r4, r0
 800f52a:	0022      	movs	r2, r4
 800f52c:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800f52e:	2320      	movs	r3, #32
 800f530:	7003      	strb	r3, [r0, #0]
 800f532:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f534:	4290      	cmp	r0, r2
 800f536:	d1fb      	bne.n	800f530 <prvWriteNameToBuffer+0x1c>
 800f538:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f53a:	18e0      	adds	r0, r4, r3
 800f53c:	2300      	movs	r3, #0
 800f53e:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f540:	bd10      	pop	{r4, pc}
	...

0800f544 <xTaskGenericCreate>:
{
 800f544:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f546:	46c6      	mov	lr, r8
 800f548:	b500      	push	{lr}
 800f54a:	b082      	sub	sp, #8
 800f54c:	9000      	str	r0, [sp, #0]
 800f54e:	000c      	movs	r4, r1
 800f550:	0015      	movs	r5, r2
 800f552:	9301      	str	r3, [sp, #4]
 800f554:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f556:	2f00      	cmp	r7, #0
 800f558:	d064      	beq.n	800f624 <xTaskGenericCreate+0xe0>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f55a:	2060      	movs	r0, #96	; 0x60
 800f55c:	f001 f8dc 	bl	8010718 <pvPortMalloc>
 800f560:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800f562:	d067      	beq.n	800f634 <xTaskGenericCreate+0xf0>
				pxNewTCB->pxStack = pxStack;
 800f564:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f566:	00aa      	lsls	r2, r5, #2
 800f568:	21a5      	movs	r1, #165	; 0xa5
 800f56a:	0038      	movs	r0, r7
 800f56c:	f005 f898 	bl	80146a0 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f570:	4b5a      	ldr	r3, [pc, #360]	; (800f6dc <xTaskGenericCreate+0x198>)
 800f572:	18eb      	adds	r3, r5, r3
 800f574:	009b      	lsls	r3, r3, #2
 800f576:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800f578:	4694      	mov	ip, r2
 800f57a:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f57c:	2207      	movs	r2, #7
 800f57e:	4393      	bics	r3, r2
 800f580:	4698      	mov	r8, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f582:	7822      	ldrb	r2, [r4, #0]
 800f584:	2334      	movs	r3, #52	; 0x34
 800f586:	54f2      	strb	r2, [r6, r3]
		if( pcName[ x ] == 0x00 )
 800f588:	7823      	ldrb	r3, [r4, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d00d      	beq.n	800f5aa <xTaskGenericCreate+0x66>
 800f58e:	1c61      	adds	r1, r4, #1
 800f590:	0033      	movs	r3, r6
 800f592:	3335      	adds	r3, #53	; 0x35
 800f594:	0030      	movs	r0, r6
 800f596:	3041      	adds	r0, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f598:	780a      	ldrb	r2, [r1, #0]
 800f59a:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800f59c:	780a      	ldrb	r2, [r1, #0]
 800f59e:	2a00      	cmp	r2, #0
 800f5a0:	d003      	beq.n	800f5aa <xTaskGenericCreate+0x66>
 800f5a2:	3101      	adds	r1, #1
 800f5a4:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f5a6:	4283      	cmp	r3, r0
 800f5a8:	d1f6      	bne.n	800f598 <xTaskGenericCreate+0x54>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f5aa:	2340      	movs	r3, #64	; 0x40
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	54f2      	strb	r2, [r6, r3]
 800f5b0:	9d08      	ldr	r5, [sp, #32]
 800f5b2:	2d06      	cmp	r5, #6
 800f5b4:	d900      	bls.n	800f5b8 <xTaskGenericCreate+0x74>
 800f5b6:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800f5b8:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f5ba:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f5bc:	2400      	movs	r4, #0
 800f5be:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f5c0:	1d37      	adds	r7, r6, #4
 800f5c2:	0038      	movs	r0, r7
 800f5c4:	f7ff fc15 	bl	800edf2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f5c8:	0030      	movs	r0, r6
 800f5ca:	3018      	adds	r0, #24
 800f5cc:	f7ff fc11 	bl	800edf2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f5d0:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5d2:	2307      	movs	r3, #7
 800f5d4:	1b5b      	subs	r3, r3, r5
 800f5d6:	61b3      	str	r3, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f5d8:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f5da:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f5dc:	65b4      	str	r4, [r6, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f5de:	235c      	movs	r3, #92	; 0x5c
 800f5e0:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f5e2:	9a01      	ldr	r2, [sp, #4]
 800f5e4:	9900      	ldr	r1, [sp, #0]
 800f5e6:	4640      	mov	r0, r8
 800f5e8:	f000 ffd2 	bl	8010590 <pxPortInitialiseStack>
 800f5ec:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d000      	beq.n	800f5f6 <xTaskGenericCreate+0xb2>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f5f4:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800f5f6:	f001 f813 	bl	8010620 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f5fa:	4a39      	ldr	r2, [pc, #228]	; (800f6e0 <xTaskGenericCreate+0x19c>)
 800f5fc:	6813      	ldr	r3, [r2, #0]
 800f5fe:	3301      	adds	r3, #1
 800f600:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f602:	4b38      	ldr	r3, [pc, #224]	; (800f6e4 <xTaskGenericCreate+0x1a0>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d01a      	beq.n	800f640 <xTaskGenericCreate+0xfc>
				if( xSchedulerRunning == pdFALSE )
 800f60a:	4b37      	ldr	r3, [pc, #220]	; (800f6e8 <xTaskGenericCreate+0x1a4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d11b      	bne.n	800f64a <xTaskGenericCreate+0x106>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f612:	4b34      	ldr	r3, [pc, #208]	; (800f6e4 <xTaskGenericCreate+0x1a0>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f618:	9a08      	ldr	r2, [sp, #32]
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d815      	bhi.n	800f64a <xTaskGenericCreate+0x106>
						pxCurrentTCB = pxNewTCB;
 800f61e:	4b31      	ldr	r3, [pc, #196]	; (800f6e4 <xTaskGenericCreate+0x1a0>)
 800f620:	601e      	str	r6, [r3, #0]
 800f622:	e012      	b.n	800f64a <xTaskGenericCreate+0x106>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f624:	0090      	lsls	r0, r2, #2
 800f626:	f001 f877 	bl	8010718 <pvPortMalloc>
 800f62a:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800f62c:	d195      	bne.n	800f55a <xTaskGenericCreate+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f62e:	2001      	movs	r0, #1
 800f630:	4240      	negs	r0, r0
 800f632:	e02b      	b.n	800f68c <xTaskGenericCreate+0x148>
				vPortFree( pxStack );
 800f634:	0038      	movs	r0, r7
 800f636:	f001 f8fd 	bl	8010834 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f63a:	2001      	movs	r0, #1
 800f63c:	4240      	negs	r0, r0
 800f63e:	e025      	b.n	800f68c <xTaskGenericCreate+0x148>
				pxCurrentTCB =  pxNewTCB;
 800f640:	4b28      	ldr	r3, [pc, #160]	; (800f6e4 <xTaskGenericCreate+0x1a0>)
 800f642:	601e      	str	r6, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f644:	6813      	ldr	r3, [r2, #0]
 800f646:	2b01      	cmp	r3, #1
 800f648:	d024      	beq.n	800f694 <xTaskGenericCreate+0x150>
			uxTaskNumber++;
 800f64a:	4a28      	ldr	r2, [pc, #160]	; (800f6ec <xTaskGenericCreate+0x1a8>)
 800f64c:	6813      	ldr	r3, [r2, #0]
 800f64e:	3301      	adds	r3, #1
 800f650:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f652:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f654:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f656:	4a26      	ldr	r2, [pc, #152]	; (800f6f0 <xTaskGenericCreate+0x1ac>)
 800f658:	6812      	ldr	r2, [r2, #0]
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d901      	bls.n	800f662 <xTaskGenericCreate+0x11e>
 800f65e:	4a24      	ldr	r2, [pc, #144]	; (800f6f0 <xTaskGenericCreate+0x1ac>)
 800f660:	6013      	str	r3, [r2, #0]
 800f662:	0098      	lsls	r0, r3, #2
 800f664:	18c0      	adds	r0, r0, r3
 800f666:	0080      	lsls	r0, r0, #2
 800f668:	4b22      	ldr	r3, [pc, #136]	; (800f6f4 <xTaskGenericCreate+0x1b0>)
 800f66a:	18c0      	adds	r0, r0, r3
 800f66c:	0039      	movs	r1, r7
 800f66e:	f7ff fbc3 	bl	800edf8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f672:	f000 ffe1 	bl	8010638 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f676:	4b1c      	ldr	r3, [pc, #112]	; (800f6e8 <xTaskGenericCreate+0x1a4>)
 800f678:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f67a:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d005      	beq.n	800f68c <xTaskGenericCreate+0x148>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f680:	4b18      	ldr	r3, [pc, #96]	; (800f6e4 <xTaskGenericCreate+0x1a0>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f686:	9a08      	ldr	r2, [sp, #32]
 800f688:	4293      	cmp	r3, r2
 800f68a:	d322      	bcc.n	800f6d2 <xTaskGenericCreate+0x18e>
}
 800f68c:	b002      	add	sp, #8
 800f68e:	bc04      	pop	{r2}
 800f690:	4690      	mov	r8, r2
 800f692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f694:	4c17      	ldr	r4, [pc, #92]	; (800f6f4 <xTaskGenericCreate+0x1b0>)
 800f696:	0025      	movs	r5, r4
 800f698:	358c      	adds	r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f69a:	0020      	movs	r0, r4
 800f69c:	f7ff fb9e 	bl	800eddc <vListInitialise>
 800f6a0:	3414      	adds	r4, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f6a2:	42ac      	cmp	r4, r5
 800f6a4:	d1f9      	bne.n	800f69a <xTaskGenericCreate+0x156>
	vListInitialise( &xDelayedTaskList1 );
 800f6a6:	4d14      	ldr	r5, [pc, #80]	; (800f6f8 <xTaskGenericCreate+0x1b4>)
 800f6a8:	0028      	movs	r0, r5
 800f6aa:	f7ff fb97 	bl	800eddc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f6ae:	4c13      	ldr	r4, [pc, #76]	; (800f6fc <xTaskGenericCreate+0x1b8>)
 800f6b0:	0020      	movs	r0, r4
 800f6b2:	f7ff fb93 	bl	800eddc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f6b6:	4812      	ldr	r0, [pc, #72]	; (800f700 <xTaskGenericCreate+0x1bc>)
 800f6b8:	f7ff fb90 	bl	800eddc <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f6bc:	4811      	ldr	r0, [pc, #68]	; (800f704 <xTaskGenericCreate+0x1c0>)
 800f6be:	f7ff fb8d 	bl	800eddc <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f6c2:	4811      	ldr	r0, [pc, #68]	; (800f708 <xTaskGenericCreate+0x1c4>)
 800f6c4:	f7ff fb8a 	bl	800eddc <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6c8:	4b10      	ldr	r3, [pc, #64]	; (800f70c <xTaskGenericCreate+0x1c8>)
 800f6ca:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6cc:	4b10      	ldr	r3, [pc, #64]	; (800f710 <xTaskGenericCreate+0x1cc>)
 800f6ce:	601c      	str	r4, [r3, #0]
 800f6d0:	e7bb      	b.n	800f64a <xTaskGenericCreate+0x106>
				taskYIELD_IF_USING_PREEMPTION();
 800f6d2:	f000 ff99 	bl	8010608 <vPortYield>
			xReturn = pdPASS;
 800f6d6:	2001      	movs	r0, #1
 800f6d8:	e7d8      	b.n	800f68c <xTaskGenericCreate+0x148>
 800f6da:	46c0      	nop			; (mov r8, r8)
 800f6dc:	3fffffff 	.word	0x3fffffff
 800f6e0:	2000227c 	.word	0x2000227c
 800f6e4:	200021e0 	.word	0x200021e0
 800f6e8:	200022d4 	.word	0x200022d4
 800f6ec:	20002288 	.word	0x20002288
 800f6f0:	20002290 	.word	0x20002290
 800f6f4:	200021ec 	.word	0x200021ec
 800f6f8:	20002294 	.word	0x20002294
 800f6fc:	200022a8 	.word	0x200022a8
 800f700:	200022c0 	.word	0x200022c0
 800f704:	200022ec 	.word	0x200022ec
 800f708:	200022d8 	.word	0x200022d8
 800f70c:	200021e4 	.word	0x200021e4
 800f710:	200021e8 	.word	0x200021e8

0800f714 <uxTaskPriorityGet>:
	{
 800f714:	b510      	push	{r4, lr}
 800f716:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f718:	f000 ff82 	bl	8010620 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f71c:	2c00      	cmp	r4, #0
 800f71e:	d004      	beq.n	800f72a <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f720:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f722:	f000 ff89 	bl	8010638 <vPortExitCritical>
	}
 800f726:	0020      	movs	r0, r4
 800f728:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f72a:	4b01      	ldr	r3, [pc, #4]	; (800f730 <uxTaskPriorityGet+0x1c>)
 800f72c:	681c      	ldr	r4, [r3, #0]
 800f72e:	e7f7      	b.n	800f720 <uxTaskPriorityGet+0xc>
 800f730:	200021e0 	.word	0x200021e0

0800f734 <vTaskPrioritySet>:
	{
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	0004      	movs	r4, r0
 800f738:	000d      	movs	r5, r1
 800f73a:	2906      	cmp	r1, #6
 800f73c:	d900      	bls.n	800f740 <vTaskPrioritySet+0xc>
 800f73e:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800f740:	f000 ff6e 	bl	8010620 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f744:	2c00      	cmp	r4, #0
 800f746:	d00e      	beq.n	800f766 <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f748:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f74a:	42aa      	cmp	r2, r5
 800f74c:	d027      	beq.n	800f79e <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800f74e:	d20d      	bcs.n	800f76c <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800f750:	4b22      	ldr	r3, [pc, #136]	; (800f7dc <vTaskPrioritySet+0xa8>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	42a3      	cmp	r3, r4
 800f756:	d025      	beq.n	800f7a4 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f758:	4b20      	ldr	r3, [pc, #128]	; (800f7dc <vTaskPrioritySet+0xa8>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75e:	2600      	movs	r6, #0
 800f760:	429d      	cmp	r5, r3
 800f762:	4176      	adcs	r6, r6
 800f764:	e007      	b.n	800f776 <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f766:	4b1d      	ldr	r3, [pc, #116]	; (800f7dc <vTaskPrioritySet+0xa8>)
 800f768:	681c      	ldr	r4, [r3, #0]
 800f76a:	e7ed      	b.n	800f748 <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800f76c:	4b1b      	ldr	r3, [pc, #108]	; (800f7dc <vTaskPrioritySet+0xa8>)
 800f76e:	681e      	ldr	r6, [r3, #0]
 800f770:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f772:	4273      	negs	r3, r6
 800f774:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f776:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f778:	428a      	cmp	r2, r1
 800f77a:	d015      	beq.n	800f7a8 <vTaskPrioritySet+0x74>
					pxTCB->uxBasePriority = uxNewPriority;
 800f77c:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f77e:	69a3      	ldr	r3, [r4, #24]
 800f780:	2b00      	cmp	r3, #0
 800f782:	db02      	blt.n	800f78a <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f784:	2307      	movs	r3, #7
 800f786:	1b5d      	subs	r5, r3, r5
 800f788:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f78a:	008b      	lsls	r3, r1, #2
 800f78c:	185b      	adds	r3, r3, r1
 800f78e:	009b      	lsls	r3, r3, #2
 800f790:	4a13      	ldr	r2, [pc, #76]	; (800f7e0 <vTaskPrioritySet+0xac>)
 800f792:	189b      	adds	r3, r3, r2
 800f794:	6962      	ldr	r2, [r4, #20]
 800f796:	429a      	cmp	r2, r3
 800f798:	d008      	beq.n	800f7ac <vTaskPrioritySet+0x78>
				if( xYieldRequired == pdTRUE )
 800f79a:	2e01      	cmp	r6, #1
 800f79c:	d01a      	beq.n	800f7d4 <vTaskPrioritySet+0xa0>
		taskEXIT_CRITICAL();
 800f79e:	f000 ff4b 	bl	8010638 <vPortExitCritical>
	}
 800f7a2:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800f7a4:	2600      	movs	r6, #0
 800f7a6:	e7e6      	b.n	800f776 <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800f7a8:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f7aa:	e7e7      	b.n	800f77c <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f7ac:	1d25      	adds	r5, r4, #4
 800f7ae:	0028      	movs	r0, r5
 800f7b0:	f7ff fb45 	bl	800ee3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f7b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f7b6:	4a0b      	ldr	r2, [pc, #44]	; (800f7e4 <vTaskPrioritySet+0xb0>)
 800f7b8:	6812      	ldr	r2, [r2, #0]
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d901      	bls.n	800f7c2 <vTaskPrioritySet+0x8e>
 800f7be:	4a09      	ldr	r2, [pc, #36]	; (800f7e4 <vTaskPrioritySet+0xb0>)
 800f7c0:	6013      	str	r3, [r2, #0]
 800f7c2:	0098      	lsls	r0, r3, #2
 800f7c4:	18c0      	adds	r0, r0, r3
 800f7c6:	0080      	lsls	r0, r0, #2
 800f7c8:	4b05      	ldr	r3, [pc, #20]	; (800f7e0 <vTaskPrioritySet+0xac>)
 800f7ca:	18c0      	adds	r0, r0, r3
 800f7cc:	0029      	movs	r1, r5
 800f7ce:	f7ff fb13 	bl	800edf8 <vListInsertEnd>
 800f7d2:	e7e2      	b.n	800f79a <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800f7d4:	f000 ff18 	bl	8010608 <vPortYield>
 800f7d8:	e7e1      	b.n	800f79e <vTaskPrioritySet+0x6a>
 800f7da:	46c0      	nop			; (mov r8, r8)
 800f7dc:	200021e0 	.word	0x200021e0
 800f7e0:	200021ec 	.word	0x200021ec
 800f7e4:	20002290 	.word	0x20002290

0800f7e8 <vTaskStartScheduler>:
{
 800f7e8:	b500      	push	{lr}
 800f7ea:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	9303      	str	r3, [sp, #12]
 800f7f0:	9302      	str	r3, [sp, #8]
 800f7f2:	9301      	str	r3, [sp, #4]
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	22a0      	movs	r2, #160	; 0xa0
 800f7f8:	490b      	ldr	r1, [pc, #44]	; (800f828 <vTaskStartScheduler+0x40>)
 800f7fa:	480c      	ldr	r0, [pc, #48]	; (800f82c <vTaskStartScheduler+0x44>)
 800f7fc:	f7ff fea2 	bl	800f544 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f800:	2801      	cmp	r0, #1
 800f802:	d001      	beq.n	800f808 <vTaskStartScheduler+0x20>
}
 800f804:	b005      	add	sp, #20
 800f806:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800f808:	f000 fd34 	bl	8010274 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f80c:	2801      	cmp	r0, #1
 800f80e:	d1f9      	bne.n	800f804 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f810:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f812:	4b07      	ldr	r3, [pc, #28]	; (800f830 <vTaskStartScheduler+0x48>)
 800f814:	2201      	movs	r2, #1
 800f816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f818:	4b06      	ldr	r3, [pc, #24]	; (800f834 <vTaskStartScheduler+0x4c>)
 800f81a:	2200      	movs	r2, #0
 800f81c:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f81e:	f7f8 f8b3 	bl	8007988 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f822:	f000 fec7 	bl	80105b4 <xPortStartScheduler>
}
 800f826:	e7ed      	b.n	800f804 <vTaskStartScheduler+0x1c>
 800f828:	0801bf38 	.word	0x0801bf38
 800f82c:	0800faa9 	.word	0x0800faa9
 800f830:	200022d4 	.word	0x200022d4
 800f834:	20002300 	.word	0x20002300

0800f838 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f838:	4a02      	ldr	r2, [pc, #8]	; (800f844 <vTaskSuspendAll+0xc>)
 800f83a:	6813      	ldr	r3, [r2, #0]
 800f83c:	3301      	adds	r3, #1
 800f83e:	6013      	str	r3, [r2, #0]
}
 800f840:	4770      	bx	lr
 800f842:	46c0      	nop			; (mov r8, r8)
 800f844:	20002284 	.word	0x20002284

0800f848 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f848:	4b01      	ldr	r3, [pc, #4]	; (800f850 <xTaskGetTickCount+0x8>)
 800f84a:	6818      	ldr	r0, [r3, #0]
}
 800f84c:	4770      	bx	lr
 800f84e:	46c0      	nop			; (mov r8, r8)
 800f850:	20002300 	.word	0x20002300

0800f854 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f854:	4b01      	ldr	r3, [pc, #4]	; (800f85c <xTaskGetTickCountFromISR+0x8>)
 800f856:	6818      	ldr	r0, [r3, #0]
}
 800f858:	4770      	bx	lr
 800f85a:	46c0      	nop			; (mov r8, r8)
 800f85c:	20002300 	.word	0x20002300

0800f860 <xTaskIncrementTick>:
{
 800f860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f862:	46d6      	mov	lr, sl
 800f864:	464f      	mov	r7, r9
 800f866:	4646      	mov	r6, r8
 800f868:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f86a:	4b3a      	ldr	r3, [pc, #232]	; (800f954 <xTaskIncrementTick+0xf4>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d15f      	bne.n	800f932 <xTaskIncrementTick+0xd2>
		++xTickCount;
 800f872:	4b39      	ldr	r3, [pc, #228]	; (800f958 <xTaskIncrementTick+0xf8>)
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	3201      	adds	r2, #1
 800f878:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f87a:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f87c:	2f00      	cmp	r7, #0
 800f87e:	d038      	beq.n	800f8f2 <xTaskIncrementTick+0x92>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f880:	4b36      	ldr	r3, [pc, #216]	; (800f95c <xTaskIncrementTick+0xfc>)
 800f882:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f884:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f886:	42bb      	cmp	r3, r7
 800f888:	d844      	bhi.n	800f914 <xTaskIncrementTick+0xb4>
BaseType_t xSwitchRequired = pdFALSE;
 800f88a:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f88c:	4b34      	ldr	r3, [pc, #208]	; (800f960 <xTaskIncrementTick+0x100>)
 800f88e:	4698      	mov	r8, r3
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f890:	4699      	mov	r9, r3
						prvAddTaskToReadyList( pxTCB );
 800f892:	4b34      	ldr	r3, [pc, #208]	; (800f964 <xTaskIncrementTick+0x104>)
 800f894:	469a      	mov	sl, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f896:	4643      	mov	r3, r8
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d035      	beq.n	800f90c <xTaskIncrementTick+0xac>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f8a0:	464b      	mov	r3, r9
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f8a8:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f8aa:	429f      	cmp	r7, r3
 800f8ac:	d33e      	bcc.n	800f92c <xTaskIncrementTick+0xcc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f8ae:	1d25      	adds	r5, r4, #4
 800f8b0:	0028      	movs	r0, r5
 800f8b2:	f7ff fac4 	bl	800ee3e <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f8b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d003      	beq.n	800f8c4 <xTaskIncrementTick+0x64>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f8bc:	0020      	movs	r0, r4
 800f8be:	3018      	adds	r0, #24
 800f8c0:	f7ff fabd 	bl	800ee3e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f8c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f8c6:	4652      	mov	r2, sl
 800f8c8:	6812      	ldr	r2, [r2, #0]
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d901      	bls.n	800f8d2 <xTaskIncrementTick+0x72>
 800f8ce:	4a25      	ldr	r2, [pc, #148]	; (800f964 <xTaskIncrementTick+0x104>)
 800f8d0:	6013      	str	r3, [r2, #0]
 800f8d2:	0098      	lsls	r0, r3, #2
 800f8d4:	18c0      	adds	r0, r0, r3
 800f8d6:	0080      	lsls	r0, r0, #2
 800f8d8:	4b23      	ldr	r3, [pc, #140]	; (800f968 <xTaskIncrementTick+0x108>)
 800f8da:	18c0      	adds	r0, r0, r3
 800f8dc:	0029      	movs	r1, r5
 800f8de:	f7ff fa8b 	bl	800edf8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8e2:	4b22      	ldr	r3, [pc, #136]	; (800f96c <xTaskIncrementTick+0x10c>)
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d3d3      	bcc.n	800f896 <xTaskIncrementTick+0x36>
								xSwitchRequired = pdTRUE;
 800f8ee:	2601      	movs	r6, #1
 800f8f0:	e7d1      	b.n	800f896 <xTaskIncrementTick+0x36>
				taskSWITCH_DELAYED_LISTS();
 800f8f2:	4a1b      	ldr	r2, [pc, #108]	; (800f960 <xTaskIncrementTick+0x100>)
 800f8f4:	6811      	ldr	r1, [r2, #0]
 800f8f6:	4b1e      	ldr	r3, [pc, #120]	; (800f970 <xTaskIncrementTick+0x110>)
 800f8f8:	6818      	ldr	r0, [r3, #0]
 800f8fa:	6010      	str	r0, [r2, #0]
 800f8fc:	6019      	str	r1, [r3, #0]
 800f8fe:	4a1d      	ldr	r2, [pc, #116]	; (800f974 <xTaskIncrementTick+0x114>)
 800f900:	6813      	ldr	r3, [r2, #0]
 800f902:	3301      	adds	r3, #1
 800f904:	6013      	str	r3, [r2, #0]
 800f906:	f7ff fdc5 	bl	800f494 <prvResetNextTaskUnblockTime>
 800f90a:	e7b9      	b.n	800f880 <xTaskIncrementTick+0x20>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f90c:	4b13      	ldr	r3, [pc, #76]	; (800f95c <xTaskIncrementTick+0xfc>)
 800f90e:	2201      	movs	r2, #1
 800f910:	4252      	negs	r2, r2
 800f912:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f914:	4b15      	ldr	r3, [pc, #84]	; (800f96c <xTaskIncrementTick+0x10c>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f91a:	0093      	lsls	r3, r2, #2
 800f91c:	189b      	adds	r3, r3, r2
 800f91e:	009b      	lsls	r3, r3, #2
 800f920:	4a11      	ldr	r2, [pc, #68]	; (800f968 <xTaskIncrementTick+0x108>)
 800f922:	589b      	ldr	r3, [r3, r2]
 800f924:	2b01      	cmp	r3, #1
 800f926:	d909      	bls.n	800f93c <xTaskIncrementTick+0xdc>
				xSwitchRequired = pdTRUE;
 800f928:	2601      	movs	r6, #1
 800f92a:	e007      	b.n	800f93c <xTaskIncrementTick+0xdc>
							xNextTaskUnblockTime = xItemValue;
 800f92c:	4a0b      	ldr	r2, [pc, #44]	; (800f95c <xTaskIncrementTick+0xfc>)
 800f92e:	6013      	str	r3, [r2, #0]
							break;
 800f930:	e7f0      	b.n	800f914 <xTaskIncrementTick+0xb4>
		++uxPendedTicks;
 800f932:	4a11      	ldr	r2, [pc, #68]	; (800f978 <xTaskIncrementTick+0x118>)
 800f934:	6813      	ldr	r3, [r2, #0]
 800f936:	3301      	adds	r3, #1
 800f938:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f93a:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800f93c:	4b0f      	ldr	r3, [pc, #60]	; (800f97c <xTaskIncrementTick+0x11c>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d000      	beq.n	800f946 <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800f944:	2601      	movs	r6, #1
}
 800f946:	0030      	movs	r0, r6
 800f948:	bc1c      	pop	{r2, r3, r4}
 800f94a:	4690      	mov	r8, r2
 800f94c:	4699      	mov	r9, r3
 800f94e:	46a2      	mov	sl, r4
 800f950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f952:	46c0      	nop			; (mov r8, r8)
 800f954:	20002284 	.word	0x20002284
 800f958:	20002300 	.word	0x20002300
 800f95c:	20000110 	.word	0x20000110
 800f960:	200021e4 	.word	0x200021e4
 800f964:	20002290 	.word	0x20002290
 800f968:	200021ec 	.word	0x200021ec
 800f96c:	200021e0 	.word	0x200021e0
 800f970:	200021e8 	.word	0x200021e8
 800f974:	200022bc 	.word	0x200022bc
 800f978:	20002280 	.word	0x20002280
 800f97c:	20002304 	.word	0x20002304

0800f980 <xTaskResumeAll>:
{
 800f980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f982:	46ce      	mov	lr, r9
 800f984:	4647      	mov	r7, r8
 800f986:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800f988:	f000 fe4a 	bl	8010620 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f98c:	4b30      	ldr	r3, [pc, #192]	; (800fa50 <xTaskResumeAll+0xd0>)
 800f98e:	681a      	ldr	r2, [r3, #0]
 800f990:	3a01      	subs	r2, #1
 800f992:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f994:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f996:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d14d      	bne.n	800fa38 <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f99c:	4b2d      	ldr	r3, [pc, #180]	; (800fa54 <xTaskResumeAll+0xd4>)
 800f99e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f9a0:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d048      	beq.n	800fa38 <xTaskResumeAll+0xb8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9a6:	4e2c      	ldr	r6, [pc, #176]	; (800fa58 <xTaskResumeAll+0xd8>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f9a8:	46b0      	mov	r8, r6
					prvAddTaskToReadyList( pxTCB );
 800f9aa:	4f2c      	ldr	r7, [pc, #176]	; (800fa5c <xTaskResumeAll+0xdc>)
 800f9ac:	46b9      	mov	r9, r7
 800f9ae:	e00d      	b.n	800f9cc <xTaskResumeAll+0x4c>
 800f9b0:	0098      	lsls	r0, r3, #2
 800f9b2:	18c0      	adds	r0, r0, r3
 800f9b4:	0080      	lsls	r0, r0, #2
 800f9b6:	4b2a      	ldr	r3, [pc, #168]	; (800fa60 <xTaskResumeAll+0xe0>)
 800f9b8:	18c0      	adds	r0, r0, r3
 800f9ba:	0029      	movs	r1, r5
 800f9bc:	f7ff fa1c 	bl	800edf8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f9c0:	4b28      	ldr	r3, [pc, #160]	; (800fa64 <xTaskResumeAll+0xe4>)
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d214      	bcs.n	800f9f6 <xTaskResumeAll+0x76>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f9cc:	6833      	ldr	r3, [r6, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d015      	beq.n	800f9fe <xTaskResumeAll+0x7e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f9d2:	4643      	mov	r3, r8
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9d8:	0020      	movs	r0, r4
 800f9da:	3018      	adds	r0, #24
 800f9dc:	f7ff fa2f 	bl	800ee3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f9e0:	1d25      	adds	r5, r4, #4
 800f9e2:	0028      	movs	r0, r5
 800f9e4:	f7ff fa2b 	bl	800ee3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9ea:	683a      	ldr	r2, [r7, #0]
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d9df      	bls.n	800f9b0 <xTaskResumeAll+0x30>
 800f9f0:	464a      	mov	r2, r9
 800f9f2:	6013      	str	r3, [r2, #0]
 800f9f4:	e7dc      	b.n	800f9b0 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
 800f9f6:	4b1c      	ldr	r3, [pc, #112]	; (800fa68 <xTaskResumeAll+0xe8>)
 800f9f8:	2201      	movs	r2, #1
 800f9fa:	601a      	str	r2, [r3, #0]
 800f9fc:	e7e6      	b.n	800f9cc <xTaskResumeAll+0x4c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f9fe:	4b1b      	ldr	r3, [pc, #108]	; (800fa6c <xTaskResumeAll+0xec>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d013      	beq.n	800fa2e <xTaskResumeAll+0xae>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fa06:	4b19      	ldr	r3, [pc, #100]	; (800fa6c <xTaskResumeAll+0xec>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00f      	beq.n	800fa2e <xTaskResumeAll+0xae>
							xYieldPending = pdTRUE;
 800fa0e:	4e16      	ldr	r6, [pc, #88]	; (800fa68 <xTaskResumeAll+0xe8>)
 800fa10:	2501      	movs	r5, #1
						--uxPendedTicks;
 800fa12:	4c16      	ldr	r4, [pc, #88]	; (800fa6c <xTaskResumeAll+0xec>)
 800fa14:	e005      	b.n	800fa22 <xTaskResumeAll+0xa2>
 800fa16:	6823      	ldr	r3, [r4, #0]
 800fa18:	3b01      	subs	r3, #1
 800fa1a:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fa1c:	6823      	ldr	r3, [r4, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d005      	beq.n	800fa2e <xTaskResumeAll+0xae>
						if( xTaskIncrementTick() != pdFALSE )
 800fa22:	f7ff ff1d 	bl	800f860 <xTaskIncrementTick>
 800fa26:	2800      	cmp	r0, #0
 800fa28:	d0f5      	beq.n	800fa16 <xTaskResumeAll+0x96>
							xYieldPending = pdTRUE;
 800fa2a:	6035      	str	r5, [r6, #0]
 800fa2c:	e7f3      	b.n	800fa16 <xTaskResumeAll+0x96>
				if( xYieldPending == pdTRUE )
 800fa2e:	4b0e      	ldr	r3, [pc, #56]	; (800fa68 <xTaskResumeAll+0xe8>)
 800fa30:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa32:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d006      	beq.n	800fa46 <xTaskResumeAll+0xc6>
	taskEXIT_CRITICAL();
 800fa38:	f000 fdfe 	bl	8010638 <vPortExitCritical>
}
 800fa3c:	0020      	movs	r0, r4
 800fa3e:	bc0c      	pop	{r2, r3}
 800fa40:	4690      	mov	r8, r2
 800fa42:	4699      	mov	r9, r3
 800fa44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800fa46:	f000 fddf 	bl	8010608 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800fa4a:	3401      	adds	r4, #1
 800fa4c:	e7f4      	b.n	800fa38 <xTaskResumeAll+0xb8>
 800fa4e:	46c0      	nop			; (mov r8, r8)
 800fa50:	20002284 	.word	0x20002284
 800fa54:	2000227c 	.word	0x2000227c
 800fa58:	200022c0 	.word	0x200022c0
 800fa5c:	20002290 	.word	0x20002290
 800fa60:	200021ec 	.word	0x200021ec
 800fa64:	200021e0 	.word	0x200021e0
 800fa68:	20002304 	.word	0x20002304
 800fa6c:	20002280 	.word	0x20002280

0800fa70 <vTaskDelay>:
	{
 800fa70:	b510      	push	{r4, lr}
 800fa72:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa74:	d010      	beq.n	800fa98 <vTaskDelay+0x28>
			vTaskSuspendAll();
 800fa76:	f7ff fedf 	bl	800f838 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800fa7a:	4b09      	ldr	r3, [pc, #36]	; (800faa0 <vTaskDelay+0x30>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fa80:	4b08      	ldr	r3, [pc, #32]	; (800faa4 <vTaskDelay+0x34>)
 800fa82:	6818      	ldr	r0, [r3, #0]
 800fa84:	3004      	adds	r0, #4
 800fa86:	f7ff f9da 	bl	800ee3e <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fa8a:	0020      	movs	r0, r4
 800fa8c:	f7ff fd18 	bl	800f4c0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fa90:	f7ff ff76 	bl	800f980 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d101      	bne.n	800fa9c <vTaskDelay+0x2c>
			portYIELD_WITHIN_API();
 800fa98:	f000 fdb6 	bl	8010608 <vPortYield>
	}
 800fa9c:	bd10      	pop	{r4, pc}
 800fa9e:	46c0      	nop			; (mov r8, r8)
 800faa0:	20002300 	.word	0x20002300
 800faa4:	200021e0 	.word	0x200021e0

0800faa8 <prvIdleTask>:
{
 800faa8:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800faaa:	4d16      	ldr	r5, [pc, #88]	; (800fb04 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800faac:	4e16      	ldr	r6, [pc, #88]	; (800fb08 <prvIdleTask+0x60>)
 800faae:	e003      	b.n	800fab8 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fab0:	4b16      	ldr	r3, [pc, #88]	; (800fb0c <prvIdleTask+0x64>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d822      	bhi.n	800fafe <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fab8:	682b      	ldr	r3, [r5, #0]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d0f8      	beq.n	800fab0 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800fabe:	f7ff febb 	bl	800f838 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fac2:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800fac4:	f7ff ff5c 	bl	800f980 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800fac8:	2c00      	cmp	r4, #0
 800faca:	d0f5      	beq.n	800fab8 <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800facc:	f000 fda8 	bl	8010620 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fad0:	4b0d      	ldr	r3, [pc, #52]	; (800fb08 <prvIdleTask+0x60>)
 800fad2:	68db      	ldr	r3, [r3, #12]
 800fad4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fad6:	1d20      	adds	r0, r4, #4
 800fad8:	f7ff f9b1 	bl	800ee3e <uxListRemove>
					--uxCurrentNumberOfTasks;
 800fadc:	4a0c      	ldr	r2, [pc, #48]	; (800fb10 <prvIdleTask+0x68>)
 800fade:	6813      	ldr	r3, [r2, #0]
 800fae0:	3b01      	subs	r3, #1
 800fae2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800fae4:	4a07      	ldr	r2, [pc, #28]	; (800fb04 <prvIdleTask+0x5c>)
 800fae6:	6813      	ldr	r3, [r2, #0]
 800fae8:	3b01      	subs	r3, #1
 800faea:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800faec:	f000 fda4 	bl	8010638 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800faf0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800faf2:	f000 fe9f 	bl	8010834 <vPortFree>
		vPortFree( pxTCB );
 800faf6:	0020      	movs	r0, r4
 800faf8:	f000 fe9c 	bl	8010834 <vPortFree>
 800fafc:	e7dc      	b.n	800fab8 <prvIdleTask+0x10>
				taskYIELD();
 800fafe:	f000 fd83 	bl	8010608 <vPortYield>
 800fb02:	e7d9      	b.n	800fab8 <prvIdleTask+0x10>
 800fb04:	2000228c 	.word	0x2000228c
 800fb08:	200022ec 	.word	0x200022ec
 800fb0c:	200021ec 	.word	0x200021ec
 800fb10:	2000227c 	.word	0x2000227c

0800fb14 <uxTaskGetSystemState>:
	{
 800fb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb16:	46c6      	mov	lr, r8
 800fb18:	b500      	push	{lr}
 800fb1a:	0006      	movs	r6, r0
 800fb1c:	000d      	movs	r5, r1
 800fb1e:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800fb20:	f7ff fe8a 	bl	800f838 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fb24:	4b1e      	ldr	r3, [pc, #120]	; (800fba0 <uxTaskGetSystemState+0x8c>)
 800fb26:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800fb28:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fb2a:	42ab      	cmp	r3, r5
 800fb2c:	d831      	bhi.n	800fb92 <uxTaskGetSystemState+0x7e>
 800fb2e:	4d1d      	ldr	r5, [pc, #116]	; (800fba4 <uxTaskGetSystemState+0x90>)
 800fb30:	002f      	movs	r7, r5
 800fb32:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800fb34:	0160      	lsls	r0, r4, #5
 800fb36:	1830      	adds	r0, r6, r0
 800fb38:	2201      	movs	r2, #1
 800fb3a:	0029      	movs	r1, r5
 800fb3c:	f7ff fc56 	bl	800f3ec <prvListTaskWithinSingleList>
 800fb40:	1824      	adds	r4, r4, r0
 800fb42:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fb44:	42bd      	cmp	r5, r7
 800fb46:	d1f5      	bne.n	800fb34 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800fb48:	4b17      	ldr	r3, [pc, #92]	; (800fba8 <uxTaskGetSystemState+0x94>)
 800fb4a:	6819      	ldr	r1, [r3, #0]
 800fb4c:	0160      	lsls	r0, r4, #5
 800fb4e:	1830      	adds	r0, r6, r0
 800fb50:	2202      	movs	r2, #2
 800fb52:	f7ff fc4b 	bl	800f3ec <prvListTaskWithinSingleList>
 800fb56:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800fb58:	4b14      	ldr	r3, [pc, #80]	; (800fbac <uxTaskGetSystemState+0x98>)
 800fb5a:	6819      	ldr	r1, [r3, #0]
 800fb5c:	0160      	lsls	r0, r4, #5
 800fb5e:	1830      	adds	r0, r6, r0
 800fb60:	2202      	movs	r2, #2
 800fb62:	f7ff fc43 	bl	800f3ec <prvListTaskWithinSingleList>
 800fb66:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800fb68:	0160      	lsls	r0, r4, #5
 800fb6a:	1830      	adds	r0, r6, r0
 800fb6c:	2204      	movs	r2, #4
 800fb6e:	4910      	ldr	r1, [pc, #64]	; (800fbb0 <uxTaskGetSystemState+0x9c>)
 800fb70:	f7ff fc3c 	bl	800f3ec <prvListTaskWithinSingleList>
 800fb74:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800fb76:	0160      	lsls	r0, r4, #5
 800fb78:	1830      	adds	r0, r6, r0
 800fb7a:	2203      	movs	r2, #3
 800fb7c:	490d      	ldr	r1, [pc, #52]	; (800fbb4 <uxTaskGetSystemState+0xa0>)
 800fb7e:	f7ff fc35 	bl	800f3ec <prvListTaskWithinSingleList>
 800fb82:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800fb84:	4643      	mov	r3, r8
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d003      	beq.n	800fb92 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fb8a:	f7f7 ff0d 	bl	80079a8 <ulMainGetRunTimeCounterValue>
 800fb8e:	4643      	mov	r3, r8
 800fb90:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800fb92:	f7ff fef5 	bl	800f980 <xTaskResumeAll>
	}
 800fb96:	0020      	movs	r0, r4
 800fb98:	bc04      	pop	{r2}
 800fb9a:	4690      	mov	r8, r2
 800fb9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb9e:	46c0      	nop			; (mov r8, r8)
 800fba0:	2000227c 	.word	0x2000227c
 800fba4:	20002264 	.word	0x20002264
 800fba8:	200021e4 	.word	0x200021e4
 800fbac:	200021e8 	.word	0x200021e8
 800fbb0:	200022ec 	.word	0x200022ec
 800fbb4:	200022d8 	.word	0x200022d8

0800fbb8 <vTaskSwitchContext>:
{
 800fbb8:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fbba:	4b36      	ldr	r3, [pc, #216]	; (800fc94 <vTaskSwitchContext+0xdc>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d003      	beq.n	800fbca <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fbc2:	4b35      	ldr	r3, [pc, #212]	; (800fc98 <vTaskSwitchContext+0xe0>)
 800fbc4:	2201      	movs	r2, #1
 800fbc6:	601a      	str	r2, [r3, #0]
}
 800fbc8:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fbca:	4b33      	ldr	r3, [pc, #204]	; (800fc98 <vTaskSwitchContext+0xe0>)
 800fbcc:	2200      	movs	r2, #0
 800fbce:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fbd0:	f7f7 feea 	bl	80079a8 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fbd4:	4b31      	ldr	r3, [pc, #196]	; (800fc9c <vTaskSwitchContext+0xe4>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4298      	cmp	r0, r3
 800fbda:	d905      	bls.n	800fbe8 <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fbdc:	4a30      	ldr	r2, [pc, #192]	; (800fca0 <vTaskSwitchContext+0xe8>)
 800fbde:	6812      	ldr	r2, [r2, #0]
 800fbe0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fbe2:	1acb      	subs	r3, r1, r3
 800fbe4:	181b      	adds	r3, r3, r0
 800fbe6:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fbe8:	4b2c      	ldr	r3, [pc, #176]	; (800fc9c <vTaskSwitchContext+0xe4>)
 800fbea:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fbec:	4b2c      	ldr	r3, [pc, #176]	; (800fca0 <vTaskSwitchContext+0xe8>)
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	6812      	ldr	r2, [r2, #0]
 800fbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d937      	bls.n	800fc6a <vTaskSwitchContext+0xb2>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fbfa:	4b29      	ldr	r3, [pc, #164]	; (800fca0 <vTaskSwitchContext+0xe8>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc00:	2214      	movs	r2, #20
 800fc02:	4928      	ldr	r1, [pc, #160]	; (800fca4 <vTaskSwitchContext+0xec>)
 800fc04:	f004 fd34 	bl	8014670 <memcmp>
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	d135      	bne.n	800fc78 <vTaskSwitchContext+0xc0>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fc0c:	4b26      	ldr	r3, [pc, #152]	; (800fca8 <vTaskSwitchContext+0xf0>)
 800fc0e:	681a      	ldr	r2, [r3, #0]
 800fc10:	0093      	lsls	r3, r2, #2
 800fc12:	189b      	adds	r3, r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4a25      	ldr	r2, [pc, #148]	; (800fcac <vTaskSwitchContext+0xf4>)
 800fc18:	589b      	ldr	r3, [r3, r2]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d10b      	bne.n	800fc36 <vTaskSwitchContext+0x7e>
 800fc1e:	4a22      	ldr	r2, [pc, #136]	; (800fca8 <vTaskSwitchContext+0xf0>)
 800fc20:	4822      	ldr	r0, [pc, #136]	; (800fcac <vTaskSwitchContext+0xf4>)
 800fc22:	6813      	ldr	r3, [r2, #0]
 800fc24:	3b01      	subs	r3, #1
 800fc26:	6013      	str	r3, [r2, #0]
 800fc28:	6811      	ldr	r1, [r2, #0]
 800fc2a:	008b      	lsls	r3, r1, #2
 800fc2c:	185b      	adds	r3, r3, r1
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	581b      	ldr	r3, [r3, r0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d0f5      	beq.n	800fc22 <vTaskSwitchContext+0x6a>
 800fc36:	4b1c      	ldr	r3, [pc, #112]	; (800fca8 <vTaskSwitchContext+0xf0>)
 800fc38:	6819      	ldr	r1, [r3, #0]
 800fc3a:	4c1c      	ldr	r4, [pc, #112]	; (800fcac <vTaskSwitchContext+0xf4>)
 800fc3c:	008b      	lsls	r3, r1, #2
 800fc3e:	185a      	adds	r2, r3, r1
 800fc40:	0092      	lsls	r2, r2, #2
 800fc42:	18a2      	adds	r2, r4, r2
 800fc44:	6850      	ldr	r0, [r2, #4]
 800fc46:	6840      	ldr	r0, [r0, #4]
 800fc48:	6050      	str	r0, [r2, #4]
 800fc4a:	185b      	adds	r3, r3, r1
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	3308      	adds	r3, #8
 800fc50:	191b      	adds	r3, r3, r4
 800fc52:	4298      	cmp	r0, r3
 800fc54:	d017      	beq.n	800fc86 <vTaskSwitchContext+0xce>
 800fc56:	008b      	lsls	r3, r1, #2
 800fc58:	1859      	adds	r1, r3, r1
 800fc5a:	0089      	lsls	r1, r1, #2
 800fc5c:	4b13      	ldr	r3, [pc, #76]	; (800fcac <vTaskSwitchContext+0xf4>)
 800fc5e:	1859      	adds	r1, r3, r1
 800fc60:	684b      	ldr	r3, [r1, #4]
 800fc62:	68da      	ldr	r2, [r3, #12]
 800fc64:	4b0e      	ldr	r3, [pc, #56]	; (800fca0 <vTaskSwitchContext+0xe8>)
 800fc66:	601a      	str	r2, [r3, #0]
}
 800fc68:	e7ae      	b.n	800fbc8 <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fc6a:	4b0d      	ldr	r3, [pc, #52]	; (800fca0 <vTaskSwitchContext+0xe8>)
 800fc6c:	6818      	ldr	r0, [r3, #0]
 800fc6e:	6819      	ldr	r1, [r3, #0]
 800fc70:	3134      	adds	r1, #52	; 0x34
 800fc72:	f7fe f977 	bl	800df64 <vApplicationStackOverflowHook>
 800fc76:	e7c0      	b.n	800fbfa <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fc78:	4b09      	ldr	r3, [pc, #36]	; (800fca0 <vTaskSwitchContext+0xe8>)
 800fc7a:	6818      	ldr	r0, [r3, #0]
 800fc7c:	6819      	ldr	r1, [r3, #0]
 800fc7e:	3134      	adds	r1, #52	; 0x34
 800fc80:	f7fe f970 	bl	800df64 <vApplicationStackOverflowHook>
 800fc84:	e7c2      	b.n	800fc0c <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fc86:	6840      	ldr	r0, [r0, #4]
 800fc88:	008b      	lsls	r3, r1, #2
 800fc8a:	185b      	adds	r3, r3, r1
 800fc8c:	009b      	lsls	r3, r3, #2
 800fc8e:	18e3      	adds	r3, r4, r3
 800fc90:	6058      	str	r0, [r3, #4]
 800fc92:	e7e0      	b.n	800fc56 <vTaskSwitchContext+0x9e>
 800fc94:	20002284 	.word	0x20002284
 800fc98:	20002304 	.word	0x20002304
 800fc9c:	20002278 	.word	0x20002278
 800fca0:	200021e0 	.word	0x200021e0
 800fca4:	0801befc 	.word	0x0801befc
 800fca8:	20002290 	.word	0x20002290
 800fcac:	200021ec 	.word	0x200021ec

0800fcb0 <vTaskPlaceOnEventList>:
{
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fcb4:	4c0b      	ldr	r4, [pc, #44]	; (800fce4 <vTaskPlaceOnEventList+0x34>)
 800fcb6:	6821      	ldr	r1, [r4, #0]
 800fcb8:	3118      	adds	r1, #24
 800fcba:	f7ff f8a9 	bl	800ee10 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fcbe:	6820      	ldr	r0, [r4, #0]
 800fcc0:	3004      	adds	r0, #4
 800fcc2:	f7ff f8bc 	bl	800ee3e <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fcc6:	1c6b      	adds	r3, r5, #1
 800fcc8:	d005      	beq.n	800fcd6 <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800fcca:	4b07      	ldr	r3, [pc, #28]	; (800fce8 <vTaskPlaceOnEventList+0x38>)
 800fccc:	6818      	ldr	r0, [r3, #0]
 800fcce:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fcd0:	f7ff fbf6 	bl	800f4c0 <prvAddCurrentTaskToDelayedList>
}
 800fcd4:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fcd6:	4b03      	ldr	r3, [pc, #12]	; (800fce4 <vTaskPlaceOnEventList+0x34>)
 800fcd8:	6819      	ldr	r1, [r3, #0]
 800fcda:	3104      	adds	r1, #4
 800fcdc:	4803      	ldr	r0, [pc, #12]	; (800fcec <vTaskPlaceOnEventList+0x3c>)
 800fcde:	f7ff f88b 	bl	800edf8 <vListInsertEnd>
 800fce2:	e7f7      	b.n	800fcd4 <vTaskPlaceOnEventList+0x24>
 800fce4:	200021e0 	.word	0x200021e0
 800fce8:	20002300 	.word	0x20002300
 800fcec:	200022d8 	.word	0x200022d8

0800fcf0 <vTaskPlaceOnEventListRestricted>:
	{
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fcf4:	4c07      	ldr	r4, [pc, #28]	; (800fd14 <vTaskPlaceOnEventListRestricted+0x24>)
 800fcf6:	6821      	ldr	r1, [r4, #0]
 800fcf8:	3118      	adds	r1, #24
 800fcfa:	f7ff f87d 	bl	800edf8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fcfe:	6820      	ldr	r0, [r4, #0]
 800fd00:	3004      	adds	r0, #4
 800fd02:	f7ff f89c 	bl	800ee3e <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800fd06:	4b04      	ldr	r3, [pc, #16]	; (800fd18 <vTaskPlaceOnEventListRestricted+0x28>)
 800fd08:	6818      	ldr	r0, [r3, #0]
 800fd0a:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fd0c:	f7ff fbd8 	bl	800f4c0 <prvAddCurrentTaskToDelayedList>
	}
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
 800fd12:	46c0      	nop			; (mov r8, r8)
 800fd14:	200021e0 	.word	0x200021e0
 800fd18:	20002300 	.word	0x20002300

0800fd1c <xTaskRemoveFromEventList>:
{
 800fd1c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800fd1e:	68c3      	ldr	r3, [r0, #12]
 800fd20:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fd22:	0025      	movs	r5, r4
 800fd24:	3518      	adds	r5, #24
 800fd26:	0028      	movs	r0, r5
 800fd28:	f7ff f889 	bl	800ee3e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd2c:	4b13      	ldr	r3, [pc, #76]	; (800fd7c <xTaskRemoveFromEventList+0x60>)
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d11e      	bne.n	800fd72 <xTaskRemoveFromEventList+0x56>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800fd34:	1d25      	adds	r5, r4, #4
 800fd36:	0028      	movs	r0, r5
 800fd38:	f7ff f881 	bl	800ee3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fd3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fd3e:	4a10      	ldr	r2, [pc, #64]	; (800fd80 <xTaskRemoveFromEventList+0x64>)
 800fd40:	6812      	ldr	r2, [r2, #0]
 800fd42:	4293      	cmp	r3, r2
 800fd44:	d901      	bls.n	800fd4a <xTaskRemoveFromEventList+0x2e>
 800fd46:	4a0e      	ldr	r2, [pc, #56]	; (800fd80 <xTaskRemoveFromEventList+0x64>)
 800fd48:	6013      	str	r3, [r2, #0]
 800fd4a:	0098      	lsls	r0, r3, #2
 800fd4c:	18c0      	adds	r0, r0, r3
 800fd4e:	0080      	lsls	r0, r0, #2
 800fd50:	4b0c      	ldr	r3, [pc, #48]	; (800fd84 <xTaskRemoveFromEventList+0x68>)
 800fd52:	18c0      	adds	r0, r0, r3
 800fd54:	0029      	movs	r1, r5
 800fd56:	f7ff f84f 	bl	800edf8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd5a:	4b0b      	ldr	r3, [pc, #44]	; (800fd88 <xTaskRemoveFromEventList+0x6c>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fd60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800fd62:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d903      	bls.n	800fd70 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
 800fd68:	4b08      	ldr	r3, [pc, #32]	; (800fd8c <xTaskRemoveFromEventList+0x70>)
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800fd6e:	3001      	adds	r0, #1
}
 800fd70:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fd72:	0029      	movs	r1, r5
 800fd74:	4806      	ldr	r0, [pc, #24]	; (800fd90 <xTaskRemoveFromEventList+0x74>)
 800fd76:	f7ff f83f 	bl	800edf8 <vListInsertEnd>
 800fd7a:	e7ee      	b.n	800fd5a <xTaskRemoveFromEventList+0x3e>
 800fd7c:	20002284 	.word	0x20002284
 800fd80:	20002290 	.word	0x20002290
 800fd84:	200021ec 	.word	0x200021ec
 800fd88:	200021e0 	.word	0x200021e0
 800fd8c:	20002304 	.word	0x20002304
 800fd90:	200022c0 	.word	0x200022c0

0800fd94 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd94:	4b03      	ldr	r3, [pc, #12]	; (800fda4 <vTaskSetTimeOutState+0x10>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd9a:	4b03      	ldr	r3, [pc, #12]	; (800fda8 <vTaskSetTimeOutState+0x14>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	6043      	str	r3, [r0, #4]
}
 800fda0:	4770      	bx	lr
 800fda2:	46c0      	nop			; (mov r8, r8)
 800fda4:	200022bc 	.word	0x200022bc
 800fda8:	20002300 	.word	0x20002300

0800fdac <xTaskCheckForTimeOut>:
{
 800fdac:	b570      	push	{r4, r5, r6, lr}
 800fdae:	0004      	movs	r4, r0
 800fdb0:	000e      	movs	r6, r1
	taskENTER_CRITICAL();
 800fdb2:	f000 fc35 	bl	8010620 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800fdb6:	4b10      	ldr	r3, [pc, #64]	; (800fdf8 <xTaskCheckForTimeOut+0x4c>)
 800fdb8:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800fdba:	6833      	ldr	r3, [r6, #0]
 800fdbc:	1c59      	adds	r1, r3, #1
 800fdbe:	d019      	beq.n	800fdf4 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdc0:	490e      	ldr	r1, [pc, #56]	; (800fdfc <xTaskCheckForTimeOut+0x50>)
 800fdc2:	6809      	ldr	r1, [r1, #0]
 800fdc4:	6820      	ldr	r0, [r4, #0]
 800fdc6:	4288      	cmp	r0, r1
 800fdc8:	d003      	beq.n	800fdd2 <xTaskCheckForTimeOut+0x26>
			xReturn = pdTRUE;
 800fdca:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdcc:	6861      	ldr	r1, [r4, #4]
 800fdce:	4291      	cmp	r1, r2
 800fdd0:	d904      	bls.n	800fddc <xTaskCheckForTimeOut+0x30>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fdd2:	6861      	ldr	r1, [r4, #4]
 800fdd4:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800fdd6:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800fdd8:	4283      	cmp	r3, r0
 800fdda:	d803      	bhi.n	800fde4 <xTaskCheckForTimeOut+0x38>
	taskEXIT_CRITICAL();
 800fddc:	f000 fc2c 	bl	8010638 <vPortExitCritical>
}
 800fde0:	0028      	movs	r0, r5
 800fde2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800fde4:	1a8a      	subs	r2, r1, r2
 800fde6:	18d3      	adds	r3, r2, r3
 800fde8:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800fdea:	0020      	movs	r0, r4
 800fdec:	f7ff ffd2 	bl	800fd94 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fdf0:	2500      	movs	r5, #0
 800fdf2:	e7f3      	b.n	800fddc <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 800fdf4:	2500      	movs	r5, #0
 800fdf6:	e7f1      	b.n	800fddc <xTaskCheckForTimeOut+0x30>
 800fdf8:	20002300 	.word	0x20002300
 800fdfc:	200022bc 	.word	0x200022bc

0800fe00 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800fe00:	4b01      	ldr	r3, [pc, #4]	; (800fe08 <vTaskMissedYield+0x8>)
 800fe02:	2201      	movs	r2, #1
 800fe04:	601a      	str	r2, [r3, #0]
}
 800fe06:	4770      	bx	lr
 800fe08:	20002304 	.word	0x20002304

0800fe0c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800fe0c:	4b05      	ldr	r3, [pc, #20]	; (800fe24 <xTaskGetSchedulerState+0x18>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe10:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d004      	beq.n	800fe20 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe16:	4b04      	ldr	r3, [pc, #16]	; (800fe28 <xTaskGetSchedulerState+0x1c>)
 800fe18:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe1a:	4243      	negs	r3, r0
 800fe1c:	4158      	adcs	r0, r3
 800fe1e:	0040      	lsls	r0, r0, #1
	}
 800fe20:	4770      	bx	lr
 800fe22:	46c0      	nop			; (mov r8, r8)
 800fe24:	200022d4 	.word	0x200022d4
 800fe28:	20002284 	.word	0x20002284

0800fe2c <vTaskPriorityInherit>:
	{
 800fe2c:	b570      	push	{r4, r5, r6, lr}
 800fe2e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800fe30:	d01a      	beq.n	800fe68 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe32:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fe34:	4b19      	ldr	r3, [pc, #100]	; (800fe9c <vTaskPriorityInherit+0x70>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe3a:	429a      	cmp	r2, r3
 800fe3c:	d214      	bcs.n	800fe68 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe3e:	6983      	ldr	r3, [r0, #24]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	db05      	blt.n	800fe50 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe44:	4b15      	ldr	r3, [pc, #84]	; (800fe9c <vTaskPriorityInherit+0x70>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fe4a:	2307      	movs	r3, #7
 800fe4c:	1a5b      	subs	r3, r3, r1
 800fe4e:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800fe50:	0093      	lsls	r3, r2, #2
 800fe52:	189b      	adds	r3, r3, r2
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	4a12      	ldr	r2, [pc, #72]	; (800fea0 <vTaskPriorityInherit+0x74>)
 800fe58:	189b      	adds	r3, r3, r2
 800fe5a:	6962      	ldr	r2, [r4, #20]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d004      	beq.n	800fe6a <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe60:	4b0e      	ldr	r3, [pc, #56]	; (800fe9c <vTaskPriorityInherit+0x70>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe66:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800fe68:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fe6a:	1d25      	adds	r5, r4, #4
 800fe6c:	0028      	movs	r0, r5
 800fe6e:	f7fe ffe6 	bl	800ee3e <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe72:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <vTaskPriorityInherit+0x70>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe78:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800fe7a:	4a0a      	ldr	r2, [pc, #40]	; (800fea4 <vTaskPriorityInherit+0x78>)
 800fe7c:	6812      	ldr	r2, [r2, #0]
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d808      	bhi.n	800fe94 <vTaskPriorityInherit+0x68>
 800fe82:	0098      	lsls	r0, r3, #2
 800fe84:	18c0      	adds	r0, r0, r3
 800fe86:	0080      	lsls	r0, r0, #2
 800fe88:	4b05      	ldr	r3, [pc, #20]	; (800fea0 <vTaskPriorityInherit+0x74>)
 800fe8a:	18c0      	adds	r0, r0, r3
 800fe8c:	0029      	movs	r1, r5
 800fe8e:	f7fe ffb3 	bl	800edf8 <vListInsertEnd>
	}
 800fe92:	e7e9      	b.n	800fe68 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800fe94:	4a03      	ldr	r2, [pc, #12]	; (800fea4 <vTaskPriorityInherit+0x78>)
 800fe96:	6013      	str	r3, [r2, #0]
 800fe98:	e7f3      	b.n	800fe82 <vTaskPriorityInherit+0x56>
 800fe9a:	46c0      	nop			; (mov r8, r8)
 800fe9c:	200021e0 	.word	0x200021e0
 800fea0:	200021ec 	.word	0x200021ec
 800fea4:	20002290 	.word	0x20002290

0800fea8 <xTaskPriorityDisinherit>:
	{
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800feac:	d023      	beq.n	800fef6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800feae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800feb0:	3b01      	subs	r3, #1
 800feb2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800feb4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800feb6:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800feb8:	428a      	cmp	r2, r1
 800feba:	d01e      	beq.n	800fefa <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800febc:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d000      	beq.n	800fec4 <xTaskPriorityDisinherit+0x1c>
	}
 800fec2:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fec4:	1d25      	adds	r5, r4, #4
 800fec6:	0028      	movs	r0, r5
 800fec8:	f7fe ffb9 	bl	800ee3e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fecc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800fece:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fed0:	2207      	movs	r2, #7
 800fed2:	1ad2      	subs	r2, r2, r3
 800fed4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800fed6:	4a0a      	ldr	r2, [pc, #40]	; (800ff00 <xTaskPriorityDisinherit+0x58>)
 800fed8:	6812      	ldr	r2, [r2, #0]
 800feda:	4293      	cmp	r3, r2
 800fedc:	d901      	bls.n	800fee2 <xTaskPriorityDisinherit+0x3a>
 800fede:	4a08      	ldr	r2, [pc, #32]	; (800ff00 <xTaskPriorityDisinherit+0x58>)
 800fee0:	6013      	str	r3, [r2, #0]
 800fee2:	0098      	lsls	r0, r3, #2
 800fee4:	18c0      	adds	r0, r0, r3
 800fee6:	0080      	lsls	r0, r0, #2
 800fee8:	4b06      	ldr	r3, [pc, #24]	; (800ff04 <xTaskPriorityDisinherit+0x5c>)
 800feea:	18c0      	adds	r0, r0, r3
 800feec:	0029      	movs	r1, r5
 800feee:	f7fe ff83 	bl	800edf8 <vListInsertEnd>
					xReturn = pdTRUE;
 800fef2:	2001      	movs	r0, #1
 800fef4:	e7e5      	b.n	800fec2 <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800fef6:	2000      	movs	r0, #0
 800fef8:	e7e3      	b.n	800fec2 <xTaskPriorityDisinherit+0x1a>
 800fefa:	2000      	movs	r0, #0
 800fefc:	e7e1      	b.n	800fec2 <xTaskPriorityDisinherit+0x1a>
 800fefe:	46c0      	nop			; (mov r8, r8)
 800ff00:	20002290 	.word	0x20002290
 800ff04:	200021ec 	.word	0x200021ec

0800ff08 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800ff08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ff12:	4b2b      	ldr	r3, [pc, #172]	; (800ffc0 <vTaskList+0xb8>)
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ff18:	6818      	ldr	r0, [r3, #0]
 800ff1a:	0140      	lsls	r0, r0, #5
 800ff1c:	f000 fbfc 	bl	8010718 <pvPortMalloc>
 800ff20:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800ff22:	d04a      	beq.n	800ffba <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ff24:	9903      	ldr	r1, [sp, #12]
 800ff26:	2200      	movs	r2, #0
 800ff28:	f7ff fdf4 	bl	800fb14 <uxTaskGetSystemState>
 800ff2c:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ff2e:	2300      	movs	r3, #0
 800ff30:	9302      	str	r3, [sp, #8]
 800ff32:	9a02      	ldr	r2, [sp, #8]
 800ff34:	9b03      	ldr	r3, [sp, #12]
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d23c      	bcs.n	800ffb4 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ff3a:	4e22      	ldr	r6, [pc, #136]	; (800ffc4 <vTaskList+0xbc>)
 800ff3c:	e027      	b.n	800ff8e <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800ff3e:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d133      	bne.n	800ffac <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ff44:	9b02      	ldr	r3, [sp, #8]
 800ff46:	015b      	lsls	r3, r3, #5
 800ff48:	18fb      	adds	r3, r7, r3
 800ff4a:	6859      	ldr	r1, [r3, #4]
 800ff4c:	0020      	movs	r0, r4
 800ff4e:	f7ff fae1 	bl	800f514 <prvWriteNameToBuffer>
 800ff52:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800ff54:	9b02      	ldr	r3, [sp, #8]
 800ff56:	9a02      	ldr	r2, [sp, #8]
 800ff58:	9902      	ldr	r1, [sp, #8]
 800ff5a:	015b      	lsls	r3, r3, #5
 800ff5c:	18fb      	adds	r3, r7, r3
 800ff5e:	691b      	ldr	r3, [r3, #16]
 800ff60:	0149      	lsls	r1, r1, #5
 800ff62:	1879      	adds	r1, r7, r1
 800ff64:	6889      	ldr	r1, [r1, #8]
 800ff66:	9101      	str	r1, [sp, #4]
 800ff68:	0152      	lsls	r2, r2, #5
 800ff6a:	18ba      	adds	r2, r7, r2
 800ff6c:	8b92      	ldrh	r2, [r2, #28]
 800ff6e:	9200      	str	r2, [sp, #0]
 800ff70:	002a      	movs	r2, r5
 800ff72:	0031      	movs	r1, r6
 800ff74:	f004 fdc0 	bl	8014af8 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800ff78:	0020      	movs	r0, r4
 800ff7a:	f7f0 f8cd 	bl	8000118 <strlen>
 800ff7e:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800ff80:	9b02      	ldr	r3, [sp, #8]
 800ff82:	3301      	adds	r3, #1
 800ff84:	9302      	str	r3, [sp, #8]
 800ff86:	9a02      	ldr	r2, [sp, #8]
 800ff88:	9b03      	ldr	r3, [sp, #12]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d212      	bcs.n	800ffb4 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ff8e:	9b02      	ldr	r3, [sp, #8]
 800ff90:	015b      	lsls	r3, r3, #5
 800ff92:	18fb      	adds	r3, r7, r3
 800ff94:	7b1b      	ldrb	r3, [r3, #12]
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	d00a      	beq.n	800ffb0 <vTaskList+0xa8>
 800ff9a:	b2da      	uxtb	r2, r3
 800ff9c:	2a02      	cmp	r2, #2
 800ff9e:	d9ce      	bls.n	800ff3e <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ffa0:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ffa2:	2b03      	cmp	r3, #3
 800ffa4:	d0ce      	beq.n	800ff44 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ffa6:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ffa8:	2b04      	cmp	r3, #4
 800ffaa:	d0cb      	beq.n	800ff44 <vTaskList+0x3c>
										cStatus = 0x00;
 800ffac:	2500      	movs	r5, #0
										break;
 800ffae:	e7c9      	b.n	800ff44 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ffb0:	2542      	movs	r5, #66	; 0x42
 800ffb2:	e7c7      	b.n	800ff44 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800ffb4:	0038      	movs	r0, r7
 800ffb6:	f000 fc3d 	bl	8010834 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ffba:	b005      	add	sp, #20
 800ffbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffbe:	46c0      	nop			; (mov r8, r8)
 800ffc0:	2000227c 	.word	0x2000227c
 800ffc4:	0801bf28 	.word	0x0801bf28

0800ffc8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800ffc8:	b570      	push	{r4, r5, r6, lr}
 800ffca:	b084      	sub	sp, #16
 800ffcc:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800ffce:	2300      	movs	r3, #0
 800ffd0:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800ffd2:	4b26      	ldr	r3, [pc, #152]	; (801006c <vTaskGetRunTimeStats+0xa4>)
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800ffd8:	6818      	ldr	r0, [r3, #0]
 800ffda:	0140      	lsls	r0, r0, #5
 800ffdc:	f000 fb9c 	bl	8010718 <pvPortMalloc>
 800ffe0:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800ffe2:	d014      	beq.n	801000e <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800ffe4:	9903      	ldr	r1, [sp, #12]
 800ffe6:	aa01      	add	r2, sp, #4
 800ffe8:	f7ff fd94 	bl	800fb14 <uxTaskGetSystemState>
 800ffec:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800ffee:	2164      	movs	r1, #100	; 0x64
 800fff0:	9801      	ldr	r0, [sp, #4]
 800fff2:	f7f0 f8ad 	bl	8000150 <__udivsi3>
 800fff6:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800fff8:	2800      	cmp	r0, #0
 800fffa:	d005      	beq.n	8010008 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800fffc:	2300      	movs	r3, #0
 800fffe:	9302      	str	r3, [sp, #8]
 8010000:	9a02      	ldr	r2, [sp, #8]
 8010002:	9b03      	ldr	r3, [sp, #12]
 8010004:	429a      	cmp	r2, r3
 8010006:	d316      	bcc.n	8010036 <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010008:	0030      	movs	r0, r6
 801000a:	f000 fc13 	bl	8010834 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801000e:	b004      	add	sp, #16
 8010010:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 8010012:	9b02      	ldr	r3, [sp, #8]
 8010014:	015b      	lsls	r3, r3, #5
 8010016:	18f3      	adds	r3, r6, r3
 8010018:	699a      	ldr	r2, [r3, #24]
 801001a:	4915      	ldr	r1, [pc, #84]	; (8010070 <vTaskGetRunTimeStats+0xa8>)
 801001c:	f004 fd6c 	bl	8014af8 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8010020:	0020      	movs	r0, r4
 8010022:	f7f0 f879 	bl	8000118 <strlen>
 8010026:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010028:	9b02      	ldr	r3, [sp, #8]
 801002a:	3301      	adds	r3, #1
 801002c:	9302      	str	r3, [sp, #8]
 801002e:	9a02      	ldr	r2, [sp, #8]
 8010030:	9b03      	ldr	r3, [sp, #12]
 8010032:	429a      	cmp	r2, r3
 8010034:	d2e8      	bcs.n	8010008 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8010036:	9b02      	ldr	r3, [sp, #8]
 8010038:	015b      	lsls	r3, r3, #5
 801003a:	18f3      	adds	r3, r6, r3
 801003c:	9901      	ldr	r1, [sp, #4]
 801003e:	6998      	ldr	r0, [r3, #24]
 8010040:	f7f0 f886 	bl	8000150 <__udivsi3>
 8010044:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8010046:	9b02      	ldr	r3, [sp, #8]
 8010048:	015b      	lsls	r3, r3, #5
 801004a:	18f3      	adds	r3, r6, r3
 801004c:	6859      	ldr	r1, [r3, #4]
 801004e:	0020      	movs	r0, r4
 8010050:	f7ff fa60 	bl	800f514 <prvWriteNameToBuffer>
 8010054:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 8010056:	2d00      	cmp	r5, #0
 8010058:	d0db      	beq.n	8010012 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 801005a:	9b02      	ldr	r3, [sp, #8]
 801005c:	015b      	lsls	r3, r3, #5
 801005e:	18f3      	adds	r3, r6, r3
 8010060:	699a      	ldr	r2, [r3, #24]
 8010062:	002b      	movs	r3, r5
 8010064:	4903      	ldr	r1, [pc, #12]	; (8010074 <vTaskGetRunTimeStats+0xac>)
 8010066:	f004 fd47 	bl	8014af8 <sprintf>
 801006a:	e7d9      	b.n	8010020 <vTaskGetRunTimeStats+0x58>
 801006c:	2000227c 	.word	0x2000227c
 8010070:	0801bf1c 	.word	0x0801bf1c
 8010074:	0801bf10 	.word	0x0801bf10

08010078 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010078:	4b05      	ldr	r3, [pc, #20]	; (8010090 <pvTaskIncrementMutexHeldCount+0x18>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d004      	beq.n	801008a <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010080:	4b03      	ldr	r3, [pc, #12]	; (8010090 <pvTaskIncrementMutexHeldCount+0x18>)
 8010082:	681a      	ldr	r2, [r3, #0]
 8010084:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8010086:	3301      	adds	r3, #1
 8010088:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 801008a:	4b01      	ldr	r3, [pc, #4]	; (8010090 <pvTaskIncrementMutexHeldCount+0x18>)
 801008c:	6818      	ldr	r0, [r3, #0]
	}
 801008e:	4770      	bx	lr
 8010090:	200021e0 	.word	0x200021e0

08010094 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010094:	b570      	push	{r4, r5, r6, lr}
 8010096:	0005      	movs	r5, r0
 8010098:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801009a:	f000 fac1 	bl	8010620 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801009e:	4b20      	ldr	r3, [pc, #128]	; (8010120 <ulTaskNotifyTake+0x8c>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d106      	bne.n	80100b6 <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80100a8:	4b1d      	ldr	r3, [pc, #116]	; (8010120 <ulTaskNotifyTake+0x8c>)
 80100aa:	681a      	ldr	r2, [r3, #0]
 80100ac:	235c      	movs	r3, #92	; 0x5c
 80100ae:	2101      	movs	r1, #1
 80100b0:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80100b2:	2c00      	cmp	r4, #0
 80100b4:	d118      	bne.n	80100e8 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80100b6:	f000 fabf 	bl	8010638 <vPortExitCritical>

		taskENTER_CRITICAL();
 80100ba:	f000 fab1 	bl	8010620 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80100be:	4b18      	ldr	r3, [pc, #96]	; (8010120 <ulTaskNotifyTake+0x8c>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80100c4:	2c00      	cmp	r4, #0
 80100c6:	d006      	beq.n	80100d6 <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 80100c8:	2d00      	cmp	r5, #0
 80100ca:	d123      	bne.n	8010114 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80100cc:	4b14      	ldr	r3, [pc, #80]	; (8010120 <ulTaskNotifyTake+0x8c>)
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80100d2:	3b01      	subs	r3, #1
 80100d4:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80100d6:	4b12      	ldr	r3, [pc, #72]	; (8010120 <ulTaskNotifyTake+0x8c>)
 80100d8:	681a      	ldr	r2, [r3, #0]
 80100da:	235c      	movs	r3, #92	; 0x5c
 80100dc:	2100      	movs	r1, #0
 80100de:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 80100e0:	f000 faaa 	bl	8010638 <vPortExitCritical>

		return ulReturn;
	}
 80100e4:	0020      	movs	r0, r4
 80100e6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80100e8:	4b0d      	ldr	r3, [pc, #52]	; (8010120 <ulTaskNotifyTake+0x8c>)
 80100ea:	6818      	ldr	r0, [r3, #0]
 80100ec:	3004      	adds	r0, #4
 80100ee:	f7fe fea6 	bl	800ee3e <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 80100f2:	1c63      	adds	r3, r4, #1
 80100f4:	d007      	beq.n	8010106 <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 80100f6:	4b0b      	ldr	r3, [pc, #44]	; (8010124 <ulTaskNotifyTake+0x90>)
 80100f8:	6818      	ldr	r0, [r3, #0]
 80100fa:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 80100fc:	f7ff f9e0 	bl	800f4c0 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8010100:	f000 fa82 	bl	8010608 <vPortYield>
 8010104:	e7d7      	b.n	80100b6 <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8010106:	4b06      	ldr	r3, [pc, #24]	; (8010120 <ulTaskNotifyTake+0x8c>)
 8010108:	6819      	ldr	r1, [r3, #0]
 801010a:	3104      	adds	r1, #4
 801010c:	4806      	ldr	r0, [pc, #24]	; (8010128 <ulTaskNotifyTake+0x94>)
 801010e:	f7fe fe73 	bl	800edf8 <vListInsertEnd>
 8010112:	e7f5      	b.n	8010100 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010114:	4b02      	ldr	r3, [pc, #8]	; (8010120 <ulTaskNotifyTake+0x8c>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	2200      	movs	r2, #0
 801011a:	659a      	str	r2, [r3, #88]	; 0x58
 801011c:	e7db      	b.n	80100d6 <ulTaskNotifyTake+0x42>
 801011e:	46c0      	nop			; (mov r8, r8)
 8010120:	200021e0 	.word	0x200021e0
 8010124:	20002300 	.word	0x20002300
 8010128:	200022d8 	.word	0x200022d8

0801012c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801012c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801012e:	0004      	movs	r4, r0
 8010130:	000d      	movs	r5, r1
 8010132:	0016      	movs	r6, r2
 8010134:	001f      	movs	r7, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8010136:	f000 fa73 	bl	8010620 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801013a:	2f00      	cmp	r7, #0
 801013c:	d001      	beq.n	8010142 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801013e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010140:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8010142:	225c      	movs	r2, #92	; 0x5c
 8010144:	5ca3      	ldrb	r3, [r4, r2]
 8010146:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010148:	2102      	movs	r1, #2
 801014a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 801014c:	2e02      	cmp	r6, #2
 801014e:	d014      	beq.n	801017a <xTaskGenericNotify+0x4e>
 8010150:	d907      	bls.n	8010162 <xTaskGenericNotify+0x36>
 8010152:	2e03      	cmp	r6, #3
 8010154:	d015      	beq.n	8010182 <xTaskGenericNotify+0x56>
 8010156:	2e04      	cmp	r6, #4
 8010158:	d108      	bne.n	801016c <xTaskGenericNotify+0x40>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 801015a:	2b02      	cmp	r3, #2
 801015c:	d030      	beq.n	80101c0 <xTaskGenericNotify+0x94>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801015e:	65a5      	str	r5, [r4, #88]	; 0x58
 8010160:	e004      	b.n	801016c <xTaskGenericNotify+0x40>
			switch( eAction )
 8010162:	2e01      	cmp	r6, #1
 8010164:	d102      	bne.n	801016c <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 8010166:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010168:	4315      	orrs	r5, r2
 801016a:	65a5      	str	r5, [r4, #88]	; 0x58
 801016c:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 801016e:	2b01      	cmp	r3, #1
 8010170:	d009      	beq.n	8010186 <xTaskGenericNotify+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010172:	f000 fa61 	bl	8010638 <vPortExitCritical>

		return xReturn;
	}
 8010176:	0028      	movs	r0, r5
 8010178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 801017a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801017c:	3201      	adds	r2, #1
 801017e:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 8010180:	e7f4      	b.n	801016c <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue = ulValue;
 8010182:	65a5      	str	r5, [r4, #88]	; 0x58
					break;
 8010184:	e7f2      	b.n	801016c <xTaskGenericNotify+0x40>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010186:	1d25      	adds	r5, r4, #4
 8010188:	0028      	movs	r0, r5
 801018a:	f7fe fe58 	bl	800ee3e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801018e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010190:	4a0c      	ldr	r2, [pc, #48]	; (80101c4 <xTaskGenericNotify+0x98>)
 8010192:	6812      	ldr	r2, [r2, #0]
 8010194:	4293      	cmp	r3, r2
 8010196:	d901      	bls.n	801019c <xTaskGenericNotify+0x70>
 8010198:	4a0a      	ldr	r2, [pc, #40]	; (80101c4 <xTaskGenericNotify+0x98>)
 801019a:	6013      	str	r3, [r2, #0]
 801019c:	0098      	lsls	r0, r3, #2
 801019e:	18c0      	adds	r0, r0, r3
 80101a0:	0080      	lsls	r0, r0, #2
 80101a2:	4b09      	ldr	r3, [pc, #36]	; (80101c8 <xTaskGenericNotify+0x9c>)
 80101a4:	18c0      	adds	r0, r0, r3
 80101a6:	0029      	movs	r1, r5
 80101a8:	f7fe fe26 	bl	800edf8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101ac:	4b07      	ldr	r3, [pc, #28]	; (80101cc <xTaskGenericNotify+0xa0>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80101b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b4:	2501      	movs	r5, #1
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d9db      	bls.n	8010172 <xTaskGenericNotify+0x46>
					taskYIELD_IF_USING_PREEMPTION();
 80101ba:	f000 fa25 	bl	8010608 <vPortYield>
 80101be:	e7d8      	b.n	8010172 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 80101c0:	2500      	movs	r5, #0
 80101c2:	e7d6      	b.n	8010172 <xTaskGenericNotify+0x46>
 80101c4:	20002290 	.word	0x20002290
 80101c8:	200021ec 	.word	0x200021ec
 80101cc:	200021e0 	.word	0x200021e0

080101d0 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80101d0:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80101d2:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80101d4:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80101d6:	4291      	cmp	r1, r2
 80101d8:	d80b      	bhi.n	80101f2 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80101da:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80101dc:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 80101de:	6983      	ldr	r3, [r0, #24]
 80101e0:	429a      	cmp	r2, r3
 80101e2:	d211      	bcs.n	8010208 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80101e4:	1d01      	adds	r1, r0, #4
 80101e6:	4b09      	ldr	r3, [pc, #36]	; (801020c <prvInsertTimerInActiveList+0x3c>)
 80101e8:	6818      	ldr	r0, [r3, #0]
 80101ea:	f7fe fe11 	bl	800ee10 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80101ee:	2400      	movs	r4, #0
 80101f0:	e00a      	b.n	8010208 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d202      	bcs.n	80101fc <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80101f6:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101f8:	4299      	cmp	r1, r3
 80101fa:	d205      	bcs.n	8010208 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101fc:	1d01      	adds	r1, r0, #4
 80101fe:	4b04      	ldr	r3, [pc, #16]	; (8010210 <prvInsertTimerInActiveList+0x40>)
 8010200:	6818      	ldr	r0, [r3, #0]
 8010202:	f7fe fe05 	bl	800ee10 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010206:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 8010208:	0020      	movs	r0, r4
 801020a:	bd10      	pop	{r4, pc}
 801020c:	2000230c 	.word	0x2000230c
 8010210:	20002308 	.word	0x20002308

08010214 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010214:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010216:	f000 fa03 	bl	8010620 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801021a:	4b10      	ldr	r3, [pc, #64]	; (801025c <prvCheckForValidListAndQueue+0x48>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d002      	beq.n	8010228 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010222:	f000 fa09 	bl	8010638 <vPortExitCritical>
}
 8010226:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010228:	4d0d      	ldr	r5, [pc, #52]	; (8010260 <prvCheckForValidListAndQueue+0x4c>)
 801022a:	0028      	movs	r0, r5
 801022c:	f7fe fdd6 	bl	800eddc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010230:	4c0c      	ldr	r4, [pc, #48]	; (8010264 <prvCheckForValidListAndQueue+0x50>)
 8010232:	0020      	movs	r0, r4
 8010234:	f7fe fdd2 	bl	800eddc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010238:	4b0b      	ldr	r3, [pc, #44]	; (8010268 <prvCheckForValidListAndQueue+0x54>)
 801023a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801023c:	4b0b      	ldr	r3, [pc, #44]	; (801026c <prvCheckForValidListAndQueue+0x58>)
 801023e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8010240:	2200      	movs	r2, #0
 8010242:	2110      	movs	r1, #16
 8010244:	2004      	movs	r0, #4
 8010246:	f7fe fed0 	bl	800efea <xQueueGenericCreate>
 801024a:	4b04      	ldr	r3, [pc, #16]	; (801025c <prvCheckForValidListAndQueue+0x48>)
 801024c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 801024e:	2800      	cmp	r0, #0
 8010250:	d0e7      	beq.n	8010222 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010252:	4907      	ldr	r1, [pc, #28]	; (8010270 <prvCheckForValidListAndQueue+0x5c>)
 8010254:	f7ff f892 	bl	800f37c <vQueueAddToRegistry>
 8010258:	e7e3      	b.n	8010222 <prvCheckForValidListAndQueue+0xe>
 801025a:	46c0      	nop			; (mov r8, r8)
 801025c:	2000233c 	.word	0x2000233c
 8010260:	20002310 	.word	0x20002310
 8010264:	20002324 	.word	0x20002324
 8010268:	20002308 	.word	0x20002308
 801026c:	2000230c 	.word	0x2000230c
 8010270:	0801bf68 	.word	0x0801bf68

08010274 <xTimerCreateTimerTask>:
{
 8010274:	b500      	push	{lr}
 8010276:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8010278:	f7ff ffcc 	bl	8010214 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801027c:	4b09      	ldr	r3, [pc, #36]	; (80102a4 <xTimerCreateTimerTask+0x30>)
 801027e:	681b      	ldr	r3, [r3, #0]
BaseType_t xReturn = pdFAIL;
 8010280:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 8010282:	2b00      	cmp	r3, #0
 8010284:	d00b      	beq.n	801029e <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8010286:	2300      	movs	r3, #0
 8010288:	9303      	str	r3, [sp, #12]
 801028a:	9302      	str	r3, [sp, #8]
 801028c:	9301      	str	r3, [sp, #4]
 801028e:	3303      	adds	r3, #3
 8010290:	9300      	str	r3, [sp, #0]
 8010292:	2300      	movs	r3, #0
 8010294:	22a0      	movs	r2, #160	; 0xa0
 8010296:	4904      	ldr	r1, [pc, #16]	; (80102a8 <xTimerCreateTimerTask+0x34>)
 8010298:	4804      	ldr	r0, [pc, #16]	; (80102ac <xTimerCreateTimerTask+0x38>)
 801029a:	f7ff f953 	bl	800f544 <xTaskGenericCreate>
}
 801029e:	b005      	add	sp, #20
 80102a0:	bd00      	pop	{pc}
 80102a2:	46c0      	nop			; (mov r8, r8)
 80102a4:	2000233c 	.word	0x2000233c
 80102a8:	0801bf70 	.word	0x0801bf70
 80102ac:	080103ed 	.word	0x080103ed

080102b0 <xTimerCreate>:
{
 80102b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102b2:	b083      	sub	sp, #12
 80102b4:	0007      	movs	r7, r0
 80102b6:	000d      	movs	r5, r1
 80102b8:	0016      	movs	r6, r2
 80102ba:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80102bc:	2900      	cmp	r1, #0
 80102be:	d013      	beq.n	80102e8 <xTimerCreate+0x38>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80102c0:	202c      	movs	r0, #44	; 0x2c
 80102c2:	f000 fa29 	bl	8010718 <pvPortMalloc>
 80102c6:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 80102c8:	d00b      	beq.n	80102e2 <xTimerCreate+0x32>
			prvCheckForValidListAndQueue();
 80102ca:	f7ff ffa3 	bl	8010214 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 80102ce:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80102d0:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 80102d2:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 80102d4:	9b01      	ldr	r3, [sp, #4]
 80102d6:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80102d8:	9b08      	ldr	r3, [sp, #32]
 80102da:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80102dc:	1d20      	adds	r0, r4, #4
 80102de:	f7fe fd88 	bl	800edf2 <vListInitialiseItem>
}
 80102e2:	0020      	movs	r0, r4
 80102e4:	b003      	add	sp, #12
 80102e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 80102e8:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 80102ea:	e7fa      	b.n	80102e2 <xTimerCreate+0x32>

080102ec <xTimerGenericCommand>:
{
 80102ec:	b530      	push	{r4, r5, lr}
 80102ee:	b085      	sub	sp, #20
 80102f0:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 80102f2:	4b13      	ldr	r3, [pc, #76]	; (8010340 <xTimerGenericCommand+0x54>)
 80102f4:	681c      	ldr	r4, [r3, #0]
 80102f6:	2c00      	cmp	r4, #0
 80102f8:	d020      	beq.n	801033c <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 80102fa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102fc:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80102fe:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010300:	2905      	cmp	r1, #5
 8010302:	dc13      	bgt.n	801032c <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010304:	f7ff fd82 	bl	800fe0c <xTaskGetSchedulerState>
 8010308:	2802      	cmp	r0, #2
 801030a:	d007      	beq.n	801031c <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801030c:	4b0c      	ldr	r3, [pc, #48]	; (8010340 <xTimerGenericCommand+0x54>)
 801030e:	6818      	ldr	r0, [r3, #0]
 8010310:	2300      	movs	r3, #0
 8010312:	2200      	movs	r2, #0
 8010314:	4669      	mov	r1, sp
 8010316:	f7fe fe92 	bl	800f03e <xQueueGenericSend>
 801031a:	e00d      	b.n	8010338 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801031c:	4b08      	ldr	r3, [pc, #32]	; (8010340 <xTimerGenericCommand+0x54>)
 801031e:	6818      	ldr	r0, [r3, #0]
 8010320:	2300      	movs	r3, #0
 8010322:	9a08      	ldr	r2, [sp, #32]
 8010324:	4669      	mov	r1, sp
 8010326:	f7fe fe8a 	bl	800f03e <xQueueGenericSend>
 801032a:	e005      	b.n	8010338 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801032c:	2300      	movs	r3, #0
 801032e:	002a      	movs	r2, r5
 8010330:	4669      	mov	r1, sp
 8010332:	0020      	movs	r0, r4
 8010334:	f7fe feff 	bl	800f136 <xQueueGenericSendFromISR>
}
 8010338:	b005      	add	sp, #20
 801033a:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 801033c:	2000      	movs	r0, #0
	return xReturn;
 801033e:	e7fb      	b.n	8010338 <xTimerGenericCommand+0x4c>
 8010340:	2000233c 	.word	0x2000233c

08010344 <prvSampleTimeNow>:
{
 8010344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010346:	46d6      	mov	lr, sl
 8010348:	464f      	mov	r7, r9
 801034a:	4646      	mov	r6, r8
 801034c:	b5c0      	push	{r6, r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 8010352:	f7ff fa79 	bl	800f848 <xTaskGetTickCount>
 8010356:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 8010358:	4b21      	ldr	r3, [pc, #132]	; (80103e0 <prvSampleTimeNow+0x9c>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4283      	cmp	r3, r0
 801035e:	d80b      	bhi.n	8010378 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 8010360:	2300      	movs	r3, #0
 8010362:	4642      	mov	r2, r8
 8010364:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 8010366:	4b1e      	ldr	r3, [pc, #120]	; (80103e0 <prvSampleTimeNow+0x9c>)
 8010368:	601f      	str	r7, [r3, #0]
}
 801036a:	0038      	movs	r0, r7
 801036c:	b004      	add	sp, #16
 801036e:	bc1c      	pop	{r2, r3, r4}
 8010370:	4690      	mov	r8, r2
 8010372:	4699      	mov	r9, r3
 8010374:	46a2      	mov	sl, r4
 8010376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010378:	4e1a      	ldr	r6, [pc, #104]	; (80103e4 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801037a:	2300      	movs	r3, #0
 801037c:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801037e:	6833      	ldr	r3, [r6, #0]
 8010380:	681a      	ldr	r2, [r3, #0]
 8010382:	2a00      	cmp	r2, #0
 8010384:	d023      	beq.n	80103ce <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801038c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801038e:	1d25      	adds	r5, r4, #4
 8010390:	0028      	movs	r0, r5
 8010392:	f7fe fd54 	bl	800ee3e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010396:	0020      	movs	r0, r4
 8010398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801039a:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801039c:	69e3      	ldr	r3, [r4, #28]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d1ed      	bne.n	801037e <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80103a2:	69a3      	ldr	r3, [r4, #24]
 80103a4:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80103a6:	459a      	cmp	sl, r3
 80103a8:	d209      	bcs.n	80103be <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80103aa:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80103ac:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80103ae:	4b0d      	ldr	r3, [pc, #52]	; (80103e4 <prvSampleTimeNow+0xa0>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	9303      	str	r3, [sp, #12]
 80103b4:	0029      	movs	r1, r5
 80103b6:	0018      	movs	r0, r3
 80103b8:	f7fe fd2a 	bl	800ee10 <vListInsert>
 80103bc:	e7df      	b.n	801037e <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80103be:	464b      	mov	r3, r9
 80103c0:	9300      	str	r3, [sp, #0]
 80103c2:	4652      	mov	r2, sl
 80103c4:	4649      	mov	r1, r9
 80103c6:	0020      	movs	r0, r4
 80103c8:	f7ff ff90 	bl	80102ec <xTimerGenericCommand>
 80103cc:	e7d7      	b.n	801037e <prvSampleTimeNow+0x3a>
	pxCurrentTimerList = pxOverflowTimerList;
 80103ce:	4a06      	ldr	r2, [pc, #24]	; (80103e8 <prvSampleTimeNow+0xa4>)
 80103d0:	4904      	ldr	r1, [pc, #16]	; (80103e4 <prvSampleTimeNow+0xa0>)
 80103d2:	6810      	ldr	r0, [r2, #0]
 80103d4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80103d6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80103d8:	2301      	movs	r3, #1
 80103da:	4642      	mov	r2, r8
 80103dc:	6013      	str	r3, [r2, #0]
 80103de:	e7c2      	b.n	8010366 <prvSampleTimeNow+0x22>
 80103e0:	20002338 	.word	0x20002338
 80103e4:	20002308 	.word	0x20002308
 80103e8:	2000230c 	.word	0x2000230c

080103ec <prvTimerTask>:
{
 80103ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103ee:	46c6      	mov	lr, r8
 80103f0:	b500      	push	{lr}
 80103f2:	b08c      	sub	sp, #48	; 0x30
		xNextExpireTime = ( TickType_t ) 0U;
 80103f4:	2400      	movs	r4, #0
			switch( xMessage.xMessageID )
 80103f6:	4f55      	ldr	r7, [pc, #340]	; (801054c <prvTimerTask+0x160>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103f8:	4b55      	ldr	r3, [pc, #340]	; (8010550 <prvTimerTask+0x164>)
 80103fa:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80103fc:	681a      	ldr	r2, [r3, #0]
 80103fe:	2a00      	cmp	r2, #0
 8010400:	d100      	bne.n	8010404 <prvTimerTask+0x18>
 8010402:	e096      	b.n	8010532 <prvTimerTask+0x146>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010404:	68db      	ldr	r3, [r3, #12]
 8010406:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 8010408:	f7ff fa16 	bl	800f838 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801040c:	a808      	add	r0, sp, #32
 801040e:	f7ff ff99 	bl	8010344 <prvSampleTimeNow>
 8010412:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010414:	9b08      	ldr	r3, [sp, #32]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d000      	beq.n	801041c <prvTimerTask+0x30>
 801041a:	e093      	b.n	8010544 <prvTimerTask+0x158>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801041c:	42a8      	cmp	r0, r5
 801041e:	d233      	bcs.n	8010488 <prvTimerTask+0x9c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 8010420:	1ba9      	subs	r1, r5, r6
 8010422:	4b4c      	ldr	r3, [pc, #304]	; (8010554 <prvTimerTask+0x168>)
 8010424:	6818      	ldr	r0, [r3, #0]
 8010426:	f7fe ffc1 	bl	800f3ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801042a:	f7ff faa9 	bl	800f980 <xTaskResumeAll>
 801042e:	2800      	cmp	r0, #0
 8010430:	d051      	beq.n	80104d6 <prvTimerTask+0xea>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010432:	4d48      	ldr	r5, [pc, #288]	; (8010554 <prvTimerTask+0x168>)
 8010434:	0023      	movs	r3, r4
 8010436:	0022      	movs	r2, r4
 8010438:	a908      	add	r1, sp, #32
 801043a:	6828      	ldr	r0, [r5, #0]
 801043c:	f7fe fedb 	bl	800f1f6 <xQueueGenericReceive>
 8010440:	2800      	cmp	r0, #0
 8010442:	d0d9      	beq.n	80103f8 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010444:	9b08      	ldr	r3, [sp, #32]
 8010446:	9303      	str	r3, [sp, #12]
 8010448:	2b00      	cmp	r3, #0
 801044a:	da0c      	bge.n	8010466 <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801044c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801044e:	9303      	str	r3, [sp, #12]
 8010450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010452:	9304      	str	r3, [sp, #16]
 8010454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010456:	9305      	str	r3, [sp, #20]
 8010458:	9903      	ldr	r1, [sp, #12]
 801045a:	9804      	ldr	r0, [sp, #16]
 801045c:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801045e:	9b08      	ldr	r3, [sp, #32]
 8010460:	9303      	str	r3, [sp, #12]
 8010462:	2b00      	cmp	r3, #0
 8010464:	dbe6      	blt.n	8010434 <prvTimerTask+0x48>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010466:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010468:	6973      	ldr	r3, [r6, #20]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d002      	beq.n	8010474 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801046e:	1d30      	adds	r0, r6, #4
 8010470:	f7fe fce5 	bl	800ee3e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010474:	a807      	add	r0, sp, #28
 8010476:	f7ff ff65 	bl	8010344 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 801047a:	9b08      	ldr	r3, [sp, #32]
 801047c:	9303      	str	r3, [sp, #12]
 801047e:	2b09      	cmp	r3, #9
 8010480:	d8d8      	bhi.n	8010434 <prvTimerTask+0x48>
 8010482:	009b      	lsls	r3, r3, #2
 8010484:	58fb      	ldr	r3, [r7, r3]
 8010486:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 8010488:	f7ff fa7a 	bl	800f980 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 801048c:	4b30      	ldr	r3, [pc, #192]	; (8010550 <prvTimerTask+0x164>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	68db      	ldr	r3, [r3, #12]
 8010494:	4698      	mov	r8, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010496:	1d18      	adds	r0, r3, #4
 8010498:	f7fe fcd1 	bl	800ee3e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 801049c:	4643      	mov	r3, r8
 801049e:	69db      	ldr	r3, [r3, #28]
 80104a0:	2b01      	cmp	r3, #1
 80104a2:	d004      	beq.n	80104ae <prvTimerTask+0xc2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104a4:	4643      	mov	r3, r8
 80104a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a8:	4640      	mov	r0, r8
 80104aa:	4798      	blx	r3
 80104ac:	e7c1      	b.n	8010432 <prvTimerTask+0x46>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80104ae:	4643      	mov	r3, r8
 80104b0:	699b      	ldr	r3, [r3, #24]
 80104b2:	18e9      	adds	r1, r5, r3
 80104b4:	002b      	movs	r3, r5
 80104b6:	0032      	movs	r2, r6
 80104b8:	4640      	mov	r0, r8
 80104ba:	f7ff fe89 	bl	80101d0 <prvInsertTimerInActiveList>
 80104be:	2801      	cmp	r0, #1
 80104c0:	d1f0      	bne.n	80104a4 <prvTimerTask+0xb8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80104c2:	9400      	str	r4, [sp, #0]
 80104c4:	0023      	movs	r3, r4
 80104c6:	002a      	movs	r2, r5
 80104c8:	0021      	movs	r1, r4
 80104ca:	4640      	mov	r0, r8
 80104cc:	f7ff ff0e 	bl	80102ec <xTimerGenericCommand>
 80104d0:	e7e8      	b.n	80104a4 <prvTimerTask+0xb8>
		xNextExpireTime = ( TickType_t ) 0U;
 80104d2:	0025      	movs	r5, r4
 80104d4:	e7a4      	b.n	8010420 <prvTimerTask+0x34>
					portYIELD_WITHIN_API();
 80104d6:	f000 f897 	bl	8010608 <vPortYield>
 80104da:	e7aa      	b.n	8010432 <prvTimerTask+0x46>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80104dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104de:	69b2      	ldr	r2, [r6, #24]
 80104e0:	4694      	mov	ip, r2
 80104e2:	4463      	add	r3, ip
 80104e4:	0019      	movs	r1, r3
 80104e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e8:	0002      	movs	r2, r0
 80104ea:	0030      	movs	r0, r6
 80104ec:	f7ff fe70 	bl	80101d0 <prvInsertTimerInActiveList>
 80104f0:	2801      	cmp	r0, #1
 80104f2:	d19f      	bne.n	8010434 <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80104f4:	0030      	movs	r0, r6
 80104f6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80104f8:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80104fa:	69f3      	ldr	r3, [r6, #28]
 80104fc:	2b01      	cmp	r3, #1
 80104fe:	d199      	bne.n	8010434 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010502:	69b1      	ldr	r1, [r6, #24]
 8010504:	468c      	mov	ip, r1
 8010506:	4463      	add	r3, ip
 8010508:	001a      	movs	r2, r3
 801050a:	9400      	str	r4, [sp, #0]
 801050c:	0023      	movs	r3, r4
 801050e:	0021      	movs	r1, r4
 8010510:	0030      	movs	r0, r6
 8010512:	f7ff feeb 	bl	80102ec <xTimerGenericCommand>
 8010516:	e78d      	b.n	8010434 <prvTimerTask+0x48>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010518:	9909      	ldr	r1, [sp, #36]	; 0x24
 801051a:	61b1      	str	r1, [r6, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801051c:	1841      	adds	r1, r0, r1
 801051e:	0003      	movs	r3, r0
 8010520:	0002      	movs	r2, r0
 8010522:	0030      	movs	r0, r6
 8010524:	f7ff fe54 	bl	80101d0 <prvInsertTimerInActiveList>
 8010528:	e784      	b.n	8010434 <prvTimerTask+0x48>
					vPortFree( pxTimer );
 801052a:	0030      	movs	r0, r6
 801052c:	f000 f982 	bl	8010834 <vPortFree>
 8010530:	e780      	b.n	8010434 <prvTimerTask+0x48>
	vTaskSuspendAll();
 8010532:	f7ff f981 	bl	800f838 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010536:	a808      	add	r0, sp, #32
 8010538:	f7ff ff04 	bl	8010344 <prvSampleTimeNow>
 801053c:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801053e:	9b08      	ldr	r3, [sp, #32]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d0c6      	beq.n	80104d2 <prvTimerTask+0xe6>
			( void ) xTaskResumeAll();
 8010544:	f7ff fa1c 	bl	800f980 <xTaskResumeAll>
 8010548:	e773      	b.n	8010432 <prvTimerTask+0x46>
 801054a:	46c0      	nop			; (mov r8, r8)
 801054c:	0801bf40 	.word	0x0801bf40
 8010550:	20002308 	.word	0x20002308
 8010554:	2000233c 	.word	0x2000233c

08010558 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8010558:	b510      	push	{r4, lr}
 801055a:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 801055c:	f000 f860 	bl	8010620 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010560:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010562:	f000 f869 	bl	8010638 <vPortExitCritical>

	return pvReturn;
}
 8010566:	0020      	movs	r0, r4
 8010568:	bd10      	pop	{r4, pc}

0801056a <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 801056a:	b672      	cpsid	i
 801056c:	e7fe      	b.n	801056c <prvTaskExitError+0x2>
	...

08010570 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010570:	4a06      	ldr	r2, [pc, #24]	; (801058c <pxCurrentTCBConst2>)
 8010572:	6813      	ldr	r3, [r2, #0]
 8010574:	6818      	ldr	r0, [r3, #0]
 8010576:	3020      	adds	r0, #32
 8010578:	f380 8809 	msr	PSP, r0
 801057c:	2002      	movs	r0, #2
 801057e:	f380 8814 	msr	CONTROL, r0
 8010582:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8010584:	46ae      	mov	lr, r5
 8010586:	b662      	cpsie	i
 8010588:	bd00      	pop	{pc}
 801058a:	46c0      	nop			; (mov r8, r8)

0801058c <pxCurrentTCBConst2>:
 801058c:	200021e0 	.word	0x200021e0

08010590 <pxPortInitialiseStack>:
{
 8010590:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010592:	1f03      	subs	r3, r0, #4
 8010594:	2480      	movs	r4, #128	; 0x80
 8010596:	0464      	lsls	r4, r4, #17
 8010598:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 801059a:	3b04      	subs	r3, #4
 801059c:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801059e:	3b04      	subs	r3, #4
 80105a0:	4902      	ldr	r1, [pc, #8]	; (80105ac <pxPortInitialiseStack+0x1c>)
 80105a2:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80105a4:	3b14      	subs	r3, #20
 80105a6:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80105a8:	3840      	subs	r0, #64	; 0x40
}
 80105aa:	bd10      	pop	{r4, pc}
 80105ac:	0801056b 	.word	0x0801056b

080105b0 <SVC_Handler>:
}
 80105b0:	4770      	bx	lr
	...

080105b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80105b4:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80105b6:	4b0f      	ldr	r3, [pc, #60]	; (80105f4 <xPortStartScheduler+0x40>)
 80105b8:	6819      	ldr	r1, [r3, #0]
 80105ba:	22ff      	movs	r2, #255	; 0xff
 80105bc:	0412      	lsls	r2, r2, #16
 80105be:	430a      	orrs	r2, r1
 80105c0:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80105c2:	6819      	ldr	r1, [r3, #0]
 80105c4:	22ff      	movs	r2, #255	; 0xff
 80105c6:	0612      	lsls	r2, r2, #24
 80105c8:	430a      	orrs	r2, r1
 80105ca:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80105cc:	4b0a      	ldr	r3, [pc, #40]	; (80105f8 <xPortStartScheduler+0x44>)
 80105ce:	6818      	ldr	r0, [r3, #0]
 80105d0:	21fa      	movs	r1, #250	; 0xfa
 80105d2:	0089      	lsls	r1, r1, #2
 80105d4:	f7ef fdbc 	bl	8000150 <__udivsi3>
 80105d8:	3801      	subs	r0, #1
 80105da:	4b08      	ldr	r3, [pc, #32]	; (80105fc <xPortStartScheduler+0x48>)
 80105dc:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80105de:	4b08      	ldr	r3, [pc, #32]	; (8010600 <xPortStartScheduler+0x4c>)
 80105e0:	2207      	movs	r2, #7
 80105e2:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 80105e4:	4b07      	ldr	r3, [pc, #28]	; (8010604 <xPortStartScheduler+0x50>)
 80105e6:	2200      	movs	r2, #0
 80105e8:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 80105ea:	f7ff ffc1 	bl	8010570 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 80105ee:	b672      	cpsid	i
 80105f0:	e7fe      	b.n	80105f0 <xPortStartScheduler+0x3c>
 80105f2:	46c0      	nop			; (mov r8, r8)
 80105f4:	e000ed20 	.word	0xe000ed20
 80105f8:	20000100 	.word	0x20000100
 80105fc:	e000e014 	.word	0xe000e014
 8010600:	e000e010 	.word	0xe000e010
 8010604:	20000114 	.word	0x20000114

08010608 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010608:	4b04      	ldr	r3, [pc, #16]	; (801061c <vPortYield+0x14>)
 801060a:	2280      	movs	r2, #128	; 0x80
 801060c:	0552      	lsls	r2, r2, #21
 801060e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010610:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010614:	f3bf 8f6f 	isb	sy
}
 8010618:	4770      	bx	lr
 801061a:	46c0      	nop			; (mov r8, r8)
 801061c:	e000ed04 	.word	0xe000ed04

08010620 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010620:	b672      	cpsid	i
    uxCriticalNesting++;
 8010622:	4a04      	ldr	r2, [pc, #16]	; (8010634 <vPortEnterCritical+0x14>)
 8010624:	6813      	ldr	r3, [r2, #0]
 8010626:	3301      	adds	r3, #1
 8010628:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 801062a:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801062e:	f3bf 8f6f 	isb	sy
}
 8010632:	4770      	bx	lr
 8010634:	20000114 	.word	0x20000114

08010638 <vPortExitCritical>:
    uxCriticalNesting--;
 8010638:	4a03      	ldr	r2, [pc, #12]	; (8010648 <vPortExitCritical+0x10>)
 801063a:	6813      	ldr	r3, [r2, #0]
 801063c:	3b01      	subs	r3, #1
 801063e:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8010640:	2b00      	cmp	r3, #0
 8010642:	d100      	bne.n	8010646 <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 8010644:	b662      	cpsie	i
}
 8010646:	4770      	bx	lr
 8010648:	20000114 	.word	0x20000114

0801064c <ulSetInterruptMaskFromISR>:
	__asm volatile(
 801064c:	f3ef 8010 	mrs	r0, PRIMASK
 8010650:	b672      	cpsid	i
 8010652:	4770      	bx	lr
}
 8010654:	2000      	movs	r0, #0

08010656 <vClearInterruptMaskFromISR>:
	__asm volatile(
 8010656:	f380 8810 	msr	PRIMASK, r0
 801065a:	4770      	bx	lr

0801065c <PendSV_Handler>:
	__asm volatile
 801065c:	f3ef 8009 	mrs	r0, PSP
 8010660:	4b0e      	ldr	r3, [pc, #56]	; (801069c <pxCurrentTCBConst>)
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	3820      	subs	r0, #32
 8010666:	6010      	str	r0, [r2, #0]
 8010668:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801066a:	4644      	mov	r4, r8
 801066c:	464d      	mov	r5, r9
 801066e:	4656      	mov	r6, sl
 8010670:	465f      	mov	r7, fp
 8010672:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010674:	b508      	push	{r3, lr}
 8010676:	b672      	cpsid	i
 8010678:	f7ff fa9e 	bl	800fbb8 <vTaskSwitchContext>
 801067c:	b662      	cpsie	i
 801067e:	bc0c      	pop	{r2, r3}
 8010680:	6811      	ldr	r1, [r2, #0]
 8010682:	6808      	ldr	r0, [r1, #0]
 8010684:	3010      	adds	r0, #16
 8010686:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010688:	46a0      	mov	r8, r4
 801068a:	46a9      	mov	r9, r5
 801068c:	46b2      	mov	sl, r6
 801068e:	46bb      	mov	fp, r7
 8010690:	f380 8809 	msr	PSP, r0
 8010694:	3820      	subs	r0, #32
 8010696:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8010698:	4718      	bx	r3
 801069a:	46c0      	nop			; (mov r8, r8)

0801069c <pxCurrentTCBConst>:
 801069c:	200021e0 	.word	0x200021e0

080106a0 <xPortSysTickHandler>:
{
 80106a0:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80106a2:	f7ff ffd3 	bl	801064c <ulSetInterruptMaskFromISR>
 80106a6:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80106a8:	f7ff f8da 	bl	800f860 <xTaskIncrementTick>
 80106ac:	2800      	cmp	r0, #0
 80106ae:	d003      	beq.n	80106b8 <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80106b0:	4b03      	ldr	r3, [pc, #12]	; (80106c0 <xPortSysTickHandler+0x20>)
 80106b2:	2280      	movs	r2, #128	; 0x80
 80106b4:	0552      	lsls	r2, r2, #21
 80106b6:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80106b8:	0020      	movs	r0, r4
 80106ba:	f7ff ffcc 	bl	8010656 <vClearInterruptMaskFromISR>
}
 80106be:	bd10      	pop	{r4, pc}
 80106c0:	e000ed04 	.word	0xe000ed04

080106c4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80106c4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80106c6:	4a12      	ldr	r2, [pc, #72]	; (8010710 <prvInsertBlockIntoFreeList+0x4c>)
 80106c8:	e000      	b.n	80106cc <prvInsertBlockIntoFreeList+0x8>
 80106ca:	001a      	movs	r2, r3
 80106cc:	6813      	ldr	r3, [r2, #0]
 80106ce:	4283      	cmp	r3, r0
 80106d0:	d3fb      	bcc.n	80106ca <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80106d2:	6851      	ldr	r1, [r2, #4]
 80106d4:	1854      	adds	r4, r2, r1
 80106d6:	42a0      	cmp	r0, r4
 80106d8:	d008      	beq.n	80106ec <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80106da:	6841      	ldr	r1, [r0, #4]
 80106dc:	1844      	adds	r4, r0, r1
 80106de:	42a3      	cmp	r3, r4
 80106e0:	d009      	beq.n	80106f6 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80106e2:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80106e4:	4290      	cmp	r0, r2
 80106e6:	d000      	beq.n	80106ea <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80106e8:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106ea:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80106ec:	6840      	ldr	r0, [r0, #4]
 80106ee:	1841      	adds	r1, r0, r1
 80106f0:	6051      	str	r1, [r2, #4]
 80106f2:	0010      	movs	r0, r2
 80106f4:	e7f1      	b.n	80106da <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80106f6:	4c07      	ldr	r4, [pc, #28]	; (8010714 <prvInsertBlockIntoFreeList+0x50>)
 80106f8:	6824      	ldr	r4, [r4, #0]
 80106fa:	42a3      	cmp	r3, r4
 80106fc:	d006      	beq.n	801070c <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	1859      	adds	r1, r3, r1
 8010702:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010704:	6813      	ldr	r3, [r2, #0]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	6003      	str	r3, [r0, #0]
 801070a:	e7eb      	b.n	80106e4 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801070c:	6003      	str	r3, [r0, #0]
 801070e:	e7e9      	b.n	80106e4 <prvInsertBlockIntoFreeList+0x20>
 8010710:	20006d88 	.word	0x20006d88
 8010714:	20002340 	.word	0x20002340

08010718 <pvPortMalloc>:
{
 8010718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801071a:	0004      	movs	r4, r0
	vTaskSuspendAll();
 801071c:	f7ff f88c 	bl	800f838 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010720:	4b3d      	ldr	r3, [pc, #244]	; (8010818 <pvPortMalloc+0x100>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d015      	beq.n	8010754 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010728:	4b3c      	ldr	r3, [pc, #240]	; (801081c <pvPortMalloc+0x104>)
 801072a:	681e      	ldr	r6, [r3, #0]
 801072c:	4234      	tst	r4, r6
 801072e:	d136      	bne.n	801079e <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8010730:	2c00      	cmp	r4, #0
 8010732:	d03b      	beq.n	80107ac <pvPortMalloc+0x94>
				xWantedSize += xHeapStructSize;
 8010734:	0022      	movs	r2, r4
 8010736:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010738:	0753      	lsls	r3, r2, #29
 801073a:	d002      	beq.n	8010742 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801073c:	2307      	movs	r3, #7
 801073e:	439a      	bics	r2, r3
 8010740:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010742:	2a00      	cmp	r2, #0
 8010744:	d032      	beq.n	80107ac <pvPortMalloc+0x94>
 8010746:	4b36      	ldr	r3, [pc, #216]	; (8010820 <pvPortMalloc+0x108>)
 8010748:	681f      	ldr	r7, [r3, #0]
 801074a:	4297      	cmp	r7, r2
 801074c:	d331      	bcc.n	80107b2 <pvPortMalloc+0x9a>
				pxBlock = xStart.pxNextFreeBlock;
 801074e:	4935      	ldr	r1, [pc, #212]	; (8010824 <pvPortMalloc+0x10c>)
 8010750:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010752:	e033      	b.n	80107bc <pvPortMalloc+0xa4>
	ulAddress = ( uint32_t ) ucHeap;
 8010754:	4a34      	ldr	r2, [pc, #208]	; (8010828 <pvPortMalloc+0x110>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010756:	0753      	lsls	r3, r2, #29
 8010758:	d01f      	beq.n	801079a <pvPortMalloc+0x82>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 801075a:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801075c:	2307      	movs	r3, #7
 801075e:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8010760:	4b32      	ldr	r3, [pc, #200]	; (801082c <pvPortMalloc+0x114>)
 8010762:	469c      	mov	ip, r3
 8010764:	4462      	add	r2, ip
 8010766:	1a53      	subs	r3, r2, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010768:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801076a:	482e      	ldr	r0, [pc, #184]	; (8010824 <pvPortMalloc+0x10c>)
 801076c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801076e:	2100      	movs	r1, #0
 8010770:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010772:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010774:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010776:	2007      	movs	r0, #7
 8010778:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 801077a:	4827      	ldr	r0, [pc, #156]	; (8010818 <pvPortMalloc+0x100>)
 801077c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 801077e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010780:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8010782:	1a99      	subs	r1, r3, r2
 8010784:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010786:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010788:	4b29      	ldr	r3, [pc, #164]	; (8010830 <pvPortMalloc+0x118>)
 801078a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801078c:	4b24      	ldr	r3, [pc, #144]	; (8010820 <pvPortMalloc+0x108>)
 801078e:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010790:	4b22      	ldr	r3, [pc, #136]	; (801081c <pvPortMalloc+0x104>)
 8010792:	2280      	movs	r2, #128	; 0x80
 8010794:	0612      	lsls	r2, r2, #24
 8010796:	601a      	str	r2, [r3, #0]
 8010798:	e7c6      	b.n	8010728 <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801079a:	4b24      	ldr	r3, [pc, #144]	; (801082c <pvPortMalloc+0x114>)
 801079c:	e7e5      	b.n	801076a <pvPortMalloc+0x52>
	( void ) xTaskResumeAll();
 801079e:	f7ff f8ef 	bl	800f980 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80107a2:	f7fd fbe1 	bl	800df68 <vApplicationMallocFailedHook>
 80107a6:	2500      	movs	r5, #0
}
 80107a8:	0028      	movs	r0, r5
 80107aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 80107ac:	f7ff f8e8 	bl	800f980 <xTaskResumeAll>
 80107b0:	e7f7      	b.n	80107a2 <pvPortMalloc+0x8a>
 80107b2:	f7ff f8e5 	bl	800f980 <xTaskResumeAll>
 80107b6:	e7f4      	b.n	80107a2 <pvPortMalloc+0x8a>
 80107b8:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80107ba:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80107bc:	6863      	ldr	r3, [r4, #4]
 80107be:	4293      	cmp	r3, r2
 80107c0:	d202      	bcs.n	80107c8 <pvPortMalloc+0xb0>
 80107c2:	6823      	ldr	r3, [r4, #0]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d1f7      	bne.n	80107b8 <pvPortMalloc+0xa0>
				if( pxBlock != pxEnd )
 80107c8:	4b13      	ldr	r3, [pc, #76]	; (8010818 <pvPortMalloc+0x100>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	42a3      	cmp	r3, r4
 80107ce:	d01a      	beq.n	8010806 <pvPortMalloc+0xee>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80107d0:	680d      	ldr	r5, [r1, #0]
 80107d2:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80107d4:	6823      	ldr	r3, [r4, #0]
 80107d6:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80107d8:	6863      	ldr	r3, [r4, #4]
 80107da:	1a9b      	subs	r3, r3, r2
 80107dc:	2b10      	cmp	r3, #16
 80107de:	d815      	bhi.n	801080c <pvPortMalloc+0xf4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80107e0:	6863      	ldr	r3, [r4, #4]
 80107e2:	1aff      	subs	r7, r7, r3
 80107e4:	4a0e      	ldr	r2, [pc, #56]	; (8010820 <pvPortMalloc+0x108>)
 80107e6:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80107e8:	4a11      	ldr	r2, [pc, #68]	; (8010830 <pvPortMalloc+0x118>)
 80107ea:	6812      	ldr	r2, [r2, #0]
 80107ec:	4297      	cmp	r7, r2
 80107ee:	d201      	bcs.n	80107f4 <pvPortMalloc+0xdc>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80107f0:	4a0f      	ldr	r2, [pc, #60]	; (8010830 <pvPortMalloc+0x118>)
 80107f2:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80107f4:	431e      	orrs	r6, r3
 80107f6:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80107f8:	2300      	movs	r3, #0
 80107fa:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 80107fc:	f7ff f8c0 	bl	800f980 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010800:	2d00      	cmp	r5, #0
 8010802:	d1d1      	bne.n	80107a8 <pvPortMalloc+0x90>
 8010804:	e7cd      	b.n	80107a2 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 8010806:	f7ff f8bb 	bl	800f980 <xTaskResumeAll>
 801080a:	e7ca      	b.n	80107a2 <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801080c:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801080e:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010810:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010812:	f7ff ff57 	bl	80106c4 <prvInsertBlockIntoFreeList>
 8010816:	e7e3      	b.n	80107e0 <pvPortMalloc+0xc8>
 8010818:	20002340 	.word	0x20002340
 801081c:	20006d7c 	.word	0x20006d7c
 8010820:	20006d80 	.word	0x20006d80
 8010824:	20006d88 	.word	0x20006d88
 8010828:	20002344 	.word	0x20002344
 801082c:	00004a38 	.word	0x00004a38
 8010830:	20006d84 	.word	0x20006d84

08010834 <vPortFree>:
{
 8010834:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010836:	2800      	cmp	r0, #0
 8010838:	d00b      	beq.n	8010852 <vPortFree+0x1e>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801083a:	0003      	movs	r3, r0
 801083c:	3b08      	subs	r3, #8
 801083e:	685b      	ldr	r3, [r3, #4]
 8010840:	4a0d      	ldr	r2, [pc, #52]	; (8010878 <vPortFree+0x44>)
 8010842:	6812      	ldr	r2, [r2, #0]
 8010844:	421a      	tst	r2, r3
 8010846:	d004      	beq.n	8010852 <vPortFree+0x1e>
			if( pxLink->pxNextFreeBlock == NULL )
 8010848:	0001      	movs	r1, r0
 801084a:	3908      	subs	r1, #8
 801084c:	6809      	ldr	r1, [r1, #0]
 801084e:	2900      	cmp	r1, #0
 8010850:	d000      	beq.n	8010854 <vPortFree+0x20>
}
 8010852:	bd10      	pop	{r4, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010854:	3808      	subs	r0, #8
 8010856:	0004      	movs	r4, r0
 8010858:	4393      	bics	r3, r2
 801085a:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 801085c:	f7fe ffec 	bl	800f838 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010860:	4a06      	ldr	r2, [pc, #24]	; (801087c <vPortFree+0x48>)
 8010862:	6863      	ldr	r3, [r4, #4]
 8010864:	6811      	ldr	r1, [r2, #0]
 8010866:	468c      	mov	ip, r1
 8010868:	4463      	add	r3, ip
 801086a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801086c:	0020      	movs	r0, r4
 801086e:	f7ff ff29 	bl	80106c4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010872:	f7ff f885 	bl	800f980 <xTaskResumeAll>
}
 8010876:	e7ec      	b.n	8010852 <vPortFree+0x1e>
 8010878:	20006d7c 	.word	0x20006d7c
 801087c:	20006d80 	.word	0x20006d80

08010880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010880:	b510      	push	{r4, lr}
 8010882:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010884:	f002 fb40 	bl	8012f08 <HAL_RCC_GetHCLKFreq>
 8010888:	21fa      	movs	r1, #250	; 0xfa
 801088a:	0089      	lsls	r1, r1, #2
 801088c:	f7ef fc60 	bl	8000150 <__udivsi3>
 8010890:	f000 fb4c 	bl	8010f2c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010894:	2001      	movs	r0, #1
 8010896:	2200      	movs	r2, #0
 8010898:	0021      	movs	r1, r4
 801089a:	4240      	negs	r0, r0
 801089c:	f000 fafe 	bl	8010e9c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80108a0:	2000      	movs	r0, #0
 80108a2:	bd10      	pop	{r4, pc}

080108a4 <HAL_Init>:
{
 80108a4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80108a6:	4a06      	ldr	r2, [pc, #24]	; (80108c0 <HAL_Init+0x1c>)
 80108a8:	6813      	ldr	r3, [r2, #0]
 80108aa:	2110      	movs	r1, #16
 80108ac:	430b      	orrs	r3, r1
 80108ae:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80108b0:	2000      	movs	r0, #0
 80108b2:	f7ff ffe5 	bl	8010880 <HAL_InitTick>
  HAL_MspInit();
 80108b6:	f001 fecf 	bl	8012658 <HAL_MspInit>
}
 80108ba:	2000      	movs	r0, #0
 80108bc:	bd10      	pop	{r4, pc}
 80108be:	46c0      	nop			; (mov r8, r8)
 80108c0:	40022000 	.word	0x40022000

080108c4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80108c4:	4a02      	ldr	r2, [pc, #8]	; (80108d0 <HAL_IncTick+0xc>)
 80108c6:	6813      	ldr	r3, [r2, #0]
 80108c8:	3301      	adds	r3, #1
 80108ca:	6013      	str	r3, [r2, #0]
}
 80108cc:	4770      	bx	lr
 80108ce:	46c0      	nop			; (mov r8, r8)
 80108d0:	20006d90 	.word	0x20006d90

080108d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80108d4:	4b01      	ldr	r3, [pc, #4]	; (80108dc <HAL_GetTick+0x8>)
 80108d6:	6818      	ldr	r0, [r3, #0]
}
 80108d8:	4770      	bx	lr
 80108da:	46c0      	nop			; (mov r8, r8)
 80108dc:	20006d90 	.word	0x20006d90

080108e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80108e0:	b510      	push	{r4, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80108e6:	f7ff fff5 	bl	80108d4 <HAL_GetTick>
 80108ea:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80108ec:	f7ff fff2 	bl	80108d4 <HAL_GetTick>
 80108f0:	9b01      	ldr	r3, [sp, #4]
 80108f2:	1b00      	subs	r0, r0, r4
 80108f4:	4298      	cmp	r0, r3
 80108f6:	d3f9      	bcc.n	80108ec <HAL_Delay+0xc>
  {
  }
}
 80108f8:	b002      	add	sp, #8
 80108fa:	bd10      	pop	{r4, pc}

080108fc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80108fc:	4b01      	ldr	r3, [pc, #4]	; (8010904 <HAL_GetREVID+0x8>)
 80108fe:	6818      	ldr	r0, [r3, #0]
 8010900:	0c00      	lsrs	r0, r0, #16
}
 8010902:	4770      	bx	lr
 8010904:	40015800 	.word	0x40015800

08010908 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010908:	4b02      	ldr	r3, [pc, #8]	; (8010914 <HAL_GetDEVID+0xc>)
 801090a:	6818      	ldr	r0, [r3, #0]
 801090c:	0500      	lsls	r0, r0, #20
 801090e:	0d00      	lsrs	r0, r0, #20
}
 8010910:	4770      	bx	lr
 8010912:	46c0      	nop			; (mov r8, r8)
 8010914:	40015800 	.word	0x40015800

08010918 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010918:	b570      	push	{r4, r5, r6, lr}
 801091a:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 801091c:	6803      	ldr	r3, [r0, #0]
 801091e:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010920:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010922:	0752      	lsls	r2, r2, #29
 8010924:	d521      	bpl.n	801096a <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010926:	689a      	ldr	r2, [r3, #8]
 8010928:	0752      	lsls	r2, r2, #29
 801092a:	d506      	bpl.n	801093a <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 801092c:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801092e:	0792      	lsls	r2, r2, #30
 8010930:	d403      	bmi.n	801093a <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010932:	689a      	ldr	r2, [r3, #8]
 8010934:	2110      	movs	r1, #16
 8010936:	430a      	orrs	r2, r1
 8010938:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 801093a:	f7ff ffcb 	bl	80108d4 <HAL_GetTick>
 801093e:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010940:	2504      	movs	r5, #4
 8010942:	6823      	ldr	r3, [r4, #0]
 8010944:	689b      	ldr	r3, [r3, #8]
 8010946:	421d      	tst	r5, r3
 8010948:	d00e      	beq.n	8010968 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801094a:	f7ff ffc3 	bl	80108d4 <HAL_GetTick>
 801094e:	1b80      	subs	r0, r0, r6
 8010950:	2802      	cmp	r0, #2
 8010952:	d9f6      	bls.n	8010942 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010954:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010956:	2210      	movs	r2, #16
 8010958:	4313      	orrs	r3, r2
 801095a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801095c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801095e:	3a0f      	subs	r2, #15
 8010960:	4313      	orrs	r3, r2
 8010962:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010964:	2001      	movs	r0, #1
 8010966:	e000      	b.n	801096a <ADC_ConversionStop+0x52>
  return HAL_OK;
 8010968:	2000      	movs	r0, #0
}
 801096a:	bd70      	pop	{r4, r5, r6, pc}

0801096c <ADC_Disable>:
{
 801096c:	b570      	push	{r4, r5, r6, lr}
 801096e:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010970:	6802      	ldr	r2, [r0, #0]
 8010972:	6891      	ldr	r1, [r2, #8]
 8010974:	2303      	movs	r3, #3
 8010976:	400b      	ands	r3, r1
  return HAL_OK;
 8010978:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 801097a:	2b01      	cmp	r3, #1
 801097c:	d000      	beq.n	8010980 <ADC_Disable+0x14>
}
 801097e:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010980:	6813      	ldr	r3, [r2, #0]
 8010982:	07db      	lsls	r3, r3, #31
 8010984:	d402      	bmi.n	801098c <ADC_Disable+0x20>
 8010986:	68d3      	ldr	r3, [r2, #12]
 8010988:	041b      	lsls	r3, r3, #16
 801098a:	d5f8      	bpl.n	801097e <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 801098c:	6891      	ldr	r1, [r2, #8]
 801098e:	2305      	movs	r3, #5
 8010990:	400b      	ands	r3, r1
 8010992:	2b01      	cmp	r3, #1
 8010994:	d009      	beq.n	80109aa <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010996:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010998:	2210      	movs	r2, #16
 801099a:	4313      	orrs	r3, r2
 801099c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801099e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80109a0:	3a0f      	subs	r2, #15
 80109a2:	4313      	orrs	r3, r2
 80109a4:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80109a6:	2001      	movs	r0, #1
 80109a8:	e7e9      	b.n	801097e <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80109aa:	6893      	ldr	r3, [r2, #8]
 80109ac:	2102      	movs	r1, #2
 80109ae:	430b      	orrs	r3, r1
 80109b0:	6093      	str	r3, [r2, #8]
 80109b2:	6823      	ldr	r3, [r4, #0]
 80109b4:	2203      	movs	r2, #3
 80109b6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80109b8:	f7ff ff8c 	bl	80108d4 <HAL_GetTick>
 80109bc:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80109be:	2501      	movs	r5, #1
 80109c0:	6823      	ldr	r3, [r4, #0]
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	421d      	tst	r5, r3
 80109c6:	d00e      	beq.n	80109e6 <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80109c8:	f7ff ff84 	bl	80108d4 <HAL_GetTick>
 80109cc:	1b80      	subs	r0, r0, r6
 80109ce:	2802      	cmp	r0, #2
 80109d0:	d9f6      	bls.n	80109c0 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80109d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80109d4:	2210      	movs	r2, #16
 80109d6:	4313      	orrs	r3, r2
 80109d8:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80109da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80109dc:	3a0f      	subs	r2, #15
 80109de:	4313      	orrs	r3, r2
 80109e0:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80109e2:	2001      	movs	r0, #1
 80109e4:	e7cb      	b.n	801097e <ADC_Disable+0x12>
  return HAL_OK;
 80109e6:	2000      	movs	r0, #0
 80109e8:	e7c9      	b.n	801097e <ADC_Disable+0x12>
	...

080109ec <ADC_Enable>:
{
 80109ec:	b570      	push	{r4, r5, r6, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 80109f2:	2300      	movs	r3, #0
 80109f4:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80109f6:	6803      	ldr	r3, [r0, #0]
 80109f8:	6899      	ldr	r1, [r3, #8]
 80109fa:	2203      	movs	r2, #3
 80109fc:	400a      	ands	r2, r1
 80109fe:	2a01      	cmp	r2, #1
 8010a00:	d02d      	beq.n	8010a5e <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010a02:	6899      	ldr	r1, [r3, #8]
 8010a04:	4a20      	ldr	r2, [pc, #128]	; (8010a88 <ADC_Enable+0x9c>)
 8010a06:	4211      	tst	r1, r2
 8010a08:	d131      	bne.n	8010a6e <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 8010a0a:	689a      	ldr	r2, [r3, #8]
 8010a0c:	2101      	movs	r1, #1
 8010a0e:	430a      	orrs	r2, r1
 8010a10:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010a12:	4b1e      	ldr	r3, [pc, #120]	; (8010a8c <ADC_Enable+0xa0>)
 8010a14:	6818      	ldr	r0, [r3, #0]
 8010a16:	491e      	ldr	r1, [pc, #120]	; (8010a90 <ADC_Enable+0xa4>)
 8010a18:	f7ef fb9a 	bl	8000150 <__udivsi3>
 8010a1c:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010a1e:	9b01      	ldr	r3, [sp, #4]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d005      	beq.n	8010a30 <ADC_Enable+0x44>
      wait_loop_index--;
 8010a24:	9b01      	ldr	r3, [sp, #4]
 8010a26:	3b01      	subs	r3, #1
 8010a28:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010a2a:	9b01      	ldr	r3, [sp, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d1f9      	bne.n	8010a24 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010a30:	f7ff ff50 	bl	80108d4 <HAL_GetTick>
 8010a34:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010a36:	2501      	movs	r5, #1
 8010a38:	6823      	ldr	r3, [r4, #0]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	421d      	tst	r5, r3
 8010a3e:	d121      	bne.n	8010a84 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010a40:	f7ff ff48 	bl	80108d4 <HAL_GetTick>
 8010a44:	1b80      	subs	r0, r0, r6
 8010a46:	2802      	cmp	r0, #2
 8010a48:	d9f6      	bls.n	8010a38 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010a4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a4c:	2210      	movs	r2, #16
 8010a4e:	4313      	orrs	r3, r2
 8010a50:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010a54:	3a0f      	subs	r2, #15
 8010a56:	4313      	orrs	r3, r2
 8010a58:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010a5a:	2001      	movs	r0, #1
 8010a5c:	e010      	b.n	8010a80 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010a5e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010a60:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010a62:	07d2      	lsls	r2, r2, #31
 8010a64:	d40c      	bmi.n	8010a80 <ADC_Enable+0x94>
 8010a66:	68da      	ldr	r2, [r3, #12]
 8010a68:	0412      	lsls	r2, r2, #16
 8010a6a:	d5ca      	bpl.n	8010a02 <ADC_Enable+0x16>
 8010a6c:	e008      	b.n	8010a80 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010a6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010a70:	2210      	movs	r2, #16
 8010a72:	4313      	orrs	r3, r2
 8010a74:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010a76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010a78:	3a0f      	subs	r2, #15
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010a7e:	2001      	movs	r0, #1
}
 8010a80:	b002      	add	sp, #8
 8010a82:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010a84:	2000      	movs	r0, #0
 8010a86:	e7fb      	b.n	8010a80 <ADC_Enable+0x94>
 8010a88:	80000017 	.word	0x80000017
 8010a8c:	20000100 	.word	0x20000100
 8010a90:	000f4240 	.word	0x000f4240

08010a94 <HAL_ADC_Init>:
{
 8010a94:	b570      	push	{r4, r5, r6, lr}
 8010a96:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010a98:	d100      	bne.n	8010a9c <HAL_ADC_Init+0x8>
 8010a9a:	e09b      	b.n	8010bd4 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010a9c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d073      	beq.n	8010b8a <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010aa2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010aa4:	06db      	lsls	r3, r3, #27
 8010aa6:	d500      	bpl.n	8010aaa <HAL_ADC_Init+0x16>
 8010aa8:	e08e      	b.n	8010bc8 <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010aaa:	6822      	ldr	r2, [r4, #0]
 8010aac:	6893      	ldr	r3, [r2, #8]
 8010aae:	2104      	movs	r1, #4
 8010ab0:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8010ab2:	d000      	beq.n	8010ab6 <HAL_ADC_Init+0x22>
 8010ab4:	e088      	b.n	8010bc8 <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 8010ab6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010ab8:	4847      	ldr	r0, [pc, #284]	; (8010bd8 <HAL_ADC_Init+0x144>)
 8010aba:	4003      	ands	r3, r0
 8010abc:	3006      	adds	r0, #6
 8010abe:	30ff      	adds	r0, #255	; 0xff
 8010ac0:	4303      	orrs	r3, r0
 8010ac2:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010ac4:	6890      	ldr	r0, [r2, #8]
 8010ac6:	2303      	movs	r3, #3
 8010ac8:	4003      	ands	r3, r0
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d063      	beq.n	8010b96 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010ace:	68d3      	ldr	r3, [r2, #12]
 8010ad0:	2018      	movs	r0, #24
 8010ad2:	4383      	bics	r3, r0
 8010ad4:	68a0      	ldr	r0, [r4, #8]
 8010ad6:	4303      	orrs	r3, r0
 8010ad8:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010ada:	6822      	ldr	r2, [r4, #0]
 8010adc:	6913      	ldr	r3, [r2, #16]
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	089b      	lsrs	r3, r3, #2
 8010ae2:	6860      	ldr	r0, [r4, #4]
 8010ae4:	4303      	orrs	r3, r0
 8010ae6:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010ae8:	6822      	ldr	r2, [r4, #0]
 8010aea:	68d3      	ldr	r3, [r2, #12]
 8010aec:	483b      	ldr	r0, [pc, #236]	; (8010bdc <HAL_ADC_Init+0x148>)
 8010aee:	4003      	ands	r3, r0
 8010af0:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010af2:	69a3      	ldr	r3, [r4, #24]
 8010af4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010af6:	69e3      	ldr	r3, [r4, #28]
 8010af8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010afa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010afc:	6a20      	ldr	r0, [r4, #32]
 8010afe:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010b02:	000e      	movs	r6, r1
 8010b04:	2b01      	cmp	r3, #1
 8010b06:	d001      	beq.n	8010b0c <HAL_ADC_Init+0x78>
 8010b08:	2680      	movs	r6, #128	; 0x80
 8010b0a:	0176      	lsls	r6, r6, #5
 8010b0c:	68e3      	ldr	r3, [r4, #12]
 8010b0e:	431a      	orrs	r2, r3
 8010b10:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010b12:	6923      	ldr	r3, [r4, #16]
 8010b14:	2b02      	cmp	r3, #2
 8010b16:	d045      	beq.n	8010ba4 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010b18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010b1a:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010b1c:	4313      	orrs	r3, r2
 8010b1e:	4333      	orrs	r3, r6
 8010b20:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010b22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010b24:	2a01      	cmp	r2, #1
 8010b26:	d03f      	beq.n	8010ba8 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010b28:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010b2a:	21c2      	movs	r1, #194	; 0xc2
 8010b2c:	31ff      	adds	r1, #255	; 0xff
 8010b2e:	428a      	cmp	r2, r1
 8010b30:	d002      	beq.n	8010b38 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010b32:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010b34:	430a      	orrs	r2, r1
 8010b36:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010b38:	6821      	ldr	r1, [r4, #0]
 8010b3a:	68ca      	ldr	r2, [r1, #12]
 8010b3c:	431a      	orrs	r2, r3
 8010b3e:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010b40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010b42:	2180      	movs	r1, #128	; 0x80
 8010b44:	0549      	lsls	r1, r1, #21
 8010b46:	428a      	cmp	r2, r1
 8010b48:	d002      	beq.n	8010b50 <HAL_ADC_Init+0xbc>
 8010b4a:	3a01      	subs	r2, #1
 8010b4c:	2a06      	cmp	r2, #6
 8010b4e:	d80a      	bhi.n	8010b66 <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010b50:	6820      	ldr	r0, [r4, #0]
 8010b52:	6941      	ldr	r1, [r0, #20]
 8010b54:	2207      	movs	r2, #7
 8010b56:	4391      	bics	r1, r2
 8010b58:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010b5a:	6821      	ldr	r1, [r4, #0]
 8010b5c:	6948      	ldr	r0, [r1, #20]
 8010b5e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010b60:	402a      	ands	r2, r5
 8010b62:	4302      	orrs	r2, r0
 8010b64:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8010b66:	6822      	ldr	r2, [r4, #0]
 8010b68:	68d2      	ldr	r2, [r2, #12]
 8010b6a:	491d      	ldr	r1, [pc, #116]	; (8010be0 <HAL_ADC_Init+0x14c>)
 8010b6c:	400a      	ands	r2, r1
 8010b6e:	429a      	cmp	r2, r3
 8010b70:	d020      	beq.n	8010bb4 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 8010b72:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010b74:	2212      	movs	r2, #18
 8010b76:	4393      	bics	r3, r2
 8010b78:	3a02      	subs	r2, #2
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010b7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010b80:	3a0f      	subs	r2, #15
 8010b82:	4313      	orrs	r3, r2
 8010b84:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8010b86:	2001      	movs	r0, #1
 8010b88:	e023      	b.n	8010bd2 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 8010b8a:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8010b8c:	2240      	movs	r2, #64	; 0x40
 8010b8e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010b90:	f7fc fc12 	bl	800d3b8 <HAL_ADC_MspInit>
 8010b94:	e785      	b.n	8010aa2 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010b96:	6813      	ldr	r3, [r2, #0]
 8010b98:	07db      	lsls	r3, r3, #31
 8010b9a:	d4a5      	bmi.n	8010ae8 <HAL_ADC_Init+0x54>
 8010b9c:	68d3      	ldr	r3, [r2, #12]
 8010b9e:	041b      	lsls	r3, r3, #16
 8010ba0:	d4a2      	bmi.n	8010ae8 <HAL_ADC_Init+0x54>
 8010ba2:	e794      	b.n	8010ace <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010ba4:	2104      	movs	r1, #4
 8010ba6:	e7b7      	b.n	8010b18 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010ba8:	2800      	cmp	r0, #0
 8010baa:	d1bd      	bne.n	8010b28 <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010bac:	2280      	movs	r2, #128	; 0x80
 8010bae:	0252      	lsls	r2, r2, #9
 8010bb0:	4313      	orrs	r3, r2
 8010bb2:	e7b9      	b.n	8010b28 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010bb8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bba:	2203      	movs	r2, #3
 8010bbc:	4393      	bics	r3, r2
 8010bbe:	3a02      	subs	r2, #2
 8010bc0:	4313      	orrs	r3, r2
 8010bc2:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010bc4:	2000      	movs	r0, #0
 8010bc6:	e004      	b.n	8010bd2 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010bc8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bca:	2210      	movs	r2, #16
 8010bcc:	4313      	orrs	r3, r2
 8010bce:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010bd0:	2001      	movs	r0, #1
}
 8010bd2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010bd4:	2001      	movs	r0, #1
 8010bd6:	e7fc      	b.n	8010bd2 <HAL_ADC_Init+0x13e>
 8010bd8:	fffffefd 	.word	0xfffffefd
 8010bdc:	fffe0219 	.word	0xfffe0219
 8010be0:	833fffe7 	.word	0x833fffe7

08010be4 <HAL_ADC_Start>:
{
 8010be4:	b510      	push	{r4, lr}
 8010be6:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010be8:	6803      	ldr	r3, [r0, #0]
 8010bea:	689b      	ldr	r3, [r3, #8]
 8010bec:	075b      	lsls	r3, r3, #29
 8010bee:	d423      	bmi.n	8010c38 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010bf0:	2340      	movs	r3, #64	; 0x40
 8010bf2:	5cc3      	ldrb	r3, [r0, r3]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d021      	beq.n	8010c3c <HAL_ADC_Start+0x58>
 8010bf8:	2340      	movs	r3, #64	; 0x40
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010bfe:	69c3      	ldr	r3, [r0, #28]
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d114      	bne.n	8010c2e <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010c04:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c06:	4a0e      	ldr	r2, [pc, #56]	; (8010c40 <HAL_ADC_Start+0x5c>)
 8010c08:	401a      	ands	r2, r3
 8010c0a:	2380      	movs	r3, #128	; 0x80
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	4313      	orrs	r3, r2
 8010c10:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010c12:	2300      	movs	r3, #0
 8010c14:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010c16:	2240      	movs	r2, #64	; 0x40
 8010c18:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010c1a:	6823      	ldr	r3, [r4, #0]
 8010c1c:	3a24      	subs	r2, #36	; 0x24
 8010c1e:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010c20:	6822      	ldr	r2, [r4, #0]
 8010c22:	6893      	ldr	r3, [r2, #8]
 8010c24:	2104      	movs	r1, #4
 8010c26:	430b      	orrs	r3, r1
 8010c28:	6093      	str	r3, [r2, #8]
 8010c2a:	2000      	movs	r0, #0
}
 8010c2c:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010c2e:	f7ff fedd 	bl	80109ec <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010c32:	2800      	cmp	r0, #0
 8010c34:	d0e6      	beq.n	8010c04 <HAL_ADC_Start+0x20>
 8010c36:	e7f9      	b.n	8010c2c <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8010c38:	2002      	movs	r0, #2
 8010c3a:	e7f7      	b.n	8010c2c <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010c3c:	2002      	movs	r0, #2
 8010c3e:	e7f5      	b.n	8010c2c <HAL_ADC_Start+0x48>
 8010c40:	fffff0fe 	.word	0xfffff0fe

08010c44 <HAL_ADC_Stop>:
{ 
 8010c44:	b510      	push	{r4, lr}
 8010c46:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010c48:	2340      	movs	r3, #64	; 0x40
 8010c4a:	5cc3      	ldrb	r3, [r0, r3]
 8010c4c:	2b01      	cmp	r3, #1
 8010c4e:	d017      	beq.n	8010c80 <HAL_ADC_Stop+0x3c>
 8010c50:	2340      	movs	r3, #64	; 0x40
 8010c52:	2201      	movs	r2, #1
 8010c54:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010c56:	f7ff fe5f 	bl	8010918 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	d003      	beq.n	8010c66 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010c5e:	2340      	movs	r3, #64	; 0x40
 8010c60:	2200      	movs	r2, #0
 8010c62:	54e2      	strb	r2, [r4, r3]
}
 8010c64:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010c66:	0020      	movs	r0, r4
 8010c68:	f7ff fe80 	bl	801096c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010c6c:	2800      	cmp	r0, #0
 8010c6e:	d1f6      	bne.n	8010c5e <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010c70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c72:	4a04      	ldr	r2, [pc, #16]	; (8010c84 <HAL_ADC_Stop+0x40>)
 8010c74:	4013      	ands	r3, r2
 8010c76:	3204      	adds	r2, #4
 8010c78:	32ff      	adds	r2, #255	; 0xff
 8010c7a:	4313      	orrs	r3, r2
 8010c7c:	6463      	str	r3, [r4, #68]	; 0x44
 8010c7e:	e7ee      	b.n	8010c5e <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010c80:	2002      	movs	r0, #2
 8010c82:	e7ef      	b.n	8010c64 <HAL_ADC_Stop+0x20>
 8010c84:	fffffefe 	.word	0xfffffefe

08010c88 <HAL_ADC_PollForConversion>:
{
 8010c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c8a:	0006      	movs	r6, r0
 8010c8c:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010c8e:	6943      	ldr	r3, [r0, #20]
 8010c90:	2b08      	cmp	r3, #8
 8010c92:	d026      	beq.n	8010ce2 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010c94:	6803      	ldr	r3, [r0, #0]
 8010c96:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010c98:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010c9a:	07db      	lsls	r3, r3, #31
 8010c9c:	d418      	bmi.n	8010cd0 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8010c9e:	f7ff fe19 	bl	80108d4 <HAL_GetTick>
 8010ca2:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010ca4:	6832      	ldr	r2, [r6, #0]
 8010ca6:	6813      	ldr	r3, [r2, #0]
 8010ca8:	421d      	tst	r5, r3
 8010caa:	d11c      	bne.n	8010ce6 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8010cac:	1c63      	adds	r3, r4, #1
 8010cae:	d0fa      	beq.n	8010ca6 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010cb0:	2c00      	cmp	r4, #0
 8010cb2:	d004      	beq.n	8010cbe <HAL_ADC_PollForConversion+0x36>
 8010cb4:	f7ff fe0e 	bl	80108d4 <HAL_GetTick>
 8010cb8:	1bc0      	subs	r0, r0, r7
 8010cba:	42a0      	cmp	r0, r4
 8010cbc:	d9f2      	bls.n	8010ca4 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010cbe:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010cc0:	2204      	movs	r2, #4
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010cc6:	2340      	movs	r3, #64	; 0x40
 8010cc8:	2200      	movs	r2, #0
 8010cca:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010ccc:	2003      	movs	r0, #3
 8010cce:	e007      	b.n	8010ce0 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010cd0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010cd2:	2220      	movs	r2, #32
 8010cd4:	4313      	orrs	r3, r2
 8010cd6:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010cd8:	2340      	movs	r3, #64	; 0x40
 8010cda:	2200      	movs	r2, #0
 8010cdc:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010cde:	2001      	movs	r0, #1
}
 8010ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010ce2:	2508      	movs	r5, #8
 8010ce4:	e7db      	b.n	8010c9e <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010ce6:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8010ce8:	2380      	movs	r3, #128	; 0x80
 8010cea:	009b      	lsls	r3, r3, #2
 8010cec:	430b      	orrs	r3, r1
 8010cee:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010cf0:	68d1      	ldr	r1, [r2, #12]
 8010cf2:	23c0      	movs	r3, #192	; 0xc0
 8010cf4:	011b      	lsls	r3, r3, #4
 8010cf6:	4219      	tst	r1, r3
 8010cf8:	d113      	bne.n	8010d22 <HAL_ADC_PollForConversion+0x9a>
 8010cfa:	6a33      	ldr	r3, [r6, #32]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d110      	bne.n	8010d22 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010d00:	6813      	ldr	r3, [r2, #0]
 8010d02:	071b      	lsls	r3, r3, #28
 8010d04:	d50d      	bpl.n	8010d22 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010d06:	6893      	ldr	r3, [r2, #8]
 8010d08:	075b      	lsls	r3, r3, #29
 8010d0a:	d412      	bmi.n	8010d32 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010d0c:	6853      	ldr	r3, [r2, #4]
 8010d0e:	210c      	movs	r1, #12
 8010d10:	438b      	bics	r3, r1
 8010d12:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010d14:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010d16:	4a0b      	ldr	r2, [pc, #44]	; (8010d44 <HAL_ADC_PollForConversion+0xbc>)
 8010d18:	4013      	ands	r3, r2
 8010d1a:	3204      	adds	r2, #4
 8010d1c:	32ff      	adds	r2, #255	; 0xff
 8010d1e:	4313      	orrs	r3, r2
 8010d20:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010d22:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010d24:	69b3      	ldr	r3, [r6, #24]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d1da      	bne.n	8010ce0 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010d2a:	6833      	ldr	r3, [r6, #0]
 8010d2c:	220c      	movs	r2, #12
 8010d2e:	601a      	str	r2, [r3, #0]
 8010d30:	e7d6      	b.n	8010ce0 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010d32:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010d34:	2220      	movs	r2, #32
 8010d36:	4313      	orrs	r3, r2
 8010d38:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010d3a:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010d3c:	3a1f      	subs	r2, #31
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	64b3      	str	r3, [r6, #72]	; 0x48
 8010d42:	e7ee      	b.n	8010d22 <HAL_ADC_PollForConversion+0x9a>
 8010d44:	fffffefe 	.word	0xfffffefe

08010d48 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010d48:	6803      	ldr	r3, [r0, #0]
 8010d4a:	2208      	movs	r2, #8
 8010d4c:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010d4e:	6803      	ldr	r3, [r0, #0]
 8010d50:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010d52:	4770      	bx	lr

08010d54 <HAL_ADC_ConfigChannel>:
{
 8010d54:	b530      	push	{r4, r5, lr}
 8010d56:	b083      	sub	sp, #12
 8010d58:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010d5e:	3340      	adds	r3, #64	; 0x40
 8010d60:	5cc3      	ldrb	r3, [r0, r3]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d100      	bne.n	8010d68 <HAL_ADC_ConfigChannel+0x14>
 8010d66:	e088      	b.n	8010e7a <HAL_ADC_ConfigChannel+0x126>
 8010d68:	2340      	movs	r3, #64	; 0x40
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010d6e:	6803      	ldr	r3, [r0, #0]
 8010d70:	689a      	ldr	r2, [r3, #8]
 8010d72:	0752      	lsls	r2, r2, #29
 8010d74:	d475      	bmi.n	8010e62 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8010d76:	4a42      	ldr	r2, [pc, #264]	; (8010e80 <HAL_ADC_ConfigChannel+0x12c>)
 8010d78:	6848      	ldr	r0, [r1, #4]
 8010d7a:	4290      	cmp	r0, r2
 8010d7c:	d050      	beq.n	8010e20 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010d7e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010d80:	2201      	movs	r2, #1
 8010d82:	680d      	ldr	r5, [r1, #0]
 8010d84:	40aa      	lsls	r2, r5
 8010d86:	4302      	orrs	r2, r0
 8010d88:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010d8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010d8c:	2280      	movs	r2, #128	; 0x80
 8010d8e:	0552      	lsls	r2, r2, #21
 8010d90:	4293      	cmp	r3, r2
 8010d92:	d013      	beq.n	8010dbc <HAL_ADC_ConfigChannel+0x68>
 8010d94:	3b01      	subs	r3, #1
 8010d96:	2b06      	cmp	r3, #6
 8010d98:	d910      	bls.n	8010dbc <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8010d9a:	6822      	ldr	r2, [r4, #0]
 8010d9c:	6950      	ldr	r0, [r2, #20]
 8010d9e:	2307      	movs	r3, #7
 8010da0:	4003      	ands	r3, r0
 8010da2:	6888      	ldr	r0, [r1, #8]
 8010da4:	4298      	cmp	r0, r3
 8010da6:	d009      	beq.n	8010dbc <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010da8:	6950      	ldr	r0, [r2, #20]
 8010daa:	2307      	movs	r3, #7
 8010dac:	4398      	bics	r0, r3
 8010dae:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8010db0:	6822      	ldr	r2, [r4, #0]
 8010db2:	6950      	ldr	r0, [r2, #20]
 8010db4:	688d      	ldr	r5, [r1, #8]
 8010db6:	402b      	ands	r3, r5
 8010db8:	4303      	orrs	r3, r0
 8010dba:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010dbc:	680b      	ldr	r3, [r1, #0]
 8010dbe:	001a      	movs	r2, r3
 8010dc0:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010dc2:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010dc4:	2a02      	cmp	r2, #2
 8010dc6:	d851      	bhi.n	8010e6c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010dc8:	4a2e      	ldr	r2, [pc, #184]	; (8010e84 <HAL_ADC_ConfigChannel+0x130>)
 8010dca:	6810      	ldr	r0, [r2, #0]
 8010dcc:	2b10      	cmp	r3, #16
 8010dce:	d024      	beq.n	8010e1a <HAL_ADC_ConfigChannel+0xc6>
 8010dd0:	3b11      	subs	r3, #17
 8010dd2:	425a      	negs	r2, r3
 8010dd4:	415a      	adcs	r2, r3
 8010dd6:	4253      	negs	r3, r2
 8010dd8:	4a2b      	ldr	r2, [pc, #172]	; (8010e88 <HAL_ADC_ConfigChannel+0x134>)
 8010dda:	4013      	ands	r3, r2
 8010ddc:	2280      	movs	r2, #128	; 0x80
 8010dde:	0452      	lsls	r2, r2, #17
 8010de0:	4694      	mov	ip, r2
 8010de2:	4463      	add	r3, ip
 8010de4:	4303      	orrs	r3, r0
 8010de6:	4a27      	ldr	r2, [pc, #156]	; (8010e84 <HAL_ADC_ConfigChannel+0x130>)
 8010de8:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010dea:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010dec:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010dee:	2b10      	cmp	r3, #16
 8010df0:	d13c      	bne.n	8010e6c <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010df2:	4b26      	ldr	r3, [pc, #152]	; (8010e8c <HAL_ADC_ConfigChannel+0x138>)
 8010df4:	6818      	ldr	r0, [r3, #0]
 8010df6:	4926      	ldr	r1, [pc, #152]	; (8010e90 <HAL_ADC_ConfigChannel+0x13c>)
 8010df8:	f7ef f9aa 	bl	8000150 <__udivsi3>
 8010dfc:	0083      	lsls	r3, r0, #2
 8010dfe:	1818      	adds	r0, r3, r0
 8010e00:	0040      	lsls	r0, r0, #1
 8010e02:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 8010e04:	9b01      	ldr	r3, [sp, #4]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d035      	beq.n	8010e76 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8010e0a:	9b01      	ldr	r3, [sp, #4]
 8010e0c:	3b01      	subs	r3, #1
 8010e0e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010e10:	9b01      	ldr	r3, [sp, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d1f9      	bne.n	8010e0a <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e16:	2000      	movs	r0, #0
 8010e18:	e028      	b.n	8010e6c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010e1a:	2380      	movs	r3, #128	; 0x80
 8010e1c:	041b      	lsls	r3, r3, #16
 8010e1e:	e7e1      	b.n	8010de4 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010e22:	2001      	movs	r0, #1
 8010e24:	680d      	ldr	r5, [r1, #0]
 8010e26:	40a8      	lsls	r0, r5
 8010e28:	4382      	bics	r2, r0
 8010e2a:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010e2c:	680b      	ldr	r3, [r1, #0]
 8010e2e:	001a      	movs	r2, r3
 8010e30:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e32:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010e34:	2a02      	cmp	r2, #2
 8010e36:	d819      	bhi.n	8010e6c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010e38:	4a12      	ldr	r2, [pc, #72]	; (8010e84 <HAL_ADC_ConfigChannel+0x130>)
 8010e3a:	6811      	ldr	r1, [r2, #0]
 8010e3c:	2b10      	cmp	r3, #16
 8010e3e:	d00e      	beq.n	8010e5e <HAL_ADC_ConfigChannel+0x10a>
 8010e40:	3b11      	subs	r3, #17
 8010e42:	425a      	negs	r2, r3
 8010e44:	415a      	adcs	r2, r3
 8010e46:	4252      	negs	r2, r2
 8010e48:	23c0      	movs	r3, #192	; 0xc0
 8010e4a:	041b      	lsls	r3, r3, #16
 8010e4c:	4013      	ands	r3, r2
 8010e4e:	4a11      	ldr	r2, [pc, #68]	; (8010e94 <HAL_ADC_ConfigChannel+0x140>)
 8010e50:	4694      	mov	ip, r2
 8010e52:	4463      	add	r3, ip
 8010e54:	400b      	ands	r3, r1
 8010e56:	4a0b      	ldr	r2, [pc, #44]	; (8010e84 <HAL_ADC_ConfigChannel+0x130>)
 8010e58:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	e006      	b.n	8010e6c <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010e5e:	4b0e      	ldr	r3, [pc, #56]	; (8010e98 <HAL_ADC_ConfigChannel+0x144>)
 8010e60:	e7f8      	b.n	8010e54 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010e62:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010e64:	2220      	movs	r2, #32
 8010e66:	4313      	orrs	r3, r2
 8010e68:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010e6a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010e6c:	2340      	movs	r3, #64	; 0x40
 8010e6e:	2200      	movs	r2, #0
 8010e70:	54e2      	strb	r2, [r4, r3]
}
 8010e72:	b003      	add	sp, #12
 8010e74:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e76:	2000      	movs	r0, #0
 8010e78:	e7f8      	b.n	8010e6c <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 8010e7a:	2002      	movs	r0, #2
 8010e7c:	e7f9      	b.n	8010e72 <HAL_ADC_ConfigChannel+0x11e>
 8010e7e:	46c0      	nop			; (mov r8, r8)
 8010e80:	00001001 	.word	0x00001001
 8010e84:	40012708 	.word	0x40012708
 8010e88:	ff400000 	.word	0xff400000
 8010e8c:	20000100 	.word	0x20000100
 8010e90:	000f4240 	.word	0x000f4240
 8010e94:	feffffff 	.word	0xfeffffff
 8010e98:	ff7fffff 	.word	0xff7fffff

08010e9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010e9c:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	db14      	blt.n	8010ecc <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010ea2:	0883      	lsrs	r3, r0, #2
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	4a15      	ldr	r2, [pc, #84]	; (8010efc <HAL_NVIC_SetPriority+0x60>)
 8010ea8:	4694      	mov	ip, r2
 8010eaa:	4463      	add	r3, ip
 8010eac:	26c0      	movs	r6, #192	; 0xc0
 8010eae:	00b6      	lsls	r6, r6, #2
 8010eb0:	599d      	ldr	r5, [r3, r6]
 8010eb2:	2403      	movs	r4, #3
 8010eb4:	4020      	ands	r0, r4
 8010eb6:	00c0      	lsls	r0, r0, #3
 8010eb8:	22ff      	movs	r2, #255	; 0xff
 8010eba:	0014      	movs	r4, r2
 8010ebc:	4084      	lsls	r4, r0
 8010ebe:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010ec0:	0189      	lsls	r1, r1, #6
 8010ec2:	400a      	ands	r2, r1
 8010ec4:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010ec6:	432a      	orrs	r2, r5
 8010ec8:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010eca:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010ecc:	b2c0      	uxtb	r0, r0
 8010ece:	230f      	movs	r3, #15
 8010ed0:	4003      	ands	r3, r0
 8010ed2:	3b08      	subs	r3, #8
 8010ed4:	089b      	lsrs	r3, r3, #2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4a09      	ldr	r2, [pc, #36]	; (8010f00 <HAL_NVIC_SetPriority+0x64>)
 8010eda:	4694      	mov	ip, r2
 8010edc:	4463      	add	r3, ip
 8010ede:	69dd      	ldr	r5, [r3, #28]
 8010ee0:	2203      	movs	r2, #3
 8010ee2:	4010      	ands	r0, r2
 8010ee4:	00c0      	lsls	r0, r0, #3
 8010ee6:	24ff      	movs	r4, #255	; 0xff
 8010ee8:	0022      	movs	r2, r4
 8010eea:	4082      	lsls	r2, r0
 8010eec:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010eee:	0189      	lsls	r1, r1, #6
 8010ef0:	400c      	ands	r4, r1
 8010ef2:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010ef4:	432c      	orrs	r4, r5
 8010ef6:	61dc      	str	r4, [r3, #28]
 8010ef8:	e7e7      	b.n	8010eca <HAL_NVIC_SetPriority+0x2e>
 8010efa:	46c0      	nop			; (mov r8, r8)
 8010efc:	e000e100 	.word	0xe000e100
 8010f00:	e000ed00 	.word	0xe000ed00

08010f04 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010f04:	231f      	movs	r3, #31
 8010f06:	4018      	ands	r0, r3
 8010f08:	3b1e      	subs	r3, #30
 8010f0a:	4083      	lsls	r3, r0
 8010f0c:	4a01      	ldr	r2, [pc, #4]	; (8010f14 <HAL_NVIC_EnableIRQ+0x10>)
 8010f0e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010f10:	4770      	bx	lr
 8010f12:	46c0      	nop			; (mov r8, r8)
 8010f14:	e000e100 	.word	0xe000e100

08010f18 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010f18:	231f      	movs	r3, #31
 8010f1a:	4018      	ands	r0, r3
 8010f1c:	3b1e      	subs	r3, #30
 8010f1e:	4083      	lsls	r3, r0
 8010f20:	4901      	ldr	r1, [pc, #4]	; (8010f28 <HAL_NVIC_DisableIRQ+0x10>)
 8010f22:	2280      	movs	r2, #128	; 0x80
 8010f24:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010f26:	4770      	bx	lr
 8010f28:	e000e100 	.word	0xe000e100

08010f2c <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010f2c:	1e43      	subs	r3, r0, #1
 8010f2e:	4a0a      	ldr	r2, [pc, #40]	; (8010f58 <HAL_SYSTICK_Config+0x2c>)
 8010f30:	2001      	movs	r0, #1
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d80e      	bhi.n	8010f54 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010f36:	4a09      	ldr	r2, [pc, #36]	; (8010f5c <HAL_SYSTICK_Config+0x30>)
 8010f38:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010f3a:	4809      	ldr	r0, [pc, #36]	; (8010f60 <HAL_SYSTICK_Config+0x34>)
 8010f3c:	6a03      	ldr	r3, [r0, #32]
 8010f3e:	021b      	lsls	r3, r3, #8
 8010f40:	0a1b      	lsrs	r3, r3, #8
 8010f42:	21c0      	movs	r1, #192	; 0xc0
 8010f44:	0609      	lsls	r1, r1, #24
 8010f46:	430b      	orrs	r3, r1
 8010f48:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010f4e:	3307      	adds	r3, #7
 8010f50:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010f52:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010f54:	4770      	bx	lr
 8010f56:	46c0      	nop			; (mov r8, r8)
 8010f58:	00ffffff 	.word	0x00ffffff
 8010f5c:	e000e010 	.word	0xe000e010
 8010f60:	e000ed00 	.word	0xe000ed00

08010f64 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010f64:	2804      	cmp	r0, #4
 8010f66:	d005      	beq.n	8010f74 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010f68:	4a05      	ldr	r2, [pc, #20]	; (8010f80 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010f6a:	6813      	ldr	r3, [r2, #0]
 8010f6c:	2104      	movs	r1, #4
 8010f6e:	438b      	bics	r3, r1
 8010f70:	6013      	str	r3, [r2, #0]
  }
}
 8010f72:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010f74:	4a02      	ldr	r2, [pc, #8]	; (8010f80 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010f76:	6813      	ldr	r3, [r2, #0]
 8010f78:	2104      	movs	r1, #4
 8010f7a:	430b      	orrs	r3, r1
 8010f7c:	6013      	str	r3, [r2, #0]
 8010f7e:	e7f8      	b.n	8010f72 <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010f80:	e000e010 	.word	0xe000e010

08010f84 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f86:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010f88:	0891      	lsrs	r1, r2, #2
 8010f8a:	d013      	beq.n	8010fb4 <CRC_Handle_8+0x30>
 8010f8c:	0034      	movs	r4, r6
 8010f8e:	2303      	movs	r3, #3
 8010f90:	0017      	movs	r7, r2
 8010f92:	439f      	bics	r7, r3
 8010f94:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010f96:	7823      	ldrb	r3, [r4, #0]
 8010f98:	061b      	lsls	r3, r3, #24
 8010f9a:	7865      	ldrb	r5, [r4, #1]
 8010f9c:	042d      	lsls	r5, r5, #16
 8010f9e:	432b      	orrs	r3, r5
 8010fa0:	78e5      	ldrb	r5, [r4, #3]
 8010fa2:	432b      	orrs	r3, r5
 8010fa4:	78a5      	ldrb	r5, [r4, #2]
 8010fa6:	022d      	lsls	r5, r5, #8
 8010fa8:	432b      	orrs	r3, r5
 8010faa:	6805      	ldr	r5, [r0, #0]
 8010fac:	602b      	str	r3, [r5, #0]
 8010fae:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 8010fb0:	42bc      	cmp	r4, r7
 8010fb2:	d1f0      	bne.n	8010f96 <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010fb4:	2303      	movs	r3, #3
 8010fb6:	401a      	ands	r2, r3
 8010fb8:	d01e      	beq.n	8010ff8 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 8010fba:	2a01      	cmp	r2, #1
 8010fbc:	d00a      	beq.n	8010fd4 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010fbe:	2a02      	cmp	r2, #2
 8010fc0:	d10d      	bne.n	8010fde <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010fc2:	0089      	lsls	r1, r1, #2
 8010fc4:	5c72      	ldrb	r2, [r6, r1]
 8010fc6:	0212      	lsls	r2, r2, #8
 8010fc8:	1871      	adds	r1, r6, r1
 8010fca:	784b      	ldrb	r3, [r1, #1]
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	6802      	ldr	r2, [r0, #0]
 8010fd0:	8013      	strh	r3, [r2, #0]
 8010fd2:	e011      	b.n	8010ff8 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010fd4:	0089      	lsls	r1, r1, #2
 8010fd6:	5d8b      	ldrb	r3, [r1, r6]
 8010fd8:	6802      	ldr	r2, [r0, #0]
 8010fda:	7013      	strb	r3, [r2, #0]
 8010fdc:	e00c      	b.n	8010ff8 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010fde:	2a03      	cmp	r2, #3
 8010fe0:	d10a      	bne.n	8010ff8 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010fe2:	0089      	lsls	r1, r1, #2
 8010fe4:	5c72      	ldrb	r2, [r6, r1]
 8010fe6:	0212      	lsls	r2, r2, #8
 8010fe8:	1871      	adds	r1, r6, r1
 8010fea:	784b      	ldrb	r3, [r1, #1]
 8010fec:	4313      	orrs	r3, r2
 8010fee:	6802      	ldr	r2, [r0, #0]
 8010ff0:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010ff2:	788b      	ldrb	r3, [r1, #2]
 8010ff4:	6802      	ldr	r2, [r0, #0]
 8010ff6:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010ff8:	6803      	ldr	r3, [r0, #0]
 8010ffa:	6818      	ldr	r0, [r3, #0]
}
 8010ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ffe <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011000:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8011002:	0852      	lsrs	r2, r2, #1
 8011004:	d00b      	beq.n	801101e <CRC_Handle_16+0x20>
 8011006:	000c      	movs	r4, r1
 8011008:	0097      	lsls	r7, r2, #2
 801100a:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 801100c:	8823      	ldrh	r3, [r4, #0]
 801100e:	041b      	lsls	r3, r3, #16
 8011010:	8866      	ldrh	r6, [r4, #2]
 8011012:	4333      	orrs	r3, r6
 8011014:	6806      	ldr	r6, [r0, #0]
 8011016:	6033      	str	r3, [r6, #0]
 8011018:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 801101a:	42bc      	cmp	r4, r7
 801101c:	d1f6      	bne.n	801100c <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 801101e:	07eb      	lsls	r3, r5, #31
 8011020:	d503      	bpl.n	801102a <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8011022:	0092      	lsls	r2, r2, #2
 8011024:	5a53      	ldrh	r3, [r2, r1]
 8011026:	6802      	ldr	r2, [r0, #0]
 8011028:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801102a:	6803      	ldr	r3, [r0, #0]
 801102c:	6818      	ldr	r0, [r3, #0]
}
 801102e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011030 <HAL_CRC_Init>:
{
 8011030:	b510      	push	{r4, lr}
 8011032:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8011034:	d029      	beq.n	801108a <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8011036:	7f43      	ldrb	r3, [r0, #29]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d01e      	beq.n	801107a <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 801103c:	2302      	movs	r3, #2
 801103e:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8011040:	0020      	movs	r0, r4
 8011042:	f000 f8b1 	bl	80111a8 <HAL_CRCEx_Init>
 8011046:	2800      	cmp	r0, #0
 8011048:	d121      	bne.n	801108e <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801104a:	7963      	ldrb	r3, [r4, #5]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d118      	bne.n	8011082 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8011050:	6823      	ldr	r3, [r4, #0]
 8011052:	2201      	movs	r2, #1
 8011054:	4252      	negs	r2, r2
 8011056:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8011058:	6822      	ldr	r2, [r4, #0]
 801105a:	6893      	ldr	r3, [r2, #8]
 801105c:	2160      	movs	r1, #96	; 0x60
 801105e:	438b      	bics	r3, r1
 8011060:	6961      	ldr	r1, [r4, #20]
 8011062:	430b      	orrs	r3, r1
 8011064:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8011066:	6822      	ldr	r2, [r4, #0]
 8011068:	6893      	ldr	r3, [r2, #8]
 801106a:	2180      	movs	r1, #128	; 0x80
 801106c:	438b      	bics	r3, r1
 801106e:	69a1      	ldr	r1, [r4, #24]
 8011070:	430b      	orrs	r3, r1
 8011072:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8011074:	2301      	movs	r3, #1
 8011076:	7763      	strb	r3, [r4, #29]
}
 8011078:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 801107a:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 801107c:	f7fb f908 	bl	800c290 <HAL_CRC_MspInit>
 8011080:	e7dc      	b.n	801103c <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8011082:	6823      	ldr	r3, [r4, #0]
 8011084:	6922      	ldr	r2, [r4, #16]
 8011086:	611a      	str	r2, [r3, #16]
 8011088:	e7e6      	b.n	8011058 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 801108a:	2001      	movs	r0, #1
 801108c:	e7f4      	b.n	8011078 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 801108e:	2001      	movs	r0, #1
 8011090:	e7f2      	b.n	8011078 <HAL_CRC_Init+0x48>

08011092 <HAL_CRC_Accumulate>:
{
 8011092:	b510      	push	{r4, lr}
 8011094:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8011096:	7f03      	ldrb	r3, [r0, #28]
 8011098:	2b01      	cmp	r3, #1
 801109a:	d024      	beq.n	80110e6 <HAL_CRC_Accumulate+0x54>
 801109c:	2301      	movs	r3, #1
 801109e:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80110a0:	3301      	adds	r3, #1
 80110a2:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80110a4:	6a03      	ldr	r3, [r0, #32]
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d01a      	beq.n	80110e0 <HAL_CRC_Accumulate+0x4e>
 80110aa:	2b03      	cmp	r3, #3
 80110ac:	d007      	beq.n	80110be <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80110ae:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d011      	beq.n	80110d8 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 80110b4:	2301      	movs	r3, #1
 80110b6:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80110b8:	2300      	movs	r3, #0
 80110ba:	7723      	strb	r3, [r4, #28]
}
 80110bc:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80110be:	2a00      	cmp	r2, #0
 80110c0:	d007      	beq.n	80110d2 <HAL_CRC_Accumulate+0x40>
 80110c2:	000b      	movs	r3, r1
 80110c4:	0092      	lsls	r2, r2, #2
 80110c6:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80110c8:	6822      	ldr	r2, [r4, #0]
 80110ca:	cb01      	ldmia	r3!, {r0}
 80110cc:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80110ce:	428b      	cmp	r3, r1
 80110d0:	d1fa      	bne.n	80110c8 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80110d2:	6823      	ldr	r3, [r4, #0]
 80110d4:	6818      	ldr	r0, [r3, #0]
      break;
 80110d6:	e7ed      	b.n	80110b4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80110d8:	0020      	movs	r0, r4
 80110da:	f7ff ff53 	bl	8010f84 <CRC_Handle_8>
      break;
 80110de:	e7e9      	b.n	80110b4 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80110e0:	f7ff ff8d 	bl	8010ffe <CRC_Handle_16>
      break;
 80110e4:	e7e6      	b.n	80110b4 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80110e6:	2002      	movs	r0, #2
 80110e8:	e7e8      	b.n	80110bc <HAL_CRC_Accumulate+0x2a>

080110ea <HAL_CRC_Calculate>:
{
 80110ea:	b570      	push	{r4, r5, r6, lr}
 80110ec:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80110ee:	7f03      	ldrb	r3, [r0, #28]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	d029      	beq.n	8011148 <HAL_CRC_Calculate+0x5e>
 80110f4:	2501      	movs	r5, #1
 80110f6:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80110f8:	2302      	movs	r3, #2
 80110fa:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 80110fc:	6800      	ldr	r0, [r0, #0]
 80110fe:	6883      	ldr	r3, [r0, #8]
 8011100:	432b      	orrs	r3, r5
 8011102:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8011104:	6a23      	ldr	r3, [r4, #32]
 8011106:	2b02      	cmp	r3, #2
 8011108:	d01a      	beq.n	8011140 <HAL_CRC_Calculate+0x56>
 801110a:	2b03      	cmp	r3, #3
 801110c:	d007      	beq.n	801111e <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 801110e:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8011110:	2b01      	cmp	r3, #1
 8011112:	d011      	beq.n	8011138 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8011114:	2301      	movs	r3, #1
 8011116:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8011118:	2300      	movs	r3, #0
 801111a:	7723      	strb	r3, [r4, #28]
}
 801111c:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 801111e:	2a00      	cmp	r2, #0
 8011120:	d007      	beq.n	8011132 <HAL_CRC_Calculate+0x48>
 8011122:	000b      	movs	r3, r1
 8011124:	0092      	lsls	r2, r2, #2
 8011126:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8011128:	6820      	ldr	r0, [r4, #0]
 801112a:	cb20      	ldmia	r3!, {r5}
 801112c:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 801112e:	428b      	cmp	r3, r1
 8011130:	d1fa      	bne.n	8011128 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8011132:	6823      	ldr	r3, [r4, #0]
 8011134:	6818      	ldr	r0, [r3, #0]
      break;
 8011136:	e7ed      	b.n	8011114 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8011138:	0020      	movs	r0, r4
 801113a:	f7ff ff23 	bl	8010f84 <CRC_Handle_8>
      break;
 801113e:	e7e9      	b.n	8011114 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8011140:	0020      	movs	r0, r4
 8011142:	f7ff ff5c 	bl	8010ffe <CRC_Handle_16>
      break;
 8011146:	e7e5      	b.n	8011114 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8011148:	2002      	movs	r0, #2
 801114a:	e7e7      	b.n	801111c <HAL_CRC_Calculate+0x32>

0801114c <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 801114c:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 801114e:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011150:	2501      	movs	r5, #1
 8011152:	002c      	movs	r4, r5
 8011154:	409c      	lsls	r4, r3
 8011156:	4221      	tst	r1, r4
 8011158:	d10b      	bne.n	8011172 <HAL_CRCEx_Polynomial_Set+0x26>
 801115a:	3b01      	subs	r3, #1
 801115c:	d2f9      	bcs.n	8011152 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 801115e:	2a10      	cmp	r2, #16
 8011160:	d01c      	beq.n	801119c <HAL_CRCEx_Polynomial_Set+0x50>
 8011162:	2a18      	cmp	r2, #24
 8011164:	d01e      	beq.n	80111a4 <HAL_CRCEx_Polynomial_Set+0x58>
 8011166:	2a08      	cmp	r2, #8
 8011168:	d109      	bne.n	801117e <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 801116a:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 801116c:	2b0f      	cmp	r3, #15
 801116e:	d906      	bls.n	801117e <HAL_CRCEx_Polynomial_Set+0x32>
 8011170:	e00e      	b.n	8011190 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8011172:	2a10      	cmp	r2, #16
 8011174:	d012      	beq.n	801119c <HAL_CRCEx_Polynomial_Set+0x50>
 8011176:	2a18      	cmp	r2, #24
 8011178:	d00c      	beq.n	8011194 <HAL_CRCEx_Polynomial_Set+0x48>
 801117a:	2a08      	cmp	r2, #8
 801117c:	d0f5      	beq.n	801116a <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 801117e:	6803      	ldr	r3, [r0, #0]
 8011180:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8011182:	6801      	ldr	r1, [r0, #0]
 8011184:	688b      	ldr	r3, [r1, #8]
 8011186:	2018      	movs	r0, #24
 8011188:	4383      	bics	r3, r0
 801118a:	431a      	orrs	r2, r3
 801118c:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 801118e:	2400      	movs	r4, #0
}
 8011190:	0020      	movs	r0, r4
 8011192:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8011194:	2b06      	cmp	r3, #6
 8011196:	d9f2      	bls.n	801117e <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8011198:	2401      	movs	r4, #1
 801119a:	e7f9      	b.n	8011190 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 801119c:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 801119e:	2b07      	cmp	r3, #7
 80111a0:	d9ed      	bls.n	801117e <HAL_CRCEx_Polynomial_Set+0x32>
 80111a2:	e7f5      	b.n	8011190 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 80111a4:	2401      	movs	r4, #1
 80111a6:	e7f3      	b.n	8011190 <HAL_CRCEx_Polynomial_Set+0x44>

080111a8 <HAL_CRCEx_Init>:
{
 80111a8:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80111aa:	7903      	ldrb	r3, [r0, #4]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d109      	bne.n	80111c4 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80111b0:	6803      	ldr	r3, [r0, #0]
 80111b2:	4a08      	ldr	r2, [pc, #32]	; (80111d4 <HAL_CRCEx_Init+0x2c>)
 80111b4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80111b6:	6802      	ldr	r2, [r0, #0]
 80111b8:	6893      	ldr	r3, [r2, #8]
 80111ba:	2118      	movs	r1, #24
 80111bc:	438b      	bics	r3, r1
 80111be:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 80111c0:	2000      	movs	r0, #0
}
 80111c2:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80111c4:	68c2      	ldr	r2, [r0, #12]
 80111c6:	6881      	ldr	r1, [r0, #8]
 80111c8:	f7ff ffc0 	bl	801114c <HAL_CRCEx_Polynomial_Set>
 80111cc:	1e43      	subs	r3, r0, #1
 80111ce:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80111d0:	b2c0      	uxtb	r0, r0
 80111d2:	e7f6      	b.n	80111c2 <HAL_CRCEx_Init+0x1a>
 80111d4:	04c11db7 	.word	0x04c11db7

080111d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80111d8:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80111da:	2800      	cmp	r0, #0
 80111dc:	d022      	beq.n	8011224 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80111de:	2321      	movs	r3, #33	; 0x21
 80111e0:	5cc3      	ldrb	r3, [r0, r3]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d102      	bne.n	80111ec <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80111e6:	3320      	adds	r3, #32
 80111e8:	2200      	movs	r2, #0
 80111ea:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80111ec:	2121      	movs	r1, #33	; 0x21
 80111ee:	2302      	movs	r3, #2
 80111f0:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80111f2:	6804      	ldr	r4, [r0, #0]
 80111f4:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80111f6:	4a0c      	ldr	r2, [pc, #48]	; (8011228 <HAL_DMA_Init+0x50>)
 80111f8:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80111fa:	6843      	ldr	r3, [r0, #4]
 80111fc:	6885      	ldr	r5, [r0, #8]
 80111fe:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011200:	68c5      	ldr	r5, [r0, #12]
 8011202:	432b      	orrs	r3, r5
 8011204:	6905      	ldr	r5, [r0, #16]
 8011206:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011208:	6945      	ldr	r5, [r0, #20]
 801120a:	432b      	orrs	r3, r5
 801120c:	6985      	ldr	r5, [r0, #24]
 801120e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8011210:	69c5      	ldr	r5, [r0, #28]
 8011212:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8011214:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8011216:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011218:	2300      	movs	r3, #0
 801121a:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801121c:	3301      	adds	r3, #1
 801121e:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8011220:	2000      	movs	r0, #0
}  
 8011222:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8011224:	2001      	movs	r0, #1
 8011226:	e7fc      	b.n	8011222 <HAL_DMA_Init+0x4a>
 8011228:	ffffc00f 	.word	0xffffc00f

0801122c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801122c:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 801122e:	2420      	movs	r4, #32
 8011230:	5d04      	ldrb	r4, [r0, r4]
 8011232:	2c01      	cmp	r4, #1
 8011234:	d02d      	beq.n	8011292 <HAL_DMA_Start_IT+0x66>
 8011236:	2601      	movs	r6, #1
 8011238:	2420      	movs	r4, #32
 801123a:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 801123c:	3401      	adds	r4, #1
 801123e:	2502      	movs	r5, #2
 8011240:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011242:	6805      	ldr	r5, [r0, #0]
 8011244:	682c      	ldr	r4, [r5, #0]
 8011246:	43b4      	bics	r4, r6
 8011248:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801124a:	6804      	ldr	r4, [r0, #0]
 801124c:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801124e:	6843      	ldr	r3, [r0, #4]
 8011250:	2b10      	cmp	r3, #16
 8011252:	d019      	beq.n	8011288 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8011254:	6803      	ldr	r3, [r0, #0]
 8011256:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8011258:	6803      	ldr	r3, [r0, #0]
 801125a:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 801125c:	6802      	ldr	r2, [r0, #0]
 801125e:	6813      	ldr	r3, [r2, #0]
 8011260:	2102      	movs	r1, #2
 8011262:	430b      	orrs	r3, r1
 8011264:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8011266:	6802      	ldr	r2, [r0, #0]
 8011268:	6813      	ldr	r3, [r2, #0]
 801126a:	3102      	adds	r1, #2
 801126c:	430b      	orrs	r3, r1
 801126e:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011270:	6802      	ldr	r2, [r0, #0]
 8011272:	6813      	ldr	r3, [r2, #0]
 8011274:	3104      	adds	r1, #4
 8011276:	430b      	orrs	r3, r1
 8011278:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801127a:	6802      	ldr	r2, [r0, #0]
 801127c:	6813      	ldr	r3, [r2, #0]
 801127e:	3907      	subs	r1, #7
 8011280:	430b      	orrs	r3, r1
 8011282:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8011284:	2000      	movs	r0, #0
} 
 8011286:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8011288:	6803      	ldr	r3, [r0, #0]
 801128a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801128c:	6803      	ldr	r3, [r0, #0]
 801128e:	60d9      	str	r1, [r3, #12]
 8011290:	e7e4      	b.n	801125c <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8011292:	2002      	movs	r0, #2
 8011294:	e7f7      	b.n	8011286 <HAL_DMA_Start_IT+0x5a>

08011296 <HAL_DMA_Abort>:
{
 8011296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011298:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801129a:	6802      	ldr	r2, [r0, #0]
 801129c:	6813      	ldr	r3, [r2, #0]
 801129e:	2101      	movs	r1, #1
 80112a0:	438b      	bics	r3, r1
 80112a2:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80112a4:	f7ff fb16 	bl	80108d4 <HAL_GetTick>
 80112a8:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80112aa:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80112ac:	26fa      	movs	r6, #250	; 0xfa
 80112ae:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	421d      	tst	r5, r3
 80112b6:	d00f      	beq.n	80112d8 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80112b8:	f7ff fb0c 	bl	80108d4 <HAL_GetTick>
 80112bc:	1bc0      	subs	r0, r0, r7
 80112be:	42b0      	cmp	r0, r6
 80112c0:	d9f6      	bls.n	80112b0 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80112c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112c4:	2220      	movs	r2, #32
 80112c6:	4313      	orrs	r3, r2
 80112c8:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80112ca:	2321      	movs	r3, #33	; 0x21
 80112cc:	2103      	movs	r1, #3
 80112ce:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80112d0:	2300      	movs	r3, #0
 80112d2:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80112d4:	2003      	movs	r0, #3
 80112d6:	e006      	b.n	80112e6 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 80112d8:	2321      	movs	r3, #33	; 0x21
 80112da:	2201      	movs	r2, #1
 80112dc:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80112de:	3b01      	subs	r3, #1
 80112e0:	2200      	movs	r2, #0
 80112e2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80112e4:	2000      	movs	r0, #0
}
 80112e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080112e8 <HAL_DMA_IRQHandler>:
{        
 80112e8:	b510      	push	{r4, lr}
 80112ea:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80112ec:	6803      	ldr	r3, [r0, #0]
 80112ee:	4ab4      	ldr	r2, [pc, #720]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d94d      	bls.n	8011390 <HAL_DMA_IRQHandler+0xa8>
 80112f4:	4ab3      	ldr	r2, [pc, #716]	; (80115c4 <HAL_DMA_IRQHandler+0x2dc>)
 80112f6:	6811      	ldr	r1, [r2, #0]
 80112f8:	4ab3      	ldr	r2, [pc, #716]	; (80115c8 <HAL_DMA_IRQHandler+0x2e0>)
 80112fa:	4293      	cmp	r3, r2
 80112fc:	d026      	beq.n	801134c <HAL_DMA_IRQHandler+0x64>
 80112fe:	4ab3      	ldr	r2, [pc, #716]	; (80115cc <HAL_DMA_IRQHandler+0x2e4>)
 8011300:	4293      	cmp	r3, r2
 8011302:	d02d      	beq.n	8011360 <HAL_DMA_IRQHandler+0x78>
 8011304:	4ab2      	ldr	r2, [pc, #712]	; (80115d0 <HAL_DMA_IRQHandler+0x2e8>)
 8011306:	4293      	cmp	r3, r2
 8011308:	d02c      	beq.n	8011364 <HAL_DMA_IRQHandler+0x7c>
 801130a:	4ab2      	ldr	r2, [pc, #712]	; (80115d4 <HAL_DMA_IRQHandler+0x2ec>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d02c      	beq.n	801136a <HAL_DMA_IRQHandler+0x82>
 8011310:	4ab1      	ldr	r2, [pc, #708]	; (80115d8 <HAL_DMA_IRQHandler+0x2f0>)
 8011312:	4293      	cmp	r3, r2
 8011314:	d02c      	beq.n	8011370 <HAL_DMA_IRQHandler+0x88>
 8011316:	4ab1      	ldr	r2, [pc, #708]	; (80115dc <HAL_DMA_IRQHandler+0x2f4>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d02c      	beq.n	8011376 <HAL_DMA_IRQHandler+0x8e>
 801131c:	4aa8      	ldr	r2, [pc, #672]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d02c      	beq.n	801137c <HAL_DMA_IRQHandler+0x94>
 8011322:	4aaf      	ldr	r2, [pc, #700]	; (80115e0 <HAL_DMA_IRQHandler+0x2f8>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d02c      	beq.n	8011382 <HAL_DMA_IRQHandler+0x9a>
 8011328:	4aae      	ldr	r2, [pc, #696]	; (80115e4 <HAL_DMA_IRQHandler+0x2fc>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d02b      	beq.n	8011386 <HAL_DMA_IRQHandler+0x9e>
 801132e:	4aae      	ldr	r2, [pc, #696]	; (80115e8 <HAL_DMA_IRQHandler+0x300>)
 8011330:	4293      	cmp	r3, r2
 8011332:	d02a      	beq.n	801138a <HAL_DMA_IRQHandler+0xa2>
 8011334:	4aad      	ldr	r2, [pc, #692]	; (80115ec <HAL_DMA_IRQHandler+0x304>)
 8011336:	189a      	adds	r2, r3, r2
 8011338:	4250      	negs	r0, r2
 801133a:	4142      	adcs	r2, r0
 801133c:	4252      	negs	r2, r2
 801133e:	48ac      	ldr	r0, [pc, #688]	; (80115f0 <HAL_DMA_IRQHandler+0x308>)
 8011340:	4002      	ands	r2, r0
 8011342:	2080      	movs	r0, #128	; 0x80
 8011344:	0300      	lsls	r0, r0, #12
 8011346:	4684      	mov	ip, r0
 8011348:	4462      	add	r2, ip
 801134a:	e000      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 801134c:	2208      	movs	r2, #8
 801134e:	420a      	tst	r2, r1
 8011350:	d100      	bne.n	8011354 <HAL_DMA_IRQHandler+0x6c>
 8011352:	e0e6      	b.n	8011522 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	0712      	lsls	r2, r2, #28
 8011358:	d500      	bpl.n	801135c <HAL_DMA_IRQHandler+0x74>
 801135a:	e097      	b.n	801148c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801135c:	6823      	ldr	r3, [r4, #0]
 801135e:	e0e0      	b.n	8011522 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011360:	2280      	movs	r2, #128	; 0x80
 8011362:	e7f4      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 8011364:	2280      	movs	r2, #128	; 0x80
 8011366:	0112      	lsls	r2, r2, #4
 8011368:	e7f1      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 801136a:	2280      	movs	r2, #128	; 0x80
 801136c:	0212      	lsls	r2, r2, #8
 801136e:	e7ee      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 8011370:	2280      	movs	r2, #128	; 0x80
 8011372:	0312      	lsls	r2, r2, #12
 8011374:	e7eb      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 8011376:	2280      	movs	r2, #128	; 0x80
 8011378:	0412      	lsls	r2, r2, #16
 801137a:	e7e8      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 801137c:	2280      	movs	r2, #128	; 0x80
 801137e:	0512      	lsls	r2, r2, #20
 8011380:	e7e5      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 8011382:	2208      	movs	r2, #8
 8011384:	e7e3      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 8011386:	2280      	movs	r2, #128	; 0x80
 8011388:	e7e1      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 801138a:	2280      	movs	r2, #128	; 0x80
 801138c:	0112      	lsls	r2, r2, #4
 801138e:	e7de      	b.n	801134e <HAL_DMA_IRQHandler+0x66>
 8011390:	4a98      	ldr	r2, [pc, #608]	; (80115f4 <HAL_DMA_IRQHandler+0x30c>)
 8011392:	6811      	ldr	r1, [r2, #0]
 8011394:	4a8c      	ldr	r2, [pc, #560]	; (80115c8 <HAL_DMA_IRQHandler+0x2e0>)
 8011396:	4293      	cmp	r3, r2
 8011398:	d026      	beq.n	80113e8 <HAL_DMA_IRQHandler+0x100>
 801139a:	4a8c      	ldr	r2, [pc, #560]	; (80115cc <HAL_DMA_IRQHandler+0x2e4>)
 801139c:	4293      	cmp	r3, r2
 801139e:	d05d      	beq.n	801145c <HAL_DMA_IRQHandler+0x174>
 80113a0:	4a8b      	ldr	r2, [pc, #556]	; (80115d0 <HAL_DMA_IRQHandler+0x2e8>)
 80113a2:	4293      	cmp	r3, r2
 80113a4:	d05c      	beq.n	8011460 <HAL_DMA_IRQHandler+0x178>
 80113a6:	4a8b      	ldr	r2, [pc, #556]	; (80115d4 <HAL_DMA_IRQHandler+0x2ec>)
 80113a8:	4293      	cmp	r3, r2
 80113aa:	d05c      	beq.n	8011466 <HAL_DMA_IRQHandler+0x17e>
 80113ac:	4a8a      	ldr	r2, [pc, #552]	; (80115d8 <HAL_DMA_IRQHandler+0x2f0>)
 80113ae:	4293      	cmp	r3, r2
 80113b0:	d05c      	beq.n	801146c <HAL_DMA_IRQHandler+0x184>
 80113b2:	4a8a      	ldr	r2, [pc, #552]	; (80115dc <HAL_DMA_IRQHandler+0x2f4>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d05c      	beq.n	8011472 <HAL_DMA_IRQHandler+0x18a>
 80113b8:	4a81      	ldr	r2, [pc, #516]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 80113ba:	4293      	cmp	r3, r2
 80113bc:	d05c      	beq.n	8011478 <HAL_DMA_IRQHandler+0x190>
 80113be:	4a88      	ldr	r2, [pc, #544]	; (80115e0 <HAL_DMA_IRQHandler+0x2f8>)
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d05c      	beq.n	801147e <HAL_DMA_IRQHandler+0x196>
 80113c4:	4a87      	ldr	r2, [pc, #540]	; (80115e4 <HAL_DMA_IRQHandler+0x2fc>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d05b      	beq.n	8011482 <HAL_DMA_IRQHandler+0x19a>
 80113ca:	4a87      	ldr	r2, [pc, #540]	; (80115e8 <HAL_DMA_IRQHandler+0x300>)
 80113cc:	4293      	cmp	r3, r2
 80113ce:	d05a      	beq.n	8011486 <HAL_DMA_IRQHandler+0x19e>
 80113d0:	4a86      	ldr	r2, [pc, #536]	; (80115ec <HAL_DMA_IRQHandler+0x304>)
 80113d2:	189a      	adds	r2, r3, r2
 80113d4:	4250      	negs	r0, r2
 80113d6:	4142      	adcs	r2, r0
 80113d8:	4252      	negs	r2, r2
 80113da:	4885      	ldr	r0, [pc, #532]	; (80115f0 <HAL_DMA_IRQHandler+0x308>)
 80113dc:	4002      	ands	r2, r0
 80113de:	2080      	movs	r0, #128	; 0x80
 80113e0:	0300      	lsls	r0, r0, #12
 80113e2:	4684      	mov	ip, r0
 80113e4:	4462      	add	r2, ip
 80113e6:	e000      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 80113e8:	2208      	movs	r2, #8
 80113ea:	420a      	tst	r2, r1
 80113ec:	d000      	beq.n	80113f0 <HAL_DMA_IRQHandler+0x108>
 80113ee:	e3ad      	b.n	8011b4c <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80113f0:	4a80      	ldr	r2, [pc, #512]	; (80115f4 <HAL_DMA_IRQHandler+0x30c>)
 80113f2:	6811      	ldr	r1, [r2, #0]
 80113f4:	4a74      	ldr	r2, [pc, #464]	; (80115c8 <HAL_DMA_IRQHandler+0x2e0>)
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d100      	bne.n	80113fc <HAL_DMA_IRQHandler+0x114>
 80113fa:	e198      	b.n	801172e <HAL_DMA_IRQHandler+0x446>
 80113fc:	4a73      	ldr	r2, [pc, #460]	; (80115cc <HAL_DMA_IRQHandler+0x2e4>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d100      	bne.n	8011404 <HAL_DMA_IRQHandler+0x11c>
 8011402:	e1da      	b.n	80117ba <HAL_DMA_IRQHandler+0x4d2>
 8011404:	4a72      	ldr	r2, [pc, #456]	; (80115d0 <HAL_DMA_IRQHandler+0x2e8>)
 8011406:	4293      	cmp	r3, r2
 8011408:	d100      	bne.n	801140c <HAL_DMA_IRQHandler+0x124>
 801140a:	e1d8      	b.n	80117be <HAL_DMA_IRQHandler+0x4d6>
 801140c:	4a71      	ldr	r2, [pc, #452]	; (80115d4 <HAL_DMA_IRQHandler+0x2ec>)
 801140e:	4293      	cmp	r3, r2
 8011410:	d100      	bne.n	8011414 <HAL_DMA_IRQHandler+0x12c>
 8011412:	e1d7      	b.n	80117c4 <HAL_DMA_IRQHandler+0x4dc>
 8011414:	4a70      	ldr	r2, [pc, #448]	; (80115d8 <HAL_DMA_IRQHandler+0x2f0>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d100      	bne.n	801141c <HAL_DMA_IRQHandler+0x134>
 801141a:	e1d6      	b.n	80117ca <HAL_DMA_IRQHandler+0x4e2>
 801141c:	4a6f      	ldr	r2, [pc, #444]	; (80115dc <HAL_DMA_IRQHandler+0x2f4>)
 801141e:	4293      	cmp	r3, r2
 8011420:	d100      	bne.n	8011424 <HAL_DMA_IRQHandler+0x13c>
 8011422:	e1d5      	b.n	80117d0 <HAL_DMA_IRQHandler+0x4e8>
 8011424:	4a66      	ldr	r2, [pc, #408]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d100      	bne.n	801142c <HAL_DMA_IRQHandler+0x144>
 801142a:	e1d4      	b.n	80117d6 <HAL_DMA_IRQHandler+0x4ee>
 801142c:	4a6c      	ldr	r2, [pc, #432]	; (80115e0 <HAL_DMA_IRQHandler+0x2f8>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d100      	bne.n	8011434 <HAL_DMA_IRQHandler+0x14c>
 8011432:	e1d3      	b.n	80117dc <HAL_DMA_IRQHandler+0x4f4>
 8011434:	4a6b      	ldr	r2, [pc, #428]	; (80115e4 <HAL_DMA_IRQHandler+0x2fc>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d100      	bne.n	801143c <HAL_DMA_IRQHandler+0x154>
 801143a:	e1d1      	b.n	80117e0 <HAL_DMA_IRQHandler+0x4f8>
 801143c:	4a6a      	ldr	r2, [pc, #424]	; (80115e8 <HAL_DMA_IRQHandler+0x300>)
 801143e:	4293      	cmp	r3, r2
 8011440:	d100      	bne.n	8011444 <HAL_DMA_IRQHandler+0x15c>
 8011442:	e1cf      	b.n	80117e4 <HAL_DMA_IRQHandler+0x4fc>
 8011444:	4a69      	ldr	r2, [pc, #420]	; (80115ec <HAL_DMA_IRQHandler+0x304>)
 8011446:	189a      	adds	r2, r3, r2
 8011448:	4250      	negs	r0, r2
 801144a:	4142      	adcs	r2, r0
 801144c:	4252      	negs	r2, r2
 801144e:	486a      	ldr	r0, [pc, #424]	; (80115f8 <HAL_DMA_IRQHandler+0x310>)
 8011450:	4002      	ands	r2, r0
 8011452:	2080      	movs	r0, #128	; 0x80
 8011454:	02c0      	lsls	r0, r0, #11
 8011456:	4684      	mov	ip, r0
 8011458:	4462      	add	r2, ip
 801145a:	e169      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801145c:	2280      	movs	r2, #128	; 0x80
 801145e:	e7c4      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 8011460:	2280      	movs	r2, #128	; 0x80
 8011462:	0112      	lsls	r2, r2, #4
 8011464:	e7c1      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 8011466:	2280      	movs	r2, #128	; 0x80
 8011468:	0212      	lsls	r2, r2, #8
 801146a:	e7be      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 801146c:	2280      	movs	r2, #128	; 0x80
 801146e:	0312      	lsls	r2, r2, #12
 8011470:	e7bb      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 8011472:	2280      	movs	r2, #128	; 0x80
 8011474:	0412      	lsls	r2, r2, #16
 8011476:	e7b8      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 8011478:	2280      	movs	r2, #128	; 0x80
 801147a:	0512      	lsls	r2, r2, #20
 801147c:	e7b5      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 801147e:	2208      	movs	r2, #8
 8011480:	e7b3      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 8011482:	2280      	movs	r2, #128	; 0x80
 8011484:	e7b1      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
 8011486:	2280      	movs	r2, #128	; 0x80
 8011488:	0112      	lsls	r2, r2, #4
 801148a:	e7ae      	b.n	80113ea <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	2108      	movs	r1, #8
 8011490:	438a      	bics	r2, r1
 8011492:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011494:	6823      	ldr	r3, [r4, #0]
 8011496:	4a4a      	ldr	r2, [pc, #296]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d800      	bhi.n	801149e <HAL_DMA_IRQHandler+0x1b6>
 801149c:	e0ae      	b.n	80115fc <HAL_DMA_IRQHandler+0x314>
 801149e:	4a4a      	ldr	r2, [pc, #296]	; (80115c8 <HAL_DMA_IRQHandler+0x2e0>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d027      	beq.n	80114f4 <HAL_DMA_IRQHandler+0x20c>
 80114a4:	4a49      	ldr	r2, [pc, #292]	; (80115cc <HAL_DMA_IRQHandler+0x2e4>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d071      	beq.n	801158e <HAL_DMA_IRQHandler+0x2a6>
 80114aa:	4a49      	ldr	r2, [pc, #292]	; (80115d0 <HAL_DMA_IRQHandler+0x2e8>)
 80114ac:	4293      	cmp	r3, r2
 80114ae:	d070      	beq.n	8011592 <HAL_DMA_IRQHandler+0x2aa>
 80114b0:	4a48      	ldr	r2, [pc, #288]	; (80115d4 <HAL_DMA_IRQHandler+0x2ec>)
 80114b2:	4293      	cmp	r3, r2
 80114b4:	d070      	beq.n	8011598 <HAL_DMA_IRQHandler+0x2b0>
 80114b6:	4a48      	ldr	r2, [pc, #288]	; (80115d8 <HAL_DMA_IRQHandler+0x2f0>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d070      	beq.n	801159e <HAL_DMA_IRQHandler+0x2b6>
 80114bc:	4a47      	ldr	r2, [pc, #284]	; (80115dc <HAL_DMA_IRQHandler+0x2f4>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d070      	beq.n	80115a4 <HAL_DMA_IRQHandler+0x2bc>
 80114c2:	4a3f      	ldr	r2, [pc, #252]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 80114c4:	4293      	cmp	r3, r2
 80114c6:	d070      	beq.n	80115aa <HAL_DMA_IRQHandler+0x2c2>
 80114c8:	4a45      	ldr	r2, [pc, #276]	; (80115e0 <HAL_DMA_IRQHandler+0x2f8>)
 80114ca:	4293      	cmp	r3, r2
 80114cc:	d070      	beq.n	80115b0 <HAL_DMA_IRQHandler+0x2c8>
 80114ce:	4a45      	ldr	r2, [pc, #276]	; (80115e4 <HAL_DMA_IRQHandler+0x2fc>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d06f      	beq.n	80115b4 <HAL_DMA_IRQHandler+0x2cc>
 80114d4:	4a44      	ldr	r2, [pc, #272]	; (80115e8 <HAL_DMA_IRQHandler+0x300>)
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d06e      	beq.n	80115b8 <HAL_DMA_IRQHandler+0x2d0>
 80114da:	4a44      	ldr	r2, [pc, #272]	; (80115ec <HAL_DMA_IRQHandler+0x304>)
 80114dc:	4694      	mov	ip, r2
 80114de:	4463      	add	r3, ip
 80114e0:	425a      	negs	r2, r3
 80114e2:	4153      	adcs	r3, r2
 80114e4:	425b      	negs	r3, r3
 80114e6:	4a42      	ldr	r2, [pc, #264]	; (80115f0 <HAL_DMA_IRQHandler+0x308>)
 80114e8:	4013      	ands	r3, r2
 80114ea:	2280      	movs	r2, #128	; 0x80
 80114ec:	0312      	lsls	r2, r2, #12
 80114ee:	4694      	mov	ip, r2
 80114f0:	4463      	add	r3, ip
 80114f2:	e000      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 80114f4:	2308      	movs	r3, #8
 80114f6:	4a33      	ldr	r2, [pc, #204]	; (80115c4 <HAL_DMA_IRQHandler+0x2dc>)
 80114f8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80114fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80114fc:	2201      	movs	r2, #1
 80114fe:	4313      	orrs	r3, r2
 8011500:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8011502:	2321      	movs	r3, #33	; 0x21
 8011504:	3203      	adds	r2, #3
 8011506:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8011508:	3b01      	subs	r3, #1
 801150a:	2200      	movs	r2, #0
 801150c:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801150e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011510:	2b00      	cmp	r3, #0
 8011512:	d001      	beq.n	8011518 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8011514:	0020      	movs	r0, r4
 8011516:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011518:	6823      	ldr	r3, [r4, #0]
 801151a:	4a29      	ldr	r2, [pc, #164]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 801151c:	4293      	cmp	r3, r2
 801151e:	d800      	bhi.n	8011522 <HAL_DMA_IRQHandler+0x23a>
 8011520:	e766      	b.n	80113f0 <HAL_DMA_IRQHandler+0x108>
 8011522:	4a28      	ldr	r2, [pc, #160]	; (80115c4 <HAL_DMA_IRQHandler+0x2dc>)
 8011524:	6811      	ldr	r1, [r2, #0]
 8011526:	4a28      	ldr	r2, [pc, #160]	; (80115c8 <HAL_DMA_IRQHandler+0x2e0>)
 8011528:	4293      	cmp	r3, r2
 801152a:	d100      	bne.n	801152e <HAL_DMA_IRQHandler+0x246>
 801152c:	e0ad      	b.n	801168a <HAL_DMA_IRQHandler+0x3a2>
 801152e:	4a27      	ldr	r2, [pc, #156]	; (80115cc <HAL_DMA_IRQHandler+0x2e4>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d100      	bne.n	8011536 <HAL_DMA_IRQHandler+0x24e>
 8011534:	e0e3      	b.n	80116fe <HAL_DMA_IRQHandler+0x416>
 8011536:	4a26      	ldr	r2, [pc, #152]	; (80115d0 <HAL_DMA_IRQHandler+0x2e8>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d100      	bne.n	801153e <HAL_DMA_IRQHandler+0x256>
 801153c:	e0e1      	b.n	8011702 <HAL_DMA_IRQHandler+0x41a>
 801153e:	4a25      	ldr	r2, [pc, #148]	; (80115d4 <HAL_DMA_IRQHandler+0x2ec>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d100      	bne.n	8011546 <HAL_DMA_IRQHandler+0x25e>
 8011544:	e0e0      	b.n	8011708 <HAL_DMA_IRQHandler+0x420>
 8011546:	4a24      	ldr	r2, [pc, #144]	; (80115d8 <HAL_DMA_IRQHandler+0x2f0>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d100      	bne.n	801154e <HAL_DMA_IRQHandler+0x266>
 801154c:	e0df      	b.n	801170e <HAL_DMA_IRQHandler+0x426>
 801154e:	4a23      	ldr	r2, [pc, #140]	; (80115dc <HAL_DMA_IRQHandler+0x2f4>)
 8011550:	4293      	cmp	r3, r2
 8011552:	d100      	bne.n	8011556 <HAL_DMA_IRQHandler+0x26e>
 8011554:	e0de      	b.n	8011714 <HAL_DMA_IRQHandler+0x42c>
 8011556:	4a1a      	ldr	r2, [pc, #104]	; (80115c0 <HAL_DMA_IRQHandler+0x2d8>)
 8011558:	4293      	cmp	r3, r2
 801155a:	d100      	bne.n	801155e <HAL_DMA_IRQHandler+0x276>
 801155c:	e0dd      	b.n	801171a <HAL_DMA_IRQHandler+0x432>
 801155e:	4a20      	ldr	r2, [pc, #128]	; (80115e0 <HAL_DMA_IRQHandler+0x2f8>)
 8011560:	4293      	cmp	r3, r2
 8011562:	d100      	bne.n	8011566 <HAL_DMA_IRQHandler+0x27e>
 8011564:	e0dc      	b.n	8011720 <HAL_DMA_IRQHandler+0x438>
 8011566:	4a1f      	ldr	r2, [pc, #124]	; (80115e4 <HAL_DMA_IRQHandler+0x2fc>)
 8011568:	4293      	cmp	r3, r2
 801156a:	d100      	bne.n	801156e <HAL_DMA_IRQHandler+0x286>
 801156c:	e0da      	b.n	8011724 <HAL_DMA_IRQHandler+0x43c>
 801156e:	4a1e      	ldr	r2, [pc, #120]	; (80115e8 <HAL_DMA_IRQHandler+0x300>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d100      	bne.n	8011576 <HAL_DMA_IRQHandler+0x28e>
 8011574:	e0d8      	b.n	8011728 <HAL_DMA_IRQHandler+0x440>
 8011576:	4a1d      	ldr	r2, [pc, #116]	; (80115ec <HAL_DMA_IRQHandler+0x304>)
 8011578:	189a      	adds	r2, r3, r2
 801157a:	4250      	negs	r0, r2
 801157c:	4142      	adcs	r2, r0
 801157e:	4252      	negs	r2, r2
 8011580:	481d      	ldr	r0, [pc, #116]	; (80115f8 <HAL_DMA_IRQHandler+0x310>)
 8011582:	4002      	ands	r2, r0
 8011584:	2080      	movs	r0, #128	; 0x80
 8011586:	02c0      	lsls	r0, r0, #11
 8011588:	4684      	mov	ip, r0
 801158a:	4462      	add	r2, ip
 801158c:	e07e      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 801158e:	2380      	movs	r3, #128	; 0x80
 8011590:	e7b1      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 8011592:	2380      	movs	r3, #128	; 0x80
 8011594:	011b      	lsls	r3, r3, #4
 8011596:	e7ae      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 8011598:	2380      	movs	r3, #128	; 0x80
 801159a:	021b      	lsls	r3, r3, #8
 801159c:	e7ab      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 801159e:	2380      	movs	r3, #128	; 0x80
 80115a0:	031b      	lsls	r3, r3, #12
 80115a2:	e7a8      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 80115a4:	2380      	movs	r3, #128	; 0x80
 80115a6:	041b      	lsls	r3, r3, #16
 80115a8:	e7a5      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 80115aa:	2380      	movs	r3, #128	; 0x80
 80115ac:	051b      	lsls	r3, r3, #20
 80115ae:	e7a2      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 80115b0:	2308      	movs	r3, #8
 80115b2:	e7a0      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 80115b4:	2380      	movs	r3, #128	; 0x80
 80115b6:	e79e      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 80115b8:	2380      	movs	r3, #128	; 0x80
 80115ba:	011b      	lsls	r3, r3, #4
 80115bc:	e79b      	b.n	80114f6 <HAL_DMA_IRQHandler+0x20e>
 80115be:	46c0      	nop			; (mov r8, r8)
 80115c0:	40020080 	.word	0x40020080
 80115c4:	40020400 	.word	0x40020400
 80115c8:	40020008 	.word	0x40020008
 80115cc:	4002001c 	.word	0x4002001c
 80115d0:	40020030 	.word	0x40020030
 80115d4:	40020044 	.word	0x40020044
 80115d8:	40020058 	.word	0x40020058
 80115dc:	4002006c 	.word	0x4002006c
 80115e0:	40020408 	.word	0x40020408
 80115e4:	4002041c 	.word	0x4002041c
 80115e8:	40020430 	.word	0x40020430
 80115ec:	bffdfbbc 	.word	0xbffdfbbc
 80115f0:	fff88000 	.word	0xfff88000
 80115f4:	40020000 	.word	0x40020000
 80115f8:	fffc4000 	.word	0xfffc4000
 80115fc:	4aaa      	ldr	r2, [pc, #680]	; (80118a8 <HAL_DMA_IRQHandler+0x5c0>)
 80115fe:	4293      	cmp	r3, r2
 8011600:	d027      	beq.n	8011652 <HAL_DMA_IRQHandler+0x36a>
 8011602:	4aaa      	ldr	r2, [pc, #680]	; (80118ac <HAL_DMA_IRQHandler+0x5c4>)
 8011604:	4293      	cmp	r3, r2
 8011606:	d028      	beq.n	801165a <HAL_DMA_IRQHandler+0x372>
 8011608:	4aa9      	ldr	r2, [pc, #676]	; (80118b0 <HAL_DMA_IRQHandler+0x5c8>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d027      	beq.n	801165e <HAL_DMA_IRQHandler+0x376>
 801160e:	4aa9      	ldr	r2, [pc, #676]	; (80118b4 <HAL_DMA_IRQHandler+0x5cc>)
 8011610:	4293      	cmp	r3, r2
 8011612:	d027      	beq.n	8011664 <HAL_DMA_IRQHandler+0x37c>
 8011614:	4aa8      	ldr	r2, [pc, #672]	; (80118b8 <HAL_DMA_IRQHandler+0x5d0>)
 8011616:	4293      	cmp	r3, r2
 8011618:	d027      	beq.n	801166a <HAL_DMA_IRQHandler+0x382>
 801161a:	4aa8      	ldr	r2, [pc, #672]	; (80118bc <HAL_DMA_IRQHandler+0x5d4>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d027      	beq.n	8011670 <HAL_DMA_IRQHandler+0x388>
 8011620:	4aa7      	ldr	r2, [pc, #668]	; (80118c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011622:	4293      	cmp	r3, r2
 8011624:	d027      	beq.n	8011676 <HAL_DMA_IRQHandler+0x38e>
 8011626:	4aa7      	ldr	r2, [pc, #668]	; (80118c4 <HAL_DMA_IRQHandler+0x5dc>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d027      	beq.n	801167c <HAL_DMA_IRQHandler+0x394>
 801162c:	4aa6      	ldr	r2, [pc, #664]	; (80118c8 <HAL_DMA_IRQHandler+0x5e0>)
 801162e:	4293      	cmp	r3, r2
 8011630:	d026      	beq.n	8011680 <HAL_DMA_IRQHandler+0x398>
 8011632:	4aa6      	ldr	r2, [pc, #664]	; (80118cc <HAL_DMA_IRQHandler+0x5e4>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d025      	beq.n	8011684 <HAL_DMA_IRQHandler+0x39c>
 8011638:	4aa5      	ldr	r2, [pc, #660]	; (80118d0 <HAL_DMA_IRQHandler+0x5e8>)
 801163a:	4694      	mov	ip, r2
 801163c:	4463      	add	r3, ip
 801163e:	425a      	negs	r2, r3
 8011640:	4153      	adcs	r3, r2
 8011642:	425b      	negs	r3, r3
 8011644:	4aa3      	ldr	r2, [pc, #652]	; (80118d4 <HAL_DMA_IRQHandler+0x5ec>)
 8011646:	4013      	ands	r3, r2
 8011648:	2280      	movs	r2, #128	; 0x80
 801164a:	0312      	lsls	r2, r2, #12
 801164c:	4694      	mov	ip, r2
 801164e:	4463      	add	r3, ip
 8011650:	e000      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 8011652:	2308      	movs	r3, #8
 8011654:	4aa0      	ldr	r2, [pc, #640]	; (80118d8 <HAL_DMA_IRQHandler+0x5f0>)
 8011656:	6053      	str	r3, [r2, #4]
 8011658:	e74f      	b.n	80114fa <HAL_DMA_IRQHandler+0x212>
 801165a:	2380      	movs	r3, #128	; 0x80
 801165c:	e7fa      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 801165e:	2380      	movs	r3, #128	; 0x80
 8011660:	011b      	lsls	r3, r3, #4
 8011662:	e7f7      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 8011664:	2380      	movs	r3, #128	; 0x80
 8011666:	021b      	lsls	r3, r3, #8
 8011668:	e7f4      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 801166a:	2380      	movs	r3, #128	; 0x80
 801166c:	031b      	lsls	r3, r3, #12
 801166e:	e7f1      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 8011670:	2380      	movs	r3, #128	; 0x80
 8011672:	041b      	lsls	r3, r3, #16
 8011674:	e7ee      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 8011676:	2380      	movs	r3, #128	; 0x80
 8011678:	051b      	lsls	r3, r3, #20
 801167a:	e7eb      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 801167c:	2308      	movs	r3, #8
 801167e:	e7e9      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 8011680:	2380      	movs	r3, #128	; 0x80
 8011682:	e7e7      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
 8011684:	2380      	movs	r3, #128	; 0x80
 8011686:	011b      	lsls	r3, r3, #4
 8011688:	e7e4      	b.n	8011654 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801168a:	2204      	movs	r2, #4
 801168c:	420a      	tst	r2, r1
 801168e:	d152      	bne.n	8011736 <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011690:	6821      	ldr	r1, [r4, #0]
 8011692:	4b92      	ldr	r3, [pc, #584]	; (80118dc <HAL_DMA_IRQHandler+0x5f4>)
 8011694:	6818      	ldr	r0, [r3, #0]
 8011696:	4a84      	ldr	r2, [pc, #528]	; (80118a8 <HAL_DMA_IRQHandler+0x5c0>)
 8011698:	4291      	cmp	r1, r2
 801169a:	d100      	bne.n	801169e <HAL_DMA_IRQHandler+0x3b6>
 801169c:	e16b      	b.n	8011976 <HAL_DMA_IRQHandler+0x68e>
 801169e:	4a83      	ldr	r2, [pc, #524]	; (80118ac <HAL_DMA_IRQHandler+0x5c4>)
 80116a0:	4291      	cmp	r1, r2
 80116a2:	d100      	bne.n	80116a6 <HAL_DMA_IRQHandler+0x3be>
 80116a4:	e1aa      	b.n	80119fc <HAL_DMA_IRQHandler+0x714>
 80116a6:	4a82      	ldr	r2, [pc, #520]	; (80118b0 <HAL_DMA_IRQHandler+0x5c8>)
 80116a8:	4291      	cmp	r1, r2
 80116aa:	d100      	bne.n	80116ae <HAL_DMA_IRQHandler+0x3c6>
 80116ac:	e1a8      	b.n	8011a00 <HAL_DMA_IRQHandler+0x718>
 80116ae:	4a81      	ldr	r2, [pc, #516]	; (80118b4 <HAL_DMA_IRQHandler+0x5cc>)
 80116b0:	4291      	cmp	r1, r2
 80116b2:	d100      	bne.n	80116b6 <HAL_DMA_IRQHandler+0x3ce>
 80116b4:	e1a7      	b.n	8011a06 <HAL_DMA_IRQHandler+0x71e>
 80116b6:	4b80      	ldr	r3, [pc, #512]	; (80118b8 <HAL_DMA_IRQHandler+0x5d0>)
 80116b8:	4299      	cmp	r1, r3
 80116ba:	d100      	bne.n	80116be <HAL_DMA_IRQHandler+0x3d6>
 80116bc:	e1a6      	b.n	8011a0c <HAL_DMA_IRQHandler+0x724>
 80116be:	4b7f      	ldr	r3, [pc, #508]	; (80118bc <HAL_DMA_IRQHandler+0x5d4>)
 80116c0:	4299      	cmp	r1, r3
 80116c2:	d100      	bne.n	80116c6 <HAL_DMA_IRQHandler+0x3de>
 80116c4:	e1a5      	b.n	8011a12 <HAL_DMA_IRQHandler+0x72a>
 80116c6:	4b7e      	ldr	r3, [pc, #504]	; (80118c0 <HAL_DMA_IRQHandler+0x5d8>)
 80116c8:	4299      	cmp	r1, r3
 80116ca:	d100      	bne.n	80116ce <HAL_DMA_IRQHandler+0x3e6>
 80116cc:	e1a4      	b.n	8011a18 <HAL_DMA_IRQHandler+0x730>
 80116ce:	4b7d      	ldr	r3, [pc, #500]	; (80118c4 <HAL_DMA_IRQHandler+0x5dc>)
 80116d0:	4299      	cmp	r1, r3
 80116d2:	d100      	bne.n	80116d6 <HAL_DMA_IRQHandler+0x3ee>
 80116d4:	e1a3      	b.n	8011a1e <HAL_DMA_IRQHandler+0x736>
 80116d6:	4b7c      	ldr	r3, [pc, #496]	; (80118c8 <HAL_DMA_IRQHandler+0x5e0>)
 80116d8:	4299      	cmp	r1, r3
 80116da:	d100      	bne.n	80116de <HAL_DMA_IRQHandler+0x3f6>
 80116dc:	e1a1      	b.n	8011a22 <HAL_DMA_IRQHandler+0x73a>
 80116de:	4b7b      	ldr	r3, [pc, #492]	; (80118cc <HAL_DMA_IRQHandler+0x5e4>)
 80116e0:	4299      	cmp	r1, r3
 80116e2:	d100      	bne.n	80116e6 <HAL_DMA_IRQHandler+0x3fe>
 80116e4:	e19f      	b.n	8011a26 <HAL_DMA_IRQHandler+0x73e>
 80116e6:	4b7a      	ldr	r3, [pc, #488]	; (80118d0 <HAL_DMA_IRQHandler+0x5e8>)
 80116e8:	18ca      	adds	r2, r1, r3
 80116ea:	4253      	negs	r3, r2
 80116ec:	415a      	adcs	r2, r3
 80116ee:	4252      	negs	r2, r2
 80116f0:	4b7b      	ldr	r3, [pc, #492]	; (80118e0 <HAL_DMA_IRQHandler+0x5f8>)
 80116f2:	4013      	ands	r3, r2
 80116f4:	2280      	movs	r2, #128	; 0x80
 80116f6:	0292      	lsls	r2, r2, #10
 80116f8:	4694      	mov	ip, r2
 80116fa:	4463      	add	r3, ip
 80116fc:	e13c      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80116fe:	2240      	movs	r2, #64	; 0x40
 8011700:	e7c4      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 8011702:	2280      	movs	r2, #128	; 0x80
 8011704:	00d2      	lsls	r2, r2, #3
 8011706:	e7c1      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 8011708:	2280      	movs	r2, #128	; 0x80
 801170a:	01d2      	lsls	r2, r2, #7
 801170c:	e7be      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 801170e:	2280      	movs	r2, #128	; 0x80
 8011710:	02d2      	lsls	r2, r2, #11
 8011712:	e7bb      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 8011714:	2280      	movs	r2, #128	; 0x80
 8011716:	03d2      	lsls	r2, r2, #15
 8011718:	e7b8      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 801171a:	2280      	movs	r2, #128	; 0x80
 801171c:	04d2      	lsls	r2, r2, #19
 801171e:	e7b5      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 8011720:	2204      	movs	r2, #4
 8011722:	e7b3      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 8011724:	2240      	movs	r2, #64	; 0x40
 8011726:	e7b1      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 8011728:	2280      	movs	r2, #128	; 0x80
 801172a:	00d2      	lsls	r2, r2, #3
 801172c:	e7ae      	b.n	801168c <HAL_DMA_IRQHandler+0x3a4>
 801172e:	2204      	movs	r2, #4
 8011730:	420a      	tst	r2, r1
 8011732:	d100      	bne.n	8011736 <HAL_DMA_IRQHandler+0x44e>
 8011734:	e208      	b.n	8011b48 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011736:	681a      	ldr	r2, [r3, #0]
 8011738:	0752      	lsls	r2, r2, #29
 801173a:	d561      	bpl.n	8011800 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	0692      	lsls	r2, r2, #26
 8011740:	d403      	bmi.n	801174a <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	2104      	movs	r1, #4
 8011746:	438a      	bics	r2, r1
 8011748:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801174a:	6823      	ldr	r3, [r4, #0]
 801174c:	4a5c      	ldr	r2, [pc, #368]	; (80118c0 <HAL_DMA_IRQHandler+0x5d8>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d800      	bhi.n	8011754 <HAL_DMA_IRQHandler+0x46c>
 8011752:	e0c9      	b.n	80118e8 <HAL_DMA_IRQHandler+0x600>
 8011754:	4a54      	ldr	r2, [pc, #336]	; (80118a8 <HAL_DMA_IRQHandler+0x5c0>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d047      	beq.n	80117ea <HAL_DMA_IRQHandler+0x502>
 801175a:	4a54      	ldr	r2, [pc, #336]	; (80118ac <HAL_DMA_IRQHandler+0x5c4>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d100      	bne.n	8011762 <HAL_DMA_IRQHandler+0x47a>
 8011760:	e089      	b.n	8011876 <HAL_DMA_IRQHandler+0x58e>
 8011762:	4a53      	ldr	r2, [pc, #332]	; (80118b0 <HAL_DMA_IRQHandler+0x5c8>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d100      	bne.n	801176a <HAL_DMA_IRQHandler+0x482>
 8011768:	e087      	b.n	801187a <HAL_DMA_IRQHandler+0x592>
 801176a:	4a52      	ldr	r2, [pc, #328]	; (80118b4 <HAL_DMA_IRQHandler+0x5cc>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d100      	bne.n	8011772 <HAL_DMA_IRQHandler+0x48a>
 8011770:	e086      	b.n	8011880 <HAL_DMA_IRQHandler+0x598>
 8011772:	4a51      	ldr	r2, [pc, #324]	; (80118b8 <HAL_DMA_IRQHandler+0x5d0>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d100      	bne.n	801177a <HAL_DMA_IRQHandler+0x492>
 8011778:	e085      	b.n	8011886 <HAL_DMA_IRQHandler+0x59e>
 801177a:	4a50      	ldr	r2, [pc, #320]	; (80118bc <HAL_DMA_IRQHandler+0x5d4>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d100      	bne.n	8011782 <HAL_DMA_IRQHandler+0x49a>
 8011780:	e084      	b.n	801188c <HAL_DMA_IRQHandler+0x5a4>
 8011782:	4a4f      	ldr	r2, [pc, #316]	; (80118c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d100      	bne.n	801178a <HAL_DMA_IRQHandler+0x4a2>
 8011788:	e083      	b.n	8011892 <HAL_DMA_IRQHandler+0x5aa>
 801178a:	4a4e      	ldr	r2, [pc, #312]	; (80118c4 <HAL_DMA_IRQHandler+0x5dc>)
 801178c:	4293      	cmp	r3, r2
 801178e:	d100      	bne.n	8011792 <HAL_DMA_IRQHandler+0x4aa>
 8011790:	e082      	b.n	8011898 <HAL_DMA_IRQHandler+0x5b0>
 8011792:	4a4d      	ldr	r2, [pc, #308]	; (80118c8 <HAL_DMA_IRQHandler+0x5e0>)
 8011794:	4293      	cmp	r3, r2
 8011796:	d100      	bne.n	801179a <HAL_DMA_IRQHandler+0x4b2>
 8011798:	e080      	b.n	801189c <HAL_DMA_IRQHandler+0x5b4>
 801179a:	4a4c      	ldr	r2, [pc, #304]	; (80118cc <HAL_DMA_IRQHandler+0x5e4>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d07f      	beq.n	80118a0 <HAL_DMA_IRQHandler+0x5b8>
 80117a0:	4a4b      	ldr	r2, [pc, #300]	; (80118d0 <HAL_DMA_IRQHandler+0x5e8>)
 80117a2:	4694      	mov	ip, r2
 80117a4:	4463      	add	r3, ip
 80117a6:	425a      	negs	r2, r3
 80117a8:	4153      	adcs	r3, r2
 80117aa:	425b      	negs	r3, r3
 80117ac:	4a4d      	ldr	r2, [pc, #308]	; (80118e4 <HAL_DMA_IRQHandler+0x5fc>)
 80117ae:	4013      	ands	r3, r2
 80117b0:	2280      	movs	r2, #128	; 0x80
 80117b2:	02d2      	lsls	r2, r2, #11
 80117b4:	4694      	mov	ip, r2
 80117b6:	4463      	add	r3, ip
 80117b8:	e018      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80117ba:	2240      	movs	r2, #64	; 0x40
 80117bc:	e7b8      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117be:	2280      	movs	r2, #128	; 0x80
 80117c0:	00d2      	lsls	r2, r2, #3
 80117c2:	e7b5      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117c4:	2280      	movs	r2, #128	; 0x80
 80117c6:	01d2      	lsls	r2, r2, #7
 80117c8:	e7b2      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117ca:	2280      	movs	r2, #128	; 0x80
 80117cc:	02d2      	lsls	r2, r2, #11
 80117ce:	e7af      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117d0:	2280      	movs	r2, #128	; 0x80
 80117d2:	03d2      	lsls	r2, r2, #15
 80117d4:	e7ac      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117d6:	2280      	movs	r2, #128	; 0x80
 80117d8:	04d2      	lsls	r2, r2, #19
 80117da:	e7a9      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117dc:	2204      	movs	r2, #4
 80117de:	e7a7      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117e0:	2240      	movs	r2, #64	; 0x40
 80117e2:	e7a5      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
 80117e4:	2280      	movs	r2, #128	; 0x80
 80117e6:	00d2      	lsls	r2, r2, #3
 80117e8:	e7a2      	b.n	8011730 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80117ea:	2304      	movs	r3, #4
 80117ec:	4a3b      	ldr	r2, [pc, #236]	; (80118dc <HAL_DMA_IRQHandler+0x5f4>)
 80117ee:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 80117f0:	2321      	movs	r3, #33	; 0x21
 80117f2:	2211      	movs	r2, #17
 80117f4:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80117f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d001      	beq.n	8011800 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 80117fc:	0020      	movs	r0, r4
 80117fe:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011800:	6821      	ldr	r1, [r4, #0]
 8011802:	4b2f      	ldr	r3, [pc, #188]	; (80118c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011804:	4299      	cmp	r1, r3
 8011806:	d900      	bls.n	801180a <HAL_DMA_IRQHandler+0x522>
 8011808:	e743      	b.n	8011692 <HAL_DMA_IRQHandler+0x3aa>
 801180a:	4b33      	ldr	r3, [pc, #204]	; (80118d8 <HAL_DMA_IRQHandler+0x5f0>)
 801180c:	6818      	ldr	r0, [r3, #0]
 801180e:	4a26      	ldr	r2, [pc, #152]	; (80118a8 <HAL_DMA_IRQHandler+0x5c0>)
 8011810:	4291      	cmp	r1, r2
 8011812:	d100      	bne.n	8011816 <HAL_DMA_IRQHandler+0x52e>
 8011814:	e10a      	b.n	8011a2c <HAL_DMA_IRQHandler+0x744>
 8011816:	4a25      	ldr	r2, [pc, #148]	; (80118ac <HAL_DMA_IRQHandler+0x5c4>)
 8011818:	4291      	cmp	r1, r2
 801181a:	d100      	bne.n	801181e <HAL_DMA_IRQHandler+0x536>
 801181c:	e10c      	b.n	8011a38 <HAL_DMA_IRQHandler+0x750>
 801181e:	4a24      	ldr	r2, [pc, #144]	; (80118b0 <HAL_DMA_IRQHandler+0x5c8>)
 8011820:	4291      	cmp	r1, r2
 8011822:	d100      	bne.n	8011826 <HAL_DMA_IRQHandler+0x53e>
 8011824:	e10a      	b.n	8011a3c <HAL_DMA_IRQHandler+0x754>
 8011826:	4a23      	ldr	r2, [pc, #140]	; (80118b4 <HAL_DMA_IRQHandler+0x5cc>)
 8011828:	4291      	cmp	r1, r2
 801182a:	d100      	bne.n	801182e <HAL_DMA_IRQHandler+0x546>
 801182c:	e109      	b.n	8011a42 <HAL_DMA_IRQHandler+0x75a>
 801182e:	4b22      	ldr	r3, [pc, #136]	; (80118b8 <HAL_DMA_IRQHandler+0x5d0>)
 8011830:	4299      	cmp	r1, r3
 8011832:	d100      	bne.n	8011836 <HAL_DMA_IRQHandler+0x54e>
 8011834:	e108      	b.n	8011a48 <HAL_DMA_IRQHandler+0x760>
 8011836:	4b21      	ldr	r3, [pc, #132]	; (80118bc <HAL_DMA_IRQHandler+0x5d4>)
 8011838:	4299      	cmp	r1, r3
 801183a:	d100      	bne.n	801183e <HAL_DMA_IRQHandler+0x556>
 801183c:	e107      	b.n	8011a4e <HAL_DMA_IRQHandler+0x766>
 801183e:	4b20      	ldr	r3, [pc, #128]	; (80118c0 <HAL_DMA_IRQHandler+0x5d8>)
 8011840:	4299      	cmp	r1, r3
 8011842:	d100      	bne.n	8011846 <HAL_DMA_IRQHandler+0x55e>
 8011844:	e106      	b.n	8011a54 <HAL_DMA_IRQHandler+0x76c>
 8011846:	4b1f      	ldr	r3, [pc, #124]	; (80118c4 <HAL_DMA_IRQHandler+0x5dc>)
 8011848:	4299      	cmp	r1, r3
 801184a:	d100      	bne.n	801184e <HAL_DMA_IRQHandler+0x566>
 801184c:	e105      	b.n	8011a5a <HAL_DMA_IRQHandler+0x772>
 801184e:	4b1e      	ldr	r3, [pc, #120]	; (80118c8 <HAL_DMA_IRQHandler+0x5e0>)
 8011850:	4299      	cmp	r1, r3
 8011852:	d100      	bne.n	8011856 <HAL_DMA_IRQHandler+0x56e>
 8011854:	e103      	b.n	8011a5e <HAL_DMA_IRQHandler+0x776>
 8011856:	4b1d      	ldr	r3, [pc, #116]	; (80118cc <HAL_DMA_IRQHandler+0x5e4>)
 8011858:	4299      	cmp	r1, r3
 801185a:	d100      	bne.n	801185e <HAL_DMA_IRQHandler+0x576>
 801185c:	e101      	b.n	8011a62 <HAL_DMA_IRQHandler+0x77a>
 801185e:	4b1c      	ldr	r3, [pc, #112]	; (80118d0 <HAL_DMA_IRQHandler+0x5e8>)
 8011860:	18ca      	adds	r2, r1, r3
 8011862:	4253      	negs	r3, r2
 8011864:	415a      	adcs	r2, r3
 8011866:	4252      	negs	r2, r2
 8011868:	4b1d      	ldr	r3, [pc, #116]	; (80118e0 <HAL_DMA_IRQHandler+0x5f8>)
 801186a:	4013      	ands	r3, r2
 801186c:	2280      	movs	r2, #128	; 0x80
 801186e:	0292      	lsls	r2, r2, #10
 8011870:	4694      	mov	ip, r2
 8011872:	4463      	add	r3, ip
 8011874:	e0db      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011876:	2340      	movs	r3, #64	; 0x40
 8011878:	e7b8      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 801187a:	2380      	movs	r3, #128	; 0x80
 801187c:	00db      	lsls	r3, r3, #3
 801187e:	e7b5      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 8011880:	2380      	movs	r3, #128	; 0x80
 8011882:	01db      	lsls	r3, r3, #7
 8011884:	e7b2      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 8011886:	2380      	movs	r3, #128	; 0x80
 8011888:	02db      	lsls	r3, r3, #11
 801188a:	e7af      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 801188c:	2380      	movs	r3, #128	; 0x80
 801188e:	03db      	lsls	r3, r3, #15
 8011890:	e7ac      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 8011892:	2380      	movs	r3, #128	; 0x80
 8011894:	04db      	lsls	r3, r3, #19
 8011896:	e7a9      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 8011898:	2304      	movs	r3, #4
 801189a:	e7a7      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 801189c:	2340      	movs	r3, #64	; 0x40
 801189e:	e7a5      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 80118a0:	2380      	movs	r3, #128	; 0x80
 80118a2:	00db      	lsls	r3, r3, #3
 80118a4:	e7a2      	b.n	80117ec <HAL_DMA_IRQHandler+0x504>
 80118a6:	46c0      	nop			; (mov r8, r8)
 80118a8:	40020008 	.word	0x40020008
 80118ac:	4002001c 	.word	0x4002001c
 80118b0:	40020030 	.word	0x40020030
 80118b4:	40020044 	.word	0x40020044
 80118b8:	40020058 	.word	0x40020058
 80118bc:	4002006c 	.word	0x4002006c
 80118c0:	40020080 	.word	0x40020080
 80118c4:	40020408 	.word	0x40020408
 80118c8:	4002041c 	.word	0x4002041c
 80118cc:	40020430 	.word	0x40020430
 80118d0:	bffdfbbc 	.word	0xbffdfbbc
 80118d4:	fff88000 	.word	0xfff88000
 80118d8:	40020000 	.word	0x40020000
 80118dc:	40020400 	.word	0x40020400
 80118e0:	fffe2000 	.word	0xfffe2000
 80118e4:	fffc4000 	.word	0xfffc4000
 80118e8:	4a9b      	ldr	r2, [pc, #620]	; (8011b58 <HAL_DMA_IRQHandler+0x870>)
 80118ea:	4293      	cmp	r3, r2
 80118ec:	d027      	beq.n	801193e <HAL_DMA_IRQHandler+0x656>
 80118ee:	4a9b      	ldr	r2, [pc, #620]	; (8011b5c <HAL_DMA_IRQHandler+0x874>)
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d028      	beq.n	8011946 <HAL_DMA_IRQHandler+0x65e>
 80118f4:	4a9a      	ldr	r2, [pc, #616]	; (8011b60 <HAL_DMA_IRQHandler+0x878>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d027      	beq.n	801194a <HAL_DMA_IRQHandler+0x662>
 80118fa:	4a9a      	ldr	r2, [pc, #616]	; (8011b64 <HAL_DMA_IRQHandler+0x87c>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d027      	beq.n	8011950 <HAL_DMA_IRQHandler+0x668>
 8011900:	4a99      	ldr	r2, [pc, #612]	; (8011b68 <HAL_DMA_IRQHandler+0x880>)
 8011902:	4293      	cmp	r3, r2
 8011904:	d027      	beq.n	8011956 <HAL_DMA_IRQHandler+0x66e>
 8011906:	4a99      	ldr	r2, [pc, #612]	; (8011b6c <HAL_DMA_IRQHandler+0x884>)
 8011908:	4293      	cmp	r3, r2
 801190a:	d027      	beq.n	801195c <HAL_DMA_IRQHandler+0x674>
 801190c:	4a98      	ldr	r2, [pc, #608]	; (8011b70 <HAL_DMA_IRQHandler+0x888>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d027      	beq.n	8011962 <HAL_DMA_IRQHandler+0x67a>
 8011912:	4a98      	ldr	r2, [pc, #608]	; (8011b74 <HAL_DMA_IRQHandler+0x88c>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d027      	beq.n	8011968 <HAL_DMA_IRQHandler+0x680>
 8011918:	4a97      	ldr	r2, [pc, #604]	; (8011b78 <HAL_DMA_IRQHandler+0x890>)
 801191a:	4293      	cmp	r3, r2
 801191c:	d026      	beq.n	801196c <HAL_DMA_IRQHandler+0x684>
 801191e:	4a97      	ldr	r2, [pc, #604]	; (8011b7c <HAL_DMA_IRQHandler+0x894>)
 8011920:	4293      	cmp	r3, r2
 8011922:	d025      	beq.n	8011970 <HAL_DMA_IRQHandler+0x688>
 8011924:	4a96      	ldr	r2, [pc, #600]	; (8011b80 <HAL_DMA_IRQHandler+0x898>)
 8011926:	4694      	mov	ip, r2
 8011928:	4463      	add	r3, ip
 801192a:	425a      	negs	r2, r3
 801192c:	4153      	adcs	r3, r2
 801192e:	425b      	negs	r3, r3
 8011930:	4a94      	ldr	r2, [pc, #592]	; (8011b84 <HAL_DMA_IRQHandler+0x89c>)
 8011932:	4013      	ands	r3, r2
 8011934:	2280      	movs	r2, #128	; 0x80
 8011936:	02d2      	lsls	r2, r2, #11
 8011938:	4694      	mov	ip, r2
 801193a:	4463      	add	r3, ip
 801193c:	e000      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 801193e:	2304      	movs	r3, #4
 8011940:	4a91      	ldr	r2, [pc, #580]	; (8011b88 <HAL_DMA_IRQHandler+0x8a0>)
 8011942:	6053      	str	r3, [r2, #4]
 8011944:	e754      	b.n	80117f0 <HAL_DMA_IRQHandler+0x508>
 8011946:	2340      	movs	r3, #64	; 0x40
 8011948:	e7fa      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 801194a:	2380      	movs	r3, #128	; 0x80
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	e7f7      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 8011950:	2380      	movs	r3, #128	; 0x80
 8011952:	01db      	lsls	r3, r3, #7
 8011954:	e7f4      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 8011956:	2380      	movs	r3, #128	; 0x80
 8011958:	02db      	lsls	r3, r3, #11
 801195a:	e7f1      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 801195c:	2380      	movs	r3, #128	; 0x80
 801195e:	03db      	lsls	r3, r3, #15
 8011960:	e7ee      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 8011962:	2380      	movs	r3, #128	; 0x80
 8011964:	04db      	lsls	r3, r3, #19
 8011966:	e7eb      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 8011968:	2304      	movs	r3, #4
 801196a:	e7e9      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 801196c:	2340      	movs	r3, #64	; 0x40
 801196e:	e7e7      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
 8011970:	2380      	movs	r3, #128	; 0x80
 8011972:	00db      	lsls	r3, r3, #3
 8011974:	e7e4      	b.n	8011940 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011976:	2302      	movs	r3, #2
 8011978:	4003      	ands	r3, r0
 801197a:	1e5a      	subs	r2, r3, #1
 801197c:	4193      	sbcs	r3, r2
 801197e:	b2db      	uxtb	r3, r3
 8011980:	2b00      	cmp	r3, #0
 8011982:	d100      	bne.n	8011986 <HAL_DMA_IRQHandler+0x69e>
 8011984:	e080      	b.n	8011a88 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011986:	680b      	ldr	r3, [r1, #0]
 8011988:	079b      	lsls	r3, r3, #30
 801198a:	d57d      	bpl.n	8011a88 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 801198c:	680b      	ldr	r3, [r1, #0]
 801198e:	069b      	lsls	r3, r3, #26
 8011990:	d403      	bmi.n	801199a <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011992:	680b      	ldr	r3, [r1, #0]
 8011994:	2202      	movs	r2, #2
 8011996:	4393      	bics	r3, r2
 8011998:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801199a:	6823      	ldr	r3, [r4, #0]
 801199c:	4a74      	ldr	r2, [pc, #464]	; (8011b70 <HAL_DMA_IRQHandler+0x888>)
 801199e:	4293      	cmp	r3, r2
 80119a0:	d800      	bhi.n	80119a4 <HAL_DMA_IRQHandler+0x6bc>
 80119a2:	e08a      	b.n	8011aba <HAL_DMA_IRQHandler+0x7d2>
 80119a4:	4a6c      	ldr	r2, [pc, #432]	; (8011b58 <HAL_DMA_IRQHandler+0x870>)
 80119a6:	4293      	cmp	r3, r2
 80119a8:	d05e      	beq.n	8011a68 <HAL_DMA_IRQHandler+0x780>
 80119aa:	4a6c      	ldr	r2, [pc, #432]	; (8011b5c <HAL_DMA_IRQHandler+0x874>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	d100      	bne.n	80119b2 <HAL_DMA_IRQHandler+0x6ca>
 80119b0:	e06b      	b.n	8011a8a <HAL_DMA_IRQHandler+0x7a2>
 80119b2:	4a6b      	ldr	r2, [pc, #428]	; (8011b60 <HAL_DMA_IRQHandler+0x878>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d06a      	beq.n	8011a8e <HAL_DMA_IRQHandler+0x7a6>
 80119b8:	4a6a      	ldr	r2, [pc, #424]	; (8011b64 <HAL_DMA_IRQHandler+0x87c>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d06a      	beq.n	8011a94 <HAL_DMA_IRQHandler+0x7ac>
 80119be:	4a6a      	ldr	r2, [pc, #424]	; (8011b68 <HAL_DMA_IRQHandler+0x880>)
 80119c0:	4293      	cmp	r3, r2
 80119c2:	d06a      	beq.n	8011a9a <HAL_DMA_IRQHandler+0x7b2>
 80119c4:	4a69      	ldr	r2, [pc, #420]	; (8011b6c <HAL_DMA_IRQHandler+0x884>)
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d06a      	beq.n	8011aa0 <HAL_DMA_IRQHandler+0x7b8>
 80119ca:	4a69      	ldr	r2, [pc, #420]	; (8011b70 <HAL_DMA_IRQHandler+0x888>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d06a      	beq.n	8011aa6 <HAL_DMA_IRQHandler+0x7be>
 80119d0:	4a68      	ldr	r2, [pc, #416]	; (8011b74 <HAL_DMA_IRQHandler+0x88c>)
 80119d2:	4293      	cmp	r3, r2
 80119d4:	d06a      	beq.n	8011aac <HAL_DMA_IRQHandler+0x7c4>
 80119d6:	4a68      	ldr	r2, [pc, #416]	; (8011b78 <HAL_DMA_IRQHandler+0x890>)
 80119d8:	4293      	cmp	r3, r2
 80119da:	d069      	beq.n	8011ab0 <HAL_DMA_IRQHandler+0x7c8>
 80119dc:	4a67      	ldr	r2, [pc, #412]	; (8011b7c <HAL_DMA_IRQHandler+0x894>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d068      	beq.n	8011ab4 <HAL_DMA_IRQHandler+0x7cc>
 80119e2:	4a67      	ldr	r2, [pc, #412]	; (8011b80 <HAL_DMA_IRQHandler+0x898>)
 80119e4:	4694      	mov	ip, r2
 80119e6:	4463      	add	r3, ip
 80119e8:	425a      	negs	r2, r3
 80119ea:	4153      	adcs	r3, r2
 80119ec:	425b      	negs	r3, r3
 80119ee:	4a67      	ldr	r2, [pc, #412]	; (8011b8c <HAL_DMA_IRQHandler+0x8a4>)
 80119f0:	4013      	ands	r3, r2
 80119f2:	2280      	movs	r2, #128	; 0x80
 80119f4:	0292      	lsls	r2, r2, #10
 80119f6:	4694      	mov	ip, r2
 80119f8:	4463      	add	r3, ip
 80119fa:	e036      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80119fc:	2320      	movs	r3, #32
 80119fe:	e7bb      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a00:	2380      	movs	r3, #128	; 0x80
 8011a02:	009b      	lsls	r3, r3, #2
 8011a04:	e7b8      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a06:	2380      	movs	r3, #128	; 0x80
 8011a08:	019b      	lsls	r3, r3, #6
 8011a0a:	e7b5      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a0c:	2380      	movs	r3, #128	; 0x80
 8011a0e:	029b      	lsls	r3, r3, #10
 8011a10:	e7b2      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a12:	2380      	movs	r3, #128	; 0x80
 8011a14:	039b      	lsls	r3, r3, #14
 8011a16:	e7af      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a18:	2380      	movs	r3, #128	; 0x80
 8011a1a:	049b      	lsls	r3, r3, #18
 8011a1c:	e7ac      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a1e:	2302      	movs	r3, #2
 8011a20:	e7aa      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a22:	2320      	movs	r3, #32
 8011a24:	e7a8      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a26:	2380      	movs	r3, #128	; 0x80
 8011a28:	009b      	lsls	r3, r3, #2
 8011a2a:	e7a5      	b.n	8011978 <HAL_DMA_IRQHandler+0x690>
 8011a2c:	2302      	movs	r3, #2
 8011a2e:	4003      	ands	r3, r0
 8011a30:	1e5a      	subs	r2, r3, #1
 8011a32:	4193      	sbcs	r3, r2
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	e7a3      	b.n	8011980 <HAL_DMA_IRQHandler+0x698>
 8011a38:	2320      	movs	r3, #32
 8011a3a:	e7f8      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a3c:	2380      	movs	r3, #128	; 0x80
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	e7f5      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a42:	2380      	movs	r3, #128	; 0x80
 8011a44:	019b      	lsls	r3, r3, #6
 8011a46:	e7f2      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a48:	2380      	movs	r3, #128	; 0x80
 8011a4a:	029b      	lsls	r3, r3, #10
 8011a4c:	e7ef      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a4e:	2380      	movs	r3, #128	; 0x80
 8011a50:	039b      	lsls	r3, r3, #14
 8011a52:	e7ec      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a54:	2380      	movs	r3, #128	; 0x80
 8011a56:	049b      	lsls	r3, r3, #18
 8011a58:	e7e9      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a5a:	2302      	movs	r3, #2
 8011a5c:	e7e7      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a5e:	2320      	movs	r3, #32
 8011a60:	e7e5      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
 8011a62:	2380      	movs	r3, #128	; 0x80
 8011a64:	009b      	lsls	r3, r3, #2
 8011a66:	e7e2      	b.n	8011a2e <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011a68:	2302      	movs	r3, #2
 8011a6a:	4a49      	ldr	r2, [pc, #292]	; (8011b90 <HAL_DMA_IRQHandler+0x8a8>)
 8011a6c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a70:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011a72:	2321      	movs	r3, #33	; 0x21
 8011a74:	2201      	movs	r2, #1
 8011a76:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011a78:	3b01      	subs	r3, #1
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011a7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d001      	beq.n	8011a88 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8011a84:	0020      	movs	r0, r4
 8011a86:	4798      	blx	r3
}  
 8011a88:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011a8a:	2320      	movs	r3, #32
 8011a8c:	e7ed      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011a8e:	2380      	movs	r3, #128	; 0x80
 8011a90:	009b      	lsls	r3, r3, #2
 8011a92:	e7ea      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011a94:	2380      	movs	r3, #128	; 0x80
 8011a96:	019b      	lsls	r3, r3, #6
 8011a98:	e7e7      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011a9a:	2380      	movs	r3, #128	; 0x80
 8011a9c:	029b      	lsls	r3, r3, #10
 8011a9e:	e7e4      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011aa0:	2380      	movs	r3, #128	; 0x80
 8011aa2:	039b      	lsls	r3, r3, #14
 8011aa4:	e7e1      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011aa6:	2380      	movs	r3, #128	; 0x80
 8011aa8:	049b      	lsls	r3, r3, #18
 8011aaa:	e7de      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011aac:	2302      	movs	r3, #2
 8011aae:	e7dc      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011ab0:	2320      	movs	r3, #32
 8011ab2:	e7da      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011ab4:	2380      	movs	r3, #128	; 0x80
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	e7d7      	b.n	8011a6a <HAL_DMA_IRQHandler+0x782>
 8011aba:	4a27      	ldr	r2, [pc, #156]	; (8011b58 <HAL_DMA_IRQHandler+0x870>)
 8011abc:	4293      	cmp	r3, r2
 8011abe:	d027      	beq.n	8011b10 <HAL_DMA_IRQHandler+0x828>
 8011ac0:	4a26      	ldr	r2, [pc, #152]	; (8011b5c <HAL_DMA_IRQHandler+0x874>)
 8011ac2:	4293      	cmp	r3, r2
 8011ac4:	d028      	beq.n	8011b18 <HAL_DMA_IRQHandler+0x830>
 8011ac6:	4a26      	ldr	r2, [pc, #152]	; (8011b60 <HAL_DMA_IRQHandler+0x878>)
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d027      	beq.n	8011b1c <HAL_DMA_IRQHandler+0x834>
 8011acc:	4a25      	ldr	r2, [pc, #148]	; (8011b64 <HAL_DMA_IRQHandler+0x87c>)
 8011ace:	4293      	cmp	r3, r2
 8011ad0:	d027      	beq.n	8011b22 <HAL_DMA_IRQHandler+0x83a>
 8011ad2:	4a25      	ldr	r2, [pc, #148]	; (8011b68 <HAL_DMA_IRQHandler+0x880>)
 8011ad4:	4293      	cmp	r3, r2
 8011ad6:	d027      	beq.n	8011b28 <HAL_DMA_IRQHandler+0x840>
 8011ad8:	4a24      	ldr	r2, [pc, #144]	; (8011b6c <HAL_DMA_IRQHandler+0x884>)
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d027      	beq.n	8011b2e <HAL_DMA_IRQHandler+0x846>
 8011ade:	4a24      	ldr	r2, [pc, #144]	; (8011b70 <HAL_DMA_IRQHandler+0x888>)
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d027      	beq.n	8011b34 <HAL_DMA_IRQHandler+0x84c>
 8011ae4:	4a23      	ldr	r2, [pc, #140]	; (8011b74 <HAL_DMA_IRQHandler+0x88c>)
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	d027      	beq.n	8011b3a <HAL_DMA_IRQHandler+0x852>
 8011aea:	4a23      	ldr	r2, [pc, #140]	; (8011b78 <HAL_DMA_IRQHandler+0x890>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	d026      	beq.n	8011b3e <HAL_DMA_IRQHandler+0x856>
 8011af0:	4a22      	ldr	r2, [pc, #136]	; (8011b7c <HAL_DMA_IRQHandler+0x894>)
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d025      	beq.n	8011b42 <HAL_DMA_IRQHandler+0x85a>
 8011af6:	4a22      	ldr	r2, [pc, #136]	; (8011b80 <HAL_DMA_IRQHandler+0x898>)
 8011af8:	4694      	mov	ip, r2
 8011afa:	4463      	add	r3, ip
 8011afc:	425a      	negs	r2, r3
 8011afe:	4153      	adcs	r3, r2
 8011b00:	425b      	negs	r3, r3
 8011b02:	4a22      	ldr	r2, [pc, #136]	; (8011b8c <HAL_DMA_IRQHandler+0x8a4>)
 8011b04:	4013      	ands	r3, r2
 8011b06:	2280      	movs	r2, #128	; 0x80
 8011b08:	0292      	lsls	r2, r2, #10
 8011b0a:	4694      	mov	ip, r2
 8011b0c:	4463      	add	r3, ip
 8011b0e:	e000      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b10:	2302      	movs	r3, #2
 8011b12:	4a1d      	ldr	r2, [pc, #116]	; (8011b88 <HAL_DMA_IRQHandler+0x8a0>)
 8011b14:	6053      	str	r3, [r2, #4]
 8011b16:	e7aa      	b.n	8011a6e <HAL_DMA_IRQHandler+0x786>
 8011b18:	2320      	movs	r3, #32
 8011b1a:	e7fa      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b1c:	2380      	movs	r3, #128	; 0x80
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	e7f7      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b22:	2380      	movs	r3, #128	; 0x80
 8011b24:	019b      	lsls	r3, r3, #6
 8011b26:	e7f4      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b28:	2380      	movs	r3, #128	; 0x80
 8011b2a:	029b      	lsls	r3, r3, #10
 8011b2c:	e7f1      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b2e:	2380      	movs	r3, #128	; 0x80
 8011b30:	039b      	lsls	r3, r3, #14
 8011b32:	e7ee      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b34:	2380      	movs	r3, #128	; 0x80
 8011b36:	049b      	lsls	r3, r3, #18
 8011b38:	e7eb      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b3a:	2302      	movs	r3, #2
 8011b3c:	e7e9      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b3e:	2320      	movs	r3, #32
 8011b40:	e7e7      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
 8011b42:	2380      	movs	r3, #128	; 0x80
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	e7e4      	b.n	8011b12 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011b48:	6821      	ldr	r1, [r4, #0]
 8011b4a:	e65e      	b.n	801180a <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	0712      	lsls	r2, r2, #28
 8011b50:	d500      	bpl.n	8011b54 <HAL_DMA_IRQHandler+0x86c>
 8011b52:	e49b      	b.n	801148c <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	e44b      	b.n	80113f0 <HAL_DMA_IRQHandler+0x108>
 8011b58:	40020008 	.word	0x40020008
 8011b5c:	4002001c 	.word	0x4002001c
 8011b60:	40020030 	.word	0x40020030
 8011b64:	40020044 	.word	0x40020044
 8011b68:	40020058 	.word	0x40020058
 8011b6c:	4002006c 	.word	0x4002006c
 8011b70:	40020080 	.word	0x40020080
 8011b74:	40020408 	.word	0x40020408
 8011b78:	4002041c 	.word	0x4002041c
 8011b7c:	40020430 	.word	0x40020430
 8011b80:	bffdfbbc 	.word	0xbffdfbbc
 8011b84:	fffc4000 	.word	0xfffc4000
 8011b88:	40020000 	.word	0x40020000
 8011b8c:	fffe2000 	.word	0xfffe2000
 8011b90:	40020400 	.word	0x40020400

08011b94 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011b94:	4b0a      	ldr	r3, [pc, #40]	; (8011bc0 <FLASH_SetErrorCode+0x2c>)
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	06db      	lsls	r3, r3, #27
 8011b9a:	d504      	bpl.n	8011ba6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011b9c:	4a09      	ldr	r2, [pc, #36]	; (8011bc4 <FLASH_SetErrorCode+0x30>)
 8011b9e:	69d3      	ldr	r3, [r2, #28]
 8011ba0:	2102      	movs	r1, #2
 8011ba2:	430b      	orrs	r3, r1
 8011ba4:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011ba6:	4b06      	ldr	r3, [pc, #24]	; (8011bc0 <FLASH_SetErrorCode+0x2c>)
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	075b      	lsls	r3, r3, #29
 8011bac:	d504      	bpl.n	8011bb8 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011bae:	4a05      	ldr	r2, [pc, #20]	; (8011bc4 <FLASH_SetErrorCode+0x30>)
 8011bb0:	69d3      	ldr	r3, [r2, #28]
 8011bb2:	2101      	movs	r1, #1
 8011bb4:	430b      	orrs	r3, r1
 8011bb6:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011bb8:	4b01      	ldr	r3, [pc, #4]	; (8011bc0 <FLASH_SetErrorCode+0x2c>)
 8011bba:	2214      	movs	r2, #20
 8011bbc:	60da      	str	r2, [r3, #12]
}  
 8011bbe:	4770      	bx	lr
 8011bc0:	40022000 	.word	0x40022000
 8011bc4:	200073d0 	.word	0x200073d0

08011bc8 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011bc8:	4b05      	ldr	r3, [pc, #20]	; (8011be0 <HAL_FLASH_Unlock+0x18>)
 8011bca:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011bcc:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011bce:	061b      	lsls	r3, r3, #24
 8011bd0:	d505      	bpl.n	8011bde <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011bd2:	4b03      	ldr	r3, [pc, #12]	; (8011be0 <HAL_FLASH_Unlock+0x18>)
 8011bd4:	4a03      	ldr	r2, [pc, #12]	; (8011be4 <HAL_FLASH_Unlock+0x1c>)
 8011bd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011bd8:	4a03      	ldr	r2, [pc, #12]	; (8011be8 <HAL_FLASH_Unlock+0x20>)
 8011bda:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011bdc:	2000      	movs	r0, #0
}
 8011bde:	4770      	bx	lr
 8011be0:	40022000 	.word	0x40022000
 8011be4:	45670123 	.word	0x45670123
 8011be8:	cdef89ab 	.word	0xcdef89ab

08011bec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011bec:	4a03      	ldr	r2, [pc, #12]	; (8011bfc <HAL_FLASH_Lock+0x10>)
 8011bee:	6913      	ldr	r3, [r2, #16]
 8011bf0:	2180      	movs	r1, #128	; 0x80
 8011bf2:	430b      	orrs	r3, r1
 8011bf4:	6113      	str	r3, [r2, #16]
}
 8011bf6:	2000      	movs	r0, #0
 8011bf8:	4770      	bx	lr
 8011bfa:	46c0      	nop			; (mov r8, r8)
 8011bfc:	40022000 	.word	0x40022000

08011c00 <FLASH_WaitForLastOperation>:
{
 8011c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c02:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011c04:	f7fe fe66 	bl	80108d4 <HAL_GetTick>
 8011c08:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011c0a:	4e13      	ldr	r6, [pc, #76]	; (8011c58 <FLASH_WaitForLastOperation+0x58>)
 8011c0c:	2501      	movs	r5, #1
 8011c0e:	68f3      	ldr	r3, [r6, #12]
 8011c10:	421d      	tst	r5, r3
 8011c12:	d00a      	beq.n	8011c2a <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011c14:	1c63      	adds	r3, r4, #1
 8011c16:	d0fa      	beq.n	8011c0e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011c18:	2c00      	cmp	r4, #0
 8011c1a:	d01a      	beq.n	8011c52 <FLASH_WaitForLastOperation+0x52>
 8011c1c:	f7fe fe5a 	bl	80108d4 <HAL_GetTick>
 8011c20:	1bc0      	subs	r0, r0, r7
 8011c22:	42a0      	cmp	r0, r4
 8011c24:	d9f3      	bls.n	8011c0e <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011c26:	2003      	movs	r0, #3
 8011c28:	e012      	b.n	8011c50 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011c2a:	4b0b      	ldr	r3, [pc, #44]	; (8011c58 <FLASH_WaitForLastOperation+0x58>)
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	069b      	lsls	r3, r3, #26
 8011c30:	d502      	bpl.n	8011c38 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011c32:	4b09      	ldr	r3, [pc, #36]	; (8011c58 <FLASH_WaitForLastOperation+0x58>)
 8011c34:	2220      	movs	r2, #32
 8011c36:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011c38:	4b07      	ldr	r3, [pc, #28]	; (8011c58 <FLASH_WaitForLastOperation+0x58>)
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	06db      	lsls	r3, r3, #27
 8011c3e:	d404      	bmi.n	8011c4a <FLASH_WaitForLastOperation+0x4a>
 8011c40:	4b05      	ldr	r3, [pc, #20]	; (8011c58 <FLASH_WaitForLastOperation+0x58>)
 8011c42:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011c44:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011c46:	075b      	lsls	r3, r3, #29
 8011c48:	d502      	bpl.n	8011c50 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011c4a:	f7ff ffa3 	bl	8011b94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011c4e:	2001      	movs	r0, #1
}
 8011c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011c52:	2003      	movs	r0, #3
 8011c54:	e7fc      	b.n	8011c50 <FLASH_WaitForLastOperation+0x50>
 8011c56:	46c0      	nop			; (mov r8, r8)
 8011c58:	40022000 	.word	0x40022000

08011c5c <HAL_FLASH_Program>:
{
 8011c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c5e:	46de      	mov	lr, fp
 8011c60:	4657      	mov	r7, sl
 8011c62:	464e      	mov	r6, r9
 8011c64:	4645      	mov	r5, r8
 8011c66:	b5e0      	push	{r5, r6, r7, lr}
 8011c68:	b083      	sub	sp, #12
 8011c6a:	0004      	movs	r4, r0
 8011c6c:	000e      	movs	r6, r1
 8011c6e:	9201      	str	r2, [sp, #4]
 8011c70:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011c72:	4b2a      	ldr	r3, [pc, #168]	; (8011d1c <HAL_FLASH_Program+0xc0>)
 8011c74:	7e1b      	ldrb	r3, [r3, #24]
 8011c76:	2b01      	cmp	r3, #1
 8011c78:	d04b      	beq.n	8011d12 <HAL_FLASH_Program+0xb6>
 8011c7a:	4b28      	ldr	r3, [pc, #160]	; (8011d1c <HAL_FLASH_Program+0xc0>)
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011c80:	4827      	ldr	r0, [pc, #156]	; (8011d20 <HAL_FLASH_Program+0xc4>)
 8011c82:	f7ff ffbd 	bl	8011c00 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011c86:	2800      	cmp	r0, #0
 8011c88:	d139      	bne.n	8011cfe <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011c8a:	2c01      	cmp	r4, #1
 8011c8c:	d043      	beq.n	8011d16 <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011c8e:	3c02      	subs	r4, #2
 8011c90:	4263      	negs	r3, r4
 8011c92:	415c      	adcs	r4, r3
 8011c94:	4264      	negs	r4, r4
 8011c96:	2301      	movs	r3, #1
 8011c98:	439c      	bics	r4, r3
 8011c9a:	46a0      	mov	r8, r4
 8011c9c:	3303      	adds	r3, #3
 8011c9e:	469c      	mov	ip, r3
 8011ca0:	44e0      	add	r8, ip
{
 8011ca2:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011ca4:	4b1d      	ldr	r3, [pc, #116]	; (8011d1c <HAL_FLASH_Program+0xc0>)
 8011ca6:	469b      	mov	fp, r3
 8011ca8:	2300      	movs	r3, #0
 8011caa:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011cac:	4c1d      	ldr	r4, [pc, #116]	; (8011d24 <HAL_FLASH_Program+0xc8>)
 8011cae:	e01e      	b.n	8011cee <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011cb0:	2220      	movs	r2, #32
 8011cb2:	1ad2      	subs	r2, r2, r3
 8011cb4:	4649      	mov	r1, r9
 8011cb6:	4091      	lsls	r1, r2
 8011cb8:	000a      	movs	r2, r1
 8011cba:	9901      	ldr	r1, [sp, #4]
 8011cbc:	40d9      	lsrs	r1, r3
 8011cbe:	000b      	movs	r3, r1
 8011cc0:	4313      	orrs	r3, r2
 8011cc2:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011cc4:	465a      	mov	r2, fp
 8011cc6:	4651      	mov	r1, sl
 8011cc8:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011cca:	6922      	ldr	r2, [r4, #16]
 8011ccc:	2701      	movs	r7, #1
 8011cce:	433a      	orrs	r2, r7
 8011cd0:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011cd2:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011cd4:	4812      	ldr	r0, [pc, #72]	; (8011d20 <HAL_FLASH_Program+0xc4>)
 8011cd6:	f7ff ff93 	bl	8011c00 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011cda:	6923      	ldr	r3, [r4, #16]
 8011cdc:	43bb      	bics	r3, r7
 8011cde:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	d10c      	bne.n	8011cfe <HAL_FLASH_Program+0xa2>
 8011ce4:	3501      	adds	r5, #1
 8011ce6:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8011ce8:	b2eb      	uxtb	r3, r5
 8011cea:	4598      	cmp	r8, r3
 8011cec:	d907      	bls.n	8011cfe <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011cee:	012b      	lsls	r3, r5, #4
 8011cf0:	2220      	movs	r2, #32
 8011cf2:	4252      	negs	r2, r2
 8011cf4:	189a      	adds	r2, r3, r2
 8011cf6:	d4db      	bmi.n	8011cb0 <HAL_FLASH_Program+0x54>
 8011cf8:	464b      	mov	r3, r9
 8011cfa:	40d3      	lsrs	r3, r2
 8011cfc:	e7e1      	b.n	8011cc2 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8011cfe:	4b07      	ldr	r3, [pc, #28]	; (8011d1c <HAL_FLASH_Program+0xc0>)
 8011d00:	2200      	movs	r2, #0
 8011d02:	761a      	strb	r2, [r3, #24]
}
 8011d04:	b003      	add	sp, #12
 8011d06:	bc3c      	pop	{r2, r3, r4, r5}
 8011d08:	4690      	mov	r8, r2
 8011d0a:	4699      	mov	r9, r3
 8011d0c:	46a2      	mov	sl, r4
 8011d0e:	46ab      	mov	fp, r5
 8011d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011d12:	2002      	movs	r0, #2
 8011d14:	e7f6      	b.n	8011d04 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 8011d16:	2301      	movs	r3, #1
 8011d18:	4698      	mov	r8, r3
 8011d1a:	e7c2      	b.n	8011ca2 <HAL_FLASH_Program+0x46>
 8011d1c:	200073d0 	.word	0x200073d0
 8011d20:	0000c350 	.word	0x0000c350
 8011d24:	40022000 	.word	0x40022000

08011d28 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011d28:	4b06      	ldr	r3, [pc, #24]	; (8011d44 <FLASH_MassErase+0x1c>)
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011d2e:	4b06      	ldr	r3, [pc, #24]	; (8011d48 <FLASH_MassErase+0x20>)
 8011d30:	691a      	ldr	r2, [r3, #16]
 8011d32:	2104      	movs	r1, #4
 8011d34:	430a      	orrs	r2, r1
 8011d36:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011d38:	691a      	ldr	r2, [r3, #16]
 8011d3a:	313c      	adds	r1, #60	; 0x3c
 8011d3c:	430a      	orrs	r2, r1
 8011d3e:	611a      	str	r2, [r3, #16]
}
 8011d40:	4770      	bx	lr
 8011d42:	46c0      	nop			; (mov r8, r8)
 8011d44:	200073d0 	.word	0x200073d0
 8011d48:	40022000 	.word	0x40022000

08011d4c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011d4c:	4b06      	ldr	r3, [pc, #24]	; (8011d68 <FLASH_PageErase+0x1c>)
 8011d4e:	2200      	movs	r2, #0
 8011d50:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011d52:	4b06      	ldr	r3, [pc, #24]	; (8011d6c <FLASH_PageErase+0x20>)
 8011d54:	691a      	ldr	r2, [r3, #16]
 8011d56:	2102      	movs	r1, #2
 8011d58:	430a      	orrs	r2, r1
 8011d5a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011d5c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011d5e:	691a      	ldr	r2, [r3, #16]
 8011d60:	313e      	adds	r1, #62	; 0x3e
 8011d62:	430a      	orrs	r2, r1
 8011d64:	611a      	str	r2, [r3, #16]
}
 8011d66:	4770      	bx	lr
 8011d68:	200073d0 	.word	0x200073d0
 8011d6c:	40022000 	.word	0x40022000

08011d70 <HAL_FLASHEx_Erase>:
{
 8011d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d72:	46c6      	mov	lr, r8
 8011d74:	b500      	push	{lr}
 8011d76:	0006      	movs	r6, r0
 8011d78:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8011d7a:	4b2a      	ldr	r3, [pc, #168]	; (8011e24 <HAL_FLASHEx_Erase+0xb4>)
 8011d7c:	7e1b      	ldrb	r3, [r3, #24]
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	d04d      	beq.n	8011e1e <HAL_FLASHEx_Erase+0xae>
 8011d82:	4b28      	ldr	r3, [pc, #160]	; (8011e24 <HAL_FLASHEx_Erase+0xb4>)
 8011d84:	2201      	movs	r2, #1
 8011d86:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011d88:	6803      	ldr	r3, [r0, #0]
 8011d8a:	2b01      	cmp	r3, #1
 8011d8c:	d029      	beq.n	8011de2 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011d8e:	4826      	ldr	r0, [pc, #152]	; (8011e28 <HAL_FLASHEx_Erase+0xb8>)
 8011d90:	f7ff ff36 	bl	8011c00 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011d94:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d129      	bne.n	8011dee <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	425b      	negs	r3, r3
 8011d9e:	4642      	mov	r2, r8
 8011da0:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011da2:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011da4:	68b3      	ldr	r3, [r6, #8]
 8011da6:	02db      	lsls	r3, r3, #11
 8011da8:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8011daa:	429c      	cmp	r4, r3
 8011dac:	d235      	bcs.n	8011e1a <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011dae:	4f1f      	ldr	r7, [pc, #124]	; (8011e2c <HAL_FLASHEx_Erase+0xbc>)
 8011db0:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 8011db2:	0020      	movs	r0, r4
 8011db4:	f7ff ffca 	bl	8011d4c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011db8:	481b      	ldr	r0, [pc, #108]	; (8011e28 <HAL_FLASHEx_Erase+0xb8>)
 8011dba:	f7ff ff21 	bl	8011c00 <FLASH_WaitForLastOperation>
 8011dbe:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011dc0:	693b      	ldr	r3, [r7, #16]
 8011dc2:	43ab      	bics	r3, r5
 8011dc4:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 8011dc6:	2800      	cmp	r0, #0
 8011dc8:	d124      	bne.n	8011e14 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 8011dca:	2380      	movs	r3, #128	; 0x80
 8011dcc:	011b      	lsls	r3, r3, #4
 8011dce:	469c      	mov	ip, r3
 8011dd0:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011dd2:	68b3      	ldr	r3, [r6, #8]
 8011dd4:	02db      	lsls	r3, r3, #11
 8011dd6:	6871      	ldr	r1, [r6, #4]
 8011dd8:	468c      	mov	ip, r1
 8011dda:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011ddc:	42a3      	cmp	r3, r4
 8011dde:	d8e8      	bhi.n	8011db2 <HAL_FLASHEx_Erase+0x42>
 8011de0:	e005      	b.n	8011dee <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011de2:	4811      	ldr	r0, [pc, #68]	; (8011e28 <HAL_FLASHEx_Erase+0xb8>)
 8011de4:	f7ff ff0c 	bl	8011c00 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011de8:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011dea:	2800      	cmp	r0, #0
 8011dec:	d006      	beq.n	8011dfc <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8011dee:	4b0d      	ldr	r3, [pc, #52]	; (8011e24 <HAL_FLASHEx_Erase+0xb4>)
 8011df0:	2100      	movs	r1, #0
 8011df2:	7619      	strb	r1, [r3, #24]
}
 8011df4:	0010      	movs	r0, r2
 8011df6:	bc04      	pop	{r2}
 8011df8:	4690      	mov	r8, r2
 8011dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011dfc:	f7ff ff94 	bl	8011d28 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011e00:	4809      	ldr	r0, [pc, #36]	; (8011e28 <HAL_FLASHEx_Erase+0xb8>)
 8011e02:	f7ff fefd 	bl	8011c00 <FLASH_WaitForLastOperation>
 8011e06:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011e08:	4908      	ldr	r1, [pc, #32]	; (8011e2c <HAL_FLASHEx_Erase+0xbc>)
 8011e0a:	690b      	ldr	r3, [r1, #16]
 8011e0c:	2004      	movs	r0, #4
 8011e0e:	4383      	bics	r3, r0
 8011e10:	610b      	str	r3, [r1, #16]
 8011e12:	e7ec      	b.n	8011dee <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8011e14:	4643      	mov	r3, r8
 8011e16:	601c      	str	r4, [r3, #0]
            break;
 8011e18:	e7e9      	b.n	8011dee <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011e1a:	2201      	movs	r2, #1
 8011e1c:	e7e7      	b.n	8011dee <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8011e1e:	2202      	movs	r2, #2
 8011e20:	e7e8      	b.n	8011df4 <HAL_FLASHEx_Erase+0x84>
 8011e22:	46c0      	nop			; (mov r8, r8)
 8011e24:	200073d0 	.word	0x200073d0
 8011e28:	0000c350 	.word	0x0000c350
 8011e2c:	40022000 	.word	0x40022000

08011e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e32:	46de      	mov	lr, fp
 8011e34:	4657      	mov	r7, sl
 8011e36:	464e      	mov	r6, r9
 8011e38:	4645      	mov	r5, r8
 8011e3a:	b5e0      	push	{r5, r6, r7, lr}
 8011e3c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011e3e:	680a      	ldr	r2, [r1, #0]
 8011e40:	2a00      	cmp	r2, #0
 8011e42:	d100      	bne.n	8011e46 <HAL_GPIO_Init+0x16>
 8011e44:	e0bf      	b.n	8011fc6 <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 8011e46:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011e48:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011e4a:	2410      	movs	r4, #16
 8011e4c:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011e4e:	3c0d      	subs	r4, #13
 8011e50:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011e52:	2480      	movs	r4, #128	; 0x80
 8011e54:	0564      	lsls	r4, r4, #21
 8011e56:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011e58:	4c5e      	ldr	r4, [pc, #376]	; (8011fd4 <HAL_GPIO_Init+0x1a4>)
 8011e5a:	1904      	adds	r4, r0, r4
 8011e5c:	1e65      	subs	r5, r4, #1
 8011e5e:	41ac      	sbcs	r4, r5
 8011e60:	3404      	adds	r4, #4
 8011e62:	46a1      	mov	r9, r4
 8011e64:	e03b      	b.n	8011ede <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 8011e66:	08dc      	lsrs	r4, r3, #3
 8011e68:	00a4      	lsls	r4, r4, #2
 8011e6a:	1904      	adds	r4, r0, r4
 8011e6c:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011e6e:	2507      	movs	r5, #7
 8011e70:	401d      	ands	r5, r3
 8011e72:	00ad      	lsls	r5, r5, #2
 8011e74:	220f      	movs	r2, #15
 8011e76:	40aa      	lsls	r2, r5
 8011e78:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011e7a:	690a      	ldr	r2, [r1, #16]
 8011e7c:	40aa      	lsls	r2, r5
 8011e7e:	0015      	movs	r5, r2
 8011e80:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 8011e82:	6225      	str	r5, [r4, #32]
 8011e84:	e035      	b.n	8011ef2 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011e86:	2500      	movs	r5, #0
 8011e88:	465a      	mov	r2, fp
 8011e8a:	4095      	lsls	r5, r2
 8011e8c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011e8e:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011e90:	4c51      	ldr	r4, [pc, #324]	; (8011fd8 <HAL_GPIO_Init+0x1a8>)
 8011e92:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011e94:	9a01      	ldr	r2, [sp, #4]
 8011e96:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011e98:	684a      	ldr	r2, [r1, #4]
 8011e9a:	03d2      	lsls	r2, r2, #15
 8011e9c:	d500      	bpl.n	8011ea0 <HAL_GPIO_Init+0x70>
 8011e9e:	e086      	b.n	8011fae <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011ea0:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011ea2:	4f4d      	ldr	r7, [pc, #308]	; (8011fd8 <HAL_GPIO_Init+0x1a8>)
 8011ea4:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 8011ea6:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011ea8:	684a      	ldr	r2, [r1, #4]
 8011eaa:	0392      	lsls	r2, r2, #14
 8011eac:	d500      	bpl.n	8011eb0 <HAL_GPIO_Init+0x80>
 8011eae:	e081      	b.n	8011fb4 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011eb0:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011eb2:	4f49      	ldr	r7, [pc, #292]	; (8011fd8 <HAL_GPIO_Init+0x1a8>)
 8011eb4:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011eb6:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011eb8:	684a      	ldr	r2, [r1, #4]
 8011eba:	02d2      	lsls	r2, r2, #11
 8011ebc:	d47d      	bmi.n	8011fba <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011ebe:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011ec0:	4f45      	ldr	r7, [pc, #276]	; (8011fd8 <HAL_GPIO_Init+0x1a8>)
 8011ec2:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 8011ec4:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011ec6:	684a      	ldr	r2, [r1, #4]
 8011ec8:	0292      	lsls	r2, r2, #10
 8011eca:	d479      	bmi.n	8011fc0 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011ecc:	0022      	movs	r2, r4
 8011ece:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011ed0:	4c41      	ldr	r4, [pc, #260]	; (8011fd8 <HAL_GPIO_Init+0x1a8>)
 8011ed2:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 8011ed4:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011ed6:	680a      	ldr	r2, [r1, #0]
 8011ed8:	0014      	movs	r4, r2
 8011eda:	40dc      	lsrs	r4, r3
 8011edc:	d073      	beq.n	8011fc6 <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011ede:	0034      	movs	r4, r6
 8011ee0:	409c      	lsls	r4, r3
 8011ee2:	4022      	ands	r2, r4
 8011ee4:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 8011ee6:	d0f5      	beq.n	8011ed4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011ee8:	684c      	ldr	r4, [r1, #4]
 8011eea:	4642      	mov	r2, r8
 8011eec:	4394      	bics	r4, r2
 8011eee:	2c02      	cmp	r4, #2
 8011ef0:	d0b9      	beq.n	8011e66 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8011ef2:	6804      	ldr	r4, [r0, #0]
 8011ef4:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011ef6:	4665      	mov	r5, ip
 8011ef8:	40bd      	lsls	r5, r7
 8011efa:	43ed      	mvns	r5, r5
 8011efc:	402c      	ands	r4, r5
 8011efe:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011f00:	684c      	ldr	r4, [r1, #4]
 8011f02:	4662      	mov	r2, ip
 8011f04:	4014      	ands	r4, r2
 8011f06:	40bc      	lsls	r4, r7
 8011f08:	465a      	mov	r2, fp
 8011f0a:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011f0c:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011f0e:	684c      	ldr	r4, [r1, #4]
 8011f10:	4642      	mov	r2, r8
 8011f12:	4394      	bics	r4, r2
 8011f14:	3c01      	subs	r4, #1
 8011f16:	2c01      	cmp	r4, #1
 8011f18:	d813      	bhi.n	8011f42 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8011f1a:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011f1c:	402c      	ands	r4, r5
 8011f1e:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011f20:	68cc      	ldr	r4, [r1, #12]
 8011f22:	40bc      	lsls	r4, r7
 8011f24:	465a      	mov	r2, fp
 8011f26:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8011f28:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8011f2a:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011f2c:	0032      	movs	r2, r6
 8011f2e:	409a      	lsls	r2, r3
 8011f30:	4394      	bics	r4, r2
 8011f32:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011f34:	684a      	ldr	r2, [r1, #4]
 8011f36:	0914      	lsrs	r4, r2, #4
 8011f38:	4034      	ands	r4, r6
 8011f3a:	409c      	lsls	r4, r3
 8011f3c:	465a      	mov	r2, fp
 8011f3e:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8011f40:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011f42:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011f44:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011f46:	688d      	ldr	r5, [r1, #8]
 8011f48:	40bd      	lsls	r5, r7
 8011f4a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011f4c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011f4e:	684a      	ldr	r2, [r1, #4]
 8011f50:	4654      	mov	r4, sl
 8011f52:	4222      	tst	r2, r4
 8011f54:	d0be      	beq.n	8011ed4 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011f56:	4c21      	ldr	r4, [pc, #132]	; (8011fdc <HAL_GPIO_Init+0x1ac>)
 8011f58:	69a5      	ldr	r5, [r4, #24]
 8011f5a:	4335      	orrs	r5, r6
 8011f5c:	61a5      	str	r5, [r4, #24]
 8011f5e:	69a4      	ldr	r4, [r4, #24]
 8011f60:	4034      	ands	r4, r6
 8011f62:	9403      	str	r4, [sp, #12]
 8011f64:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011f66:	089c      	lsrs	r4, r3, #2
 8011f68:	00a4      	lsls	r4, r4, #2
 8011f6a:	4a1d      	ldr	r2, [pc, #116]	; (8011fe0 <HAL_GPIO_Init+0x1b0>)
 8011f6c:	4693      	mov	fp, r2
 8011f6e:	445c      	add	r4, fp
 8011f70:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011f72:	4667      	mov	r7, ip
 8011f74:	401f      	ands	r7, r3
 8011f76:	00ba      	lsls	r2, r7, #2
 8011f78:	4693      	mov	fp, r2
 8011f7a:	270f      	movs	r7, #15
 8011f7c:	4097      	lsls	r7, r2
 8011f7e:	43bd      	bics	r5, r7
 8011f80:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011f82:	2590      	movs	r5, #144	; 0x90
 8011f84:	05ed      	lsls	r5, r5, #23
 8011f86:	42a8      	cmp	r0, r5
 8011f88:	d100      	bne.n	8011f8c <HAL_GPIO_Init+0x15c>
 8011f8a:	e77c      	b.n	8011e86 <HAL_GPIO_Init+0x56>
 8011f8c:	4d15      	ldr	r5, [pc, #84]	; (8011fe4 <HAL_GPIO_Init+0x1b4>)
 8011f8e:	42a8      	cmp	r0, r5
 8011f90:	d007      	beq.n	8011fa2 <HAL_GPIO_Init+0x172>
 8011f92:	4d15      	ldr	r5, [pc, #84]	; (8011fe8 <HAL_GPIO_Init+0x1b8>)
 8011f94:	42a8      	cmp	r0, r5
 8011f96:	d006      	beq.n	8011fa6 <HAL_GPIO_Init+0x176>
 8011f98:	4d14      	ldr	r5, [pc, #80]	; (8011fec <HAL_GPIO_Init+0x1bc>)
 8011f9a:	42a8      	cmp	r0, r5
 8011f9c:	d005      	beq.n	8011faa <HAL_GPIO_Init+0x17a>
 8011f9e:	464d      	mov	r5, r9
 8011fa0:	e772      	b.n	8011e88 <HAL_GPIO_Init+0x58>
 8011fa2:	0035      	movs	r5, r6
 8011fa4:	e770      	b.n	8011e88 <HAL_GPIO_Init+0x58>
 8011fa6:	2502      	movs	r5, #2
 8011fa8:	e76e      	b.n	8011e88 <HAL_GPIO_Init+0x58>
 8011faa:	4665      	mov	r5, ip
 8011fac:	e76c      	b.n	8011e88 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 8011fae:	9a01      	ldr	r2, [sp, #4]
 8011fb0:	4314      	orrs	r4, r2
 8011fb2:	e776      	b.n	8011ea2 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 8011fb4:	9a01      	ldr	r2, [sp, #4]
 8011fb6:	4314      	orrs	r4, r2
 8011fb8:	e77b      	b.n	8011eb2 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 8011fba:	9a01      	ldr	r2, [sp, #4]
 8011fbc:	4314      	orrs	r4, r2
 8011fbe:	e77f      	b.n	8011ec0 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 8011fc0:	9a01      	ldr	r2, [sp, #4]
 8011fc2:	4322      	orrs	r2, r4
 8011fc4:	e784      	b.n	8011ed0 <HAL_GPIO_Init+0xa0>
  } 
}
 8011fc6:	b005      	add	sp, #20
 8011fc8:	bc3c      	pop	{r2, r3, r4, r5}
 8011fca:	4690      	mov	r8, r2
 8011fcc:	4699      	mov	r9, r3
 8011fce:	46a2      	mov	sl, r4
 8011fd0:	46ab      	mov	fp, r5
 8011fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd4:	b7fff000 	.word	0xb7fff000
 8011fd8:	40010400 	.word	0x40010400
 8011fdc:	40021000 	.word	0x40021000
 8011fe0:	40010000 	.word	0x40010000
 8011fe4:	48000400 	.word	0x48000400
 8011fe8:	48000800 	.word	0x48000800
 8011fec:	48000c00 	.word	0x48000c00

08011ff0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ff2:	46de      	mov	lr, fp
 8011ff4:	4657      	mov	r7, sl
 8011ff6:	464e      	mov	r6, r9
 8011ff8:	4645      	mov	r5, r8
 8011ffa:	b5e0      	push	{r5, r6, r7, lr}
 8011ffc:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011ffe:	2900      	cmp	r1, #0
 8012000:	d071      	beq.n	80120e6 <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8012002:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8012004:	2201      	movs	r2, #1
 8012006:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8012008:	3202      	adds	r2, #2
 801200a:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801200c:	3204      	adds	r2, #4
 801200e:	4693      	mov	fp, r2
 8012010:	3208      	adds	r2, #8
 8012012:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8012014:	4a37      	ldr	r2, [pc, #220]	; (80120f4 <HAL_GPIO_DeInit+0x104>)
 8012016:	1882      	adds	r2, r0, r2
 8012018:	1e54      	subs	r4, r2, #1
 801201a:	41a2      	sbcs	r2, r4
 801201c:	3204      	adds	r2, #4
 801201e:	9201      	str	r2, [sp, #4]
 8012020:	9100      	str	r1, [sp, #0]
 8012022:	e009      	b.n	8012038 <HAL_GPIO_DeInit+0x48>
 8012024:	2100      	movs	r1, #0
 8012026:	4689      	mov	r9, r1
 8012028:	4649      	mov	r1, r9
 801202a:	40a9      	lsls	r1, r5
 801202c:	42b1      	cmp	r1, r6
 801202e:	d048      	beq.n	80120c2 <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8012030:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8012032:	9a00      	ldr	r2, [sp, #0]
 8012034:	40da      	lsrs	r2, r3
 8012036:	d056      	beq.n	80120e6 <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8012038:	4662      	mov	r2, ip
 801203a:	409a      	lsls	r2, r3
 801203c:	9900      	ldr	r1, [sp, #0]
 801203e:	400a      	ands	r2, r1
    if (iocurrent)
 8012040:	d0f6      	beq.n	8012030 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8012042:	6804      	ldr	r4, [r0, #0]
 8012044:	005d      	lsls	r5, r3, #1
 8012046:	4646      	mov	r6, r8
 8012048:	40ae      	lsls	r6, r5
 801204a:	43f5      	mvns	r5, r6
 801204c:	402c      	ands	r4, r5
 801204e:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012050:	08dc      	lsrs	r4, r3, #3
 8012052:	00a4      	lsls	r4, r4, #2
 8012054:	1904      	adds	r4, r0, r4
 8012056:	6a26      	ldr	r6, [r4, #32]
 8012058:	465f      	mov	r7, fp
 801205a:	401f      	ands	r7, r3
 801205c:	00bf      	lsls	r7, r7, #2
 801205e:	4651      	mov	r1, sl
 8012060:	40b9      	lsls	r1, r7
 8012062:	438e      	bics	r6, r1
 8012064:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012066:	6884      	ldr	r4, [r0, #8]
 8012068:	402c      	ands	r4, r5
 801206a:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 801206c:	6844      	ldr	r4, [r0, #4]
 801206e:	4666      	mov	r6, ip
 8012070:	409e      	lsls	r6, r3
 8012072:	43b4      	bics	r4, r6
 8012074:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 8012076:	68c4      	ldr	r4, [r0, #12]
 8012078:	4025      	ands	r5, r4
 801207a:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 801207c:	089c      	lsrs	r4, r3, #2
 801207e:	00a4      	lsls	r4, r4, #2
 8012080:	491d      	ldr	r1, [pc, #116]	; (80120f8 <HAL_GPIO_DeInit+0x108>)
 8012082:	4689      	mov	r9, r1
 8012084:	444c      	add	r4, r9
 8012086:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8012088:	4645      	mov	r5, r8
 801208a:	401d      	ands	r5, r3
 801208c:	00ad      	lsls	r5, r5, #2
 801208e:	4657      	mov	r7, sl
 8012090:	40af      	lsls	r7, r5
 8012092:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8012094:	2190      	movs	r1, #144	; 0x90
 8012096:	05c9      	lsls	r1, r1, #23
 8012098:	4288      	cmp	r0, r1
 801209a:	d0c3      	beq.n	8012024 <HAL_GPIO_DeInit+0x34>
 801209c:	4917      	ldr	r1, [pc, #92]	; (80120fc <HAL_GPIO_DeInit+0x10c>)
 801209e:	4288      	cmp	r0, r1
 80120a0:	d008      	beq.n	80120b4 <HAL_GPIO_DeInit+0xc4>
 80120a2:	4917      	ldr	r1, [pc, #92]	; (8012100 <HAL_GPIO_DeInit+0x110>)
 80120a4:	4288      	cmp	r0, r1
 80120a6:	d007      	beq.n	80120b8 <HAL_GPIO_DeInit+0xc8>
 80120a8:	4916      	ldr	r1, [pc, #88]	; (8012104 <HAL_GPIO_DeInit+0x114>)
 80120aa:	4288      	cmp	r0, r1
 80120ac:	d007      	beq.n	80120be <HAL_GPIO_DeInit+0xce>
 80120ae:	9901      	ldr	r1, [sp, #4]
 80120b0:	4689      	mov	r9, r1
 80120b2:	e7b9      	b.n	8012028 <HAL_GPIO_DeInit+0x38>
 80120b4:	46e1      	mov	r9, ip
 80120b6:	e7b7      	b.n	8012028 <HAL_GPIO_DeInit+0x38>
 80120b8:	2102      	movs	r1, #2
 80120ba:	4689      	mov	r9, r1
 80120bc:	e7b4      	b.n	8012028 <HAL_GPIO_DeInit+0x38>
 80120be:	46c1      	mov	r9, r8
 80120c0:	e7b2      	b.n	8012028 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80120c2:	68a5      	ldr	r5, [r4, #8]
 80120c4:	43bd      	bics	r5, r7
 80120c6:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80120c8:	4c0f      	ldr	r4, [pc, #60]	; (8012108 <HAL_GPIO_DeInit+0x118>)
 80120ca:	6825      	ldr	r5, [r4, #0]
 80120cc:	43d2      	mvns	r2, r2
 80120ce:	4015      	ands	r5, r2
 80120d0:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80120d2:	6865      	ldr	r5, [r4, #4]
 80120d4:	4015      	ands	r5, r2
 80120d6:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80120d8:	68a5      	ldr	r5, [r4, #8]
 80120da:	4015      	ands	r5, r2
 80120dc:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80120de:	68e5      	ldr	r5, [r4, #12]
 80120e0:	402a      	ands	r2, r5
 80120e2:	60e2      	str	r2, [r4, #12]
 80120e4:	e7a4      	b.n	8012030 <HAL_GPIO_DeInit+0x40>
  }
}
 80120e6:	b003      	add	sp, #12
 80120e8:	bc3c      	pop	{r2, r3, r4, r5}
 80120ea:	4690      	mov	r8, r2
 80120ec:	4699      	mov	r9, r3
 80120ee:	46a2      	mov	sl, r4
 80120f0:	46ab      	mov	fp, r5
 80120f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120f4:	b7fff000 	.word	0xb7fff000
 80120f8:	40010000 	.word	0x40010000
 80120fc:	48000400 	.word	0x48000400
 8012100:	48000800 	.word	0x48000800
 8012104:	48000c00 	.word	0x48000c00
 8012108:	40010400 	.word	0x40010400

0801210c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801210c:	6900      	ldr	r0, [r0, #16]
 801210e:	4008      	ands	r0, r1
 8012110:	1e41      	subs	r1, r0, #1
 8012112:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8012114:	b2c0      	uxtb	r0, r0
  }
 8012116:	4770      	bx	lr

08012118 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012118:	2a00      	cmp	r2, #0
 801211a:	d101      	bne.n	8012120 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801211c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 801211e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012120:	6181      	str	r1, [r0, #24]
 8012122:	e7fc      	b.n	801211e <HAL_GPIO_WritePin+0x6>

08012124 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8012124:	6943      	ldr	r3, [r0, #20]
 8012126:	4059      	eors	r1, r3
 8012128:	6141      	str	r1, [r0, #20]
}
 801212a:	4770      	bx	lr

0801212c <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 801212c:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 801212e:	6804      	ldr	r4, [r0, #0]
 8012130:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8012132:	4d06      	ldr	r5, [pc, #24]	; (801214c <I2C_TransferConfig+0x20>)
 8012134:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8012136:	0412      	lsls	r2, r2, #16
 8012138:	9d03      	ldr	r5, [sp, #12]
 801213a:	432b      	orrs	r3, r5
 801213c:	431a      	orrs	r2, r3
 801213e:	0589      	lsls	r1, r1, #22
 8012140:	0d89      	lsrs	r1, r1, #22
 8012142:	430a      	orrs	r2, r1
 8012144:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8012146:	6062      	str	r2, [r4, #4]
}  
 8012148:	bd30      	pop	{r4, r5, pc}
 801214a:	46c0      	nop			; (mov r8, r8)
 801214c:	fc009800 	.word	0xfc009800

08012150 <I2C_IsAcknowledgeFailed>:
{
 8012150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012152:	0007      	movs	r7, r0
 8012154:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8012156:	f7fe fbbd 	bl	80108d4 <HAL_GetTick>
 801215a:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8012160:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012162:	06d2      	lsls	r2, r2, #27
 8012164:	d53c      	bpl.n	80121e0 <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8012166:	2235      	movs	r2, #53	; 0x35
 8012168:	5cba      	ldrb	r2, [r7, r2]
 801216a:	2a12      	cmp	r2, #18
 801216c:	d007      	beq.n	801217e <I2C_IsAcknowledgeFailed+0x2e>
 801216e:	2235      	movs	r2, #53	; 0x35
 8012170:	5cba      	ldrb	r2, [r7, r2]
 8012172:	2a52      	cmp	r2, #82	; 0x52
 8012174:	d003      	beq.n	801217e <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8012176:	2235      	movs	r2, #53	; 0x35
 8012178:	5cba      	ldrb	r2, [r7, r2]
 801217a:	2a62      	cmp	r2, #98	; 0x62
 801217c:	d107      	bne.n	801218e <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 801217e:	685a      	ldr	r2, [r3, #4]
 8012180:	0192      	lsls	r2, r2, #6
 8012182:	d404      	bmi.n	801218e <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8012184:	6859      	ldr	r1, [r3, #4]
 8012186:	2280      	movs	r2, #128	; 0x80
 8012188:	01d2      	lsls	r2, r2, #7
 801218a:	430a      	orrs	r2, r1
 801218c:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801218e:	2620      	movs	r6, #32
 8012190:	683a      	ldr	r2, [r7, #0]
 8012192:	6993      	ldr	r3, [r2, #24]
 8012194:	421e      	tst	r6, r3
 8012196:	d110      	bne.n	80121ba <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 8012198:	1c63      	adds	r3, r4, #1
 801219a:	d0fa      	beq.n	8012192 <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 801219c:	2c00      	cmp	r4, #0
 801219e:	d004      	beq.n	80121aa <I2C_IsAcknowledgeFailed+0x5a>
 80121a0:	f7fe fb98 	bl	80108d4 <HAL_GetTick>
 80121a4:	1b40      	subs	r0, r0, r5
 80121a6:	42a0      	cmp	r0, r4
 80121a8:	d9f2      	bls.n	8012190 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 80121aa:	2335      	movs	r3, #53	; 0x35
 80121ac:	2201      	movs	r2, #1
 80121ae:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 80121b0:	3b01      	subs	r3, #1
 80121b2:	2200      	movs	r2, #0
 80121b4:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80121b6:	2003      	movs	r0, #3
 80121b8:	e012      	b.n	80121e0 <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80121ba:	2310      	movs	r3, #16
 80121bc:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	2220      	movs	r2, #32
 80121c2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80121c4:	683a      	ldr	r2, [r7, #0]
 80121c6:	6853      	ldr	r3, [r2, #4]
 80121c8:	4906      	ldr	r1, [pc, #24]	; (80121e4 <I2C_IsAcknowledgeFailed+0x94>)
 80121ca:	400b      	ands	r3, r1
 80121cc:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80121ce:	2304      	movs	r3, #4
 80121d0:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 80121d2:	3331      	adds	r3, #49	; 0x31
 80121d4:	2201      	movs	r2, #1
 80121d6:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 80121d8:	3b01      	subs	r3, #1
 80121da:	2200      	movs	r2, #0
 80121dc:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 80121de:	2001      	movs	r0, #1
}
 80121e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121e2:	46c0      	nop			; (mov r8, r8)
 80121e4:	fe00e800 	.word	0xfe00e800

080121e8 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 80121e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ea:	0004      	movs	r4, r0
 80121ec:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80121ee:	f7fe fb71 	bl	80108d4 <HAL_GetTick>
 80121f2:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80121f4:	2702      	movs	r7, #2
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	699b      	ldr	r3, [r3, #24]
 80121fa:	421f      	tst	r7, r3
 80121fc:	d11a      	bne.n	8012234 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 80121fe:	0029      	movs	r1, r5
 8012200:	0020      	movs	r0, r4
 8012202:	f7ff ffa5 	bl	8012150 <I2C_IsAcknowledgeFailed>
 8012206:	2800      	cmp	r0, #0
 8012208:	d116      	bne.n	8012238 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 801220a:	1c6b      	adds	r3, r5, #1
 801220c:	d0f3      	beq.n	80121f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 801220e:	2d00      	cmp	r5, #0
 8012210:	d004      	beq.n	801221c <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 8012212:	f7fe fb5f 	bl	80108d4 <HAL_GetTick>
 8012216:	1b80      	subs	r0, r0, r6
 8012218:	42a8      	cmp	r0, r5
 801221a:	d9ec      	bls.n	80121f6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801221c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801221e:	2220      	movs	r2, #32
 8012220:	4313      	orrs	r3, r2
 8012222:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8012224:	2335      	movs	r3, #53	; 0x35
 8012226:	3a1f      	subs	r2, #31
 8012228:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 801222a:	3b01      	subs	r3, #1
 801222c:	2200      	movs	r2, #0
 801222e:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8012230:	2003      	movs	r0, #3
 8012232:	e000      	b.n	8012236 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 8012234:	2000      	movs	r0, #0
}
 8012236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8012238:	2001      	movs	r0, #1
 801223a:	e7fc      	b.n	8012236 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

0801223c <I2C_WaitOnFlagUntilTimeout>:
{  
 801223c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801223e:	46c6      	mov	lr, r8
 8012240:	b500      	push	{lr}
 8012242:	0006      	movs	r6, r0
 8012244:	000c      	movs	r4, r1
 8012246:	0017      	movs	r7, r2
 8012248:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 801224a:	f7fe fb43 	bl	80108d4 <HAL_GetTick>
 801224e:	4680      	mov	r8, r0
  if(Status == RESET)
 8012250:	2f00      	cmp	r7, #0
 8012252:	d118      	bne.n	8012286 <I2C_WaitOnFlagUntilTimeout+0x4a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8012254:	03e4      	lsls	r4, r4, #15
 8012256:	0be4      	lsrs	r4, r4, #15
 8012258:	6832      	ldr	r2, [r6, #0]
 801225a:	6993      	ldr	r3, [r2, #24]
 801225c:	0021      	movs	r1, r4
 801225e:	4399      	bics	r1, r3
 8012260:	d02a      	beq.n	80122b8 <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 8012262:	1c6b      	adds	r3, r5, #1
 8012264:	d0f9      	beq.n	801225a <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012266:	2d00      	cmp	r5, #0
 8012268:	d005      	beq.n	8012276 <I2C_WaitOnFlagUntilTimeout+0x3a>
 801226a:	f7fe fb33 	bl	80108d4 <HAL_GetTick>
 801226e:	4643      	mov	r3, r8
 8012270:	1ac0      	subs	r0, r0, r3
 8012272:	42a8      	cmp	r0, r5
 8012274:	d9f0      	bls.n	8012258 <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 8012276:	2335      	movs	r3, #53	; 0x35
 8012278:	2201      	movs	r2, #1
 801227a:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 801227c:	3b01      	subs	r3, #1
 801227e:	2200      	movs	r2, #0
 8012280:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8012282:	2003      	movs	r0, #3
 8012284:	e019      	b.n	80122ba <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8012286:	03e4      	lsls	r4, r4, #15
 8012288:	0be4      	lsrs	r4, r4, #15
 801228a:	6832      	ldr	r2, [r6, #0]
 801228c:	6993      	ldr	r3, [r2, #24]
 801228e:	0021      	movs	r1, r4
 8012290:	4399      	bics	r1, r3
 8012292:	d115      	bne.n	80122c0 <I2C_WaitOnFlagUntilTimeout+0x84>
      if(Timeout != HAL_MAX_DELAY)
 8012294:	1c6b      	adds	r3, r5, #1
 8012296:	d0f9      	beq.n	801228c <I2C_WaitOnFlagUntilTimeout+0x50>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012298:	2d00      	cmp	r5, #0
 801229a:	d005      	beq.n	80122a8 <I2C_WaitOnFlagUntilTimeout+0x6c>
 801229c:	f7fe fb1a 	bl	80108d4 <HAL_GetTick>
 80122a0:	4643      	mov	r3, r8
 80122a2:	1ac0      	subs	r0, r0, r3
 80122a4:	42a8      	cmp	r0, r5
 80122a6:	d9f0      	bls.n	801228a <I2C_WaitOnFlagUntilTimeout+0x4e>
          hi2c->State= HAL_I2C_STATE_READY;
 80122a8:	2335      	movs	r3, #53	; 0x35
 80122aa:	2201      	movs	r2, #1
 80122ac:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 80122ae:	3b01      	subs	r3, #1
 80122b0:	2200      	movs	r2, #0
 80122b2:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80122b4:	2003      	movs	r0, #3
 80122b6:	e000      	b.n	80122ba <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 80122b8:	2000      	movs	r0, #0
}
 80122ba:	bc04      	pop	{r2}
 80122bc:	4690      	mov	r8, r2
 80122be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 80122c0:	2000      	movs	r0, #0
 80122c2:	e7fa      	b.n	80122ba <I2C_WaitOnFlagUntilTimeout+0x7e>

080122c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 80122c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122c6:	0005      	movs	r5, r0
 80122c8:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 80122ca:	f7fe fb03 	bl	80108d4 <HAL_GetTick>
 80122ce:	0007      	movs	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80122d0:	2620      	movs	r6, #32
 80122d2:	682b      	ldr	r3, [r5, #0]
 80122d4:	699b      	ldr	r3, [r3, #24]
 80122d6:	421e      	tst	r6, r3
 80122d8:	d118      	bne.n	801230c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 80122da:	0021      	movs	r1, r4
 80122dc:	0028      	movs	r0, r5
 80122de:	f7ff ff37 	bl	8012150 <I2C_IsAcknowledgeFailed>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d114      	bne.n	8012310 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80122e6:	2c00      	cmp	r4, #0
 80122e8:	d004      	beq.n	80122f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 80122ea:	f7fe faf3 	bl	80108d4 <HAL_GetTick>
 80122ee:	1bc0      	subs	r0, r0, r7
 80122f0:	42a0      	cmp	r0, r4
 80122f2:	d9ee      	bls.n	80122d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80122f4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80122f6:	2220      	movs	r2, #32
 80122f8:	4313      	orrs	r3, r2
 80122fa:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 80122fc:	2335      	movs	r3, #53	; 0x35
 80122fe:	3a1f      	subs	r2, #31
 8012300:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 8012302:	3b01      	subs	r3, #1
 8012304:	2200      	movs	r2, #0
 8012306:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 8012308:	2003      	movs	r0, #3
}
 801230a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 801230c:	2000      	movs	r0, #0
 801230e:	e7fc      	b.n	801230a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8012310:	2001      	movs	r0, #1
 8012312:	e7fa      	b.n	801230a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08012314 <HAL_I2C_MspInit>:
}
 8012314:	4770      	bx	lr
	...

08012318 <HAL_I2C_Init>:
{ 
 8012318:	b510      	push	{r4, lr}
 801231a:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 801231c:	d051      	beq.n	80123c2 <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 801231e:	2335      	movs	r3, #53	; 0x35
 8012320:	5cc3      	ldrb	r3, [r0, r3]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d03c      	beq.n	80123a0 <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8012326:	2335      	movs	r3, #53	; 0x35
 8012328:	2202      	movs	r2, #2
 801232a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 801232c:	6822      	ldr	r2, [r4, #0]
 801232e:	6813      	ldr	r3, [r2, #0]
 8012330:	2101      	movs	r1, #1
 8012332:	438b      	bics	r3, r1
 8012334:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8012336:	6822      	ldr	r2, [r4, #0]
 8012338:	4b23      	ldr	r3, [pc, #140]	; (80123c8 <HAL_I2C_Init+0xb0>)
 801233a:	6861      	ldr	r1, [r4, #4]
 801233c:	400b      	ands	r3, r1
 801233e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012340:	6822      	ldr	r2, [r4, #0]
 8012342:	6893      	ldr	r3, [r2, #8]
 8012344:	4921      	ldr	r1, [pc, #132]	; (80123cc <HAL_I2C_Init+0xb4>)
 8012346:	400b      	ands	r3, r1
 8012348:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 801234a:	68a3      	ldr	r3, [r4, #8]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d007      	beq.n	8012360 <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012350:	68e2      	ldr	r2, [r4, #12]
 8012352:	2a01      	cmp	r2, #1
 8012354:	d02a      	beq.n	80123ac <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8012356:	6821      	ldr	r1, [r4, #0]
 8012358:	2284      	movs	r2, #132	; 0x84
 801235a:	0212      	lsls	r2, r2, #8
 801235c:	4313      	orrs	r3, r2
 801235e:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012360:	68e3      	ldr	r3, [r4, #12]
 8012362:	2b02      	cmp	r3, #2
 8012364:	d028      	beq.n	80123b8 <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8012366:	6822      	ldr	r2, [r4, #0]
 8012368:	6851      	ldr	r1, [r2, #4]
 801236a:	4b19      	ldr	r3, [pc, #100]	; (80123d0 <HAL_I2C_Init+0xb8>)
 801236c:	430b      	orrs	r3, r1
 801236e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012370:	6821      	ldr	r1, [r4, #0]
 8012372:	6923      	ldr	r3, [r4, #16]
 8012374:	6962      	ldr	r2, [r4, #20]
 8012376:	4313      	orrs	r3, r2
 8012378:	69a2      	ldr	r2, [r4, #24]
 801237a:	0212      	lsls	r2, r2, #8
 801237c:	4313      	orrs	r3, r2
 801237e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012380:	6822      	ldr	r2, [r4, #0]
 8012382:	69e3      	ldr	r3, [r4, #28]
 8012384:	6a21      	ldr	r1, [r4, #32]
 8012386:	430b      	orrs	r3, r1
 8012388:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 801238a:	6821      	ldr	r1, [r4, #0]
 801238c:	680b      	ldr	r3, [r1, #0]
 801238e:	2201      	movs	r2, #1
 8012390:	4313      	orrs	r3, r2
 8012392:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012394:	2300      	movs	r3, #0
 8012396:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8012398:	3335      	adds	r3, #53	; 0x35
 801239a:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 801239c:	2000      	movs	r0, #0
}
 801239e:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80123a0:	3334      	adds	r3, #52	; 0x34
 80123a2:	2200      	movs	r2, #0
 80123a4:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80123a6:	f7ff ffb5 	bl	8012314 <HAL_I2C_MspInit>
 80123aa:	e7bc      	b.n	8012326 <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80123ac:	6821      	ldr	r1, [r4, #0]
 80123ae:	2280      	movs	r2, #128	; 0x80
 80123b0:	0212      	lsls	r2, r2, #8
 80123b2:	4313      	orrs	r3, r2
 80123b4:	608b      	str	r3, [r1, #8]
 80123b6:	e7d3      	b.n	8012360 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80123b8:	6823      	ldr	r3, [r4, #0]
 80123ba:	2280      	movs	r2, #128	; 0x80
 80123bc:	0112      	lsls	r2, r2, #4
 80123be:	605a      	str	r2, [r3, #4]
 80123c0:	e7d1      	b.n	8012366 <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80123c2:	2001      	movs	r0, #1
 80123c4:	e7eb      	b.n	801239e <HAL_I2C_Init+0x86>
 80123c6:	46c0      	nop			; (mov r8, r8)
 80123c8:	f0ffffff 	.word	0xf0ffffff
 80123cc:	ffff7fff 	.word	0xffff7fff
 80123d0:	02008000 	.word	0x02008000

080123d4 <HAL_I2C_Master_Transmit>:
{
 80123d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123d6:	b085      	sub	sp, #20
 80123d8:	0007      	movs	r7, r0
 80123da:	9103      	str	r1, [sp, #12]
 80123dc:	0016      	movs	r6, r2
 80123de:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 80123e0:	2335      	movs	r3, #53	; 0x35
 80123e2:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 80123e4:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80123e6:	2b01      	cmp	r3, #1
 80123e8:	d000      	beq.n	80123ec <HAL_I2C_Master_Transmit+0x18>
 80123ea:	e08c      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
    if((pData == NULL ) || (Size == 0)) 
 80123ec:	2a00      	cmp	r2, #0
 80123ee:	d100      	bne.n	80123f2 <HAL_I2C_Master_Transmit+0x1e>
 80123f0:	e088      	b.n	8012504 <HAL_I2C_Master_Transmit+0x130>
      return  HAL_ERROR;                                    
 80123f2:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 80123f4:	2c00      	cmp	r4, #0
 80123f6:	d100      	bne.n	80123fa <HAL_I2C_Master_Transmit+0x26>
 80123f8:	e085      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80123fa:	683b      	ldr	r3, [r7, #0]
 80123fc:	699b      	ldr	r3, [r3, #24]
 80123fe:	041b      	lsls	r3, r3, #16
 8012400:	d500      	bpl.n	8012404 <HAL_I2C_Master_Transmit+0x30>
 8012402:	e082      	b.n	801250a <HAL_I2C_Master_Transmit+0x136>
    __HAL_LOCK(hi2c);
 8012404:	2334      	movs	r3, #52	; 0x34
 8012406:	5cfb      	ldrb	r3, [r7, r3]
 8012408:	2b01      	cmp	r3, #1
 801240a:	d100      	bne.n	801240e <HAL_I2C_Master_Transmit+0x3a>
 801240c:	e07f      	b.n	801250e <HAL_I2C_Master_Transmit+0x13a>
 801240e:	2334      	movs	r3, #52	; 0x34
 8012410:	2201      	movs	r2, #1
 8012412:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_TX;
 8012414:	3301      	adds	r3, #1
 8012416:	3211      	adds	r2, #17
 8012418:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 801241a:	2300      	movs	r3, #0
 801241c:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 801241e:	2cff      	cmp	r4, #255	; 0xff
 8012420:	d90a      	bls.n	8012438 <HAL_I2C_Master_Transmit+0x64>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8012422:	3380      	adds	r3, #128	; 0x80
 8012424:	2280      	movs	r2, #128	; 0x80
 8012426:	0192      	lsls	r2, r2, #6
 8012428:	9200      	str	r2, [sp, #0]
 801242a:	045b      	lsls	r3, r3, #17
 801242c:	22ff      	movs	r2, #255	; 0xff
 801242e:	0038      	movs	r0, r7
 8012430:	f7ff fe7c 	bl	801212c <I2C_TransferConfig>
      sizetmp = 255;
 8012434:	25ff      	movs	r5, #255	; 0xff
 8012436:	e037      	b.n	80124a8 <HAL_I2C_Master_Transmit+0xd4>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8012438:	2380      	movs	r3, #128	; 0x80
 801243a:	b2e2      	uxtb	r2, r4
 801243c:	2180      	movs	r1, #128	; 0x80
 801243e:	0189      	lsls	r1, r1, #6
 8012440:	9100      	str	r1, [sp, #0]
 8012442:	049b      	lsls	r3, r3, #18
 8012444:	9903      	ldr	r1, [sp, #12]
 8012446:	0038      	movs	r0, r7
 8012448:	f7ff fe70 	bl	801212c <I2C_TransferConfig>
      sizetmp = Size;
 801244c:	0025      	movs	r5, r4
 801244e:	e02b      	b.n	80124a8 <HAL_I2C_Master_Transmit+0xd4>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
          return HAL_TIMEOUT;
 8012452:	3804      	subs	r0, #4
 8012454:	4243      	negs	r3, r0
 8012456:	4158      	adcs	r0, r3
 8012458:	4240      	negs	r0, r0
 801245a:	2301      	movs	r3, #1
 801245c:	4398      	bics	r0, r3
 801245e:	3003      	adds	r0, #3
 8012460:	e051      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8012462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012464:	2200      	movs	r2, #0
 8012466:	2180      	movs	r1, #128	; 0x80
 8012468:	0038      	movs	r0, r7
 801246a:	f7ff fee7 	bl	801223c <I2C_WaitOnFlagUntilTimeout>
 801246e:	2800      	cmp	r0, #0
 8012470:	d14f      	bne.n	8012512 <HAL_I2C_Master_Transmit+0x13e>
        if(Size > 255)
 8012472:	2cff      	cmp	r4, #255	; 0xff
 8012474:	d90a      	bls.n	801248c <HAL_I2C_Master_Transmit+0xb8>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8012476:	2300      	movs	r3, #0
 8012478:	9300      	str	r3, [sp, #0]
 801247a:	2380      	movs	r3, #128	; 0x80
 801247c:	045b      	lsls	r3, r3, #17
 801247e:	22ff      	movs	r2, #255	; 0xff
 8012480:	9903      	ldr	r1, [sp, #12]
 8012482:	0038      	movs	r0, r7
 8012484:	f7ff fe52 	bl	801212c <I2C_TransferConfig>
          sizetmp = 255;
 8012488:	35ff      	adds	r5, #255	; 0xff
 801248a:	e00c      	b.n	80124a6 <HAL_I2C_Master_Transmit+0xd2>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801248c:	b2e2      	uxtb	r2, r4
 801248e:	2300      	movs	r3, #0
 8012490:	9300      	str	r3, [sp, #0]
 8012492:	2380      	movs	r3, #128	; 0x80
 8012494:	049b      	lsls	r3, r3, #18
 8012496:	9903      	ldr	r1, [sp, #12]
 8012498:	0038      	movs	r0, r7
 801249a:	f7ff fe47 	bl	801212c <I2C_TransferConfig>
          sizetmp = Size;
 801249e:	0025      	movs	r5, r4
 80124a0:	e001      	b.n	80124a6 <HAL_I2C_Master_Transmit+0xd2>
    }while(Size > 0);
 80124a2:	2c00      	cmp	r4, #0
 80124a4:	d010      	beq.n	80124c8 <HAL_I2C_Master_Transmit+0xf4>
 80124a6:	3601      	adds	r6, #1
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80124a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80124aa:	0038      	movs	r0, r7
 80124ac:	f7ff fe9c 	bl	80121e8 <I2C_WaitOnTXISFlagUntilTimeout>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	d1cd      	bne.n	8012450 <HAL_I2C_Master_Transmit+0x7c>
      hi2c->Instance->TXDR = (*pData++);
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	7832      	ldrb	r2, [r6, #0]
 80124b8:	629a      	str	r2, [r3, #40]	; 0x28
      sizetmp--;
 80124ba:	3d01      	subs	r5, #1
      Size--;
 80124bc:	3c01      	subs	r4, #1
 80124be:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 80124c0:	2d00      	cmp	r5, #0
 80124c2:	d1ee      	bne.n	80124a2 <HAL_I2C_Master_Transmit+0xce>
 80124c4:	2c00      	cmp	r4, #0
 80124c6:	d1cc      	bne.n	8012462 <HAL_I2C_Master_Transmit+0x8e>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80124c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80124ca:	0038      	movs	r0, r7
 80124cc:	f7ff fefa 	bl	80122c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d008      	beq.n	80124e6 <HAL_I2C_Master_Transmit+0x112>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80124d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 80124d6:	3804      	subs	r0, #4
 80124d8:	4243      	negs	r3, r0
 80124da:	4158      	adcs	r0, r3
 80124dc:	4240      	negs	r0, r0
 80124de:	2301      	movs	r3, #1
 80124e0:	4398      	bics	r0, r3
 80124e2:	3003      	adds	r0, #3
 80124e4:	e00f      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	2220      	movs	r2, #32
 80124ea:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80124ec:	683a      	ldr	r2, [r7, #0]
 80124ee:	6853      	ldr	r3, [r2, #4]
 80124f0:	4909      	ldr	r1, [pc, #36]	; (8012518 <HAL_I2C_Master_Transmit+0x144>)
 80124f2:	400b      	ands	r3, r1
 80124f4:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80124f6:	2335      	movs	r3, #53	; 0x35
 80124f8:	2201      	movs	r2, #1
 80124fa:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 80124fc:	3b01      	subs	r3, #1
 80124fe:	2200      	movs	r2, #0
 8012500:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 8012502:	e000      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
      return  HAL_ERROR;                                    
 8012504:	2001      	movs	r0, #1
}
 8012506:	b005      	add	sp, #20
 8012508:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 801250a:	2002      	movs	r0, #2
 801250c:	e7fb      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
    __HAL_LOCK(hi2c);
 801250e:	2002      	movs	r0, #2
 8012510:	e7f9      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
          return HAL_TIMEOUT;
 8012512:	2003      	movs	r0, #3
 8012514:	e7f7      	b.n	8012506 <HAL_I2C_Master_Transmit+0x132>
 8012516:	46c0      	nop			; (mov r8, r8)
 8012518:	fe00e800 	.word	0xfe00e800

0801251c <HAL_I2C_Master_Receive>:
{
 801251c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801251e:	b085      	sub	sp, #20
 8012520:	0007      	movs	r7, r0
 8012522:	9103      	str	r1, [sp, #12]
 8012524:	0016      	movs	r6, r2
 8012526:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012528:	2335      	movs	r3, #53	; 0x35
 801252a:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 801252c:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 801252e:	2b01      	cmp	r3, #1
 8012530:	d000      	beq.n	8012534 <HAL_I2C_Master_Receive+0x18>
 8012532:	e084      	b.n	801263e <HAL_I2C_Master_Receive+0x122>
    if((pData == NULL ) || (Size == 0)) 
 8012534:	2a00      	cmp	r2, #0
 8012536:	d100      	bne.n	801253a <HAL_I2C_Master_Receive+0x1e>
 8012538:	e080      	b.n	801263c <HAL_I2C_Master_Receive+0x120>
      return  HAL_ERROR;                                    
 801253a:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 801253c:	2c00      	cmp	r4, #0
 801253e:	d07e      	beq.n	801263e <HAL_I2C_Master_Receive+0x122>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	699b      	ldr	r3, [r3, #24]
 8012544:	041b      	lsls	r3, r3, #16
 8012546:	d500      	bpl.n	801254a <HAL_I2C_Master_Receive+0x2e>
 8012548:	e07b      	b.n	8012642 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 801254a:	2334      	movs	r3, #52	; 0x34
 801254c:	5cfb      	ldrb	r3, [r7, r3]
 801254e:	2b01      	cmp	r3, #1
 8012550:	d100      	bne.n	8012554 <HAL_I2C_Master_Receive+0x38>
 8012552:	e078      	b.n	8012646 <HAL_I2C_Master_Receive+0x12a>
 8012554:	2334      	movs	r3, #52	; 0x34
 8012556:	2201      	movs	r2, #1
 8012558:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_RX;
 801255a:	3301      	adds	r3, #1
 801255c:	3221      	adds	r2, #33	; 0x21
 801255e:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012560:	2300      	movs	r3, #0
 8012562:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 8012564:	2cff      	cmp	r4, #255	; 0xff
 8012566:	d90a      	bls.n	801257e <HAL_I2C_Master_Receive+0x62>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8012568:	3380      	adds	r3, #128	; 0x80
 801256a:	2290      	movs	r2, #144	; 0x90
 801256c:	0192      	lsls	r2, r2, #6
 801256e:	9200      	str	r2, [sp, #0]
 8012570:	045b      	lsls	r3, r3, #17
 8012572:	22ff      	movs	r2, #255	; 0xff
 8012574:	0038      	movs	r0, r7
 8012576:	f7ff fdd9 	bl	801212c <I2C_TransferConfig>
      sizetmp = 255;
 801257a:	25ff      	movs	r5, #255	; 0xff
 801257c:	e02e      	b.n	80125dc <HAL_I2C_Master_Receive+0xc0>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 801257e:	2380      	movs	r3, #128	; 0x80
 8012580:	b2e2      	uxtb	r2, r4
 8012582:	2190      	movs	r1, #144	; 0x90
 8012584:	0189      	lsls	r1, r1, #6
 8012586:	9100      	str	r1, [sp, #0]
 8012588:	049b      	lsls	r3, r3, #18
 801258a:	9903      	ldr	r1, [sp, #12]
 801258c:	0038      	movs	r0, r7
 801258e:	f7ff fdcd 	bl	801212c <I2C_TransferConfig>
      sizetmp = Size;
 8012592:	0025      	movs	r5, r4
 8012594:	e022      	b.n	80125dc <HAL_I2C_Master_Receive+0xc0>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8012596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012598:	2200      	movs	r2, #0
 801259a:	2180      	movs	r1, #128	; 0x80
 801259c:	0038      	movs	r0, r7
 801259e:	f7ff fe4d 	bl	801223c <I2C_WaitOnFlagUntilTimeout>
 80125a2:	2800      	cmp	r0, #0
 80125a4:	d153      	bne.n	801264e <HAL_I2C_Master_Receive+0x132>
        if(Size > 255)
 80125a6:	2cff      	cmp	r4, #255	; 0xff
 80125a8:	d90a      	bls.n	80125c0 <HAL_I2C_Master_Receive+0xa4>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80125aa:	2300      	movs	r3, #0
 80125ac:	9300      	str	r3, [sp, #0]
 80125ae:	2380      	movs	r3, #128	; 0x80
 80125b0:	045b      	lsls	r3, r3, #17
 80125b2:	22ff      	movs	r2, #255	; 0xff
 80125b4:	9903      	ldr	r1, [sp, #12]
 80125b6:	0038      	movs	r0, r7
 80125b8:	f7ff fdb8 	bl	801212c <I2C_TransferConfig>
          sizetmp = 255;
 80125bc:	35ff      	adds	r5, #255	; 0xff
 80125be:	e00c      	b.n	80125da <HAL_I2C_Master_Receive+0xbe>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80125c0:	b2e2      	uxtb	r2, r4
 80125c2:	2300      	movs	r3, #0
 80125c4:	9300      	str	r3, [sp, #0]
 80125c6:	2380      	movs	r3, #128	; 0x80
 80125c8:	049b      	lsls	r3, r3, #18
 80125ca:	9903      	ldr	r1, [sp, #12]
 80125cc:	0038      	movs	r0, r7
 80125ce:	f7ff fdad 	bl	801212c <I2C_TransferConfig>
          sizetmp = Size;
 80125d2:	0025      	movs	r5, r4
 80125d4:	e001      	b.n	80125da <HAL_I2C_Master_Receive+0xbe>
    }while(Size > 0);
 80125d6:	2c00      	cmp	r4, #0
 80125d8:	d012      	beq.n	8012600 <HAL_I2C_Master_Receive+0xe4>
 80125da:	3601      	adds	r6, #1
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80125dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125de:	2200      	movs	r2, #0
 80125e0:	2104      	movs	r1, #4
 80125e2:	0038      	movs	r0, r7
 80125e4:	f7ff fe2a 	bl	801223c <I2C_WaitOnFlagUntilTimeout>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	d12e      	bne.n	801264a <HAL_I2C_Master_Receive+0x12e>
      (*pData++) =hi2c->Instance->RXDR;
 80125ec:	683b      	ldr	r3, [r7, #0]
 80125ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125f0:	7033      	strb	r3, [r6, #0]
      sizetmp--;
 80125f2:	3d01      	subs	r5, #1
      Size--;
 80125f4:	3c01      	subs	r4, #1
 80125f6:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 80125f8:	2d00      	cmp	r5, #0
 80125fa:	d1ec      	bne.n	80125d6 <HAL_I2C_Master_Receive+0xba>
 80125fc:	2c00      	cmp	r4, #0
 80125fe:	d1ca      	bne.n	8012596 <HAL_I2C_Master_Receive+0x7a>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8012600:	2119      	movs	r1, #25
 8012602:	0038      	movs	r0, r7
 8012604:	f7ff fe5e 	bl	80122c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8012608:	2800      	cmp	r0, #0
 801260a:	d008      	beq.n	801261e <HAL_I2C_Master_Receive+0x102>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801260c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 801260e:	3804      	subs	r0, #4
 8012610:	4243      	negs	r3, r0
 8012612:	4158      	adcs	r0, r3
 8012614:	4240      	negs	r0, r0
 8012616:	2301      	movs	r3, #1
 8012618:	4398      	bics	r0, r3
 801261a:	3003      	adds	r0, #3
 801261c:	e00f      	b.n	801263e <HAL_I2C_Master_Receive+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	2220      	movs	r2, #32
 8012622:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	6853      	ldr	r3, [r2, #4]
 8012628:	490a      	ldr	r1, [pc, #40]	; (8012654 <HAL_I2C_Master_Receive+0x138>)
 801262a:	400b      	ands	r3, r1
 801262c:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 801262e:	2335      	movs	r3, #53	; 0x35
 8012630:	2201      	movs	r2, #1
 8012632:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8012634:	3b01      	subs	r3, #1
 8012636:	2200      	movs	r2, #0
 8012638:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 801263a:	e000      	b.n	801263e <HAL_I2C_Master_Receive+0x122>
      return  HAL_ERROR;                                    
 801263c:	2001      	movs	r0, #1
}
 801263e:	b005      	add	sp, #20
 8012640:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8012642:	2002      	movs	r0, #2
 8012644:	e7fb      	b.n	801263e <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8012646:	2002      	movs	r0, #2
 8012648:	e7f9      	b.n	801263e <HAL_I2C_Master_Receive+0x122>
        return HAL_TIMEOUT;
 801264a:	2003      	movs	r0, #3
 801264c:	e7f7      	b.n	801263e <HAL_I2C_Master_Receive+0x122>
          return HAL_TIMEOUT;
 801264e:	2003      	movs	r0, #3
 8012650:	e7f5      	b.n	801263e <HAL_I2C_Master_Receive+0x122>
 8012652:	46c0      	nop			; (mov r8, r8)
 8012654:	fe00e800 	.word	0xfe00e800

08012658 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012658:	4770      	bx	lr
	...

0801265c <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 801265c:	4a03      	ldr	r2, [pc, #12]	; (801266c <HAL_PWR_EnableBkUpAccess+0x10>)
 801265e:	6811      	ldr	r1, [r2, #0]
 8012660:	2380      	movs	r3, #128	; 0x80
 8012662:	005b      	lsls	r3, r3, #1
 8012664:	430b      	orrs	r3, r1
 8012666:	6013      	str	r3, [r2, #0]
}
 8012668:	4770      	bx	lr
 801266a:	46c0      	nop			; (mov r8, r8)
 801266c:	40007000 	.word	0x40007000

08012670 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012672:	46c6      	mov	lr, r8
 8012674:	b500      	push	{lr}
 8012676:	b082      	sub	sp, #8
 8012678:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801267a:	6803      	ldr	r3, [r0, #0]
 801267c:	07db      	lsls	r3, r3, #31
 801267e:	d538      	bpl.n	80126f2 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012680:	4bbd      	ldr	r3, [pc, #756]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012682:	685a      	ldr	r2, [r3, #4]
 8012684:	230c      	movs	r3, #12
 8012686:	4013      	ands	r3, r2
 8012688:	2b04      	cmp	r3, #4
 801268a:	d02a      	beq.n	80126e2 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 801268c:	4bba      	ldr	r3, [pc, #744]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801268e:	685a      	ldr	r2, [r3, #4]
 8012690:	230c      	movs	r3, #12
 8012692:	4013      	ands	r3, r2
 8012694:	2b08      	cmp	r3, #8
 8012696:	d108      	bne.n	80126aa <HAL_RCC_OscConfig+0x3a>
 8012698:	4bb7      	ldr	r3, [pc, #732]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	22c0      	movs	r2, #192	; 0xc0
 801269e:	0252      	lsls	r2, r2, #9
 80126a0:	4013      	ands	r3, r2
 80126a2:	2280      	movs	r2, #128	; 0x80
 80126a4:	0252      	lsls	r2, r2, #9
 80126a6:	4293      	cmp	r3, r2
 80126a8:	d01b      	beq.n	80126e2 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80126aa:	4bb3      	ldr	r3, [pc, #716]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	49b3      	ldr	r1, [pc, #716]	; (801297c <HAL_RCC_OscConfig+0x30c>)
 80126b0:	400a      	ands	r2, r1
 80126b2:	601a      	str	r2, [r3, #0]
 80126b4:	681a      	ldr	r2, [r3, #0]
 80126b6:	49b2      	ldr	r1, [pc, #712]	; (8012980 <HAL_RCC_OscConfig+0x310>)
 80126b8:	400a      	ands	r2, r1
 80126ba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80126bc:	f7fe f90a 	bl	80108d4 <HAL_GetTick>
 80126c0:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80126c2:	4ead      	ldr	r6, [pc, #692]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80126c4:	2580      	movs	r5, #128	; 0x80
 80126c6:	02ad      	lsls	r5, r5, #10
 80126c8:	6833      	ldr	r3, [r6, #0]
 80126ca:	422b      	tst	r3, r5
 80126cc:	d039      	beq.n	8012742 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80126ce:	f7fe f901 	bl	80108d4 <HAL_GetTick>
 80126d2:	1bc0      	subs	r0, r0, r7
 80126d4:	2864      	cmp	r0, #100	; 0x64
 80126d6:	d9f7      	bls.n	80126c8 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80126d8:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80126da:	b002      	add	sp, #8
 80126dc:	bc04      	pop	{r2}
 80126de:	4690      	mov	r8, r2
 80126e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80126e2:	4ba5      	ldr	r3, [pc, #660]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	039b      	lsls	r3, r3, #14
 80126e8:	d503      	bpl.n	80126f2 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 80126ea:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80126ec:	6863      	ldr	r3, [r4, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d0f3      	beq.n	80126da <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	079b      	lsls	r3, r3, #30
 80126f6:	d400      	bmi.n	80126fa <HAL_RCC_OscConfig+0x8a>
 80126f8:	e08d      	b.n	8012816 <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80126fa:	4b9f      	ldr	r3, [pc, #636]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80126fc:	685b      	ldr	r3, [r3, #4]
 80126fe:	220c      	movs	r2, #12
 8012700:	421a      	tst	r2, r3
 8012702:	d077      	beq.n	80127f4 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012704:	4b9c      	ldr	r3, [pc, #624]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012706:	685a      	ldr	r2, [r3, #4]
 8012708:	230c      	movs	r3, #12
 801270a:	4013      	ands	r3, r2
 801270c:	2b08      	cmp	r3, #8
 801270e:	d068      	beq.n	80127e2 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012710:	68e3      	ldr	r3, [r4, #12]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d100      	bne.n	8012718 <HAL_RCC_OscConfig+0xa8>
 8012716:	e0a1      	b.n	801285c <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012718:	4a97      	ldr	r2, [pc, #604]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801271a:	6813      	ldr	r3, [r2, #0]
 801271c:	2101      	movs	r1, #1
 801271e:	430b      	orrs	r3, r1
 8012720:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012722:	f7fe f8d7 	bl	80108d4 <HAL_GetTick>
 8012726:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012728:	4e93      	ldr	r6, [pc, #588]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801272a:	2502      	movs	r5, #2
 801272c:	6833      	ldr	r3, [r6, #0]
 801272e:	421d      	tst	r5, r3
 8012730:	d000      	beq.n	8012734 <HAL_RCC_OscConfig+0xc4>
 8012732:	e08a      	b.n	801284a <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012734:	f7fe f8ce 	bl	80108d4 <HAL_GetTick>
 8012738:	1bc0      	subs	r0, r0, r7
 801273a:	2864      	cmp	r0, #100	; 0x64
 801273c:	d9f6      	bls.n	801272c <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 801273e:	2003      	movs	r0, #3
 8012740:	e7cb      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012742:	6863      	ldr	r3, [r4, #4]
 8012744:	2b01      	cmp	r3, #1
 8012746:	d00b      	beq.n	8012760 <HAL_RCC_OscConfig+0xf0>
 8012748:	2b00      	cmp	r3, #0
 801274a:	d122      	bne.n	8012792 <HAL_RCC_OscConfig+0x122>
 801274c:	4b8a      	ldr	r3, [pc, #552]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801274e:	681a      	ldr	r2, [r3, #0]
 8012750:	498a      	ldr	r1, [pc, #552]	; (801297c <HAL_RCC_OscConfig+0x30c>)
 8012752:	400a      	ands	r2, r1
 8012754:	601a      	str	r2, [r3, #0]
 8012756:	681a      	ldr	r2, [r3, #0]
 8012758:	4989      	ldr	r1, [pc, #548]	; (8012980 <HAL_RCC_OscConfig+0x310>)
 801275a:	400a      	ands	r2, r1
 801275c:	601a      	str	r2, [r3, #0]
 801275e:	e005      	b.n	801276c <HAL_RCC_OscConfig+0xfc>
 8012760:	4a85      	ldr	r2, [pc, #532]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012762:	6811      	ldr	r1, [r2, #0]
 8012764:	2380      	movs	r3, #128	; 0x80
 8012766:	025b      	lsls	r3, r3, #9
 8012768:	430b      	orrs	r3, r1
 801276a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801276c:	6863      	ldr	r3, [r4, #4]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d027      	beq.n	80127c2 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8012772:	f7fe f8af 	bl	80108d4 <HAL_GetTick>
 8012776:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012778:	4e7f      	ldr	r6, [pc, #508]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801277a:	2580      	movs	r5, #128	; 0x80
 801277c:	02ad      	lsls	r5, r5, #10
 801277e:	6833      	ldr	r3, [r6, #0]
 8012780:	422b      	tst	r3, r5
 8012782:	d1b6      	bne.n	80126f2 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012784:	f7fe f8a6 	bl	80108d4 <HAL_GetTick>
 8012788:	1bc0      	subs	r0, r0, r7
 801278a:	2864      	cmp	r0, #100	; 0x64
 801278c:	d9f7      	bls.n	801277e <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 801278e:	2003      	movs	r0, #3
 8012790:	e7a3      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012792:	2b05      	cmp	r3, #5
 8012794:	d009      	beq.n	80127aa <HAL_RCC_OscConfig+0x13a>
 8012796:	4b78      	ldr	r3, [pc, #480]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	4978      	ldr	r1, [pc, #480]	; (801297c <HAL_RCC_OscConfig+0x30c>)
 801279c:	400a      	ands	r2, r1
 801279e:	601a      	str	r2, [r3, #0]
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	4977      	ldr	r1, [pc, #476]	; (8012980 <HAL_RCC_OscConfig+0x310>)
 80127a4:	400a      	ands	r2, r1
 80127a6:	601a      	str	r2, [r3, #0]
 80127a8:	e7e0      	b.n	801276c <HAL_RCC_OscConfig+0xfc>
 80127aa:	4b73      	ldr	r3, [pc, #460]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80127ac:	6819      	ldr	r1, [r3, #0]
 80127ae:	2280      	movs	r2, #128	; 0x80
 80127b0:	02d2      	lsls	r2, r2, #11
 80127b2:	430a      	orrs	r2, r1
 80127b4:	601a      	str	r2, [r3, #0]
 80127b6:	6819      	ldr	r1, [r3, #0]
 80127b8:	2280      	movs	r2, #128	; 0x80
 80127ba:	0252      	lsls	r2, r2, #9
 80127bc:	430a      	orrs	r2, r1
 80127be:	601a      	str	r2, [r3, #0]
 80127c0:	e7d4      	b.n	801276c <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80127c2:	f7fe f887 	bl	80108d4 <HAL_GetTick>
 80127c6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80127c8:	4e6b      	ldr	r6, [pc, #428]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80127ca:	2580      	movs	r5, #128	; 0x80
 80127cc:	02ad      	lsls	r5, r5, #10
 80127ce:	6833      	ldr	r3, [r6, #0]
 80127d0:	422b      	tst	r3, r5
 80127d2:	d08e      	beq.n	80126f2 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80127d4:	f7fe f87e 	bl	80108d4 <HAL_GetTick>
 80127d8:	1bc0      	subs	r0, r0, r7
 80127da:	2864      	cmp	r0, #100	; 0x64
 80127dc:	d9f7      	bls.n	80127ce <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 80127de:	2003      	movs	r0, #3
 80127e0:	e77b      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80127e2:	4b65      	ldr	r3, [pc, #404]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	22c0      	movs	r2, #192	; 0xc0
 80127e8:	0252      	lsls	r2, r2, #9
 80127ea:	4013      	ands	r3, r2
 80127ec:	2280      	movs	r2, #128	; 0x80
 80127ee:	0212      	lsls	r2, r2, #8
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d18d      	bne.n	8012710 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80127f4:	4b60      	ldr	r3, [pc, #384]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	079b      	lsls	r3, r3, #30
 80127fa:	d504      	bpl.n	8012806 <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 80127fc:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80127fe:	68e3      	ldr	r3, [r4, #12]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d000      	beq.n	8012806 <HAL_RCC_OscConfig+0x196>
 8012804:	e769      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012806:	495c      	ldr	r1, [pc, #368]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012808:	680a      	ldr	r2, [r1, #0]
 801280a:	6923      	ldr	r3, [r4, #16]
 801280c:	00db      	lsls	r3, r3, #3
 801280e:	20f8      	movs	r0, #248	; 0xf8
 8012810:	4382      	bics	r2, r0
 8012812:	4313      	orrs	r3, r2
 8012814:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012816:	6823      	ldr	r3, [r4, #0]
 8012818:	071b      	lsls	r3, r3, #28
 801281a:	d547      	bpl.n	80128ac <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801281c:	6a23      	ldr	r3, [r4, #32]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d030      	beq.n	8012884 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8012822:	4a55      	ldr	r2, [pc, #340]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012824:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012826:	2101      	movs	r1, #1
 8012828:	430b      	orrs	r3, r1
 801282a:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801282c:	f7fe f852 	bl	80108d4 <HAL_GetTick>
 8012830:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012832:	4e51      	ldr	r6, [pc, #324]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012834:	2502      	movs	r5, #2
 8012836:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012838:	421d      	tst	r5, r3
 801283a:	d137      	bne.n	80128ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801283c:	f7fe f84a 	bl	80108d4 <HAL_GetTick>
 8012840:	1bc0      	subs	r0, r0, r7
 8012842:	2864      	cmp	r0, #100	; 0x64
 8012844:	d9f7      	bls.n	8012836 <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8012846:	2003      	movs	r0, #3
 8012848:	e747      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801284a:	494b      	ldr	r1, [pc, #300]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801284c:	680a      	ldr	r2, [r1, #0]
 801284e:	6923      	ldr	r3, [r4, #16]
 8012850:	00db      	lsls	r3, r3, #3
 8012852:	20f8      	movs	r0, #248	; 0xf8
 8012854:	4382      	bics	r2, r0
 8012856:	4313      	orrs	r3, r2
 8012858:	600b      	str	r3, [r1, #0]
 801285a:	e7dc      	b.n	8012816 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 801285c:	4a46      	ldr	r2, [pc, #280]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801285e:	6813      	ldr	r3, [r2, #0]
 8012860:	2101      	movs	r1, #1
 8012862:	438b      	bics	r3, r1
 8012864:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012866:	f7fe f835 	bl	80108d4 <HAL_GetTick>
 801286a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801286c:	4e42      	ldr	r6, [pc, #264]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801286e:	2502      	movs	r5, #2
 8012870:	6833      	ldr	r3, [r6, #0]
 8012872:	421d      	tst	r5, r3
 8012874:	d0cf      	beq.n	8012816 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012876:	f7fe f82d 	bl	80108d4 <HAL_GetTick>
 801287a:	1bc0      	subs	r0, r0, r7
 801287c:	2864      	cmp	r0, #100	; 0x64
 801287e:	d9f7      	bls.n	8012870 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012880:	2003      	movs	r0, #3
 8012882:	e72a      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8012884:	4a3c      	ldr	r2, [pc, #240]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012886:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012888:	2101      	movs	r1, #1
 801288a:	438b      	bics	r3, r1
 801288c:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 801288e:	f7fe f821 	bl	80108d4 <HAL_GetTick>
 8012892:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012894:	4e38      	ldr	r6, [pc, #224]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 8012896:	2502      	movs	r5, #2
 8012898:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801289a:	421d      	tst	r5, r3
 801289c:	d006      	beq.n	80128ac <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801289e:	f7fe f819 	bl	80108d4 <HAL_GetTick>
 80128a2:	1bc0      	subs	r0, r0, r7
 80128a4:	2864      	cmp	r0, #100	; 0x64
 80128a6:	d9f7      	bls.n	8012898 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80128a8:	2003      	movs	r0, #3
 80128aa:	e716      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80128ac:	6823      	ldr	r3, [r4, #0]
 80128ae:	075b      	lsls	r3, r3, #29
 80128b0:	d442      	bmi.n	8012938 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80128b2:	6823      	ldr	r3, [r4, #0]
 80128b4:	06db      	lsls	r3, r3, #27
 80128b6:	d512      	bpl.n	80128de <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80128b8:	6963      	ldr	r3, [r4, #20]
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d100      	bne.n	80128c0 <HAL_RCC_OscConfig+0x250>
 80128be:	e0ce      	b.n	8012a5e <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80128c0:	3305      	adds	r3, #5
 80128c2:	d000      	beq.n	80128c6 <HAL_RCC_OscConfig+0x256>
 80128c4:	e0ec      	b.n	8012aa0 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80128c6:	4a2c      	ldr	r2, [pc, #176]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80128c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80128ca:	2104      	movs	r1, #4
 80128cc:	438b      	bics	r3, r1
 80128ce:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80128d0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80128d2:	69a3      	ldr	r3, [r4, #24]
 80128d4:	00db      	lsls	r3, r3, #3
 80128d6:	20f8      	movs	r0, #248	; 0xf8
 80128d8:	4381      	bics	r1, r0
 80128da:	430b      	orrs	r3, r1
 80128dc:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80128de:	6823      	ldr	r3, [r4, #0]
 80128e0:	069b      	lsls	r3, r3, #26
 80128e2:	d400      	bmi.n	80128e6 <HAL_RCC_OscConfig+0x276>
 80128e4:	e106      	b.n	8012af4 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80128e6:	4b24      	ldr	r3, [pc, #144]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80128e8:	685a      	ldr	r2, [r3, #4]
 80128ea:	230c      	movs	r3, #12
 80128ec:	4013      	ands	r3, r2
 80128ee:	2b0c      	cmp	r3, #12
 80128f0:	d100      	bne.n	80128f4 <HAL_RCC_OscConfig+0x284>
 80128f2:	e0f6      	b.n	8012ae2 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80128f4:	4b20      	ldr	r3, [pc, #128]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 80128f6:	685a      	ldr	r2, [r3, #4]
 80128f8:	230c      	movs	r3, #12
 80128fa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80128fc:	2b08      	cmp	r3, #8
 80128fe:	d100      	bne.n	8012902 <HAL_RCC_OscConfig+0x292>
 8012900:	e0e7      	b.n	8012ad2 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012902:	69e3      	ldr	r3, [r4, #28]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d100      	bne.n	801290a <HAL_RCC_OscConfig+0x29a>
 8012908:	e116      	b.n	8012b38 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801290a:	4a1b      	ldr	r2, [pc, #108]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801290c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 801290e:	2380      	movs	r3, #128	; 0x80
 8012910:	025b      	lsls	r3, r3, #9
 8012912:	430b      	orrs	r3, r1
 8012914:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012916:	f7fd ffdd 	bl	80108d4 <HAL_GetTick>
 801291a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 801291c:	4e16      	ldr	r6, [pc, #88]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801291e:	2580      	movs	r5, #128	; 0x80
 8012920:	026d      	lsls	r5, r5, #9
 8012922:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012924:	422b      	tst	r3, r5
 8012926:	d000      	beq.n	801292a <HAL_RCC_OscConfig+0x2ba>
 8012928:	e0e4      	b.n	8012af4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801292a:	f7fd ffd3 	bl	80108d4 <HAL_GetTick>
 801292e:	1bc0      	subs	r0, r0, r7
 8012930:	2864      	cmp	r0, #100	; 0x64
 8012932:	d9f6      	bls.n	8012922 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012934:	2003      	movs	r0, #3
 8012936:	e6d0      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012938:	4a0f      	ldr	r2, [pc, #60]	; (8012978 <HAL_RCC_OscConfig+0x308>)
 801293a:	69d1      	ldr	r1, [r2, #28]
 801293c:	2080      	movs	r0, #128	; 0x80
 801293e:	0540      	lsls	r0, r0, #21
 8012940:	4301      	orrs	r1, r0
 8012942:	61d1      	str	r1, [r2, #28]
 8012944:	69d3      	ldr	r3, [r2, #28]
 8012946:	4003      	ands	r3, r0
 8012948:	9301      	str	r3, [sp, #4]
 801294a:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 801294c:	4a0d      	ldr	r2, [pc, #52]	; (8012984 <HAL_RCC_OscConfig+0x314>)
 801294e:	6811      	ldr	r1, [r2, #0]
 8012950:	2380      	movs	r3, #128	; 0x80
 8012952:	005b      	lsls	r3, r3, #1
 8012954:	430b      	orrs	r3, r1
 8012956:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012958:	f7fd ffbc 	bl	80108d4 <HAL_GetTick>
 801295c:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 801295e:	4e09      	ldr	r6, [pc, #36]	; (8012984 <HAL_RCC_OscConfig+0x314>)
 8012960:	2580      	movs	r5, #128	; 0x80
 8012962:	006d      	lsls	r5, r5, #1
 8012964:	6833      	ldr	r3, [r6, #0]
 8012966:	422b      	tst	r3, r5
 8012968:	d10e      	bne.n	8012988 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801296a:	f7fd ffb3 	bl	80108d4 <HAL_GetTick>
 801296e:	1bc0      	subs	r0, r0, r7
 8012970:	2864      	cmp	r0, #100	; 0x64
 8012972:	d9f7      	bls.n	8012964 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8012974:	2003      	movs	r0, #3
 8012976:	e6b0      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
 8012978:	40021000 	.word	0x40021000
 801297c:	fffeffff 	.word	0xfffeffff
 8012980:	fffbffff 	.word	0xfffbffff
 8012984:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012988:	4b95      	ldr	r3, [pc, #596]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 801298a:	6a1a      	ldr	r2, [r3, #32]
 801298c:	2101      	movs	r1, #1
 801298e:	438a      	bics	r2, r1
 8012990:	621a      	str	r2, [r3, #32]
 8012992:	6a1a      	ldr	r2, [r3, #32]
 8012994:	3103      	adds	r1, #3
 8012996:	438a      	bics	r2, r1
 8012998:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 801299a:	f7fd ff9b 	bl	80108d4 <HAL_GetTick>
 801299e:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80129a0:	4e8f      	ldr	r6, [pc, #572]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 80129a2:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80129a4:	4f8f      	ldr	r7, [pc, #572]	; (8012be4 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80129a6:	6a33      	ldr	r3, [r6, #32]
 80129a8:	421d      	tst	r5, r3
 80129aa:	d007      	beq.n	80129bc <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80129ac:	f7fd ff92 	bl	80108d4 <HAL_GetTick>
 80129b0:	4643      	mov	r3, r8
 80129b2:	1ac0      	subs	r0, r0, r3
 80129b4:	42b8      	cmp	r0, r7
 80129b6:	d9f6      	bls.n	80129a6 <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80129b8:	2003      	movs	r0, #3
 80129ba:	e68e      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80129bc:	68a3      	ldr	r3, [r4, #8]
 80129be:	2b01      	cmp	r3, #1
 80129c0:	d00b      	beq.n	80129da <HAL_RCC_OscConfig+0x36a>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d123      	bne.n	8012a0e <HAL_RCC_OscConfig+0x39e>
 80129c6:	4b86      	ldr	r3, [pc, #536]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 80129c8:	6a1a      	ldr	r2, [r3, #32]
 80129ca:	2101      	movs	r1, #1
 80129cc:	438a      	bics	r2, r1
 80129ce:	621a      	str	r2, [r3, #32]
 80129d0:	6a1a      	ldr	r2, [r3, #32]
 80129d2:	3103      	adds	r1, #3
 80129d4:	438a      	bics	r2, r1
 80129d6:	621a      	str	r2, [r3, #32]
 80129d8:	e004      	b.n	80129e4 <HAL_RCC_OscConfig+0x374>
 80129da:	4a81      	ldr	r2, [pc, #516]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 80129dc:	6a13      	ldr	r3, [r2, #32]
 80129de:	2101      	movs	r1, #1
 80129e0:	430b      	orrs	r3, r1
 80129e2:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80129e4:	68a3      	ldr	r3, [r4, #8]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d027      	beq.n	8012a3a <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 80129ea:	f7fd ff73 	bl	80108d4 <HAL_GetTick>
 80129ee:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80129f0:	4e7b      	ldr	r6, [pc, #492]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 80129f2:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80129f4:	4f7b      	ldr	r7, [pc, #492]	; (8012be4 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80129f6:	6a33      	ldr	r3, [r6, #32]
 80129f8:	421d      	tst	r5, r3
 80129fa:	d000      	beq.n	80129fe <HAL_RCC_OscConfig+0x38e>
 80129fc:	e759      	b.n	80128b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80129fe:	f7fd ff69 	bl	80108d4 <HAL_GetTick>
 8012a02:	4643      	mov	r3, r8
 8012a04:	1ac0      	subs	r0, r0, r3
 8012a06:	42b8      	cmp	r0, r7
 8012a08:	d9f5      	bls.n	80129f6 <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8012a0a:	2003      	movs	r0, #3
 8012a0c:	e665      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012a0e:	2b05      	cmp	r3, #5
 8012a10:	d009      	beq.n	8012a26 <HAL_RCC_OscConfig+0x3b6>
 8012a12:	4b73      	ldr	r3, [pc, #460]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012a14:	6a1a      	ldr	r2, [r3, #32]
 8012a16:	2101      	movs	r1, #1
 8012a18:	438a      	bics	r2, r1
 8012a1a:	621a      	str	r2, [r3, #32]
 8012a1c:	6a1a      	ldr	r2, [r3, #32]
 8012a1e:	3103      	adds	r1, #3
 8012a20:	438a      	bics	r2, r1
 8012a22:	621a      	str	r2, [r3, #32]
 8012a24:	e7de      	b.n	80129e4 <HAL_RCC_OscConfig+0x374>
 8012a26:	4b6e      	ldr	r3, [pc, #440]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012a28:	6a1a      	ldr	r2, [r3, #32]
 8012a2a:	2104      	movs	r1, #4
 8012a2c:	430a      	orrs	r2, r1
 8012a2e:	621a      	str	r2, [r3, #32]
 8012a30:	6a1a      	ldr	r2, [r3, #32]
 8012a32:	3903      	subs	r1, #3
 8012a34:	430a      	orrs	r2, r1
 8012a36:	621a      	str	r2, [r3, #32]
 8012a38:	e7d4      	b.n	80129e4 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012a3a:	f7fd ff4b 	bl	80108d4 <HAL_GetTick>
 8012a3e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012a40:	4e67      	ldr	r6, [pc, #412]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012a42:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012a44:	4f67      	ldr	r7, [pc, #412]	; (8012be4 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012a46:	6a33      	ldr	r3, [r6, #32]
 8012a48:	421d      	tst	r5, r3
 8012a4a:	d100      	bne.n	8012a4e <HAL_RCC_OscConfig+0x3de>
 8012a4c:	e731      	b.n	80128b2 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012a4e:	f7fd ff41 	bl	80108d4 <HAL_GetTick>
 8012a52:	4643      	mov	r3, r8
 8012a54:	1ac0      	subs	r0, r0, r3
 8012a56:	42b8      	cmp	r0, r7
 8012a58:	d9f5      	bls.n	8012a46 <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8012a5a:	2003      	movs	r0, #3
 8012a5c:	e63d      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012a5e:	4b60      	ldr	r3, [pc, #384]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a62:	2104      	movs	r1, #4
 8012a64:	430a      	orrs	r2, r1
 8012a66:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012a68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012a6a:	3903      	subs	r1, #3
 8012a6c:	430a      	orrs	r2, r1
 8012a6e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012a70:	f7fd ff30 	bl	80108d4 <HAL_GetTick>
 8012a74:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8012a76:	4e5a      	ldr	r6, [pc, #360]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012a78:	2502      	movs	r5, #2
 8012a7a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012a7c:	421d      	tst	r5, r3
 8012a7e:	d106      	bne.n	8012a8e <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012a80:	f7fd ff28 	bl	80108d4 <HAL_GetTick>
 8012a84:	1bc0      	subs	r0, r0, r7
 8012a86:	2864      	cmp	r0, #100	; 0x64
 8012a88:	d9f7      	bls.n	8012a7a <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012a8a:	2003      	movs	r0, #3
 8012a8c:	e625      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012a8e:	4954      	ldr	r1, [pc, #336]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012a90:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8012a92:	69a3      	ldr	r3, [r4, #24]
 8012a94:	00db      	lsls	r3, r3, #3
 8012a96:	20f8      	movs	r0, #248	; 0xf8
 8012a98:	4382      	bics	r2, r0
 8012a9a:	4313      	orrs	r3, r2
 8012a9c:	634b      	str	r3, [r1, #52]	; 0x34
 8012a9e:	e71e      	b.n	80128de <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012aa0:	4b4f      	ldr	r3, [pc, #316]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012aa4:	2104      	movs	r1, #4
 8012aa6:	430a      	orrs	r2, r1
 8012aa8:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8012aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012aac:	3903      	subs	r1, #3
 8012aae:	438a      	bics	r2, r1
 8012ab0:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012ab2:	f7fd ff0f 	bl	80108d4 <HAL_GetTick>
 8012ab6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012ab8:	4e49      	ldr	r6, [pc, #292]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012aba:	2502      	movs	r5, #2
 8012abc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012abe:	421d      	tst	r5, r3
 8012ac0:	d100      	bne.n	8012ac4 <HAL_RCC_OscConfig+0x454>
 8012ac2:	e70c      	b.n	80128de <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012ac4:	f7fd ff06 	bl	80108d4 <HAL_GetTick>
 8012ac8:	1bc0      	subs	r0, r0, r7
 8012aca:	2864      	cmp	r0, #100	; 0x64
 8012acc:	d9f6      	bls.n	8012abc <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8012ace:	2003      	movs	r0, #3
 8012ad0:	e603      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012ad2:	4b43      	ldr	r3, [pc, #268]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	22c0      	movs	r2, #192	; 0xc0
 8012ad8:	0252      	lsls	r2, r2, #9
 8012ada:	4013      	ands	r3, r2
 8012adc:	4293      	cmp	r3, r2
 8012ade:	d000      	beq.n	8012ae2 <HAL_RCC_OscConfig+0x472>
 8012ae0:	e70f      	b.n	8012902 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012ae2:	4b3f      	ldr	r3, [pc, #252]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ae6:	03db      	lsls	r3, r3, #15
 8012ae8:	d504      	bpl.n	8012af4 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8012aea:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012aec:	69e3      	ldr	r3, [r4, #28]
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	d000      	beq.n	8012af4 <HAL_RCC_OscConfig+0x484>
 8012af2:	e5f2      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012af4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012af6:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d100      	bne.n	8012afe <HAL_RCC_OscConfig+0x48e>
 8012afc:	e5ed      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012afe:	4a38      	ldr	r2, [pc, #224]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b00:	6851      	ldr	r1, [r2, #4]
 8012b02:	220c      	movs	r2, #12
 8012b04:	400a      	ands	r2, r1
 8012b06:	2a08      	cmp	r2, #8
 8012b08:	d068      	beq.n	8012bdc <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012b0a:	2b02      	cmp	r3, #2
 8012b0c:	d029      	beq.n	8012b62 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8012b0e:	4a34      	ldr	r2, [pc, #208]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b10:	6813      	ldr	r3, [r2, #0]
 8012b12:	4935      	ldr	r1, [pc, #212]	; (8012be8 <HAL_RCC_OscConfig+0x578>)
 8012b14:	400b      	ands	r3, r1
 8012b16:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012b18:	f7fd fedc 	bl	80108d4 <HAL_GetTick>
 8012b1c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012b1e:	4d30      	ldr	r5, [pc, #192]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b20:	2480      	movs	r4, #128	; 0x80
 8012b22:	04a4      	lsls	r4, r4, #18
 8012b24:	682b      	ldr	r3, [r5, #0]
 8012b26:	4223      	tst	r3, r4
 8012b28:	d056      	beq.n	8012bd8 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b2a:	f7fd fed3 	bl	80108d4 <HAL_GetTick>
 8012b2e:	1b80      	subs	r0, r0, r6
 8012b30:	2864      	cmp	r0, #100	; 0x64
 8012b32:	d9f7      	bls.n	8012b24 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012b34:	2003      	movs	r0, #3
 8012b36:	e5d0      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012b38:	4a29      	ldr	r2, [pc, #164]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b3a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012b3c:	492b      	ldr	r1, [pc, #172]	; (8012bec <HAL_RCC_OscConfig+0x57c>)
 8012b3e:	400b      	ands	r3, r1
 8012b40:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012b42:	f7fd fec7 	bl	80108d4 <HAL_GetTick>
 8012b46:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012b48:	4e25      	ldr	r6, [pc, #148]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b4a:	2580      	movs	r5, #128	; 0x80
 8012b4c:	026d      	lsls	r5, r5, #9
 8012b4e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012b50:	422b      	tst	r3, r5
 8012b52:	d0cf      	beq.n	8012af4 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012b54:	f7fd febe 	bl	80108d4 <HAL_GetTick>
 8012b58:	1bc0      	subs	r0, r0, r7
 8012b5a:	2864      	cmp	r0, #100	; 0x64
 8012b5c:	d9f7      	bls.n	8012b4e <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012b5e:	2003      	movs	r0, #3
 8012b60:	e5bb      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8012b62:	4a1f      	ldr	r2, [pc, #124]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b64:	6813      	ldr	r3, [r2, #0]
 8012b66:	4920      	ldr	r1, [pc, #128]	; (8012be8 <HAL_RCC_OscConfig+0x578>)
 8012b68:	400b      	ands	r3, r1
 8012b6a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012b6c:	f7fd feb2 	bl	80108d4 <HAL_GetTick>
 8012b70:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012b72:	4e1b      	ldr	r6, [pc, #108]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b74:	2580      	movs	r5, #128	; 0x80
 8012b76:	04ad      	lsls	r5, r5, #18
 8012b78:	6833      	ldr	r3, [r6, #0]
 8012b7a:	422b      	tst	r3, r5
 8012b7c:	d006      	beq.n	8012b8c <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012b7e:	f7fd fea9 	bl	80108d4 <HAL_GetTick>
 8012b82:	1bc0      	subs	r0, r0, r7
 8012b84:	2864      	cmp	r0, #100	; 0x64
 8012b86:	d9f7      	bls.n	8012b78 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012b88:	2003      	movs	r0, #3
 8012b8a:	e5a6      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012b8c:	4b14      	ldr	r3, [pc, #80]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b90:	210f      	movs	r1, #15
 8012b92:	438a      	bics	r2, r1
 8012b94:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012b96:	430a      	orrs	r2, r1
 8012b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8012b9a:	6859      	ldr	r1, [r3, #4]
 8012b9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012b9e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012ba0:	4302      	orrs	r2, r0
 8012ba2:	4813      	ldr	r0, [pc, #76]	; (8012bf0 <HAL_RCC_OscConfig+0x580>)
 8012ba4:	4001      	ands	r1, r0
 8012ba6:	430a      	orrs	r2, r1
 8012ba8:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012baa:	6819      	ldr	r1, [r3, #0]
 8012bac:	2280      	movs	r2, #128	; 0x80
 8012bae:	0452      	lsls	r2, r2, #17
 8012bb0:	430a      	orrs	r2, r1
 8012bb2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012bb4:	f7fd fe8e 	bl	80108d4 <HAL_GetTick>
 8012bb8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012bba:	4d09      	ldr	r5, [pc, #36]	; (8012be0 <HAL_RCC_OscConfig+0x570>)
 8012bbc:	2480      	movs	r4, #128	; 0x80
 8012bbe:	04a4      	lsls	r4, r4, #18
 8012bc0:	682b      	ldr	r3, [r5, #0]
 8012bc2:	4223      	tst	r3, r4
 8012bc4:	d106      	bne.n	8012bd4 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012bc6:	f7fd fe85 	bl	80108d4 <HAL_GetTick>
 8012bca:	1b80      	subs	r0, r0, r6
 8012bcc:	2864      	cmp	r0, #100	; 0x64
 8012bce:	d9f7      	bls.n	8012bc0 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012bd0:	2003      	movs	r0, #3
 8012bd2:	e582      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	e580      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
 8012bd8:	2000      	movs	r0, #0
 8012bda:	e57e      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8012bdc:	2001      	movs	r0, #1
 8012bde:	e57c      	b.n	80126da <HAL_RCC_OscConfig+0x6a>
 8012be0:	40021000 	.word	0x40021000
 8012be4:	00001388 	.word	0x00001388
 8012be8:	feffffff 	.word	0xfeffffff
 8012bec:	fffeffff 	.word	0xfffeffff
 8012bf0:	ffc27fff 	.word	0xffc27fff

08012bf4 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bf6:	46ce      	mov	lr, r9
 8012bf8:	4647      	mov	r7, r8
 8012bfa:	b580      	push	{r7, lr}
 8012bfc:	0005      	movs	r5, r0
 8012bfe:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012c00:	4b95      	ldr	r3, [pc, #596]	; (8012e58 <HAL_RCC_ClockConfig+0x264>)
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	2301      	movs	r3, #1
 8012c06:	4013      	ands	r3, r2
 8012c08:	428b      	cmp	r3, r1
 8012c0a:	d300      	bcc.n	8012c0e <HAL_RCC_ClockConfig+0x1a>
 8012c0c:	e089      	b.n	8012d22 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012c0e:	4992      	ldr	r1, [pc, #584]	; (8012e58 <HAL_RCC_ClockConfig+0x264>)
 8012c10:	680b      	ldr	r3, [r1, #0]
 8012c12:	2201      	movs	r2, #1
 8012c14:	4393      	bics	r3, r2
 8012c16:	4323      	orrs	r3, r4
 8012c18:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012c1a:	680b      	ldr	r3, [r1, #0]
 8012c1c:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012c1e:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012c20:	42a2      	cmp	r2, r4
 8012c22:	d003      	beq.n	8012c2c <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012c24:	bc0c      	pop	{r2, r3}
 8012c26:	4690      	mov	r8, r2
 8012c28:	4699      	mov	r9, r3
 8012c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	079b      	lsls	r3, r3, #30
 8012c30:	d506      	bpl.n	8012c40 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012c32:	4a8a      	ldr	r2, [pc, #552]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012c34:	6853      	ldr	r3, [r2, #4]
 8012c36:	21f0      	movs	r1, #240	; 0xf0
 8012c38:	438b      	bics	r3, r1
 8012c3a:	68a9      	ldr	r1, [r5, #8]
 8012c3c:	430b      	orrs	r3, r1
 8012c3e:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012c40:	682b      	ldr	r3, [r5, #0]
 8012c42:	07db      	lsls	r3, r3, #31
 8012c44:	d400      	bmi.n	8012c48 <HAL_RCC_ClockConfig+0x54>
 8012c46:	e0f7      	b.n	8012e38 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012c48:	686b      	ldr	r3, [r5, #4]
 8012c4a:	2b01      	cmp	r3, #1
 8012c4c:	d009      	beq.n	8012c62 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012c4e:	2b02      	cmp	r3, #2
 8012c50:	d02b      	beq.n	8012caa <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012c52:	2b03      	cmp	r3, #3
 8012c54:	d02f      	beq.n	8012cb6 <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c56:	4a81      	ldr	r2, [pc, #516]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012c58:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012c5a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c5c:	0792      	lsls	r2, r2, #30
 8012c5e:	d405      	bmi.n	8012c6c <HAL_RCC_ClockConfig+0x78>
 8012c60:	e7e0      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012c62:	4a7e      	ldr	r2, [pc, #504]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012c64:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012c66:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012c68:	0392      	lsls	r2, r2, #14
 8012c6a:	d5db      	bpl.n	8012c24 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012c6c:	497b      	ldr	r1, [pc, #492]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012c6e:	684a      	ldr	r2, [r1, #4]
 8012c70:	2003      	movs	r0, #3
 8012c72:	4382      	bics	r2, r0
 8012c74:	4313      	orrs	r3, r2
 8012c76:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012c78:	f7fd fe2c 	bl	80108d4 <HAL_GetTick>
 8012c7c:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012c7e:	686b      	ldr	r3, [r5, #4]
 8012c80:	2b01      	cmp	r3, #1
 8012c82:	d01e      	beq.n	8012cc2 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012c84:	2b02      	cmp	r3, #2
 8012c86:	d02c      	beq.n	8012ce2 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012c88:	2b03      	cmp	r3, #3
 8012c8a:	d03a      	beq.n	8012d02 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012c8c:	4f73      	ldr	r7, [pc, #460]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012c8e:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c90:	4b73      	ldr	r3, [pc, #460]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012c92:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	421e      	tst	r6, r3
 8012c98:	d100      	bne.n	8012c9c <HAL_RCC_ClockConfig+0xa8>
 8012c9a:	e0cd      	b.n	8012e38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c9c:	f7fd fe1a 	bl	80108d4 <HAL_GetTick>
 8012ca0:	1b00      	subs	r0, r0, r4
 8012ca2:	4540      	cmp	r0, r8
 8012ca4:	d9f6      	bls.n	8012c94 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8012ca6:	2003      	movs	r0, #3
 8012ca8:	e7bc      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012caa:	4a6c      	ldr	r2, [pc, #432]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012cac:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012cae:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012cb0:	0192      	lsls	r2, r2, #6
 8012cb2:	d4db      	bmi.n	8012c6c <HAL_RCC_ClockConfig+0x78>
 8012cb4:	e7b6      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012cb6:	4a69      	ldr	r2, [pc, #420]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012cba:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012cbc:	03d2      	lsls	r2, r2, #15
 8012cbe:	d4d5      	bmi.n	8012c6c <HAL_RCC_ClockConfig+0x78>
 8012cc0:	e7b0      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012cc2:	4f66      	ldr	r7, [pc, #408]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012cc4:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cc6:	4b66      	ldr	r3, [pc, #408]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012cc8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	4033      	ands	r3, r6
 8012cce:	2b04      	cmp	r3, #4
 8012cd0:	d100      	bne.n	8012cd4 <HAL_RCC_ClockConfig+0xe0>
 8012cd2:	e0b1      	b.n	8012e38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cd4:	f7fd fdfe 	bl	80108d4 <HAL_GetTick>
 8012cd8:	1b00      	subs	r0, r0, r4
 8012cda:	4540      	cmp	r0, r8
 8012cdc:	d9f5      	bls.n	8012cca <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8012cde:	2003      	movs	r0, #3
 8012ce0:	e7a0      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012ce2:	4f5e      	ldr	r7, [pc, #376]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012ce4:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ce6:	4b5e      	ldr	r3, [pc, #376]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012ce8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	4033      	ands	r3, r6
 8012cee:	2b08      	cmp	r3, #8
 8012cf0:	d100      	bne.n	8012cf4 <HAL_RCC_ClockConfig+0x100>
 8012cf2:	e0a1      	b.n	8012e38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cf4:	f7fd fdee 	bl	80108d4 <HAL_GetTick>
 8012cf8:	1b00      	subs	r0, r0, r4
 8012cfa:	4540      	cmp	r0, r8
 8012cfc:	d9f5      	bls.n	8012cea <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8012cfe:	2003      	movs	r0, #3
 8012d00:	e790      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012d02:	4f56      	ldr	r7, [pc, #344]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012d04:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d06:	4b56      	ldr	r3, [pc, #344]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012d08:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	4033      	ands	r3, r6
 8012d0e:	2b0c      	cmp	r3, #12
 8012d10:	d100      	bne.n	8012d14 <HAL_RCC_ClockConfig+0x120>
 8012d12:	e091      	b.n	8012e38 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d14:	f7fd fdde 	bl	80108d4 <HAL_GetTick>
 8012d18:	1b00      	subs	r0, r0, r4
 8012d1a:	4540      	cmp	r0, r8
 8012d1c:	d9f5      	bls.n	8012d0a <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8012d1e:	2003      	movs	r0, #3
 8012d20:	e780      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012d22:	6803      	ldr	r3, [r0, #0]
 8012d24:	079b      	lsls	r3, r3, #30
 8012d26:	d506      	bpl.n	8012d36 <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012d28:	4a4c      	ldr	r2, [pc, #304]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012d2a:	6853      	ldr	r3, [r2, #4]
 8012d2c:	21f0      	movs	r1, #240	; 0xf0
 8012d2e:	438b      	bics	r3, r1
 8012d30:	6881      	ldr	r1, [r0, #8]
 8012d32:	430b      	orrs	r3, r1
 8012d34:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012d36:	682b      	ldr	r3, [r5, #0]
 8012d38:	07db      	lsls	r3, r3, #31
 8012d3a:	d571      	bpl.n	8012e20 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012d3c:	686b      	ldr	r3, [r5, #4]
 8012d3e:	2b01      	cmp	r3, #1
 8012d40:	d009      	beq.n	8012d56 <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012d42:	2b02      	cmp	r3, #2
 8012d44:	d02d      	beq.n	8012da2 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012d46:	2b03      	cmp	r3, #3
 8012d48:	d031      	beq.n	8012dae <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012d4a:	4a44      	ldr	r2, [pc, #272]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012d4c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012d4e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012d50:	0792      	lsls	r2, r2, #30
 8012d52:	d406      	bmi.n	8012d62 <HAL_RCC_ClockConfig+0x16e>
 8012d54:	e766      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d56:	4a41      	ldr	r2, [pc, #260]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012d58:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012d5a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012d5c:	0392      	lsls	r2, r2, #14
 8012d5e:	d400      	bmi.n	8012d62 <HAL_RCC_ClockConfig+0x16e>
 8012d60:	e760      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012d62:	493e      	ldr	r1, [pc, #248]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012d64:	684a      	ldr	r2, [r1, #4]
 8012d66:	2003      	movs	r0, #3
 8012d68:	4382      	bics	r2, r0
 8012d6a:	4313      	orrs	r3, r2
 8012d6c:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012d6e:	f7fd fdb1 	bl	80108d4 <HAL_GetTick>
 8012d72:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012d74:	686b      	ldr	r3, [r5, #4]
 8012d76:	2b01      	cmp	r3, #1
 8012d78:	d01f      	beq.n	8012dba <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012d7a:	2b02      	cmp	r3, #2
 8012d7c:	d02e      	beq.n	8012ddc <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012d7e:	2b03      	cmp	r3, #3
 8012d80:	d03d      	beq.n	8012dfe <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012d82:	4b36      	ldr	r3, [pc, #216]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012d84:	4698      	mov	r8, r3
 8012d86:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d88:	4b35      	ldr	r3, [pc, #212]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012d8a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012d8c:	4643      	mov	r3, r8
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	421f      	tst	r7, r3
 8012d92:	d045      	beq.n	8012e20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d94:	f7fd fd9e 	bl	80108d4 <HAL_GetTick>
 8012d98:	1b80      	subs	r0, r0, r6
 8012d9a:	4548      	cmp	r0, r9
 8012d9c:	d9f6      	bls.n	8012d8c <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8012d9e:	2003      	movs	r0, #3
 8012da0:	e740      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012da2:	4a2e      	ldr	r2, [pc, #184]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012da4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012da6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012da8:	0192      	lsls	r2, r2, #6
 8012daa:	d4da      	bmi.n	8012d62 <HAL_RCC_ClockConfig+0x16e>
 8012dac:	e73a      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012dae:	4a2b      	ldr	r2, [pc, #172]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012db0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012db2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012db4:	03d2      	lsls	r2, r2, #15
 8012db6:	d4d4      	bmi.n	8012d62 <HAL_RCC_ClockConfig+0x16e>
 8012db8:	e734      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012dba:	4b28      	ldr	r3, [pc, #160]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012dbc:	4698      	mov	r8, r3
 8012dbe:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012dc0:	4b27      	ldr	r3, [pc, #156]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012dc2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012dc4:	4643      	mov	r3, r8
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	403b      	ands	r3, r7
 8012dca:	2b04      	cmp	r3, #4
 8012dcc:	d028      	beq.n	8012e20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012dce:	f7fd fd81 	bl	80108d4 <HAL_GetTick>
 8012dd2:	1b80      	subs	r0, r0, r6
 8012dd4:	4548      	cmp	r0, r9
 8012dd6:	d9f5      	bls.n	8012dc4 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 8012dd8:	2003      	movs	r0, #3
 8012dda:	e723      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012ddc:	4b1f      	ldr	r3, [pc, #124]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012dde:	4698      	mov	r8, r3
 8012de0:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012de2:	4b1f      	ldr	r3, [pc, #124]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012de4:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012de6:	4643      	mov	r3, r8
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	403b      	ands	r3, r7
 8012dec:	2b08      	cmp	r3, #8
 8012dee:	d017      	beq.n	8012e20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012df0:	f7fd fd70 	bl	80108d4 <HAL_GetTick>
 8012df4:	1b80      	subs	r0, r0, r6
 8012df6:	4548      	cmp	r0, r9
 8012df8:	d9f5      	bls.n	8012de6 <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8012dfa:	2003      	movs	r0, #3
 8012dfc:	e712      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012dfe:	4b17      	ldr	r3, [pc, #92]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012e00:	4698      	mov	r8, r3
 8012e02:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012e04:	4b16      	ldr	r3, [pc, #88]	; (8012e60 <HAL_RCC_ClockConfig+0x26c>)
 8012e06:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012e08:	4643      	mov	r3, r8
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	403b      	ands	r3, r7
 8012e0e:	2b0c      	cmp	r3, #12
 8012e10:	d006      	beq.n	8012e20 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012e12:	f7fd fd5f 	bl	80108d4 <HAL_GetTick>
 8012e16:	1b80      	subs	r0, r0, r6
 8012e18:	4548      	cmp	r0, r9
 8012e1a:	d9f5      	bls.n	8012e08 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8012e1c:	2003      	movs	r0, #3
 8012e1e:	e701      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e20:	490d      	ldr	r1, [pc, #52]	; (8012e58 <HAL_RCC_ClockConfig+0x264>)
 8012e22:	680b      	ldr	r3, [r1, #0]
 8012e24:	2201      	movs	r2, #1
 8012e26:	4393      	bics	r3, r2
 8012e28:	4323      	orrs	r3, r4
 8012e2a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012e2c:	680b      	ldr	r3, [r1, #0]
 8012e2e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8012e30:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012e32:	42a2      	cmp	r2, r4
 8012e34:	d000      	beq.n	8012e38 <HAL_RCC_ClockConfig+0x244>
 8012e36:	e6f5      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e38:	682b      	ldr	r3, [r5, #0]
 8012e3a:	075b      	lsls	r3, r3, #29
 8012e3c:	d506      	bpl.n	8012e4c <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012e3e:	4a07      	ldr	r2, [pc, #28]	; (8012e5c <HAL_RCC_ClockConfig+0x268>)
 8012e40:	6853      	ldr	r3, [r2, #4]
 8012e42:	4908      	ldr	r1, [pc, #32]	; (8012e64 <HAL_RCC_ClockConfig+0x270>)
 8012e44:	400b      	ands	r3, r1
 8012e46:	68e9      	ldr	r1, [r5, #12]
 8012e48:	430b      	orrs	r3, r1
 8012e4a:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012e4c:	2000      	movs	r0, #0
 8012e4e:	f7fd fd17 	bl	8010880 <HAL_InitTick>
  return HAL_OK;
 8012e52:	2000      	movs	r0, #0
 8012e54:	e6e6      	b.n	8012c24 <HAL_RCC_ClockConfig+0x30>
 8012e56:	46c0      	nop			; (mov r8, r8)
 8012e58:	40022000 	.word	0x40022000
 8012e5c:	40021000 	.word	0x40021000
 8012e60:	00001388 	.word	0x00001388
 8012e64:	fffff8ff 	.word	0xfffff8ff

08012e68 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012e68:	b530      	push	{r4, r5, lr}
 8012e6a:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012e6c:	aa04      	add	r2, sp, #16
 8012e6e:	4b21      	ldr	r3, [pc, #132]	; (8012ef4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8012e70:	0018      	movs	r0, r3
 8012e72:	c832      	ldmia	r0!, {r1, r4, r5}
 8012e74:	c232      	stmia	r2!, {r1, r4, r5}
 8012e76:	0011      	movs	r1, r2
 8012e78:	6802      	ldr	r2, [r0, #0]
 8012e7a:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012e7c:	466a      	mov	r2, sp
 8012e7e:	3310      	adds	r3, #16
 8012e80:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012e82:	c213      	stmia	r2!, {r0, r1, r4}
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012e88:	4b1b      	ldr	r3, [pc, #108]	; (8012ef8 <HAL_RCC_GetSysClockFreq+0x90>)
 8012e8a:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012e8c:	200c      	movs	r0, #12
 8012e8e:	4018      	ands	r0, r3
 8012e90:	2808      	cmp	r0, #8
 8012e92:	d00a      	beq.n	8012eaa <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8012e94:	380c      	subs	r0, #12
 8012e96:	4243      	negs	r3, r0
 8012e98:	4158      	adcs	r0, r3
 8012e9a:	4240      	negs	r0, r0
 8012e9c:	4b17      	ldr	r3, [pc, #92]	; (8012efc <HAL_RCC_GetSysClockFreq+0x94>)
 8012e9e:	4018      	ands	r0, r3
 8012ea0:	4b17      	ldr	r3, [pc, #92]	; (8012f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8012ea2:	469c      	mov	ip, r3
 8012ea4:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012ea6:	b009      	add	sp, #36	; 0x24
 8012ea8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012eaa:	0c99      	lsrs	r1, r3, #18
 8012eac:	220f      	movs	r2, #15
 8012eae:	4011      	ands	r1, r2
 8012eb0:	a804      	add	r0, sp, #16
 8012eb2:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012eb4:	4910      	ldr	r1, [pc, #64]	; (8012ef8 <HAL_RCC_GetSysClockFreq+0x90>)
 8012eb6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012eb8:	400a      	ands	r2, r1
 8012eba:	4669      	mov	r1, sp
 8012ebc:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012ebe:	22c0      	movs	r2, #192	; 0xc0
 8012ec0:	0252      	lsls	r2, r2, #9
 8012ec2:	4013      	ands	r3, r2
 8012ec4:	2280      	movs	r2, #128	; 0x80
 8012ec6:	0252      	lsls	r2, r2, #9
 8012ec8:	4293      	cmp	r3, r2
 8012eca:	d008      	beq.n	8012ede <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012ecc:	22c0      	movs	r2, #192	; 0xc0
 8012ece:	0252      	lsls	r2, r2, #9
 8012ed0:	4293      	cmp	r3, r2
 8012ed2:	d009      	beq.n	8012ee8 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012ed4:	480a      	ldr	r0, [pc, #40]	; (8012f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8012ed6:	f7ed f93b 	bl	8000150 <__udivsi3>
 8012eda:	4360      	muls	r0, r4
 8012edc:	e7e3      	b.n	8012ea6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012ede:	4808      	ldr	r0, [pc, #32]	; (8012f00 <HAL_RCC_GetSysClockFreq+0x98>)
 8012ee0:	f7ed f936 	bl	8000150 <__udivsi3>
 8012ee4:	4360      	muls	r0, r4
 8012ee6:	e7de      	b.n	8012ea6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012ee8:	4806      	ldr	r0, [pc, #24]	; (8012f04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012eea:	f7ed f931 	bl	8000150 <__udivsi3>
 8012eee:	4360      	muls	r0, r4
 8012ef0:	e7d9      	b.n	8012ea6 <HAL_RCC_GetSysClockFreq+0x3e>
 8012ef2:	46c0      	nop			; (mov r8, r8)
 8012ef4:	08018f0c 	.word	0x08018f0c
 8012ef8:	40021000 	.word	0x40021000
 8012efc:	02625a00 	.word	0x02625a00
 8012f00:	007a1200 	.word	0x007a1200
 8012f04:	02dc6c00 	.word	0x02dc6c00

08012f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012f08:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012f0a:	f7ff ffad 	bl	8012e68 <HAL_RCC_GetSysClockFreq>
 8012f0e:	4b05      	ldr	r3, [pc, #20]	; (8012f24 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012f10:	685b      	ldr	r3, [r3, #4]
 8012f12:	061b      	lsls	r3, r3, #24
 8012f14:	0f1b      	lsrs	r3, r3, #28
 8012f16:	4a04      	ldr	r2, [pc, #16]	; (8012f28 <HAL_RCC_GetHCLKFreq+0x20>)
 8012f18:	5cd3      	ldrb	r3, [r2, r3]
 8012f1a:	40d8      	lsrs	r0, r3
 8012f1c:	4b03      	ldr	r3, [pc, #12]	; (8012f2c <HAL_RCC_GetHCLKFreq+0x24>)
 8012f1e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012f20:	bd10      	pop	{r4, pc}
 8012f22:	46c0      	nop			; (mov r8, r8)
 8012f24:	40021000 	.word	0x40021000
 8012f28:	0801bf78 	.word	0x0801bf78
 8012f2c:	20000100 	.word	0x20000100

08012f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012f30:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012f32:	f7ff ffe9 	bl	8012f08 <HAL_RCC_GetHCLKFreq>
 8012f36:	4b04      	ldr	r3, [pc, #16]	; (8012f48 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	055b      	lsls	r3, r3, #21
 8012f3c:	0f5b      	lsrs	r3, r3, #29
 8012f3e:	4a03      	ldr	r2, [pc, #12]	; (8012f4c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012f40:	5cd3      	ldrb	r3, [r2, r3]
 8012f42:	40d8      	lsrs	r0, r3
}    
 8012f44:	bd10      	pop	{r4, pc}
 8012f46:	46c0      	nop			; (mov r8, r8)
 8012f48:	40021000 	.word	0x40021000
 8012f4c:	0801bf78 	.word	0x0801bf78

08012f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f52:	46c6      	mov	lr, r8
 8012f54:	b500      	push	{lr}
 8012f56:	b082      	sub	sp, #8
 8012f58:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012f5a:	6803      	ldr	r3, [r0, #0]
 8012f5c:	03db      	lsls	r3, r3, #15
 8012f5e:	d507      	bpl.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012f60:	4b43      	ldr	r3, [pc, #268]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012f62:	6a1b      	ldr	r3, [r3, #32]
 8012f64:	6842      	ldr	r2, [r0, #4]
 8012f66:	4053      	eors	r3, r2
 8012f68:	22c0      	movs	r2, #192	; 0xc0
 8012f6a:	0092      	lsls	r2, r2, #2
 8012f6c:	4213      	tst	r3, r2
 8012f6e:	d136      	bne.n	8012fde <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012f70:	6823      	ldr	r3, [r4, #0]
 8012f72:	07db      	lsls	r3, r3, #31
 8012f74:	d506      	bpl.n	8012f84 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012f76:	4a3e      	ldr	r2, [pc, #248]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012f78:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012f7a:	2103      	movs	r1, #3
 8012f7c:	438b      	bics	r3, r1
 8012f7e:	68a1      	ldr	r1, [r4, #8]
 8012f80:	430b      	orrs	r3, r1
 8012f82:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012f84:	6823      	ldr	r3, [r4, #0]
 8012f86:	079b      	lsls	r3, r3, #30
 8012f88:	d506      	bpl.n	8012f98 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012f8a:	4a39      	ldr	r2, [pc, #228]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012f8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012f8e:	4939      	ldr	r1, [pc, #228]	; (8013074 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012f90:	400b      	ands	r3, r1
 8012f92:	68e1      	ldr	r1, [r4, #12]
 8012f94:	430b      	orrs	r3, r1
 8012f96:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012f98:	6823      	ldr	r3, [r4, #0]
 8012f9a:	035b      	lsls	r3, r3, #13
 8012f9c:	d506      	bpl.n	8012fac <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012f9e:	4a34      	ldr	r2, [pc, #208]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012fa0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012fa2:	4935      	ldr	r1, [pc, #212]	; (8013078 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012fa4:	400b      	ands	r3, r1
 8012fa6:	6921      	ldr	r1, [r4, #16]
 8012fa8:	430b      	orrs	r3, r1
 8012faa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012fac:	6823      	ldr	r3, [r4, #0]
 8012fae:	069b      	lsls	r3, r3, #26
 8012fb0:	d506      	bpl.n	8012fc0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012fb2:	4a2f      	ldr	r2, [pc, #188]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012fb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012fb6:	2110      	movs	r1, #16
 8012fb8:	438b      	bics	r3, r1
 8012fba:	6961      	ldr	r1, [r4, #20]
 8012fbc:	430b      	orrs	r3, r1
 8012fbe:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012fc0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	055b      	lsls	r3, r3, #21
 8012fc6:	d506      	bpl.n	8012fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012fc8:	4a29      	ldr	r2, [pc, #164]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012fca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012fcc:	2140      	movs	r1, #64	; 0x40
 8012fce:	438b      	bics	r3, r1
 8012fd0:	69a1      	ldr	r1, [r4, #24]
 8012fd2:	430b      	orrs	r3, r1
 8012fd4:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012fd6:	b002      	add	sp, #8
 8012fd8:	bc04      	pop	{r2}
 8012fda:	4690      	mov	r8, r2
 8012fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012fde:	4a24      	ldr	r2, [pc, #144]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012fe0:	69d1      	ldr	r1, [r2, #28]
 8012fe2:	2080      	movs	r0, #128	; 0x80
 8012fe4:	0540      	lsls	r0, r0, #21
 8012fe6:	4301      	orrs	r1, r0
 8012fe8:	61d1      	str	r1, [r2, #28]
 8012fea:	69d3      	ldr	r3, [r2, #28]
 8012fec:	4003      	ands	r3, r0
 8012fee:	9301      	str	r3, [sp, #4]
 8012ff0:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012ff2:	4a22      	ldr	r2, [pc, #136]	; (801307c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012ff4:	6811      	ldr	r1, [r2, #0]
 8012ff6:	2380      	movs	r3, #128	; 0x80
 8012ff8:	005b      	lsls	r3, r3, #1
 8012ffa:	430b      	orrs	r3, r1
 8012ffc:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012ffe:	f7fd fc69 	bl	80108d4 <HAL_GetTick>
 8013002:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8013004:	4e1d      	ldr	r6, [pc, #116]	; (801307c <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8013006:	2580      	movs	r5, #128	; 0x80
 8013008:	006d      	lsls	r5, r5, #1
 801300a:	6833      	ldr	r3, [r6, #0]
 801300c:	422b      	tst	r3, r5
 801300e:	d106      	bne.n	801301e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013010:	f7fd fc60 	bl	80108d4 <HAL_GetTick>
 8013014:	1bc0      	subs	r0, r0, r7
 8013016:	2864      	cmp	r0, #100	; 0x64
 8013018:	d9f7      	bls.n	801300a <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 801301a:	2003      	movs	r0, #3
 801301c:	e7db      	b.n	8012fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801301e:	4b14      	ldr	r3, [pc, #80]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013020:	6a18      	ldr	r0, [r3, #32]
 8013022:	4a17      	ldr	r2, [pc, #92]	; (8013080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013024:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8013026:	6a1d      	ldr	r5, [r3, #32]
 8013028:	2180      	movs	r1, #128	; 0x80
 801302a:	0249      	lsls	r1, r1, #9
 801302c:	4329      	orrs	r1, r5
 801302e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013030:	6a19      	ldr	r1, [r3, #32]
 8013032:	4d14      	ldr	r5, [pc, #80]	; (8013084 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8013034:	4029      	ands	r1, r5
 8013036:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8013038:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 801303a:	0783      	lsls	r3, r0, #30
 801303c:	d407      	bmi.n	801304e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 801303e:	4a0c      	ldr	r2, [pc, #48]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013040:	6a13      	ldr	r3, [r2, #32]
 8013042:	490f      	ldr	r1, [pc, #60]	; (8013080 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8013044:	400b      	ands	r3, r1
 8013046:	6861      	ldr	r1, [r4, #4]
 8013048:	430b      	orrs	r3, r1
 801304a:	6213      	str	r3, [r2, #32]
 801304c:	e790      	b.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 801304e:	f7fd fc41 	bl	80108d4 <HAL_GetTick>
 8013052:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013054:	4e06      	ldr	r6, [pc, #24]	; (8013070 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013056:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013058:	4f0b      	ldr	r7, [pc, #44]	; (8013088 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801305a:	6a33      	ldr	r3, [r6, #32]
 801305c:	421d      	tst	r5, r3
 801305e:	d1ee      	bne.n	801303e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013060:	f7fd fc38 	bl	80108d4 <HAL_GetTick>
 8013064:	4643      	mov	r3, r8
 8013066:	1ac0      	subs	r0, r0, r3
 8013068:	42b8      	cmp	r0, r7
 801306a:	d9f6      	bls.n	801305a <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 801306c:	2003      	movs	r0, #3
 801306e:	e7b2      	b.n	8012fd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8013070:	40021000 	.word	0x40021000
 8013074:	fffcffff 	.word	0xfffcffff
 8013078:	fff3ffff 	.word	0xfff3ffff
 801307c:	40007000 	.word	0x40007000
 8013080:	fffffcff 	.word	0xfffffcff
 8013084:	fffeffff 	.word	0xfffeffff
 8013088:	00001388 	.word	0x00001388

0801308c <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 801308c:	4770      	bx	lr

0801308e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 801308e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013090:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8013092:	6802      	ldr	r2, [r0, #0]
 8013094:	68d3      	ldr	r3, [r2, #12]
 8013096:	21a0      	movs	r1, #160	; 0xa0
 8013098:	438b      	bics	r3, r1
 801309a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 801309c:	f7fd fc1a 	bl	80108d4 <HAL_GetTick>
 80130a0:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80130a2:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80130a4:	26fa      	movs	r6, #250	; 0xfa
 80130a6:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80130a8:	6823      	ldr	r3, [r4, #0]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	421d      	tst	r5, r3
 80130ae:	d106      	bne.n	80130be <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80130b0:	f7fd fc10 	bl	80108d4 <HAL_GetTick>
 80130b4:	1bc0      	subs	r0, r0, r7
 80130b6:	42b0      	cmp	r0, r6
 80130b8:	d9f6      	bls.n	80130a8 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80130ba:	2003      	movs	r0, #3
 80130bc:	e000      	b.n	80130c0 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80130be:	2000      	movs	r0, #0
}
 80130c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130c2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80130c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130c4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80130c6:	6803      	ldr	r3, [r0, #0]
 80130c8:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80130ca:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80130cc:	0652      	lsls	r2, r2, #25
 80130ce:	d500      	bpl.n	80130d2 <RTC_EnterInitMode+0x10>
}
 80130d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80130d2:	2201      	movs	r2, #1
 80130d4:	4252      	negs	r2, r2
 80130d6:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80130d8:	f7fd fbfc 	bl	80108d4 <HAL_GetTick>
 80130dc:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80130de:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80130e0:	26fa      	movs	r6, #250	; 0xfa
 80130e2:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80130e4:	6823      	ldr	r3, [r4, #0]
 80130e6:	68db      	ldr	r3, [r3, #12]
 80130e8:	421d      	tst	r5, r3
 80130ea:	d106      	bne.n	80130fa <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80130ec:	f7fd fbf2 	bl	80108d4 <HAL_GetTick>
 80130f0:	1bc0      	subs	r0, r0, r7
 80130f2:	42b0      	cmp	r0, r6
 80130f4:	d9f6      	bls.n	80130e4 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80130f6:	2003      	movs	r0, #3
 80130f8:	e7ea      	b.n	80130d0 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 80130fa:	2000      	movs	r0, #0
 80130fc:	e7e8      	b.n	80130d0 <RTC_EnterInitMode+0xe>
	...

08013100 <HAL_RTC_Init>:
{
 8013100:	b570      	push	{r4, r5, r6, lr}
 8013102:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8013104:	d046      	beq.n	8013194 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8013106:	7f43      	ldrb	r3, [r0, #29]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d038      	beq.n	801317e <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801310c:	2302      	movs	r3, #2
 801310e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013110:	6823      	ldr	r3, [r4, #0]
 8013112:	22ca      	movs	r2, #202	; 0xca
 8013114:	625a      	str	r2, [r3, #36]	; 0x24
 8013116:	6823      	ldr	r3, [r4, #0]
 8013118:	3a77      	subs	r2, #119	; 0x77
 801311a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801311c:	0020      	movs	r0, r4
 801311e:	f7ff ffd0 	bl	80130c2 <RTC_EnterInitMode>
 8013122:	2800      	cmp	r0, #0
 8013124:	d12f      	bne.n	8013186 <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8013126:	6822      	ldr	r2, [r4, #0]
 8013128:	6893      	ldr	r3, [r2, #8]
 801312a:	491b      	ldr	r1, [pc, #108]	; (8013198 <HAL_RTC_Init+0x98>)
 801312c:	400b      	ands	r3, r1
 801312e:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013130:	6822      	ldr	r2, [r4, #0]
 8013132:	6891      	ldr	r1, [r2, #8]
 8013134:	6863      	ldr	r3, [r4, #4]
 8013136:	6925      	ldr	r5, [r4, #16]
 8013138:	432b      	orrs	r3, r5
 801313a:	6965      	ldr	r5, [r4, #20]
 801313c:	432b      	orrs	r3, r5
 801313e:	430b      	orrs	r3, r1
 8013140:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013142:	6823      	ldr	r3, [r4, #0]
 8013144:	68e2      	ldr	r2, [r4, #12]
 8013146:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8013148:	6822      	ldr	r2, [r4, #0]
 801314a:	6911      	ldr	r1, [r2, #16]
 801314c:	68a3      	ldr	r3, [r4, #8]
 801314e:	041b      	lsls	r3, r3, #16
 8013150:	430b      	orrs	r3, r1
 8013152:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8013154:	6822      	ldr	r2, [r4, #0]
 8013156:	68d3      	ldr	r3, [r2, #12]
 8013158:	2180      	movs	r1, #128	; 0x80
 801315a:	438b      	bics	r3, r1
 801315c:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 801315e:	6822      	ldr	r2, [r4, #0]
 8013160:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013162:	490e      	ldr	r1, [pc, #56]	; (801319c <HAL_RTC_Init+0x9c>)
 8013164:	400b      	ands	r3, r1
 8013166:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8013168:	6822      	ldr	r2, [r4, #0]
 801316a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801316c:	69a1      	ldr	r1, [r4, #24]
 801316e:	430b      	orrs	r3, r1
 8013170:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013172:	6823      	ldr	r3, [r4, #0]
 8013174:	22ff      	movs	r2, #255	; 0xff
 8013176:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8013178:	2301      	movs	r3, #1
 801317a:	7763      	strb	r3, [r4, #29]
}
 801317c:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 801317e:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8013180:	f7ff ff84 	bl	801308c <HAL_RTC_MspInit>
 8013184:	e7c2      	b.n	801310c <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013186:	6823      	ldr	r3, [r4, #0]
 8013188:	22ff      	movs	r2, #255	; 0xff
 801318a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801318c:	2304      	movs	r3, #4
 801318e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8013190:	2001      	movs	r0, #1
 8013192:	e7f3      	b.n	801317c <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8013194:	2001      	movs	r0, #1
 8013196:	e7f1      	b.n	801317c <HAL_RTC_Init+0x7c>
 8013198:	ff8fffbf 	.word	0xff8fffbf
 801319c:	fffbffff 	.word	0xfffbffff

080131a0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80131a0:	2809      	cmp	r0, #9
 80131a2:	d909      	bls.n	80131b8 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80131a4:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80131a6:	3301      	adds	r3, #1
    Value -= 10;
 80131a8:	380a      	subs	r0, #10
 80131aa:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80131ac:	2809      	cmp	r0, #9
 80131ae:	d8fa      	bhi.n	80131a6 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80131b0:	011b      	lsls	r3, r3, #4
 80131b2:	4318      	orrs	r0, r3
 80131b4:	b2c0      	uxtb	r0, r0
}
 80131b6:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80131b8:	2300      	movs	r3, #0
 80131ba:	e7f9      	b.n	80131b0 <RTC_ByteToBcd2+0x10>

080131bc <HAL_RTC_SetTime>:
{
 80131bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131be:	46c6      	mov	lr, r8
 80131c0:	b500      	push	{lr}
 80131c2:	0004      	movs	r4, r0
 80131c4:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80131c6:	7f03      	ldrb	r3, [r0, #28]
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	d100      	bne.n	80131ce <HAL_RTC_SetTime+0x12>
 80131cc:	e075      	b.n	80132ba <HAL_RTC_SetTime+0xfe>
 80131ce:	2301      	movs	r3, #1
 80131d0:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80131d2:	3301      	adds	r3, #1
 80131d4:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80131d6:	2a00      	cmp	r2, #0
 80131d8:	d144      	bne.n	8013264 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80131da:	6803      	ldr	r3, [r0, #0]
 80131dc:	689b      	ldr	r3, [r3, #8]
 80131de:	065b      	lsls	r3, r3, #25
 80131e0:	d401      	bmi.n	80131e6 <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 80131e2:	2300      	movs	r3, #0
 80131e4:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80131e6:	7830      	ldrb	r0, [r6, #0]
 80131e8:	f7ff ffda 	bl	80131a0 <RTC_ByteToBcd2>
 80131ec:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80131ee:	7870      	ldrb	r0, [r6, #1]
 80131f0:	f7ff ffd6 	bl	80131a0 <RTC_ByteToBcd2>
 80131f4:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80131f6:	78b0      	ldrb	r0, [r6, #2]
 80131f8:	f7ff ffd2 	bl	80131a0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 80131fc:	7a35      	ldrb	r5, [r6, #8]
 80131fe:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013200:	4305      	orrs	r5, r0
 8013202:	4643      	mov	r3, r8
 8013204:	0418      	lsls	r0, r3, #16
 8013206:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013208:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801320a:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801320c:	6823      	ldr	r3, [r4, #0]
 801320e:	22ca      	movs	r2, #202	; 0xca
 8013210:	625a      	str	r2, [r3, #36]	; 0x24
 8013212:	6823      	ldr	r3, [r4, #0]
 8013214:	3a77      	subs	r2, #119	; 0x77
 8013216:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013218:	0020      	movs	r0, r4
 801321a:	f7ff ff52 	bl	80130c2 <RTC_EnterInitMode>
 801321e:	1e07      	subs	r7, r0, #0
 8013220:	d131      	bne.n	8013286 <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8013222:	6823      	ldr	r3, [r4, #0]
 8013224:	4826      	ldr	r0, [pc, #152]	; (80132c0 <HAL_RTC_SetTime+0x104>)
 8013226:	4005      	ands	r5, r0
 8013228:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 801322a:	6822      	ldr	r2, [r4, #0]
 801322c:	6893      	ldr	r3, [r2, #8]
 801322e:	4925      	ldr	r1, [pc, #148]	; (80132c4 <HAL_RTC_SetTime+0x108>)
 8013230:	400b      	ands	r3, r1
 8013232:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8013234:	6822      	ldr	r2, [r4, #0]
 8013236:	6891      	ldr	r1, [r2, #8]
 8013238:	68f3      	ldr	r3, [r6, #12]
 801323a:	6930      	ldr	r0, [r6, #16]
 801323c:	4303      	orrs	r3, r0
 801323e:	430b      	orrs	r3, r1
 8013240:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013242:	6822      	ldr	r2, [r4, #0]
 8013244:	68d3      	ldr	r3, [r2, #12]
 8013246:	2180      	movs	r1, #128	; 0x80
 8013248:	438b      	bics	r3, r1
 801324a:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801324c:	6823      	ldr	r3, [r4, #0]
 801324e:	689b      	ldr	r3, [r3, #8]
 8013250:	069b      	lsls	r3, r3, #26
 8013252:	d524      	bpl.n	801329e <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	22ff      	movs	r2, #255	; 0xff
 8013258:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 801325a:	2301      	movs	r3, #1
 801325c:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 801325e:	2300      	movs	r3, #0
 8013260:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8013262:	e018      	b.n	8013296 <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013264:	6803      	ldr	r3, [r0, #0]
 8013266:	689b      	ldr	r3, [r3, #8]
 8013268:	065b      	lsls	r3, r3, #25
 801326a:	d401      	bmi.n	8013270 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 801326c:	2300      	movs	r3, #0
 801326e:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013270:	7835      	ldrb	r5, [r6, #0]
 8013272:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013274:	7870      	ldrb	r0, [r6, #1]
 8013276:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013278:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 801327a:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 801327c:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 801327e:	7a30      	ldrb	r0, [r6, #8]
 8013280:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013282:	4305      	orrs	r5, r0
 8013284:	e7c2      	b.n	801320c <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013286:	6823      	ldr	r3, [r4, #0]
 8013288:	22ff      	movs	r2, #255	; 0xff
 801328a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801328c:	2304      	movs	r3, #4
 801328e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013290:	2300      	movs	r3, #0
 8013292:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8013294:	2701      	movs	r7, #1
}
 8013296:	0038      	movs	r0, r7
 8013298:	bc04      	pop	{r2}
 801329a:	4690      	mov	r8, r2
 801329c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801329e:	0020      	movs	r0, r4
 80132a0:	f7ff fef5 	bl	801308e <HAL_RTC_WaitForSynchro>
 80132a4:	2800      	cmp	r0, #0
 80132a6:	d0d5      	beq.n	8013254 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80132a8:	6823      	ldr	r3, [r4, #0]
 80132aa:	22ff      	movs	r2, #255	; 0xff
 80132ac:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80132ae:	2304      	movs	r3, #4
 80132b0:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80132b2:	2300      	movs	r3, #0
 80132b4:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80132b6:	2701      	movs	r7, #1
 80132b8:	e7ed      	b.n	8013296 <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 80132ba:	2702      	movs	r7, #2
 80132bc:	e7eb      	b.n	8013296 <HAL_RTC_SetTime+0xda>
 80132be:	46c0      	nop			; (mov r8, r8)
 80132c0:	007f7f7f 	.word	0x007f7f7f
 80132c4:	fffbffff 	.word	0xfffbffff

080132c8 <HAL_RTC_SetDate>:
{
 80132c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ca:	46c6      	mov	lr, r8
 80132cc:	b500      	push	{lr}
 80132ce:	0004      	movs	r4, r0
 80132d0:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80132d2:	7f03      	ldrb	r3, [r0, #28]
 80132d4:	2b01      	cmp	r3, #1
 80132d6:	d03a      	beq.n	801334e <HAL_RTC_SetDate+0x86>
 80132d8:	2301      	movs	r3, #1
 80132da:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80132dc:	3301      	adds	r3, #1
 80132de:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80132e0:	2a00      	cmp	r2, #0
 80132e2:	d136      	bne.n	8013352 <HAL_RTC_SetDate+0x8a>
 80132e4:	784b      	ldrb	r3, [r1, #1]
 80132e6:	06da      	lsls	r2, r3, #27
 80132e8:	d503      	bpl.n	80132f2 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 80132ea:	2210      	movs	r2, #16
 80132ec:	4393      	bics	r3, r2
 80132ee:	330a      	adds	r3, #10
 80132f0:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80132f2:	78f0      	ldrb	r0, [r6, #3]
 80132f4:	f7ff ff54 	bl	80131a0 <RTC_ByteToBcd2>
 80132f8:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80132fa:	7870      	ldrb	r0, [r6, #1]
 80132fc:	f7ff ff50 	bl	80131a0 <RTC_ByteToBcd2>
 8013300:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8013302:	78b0      	ldrb	r0, [r6, #2]
 8013304:	f7ff ff4c 	bl	80131a0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8013308:	7835      	ldrb	r5, [r6, #0]
 801330a:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801330c:	4305      	orrs	r5, r0
 801330e:	4643      	mov	r3, r8
 8013310:	0418      	lsls	r0, r3, #16
 8013312:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013314:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013316:	433d      	orrs	r5, r7
 8013318:	e025      	b.n	8013366 <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801331a:	6823      	ldr	r3, [r4, #0]
 801331c:	22ff      	movs	r2, #255	; 0xff
 801331e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013320:	2304      	movs	r3, #4
 8013322:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013324:	2300      	movs	r3, #0
 8013326:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8013328:	2601      	movs	r6, #1
}
 801332a:	0030      	movs	r0, r6
 801332c:	bc04      	pop	{r2}
 801332e:	4690      	mov	r8, r2
 8013330:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013332:	0020      	movs	r0, r4
 8013334:	f7ff feab 	bl	801308e <HAL_RTC_WaitForSynchro>
 8013338:	2800      	cmp	r0, #0
 801333a:	d02c      	beq.n	8013396 <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801333c:	6823      	ldr	r3, [r4, #0]
 801333e:	22ff      	movs	r2, #255	; 0xff
 8013340:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013342:	2304      	movs	r3, #4
 8013344:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8013346:	2300      	movs	r3, #0
 8013348:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 801334a:	2601      	movs	r6, #1
 801334c:	e7ed      	b.n	801332a <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 801334e:	2602      	movs	r6, #2
 8013350:	e7eb      	b.n	801332a <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013352:	78cd      	ldrb	r5, [r1, #3]
 8013354:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8013356:	7848      	ldrb	r0, [r1, #1]
 8013358:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801335a:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 801335c:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 801335e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8013360:	7808      	ldrb	r0, [r1, #0]
 8013362:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013364:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013366:	6823      	ldr	r3, [r4, #0]
 8013368:	22ca      	movs	r2, #202	; 0xca
 801336a:	625a      	str	r2, [r3, #36]	; 0x24
 801336c:	6823      	ldr	r3, [r4, #0]
 801336e:	3a77      	subs	r2, #119	; 0x77
 8013370:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013372:	0020      	movs	r0, r4
 8013374:	f7ff fea5 	bl	80130c2 <RTC_EnterInitMode>
 8013378:	1e06      	subs	r6, r0, #0
 801337a:	d1ce      	bne.n	801331a <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801337c:	6823      	ldr	r3, [r4, #0]
 801337e:	480a      	ldr	r0, [pc, #40]	; (80133a8 <HAL_RTC_SetDate+0xe0>)
 8013380:	4005      	ands	r5, r0
 8013382:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8013384:	6822      	ldr	r2, [r4, #0]
 8013386:	68d3      	ldr	r3, [r2, #12]
 8013388:	2180      	movs	r1, #128	; 0x80
 801338a:	438b      	bics	r3, r1
 801338c:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 801338e:	6823      	ldr	r3, [r4, #0]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	069b      	lsls	r3, r3, #26
 8013394:	d5cd      	bpl.n	8013332 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013396:	6823      	ldr	r3, [r4, #0]
 8013398:	22ff      	movs	r2, #255	; 0xff
 801339a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 801339c:	2301      	movs	r3, #1
 801339e:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80133a0:	2300      	movs	r3, #0
 80133a2:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80133a4:	e7c1      	b.n	801332a <HAL_RTC_SetDate+0x62>
 80133a6:	46c0      	nop			; (mov r8, r8)
 80133a8:	00ffff3f 	.word	0x00ffff3f

080133ac <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80133ac:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80133ae:	0900      	lsrs	r0, r0, #4
 80133b0:	0083      	lsls	r3, r0, #2
 80133b2:	181b      	adds	r3, r3, r0
 80133b4:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80133b6:	200f      	movs	r0, #15
 80133b8:	4010      	ands	r0, r2
 80133ba:	1818      	adds	r0, r3, r0
 80133bc:	b2c0      	uxtb	r0, r0
}
 80133be:	4770      	bx	lr

080133c0 <HAL_RTC_GetTime>:
{
 80133c0:	b570      	push	{r4, r5, r6, lr}
 80133c2:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80133c4:	6803      	ldr	r3, [r0, #0]
 80133c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133c8:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80133ca:	6803      	ldr	r3, [r0, #0]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	490e      	ldr	r1, [pc, #56]	; (8013408 <HAL_RTC_GetTime+0x48>)
 80133d0:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80133d2:	0c19      	lsrs	r1, r3, #16
 80133d4:	203f      	movs	r0, #63	; 0x3f
 80133d6:	4008      	ands	r0, r1
 80133d8:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80133da:	0a1e      	lsrs	r6, r3, #8
 80133dc:	b2f6      	uxtb	r6, r6
 80133de:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80133e0:	b2dc      	uxtb	r4, r3
 80133e2:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80133e4:	2340      	movs	r3, #64	; 0x40
 80133e6:	400b      	ands	r3, r1
 80133e8:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 80133ea:	2a00      	cmp	r2, #0
 80133ec:	d10a      	bne.n	8013404 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80133ee:	f7ff ffdd 	bl	80133ac <RTC_Bcd2ToByte>
 80133f2:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80133f4:	0030      	movs	r0, r6
 80133f6:	f7ff ffd9 	bl	80133ac <RTC_Bcd2ToByte>
 80133fa:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 80133fc:	0020      	movs	r0, r4
 80133fe:	f7ff ffd5 	bl	80133ac <RTC_Bcd2ToByte>
 8013402:	70a8      	strb	r0, [r5, #2]
}
 8013404:	2000      	movs	r0, #0
 8013406:	bd70      	pop	{r4, r5, r6, pc}
 8013408:	007f7f7f 	.word	0x007f7f7f

0801340c <HAL_RTC_GetDate>:
{
 801340c:	b570      	push	{r4, r5, r6, lr}
 801340e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	490d      	ldr	r1, [pc, #52]	; (801344c <HAL_RTC_GetDate+0x40>)
 8013416:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8013418:	0c18      	lsrs	r0, r3, #16
 801341a:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 801341c:	04dd      	lsls	r5, r3, #19
 801341e:	0eed      	lsrs	r5, r5, #27
 8013420:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8013422:	b2de      	uxtb	r6, r3
 8013424:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8013426:	041b      	lsls	r3, r3, #16
 8013428:	0f5b      	lsrs	r3, r3, #29
 801342a:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 801342c:	2a00      	cmp	r2, #0
 801342e:	d10a      	bne.n	8013446 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013430:	f7ff ffbc 	bl	80133ac <RTC_Bcd2ToByte>
 8013434:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8013436:	0028      	movs	r0, r5
 8013438:	f7ff ffb8 	bl	80133ac <RTC_Bcd2ToByte>
 801343c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 801343e:	0030      	movs	r0, r6
 8013440:	f7ff ffb4 	bl	80133ac <RTC_Bcd2ToByte>
 8013444:	70a0      	strb	r0, [r4, #2]
}
 8013446:	2000      	movs	r0, #0
 8013448:	bd70      	pop	{r4, r5, r6, pc}
 801344a:	46c0      	nop			; (mov r8, r8)
 801344c:	00ffff3f 	.word	0x00ffff3f

08013450 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013450:	6803      	ldr	r3, [r0, #0]
 8013452:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013454:	0089      	lsls	r1, r1, #2
 8013456:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8013458:	600a      	str	r2, [r1, #0]
}
 801345a:	4770      	bx	lr

0801345c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 801345c:	6803      	ldr	r3, [r0, #0]
 801345e:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013460:	0089      	lsls	r1, r1, #2
 8013462:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8013464:	6808      	ldr	r0, [r1, #0]
}
 8013466:	4770      	bx	lr

08013468 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013468:	4770      	bx	lr

0801346a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801346a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 801346c:	2239      	movs	r2, #57	; 0x39
 801346e:	2302      	movs	r3, #2
 8013470:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013472:	6804      	ldr	r4, [r0, #0]
 8013474:	6823      	ldr	r3, [r4, #0]
 8013476:	2101      	movs	r1, #1
 8013478:	430b      	orrs	r3, r1
 801347a:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 801347c:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 801347e:	2000      	movs	r0, #0
 8013480:	bd10      	pop	{r4, pc}
	...

08013484 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8013484:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013486:	4a36      	ldr	r2, [pc, #216]	; (8013560 <TIM_Base_SetConfig+0xdc>)
 8013488:	4290      	cmp	r0, r2
 801348a:	d022      	beq.n	80134d2 <TIM_Base_SetConfig+0x4e>
 801348c:	2280      	movs	r2, #128	; 0x80
 801348e:	05d2      	lsls	r2, r2, #23
 8013490:	4290      	cmp	r0, r2
 8013492:	d014      	beq.n	80134be <TIM_Base_SetConfig+0x3a>
 8013494:	4a33      	ldr	r2, [pc, #204]	; (8013564 <TIM_Base_SetConfig+0xe0>)
 8013496:	4290      	cmp	r0, r2
 8013498:	d016      	beq.n	80134c8 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801349a:	4a33      	ldr	r2, [pc, #204]	; (8013568 <TIM_Base_SetConfig+0xe4>)
 801349c:	4290      	cmp	r0, r2
 801349e:	d040      	beq.n	8013522 <TIM_Base_SetConfig+0x9e>
 80134a0:	4a32      	ldr	r2, [pc, #200]	; (801356c <TIM_Base_SetConfig+0xe8>)
 80134a2:	4290      	cmp	r0, r2
 80134a4:	d047      	beq.n	8013536 <TIM_Base_SetConfig+0xb2>
 80134a6:	4a32      	ldr	r2, [pc, #200]	; (8013570 <TIM_Base_SetConfig+0xec>)
 80134a8:	4290      	cmp	r0, r2
 80134aa:	d04e      	beq.n	801354a <TIM_Base_SetConfig+0xc6>
 80134ac:	4a31      	ldr	r2, [pc, #196]	; (8013574 <TIM_Base_SetConfig+0xf0>)
 80134ae:	4290      	cmp	r0, r2
 80134b0:	d02d      	beq.n	801350e <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80134b2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80134b4:	688b      	ldr	r3, [r1, #8]
 80134b6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80134b8:	680b      	ldr	r3, [r1, #0]
 80134ba:	6283      	str	r3, [r0, #40]	; 0x28
 80134bc:	e024      	b.n	8013508 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134be:	2270      	movs	r2, #112	; 0x70
 80134c0:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80134c2:	684a      	ldr	r2, [r1, #4]
 80134c4:	4313      	orrs	r3, r2
 80134c6:	e008      	b.n	80134da <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134c8:	2270      	movs	r2, #112	; 0x70
 80134ca:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80134cc:	684a      	ldr	r2, [r1, #4]
 80134ce:	4313      	orrs	r3, r2
 80134d0:	e003      	b.n	80134da <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80134d2:	2270      	movs	r2, #112	; 0x70
 80134d4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80134d6:	684a      	ldr	r2, [r1, #4]
 80134d8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80134da:	4a27      	ldr	r2, [pc, #156]	; (8013578 <TIM_Base_SetConfig+0xf4>)
 80134dc:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80134de:	68ca      	ldr	r2, [r1, #12]
 80134e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80134e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80134e4:	688b      	ldr	r3, [r1, #8]
 80134e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80134e8:	680b      	ldr	r3, [r1, #0]
 80134ea:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80134ec:	4b1c      	ldr	r3, [pc, #112]	; (8013560 <TIM_Base_SetConfig+0xdc>)
 80134ee:	4298      	cmp	r0, r3
 80134f0:	d008      	beq.n	8013504 <TIM_Base_SetConfig+0x80>
 80134f2:	4b1e      	ldr	r3, [pc, #120]	; (801356c <TIM_Base_SetConfig+0xe8>)
 80134f4:	4298      	cmp	r0, r3
 80134f6:	d005      	beq.n	8013504 <TIM_Base_SetConfig+0x80>
 80134f8:	4b1d      	ldr	r3, [pc, #116]	; (8013570 <TIM_Base_SetConfig+0xec>)
 80134fa:	4298      	cmp	r0, r3
 80134fc:	d002      	beq.n	8013504 <TIM_Base_SetConfig+0x80>
 80134fe:	4b1d      	ldr	r3, [pc, #116]	; (8013574 <TIM_Base_SetConfig+0xf0>)
 8013500:	4298      	cmp	r0, r3
 8013502:	d101      	bne.n	8013508 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013504:	690b      	ldr	r3, [r1, #16]
 8013506:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013508:	2301      	movs	r3, #1
 801350a:	6143      	str	r3, [r0, #20]
}
 801350c:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 801350e:	4a1a      	ldr	r2, [pc, #104]	; (8013578 <TIM_Base_SetConfig+0xf4>)
 8013510:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013512:	68ca      	ldr	r2, [r1, #12]
 8013514:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013516:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013518:	688b      	ldr	r3, [r1, #8]
 801351a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801351c:	680b      	ldr	r3, [r1, #0]
 801351e:	6283      	str	r3, [r0, #40]	; 0x28
 8013520:	e7f0      	b.n	8013504 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8013522:	4a15      	ldr	r2, [pc, #84]	; (8013578 <TIM_Base_SetConfig+0xf4>)
 8013524:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013526:	68ca      	ldr	r2, [r1, #12]
 8013528:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801352a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801352c:	688b      	ldr	r3, [r1, #8]
 801352e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013530:	680b      	ldr	r3, [r1, #0]
 8013532:	6283      	str	r3, [r0, #40]	; 0x28
 8013534:	e7e8      	b.n	8013508 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8013536:	4a10      	ldr	r2, [pc, #64]	; (8013578 <TIM_Base_SetConfig+0xf4>)
 8013538:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801353a:	68ca      	ldr	r2, [r1, #12]
 801353c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801353e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013540:	688b      	ldr	r3, [r1, #8]
 8013542:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013544:	680b      	ldr	r3, [r1, #0]
 8013546:	6283      	str	r3, [r0, #40]	; 0x28
 8013548:	e7dc      	b.n	8013504 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801354a:	4a0b      	ldr	r2, [pc, #44]	; (8013578 <TIM_Base_SetConfig+0xf4>)
 801354c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801354e:	68ca      	ldr	r2, [r1, #12]
 8013550:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013552:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013554:	688b      	ldr	r3, [r1, #8]
 8013556:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013558:	680b      	ldr	r3, [r1, #0]
 801355a:	6283      	str	r3, [r0, #40]	; 0x28
 801355c:	e7d2      	b.n	8013504 <TIM_Base_SetConfig+0x80>
 801355e:	46c0      	nop			; (mov r8, r8)
 8013560:	40012c00 	.word	0x40012c00
 8013564:	40000400 	.word	0x40000400
 8013568:	40002000 	.word	0x40002000
 801356c:	40014000 	.word	0x40014000
 8013570:	40014400 	.word	0x40014400
 8013574:	40014800 	.word	0x40014800
 8013578:	fffffcff 	.word	0xfffffcff

0801357c <HAL_TIM_Base_Init>:
{
 801357c:	b570      	push	{r4, r5, r6, lr}
 801357e:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013580:	d014      	beq.n	80135ac <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8013582:	2339      	movs	r3, #57	; 0x39
 8013584:	5cc3      	ldrb	r3, [r0, r3]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d00a      	beq.n	80135a0 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 801358a:	2539      	movs	r5, #57	; 0x39
 801358c:	2302      	movs	r3, #2
 801358e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013590:	1d21      	adds	r1, r4, #4
 8013592:	6820      	ldr	r0, [r4, #0]
 8013594:	f7ff ff76 	bl	8013484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8013598:	2301      	movs	r3, #1
 801359a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 801359c:	2000      	movs	r0, #0
}
 801359e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80135a0:	3338      	adds	r3, #56	; 0x38
 80135a2:	2200      	movs	r2, #0
 80135a4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80135a6:	f7ff ff5f 	bl	8013468 <HAL_TIM_Base_MspInit>
 80135aa:	e7ee      	b.n	801358a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80135ac:	2001      	movs	r0, #1
 80135ae:	e7f6      	b.n	801359e <HAL_TIM_Base_Init+0x22>

080135b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80135b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80135b2:	2338      	movs	r3, #56	; 0x38
 80135b4:	5cc3      	ldrb	r3, [r0, r3]
 80135b6:	2b01      	cmp	r3, #1
 80135b8:	d01e      	beq.n	80135f8 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80135ba:	2238      	movs	r2, #56	; 0x38
 80135bc:	2501      	movs	r5, #1
 80135be:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80135c0:	2439      	movs	r4, #57	; 0x39
 80135c2:	2302      	movs	r3, #2
 80135c4:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80135c6:	6806      	ldr	r6, [r0, #0]
 80135c8:	6873      	ldr	r3, [r6, #4]
 80135ca:	2770      	movs	r7, #112	; 0x70
 80135cc:	43bb      	bics	r3, r7
 80135ce:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80135d0:	6806      	ldr	r6, [r0, #0]
 80135d2:	6873      	ldr	r3, [r6, #4]
 80135d4:	680f      	ldr	r7, [r1, #0]
 80135d6:	433b      	orrs	r3, r7
 80135d8:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80135da:	6806      	ldr	r6, [r0, #0]
 80135dc:	68b3      	ldr	r3, [r6, #8]
 80135de:	2780      	movs	r7, #128	; 0x80
 80135e0:	43bb      	bics	r3, r7
 80135e2:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80135e4:	6806      	ldr	r6, [r0, #0]
 80135e6:	68b3      	ldr	r3, [r6, #8]
 80135e8:	6849      	ldr	r1, [r1, #4]
 80135ea:	430b      	orrs	r3, r1
 80135ec:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80135ee:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80135f0:	2300      	movs	r3, #0
 80135f2:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80135f4:	2000      	movs	r0, #0
}
 80135f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80135f8:	2002      	movs	r0, #2
 80135fa:	e7fc      	b.n	80135f6 <HAL_TIMEx_MasterConfigSynchronization+0x46>

080135fc <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 80135fc:	4770      	bx	lr

080135fe <HAL_UART_DeInit>:
{
 80135fe:	b570      	push	{r4, r5, r6, lr}
 8013600:	0004      	movs	r4, r0
    return HAL_ERROR;
 8013602:	2001      	movs	r0, #1
  if(huart == NULL)
 8013604:	2c00      	cmp	r4, #0
 8013606:	d016      	beq.n	8013636 <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8013608:	2669      	movs	r6, #105	; 0x69
 801360a:	2302      	movs	r3, #2
 801360c:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 801360e:	6822      	ldr	r2, [r4, #0]
 8013610:	6813      	ldr	r3, [r2, #0]
 8013612:	2101      	movs	r1, #1
 8013614:	438b      	bics	r3, r1
 8013616:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8013618:	6823      	ldr	r3, [r4, #0]
 801361a:	2500      	movs	r5, #0
 801361c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 801361e:	6823      	ldr	r3, [r4, #0]
 8013620:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8013622:	6823      	ldr	r3, [r4, #0]
 8013624:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8013626:	0020      	movs	r0, r4
 8013628:	f7ff ffe8 	bl	80135fc <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801362c:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 801362e:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8013630:	2368      	movs	r3, #104	; 0x68
 8013632:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8013634:	2000      	movs	r0, #0
}
 8013636:	bd70      	pop	{r4, r5, r6, pc}

08013638 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013638:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 801363a:	2369      	movs	r3, #105	; 0x69
 801363c:	5cc3      	ldrb	r3, [r0, r3]
 801363e:	2b01      	cmp	r3, #1
 8013640:	d004      	beq.n	801364c <HAL_UART_Transmit_IT+0x14>
 8013642:	2369      	movs	r3, #105	; 0x69
 8013644:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013646:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013648:	2c22      	cmp	r4, #34	; 0x22
 801364a:	d127      	bne.n	801369c <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 801364c:	2900      	cmp	r1, #0
 801364e:	d02b      	beq.n	80136a8 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8013650:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8013652:	2a00      	cmp	r2, #0
 8013654:	d022      	beq.n	801369c <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8013656:	3367      	adds	r3, #103	; 0x67
 8013658:	5cc3      	ldrb	r3, [r0, r3]
 801365a:	2b01      	cmp	r3, #1
 801365c:	d026      	beq.n	80136ac <HAL_UART_Transmit_IT+0x74>
 801365e:	2368      	movs	r3, #104	; 0x68
 8013660:	2401      	movs	r4, #1
 8013662:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8013664:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013666:	3b18      	subs	r3, #24
 8013668:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 801366a:	3302      	adds	r3, #2
 801366c:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801366e:	2300      	movs	r3, #0
 8013670:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013672:	3369      	adds	r3, #105	; 0x69
 8013674:	5cc3      	ldrb	r3, [r0, r3]
 8013676:	2b22      	cmp	r3, #34	; 0x22
 8013678:	d012      	beq.n	80136a0 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 801367a:	2369      	movs	r3, #105	; 0x69
 801367c:	2212      	movs	r2, #18
 801367e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013680:	6802      	ldr	r2, [r0, #0]
 8013682:	6893      	ldr	r3, [r2, #8]
 8013684:	2101      	movs	r1, #1
 8013686:	430b      	orrs	r3, r1
 8013688:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 801368a:	2368      	movs	r3, #104	; 0x68
 801368c:	2200      	movs	r2, #0
 801368e:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013690:	6802      	ldr	r2, [r0, #0]
 8013692:	6813      	ldr	r3, [r2, #0]
 8013694:	317f      	adds	r1, #127	; 0x7f
 8013696:	430b      	orrs	r3, r1
 8013698:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 801369a:	2300      	movs	r3, #0
  }
}
 801369c:	0018      	movs	r0, r3
 801369e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80136a0:	3347      	adds	r3, #71	; 0x47
 80136a2:	2232      	movs	r2, #50	; 0x32
 80136a4:	54c2      	strb	r2, [r0, r3]
 80136a6:	e7eb      	b.n	8013680 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 80136a8:	2301      	movs	r3, #1
 80136aa:	e7f7      	b.n	801369c <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80136ac:	2302      	movs	r3, #2
 80136ae:	e7f5      	b.n	801369c <HAL_UART_Transmit_IT+0x64>

080136b0 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80136b0:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80136b2:	2369      	movs	r3, #105	; 0x69
 80136b4:	5cc3      	ldrb	r3, [r0, r3]
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	d004      	beq.n	80136c4 <HAL_UART_Receive_IT+0x14>
 80136ba:	2369      	movs	r3, #105	; 0x69
 80136bc:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80136be:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80136c0:	2c12      	cmp	r4, #18
 80136c2:	d14e      	bne.n	8013762 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 80136c4:	2900      	cmp	r1, #0
 80136c6:	d05d      	beq.n	8013784 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 80136c8:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80136ca:	2a00      	cmp	r2, #0
 80136cc:	d049      	beq.n	8013762 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80136ce:	3367      	adds	r3, #103	; 0x67
 80136d0:	5cc3      	ldrb	r3, [r0, r3]
 80136d2:	2b01      	cmp	r3, #1
 80136d4:	d058      	beq.n	8013788 <HAL_UART_Receive_IT+0xd8>
 80136d6:	2368      	movs	r3, #104	; 0x68
 80136d8:	2401      	movs	r4, #1
 80136da:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 80136dc:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80136de:	3b10      	subs	r3, #16
 80136e0:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80136e2:	3302      	adds	r3, #2
 80136e4:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 80136e6:	6883      	ldr	r3, [r0, #8]
 80136e8:	2280      	movs	r2, #128	; 0x80
 80136ea:	0152      	lsls	r2, r2, #5
 80136ec:	4293      	cmp	r3, r2
 80136ee:	d008      	beq.n	8013702 <HAL_UART_Receive_IT+0x52>
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d115      	bne.n	8013720 <HAL_UART_Receive_IT+0x70>
 80136f4:	6903      	ldr	r3, [r0, #16]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d10e      	bne.n	8013718 <HAL_UART_Receive_IT+0x68>
 80136fa:	335c      	adds	r3, #92	; 0x5c
 80136fc:	22ff      	movs	r2, #255	; 0xff
 80136fe:	52c2      	strh	r2, [r0, r3]
 8013700:	e012      	b.n	8013728 <HAL_UART_Receive_IT+0x78>
 8013702:	6903      	ldr	r3, [r0, #16]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d103      	bne.n	8013710 <HAL_UART_Receive_IT+0x60>
 8013708:	335c      	adds	r3, #92	; 0x5c
 801370a:	4a20      	ldr	r2, [pc, #128]	; (801378c <HAL_UART_Receive_IT+0xdc>)
 801370c:	52c2      	strh	r2, [r0, r3]
 801370e:	e00b      	b.n	8013728 <HAL_UART_Receive_IT+0x78>
 8013710:	235c      	movs	r3, #92	; 0x5c
 8013712:	22ff      	movs	r2, #255	; 0xff
 8013714:	52c2      	strh	r2, [r0, r3]
 8013716:	e007      	b.n	8013728 <HAL_UART_Receive_IT+0x78>
 8013718:	235c      	movs	r3, #92	; 0x5c
 801371a:	227f      	movs	r2, #127	; 0x7f
 801371c:	52c2      	strh	r2, [r0, r3]
 801371e:	e003      	b.n	8013728 <HAL_UART_Receive_IT+0x78>
 8013720:	2280      	movs	r2, #128	; 0x80
 8013722:	0552      	lsls	r2, r2, #21
 8013724:	4293      	cmp	r3, r2
 8013726:	d01e      	beq.n	8013766 <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013728:	2300      	movs	r3, #0
 801372a:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 801372c:	3369      	adds	r3, #105	; 0x69
 801372e:	5cc3      	ldrb	r3, [r0, r3]
 8013730:	2b12      	cmp	r3, #18
 8013732:	d023      	beq.n	801377c <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013734:	2369      	movs	r3, #105	; 0x69
 8013736:	2222      	movs	r2, #34	; 0x22
 8013738:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801373a:	6802      	ldr	r2, [r0, #0]
 801373c:	6811      	ldr	r1, [r2, #0]
 801373e:	2380      	movs	r3, #128	; 0x80
 8013740:	005b      	lsls	r3, r3, #1
 8013742:	430b      	orrs	r3, r1
 8013744:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013746:	6802      	ldr	r2, [r0, #0]
 8013748:	6893      	ldr	r3, [r2, #8]
 801374a:	2101      	movs	r1, #1
 801374c:	430b      	orrs	r3, r1
 801374e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013750:	2368      	movs	r3, #104	; 0x68
 8013752:	2200      	movs	r2, #0
 8013754:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013756:	6802      	ldr	r2, [r0, #0]
 8013758:	6813      	ldr	r3, [r2, #0]
 801375a:	311f      	adds	r1, #31
 801375c:	430b      	orrs	r3, r1
 801375e:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8013760:	2300      	movs	r3, #0
  }
}
 8013762:	0018      	movs	r0, r3
 8013764:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013766:	6903      	ldr	r3, [r0, #16]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d103      	bne.n	8013774 <HAL_UART_Receive_IT+0xc4>
 801376c:	335c      	adds	r3, #92	; 0x5c
 801376e:	227f      	movs	r2, #127	; 0x7f
 8013770:	52c2      	strh	r2, [r0, r3]
 8013772:	e7d9      	b.n	8013728 <HAL_UART_Receive_IT+0x78>
 8013774:	235c      	movs	r3, #92	; 0x5c
 8013776:	223f      	movs	r2, #63	; 0x3f
 8013778:	52c2      	strh	r2, [r0, r3]
 801377a:	e7d5      	b.n	8013728 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801377c:	3357      	adds	r3, #87	; 0x57
 801377e:	2232      	movs	r2, #50	; 0x32
 8013780:	54c2      	strb	r2, [r0, r3]
 8013782:	e7da      	b.n	801373a <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8013784:	2301      	movs	r3, #1
 8013786:	e7ec      	b.n	8013762 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8013788:	2302      	movs	r3, #2
 801378a:	e7ea      	b.n	8013762 <HAL_UART_Receive_IT+0xb2>
 801378c:	000001ff 	.word	0x000001ff

08013790 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013790:	b510      	push	{r4, lr}
 8013792:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013794:	2369      	movs	r3, #105	; 0x69
 8013796:	5cc3      	ldrb	r3, [r0, r3]
 8013798:	2b01      	cmp	r3, #1
 801379a:	d004      	beq.n	80137a6 <HAL_UART_Transmit_DMA+0x16>
 801379c:	2369      	movs	r3, #105	; 0x69
 801379e:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80137a0:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80137a2:	2b22      	cmp	r3, #34	; 0x22
 80137a4:	d134      	bne.n	8013810 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 80137a6:	2900      	cmp	r1, #0
 80137a8:	d037      	beq.n	801381a <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 80137aa:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80137ac:	2a00      	cmp	r2, #0
 80137ae:	d02f      	beq.n	8013810 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 80137b0:	2368      	movs	r3, #104	; 0x68
 80137b2:	5ce3      	ldrb	r3, [r4, r3]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d032      	beq.n	801381e <HAL_UART_Transmit_DMA+0x8e>
 80137b8:	2368      	movs	r3, #104	; 0x68
 80137ba:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 80137bc:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80137be:	3b18      	subs	r3, #24
 80137c0:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 80137c2:	3302      	adds	r3, #2
 80137c4:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80137c6:	2300      	movs	r3, #0
 80137c8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80137ca:	3369      	adds	r3, #105	; 0x69
 80137cc:	5ce3      	ldrb	r3, [r4, r3]
 80137ce:	2b22      	cmp	r3, #34	; 0x22
 80137d0:	d01f      	beq.n	8013812 <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80137d2:	2369      	movs	r3, #105	; 0x69
 80137d4:	2012      	movs	r0, #18
 80137d6:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80137d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80137da:	4812      	ldr	r0, [pc, #72]	; (8013824 <HAL_UART_Transmit_DMA+0x94>)
 80137dc:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80137de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80137e0:	4811      	ldr	r0, [pc, #68]	; (8013828 <HAL_UART_Transmit_DMA+0x98>)
 80137e2:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80137e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80137e6:	4811      	ldr	r0, [pc, #68]	; (801382c <HAL_UART_Transmit_DMA+0x9c>)
 80137e8:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80137ea:	6820      	ldr	r0, [r4, #0]
 80137ec:	3028      	adds	r0, #40	; 0x28
 80137ee:	0013      	movs	r3, r2
 80137f0:	0002      	movs	r2, r0
 80137f2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80137f4:	f7fd fd1a 	bl	801122c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80137f8:	6823      	ldr	r3, [r4, #0]
 80137fa:	2240      	movs	r2, #64	; 0x40
 80137fc:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 80137fe:	6822      	ldr	r2, [r4, #0]
 8013800:	6893      	ldr	r3, [r2, #8]
 8013802:	2180      	movs	r1, #128	; 0x80
 8013804:	430b      	orrs	r3, r1
 8013806:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013808:	2368      	movs	r3, #104	; 0x68
 801380a:	2200      	movs	r2, #0
 801380c:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801380e:	2000      	movs	r0, #0
  }
}
 8013810:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013812:	3347      	adds	r3, #71	; 0x47
 8013814:	3031      	adds	r0, #49	; 0x31
 8013816:	54e0      	strb	r0, [r4, r3]
 8013818:	e7de      	b.n	80137d8 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 801381a:	2001      	movs	r0, #1
 801381c:	e7f8      	b.n	8013810 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 801381e:	2002      	movs	r0, #2
 8013820:	e7f6      	b.n	8013810 <HAL_UART_Transmit_DMA+0x80>
 8013822:	46c0      	nop			; (mov r8, r8)
 8013824:	080138c9 	.word	0x080138c9
 8013828:	080138fb 	.word	0x080138fb
 801382c:	0801394b 	.word	0x0801394b

08013830 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013830:	b510      	push	{r4, lr}
 8013832:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013834:	2069      	movs	r0, #105	; 0x69
 8013836:	5c20      	ldrb	r0, [r4, r0]
 8013838:	2801      	cmp	r0, #1
 801383a:	d004      	beq.n	8013846 <HAL_UART_Receive_DMA+0x16>
 801383c:	2369      	movs	r3, #105	; 0x69
 801383e:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013840:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013842:	2b12      	cmp	r3, #18
 8013844:	d130      	bne.n	80138a8 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8013846:	2900      	cmp	r1, #0
 8013848:	d033      	beq.n	80138b2 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 801384a:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801384c:	2a00      	cmp	r2, #0
 801384e:	d02b      	beq.n	80138a8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013850:	2368      	movs	r3, #104	; 0x68
 8013852:	5ce3      	ldrb	r3, [r4, r3]
 8013854:	2b01      	cmp	r3, #1
 8013856:	d02e      	beq.n	80138b6 <HAL_UART_Receive_DMA+0x86>
 8013858:	2368      	movs	r3, #104	; 0x68
 801385a:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 801385c:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 801385e:	3b10      	subs	r3, #16
 8013860:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013862:	2300      	movs	r3, #0
 8013864:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013866:	3369      	adds	r3, #105	; 0x69
 8013868:	5ce3      	ldrb	r3, [r4, r3]
 801386a:	2b12      	cmp	r3, #18
 801386c:	d01d      	beq.n	80138aa <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 801386e:	2369      	movs	r3, #105	; 0x69
 8013870:	2022      	movs	r0, #34	; 0x22
 8013872:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013876:	4811      	ldr	r0, [pc, #68]	; (80138bc <HAL_UART_Receive_DMA+0x8c>)
 8013878:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801387a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801387c:	4810      	ldr	r0, [pc, #64]	; (80138c0 <HAL_UART_Receive_DMA+0x90>)
 801387e:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013880:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013882:	4810      	ldr	r0, [pc, #64]	; (80138c4 <HAL_UART_Receive_DMA+0x94>)
 8013884:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013886:	6820      	ldr	r0, [r4, #0]
 8013888:	3024      	adds	r0, #36	; 0x24
 801388a:	0013      	movs	r3, r2
 801388c:	000a      	movs	r2, r1
 801388e:	0001      	movs	r1, r0
 8013890:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013892:	f7fd fccb 	bl	801122c <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013896:	6822      	ldr	r2, [r4, #0]
 8013898:	6893      	ldr	r3, [r2, #8]
 801389a:	2140      	movs	r1, #64	; 0x40
 801389c:	430b      	orrs	r3, r1
 801389e:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 80138a0:	2368      	movs	r3, #104	; 0x68
 80138a2:	2200      	movs	r2, #0
 80138a4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80138a6:	2000      	movs	r0, #0
  }
}
 80138a8:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80138aa:	3357      	adds	r3, #87	; 0x57
 80138ac:	3031      	adds	r0, #49	; 0x31
 80138ae:	54e0      	strb	r0, [r4, r3]
 80138b0:	e7e0      	b.n	8013874 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 80138b2:	2001      	movs	r0, #1
 80138b4:	e7f8      	b.n	80138a8 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80138b6:	2002      	movs	r0, #2
 80138b8:	e7f6      	b.n	80138a8 <HAL_UART_Receive_DMA+0x78>
 80138ba:	46c0      	nop			; (mov r8, r8)
 80138bc:	08013905 	.word	0x08013905
 80138c0:	08013941 	.word	0x08013941
 80138c4:	0801394b 	.word	0x0801394b

080138c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80138c8:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80138ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80138cc:	6802      	ldr	r2, [r0, #0]
 80138ce:	6812      	ldr	r2, [r2, #0]
 80138d0:	0692      	lsls	r2, r2, #26
 80138d2:	d40d      	bmi.n	80138f0 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 80138d4:	2252      	movs	r2, #82	; 0x52
 80138d6:	2100      	movs	r1, #0
 80138d8:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80138da:	6819      	ldr	r1, [r3, #0]
 80138dc:	688a      	ldr	r2, [r1, #8]
 80138de:	2080      	movs	r0, #128	; 0x80
 80138e0:	4382      	bics	r2, r0
 80138e2:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80138e4:	681a      	ldr	r2, [r3, #0]
 80138e6:	6813      	ldr	r3, [r2, #0]
 80138e8:	2140      	movs	r1, #64	; 0x40
 80138ea:	430b      	orrs	r3, r1
 80138ec:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 80138ee:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80138f0:	0018      	movs	r0, r3
 80138f2:	f7fa fac5 	bl	800de80 <HAL_UART_TxCpltCallback>
}
 80138f6:	e7fa      	b.n	80138ee <UART_DMATransmitCplt+0x26>

080138f8 <HAL_UART_TxHalfCpltCallback>:
}
 80138f8:	4770      	bx	lr

080138fa <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80138fa:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 80138fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80138fe:	f7ff fffb 	bl	80138f8 <HAL_UART_TxHalfCpltCallback>
}
 8013902:	bd10      	pop	{r4, pc}

08013904 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013904:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013906:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013908:	6802      	ldr	r2, [r0, #0]
 801390a:	6812      	ldr	r2, [r2, #0]
 801390c:	0692      	lsls	r2, r2, #26
 801390e:	d40e      	bmi.n	801392e <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013910:	225a      	movs	r2, #90	; 0x5a
 8013912:	2100      	movs	r1, #0
 8013914:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013916:	6819      	ldr	r1, [r3, #0]
 8013918:	688a      	ldr	r2, [r1, #8]
 801391a:	2040      	movs	r0, #64	; 0x40
 801391c:	4382      	bics	r2, r0
 801391e:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013920:	2269      	movs	r2, #105	; 0x69
 8013922:	5c9a      	ldrb	r2, [r3, r2]
 8013924:	2a32      	cmp	r2, #50	; 0x32
 8013926:	d006      	beq.n	8013936 <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013928:	2269      	movs	r2, #105	; 0x69
 801392a:	2101      	movs	r1, #1
 801392c:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 801392e:	0018      	movs	r0, r3
 8013930:	f7fa fae4 	bl	800defc <HAL_UART_RxCpltCallback>
}
 8013934:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013936:	3237      	adds	r2, #55	; 0x37
 8013938:	2112      	movs	r1, #18
 801393a:	5499      	strb	r1, [r3, r2]
 801393c:	e7f7      	b.n	801392e <UART_DMAReceiveCplt+0x2a>

0801393e <HAL_UART_RxHalfCpltCallback>:
}
 801393e:	4770      	bx	lr

08013940 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013940:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013942:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013944:	f7ff fffb 	bl	801393e <HAL_UART_RxHalfCpltCallback>
}
 8013948:	bd10      	pop	{r4, pc}

0801394a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801394a:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801394c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 801394e:	2300      	movs	r3, #0
 8013950:	225a      	movs	r2, #90	; 0x5a
 8013952:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013954:	3a08      	subs	r2, #8
 8013956:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013958:	3369      	adds	r3, #105	; 0x69
 801395a:	3a51      	subs	r2, #81	; 0x51
 801395c:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801395e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013960:	320f      	adds	r2, #15
 8013962:	4313      	orrs	r3, r2
 8013964:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8013966:	f7fa faa3 	bl	800deb0 <HAL_UART_ErrorCallback>
}
 801396a:	bd10      	pop	{r4, pc}

0801396c <UART_SetConfig>:
{
 801396c:	b570      	push	{r4, r5, r6, lr}
 801396e:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013970:	6801      	ldr	r1, [r0, #0]
 8013972:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013974:	6883      	ldr	r3, [r0, #8]
 8013976:	6900      	ldr	r0, [r0, #16]
 8013978:	4303      	orrs	r3, r0
 801397a:	6960      	ldr	r0, [r4, #20]
 801397c:	4303      	orrs	r3, r0
 801397e:	69e0      	ldr	r0, [r4, #28]
 8013980:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013982:	487e      	ldr	r0, [pc, #504]	; (8013b7c <UART_SetConfig+0x210>)
 8013984:	4002      	ands	r2, r0
 8013986:	4313      	orrs	r3, r2
 8013988:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801398a:	6822      	ldr	r2, [r4, #0]
 801398c:	6853      	ldr	r3, [r2, #4]
 801398e:	497c      	ldr	r1, [pc, #496]	; (8013b80 <UART_SetConfig+0x214>)
 8013990:	400b      	ands	r3, r1
 8013992:	68e1      	ldr	r1, [r4, #12]
 8013994:	430b      	orrs	r3, r1
 8013996:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013998:	6821      	ldr	r1, [r4, #0]
 801399a:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 801399c:	69a3      	ldr	r3, [r4, #24]
 801399e:	6a20      	ldr	r0, [r4, #32]
 80139a0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80139a2:	4878      	ldr	r0, [pc, #480]	; (8013b84 <UART_SetConfig+0x218>)
 80139a4:	4002      	ands	r2, r0
 80139a6:	4313      	orrs	r3, r2
 80139a8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139aa:	6825      	ldr	r5, [r4, #0]
 80139ac:	4b76      	ldr	r3, [pc, #472]	; (8013b88 <UART_SetConfig+0x21c>)
 80139ae:	429d      	cmp	r5, r3
 80139b0:	d022      	beq.n	80139f8 <UART_SetConfig+0x8c>
 80139b2:	4b76      	ldr	r3, [pc, #472]	; (8013b8c <UART_SetConfig+0x220>)
 80139b4:	429d      	cmp	r5, r3
 80139b6:	d034      	beq.n	8013a22 <UART_SetConfig+0xb6>
 80139b8:	4b75      	ldr	r3, [pc, #468]	; (8013b90 <UART_SetConfig+0x224>)
 80139ba:	429d      	cmp	r5, r3
 80139bc:	d100      	bne.n	80139c0 <UART_SetConfig+0x54>
 80139be:	e06b      	b.n	8013a98 <UART_SetConfig+0x12c>
 80139c0:	4b74      	ldr	r3, [pc, #464]	; (8013b94 <UART_SetConfig+0x228>)
 80139c2:	429d      	cmp	r5, r3
 80139c4:	d100      	bne.n	80139c8 <UART_SetConfig+0x5c>
 80139c6:	e08e      	b.n	8013ae6 <UART_SetConfig+0x17a>
 80139c8:	4b73      	ldr	r3, [pc, #460]	; (8013b98 <UART_SetConfig+0x22c>)
 80139ca:	429d      	cmp	r5, r3
 80139cc:	d100      	bne.n	80139d0 <UART_SetConfig+0x64>
 80139ce:	e08a      	b.n	8013ae6 <UART_SetConfig+0x17a>
 80139d0:	4b72      	ldr	r3, [pc, #456]	; (8013b9c <UART_SetConfig+0x230>)
 80139d2:	429d      	cmp	r5, r3
 80139d4:	d100      	bne.n	80139d8 <UART_SetConfig+0x6c>
 80139d6:	e086      	b.n	8013ae6 <UART_SetConfig+0x17a>
 80139d8:	4b71      	ldr	r3, [pc, #452]	; (8013ba0 <UART_SetConfig+0x234>)
 80139da:	429d      	cmp	r5, r3
 80139dc:	d100      	bne.n	80139e0 <UART_SetConfig+0x74>
 80139de:	e082      	b.n	8013ae6 <UART_SetConfig+0x17a>
 80139e0:	4b70      	ldr	r3, [pc, #448]	; (8013ba4 <UART_SetConfig+0x238>)
 80139e2:	429d      	cmp	r5, r3
 80139e4:	d100      	bne.n	80139e8 <UART_SetConfig+0x7c>
 80139e6:	e07e      	b.n	8013ae6 <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139e8:	2380      	movs	r3, #128	; 0x80
 80139ea:	021b      	lsls	r3, r3, #8
 80139ec:	69e2      	ldr	r2, [r4, #28]
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d100      	bne.n	80139f4 <UART_SetConfig+0x88>
 80139f2:	e072      	b.n	8013ada <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 80139f4:	2001      	movs	r0, #1
 80139f6:	e04e      	b.n	8013a96 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139f8:	4b6b      	ldr	r3, [pc, #428]	; (8013ba8 <UART_SetConfig+0x23c>)
 80139fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80139fc:	2303      	movs	r3, #3
 80139fe:	4013      	ands	r3, r2
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d100      	bne.n	8013a06 <UART_SetConfig+0x9a>
 8013a04:	e09a      	b.n	8013b3c <UART_SetConfig+0x1d0>
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d02f      	beq.n	8013a6a <UART_SetConfig+0xfe>
 8013a0a:	2b02      	cmp	r3, #2
 8013a0c:	d100      	bne.n	8013a10 <UART_SetConfig+0xa4>
 8013a0e:	e0a5      	b.n	8013b5c <UART_SetConfig+0x1f0>
 8013a10:	2b03      	cmp	r3, #3
 8013a12:	d01a      	beq.n	8013a4a <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a14:	2380      	movs	r3, #128	; 0x80
 8013a16:	021b      	lsls	r3, r3, #8
 8013a18:	69e2      	ldr	r2, [r4, #28]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d060      	beq.n	8013ae0 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8013a1e:	2001      	movs	r0, #1
 8013a20:	e039      	b.n	8013a96 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a22:	4b61      	ldr	r3, [pc, #388]	; (8013ba8 <UART_SetConfig+0x23c>)
 8013a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a26:	22c0      	movs	r2, #192	; 0xc0
 8013a28:	0292      	lsls	r2, r2, #10
 8013a2a:	4013      	ands	r3, r2
 8013a2c:	2280      	movs	r2, #128	; 0x80
 8013a2e:	0252      	lsls	r2, r2, #9
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d100      	bne.n	8013a36 <UART_SetConfig+0xca>
 8013a34:	e082      	b.n	8013b3c <UART_SetConfig+0x1d0>
 8013a36:	d916      	bls.n	8013a66 <UART_SetConfig+0xfa>
 8013a38:	2280      	movs	r2, #128	; 0x80
 8013a3a:	0292      	lsls	r2, r2, #10
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d100      	bne.n	8013a42 <UART_SetConfig+0xd6>
 8013a40:	e08c      	b.n	8013b5c <UART_SetConfig+0x1f0>
 8013a42:	22c0      	movs	r2, #192	; 0xc0
 8013a44:	0292      	lsls	r2, r2, #10
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d1e4      	bne.n	8013a14 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a4a:	2380      	movs	r3, #128	; 0x80
 8013a4c:	021b      	lsls	r3, r3, #8
 8013a4e:	69e2      	ldr	r2, [r4, #28]
 8013a50:	429a      	cmp	r2, r3
 8013a52:	d038      	beq.n	8013ac6 <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013a54:	6861      	ldr	r1, [r4, #4]
 8013a56:	4855      	ldr	r0, [pc, #340]	; (8013bac <UART_SetConfig+0x240>)
 8013a58:	f7ec fb7a 	bl	8000150 <__udivsi3>
 8013a5c:	0400      	lsls	r0, r0, #16
 8013a5e:	0c00      	lsrs	r0, r0, #16
 8013a60:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a62:	2000      	movs	r0, #0
        break;
 8013a64:	e017      	b.n	8013a96 <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1d4      	bne.n	8013a14 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a6a:	2380      	movs	r3, #128	; 0x80
 8013a6c:	021b      	lsls	r3, r3, #8
 8013a6e:	69e2      	ldr	r2, [r4, #28]
 8013a70:	429a      	cmp	r2, r3
 8013a72:	d13d      	bne.n	8013af0 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013a74:	f7ff fa5c 	bl	8012f30 <HAL_RCC_GetPCLK1Freq>
 8013a78:	0040      	lsls	r0, r0, #1
 8013a7a:	6861      	ldr	r1, [r4, #4]
 8013a7c:	f7ec fb68 	bl	8000150 <__udivsi3>
 8013a80:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a82:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013a84:	220f      	movs	r2, #15
 8013a86:	0019      	movs	r1, r3
 8013a88:	4391      	bics	r1, r2
 8013a8a:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013a8c:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013a8e:	071b      	lsls	r3, r3, #28
 8013a90:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8013a92:	4313      	orrs	r3, r2
 8013a94:	60cb      	str	r3, [r1, #12]
}
 8013a96:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013a98:	4b43      	ldr	r3, [pc, #268]	; (8013ba8 <UART_SetConfig+0x23c>)
 8013a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a9c:	22c0      	movs	r2, #192	; 0xc0
 8013a9e:	0312      	lsls	r2, r2, #12
 8013aa0:	4013      	ands	r3, r2
 8013aa2:	2280      	movs	r2, #128	; 0x80
 8013aa4:	02d2      	lsls	r2, r2, #11
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d02d      	beq.n	8013b06 <UART_SetConfig+0x19a>
 8013aaa:	d913      	bls.n	8013ad4 <UART_SetConfig+0x168>
 8013aac:	2280      	movs	r2, #128	; 0x80
 8013aae:	0312      	lsls	r2, r2, #12
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d036      	beq.n	8013b22 <UART_SetConfig+0x1b6>
 8013ab4:	22c0      	movs	r2, #192	; 0xc0
 8013ab6:	0312      	lsls	r2, r2, #12
 8013ab8:	4293      	cmp	r3, r2
 8013aba:	d1ab      	bne.n	8013a14 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013abc:	2380      	movs	r3, #128	; 0x80
 8013abe:	021b      	lsls	r3, r3, #8
 8013ac0:	69e2      	ldr	r2, [r4, #28]
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d1c6      	bne.n	8013a54 <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013ac6:	6861      	ldr	r1, [r4, #4]
 8013ac8:	4839      	ldr	r0, [pc, #228]	; (8013bb0 <UART_SetConfig+0x244>)
 8013aca:	f7ec fb41 	bl	8000150 <__udivsi3>
 8013ace:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013ad0:	2000      	movs	r0, #0
        break;
 8013ad2:	e7d7      	b.n	8013a84 <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d0c8      	beq.n	8013a6a <UART_SetConfig+0xfe>
 8013ad8:	e79c      	b.n	8013a14 <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8013ada:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013adc:	2300      	movs	r3, #0
 8013ade:	e7d1      	b.n	8013a84 <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8013ae0:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e7ce      	b.n	8013a84 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013ae6:	2380      	movs	r3, #128	; 0x80
 8013ae8:	021b      	lsls	r3, r3, #8
 8013aea:	69e2      	ldr	r2, [r4, #28]
 8013aec:	429a      	cmp	r2, r3
 8013aee:	d0c1      	beq.n	8013a74 <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013af0:	f7ff fa1e 	bl	8012f30 <HAL_RCC_GetPCLK1Freq>
 8013af4:	6825      	ldr	r5, [r4, #0]
 8013af6:	6861      	ldr	r1, [r4, #4]
 8013af8:	f7ec fb2a 	bl	8000150 <__udivsi3>
 8013afc:	0400      	lsls	r0, r0, #16
 8013afe:	0c00      	lsrs	r0, r0, #16
 8013b00:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013b02:	2000      	movs	r0, #0
  return ret;
 8013b04:	e7c7      	b.n	8013a96 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b06:	2380      	movs	r3, #128	; 0x80
 8013b08:	021b      	lsls	r3, r3, #8
 8013b0a:	69e2      	ldr	r2, [r4, #28]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d11a      	bne.n	8013b46 <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013b10:	f7ff f9aa 	bl	8012e68 <HAL_RCC_GetSysClockFreq>
 8013b14:	0040      	lsls	r0, r0, #1
 8013b16:	6861      	ldr	r1, [r4, #4]
 8013b18:	f7ec fb1a 	bl	8000150 <__udivsi3>
 8013b1c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013b1e:	2000      	movs	r0, #0
        break;
 8013b20:	e7b0      	b.n	8013a84 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b22:	2380      	movs	r3, #128	; 0x80
 8013b24:	021b      	lsls	r3, r3, #8
 8013b26:	69e2      	ldr	r2, [r4, #28]
 8013b28:	429a      	cmp	r2, r3
 8013b2a:	d11c      	bne.n	8013b66 <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013b2c:	6861      	ldr	r1, [r4, #4]
 8013b2e:	2080      	movs	r0, #128	; 0x80
 8013b30:	0240      	lsls	r0, r0, #9
 8013b32:	f7ec fb0d 	bl	8000150 <__udivsi3>
 8013b36:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013b38:	2000      	movs	r0, #0
        break;
 8013b3a:	e7a3      	b.n	8013a84 <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b3c:	2380      	movs	r3, #128	; 0x80
 8013b3e:	021b      	lsls	r3, r3, #8
 8013b40:	69e2      	ldr	r2, [r4, #28]
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d0e4      	beq.n	8013b10 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013b46:	f7ff f98f 	bl	8012e68 <HAL_RCC_GetSysClockFreq>
 8013b4a:	6825      	ldr	r5, [r4, #0]
 8013b4c:	6861      	ldr	r1, [r4, #4]
 8013b4e:	f7ec faff 	bl	8000150 <__udivsi3>
 8013b52:	0400      	lsls	r0, r0, #16
 8013b54:	0c00      	lsrs	r0, r0, #16
 8013b56:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013b58:	2000      	movs	r0, #0
        break;
 8013b5a:	e79c      	b.n	8013a96 <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013b5c:	2380      	movs	r3, #128	; 0x80
 8013b5e:	021b      	lsls	r3, r3, #8
 8013b60:	69e2      	ldr	r2, [r4, #28]
 8013b62:	429a      	cmp	r2, r3
 8013b64:	d0e2      	beq.n	8013b2c <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013b66:	6861      	ldr	r1, [r4, #4]
 8013b68:	2080      	movs	r0, #128	; 0x80
 8013b6a:	0200      	lsls	r0, r0, #8
 8013b6c:	f7ec faf0 	bl	8000150 <__udivsi3>
 8013b70:	0400      	lsls	r0, r0, #16
 8013b72:	0c00      	lsrs	r0, r0, #16
 8013b74:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013b76:	2000      	movs	r0, #0
        break;
 8013b78:	e78d      	b.n	8013a96 <UART_SetConfig+0x12a>
 8013b7a:	46c0      	nop			; (mov r8, r8)
 8013b7c:	efff69f3 	.word	0xefff69f3
 8013b80:	ffffcfff 	.word	0xffffcfff
 8013b84:	fffff4ff 	.word	0xfffff4ff
 8013b88:	40013800 	.word	0x40013800
 8013b8c:	40004400 	.word	0x40004400
 8013b90:	40004800 	.word	0x40004800
 8013b94:	40004c00 	.word	0x40004c00
 8013b98:	40005000 	.word	0x40005000
 8013b9c:	40011400 	.word	0x40011400
 8013ba0:	40011800 	.word	0x40011800
 8013ba4:	40011c00 	.word	0x40011c00
 8013ba8:	40021000 	.word	0x40021000
 8013bac:	007a1200 	.word	0x007a1200
 8013bb0:	00f42400 	.word	0x00f42400

08013bb4 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013bb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013bb6:	07db      	lsls	r3, r3, #31
 8013bb8:	d506      	bpl.n	8013bc8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013bba:	6802      	ldr	r2, [r0, #0]
 8013bbc:	6853      	ldr	r3, [r2, #4]
 8013bbe:	492c      	ldr	r1, [pc, #176]	; (8013c70 <UART_AdvFeatureConfig+0xbc>)
 8013bc0:	400b      	ands	r3, r1
 8013bc2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013bc4:	430b      	orrs	r3, r1
 8013bc6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013bc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013bca:	079b      	lsls	r3, r3, #30
 8013bcc:	d506      	bpl.n	8013bdc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013bce:	6802      	ldr	r2, [r0, #0]
 8013bd0:	6853      	ldr	r3, [r2, #4]
 8013bd2:	4928      	ldr	r1, [pc, #160]	; (8013c74 <UART_AdvFeatureConfig+0xc0>)
 8013bd4:	400b      	ands	r3, r1
 8013bd6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013bd8:	430b      	orrs	r3, r1
 8013bda:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013bdc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013bde:	075b      	lsls	r3, r3, #29
 8013be0:	d506      	bpl.n	8013bf0 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013be2:	6802      	ldr	r2, [r0, #0]
 8013be4:	6853      	ldr	r3, [r2, #4]
 8013be6:	4924      	ldr	r1, [pc, #144]	; (8013c78 <UART_AdvFeatureConfig+0xc4>)
 8013be8:	400b      	ands	r3, r1
 8013bea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013bec:	430b      	orrs	r3, r1
 8013bee:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013bf0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013bf2:	071b      	lsls	r3, r3, #28
 8013bf4:	d506      	bpl.n	8013c04 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013bf6:	6802      	ldr	r2, [r0, #0]
 8013bf8:	6853      	ldr	r3, [r2, #4]
 8013bfa:	4920      	ldr	r1, [pc, #128]	; (8013c7c <UART_AdvFeatureConfig+0xc8>)
 8013bfc:	400b      	ands	r3, r1
 8013bfe:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013c00:	430b      	orrs	r3, r1
 8013c02:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013c04:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013c06:	06db      	lsls	r3, r3, #27
 8013c08:	d506      	bpl.n	8013c18 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013c0a:	6802      	ldr	r2, [r0, #0]
 8013c0c:	6893      	ldr	r3, [r2, #8]
 8013c0e:	491c      	ldr	r1, [pc, #112]	; (8013c80 <UART_AdvFeatureConfig+0xcc>)
 8013c10:	400b      	ands	r3, r1
 8013c12:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013c14:	430b      	orrs	r3, r1
 8013c16:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013c1a:	069b      	lsls	r3, r3, #26
 8013c1c:	d506      	bpl.n	8013c2c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013c1e:	6802      	ldr	r2, [r0, #0]
 8013c20:	6893      	ldr	r3, [r2, #8]
 8013c22:	4918      	ldr	r1, [pc, #96]	; (8013c84 <UART_AdvFeatureConfig+0xd0>)
 8013c24:	400b      	ands	r3, r1
 8013c26:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013c28:	430b      	orrs	r3, r1
 8013c2a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013c2e:	065b      	lsls	r3, r3, #25
 8013c30:	d50b      	bpl.n	8013c4a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013c32:	6802      	ldr	r2, [r0, #0]
 8013c34:	6853      	ldr	r3, [r2, #4]
 8013c36:	4914      	ldr	r1, [pc, #80]	; (8013c88 <UART_AdvFeatureConfig+0xd4>)
 8013c38:	400b      	ands	r3, r1
 8013c3a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013c3c:	430b      	orrs	r3, r1
 8013c3e:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013c40:	2380      	movs	r3, #128	; 0x80
 8013c42:	035b      	lsls	r3, r3, #13
 8013c44:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d00a      	beq.n	8013c60 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013c4a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013c4c:	061b      	lsls	r3, r3, #24
 8013c4e:	d506      	bpl.n	8013c5e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013c50:	6802      	ldr	r2, [r0, #0]
 8013c52:	6853      	ldr	r3, [r2, #4]
 8013c54:	490d      	ldr	r1, [pc, #52]	; (8013c8c <UART_AdvFeatureConfig+0xd8>)
 8013c56:	400b      	ands	r3, r1
 8013c58:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013c5a:	430b      	orrs	r3, r1
 8013c5c:	6053      	str	r3, [r2, #4]
}
 8013c5e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013c60:	6802      	ldr	r2, [r0, #0]
 8013c62:	6853      	ldr	r3, [r2, #4]
 8013c64:	490a      	ldr	r1, [pc, #40]	; (8013c90 <UART_AdvFeatureConfig+0xdc>)
 8013c66:	400b      	ands	r3, r1
 8013c68:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013c6a:	430b      	orrs	r3, r1
 8013c6c:	6053      	str	r3, [r2, #4]
 8013c6e:	e7ec      	b.n	8013c4a <UART_AdvFeatureConfig+0x96>
 8013c70:	fffdffff 	.word	0xfffdffff
 8013c74:	fffeffff 	.word	0xfffeffff
 8013c78:	fffbffff 	.word	0xfffbffff
 8013c7c:	ffff7fff 	.word	0xffff7fff
 8013c80:	ffffefff 	.word	0xffffefff
 8013c84:	ffffdfff 	.word	0xffffdfff
 8013c88:	ffefffff 	.word	0xffefffff
 8013c8c:	fff7ffff 	.word	0xfff7ffff
 8013c90:	ff9fffff 	.word	0xff9fffff

08013c94 <UART_WaitOnFlagUntilTimeout>:
{
 8013c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c96:	46c6      	mov	lr, r8
 8013c98:	b500      	push	{lr}
 8013c9a:	0006      	movs	r6, r0
 8013c9c:	000c      	movs	r4, r1
 8013c9e:	0017      	movs	r7, r2
 8013ca0:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013ca2:	f7fc fe17 	bl	80108d4 <HAL_GetTick>
 8013ca6:	4680      	mov	r8, r0
  if(Status == RESET)
 8013ca8:	2f00      	cmp	r7, #0
 8013caa:	d029      	beq.n	8013d00 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013cac:	6832      	ldr	r2, [r6, #0]
 8013cae:	69d3      	ldr	r3, [r2, #28]
 8013cb0:	4023      	ands	r3, r4
 8013cb2:	42a3      	cmp	r3, r4
 8013cb4:	d152      	bne.n	8013d5c <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013cb6:	1c6b      	adds	r3, r5, #1
 8013cb8:	d0f9      	beq.n	8013cae <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013cba:	2d00      	cmp	r5, #0
 8013cbc:	d005      	beq.n	8013cca <UART_WaitOnFlagUntilTimeout+0x36>
 8013cbe:	f7fc fe09 	bl	80108d4 <HAL_GetTick>
 8013cc2:	4643      	mov	r3, r8
 8013cc4:	1ac0      	subs	r0, r0, r3
 8013cc6:	42a8      	cmp	r0, r5
 8013cc8:	d9f0      	bls.n	8013cac <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013cca:	6832      	ldr	r2, [r6, #0]
 8013ccc:	6813      	ldr	r3, [r2, #0]
 8013cce:	2180      	movs	r1, #128	; 0x80
 8013cd0:	438b      	bics	r3, r1
 8013cd2:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013cd4:	6832      	ldr	r2, [r6, #0]
 8013cd6:	6813      	ldr	r3, [r2, #0]
 8013cd8:	3960      	subs	r1, #96	; 0x60
 8013cda:	438b      	bics	r3, r1
 8013cdc:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013cde:	6832      	ldr	r2, [r6, #0]
 8013ce0:	6813      	ldr	r3, [r2, #0]
 8013ce2:	491f      	ldr	r1, [pc, #124]	; (8013d60 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013ce4:	400b      	ands	r3, r1
 8013ce6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013ce8:	6831      	ldr	r1, [r6, #0]
 8013cea:	688b      	ldr	r3, [r1, #8]
 8013cec:	2201      	movs	r2, #1
 8013cee:	4393      	bics	r3, r2
 8013cf0:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013cf2:	2369      	movs	r3, #105	; 0x69
 8013cf4:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013cf6:	3b01      	subs	r3, #1
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013cfc:	2003      	movs	r0, #3
 8013cfe:	e02a      	b.n	8013d56 <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013d00:	6832      	ldr	r2, [r6, #0]
 8013d02:	69d3      	ldr	r3, [r2, #28]
 8013d04:	4023      	ands	r3, r4
 8013d06:	42a3      	cmp	r3, r4
 8013d08:	d024      	beq.n	8013d54 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8013d0a:	1c6b      	adds	r3, r5, #1
 8013d0c:	d0f9      	beq.n	8013d02 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013d0e:	2d00      	cmp	r5, #0
 8013d10:	d005      	beq.n	8013d1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8013d12:	f7fc fddf 	bl	80108d4 <HAL_GetTick>
 8013d16:	4643      	mov	r3, r8
 8013d18:	1ac0      	subs	r0, r0, r3
 8013d1a:	42a8      	cmp	r0, r5
 8013d1c:	d9f0      	bls.n	8013d00 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013d1e:	6832      	ldr	r2, [r6, #0]
 8013d20:	6813      	ldr	r3, [r2, #0]
 8013d22:	2180      	movs	r1, #128	; 0x80
 8013d24:	438b      	bics	r3, r1
 8013d26:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013d28:	6832      	ldr	r2, [r6, #0]
 8013d2a:	6813      	ldr	r3, [r2, #0]
 8013d2c:	3960      	subs	r1, #96	; 0x60
 8013d2e:	438b      	bics	r3, r1
 8013d30:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013d32:	6832      	ldr	r2, [r6, #0]
 8013d34:	6813      	ldr	r3, [r2, #0]
 8013d36:	490a      	ldr	r1, [pc, #40]	; (8013d60 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013d38:	400b      	ands	r3, r1
 8013d3a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013d3c:	6831      	ldr	r1, [r6, #0]
 8013d3e:	688b      	ldr	r3, [r1, #8]
 8013d40:	2201      	movs	r2, #1
 8013d42:	4393      	bics	r3, r2
 8013d44:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013d46:	2369      	movs	r3, #105	; 0x69
 8013d48:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013d4a:	3b01      	subs	r3, #1
 8013d4c:	2200      	movs	r2, #0
 8013d4e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013d50:	2003      	movs	r0, #3
 8013d52:	e000      	b.n	8013d56 <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013d54:	2000      	movs	r0, #0
}
 8013d56:	bc04      	pop	{r2}
 8013d58:	4690      	mov	r8, r2
 8013d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013d5c:	2000      	movs	r0, #0
 8013d5e:	e7fa      	b.n	8013d56 <UART_WaitOnFlagUntilTimeout+0xc2>
 8013d60:	fffffeff 	.word	0xfffffeff

08013d64 <HAL_UART_Transmit>:
{
 8013d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d66:	b083      	sub	sp, #12
 8013d68:	0004      	movs	r4, r0
 8013d6a:	000e      	movs	r6, r1
 8013d6c:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013d6e:	2369      	movs	r3, #105	; 0x69
 8013d70:	5cc3      	ldrb	r3, [r0, r3]
 8013d72:	2b01      	cmp	r3, #1
 8013d74:	d004      	beq.n	8013d80 <HAL_UART_Transmit+0x1c>
 8013d76:	2369      	movs	r3, #105	; 0x69
 8013d78:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8013d7a:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013d7c:	2b22      	cmp	r3, #34	; 0x22
 8013d7e:	d153      	bne.n	8013e28 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8013d80:	2e00      	cmp	r6, #0
 8013d82:	d050      	beq.n	8013e26 <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 8013d84:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013d86:	2a00      	cmp	r2, #0
 8013d88:	d04e      	beq.n	8013e28 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8013d8a:	2368      	movs	r3, #104	; 0x68
 8013d8c:	5ce3      	ldrb	r3, [r4, r3]
 8013d8e:	2b01      	cmp	r3, #1
 8013d90:	d04c      	beq.n	8013e2c <HAL_UART_Transmit+0xc8>
 8013d92:	2368      	movs	r3, #104	; 0x68
 8013d94:	2101      	movs	r1, #1
 8013d96:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d98:	2300      	movs	r3, #0
 8013d9a:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013d9c:	3369      	adds	r3, #105	; 0x69
 8013d9e:	5ce3      	ldrb	r3, [r4, r3]
 8013da0:	2b22      	cmp	r3, #34	; 0x22
 8013da2:	d008      	beq.n	8013db6 <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013da4:	2369      	movs	r3, #105	; 0x69
 8013da6:	2112      	movs	r1, #18
 8013da8:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8013daa:	2350      	movs	r3, #80	; 0x50
 8013dac:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8013dae:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013db0:	2580      	movs	r5, #128	; 0x80
 8013db2:	016d      	lsls	r5, r5, #5
 8013db4:	e00a      	b.n	8013dcc <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013db6:	3347      	adds	r3, #71	; 0x47
 8013db8:	3131      	adds	r1, #49	; 0x31
 8013dba:	54e1      	strb	r1, [r4, r3]
 8013dbc:	e7f5      	b.n	8013daa <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013dbe:	7833      	ldrb	r3, [r6, #0]
 8013dc0:	6822      	ldr	r2, [r4, #0]
 8013dc2:	8513      	strh	r3, [r2, #40]	; 0x28
 8013dc4:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 8013dc6:	5be2      	ldrh	r2, [r4, r7]
 8013dc8:	2a00      	cmp	r2, #0
 8013dca:	d016      	beq.n	8013dfa <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013dcc:	3a01      	subs	r2, #1
 8013dce:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013dd0:	9b01      	ldr	r3, [sp, #4]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	2180      	movs	r1, #128	; 0x80
 8013dd6:	0020      	movs	r0, r4
 8013dd8:	f7ff ff5c 	bl	8013c94 <UART_WaitOnFlagUntilTimeout>
 8013ddc:	2800      	cmp	r0, #0
 8013dde:	d127      	bne.n	8013e30 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013de0:	68a3      	ldr	r3, [r4, #8]
 8013de2:	42ab      	cmp	r3, r5
 8013de4:	d1eb      	bne.n	8013dbe <HAL_UART_Transmit+0x5a>
 8013de6:	6923      	ldr	r3, [r4, #16]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d1e8      	bne.n	8013dbe <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013dec:	8833      	ldrh	r3, [r6, #0]
 8013dee:	05db      	lsls	r3, r3, #23
 8013df0:	0ddb      	lsrs	r3, r3, #23
 8013df2:	6822      	ldr	r2, [r4, #0]
 8013df4:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8013df6:	3602      	adds	r6, #2
 8013df8:	e7e5      	b.n	8013dc6 <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013dfa:	9b01      	ldr	r3, [sp, #4]
 8013dfc:	2140      	movs	r1, #64	; 0x40
 8013dfe:	0020      	movs	r0, r4
 8013e00:	f7ff ff48 	bl	8013c94 <UART_WaitOnFlagUntilTimeout>
 8013e04:	2800      	cmp	r0, #0
 8013e06:	d115      	bne.n	8013e34 <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013e08:	2369      	movs	r3, #105	; 0x69
 8013e0a:	5ce3      	ldrb	r3, [r4, r3]
 8013e0c:	2b32      	cmp	r3, #50	; 0x32
 8013e0e:	d006      	beq.n	8013e1e <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013e10:	2369      	movs	r3, #105	; 0x69
 8013e12:	2201      	movs	r2, #1
 8013e14:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013e16:	2368      	movs	r3, #104	; 0x68
 8013e18:	2200      	movs	r2, #0
 8013e1a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013e1c:	e004      	b.n	8013e28 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013e1e:	3337      	adds	r3, #55	; 0x37
 8013e20:	2222      	movs	r2, #34	; 0x22
 8013e22:	54e2      	strb	r2, [r4, r3]
 8013e24:	e7f7      	b.n	8013e16 <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 8013e26:	2001      	movs	r0, #1
}
 8013e28:	b003      	add	sp, #12
 8013e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8013e2c:	2002      	movs	r0, #2
 8013e2e:	e7fb      	b.n	8013e28 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013e30:	2003      	movs	r0, #3
 8013e32:	e7f9      	b.n	8013e28 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013e34:	2003      	movs	r0, #3
 8013e36:	e7f7      	b.n	8013e28 <HAL_UART_Transmit+0xc4>

08013e38 <UART_CheckIdleState>:
{
 8013e38:	b510      	push	{r4, lr}
 8013e3a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013e40:	6803      	ldr	r3, [r0, #0]
 8013e42:	4a18      	ldr	r2, [pc, #96]	; (8013ea4 <UART_CheckIdleState+0x6c>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d005      	beq.n	8013e54 <UART_CheckIdleState+0x1c>
 8013e48:	4a17      	ldr	r2, [pc, #92]	; (8013ea8 <UART_CheckIdleState+0x70>)
 8013e4a:	4293      	cmp	r3, r2
 8013e4c:	d002      	beq.n	8013e54 <UART_CheckIdleState+0x1c>
 8013e4e:	4a17      	ldr	r2, [pc, #92]	; (8013eac <UART_CheckIdleState+0x74>)
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d106      	bne.n	8013e62 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	071b      	lsls	r3, r3, #28
 8013e58:	d40b      	bmi.n	8013e72 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013e5a:	6823      	ldr	r3, [r4, #0]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	075b      	lsls	r3, r3, #29
 8013e60:	d413      	bmi.n	8013e8a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013e62:	2369      	movs	r3, #105	; 0x69
 8013e64:	2201      	movs	r2, #1
 8013e66:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013e68:	3b01      	subs	r3, #1
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013e6e:	2000      	movs	r0, #0
}
 8013e70:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013e72:	23fa      	movs	r3, #250	; 0xfa
 8013e74:	2180      	movs	r1, #128	; 0x80
 8013e76:	009b      	lsls	r3, r3, #2
 8013e78:	2200      	movs	r2, #0
 8013e7a:	0389      	lsls	r1, r1, #14
 8013e7c:	0020      	movs	r0, r4
 8013e7e:	f7ff ff09 	bl	8013c94 <UART_WaitOnFlagUntilTimeout>
 8013e82:	2800      	cmp	r0, #0
 8013e84:	d0e9      	beq.n	8013e5a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013e86:	2003      	movs	r0, #3
 8013e88:	e7f2      	b.n	8013e70 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013e8a:	23fa      	movs	r3, #250	; 0xfa
 8013e8c:	2180      	movs	r1, #128	; 0x80
 8013e8e:	009b      	lsls	r3, r3, #2
 8013e90:	2200      	movs	r2, #0
 8013e92:	03c9      	lsls	r1, r1, #15
 8013e94:	0020      	movs	r0, r4
 8013e96:	f7ff fefd 	bl	8013c94 <UART_WaitOnFlagUntilTimeout>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d0e1      	beq.n	8013e62 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013e9e:	2003      	movs	r0, #3
 8013ea0:	e7e6      	b.n	8013e70 <UART_CheckIdleState+0x38>
 8013ea2:	46c0      	nop			; (mov r8, r8)
 8013ea4:	40013800 	.word	0x40013800
 8013ea8:	40004400 	.word	0x40004400
 8013eac:	40004800 	.word	0x40004800

08013eb0 <HAL_UART_Init>:
{
 8013eb0:	b510      	push	{r4, lr}
 8013eb2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013eb4:	d030      	beq.n	8013f18 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013eb6:	2369      	movs	r3, #105	; 0x69
 8013eb8:	5cc3      	ldrb	r3, [r0, r3]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d022      	beq.n	8013f04 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013ebe:	2369      	movs	r3, #105	; 0x69
 8013ec0:	2202      	movs	r2, #2
 8013ec2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013ec4:	6822      	ldr	r2, [r4, #0]
 8013ec6:	6813      	ldr	r3, [r2, #0]
 8013ec8:	2101      	movs	r1, #1
 8013eca:	438b      	bics	r3, r1
 8013ecc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013ece:	0020      	movs	r0, r4
 8013ed0:	f7ff fd4c 	bl	801396c <UART_SetConfig>
 8013ed4:	2801      	cmp	r0, #1
 8013ed6:	d014      	beq.n	8013f02 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d118      	bne.n	8013f10 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013ede:	6822      	ldr	r2, [r4, #0]
 8013ee0:	6853      	ldr	r3, [r2, #4]
 8013ee2:	490e      	ldr	r1, [pc, #56]	; (8013f1c <HAL_UART_Init+0x6c>)
 8013ee4:	400b      	ands	r3, r1
 8013ee6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013ee8:	6822      	ldr	r2, [r4, #0]
 8013eea:	6893      	ldr	r3, [r2, #8]
 8013eec:	212a      	movs	r1, #42	; 0x2a
 8013eee:	438b      	bics	r3, r1
 8013ef0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013ef2:	6822      	ldr	r2, [r4, #0]
 8013ef4:	6813      	ldr	r3, [r2, #0]
 8013ef6:	3929      	subs	r1, #41	; 0x29
 8013ef8:	430b      	orrs	r3, r1
 8013efa:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013efc:	0020      	movs	r0, r4
 8013efe:	f7ff ff9b 	bl	8013e38 <UART_CheckIdleState>
}
 8013f02:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013f04:	3368      	adds	r3, #104	; 0x68
 8013f06:	2200      	movs	r2, #0
 8013f08:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013f0a:	f7fa fa93 	bl	800e434 <HAL_UART_MspInit>
 8013f0e:	e7d6      	b.n	8013ebe <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013f10:	0020      	movs	r0, r4
 8013f12:	f7ff fe4f 	bl	8013bb4 <UART_AdvFeatureConfig>
 8013f16:	e7e2      	b.n	8013ede <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013f18:	2001      	movs	r0, #1
 8013f1a:	e7f2      	b.n	8013f02 <HAL_UART_Init+0x52>
 8013f1c:	ffffb7ff 	.word	0xffffb7ff

08013f20 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013f20:	2369      	movs	r3, #105	; 0x69
 8013f22:	5cc3      	ldrb	r3, [r0, r3]
 8013f24:	2b12      	cmp	r3, #18
 8013f26:	d004      	beq.n	8013f32 <UART_Transmit_IT+0x12>
 8013f28:	2369      	movs	r3, #105	; 0x69
 8013f2a:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8013f2c:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013f2e:	2a32      	cmp	r2, #50	; 0x32
 8013f30:	d113      	bne.n	8013f5a <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 8013f32:	2352      	movs	r3, #82	; 0x52
 8013f34:	5ac3      	ldrh	r3, [r0, r3]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d011      	beq.n	8013f5e <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f3a:	2380      	movs	r3, #128	; 0x80
 8013f3c:	015b      	lsls	r3, r3, #5
 8013f3e:	6882      	ldr	r2, [r0, #8]
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d018      	beq.n	8013f76 <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013f44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013f46:	1c5a      	adds	r2, r3, #1
 8013f48:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013f4a:	781b      	ldrb	r3, [r3, #0]
 8013f4c:	6802      	ldr	r2, [r0, #0]
 8013f4e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8013f50:	2252      	movs	r2, #82	; 0x52
 8013f52:	5a83      	ldrh	r3, [r0, r2]
 8013f54:	3b01      	subs	r3, #1
 8013f56:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8013f58:	2300      	movs	r3, #0
  }
}
 8013f5a:	0018      	movs	r0, r3
 8013f5c:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013f5e:	6802      	ldr	r2, [r0, #0]
 8013f60:	6813      	ldr	r3, [r2, #0]
 8013f62:	2180      	movs	r1, #128	; 0x80
 8013f64:	438b      	bics	r3, r1
 8013f66:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013f68:	6802      	ldr	r2, [r0, #0]
 8013f6a:	6813      	ldr	r3, [r2, #0]
 8013f6c:	3940      	subs	r1, #64	; 0x40
 8013f6e:	430b      	orrs	r3, r1
 8013f70:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8013f72:	2300      	movs	r3, #0
 8013f74:	e7f1      	b.n	8013f5a <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f76:	6903      	ldr	r3, [r0, #16]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d1e3      	bne.n	8013f44 <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013f7c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013f7e:	881b      	ldrh	r3, [r3, #0]
 8013f80:	05db      	lsls	r3, r3, #23
 8013f82:	0ddb      	lsrs	r3, r3, #23
 8013f84:	6802      	ldr	r2, [r0, #0]
 8013f86:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013f88:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013f8a:	3302      	adds	r3, #2
 8013f8c:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013f8e:	e7df      	b.n	8013f50 <UART_Transmit_IT+0x30>

08013f90 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013f90:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013f92:	6802      	ldr	r2, [r0, #0]
 8013f94:	6813      	ldr	r3, [r2, #0]
 8013f96:	2140      	movs	r1, #64	; 0x40
 8013f98:	438b      	bics	r3, r1
 8013f9a:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013f9c:	2369      	movs	r3, #105	; 0x69
 8013f9e:	5cc3      	ldrb	r3, [r0, r3]
 8013fa0:	2b32      	cmp	r3, #50	; 0x32
 8013fa2:	d00a      	beq.n	8013fba <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013fa4:	6801      	ldr	r1, [r0, #0]
 8013fa6:	688b      	ldr	r3, [r1, #8]
 8013fa8:	2201      	movs	r2, #1
 8013faa:	4393      	bics	r3, r2
 8013fac:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013fae:	2369      	movs	r3, #105	; 0x69
 8013fb0:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013fb2:	f7f9 ff65 	bl	800de80 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013fb6:	2000      	movs	r0, #0
 8013fb8:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013fba:	3337      	adds	r3, #55	; 0x37
 8013fbc:	2222      	movs	r2, #34	; 0x22
 8013fbe:	54c2      	strb	r2, [r0, r3]
 8013fc0:	e7f7      	b.n	8013fb2 <UART_EndTransmit_IT+0x22>
	...

08013fc4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013fc4:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013fc6:	2369      	movs	r3, #105	; 0x69
 8013fc8:	5cc3      	ldrb	r3, [r0, r3]
 8013fca:	2b22      	cmp	r3, #34	; 0x22
 8013fcc:	d004      	beq.n	8013fd8 <UART_Receive_IT+0x14>
 8013fce:	2369      	movs	r3, #105	; 0x69
 8013fd0:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013fd2:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013fd4:	2b32      	cmp	r3, #50	; 0x32
 8013fd6:	d12d      	bne.n	8014034 <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8013fd8:	235c      	movs	r3, #92	; 0x5c
 8013fda:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013fdc:	2280      	movs	r2, #128	; 0x80
 8013fde:	0152      	lsls	r2, r2, #5
 8013fe0:	6883      	ldr	r3, [r0, #8]
 8013fe2:	4293      	cmp	r3, r2
 8013fe4:	d028      	beq.n	8014038 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013fe6:	6803      	ldr	r3, [r0, #0]
 8013fe8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013fea:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013fec:	1c54      	adds	r4, r2, #1
 8013fee:	6544      	str	r4, [r0, #84]	; 0x54
 8013ff0:	400b      	ands	r3, r1
 8013ff2:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 8013ff4:	225a      	movs	r2, #90	; 0x5a
 8013ff6:	5a83      	ldrh	r3, [r0, r2]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	b29b      	uxth	r3, r3
 8013ffc:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8013ffe:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8014000:	2b00      	cmp	r3, #0
 8014002:	d117      	bne.n	8014034 <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014004:	6802      	ldr	r2, [r0, #0]
 8014006:	6813      	ldr	r3, [r2, #0]
 8014008:	2120      	movs	r1, #32
 801400a:	438b      	bics	r3, r1
 801400c:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 801400e:	2369      	movs	r3, #105	; 0x69
 8014010:	5cc3      	ldrb	r3, [r0, r3]
 8014012:	2b32      	cmp	r3, #50	; 0x32
 8014014:	d01c      	beq.n	8014050 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014016:	6802      	ldr	r2, [r0, #0]
 8014018:	6813      	ldr	r3, [r2, #0]
 801401a:	490f      	ldr	r1, [pc, #60]	; (8014058 <UART_Receive_IT+0x94>)
 801401c:	400b      	ands	r3, r1
 801401e:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014020:	6801      	ldr	r1, [r0, #0]
 8014022:	688b      	ldr	r3, [r1, #8]
 8014024:	2201      	movs	r2, #1
 8014026:	4393      	bics	r3, r2
 8014028:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 801402a:	2369      	movs	r3, #105	; 0x69
 801402c:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 801402e:	f7f9 ff65 	bl	800defc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8014032:	2200      	movs	r2, #0
  }
}
 8014034:	0010      	movs	r0, r2
 8014036:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014038:	6903      	ldr	r3, [r0, #16]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d1d3      	bne.n	8013fe6 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 801403e:	6803      	ldr	r3, [r0, #0]
 8014040:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014042:	400b      	ands	r3, r1
 8014044:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014046:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8014048:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801404a:	3302      	adds	r3, #2
 801404c:	6543      	str	r3, [r0, #84]	; 0x54
 801404e:	e7d1      	b.n	8013ff4 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8014050:	3337      	adds	r3, #55	; 0x37
 8014052:	2212      	movs	r2, #18
 8014054:	54c2      	strb	r2, [r0, r3]
 8014056:	e7ea      	b.n	801402e <UART_Receive_IT+0x6a>
 8014058:	fffffeff 	.word	0xfffffeff

0801405c <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 801405c:	4770      	bx	lr

0801405e <HAL_UART_IRQHandler>:
{
 801405e:	b510      	push	{r4, lr}
 8014060:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8014062:	6803      	ldr	r3, [r0, #0]
 8014064:	69da      	ldr	r2, [r3, #28]
 8014066:	07d2      	lsls	r2, r2, #31
 8014068:	d509      	bpl.n	801407e <HAL_UART_IRQHandler+0x20>
 801406a:	681a      	ldr	r2, [r3, #0]
 801406c:	05d2      	lsls	r2, r2, #23
 801406e:	d506      	bpl.n	801407e <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014070:	2201      	movs	r2, #1
 8014072:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014074:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8014076:	4313      	orrs	r3, r2
 8014078:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801407a:	2369      	movs	r3, #105	; 0x69
 801407c:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801407e:	6823      	ldr	r3, [r4, #0]
 8014080:	69da      	ldr	r2, [r3, #28]
 8014082:	0792      	lsls	r2, r2, #30
 8014084:	d50b      	bpl.n	801409e <HAL_UART_IRQHandler+0x40>
 8014086:	689a      	ldr	r2, [r3, #8]
 8014088:	07d2      	lsls	r2, r2, #31
 801408a:	d508      	bpl.n	801409e <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 801408c:	2202      	movs	r2, #2
 801408e:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014090:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8014092:	3202      	adds	r2, #2
 8014094:	4313      	orrs	r3, r2
 8014096:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014098:	2369      	movs	r3, #105	; 0x69
 801409a:	3a03      	subs	r2, #3
 801409c:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	69da      	ldr	r2, [r3, #28]
 80140a2:	0752      	lsls	r2, r2, #29
 80140a4:	d50b      	bpl.n	80140be <HAL_UART_IRQHandler+0x60>
 80140a6:	689a      	ldr	r2, [r3, #8]
 80140a8:	07d2      	lsls	r2, r2, #31
 80140aa:	d508      	bpl.n	80140be <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80140ac:	2204      	movs	r2, #4
 80140ae:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80140b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80140b2:	3a02      	subs	r2, #2
 80140b4:	4313      	orrs	r3, r2
 80140b6:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80140b8:	2369      	movs	r3, #105	; 0x69
 80140ba:	3a01      	subs	r2, #1
 80140bc:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80140be:	6823      	ldr	r3, [r4, #0]
 80140c0:	69da      	ldr	r2, [r3, #28]
 80140c2:	0712      	lsls	r2, r2, #28
 80140c4:	d50a      	bpl.n	80140dc <HAL_UART_IRQHandler+0x7e>
 80140c6:	689a      	ldr	r2, [r3, #8]
 80140c8:	07d2      	lsls	r2, r2, #31
 80140ca:	d507      	bpl.n	80140dc <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80140cc:	2208      	movs	r2, #8
 80140ce:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80140d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80140d2:	4313      	orrs	r3, r2
 80140d4:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80140d6:	2369      	movs	r3, #105	; 0x69
 80140d8:	3a07      	subs	r2, #7
 80140da:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80140dc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d11c      	bne.n	801411c <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80140e2:	6823      	ldr	r3, [r4, #0]
 80140e4:	69da      	ldr	r2, [r3, #28]
 80140e6:	02d2      	lsls	r2, r2, #11
 80140e8:	d502      	bpl.n	80140f0 <HAL_UART_IRQHandler+0x92>
 80140ea:	689a      	ldr	r2, [r3, #8]
 80140ec:	0252      	lsls	r2, r2, #9
 80140ee:	d419      	bmi.n	8014124 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 80140f0:	6823      	ldr	r3, [r4, #0]
 80140f2:	69da      	ldr	r2, [r3, #28]
 80140f4:	0692      	lsls	r2, r2, #26
 80140f6:	d502      	bpl.n	80140fe <HAL_UART_IRQHandler+0xa0>
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	069b      	lsls	r3, r3, #26
 80140fc:	d41c      	bmi.n	8014138 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 80140fe:	6823      	ldr	r3, [r4, #0]
 8014100:	69da      	ldr	r2, [r3, #28]
 8014102:	0612      	lsls	r2, r2, #24
 8014104:	d502      	bpl.n	801410c <HAL_UART_IRQHandler+0xae>
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	061b      	lsls	r3, r3, #24
 801410a:	d41e      	bmi.n	801414a <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	69da      	ldr	r2, [r3, #28]
 8014110:	0652      	lsls	r2, r2, #25
 8014112:	d502      	bpl.n	801411a <HAL_UART_IRQHandler+0xbc>
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	065b      	lsls	r3, r3, #25
 8014118:	d41b      	bmi.n	8014152 <HAL_UART_IRQHandler+0xf4>
}
 801411a:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 801411c:	0020      	movs	r0, r4
 801411e:	f7f9 fec7 	bl	800deb0 <HAL_UART_ErrorCallback>
 8014122:	e7de      	b.n	80140e2 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8014124:	2280      	movs	r2, #128	; 0x80
 8014126:	0352      	lsls	r2, r2, #13
 8014128:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801412a:	2369      	movs	r3, #105	; 0x69
 801412c:	2201      	movs	r2, #1
 801412e:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014130:	0020      	movs	r0, r4
 8014132:	f7ff ff93 	bl	801405c <HAL_UARTEx_WakeupCallback>
 8014136:	e7db      	b.n	80140f0 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8014138:	0020      	movs	r0, r4
 801413a:	f7ff ff43 	bl	8013fc4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801413e:	6822      	ldr	r2, [r4, #0]
 8014140:	6993      	ldr	r3, [r2, #24]
 8014142:	2108      	movs	r1, #8
 8014144:	430b      	orrs	r3, r1
 8014146:	6193      	str	r3, [r2, #24]
 8014148:	e7d9      	b.n	80140fe <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 801414a:	0020      	movs	r0, r4
 801414c:	f7ff fee8 	bl	8013f20 <UART_Transmit_IT>
 8014150:	e7dc      	b.n	801410c <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8014152:	0020      	movs	r0, r4
 8014154:	f7ff ff1c 	bl	8013f90 <UART_EndTransmit_IT>
}
 8014158:	e7df      	b.n	801411a <HAL_UART_IRQHandler+0xbc>

0801415a <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 801415a:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 801415c:	f7ef fbd8 	bl	8003910 <Module_Init>
 8014160:	e7fe      	b.n	8014160 <main+0x6>

08014162 <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 8014162:	e7fe      	b.n	8014162 <UserTask>

08014164 <atof>:
 8014164:	b510      	push	{r4, lr}
 8014166:	2100      	movs	r1, #0
 8014168:	f001 fb70 	bl	801584c <strtod>
 801416c:	bd10      	pop	{r4, pc}

0801416e <atoi>:
 801416e:	b510      	push	{r4, lr}
 8014170:	220a      	movs	r2, #10
 8014172:	2100      	movs	r1, #0
 8014174:	f001 fc36 	bl	80159e4 <strtol>
 8014178:	bd10      	pop	{r4, pc}

0801417a <atol>:
 801417a:	b510      	push	{r4, lr}
 801417c:	220a      	movs	r2, #10
 801417e:	2100      	movs	r1, #0
 8014180:	f001 fc30 	bl	80159e4 <strtol>
 8014184:	bd10      	pop	{r4, pc}
	...

08014188 <__libc_init_array>:
 8014188:	b570      	push	{r4, r5, r6, lr}
 801418a:	2600      	movs	r6, #0
 801418c:	4d0c      	ldr	r5, [pc, #48]	; (80141c0 <__libc_init_array+0x38>)
 801418e:	4c0d      	ldr	r4, [pc, #52]	; (80141c4 <__libc_init_array+0x3c>)
 8014190:	1b64      	subs	r4, r4, r5
 8014192:	10a4      	asrs	r4, r4, #2
 8014194:	42a6      	cmp	r6, r4
 8014196:	d109      	bne.n	80141ac <__libc_init_array+0x24>
 8014198:	2600      	movs	r6, #0
 801419a:	f004 fe9f 	bl	8018edc <_init>
 801419e:	4d0a      	ldr	r5, [pc, #40]	; (80141c8 <__libc_init_array+0x40>)
 80141a0:	4c0a      	ldr	r4, [pc, #40]	; (80141cc <__libc_init_array+0x44>)
 80141a2:	1b64      	subs	r4, r4, r5
 80141a4:	10a4      	asrs	r4, r4, #2
 80141a6:	42a6      	cmp	r6, r4
 80141a8:	d105      	bne.n	80141b6 <__libc_init_array+0x2e>
 80141aa:	bd70      	pop	{r4, r5, r6, pc}
 80141ac:	00b3      	lsls	r3, r6, #2
 80141ae:	58eb      	ldr	r3, [r5, r3]
 80141b0:	4798      	blx	r3
 80141b2:	3601      	adds	r6, #1
 80141b4:	e7ee      	b.n	8014194 <__libc_init_array+0xc>
 80141b6:	00b3      	lsls	r3, r6, #2
 80141b8:	58eb      	ldr	r3, [r5, r3]
 80141ba:	4798      	blx	r3
 80141bc:	3601      	adds	r6, #1
 80141be:	e7f2      	b.n	80141a6 <__libc_init_array+0x1e>
 80141c0:	0801c254 	.word	0x0801c254
 80141c4:	0801c254 	.word	0x0801c254
 80141c8:	0801c254 	.word	0x0801c254
 80141cc:	0801c25c 	.word	0x0801c25c

080141d0 <__locale_ctype_ptr_l>:
 80141d0:	30ec      	adds	r0, #236	; 0xec
 80141d2:	6800      	ldr	r0, [r0, #0]
 80141d4:	4770      	bx	lr
	...

080141d8 <__locale_ctype_ptr>:
 80141d8:	4b04      	ldr	r3, [pc, #16]	; (80141ec <__locale_ctype_ptr+0x14>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d100      	bne.n	80141e4 <__locale_ctype_ptr+0xc>
 80141e2:	4b03      	ldr	r3, [pc, #12]	; (80141f0 <__locale_ctype_ptr+0x18>)
 80141e4:	33ec      	adds	r3, #236	; 0xec
 80141e6:	6818      	ldr	r0, [r3, #0]
 80141e8:	4770      	bx	lr
 80141ea:	46c0      	nop			; (mov r8, r8)
 80141ec:	20000118 	.word	0x20000118
 80141f0:	20000548 	.word	0x20000548

080141f4 <malloc>:
 80141f4:	b510      	push	{r4, lr}
 80141f6:	4b03      	ldr	r3, [pc, #12]	; (8014204 <malloc+0x10>)
 80141f8:	0001      	movs	r1, r0
 80141fa:	6818      	ldr	r0, [r3, #0]
 80141fc:	f000 f80e 	bl	801421c <_malloc_r>
 8014200:	bd10      	pop	{r4, pc}
 8014202:	46c0      	nop			; (mov r8, r8)
 8014204:	20000118 	.word	0x20000118

08014208 <free>:
 8014208:	b510      	push	{r4, lr}
 801420a:	4b03      	ldr	r3, [pc, #12]	; (8014218 <free+0x10>)
 801420c:	0001      	movs	r1, r0
 801420e:	6818      	ldr	r0, [r3, #0]
 8014210:	f003 fd42 	bl	8017c98 <_free_r>
 8014214:	bd10      	pop	{r4, pc}
 8014216:	46c0      	nop			; (mov r8, r8)
 8014218:	20000118 	.word	0x20000118

0801421c <_malloc_r>:
 801421c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801421e:	000d      	movs	r5, r1
 8014220:	b085      	sub	sp, #20
 8014222:	350b      	adds	r5, #11
 8014224:	9001      	str	r0, [sp, #4]
 8014226:	2d16      	cmp	r5, #22
 8014228:	d908      	bls.n	801423c <_malloc_r+0x20>
 801422a:	2307      	movs	r3, #7
 801422c:	439d      	bics	r5, r3
 801422e:	d506      	bpl.n	801423e <_malloc_r+0x22>
 8014230:	230c      	movs	r3, #12
 8014232:	9a01      	ldr	r2, [sp, #4]
 8014234:	6013      	str	r3, [r2, #0]
 8014236:	2000      	movs	r0, #0
 8014238:	b005      	add	sp, #20
 801423a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801423c:	2510      	movs	r5, #16
 801423e:	428d      	cmp	r5, r1
 8014240:	d3f6      	bcc.n	8014230 <_malloc_r+0x14>
 8014242:	9801      	ldr	r0, [sp, #4]
 8014244:	f000 fa34 	bl	80146b0 <__malloc_lock>
 8014248:	23f8      	movs	r3, #248	; 0xf8
 801424a:	33ff      	adds	r3, #255	; 0xff
 801424c:	4ac4      	ldr	r2, [pc, #784]	; (8014560 <_malloc_r+0x344>)
 801424e:	429d      	cmp	r5, r3
 8014250:	d820      	bhi.n	8014294 <_malloc_r+0x78>
 8014252:	0029      	movs	r1, r5
 8014254:	3108      	adds	r1, #8
 8014256:	1851      	adds	r1, r2, r1
 8014258:	0008      	movs	r0, r1
 801425a:	684c      	ldr	r4, [r1, #4]
 801425c:	3808      	subs	r0, #8
 801425e:	08eb      	lsrs	r3, r5, #3
 8014260:	4284      	cmp	r4, r0
 8014262:	d104      	bne.n	801426e <_malloc_r+0x52>
 8014264:	68cc      	ldr	r4, [r1, #12]
 8014266:	3302      	adds	r3, #2
 8014268:	469c      	mov	ip, r3
 801426a:	42a1      	cmp	r1, r4
 801426c:	d02a      	beq.n	80142c4 <_malloc_r+0xa8>
 801426e:	2303      	movs	r3, #3
 8014270:	6862      	ldr	r2, [r4, #4]
 8014272:	68a1      	ldr	r1, [r4, #8]
 8014274:	439a      	bics	r2, r3
 8014276:	0013      	movs	r3, r2
 8014278:	68e2      	ldr	r2, [r4, #12]
 801427a:	18e3      	adds	r3, r4, r3
 801427c:	60ca      	str	r2, [r1, #12]
 801427e:	6091      	str	r1, [r2, #8]
 8014280:	2201      	movs	r2, #1
 8014282:	6859      	ldr	r1, [r3, #4]
 8014284:	430a      	orrs	r2, r1
 8014286:	605a      	str	r2, [r3, #4]
 8014288:	9801      	ldr	r0, [sp, #4]
 801428a:	f000 fa19 	bl	80146c0 <__malloc_unlock>
 801428e:	0020      	movs	r0, r4
 8014290:	3008      	adds	r0, #8
 8014292:	e7d1      	b.n	8014238 <_malloc_r+0x1c>
 8014294:	0a69      	lsrs	r1, r5, #9
 8014296:	233f      	movs	r3, #63	; 0x3f
 8014298:	2900      	cmp	r1, #0
 801429a:	d003      	beq.n	80142a4 <_malloc_r+0x88>
 801429c:	2904      	cmp	r1, #4
 801429e:	d828      	bhi.n	80142f2 <_malloc_r+0xd6>
 80142a0:	09ab      	lsrs	r3, r5, #6
 80142a2:	3338      	adds	r3, #56	; 0x38
 80142a4:	2103      	movs	r1, #3
 80142a6:	468c      	mov	ip, r1
 80142a8:	00d8      	lsls	r0, r3, #3
 80142aa:	1880      	adds	r0, r0, r2
 80142ac:	68c4      	ldr	r4, [r0, #12]
 80142ae:	4284      	cmp	r4, r0
 80142b0:	d006      	beq.n	80142c0 <_malloc_r+0xa4>
 80142b2:	4666      	mov	r6, ip
 80142b4:	6861      	ldr	r1, [r4, #4]
 80142b6:	43b1      	bics	r1, r6
 80142b8:	1b4f      	subs	r7, r1, r5
 80142ba:	2f0f      	cmp	r7, #15
 80142bc:	dd31      	ble.n	8014322 <_malloc_r+0x106>
 80142be:	3b01      	subs	r3, #1
 80142c0:	3301      	adds	r3, #1
 80142c2:	469c      	mov	ip, r3
 80142c4:	6914      	ldr	r4, [r2, #16]
 80142c6:	49a7      	ldr	r1, [pc, #668]	; (8014564 <_malloc_r+0x348>)
 80142c8:	428c      	cmp	r4, r1
 80142ca:	d055      	beq.n	8014378 <_malloc_r+0x15c>
 80142cc:	2303      	movs	r3, #3
 80142ce:	6860      	ldr	r0, [r4, #4]
 80142d0:	4398      	bics	r0, r3
 80142d2:	0003      	movs	r3, r0
 80142d4:	1b46      	subs	r6, r0, r5
 80142d6:	2e0f      	cmp	r6, #15
 80142d8:	dd31      	ble.n	801433e <_malloc_r+0x122>
 80142da:	2701      	movs	r7, #1
 80142dc:	1960      	adds	r0, r4, r5
 80142de:	433d      	orrs	r5, r7
 80142e0:	4337      	orrs	r7, r6
 80142e2:	6065      	str	r5, [r4, #4]
 80142e4:	6150      	str	r0, [r2, #20]
 80142e6:	6110      	str	r0, [r2, #16]
 80142e8:	60c1      	str	r1, [r0, #12]
 80142ea:	6081      	str	r1, [r0, #8]
 80142ec:	6047      	str	r7, [r0, #4]
 80142ee:	50e6      	str	r6, [r4, r3]
 80142f0:	e7ca      	b.n	8014288 <_malloc_r+0x6c>
 80142f2:	2914      	cmp	r1, #20
 80142f4:	d802      	bhi.n	80142fc <_malloc_r+0xe0>
 80142f6:	000b      	movs	r3, r1
 80142f8:	335b      	adds	r3, #91	; 0x5b
 80142fa:	e7d3      	b.n	80142a4 <_malloc_r+0x88>
 80142fc:	2954      	cmp	r1, #84	; 0x54
 80142fe:	d802      	bhi.n	8014306 <_malloc_r+0xea>
 8014300:	0b2b      	lsrs	r3, r5, #12
 8014302:	336e      	adds	r3, #110	; 0x6e
 8014304:	e7ce      	b.n	80142a4 <_malloc_r+0x88>
 8014306:	23aa      	movs	r3, #170	; 0xaa
 8014308:	005b      	lsls	r3, r3, #1
 801430a:	4299      	cmp	r1, r3
 801430c:	d802      	bhi.n	8014314 <_malloc_r+0xf8>
 801430e:	0beb      	lsrs	r3, r5, #15
 8014310:	3377      	adds	r3, #119	; 0x77
 8014312:	e7c7      	b.n	80142a4 <_malloc_r+0x88>
 8014314:	4894      	ldr	r0, [pc, #592]	; (8014568 <_malloc_r+0x34c>)
 8014316:	237e      	movs	r3, #126	; 0x7e
 8014318:	4281      	cmp	r1, r0
 801431a:	d8c3      	bhi.n	80142a4 <_malloc_r+0x88>
 801431c:	0cab      	lsrs	r3, r5, #18
 801431e:	337c      	adds	r3, #124	; 0x7c
 8014320:	e7c0      	b.n	80142a4 <_malloc_r+0x88>
 8014322:	68e6      	ldr	r6, [r4, #12]
 8014324:	2f00      	cmp	r7, #0
 8014326:	db08      	blt.n	801433a <_malloc_r+0x11e>
 8014328:	68a3      	ldr	r3, [r4, #8]
 801432a:	1861      	adds	r1, r4, r1
 801432c:	60de      	str	r6, [r3, #12]
 801432e:	60b3      	str	r3, [r6, #8]
 8014330:	2301      	movs	r3, #1
 8014332:	684a      	ldr	r2, [r1, #4]
 8014334:	4313      	orrs	r3, r2
 8014336:	604b      	str	r3, [r1, #4]
 8014338:	e7a6      	b.n	8014288 <_malloc_r+0x6c>
 801433a:	0034      	movs	r4, r6
 801433c:	e7b7      	b.n	80142ae <_malloc_r+0x92>
 801433e:	6151      	str	r1, [r2, #20]
 8014340:	6111      	str	r1, [r2, #16]
 8014342:	2e00      	cmp	r6, #0
 8014344:	db05      	blt.n	8014352 <_malloc_r+0x136>
 8014346:	2101      	movs	r1, #1
 8014348:	1823      	adds	r3, r4, r0
 801434a:	685a      	ldr	r2, [r3, #4]
 801434c:	4311      	orrs	r1, r2
 801434e:	6059      	str	r1, [r3, #4]
 8014350:	e79a      	b.n	8014288 <_malloc_r+0x6c>
 8014352:	4986      	ldr	r1, [pc, #536]	; (801456c <_malloc_r+0x350>)
 8014354:	6857      	ldr	r7, [r2, #4]
 8014356:	4288      	cmp	r0, r1
 8014358:	d900      	bls.n	801435c <_malloc_r+0x140>
 801435a:	e090      	b.n	801447e <_malloc_r+0x262>
 801435c:	08c3      	lsrs	r3, r0, #3
 801435e:	39ff      	subs	r1, #255	; 0xff
 8014360:	1098      	asrs	r0, r3, #2
 8014362:	39ff      	subs	r1, #255	; 0xff
 8014364:	4081      	lsls	r1, r0
 8014366:	00db      	lsls	r3, r3, #3
 8014368:	4339      	orrs	r1, r7
 801436a:	6051      	str	r1, [r2, #4]
 801436c:	189a      	adds	r2, r3, r2
 801436e:	6893      	ldr	r3, [r2, #8]
 8014370:	60e2      	str	r2, [r4, #12]
 8014372:	60a3      	str	r3, [r4, #8]
 8014374:	6094      	str	r4, [r2, #8]
 8014376:	60dc      	str	r4, [r3, #12]
 8014378:	4663      	mov	r3, ip
 801437a:	2201      	movs	r2, #1
 801437c:	4978      	ldr	r1, [pc, #480]	; (8014560 <_malloc_r+0x344>)
 801437e:	109b      	asrs	r3, r3, #2
 8014380:	6848      	ldr	r0, [r1, #4]
 8014382:	409a      	lsls	r2, r3
 8014384:	4290      	cmp	r0, r2
 8014386:	d32d      	bcc.n	80143e4 <_malloc_r+0x1c8>
 8014388:	4202      	tst	r2, r0
 801438a:	d109      	bne.n	80143a0 <_malloc_r+0x184>
 801438c:	2303      	movs	r3, #3
 801438e:	4664      	mov	r4, ip
 8014390:	439c      	bics	r4, r3
 8014392:	0023      	movs	r3, r4
 8014394:	3304      	adds	r3, #4
 8014396:	469c      	mov	ip, r3
 8014398:	0052      	lsls	r2, r2, #1
 801439a:	4202      	tst	r2, r0
 801439c:	d100      	bne.n	80143a0 <_malloc_r+0x184>
 801439e:	e0a4      	b.n	80144ea <_malloc_r+0x2ce>
 80143a0:	4663      	mov	r3, ip
 80143a2:	00db      	lsls	r3, r3, #3
 80143a4:	18cb      	adds	r3, r1, r3
 80143a6:	9303      	str	r3, [sp, #12]
 80143a8:	001f      	movs	r7, r3
 80143aa:	4663      	mov	r3, ip
 80143ac:	9302      	str	r3, [sp, #8]
 80143ae:	68fc      	ldr	r4, [r7, #12]
 80143b0:	42bc      	cmp	r4, r7
 80143b2:	d000      	beq.n	80143b6 <_malloc_r+0x19a>
 80143b4:	e09c      	b.n	80144f0 <_malloc_r+0x2d4>
 80143b6:	2003      	movs	r0, #3
 80143b8:	9b02      	ldr	r3, [sp, #8]
 80143ba:	3708      	adds	r7, #8
 80143bc:	3301      	adds	r3, #1
 80143be:	9302      	str	r3, [sp, #8]
 80143c0:	4203      	tst	r3, r0
 80143c2:	d1f4      	bne.n	80143ae <_malloc_r+0x192>
 80143c4:	4663      	mov	r3, ip
 80143c6:	2003      	movs	r0, #3
 80143c8:	4203      	tst	r3, r0
 80143ca:	d000      	beq.n	80143ce <_malloc_r+0x1b2>
 80143cc:	e0b3      	b.n	8014536 <_malloc_r+0x31a>
 80143ce:	684b      	ldr	r3, [r1, #4]
 80143d0:	4393      	bics	r3, r2
 80143d2:	604b      	str	r3, [r1, #4]
 80143d4:	4b62      	ldr	r3, [pc, #392]	; (8014560 <_malloc_r+0x344>)
 80143d6:	0052      	lsls	r2, r2, #1
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	4293      	cmp	r3, r2
 80143dc:	d302      	bcc.n	80143e4 <_malloc_r+0x1c8>
 80143de:	2a00      	cmp	r2, #0
 80143e0:	d000      	beq.n	80143e4 <_malloc_r+0x1c8>
 80143e2:	e0b9      	b.n	8014558 <_malloc_r+0x33c>
 80143e4:	2303      	movs	r3, #3
 80143e6:	688f      	ldr	r7, [r1, #8]
 80143e8:	687a      	ldr	r2, [r7, #4]
 80143ea:	439a      	bics	r2, r3
 80143ec:	9202      	str	r2, [sp, #8]
 80143ee:	42aa      	cmp	r2, r5
 80143f0:	d303      	bcc.n	80143fa <_malloc_r+0x1de>
 80143f2:	1b52      	subs	r2, r2, r5
 80143f4:	2a0f      	cmp	r2, #15
 80143f6:	dd00      	ble.n	80143fa <_malloc_r+0x1de>
 80143f8:	e116      	b.n	8014628 <_malloc_r+0x40c>
 80143fa:	4b5d      	ldr	r3, [pc, #372]	; (8014570 <_malloc_r+0x354>)
 80143fc:	2008      	movs	r0, #8
 80143fe:	681e      	ldr	r6, [r3, #0]
 8014400:	f002 fd58 	bl	8016eb4 <sysconf>
 8014404:	4b5b      	ldr	r3, [pc, #364]	; (8014574 <_malloc_r+0x358>)
 8014406:	3610      	adds	r6, #16
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	1976      	adds	r6, r6, r5
 801440c:	9003      	str	r0, [sp, #12]
 801440e:	3301      	adds	r3, #1
 8014410:	d003      	beq.n	801441a <_malloc_r+0x1fe>
 8014412:	3e01      	subs	r6, #1
 8014414:	1836      	adds	r6, r6, r0
 8014416:	4243      	negs	r3, r0
 8014418:	401e      	ands	r6, r3
 801441a:	0031      	movs	r1, r6
 801441c:	9801      	ldr	r0, [sp, #4]
 801441e:	f000 fb27 	bl	8014a70 <_sbrk_r>
 8014422:	0004      	movs	r4, r0
 8014424:	1c43      	adds	r3, r0, #1
 8014426:	d100      	bne.n	801442a <_malloc_r+0x20e>
 8014428:	e0d6      	b.n	80145d8 <_malloc_r+0x3bc>
 801442a:	9b02      	ldr	r3, [sp, #8]
 801442c:	18fb      	adds	r3, r7, r3
 801442e:	4283      	cmp	r3, r0
 8014430:	d903      	bls.n	801443a <_malloc_r+0x21e>
 8014432:	4a4b      	ldr	r2, [pc, #300]	; (8014560 <_malloc_r+0x344>)
 8014434:	4297      	cmp	r7, r2
 8014436:	d000      	beq.n	801443a <_malloc_r+0x21e>
 8014438:	e0ce      	b.n	80145d8 <_malloc_r+0x3bc>
 801443a:	494f      	ldr	r1, [pc, #316]	; (8014578 <_malloc_r+0x35c>)
 801443c:	680a      	ldr	r2, [r1, #0]
 801443e:	18b2      	adds	r2, r6, r2
 8014440:	600a      	str	r2, [r1, #0]
 8014442:	9903      	ldr	r1, [sp, #12]
 8014444:	4694      	mov	ip, r2
 8014446:	1e48      	subs	r0, r1, #1
 8014448:	42a3      	cmp	r3, r4
 801444a:	d000      	beq.n	801444e <_malloc_r+0x232>
 801444c:	e09a      	b.n	8014584 <_malloc_r+0x368>
 801444e:	4203      	tst	r3, r0
 8014450:	d000      	beq.n	8014454 <_malloc_r+0x238>
 8014452:	e097      	b.n	8014584 <_malloc_r+0x368>
 8014454:	9a02      	ldr	r2, [sp, #8]
 8014456:	4b42      	ldr	r3, [pc, #264]	; (8014560 <_malloc_r+0x344>)
 8014458:	1992      	adds	r2, r2, r6
 801445a:	2601      	movs	r6, #1
 801445c:	689b      	ldr	r3, [r3, #8]
 801445e:	4316      	orrs	r6, r2
 8014460:	605e      	str	r6, [r3, #4]
 8014462:	4b45      	ldr	r3, [pc, #276]	; (8014578 <_malloc_r+0x35c>)
 8014464:	4a45      	ldr	r2, [pc, #276]	; (801457c <_malloc_r+0x360>)
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	6811      	ldr	r1, [r2, #0]
 801446a:	428b      	cmp	r3, r1
 801446c:	d900      	bls.n	8014470 <_malloc_r+0x254>
 801446e:	6013      	str	r3, [r2, #0]
 8014470:	4a43      	ldr	r2, [pc, #268]	; (8014580 <_malloc_r+0x364>)
 8014472:	6811      	ldr	r1, [r2, #0]
 8014474:	428b      	cmp	r3, r1
 8014476:	d800      	bhi.n	801447a <_malloc_r+0x25e>
 8014478:	e0ae      	b.n	80145d8 <_malloc_r+0x3bc>
 801447a:	6013      	str	r3, [r2, #0]
 801447c:	e0ac      	b.n	80145d8 <_malloc_r+0x3bc>
 801447e:	0a40      	lsrs	r0, r0, #9
 8014480:	2804      	cmp	r0, #4
 8014482:	d810      	bhi.n	80144a6 <_malloc_r+0x28a>
 8014484:	0999      	lsrs	r1, r3, #6
 8014486:	3138      	adds	r1, #56	; 0x38
 8014488:	00ce      	lsls	r6, r1, #3
 801448a:	18b6      	adds	r6, r6, r2
 801448c:	68b0      	ldr	r0, [r6, #8]
 801448e:	4286      	cmp	r6, r0
 8014490:	d124      	bne.n	80144dc <_malloc_r+0x2c0>
 8014492:	2301      	movs	r3, #1
 8014494:	1089      	asrs	r1, r1, #2
 8014496:	408b      	lsls	r3, r1
 8014498:	433b      	orrs	r3, r7
 801449a:	6053      	str	r3, [r2, #4]
 801449c:	60e6      	str	r6, [r4, #12]
 801449e:	60a0      	str	r0, [r4, #8]
 80144a0:	60b4      	str	r4, [r6, #8]
 80144a2:	60c4      	str	r4, [r0, #12]
 80144a4:	e768      	b.n	8014378 <_malloc_r+0x15c>
 80144a6:	2814      	cmp	r0, #20
 80144a8:	d802      	bhi.n	80144b0 <_malloc_r+0x294>
 80144aa:	0001      	movs	r1, r0
 80144ac:	315b      	adds	r1, #91	; 0x5b
 80144ae:	e7eb      	b.n	8014488 <_malloc_r+0x26c>
 80144b0:	2854      	cmp	r0, #84	; 0x54
 80144b2:	d802      	bhi.n	80144ba <_malloc_r+0x29e>
 80144b4:	0b19      	lsrs	r1, r3, #12
 80144b6:	316e      	adds	r1, #110	; 0x6e
 80144b8:	e7e6      	b.n	8014488 <_malloc_r+0x26c>
 80144ba:	21aa      	movs	r1, #170	; 0xaa
 80144bc:	0049      	lsls	r1, r1, #1
 80144be:	4288      	cmp	r0, r1
 80144c0:	d802      	bhi.n	80144c8 <_malloc_r+0x2ac>
 80144c2:	0bd9      	lsrs	r1, r3, #15
 80144c4:	3177      	adds	r1, #119	; 0x77
 80144c6:	e7df      	b.n	8014488 <_malloc_r+0x26c>
 80144c8:	4e27      	ldr	r6, [pc, #156]	; (8014568 <_malloc_r+0x34c>)
 80144ca:	217e      	movs	r1, #126	; 0x7e
 80144cc:	42b0      	cmp	r0, r6
 80144ce:	d8db      	bhi.n	8014488 <_malloc_r+0x26c>
 80144d0:	0c99      	lsrs	r1, r3, #18
 80144d2:	317c      	adds	r1, #124	; 0x7c
 80144d4:	e7d8      	b.n	8014488 <_malloc_r+0x26c>
 80144d6:	6880      	ldr	r0, [r0, #8]
 80144d8:	4286      	cmp	r6, r0
 80144da:	d004      	beq.n	80144e6 <_malloc_r+0x2ca>
 80144dc:	2103      	movs	r1, #3
 80144de:	6842      	ldr	r2, [r0, #4]
 80144e0:	438a      	bics	r2, r1
 80144e2:	429a      	cmp	r2, r3
 80144e4:	d8f7      	bhi.n	80144d6 <_malloc_r+0x2ba>
 80144e6:	68c6      	ldr	r6, [r0, #12]
 80144e8:	e7d8      	b.n	801449c <_malloc_r+0x280>
 80144ea:	2304      	movs	r3, #4
 80144ec:	449c      	add	ip, r3
 80144ee:	e753      	b.n	8014398 <_malloc_r+0x17c>
 80144f0:	2003      	movs	r0, #3
 80144f2:	6863      	ldr	r3, [r4, #4]
 80144f4:	4383      	bics	r3, r0
 80144f6:	1b5e      	subs	r6, r3, r5
 80144f8:	68e0      	ldr	r0, [r4, #12]
 80144fa:	2e0f      	cmp	r6, #15
 80144fc:	dd0e      	ble.n	801451c <_malloc_r+0x300>
 80144fe:	2701      	movs	r7, #1
 8014500:	1962      	adds	r2, r4, r5
 8014502:	433d      	orrs	r5, r7
 8014504:	6065      	str	r5, [r4, #4]
 8014506:	68a5      	ldr	r5, [r4, #8]
 8014508:	4337      	orrs	r7, r6
 801450a:	60e8      	str	r0, [r5, #12]
 801450c:	6085      	str	r5, [r0, #8]
 801450e:	614a      	str	r2, [r1, #20]
 8014510:	610a      	str	r2, [r1, #16]
 8014512:	4914      	ldr	r1, [pc, #80]	; (8014564 <_malloc_r+0x348>)
 8014514:	6057      	str	r7, [r2, #4]
 8014516:	60d1      	str	r1, [r2, #12]
 8014518:	6091      	str	r1, [r2, #8]
 801451a:	e6e8      	b.n	80142ee <_malloc_r+0xd2>
 801451c:	2e00      	cmp	r6, #0
 801451e:	db08      	blt.n	8014532 <_malloc_r+0x316>
 8014520:	2201      	movs	r2, #1
 8014522:	18e3      	adds	r3, r4, r3
 8014524:	6859      	ldr	r1, [r3, #4]
 8014526:	430a      	orrs	r2, r1
 8014528:	605a      	str	r2, [r3, #4]
 801452a:	68a3      	ldr	r3, [r4, #8]
 801452c:	60d8      	str	r0, [r3, #12]
 801452e:	6083      	str	r3, [r0, #8]
 8014530:	e6aa      	b.n	8014288 <_malloc_r+0x6c>
 8014532:	0004      	movs	r4, r0
 8014534:	e73c      	b.n	80143b0 <_malloc_r+0x194>
 8014536:	2301      	movs	r3, #1
 8014538:	425b      	negs	r3, r3
 801453a:	449c      	add	ip, r3
 801453c:	9b03      	ldr	r3, [sp, #12]
 801453e:	6818      	ldr	r0, [r3, #0]
 8014540:	3b08      	subs	r3, #8
 8014542:	9003      	str	r0, [sp, #12]
 8014544:	4298      	cmp	r0, r3
 8014546:	d100      	bne.n	801454a <_malloc_r+0x32e>
 8014548:	e73c      	b.n	80143c4 <_malloc_r+0x1a8>
 801454a:	e743      	b.n	80143d4 <_malloc_r+0x1b8>
 801454c:	2004      	movs	r0, #4
 801454e:	0052      	lsls	r2, r2, #1
 8014550:	4484      	add	ip, r0
 8014552:	421a      	tst	r2, r3
 8014554:	d0fa      	beq.n	801454c <_malloc_r+0x330>
 8014556:	e723      	b.n	80143a0 <_malloc_r+0x184>
 8014558:	9802      	ldr	r0, [sp, #8]
 801455a:	4684      	mov	ip, r0
 801455c:	e7f9      	b.n	8014552 <_malloc_r+0x336>
 801455e:	46c0      	nop			; (mov r8, r8)
 8014560:	200006b4 	.word	0x200006b4
 8014564:	200006bc 	.word	0x200006bc
 8014568:	00000554 	.word	0x00000554
 801456c:	000001ff 	.word	0x000001ff
 8014570:	20006dc4 	.word	0x20006dc4
 8014574:	20000abc 	.word	0x20000abc
 8014578:	20006d94 	.word	0x20006d94
 801457c:	20006dbc 	.word	0x20006dbc
 8014580:	20006dc0 	.word	0x20006dc0
 8014584:	492e      	ldr	r1, [pc, #184]	; (8014640 <_malloc_r+0x424>)
 8014586:	680a      	ldr	r2, [r1, #0]
 8014588:	3201      	adds	r2, #1
 801458a:	d133      	bne.n	80145f4 <_malloc_r+0x3d8>
 801458c:	600c      	str	r4, [r1, #0]
 801458e:	2307      	movs	r3, #7
 8014590:	4023      	ands	r3, r4
 8014592:	d002      	beq.n	801459a <_malloc_r+0x37e>
 8014594:	2208      	movs	r2, #8
 8014596:	1ad3      	subs	r3, r2, r3
 8014598:	18e4      	adds	r4, r4, r3
 801459a:	9a03      	ldr	r2, [sp, #12]
 801459c:	19a6      	adds	r6, r4, r6
 801459e:	18d3      	adds	r3, r2, r3
 80145a0:	4006      	ands	r6, r0
 80145a2:	1b9e      	subs	r6, r3, r6
 80145a4:	0031      	movs	r1, r6
 80145a6:	9801      	ldr	r0, [sp, #4]
 80145a8:	f000 fa62 	bl	8014a70 <_sbrk_r>
 80145ac:	1c43      	adds	r3, r0, #1
 80145ae:	d101      	bne.n	80145b4 <_malloc_r+0x398>
 80145b0:	0020      	movs	r0, r4
 80145b2:	2600      	movs	r6, #0
 80145b4:	4a23      	ldr	r2, [pc, #140]	; (8014644 <_malloc_r+0x428>)
 80145b6:	1b00      	subs	r0, r0, r4
 80145b8:	6813      	ldr	r3, [r2, #0]
 80145ba:	199b      	adds	r3, r3, r6
 80145bc:	6013      	str	r3, [r2, #0]
 80145be:	2301      	movs	r3, #1
 80145c0:	4a21      	ldr	r2, [pc, #132]	; (8014648 <_malloc_r+0x42c>)
 80145c2:	1986      	adds	r6, r0, r6
 80145c4:	431e      	orrs	r6, r3
 80145c6:	6094      	str	r4, [r2, #8]
 80145c8:	6066      	str	r6, [r4, #4]
 80145ca:	4297      	cmp	r7, r2
 80145cc:	d100      	bne.n	80145d0 <_malloc_r+0x3b4>
 80145ce:	e748      	b.n	8014462 <_malloc_r+0x246>
 80145d0:	9a02      	ldr	r2, [sp, #8]
 80145d2:	2a0f      	cmp	r2, #15
 80145d4:	d813      	bhi.n	80145fe <_malloc_r+0x3e2>
 80145d6:	6063      	str	r3, [r4, #4]
 80145d8:	2203      	movs	r2, #3
 80145da:	4b1b      	ldr	r3, [pc, #108]	; (8014648 <_malloc_r+0x42c>)
 80145dc:	689b      	ldr	r3, [r3, #8]
 80145de:	685b      	ldr	r3, [r3, #4]
 80145e0:	4393      	bics	r3, r2
 80145e2:	1b5a      	subs	r2, r3, r5
 80145e4:	42ab      	cmp	r3, r5
 80145e6:	d301      	bcc.n	80145ec <_malloc_r+0x3d0>
 80145e8:	2a0f      	cmp	r2, #15
 80145ea:	dc1d      	bgt.n	8014628 <_malloc_r+0x40c>
 80145ec:	9801      	ldr	r0, [sp, #4]
 80145ee:	f000 f867 	bl	80146c0 <__malloc_unlock>
 80145f2:	e620      	b.n	8014236 <_malloc_r+0x1a>
 80145f4:	1ae3      	subs	r3, r4, r3
 80145f6:	4a13      	ldr	r2, [pc, #76]	; (8014644 <_malloc_r+0x428>)
 80145f8:	4463      	add	r3, ip
 80145fa:	6013      	str	r3, [r2, #0]
 80145fc:	e7c7      	b.n	801458e <_malloc_r+0x372>
 80145fe:	2207      	movs	r2, #7
 8014600:	9e02      	ldr	r6, [sp, #8]
 8014602:	3e0c      	subs	r6, #12
 8014604:	4396      	bics	r6, r2
 8014606:	687a      	ldr	r2, [r7, #4]
 8014608:	4013      	ands	r3, r2
 801460a:	2205      	movs	r2, #5
 801460c:	4333      	orrs	r3, r6
 801460e:	607b      	str	r3, [r7, #4]
 8014610:	19bb      	adds	r3, r7, r6
 8014612:	605a      	str	r2, [r3, #4]
 8014614:	609a      	str	r2, [r3, #8]
 8014616:	2e0f      	cmp	r6, #15
 8014618:	d800      	bhi.n	801461c <_malloc_r+0x400>
 801461a:	e722      	b.n	8014462 <_malloc_r+0x246>
 801461c:	0039      	movs	r1, r7
 801461e:	9801      	ldr	r0, [sp, #4]
 8014620:	3108      	adds	r1, #8
 8014622:	f003 fb39 	bl	8017c98 <_free_r>
 8014626:	e71c      	b.n	8014462 <_malloc_r+0x246>
 8014628:	2301      	movs	r3, #1
 801462a:	0018      	movs	r0, r3
 801462c:	4906      	ldr	r1, [pc, #24]	; (8014648 <_malloc_r+0x42c>)
 801462e:	4328      	orrs	r0, r5
 8014630:	688c      	ldr	r4, [r1, #8]
 8014632:	4313      	orrs	r3, r2
 8014634:	1965      	adds	r5, r4, r5
 8014636:	6060      	str	r0, [r4, #4]
 8014638:	608d      	str	r5, [r1, #8]
 801463a:	606b      	str	r3, [r5, #4]
 801463c:	e624      	b.n	8014288 <_malloc_r+0x6c>
 801463e:	46c0      	nop			; (mov r8, r8)
 8014640:	20000abc 	.word	0x20000abc
 8014644:	20006d94 	.word	0x20006d94
 8014648:	200006b4 	.word	0x200006b4

0801464c <__ascii_mbtowc>:
 801464c:	b082      	sub	sp, #8
 801464e:	2900      	cmp	r1, #0
 8014650:	d100      	bne.n	8014654 <__ascii_mbtowc+0x8>
 8014652:	a901      	add	r1, sp, #4
 8014654:	1e10      	subs	r0, r2, #0
 8014656:	d006      	beq.n	8014666 <__ascii_mbtowc+0x1a>
 8014658:	2b00      	cmp	r3, #0
 801465a:	d006      	beq.n	801466a <__ascii_mbtowc+0x1e>
 801465c:	7813      	ldrb	r3, [r2, #0]
 801465e:	600b      	str	r3, [r1, #0]
 8014660:	7810      	ldrb	r0, [r2, #0]
 8014662:	1e43      	subs	r3, r0, #1
 8014664:	4198      	sbcs	r0, r3
 8014666:	b002      	add	sp, #8
 8014668:	4770      	bx	lr
 801466a:	2002      	movs	r0, #2
 801466c:	4240      	negs	r0, r0
 801466e:	e7fa      	b.n	8014666 <__ascii_mbtowc+0x1a>

08014670 <memcmp>:
 8014670:	b530      	push	{r4, r5, lr}
 8014672:	2400      	movs	r4, #0
 8014674:	42a2      	cmp	r2, r4
 8014676:	d101      	bne.n	801467c <memcmp+0xc>
 8014678:	2000      	movs	r0, #0
 801467a:	e005      	b.n	8014688 <memcmp+0x18>
 801467c:	5d03      	ldrb	r3, [r0, r4]
 801467e:	1c65      	adds	r5, r4, #1
 8014680:	5d0c      	ldrb	r4, [r1, r4]
 8014682:	42a3      	cmp	r3, r4
 8014684:	d001      	beq.n	801468a <memcmp+0x1a>
 8014686:	1b18      	subs	r0, r3, r4
 8014688:	bd30      	pop	{r4, r5, pc}
 801468a:	002c      	movs	r4, r5
 801468c:	e7f2      	b.n	8014674 <memcmp+0x4>

0801468e <memcpy>:
 801468e:	2300      	movs	r3, #0
 8014690:	b510      	push	{r4, lr}
 8014692:	429a      	cmp	r2, r3
 8014694:	d100      	bne.n	8014698 <memcpy+0xa>
 8014696:	bd10      	pop	{r4, pc}
 8014698:	5ccc      	ldrb	r4, [r1, r3]
 801469a:	54c4      	strb	r4, [r0, r3]
 801469c:	3301      	adds	r3, #1
 801469e:	e7f8      	b.n	8014692 <memcpy+0x4>

080146a0 <memset>:
 80146a0:	0003      	movs	r3, r0
 80146a2:	1812      	adds	r2, r2, r0
 80146a4:	4293      	cmp	r3, r2
 80146a6:	d100      	bne.n	80146aa <memset+0xa>
 80146a8:	4770      	bx	lr
 80146aa:	7019      	strb	r1, [r3, #0]
 80146ac:	3301      	adds	r3, #1
 80146ae:	e7f9      	b.n	80146a4 <memset+0x4>

080146b0 <__malloc_lock>:
 80146b0:	b510      	push	{r4, lr}
 80146b2:	4802      	ldr	r0, [pc, #8]	; (80146bc <__malloc_lock+0xc>)
 80146b4:	f003 fee4 	bl	8018480 <__retarget_lock_acquire_recursive>
 80146b8:	bd10      	pop	{r4, pc}
 80146ba:	46c0      	nop			; (mov r8, r8)
 80146bc:	200073f4 	.word	0x200073f4

080146c0 <__malloc_unlock>:
 80146c0:	b510      	push	{r4, lr}
 80146c2:	4802      	ldr	r0, [pc, #8]	; (80146cc <__malloc_unlock+0xc>)
 80146c4:	f003 fedd 	bl	8018482 <__retarget_lock_release_recursive>
 80146c8:	bd10      	pop	{r4, pc}
 80146ca:	46c0      	nop			; (mov r8, r8)
 80146cc:	200073f4 	.word	0x200073f4

080146d0 <rand>:
 80146d0:	4b09      	ldr	r3, [pc, #36]	; (80146f8 <rand+0x28>)
 80146d2:	b510      	push	{r4, lr}
 80146d4:	681c      	ldr	r4, [r3, #0]
 80146d6:	4a09      	ldr	r2, [pc, #36]	; (80146fc <rand+0x2c>)
 80146d8:	34a8      	adds	r4, #168	; 0xa8
 80146da:	6820      	ldr	r0, [r4, #0]
 80146dc:	6861      	ldr	r1, [r4, #4]
 80146de:	4b08      	ldr	r3, [pc, #32]	; (8014700 <rand+0x30>)
 80146e0:	f7eb ff44 	bl	800056c <__aeabi_lmul>
 80146e4:	2201      	movs	r2, #1
 80146e6:	2300      	movs	r3, #0
 80146e8:	1880      	adds	r0, r0, r2
 80146ea:	4159      	adcs	r1, r3
 80146ec:	6020      	str	r0, [r4, #0]
 80146ee:	6061      	str	r1, [r4, #4]
 80146f0:	0048      	lsls	r0, r1, #1
 80146f2:	0840      	lsrs	r0, r0, #1
 80146f4:	bd10      	pop	{r4, pc}
 80146f6:	46c0      	nop			; (mov r8, r8)
 80146f8:	20000118 	.word	0x20000118
 80146fc:	4c957f2d 	.word	0x4c957f2d
 8014700:	5851f42d 	.word	0x5851f42d

08014704 <realloc>:
 8014704:	b510      	push	{r4, lr}
 8014706:	4b03      	ldr	r3, [pc, #12]	; (8014714 <realloc+0x10>)
 8014708:	000a      	movs	r2, r1
 801470a:	0001      	movs	r1, r0
 801470c:	6818      	ldr	r0, [r3, #0]
 801470e:	f000 f803 	bl	8014718 <_realloc_r>
 8014712:	bd10      	pop	{r4, pc}
 8014714:	20000118 	.word	0x20000118

08014718 <_realloc_r>:
 8014718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801471a:	b087      	sub	sp, #28
 801471c:	9003      	str	r0, [sp, #12]
 801471e:	1e0c      	subs	r4, r1, #0
 8014720:	9205      	str	r2, [sp, #20]
 8014722:	d106      	bne.n	8014732 <_realloc_r+0x1a>
 8014724:	0011      	movs	r1, r2
 8014726:	f7ff fd79 	bl	801421c <_malloc_r>
 801472a:	0007      	movs	r7, r0
 801472c:	0038      	movs	r0, r7
 801472e:	b007      	add	sp, #28
 8014730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014732:	9803      	ldr	r0, [sp, #12]
 8014734:	f7ff ffbc 	bl	80146b0 <__malloc_lock>
 8014738:	0023      	movs	r3, r4
 801473a:	3b08      	subs	r3, #8
 801473c:	685f      	ldr	r7, [r3, #4]
 801473e:	9302      	str	r3, [sp, #8]
 8014740:	003a      	movs	r2, r7
 8014742:	2303      	movs	r3, #3
 8014744:	9e05      	ldr	r6, [sp, #20]
 8014746:	439a      	bics	r2, r3
 8014748:	360b      	adds	r6, #11
 801474a:	9204      	str	r2, [sp, #16]
 801474c:	2e16      	cmp	r6, #22
 801474e:	d908      	bls.n	8014762 <_realloc_r+0x4a>
 8014750:	3304      	adds	r3, #4
 8014752:	439e      	bics	r6, r3
 8014754:	9601      	str	r6, [sp, #4]
 8014756:	d506      	bpl.n	8014766 <_realloc_r+0x4e>
 8014758:	230c      	movs	r3, #12
 801475a:	9a03      	ldr	r2, [sp, #12]
 801475c:	2700      	movs	r7, #0
 801475e:	6013      	str	r3, [r2, #0]
 8014760:	e7e4      	b.n	801472c <_realloc_r+0x14>
 8014762:	2310      	movs	r3, #16
 8014764:	9301      	str	r3, [sp, #4]
 8014766:	9b01      	ldr	r3, [sp, #4]
 8014768:	9a05      	ldr	r2, [sp, #20]
 801476a:	4293      	cmp	r3, r2
 801476c:	d3f4      	bcc.n	8014758 <_realloc_r+0x40>
 801476e:	9b01      	ldr	r3, [sp, #4]
 8014770:	9a04      	ldr	r2, [sp, #16]
 8014772:	4293      	cmp	r3, r2
 8014774:	dc00      	bgt.n	8014778 <_realloc_r+0x60>
 8014776:	e16f      	b.n	8014a58 <_realloc_r+0x340>
 8014778:	9b02      	ldr	r3, [sp, #8]
 801477a:	48bc      	ldr	r0, [pc, #752]	; (8014a6c <_realloc_r+0x354>)
 801477c:	189b      	adds	r3, r3, r2
 801477e:	6882      	ldr	r2, [r0, #8]
 8014780:	4694      	mov	ip, r2
 8014782:	685a      	ldr	r2, [r3, #4]
 8014784:	459c      	cmp	ip, r3
 8014786:	d006      	beq.n	8014796 <_realloc_r+0x7e>
 8014788:	2501      	movs	r5, #1
 801478a:	0011      	movs	r1, r2
 801478c:	43a9      	bics	r1, r5
 801478e:	1859      	adds	r1, r3, r1
 8014790:	6849      	ldr	r1, [r1, #4]
 8014792:	4229      	tst	r1, r5
 8014794:	d146      	bne.n	8014824 <_realloc_r+0x10c>
 8014796:	2103      	movs	r1, #3
 8014798:	438a      	bics	r2, r1
 801479a:	9904      	ldr	r1, [sp, #16]
 801479c:	188e      	adds	r6, r1, r2
 801479e:	9901      	ldr	r1, [sp, #4]
 80147a0:	459c      	cmp	ip, r3
 80147a2:	d117      	bne.n	80147d4 <_realloc_r+0xbc>
 80147a4:	3110      	adds	r1, #16
 80147a6:	42b1      	cmp	r1, r6
 80147a8:	dc3e      	bgt.n	8014828 <_realloc_r+0x110>
 80147aa:	9901      	ldr	r1, [sp, #4]
 80147ac:	9b02      	ldr	r3, [sp, #8]
 80147ae:	468c      	mov	ip, r1
 80147b0:	4463      	add	r3, ip
 80147b2:	6083      	str	r3, [r0, #8]
 80147b4:	001a      	movs	r2, r3
 80147b6:	1a73      	subs	r3, r6, r1
 80147b8:	2601      	movs	r6, #1
 80147ba:	4333      	orrs	r3, r6
 80147bc:	6053      	str	r3, [r2, #4]
 80147be:	0023      	movs	r3, r4
 80147c0:	3b08      	subs	r3, #8
 80147c2:	685a      	ldr	r2, [r3, #4]
 80147c4:	9803      	ldr	r0, [sp, #12]
 80147c6:	4016      	ands	r6, r2
 80147c8:	430e      	orrs	r6, r1
 80147ca:	605e      	str	r6, [r3, #4]
 80147cc:	f7ff ff78 	bl	80146c0 <__malloc_unlock>
 80147d0:	0027      	movs	r7, r4
 80147d2:	e7ab      	b.n	801472c <_realloc_r+0x14>
 80147d4:	42b1      	cmp	r1, r6
 80147d6:	dc27      	bgt.n	8014828 <_realloc_r+0x110>
 80147d8:	68da      	ldr	r2, [r3, #12]
 80147da:	689b      	ldr	r3, [r3, #8]
 80147dc:	60da      	str	r2, [r3, #12]
 80147de:	6093      	str	r3, [r2, #8]
 80147e0:	9b01      	ldr	r3, [sp, #4]
 80147e2:	9a02      	ldr	r2, [sp, #8]
 80147e4:	1af4      	subs	r4, r6, r3
 80147e6:	9b02      	ldr	r3, [sp, #8]
 80147e8:	1992      	adds	r2, r2, r6
 80147ea:	685b      	ldr	r3, [r3, #4]
 80147ec:	9304      	str	r3, [sp, #16]
 80147ee:	2301      	movs	r3, #1
 80147f0:	9804      	ldr	r0, [sp, #16]
 80147f2:	4018      	ands	r0, r3
 80147f4:	2c0f      	cmp	r4, #15
 80147f6:	d800      	bhi.n	80147fa <_realloc_r+0xe2>
 80147f8:	e130      	b.n	8014a5c <_realloc_r+0x344>
 80147fa:	9d01      	ldr	r5, [sp, #4]
 80147fc:	9902      	ldr	r1, [sp, #8]
 80147fe:	4328      	orrs	r0, r5
 8014800:	1949      	adds	r1, r1, r5
 8014802:	9d02      	ldr	r5, [sp, #8]
 8014804:	431c      	orrs	r4, r3
 8014806:	6068      	str	r0, [r5, #4]
 8014808:	604c      	str	r4, [r1, #4]
 801480a:	6850      	ldr	r0, [r2, #4]
 801480c:	3108      	adds	r1, #8
 801480e:	4303      	orrs	r3, r0
 8014810:	6053      	str	r3, [r2, #4]
 8014812:	9803      	ldr	r0, [sp, #12]
 8014814:	f003 fa40 	bl	8017c98 <_free_r>
 8014818:	9803      	ldr	r0, [sp, #12]
 801481a:	f7ff ff51 	bl	80146c0 <__malloc_unlock>
 801481e:	9f02      	ldr	r7, [sp, #8]
 8014820:	3708      	adds	r7, #8
 8014822:	e783      	b.n	801472c <_realloc_r+0x14>
 8014824:	2200      	movs	r2, #0
 8014826:	0013      	movs	r3, r2
 8014828:	07f9      	lsls	r1, r7, #31
 801482a:	d500      	bpl.n	801482e <_realloc_r+0x116>
 801482c:	e0c6      	b.n	80149bc <_realloc_r+0x2a4>
 801482e:	0021      	movs	r1, r4
 8014830:	3908      	subs	r1, #8
 8014832:	680d      	ldr	r5, [r1, #0]
 8014834:	9902      	ldr	r1, [sp, #8]
 8014836:	1b4d      	subs	r5, r1, r5
 8014838:	2103      	movs	r1, #3
 801483a:	686f      	ldr	r7, [r5, #4]
 801483c:	438f      	bics	r7, r1
 801483e:	9904      	ldr	r1, [sp, #16]
 8014840:	187f      	adds	r7, r7, r1
 8014842:	2b00      	cmp	r3, #0
 8014844:	d100      	bne.n	8014848 <_realloc_r+0x130>
 8014846:	e084      	b.n	8014952 <_realloc_r+0x23a>
 8014848:	19d6      	adds	r6, r2, r7
 801484a:	459c      	cmp	ip, r3
 801484c:	d148      	bne.n	80148e0 <_realloc_r+0x1c8>
 801484e:	9b01      	ldr	r3, [sp, #4]
 8014850:	3310      	adds	r3, #16
 8014852:	42b3      	cmp	r3, r6
 8014854:	dc7d      	bgt.n	8014952 <_realloc_r+0x23a>
 8014856:	68aa      	ldr	r2, [r5, #8]
 8014858:	68eb      	ldr	r3, [r5, #12]
 801485a:	002f      	movs	r7, r5
 801485c:	60d3      	str	r3, [r2, #12]
 801485e:	609a      	str	r2, [r3, #8]
 8014860:	000a      	movs	r2, r1
 8014862:	3a04      	subs	r2, #4
 8014864:	3708      	adds	r7, #8
 8014866:	2a24      	cmp	r2, #36	; 0x24
 8014868:	d835      	bhi.n	80148d6 <_realloc_r+0x1be>
 801486a:	003b      	movs	r3, r7
 801486c:	2a13      	cmp	r2, #19
 801486e:	d908      	bls.n	8014882 <_realloc_r+0x16a>
 8014870:	6823      	ldr	r3, [r4, #0]
 8014872:	60ab      	str	r3, [r5, #8]
 8014874:	6863      	ldr	r3, [r4, #4]
 8014876:	60eb      	str	r3, [r5, #12]
 8014878:	2a1b      	cmp	r2, #27
 801487a:	d81a      	bhi.n	80148b2 <_realloc_r+0x19a>
 801487c:	002b      	movs	r3, r5
 801487e:	3408      	adds	r4, #8
 8014880:	3310      	adds	r3, #16
 8014882:	6822      	ldr	r2, [r4, #0]
 8014884:	601a      	str	r2, [r3, #0]
 8014886:	6862      	ldr	r2, [r4, #4]
 8014888:	605a      	str	r2, [r3, #4]
 801488a:	68a2      	ldr	r2, [r4, #8]
 801488c:	609a      	str	r2, [r3, #8]
 801488e:	9b01      	ldr	r3, [sp, #4]
 8014890:	18ea      	adds	r2, r5, r3
 8014892:	4b76      	ldr	r3, [pc, #472]	; (8014a6c <_realloc_r+0x354>)
 8014894:	609a      	str	r2, [r3, #8]
 8014896:	9b01      	ldr	r3, [sp, #4]
 8014898:	1af3      	subs	r3, r6, r3
 801489a:	2601      	movs	r6, #1
 801489c:	4333      	orrs	r3, r6
 801489e:	6053      	str	r3, [r2, #4]
 80148a0:	686b      	ldr	r3, [r5, #4]
 80148a2:	401e      	ands	r6, r3
 80148a4:	9b01      	ldr	r3, [sp, #4]
 80148a6:	431e      	orrs	r6, r3
 80148a8:	606e      	str	r6, [r5, #4]
 80148aa:	9803      	ldr	r0, [sp, #12]
 80148ac:	f7ff ff08 	bl	80146c0 <__malloc_unlock>
 80148b0:	e73c      	b.n	801472c <_realloc_r+0x14>
 80148b2:	68a3      	ldr	r3, [r4, #8]
 80148b4:	612b      	str	r3, [r5, #16]
 80148b6:	68e3      	ldr	r3, [r4, #12]
 80148b8:	616b      	str	r3, [r5, #20]
 80148ba:	2a24      	cmp	r2, #36	; 0x24
 80148bc:	d003      	beq.n	80148c6 <_realloc_r+0x1ae>
 80148be:	002b      	movs	r3, r5
 80148c0:	3410      	adds	r4, #16
 80148c2:	3318      	adds	r3, #24
 80148c4:	e7dd      	b.n	8014882 <_realloc_r+0x16a>
 80148c6:	6923      	ldr	r3, [r4, #16]
 80148c8:	61ab      	str	r3, [r5, #24]
 80148ca:	002b      	movs	r3, r5
 80148cc:	6962      	ldr	r2, [r4, #20]
 80148ce:	3320      	adds	r3, #32
 80148d0:	61ea      	str	r2, [r5, #28]
 80148d2:	3418      	adds	r4, #24
 80148d4:	e7d5      	b.n	8014882 <_realloc_r+0x16a>
 80148d6:	0021      	movs	r1, r4
 80148d8:	0038      	movs	r0, r7
 80148da:	f003 fdde 	bl	801849a <memmove>
 80148de:	e7d6      	b.n	801488e <_realloc_r+0x176>
 80148e0:	9a01      	ldr	r2, [sp, #4]
 80148e2:	42b2      	cmp	r2, r6
 80148e4:	dc35      	bgt.n	8014952 <_realloc_r+0x23a>
 80148e6:	0028      	movs	r0, r5
 80148e8:	68da      	ldr	r2, [r3, #12]
 80148ea:	689b      	ldr	r3, [r3, #8]
 80148ec:	3008      	adds	r0, #8
 80148ee:	60da      	str	r2, [r3, #12]
 80148f0:	6093      	str	r3, [r2, #8]
 80148f2:	68aa      	ldr	r2, [r5, #8]
 80148f4:	68eb      	ldr	r3, [r5, #12]
 80148f6:	60d3      	str	r3, [r2, #12]
 80148f8:	609a      	str	r2, [r3, #8]
 80148fa:	9a04      	ldr	r2, [sp, #16]
 80148fc:	3a04      	subs	r2, #4
 80148fe:	2a24      	cmp	r2, #36	; 0x24
 8014900:	d823      	bhi.n	801494a <_realloc_r+0x232>
 8014902:	2a13      	cmp	r2, #19
 8014904:	d907      	bls.n	8014916 <_realloc_r+0x1fe>
 8014906:	6823      	ldr	r3, [r4, #0]
 8014908:	60ab      	str	r3, [r5, #8]
 801490a:	6863      	ldr	r3, [r4, #4]
 801490c:	60eb      	str	r3, [r5, #12]
 801490e:	2a1b      	cmp	r2, #27
 8014910:	d809      	bhi.n	8014926 <_realloc_r+0x20e>
 8014912:	3408      	adds	r4, #8
 8014914:	3008      	adds	r0, #8
 8014916:	6823      	ldr	r3, [r4, #0]
 8014918:	6003      	str	r3, [r0, #0]
 801491a:	6863      	ldr	r3, [r4, #4]
 801491c:	6043      	str	r3, [r0, #4]
 801491e:	68a3      	ldr	r3, [r4, #8]
 8014920:	6083      	str	r3, [r0, #8]
 8014922:	9502      	str	r5, [sp, #8]
 8014924:	e75c      	b.n	80147e0 <_realloc_r+0xc8>
 8014926:	68a3      	ldr	r3, [r4, #8]
 8014928:	612b      	str	r3, [r5, #16]
 801492a:	68e3      	ldr	r3, [r4, #12]
 801492c:	616b      	str	r3, [r5, #20]
 801492e:	2a24      	cmp	r2, #36	; 0x24
 8014930:	d003      	beq.n	801493a <_realloc_r+0x222>
 8014932:	0028      	movs	r0, r5
 8014934:	3410      	adds	r4, #16
 8014936:	3018      	adds	r0, #24
 8014938:	e7ed      	b.n	8014916 <_realloc_r+0x1fe>
 801493a:	0028      	movs	r0, r5
 801493c:	6923      	ldr	r3, [r4, #16]
 801493e:	3020      	adds	r0, #32
 8014940:	61ab      	str	r3, [r5, #24]
 8014942:	6963      	ldr	r3, [r4, #20]
 8014944:	3418      	adds	r4, #24
 8014946:	61eb      	str	r3, [r5, #28]
 8014948:	e7e5      	b.n	8014916 <_realloc_r+0x1fe>
 801494a:	0021      	movs	r1, r4
 801494c:	f003 fda5 	bl	801849a <memmove>
 8014950:	e7e7      	b.n	8014922 <_realloc_r+0x20a>
 8014952:	9b01      	ldr	r3, [sp, #4]
 8014954:	42bb      	cmp	r3, r7
 8014956:	dc31      	bgt.n	80149bc <_realloc_r+0x2a4>
 8014958:	0028      	movs	r0, r5
 801495a:	68aa      	ldr	r2, [r5, #8]
 801495c:	68eb      	ldr	r3, [r5, #12]
 801495e:	3008      	adds	r0, #8
 8014960:	60d3      	str	r3, [r2, #12]
 8014962:	609a      	str	r2, [r3, #8]
 8014964:	9a04      	ldr	r2, [sp, #16]
 8014966:	3a04      	subs	r2, #4
 8014968:	2a24      	cmp	r2, #36	; 0x24
 801496a:	d823      	bhi.n	80149b4 <_realloc_r+0x29c>
 801496c:	2a13      	cmp	r2, #19
 801496e:	d907      	bls.n	8014980 <_realloc_r+0x268>
 8014970:	6823      	ldr	r3, [r4, #0]
 8014972:	60ab      	str	r3, [r5, #8]
 8014974:	6863      	ldr	r3, [r4, #4]
 8014976:	60eb      	str	r3, [r5, #12]
 8014978:	2a1b      	cmp	r2, #27
 801497a:	d809      	bhi.n	8014990 <_realloc_r+0x278>
 801497c:	3408      	adds	r4, #8
 801497e:	3008      	adds	r0, #8
 8014980:	6823      	ldr	r3, [r4, #0]
 8014982:	6003      	str	r3, [r0, #0]
 8014984:	6863      	ldr	r3, [r4, #4]
 8014986:	6043      	str	r3, [r0, #4]
 8014988:	68a3      	ldr	r3, [r4, #8]
 801498a:	6083      	str	r3, [r0, #8]
 801498c:	003e      	movs	r6, r7
 801498e:	e7c8      	b.n	8014922 <_realloc_r+0x20a>
 8014990:	68a3      	ldr	r3, [r4, #8]
 8014992:	612b      	str	r3, [r5, #16]
 8014994:	68e3      	ldr	r3, [r4, #12]
 8014996:	616b      	str	r3, [r5, #20]
 8014998:	2a24      	cmp	r2, #36	; 0x24
 801499a:	d003      	beq.n	80149a4 <_realloc_r+0x28c>
 801499c:	0028      	movs	r0, r5
 801499e:	3410      	adds	r4, #16
 80149a0:	3018      	adds	r0, #24
 80149a2:	e7ed      	b.n	8014980 <_realloc_r+0x268>
 80149a4:	0028      	movs	r0, r5
 80149a6:	6923      	ldr	r3, [r4, #16]
 80149a8:	3020      	adds	r0, #32
 80149aa:	61ab      	str	r3, [r5, #24]
 80149ac:	6963      	ldr	r3, [r4, #20]
 80149ae:	3418      	adds	r4, #24
 80149b0:	61eb      	str	r3, [r5, #28]
 80149b2:	e7e5      	b.n	8014980 <_realloc_r+0x268>
 80149b4:	0021      	movs	r1, r4
 80149b6:	f003 fd70 	bl	801849a <memmove>
 80149ba:	e7e7      	b.n	801498c <_realloc_r+0x274>
 80149bc:	9905      	ldr	r1, [sp, #20]
 80149be:	9803      	ldr	r0, [sp, #12]
 80149c0:	f7ff fc2c 	bl	801421c <_malloc_r>
 80149c4:	1e07      	subs	r7, r0, #0
 80149c6:	d100      	bne.n	80149ca <_realloc_r+0x2b2>
 80149c8:	e76f      	b.n	80148aa <_realloc_r+0x192>
 80149ca:	0023      	movs	r3, r4
 80149cc:	2201      	movs	r2, #1
 80149ce:	3b08      	subs	r3, #8
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	4393      	bics	r3, r2
 80149d4:	9a02      	ldr	r2, [sp, #8]
 80149d6:	18d3      	adds	r3, r2, r3
 80149d8:	0002      	movs	r2, r0
 80149da:	3a08      	subs	r2, #8
 80149dc:	4293      	cmp	r3, r2
 80149de:	d105      	bne.n	80149ec <_realloc_r+0x2d4>
 80149e0:	685e      	ldr	r6, [r3, #4]
 80149e2:	2303      	movs	r3, #3
 80149e4:	439e      	bics	r6, r3
 80149e6:	9b04      	ldr	r3, [sp, #16]
 80149e8:	18f6      	adds	r6, r6, r3
 80149ea:	e6f9      	b.n	80147e0 <_realloc_r+0xc8>
 80149ec:	9a04      	ldr	r2, [sp, #16]
 80149ee:	3a04      	subs	r2, #4
 80149f0:	2a24      	cmp	r2, #36	; 0x24
 80149f2:	d82d      	bhi.n	8014a50 <_realloc_r+0x338>
 80149f4:	2a13      	cmp	r2, #19
 80149f6:	d928      	bls.n	8014a4a <_realloc_r+0x332>
 80149f8:	6823      	ldr	r3, [r4, #0]
 80149fa:	6003      	str	r3, [r0, #0]
 80149fc:	6863      	ldr	r3, [r4, #4]
 80149fe:	6043      	str	r3, [r0, #4]
 8014a00:	2a1b      	cmp	r2, #27
 8014a02:	d80e      	bhi.n	8014a22 <_realloc_r+0x30a>
 8014a04:	0022      	movs	r2, r4
 8014a06:	0003      	movs	r3, r0
 8014a08:	3208      	adds	r2, #8
 8014a0a:	3308      	adds	r3, #8
 8014a0c:	6811      	ldr	r1, [r2, #0]
 8014a0e:	6019      	str	r1, [r3, #0]
 8014a10:	6851      	ldr	r1, [r2, #4]
 8014a12:	6059      	str	r1, [r3, #4]
 8014a14:	6892      	ldr	r2, [r2, #8]
 8014a16:	609a      	str	r2, [r3, #8]
 8014a18:	0021      	movs	r1, r4
 8014a1a:	9803      	ldr	r0, [sp, #12]
 8014a1c:	f003 f93c 	bl	8017c98 <_free_r>
 8014a20:	e743      	b.n	80148aa <_realloc_r+0x192>
 8014a22:	68a3      	ldr	r3, [r4, #8]
 8014a24:	6083      	str	r3, [r0, #8]
 8014a26:	68e3      	ldr	r3, [r4, #12]
 8014a28:	60c3      	str	r3, [r0, #12]
 8014a2a:	2a24      	cmp	r2, #36	; 0x24
 8014a2c:	d004      	beq.n	8014a38 <_realloc_r+0x320>
 8014a2e:	0022      	movs	r2, r4
 8014a30:	0003      	movs	r3, r0
 8014a32:	3210      	adds	r2, #16
 8014a34:	3310      	adds	r3, #16
 8014a36:	e7e9      	b.n	8014a0c <_realloc_r+0x2f4>
 8014a38:	6923      	ldr	r3, [r4, #16]
 8014a3a:	0022      	movs	r2, r4
 8014a3c:	6103      	str	r3, [r0, #16]
 8014a3e:	0003      	movs	r3, r0
 8014a40:	6961      	ldr	r1, [r4, #20]
 8014a42:	3218      	adds	r2, #24
 8014a44:	3318      	adds	r3, #24
 8014a46:	6141      	str	r1, [r0, #20]
 8014a48:	e7e0      	b.n	8014a0c <_realloc_r+0x2f4>
 8014a4a:	0003      	movs	r3, r0
 8014a4c:	0022      	movs	r2, r4
 8014a4e:	e7dd      	b.n	8014a0c <_realloc_r+0x2f4>
 8014a50:	0021      	movs	r1, r4
 8014a52:	f003 fd22 	bl	801849a <memmove>
 8014a56:	e7df      	b.n	8014a18 <_realloc_r+0x300>
 8014a58:	9e04      	ldr	r6, [sp, #16]
 8014a5a:	e6c1      	b.n	80147e0 <_realloc_r+0xc8>
 8014a5c:	9902      	ldr	r1, [sp, #8]
 8014a5e:	4306      	orrs	r6, r0
 8014a60:	604e      	str	r6, [r1, #4]
 8014a62:	6851      	ldr	r1, [r2, #4]
 8014a64:	430b      	orrs	r3, r1
 8014a66:	6053      	str	r3, [r2, #4]
 8014a68:	e6d6      	b.n	8014818 <_realloc_r+0x100>
 8014a6a:	46c0      	nop			; (mov r8, r8)
 8014a6c:	200006b4 	.word	0x200006b4

08014a70 <_sbrk_r>:
 8014a70:	2300      	movs	r3, #0
 8014a72:	b570      	push	{r4, r5, r6, lr}
 8014a74:	4c06      	ldr	r4, [pc, #24]	; (8014a90 <_sbrk_r+0x20>)
 8014a76:	0005      	movs	r5, r0
 8014a78:	0008      	movs	r0, r1
 8014a7a:	6023      	str	r3, [r4, #0]
 8014a7c:	f004 fa1e 	bl	8018ebc <_sbrk>
 8014a80:	1c43      	adds	r3, r0, #1
 8014a82:	d103      	bne.n	8014a8c <_sbrk_r+0x1c>
 8014a84:	6823      	ldr	r3, [r4, #0]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d000      	beq.n	8014a8c <_sbrk_r+0x1c>
 8014a8a:	602b      	str	r3, [r5, #0]
 8014a8c:	bd70      	pop	{r4, r5, r6, pc}
 8014a8e:	46c0      	nop			; (mov r8, r8)
 8014a90:	200073fc 	.word	0x200073fc

08014a94 <snprintf>:
 8014a94:	b40c      	push	{r2, r3}
 8014a96:	b530      	push	{r4, r5, lr}
 8014a98:	4b16      	ldr	r3, [pc, #88]	; (8014af4 <snprintf+0x60>)
 8014a9a:	b09d      	sub	sp, #116	; 0x74
 8014a9c:	1e0c      	subs	r4, r1, #0
 8014a9e:	681d      	ldr	r5, [r3, #0]
 8014aa0:	da08      	bge.n	8014ab4 <snprintf+0x20>
 8014aa2:	238b      	movs	r3, #139	; 0x8b
 8014aa4:	2001      	movs	r0, #1
 8014aa6:	602b      	str	r3, [r5, #0]
 8014aa8:	4240      	negs	r0, r0
 8014aaa:	b01d      	add	sp, #116	; 0x74
 8014aac:	bc30      	pop	{r4, r5}
 8014aae:	bc08      	pop	{r3}
 8014ab0:	b002      	add	sp, #8
 8014ab2:	4718      	bx	r3
 8014ab4:	2382      	movs	r3, #130	; 0x82
 8014ab6:	a902      	add	r1, sp, #8
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	818b      	strh	r3, [r1, #12]
 8014abc:	2300      	movs	r3, #0
 8014abe:	9002      	str	r0, [sp, #8]
 8014ac0:	6108      	str	r0, [r1, #16]
 8014ac2:	429c      	cmp	r4, r3
 8014ac4:	d000      	beq.n	8014ac8 <snprintf+0x34>
 8014ac6:	1e63      	subs	r3, r4, #1
 8014ac8:	608b      	str	r3, [r1, #8]
 8014aca:	614b      	str	r3, [r1, #20]
 8014acc:	2301      	movs	r3, #1
 8014ace:	425b      	negs	r3, r3
 8014ad0:	81cb      	strh	r3, [r1, #14]
 8014ad2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014ad4:	ab21      	add	r3, sp, #132	; 0x84
 8014ad6:	0028      	movs	r0, r5
 8014ad8:	9301      	str	r3, [sp, #4]
 8014ada:	f000 ff97 	bl	8015a0c <_svfprintf_r>
 8014ade:	1c43      	adds	r3, r0, #1
 8014ae0:	da01      	bge.n	8014ae6 <snprintf+0x52>
 8014ae2:	238b      	movs	r3, #139	; 0x8b
 8014ae4:	602b      	str	r3, [r5, #0]
 8014ae6:	2c00      	cmp	r4, #0
 8014ae8:	d0df      	beq.n	8014aaa <snprintf+0x16>
 8014aea:	2300      	movs	r3, #0
 8014aec:	9a02      	ldr	r2, [sp, #8]
 8014aee:	7013      	strb	r3, [r2, #0]
 8014af0:	e7db      	b.n	8014aaa <snprintf+0x16>
 8014af2:	46c0      	nop			; (mov r8, r8)
 8014af4:	20000118 	.word	0x20000118

08014af8 <sprintf>:
 8014af8:	b40e      	push	{r1, r2, r3}
 8014afa:	b500      	push	{lr}
 8014afc:	490b      	ldr	r1, [pc, #44]	; (8014b2c <sprintf+0x34>)
 8014afe:	b09c      	sub	sp, #112	; 0x70
 8014b00:	ab1d      	add	r3, sp, #116	; 0x74
 8014b02:	9002      	str	r0, [sp, #8]
 8014b04:	9006      	str	r0, [sp, #24]
 8014b06:	9107      	str	r1, [sp, #28]
 8014b08:	9104      	str	r1, [sp, #16]
 8014b0a:	4809      	ldr	r0, [pc, #36]	; (8014b30 <sprintf+0x38>)
 8014b0c:	4909      	ldr	r1, [pc, #36]	; (8014b34 <sprintf+0x3c>)
 8014b0e:	cb04      	ldmia	r3!, {r2}
 8014b10:	9105      	str	r1, [sp, #20]
 8014b12:	6800      	ldr	r0, [r0, #0]
 8014b14:	a902      	add	r1, sp, #8
 8014b16:	9301      	str	r3, [sp, #4]
 8014b18:	f000 ff78 	bl	8015a0c <_svfprintf_r>
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	9a02      	ldr	r2, [sp, #8]
 8014b20:	7013      	strb	r3, [r2, #0]
 8014b22:	b01c      	add	sp, #112	; 0x70
 8014b24:	bc08      	pop	{r3}
 8014b26:	b003      	add	sp, #12
 8014b28:	4718      	bx	r3
 8014b2a:	46c0      	nop			; (mov r8, r8)
 8014b2c:	7fffffff 	.word	0x7fffffff
 8014b30:	20000118 	.word	0x20000118
 8014b34:	ffff0208 	.word	0xffff0208

08014b38 <strcat>:
 8014b38:	0002      	movs	r2, r0
 8014b3a:	b510      	push	{r4, lr}
 8014b3c:	7813      	ldrb	r3, [r2, #0]
 8014b3e:	1c54      	adds	r4, r2, #1
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d105      	bne.n	8014b50 <strcat+0x18>
 8014b44:	5ccc      	ldrb	r4, [r1, r3]
 8014b46:	54d4      	strb	r4, [r2, r3]
 8014b48:	3301      	adds	r3, #1
 8014b4a:	2c00      	cmp	r4, #0
 8014b4c:	d1fa      	bne.n	8014b44 <strcat+0xc>
 8014b4e:	bd10      	pop	{r4, pc}
 8014b50:	0022      	movs	r2, r4
 8014b52:	e7f3      	b.n	8014b3c <strcat+0x4>

08014b54 <strchr>:
 8014b54:	b2c9      	uxtb	r1, r1
 8014b56:	7803      	ldrb	r3, [r0, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d004      	beq.n	8014b66 <strchr+0x12>
 8014b5c:	428b      	cmp	r3, r1
 8014b5e:	d100      	bne.n	8014b62 <strchr+0xe>
 8014b60:	4770      	bx	lr
 8014b62:	3001      	adds	r0, #1
 8014b64:	e7f7      	b.n	8014b56 <strchr+0x2>
 8014b66:	424b      	negs	r3, r1
 8014b68:	4159      	adcs	r1, r3
 8014b6a:	4249      	negs	r1, r1
 8014b6c:	4008      	ands	r0, r1
 8014b6e:	e7f7      	b.n	8014b60 <strchr+0xc>

08014b70 <strcpy>:
 8014b70:	0003      	movs	r3, r0
 8014b72:	780a      	ldrb	r2, [r1, #0]
 8014b74:	3101      	adds	r1, #1
 8014b76:	701a      	strb	r2, [r3, #0]
 8014b78:	3301      	adds	r3, #1
 8014b7a:	2a00      	cmp	r2, #0
 8014b7c:	d1f9      	bne.n	8014b72 <strcpy+0x2>
 8014b7e:	4770      	bx	lr

08014b80 <strncmp>:
 8014b80:	2300      	movs	r3, #0
 8014b82:	b530      	push	{r4, r5, lr}
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d00a      	beq.n	8014b9e <strncmp+0x1e>
 8014b88:	3a01      	subs	r2, #1
 8014b8a:	5cc4      	ldrb	r4, [r0, r3]
 8014b8c:	5ccd      	ldrb	r5, [r1, r3]
 8014b8e:	42ac      	cmp	r4, r5
 8014b90:	d104      	bne.n	8014b9c <strncmp+0x1c>
 8014b92:	4293      	cmp	r3, r2
 8014b94:	d002      	beq.n	8014b9c <strncmp+0x1c>
 8014b96:	3301      	adds	r3, #1
 8014b98:	2c00      	cmp	r4, #0
 8014b9a:	d1f6      	bne.n	8014b8a <strncmp+0xa>
 8014b9c:	1b63      	subs	r3, r4, r5
 8014b9e:	0018      	movs	r0, r3
 8014ba0:	bd30      	pop	{r4, r5, pc}

08014ba2 <strncpy>:
 8014ba2:	b530      	push	{r4, r5, lr}
 8014ba4:	0005      	movs	r5, r0
 8014ba6:	2a00      	cmp	r2, #0
 8014ba8:	d100      	bne.n	8014bac <strncpy+0xa>
 8014baa:	bd30      	pop	{r4, r5, pc}
 8014bac:	780c      	ldrb	r4, [r1, #0]
 8014bae:	3a01      	subs	r2, #1
 8014bb0:	1c6b      	adds	r3, r5, #1
 8014bb2:	702c      	strb	r4, [r5, #0]
 8014bb4:	3101      	adds	r1, #1
 8014bb6:	2c00      	cmp	r4, #0
 8014bb8:	d105      	bne.n	8014bc6 <strncpy+0x24>
 8014bba:	189a      	adds	r2, r3, r2
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d0f4      	beq.n	8014baa <strncpy+0x8>
 8014bc0:	701c      	strb	r4, [r3, #0]
 8014bc2:	3301      	adds	r3, #1
 8014bc4:	e7fa      	b.n	8014bbc <strncpy+0x1a>
 8014bc6:	001d      	movs	r5, r3
 8014bc8:	e7ed      	b.n	8014ba6 <strncpy+0x4>
	...

08014bcc <sulp>:
 8014bcc:	b570      	push	{r4, r5, r6, lr}
 8014bce:	0016      	movs	r6, r2
 8014bd0:	000d      	movs	r5, r1
 8014bd2:	f003 ff17 	bl	8018a04 <__ulp>
 8014bd6:	2e00      	cmp	r6, #0
 8014bd8:	d00d      	beq.n	8014bf6 <sulp+0x2a>
 8014bda:	236b      	movs	r3, #107	; 0x6b
 8014bdc:	006a      	lsls	r2, r5, #1
 8014bde:	0d52      	lsrs	r2, r2, #21
 8014be0:	1a9b      	subs	r3, r3, r2
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	dd07      	ble.n	8014bf6 <sulp+0x2a>
 8014be6:	2400      	movs	r4, #0
 8014be8:	4a03      	ldr	r2, [pc, #12]	; (8014bf8 <sulp+0x2c>)
 8014bea:	051b      	lsls	r3, r3, #20
 8014bec:	189d      	adds	r5, r3, r2
 8014bee:	002b      	movs	r3, r5
 8014bf0:	0022      	movs	r2, r4
 8014bf2:	f7ed f91f 	bl	8001e34 <__aeabi_dmul>
 8014bf6:	bd70      	pop	{r4, r5, r6, pc}
 8014bf8:	3ff00000 	.word	0x3ff00000

08014bfc <_strtod_l>:
 8014bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bfe:	b0a7      	sub	sp, #156	; 0x9c
 8014c00:	9307      	str	r3, [sp, #28]
 8014c02:	2300      	movs	r3, #0
 8014c04:	9004      	str	r0, [sp, #16]
 8014c06:	9807      	ldr	r0, [sp, #28]
 8014c08:	9322      	str	r3, [sp, #136]	; 0x88
 8014c0a:	9106      	str	r1, [sp, #24]
 8014c0c:	921d      	str	r2, [sp, #116]	; 0x74
 8014c0e:	f003 fc28 	bl	8018462 <__localeconv_l>
 8014c12:	0005      	movs	r5, r0
 8014c14:	6800      	ldr	r0, [r0, #0]
 8014c16:	f7eb fa7f 	bl	8000118 <strlen>
 8014c1a:	2600      	movs	r6, #0
 8014c1c:	2700      	movs	r7, #0
 8014c1e:	9b06      	ldr	r3, [sp, #24]
 8014c20:	9005      	str	r0, [sp, #20]
 8014c22:	9321      	str	r3, [sp, #132]	; 0x84
 8014c24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c26:	781a      	ldrb	r2, [r3, #0]
 8014c28:	2a0d      	cmp	r2, #13
 8014c2a:	d839      	bhi.n	8014ca0 <_strtod_l+0xa4>
 8014c2c:	2a09      	cmp	r2, #9
 8014c2e:	d23d      	bcs.n	8014cac <_strtod_l+0xb0>
 8014c30:	2a00      	cmp	r2, #0
 8014c32:	d044      	beq.n	8014cbe <_strtod_l+0xc2>
 8014c34:	2300      	movs	r3, #0
 8014c36:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c38:	2200      	movs	r2, #0
 8014c3a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014c3c:	920c      	str	r2, [sp, #48]	; 0x30
 8014c3e:	7823      	ldrb	r3, [r4, #0]
 8014c40:	2b30      	cmp	r3, #48	; 0x30
 8014c42:	d000      	beq.n	8014c46 <_strtod_l+0x4a>
 8014c44:	e07e      	b.n	8014d44 <_strtod_l+0x148>
 8014c46:	7863      	ldrb	r3, [r4, #1]
 8014c48:	2b58      	cmp	r3, #88	; 0x58
 8014c4a:	d002      	beq.n	8014c52 <_strtod_l+0x56>
 8014c4c:	2b78      	cmp	r3, #120	; 0x78
 8014c4e:	d000      	beq.n	8014c52 <_strtod_l+0x56>
 8014c50:	e06e      	b.n	8014d30 <_strtod_l+0x134>
 8014c52:	9b07      	ldr	r3, [sp, #28]
 8014c54:	4a96      	ldr	r2, [pc, #600]	; (8014eb0 <_strtod_l+0x2b4>)
 8014c56:	9302      	str	r3, [sp, #8]
 8014c58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c5a:	a921      	add	r1, sp, #132	; 0x84
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	ab22      	add	r3, sp, #136	; 0x88
 8014c60:	9300      	str	r3, [sp, #0]
 8014c62:	9804      	ldr	r0, [sp, #16]
 8014c64:	ab23      	add	r3, sp, #140	; 0x8c
 8014c66:	f003 f914 	bl	8017e92 <__gethex>
 8014c6a:	2507      	movs	r5, #7
 8014c6c:	9005      	str	r0, [sp, #20]
 8014c6e:	4005      	ands	r5, r0
 8014c70:	d005      	beq.n	8014c7e <_strtod_l+0x82>
 8014c72:	2d06      	cmp	r5, #6
 8014c74:	d12f      	bne.n	8014cd6 <_strtod_l+0xda>
 8014c76:	2300      	movs	r3, #0
 8014c78:	3401      	adds	r4, #1
 8014c7a:	9421      	str	r4, [sp, #132]	; 0x84
 8014c7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d002      	beq.n	8014c8a <_strtod_l+0x8e>
 8014c84:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014c86:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c88:	601a      	str	r2, [r3, #0]
 8014c8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d01d      	beq.n	8014ccc <_strtod_l+0xd0>
 8014c90:	2380      	movs	r3, #128	; 0x80
 8014c92:	0032      	movs	r2, r6
 8014c94:	061b      	lsls	r3, r3, #24
 8014c96:	18fb      	adds	r3, r7, r3
 8014c98:	0010      	movs	r0, r2
 8014c9a:	0019      	movs	r1, r3
 8014c9c:	b027      	add	sp, #156	; 0x9c
 8014c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ca0:	2a2b      	cmp	r2, #43	; 0x2b
 8014ca2:	d016      	beq.n	8014cd2 <_strtod_l+0xd6>
 8014ca4:	2a2d      	cmp	r2, #45	; 0x2d
 8014ca6:	d003      	beq.n	8014cb0 <_strtod_l+0xb4>
 8014ca8:	2a20      	cmp	r2, #32
 8014caa:	d1c3      	bne.n	8014c34 <_strtod_l+0x38>
 8014cac:	3301      	adds	r3, #1
 8014cae:	e7b8      	b.n	8014c22 <_strtod_l+0x26>
 8014cb0:	2201      	movs	r2, #1
 8014cb2:	9213      	str	r2, [sp, #76]	; 0x4c
 8014cb4:	1c5a      	adds	r2, r3, #1
 8014cb6:	9221      	str	r2, [sp, #132]	; 0x84
 8014cb8:	785b      	ldrb	r3, [r3, #1]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d1bc      	bne.n	8014c38 <_strtod_l+0x3c>
 8014cbe:	9b06      	ldr	r3, [sp, #24]
 8014cc0:	9321      	str	r3, [sp, #132]	; 0x84
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8014cc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d1db      	bne.n	8014c84 <_strtod_l+0x88>
 8014ccc:	0032      	movs	r2, r6
 8014cce:	003b      	movs	r3, r7
 8014cd0:	e7e2      	b.n	8014c98 <_strtod_l+0x9c>
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	e7ed      	b.n	8014cb2 <_strtod_l+0xb6>
 8014cd6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014cd8:	2a00      	cmp	r2, #0
 8014cda:	d007      	beq.n	8014cec <_strtod_l+0xf0>
 8014cdc:	2135      	movs	r1, #53	; 0x35
 8014cde:	a824      	add	r0, sp, #144	; 0x90
 8014ce0:	f003 ff7d 	bl	8018bde <__copybits>
 8014ce4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014ce6:	9804      	ldr	r0, [sp, #16]
 8014ce8:	f003 fc12 	bl	8018510 <_Bfree>
 8014cec:	1e68      	subs	r0, r5, #1
 8014cee:	2804      	cmp	r0, #4
 8014cf0:	d806      	bhi.n	8014d00 <_strtod_l+0x104>
 8014cf2:	f7eb fa19 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014cf6:	030c      	.short	0x030c
 8014cf8:	1917      	.short	0x1917
 8014cfa:	0c          	.byte	0x0c
 8014cfb:	00          	.byte	0x00
 8014cfc:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014cfe:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014d00:	9b05      	ldr	r3, [sp, #20]
 8014d02:	071b      	lsls	r3, r3, #28
 8014d04:	d5bb      	bpl.n	8014c7e <_strtod_l+0x82>
 8014d06:	2380      	movs	r3, #128	; 0x80
 8014d08:	061b      	lsls	r3, r3, #24
 8014d0a:	431f      	orrs	r7, r3
 8014d0c:	e7b7      	b.n	8014c7e <_strtod_l+0x82>
 8014d0e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014d10:	4a68      	ldr	r2, [pc, #416]	; (8014eb4 <_strtod_l+0x2b8>)
 8014d12:	4969      	ldr	r1, [pc, #420]	; (8014eb8 <_strtod_l+0x2bc>)
 8014d14:	401a      	ands	r2, r3
 8014d16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014d18:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014d1a:	185b      	adds	r3, r3, r1
 8014d1c:	051b      	lsls	r3, r3, #20
 8014d1e:	431a      	orrs	r2, r3
 8014d20:	0017      	movs	r7, r2
 8014d22:	e7ed      	b.n	8014d00 <_strtod_l+0x104>
 8014d24:	4f65      	ldr	r7, [pc, #404]	; (8014ebc <_strtod_l+0x2c0>)
 8014d26:	e7eb      	b.n	8014d00 <_strtod_l+0x104>
 8014d28:	2601      	movs	r6, #1
 8014d2a:	4f65      	ldr	r7, [pc, #404]	; (8014ec0 <_strtod_l+0x2c4>)
 8014d2c:	4276      	negs	r6, r6
 8014d2e:	e7e7      	b.n	8014d00 <_strtod_l+0x104>
 8014d30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d32:	1c5a      	adds	r2, r3, #1
 8014d34:	9221      	str	r2, [sp, #132]	; 0x84
 8014d36:	785b      	ldrb	r3, [r3, #1]
 8014d38:	2b30      	cmp	r3, #48	; 0x30
 8014d3a:	d0f9      	beq.n	8014d30 <_strtod_l+0x134>
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d09e      	beq.n	8014c7e <_strtod_l+0x82>
 8014d40:	2301      	movs	r3, #1
 8014d42:	930c      	str	r3, [sp, #48]	; 0x30
 8014d44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d46:	220a      	movs	r2, #10
 8014d48:	9312      	str	r3, [sp, #72]	; 0x48
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d4e:	9308      	str	r3, [sp, #32]
 8014d50:	930a      	str	r3, [sp, #40]	; 0x28
 8014d52:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014d54:	7804      	ldrb	r4, [r0, #0]
 8014d56:	0023      	movs	r3, r4
 8014d58:	3b30      	subs	r3, #48	; 0x30
 8014d5a:	b2d9      	uxtb	r1, r3
 8014d5c:	2909      	cmp	r1, #9
 8014d5e:	d934      	bls.n	8014dca <_strtod_l+0x1ce>
 8014d60:	9a05      	ldr	r2, [sp, #20]
 8014d62:	6829      	ldr	r1, [r5, #0]
 8014d64:	f7ff ff0c 	bl	8014b80 <strncmp>
 8014d68:	2800      	cmp	r0, #0
 8014d6a:	d040      	beq.n	8014dee <_strtod_l+0x1f2>
 8014d6c:	2000      	movs	r0, #0
 8014d6e:	0023      	movs	r3, r4
 8014d70:	4684      	mov	ip, r0
 8014d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d74:	9007      	str	r0, [sp, #28]
 8014d76:	9205      	str	r2, [sp, #20]
 8014d78:	2220      	movs	r2, #32
 8014d7a:	0019      	movs	r1, r3
 8014d7c:	4391      	bics	r1, r2
 8014d7e:	000a      	movs	r2, r1
 8014d80:	2100      	movs	r1, #0
 8014d82:	2a45      	cmp	r2, #69	; 0x45
 8014d84:	d000      	beq.n	8014d88 <_strtod_l+0x18c>
 8014d86:	e0bf      	b.n	8014f08 <_strtod_l+0x30c>
 8014d88:	9b05      	ldr	r3, [sp, #20]
 8014d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d8c:	4303      	orrs	r3, r0
 8014d8e:	4313      	orrs	r3, r2
 8014d90:	428b      	cmp	r3, r1
 8014d92:	d094      	beq.n	8014cbe <_strtod_l+0xc2>
 8014d94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d96:	9306      	str	r3, [sp, #24]
 8014d98:	3301      	adds	r3, #1
 8014d9a:	9321      	str	r3, [sp, #132]	; 0x84
 8014d9c:	9b06      	ldr	r3, [sp, #24]
 8014d9e:	785b      	ldrb	r3, [r3, #1]
 8014da0:	2b2b      	cmp	r3, #43	; 0x2b
 8014da2:	d100      	bne.n	8014da6 <_strtod_l+0x1aa>
 8014da4:	e082      	b.n	8014eac <_strtod_l+0x2b0>
 8014da6:	000c      	movs	r4, r1
 8014da8:	2b2d      	cmp	r3, #45	; 0x2d
 8014daa:	d105      	bne.n	8014db8 <_strtod_l+0x1bc>
 8014dac:	2401      	movs	r4, #1
 8014dae:	9b06      	ldr	r3, [sp, #24]
 8014db0:	3302      	adds	r3, #2
 8014db2:	9321      	str	r3, [sp, #132]	; 0x84
 8014db4:	9b06      	ldr	r3, [sp, #24]
 8014db6:	789b      	ldrb	r3, [r3, #2]
 8014db8:	001a      	movs	r2, r3
 8014dba:	3a30      	subs	r2, #48	; 0x30
 8014dbc:	2a09      	cmp	r2, #9
 8014dbe:	d800      	bhi.n	8014dc2 <_strtod_l+0x1c6>
 8014dc0:	e084      	b.n	8014ecc <_strtod_l+0x2d0>
 8014dc2:	9a06      	ldr	r2, [sp, #24]
 8014dc4:	2100      	movs	r1, #0
 8014dc6:	9221      	str	r2, [sp, #132]	; 0x84
 8014dc8:	e09e      	b.n	8014f08 <_strtod_l+0x30c>
 8014dca:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014dcc:	2908      	cmp	r1, #8
 8014dce:	dc09      	bgt.n	8014de4 <_strtod_l+0x1e8>
 8014dd0:	9908      	ldr	r1, [sp, #32]
 8014dd2:	4351      	muls	r1, r2
 8014dd4:	18cb      	adds	r3, r1, r3
 8014dd6:	9308      	str	r3, [sp, #32]
 8014dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dda:	3001      	adds	r0, #1
 8014ddc:	3301      	adds	r3, #1
 8014dde:	930a      	str	r3, [sp, #40]	; 0x28
 8014de0:	9021      	str	r0, [sp, #132]	; 0x84
 8014de2:	e7b6      	b.n	8014d52 <_strtod_l+0x156>
 8014de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014de6:	4351      	muls	r1, r2
 8014de8:	18cb      	adds	r3, r1, r3
 8014dea:	930b      	str	r3, [sp, #44]	; 0x2c
 8014dec:	e7f4      	b.n	8014dd8 <_strtod_l+0x1dc>
 8014dee:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014df0:	9b05      	ldr	r3, [sp, #20]
 8014df2:	4694      	mov	ip, r2
 8014df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014df6:	4463      	add	r3, ip
 8014df8:	9321      	str	r3, [sp, #132]	; 0x84
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	2a00      	cmp	r2, #0
 8014dfe:	d036      	beq.n	8014e6e <_strtod_l+0x272>
 8014e00:	4684      	mov	ip, r0
 8014e02:	9205      	str	r2, [sp, #20]
 8014e04:	001a      	movs	r2, r3
 8014e06:	3a30      	subs	r2, #48	; 0x30
 8014e08:	2a09      	cmp	r2, #9
 8014e0a:	d912      	bls.n	8014e32 <_strtod_l+0x236>
 8014e0c:	2201      	movs	r2, #1
 8014e0e:	9207      	str	r2, [sp, #28]
 8014e10:	e7b2      	b.n	8014d78 <_strtod_l+0x17c>
 8014e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e14:	3001      	adds	r0, #1
 8014e16:	1c5a      	adds	r2, r3, #1
 8014e18:	9221      	str	r2, [sp, #132]	; 0x84
 8014e1a:	785b      	ldrb	r3, [r3, #1]
 8014e1c:	2b30      	cmp	r3, #48	; 0x30
 8014e1e:	d0f8      	beq.n	8014e12 <_strtod_l+0x216>
 8014e20:	001a      	movs	r2, r3
 8014e22:	3a31      	subs	r2, #49	; 0x31
 8014e24:	2a08      	cmp	r2, #8
 8014e26:	d83c      	bhi.n	8014ea2 <_strtod_l+0x2a6>
 8014e28:	4684      	mov	ip, r0
 8014e2a:	2000      	movs	r0, #0
 8014e2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014e2e:	9005      	str	r0, [sp, #20]
 8014e30:	9212      	str	r2, [sp, #72]	; 0x48
 8014e32:	3b30      	subs	r3, #48	; 0x30
 8014e34:	1c42      	adds	r2, r0, #1
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d013      	beq.n	8014e62 <_strtod_l+0x266>
 8014e3a:	210a      	movs	r1, #10
 8014e3c:	4494      	add	ip, r2
 8014e3e:	9a05      	ldr	r2, [sp, #20]
 8014e40:	1885      	adds	r5, r0, r2
 8014e42:	42aa      	cmp	r2, r5
 8014e44:	d115      	bne.n	8014e72 <_strtod_l+0x276>
 8014e46:	9905      	ldr	r1, [sp, #20]
 8014e48:	9a05      	ldr	r2, [sp, #20]
 8014e4a:	3101      	adds	r1, #1
 8014e4c:	1809      	adds	r1, r1, r0
 8014e4e:	1812      	adds	r2, r2, r0
 8014e50:	9105      	str	r1, [sp, #20]
 8014e52:	2a08      	cmp	r2, #8
 8014e54:	dc1b      	bgt.n	8014e8e <_strtod_l+0x292>
 8014e56:	220a      	movs	r2, #10
 8014e58:	9908      	ldr	r1, [sp, #32]
 8014e5a:	434a      	muls	r2, r1
 8014e5c:	189b      	adds	r3, r3, r2
 8014e5e:	2200      	movs	r2, #0
 8014e60:	9308      	str	r3, [sp, #32]
 8014e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e64:	0010      	movs	r0, r2
 8014e66:	1c59      	adds	r1, r3, #1
 8014e68:	9121      	str	r1, [sp, #132]	; 0x84
 8014e6a:	785b      	ldrb	r3, [r3, #1]
 8014e6c:	e7ca      	b.n	8014e04 <_strtod_l+0x208>
 8014e6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8014e70:	e7d4      	b.n	8014e1c <_strtod_l+0x220>
 8014e72:	1c54      	adds	r4, r2, #1
 8014e74:	2a08      	cmp	r2, #8
 8014e76:	dc04      	bgt.n	8014e82 <_strtod_l+0x286>
 8014e78:	9a08      	ldr	r2, [sp, #32]
 8014e7a:	434a      	muls	r2, r1
 8014e7c:	9208      	str	r2, [sp, #32]
 8014e7e:	0022      	movs	r2, r4
 8014e80:	e7df      	b.n	8014e42 <_strtod_l+0x246>
 8014e82:	2c10      	cmp	r4, #16
 8014e84:	dcfb      	bgt.n	8014e7e <_strtod_l+0x282>
 8014e86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014e88:	434a      	muls	r2, r1
 8014e8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8014e8c:	e7f7      	b.n	8014e7e <_strtod_l+0x282>
 8014e8e:	9905      	ldr	r1, [sp, #20]
 8014e90:	2200      	movs	r2, #0
 8014e92:	2910      	cmp	r1, #16
 8014e94:	dce5      	bgt.n	8014e62 <_strtod_l+0x266>
 8014e96:	210a      	movs	r1, #10
 8014e98:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014e9a:	4341      	muls	r1, r0
 8014e9c:	185b      	adds	r3, r3, r1
 8014e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014ea0:	e7df      	b.n	8014e62 <_strtod_l+0x266>
 8014ea2:	2200      	movs	r2, #0
 8014ea4:	4694      	mov	ip, r2
 8014ea6:	9205      	str	r2, [sp, #20]
 8014ea8:	3201      	adds	r2, #1
 8014eaa:	e7b0      	b.n	8014e0e <_strtod_l+0x212>
 8014eac:	000c      	movs	r4, r1
 8014eae:	e77e      	b.n	8014dae <_strtod_l+0x1b2>
 8014eb0:	0801bf98 	.word	0x0801bf98
 8014eb4:	ffefffff 	.word	0xffefffff
 8014eb8:	00000433 	.word	0x00000433
 8014ebc:	7ff00000 	.word	0x7ff00000
 8014ec0:	7fffffff 	.word	0x7fffffff
 8014ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ec6:	1c5a      	adds	r2, r3, #1
 8014ec8:	9221      	str	r2, [sp, #132]	; 0x84
 8014eca:	785b      	ldrb	r3, [r3, #1]
 8014ecc:	2b30      	cmp	r3, #48	; 0x30
 8014ece:	d0f9      	beq.n	8014ec4 <_strtod_l+0x2c8>
 8014ed0:	001a      	movs	r2, r3
 8014ed2:	3a31      	subs	r2, #49	; 0x31
 8014ed4:	2100      	movs	r1, #0
 8014ed6:	2a08      	cmp	r2, #8
 8014ed8:	d816      	bhi.n	8014f08 <_strtod_l+0x30c>
 8014eda:	3b30      	subs	r3, #48	; 0x30
 8014edc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014ede:	930e      	str	r3, [sp, #56]	; 0x38
 8014ee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ee2:	1c59      	adds	r1, r3, #1
 8014ee4:	9121      	str	r1, [sp, #132]	; 0x84
 8014ee6:	785b      	ldrb	r3, [r3, #1]
 8014ee8:	001a      	movs	r2, r3
 8014eea:	3a30      	subs	r2, #48	; 0x30
 8014eec:	2a09      	cmp	r2, #9
 8014eee:	d932      	bls.n	8014f56 <_strtod_l+0x35a>
 8014ef0:	1b4a      	subs	r2, r1, r5
 8014ef2:	4dad      	ldr	r5, [pc, #692]	; (80151a8 <_strtod_l+0x5ac>)
 8014ef4:	0029      	movs	r1, r5
 8014ef6:	2a08      	cmp	r2, #8
 8014ef8:	dc03      	bgt.n	8014f02 <_strtod_l+0x306>
 8014efa:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014efc:	42a9      	cmp	r1, r5
 8014efe:	dd00      	ble.n	8014f02 <_strtod_l+0x306>
 8014f00:	0029      	movs	r1, r5
 8014f02:	2c00      	cmp	r4, #0
 8014f04:	d000      	beq.n	8014f08 <_strtod_l+0x30c>
 8014f06:	4249      	negs	r1, r1
 8014f08:	9a05      	ldr	r2, [sp, #20]
 8014f0a:	2a00      	cmp	r2, #0
 8014f0c:	d149      	bne.n	8014fa2 <_strtod_l+0x3a6>
 8014f0e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f10:	4310      	orrs	r0, r2
 8014f12:	d000      	beq.n	8014f16 <_strtod_l+0x31a>
 8014f14:	e6b3      	b.n	8014c7e <_strtod_l+0x82>
 8014f16:	9a07      	ldr	r2, [sp, #28]
 8014f18:	2a00      	cmp	r2, #0
 8014f1a:	d000      	beq.n	8014f1e <_strtod_l+0x322>
 8014f1c:	e6cf      	b.n	8014cbe <_strtod_l+0xc2>
 8014f1e:	2b4e      	cmp	r3, #78	; 0x4e
 8014f20:	d025      	beq.n	8014f6e <_strtod_l+0x372>
 8014f22:	dc1f      	bgt.n	8014f64 <_strtod_l+0x368>
 8014f24:	2b49      	cmp	r3, #73	; 0x49
 8014f26:	d000      	beq.n	8014f2a <_strtod_l+0x32e>
 8014f28:	e6c9      	b.n	8014cbe <_strtod_l+0xc2>
 8014f2a:	49a0      	ldr	r1, [pc, #640]	; (80151ac <_strtod_l+0x5b0>)
 8014f2c:	a821      	add	r0, sp, #132	; 0x84
 8014f2e:	f003 f9ed 	bl	801830c <__match>
 8014f32:	2800      	cmp	r0, #0
 8014f34:	d100      	bne.n	8014f38 <_strtod_l+0x33c>
 8014f36:	e6c2      	b.n	8014cbe <_strtod_l+0xc2>
 8014f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f3a:	499d      	ldr	r1, [pc, #628]	; (80151b0 <_strtod_l+0x5b4>)
 8014f3c:	3b01      	subs	r3, #1
 8014f3e:	a821      	add	r0, sp, #132	; 0x84
 8014f40:	9321      	str	r3, [sp, #132]	; 0x84
 8014f42:	f003 f9e3 	bl	801830c <__match>
 8014f46:	2800      	cmp	r0, #0
 8014f48:	d102      	bne.n	8014f50 <_strtod_l+0x354>
 8014f4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f4c:	3301      	adds	r3, #1
 8014f4e:	9321      	str	r3, [sp, #132]	; 0x84
 8014f50:	4f98      	ldr	r7, [pc, #608]	; (80151b4 <_strtod_l+0x5b8>)
 8014f52:	2600      	movs	r6, #0
 8014f54:	e693      	b.n	8014c7e <_strtod_l+0x82>
 8014f56:	220a      	movs	r2, #10
 8014f58:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014f5a:	434a      	muls	r2, r1
 8014f5c:	18d2      	adds	r2, r2, r3
 8014f5e:	3a30      	subs	r2, #48	; 0x30
 8014f60:	920e      	str	r2, [sp, #56]	; 0x38
 8014f62:	e7bd      	b.n	8014ee0 <_strtod_l+0x2e4>
 8014f64:	2b69      	cmp	r3, #105	; 0x69
 8014f66:	d0e0      	beq.n	8014f2a <_strtod_l+0x32e>
 8014f68:	2b6e      	cmp	r3, #110	; 0x6e
 8014f6a:	d000      	beq.n	8014f6e <_strtod_l+0x372>
 8014f6c:	e6a7      	b.n	8014cbe <_strtod_l+0xc2>
 8014f6e:	4992      	ldr	r1, [pc, #584]	; (80151b8 <_strtod_l+0x5bc>)
 8014f70:	a821      	add	r0, sp, #132	; 0x84
 8014f72:	f003 f9cb 	bl	801830c <__match>
 8014f76:	2800      	cmp	r0, #0
 8014f78:	d100      	bne.n	8014f7c <_strtod_l+0x380>
 8014f7a:	e6a0      	b.n	8014cbe <_strtod_l+0xc2>
 8014f7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	2b28      	cmp	r3, #40	; 0x28
 8014f82:	d10c      	bne.n	8014f9e <_strtod_l+0x3a2>
 8014f84:	aa24      	add	r2, sp, #144	; 0x90
 8014f86:	498d      	ldr	r1, [pc, #564]	; (80151bc <_strtod_l+0x5c0>)
 8014f88:	a821      	add	r0, sp, #132	; 0x84
 8014f8a:	f003 f9d3 	bl	8018334 <__hexnan>
 8014f8e:	2805      	cmp	r0, #5
 8014f90:	d105      	bne.n	8014f9e <_strtod_l+0x3a2>
 8014f92:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014f94:	4a87      	ldr	r2, [pc, #540]	; (80151b4 <_strtod_l+0x5b8>)
 8014f96:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014f98:	431a      	orrs	r2, r3
 8014f9a:	0017      	movs	r7, r2
 8014f9c:	e66f      	b.n	8014c7e <_strtod_l+0x82>
 8014f9e:	4f88      	ldr	r7, [pc, #544]	; (80151c0 <_strtod_l+0x5c4>)
 8014fa0:	e7d7      	b.n	8014f52 <_strtod_l+0x356>
 8014fa2:	4663      	mov	r3, ip
 8014fa4:	1acb      	subs	r3, r1, r3
 8014fa6:	9307      	str	r3, [sp, #28]
 8014fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d101      	bne.n	8014fb2 <_strtod_l+0x3b6>
 8014fae:	9b05      	ldr	r3, [sp, #20]
 8014fb0:	930a      	str	r3, [sp, #40]	; 0x28
 8014fb2:	9c05      	ldr	r4, [sp, #20]
 8014fb4:	2c10      	cmp	r4, #16
 8014fb6:	dd00      	ble.n	8014fba <_strtod_l+0x3be>
 8014fb8:	2410      	movs	r4, #16
 8014fba:	9808      	ldr	r0, [sp, #32]
 8014fbc:	f7ed fd80 	bl	8002ac0 <__aeabi_ui2d>
 8014fc0:	9b05      	ldr	r3, [sp, #20]
 8014fc2:	0006      	movs	r6, r0
 8014fc4:	000f      	movs	r7, r1
 8014fc6:	2b09      	cmp	r3, #9
 8014fc8:	dc15      	bgt.n	8014ff6 <_strtod_l+0x3fa>
 8014fca:	9b07      	ldr	r3, [sp, #28]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d100      	bne.n	8014fd2 <_strtod_l+0x3d6>
 8014fd0:	e655      	b.n	8014c7e <_strtod_l+0x82>
 8014fd2:	9b07      	ldr	r3, [sp, #28]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	dc00      	bgt.n	8014fda <_strtod_l+0x3de>
 8014fd8:	e07d      	b.n	80150d6 <_strtod_l+0x4da>
 8014fda:	2b16      	cmp	r3, #22
 8014fdc:	dc62      	bgt.n	80150a4 <_strtod_l+0x4a8>
 8014fde:	00dc      	lsls	r4, r3, #3
 8014fe0:	4b78      	ldr	r3, [pc, #480]	; (80151c4 <_strtod_l+0x5c8>)
 8014fe2:	0032      	movs	r2, r6
 8014fe4:	1919      	adds	r1, r3, r4
 8014fe6:	003b      	movs	r3, r7
 8014fe8:	6808      	ldr	r0, [r1, #0]
 8014fea:	6849      	ldr	r1, [r1, #4]
 8014fec:	f7ec ff22 	bl	8001e34 <__aeabi_dmul>
 8014ff0:	0006      	movs	r6, r0
 8014ff2:	000f      	movs	r7, r1
 8014ff4:	e643      	b.n	8014c7e <_strtod_l+0x82>
 8014ff6:	0022      	movs	r2, r4
 8014ff8:	4b72      	ldr	r3, [pc, #456]	; (80151c4 <_strtod_l+0x5c8>)
 8014ffa:	3a09      	subs	r2, #9
 8014ffc:	00d2      	lsls	r2, r2, #3
 8014ffe:	189b      	adds	r3, r3, r2
 8015000:	681a      	ldr	r2, [r3, #0]
 8015002:	685b      	ldr	r3, [r3, #4]
 8015004:	f7ec ff16 	bl	8001e34 <__aeabi_dmul>
 8015008:	0006      	movs	r6, r0
 801500a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801500c:	000f      	movs	r7, r1
 801500e:	f7ed fd57 	bl	8002ac0 <__aeabi_ui2d>
 8015012:	000b      	movs	r3, r1
 8015014:	0002      	movs	r2, r0
 8015016:	0039      	movs	r1, r7
 8015018:	0030      	movs	r0, r6
 801501a:	f7eb ffe5 	bl	8000fe8 <__aeabi_dadd>
 801501e:	9b05      	ldr	r3, [sp, #20]
 8015020:	0006      	movs	r6, r0
 8015022:	000f      	movs	r7, r1
 8015024:	2b0f      	cmp	r3, #15
 8015026:	ddd0      	ble.n	8014fca <_strtod_l+0x3ce>
 8015028:	9b05      	ldr	r3, [sp, #20]
 801502a:	1b1c      	subs	r4, r3, r4
 801502c:	9b07      	ldr	r3, [sp, #28]
 801502e:	18e4      	adds	r4, r4, r3
 8015030:	2c00      	cmp	r4, #0
 8015032:	dc00      	bgt.n	8015036 <_strtod_l+0x43a>
 8015034:	e094      	b.n	8015160 <_strtod_l+0x564>
 8015036:	230f      	movs	r3, #15
 8015038:	4023      	ands	r3, r4
 801503a:	d00a      	beq.n	8015052 <_strtod_l+0x456>
 801503c:	4961      	ldr	r1, [pc, #388]	; (80151c4 <_strtod_l+0x5c8>)
 801503e:	00db      	lsls	r3, r3, #3
 8015040:	18c9      	adds	r1, r1, r3
 8015042:	0032      	movs	r2, r6
 8015044:	6808      	ldr	r0, [r1, #0]
 8015046:	6849      	ldr	r1, [r1, #4]
 8015048:	003b      	movs	r3, r7
 801504a:	f7ec fef3 	bl	8001e34 <__aeabi_dmul>
 801504e:	0006      	movs	r6, r0
 8015050:	000f      	movs	r7, r1
 8015052:	230f      	movs	r3, #15
 8015054:	439c      	bics	r4, r3
 8015056:	d06e      	beq.n	8015136 <_strtod_l+0x53a>
 8015058:	3326      	adds	r3, #38	; 0x26
 801505a:	33ff      	adds	r3, #255	; 0xff
 801505c:	429c      	cmp	r4, r3
 801505e:	dd48      	ble.n	80150f2 <_strtod_l+0x4f6>
 8015060:	2400      	movs	r4, #0
 8015062:	9405      	str	r4, [sp, #20]
 8015064:	940b      	str	r4, [sp, #44]	; 0x2c
 8015066:	940a      	str	r4, [sp, #40]	; 0x28
 8015068:	2322      	movs	r3, #34	; 0x22
 801506a:	2600      	movs	r6, #0
 801506c:	9a04      	ldr	r2, [sp, #16]
 801506e:	4f51      	ldr	r7, [pc, #324]	; (80151b4 <_strtod_l+0x5b8>)
 8015070:	6013      	str	r3, [r2, #0]
 8015072:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015074:	42b3      	cmp	r3, r6
 8015076:	d100      	bne.n	801507a <_strtod_l+0x47e>
 8015078:	e601      	b.n	8014c7e <_strtod_l+0x82>
 801507a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801507c:	9804      	ldr	r0, [sp, #16]
 801507e:	f003 fa47 	bl	8018510 <_Bfree>
 8015082:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015084:	9804      	ldr	r0, [sp, #16]
 8015086:	f003 fa43 	bl	8018510 <_Bfree>
 801508a:	9905      	ldr	r1, [sp, #20]
 801508c:	9804      	ldr	r0, [sp, #16]
 801508e:	f003 fa3f 	bl	8018510 <_Bfree>
 8015092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015094:	9804      	ldr	r0, [sp, #16]
 8015096:	f003 fa3b 	bl	8018510 <_Bfree>
 801509a:	0021      	movs	r1, r4
 801509c:	9804      	ldr	r0, [sp, #16]
 801509e:	f003 fa37 	bl	8018510 <_Bfree>
 80150a2:	e5ec      	b.n	8014c7e <_strtod_l+0x82>
 80150a4:	2325      	movs	r3, #37	; 0x25
 80150a6:	9a05      	ldr	r2, [sp, #20]
 80150a8:	1a9b      	subs	r3, r3, r2
 80150aa:	9a07      	ldr	r2, [sp, #28]
 80150ac:	4293      	cmp	r3, r2
 80150ae:	dbbb      	blt.n	8015028 <_strtod_l+0x42c>
 80150b0:	230f      	movs	r3, #15
 80150b2:	9a05      	ldr	r2, [sp, #20]
 80150b4:	4c43      	ldr	r4, [pc, #268]	; (80151c4 <_strtod_l+0x5c8>)
 80150b6:	1a9d      	subs	r5, r3, r2
 80150b8:	00e9      	lsls	r1, r5, #3
 80150ba:	1861      	adds	r1, r4, r1
 80150bc:	0032      	movs	r2, r6
 80150be:	6808      	ldr	r0, [r1, #0]
 80150c0:	6849      	ldr	r1, [r1, #4]
 80150c2:	003b      	movs	r3, r7
 80150c4:	f7ec feb6 	bl	8001e34 <__aeabi_dmul>
 80150c8:	9b07      	ldr	r3, [sp, #28]
 80150ca:	1b5e      	subs	r6, r3, r5
 80150cc:	00f6      	lsls	r6, r6, #3
 80150ce:	19a6      	adds	r6, r4, r6
 80150d0:	6832      	ldr	r2, [r6, #0]
 80150d2:	6873      	ldr	r3, [r6, #4]
 80150d4:	e78a      	b.n	8014fec <_strtod_l+0x3f0>
 80150d6:	9b07      	ldr	r3, [sp, #28]
 80150d8:	3316      	adds	r3, #22
 80150da:	dba5      	blt.n	8015028 <_strtod_l+0x42c>
 80150dc:	9b07      	ldr	r3, [sp, #28]
 80150de:	0030      	movs	r0, r6
 80150e0:	00da      	lsls	r2, r3, #3
 80150e2:	4b38      	ldr	r3, [pc, #224]	; (80151c4 <_strtod_l+0x5c8>)
 80150e4:	0039      	movs	r1, r7
 80150e6:	1a9b      	subs	r3, r3, r2
 80150e8:	681a      	ldr	r2, [r3, #0]
 80150ea:	685b      	ldr	r3, [r3, #4]
 80150ec:	f7ec fa98 	bl	8001620 <__aeabi_ddiv>
 80150f0:	e77e      	b.n	8014ff0 <_strtod_l+0x3f4>
 80150f2:	2300      	movs	r3, #0
 80150f4:	0030      	movs	r0, r6
 80150f6:	0039      	movs	r1, r7
 80150f8:	001d      	movs	r5, r3
 80150fa:	1124      	asrs	r4, r4, #4
 80150fc:	2c01      	cmp	r4, #1
 80150fe:	dc1d      	bgt.n	801513c <_strtod_l+0x540>
 8015100:	2b00      	cmp	r3, #0
 8015102:	d001      	beq.n	8015108 <_strtod_l+0x50c>
 8015104:	0006      	movs	r6, r0
 8015106:	000f      	movs	r7, r1
 8015108:	4b2f      	ldr	r3, [pc, #188]	; (80151c8 <_strtod_l+0x5cc>)
 801510a:	00ed      	lsls	r5, r5, #3
 801510c:	18ff      	adds	r7, r7, r3
 801510e:	4b2f      	ldr	r3, [pc, #188]	; (80151cc <_strtod_l+0x5d0>)
 8015110:	0032      	movs	r2, r6
 8015112:	195d      	adds	r5, r3, r5
 8015114:	6828      	ldr	r0, [r5, #0]
 8015116:	6869      	ldr	r1, [r5, #4]
 8015118:	003b      	movs	r3, r7
 801511a:	f7ec fe8b 	bl	8001e34 <__aeabi_dmul>
 801511e:	4b25      	ldr	r3, [pc, #148]	; (80151b4 <_strtod_l+0x5b8>)
 8015120:	4a2b      	ldr	r2, [pc, #172]	; (80151d0 <_strtod_l+0x5d4>)
 8015122:	0006      	movs	r6, r0
 8015124:	400b      	ands	r3, r1
 8015126:	4293      	cmp	r3, r2
 8015128:	d89a      	bhi.n	8015060 <_strtod_l+0x464>
 801512a:	4a2a      	ldr	r2, [pc, #168]	; (80151d4 <_strtod_l+0x5d8>)
 801512c:	4293      	cmp	r3, r2
 801512e:	d913      	bls.n	8015158 <_strtod_l+0x55c>
 8015130:	2601      	movs	r6, #1
 8015132:	4f29      	ldr	r7, [pc, #164]	; (80151d8 <_strtod_l+0x5dc>)
 8015134:	4276      	negs	r6, r6
 8015136:	2300      	movs	r3, #0
 8015138:	9306      	str	r3, [sp, #24]
 801513a:	e07b      	b.n	8015234 <_strtod_l+0x638>
 801513c:	2201      	movs	r2, #1
 801513e:	4214      	tst	r4, r2
 8015140:	d007      	beq.n	8015152 <_strtod_l+0x556>
 8015142:	4a22      	ldr	r2, [pc, #136]	; (80151cc <_strtod_l+0x5d0>)
 8015144:	00eb      	lsls	r3, r5, #3
 8015146:	189b      	adds	r3, r3, r2
 8015148:	681a      	ldr	r2, [r3, #0]
 801514a:	685b      	ldr	r3, [r3, #4]
 801514c:	f7ec fe72 	bl	8001e34 <__aeabi_dmul>
 8015150:	2301      	movs	r3, #1
 8015152:	3501      	adds	r5, #1
 8015154:	1064      	asrs	r4, r4, #1
 8015156:	e7d1      	b.n	80150fc <_strtod_l+0x500>
 8015158:	23d4      	movs	r3, #212	; 0xd4
 801515a:	049b      	lsls	r3, r3, #18
 801515c:	18cf      	adds	r7, r1, r3
 801515e:	e7ea      	b.n	8015136 <_strtod_l+0x53a>
 8015160:	2c00      	cmp	r4, #0
 8015162:	d0e8      	beq.n	8015136 <_strtod_l+0x53a>
 8015164:	230f      	movs	r3, #15
 8015166:	4264      	negs	r4, r4
 8015168:	4023      	ands	r3, r4
 801516a:	d00a      	beq.n	8015182 <_strtod_l+0x586>
 801516c:	4a15      	ldr	r2, [pc, #84]	; (80151c4 <_strtod_l+0x5c8>)
 801516e:	00db      	lsls	r3, r3, #3
 8015170:	18d3      	adds	r3, r2, r3
 8015172:	0030      	movs	r0, r6
 8015174:	681a      	ldr	r2, [r3, #0]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	0039      	movs	r1, r7
 801517a:	f7ec fa51 	bl	8001620 <__aeabi_ddiv>
 801517e:	0006      	movs	r6, r0
 8015180:	000f      	movs	r7, r1
 8015182:	1124      	asrs	r4, r4, #4
 8015184:	d0d7      	beq.n	8015136 <_strtod_l+0x53a>
 8015186:	2c1f      	cmp	r4, #31
 8015188:	dd28      	ble.n	80151dc <_strtod_l+0x5e0>
 801518a:	2400      	movs	r4, #0
 801518c:	9405      	str	r4, [sp, #20]
 801518e:	940b      	str	r4, [sp, #44]	; 0x2c
 8015190:	940a      	str	r4, [sp, #40]	; 0x28
 8015192:	2322      	movs	r3, #34	; 0x22
 8015194:	9a04      	ldr	r2, [sp, #16]
 8015196:	2600      	movs	r6, #0
 8015198:	6013      	str	r3, [r2, #0]
 801519a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801519c:	2700      	movs	r7, #0
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d000      	beq.n	80151a4 <_strtod_l+0x5a8>
 80151a2:	e76a      	b.n	801507a <_strtod_l+0x47e>
 80151a4:	e56b      	b.n	8014c7e <_strtod_l+0x82>
 80151a6:	46c0      	nop			; (mov r8, r8)
 80151a8:	00004e1f 	.word	0x00004e1f
 80151ac:	0801bfed 	.word	0x0801bfed
 80151b0:	0801c140 	.word	0x0801c140
 80151b4:	7ff00000 	.word	0x7ff00000
 80151b8:	0801bff5 	.word	0x0801bff5
 80151bc:	0801bfac 	.word	0x0801bfac
 80151c0:	fff80000 	.word	0xfff80000
 80151c4:	0801c178 	.word	0x0801c178
 80151c8:	fcb00000 	.word	0xfcb00000
 80151cc:	0801c150 	.word	0x0801c150
 80151d0:	7ca00000 	.word	0x7ca00000
 80151d4:	7c900000 	.word	0x7c900000
 80151d8:	7fefffff 	.word	0x7fefffff
 80151dc:	2310      	movs	r3, #16
 80151de:	4023      	ands	r3, r4
 80151e0:	9306      	str	r3, [sp, #24]
 80151e2:	d001      	beq.n	80151e8 <_strtod_l+0x5ec>
 80151e4:	236a      	movs	r3, #106	; 0x6a
 80151e6:	9306      	str	r3, [sp, #24]
 80151e8:	2300      	movs	r3, #0
 80151ea:	0030      	movs	r0, r6
 80151ec:	0039      	movs	r1, r7
 80151ee:	001d      	movs	r5, r3
 80151f0:	2c00      	cmp	r4, #0
 80151f2:	dd00      	ble.n	80151f6 <_strtod_l+0x5fa>
 80151f4:	e10e      	b.n	8015414 <_strtod_l+0x818>
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d001      	beq.n	80151fe <_strtod_l+0x602>
 80151fa:	0006      	movs	r6, r0
 80151fc:	000f      	movs	r7, r1
 80151fe:	9b06      	ldr	r3, [sp, #24]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d00f      	beq.n	8015224 <_strtod_l+0x628>
 8015204:	236b      	movs	r3, #107	; 0x6b
 8015206:	0079      	lsls	r1, r7, #1
 8015208:	0d49      	lsrs	r1, r1, #21
 801520a:	003a      	movs	r2, r7
 801520c:	1a5b      	subs	r3, r3, r1
 801520e:	2b00      	cmp	r3, #0
 8015210:	dd08      	ble.n	8015224 <_strtod_l+0x628>
 8015212:	2b1f      	cmp	r3, #31
 8015214:	dc00      	bgt.n	8015218 <_strtod_l+0x61c>
 8015216:	e112      	b.n	801543e <_strtod_l+0x842>
 8015218:	2600      	movs	r6, #0
 801521a:	2b34      	cmp	r3, #52	; 0x34
 801521c:	dc00      	bgt.n	8015220 <_strtod_l+0x624>
 801521e:	e107      	b.n	8015430 <_strtod_l+0x834>
 8015220:	27dc      	movs	r7, #220	; 0xdc
 8015222:	04bf      	lsls	r7, r7, #18
 8015224:	2200      	movs	r2, #0
 8015226:	2300      	movs	r3, #0
 8015228:	0030      	movs	r0, r6
 801522a:	0039      	movs	r1, r7
 801522c:	f7eb f916 	bl	800045c <__aeabi_dcmpeq>
 8015230:	2800      	cmp	r0, #0
 8015232:	d1aa      	bne.n	801518a <_strtod_l+0x58e>
 8015234:	9b08      	ldr	r3, [sp, #32]
 8015236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015238:	9300      	str	r3, [sp, #0]
 801523a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801523c:	9b05      	ldr	r3, [sp, #20]
 801523e:	9804      	ldr	r0, [sp, #16]
 8015240:	f003 f9ae 	bl	80185a0 <__s2b>
 8015244:	900b      	str	r0, [sp, #44]	; 0x2c
 8015246:	2800      	cmp	r0, #0
 8015248:	d100      	bne.n	801524c <_strtod_l+0x650>
 801524a:	e709      	b.n	8015060 <_strtod_l+0x464>
 801524c:	9b07      	ldr	r3, [sp, #28]
 801524e:	9a07      	ldr	r2, [sp, #28]
 8015250:	17db      	asrs	r3, r3, #31
 8015252:	4252      	negs	r2, r2
 8015254:	4013      	ands	r3, r2
 8015256:	9315      	str	r3, [sp, #84]	; 0x54
 8015258:	9b07      	ldr	r3, [sp, #28]
 801525a:	2400      	movs	r4, #0
 801525c:	43db      	mvns	r3, r3
 801525e:	9a07      	ldr	r2, [sp, #28]
 8015260:	17db      	asrs	r3, r3, #31
 8015262:	401a      	ands	r2, r3
 8015264:	921c      	str	r2, [sp, #112]	; 0x70
 8015266:	9405      	str	r4, [sp, #20]
 8015268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801526a:	9804      	ldr	r0, [sp, #16]
 801526c:	6859      	ldr	r1, [r3, #4]
 801526e:	f003 f927 	bl	80184c0 <_Balloc>
 8015272:	900a      	str	r0, [sp, #40]	; 0x28
 8015274:	2800      	cmp	r0, #0
 8015276:	d100      	bne.n	801527a <_strtod_l+0x67e>
 8015278:	e6f6      	b.n	8015068 <_strtod_l+0x46c>
 801527a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801527c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801527e:	691b      	ldr	r3, [r3, #16]
 8015280:	310c      	adds	r1, #12
 8015282:	1c9a      	adds	r2, r3, #2
 8015284:	0092      	lsls	r2, r2, #2
 8015286:	300c      	adds	r0, #12
 8015288:	9308      	str	r3, [sp, #32]
 801528a:	f7ff fa00 	bl	801468e <memcpy>
 801528e:	ab24      	add	r3, sp, #144	; 0x90
 8015290:	9301      	str	r3, [sp, #4]
 8015292:	ab23      	add	r3, sp, #140	; 0x8c
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	0032      	movs	r2, r6
 8015298:	003b      	movs	r3, r7
 801529a:	9804      	ldr	r0, [sp, #16]
 801529c:	960e      	str	r6, [sp, #56]	; 0x38
 801529e:	970f      	str	r7, [sp, #60]	; 0x3c
 80152a0:	f003 fc22 	bl	8018ae8 <__d2b>
 80152a4:	9022      	str	r0, [sp, #136]	; 0x88
 80152a6:	2800      	cmp	r0, #0
 80152a8:	d100      	bne.n	80152ac <_strtod_l+0x6b0>
 80152aa:	e6dd      	b.n	8015068 <_strtod_l+0x46c>
 80152ac:	2101      	movs	r1, #1
 80152ae:	9804      	ldr	r0, [sp, #16]
 80152b0:	f003 f9fd 	bl	80186ae <__i2b>
 80152b4:	9005      	str	r0, [sp, #20]
 80152b6:	2800      	cmp	r0, #0
 80152b8:	d100      	bne.n	80152bc <_strtod_l+0x6c0>
 80152ba:	e6d5      	b.n	8015068 <_strtod_l+0x46c>
 80152bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80152be:	2b00      	cmp	r3, #0
 80152c0:	da00      	bge.n	80152c4 <_strtod_l+0x6c8>
 80152c2:	e0c1      	b.n	8015448 <_strtod_l+0x84c>
 80152c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80152c6:	189d      	adds	r5, r3, r2
 80152c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80152ca:	4694      	mov	ip, r2
 80152cc:	9906      	ldr	r1, [sp, #24]
 80152ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80152d0:	1a5b      	subs	r3, r3, r1
 80152d2:	2136      	movs	r1, #54	; 0x36
 80152d4:	189b      	adds	r3, r3, r2
 80152d6:	1a8a      	subs	r2, r1, r2
 80152d8:	49b2      	ldr	r1, [pc, #712]	; (80155a4 <_strtod_l+0x9a8>)
 80152da:	3b01      	subs	r3, #1
 80152dc:	2001      	movs	r0, #1
 80152de:	428b      	cmp	r3, r1
 80152e0:	db00      	blt.n	80152e4 <_strtod_l+0x6e8>
 80152e2:	e0bd      	b.n	8015460 <_strtod_l+0x864>
 80152e4:	1ac9      	subs	r1, r1, r3
 80152e6:	1a52      	subs	r2, r2, r1
 80152e8:	291f      	cmp	r1, #31
 80152ea:	dd00      	ble.n	80152ee <_strtod_l+0x6f2>
 80152ec:	e0b1      	b.n	8015452 <_strtod_l+0x856>
 80152ee:	4088      	lsls	r0, r1
 80152f0:	2300      	movs	r3, #0
 80152f2:	9014      	str	r0, [sp, #80]	; 0x50
 80152f4:	9310      	str	r3, [sp, #64]	; 0x40
 80152f6:	18ab      	adds	r3, r5, r2
 80152f8:	9308      	str	r3, [sp, #32]
 80152fa:	0013      	movs	r3, r2
 80152fc:	9a06      	ldr	r2, [sp, #24]
 80152fe:	4463      	add	r3, ip
 8015300:	18d3      	adds	r3, r2, r3
 8015302:	9a08      	ldr	r2, [sp, #32]
 8015304:	930c      	str	r3, [sp, #48]	; 0x30
 8015306:	002b      	movs	r3, r5
 8015308:	4295      	cmp	r5, r2
 801530a:	dd00      	ble.n	801530e <_strtod_l+0x712>
 801530c:	0013      	movs	r3, r2
 801530e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015310:	4293      	cmp	r3, r2
 8015312:	dd00      	ble.n	8015316 <_strtod_l+0x71a>
 8015314:	0013      	movs	r3, r2
 8015316:	2b00      	cmp	r3, #0
 8015318:	dd06      	ble.n	8015328 <_strtod_l+0x72c>
 801531a:	9a08      	ldr	r2, [sp, #32]
 801531c:	1aed      	subs	r5, r5, r3
 801531e:	1ad2      	subs	r2, r2, r3
 8015320:	9208      	str	r2, [sp, #32]
 8015322:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015324:	1ad2      	subs	r2, r2, r3
 8015326:	920c      	str	r2, [sp, #48]	; 0x30
 8015328:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801532a:	2b00      	cmp	r3, #0
 801532c:	d017      	beq.n	801535e <_strtod_l+0x762>
 801532e:	001a      	movs	r2, r3
 8015330:	9905      	ldr	r1, [sp, #20]
 8015332:	9804      	ldr	r0, [sp, #16]
 8015334:	f003 fa54 	bl	80187e0 <__pow5mult>
 8015338:	9005      	str	r0, [sp, #20]
 801533a:	2800      	cmp	r0, #0
 801533c:	d100      	bne.n	8015340 <_strtod_l+0x744>
 801533e:	e693      	b.n	8015068 <_strtod_l+0x46c>
 8015340:	0001      	movs	r1, r0
 8015342:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8015344:	9804      	ldr	r0, [sp, #16]
 8015346:	f003 f9bb 	bl	80186c0 <__multiply>
 801534a:	9012      	str	r0, [sp, #72]	; 0x48
 801534c:	2800      	cmp	r0, #0
 801534e:	d100      	bne.n	8015352 <_strtod_l+0x756>
 8015350:	e68a      	b.n	8015068 <_strtod_l+0x46c>
 8015352:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015354:	9804      	ldr	r0, [sp, #16]
 8015356:	f003 f8db 	bl	8018510 <_Bfree>
 801535a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801535c:	9322      	str	r3, [sp, #136]	; 0x88
 801535e:	9b08      	ldr	r3, [sp, #32]
 8015360:	2b00      	cmp	r3, #0
 8015362:	dd00      	ble.n	8015366 <_strtod_l+0x76a>
 8015364:	e07f      	b.n	8015466 <_strtod_l+0x86a>
 8015366:	9b07      	ldr	r3, [sp, #28]
 8015368:	2b00      	cmp	r3, #0
 801536a:	dd08      	ble.n	801537e <_strtod_l+0x782>
 801536c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801536e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015370:	9804      	ldr	r0, [sp, #16]
 8015372:	f003 fa35 	bl	80187e0 <__pow5mult>
 8015376:	900a      	str	r0, [sp, #40]	; 0x28
 8015378:	2800      	cmp	r0, #0
 801537a:	d100      	bne.n	801537e <_strtod_l+0x782>
 801537c:	e674      	b.n	8015068 <_strtod_l+0x46c>
 801537e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015380:	2b00      	cmp	r3, #0
 8015382:	dd08      	ble.n	8015396 <_strtod_l+0x79a>
 8015384:	001a      	movs	r2, r3
 8015386:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015388:	9804      	ldr	r0, [sp, #16]
 801538a:	f003 fa6b 	bl	8018864 <__lshift>
 801538e:	900a      	str	r0, [sp, #40]	; 0x28
 8015390:	2800      	cmp	r0, #0
 8015392:	d100      	bne.n	8015396 <_strtod_l+0x79a>
 8015394:	e668      	b.n	8015068 <_strtod_l+0x46c>
 8015396:	2d00      	cmp	r5, #0
 8015398:	dd08      	ble.n	80153ac <_strtod_l+0x7b0>
 801539a:	002a      	movs	r2, r5
 801539c:	9905      	ldr	r1, [sp, #20]
 801539e:	9804      	ldr	r0, [sp, #16]
 80153a0:	f003 fa60 	bl	8018864 <__lshift>
 80153a4:	9005      	str	r0, [sp, #20]
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d100      	bne.n	80153ac <_strtod_l+0x7b0>
 80153aa:	e65d      	b.n	8015068 <_strtod_l+0x46c>
 80153ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153ae:	9922      	ldr	r1, [sp, #136]	; 0x88
 80153b0:	9804      	ldr	r0, [sp, #16]
 80153b2:	f003 fac3 	bl	801893c <__mdiff>
 80153b6:	1e04      	subs	r4, r0, #0
 80153b8:	d100      	bne.n	80153bc <_strtod_l+0x7c0>
 80153ba:	e655      	b.n	8015068 <_strtod_l+0x46c>
 80153bc:	2500      	movs	r5, #0
 80153be:	68c3      	ldr	r3, [r0, #12]
 80153c0:	9905      	ldr	r1, [sp, #20]
 80153c2:	60c5      	str	r5, [r0, #12]
 80153c4:	9312      	str	r3, [sp, #72]	; 0x48
 80153c6:	f003 fa9f 	bl	8018908 <__mcmp>
 80153ca:	42a8      	cmp	r0, r5
 80153cc:	da55      	bge.n	801547a <_strtod_l+0x87e>
 80153ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80153d0:	42ab      	cmp	r3, r5
 80153d2:	d11b      	bne.n	801540c <_strtod_l+0x810>
 80153d4:	42ae      	cmp	r6, r5
 80153d6:	d119      	bne.n	801540c <_strtod_l+0x810>
 80153d8:	033b      	lsls	r3, r7, #12
 80153da:	42ab      	cmp	r3, r5
 80153dc:	d116      	bne.n	801540c <_strtod_l+0x810>
 80153de:	22d6      	movs	r2, #214	; 0xd6
 80153e0:	4b71      	ldr	r3, [pc, #452]	; (80155a8 <_strtod_l+0x9ac>)
 80153e2:	04d2      	lsls	r2, r2, #19
 80153e4:	403b      	ands	r3, r7
 80153e6:	4293      	cmp	r3, r2
 80153e8:	d910      	bls.n	801540c <_strtod_l+0x810>
 80153ea:	6963      	ldr	r3, [r4, #20]
 80153ec:	42ab      	cmp	r3, r5
 80153ee:	d102      	bne.n	80153f6 <_strtod_l+0x7fa>
 80153f0:	6923      	ldr	r3, [r4, #16]
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	dd0a      	ble.n	801540c <_strtod_l+0x810>
 80153f6:	0021      	movs	r1, r4
 80153f8:	2201      	movs	r2, #1
 80153fa:	9804      	ldr	r0, [sp, #16]
 80153fc:	f003 fa32 	bl	8018864 <__lshift>
 8015400:	9905      	ldr	r1, [sp, #20]
 8015402:	0004      	movs	r4, r0
 8015404:	f003 fa80 	bl	8018908 <__mcmp>
 8015408:	2800      	cmp	r0, #0
 801540a:	dc6b      	bgt.n	80154e4 <_strtod_l+0x8e8>
 801540c:	9b06      	ldr	r3, [sp, #24]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d178      	bne.n	8015504 <_strtod_l+0x908>
 8015412:	e632      	b.n	801507a <_strtod_l+0x47e>
 8015414:	2201      	movs	r2, #1
 8015416:	4214      	tst	r4, r2
 8015418:	d007      	beq.n	801542a <_strtod_l+0x82e>
 801541a:	4a64      	ldr	r2, [pc, #400]	; (80155ac <_strtod_l+0x9b0>)
 801541c:	00eb      	lsls	r3, r5, #3
 801541e:	18d3      	adds	r3, r2, r3
 8015420:	681a      	ldr	r2, [r3, #0]
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	f7ec fd06 	bl	8001e34 <__aeabi_dmul>
 8015428:	2301      	movs	r3, #1
 801542a:	3501      	adds	r5, #1
 801542c:	1064      	asrs	r4, r4, #1
 801542e:	e6df      	b.n	80151f0 <_strtod_l+0x5f4>
 8015430:	2101      	movs	r1, #1
 8015432:	3b20      	subs	r3, #32
 8015434:	4249      	negs	r1, r1
 8015436:	4099      	lsls	r1, r3
 8015438:	400a      	ands	r2, r1
 801543a:	0017      	movs	r7, r2
 801543c:	e6f2      	b.n	8015224 <_strtod_l+0x628>
 801543e:	2201      	movs	r2, #1
 8015440:	4252      	negs	r2, r2
 8015442:	409a      	lsls	r2, r3
 8015444:	4016      	ands	r6, r2
 8015446:	e6ed      	b.n	8015224 <_strtod_l+0x628>
 8015448:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801544a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801544c:	1ad2      	subs	r2, r2, r3
 801544e:	4694      	mov	ip, r2
 8015450:	e73c      	b.n	80152cc <_strtod_l+0x6d0>
 8015452:	4957      	ldr	r1, [pc, #348]	; (80155b0 <_strtod_l+0x9b4>)
 8015454:	1acb      	subs	r3, r1, r3
 8015456:	0001      	movs	r1, r0
 8015458:	4099      	lsls	r1, r3
 801545a:	9110      	str	r1, [sp, #64]	; 0x40
 801545c:	9014      	str	r0, [sp, #80]	; 0x50
 801545e:	e74a      	b.n	80152f6 <_strtod_l+0x6fa>
 8015460:	2300      	movs	r3, #0
 8015462:	9310      	str	r3, [sp, #64]	; 0x40
 8015464:	e7fa      	b.n	801545c <_strtod_l+0x860>
 8015466:	9a08      	ldr	r2, [sp, #32]
 8015468:	9922      	ldr	r1, [sp, #136]	; 0x88
 801546a:	9804      	ldr	r0, [sp, #16]
 801546c:	f003 f9fa 	bl	8018864 <__lshift>
 8015470:	9022      	str	r0, [sp, #136]	; 0x88
 8015472:	2800      	cmp	r0, #0
 8015474:	d000      	beq.n	8015478 <_strtod_l+0x87c>
 8015476:	e776      	b.n	8015366 <_strtod_l+0x76a>
 8015478:	e5f6      	b.n	8015068 <_strtod_l+0x46c>
 801547a:	970c      	str	r7, [sp, #48]	; 0x30
 801547c:	2800      	cmp	r0, #0
 801547e:	d000      	beq.n	8015482 <_strtod_l+0x886>
 8015480:	e0a0      	b.n	80155c4 <_strtod_l+0x9c8>
 8015482:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015484:	033b      	lsls	r3, r7, #12
 8015486:	0b1b      	lsrs	r3, r3, #12
 8015488:	2a00      	cmp	r2, #0
 801548a:	d027      	beq.n	80154dc <_strtod_l+0x8e0>
 801548c:	4a49      	ldr	r2, [pc, #292]	; (80155b4 <_strtod_l+0x9b8>)
 801548e:	4293      	cmp	r3, r2
 8015490:	d157      	bne.n	8015542 <_strtod_l+0x946>
 8015492:	2201      	movs	r2, #1
 8015494:	9b06      	ldr	r3, [sp, #24]
 8015496:	4252      	negs	r2, r2
 8015498:	0031      	movs	r1, r6
 801549a:	0010      	movs	r0, r2
 801549c:	2b00      	cmp	r3, #0
 801549e:	d00b      	beq.n	80154b8 <_strtod_l+0x8bc>
 80154a0:	25d4      	movs	r5, #212	; 0xd4
 80154a2:	4b41      	ldr	r3, [pc, #260]	; (80155a8 <_strtod_l+0x9ac>)
 80154a4:	04ed      	lsls	r5, r5, #19
 80154a6:	403b      	ands	r3, r7
 80154a8:	0010      	movs	r0, r2
 80154aa:	42ab      	cmp	r3, r5
 80154ac:	d804      	bhi.n	80154b8 <_strtod_l+0x8bc>
 80154ae:	306c      	adds	r0, #108	; 0x6c
 80154b0:	0d1b      	lsrs	r3, r3, #20
 80154b2:	1ac3      	subs	r3, r0, r3
 80154b4:	409a      	lsls	r2, r3
 80154b6:	0010      	movs	r0, r2
 80154b8:	4281      	cmp	r1, r0
 80154ba:	d142      	bne.n	8015542 <_strtod_l+0x946>
 80154bc:	4b3e      	ldr	r3, [pc, #248]	; (80155b8 <_strtod_l+0x9bc>)
 80154be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d102      	bne.n	80154ca <_strtod_l+0x8ce>
 80154c4:	1c4b      	adds	r3, r1, #1
 80154c6:	d100      	bne.n	80154ca <_strtod_l+0x8ce>
 80154c8:	e5ce      	b.n	8015068 <_strtod_l+0x46c>
 80154ca:	4b37      	ldr	r3, [pc, #220]	; (80155a8 <_strtod_l+0x9ac>)
 80154cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154ce:	2600      	movs	r6, #0
 80154d0:	401a      	ands	r2, r3
 80154d2:	0013      	movs	r3, r2
 80154d4:	2280      	movs	r2, #128	; 0x80
 80154d6:	0352      	lsls	r2, r2, #13
 80154d8:	189f      	adds	r7, r3, r2
 80154da:	e797      	b.n	801540c <_strtod_l+0x810>
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d130      	bne.n	8015542 <_strtod_l+0x946>
 80154e0:	2e00      	cmp	r6, #0
 80154e2:	d12e      	bne.n	8015542 <_strtod_l+0x946>
 80154e4:	9906      	ldr	r1, [sp, #24]
 80154e6:	003b      	movs	r3, r7
 80154e8:	4a2f      	ldr	r2, [pc, #188]	; (80155a8 <_strtod_l+0x9ac>)
 80154ea:	2900      	cmp	r1, #0
 80154ec:	d020      	beq.n	8015530 <_strtod_l+0x934>
 80154ee:	0011      	movs	r1, r2
 80154f0:	20d6      	movs	r0, #214	; 0xd6
 80154f2:	4039      	ands	r1, r7
 80154f4:	04c0      	lsls	r0, r0, #19
 80154f6:	4281      	cmp	r1, r0
 80154f8:	dc1a      	bgt.n	8015530 <_strtod_l+0x934>
 80154fa:	23dc      	movs	r3, #220	; 0xdc
 80154fc:	049b      	lsls	r3, r3, #18
 80154fe:	4299      	cmp	r1, r3
 8015500:	dc00      	bgt.n	8015504 <_strtod_l+0x908>
 8015502:	e646      	b.n	8015192 <_strtod_l+0x596>
 8015504:	4b2d      	ldr	r3, [pc, #180]	; (80155bc <_strtod_l+0x9c0>)
 8015506:	0030      	movs	r0, r6
 8015508:	931b      	str	r3, [sp, #108]	; 0x6c
 801550a:	2300      	movs	r3, #0
 801550c:	931a      	str	r3, [sp, #104]	; 0x68
 801550e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015510:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015512:	0039      	movs	r1, r7
 8015514:	f7ec fc8e 	bl	8001e34 <__aeabi_dmul>
 8015518:	0006      	movs	r6, r0
 801551a:	000f      	movs	r7, r1
 801551c:	1e0b      	subs	r3, r1, #0
 801551e:	d000      	beq.n	8015522 <_strtod_l+0x926>
 8015520:	e5ab      	b.n	801507a <_strtod_l+0x47e>
 8015522:	2800      	cmp	r0, #0
 8015524:	d000      	beq.n	8015528 <_strtod_l+0x92c>
 8015526:	e5a8      	b.n	801507a <_strtod_l+0x47e>
 8015528:	9a04      	ldr	r2, [sp, #16]
 801552a:	3322      	adds	r3, #34	; 0x22
 801552c:	6013      	str	r3, [r2, #0]
 801552e:	e5a4      	b.n	801507a <_strtod_l+0x47e>
 8015530:	2601      	movs	r6, #1
 8015532:	4013      	ands	r3, r2
 8015534:	4a22      	ldr	r2, [pc, #136]	; (80155c0 <_strtod_l+0x9c4>)
 8015536:	4276      	negs	r6, r6
 8015538:	189b      	adds	r3, r3, r2
 801553a:	4a1e      	ldr	r2, [pc, #120]	; (80155b4 <_strtod_l+0x9b8>)
 801553c:	431a      	orrs	r2, r3
 801553e:	0017      	movs	r7, r2
 8015540:	e764      	b.n	801540c <_strtod_l+0x810>
 8015542:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015544:	2b00      	cmp	r3, #0
 8015546:	d015      	beq.n	8015574 <_strtod_l+0x978>
 8015548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801554a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801554c:	4213      	tst	r3, r2
 801554e:	d100      	bne.n	8015552 <_strtod_l+0x956>
 8015550:	e75c      	b.n	801540c <_strtod_l+0x810>
 8015552:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015554:	9a06      	ldr	r2, [sp, #24]
 8015556:	0030      	movs	r0, r6
 8015558:	0039      	movs	r1, r7
 801555a:	2b00      	cmp	r3, #0
 801555c:	d00f      	beq.n	801557e <_strtod_l+0x982>
 801555e:	f7ff fb35 	bl	8014bcc <sulp>
 8015562:	0002      	movs	r2, r0
 8015564:	000b      	movs	r3, r1
 8015566:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015568:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801556a:	f7eb fd3d 	bl	8000fe8 <__aeabi_dadd>
 801556e:	0006      	movs	r6, r0
 8015570:	000f      	movs	r7, r1
 8015572:	e74b      	b.n	801540c <_strtod_l+0x810>
 8015574:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015576:	4233      	tst	r3, r6
 8015578:	d100      	bne.n	801557c <_strtod_l+0x980>
 801557a:	e747      	b.n	801540c <_strtod_l+0x810>
 801557c:	e7e9      	b.n	8015552 <_strtod_l+0x956>
 801557e:	f7ff fb25 	bl	8014bcc <sulp>
 8015582:	0002      	movs	r2, r0
 8015584:	000b      	movs	r3, r1
 8015586:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015588:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801558a:	f7ec fec5 	bl	8002318 <__aeabi_dsub>
 801558e:	2200      	movs	r2, #0
 8015590:	2300      	movs	r3, #0
 8015592:	0006      	movs	r6, r0
 8015594:	000f      	movs	r7, r1
 8015596:	f7ea ff61 	bl	800045c <__aeabi_dcmpeq>
 801559a:	2800      	cmp	r0, #0
 801559c:	d000      	beq.n	80155a0 <_strtod_l+0x9a4>
 801559e:	e5f8      	b.n	8015192 <_strtod_l+0x596>
 80155a0:	e734      	b.n	801540c <_strtod_l+0x810>
 80155a2:	46c0      	nop			; (mov r8, r8)
 80155a4:	fffffc02 	.word	0xfffffc02
 80155a8:	7ff00000 	.word	0x7ff00000
 80155ac:	0801bfc0 	.word	0x0801bfc0
 80155b0:	fffffbe2 	.word	0xfffffbe2
 80155b4:	000fffff 	.word	0x000fffff
 80155b8:	7fefffff 	.word	0x7fefffff
 80155bc:	39500000 	.word	0x39500000
 80155c0:	fff00000 	.word	0xfff00000
 80155c4:	9905      	ldr	r1, [sp, #20]
 80155c6:	0020      	movs	r0, r4
 80155c8:	f003 fae2 	bl	8018b90 <__ratio>
 80155cc:	2380      	movs	r3, #128	; 0x80
 80155ce:	2200      	movs	r2, #0
 80155d0:	05db      	lsls	r3, r3, #23
 80155d2:	9008      	str	r0, [sp, #32]
 80155d4:	9109      	str	r1, [sp, #36]	; 0x24
 80155d6:	f7ea ff51 	bl	800047c <__aeabi_dcmple>
 80155da:	2800      	cmp	r0, #0
 80155dc:	d100      	bne.n	80155e0 <_strtod_l+0x9e4>
 80155de:	e07f      	b.n	80156e0 <_strtod_l+0xae4>
 80155e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d04b      	beq.n	801567e <_strtod_l+0xa82>
 80155e6:	2200      	movs	r2, #0
 80155e8:	4b8a      	ldr	r3, [pc, #552]	; (8015814 <_strtod_l+0xc18>)
 80155ea:	9210      	str	r2, [sp, #64]	; 0x40
 80155ec:	9311      	str	r3, [sp, #68]	; 0x44
 80155ee:	4b89      	ldr	r3, [pc, #548]	; (8015814 <_strtod_l+0xc18>)
 80155f0:	9308      	str	r3, [sp, #32]
 80155f2:	4a89      	ldr	r2, [pc, #548]	; (8015818 <_strtod_l+0xc1c>)
 80155f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155f6:	4013      	ands	r3, r2
 80155f8:	9314      	str	r3, [sp, #80]	; 0x50
 80155fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155fc:	4b87      	ldr	r3, [pc, #540]	; (801581c <_strtod_l+0xc20>)
 80155fe:	429a      	cmp	r2, r3
 8015600:	d000      	beq.n	8015604 <_strtod_l+0xa08>
 8015602:	e0ba      	b.n	801577a <_strtod_l+0xb7e>
 8015604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015608:	921a      	str	r2, [sp, #104]	; 0x68
 801560a:	931b      	str	r3, [sp, #108]	; 0x6c
 801560c:	4a84      	ldr	r2, [pc, #528]	; (8015820 <_strtod_l+0xc24>)
 801560e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015610:	4694      	mov	ip, r2
 8015612:	4463      	add	r3, ip
 8015614:	001f      	movs	r7, r3
 8015616:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801561a:	0030      	movs	r0, r6
 801561c:	0039      	movs	r1, r7
 801561e:	920c      	str	r2, [sp, #48]	; 0x30
 8015620:	930d      	str	r3, [sp, #52]	; 0x34
 8015622:	f003 f9ef 	bl	8018a04 <__ulp>
 8015626:	0002      	movs	r2, r0
 8015628:	000b      	movs	r3, r1
 801562a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801562c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801562e:	f7ec fc01 	bl	8001e34 <__aeabi_dmul>
 8015632:	0032      	movs	r2, r6
 8015634:	003b      	movs	r3, r7
 8015636:	f7eb fcd7 	bl	8000fe8 <__aeabi_dadd>
 801563a:	4a77      	ldr	r2, [pc, #476]	; (8015818 <_strtod_l+0xc1c>)
 801563c:	4b79      	ldr	r3, [pc, #484]	; (8015824 <_strtod_l+0xc28>)
 801563e:	0006      	movs	r6, r0
 8015640:	400a      	ands	r2, r1
 8015642:	429a      	cmp	r2, r3
 8015644:	d964      	bls.n	8015710 <_strtod_l+0xb14>
 8015646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015648:	4a77      	ldr	r2, [pc, #476]	; (8015828 <_strtod_l+0xc2c>)
 801564a:	4293      	cmp	r3, r2
 801564c:	d103      	bne.n	8015656 <_strtod_l+0xa5a>
 801564e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015650:	3301      	adds	r3, #1
 8015652:	d100      	bne.n	8015656 <_strtod_l+0xa5a>
 8015654:	e508      	b.n	8015068 <_strtod_l+0x46c>
 8015656:	2601      	movs	r6, #1
 8015658:	4f73      	ldr	r7, [pc, #460]	; (8015828 <_strtod_l+0xc2c>)
 801565a:	4276      	negs	r6, r6
 801565c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801565e:	9804      	ldr	r0, [sp, #16]
 8015660:	f002 ff56 	bl	8018510 <_Bfree>
 8015664:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015666:	9804      	ldr	r0, [sp, #16]
 8015668:	f002 ff52 	bl	8018510 <_Bfree>
 801566c:	9905      	ldr	r1, [sp, #20]
 801566e:	9804      	ldr	r0, [sp, #16]
 8015670:	f002 ff4e 	bl	8018510 <_Bfree>
 8015674:	0021      	movs	r1, r4
 8015676:	9804      	ldr	r0, [sp, #16]
 8015678:	f002 ff4a 	bl	8018510 <_Bfree>
 801567c:	e5f4      	b.n	8015268 <_strtod_l+0x66c>
 801567e:	2e00      	cmp	r6, #0
 8015680:	d11e      	bne.n	80156c0 <_strtod_l+0xac4>
 8015682:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015684:	031b      	lsls	r3, r3, #12
 8015686:	d121      	bne.n	80156cc <_strtod_l+0xad0>
 8015688:	9808      	ldr	r0, [sp, #32]
 801568a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801568c:	2200      	movs	r2, #0
 801568e:	4b61      	ldr	r3, [pc, #388]	; (8015814 <_strtod_l+0xc18>)
 8015690:	f7ea feea 	bl	8000468 <__aeabi_dcmplt>
 8015694:	2800      	cmp	r0, #0
 8015696:	d11f      	bne.n	80156d8 <_strtod_l+0xadc>
 8015698:	9808      	ldr	r0, [sp, #32]
 801569a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801569c:	2200      	movs	r2, #0
 801569e:	4b63      	ldr	r3, [pc, #396]	; (801582c <_strtod_l+0xc30>)
 80156a0:	f7ec fbc8 	bl	8001e34 <__aeabi_dmul>
 80156a4:	0005      	movs	r5, r0
 80156a6:	9108      	str	r1, [sp, #32]
 80156a8:	2280      	movs	r2, #128	; 0x80
 80156aa:	0612      	lsls	r2, r2, #24
 80156ac:	4694      	mov	ip, r2
 80156ae:	9b08      	ldr	r3, [sp, #32]
 80156b0:	951e      	str	r5, [sp, #120]	; 0x78
 80156b2:	4463      	add	r3, ip
 80156b4:	931f      	str	r3, [sp, #124]	; 0x7c
 80156b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80156b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80156ba:	9210      	str	r2, [sp, #64]	; 0x40
 80156bc:	9311      	str	r3, [sp, #68]	; 0x44
 80156be:	e798      	b.n	80155f2 <_strtod_l+0x9f6>
 80156c0:	2e01      	cmp	r6, #1
 80156c2:	d103      	bne.n	80156cc <_strtod_l+0xad0>
 80156c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d100      	bne.n	80156cc <_strtod_l+0xad0>
 80156ca:	e562      	b.n	8015192 <_strtod_l+0x596>
 80156cc:	2200      	movs	r2, #0
 80156ce:	4b58      	ldr	r3, [pc, #352]	; (8015830 <_strtod_l+0xc34>)
 80156d0:	2500      	movs	r5, #0
 80156d2:	9210      	str	r2, [sp, #64]	; 0x40
 80156d4:	9311      	str	r3, [sp, #68]	; 0x44
 80156d6:	e78a      	b.n	80155ee <_strtod_l+0x9f2>
 80156d8:	4b54      	ldr	r3, [pc, #336]	; (801582c <_strtod_l+0xc30>)
 80156da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80156dc:	9308      	str	r3, [sp, #32]
 80156de:	e7e3      	b.n	80156a8 <_strtod_l+0xaac>
 80156e0:	4b52      	ldr	r3, [pc, #328]	; (801582c <_strtod_l+0xc30>)
 80156e2:	9808      	ldr	r0, [sp, #32]
 80156e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80156e6:	2200      	movs	r2, #0
 80156e8:	f7ec fba4 	bl	8001e34 <__aeabi_dmul>
 80156ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80156ee:	0005      	movs	r5, r0
 80156f0:	9108      	str	r1, [sp, #32]
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d107      	bne.n	8015706 <_strtod_l+0xb0a>
 80156f6:	2380      	movs	r3, #128	; 0x80
 80156f8:	061b      	lsls	r3, r3, #24
 80156fa:	18cb      	adds	r3, r1, r3
 80156fc:	9016      	str	r0, [sp, #88]	; 0x58
 80156fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8015700:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015702:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015704:	e7d9      	b.n	80156ba <_strtod_l+0xabe>
 8015706:	0002      	movs	r2, r0
 8015708:	9b08      	ldr	r3, [sp, #32]
 801570a:	9216      	str	r2, [sp, #88]	; 0x58
 801570c:	9317      	str	r3, [sp, #92]	; 0x5c
 801570e:	e7f7      	b.n	8015700 <_strtod_l+0xb04>
 8015710:	23d4      	movs	r3, #212	; 0xd4
 8015712:	049b      	lsls	r3, r3, #18
 8015714:	18cf      	adds	r7, r1, r3
 8015716:	9b06      	ldr	r3, [sp, #24]
 8015718:	2b00      	cmp	r3, #0
 801571a:	d19f      	bne.n	801565c <_strtod_l+0xa60>
 801571c:	4b3e      	ldr	r3, [pc, #248]	; (8015818 <_strtod_l+0xc1c>)
 801571e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015720:	970c      	str	r7, [sp, #48]	; 0x30
 8015722:	403b      	ands	r3, r7
 8015724:	429a      	cmp	r2, r3
 8015726:	d199      	bne.n	801565c <_strtod_l+0xa60>
 8015728:	9908      	ldr	r1, [sp, #32]
 801572a:	0028      	movs	r0, r5
 801572c:	f7ed f958 	bl	80029e0 <__aeabi_d2iz>
 8015730:	f7ed f98c 	bl	8002a4c <__aeabi_i2d>
 8015734:	000b      	movs	r3, r1
 8015736:	0002      	movs	r2, r0
 8015738:	9908      	ldr	r1, [sp, #32]
 801573a:	0028      	movs	r0, r5
 801573c:	f7ec fdec 	bl	8002318 <__aeabi_dsub>
 8015740:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015742:	9008      	str	r0, [sp, #32]
 8015744:	9109      	str	r1, [sp, #36]	; 0x24
 8015746:	2b00      	cmp	r3, #0
 8015748:	d104      	bne.n	8015754 <_strtod_l+0xb58>
 801574a:	2e00      	cmp	r6, #0
 801574c:	d102      	bne.n	8015754 <_strtod_l+0xb58>
 801574e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015750:	031b      	lsls	r3, r3, #12
 8015752:	d058      	beq.n	8015806 <_strtod_l+0xc0a>
 8015754:	9808      	ldr	r0, [sp, #32]
 8015756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015758:	4a36      	ldr	r2, [pc, #216]	; (8015834 <_strtod_l+0xc38>)
 801575a:	4b37      	ldr	r3, [pc, #220]	; (8015838 <_strtod_l+0xc3c>)
 801575c:	f7ea fe84 	bl	8000468 <__aeabi_dcmplt>
 8015760:	2800      	cmp	r0, #0
 8015762:	d000      	beq.n	8015766 <_strtod_l+0xb6a>
 8015764:	e489      	b.n	801507a <_strtod_l+0x47e>
 8015766:	9808      	ldr	r0, [sp, #32]
 8015768:	9909      	ldr	r1, [sp, #36]	; 0x24
 801576a:	4a34      	ldr	r2, [pc, #208]	; (801583c <_strtod_l+0xc40>)
 801576c:	4b2f      	ldr	r3, [pc, #188]	; (801582c <_strtod_l+0xc30>)
 801576e:	f7ea fe8f 	bl	8000490 <__aeabi_dcmpgt>
 8015772:	2800      	cmp	r0, #0
 8015774:	d100      	bne.n	8015778 <_strtod_l+0xb7c>
 8015776:	e771      	b.n	801565c <_strtod_l+0xa60>
 8015778:	e47f      	b.n	801507a <_strtod_l+0x47e>
 801577a:	9b06      	ldr	r3, [sp, #24]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d02a      	beq.n	80157d6 <_strtod_l+0xbda>
 8015780:	23d4      	movs	r3, #212	; 0xd4
 8015782:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015784:	04db      	lsls	r3, r3, #19
 8015786:	429a      	cmp	r2, r3
 8015788:	d825      	bhi.n	80157d6 <_strtod_l+0xbda>
 801578a:	4a2d      	ldr	r2, [pc, #180]	; (8015840 <_strtod_l+0xc44>)
 801578c:	4b2d      	ldr	r3, [pc, #180]	; (8015844 <_strtod_l+0xc48>)
 801578e:	0028      	movs	r0, r5
 8015790:	9908      	ldr	r1, [sp, #32]
 8015792:	f7ea fe73 	bl	800047c <__aeabi_dcmple>
 8015796:	2800      	cmp	r0, #0
 8015798:	d016      	beq.n	80157c8 <_strtod_l+0xbcc>
 801579a:	0028      	movs	r0, r5
 801579c:	9908      	ldr	r1, [sp, #32]
 801579e:	f7ea ff27 	bl	80005f0 <__aeabi_d2uiz>
 80157a2:	2800      	cmp	r0, #0
 80157a4:	d100      	bne.n	80157a8 <_strtod_l+0xbac>
 80157a6:	3001      	adds	r0, #1
 80157a8:	f7ed f98a 	bl	8002ac0 <__aeabi_ui2d>
 80157ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80157ae:	0005      	movs	r5, r0
 80157b0:	9108      	str	r1, [sp, #32]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d122      	bne.n	80157fc <_strtod_l+0xc00>
 80157b6:	2380      	movs	r3, #128	; 0x80
 80157b8:	061b      	lsls	r3, r3, #24
 80157ba:	18cb      	adds	r3, r1, r3
 80157bc:	9018      	str	r0, [sp, #96]	; 0x60
 80157be:	9319      	str	r3, [sp, #100]	; 0x64
 80157c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80157c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80157c4:	9210      	str	r2, [sp, #64]	; 0x40
 80157c6:	9311      	str	r3, [sp, #68]	; 0x44
 80157c8:	22d6      	movs	r2, #214	; 0xd6
 80157ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157cc:	04d2      	lsls	r2, r2, #19
 80157ce:	189b      	adds	r3, r3, r2
 80157d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80157d2:	1a9b      	subs	r3, r3, r2
 80157d4:	9311      	str	r3, [sp, #68]	; 0x44
 80157d6:	980e      	ldr	r0, [sp, #56]	; 0x38
 80157d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80157da:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80157dc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80157de:	f003 f911 	bl	8018a04 <__ulp>
 80157e2:	0002      	movs	r2, r0
 80157e4:	000b      	movs	r3, r1
 80157e6:	0030      	movs	r0, r6
 80157e8:	0039      	movs	r1, r7
 80157ea:	f7ec fb23 	bl	8001e34 <__aeabi_dmul>
 80157ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80157f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157f2:	f7eb fbf9 	bl	8000fe8 <__aeabi_dadd>
 80157f6:	0006      	movs	r6, r0
 80157f8:	000f      	movs	r7, r1
 80157fa:	e78c      	b.n	8015716 <_strtod_l+0xb1a>
 80157fc:	0002      	movs	r2, r0
 80157fe:	9b08      	ldr	r3, [sp, #32]
 8015800:	9218      	str	r2, [sp, #96]	; 0x60
 8015802:	9319      	str	r3, [sp, #100]	; 0x64
 8015804:	e7dc      	b.n	80157c0 <_strtod_l+0xbc4>
 8015806:	4a0b      	ldr	r2, [pc, #44]	; (8015834 <_strtod_l+0xc38>)
 8015808:	4b0f      	ldr	r3, [pc, #60]	; (8015848 <_strtod_l+0xc4c>)
 801580a:	9808      	ldr	r0, [sp, #32]
 801580c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801580e:	f7ea fe2b 	bl	8000468 <__aeabi_dcmplt>
 8015812:	e7ae      	b.n	8015772 <_strtod_l+0xb76>
 8015814:	3ff00000 	.word	0x3ff00000
 8015818:	7ff00000 	.word	0x7ff00000
 801581c:	7fe00000 	.word	0x7fe00000
 8015820:	fcb00000 	.word	0xfcb00000
 8015824:	7c9fffff 	.word	0x7c9fffff
 8015828:	7fefffff 	.word	0x7fefffff
 801582c:	3fe00000 	.word	0x3fe00000
 8015830:	bff00000 	.word	0xbff00000
 8015834:	94a03595 	.word	0x94a03595
 8015838:	3fdfffff 	.word	0x3fdfffff
 801583c:	35afe535 	.word	0x35afe535
 8015840:	ffc00000 	.word	0xffc00000
 8015844:	41dfffff 	.word	0x41dfffff
 8015848:	3fcfffff 	.word	0x3fcfffff

0801584c <strtod>:
 801584c:	4b06      	ldr	r3, [pc, #24]	; (8015868 <strtod+0x1c>)
 801584e:	b510      	push	{r4, lr}
 8015850:	0004      	movs	r4, r0
 8015852:	6818      	ldr	r0, [r3, #0]
 8015854:	000a      	movs	r2, r1
 8015856:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015858:	2b00      	cmp	r3, #0
 801585a:	d100      	bne.n	801585e <strtod+0x12>
 801585c:	4b03      	ldr	r3, [pc, #12]	; (801586c <strtod+0x20>)
 801585e:	0021      	movs	r1, r4
 8015860:	f7ff f9cc 	bl	8014bfc <_strtod_l>
 8015864:	bd10      	pop	{r4, pc}
 8015866:	46c0      	nop			; (mov r8, r8)
 8015868:	20000118 	.word	0x20000118
 801586c:	20000548 	.word	0x20000548

08015870 <strtok>:
 8015870:	4b03      	ldr	r3, [pc, #12]	; (8015880 <strtok+0x10>)
 8015872:	b510      	push	{r4, lr}
 8015874:	681a      	ldr	r2, [r3, #0]
 8015876:	2301      	movs	r3, #1
 8015878:	325c      	adds	r2, #92	; 0x5c
 801587a:	f000 f803 	bl	8015884 <__strtok_r>
 801587e:	bd10      	pop	{r4, pc}
 8015880:	20000118 	.word	0x20000118

08015884 <__strtok_r>:
 8015884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015886:	2800      	cmp	r0, #0
 8015888:	d104      	bne.n	8015894 <__strtok_r+0x10>
 801588a:	6810      	ldr	r0, [r2, #0]
 801588c:	2800      	cmp	r0, #0
 801588e:	d101      	bne.n	8015894 <__strtok_r+0x10>
 8015890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015892:	0020      	movs	r0, r4
 8015894:	000e      	movs	r6, r1
 8015896:	7805      	ldrb	r5, [r0, #0]
 8015898:	1c44      	adds	r4, r0, #1
 801589a:	7837      	ldrb	r7, [r6, #0]
 801589c:	2f00      	cmp	r7, #0
 801589e:	d104      	bne.n	80158aa <__strtok_r+0x26>
 80158a0:	2d00      	cmp	r5, #0
 80158a2:	d110      	bne.n	80158c6 <__strtok_r+0x42>
 80158a4:	6015      	str	r5, [r2, #0]
 80158a6:	0028      	movs	r0, r5
 80158a8:	e7f2      	b.n	8015890 <__strtok_r+0xc>
 80158aa:	3601      	adds	r6, #1
 80158ac:	42bd      	cmp	r5, r7
 80158ae:	d1f4      	bne.n	801589a <__strtok_r+0x16>
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d1ee      	bne.n	8015892 <__strtok_r+0xe>
 80158b4:	6014      	str	r4, [r2, #0]
 80158b6:	7003      	strb	r3, [r0, #0]
 80158b8:	e7ea      	b.n	8015890 <__strtok_r+0xc>
 80158ba:	0033      	movs	r3, r6
 80158bc:	e00d      	b.n	80158da <__strtok_r+0x56>
 80158be:	3501      	adds	r5, #1
 80158c0:	2f00      	cmp	r7, #0
 80158c2:	d103      	bne.n	80158cc <__strtok_r+0x48>
 80158c4:	001c      	movs	r4, r3
 80158c6:	000d      	movs	r5, r1
 80158c8:	7826      	ldrb	r6, [r4, #0]
 80158ca:	1c63      	adds	r3, r4, #1
 80158cc:	782f      	ldrb	r7, [r5, #0]
 80158ce:	42be      	cmp	r6, r7
 80158d0:	d1f5      	bne.n	80158be <__strtok_r+0x3a>
 80158d2:	2e00      	cmp	r6, #0
 80158d4:	d0f1      	beq.n	80158ba <__strtok_r+0x36>
 80158d6:	2100      	movs	r1, #0
 80158d8:	7021      	strb	r1, [r4, #0]
 80158da:	6013      	str	r3, [r2, #0]
 80158dc:	e7d8      	b.n	8015890 <__strtok_r+0xc>
	...

080158e0 <_strtol_l.isra.0>:
 80158e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158e2:	001f      	movs	r7, r3
 80158e4:	000e      	movs	r6, r1
 80158e6:	b087      	sub	sp, #28
 80158e8:	9005      	str	r0, [sp, #20]
 80158ea:	9101      	str	r1, [sp, #4]
 80158ec:	9202      	str	r2, [sp, #8]
 80158ee:	980c      	ldr	r0, [sp, #48]	; 0x30
 80158f0:	7834      	ldrb	r4, [r6, #0]
 80158f2:	f7fe fc6d 	bl	80141d0 <__locale_ctype_ptr_l>
 80158f6:	2208      	movs	r2, #8
 80158f8:	1900      	adds	r0, r0, r4
 80158fa:	7843      	ldrb	r3, [r0, #1]
 80158fc:	1c75      	adds	r5, r6, #1
 80158fe:	4013      	ands	r3, r2
 8015900:	d136      	bne.n	8015970 <_strtol_l.isra.0+0x90>
 8015902:	2c2d      	cmp	r4, #45	; 0x2d
 8015904:	d136      	bne.n	8015974 <_strtol_l.isra.0+0x94>
 8015906:	1cb5      	adds	r5, r6, #2
 8015908:	7874      	ldrb	r4, [r6, #1]
 801590a:	2601      	movs	r6, #1
 801590c:	2f00      	cmp	r7, #0
 801590e:	d062      	beq.n	80159d6 <_strtol_l.isra.0+0xf6>
 8015910:	2f10      	cmp	r7, #16
 8015912:	d109      	bne.n	8015928 <_strtol_l.isra.0+0x48>
 8015914:	2c30      	cmp	r4, #48	; 0x30
 8015916:	d107      	bne.n	8015928 <_strtol_l.isra.0+0x48>
 8015918:	2220      	movs	r2, #32
 801591a:	782b      	ldrb	r3, [r5, #0]
 801591c:	4393      	bics	r3, r2
 801591e:	2b58      	cmp	r3, #88	; 0x58
 8015920:	d154      	bne.n	80159cc <_strtol_l.isra.0+0xec>
 8015922:	2710      	movs	r7, #16
 8015924:	786c      	ldrb	r4, [r5, #1]
 8015926:	3502      	adds	r5, #2
 8015928:	4b2d      	ldr	r3, [pc, #180]	; (80159e0 <_strtol_l.isra.0+0x100>)
 801592a:	0039      	movs	r1, r7
 801592c:	18f3      	adds	r3, r6, r3
 801592e:	0018      	movs	r0, r3
 8015930:	9303      	str	r3, [sp, #12]
 8015932:	f7ea fc93 	bl	800025c <__aeabi_uidivmod>
 8015936:	9104      	str	r1, [sp, #16]
 8015938:	2101      	movs	r1, #1
 801593a:	2300      	movs	r3, #0
 801593c:	4249      	negs	r1, r1
 801593e:	0002      	movs	r2, r0
 8015940:	468c      	mov	ip, r1
 8015942:	0018      	movs	r0, r3
 8015944:	0021      	movs	r1, r4
 8015946:	3930      	subs	r1, #48	; 0x30
 8015948:	2909      	cmp	r1, #9
 801594a:	d81a      	bhi.n	8015982 <_strtol_l.isra.0+0xa2>
 801594c:	000c      	movs	r4, r1
 801594e:	42a7      	cmp	r7, r4
 8015950:	dd23      	ble.n	801599a <_strtol_l.isra.0+0xba>
 8015952:	1c59      	adds	r1, r3, #1
 8015954:	d009      	beq.n	801596a <_strtol_l.isra.0+0x8a>
 8015956:	4663      	mov	r3, ip
 8015958:	4282      	cmp	r2, r0
 801595a:	d306      	bcc.n	801596a <_strtol_l.isra.0+0x8a>
 801595c:	d102      	bne.n	8015964 <_strtol_l.isra.0+0x84>
 801595e:	9904      	ldr	r1, [sp, #16]
 8015960:	42a1      	cmp	r1, r4
 8015962:	db02      	blt.n	801596a <_strtol_l.isra.0+0x8a>
 8015964:	2301      	movs	r3, #1
 8015966:	4378      	muls	r0, r7
 8015968:	1820      	adds	r0, r4, r0
 801596a:	782c      	ldrb	r4, [r5, #0]
 801596c:	3501      	adds	r5, #1
 801596e:	e7e9      	b.n	8015944 <_strtol_l.isra.0+0x64>
 8015970:	002e      	movs	r6, r5
 8015972:	e7bc      	b.n	80158ee <_strtol_l.isra.0+0xe>
 8015974:	2c2b      	cmp	r4, #43	; 0x2b
 8015976:	d001      	beq.n	801597c <_strtol_l.isra.0+0x9c>
 8015978:	001e      	movs	r6, r3
 801597a:	e7c7      	b.n	801590c <_strtol_l.isra.0+0x2c>
 801597c:	1cb5      	adds	r5, r6, #2
 801597e:	7874      	ldrb	r4, [r6, #1]
 8015980:	e7fa      	b.n	8015978 <_strtol_l.isra.0+0x98>
 8015982:	0021      	movs	r1, r4
 8015984:	3941      	subs	r1, #65	; 0x41
 8015986:	2919      	cmp	r1, #25
 8015988:	d801      	bhi.n	801598e <_strtol_l.isra.0+0xae>
 801598a:	3c37      	subs	r4, #55	; 0x37
 801598c:	e7df      	b.n	801594e <_strtol_l.isra.0+0x6e>
 801598e:	0021      	movs	r1, r4
 8015990:	3961      	subs	r1, #97	; 0x61
 8015992:	2919      	cmp	r1, #25
 8015994:	d801      	bhi.n	801599a <_strtol_l.isra.0+0xba>
 8015996:	3c57      	subs	r4, #87	; 0x57
 8015998:	e7d9      	b.n	801594e <_strtol_l.isra.0+0x6e>
 801599a:	1c5a      	adds	r2, r3, #1
 801599c:	d108      	bne.n	80159b0 <_strtol_l.isra.0+0xd0>
 801599e:	9a05      	ldr	r2, [sp, #20]
 80159a0:	3323      	adds	r3, #35	; 0x23
 80159a2:	6013      	str	r3, [r2, #0]
 80159a4:	9b02      	ldr	r3, [sp, #8]
 80159a6:	9803      	ldr	r0, [sp, #12]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d109      	bne.n	80159c0 <_strtol_l.isra.0+0xe0>
 80159ac:	b007      	add	sp, #28
 80159ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b0:	2e00      	cmp	r6, #0
 80159b2:	d000      	beq.n	80159b6 <_strtol_l.isra.0+0xd6>
 80159b4:	4240      	negs	r0, r0
 80159b6:	9a02      	ldr	r2, [sp, #8]
 80159b8:	2a00      	cmp	r2, #0
 80159ba:	d0f7      	beq.n	80159ac <_strtol_l.isra.0+0xcc>
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d001      	beq.n	80159c4 <_strtol_l.isra.0+0xe4>
 80159c0:	1e6b      	subs	r3, r5, #1
 80159c2:	9301      	str	r3, [sp, #4]
 80159c4:	9b02      	ldr	r3, [sp, #8]
 80159c6:	9a01      	ldr	r2, [sp, #4]
 80159c8:	601a      	str	r2, [r3, #0]
 80159ca:	e7ef      	b.n	80159ac <_strtol_l.isra.0+0xcc>
 80159cc:	2430      	movs	r4, #48	; 0x30
 80159ce:	2f00      	cmp	r7, #0
 80159d0:	d1aa      	bne.n	8015928 <_strtol_l.isra.0+0x48>
 80159d2:	2708      	movs	r7, #8
 80159d4:	e7a8      	b.n	8015928 <_strtol_l.isra.0+0x48>
 80159d6:	2c30      	cmp	r4, #48	; 0x30
 80159d8:	d09e      	beq.n	8015918 <_strtol_l.isra.0+0x38>
 80159da:	270a      	movs	r7, #10
 80159dc:	e7a4      	b.n	8015928 <_strtol_l.isra.0+0x48>
 80159de:	46c0      	nop			; (mov r8, r8)
 80159e0:	7fffffff 	.word	0x7fffffff

080159e4 <strtol>:
 80159e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159e6:	0013      	movs	r3, r2
 80159e8:	4a06      	ldr	r2, [pc, #24]	; (8015a04 <strtol+0x20>)
 80159ea:	0005      	movs	r5, r0
 80159ec:	6810      	ldr	r0, [r2, #0]
 80159ee:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80159f0:	2c00      	cmp	r4, #0
 80159f2:	d100      	bne.n	80159f6 <strtol+0x12>
 80159f4:	4c04      	ldr	r4, [pc, #16]	; (8015a08 <strtol+0x24>)
 80159f6:	000a      	movs	r2, r1
 80159f8:	9400      	str	r4, [sp, #0]
 80159fa:	0029      	movs	r1, r5
 80159fc:	f7ff ff70 	bl	80158e0 <_strtol_l.isra.0>
 8015a00:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015a02:	46c0      	nop			; (mov r8, r8)
 8015a04:	20000118 	.word	0x20000118
 8015a08:	20000548 	.word	0x20000548

08015a0c <_svfprintf_r>:
 8015a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a0e:	b0d9      	sub	sp, #356	; 0x164
 8015a10:	910b      	str	r1, [sp, #44]	; 0x2c
 8015a12:	9209      	str	r2, [sp, #36]	; 0x24
 8015a14:	001c      	movs	r4, r3
 8015a16:	900a      	str	r0, [sp, #40]	; 0x28
 8015a18:	f002 fd26 	bl	8018468 <_localeconv_r>
 8015a1c:	6803      	ldr	r3, [r0, #0]
 8015a1e:	0018      	movs	r0, r3
 8015a20:	931c      	str	r3, [sp, #112]	; 0x70
 8015a22:	f7ea fb79 	bl	8000118 <strlen>
 8015a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a28:	9014      	str	r0, [sp, #80]	; 0x50
 8015a2a:	899b      	ldrh	r3, [r3, #12]
 8015a2c:	061b      	lsls	r3, r3, #24
 8015a2e:	d518      	bpl.n	8015a62 <_svfprintf_r+0x56>
 8015a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a32:	691b      	ldr	r3, [r3, #16]
 8015a34:	9308      	str	r3, [sp, #32]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d113      	bne.n	8015a62 <_svfprintf_r+0x56>
 8015a3a:	2140      	movs	r1, #64	; 0x40
 8015a3c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a3e:	f7fe fbed 	bl	801421c <_malloc_r>
 8015a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a44:	6018      	str	r0, [r3, #0]
 8015a46:	6118      	str	r0, [r3, #16]
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	d107      	bne.n	8015a5c <_svfprintf_r+0x50>
 8015a4c:	230c      	movs	r3, #12
 8015a4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a50:	6013      	str	r3, [r2, #0]
 8015a52:	3b0d      	subs	r3, #13
 8015a54:	9315      	str	r3, [sp, #84]	; 0x54
 8015a56:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015a58:	b059      	add	sp, #356	; 0x164
 8015a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a5c:	2340      	movs	r3, #64	; 0x40
 8015a5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015a60:	6153      	str	r3, [r2, #20]
 8015a62:	2600      	movs	r6, #0
 8015a64:	af2f      	add	r7, sp, #188	; 0xbc
 8015a66:	972c      	str	r7, [sp, #176]	; 0xb0
 8015a68:	962e      	str	r6, [sp, #184]	; 0xb8
 8015a6a:	962d      	str	r6, [sp, #180]	; 0xb4
 8015a6c:	960d      	str	r6, [sp, #52]	; 0x34
 8015a6e:	961a      	str	r6, [sp, #104]	; 0x68
 8015a70:	9619      	str	r6, [sp, #100]	; 0x64
 8015a72:	961e      	str	r6, [sp, #120]	; 0x78
 8015a74:	961d      	str	r6, [sp, #116]	; 0x74
 8015a76:	9613      	str	r6, [sp, #76]	; 0x4c
 8015a78:	961b      	str	r6, [sp, #108]	; 0x6c
 8015a7a:	961f      	str	r6, [sp, #124]	; 0x7c
 8015a7c:	9615      	str	r6, [sp, #84]	; 0x54
 8015a7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015a80:	782b      	ldrb	r3, [r5, #0]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d002      	beq.n	8015a8c <_svfprintf_r+0x80>
 8015a86:	2b25      	cmp	r3, #37	; 0x25
 8015a88:	d000      	beq.n	8015a8c <_svfprintf_r+0x80>
 8015a8a:	e095      	b.n	8015bb8 <_svfprintf_r+0x1ac>
 8015a8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a8e:	1aee      	subs	r6, r5, r3
 8015a90:	d017      	beq.n	8015ac2 <_svfprintf_r+0xb6>
 8015a92:	603b      	str	r3, [r7, #0]
 8015a94:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015a96:	607e      	str	r6, [r7, #4]
 8015a98:	199b      	adds	r3, r3, r6
 8015a9a:	932e      	str	r3, [sp, #184]	; 0xb8
 8015a9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015a9e:	3708      	adds	r7, #8
 8015aa0:	9308      	str	r3, [sp, #32]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	932d      	str	r3, [sp, #180]	; 0xb4
 8015aa6:	2b07      	cmp	r3, #7
 8015aa8:	dd08      	ble.n	8015abc <_svfprintf_r+0xb0>
 8015aaa:	aa2c      	add	r2, sp, #176	; 0xb0
 8015aac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015aae:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ab0:	f003 f900 	bl	8018cb4 <__ssprint_r>
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d000      	beq.n	8015aba <_svfprintf_r+0xae>
 8015ab8:	e2d9      	b.n	801606e <_svfprintf_r+0x662>
 8015aba:	af2f      	add	r7, sp, #188	; 0xbc
 8015abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015abe:	199b      	adds	r3, r3, r6
 8015ac0:	9315      	str	r3, [sp, #84]	; 0x54
 8015ac2:	782b      	ldrb	r3, [r5, #0]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d101      	bne.n	8015acc <_svfprintf_r+0xc0>
 8015ac8:	f001 f9e5 	bl	8016e96 <_svfprintf_r+0x148a>
 8015acc:	1c6b      	adds	r3, r5, #1
 8015ace:	221b      	movs	r2, #27
 8015ad0:	9311      	str	r3, [sp, #68]	; 0x44
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	a91e      	add	r1, sp, #120	; 0x78
 8015ad6:	1852      	adds	r2, r2, r1
 8015ad8:	7013      	strb	r3, [r2, #0]
 8015ada:	2201      	movs	r2, #1
 8015adc:	001e      	movs	r6, r3
 8015ade:	2520      	movs	r5, #32
 8015ae0:	4252      	negs	r2, r2
 8015ae2:	9208      	str	r2, [sp, #32]
 8015ae4:	9316      	str	r3, [sp, #88]	; 0x58
 8015ae6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	930e      	str	r3, [sp, #56]	; 0x38
 8015aec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015aee:	3301      	adds	r3, #1
 8015af0:	9311      	str	r3, [sp, #68]	; 0x44
 8015af2:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015af4:	3820      	subs	r0, #32
 8015af6:	285a      	cmp	r0, #90	; 0x5a
 8015af8:	d901      	bls.n	8015afe <_svfprintf_r+0xf2>
 8015afa:	f000 fe3d 	bl	8016778 <_svfprintf_r+0xd6c>
 8015afe:	f7ea fb1d 	bl	800013c <__gnu_thumb1_case_shi>
 8015b02:	009e      	.short	0x009e
 8015b04:	063b063b 	.word	0x063b063b
 8015b08:	063b00a7 	.word	0x063b00a7
 8015b0c:	063b063b 	.word	0x063b063b
 8015b10:	063b0080 	.word	0x063b0080
 8015b14:	00a9063b 	.word	0x00a9063b
 8015b18:	063b00b3 	.word	0x063b00b3
 8015b1c:	00b900b1 	.word	0x00b900b1
 8015b20:	00dd063b 	.word	0x00dd063b
 8015b24:	00df00df 	.word	0x00df00df
 8015b28:	00df00df 	.word	0x00df00df
 8015b2c:	00df00df 	.word	0x00df00df
 8015b30:	00df00df 	.word	0x00df00df
 8015b34:	063b00df 	.word	0x063b00df
 8015b38:	063b063b 	.word	0x063b063b
 8015b3c:	063b063b 	.word	0x063b063b
 8015b40:	063b063b 	.word	0x063b063b
 8015b44:	063b0240 	.word	0x063b0240
 8015b48:	01fd010a 	.word	0x01fd010a
 8015b4c:	02400240 	.word	0x02400240
 8015b50:	063b0240 	.word	0x063b0240
 8015b54:	063b063b 	.word	0x063b063b
 8015b58:	00f1063b 	.word	0x00f1063b
 8015b5c:	063b063b 	.word	0x063b063b
 8015b60:	063b04e2 	.word	0x063b04e2
 8015b64:	063b063b 	.word	0x063b063b
 8015b68:	063b0537 	.word	0x063b0537
 8015b6c:	063b0557 	.word	0x063b0557
 8015b70:	005d063b 	.word	0x005d063b
 8015b74:	063b063b 	.word	0x063b063b
 8015b78:	063b063b 	.word	0x063b063b
 8015b7c:	063b063b 	.word	0x063b063b
 8015b80:	063b063b 	.word	0x063b063b
 8015b84:	063b0240 	.word	0x063b0240
 8015b88:	01ff010a 	.word	0x01ff010a
 8015b8c:	02400240 	.word	0x02400240
 8015b90:	00f30240 	.word	0x00f30240
 8015b94:	010601ff 	.word	0x010601ff
 8015b98:	00ff063b 	.word	0x00ff063b
 8015b9c:	04c5063b 	.word	0x04c5063b
 8015ba0:	052704e4 	.word	0x052704e4
 8015ba4:	063b0106 	.word	0x063b0106
 8015ba8:	fff20537 	.word	0xfff20537
 8015bac:	063b0559 	.word	0x063b0559
 8015bb0:	0582063b 	.word	0x0582063b
 8015bb4:	fff2063b 	.word	0xfff2063b
 8015bb8:	3501      	adds	r5, #1
 8015bba:	e761      	b.n	8015a80 <_svfprintf_r+0x74>
 8015bbc:	4bcb      	ldr	r3, [pc, #812]	; (8015eec <_svfprintf_r+0x4e0>)
 8015bbe:	2220      	movs	r2, #32
 8015bc0:	931e      	str	r3, [sp, #120]	; 0x78
 8015bc2:	4032      	ands	r2, r6
 8015bc4:	d101      	bne.n	8015bca <_svfprintf_r+0x1be>
 8015bc6:	f000 fd21 	bl	801660c <_svfprintf_r+0xc00>
 8015bca:	2307      	movs	r3, #7
 8015bcc:	3407      	adds	r4, #7
 8015bce:	439c      	bics	r4, r3
 8015bd0:	0023      	movs	r3, r4
 8015bd2:	3308      	adds	r3, #8
 8015bd4:	9312      	str	r3, [sp, #72]	; 0x48
 8015bd6:	6823      	ldr	r3, [r4, #0]
 8015bd8:	6864      	ldr	r4, [r4, #4]
 8015bda:	9306      	str	r3, [sp, #24]
 8015bdc:	9407      	str	r4, [sp, #28]
 8015bde:	07f3      	lsls	r3, r6, #31
 8015be0:	d50a      	bpl.n	8015bf8 <_svfprintf_r+0x1ec>
 8015be2:	9b06      	ldr	r3, [sp, #24]
 8015be4:	9a07      	ldr	r2, [sp, #28]
 8015be6:	4313      	orrs	r3, r2
 8015be8:	d006      	beq.n	8015bf8 <_svfprintf_r+0x1ec>
 8015bea:	2230      	movs	r2, #48	; 0x30
 8015bec:	ab25      	add	r3, sp, #148	; 0x94
 8015bee:	701a      	strb	r2, [r3, #0]
 8015bf0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015bf2:	705a      	strb	r2, [r3, #1]
 8015bf4:	2302      	movs	r3, #2
 8015bf6:	431e      	orrs	r6, r3
 8015bf8:	4bbd      	ldr	r3, [pc, #756]	; (8015ef0 <_svfprintf_r+0x4e4>)
 8015bfa:	401e      	ands	r6, r3
 8015bfc:	2302      	movs	r3, #2
 8015bfe:	f000 fc74 	bl	80164ea <_svfprintf_r+0xade>
 8015c02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c04:	f002 fc30 	bl	8018468 <_localeconv_r>
 8015c08:	6843      	ldr	r3, [r0, #4]
 8015c0a:	0018      	movs	r0, r3
 8015c0c:	931f      	str	r3, [sp, #124]	; 0x7c
 8015c0e:	f7ea fa83 	bl	8000118 <strlen>
 8015c12:	901b      	str	r0, [sp, #108]	; 0x6c
 8015c14:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c16:	f002 fc27 	bl	8018468 <_localeconv_r>
 8015c1a:	6883      	ldr	r3, [r0, #8]
 8015c1c:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d100      	bne.n	8015c26 <_svfprintf_r+0x21a>
 8015c24:	e75f      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d100      	bne.n	8015c2e <_svfprintf_r+0x222>
 8015c2c:	e75b      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d100      	bne.n	8015c36 <_svfprintf_r+0x22a>
 8015c34:	e757      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c36:	2380      	movs	r3, #128	; 0x80
 8015c38:	00db      	lsls	r3, r3, #3
 8015c3a:	431e      	orrs	r6, r3
 8015c3c:	e753      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c3e:	231b      	movs	r3, #27
 8015c40:	aa1e      	add	r2, sp, #120	; 0x78
 8015c42:	189b      	adds	r3, r3, r2
 8015c44:	781a      	ldrb	r2, [r3, #0]
 8015c46:	2a00      	cmp	r2, #0
 8015c48:	d000      	beq.n	8015c4c <_svfprintf_r+0x240>
 8015c4a:	e74c      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c4c:	701d      	strb	r5, [r3, #0]
 8015c4e:	e74a      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c50:	2301      	movs	r3, #1
 8015c52:	e7f2      	b.n	8015c3a <_svfprintf_r+0x22e>
 8015c54:	6823      	ldr	r3, [r4, #0]
 8015c56:	3404      	adds	r4, #4
 8015c58:	9316      	str	r3, [sp, #88]	; 0x58
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	db00      	blt.n	8015c60 <_svfprintf_r+0x254>
 8015c5e:	e742      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c60:	425b      	negs	r3, r3
 8015c62:	9316      	str	r3, [sp, #88]	; 0x58
 8015c64:	2304      	movs	r3, #4
 8015c66:	e7e8      	b.n	8015c3a <_svfprintf_r+0x22e>
 8015c68:	231b      	movs	r3, #27
 8015c6a:	aa1e      	add	r2, sp, #120	; 0x78
 8015c6c:	189b      	adds	r3, r3, r2
 8015c6e:	222b      	movs	r2, #43	; 0x2b
 8015c70:	701a      	strb	r2, [r3, #0]
 8015c72:	e738      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015c74:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015c78:	7812      	ldrb	r2, [r2, #0]
 8015c7a:	3301      	adds	r3, #1
 8015c7c:	920e      	str	r2, [sp, #56]	; 0x38
 8015c7e:	2a2a      	cmp	r2, #42	; 0x2a
 8015c80:	d008      	beq.n	8015c94 <_svfprintf_r+0x288>
 8015c82:	2200      	movs	r2, #0
 8015c84:	9208      	str	r2, [sp, #32]
 8015c86:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015c88:	001a      	movs	r2, r3
 8015c8a:	3930      	subs	r1, #48	; 0x30
 8015c8c:	2909      	cmp	r1, #9
 8015c8e:	d90c      	bls.n	8015caa <_svfprintf_r+0x29e>
 8015c90:	9211      	str	r2, [sp, #68]	; 0x44
 8015c92:	e72e      	b.n	8015af2 <_svfprintf_r+0xe6>
 8015c94:	6821      	ldr	r1, [r4, #0]
 8015c96:	1d22      	adds	r2, r4, #4
 8015c98:	9108      	str	r1, [sp, #32]
 8015c9a:	2900      	cmp	r1, #0
 8015c9c:	da02      	bge.n	8015ca4 <_svfprintf_r+0x298>
 8015c9e:	2101      	movs	r1, #1
 8015ca0:	4249      	negs	r1, r1
 8015ca2:	9108      	str	r1, [sp, #32]
 8015ca4:	0014      	movs	r4, r2
 8015ca6:	9311      	str	r3, [sp, #68]	; 0x44
 8015ca8:	e71d      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015caa:	200a      	movs	r0, #10
 8015cac:	9a08      	ldr	r2, [sp, #32]
 8015cae:	4342      	muls	r2, r0
 8015cb0:	1852      	adds	r2, r2, r1
 8015cb2:	9208      	str	r2, [sp, #32]
 8015cb4:	781a      	ldrb	r2, [r3, #0]
 8015cb6:	3301      	adds	r3, #1
 8015cb8:	920e      	str	r2, [sp, #56]	; 0x38
 8015cba:	e7e4      	b.n	8015c86 <_svfprintf_r+0x27a>
 8015cbc:	2380      	movs	r3, #128	; 0x80
 8015cbe:	e7bc      	b.n	8015c3a <_svfprintf_r+0x22e>
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	9316      	str	r3, [sp, #88]	; 0x58
 8015cc4:	220a      	movs	r2, #10
 8015cc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015cc8:	4353      	muls	r3, r2
 8015cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015ccc:	3a30      	subs	r2, #48	; 0x30
 8015cce:	18d3      	adds	r3, r2, r3
 8015cd0:	9316      	str	r3, [sp, #88]	; 0x58
 8015cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015cd4:	1c5a      	adds	r2, r3, #1
 8015cd6:	781b      	ldrb	r3, [r3, #0]
 8015cd8:	9211      	str	r2, [sp, #68]	; 0x44
 8015cda:	930e      	str	r3, [sp, #56]	; 0x38
 8015cdc:	3b30      	subs	r3, #48	; 0x30
 8015cde:	2b09      	cmp	r3, #9
 8015ce0:	d9f0      	bls.n	8015cc4 <_svfprintf_r+0x2b8>
 8015ce2:	e7d5      	b.n	8015c90 <_svfprintf_r+0x284>
 8015ce4:	2308      	movs	r3, #8
 8015ce6:	e7a8      	b.n	8015c3a <_svfprintf_r+0x22e>
 8015ce8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	2b68      	cmp	r3, #104	; 0x68
 8015cee:	d105      	bne.n	8015cfc <_svfprintf_r+0x2f0>
 8015cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015cf2:	3301      	adds	r3, #1
 8015cf4:	9311      	str	r3, [sp, #68]	; 0x44
 8015cf6:	2380      	movs	r3, #128	; 0x80
 8015cf8:	009b      	lsls	r3, r3, #2
 8015cfa:	e79e      	b.n	8015c3a <_svfprintf_r+0x22e>
 8015cfc:	2340      	movs	r3, #64	; 0x40
 8015cfe:	e79c      	b.n	8015c3a <_svfprintf_r+0x22e>
 8015d00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d02:	781b      	ldrb	r3, [r3, #0]
 8015d04:	2b6c      	cmp	r3, #108	; 0x6c
 8015d06:	d104      	bne.n	8015d12 <_svfprintf_r+0x306>
 8015d08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015d0a:	3301      	adds	r3, #1
 8015d0c:	9311      	str	r3, [sp, #68]	; 0x44
 8015d0e:	432e      	orrs	r6, r5
 8015d10:	e6e9      	b.n	8015ae6 <_svfprintf_r+0xda>
 8015d12:	2310      	movs	r3, #16
 8015d14:	e791      	b.n	8015c3a <_svfprintf_r+0x22e>
 8015d16:	1d23      	adds	r3, r4, #4
 8015d18:	6822      	ldr	r2, [r4, #0]
 8015d1a:	9312      	str	r3, [sp, #72]	; 0x48
 8015d1c:	ab3f      	add	r3, sp, #252	; 0xfc
 8015d1e:	701a      	strb	r2, [r3, #0]
 8015d20:	221b      	movs	r2, #27
 8015d22:	2000      	movs	r0, #0
 8015d24:	a91e      	add	r1, sp, #120	; 0x78
 8015d26:	1852      	adds	r2, r2, r1
 8015d28:	7010      	strb	r0, [r2, #0]
 8015d2a:	2201      	movs	r2, #1
 8015d2c:	0005      	movs	r5, r0
 8015d2e:	900c      	str	r0, [sp, #48]	; 0x30
 8015d30:	9208      	str	r2, [sp, #32]
 8015d32:	9017      	str	r0, [sp, #92]	; 0x5c
 8015d34:	9010      	str	r0, [sp, #64]	; 0x40
 8015d36:	900f      	str	r0, [sp, #60]	; 0x3c
 8015d38:	9309      	str	r3, [sp, #36]	; 0x24
 8015d3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015d3c:	9a08      	ldr	r2, [sp, #32]
 8015d3e:	9318      	str	r3, [sp, #96]	; 0x60
 8015d40:	4293      	cmp	r3, r2
 8015d42:	da00      	bge.n	8015d46 <_svfprintf_r+0x33a>
 8015d44:	9218      	str	r2, [sp, #96]	; 0x60
 8015d46:	231b      	movs	r3, #27
 8015d48:	aa1e      	add	r2, sp, #120	; 0x78
 8015d4a:	189b      	adds	r3, r3, r2
 8015d4c:	781b      	ldrb	r3, [r3, #0]
 8015d4e:	1e5a      	subs	r2, r3, #1
 8015d50:	4193      	sbcs	r3, r2
 8015d52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015d54:	18d3      	adds	r3, r2, r3
 8015d56:	9318      	str	r3, [sp, #96]	; 0x60
 8015d58:	2302      	movs	r3, #2
 8015d5a:	4033      	ands	r3, r6
 8015d5c:	9320      	str	r3, [sp, #128]	; 0x80
 8015d5e:	d002      	beq.n	8015d66 <_svfprintf_r+0x35a>
 8015d60:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015d62:	3302      	adds	r3, #2
 8015d64:	9318      	str	r3, [sp, #96]	; 0x60
 8015d66:	2384      	movs	r3, #132	; 0x84
 8015d68:	4033      	ands	r3, r6
 8015d6a:	9321      	str	r3, [sp, #132]	; 0x84
 8015d6c:	d121      	bne.n	8015db2 <_svfprintf_r+0x3a6>
 8015d6e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015d70:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015d72:	1a9c      	subs	r4, r3, r2
 8015d74:	2c00      	cmp	r4, #0
 8015d76:	dd1c      	ble.n	8015db2 <_svfprintf_r+0x3a6>
 8015d78:	0039      	movs	r1, r7
 8015d7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d7c:	485d      	ldr	r0, [pc, #372]	; (8015ef4 <_svfprintf_r+0x4e8>)
 8015d7e:	9322      	str	r3, [sp, #136]	; 0x88
 8015d80:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015d82:	3301      	adds	r3, #1
 8015d84:	3108      	adds	r1, #8
 8015d86:	6038      	str	r0, [r7, #0]
 8015d88:	2c10      	cmp	r4, #16
 8015d8a:	dd01      	ble.n	8015d90 <_svfprintf_r+0x384>
 8015d8c:	f000 fd08 	bl	80167a0 <_svfprintf_r+0xd94>
 8015d90:	607c      	str	r4, [r7, #4]
 8015d92:	18a4      	adds	r4, r4, r2
 8015d94:	942e      	str	r4, [sp, #184]	; 0xb8
 8015d96:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d98:	000f      	movs	r7, r1
 8015d9a:	2b07      	cmp	r3, #7
 8015d9c:	dd09      	ble.n	8015db2 <_svfprintf_r+0x3a6>
 8015d9e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015da2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015da4:	f002 ff86 	bl	8018cb4 <__ssprint_r>
 8015da8:	2800      	cmp	r0, #0
 8015daa:	d001      	beq.n	8015db0 <_svfprintf_r+0x3a4>
 8015dac:	f001 f852 	bl	8016e54 <_svfprintf_r+0x1448>
 8015db0:	af2f      	add	r7, sp, #188	; 0xbc
 8015db2:	231b      	movs	r3, #27
 8015db4:	aa1e      	add	r2, sp, #120	; 0x78
 8015db6:	189b      	adds	r3, r3, r2
 8015db8:	781a      	ldrb	r2, [r3, #0]
 8015dba:	2a00      	cmp	r2, #0
 8015dbc:	d017      	beq.n	8015dee <_svfprintf_r+0x3e2>
 8015dbe:	603b      	str	r3, [r7, #0]
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015dc4:	607b      	str	r3, [r7, #4]
 8015dc6:	0013      	movs	r3, r2
 8015dc8:	3301      	adds	r3, #1
 8015dca:	932e      	str	r3, [sp, #184]	; 0xb8
 8015dcc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015dce:	3708      	adds	r7, #8
 8015dd0:	9322      	str	r3, [sp, #136]	; 0x88
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	932d      	str	r3, [sp, #180]	; 0xb4
 8015dd6:	2b07      	cmp	r3, #7
 8015dd8:	dd09      	ble.n	8015dee <_svfprintf_r+0x3e2>
 8015dda:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ddc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015dde:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015de0:	f002 ff68 	bl	8018cb4 <__ssprint_r>
 8015de4:	2800      	cmp	r0, #0
 8015de6:	d001      	beq.n	8015dec <_svfprintf_r+0x3e0>
 8015de8:	f001 f834 	bl	8016e54 <_svfprintf_r+0x1448>
 8015dec:	af2f      	add	r7, sp, #188	; 0xbc
 8015dee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015df0:	2b00      	cmp	r3, #0
 8015df2:	d019      	beq.n	8015e28 <_svfprintf_r+0x41c>
 8015df4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015df6:	9320      	str	r3, [sp, #128]	; 0x80
 8015df8:	ab25      	add	r3, sp, #148	; 0x94
 8015dfa:	603b      	str	r3, [r7, #0]
 8015dfc:	2302      	movs	r3, #2
 8015dfe:	607b      	str	r3, [r7, #4]
 8015e00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015e02:	3708      	adds	r7, #8
 8015e04:	3302      	adds	r3, #2
 8015e06:	932e      	str	r3, [sp, #184]	; 0xb8
 8015e08:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e0a:	9320      	str	r3, [sp, #128]	; 0x80
 8015e0c:	3301      	adds	r3, #1
 8015e0e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e10:	2b07      	cmp	r3, #7
 8015e12:	dd09      	ble.n	8015e28 <_svfprintf_r+0x41c>
 8015e14:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e1a:	f002 ff4b 	bl	8018cb4 <__ssprint_r>
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	d001      	beq.n	8015e26 <_svfprintf_r+0x41a>
 8015e22:	f001 f817 	bl	8016e54 <_svfprintf_r+0x1448>
 8015e26:	af2f      	add	r7, sp, #188	; 0xbc
 8015e28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015e2a:	2b80      	cmp	r3, #128	; 0x80
 8015e2c:	d121      	bne.n	8015e72 <_svfprintf_r+0x466>
 8015e2e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015e30:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015e32:	1a9c      	subs	r4, r3, r2
 8015e34:	2c00      	cmp	r4, #0
 8015e36:	dd1c      	ble.n	8015e72 <_svfprintf_r+0x466>
 8015e38:	0039      	movs	r1, r7
 8015e3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e3c:	482e      	ldr	r0, [pc, #184]	; (8015ef8 <_svfprintf_r+0x4ec>)
 8015e3e:	9320      	str	r3, [sp, #128]	; 0x80
 8015e40:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015e42:	3301      	adds	r3, #1
 8015e44:	3108      	adds	r1, #8
 8015e46:	6038      	str	r0, [r7, #0]
 8015e48:	2c10      	cmp	r4, #16
 8015e4a:	dd01      	ble.n	8015e50 <_svfprintf_r+0x444>
 8015e4c:	f000 fcbc 	bl	80167c8 <_svfprintf_r+0xdbc>
 8015e50:	607c      	str	r4, [r7, #4]
 8015e52:	18a4      	adds	r4, r4, r2
 8015e54:	942e      	str	r4, [sp, #184]	; 0xb8
 8015e56:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e58:	000f      	movs	r7, r1
 8015e5a:	2b07      	cmp	r3, #7
 8015e5c:	dd09      	ble.n	8015e72 <_svfprintf_r+0x466>
 8015e5e:	aa2c      	add	r2, sp, #176	; 0xb0
 8015e60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015e62:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015e64:	f002 ff26 	bl	8018cb4 <__ssprint_r>
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	d001      	beq.n	8015e70 <_svfprintf_r+0x464>
 8015e6c:	f000 fff2 	bl	8016e54 <_svfprintf_r+0x1448>
 8015e70:	af2f      	add	r7, sp, #188	; 0xbc
 8015e72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e74:	9a08      	ldr	r2, [sp, #32]
 8015e76:	1a9c      	subs	r4, r3, r2
 8015e78:	2c00      	cmp	r4, #0
 8015e7a:	dd1c      	ble.n	8015eb6 <_svfprintf_r+0x4aa>
 8015e7c:	0039      	movs	r1, r7
 8015e7e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015e80:	481d      	ldr	r0, [pc, #116]	; (8015ef8 <_svfprintf_r+0x4ec>)
 8015e82:	9317      	str	r3, [sp, #92]	; 0x5c
 8015e84:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015e86:	3301      	adds	r3, #1
 8015e88:	3108      	adds	r1, #8
 8015e8a:	6038      	str	r0, [r7, #0]
 8015e8c:	2c10      	cmp	r4, #16
 8015e8e:	dd01      	ble.n	8015e94 <_svfprintf_r+0x488>
 8015e90:	f000 fcb4 	bl	80167fc <_svfprintf_r+0xdf0>
 8015e94:	18a2      	adds	r2, r4, r2
 8015e96:	607c      	str	r4, [r7, #4]
 8015e98:	922e      	str	r2, [sp, #184]	; 0xb8
 8015e9a:	932d      	str	r3, [sp, #180]	; 0xb4
 8015e9c:	000f      	movs	r7, r1
 8015e9e:	2b07      	cmp	r3, #7
 8015ea0:	dd09      	ble.n	8015eb6 <_svfprintf_r+0x4aa>
 8015ea2:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ea6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ea8:	f002 ff04 	bl	8018cb4 <__ssprint_r>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d001      	beq.n	8015eb4 <_svfprintf_r+0x4a8>
 8015eb0:	f000 ffd0 	bl	8016e54 <_svfprintf_r+0x1448>
 8015eb4:	af2f      	add	r7, sp, #188	; 0xbc
 8015eb6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015eb8:	9317      	str	r3, [sp, #92]	; 0x5c
 8015eba:	05f3      	lsls	r3, r6, #23
 8015ebc:	d501      	bpl.n	8015ec2 <_svfprintf_r+0x4b6>
 8015ebe:	f000 fcb1 	bl	8016824 <_svfprintf_r+0xe18>
 8015ec2:	9a08      	ldr	r2, [sp, #32]
 8015ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ec6:	4694      	mov	ip, r2
 8015ec8:	603b      	str	r3, [r7, #0]
 8015eca:	9b08      	ldr	r3, [sp, #32]
 8015ecc:	607b      	str	r3, [r7, #4]
 8015ece:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015ed0:	4463      	add	r3, ip
 8015ed2:	932e      	str	r3, [sp, #184]	; 0xb8
 8015ed4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015ed6:	9308      	str	r3, [sp, #32]
 8015ed8:	3301      	adds	r3, #1
 8015eda:	932d      	str	r3, [sp, #180]	; 0xb4
 8015edc:	2b07      	cmp	r3, #7
 8015ede:	dd01      	ble.n	8015ee4 <_svfprintf_r+0x4d8>
 8015ee0:	f000 fd94 	bl	8016a0c <_svfprintf_r+0x1000>
 8015ee4:	3708      	adds	r7, #8
 8015ee6:	f000 fce4 	bl	80168b2 <_svfprintf_r+0xea6>
 8015eea:	46c0      	nop			; (mov r8, r8)
 8015eec:	0801c009 	.word	0x0801c009
 8015ef0:	fffffbff 	.word	0xfffffbff
 8015ef4:	0801c01c 	.word	0x0801c01c
 8015ef8:	0801c02c 	.word	0x0801c02c
 8015efc:	2310      	movs	r3, #16
 8015efe:	431e      	orrs	r6, r3
 8015f00:	06b3      	lsls	r3, r6, #26
 8015f02:	d52c      	bpl.n	8015f5e <_svfprintf_r+0x552>
 8015f04:	2307      	movs	r3, #7
 8015f06:	3407      	adds	r4, #7
 8015f08:	439c      	bics	r4, r3
 8015f0a:	0023      	movs	r3, r4
 8015f0c:	3308      	adds	r3, #8
 8015f0e:	9312      	str	r3, [sp, #72]	; 0x48
 8015f10:	6823      	ldr	r3, [r4, #0]
 8015f12:	6864      	ldr	r4, [r4, #4]
 8015f14:	9306      	str	r3, [sp, #24]
 8015f16:	9407      	str	r4, [sp, #28]
 8015f18:	9b07      	ldr	r3, [sp, #28]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	da0b      	bge.n	8015f36 <_svfprintf_r+0x52a>
 8015f1e:	9906      	ldr	r1, [sp, #24]
 8015f20:	9a07      	ldr	r2, [sp, #28]
 8015f22:	2400      	movs	r4, #0
 8015f24:	424b      	negs	r3, r1
 8015f26:	4194      	sbcs	r4, r2
 8015f28:	9306      	str	r3, [sp, #24]
 8015f2a:	9407      	str	r4, [sp, #28]
 8015f2c:	231b      	movs	r3, #27
 8015f2e:	aa1e      	add	r2, sp, #120	; 0x78
 8015f30:	189b      	adds	r3, r3, r2
 8015f32:	222d      	movs	r2, #45	; 0x2d
 8015f34:	701a      	strb	r2, [r3, #0]
 8015f36:	9b08      	ldr	r3, [sp, #32]
 8015f38:	3301      	adds	r3, #1
 8015f3a:	d000      	beq.n	8015f3e <_svfprintf_r+0x532>
 8015f3c:	e382      	b.n	8016644 <_svfprintf_r+0xc38>
 8015f3e:	9b07      	ldr	r3, [sp, #28]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d000      	beq.n	8015f46 <_svfprintf_r+0x53a>
 8015f44:	e3b0      	b.n	80166a8 <_svfprintf_r+0xc9c>
 8015f46:	9b06      	ldr	r3, [sp, #24]
 8015f48:	2b09      	cmp	r3, #9
 8015f4a:	d900      	bls.n	8015f4e <_svfprintf_r+0x542>
 8015f4c:	e3ac      	b.n	80166a8 <_svfprintf_r+0xc9c>
 8015f4e:	23e7      	movs	r3, #231	; 0xe7
 8015f50:	aa1e      	add	r2, sp, #120	; 0x78
 8015f52:	189b      	adds	r3, r3, r2
 8015f54:	9a06      	ldr	r2, [sp, #24]
 8015f56:	3230      	adds	r2, #48	; 0x30
 8015f58:	701a      	strb	r2, [r3, #0]
 8015f5a:	9309      	str	r3, [sp, #36]	; 0x24
 8015f5c:	e395      	b.n	801668a <_svfprintf_r+0xc7e>
 8015f5e:	1d23      	adds	r3, r4, #4
 8015f60:	9312      	str	r3, [sp, #72]	; 0x48
 8015f62:	06f3      	lsls	r3, r6, #27
 8015f64:	d504      	bpl.n	8015f70 <_svfprintf_r+0x564>
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	9306      	str	r3, [sp, #24]
 8015f6a:	17db      	asrs	r3, r3, #31
 8015f6c:	9307      	str	r3, [sp, #28]
 8015f6e:	e7d3      	b.n	8015f18 <_svfprintf_r+0x50c>
 8015f70:	6823      	ldr	r3, [r4, #0]
 8015f72:	0672      	lsls	r2, r6, #25
 8015f74:	d501      	bpl.n	8015f7a <_svfprintf_r+0x56e>
 8015f76:	b21b      	sxth	r3, r3
 8015f78:	e7f6      	b.n	8015f68 <_svfprintf_r+0x55c>
 8015f7a:	05b2      	lsls	r2, r6, #22
 8015f7c:	d5f4      	bpl.n	8015f68 <_svfprintf_r+0x55c>
 8015f7e:	b25b      	sxtb	r3, r3
 8015f80:	e7f2      	b.n	8015f68 <_svfprintf_r+0x55c>
 8015f82:	2307      	movs	r3, #7
 8015f84:	3407      	adds	r4, #7
 8015f86:	439c      	bics	r4, r3
 8015f88:	0023      	movs	r3, r4
 8015f8a:	2201      	movs	r2, #1
 8015f8c:	3308      	adds	r3, #8
 8015f8e:	9312      	str	r3, [sp, #72]	; 0x48
 8015f90:	6823      	ldr	r3, [r4, #0]
 8015f92:	4252      	negs	r2, r2
 8015f94:	931a      	str	r3, [sp, #104]	; 0x68
 8015f96:	6863      	ldr	r3, [r4, #4]
 8015f98:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8015f9a:	005c      	lsls	r4, r3, #1
 8015f9c:	0864      	lsrs	r4, r4, #1
 8015f9e:	9319      	str	r3, [sp, #100]	; 0x64
 8015fa0:	0028      	movs	r0, r5
 8015fa2:	4bcf      	ldr	r3, [pc, #828]	; (80162e0 <_svfprintf_r+0x8d4>)
 8015fa4:	0021      	movs	r1, r4
 8015fa6:	f7ec fcff 	bl	80029a8 <__aeabi_dcmpun>
 8015faa:	2800      	cmp	r0, #0
 8015fac:	d125      	bne.n	8015ffa <_svfprintf_r+0x5ee>
 8015fae:	2201      	movs	r2, #1
 8015fb0:	4bcb      	ldr	r3, [pc, #812]	; (80162e0 <_svfprintf_r+0x8d4>)
 8015fb2:	4252      	negs	r2, r2
 8015fb4:	0028      	movs	r0, r5
 8015fb6:	0021      	movs	r1, r4
 8015fb8:	f7ea fa60 	bl	800047c <__aeabi_dcmple>
 8015fbc:	2800      	cmp	r0, #0
 8015fbe:	d11c      	bne.n	8015ffa <_svfprintf_r+0x5ee>
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	2300      	movs	r3, #0
 8015fc4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015fc6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015fc8:	f7ea fa4e 	bl	8000468 <__aeabi_dcmplt>
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	d004      	beq.n	8015fda <_svfprintf_r+0x5ce>
 8015fd0:	231b      	movs	r3, #27
 8015fd2:	aa1e      	add	r2, sp, #120	; 0x78
 8015fd4:	189b      	adds	r3, r3, r2
 8015fd6:	222d      	movs	r2, #45	; 0x2d
 8015fd8:	701a      	strb	r2, [r3, #0]
 8015fda:	4bc2      	ldr	r3, [pc, #776]	; (80162e4 <_svfprintf_r+0x8d8>)
 8015fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8015fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fe0:	2b47      	cmp	r3, #71	; 0x47
 8015fe2:	dc01      	bgt.n	8015fe8 <_svfprintf_r+0x5dc>
 8015fe4:	4bc0      	ldr	r3, [pc, #768]	; (80162e8 <_svfprintf_r+0x8dc>)
 8015fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8015fe8:	2380      	movs	r3, #128	; 0x80
 8015fea:	439e      	bics	r6, r3
 8015fec:	2300      	movs	r3, #0
 8015fee:	930c      	str	r3, [sp, #48]	; 0x30
 8015ff0:	3303      	adds	r3, #3
 8015ff2:	9308      	str	r3, [sp, #32]
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ff8:	e34f      	b.n	801669a <_svfprintf_r+0xc8e>
 8015ffa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015ffe:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016000:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016002:	f7ec fcd1 	bl	80029a8 <__aeabi_dcmpun>
 8016006:	2800      	cmp	r0, #0
 8016008:	d00e      	beq.n	8016028 <_svfprintf_r+0x61c>
 801600a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801600c:	2b00      	cmp	r3, #0
 801600e:	da04      	bge.n	801601a <_svfprintf_r+0x60e>
 8016010:	231b      	movs	r3, #27
 8016012:	aa1e      	add	r2, sp, #120	; 0x78
 8016014:	189b      	adds	r3, r3, r2
 8016016:	222d      	movs	r2, #45	; 0x2d
 8016018:	701a      	strb	r2, [r3, #0]
 801601a:	4bb4      	ldr	r3, [pc, #720]	; (80162ec <_svfprintf_r+0x8e0>)
 801601c:	9309      	str	r3, [sp, #36]	; 0x24
 801601e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016020:	2b47      	cmp	r3, #71	; 0x47
 8016022:	dce1      	bgt.n	8015fe8 <_svfprintf_r+0x5dc>
 8016024:	4bb2      	ldr	r3, [pc, #712]	; (80162f0 <_svfprintf_r+0x8e4>)
 8016026:	e7de      	b.n	8015fe6 <_svfprintf_r+0x5da>
 8016028:	2320      	movs	r3, #32
 801602a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801602c:	439a      	bics	r2, r3
 801602e:	920f      	str	r2, [sp, #60]	; 0x3c
 8016030:	2a41      	cmp	r2, #65	; 0x41
 8016032:	d124      	bne.n	801607e <_svfprintf_r+0x672>
 8016034:	2230      	movs	r2, #48	; 0x30
 8016036:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016038:	ab25      	add	r3, sp, #148	; 0x94
 801603a:	701a      	strb	r2, [r3, #0]
 801603c:	3228      	adds	r2, #40	; 0x28
 801603e:	2961      	cmp	r1, #97	; 0x61
 8016040:	d100      	bne.n	8016044 <_svfprintf_r+0x638>
 8016042:	3220      	adds	r2, #32
 8016044:	705a      	strb	r2, [r3, #1]
 8016046:	2302      	movs	r3, #2
 8016048:	431e      	orrs	r6, r3
 801604a:	9b08      	ldr	r3, [sp, #32]
 801604c:	2b63      	cmp	r3, #99	; 0x63
 801604e:	dc00      	bgt.n	8016052 <_svfprintf_r+0x646>
 8016050:	e09e      	b.n	8016190 <_svfprintf_r+0x784>
 8016052:	1c59      	adds	r1, r3, #1
 8016054:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016056:	f7fe f8e1 	bl	801421c <_malloc_r>
 801605a:	9009      	str	r0, [sp, #36]	; 0x24
 801605c:	2800      	cmp	r0, #0
 801605e:	d000      	beq.n	8016062 <_svfprintf_r+0x656>
 8016060:	e09b      	b.n	801619a <_svfprintf_r+0x78e>
 8016062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016064:	899a      	ldrh	r2, [r3, #12]
 8016066:	2340      	movs	r3, #64	; 0x40
 8016068:	4313      	orrs	r3, r2
 801606a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801606c:	8193      	strh	r3, [r2, #12]
 801606e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016070:	899b      	ldrh	r3, [r3, #12]
 8016072:	065b      	lsls	r3, r3, #25
 8016074:	d400      	bmi.n	8016078 <_svfprintf_r+0x66c>
 8016076:	e4ee      	b.n	8015a56 <_svfprintf_r+0x4a>
 8016078:	2301      	movs	r3, #1
 801607a:	425b      	negs	r3, r3
 801607c:	e4ea      	b.n	8015a54 <_svfprintf_r+0x48>
 801607e:	9b08      	ldr	r3, [sp, #32]
 8016080:	900c      	str	r0, [sp, #48]	; 0x30
 8016082:	3301      	adds	r3, #1
 8016084:	d100      	bne.n	8016088 <_svfprintf_r+0x67c>
 8016086:	e08b      	b.n	80161a0 <_svfprintf_r+0x794>
 8016088:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801608a:	2b47      	cmp	r3, #71	; 0x47
 801608c:	d103      	bne.n	8016096 <_svfprintf_r+0x68a>
 801608e:	9b08      	ldr	r3, [sp, #32]
 8016090:	2b00      	cmp	r3, #0
 8016092:	d100      	bne.n	8016096 <_svfprintf_r+0x68a>
 8016094:	e087      	b.n	80161a6 <_svfprintf_r+0x79a>
 8016096:	2380      	movs	r3, #128	; 0x80
 8016098:	005b      	lsls	r3, r3, #1
 801609a:	4333      	orrs	r3, r6
 801609c:	9320      	str	r3, [sp, #128]	; 0x80
 801609e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80160a0:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	db00      	blt.n	80160a8 <_svfprintf_r+0x69c>
 80160a6:	e082      	b.n	80161ae <_svfprintf_r+0x7a2>
 80160a8:	2280      	movs	r2, #128	; 0x80
 80160aa:	0612      	lsls	r2, r2, #24
 80160ac:	4694      	mov	ip, r2
 80160ae:	4463      	add	r3, ip
 80160b0:	930d      	str	r3, [sp, #52]	; 0x34
 80160b2:	232d      	movs	r3, #45	; 0x2d
 80160b4:	9322      	str	r3, [sp, #136]	; 0x88
 80160b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160b8:	2b41      	cmp	r3, #65	; 0x41
 80160ba:	d000      	beq.n	80160be <_svfprintf_r+0x6b2>
 80160bc:	e105      	b.n	80162ca <_svfprintf_r+0x8be>
 80160be:	aa26      	add	r2, sp, #152	; 0x98
 80160c0:	0020      	movs	r0, r4
 80160c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80160c4:	f002 fdc4 	bl	8018c50 <frexp>
 80160c8:	23ff      	movs	r3, #255	; 0xff
 80160ca:	2200      	movs	r2, #0
 80160cc:	059b      	lsls	r3, r3, #22
 80160ce:	f7eb feb1 	bl	8001e34 <__aeabi_dmul>
 80160d2:	2200      	movs	r2, #0
 80160d4:	2300      	movs	r3, #0
 80160d6:	0004      	movs	r4, r0
 80160d8:	000d      	movs	r5, r1
 80160da:	f7ea f9bf 	bl	800045c <__aeabi_dcmpeq>
 80160de:	2800      	cmp	r0, #0
 80160e0:	d001      	beq.n	80160e6 <_svfprintf_r+0x6da>
 80160e2:	2301      	movs	r3, #1
 80160e4:	9326      	str	r3, [sp, #152]	; 0x98
 80160e6:	4b83      	ldr	r3, [pc, #524]	; (80162f4 <_svfprintf_r+0x8e8>)
 80160e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80160ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80160ec:	2b61      	cmp	r3, #97	; 0x61
 80160ee:	d101      	bne.n	80160f4 <_svfprintf_r+0x6e8>
 80160f0:	4b81      	ldr	r3, [pc, #516]	; (80162f8 <_svfprintf_r+0x8ec>)
 80160f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80160f4:	9b08      	ldr	r3, [sp, #32]
 80160f6:	3b01      	subs	r3, #1
 80160f8:	9310      	str	r3, [sp, #64]	; 0x40
 80160fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160fc:	9318      	str	r3, [sp, #96]	; 0x60
 80160fe:	2200      	movs	r2, #0
 8016100:	4b7e      	ldr	r3, [pc, #504]	; (80162fc <_svfprintf_r+0x8f0>)
 8016102:	0020      	movs	r0, r4
 8016104:	0029      	movs	r1, r5
 8016106:	f7eb fe95 	bl	8001e34 <__aeabi_dmul>
 801610a:	000d      	movs	r5, r1
 801610c:	0004      	movs	r4, r0
 801610e:	f7ec fc67 	bl	80029e0 <__aeabi_d2iz>
 8016112:	9021      	str	r0, [sp, #132]	; 0x84
 8016114:	f7ec fc9a 	bl	8002a4c <__aeabi_i2d>
 8016118:	0002      	movs	r2, r0
 801611a:	000b      	movs	r3, r1
 801611c:	0020      	movs	r0, r4
 801611e:	0029      	movs	r1, r5
 8016120:	f7ec f8fa 	bl	8002318 <__aeabi_dsub>
 8016124:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016126:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016128:	3301      	adds	r3, #1
 801612a:	930d      	str	r3, [sp, #52]	; 0x34
 801612c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801612e:	0004      	movs	r4, r0
 8016130:	5c9b      	ldrb	r3, [r3, r2]
 8016132:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016134:	000d      	movs	r5, r1
 8016136:	7013      	strb	r3, [r2, #0]
 8016138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801613a:	9323      	str	r3, [sp, #140]	; 0x8c
 801613c:	3301      	adds	r3, #1
 801613e:	d00a      	beq.n	8016156 <_svfprintf_r+0x74a>
 8016140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016142:	2200      	movs	r2, #0
 8016144:	3b01      	subs	r3, #1
 8016146:	9310      	str	r3, [sp, #64]	; 0x40
 8016148:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801614a:	9318      	str	r3, [sp, #96]	; 0x60
 801614c:	2300      	movs	r3, #0
 801614e:	f7ea f985 	bl	800045c <__aeabi_dcmpeq>
 8016152:	2800      	cmp	r0, #0
 8016154:	d0d3      	beq.n	80160fe <_svfprintf_r+0x6f2>
 8016156:	2200      	movs	r2, #0
 8016158:	4b69      	ldr	r3, [pc, #420]	; (8016300 <_svfprintf_r+0x8f4>)
 801615a:	0020      	movs	r0, r4
 801615c:	0029      	movs	r1, r5
 801615e:	f7ea f997 	bl	8000490 <__aeabi_dcmpgt>
 8016162:	2800      	cmp	r0, #0
 8016164:	d126      	bne.n	80161b4 <_svfprintf_r+0x7a8>
 8016166:	2200      	movs	r2, #0
 8016168:	4b65      	ldr	r3, [pc, #404]	; (8016300 <_svfprintf_r+0x8f4>)
 801616a:	0020      	movs	r0, r4
 801616c:	0029      	movs	r1, r5
 801616e:	f7ea f975 	bl	800045c <__aeabi_dcmpeq>
 8016172:	2800      	cmp	r0, #0
 8016174:	d002      	beq.n	801617c <_svfprintf_r+0x770>
 8016176:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016178:	07db      	lsls	r3, r3, #31
 801617a:	d41b      	bmi.n	80161b4 <_svfprintf_r+0x7a8>
 801617c:	2130      	movs	r1, #48	; 0x30
 801617e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016180:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8016182:	1898      	adds	r0, r3, r2
 8016184:	930d      	str	r3, [sp, #52]	; 0x34
 8016186:	1ac2      	subs	r2, r0, r3
 8016188:	d426      	bmi.n	80161d8 <_svfprintf_r+0x7cc>
 801618a:	7019      	strb	r1, [r3, #0]
 801618c:	3301      	adds	r3, #1
 801618e:	e7f9      	b.n	8016184 <_svfprintf_r+0x778>
 8016190:	2300      	movs	r3, #0
 8016192:	930c      	str	r3, [sp, #48]	; 0x30
 8016194:	ab3f      	add	r3, sp, #252	; 0xfc
 8016196:	9309      	str	r3, [sp, #36]	; 0x24
 8016198:	e77d      	b.n	8016096 <_svfprintf_r+0x68a>
 801619a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801619c:	930c      	str	r3, [sp, #48]	; 0x30
 801619e:	e77a      	b.n	8016096 <_svfprintf_r+0x68a>
 80161a0:	2306      	movs	r3, #6
 80161a2:	9308      	str	r3, [sp, #32]
 80161a4:	e777      	b.n	8016096 <_svfprintf_r+0x68a>
 80161a6:	9b08      	ldr	r3, [sp, #32]
 80161a8:	930c      	str	r3, [sp, #48]	; 0x30
 80161aa:	2301      	movs	r3, #1
 80161ac:	e7f9      	b.n	80161a2 <_svfprintf_r+0x796>
 80161ae:	930d      	str	r3, [sp, #52]	; 0x34
 80161b0:	2300      	movs	r3, #0
 80161b2:	e77f      	b.n	80160b4 <_svfprintf_r+0x6a8>
 80161b4:	2030      	movs	r0, #48	; 0x30
 80161b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161b8:	932a      	str	r3, [sp, #168]	; 0xa8
 80161ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161bc:	7bda      	ldrb	r2, [r3, #15]
 80161be:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80161c0:	3b01      	subs	r3, #1
 80161c2:	932a      	str	r3, [sp, #168]	; 0xa8
 80161c4:	7819      	ldrb	r1, [r3, #0]
 80161c6:	4291      	cmp	r1, r2
 80161c8:	d07d      	beq.n	80162c6 <_svfprintf_r+0x8ba>
 80161ca:	1c4a      	adds	r2, r1, #1
 80161cc:	b2d2      	uxtb	r2, r2
 80161ce:	2939      	cmp	r1, #57	; 0x39
 80161d0:	d101      	bne.n	80161d6 <_svfprintf_r+0x7ca>
 80161d2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80161d4:	7a92      	ldrb	r2, [r2, #10]
 80161d6:	701a      	strb	r2, [r3, #0]
 80161d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80161dc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80161de:	1a9b      	subs	r3, r3, r2
 80161e0:	930d      	str	r3, [sp, #52]	; 0x34
 80161e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80161e4:	2b47      	cmp	r3, #71	; 0x47
 80161e6:	d000      	beq.n	80161ea <_svfprintf_r+0x7de>
 80161e8:	e0d2      	b.n	8016390 <_svfprintf_r+0x984>
 80161ea:	1ceb      	adds	r3, r5, #3
 80161ec:	db03      	blt.n	80161f6 <_svfprintf_r+0x7ea>
 80161ee:	9b08      	ldr	r3, [sp, #32]
 80161f0:	42ab      	cmp	r3, r5
 80161f2:	db00      	blt.n	80161f6 <_svfprintf_r+0x7ea>
 80161f4:	e0fd      	b.n	80163f2 <_svfprintf_r+0x9e6>
 80161f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161f8:	3b02      	subs	r3, #2
 80161fa:	930e      	str	r3, [sp, #56]	; 0x38
 80161fc:	2238      	movs	r2, #56	; 0x38
 80161fe:	466b      	mov	r3, sp
 8016200:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016202:	189b      	adds	r3, r3, r2
 8016204:	3a18      	subs	r2, #24
 8016206:	4391      	bics	r1, r2
 8016208:	1e6c      	subs	r4, r5, #1
 801620a:	000a      	movs	r2, r1
 801620c:	9426      	str	r4, [sp, #152]	; 0x98
 801620e:	781b      	ldrb	r3, [r3, #0]
 8016210:	2100      	movs	r1, #0
 8016212:	2a41      	cmp	r2, #65	; 0x41
 8016214:	d102      	bne.n	801621c <_svfprintf_r+0x810>
 8016216:	330f      	adds	r3, #15
 8016218:	b2db      	uxtb	r3, r3
 801621a:	3101      	adds	r1, #1
 801621c:	aa28      	add	r2, sp, #160	; 0xa0
 801621e:	7013      	strb	r3, [r2, #0]
 8016220:	232b      	movs	r3, #43	; 0x2b
 8016222:	2c00      	cmp	r4, #0
 8016224:	da02      	bge.n	801622c <_svfprintf_r+0x820>
 8016226:	2401      	movs	r4, #1
 8016228:	232d      	movs	r3, #45	; 0x2d
 801622a:	1b64      	subs	r4, r4, r5
 801622c:	7053      	strb	r3, [r2, #1]
 801622e:	2c09      	cmp	r4, #9
 8016230:	dc00      	bgt.n	8016234 <_svfprintf_r+0x828>
 8016232:	e0c7      	b.n	80163c4 <_svfprintf_r+0x9b8>
 8016234:	2537      	movs	r5, #55	; 0x37
 8016236:	ab1e      	add	r3, sp, #120	; 0x78
 8016238:	18ed      	adds	r5, r5, r3
 801623a:	1e6b      	subs	r3, r5, #1
 801623c:	0020      	movs	r0, r4
 801623e:	210a      	movs	r1, #10
 8016240:	9308      	str	r3, [sp, #32]
 8016242:	f7ea f8f5 	bl	8000430 <__aeabi_idivmod>
 8016246:	1e6b      	subs	r3, r5, #1
 8016248:	3130      	adds	r1, #48	; 0x30
 801624a:	7019      	strb	r1, [r3, #0]
 801624c:	0020      	movs	r0, r4
 801624e:	210a      	movs	r1, #10
 8016250:	f7ea f808 	bl	8000264 <__divsi3>
 8016254:	0004      	movs	r4, r0
 8016256:	2809      	cmp	r0, #9
 8016258:	dd00      	ble.n	801625c <_svfprintf_r+0x850>
 801625a:	e0ac      	b.n	80163b6 <_svfprintf_r+0x9aa>
 801625c:	232a      	movs	r3, #42	; 0x2a
 801625e:	2137      	movs	r1, #55	; 0x37
 8016260:	aa1e      	add	r2, sp, #120	; 0x78
 8016262:	3d02      	subs	r5, #2
 8016264:	3430      	adds	r4, #48	; 0x30
 8016266:	702c      	strb	r4, [r5, #0]
 8016268:	189b      	adds	r3, r3, r2
 801626a:	1889      	adds	r1, r1, r2
 801626c:	001a      	movs	r2, r3
 801626e:	428d      	cmp	r5, r1
 8016270:	d200      	bcs.n	8016274 <_svfprintf_r+0x868>
 8016272:	e0a2      	b.n	80163ba <_svfprintf_r+0x9ae>
 8016274:	ab28      	add	r3, sp, #160	; 0xa0
 8016276:	1ad3      	subs	r3, r2, r3
 8016278:	931d      	str	r3, [sp, #116]	; 0x74
 801627a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801627c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801627e:	4694      	mov	ip, r2
 8016280:	4463      	add	r3, ip
 8016282:	9308      	str	r3, [sp, #32]
 8016284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016286:	2b01      	cmp	r3, #1
 8016288:	dc01      	bgt.n	801628e <_svfprintf_r+0x882>
 801628a:	07f3      	lsls	r3, r6, #31
 801628c:	d504      	bpl.n	8016298 <_svfprintf_r+0x88c>
 801628e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016290:	9b08      	ldr	r3, [sp, #32]
 8016292:	4694      	mov	ip, r2
 8016294:	4463      	add	r3, ip
 8016296:	9308      	str	r3, [sp, #32]
 8016298:	2280      	movs	r2, #128	; 0x80
 801629a:	4b1a      	ldr	r3, [pc, #104]	; (8016304 <_svfprintf_r+0x8f8>)
 801629c:	0052      	lsls	r2, r2, #1
 801629e:	4033      	ands	r3, r6
 80162a0:	431a      	orrs	r2, r3
 80162a2:	2300      	movs	r3, #0
 80162a4:	001d      	movs	r5, r3
 80162a6:	9220      	str	r2, [sp, #128]	; 0x80
 80162a8:	9310      	str	r3, [sp, #64]	; 0x40
 80162aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80162ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d100      	bne.n	80162b4 <_svfprintf_r+0x8a8>
 80162b2:	e270      	b.n	8016796 <_svfprintf_r+0xd8a>
 80162b4:	231b      	movs	r3, #27
 80162b6:	aa1e      	add	r2, sp, #120	; 0x78
 80162b8:	189b      	adds	r3, r3, r2
 80162ba:	222d      	movs	r2, #45	; 0x2d
 80162bc:	701a      	strb	r2, [r3, #0]
 80162be:	2300      	movs	r3, #0
 80162c0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80162c2:	9317      	str	r3, [sp, #92]	; 0x5c
 80162c4:	e539      	b.n	8015d3a <_svfprintf_r+0x32e>
 80162c6:	7018      	strb	r0, [r3, #0]
 80162c8:	e779      	b.n	80161be <_svfprintf_r+0x7b2>
 80162ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80162cc:	2b46      	cmp	r3, #70	; 0x46
 80162ce:	d01b      	beq.n	8016308 <_svfprintf_r+0x8fc>
 80162d0:	9d08      	ldr	r5, [sp, #32]
 80162d2:	2b45      	cmp	r3, #69	; 0x45
 80162d4:	d101      	bne.n	80162da <_svfprintf_r+0x8ce>
 80162d6:	9b08      	ldr	r3, [sp, #32]
 80162d8:	1c5d      	adds	r5, r3, #1
 80162da:	2302      	movs	r3, #2
 80162dc:	e016      	b.n	801630c <_svfprintf_r+0x900>
 80162de:	46c0      	nop			; (mov r8, r8)
 80162e0:	7fefffff 	.word	0x7fefffff
 80162e4:	0801bfec 	.word	0x0801bfec
 80162e8:	0801bfe8 	.word	0x0801bfe8
 80162ec:	0801bff4 	.word	0x0801bff4
 80162f0:	0801bff0 	.word	0x0801bff0
 80162f4:	0801c009 	.word	0x0801c009
 80162f8:	0801bff8 	.word	0x0801bff8
 80162fc:	40300000 	.word	0x40300000
 8016300:	3fe00000 	.word	0x3fe00000
 8016304:	fffffbff 	.word	0xfffffbff
 8016308:	2303      	movs	r3, #3
 801630a:	9d08      	ldr	r5, [sp, #32]
 801630c:	aa2a      	add	r2, sp, #168	; 0xa8
 801630e:	9204      	str	r2, [sp, #16]
 8016310:	aa27      	add	r2, sp, #156	; 0x9c
 8016312:	9203      	str	r2, [sp, #12]
 8016314:	aa26      	add	r2, sp, #152	; 0x98
 8016316:	9202      	str	r2, [sp, #8]
 8016318:	9300      	str	r3, [sp, #0]
 801631a:	9501      	str	r5, [sp, #4]
 801631c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801631e:	0022      	movs	r2, r4
 8016320:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016322:	f000 fe79 	bl	8017018 <_dtoa_r>
 8016326:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016328:	9009      	str	r0, [sp, #36]	; 0x24
 801632a:	2b47      	cmp	r3, #71	; 0x47
 801632c:	d101      	bne.n	8016332 <_svfprintf_r+0x926>
 801632e:	07f3      	lsls	r3, r6, #31
 8016330:	d524      	bpl.n	801637c <_svfprintf_r+0x970>
 8016332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016334:	195b      	adds	r3, r3, r5
 8016336:	9310      	str	r3, [sp, #64]	; 0x40
 8016338:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801633a:	2b46      	cmp	r3, #70	; 0x46
 801633c:	d113      	bne.n	8016366 <_svfprintf_r+0x95a>
 801633e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	2b30      	cmp	r3, #48	; 0x30
 8016344:	d10a      	bne.n	801635c <_svfprintf_r+0x950>
 8016346:	2200      	movs	r2, #0
 8016348:	2300      	movs	r3, #0
 801634a:	0020      	movs	r0, r4
 801634c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801634e:	f7ea f885 	bl	800045c <__aeabi_dcmpeq>
 8016352:	2800      	cmp	r0, #0
 8016354:	d102      	bne.n	801635c <_svfprintf_r+0x950>
 8016356:	2301      	movs	r3, #1
 8016358:	1b5d      	subs	r5, r3, r5
 801635a:	9526      	str	r5, [sp, #152]	; 0x98
 801635c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801635e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016360:	4694      	mov	ip, r2
 8016362:	4463      	add	r3, ip
 8016364:	9310      	str	r3, [sp, #64]	; 0x40
 8016366:	2200      	movs	r2, #0
 8016368:	2300      	movs	r3, #0
 801636a:	0020      	movs	r0, r4
 801636c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801636e:	f7ea f875 	bl	800045c <__aeabi_dcmpeq>
 8016372:	2230      	movs	r2, #48	; 0x30
 8016374:	2800      	cmp	r0, #0
 8016376:	d006      	beq.n	8016386 <_svfprintf_r+0x97a>
 8016378:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801637a:	932a      	str	r3, [sp, #168]	; 0xa8
 801637c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801637e:	e72c      	b.n	80161da <_svfprintf_r+0x7ce>
 8016380:	1c59      	adds	r1, r3, #1
 8016382:	912a      	str	r1, [sp, #168]	; 0xa8
 8016384:	701a      	strb	r2, [r3, #0]
 8016386:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016388:	9910      	ldr	r1, [sp, #64]	; 0x40
 801638a:	4299      	cmp	r1, r3
 801638c:	d8f8      	bhi.n	8016380 <_svfprintf_r+0x974>
 801638e:	e7f5      	b.n	801637c <_svfprintf_r+0x970>
 8016390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016392:	2b46      	cmp	r3, #70	; 0x46
 8016394:	d000      	beq.n	8016398 <_svfprintf_r+0x98c>
 8016396:	e731      	b.n	80161fc <_svfprintf_r+0x7f0>
 8016398:	9b08      	ldr	r3, [sp, #32]
 801639a:	2d00      	cmp	r5, #0
 801639c:	dd21      	ble.n	80163e2 <_svfprintf_r+0x9d6>
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d101      	bne.n	80163a6 <_svfprintf_r+0x99a>
 80163a2:	07f3      	lsls	r3, r6, #31
 80163a4:	d54a      	bpl.n	801643c <_svfprintf_r+0xa30>
 80163a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163a8:	18eb      	adds	r3, r5, r3
 80163aa:	9a08      	ldr	r2, [sp, #32]
 80163ac:	18d3      	adds	r3, r2, r3
 80163ae:	9308      	str	r3, [sp, #32]
 80163b0:	2366      	movs	r3, #102	; 0x66
 80163b2:	930e      	str	r3, [sp, #56]	; 0x38
 80163b4:	e034      	b.n	8016420 <_svfprintf_r+0xa14>
 80163b6:	9d08      	ldr	r5, [sp, #32]
 80163b8:	e73f      	b.n	801623a <_svfprintf_r+0x82e>
 80163ba:	782a      	ldrb	r2, [r5, #0]
 80163bc:	3501      	adds	r5, #1
 80163be:	701a      	strb	r2, [r3, #0]
 80163c0:	3301      	adds	r3, #1
 80163c2:	e753      	b.n	801626c <_svfprintf_r+0x860>
 80163c4:	232a      	movs	r3, #42	; 0x2a
 80163c6:	aa1e      	add	r2, sp, #120	; 0x78
 80163c8:	189b      	adds	r3, r3, r2
 80163ca:	2900      	cmp	r1, #0
 80163cc:	d105      	bne.n	80163da <_svfprintf_r+0x9ce>
 80163ce:	2230      	movs	r2, #48	; 0x30
 80163d0:	ab28      	add	r3, sp, #160	; 0xa0
 80163d2:	709a      	strb	r2, [r3, #2]
 80163d4:	232b      	movs	r3, #43	; 0x2b
 80163d6:	aa1e      	add	r2, sp, #120	; 0x78
 80163d8:	189b      	adds	r3, r3, r2
 80163da:	3430      	adds	r4, #48	; 0x30
 80163dc:	1c5a      	adds	r2, r3, #1
 80163de:	701c      	strb	r4, [r3, #0]
 80163e0:	e748      	b.n	8016274 <_svfprintf_r+0x868>
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d102      	bne.n	80163ec <_svfprintf_r+0x9e0>
 80163e6:	3301      	adds	r3, #1
 80163e8:	421e      	tst	r6, r3
 80163ea:	d029      	beq.n	8016440 <_svfprintf_r+0xa34>
 80163ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163ee:	3301      	adds	r3, #1
 80163f0:	e7db      	b.n	80163aa <_svfprintf_r+0x99e>
 80163f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163f4:	42ab      	cmp	r3, r5
 80163f6:	dc06      	bgt.n	8016406 <_svfprintf_r+0x9fa>
 80163f8:	07f3      	lsls	r3, r6, #31
 80163fa:	d524      	bpl.n	8016446 <_svfprintf_r+0xa3a>
 80163fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80163fe:	18eb      	adds	r3, r5, r3
 8016400:	9308      	str	r3, [sp, #32]
 8016402:	2367      	movs	r3, #103	; 0x67
 8016404:	e7d5      	b.n	80163b2 <_svfprintf_r+0x9a6>
 8016406:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016408:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801640a:	4694      	mov	ip, r2
 801640c:	4463      	add	r3, ip
 801640e:	9308      	str	r3, [sp, #32]
 8016410:	2367      	movs	r3, #103	; 0x67
 8016412:	930e      	str	r3, [sp, #56]	; 0x38
 8016414:	2d00      	cmp	r5, #0
 8016416:	dc03      	bgt.n	8016420 <_svfprintf_r+0xa14>
 8016418:	9b08      	ldr	r3, [sp, #32]
 801641a:	1b5b      	subs	r3, r3, r5
 801641c:	3301      	adds	r3, #1
 801641e:	9308      	str	r3, [sp, #32]
 8016420:	2380      	movs	r3, #128	; 0x80
 8016422:	00db      	lsls	r3, r3, #3
 8016424:	401e      	ands	r6, r3
 8016426:	2300      	movs	r3, #0
 8016428:	960f      	str	r6, [sp, #60]	; 0x3c
 801642a:	9310      	str	r3, [sp, #64]	; 0x40
 801642c:	2e00      	cmp	r6, #0
 801642e:	d100      	bne.n	8016432 <_svfprintf_r+0xa26>
 8016430:	e73c      	b.n	80162ac <_svfprintf_r+0x8a0>
 8016432:	2d00      	cmp	r5, #0
 8016434:	dc27      	bgt.n	8016486 <_svfprintf_r+0xa7a>
 8016436:	2300      	movs	r3, #0
 8016438:	930f      	str	r3, [sp, #60]	; 0x3c
 801643a:	e737      	b.n	80162ac <_svfprintf_r+0x8a0>
 801643c:	9508      	str	r5, [sp, #32]
 801643e:	e7b7      	b.n	80163b0 <_svfprintf_r+0x9a4>
 8016440:	2266      	movs	r2, #102	; 0x66
 8016442:	920e      	str	r2, [sp, #56]	; 0x38
 8016444:	e7eb      	b.n	801641e <_svfprintf_r+0xa12>
 8016446:	9508      	str	r5, [sp, #32]
 8016448:	e7db      	b.n	8016402 <_svfprintf_r+0x9f6>
 801644a:	42ab      	cmp	r3, r5
 801644c:	da0e      	bge.n	801646c <_svfprintf_r+0xa60>
 801644e:	1aed      	subs	r5, r5, r3
 8016450:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016452:	785b      	ldrb	r3, [r3, #1]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d012      	beq.n	801647e <_svfprintf_r+0xa72>
 8016458:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801645a:	3301      	adds	r3, #1
 801645c:	930f      	str	r3, [sp, #60]	; 0x3c
 801645e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016460:	3301      	adds	r3, #1
 8016462:	9313      	str	r3, [sp, #76]	; 0x4c
 8016464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016466:	781b      	ldrb	r3, [r3, #0]
 8016468:	2bff      	cmp	r3, #255	; 0xff
 801646a:	d1ee      	bne.n	801644a <_svfprintf_r+0xa3e>
 801646c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801646e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016470:	189b      	adds	r3, r3, r2
 8016472:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016474:	4353      	muls	r3, r2
 8016476:	9a08      	ldr	r2, [sp, #32]
 8016478:	189b      	adds	r3, r3, r2
 801647a:	9308      	str	r3, [sp, #32]
 801647c:	e716      	b.n	80162ac <_svfprintf_r+0x8a0>
 801647e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016480:	3301      	adds	r3, #1
 8016482:	9310      	str	r3, [sp, #64]	; 0x40
 8016484:	e7ee      	b.n	8016464 <_svfprintf_r+0xa58>
 8016486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016488:	930f      	str	r3, [sp, #60]	; 0x3c
 801648a:	e7eb      	b.n	8016464 <_svfprintf_r+0xa58>
 801648c:	0022      	movs	r2, r4
 801648e:	ca08      	ldmia	r2!, {r3}
 8016490:	9212      	str	r2, [sp, #72]	; 0x48
 8016492:	06b2      	lsls	r2, r6, #26
 8016494:	d508      	bpl.n	80164a8 <_svfprintf_r+0xa9c>
 8016496:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016498:	601a      	str	r2, [r3, #0]
 801649a:	17d2      	asrs	r2, r2, #31
 801649c:	605a      	str	r2, [r3, #4]
 801649e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80164a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80164a2:	9309      	str	r3, [sp, #36]	; 0x24
 80164a4:	f7ff faeb 	bl	8015a7e <_svfprintf_r+0x72>
 80164a8:	06f2      	lsls	r2, r6, #27
 80164aa:	d502      	bpl.n	80164b2 <_svfprintf_r+0xaa6>
 80164ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164ae:	601a      	str	r2, [r3, #0]
 80164b0:	e7f5      	b.n	801649e <_svfprintf_r+0xa92>
 80164b2:	0672      	lsls	r2, r6, #25
 80164b4:	d502      	bpl.n	80164bc <_svfprintf_r+0xab0>
 80164b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164b8:	801a      	strh	r2, [r3, #0]
 80164ba:	e7f0      	b.n	801649e <_svfprintf_r+0xa92>
 80164bc:	05b2      	lsls	r2, r6, #22
 80164be:	d5f5      	bpl.n	80164ac <_svfprintf_r+0xaa0>
 80164c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80164c2:	701a      	strb	r2, [r3, #0]
 80164c4:	e7eb      	b.n	801649e <_svfprintf_r+0xa92>
 80164c6:	2310      	movs	r3, #16
 80164c8:	431e      	orrs	r6, r3
 80164ca:	2220      	movs	r2, #32
 80164cc:	4032      	ands	r2, r6
 80164ce:	d025      	beq.n	801651c <_svfprintf_r+0xb10>
 80164d0:	2307      	movs	r3, #7
 80164d2:	3407      	adds	r4, #7
 80164d4:	439c      	bics	r4, r3
 80164d6:	0023      	movs	r3, r4
 80164d8:	3308      	adds	r3, #8
 80164da:	9312      	str	r3, [sp, #72]	; 0x48
 80164dc:	6823      	ldr	r3, [r4, #0]
 80164de:	6864      	ldr	r4, [r4, #4]
 80164e0:	9306      	str	r3, [sp, #24]
 80164e2:	9407      	str	r4, [sp, #28]
 80164e4:	4bc2      	ldr	r3, [pc, #776]	; (80167f0 <_svfprintf_r+0xde4>)
 80164e6:	401e      	ands	r6, r3
 80164e8:	2300      	movs	r3, #0
 80164ea:	221b      	movs	r2, #27
 80164ec:	a91e      	add	r1, sp, #120	; 0x78
 80164ee:	1852      	adds	r2, r2, r1
 80164f0:	2100      	movs	r1, #0
 80164f2:	7011      	strb	r1, [r2, #0]
 80164f4:	9a08      	ldr	r2, [sp, #32]
 80164f6:	3201      	adds	r2, #1
 80164f8:	d100      	bne.n	80164fc <_svfprintf_r+0xaf0>
 80164fa:	e0a6      	b.n	801664a <_svfprintf_r+0xc3e>
 80164fc:	0032      	movs	r2, r6
 80164fe:	2180      	movs	r1, #128	; 0x80
 8016500:	9807      	ldr	r0, [sp, #28]
 8016502:	438e      	bics	r6, r1
 8016504:	9906      	ldr	r1, [sp, #24]
 8016506:	4301      	orrs	r1, r0
 8016508:	d000      	beq.n	801650c <_svfprintf_r+0xb00>
 801650a:	e09e      	b.n	801664a <_svfprintf_r+0xc3e>
 801650c:	9908      	ldr	r1, [sp, #32]
 801650e:	2900      	cmp	r1, #0
 8016510:	d100      	bne.n	8016514 <_svfprintf_r+0xb08>
 8016512:	e125      	b.n	8016760 <_svfprintf_r+0xd54>
 8016514:	2b01      	cmp	r3, #1
 8016516:	d000      	beq.n	801651a <_svfprintf_r+0xb0e>
 8016518:	e09a      	b.n	8016650 <_svfprintf_r+0xc44>
 801651a:	e518      	b.n	8015f4e <_svfprintf_r+0x542>
 801651c:	1d23      	adds	r3, r4, #4
 801651e:	9312      	str	r3, [sp, #72]	; 0x48
 8016520:	2310      	movs	r3, #16
 8016522:	4033      	ands	r3, r6
 8016524:	d003      	beq.n	801652e <_svfprintf_r+0xb22>
 8016526:	6823      	ldr	r3, [r4, #0]
 8016528:	9306      	str	r3, [sp, #24]
 801652a:	9207      	str	r2, [sp, #28]
 801652c:	e7da      	b.n	80164e4 <_svfprintf_r+0xad8>
 801652e:	2240      	movs	r2, #64	; 0x40
 8016530:	4032      	ands	r2, r6
 8016532:	d004      	beq.n	801653e <_svfprintf_r+0xb32>
 8016534:	6822      	ldr	r2, [r4, #0]
 8016536:	b292      	uxth	r2, r2
 8016538:	9206      	str	r2, [sp, #24]
 801653a:	9307      	str	r3, [sp, #28]
 801653c:	e7d2      	b.n	80164e4 <_svfprintf_r+0xad8>
 801653e:	2380      	movs	r3, #128	; 0x80
 8016540:	009b      	lsls	r3, r3, #2
 8016542:	4033      	ands	r3, r6
 8016544:	d002      	beq.n	801654c <_svfprintf_r+0xb40>
 8016546:	6823      	ldr	r3, [r4, #0]
 8016548:	b2db      	uxtb	r3, r3
 801654a:	e7ed      	b.n	8016528 <_svfprintf_r+0xb1c>
 801654c:	6822      	ldr	r2, [r4, #0]
 801654e:	e7f3      	b.n	8016538 <_svfprintf_r+0xb2c>
 8016550:	1d23      	adds	r3, r4, #4
 8016552:	49a8      	ldr	r1, [pc, #672]	; (80167f4 <_svfprintf_r+0xde8>)
 8016554:	aa25      	add	r2, sp, #148	; 0x94
 8016556:	9312      	str	r3, [sp, #72]	; 0x48
 8016558:	6823      	ldr	r3, [r4, #0]
 801655a:	8011      	strh	r1, [r2, #0]
 801655c:	4aa6      	ldr	r2, [pc, #664]	; (80167f8 <_svfprintf_r+0xdec>)
 801655e:	9306      	str	r3, [sp, #24]
 8016560:	2300      	movs	r3, #0
 8016562:	921e      	str	r2, [sp, #120]	; 0x78
 8016564:	2278      	movs	r2, #120	; 0x78
 8016566:	9307      	str	r3, [sp, #28]
 8016568:	3302      	adds	r3, #2
 801656a:	431e      	orrs	r6, r3
 801656c:	920e      	str	r2, [sp, #56]	; 0x38
 801656e:	e7bc      	b.n	80164ea <_svfprintf_r+0xade>
 8016570:	1d23      	adds	r3, r4, #4
 8016572:	9312      	str	r3, [sp, #72]	; 0x48
 8016574:	6823      	ldr	r3, [r4, #0]
 8016576:	2400      	movs	r4, #0
 8016578:	9309      	str	r3, [sp, #36]	; 0x24
 801657a:	231b      	movs	r3, #27
 801657c:	aa1e      	add	r2, sp, #120	; 0x78
 801657e:	189b      	adds	r3, r3, r2
 8016580:	701c      	strb	r4, [r3, #0]
 8016582:	9b08      	ldr	r3, [sp, #32]
 8016584:	3301      	adds	r3, #1
 8016586:	d00e      	beq.n	80165a6 <_svfprintf_r+0xb9a>
 8016588:	9a08      	ldr	r2, [sp, #32]
 801658a:	0021      	movs	r1, r4
 801658c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801658e:	f001 ff79 	bl	8018484 <memchr>
 8016592:	900c      	str	r0, [sp, #48]	; 0x30
 8016594:	42a0      	cmp	r0, r4
 8016596:	d100      	bne.n	801659a <_svfprintf_r+0xb8e>
 8016598:	e100      	b.n	801679c <_svfprintf_r+0xd90>
 801659a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801659c:	1a83      	subs	r3, r0, r2
 801659e:	9308      	str	r3, [sp, #32]
 80165a0:	940c      	str	r4, [sp, #48]	; 0x30
 80165a2:	0023      	movs	r3, r4
 80165a4:	e527      	b.n	8015ff6 <_svfprintf_r+0x5ea>
 80165a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80165a8:	f7e9 fdb6 	bl	8000118 <strlen>
 80165ac:	9008      	str	r0, [sp, #32]
 80165ae:	e7f7      	b.n	80165a0 <_svfprintf_r+0xb94>
 80165b0:	2310      	movs	r3, #16
 80165b2:	431e      	orrs	r6, r3
 80165b4:	2220      	movs	r2, #32
 80165b6:	4032      	ands	r2, r6
 80165b8:	d00b      	beq.n	80165d2 <_svfprintf_r+0xbc6>
 80165ba:	2307      	movs	r3, #7
 80165bc:	3407      	adds	r4, #7
 80165be:	439c      	bics	r4, r3
 80165c0:	0023      	movs	r3, r4
 80165c2:	3308      	adds	r3, #8
 80165c4:	9312      	str	r3, [sp, #72]	; 0x48
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	6864      	ldr	r4, [r4, #4]
 80165ca:	9306      	str	r3, [sp, #24]
 80165cc:	9407      	str	r4, [sp, #28]
 80165ce:	2301      	movs	r3, #1
 80165d0:	e78b      	b.n	80164ea <_svfprintf_r+0xade>
 80165d2:	1d23      	adds	r3, r4, #4
 80165d4:	9312      	str	r3, [sp, #72]	; 0x48
 80165d6:	2310      	movs	r3, #16
 80165d8:	4033      	ands	r3, r6
 80165da:	d003      	beq.n	80165e4 <_svfprintf_r+0xbd8>
 80165dc:	6823      	ldr	r3, [r4, #0]
 80165de:	9306      	str	r3, [sp, #24]
 80165e0:	9207      	str	r2, [sp, #28]
 80165e2:	e7f4      	b.n	80165ce <_svfprintf_r+0xbc2>
 80165e4:	2240      	movs	r2, #64	; 0x40
 80165e6:	4032      	ands	r2, r6
 80165e8:	d004      	beq.n	80165f4 <_svfprintf_r+0xbe8>
 80165ea:	6822      	ldr	r2, [r4, #0]
 80165ec:	b292      	uxth	r2, r2
 80165ee:	9206      	str	r2, [sp, #24]
 80165f0:	9307      	str	r3, [sp, #28]
 80165f2:	e7ec      	b.n	80165ce <_svfprintf_r+0xbc2>
 80165f4:	2380      	movs	r3, #128	; 0x80
 80165f6:	009b      	lsls	r3, r3, #2
 80165f8:	4033      	ands	r3, r6
 80165fa:	d002      	beq.n	8016602 <_svfprintf_r+0xbf6>
 80165fc:	6823      	ldr	r3, [r4, #0]
 80165fe:	b2db      	uxtb	r3, r3
 8016600:	e7ed      	b.n	80165de <_svfprintf_r+0xbd2>
 8016602:	6822      	ldr	r2, [r4, #0]
 8016604:	e7f3      	b.n	80165ee <_svfprintf_r+0xbe2>
 8016606:	4b7c      	ldr	r3, [pc, #496]	; (80167f8 <_svfprintf_r+0xdec>)
 8016608:	f7ff fad9 	bl	8015bbe <_svfprintf_r+0x1b2>
 801660c:	1d23      	adds	r3, r4, #4
 801660e:	9312      	str	r3, [sp, #72]	; 0x48
 8016610:	2310      	movs	r3, #16
 8016612:	4033      	ands	r3, r6
 8016614:	d004      	beq.n	8016620 <_svfprintf_r+0xc14>
 8016616:	6823      	ldr	r3, [r4, #0]
 8016618:	9306      	str	r3, [sp, #24]
 801661a:	9207      	str	r2, [sp, #28]
 801661c:	f7ff fadf 	bl	8015bde <_svfprintf_r+0x1d2>
 8016620:	2240      	movs	r2, #64	; 0x40
 8016622:	4032      	ands	r2, r6
 8016624:	d005      	beq.n	8016632 <_svfprintf_r+0xc26>
 8016626:	6822      	ldr	r2, [r4, #0]
 8016628:	b292      	uxth	r2, r2
 801662a:	9206      	str	r2, [sp, #24]
 801662c:	9307      	str	r3, [sp, #28]
 801662e:	f7ff fad6 	bl	8015bde <_svfprintf_r+0x1d2>
 8016632:	2380      	movs	r3, #128	; 0x80
 8016634:	009b      	lsls	r3, r3, #2
 8016636:	4033      	ands	r3, r6
 8016638:	d002      	beq.n	8016640 <_svfprintf_r+0xc34>
 801663a:	6823      	ldr	r3, [r4, #0]
 801663c:	b2db      	uxtb	r3, r3
 801663e:	e7eb      	b.n	8016618 <_svfprintf_r+0xc0c>
 8016640:	6822      	ldr	r2, [r4, #0]
 8016642:	e7f2      	b.n	801662a <_svfprintf_r+0xc1e>
 8016644:	0032      	movs	r2, r6
 8016646:	2301      	movs	r3, #1
 8016648:	e759      	b.n	80164fe <_svfprintf_r+0xaf2>
 801664a:	2b01      	cmp	r3, #1
 801664c:	d100      	bne.n	8016650 <_svfprintf_r+0xc44>
 801664e:	e476      	b.n	8015f3e <_svfprintf_r+0x532>
 8016650:	2b02      	cmp	r3, #2
 8016652:	d06b      	beq.n	801672c <_svfprintf_r+0xd20>
 8016654:	2507      	movs	r5, #7
 8016656:	ab58      	add	r3, sp, #352	; 0x160
 8016658:	1e5a      	subs	r2, r3, #1
 801665a:	9209      	str	r2, [sp, #36]	; 0x24
 801665c:	9a06      	ldr	r2, [sp, #24]
 801665e:	1e59      	subs	r1, r3, #1
 8016660:	402a      	ands	r2, r5
 8016662:	3230      	adds	r2, #48	; 0x30
 8016664:	700a      	strb	r2, [r1, #0]
 8016666:	9907      	ldr	r1, [sp, #28]
 8016668:	074c      	lsls	r4, r1, #29
 801666a:	9906      	ldr	r1, [sp, #24]
 801666c:	08c8      	lsrs	r0, r1, #3
 801666e:	9907      	ldr	r1, [sp, #28]
 8016670:	4304      	orrs	r4, r0
 8016672:	08c9      	lsrs	r1, r1, #3
 8016674:	9107      	str	r1, [sp, #28]
 8016676:	0021      	movs	r1, r4
 8016678:	9807      	ldr	r0, [sp, #28]
 801667a:	9406      	str	r4, [sp, #24]
 801667c:	4301      	orrs	r1, r0
 801667e:	d111      	bne.n	80166a4 <_svfprintf_r+0xc98>
 8016680:	07f1      	lsls	r1, r6, #31
 8016682:	d502      	bpl.n	801668a <_svfprintf_r+0xc7e>
 8016684:	3b02      	subs	r3, #2
 8016686:	2a30      	cmp	r2, #48	; 0x30
 8016688:	d173      	bne.n	8016772 <_svfprintf_r+0xd66>
 801668a:	9b08      	ldr	r3, [sp, #32]
 801668c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801668e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016690:	ab58      	add	r3, sp, #352	; 0x160
 8016692:	1a9b      	subs	r3, r3, r2
 8016694:	9308      	str	r3, [sp, #32]
 8016696:	2300      	movs	r3, #0
 8016698:	930c      	str	r3, [sp, #48]	; 0x30
 801669a:	9310      	str	r3, [sp, #64]	; 0x40
 801669c:	930f      	str	r3, [sp, #60]	; 0x3c
 801669e:	001d      	movs	r5, r3
 80166a0:	f7ff fb4b 	bl	8015d3a <_svfprintf_r+0x32e>
 80166a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166a6:	e7d7      	b.n	8016658 <_svfprintf_r+0xc4c>
 80166a8:	2480      	movs	r4, #128	; 0x80
 80166aa:	2300      	movs	r3, #0
 80166ac:	00e4      	lsls	r4, r4, #3
 80166ae:	930d      	str	r3, [sp, #52]	; 0x34
 80166b0:	4034      	ands	r4, r6
 80166b2:	ab58      	add	r3, sp, #352	; 0x160
 80166b4:	3b01      	subs	r3, #1
 80166b6:	9309      	str	r3, [sp, #36]	; 0x24
 80166b8:	220a      	movs	r2, #10
 80166ba:	9806      	ldr	r0, [sp, #24]
 80166bc:	9907      	ldr	r1, [sp, #28]
 80166be:	2300      	movs	r3, #0
 80166c0:	f7e9 ff34 	bl	800052c <__aeabi_uldivmod>
 80166c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166c6:	3230      	adds	r2, #48	; 0x30
 80166c8:	701a      	strb	r2, [r3, #0]
 80166ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80166cc:	3301      	adds	r3, #1
 80166ce:	930d      	str	r3, [sp, #52]	; 0x34
 80166d0:	2c00      	cmp	r4, #0
 80166d2:	d01d      	beq.n	8016710 <_svfprintf_r+0xd04>
 80166d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80166d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80166d8:	781b      	ldrb	r3, [r3, #0]
 80166da:	429a      	cmp	r2, r3
 80166dc:	d118      	bne.n	8016710 <_svfprintf_r+0xd04>
 80166de:	2aff      	cmp	r2, #255	; 0xff
 80166e0:	d016      	beq.n	8016710 <_svfprintf_r+0xd04>
 80166e2:	9b07      	ldr	r3, [sp, #28]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d102      	bne.n	80166ee <_svfprintf_r+0xce2>
 80166e8:	9b06      	ldr	r3, [sp, #24]
 80166ea:	2b09      	cmp	r3, #9
 80166ec:	d910      	bls.n	8016710 <_svfprintf_r+0xd04>
 80166ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166f0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80166f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80166f4:	1a9b      	subs	r3, r3, r2
 80166f6:	0018      	movs	r0, r3
 80166f8:	9309      	str	r3, [sp, #36]	; 0x24
 80166fa:	f7fe fa52 	bl	8014ba2 <strncpy>
 80166fe:	2200      	movs	r2, #0
 8016700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016702:	920d      	str	r2, [sp, #52]	; 0x34
 8016704:	785b      	ldrb	r3, [r3, #1]
 8016706:	1e5a      	subs	r2, r3, #1
 8016708:	4193      	sbcs	r3, r2
 801670a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801670c:	18d3      	adds	r3, r2, r3
 801670e:	9313      	str	r3, [sp, #76]	; 0x4c
 8016710:	220a      	movs	r2, #10
 8016712:	9806      	ldr	r0, [sp, #24]
 8016714:	9907      	ldr	r1, [sp, #28]
 8016716:	2300      	movs	r3, #0
 8016718:	f7e9 ff08 	bl	800052c <__aeabi_uldivmod>
 801671c:	9006      	str	r0, [sp, #24]
 801671e:	9107      	str	r1, [sp, #28]
 8016720:	9b06      	ldr	r3, [sp, #24]
 8016722:	9a07      	ldr	r2, [sp, #28]
 8016724:	4313      	orrs	r3, r2
 8016726:	d0b0      	beq.n	801668a <_svfprintf_r+0xc7e>
 8016728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801672a:	e7c3      	b.n	80166b4 <_svfprintf_r+0xca8>
 801672c:	200f      	movs	r0, #15
 801672e:	ab58      	add	r3, sp, #352	; 0x160
 8016730:	9309      	str	r3, [sp, #36]	; 0x24
 8016732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016734:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016736:	3b01      	subs	r3, #1
 8016738:	9309      	str	r3, [sp, #36]	; 0x24
 801673a:	9b06      	ldr	r3, [sp, #24]
 801673c:	4003      	ands	r3, r0
 801673e:	5cd3      	ldrb	r3, [r2, r3]
 8016740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016742:	7013      	strb	r3, [r2, #0]
 8016744:	9b07      	ldr	r3, [sp, #28]
 8016746:	0719      	lsls	r1, r3, #28
 8016748:	9b06      	ldr	r3, [sp, #24]
 801674a:	091a      	lsrs	r2, r3, #4
 801674c:	9b07      	ldr	r3, [sp, #28]
 801674e:	4311      	orrs	r1, r2
 8016750:	091b      	lsrs	r3, r3, #4
 8016752:	9307      	str	r3, [sp, #28]
 8016754:	000b      	movs	r3, r1
 8016756:	9a07      	ldr	r2, [sp, #28]
 8016758:	9106      	str	r1, [sp, #24]
 801675a:	4313      	orrs	r3, r2
 801675c:	d1e9      	bne.n	8016732 <_svfprintf_r+0xd26>
 801675e:	e794      	b.n	801668a <_svfprintf_r+0xc7e>
 8016760:	a958      	add	r1, sp, #352	; 0x160
 8016762:	9109      	str	r1, [sp, #36]	; 0x24
 8016764:	2b00      	cmp	r3, #0
 8016766:	d190      	bne.n	801668a <_svfprintf_r+0xc7e>
 8016768:	07d3      	lsls	r3, r2, #31
 801676a:	d58e      	bpl.n	801668a <_svfprintf_r+0xc7e>
 801676c:	23e7      	movs	r3, #231	; 0xe7
 801676e:	aa1e      	add	r2, sp, #120	; 0x78
 8016770:	189b      	adds	r3, r3, r2
 8016772:	2230      	movs	r2, #48	; 0x30
 8016774:	f7ff fbf0 	bl	8015f58 <_svfprintf_r+0x54c>
 8016778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801677a:	2b00      	cmp	r3, #0
 801677c:	d100      	bne.n	8016780 <_svfprintf_r+0xd74>
 801677e:	e38a      	b.n	8016e96 <_svfprintf_r+0x148a>
 8016780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016782:	ab3f      	add	r3, sp, #252	; 0xfc
 8016784:	701a      	strb	r2, [r3, #0]
 8016786:	221b      	movs	r2, #27
 8016788:	2000      	movs	r0, #0
 801678a:	a91e      	add	r1, sp, #120	; 0x78
 801678c:	1852      	adds	r2, r2, r1
 801678e:	7010      	strb	r0, [r2, #0]
 8016790:	9412      	str	r4, [sp, #72]	; 0x48
 8016792:	f7ff faca 	bl	8015d2a <_svfprintf_r+0x31e>
 8016796:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801679a:	e592      	b.n	80162c2 <_svfprintf_r+0x8b6>
 801679c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801679e:	e42a      	b.n	8015ff6 <_svfprintf_r+0x5ea>
 80167a0:	2010      	movs	r0, #16
 80167a2:	1812      	adds	r2, r2, r0
 80167a4:	6078      	str	r0, [r7, #4]
 80167a6:	922e      	str	r2, [sp, #184]	; 0xb8
 80167a8:	932d      	str	r3, [sp, #180]	; 0xb4
 80167aa:	2b07      	cmp	r3, #7
 80167ac:	dd08      	ble.n	80167c0 <_svfprintf_r+0xdb4>
 80167ae:	aa2c      	add	r2, sp, #176	; 0xb0
 80167b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167b4:	f002 fa7e 	bl	8018cb4 <__ssprint_r>
 80167b8:	2800      	cmp	r0, #0
 80167ba:	d000      	beq.n	80167be <_svfprintf_r+0xdb2>
 80167bc:	e34a      	b.n	8016e54 <_svfprintf_r+0x1448>
 80167be:	a92f      	add	r1, sp, #188	; 0xbc
 80167c0:	3c10      	subs	r4, #16
 80167c2:	000f      	movs	r7, r1
 80167c4:	f7ff fad8 	bl	8015d78 <_svfprintf_r+0x36c>
 80167c8:	2010      	movs	r0, #16
 80167ca:	1812      	adds	r2, r2, r0
 80167cc:	6078      	str	r0, [r7, #4]
 80167ce:	922e      	str	r2, [sp, #184]	; 0xb8
 80167d0:	932d      	str	r3, [sp, #180]	; 0xb4
 80167d2:	2b07      	cmp	r3, #7
 80167d4:	dd08      	ble.n	80167e8 <_svfprintf_r+0xddc>
 80167d6:	aa2c      	add	r2, sp, #176	; 0xb0
 80167d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167dc:	f002 fa6a 	bl	8018cb4 <__ssprint_r>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	d000      	beq.n	80167e6 <_svfprintf_r+0xdda>
 80167e4:	e336      	b.n	8016e54 <_svfprintf_r+0x1448>
 80167e6:	a92f      	add	r1, sp, #188	; 0xbc
 80167e8:	3c10      	subs	r4, #16
 80167ea:	000f      	movs	r7, r1
 80167ec:	f7ff fb24 	bl	8015e38 <_svfprintf_r+0x42c>
 80167f0:	fffffbff 	.word	0xfffffbff
 80167f4:	00007830 	.word	0x00007830
 80167f8:	0801bff8 	.word	0x0801bff8
 80167fc:	2010      	movs	r0, #16
 80167fe:	1812      	adds	r2, r2, r0
 8016800:	6078      	str	r0, [r7, #4]
 8016802:	922e      	str	r2, [sp, #184]	; 0xb8
 8016804:	932d      	str	r3, [sp, #180]	; 0xb4
 8016806:	2b07      	cmp	r3, #7
 8016808:	dd08      	ble.n	801681c <_svfprintf_r+0xe10>
 801680a:	aa2c      	add	r2, sp, #176	; 0xb0
 801680c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801680e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016810:	f002 fa50 	bl	8018cb4 <__ssprint_r>
 8016814:	2800      	cmp	r0, #0
 8016816:	d000      	beq.n	801681a <_svfprintf_r+0xe0e>
 8016818:	e31c      	b.n	8016e54 <_svfprintf_r+0x1448>
 801681a:	a92f      	add	r1, sp, #188	; 0xbc
 801681c:	3c10      	subs	r4, #16
 801681e:	000f      	movs	r7, r1
 8016820:	f7ff fb2c 	bl	8015e7c <_svfprintf_r+0x470>
 8016824:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016826:	2b65      	cmp	r3, #101	; 0x65
 8016828:	dc00      	bgt.n	801682c <_svfprintf_r+0xe20>
 801682a:	e259      	b.n	8016ce0 <_svfprintf_r+0x12d4>
 801682c:	2200      	movs	r2, #0
 801682e:	2300      	movs	r3, #0
 8016830:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016832:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016834:	f7e9 fe12 	bl	800045c <__aeabi_dcmpeq>
 8016838:	2800      	cmp	r0, #0
 801683a:	d07c      	beq.n	8016936 <_svfprintf_r+0xf2a>
 801683c:	4b81      	ldr	r3, [pc, #516]	; (8016a44 <_svfprintf_r+0x1038>)
 801683e:	603b      	str	r3, [r7, #0]
 8016840:	2301      	movs	r3, #1
 8016842:	607b      	str	r3, [r7, #4]
 8016844:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016846:	3708      	adds	r7, #8
 8016848:	3301      	adds	r3, #1
 801684a:	932e      	str	r3, [sp, #184]	; 0xb8
 801684c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801684e:	9308      	str	r3, [sp, #32]
 8016850:	3301      	adds	r3, #1
 8016852:	932d      	str	r3, [sp, #180]	; 0xb4
 8016854:	2b07      	cmp	r3, #7
 8016856:	dd08      	ble.n	801686a <_svfprintf_r+0xe5e>
 8016858:	aa2c      	add	r2, sp, #176	; 0xb0
 801685a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801685c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801685e:	f002 fa29 	bl	8018cb4 <__ssprint_r>
 8016862:	2800      	cmp	r0, #0
 8016864:	d000      	beq.n	8016868 <_svfprintf_r+0xe5c>
 8016866:	e2f5      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016868:	af2f      	add	r7, sp, #188	; 0xbc
 801686a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801686c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801686e:	4293      	cmp	r3, r2
 8016870:	db01      	blt.n	8016876 <_svfprintf_r+0xe6a>
 8016872:	07f3      	lsls	r3, r6, #31
 8016874:	d51d      	bpl.n	80168b2 <_svfprintf_r+0xea6>
 8016876:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016878:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801687a:	4694      	mov	ip, r2
 801687c:	603b      	str	r3, [r7, #0]
 801687e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016880:	607b      	str	r3, [r7, #4]
 8016882:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016884:	3708      	adds	r7, #8
 8016886:	4463      	add	r3, ip
 8016888:	932e      	str	r3, [sp, #184]	; 0xb8
 801688a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801688c:	9308      	str	r3, [sp, #32]
 801688e:	3301      	adds	r3, #1
 8016890:	932d      	str	r3, [sp, #180]	; 0xb4
 8016892:	2b07      	cmp	r3, #7
 8016894:	dd08      	ble.n	80168a8 <_svfprintf_r+0xe9c>
 8016896:	aa2c      	add	r2, sp, #176	; 0xb0
 8016898:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801689a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801689c:	f002 fa0a 	bl	8018cb4 <__ssprint_r>
 80168a0:	2800      	cmp	r0, #0
 80168a2:	d000      	beq.n	80168a6 <_svfprintf_r+0xe9a>
 80168a4:	e2d6      	b.n	8016e54 <_svfprintf_r+0x1448>
 80168a6:	af2f      	add	r7, sp, #188	; 0xbc
 80168a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168aa:	2510      	movs	r5, #16
 80168ac:	1e5c      	subs	r4, r3, #1
 80168ae:	2c00      	cmp	r4, #0
 80168b0:	dc2f      	bgt.n	8016912 <_svfprintf_r+0xf06>
 80168b2:	0773      	lsls	r3, r6, #29
 80168b4:	d500      	bpl.n	80168b8 <_svfprintf_r+0xeac>
 80168b6:	e2af      	b.n	8016e18 <_svfprintf_r+0x140c>
 80168b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80168ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80168bc:	4293      	cmp	r3, r2
 80168be:	da00      	bge.n	80168c2 <_svfprintf_r+0xeb6>
 80168c0:	0013      	movs	r3, r2
 80168c2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80168c4:	18d3      	adds	r3, r2, r3
 80168c6:	9315      	str	r3, [sp, #84]	; 0x54
 80168c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80168ca:	9308      	str	r3, [sp, #32]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d007      	beq.n	80168e0 <_svfprintf_r+0xed4>
 80168d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80168d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168d6:	f002 f9ed 	bl	8018cb4 <__ssprint_r>
 80168da:	2800      	cmp	r0, #0
 80168dc:	d000      	beq.n	80168e0 <_svfprintf_r+0xed4>
 80168de:	e2b9      	b.n	8016e54 <_svfprintf_r+0x1448>
 80168e0:	2300      	movs	r3, #0
 80168e2:	932d      	str	r3, [sp, #180]	; 0xb4
 80168e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d000      	beq.n	80168ec <_svfprintf_r+0xee0>
 80168ea:	e2cf      	b.n	8016e8c <_svfprintf_r+0x1480>
 80168ec:	af2f      	add	r7, sp, #188	; 0xbc
 80168ee:	e5d6      	b.n	801649e <_svfprintf_r+0xa92>
 80168f0:	3210      	adds	r2, #16
 80168f2:	607d      	str	r5, [r7, #4]
 80168f4:	922e      	str	r2, [sp, #184]	; 0xb8
 80168f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80168f8:	2b07      	cmp	r3, #7
 80168fa:	dd08      	ble.n	801690e <_svfprintf_r+0xf02>
 80168fc:	aa2c      	add	r2, sp, #176	; 0xb0
 80168fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016900:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016902:	f002 f9d7 	bl	8018cb4 <__ssprint_r>
 8016906:	2800      	cmp	r0, #0
 8016908:	d000      	beq.n	801690c <_svfprintf_r+0xf00>
 801690a:	e2a3      	b.n	8016e54 <_svfprintf_r+0x1448>
 801690c:	a92f      	add	r1, sp, #188	; 0xbc
 801690e:	000f      	movs	r7, r1
 8016910:	3c10      	subs	r4, #16
 8016912:	0039      	movs	r1, r7
 8016914:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016916:	484c      	ldr	r0, [pc, #304]	; (8016a48 <_svfprintf_r+0x103c>)
 8016918:	9308      	str	r3, [sp, #32]
 801691a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801691c:	3301      	adds	r3, #1
 801691e:	3108      	adds	r1, #8
 8016920:	6038      	str	r0, [r7, #0]
 8016922:	2c10      	cmp	r4, #16
 8016924:	dce4      	bgt.n	80168f0 <_svfprintf_r+0xee4>
 8016926:	607c      	str	r4, [r7, #4]
 8016928:	18a4      	adds	r4, r4, r2
 801692a:	942e      	str	r4, [sp, #184]	; 0xb8
 801692c:	932d      	str	r3, [sp, #180]	; 0xb4
 801692e:	000f      	movs	r7, r1
 8016930:	2b07      	cmp	r3, #7
 8016932:	ddbe      	ble.n	80168b2 <_svfprintf_r+0xea6>
 8016934:	e06a      	b.n	8016a0c <_svfprintf_r+0x1000>
 8016936:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016938:	2b00      	cmp	r3, #0
 801693a:	dd00      	ble.n	801693e <_svfprintf_r+0xf32>
 801693c:	e086      	b.n	8016a4c <_svfprintf_r+0x1040>
 801693e:	4b41      	ldr	r3, [pc, #260]	; (8016a44 <_svfprintf_r+0x1038>)
 8016940:	603b      	str	r3, [r7, #0]
 8016942:	2301      	movs	r3, #1
 8016944:	607b      	str	r3, [r7, #4]
 8016946:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016948:	3708      	adds	r7, #8
 801694a:	3301      	adds	r3, #1
 801694c:	932e      	str	r3, [sp, #184]	; 0xb8
 801694e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016950:	9308      	str	r3, [sp, #32]
 8016952:	3301      	adds	r3, #1
 8016954:	932d      	str	r3, [sp, #180]	; 0xb4
 8016956:	2b07      	cmp	r3, #7
 8016958:	dd08      	ble.n	801696c <_svfprintf_r+0xf60>
 801695a:	aa2c      	add	r2, sp, #176	; 0xb0
 801695c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801695e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016960:	f002 f9a8 	bl	8018cb4 <__ssprint_r>
 8016964:	2800      	cmp	r0, #0
 8016966:	d000      	beq.n	801696a <_svfprintf_r+0xf5e>
 8016968:	e274      	b.n	8016e54 <_svfprintf_r+0x1448>
 801696a:	af2f      	add	r7, sp, #188	; 0xbc
 801696c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801696e:	2b00      	cmp	r3, #0
 8016970:	d104      	bne.n	801697c <_svfprintf_r+0xf70>
 8016972:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016974:	2b00      	cmp	r3, #0
 8016976:	d101      	bne.n	801697c <_svfprintf_r+0xf70>
 8016978:	07f3      	lsls	r3, r6, #31
 801697a:	d59a      	bpl.n	80168b2 <_svfprintf_r+0xea6>
 801697c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801697e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016980:	4694      	mov	ip, r2
 8016982:	603b      	str	r3, [r7, #0]
 8016984:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016986:	607b      	str	r3, [r7, #4]
 8016988:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801698a:	3708      	adds	r7, #8
 801698c:	4463      	add	r3, ip
 801698e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016990:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016992:	9308      	str	r3, [sp, #32]
 8016994:	3301      	adds	r3, #1
 8016996:	932d      	str	r3, [sp, #180]	; 0xb4
 8016998:	2b07      	cmp	r3, #7
 801699a:	dd08      	ble.n	80169ae <_svfprintf_r+0xfa2>
 801699c:	aa2c      	add	r2, sp, #176	; 0xb0
 801699e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169a2:	f002 f987 	bl	8018cb4 <__ssprint_r>
 80169a6:	2800      	cmp	r0, #0
 80169a8:	d000      	beq.n	80169ac <_svfprintf_r+0xfa0>
 80169aa:	e253      	b.n	8016e54 <_svfprintf_r+0x1448>
 80169ac:	af2f      	add	r7, sp, #188	; 0xbc
 80169ae:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80169b0:	2c00      	cmp	r4, #0
 80169b2:	da1a      	bge.n	80169ea <_svfprintf_r+0xfde>
 80169b4:	0039      	movs	r1, r7
 80169b6:	2510      	movs	r5, #16
 80169b8:	4264      	negs	r4, r4
 80169ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169bc:	982e      	ldr	r0, [sp, #184]	; 0xb8
 80169be:	9308      	str	r3, [sp, #32]
 80169c0:	1c5a      	adds	r2, r3, #1
 80169c2:	4b21      	ldr	r3, [pc, #132]	; (8016a48 <_svfprintf_r+0x103c>)
 80169c4:	3708      	adds	r7, #8
 80169c6:	600b      	str	r3, [r1, #0]
 80169c8:	2c10      	cmp	r4, #16
 80169ca:	dc29      	bgt.n	8016a20 <_svfprintf_r+0x1014>
 80169cc:	604c      	str	r4, [r1, #4]
 80169ce:	1824      	adds	r4, r4, r0
 80169d0:	942e      	str	r4, [sp, #184]	; 0xb8
 80169d2:	922d      	str	r2, [sp, #180]	; 0xb4
 80169d4:	2a07      	cmp	r2, #7
 80169d6:	dd08      	ble.n	80169ea <_svfprintf_r+0xfde>
 80169d8:	aa2c      	add	r2, sp, #176	; 0xb0
 80169da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169de:	f002 f969 	bl	8018cb4 <__ssprint_r>
 80169e2:	2800      	cmp	r0, #0
 80169e4:	d000      	beq.n	80169e8 <_svfprintf_r+0xfdc>
 80169e6:	e235      	b.n	8016e54 <_svfprintf_r+0x1448>
 80169e8:	af2f      	add	r7, sp, #188	; 0xbc
 80169ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 80169ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169ee:	468c      	mov	ip, r1
 80169f0:	603b      	str	r3, [r7, #0]
 80169f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169f4:	607b      	str	r3, [r7, #4]
 80169f6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169f8:	4463      	add	r3, ip
 80169fa:	932e      	str	r3, [sp, #184]	; 0xb8
 80169fc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169fe:	1c5a      	adds	r2, r3, #1
 8016a00:	9308      	str	r3, [sp, #32]
 8016a02:	922d      	str	r2, [sp, #180]	; 0xb4
 8016a04:	2a07      	cmp	r2, #7
 8016a06:	dc01      	bgt.n	8016a0c <_svfprintf_r+0x1000>
 8016a08:	f7ff fa6c 	bl	8015ee4 <_svfprintf_r+0x4d8>
 8016a0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a12:	f002 f94f 	bl	8018cb4 <__ssprint_r>
 8016a16:	2800      	cmp	r0, #0
 8016a18:	d000      	beq.n	8016a1c <_svfprintf_r+0x1010>
 8016a1a:	e21b      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016a1c:	af2f      	add	r7, sp, #188	; 0xbc
 8016a1e:	e748      	b.n	80168b2 <_svfprintf_r+0xea6>
 8016a20:	3010      	adds	r0, #16
 8016a22:	604d      	str	r5, [r1, #4]
 8016a24:	902e      	str	r0, [sp, #184]	; 0xb8
 8016a26:	922d      	str	r2, [sp, #180]	; 0xb4
 8016a28:	2a07      	cmp	r2, #7
 8016a2a:	dd08      	ble.n	8016a3e <_svfprintf_r+0x1032>
 8016a2c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a32:	f002 f93f 	bl	8018cb4 <__ssprint_r>
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d000      	beq.n	8016a3c <_svfprintf_r+0x1030>
 8016a3a:	e20b      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016a3c:	af2f      	add	r7, sp, #188	; 0xbc
 8016a3e:	3c10      	subs	r4, #16
 8016a40:	0039      	movs	r1, r7
 8016a42:	e7ba      	b.n	80169ba <_svfprintf_r+0xfae>
 8016a44:	0801c01a 	.word	0x0801c01a
 8016a48:	0801c02c 	.word	0x0801c02c
 8016a4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a4e:	002c      	movs	r4, r5
 8016a50:	429d      	cmp	r5, r3
 8016a52:	dd00      	ble.n	8016a56 <_svfprintf_r+0x104a>
 8016a54:	001c      	movs	r4, r3
 8016a56:	2c00      	cmp	r4, #0
 8016a58:	dd15      	ble.n	8016a86 <_svfprintf_r+0x107a>
 8016a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a5c:	607c      	str	r4, [r7, #4]
 8016a5e:	603b      	str	r3, [r7, #0]
 8016a60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016a62:	3708      	adds	r7, #8
 8016a64:	18e3      	adds	r3, r4, r3
 8016a66:	932e      	str	r3, [sp, #184]	; 0xb8
 8016a68:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a6a:	9308      	str	r3, [sp, #32]
 8016a6c:	3301      	adds	r3, #1
 8016a6e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a70:	2b07      	cmp	r3, #7
 8016a72:	dd08      	ble.n	8016a86 <_svfprintf_r+0x107a>
 8016a74:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a76:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a78:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a7a:	f002 f91b 	bl	8018cb4 <__ssprint_r>
 8016a7e:	2800      	cmp	r0, #0
 8016a80:	d000      	beq.n	8016a84 <_svfprintf_r+0x1078>
 8016a82:	e1e7      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016a84:	af2f      	add	r7, sp, #188	; 0xbc
 8016a86:	43e3      	mvns	r3, r4
 8016a88:	17db      	asrs	r3, r3, #31
 8016a8a:	401c      	ands	r4, r3
 8016a8c:	1b2c      	subs	r4, r5, r4
 8016a8e:	2c00      	cmp	r4, #0
 8016a90:	dd1a      	ble.n	8016ac8 <_svfprintf_r+0x10bc>
 8016a92:	0039      	movs	r1, r7
 8016a94:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a96:	48d4      	ldr	r0, [pc, #848]	; (8016de8 <_svfprintf_r+0x13dc>)
 8016a98:	9308      	str	r3, [sp, #32]
 8016a9a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a9c:	3301      	adds	r3, #1
 8016a9e:	3108      	adds	r1, #8
 8016aa0:	6038      	str	r0, [r7, #0]
 8016aa2:	2c10      	cmp	r4, #16
 8016aa4:	dd00      	ble.n	8016aa8 <_svfprintf_r+0x109c>
 8016aa6:	e089      	b.n	8016bbc <_svfprintf_r+0x11b0>
 8016aa8:	607c      	str	r4, [r7, #4]
 8016aaa:	18a4      	adds	r4, r4, r2
 8016aac:	942e      	str	r4, [sp, #184]	; 0xb8
 8016aae:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ab0:	000f      	movs	r7, r1
 8016ab2:	2b07      	cmp	r3, #7
 8016ab4:	dd08      	ble.n	8016ac8 <_svfprintf_r+0x10bc>
 8016ab6:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016aba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016abc:	f002 f8fa 	bl	8018cb4 <__ssprint_r>
 8016ac0:	2800      	cmp	r0, #0
 8016ac2:	d000      	beq.n	8016ac6 <_svfprintf_r+0x10ba>
 8016ac4:	e1c6      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016ac6:	af2f      	add	r7, sp, #188	; 0xbc
 8016ac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016aca:	195d      	adds	r5, r3, r5
 8016acc:	0573      	lsls	r3, r6, #21
 8016ace:	d50d      	bpl.n	8016aec <_svfprintf_r+0x10e0>
 8016ad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d000      	beq.n	8016ad8 <_svfprintf_r+0x10cc>
 8016ad6:	e084      	b.n	8016be2 <_svfprintf_r+0x11d6>
 8016ad8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d000      	beq.n	8016ae0 <_svfprintf_r+0x10d4>
 8016ade:	e083      	b.n	8016be8 <_svfprintf_r+0x11dc>
 8016ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ae4:	189b      	adds	r3, r3, r2
 8016ae6:	429d      	cmp	r5, r3
 8016ae8:	d900      	bls.n	8016aec <_svfprintf_r+0x10e0>
 8016aea:	001d      	movs	r5, r3
 8016aec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016aee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016af0:	4293      	cmp	r3, r2
 8016af2:	db01      	blt.n	8016af8 <_svfprintf_r+0x10ec>
 8016af4:	07f3      	lsls	r3, r6, #31
 8016af6:	d518      	bpl.n	8016b2a <_svfprintf_r+0x111e>
 8016af8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016afa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016afc:	4694      	mov	ip, r2
 8016afe:	603b      	str	r3, [r7, #0]
 8016b00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b02:	607b      	str	r3, [r7, #4]
 8016b04:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016b06:	3708      	adds	r7, #8
 8016b08:	4463      	add	r3, ip
 8016b0a:	932e      	str	r3, [sp, #184]	; 0xb8
 8016b0c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b0e:	9308      	str	r3, [sp, #32]
 8016b10:	3301      	adds	r3, #1
 8016b12:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b14:	2b07      	cmp	r3, #7
 8016b16:	dd08      	ble.n	8016b2a <_svfprintf_r+0x111e>
 8016b18:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b1a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b1c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b1e:	f002 f8c9 	bl	8018cb4 <__ssprint_r>
 8016b22:	2800      	cmp	r0, #0
 8016b24:	d000      	beq.n	8016b28 <_svfprintf_r+0x111c>
 8016b26:	e195      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016b28:	af2f      	add	r7, sp, #188	; 0xbc
 8016b2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b2e:	4694      	mov	ip, r2
 8016b30:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016b32:	4463      	add	r3, ip
 8016b34:	1b5b      	subs	r3, r3, r5
 8016b36:	1a54      	subs	r4, r2, r1
 8016b38:	429c      	cmp	r4, r3
 8016b3a:	dd00      	ble.n	8016b3e <_svfprintf_r+0x1132>
 8016b3c:	001c      	movs	r4, r3
 8016b3e:	2c00      	cmp	r4, #0
 8016b40:	dd14      	ble.n	8016b6c <_svfprintf_r+0x1160>
 8016b42:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016b44:	603d      	str	r5, [r7, #0]
 8016b46:	18e3      	adds	r3, r4, r3
 8016b48:	932e      	str	r3, [sp, #184]	; 0xb8
 8016b4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b4c:	607c      	str	r4, [r7, #4]
 8016b4e:	9308      	str	r3, [sp, #32]
 8016b50:	3301      	adds	r3, #1
 8016b52:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b54:	3708      	adds	r7, #8
 8016b56:	2b07      	cmp	r3, #7
 8016b58:	dd08      	ble.n	8016b6c <_svfprintf_r+0x1160>
 8016b5a:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b5e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b60:	f002 f8a8 	bl	8018cb4 <__ssprint_r>
 8016b64:	2800      	cmp	r0, #0
 8016b66:	d000      	beq.n	8016b6a <_svfprintf_r+0x115e>
 8016b68:	e174      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016b6a:	af2f      	add	r7, sp, #188	; 0xbc
 8016b6c:	43e3      	mvns	r3, r4
 8016b6e:	17db      	asrs	r3, r3, #31
 8016b70:	401c      	ands	r4, r3
 8016b72:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b76:	2510      	movs	r5, #16
 8016b78:	1a9b      	subs	r3, r3, r2
 8016b7a:	1b1c      	subs	r4, r3, r4
 8016b7c:	2c00      	cmp	r4, #0
 8016b7e:	dc00      	bgt.n	8016b82 <_svfprintf_r+0x1176>
 8016b80:	e697      	b.n	80168b2 <_svfprintf_r+0xea6>
 8016b82:	0039      	movs	r1, r7
 8016b84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b86:	4898      	ldr	r0, [pc, #608]	; (8016de8 <_svfprintf_r+0x13dc>)
 8016b88:	9308      	str	r3, [sp, #32]
 8016b8a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016b8c:	3301      	adds	r3, #1
 8016b8e:	3108      	adds	r1, #8
 8016b90:	6038      	str	r0, [r7, #0]
 8016b92:	2c10      	cmp	r4, #16
 8016b94:	dc00      	bgt.n	8016b98 <_svfprintf_r+0x118c>
 8016b96:	e6c6      	b.n	8016926 <_svfprintf_r+0xf1a>
 8016b98:	3210      	adds	r2, #16
 8016b9a:	607d      	str	r5, [r7, #4]
 8016b9c:	922e      	str	r2, [sp, #184]	; 0xb8
 8016b9e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ba0:	2b07      	cmp	r3, #7
 8016ba2:	dd08      	ble.n	8016bb6 <_svfprintf_r+0x11aa>
 8016ba4:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ba6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ba8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016baa:	f002 f883 	bl	8018cb4 <__ssprint_r>
 8016bae:	2800      	cmp	r0, #0
 8016bb0:	d000      	beq.n	8016bb4 <_svfprintf_r+0x11a8>
 8016bb2:	e14f      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016bb4:	a92f      	add	r1, sp, #188	; 0xbc
 8016bb6:	3c10      	subs	r4, #16
 8016bb8:	000f      	movs	r7, r1
 8016bba:	e7e2      	b.n	8016b82 <_svfprintf_r+0x1176>
 8016bbc:	2010      	movs	r0, #16
 8016bbe:	1812      	adds	r2, r2, r0
 8016bc0:	6078      	str	r0, [r7, #4]
 8016bc2:	922e      	str	r2, [sp, #184]	; 0xb8
 8016bc4:	932d      	str	r3, [sp, #180]	; 0xb4
 8016bc6:	2b07      	cmp	r3, #7
 8016bc8:	dd08      	ble.n	8016bdc <_svfprintf_r+0x11d0>
 8016bca:	aa2c      	add	r2, sp, #176	; 0xb0
 8016bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bce:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bd0:	f002 f870 	bl	8018cb4 <__ssprint_r>
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	d000      	beq.n	8016bda <_svfprintf_r+0x11ce>
 8016bd8:	e13c      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016bda:	a92f      	add	r1, sp, #188	; 0xbc
 8016bdc:	3c10      	subs	r4, #16
 8016bde:	000f      	movs	r7, r1
 8016be0:	e757      	b.n	8016a92 <_svfprintf_r+0x1086>
 8016be2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d061      	beq.n	8016cac <_svfprintf_r+0x12a0>
 8016be8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016bea:	3b01      	subs	r3, #1
 8016bec:	9310      	str	r3, [sp, #64]	; 0x40
 8016bee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016bf0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016bf2:	4694      	mov	ip, r2
 8016bf4:	603b      	str	r3, [r7, #0]
 8016bf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016bf8:	607b      	str	r3, [r7, #4]
 8016bfa:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016bfc:	3708      	adds	r7, #8
 8016bfe:	4463      	add	r3, ip
 8016c00:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c02:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c04:	9308      	str	r3, [sp, #32]
 8016c06:	3301      	adds	r3, #1
 8016c08:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c0a:	2b07      	cmp	r3, #7
 8016c0c:	dd08      	ble.n	8016c20 <_svfprintf_r+0x1214>
 8016c0e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c12:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c14:	f002 f84e 	bl	8018cb4 <__ssprint_r>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	d000      	beq.n	8016c1e <_svfprintf_r+0x1212>
 8016c1c:	e11a      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016c1e:	af2f      	add	r7, sp, #188	; 0xbc
 8016c20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c24:	189b      	adds	r3, r3, r2
 8016c26:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016c28:	1b5b      	subs	r3, r3, r5
 8016c2a:	7814      	ldrb	r4, [r2, #0]
 8016c2c:	429c      	cmp	r4, r3
 8016c2e:	dd00      	ble.n	8016c32 <_svfprintf_r+0x1226>
 8016c30:	001c      	movs	r4, r3
 8016c32:	2c00      	cmp	r4, #0
 8016c34:	dd14      	ble.n	8016c60 <_svfprintf_r+0x1254>
 8016c36:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c38:	603d      	str	r5, [r7, #0]
 8016c3a:	18e3      	adds	r3, r4, r3
 8016c3c:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c3e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c40:	607c      	str	r4, [r7, #4]
 8016c42:	9308      	str	r3, [sp, #32]
 8016c44:	3301      	adds	r3, #1
 8016c46:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c48:	3708      	adds	r7, #8
 8016c4a:	2b07      	cmp	r3, #7
 8016c4c:	dd08      	ble.n	8016c60 <_svfprintf_r+0x1254>
 8016c4e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c52:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c54:	f002 f82e 	bl	8018cb4 <__ssprint_r>
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	d000      	beq.n	8016c5e <_svfprintf_r+0x1252>
 8016c5c:	e0fa      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016c5e:	af2f      	add	r7, sp, #188	; 0xbc
 8016c60:	43e3      	mvns	r3, r4
 8016c62:	17db      	asrs	r3, r3, #31
 8016c64:	401c      	ands	r4, r3
 8016c66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016c68:	781b      	ldrb	r3, [r3, #0]
 8016c6a:	1b1c      	subs	r4, r3, r4
 8016c6c:	2c00      	cmp	r4, #0
 8016c6e:	dd19      	ble.n	8016ca4 <_svfprintf_r+0x1298>
 8016c70:	0039      	movs	r1, r7
 8016c72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c74:	485c      	ldr	r0, [pc, #368]	; (8016de8 <_svfprintf_r+0x13dc>)
 8016c76:	9308      	str	r3, [sp, #32]
 8016c78:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016c7a:	3301      	adds	r3, #1
 8016c7c:	3108      	adds	r1, #8
 8016c7e:	6038      	str	r0, [r7, #0]
 8016c80:	2c10      	cmp	r4, #16
 8016c82:	dc1a      	bgt.n	8016cba <_svfprintf_r+0x12ae>
 8016c84:	607c      	str	r4, [r7, #4]
 8016c86:	18a4      	adds	r4, r4, r2
 8016c88:	942e      	str	r4, [sp, #184]	; 0xb8
 8016c8a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c8c:	000f      	movs	r7, r1
 8016c8e:	2b07      	cmp	r3, #7
 8016c90:	dd08      	ble.n	8016ca4 <_svfprintf_r+0x1298>
 8016c92:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c96:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c98:	f002 f80c 	bl	8018cb4 <__ssprint_r>
 8016c9c:	2800      	cmp	r0, #0
 8016c9e:	d000      	beq.n	8016ca2 <_svfprintf_r+0x1296>
 8016ca0:	e0d8      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016ca2:	af2f      	add	r7, sp, #188	; 0xbc
 8016ca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	18ed      	adds	r5, r5, r3
 8016caa:	e711      	b.n	8016ad0 <_svfprintf_r+0x10c4>
 8016cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016cae:	3b01      	subs	r3, #1
 8016cb0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016cb4:	3b01      	subs	r3, #1
 8016cb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016cb8:	e799      	b.n	8016bee <_svfprintf_r+0x11e2>
 8016cba:	2010      	movs	r0, #16
 8016cbc:	1812      	adds	r2, r2, r0
 8016cbe:	6078      	str	r0, [r7, #4]
 8016cc0:	922e      	str	r2, [sp, #184]	; 0xb8
 8016cc2:	932d      	str	r3, [sp, #180]	; 0xb4
 8016cc4:	2b07      	cmp	r3, #7
 8016cc6:	dd08      	ble.n	8016cda <_svfprintf_r+0x12ce>
 8016cc8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cce:	f001 fff1 	bl	8018cb4 <__ssprint_r>
 8016cd2:	2800      	cmp	r0, #0
 8016cd4:	d000      	beq.n	8016cd8 <_svfprintf_r+0x12cc>
 8016cd6:	e0bd      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016cd8:	a92f      	add	r1, sp, #188	; 0xbc
 8016cda:	3c10      	subs	r4, #16
 8016cdc:	000f      	movs	r7, r1
 8016cde:	e7c7      	b.n	8016c70 <_svfprintf_r+0x1264>
 8016ce0:	003c      	movs	r4, r7
 8016ce2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ce4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016ce6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ce8:	9308      	str	r3, [sp, #32]
 8016cea:	3101      	adds	r1, #1
 8016cec:	3301      	adds	r3, #1
 8016cee:	3408      	adds	r4, #8
 8016cf0:	2a01      	cmp	r2, #1
 8016cf2:	dc03      	bgt.n	8016cfc <_svfprintf_r+0x12f0>
 8016cf4:	2201      	movs	r2, #1
 8016cf6:	4216      	tst	r6, r2
 8016cf8:	d100      	bne.n	8016cfc <_svfprintf_r+0x12f0>
 8016cfa:	e088      	b.n	8016e0e <_svfprintf_r+0x1402>
 8016cfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cfe:	912e      	str	r1, [sp, #184]	; 0xb8
 8016d00:	603a      	str	r2, [r7, #0]
 8016d02:	2201      	movs	r2, #1
 8016d04:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d06:	607a      	str	r2, [r7, #4]
 8016d08:	2b07      	cmp	r3, #7
 8016d0a:	dd08      	ble.n	8016d1e <_svfprintf_r+0x1312>
 8016d0c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d10:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d12:	f001 ffcf 	bl	8018cb4 <__ssprint_r>
 8016d16:	2800      	cmp	r0, #0
 8016d18:	d000      	beq.n	8016d1c <_svfprintf_r+0x1310>
 8016d1a:	e09b      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016d1c:	ac2f      	add	r4, sp, #188	; 0xbc
 8016d1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016d22:	4694      	mov	ip, r2
 8016d24:	6023      	str	r3, [r4, #0]
 8016d26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d28:	6063      	str	r3, [r4, #4]
 8016d2a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016d2c:	3408      	adds	r4, #8
 8016d2e:	4463      	add	r3, ip
 8016d30:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d32:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d34:	9308      	str	r3, [sp, #32]
 8016d36:	3301      	adds	r3, #1
 8016d38:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d3a:	2b07      	cmp	r3, #7
 8016d3c:	dd08      	ble.n	8016d50 <_svfprintf_r+0x1344>
 8016d3e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d42:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d44:	f001 ffb6 	bl	8018cb4 <__ssprint_r>
 8016d48:	2800      	cmp	r0, #0
 8016d4a:	d000      	beq.n	8016d4e <_svfprintf_r+0x1342>
 8016d4c:	e082      	b.n	8016e54 <_svfprintf_r+0x1448>
 8016d4e:	ac2f      	add	r4, sp, #188	; 0xbc
 8016d50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d52:	2200      	movs	r2, #0
 8016d54:	1e5d      	subs	r5, r3, #1
 8016d56:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016d58:	2300      	movs	r3, #0
 8016d5a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016d5c:	f7e9 fb7e 	bl	800045c <__aeabi_dcmpeq>
 8016d60:	2800      	cmp	r0, #0
 8016d62:	d12c      	bne.n	8016dbe <_svfprintf_r+0x13b2>
 8016d64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016d66:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016d68:	9308      	str	r3, [sp, #32]
 8016d6a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d6c:	6065      	str	r5, [r4, #4]
 8016d6e:	1c5a      	adds	r2, r3, #1
 8016d70:	930e      	str	r3, [sp, #56]	; 0x38
 8016d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d74:	922d      	str	r2, [sp, #180]	; 0xb4
 8016d76:	3301      	adds	r3, #1
 8016d78:	6023      	str	r3, [r4, #0]
 8016d7a:	9b08      	ldr	r3, [sp, #32]
 8016d7c:	3408      	adds	r4, #8
 8016d7e:	3b01      	subs	r3, #1
 8016d80:	185b      	adds	r3, r3, r1
 8016d82:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d84:	2a07      	cmp	r2, #7
 8016d86:	dd07      	ble.n	8016d98 <_svfprintf_r+0x138c>
 8016d88:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d8c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d8e:	f001 ff91 	bl	8018cb4 <__ssprint_r>
 8016d92:	2800      	cmp	r0, #0
 8016d94:	d15e      	bne.n	8016e54 <_svfprintf_r+0x1448>
 8016d96:	ac2f      	add	r4, sp, #188	; 0xbc
 8016d98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016d9a:	ab28      	add	r3, sp, #160	; 0xa0
 8016d9c:	4694      	mov	ip, r2
 8016d9e:	6023      	str	r3, [r4, #0]
 8016da0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016da2:	6063      	str	r3, [r4, #4]
 8016da4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016da6:	4463      	add	r3, ip
 8016da8:	932e      	str	r3, [sp, #184]	; 0xb8
 8016daa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016dac:	9308      	str	r3, [sp, #32]
 8016dae:	3301      	adds	r3, #1
 8016db0:	932d      	str	r3, [sp, #180]	; 0xb4
 8016db2:	2b07      	cmp	r3, #7
 8016db4:	dd00      	ble.n	8016db8 <_svfprintf_r+0x13ac>
 8016db6:	e629      	b.n	8016a0c <_svfprintf_r+0x1000>
 8016db8:	3408      	adds	r4, #8
 8016dba:	0027      	movs	r7, r4
 8016dbc:	e579      	b.n	80168b2 <_svfprintf_r+0xea6>
 8016dbe:	2710      	movs	r7, #16
 8016dc0:	2d00      	cmp	r5, #0
 8016dc2:	dde9      	ble.n	8016d98 <_svfprintf_r+0x138c>
 8016dc4:	0021      	movs	r1, r4
 8016dc6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016dc8:	4807      	ldr	r0, [pc, #28]	; (8016de8 <_svfprintf_r+0x13dc>)
 8016dca:	9308      	str	r3, [sp, #32]
 8016dcc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016dce:	3301      	adds	r3, #1
 8016dd0:	3108      	adds	r1, #8
 8016dd2:	6020      	str	r0, [r4, #0]
 8016dd4:	2d10      	cmp	r5, #16
 8016dd6:	dc09      	bgt.n	8016dec <_svfprintf_r+0x13e0>
 8016dd8:	6065      	str	r5, [r4, #4]
 8016dda:	000c      	movs	r4, r1
 8016ddc:	18ad      	adds	r5, r5, r2
 8016dde:	952e      	str	r5, [sp, #184]	; 0xb8
 8016de0:	932d      	str	r3, [sp, #180]	; 0xb4
 8016de2:	2b07      	cmp	r3, #7
 8016de4:	ddd8      	ble.n	8016d98 <_svfprintf_r+0x138c>
 8016de6:	e7cf      	b.n	8016d88 <_svfprintf_r+0x137c>
 8016de8:	0801c02c 	.word	0x0801c02c
 8016dec:	3210      	adds	r2, #16
 8016dee:	6067      	str	r7, [r4, #4]
 8016df0:	922e      	str	r2, [sp, #184]	; 0xb8
 8016df2:	932d      	str	r3, [sp, #180]	; 0xb4
 8016df4:	2b07      	cmp	r3, #7
 8016df6:	dd07      	ble.n	8016e08 <_svfprintf_r+0x13fc>
 8016df8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016dfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dfc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016dfe:	f001 ff59 	bl	8018cb4 <__ssprint_r>
 8016e02:	2800      	cmp	r0, #0
 8016e04:	d126      	bne.n	8016e54 <_svfprintf_r+0x1448>
 8016e06:	a92f      	add	r1, sp, #188	; 0xbc
 8016e08:	3d10      	subs	r5, #16
 8016e0a:	000c      	movs	r4, r1
 8016e0c:	e7da      	b.n	8016dc4 <_svfprintf_r+0x13b8>
 8016e0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e10:	912e      	str	r1, [sp, #184]	; 0xb8
 8016e12:	c705      	stmia	r7!, {r0, r2}
 8016e14:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e16:	e7e4      	b.n	8016de2 <_svfprintf_r+0x13d6>
 8016e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016e1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016e1c:	2510      	movs	r5, #16
 8016e1e:	1a9c      	subs	r4, r3, r2
 8016e20:	2c00      	cmp	r4, #0
 8016e22:	dc00      	bgt.n	8016e26 <_svfprintf_r+0x141a>
 8016e24:	e548      	b.n	80168b8 <_svfprintf_r+0xeac>
 8016e26:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e28:	4921      	ldr	r1, [pc, #132]	; (8016eb0 <_svfprintf_r+0x14a4>)
 8016e2a:	9308      	str	r3, [sp, #32]
 8016e2c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016e2e:	3301      	adds	r3, #1
 8016e30:	6039      	str	r1, [r7, #0]
 8016e32:	2c10      	cmp	r4, #16
 8016e34:	dc19      	bgt.n	8016e6a <_svfprintf_r+0x145e>
 8016e36:	607c      	str	r4, [r7, #4]
 8016e38:	18a4      	adds	r4, r4, r2
 8016e3a:	942e      	str	r4, [sp, #184]	; 0xb8
 8016e3c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e3e:	2b07      	cmp	r3, #7
 8016e40:	dc00      	bgt.n	8016e44 <_svfprintf_r+0x1438>
 8016e42:	e539      	b.n	80168b8 <_svfprintf_r+0xeac>
 8016e44:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e4a:	f001 ff33 	bl	8018cb4 <__ssprint_r>
 8016e4e:	2800      	cmp	r0, #0
 8016e50:	d100      	bne.n	8016e54 <_svfprintf_r+0x1448>
 8016e52:	e531      	b.n	80168b8 <_svfprintf_r+0xeac>
 8016e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d101      	bne.n	8016e5e <_svfprintf_r+0x1452>
 8016e5a:	f7ff f908 	bl	801606e <_svfprintf_r+0x662>
 8016e5e:	0019      	movs	r1, r3
 8016e60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e62:	f000 ff19 	bl	8017c98 <_free_r>
 8016e66:	f7ff f902 	bl	801606e <_svfprintf_r+0x662>
 8016e6a:	3210      	adds	r2, #16
 8016e6c:	607d      	str	r5, [r7, #4]
 8016e6e:	922e      	str	r2, [sp, #184]	; 0xb8
 8016e70:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e72:	3708      	adds	r7, #8
 8016e74:	2b07      	cmp	r3, #7
 8016e76:	dd07      	ble.n	8016e88 <_svfprintf_r+0x147c>
 8016e78:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e7c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e7e:	f001 ff19 	bl	8018cb4 <__ssprint_r>
 8016e82:	2800      	cmp	r0, #0
 8016e84:	d1e6      	bne.n	8016e54 <_svfprintf_r+0x1448>
 8016e86:	af2f      	add	r7, sp, #188	; 0xbc
 8016e88:	3c10      	subs	r4, #16
 8016e8a:	e7cc      	b.n	8016e26 <_svfprintf_r+0x141a>
 8016e8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e8e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e90:	f000 ff02 	bl	8017c98 <_free_r>
 8016e94:	e52a      	b.n	80168ec <_svfprintf_r+0xee0>
 8016e96:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e98:	9306      	str	r3, [sp, #24]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d101      	bne.n	8016ea2 <_svfprintf_r+0x1496>
 8016e9e:	f7ff f8e6 	bl	801606e <_svfprintf_r+0x662>
 8016ea2:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ea4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ea6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ea8:	f001 ff04 	bl	8018cb4 <__ssprint_r>
 8016eac:	f7ff f8df 	bl	801606e <_svfprintf_r+0x662>
 8016eb0:	0801c01c 	.word	0x0801c01c

08016eb4 <sysconf>:
 8016eb4:	2380      	movs	r3, #128	; 0x80
 8016eb6:	b510      	push	{r4, lr}
 8016eb8:	015b      	lsls	r3, r3, #5
 8016eba:	2808      	cmp	r0, #8
 8016ebc:	d004      	beq.n	8016ec8 <sysconf+0x14>
 8016ebe:	f000 fe7d 	bl	8017bbc <__errno>
 8016ec2:	2316      	movs	r3, #22
 8016ec4:	6003      	str	r3, [r0, #0]
 8016ec6:	3b17      	subs	r3, #23
 8016ec8:	0018      	movs	r0, r3
 8016eca:	bd10      	pop	{r4, pc}

08016ecc <__ascii_wctomb>:
 8016ecc:	1e0b      	subs	r3, r1, #0
 8016ece:	d004      	beq.n	8016eda <__ascii_wctomb+0xe>
 8016ed0:	2aff      	cmp	r2, #255	; 0xff
 8016ed2:	d904      	bls.n	8016ede <__ascii_wctomb+0x12>
 8016ed4:	238a      	movs	r3, #138	; 0x8a
 8016ed6:	6003      	str	r3, [r0, #0]
 8016ed8:	3b8b      	subs	r3, #139	; 0x8b
 8016eda:	0018      	movs	r0, r3
 8016edc:	4770      	bx	lr
 8016ede:	700a      	strb	r2, [r1, #0]
 8016ee0:	2301      	movs	r3, #1
 8016ee2:	e7fa      	b.n	8016eda <__ascii_wctomb+0xe>

08016ee4 <register_fini>:
 8016ee4:	4b03      	ldr	r3, [pc, #12]	; (8016ef4 <register_fini+0x10>)
 8016ee6:	b510      	push	{r4, lr}
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d002      	beq.n	8016ef2 <register_fini+0xe>
 8016eec:	4802      	ldr	r0, [pc, #8]	; (8016ef8 <register_fini+0x14>)
 8016eee:	f000 f805 	bl	8016efc <atexit>
 8016ef2:	bd10      	pop	{r4, pc}
 8016ef4:	00000000 	.word	0x00000000
 8016ef8:	08017bc9 	.word	0x08017bc9

08016efc <atexit>:
 8016efc:	2300      	movs	r3, #0
 8016efe:	b510      	push	{r4, lr}
 8016f00:	0001      	movs	r1, r0
 8016f02:	001a      	movs	r2, r3
 8016f04:	0018      	movs	r0, r3
 8016f06:	f001 ff53 	bl	8018db0 <__register_exitproc>
 8016f0a:	bd10      	pop	{r4, pc}

08016f0c <quorem>:
 8016f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f0e:	6903      	ldr	r3, [r0, #16]
 8016f10:	690c      	ldr	r4, [r1, #16]
 8016f12:	b089      	sub	sp, #36	; 0x24
 8016f14:	0007      	movs	r7, r0
 8016f16:	9105      	str	r1, [sp, #20]
 8016f18:	2600      	movs	r6, #0
 8016f1a:	42a3      	cmp	r3, r4
 8016f1c:	db65      	blt.n	8016fea <quorem+0xde>
 8016f1e:	000b      	movs	r3, r1
 8016f20:	3c01      	subs	r4, #1
 8016f22:	3314      	adds	r3, #20
 8016f24:	00a5      	lsls	r5, r4, #2
 8016f26:	9303      	str	r3, [sp, #12]
 8016f28:	195b      	adds	r3, r3, r5
 8016f2a:	9304      	str	r3, [sp, #16]
 8016f2c:	0003      	movs	r3, r0
 8016f2e:	3314      	adds	r3, #20
 8016f30:	9302      	str	r3, [sp, #8]
 8016f32:	195d      	adds	r5, r3, r5
 8016f34:	9b04      	ldr	r3, [sp, #16]
 8016f36:	6828      	ldr	r0, [r5, #0]
 8016f38:	681b      	ldr	r3, [r3, #0]
 8016f3a:	1c59      	adds	r1, r3, #1
 8016f3c:	9301      	str	r3, [sp, #4]
 8016f3e:	f7e9 f907 	bl	8000150 <__udivsi3>
 8016f42:	9001      	str	r0, [sp, #4]
 8016f44:	42b0      	cmp	r0, r6
 8016f46:	d029      	beq.n	8016f9c <quorem+0x90>
 8016f48:	9b03      	ldr	r3, [sp, #12]
 8016f4a:	9802      	ldr	r0, [sp, #8]
 8016f4c:	469c      	mov	ip, r3
 8016f4e:	9606      	str	r6, [sp, #24]
 8016f50:	4662      	mov	r2, ip
 8016f52:	ca08      	ldmia	r2!, {r3}
 8016f54:	4694      	mov	ip, r2
 8016f56:	9a01      	ldr	r2, [sp, #4]
 8016f58:	b299      	uxth	r1, r3
 8016f5a:	4351      	muls	r1, r2
 8016f5c:	0c1b      	lsrs	r3, r3, #16
 8016f5e:	4353      	muls	r3, r2
 8016f60:	1989      	adds	r1, r1, r6
 8016f62:	0c0a      	lsrs	r2, r1, #16
 8016f64:	189b      	adds	r3, r3, r2
 8016f66:	9307      	str	r3, [sp, #28]
 8016f68:	0c1e      	lsrs	r6, r3, #16
 8016f6a:	6803      	ldr	r3, [r0, #0]
 8016f6c:	b289      	uxth	r1, r1
 8016f6e:	b29a      	uxth	r2, r3
 8016f70:	9b06      	ldr	r3, [sp, #24]
 8016f72:	18d2      	adds	r2, r2, r3
 8016f74:	6803      	ldr	r3, [r0, #0]
 8016f76:	1a52      	subs	r2, r2, r1
 8016f78:	0c19      	lsrs	r1, r3, #16
 8016f7a:	466b      	mov	r3, sp
 8016f7c:	8b9b      	ldrh	r3, [r3, #28]
 8016f7e:	1acb      	subs	r3, r1, r3
 8016f80:	1411      	asrs	r1, r2, #16
 8016f82:	185b      	adds	r3, r3, r1
 8016f84:	1419      	asrs	r1, r3, #16
 8016f86:	b292      	uxth	r2, r2
 8016f88:	041b      	lsls	r3, r3, #16
 8016f8a:	431a      	orrs	r2, r3
 8016f8c:	9b04      	ldr	r3, [sp, #16]
 8016f8e:	9106      	str	r1, [sp, #24]
 8016f90:	c004      	stmia	r0!, {r2}
 8016f92:	4563      	cmp	r3, ip
 8016f94:	d2dc      	bcs.n	8016f50 <quorem+0x44>
 8016f96:	682b      	ldr	r3, [r5, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d02d      	beq.n	8016ff8 <quorem+0xec>
 8016f9c:	9905      	ldr	r1, [sp, #20]
 8016f9e:	0038      	movs	r0, r7
 8016fa0:	f001 fcb2 	bl	8018908 <__mcmp>
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	db1f      	blt.n	8016fe8 <quorem+0xdc>
 8016fa8:	2500      	movs	r5, #0
 8016faa:	9b01      	ldr	r3, [sp, #4]
 8016fac:	9802      	ldr	r0, [sp, #8]
 8016fae:	3301      	adds	r3, #1
 8016fb0:	9903      	ldr	r1, [sp, #12]
 8016fb2:	9301      	str	r3, [sp, #4]
 8016fb4:	6802      	ldr	r2, [r0, #0]
 8016fb6:	c908      	ldmia	r1!, {r3}
 8016fb8:	b292      	uxth	r2, r2
 8016fba:	1955      	adds	r5, r2, r5
 8016fbc:	b29a      	uxth	r2, r3
 8016fbe:	1aaa      	subs	r2, r5, r2
 8016fc0:	6805      	ldr	r5, [r0, #0]
 8016fc2:	0c1b      	lsrs	r3, r3, #16
 8016fc4:	0c2d      	lsrs	r5, r5, #16
 8016fc6:	1aeb      	subs	r3, r5, r3
 8016fc8:	1415      	asrs	r5, r2, #16
 8016fca:	195b      	adds	r3, r3, r5
 8016fcc:	141d      	asrs	r5, r3, #16
 8016fce:	b292      	uxth	r2, r2
 8016fd0:	041b      	lsls	r3, r3, #16
 8016fd2:	4313      	orrs	r3, r2
 8016fd4:	c008      	stmia	r0!, {r3}
 8016fd6:	9b04      	ldr	r3, [sp, #16]
 8016fd8:	428b      	cmp	r3, r1
 8016fda:	d2eb      	bcs.n	8016fb4 <quorem+0xa8>
 8016fdc:	9a02      	ldr	r2, [sp, #8]
 8016fde:	00a3      	lsls	r3, r4, #2
 8016fe0:	18d3      	adds	r3, r2, r3
 8016fe2:	681a      	ldr	r2, [r3, #0]
 8016fe4:	2a00      	cmp	r2, #0
 8016fe6:	d011      	beq.n	801700c <quorem+0x100>
 8016fe8:	9e01      	ldr	r6, [sp, #4]
 8016fea:	0030      	movs	r0, r6
 8016fec:	b009      	add	sp, #36	; 0x24
 8016fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ff0:	682b      	ldr	r3, [r5, #0]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d104      	bne.n	8017000 <quorem+0xf4>
 8016ff6:	3c01      	subs	r4, #1
 8016ff8:	9b02      	ldr	r3, [sp, #8]
 8016ffa:	3d04      	subs	r5, #4
 8016ffc:	42ab      	cmp	r3, r5
 8016ffe:	d3f7      	bcc.n	8016ff0 <quorem+0xe4>
 8017000:	613c      	str	r4, [r7, #16]
 8017002:	e7cb      	b.n	8016f9c <quorem+0x90>
 8017004:	681a      	ldr	r2, [r3, #0]
 8017006:	2a00      	cmp	r2, #0
 8017008:	d104      	bne.n	8017014 <quorem+0x108>
 801700a:	3c01      	subs	r4, #1
 801700c:	9a02      	ldr	r2, [sp, #8]
 801700e:	3b04      	subs	r3, #4
 8017010:	429a      	cmp	r2, r3
 8017012:	d3f7      	bcc.n	8017004 <quorem+0xf8>
 8017014:	613c      	str	r4, [r7, #16]
 8017016:	e7e7      	b.n	8016fe8 <quorem+0xdc>

08017018 <_dtoa_r>:
 8017018:	b5f0      	push	{r4, r5, r6, r7, lr}
 801701a:	0014      	movs	r4, r2
 801701c:	001d      	movs	r5, r3
 801701e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8017020:	b09b      	sub	sp, #108	; 0x6c
 8017022:	9002      	str	r0, [sp, #8]
 8017024:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 8017026:	9406      	str	r4, [sp, #24]
 8017028:	9507      	str	r5, [sp, #28]
 801702a:	2900      	cmp	r1, #0
 801702c:	d009      	beq.n	8017042 <_dtoa_r+0x2a>
 801702e:	2301      	movs	r3, #1
 8017030:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017032:	4093      	lsls	r3, r2
 8017034:	604a      	str	r2, [r1, #4]
 8017036:	608b      	str	r3, [r1, #8]
 8017038:	f001 fa6a 	bl	8018510 <_Bfree>
 801703c:	2300      	movs	r3, #0
 801703e:	9a02      	ldr	r2, [sp, #8]
 8017040:	6413      	str	r3, [r2, #64]	; 0x40
 8017042:	2d00      	cmp	r5, #0
 8017044:	da20      	bge.n	8017088 <_dtoa_r+0x70>
 8017046:	2301      	movs	r3, #1
 8017048:	6033      	str	r3, [r6, #0]
 801704a:	006b      	lsls	r3, r5, #1
 801704c:	085b      	lsrs	r3, r3, #1
 801704e:	9307      	str	r3, [sp, #28]
 8017050:	9c07      	ldr	r4, [sp, #28]
 8017052:	4bb2      	ldr	r3, [pc, #712]	; (801731c <_dtoa_r+0x304>)
 8017054:	0022      	movs	r2, r4
 8017056:	9317      	str	r3, [sp, #92]	; 0x5c
 8017058:	401a      	ands	r2, r3
 801705a:	429a      	cmp	r2, r3
 801705c:	d117      	bne.n	801708e <_dtoa_r+0x76>
 801705e:	4bb0      	ldr	r3, [pc, #704]	; (8017320 <_dtoa_r+0x308>)
 8017060:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8017062:	6013      	str	r3, [r2, #0]
 8017064:	9b06      	ldr	r3, [sp, #24]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d103      	bne.n	8017072 <_dtoa_r+0x5a>
 801706a:	0324      	lsls	r4, r4, #12
 801706c:	d101      	bne.n	8017072 <_dtoa_r+0x5a>
 801706e:	f000 fd89 	bl	8017b84 <_dtoa_r+0xb6c>
 8017072:	4bac      	ldr	r3, [pc, #688]	; (8017324 <_dtoa_r+0x30c>)
 8017074:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017076:	9308      	str	r3, [sp, #32]
 8017078:	2a00      	cmp	r2, #0
 801707a:	d002      	beq.n	8017082 <_dtoa_r+0x6a>
 801707c:	4baa      	ldr	r3, [pc, #680]	; (8017328 <_dtoa_r+0x310>)
 801707e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017080:	6013      	str	r3, [r2, #0]
 8017082:	9808      	ldr	r0, [sp, #32]
 8017084:	b01b      	add	sp, #108	; 0x6c
 8017086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017088:	2300      	movs	r3, #0
 801708a:	6033      	str	r3, [r6, #0]
 801708c:	e7e0      	b.n	8017050 <_dtoa_r+0x38>
 801708e:	9e06      	ldr	r6, [sp, #24]
 8017090:	9f07      	ldr	r7, [sp, #28]
 8017092:	2200      	movs	r2, #0
 8017094:	2300      	movs	r3, #0
 8017096:	0030      	movs	r0, r6
 8017098:	0039      	movs	r1, r7
 801709a:	f7e9 f9df 	bl	800045c <__aeabi_dcmpeq>
 801709e:	1e05      	subs	r5, r0, #0
 80170a0:	d00b      	beq.n	80170ba <_dtoa_r+0xa2>
 80170a2:	2301      	movs	r3, #1
 80170a4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80170a6:	6013      	str	r3, [r2, #0]
 80170a8:	4ba0      	ldr	r3, [pc, #640]	; (801732c <_dtoa_r+0x314>)
 80170aa:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80170ac:	9308      	str	r3, [sp, #32]
 80170ae:	2a00      	cmp	r2, #0
 80170b0:	d0e7      	beq.n	8017082 <_dtoa_r+0x6a>
 80170b2:	4a9f      	ldr	r2, [pc, #636]	; (8017330 <_dtoa_r+0x318>)
 80170b4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80170b6:	600a      	str	r2, [r1, #0]
 80170b8:	e7e3      	b.n	8017082 <_dtoa_r+0x6a>
 80170ba:	ab18      	add	r3, sp, #96	; 0x60
 80170bc:	9301      	str	r3, [sp, #4]
 80170be:	ab19      	add	r3, sp, #100	; 0x64
 80170c0:	9300      	str	r3, [sp, #0]
 80170c2:	0032      	movs	r2, r6
 80170c4:	003b      	movs	r3, r7
 80170c6:	9802      	ldr	r0, [sp, #8]
 80170c8:	f001 fd0e 	bl	8018ae8 <__d2b>
 80170cc:	0063      	lsls	r3, r4, #1
 80170ce:	9003      	str	r0, [sp, #12]
 80170d0:	0d5b      	lsrs	r3, r3, #21
 80170d2:	d074      	beq.n	80171be <_dtoa_r+0x1a6>
 80170d4:	033a      	lsls	r2, r7, #12
 80170d6:	4c97      	ldr	r4, [pc, #604]	; (8017334 <_dtoa_r+0x31c>)
 80170d8:	0b12      	lsrs	r2, r2, #12
 80170da:	4314      	orrs	r4, r2
 80170dc:	0021      	movs	r1, r4
 80170de:	4a96      	ldr	r2, [pc, #600]	; (8017338 <_dtoa_r+0x320>)
 80170e0:	0030      	movs	r0, r6
 80170e2:	9516      	str	r5, [sp, #88]	; 0x58
 80170e4:	189e      	adds	r6, r3, r2
 80170e6:	2200      	movs	r2, #0
 80170e8:	4b94      	ldr	r3, [pc, #592]	; (801733c <_dtoa_r+0x324>)
 80170ea:	f7eb f915 	bl	8002318 <__aeabi_dsub>
 80170ee:	4a94      	ldr	r2, [pc, #592]	; (8017340 <_dtoa_r+0x328>)
 80170f0:	4b94      	ldr	r3, [pc, #592]	; (8017344 <_dtoa_r+0x32c>)
 80170f2:	f7ea fe9f 	bl	8001e34 <__aeabi_dmul>
 80170f6:	4a94      	ldr	r2, [pc, #592]	; (8017348 <_dtoa_r+0x330>)
 80170f8:	4b94      	ldr	r3, [pc, #592]	; (801734c <_dtoa_r+0x334>)
 80170fa:	f7e9 ff75 	bl	8000fe8 <__aeabi_dadd>
 80170fe:	0004      	movs	r4, r0
 8017100:	0030      	movs	r0, r6
 8017102:	000d      	movs	r5, r1
 8017104:	f7eb fca2 	bl	8002a4c <__aeabi_i2d>
 8017108:	4a91      	ldr	r2, [pc, #580]	; (8017350 <_dtoa_r+0x338>)
 801710a:	4b92      	ldr	r3, [pc, #584]	; (8017354 <_dtoa_r+0x33c>)
 801710c:	f7ea fe92 	bl	8001e34 <__aeabi_dmul>
 8017110:	0002      	movs	r2, r0
 8017112:	000b      	movs	r3, r1
 8017114:	0020      	movs	r0, r4
 8017116:	0029      	movs	r1, r5
 8017118:	f7e9 ff66 	bl	8000fe8 <__aeabi_dadd>
 801711c:	0004      	movs	r4, r0
 801711e:	000d      	movs	r5, r1
 8017120:	f7eb fc5e 	bl	80029e0 <__aeabi_d2iz>
 8017124:	2200      	movs	r2, #0
 8017126:	0007      	movs	r7, r0
 8017128:	2300      	movs	r3, #0
 801712a:	0020      	movs	r0, r4
 801712c:	0029      	movs	r1, r5
 801712e:	f7e9 f99b 	bl	8000468 <__aeabi_dcmplt>
 8017132:	2800      	cmp	r0, #0
 8017134:	d009      	beq.n	801714a <_dtoa_r+0x132>
 8017136:	0038      	movs	r0, r7
 8017138:	f7eb fc88 	bl	8002a4c <__aeabi_i2d>
 801713c:	002b      	movs	r3, r5
 801713e:	0022      	movs	r2, r4
 8017140:	f7e9 f98c 	bl	800045c <__aeabi_dcmpeq>
 8017144:	4243      	negs	r3, r0
 8017146:	4158      	adcs	r0, r3
 8017148:	1a3f      	subs	r7, r7, r0
 801714a:	2301      	movs	r3, #1
 801714c:	9314      	str	r3, [sp, #80]	; 0x50
 801714e:	2f16      	cmp	r7, #22
 8017150:	d80d      	bhi.n	801716e <_dtoa_r+0x156>
 8017152:	4981      	ldr	r1, [pc, #516]	; (8017358 <_dtoa_r+0x340>)
 8017154:	00fb      	lsls	r3, r7, #3
 8017156:	18c9      	adds	r1, r1, r3
 8017158:	6808      	ldr	r0, [r1, #0]
 801715a:	6849      	ldr	r1, [r1, #4]
 801715c:	9a06      	ldr	r2, [sp, #24]
 801715e:	9b07      	ldr	r3, [sp, #28]
 8017160:	f7e9 f996 	bl	8000490 <__aeabi_dcmpgt>
 8017164:	2800      	cmp	r0, #0
 8017166:	d046      	beq.n	80171f6 <_dtoa_r+0x1de>
 8017168:	2300      	movs	r3, #0
 801716a:	3f01      	subs	r7, #1
 801716c:	9314      	str	r3, [sp, #80]	; 0x50
 801716e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017170:	1b9e      	subs	r6, r3, r6
 8017172:	2300      	movs	r3, #0
 8017174:	930a      	str	r3, [sp, #40]	; 0x28
 8017176:	0033      	movs	r3, r6
 8017178:	3b01      	subs	r3, #1
 801717a:	930b      	str	r3, [sp, #44]	; 0x2c
 801717c:	d504      	bpl.n	8017188 <_dtoa_r+0x170>
 801717e:	2301      	movs	r3, #1
 8017180:	1b9b      	subs	r3, r3, r6
 8017182:	930a      	str	r3, [sp, #40]	; 0x28
 8017184:	2300      	movs	r3, #0
 8017186:	930b      	str	r3, [sp, #44]	; 0x2c
 8017188:	2f00      	cmp	r7, #0
 801718a:	db36      	blt.n	80171fa <_dtoa_r+0x1e2>
 801718c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801718e:	9711      	str	r7, [sp, #68]	; 0x44
 8017190:	19db      	adds	r3, r3, r7
 8017192:	930b      	str	r3, [sp, #44]	; 0x2c
 8017194:	2300      	movs	r3, #0
 8017196:	9304      	str	r3, [sp, #16]
 8017198:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801719a:	2401      	movs	r4, #1
 801719c:	2b09      	cmp	r3, #9
 801719e:	d900      	bls.n	80171a2 <_dtoa_r+0x18a>
 80171a0:	e082      	b.n	80172a8 <_dtoa_r+0x290>
 80171a2:	2b05      	cmp	r3, #5
 80171a4:	dd02      	ble.n	80171ac <_dtoa_r+0x194>
 80171a6:	2400      	movs	r4, #0
 80171a8:	3b04      	subs	r3, #4
 80171aa:	9320      	str	r3, [sp, #128]	; 0x80
 80171ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80171ae:	1e98      	subs	r0, r3, #2
 80171b0:	2803      	cmp	r0, #3
 80171b2:	d900      	bls.n	80171b6 <_dtoa_r+0x19e>
 80171b4:	e082      	b.n	80172bc <_dtoa_r+0x2a4>
 80171b6:	f7e8 ffb7 	bl	8000128 <__gnu_thumb1_case_uqi>
 80171ba:	7573      	.short	0x7573
 80171bc:	6828      	.short	0x6828
 80171be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80171c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80171c2:	189e      	adds	r6, r3, r2
 80171c4:	4b65      	ldr	r3, [pc, #404]	; (801735c <_dtoa_r+0x344>)
 80171c6:	18f2      	adds	r2, r6, r3
 80171c8:	2a20      	cmp	r2, #32
 80171ca:	dd0f      	ble.n	80171ec <_dtoa_r+0x1d4>
 80171cc:	2340      	movs	r3, #64	; 0x40
 80171ce:	1a9b      	subs	r3, r3, r2
 80171d0:	409c      	lsls	r4, r3
 80171d2:	4b63      	ldr	r3, [pc, #396]	; (8017360 <_dtoa_r+0x348>)
 80171d4:	9806      	ldr	r0, [sp, #24]
 80171d6:	18f3      	adds	r3, r6, r3
 80171d8:	40d8      	lsrs	r0, r3
 80171da:	4320      	orrs	r0, r4
 80171dc:	f7eb fc70 	bl	8002ac0 <__aeabi_ui2d>
 80171e0:	2301      	movs	r3, #1
 80171e2:	4c60      	ldr	r4, [pc, #384]	; (8017364 <_dtoa_r+0x34c>)
 80171e4:	3e01      	subs	r6, #1
 80171e6:	1909      	adds	r1, r1, r4
 80171e8:	9316      	str	r3, [sp, #88]	; 0x58
 80171ea:	e77c      	b.n	80170e6 <_dtoa_r+0xce>
 80171ec:	2320      	movs	r3, #32
 80171ee:	9806      	ldr	r0, [sp, #24]
 80171f0:	1a9b      	subs	r3, r3, r2
 80171f2:	4098      	lsls	r0, r3
 80171f4:	e7f2      	b.n	80171dc <_dtoa_r+0x1c4>
 80171f6:	9014      	str	r0, [sp, #80]	; 0x50
 80171f8:	e7b9      	b.n	801716e <_dtoa_r+0x156>
 80171fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171fc:	1bdb      	subs	r3, r3, r7
 80171fe:	930a      	str	r3, [sp, #40]	; 0x28
 8017200:	427b      	negs	r3, r7
 8017202:	9304      	str	r3, [sp, #16]
 8017204:	2300      	movs	r3, #0
 8017206:	9311      	str	r3, [sp, #68]	; 0x44
 8017208:	e7c6      	b.n	8017198 <_dtoa_r+0x180>
 801720a:	2301      	movs	r3, #1
 801720c:	930d      	str	r3, [sp, #52]	; 0x34
 801720e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017210:	2b00      	cmp	r3, #0
 8017212:	dd57      	ble.n	80172c4 <_dtoa_r+0x2ac>
 8017214:	930c      	str	r3, [sp, #48]	; 0x30
 8017216:	9309      	str	r3, [sp, #36]	; 0x24
 8017218:	2200      	movs	r2, #0
 801721a:	9902      	ldr	r1, [sp, #8]
 801721c:	644a      	str	r2, [r1, #68]	; 0x44
 801721e:	3204      	adds	r2, #4
 8017220:	0010      	movs	r0, r2
 8017222:	9902      	ldr	r1, [sp, #8]
 8017224:	3014      	adds	r0, #20
 8017226:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8017228:	4298      	cmp	r0, r3
 801722a:	d950      	bls.n	80172ce <_dtoa_r+0x2b6>
 801722c:	9802      	ldr	r0, [sp, #8]
 801722e:	f001 f947 	bl	80184c0 <_Balloc>
 8017232:	9b02      	ldr	r3, [sp, #8]
 8017234:	9008      	str	r0, [sp, #32]
 8017236:	6418      	str	r0, [r3, #64]	; 0x40
 8017238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801723a:	2b0e      	cmp	r3, #14
 801723c:	d900      	bls.n	8017240 <_dtoa_r+0x228>
 801723e:	e10c      	b.n	801745a <_dtoa_r+0x442>
 8017240:	2c00      	cmp	r4, #0
 8017242:	d100      	bne.n	8017246 <_dtoa_r+0x22e>
 8017244:	e109      	b.n	801745a <_dtoa_r+0x442>
 8017246:	9b06      	ldr	r3, [sp, #24]
 8017248:	9c07      	ldr	r4, [sp, #28]
 801724a:	9312      	str	r3, [sp, #72]	; 0x48
 801724c:	9413      	str	r4, [sp, #76]	; 0x4c
 801724e:	2f00      	cmp	r7, #0
 8017250:	dc00      	bgt.n	8017254 <_dtoa_r+0x23c>
 8017252:	e08b      	b.n	801736c <_dtoa_r+0x354>
 8017254:	210f      	movs	r1, #15
 8017256:	003a      	movs	r2, r7
 8017258:	4b3f      	ldr	r3, [pc, #252]	; (8017358 <_dtoa_r+0x340>)
 801725a:	400a      	ands	r2, r1
 801725c:	00d2      	lsls	r2, r2, #3
 801725e:	189b      	adds	r3, r3, r2
 8017260:	681d      	ldr	r5, [r3, #0]
 8017262:	685e      	ldr	r6, [r3, #4]
 8017264:	2302      	movs	r3, #2
 8017266:	113c      	asrs	r4, r7, #4
 8017268:	930e      	str	r3, [sp, #56]	; 0x38
 801726a:	06e3      	lsls	r3, r4, #27
 801726c:	d50b      	bpl.n	8017286 <_dtoa_r+0x26e>
 801726e:	4b3e      	ldr	r3, [pc, #248]	; (8017368 <_dtoa_r+0x350>)
 8017270:	400c      	ands	r4, r1
 8017272:	6a1a      	ldr	r2, [r3, #32]
 8017274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017276:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017278:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801727a:	f7ea f9d1 	bl	8001620 <__aeabi_ddiv>
 801727e:	2303      	movs	r3, #3
 8017280:	9006      	str	r0, [sp, #24]
 8017282:	9107      	str	r1, [sp, #28]
 8017284:	930e      	str	r3, [sp, #56]	; 0x38
 8017286:	2300      	movs	r3, #0
 8017288:	e03b      	b.n	8017302 <_dtoa_r+0x2ea>
 801728a:	2301      	movs	r3, #1
 801728c:	930d      	str	r3, [sp, #52]	; 0x34
 801728e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017290:	18fb      	adds	r3, r7, r3
 8017292:	930c      	str	r3, [sp, #48]	; 0x30
 8017294:	3301      	adds	r3, #1
 8017296:	9309      	str	r3, [sp, #36]	; 0x24
 8017298:	2b00      	cmp	r3, #0
 801729a:	dcbd      	bgt.n	8017218 <_dtoa_r+0x200>
 801729c:	2301      	movs	r3, #1
 801729e:	e7bb      	b.n	8017218 <_dtoa_r+0x200>
 80172a0:	2300      	movs	r3, #0
 80172a2:	e7b3      	b.n	801720c <_dtoa_r+0x1f4>
 80172a4:	2300      	movs	r3, #0
 80172a6:	e7f1      	b.n	801728c <_dtoa_r+0x274>
 80172a8:	2300      	movs	r3, #0
 80172aa:	940d      	str	r4, [sp, #52]	; 0x34
 80172ac:	9320      	str	r3, [sp, #128]	; 0x80
 80172ae:	3b01      	subs	r3, #1
 80172b0:	2200      	movs	r2, #0
 80172b2:	930c      	str	r3, [sp, #48]	; 0x30
 80172b4:	9309      	str	r3, [sp, #36]	; 0x24
 80172b6:	3313      	adds	r3, #19
 80172b8:	9221      	str	r2, [sp, #132]	; 0x84
 80172ba:	e7ad      	b.n	8017218 <_dtoa_r+0x200>
 80172bc:	2301      	movs	r3, #1
 80172be:	930d      	str	r3, [sp, #52]	; 0x34
 80172c0:	3b02      	subs	r3, #2
 80172c2:	e7f5      	b.n	80172b0 <_dtoa_r+0x298>
 80172c4:	2301      	movs	r3, #1
 80172c6:	930c      	str	r3, [sp, #48]	; 0x30
 80172c8:	9309      	str	r3, [sp, #36]	; 0x24
 80172ca:	001a      	movs	r2, r3
 80172cc:	e7f4      	b.n	80172b8 <_dtoa_r+0x2a0>
 80172ce:	9802      	ldr	r0, [sp, #8]
 80172d0:	3101      	adds	r1, #1
 80172d2:	6441      	str	r1, [r0, #68]	; 0x44
 80172d4:	0052      	lsls	r2, r2, #1
 80172d6:	e7a3      	b.n	8017220 <_dtoa_r+0x208>
 80172d8:	2301      	movs	r3, #1
 80172da:	421c      	tst	r4, r3
 80172dc:	d00e      	beq.n	80172fc <_dtoa_r+0x2e4>
 80172de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172e0:	4a21      	ldr	r2, [pc, #132]	; (8017368 <_dtoa_r+0x350>)
 80172e2:	3301      	adds	r3, #1
 80172e4:	930e      	str	r3, [sp, #56]	; 0x38
 80172e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172e8:	0028      	movs	r0, r5
 80172ea:	00db      	lsls	r3, r3, #3
 80172ec:	189b      	adds	r3, r3, r2
 80172ee:	0031      	movs	r1, r6
 80172f0:	681a      	ldr	r2, [r3, #0]
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	f7ea fd9e 	bl	8001e34 <__aeabi_dmul>
 80172f8:	0005      	movs	r5, r0
 80172fa:	000e      	movs	r6, r1
 80172fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80172fe:	1064      	asrs	r4, r4, #1
 8017300:	3301      	adds	r3, #1
 8017302:	9310      	str	r3, [sp, #64]	; 0x40
 8017304:	2c00      	cmp	r4, #0
 8017306:	d1e7      	bne.n	80172d8 <_dtoa_r+0x2c0>
 8017308:	9806      	ldr	r0, [sp, #24]
 801730a:	9907      	ldr	r1, [sp, #28]
 801730c:	002a      	movs	r2, r5
 801730e:	0033      	movs	r3, r6
 8017310:	f7ea f986 	bl	8001620 <__aeabi_ddiv>
 8017314:	9006      	str	r0, [sp, #24]
 8017316:	9107      	str	r1, [sp, #28]
 8017318:	e043      	b.n	80173a2 <_dtoa_r+0x38a>
 801731a:	46c0      	nop			; (mov r8, r8)
 801731c:	7ff00000 	.word	0x7ff00000
 8017320:	0000270f 	.word	0x0000270f
 8017324:	0801c146 	.word	0x0801c146
 8017328:	0801c149 	.word	0x0801c149
 801732c:	0801c01a 	.word	0x0801c01a
 8017330:	0801c01b 	.word	0x0801c01b
 8017334:	3ff00000 	.word	0x3ff00000
 8017338:	fffffc01 	.word	0xfffffc01
 801733c:	3ff80000 	.word	0x3ff80000
 8017340:	636f4361 	.word	0x636f4361
 8017344:	3fd287a7 	.word	0x3fd287a7
 8017348:	8b60c8b3 	.word	0x8b60c8b3
 801734c:	3fc68a28 	.word	0x3fc68a28
 8017350:	509f79fb 	.word	0x509f79fb
 8017354:	3fd34413 	.word	0x3fd34413
 8017358:	0801c178 	.word	0x0801c178
 801735c:	00000432 	.word	0x00000432
 8017360:	00000412 	.word	0x00000412
 8017364:	fe100000 	.word	0xfe100000
 8017368:	0801c150 	.word	0x0801c150
 801736c:	2302      	movs	r3, #2
 801736e:	930e      	str	r3, [sp, #56]	; 0x38
 8017370:	2f00      	cmp	r7, #0
 8017372:	d016      	beq.n	80173a2 <_dtoa_r+0x38a>
 8017374:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017376:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017378:	427c      	negs	r4, r7
 801737a:	330d      	adds	r3, #13
 801737c:	4023      	ands	r3, r4
 801737e:	4acf      	ldr	r2, [pc, #828]	; (80176bc <_dtoa_r+0x6a4>)
 8017380:	00db      	lsls	r3, r3, #3
 8017382:	18d3      	adds	r3, r2, r3
 8017384:	681a      	ldr	r2, [r3, #0]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	f7ea fd54 	bl	8001e34 <__aeabi_dmul>
 801738c:	2300      	movs	r3, #0
 801738e:	2601      	movs	r6, #1
 8017390:	001d      	movs	r5, r3
 8017392:	9006      	str	r0, [sp, #24]
 8017394:	9107      	str	r1, [sp, #28]
 8017396:	1124      	asrs	r4, r4, #4
 8017398:	2c00      	cmp	r4, #0
 801739a:	d000      	beq.n	801739e <_dtoa_r+0x386>
 801739c:	e08c      	b.n	80174b8 <_dtoa_r+0x4a0>
 801739e:	2b00      	cmp	r3, #0
 80173a0:	d1b8      	bne.n	8017314 <_dtoa_r+0x2fc>
 80173a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d100      	bne.n	80173aa <_dtoa_r+0x392>
 80173a8:	e096      	b.n	80174d8 <_dtoa_r+0x4c0>
 80173aa:	9c06      	ldr	r4, [sp, #24]
 80173ac:	9d07      	ldr	r5, [sp, #28]
 80173ae:	2200      	movs	r2, #0
 80173b0:	4bc3      	ldr	r3, [pc, #780]	; (80176c0 <_dtoa_r+0x6a8>)
 80173b2:	0020      	movs	r0, r4
 80173b4:	0029      	movs	r1, r5
 80173b6:	f7e9 f857 	bl	8000468 <__aeabi_dcmplt>
 80173ba:	2800      	cmp	r0, #0
 80173bc:	d100      	bne.n	80173c0 <_dtoa_r+0x3a8>
 80173be:	e08b      	b.n	80174d8 <_dtoa_r+0x4c0>
 80173c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d100      	bne.n	80173c8 <_dtoa_r+0x3b0>
 80173c6:	e087      	b.n	80174d8 <_dtoa_r+0x4c0>
 80173c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	dd41      	ble.n	8017452 <_dtoa_r+0x43a>
 80173ce:	4bbd      	ldr	r3, [pc, #756]	; (80176c4 <_dtoa_r+0x6ac>)
 80173d0:	2200      	movs	r2, #0
 80173d2:	0020      	movs	r0, r4
 80173d4:	0029      	movs	r1, r5
 80173d6:	f7ea fd2d 	bl	8001e34 <__aeabi_dmul>
 80173da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173dc:	9006      	str	r0, [sp, #24]
 80173de:	9107      	str	r1, [sp, #28]
 80173e0:	3301      	adds	r3, #1
 80173e2:	930e      	str	r3, [sp, #56]	; 0x38
 80173e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173e6:	1e7e      	subs	r6, r7, #1
 80173e8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80173ea:	9310      	str	r3, [sp, #64]	; 0x40
 80173ec:	f7eb fb2e 	bl	8002a4c <__aeabi_i2d>
 80173f0:	9a06      	ldr	r2, [sp, #24]
 80173f2:	9b07      	ldr	r3, [sp, #28]
 80173f4:	f7ea fd1e 	bl	8001e34 <__aeabi_dmul>
 80173f8:	2200      	movs	r2, #0
 80173fa:	4bb3      	ldr	r3, [pc, #716]	; (80176c8 <_dtoa_r+0x6b0>)
 80173fc:	f7e9 fdf4 	bl	8000fe8 <__aeabi_dadd>
 8017400:	4ab2      	ldr	r2, [pc, #712]	; (80176cc <_dtoa_r+0x6b4>)
 8017402:	900e      	str	r0, [sp, #56]	; 0x38
 8017404:	910f      	str	r1, [sp, #60]	; 0x3c
 8017406:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017408:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801740a:	4694      	mov	ip, r2
 801740c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801740e:	4463      	add	r3, ip
 8017410:	9315      	str	r3, [sp, #84]	; 0x54
 8017412:	001d      	movs	r5, r3
 8017414:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017416:	2b00      	cmp	r3, #0
 8017418:	d161      	bne.n	80174de <_dtoa_r+0x4c6>
 801741a:	9806      	ldr	r0, [sp, #24]
 801741c:	9907      	ldr	r1, [sp, #28]
 801741e:	2200      	movs	r2, #0
 8017420:	4bab      	ldr	r3, [pc, #684]	; (80176d0 <_dtoa_r+0x6b8>)
 8017422:	f7ea ff79 	bl	8002318 <__aeabi_dsub>
 8017426:	0022      	movs	r2, r4
 8017428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801742a:	9006      	str	r0, [sp, #24]
 801742c:	9107      	str	r1, [sp, #28]
 801742e:	f7e9 f82f 	bl	8000490 <__aeabi_dcmpgt>
 8017432:	2800      	cmp	r0, #0
 8017434:	d000      	beq.n	8017438 <_dtoa_r+0x420>
 8017436:	e2aa      	b.n	801798e <_dtoa_r+0x976>
 8017438:	48a6      	ldr	r0, [pc, #664]	; (80176d4 <_dtoa_r+0x6bc>)
 801743a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801743c:	4684      	mov	ip, r0
 801743e:	4461      	add	r1, ip
 8017440:	000b      	movs	r3, r1
 8017442:	9806      	ldr	r0, [sp, #24]
 8017444:	9907      	ldr	r1, [sp, #28]
 8017446:	0022      	movs	r2, r4
 8017448:	f7e9 f80e 	bl	8000468 <__aeabi_dcmplt>
 801744c:	2800      	cmp	r0, #0
 801744e:	d000      	beq.n	8017452 <_dtoa_r+0x43a>
 8017450:	e297      	b.n	8017982 <_dtoa_r+0x96a>
 8017452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017454:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017456:	9306      	str	r3, [sp, #24]
 8017458:	9407      	str	r4, [sp, #28]
 801745a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801745c:	2b00      	cmp	r3, #0
 801745e:	da00      	bge.n	8017462 <_dtoa_r+0x44a>
 8017460:	e15e      	b.n	8017720 <_dtoa_r+0x708>
 8017462:	2f0e      	cmp	r7, #14
 8017464:	dd00      	ble.n	8017468 <_dtoa_r+0x450>
 8017466:	e15b      	b.n	8017720 <_dtoa_r+0x708>
 8017468:	4b94      	ldr	r3, [pc, #592]	; (80176bc <_dtoa_r+0x6a4>)
 801746a:	00fa      	lsls	r2, r7, #3
 801746c:	189b      	adds	r3, r3, r2
 801746e:	685c      	ldr	r4, [r3, #4]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	9304      	str	r3, [sp, #16]
 8017474:	9405      	str	r4, [sp, #20]
 8017476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017478:	2b00      	cmp	r3, #0
 801747a:	db00      	blt.n	801747e <_dtoa_r+0x466>
 801747c:	e0da      	b.n	8017634 <_dtoa_r+0x61c>
 801747e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017480:	2b00      	cmp	r3, #0
 8017482:	dd00      	ble.n	8017486 <_dtoa_r+0x46e>
 8017484:	e0d6      	b.n	8017634 <_dtoa_r+0x61c>
 8017486:	d000      	beq.n	801748a <_dtoa_r+0x472>
 8017488:	e27f      	b.n	801798a <_dtoa_r+0x972>
 801748a:	9804      	ldr	r0, [sp, #16]
 801748c:	9905      	ldr	r1, [sp, #20]
 801748e:	2200      	movs	r2, #0
 8017490:	4b8f      	ldr	r3, [pc, #572]	; (80176d0 <_dtoa_r+0x6b8>)
 8017492:	f7ea fccf 	bl	8001e34 <__aeabi_dmul>
 8017496:	9a06      	ldr	r2, [sp, #24]
 8017498:	9b07      	ldr	r3, [sp, #28]
 801749a:	f7e9 f803 	bl	80004a4 <__aeabi_dcmpge>
 801749e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174a0:	9304      	str	r3, [sp, #16]
 80174a2:	001e      	movs	r6, r3
 80174a4:	2800      	cmp	r0, #0
 80174a6:	d000      	beq.n	80174aa <_dtoa_r+0x492>
 80174a8:	e251      	b.n	801794e <_dtoa_r+0x936>
 80174aa:	9b08      	ldr	r3, [sp, #32]
 80174ac:	9a08      	ldr	r2, [sp, #32]
 80174ae:	1c5d      	adds	r5, r3, #1
 80174b0:	2331      	movs	r3, #49	; 0x31
 80174b2:	3701      	adds	r7, #1
 80174b4:	7013      	strb	r3, [r2, #0]
 80174b6:	e24d      	b.n	8017954 <_dtoa_r+0x93c>
 80174b8:	4234      	tst	r4, r6
 80174ba:	d00a      	beq.n	80174d2 <_dtoa_r+0x4ba>
 80174bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80174be:	4a86      	ldr	r2, [pc, #536]	; (80176d8 <_dtoa_r+0x6c0>)
 80174c0:	3301      	adds	r3, #1
 80174c2:	930e      	str	r3, [sp, #56]	; 0x38
 80174c4:	00eb      	lsls	r3, r5, #3
 80174c6:	189b      	adds	r3, r3, r2
 80174c8:	681a      	ldr	r2, [r3, #0]
 80174ca:	685b      	ldr	r3, [r3, #4]
 80174cc:	f7ea fcb2 	bl	8001e34 <__aeabi_dmul>
 80174d0:	0033      	movs	r3, r6
 80174d2:	1064      	asrs	r4, r4, #1
 80174d4:	3501      	adds	r5, #1
 80174d6:	e75f      	b.n	8017398 <_dtoa_r+0x380>
 80174d8:	003e      	movs	r6, r7
 80174da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174dc:	e784      	b.n	80173e8 <_dtoa_r+0x3d0>
 80174de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80174e0:	1e5a      	subs	r2, r3, #1
 80174e2:	4b76      	ldr	r3, [pc, #472]	; (80176bc <_dtoa_r+0x6a4>)
 80174e4:	00d2      	lsls	r2, r2, #3
 80174e6:	189b      	adds	r3, r3, r2
 80174e8:	6818      	ldr	r0, [r3, #0]
 80174ea:	6859      	ldr	r1, [r3, #4]
 80174ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d04b      	beq.n	801758a <_dtoa_r+0x572>
 80174f2:	0002      	movs	r2, r0
 80174f4:	000b      	movs	r3, r1
 80174f6:	2000      	movs	r0, #0
 80174f8:	4978      	ldr	r1, [pc, #480]	; (80176dc <_dtoa_r+0x6c4>)
 80174fa:	f7ea f891 	bl	8001620 <__aeabi_ddiv>
 80174fe:	002b      	movs	r3, r5
 8017500:	0022      	movs	r2, r4
 8017502:	f7ea ff09 	bl	8002318 <__aeabi_dsub>
 8017506:	9b08      	ldr	r3, [sp, #32]
 8017508:	900e      	str	r0, [sp, #56]	; 0x38
 801750a:	910f      	str	r1, [sp, #60]	; 0x3c
 801750c:	9315      	str	r3, [sp, #84]	; 0x54
 801750e:	9806      	ldr	r0, [sp, #24]
 8017510:	9907      	ldr	r1, [sp, #28]
 8017512:	f7eb fa65 	bl	80029e0 <__aeabi_d2iz>
 8017516:	0004      	movs	r4, r0
 8017518:	f7eb fa98 	bl	8002a4c <__aeabi_i2d>
 801751c:	0002      	movs	r2, r0
 801751e:	000b      	movs	r3, r1
 8017520:	9806      	ldr	r0, [sp, #24]
 8017522:	9907      	ldr	r1, [sp, #28]
 8017524:	f7ea fef8 	bl	8002318 <__aeabi_dsub>
 8017528:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801752a:	3430      	adds	r4, #48	; 0x30
 801752c:	1c5d      	adds	r5, r3, #1
 801752e:	701c      	strb	r4, [r3, #0]
 8017530:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017534:	9006      	str	r0, [sp, #24]
 8017536:	9107      	str	r1, [sp, #28]
 8017538:	f7e8 ff96 	bl	8000468 <__aeabi_dcmplt>
 801753c:	2800      	cmp	r0, #0
 801753e:	d16c      	bne.n	801761a <_dtoa_r+0x602>
 8017540:	9a06      	ldr	r2, [sp, #24]
 8017542:	9b07      	ldr	r3, [sp, #28]
 8017544:	2000      	movs	r0, #0
 8017546:	495e      	ldr	r1, [pc, #376]	; (80176c0 <_dtoa_r+0x6a8>)
 8017548:	f7ea fee6 	bl	8002318 <__aeabi_dsub>
 801754c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801754e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017550:	f7e8 ff8a 	bl	8000468 <__aeabi_dcmplt>
 8017554:	2800      	cmp	r0, #0
 8017556:	d000      	beq.n	801755a <_dtoa_r+0x542>
 8017558:	e0c3      	b.n	80176e2 <_dtoa_r+0x6ca>
 801755a:	9b08      	ldr	r3, [sp, #32]
 801755c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801755e:	1aeb      	subs	r3, r5, r3
 8017560:	429a      	cmp	r2, r3
 8017562:	dc00      	bgt.n	8017566 <_dtoa_r+0x54e>
 8017564:	e775      	b.n	8017452 <_dtoa_r+0x43a>
 8017566:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017568:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801756a:	2200      	movs	r2, #0
 801756c:	4b55      	ldr	r3, [pc, #340]	; (80176c4 <_dtoa_r+0x6ac>)
 801756e:	f7ea fc61 	bl	8001e34 <__aeabi_dmul>
 8017572:	2200      	movs	r2, #0
 8017574:	900e      	str	r0, [sp, #56]	; 0x38
 8017576:	910f      	str	r1, [sp, #60]	; 0x3c
 8017578:	9806      	ldr	r0, [sp, #24]
 801757a:	9907      	ldr	r1, [sp, #28]
 801757c:	4b51      	ldr	r3, [pc, #324]	; (80176c4 <_dtoa_r+0x6ac>)
 801757e:	f7ea fc59 	bl	8001e34 <__aeabi_dmul>
 8017582:	9515      	str	r5, [sp, #84]	; 0x54
 8017584:	9006      	str	r0, [sp, #24]
 8017586:	9107      	str	r1, [sp, #28]
 8017588:	e7c1      	b.n	801750e <_dtoa_r+0x4f6>
 801758a:	0022      	movs	r2, r4
 801758c:	002b      	movs	r3, r5
 801758e:	f7ea fc51 	bl	8001e34 <__aeabi_dmul>
 8017592:	9c08      	ldr	r4, [sp, #32]
 8017594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017596:	0023      	movs	r3, r4
 8017598:	4694      	mov	ip, r2
 801759a:	900e      	str	r0, [sp, #56]	; 0x38
 801759c:	910f      	str	r1, [sp, #60]	; 0x3c
 801759e:	4463      	add	r3, ip
 80175a0:	9315      	str	r3, [sp, #84]	; 0x54
 80175a2:	9806      	ldr	r0, [sp, #24]
 80175a4:	9907      	ldr	r1, [sp, #28]
 80175a6:	f7eb fa1b 	bl	80029e0 <__aeabi_d2iz>
 80175aa:	0005      	movs	r5, r0
 80175ac:	f7eb fa4e 	bl	8002a4c <__aeabi_i2d>
 80175b0:	000b      	movs	r3, r1
 80175b2:	0002      	movs	r2, r0
 80175b4:	9806      	ldr	r0, [sp, #24]
 80175b6:	9907      	ldr	r1, [sp, #28]
 80175b8:	f7ea feae 	bl	8002318 <__aeabi_dsub>
 80175bc:	3530      	adds	r5, #48	; 0x30
 80175be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80175c0:	7025      	strb	r5, [r4, #0]
 80175c2:	3401      	adds	r4, #1
 80175c4:	9006      	str	r0, [sp, #24]
 80175c6:	9107      	str	r1, [sp, #28]
 80175c8:	42a3      	cmp	r3, r4
 80175ca:	d12a      	bne.n	8017622 <_dtoa_r+0x60a>
 80175cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80175ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80175d0:	9a08      	ldr	r2, [sp, #32]
 80175d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175d4:	4694      	mov	ip, r2
 80175d6:	4463      	add	r3, ip
 80175d8:	2200      	movs	r2, #0
 80175da:	001d      	movs	r5, r3
 80175dc:	4b3f      	ldr	r3, [pc, #252]	; (80176dc <_dtoa_r+0x6c4>)
 80175de:	f7e9 fd03 	bl	8000fe8 <__aeabi_dadd>
 80175e2:	0002      	movs	r2, r0
 80175e4:	000b      	movs	r3, r1
 80175e6:	9806      	ldr	r0, [sp, #24]
 80175e8:	9907      	ldr	r1, [sp, #28]
 80175ea:	f7e8 ff51 	bl	8000490 <__aeabi_dcmpgt>
 80175ee:	2800      	cmp	r0, #0
 80175f0:	d000      	beq.n	80175f4 <_dtoa_r+0x5dc>
 80175f2:	e076      	b.n	80176e2 <_dtoa_r+0x6ca>
 80175f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80175f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175f8:	2000      	movs	r0, #0
 80175fa:	4938      	ldr	r1, [pc, #224]	; (80176dc <_dtoa_r+0x6c4>)
 80175fc:	f7ea fe8c 	bl	8002318 <__aeabi_dsub>
 8017600:	0002      	movs	r2, r0
 8017602:	000b      	movs	r3, r1
 8017604:	9806      	ldr	r0, [sp, #24]
 8017606:	9907      	ldr	r1, [sp, #28]
 8017608:	f7e8 ff2e 	bl	8000468 <__aeabi_dcmplt>
 801760c:	2800      	cmp	r0, #0
 801760e:	d100      	bne.n	8017612 <_dtoa_r+0x5fa>
 8017610:	e71f      	b.n	8017452 <_dtoa_r+0x43a>
 8017612:	1e6b      	subs	r3, r5, #1
 8017614:	781a      	ldrb	r2, [r3, #0]
 8017616:	2a30      	cmp	r2, #48	; 0x30
 8017618:	d001      	beq.n	801761e <_dtoa_r+0x606>
 801761a:	0037      	movs	r7, r6
 801761c:	e03f      	b.n	801769e <_dtoa_r+0x686>
 801761e:	001d      	movs	r5, r3
 8017620:	e7f7      	b.n	8017612 <_dtoa_r+0x5fa>
 8017622:	9806      	ldr	r0, [sp, #24]
 8017624:	9907      	ldr	r1, [sp, #28]
 8017626:	2200      	movs	r2, #0
 8017628:	4b26      	ldr	r3, [pc, #152]	; (80176c4 <_dtoa_r+0x6ac>)
 801762a:	f7ea fc03 	bl	8001e34 <__aeabi_dmul>
 801762e:	9006      	str	r0, [sp, #24]
 8017630:	9107      	str	r1, [sp, #28]
 8017632:	e7b6      	b.n	80175a2 <_dtoa_r+0x58a>
 8017634:	9e08      	ldr	r6, [sp, #32]
 8017636:	9a04      	ldr	r2, [sp, #16]
 8017638:	9b05      	ldr	r3, [sp, #20]
 801763a:	9806      	ldr	r0, [sp, #24]
 801763c:	9907      	ldr	r1, [sp, #28]
 801763e:	f7e9 ffef 	bl	8001620 <__aeabi_ddiv>
 8017642:	f7eb f9cd 	bl	80029e0 <__aeabi_d2iz>
 8017646:	0004      	movs	r4, r0
 8017648:	f7eb fa00 	bl	8002a4c <__aeabi_i2d>
 801764c:	9a04      	ldr	r2, [sp, #16]
 801764e:	9b05      	ldr	r3, [sp, #20]
 8017650:	f7ea fbf0 	bl	8001e34 <__aeabi_dmul>
 8017654:	0002      	movs	r2, r0
 8017656:	000b      	movs	r3, r1
 8017658:	9806      	ldr	r0, [sp, #24]
 801765a:	9907      	ldr	r1, [sp, #28]
 801765c:	f7ea fe5c 	bl	8002318 <__aeabi_dsub>
 8017660:	0023      	movs	r3, r4
 8017662:	3330      	adds	r3, #48	; 0x30
 8017664:	7033      	strb	r3, [r6, #0]
 8017666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017668:	9b08      	ldr	r3, [sp, #32]
 801766a:	1c75      	adds	r5, r6, #1
 801766c:	1aeb      	subs	r3, r5, r3
 801766e:	429a      	cmp	r2, r3
 8017670:	d148      	bne.n	8017704 <_dtoa_r+0x6ec>
 8017672:	0002      	movs	r2, r0
 8017674:	000b      	movs	r3, r1
 8017676:	f7e9 fcb7 	bl	8000fe8 <__aeabi_dadd>
 801767a:	9a04      	ldr	r2, [sp, #16]
 801767c:	9b05      	ldr	r3, [sp, #20]
 801767e:	9006      	str	r0, [sp, #24]
 8017680:	9107      	str	r1, [sp, #28]
 8017682:	f7e8 ff05 	bl	8000490 <__aeabi_dcmpgt>
 8017686:	2800      	cmp	r0, #0
 8017688:	d12a      	bne.n	80176e0 <_dtoa_r+0x6c8>
 801768a:	9a04      	ldr	r2, [sp, #16]
 801768c:	9b05      	ldr	r3, [sp, #20]
 801768e:	9806      	ldr	r0, [sp, #24]
 8017690:	9907      	ldr	r1, [sp, #28]
 8017692:	f7e8 fee3 	bl	800045c <__aeabi_dcmpeq>
 8017696:	2800      	cmp	r0, #0
 8017698:	d001      	beq.n	801769e <_dtoa_r+0x686>
 801769a:	07e3      	lsls	r3, r4, #31
 801769c:	d420      	bmi.n	80176e0 <_dtoa_r+0x6c8>
 801769e:	9903      	ldr	r1, [sp, #12]
 80176a0:	9802      	ldr	r0, [sp, #8]
 80176a2:	f000 ff35 	bl	8018510 <_Bfree>
 80176a6:	2300      	movs	r3, #0
 80176a8:	702b      	strb	r3, [r5, #0]
 80176aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80176ac:	3701      	adds	r7, #1
 80176ae:	601f      	str	r7, [r3, #0]
 80176b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d100      	bne.n	80176b8 <_dtoa_r+0x6a0>
 80176b6:	e4e4      	b.n	8017082 <_dtoa_r+0x6a>
 80176b8:	601d      	str	r5, [r3, #0]
 80176ba:	e4e2      	b.n	8017082 <_dtoa_r+0x6a>
 80176bc:	0801c178 	.word	0x0801c178
 80176c0:	3ff00000 	.word	0x3ff00000
 80176c4:	40240000 	.word	0x40240000
 80176c8:	401c0000 	.word	0x401c0000
 80176cc:	fcc00000 	.word	0xfcc00000
 80176d0:	40140000 	.word	0x40140000
 80176d4:	7cc00000 	.word	0x7cc00000
 80176d8:	0801c150 	.word	0x0801c150
 80176dc:	3fe00000 	.word	0x3fe00000
 80176e0:	003e      	movs	r6, r7
 80176e2:	1e6b      	subs	r3, r5, #1
 80176e4:	781a      	ldrb	r2, [r3, #0]
 80176e6:	2a39      	cmp	r2, #57	; 0x39
 80176e8:	d106      	bne.n	80176f8 <_dtoa_r+0x6e0>
 80176ea:	9a08      	ldr	r2, [sp, #32]
 80176ec:	429a      	cmp	r2, r3
 80176ee:	d107      	bne.n	8017700 <_dtoa_r+0x6e8>
 80176f0:	2330      	movs	r3, #48	; 0x30
 80176f2:	7013      	strb	r3, [r2, #0]
 80176f4:	0013      	movs	r3, r2
 80176f6:	3601      	adds	r6, #1
 80176f8:	781a      	ldrb	r2, [r3, #0]
 80176fa:	3201      	adds	r2, #1
 80176fc:	701a      	strb	r2, [r3, #0]
 80176fe:	e78c      	b.n	801761a <_dtoa_r+0x602>
 8017700:	001d      	movs	r5, r3
 8017702:	e7ee      	b.n	80176e2 <_dtoa_r+0x6ca>
 8017704:	2200      	movs	r2, #0
 8017706:	4ba4      	ldr	r3, [pc, #656]	; (8017998 <_dtoa_r+0x980>)
 8017708:	f7ea fb94 	bl	8001e34 <__aeabi_dmul>
 801770c:	2200      	movs	r2, #0
 801770e:	2300      	movs	r3, #0
 8017710:	9006      	str	r0, [sp, #24]
 8017712:	9107      	str	r1, [sp, #28]
 8017714:	002e      	movs	r6, r5
 8017716:	f7e8 fea1 	bl	800045c <__aeabi_dcmpeq>
 801771a:	2800      	cmp	r0, #0
 801771c:	d08b      	beq.n	8017636 <_dtoa_r+0x61e>
 801771e:	e7be      	b.n	801769e <_dtoa_r+0x686>
 8017720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017722:	2a00      	cmp	r2, #0
 8017724:	d100      	bne.n	8017728 <_dtoa_r+0x710>
 8017726:	e0da      	b.n	80178de <_dtoa_r+0x8c6>
 8017728:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801772a:	2a01      	cmp	r2, #1
 801772c:	dd00      	ble.n	8017730 <_dtoa_r+0x718>
 801772e:	e0bd      	b.n	80178ac <_dtoa_r+0x894>
 8017730:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017732:	2a00      	cmp	r2, #0
 8017734:	d100      	bne.n	8017738 <_dtoa_r+0x720>
 8017736:	e0b5      	b.n	80178a4 <_dtoa_r+0x88c>
 8017738:	4a98      	ldr	r2, [pc, #608]	; (801799c <_dtoa_r+0x984>)
 801773a:	189b      	adds	r3, r3, r2
 801773c:	9d04      	ldr	r5, [sp, #16]
 801773e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017740:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017742:	2101      	movs	r1, #1
 8017744:	18d2      	adds	r2, r2, r3
 8017746:	920a      	str	r2, [sp, #40]	; 0x28
 8017748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801774a:	9802      	ldr	r0, [sp, #8]
 801774c:	18d3      	adds	r3, r2, r3
 801774e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017750:	f000 ffad 	bl	80186ae <__i2b>
 8017754:	0006      	movs	r6, r0
 8017756:	2c00      	cmp	r4, #0
 8017758:	dd0e      	ble.n	8017778 <_dtoa_r+0x760>
 801775a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801775c:	2b00      	cmp	r3, #0
 801775e:	dd0b      	ble.n	8017778 <_dtoa_r+0x760>
 8017760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017762:	0023      	movs	r3, r4
 8017764:	4294      	cmp	r4, r2
 8017766:	dd00      	ble.n	801776a <_dtoa_r+0x752>
 8017768:	0013      	movs	r3, r2
 801776a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801776c:	1ae4      	subs	r4, r4, r3
 801776e:	1ad2      	subs	r2, r2, r3
 8017770:	920a      	str	r2, [sp, #40]	; 0x28
 8017772:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017774:	1ad3      	subs	r3, r2, r3
 8017776:	930b      	str	r3, [sp, #44]	; 0x2c
 8017778:	9b04      	ldr	r3, [sp, #16]
 801777a:	2b00      	cmp	r3, #0
 801777c:	d01f      	beq.n	80177be <_dtoa_r+0x7a6>
 801777e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017780:	2b00      	cmp	r3, #0
 8017782:	d100      	bne.n	8017786 <_dtoa_r+0x76e>
 8017784:	e0af      	b.n	80178e6 <_dtoa_r+0x8ce>
 8017786:	2d00      	cmp	r5, #0
 8017788:	d011      	beq.n	80177ae <_dtoa_r+0x796>
 801778a:	0031      	movs	r1, r6
 801778c:	002a      	movs	r2, r5
 801778e:	9802      	ldr	r0, [sp, #8]
 8017790:	f001 f826 	bl	80187e0 <__pow5mult>
 8017794:	9a03      	ldr	r2, [sp, #12]
 8017796:	0001      	movs	r1, r0
 8017798:	0006      	movs	r6, r0
 801779a:	9802      	ldr	r0, [sp, #8]
 801779c:	f000 ff90 	bl	80186c0 <__multiply>
 80177a0:	9903      	ldr	r1, [sp, #12]
 80177a2:	9010      	str	r0, [sp, #64]	; 0x40
 80177a4:	9802      	ldr	r0, [sp, #8]
 80177a6:	f000 feb3 	bl	8018510 <_Bfree>
 80177aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177ac:	9303      	str	r3, [sp, #12]
 80177ae:	9b04      	ldr	r3, [sp, #16]
 80177b0:	1b5a      	subs	r2, r3, r5
 80177b2:	d004      	beq.n	80177be <_dtoa_r+0x7a6>
 80177b4:	9903      	ldr	r1, [sp, #12]
 80177b6:	9802      	ldr	r0, [sp, #8]
 80177b8:	f001 f812 	bl	80187e0 <__pow5mult>
 80177bc:	9003      	str	r0, [sp, #12]
 80177be:	2101      	movs	r1, #1
 80177c0:	9802      	ldr	r0, [sp, #8]
 80177c2:	f000 ff74 	bl	80186ae <__i2b>
 80177c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80177c8:	9004      	str	r0, [sp, #16]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d100      	bne.n	80177d0 <_dtoa_r+0x7b8>
 80177ce:	e1e3      	b.n	8017b98 <_dtoa_r+0xb80>
 80177d0:	001a      	movs	r2, r3
 80177d2:	0001      	movs	r1, r0
 80177d4:	9802      	ldr	r0, [sp, #8]
 80177d6:	f001 f803 	bl	80187e0 <__pow5mult>
 80177da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80177dc:	9004      	str	r0, [sp, #16]
 80177de:	2b01      	cmp	r3, #1
 80177e0:	dd00      	ble.n	80177e4 <_dtoa_r+0x7cc>
 80177e2:	e082      	b.n	80178ea <_dtoa_r+0x8d2>
 80177e4:	2500      	movs	r5, #0
 80177e6:	9b06      	ldr	r3, [sp, #24]
 80177e8:	42ab      	cmp	r3, r5
 80177ea:	d10e      	bne.n	801780a <_dtoa_r+0x7f2>
 80177ec:	9b07      	ldr	r3, [sp, #28]
 80177ee:	031b      	lsls	r3, r3, #12
 80177f0:	42ab      	cmp	r3, r5
 80177f2:	d10a      	bne.n	801780a <_dtoa_r+0x7f2>
 80177f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80177f6:	9a07      	ldr	r2, [sp, #28]
 80177f8:	4213      	tst	r3, r2
 80177fa:	d006      	beq.n	801780a <_dtoa_r+0x7f2>
 80177fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80177fe:	3501      	adds	r5, #1
 8017800:	3301      	adds	r3, #1
 8017802:	930a      	str	r3, [sp, #40]	; 0x28
 8017804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017806:	3301      	adds	r3, #1
 8017808:	930b      	str	r3, [sp, #44]	; 0x2c
 801780a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801780c:	2001      	movs	r0, #1
 801780e:	2b00      	cmp	r3, #0
 8017810:	d16c      	bne.n	80178ec <_dtoa_r+0x8d4>
 8017812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017814:	1818      	adds	r0, r3, r0
 8017816:	231f      	movs	r3, #31
 8017818:	4018      	ands	r0, r3
 801781a:	d07e      	beq.n	801791a <_dtoa_r+0x902>
 801781c:	3301      	adds	r3, #1
 801781e:	1a1b      	subs	r3, r3, r0
 8017820:	2b04      	cmp	r3, #4
 8017822:	dd70      	ble.n	8017906 <_dtoa_r+0x8ee>
 8017824:	231c      	movs	r3, #28
 8017826:	1a18      	subs	r0, r3, r0
 8017828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801782a:	1824      	adds	r4, r4, r0
 801782c:	181b      	adds	r3, r3, r0
 801782e:	930a      	str	r3, [sp, #40]	; 0x28
 8017830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017832:	181b      	adds	r3, r3, r0
 8017834:	930b      	str	r3, [sp, #44]	; 0x2c
 8017836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017838:	2b00      	cmp	r3, #0
 801783a:	dd05      	ble.n	8017848 <_dtoa_r+0x830>
 801783c:	001a      	movs	r2, r3
 801783e:	9903      	ldr	r1, [sp, #12]
 8017840:	9802      	ldr	r0, [sp, #8]
 8017842:	f001 f80f 	bl	8018864 <__lshift>
 8017846:	9003      	str	r0, [sp, #12]
 8017848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801784a:	2b00      	cmp	r3, #0
 801784c:	dd05      	ble.n	801785a <_dtoa_r+0x842>
 801784e:	001a      	movs	r2, r3
 8017850:	9904      	ldr	r1, [sp, #16]
 8017852:	9802      	ldr	r0, [sp, #8]
 8017854:	f001 f806 	bl	8018864 <__lshift>
 8017858:	9004      	str	r0, [sp, #16]
 801785a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801785c:	2b00      	cmp	r3, #0
 801785e:	d05e      	beq.n	801791e <_dtoa_r+0x906>
 8017860:	9904      	ldr	r1, [sp, #16]
 8017862:	9803      	ldr	r0, [sp, #12]
 8017864:	f001 f850 	bl	8018908 <__mcmp>
 8017868:	2800      	cmp	r0, #0
 801786a:	da58      	bge.n	801791e <_dtoa_r+0x906>
 801786c:	2300      	movs	r3, #0
 801786e:	220a      	movs	r2, #10
 8017870:	9903      	ldr	r1, [sp, #12]
 8017872:	9802      	ldr	r0, [sp, #8]
 8017874:	f000 fe56 	bl	8018524 <__multadd>
 8017878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801787a:	3f01      	subs	r7, #1
 801787c:	9003      	str	r0, [sp, #12]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d100      	bne.n	8017884 <_dtoa_r+0x86c>
 8017882:	e190      	b.n	8017ba6 <_dtoa_r+0xb8e>
 8017884:	2300      	movs	r3, #0
 8017886:	0031      	movs	r1, r6
 8017888:	220a      	movs	r2, #10
 801788a:	9802      	ldr	r0, [sp, #8]
 801788c:	f000 fe4a 	bl	8018524 <__multadd>
 8017890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017892:	0006      	movs	r6, r0
 8017894:	2b00      	cmp	r3, #0
 8017896:	dd00      	ble.n	801789a <_dtoa_r+0x882>
 8017898:	e088      	b.n	80179ac <_dtoa_r+0x994>
 801789a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801789c:	2b02      	cmp	r3, #2
 801789e:	dc00      	bgt.n	80178a2 <_dtoa_r+0x88a>
 80178a0:	e084      	b.n	80179ac <_dtoa_r+0x994>
 80178a2:	e044      	b.n	801792e <_dtoa_r+0x916>
 80178a4:	2336      	movs	r3, #54	; 0x36
 80178a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80178a8:	1a9b      	subs	r3, r3, r2
 80178aa:	e747      	b.n	801773c <_dtoa_r+0x724>
 80178ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ae:	1e5d      	subs	r5, r3, #1
 80178b0:	9b04      	ldr	r3, [sp, #16]
 80178b2:	42ab      	cmp	r3, r5
 80178b4:	db08      	blt.n	80178c8 <_dtoa_r+0x8b0>
 80178b6:	1b5d      	subs	r5, r3, r5
 80178b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	da0c      	bge.n	80178d8 <_dtoa_r+0x8c0>
 80178be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178c2:	1a9c      	subs	r4, r3, r2
 80178c4:	2300      	movs	r3, #0
 80178c6:	e73b      	b.n	8017740 <_dtoa_r+0x728>
 80178c8:	9b04      	ldr	r3, [sp, #16]
 80178ca:	9504      	str	r5, [sp, #16]
 80178cc:	1aea      	subs	r2, r5, r3
 80178ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80178d0:	2500      	movs	r5, #0
 80178d2:	189b      	adds	r3, r3, r2
 80178d4:	9311      	str	r3, [sp, #68]	; 0x44
 80178d6:	e7ef      	b.n	80178b8 <_dtoa_r+0x8a0>
 80178d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80178da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178dc:	e730      	b.n	8017740 <_dtoa_r+0x728>
 80178de:	9d04      	ldr	r5, [sp, #16]
 80178e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80178e2:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80178e4:	e737      	b.n	8017756 <_dtoa_r+0x73e>
 80178e6:	9a04      	ldr	r2, [sp, #16]
 80178e8:	e764      	b.n	80177b4 <_dtoa_r+0x79c>
 80178ea:	2500      	movs	r5, #0
 80178ec:	9b04      	ldr	r3, [sp, #16]
 80178ee:	9a04      	ldr	r2, [sp, #16]
 80178f0:	691b      	ldr	r3, [r3, #16]
 80178f2:	9310      	str	r3, [sp, #64]	; 0x40
 80178f4:	3303      	adds	r3, #3
 80178f6:	009b      	lsls	r3, r3, #2
 80178f8:	18d3      	adds	r3, r2, r3
 80178fa:	6858      	ldr	r0, [r3, #4]
 80178fc:	f000 fe8e 	bl	801861c <__hi0bits>
 8017900:	2320      	movs	r3, #32
 8017902:	1a18      	subs	r0, r3, r0
 8017904:	e785      	b.n	8017812 <_dtoa_r+0x7fa>
 8017906:	2b04      	cmp	r3, #4
 8017908:	d095      	beq.n	8017836 <_dtoa_r+0x81e>
 801790a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801790c:	331c      	adds	r3, #28
 801790e:	18d2      	adds	r2, r2, r3
 8017910:	920a      	str	r2, [sp, #40]	; 0x28
 8017912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017914:	18e4      	adds	r4, r4, r3
 8017916:	18d3      	adds	r3, r2, r3
 8017918:	e78c      	b.n	8017834 <_dtoa_r+0x81c>
 801791a:	0003      	movs	r3, r0
 801791c:	e7f5      	b.n	801790a <_dtoa_r+0x8f2>
 801791e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017920:	2b00      	cmp	r3, #0
 8017922:	dc3d      	bgt.n	80179a0 <_dtoa_r+0x988>
 8017924:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017926:	2b02      	cmp	r3, #2
 8017928:	dd3a      	ble.n	80179a0 <_dtoa_r+0x988>
 801792a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801792c:	930c      	str	r3, [sp, #48]	; 0x30
 801792e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017930:	2b00      	cmp	r3, #0
 8017932:	d10c      	bne.n	801794e <_dtoa_r+0x936>
 8017934:	9904      	ldr	r1, [sp, #16]
 8017936:	2205      	movs	r2, #5
 8017938:	9802      	ldr	r0, [sp, #8]
 801793a:	f000 fdf3 	bl	8018524 <__multadd>
 801793e:	9004      	str	r0, [sp, #16]
 8017940:	0001      	movs	r1, r0
 8017942:	9803      	ldr	r0, [sp, #12]
 8017944:	f000 ffe0 	bl	8018908 <__mcmp>
 8017948:	2800      	cmp	r0, #0
 801794a:	dd00      	ble.n	801794e <_dtoa_r+0x936>
 801794c:	e5ad      	b.n	80174aa <_dtoa_r+0x492>
 801794e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017950:	9d08      	ldr	r5, [sp, #32]
 8017952:	43df      	mvns	r7, r3
 8017954:	2300      	movs	r3, #0
 8017956:	9309      	str	r3, [sp, #36]	; 0x24
 8017958:	9904      	ldr	r1, [sp, #16]
 801795a:	9802      	ldr	r0, [sp, #8]
 801795c:	f000 fdd8 	bl	8018510 <_Bfree>
 8017960:	2e00      	cmp	r6, #0
 8017962:	d100      	bne.n	8017966 <_dtoa_r+0x94e>
 8017964:	e69b      	b.n	801769e <_dtoa_r+0x686>
 8017966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017968:	2b00      	cmp	r3, #0
 801796a:	d005      	beq.n	8017978 <_dtoa_r+0x960>
 801796c:	42b3      	cmp	r3, r6
 801796e:	d003      	beq.n	8017978 <_dtoa_r+0x960>
 8017970:	0019      	movs	r1, r3
 8017972:	9802      	ldr	r0, [sp, #8]
 8017974:	f000 fdcc 	bl	8018510 <_Bfree>
 8017978:	0031      	movs	r1, r6
 801797a:	9802      	ldr	r0, [sp, #8]
 801797c:	f000 fdc8 	bl	8018510 <_Bfree>
 8017980:	e68d      	b.n	801769e <_dtoa_r+0x686>
 8017982:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017984:	9304      	str	r3, [sp, #16]
 8017986:	001e      	movs	r6, r3
 8017988:	e7e1      	b.n	801794e <_dtoa_r+0x936>
 801798a:	2300      	movs	r3, #0
 801798c:	e7fa      	b.n	8017984 <_dtoa_r+0x96c>
 801798e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017990:	0037      	movs	r7, r6
 8017992:	9304      	str	r3, [sp, #16]
 8017994:	001e      	movs	r6, r3
 8017996:	e588      	b.n	80174aa <_dtoa_r+0x492>
 8017998:	40240000 	.word	0x40240000
 801799c:	00000433 	.word	0x00000433
 80179a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d100      	bne.n	80179a8 <_dtoa_r+0x990>
 80179a6:	e0b2      	b.n	8017b0e <_dtoa_r+0xaf6>
 80179a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179aa:	930c      	str	r3, [sp, #48]	; 0x30
 80179ac:	2c00      	cmp	r4, #0
 80179ae:	dd05      	ble.n	80179bc <_dtoa_r+0x9a4>
 80179b0:	0031      	movs	r1, r6
 80179b2:	0022      	movs	r2, r4
 80179b4:	9802      	ldr	r0, [sp, #8]
 80179b6:	f000 ff55 	bl	8018864 <__lshift>
 80179ba:	0006      	movs	r6, r0
 80179bc:	0030      	movs	r0, r6
 80179be:	2d00      	cmp	r5, #0
 80179c0:	d011      	beq.n	80179e6 <_dtoa_r+0x9ce>
 80179c2:	6871      	ldr	r1, [r6, #4]
 80179c4:	9802      	ldr	r0, [sp, #8]
 80179c6:	f000 fd7b 	bl	80184c0 <_Balloc>
 80179ca:	0031      	movs	r1, r6
 80179cc:	0004      	movs	r4, r0
 80179ce:	6933      	ldr	r3, [r6, #16]
 80179d0:	310c      	adds	r1, #12
 80179d2:	1c9a      	adds	r2, r3, #2
 80179d4:	0092      	lsls	r2, r2, #2
 80179d6:	300c      	adds	r0, #12
 80179d8:	f7fc fe59 	bl	801468e <memcpy>
 80179dc:	2201      	movs	r2, #1
 80179de:	0021      	movs	r1, r4
 80179e0:	9802      	ldr	r0, [sp, #8]
 80179e2:	f000 ff3f 	bl	8018864 <__lshift>
 80179e6:	9609      	str	r6, [sp, #36]	; 0x24
 80179e8:	0006      	movs	r6, r0
 80179ea:	9b08      	ldr	r3, [sp, #32]
 80179ec:	930a      	str	r3, [sp, #40]	; 0x28
 80179ee:	9904      	ldr	r1, [sp, #16]
 80179f0:	9803      	ldr	r0, [sp, #12]
 80179f2:	f7ff fa8b 	bl	8016f0c <quorem>
 80179f6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80179f8:	900d      	str	r0, [sp, #52]	; 0x34
 80179fa:	0004      	movs	r4, r0
 80179fc:	9803      	ldr	r0, [sp, #12]
 80179fe:	f000 ff83 	bl	8018908 <__mcmp>
 8017a02:	0032      	movs	r2, r6
 8017a04:	9010      	str	r0, [sp, #64]	; 0x40
 8017a06:	9904      	ldr	r1, [sp, #16]
 8017a08:	9802      	ldr	r0, [sp, #8]
 8017a0a:	f000 ff97 	bl	801893c <__mdiff>
 8017a0e:	2301      	movs	r3, #1
 8017a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a12:	68c3      	ldr	r3, [r0, #12]
 8017a14:	3430      	adds	r4, #48	; 0x30
 8017a16:	0005      	movs	r5, r0
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d104      	bne.n	8017a26 <_dtoa_r+0xa0e>
 8017a1c:	0001      	movs	r1, r0
 8017a1e:	9803      	ldr	r0, [sp, #12]
 8017a20:	f000 ff72 	bl	8018908 <__mcmp>
 8017a24:	900b      	str	r0, [sp, #44]	; 0x2c
 8017a26:	0029      	movs	r1, r5
 8017a28:	9802      	ldr	r0, [sp, #8]
 8017a2a:	f000 fd71 	bl	8018510 <_Bfree>
 8017a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017a32:	4313      	orrs	r3, r2
 8017a34:	d10e      	bne.n	8017a54 <_dtoa_r+0xa3c>
 8017a36:	9a06      	ldr	r2, [sp, #24]
 8017a38:	3301      	adds	r3, #1
 8017a3a:	4213      	tst	r3, r2
 8017a3c:	d10a      	bne.n	8017a54 <_dtoa_r+0xa3c>
 8017a3e:	2c39      	cmp	r4, #57	; 0x39
 8017a40:	d026      	beq.n	8017a90 <_dtoa_r+0xa78>
 8017a42:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	dd01      	ble.n	8017a4c <_dtoa_r+0xa34>
 8017a48:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017a4a:	3431      	adds	r4, #49	; 0x31
 8017a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a4e:	1c5d      	adds	r5, r3, #1
 8017a50:	701c      	strb	r4, [r3, #0]
 8017a52:	e781      	b.n	8017958 <_dtoa_r+0x940>
 8017a54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	db07      	blt.n	8017a6a <_dtoa_r+0xa52>
 8017a5a:	001d      	movs	r5, r3
 8017a5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017a5e:	431d      	orrs	r5, r3
 8017a60:	d122      	bne.n	8017aa8 <_dtoa_r+0xa90>
 8017a62:	2301      	movs	r3, #1
 8017a64:	9a06      	ldr	r2, [sp, #24]
 8017a66:	4213      	tst	r3, r2
 8017a68:	d11e      	bne.n	8017aa8 <_dtoa_r+0xa90>
 8017a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	dded      	ble.n	8017a4c <_dtoa_r+0xa34>
 8017a70:	9903      	ldr	r1, [sp, #12]
 8017a72:	2201      	movs	r2, #1
 8017a74:	9802      	ldr	r0, [sp, #8]
 8017a76:	f000 fef5 	bl	8018864 <__lshift>
 8017a7a:	9904      	ldr	r1, [sp, #16]
 8017a7c:	9003      	str	r0, [sp, #12]
 8017a7e:	f000 ff43 	bl	8018908 <__mcmp>
 8017a82:	2800      	cmp	r0, #0
 8017a84:	dc02      	bgt.n	8017a8c <_dtoa_r+0xa74>
 8017a86:	d1e1      	bne.n	8017a4c <_dtoa_r+0xa34>
 8017a88:	07e3      	lsls	r3, r4, #31
 8017a8a:	d5df      	bpl.n	8017a4c <_dtoa_r+0xa34>
 8017a8c:	2c39      	cmp	r4, #57	; 0x39
 8017a8e:	d1db      	bne.n	8017a48 <_dtoa_r+0xa30>
 8017a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a94:	1c5d      	adds	r5, r3, #1
 8017a96:	2339      	movs	r3, #57	; 0x39
 8017a98:	7013      	strb	r3, [r2, #0]
 8017a9a:	1e6b      	subs	r3, r5, #1
 8017a9c:	781a      	ldrb	r2, [r3, #0]
 8017a9e:	2a39      	cmp	r2, #57	; 0x39
 8017aa0:	d067      	beq.n	8017b72 <_dtoa_r+0xb5a>
 8017aa2:	3201      	adds	r2, #1
 8017aa4:	701a      	strb	r2, [r3, #0]
 8017aa6:	e757      	b.n	8017958 <_dtoa_r+0x940>
 8017aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aaa:	1c5d      	adds	r5, r3, #1
 8017aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	dd04      	ble.n	8017abc <_dtoa_r+0xaa4>
 8017ab2:	2c39      	cmp	r4, #57	; 0x39
 8017ab4:	d0ec      	beq.n	8017a90 <_dtoa_r+0xa78>
 8017ab6:	3401      	adds	r4, #1
 8017ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aba:	e7c9      	b.n	8017a50 <_dtoa_r+0xa38>
 8017abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017abe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017ac0:	701c      	strb	r4, [r3, #0]
 8017ac2:	9b08      	ldr	r3, [sp, #32]
 8017ac4:	1aeb      	subs	r3, r5, r3
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	d03e      	beq.n	8017b48 <_dtoa_r+0xb30>
 8017aca:	2300      	movs	r3, #0
 8017acc:	220a      	movs	r2, #10
 8017ace:	9903      	ldr	r1, [sp, #12]
 8017ad0:	9802      	ldr	r0, [sp, #8]
 8017ad2:	f000 fd27 	bl	8018524 <__multadd>
 8017ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ad8:	9003      	str	r0, [sp, #12]
 8017ada:	42b3      	cmp	r3, r6
 8017adc:	d109      	bne.n	8017af2 <_dtoa_r+0xada>
 8017ade:	2300      	movs	r3, #0
 8017ae0:	220a      	movs	r2, #10
 8017ae2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017ae4:	9802      	ldr	r0, [sp, #8]
 8017ae6:	f000 fd1d 	bl	8018524 <__multadd>
 8017aea:	9009      	str	r0, [sp, #36]	; 0x24
 8017aec:	0006      	movs	r6, r0
 8017aee:	950a      	str	r5, [sp, #40]	; 0x28
 8017af0:	e77d      	b.n	80179ee <_dtoa_r+0x9d6>
 8017af2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017af4:	2300      	movs	r3, #0
 8017af6:	220a      	movs	r2, #10
 8017af8:	9802      	ldr	r0, [sp, #8]
 8017afa:	f000 fd13 	bl	8018524 <__multadd>
 8017afe:	2300      	movs	r3, #0
 8017b00:	9009      	str	r0, [sp, #36]	; 0x24
 8017b02:	220a      	movs	r2, #10
 8017b04:	0031      	movs	r1, r6
 8017b06:	9802      	ldr	r0, [sp, #8]
 8017b08:	f000 fd0c 	bl	8018524 <__multadd>
 8017b0c:	e7ee      	b.n	8017aec <_dtoa_r+0xad4>
 8017b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b10:	930c      	str	r3, [sp, #48]	; 0x30
 8017b12:	9b08      	ldr	r3, [sp, #32]
 8017b14:	9306      	str	r3, [sp, #24]
 8017b16:	9904      	ldr	r1, [sp, #16]
 8017b18:	9803      	ldr	r0, [sp, #12]
 8017b1a:	f7ff f9f7 	bl	8016f0c <quorem>
 8017b1e:	9b06      	ldr	r3, [sp, #24]
 8017b20:	3030      	adds	r0, #48	; 0x30
 8017b22:	1c5d      	adds	r5, r3, #1
 8017b24:	7018      	strb	r0, [r3, #0]
 8017b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017b28:	9b08      	ldr	r3, [sp, #32]
 8017b2a:	0004      	movs	r4, r0
 8017b2c:	1aeb      	subs	r3, r5, r3
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	dd08      	ble.n	8017b44 <_dtoa_r+0xb2c>
 8017b32:	2300      	movs	r3, #0
 8017b34:	220a      	movs	r2, #10
 8017b36:	9903      	ldr	r1, [sp, #12]
 8017b38:	9802      	ldr	r0, [sp, #8]
 8017b3a:	f000 fcf3 	bl	8018524 <__multadd>
 8017b3e:	9506      	str	r5, [sp, #24]
 8017b40:	9003      	str	r0, [sp, #12]
 8017b42:	e7e8      	b.n	8017b16 <_dtoa_r+0xafe>
 8017b44:	2300      	movs	r3, #0
 8017b46:	9309      	str	r3, [sp, #36]	; 0x24
 8017b48:	9903      	ldr	r1, [sp, #12]
 8017b4a:	2201      	movs	r2, #1
 8017b4c:	9802      	ldr	r0, [sp, #8]
 8017b4e:	f000 fe89 	bl	8018864 <__lshift>
 8017b52:	9904      	ldr	r1, [sp, #16]
 8017b54:	9003      	str	r0, [sp, #12]
 8017b56:	f000 fed7 	bl	8018908 <__mcmp>
 8017b5a:	2800      	cmp	r0, #0
 8017b5c:	dc9d      	bgt.n	8017a9a <_dtoa_r+0xa82>
 8017b5e:	d101      	bne.n	8017b64 <_dtoa_r+0xb4c>
 8017b60:	07e3      	lsls	r3, r4, #31
 8017b62:	d49a      	bmi.n	8017a9a <_dtoa_r+0xa82>
 8017b64:	1e6b      	subs	r3, r5, #1
 8017b66:	781a      	ldrb	r2, [r3, #0]
 8017b68:	2a30      	cmp	r2, #48	; 0x30
 8017b6a:	d000      	beq.n	8017b6e <_dtoa_r+0xb56>
 8017b6c:	e6f4      	b.n	8017958 <_dtoa_r+0x940>
 8017b6e:	001d      	movs	r5, r3
 8017b70:	e7f8      	b.n	8017b64 <_dtoa_r+0xb4c>
 8017b72:	9a08      	ldr	r2, [sp, #32]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d103      	bne.n	8017b80 <_dtoa_r+0xb68>
 8017b78:	2331      	movs	r3, #49	; 0x31
 8017b7a:	3701      	adds	r7, #1
 8017b7c:	7013      	strb	r3, [r2, #0]
 8017b7e:	e6eb      	b.n	8017958 <_dtoa_r+0x940>
 8017b80:	001d      	movs	r5, r3
 8017b82:	e78a      	b.n	8017a9a <_dtoa_r+0xa82>
 8017b84:	4b0b      	ldr	r3, [pc, #44]	; (8017bb4 <_dtoa_r+0xb9c>)
 8017b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017b88:	9308      	str	r3, [sp, #32]
 8017b8a:	4b0b      	ldr	r3, [pc, #44]	; (8017bb8 <_dtoa_r+0xba0>)
 8017b8c:	2a00      	cmp	r2, #0
 8017b8e:	d001      	beq.n	8017b94 <_dtoa_r+0xb7c>
 8017b90:	f7ff fa75 	bl	801707e <_dtoa_r+0x66>
 8017b94:	f7ff fa75 	bl	8017082 <_dtoa_r+0x6a>
 8017b98:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017b9a:	2b01      	cmp	r3, #1
 8017b9c:	dc00      	bgt.n	8017ba0 <_dtoa_r+0xb88>
 8017b9e:	e621      	b.n	80177e4 <_dtoa_r+0x7cc>
 8017ba0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017ba2:	2001      	movs	r0, #1
 8017ba4:	e635      	b.n	8017812 <_dtoa_r+0x7fa>
 8017ba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	dcb2      	bgt.n	8017b12 <_dtoa_r+0xafa>
 8017bac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017bae:	2b02      	cmp	r3, #2
 8017bb0:	ddaf      	ble.n	8017b12 <_dtoa_r+0xafa>
 8017bb2:	e6bc      	b.n	801792e <_dtoa_r+0x916>
 8017bb4:	0801c13d 	.word	0x0801c13d
 8017bb8:	0801c145 	.word	0x0801c145

08017bbc <__errno>:
 8017bbc:	4b01      	ldr	r3, [pc, #4]	; (8017bc4 <__errno+0x8>)
 8017bbe:	6818      	ldr	r0, [r3, #0]
 8017bc0:	4770      	bx	lr
 8017bc2:	46c0      	nop			; (mov r8, r8)
 8017bc4:	20000118 	.word	0x20000118

08017bc8 <__libc_fini_array>:
 8017bc8:	b570      	push	{r4, r5, r6, lr}
 8017bca:	4d07      	ldr	r5, [pc, #28]	; (8017be8 <__libc_fini_array+0x20>)
 8017bcc:	4c07      	ldr	r4, [pc, #28]	; (8017bec <__libc_fini_array+0x24>)
 8017bce:	1b64      	subs	r4, r4, r5
 8017bd0:	10a4      	asrs	r4, r4, #2
 8017bd2:	2c00      	cmp	r4, #0
 8017bd4:	d102      	bne.n	8017bdc <__libc_fini_array+0x14>
 8017bd6:	f001 f987 	bl	8018ee8 <_fini>
 8017bda:	bd70      	pop	{r4, r5, r6, pc}
 8017bdc:	3c01      	subs	r4, #1
 8017bde:	00a3      	lsls	r3, r4, #2
 8017be0:	58eb      	ldr	r3, [r5, r3]
 8017be2:	4798      	blx	r3
 8017be4:	e7f5      	b.n	8017bd2 <__libc_fini_array+0xa>
 8017be6:	46c0      	nop			; (mov r8, r8)
 8017be8:	0801c25c 	.word	0x0801c25c
 8017bec:	0801c260 	.word	0x0801c260

08017bf0 <_malloc_trim_r>:
 8017bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bf2:	0005      	movs	r5, r0
 8017bf4:	2008      	movs	r0, #8
 8017bf6:	000c      	movs	r4, r1
 8017bf8:	f7ff f95c 	bl	8016eb4 <sysconf>
 8017bfc:	0007      	movs	r7, r0
 8017bfe:	0028      	movs	r0, r5
 8017c00:	f7fc fd56 	bl	80146b0 <__malloc_lock>
 8017c04:	2203      	movs	r2, #3
 8017c06:	4e21      	ldr	r6, [pc, #132]	; (8017c8c <_malloc_trim_r+0x9c>)
 8017c08:	0039      	movs	r1, r7
 8017c0a:	68b3      	ldr	r3, [r6, #8]
 8017c0c:	685b      	ldr	r3, [r3, #4]
 8017c0e:	4393      	bics	r3, r2
 8017c10:	1b18      	subs	r0, r3, r4
 8017c12:	3811      	subs	r0, #17
 8017c14:	19c0      	adds	r0, r0, r7
 8017c16:	9301      	str	r3, [sp, #4]
 8017c18:	f7e8 fa9a 	bl	8000150 <__udivsi3>
 8017c1c:	1e44      	subs	r4, r0, #1
 8017c1e:	437c      	muls	r4, r7
 8017c20:	42a7      	cmp	r7, r4
 8017c22:	dd04      	ble.n	8017c2e <_malloc_trim_r+0x3e>
 8017c24:	0028      	movs	r0, r5
 8017c26:	f7fc fd4b 	bl	80146c0 <__malloc_unlock>
 8017c2a:	2000      	movs	r0, #0
 8017c2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017c2e:	2100      	movs	r1, #0
 8017c30:	0028      	movs	r0, r5
 8017c32:	f7fc ff1d 	bl	8014a70 <_sbrk_r>
 8017c36:	68b3      	ldr	r3, [r6, #8]
 8017c38:	9a01      	ldr	r2, [sp, #4]
 8017c3a:	189b      	adds	r3, r3, r2
 8017c3c:	4298      	cmp	r0, r3
 8017c3e:	d1f1      	bne.n	8017c24 <_malloc_trim_r+0x34>
 8017c40:	4261      	negs	r1, r4
 8017c42:	0028      	movs	r0, r5
 8017c44:	f7fc ff14 	bl	8014a70 <_sbrk_r>
 8017c48:	1c43      	adds	r3, r0, #1
 8017c4a:	d110      	bne.n	8017c6e <_malloc_trim_r+0x7e>
 8017c4c:	2100      	movs	r1, #0
 8017c4e:	0028      	movs	r0, r5
 8017c50:	f7fc ff0e 	bl	8014a70 <_sbrk_r>
 8017c54:	68b2      	ldr	r2, [r6, #8]
 8017c56:	1a81      	subs	r1, r0, r2
 8017c58:	290f      	cmp	r1, #15
 8017c5a:	dde3      	ble.n	8017c24 <_malloc_trim_r+0x34>
 8017c5c:	4b0c      	ldr	r3, [pc, #48]	; (8017c90 <_malloc_trim_r+0xa0>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	1ac0      	subs	r0, r0, r3
 8017c62:	4b0c      	ldr	r3, [pc, #48]	; (8017c94 <_malloc_trim_r+0xa4>)
 8017c64:	6018      	str	r0, [r3, #0]
 8017c66:	2301      	movs	r3, #1
 8017c68:	430b      	orrs	r3, r1
 8017c6a:	6053      	str	r3, [r2, #4]
 8017c6c:	e7da      	b.n	8017c24 <_malloc_trim_r+0x34>
 8017c6e:	68b2      	ldr	r2, [r6, #8]
 8017c70:	2601      	movs	r6, #1
 8017c72:	9b01      	ldr	r3, [sp, #4]
 8017c74:	0028      	movs	r0, r5
 8017c76:	1b1b      	subs	r3, r3, r4
 8017c78:	4333      	orrs	r3, r6
 8017c7a:	6053      	str	r3, [r2, #4]
 8017c7c:	4b05      	ldr	r3, [pc, #20]	; (8017c94 <_malloc_trim_r+0xa4>)
 8017c7e:	681a      	ldr	r2, [r3, #0]
 8017c80:	1b14      	subs	r4, r2, r4
 8017c82:	601c      	str	r4, [r3, #0]
 8017c84:	f7fc fd1c 	bl	80146c0 <__malloc_unlock>
 8017c88:	0030      	movs	r0, r6
 8017c8a:	e7cf      	b.n	8017c2c <_malloc_trim_r+0x3c>
 8017c8c:	200006b4 	.word	0x200006b4
 8017c90:	20000abc 	.word	0x20000abc
 8017c94:	20006d94 	.word	0x20006d94

08017c98 <_free_r>:
 8017c98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017c9a:	1e0d      	subs	r5, r1, #0
 8017c9c:	9001      	str	r0, [sp, #4]
 8017c9e:	d02d      	beq.n	8017cfc <_free_r+0x64>
 8017ca0:	f7fc fd06 	bl	80146b0 <__malloc_lock>
 8017ca4:	2301      	movs	r3, #1
 8017ca6:	0029      	movs	r1, r5
 8017ca8:	469c      	mov	ip, r3
 8017caa:	3908      	subs	r1, #8
 8017cac:	684f      	ldr	r7, [r1, #4]
 8017cae:	4662      	mov	r2, ip
 8017cb0:	003b      	movs	r3, r7
 8017cb2:	4666      	mov	r6, ip
 8017cb4:	4393      	bics	r3, r2
 8017cb6:	18c8      	adds	r0, r1, r3
 8017cb8:	6845      	ldr	r5, [r0, #4]
 8017cba:	3202      	adds	r2, #2
 8017cbc:	4395      	bics	r5, r2
 8017cbe:	4a4a      	ldr	r2, [pc, #296]	; (8017de8 <_free_r+0x150>)
 8017cc0:	4037      	ands	r7, r6
 8017cc2:	6896      	ldr	r6, [r2, #8]
 8017cc4:	4286      	cmp	r6, r0
 8017cc6:	d11a      	bne.n	8017cfe <_free_r+0x66>
 8017cc8:	195b      	adds	r3, r3, r5
 8017cca:	2f00      	cmp	r7, #0
 8017ccc:	d106      	bne.n	8017cdc <_free_r+0x44>
 8017cce:	6808      	ldr	r0, [r1, #0]
 8017cd0:	1a09      	subs	r1, r1, r0
 8017cd2:	688d      	ldr	r5, [r1, #8]
 8017cd4:	181b      	adds	r3, r3, r0
 8017cd6:	68c8      	ldr	r0, [r1, #12]
 8017cd8:	60e8      	str	r0, [r5, #12]
 8017cda:	6085      	str	r5, [r0, #8]
 8017cdc:	2001      	movs	r0, #1
 8017cde:	4318      	orrs	r0, r3
 8017ce0:	6048      	str	r0, [r1, #4]
 8017ce2:	6091      	str	r1, [r2, #8]
 8017ce4:	4a41      	ldr	r2, [pc, #260]	; (8017dec <_free_r+0x154>)
 8017ce6:	6812      	ldr	r2, [r2, #0]
 8017ce8:	429a      	cmp	r2, r3
 8017cea:	d804      	bhi.n	8017cf6 <_free_r+0x5e>
 8017cec:	4b40      	ldr	r3, [pc, #256]	; (8017df0 <_free_r+0x158>)
 8017cee:	9801      	ldr	r0, [sp, #4]
 8017cf0:	6819      	ldr	r1, [r3, #0]
 8017cf2:	f7ff ff7d 	bl	8017bf0 <_malloc_trim_r>
 8017cf6:	9801      	ldr	r0, [sp, #4]
 8017cf8:	f7fc fce2 	bl	80146c0 <__malloc_unlock>
 8017cfc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017cfe:	2600      	movs	r6, #0
 8017d00:	6045      	str	r5, [r0, #4]
 8017d02:	42b7      	cmp	r7, r6
 8017d04:	d109      	bne.n	8017d1a <_free_r+0x82>
 8017d06:	680f      	ldr	r7, [r1, #0]
 8017d08:	4c3a      	ldr	r4, [pc, #232]	; (8017df4 <_free_r+0x15c>)
 8017d0a:	1bc9      	subs	r1, r1, r7
 8017d0c:	19db      	adds	r3, r3, r7
 8017d0e:	688f      	ldr	r7, [r1, #8]
 8017d10:	42a7      	cmp	r7, r4
 8017d12:	d02b      	beq.n	8017d6c <_free_r+0xd4>
 8017d14:	68cc      	ldr	r4, [r1, #12]
 8017d16:	60fc      	str	r4, [r7, #12]
 8017d18:	60a7      	str	r7, [r4, #8]
 8017d1a:	1947      	adds	r7, r0, r5
 8017d1c:	687c      	ldr	r4, [r7, #4]
 8017d1e:	2701      	movs	r7, #1
 8017d20:	423c      	tst	r4, r7
 8017d22:	d10b      	bne.n	8017d3c <_free_r+0xa4>
 8017d24:	195b      	adds	r3, r3, r5
 8017d26:	6885      	ldr	r5, [r0, #8]
 8017d28:	2e00      	cmp	r6, #0
 8017d2a:	d121      	bne.n	8017d70 <_free_r+0xd8>
 8017d2c:	4c31      	ldr	r4, [pc, #196]	; (8017df4 <_free_r+0x15c>)
 8017d2e:	42a5      	cmp	r5, r4
 8017d30:	d11e      	bne.n	8017d70 <_free_r+0xd8>
 8017d32:	003e      	movs	r6, r7
 8017d34:	6151      	str	r1, [r2, #20]
 8017d36:	6111      	str	r1, [r2, #16]
 8017d38:	60cd      	str	r5, [r1, #12]
 8017d3a:	608d      	str	r5, [r1, #8]
 8017d3c:	2001      	movs	r0, #1
 8017d3e:	0005      	movs	r5, r0
 8017d40:	431d      	orrs	r5, r3
 8017d42:	604d      	str	r5, [r1, #4]
 8017d44:	50cb      	str	r3, [r1, r3]
 8017d46:	2e00      	cmp	r6, #0
 8017d48:	d1d5      	bne.n	8017cf6 <_free_r+0x5e>
 8017d4a:	4d2b      	ldr	r5, [pc, #172]	; (8017df8 <_free_r+0x160>)
 8017d4c:	42ab      	cmp	r3, r5
 8017d4e:	d813      	bhi.n	8017d78 <_free_r+0xe0>
 8017d50:	08db      	lsrs	r3, r3, #3
 8017d52:	109d      	asrs	r5, r3, #2
 8017d54:	40a8      	lsls	r0, r5
 8017d56:	6854      	ldr	r4, [r2, #4]
 8017d58:	00db      	lsls	r3, r3, #3
 8017d5a:	4320      	orrs	r0, r4
 8017d5c:	6050      	str	r0, [r2, #4]
 8017d5e:	189a      	adds	r2, r3, r2
 8017d60:	6893      	ldr	r3, [r2, #8]
 8017d62:	60ca      	str	r2, [r1, #12]
 8017d64:	608b      	str	r3, [r1, #8]
 8017d66:	6091      	str	r1, [r2, #8]
 8017d68:	60d9      	str	r1, [r3, #12]
 8017d6a:	e7c4      	b.n	8017cf6 <_free_r+0x5e>
 8017d6c:	4666      	mov	r6, ip
 8017d6e:	e7d4      	b.n	8017d1a <_free_r+0x82>
 8017d70:	68c0      	ldr	r0, [r0, #12]
 8017d72:	60e8      	str	r0, [r5, #12]
 8017d74:	6085      	str	r5, [r0, #8]
 8017d76:	e7e1      	b.n	8017d3c <_free_r+0xa4>
 8017d78:	0a5d      	lsrs	r5, r3, #9
 8017d7a:	2d04      	cmp	r5, #4
 8017d7c:	d812      	bhi.n	8017da4 <_free_r+0x10c>
 8017d7e:	0998      	lsrs	r0, r3, #6
 8017d80:	3038      	adds	r0, #56	; 0x38
 8017d82:	00c6      	lsls	r6, r0, #3
 8017d84:	18b6      	adds	r6, r6, r2
 8017d86:	68b5      	ldr	r5, [r6, #8]
 8017d88:	2703      	movs	r7, #3
 8017d8a:	42ae      	cmp	r6, r5
 8017d8c:	d125      	bne.n	8017dda <_free_r+0x142>
 8017d8e:	2301      	movs	r3, #1
 8017d90:	1080      	asrs	r0, r0, #2
 8017d92:	4083      	lsls	r3, r0
 8017d94:	6850      	ldr	r0, [r2, #4]
 8017d96:	4303      	orrs	r3, r0
 8017d98:	6053      	str	r3, [r2, #4]
 8017d9a:	60ce      	str	r6, [r1, #12]
 8017d9c:	608d      	str	r5, [r1, #8]
 8017d9e:	60b1      	str	r1, [r6, #8]
 8017da0:	60e9      	str	r1, [r5, #12]
 8017da2:	e7a8      	b.n	8017cf6 <_free_r+0x5e>
 8017da4:	2d14      	cmp	r5, #20
 8017da6:	d802      	bhi.n	8017dae <_free_r+0x116>
 8017da8:	0028      	movs	r0, r5
 8017daa:	305b      	adds	r0, #91	; 0x5b
 8017dac:	e7e9      	b.n	8017d82 <_free_r+0xea>
 8017dae:	2d54      	cmp	r5, #84	; 0x54
 8017db0:	d802      	bhi.n	8017db8 <_free_r+0x120>
 8017db2:	0b18      	lsrs	r0, r3, #12
 8017db4:	306e      	adds	r0, #110	; 0x6e
 8017db6:	e7e4      	b.n	8017d82 <_free_r+0xea>
 8017db8:	20aa      	movs	r0, #170	; 0xaa
 8017dba:	0040      	lsls	r0, r0, #1
 8017dbc:	4285      	cmp	r5, r0
 8017dbe:	d802      	bhi.n	8017dc6 <_free_r+0x12e>
 8017dc0:	0bd8      	lsrs	r0, r3, #15
 8017dc2:	3077      	adds	r0, #119	; 0x77
 8017dc4:	e7dd      	b.n	8017d82 <_free_r+0xea>
 8017dc6:	4e0d      	ldr	r6, [pc, #52]	; (8017dfc <_free_r+0x164>)
 8017dc8:	207e      	movs	r0, #126	; 0x7e
 8017dca:	42b5      	cmp	r5, r6
 8017dcc:	d8d9      	bhi.n	8017d82 <_free_r+0xea>
 8017dce:	0c98      	lsrs	r0, r3, #18
 8017dd0:	307c      	adds	r0, #124	; 0x7c
 8017dd2:	e7d6      	b.n	8017d82 <_free_r+0xea>
 8017dd4:	68ad      	ldr	r5, [r5, #8]
 8017dd6:	42ae      	cmp	r6, r5
 8017dd8:	d003      	beq.n	8017de2 <_free_r+0x14a>
 8017dda:	686a      	ldr	r2, [r5, #4]
 8017ddc:	43ba      	bics	r2, r7
 8017dde:	429a      	cmp	r2, r3
 8017de0:	d8f8      	bhi.n	8017dd4 <_free_r+0x13c>
 8017de2:	68ee      	ldr	r6, [r5, #12]
 8017de4:	e7d9      	b.n	8017d9a <_free_r+0x102>
 8017de6:	46c0      	nop			; (mov r8, r8)
 8017de8:	200006b4 	.word	0x200006b4
 8017dec:	20000ac0 	.word	0x20000ac0
 8017df0:	20006dc4 	.word	0x20006dc4
 8017df4:	200006bc 	.word	0x200006bc
 8017df8:	000001ff 	.word	0x000001ff
 8017dfc:	00000554 	.word	0x00000554

08017e00 <rshift>:
 8017e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e02:	0004      	movs	r4, r0
 8017e04:	6905      	ldr	r5, [r0, #16]
 8017e06:	3414      	adds	r4, #20
 8017e08:	114b      	asrs	r3, r1, #5
 8017e0a:	0026      	movs	r6, r4
 8017e0c:	429d      	cmp	r5, r3
 8017e0e:	dd14      	ble.n	8017e3a <rshift+0x3a>
 8017e10:	221f      	movs	r2, #31
 8017e12:	00ad      	lsls	r5, r5, #2
 8017e14:	009b      	lsls	r3, r3, #2
 8017e16:	4011      	ands	r1, r2
 8017e18:	1965      	adds	r5, r4, r5
 8017e1a:	18e3      	adds	r3, r4, r3
 8017e1c:	0022      	movs	r2, r4
 8017e1e:	2900      	cmp	r1, #0
 8017e20:	d01e      	beq.n	8017e60 <rshift+0x60>
 8017e22:	cb04      	ldmia	r3!, {r2}
 8017e24:	2720      	movs	r7, #32
 8017e26:	40ca      	lsrs	r2, r1
 8017e28:	46a4      	mov	ip, r4
 8017e2a:	1a7f      	subs	r7, r7, r1
 8017e2c:	4666      	mov	r6, ip
 8017e2e:	429d      	cmp	r5, r3
 8017e30:	d80b      	bhi.n	8017e4a <rshift+0x4a>
 8017e32:	6032      	str	r2, [r6, #0]
 8017e34:	2a00      	cmp	r2, #0
 8017e36:	d000      	beq.n	8017e3a <rshift+0x3a>
 8017e38:	3604      	adds	r6, #4
 8017e3a:	1b33      	subs	r3, r6, r4
 8017e3c:	109b      	asrs	r3, r3, #2
 8017e3e:	6103      	str	r3, [r0, #16]
 8017e40:	42a6      	cmp	r6, r4
 8017e42:	d101      	bne.n	8017e48 <rshift+0x48>
 8017e44:	2300      	movs	r3, #0
 8017e46:	6143      	str	r3, [r0, #20]
 8017e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e4a:	681e      	ldr	r6, [r3, #0]
 8017e4c:	40be      	lsls	r6, r7
 8017e4e:	4332      	orrs	r2, r6
 8017e50:	4666      	mov	r6, ip
 8017e52:	c604      	stmia	r6!, {r2}
 8017e54:	cb04      	ldmia	r3!, {r2}
 8017e56:	46b4      	mov	ip, r6
 8017e58:	40ca      	lsrs	r2, r1
 8017e5a:	e7e7      	b.n	8017e2c <rshift+0x2c>
 8017e5c:	cb02      	ldmia	r3!, {r1}
 8017e5e:	c202      	stmia	r2!, {r1}
 8017e60:	0016      	movs	r6, r2
 8017e62:	429d      	cmp	r5, r3
 8017e64:	d8fa      	bhi.n	8017e5c <rshift+0x5c>
 8017e66:	e7e8      	b.n	8017e3a <rshift+0x3a>

08017e68 <__hexdig_fun>:
 8017e68:	0003      	movs	r3, r0
 8017e6a:	3b30      	subs	r3, #48	; 0x30
 8017e6c:	2b09      	cmp	r3, #9
 8017e6e:	d803      	bhi.n	8017e78 <__hexdig_fun+0x10>
 8017e70:	3820      	subs	r0, #32
 8017e72:	b2c3      	uxtb	r3, r0
 8017e74:	0018      	movs	r0, r3
 8017e76:	4770      	bx	lr
 8017e78:	0003      	movs	r3, r0
 8017e7a:	3b61      	subs	r3, #97	; 0x61
 8017e7c:	2b05      	cmp	r3, #5
 8017e7e:	d801      	bhi.n	8017e84 <__hexdig_fun+0x1c>
 8017e80:	3847      	subs	r0, #71	; 0x47
 8017e82:	e7f6      	b.n	8017e72 <__hexdig_fun+0xa>
 8017e84:	0002      	movs	r2, r0
 8017e86:	3a41      	subs	r2, #65	; 0x41
 8017e88:	2300      	movs	r3, #0
 8017e8a:	2a05      	cmp	r2, #5
 8017e8c:	d8f2      	bhi.n	8017e74 <__hexdig_fun+0xc>
 8017e8e:	3827      	subs	r0, #39	; 0x27
 8017e90:	e7ef      	b.n	8017e72 <__hexdig_fun+0xa>

08017e92 <__gethex>:
 8017e92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e94:	b08d      	sub	sp, #52	; 0x34
 8017e96:	9005      	str	r0, [sp, #20]
 8017e98:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017e9a:	9109      	str	r1, [sp, #36]	; 0x24
 8017e9c:	9202      	str	r2, [sp, #8]
 8017e9e:	930a      	str	r3, [sp, #40]	; 0x28
 8017ea0:	f000 fadf 	bl	8018462 <__localeconv_l>
 8017ea4:	6803      	ldr	r3, [r0, #0]
 8017ea6:	0018      	movs	r0, r3
 8017ea8:	9307      	str	r3, [sp, #28]
 8017eaa:	f7e8 f935 	bl	8000118 <strlen>
 8017eae:	2202      	movs	r2, #2
 8017eb0:	9b07      	ldr	r3, [sp, #28]
 8017eb2:	4252      	negs	r2, r2
 8017eb4:	181b      	adds	r3, r3, r0
 8017eb6:	3b01      	subs	r3, #1
 8017eb8:	781b      	ldrb	r3, [r3, #0]
 8017eba:	9004      	str	r0, [sp, #16]
 8017ebc:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017ec0:	6819      	ldr	r1, [r3, #0]
 8017ec2:	1c8b      	adds	r3, r1, #2
 8017ec4:	1a52      	subs	r2, r2, r1
 8017ec6:	18d1      	adds	r1, r2, r3
 8017ec8:	9301      	str	r3, [sp, #4]
 8017eca:	9108      	str	r1, [sp, #32]
 8017ecc:	9901      	ldr	r1, [sp, #4]
 8017ece:	3301      	adds	r3, #1
 8017ed0:	7808      	ldrb	r0, [r1, #0]
 8017ed2:	2830      	cmp	r0, #48	; 0x30
 8017ed4:	d0f7      	beq.n	8017ec6 <__gethex+0x34>
 8017ed6:	f7ff ffc7 	bl	8017e68 <__hexdig_fun>
 8017eda:	1e07      	subs	r7, r0, #0
 8017edc:	d000      	beq.n	8017ee0 <__gethex+0x4e>
 8017ede:	e06f      	b.n	8017fc0 <__gethex+0x12e>
 8017ee0:	9a04      	ldr	r2, [sp, #16]
 8017ee2:	9907      	ldr	r1, [sp, #28]
 8017ee4:	9801      	ldr	r0, [sp, #4]
 8017ee6:	f7fc fe4b 	bl	8014b80 <strncmp>
 8017eea:	2800      	cmp	r0, #0
 8017eec:	d000      	beq.n	8017ef0 <__gethex+0x5e>
 8017eee:	e06d      	b.n	8017fcc <__gethex+0x13a>
 8017ef0:	9b01      	ldr	r3, [sp, #4]
 8017ef2:	9a04      	ldr	r2, [sp, #16]
 8017ef4:	189c      	adds	r4, r3, r2
 8017ef6:	7820      	ldrb	r0, [r4, #0]
 8017ef8:	f7ff ffb6 	bl	8017e68 <__hexdig_fun>
 8017efc:	2800      	cmp	r0, #0
 8017efe:	d069      	beq.n	8017fd4 <__gethex+0x142>
 8017f00:	9401      	str	r4, [sp, #4]
 8017f02:	9b01      	ldr	r3, [sp, #4]
 8017f04:	7818      	ldrb	r0, [r3, #0]
 8017f06:	2830      	cmp	r0, #48	; 0x30
 8017f08:	d009      	beq.n	8017f1e <__gethex+0x8c>
 8017f0a:	f7ff ffad 	bl	8017e68 <__hexdig_fun>
 8017f0e:	4243      	negs	r3, r0
 8017f10:	4143      	adcs	r3, r0
 8017f12:	9303      	str	r3, [sp, #12]
 8017f14:	2301      	movs	r3, #1
 8017f16:	0026      	movs	r6, r4
 8017f18:	9308      	str	r3, [sp, #32]
 8017f1a:	9c01      	ldr	r4, [sp, #4]
 8017f1c:	e004      	b.n	8017f28 <__gethex+0x96>
 8017f1e:	9b01      	ldr	r3, [sp, #4]
 8017f20:	3301      	adds	r3, #1
 8017f22:	9301      	str	r3, [sp, #4]
 8017f24:	e7ed      	b.n	8017f02 <__gethex+0x70>
 8017f26:	3401      	adds	r4, #1
 8017f28:	7820      	ldrb	r0, [r4, #0]
 8017f2a:	f7ff ff9d 	bl	8017e68 <__hexdig_fun>
 8017f2e:	2800      	cmp	r0, #0
 8017f30:	d1f9      	bne.n	8017f26 <__gethex+0x94>
 8017f32:	9a04      	ldr	r2, [sp, #16]
 8017f34:	9907      	ldr	r1, [sp, #28]
 8017f36:	0020      	movs	r0, r4
 8017f38:	f7fc fe22 	bl	8014b80 <strncmp>
 8017f3c:	2800      	cmp	r0, #0
 8017f3e:	d109      	bne.n	8017f54 <__gethex+0xc2>
 8017f40:	2e00      	cmp	r6, #0
 8017f42:	d10a      	bne.n	8017f5a <__gethex+0xc8>
 8017f44:	9b04      	ldr	r3, [sp, #16]
 8017f46:	18e4      	adds	r4, r4, r3
 8017f48:	0026      	movs	r6, r4
 8017f4a:	7820      	ldrb	r0, [r4, #0]
 8017f4c:	f7ff ff8c 	bl	8017e68 <__hexdig_fun>
 8017f50:	2800      	cmp	r0, #0
 8017f52:	d139      	bne.n	8017fc8 <__gethex+0x136>
 8017f54:	2700      	movs	r7, #0
 8017f56:	42be      	cmp	r6, r7
 8017f58:	d001      	beq.n	8017f5e <__gethex+0xcc>
 8017f5a:	1b37      	subs	r7, r6, r4
 8017f5c:	00bf      	lsls	r7, r7, #2
 8017f5e:	7823      	ldrb	r3, [r4, #0]
 8017f60:	2b50      	cmp	r3, #80	; 0x50
 8017f62:	d001      	beq.n	8017f68 <__gethex+0xd6>
 8017f64:	2b70      	cmp	r3, #112	; 0x70
 8017f66:	d142      	bne.n	8017fee <__gethex+0x15c>
 8017f68:	7863      	ldrb	r3, [r4, #1]
 8017f6a:	2b2b      	cmp	r3, #43	; 0x2b
 8017f6c:	d034      	beq.n	8017fd8 <__gethex+0x146>
 8017f6e:	2b2d      	cmp	r3, #45	; 0x2d
 8017f70:	d036      	beq.n	8017fe0 <__gethex+0x14e>
 8017f72:	2300      	movs	r3, #0
 8017f74:	1c66      	adds	r6, r4, #1
 8017f76:	9306      	str	r3, [sp, #24]
 8017f78:	7830      	ldrb	r0, [r6, #0]
 8017f7a:	f7ff ff75 	bl	8017e68 <__hexdig_fun>
 8017f7e:	1e43      	subs	r3, r0, #1
 8017f80:	b2db      	uxtb	r3, r3
 8017f82:	2b18      	cmp	r3, #24
 8017f84:	d833      	bhi.n	8017fee <__gethex+0x15c>
 8017f86:	3810      	subs	r0, #16
 8017f88:	0005      	movs	r5, r0
 8017f8a:	3601      	adds	r6, #1
 8017f8c:	7830      	ldrb	r0, [r6, #0]
 8017f8e:	f7ff ff6b 	bl	8017e68 <__hexdig_fun>
 8017f92:	1e43      	subs	r3, r0, #1
 8017f94:	b2db      	uxtb	r3, r3
 8017f96:	2b18      	cmp	r3, #24
 8017f98:	d924      	bls.n	8017fe4 <__gethex+0x152>
 8017f9a:	9b06      	ldr	r3, [sp, #24]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d000      	beq.n	8017fa2 <__gethex+0x110>
 8017fa0:	426d      	negs	r5, r5
 8017fa2:	197f      	adds	r7, r7, r5
 8017fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fa6:	601e      	str	r6, [r3, #0]
 8017fa8:	9b03      	ldr	r3, [sp, #12]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d021      	beq.n	8017ff2 <__gethex+0x160>
 8017fae:	9b08      	ldr	r3, [sp, #32]
 8017fb0:	2606      	movs	r6, #6
 8017fb2:	425a      	negs	r2, r3
 8017fb4:	4153      	adcs	r3, r2
 8017fb6:	425b      	negs	r3, r3
 8017fb8:	401e      	ands	r6, r3
 8017fba:	0030      	movs	r0, r6
 8017fbc:	b00d      	add	sp, #52	; 0x34
 8017fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	9303      	str	r3, [sp, #12]
 8017fc4:	001e      	movs	r6, r3
 8017fc6:	e7a8      	b.n	8017f1a <__gethex+0x88>
 8017fc8:	3401      	adds	r4, #1
 8017fca:	e7be      	b.n	8017f4a <__gethex+0xb8>
 8017fcc:	9c01      	ldr	r4, [sp, #4]
 8017fce:	2301      	movs	r3, #1
 8017fd0:	9303      	str	r3, [sp, #12]
 8017fd2:	e7c4      	b.n	8017f5e <__gethex+0xcc>
 8017fd4:	0007      	movs	r7, r0
 8017fd6:	e7fa      	b.n	8017fce <__gethex+0x13c>
 8017fd8:	2300      	movs	r3, #0
 8017fda:	9306      	str	r3, [sp, #24]
 8017fdc:	1ca6      	adds	r6, r4, #2
 8017fde:	e7cb      	b.n	8017f78 <__gethex+0xe6>
 8017fe0:	2301      	movs	r3, #1
 8017fe2:	e7fa      	b.n	8017fda <__gethex+0x148>
 8017fe4:	230a      	movs	r3, #10
 8017fe6:	435d      	muls	r5, r3
 8017fe8:	182d      	adds	r5, r5, r0
 8017fea:	3d10      	subs	r5, #16
 8017fec:	e7cd      	b.n	8017f8a <__gethex+0xf8>
 8017fee:	0026      	movs	r6, r4
 8017ff0:	e7d8      	b.n	8017fa4 <__gethex+0x112>
 8017ff2:	9b01      	ldr	r3, [sp, #4]
 8017ff4:	9903      	ldr	r1, [sp, #12]
 8017ff6:	1ae3      	subs	r3, r4, r3
 8017ff8:	3b01      	subs	r3, #1
 8017ffa:	2b07      	cmp	r3, #7
 8017ffc:	dc47      	bgt.n	801808e <__gethex+0x1fc>
 8017ffe:	9805      	ldr	r0, [sp, #20]
 8018000:	f000 fa5e 	bl	80184c0 <_Balloc>
 8018004:	0003      	movs	r3, r0
 8018006:	3314      	adds	r3, #20
 8018008:	9303      	str	r3, [sp, #12]
 801800a:	9308      	str	r3, [sp, #32]
 801800c:	2300      	movs	r3, #0
 801800e:	0005      	movs	r5, r0
 8018010:	001e      	movs	r6, r3
 8018012:	9306      	str	r3, [sp, #24]
 8018014:	9b01      	ldr	r3, [sp, #4]
 8018016:	42a3      	cmp	r3, r4
 8018018:	d33c      	bcc.n	8018094 <__gethex+0x202>
 801801a:	9c08      	ldr	r4, [sp, #32]
 801801c:	9b03      	ldr	r3, [sp, #12]
 801801e:	c440      	stmia	r4!, {r6}
 8018020:	1ae4      	subs	r4, r4, r3
 8018022:	10a4      	asrs	r4, r4, #2
 8018024:	612c      	str	r4, [r5, #16]
 8018026:	0030      	movs	r0, r6
 8018028:	f000 faf8 	bl	801861c <__hi0bits>
 801802c:	9b02      	ldr	r3, [sp, #8]
 801802e:	0164      	lsls	r4, r4, #5
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	1a26      	subs	r6, r4, r0
 8018034:	9301      	str	r3, [sp, #4]
 8018036:	429e      	cmp	r6, r3
 8018038:	dd5f      	ble.n	80180fa <__gethex+0x268>
 801803a:	1af6      	subs	r6, r6, r3
 801803c:	0031      	movs	r1, r6
 801803e:	0028      	movs	r0, r5
 8018040:	f000 fde3 	bl	8018c0a <__any_on>
 8018044:	1e04      	subs	r4, r0, #0
 8018046:	d00f      	beq.n	8018068 <__gethex+0x1d6>
 8018048:	2401      	movs	r4, #1
 801804a:	211f      	movs	r1, #31
 801804c:	0020      	movs	r0, r4
 801804e:	1e73      	subs	r3, r6, #1
 8018050:	4019      	ands	r1, r3
 8018052:	4088      	lsls	r0, r1
 8018054:	0001      	movs	r1, r0
 8018056:	115a      	asrs	r2, r3, #5
 8018058:	9803      	ldr	r0, [sp, #12]
 801805a:	0092      	lsls	r2, r2, #2
 801805c:	5812      	ldr	r2, [r2, r0]
 801805e:	420a      	tst	r2, r1
 8018060:	d002      	beq.n	8018068 <__gethex+0x1d6>
 8018062:	42a3      	cmp	r3, r4
 8018064:	dc41      	bgt.n	80180ea <__gethex+0x258>
 8018066:	2402      	movs	r4, #2
 8018068:	0031      	movs	r1, r6
 801806a:	0028      	movs	r0, r5
 801806c:	f7ff fec8 	bl	8017e00 <rshift>
 8018070:	19bf      	adds	r7, r7, r6
 8018072:	9b02      	ldr	r3, [sp, #8]
 8018074:	689b      	ldr	r3, [r3, #8]
 8018076:	9304      	str	r3, [sp, #16]
 8018078:	42bb      	cmp	r3, r7
 801807a:	da4e      	bge.n	801811a <__gethex+0x288>
 801807c:	0029      	movs	r1, r5
 801807e:	9805      	ldr	r0, [sp, #20]
 8018080:	f000 fa46 	bl	8018510 <_Bfree>
 8018084:	2300      	movs	r3, #0
 8018086:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018088:	26a3      	movs	r6, #163	; 0xa3
 801808a:	6013      	str	r3, [r2, #0]
 801808c:	e795      	b.n	8017fba <__gethex+0x128>
 801808e:	3101      	adds	r1, #1
 8018090:	105b      	asrs	r3, r3, #1
 8018092:	e7b2      	b.n	8017ffa <__gethex+0x168>
 8018094:	1e63      	subs	r3, r4, #1
 8018096:	9309      	str	r3, [sp, #36]	; 0x24
 8018098:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801809a:	781b      	ldrb	r3, [r3, #0]
 801809c:	4293      	cmp	r3, r2
 801809e:	d015      	beq.n	80180cc <__gethex+0x23a>
 80180a0:	9b06      	ldr	r3, [sp, #24]
 80180a2:	2b20      	cmp	r3, #32
 80180a4:	d105      	bne.n	80180b2 <__gethex+0x220>
 80180a6:	9b08      	ldr	r3, [sp, #32]
 80180a8:	601e      	str	r6, [r3, #0]
 80180aa:	2600      	movs	r6, #0
 80180ac:	3304      	adds	r3, #4
 80180ae:	9308      	str	r3, [sp, #32]
 80180b0:	9606      	str	r6, [sp, #24]
 80180b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180b4:	7818      	ldrb	r0, [r3, #0]
 80180b6:	f7ff fed7 	bl	8017e68 <__hexdig_fun>
 80180ba:	230f      	movs	r3, #15
 80180bc:	4018      	ands	r0, r3
 80180be:	9b06      	ldr	r3, [sp, #24]
 80180c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80180c2:	4098      	lsls	r0, r3
 80180c4:	3304      	adds	r3, #4
 80180c6:	4306      	orrs	r6, r0
 80180c8:	9306      	str	r3, [sp, #24]
 80180ca:	e7a3      	b.n	8018014 <__gethex+0x182>
 80180cc:	2301      	movs	r3, #1
 80180ce:	9a04      	ldr	r2, [sp, #16]
 80180d0:	1a9c      	subs	r4, r3, r2
 80180d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180d4:	191c      	adds	r4, r3, r4
 80180d6:	9b01      	ldr	r3, [sp, #4]
 80180d8:	429c      	cmp	r4, r3
 80180da:	d3e1      	bcc.n	80180a0 <__gethex+0x20e>
 80180dc:	9907      	ldr	r1, [sp, #28]
 80180de:	0020      	movs	r0, r4
 80180e0:	f7fc fd4e 	bl	8014b80 <strncmp>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	d1db      	bne.n	80180a0 <__gethex+0x20e>
 80180e8:	e794      	b.n	8018014 <__gethex+0x182>
 80180ea:	1eb1      	subs	r1, r6, #2
 80180ec:	0028      	movs	r0, r5
 80180ee:	f000 fd8c 	bl	8018c0a <__any_on>
 80180f2:	2800      	cmp	r0, #0
 80180f4:	d0b7      	beq.n	8018066 <__gethex+0x1d4>
 80180f6:	2403      	movs	r4, #3
 80180f8:	e7b6      	b.n	8018068 <__gethex+0x1d6>
 80180fa:	9b01      	ldr	r3, [sp, #4]
 80180fc:	2400      	movs	r4, #0
 80180fe:	429e      	cmp	r6, r3
 8018100:	dab7      	bge.n	8018072 <__gethex+0x1e0>
 8018102:	1b9e      	subs	r6, r3, r6
 8018104:	0029      	movs	r1, r5
 8018106:	0032      	movs	r2, r6
 8018108:	9805      	ldr	r0, [sp, #20]
 801810a:	f000 fbab 	bl	8018864 <__lshift>
 801810e:	0003      	movs	r3, r0
 8018110:	3314      	adds	r3, #20
 8018112:	0005      	movs	r5, r0
 8018114:	1bbf      	subs	r7, r7, r6
 8018116:	9303      	str	r3, [sp, #12]
 8018118:	e7ab      	b.n	8018072 <__gethex+0x1e0>
 801811a:	9b02      	ldr	r3, [sp, #8]
 801811c:	685e      	ldr	r6, [r3, #4]
 801811e:	42be      	cmp	r6, r7
 8018120:	dd6b      	ble.n	80181fa <__gethex+0x368>
 8018122:	9b01      	ldr	r3, [sp, #4]
 8018124:	1bf6      	subs	r6, r6, r7
 8018126:	42b3      	cmp	r3, r6
 8018128:	dc32      	bgt.n	8018190 <__gethex+0x2fe>
 801812a:	9b02      	ldr	r3, [sp, #8]
 801812c:	68db      	ldr	r3, [r3, #12]
 801812e:	2b02      	cmp	r3, #2
 8018130:	d026      	beq.n	8018180 <__gethex+0x2ee>
 8018132:	2b03      	cmp	r3, #3
 8018134:	d028      	beq.n	8018188 <__gethex+0x2f6>
 8018136:	2b01      	cmp	r3, #1
 8018138:	d119      	bne.n	801816e <__gethex+0x2dc>
 801813a:	9b01      	ldr	r3, [sp, #4]
 801813c:	42b3      	cmp	r3, r6
 801813e:	d116      	bne.n	801816e <__gethex+0x2dc>
 8018140:	2b01      	cmp	r3, #1
 8018142:	dc0d      	bgt.n	8018160 <__gethex+0x2ce>
 8018144:	9b02      	ldr	r3, [sp, #8]
 8018146:	2662      	movs	r6, #98	; 0x62
 8018148:	685b      	ldr	r3, [r3, #4]
 801814a:	9301      	str	r3, [sp, #4]
 801814c:	9a01      	ldr	r2, [sp, #4]
 801814e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018150:	601a      	str	r2, [r3, #0]
 8018152:	2301      	movs	r3, #1
 8018154:	9a03      	ldr	r2, [sp, #12]
 8018156:	612b      	str	r3, [r5, #16]
 8018158:	6013      	str	r3, [r2, #0]
 801815a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801815c:	601d      	str	r5, [r3, #0]
 801815e:	e72c      	b.n	8017fba <__gethex+0x128>
 8018160:	9901      	ldr	r1, [sp, #4]
 8018162:	0028      	movs	r0, r5
 8018164:	3901      	subs	r1, #1
 8018166:	f000 fd50 	bl	8018c0a <__any_on>
 801816a:	2800      	cmp	r0, #0
 801816c:	d1ea      	bne.n	8018144 <__gethex+0x2b2>
 801816e:	0029      	movs	r1, r5
 8018170:	9805      	ldr	r0, [sp, #20]
 8018172:	f000 f9cd 	bl	8018510 <_Bfree>
 8018176:	2300      	movs	r3, #0
 8018178:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801817a:	2650      	movs	r6, #80	; 0x50
 801817c:	6013      	str	r3, [r2, #0]
 801817e:	e71c      	b.n	8017fba <__gethex+0x128>
 8018180:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018182:	2b00      	cmp	r3, #0
 8018184:	d0de      	beq.n	8018144 <__gethex+0x2b2>
 8018186:	e7f2      	b.n	801816e <__gethex+0x2dc>
 8018188:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801818a:	2b00      	cmp	r3, #0
 801818c:	d1da      	bne.n	8018144 <__gethex+0x2b2>
 801818e:	e7ee      	b.n	801816e <__gethex+0x2dc>
 8018190:	1e77      	subs	r7, r6, #1
 8018192:	2c00      	cmp	r4, #0
 8018194:	d12f      	bne.n	80181f6 <__gethex+0x364>
 8018196:	2f00      	cmp	r7, #0
 8018198:	d004      	beq.n	80181a4 <__gethex+0x312>
 801819a:	0039      	movs	r1, r7
 801819c:	0028      	movs	r0, r5
 801819e:	f000 fd34 	bl	8018c0a <__any_on>
 80181a2:	0004      	movs	r4, r0
 80181a4:	231f      	movs	r3, #31
 80181a6:	117a      	asrs	r2, r7, #5
 80181a8:	401f      	ands	r7, r3
 80181aa:	3b1e      	subs	r3, #30
 80181ac:	40bb      	lsls	r3, r7
 80181ae:	9903      	ldr	r1, [sp, #12]
 80181b0:	0092      	lsls	r2, r2, #2
 80181b2:	5852      	ldr	r2, [r2, r1]
 80181b4:	421a      	tst	r2, r3
 80181b6:	d001      	beq.n	80181bc <__gethex+0x32a>
 80181b8:	2302      	movs	r3, #2
 80181ba:	431c      	orrs	r4, r3
 80181bc:	9b01      	ldr	r3, [sp, #4]
 80181be:	0031      	movs	r1, r6
 80181c0:	1b9b      	subs	r3, r3, r6
 80181c2:	2602      	movs	r6, #2
 80181c4:	0028      	movs	r0, r5
 80181c6:	9301      	str	r3, [sp, #4]
 80181c8:	f7ff fe1a 	bl	8017e00 <rshift>
 80181cc:	9b02      	ldr	r3, [sp, #8]
 80181ce:	685f      	ldr	r7, [r3, #4]
 80181d0:	2c00      	cmp	r4, #0
 80181d2:	d040      	beq.n	8018256 <__gethex+0x3c4>
 80181d4:	9b02      	ldr	r3, [sp, #8]
 80181d6:	68db      	ldr	r3, [r3, #12]
 80181d8:	2b02      	cmp	r3, #2
 80181da:	d010      	beq.n	80181fe <__gethex+0x36c>
 80181dc:	2b03      	cmp	r3, #3
 80181de:	d012      	beq.n	8018206 <__gethex+0x374>
 80181e0:	2b01      	cmp	r3, #1
 80181e2:	d106      	bne.n	80181f2 <__gethex+0x360>
 80181e4:	07a2      	lsls	r2, r4, #30
 80181e6:	d504      	bpl.n	80181f2 <__gethex+0x360>
 80181e8:	9a03      	ldr	r2, [sp, #12]
 80181ea:	6812      	ldr	r2, [r2, #0]
 80181ec:	4314      	orrs	r4, r2
 80181ee:	421c      	tst	r4, r3
 80181f0:	d10c      	bne.n	801820c <__gethex+0x37a>
 80181f2:	2310      	movs	r3, #16
 80181f4:	e02e      	b.n	8018254 <__gethex+0x3c2>
 80181f6:	2401      	movs	r4, #1
 80181f8:	e7d4      	b.n	80181a4 <__gethex+0x312>
 80181fa:	2601      	movs	r6, #1
 80181fc:	e7e8      	b.n	80181d0 <__gethex+0x33e>
 80181fe:	2301      	movs	r3, #1
 8018200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018202:	1a9b      	subs	r3, r3, r2
 8018204:	9313      	str	r3, [sp, #76]	; 0x4c
 8018206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018208:	2b00      	cmp	r3, #0
 801820a:	d0f2      	beq.n	80181f2 <__gethex+0x360>
 801820c:	692c      	ldr	r4, [r5, #16]
 801820e:	00a3      	lsls	r3, r4, #2
 8018210:	9304      	str	r3, [sp, #16]
 8018212:	002b      	movs	r3, r5
 8018214:	00a2      	lsls	r2, r4, #2
 8018216:	3314      	adds	r3, #20
 8018218:	1899      	adds	r1, r3, r2
 801821a:	2200      	movs	r2, #0
 801821c:	4694      	mov	ip, r2
 801821e:	681a      	ldr	r2, [r3, #0]
 8018220:	1c50      	adds	r0, r2, #1
 8018222:	d01d      	beq.n	8018260 <__gethex+0x3ce>
 8018224:	3201      	adds	r2, #1
 8018226:	601a      	str	r2, [r3, #0]
 8018228:	002b      	movs	r3, r5
 801822a:	3314      	adds	r3, #20
 801822c:	2e02      	cmp	r6, #2
 801822e:	d13a      	bne.n	80182a6 <__gethex+0x414>
 8018230:	9a02      	ldr	r2, [sp, #8]
 8018232:	9901      	ldr	r1, [sp, #4]
 8018234:	6812      	ldr	r2, [r2, #0]
 8018236:	3a01      	subs	r2, #1
 8018238:	428a      	cmp	r2, r1
 801823a:	d10a      	bne.n	8018252 <__gethex+0x3c0>
 801823c:	114a      	asrs	r2, r1, #5
 801823e:	211f      	movs	r1, #31
 8018240:	9801      	ldr	r0, [sp, #4]
 8018242:	0092      	lsls	r2, r2, #2
 8018244:	4001      	ands	r1, r0
 8018246:	2001      	movs	r0, #1
 8018248:	0004      	movs	r4, r0
 801824a:	408c      	lsls	r4, r1
 801824c:	58d3      	ldr	r3, [r2, r3]
 801824e:	4223      	tst	r3, r4
 8018250:	d148      	bne.n	80182e4 <__gethex+0x452>
 8018252:	2320      	movs	r3, #32
 8018254:	431e      	orrs	r6, r3
 8018256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018258:	601d      	str	r5, [r3, #0]
 801825a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801825c:	601f      	str	r7, [r3, #0]
 801825e:	e6ac      	b.n	8017fba <__gethex+0x128>
 8018260:	4662      	mov	r2, ip
 8018262:	c304      	stmia	r3!, {r2}
 8018264:	4299      	cmp	r1, r3
 8018266:	d8da      	bhi.n	801821e <__gethex+0x38c>
 8018268:	68ab      	ldr	r3, [r5, #8]
 801826a:	429c      	cmp	r4, r3
 801826c:	db12      	blt.n	8018294 <__gethex+0x402>
 801826e:	686b      	ldr	r3, [r5, #4]
 8018270:	9805      	ldr	r0, [sp, #20]
 8018272:	1c59      	adds	r1, r3, #1
 8018274:	f000 f924 	bl	80184c0 <_Balloc>
 8018278:	0029      	movs	r1, r5
 801827a:	692b      	ldr	r3, [r5, #16]
 801827c:	9003      	str	r0, [sp, #12]
 801827e:	1c9a      	adds	r2, r3, #2
 8018280:	0092      	lsls	r2, r2, #2
 8018282:	310c      	adds	r1, #12
 8018284:	300c      	adds	r0, #12
 8018286:	f7fc fa02 	bl	801468e <memcpy>
 801828a:	0029      	movs	r1, r5
 801828c:	9805      	ldr	r0, [sp, #20]
 801828e:	f000 f93f 	bl	8018510 <_Bfree>
 8018292:	9d03      	ldr	r5, [sp, #12]
 8018294:	692b      	ldr	r3, [r5, #16]
 8018296:	1c5a      	adds	r2, r3, #1
 8018298:	612a      	str	r2, [r5, #16]
 801829a:	2201      	movs	r2, #1
 801829c:	3304      	adds	r3, #4
 801829e:	009b      	lsls	r3, r3, #2
 80182a0:	18eb      	adds	r3, r5, r3
 80182a2:	605a      	str	r2, [r3, #4]
 80182a4:	e7c0      	b.n	8018228 <__gethex+0x396>
 80182a6:	692a      	ldr	r2, [r5, #16]
 80182a8:	42a2      	cmp	r2, r4
 80182aa:	dd0a      	ble.n	80182c2 <__gethex+0x430>
 80182ac:	2101      	movs	r1, #1
 80182ae:	0028      	movs	r0, r5
 80182b0:	f7ff fda6 	bl	8017e00 <rshift>
 80182b4:	9b02      	ldr	r3, [sp, #8]
 80182b6:	3701      	adds	r7, #1
 80182b8:	689b      	ldr	r3, [r3, #8]
 80182ba:	2601      	movs	r6, #1
 80182bc:	42bb      	cmp	r3, r7
 80182be:	dac8      	bge.n	8018252 <__gethex+0x3c0>
 80182c0:	e6dc      	b.n	801807c <__gethex+0x1ea>
 80182c2:	241f      	movs	r4, #31
 80182c4:	9a01      	ldr	r2, [sp, #4]
 80182c6:	2601      	movs	r6, #1
 80182c8:	4022      	ands	r2, r4
 80182ca:	1e14      	subs	r4, r2, #0
 80182cc:	d0c1      	beq.n	8018252 <__gethex+0x3c0>
 80182ce:	9a04      	ldr	r2, [sp, #16]
 80182d0:	189b      	adds	r3, r3, r2
 80182d2:	3b04      	subs	r3, #4
 80182d4:	6818      	ldr	r0, [r3, #0]
 80182d6:	f000 f9a1 	bl	801861c <__hi0bits>
 80182da:	2120      	movs	r1, #32
 80182dc:	1b0c      	subs	r4, r1, r4
 80182de:	42a0      	cmp	r0, r4
 80182e0:	dbe4      	blt.n	80182ac <__gethex+0x41a>
 80182e2:	e7b6      	b.n	8018252 <__gethex+0x3c0>
 80182e4:	0006      	movs	r6, r0
 80182e6:	e7b4      	b.n	8018252 <__gethex+0x3c0>

080182e8 <L_shift>:
 80182e8:	2308      	movs	r3, #8
 80182ea:	b570      	push	{r4, r5, r6, lr}
 80182ec:	2520      	movs	r5, #32
 80182ee:	1a9a      	subs	r2, r3, r2
 80182f0:	0092      	lsls	r2, r2, #2
 80182f2:	1aad      	subs	r5, r5, r2
 80182f4:	6843      	ldr	r3, [r0, #4]
 80182f6:	6806      	ldr	r6, [r0, #0]
 80182f8:	001c      	movs	r4, r3
 80182fa:	40ac      	lsls	r4, r5
 80182fc:	40d3      	lsrs	r3, r2
 80182fe:	4334      	orrs	r4, r6
 8018300:	6004      	str	r4, [r0, #0]
 8018302:	6043      	str	r3, [r0, #4]
 8018304:	3004      	adds	r0, #4
 8018306:	4288      	cmp	r0, r1
 8018308:	d3f4      	bcc.n	80182f4 <L_shift+0xc>
 801830a:	bd70      	pop	{r4, r5, r6, pc}

0801830c <__match>:
 801830c:	b530      	push	{r4, r5, lr}
 801830e:	6803      	ldr	r3, [r0, #0]
 8018310:	780c      	ldrb	r4, [r1, #0]
 8018312:	3301      	adds	r3, #1
 8018314:	2c00      	cmp	r4, #0
 8018316:	d102      	bne.n	801831e <__match+0x12>
 8018318:	6003      	str	r3, [r0, #0]
 801831a:	2001      	movs	r0, #1
 801831c:	bd30      	pop	{r4, r5, pc}
 801831e:	781a      	ldrb	r2, [r3, #0]
 8018320:	0015      	movs	r5, r2
 8018322:	3d41      	subs	r5, #65	; 0x41
 8018324:	2d19      	cmp	r5, #25
 8018326:	d800      	bhi.n	801832a <__match+0x1e>
 8018328:	3220      	adds	r2, #32
 801832a:	3101      	adds	r1, #1
 801832c:	42a2      	cmp	r2, r4
 801832e:	d0ef      	beq.n	8018310 <__match+0x4>
 8018330:	2000      	movs	r0, #0
 8018332:	e7f3      	b.n	801831c <__match+0x10>

08018334 <__hexnan>:
 8018334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018336:	b08b      	sub	sp, #44	; 0x2c
 8018338:	9201      	str	r2, [sp, #4]
 801833a:	680a      	ldr	r2, [r1, #0]
 801833c:	9901      	ldr	r1, [sp, #4]
 801833e:	1153      	asrs	r3, r2, #5
 8018340:	009b      	lsls	r3, r3, #2
 8018342:	18cb      	adds	r3, r1, r3
 8018344:	9304      	str	r3, [sp, #16]
 8018346:	231f      	movs	r3, #31
 8018348:	401a      	ands	r2, r3
 801834a:	9008      	str	r0, [sp, #32]
 801834c:	9206      	str	r2, [sp, #24]
 801834e:	d002      	beq.n	8018356 <__hexnan+0x22>
 8018350:	9b04      	ldr	r3, [sp, #16]
 8018352:	3304      	adds	r3, #4
 8018354:	9304      	str	r3, [sp, #16]
 8018356:	9b04      	ldr	r3, [sp, #16]
 8018358:	2500      	movs	r5, #0
 801835a:	1f1e      	subs	r6, r3, #4
 801835c:	0037      	movs	r7, r6
 801835e:	0034      	movs	r4, r6
 8018360:	9b08      	ldr	r3, [sp, #32]
 8018362:	6035      	str	r5, [r6, #0]
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	9507      	str	r5, [sp, #28]
 8018368:	9305      	str	r3, [sp, #20]
 801836a:	9502      	str	r5, [sp, #8]
 801836c:	9b05      	ldr	r3, [sp, #20]
 801836e:	3301      	adds	r3, #1
 8018370:	9309      	str	r3, [sp, #36]	; 0x24
 8018372:	9b05      	ldr	r3, [sp, #20]
 8018374:	785b      	ldrb	r3, [r3, #1]
 8018376:	9303      	str	r3, [sp, #12]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d028      	beq.n	80183ce <__hexnan+0x9a>
 801837c:	9803      	ldr	r0, [sp, #12]
 801837e:	f7ff fd73 	bl	8017e68 <__hexdig_fun>
 8018382:	2800      	cmp	r0, #0
 8018384:	d145      	bne.n	8018412 <__hexnan+0xde>
 8018386:	9b03      	ldr	r3, [sp, #12]
 8018388:	2b20      	cmp	r3, #32
 801838a:	d819      	bhi.n	80183c0 <__hexnan+0x8c>
 801838c:	9b02      	ldr	r3, [sp, #8]
 801838e:	9a07      	ldr	r2, [sp, #28]
 8018390:	4293      	cmp	r3, r2
 8018392:	dd12      	ble.n	80183ba <__hexnan+0x86>
 8018394:	42bc      	cmp	r4, r7
 8018396:	d206      	bcs.n	80183a6 <__hexnan+0x72>
 8018398:	2d07      	cmp	r5, #7
 801839a:	dc04      	bgt.n	80183a6 <__hexnan+0x72>
 801839c:	002a      	movs	r2, r5
 801839e:	0039      	movs	r1, r7
 80183a0:	0020      	movs	r0, r4
 80183a2:	f7ff ffa1 	bl	80182e8 <L_shift>
 80183a6:	9b01      	ldr	r3, [sp, #4]
 80183a8:	2508      	movs	r5, #8
 80183aa:	429c      	cmp	r4, r3
 80183ac:	d905      	bls.n	80183ba <__hexnan+0x86>
 80183ae:	1f27      	subs	r7, r4, #4
 80183b0:	2500      	movs	r5, #0
 80183b2:	003c      	movs	r4, r7
 80183b4:	9b02      	ldr	r3, [sp, #8]
 80183b6:	603d      	str	r5, [r7, #0]
 80183b8:	9307      	str	r3, [sp, #28]
 80183ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183bc:	9305      	str	r3, [sp, #20]
 80183be:	e7d5      	b.n	801836c <__hexnan+0x38>
 80183c0:	9b03      	ldr	r3, [sp, #12]
 80183c2:	2b29      	cmp	r3, #41	; 0x29
 80183c4:	d14a      	bne.n	801845c <__hexnan+0x128>
 80183c6:	9b05      	ldr	r3, [sp, #20]
 80183c8:	9a08      	ldr	r2, [sp, #32]
 80183ca:	3302      	adds	r3, #2
 80183cc:	6013      	str	r3, [r2, #0]
 80183ce:	9b02      	ldr	r3, [sp, #8]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d043      	beq.n	801845c <__hexnan+0x128>
 80183d4:	42bc      	cmp	r4, r7
 80183d6:	d206      	bcs.n	80183e6 <__hexnan+0xb2>
 80183d8:	2d07      	cmp	r5, #7
 80183da:	dc04      	bgt.n	80183e6 <__hexnan+0xb2>
 80183dc:	002a      	movs	r2, r5
 80183de:	0039      	movs	r1, r7
 80183e0:	0020      	movs	r0, r4
 80183e2:	f7ff ff81 	bl	80182e8 <L_shift>
 80183e6:	9b01      	ldr	r3, [sp, #4]
 80183e8:	429c      	cmp	r4, r3
 80183ea:	d926      	bls.n	801843a <__hexnan+0x106>
 80183ec:	cc04      	ldmia	r4!, {r2}
 80183ee:	601a      	str	r2, [r3, #0]
 80183f0:	3304      	adds	r3, #4
 80183f2:	42a6      	cmp	r6, r4
 80183f4:	d2fa      	bcs.n	80183ec <__hexnan+0xb8>
 80183f6:	2200      	movs	r2, #0
 80183f8:	c304      	stmia	r3!, {r2}
 80183fa:	429e      	cmp	r6, r3
 80183fc:	d2fc      	bcs.n	80183f8 <__hexnan+0xc4>
 80183fe:	6833      	ldr	r3, [r6, #0]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d104      	bne.n	801840e <__hexnan+0xda>
 8018404:	9b01      	ldr	r3, [sp, #4]
 8018406:	429e      	cmp	r6, r3
 8018408:	d126      	bne.n	8018458 <__hexnan+0x124>
 801840a:	2301      	movs	r3, #1
 801840c:	6033      	str	r3, [r6, #0]
 801840e:	2005      	movs	r0, #5
 8018410:	e025      	b.n	801845e <__hexnan+0x12a>
 8018412:	9b02      	ldr	r3, [sp, #8]
 8018414:	3501      	adds	r5, #1
 8018416:	3301      	adds	r3, #1
 8018418:	9302      	str	r3, [sp, #8]
 801841a:	2d08      	cmp	r5, #8
 801841c:	dd06      	ble.n	801842c <__hexnan+0xf8>
 801841e:	9b01      	ldr	r3, [sp, #4]
 8018420:	429c      	cmp	r4, r3
 8018422:	d9ca      	bls.n	80183ba <__hexnan+0x86>
 8018424:	2300      	movs	r3, #0
 8018426:	2501      	movs	r5, #1
 8018428:	3c04      	subs	r4, #4
 801842a:	6023      	str	r3, [r4, #0]
 801842c:	220f      	movs	r2, #15
 801842e:	6823      	ldr	r3, [r4, #0]
 8018430:	4010      	ands	r0, r2
 8018432:	011b      	lsls	r3, r3, #4
 8018434:	4318      	orrs	r0, r3
 8018436:	6020      	str	r0, [r4, #0]
 8018438:	e7bf      	b.n	80183ba <__hexnan+0x86>
 801843a:	9b06      	ldr	r3, [sp, #24]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d0de      	beq.n	80183fe <__hexnan+0xca>
 8018440:	2120      	movs	r1, #32
 8018442:	9a06      	ldr	r2, [sp, #24]
 8018444:	9b04      	ldr	r3, [sp, #16]
 8018446:	1a89      	subs	r1, r1, r2
 8018448:	2201      	movs	r2, #1
 801844a:	4252      	negs	r2, r2
 801844c:	40ca      	lsrs	r2, r1
 801844e:	3b04      	subs	r3, #4
 8018450:	6819      	ldr	r1, [r3, #0]
 8018452:	400a      	ands	r2, r1
 8018454:	601a      	str	r2, [r3, #0]
 8018456:	e7d2      	b.n	80183fe <__hexnan+0xca>
 8018458:	3e04      	subs	r6, #4
 801845a:	e7d0      	b.n	80183fe <__hexnan+0xca>
 801845c:	2004      	movs	r0, #4
 801845e:	b00b      	add	sp, #44	; 0x2c
 8018460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018462 <__localeconv_l>:
 8018462:	30f0      	adds	r0, #240	; 0xf0
 8018464:	4770      	bx	lr
	...

08018468 <_localeconv_r>:
 8018468:	4b03      	ldr	r3, [pc, #12]	; (8018478 <_localeconv_r+0x10>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801846e:	2800      	cmp	r0, #0
 8018470:	d100      	bne.n	8018474 <_localeconv_r+0xc>
 8018472:	4802      	ldr	r0, [pc, #8]	; (801847c <_localeconv_r+0x14>)
 8018474:	30f0      	adds	r0, #240	; 0xf0
 8018476:	4770      	bx	lr
 8018478:	20000118 	.word	0x20000118
 801847c:	20000548 	.word	0x20000548

08018480 <__retarget_lock_acquire_recursive>:
 8018480:	4770      	bx	lr

08018482 <__retarget_lock_release_recursive>:
 8018482:	4770      	bx	lr

08018484 <memchr>:
 8018484:	b2c9      	uxtb	r1, r1
 8018486:	1882      	adds	r2, r0, r2
 8018488:	4290      	cmp	r0, r2
 801848a:	d101      	bne.n	8018490 <memchr+0xc>
 801848c:	2000      	movs	r0, #0
 801848e:	4770      	bx	lr
 8018490:	7803      	ldrb	r3, [r0, #0]
 8018492:	428b      	cmp	r3, r1
 8018494:	d0fb      	beq.n	801848e <memchr+0xa>
 8018496:	3001      	adds	r0, #1
 8018498:	e7f6      	b.n	8018488 <memchr+0x4>

0801849a <memmove>:
 801849a:	b510      	push	{r4, lr}
 801849c:	4288      	cmp	r0, r1
 801849e:	d902      	bls.n	80184a6 <memmove+0xc>
 80184a0:	188b      	adds	r3, r1, r2
 80184a2:	4298      	cmp	r0, r3
 80184a4:	d303      	bcc.n	80184ae <memmove+0x14>
 80184a6:	2300      	movs	r3, #0
 80184a8:	e007      	b.n	80184ba <memmove+0x20>
 80184aa:	5c8b      	ldrb	r3, [r1, r2]
 80184ac:	5483      	strb	r3, [r0, r2]
 80184ae:	3a01      	subs	r2, #1
 80184b0:	d2fb      	bcs.n	80184aa <memmove+0x10>
 80184b2:	bd10      	pop	{r4, pc}
 80184b4:	5ccc      	ldrb	r4, [r1, r3]
 80184b6:	54c4      	strb	r4, [r0, r3]
 80184b8:	3301      	adds	r3, #1
 80184ba:	429a      	cmp	r2, r3
 80184bc:	d1fa      	bne.n	80184b4 <memmove+0x1a>
 80184be:	e7f8      	b.n	80184b2 <memmove+0x18>

080184c0 <_Balloc>:
 80184c0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80184c2:	b570      	push	{r4, r5, r6, lr}
 80184c4:	0004      	movs	r4, r0
 80184c6:	000d      	movs	r5, r1
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d012      	beq.n	80184f2 <_Balloc+0x32>
 80184cc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80184ce:	00ab      	lsls	r3, r5, #2
 80184d0:	18d3      	adds	r3, r2, r3
 80184d2:	6818      	ldr	r0, [r3, #0]
 80184d4:	2800      	cmp	r0, #0
 80184d6:	d115      	bne.n	8018504 <_Balloc+0x44>
 80184d8:	2101      	movs	r1, #1
 80184da:	000e      	movs	r6, r1
 80184dc:	40ae      	lsls	r6, r5
 80184de:	1d72      	adds	r2, r6, #5
 80184e0:	0092      	lsls	r2, r2, #2
 80184e2:	0020      	movs	r0, r4
 80184e4:	f000 fcbe 	bl	8018e64 <_calloc_r>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	d009      	beq.n	8018500 <_Balloc+0x40>
 80184ec:	6045      	str	r5, [r0, #4]
 80184ee:	6086      	str	r6, [r0, #8]
 80184f0:	e00a      	b.n	8018508 <_Balloc+0x48>
 80184f2:	2221      	movs	r2, #33	; 0x21
 80184f4:	2104      	movs	r1, #4
 80184f6:	f000 fcb5 	bl	8018e64 <_calloc_r>
 80184fa:	64e0      	str	r0, [r4, #76]	; 0x4c
 80184fc:	2800      	cmp	r0, #0
 80184fe:	d1e5      	bne.n	80184cc <_Balloc+0xc>
 8018500:	2000      	movs	r0, #0
 8018502:	bd70      	pop	{r4, r5, r6, pc}
 8018504:	6802      	ldr	r2, [r0, #0]
 8018506:	601a      	str	r2, [r3, #0]
 8018508:	2300      	movs	r3, #0
 801850a:	6103      	str	r3, [r0, #16]
 801850c:	60c3      	str	r3, [r0, #12]
 801850e:	e7f8      	b.n	8018502 <_Balloc+0x42>

08018510 <_Bfree>:
 8018510:	2900      	cmp	r1, #0
 8018512:	d006      	beq.n	8018522 <_Bfree+0x12>
 8018514:	684b      	ldr	r3, [r1, #4]
 8018516:	009a      	lsls	r2, r3, #2
 8018518:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801851a:	189b      	adds	r3, r3, r2
 801851c:	681a      	ldr	r2, [r3, #0]
 801851e:	600a      	str	r2, [r1, #0]
 8018520:	6019      	str	r1, [r3, #0]
 8018522:	4770      	bx	lr

08018524 <__multadd>:
 8018524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018526:	001e      	movs	r6, r3
 8018528:	2314      	movs	r3, #20
 801852a:	469c      	mov	ip, r3
 801852c:	0007      	movs	r7, r0
 801852e:	000c      	movs	r4, r1
 8018530:	2000      	movs	r0, #0
 8018532:	690d      	ldr	r5, [r1, #16]
 8018534:	448c      	add	ip, r1
 8018536:	4663      	mov	r3, ip
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	3001      	adds	r0, #1
 801853c:	b299      	uxth	r1, r3
 801853e:	4663      	mov	r3, ip
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	4351      	muls	r1, r2
 8018544:	0c1b      	lsrs	r3, r3, #16
 8018546:	4353      	muls	r3, r2
 8018548:	1989      	adds	r1, r1, r6
 801854a:	0c0e      	lsrs	r6, r1, #16
 801854c:	199b      	adds	r3, r3, r6
 801854e:	b289      	uxth	r1, r1
 8018550:	0c1e      	lsrs	r6, r3, #16
 8018552:	041b      	lsls	r3, r3, #16
 8018554:	185b      	adds	r3, r3, r1
 8018556:	4661      	mov	r1, ip
 8018558:	c108      	stmia	r1!, {r3}
 801855a:	468c      	mov	ip, r1
 801855c:	4285      	cmp	r5, r0
 801855e:	dcea      	bgt.n	8018536 <__multadd+0x12>
 8018560:	2e00      	cmp	r6, #0
 8018562:	d01b      	beq.n	801859c <__multadd+0x78>
 8018564:	68a3      	ldr	r3, [r4, #8]
 8018566:	42ab      	cmp	r3, r5
 8018568:	dc12      	bgt.n	8018590 <__multadd+0x6c>
 801856a:	6863      	ldr	r3, [r4, #4]
 801856c:	0038      	movs	r0, r7
 801856e:	1c59      	adds	r1, r3, #1
 8018570:	f7ff ffa6 	bl	80184c0 <_Balloc>
 8018574:	0021      	movs	r1, r4
 8018576:	6923      	ldr	r3, [r4, #16]
 8018578:	9001      	str	r0, [sp, #4]
 801857a:	1c9a      	adds	r2, r3, #2
 801857c:	0092      	lsls	r2, r2, #2
 801857e:	310c      	adds	r1, #12
 8018580:	300c      	adds	r0, #12
 8018582:	f7fc f884 	bl	801468e <memcpy>
 8018586:	0021      	movs	r1, r4
 8018588:	0038      	movs	r0, r7
 801858a:	f7ff ffc1 	bl	8018510 <_Bfree>
 801858e:	9c01      	ldr	r4, [sp, #4]
 8018590:	1d2b      	adds	r3, r5, #4
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	18e3      	adds	r3, r4, r3
 8018596:	3501      	adds	r5, #1
 8018598:	605e      	str	r6, [r3, #4]
 801859a:	6125      	str	r5, [r4, #16]
 801859c:	0020      	movs	r0, r4
 801859e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080185a0 <__s2b>:
 80185a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185a2:	0006      	movs	r6, r0
 80185a4:	0018      	movs	r0, r3
 80185a6:	000c      	movs	r4, r1
 80185a8:	3008      	adds	r0, #8
 80185aa:	2109      	movs	r1, #9
 80185ac:	9301      	str	r3, [sp, #4]
 80185ae:	0015      	movs	r5, r2
 80185b0:	f7e7 fe58 	bl	8000264 <__divsi3>
 80185b4:	2301      	movs	r3, #1
 80185b6:	2100      	movs	r1, #0
 80185b8:	4283      	cmp	r3, r0
 80185ba:	db1f      	blt.n	80185fc <__s2b+0x5c>
 80185bc:	0030      	movs	r0, r6
 80185be:	f7ff ff7f 	bl	80184c0 <_Balloc>
 80185c2:	9b08      	ldr	r3, [sp, #32]
 80185c4:	6143      	str	r3, [r0, #20]
 80185c6:	2301      	movs	r3, #1
 80185c8:	6103      	str	r3, [r0, #16]
 80185ca:	2d09      	cmp	r5, #9
 80185cc:	dd19      	ble.n	8018602 <__s2b+0x62>
 80185ce:	0023      	movs	r3, r4
 80185d0:	3309      	adds	r3, #9
 80185d2:	001f      	movs	r7, r3
 80185d4:	9300      	str	r3, [sp, #0]
 80185d6:	1964      	adds	r4, r4, r5
 80185d8:	783b      	ldrb	r3, [r7, #0]
 80185da:	0001      	movs	r1, r0
 80185dc:	3b30      	subs	r3, #48	; 0x30
 80185de:	220a      	movs	r2, #10
 80185e0:	0030      	movs	r0, r6
 80185e2:	3701      	adds	r7, #1
 80185e4:	f7ff ff9e 	bl	8018524 <__multadd>
 80185e8:	42a7      	cmp	r7, r4
 80185ea:	d1f5      	bne.n	80185d8 <__s2b+0x38>
 80185ec:	9b00      	ldr	r3, [sp, #0]
 80185ee:	195c      	adds	r4, r3, r5
 80185f0:	3c08      	subs	r4, #8
 80185f2:	002f      	movs	r7, r5
 80185f4:	9b01      	ldr	r3, [sp, #4]
 80185f6:	429f      	cmp	r7, r3
 80185f8:	db06      	blt.n	8018608 <__s2b+0x68>
 80185fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80185fc:	005b      	lsls	r3, r3, #1
 80185fe:	3101      	adds	r1, #1
 8018600:	e7da      	b.n	80185b8 <__s2b+0x18>
 8018602:	340a      	adds	r4, #10
 8018604:	2509      	movs	r5, #9
 8018606:	e7f4      	b.n	80185f2 <__s2b+0x52>
 8018608:	1b63      	subs	r3, r4, r5
 801860a:	5ddb      	ldrb	r3, [r3, r7]
 801860c:	0001      	movs	r1, r0
 801860e:	3b30      	subs	r3, #48	; 0x30
 8018610:	220a      	movs	r2, #10
 8018612:	0030      	movs	r0, r6
 8018614:	f7ff ff86 	bl	8018524 <__multadd>
 8018618:	3701      	adds	r7, #1
 801861a:	e7eb      	b.n	80185f4 <__s2b+0x54>

0801861c <__hi0bits>:
 801861c:	0003      	movs	r3, r0
 801861e:	0c02      	lsrs	r2, r0, #16
 8018620:	2000      	movs	r0, #0
 8018622:	4282      	cmp	r2, r0
 8018624:	d101      	bne.n	801862a <__hi0bits+0xe>
 8018626:	041b      	lsls	r3, r3, #16
 8018628:	3010      	adds	r0, #16
 801862a:	0e1a      	lsrs	r2, r3, #24
 801862c:	d101      	bne.n	8018632 <__hi0bits+0x16>
 801862e:	3008      	adds	r0, #8
 8018630:	021b      	lsls	r3, r3, #8
 8018632:	0f1a      	lsrs	r2, r3, #28
 8018634:	d101      	bne.n	801863a <__hi0bits+0x1e>
 8018636:	3004      	adds	r0, #4
 8018638:	011b      	lsls	r3, r3, #4
 801863a:	0f9a      	lsrs	r2, r3, #30
 801863c:	d101      	bne.n	8018642 <__hi0bits+0x26>
 801863e:	3002      	adds	r0, #2
 8018640:	009b      	lsls	r3, r3, #2
 8018642:	2b00      	cmp	r3, #0
 8018644:	db03      	blt.n	801864e <__hi0bits+0x32>
 8018646:	3001      	adds	r0, #1
 8018648:	005b      	lsls	r3, r3, #1
 801864a:	d400      	bmi.n	801864e <__hi0bits+0x32>
 801864c:	2020      	movs	r0, #32
 801864e:	4770      	bx	lr

08018650 <__lo0bits>:
 8018650:	2207      	movs	r2, #7
 8018652:	6803      	ldr	r3, [r0, #0]
 8018654:	b510      	push	{r4, lr}
 8018656:	0001      	movs	r1, r0
 8018658:	401a      	ands	r2, r3
 801865a:	d00d      	beq.n	8018678 <__lo0bits+0x28>
 801865c:	2401      	movs	r4, #1
 801865e:	2000      	movs	r0, #0
 8018660:	4223      	tst	r3, r4
 8018662:	d105      	bne.n	8018670 <__lo0bits+0x20>
 8018664:	3002      	adds	r0, #2
 8018666:	4203      	tst	r3, r0
 8018668:	d003      	beq.n	8018672 <__lo0bits+0x22>
 801866a:	40e3      	lsrs	r3, r4
 801866c:	0020      	movs	r0, r4
 801866e:	600b      	str	r3, [r1, #0]
 8018670:	bd10      	pop	{r4, pc}
 8018672:	089b      	lsrs	r3, r3, #2
 8018674:	600b      	str	r3, [r1, #0]
 8018676:	e7fb      	b.n	8018670 <__lo0bits+0x20>
 8018678:	b29c      	uxth	r4, r3
 801867a:	0010      	movs	r0, r2
 801867c:	2c00      	cmp	r4, #0
 801867e:	d101      	bne.n	8018684 <__lo0bits+0x34>
 8018680:	2010      	movs	r0, #16
 8018682:	0c1b      	lsrs	r3, r3, #16
 8018684:	b2da      	uxtb	r2, r3
 8018686:	2a00      	cmp	r2, #0
 8018688:	d101      	bne.n	801868e <__lo0bits+0x3e>
 801868a:	3008      	adds	r0, #8
 801868c:	0a1b      	lsrs	r3, r3, #8
 801868e:	071a      	lsls	r2, r3, #28
 8018690:	d101      	bne.n	8018696 <__lo0bits+0x46>
 8018692:	3004      	adds	r0, #4
 8018694:	091b      	lsrs	r3, r3, #4
 8018696:	079a      	lsls	r2, r3, #30
 8018698:	d101      	bne.n	801869e <__lo0bits+0x4e>
 801869a:	3002      	adds	r0, #2
 801869c:	089b      	lsrs	r3, r3, #2
 801869e:	07da      	lsls	r2, r3, #31
 80186a0:	d4e8      	bmi.n	8018674 <__lo0bits+0x24>
 80186a2:	085b      	lsrs	r3, r3, #1
 80186a4:	d001      	beq.n	80186aa <__lo0bits+0x5a>
 80186a6:	3001      	adds	r0, #1
 80186a8:	e7e4      	b.n	8018674 <__lo0bits+0x24>
 80186aa:	2020      	movs	r0, #32
 80186ac:	e7e0      	b.n	8018670 <__lo0bits+0x20>

080186ae <__i2b>:
 80186ae:	b510      	push	{r4, lr}
 80186b0:	000c      	movs	r4, r1
 80186b2:	2101      	movs	r1, #1
 80186b4:	f7ff ff04 	bl	80184c0 <_Balloc>
 80186b8:	2301      	movs	r3, #1
 80186ba:	6144      	str	r4, [r0, #20]
 80186bc:	6103      	str	r3, [r0, #16]
 80186be:	bd10      	pop	{r4, pc}

080186c0 <__multiply>:
 80186c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186c2:	690b      	ldr	r3, [r1, #16]
 80186c4:	0014      	movs	r4, r2
 80186c6:	6912      	ldr	r2, [r2, #16]
 80186c8:	b089      	sub	sp, #36	; 0x24
 80186ca:	000d      	movs	r5, r1
 80186cc:	4293      	cmp	r3, r2
 80186ce:	da01      	bge.n	80186d4 <__multiply+0x14>
 80186d0:	0025      	movs	r5, r4
 80186d2:	000c      	movs	r4, r1
 80186d4:	692f      	ldr	r7, [r5, #16]
 80186d6:	6926      	ldr	r6, [r4, #16]
 80186d8:	6869      	ldr	r1, [r5, #4]
 80186da:	19bb      	adds	r3, r7, r6
 80186dc:	9302      	str	r3, [sp, #8]
 80186de:	68ab      	ldr	r3, [r5, #8]
 80186e0:	19ba      	adds	r2, r7, r6
 80186e2:	4293      	cmp	r3, r2
 80186e4:	da00      	bge.n	80186e8 <__multiply+0x28>
 80186e6:	3101      	adds	r1, #1
 80186e8:	f7ff feea 	bl	80184c0 <_Balloc>
 80186ec:	0002      	movs	r2, r0
 80186ee:	19bb      	adds	r3, r7, r6
 80186f0:	3214      	adds	r2, #20
 80186f2:	009b      	lsls	r3, r3, #2
 80186f4:	18d3      	adds	r3, r2, r3
 80186f6:	469c      	mov	ip, r3
 80186f8:	2100      	movs	r1, #0
 80186fa:	0013      	movs	r3, r2
 80186fc:	9004      	str	r0, [sp, #16]
 80186fe:	4563      	cmp	r3, ip
 8018700:	d31d      	bcc.n	801873e <__multiply+0x7e>
 8018702:	3514      	adds	r5, #20
 8018704:	00bf      	lsls	r7, r7, #2
 8018706:	19eb      	adds	r3, r5, r7
 8018708:	3414      	adds	r4, #20
 801870a:	00b6      	lsls	r6, r6, #2
 801870c:	9305      	str	r3, [sp, #20]
 801870e:	19a3      	adds	r3, r4, r6
 8018710:	9503      	str	r5, [sp, #12]
 8018712:	9401      	str	r4, [sp, #4]
 8018714:	9307      	str	r3, [sp, #28]
 8018716:	9b07      	ldr	r3, [sp, #28]
 8018718:	9901      	ldr	r1, [sp, #4]
 801871a:	4299      	cmp	r1, r3
 801871c:	d311      	bcc.n	8018742 <__multiply+0x82>
 801871e:	9b02      	ldr	r3, [sp, #8]
 8018720:	2b00      	cmp	r3, #0
 8018722:	dd06      	ble.n	8018732 <__multiply+0x72>
 8018724:	2304      	movs	r3, #4
 8018726:	425b      	negs	r3, r3
 8018728:	449c      	add	ip, r3
 801872a:	4663      	mov	r3, ip
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	2b00      	cmp	r3, #0
 8018730:	d051      	beq.n	80187d6 <__multiply+0x116>
 8018732:	9b04      	ldr	r3, [sp, #16]
 8018734:	9a02      	ldr	r2, [sp, #8]
 8018736:	0018      	movs	r0, r3
 8018738:	611a      	str	r2, [r3, #16]
 801873a:	b009      	add	sp, #36	; 0x24
 801873c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801873e:	c302      	stmia	r3!, {r1}
 8018740:	e7dd      	b.n	80186fe <__multiply+0x3e>
 8018742:	9b01      	ldr	r3, [sp, #4]
 8018744:	681b      	ldr	r3, [r3, #0]
 8018746:	b298      	uxth	r0, r3
 8018748:	2800      	cmp	r0, #0
 801874a:	d01c      	beq.n	8018786 <__multiply+0xc6>
 801874c:	0015      	movs	r5, r2
 801874e:	2600      	movs	r6, #0
 8018750:	9f03      	ldr	r7, [sp, #12]
 8018752:	cf02      	ldmia	r7!, {r1}
 8018754:	682c      	ldr	r4, [r5, #0]
 8018756:	b28b      	uxth	r3, r1
 8018758:	4343      	muls	r3, r0
 801875a:	0c09      	lsrs	r1, r1, #16
 801875c:	4341      	muls	r1, r0
 801875e:	b2a4      	uxth	r4, r4
 8018760:	191b      	adds	r3, r3, r4
 8018762:	199b      	adds	r3, r3, r6
 8018764:	000e      	movs	r6, r1
 8018766:	6829      	ldr	r1, [r5, #0]
 8018768:	9506      	str	r5, [sp, #24]
 801876a:	0c09      	lsrs	r1, r1, #16
 801876c:	1871      	adds	r1, r6, r1
 801876e:	0c1e      	lsrs	r6, r3, #16
 8018770:	1989      	adds	r1, r1, r6
 8018772:	0c0e      	lsrs	r6, r1, #16
 8018774:	b29b      	uxth	r3, r3
 8018776:	0409      	lsls	r1, r1, #16
 8018778:	430b      	orrs	r3, r1
 801877a:	c508      	stmia	r5!, {r3}
 801877c:	9b05      	ldr	r3, [sp, #20]
 801877e:	42bb      	cmp	r3, r7
 8018780:	d8e7      	bhi.n	8018752 <__multiply+0x92>
 8018782:	9b06      	ldr	r3, [sp, #24]
 8018784:	605e      	str	r6, [r3, #4]
 8018786:	9b01      	ldr	r3, [sp, #4]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	0c1d      	lsrs	r5, r3, #16
 801878c:	d01e      	beq.n	80187cc <__multiply+0x10c>
 801878e:	0010      	movs	r0, r2
 8018790:	2700      	movs	r7, #0
 8018792:	6813      	ldr	r3, [r2, #0]
 8018794:	9e03      	ldr	r6, [sp, #12]
 8018796:	6831      	ldr	r1, [r6, #0]
 8018798:	6804      	ldr	r4, [r0, #0]
 801879a:	b289      	uxth	r1, r1
 801879c:	4369      	muls	r1, r5
 801879e:	0c24      	lsrs	r4, r4, #16
 80187a0:	1909      	adds	r1, r1, r4
 80187a2:	19c9      	adds	r1, r1, r7
 80187a4:	040f      	lsls	r7, r1, #16
 80187a6:	b29b      	uxth	r3, r3
 80187a8:	433b      	orrs	r3, r7
 80187aa:	6003      	str	r3, [r0, #0]
 80187ac:	ce80      	ldmia	r6!, {r7}
 80187ae:	6843      	ldr	r3, [r0, #4]
 80187b0:	0c3f      	lsrs	r7, r7, #16
 80187b2:	436f      	muls	r7, r5
 80187b4:	b29b      	uxth	r3, r3
 80187b6:	18fb      	adds	r3, r7, r3
 80187b8:	0c09      	lsrs	r1, r1, #16
 80187ba:	185b      	adds	r3, r3, r1
 80187bc:	9905      	ldr	r1, [sp, #20]
 80187be:	9006      	str	r0, [sp, #24]
 80187c0:	0c1f      	lsrs	r7, r3, #16
 80187c2:	3004      	adds	r0, #4
 80187c4:	42b1      	cmp	r1, r6
 80187c6:	d8e6      	bhi.n	8018796 <__multiply+0xd6>
 80187c8:	9906      	ldr	r1, [sp, #24]
 80187ca:	604b      	str	r3, [r1, #4]
 80187cc:	9b01      	ldr	r3, [sp, #4]
 80187ce:	3204      	adds	r2, #4
 80187d0:	3304      	adds	r3, #4
 80187d2:	9301      	str	r3, [sp, #4]
 80187d4:	e79f      	b.n	8018716 <__multiply+0x56>
 80187d6:	9b02      	ldr	r3, [sp, #8]
 80187d8:	3b01      	subs	r3, #1
 80187da:	9302      	str	r3, [sp, #8]
 80187dc:	e79f      	b.n	801871e <__multiply+0x5e>
	...

080187e0 <__pow5mult>:
 80187e0:	2303      	movs	r3, #3
 80187e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80187e4:	4013      	ands	r3, r2
 80187e6:	0006      	movs	r6, r0
 80187e8:	000f      	movs	r7, r1
 80187ea:	0015      	movs	r5, r2
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d008      	beq.n	8018802 <__pow5mult+0x22>
 80187f0:	491a      	ldr	r1, [pc, #104]	; (801885c <__pow5mult+0x7c>)
 80187f2:	3b01      	subs	r3, #1
 80187f4:	009a      	lsls	r2, r3, #2
 80187f6:	5852      	ldr	r2, [r2, r1]
 80187f8:	2300      	movs	r3, #0
 80187fa:	0039      	movs	r1, r7
 80187fc:	f7ff fe92 	bl	8018524 <__multadd>
 8018800:	0007      	movs	r7, r0
 8018802:	10ad      	asrs	r5, r5, #2
 8018804:	d027      	beq.n	8018856 <__pow5mult+0x76>
 8018806:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018808:	2c00      	cmp	r4, #0
 801880a:	d107      	bne.n	801881c <__pow5mult+0x3c>
 801880c:	4914      	ldr	r1, [pc, #80]	; (8018860 <__pow5mult+0x80>)
 801880e:	0030      	movs	r0, r6
 8018810:	f7ff ff4d 	bl	80186ae <__i2b>
 8018814:	2300      	movs	r3, #0
 8018816:	0004      	movs	r4, r0
 8018818:	64b0      	str	r0, [r6, #72]	; 0x48
 801881a:	6003      	str	r3, [r0, #0]
 801881c:	2301      	movs	r3, #1
 801881e:	421d      	tst	r5, r3
 8018820:	d00a      	beq.n	8018838 <__pow5mult+0x58>
 8018822:	0039      	movs	r1, r7
 8018824:	0022      	movs	r2, r4
 8018826:	0030      	movs	r0, r6
 8018828:	f7ff ff4a 	bl	80186c0 <__multiply>
 801882c:	0039      	movs	r1, r7
 801882e:	9001      	str	r0, [sp, #4]
 8018830:	0030      	movs	r0, r6
 8018832:	f7ff fe6d 	bl	8018510 <_Bfree>
 8018836:	9f01      	ldr	r7, [sp, #4]
 8018838:	106d      	asrs	r5, r5, #1
 801883a:	d00c      	beq.n	8018856 <__pow5mult+0x76>
 801883c:	6820      	ldr	r0, [r4, #0]
 801883e:	2800      	cmp	r0, #0
 8018840:	d107      	bne.n	8018852 <__pow5mult+0x72>
 8018842:	0022      	movs	r2, r4
 8018844:	0021      	movs	r1, r4
 8018846:	0030      	movs	r0, r6
 8018848:	f7ff ff3a 	bl	80186c0 <__multiply>
 801884c:	2300      	movs	r3, #0
 801884e:	6020      	str	r0, [r4, #0]
 8018850:	6003      	str	r3, [r0, #0]
 8018852:	0004      	movs	r4, r0
 8018854:	e7e2      	b.n	801881c <__pow5mult+0x3c>
 8018856:	0038      	movs	r0, r7
 8018858:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801885a:	46c0      	nop			; (mov r8, r8)
 801885c:	0801c240 	.word	0x0801c240
 8018860:	00000271 	.word	0x00000271

08018864 <__lshift>:
 8018864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018866:	000d      	movs	r5, r1
 8018868:	0017      	movs	r7, r2
 801886a:	692b      	ldr	r3, [r5, #16]
 801886c:	1154      	asrs	r4, r2, #5
 801886e:	b085      	sub	sp, #20
 8018870:	18e3      	adds	r3, r4, r3
 8018872:	9301      	str	r3, [sp, #4]
 8018874:	3301      	adds	r3, #1
 8018876:	9300      	str	r3, [sp, #0]
 8018878:	6849      	ldr	r1, [r1, #4]
 801887a:	68ab      	ldr	r3, [r5, #8]
 801887c:	9002      	str	r0, [sp, #8]
 801887e:	9a00      	ldr	r2, [sp, #0]
 8018880:	4293      	cmp	r3, r2
 8018882:	db35      	blt.n	80188f0 <__lshift+0x8c>
 8018884:	9802      	ldr	r0, [sp, #8]
 8018886:	f7ff fe1b 	bl	80184c0 <_Balloc>
 801888a:	2300      	movs	r3, #0
 801888c:	0002      	movs	r2, r0
 801888e:	0006      	movs	r6, r0
 8018890:	0019      	movs	r1, r3
 8018892:	3214      	adds	r2, #20
 8018894:	42a3      	cmp	r3, r4
 8018896:	db2e      	blt.n	80188f6 <__lshift+0x92>
 8018898:	43e3      	mvns	r3, r4
 801889a:	17db      	asrs	r3, r3, #31
 801889c:	401c      	ands	r4, r3
 801889e:	002b      	movs	r3, r5
 80188a0:	00a4      	lsls	r4, r4, #2
 80188a2:	1914      	adds	r4, r2, r4
 80188a4:	692a      	ldr	r2, [r5, #16]
 80188a6:	3314      	adds	r3, #20
 80188a8:	0092      	lsls	r2, r2, #2
 80188aa:	189a      	adds	r2, r3, r2
 80188ac:	4694      	mov	ip, r2
 80188ae:	221f      	movs	r2, #31
 80188b0:	4017      	ands	r7, r2
 80188b2:	d024      	beq.n	80188fe <__lshift+0x9a>
 80188b4:	3201      	adds	r2, #1
 80188b6:	1bd2      	subs	r2, r2, r7
 80188b8:	9203      	str	r2, [sp, #12]
 80188ba:	2200      	movs	r2, #0
 80188bc:	6819      	ldr	r1, [r3, #0]
 80188be:	0020      	movs	r0, r4
 80188c0:	40b9      	lsls	r1, r7
 80188c2:	430a      	orrs	r2, r1
 80188c4:	c404      	stmia	r4!, {r2}
 80188c6:	cb04      	ldmia	r3!, {r2}
 80188c8:	9903      	ldr	r1, [sp, #12]
 80188ca:	40ca      	lsrs	r2, r1
 80188cc:	459c      	cmp	ip, r3
 80188ce:	d8f5      	bhi.n	80188bc <__lshift+0x58>
 80188d0:	6042      	str	r2, [r0, #4]
 80188d2:	2a00      	cmp	r2, #0
 80188d4:	d002      	beq.n	80188dc <__lshift+0x78>
 80188d6:	9b01      	ldr	r3, [sp, #4]
 80188d8:	3302      	adds	r3, #2
 80188da:	9300      	str	r3, [sp, #0]
 80188dc:	9b00      	ldr	r3, [sp, #0]
 80188de:	9802      	ldr	r0, [sp, #8]
 80188e0:	3b01      	subs	r3, #1
 80188e2:	6133      	str	r3, [r6, #16]
 80188e4:	0029      	movs	r1, r5
 80188e6:	f7ff fe13 	bl	8018510 <_Bfree>
 80188ea:	0030      	movs	r0, r6
 80188ec:	b005      	add	sp, #20
 80188ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188f0:	3101      	adds	r1, #1
 80188f2:	005b      	lsls	r3, r3, #1
 80188f4:	e7c3      	b.n	801887e <__lshift+0x1a>
 80188f6:	0098      	lsls	r0, r3, #2
 80188f8:	5011      	str	r1, [r2, r0]
 80188fa:	3301      	adds	r3, #1
 80188fc:	e7ca      	b.n	8018894 <__lshift+0x30>
 80188fe:	cb04      	ldmia	r3!, {r2}
 8018900:	c404      	stmia	r4!, {r2}
 8018902:	459c      	cmp	ip, r3
 8018904:	d8fb      	bhi.n	80188fe <__lshift+0x9a>
 8018906:	e7e9      	b.n	80188dc <__lshift+0x78>

08018908 <__mcmp>:
 8018908:	690a      	ldr	r2, [r1, #16]
 801890a:	6903      	ldr	r3, [r0, #16]
 801890c:	b530      	push	{r4, r5, lr}
 801890e:	1a9b      	subs	r3, r3, r2
 8018910:	d10d      	bne.n	801892e <__mcmp+0x26>
 8018912:	0092      	lsls	r2, r2, #2
 8018914:	3014      	adds	r0, #20
 8018916:	3114      	adds	r1, #20
 8018918:	1884      	adds	r4, r0, r2
 801891a:	1889      	adds	r1, r1, r2
 801891c:	3c04      	subs	r4, #4
 801891e:	3904      	subs	r1, #4
 8018920:	6825      	ldr	r5, [r4, #0]
 8018922:	680a      	ldr	r2, [r1, #0]
 8018924:	4295      	cmp	r5, r2
 8018926:	d004      	beq.n	8018932 <__mcmp+0x2a>
 8018928:	2301      	movs	r3, #1
 801892a:	4295      	cmp	r5, r2
 801892c:	d304      	bcc.n	8018938 <__mcmp+0x30>
 801892e:	0018      	movs	r0, r3
 8018930:	bd30      	pop	{r4, r5, pc}
 8018932:	42a0      	cmp	r0, r4
 8018934:	d3f2      	bcc.n	801891c <__mcmp+0x14>
 8018936:	e7fa      	b.n	801892e <__mcmp+0x26>
 8018938:	425b      	negs	r3, r3
 801893a:	e7f8      	b.n	801892e <__mcmp+0x26>

0801893c <__mdiff>:
 801893c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801893e:	000d      	movs	r5, r1
 8018940:	b085      	sub	sp, #20
 8018942:	0007      	movs	r7, r0
 8018944:	0011      	movs	r1, r2
 8018946:	0028      	movs	r0, r5
 8018948:	0014      	movs	r4, r2
 801894a:	f7ff ffdd 	bl	8018908 <__mcmp>
 801894e:	1e06      	subs	r6, r0, #0
 8018950:	d108      	bne.n	8018964 <__mdiff+0x28>
 8018952:	0001      	movs	r1, r0
 8018954:	0038      	movs	r0, r7
 8018956:	f7ff fdb3 	bl	80184c0 <_Balloc>
 801895a:	2301      	movs	r3, #1
 801895c:	6146      	str	r6, [r0, #20]
 801895e:	6103      	str	r3, [r0, #16]
 8018960:	b005      	add	sp, #20
 8018962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018964:	2301      	movs	r3, #1
 8018966:	9301      	str	r3, [sp, #4]
 8018968:	2800      	cmp	r0, #0
 801896a:	db04      	blt.n	8018976 <__mdiff+0x3a>
 801896c:	0023      	movs	r3, r4
 801896e:	002c      	movs	r4, r5
 8018970:	001d      	movs	r5, r3
 8018972:	2300      	movs	r3, #0
 8018974:	9301      	str	r3, [sp, #4]
 8018976:	6861      	ldr	r1, [r4, #4]
 8018978:	0038      	movs	r0, r7
 801897a:	f7ff fda1 	bl	80184c0 <_Balloc>
 801897e:	002f      	movs	r7, r5
 8018980:	2200      	movs	r2, #0
 8018982:	9b01      	ldr	r3, [sp, #4]
 8018984:	6926      	ldr	r6, [r4, #16]
 8018986:	60c3      	str	r3, [r0, #12]
 8018988:	3414      	adds	r4, #20
 801898a:	00b3      	lsls	r3, r6, #2
 801898c:	18e3      	adds	r3, r4, r3
 801898e:	9302      	str	r3, [sp, #8]
 8018990:	692b      	ldr	r3, [r5, #16]
 8018992:	3714      	adds	r7, #20
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	18fb      	adds	r3, r7, r3
 8018998:	9303      	str	r3, [sp, #12]
 801899a:	0003      	movs	r3, r0
 801899c:	4694      	mov	ip, r2
 801899e:	3314      	adds	r3, #20
 80189a0:	cc20      	ldmia	r4!, {r5}
 80189a2:	cf04      	ldmia	r7!, {r2}
 80189a4:	9201      	str	r2, [sp, #4]
 80189a6:	b2aa      	uxth	r2, r5
 80189a8:	4494      	add	ip, r2
 80189aa:	466a      	mov	r2, sp
 80189ac:	4661      	mov	r1, ip
 80189ae:	8892      	ldrh	r2, [r2, #4]
 80189b0:	0c2d      	lsrs	r5, r5, #16
 80189b2:	1a8a      	subs	r2, r1, r2
 80189b4:	9901      	ldr	r1, [sp, #4]
 80189b6:	0c09      	lsrs	r1, r1, #16
 80189b8:	1a69      	subs	r1, r5, r1
 80189ba:	1415      	asrs	r5, r2, #16
 80189bc:	1949      	adds	r1, r1, r5
 80189be:	140d      	asrs	r5, r1, #16
 80189c0:	b292      	uxth	r2, r2
 80189c2:	0409      	lsls	r1, r1, #16
 80189c4:	430a      	orrs	r2, r1
 80189c6:	601a      	str	r2, [r3, #0]
 80189c8:	9a03      	ldr	r2, [sp, #12]
 80189ca:	46ac      	mov	ip, r5
 80189cc:	3304      	adds	r3, #4
 80189ce:	42ba      	cmp	r2, r7
 80189d0:	d8e6      	bhi.n	80189a0 <__mdiff+0x64>
 80189d2:	9902      	ldr	r1, [sp, #8]
 80189d4:	001a      	movs	r2, r3
 80189d6:	428c      	cmp	r4, r1
 80189d8:	d305      	bcc.n	80189e6 <__mdiff+0xaa>
 80189da:	3a04      	subs	r2, #4
 80189dc:	6813      	ldr	r3, [r2, #0]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d00e      	beq.n	8018a00 <__mdiff+0xc4>
 80189e2:	6106      	str	r6, [r0, #16]
 80189e4:	e7bc      	b.n	8018960 <__mdiff+0x24>
 80189e6:	cc04      	ldmia	r4!, {r2}
 80189e8:	b291      	uxth	r1, r2
 80189ea:	4461      	add	r1, ip
 80189ec:	140d      	asrs	r5, r1, #16
 80189ee:	0c12      	lsrs	r2, r2, #16
 80189f0:	1952      	adds	r2, r2, r5
 80189f2:	1415      	asrs	r5, r2, #16
 80189f4:	b289      	uxth	r1, r1
 80189f6:	0412      	lsls	r2, r2, #16
 80189f8:	430a      	orrs	r2, r1
 80189fa:	46ac      	mov	ip, r5
 80189fc:	c304      	stmia	r3!, {r2}
 80189fe:	e7e8      	b.n	80189d2 <__mdiff+0x96>
 8018a00:	3e01      	subs	r6, #1
 8018a02:	e7ea      	b.n	80189da <__mdiff+0x9e>

08018a04 <__ulp>:
 8018a04:	000b      	movs	r3, r1
 8018a06:	4910      	ldr	r1, [pc, #64]	; (8018a48 <__ulp+0x44>)
 8018a08:	b510      	push	{r4, lr}
 8018a0a:	4019      	ands	r1, r3
 8018a0c:	4b0f      	ldr	r3, [pc, #60]	; (8018a4c <__ulp+0x48>)
 8018a0e:	18c9      	adds	r1, r1, r3
 8018a10:	2900      	cmp	r1, #0
 8018a12:	dd04      	ble.n	8018a1e <__ulp+0x1a>
 8018a14:	2200      	movs	r2, #0
 8018a16:	000b      	movs	r3, r1
 8018a18:	0010      	movs	r0, r2
 8018a1a:	0019      	movs	r1, r3
 8018a1c:	bd10      	pop	{r4, pc}
 8018a1e:	4249      	negs	r1, r1
 8018a20:	1509      	asrs	r1, r1, #20
 8018a22:	2200      	movs	r2, #0
 8018a24:	2300      	movs	r3, #0
 8018a26:	2913      	cmp	r1, #19
 8018a28:	dc04      	bgt.n	8018a34 <__ulp+0x30>
 8018a2a:	2080      	movs	r0, #128	; 0x80
 8018a2c:	0300      	lsls	r0, r0, #12
 8018a2e:	4108      	asrs	r0, r1
 8018a30:	0003      	movs	r3, r0
 8018a32:	e7f1      	b.n	8018a18 <__ulp+0x14>
 8018a34:	3914      	subs	r1, #20
 8018a36:	2001      	movs	r0, #1
 8018a38:	291e      	cmp	r1, #30
 8018a3a:	dc02      	bgt.n	8018a42 <__ulp+0x3e>
 8018a3c:	241f      	movs	r4, #31
 8018a3e:	1a61      	subs	r1, r4, r1
 8018a40:	4088      	lsls	r0, r1
 8018a42:	0002      	movs	r2, r0
 8018a44:	e7e8      	b.n	8018a18 <__ulp+0x14>
 8018a46:	46c0      	nop			; (mov r8, r8)
 8018a48:	7ff00000 	.word	0x7ff00000
 8018a4c:	fcc00000 	.word	0xfcc00000

08018a50 <__b2d>:
 8018a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018a52:	0006      	movs	r6, r0
 8018a54:	6903      	ldr	r3, [r0, #16]
 8018a56:	3614      	adds	r6, #20
 8018a58:	009b      	lsls	r3, r3, #2
 8018a5a:	18f3      	adds	r3, r6, r3
 8018a5c:	1f1d      	subs	r5, r3, #4
 8018a5e:	682c      	ldr	r4, [r5, #0]
 8018a60:	000f      	movs	r7, r1
 8018a62:	0020      	movs	r0, r4
 8018a64:	9301      	str	r3, [sp, #4]
 8018a66:	f7ff fdd9 	bl	801861c <__hi0bits>
 8018a6a:	2320      	movs	r3, #32
 8018a6c:	1a1b      	subs	r3, r3, r0
 8018a6e:	603b      	str	r3, [r7, #0]
 8018a70:	491c      	ldr	r1, [pc, #112]	; (8018ae4 <__b2d+0x94>)
 8018a72:	280a      	cmp	r0, #10
 8018a74:	dc16      	bgt.n	8018aa4 <__b2d+0x54>
 8018a76:	230b      	movs	r3, #11
 8018a78:	0027      	movs	r7, r4
 8018a7a:	1a1b      	subs	r3, r3, r0
 8018a7c:	40df      	lsrs	r7, r3
 8018a7e:	4339      	orrs	r1, r7
 8018a80:	469c      	mov	ip, r3
 8018a82:	000b      	movs	r3, r1
 8018a84:	2100      	movs	r1, #0
 8018a86:	42ae      	cmp	r6, r5
 8018a88:	d202      	bcs.n	8018a90 <__b2d+0x40>
 8018a8a:	9901      	ldr	r1, [sp, #4]
 8018a8c:	3908      	subs	r1, #8
 8018a8e:	6809      	ldr	r1, [r1, #0]
 8018a90:	3015      	adds	r0, #21
 8018a92:	4084      	lsls	r4, r0
 8018a94:	4660      	mov	r0, ip
 8018a96:	40c1      	lsrs	r1, r0
 8018a98:	430c      	orrs	r4, r1
 8018a9a:	0022      	movs	r2, r4
 8018a9c:	0010      	movs	r0, r2
 8018a9e:	0019      	movs	r1, r3
 8018aa0:	b003      	add	sp, #12
 8018aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018aa4:	2700      	movs	r7, #0
 8018aa6:	42ae      	cmp	r6, r5
 8018aa8:	d202      	bcs.n	8018ab0 <__b2d+0x60>
 8018aaa:	9d01      	ldr	r5, [sp, #4]
 8018aac:	3d08      	subs	r5, #8
 8018aae:	682f      	ldr	r7, [r5, #0]
 8018ab0:	380b      	subs	r0, #11
 8018ab2:	4684      	mov	ip, r0
 8018ab4:	1e03      	subs	r3, r0, #0
 8018ab6:	d012      	beq.n	8018ade <__b2d+0x8e>
 8018ab8:	409c      	lsls	r4, r3
 8018aba:	2020      	movs	r0, #32
 8018abc:	4321      	orrs	r1, r4
 8018abe:	003c      	movs	r4, r7
 8018ac0:	1ac0      	subs	r0, r0, r3
 8018ac2:	40c4      	lsrs	r4, r0
 8018ac4:	4321      	orrs	r1, r4
 8018ac6:	000b      	movs	r3, r1
 8018ac8:	2100      	movs	r1, #0
 8018aca:	42b5      	cmp	r5, r6
 8018acc:	d901      	bls.n	8018ad2 <__b2d+0x82>
 8018ace:	3d04      	subs	r5, #4
 8018ad0:	6829      	ldr	r1, [r5, #0]
 8018ad2:	4664      	mov	r4, ip
 8018ad4:	40c1      	lsrs	r1, r0
 8018ad6:	40a7      	lsls	r7, r4
 8018ad8:	430f      	orrs	r7, r1
 8018ada:	003a      	movs	r2, r7
 8018adc:	e7de      	b.n	8018a9c <__b2d+0x4c>
 8018ade:	4321      	orrs	r1, r4
 8018ae0:	000b      	movs	r3, r1
 8018ae2:	e7fa      	b.n	8018ada <__b2d+0x8a>
 8018ae4:	3ff00000 	.word	0x3ff00000

08018ae8 <__d2b>:
 8018ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018aea:	001d      	movs	r5, r3
 8018aec:	2101      	movs	r1, #1
 8018aee:	0014      	movs	r4, r2
 8018af0:	9f08      	ldr	r7, [sp, #32]
 8018af2:	f7ff fce5 	bl	80184c0 <_Balloc>
 8018af6:	032b      	lsls	r3, r5, #12
 8018af8:	006d      	lsls	r5, r5, #1
 8018afa:	0006      	movs	r6, r0
 8018afc:	0b1b      	lsrs	r3, r3, #12
 8018afe:	0d6d      	lsrs	r5, r5, #21
 8018b00:	d124      	bne.n	8018b4c <__d2b+0x64>
 8018b02:	9301      	str	r3, [sp, #4]
 8018b04:	2c00      	cmp	r4, #0
 8018b06:	d027      	beq.n	8018b58 <__d2b+0x70>
 8018b08:	4668      	mov	r0, sp
 8018b0a:	9400      	str	r4, [sp, #0]
 8018b0c:	f7ff fda0 	bl	8018650 <__lo0bits>
 8018b10:	9c00      	ldr	r4, [sp, #0]
 8018b12:	2800      	cmp	r0, #0
 8018b14:	d01e      	beq.n	8018b54 <__d2b+0x6c>
 8018b16:	9b01      	ldr	r3, [sp, #4]
 8018b18:	2120      	movs	r1, #32
 8018b1a:	001a      	movs	r2, r3
 8018b1c:	1a09      	subs	r1, r1, r0
 8018b1e:	408a      	lsls	r2, r1
 8018b20:	40c3      	lsrs	r3, r0
 8018b22:	4322      	orrs	r2, r4
 8018b24:	6172      	str	r2, [r6, #20]
 8018b26:	9301      	str	r3, [sp, #4]
 8018b28:	9c01      	ldr	r4, [sp, #4]
 8018b2a:	61b4      	str	r4, [r6, #24]
 8018b2c:	1e63      	subs	r3, r4, #1
 8018b2e:	419c      	sbcs	r4, r3
 8018b30:	3401      	adds	r4, #1
 8018b32:	6134      	str	r4, [r6, #16]
 8018b34:	2d00      	cmp	r5, #0
 8018b36:	d018      	beq.n	8018b6a <__d2b+0x82>
 8018b38:	4b12      	ldr	r3, [pc, #72]	; (8018b84 <__d2b+0x9c>)
 8018b3a:	18ed      	adds	r5, r5, r3
 8018b3c:	2335      	movs	r3, #53	; 0x35
 8018b3e:	182d      	adds	r5, r5, r0
 8018b40:	603d      	str	r5, [r7, #0]
 8018b42:	1a18      	subs	r0, r3, r0
 8018b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b46:	6018      	str	r0, [r3, #0]
 8018b48:	0030      	movs	r0, r6
 8018b4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b4c:	2280      	movs	r2, #128	; 0x80
 8018b4e:	0352      	lsls	r2, r2, #13
 8018b50:	4313      	orrs	r3, r2
 8018b52:	e7d6      	b.n	8018b02 <__d2b+0x1a>
 8018b54:	6174      	str	r4, [r6, #20]
 8018b56:	e7e7      	b.n	8018b28 <__d2b+0x40>
 8018b58:	a801      	add	r0, sp, #4
 8018b5a:	f7ff fd79 	bl	8018650 <__lo0bits>
 8018b5e:	2401      	movs	r4, #1
 8018b60:	9b01      	ldr	r3, [sp, #4]
 8018b62:	6134      	str	r4, [r6, #16]
 8018b64:	6173      	str	r3, [r6, #20]
 8018b66:	3020      	adds	r0, #32
 8018b68:	e7e4      	b.n	8018b34 <__d2b+0x4c>
 8018b6a:	4b07      	ldr	r3, [pc, #28]	; (8018b88 <__d2b+0xa0>)
 8018b6c:	18c0      	adds	r0, r0, r3
 8018b6e:	4b07      	ldr	r3, [pc, #28]	; (8018b8c <__d2b+0xa4>)
 8018b70:	6038      	str	r0, [r7, #0]
 8018b72:	18e3      	adds	r3, r4, r3
 8018b74:	009b      	lsls	r3, r3, #2
 8018b76:	18f3      	adds	r3, r6, r3
 8018b78:	6958      	ldr	r0, [r3, #20]
 8018b7a:	f7ff fd4f 	bl	801861c <__hi0bits>
 8018b7e:	0164      	lsls	r4, r4, #5
 8018b80:	1a20      	subs	r0, r4, r0
 8018b82:	e7df      	b.n	8018b44 <__d2b+0x5c>
 8018b84:	fffffbcd 	.word	0xfffffbcd
 8018b88:	fffffbce 	.word	0xfffffbce
 8018b8c:	3fffffff 	.word	0x3fffffff

08018b90 <__ratio>:
 8018b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b92:	b085      	sub	sp, #20
 8018b94:	000f      	movs	r7, r1
 8018b96:	a902      	add	r1, sp, #8
 8018b98:	0006      	movs	r6, r0
 8018b9a:	f7ff ff59 	bl	8018a50 <__b2d>
 8018b9e:	0004      	movs	r4, r0
 8018ba0:	000d      	movs	r5, r1
 8018ba2:	0038      	movs	r0, r7
 8018ba4:	a903      	add	r1, sp, #12
 8018ba6:	9400      	str	r4, [sp, #0]
 8018ba8:	9501      	str	r5, [sp, #4]
 8018baa:	f7ff ff51 	bl	8018a50 <__b2d>
 8018bae:	6936      	ldr	r6, [r6, #16]
 8018bb0:	693f      	ldr	r7, [r7, #16]
 8018bb2:	0002      	movs	r2, r0
 8018bb4:	1bf7      	subs	r7, r6, r7
 8018bb6:	017e      	lsls	r6, r7, #5
 8018bb8:	46b4      	mov	ip, r6
 8018bba:	9f03      	ldr	r7, [sp, #12]
 8018bbc:	9e02      	ldr	r6, [sp, #8]
 8018bbe:	000b      	movs	r3, r1
 8018bc0:	1bf6      	subs	r6, r6, r7
 8018bc2:	4466      	add	r6, ip
 8018bc4:	0537      	lsls	r7, r6, #20
 8018bc6:	2e00      	cmp	r6, #0
 8018bc8:	dd07      	ble.n	8018bda <__ratio+0x4a>
 8018bca:	1979      	adds	r1, r7, r5
 8018bcc:	9101      	str	r1, [sp, #4]
 8018bce:	9800      	ldr	r0, [sp, #0]
 8018bd0:	9901      	ldr	r1, [sp, #4]
 8018bd2:	f7e8 fd25 	bl	8001620 <__aeabi_ddiv>
 8018bd6:	b005      	add	sp, #20
 8018bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018bda:	1bcb      	subs	r3, r1, r7
 8018bdc:	e7f7      	b.n	8018bce <__ratio+0x3e>

08018bde <__copybits>:
 8018bde:	0013      	movs	r3, r2
 8018be0:	3901      	subs	r1, #1
 8018be2:	b510      	push	{r4, lr}
 8018be4:	1149      	asrs	r1, r1, #5
 8018be6:	6912      	ldr	r2, [r2, #16]
 8018be8:	3101      	adds	r1, #1
 8018bea:	0089      	lsls	r1, r1, #2
 8018bec:	3314      	adds	r3, #20
 8018bee:	0092      	lsls	r2, r2, #2
 8018bf0:	1841      	adds	r1, r0, r1
 8018bf2:	189a      	adds	r2, r3, r2
 8018bf4:	429a      	cmp	r2, r3
 8018bf6:	d803      	bhi.n	8018c00 <__copybits+0x22>
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	4281      	cmp	r1, r0
 8018bfc:	d803      	bhi.n	8018c06 <__copybits+0x28>
 8018bfe:	bd10      	pop	{r4, pc}
 8018c00:	cb10      	ldmia	r3!, {r4}
 8018c02:	c010      	stmia	r0!, {r4}
 8018c04:	e7f6      	b.n	8018bf4 <__copybits+0x16>
 8018c06:	c008      	stmia	r0!, {r3}
 8018c08:	e7f7      	b.n	8018bfa <__copybits+0x1c>

08018c0a <__any_on>:
 8018c0a:	0002      	movs	r2, r0
 8018c0c:	6900      	ldr	r0, [r0, #16]
 8018c0e:	b510      	push	{r4, lr}
 8018c10:	3214      	adds	r2, #20
 8018c12:	114b      	asrs	r3, r1, #5
 8018c14:	4298      	cmp	r0, r3
 8018c16:	db12      	blt.n	8018c3e <__any_on+0x34>
 8018c18:	dd0b      	ble.n	8018c32 <__any_on+0x28>
 8018c1a:	201f      	movs	r0, #31
 8018c1c:	4001      	ands	r1, r0
 8018c1e:	d008      	beq.n	8018c32 <__any_on+0x28>
 8018c20:	0098      	lsls	r0, r3, #2
 8018c22:	5884      	ldr	r4, [r0, r2]
 8018c24:	0020      	movs	r0, r4
 8018c26:	40c8      	lsrs	r0, r1
 8018c28:	4088      	lsls	r0, r1
 8018c2a:	0001      	movs	r1, r0
 8018c2c:	2001      	movs	r0, #1
 8018c2e:	428c      	cmp	r4, r1
 8018c30:	d104      	bne.n	8018c3c <__any_on+0x32>
 8018c32:	009b      	lsls	r3, r3, #2
 8018c34:	18d3      	adds	r3, r2, r3
 8018c36:	4293      	cmp	r3, r2
 8018c38:	d803      	bhi.n	8018c42 <__any_on+0x38>
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	bd10      	pop	{r4, pc}
 8018c3e:	0003      	movs	r3, r0
 8018c40:	e7f7      	b.n	8018c32 <__any_on+0x28>
 8018c42:	3b04      	subs	r3, #4
 8018c44:	6819      	ldr	r1, [r3, #0]
 8018c46:	2900      	cmp	r1, #0
 8018c48:	d0f5      	beq.n	8018c36 <__any_on+0x2c>
 8018c4a:	2001      	movs	r0, #1
 8018c4c:	e7f6      	b.n	8018c3c <__any_on+0x32>
	...

08018c50 <frexp>:
 8018c50:	b570      	push	{r4, r5, r6, lr}
 8018c52:	0014      	movs	r4, r2
 8018c54:	2500      	movs	r5, #0
 8018c56:	6025      	str	r5, [r4, #0]
 8018c58:	4d10      	ldr	r5, [pc, #64]	; (8018c9c <frexp+0x4c>)
 8018c5a:	004b      	lsls	r3, r1, #1
 8018c5c:	000a      	movs	r2, r1
 8018c5e:	085b      	lsrs	r3, r3, #1
 8018c60:	42ab      	cmp	r3, r5
 8018c62:	dc1a      	bgt.n	8018c9a <frexp+0x4a>
 8018c64:	001d      	movs	r5, r3
 8018c66:	4305      	orrs	r5, r0
 8018c68:	d017      	beq.n	8018c9a <frexp+0x4a>
 8018c6a:	4d0d      	ldr	r5, [pc, #52]	; (8018ca0 <frexp+0x50>)
 8018c6c:	42ab      	cmp	r3, r5
 8018c6e:	dc09      	bgt.n	8018c84 <frexp+0x34>
 8018c70:	2200      	movs	r2, #0
 8018c72:	4b0c      	ldr	r3, [pc, #48]	; (8018ca4 <frexp+0x54>)
 8018c74:	f7e9 f8de 	bl	8001e34 <__aeabi_dmul>
 8018c78:	2536      	movs	r5, #54	; 0x36
 8018c7a:	000a      	movs	r2, r1
 8018c7c:	004b      	lsls	r3, r1, #1
 8018c7e:	426d      	negs	r5, r5
 8018c80:	085b      	lsrs	r3, r3, #1
 8018c82:	6025      	str	r5, [r4, #0]
 8018c84:	4d08      	ldr	r5, [pc, #32]	; (8018ca8 <frexp+0x58>)
 8018c86:	151b      	asrs	r3, r3, #20
 8018c88:	195b      	adds	r3, r3, r5
 8018c8a:	6825      	ldr	r5, [r4, #0]
 8018c8c:	18eb      	adds	r3, r5, r3
 8018c8e:	6023      	str	r3, [r4, #0]
 8018c90:	4b06      	ldr	r3, [pc, #24]	; (8018cac <frexp+0x5c>)
 8018c92:	401a      	ands	r2, r3
 8018c94:	4b06      	ldr	r3, [pc, #24]	; (8018cb0 <frexp+0x60>)
 8018c96:	4313      	orrs	r3, r2
 8018c98:	0019      	movs	r1, r3
 8018c9a:	bd70      	pop	{r4, r5, r6, pc}
 8018c9c:	7fefffff 	.word	0x7fefffff
 8018ca0:	000fffff 	.word	0x000fffff
 8018ca4:	43500000 	.word	0x43500000
 8018ca8:	fffffc02 	.word	0xfffffc02
 8018cac:	800fffff 	.word	0x800fffff
 8018cb0:	3fe00000 	.word	0x3fe00000

08018cb4 <__ssprint_r>:
 8018cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cb6:	6893      	ldr	r3, [r2, #8]
 8018cb8:	b087      	sub	sp, #28
 8018cba:	9002      	str	r0, [sp, #8]
 8018cbc:	000c      	movs	r4, r1
 8018cbe:	0016      	movs	r6, r2
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d063      	beq.n	8018d8c <__ssprint_r+0xd8>
 8018cc4:	6813      	ldr	r3, [r2, #0]
 8018cc6:	9303      	str	r3, [sp, #12]
 8018cc8:	2300      	movs	r3, #0
 8018cca:	001f      	movs	r7, r3
 8018ccc:	9305      	str	r3, [sp, #20]
 8018cce:	2f00      	cmp	r7, #0
 8018cd0:	d02e      	beq.n	8018d30 <__ssprint_r+0x7c>
 8018cd2:	68a5      	ldr	r5, [r4, #8]
 8018cd4:	42af      	cmp	r7, r5
 8018cd6:	d347      	bcc.n	8018d68 <__ssprint_r+0xb4>
 8018cd8:	2390      	movs	r3, #144	; 0x90
 8018cda:	89a2      	ldrh	r2, [r4, #12]
 8018cdc:	00db      	lsls	r3, r3, #3
 8018cde:	421a      	tst	r2, r3
 8018ce0:	d042      	beq.n	8018d68 <__ssprint_r+0xb4>
 8018ce2:	2003      	movs	r0, #3
 8018ce4:	6921      	ldr	r1, [r4, #16]
 8018ce6:	6823      	ldr	r3, [r4, #0]
 8018ce8:	1a5b      	subs	r3, r3, r1
 8018cea:	9304      	str	r3, [sp, #16]
 8018cec:	6963      	ldr	r3, [r4, #20]
 8018cee:	4343      	muls	r3, r0
 8018cf0:	0fd8      	lsrs	r0, r3, #31
 8018cf2:	18c3      	adds	r3, r0, r3
 8018cf4:	105b      	asrs	r3, r3, #1
 8018cf6:	9301      	str	r3, [sp, #4]
 8018cf8:	9b04      	ldr	r3, [sp, #16]
 8018cfa:	9801      	ldr	r0, [sp, #4]
 8018cfc:	3301      	adds	r3, #1
 8018cfe:	19db      	adds	r3, r3, r7
 8018d00:	4283      	cmp	r3, r0
 8018d02:	d900      	bls.n	8018d06 <__ssprint_r+0x52>
 8018d04:	9301      	str	r3, [sp, #4]
 8018d06:	0553      	lsls	r3, r2, #21
 8018d08:	d544      	bpl.n	8018d94 <__ssprint_r+0xe0>
 8018d0a:	9901      	ldr	r1, [sp, #4]
 8018d0c:	9802      	ldr	r0, [sp, #8]
 8018d0e:	f7fb fa85 	bl	801421c <_malloc_r>
 8018d12:	1e05      	subs	r5, r0, #0
 8018d14:	d114      	bne.n	8018d40 <__ssprint_r+0x8c>
 8018d16:	230c      	movs	r3, #12
 8018d18:	9a02      	ldr	r2, [sp, #8]
 8018d1a:	2001      	movs	r0, #1
 8018d1c:	6013      	str	r3, [r2, #0]
 8018d1e:	2340      	movs	r3, #64	; 0x40
 8018d20:	89a2      	ldrh	r2, [r4, #12]
 8018d22:	4240      	negs	r0, r0
 8018d24:	4313      	orrs	r3, r2
 8018d26:	81a3      	strh	r3, [r4, #12]
 8018d28:	2300      	movs	r3, #0
 8018d2a:	60b3      	str	r3, [r6, #8]
 8018d2c:	6073      	str	r3, [r6, #4]
 8018d2e:	e02f      	b.n	8018d90 <__ssprint_r+0xdc>
 8018d30:	9b03      	ldr	r3, [sp, #12]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	9305      	str	r3, [sp, #20]
 8018d36:	9b03      	ldr	r3, [sp, #12]
 8018d38:	685f      	ldr	r7, [r3, #4]
 8018d3a:	3308      	adds	r3, #8
 8018d3c:	9303      	str	r3, [sp, #12]
 8018d3e:	e7c6      	b.n	8018cce <__ssprint_r+0x1a>
 8018d40:	9a04      	ldr	r2, [sp, #16]
 8018d42:	6921      	ldr	r1, [r4, #16]
 8018d44:	f7fb fca3 	bl	801468e <memcpy>
 8018d48:	89a3      	ldrh	r3, [r4, #12]
 8018d4a:	4a18      	ldr	r2, [pc, #96]	; (8018dac <__ssprint_r+0xf8>)
 8018d4c:	401a      	ands	r2, r3
 8018d4e:	2380      	movs	r3, #128	; 0x80
 8018d50:	4313      	orrs	r3, r2
 8018d52:	81a3      	strh	r3, [r4, #12]
 8018d54:	9b04      	ldr	r3, [sp, #16]
 8018d56:	6125      	str	r5, [r4, #16]
 8018d58:	18ed      	adds	r5, r5, r3
 8018d5a:	6025      	str	r5, [r4, #0]
 8018d5c:	003d      	movs	r5, r7
 8018d5e:	9b01      	ldr	r3, [sp, #4]
 8018d60:	9a04      	ldr	r2, [sp, #16]
 8018d62:	6163      	str	r3, [r4, #20]
 8018d64:	1a9b      	subs	r3, r3, r2
 8018d66:	60a3      	str	r3, [r4, #8]
 8018d68:	42bd      	cmp	r5, r7
 8018d6a:	d900      	bls.n	8018d6e <__ssprint_r+0xba>
 8018d6c:	003d      	movs	r5, r7
 8018d6e:	002a      	movs	r2, r5
 8018d70:	9905      	ldr	r1, [sp, #20]
 8018d72:	6820      	ldr	r0, [r4, #0]
 8018d74:	f7ff fb91 	bl	801849a <memmove>
 8018d78:	68a3      	ldr	r3, [r4, #8]
 8018d7a:	1b5b      	subs	r3, r3, r5
 8018d7c:	60a3      	str	r3, [r4, #8]
 8018d7e:	6823      	ldr	r3, [r4, #0]
 8018d80:	195d      	adds	r5, r3, r5
 8018d82:	68b3      	ldr	r3, [r6, #8]
 8018d84:	6025      	str	r5, [r4, #0]
 8018d86:	1bdb      	subs	r3, r3, r7
 8018d88:	60b3      	str	r3, [r6, #8]
 8018d8a:	d1d1      	bne.n	8018d30 <__ssprint_r+0x7c>
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	6070      	str	r0, [r6, #4]
 8018d90:	b007      	add	sp, #28
 8018d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d94:	9a01      	ldr	r2, [sp, #4]
 8018d96:	9802      	ldr	r0, [sp, #8]
 8018d98:	f7fb fcbe 	bl	8014718 <_realloc_r>
 8018d9c:	1e05      	subs	r5, r0, #0
 8018d9e:	d1d9      	bne.n	8018d54 <__ssprint_r+0xa0>
 8018da0:	6921      	ldr	r1, [r4, #16]
 8018da2:	9802      	ldr	r0, [sp, #8]
 8018da4:	f7fe ff78 	bl	8017c98 <_free_r>
 8018da8:	e7b5      	b.n	8018d16 <__ssprint_r+0x62>
 8018daa:	46c0      	nop			; (mov r8, r8)
 8018dac:	fffffb7f 	.word	0xfffffb7f

08018db0 <__register_exitproc>:
 8018db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018db2:	4d29      	ldr	r5, [pc, #164]	; (8018e58 <__register_exitproc+0xa8>)
 8018db4:	0006      	movs	r6, r0
 8018db6:	6828      	ldr	r0, [r5, #0]
 8018db8:	9301      	str	r3, [sp, #4]
 8018dba:	9100      	str	r1, [sp, #0]
 8018dbc:	0017      	movs	r7, r2
 8018dbe:	f7ff fb5f 	bl	8018480 <__retarget_lock_acquire_recursive>
 8018dc2:	4b26      	ldr	r3, [pc, #152]	; (8018e5c <__register_exitproc+0xac>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	001c      	movs	r4, r3
 8018dc8:	34fc      	adds	r4, #252	; 0xfc
 8018dca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018dcc:	2800      	cmp	r0, #0
 8018dce:	d103      	bne.n	8018dd8 <__register_exitproc+0x28>
 8018dd0:	334d      	adds	r3, #77	; 0x4d
 8018dd2:	33ff      	adds	r3, #255	; 0xff
 8018dd4:	0018      	movs	r0, r3
 8018dd6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018dd8:	6843      	ldr	r3, [r0, #4]
 8018dda:	2b1f      	cmp	r3, #31
 8018ddc:	dd18      	ble.n	8018e10 <__register_exitproc+0x60>
 8018dde:	4b20      	ldr	r3, [pc, #128]	; (8018e60 <__register_exitproc+0xb0>)
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d105      	bne.n	8018df0 <__register_exitproc+0x40>
 8018de4:	6828      	ldr	r0, [r5, #0]
 8018de6:	f7ff fb4c 	bl	8018482 <__retarget_lock_release_recursive>
 8018dea:	2001      	movs	r0, #1
 8018dec:	4240      	negs	r0, r0
 8018dee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018df0:	20c8      	movs	r0, #200	; 0xc8
 8018df2:	0040      	lsls	r0, r0, #1
 8018df4:	f7fb f9fe 	bl	80141f4 <malloc>
 8018df8:	2800      	cmp	r0, #0
 8018dfa:	d0f3      	beq.n	8018de4 <__register_exitproc+0x34>
 8018dfc:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8018dfe:	2300      	movs	r3, #0
 8018e00:	6002      	str	r2, [r0, #0]
 8018e02:	22c4      	movs	r2, #196	; 0xc4
 8018e04:	0052      	lsls	r2, r2, #1
 8018e06:	6043      	str	r3, [r0, #4]
 8018e08:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018e0a:	5083      	str	r3, [r0, r2]
 8018e0c:	3204      	adds	r2, #4
 8018e0e:	5083      	str	r3, [r0, r2]
 8018e10:	6843      	ldr	r3, [r0, #4]
 8018e12:	2e00      	cmp	r6, #0
 8018e14:	d014      	beq.n	8018e40 <__register_exitproc+0x90>
 8018e16:	009a      	lsls	r2, r3, #2
 8018e18:	1882      	adds	r2, r0, r2
 8018e1a:	0011      	movs	r1, r2
 8018e1c:	3188      	adds	r1, #136	; 0x88
 8018e1e:	600f      	str	r7, [r1, #0]
 8018e20:	2101      	movs	r1, #1
 8018e22:	0004      	movs	r4, r0
 8018e24:	4099      	lsls	r1, r3
 8018e26:	3485      	adds	r4, #133	; 0x85
 8018e28:	34ff      	adds	r4, #255	; 0xff
 8018e2a:	6865      	ldr	r5, [r4, #4]
 8018e2c:	32fc      	adds	r2, #252	; 0xfc
 8018e2e:	430d      	orrs	r5, r1
 8018e30:	6065      	str	r5, [r4, #4]
 8018e32:	9d01      	ldr	r5, [sp, #4]
 8018e34:	60d5      	str	r5, [r2, #12]
 8018e36:	2e02      	cmp	r6, #2
 8018e38:	d102      	bne.n	8018e40 <__register_exitproc+0x90>
 8018e3a:	68a2      	ldr	r2, [r4, #8]
 8018e3c:	4311      	orrs	r1, r2
 8018e3e:	60a1      	str	r1, [r4, #8]
 8018e40:	1c5a      	adds	r2, r3, #1
 8018e42:	6042      	str	r2, [r0, #4]
 8018e44:	3302      	adds	r3, #2
 8018e46:	9a00      	ldr	r2, [sp, #0]
 8018e48:	009b      	lsls	r3, r3, #2
 8018e4a:	501a      	str	r2, [r3, r0]
 8018e4c:	4b02      	ldr	r3, [pc, #8]	; (8018e58 <__register_exitproc+0xa8>)
 8018e4e:	6818      	ldr	r0, [r3, #0]
 8018e50:	f7ff fb17 	bl	8018482 <__retarget_lock_release_recursive>
 8018e54:	2000      	movs	r0, #0
 8018e56:	e7ca      	b.n	8018dee <__register_exitproc+0x3e>
 8018e58:	20000ac4 	.word	0x20000ac4
 8018e5c:	0801bf88 	.word	0x0801bf88
 8018e60:	080141f5 	.word	0x080141f5

08018e64 <_calloc_r>:
 8018e64:	b510      	push	{r4, lr}
 8018e66:	4351      	muls	r1, r2
 8018e68:	f7fb f9d8 	bl	801421c <_malloc_r>
 8018e6c:	1e04      	subs	r4, r0, #0
 8018e6e:	d01a      	beq.n	8018ea6 <_calloc_r+0x42>
 8018e70:	0003      	movs	r3, r0
 8018e72:	3b08      	subs	r3, #8
 8018e74:	685a      	ldr	r2, [r3, #4]
 8018e76:	2303      	movs	r3, #3
 8018e78:	439a      	bics	r2, r3
 8018e7a:	3a04      	subs	r2, #4
 8018e7c:	2a24      	cmp	r2, #36	; 0x24
 8018e7e:	d819      	bhi.n	8018eb4 <_calloc_r+0x50>
 8018e80:	0003      	movs	r3, r0
 8018e82:	2a13      	cmp	r2, #19
 8018e84:	d90b      	bls.n	8018e9e <_calloc_r+0x3a>
 8018e86:	2100      	movs	r1, #0
 8018e88:	3308      	adds	r3, #8
 8018e8a:	6001      	str	r1, [r0, #0]
 8018e8c:	6041      	str	r1, [r0, #4]
 8018e8e:	2a1b      	cmp	r2, #27
 8018e90:	d905      	bls.n	8018e9e <_calloc_r+0x3a>
 8018e92:	6081      	str	r1, [r0, #8]
 8018e94:	60c1      	str	r1, [r0, #12]
 8018e96:	2a24      	cmp	r2, #36	; 0x24
 8018e98:	d007      	beq.n	8018eaa <_calloc_r+0x46>
 8018e9a:	0003      	movs	r3, r0
 8018e9c:	3310      	adds	r3, #16
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	601a      	str	r2, [r3, #0]
 8018ea2:	605a      	str	r2, [r3, #4]
 8018ea4:	609a      	str	r2, [r3, #8]
 8018ea6:	0020      	movs	r0, r4
 8018ea8:	bd10      	pop	{r4, pc}
 8018eaa:	0003      	movs	r3, r0
 8018eac:	6101      	str	r1, [r0, #16]
 8018eae:	3318      	adds	r3, #24
 8018eb0:	6141      	str	r1, [r0, #20]
 8018eb2:	e7f4      	b.n	8018e9e <_calloc_r+0x3a>
 8018eb4:	2100      	movs	r1, #0
 8018eb6:	f7fb fbf3 	bl	80146a0 <memset>
 8018eba:	e7f4      	b.n	8018ea6 <_calloc_r+0x42>

08018ebc <_sbrk>:
 8018ebc:	4b05      	ldr	r3, [pc, #20]	; (8018ed4 <_sbrk+0x18>)
 8018ebe:	0002      	movs	r2, r0
 8018ec0:	6819      	ldr	r1, [r3, #0]
 8018ec2:	2900      	cmp	r1, #0
 8018ec4:	d101      	bne.n	8018eca <_sbrk+0xe>
 8018ec6:	4904      	ldr	r1, [pc, #16]	; (8018ed8 <_sbrk+0x1c>)
 8018ec8:	6019      	str	r1, [r3, #0]
 8018eca:	6818      	ldr	r0, [r3, #0]
 8018ecc:	1882      	adds	r2, r0, r2
 8018ece:	601a      	str	r2, [r3, #0]
 8018ed0:	4770      	bx	lr
 8018ed2:	46c0      	nop			; (mov r8, r8)
 8018ed4:	20006dc8 	.word	0x20006dc8
 8018ed8:	20007400 	.word	0x20007400

08018edc <_init>:
 8018edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ede:	46c0      	nop			; (mov r8, r8)
 8018ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ee2:	bc08      	pop	{r3}
 8018ee4:	469e      	mov	lr, r3
 8018ee6:	4770      	bx	lr

08018ee8 <_fini>:
 8018ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eea:	46c0      	nop			; (mov r8, r8)
 8018eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eee:	bc08      	pop	{r3}
 8018ef0:	469e      	mov	lr, r3
 8018ef2:	4770      	bx	lr
