
H0AR9x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018680  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033ac  08018740  08018740  00028740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801baec  0801baec  00030ac8  2**0
                  CONTENTS
  4 .ARM          00000008  0801baec  0801baec  0002baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801baf4  0801baf4  00030ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801baf4  0801baf4  0002baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bafc  0801bafc  0002bafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000001c  20000000  0801bb00  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000aa8  20000020  0801bb1c  00030020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006530  20000ac8  0801c5c4  00030ac8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20006ff8  0801c5c4  00036ff8  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005ae1b  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 000091ab  00000000  00000000  0008b90b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d620  00000000  00000000  00094ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001fa0  00000000  00000000  000b20d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002378  00000000  00000000  000b4078  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017ec2  00000000  00000000  000b63f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b3be  00000000  00000000  000ce2b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d9670  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bf0  00000000  00000000  000d96ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ac8 	.word	0x20000ac8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08018724 	.word	0x08018724

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000acc 	.word	0x20000acc
 8000100:	08018724 	.word	0x08018724

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08018774 	.word	0x08018774
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	080187b4 	.word	0x080187b4
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	080187f4 	.word	0x080187f4
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <Send_BOS_Message>:
 *New private function [inside SendMessageFromPort() ] for sending BOS Messages.
 *instead of writePxDMAMutex (the previous function)
 */

HAL_StatusTypeDef Send_BOS_Message(uint8_t port, uint8_t* buffer, uint16_t n, uint32_t mutexTimeout)
{
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
 8002d28:	000f      	movs	r7, r1
 8002d2a:	0016      	movs	r6, r2
 8002d2c:	001c      	movs	r4, r3
	HAL_StatusTypeDef result =HAL_ERROR;

	if(GetUart(port) != NULL){
 8002d2e:	9001      	str	r0, [sp, #4]
 8002d30:	f00b f96e 	bl	800e010 <GetUart>
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d34:	2501      	movs	r5, #1
	if(GetUart(port) != NULL){
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d01c      	beq.n	8002d74 <Send_BOS_Message+0x50>
		/* Wait for the mutex to be available. */
		if(osSemaphoreWait(PxTxSemaphoreHandle[port],mutexTimeout) == osOK){
 8002d3a:	9b01      	ldr	r3, [sp, #4]
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <Send_BOS_Message+0x60>)
 8002d40:	5898      	ldr	r0, [r3, r2]
 8002d42:	0021      	movs	r1, r4
 8002d44:	f00b fb2c 	bl	800e3a0 <osSemaphoreWait>
 8002d48:	2800      	cmp	r0, #0
 8002d4a:	d113      	bne.n	8002d74 <Send_BOS_Message+0x50>
			for(uint8_t i=0;i<n;i++)
 8002d4c:	2e00      	cmp	r6, #0
 8002d4e:	d017      	beq.n	8002d80 <Send_BOS_Message+0x5c>
 8002d50:	2400      	movs	r4, #0
			{
				result =HAL_UART_Transmit_IT(GetUart(port),buffer,1);
 8002d52:	9801      	ldr	r0, [sp, #4]
 8002d54:	f00b f95c 	bl	800e010 <GetUart>
 8002d58:	2201      	movs	r2, #1
 8002d5a:	0039      	movs	r1, r7
 8002d5c:	f010 f8fe 	bl	8012f5c <HAL_UART_Transmit_IT>
 8002d60:	0005      	movs	r5, r0
				buffer++;
 8002d62:	3701      	adds	r7, #1
				//Delay_us(500);
				Delay_ms(2);
 8002d64:	2002      	movs	r0, #2
 8002d66:	f00d fa4d 	bl	8010204 <HAL_Delay>
			for(uint8_t i=0;i<n;i++)
 8002d6a:	3401      	adds	r4, #1
 8002d6c:	b2e4      	uxtb	r4, r4
 8002d6e:	b2a3      	uxth	r3, r4
 8002d70:	42b3      	cmp	r3, r6
 8002d72:	d3ee      	bcc.n	8002d52 <Send_BOS_Message+0x2e>
			}
		}
	}
	Delay_ms(10);// Delay Between Sending Two Messages.
 8002d74:	200a      	movs	r0, #10
 8002d76:	f00d fa45 	bl	8010204 <HAL_Delay>
	return result;
}
 8002d7a:	0028      	movs	r0, r5
 8002d7c:	b003      	add	sp, #12
 8002d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef result =HAL_ERROR;
 8002d80:	2501      	movs	r5, #1
 8002d82:	e7f7      	b.n	8002d74 <Send_BOS_Message+0x50>
 8002d84:	20006a90 	.word	0x20006a90

08002d88 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d8a:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d8c:	4b23      	ldr	r3, [pc, #140]	; (8002e1c <LoadROtopology+0x94>)
 8002d8e:	881b      	ldrh	r3, [r3, #0]
 8002d90:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d92:	4a23      	ldr	r2, [pc, #140]	; (8002e20 <LoadROtopology+0x98>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d033      	beq.n	8002e00 <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d98:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d9a:	d039      	beq.n	8002e10 <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d9c:	4921      	ldr	r1, [pc, #132]	; (8002e24 <LoadROtopology+0x9c>)
 8002d9e:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002da0:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <LoadROtopology+0xa0>)
 8002da2:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002da4:	4b1f      	ldr	r3, [pc, #124]	; (8002e24 <LoadROtopology+0x9c>)
 8002da6:	781e      	ldrb	r6, [r3, #0]
 8002da8:	2e00      	cmp	r6, #0
 8002daa:	d035      	beq.n	8002e18 <LoadROtopology+0x90>
 8002dac:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002dae:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002db0:	466b      	mov	r3, sp
 8002db2:	1dd9      	adds	r1, r3, #7
 8002db4:	2300      	movs	r3, #0
 8002db6:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002db8:	4d1c      	ldr	r5, [pc, #112]	; (8002e2c <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002dba:	4663      	mov	r3, ip
 8002dbc:	700b      	strb	r3, [r1, #0]
 8002dbe:	780b      	ldrb	r3, [r1, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b0a      	cmp	r3, #10
 8002dc4:	d815      	bhi.n	8002df2 <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002dc6:	1e63      	subs	r3, r4, #1
 8002dc8:	0098      	lsls	r0, r3, #2
 8002dca:	18c0      	adds	r0, r0, r3
 8002dcc:	0040      	lsls	r0, r0, #1
 8002dce:	18c0      	adds	r0, r0, r3
 8002dd0:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <LoadROtopology+0x94>)
 8002dd2:	18d7      	adds	r7, r2, r3
 8002dd4:	780b      	ldrb	r3, [r1, #0]
 8002dd6:	883f      	ldrh	r7, [r7, #0]
 8002dd8:	181b      	adds	r3, r3, r0
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002dde:	3202      	adds	r2, #2
 8002de0:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002de2:	780b      	ldrb	r3, [r1, #0]
 8002de4:	3301      	adds	r3, #1
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	700b      	strb	r3, [r1, #0]
 8002dea:	780b      	ldrb	r3, [r1, #0]
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b0a      	cmp	r3, #10
 8002df0:	d9ee      	bls.n	8002dd0 <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002df2:	3401      	adds	r4, #1
 8002df4:	b2e4      	uxtb	r4, r4
 8002df6:	42b4      	cmp	r4, r6
 8002df8:	d9df      	bls.n	8002dba <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002dfa:	2000      	movs	r0, #0
}
 8002dfc:	b003      	add	sp, #12
 8002dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002e00:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <LoadROtopology+0x9c>)
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <LoadROtopology+0xa0>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002e0c:	20fa      	movs	r0, #250	; 0xfa
 8002e0e:	e7f5      	b.n	8002dfc <LoadROtopology+0x74>
			N =1;
 8002e10:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <LoadROtopology+0x9c>)
 8002e12:	2101      	movs	r1, #1
 8002e14:	7011      	strb	r1, [r2, #0]
 8002e16:	e7c3      	b.n	8002da0 <LoadROtopology+0x18>
	return result;
 8002e18:	2000      	movs	r0, #0
 8002e1a:	e7ef      	b.n	8002dfc <LoadROtopology+0x74>
 8002e1c:	0801d800 	.word	0x0801d800
 8002e20:	0000ffff 	.word	0x0000ffff
 8002e24:	20000044 	.word	0x20000044
 8002e28:	20001792 	.word	0x20001792
 8002e2c:	20001194 	.word	0x20001194

08002e30 <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <LoadEEportsDir+0x40>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002e36:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d017      	beq.n	8002e6c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e3c:	490d      	ldr	r1, [pc, #52]	; (8002e74 <LoadEEportsDir+0x44>)
 8002e3e:	2002      	movs	r0, #2
 8002e40:	f008 fe58 	bl	800baf4 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002e44:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002e46:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002e48:	4f09      	ldr	r7, [pc, #36]	; (8002e70 <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e4a:	4e0a      	ldr	r6, [pc, #40]	; (8002e74 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002e4c:	3401      	adds	r4, #1
 8002e4e:	b2e4      	uxtb	r4, r4
 8002e50:	783b      	ldrb	r3, [r7, #0]
 8002e52:	42a3      	cmp	r3, r4
 8002e54:	d30a      	bcc.n	8002e6c <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002e56:	1e61      	subs	r1, r4, #1
 8002e58:	0049      	lsls	r1, r1, #1
 8002e5a:	1989      	adds	r1, r1, r6
 8002e5c:	1c60      	adds	r0, r4, #1
 8002e5e:	f008 fe49 	bl	800baf4 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002e62:	1ca3      	adds	r3, r4, #2
 8002e64:	2b1b      	cmp	r3, #27
 8002e66:	ddf1      	ble.n	8002e4c <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e68:	250a      	movs	r5, #10
 8002e6a:	e7ef      	b.n	8002e4c <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e6c:	0028      	movs	r0, r5
 8002e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e70:	20000044 	.word	0x20000044
 8002e74:	20006f50 	.word	0x20006f50

08002e78 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7a:	46de      	mov	lr, fp
 8002e7c:	4657      	mov	r7, sl
 8002e7e:	464e      	mov	r6, r9
 8002e80:	4645      	mov	r5, r8
 8002e82:	b5e0      	push	{r5, r6, r7, lr}
 8002e84:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e86:	466b      	mov	r3, sp
 8002e88:	2200      	movs	r2, #0
 8002e8a:	80da      	strh	r2, [r3, #6]
 8002e8c:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e8e:	2700      	movs	r7, #0
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <LoadEEalias+0x7c>)
 8002e92:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e94:	469b      	mov	fp, r3
 8002e96:	e00c      	b.n	8002eb2 <LoadEEalias+0x3a>
 8002e98:	464b      	mov	r3, r9
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	444b      	add	r3, r9
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	445b      	add	r3, fp
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002ea6:	3701      	adds	r7, #1
 8002ea8:	b2ff      	uxtb	r7, r7
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <LoadEEalias+0x80>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	42bb      	cmp	r3, r7
 8002eb0:	d317      	bcc.n	8002ee2 <LoadEEalias+0x6a>
 8002eb2:	00bd      	lsls	r5, r7, #2
 8002eb4:	19ed      	adds	r5, r5, r7
 8002eb6:	006d      	lsls	r5, r5, #1
 8002eb8:	4455      	add	r5, sl
 8002eba:	1d63      	adds	r3, r4, #5
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002ec0:	466b      	mov	r3, sp
 8002ec2:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002ec4:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002ec6:	0031      	movs	r1, r6
 8002ec8:	0020      	movs	r0, r4
 8002eca:	f008 fe13 	bl	800baf4 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002ece:	8833      	ldrh	r3, [r6, #0]
 8002ed0:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002ed2:	0a1b      	lsrs	r3, r3, #8
 8002ed4:	702b      	strb	r3, [r5, #0]
 8002ed6:	3401      	adds	r4, #1
 8002ed8:	b2a4      	uxth	r4, r4
 8002eda:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002edc:	45a0      	cmp	r8, r4
 8002ede:	d1f2      	bne.n	8002ec6 <LoadEEalias+0x4e>
 8002ee0:	e7da      	b.n	8002e98 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	b003      	add	sp, #12
 8002ee6:	bc3c      	pop	{r2, r3, r4, r5}
 8002ee8:	4690      	mov	r8, r2
 8002eea:	4699      	mov	r9, r3
 8002eec:	46a2      	mov	sl, r4
 8002eee:	46ab      	mov	fp, r5
 8002ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20001684 	.word	0x20001684
 8002ef8:	20000044 	.word	0x20000044

08002efc <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002efe:	46d6      	mov	lr, sl
 8002f00:	464f      	mov	r7, r9
 8002f02:	4646      	mov	r6, r8
 8002f04:	b5c0      	push	{r6, r7, lr}
 8002f06:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002f08:	466b      	mov	r3, sp
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002f0e:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <LoadEEgroup+0x9c>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01d      	beq.n	8002f52 <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002f16:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f18:	4e20      	ldr	r6, [pc, #128]	; (8002f9c <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002f1a:	4c1f      	ldr	r4, [pc, #124]	; (8002f98 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002f1c:	b2e9      	uxtb	r1, r5
 8002f1e:	0049      	lsls	r1, r1, #1
 8002f20:	1871      	adds	r1, r6, r1
 8002f22:	0028      	movs	r0, r5
 8002f24:	30cb      	adds	r0, #203	; 0xcb
 8002f26:	b280      	uxth	r0, r0
 8002f28:	f008 fde4 	bl	800baf4 <EE_ReadVariable>
		add++;
 8002f2c:	3501      	adds	r5, #1
 8002f2e:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002f30:	7822      	ldrb	r2, [r4, #0]
 8002f32:	b2eb      	uxtb	r3, r5
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d8f1      	bhi.n	8002f1c <LoadEEgroup+0x20>
 8002f38:	4b19      	ldr	r3, [pc, #100]	; (8002fa0 <LoadEEgroup+0xa4>)
 8002f3a:	4699      	mov	r9, r3
 8002f3c:	002c      	movs	r4, r5
 8002f3e:	3499      	adds	r4, #153	; 0x99
 8002f40:	b2a4      	uxth	r4, r4
 8002f42:	35cb      	adds	r5, #203	; 0xcb
 8002f44:	b2ab      	uxth	r3, r5
 8002f46:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f48:	466b      	mov	r3, sp
 8002f4a:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	469a      	mov	sl, r3
 8002f50:	e009      	b.n	8002f66 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002f52:	2500      	movs	r5, #0
 8002f54:	e7f0      	b.n	8002f38 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002f56:	464b      	mov	r3, r9
 8002f58:	4652      	mov	r2, sl
 8002f5a:	725a      	strb	r2, [r3, #9]
 8002f5c:	230a      	movs	r3, #10
 8002f5e:	469c      	mov	ip, r3
 8002f60:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002f62:	4544      	cmp	r4, r8
 8002f64:	d010      	beq.n	8002f88 <LoadEEgroup+0x8c>
 8002f66:	1d67      	adds	r7, r4, #5
 8002f68:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f6a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f6c:	0031      	movs	r1, r6
 8002f6e:	0020      	movs	r0, r4
 8002f70:	f008 fdc0 	bl	800baf4 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f74:	8833      	ldrh	r3, [r6, #0]
 8002f76:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	702b      	strb	r3, [r5, #0]
 8002f7c:	3401      	adds	r4, #1
 8002f7e:	b2a4      	uxth	r4, r4
 8002f80:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f82:	42bc      	cmp	r4, r7
 8002f84:	d1f2      	bne.n	8002f6c <LoadEEgroup+0x70>
 8002f86:	e7e6      	b.n	8002f56 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f88:	2000      	movs	r0, #0
 8002f8a:	b002      	add	sp, #8
 8002f8c:	bc1c      	pop	{r2, r3, r4}
 8002f8e:	4690      	mov	r8, r2
 8002f90:	4699      	mov	r9, r3
 8002f92:	46a2      	mov	sl, r4
 8002f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	20000044 	.word	0x20000044
 8002f9c:	200015dc 	.word	0x200015dc
 8002fa0:	20001578 	.word	0x20001578

08002fa4 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002fa8:	210e      	movs	r1, #14
 8002faa:	4469      	add	r1, sp
 8002fac:	2300      	movs	r3, #0
 8002fae:	800b      	strh	r3, [r1, #0]
 8002fb0:	aa03      	add	r2, sp, #12
 8002fb2:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002fb4:	20e4      	movs	r0, #228	; 0xe4
 8002fb6:	f008 fd9d 	bl	800baf4 <EE_ReadVariable>
	uint8_t direction =0;
 8002fba:	2600      	movs	r6, #0
	if(!status1){
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d102      	bne.n	8002fc6 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002fc0:	230e      	movs	r3, #14
 8002fc2:	446b      	add	r3, sp
 8002fc4:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002fc6:	210e      	movs	r1, #14
 8002fc8:	4469      	add	r1, sp
 8002fca:	20e5      	movs	r0, #229	; 0xe5
 8002fcc:	f008 fd92 	bl	800baf4 <EE_ReadVariable>
 8002fd0:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002fd2:	a903      	add	r1, sp, #12
 8002fd4:	20e6      	movs	r0, #230	; 0xe6
 8002fd6:	f008 fd8d 	bl	800baf4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fda:	4304      	orrs	r4, r0
 8002fdc:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002fde:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002fe0:	2c00      	cmp	r4, #0
 8002fe2:	d106      	bne.n	8002ff2 <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002fe4:	230e      	movs	r3, #14
 8002fe6:	446b      	add	r3, sp
 8002fe8:	881d      	ldrh	r5, [r3, #0]
 8002fea:	042d      	lsls	r5, r5, #16
 8002fec:	ab03      	add	r3, sp, #12
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002ff2:	210e      	movs	r1, #14
 8002ff4:	4469      	add	r1, sp
 8002ff6:	20e7      	movs	r0, #231	; 0xe7
 8002ff8:	f008 fd7c 	bl	800baf4 <EE_ReadVariable>
 8002ffc:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002ffe:	a903      	add	r1, sp, #12
 8003000:	20e8      	movs	r0, #232	; 0xe8
 8003002:	f008 fd77 	bl	800baf4 <EE_ReadVariable>
	if(!status1 && !status2){
 8003006:	4320      	orrs	r0, r4
 8003008:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 800300a:	2400      	movs	r4, #0
	if(!status1 && !status2){
 800300c:	2800      	cmp	r0, #0
 800300e:	d106      	bne.n	800301e <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8003010:	230e      	movs	r3, #14
 8003012:	446b      	add	r3, sp
 8003014:	881c      	ldrh	r4, [r3, #0]
 8003016:	0424      	lsls	r4, r4, #16
 8003018:	ab03      	add	r3, sp, #12
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 800301e:	210e      	movs	r1, #14
 8003020:	4469      	add	r1, sp
 8003022:	20e9      	movs	r0, #233	; 0xe9
 8003024:	f008 fd66 	bl	800baf4 <EE_ReadVariable>
	if(!status1){
 8003028:	2800      	cmp	r0, #0
 800302a:	d107      	bne.n	800303c <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 800302c:	230e      	movs	r3, #14
 800302e:	446b      	add	r3, sp
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	0a19      	lsrs	r1, r3, #8
 8003034:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <LoadEEstreams+0x134>)
 8003036:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8003038:	4a28      	ldr	r2, [pc, #160]	; (80030dc <LoadEEstreams+0x138>)
 800303a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 800303c:	210e      	movs	r1, #14
 800303e:	4469      	add	r1, sp
 8003040:	20ea      	movs	r0, #234	; 0xea
 8003042:	f008 fd57 	bl	800baf4 <EE_ReadVariable>
	if(!status1){
 8003046:	2800      	cmp	r0, #0
 8003048:	d107      	bne.n	800305a <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 800304a:	230e      	movs	r3, #14
 800304c:	446b      	add	r3, sp
 800304e:	881b      	ldrh	r3, [r3, #0]
 8003050:	0a19      	lsrs	r1, r3, #8
 8003052:	4a23      	ldr	r2, [pc, #140]	; (80030e0 <LoadEEstreams+0x13c>)
 8003054:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <LoadEEstreams+0x140>)
 8003058:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 800305a:	210e      	movs	r1, #14
 800305c:	4469      	add	r1, sp
 800305e:	20eb      	movs	r0, #235	; 0xeb
 8003060:	f008 fd48 	bl	800baf4 <EE_ReadVariable>
	if(!status1){
 8003064:	2800      	cmp	r0, #0
 8003066:	d107      	bne.n	8003078 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003068:	230e      	movs	r3, #14
 800306a:	446b      	add	r3, sp
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	0a19      	lsrs	r1, r3, #8
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <LoadEEstreams+0x144>)
 8003072:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003074:	4a1d      	ldr	r2, [pc, #116]	; (80030ec <LoadEEstreams+0x148>)
 8003076:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003078:	4b17      	ldr	r3, [pc, #92]	; (80030d8 <LoadEEstreams+0x134>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <LoadEEstreams+0xe4>
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <LoadEEstreams+0x138>)
 8003082:	7812      	ldrb	r2, [r2, #0]
 8003084:	2a00      	cmp	r2, #0
 8003086:	d112      	bne.n	80030ae <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <LoadEEstreams+0x13c>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <LoadEEstreams+0xf4>
 8003090:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <LoadEEstreams+0x140>)
 8003092:	7812      	ldrb	r2, [r2, #0]
 8003094:	2a00      	cmp	r2, #0
 8003096:	d111      	bne.n	80030bc <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003098:	4b13      	ldr	r3, [pc, #76]	; (80030e8 <LoadEEstreams+0x144>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <LoadEEstreams+0x104>
 80030a0:	4a12      	ldr	r2, [pc, #72]	; (80030ec <LoadEEstreams+0x148>)
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	2a00      	cmp	r2, #0
 80030a6:	d110      	bne.n	80030ca <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 80030a8:	2000      	movs	r0, #0
 80030aa:	b004      	add	sp, #16
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 80030ae:	9200      	str	r2, [sp, #0]
 80030b0:	0022      	movs	r2, r4
 80030b2:	0029      	movs	r1, r5
 80030b4:	0030      	movs	r0, r6
 80030b6:	f004 fcbb 	bl	8007a30 <SetupDMAStreams>
 80030ba:	e7e5      	b.n	8003088 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 80030bc:	9200      	str	r2, [sp, #0]
 80030be:	0022      	movs	r2, r4
 80030c0:	0029      	movs	r1, r5
 80030c2:	0030      	movs	r0, r6
 80030c4:	f004 fcb4 	bl	8007a30 <SetupDMAStreams>
 80030c8:	e7e6      	b.n	8003098 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 80030ca:	9200      	str	r2, [sp, #0]
 80030cc:	0022      	movs	r2, r4
 80030ce:	0029      	movs	r1, r5
 80030d0:	0030      	movs	r0, r6
 80030d2:	f004 fcad 	bl	8007a30 <SetupDMAStreams>
 80030d6:	e7e7      	b.n	80030a8 <LoadEEstreams+0x104>
 80030d8:	2000186a 	.word	0x2000186a
 80030dc:	20001575 	.word	0x20001575
 80030e0:	2000186b 	.word	0x2000186b
 80030e4:	20001576 	.word	0x20001576
 80030e8:	2000186c 	.word	0x2000186c
 80030ec:	20001577 	.word	0x20001577

080030f0 <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 80030f0:	b510      	push	{r4, lr}
 80030f2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 80030f4:	208a      	movs	r0, #138	; 0x8a
 80030f6:	466b      	mov	r3, sp
 80030f8:	1d99      	adds	r1, r3, #6
 80030fa:	0040      	lsls	r0, r0, #1
 80030fc:	f008 fcfa 	bl	800baf4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 8003100:	2800      	cmp	r0, #0
 8003102:	d000      	beq.n	8003106 <LoadEEparams+0x16>
 8003104:	e075      	b.n	80031f2 <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 8003106:	466b      	mov	r3, sp
 8003108:	3306      	adds	r3, #6
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	4a55      	ldr	r2, [pc, #340]	; (8003264 <LoadEEparams+0x174>)
 800310e:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 8003110:	0a1b      	lsrs	r3, r3, #8
 8003112:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 8003114:	208e      	movs	r0, #142	; 0x8e
 8003116:	466b      	mov	r3, sp
 8003118:	1d99      	adds	r1, r3, #6
 800311a:	0040      	lsls	r0, r0, #1
 800311c:	f008 fcea 	bl	800baf4 <EE_ReadVariable>

	if(!status1){
 8003120:	2800      	cmp	r0, #0
 8003122:	d000      	beq.n	8003126 <LoadEEparams+0x36>
 8003124:	e06c      	b.n	8003200 <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 8003126:	466b      	mov	r3, sp
 8003128:	3306      	adds	r3, #6
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	4a4d      	ldr	r2, [pc, #308]	; (8003264 <LoadEEparams+0x174>)
 800312e:	0bd9      	lsrs	r1, r3, #15
 8003130:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 8003136:	2016      	movs	r0, #22
 8003138:	466b      	mov	r3, sp
 800313a:	1d99      	adds	r1, r3, #6
 800313c:	30ff      	adds	r0, #255	; 0xff
 800313e:	f008 fcd9 	bl	800baf4 <EE_ReadVariable>
	if(!status1)
 8003142:	2800      	cmp	r0, #0
 8003144:	d163      	bne.n	800320e <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 8003146:	466b      	mov	r3, sp
 8003148:	88da      	ldrh	r2, [r3, #6]
 800314a:	4b47      	ldr	r3, [pc, #284]	; (8003268 <LoadEEparams+0x178>)
 800314c:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 800314e:	208b      	movs	r0, #139	; 0x8b
 8003150:	466b      	mov	r3, sp
 8003152:	1d99      	adds	r1, r3, #6
 8003154:	0040      	lsls	r0, r0, #1
 8003156:	f008 fccd 	bl	800baf4 <EE_ReadVariable>
	if(!status1)
 800315a:	2800      	cmp	r0, #0
 800315c:	d15c      	bne.n	8003218 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 800315e:	466b      	mov	r3, sp
 8003160:	88da      	ldrh	r2, [r3, #6]
 8003162:	4b41      	ldr	r3, [pc, #260]	; (8003268 <LoadEEparams+0x178>)
 8003164:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003166:	2018      	movs	r0, #24
 8003168:	466b      	mov	r3, sp
 800316a:	1d99      	adds	r1, r3, #6
 800316c:	30ff      	adds	r0, #255	; 0xff
 800316e:	f008 fcc1 	bl	800baf4 <EE_ReadVariable>
	if(!status1){
 8003172:	2800      	cmp	r0, #0
 8003174:	d155      	bne.n	8003222 <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003176:	466b      	mov	r3, sp
 8003178:	3306      	adds	r3, #6
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	4a3a      	ldr	r2, [pc, #232]	; (8003268 <LoadEEparams+0x178>)
 800317e:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003184:	208c      	movs	r0, #140	; 0x8c
 8003186:	466b      	mov	r3, sp
 8003188:	1d99      	adds	r1, r3, #6
 800318a:	0040      	lsls	r0, r0, #1
 800318c:	f008 fcb2 	bl	800baf4 <EE_ReadVariable>
 8003190:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 8003192:	201a      	movs	r0, #26
 8003194:	a901      	add	r1, sp, #4
 8003196:	30ff      	adds	r0, #255	; 0xff
 8003198:	f008 fcac 	bl	800baf4 <EE_ReadVariable>
	if(!status1 && !status2){
 800319c:	4304      	orrs	r4, r0
 800319e:	b2a4      	uxth	r4, r4
 80031a0:	2c00      	cmp	r4, #0
 80031a2:	d145      	bne.n	8003230 <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 80031a4:	ab01      	add	r3, sp, #4
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	041b      	lsls	r3, r3, #16
 80031aa:	466a      	mov	r2, sp
 80031ac:	3206      	adds	r2, #6
 80031ae:	8812      	ldrh	r2, [r2, #0]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <LoadEEparams+0x178>)
 80031b4:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 80031b6:	208d      	movs	r0, #141	; 0x8d
 80031b8:	466b      	mov	r3, sp
 80031ba:	1d99      	adds	r1, r3, #6
 80031bc:	0040      	lsls	r0, r0, #1
 80031be:	f008 fc99 	bl	800baf4 <EE_ReadVariable>
	if(!status1){
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d142      	bne.n	800324c <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 80031c6:	466b      	mov	r3, sp
 80031c8:	3306      	adds	r3, #6
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	4a26      	ldr	r2, [pc, #152]	; (8003268 <LoadEEparams+0x178>)
 80031ce:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 80031d0:	0a1b      	lsrs	r3, r3, #8
 80031d2:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 80031d4:	201c      	movs	r0, #28
 80031d6:	466b      	mov	r3, sp
 80031d8:	1d99      	adds	r1, r3, #6
 80031da:	30ff      	adds	r0, #255	; 0xff
 80031dc:	f008 fc8a 	bl	800baf4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d039      	beq.n	8003258 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 80031e4:	4b21      	ldr	r3, [pc, #132]	; (800326c <LoadEEparams+0x17c>)
 80031e6:	7e9a      	ldrb	r2, [r3, #26]
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <LoadEEparams+0x178>)
 80031ea:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 80031ec:	2000      	movs	r0, #0
 80031ee:	b002      	add	sp, #8
 80031f0:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 80031f2:	4b1c      	ldr	r3, [pc, #112]	; (8003264 <LoadEEparams+0x174>)
 80031f4:	4a1e      	ldr	r2, [pc, #120]	; (8003270 <LoadEEparams+0x180>)
 80031f6:	7811      	ldrb	r1, [r2, #0]
 80031f8:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 80031fa:	7852      	ldrb	r2, [r2, #1]
 80031fc:	705a      	strb	r2, [r3, #1]
 80031fe:	e789      	b.n	8003114 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <LoadEEparams+0x174>)
 8003202:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <LoadEEparams+0x180>)
 8003204:	7911      	ldrb	r1, [r2, #4]
 8003206:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 8003208:	88d2      	ldrh	r2, [r2, #6]
 800320a:	80da      	strh	r2, [r3, #6]
 800320c:	e793      	b.n	8003136 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <LoadEEparams+0x17c>)
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <LoadEEparams+0x178>)
 8003214:	801a      	strh	r2, [r3, #0]
 8003216:	e79a      	b.n	800314e <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <LoadEEparams+0x17c>)
 800321a:	885a      	ldrh	r2, [r3, #2]
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <LoadEEparams+0x178>)
 800321e:	805a      	strh	r2, [r3, #2]
 8003220:	e7a1      	b.n	8003166 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 8003222:	4b11      	ldr	r3, [pc, #68]	; (8003268 <LoadEEparams+0x178>)
 8003224:	4a11      	ldr	r2, [pc, #68]	; (800326c <LoadEEparams+0x17c>)
 8003226:	7911      	ldrb	r1, [r2, #4]
 8003228:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 800322a:	7952      	ldrb	r2, [r2, #5]
 800322c:	715a      	strb	r2, [r3, #5]
 800322e:	e7a9      	b.n	8003184 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 8003230:	4b10      	ldr	r3, [pc, #64]	; (8003274 <LoadEEparams+0x184>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <LoadEEparams+0x178>)
 800323a:	22e1      	movs	r2, #225	; 0xe1
 800323c:	0252      	lsls	r2, r2, #9
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	e7b9      	b.n	80031b6 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <LoadEEparams+0x17c>)
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <LoadEEparams+0x178>)
 8003248:	609a      	str	r2, [r3, #8]
 800324a:	e7b4      	b.n	80031b6 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <LoadEEparams+0x178>)
 800324e:	2218      	movs	r2, #24
 8003250:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 8003252:	2200      	movs	r2, #0
 8003254:	731a      	strb	r2, [r3, #12]
 8003256:	e7bd      	b.n	80031d4 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 8003258:	466b      	mov	r3, sp
 800325a:	88da      	ldrh	r2, [r3, #6]
 800325c:	4b02      	ldr	r3, [pc, #8]	; (8003268 <LoadEEparams+0x178>)
 800325e:	769a      	strb	r2, [r3, #26]
 8003260:	e7c4      	b.n	80031ec <LoadEEparams+0xfc>
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	2000698c 	.word	0x2000698c
 8003268:	20006a0c 	.word	0x20006a0c
 800326c:	20000028 	.word	0x20000028
 8003270:	20000020 	.word	0x20000020
 8003274:	20000ae8 	.word	0x20000ae8

08003278 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327a:	46ce      	mov	lr, r9
 800327c:	4647      	mov	r7, r8
 800327e:	b580      	push	{r7, lr}
 8003280:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 8003282:	231e      	movs	r3, #30
 8003284:	446b      	add	r3, sp
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	2501      	movs	r5, #1
 800328c:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800328e:	001e      	movs	r6, r3
 8003290:	230f      	movs	r3, #15
 8003292:	4698      	mov	r8, r3
 8003294:	e004      	b.n	80032a0 <LoadEEbuttons+0x28>
 8003296:	3404      	adds	r4, #4
 8003298:	b2a4      	uxth	r4, r4
 800329a:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 800329c:	2d08      	cmp	r5, #8
 800329e:	d058      	beq.n	8003352 <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 80032a0:	0031      	movs	r1, r6
 80032a2:	0020      	movs	r0, r4
 80032a4:	f008 fc26 	bl	800baf4 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 80032a8:	2800      	cmp	r0, #0
 80032aa:	d1f4      	bne.n	8003296 <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 80032ac:	8831      	ldrh	r1, [r6, #0]
 80032ae:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 80032b0:	091a      	lsrs	r2, r3, #4
 80032b2:	42aa      	cmp	r2, r5
 80032b4:	d1ef      	bne.n	8003296 <LoadEEbuttons+0x1e>
 80032b6:	4640      	mov	r0, r8
 80032b8:	4003      	ands	r3, r0
 80032ba:	d0ec      	beq.n	8003296 <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 80032bc:	00d0      	lsls	r0, r2, #3
 80032be:	1882      	adds	r2, r0, r2
 80032c0:	4827      	ldr	r0, [pc, #156]	; (8003360 <LoadEEbuttons+0xe8>)
 80032c2:	4681      	mov	r9, r0
 80032c4:	4491      	add	r9, r2
 80032c6:	464a      	mov	r2, r9
 80032c8:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 80032ca:	7211      	strb	r1, [r2, #8]
 80032cc:	00af      	lsls	r7, r5, #2
 80032ce:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 80032d0:	0038      	movs	r0, r7
 80032d2:	30e9      	adds	r0, #233	; 0xe9
 80032d4:	b280      	uxth	r0, r0
 80032d6:	0031      	movs	r1, r6
 80032d8:	f008 fc0c 	bl	800baf4 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 80032dc:	8833      	ldrh	r3, [r6, #0]
 80032de:	0a1a      	lsrs	r2, r3, #8
 80032e0:	4649      	mov	r1, r9
 80032e2:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 80032e4:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 80032e6:	0038      	movs	r0, r7
 80032e8:	30ea      	adds	r0, #234	; 0xea
 80032ea:	b280      	uxth	r0, r0
 80032ec:	0031      	movs	r1, r6
 80032ee:	f008 fc01 	bl	800baf4 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 80032f2:	8833      	ldrh	r3, [r6, #0]
 80032f4:	0a1a      	lsrs	r2, r3, #8
 80032f6:	4649      	mov	r1, r9
 80032f8:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 80032fa:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 80032fc:	37eb      	adds	r7, #235	; 0xeb
 80032fe:	b2b8      	uxth	r0, r7
 8003300:	0031      	movs	r1, r6
 8003302:	f008 fbf7 	bl	800baf4 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 8003306:	8833      	ldrh	r3, [r6, #0]
 8003308:	0a1a      	lsrs	r2, r3, #8
 800330a:	4649      	mov	r1, r9
 800330c:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 800330e:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 8003310:	b2ef      	uxtb	r7, r5
 8003312:	7848      	ldrb	r0, [r1, #1]
 8003314:	0039      	movs	r1, r7
 8003316:	f009 f973 	bl	800c600 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 800331a:	464b      	mov	r3, r9
 800331c:	7a19      	ldrb	r1, [r3, #8]
 800331e:	789b      	ldrb	r3, [r3, #2]
 8003320:	104a      	asrs	r2, r1, #1
 8003322:	2001      	movs	r0, #1
 8003324:	4002      	ands	r2, r0
 8003326:	4001      	ands	r1, r0
 8003328:	2000      	movs	r0, #0
 800332a:	9005      	str	r0, [sp, #20]
 800332c:	4648      	mov	r0, r9
 800332e:	79c0      	ldrb	r0, [r0, #7]
 8003330:	9004      	str	r0, [sp, #16]
 8003332:	4648      	mov	r0, r9
 8003334:	7980      	ldrb	r0, [r0, #6]
 8003336:	9003      	str	r0, [sp, #12]
 8003338:	4648      	mov	r0, r9
 800333a:	7940      	ldrb	r0, [r0, #5]
 800333c:	9002      	str	r0, [sp, #8]
 800333e:	4648      	mov	r0, r9
 8003340:	7900      	ldrb	r0, [r0, #4]
 8003342:	9001      	str	r0, [sp, #4]
 8003344:	4648      	mov	r0, r9
 8003346:	78c0      	ldrb	r0, [r0, #3]
 8003348:	9000      	str	r0, [sp, #0]
 800334a:	0038      	movs	r0, r7
 800334c:	f009 fa72 	bl	800c834 <SetButtonEvents>
 8003350:	e7a1      	b.n	8003296 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 8003352:	2000      	movs	r0, #0
 8003354:	b009      	add	sp, #36	; 0x24
 8003356:	bc0c      	pop	{r2, r3}
 8003358:	4690      	mov	r8, r2
 800335a:	4699      	mov	r9, r3
 800335c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20002570 	.word	0x20002570

08003364 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003366:	46de      	mov	lr, fp
 8003368:	4657      	mov	r7, sl
 800336a:	464e      	mov	r6, r9
 800336c:	b5c0      	push	{r6, r7, lr}
 800336e:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 8003370:	2032      	movs	r0, #50	; 0x32
 8003372:	f010 fb63 	bl	8013a3c <malloc>
 8003376:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003378:	d100      	bne.n	800337c <LoadROsnippets+0x18>
 800337a:	e071      	b.n	8003460 <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <LoadROsnippets+0x100>)
 800337e:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 8003380:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 8003382:	2bfe      	cmp	r3, #254	; 0xfe
 8003384:	d166      	bne.n	8003454 <LoadROsnippets+0xf0>
 8003386:	4e38      	ldr	r6, [pc, #224]	; (8003468 <LoadROsnippets+0x104>)
 8003388:	3b9a      	subs	r3, #154	; 0x9a
 800338a:	469b      	mov	fp, r3
 800338c:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800338e:	4d35      	ldr	r5, [pc, #212]	; (8003464 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003390:	1c7b      	adds	r3, r7, #1
 8003392:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003394:	4b35      	ldr	r3, [pc, #212]	; (800346c <LoadROsnippets+0x108>)
 8003396:	4699      	mov	r9, r3
 8003398:	e023      	b.n	80033e2 <LoadROsnippets+0x7e>
		i =0;
 800339a:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 800339c:	193b      	adds	r3, r7, r4
 800339e:	3b01      	subs	r3, #1
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 80033a6:	3401      	adds	r4, #1
 80033a8:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 80033aa:	0020      	movs	r0, r4
 80033ac:	f010 fb46 	bl	8013a3c <malloc>
 80033b0:	4653      	mov	r3, sl
 80033b2:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 80033b4:	2800      	cmp	r0, #0
 80033b6:	d03f      	beq.n	8003438 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 80033b8:	0022      	movs	r2, r4
 80033ba:	0039      	movs	r1, r7
 80033bc:	f010 fd8b 	bl	8013ed6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 80033c0:	464b      	mov	r3, r9
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	464a      	mov	r2, r9
 80033c8:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 80033ca:	0022      	movs	r2, r4
 80033cc:	2100      	movs	r1, #0
 80033ce:	0038      	movs	r0, r7
 80033d0:	f010 fd8a 	bl	8013ee8 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 80033d4:	9b00      	ldr	r3, [sp, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2bfe      	cmp	r3, #254	; 0xfe
 80033da:	d137      	bne.n	800344c <LoadROsnippets+0xe8>
 80033dc:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 80033de:	455e      	cmp	r6, fp
 80033e0:	d034      	beq.n	800344c <LoadROsnippets+0xe8>
 80033e2:	0028      	movs	r0, r5
 80033e4:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 80033e6:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 80033e8:	1b79      	subs	r1, r7, r5
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	54ca      	strb	r2, [r1, r3]
 80033ee:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 80033f0:	4283      	cmp	r3, r0
 80033f2:	d1fa      	bne.n	80033ea <LoadROsnippets+0x86>
 80033f4:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 80033f6:	46b2      	mov	sl, r6
 80033f8:	2214      	movs	r2, #20
 80033fa:	9901      	ldr	r1, [sp, #4]
 80033fc:	0030      	movs	r0, r6
 80033fe:	f010 fd6a 	bl	8013ed6 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 8003402:	2214      	movs	r2, #20
 8003404:	2100      	movs	r1, #0
 8003406:	0038      	movs	r0, r7
 8003408:	f010 fd6e 	bl	8013ee8 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 800340c:	9500      	str	r5, [sp, #0]
 800340e:	782a      	ldrb	r2, [r5, #0]
 8003410:	1c93      	adds	r3, r2, #2
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d9c0      	bls.n	800339a <LoadROsnippets+0x36>
 8003418:	0039      	movs	r1, r7
		i =0;
 800341a:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 800341c:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 800341e:	3501      	adds	r5, #1
			++i;
 8003420:	3401      	adds	r4, #1
 8003422:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 8003424:	9500      	str	r5, [sp, #0]
 8003426:	782a      	ldrb	r2, [r5, #0]
 8003428:	1c93      	adds	r3, r2, #2
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b01      	cmp	r3, #1
 800342e:	d9b5      	bls.n	800339c <LoadROsnippets+0x38>
 8003430:	3101      	adds	r1, #1
 8003432:	2c32      	cmp	r4, #50	; 0x32
 8003434:	d1f2      	bne.n	800341c <LoadROsnippets+0xb8>
 8003436:	e7b1      	b.n	800339c <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 8003438:	2214      	movs	r2, #20
 800343a:	2100      	movs	r1, #0
 800343c:	4650      	mov	r0, sl
 800343e:	f010 fd53 	bl	8013ee8 <memset>
			free(snipBuffer);
 8003442:	0038      	movs	r0, r7
 8003444:	f010 fb04 	bl	8013a50 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 8003448:	200e      	movs	r0, #14
 800344a:	e003      	b.n	8003454 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 800344c:	0038      	movs	r0, r7
 800344e:	f010 faff 	bl	8013a50 <free>
	return BOS_OK;
 8003452:	2000      	movs	r0, #0
}
 8003454:	b002      	add	sp, #8
 8003456:	bc1c      	pop	{r2, r3, r4}
 8003458:	4691      	mov	r9, r2
 800345a:	469a      	mov	sl, r3
 800345c:	46a3      	mov	fp, r4
 800345e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 8003460:	20fb      	movs	r0, #251	; 0xfb
 8003462:	e7f7      	b.n	8003454 <LoadROsnippets+0xf0>
 8003464:	0801dc00 	.word	0x0801dc00
 8003468:	20006a28 	.word	0x20006a28
 800346c:	2000193f 	.word	0x2000193f

08003470 <LoadEEvars>:
void LoadEEvars(void){
 8003470:	b510      	push	{r4, lr}
	LoadROtopology();
 8003472:	f7ff fc89 	bl	8002d88 <LoadROtopology>
	LoadEEportsDir();
 8003476:	f7ff fcdb 	bl	8002e30 <LoadEEportsDir>
	LoadEEalias();
 800347a:	f7ff fcfd 	bl	8002e78 <LoadEEalias>
	LoadEEgroup();
 800347e:	f7ff fd3d 	bl	8002efc <LoadEEgroup>
	LoadEEstreams();
 8003482:	f7ff fd8f 	bl	8002fa4 <LoadEEstreams>
	LoadEEparams();
 8003486:	f7ff fe33 	bl	80030f0 <LoadEEparams>
	LoadEEbuttons();
 800348a:	f7ff fef5 	bl	8003278 <LoadEEbuttons>
	LoadROsnippets();
 800348e:	f7ff ff69 	bl	8003364 <LoadROsnippets>
}
 8003492:	bd10      	pop	{r4, pc}

08003494 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003496:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003498:	4b11      	ldr	r3, [pc, #68]	; (80034e0 <SaveEEportsDir+0x4c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01a      	beq.n	80034d6 <SaveEEportsDir+0x42>
 80034a0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 80034a6:	4e0f      	ldr	r6, [pc, #60]	; (80034e4 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 80034a8:	4f0d      	ldr	r7, [pc, #52]	; (80034e0 <SaveEEportsDir+0x4c>)
 80034aa:	e008      	b.n	80034be <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80034ac:	1c60      	adds	r0, r4, #1
 80034ae:	f008 fb51 	bl	800bb54 <EE_WriteVariable>
 80034b2:	e00a      	b.n	80034ca <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 80034b4:	3401      	adds	r4, #1
 80034b6:	b2e4      	uxtb	r4, r4
 80034b8:	783b      	ldrb	r3, [r7, #0]
 80034ba:	42a3      	cmp	r3, r4
 80034bc:	d30d      	bcc.n	80034da <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 80034be:	0025      	movs	r5, r4
 80034c0:	1e63      	subs	r3, r4, #1
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	5b99      	ldrh	r1, [r3, r6]
 80034c6:	2900      	cmp	r1, #0
 80034c8:	d1f0      	bne.n	80034ac <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80034ca:	3502      	adds	r5, #2
 80034cc:	2d1b      	cmp	r5, #27
 80034ce:	ddf1      	ble.n	80034b4 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 80034d0:	230a      	movs	r3, #10
 80034d2:	9301      	str	r3, [sp, #4]
 80034d4:	e7ee      	b.n	80034b4 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80034da:	9801      	ldr	r0, [sp, #4]
 80034dc:	b003      	add	sp, #12
 80034de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e0:	20000044 	.word	0x20000044
 80034e4:	20006f50 	.word	0x20006f50

080034e8 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 80034e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ea:	46d6      	mov	lr, sl
 80034ec:	464f      	mov	r7, r9
 80034ee:	4646      	mov	r6, r8
 80034f0:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034f2:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 80034f8:	4b1a      	ldr	r3, [pc, #104]	; (8003564 <SaveEEalias+0x7c>)
 80034fa:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <SaveEEalias+0x80>)
 80034fe:	4699      	mov	r9, r3
 8003500:	e005      	b.n	800350e <SaveEEalias+0x26>
 8003502:	3601      	adds	r6, #1
 8003504:	b2f6      	uxtb	r6, r6
 8003506:	464b      	mov	r3, r9
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	42b3      	cmp	r3, r6
 800350c:	d324      	bcc.n	8003558 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 800350e:	00b3      	lsls	r3, r6, #2
 8003510:	199b      	adds	r3, r3, r6
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4652      	mov	r2, sl
 8003516:	5c9b      	ldrb	r3, [r3, r2]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f2      	beq.n	8003502 <SaveEEalias+0x1a>
 800351c:	00b5      	lsls	r5, r6, #2
 800351e:	19ad      	adds	r5, r5, r6
 8003520:	006d      	lsls	r5, r5, #1
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <SaveEEalias+0x7c>)
 8003524:	469c      	mov	ip, r3
 8003526:	4465      	add	r5, ip
 8003528:	4644      	mov	r4, r8
 800352a:	341c      	adds	r4, #28
 800352c:	b2a4      	uxth	r4, r4
 800352e:	4647      	mov	r7, r8
 8003530:	3721      	adds	r7, #33	; 0x21
 8003532:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 8003534:	782b      	ldrb	r3, [r5, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	7869      	ldrb	r1, [r5, #1]
 800353a:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 800353c:	b289      	uxth	r1, r1
 800353e:	0020      	movs	r0, r4
 8003540:	f008 fb08 	bl	800bb54 <EE_WriteVariable>
 8003544:	3502      	adds	r5, #2
 8003546:	3401      	adds	r4, #1
 8003548:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 800354a:	42bc      	cmp	r4, r7
 800354c:	d1f2      	bne.n	8003534 <SaveEEalias+0x4c>
 800354e:	4643      	mov	r3, r8
 8003550:	3305      	adds	r3, #5
 8003552:	b29b      	uxth	r3, r3
 8003554:	4698      	mov	r8, r3
 8003556:	e7d4      	b.n	8003502 <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 8003558:	2000      	movs	r0, #0
 800355a:	bc1c      	pop	{r2, r3, r4}
 800355c:	4690      	mov	r8, r2
 800355e:	4699      	mov	r9, r3
 8003560:	46a2      	mov	sl, r4
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003564:	20001684 	.word	0x20001684
 8003568:	20000044 	.word	0x20000044

0800356c <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	46de      	mov	lr, fp
 8003570:	4657      	mov	r7, sl
 8003572:	464e      	mov	r6, r9
 8003574:	4645      	mov	r5, r8
 8003576:	b5e0      	push	{r5, r6, r7, lr}
 8003578:	000f      	movs	r7, r1
 800357a:	0016      	movs	r6, r2
 800357c:	4699      	mov	r9, r3
 800357e:	ab0a      	add	r3, sp, #40	; 0x28
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	469b      	mov	fp, r3
 8003584:	ab0b      	add	r3, sp, #44	; 0x2c
 8003586:	781d      	ldrb	r5, [r3, #0]
 8003588:	ab0c      	add	r3, sp, #48	; 0x30
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	469a      	mov	sl, r3
 800358e:	ab0d      	add	r3, sp, #52	; 0x34
 8003590:	781c      	ldrb	r4, [r3, #0]
 8003592:	ab0e      	add	r3, sp, #56	; 0x38
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003598:	b281      	uxth	r1, r0
 800359a:	20e4      	movs	r0, #228	; 0xe4
 800359c:	f008 fada 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 80035a0:	0a39      	lsrs	r1, r7, #8
 80035a2:	b289      	uxth	r1, r1
 80035a4:	20e5      	movs	r0, #229	; 0xe5
 80035a6:	f008 fad5 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 80035aa:	b2b9      	uxth	r1, r7
 80035ac:	20e6      	movs	r0, #230	; 0xe6
 80035ae:	f008 fad1 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 80035b2:	0a31      	lsrs	r1, r6, #8
 80035b4:	b289      	uxth	r1, r1
 80035b6:	20e7      	movs	r0, #231	; 0xe7
 80035b8:	f008 facc 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 80035bc:	b2b1      	uxth	r1, r6
 80035be:	20e8      	movs	r0, #232	; 0xe8
 80035c0:	f008 fac8 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 80035c4:	464b      	mov	r3, r9
 80035c6:	0219      	lsls	r1, r3, #8
 80035c8:	4459      	add	r1, fp
 80035ca:	b289      	uxth	r1, r1
 80035cc:	20e9      	movs	r0, #233	; 0xe9
 80035ce:	f008 fac1 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 80035d2:	022d      	lsls	r5, r5, #8
 80035d4:	4455      	add	r5, sl
 80035d6:	b2a9      	uxth	r1, r5
 80035d8:	20ea      	movs	r0, #234	; 0xea
 80035da:	f008 fabb 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 80035de:	0224      	lsls	r4, r4, #8
 80035e0:	4444      	add	r4, r8
 80035e2:	b2a1      	uxth	r1, r4
 80035e4:	20eb      	movs	r0, #235	; 0xeb
 80035e6:	f008 fab5 	bl	800bb54 <EE_WriteVariable>
	
	return result;
}
 80035ea:	2000      	movs	r0, #0
 80035ec:	bc3c      	pop	{r2, r3, r4, r5}
 80035ee:	4690      	mov	r8, r2
 80035f0:	4699      	mov	r9, r3
 80035f2:	46a2      	mov	sl, r4
 80035f4:	46ab      	mov	fp, r5
 80035f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035f8 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 80035f8:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 80035fa:	4c1f      	ldr	r4, [pc, #124]	; (8003678 <SaveEEparams+0x80>)
 80035fc:	7863      	ldrb	r3, [r4, #1]
 80035fe:	015b      	lsls	r3, r3, #5
 8003600:	7821      	ldrb	r1, [r4, #0]
 8003602:	4319      	orrs	r1, r3
 8003604:	208a      	movs	r0, #138	; 0x8a
 8003606:	0040      	lsls	r0, r0, #1
 8003608:	f008 faa4 	bl	800bb54 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 800360c:	7921      	ldrb	r1, [r4, #4]
 800360e:	03c9      	lsls	r1, r1, #15
 8003610:	88e3      	ldrh	r3, [r4, #6]
 8003612:	4319      	orrs	r1, r3
 8003614:	b289      	uxth	r1, r1
 8003616:	208e      	movs	r0, #142	; 0x8e
 8003618:	0040      	lsls	r0, r0, #1
 800361a:	f008 fa9b 	bl	800bb54 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 800361e:	4c17      	ldr	r4, [pc, #92]	; (800367c <SaveEEparams+0x84>)
 8003620:	8821      	ldrh	r1, [r4, #0]
 8003622:	2016      	movs	r0, #22
 8003624:	30ff      	adds	r0, #255	; 0xff
 8003626:	f008 fa95 	bl	800bb54 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 800362a:	8861      	ldrh	r1, [r4, #2]
 800362c:	208b      	movs	r0, #139	; 0x8b
 800362e:	0040      	lsls	r0, r0, #1
 8003630:	f008 fa90 	bl	800bb54 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 8003634:	7963      	ldrb	r3, [r4, #5]
 8003636:	021b      	lsls	r3, r3, #8
 8003638:	7b21      	ldrb	r1, [r4, #12]
 800363a:	4319      	orrs	r1, r3
 800363c:	2018      	movs	r0, #24
 800363e:	30ff      	adds	r0, #255	; 0xff
 8003640:	f008 fa88 	bl	800bb54 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 8003644:	8921      	ldrh	r1, [r4, #8]
 8003646:	208c      	movs	r0, #140	; 0x8c
 8003648:	0040      	lsls	r0, r0, #1
 800364a:	f008 fa83 	bl	800bb54 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 800364e:	8961      	ldrh	r1, [r4, #10]
 8003650:	201a      	movs	r0, #26
 8003652:	30ff      	adds	r0, #255	; 0xff
 8003654:	f008 fa7e 	bl	800bb54 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8003658:	7b63      	ldrb	r3, [r4, #13]
 800365a:	021b      	lsls	r3, r3, #8
 800365c:	7921      	ldrb	r1, [r4, #4]
 800365e:	4319      	orrs	r1, r3
 8003660:	208d      	movs	r0, #141	; 0x8d
 8003662:	0040      	lsls	r0, r0, #1
 8003664:	f008 fa76 	bl	800bb54 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003668:	7ea1      	ldrb	r1, [r4, #26]
 800366a:	201c      	movs	r0, #28
 800366c:	30ff      	adds	r0, #255	; 0xff
 800366e:	f008 fa71 	bl	800bb54 <EE_WriteVariable>
	
	return result;
}
 8003672:	2000      	movs	r0, #0
 8003674:	bd10      	pop	{r4, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	2000698c 	.word	0x2000698c
 800367c:	20006a0c 	.word	0x20006a0c

08003680 <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003684:	2234      	movs	r2, #52	; 0x34
 8003686:	2100      	movs	r1, #0
 8003688:	4813      	ldr	r0, [pc, #76]	; (80036d8 <ClearEEportsDir+0x58>)
 800368a:	f010 fc2d 	bl	8013ee8 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <ClearEEportsDir+0x5c>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01a      	beq.n	80036cc <ClearEEportsDir+0x4c>
 8003696:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003698:	2300      	movs	r3, #0
 800369a:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 800369c:	4e0e      	ldr	r6, [pc, #56]	; (80036d8 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 800369e:	4f0f      	ldr	r7, [pc, #60]	; (80036dc <ClearEEportsDir+0x5c>)
 80036a0:	e008      	b.n	80036b4 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 80036a2:	1c60      	adds	r0, r4, #1
 80036a4:	f008 fa56 	bl	800bb54 <EE_WriteVariable>
 80036a8:	e00a      	b.n	80036c0 <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 80036aa:	3401      	adds	r4, #1
 80036ac:	b2e4      	uxtb	r4, r4
 80036ae:	783b      	ldrb	r3, [r7, #0]
 80036b0:	42a3      	cmp	r3, r4
 80036b2:	d30d      	bcc.n	80036d0 <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 80036b4:	0025      	movs	r5, r4
 80036b6:	1e63      	subs	r3, r4, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	5b99      	ldrh	r1, [r3, r6]
 80036bc:	2900      	cmp	r1, #0
 80036be:	d1f0      	bne.n	80036a2 <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80036c0:	3502      	adds	r5, #2
 80036c2:	2d1b      	cmp	r5, #27
 80036c4:	ddf1      	ble.n	80036aa <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 80036c6:	230a      	movs	r3, #10
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	e7ee      	b.n	80036aa <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 80036d0:	9801      	ldr	r0, [sp, #4]
 80036d2:	b003      	add	sp, #12
 80036d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20006f50 	.word	0x20006f50
 80036dc:	20000044 	.word	0x20000044

080036e0 <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/
//TODO change loction of the API
// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 80036e0:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <EE_FormatForFactoryReset+0x1c>)
 80036e4:	4a06      	ldr	r2, [pc, #24]	; (8003700 <EE_FormatForFactoryReset+0x20>)
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d006      	beq.n	80036fa <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 80036ec:	f008 fada 	bl	800bca4 <EE_Format>
 80036f0:	2800      	cmp	r0, #0
 80036f2:	d102      	bne.n	80036fa <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 80036f4:	4b02      	ldr	r3, [pc, #8]	; (8003700 <EE_FormatForFactoryReset+0x20>)
 80036f6:	4a01      	ldr	r2, [pc, #4]	; (80036fc <EE_FormatForFactoryReset+0x1c>)
 80036f8:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 80036fa:	bd10      	pop	{r4, pc}
 80036fc:	beefdead 	.word	0xbeefdead
 8003700:	20007ff0 	.word	0x20007ff0

08003704 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 8003704:	b570      	push	{r4, r5, r6, lr}
 8003706:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 8003708:	2512      	movs	r5, #18
 800370a:	446d      	add	r5, sp
 800370c:	ab04      	add	r3, sp, #16
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	ab07      	add	r3, sp, #28
 8003712:	002a      	movs	r2, r5
 8003714:	a908      	add	r1, sp, #32
 8003716:	2001      	movs	r0, #1
 8003718:	f008 fd7e 	bl	800c218 <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 800371c:	ac03      	add	r4, sp, #12
 800371e:	9400      	str	r4, [sp, #0]
 8003720:	ab05      	add	r3, sp, #20
 8003722:	220e      	movs	r2, #14
 8003724:	446a      	add	r2, sp
 8003726:	a906      	add	r1, sp, #24
 8003728:	2002      	movs	r0, #2
 800372a:	f008 fd75 	bl	800c218 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800372e:	2301      	movs	r3, #1
 8003730:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2600      	movs	r6, #0
 8003734:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 8003736:	882b      	ldrh	r3, [r5, #0]
 8003738:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 800373a:	a909      	add	r1, sp, #36	; 0x24
 800373c:	9808      	ldr	r0, [sp, #32]
 800373e:	f00e f809 	bl	8011754 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003742:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003744:	2302      	movs	r3, #2
 8003746:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 8003748:	8823      	ldrh	r3, [r4, #0]
 800374a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 800374c:	a909      	add	r1, sp, #36	; 0x24
 800374e:	9805      	ldr	r0, [sp, #20]
 8003750:	f00e f800 	bl	8011754 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003754:	8829      	ldrh	r1, [r5, #0]
 8003756:	2200      	movs	r2, #0
 8003758:	9808      	ldr	r0, [sp, #32]
 800375a:	f00e f96f 	bl	8011a3c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800375e:	2005      	movs	r0, #5
 8003760:	f00a fa7c 	bl	800dc5c <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003764:	8821      	ldrh	r1, [r4, #0]
 8003766:	9805      	ldr	r0, [sp, #20]
 8003768:	f00e f962 	bl	8011a30 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 800376c:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800376e:	2800      	cmp	r0, #0
 8003770:	d002      	beq.n	8003778 <IsLowerCLIbaud+0x74>
}
 8003772:	0018      	movs	r0, r3
 8003774:	b00e      	add	sp, #56	; 0x38
 8003776:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003778:	3312      	adds	r3, #18
 800377a:	446b      	add	r3, sp
 800377c:	8819      	ldrh	r1, [r3, #0]
 800377e:	2201      	movs	r2, #1
 8003780:	9808      	ldr	r0, [sp, #32]
 8003782:	f00e f95b 	bl	8011a3c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003786:	2005      	movs	r0, #5
 8003788:	f00a fa68 	bl	800dc5c <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 800378c:	ab03      	add	r3, sp, #12
 800378e:	8819      	ldrh	r1, [r3, #0]
 8003790:	9805      	ldr	r0, [sp, #20]
 8003792:	f00e f94d 	bl	8011a30 <HAL_GPIO_ReadPin>
 8003796:	3801      	subs	r0, #1
 8003798:	4243      	negs	r3, r0
 800379a:	4143      	adcs	r3, r0
			return 1;
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e7e8      	b.n	8003772 <IsLowerCLIbaud+0x6e>

080037a0 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	0006      	movs	r6, r0
 80037a4:	4d08      	ldr	r5, [pc, #32]	; (80037c8 <IsModuleParameter+0x28>)
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 80037a6:	2400      	movs	r4, #0
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 80037a8:	68a9      	ldr	r1, [r5, #8]
 80037aa:	0030      	movs	r0, r6
 80037ac:	f7fc fcaa 	bl	8000104 <strcmp>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d006      	beq.n	80037c2 <IsModuleParameter+0x22>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 80037b4:	3401      	adds	r4, #1
 80037b6:	b2e4      	uxtb	r4, r4
 80037b8:	350c      	adds	r5, #12
 80037ba:	2c07      	cmp	r4, #7
 80037bc:	d1f4      	bne.n	80037a8 <IsModuleParameter+0x8>
			return i + 1;
	}
	return 0;
 80037be:	2000      	movs	r0, #0
}
 80037c0:	bd70      	pop	{r4, r5, r6, pc}
			return i + 1;
 80037c2:	3401      	adds	r4, #1
 80037c4:	b2e0      	uxtb	r0, r4
 80037c6:	e7fb      	b.n	80037c0 <IsModuleParameter+0x20>
 80037c8:	200000ac 	.word	0x200000ac

080037cc <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 80037d0:	491b      	ldr	r1, [pc, #108]	; (8003840 <IsMathOperator+0x74>)
 80037d2:	f7fc fc97 	bl	8000104 <strcmp>
 80037d6:	0006      	movs	r6, r0
 80037d8:	2506      	movs	r5, #6
 80037da:	2e00      	cmp	r6, #0
 80037dc:	d023      	beq.n	8003826 <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80037de:	4919      	ldr	r1, [pc, #100]	; (8003844 <IsMathOperator+0x78>)
 80037e0:	0020      	movs	r0, r4
 80037e2:	f7fc fc8f 	bl	8000104 <strcmp>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d01f      	beq.n	800382a <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80037ea:	4917      	ldr	r1, [pc, #92]	; (8003848 <IsMathOperator+0x7c>)
 80037ec:	0020      	movs	r0, r4
 80037ee:	f7fc fc89 	bl	8000104 <strcmp>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d01b      	beq.n	800382e <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80037f6:	4915      	ldr	r1, [pc, #84]	; (800384c <IsMathOperator+0x80>)
 80037f8:	0020      	movs	r0, r4
 80037fa:	f7fc fc83 	bl	8000104 <strcmp>
 80037fe:	2800      	cmp	r0, #0
 8003800:	d017      	beq.n	8003832 <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 8003802:	4913      	ldr	r1, [pc, #76]	; (8003850 <IsMathOperator+0x84>)
 8003804:	0020      	movs	r0, r4
 8003806:	f7fc fc7d 	bl	8000104 <strcmp>
 800380a:	2800      	cmp	r0, #0
 800380c:	d013      	beq.n	8003836 <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 800380e:	4911      	ldr	r1, [pc, #68]	; (8003854 <IsMathOperator+0x88>)
 8003810:	0020      	movs	r0, r4
 8003812:	f7fc fc77 	bl	8000104 <strcmp>
 8003816:	2800      	cmp	r0, #0
 8003818:	d00f      	beq.n	800383a <IsMathOperator+0x6e>
 800381a:	3d01      	subs	r5, #1
 800381c:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 800381e:	2d00      	cmp	r5, #0
 8003820:	d1db      	bne.n	80037da <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 8003822:	2000      	movs	r0, #0
}
 8003824:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 8003826:	2001      	movs	r0, #1
 8003828:	e7fc      	b.n	8003824 <IsMathOperator+0x58>
			return MATH_GREATER;
 800382a:	2002      	movs	r0, #2
 800382c:	e7fa      	b.n	8003824 <IsMathOperator+0x58>
			return MATH_SMALLER;
 800382e:	2003      	movs	r0, #3
 8003830:	e7f8      	b.n	8003824 <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003832:	2004      	movs	r0, #4
 8003834:	e7f6      	b.n	8003824 <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003836:	2005      	movs	r0, #5
 8003838:	e7f4      	b.n	8003824 <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 800383a:	2006      	movs	r0, #6
 800383c:	e7f2      	b.n	8003824 <IsMathOperator+0x58>
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	08018aa0 	.word	0x08018aa0
 8003844:	08018aa4 	.word	0x08018aa4
 8003848:	08018aa8 	.word	0x08018aa8
 800384c:	08018aac 	.word	0x08018aac
 8003850:	08018ab0 	.word	0x08018ab0
 8003854:	08018ab4 	.word	0x08018ab4

08003858 <BOS_Init>:
 -------------------------------------------------------------------------
 */

/* --- BitzOS initialization. 
 */
void BOS_Init(void){
 8003858:	b570      	push	{r4, r5, r6, lr}
		else Output_Port_Array[i-1] = FindRoute(myID, i);
	}
#endif

	/* Initialize and configure RTC */
	RTC_Init();
 800385a:	f00a f8b7 	bl	800d9cc <RTC_Init>
	GetTimeDate();
 800385e:	f00a f955 	bl	800db0c <GetTimeDate>
	
	/* EEPROM Init */
	EE_Init();
 8003862:	f008 fa83 	bl	800bd6c <EE_Init>
	
	/* Initialize all configured peripherals */
	GPIO_Init();
 8003866:	f008 fc75 	bl	800c154 <GPIO_Init>
	DMA_Init();
 800386a:	f007 fb17 	bl	800ae9c <DMA_Init>
	TIM_USEC_Init();
 800386e:	f00a f981 	bl	800db74 <TIM_USEC_Init>
	CRC_Init();
 8003872:	f008 f85d 	bl	800b930 <CRC_Init>
	TIM_MSEC_Init();
 8003876:	f00a f9af 	bl	800dbd8 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if(IsFactoryReset()){
 800387a:	f008 fd39 	bl	800c2f0 <IsFactoryReset>
 800387e:	2800      	cmp	r0, #0
 8003880:	d11a      	bne.n	80038b8 <BOS_Init+0x60>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if(IsLowerCLIbaud()){
 8003882:	f7ff ff3f 	bl	8003704 <IsLowerCLIbaud>
 8003886:	2800      	cmp	r0, #0
 8003888:	d021      	beq.n	80038ce <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 800388a:	4b34      	ldr	r3, [pc, #208]	; (800395c <BOS_Init+0x104>)
 800388c:	2201      	movs	r2, #1
 800388e:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8003890:	2032      	movs	r0, #50	; 0x32
 8003892:	f00a f9e3 	bl	800dc5c <StartMilliDelay>
		Module_Peripheral_Init();
 8003896:	f006 fc13 	bl	800a0c0 <Module_Peripheral_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 800389a:	4b31      	ldr	r3, [pc, #196]	; (8003960 <BOS_Init+0x108>)
 800389c:	22e1      	movs	r2, #225	; 0xe1
 800389e:	0252      	lsls	r2, r2, #9
 80038a0:	609a      	str	r2, [r3, #8]
		/* Update all ports to lower baudrate */
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80038a2:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 80038a4:	001d      	movs	r5, r3
 80038a6:	68a9      	ldr	r1, [r5, #8]
 80038a8:	0020      	movs	r0, r4
 80038aa:	f00a fc1d 	bl	800e0e8 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80038ae:	3401      	adds	r4, #1
 80038b0:	b2e4      	uxtb	r4, r4
 80038b2:	2c07      	cmp	r4, #7
 80038b4:	d1f7      	bne.n	80038a6 <BOS_Init+0x4e>
 80038b6:	e00f      	b.n	80038d8 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 80038b8:	f7ff ff12 	bl	80036e0 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80038bc:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <BOS_Init+0x10c>)
 80038c2:	4a29      	ldr	r2, [pc, #164]	; (8003968 <BOS_Init+0x110>)
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80038ca:	46c0      	nop			; (mov r8, r8)
 80038cc:	e7fd      	b.n	80038ca <BOS_Init+0x72>
		}
	}
	else{
		/* Initialize the module with default baudrate */
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80038ce:	2032      	movs	r0, #50	; 0x32
 80038d0:	f00a f9c4 	bl	800dc5c <StartMilliDelay>
		Module_Peripheral_Init();
 80038d4:	f006 fbf4 	bl	800a0c0 <Module_Peripheral_Init>
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 80038d8:	f7ff fdca 	bl	8003470 <LoadEEvars>
	
	/* If no pre-defined topology, initialize ports direction */
#ifndef __N
	UpdateMyPortsDir();
 80038dc:	f00a fc96 	bl	800e20c <UpdateMyPortsDir>
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 80038e0:	f007 ff82 	bl	800b7e8 <SetupMessagingRxDMAs>
	
	/* Startup indicator sequence */
	if(myID == 0) /* Native module */
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <BOS_Init+0x114>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d025      	beq.n	8003938 <BOS_Init+0xe0>
		IND_ON();
		Delay_ms_no_rtos(500);IND_OFF();
	}
	else /* Non-native module */
	{
		IND_ON();
 80038ec:	2490      	movs	r4, #144	; 0x90
 80038ee:	05e4      	lsls	r4, r4, #23
 80038f0:	2201      	movs	r2, #1
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	0020      	movs	r0, r4
 80038f6:	f00e f8a1 	bl	8011a3c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 80038fa:	20fa      	movs	r0, #250	; 0xfa
 80038fc:	0040      	lsls	r0, r0, #1
 80038fe:	f00a f9ad 	bl	800dc5c <StartMilliDelay>
		IND_OFF();
 8003902:	2200      	movs	r2, #0
 8003904:	2180      	movs	r1, #128	; 0x80
 8003906:	0020      	movs	r0, r4
 8003908:	f00e f898 	bl	8011a3c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800390c:	2064      	movs	r0, #100	; 0x64
 800390e:	f00a f9a5 	bl	800dc5c <StartMilliDelay>
		IND_ON();
 8003912:	2201      	movs	r2, #1
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0020      	movs	r0, r4
 8003918:	f00e f890 	bl	8011a3c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 800391c:	2064      	movs	r0, #100	; 0x64
 800391e:	f00a f99d 	bl	800dc5c <StartMilliDelay>
		IND_OFF();
 8003922:	2200      	movs	r2, #0
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	0020      	movs	r0, r4
 8003928:	f00e f888 	bl	8011a3c <HAL_GPIO_WritePin>
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 800392c:	f003 fcfa 	bl	8007324 <ResetUartORE>
	
	BOS_initialized =1;
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <BOS_Init+0x118>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
}
 8003936:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 8003938:	2490      	movs	r4, #144	; 0x90
 800393a:	05e4      	lsls	r4, r4, #23
 800393c:	2201      	movs	r2, #1
 800393e:	2180      	movs	r1, #128	; 0x80
 8003940:	0020      	movs	r0, r4
 8003942:	f00e f87b 	bl	8011a3c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 8003946:	20fa      	movs	r0, #250	; 0xfa
 8003948:	0040      	lsls	r0, r0, #1
 800394a:	f00a f987 	bl	800dc5c <StartMilliDelay>
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	; 0x80
 8003952:	0020      	movs	r0, r4
 8003954:	f00e f872 	bl	8011a3c <HAL_GPIO_WritePin>
 8003958:	e7e8      	b.n	800392c <BOS_Init+0xd4>
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	20000ae8 	.word	0x20000ae8
 8003960:	20006a0c 	.word	0x20006a0c
 8003964:	e000ed00 	.word	0xe000ed00
 8003968:	05fa0004 	.word	0x05fa0004
 800396c:	20001792 	.word	0x20001792
 8003970:	20000ae7 	.word	0x20000ae7

08003974 <Module_Init>:
void Module_Init(void){
 8003974:	b510      	push	{r4, lr}

	/* Reset all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003976:	f00c fc27 	bl	80101c8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800397a:	f006 fa6d 	bl	8009e58 <SystemClock_Config>

	/* Initialize BitzOS */
	BOS_Init();
 800397e:	f7ff ff6b 	bl	8003858 <BOS_Init>

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8003982:	f003 fcef 	bl	8007364 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8003986:	f00a fce7 	bl	800e358 <osKernelStart>
}
 800398a:	bd10      	pop	{r4, pc}

0800398c <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 800398c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398e:	46c6      	mov	lr, r8
 8003990:	b500      	push	{lr}
 8003992:	b082      	sub	sp, #8
 8003994:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003996:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003998:	4b0f      	ldr	r3, [pc, #60]	; (80039d8 <ExploreNeighbors+0x4c>)
 800399a:	4698      	mov	r8, r3
 800399c:	4d0f      	ldr	r5, [pc, #60]	; (80039dc <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 800399e:	2703      	movs	r7, #3
		if(port != ignore){
 80039a0:	42a6      	cmp	r6, r4
 80039a2:	d00f      	beq.n	80039c4 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 80039a4:	4643      	mov	r3, r8
 80039a6:	881b      	ldrh	r3, [r3, #0]
 80039a8:	0a1a      	lsrs	r2, r3, #8
 80039aa:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 80039ac:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 80039ae:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 80039b0:	9700      	str	r7, [sp, #0]
 80039b2:	230a      	movs	r3, #10
 80039b4:	2200      	movs	r2, #0
 80039b6:	2100      	movs	r1, #0
 80039b8:	0020      	movs	r0, r4
 80039ba:	f004 f95b 	bl	8007c74 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 80039be:	200a      	movs	r0, #10
 80039c0:	f00a fccf 	bl	800e362 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 80039c4:	3401      	adds	r4, #1
 80039c6:	b2e4      	uxtb	r4, r4
 80039c8:	2c07      	cmp	r4, #7
 80039ca:	d1e9      	bne.n	80039a0 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 80039cc:	2000      	movs	r0, #0
 80039ce:	b002      	add	sp, #8
 80039d0:	bc04      	pop	{r2}
 80039d2:	4690      	mov	r8, r2
 80039d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d6:	46c0      	nop			; (mov r8, r8)
 80039d8:	20000078 	.word	0x20000078
 80039dc:	20001654 	.word	0x20001654

080039e0 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 80039e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e2:	46de      	mov	lr, fp
 80039e4:	4657      	mov	r7, sl
 80039e6:	464e      	mov	r6, r9
 80039e8:	4645      	mov	r5, r8
 80039ea:	b5e0      	push	{r5, r6, r7, lr}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 80039f0:	4b47      	ldr	r3, [pc, #284]	; (8003b10 <FindBroadcastRoutes+0x130>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	469c      	mov	ip, r3
 80039f6:	3307      	adds	r3, #7
 80039f8:	08db      	lsrs	r3, r3, #3
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	466a      	mov	r2, sp
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	469d      	mov	sp, r3
 8003a02:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003a04:	4663      	mov	r3, ip
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00d      	beq.n	8003a26 <FindBroadcastRoutes+0x46>
 8003a0a:	0023      	movs	r3, r4
 8003a0c:	4a41      	ldr	r2, [pc, #260]	; (8003b14 <FindBroadcastRoutes+0x134>)
 8003a0e:	4661      	mov	r1, ip
 8003a10:	1e4d      	subs	r5, r1, #1
 8003a12:	b2ed      	uxtb	r5, r5
 8003a14:	3501      	adds	r5, #1
 8003a16:	192d      	adds	r5, r5, r4
		modules[m] =0;
 8003a18:	2100      	movs	r1, #0
 8003a1a:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 8003a1c:	8011      	strh	r1, [r2, #0]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 8003a22:	42ab      	cmp	r3, r5
 8003a24:	d1f9      	bne.n	8003a1a <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 8003a26:	3801      	subs	r0, #1
 8003a28:	2301      	movs	r3, #1
 8003a2a:	5423      	strb	r3, [r4, r0]
 8003a2c:	2216      	movs	r2, #22
 8003a2e:	4342      	muls	r2, r0
 8003a30:	3202      	adds	r2, #2
 8003a32:	4b39      	ldr	r3, [pc, #228]	; (8003b18 <FindBroadcastRoutes+0x138>)
 8003a34:	18d2      	adds	r2, r2, r3
 8003a36:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a38:	4d36      	ldr	r5, [pc, #216]	; (8003b14 <FindBroadcastRoutes+0x134>)
 8003a3a:	0040      	lsls	r0, r0, #1
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a40:	46a3      	mov	fp, r4
 8003a42:	e003      	b.n	8003a4c <FindBroadcastRoutes+0x6c>
 8003a44:	3101      	adds	r1, #1
 8003a46:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 8003a48:	2906      	cmp	r1, #6
 8003a4a:	d011      	beq.n	8003a70 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 8003a4c:	8813      	ldrh	r3, [r2, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f8      	beq.n	8003a44 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 8003a52:	5b46      	ldrh	r6, [r0, r5]
 8003a54:	46b1      	mov	r9, r6
 8003a56:	4646      	mov	r6, r8
 8003a58:	408e      	lsls	r6, r1
 8003a5a:	46b2      	mov	sl, r6
 8003a5c:	464e      	mov	r6, r9
 8003a5e:	4654      	mov	r4, sl
 8003a60:	4326      	orrs	r6, r4
 8003a62:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	445b      	add	r3, fp
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	2402      	movs	r4, #2
 8003a6c:	701c      	strb	r4, [r3, #0]
 8003a6e:	e7e9      	b.n	8003a44 <FindBroadcastRoutes+0x64>
 8003a70:	465c      	mov	r4, fp
	++level;												// Move one level
 8003a72:	2602      	movs	r6, #2
 8003a74:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <FindBroadcastRoutes+0x138>)
 8003a76:	3302      	adds	r3, #2
 8003a78:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	469b      	mov	fp, r3
 8003a7e:	46b0      	mov	r8, r6
 8003a80:	0026      	movs	r6, r4
		++level;											// Move one level
 8003a82:	4643      	mov	r3, r8
 8003a84:	3301      	adds	r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003a8a:	4663      	mov	r3, ip
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d035      	beq.n	8003afc <FindBroadcastRoutes+0x11c>
 8003a90:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003a92:	2300      	movs	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003a96:	3b01      	subs	r3, #1
 8003a98:	4443      	add	r3, r8
 8003a9a:	4699      	mov	r9, r3
 8003a9c:	e01e      	b.n	8003adc <FindBroadcastRoutes+0xfc>
 8003a9e:	3001      	adds	r0, #1
 8003aa0:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003aa2:	2806      	cmp	r0, #6
 8003aa4:	d015      	beq.n	8003ad2 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 8003aa6:	880b      	ldrh	r3, [r1, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0f8      	beq.n	8003a9e <FindBroadcastRoutes+0xbe>
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	5cf5      	ldrb	r5, [r6, r3]
 8003ab2:	2d00      	cmp	r5, #0
 8003ab4:	d1f3      	bne.n	8003a9e <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 8003ab6:	4a17      	ldr	r2, [pc, #92]	; (8003b14 <FindBroadcastRoutes+0x134>)
 8003ab8:	5aa5      	ldrh	r5, [r4, r2]
 8003aba:	465a      	mov	r2, fp
 8003abc:	4082      	lsls	r2, r0
 8003abe:	4315      	orrs	r5, r2
 8003ac0:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <FindBroadcastRoutes+0x134>)
 8003ac2:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	54f2      	strb	r2, [r6, r3]
						++untaged;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e7e5      	b.n	8003a9e <FindBroadcastRoutes+0xbe>
 8003ad2:	68ba      	ldr	r2, [r7, #8]
 8003ad4:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 8003ad6:	b2d3      	uxtb	r3, r2
 8003ad8:	4563      	cmp	r3, ip
 8003ada:	d20c      	bcs.n	8003af6 <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003adc:	5cb3      	ldrb	r3, [r6, r2]
 8003ade:	454b      	cmp	r3, r9
 8003ae0:	d1f8      	bne.n	8003ad4 <FindBroadcastRoutes+0xf4>
 8003ae2:	2116      	movs	r1, #22
 8003ae4:	4351      	muls	r1, r2
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	469a      	mov	sl, r3
 8003aea:	4451      	add	r1, sl
 8003aec:	0053      	lsls	r3, r2, #1
 8003aee:	2000      	movs	r0, #0
 8003af0:	60ba      	str	r2, [r7, #8]
 8003af2:	001c      	movs	r4, r3
 8003af4:	e7d7      	b.n	8003aa6 <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1c2      	bne.n	8003a82 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 8003afc:	2000      	movs	r0, #0
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b005      	add	sp, #20
 8003b02:	bc3c      	pop	{r2, r3, r4, r5}
 8003b04:	4690      	mov	r8, r2
 8003b06:	4699      	mov	r9, r3
 8003b08:	46a2      	mov	sl, r4
 8003b0a:	46ab      	mov	fp, r5
 8003b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	20000044 	.word	0x20000044
 8003b14:	200013d4 	.word	0x200013d4
 8003b18:	20001194 	.word	0x20001194

08003b1c <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 8003b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 8003b1e:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 8003b20:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d100      	bne.n	8003b28 <minArr+0xc>
		smallest =arr[0];
 8003b26:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <minArr+0x38>)
 8003b2a:	781d      	ldrb	r5, [r3, #0]
 8003b2c:	2d00      	cmp	r5, #0
 8003b2e:	dd0e      	ble.n	8003b4e <minArr+0x32>
 8003b30:	2300      	movs	r3, #0
 8003b32:	2700      	movs	r7, #0
 8003b34:	e002      	b.n	8003b3c <minArr+0x20>
 8003b36:	3301      	adds	r3, #1
 8003b38:	42ab      	cmp	r3, r5
 8003b3a:	da09      	bge.n	8003b50 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 8003b3c:	5cc2      	ldrb	r2, [r0, r3]
 8003b3e:	42a2      	cmp	r2, r4
 8003b40:	d2f9      	bcs.n	8003b36 <minArr+0x1a>
 8003b42:	5cce      	ldrb	r6, [r1, r3]
 8003b44:	2e00      	cmp	r6, #0
 8003b46:	d1f6      	bne.n	8003b36 <minArr+0x1a>
			smallest =arr[i];
			index =i;
 8003b48:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 8003b4a:	0014      	movs	r4, r2
 8003b4c:	e7f3      	b.n	8003b36 <minArr+0x1a>
	for(int i =0; i < N; i++){
 8003b4e:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 8003b50:	0038      	movs	r0, r7
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b54:	20000044 	.word	0x20000044

08003b58 <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 8003b58:	4b07      	ldr	r3, [pc, #28]	; (8003b78 <QnotEmpty+0x20>)
 8003b5a:	7819      	ldrb	r1, [r3, #0]
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	d008      	beq.n	8003b72 <QnotEmpty+0x1a>
 8003b60:	0003      	movs	r3, r0
 8003b62:	1841      	adds	r1, r0, r1
	char temp =1;
 8003b64:	2001      	movs	r0, #1
		temp &=Q[i];
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	4010      	ands	r0, r2
 8003b6a:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	d1fa      	bne.n	8003b66 <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003b70:	4770      	bx	lr
	char temp =1;
 8003b72:	2001      	movs	r0, #1
 8003b74:	e7fc      	b.n	8003b70 <QnotEmpty+0x18>
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20000044 	.word	0x20000044

08003b7c <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7e:	46de      	mov	lr, fp
 8003b80:	4657      	mov	r7, sl
 8003b82:	464e      	mov	r6, r9
 8003b84:	4645      	mov	r5, r8
 8003b86:	b5e0      	push	{r5, r6, r7, lr}
 8003b88:	b08f      	sub	sp, #60	; 0x3c
 8003b8a:	0005      	movs	r5, r0
 8003b8c:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003b8e:	2232      	movs	r2, #50	; 0x32
 8003b90:	2100      	movs	r1, #0
 8003b92:	a801      	add	r0, sp, #4
 8003b94:	f010 f9a8 	bl	8013ee8 <memset>
	memset(route,0,sizeof(route));
 8003b98:	221a      	movs	r2, #26
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	485a      	ldr	r0, [pc, #360]	; (8003d08 <FindRoute+0x18c>)
 8003b9e:	f010 f9a3 	bl	8013ee8 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003ba2:	0029      	movs	r1, r5
 8003ba4:	1e68      	subs	r0, r5, #1
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <FindRoute+0x190>)
 8003baa:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003bac:	4a58      	ldr	r2, [pc, #352]	; (8003d10 <FindRoute+0x194>)
 8003bae:	5413      	strb	r3, [r2, r0]
 8003bb0:	2516      	movs	r5, #22
 8003bb2:	4345      	muls	r5, r0
 8003bb4:	3502      	adds	r5, #2
 8003bb6:	4b57      	ldr	r3, [pc, #348]	; (8003d14 <FindRoute+0x198>)
 8003bb8:	18ed      	adds	r5, r5, r3
 8003bba:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 8003bbc:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003bbe:	4653      	mov	r3, sl
 8003bc0:	b29c      	uxth	r4, r3
 8003bc2:	e003      	b.n	8003bcc <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 8003bc4:	3001      	adds	r0, #1
 8003bc6:	3202      	adds	r2, #2
 8003bc8:	2807      	cmp	r0, #7
 8003bca:	d00f      	beq.n	8003bec <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003bcc:	8813      	ldrh	r3, [r2, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d0f8      	beq.n	8003bc4 <FindRoute+0x48>
 8003bd2:	08db      	lsrs	r3, r3, #3
 8003bd4:	42a3      	cmp	r3, r4
 8003bd6:	d1f5      	bne.n	8003bc4 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003bd8:	4b4c      	ldr	r3, [pc, #304]	; (8003d0c <FindRoute+0x190>)
 8003bda:	4453      	add	r3, sl
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003be2:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <FindRoute+0x18c>)
 8003be4:	4652      	mov	r2, sl
 8003be6:	701a      	strb	r2, [r3, #0]
			return col;
 8003be8:	b2c0      	uxtb	r0, r0
 8003bea:	e085      	b.n	8003cf8 <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003bec:	4b4a      	ldr	r3, [pc, #296]	; (8003d18 <FindRoute+0x19c>)
 8003bee:	781e      	ldrb	r6, [r3, #0]
 8003bf0:	2e00      	cmp	r6, #0
 8003bf2:	dd11      	ble.n	8003c18 <FindRoute+0x9c>
 8003bf4:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003bf6:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003bf8:	4f45      	ldr	r7, [pc, #276]	; (8003d10 <FindRoute+0x194>)
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	46ac      	mov	ip, r5
 8003bfe:	e002      	b.n	8003c06 <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003c00:	3301      	adds	r3, #1
 8003c02:	42b3      	cmp	r3, r6
 8003c04:	dc07      	bgt.n	8003c16 <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003c06:	4299      	cmp	r1, r3
 8003c08:	d0fa      	beq.n	8003c00 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003c0a:	1e5a      	subs	r2, r3, #1
 8003c0c:	4d3f      	ldr	r5, [pc, #252]	; (8003d0c <FindRoute+0x190>)
 8003c0e:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003c10:	18ba      	adds	r2, r7, r2
 8003c12:	7010      	strb	r0, [r2, #0]
 8003c14:	e7f4      	b.n	8003c00 <FindRoute+0x84>
 8003c16:	4665      	mov	r5, ip
	uint8_t u =0;
 8003c18:	2400      	movs	r4, #0
 8003c1a:	4b3e      	ldr	r3, [pc, #248]	; (8003d14 <FindRoute+0x198>)
 8003c1c:	4698      	mov	r8, r3
 8003c1e:	230e      	movs	r3, #14
 8003c20:	4443      	add	r3, r8
 8003c22:	4656      	mov	r6, sl
 8003c24:	469b      	mov	fp, r3
 8003c26:	46a9      	mov	r9, r5
 8003c28:	e01d      	b.n	8003c66 <FindRoute+0xea>
 8003c2a:	464d      	mov	r5, r9
 8003c2c:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003c2e:	0034      	movs	r4, r6
 8003c30:	e034      	b.n	8003c9c <FindRoute+0x120>
 8003c32:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003c34:	4281      	cmp	r1, r0
 8003c36:	d015      	beq.n	8003c64 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003c38:	880b      	ldrh	r3, [r1, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f9      	beq.n	8003c32 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003c3e:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	5cd7      	ldrb	r7, [r2, r3]
 8003c46:	2f00      	cmp	r7, #0
 8003c48:	d1f3      	bne.n	8003c32 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003c4a:	4f30      	ldr	r7, [pc, #192]	; (8003d0c <FindRoute+0x190>)
 8003c4c:	5d7f      	ldrb	r7, [r7, r5]
 8003c4e:	3701      	adds	r7, #1
 8003c50:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003c52:	4e2e      	ldr	r6, [pc, #184]	; (8003d0c <FindRoute+0x190>)
 8003c54:	5cf6      	ldrb	r6, [r6, r3]
 8003c56:	42be      	cmp	r6, r7
 8003c58:	d9eb      	bls.n	8003c32 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003c5a:	4e2c      	ldr	r6, [pc, #176]	; (8003d0c <FindRoute+0x190>)
 8003c5c:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003c5e:	4e2c      	ldr	r6, [pc, #176]	; (8003d10 <FindRoute+0x194>)
 8003c60:	54f4      	strb	r4, [r6, r3]
 8003c62:	e7e6      	b.n	8003c32 <FindRoute+0xb6>
 8003c64:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003c66:	a801      	add	r0, sp, #4
 8003c68:	f7ff ff76 	bl	8003b58 <QnotEmpty>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d113      	bne.n	8003c98 <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003c70:	a901      	add	r1, sp, #4
 8003c72:	4826      	ldr	r0, [pc, #152]	; (8003d0c <FindRoute+0x190>)
 8003c74:	f7ff ff52 	bl	8003b1c <minArr>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003c7c:	42b4      	cmp	r4, r6
 8003c7e:	d0d4      	beq.n	8003c2a <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003c80:	1e65      	subs	r5, r4, #1
 8003c82:	ab01      	add	r3, sp, #4
 8003c84:	2201      	movs	r2, #1
 8003c86:	555a      	strb	r2, [r3, r5]
 8003c88:	2016      	movs	r0, #22
 8003c8a:	4368      	muls	r0, r5
 8003c8c:	1c81      	adds	r1, r0, #2
 8003c8e:	4441      	add	r1, r8
 8003c90:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003c92:	001a      	movs	r2, r3
 8003c94:	46b2      	mov	sl, r6
 8003c96:	e7cf      	b.n	8003c38 <FindRoute+0xbc>
 8003c98:	464d      	mov	r5, r9
 8003c9a:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <FindRoute+0x194>)
 8003c9e:	191b      	adds	r3, r3, r4
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	2a00      	cmp	r2, #0
 8003ca8:	d00e      	beq.n	8003cc8 <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003caa:	4917      	ldr	r1, [pc, #92]	; (8003d08 <FindRoute+0x18c>)
 8003cac:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003cae:	4e18      	ldr	r6, [pc, #96]	; (8003d10 <FindRoute+0x194>)
 8003cb0:	e000      	b.n	8003cb4 <FindRoute+0x138>
 8003cb2:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003cb4:	1c58      	adds	r0, r3, #1
 8003cb6:	4661      	mov	r1, ip
 8003cb8:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003cba:	18b3      	adds	r3, r6, r2
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	7819      	ldrb	r1, [r3, #0]
 8003cc0:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003cc2:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003cc4:	2900      	cmp	r1, #0
 8003cc6:	d1f4      	bne.n	8003cb2 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003cc8:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003cca:	490f      	ldr	r1, [pc, #60]	; (8003d08 <FindRoute+0x18c>)
 8003ccc:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <FindRoute+0x190>)
 8003cce:	4453      	add	r3, sl
 8003cd0:	001f      	movs	r7, r3
 8003cd2:	3f01      	subs	r7, #1
 8003cd4:	e003      	b.n	8003cde <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	3502      	adds	r5, #2
 8003cda:	2807      	cmp	r0, #7
 8003cdc:	d00b      	beq.n	8003cf6 <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003cde:	882b      	ldrh	r3, [r5, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f8      	beq.n	8003cd6 <FindRoute+0x15a>
 8003ce4:	783a      	ldrb	r2, [r7, #0]
 8003ce6:	188a      	adds	r2, r1, r2
 8003ce8:	3a01      	subs	r2, #1
 8003cea:	7812      	ldrb	r2, [r2, #0]
 8003cec:	08db      	lsrs	r3, r3, #3
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d1f1      	bne.n	8003cd6 <FindRoute+0x15a>
			return col;
 8003cf2:	b2c0      	uxtb	r0, r0
 8003cf4:	e000      	b.n	8003cf8 <FindRoute+0x17c>
	return 0;
 8003cf6:	2000      	movs	r0, #0
}
 8003cf8:	b00f      	add	sp, #60	; 0x3c
 8003cfa:	bc3c      	pop	{r2, r3, r4, r5}
 8003cfc:	4690      	mov	r8, r2
 8003cfe:	4699      	mov	r9, r3
 8003d00:	46a2      	mov	sl, r4
 8003d02:	46ab      	mov	fp, r5
 8003d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	20006ad4 	.word	0x20006ad4
 8003d0c:	20001834 	.word	0x20001834
 8003d10:	20001850 	.word	0x20001850
 8003d14:	20001194 	.word	0x20001194
 8003d18:	20000044 	.word	0x20000044

08003d1c <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1e:	46d6      	mov	lr, sl
 8003d20:	464f      	mov	r7, r9
 8003d22:	4646      	mov	r6, r8
 8003d24:	b5c0      	push	{r6, r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	0005      	movs	r5, r0
 8003d2a:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003d2c:	4c56      	ldr	r4, [pc, #344]	; (8003e88 <DisplayTopology+0x16c>)
 8003d2e:	4b57      	ldr	r3, [pc, #348]	; (8003e8c <DisplayTopology+0x170>)
 8003d30:	0022      	movs	r2, r4
 8003d32:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003d34:	c243      	stmia	r2!, {r0, r1, r6}
 8003d36:	6819      	ldr	r1, [r3, #0]
 8003d38:	6011      	str	r1, [r2, #0]
 8003d3a:	889b      	ldrh	r3, [r3, #4]
 8003d3c:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d3e:	0020      	movs	r0, r4
 8003d40:	f7fc f9ea 	bl	8000118 <strlen>
 8003d44:	b282      	uxth	r2, r0
 8003d46:	2301      	movs	r3, #1
 8003d48:	425b      	negs	r3, r3
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	3333      	adds	r3, #51	; 0x33
 8003d4e:	0021      	movs	r1, r4
 8003d50:	0028      	movs	r0, r5
 8003d52:	f00a f97f 	bl	800e054 <writePxMutex>
 8003d56:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003d58:	4f4d      	ldr	r7, [pc, #308]	; (8003e90 <DisplayTopology+0x174>)
 8003d5a:	4d4b      	ldr	r5, [pc, #300]	; (8003e88 <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d5c:	2601      	movs	r6, #1
 8003d5e:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003d60:	0022      	movs	r2, r4
 8003d62:	0039      	movs	r1, r7
 8003d64:	0028      	movs	r0, r5
 8003d66:	f010 faeb 	bl	8014340 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d6a:	0028      	movs	r0, r5
 8003d6c:	f7fc f9d4 	bl	8000118 <strlen>
 8003d70:	b282      	uxth	r2, r0
 8003d72:	9600      	str	r6, [sp, #0]
 8003d74:	2332      	movs	r3, #50	; 0x32
 8003d76:	0029      	movs	r1, r5
 8003d78:	9803      	ldr	r0, [sp, #12]
 8003d7a:	f00a f96b 	bl	800e054 <writePxMutex>
 8003d7e:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d80:	2c07      	cmp	r4, #7
 8003d82:	d1ed      	bne.n	8003d60 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d84:	2301      	movs	r3, #1
 8003d86:	425b      	negs	r3, r3
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	3333      	adds	r3, #51	; 0x33
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	4941      	ldr	r1, [pc, #260]	; (8003e94 <DisplayTopology+0x178>)
 8003d90:	9803      	ldr	r0, [sp, #12]
 8003d92:	f00a f95f 	bl	800e054 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d96:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <DisplayTopology+0x17c>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d065      	beq.n	8003e6a <DisplayTopology+0x14e>
 8003d9e:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003da0:	2701      	movs	r7, #1
 8003da2:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003da4:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <DisplayTopology+0x180>)
 8003da6:	4699      	mov	r9, r3
 8003da8:	230e      	movs	r3, #14
 8003daa:	444b      	add	r3, r9
 8003dac:	469a      	mov	sl, r3
 8003dae:	e02a      	b.n	8003e06 <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003db0:	2307      	movs	r3, #7
 8003db2:	4013      	ands	r3, r2
 8003db4:	08d2      	lsrs	r2, r2, #3
 8003db6:	493a      	ldr	r1, [pc, #232]	; (8003ea0 <DisplayTopology+0x184>)
 8003db8:	4833      	ldr	r0, [pc, #204]	; (8003e88 <DisplayTopology+0x16c>)
 8003dba:	f010 fac1 	bl	8014340 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003dbe:	4d32      	ldr	r5, [pc, #200]	; (8003e88 <DisplayTopology+0x16c>)
 8003dc0:	0028      	movs	r0, r5
 8003dc2:	f7fc f9a9 	bl	8000118 <strlen>
 8003dc6:	b282      	uxth	r2, r0
 8003dc8:	9700      	str	r7, [sp, #0]
 8003dca:	2332      	movs	r3, #50	; 0x32
 8003dcc:	0029      	movs	r1, r5
 8003dce:	9803      	ldr	r0, [sp, #12]
 8003dd0:	f00a f940 	bl	800e054 <writePxMutex>
 8003dd4:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003dd6:	42b4      	cmp	r4, r6
 8003dd8:	d007      	beq.n	8003dea <DisplayTopology+0xce>
			if(!array[row][col])
 8003dda:	8822      	ldrh	r2, [r4, #0]
 8003ddc:	2a00      	cmp	r2, #0
 8003dde:	d1e7      	bne.n	8003db0 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003de0:	4930      	ldr	r1, [pc, #192]	; (8003ea4 <DisplayTopology+0x188>)
 8003de2:	4829      	ldr	r0, [pc, #164]	; (8003e88 <DisplayTopology+0x16c>)
 8003de4:	f010 faac 	bl	8014340 <sprintf>
 8003de8:	e7e9      	b.n	8003dbe <DisplayTopology+0xa2>
 8003dea:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003dec:	9700      	str	r7, [sp, #0]
 8003dee:	2332      	movs	r3, #50	; 0x32
 8003df0:	2202      	movs	r2, #2
 8003df2:	492d      	ldr	r1, [pc, #180]	; (8003ea8 <DisplayTopology+0x18c>)
 8003df4:	9803      	ldr	r0, [sp, #12]
 8003df6:	f00a f92d 	bl	800e054 <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003dfa:	3601      	adds	r6, #1
 8003dfc:	b2f6      	uxtb	r6, r6
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <DisplayTopology+0x17c>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	42b3      	cmp	r3, r6
 8003e04:	d931      	bls.n	8003e6a <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003e06:	1c72      	adds	r2, r6, #1
 8003e08:	4c1f      	ldr	r4, [pc, #124]	; (8003e88 <DisplayTopology+0x16c>)
 8003e0a:	4928      	ldr	r1, [pc, #160]	; (8003eac <DisplayTopology+0x190>)
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	f010 fa97 	bl	8014340 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e12:	0020      	movs	r0, r4
 8003e14:	f7fc f980 	bl	8000118 <strlen>
 8003e18:	b282      	uxth	r2, r0
 8003e1a:	9700      	str	r7, [sp, #0]
 8003e1c:	2332      	movs	r3, #50	; 0x32
 8003e1e:	0021      	movs	r1, r4
 8003e20:	9803      	ldr	r0, [sp, #12]
 8003e22:	f00a f917 	bl	800e054 <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003e26:	2516      	movs	r5, #22
 8003e28:	4375      	muls	r5, r6
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	5aeb      	ldrh	r3, [r5, r3]
 8003e2e:	0059      	lsls	r1, r3, #1
 8003e30:	18c9      	adds	r1, r1, r3
 8003e32:	0049      	lsls	r1, r1, #1
 8003e34:	4b1e      	ldr	r3, [pc, #120]	; (8003eb0 <DisplayTopology+0x194>)
 8003e36:	18c9      	adds	r1, r1, r3
 8003e38:	2205      	movs	r2, #5
 8003e3a:	0020      	movs	r0, r4
 8003e3c:	f010 fad5 	bl	80143ea <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003e40:	9700      	str	r7, [sp, #0]
 8003e42:	2332      	movs	r3, #50	; 0x32
 8003e44:	2205      	movs	r2, #5
 8003e46:	0021      	movs	r1, r4
 8003e48:	9c03      	ldr	r4, [sp, #12]
 8003e4a:	0020      	movs	r0, r4
 8003e4c:	f00a f902 	bl	800e054 <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003e50:	9700      	str	r7, [sp, #0]
 8003e52:	2332      	movs	r3, #50	; 0x32
 8003e54:	2201      	movs	r2, #1
 8003e56:	4917      	ldr	r1, [pc, #92]	; (8003eb4 <DisplayTopology+0x198>)
 8003e58:	0020      	movs	r0, r4
 8003e5a:	f00a f8fb 	bl	800e054 <writePxMutex>
 8003e5e:	1cac      	adds	r4, r5, #2
 8003e60:	444c      	add	r4, r9
 8003e62:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003e64:	46b0      	mov	r8, r6
 8003e66:	002e      	movs	r6, r5
 8003e68:	e7b7      	b.n	8003dda <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	425b      	negs	r3, r3
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	3333      	adds	r3, #51	; 0x33
 8003e72:	2201      	movs	r2, #1
 8003e74:	4910      	ldr	r1, [pc, #64]	; (8003eb8 <DisplayTopology+0x19c>)
 8003e76:	9803      	ldr	r0, [sp, #12]
 8003e78:	f00a f8ec 	bl	800e054 <writePxMutex>
}
 8003e7c:	b004      	add	sp, #16
 8003e7e:	bc1c      	pop	{r2, r3, r4}
 8003e80:	4690      	mov	r8, r2
 8003e82:	4699      	mov	r9, r3
 8003e84:	46a2      	mov	sl, r4
 8003e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e88:	200017c4 	.word	0x200017c4
 8003e8c:	08018a64 	.word	0x08018a64
 8003e90:	08018a78 	.word	0x08018a78
 8003e94:	0801a18c 	.word	0x0801a18c
 8003e98:	20000044 	.word	0x20000044
 8003e9c:	20001194 	.word	0x20001194
 8003ea0:	08018a90 	.word	0x08018a90
 8003ea4:	08018a8c 	.word	0x08018a8c
 8003ea8:	0801890c 	.word	0x0801890c
 8003eac:	08018a80 	.word	0x08018a80
 8003eb0:	08018acc 	.word	0x08018acc
 8003eb4:	08018a74 	.word	0x08018a74
 8003eb8:	0801a350 	.word	0x0801a350

08003ebc <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	46c6      	mov	lr, r8
 8003ec0:	b500      	push	{lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	0005      	movs	r5, r0
 8003ec6:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003ec8:	4c30      	ldr	r4, [pc, #192]	; (8003f8c <DisplayPortsDir+0xd0>)
 8003eca:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <DisplayPortsDir+0xd4>)
 8003ecc:	0022      	movs	r2, r4
 8003ece:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ed0:	c243      	stmia	r2!, {r0, r1, r6}
 8003ed2:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ed4:	c243      	stmia	r2!, {r0, r1, r6}
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003eda:	0020      	movs	r0, r4
 8003edc:	f7fc f91c 	bl	8000118 <strlen>
 8003ee0:	b282      	uxth	r2, r0
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	425b      	negs	r3, r3
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	3333      	adds	r3, #51	; 0x33
 8003eea:	0021      	movs	r1, r4
 8003eec:	0028      	movs	r0, r5
 8003eee:	f00a f8b1 	bl	800e054 <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003ef2:	4b28      	ldr	r3, [pc, #160]	; (8003f94 <DisplayPortsDir+0xd8>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4690      	mov	r8, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d02c      	beq.n	8003f58 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003efe:	4e26      	ldr	r6, [pc, #152]	; (8003f98 <DisplayPortsDir+0xdc>)
 8003f00:	e025      	b.n	8003f4e <DisplayPortsDir+0x92>
 8003f02:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003f04:	2c0a      	cmp	r4, #10
 8003f06:	d01a      	beq.n	8003f3e <DisplayPortsDir+0x82>
 8003f08:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f0a:	5ba9      	ldrh	r1, [r5, r6]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	0212      	lsls	r2, r2, #8
 8003f10:	411a      	asrs	r2, r3
 8003f12:	420a      	tst	r2, r1
 8003f14:	d0f5      	beq.n	8003f02 <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003f16:	4f1d      	ldr	r7, [pc, #116]	; (8003f8c <DisplayPortsDir+0xd0>)
 8003f18:	0023      	movs	r3, r4
 8003f1a:	4642      	mov	r2, r8
 8003f1c:	491f      	ldr	r1, [pc, #124]	; (8003f9c <DisplayPortsDir+0xe0>)
 8003f1e:	0038      	movs	r0, r7
 8003f20:	f010 fa0e 	bl	8014340 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003f24:	0038      	movs	r0, r7
 8003f26:	f7fc f8f7 	bl	8000118 <strlen>
 8003f2a:	b282      	uxth	r2, r0
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	425b      	negs	r3, r3
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	3333      	adds	r3, #51	; 0x33
 8003f34:	0039      	movs	r1, r7
 8003f36:	9803      	ldr	r0, [sp, #12]
 8003f38:	f00a f88c 	bl	800e054 <writePxMutex>
 8003f3c:	e7e1      	b.n	8003f02 <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003f3e:	4643      	mov	r3, r8
 8003f40:	3301      	adds	r3, #1
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	4698      	mov	r8, r3
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <DisplayPortsDir+0xd8>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	4543      	cmp	r3, r8
 8003f4c:	d304      	bcc.n	8003f58 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003f4e:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003f50:	4642      	mov	r2, r8
 8003f52:	1e55      	subs	r5, r2, #1
 8003f54:	006d      	lsls	r5, r5, #1
 8003f56:	e7d7      	b.n	8003f08 <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003f58:	4c0c      	ldr	r4, [pc, #48]	; (8003f8c <DisplayPortsDir+0xd0>)
 8003f5a:	4b11      	ldr	r3, [pc, #68]	; (8003fa0 <DisplayPortsDir+0xe4>)
 8003f5c:	0022      	movs	r2, r4
 8003f5e:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f60:	c223      	stmia	r2!, {r0, r1, r5}
 8003f62:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003f64:	c223      	stmia	r2!, {r0, r1, r5}
 8003f66:	cb03      	ldmia	r3!, {r0, r1}
 8003f68:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f6a:	0020      	movs	r0, r4
 8003f6c:	f7fc f8d4 	bl	8000118 <strlen>
 8003f70:	b282      	uxth	r2, r0
 8003f72:	2301      	movs	r3, #1
 8003f74:	425b      	negs	r3, r3
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	3333      	adds	r3, #51	; 0x33
 8003f7a:	0021      	movs	r1, r4
 8003f7c:	9803      	ldr	r0, [sp, #12]
 8003f7e:	f00a f869 	bl	800e054 <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f82:	b004      	add	sp, #16
 8003f84:	bc04      	pop	{r2}
 8003f86:	4690      	mov	r8, r2
 8003f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	200017c4 	.word	0x200017c4
 8003f90:	08018a14 	.word	0x08018a14
 8003f94:	20000044 	.word	0x20000044
 8003f98:	20006f50 	.word	0x20006f50
 8003f9c:	08018a30 	.word	0x08018a30
 8003fa0:	08018a44 	.word	0x08018a44

08003fa4 <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa6:	46d6      	mov	lr, sl
 8003fa8:	b500      	push	{lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003fae:	f00a fae9 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8003fb2:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003fb8:	4b8d      	ldr	r3, [pc, #564]	; (80041f0 <DisplayModuleStatus+0x24c>)
 8003fba:	781a      	ldrb	r2, [r3, #0]
 8003fbc:	4d8d      	ldr	r5, [pc, #564]	; (80041f4 <DisplayModuleStatus+0x250>)
 8003fbe:	498e      	ldr	r1, [pc, #568]	; (80041f8 <DisplayModuleStatus+0x254>)
 8003fc0:	0028      	movs	r0, r5
 8003fc2:	f010 f9bd 	bl	8014340 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fc6:	0029      	movs	r1, r5
 8003fc8:	0020      	movs	r0, r4
 8003fca:	f010 f9d9 	bl	8014380 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003fce:	4b8b      	ldr	r3, [pc, #556]	; (80041fc <DisplayModuleStatus+0x258>)
 8003fd0:	781a      	ldrb	r2, [r3, #0]
 8003fd2:	498b      	ldr	r1, [pc, #556]	; (8004200 <DisplayModuleStatus+0x25c>)
 8003fd4:	0028      	movs	r0, r5
 8003fd6:	f010 f9b3 	bl	8014340 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fda:	0029      	movs	r1, r5
 8003fdc:	0020      	movs	r0, r4
 8003fde:	f010 f9cf 	bl	8014380 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4986      	ldr	r1, [pc, #536]	; (8004204 <DisplayModuleStatus+0x260>)
 8003fec:	0028      	movs	r0, r5
 8003fee:	f010 f9a7 	bl	8014340 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003ff2:	0029      	movs	r1, r5
 8003ff4:	0020      	movs	r0, r4
 8003ff6:	f010 f9c3 	bl	8014380 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003ffa:	4a83      	ldr	r2, [pc, #524]	; (8004208 <DisplayModuleStatus+0x264>)
 8003ffc:	4983      	ldr	r1, [pc, #524]	; (800420c <DisplayModuleStatus+0x268>)
 8003ffe:	0028      	movs	r0, r5
 8004000:	f010 f99e 	bl	8014340 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004004:	0029      	movs	r1, r5
 8004006:	0020      	movs	r0, r4
 8004008:	f010 f9ba 	bl	8014380 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 800400c:	4a80      	ldr	r2, [pc, #512]	; (8004210 <DisplayModuleStatus+0x26c>)
 800400e:	4981      	ldr	r1, [pc, #516]	; (8004214 <DisplayModuleStatus+0x270>)
 8004010:	0028      	movs	r0, r5
 8004012:	f010 f995 	bl	8014340 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8004016:	0029      	movs	r1, r5
 8004018:	0020      	movs	r0, r4
 800401a:	f010 f9b1 	bl	8014380 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 800401e:	4b7e      	ldr	r3, [pc, #504]	; (8004218 <DisplayModuleStatus+0x274>)
 8004020:	002a      	movs	r2, r5
 8004022:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004024:	c243      	stmia	r2!, {r0, r1, r6}
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	6011      	str	r1, [r2, #0]
 800402a:	8899      	ldrh	r1, [r3, #4]
 800402c:	8091      	strh	r1, [r2, #4]
 800402e:	799b      	ldrb	r3, [r3, #6]
 8004030:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8004032:	0029      	movs	r1, r5
 8004034:	0020      	movs	r0, r4
 8004036:	f010 f9a3 	bl	8014380 <strcat>
 800403a:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 800403c:	4d6d      	ldr	r5, [pc, #436]	; (80041f4 <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 800403e:	4b77      	ldr	r3, [pc, #476]	; (800421c <DisplayModuleStatus+0x278>)
 8004040:	469a      	mov	sl, r3
 8004042:	e00e      	b.n	8004062 <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8004044:	4b6b      	ldr	r3, [pc, #428]	; (80041f4 <DisplayModuleStatus+0x250>)
 8004046:	4a76      	ldr	r2, [pc, #472]	; (8004220 <DisplayModuleStatus+0x27c>)
 8004048:	6811      	ldr	r1, [r2, #0]
 800404a:	6019      	str	r1, [r3, #0]
 800404c:	8891      	ldrh	r1, [r2, #4]
 800404e:	8099      	strh	r1, [r3, #4]
 8004050:	7992      	ldrb	r2, [r2, #6]
 8004052:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8004054:	4967      	ldr	r1, [pc, #412]	; (80041f4 <DisplayModuleStatus+0x250>)
 8004056:	0020      	movs	r0, r4
 8004058:	f010 f992 	bl	8014380 <strcat>
 800405c:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 800405e:	2f07      	cmp	r7, #7
 8004060:	d039      	beq.n	80040d6 <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8004062:	003a      	movs	r2, r7
 8004064:	496f      	ldr	r1, [pc, #444]	; (8004224 <DisplayModuleStatus+0x280>)
 8004066:	0028      	movs	r0, r5
 8004068:	f010 f96a 	bl	8014340 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 800406c:	0029      	movs	r1, r5
 800406e:	0020      	movs	r0, r4
 8004070:	f010 f986 	bl	8014380 <strcat>
		switch(portStatus[i]){
 8004074:	4653      	mov	r3, sl
 8004076:	5cfb      	ldrb	r3, [r7, r3]
 8004078:	2b04      	cmp	r3, #4
 800407a:	d8eb      	bhi.n	8004054 <DisplayModuleStatus+0xb0>
 800407c:	4653      	mov	r3, sl
 800407e:	5cfb      	ldrb	r3, [r7, r3]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4a69      	ldr	r2, [pc, #420]	; (8004228 <DisplayModuleStatus+0x284>)
 8004084:	58d3      	ldr	r3, [r2, r3]
 8004086:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004088:	495a      	ldr	r1, [pc, #360]	; (80041f4 <DisplayModuleStatus+0x250>)
 800408a:	4b68      	ldr	r3, [pc, #416]	; (800422c <DisplayModuleStatus+0x288>)
 800408c:	000a      	movs	r2, r1
 800408e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004090:	c243      	stmia	r2!, {r0, r1, r6}
 8004092:	cb03      	ldmia	r3!, {r0, r1}
 8004094:	c203      	stmia	r2!, {r0, r1}
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	7013      	strb	r3, [r2, #0]
				break;
 800409a:	e7db      	b.n	8004054 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 800409c:	4a55      	ldr	r2, [pc, #340]	; (80041f4 <DisplayModuleStatus+0x250>)
 800409e:	4b64      	ldr	r3, [pc, #400]	; (8004230 <DisplayModuleStatus+0x28c>)
 80040a0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040a2:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 80040a4:	e7d6      	b.n	8004054 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 80040a6:	4953      	ldr	r1, [pc, #332]	; (80041f4 <DisplayModuleStatus+0x250>)
 80040a8:	4b62      	ldr	r3, [pc, #392]	; (8004234 <DisplayModuleStatus+0x290>)
 80040aa:	000a      	movs	r2, r1
 80040ac:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040ae:	c243      	stmia	r2!, {r0, r1, r6}
 80040b0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040b2:	c243      	stmia	r2!, {r0, r1, r6}
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	8013      	strh	r3, [r2, #0]
				break;
 80040b8:	e7cc      	b.n	8004054 <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 80040ba:	494e      	ldr	r1, [pc, #312]	; (80041f4 <DisplayModuleStatus+0x250>)
 80040bc:	4b5e      	ldr	r3, [pc, #376]	; (8004238 <DisplayModuleStatus+0x294>)
 80040be:	000a      	movs	r2, r1
 80040c0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040c2:	c243      	stmia	r2!, {r0, r1, r6}
 80040c4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80040c6:	c243      	stmia	r2!, {r0, r1, r6}
 80040c8:	6819      	ldr	r1, [r3, #0]
 80040ca:	6011      	str	r1, [r2, #0]
 80040cc:	8899      	ldrh	r1, [r3, #4]
 80040ce:	8091      	strh	r1, [r2, #4]
 80040d0:	799b      	ldrb	r3, [r3, #6]
 80040d2:	7193      	strb	r3, [r2, #6]
				break;
 80040d4:	e7be      	b.n	8004054 <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 80040d6:	4947      	ldr	r1, [pc, #284]	; (80041f4 <DisplayModuleStatus+0x250>)
 80040d8:	4b58      	ldr	r3, [pc, #352]	; (800423c <DisplayModuleStatus+0x298>)
 80040da:	000a      	movs	r2, r1
 80040dc:	cb61      	ldmia	r3!, {r0, r5, r6}
 80040de:	c261      	stmia	r2!, {r0, r5, r6}
 80040e0:	cb61      	ldmia	r3!, {r0, r5, r6}
 80040e2:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 80040e4:	0020      	movs	r0, r4
 80040e6:	f010 f94b 	bl	8014380 <strcat>
 80040ea:	4f55      	ldr	r7, [pc, #340]	; (8004240 <DisplayModuleStatus+0x29c>)
 80040ec:	2601      	movs	r6, #1
 80040ee:	e00d      	b.n	800410c <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 80040f0:	4d40      	ldr	r5, [pc, #256]	; (80041f4 <DisplayModuleStatus+0x250>)
 80040f2:	0032      	movs	r2, r6
 80040f4:	4953      	ldr	r1, [pc, #332]	; (8004244 <DisplayModuleStatus+0x2a0>)
 80040f6:	0028      	movs	r0, r5
 80040f8:	f010 f922 	bl	8014340 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040fc:	0029      	movs	r1, r5
 80040fe:	0020      	movs	r0, r4
 8004100:	f010 f93e 	bl	8014380 <strcat>
 8004104:	3601      	adds	r6, #1
 8004106:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 8004108:	2e07      	cmp	r6, #7
 800410a:	d018      	beq.n	800413e <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0ee      	beq.n	80040f0 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 8004112:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004114:	f006 fe70 	bl	800adf8 <GetPort>
 8004118:	0005      	movs	r5, r0
 800411a:	00b3      	lsls	r3, r6, #2
 800411c:	3b04      	subs	r3, #4
 800411e:	4a4a      	ldr	r2, [pc, #296]	; (8004248 <DisplayModuleStatus+0x2a4>)
 8004120:	58d0      	ldr	r0, [r2, r3]
 8004122:	f006 fe69 	bl	800adf8 <GetPort>
 8004126:	9000      	str	r0, [sp, #0]
 8004128:	002b      	movs	r3, r5
 800412a:	0032      	movs	r2, r6
 800412c:	4947      	ldr	r1, [pc, #284]	; (800424c <DisplayModuleStatus+0x2a8>)
 800412e:	4831      	ldr	r0, [pc, #196]	; (80041f4 <DisplayModuleStatus+0x250>)
 8004130:	f010 f906 	bl	8014340 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004134:	492f      	ldr	r1, [pc, #188]	; (80041f4 <DisplayModuleStatus+0x250>)
 8004136:	0020      	movs	r0, r4
 8004138:	f010 f922 	bl	8014380 <strcat>
 800413c:	e7e2      	b.n	8004104 <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 800413e:	0020      	movs	r0, r4
 8004140:	f7fb ffea 	bl	8000118 <strlen>
 8004144:	1820      	adds	r0, r4, r0
 8004146:	2203      	movs	r2, #3
 8004148:	4941      	ldr	r1, [pc, #260]	; (8004250 <DisplayModuleStatus+0x2ac>)
 800414a:	f00f fec4 	bl	8013ed6 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 800414e:	0020      	movs	r0, r4
 8004150:	f7fb ffe2 	bl	8000118 <strlen>
 8004154:	1820      	adds	r0, r4, r0
 8004156:	221d      	movs	r2, #29
 8004158:	493e      	ldr	r1, [pc, #248]	; (8004254 <DisplayModuleStatus+0x2b0>)
 800415a:	f00f febc 	bl	8013ed6 <memcpy>
	temp =strlen((char* )pcOutputString);
 800415e:	0020      	movs	r0, r4
 8004160:	f7fb ffda 	bl	8000118 <strlen>
 8004164:	4682      	mov	sl, r0
 8004166:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004168:	4f3b      	ldr	r7, [pc, #236]	; (8004258 <DisplayModuleStatus+0x2b4>)
 800416a:	4e21      	ldr	r6, [pc, #132]	; (80041f0 <DisplayModuleStatus+0x24c>)
 800416c:	e002      	b.n	8004174 <DisplayModuleStatus+0x1d0>
 800416e:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004170:	2d06      	cmp	r5, #6
 8004172:	d013      	beq.n	800419c <DisplayModuleStatus+0x1f8>
 8004174:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004176:	7833      	ldrb	r3, [r6, #0]
 8004178:	3b01      	subs	r3, #1
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	5bd9      	ldrh	r1, [r3, r7]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	4113      	asrs	r3, r2
 8004184:	420b      	tst	r3, r1
 8004186:	d0f2      	beq.n	800416e <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004188:	002a      	movs	r2, r5
 800418a:	4934      	ldr	r1, [pc, #208]	; (800425c <DisplayModuleStatus+0x2b8>)
 800418c:	4819      	ldr	r0, [pc, #100]	; (80041f4 <DisplayModuleStatus+0x250>)
 800418e:	f010 f8d7 	bl	8014340 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004192:	4918      	ldr	r1, [pc, #96]	; (80041f4 <DisplayModuleStatus+0x250>)
 8004194:	0020      	movs	r0, r4
 8004196:	f010 f8f3 	bl	8014380 <strcat>
 800419a:	e7e8      	b.n	800416e <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 800419c:	0020      	movs	r0, r4
 800419e:	f7fb ffbb 	bl	8000118 <strlen>
 80041a2:	4653      	mov	r3, sl
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	0c1b      	lsrs	r3, r3, #16
 80041a8:	4298      	cmp	r0, r3
 80041aa:	d00e      	beq.n	80041ca <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 80041ac:	0020      	movs	r0, r4
 80041ae:	f7fb ffb3 	bl	8000118 <strlen>
 80041b2:	1820      	adds	r0, r4, r0
 80041b4:	2203      	movs	r2, #3
 80041b6:	4926      	ldr	r1, [pc, #152]	; (8004250 <DisplayModuleStatus+0x2ac>)
 80041b8:	f00f fe8d 	bl	8013ed6 <memcpy>
	
	/* Display output */
	if(port)
 80041bc:	9b03      	ldr	r3, [sp, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d109      	bne.n	80041d6 <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 80041c2:	b004      	add	sp, #16
 80041c4:	bc04      	pop	{r2}
 80041c6:	4692      	mov	sl, r2
 80041c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 80041ca:	1820      	adds	r0, r4, r0
 80041cc:	2205      	movs	r2, #5
 80041ce:	4924      	ldr	r1, [pc, #144]	; (8004260 <DisplayModuleStatus+0x2bc>)
 80041d0:	f00f fe81 	bl	8013ed6 <memcpy>
 80041d4:	e7ea      	b.n	80041ac <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 80041d6:	0020      	movs	r0, r4
 80041d8:	f7fb ff9e 	bl	8000118 <strlen>
 80041dc:	b282      	uxth	r2, r0
 80041de:	2301      	movs	r3, #1
 80041e0:	425b      	negs	r3, r3
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	3333      	adds	r3, #51	; 0x33
 80041e6:	0021      	movs	r1, r4
 80041e8:	9803      	ldr	r0, [sp, #12]
 80041ea:	f009 ff33 	bl	800e054 <writePxMutex>
}
 80041ee:	e7e8      	b.n	80041c2 <DisplayModuleStatus+0x21e>
 80041f0:	20001792 	.word	0x20001792
 80041f4:	200017c4 	.word	0x200017c4
 80041f8:	08018858 	.word	0x08018858
 80041fc:	2000118a 	.word	0x2000118a
 8004200:	08018874 	.word	0x08018874
 8004204:	08018890 	.word	0x08018890
 8004208:	080188b0 	.word	0x080188b0
 800420c:	080188bc 	.word	0x080188bc
 8004210:	080188d4 	.word	0x080188d4
 8004214:	080188e0 	.word	0x080188e0
 8004218:	080188fc 	.word	0x080188fc
 800421c:	20001814 	.word	0x20001814
 8004220:	08018918 	.word	0x08018918
 8004224:	08018910 	.word	0x08018910
 8004228:	08018834 	.word	0x08018834
 800422c:	08018920 	.word	0x08018920
 8004230:	08018938 	.word	0x08018938
 8004234:	08018944 	.word	0x08018944
 8004238:	08018960 	.word	0x08018960
 800423c:	08018980 	.word	0x08018980
 8004240:	2000240c 	.word	0x2000240c
 8004244:	08018998 	.word	0x08018998
 8004248:	20001ed0 	.word	0x20001ed0
 800424c:	080189b4 	.word	0x080189b4
 8004250:	0801890c 	.word	0x0801890c
 8004254:	080189e4 	.word	0x080189e4
 8004258:	20006f50 	.word	0x20006f50
 800425c:	08018a04 	.word	0x08018a04
 8004260:	08018a0c 	.word	0x08018a0c

08004264 <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 8004264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004266:	46c6      	mov	lr, r8
 8004268:	b500      	push	{lr}
 800426a:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 800426c:	4929      	ldr	r1, [pc, #164]	; (8004314 <GetID+0xb0>)
 800426e:	f7fb ff49 	bl	8000104 <strcmp>
 8004272:	2800      	cmp	r0, #0
 8004274:	d010      	beq.n	8004298 <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 8004276:	4928      	ldr	r1, [pc, #160]	; (8004318 <GetID+0xb4>)
 8004278:	0028      	movs	r0, r5
 800427a:	f7fb ff43 	bl	8000104 <strcmp>
 800427e:	2800      	cmp	r0, #0
 8004280:	d045      	beq.n	800430e <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 8004282:	782b      	ldrb	r3, [r5, #0]
 8004284:	4698      	mov	r8, r3
 8004286:	2b23      	cmp	r3, #35	; 0x23
 8004288:	d00b      	beq.n	80042a2 <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 800428a:	4b24      	ldr	r3, [pc, #144]	; (800431c <GetID+0xb8>)
 800428c:	781f      	ldrb	r7, [r3, #0]
 800428e:	2f00      	cmp	r7, #0
 8004290:	d02a      	beq.n	80042e8 <GetID+0x84>
 8004292:	4e23      	ldr	r6, [pc, #140]	; (8004320 <GetID+0xbc>)
 8004294:	2400      	movs	r4, #0
 8004296:	e01c      	b.n	80042d2 <GetID+0x6e>
		return myID;
 8004298:	4b22      	ldr	r3, [pc, #136]	; (8004324 <GetID+0xc0>)
 800429a:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 800429c:	bc04      	pop	{r2}
 800429e:	4690      	mov	r8, r2
 80042a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 80042a2:	1c68      	adds	r0, r5, #1
 80042a4:	f00f fb8d 	bl	80139c2 <atol>
 80042a8:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <GetID+0x52>
 80042ae:	4a1b      	ldr	r2, [pc, #108]	; (800431c <GetID+0xb8>)
 80042b0:	7812      	ldrb	r2, [r2, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d206      	bcs.n	80042c4 <GetID+0x60>
		else if(id == myID)
 80042b6:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <GetID+0xc0>)
 80042b8:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 80042ba:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 80042bc:	429a      	cmp	r2, r3
 80042be:	d1ed      	bne.n	800429c <GetID+0x38>
			return myID;
 80042c0:	b210      	sxth	r0, r2
 80042c2:	e7eb      	b.n	800429c <GetID+0x38>
			return id;
 80042c4:	b218      	sxth	r0, r3
 80042c6:	e7e9      	b.n	800429c <GetID+0x38>
		for(i =0; i < N; i++){
 80042c8:	3401      	adds	r4, #1
 80042ca:	b2e4      	uxtb	r4, r4
 80042cc:	360a      	adds	r6, #10
 80042ce:	42bc      	cmp	r4, r7
 80042d0:	d00a      	beq.n	80042e8 <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 80042d2:	0031      	movs	r1, r6
 80042d4:	0028      	movs	r0, r5
 80042d6:	f7fb ff15 	bl	8000104 <strcmp>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d1f4      	bne.n	80042c8 <GetID+0x64>
 80042de:	4643      	mov	r3, r8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d0f1      	beq.n	80042c8 <GetID+0x64>
				return (i);
 80042e4:	b220      	sxth	r0, r4
 80042e6:	e7d9      	b.n	800429c <GetID+0x38>
 80042e8:	4f0f      	ldr	r7, [pc, #60]	; (8004328 <GetID+0xc4>)
		for(i =0; i < N; i++){
 80042ea:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 80042ec:	0039      	movs	r1, r7
 80042ee:	0028      	movs	r0, r5
 80042f0:	f7fb ff08 	bl	8000104 <strcmp>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d005      	beq.n	8004304 <GetID+0xa0>
 80042f8:	3601      	adds	r6, #1
 80042fa:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 80042fc:	2e0a      	cmp	r6, #10
 80042fe:	d1f5      	bne.n	80042ec <GetID+0x88>
		return BOS_ERR_WrongName;
 8004300:	2064      	movs	r0, #100	; 0x64
 8004302:	e7cb      	b.n	800429c <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 8004304:	0234      	lsls	r4, r6, #8
 8004306:	20fe      	movs	r0, #254	; 0xfe
 8004308:	4320      	orrs	r0, r4
 800430a:	b200      	sxth	r0, r0
 800430c:	e7c6      	b.n	800429c <GetID+0x38>
		return BOS_BROADCAST;
 800430e:	20ff      	movs	r0, #255	; 0xff
 8004310:	e7c4      	b.n	800429c <GetID+0x38>
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	08018a98 	.word	0x08018a98
 8004318:	08018a9c 	.word	0x08018a9c
 800431c:	20000044 	.word	0x20000044
 8004320:	20001684 	.word	0x20001684
 8004324:	20001792 	.word	0x20001792
 8004328:	20001578 	.word	0x20001578

0800432c <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 800432c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800432e:	b083      	sub	sp, #12
 8004330:	9001      	str	r0, [sp, #4]
 8004332:	000d      	movs	r5, r1
 8004334:	4c2a      	ldr	r4, [pc, #168]	; (80043e0 <NameModule+0xb4>)
 8004336:	0027      	movs	r7, r4
 8004338:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 800433a:	0021      	movs	r1, r4
 800433c:	0028      	movs	r0, r5
 800433e:	f7fb fee1 	bl	8000104 <strcmp>
 8004342:	2800      	cmp	r0, #0
 8004344:	d043      	beq.n	80043ce <NameModule+0xa2>
 8004346:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 8004348:	42bc      	cmp	r4, r7
 800434a:	d1f6      	bne.n	800433a <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 800434c:	4b25      	ldr	r3, [pc, #148]	; (80043e4 <NameModule+0xb8>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d90f      	bls.n	8004374 <NameModule+0x48>
 8004354:	4c24      	ldr	r4, [pc, #144]	; (80043e8 <NameModule+0xbc>)
 8004356:	009f      	lsls	r7, r3, #2
 8004358:	18ff      	adds	r7, r7, r3
 800435a:	007f      	lsls	r7, r7, #1
 800435c:	0023      	movs	r3, r4
 800435e:	3b0a      	subs	r3, #10
 8004360:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 8004362:	0021      	movs	r1, r4
 8004364:	0028      	movs	r0, r5
 8004366:	f7fb fecd 	bl	8000104 <strcmp>
 800436a:	2800      	cmp	r0, #0
 800436c:	d031      	beq.n	80043d2 <NameModule+0xa6>
 800436e:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 8004370:	42bc      	cmp	r4, r7
 8004372:	d1f6      	bne.n	8004362 <NameModule+0x36>
 8004374:	4c1d      	ldr	r4, [pc, #116]	; (80043ec <NameModule+0xc0>)
 8004376:	0027      	movs	r7, r4
 8004378:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 800437a:	0021      	movs	r1, r4
 800437c:	0028      	movs	r0, r5
 800437e:	f7fb fec1 	bl	8000104 <strcmp>
 8004382:	2800      	cmp	r0, #0
 8004384:	d028      	beq.n	80043d8 <NameModule+0xac>
 8004386:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004388:	42bc      	cmp	r4, r7
 800438a:	d1f6      	bne.n	800437a <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800438c:	4c18      	ldr	r4, [pc, #96]	; (80043f0 <NameModule+0xc4>)
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <NameModule+0xc8>)
 8004390:	601c      	str	r4, [r3, #0]
 8004392:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004398:	0038      	movs	r0, r7
 800439a:	f7fb febd 	bl	8000118 <strlen>
 800439e:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 80043a0:	0039      	movs	r1, r7
 80043a2:	0028      	movs	r0, r5
 80043a4:	f010 f810 	bl	80143c8 <strncmp>
 80043a8:	2800      	cmp	r0, #0
 80043aa:	d017      	beq.n	80043dc <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043ac:	6864      	ldr	r4, [r4, #4]
 80043ae:	6034      	str	r4, [r6, #0]
 80043b0:	2c00      	cmp	r4, #0
 80043b2:	d1ef      	bne.n	8004394 <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 80043b4:	9b01      	ldr	r3, [sp, #4]
 80043b6:	0098      	lsls	r0, r3, #2
 80043b8:	469c      	mov	ip, r3
 80043ba:	4460      	add	r0, ip
 80043bc:	0040      	lsls	r0, r0, #1
 80043be:	4e0e      	ldr	r6, [pc, #56]	; (80043f8 <NameModule+0xcc>)
 80043c0:	1980      	adds	r0, r0, r6
 80043c2:	0029      	movs	r1, r5
 80043c4:	f00f fff8 	bl	80143b8 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 80043c8:	f7ff f88e 	bl	80034e8 <SaveEEalias>
	
	return result;
 80043cc:	e002      	b.n	80043d4 <NameModule+0xa8>
			return BOS_ERR_Keyword;
 80043ce:	2006      	movs	r0, #6
 80043d0:	e000      	b.n	80043d4 <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 80043d2:	2007      	movs	r0, #7
}
 80043d4:	b003      	add	sp, #12
 80043d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80043d8:	2007      	movs	r0, #7
 80043da:	e7fb      	b.n	80043d4 <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 80043dc:	2008      	movs	r0, #8
 80043de:	e7f9      	b.n	80043d4 <NameModule+0xa8>
 80043e0:	08018848 	.word	0x08018848
 80043e4:	20000044 	.word	0x20000044
 80043e8:	2000168e 	.word	0x2000168e
 80043ec:	20001578 	.word	0x20001578
 80043f0:	2000010c 	.word	0x2000010c
 80043f4:	2000181c 	.word	0x2000181c
 80043f8:	20001684 	.word	0x20001684

080043fc <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 80043fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fe:	46c6      	mov	lr, r8
 8004400:	b500      	push	{lr}
 8004402:	0007      	movs	r7, r0
 8004404:	000e      	movs	r6, r1
 8004406:	4d3a      	ldr	r5, [pc, #232]	; (80044f0 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 8004408:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 800440a:	0029      	movs	r1, r5
 800440c:	0030      	movs	r0, r6
 800440e:	f7fb fe79 	bl	8000104 <strcmp>
 8004412:	2800      	cmp	r0, #0
 8004414:	d050      	beq.n	80044b8 <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 8004416:	3401      	adds	r4, #1
 8004418:	350a      	adds	r5, #10
 800441a:	2c0a      	cmp	r4, #10
 800441c:	d1f5      	bne.n	800440a <AddModuleToGroup+0xe>
 800441e:	4c35      	ldr	r4, [pc, #212]	; (80044f4 <AddModuleToGroup+0xf8>)
 8004420:	0025      	movs	r5, r4
 8004422:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 8004424:	0021      	movs	r1, r4
 8004426:	0030      	movs	r0, r6
 8004428:	f7fb fe6c 	bl	8000104 <strcmp>
 800442c:	2800      	cmp	r0, #0
 800442e:	d058      	beq.n	80044e2 <AddModuleToGroup+0xe6>
 8004430:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 8004432:	42ac      	cmp	r4, r5
 8004434:	d1f6      	bne.n	8004424 <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 8004436:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <AddModuleToGroup+0xfc>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d90f      	bls.n	800445e <AddModuleToGroup+0x62>
 800443e:	4c2f      	ldr	r4, [pc, #188]	; (80044fc <AddModuleToGroup+0x100>)
 8004440:	009d      	lsls	r5, r3, #2
 8004442:	18ed      	adds	r5, r5, r3
 8004444:	006d      	lsls	r5, r5, #1
 8004446:	0023      	movs	r3, r4
 8004448:	3b0a      	subs	r3, #10
 800444a:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 800444c:	0021      	movs	r1, r4
 800444e:	0030      	movs	r0, r6
 8004450:	f7fb fe58 	bl	8000104 <strcmp>
 8004454:	2800      	cmp	r0, #0
 8004456:	d046      	beq.n	80044e6 <AddModuleToGroup+0xea>
 8004458:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 800445a:	42ac      	cmp	r4, r5
 800445c:	d1f6      	bne.n	800444c <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800445e:	4c28      	ldr	r4, [pc, #160]	; (8004500 <AddModuleToGroup+0x104>)
 8004460:	4b28      	ldr	r3, [pc, #160]	; (8004504 <AddModuleToGroup+0x108>)
 8004462:	601c      	str	r4, [r3, #0]
 8004464:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 8004466:	6823      	ldr	r3, [r4, #0]
 8004468:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 800446a:	0028      	movs	r0, r5
 800446c:	f7fb fe54 	bl	8000118 <strlen>
 8004470:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004472:	0029      	movs	r1, r5
 8004474:	0030      	movs	r0, r6
 8004476:	f00f ffa7 	bl	80143c8 <strncmp>
 800447a:	2800      	cmp	r0, #0
 800447c:	d035      	beq.n	80044ea <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 800447e:	6864      	ldr	r4, [r4, #4]
 8004480:	4643      	mov	r3, r8
 8004482:	601c      	str	r4, [r3, #0]
 8004484:	2c00      	cmp	r4, #0
 8004486:	d1ee      	bne.n	8004466 <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 8004488:	4b19      	ldr	r3, [pc, #100]	; (80044f0 <AddModuleToGroup+0xf4>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01e      	beq.n	80044ce <AddModuleToGroup+0xd2>
 8004490:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <AddModuleToGroup+0xf4>)
 8004492:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004494:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	2a00      	cmp	r2, #0
 800449a:	d019      	beq.n	80044d0 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 800449c:	3401      	adds	r4, #1
 800449e:	330a      	adds	r3, #10
 80044a0:	2c0a      	cmp	r4, #10
 80044a2:	d1f8      	bne.n	8004496 <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 80044a4:	3f01      	subs	r7, #1
 80044a6:	4918      	ldr	r1, [pc, #96]	; (8004508 <AddModuleToGroup+0x10c>)
 80044a8:	007f      	lsls	r7, r7, #1
 80044aa:	2201      	movs	r2, #1
 80044ac:	40a2      	lsls	r2, r4
 80044ae:	5a7b      	ldrh	r3, [r7, r1]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 80044b4:	2000      	movs	r0, #0
 80044b6:	e007      	b.n	80044c8 <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 80044b8:	3f01      	subs	r7, #1
 80044ba:	4913      	ldr	r1, [pc, #76]	; (8004508 <AddModuleToGroup+0x10c>)
 80044bc:	007f      	lsls	r7, r7, #1
 80044be:	2201      	movs	r2, #1
 80044c0:	40a2      	lsls	r2, r4
 80044c2:	5a7b      	ldrh	r3, [r7, r1]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	527b      	strh	r3, [r7, r1]
}
 80044c8:	bc04      	pop	{r2}
 80044ca:	4690      	mov	r8, r2
 80044cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 80044ce:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 80044d0:	00a0      	lsls	r0, r4, #2
 80044d2:	1900      	adds	r0, r0, r4
 80044d4:	0040      	lsls	r0, r0, #1
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <AddModuleToGroup+0xf4>)
 80044d8:	1818      	adds	r0, r3, r0
 80044da:	0031      	movs	r1, r6
 80044dc:	f00f ff6c 	bl	80143b8 <strcpy>
			break;
 80044e0:	e7e0      	b.n	80044a4 <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 80044e2:	2006      	movs	r0, #6
 80044e4:	e7f0      	b.n	80044c8 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 80044e6:	2007      	movs	r0, #7
 80044e8:	e7ee      	b.n	80044c8 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 80044ea:	2008      	movs	r0, #8
 80044ec:	e7ec      	b.n	80044c8 <AddModuleToGroup+0xcc>
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	20001578 	.word	0x20001578
 80044f4:	08018848 	.word	0x08018848
 80044f8:	20000044 	.word	0x20000044
 80044fc:	2000168e 	.word	0x2000168e
 8004500:	2000010c 	.word	0x2000010c
 8004504:	20001820 	.word	0x20001820
 8004508:	200015dc 	.word	0x200015dc

0800450c <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 800450c:	b510      	push	{r4, lr}
 800450e:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 8004510:	201e      	movs	r0, #30
 8004512:	f00f fa93 	bl	8013a3c <malloc>
 8004516:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 8004518:	221e      	movs	r2, #30
 800451a:	2100      	movs	r1, #0
 800451c:	f00f fce4 	bl	8013ee8 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 8004520:	4908      	ldr	r1, [pc, #32]	; (8004544 <GetDateString+0x38>)
 8004522:	7d8b      	ldrb	r3, [r1, #22]
 8004524:	7d0a      	ldrb	r2, [r1, #20]
 8004526:	3a01      	subs	r2, #1
 8004528:	0092      	lsls	r2, r2, #2
 800452a:	4807      	ldr	r0, [pc, #28]	; (8004548 <GetDateString+0x3c>)
 800452c:	5812      	ldr	r2, [r2, r0]
 800452e:	8b08      	ldrh	r0, [r1, #24]
 8004530:	9001      	str	r0, [sp, #4]
 8004532:	7d49      	ldrb	r1, [r1, #21]
 8004534:	9100      	str	r1, [sp, #0]
 8004536:	4905      	ldr	r1, [pc, #20]	; (800454c <GetDateString+0x40>)
 8004538:	0020      	movs	r0, r4
 800453a:	f00f ff01 	bl	8014340 <sprintf>
	return buffer;
}
 800453e:	0020      	movs	r0, r4
 8004540:	b002      	add	sp, #8
 8004542:	bd10      	pop	{r4, pc}
 8004544:	20006a0c 	.word	0x20006a0c
 8004548:	08019040 	.word	0x08019040
 800454c:	08018ab8 	.word	0x08018ab8

08004550 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004550:	b500      	push	{lr}
 8004552:	b085      	sub	sp, #20
 8004554:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 8004556:	4b07      	ldr	r3, [pc, #28]	; (8004574 <Bridge+0x24>)
 8004558:	7819      	ldrb	r1, [r3, #0]
 800455a:	2301      	movs	r3, #1
 800455c:	9303      	str	r3, [sp, #12]
 800455e:	3b02      	subs	r3, #2
 8004560:	9302      	str	r3, [sp, #8]
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	3303      	adds	r3, #3
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	000b      	movs	r3, r1
 800456a:	f003 fe2f 	bl	80081cc <StartScastDMAStream>
}
 800456e:	b005      	add	sp, #20
 8004570:	bd00      	pop	{pc}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	20001792 	.word	0x20001792

08004578 <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 8004578:	b530      	push	{r4, r5, lr}
 800457a:	b087      	sub	sp, #28
 800457c:	0004      	movs	r4, r0
 800457e:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004580:	2300      	movs	r3, #0
 8004582:	9304      	str	r3, [sp, #16]
 8004584:	9303      	str	r3, [sp, #12]
 8004586:	9302      	str	r3, [sp, #8]
 8004588:	9301      	str	r3, [sp, #4]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	2200      	movs	r2, #0
 800458e:	2100      	movs	r1, #0
 8004590:	2000      	movs	r0, #0
 8004592:	f7fe ffeb 	bl	800356c <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 8004596:	1e62      	subs	r2, r4, #1
 8004598:	00d3      	lsls	r3, r2, #3
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4a14      	ldr	r2, [pc, #80]	; (80045f0 <Unbridge+0x78>)
 80045a0:	589b      	ldr	r3, [r3, r2]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d015      	beq.n	80045d2 <Unbridge+0x5a>
 80045a6:	1e6a      	subs	r2, r5, #1
 80045a8:	00d3      	lsls	r3, r2, #3
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	4a10      	ldr	r2, [pc, #64]	; (80045f0 <Unbridge+0x78>)
 80045b0:	589b      	ldr	r3, [r3, r2]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d104      	bne.n	80045c0 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 80045b6:	0020      	movs	r0, r4
 80045b8:	f007 f968 	bl	800b88c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80045bc:	2000      	movs	r0, #0
 80045be:	e006      	b.n	80045ce <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 80045c0:	0020      	movs	r0, r4
 80045c2:	f007 f963 	bl	800b88c <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 80045c6:	0028      	movs	r0, r5
 80045c8:	f007 f960 	bl	800b88c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80045cc:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80045ce:	b007      	add	sp, #28
 80045d0:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 80045d2:	1e6a      	subs	r2, r5, #1
 80045d4:	00d3      	lsls	r3, r2, #3
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4a05      	ldr	r2, [pc, #20]	; (80045f0 <Unbridge+0x78>)
 80045dc:	589b      	ldr	r3, [r3, r2]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d004      	beq.n	80045ec <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 80045e2:	0028      	movs	r0, r5
 80045e4:	f007 f952 	bl	800b88c <SwitchStreamDMAToMsg>
		return BOS_OK;
 80045e8:	2000      	movs	r0, #0
 80045ea:	e7f0      	b.n	80045ce <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 80045ec:	2068      	movs	r0, #104	; 0x68
 80045ee:	e7ee      	b.n	80045ce <Unbridge+0x56>
 80045f0:	2000240c 	.word	0x2000240c

080045f4 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80045f8:	7804      	ldrb	r4, [r0, #0]
 80045fa:	2c00      	cmp	r4, #0
 80045fc:	d010      	beq.n	8004620 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80045fe:	2603      	movs	r6, #3
 8004600:	e004      	b.n	800460c <StringToLowerCase+0x18>
 8004602:	702a      	strb	r2, [r5, #0]
 8004604:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 8004606:	782c      	ldrb	r4, [r5, #0]
 8004608:	2c00      	cmp	r4, #0
 800460a:	d009      	beq.n	8004620 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 800460c:	f00f fa08 	bl	8013a20 <__locale_ctype_ptr>
 8004610:	1900      	adds	r0, r0, r4
 8004612:	7843      	ldrb	r3, [r0, #1]
 8004614:	4033      	ands	r3, r6
 8004616:	0022      	movs	r2, r4
 8004618:	2b01      	cmp	r3, #1
 800461a:	d1f2      	bne.n	8004602 <StringToLowerCase+0xe>
 800461c:	3220      	adds	r2, #32
 800461e:	e7f0      	b.n	8004602 <StringToLowerCase+0xe>
	}
}
 8004620:	bd70      	pop	{r4, r5, r6, pc}
	...

08004624 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 8004624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004626:	46c6      	mov	lr, r8
 8004628:	b500      	push	{lr}
 800462a:	b088      	sub	sp, #32
 800462c:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 800462e:	4bdc      	ldr	r3, [pc, #880]	; (80049a0 <ParseSnippetCondition+0x37c>)
 8004630:	781c      	ldrb	r4, [r3, #0]
 8004632:	2c05      	cmp	r4, #5
 8004634:	d100      	bne.n	8004638 <ParseSnippetCondition+0x14>
 8004636:	e210      	b.n	8004a5a <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 8004638:	49da      	ldr	r1, [pc, #872]	; (80049a4 <ParseSnippetCondition+0x380>)
 800463a:	00a3      	lsls	r3, r4, #2
 800463c:	191a      	adds	r2, r3, r4
 800463e:	0092      	lsls	r2, r2, #2
 8004640:	2000      	movs	r0, #0
 8004642:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004644:	191a      	adds	r2, r3, r4
 8004646:	0092      	lsls	r2, r2, #2
 8004648:	188a      	adds	r2, r1, r2
 800464a:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 800464c:	1918      	adds	r0, r3, r4
 800464e:	0080      	lsls	r0, r0, #2
 8004650:	3002      	adds	r0, #2
 8004652:	1840      	adds	r0, r0, r1
 8004654:	2204      	movs	r2, #4
 8004656:	2100      	movs	r1, #0
 8004658:	f00f fc46 	bl	8013ee8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 800465c:	782b      	ldrb	r3, [r5, #0]
 800465e:	2b62      	cmp	r3, #98	; 0x62
 8004660:	d102      	bne.n	8004668 <ParseSnippetCondition+0x44>
 8004662:	78ab      	ldrb	r3, [r5, #2]
 8004664:	2b2e      	cmp	r3, #46	; 0x2e
 8004666:	d032      	beq.n	80046ce <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 8004668:	4ecf      	ldr	r6, [pc, #828]	; (80049a8 <ParseSnippetCondition+0x384>)
 800466a:	0029      	movs	r1, r5
 800466c:	0030      	movs	r0, r6
 800466e:	f00f fea3 	bl	80143b8 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004672:	4cce      	ldr	r4, [pc, #824]	; (80049ac <ParseSnippetCondition+0x388>)
 8004674:	0021      	movs	r1, r4
 8004676:	0030      	movs	r0, r6
 8004678:	f010 fd1e 	bl	80150b8 <strtok>
 800467c:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 800467e:	0021      	movs	r1, r4
 8004680:	2000      	movs	r0, #0
 8004682:	f010 fd19 	bl	80150b8 <strtok>
 8004686:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 8004688:	0021      	movs	r1, r4
 800468a:	2000      	movs	r0, #0
 800468c:	f010 fd14 	bl	80150b8 <strtok>
 8004690:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004692:	2d00      	cmp	r5, #0
 8004694:	d100      	bne.n	8004698 <ParseSnippetCondition+0x74>
 8004696:	e1e5      	b.n	8004a64 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 8004698:	0028      	movs	r0, r5
 800469a:	f7ff f881 	bl	80037a0 <IsModuleParameter>
 800469e:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80046a0:	d100      	bne.n	80046a4 <ParseSnippetCondition+0x80>
 80046a2:	e18f      	b.n	80049c4 <ParseSnippetCondition+0x3a0>
 80046a4:	2e00      	cmp	r6, #0
 80046a6:	d000      	beq.n	80046aa <ParseSnippetCondition+0x86>
 80046a8:	e18e      	b.n	80049c8 <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 80046aa:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 80046ac:	2c00      	cmp	r4, #0
 80046ae:	d000      	beq.n	80046b2 <ParseSnippetCondition+0x8e>
 80046b0:	e1d4      	b.n	8004a5c <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 80046b2:	4cbb      	ldr	r4, [pc, #748]	; (80049a0 <ParseSnippetCondition+0x37c>)
 80046b4:	7823      	ldrb	r3, [r4, #0]
 80046b6:	49bb      	ldr	r1, [pc, #748]	; (80049a4 <ParseSnippetCondition+0x380>)
 80046b8:	009a      	lsls	r2, r3, #2
 80046ba:	18d0      	adds	r0, r2, r3
 80046bc:	0080      	lsls	r0, r0, #2
 80046be:	3602      	adds	r6, #2
 80046c0:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80046c2:	180a      	adds	r2, r1, r0
 80046c4:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 80046c6:	3301      	adds	r3, #1
 80046c8:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 80046ca:	2000      	movs	r0, #0
 80046cc:	e1c6      	b.n	8004a5c <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80046ce:	786e      	ldrb	r6, [r5, #1]
 80046d0:	3e30      	subs	r6, #48	; 0x30
 80046d2:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 80046d4:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80046d6:	2e06      	cmp	r6, #6
 80046d8:	d900      	bls.n	80046dc <ParseSnippetCondition+0xb8>
 80046da:	e1bf      	b.n	8004a5c <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80046dc:	4ab1      	ldr	r2, [pc, #708]	; (80049a4 <ParseSnippetCondition+0x380>)
 80046de:	00a3      	lsls	r3, r4, #2
 80046e0:	1919      	adds	r1, r3, r4
 80046e2:	0089      	lsls	r1, r1, #2
 80046e4:	3001      	adds	r0, #1
 80046e6:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80046e8:	1853      	adds	r3, r2, r1
 80046ea:	2200      	movs	r2, #0
 80046ec:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80046ee:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80046f0:	1cef      	adds	r7, r5, #3
 80046f2:	3207      	adds	r2, #7
 80046f4:	49ae      	ldr	r1, [pc, #696]	; (80049b0 <ParseSnippetCondition+0x38c>)
 80046f6:	0038      	movs	r0, r7
 80046f8:	f00f fe66 	bl	80143c8 <strncmp>
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d121      	bne.n	8004744 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 8004700:	00a3      	lsls	r3, r4, #2
 8004702:	191c      	adds	r4, r3, r4
 8004704:	00a4      	lsls	r4, r4, #2
 8004706:	4ba7      	ldr	r3, [pc, #668]	; (80049a4 <ParseSnippetCondition+0x380>)
 8004708:	191c      	adds	r4, r3, r4
 800470a:	2305      	movs	r3, #5
 800470c:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 800470e:	00f2      	lsls	r2, r6, #3
 8004710:	1992      	adds	r2, r2, r6
 8004712:	4ba8      	ldr	r3, [pc, #672]	; (80049b4 <ParseSnippetCondition+0x390>)
 8004714:	189b      	adds	r3, r3, r2
 8004716:	7a1b      	ldrb	r3, [r3, #8]
 8004718:	07db      	lsls	r3, r3, #31
 800471a:	d504      	bpl.n	8004726 <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 800471c:	4aa0      	ldr	r2, [pc, #640]	; (80049a0 <ParseSnippetCondition+0x37c>)
 800471e:	7813      	ldrb	r3, [r2, #0]
 8004720:	3301      	adds	r3, #1
 8004722:	7013      	strb	r3, [r2, #0]
 8004724:	e19a      	b.n	8004a5c <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004726:	2301      	movs	r3, #1
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	2300      	movs	r3, #0
 800472c:	9304      	str	r3, [sp, #16]
 800472e:	9303      	str	r3, [sp, #12]
 8004730:	9302      	str	r3, [sp, #8]
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	9300      	str	r3, [sp, #0]
 8004736:	2200      	movs	r2, #0
 8004738:	2101      	movs	r1, #1
 800473a:	0030      	movs	r0, r6
 800473c:	f008 f87a 	bl	800c834 <SetButtonEvents>
				status =BOS_OK;
 8004740:	2000      	movs	r0, #0
 8004742:	e7eb      	b.n	800471c <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004744:	220e      	movs	r2, #14
 8004746:	499c      	ldr	r1, [pc, #624]	; (80049b8 <ParseSnippetCondition+0x394>)
 8004748:	0038      	movs	r0, r7
 800474a:	f00f fe3d 	bl	80143c8 <strncmp>
 800474e:	2800      	cmp	r0, #0
 8004750:	d11c      	bne.n	800478c <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004752:	00a3      	lsls	r3, r4, #2
 8004754:	191c      	adds	r4, r3, r4
 8004756:	00a4      	lsls	r4, r4, #2
 8004758:	4b92      	ldr	r3, [pc, #584]	; (80049a4 <ParseSnippetCondition+0x380>)
 800475a:	191c      	adds	r4, r3, r4
 800475c:	2306      	movs	r3, #6
 800475e:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004760:	00f2      	lsls	r2, r6, #3
 8004762:	1992      	adds	r2, r2, r6
 8004764:	4b93      	ldr	r3, [pc, #588]	; (80049b4 <ParseSnippetCondition+0x390>)
 8004766:	189b      	adds	r3, r3, r2
 8004768:	7a1b      	ldrb	r3, [r3, #8]
 800476a:	079b      	lsls	r3, r3, #30
 800476c:	d4d6      	bmi.n	800471c <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 800476e:	2301      	movs	r3, #1
 8004770:	9305      	str	r3, [sp, #20]
 8004772:	2300      	movs	r3, #0
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	9303      	str	r3, [sp, #12]
 8004778:	9302      	str	r3, [sp, #8]
 800477a:	9301      	str	r3, [sp, #4]
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	2201      	movs	r2, #1
 8004780:	2100      	movs	r1, #0
 8004782:	0030      	movs	r0, r6
 8004784:	f008 f856 	bl	800c834 <SetButtonEvents>
				status =BOS_OK;
 8004788:	2000      	movs	r0, #0
 800478a:	e7c7      	b.n	800471c <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 800478c:	220c      	movs	r2, #12
 800478e:	498b      	ldr	r1, [pc, #556]	; (80049bc <ParseSnippetCondition+0x398>)
 8004790:	0038      	movs	r0, r7
 8004792:	f00f fe19 	bl	80143c8 <strncmp>
 8004796:	2800      	cmp	r0, #0
 8004798:	d17a      	bne.n	8004890 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 800479a:	00f2      	lsls	r2, r6, #3
 800479c:	1992      	adds	r2, r2, r6
 800479e:	4b85      	ldr	r3, [pc, #532]	; (80049b4 <ParseSnippetCondition+0x390>)
 80047a0:	189b      	adds	r3, r3, r2
 80047a2:	789b      	ldrb	r3, [r3, #2]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d030      	beq.n	800480a <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 80047a8:	00f2      	lsls	r2, r6, #3
 80047aa:	1992      	adds	r2, r2, r6
 80047ac:	4b81      	ldr	r3, [pc, #516]	; (80049b4 <ParseSnippetCondition+0x390>)
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	78db      	ldrb	r3, [r3, #3]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d04a      	beq.n	800484c <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 80047b6:	00f2      	lsls	r2, r6, #3
 80047b8:	1992      	adds	r2, r2, r6
 80047ba:	4b7e      	ldr	r3, [pc, #504]	; (80049b4 <ParseSnippetCondition+0x390>)
 80047bc:	189b      	adds	r3, r3, r2
 80047be:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 80047c0:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1aa      	bne.n	800471c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 80047c6:	4f77      	ldr	r7, [pc, #476]	; (80049a4 <ParseSnippetCondition+0x380>)
 80047c8:	00a3      	lsls	r3, r4, #2
 80047ca:	191b      	adds	r3, r3, r4
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	220b      	movs	r2, #11
 80047d2:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80047d4:	0028      	movs	r0, r5
 80047d6:	300f      	adds	r0, #15
 80047d8:	f00f f8ed 	bl	80139b6 <atoi>
 80047dc:	b2c0      	uxtb	r0, r0
 80047de:	4b70      	ldr	r3, [pc, #448]	; (80049a0 <ParseSnippetCondition+0x37c>)
 80047e0:	781a      	ldrb	r2, [r3, #0]
 80047e2:	0093      	lsls	r3, r2, #2
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	18ff      	adds	r7, r7, r3
 80047ea:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 80047ec:	2301      	movs	r3, #1
 80047ee:	9305      	str	r3, [sp, #20]
 80047f0:	2300      	movs	r3, #0
 80047f2:	9304      	str	r3, [sp, #16]
 80047f4:	9303      	str	r3, [sp, #12]
 80047f6:	9302      	str	r3, [sp, #8]
 80047f8:	9001      	str	r0, [sp, #4]
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	2200      	movs	r2, #0
 80047fe:	2100      	movs	r1, #0
 8004800:	0030      	movs	r0, r6
 8004802:	f008 f817 	bl	800c834 <SetButtonEvents>
					status =BOS_OK;
 8004806:	2000      	movs	r0, #0
 8004808:	e788      	b.n	800471c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 800480a:	4f66      	ldr	r7, [pc, #408]	; (80049a4 <ParseSnippetCondition+0x380>)
 800480c:	00a3      	lsls	r3, r4, #2
 800480e:	191b      	adds	r3, r3, r4
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	18fb      	adds	r3, r7, r3
 8004814:	2209      	movs	r2, #9
 8004816:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004818:	0028      	movs	r0, r5
 800481a:	300f      	adds	r0, #15
 800481c:	f00f f8cb 	bl	80139b6 <atoi>
 8004820:	b2c3      	uxtb	r3, r0
 8004822:	4a5f      	ldr	r2, [pc, #380]	; (80049a0 <ParseSnippetCondition+0x37c>)
 8004824:	7811      	ldrb	r1, [r2, #0]
 8004826:	008a      	lsls	r2, r1, #2
 8004828:	1852      	adds	r2, r2, r1
 800482a:	0092      	lsls	r2, r2, #2
 800482c:	18bf      	adds	r7, r7, r2
 800482e:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004830:	2201      	movs	r2, #1
 8004832:	9205      	str	r2, [sp, #20]
 8004834:	2200      	movs	r2, #0
 8004836:	9204      	str	r2, [sp, #16]
 8004838:	9203      	str	r2, [sp, #12]
 800483a:	9202      	str	r2, [sp, #8]
 800483c:	9201      	str	r2, [sp, #4]
 800483e:	9200      	str	r2, [sp, #0]
 8004840:	2100      	movs	r1, #0
 8004842:	0030      	movs	r0, r6
 8004844:	f007 fff6 	bl	800c834 <SetButtonEvents>
					status =BOS_OK;
 8004848:	2000      	movs	r0, #0
 800484a:	e767      	b.n	800471c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 800484c:	4f55      	ldr	r7, [pc, #340]	; (80049a4 <ParseSnippetCondition+0x380>)
 800484e:	00a3      	lsls	r3, r4, #2
 8004850:	191b      	adds	r3, r3, r4
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	220a      	movs	r2, #10
 8004858:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 800485a:	0028      	movs	r0, r5
 800485c:	300f      	adds	r0, #15
 800485e:	f00f f8aa 	bl	80139b6 <atoi>
 8004862:	b2c0      	uxtb	r0, r0
 8004864:	4b4e      	ldr	r3, [pc, #312]	; (80049a0 <ParseSnippetCondition+0x37c>)
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	0093      	lsls	r3, r2, #2
 800486a:	189b      	adds	r3, r3, r2
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	18ff      	adds	r7, r7, r3
 8004870:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004872:	2301      	movs	r3, #1
 8004874:	9305      	str	r3, [sp, #20]
 8004876:	2300      	movs	r3, #0
 8004878:	9304      	str	r3, [sp, #16]
 800487a:	9303      	str	r3, [sp, #12]
 800487c:	9302      	str	r3, [sp, #8]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	9000      	str	r0, [sp, #0]
 8004882:	2200      	movs	r2, #0
 8004884:	2100      	movs	r1, #0
 8004886:	0030      	movs	r0, r6
 8004888:	f007 ffd4 	bl	800c834 <SetButtonEvents>
					status =BOS_OK;
 800488c:	2000      	movs	r0, #0
 800488e:	e745      	b.n	800471c <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004890:	220d      	movs	r2, #13
 8004892:	494b      	ldr	r1, [pc, #300]	; (80049c0 <ParseSnippetCondition+0x39c>)
 8004894:	0038      	movs	r0, r7
 8004896:	f00f fd97 	bl	80143c8 <strncmp>
 800489a:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 800489c:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d000      	beq.n	80048a4 <ParseSnippetCondition+0x280>
 80048a2:	e73b      	b.n	800471c <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 80048a4:	00f2      	lsls	r2, r6, #3
 80048a6:	1992      	adds	r2, r2, r6
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <ParseSnippetCondition+0x390>)
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	795b      	ldrb	r3, [r3, #5]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d031      	beq.n	8004916 <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 80048b2:	00f2      	lsls	r2, r6, #3
 80048b4:	1992      	adds	r2, r2, r6
 80048b6:	4b3f      	ldr	r3, [pc, #252]	; (80049b4 <ParseSnippetCondition+0x390>)
 80048b8:	189b      	adds	r3, r3, r2
 80048ba:	799b      	ldrb	r3, [r3, #6]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d04c      	beq.n	800495a <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 80048c0:	00f2      	lsls	r2, r6, #3
 80048c2:	1992      	adds	r2, r2, r6
 80048c4:	4b3b      	ldr	r3, [pc, #236]	; (80049b4 <ParseSnippetCondition+0x390>)
 80048c6:	189b      	adds	r3, r3, r2
 80048c8:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 80048ca:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d000      	beq.n	80048d2 <ParseSnippetCondition+0x2ae>
 80048d0:	e724      	b.n	800471c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 80048d2:	4f34      	ldr	r7, [pc, #208]	; (80049a4 <ParseSnippetCondition+0x380>)
 80048d4:	3314      	adds	r3, #20
 80048d6:	4698      	mov	r8, r3
 80048d8:	435c      	muls	r4, r3
 80048da:	193c      	adds	r4, r7, r4
 80048dc:	3b06      	subs	r3, #6
 80048de:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 80048e0:	0028      	movs	r0, r5
 80048e2:	3010      	adds	r0, #16
 80048e4:	f00f f867 	bl	80139b6 <atoi>
 80048e8:	b2c0      	uxtb	r0, r0
 80048ea:	4b2d      	ldr	r3, [pc, #180]	; (80049a0 <ParseSnippetCondition+0x37c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	4642      	mov	r2, r8
 80048f0:	4353      	muls	r3, r2
 80048f2:	18ff      	adds	r7, r7, r3
 80048f4:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 80048f6:	2301      	movs	r3, #1
 80048f8:	9305      	str	r3, [sp, #20]
 80048fa:	9004      	str	r0, [sp, #16]
 80048fc:	2400      	movs	r4, #0
 80048fe:	9403      	str	r4, [sp, #12]
 8004900:	9402      	str	r4, [sp, #8]
 8004902:	9401      	str	r4, [sp, #4]
 8004904:	9400      	str	r4, [sp, #0]
 8004906:	0023      	movs	r3, r4
 8004908:	0022      	movs	r2, r4
 800490a:	0021      	movs	r1, r4
 800490c:	0030      	movs	r0, r6
 800490e:	f007 ff91 	bl	800c834 <SetButtonEvents>
					status =BOS_OK;
 8004912:	0020      	movs	r0, r4
 8004914:	e702      	b.n	800471c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004916:	4f23      	ldr	r7, [pc, #140]	; (80049a4 <ParseSnippetCondition+0x380>)
 8004918:	00a3      	lsls	r3, r4, #2
 800491a:	191b      	adds	r3, r3, r4
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	220c      	movs	r2, #12
 8004922:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004924:	0028      	movs	r0, r5
 8004926:	3010      	adds	r0, #16
 8004928:	f00f f845 	bl	80139b6 <atoi>
 800492c:	b2c0      	uxtb	r0, r0
 800492e:	4b1c      	ldr	r3, [pc, #112]	; (80049a0 <ParseSnippetCondition+0x37c>)
 8004930:	781a      	ldrb	r2, [r3, #0]
 8004932:	0093      	lsls	r3, r2, #2
 8004934:	189b      	adds	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	18ff      	adds	r7, r7, r3
 800493a:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 800493c:	2301      	movs	r3, #1
 800493e:	9305      	str	r3, [sp, #20]
 8004940:	2300      	movs	r3, #0
 8004942:	9304      	str	r3, [sp, #16]
 8004944:	9303      	str	r3, [sp, #12]
 8004946:	9002      	str	r0, [sp, #8]
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	2200      	movs	r2, #0
 800494e:	2100      	movs	r1, #0
 8004950:	0030      	movs	r0, r6
 8004952:	f007 ff6f 	bl	800c834 <SetButtonEvents>
					status =BOS_OK;
 8004956:	2000      	movs	r0, #0
 8004958:	e6e0      	b.n	800471c <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 800495a:	4f12      	ldr	r7, [pc, #72]	; (80049a4 <ParseSnippetCondition+0x380>)
 800495c:	00a3      	lsls	r3, r4, #2
 800495e:	191b      	adds	r3, r3, r4
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	220d      	movs	r2, #13
 8004966:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004968:	0028      	movs	r0, r5
 800496a:	3010      	adds	r0, #16
 800496c:	f00f f823 	bl	80139b6 <atoi>
 8004970:	b2c0      	uxtb	r0, r0
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <ParseSnippetCondition+0x37c>)
 8004974:	781a      	ldrb	r2, [r3, #0]
 8004976:	0093      	lsls	r3, r2, #2
 8004978:	189b      	adds	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	18ff      	adds	r7, r7, r3
 800497e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004980:	2301      	movs	r3, #1
 8004982:	9305      	str	r3, [sp, #20]
 8004984:	2300      	movs	r3, #0
 8004986:	9304      	str	r3, [sp, #16]
 8004988:	9003      	str	r0, [sp, #12]
 800498a:	9302      	str	r3, [sp, #8]
 800498c:	9301      	str	r3, [sp, #4]
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	2200      	movs	r2, #0
 8004992:	2100      	movs	r1, #0
 8004994:	0030      	movs	r0, r6
 8004996:	f007 ff4d 	bl	800c834 <SetButtonEvents>
					status =BOS_OK;
 800499a:	2000      	movs	r0, #0
 800499c:	e6be      	b.n	800471c <ParseSnippetCondition+0xf8>
 800499e:	46c0      	nop			; (mov r8, r8)
 80049a0:	2000193f 	.word	0x2000193f
 80049a4:	20006a28 	.word	0x20006a28
 80049a8:	200018a4 	.word	0x200018a4
 80049ac:	08018914 	.word	0x08018914
 80049b0:	0801a1c0 	.word	0x0801a1c0
 80049b4:	20002570 	.word	0x20002570
 80049b8:	08019244 	.word	0x08019244
 80049bc:	08019254 	.word	0x08019254
 80049c0:	08019264 	.word	0x08019264
			else if(secondPart != NULL && thirdPart != NULL){
 80049c4:	2e00      	cmp	r6, #0
 80049c6:	d04f      	beq.n	8004a68 <ParseSnippetCondition+0x444>
 80049c8:	2c00      	cmp	r4, #0
 80049ca:	d04f      	beq.n	8004a6c <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 80049cc:	0020      	movs	r0, r4
 80049ce:	f7fe fee7 	bl	80037a0 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 80049d2:	2800      	cmp	r0, #0
 80049d4:	d024      	beq.n	8004a20 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 80049d6:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <ParseSnippetCondition+0x450>)
 80049d8:	781c      	ldrb	r4, [r3, #0]
 80049da:	4a27      	ldr	r2, [pc, #156]	; (8004a78 <ParseSnippetCondition+0x454>)
 80049dc:	00a3      	lsls	r3, r4, #2
 80049de:	1919      	adds	r1, r3, r4
 80049e0:	0089      	lsls	r1, r1, #2
 80049e2:	2704      	movs	r7, #4
 80049e4:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 80049e6:	1919      	adds	r1, r3, r4
 80049e8:	0089      	lsls	r1, r1, #2
 80049ea:	1851      	adds	r1, r2, r1
 80049ec:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 80049ee:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 80049f0:	4d20      	ldr	r5, [pc, #128]	; (8004a74 <ParseSnippetCondition+0x450>)
 80049f2:	782c      	ldrb	r4, [r5, #0]
 80049f4:	0030      	movs	r0, r6
 80049f6:	f7fe fee9 	bl	80037cc <IsMathOperator>
 80049fa:	491f      	ldr	r1, [pc, #124]	; (8004a78 <ParseSnippetCondition+0x454>)
 80049fc:	00a3      	lsls	r3, r4, #2
 80049fe:	191b      	adds	r3, r3, r4
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	18cb      	adds	r3, r1, r3
 8004a04:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004a06:	782a      	ldrb	r2, [r5, #0]
 8004a08:	0093      	lsls	r3, r2, #2
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	18cb      	adds	r3, r1, r3
 8004a10:	785b      	ldrb	r3, [r3, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d02c      	beq.n	8004a70 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004a16:	3201      	adds	r2, #1
 8004a18:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <ParseSnippetCondition+0x450>)
 8004a1a:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e01d      	b.n	8004a5c <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004a20:	4b14      	ldr	r3, [pc, #80]	; (8004a74 <ParseSnippetCondition+0x450>)
 8004a22:	4698      	mov	r8, r3
 8004a24:	781a      	ldrb	r2, [r3, #0]
 8004a26:	4f14      	ldr	r7, [pc, #80]	; (8004a78 <ParseSnippetCondition+0x454>)
 8004a28:	0093      	lsls	r3, r2, #2
 8004a2a:	1899      	adds	r1, r3, r2
 8004a2c:	0089      	lsls	r1, r1, #2
 8004a2e:	2003      	movs	r0, #3
 8004a30:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004a32:	187b      	adds	r3, r7, r1
 8004a34:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004a36:	0020      	movs	r0, r4
 8004a38:	f00e ffb8 	bl	80139ac <atof>
 8004a3c:	f7fe f8c4 	bl	8002bc8 <__aeabi_d2f>
 8004a40:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004a42:	4643      	mov	r3, r8
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	0098      	lsls	r0, r3, #2
 8004a48:	18c0      	adds	r0, r0, r3
 8004a4a:	0080      	lsls	r0, r0, #2
 8004a4c:	3006      	adds	r0, #6
 8004a4e:	19c0      	adds	r0, r0, r7
 8004a50:	2204      	movs	r2, #4
 8004a52:	a907      	add	r1, sp, #28
 8004a54:	f00f fa3f 	bl	8013ed6 <memcpy>
 8004a58:	e7ca      	b.n	80049f0 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004a5a:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004a5c:	b008      	add	sp, #32
 8004a5e:	bc04      	pop	{r2}
 8004a60:	4690      	mov	r8, r2
 8004a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004a64:	2067      	movs	r0, #103	; 0x67
 8004a66:	e7f9      	b.n	8004a5c <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004a68:	2067      	movs	r0, #103	; 0x67
 8004a6a:	e7f7      	b.n	8004a5c <ParseSnippetCondition+0x438>
 8004a6c:	2067      	movs	r0, #103	; 0x67
 8004a6e:	e7f5      	b.n	8004a5c <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004a70:	2067      	movs	r0, #103	; 0x67
 8004a72:	e7f3      	b.n	8004a5c <ParseSnippetCondition+0x438>
 8004a74:	2000193f 	.word	0x2000193f
 8004a78:	20006a28 	.word	0x20006a28

08004a7c <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	000c      	movs	r4, r1
	switch(code){
 8004a80:	2802      	cmp	r0, #2
 8004a82:	d017      	beq.n	8004ab4 <AddSnippet+0x38>
 8004a84:	2803      	cmp	r0, #3
 8004a86:	d003      	beq.n	8004a90 <AddSnippet+0x14>
 8004a88:	2801      	cmp	r0, #1
 8004a8a:	d00f      	beq.n	8004aac <AddSnippet+0x30>
	return BOS_OK;
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	e00c      	b.n	8004aaa <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <AddSnippet+0xec>)
 8004a92:	781a      	ldrb	r2, [r3, #0]
 8004a94:	3a01      	subs	r2, #1
 8004a96:	0093      	lsls	r3, r2, #2
 8004a98:	189b      	adds	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4a33      	ldr	r2, [pc, #204]	; (8004b6c <AddSnippet+0xf0>)
 8004a9e:	18d3      	adds	r3, r2, r3
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004aa4:	f006 f88a 	bl	800abbc <SaveToRO>
	return BOS_OK;
 8004aa8:	2000      	movs	r0, #0
}
 8004aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004aac:	0008      	movs	r0, r1
 8004aae:	f7ff fdb9 	bl	8004624 <ParseSnippetCondition>
 8004ab2:	e7fa      	b.n	8004aaa <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004ab4:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <AddSnippet+0xec>)
 8004ab6:	781d      	ldrb	r5, [r3, #0]
 8004ab8:	3d01      	subs	r5, #1
 8004aba:	00ab      	lsls	r3, r5, #2
 8004abc:	195b      	adds	r3, r3, r5
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4a2a      	ldr	r2, [pc, #168]	; (8004b6c <AddSnippet+0xf0>)
 8004ac2:	18d3      	adds	r3, r2, r3
 8004ac4:	68de      	ldr	r6, [r3, #12]
 8004ac6:	2e00      	cmp	r6, #0
 8004ac8:	d03d      	beq.n	8004b46 <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004aca:	0030      	movs	r0, r6
 8004acc:	f7fb fb24 	bl	8000118 <strlen>
 8004ad0:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004ad2:	0020      	movs	r0, r4
 8004ad4:	f7fb fb20 	bl	8000118 <strlen>
 8004ad8:	1839      	adds	r1, r7, r0
 8004ada:	3102      	adds	r1, #2
 8004adc:	0030      	movs	r0, r6
 8004ade:	f00f fa35 	bl	8013f4c <realloc>
 8004ae2:	4e22      	ldr	r6, [pc, #136]	; (8004b6c <AddSnippet+0xf0>)
 8004ae4:	00ab      	lsls	r3, r5, #2
 8004ae6:	195d      	adds	r5, r3, r5
 8004ae8:	00ad      	lsls	r5, r5, #2
 8004aea:	1975      	adds	r5, r6, r5
 8004aec:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004aee:	4d1e      	ldr	r5, [pc, #120]	; (8004b68 <AddSnippet+0xec>)
 8004af0:	782a      	ldrb	r2, [r5, #0]
 8004af2:	3a01      	subs	r2, #1
 8004af4:	0093      	lsls	r3, r2, #2
 8004af6:	189b      	adds	r3, r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	18f3      	adds	r3, r6, r3
 8004afc:	1c7a      	adds	r2, r7, #1
 8004afe:	68d8      	ldr	r0, [r3, #12]
 8004b00:	1880      	adds	r0, r0, r2
 8004b02:	0021      	movs	r1, r4
 8004b04:	f00f fc58 	bl	80143b8 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004b08:	782a      	ldrb	r2, [r5, #0]
 8004b0a:	3a01      	subs	r2, #1
 8004b0c:	0093      	lsls	r3, r2, #2
 8004b0e:	189b      	adds	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	18f6      	adds	r6, r6, r3
 8004b14:	68f3      	ldr	r3, [r6, #12]
 8004b16:	2213      	movs	r2, #19
 8004b18:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004b1a:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <AddSnippet+0xec>)
 8004b1c:	781a      	ldrb	r2, [r3, #0]
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0093      	lsls	r3, r2, #2
 8004b22:	189b      	adds	r3, r3, r2
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4911      	ldr	r1, [pc, #68]	; (8004b6c <AddSnippet+0xf0>)
 8004b28:	18cb      	adds	r3, r1, r3
 8004b2a:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004b2c:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1bb      	bne.n	8004aaa <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004b32:	0090      	lsls	r0, r2, #2
 8004b34:	1880      	adds	r0, r0, r2
 8004b36:	0080      	lsls	r0, r0, #2
 8004b38:	1840      	adds	r0, r0, r1
 8004b3a:	2214      	movs	r2, #20
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	f00f f9d3 	bl	8013ee8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004b42:	200e      	movs	r0, #14
 8004b44:	e7b1      	b.n	8004aaa <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004b46:	0008      	movs	r0, r1
 8004b48:	f7fb fae6 	bl	8000118 <strlen>
 8004b4c:	3001      	adds	r0, #1
 8004b4e:	f00e ff75 	bl	8013a3c <malloc>
 8004b52:	00ab      	lsls	r3, r5, #2
 8004b54:	195d      	adds	r5, r3, r5
 8004b56:	00ad      	lsls	r5, r5, #2
 8004b58:	4b04      	ldr	r3, [pc, #16]	; (8004b6c <AddSnippet+0xf0>)
 8004b5a:	195d      	adds	r5, r3, r5
 8004b5c:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004b5e:	0021      	movs	r1, r4
 8004b60:	f00f fc2a 	bl	80143b8 <strcpy>
 8004b64:	e7d9      	b.n	8004b1a <AddSnippet+0x9e>
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	2000193f 	.word	0x2000193f
 8004b6c:	20006a28 	.word	0x20006a28

08004b70 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	46de      	mov	lr, fp
 8004b74:	4657      	mov	r7, sl
 8004b76:	464e      	mov	r6, r9
 8004b78:	4645      	mov	r5, r8
 8004b7a:	b5e0      	push	{r5, r6, r7, lr}
 8004b7c:	b08b      	sub	sp, #44	; 0x2c
 8004b7e:	9004      	str	r0, [sp, #16]
 8004b80:	4688      	mov	r8, r1
 8004b82:	9203      	str	r2, [sp, #12]
 8004b84:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004b86:	2209      	movs	r2, #9
 8004b88:	2100      	movs	r1, #0
 8004b8a:	a807      	add	r0, sp, #28
 8004b8c:	f00f f9ac 	bl	8013ee8 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004b90:	4fd5      	ldr	r7, [pc, #852]	; (8004ee8 <CLI_CommandParser+0x378>)
				if(id == myID){
 8004b92:	002e      	movs	r6, r5
 8004b94:	e034      	b.n	8004c00 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004b96:	2252      	movs	r2, #82	; 0x52
 8004b98:	49d4      	ldr	r1, [pc, #848]	; (8004eec <CLI_CommandParser+0x37c>)
 8004b9a:	0020      	movs	r0, r4
 8004b9c:	f00f f99b 	bl	8013ed6 <memcpy>
				recordSnippet =0;
 8004ba0:	4bd1      	ldr	r3, [pc, #836]	; (8004ee8 <CLI_CommandParser+0x378>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	e044      	b.n	8004c32 <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004ba8:	2206      	movs	r2, #6
 8004baa:	49d1      	ldr	r1, [pc, #836]	; (8004ef0 <CLI_CommandParser+0x380>)
 8004bac:	9803      	ldr	r0, [sp, #12]
 8004bae:	f00f fc0b 	bl	80143c8 <strncmp>
 8004bb2:	2800      	cmp	r0, #0
 8004bb4:	d053      	beq.n	8004c5e <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004bb6:	2d02      	cmp	r5, #2
 8004bb8:	d05e      	beq.n	8004c78 <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004bba:	212e      	movs	r1, #46	; 0x2e
 8004bbc:	9803      	ldr	r0, [sp, #12]
 8004bbe:	f00f fbed 	bl	801439c <strchr>
 8004bc2:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004bc4:	d006      	beq.n	8004bd4 <CLI_CommandParser+0x64>
 8004bc6:	3803      	subs	r0, #3
 8004bc8:	2203      	movs	r2, #3
 8004bca:	49ca      	ldr	r1, [pc, #808]	; (8004ef4 <CLI_CommandParser+0x384>)
 8004bcc:	f00f fbfc 	bl	80143c8 <strncmp>
 8004bd0:	2800      	cmp	r0, #0
 8004bd2:	d160      	bne.n	8004c96 <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004bd4:	2299      	movs	r2, #153	; 0x99
 8004bd6:	0092      	lsls	r2, r2, #2
 8004bd8:	0021      	movs	r1, r4
 8004bda:	9803      	ldr	r0, [sp, #12]
 8004bdc:	f009 fc54 	bl	800e488 <FreeRTOS_CLIProcessCommand>
 8004be0:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004be2:	7823      	ldrb	r3, [r4, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d000      	beq.n	8004bea <CLI_CommandParser+0x7a>
 8004be8:	e16f      	b.n	8004eca <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004bea:	0020      	movs	r0, r4
 8004bec:	f7fb fa94 	bl	8000118 <strlen>
 8004bf0:	0002      	movs	r2, r0
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	0020      	movs	r0, r4
 8004bf6:	f00f f977 	bl	8013ee8 <memset>
	} while(xReturned != pdFALSE);
 8004bfa:	2e00      	cmp	r6, #0
 8004bfc:	d100      	bne.n	8004c00 <CLI_CommandParser+0x90>
 8004bfe:	e1ab      	b.n	8004f58 <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004c00:	9803      	ldr	r0, [sp, #12]
 8004c02:	f7ff fcf7 	bl	80045f4 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004c06:	783d      	ldrb	r5, [r7, #0]
 8004c08:	2d00      	cmp	r5, #0
 8004c0a:	d1cd      	bne.n	8004ba8 <CLI_CommandParser+0x38>
 8004c0c:	2203      	movs	r2, #3
 8004c0e:	49ba      	ldr	r1, [pc, #744]	; (8004ef8 <CLI_CommandParser+0x388>)
 8004c10:	9803      	ldr	r0, [sp, #12]
 8004c12:	f00f fbd9 	bl	80143c8 <strncmp>
 8004c16:	2800      	cmp	r0, #0
 8004c18:	d1cf      	bne.n	8004bba <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	1cd9      	adds	r1, r3, #3
 8004c1e:	3001      	adds	r0, #1
 8004c20:	f7ff ff2c 	bl	8004a7c <AddSnippet>
 8004c24:	2800      	cmp	r0, #0
 8004c26:	d1b6      	bne.n	8004b96 <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004c28:	4baf      	ldr	r3, [pc, #700]	; (8004ee8 <CLI_CommandParser+0x378>)
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004c2e:	230d      	movs	r3, #13
 8004c30:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004c32:	7823      	ldrb	r3, [r4, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d100      	bne.n	8004c3a <CLI_CommandParser+0xca>
 8004c38:	e186      	b.n	8004f48 <CLI_CommandParser+0x3d8>
 8004c3a:	4643      	mov	r3, r8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d100      	bne.n	8004c42 <CLI_CommandParser+0xd2>
 8004c40:	e19d      	b.n	8004f7e <CLI_CommandParser+0x40e>
 8004c42:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004c44:	0020      	movs	r0, r4
 8004c46:	f7fb fa67 	bl	8000118 <strlen>
 8004c4a:	b282      	uxth	r2, r0
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	425b      	negs	r3, r3
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	3333      	adds	r3, #51	; 0x33
 8004c54:	0021      	movs	r1, r4
 8004c56:	9804      	ldr	r0, [sp, #16]
 8004c58:	f009 f9fc 	bl	800e054 <writePxMutex>
 8004c5c:	e7c5      	b.n	8004bea <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004c5e:	4ba2      	ldr	r3, [pc, #648]	; (8004ee8 <CLI_CommandParser+0x378>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004c64:	49a5      	ldr	r1, [pc, #660]	; (8004efc <CLI_CommandParser+0x38c>)
 8004c66:	3003      	adds	r0, #3
 8004c68:	f7ff ff08 	bl	8004a7c <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004c6c:	2241      	movs	r2, #65	; 0x41
 8004c6e:	49a4      	ldr	r1, [pc, #656]	; (8004f00 <CLI_CommandParser+0x390>)
 8004c70:	0020      	movs	r0, r4
 8004c72:	f00f f930 	bl	8013ed6 <memcpy>
			xReturned = pdFALSE;
 8004c76:	e7dc      	b.n	8004c32 <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004c78:	9903      	ldr	r1, [sp, #12]
 8004c7a:	2002      	movs	r0, #2
 8004c7c:	f7ff fefe 	bl	8004a7c <AddSnippet>
 8004c80:	2800      	cmp	r0, #0
 8004c82:	d102      	bne.n	8004c8a <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004c84:	230d      	movs	r3, #13
 8004c86:	7023      	strb	r3, [r4, #0]
 8004c88:	e7d3      	b.n	8004c32 <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004c8a:	2252      	movs	r2, #82	; 0x52
 8004c8c:	4997      	ldr	r1, [pc, #604]	; (8004eec <CLI_CommandParser+0x37c>)
 8004c8e:	0020      	movs	r0, r4
 8004c90:	f00f f921 	bl	8013ed6 <memcpy>
 8004c94:	e7cd      	b.n	8004c32 <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004c96:	f00e fec3 	bl	8013a20 <__locale_ctype_ptr>
 8004c9a:	786b      	ldrb	r3, [r5, #1]
 8004c9c:	18c0      	adds	r0, r0, r3
 8004c9e:	7843      	ldrb	r3, [r0, #1]
 8004ca0:	075b      	lsls	r3, r3, #29
 8004ca2:	d497      	bmi.n	8004bd4 <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004ca4:	9903      	ldr	r1, [sp, #12]
 8004ca6:	1a6a      	subs	r2, r5, r1
 8004ca8:	a807      	add	r0, sp, #28
 8004caa:	f00f fb9e 	bl	80143ea <strncpy>
				id =GetID(idString);
 8004cae:	a807      	add	r0, sp, #28
 8004cb0:	f7ff fad8 	bl	8004264 <GetID>
 8004cb4:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004cb6:	4a93      	ldr	r2, [pc, #588]	; (8004f04 <CLI_CommandParser+0x394>)
 8004cb8:	7812      	ldrb	r2, [r2, #0]
 8004cba:	4693      	mov	fp, r2
 8004cbc:	4290      	cmp	r0, r2
 8004cbe:	d03d      	beq.n	8004d3c <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004cc0:	2864      	cmp	r0, #100	; 0x64
 8004cc2:	d043      	beq.n	8004d4c <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004cc4:	2866      	cmp	r0, #102	; 0x66
 8004cc6:	d047      	beq.n	8004d58 <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004cc8:	28ff      	cmp	r0, #255	; 0xff
 8004cca:	d04b      	beq.n	8004d64 <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004ccc:	466b      	mov	r3, sp
 8004cce:	7d1b      	ldrb	r3, [r3, #20]
 8004cd0:	469a      	mov	sl, r3
 8004cd2:	2bfe      	cmp	r3, #254	; 0xfe
 8004cd4:	d078      	beq.n	8004dc8 <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004cd6:	3501      	adds	r5, #1
 8004cd8:	2206      	movs	r2, #6
 8004cda:	498b      	ldr	r1, [pc, #556]	; (8004f08 <CLI_CommandParser+0x398>)
 8004cdc:	0028      	movs	r0, r5
 8004cde:	f00f fb73 	bl	80143c8 <strncmp>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d000      	beq.n	8004ce8 <CLI_CommandParser+0x178>
 8004ce6:	e0b4      	b.n	8004e52 <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004ce8:	4b88      	ldr	r3, [pc, #544]	; (8004f0c <CLI_CommandParser+0x39c>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004cee:	2119      	movs	r1, #25
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	f003 fa45 	bl	8008180 <SendMessageToModule>
						osDelay(100);
 8004cf6:	2064      	movs	r0, #100	; 0x64
 8004cf8:	f009 fb33 	bl	800e362 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004cfc:	4b84      	ldr	r3, [pc, #528]	; (8004f10 <CLI_CommandParser+0x3a0>)
 8004cfe:	781a      	ldrb	r2, [r3, #0]
 8004d00:	4b80      	ldr	r3, [pc, #512]	; (8004f04 <CLI_CommandParser+0x394>)
 8004d02:	7818      	ldrb	r0, [r3, #0]
 8004d04:	2300      	movs	r3, #0
 8004d06:	4651      	mov	r1, sl
 8004d08:	f005 f926 	bl	8009f58 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004d0c:	4b7f      	ldr	r3, [pc, #508]	; (8004f0c <CLI_CommandParser+0x39c>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b60      	cmp	r3, #96	; 0x60
 8004d12:	d18e      	bne.n	8004c32 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004d14:	21fa      	movs	r1, #250	; 0xfa
 8004d16:	0089      	lsls	r1, r1, #2
 8004d18:	2001      	movs	r0, #1
 8004d1a:	f00a fe4d 	bl	800f9b8 <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004d1e:	4b7d      	ldr	r3, [pc, #500]	; (8004f14 <CLI_CommandParser+0x3a4>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d085      	beq.n	8004c32 <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004d26:	4a7c      	ldr	r2, [pc, #496]	; (8004f18 <CLI_CommandParser+0x3a8>)
 8004d28:	8813      	ldrh	r3, [r2, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004d2e:	9b05      	ldr	r3, [sp, #20]
 8004d30:	0022      	movs	r2, r4
 8004d32:	497a      	ldr	r1, [pc, #488]	; (8004f1c <CLI_CommandParser+0x3ac>)
 8004d34:	0020      	movs	r0, r4
 8004d36:	f00f fb03 	bl	8014340 <sprintf>
 8004d3a:	e77a      	b.n	8004c32 <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004d3c:	2299      	movs	r2, #153	; 0x99
 8004d3e:	1c68      	adds	r0, r5, #1
 8004d40:	0092      	lsls	r2, r2, #2
 8004d42:	0021      	movs	r1, r4
 8004d44:	f009 fba0 	bl	800e488 <FreeRTOS_CLIProcessCommand>
 8004d48:	0006      	movs	r6, r0
 8004d4a:	e74a      	b.n	8004be2 <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004d4c:	2227      	movs	r2, #39	; 0x27
 8004d4e:	4974      	ldr	r1, [pc, #464]	; (8004f20 <CLI_CommandParser+0x3b0>)
 8004d50:	0020      	movs	r0, r4
 8004d52:	f00f f8c0 	bl	8013ed6 <memcpy>
 8004d56:	e76c      	b.n	8004c32 <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004d58:	2225      	movs	r2, #37	; 0x25
 8004d5a:	4972      	ldr	r1, [pc, #456]	; (8004f24 <CLI_CommandParser+0x3b4>)
 8004d5c:	0020      	movs	r0, r4
 8004d5e:	f00f f8ba 	bl	8013ed6 <memcpy>
 8004d62:	e766      	b.n	8004c32 <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004d64:	221a      	movs	r2, #26
 8004d66:	2100      	movs	r1, #0
 8004d68:	486f      	ldr	r0, [pc, #444]	; (8004f28 <CLI_CommandParser+0x3b8>)
 8004d6a:	f00f f8bd 	bl	8013ee8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004d6e:	3501      	adds	r5, #1
 8004d70:	9803      	ldr	r0, [sp, #12]
 8004d72:	f7fb f9d1 	bl	8000118 <strlen>
 8004d76:	0006      	movs	r6, r0
 8004d78:	ab07      	add	r3, sp, #28
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f7fb f9cc 	bl	8000118 <strlen>
 8004d80:	1e72      	subs	r2, r6, #1
 8004d82:	1a12      	subs	r2, r2, r0
 8004d84:	0029      	movs	r1, r5
 8004d86:	4869      	ldr	r0, [pc, #420]	; (8004f2c <CLI_CommandParser+0x3bc>)
 8004d88:	f00f fb2f 	bl	80143ea <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004d8c:	9803      	ldr	r0, [sp, #12]
 8004d8e:	f7fb f9c3 	bl	8000118 <strlen>
 8004d92:	0006      	movs	r6, r0
 8004d94:	a807      	add	r0, sp, #28
 8004d96:	f7fb f9bf 	bl	8000118 <strlen>
 8004d9a:	1a33      	subs	r3, r6, r0
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	2217      	movs	r2, #23
 8004da0:	21ff      	movs	r1, #255	; 0xff
 8004da2:	4658      	mov	r0, fp
 8004da4:	f003 f9c4 	bl	8008130 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004da8:	2299      	movs	r2, #153	; 0x99
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	0021      	movs	r1, r4
 8004dae:	0028      	movs	r0, r5
 8004db0:	f009 fb6a 	bl	800e488 <FreeRTOS_CLIProcessCommand>
 8004db4:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004db6:	0020      	movs	r0, r4
 8004db8:	f7fb f9ae 	bl	8000118 <strlen>
 8004dbc:	1820      	adds	r0, r4, r0
 8004dbe:	221d      	movs	r2, #29
 8004dc0:	495b      	ldr	r1, [pc, #364]	; (8004f30 <CLI_CommandParser+0x3c0>)
 8004dc2:	f00f f888 	bl	8013ed6 <memcpy>
 8004dc6:	e70c      	b.n	8004be2 <CLI_CommandParser+0x72>
					group =id >> 8;
 8004dc8:	9b05      	ldr	r3, [sp, #20]
 8004dca:	121b      	asrs	r3, r3, #8
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	469a      	mov	sl, r3
 8004dd0:	4b58      	ldr	r3, [pc, #352]	; (8004f34 <CLI_CommandParser+0x3c4>)
 8004dd2:	4699      	mov	r9, r3
 8004dd4:	4652      	mov	r2, sl
 8004dd6:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004dd8:	221a      	movs	r2, #26
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4852      	ldr	r0, [pc, #328]	; (8004f28 <CLI_CommandParser+0x3b8>)
 8004dde:	f00f f883 	bl	8013ee8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004de2:	1c6b      	adds	r3, r5, #1
 8004de4:	9305      	str	r3, [sp, #20]
 8004de6:	9803      	ldr	r0, [sp, #12]
 8004de8:	f7fb f996 	bl	8000118 <strlen>
 8004dec:	0005      	movs	r5, r0
 8004dee:	aa07      	add	r2, sp, #28
 8004df0:	0010      	movs	r0, r2
 8004df2:	f7fb f991 	bl	8000118 <strlen>
 8004df6:	3d01      	subs	r5, #1
 8004df8:	1a2a      	subs	r2, r5, r0
 8004dfa:	9905      	ldr	r1, [sp, #20]
 8004dfc:	484b      	ldr	r0, [pc, #300]	; (8004f2c <CLI_CommandParser+0x3bc>)
 8004dfe:	f00f faf4 	bl	80143ea <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004e02:	9803      	ldr	r0, [sp, #12]
 8004e04:	f7fb f988 	bl	8000118 <strlen>
 8004e08:	0005      	movs	r5, r0
 8004e0a:	a807      	add	r0, sp, #28
 8004e0c:	f7fb f984 	bl	8000118 <strlen>
 8004e10:	1a2b      	subs	r3, r5, r0
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2217      	movs	r2, #23
 8004e16:	4651      	mov	r1, sl
 8004e18:	4658      	mov	r0, fp
 8004e1a:	f003 f989 	bl	8008130 <BroadcastMessage>
					if(InGroup(myID,group))
 8004e1e:	4b39      	ldr	r3, [pc, #228]	; (8004f04 <CLI_CommandParser+0x394>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	4a44      	ldr	r2, [pc, #272]	; (8004f38 <CLI_CommandParser+0x3c8>)
 8004e28:	5a9b      	ldrh	r3, [r3, r2]
 8004e2a:	464a      	mov	r2, r9
 8004e2c:	7812      	ldrb	r2, [r2, #0]
 8004e2e:	4113      	asrs	r3, r2
 8004e30:	07db      	lsls	r3, r3, #31
 8004e32:	d406      	bmi.n	8004e42 <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8004e34:	ab07      	add	r3, sp, #28
 8004e36:	0022      	movs	r2, r4
 8004e38:	4940      	ldr	r1, [pc, #256]	; (8004f3c <CLI_CommandParser+0x3cc>)
 8004e3a:	0020      	movs	r0, r4
 8004e3c:	f00f fa80 	bl	8014340 <sprintf>
 8004e40:	e6cf      	b.n	8004be2 <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004e42:	2299      	movs	r2, #153	; 0x99
 8004e44:	0092      	lsls	r2, r2, #2
 8004e46:	0021      	movs	r1, r4
 8004e48:	9805      	ldr	r0, [sp, #20]
 8004e4a:	f009 fb1d 	bl	800e488 <FreeRTOS_CLIProcessCommand>
 8004e4e:	0006      	movs	r6, r0
 8004e50:	e7f0      	b.n	8004e34 <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004e52:	9803      	ldr	r0, [sp, #12]
 8004e54:	f7fb f960 	bl	8000118 <strlen>
 8004e58:	0006      	movs	r6, r0
 8004e5a:	ab07      	add	r3, sp, #28
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fb f95b 	bl	8000118 <strlen>
 8004e62:	1e72      	subs	r2, r6, #1
 8004e64:	1a12      	subs	r2, r2, r0
 8004e66:	0029      	movs	r1, r5
 8004e68:	4830      	ldr	r0, [pc, #192]	; (8004f2c <CLI_CommandParser+0x3bc>)
 8004e6a:	f00f fabe 	bl	80143ea <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8004e6e:	9803      	ldr	r0, [sp, #12]
 8004e70:	f7fb f952 	bl	8000118 <strlen>
 8004e74:	0005      	movs	r5, r0
 8004e76:	a807      	add	r0, sp, #28
 8004e78:	f7fb f94e 	bl	8000118 <strlen>
 8004e7c:	3d01      	subs	r5, #1
 8004e7e:	1a2a      	subs	r2, r5, r0
 8004e80:	b292      	uxth	r2, r2
 8004e82:	2117      	movs	r1, #23
 8004e84:	4650      	mov	r0, sl
 8004e86:	f003 f97b 	bl	8008180 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 8004e8a:	9a05      	ldr	r2, [sp, #20]
 8004e8c:	492c      	ldr	r1, [pc, #176]	; (8004f40 <CLI_CommandParser+0x3d0>)
 8004e8e:	0020      	movs	r0, r4
 8004e90:	f00f fa56 	bl	8014340 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8004e94:	7823      	ldrb	r3, [r4, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d002      	beq.n	8004ea0 <CLI_CommandParser+0x330>
 8004e9a:	4643      	mov	r3, r8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d108      	bne.n	8004eb2 <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	f7fb f939 	bl	8000118 <strlen>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	0020      	movs	r0, r4
 8004eac:	f00f f81c 	bl	8013ee8 <memset>
 8004eb0:	e72c      	b.n	8004d0c <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8004eb2:	0020      	movs	r0, r4
 8004eb4:	f7fb f930 	bl	8000118 <strlen>
 8004eb8:	b282      	uxth	r2, r0
 8004eba:	2301      	movs	r3, #1
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	3331      	adds	r3, #49	; 0x31
 8004ec0:	0021      	movs	r1, r4
 8004ec2:	9804      	ldr	r0, [sp, #16]
 8004ec4:	f009 f8c6 	bl	800e054 <writePxMutex>
 8004ec8:	e7ea      	b.n	8004ea0 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004eca:	4643      	mov	r3, r8
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d100      	bne.n	8004ed2 <CLI_CommandParser+0x362>
 8004ed0:	e68b      	b.n	8004bea <CLI_CommandParser+0x7a>
 8004ed2:	e6b7      	b.n	8004c44 <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	425b      	negs	r3, r3
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	3333      	adds	r3, #51	; 0x33
 8004edc:	2238      	movs	r2, #56	; 0x38
 8004ede:	4919      	ldr	r1, [pc, #100]	; (8004f44 <CLI_CommandParser+0x3d4>)
 8004ee0:	9804      	ldr	r0, [sp, #16]
 8004ee2:	f009 f8b7 	bl	800e054 <writePxMutex>
}
 8004ee6:	e043      	b.n	8004f70 <CLI_CommandParser+0x400>
 8004ee8:	2000196c 	.word	0x2000196c
 8004eec:	0801907c 	.word	0x0801907c
 8004ef0:	080190d0 	.word	0x080190d0
 8004ef4:	0801911c 	.word	0x0801911c
 8004ef8:	08019078 	.word	0x08019078
 8004efc:	08018a7c 	.word	0x08018a7c
 8004f00:	080190d8 	.word	0x080190d8
 8004f04:	20001792 	.word	0x20001792
 8004f08:	080191bc 	.word	0x080191bc
 8004f0c:	2000698c 	.word	0x2000698c
 8004f10:	2000118a 	.word	0x2000118a
 8004f14:	20001830 	.word	0x20001830
 8004f18:	200021f8 	.word	0x200021f8
 8004f1c:	080191e8 	.word	0x080191e8
 8004f20:	08019120 	.word	0x08019120
 8004f24:	08019148 	.word	0x08019148
 8004f28:	20001408 	.word	0x20001408
 8004f2c:	20001654 	.word	0x20001654
 8004f30:	08019170 	.word	0x08019170
 8004f34:	2000193e 	.word	0x2000193e
 8004f38:	200015dc 	.word	0x200015dc
 8004f3c:	08019190 	.word	0x08019190
 8004f40:	080191c4 	.word	0x080191c4
 8004f44:	08019208 	.word	0x08019208
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f48:	0020      	movs	r0, r4
 8004f4a:	f7fb f8e5 	bl	8000118 <strlen>
 8004f4e:	0002      	movs	r2, r0
 8004f50:	2100      	movs	r1, #0
 8004f52:	0020      	movs	r0, r4
 8004f54:	f00e ffc8 	bl	8013ee8 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 8004f58:	2209      	movs	r2, #9
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	a807      	add	r0, sp, #28
 8004f5e:	f00e ffc3 	bl	8013ee8 <memset>
	if(!recordSnippet && enableOutput)
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <CLI_CommandParser+0x420>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d102      	bne.n	8004f70 <CLI_CommandParser+0x400>
 8004f6a:	4643      	mov	r3, r8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1b1      	bne.n	8004ed4 <CLI_CommandParser+0x364>
}
 8004f70:	b00b      	add	sp, #44	; 0x2c
 8004f72:	bc3c      	pop	{r2, r3, r4, r5}
 8004f74:	4690      	mov	r8, r2
 8004f76:	4699      	mov	r9, r3
 8004f78:	46a2      	mov	sl, r4
 8004f7a:	46ab      	mov	fp, r5
 8004f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004f7e:	0020      	movs	r0, r4
 8004f80:	f7fb f8ca 	bl	8000118 <strlen>
 8004f84:	0002      	movs	r2, r0
 8004f86:	2100      	movs	r1, #0
 8004f88:	0020      	movs	r0, r4
 8004f8a:	f00e ffad 	bl	8013ee8 <memset>
 8004f8e:	e7e3      	b.n	8004f58 <CLI_CommandParser+0x3e8>
 8004f90:	2000196c 	.word	0x2000196c

08004f94 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8004f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f96:	46ce      	mov	lr, r9
 8004f98:	b500      	push	{lr}
 8004f9a:	b086      	sub	sp, #24
	char cRxedChar ='\0';
 8004f9c:	230f      	movs	r3, #15
 8004f9e:	aa02      	add	r2, sp, #8
 8004fa0:	4694      	mov	ip, r2
 8004fa2:	4463      	add	r3, ip
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8004fa8:	2101      	movs	r1, #1
 8004faa:	4249      	negs	r1, r1
 8004fac:	2001      	movs	r0, #1
 8004fae:	f00a fd03 	bl	800f9b8 <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8004fb2:	f009 fae7 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8004fb6:	9003      	str	r0, [sp, #12]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 8004fb8:	23e1      	movs	r3, #225	; 0xe1
 8004fba:	031b      	lsls	r3, r3, #12
 8004fbc:	4a4a      	ldr	r2, [pc, #296]	; (80050e8 <prvCLITask+0x154>)
 8004fbe:	6892      	ldr	r2, [r2, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d00f      	beq.n	8004fe4 <prvCLITask+0x50>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004fc4:	2401      	movs	r4, #1
			if(port != PcPort)
 8004fc6:	4f49      	ldr	r7, [pc, #292]	; (80050ec <prvCLITask+0x158>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004fc8:	001d      	movs	r5, r3
 8004fca:	e003      	b.n	8004fd4 <prvCLITask+0x40>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004fcc:	3401      	adds	r4, #1
 8004fce:	b2e4      	uxtb	r4, r4
 8004fd0:	2c07      	cmp	r4, #7
 8004fd2:	d007      	beq.n	8004fe4 <prvCLITask+0x50>
			if(port != PcPort)
 8004fd4:	783b      	ldrb	r3, [r7, #0]
 8004fd6:	42a3      	cmp	r3, r4
 8004fd8:	d0f8      	beq.n	8004fcc <prvCLITask+0x38>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8004fda:	0029      	movs	r1, r5
 8004fdc:	0020      	movs	r0, r4
 8004fde:	f009 f883 	bl	800e0e8 <UpdateBaudrate>
 8004fe2:	e7f3      	b.n	8004fcc <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 8004fe4:	4b42      	ldr	r3, [pc, #264]	; (80050f0 <prvCLITask+0x15c>)
 8004fe6:	881a      	ldrh	r2, [r3, #0]
 8004fe8:	0053      	lsls	r3, r2, #1
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	4a41      	ldr	r2, [pc, #260]	; (80050f4 <prvCLITask+0x160>)
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	4a41      	ldr	r2, [pc, #260]	; (80050f8 <prvCLITask+0x164>)
 8004ff4:	7812      	ldrb	r2, [r2, #0]
 8004ff6:	4c41      	ldr	r4, [pc, #260]	; (80050fc <prvCLITask+0x168>)
 8004ff8:	4d3c      	ldr	r5, [pc, #240]	; (80050ec <prvCLITask+0x158>)
 8004ffa:	7829      	ldrb	r1, [r5, #0]
 8004ffc:	9100      	str	r1, [sp, #0]
 8004ffe:	4940      	ldr	r1, [pc, #256]	; (8005100 <prvCLITask+0x16c>)
 8005000:	0020      	movs	r0, r4
 8005002:	f00f f99d 	bl	8014340 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 8005006:	22a4      	movs	r2, #164	; 0xa4
 8005008:	7828      	ldrb	r0, [r5, #0]
 800500a:	230a      	movs	r3, #10
 800500c:	0092      	lsls	r2, r2, #2
 800500e:	493d      	ldr	r1, [pc, #244]	; (8005104 <prvCLITask+0x170>)
 8005010:	f009 f848 	bl	800e0a4 <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 8005014:	0020      	movs	r0, r4
 8005016:	f7fb f87f 	bl	8000118 <strlen>
 800501a:	b282      	uxth	r2, r0
 800501c:	7828      	ldrb	r0, [r5, #0]
 800501e:	230a      	movs	r3, #10
 8005020:	0021      	movs	r1, r4
 8005022:	f009 f83f 	bl	800e0a4 <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 8005026:	2300      	movs	r3, #0
 8005028:	4699      	mov	r9, r3
		if(Read_In_CLI_Task_Flag == 1)
 800502a:	4c37      	ldr	r4, [pc, #220]	; (8005108 <prvCLITask+0x174>)
			cRxedChar = Rx_Data[PcPort - 1];
 800502c:	4e2f      	ldr	r6, [pc, #188]	; (80050ec <prvCLITask+0x158>)
 800502e:	4f37      	ldr	r7, [pc, #220]	; (800510c <prvCLITask+0x178>)
 8005030:	e01e      	b.n	8005070 <prvCLITask+0xdc>
				writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 8005032:	4b2e      	ldr	r3, [pc, #184]	; (80050ec <prvCLITask+0x158>)
 8005034:	7818      	ldrb	r0, [r3, #0]
 8005036:	230a      	movs	r3, #10
 8005038:	2202      	movs	r2, #2
 800503a:	4935      	ldr	r1, [pc, #212]	; (8005110 <prvCLITask+0x17c>)
 800503c:	f009 f832 	bl	800e0a4 <writePxITMutex>
				if(cInputIndex == 0){
 8005040:	464b      	mov	r3, r9
 8005042:	2b00      	cmp	r3, #0
 8005044:	d040      	beq.n	80050c8 <prvCLITask+0x134>
				CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005046:	4d33      	ldr	r5, [pc, #204]	; (8005114 <prvCLITask+0x180>)
 8005048:	4b28      	ldr	r3, [pc, #160]	; (80050ec <prvCLITask+0x158>)
 800504a:	7818      	ldrb	r0, [r3, #0]
 800504c:	9b03      	ldr	r3, [sp, #12]
 800504e:	002a      	movs	r2, r5
 8005050:	2101      	movs	r1, #1
 8005052:	f7ff fd8d 	bl	8004b70 <CLI_CommandParser>
				strcpy((char* )cLastInputString,(char* )cInputString);
 8005056:	0029      	movs	r1, r5
 8005058:	482f      	ldr	r0, [pc, #188]	; (8005118 <prvCLITask+0x184>)
 800505a:	f00f f9ad 	bl	80143b8 <strcpy>
				memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 800505e:	2232      	movs	r2, #50	; 0x32
 8005060:	2100      	movs	r1, #0
 8005062:	0028      	movs	r0, r5
 8005064:	f00e ff40 	bl	8013ee8 <memset>
				cInputIndex =0;
 8005068:	2300      	movs	r3, #0
 800506a:	4699      	mov	r9, r3
		taskYIELD();
 800506c:	f00a ff5e 	bl	800ff2c <vPortYield>
		if(Read_In_CLI_Task_Flag == 1)
 8005070:	7823      	ldrb	r3, [r4, #0]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d1fa      	bne.n	800506c <prvCLITask+0xd8>
			cRxedChar = Rx_Data[PcPort - 1];
 8005076:	7830      	ldrb	r0, [r6, #0]
 8005078:	1e42      	subs	r2, r0, #1
 800507a:	250f      	movs	r5, #15
 800507c:	ab02      	add	r3, sp, #8
 800507e:	469c      	mov	ip, r3
 8005080:	4465      	add	r5, ip
 8005082:	5cbb      	ldrb	r3, [r7, r2]
 8005084:	702b      	strb	r3, [r5, #0]
			Rx_Data[PcPort - 1] = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	54bb      	strb	r3, [r7, r2]
			Read_In_CLI_Task_Flag = 0;
 800508a:	4a1f      	ldr	r2, [pc, #124]	; (8005108 <prvCLITask+0x174>)
 800508c:	7013      	strb	r3, [r2, #0]
			writePxITMutex(PcPort,&cRxedChar,1,10);
 800508e:	330a      	adds	r3, #10
 8005090:	2201      	movs	r2, #1
 8005092:	0029      	movs	r1, r5
 8005094:	f009 f806 	bl	800e0a4 <writePxITMutex>
			if(cRxedChar == '\r'){
 8005098:	782b      	ldrb	r3, [r5, #0]
 800509a:	2b0d      	cmp	r3, #13
 800509c:	d0c9      	beq.n	8005032 <prvCLITask+0x9e>
				if(cRxedChar == '\n'){
 800509e:	2b0a      	cmp	r3, #10
 80050a0:	d0e4      	beq.n	800506c <prvCLITask+0xd8>
				else if(cRxedChar == '\b' || cRxedChar == 127 ){
 80050a2:	2b08      	cmp	r3, #8
 80050a4:	d015      	beq.n	80050d2 <prvCLITask+0x13e>
 80050a6:	2b7f      	cmp	r3, #127	; 0x7f
 80050a8:	d013      	beq.n	80050d2 <prvCLITask+0x13e>
					if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 80050aa:	001a      	movs	r2, r3
 80050ac:	3a20      	subs	r2, #32
 80050ae:	2a5e      	cmp	r2, #94	; 0x5e
 80050b0:	d8dc      	bhi.n	800506c <prvCLITask+0xd8>
						if(cInputIndex < cmdMAX_INPUT_SIZE){
 80050b2:	464a      	mov	r2, r9
 80050b4:	2a31      	cmp	r2, #49	; 0x31
 80050b6:	dcd9      	bgt.n	800506c <prvCLITask+0xd8>
							cInputString[cInputIndex] =cRxedChar;
 80050b8:	4a16      	ldr	r2, [pc, #88]	; (8005114 <prvCLITask+0x180>)
 80050ba:	4649      	mov	r1, r9
 80050bc:	5453      	strb	r3, [r2, r1]
							cInputIndex++;
 80050be:	464b      	mov	r3, r9
 80050c0:	3301      	adds	r3, #1
 80050c2:	b25b      	sxtb	r3, r3
 80050c4:	4699      	mov	r9, r3
 80050c6:	e7d1      	b.n	800506c <prvCLITask+0xd8>
					strcpy((char* )cInputString,(char* )cLastInputString);
 80050c8:	4913      	ldr	r1, [pc, #76]	; (8005118 <prvCLITask+0x184>)
 80050ca:	4812      	ldr	r0, [pc, #72]	; (8005114 <prvCLITask+0x180>)
 80050cc:	f00f f974 	bl	80143b8 <strcpy>
 80050d0:	e7b9      	b.n	8005046 <prvCLITask+0xb2>
					if(cInputIndex > 0){
 80050d2:	464b      	mov	r3, r9
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	ddc9      	ble.n	800506c <prvCLITask+0xd8>
						cInputIndex--;
 80050d8:	3b01      	subs	r3, #1
 80050da:	b25b      	sxtb	r3, r3
 80050dc:	4699      	mov	r9, r3
						cInputString[cInputIndex] ='\0';
 80050de:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <prvCLITask+0x180>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	4649      	mov	r1, r9
 80050e4:	545a      	strb	r2, [r3, r1]
 80050e6:	e7c1      	b.n	800506c <prvCLITask+0xd8>
 80050e8:	20006a0c 	.word	0x20006a0c
 80050ec:	2000118a 	.word	0x2000118a
 80050f0:	20000078 	.word	0x20000078
 80050f4:	08018acc 	.word	0x08018acc
 80050f8:	20001792 	.word	0x20001792
 80050fc:	20001940 	.word	0x20001940
 8005100:	08019274 	.word	0x08019274
 8005104:	080192a0 	.word	0x080192a0
 8005108:	20001193 	.word	0x20001193
 800510c:	200019f0 	.word	0x200019f0
 8005110:	0801ab5c 	.word	0x0801ab5c
 8005114:	20001870 	.word	0x20001870
 8005118:	2000190c 	.word	0x2000190c

0800511c <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005120:	4b1c      	ldr	r3, [pc, #112]	; (8005194 <ParseSnippetCommand+0x78>)
 8005122:	781a      	ldrb	r2, [r3, #0]
 8005124:	3a01      	subs	r2, #1
 8005126:	0093      	lsls	r3, r2, #2
 8005128:	189b      	adds	r3, r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4a1a      	ldr	r2, [pc, #104]	; (8005198 <ParseSnippetCommand+0x7c>)
 800512e:	18d3      	adds	r3, r2, r3
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d02c      	beq.n	8005190 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 8005136:	4b19      	ldr	r3, [pc, #100]	; (800519c <ParseSnippetCommand+0x80>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d014      	beq.n	8005168 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <ParseSnippetCommand+0x80>)
 8005140:	681d      	ldr	r5, [r3, #0]
 8005142:	782b      	ldrb	r3, [r5, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d012      	beq.n	800516e <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005148:	2113      	movs	r1, #19
 800514a:	0028      	movs	r0, r5
 800514c:	f00f f926 	bl	801439c <strchr>
 8005150:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 8005152:	d011      	beq.n	8005178 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 8005154:	1b42      	subs	r2, r0, r5
 8005156:	0029      	movs	r1, r5
 8005158:	0020      	movs	r0, r4
 800515a:	f00f f946 	bl	80143ea <strncpy>
		ptrStart =ptrEnd + 1;
 800515e:	3601      	adds	r6, #1
 8005160:	4b0e      	ldr	r3, [pc, #56]	; (800519c <ParseSnippetCommand+0x80>)
 8005162:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 8005164:	2001      	movs	r0, #1
 8005166:	e006      	b.n	8005176 <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005168:	4b0c      	ldr	r3, [pc, #48]	; (800519c <ParseSnippetCommand+0x80>)
 800516a:	6018      	str	r0, [r3, #0]
 800516c:	e7e7      	b.n	800513e <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 800516e:	4b0b      	ldr	r3, [pc, #44]	; (800519c <ParseSnippetCommand+0x80>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
		return false;
 8005174:	2000      	movs	r0, #0
}
 8005176:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005178:	0029      	movs	r1, r5
 800517a:	0020      	movs	r0, r4
 800517c:	f00f f91c 	bl	80143b8 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005180:	0020      	movs	r0, r4
 8005182:	f7fa ffc9 	bl	8000118 <strlen>
 8005186:	182d      	adds	r5, r5, r0
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <ParseSnippetCommand+0x80>)
 800518a:	601d      	str	r5, [r3, #0]
	return true;
 800518c:	2001      	movs	r0, #1
 800518e:	e7f2      	b.n	8005176 <ParseSnippetCommand+0x5a>
		return false;
 8005190:	2000      	movs	r0, #0
 8005192:	e7f0      	b.n	8005176 <ParseSnippetCommand+0x5a>
 8005194:	2000193f 	.word	0x2000193f
 8005198:	20006a28 	.word	0x20006a28
 800519c:	20001968 	.word	0x20001968

080051a0 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80051a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a2:	b083      	sub	sp, #12
 80051a4:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80051a6:	0083      	lsls	r3, r0, #2
 80051a8:	181b      	adds	r3, r3, r0
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4a3f      	ldr	r2, [pc, #252]	; (80052ac <CheckSnippetCondition+0x10c>)
 80051ae:	5c9b      	ldrb	r3, [r3, r2]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d003      	beq.n	80051bc <CheckSnippetCondition+0x1c>
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d015      	beq.n	80051e4 <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80051b8:	2000      	movs	r0, #0
 80051ba:	e011      	b.n	80051e0 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80051bc:	493b      	ldr	r1, [pc, #236]	; (80052ac <CheckSnippetCondition+0x10c>)
 80051be:	0083      	lsls	r3, r0, #2
 80051c0:	181a      	adds	r2, r3, r0
 80051c2:	0092      	lsls	r2, r2, #2
 80051c4:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80051c6:	7890      	ldrb	r0, [r2, #2]
 80051c8:	00c2      	lsls	r2, r0, #3
 80051ca:	1812      	adds	r2, r2, r0
 80051cc:	191b      	adds	r3, r3, r4
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	18cb      	adds	r3, r1, r3
 80051d2:	4937      	ldr	r1, [pc, #220]	; (80052b0 <CheckSnippetCondition+0x110>)
 80051d4:	5c50      	ldrb	r0, [r2, r1]
 80051d6:	78db      	ldrb	r3, [r3, #3]
 80051d8:	1ac0      	subs	r0, r0, r3
 80051da:	4243      	negs	r3, r0
 80051dc:	4158      	adcs	r0, r3
 80051de:	b2c0      	uxtb	r0, r0
}
 80051e0:	b003      	add	sp, #12
 80051e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80051e4:	4e31      	ldr	r6, [pc, #196]	; (80052ac <CheckSnippetCondition+0x10c>)
 80051e6:	0085      	lsls	r5, r0, #2
 80051e8:	182b      	adds	r3, r5, r0
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	18f3      	adds	r3, r6, r3
 80051ee:	78da      	ldrb	r2, [r3, #3]
 80051f0:	3a01      	subs	r2, #1
 80051f2:	0053      	lsls	r3, r2, #1
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4a2e      	ldr	r2, [pc, #184]	; (80052b4 <CheckSnippetCondition+0x114>)
 80051fa:	589b      	ldr	r3, [r3, r2]
 80051fc:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80051fe:	1829      	adds	r1, r5, r0
 8005200:	0089      	lsls	r1, r1, #2
 8005202:	3106      	adds	r1, #6
 8005204:	1989      	adds	r1, r1, r6
 8005206:	2204      	movs	r2, #4
 8005208:	a801      	add	r0, sp, #4
 800520a:	f00e fe64 	bl	8013ed6 <memcpy>
			switch(snippets[index].cond.mathOperator){
 800520e:	192d      	adds	r5, r5, r4
 8005210:	00ad      	lsls	r5, r5, #2
 8005212:	1975      	adds	r5, r6, r5
 8005214:	786b      	ldrb	r3, [r5, #1]
 8005216:	2b06      	cmp	r3, #6
 8005218:	d83f      	bhi.n	800529a <CheckSnippetCondition+0xfa>
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4a26      	ldr	r2, [pc, #152]	; (80052b8 <CheckSnippetCondition+0x118>)
 800521e:	58d3      	ldr	r3, [r2, r3]
 8005220:	469f      	mov	pc, r3
					if(flt1 == flt2)
 8005222:	1c39      	adds	r1, r7, #0
 8005224:	9801      	ldr	r0, [sp, #4]
 8005226:	f7fb f953 	bl	80004d0 <__aeabi_fcmpeq>
 800522a:	1e43      	subs	r3, r0, #1
 800522c:	4198      	sbcs	r0, r3
 800522e:	e7d7      	b.n	80051e0 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005230:	1c39      	adds	r1, r7, #0
 8005232:	9801      	ldr	r0, [sp, #4]
 8005234:	f7fb f952 	bl	80004dc <__aeabi_fcmplt>
 8005238:	1e43      	subs	r3, r0, #1
 800523a:	4198      	sbcs	r0, r3
 800523c:	e7d0      	b.n	80051e0 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 800523e:	1c39      	adds	r1, r7, #0
 8005240:	9801      	ldr	r0, [sp, #4]
 8005242:	f7fb f95f 	bl	8000504 <__aeabi_fcmpgt>
 8005246:	2800      	cmp	r0, #0
 8005248:	d029      	beq.n	800529e <CheckSnippetCondition+0xfe>
 800524a:	2100      	movs	r1, #0
 800524c:	1c38      	adds	r0, r7, #0
 800524e:	f7fb f93f 	bl	80004d0 <__aeabi_fcmpeq>
 8005252:	4243      	negs	r3, r0
 8005254:	4158      	adcs	r0, r3
 8005256:	e7c3      	b.n	80051e0 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005258:	1c39      	adds	r1, r7, #0
 800525a:	9801      	ldr	r0, [sp, #4]
 800525c:	f7fb f948 	bl	80004f0 <__aeabi_fcmple>
 8005260:	1e43      	subs	r3, r0, #1
 8005262:	4198      	sbcs	r0, r3
 8005264:	e7bc      	b.n	80051e0 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 8005266:	1c39      	adds	r1, r7, #0
 8005268:	9801      	ldr	r0, [sp, #4]
 800526a:	f7fb f955 	bl	8000518 <__aeabi_fcmpge>
 800526e:	2800      	cmp	r0, #0
 8005270:	d017      	beq.n	80052a2 <CheckSnippetCondition+0x102>
 8005272:	2100      	movs	r1, #0
 8005274:	1c38      	adds	r0, r7, #0
 8005276:	f7fb f92b 	bl	80004d0 <__aeabi_fcmpeq>
 800527a:	4243      	negs	r3, r0
 800527c:	4158      	adcs	r0, r3
 800527e:	e7af      	b.n	80051e0 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005280:	1c39      	adds	r1, r7, #0
 8005282:	9801      	ldr	r0, [sp, #4]
 8005284:	f7fb f924 	bl	80004d0 <__aeabi_fcmpeq>
 8005288:	2800      	cmp	r0, #0
 800528a:	d10c      	bne.n	80052a6 <CheckSnippetCondition+0x106>
 800528c:	2100      	movs	r1, #0
 800528e:	1c38      	adds	r0, r7, #0
 8005290:	f7fb f91e 	bl	80004d0 <__aeabi_fcmpeq>
 8005294:	4243      	negs	r3, r0
 8005296:	4158      	adcs	r0, r3
 8005298:	e7a2      	b.n	80051e0 <CheckSnippetCondition+0x40>
	return false;
 800529a:	2000      	movs	r0, #0
 800529c:	e7a0      	b.n	80051e0 <CheckSnippetCondition+0x40>
 800529e:	2000      	movs	r0, #0
 80052a0:	e79e      	b.n	80051e0 <CheckSnippetCondition+0x40>
 80052a2:	2000      	movs	r0, #0
 80052a4:	e79c      	b.n	80051e0 <CheckSnippetCondition+0x40>
 80052a6:	2000      	movs	r0, #0
 80052a8:	e79a      	b.n	80051e0 <CheckSnippetCondition+0x40>
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	20006a28 	.word	0x20006a28
 80052b0:	20002570 	.word	0x20002570
 80052b4:	200000ac 	.word	0x200000ac
 80052b8:	0801905c 	.word	0x0801905c

080052bc <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80052be:	f009 f961 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 80052c2:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80052c4:	4b1c      	ldr	r3, [pc, #112]	; (8005338 <ExecuteSnippet+0x7c>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d032      	beq.n	8005332 <ExecuteSnippet+0x76>
 80052cc:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 80052ce:	4f1b      	ldr	r7, [pc, #108]	; (800533c <ExecuteSnippet+0x80>)
 80052d0:	e01a      	b.n	8005308 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80052d2:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <ExecuteSnippet+0x84>)
 80052d4:	7818      	ldrb	r0, [r3, #0]
 80052d6:	002b      	movs	r3, r5
 80052d8:	4a1a      	ldr	r2, [pc, #104]	; (8005344 <ExecuteSnippet+0x88>)
 80052da:	2100      	movs	r1, #0
 80052dc:	f7ff fc48 	bl	8004b70 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80052e0:	0028      	movs	r0, r5
 80052e2:	f7fa ff19 	bl	8000118 <strlen>
 80052e6:	0002      	movs	r2, r0
 80052e8:	2100      	movs	r1, #0
 80052ea:	0028      	movs	r0, r5
 80052ec:	f00e fdfc 	bl	8013ee8 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 80052f0:	4914      	ldr	r1, [pc, #80]	; (8005344 <ExecuteSnippet+0x88>)
 80052f2:	68f0      	ldr	r0, [r6, #12]
 80052f4:	f7ff ff12 	bl	800511c <ParseSnippetCommand>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	d1ea      	bne.n	80052d2 <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 80052fc:	3401      	adds	r4, #1
 80052fe:	b2a4      	uxth	r4, r4
 8005300:	4b0d      	ldr	r3, [pc, #52]	; (8005338 <ExecuteSnippet+0x7c>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	42a3      	cmp	r3, r4
 8005306:	d914      	bls.n	8005332 <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 8005308:	00a3      	lsls	r3, r4, #2
 800530a:	191b      	adds	r3, r3, r4
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	7c1b      	ldrb	r3, [r3, #16]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d0f2      	beq.n	80052fc <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 8005316:	b2e0      	uxtb	r0, r4
 8005318:	f7ff ff42 	bl	80051a0 <CheckSnippetCondition>
 800531c:	2800      	cmp	r0, #0
 800531e:	d0ed      	beq.n	80052fc <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <ExecuteSnippet+0x8c>)
 8005322:	2220      	movs	r2, #32
 8005324:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005326:	00a3      	lsls	r3, r4, #2
 8005328:	191e      	adds	r6, r3, r4
 800532a:	00b6      	lsls	r6, r6, #2
 800532c:	4b03      	ldr	r3, [pc, #12]	; (800533c <ExecuteSnippet+0x80>)
 800532e:	199e      	adds	r6, r3, r6
 8005330:	e7de      	b.n	80052f0 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 8005332:	2000      	movs	r0, #0
 8005334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	2000193f 	.word	0x2000193f
 800533c:	20006a28 	.word	0x20006a28
 8005340:	2000118a 	.word	0x2000118a
 8005344:	200018d8 	.word	0x200018d8
 8005348:	2000698c 	.word	0x2000698c

0800534c <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 800534c:	2000      	movs	r0, #0
 800534e:	4770      	bx	lr

08005350 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	0005      	movs	r5, r0
 8005356:	0014      	movs	r4, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005358:	2300      	movs	r3, #0
 800535a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 800535c:	9300      	str	r3, [sp, #0]
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800535e:	aa01      	add	r2, sp, #4
 8005360:	2101      	movs	r1, #1
 8005362:	0020      	movs	r0, r4
 8005364:	f009 f912 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005368:	2300      	movs	r3, #0
 800536a:	56c3      	ldrsb	r3, [r0, r3]
 800536c:	2b70      	cmp	r3, #112	; 0x70
 800536e:	d00e      	beq.n	800538e <setBaudrateCommand+0x3e>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005370:	466a      	mov	r2, sp
 8005372:	2102      	movs	r1, #2
 8005374:	0020      	movs	r0, r4
 8005376:	f009 f909 	bl	800e58c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800537a:	f00e fb22 	bl	80139c2 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800537e:	2213      	movs	r2, #19
 8005380:	490f      	ldr	r1, [pc, #60]	; (80053c0 <setBaudrateCommand+0x70>)
 8005382:	0028      	movs	r0, r5
 8005384:	f00e fda7 	bl	8013ed6 <memcpy>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
}
 8005388:	2000      	movs	r0, #0
 800538a:	b002      	add	sp, #8
 800538c:	bd70      	pop	{r4, r5, r6, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 800538e:	3001      	adds	r0, #1
 8005390:	f00e fb17 	bl	80139c2 <atol>
 8005394:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005396:	466a      	mov	r2, sp
 8005398:	2102      	movs	r1, #2
 800539a:	0020      	movs	r0, r4
 800539c:	f009 f8f6 	bl	800e58c <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80053a0:	f00e fb0f 	bl	80139c2 <atol>
 80053a4:	0004      	movs	r4, r0
		UpdateBaudrate(port,baudrate);
 80053a6:	b2f0      	uxtb	r0, r6
 80053a8:	0021      	movs	r1, r4
 80053aa:	f008 fe9d 	bl	800e0e8 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80053ae:	23ff      	movs	r3, #255	; 0xff
 80053b0:	4033      	ands	r3, r6
 80053b2:	0022      	movs	r2, r4
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <setBaudrateCommand+0x74>)
 80053b6:	0028      	movs	r0, r5
 80053b8:	f00e ffc2 	bl	8014340 <sprintf>
 80053bc:	e7e4      	b.n	8005388 <setBaudrateCommand+0x38>
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	08019f2c 	.word	0x08019f2c
 80053c4:	08019f04 	.word	0x08019f04

080053c8 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80053c8:	b510      	push	{r4, lr}
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80053ca:	4b03      	ldr	r3, [pc, #12]	; (80053d8 <flashsizeCommand+0x10>)
 80053cc:	881a      	ldrh	r2, [r3, #0]
 80053ce:	4903      	ldr	r1, [pc, #12]	; (80053dc <flashsizeCommand+0x14>)
 80053d0:	f00e ffb6 	bl	8014340 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80053d4:	2000      	movs	r0, #0
 80053d6:	bd10      	pop	{r4, pc}
 80053d8:	1ffff7cc 	.word	0x1ffff7cc
 80053dc:	080198f8 	.word	0x080198f8

080053e0 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80053e0:	b510      	push	{r4, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	0004      	movs	r4, r0
 80053e6:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	9300      	str	r3, [sp, #0]
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80053f0:	aa01      	add	r2, sp, #4
 80053f2:	2101      	movs	r1, #1
 80053f4:	f009 f8ca 	bl	800e58c <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80053f8:	7803      	ldrb	r3, [r0, #0]
 80053fa:	3b32      	subs	r3, #50	; 0x32
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d907      	bls.n	8005410 <GetReadPrecentageCommand+0x30>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005400:	2215      	movs	r2, #21
 8005402:	490b      	ldr	r1, [pc, #44]	; (8005430 <GetReadPrecentageCommand+0x50>)
 8005404:	0020      	movs	r0, r4
 8005406:	f00e fd66 	bl	8013ed6 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800540a:	2000      	movs	r0, #0
 800540c:	b002      	add	sp, #8
 800540e:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005410:	f00e fad7 	bl	80139c2 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005414:	b2c0      	uxtb	r0, r0
 8005416:	4669      	mov	r1, sp
 8005418:	f007 fca8 	bl	800cd6c <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 800541c:	9800      	ldr	r0, [sp, #0]
 800541e:	f7fd fb81 	bl	8002b24 <__aeabi_f2d>
 8005422:	0002      	movs	r2, r0
 8005424:	000b      	movs	r3, r1
 8005426:	4903      	ldr	r1, [pc, #12]	; (8005434 <GetReadPrecentageCommand+0x54>)
 8005428:	0020      	movs	r0, r4
 800542a:	f00e ff89 	bl	8014340 <sprintf>
 800542e:	e7ec      	b.n	800540a <GetReadPrecentageCommand+0x2a>
 8005430:	080195f4 	.word	0x080195f4
 8005434:	080195d0 	.word	0x080195d0

08005438 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005438:	b510      	push	{r4, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800543e:	2300      	movs	r3, #0
 8005440:	9301      	str	r3, [sp, #4]
 8005442:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 8005444:	4669      	mov	r1, sp
 8005446:	a801      	add	r0, sp, #4
 8005448:	f007 fbd2 	bl	800cbf0 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 800544c:	a901      	add	r1, sp, #4
 800544e:	0020      	movs	r0, r4
 8005450:	f00e ffb2 	bl	80143b8 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 8005454:	9800      	ldr	r0, [sp, #0]
 8005456:	f7fd fb65 	bl	8002b24 <__aeabi_f2d>
 800545a:	0002      	movs	r2, r0
 800545c:	000b      	movs	r3, r1
 800545e:	4903      	ldr	r1, [pc, #12]	; (800546c <ReadVrefCommand+0x34>)
 8005460:	0020      	movs	r0, r4
 8005462:	f00e ff6d 	bl	8014340 <sprintf>
}
 8005466:	2000      	movs	r0, #0
 8005468:	b002      	add	sp, #8
 800546a:	bd10      	pop	{r4, pc}
 800546c:	08019640 	.word	0x08019640

08005470 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005470:	b510      	push	{r4, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 8005476:	2300      	movs	r3, #0
 8005478:	9301      	str	r3, [sp, #4]
 800547a:	9300      	str	r3, [sp, #0]
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800547c:	4669      	mov	r1, sp
 800547e:	a801      	add	r0, sp, #4
 8005480:	f007 fbb6 	bl	800cbf0 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005484:	a901      	add	r1, sp, #4
 8005486:	0020      	movs	r0, r4
 8005488:	f00e ff96 	bl	80143b8 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 800548c:	9801      	ldr	r0, [sp, #4]
 800548e:	f7fd fb49 	bl	8002b24 <__aeabi_f2d>
 8005492:	0002      	movs	r2, r0
 8005494:	000b      	movs	r3, r1
 8005496:	4903      	ldr	r1, [pc, #12]	; (80054a4 <ReadTempCommand+0x34>)
 8005498:	0020      	movs	r0, r4
 800549a:	f00e ff51 	bl	8014340 <sprintf>
}
 800549e:	2000      	movs	r0, #0
 80054a0:	b002      	add	sp, #8
 80054a2:	bd10      	pop	{r4, pc}
 80054a4:	0801960c 	.word	0x0801960c

080054a8 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80054a8:	b570      	push	{r4, r5, r6, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	0005      	movs	r5, r0
 80054ae:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80054b4:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80054ba:	aa03      	add	r2, sp, #12
 80054bc:	2101      	movs	r1, #1
 80054be:	0030      	movs	r0, r6
 80054c0:	f009 f864 	bl	800e58c <FreeRTOS_CLIGetParameter>
 80054c4:	0004      	movs	r4, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80054c6:	aa02      	add	r2, sp, #8
 80054c8:	2102      	movs	r1, #2
 80054ca:	0030      	movs	r0, r6
 80054cc:	f009 f85e 	bl	800e58c <FreeRTOS_CLIGetParameter>
 80054d0:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 80054d2:	7823      	ldrb	r3, [r4, #0]
 80054d4:	3b32      	subs	r3, #50	; 0x32
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d907      	bls.n	80054ea <ADCReadCommand+0x42>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 80054da:	2215      	movs	r2, #21
 80054dc:	4919      	ldr	r1, [pc, #100]	; (8005544 <ADCReadCommand+0x9c>)
 80054de:	0028      	movs	r0, r5
 80054e0:	f00e fcf9 	bl	8013ed6 <memcpy>
}
 80054e4:	2000      	movs	r0, #0
 80054e6:	b004      	add	sp, #16
 80054e8:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 80054ea:	0020      	movs	r0, r4
 80054ec:	f00e fa69 	bl	80139c2 <atol>
 80054f0:	b2c4      	uxtb	r4, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 80054f2:	4915      	ldr	r1, [pc, #84]	; (8005548 <ADCReadCommand+0xa0>)
 80054f4:	0030      	movs	r0, r6
 80054f6:	f7fa fe05 	bl	8000104 <strcmp>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d005      	beq.n	800550a <ADCReadCommand+0x62>
 80054fe:	4913      	ldr	r1, [pc, #76]	; (800554c <ADCReadCommand+0xa4>)
 8005500:	0030      	movs	r0, r6
 8005502:	f7fa fdff 	bl	8000104 <strcmp>
 8005506:	2800      	cmp	r0, #0
 8005508:	d116      	bne.n	8005538 <ADCReadCommand+0x90>
			ADCSelectChannel(ADCports,ADC_Side);
 800550a:	4e0f      	ldr	r6, [pc, #60]	; (8005548 <ADCReadCommand+0xa0>)
 800550c:	0031      	movs	r1, r6
 800550e:	0020      	movs	r0, r4
 8005510:	f007 fd0e 	bl	800cf30 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 8005514:	aa01      	add	r2, sp, #4
 8005516:	0031      	movs	r1, r6
 8005518:	0020      	movs	r0, r4
 800551a:	f007 fd3b 	bl	800cf94 <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 800551e:	a901      	add	r1, sp, #4
 8005520:	0028      	movs	r0, r5
 8005522:	f00e ff49 	bl	80143b8 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 8005526:	9801      	ldr	r0, [sp, #4]
 8005528:	f7fb f84a 	bl	80005c0 <__aeabi_f2uiz>
 800552c:	b282      	uxth	r2, r0
 800552e:	4908      	ldr	r1, [pc, #32]	; (8005550 <ADCReadCommand+0xa8>)
 8005530:	0028      	movs	r0, r5
 8005532:	f00e ff05 	bl	8014340 <sprintf>
 8005536:	e7d5      	b.n	80054e4 <ADCReadCommand+0x3c>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005538:	2212      	movs	r2, #18
 800553a:	4906      	ldr	r1, [pc, #24]	; (8005554 <ADCReadCommand+0xac>)
 800553c:	0028      	movs	r0, r5
 800553e:	f00e fcca 	bl	8013ed6 <memcpy>
 8005542:	e7cf      	b.n	80054e4 <ADCReadCommand+0x3c>
 8005544:	080195f4 	.word	0x080195f4
 8005548:	08019580 	.word	0x08019580
 800554c:	08019584 	.word	0x08019584
 8005550:	0801958c 	.word	0x0801958c
 8005554:	0801959c 	.word	0x0801959c

08005558 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555a:	46d6      	mov	lr, sl
 800555c:	b500      	push	{lr}
 800555e:	b086      	sub	sp, #24
 8005560:	9003      	str	r0, [sp, #12]
 8005562:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005564:	2300      	movs	r3, #0
 8005566:	9305      	str	r3, [sp, #20]
	char WriteVaule[1] ="H";
 8005568:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <testportCommand+0x198>)
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	ab04      	add	r3, sp, #16
 800556e:	701a      	strb	r2, [r3, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005570:	aa05      	add	r2, sp, #20
 8005572:	2101      	movs	r1, #1
 8005574:	f009 f80a 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8005578:	0004      	movs	r4, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 800557a:	495e      	ldr	r1, [pc, #376]	; (80056f4 <testportCommand+0x19c>)
 800557c:	f7fa fdc2 	bl	8000104 <strcmp>
 8005580:	2800      	cmp	r0, #0
 8005582:	d176      	bne.n	8005672 <testportCommand+0x11a>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 8005584:	4b5c      	ldr	r3, [pc, #368]	; (80056f8 <testportCommand+0x1a0>)
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	4b5c      	ldr	r3, [pc, #368]	; (80056fc <testportCommand+0x1a4>)
 800558a:	189b      	adds	r3, r3, r2
 800558c:	3b01      	subs	r3, #1
 800558e:	781e      	ldrb	r6, [r3, #0]
 8005590:	2401      	movs	r4, #1
			if(PcPort != ports){
 8005592:	4d59      	ldr	r5, [pc, #356]	; (80056f8 <testportCommand+0x1a0>)
 8005594:	e040      	b.n	8005618 <testportCommand+0xc0>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 8005596:	0022      	movs	r2, r4
 8005598:	4959      	ldr	r1, [pc, #356]	; (8005700 <testportCommand+0x1a8>)
 800559a:	9f03      	ldr	r7, [sp, #12]
 800559c:	0038      	movs	r0, r7
 800559e:	f00e fecf 	bl	8014340 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80055a2:	0038      	movs	r0, r7
 80055a4:	f7fa fdb8 	bl	8000118 <strlen>
 80055a8:	b282      	uxth	r2, r0
 80055aa:	4b53      	ldr	r3, [pc, #332]	; (80056f8 <testportCommand+0x1a0>)
 80055ac:	7818      	ldrb	r0, [r3, #0]
 80055ae:	2364      	movs	r3, #100	; 0x64
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	3b5a      	subs	r3, #90	; 0x5a
 80055b4:	0039      	movs	r1, r7
 80055b6:	f008 fd4d 	bl	800e054 <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 80055ba:	2254      	movs	r2, #84	; 0x54
 80055bc:	4951      	ldr	r1, [pc, #324]	; (8005704 <testportCommand+0x1ac>)
 80055be:	9f03      	ldr	r7, [sp, #12]
 80055c0:	0038      	movs	r0, r7
 80055c2:	f00e fc88 	bl	8013ed6 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80055c6:	0038      	movs	r0, r7
 80055c8:	f7fa fda6 	bl	8000118 <strlen>
 80055cc:	b282      	uxth	r2, r0
 80055ce:	4b4a      	ldr	r3, [pc, #296]	; (80056f8 <testportCommand+0x1a0>)
 80055d0:	7818      	ldrb	r0, [r3, #0]
 80055d2:	2364      	movs	r3, #100	; 0x64
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	3b5a      	subs	r3, #90	; 0x5a
 80055d8:	0039      	movs	r1, r7
 80055da:	f008 fd3b 	bl	800e054 <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80055de:	3601      	adds	r6, #1
 80055e0:	4b45      	ldr	r3, [pc, #276]	; (80056f8 <testportCommand+0x1a0>)
 80055e2:	781a      	ldrb	r2, [r3, #0]
 80055e4:	3a01      	subs	r2, #1
 80055e6:	0053      	lsls	r3, r2, #1
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	019b      	lsls	r3, r3, #6
 80055ec:	4a46      	ldr	r2, [pc, #280]	; (8005708 <testportCommand+0x1b0>)
 80055ee:	18d3      	adds	r3, r2, r3
 80055f0:	5d9b      	ldrb	r3, [r3, r6]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10d      	bne.n	8005612 <testportCommand+0xba>
 80055f6:	4692      	mov	sl, r2
 80055f8:	4f3f      	ldr	r7, [pc, #252]	; (80056f8 <testportCommand+0x1a0>)
					Delay_ms(1);
 80055fa:	2001      	movs	r0, #1
 80055fc:	f00a fe02 	bl	8010204 <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005600:	783a      	ldrb	r2, [r7, #0]
 8005602:	3a01      	subs	r2, #1
 8005604:	0053      	lsls	r3, r2, #1
 8005606:	189b      	adds	r3, r3, r2
 8005608:	019b      	lsls	r3, r3, #6
 800560a:	4453      	add	r3, sl
 800560c:	5d9b      	ldrb	r3, [r3, r6]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f3      	beq.n	80055fa <testportCommand+0xa2>
 8005612:	3401      	adds	r4, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005614:	2c07      	cmp	r4, #7
 8005616:	d035      	beq.n	8005684 <testportCommand+0x12c>
 8005618:	b2e7      	uxtb	r7, r4
			if(PcPort != ports){
 800561a:	782b      	ldrb	r3, [r5, #0]
 800561c:	42bb      	cmp	r3, r7
 800561e:	d0f8      	beq.n	8005612 <testportCommand+0xba>
				WriteVaule[0] =rand();
 8005620:	f00e fc7a 	bl	8013f18 <rand>
 8005624:	ab02      	add	r3, sp, #8
 8005626:	7218      	strb	r0, [r3, #8]
				writePxMutex(ports,WriteVaule,1,10,100);
 8005628:	2364      	movs	r3, #100	; 0x64
 800562a:	9300      	str	r3, [sp, #0]
 800562c:	3b5a      	subs	r3, #90	; 0x5a
 800562e:	2201      	movs	r2, #1
 8005630:	a904      	add	r1, sp, #16
 8005632:	0038      	movs	r0, r7
 8005634:	f008 fd0e 	bl	800e054 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 8005638:	0038      	movs	r0, r7
 800563a:	f008 fce9 	bl	800e010 <GetUart>
 800563e:	6803      	ldr	r3, [r0, #0]
 8005640:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005642:	aa02      	add	r2, sp, #8
 8005644:	7a12      	ldrb	r2, [r2, #8]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	429a      	cmp	r2, r3
 800564a:	d0a4      	beq.n	8005596 <testportCommand+0x3e>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 800564c:	0022      	movs	r2, r4
 800564e:	492f      	ldr	r1, [pc, #188]	; (800570c <testportCommand+0x1b4>)
 8005650:	9f03      	ldr	r7, [sp, #12]
 8005652:	0038      	movs	r0, r7
 8005654:	f00e fe74 	bl	8014340 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005658:	0038      	movs	r0, r7
 800565a:	f7fa fd5d 	bl	8000118 <strlen>
 800565e:	b282      	uxth	r2, r0
 8005660:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <testportCommand+0x1a0>)
 8005662:	7818      	ldrb	r0, [r3, #0]
 8005664:	2364      	movs	r3, #100	; 0x64
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	3b5a      	subs	r3, #90	; 0x5a
 800566a:	0039      	movs	r1, r7
 800566c:	f008 fcf2 	bl	800e054 <writePxMutex>
 8005670:	e7a3      	b.n	80055ba <testportCommand+0x62>
	else if(pcParameterString1[0] == 'p'){
 8005672:	2300      	movs	r3, #0
 8005674:	56e3      	ldrsb	r3, [r4, r3]
 8005676:	2b70      	cmp	r3, #112	; 0x70
 8005678:	d009      	beq.n	800568e <testportCommand+0x136>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800567a:	220f      	movs	r2, #15
 800567c:	4924      	ldr	r1, [pc, #144]	; (8005710 <testportCommand+0x1b8>)
 800567e:	9803      	ldr	r0, [sp, #12]
 8005680:	f00e fc29 	bl	8013ed6 <memcpy>
}
 8005684:	2000      	movs	r0, #0
 8005686:	b006      	add	sp, #24
 8005688:	bc04      	pop	{r2}
 800568a:	4692      	mov	sl, r2
 800568c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 800568e:	1c60      	adds	r0, r4, #1
 8005690:	f00e f997 	bl	80139c2 <atol>
 8005694:	0004      	movs	r4, r0
 8005696:	b2c6      	uxtb	r6, r0
		if(portt > 0 && portt <= NumOfPorts){
 8005698:	1e73      	subs	r3, r6, #1
 800569a:	2b05      	cmp	r3, #5
 800569c:	d905      	bls.n	80056aa <testportCommand+0x152>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 800569e:	221b      	movs	r2, #27
 80056a0:	491c      	ldr	r1, [pc, #112]	; (8005714 <testportCommand+0x1bc>)
 80056a2:	9803      	ldr	r0, [sp, #12]
 80056a4:	f00e fc17 	bl	8013ed6 <memcpy>
 80056a8:	e7ec      	b.n	8005684 <testportCommand+0x12c>
				WriteVaule[0] =rand();
 80056aa:	f00e fc35 	bl	8013f18 <rand>
 80056ae:	af04      	add	r7, sp, #16
 80056b0:	7038      	strb	r0, [r7, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80056b2:	2364      	movs	r3, #100	; 0x64
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	3b32      	subs	r3, #50	; 0x32
 80056b8:	2201      	movs	r2, #1
 80056ba:	0039      	movs	r1, r7
 80056bc:	0030      	movs	r0, r6
 80056be:	f008 fcc9 	bl	800e054 <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 80056c2:	2000      	movs	r0, #0
 80056c4:	f008 fca4 	bl	800e010 <GetUart>
 80056c8:	6803      	ldr	r3, [r0, #0]
 80056ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 80056cc:	783a      	ldrb	r2, [r7, #0]
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d006      	beq.n	80056e2 <testportCommand+0x18a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 80056d4:	22ff      	movs	r2, #255	; 0xff
 80056d6:	4022      	ands	r2, r4
 80056d8:	490c      	ldr	r1, [pc, #48]	; (800570c <testportCommand+0x1b4>)
 80056da:	9803      	ldr	r0, [sp, #12]
 80056dc:	f00e fe30 	bl	8014340 <sprintf>
	return pdFALSE;
 80056e0:	e7d0      	b.n	8005684 <testportCommand+0x12c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 80056e2:	22ff      	movs	r2, #255	; 0xff
 80056e4:	4022      	ands	r2, r4
 80056e6:	4906      	ldr	r1, [pc, #24]	; (8005700 <testportCommand+0x1a8>)
 80056e8:	9803      	ldr	r0, [sp, #12]
 80056ea:	f00e fe29 	bl	8014340 <sprintf>
 80056ee:	e7c9      	b.n	8005684 <testportCommand+0x12c>
 80056f0:	08018740 	.word	0x08018740
 80056f4:	08018a9c 	.word	0x08018a9c
 80056f8:	2000118a 	.word	0x2000118a
 80056fc:	20001e78 	.word	0x20001e78
 8005700:	0801af74 	.word	0x0801af74
 8005704:	0801afa4 	.word	0x0801afa4
 8005708:	200019f8 	.word	0x200019f8
 800570c:	0801af90 	.word	0x0801af90
 8005710:	0801aff8 	.word	0x0801aff8
 8005714:	0801b008 	.word	0x0801b008

08005718 <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	0005      	movs	r5, r0
 800571e:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005720:	2300      	movs	r3, #0
 8005722:	9301      	str	r3, [sp, #4]
 8005724:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005726:	aa01      	add	r2, sp, #4
 8005728:	2101      	movs	r1, #1
 800572a:	0020      	movs	r0, r4
 800572c:	f008 ff2e 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005730:	2300      	movs	r3, #0
 8005732:	56c3      	ldrsb	r3, [r0, r3]
 8005734:	2b70      	cmp	r3, #112	; 0x70
 8005736:	d00e      	beq.n	8005756 <unbridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005738:	466a      	mov	r2, sp
 800573a:	2102      	movs	r1, #2
 800573c:	0020      	movs	r0, r4
 800573e:	f008 ff25 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005742:	2300      	movs	r3, #0
 8005744:	56c3      	ldrsb	r3, [r0, r3]
 8005746:	2b70      	cmp	r3, #112	; 0x70
 8005748:	d01d      	beq.n	8005786 <unbridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800574a:	220f      	movs	r2, #15
 800574c:	4919      	ldr	r1, [pc, #100]	; (80057b4 <unbridgeCommand+0x9c>)
 800574e:	0028      	movs	r0, r5
 8005750:	f00e fbc1 	bl	8013ed6 <memcpy>
 8005754:	e014      	b.n	8005780 <unbridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005756:	3001      	adds	r0, #1
 8005758:	f00e f933 	bl	80139c2 <atol>
 800575c:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800575e:	466a      	mov	r2, sp
 8005760:	2102      	movs	r1, #2
 8005762:	0020      	movs	r0, r4
 8005764:	f008 ff12 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005768:	2300      	movs	r3, #0
 800576a:	56c3      	ldrsb	r3, [r0, r3]
 800576c:	2b70      	cmp	r3, #112	; 0x70
 800576e:	d00e      	beq.n	800578e <unbridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 8005770:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005772:	2867      	cmp	r0, #103	; 0x67
 8005774:	d0e9      	beq.n	800574a <unbridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005776:	2219      	movs	r2, #25
 8005778:	490f      	ldr	r1, [pc, #60]	; (80057b8 <unbridgeCommand+0xa0>)
 800577a:	0028      	movs	r0, r5
 800577c:	f00e fbab 	bl	8013ed6 <memcpy>
}
 8005780:	2000      	movs	r0, #0
 8005782:	b002      	add	sp, #8
 8005784:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005786:	3001      	adds	r0, #1
 8005788:	f00e f91b 	bl	80139c2 <atol>
 800578c:	e7dd      	b.n	800574a <unbridgeCommand+0x32>
 800578e:	3001      	adds	r0, #1
 8005790:	f00e f917 	bl	80139c2 <atol>
 8005794:	0004      	movs	r4, r0
		result =Unbridge(port1,port2);
 8005796:	b2c1      	uxtb	r1, r0
 8005798:	b2f0      	uxtb	r0, r6
 800579a:	f7fe feed 	bl	8004578 <Unbridge>
	if(result == BOS_OK)
 800579e:	2800      	cmp	r0, #0
 80057a0:	d1e7      	bne.n	8005772 <unbridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 80057a2:	22ff      	movs	r2, #255	; 0xff
 80057a4:	0023      	movs	r3, r4
 80057a6:	4013      	ands	r3, r2
 80057a8:	4032      	ands	r2, r6
 80057aa:	4904      	ldr	r1, [pc, #16]	; (80057bc <unbridgeCommand+0xa4>)
 80057ac:	0028      	movs	r0, r5
 80057ae:	f00e fdc7 	bl	8014340 <sprintf>
 80057b2:	e7e5      	b.n	8005780 <unbridgeCommand+0x68>
 80057b4:	0801aff8 	.word	0x0801aff8
 80057b8:	0801b0c0 	.word	0x0801b0c0
 80057bc:	0801b0a0 	.word	0x0801b0a0

080057c0 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	0005      	movs	r5, r0
 80057c6:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	9300      	str	r3, [sp, #0]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057ce:	aa01      	add	r2, sp, #4
 80057d0:	2101      	movs	r1, #1
 80057d2:	0020      	movs	r0, r4
 80057d4:	f008 feda 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 80057d8:	2300      	movs	r3, #0
 80057da:	56c3      	ldrsb	r3, [r0, r3]
 80057dc:	2b70      	cmp	r3, #112	; 0x70
 80057de:	d00e      	beq.n	80057fe <bridgeCommand+0x3e>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80057e0:	466a      	mov	r2, sp
 80057e2:	2102      	movs	r1, #2
 80057e4:	0020      	movs	r0, r4
 80057e6:	f008 fed1 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80057ea:	2300      	movs	r3, #0
 80057ec:	56c3      	ldrsb	r3, [r0, r3]
 80057ee:	2b70      	cmp	r3, #112	; 0x70
 80057f0:	d01d      	beq.n	800582e <bridgeCommand+0x6e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80057f2:	220f      	movs	r2, #15
 80057f4:	4919      	ldr	r1, [pc, #100]	; (800585c <bridgeCommand+0x9c>)
 80057f6:	0028      	movs	r0, r5
 80057f8:	f00e fb6d 	bl	8013ed6 <memcpy>
 80057fc:	e014      	b.n	8005828 <bridgeCommand+0x68>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80057fe:	3001      	adds	r0, #1
 8005800:	f00e f8df 	bl	80139c2 <atol>
 8005804:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005806:	466a      	mov	r2, sp
 8005808:	2102      	movs	r1, #2
 800580a:	0020      	movs	r0, r4
 800580c:	f008 febe 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005810:	2300      	movs	r3, #0
 8005812:	56c3      	ldrsb	r3, [r0, r3]
 8005814:	2b70      	cmp	r3, #112	; 0x70
 8005816:	d00e      	beq.n	8005836 <bridgeCommand+0x76>
		result =BOS_ERR_WrongParam;
 8005818:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 800581a:	2867      	cmp	r0, #103	; 0x67
 800581c:	d0e9      	beq.n	80057f2 <bridgeCommand+0x32>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 800581e:	2217      	movs	r2, #23
 8005820:	490f      	ldr	r1, [pc, #60]	; (8005860 <bridgeCommand+0xa0>)
 8005822:	0028      	movs	r0, r5
 8005824:	f00e fb57 	bl	8013ed6 <memcpy>
}
 8005828:	2000      	movs	r0, #0
 800582a:	b002      	add	sp, #8
 800582c:	bd70      	pop	{r4, r5, r6, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 800582e:	3001      	adds	r0, #1
 8005830:	f00e f8c7 	bl	80139c2 <atol>
 8005834:	e7dd      	b.n	80057f2 <bridgeCommand+0x32>
 8005836:	3001      	adds	r0, #1
 8005838:	f00e f8c3 	bl	80139c2 <atol>
 800583c:	0004      	movs	r4, r0
		result =Bridge(port1,port2);
 800583e:	b2c1      	uxtb	r1, r0
 8005840:	b2f0      	uxtb	r0, r6
 8005842:	f7fe fe85 	bl	8004550 <Bridge>
	if(result == BOS_OK)
 8005846:	2800      	cmp	r0, #0
 8005848:	d1e7      	bne.n	800581a <bridgeCommand+0x5a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 800584a:	22ff      	movs	r2, #255	; 0xff
 800584c:	0023      	movs	r3, r4
 800584e:	4013      	ands	r3, r2
 8005850:	4032      	ands	r2, r6
 8005852:	4904      	ldr	r1, [pc, #16]	; (8005864 <bridgeCommand+0xa4>)
 8005854:	0028      	movs	r0, r5
 8005856:	f00e fd73 	bl	8014340 <sprintf>
 800585a:	e7e5      	b.n	8005828 <bridgeCommand+0x68>
 800585c:	0801aff8 	.word	0x0801aff8
 8005860:	08019794 	.word	0x08019794
 8005864:	08019770 	.word	0x08019770

08005868 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586a:	46de      	mov	lr, fp
 800586c:	464f      	mov	r7, r9
 800586e:	4646      	mov	r6, r8
 8005870:	b5c0      	push	{r6, r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	9001      	str	r0, [sp, #4]
 8005876:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005878:	2300      	movs	r3, #0
 800587a:	9303      	str	r3, [sp, #12]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800587c:	aa03      	add	r2, sp, #12
 800587e:	2101      	movs	r1, #1
 8005880:	f008 fe84 	bl	800e58c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005884:	f00e f897 	bl	80139b6 <atoi>
 8005888:	0004      	movs	r4, r0
 800588a:	b2c5      	uxtb	r5, r0
	if(!index || index > numOfRecordedSnippets)
 800588c:	2d00      	cmp	r5, #0
 800588e:	d003      	beq.n	8005898 <delSnipCommand+0x30>
 8005890:	4b31      	ldr	r3, [pc, #196]	; (8005958 <delSnipCommand+0xf0>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	42ab      	cmp	r3, r5
 8005896:	d20b      	bcs.n	80058b0 <delSnipCommand+0x48>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005898:	2223      	movs	r2, #35	; 0x23
 800589a:	4930      	ldr	r1, [pc, #192]	; (800595c <delSnipCommand+0xf4>)
 800589c:	9801      	ldr	r0, [sp, #4]
 800589e:	f00e fb1a 	bl	8013ed6 <memcpy>
}
 80058a2:	2000      	movs	r0, #0
 80058a4:	b004      	add	sp, #16
 80058a6:	bc1c      	pop	{r2, r3, r4}
 80058a8:	4690      	mov	r8, r2
 80058aa:	4699      	mov	r9, r3
 80058ac:	46a3      	mov	fp, r4
 80058ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 80058b0:	27ff      	movs	r7, #255	; 0xff
 80058b2:	4007      	ands	r7, r0
 80058b4:	3f01      	subs	r7, #1
 80058b6:	4b2a      	ldr	r3, [pc, #168]	; (8005960 <delSnipCommand+0xf8>)
 80058b8:	4699      	mov	r9, r3
 80058ba:	00bb      	lsls	r3, r7, #2
 80058bc:	4698      	mov	r8, r3
 80058be:	19db      	adds	r3, r3, r7
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	2600      	movs	r6, #0
 80058c4:	464a      	mov	r2, r9
 80058c6:	549e      	strb	r6, [r3, r2]
		snippets[index - 1].cond.mathOperator =0;
 80058c8:	4643      	mov	r3, r8
 80058ca:	19db      	adds	r3, r3, r7
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	444b      	add	r3, r9
 80058d0:	469b      	mov	fp, r3
 80058d2:	705e      	strb	r6, [r3, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 80058d4:	4643      	mov	r3, r8
 80058d6:	19d8      	adds	r0, r3, r7
 80058d8:	0080      	lsls	r0, r0, #2
 80058da:	3002      	adds	r0, #2
 80058dc:	4448      	add	r0, r9
 80058de:	2204      	movs	r2, #4
 80058e0:	2100      	movs	r1, #0
 80058e2:	f00e fb01 	bl	8013ee8 <memset>
		snippets[index - 1].state = false;
 80058e6:	465b      	mov	r3, fp
 80058e8:	741e      	strb	r6, [r3, #16]
		free(snippets[index - 1].cmd);
 80058ea:	68d8      	ldr	r0, [r3, #12]
 80058ec:	f00e f8b0 	bl	8013a50 <free>
		snippets[index - 1].cmd = NULL;
 80058f0:	465f      	mov	r7, fp
 80058f2:	60fe      	str	r6, [r7, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 80058f4:	4b18      	ldr	r3, [pc, #96]	; (8005958 <delSnipCommand+0xf0>)
 80058f6:	781f      	ldrb	r7, [r3, #0]
 80058f8:	42bd      	cmp	r5, r7
 80058fa:	d222      	bcs.n	8005942 <delSnipCommand+0xda>
 80058fc:	23ff      	movs	r3, #255	; 0xff
 80058fe:	4023      	ands	r3, r4
 8005900:	009c      	lsls	r4, r3, #2
 8005902:	18e4      	adds	r4, r4, r3
 8005904:	00a4      	lsls	r4, r4, #2
 8005906:	4916      	ldr	r1, [pc, #88]	; (8005960 <delSnipCommand+0xf8>)
 8005908:	1864      	adds	r4, r4, r1
 800590a:	1e7a      	subs	r2, r7, #1
 800590c:	1b52      	subs	r2, r2, r5
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	18d3      	adds	r3, r2, r3
 8005912:	009d      	lsls	r5, r3, #2
 8005914:	18ed      	adds	r5, r5, r3
 8005916:	00ad      	lsls	r5, r5, #2
 8005918:	3114      	adds	r1, #20
 800591a:	186d      	adds	r5, r5, r1
 800591c:	e002      	b.n	8005924 <delSnipCommand+0xbc>
 800591e:	3414      	adds	r4, #20
 8005920:	42ac      	cmp	r4, r5
 8005922:	d00e      	beq.n	8005942 <delSnipCommand+0xda>
			if(snippets[s].cond.conditionType){
 8005924:	7823      	ldrb	r3, [r4, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f9      	beq.n	800591e <delSnipCommand+0xb6>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 800592a:	2214      	movs	r2, #20
 800592c:	0021      	movs	r1, r4
 800592e:	0020      	movs	r0, r4
 8005930:	3814      	subs	r0, #20
 8005932:	f00e fad0 	bl	8013ed6 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005936:	2214      	movs	r2, #20
 8005938:	2100      	movs	r1, #0
 800593a:	0020      	movs	r0, r4
 800593c:	f00e fad4 	bl	8013ee8 <memset>
 8005940:	e7ed      	b.n	800591e <delSnipCommand+0xb6>
		--numOfRecordedSnippets;
 8005942:	3f01      	subs	r7, #1
 8005944:	4b04      	ldr	r3, [pc, #16]	; (8005958 <delSnipCommand+0xf0>)
 8005946:	701f      	strb	r7, [r3, #0]
		SaveToRO();
 8005948:	f005 f938 	bl	800abbc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 800594c:	2236      	movs	r2, #54	; 0x36
 800594e:	4905      	ldr	r1, [pc, #20]	; (8005964 <delSnipCommand+0xfc>)
 8005950:	9801      	ldr	r0, [sp, #4]
 8005952:	f00e fac0 	bl	8013ed6 <memcpy>
 8005956:	e7a4      	b.n	80058a2 <delSnipCommand+0x3a>
 8005958:	2000193f 	.word	0x2000193f
 800595c:	080198b4 	.word	0x080198b4
 8005960:	20006a28 	.word	0x20006a28
 8005964:	0801987c 	.word	0x0801987c

08005968 <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005968:	b510      	push	{r4, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	0004      	movs	r4, r0
 800596e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005970:	2300      	movs	r3, #0
 8005972:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005974:	aa01      	add	r2, sp, #4
 8005976:	2101      	movs	r1, #1
 8005978:	f008 fe08 	bl	800e58c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 800597c:	f00e f81b 	bl	80139b6 <atoi>
 8005980:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <pauseSnipCommand+0x26>
 8005986:	4a0f      	ldr	r2, [pc, #60]	; (80059c4 <pauseSnipCommand+0x5c>)
 8005988:	7812      	ldrb	r2, [r2, #0]
 800598a:	429a      	cmp	r2, r3
 800598c:	d207      	bcs.n	800599e <pauseSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 800598e:	2223      	movs	r2, #35	; 0x23
 8005990:	490d      	ldr	r1, [pc, #52]	; (80059c8 <pauseSnipCommand+0x60>)
 8005992:	0020      	movs	r0, r4
 8005994:	f00e fa9f 	bl	8013ed6 <memcpy>
}
 8005998:	2000      	movs	r0, #0
 800599a:	b002      	add	sp, #8
 800599c:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 800599e:	23ff      	movs	r3, #255	; 0xff
 80059a0:	4018      	ands	r0, r3
 80059a2:	3801      	subs	r0, #1
 80059a4:	0083      	lsls	r3, r0, #2
 80059a6:	1818      	adds	r0, r3, r0
 80059a8:	0080      	lsls	r0, r0, #2
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <pauseSnipCommand+0x64>)
 80059ac:	1818      	adds	r0, r3, r0
 80059ae:	2300      	movs	r3, #0
 80059b0:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 80059b2:	f005 f903 	bl	800abbc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 80059b6:	2235      	movs	r2, #53	; 0x35
 80059b8:	4905      	ldr	r1, [pc, #20]	; (80059d0 <pauseSnipCommand+0x68>)
 80059ba:	0020      	movs	r0, r4
 80059bc:	f00e fa8b 	bl	8013ed6 <memcpy>
 80059c0:	e7ea      	b.n	8005998 <pauseSnipCommand+0x30>
 80059c2:	46c0      	nop			; (mov r8, r8)
 80059c4:	2000193f 	.word	0x2000193f
 80059c8:	080198b4 	.word	0x080198b4
 80059cc:	20006a28 	.word	0x20006a28
 80059d0:	08019cc4 	.word	0x08019cc4

080059d4 <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80059d4:	b510      	push	{r4, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	0004      	movs	r4, r0
 80059da:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80059dc:	2300      	movs	r3, #0
 80059de:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80059e0:	aa01      	add	r2, sp, #4
 80059e2:	2101      	movs	r1, #1
 80059e4:	f008 fdd2 	bl	800e58c <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 80059e8:	f00d ffe5 	bl	80139b6 <atoi>
 80059ec:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <actSnipCommand+0x26>
 80059f2:	4a0f      	ldr	r2, [pc, #60]	; (8005a30 <actSnipCommand+0x5c>)
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d207      	bcs.n	8005a0a <actSnipCommand+0x36>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059fa:	2223      	movs	r2, #35	; 0x23
 80059fc:	490d      	ldr	r1, [pc, #52]	; (8005a34 <actSnipCommand+0x60>)
 80059fe:	0020      	movs	r0, r4
 8005a00:	f00e fa69 	bl	8013ed6 <memcpy>
}
 8005a04:	2000      	movs	r0, #0
 8005a06:	b002      	add	sp, #8
 8005a08:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005a0a:	23ff      	movs	r3, #255	; 0xff
 8005a0c:	4018      	ands	r0, r3
 8005a0e:	3801      	subs	r0, #1
 8005a10:	0083      	lsls	r3, r0, #2
 8005a12:	1818      	adds	r0, r3, r0
 8005a14:	0080      	lsls	r0, r0, #2
 8005a16:	4b08      	ldr	r3, [pc, #32]	; (8005a38 <actSnipCommand+0x64>)
 8005a18:	1818      	adds	r0, r3, r0
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005a1e:	f005 f8cd 	bl	800abbc <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005a22:	2238      	movs	r2, #56	; 0x38
 8005a24:	4905      	ldr	r1, [pc, #20]	; (8005a3c <actSnipCommand+0x68>)
 8005a26:	0020      	movs	r0, r4
 8005a28:	f00e fa55 	bl	8013ed6 <memcpy>
 8005a2c:	e7ea      	b.n	8005a04 <actSnipCommand+0x30>
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	2000193f 	.word	0x2000193f
 8005a34:	080198b4 	.word	0x080198b4
 8005a38:	20006a28 	.word	0x20006a28
 8005a3c:	08019678 	.word	0x08019678

08005a40 <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a42:	46de      	mov	lr, fp
 8005a44:	4657      	mov	r7, sl
 8005a46:	464e      	mov	r6, r9
 8005a48:	4645      	mov	r5, r8
 8005a4a:	b5e0      	push	{r5, r6, r7, lr}
 8005a4c:	b08b      	sub	sp, #44	; 0x2c
 8005a4e:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005a50:	aa06      	add	r2, sp, #24
 8005a52:	4b7c      	ldr	r3, [pc, #496]	; (8005c44 <snipCommand+0x204>)
 8005a54:	3304      	adds	r3, #4
 8005a56:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005a58:	c223      	stmia	r2!, {r0, r1, r5}
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	8013      	strh	r3, [r2, #0]
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005a5e:	4b7a      	ldr	r3, [pc, #488]	; (8005c48 <snipCommand+0x208>)
 8005a60:	7818      	ldrb	r0, [r3, #0]
 8005a62:	2301      	movs	r3, #1
 8005a64:	425b      	negs	r3, r3
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	3333      	adds	r3, #51	; 0x33
 8005a6a:	2237      	movs	r2, #55	; 0x37
 8005a6c:	4977      	ldr	r1, [pc, #476]	; (8005c4c <snipCommand+0x20c>)
 8005a6e:	f008 faf1 	bl	800e054 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005a72:	4b77      	ldr	r3, [pc, #476]	; (8005c50 <snipCommand+0x210>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d100      	bne.n	8005a7c <snipCommand+0x3c>
 8005a7a:	e0d5      	b.n	8005c28 <snipCommand+0x1e8>
 8005a7c:	2600      	movs	r6, #0
		if(snippets[s].cond.conditionType)
 8005a7e:	4b75      	ldr	r3, [pc, #468]	; (8005c54 <snipCommand+0x214>)
 8005a80:	4699      	mov	r9, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005a82:	4d75      	ldr	r5, [pc, #468]	; (8005c58 <snipCommand+0x218>)
 8005a84:	e0bd      	b.n	8005c02 <snipCommand+0x1c2>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005a86:	4b73      	ldr	r3, [pc, #460]	; (8005c54 <snipCommand+0x214>)
 8005a88:	469b      	mov	fp, r3
 8005a8a:	00b3      	lsls	r3, r6, #2
 8005a8c:	469a      	mov	sl, r3
 8005a8e:	199b      	adds	r3, r3, r6
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	445b      	add	r3, fp
 8005a94:	7c1a      	ldrb	r2, [r3, #16]
 8005a96:	00d3      	lsls	r3, r2, #3
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	aa06      	add	r2, sp, #24
 8005a9c:	4694      	mov	ip, r2
 8005a9e:	4463      	add	r3, ip
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	496e      	ldr	r1, [pc, #440]	; (8005c5c <snipCommand+0x21c>)
 8005aa4:	0020      	movs	r0, r4
 8005aa6:	f00e fc4b 	bl	8014340 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005aaa:	4653      	mov	r3, sl
 8005aac:	199b      	adds	r3, r3, r6
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	465a      	mov	r2, fp
 8005ab2:	5c9b      	ldrb	r3, [r3, r2]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d02c      	beq.n	8005b12 <snipCommand+0xd2>
 8005ab8:	2b03      	cmp	r3, #3
 8005aba:	d000      	beq.n	8005abe <snipCommand+0x7e>
 8005abc:	e0ad      	b.n	8005c1a <snipCommand+0x1da>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005abe:	00b1      	lsls	r1, r6, #2
 8005ac0:	1989      	adds	r1, r1, r6
 8005ac2:	0089      	lsls	r1, r1, #2
 8005ac4:	3106      	adds	r1, #6
 8005ac6:	4e63      	ldr	r6, [pc, #396]	; (8005c54 <snipCommand+0x214>)
 8005ac8:	1989      	adds	r1, r1, r6
 8005aca:	2204      	movs	r2, #4
 8005acc:	a805      	add	r0, sp, #20
 8005ace:	f00e fa02 	bl	8013ed6 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005ad2:	00bb      	lsls	r3, r7, #2
 8005ad4:	19db      	adds	r3, r3, r7
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	18f6      	adds	r6, r6, r3
 8005ada:	78f2      	ldrb	r2, [r6, #3]
 8005adc:	3a01      	subs	r2, #1
 8005ade:	0053      	lsls	r3, r2, #1
 8005ae0:	189b      	adds	r3, r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4a5e      	ldr	r2, [pc, #376]	; (8005c60 <snipCommand+0x220>)
 8005ae6:	18d3      	adds	r3, r2, r3
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	469a      	mov	sl, r3
 8005aec:	9805      	ldr	r0, [sp, #20]
 8005aee:	f7fd f819 	bl	8002b24 <__aeabi_f2d>
 8005af2:	9002      	str	r0, [sp, #8]
 8005af4:	9103      	str	r1, [sp, #12]
 8005af6:	7873      	ldrb	r3, [r6, #1]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	005a      	lsls	r2, r3, #1
 8005afc:	18d2      	adds	r2, r2, r3
 8005afe:	4b59      	ldr	r3, [pc, #356]	; (8005c64 <snipCommand+0x224>)
 8005b00:	189b      	adds	r3, r3, r2
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	4653      	mov	r3, sl
 8005b06:	0022      	movs	r2, r4
 8005b08:	4957      	ldr	r1, [pc, #348]	; (8005c68 <snipCommand+0x228>)
 8005b0a:	0020      	movs	r0, r4
 8005b0c:	f00e fc18 	bl	8014340 <sprintf>
				break;
 8005b10:	e083      	b.n	8005c1a <snipCommand+0x1da>
				switch(snippets[s].cond.buffer1[1]){
 8005b12:	00b3      	lsls	r3, r6, #2
 8005b14:	199b      	adds	r3, r3, r6
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a4e      	ldr	r2, [pc, #312]	; (8005c54 <snipCommand+0x214>)
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	78db      	ldrb	r3, [r3, #3]
 8005b1e:	3b05      	subs	r3, #5
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	2a09      	cmp	r2, #9
 8005b24:	d879      	bhi.n	8005c1a <snipCommand+0x1da>
 8005b26:	0093      	lsls	r3, r2, #2
 8005b28:	4a50      	ldr	r2, [pc, #320]	; (8005c6c <snipCommand+0x22c>)
 8005b2a:	58d3      	ldr	r3, [r2, r3]
 8005b2c:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005b2e:	00b3      	lsls	r3, r6, #2
 8005b30:	199b      	adds	r3, r3, r6
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a47      	ldr	r2, [pc, #284]	; (8005c54 <snipCommand+0x214>)
 8005b36:	18d2      	adds	r2, r2, r3
 8005b38:	7893      	ldrb	r3, [r2, #2]
 8005b3a:	68d2      	ldr	r2, [r2, #12]
 8005b3c:	9200      	str	r2, [sp, #0]
 8005b3e:	0022      	movs	r2, r4
 8005b40:	494b      	ldr	r1, [pc, #300]	; (8005c70 <snipCommand+0x230>)
 8005b42:	0020      	movs	r0, r4
 8005b44:	f00e fbfc 	bl	8014340 <sprintf>
						break;
 8005b48:	e067      	b.n	8005c1a <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005b4a:	00b3      	lsls	r3, r6, #2
 8005b4c:	199b      	adds	r3, r3, r6
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a40      	ldr	r2, [pc, #256]	; (8005c54 <snipCommand+0x214>)
 8005b52:	18d2      	adds	r2, r2, r3
 8005b54:	7893      	ldrb	r3, [r2, #2]
 8005b56:	68d2      	ldr	r2, [r2, #12]
 8005b58:	9200      	str	r2, [sp, #0]
 8005b5a:	0022      	movs	r2, r4
 8005b5c:	4945      	ldr	r1, [pc, #276]	; (8005c74 <snipCommand+0x234>)
 8005b5e:	0020      	movs	r0, r4
 8005b60:	f00e fbee 	bl	8014340 <sprintf>
						break;
 8005b64:	e059      	b.n	8005c1a <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005b66:	00b2      	lsls	r2, r6, #2
 8005b68:	1992      	adds	r2, r2, r6
 8005b6a:	0093      	lsls	r3, r2, #2
 8005b6c:	4a39      	ldr	r2, [pc, #228]	; (8005c54 <snipCommand+0x214>)
 8005b6e:	18d2      	adds	r2, r2, r3
 8005b70:	7893      	ldrb	r3, [r2, #2]
 8005b72:	68d1      	ldr	r1, [r2, #12]
 8005b74:	9101      	str	r1, [sp, #4]
 8005b76:	7912      	ldrb	r2, [r2, #4]
 8005b78:	9200      	str	r2, [sp, #0]
 8005b7a:	0022      	movs	r2, r4
 8005b7c:	493e      	ldr	r1, [pc, #248]	; (8005c78 <snipCommand+0x238>)
 8005b7e:	0020      	movs	r0, r4
 8005b80:	f00e fbde 	bl	8014340 <sprintf>
						break;
 8005b84:	e049      	b.n	8005c1a <snipCommand+0x1da>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005b86:	00b2      	lsls	r2, r6, #2
 8005b88:	1992      	adds	r2, r2, r6
 8005b8a:	0093      	lsls	r3, r2, #2
 8005b8c:	4a31      	ldr	r2, [pc, #196]	; (8005c54 <snipCommand+0x214>)
 8005b8e:	18d2      	adds	r2, r2, r3
 8005b90:	7893      	ldrb	r3, [r2, #2]
 8005b92:	68d1      	ldr	r1, [r2, #12]
 8005b94:	9101      	str	r1, [sp, #4]
 8005b96:	7912      	ldrb	r2, [r2, #4]
 8005b98:	9200      	str	r2, [sp, #0]
 8005b9a:	0022      	movs	r2, r4
 8005b9c:	4937      	ldr	r1, [pc, #220]	; (8005c7c <snipCommand+0x23c>)
 8005b9e:	0020      	movs	r0, r4
 8005ba0:	f00e fbce 	bl	8014340 <sprintf>
						break;
 8005ba4:	e039      	b.n	8005c1a <snipCommand+0x1da>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005ba6:	002b      	movs	r3, r5
 8005ba8:	0022      	movs	r2, r4
 8005baa:	4935      	ldr	r1, [pc, #212]	; (8005c80 <snipCommand+0x240>)
 8005bac:	0020      	movs	r0, r4
 8005bae:	f00e fbc7 	bl	8014340 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005bb2:	0028      	movs	r0, r5
 8005bb4:	f7fa fab0 	bl	8000118 <strlen>
 8005bb8:	0002      	movs	r2, r0
 8005bba:	2100      	movs	r1, #0
 8005bbc:	0028      	movs	r0, r5
 8005bbe:	f00e f993 	bl	8013ee8 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005bc2:	0031      	movs	r1, r6
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff faa9 	bl	800511c <ParseSnippetCommand>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d1eb      	bne.n	8005ba6 <snipCommand+0x166>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005bce:	0020      	movs	r0, r4
 8005bd0:	f7fa faa2 	bl	8000118 <strlen>
 8005bd4:	1820      	adds	r0, r4, r0
 8005bd6:	220c      	movs	r2, #12
 8005bd8:	492a      	ldr	r1, [pc, #168]	; (8005c84 <snipCommand+0x244>)
 8005bda:	f00e f97c 	bl	8013ed6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005bde:	0020      	movs	r0, r4
 8005be0:	f7fa fa9a 	bl	8000118 <strlen>
 8005be4:	b282      	uxth	r2, r0
 8005be6:	4b18      	ldr	r3, [pc, #96]	; (8005c48 <snipCommand+0x208>)
 8005be8:	7818      	ldrb	r0, [r3, #0]
 8005bea:	2301      	movs	r3, #1
 8005bec:	425b      	negs	r3, r3
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	3333      	adds	r3, #51	; 0x33
 8005bf2:	0021      	movs	r1, r4
 8005bf4:	f008 fa2e 	bl	800e054 <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005bf8:	4646      	mov	r6, r8
 8005bfa:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <snipCommand+0x210>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	4543      	cmp	r3, r8
 8005c00:	d912      	bls.n	8005c28 <snipCommand+0x1e8>
 8005c02:	1c73      	adds	r3, r6, #1
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	4698      	mov	r8, r3
		if(snippets[s].cond.conditionType)
 8005c08:	0037      	movs	r7, r6
 8005c0a:	00b3      	lsls	r3, r6, #2
 8005c0c:	199b      	adds	r3, r3, r6
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	464a      	mov	r2, r9
 8005c12:	5c9b      	ldrb	r3, [r3, r2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d000      	beq.n	8005c1a <snipCommand+0x1da>
 8005c18:	e735      	b.n	8005a86 <snipCommand+0x46>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005c1a:	4e0f      	ldr	r6, [pc, #60]	; (8005c58 <snipCommand+0x218>)
 8005c1c:	00bb      	lsls	r3, r7, #2
 8005c1e:	19db      	adds	r3, r3, r7
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4f0c      	ldr	r7, [pc, #48]	; (8005c54 <snipCommand+0x214>)
 8005c24:	18ff      	adds	r7, r7, r3
 8005c26:	e7cc      	b.n	8005bc2 <snipCommand+0x182>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005c28:	22b5      	movs	r2, #181	; 0xb5
 8005c2a:	4917      	ldr	r1, [pc, #92]	; (8005c88 <snipCommand+0x248>)
 8005c2c:	0020      	movs	r0, r4
 8005c2e:	f00e f952 	bl	8013ed6 <memcpy>
}
 8005c32:	2000      	movs	r0, #0
 8005c34:	b00b      	add	sp, #44	; 0x2c
 8005c36:	bc3c      	pop	{r2, r3, r4, r5}
 8005c38:	4690      	mov	r8, r2
 8005c3a:	4699      	mov	r9, r3
 8005c3c:	46a2      	mov	sl, r4
 8005c3e:	46ab      	mov	fp, r5
 8005c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c42:	46c0      	nop			; (mov r8, r8)
 8005c44:	08018740 	.word	0x08018740
 8005c48:	2000118a 	.word	0x2000118a
 8005c4c:	0801a158 	.word	0x0801a158
 8005c50:	2000193f 	.word	0x2000193f
 8005c54:	20006a28 	.word	0x20006a28
 8005c58:	20001970 	.word	0x20001970
 8005c5c:	0801a190 	.word	0x0801a190
 8005c60:	200000ac 	.word	0x200000ac
 8005c64:	08019c88 	.word	0x08019c88
 8005c68:	0801a1fc 	.word	0x0801a1fc
 8005c6c:	08019534 	.word	0x08019534
 8005c70:	0801a19c 	.word	0x0801a19c
 8005c74:	0801a1b0 	.word	0x0801a1b0
 8005c78:	0801a1c8 	.word	0x0801a1c8
 8005c7c:	0801a1e0 	.word	0x0801a1e0
 8005c80:	0801a20c 	.word	0x0801a20c
 8005c84:	0801a214 	.word	0x0801a214
 8005c88:	0801a220 	.word	0x0801a220

08005c8c <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	0004      	movs	r4, r0
	dev =HAL_GetDEVID();
 8005c90:	f00a facc 	bl	801022c <HAL_GetDEVID>
	switch(dev){
 8005c94:	0400      	lsls	r0, r0, #16
 8005c96:	0c00      	lsrs	r0, r0, #16
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <idcodeCommand+0x78>)
 8005c9a:	469c      	mov	ip, r3
 8005c9c:	4460      	add	r0, ip
 8005c9e:	2808      	cmp	r0, #8
 8005ca0:	d82a      	bhi.n	8005cf8 <idcodeCommand+0x6c>
 8005ca2:	0080      	lsls	r0, r0, #2
 8005ca4:	4b18      	ldr	r3, [pc, #96]	; (8005d08 <idcodeCommand+0x7c>)
 8005ca6:	581b      	ldr	r3, [r3, r0]
 8005ca8:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005caa:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <idcodeCommand+0x80>)
 8005cac:	4918      	ldr	r1, [pc, #96]	; (8005d10 <idcodeCommand+0x84>)
 8005cae:	0020      	movs	r0, r4
 8005cb0:	f00e fb46 	bl	8014340 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005cb4:	f00a fab4 	bl	8010220 <HAL_GetREVID>
 8005cb8:	0b03      	lsrs	r3, r0, #12
 8005cba:	0022      	movs	r2, r4
 8005cbc:	4915      	ldr	r1, [pc, #84]	; (8005d14 <idcodeCommand+0x88>)
 8005cbe:	0020      	movs	r0, r4
 8005cc0:	f00e fb3e 	bl	8014340 <sprintf>
}
 8005cc4:	2000      	movs	r0, #0
 8005cc6:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005cc8:	4a13      	ldr	r2, [pc, #76]	; (8005d18 <idcodeCommand+0x8c>)
 8005cca:	4911      	ldr	r1, [pc, #68]	; (8005d10 <idcodeCommand+0x84>)
 8005ccc:	0020      	movs	r0, r4
 8005cce:	f00e fb37 	bl	8014340 <sprintf>
			break;
 8005cd2:	e7ef      	b.n	8005cb4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005cd4:	4a11      	ldr	r2, [pc, #68]	; (8005d1c <idcodeCommand+0x90>)
 8005cd6:	490e      	ldr	r1, [pc, #56]	; (8005d10 <idcodeCommand+0x84>)
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f00e fb31 	bl	8014340 <sprintf>
			break;
 8005cde:	e7e9      	b.n	8005cb4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <idcodeCommand+0x94>)
 8005ce2:	490b      	ldr	r1, [pc, #44]	; (8005d10 <idcodeCommand+0x84>)
 8005ce4:	0020      	movs	r0, r4
 8005ce6:	f00e fb2b 	bl	8014340 <sprintf>
			break;
 8005cea:	e7e3      	b.n	8005cb4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005cec:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <idcodeCommand+0x98>)
 8005cee:	4908      	ldr	r1, [pc, #32]	; (8005d10 <idcodeCommand+0x84>)
 8005cf0:	0020      	movs	r0, r4
 8005cf2:	f00e fb25 	bl	8014340 <sprintf>
			break;
 8005cf6:	e7dd      	b.n	8005cb4 <idcodeCommand+0x28>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005cf8:	4a0b      	ldr	r2, [pc, #44]	; (8005d28 <idcodeCommand+0x9c>)
 8005cfa:	4905      	ldr	r1, [pc, #20]	; (8005d10 <idcodeCommand+0x84>)
 8005cfc:	0020      	movs	r0, r4
 8005cfe:	f00e fb1f 	bl	8014340 <sprintf>
			break;
 8005d02:	e7d7      	b.n	8005cb4 <idcodeCommand+0x28>
 8005d04:	fffffbc0 	.word	0xfffffbc0
 8005d08:	0801955c 	.word	0x0801955c
 8005d0c:	08019b84 	.word	0x08019b84
 8005d10:	08019b90 	.word	0x08019b90
 8005d14:	08019bdc 	.word	0x08019bdc
 8005d18:	08019ba4 	.word	0x08019ba4
 8005d1c:	08019bb0 	.word	0x08019bb0
 8005d20:	08019bbc 	.word	0x08019bbc
 8005d24:	08019bc8 	.word	0x08019bc8
 8005d28:	08019bd4 	.word	0x08019bd4

08005d2c <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	0004      	movs	r4, r0
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005d30:	220e      	movs	r2, #14
 8005d32:	4911      	ldr	r1, [pc, #68]	; (8005d78 <uuidCommand+0x4c>)
 8005d34:	f00e f8cf 	bl	8013ed6 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005d38:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <uuidCommand+0x50>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4d10      	ldr	r5, [pc, #64]	; (8005d80 <uuidCommand+0x54>)
 8005d3e:	0022      	movs	r2, r4
 8005d40:	0029      	movs	r1, r5
 8005d42:	0020      	movs	r0, r4
 8005d44:	f00e fafc 	bl	8014340 <sprintf>
 8005d48:	4b0e      	ldr	r3, [pc, #56]	; (8005d84 <uuidCommand+0x58>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0022      	movs	r2, r4
 8005d4e:	0029      	movs	r1, r5
 8005d50:	0020      	movs	r0, r4
 8005d52:	f00e faf5 	bl	8014340 <sprintf>
 8005d56:	4b0c      	ldr	r3, [pc, #48]	; (8005d88 <uuidCommand+0x5c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	0022      	movs	r2, r4
 8005d5c:	0029      	movs	r1, r5
 8005d5e:	0020      	movs	r0, r4
 8005d60:	f00e faee 	bl	8014340 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005d64:	0020      	movs	r0, r4
 8005d66:	f7fa f9d7 	bl	8000118 <strlen>
 8005d6a:	1820      	adds	r0, r4, r0
 8005d6c:	2203      	movs	r2, #3
 8005d6e:	4907      	ldr	r1, [pc, #28]	; (8005d8c <uuidCommand+0x60>)
 8005d70:	f00e f8b1 	bl	8013ed6 <memcpy>
}
 8005d74:	2000      	movs	r0, #0
 8005d76:	bd70      	pop	{r4, r5, r6, pc}
 8005d78:	0801b0ec 	.word	0x0801b0ec
 8005d7c:	1ffff7ac 	.word	0x1ffff7ac
 8005d80:	0801b0fc 	.word	0x0801b0fc
 8005d84:	1ffff7b0 	.word	0x1ffff7b0
 8005d88:	1ffff7b4 	.word	0x1ffff7b4
 8005d8c:	0801ab5c 	.word	0x0801ab5c

08005d90 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005d90:	b510      	push	{r4, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	0004      	movs	r4, r0
	GetTimeDate();
 8005d96:	f007 feb9 	bl	800db0c <GetTimeDate>
	if(BOS.hourformat == 24)
 8005d9a:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <timeCommand+0x78>)
 8005d9c:	7b5b      	ldrb	r3, [r3, #13]
 8005d9e:	2b18      	cmp	r3, #24
 8005da0:	d004      	beq.n	8005dac <timeCommand+0x1c>
	else if(BOS.hourformat == 12){
 8005da2:	2b0c      	cmp	r3, #12
 8005da4:	d00e      	beq.n	8005dc4 <timeCommand+0x34>
}
 8005da6:	2000      	movs	r0, #0
 8005da8:	b004      	add	sp, #16
 8005daa:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8005dac:	4916      	ldr	r1, [pc, #88]	; (8005e08 <timeCommand+0x78>)
 8005dae:	7c4b      	ldrb	r3, [r1, #17]
 8005db0:	7c8a      	ldrb	r2, [r1, #18]
 8005db2:	89c8      	ldrh	r0, [r1, #14]
 8005db4:	9001      	str	r0, [sp, #4]
 8005db6:	7c09      	ldrb	r1, [r1, #16]
 8005db8:	9100      	str	r1, [sp, #0]
 8005dba:	4914      	ldr	r1, [pc, #80]	; (8005e0c <timeCommand+0x7c>)
 8005dbc:	0020      	movs	r0, r4
 8005dbe:	f00e fabf 	bl	8014340 <sprintf>
 8005dc2:	e7f0      	b.n	8005da6 <timeCommand+0x16>
		if(BOS.time.ampm == RTC_AM)
 8005dc4:	4b10      	ldr	r3, [pc, #64]	; (8005e08 <timeCommand+0x78>)
 8005dc6:	7cdb      	ldrb	r3, [r3, #19]
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d00f      	beq.n	8005dec <timeCommand+0x5c>
		else if(BOS.time.ampm == RTC_PM)
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d1ea      	bne.n	8005da6 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8005dd0:	490d      	ldr	r1, [pc, #52]	; (8005e08 <timeCommand+0x78>)
 8005dd2:	7c4b      	ldrb	r3, [r1, #17]
 8005dd4:	7c8a      	ldrb	r2, [r1, #18]
 8005dd6:	480e      	ldr	r0, [pc, #56]	; (8005e10 <timeCommand+0x80>)
 8005dd8:	9002      	str	r0, [sp, #8]
 8005dda:	89c8      	ldrh	r0, [r1, #14]
 8005ddc:	9001      	str	r0, [sp, #4]
 8005dde:	7c09      	ldrb	r1, [r1, #16]
 8005de0:	9100      	str	r1, [sp, #0]
 8005de2:	490c      	ldr	r1, [pc, #48]	; (8005e14 <timeCommand+0x84>)
 8005de4:	0020      	movs	r0, r4
 8005de6:	f00e faab 	bl	8014340 <sprintf>
 8005dea:	e7dc      	b.n	8005da6 <timeCommand+0x16>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8005dec:	4906      	ldr	r1, [pc, #24]	; (8005e08 <timeCommand+0x78>)
 8005dee:	7c4b      	ldrb	r3, [r1, #17]
 8005df0:	7c8a      	ldrb	r2, [r1, #18]
 8005df2:	4809      	ldr	r0, [pc, #36]	; (8005e18 <timeCommand+0x88>)
 8005df4:	9002      	str	r0, [sp, #8]
 8005df6:	89c8      	ldrh	r0, [r1, #14]
 8005df8:	9001      	str	r0, [sp, #4]
 8005dfa:	7c09      	ldrb	r1, [r1, #16]
 8005dfc:	9100      	str	r1, [sp, #0]
 8005dfe:	4905      	ldr	r1, [pc, #20]	; (8005e14 <timeCommand+0x84>)
 8005e00:	0020      	movs	r0, r4
 8005e02:	f00e fa9d 	bl	8014340 <sprintf>
 8005e06:	e7ce      	b.n	8005da6 <timeCommand+0x16>
 8005e08:	20006a0c 	.word	0x20006a0c
 8005e0c:	0801b034 	.word	0x0801b034
 8005e10:	0801b08c 	.word	0x0801b08c
 8005e14:	0801b05c 	.word	0x0801b05c
 8005e18:	0801b088 	.word	0x0801b088

08005e1c <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	0004      	movs	r4, r0
	GetTimeDate();
 8005e20:	f007 fe74 	bl	800db0c <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8005e24:	f7fe fb72 	bl	800450c <GetDateString>
 8005e28:	0002      	movs	r2, r0
 8005e2a:	4903      	ldr	r1, [pc, #12]	; (8005e38 <dateCommand+0x1c>)
 8005e2c:	0020      	movs	r0, r4
 8005e2e:	f00e fa87 	bl	8014340 <sprintf>
}
 8005e32:	2000      	movs	r0, #0
 8005e34:	bd10      	pop	{r4, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	080197bc 	.word	0x080197bc

08005e3c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	9001      	str	r0, [sp, #4]
 8005e42:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005e44:	2300      	movs	r3, #0
 8005e46:	9303      	str	r3, [sp, #12]
 8005e48:	9302      	str	r3, [sp, #8]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005e4a:	aa03      	add	r2, sp, #12
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	0030      	movs	r0, r6
 8005e50:	f008 fb9c 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8005e54:	0004      	movs	r4, r0
 8005e56:	4b71      	ldr	r3, [pc, #452]	; (800601c <getCommand+0x1e0>)
 8005e58:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	4970      	ldr	r1, [pc, #448]	; (8006020 <getCommand+0x1e4>)
 8005e5e:	f00e fab3 	bl	80143c8 <strncmp>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d000      	beq.n	8005e68 <getCommand+0x2c>
 8005e66:	e090      	b.n	8005f8a <getCommand+0x14e>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 8005e68:	1d27      	adds	r7, r4, #4
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	1f1e      	subs	r6, r3, #4
 8005e6e:	0032      	movs	r2, r6
 8005e70:	496c      	ldr	r1, [pc, #432]	; (8006024 <getCommand+0x1e8>)
 8005e72:	0038      	movs	r0, r7
 8005e74:	f00e faa8 	bl	80143c8 <strncmp>
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d11f      	bne.n	8005ebc <getCommand+0x80>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 8005e7c:	4b6a      	ldr	r3, [pc, #424]	; (8006028 <getCommand+0x1ec>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b60      	cmp	r3, #96	; 0x60
 8005e82:	d009      	beq.n	8005e98 <getCommand+0x5c>
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8005e84:	2b20      	cmp	r3, #32
 8005e86:	d00d      	beq.n	8005ea4 <getCommand+0x68>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d011      	beq.n	8005eb0 <getCommand+0x74>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8005e8c:	0022      	movs	r2, r4
 8005e8e:	4967      	ldr	r1, [pc, #412]	; (800602c <getCommand+0x1f0>)
 8005e90:	9801      	ldr	r0, [sp, #4]
 8005e92:	f00e fa55 	bl	8014340 <sprintf>
 8005e96:	e084      	b.n	8005fa2 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005e98:	4a65      	ldr	r2, [pc, #404]	; (8006030 <getCommand+0x1f4>)
 8005e9a:	4966      	ldr	r1, [pc, #408]	; (8006034 <getCommand+0x1f8>)
 8005e9c:	9801      	ldr	r0, [sp, #4]
 8005e9e:	f00e fa4f 	bl	8014340 <sprintf>
 8005ea2:	e07e      	b.n	8005fa2 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005ea4:	4a64      	ldr	r2, [pc, #400]	; (8006038 <getCommand+0x1fc>)
 8005ea6:	4963      	ldr	r1, [pc, #396]	; (8006034 <getCommand+0x1f8>)
 8005ea8:	9801      	ldr	r0, [sp, #4]
 8005eaa:	f00e fa49 	bl	8014340 <sprintf>
 8005eae:	e078      	b.n	8005fa2 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005eb0:	4a62      	ldr	r2, [pc, #392]	; (800603c <getCommand+0x200>)
 8005eb2:	4960      	ldr	r1, [pc, #384]	; (8006034 <getCommand+0x1f8>)
 8005eb4:	9801      	ldr	r0, [sp, #4]
 8005eb6:	f00e fa43 	bl	8014340 <sprintf>
 8005eba:	e072      	b.n	8005fa2 <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8005ebc:	0032      	movs	r2, r6
 8005ebe:	4960      	ldr	r1, [pc, #384]	; (8006040 <getCommand+0x204>)
 8005ec0:	0038      	movs	r0, r7
 8005ec2:	f00e fa81 	bl	80143c8 <strncmp>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d119      	bne.n	8005efe <getCommand+0xc2>
			if(BOSMessaging.trace == TRACE_BOTH)
 8005eca:	4b57      	ldr	r3, [pc, #348]	; (8006028 <getCommand+0x1ec>)
 8005ecc:	785b      	ldrb	r3, [r3, #1]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d009      	beq.n	8005ee6 <getCommand+0xaa>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d00d      	beq.n	8005ef2 <getCommand+0xb6>
			else if(BOSMessaging.trace == TRACE_NONE)
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d1d8      	bne.n	8005e8c <getCommand+0x50>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 8005eda:	4a58      	ldr	r2, [pc, #352]	; (800603c <getCommand+0x200>)
 8005edc:	4955      	ldr	r1, [pc, #340]	; (8006034 <getCommand+0x1f8>)
 8005ede:	9801      	ldr	r0, [sp, #4]
 8005ee0:	f00e fa2e 	bl	8014340 <sprintf>
 8005ee4:	e05d      	b.n	8005fa2 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 8005ee6:	4a52      	ldr	r2, [pc, #328]	; (8006030 <getCommand+0x1f4>)
 8005ee8:	4952      	ldr	r1, [pc, #328]	; (8006034 <getCommand+0x1f8>)
 8005eea:	9801      	ldr	r0, [sp, #4]
 8005eec:	f00e fa28 	bl	8014340 <sprintf>
 8005ef0:	e057      	b.n	8005fa2 <getCommand+0x166>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8005ef2:	4a51      	ldr	r2, [pc, #324]	; (8006038 <getCommand+0x1fc>)
 8005ef4:	494f      	ldr	r1, [pc, #316]	; (8006034 <getCommand+0x1f8>)
 8005ef6:	9801      	ldr	r0, [sp, #4]
 8005ef8:	f00e fa22 	bl	8014340 <sprintf>
 8005efc:	e051      	b.n	8005fa2 <getCommand+0x166>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8005efe:	0032      	movs	r2, r6
 8005f00:	4950      	ldr	r1, [pc, #320]	; (8006044 <getCommand+0x208>)
 8005f02:	0038      	movs	r0, r7
 8005f04:	f00e fa60 	bl	80143c8 <strncmp>
 8005f08:	2800      	cmp	r0, #0
 8005f0a:	d022      	beq.n	8005f52 <getCommand+0x116>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8005f0c:	0032      	movs	r2, r6
 8005f0e:	494e      	ldr	r1, [pc, #312]	; (8006048 <getCommand+0x20c>)
 8005f10:	0038      	movs	r0, r7
 8005f12:	f00e fa59 	bl	80143c8 <strncmp>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d022      	beq.n	8005f60 <getCommand+0x124>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8005f1a:	0032      	movs	r2, r6
 8005f1c:	494b      	ldr	r1, [pc, #300]	; (800604c <getCommand+0x210>)
 8005f1e:	0038      	movs	r0, r7
 8005f20:	f00e fa52 	bl	80143c8 <strncmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d022      	beq.n	8005f6e <getCommand+0x132>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8005f28:	0032      	movs	r2, r6
 8005f2a:	4949      	ldr	r1, [pc, #292]	; (8006050 <getCommand+0x214>)
 8005f2c:	0038      	movs	r0, r7
 8005f2e:	f00e fa4b 	bl	80143c8 <strncmp>
 8005f32:	2800      	cmp	r0, #0
 8005f34:	d022      	beq.n	8005f7c <getCommand+0x140>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8005f36:	0032      	movs	r2, r6
 8005f38:	4946      	ldr	r1, [pc, #280]	; (8006054 <getCommand+0x218>)
 8005f3a:	0038      	movs	r0, r7
 8005f3c:	f00e fa44 	bl	80143c8 <strncmp>
 8005f40:	2800      	cmp	r0, #0
 8005f42:	d129      	bne.n	8005f98 <getCommand+0x15c>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 8005f44:	4b44      	ldr	r3, [pc, #272]	; (8006058 <getCommand+0x21c>)
 8005f46:	795a      	ldrb	r2, [r3, #5]
 8005f48:	4944      	ldr	r1, [pc, #272]	; (800605c <getCommand+0x220>)
 8005f4a:	9801      	ldr	r0, [sp, #4]
 8005f4c:	f00e f9f8 	bl	8014340 <sprintf>
 8005f50:	e027      	b.n	8005fa2 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8005f52:	4b41      	ldr	r3, [pc, #260]	; (8006058 <getCommand+0x21c>)
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	4941      	ldr	r1, [pc, #260]	; (800605c <getCommand+0x220>)
 8005f58:	9801      	ldr	r0, [sp, #4]
 8005f5a:	f00e f9f1 	bl	8014340 <sprintf>
 8005f5e:	e020      	b.n	8005fa2 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8005f60:	4b3d      	ldr	r3, [pc, #244]	; (8006058 <getCommand+0x21c>)
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	493d      	ldr	r1, [pc, #244]	; (800605c <getCommand+0x220>)
 8005f66:	9801      	ldr	r0, [sp, #4]
 8005f68:	f00e f9ea 	bl	8014340 <sprintf>
 8005f6c:	e019      	b.n	8005fa2 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 8005f6e:	4b3a      	ldr	r3, [pc, #232]	; (8006058 <getCommand+0x21c>)
 8005f70:	885a      	ldrh	r2, [r3, #2]
 8005f72:	493a      	ldr	r1, [pc, #232]	; (800605c <getCommand+0x220>)
 8005f74:	9801      	ldr	r0, [sp, #4]
 8005f76:	f00e f9e3 	bl	8014340 <sprintf>
 8005f7a:	e012      	b.n	8005fa2 <getCommand+0x166>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <getCommand+0x21c>)
 8005f7e:	791a      	ldrb	r2, [r3, #4]
 8005f80:	4936      	ldr	r1, [pc, #216]	; (800605c <getCommand+0x220>)
 8005f82:	9801      	ldr	r0, [sp, #4]
 8005f84:	f00e f9dc 	bl	8014340 <sprintf>
 8005f88:	e00b      	b.n	8005fa2 <getCommand+0x166>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 8005f8a:	2205      	movs	r2, #5
 8005f8c:	4934      	ldr	r1, [pc, #208]	; (8006060 <getCommand+0x224>)
 8005f8e:	0020      	movs	r0, r4
 8005f90:	f00e fa1a 	bl	80143c8 <strncmp>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d007      	beq.n	8005fa8 <getCommand+0x16c>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8005f98:	2213      	movs	r2, #19
 8005f9a:	4932      	ldr	r1, [pc, #200]	; (8006064 <getCommand+0x228>)
 8005f9c:	9801      	ldr	r0, [sp, #4]
 8005f9e:	f00d ff9a 	bl	8013ed6 <memcpy>
}
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	b005      	add	sp, #20
 8005fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005fa8:	aa02      	add	r2, sp, #8
 8005faa:	2102      	movs	r1, #2
 8005fac:	0030      	movs	r0, r6
 8005fae:	f008 faed 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8005fb2:	0006      	movs	r6, r0
 8005fb4:	4f2c      	ldr	r7, [pc, #176]	; (8006068 <getCommand+0x22c>)
		for(i =0; i < MaxNumOfGroups; i++){
 8005fb6:	2400      	movs	r4, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8005fb8:	0039      	movs	r1, r7
 8005fba:	0030      	movs	r0, r6
 8005fbc:	f7fa f8a2 	bl	8000104 <strcmp>
 8005fc0:	2800      	cmp	r0, #0
 8005fc2:	d01b      	beq.n	8005ffc <getCommand+0x1c0>
		for(i =0; i < MaxNumOfGroups; i++){
 8005fc4:	3401      	adds	r4, #1
 8005fc6:	b2e4      	uxtb	r4, r4
 8005fc8:	370a      	adds	r7, #10
 8005fca:	2c0a      	cmp	r4, #10
 8005fcc:	d1f4      	bne.n	8005fb8 <getCommand+0x17c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8005fce:	0032      	movs	r2, r6
 8005fd0:	4926      	ldr	r1, [pc, #152]	; (800606c <getCommand+0x230>)
 8005fd2:	9801      	ldr	r0, [sp, #4]
 8005fd4:	f00e f9b4 	bl	8014340 <sprintf>
			return pdFALSE;
 8005fd8:	e7e3      	b.n	8005fa2 <getCommand+0x166>
			for(j =1; j <= N; j++)						// N modules
 8005fda:	3401      	adds	r4, #1
 8005fdc:	b2e4      	uxtb	r4, r4
 8005fde:	783b      	ldrb	r3, [r7, #0]
 8005fe0:	42a3      	cmp	r3, r4
 8005fe2:	d3de      	bcc.n	8005fa2 <getCommand+0x166>
				if(InGroup(j,i)){
 8005fe4:	1e63      	subs	r3, r4, #1
 8005fe6:	005b      	lsls	r3, r3, #1
 8005fe8:	5b5b      	ldrh	r3, [r3, r5]
 8005fea:	421e      	tst	r6, r3
 8005fec:	d0f5      	beq.n	8005fda <getCommand+0x19e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8005fee:	0023      	movs	r3, r4
 8005ff0:	9801      	ldr	r0, [sp, #4]
 8005ff2:	0002      	movs	r2, r0
 8005ff4:	491e      	ldr	r1, [pc, #120]	; (8006070 <getCommand+0x234>)
 8005ff6:	f00e f9a3 	bl	8014340 <sprintf>
 8005ffa:	e7ee      	b.n	8005fda <getCommand+0x19e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8005ffc:	0032      	movs	r2, r6
 8005ffe:	491d      	ldr	r1, [pc, #116]	; (8006074 <getCommand+0x238>)
 8006000:	9801      	ldr	r0, [sp, #4]
 8006002:	f00e f99d 	bl	8014340 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <getCommand+0x23c>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0c9      	beq.n	8005fa2 <getCommand+0x166>
 800600e:	2601      	movs	r6, #1
 8006010:	40a6      	lsls	r6, r4
 8006012:	2401      	movs	r4, #1
				if(InGroup(j,i)){
 8006014:	4d19      	ldr	r5, [pc, #100]	; (800607c <getCommand+0x240>)
			for(j =1; j <= N; j++)						// N modules
 8006016:	4f18      	ldr	r7, [pc, #96]	; (8006078 <getCommand+0x23c>)
 8006018:	e7e4      	b.n	8005fe4 <getCommand+0x1a8>
 800601a:	46c0      	nop			; (mov r8, r8)
 800601c:	200019b4 	.word	0x200019b4
 8006020:	08019928 	.word	0x08019928
 8006024:	08019930 	.word	0x08019930
 8006028:	2000698c 	.word	0x2000698c
 800602c:	080199f4 	.word	0x080199f4
 8006030:	08018a9c 	.word	0x08018a9c
 8006034:	080188f4 	.word	0x080188f4
 8006038:	0801993c 	.word	0x0801993c
 800603c:	08019940 	.word	0x08019940
 8006040:	08019948 	.word	0x08019948
 8006044:	08019950 	.word	0x08019950
 8006048:	0801995c 	.word	0x0801995c
 800604c:	08019968 	.word	0x08019968
 8006050:	08019978 	.word	0x08019978
 8006054:	0801998c 	.word	0x0801998c
 8006058:	20006a0c 	.word	0x20006a0c
 800605c:	080191e0 	.word	0x080191e0
 8006060:	080199a0 	.word	0x080199a0
 8006064:	080199b0 	.word	0x080199b0
 8006068:	20001578 	.word	0x20001578
 800606c:	080199c4 	.word	0x080199c4
 8006070:	080199a8 	.word	0x080199a8
 8006074:	080199e0 	.word	0x080199e0
 8006078:	20000044 	.word	0x20000044
 800607c:	200015dc 	.word	0x200015dc

08006080 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	0005      	movs	r5, r0
 8006086:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006088:	2300      	movs	r3, #0
 800608a:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800608c:	aa01      	add	r2, sp, #4
 800608e:	2101      	movs	r1, #1
 8006090:	f008 fa7c 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006094:	0004      	movs	r4, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006096:	9e01      	ldr	r6, [sp, #4]
 8006098:	0032      	movs	r2, r6
 800609a:	491e      	ldr	r1, [pc, #120]	; (8006114 <defaultCommand+0x94>)
 800609c:	f00e f994 	bl	80143c8 <strncmp>
 80060a0:	2800      	cmp	r0, #0
 80060a2:	d020      	beq.n	80060e6 <defaultCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 80060a4:	0032      	movs	r2, r6
 80060a6:	491c      	ldr	r1, [pc, #112]	; (8006118 <defaultCommand+0x98>)
 80060a8:	0020      	movs	r0, r4
 80060aa:	f00e f98d 	bl	80143c8 <strncmp>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d12a      	bne.n	8006108 <defaultCommand+0x88>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 80060b2:	2200      	movs	r2, #0
 80060b4:	2116      	movs	r1, #22
 80060b6:	20ff      	movs	r0, #255	; 0xff
 80060b8:	f002 f862 	bl	8008180 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 80060bc:	4b17      	ldr	r3, [pc, #92]	; (800611c <defaultCommand+0x9c>)
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 80060c2:	2064      	movs	r0, #100	; 0x64
 80060c4:	f008 f94d 	bl	800e362 <osDelay>
		ClearEEportsDir();
 80060c8:	f7fd fada 	bl	8003680 <ClearEEportsDir>
		ClearROtopology();
 80060cc:	f004 fe7e 	bl	800adcc <ClearROtopology>
		osDelay(100);
 80060d0:	2064      	movs	r0, #100	; 0x64
 80060d2:	f008 f946 	bl	800e362 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 80060d6:	2240      	movs	r2, #64	; 0x40
 80060d8:	4911      	ldr	r1, [pc, #68]	; (8006120 <defaultCommand+0xa0>)
 80060da:	0028      	movs	r0, r5
 80060dc:	f00d fefb 	bl	8013ed6 <memcpy>
}
 80060e0:	2000      	movs	r0, #0
 80060e2:	b002      	add	sp, #8
 80060e4:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 80060e6:	490f      	ldr	r1, [pc, #60]	; (8006124 <defaultCommand+0xa4>)
 80060e8:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <defaultCommand+0xa8>)
 80060ea:	000a      	movs	r2, r1
 80060ec:	cb13      	ldmia	r3!, {r0, r1, r4}
 80060ee:	c213      	stmia	r2!, {r0, r1, r4}
 80060f0:	cb13      	ldmia	r3!, {r0, r1, r4}
 80060f2:	c213      	stmia	r2!, {r0, r1, r4}
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80060f8:	f7fd fa7e 	bl	80035f8 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 80060fc:	2227      	movs	r2, #39	; 0x27
 80060fe:	490b      	ldr	r1, [pc, #44]	; (800612c <defaultCommand+0xac>)
 8006100:	0028      	movs	r0, r5
 8006102:	f00d fee8 	bl	8013ed6 <memcpy>
 8006106:	e7eb      	b.n	80060e0 <defaultCommand+0x60>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006108:	220f      	movs	r2, #15
 800610a:	4909      	ldr	r1, [pc, #36]	; (8006130 <defaultCommand+0xb0>)
 800610c:	0028      	movs	r0, r5
 800610e:	f00d fee2 	bl	8013ed6 <memcpy>
 8006112:	e7e5      	b.n	80060e0 <defaultCommand+0x60>
 8006114:	080197e4 	.word	0x080197e4
 8006118:	08019814 	.word	0x08019814
 800611c:	20001610 	.word	0x20001610
 8006120:	0801982c 	.word	0x0801982c
 8006124:	20006a0c 	.word	0x20006a0c
 8006128:	20000028 	.word	0x20000028
 800612c:	080197ec 	.word	0x080197ec
 8006130:	0801981c 	.word	0x0801981c

08006134 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006136:	46ce      	mov	lr, r9
 8006138:	4647      	mov	r7, r8
 800613a:	b580      	push	{r7, lr}
 800613c:	b08f      	sub	sp, #60	; 0x3c
 800613e:	9007      	str	r0, [sp, #28]
 8006140:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006142:	2300      	movs	r3, #0
 8006144:	930d      	str	r3, [sp, #52]	; 0x34
 8006146:	930c      	str	r3, [sp, #48]	; 0x30
 8006148:	930b      	str	r3, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 800614a:	930a      	str	r3, [sp, #40]	; 0x28
 800614c:	9309      	str	r3, [sp, #36]	; 0x24
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800614e:	aa0d      	add	r2, sp, #52	; 0x34
 8006150:	2101      	movs	r1, #1
 8006152:	0028      	movs	r0, r5
 8006154:	f008 fa1a 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006158:	0004      	movs	r4, r0
 800615a:	4bda      	ldr	r3, [pc, #872]	; (80064c4 <setCommand+0x390>)
 800615c:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 800615e:	2204      	movs	r2, #4
 8006160:	49d9      	ldr	r1, [pc, #868]	; (80064c8 <setCommand+0x394>)
 8006162:	f00e f931 	bl	80143c8 <strncmp>
 8006166:	2800      	cmp	r0, #0
 8006168:	d015      	beq.n	8006196 <setCommand+0x62>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 800616a:	2204      	movs	r2, #4
 800616c:	49d7      	ldr	r1, [pc, #860]	; (80064cc <setCommand+0x398>)
 800616e:	0020      	movs	r0, r4
 8006170:	f00e f92a 	bl	80143c8 <strncmp>
 8006174:	2800      	cmp	r0, #0
 8006176:	d100      	bne.n	800617a <setCommand+0x46>
 8006178:	e167      	b.n	800644a <setCommand+0x316>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 800617a:	2204      	movs	r2, #4
 800617c:	49d4      	ldr	r1, [pc, #848]	; (80064d0 <setCommand+0x39c>)
 800617e:	0020      	movs	r0, r4
 8006180:	f00e f922 	bl	80143c8 <strncmp>
 8006184:	2800      	cmp	r0, #0
 8006186:	d100      	bne.n	800618a <setCommand+0x56>
 8006188:	e1f9      	b.n	800657e <setCommand+0x44a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800618a:	2213      	movs	r2, #19
 800618c:	49d1      	ldr	r1, [pc, #836]	; (80064d4 <setCommand+0x3a0>)
 800618e:	9807      	ldr	r0, [sp, #28]
 8006190:	f00d fea1 	bl	8013ed6 <memcpy>
 8006194:	e266      	b.n	8006664 <setCommand+0x530>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006196:	aa0c      	add	r2, sp, #48	; 0x30
 8006198:	2102      	movs	r1, #2
 800619a:	0028      	movs	r0, r5
 800619c:	f008 f9f6 	bl	800e58c <FreeRTOS_CLIGetParameter>
 80061a0:	0007      	movs	r7, r0
 80061a2:	4bcd      	ldr	r3, [pc, #820]	; (80064d8 <setCommand+0x3a4>)
 80061a4:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80061a6:	4bc7      	ldr	r3, [pc, #796]	; (80064c4 <setCommand+0x390>)
 80061a8:	681c      	ldr	r4, [r3, #0]
 80061aa:	3404      	adds	r4, #4
 80061ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ae:	1f1d      	subs	r5, r3, #4
 80061b0:	002a      	movs	r2, r5
 80061b2:	49ca      	ldr	r1, [pc, #808]	; (80064dc <setCommand+0x3a8>)
 80061b4:	0020      	movs	r0, r4
 80061b6:	f00e f907 	bl	80143c8 <strncmp>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	d15b      	bne.n	8006276 <setCommand+0x142>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80061be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80061c0:	0022      	movs	r2, r4
 80061c2:	49c7      	ldr	r1, [pc, #796]	; (80064e0 <setCommand+0x3ac>)
 80061c4:	0038      	movs	r0, r7
 80061c6:	f00e f8ff 	bl	80143c8 <strncmp>
 80061ca:	2800      	cmp	r0, #0
 80061cc:	d01a      	beq.n	8006204 <setCommand+0xd0>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 80061ce:	0022      	movs	r2, r4
 80061d0:	49c4      	ldr	r1, [pc, #784]	; (80064e4 <setCommand+0x3b0>)
 80061d2:	0038      	movs	r0, r7
 80061d4:	f00e f8f8 	bl	80143c8 <strncmp>
 80061d8:	2800      	cmp	r0, #0
 80061da:	d02a      	beq.n	8006232 <setCommand+0xfe>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80061dc:	0022      	movs	r2, r4
 80061de:	49c2      	ldr	r1, [pc, #776]	; (80064e8 <setCommand+0x3b4>)
 80061e0:	0038      	movs	r0, r7
 80061e2:	f00e f8f1 	bl	80143c8 <strncmp>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d02f      	beq.n	800624a <setCommand+0x116>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80061ea:	0022      	movs	r2, r4
 80061ec:	49bf      	ldr	r1, [pc, #764]	; (80064ec <setCommand+0x3b8>)
 80061ee:	0038      	movs	r0, r7
 80061f0:	f00e f8ea 	bl	80143c8 <strncmp>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d034      	beq.n	8006262 <setCommand+0x12e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 80061f8:	220f      	movs	r2, #15
 80061fa:	49bd      	ldr	r1, [pc, #756]	; (80064f0 <setCommand+0x3bc>)
 80061fc:	9807      	ldr	r0, [sp, #28]
 80061fe:	f00d fe6a 	bl	8013ed6 <memcpy>
 8006202:	e22f      	b.n	8006664 <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006204:	4bbb      	ldr	r3, [pc, #748]	; (80064f4 <setCommand+0x3c0>)
 8006206:	2260      	movs	r2, #96	; 0x60
 8006208:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800620a:	7859      	ldrb	r1, [r3, #1]
 800620c:	0209      	lsls	r1, r1, #8
 800620e:	2360      	movs	r3, #96	; 0x60
 8006210:	4319      	orrs	r1, r3
 8006212:	308a      	adds	r0, #138	; 0x8a
 8006214:	0040      	lsls	r0, r0, #1
 8006216:	f005 fc9d 	bl	800bb54 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800621a:	4baa      	ldr	r3, [pc, #680]	; (80064c4 <setCommand+0x390>)
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	2300      	movs	r3, #0
 8006220:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006222:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006224:	4bac      	ldr	r3, [pc, #688]	; (80064d8 <setCommand+0x3a4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	49b3      	ldr	r1, [pc, #716]	; (80064f8 <setCommand+0x3c4>)
 800622a:	9807      	ldr	r0, [sp, #28]
 800622c:	f00e f888 	bl	8014340 <sprintf>
	return pdFALSE;
 8006230:	e218      	b.n	8006664 <setCommand+0x530>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006232:	4bb0      	ldr	r3, [pc, #704]	; (80064f4 <setCommand+0x3c0>)
 8006234:	2220      	movs	r2, #32
 8006236:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006238:	7859      	ldrb	r1, [r3, #1]
 800623a:	0209      	lsls	r1, r1, #8
 800623c:	2320      	movs	r3, #32
 800623e:	4319      	orrs	r1, r3
 8006240:	308a      	adds	r0, #138	; 0x8a
 8006242:	0040      	lsls	r0, r0, #1
 8006244:	f005 fc86 	bl	800bb54 <EE_WriteVariable>
 8006248:	e7e7      	b.n	800621a <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 800624a:	4baa      	ldr	r3, [pc, #680]	; (80064f4 <setCommand+0x3c0>)
 800624c:	2240      	movs	r2, #64	; 0x40
 800624e:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006250:	7859      	ldrb	r1, [r3, #1]
 8006252:	0209      	lsls	r1, r1, #8
 8006254:	2340      	movs	r3, #64	; 0x40
 8006256:	4319      	orrs	r1, r3
 8006258:	308a      	adds	r0, #138	; 0x8a
 800625a:	0040      	lsls	r0, r0, #1
 800625c:	f005 fc7a 	bl	800bb54 <EE_WriteVariable>
 8006260:	e7db      	b.n	800621a <setCommand+0xe6>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006262:	4ba4      	ldr	r3, [pc, #656]	; (80064f4 <setCommand+0x3c0>)
 8006264:	2200      	movs	r2, #0
 8006266:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006268:	7859      	ldrb	r1, [r3, #1]
 800626a:	0209      	lsls	r1, r1, #8
 800626c:	308a      	adds	r0, #138	; 0x8a
 800626e:	0040      	lsls	r0, r0, #1
 8006270:	f005 fc70 	bl	800bb54 <EE_WriteVariable>
 8006274:	e7d1      	b.n	800621a <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006276:	002a      	movs	r2, r5
 8006278:	49a0      	ldr	r1, [pc, #640]	; (80064fc <setCommand+0x3c8>)
 800627a:	0020      	movs	r0, r4
 800627c:	f00e f8a4 	bl	80143c8 <strncmp>
 8006280:	2800      	cmp	r0, #0
 8006282:	d149      	bne.n	8006318 <setCommand+0x1e4>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006284:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006286:	0022      	movs	r2, r4
 8006288:	4995      	ldr	r1, [pc, #596]	; (80064e0 <setCommand+0x3ac>)
 800628a:	0038      	movs	r0, r7
 800628c:	f00e f89c 	bl	80143c8 <strncmp>
 8006290:	2800      	cmp	r0, #0
 8006292:	d01d      	beq.n	80062d0 <setCommand+0x19c>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006294:	0022      	movs	r2, r4
 8006296:	4993      	ldr	r1, [pc, #588]	; (80064e4 <setCommand+0x3b0>)
 8006298:	0038      	movs	r0, r7
 800629a:	f00e f895 	bl	80143c8 <strncmp>
 800629e:	2800      	cmp	r0, #0
 80062a0:	d022      	beq.n	80062e8 <setCommand+0x1b4>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 80062a2:	0022      	movs	r2, r4
 80062a4:	498d      	ldr	r1, [pc, #564]	; (80064dc <setCommand+0x3a8>)
 80062a6:	0038      	movs	r0, r7
 80062a8:	f00e f88e 	bl	80143c8 <strncmp>
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d027      	beq.n	8006300 <setCommand+0x1cc>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80062b0:	0022      	movs	r2, r4
 80062b2:	498e      	ldr	r1, [pc, #568]	; (80064ec <setCommand+0x3b8>)
 80062b4:	0038      	movs	r0, r7
 80062b6:	f00e f887 	bl	80143c8 <strncmp>
 80062ba:	2800      	cmp	r0, #0
 80062bc:	d19c      	bne.n	80061f8 <setCommand+0xc4>
				BOSMessaging.trace =TRACE_NONE;
 80062be:	4b8d      	ldr	r3, [pc, #564]	; (80064f4 <setCommand+0x3c0>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062c4:	7819      	ldrb	r1, [r3, #0]
 80062c6:	308a      	adds	r0, #138	; 0x8a
 80062c8:	0040      	lsls	r0, r0, #1
 80062ca:	f005 fc43 	bl	800bb54 <EE_WriteVariable>
 80062ce:	e7a4      	b.n	800621a <setCommand+0xe6>
				BOSMessaging.trace =TRACE_BOTH;
 80062d0:	4b88      	ldr	r3, [pc, #544]	; (80064f4 <setCommand+0x3c0>)
 80062d2:	2203      	movs	r2, #3
 80062d4:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	21c0      	movs	r1, #192	; 0xc0
 80062da:	0089      	lsls	r1, r1, #2
 80062dc:	4319      	orrs	r1, r3
 80062de:	308a      	adds	r0, #138	; 0x8a
 80062e0:	0040      	lsls	r0, r0, #1
 80062e2:	f005 fc37 	bl	800bb54 <EE_WriteVariable>
 80062e6:	e798      	b.n	800621a <setCommand+0xe6>
				BOSMessaging.trace =TRACE_MESSAGE;
 80062e8:	4b82      	ldr	r3, [pc, #520]	; (80064f4 <setCommand+0x3c0>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	0049      	lsls	r1, r1, #1
 80062f4:	4319      	orrs	r1, r3
 80062f6:	308a      	adds	r0, #138	; 0x8a
 80062f8:	0040      	lsls	r0, r0, #1
 80062fa:	f005 fc2b 	bl	800bb54 <EE_WriteVariable>
 80062fe:	e78c      	b.n	800621a <setCommand+0xe6>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006300:	4b7c      	ldr	r3, [pc, #496]	; (80064f4 <setCommand+0x3c0>)
 8006302:	2202      	movs	r2, #2
 8006304:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	0089      	lsls	r1, r1, #2
 800630c:	4319      	orrs	r1, r3
 800630e:	308a      	adds	r0, #138	; 0x8a
 8006310:	0040      	lsls	r0, r0, #1
 8006312:	f005 fc1f 	bl	800bb54 <EE_WriteVariable>
 8006316:	e780      	b.n	800621a <setCommand+0xe6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006318:	002a      	movs	r2, r5
 800631a:	4979      	ldr	r1, [pc, #484]	; (8006500 <setCommand+0x3cc>)
 800631c:	0020      	movs	r0, r4
 800631e:	f00e f853 	bl	80143c8 <strncmp>
 8006322:	2800      	cmp	r0, #0
 8006324:	d02f      	beq.n	8006386 <setCommand+0x252>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006326:	002a      	movs	r2, r5
 8006328:	4976      	ldr	r1, [pc, #472]	; (8006504 <setCommand+0x3d0>)
 800632a:	0020      	movs	r0, r4
 800632c:	f00e f84c 	bl	80143c8 <strncmp>
 8006330:	2800      	cmp	r0, #0
 8006332:	d05b      	beq.n	80063ec <setCommand+0x2b8>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 8006334:	002a      	movs	r2, r5
 8006336:	4974      	ldr	r1, [pc, #464]	; (8006508 <setCommand+0x3d4>)
 8006338:	0020      	movs	r0, r4
 800633a:	f00e f845 	bl	80143c8 <strncmp>
 800633e:	2800      	cmp	r0, #0
 8006340:	d062      	beq.n	8006408 <setCommand+0x2d4>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006342:	002a      	movs	r2, r5
 8006344:	4971      	ldr	r1, [pc, #452]	; (800650c <setCommand+0x3d8>)
 8006346:	0020      	movs	r0, r4
 8006348:	f00e f83e 	bl	80143c8 <strncmp>
 800634c:	2800      	cmp	r0, #0
 800634e:	d069      	beq.n	8006424 <setCommand+0x2f0>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 8006350:	002a      	movs	r2, r5
 8006352:	496f      	ldr	r1, [pc, #444]	; (8006510 <setCommand+0x3dc>)
 8006354:	0020      	movs	r0, r4
 8006356:	f00e f837 	bl	80143c8 <strncmp>
 800635a:	2800      	cmp	r0, #0
 800635c:	d000      	beq.n	8006360 <setCommand+0x22c>
 800635e:	e714      	b.n	800618a <setCommand+0x56>
			temp16 =atoi((const char* )pcParameterString2);
 8006360:	0038      	movs	r0, r7
 8006362:	f00d fb28 	bl	80139b6 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006366:	1e43      	subs	r3, r0, #1
 8006368:	b29b      	uxth	r3, r3
 800636a:	2bfe      	cmp	r3, #254	; 0xfe
 800636c:	d900      	bls.n	8006370 <setCommand+0x23c>
 800636e:	e743      	b.n	80061f8 <setCommand+0xc4>
				BOS.buttons.maxInterClickTime =temp16;
 8006370:	4b68      	ldr	r3, [pc, #416]	; (8006514 <setCommand+0x3e0>)
 8006372:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 8006374:	0200      	lsls	r0, r0, #8
 8006376:	7919      	ldrb	r1, [r3, #4]
 8006378:	4301      	orrs	r1, r0
 800637a:	b289      	uxth	r1, r1
 800637c:	2018      	movs	r0, #24
 800637e:	30ff      	adds	r0, #255	; 0xff
 8006380:	f005 fbe8 	bl	800bb54 <EE_WriteVariable>
 8006384:	e749      	b.n	800621a <setCommand+0xe6>
			temp2 =atoi((const char* )pcParameterString2);
 8006386:	0038      	movs	r0, r7
 8006388:	f00d fb15 	bl	80139b6 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 800638c:	23e1      	movs	r3, #225	; 0xe1
 800638e:	031b      	lsls	r3, r3, #12
 8006390:	4298      	cmp	r0, r3
 8006392:	d900      	bls.n	8006396 <setCommand+0x262>
 8006394:	e730      	b.n	80061f8 <setCommand+0xc4>
				BOS.clibaudrate =temp2;
 8006396:	4c5f      	ldr	r4, [pc, #380]	; (8006514 <setCommand+0x3e0>)
 8006398:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 800639a:	b281      	uxth	r1, r0
 800639c:	208c      	movs	r0, #140	; 0x8c
 800639e:	0040      	lsls	r0, r0, #1
 80063a0:	f005 fbd8 	bl	800bb54 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80063a4:	8961      	ldrh	r1, [r4, #10]
 80063a6:	201a      	movs	r0, #26
 80063a8:	30ff      	adds	r0, #255	; 0xff
 80063aa:	f005 fbd3 	bl	800bb54 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80063ae:	4b45      	ldr	r3, [pc, #276]	; (80064c4 <setCommand+0x390>)
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	2300      	movs	r3, #0
 80063b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063b6:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80063b8:	4b47      	ldr	r3, [pc, #284]	; (80064d8 <setCommand+0x3a4>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	494e      	ldr	r1, [pc, #312]	; (80064f8 <setCommand+0x3c4>)
 80063be:	9c07      	ldr	r4, [sp, #28]
 80063c0:	0020      	movs	r0, r4
 80063c2:	f00d ffbd 	bl	8014340 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80063c6:	0020      	movs	r0, r4
 80063c8:	f7f9 fea6 	bl	8000118 <strlen>
 80063cc:	46a4      	mov	ip, r4
 80063ce:	4460      	add	r0, ip
 80063d0:	2230      	movs	r2, #48	; 0x30
 80063d2:	4951      	ldr	r1, [pc, #324]	; (8006518 <setCommand+0x3e4>)
 80063d4:	f00d fd7f 	bl	8013ed6 <memcpy>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80063d8:	0020      	movs	r0, r4
 80063da:	f7f9 fe9d 	bl	8000118 <strlen>
 80063de:	46a4      	mov	ip, r4
 80063e0:	4460      	add	r0, ip
 80063e2:	22b2      	movs	r2, #178	; 0xb2
 80063e4:	494d      	ldr	r1, [pc, #308]	; (800651c <setCommand+0x3e8>)
 80063e6:	f00d fd76 	bl	8013ed6 <memcpy>
 80063ea:	e13b      	b.n	8006664 <setCommand+0x530>
			temp16 =atoi((const char* )pcParameterString2);
 80063ec:	0038      	movs	r0, r7
 80063ee:	f00d fae2 	bl	80139b6 <atoi>
 80063f2:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d100      	bne.n	80063fa <setCommand+0x2c6>
 80063f8:	e6fe      	b.n	80061f8 <setCommand+0xc4>
				BOS.buttons.debounce =temp16;
 80063fa:	4b46      	ldr	r3, [pc, #280]	; (8006514 <setCommand+0x3e0>)
 80063fc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 80063fe:	2016      	movs	r0, #22
 8006400:	30ff      	adds	r0, #255	; 0xff
 8006402:	f005 fba7 	bl	800bb54 <EE_WriteVariable>
 8006406:	e708      	b.n	800621a <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 8006408:	0038      	movs	r0, r7
 800640a:	f00d fad4 	bl	80139b6 <atoi>
 800640e:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006410:	2900      	cmp	r1, #0
 8006412:	d100      	bne.n	8006416 <setCommand+0x2e2>
 8006414:	e6f0      	b.n	80061f8 <setCommand+0xc4>
				BOS.buttons.singleClickTime =temp16;
 8006416:	4b3f      	ldr	r3, [pc, #252]	; (8006514 <setCommand+0x3e0>)
 8006418:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800641a:	208b      	movs	r0, #139	; 0x8b
 800641c:	0040      	lsls	r0, r0, #1
 800641e:	f005 fb99 	bl	800bb54 <EE_WriteVariable>
 8006422:	e6fa      	b.n	800621a <setCommand+0xe6>
			temp16 =atoi((const char* )pcParameterString2);
 8006424:	0038      	movs	r0, r7
 8006426:	f00d fac6 	bl	80139b6 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800642a:	1e43      	subs	r3, r0, #1
 800642c:	b29b      	uxth	r3, r3
 800642e:	2bfe      	cmp	r3, #254	; 0xfe
 8006430:	d900      	bls.n	8006434 <setCommand+0x300>
 8006432:	e6e1      	b.n	80061f8 <setCommand+0xc4>
				BOS.buttons.minInterClickTime =temp16;
 8006434:	b2c0      	uxtb	r0, r0
 8006436:	4b37      	ldr	r3, [pc, #220]	; (8006514 <setCommand+0x3e0>)
 8006438:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800643a:	7959      	ldrb	r1, [r3, #5]
 800643c:	0209      	lsls	r1, r1, #8
 800643e:	4301      	orrs	r1, r0
 8006440:	2018      	movs	r0, #24
 8006442:	30ff      	adds	r0, #255	; 0xff
 8006444:	f005 fb86 	bl	800bb54 <EE_WriteVariable>
 8006448:	e6e7      	b.n	800621a <setCommand+0xe6>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800644a:	aa0c      	add	r2, sp, #48	; 0x30
 800644c:	2102      	movs	r1, #2
 800644e:	0028      	movs	r0, r5
 8006450:	f008 f89c 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006454:	4f20      	ldr	r7, [pc, #128]	; (80064d8 <setCommand+0x3a4>)
 8006456:	6038      	str	r0, [r7, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006458:	aa0b      	add	r2, sp, #44	; 0x2c
 800645a:	2103      	movs	r1, #3
 800645c:	0028      	movs	r0, r5
 800645e:	f008 f895 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006462:	4c2f      	ldr	r4, [pc, #188]	; (8006520 <setCommand+0x3ec>)
 8006464:	6020      	str	r0, [r4, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006466:	aa0a      	add	r2, sp, #40	; 0x28
 8006468:	2104      	movs	r1, #4
 800646a:	0028      	movs	r0, r5
 800646c:	f008 f88e 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006470:	4e2c      	ldr	r6, [pc, #176]	; (8006524 <setCommand+0x3f0>)
 8006472:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006474:	aa09      	add	r2, sp, #36	; 0x24
 8006476:	2105      	movs	r1, #5
 8006478:	0028      	movs	r0, r5
 800647a:	f008 f887 	bl	800e58c <FreeRTOS_CLIGetParameter>
 800647e:	4d2a      	ldr	r5, [pc, #168]	; (8006528 <setCommand+0x3f4>)
 8006480:	6028      	str	r0, [r5, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006482:	6838      	ldr	r0, [r7, #0]
 8006484:	f00d fa97 	bl	80139b6 <atoi>
 8006488:	b2c7      	uxtb	r7, r0
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	f00d fa93 	bl	80139b6 <atoi>
 8006490:	0004      	movs	r4, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006492:	6830      	ldr	r0, [r6, #0]
 8006494:	f00d fa8f 	bl	80139b6 <atoi>
 8006498:	0006      	movs	r6, r0
		if(pcParameterString5 != NULL){
 800649a:	682d      	ldr	r5, [r5, #0]
 800649c:	2d00      	cmp	r5, #0
 800649e:	d04b      	beq.n	8006538 <setCommand+0x404>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 80064a0:	2202      	movs	r2, #2
 80064a2:	4922      	ldr	r1, [pc, #136]	; (800652c <setCommand+0x3f8>)
 80064a4:	0028      	movs	r0, r5
 80064a6:	f00d ff8f 	bl	80143c8 <strncmp>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d042      	beq.n	8006534 <setCommand+0x400>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 80064ae:	2202      	movs	r2, #2
 80064b0:	491f      	ldr	r1, [pc, #124]	; (8006530 <setCommand+0x3fc>)
 80064b2:	0028      	movs	r0, r5
 80064b4:	f00d ff88 	bl	80143c8 <strncmp>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d000      	beq.n	80064be <setCommand+0x38a>
 80064bc:	e69c      	b.n	80061f8 <setCommand+0xc4>
				temp84 =RTC_PM;
 80064be:	2302      	movs	r3, #2
 80064c0:	4699      	mov	r9, r3
 80064c2:	e039      	b.n	8006538 <setCommand+0x404>
 80064c4:	200019b0 	.word	0x200019b0
 80064c8:	08019928 	.word	0x08019928
 80064cc:	0801a054 	.word	0x0801a054
 80064d0:	0801a060 	.word	0x0801a060
 80064d4:	080199b0 	.word	0x080199b0
 80064d8:	200019bc 	.word	0x200019bc
 80064dc:	08019930 	.word	0x08019930
 80064e0:	08018a9c 	.word	0x08018a9c
 80064e4:	08019f50 	.word	0x08019f50
 80064e8:	08019f58 	.word	0x08019f58
 80064ec:	08019940 	.word	0x08019940
 80064f0:	0801981c 	.word	0x0801981c
 80064f4:	2000698c 	.word	0x2000698c
 80064f8:	08019f5c 	.word	0x08019f5c
 80064fc:	08019948 	.word	0x08019948
 8006500:	08019950 	.word	0x08019950
 8006504:	0801995c 	.word	0x0801995c
 8006508:	08019968 	.word	0x08019968
 800650c:	08019978 	.word	0x08019978
 8006510:	0801998c 	.word	0x0801998c
 8006514:	20006a0c 	.word	0x20006a0c
 8006518:	08019f70 	.word	0x08019f70
 800651c:	08019fa0 	.word	0x08019fa0
 8006520:	200019c4 	.word	0x200019c4
 8006524:	200019c8 	.word	0x200019c8
 8006528:	200019cc 	.word	0x200019cc
 800652c:	0801b4c0 	.word	0x0801b4c0
 8006530:	0801a05c 	.word	0x0801a05c
				temp84 =RTC_AM;
 8006534:	2301      	movs	r3, #1
 8006536:	4699      	mov	r9, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006538:	2f17      	cmp	r7, #23
 800653a:	d900      	bls.n	800653e <setCommand+0x40a>
 800653c:	e65c      	b.n	80061f8 <setCommand+0xc4>
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800653e:	b2e4      	uxtb	r4, r4
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006540:	2c3b      	cmp	r4, #59	; 0x3b
 8006542:	d900      	bls.n	8006546 <setCommand+0x412>
 8006544:	e658      	b.n	80061f8 <setCommand+0xc4>
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006546:	b2f5      	uxtb	r5, r6
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006548:	2d3b      	cmp	r5, #59	; 0x3b
 800654a:	d900      	bls.n	800654e <setCommand+0x41a>
 800654c:	e654      	b.n	80061f8 <setCommand+0xc4>
				GetTimeDate();
 800654e:	f007 fadd 	bl	800db0c <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 8006552:	4bd0      	ldr	r3, [pc, #832]	; (8006894 <setCommand+0x760>)
 8006554:	7d1a      	ldrb	r2, [r3, #20]
 8006556:	4694      	mov	ip, r2
 8006558:	8b1a      	ldrh	r2, [r3, #24]
 800655a:	7d59      	ldrb	r1, [r3, #21]
 800655c:	7d98      	ldrb	r0, [r3, #22]
 800655e:	7b1b      	ldrb	r3, [r3, #12]
 8006560:	b25b      	sxtb	r3, r3
 8006562:	9304      	str	r3, [sp, #16]
 8006564:	464b      	mov	r3, r9
 8006566:	9303      	str	r3, [sp, #12]
 8006568:	9702      	str	r7, [sp, #8]
 800656a:	9401      	str	r4, [sp, #4]
 800656c:	9500      	str	r5, [sp, #0]
 800656e:	4663      	mov	r3, ip
 8006570:	f007 fa72 	bl	800da58 <BOS_CalendarConfig>
 8006574:	0007      	movs	r7, r0
	if(result == BOS_OK){
 8006576:	2f00      	cmp	r7, #0
 8006578:	d100      	bne.n	800657c <setCommand+0x448>
 800657a:	e64e      	b.n	800621a <setCommand+0xe6>
 800657c:	e06c      	b.n	8006658 <setCommand+0x524>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800657e:	aa0c      	add	r2, sp, #48	; 0x30
 8006580:	2102      	movs	r1, #2
 8006582:	0028      	movs	r0, r5
 8006584:	f008 f802 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006588:	4cc3      	ldr	r4, [pc, #780]	; (8006898 <setCommand+0x764>)
 800658a:	6020      	str	r0, [r4, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 800658c:	aa0b      	add	r2, sp, #44	; 0x2c
 800658e:	2103      	movs	r1, #3
 8006590:	0028      	movs	r0, r5
 8006592:	f007 fffb 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006596:	4bc1      	ldr	r3, [pc, #772]	; (800689c <setCommand+0x768>)
 8006598:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 800659a:	aa0a      	add	r2, sp, #40	; 0x28
 800659c:	2104      	movs	r1, #4
 800659e:	0028      	movs	r0, r5
 80065a0:	f007 fff4 	bl	800e58c <FreeRTOS_CLIGetParameter>
 80065a4:	4bbe      	ldr	r3, [pc, #760]	; (80068a0 <setCommand+0x76c>)
 80065a6:	4699      	mov	r9, r3
 80065a8:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 80065aa:	aa09      	add	r2, sp, #36	; 0x24
 80065ac:	2105      	movs	r1, #5
 80065ae:	0028      	movs	r0, r5
 80065b0:	f007 ffec 	bl	800e58c <FreeRTOS_CLIGetParameter>
 80065b4:	4fbb      	ldr	r7, [pc, #748]	; (80068a4 <setCommand+0x770>)
 80065b6:	6038      	str	r0, [r7, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 80065b8:	464b      	mov	r3, r9
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	f00d f9fb 	bl	80139b6 <atoi>
 80065c0:	0005      	movs	r5, r0
		temp16 =atoi((const char* )pcParameterString5);		// year
 80065c2:	6838      	ldr	r0, [r7, #0]
 80065c4:	f00d f9f7 	bl	80139b6 <atoi>
 80065c8:	0006      	movs	r6, r0
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 80065ca:	6824      	ldr	r4, [r4, #0]
 80065cc:	2206      	movs	r2, #6
 80065ce:	49b6      	ldr	r1, [pc, #728]	; (80068a8 <setCommand+0x774>)
 80065d0:	0020      	movs	r0, r4
 80065d2:	f00d fef9 	bl	80143c8 <strncmp>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d100      	bne.n	80065dc <setCommand+0x4a8>
 80065da:	e096      	b.n	800670a <setCommand+0x5d6>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 80065dc:	2207      	movs	r2, #7
 80065de:	49b3      	ldr	r1, [pc, #716]	; (80068ac <setCommand+0x778>)
 80065e0:	0020      	movs	r0, r4
 80065e2:	f00d fef1 	bl	80143c8 <strncmp>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d100      	bne.n	80065ec <setCommand+0x4b8>
 80065ea:	e14f      	b.n	800688c <setCommand+0x758>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 80065ec:	2209      	movs	r2, #9
 80065ee:	49b0      	ldr	r1, [pc, #704]	; (80068b0 <setCommand+0x77c>)
 80065f0:	0020      	movs	r0, r4
 80065f2:	f00d fee9 	bl	80143c8 <strncmp>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d100      	bne.n	80065fc <setCommand+0x4c8>
 80065fa:	e195      	b.n	8006928 <setCommand+0x7f4>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 80065fc:	2208      	movs	r2, #8
 80065fe:	49ad      	ldr	r1, [pc, #692]	; (80068b4 <setCommand+0x780>)
 8006600:	0020      	movs	r0, r4
 8006602:	f00d fee1 	bl	80143c8 <strncmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	d100      	bne.n	800660c <setCommand+0x4d8>
 800660a:	e190      	b.n	800692e <setCommand+0x7fa>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 800660c:	2206      	movs	r2, #6
 800660e:	49aa      	ldr	r1, [pc, #680]	; (80068b8 <setCommand+0x784>)
 8006610:	0020      	movs	r0, r4
 8006612:	f00d fed9 	bl	80143c8 <strncmp>
 8006616:	2800      	cmp	r0, #0
 8006618:	d100      	bne.n	800661c <setCommand+0x4e8>
 800661a:	e18b      	b.n	8006934 <setCommand+0x800>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 800661c:	2208      	movs	r2, #8
 800661e:	49a7      	ldr	r1, [pc, #668]	; (80068bc <setCommand+0x788>)
 8006620:	0020      	movs	r0, r4
 8006622:	f00d fed1 	bl	80143c8 <strncmp>
 8006626:	2800      	cmp	r0, #0
 8006628:	d100      	bne.n	800662c <setCommand+0x4f8>
 800662a:	e186      	b.n	800693a <setCommand+0x806>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 800662c:	2206      	movs	r2, #6
 800662e:	49a4      	ldr	r1, [pc, #656]	; (80068c0 <setCommand+0x78c>)
 8006630:	0020      	movs	r0, r4
 8006632:	f00d fec9 	bl	80143c8 <strncmp>
 8006636:	2800      	cmp	r0, #0
 8006638:	d100      	bne.n	800663c <setCommand+0x508>
 800663a:	e181      	b.n	8006940 <setCommand+0x80c>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800663c:	4b97      	ldr	r3, [pc, #604]	; (800689c <setCommand+0x768>)
 800663e:	681c      	ldr	r4, [r3, #0]
 8006640:	2207      	movs	r2, #7
 8006642:	49a0      	ldr	r1, [pc, #640]	; (80068c4 <setCommand+0x790>)
 8006644:	0020      	movs	r0, r4
 8006646:	f00d febf 	bl	80143c8 <strncmp>
			result =BOS_ERR_WrongValue;
 800664a:	2768      	movs	r7, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800664c:	2800      	cmp	r0, #0
 800664e:	d003      	beq.n	8006658 <setCommand+0x524>
 8006650:	e067      	b.n	8006722 <setCommand+0x5ee>
			temp82 =JANUARY;
 8006652:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006654:	2f00      	cmp	r7, #0
 8006656:	d036      	beq.n	80066c6 <setCommand+0x592>
	else if(result == BOS_ERR_WrongParam)
 8006658:	2f67      	cmp	r7, #103	; 0x67
 800665a:	d100      	bne.n	800665e <setCommand+0x52a>
 800665c:	e595      	b.n	800618a <setCommand+0x56>
	else if(result == BOS_ERR_WrongValue)
 800665e:	2f68      	cmp	r7, #104	; 0x68
 8006660:	d100      	bne.n	8006664 <setCommand+0x530>
 8006662:	e5c9      	b.n	80061f8 <setCommand+0xc4>
}
 8006664:	2000      	movs	r0, #0
 8006666:	b00f      	add	sp, #60	; 0x3c
 8006668:	bc0c      	pop	{r2, r3}
 800666a:	4690      	mov	r8, r2
 800666c:	4699      	mov	r9, r3
 800666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			temp82 =FEBRUARY;
 8006670:	2402      	movs	r4, #2
 8006672:	e7ef      	b.n	8006654 <setCommand+0x520>
 8006674:	2402      	movs	r4, #2
 8006676:	e7ed      	b.n	8006654 <setCommand+0x520>
			temp82 =MARCH;
 8006678:	2403      	movs	r4, #3
 800667a:	e7eb      	b.n	8006654 <setCommand+0x520>
 800667c:	2403      	movs	r4, #3
 800667e:	e7e9      	b.n	8006654 <setCommand+0x520>
			temp82 =APRIL;
 8006680:	2404      	movs	r4, #4
 8006682:	e7e7      	b.n	8006654 <setCommand+0x520>
 8006684:	2404      	movs	r4, #4
 8006686:	e7e5      	b.n	8006654 <setCommand+0x520>
			temp82 =MAY;
 8006688:	2405      	movs	r4, #5
 800668a:	e7e3      	b.n	8006654 <setCommand+0x520>
 800668c:	2405      	movs	r4, #5
 800668e:	e7e1      	b.n	8006654 <setCommand+0x520>
			temp82 =JUNE;
 8006690:	2406      	movs	r4, #6
 8006692:	e7df      	b.n	8006654 <setCommand+0x520>
 8006694:	2406      	movs	r4, #6
 8006696:	e7dd      	b.n	8006654 <setCommand+0x520>
			temp82 =JULY;
 8006698:	2407      	movs	r4, #7
 800669a:	e7db      	b.n	8006654 <setCommand+0x520>
 800669c:	2407      	movs	r4, #7
 800669e:	e7d9      	b.n	8006654 <setCommand+0x520>
			temp82 =AUGUST;
 80066a0:	2408      	movs	r4, #8
 80066a2:	e7d7      	b.n	8006654 <setCommand+0x520>
 80066a4:	2408      	movs	r4, #8
 80066a6:	e7d5      	b.n	8006654 <setCommand+0x520>
			temp82 =SEPTEMBER;
 80066a8:	2409      	movs	r4, #9
 80066aa:	e7d3      	b.n	8006654 <setCommand+0x520>
 80066ac:	2409      	movs	r4, #9
 80066ae:	e7d1      	b.n	8006654 <setCommand+0x520>
			temp82 =OCTOBER;
 80066b0:	240a      	movs	r4, #10
 80066b2:	e7cf      	b.n	8006654 <setCommand+0x520>
 80066b4:	240a      	movs	r4, #10
 80066b6:	e7cd      	b.n	8006654 <setCommand+0x520>
			temp82 =NOVEMBER;
 80066b8:	240b      	movs	r4, #11
 80066ba:	e7cb      	b.n	8006654 <setCommand+0x520>
 80066bc:	240b      	movs	r4, #11
 80066be:	e7c9      	b.n	8006654 <setCommand+0x520>
			temp82 =DECEMBER;
 80066c0:	240c      	movs	r4, #12
 80066c2:	e7c7      	b.n	8006654 <setCommand+0x520>
			temp82 =JANUARY;
 80066c4:	2401      	movs	r4, #1
		temp83 =atoi((const char* )pcParameterString4);		// day
 80066c6:	b2ed      	uxtb	r5, r5
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066c8:	1e6b      	subs	r3, r5, #1
 80066ca:	2b1e      	cmp	r3, #30
 80066cc:	d900      	bls.n	80066d0 <setCommand+0x59c>
 80066ce:	e593      	b.n	80061f8 <setCommand+0xc4>
		temp16 =atoi((const char* )pcParameterString5);		// year
 80066d0:	b2b7      	uxth	r7, r6
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 80066d2:	4b7d      	ldr	r3, [pc, #500]	; (80068c8 <setCommand+0x794>)
 80066d4:	18fb      	adds	r3, r7, r3
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	2b64      	cmp	r3, #100	; 0x64
 80066da:	d900      	bls.n	80066de <setCommand+0x5aa>
 80066dc:	e58c      	b.n	80061f8 <setCommand+0xc4>
				GetTimeDate();
 80066de:	f007 fa15 	bl	800db0c <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 80066e2:	4b6c      	ldr	r3, [pc, #432]	; (8006894 <setCommand+0x760>)
 80066e4:	220c      	movs	r2, #12
 80066e6:	569a      	ldrsb	r2, [r3, r2]
 80066e8:	9204      	str	r2, [sp, #16]
 80066ea:	7cda      	ldrb	r2, [r3, #19]
 80066ec:	9203      	str	r2, [sp, #12]
 80066ee:	7c9a      	ldrb	r2, [r3, #18]
 80066f0:	9202      	str	r2, [sp, #8]
 80066f2:	7c5a      	ldrb	r2, [r3, #17]
 80066f4:	9201      	str	r2, [sp, #4]
 80066f6:	7c1b      	ldrb	r3, [r3, #16]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	4643      	mov	r3, r8
 80066fc:	003a      	movs	r2, r7
 80066fe:	0029      	movs	r1, r5
 8006700:	0020      	movs	r0, r4
 8006702:	f007 f9a9 	bl	800da58 <BOS_CalendarConfig>
 8006706:	0007      	movs	r7, r0
 8006708:	e735      	b.n	8006576 <setCommand+0x442>
			temp81 =MONDAY;
 800670a:	2301      	movs	r3, #1
 800670c:	4698      	mov	r8, r3
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 800670e:	4b63      	ldr	r3, [pc, #396]	; (800689c <setCommand+0x768>)
 8006710:	681c      	ldr	r4, [r3, #0]
 8006712:	2207      	movs	r2, #7
 8006714:	496b      	ldr	r1, [pc, #428]	; (80068c4 <setCommand+0x790>)
 8006716:	0020      	movs	r0, r4
 8006718:	f00d fe56 	bl	80143c8 <strncmp>
 800671c:	2700      	movs	r7, #0
 800671e:	2800      	cmp	r0, #0
 8006720:	d0d0      	beq.n	80066c4 <setCommand+0x590>
 8006722:	2202      	movs	r2, #2
 8006724:	4969      	ldr	r1, [pc, #420]	; (80068cc <setCommand+0x798>)
 8006726:	0020      	movs	r0, r4
 8006728:	f00d fe4e 	bl	80143c8 <strncmp>
 800672c:	2800      	cmp	r0, #0
 800672e:	d100      	bne.n	8006732 <setCommand+0x5fe>
 8006730:	e78f      	b.n	8006652 <setCommand+0x51e>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 8006732:	2208      	movs	r2, #8
 8006734:	4966      	ldr	r1, [pc, #408]	; (80068d0 <setCommand+0x79c>)
 8006736:	0020      	movs	r0, r4
 8006738:	f00d fe46 	bl	80143c8 <strncmp>
 800673c:	2800      	cmp	r0, #0
 800673e:	d097      	beq.n	8006670 <setCommand+0x53c>
 8006740:	2202      	movs	r2, #2
 8006742:	4964      	ldr	r1, [pc, #400]	; (80068d4 <setCommand+0x7a0>)
 8006744:	0020      	movs	r0, r4
 8006746:	f00d fe3f 	bl	80143c8 <strncmp>
 800674a:	2800      	cmp	r0, #0
 800674c:	d092      	beq.n	8006674 <setCommand+0x540>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 800674e:	2205      	movs	r2, #5
 8006750:	4961      	ldr	r1, [pc, #388]	; (80068d8 <setCommand+0x7a4>)
 8006752:	0020      	movs	r0, r4
 8006754:	f00d fe38 	bl	80143c8 <strncmp>
 8006758:	2800      	cmp	r0, #0
 800675a:	d08d      	beq.n	8006678 <setCommand+0x544>
 800675c:	2202      	movs	r2, #2
 800675e:	495f      	ldr	r1, [pc, #380]	; (80068dc <setCommand+0x7a8>)
 8006760:	0020      	movs	r0, r4
 8006762:	f00d fe31 	bl	80143c8 <strncmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	d088      	beq.n	800667c <setCommand+0x548>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800676a:	2205      	movs	r2, #5
 800676c:	495c      	ldr	r1, [pc, #368]	; (80068e0 <setCommand+0x7ac>)
 800676e:	0020      	movs	r0, r4
 8006770:	f00d fe2a 	bl	80143c8 <strncmp>
 8006774:	2800      	cmp	r0, #0
 8006776:	d083      	beq.n	8006680 <setCommand+0x54c>
 8006778:	2202      	movs	r2, #2
 800677a:	495a      	ldr	r1, [pc, #360]	; (80068e4 <setCommand+0x7b0>)
 800677c:	0020      	movs	r0, r4
 800677e:	f00d fe23 	bl	80143c8 <strncmp>
 8006782:	2800      	cmp	r0, #0
 8006784:	d100      	bne.n	8006788 <setCommand+0x654>
 8006786:	e77d      	b.n	8006684 <setCommand+0x550>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 8006788:	2203      	movs	r2, #3
 800678a:	4957      	ldr	r1, [pc, #348]	; (80068e8 <setCommand+0x7b4>)
 800678c:	0020      	movs	r0, r4
 800678e:	f00d fe1b 	bl	80143c8 <strncmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	d100      	bne.n	8006798 <setCommand+0x664>
 8006796:	e777      	b.n	8006688 <setCommand+0x554>
 8006798:	2202      	movs	r2, #2
 800679a:	4954      	ldr	r1, [pc, #336]	; (80068ec <setCommand+0x7b8>)
 800679c:	0020      	movs	r0, r4
 800679e:	f00d fe13 	bl	80143c8 <strncmp>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	d100      	bne.n	80067a8 <setCommand+0x674>
 80067a6:	e771      	b.n	800668c <setCommand+0x558>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 80067a8:	2204      	movs	r2, #4
 80067aa:	4951      	ldr	r1, [pc, #324]	; (80068f0 <setCommand+0x7bc>)
 80067ac:	0020      	movs	r0, r4
 80067ae:	f00d fe0b 	bl	80143c8 <strncmp>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d100      	bne.n	80067b8 <setCommand+0x684>
 80067b6:	e76b      	b.n	8006690 <setCommand+0x55c>
 80067b8:	2202      	movs	r2, #2
 80067ba:	494e      	ldr	r1, [pc, #312]	; (80068f4 <setCommand+0x7c0>)
 80067bc:	0020      	movs	r0, r4
 80067be:	f00d fe03 	bl	80143c8 <strncmp>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d100      	bne.n	80067c8 <setCommand+0x694>
 80067c6:	e765      	b.n	8006694 <setCommand+0x560>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 80067c8:	2204      	movs	r2, #4
 80067ca:	494b      	ldr	r1, [pc, #300]	; (80068f8 <setCommand+0x7c4>)
 80067cc:	0020      	movs	r0, r4
 80067ce:	f00d fdfb 	bl	80143c8 <strncmp>
 80067d2:	2800      	cmp	r0, #0
 80067d4:	d100      	bne.n	80067d8 <setCommand+0x6a4>
 80067d6:	e75f      	b.n	8006698 <setCommand+0x564>
 80067d8:	2202      	movs	r2, #2
 80067da:	4948      	ldr	r1, [pc, #288]	; (80068fc <setCommand+0x7c8>)
 80067dc:	0020      	movs	r0, r4
 80067de:	f00d fdf3 	bl	80143c8 <strncmp>
 80067e2:	2800      	cmp	r0, #0
 80067e4:	d100      	bne.n	80067e8 <setCommand+0x6b4>
 80067e6:	e759      	b.n	800669c <setCommand+0x568>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 80067e8:	2205      	movs	r2, #5
 80067ea:	4945      	ldr	r1, [pc, #276]	; (8006900 <setCommand+0x7cc>)
 80067ec:	0020      	movs	r0, r4
 80067ee:	f00d fdeb 	bl	80143c8 <strncmp>
 80067f2:	2800      	cmp	r0, #0
 80067f4:	d100      	bne.n	80067f8 <setCommand+0x6c4>
 80067f6:	e753      	b.n	80066a0 <setCommand+0x56c>
 80067f8:	2202      	movs	r2, #2
 80067fa:	4942      	ldr	r1, [pc, #264]	; (8006904 <setCommand+0x7d0>)
 80067fc:	0020      	movs	r0, r4
 80067fe:	f00d fde3 	bl	80143c8 <strncmp>
 8006802:	2800      	cmp	r0, #0
 8006804:	d100      	bne.n	8006808 <setCommand+0x6d4>
 8006806:	e74d      	b.n	80066a4 <setCommand+0x570>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 8006808:	2209      	movs	r2, #9
 800680a:	493f      	ldr	r1, [pc, #252]	; (8006908 <setCommand+0x7d4>)
 800680c:	0020      	movs	r0, r4
 800680e:	f00d fddb 	bl	80143c8 <strncmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	d100      	bne.n	8006818 <setCommand+0x6e4>
 8006816:	e747      	b.n	80066a8 <setCommand+0x574>
 8006818:	2202      	movs	r2, #2
 800681a:	493c      	ldr	r1, [pc, #240]	; (800690c <setCommand+0x7d8>)
 800681c:	0020      	movs	r0, r4
 800681e:	f00d fdd3 	bl	80143c8 <strncmp>
 8006822:	2800      	cmp	r0, #0
 8006824:	d100      	bne.n	8006828 <setCommand+0x6f4>
 8006826:	e741      	b.n	80066ac <setCommand+0x578>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 8006828:	2207      	movs	r2, #7
 800682a:	4939      	ldr	r1, [pc, #228]	; (8006910 <setCommand+0x7dc>)
 800682c:	0020      	movs	r0, r4
 800682e:	f00d fdcb 	bl	80143c8 <strncmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	d100      	bne.n	8006838 <setCommand+0x704>
 8006836:	e73b      	b.n	80066b0 <setCommand+0x57c>
 8006838:	2202      	movs	r2, #2
 800683a:	4936      	ldr	r1, [pc, #216]	; (8006914 <setCommand+0x7e0>)
 800683c:	0020      	movs	r0, r4
 800683e:	f00d fdc3 	bl	80143c8 <strncmp>
 8006842:	2800      	cmp	r0, #0
 8006844:	d100      	bne.n	8006848 <setCommand+0x714>
 8006846:	e735      	b.n	80066b4 <setCommand+0x580>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 8006848:	2208      	movs	r2, #8
 800684a:	4933      	ldr	r1, [pc, #204]	; (8006918 <setCommand+0x7e4>)
 800684c:	0020      	movs	r0, r4
 800684e:	f00d fdbb 	bl	80143c8 <strncmp>
 8006852:	2800      	cmp	r0, #0
 8006854:	d100      	bne.n	8006858 <setCommand+0x724>
 8006856:	e72f      	b.n	80066b8 <setCommand+0x584>
 8006858:	2202      	movs	r2, #2
 800685a:	4930      	ldr	r1, [pc, #192]	; (800691c <setCommand+0x7e8>)
 800685c:	0020      	movs	r0, r4
 800685e:	f00d fdb3 	bl	80143c8 <strncmp>
 8006862:	2800      	cmp	r0, #0
 8006864:	d100      	bne.n	8006868 <setCommand+0x734>
 8006866:	e729      	b.n	80066bc <setCommand+0x588>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006868:	2208      	movs	r2, #8
 800686a:	492d      	ldr	r1, [pc, #180]	; (8006920 <setCommand+0x7ec>)
 800686c:	0020      	movs	r0, r4
 800686e:	f00d fdab 	bl	80143c8 <strncmp>
 8006872:	2800      	cmp	r0, #0
 8006874:	d100      	bne.n	8006878 <setCommand+0x744>
 8006876:	e723      	b.n	80066c0 <setCommand+0x58c>
 8006878:	2202      	movs	r2, #2
 800687a:	492a      	ldr	r1, [pc, #168]	; (8006924 <setCommand+0x7f0>)
 800687c:	0020      	movs	r0, r4
 800687e:	f00d fda3 	bl	80143c8 <strncmp>
			temp82 =DECEMBER;
 8006882:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006884:	2800      	cmp	r0, #0
 8006886:	d100      	bne.n	800688a <setCommand+0x756>
 8006888:	e6e4      	b.n	8006654 <setCommand+0x520>
 800688a:	e4b5      	b.n	80061f8 <setCommand+0xc4>
			temp81 =TUESDAY;
 800688c:	2302      	movs	r3, #2
 800688e:	4698      	mov	r8, r3
 8006890:	e73d      	b.n	800670e <setCommand+0x5da>
 8006892:	46c0      	nop			; (mov r8, r8)
 8006894:	20006a0c 	.word	0x20006a0c
 8006898:	200019bc 	.word	0x200019bc
 800689c:	200019c4 	.word	0x200019c4
 80068a0:	200019c8 	.word	0x200019c8
 80068a4:	200019cc 	.word	0x200019cc
 80068a8:	0801a068 	.word	0x0801a068
 80068ac:	0801a070 	.word	0x0801a070
 80068b0:	0801a078 	.word	0x0801a078
 80068b4:	0801a084 	.word	0x0801a084
 80068b8:	0801a090 	.word	0x0801a090
 80068bc:	0801a098 	.word	0x0801a098
 80068c0:	0801a0a4 	.word	0x0801a0a4
 80068c4:	0801a140 	.word	0x0801a140
 80068c8:	fffff830 	.word	0xfffff830
 80068cc:	0801a0ac 	.word	0x0801a0ac
 80068d0:	0801a0b0 	.word	0x0801a0b0
 80068d4:	0801a0bc 	.word	0x0801a0bc
 80068d8:	0801a0c0 	.word	0x0801a0c0
 80068dc:	0801a0c8 	.word	0x0801a0c8
 80068e0:	0801a0cc 	.word	0x0801a0cc
 80068e4:	0801a0d4 	.word	0x0801a0d4
 80068e8:	0801a0d8 	.word	0x0801a0d8
 80068ec:	0801a0dc 	.word	0x0801a0dc
 80068f0:	0801a0e0 	.word	0x0801a0e0
 80068f4:	0801a0e8 	.word	0x0801a0e8
 80068f8:	0801a0ec 	.word	0x0801a0ec
 80068fc:	0801a0f4 	.word	0x0801a0f4
 8006900:	0801a0f8 	.word	0x0801a0f8
 8006904:	0801a100 	.word	0x0801a100
 8006908:	0801a104 	.word	0x0801a104
 800690c:	0801a110 	.word	0x0801a110
 8006910:	0801a114 	.word	0x0801a114
 8006914:	0801a11c 	.word	0x0801a11c
 8006918:	0801a120 	.word	0x0801a120
 800691c:	0801a12c 	.word	0x0801a12c
 8006920:	0801a130 	.word	0x0801a130
 8006924:	0801a13c 	.word	0x0801a13c
			temp81 =WEDNESDAY;
 8006928:	2303      	movs	r3, #3
 800692a:	4698      	mov	r8, r3
 800692c:	e6ef      	b.n	800670e <setCommand+0x5da>
			temp81 =THURSDAY;
 800692e:	2304      	movs	r3, #4
 8006930:	4698      	mov	r8, r3
 8006932:	e6ec      	b.n	800670e <setCommand+0x5da>
			temp81 =FRIDAY;
 8006934:	2305      	movs	r3, #5
 8006936:	4698      	mov	r8, r3
 8006938:	e6e9      	b.n	800670e <setCommand+0x5da>
			temp81 =SATURDAY;
 800693a:	2306      	movs	r3, #6
 800693c:	4698      	mov	r8, r3
 800693e:	e6e6      	b.n	800670e <setCommand+0x5da>
			temp81 =SUNDAY;
 8006940:	2307      	movs	r3, #7
 8006942:	4698      	mov	r8, r3
 8006944:	e6e3      	b.n	800670e <setCommand+0x5da>
 8006946:	46c0      	nop			; (mov r8, r8)

08006948 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006948:	b530      	push	{r4, r5, lr}
 800694a:	b083      	sub	sp, #12
 800694c:	0005      	movs	r5, r0
 800694e:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006950:	2300      	movs	r3, #0
 8006952:	9301      	str	r3, [sp, #4]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006954:	aa01      	add	r2, sp, #4
 8006956:	2101      	movs	r1, #1
 8006958:	f007 fe18 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800695c:	2300      	movs	r3, #0
 800695e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006960:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006962:	2b70      	cmp	r3, #112	; 0x70
 8006964:	d007      	beq.n	8006976 <removebuttonCommand+0x2e>
	result =RemovePortButton(port);
 8006966:	0020      	movs	r0, r4
 8006968:	f005 fedc 	bl	800c724 <RemovePortButton>
	if(result == BOS_OK){
 800696c:	2800      	cmp	r0, #0
 800696e:	d007      	beq.n	8006980 <removebuttonCommand+0x38>
}
 8006970:	2000      	movs	r0, #0
 8006972:	b003      	add	sp, #12
 8006974:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006976:	3001      	adds	r0, #1
 8006978:	f00d f823 	bl	80139c2 <atol>
 800697c:	b2c4      	uxtb	r4, r0
 800697e:	e7f2      	b.n	8006966 <removebuttonCommand+0x1e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006980:	0023      	movs	r3, r4
 8006982:	0022      	movs	r2, r4
 8006984:	4902      	ldr	r1, [pc, #8]	; (8006990 <removebuttonCommand+0x48>)
 8006986:	0028      	movs	r0, r5
 8006988:	f00d fcda 	bl	8014340 <sprintf>
 800698c:	e7f0      	b.n	8006970 <removebuttonCommand+0x28>
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	08019e00 	.word	0x08019e00

08006994 <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006996:	b087      	sub	sp, #28
 8006998:	9003      	str	r0, [sp, #12]
 800699a:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 800699c:	2300      	movs	r3, #0
 800699e:	9305      	str	r3, [sp, #20]
 80069a0:	9304      	str	r3, [sp, #16]
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80069a2:	aa05      	add	r2, sp, #20
 80069a4:	2101      	movs	r1, #1
 80069a6:	0030      	movs	r0, r6
 80069a8:	f007 fdf0 	bl	800e58c <FreeRTOS_CLIGetParameter>
 80069ac:	0004      	movs	r4, r0
 80069ae:	4b23      	ldr	r3, [pc, #140]	; (8006a3c <addbuttonCommand+0xa8>)
 80069b0:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 80069b2:	9f05      	ldr	r7, [sp, #20]
 80069b4:	003a      	movs	r2, r7
 80069b6:	4922      	ldr	r1, [pc, #136]	; (8006a40 <addbuttonCommand+0xac>)
 80069b8:	f00d fd06 	bl	80143c8 <strncmp>
		type =MOMENTARY_NO;
 80069bc:	2501      	movs	r5, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 80069be:	2800      	cmp	r0, #0
 80069c0:	d017      	beq.n	80069f2 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 80069c2:	003a      	movs	r2, r7
 80069c4:	491f      	ldr	r1, [pc, #124]	; (8006a44 <addbuttonCommand+0xb0>)
 80069c6:	0020      	movs	r0, r4
 80069c8:	f00d fcfe 	bl	80143c8 <strncmp>
		type =MOMENTARY_NC;
 80069cc:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 80069ce:	2800      	cmp	r0, #0
 80069d0:	d00f      	beq.n	80069f2 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069d2:	003a      	movs	r2, r7
 80069d4:	491c      	ldr	r1, [pc, #112]	; (8006a48 <addbuttonCommand+0xb4>)
 80069d6:	0020      	movs	r0, r4
 80069d8:	f00d fcf6 	bl	80143c8 <strncmp>
		type =ONOFF_NO;
 80069dc:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 80069de:	2800      	cmp	r0, #0
 80069e0:	d007      	beq.n	80069f2 <addbuttonCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 80069e2:	003a      	movs	r2, r7
 80069e4:	4919      	ldr	r1, [pc, #100]	; (8006a4c <addbuttonCommand+0xb8>)
 80069e6:	0020      	movs	r0, r4
 80069e8:	f00d fcee 	bl	80143c8 <strncmp>
		type =ONOFF_NC;
 80069ec:	4245      	negs	r5, r0
 80069ee:	4145      	adcs	r5, r0
 80069f0:	00ad      	lsls	r5, r5, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80069f2:	aa04      	add	r2, sp, #16
 80069f4:	2102      	movs	r1, #2
 80069f6:	0030      	movs	r0, r6
 80069f8:	f007 fdc8 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80069fc:	2300      	movs	r3, #0
 80069fe:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006a00:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006a02:	2b70      	cmp	r3, #112	; 0x70
 8006a04:	d008      	beq.n	8006a18 <addbuttonCommand+0x84>
	result =AddPortButton(type,port);
 8006a06:	0021      	movs	r1, r4
 8006a08:	0028      	movs	r0, r5
 8006a0a:	f005 fdf9 	bl	800c600 <AddPortButton>
	if(result == BOS_OK){
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d007      	beq.n	8006a22 <addbuttonCommand+0x8e>
}
 8006a12:	2000      	movs	r0, #0
 8006a14:	b007      	add	sp, #28
 8006a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006a18:	3001      	adds	r0, #1
 8006a1a:	f00c ffd2 	bl	80139c2 <atol>
 8006a1e:	b2c4      	uxtb	r4, r0
 8006a20:	e7f1      	b.n	8006a06 <addbuttonCommand+0x72>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006a22:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <addbuttonCommand+0xa8>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	2300      	movs	r3, #0
 8006a28:	9905      	ldr	r1, [sp, #20]
 8006a2a:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006a2c:	9400      	str	r4, [sp, #0]
 8006a2e:	0023      	movs	r3, r4
 8006a30:	4907      	ldr	r1, [pc, #28]	; (8006a50 <addbuttonCommand+0xbc>)
 8006a32:	9803      	ldr	r0, [sp, #12]
 8006a34:	f00d fc84 	bl	8014340 <sprintf>
 8006a38:	e7eb      	b.n	8006a12 <addbuttonCommand+0x7e>
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	200019ac 	.word	0x200019ac
 8006a40:	080196c0 	.word	0x080196c0
 8006a44:	080196d0 	.word	0x080196d0
 8006a48:	080196e0 	.word	0x080196e0
 8006a4c:	080196ec 	.word	0x080196ec
 8006a50:	080196f8 	.word	0x080196f8

08006a54 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a56:	46d6      	mov	lr, sl
 8006a58:	464f      	mov	r7, r9
 8006a5a:	4646      	mov	r6, r8
 8006a5c:	b5c0      	push	{r6, r7, lr}
 8006a5e:	b098      	sub	sp, #96	; 0x60
 8006a60:	9007      	str	r0, [sp, #28]
 8006a62:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	9317      	str	r3, [sp, #92]	; 0x5c
 8006a68:	9316      	str	r3, [sp, #88]	; 0x58
 8006a6a:	9315      	str	r3, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006a6c:	9314      	str	r3, [sp, #80]	; 0x50
 8006a6e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a70:	9312      	str	r3, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 =0;
 8006a72:	9311      	str	r3, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006a74:	220a      	movs	r2, #10
 8006a76:	2100      	movs	r1, #0
 8006a78:	a80e      	add	r0, sp, #56	; 0x38
 8006a7a:	f00d fa35 	bl	8013ee8 <memset>
 8006a7e:	220a      	movs	r2, #10
 8006a80:	2100      	movs	r1, #0
 8006a82:	a80b      	add	r0, sp, #44	; 0x2c
 8006a84:	f00d fa30 	bl	8013ee8 <memset>
 8006a88:	220a      	movs	r2, #10
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	a808      	add	r0, sp, #32
 8006a8e:	f00d fa2b 	bl	8013ee8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006a92:	aa17      	add	r2, sp, #92	; 0x5c
 8006a94:	2101      	movs	r1, #1
 8006a96:	0020      	movs	r0, r4
 8006a98:	f007 fd78 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	9206      	str	r2, [sp, #24]
	if(pcParameterString1[0] == 'P'){
 8006aa4:	2b50      	cmp	r3, #80	; 0x50
 8006aa6:	d100      	bne.n	8006aaa <scastCommand+0x56>
 8006aa8:	e06f      	b.n	8006b8a <scastCommand+0x136>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006aaa:	aa16      	add	r2, sp, #88	; 0x58
 8006aac:	2102      	movs	r1, #2
 8006aae:	0020      	movs	r0, r4
 8006ab0:	f007 fd6c 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006ab4:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006ab6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ab8:	a80e      	add	r0, sp, #56	; 0x38
 8006aba:	f00d fc96 	bl	80143ea <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006abe:	a80e      	add	r0, sp, #56	; 0x38
 8006ac0:	f7fd fbd0 	bl	8004264 <GetID>
 8006ac4:	b2c3      	uxtb	r3, r0
 8006ac6:	4698      	mov	r8, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006ac8:	aa15      	add	r2, sp, #84	; 0x54
 8006aca:	2103      	movs	r1, #3
 8006acc:	0020      	movs	r0, r4
 8006ace:	f007 fd5d 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	4692      	mov	sl, r2
	if(pcParameterString3[0] == 'p'){
 8006ada:	2b70      	cmp	r3, #112	; 0x70
 8006adc:	d05b      	beq.n	8006b96 <scastCommand+0x142>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006ade:	aa14      	add	r2, sp, #80	; 0x50
 8006ae0:	2104      	movs	r1, #4
 8006ae2:	0020      	movs	r0, r4
 8006ae4:	f007 fd52 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006ae8:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006aea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006aec:	a80b      	add	r0, sp, #44	; 0x2c
 8006aee:	f00d fc7c 	bl	80143ea <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006af2:	a80b      	add	r0, sp, #44	; 0x2c
 8006af4:	f7fd fbb6 	bl	8004264 <GetID>
 8006af8:	b2c3      	uxtb	r3, r0
 8006afa:	4699      	mov	r9, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006afc:	aa13      	add	r2, sp, #76	; 0x4c
 8006afe:	2105      	movs	r1, #5
 8006b00:	0020      	movs	r0, r4
 8006b02:	f007 fd43 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006b06:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006b08:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8006b0a:	0032      	movs	r2, r6
 8006b0c:	492c      	ldr	r1, [pc, #176]	; (8006bc0 <scastCommand+0x16c>)
 8006b0e:	f00d fc5b 	bl	80143c8 <strncmp>
		direction =FORWARD;
 8006b12:	2700      	movs	r7, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006b14:	2800      	cmp	r0, #0
 8006b16:	d00f      	beq.n	8006b38 <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006b18:	0032      	movs	r2, r6
 8006b1a:	492a      	ldr	r1, [pc, #168]	; (8006bc4 <scastCommand+0x170>)
 8006b1c:	0028      	movs	r0, r5
 8006b1e:	f00d fc53 	bl	80143c8 <strncmp>
		direction =BACKWARD;
 8006b22:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006b24:	2800      	cmp	r0, #0
 8006b26:	d007      	beq.n	8006b38 <scastCommand+0xe4>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006b28:	0032      	movs	r2, r6
 8006b2a:	4927      	ldr	r1, [pc, #156]	; (8006bc8 <scastCommand+0x174>)
 8006b2c:	0028      	movs	r0, r5
 8006b2e:	f00d fc4b 	bl	80143c8 <strncmp>
		direction =BIDIRECTIONAL;
 8006b32:	4247      	negs	r7, r0
 8006b34:	4147      	adcs	r7, r0
 8006b36:	007f      	lsls	r7, r7, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006b38:	0032      	movs	r2, r6
 8006b3a:	0029      	movs	r1, r5
 8006b3c:	a808      	add	r0, sp, #32
 8006b3e:	f00d fc54 	bl	80143ea <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006b42:	aa12      	add	r2, sp, #72	; 0x48
 8006b44:	2106      	movs	r1, #6
 8006b46:	0020      	movs	r0, r4
 8006b48:	f007 fd20 	bl	800e58c <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006b4c:	f00c ff39 	bl	80139c2 <atol>
 8006b50:	0005      	movs	r5, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006b52:	aa11      	add	r2, sp, #68	; 0x44
 8006b54:	2107      	movs	r1, #7
 8006b56:	0020      	movs	r0, r4
 8006b58:	f007 fd18 	bl	800e58c <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006b5c:	f00c ff31 	bl	80139c2 <atol>
 8006b60:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006b62:	2300      	movs	r3, #0
 8006b64:	9303      	str	r3, [sp, #12]
 8006b66:	9002      	str	r0, [sp, #8]
 8006b68:	9501      	str	r5, [sp, #4]
 8006b6a:	9700      	str	r7, [sp, #0]
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	4652      	mov	r2, sl
 8006b70:	4641      	mov	r1, r8
 8006b72:	9806      	ldr	r0, [sp, #24]
 8006b74:	f001 fb2a 	bl	80081cc <StartScastDMAStream>
	if(result == BOS_OK){
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d012      	beq.n	8006ba2 <scastCommand+0x14e>
}
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	b018      	add	sp, #96	; 0x60
 8006b80:	bc1c      	pop	{r2, r3, r4}
 8006b82:	4690      	mov	r8, r2
 8006b84:	4699      	mov	r9, r3
 8006b86:	46a2      	mov	sl, r4
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f00c ff19 	bl	80139c2 <atol>
 8006b90:	b2c3      	uxtb	r3, r0
 8006b92:	9306      	str	r3, [sp, #24]
 8006b94:	e789      	b.n	8006aaa <scastCommand+0x56>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006b96:	3001      	adds	r0, #1
 8006b98:	f00c ff13 	bl	80139c2 <atol>
 8006b9c:	b2c3      	uxtb	r3, r0
 8006b9e:	469a      	mov	sl, r3
 8006ba0:	e79d      	b.n	8006ade <scastCommand+0x8a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006ba2:	9404      	str	r4, [sp, #16]
 8006ba4:	9503      	str	r5, [sp, #12]
 8006ba6:	ab0b      	add	r3, sp, #44	; 0x2c
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	4653      	mov	r3, sl
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	ab0e      	add	r3, sp, #56	; 0x38
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	9b06      	ldr	r3, [sp, #24]
 8006bb4:	aa08      	add	r2, sp, #32
 8006bb6:	4905      	ldr	r1, [pc, #20]	; (8006bcc <scastCommand+0x178>)
 8006bb8:	9807      	ldr	r0, [sp, #28]
 8006bba:	f00d fbc1 	bl	8014340 <sprintf>
 8006bbe:	e7dd      	b.n	8006b7c <scastCommand+0x128>
 8006bc0:	08019e48 	.word	0x08019e48
 8006bc4:	08019e50 	.word	0x08019e50
 8006bc8:	08019e5c 	.word	0x08019e5c
 8006bcc:	08019e6c 	.word	0x08019e6c

08006bd0 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	0004      	movs	r4, r0
	if(N > 1)
 8006bd6:	4b26      	ldr	r3, [pc, #152]	; (8006c70 <infoCommand+0xa0>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006bda:	2600      	movs	r6, #0
	if(N > 1)
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d831      	bhi.n	8006c44 <infoCommand+0x74>
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006be0:	4b23      	ldr	r3, [pc, #140]	; (8006c70 <infoCommand+0xa0>)
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	4923      	ldr	r1, [pc, #140]	; (8006c74 <infoCommand+0xa4>)
 8006be6:	0020      	movs	r0, r4
 8006be8:	f00d fbaa 	bl	8014340 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006bec:	0020      	movs	r0, r4
 8006bee:	f7f9 fa93 	bl	8000118 <strlen>
 8006bf2:	b282      	uxth	r2, r0
 8006bf4:	4d20      	ldr	r5, [pc, #128]	; (8006c78 <infoCommand+0xa8>)
 8006bf6:	7828      	ldrb	r0, [r5, #0]
 8006bf8:	2701      	movs	r7, #1
 8006bfa:	427f      	negs	r7, r7
 8006bfc:	9700      	str	r7, [sp, #0]
 8006bfe:	2332      	movs	r3, #50	; 0x32
 8006c00:	0021      	movs	r1, r4
 8006c02:	f007 fa27 	bl	800e054 <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006c06:	2213      	movs	r2, #19
 8006c08:	491c      	ldr	r1, [pc, #112]	; (8006c7c <infoCommand+0xac>)
 8006c0a:	0020      	movs	r0, r4
 8006c0c:	f00d f963 	bl	8013ed6 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006c10:	0020      	movs	r0, r4
 8006c12:	f7f9 fa81 	bl	8000118 <strlen>
 8006c16:	b282      	uxth	r2, r0
 8006c18:	7828      	ldrb	r0, [r5, #0]
 8006c1a:	9700      	str	r7, [sp, #0]
 8006c1c:	2332      	movs	r3, #50	; 0x32
 8006c1e:	0021      	movs	r1, r4
 8006c20:	f007 fa18 	bl	800e054 <writePxMutex>
	DisplayTopology(PcPort);
 8006c24:	7828      	ldrb	r0, [r5, #0]
 8006c26:	f7fd f879 	bl	8003d1c <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006c2a:	7828      	ldrb	r0, [r5, #0]
 8006c2c:	f7fd f946 	bl	8003ebc <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006c30:	2e02      	cmp	r6, #2
 8006c32:	d00b      	beq.n	8006c4c <infoCommand+0x7c>
	sprintf((char* )pcWriteBuffer," ");
 8006c34:	2202      	movs	r2, #2
 8006c36:	4912      	ldr	r1, [pc, #72]	; (8006c80 <infoCommand+0xb0>)
 8006c38:	0020      	movs	r0, r4
 8006c3a:	f00d f94c 	bl	8013ed6 <memcpy>
}
 8006c3e:	2000      	movs	r0, #0
 8006c40:	b003      	add	sp, #12
 8006c42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result =ReadPortsDir();
 8006c44:	f007 fa92 	bl	800e16c <ReadPortsDir>
 8006c48:	0006      	movs	r6, r0
 8006c4a:	e7c9      	b.n	8006be0 <infoCommand+0x10>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006c4c:	2244      	movs	r2, #68	; 0x44
 8006c4e:	490d      	ldr	r1, [pc, #52]	; (8006c84 <infoCommand+0xb4>)
 8006c50:	0020      	movs	r0, r4
 8006c52:	f00d f940 	bl	8013ed6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006c56:	0020      	movs	r0, r4
 8006c58:	f7f9 fa5e 	bl	8000118 <strlen>
 8006c5c:	b282      	uxth	r2, r0
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <infoCommand+0xa8>)
 8006c60:	7818      	ldrb	r0, [r3, #0]
 8006c62:	003b      	movs	r3, r7
 8006c64:	9700      	str	r7, [sp, #0]
 8006c66:	3333      	adds	r3, #51	; 0x33
 8006c68:	0021      	movs	r1, r4
 8006c6a:	f007 f9f3 	bl	800e054 <writePxMutex>
 8006c6e:	e7e1      	b.n	8006c34 <infoCommand+0x64>
 8006c70:	20000044 	.word	0x20000044
 8006c74:	08019c04 	.word	0x08019c04
 8006c78:	2000118a 	.word	0x2000118a
 8006c7c:	08019c20 	.word	0x08019c20
 8006c80:	08018914 	.word	0x08018914
 8006c84:	08019c34 	.word	0x08019c34

08006c88 <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c88:	b510      	push	{r4, lr}
	DisplayModuleStatus(0);
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	f7fd f98a 	bl	8003fa4 <DisplayModuleStatus>
}
 8006c90:	2000      	movs	r0, #0
 8006c92:	bd10      	pop	{r4, pc}

08006c94 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c96:	46ce      	mov	lr, r9
 8006c98:	b500      	push	{lr}
 8006c9a:	b090      	sub	sp, #64	; 0x40
 8006c9c:	9000      	str	r0, [sp, #0]
 8006c9e:	0015      	movs	r5, r2
 8006ca0:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006ca2:	2227      	movs	r2, #39	; 0x27
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	a806      	add	r0, sp, #24
 8006ca8:	f00d f91e 	bl	8013ee8 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006cac:	220a      	movs	r2, #10
 8006cae:	2100      	movs	r1, #0
 8006cb0:	a803      	add	r0, sp, #12
 8006cb2:	f00d f919 	bl	8013ee8 <memset>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006cb6:	4c56      	ldr	r4, [pc, #344]	; (8006e10 <groupCommand+0x17c>)
 8006cb8:	0022      	movs	r2, r4
 8006cba:	2101      	movs	r1, #1
 8006cbc:	0028      	movs	r0, r5
 8006cbe:	f007 fc65 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006cc2:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006cc4:	6822      	ldr	r2, [r4, #0]
 8006cc6:	a803      	add	r0, sp, #12
 8006cc8:	f00d fb8f 	bl	80143ea <strncpy>
 8006ccc:	4c51      	ldr	r4, [pc, #324]	; (8006e14 <groupCommand+0x180>)
 8006cce:	0027      	movs	r7, r4
 8006cd0:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006cd2:	0021      	movs	r1, r4
 8006cd4:	a803      	add	r0, sp, #12
 8006cd6:	f7f9 fa15 	bl	8000104 <strcmp>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d018      	beq.n	8006d10 <groupCommand+0x7c>
 8006cde:	340a      	adds	r4, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006ce0:	42bc      	cmp	r4, r7
 8006ce2:	d1f6      	bne.n	8006cd2 <groupCommand+0x3e>
	type =1;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	4699      	mov	r9, r3
	count =2;
 8006ce8:	4b4b      	ldr	r3, [pc, #300]	; (8006e18 <groupCommand+0x184>)
 8006cea:	2202      	movs	r2, #2
 8006cec:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006cee:	3208      	adds	r2, #8
 8006cf0:	494a      	ldr	r1, [pc, #296]	; (8006e1c <groupCommand+0x188>)
 8006cf2:	9800      	ldr	r0, [sp, #0]
 8006cf4:	f00d f8ef 	bl	8013ed6 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006cf8:	4a49      	ldr	r2, [pc, #292]	; (8006e20 <groupCommand+0x18c>)
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	9801      	ldr	r0, [sp, #4]
 8006cfe:	f007 fc45 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006d02:	4b48      	ldr	r3, [pc, #288]	; (8006e24 <groupCommand+0x190>)
 8006d04:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006d06:	2800      	cmp	r0, #0
 8006d08:	d05e      	beq.n	8006dc8 <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006d0a:	4f45      	ldr	r7, [pc, #276]	; (8006e20 <groupCommand+0x18c>)
		if(count > 2)
 8006d0c:	4e42      	ldr	r6, [pc, #264]	; (8006e18 <groupCommand+0x184>)
 8006d0e:	e012      	b.n	8006d36 <groupCommand+0xa2>
			type =0;
 8006d10:	2300      	movs	r3, #0
 8006d12:	4699      	mov	r9, r3
 8006d14:	e7e8      	b.n	8006ce8 <groupCommand+0x54>
		strcat((char* )pcWriteBuffer,module);
 8006d16:	a906      	add	r1, sp, #24
 8006d18:	9800      	ldr	r0, [sp, #0]
 8006d1a:	f00d fb31 	bl	8014380 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006d1e:	3401      	adds	r4, #1
 8006d20:	b261      	sxtb	r1, r4
 8006d22:	4b3d      	ldr	r3, [pc, #244]	; (8006e18 <groupCommand+0x184>)
 8006d24:	7019      	strb	r1, [r3, #0]
 8006d26:	4a3e      	ldr	r2, [pc, #248]	; (8006e20 <groupCommand+0x18c>)
 8006d28:	9801      	ldr	r0, [sp, #4]
 8006d2a:	f007 fc2f 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006d2e:	4b3d      	ldr	r3, [pc, #244]	; (8006e24 <groupCommand+0x190>)
 8006d30:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d048      	beq.n	8006dc8 <groupCommand+0x134>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006d36:	683d      	ldr	r5, [r7, #0]
 8006d38:	ac06      	add	r4, sp, #24
 8006d3a:	002a      	movs	r2, r5
 8006d3c:	0001      	movs	r1, r0
 8006d3e:	0020      	movs	r0, r4
 8006d40:	f00d fb53 	bl	80143ea <strncpy>
		module[xParameterStringLength] ='\0';
 8006d44:	2300      	movs	r3, #0
 8006d46:	5563      	strb	r3, [r4, r5]
		modID =GetID(module);
 8006d48:	0020      	movs	r0, r4
 8006d4a:	f7fd fa8b 	bl	8004264 <GetID>
		if(modID < 0)
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	db30      	blt.n	8006db4 <groupCommand+0x120>
		result =AddModuleToGroup(modID,alias);
 8006d52:	b2c0      	uxtb	r0, r0
 8006d54:	a903      	add	r1, sp, #12
 8006d56:	f7fd fb51 	bl	80043fc <AddModuleToGroup>
		if(result != BOS_OK)
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d146      	bne.n	8006dec <groupCommand+0x158>
		if(count > 2)
 8006d5e:	2400      	movs	r4, #0
 8006d60:	5734      	ldrsb	r4, [r6, r4]
 8006d62:	2c02      	cmp	r4, #2
 8006d64:	ddd7      	ble.n	8006d16 <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006d66:	9d00      	ldr	r5, [sp, #0]
 8006d68:	0028      	movs	r0, r5
 8006d6a:	f7f9 f9d5 	bl	8000118 <strlen>
 8006d6e:	46ac      	mov	ip, r5
 8006d70:	4460      	add	r0, ip
 8006d72:	2203      	movs	r2, #3
 8006d74:	492c      	ldr	r1, [pc, #176]	; (8006e28 <groupCommand+0x194>)
 8006d76:	f00d f8ae 	bl	8013ed6 <memcpy>
 8006d7a:	e7cc      	b.n	8006d16 <groupCommand+0x82>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8006d7c:	aa03      	add	r2, sp, #12
 8006d7e:	492b      	ldr	r1, [pc, #172]	; (8006e2c <groupCommand+0x198>)
 8006d80:	9800      	ldr	r0, [sp, #0]
 8006d82:	f00d fadd 	bl	8014340 <sprintf>
 8006d86:	e01a      	b.n	8006dbe <groupCommand+0x12a>
		sprintf(module,(char* )pcMessageOKnew,alias);
 8006d88:	aa03      	add	r2, sp, #12
 8006d8a:	4929      	ldr	r1, [pc, #164]	; (8006e30 <groupCommand+0x19c>)
 8006d8c:	a806      	add	r0, sp, #24
 8006d8e:	f00d fad7 	bl	8014340 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006d92:	a906      	add	r1, sp, #24
 8006d94:	9800      	ldr	r0, [sp, #0]
 8006d96:	f00d faf3 	bl	8014380 <strcat>
 8006d9a:	e010      	b.n	8006dbe <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8006d9c:	aa03      	add	r2, sp, #12
 8006d9e:	4925      	ldr	r1, [pc, #148]	; (8006e34 <groupCommand+0x1a0>)
 8006da0:	9800      	ldr	r0, [sp, #0]
 8006da2:	f00d facd 	bl	8014340 <sprintf>
 8006da6:	e00a      	b.n	8006dbe <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 8006da8:	aa03      	add	r2, sp, #12
 8006daa:	4923      	ldr	r1, [pc, #140]	; (8006e38 <groupCommand+0x1a4>)
 8006dac:	9800      	ldr	r0, [sp, #0]
 8006dae:	f00d fac7 	bl	8014340 <sprintf>
 8006db2:	e004      	b.n	8006dbe <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8006db4:	aa06      	add	r2, sp, #24
 8006db6:	4921      	ldr	r1, [pc, #132]	; (8006e3c <groupCommand+0x1a8>)
 8006db8:	9800      	ldr	r0, [sp, #0]
 8006dba:	f00d fac1 	bl	8014340 <sprintf>
}
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	b010      	add	sp, #64	; 0x40
 8006dc2:	bc04      	pop	{r2}
 8006dc4:	4691      	mov	r9, r2
 8006dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <groupCommand+0x184>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d0d4      	beq.n	8006d7c <groupCommand+0xe8>
	else if(result == BOS_OK && type){
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1d7      	bne.n	8006d88 <groupCommand+0xf4>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8006dd8:	aa03      	add	r2, sp, #12
 8006dda:	4919      	ldr	r1, [pc, #100]	; (8006e40 <groupCommand+0x1ac>)
 8006ddc:	a806      	add	r0, sp, #24
 8006dde:	f00d faaf 	bl	8014340 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8006de2:	a906      	add	r1, sp, #24
 8006de4:	9800      	ldr	r0, [sp, #0]
 8006de6:	f00d facb 	bl	8014380 <strcat>
 8006dea:	e7e8      	b.n	8006dbe <groupCommand+0x12a>
	else if(count == 2)
 8006dec:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <groupCommand+0x184>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	b25b      	sxtb	r3, r3
 8006df2:	2b02      	cmp	r3, #2
 8006df4:	d0c2      	beq.n	8006d7c <groupCommand+0xe8>
	else if(result == BOS_ERR_Keyword)
 8006df6:	2806      	cmp	r0, #6
 8006df8:	d0d0      	beq.n	8006d9c <groupCommand+0x108>
	else if(result == BOS_ERR_ExistingAlias)
 8006dfa:	2807      	cmp	r0, #7
 8006dfc:	d0d4      	beq.n	8006da8 <groupCommand+0x114>
	else if(result == BOS_ERR_ExistingCmd)
 8006dfe:	2808      	cmp	r0, #8
 8006e00:	d1dd      	bne.n	8006dbe <groupCommand+0x12a>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8006e02:	aa03      	add	r2, sp, #12
 8006e04:	490f      	ldr	r1, [pc, #60]	; (8006e44 <groupCommand+0x1b0>)
 8006e06:	9800      	ldr	r0, [sp, #0]
 8006e08:	f00d fa9a 	bl	8014340 <sprintf>
 8006e0c:	e7d7      	b.n	8006dbe <groupCommand+0x12a>
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	200019dc 	.word	0x200019dc
 8006e14:	20001578 	.word	0x20001578
 8006e18:	200019a2 	.word	0x200019a2
 8006e1c:	08019a24 	.word	0x08019a24
 8006e20:	200019d0 	.word	0x200019d0
 8006e24:	200019a4 	.word	0x200019a4
 8006e28:	08019a30 	.word	0x08019a30
 8006e2c:	08019a34 	.word	0x08019a34
 8006e30:	08019a60 	.word	0x08019a60
 8006e34:	08019a9c 	.word	0x08019a9c
 8006e38:	08019adc 	.word	0x08019adc
 8006e3c:	08019b50 	.word	0x08019b50
 8006e40:	08019a7c 	.word	0x08019a7c
 8006e44:	08019b10 	.word	0x08019b10

08006e48 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e48:	b570      	push	{r4, r5, r6, lr}
 8006e4a:	0004      	movs	r4, r0
 8006e4c:	0010      	movs	r0, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006e4e:	4d1c      	ldr	r5, [pc, #112]	; (8006ec0 <nameCommand+0x78>)
 8006e50:	002a      	movs	r2, r5
 8006e52:	2101      	movs	r1, #1
 8006e54:	f007 fb9a 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006e58:	0001      	movs	r1, r0
 8006e5a:	4b1a      	ldr	r3, [pc, #104]	; (8006ec4 <nameCommand+0x7c>)
 8006e5c:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 8006e5e:	682b      	ldr	r3, [r5, #0]
 8006e60:	2b09      	cmp	r3, #9
 8006e62:	dd01      	ble.n	8006e68 <nameCommand+0x20>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 8006e64:	2300      	movs	r3, #0
 8006e66:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 8006e68:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <nameCommand+0x80>)
 8006e6a:	7818      	ldrb	r0, [r3, #0]
 8006e6c:	f7fd fa5e 	bl	800432c <NameModule>
	if(result == BOS_OK)
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d007      	beq.n	8006e84 <nameCommand+0x3c>
	else if(result == BOS_ERR_Keyword)
 8006e74:	2806      	cmp	r0, #6
 8006e76:	d00e      	beq.n	8006e96 <nameCommand+0x4e>
	else if(result == BOS_ERR_ExistingAlias)
 8006e78:	2807      	cmp	r0, #7
 8006e7a:	d013      	beq.n	8006ea4 <nameCommand+0x5c>
	else if(result == BOS_ERR_ExistingCmd)
 8006e7c:	2808      	cmp	r0, #8
 8006e7e:	d018      	beq.n	8006eb2 <nameCommand+0x6a>
}
 8006e80:	2000      	movs	r0, #0
 8006e82:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8006e84:	4b0f      	ldr	r3, [pc, #60]	; (8006ec4 <nameCommand+0x7c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a0f      	ldr	r2, [pc, #60]	; (8006ec8 <nameCommand+0x80>)
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	490f      	ldr	r1, [pc, #60]	; (8006ecc <nameCommand+0x84>)
 8006e8e:	0020      	movs	r0, r4
 8006e90:	f00d fa56 	bl	8014340 <sprintf>
 8006e94:	e7f4      	b.n	8006e80 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <nameCommand+0x7c>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	490d      	ldr	r1, [pc, #52]	; (8006ed0 <nameCommand+0x88>)
 8006e9c:	0020      	movs	r0, r4
 8006e9e:	f00d fa4f 	bl	8014340 <sprintf>
 8006ea2:	e7ed      	b.n	8006e80 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8006ea4:	4b07      	ldr	r3, [pc, #28]	; (8006ec4 <nameCommand+0x7c>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	490a      	ldr	r1, [pc, #40]	; (8006ed4 <nameCommand+0x8c>)
 8006eaa:	0020      	movs	r0, r4
 8006eac:	f00d fa48 	bl	8014340 <sprintf>
 8006eb0:	e7e6      	b.n	8006e80 <nameCommand+0x38>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8006eb2:	4b04      	ldr	r3, [pc, #16]	; (8006ec4 <nameCommand+0x7c>)
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	4908      	ldr	r1, [pc, #32]	; (8006ed8 <nameCommand+0x90>)
 8006eb8:	0020      	movs	r0, r4
 8006eba:	f00d fa41 	bl	8014340 <sprintf>
 8006ebe:	e7df      	b.n	8006e80 <nameCommand+0x38>
 8006ec0:	200019d8 	.word	0x200019d8
 8006ec4:	200019a8 	.word	0x200019a8
 8006ec8:	20001792 	.word	0x20001792
 8006ecc:	08019c9c 	.word	0x08019c9c
 8006ed0:	08019a9c 	.word	0x08019a9c
 8006ed4:	08019adc 	.word	0x08019adc
 8006ed8:	08019b10 	.word	0x08019b10

08006edc <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	9003      	str	r0, [sp, #12]
 8006ee2:	0014      	movs	r4, r2
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006ee4:	4a4a      	ldr	r2, [pc, #296]	; (8007010 <bootloaderUpdateCommand+0x134>)
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	0020      	movs	r0, r4
 8006eea:	f007 fb4f 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	d044      	beq.n	8006f7c <bootloaderUpdateCommand+0xa0>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 8006ef2:	4b47      	ldr	r3, [pc, #284]	; (8007010 <bootloaderUpdateCommand+0x134>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4947      	ldr	r1, [pc, #284]	; (8007014 <bootloaderUpdateCommand+0x138>)
 8006ef8:	f00d fa66 	bl	80143c8 <strncmp>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	d135      	bne.n	8006f6c <bootloaderUpdateCommand+0x90>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006f00:	4a45      	ldr	r2, [pc, #276]	; (8007018 <bootloaderUpdateCommand+0x13c>)
 8006f02:	2102      	movs	r1, #2
 8006f04:	0020      	movs	r0, r4
 8006f06:	f007 fb41 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006f0a:	4d44      	ldr	r5, [pc, #272]	; (800701c <bootloaderUpdateCommand+0x140>)
 8006f0c:	6028      	str	r0, [r5, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006f0e:	4a44      	ldr	r2, [pc, #272]	; (8007020 <bootloaderUpdateCommand+0x144>)
 8006f10:	2103      	movs	r1, #3
 8006f12:	0020      	movs	r0, r4
 8006f14:	f007 fb3a 	bl	800e58c <FreeRTOS_CLIGetParameter>
 8006f18:	4b42      	ldr	r3, [pc, #264]	; (8007024 <bootloaderUpdateCommand+0x148>)
 8006f1a:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 8006f1c:	6828      	ldr	r0, [r5, #0]
 8006f1e:	2300      	movs	r3, #0
 8006f20:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 8006f22:	2468      	movs	r4, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 8006f24:	2b23      	cmp	r3, #35	; 0x23
 8006f26:	d054      	beq.n	8006fd2 <bootloaderUpdateCommand+0xf6>
			if(pcParameterString3[0] == 'p'){
 8006f28:	4b3e      	ldr	r3, [pc, #248]	; (8007024 <bootloaderUpdateCommand+0x148>)
 8006f2a:	6818      	ldr	r0, [r3, #0]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	56c3      	ldrsb	r3, [r0, r3]
 8006f30:	2b70      	cmp	r3, #112	; 0x70
 8006f32:	d054      	beq.n	8006fde <bootloaderUpdateCommand+0x102>
				result =BOS_ERR_WrongValue;
 8006f34:	2468      	movs	r4, #104	; 0x68
			if(module != myID){
 8006f36:	4b3c      	ldr	r3, [pc, #240]	; (8007028 <bootloaderUpdateCommand+0x14c>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	42bb      	cmp	r3, r7
 8006f3c:	d054      	beq.n	8006fe8 <bootloaderUpdateCommand+0x10c>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 8006f3e:	4b3b      	ldr	r3, [pc, #236]	; (800702c <bootloaderUpdateCommand+0x150>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 8006f44:	4b3a      	ldr	r3, [pc, #232]	; (8007030 <bootloaderUpdateCommand+0x154>)
 8006f46:	701e      	strb	r6, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 8006f48:	3201      	adds	r2, #1
 8006f4a:	211a      	movs	r1, #26
 8006f4c:	0038      	movs	r0, r7
 8006f4e:	f001 f917 	bl	8008180 <SendMessageToModule>
				osDelay(100);
 8006f52:	2064      	movs	r0, #100	; 0x64
 8006f54:	f007 fa05 	bl	800e362 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 8006f58:	4b36      	ldr	r3, [pc, #216]	; (8007034 <bootloaderUpdateCommand+0x158>)
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	4b32      	ldr	r3, [pc, #200]	; (8007028 <bootloaderUpdateCommand+0x14c>)
 8006f5e:	7818      	ldrb	r0, [r3, #0]
 8006f60:	0033      	movs	r3, r6
 8006f62:	0039      	movs	r1, r7
 8006f64:	f002 fff8 	bl	8009f58 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8006f68:	2c68      	cmp	r4, #104	; 0x68
 8006f6a:	d104      	bne.n	8006f76 <bootloaderUpdateCommand+0x9a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006f6c:	220f      	movs	r2, #15
 8006f6e:	4932      	ldr	r1, [pc, #200]	; (8007038 <bootloaderUpdateCommand+0x15c>)
 8006f70:	9803      	ldr	r0, [sp, #12]
 8006f72:	f00c ffb0 	bl	8013ed6 <memcpy>
}
 8006f76:	2000      	movs	r0, #0
 8006f78:	b005      	add	sp, #20
 8006f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 8006f7c:	4b2a      	ldr	r3, [pc, #168]	; (8007028 <bootloaderUpdateCommand+0x14c>)
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	492e      	ldr	r1, [pc, #184]	; (800703c <bootloaderUpdateCommand+0x160>)
 8006f82:	9c03      	ldr	r4, [sp, #12]
 8006f84:	0020      	movs	r0, r4
 8006f86:	f00d f9db 	bl	8014340 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 8006f8a:	4b2d      	ldr	r3, [pc, #180]	; (8007040 <bootloaderUpdateCommand+0x164>)
 8006f8c:	6819      	ldr	r1, [r3, #0]
 8006f8e:	0020      	movs	r0, r4
 8006f90:	f00d f9f6 	bl	8014380 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006f94:	0020      	movs	r0, r4
 8006f96:	f7f9 f8bf 	bl	8000118 <strlen>
 8006f9a:	b282      	uxth	r2, r0
 8006f9c:	4b25      	ldr	r3, [pc, #148]	; (8007034 <bootloaderUpdateCommand+0x158>)
 8006f9e:	7818      	ldrb	r0, [r3, #0]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	425b      	negs	r3, r3
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	3333      	adds	r3, #51	; 0x33
 8006fa8:	0021      	movs	r1, r4
 8006faa:	f007 f853 	bl	800e054 <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8006fae:	4b25      	ldr	r3, [pc, #148]	; (8007044 <bootloaderUpdateCommand+0x168>)
 8006fb0:	4a25      	ldr	r2, [pc, #148]	; (8007048 <bootloaderUpdateCommand+0x16c>)
 8006fb2:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <bootloaderUpdateCommand+0x170>)
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8006fba:	200a      	movs	r0, #10
 8006fbc:	f007 f9d1 	bl	800e362 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	4b22      	ldr	r3, [pc, #136]	; (8007050 <bootloaderUpdateCommand+0x174>)
 8006fc6:	4a23      	ldr	r2, [pc, #140]	; (8007054 <bootloaderUpdateCommand+0x178>)
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8006fce:	46c0      	nop			; (mov r8, r8)
 8006fd0:	e7fd      	b.n	8006fce <bootloaderUpdateCommand+0xf2>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006fd2:	3001      	adds	r0, #1
 8006fd4:	f00c fcf5 	bl	80139c2 <atol>
 8006fd8:	b2c7      	uxtb	r7, r0
	BOS_Status result =BOS_OK;
 8006fda:	2400      	movs	r4, #0
 8006fdc:	e7a4      	b.n	8006f28 <bootloaderUpdateCommand+0x4c>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006fde:	3001      	adds	r0, #1
 8006fe0:	f00c fcef 	bl	80139c2 <atol>
 8006fe4:	b2c6      	uxtb	r6, r0
 8006fe6:	e7a6      	b.n	8006f36 <bootloaderUpdateCommand+0x5a>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	3319      	adds	r3, #25
 8006fee:	2200      	movs	r2, #0
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	0030      	movs	r0, r6
 8006ff4:	f000 fe3e 	bl	8007c74 <SendMessageFromPort>
				osDelay(100);
 8006ff8:	2064      	movs	r0, #100	; 0x64
 8006ffa:	f007 f9b2 	bl	800e362 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 8006ffe:	4b0a      	ldr	r3, [pc, #40]	; (8007028 <bootloaderUpdateCommand+0x14c>)
 8007000:	7818      	ldrb	r0, [r3, #0]
 8007002:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <bootloaderUpdateCommand+0x158>)
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	0033      	movs	r3, r6
 8007008:	0001      	movs	r1, r0
 800700a:	f002 ffa5 	bl	8009f58 <remoteBootloaderUpdate>
 800700e:	e7ab      	b.n	8006f68 <bootloaderUpdateCommand+0x8c>
 8007010:	200019d4 	.word	0x200019d4
 8007014:	0801975c 	.word	0x0801975c
 8007018:	200019e0 	.word	0x200019e0
 800701c:	200019b8 	.word	0x200019b8
 8007020:	200019e4 	.word	0x200019e4
 8007024:	200019c0 	.word	0x200019c0
 8007028:	20001792 	.word	0x20001792
 800702c:	2000698c 	.word	0x2000698c
 8007030:	20001654 	.word	0x20001654
 8007034:	2000118a 	.word	0x2000118a
 8007038:	0801981c 	.word	0x0801981c
 800703c:	0801973c 	.word	0x0801973c
 8007040:	2000007c 	.word	0x2000007c
 8007044:	20007ff0 	.word	0x20007ff0
 8007048:	deadbeef 	.word	0xdeadbeef
 800704c:	20001610 	.word	0x20001610
 8007050:	e000ed00 	.word	0xe000ed00
 8007054:	05fa0004 	.word	0x05fa0004

08007058 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007058:	b510      	push	{r4, lr}
	if(!moduleAlias[myID][0])
 800705a:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <pingCommand+0x50>)
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	0093      	lsls	r3, r2, #2
 8007060:	189b      	adds	r3, r3, r2
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	4911      	ldr	r1, [pc, #68]	; (80070ac <pingCommand+0x54>)
 8007066:	5c5b      	ldrb	r3, [r3, r1]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d018      	beq.n	800709e <pingCommand+0x46>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 800706c:	0093      	lsls	r3, r2, #2
 800706e:	189b      	adds	r3, r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	490e      	ldr	r1, [pc, #56]	; (80070ac <pingCommand+0x54>)
 8007074:	185b      	adds	r3, r3, r1
 8007076:	490e      	ldr	r1, [pc, #56]	; (80070b0 <pingCommand+0x58>)
 8007078:	f00d f962 	bl	8014340 <sprintf>
	RTOS_IND_blink(200);
 800707c:	2490      	movs	r4, #144	; 0x90
 800707e:	05e4      	lsls	r4, r4, #23
 8007080:	2201      	movs	r2, #1
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	0020      	movs	r0, r4
 8007086:	f00a fcd9 	bl	8011a3c <HAL_GPIO_WritePin>
 800708a:	20c8      	movs	r0, #200	; 0xc8
 800708c:	f007 f969 	bl	800e362 <osDelay>
 8007090:	2200      	movs	r2, #0
 8007092:	2180      	movs	r1, #128	; 0x80
 8007094:	0020      	movs	r0, r4
 8007096:	f00a fcd1 	bl	8011a3c <HAL_GPIO_WritePin>
}
 800709a:	2000      	movs	r0, #0
 800709c:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800709e:	4905      	ldr	r1, [pc, #20]	; (80070b4 <pingCommand+0x5c>)
 80070a0:	f00d f94e 	bl	8014340 <sprintf>
 80070a4:	e7ea      	b.n	800707c <pingCommand+0x24>
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	20001792 	.word	0x20001792
 80070ac:	20001684 	.word	0x20001684
 80070b0:	08019d20 	.word	0x08019d20
 80070b4:	08019d0c 	.word	0x08019d0c

080070b8 <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070b8:	b510      	push	{r4, lr}
 80070ba:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 80070bc:	2241      	movs	r2, #65	; 0x41
 80070be:	4904      	ldr	r1, [pc, #16]	; (80070d0 <prvRunTimeStatsCommand+0x18>)
 80070c0:	f00c ff09 	bl	8013ed6 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 80070c4:	0020      	movs	r0, r4
 80070c6:	3040      	adds	r0, #64	; 0x40
 80070c8:	f008 fc10 	bl	800f8ec <vTaskGetRunTimeStats>
}
 80070cc:	2000      	movs	r0, #0
 80070ce:	bd10      	pop	{r4, pc}
 80070d0:	08019d4c 	.word	0x08019d4c

080070d4 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070d4:	b510      	push	{r4, lr}
 80070d6:	0004      	movs	r4, r0
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 80070d8:	2250      	movs	r2, #80	; 0x50
 80070da:	4904      	ldr	r1, [pc, #16]	; (80070ec <prvTaskStatsCommand+0x18>)
 80070dc:	f00c fefb 	bl	8013ed6 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 80070e0:	0020      	movs	r0, r4
 80070e2:	304f      	adds	r0, #79	; 0x4f
 80070e4:	f008 fba2 	bl	800f82c <vTaskList>
}
 80070e8:	2000      	movs	r0, #0
 80070ea:	bd10      	pop	{r4, pc}
 80070ec:	08019da0 	.word	0x08019da0

080070f0 <resetCommand>:
  __ASM volatile ("dsb 0xF":::"memory");
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	4b03      	ldr	r3, [pc, #12]	; (8007104 <resetCommand+0x14>)
 80070f6:	4a04      	ldr	r2, [pc, #16]	; (8007108 <resetCommand+0x18>)
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80070fe:	46c0      	nop			; (mov r8, r8)
 8007100:	e7fd      	b.n	80070fe <resetCommand+0xe>
 8007102:	46c0      	nop			; (mov r8, r8)
 8007104:	e000ed00 	.word	0xe000ed00
 8007108:	05fa0004 	.word	0x05fa0004

0800710c <RegisterUserCLICommands>:
}
 800710c:	4770      	bx	lr
	...

08007110 <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 8007110:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 8007112:	4835      	ldr	r0, [pc, #212]	; (80071e8 <vRegisterCLICommands+0xd8>)
 8007114:	f007 f9a0 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 8007118:	4834      	ldr	r0, [pc, #208]	; (80071ec <vRegisterCLICommands+0xdc>)
 800711a:	f007 f99d 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 800711e:	4834      	ldr	r0, [pc, #208]	; (80071f0 <vRegisterCLICommands+0xe0>)
 8007120:	f007 f99a 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 8007124:	4833      	ldr	r0, [pc, #204]	; (80071f4 <vRegisterCLICommands+0xe4>)
 8007126:	f007 f997 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 800712a:	4833      	ldr	r0, [pc, #204]	; (80071f8 <vRegisterCLICommands+0xe8>)
 800712c:	f007 f994 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 8007130:	4832      	ldr	r0, [pc, #200]	; (80071fc <vRegisterCLICommands+0xec>)
 8007132:	f007 f991 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 8007136:	4832      	ldr	r0, [pc, #200]	; (8007200 <vRegisterCLICommands+0xf0>)
 8007138:	f007 f98e 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 800713c:	4831      	ldr	r0, [pc, #196]	; (8007204 <vRegisterCLICommands+0xf4>)
 800713e:	f007 f98b 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 8007142:	4831      	ldr	r0, [pc, #196]	; (8007208 <vRegisterCLICommands+0xf8>)
 8007144:	f007 f988 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007148:	4830      	ldr	r0, [pc, #192]	; (800720c <vRegisterCLICommands+0xfc>)
 800714a:	f007 f985 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800714e:	4830      	ldr	r0, [pc, #192]	; (8007210 <vRegisterCLICommands+0x100>)
 8007150:	f007 f982 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007154:	482f      	ldr	r0, [pc, #188]	; (8007214 <vRegisterCLICommands+0x104>)
 8007156:	f007 f97f 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 800715a:	482f      	ldr	r0, [pc, #188]	; (8007218 <vRegisterCLICommands+0x108>)
 800715c:	f007 f97c 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 8007160:	482e      	ldr	r0, [pc, #184]	; (800721c <vRegisterCLICommands+0x10c>)
 8007162:	f007 f979 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007166:	482e      	ldr	r0, [pc, #184]	; (8007220 <vRegisterCLICommands+0x110>)
 8007168:	f007 f976 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 800716c:	482d      	ldr	r0, [pc, #180]	; (8007224 <vRegisterCLICommands+0x114>)
 800716e:	f007 f973 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 8007172:	482d      	ldr	r0, [pc, #180]	; (8007228 <vRegisterCLICommands+0x118>)
 8007174:	f007 f970 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007178:	482c      	ldr	r0, [pc, #176]	; (800722c <vRegisterCLICommands+0x11c>)
 800717a:	f007 f96d 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800717e:	482c      	ldr	r0, [pc, #176]	; (8007230 <vRegisterCLICommands+0x120>)
 8007180:	f007 f96a 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007184:	482b      	ldr	r0, [pc, #172]	; (8007234 <vRegisterCLICommands+0x124>)
 8007186:	f007 f967 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 800718a:	482b      	ldr	r0, [pc, #172]	; (8007238 <vRegisterCLICommands+0x128>)
 800718c:	f007 f964 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 8007190:	482a      	ldr	r0, [pc, #168]	; (800723c <vRegisterCLICommands+0x12c>)
 8007192:	f007 f961 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007196:	482a      	ldr	r0, [pc, #168]	; (8007240 <vRegisterCLICommands+0x130>)
 8007198:	f007 f95e 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 800719c:	4829      	ldr	r0, [pc, #164]	; (8007244 <vRegisterCLICommands+0x134>)
 800719e:	f007 f95b 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 80071a2:	4829      	ldr	r0, [pc, #164]	; (8007248 <vRegisterCLICommands+0x138>)
 80071a4:	f007 f958 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 80071a8:	4828      	ldr	r0, [pc, #160]	; (800724c <vRegisterCLICommands+0x13c>)
 80071aa:	f007 f955 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 80071ae:	4828      	ldr	r0, [pc, #160]	; (8007250 <vRegisterCLICommands+0x140>)
 80071b0:	f007 f952 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 80071b4:	4827      	ldr	r0, [pc, #156]	; (8007254 <vRegisterCLICommands+0x144>)
 80071b6:	f007 f94f 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 80071ba:	4827      	ldr	r0, [pc, #156]	; (8007258 <vRegisterCLICommands+0x148>)
 80071bc:	f007 f94c 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 80071c0:	4826      	ldr	r0, [pc, #152]	; (800725c <vRegisterCLICommands+0x14c>)
 80071c2:	f007 f949 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 80071c6:	4826      	ldr	r0, [pc, #152]	; (8007260 <vRegisterCLICommands+0x150>)
 80071c8:	f007 f946 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 80071cc:	4825      	ldr	r0, [pc, #148]	; (8007264 <vRegisterCLICommands+0x154>)
 80071ce:	f007 f943 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 80071d2:	4825      	ldr	r0, [pc, #148]	; (8007268 <vRegisterCLICommands+0x158>)
 80071d4:	f007 f940 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 80071d8:	4b24      	ldr	r3, [pc, #144]	; (800726c <vRegisterCLICommands+0x15c>)
 80071da:	2223      	movs	r2, #35	; 0x23
 80071dc:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 80071de:	f002 fe93 	bl	8009f08 <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 80071e2:	f7ff ff93 	bl	800710c <RegisterUserCLICommands>
}
 80071e6:	bd10      	pop	{r4, pc}
 80071e8:	08019df0 	.word	0x08019df0
 80071ec:	08019d90 	.word	0x08019d90
 80071f0:	08019d3c 	.word	0x08019d3c
 80071f4:	08019760 	.word	0x08019760
 80071f8:	080198e8 	.word	0x080198e8
 80071fc:	08019e38 	.word	0x08019e38
 8007200:	08019cb4 	.word	0x08019cb4
 8007204:	08019b74 	.word	0x08019b74
 8007208:	0801a2e8 	.word	0x0801a2e8
 800720c:	08019c78 	.word	0x08019c78
 8007210:	08019ef4 	.word	0x08019ef4
 8007214:	0801972c 	.word	0x0801972c
 8007218:	08019e28 	.word	0x08019e28
 800721c:	0801a148 	.word	0x0801a148
 8007220:	08019a14 	.word	0x08019a14
 8007224:	0801986c 	.word	0x0801986c
 8007228:	0801b090 	.word	0x0801b090
 800722c:	080197d4 	.word	0x080197d4
 8007230:	08019f40 	.word	0x08019f40
 8007234:	0801b104 	.word	0x0801b104
 8007238:	08019bf4 	.word	0x08019bf4
 800723c:	08019918 	.word	0x08019918
 8007240:	0801a2d8 	.word	0x0801a2d8
 8007244:	080196b0 	.word	0x080196b0
 8007248:	08019cfc 	.word	0x08019cfc
 800724c:	080198d8 	.word	0x080198d8
 8007250:	080197ac 	.word	0x080197ac
 8007254:	0801b0dc 	.word	0x0801b0dc
 8007258:	0801b024 	.word	0x0801b024
 800725c:	080195b0 	.word	0x080195b0
 8007260:	08019630 	.word	0x08019630
 8007264:	08019668 	.word	0x08019668
 8007268:	080195c0 	.word	0x080195c0
 800726c:	20006988 	.word	0x20006988

08007270 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007272:	0005      	movs	r5, r0
 8007274:	000e      	movs	r6, r1
 8007276:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007278:	f003 fdbe 	bl	800adf8 <GetPort>
 800727c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800727e:	4b0d      	ldr	r3, [pc, #52]	; (80072b4 <StartDMAstream+0x44>)
 8007280:	5c1b      	ldrb	r3, [r3, r0]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d902      	bls.n	800728c <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007286:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007288:	2b03      	cmp	r3, #3
 800728a:	d112      	bne.n	80072b2 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800728c:	0020      	movs	r0, r4
 800728e:	f003 fe9d 	bl	800afcc <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007292:	1e63      	subs	r3, r4, #1
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <StartDMAstream+0x48>)
 8007298:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800729a:	4a06      	ldr	r2, [pc, #24]	; (80072b4 <StartDMAstream+0x44>)
 800729c:	2102      	movs	r1, #2
 800729e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 80072a0:	4a06      	ldr	r2, [pc, #24]	; (80072bc <StartDMAstream+0x4c>)
 80072a2:	2100      	movs	r1, #0
 80072a4:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 80072a6:	003a      	movs	r2, r7
 80072a8:	0031      	movs	r1, r6
 80072aa:	0028      	movs	r0, r5
 80072ac:	f004 fb20 	bl	800b8f0 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80072b0:	2000      	movs	r0, #0
}
 80072b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072b4:	20001814 	.word	0x20001814
 80072b8:	20001ed0 	.word	0x20001ed0
 80072bc:	20001eb8 	.word	0x20001eb8

080072c0 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 80072c4:	4b12      	ldr	r3, [pc, #72]	; (8007310 <DMA_IRQHandler+0x50>)
 80072c6:	5c1b      	ldrb	r3, [r3, r0]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d008      	beq.n	80072de <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 80072cc:	3c01      	subs	r4, #1
 80072ce:	00e0      	lsls	r0, r4, #3
 80072d0:	1b00      	subs	r0, r0, r4
 80072d2:	00c0      	lsls	r0, r0, #3
 80072d4:	4c0f      	ldr	r4, [pc, #60]	; (8007314 <DMA_IRQHandler+0x54>)
 80072d6:	1900      	adds	r0, r0, r4
 80072d8:	f009 fc98 	bl	8010c0c <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 80072de:	1e45      	subs	r5, r0, #1
 80072e0:	00e8      	lsls	r0, r5, #3
 80072e2:	1b40      	subs	r0, r0, r5
 80072e4:	00c0      	lsls	r0, r0, #3
 80072e6:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <DMA_IRQHandler+0x58>)
 80072e8:	18c0      	adds	r0, r0, r3
 80072ea:	f009 fc8f 	bl	8010c0c <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 80072ee:	00aa      	lsls	r2, r5, #2
 80072f0:	4b0a      	ldr	r3, [pc, #40]	; (800731c <DMA_IRQHandler+0x5c>)
 80072f2:	58d2      	ldr	r2, [r2, r3]
 80072f4:	2a00      	cmp	r2, #0
 80072f6:	d006      	beq.n	8007306 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 80072f8:	4909      	ldr	r1, [pc, #36]	; (8007320 <DMA_IRQHandler+0x60>)
 80072fa:	00ad      	lsls	r5, r5, #2
 80072fc:	586b      	ldr	r3, [r5, r1]
 80072fe:	3301      	adds	r3, #1
 8007300:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 8007302:	429a      	cmp	r2, r3
 8007304:	d8ea      	bhi.n	80072dc <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007306:	0020      	movs	r0, r4
 8007308:	f003 fe34 	bl	800af74 <StopStreamDMA>
}
 800730c:	e7e6      	b.n	80072dc <DMA_IRQHandler+0x1c>
 800730e:	46c0      	nop			; (mov r8, r8)
 8007310:	20001814 	.word	0x20001814
 8007314:	20002214 	.word	0x20002214
 8007318:	2000240c 	.word	0x2000240c
 800731c:	20001ee8 	.word	0x20001ee8
 8007320:	20001eb8 	.word	0x20001eb8

08007324 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#if defined(_Usart1)
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007324:	4b09      	ldr	r3, [pc, #36]	; (800734c <ResetUartORE+0x28>)
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	2308      	movs	r3, #8
 800732a:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart2)
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 800732c:	4a08      	ldr	r2, [pc, #32]	; (8007350 <ResetUartORE+0x2c>)
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart3)
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 8007332:	4a08      	ldr	r2, [pc, #32]	; (8007354 <ResetUartORE+0x30>)
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart4) || defined(_Uart4)
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007338:	4a07      	ldr	r2, [pc, #28]	; (8007358 <ResetUartORE+0x34>)
 800733a:	6812      	ldr	r2, [r2, #0]
 800733c:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart5) || defined(_Uart5)
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800733e:	4a07      	ldr	r2, [pc, #28]	; (800735c <ResetUartORE+0x38>)
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	6213      	str	r3, [r2, #32]
#endif
#if defined(_Usart6)
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007344:	4a06      	ldr	r2, [pc, #24]	; (8007360 <ResetUartORE+0x3c>)
 8007346:	6812      	ldr	r2, [r2, #0]
 8007348:	6213      	str	r3, [r2, #32]
#endif
}
 800734a:	4770      	bx	lr
 800734c:	20006c24 	.word	0x20006c24
 8007350:	20006d8c 	.word	0x20006d8c
 8007354:	20006b34 	.word	0x20006b34
 8007358:	20006d18 	.word	0x20006d18
 800735c:	20006bac 	.word	0x20006bac
 8007360:	20006c9c 	.word	0x20006c9c

08007364 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007364:	b570      	push	{r4, r5, r6, lr}
 8007366:	b090      	sub	sp, #64	; 0x40
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(DEFAULT_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007368:	2400      	movs	r4, #0
 800736a:	9403      	str	r4, [sp, #12]
 800736c:	9402      	str	r4, [sp, #8]
 800736e:	4b5f      	ldr	r3, [pc, #380]	; (80074ec <MX_FREERTOS_Init+0x188>)
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	2503      	movs	r5, #3
 8007374:	9500      	str	r5, [sp, #0]
 8007376:	2300      	movs	r3, #0
 8007378:	22f0      	movs	r2, #240	; 0xf0
 800737a:	495d      	ldr	r1, [pc, #372]	; (80074f0 <MX_FREERTOS_Init+0x18c>)
 800737c:	485d      	ldr	r0, [pc, #372]	; (80074f4 <MX_FREERTOS_Init+0x190>)
 800737e:	f007 fd73 	bl	800ee68 <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(BACKEND_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007382:	9403      	str	r4, [sp, #12]
 8007384:	9402      	str	r4, [sp, #8]
 8007386:	4b5c      	ldr	r3, [pc, #368]	; (80074f8 <MX_FREERTOS_Init+0x194>)
 8007388:	9301      	str	r3, [sp, #4]
 800738a:	9500      	str	r5, [sp, #0]
 800738c:	2300      	movs	r3, #0
 800738e:	22f0      	movs	r2, #240	; 0xf0
 8007390:	495a      	ldr	r1, [pc, #360]	; (80074fc <MX_FREERTOS_Init+0x198>)
 8007392:	485b      	ldr	r0, [pc, #364]	; (8007500 <MX_FREERTOS_Init+0x19c>)
 8007394:	f007 fd68 	bl	800ee68 <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(USER_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007398:	9403      	str	r4, [sp, #12]
 800739a:	9402      	str	r4, [sp, #8]
 800739c:	4b59      	ldr	r3, [pc, #356]	; (8007504 <MX_FREERTOS_Init+0x1a0>)
 800739e:	9301      	str	r3, [sp, #4]
 80073a0:	9500      	str	r5, [sp, #0]
 80073a2:	2300      	movs	r3, #0
 80073a4:	22f0      	movs	r2, #240	; 0xf0
 80073a6:	4958      	ldr	r1, [pc, #352]	; (8007508 <MX_FREERTOS_Init+0x1a4>)
 80073a8:	4858      	ldr	r0, [pc, #352]	; (800750c <MX_FREERTOS_Init+0x1a8>)
 80073aa:	f007 fd5d 	bl	800ee68 <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 80073ae:	f7ff feaf 	bl	8007110 <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(CLI_TASK_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 80073b2:	228c      	movs	r2, #140	; 0x8c
 80073b4:	9403      	str	r4, [sp, #12]
 80073b6:	9402      	str	r4, [sp, #8]
 80073b8:	4b55      	ldr	r3, [pc, #340]	; (8007510 <MX_FREERTOS_Init+0x1ac>)
 80073ba:	9301      	str	r3, [sp, #4]
 80073bc:	9500      	str	r5, [sp, #0]
 80073be:	2300      	movs	r3, #0
 80073c0:	0052      	lsls	r2, r2, #1
 80073c2:	4954      	ldr	r1, [pc, #336]	; (8007514 <MX_FREERTOS_Init+0x1b0>)
 80073c4:	4854      	ldr	r0, [pc, #336]	; (8007518 <MX_FREERTOS_Init+0x1b4>)
 80073c6:	f007 fd4f 	bl	800ee68 <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 80073ca:	4d54      	ldr	r5, [pc, #336]	; (800751c <MX_FREERTOS_Init+0x1b8>)
 80073cc:	9403      	str	r4, [sp, #12]
 80073ce:	9402      	str	r4, [sp, #8]
 80073d0:	4b53      	ldr	r3, [pc, #332]	; (8007520 <MX_FREERTOS_Init+0x1bc>)
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	2604      	movs	r6, #4
 80073d6:	9600      	str	r6, [sp, #0]
 80073d8:	2301      	movs	r3, #1
 80073da:	22f0      	movs	r2, #240	; 0xf0
 80073dc:	4951      	ldr	r1, [pc, #324]	; (8007524 <MX_FREERTOS_Init+0x1c0>)
 80073de:	0028      	movs	r0, r5
 80073e0:	f007 fd42 	bl	800ee68 <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 80073e4:	9403      	str	r4, [sp, #12]
 80073e6:	9402      	str	r4, [sp, #8]
 80073e8:	4b4f      	ldr	r3, [pc, #316]	; (8007528 <MX_FREERTOS_Init+0x1c4>)
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	9600      	str	r6, [sp, #0]
 80073ee:	2302      	movs	r3, #2
 80073f0:	22f0      	movs	r2, #240	; 0xf0
 80073f2:	494e      	ldr	r1, [pc, #312]	; (800752c <MX_FREERTOS_Init+0x1c8>)
 80073f4:	0028      	movs	r0, r5
 80073f6:	f007 fd37 	bl	800ee68 <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 80073fa:	9403      	str	r4, [sp, #12]
 80073fc:	9402      	str	r4, [sp, #8]
 80073fe:	4b4c      	ldr	r3, [pc, #304]	; (8007530 <MX_FREERTOS_Init+0x1cc>)
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	9600      	str	r6, [sp, #0]
 8007404:	2303      	movs	r3, #3
 8007406:	22f0      	movs	r2, #240	; 0xf0
 8007408:	494a      	ldr	r1, [pc, #296]	; (8007534 <MX_FREERTOS_Init+0x1d0>)
 800740a:	0028      	movs	r0, r5
 800740c:	f007 fd2c 	bl	800ee68 <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007410:	9403      	str	r4, [sp, #12]
 8007412:	9402      	str	r4, [sp, #8]
 8007414:	4b48      	ldr	r3, [pc, #288]	; (8007538 <MX_FREERTOS_Init+0x1d4>)
 8007416:	9301      	str	r3, [sp, #4]
 8007418:	9600      	str	r6, [sp, #0]
 800741a:	2304      	movs	r3, #4
 800741c:	22f0      	movs	r2, #240	; 0xf0
 800741e:	4947      	ldr	r1, [pc, #284]	; (800753c <MX_FREERTOS_Init+0x1d8>)
 8007420:	0028      	movs	r0, r5
 8007422:	f007 fd21 	bl	800ee68 <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007426:	9403      	str	r4, [sp, #12]
 8007428:	9402      	str	r4, [sp, #8]
 800742a:	4b45      	ldr	r3, [pc, #276]	; (8007540 <MX_FREERTOS_Init+0x1dc>)
 800742c:	9301      	str	r3, [sp, #4]
 800742e:	9600      	str	r6, [sp, #0]
 8007430:	2305      	movs	r3, #5
 8007432:	22f0      	movs	r2, #240	; 0xf0
 8007434:	4943      	ldr	r1, [pc, #268]	; (8007544 <MX_FREERTOS_Init+0x1e0>)
 8007436:	0028      	movs	r0, r5
 8007438:	f007 fd16 	bl	800ee68 <xTaskGenericCreate>
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(PORT_TASK_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 800743c:	9403      	str	r4, [sp, #12]
 800743e:	9402      	str	r4, [sp, #8]
 8007440:	4b41      	ldr	r3, [pc, #260]	; (8007548 <MX_FREERTOS_Init+0x1e4>)
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	9600      	str	r6, [sp, #0]
 8007446:	2306      	movs	r3, #6
 8007448:	22f0      	movs	r2, #240	; 0xf0
 800744a:	4940      	ldr	r1, [pc, #256]	; (800754c <MX_FREERTOS_Init+0x1e8>)
 800744c:	0028      	movs	r0, r5
 800744e:	f007 fd0b 	bl	800ee68 <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007452:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007454:	2101      	movs	r1, #1
 8007456:	a80f      	add	r0, sp, #60	; 0x3c
 8007458:	f006 ff8b 	bl	800e372 <osSemaphoreCreate>
 800745c:	4e3c      	ldr	r6, [pc, #240]	; (8007550 <MX_FREERTOS_Init+0x1ec>)
 800745e:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007460:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007462:	2101      	movs	r1, #1
 8007464:	a80e      	add	r0, sp, #56	; 0x38
 8007466:	f006 ff84 	bl	800e372 <osSemaphoreCreate>
 800746a:	4d3a      	ldr	r5, [pc, #232]	; (8007554 <MX_FREERTOS_Init+0x1f0>)
 800746c:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 800746e:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007470:	2101      	movs	r1, #1
 8007472:	a80d      	add	r0, sp, #52	; 0x34
 8007474:	f006 ff7d 	bl	800e372 <osSemaphoreCreate>
 8007478:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 800747a:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 800747c:	2101      	movs	r1, #1
 800747e:	a80c      	add	r0, sp, #48	; 0x30
 8007480:	f006 ff77 	bl	800e372 <osSemaphoreCreate>
 8007484:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 8007486:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007488:	2101      	movs	r1, #1
 800748a:	a80b      	add	r0, sp, #44	; 0x2c
 800748c:	f006 ff71 	bl	800e372 <osSemaphoreCreate>
 8007490:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007492:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007494:	2101      	movs	r1, #1
 8007496:	a80a      	add	r0, sp, #40	; 0x28
 8007498:	f006 ff6b 	bl	800e372 <osSemaphoreCreate>
 800749c:	60e8      	str	r0, [r5, #12]
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
 800749e:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 80074a0:	2101      	movs	r1, #1
 80074a2:	a809      	add	r0, sp, #36	; 0x24
 80074a4:	f006 ff65 	bl	800e372 <osSemaphoreCreate>
 80074a8:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 80074aa:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 80074ac:	2101      	movs	r1, #1
 80074ae:	a808      	add	r0, sp, #32
 80074b0:	f006 ff5f 	bl	800e372 <osSemaphoreCreate>
 80074b4:	6128      	str	r0, [r5, #16]
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
 80074b6:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 80074b8:	2101      	movs	r1, #1
 80074ba:	a807      	add	r0, sp, #28
 80074bc:	f006 ff59 	bl	800e372 <osSemaphoreCreate>
 80074c0:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 80074c2:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 80074c4:	2101      	movs	r1, #1
 80074c6:	a806      	add	r0, sp, #24
 80074c8:	f006 ff53 	bl	800e372 <osSemaphoreCreate>
 80074cc:	6168      	str	r0, [r5, #20]
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
 80074ce:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 80074d0:	2101      	movs	r1, #1
 80074d2:	a805      	add	r0, sp, #20
 80074d4:	f006 ff4d 	bl	800e372 <osSemaphoreCreate>
 80074d8:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 80074da:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 80074dc:	2101      	movs	r1, #1
 80074de:	a804      	add	r0, sp, #16
 80074e0:	f006 ff47 	bl	800e372 <osSemaphoreCreate>
 80074e4:	61a8      	str	r0, [r5, #24]
#endif
	
}
 80074e6:	b010      	add	sp, #64	; 0x40
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	20001f34 	.word	0x20001f34
 80074f0:	0801b114 	.word	0x0801b114
 80074f4:	080078f9 	.word	0x080078f9
 80074f8:	20001f00 	.word	0x20001f00
 80074fc:	0801b120 	.word	0x0801b120
 8007500:	08008369 	.word	0x08008369
 8007504:	20001f30 	.word	0x20001f30
 8007508:	0801b12c 	.word	0x0801b12c
 800750c:	080139ab 	.word	0x080139ab
 8007510:	20002008 	.word	0x20002008
 8007514:	0801b138 	.word	0x0801b138
 8007518:	08004f95 	.word	0x08004f95
 800751c:	08008505 	.word	0x08008505
 8007520:	20001f04 	.word	0x20001f04
 8007524:	0801b140 	.word	0x0801b140
 8007528:	20001f08 	.word	0x20001f08
 800752c:	0801b14c 	.word	0x0801b14c
 8007530:	20001f0c 	.word	0x20001f0c
 8007534:	0801b158 	.word	0x0801b158
 8007538:	20001f10 	.word	0x20001f10
 800753c:	0801b164 	.word	0x0801b164
 8007540:	20001f14 	.word	0x20001f14
 8007544:	0801b170 	.word	0x0801b170
 8007548:	20001f18 	.word	0x20001f18
 800754c:	0801b17c 	.word	0x0801b17c
 8007550:	20006ab0 	.word	0x20006ab0
 8007554:	20006a90 	.word	0x20006a90

08007558 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800755a:	46de      	mov	lr, fp
 800755c:	4657      	mov	r7, sl
 800755e:	464e      	mov	r6, r9
 8007560:	4645      	mov	r5, r8
 8007562:	b5e0      	push	{r5, r6, r7, lr}
 8007564:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007566:	4bd3      	ldr	r3, [pc, #844]	; (80078b4 <ExecuteMonitor+0x35c>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d000      	beq.n	8007570 <ExecuteMonitor+0x18>
 800756e:	e19a      	b.n	80078a6 <ExecuteMonitor+0x34e>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 8007570:	4bd0      	ldr	r3, [pc, #832]	; (80078b4 <ExecuteMonitor+0x35c>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
	flag=0;
 8007576:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8007578:	3220      	adds	r2, #32
 800757a:	715a      	strb	r2, [r3, #5]
                	    digitTheCommand=nonProcessingParameter[1]%10;
                	    numCommandParameters=nonProcessingParameter[2]%10;
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
                	    nonProcessingParameterIndex=4;
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 800757c:	4bce      	ldr	r3, [pc, #824]	; (80078b8 <ExecuteMonitor+0x360>)
 800757e:	3301      	adds	r3, #1
 8007580:	9300      	str	r3, [sp, #0]
 8007582:	4bce      	ldr	r3, [pc, #824]	; (80078bc <ExecuteMonitor+0x364>)
 8007584:	3304      	adds	r3, #4
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	e186      	b.n	8007898 <ExecuteMonitor+0x340>
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 800758a:	4bcd      	ldr	r3, [pc, #820]	; (80078c0 <ExecuteMonitor+0x368>)
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2220      	movs	r2, #32
 8007590:	4393      	bics	r3, r2
 8007592:	d018      	beq.n	80075c6 <ExecuteMonitor+0x6e>
 8007594:	4bc7      	ldr	r3, [pc, #796]	; (80078b4 <ExecuteMonitor+0x35c>)
 8007596:	791b      	ldrb	r3, [r3, #4]
 8007598:	1e5a      	subs	r2, r3, #1
 800759a:	2a01      	cmp	r2, #1
 800759c:	d800      	bhi.n	80075a0 <ExecuteMonitor+0x48>
 800759e:	e0b8      	b.n	8007712 <ExecuteMonitor+0x1ba>
		            	    perviousCharacter= INTIAL_VALUE;
 80075a0:	703d      	strb	r5, [r7, #0]
		            	    Delay_us(100);
 80075a2:	2064      	movs	r0, #100	; 0x64
 80075a4:	f006 fb48 	bl	800dc38 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 80075a8:	7963      	ldrb	r3, [r4, #5]
 80075aa:	783a      	ldrb	r2, [r7, #0]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d0ec      	beq.n	800758a <ExecuteMonitor+0x32>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 80075b0:	49c4      	ldr	r1, [pc, #784]	; (80078c4 <ExecuteMonitor+0x36c>)
 80075b2:	780a      	ldrb	r2, [r1, #0]
 80075b4:	1c50      	adds	r0, r2, #1
 80075b6:	7008      	strb	r0, [r1, #0]
 80075b8:	49c0      	ldr	r1, [pc, #768]	; (80078bc <ExecuteMonitor+0x364>)
 80075ba:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 80075bc:	4ac0      	ldr	r2, [pc, #768]	; (80078c0 <ExecuteMonitor+0x368>)
 80075be:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 80075c0:	4bbc      	ldr	r3, [pc, #752]	; (80078b4 <ExecuteMonitor+0x35c>)
 80075c2:	715e      	strb	r6, [r3, #5]
 80075c4:	e7e1      	b.n	800758a <ExecuteMonitor+0x32>
                   if(flag == NonActive)
 80075c6:	4bbb      	ldr	r3, [pc, #748]	; (80078b4 <ExecuteMonitor+0x35c>)
 80075c8:	791b      	ldrb	r3, [r3, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d000      	beq.n	80075d0 <ExecuteMonitor+0x78>
 80075ce:	e0a0      	b.n	8007712 <ExecuteMonitor+0x1ba>
                	   nonProcessingParameterIndex=0;
 80075d0:	4bbc      	ldr	r3, [pc, #752]	; (80078c4 <ExecuteMonitor+0x36c>)
 80075d2:	464a      	mov	r2, r9
 80075d4:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 80075d6:	4bb9      	ldr	r3, [pc, #740]	; (80078bc <ExecuteMonitor+0x364>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b5b      	cmp	r3, #91	; 0x5b
 80075dc:	d020      	beq.n	8007620 <ExecuteMonitor+0xc8>
 		            else if(FirstCharacterInParameter == '#')
 80075de:	2b23      	cmp	r3, #35	; 0x23
 80075e0:	d063      	beq.n	80076aa <ExecuteMonitor+0x152>
 		            else if(FirstCharacterInParameter == '=')
 80075e2:	2b3d      	cmp	r3, #61	; 0x3d
 80075e4:	d074      	beq.n	80076d0 <ExecuteMonitor+0x178>
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 80075e6:	4cb4      	ldr	r4, [pc, #720]	; (80078b8 <ExecuteMonitor+0x360>)
 80075e8:	7823      	ldrb	r3, [r4, #0]
 80075ea:	4ab7      	ldr	r2, [pc, #732]	; (80078c8 <ExecuteMonitor+0x370>)
 80075ec:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 80075ee:	0118      	lsls	r0, r3, #4
 80075f0:	1ac3      	subs	r3, r0, r3
 80075f2:	48b6      	ldr	r0, [pc, #728]	; (80078cc <ExecuteMonitor+0x374>)
 80075f4:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 80075f6:	220f      	movs	r2, #15
 80075f8:	0021      	movs	r1, r4
 80075fa:	f00c fc6c 	bl	8013ed6 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 80075fe:	2214      	movs	r2, #20
 8007600:	4649      	mov	r1, r9
 8007602:	48ae      	ldr	r0, [pc, #696]	; (80078bc <ExecuteMonitor+0x364>)
 8007604:	f00c fc70 	bl	8013ee8 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8007608:	2214      	movs	r2, #20
 800760a:	4649      	mov	r1, r9
 800760c:	0020      	movs	r0, r4
 800760e:	f00c fc6b 	bl	8013ee8 <memset>
		                    nonProcessingParameterIndex=0;
 8007612:	465b      	mov	r3, fp
 8007614:	4652      	mov	r2, sl
 8007616:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 8007618:	2603      	movs	r6, #3
 800761a:	1c35      	adds	r5, r6, #0
							if(currentCharacter != perviousCharacter)
 800761c:	4ca5      	ldr	r4, [pc, #660]	; (80078b4 <ExecuteMonitor+0x35c>)
 800761e:	e7bf      	b.n	80075a0 <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 8007620:	4ba8      	ldr	r3, [pc, #672]	; (80078c4 <ExecuteMonitor+0x36c>)
 8007622:	2201      	movs	r2, #1
 8007624:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 8007626:	4baa      	ldr	r3, [pc, #680]	; (80078d0 <ExecuteMonitor+0x378>)
 8007628:	781c      	ldrb	r4, [r3, #0]
 800762a:	4ba4      	ldr	r3, [pc, #656]	; (80078bc <ExecuteMonitor+0x364>)
 800762c:	7858      	ldrb	r0, [r3, #1]
 800762e:	210a      	movs	r1, #10
 8007630:	f7f8 fe14 	bl	800025c <__aeabi_uidivmod>
 8007634:	b2c9      	uxtb	r1, r1
 8007636:	2603      	movs	r6, #3
 8007638:	42a1      	cmp	r1, r4
 800763a:	d00d      	beq.n	8007658 <ExecuteMonitor+0x100>
 800763c:	4b9f      	ldr	r3, [pc, #636]	; (80078bc <ExecuteMonitor+0x364>)
 800763e:	4698      	mov	r8, r3
 8007640:	1cb5      	adds	r5, r6, #2
 8007642:	b2ed      	uxtb	r5, r5
 8007644:	4643      	mov	r3, r8
 8007646:	5d98      	ldrb	r0, [r3, r6]
 8007648:	210a      	movs	r1, #10
 800764a:	f7f8 fe07 	bl	800025c <__aeabi_uidivmod>
 800764e:	b2c9      	uxtb	r1, r1
 8007650:	42a1      	cmp	r1, r4
 8007652:	d002      	beq.n	800765a <ExecuteMonitor+0x102>
 8007654:	002e      	movs	r6, r5
 8007656:	e7f3      	b.n	8007640 <ExecuteMonitor+0xe8>
 8007658:	2601      	movs	r6, #1
 		            			nonProcessingParameterIndex++;
 800765a:	1c74      	adds	r4, r6, #1
 800765c:	b2e4      	uxtb	r4, r4
 800765e:	4b99      	ldr	r3, [pc, #612]	; (80078c4 <ExecuteMonitor+0x36c>)
 8007660:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 8007662:	4b96      	ldr	r3, [pc, #600]	; (80078bc <ExecuteMonitor+0x364>)
 8007664:	5d1d      	ldrb	r5, [r3, r4]
 8007666:	210a      	movs	r1, #10
 8007668:	0028      	movs	r0, r5
 800766a:	f7f8 fdf7 	bl	800025c <__aeabi_uidivmod>
 800766e:	4b92      	ldr	r3, [pc, #584]	; (80078b8 <ExecuteMonitor+0x360>)
 8007670:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 8007672:	2d5d      	cmp	r5, #93	; 0x5d
 8007674:	d009      	beq.n	800768a <ExecuteMonitor+0x132>
 8007676:	3602      	adds	r6, #2
 8007678:	b2f4      	uxtb	r4, r6
 800767a:	4990      	ldr	r1, [pc, #576]	; (80078bc <ExecuteMonitor+0x364>)
 800767c:	e000      	b.n	8007680 <ExecuteMonitor+0x128>
 800767e:	001c      	movs	r4, r3
 8007680:	1c63      	adds	r3, r4, #1
 8007682:	b2db      	uxtb	r3, r3
 8007684:	5d0a      	ldrb	r2, [r1, r4]
 8007686:	2a5d      	cmp	r2, #93	; 0x5d
 8007688:	d1f9      	bne.n	800767e <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 800768a:	3401      	adds	r4, #1
 800768c:	b2e1      	uxtb	r1, r4
 800768e:	4b8d      	ldr	r3, [pc, #564]	; (80078c4 <ExecuteMonitor+0x36c>)
 8007690:	7019      	strb	r1, [r3, #0]
 		            	processingParameterIndex=1;
 8007692:	4b90      	ldr	r3, [pc, #576]	; (80078d4 <ExecuteMonitor+0x37c>)
 8007694:	2201      	movs	r2, #1
 8007696:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007698:	4887      	ldr	r0, [pc, #540]	; (80078b8 <ExecuteMonitor+0x360>)
 800769a:	3213      	adds	r2, #19
 800769c:	1a52      	subs	r2, r2, r1
 800769e:	4c87      	ldr	r4, [pc, #540]	; (80078bc <ExecuteMonitor+0x364>)
 80076a0:	1861      	adds	r1, r4, r1
 80076a2:	3001      	adds	r0, #1
 80076a4:	f00c fc17 	bl	8013ed6 <memcpy>
 80076a8:	e79d      	b.n	80075e6 <ExecuteMonitor+0x8e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 80076aa:	4c83      	ldr	r4, [pc, #524]	; (80078b8 <ExecuteMonitor+0x360>)
 80076ac:	4d83      	ldr	r5, [pc, #524]	; (80078bc <ExecuteMonitor+0x364>)
 80076ae:	7868      	ldrb	r0, [r5, #1]
 80076b0:	210a      	movs	r1, #10
 80076b2:	f7f8 fdd3 	bl	800025c <__aeabi_uidivmod>
 80076b6:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 80076b8:	4b82      	ldr	r3, [pc, #520]	; (80078c4 <ExecuteMonitor+0x36c>)
 80076ba:	2202      	movs	r2, #2
 80076bc:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 80076be:	4b85      	ldr	r3, [pc, #532]	; (80078d4 <ExecuteMonitor+0x37c>)
 80076c0:	3a01      	subs	r2, #1
 80076c2:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 80076c4:	1c60      	adds	r0, r4, #1
 80076c6:	1ca9      	adds	r1, r5, #2
 80076c8:	3211      	adds	r2, #17
 80076ca:	f00c fc04 	bl	8013ed6 <memcpy>
 80076ce:	e78a      	b.n	80075e6 <ExecuteMonitor+0x8e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 80076d0:	4b7a      	ldr	r3, [pc, #488]	; (80078bc <ExecuteMonitor+0x364>)
 80076d2:	7858      	ldrb	r0, [r3, #1]
 80076d4:	210a      	movs	r1, #10
 80076d6:	f7f8 fdc1 	bl	800025c <__aeabi_uidivmod>
 80076da:	4b7d      	ldr	r3, [pc, #500]	; (80078d0 <ExecuteMonitor+0x378>)
 80076dc:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 80076de:	4b77      	ldr	r3, [pc, #476]	; (80078bc <ExecuteMonitor+0x364>)
 80076e0:	7898      	ldrb	r0, [r3, #2]
 80076e2:	210a      	movs	r1, #10
 80076e4:	f7f8 fdba 	bl	800025c <__aeabi_uidivmod>
 80076e8:	4b7b      	ldr	r3, [pc, #492]	; (80078d8 <ExecuteMonitor+0x380>)
 80076ea:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 80076ec:	4b73      	ldr	r3, [pc, #460]	; (80078bc <ExecuteMonitor+0x364>)
 80076ee:	78d8      	ldrb	r0, [r3, #3]
 80076f0:	210a      	movs	r1, #10
 80076f2:	f7f8 fdb3 	bl	800025c <__aeabi_uidivmod>
 80076f6:	4b70      	ldr	r3, [pc, #448]	; (80078b8 <ExecuteMonitor+0x360>)
 80076f8:	7019      	strb	r1, [r3, #0]
                	    nonProcessingParameterIndex=4;
 80076fa:	4b72      	ldr	r3, [pc, #456]	; (80078c4 <ExecuteMonitor+0x36c>)
 80076fc:	2204      	movs	r2, #4
 80076fe:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 8007700:	4b74      	ldr	r3, [pc, #464]	; (80078d4 <ExecuteMonitor+0x37c>)
 8007702:	3a03      	subs	r2, #3
 8007704:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007706:	320f      	adds	r2, #15
 8007708:	9901      	ldr	r1, [sp, #4]
 800770a:	9800      	ldr	r0, [sp, #0]
 800770c:	f00c fbe3 	bl	8013ed6 <memcpy>
 8007710:	e769      	b.n	80075e6 <ExecuteMonitor+0x8e>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 8007712:	2b01      	cmp	r3, #1
 8007714:	d015      	beq.n	8007742 <ExecuteMonitor+0x1ea>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 8007716:	4b67      	ldr	r3, [pc, #412]	; (80078b4 <ExecuteMonitor+0x35c>)
 8007718:	791b      	ldrb	r3, [r3, #4]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d000      	beq.n	8007720 <ExecuteMonitor+0x1c8>
 800771e:	e778      	b.n	8007612 <ExecuteMonitor+0xba>
		           {
                	finalMatrixIndex=0;
 8007720:	2300      	movs	r3, #0
 8007722:	4a6e      	ldr	r2, [pc, #440]	; (80078dc <ExecuteMonitor+0x384>)
 8007724:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 8007726:	4a6e      	ldr	r2, [pc, #440]	; (80078e0 <ExecuteMonitor+0x388>)
 8007728:	2101      	movs	r1, #1
 800772a:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 800772c:	4a6d      	ldr	r2, [pc, #436]	; (80078e4 <ExecuteMonitor+0x38c>)
 800772e:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 8007730:	4b69      	ldr	r3, [pc, #420]	; (80078d8 <ExecuteMonitor+0x380>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d100      	bne.n	800773a <ExecuteMonitor+0x1e2>
 8007738:	e07f      	b.n	800783a <ExecuteMonitor+0x2e2>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800773a:	0017      	movs	r7, r2
 800773c:	4e68      	ldr	r6, [pc, #416]	; (80078e0 <ExecuteMonitor+0x388>)
 800773e:	4d67      	ldr	r5, [pc, #412]	; (80078dc <ExecuteMonitor+0x384>)
 8007740:	e062      	b.n	8007808 <ExecuteMonitor+0x2b0>
                	finalMatrixIndex=0;
 8007742:	4b66      	ldr	r3, [pc, #408]	; (80078dc <ExecuteMonitor+0x384>)
 8007744:	464a      	mov	r2, r9
 8007746:	701a      	strb	r2, [r3, #0]
                	twoDMatrixIndex=1;
 8007748:	4b65      	ldr	r3, [pc, #404]	; (80078e0 <ExecuteMonitor+0x388>)
 800774a:	2201      	movs	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 800774e:	4b65      	ldr	r3, [pc, #404]	; (80078e4 <ExecuteMonitor+0x38c>)
 8007750:	464a      	mov	r2, r9
 8007752:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 8007754:	4b60      	ldr	r3, [pc, #384]	; (80078d8 <ExecuteMonitor+0x380>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d02a      	beq.n	80077b2 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800775c:	4b61      	ldr	r3, [pc, #388]	; (80078e4 <ExecuteMonitor+0x38c>)
 800775e:	4698      	mov	r8, r3
 8007760:	4e5f      	ldr	r6, [pc, #380]	; (80078e0 <ExecuteMonitor+0x388>)
 8007762:	4d5e      	ldr	r5, [pc, #376]	; (80078dc <ExecuteMonitor+0x384>)
 8007764:	e00b      	b.n	800777e <ExecuteMonitor+0x226>
		                   counter++;
 8007766:	4a5f      	ldr	r2, [pc, #380]	; (80078e4 <ExecuteMonitor+0x38c>)
 8007768:	7813      	ldrb	r3, [r2, #0]
 800776a:	3301      	adds	r3, #1
 800776c:	b2db      	uxtb	r3, r3
 800776e:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 8007770:	4a5b      	ldr	r2, [pc, #364]	; (80078e0 <ExecuteMonitor+0x388>)
 8007772:	2101      	movs	r1, #1
 8007774:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 8007776:	4a58      	ldr	r2, [pc, #352]	; (80078d8 <ExecuteMonitor+0x380>)
 8007778:	7812      	ldrb	r2, [r2, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d019      	beq.n	80077b2 <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 800777e:	4643      	mov	r3, r8
 8007780:	781a      	ldrb	r2, [r3, #0]
 8007782:	7830      	ldrb	r0, [r6, #0]
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	7033      	strb	r3, [r6, #0]
 8007788:	7829      	ldrb	r1, [r5, #0]
 800778a:	1c4b      	adds	r3, r1, #1
 800778c:	702b      	strb	r3, [r5, #0]
 800778e:	4c56      	ldr	r4, [pc, #344]	; (80078e8 <ExecuteMonitor+0x390>)
 8007790:	0113      	lsls	r3, r2, #4
 8007792:	1a9a      	subs	r2, r3, r2
 8007794:	4b4d      	ldr	r3, [pc, #308]	; (80078cc <ExecuteMonitor+0x374>)
 8007796:	189b      	adds	r3, r3, r2
 8007798:	5c1b      	ldrb	r3, [r3, r0]
 800779a:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 800779c:	2001      	movs	r0, #1
 800779e:	f008 fd31 	bl	8010204 <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80077a2:	782b      	ldrb	r3, [r5, #0]
 80077a4:	18e4      	adds	r4, r4, r3
 80077a6:	3c01      	subs	r4, #1
 80077a8:	7823      	ldrb	r3, [r4, #0]
 80077aa:	2220      	movs	r2, #32
 80077ac:	4393      	bics	r3, r2
 80077ae:	d1e6      	bne.n	800777e <ExecuteMonitor+0x226>
 80077b0:	e7d9      	b.n	8007766 <ExecuteMonitor+0x20e>
		          		   flag=0;
 80077b2:	4b40      	ldr	r3, [pc, #256]	; (80078b4 <ExecuteMonitor+0x35c>)
 80077b4:	464a      	mov	r2, r9
 80077b6:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 80077b8:	4b4a      	ldr	r3, [pc, #296]	; (80078e4 <ExecuteMonitor+0x38c>)
 80077ba:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077bc:	4b4b      	ldr	r3, [pc, #300]	; (80078ec <ExecuteMonitor+0x394>)
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	464b      	mov	r3, r9
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077c2:	4e4b      	ldr	r6, [pc, #300]	; (80078f0 <ExecuteMonitor+0x398>)
 80077c4:	4d48      	ldr	r5, [pc, #288]	; (80078e8 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077c6:	4c49      	ldr	r4, [pc, #292]	; (80078ec <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80077c8:	18f2      	adds	r2, r6, r3
 80077ca:	3281      	adds	r2, #129	; 0x81
 80077cc:	32ff      	adds	r2, #255	; 0xff
 80077ce:	5ceb      	ldrb	r3, [r5, r3]
 80077d0:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 80077d2:	2001      	movs	r0, #1
 80077d4:	f008 fd16 	bl	8010204 <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80077d8:	7823      	ldrb	r3, [r4, #0]
 80077da:	3301      	adds	r3, #1
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	7023      	strb	r3, [r4, #0]
 80077e0:	2b3f      	cmp	r3, #63	; 0x3f
 80077e2:	d9f1      	bls.n	80077c8 <ExecuteMonitor+0x270>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 80077e4:	2240      	movs	r2, #64	; 0x40
 80077e6:	4649      	mov	r1, r9
 80077e8:	483f      	ldr	r0, [pc, #252]	; (80078e8 <ExecuteMonitor+0x390>)
 80077ea:	f00c fb7d 	bl	8013ee8 <memset>
 80077ee:	e792      	b.n	8007716 <ExecuteMonitor+0x1be>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 80077f0:	4a3c      	ldr	r2, [pc, #240]	; (80078e4 <ExecuteMonitor+0x38c>)
 80077f2:	7813      	ldrb	r3, [r2, #0]
 80077f4:	3301      	adds	r3, #1
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 80077fa:	4a39      	ldr	r2, [pc, #228]	; (80078e0 <ExecuteMonitor+0x388>)
 80077fc:	2101      	movs	r1, #1
 80077fe:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 8007800:	4a35      	ldr	r2, [pc, #212]	; (80078d8 <ExecuteMonitor+0x380>)
 8007802:	7812      	ldrb	r2, [r2, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d018      	beq.n	800783a <ExecuteMonitor+0x2e2>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8007808:	783a      	ldrb	r2, [r7, #0]
 800780a:	7830      	ldrb	r0, [r6, #0]
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	7033      	strb	r3, [r6, #0]
 8007810:	7829      	ldrb	r1, [r5, #0]
 8007812:	1c4b      	adds	r3, r1, #1
 8007814:	702b      	strb	r3, [r5, #0]
 8007816:	4c34      	ldr	r4, [pc, #208]	; (80078e8 <ExecuteMonitor+0x390>)
 8007818:	0113      	lsls	r3, r2, #4
 800781a:	1a9a      	subs	r2, r3, r2
 800781c:	4b2b      	ldr	r3, [pc, #172]	; (80078cc <ExecuteMonitor+0x374>)
 800781e:	189b      	adds	r3, r3, r2
 8007820:	5c1b      	ldrb	r3, [r3, r0]
 8007822:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 8007824:	2001      	movs	r0, #1
 8007826:	f008 fced 	bl	8010204 <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800782a:	782b      	ldrb	r3, [r5, #0]
 800782c:	18e4      	adds	r4, r4, r3
 800782e:	3c01      	subs	r4, #1
 8007830:	7823      	ldrb	r3, [r4, #0]
 8007832:	2220      	movs	r2, #32
 8007834:	4393      	bics	r3, r2
 8007836:	d1e7      	bne.n	8007808 <ExecuteMonitor+0x2b0>
 8007838:	e7da      	b.n	80077f0 <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 800783a:	4b2a      	ldr	r3, [pc, #168]	; (80078e4 <ExecuteMonitor+0x38c>)
 800783c:	2200      	movs	r2, #0
 800783e:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 8007840:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <ExecuteMonitor+0x35c>)
 8007842:	791b      	ldrb	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01d      	beq.n	8007884 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007848:	4b28      	ldr	r3, [pc, #160]	; (80078ec <ExecuteMonitor+0x394>)
 800784a:	4699      	mov	r9, r3
 800784c:	2500      	movs	r5, #0
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800784e:	4f28      	ldr	r7, [pc, #160]	; (80078f0 <ExecuteMonitor+0x398>)
 8007850:	4e25      	ldr	r6, [pc, #148]	; (80078e8 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8007852:	464b      	mov	r3, r9
 8007854:	701d      	strb	r5, [r3, #0]
 8007856:	2300      	movs	r3, #0
 8007858:	4c24      	ldr	r4, [pc, #144]	; (80078ec <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800785a:	18fa      	adds	r2, r7, r3
 800785c:	3281      	adds	r2, #129	; 0x81
 800785e:	32ff      	adds	r2, #255	; 0xff
 8007860:	5cf3      	ldrb	r3, [r6, r3]
 8007862:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 8007864:	20c8      	movs	r0, #200	; 0xc8
 8007866:	f006 f9e7 	bl	800dc38 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 800786a:	7823      	ldrb	r3, [r4, #0]
 800786c:	3301      	adds	r3, #1
 800786e:	b2db      	uxtb	r3, r3
 8007870:	7023      	strb	r3, [r4, #0]
 8007872:	2b3f      	cmp	r3, #63	; 0x3f
 8007874:	d9f1      	bls.n	800785a <ExecuteMonitor+0x302>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 8007876:	4c0f      	ldr	r4, [pc, #60]	; (80078b4 <ExecuteMonitor+0x35c>)
 8007878:	6820      	ldr	r0, [r4, #0]
 800787a:	f008 fcc3 	bl	8010204 <HAL_Delay>
                  while(flag != NonActive)
 800787e:	7923      	ldrb	r3, [r4, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1e6      	bne.n	8007852 <ExecuteMonitor+0x2fa>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8007884:	2240      	movs	r2, #64	; 0x40
 8007886:	2100      	movs	r1, #0
 8007888:	4817      	ldr	r0, [pc, #92]	; (80078e8 <ExecuteMonitor+0x390>)
 800788a:	f00c fb2d 	bl	8013ee8 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 800788e:	22c0      	movs	r2, #192	; 0xc0
 8007890:	2100      	movs	r1, #0
 8007892:	4818      	ldr	r0, [pc, #96]	; (80078f4 <ExecuteMonitor+0x39c>)
 8007894:	f00c fb28 	bl	8013ee8 <memset>
		                    nonProcessingParameterIndex=0;
 8007898:	4b0a      	ldr	r3, [pc, #40]	; (80078c4 <ExecuteMonitor+0x36c>)
 800789a:	469b      	mov	fp, r3
 800789c:	2300      	movs	r3, #0
 800789e:	4699      	mov	r9, r3
 80078a0:	469a      	mov	sl, r3
		            	    perviousCharacter= INTIAL_VALUE;
 80078a2:	4f07      	ldr	r7, [pc, #28]	; (80078c0 <ExecuteMonitor+0x368>)
 80078a4:	e6b5      	b.n	8007612 <ExecuteMonitor+0xba>
		           }
	}
  }
}
 80078a6:	b003      	add	sp, #12
 80078a8:	bc3c      	pop	{r2, r3, r4, r5}
 80078aa:	4690      	mov	r8, r2
 80078ac:	4699      	mov	r9, r3
 80078ae:	46a2      	mov	sl, r4
 80078b0:	46ab      	mov	fp, r5
 80078b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078b4:	20000000 	.word	0x20000000
 80078b8:	20001f1c 	.word	0x20001f1c
 80078bc:	20001f78 	.word	0x20001f78
 80078c0:	20006a8c 	.word	0x20006a8c
 80078c4:	20006aad 	.word	0x20006aad
 80078c8:	20006acf 	.word	0x20006acf
 80078cc:	20001f8c 	.word	0x20001f8c
 80078d0:	20006ace 	.word	0x20006ace
 80078d4:	20006aac 	.word	0x20006aac
 80078d8:	20006acc 	.word	0x20006acc
 80078dc:	20006ad0 	.word	0x20006ad0
 80078e0:	20006acd 	.word	0x20006acd
 80078e4:	20006aae 	.word	0x20006aae
 80078e8:	20001f38 	.word	0x20001f38
 80078ec:	20006a8d 	.word	0x20006a8d
 80078f0:	200019f8 	.word	0x200019f8
 80078f4:	20001b78 	.word	0x20001b78

080078f8 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch(indMode){
 80078fa:	4c28      	ldr	r4, [pc, #160]	; (800799c <StartDefaultTask+0xa4>)
				indMode =IND_OFF;
 80078fc:	0026      	movs	r6, r4
				indMode =IND_OFF;
 80078fe:	0025      	movs	r5, r4
 8007900:	e020      	b.n	8007944 <StartDefaultTask+0x4c>
				RTOS_IND_blink(200);
 8007902:	2790      	movs	r7, #144	; 0x90
 8007904:	05ff      	lsls	r7, r7, #23
 8007906:	2201      	movs	r2, #1
 8007908:	2180      	movs	r1, #128	; 0x80
 800790a:	0038      	movs	r0, r7
 800790c:	f00a f896 	bl	8011a3c <HAL_GPIO_WritePin>
 8007910:	20c8      	movs	r0, #200	; 0xc8
 8007912:	f006 fd26 	bl	800e362 <osDelay>
 8007916:	2200      	movs	r2, #0
 8007918:	2180      	movs	r1, #128	; 0x80
 800791a:	0038      	movs	r0, r7
 800791c:	f00a f88e 	bl	8011a3c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007920:	4b1e      	ldr	r3, [pc, #120]	; (800799c <StartDefaultTask+0xa4>)
 8007922:	2200      	movs	r2, #0
 8007924:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 8007926:	f005 fb9b 	bl	800d060 <CheckAttachedButtons>
		ExecuteSnippet();
 800792a:	f7fd fcc7 	bl	80052bc <ExecuteSnippet>
		ExecuteMonitor();
 800792e:	f7ff fe13 	bl	8007558 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 8007932:	4b1b      	ldr	r3, [pc, #108]	; (80079a0 <StartDefaultTask+0xa8>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d102      	bne.n	8007940 <StartDefaultTask+0x48>
			delayButtonStateReset = false;
 800793a:	4b1a      	ldr	r3, [pc, #104]	; (80079a4 <StartDefaultTask+0xac>)
 800793c:	2200      	movs	r2, #0
 800793e:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 8007940:	f008 faf4 	bl	800ff2c <vPortYield>
		switch(indMode){
 8007944:	7823      	ldrb	r3, [r4, #0]
 8007946:	2b02      	cmp	r3, #2
 8007948:	d004      	beq.n	8007954 <StartDefaultTask+0x5c>
 800794a:	2b03      	cmp	r3, #3
 800794c:	d014      	beq.n	8007978 <StartDefaultTask+0x80>
 800794e:	2b01      	cmp	r3, #1
 8007950:	d1e9      	bne.n	8007926 <StartDefaultTask+0x2e>
 8007952:	e7d6      	b.n	8007902 <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 8007954:	2790      	movs	r7, #144	; 0x90
 8007956:	05ff      	lsls	r7, r7, #23
 8007958:	2201      	movs	r2, #1
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	0038      	movs	r0, r7
 800795e:	f00a f86d 	bl	8011a3c <HAL_GPIO_WritePin>
 8007962:	2064      	movs	r0, #100	; 0x64
 8007964:	f006 fcfd 	bl	800e362 <osDelay>
 8007968:	2200      	movs	r2, #0
 800796a:	2180      	movs	r1, #128	; 0x80
 800796c:	0038      	movs	r0, r7
 800796e:	f00a f865 	bl	8011a3c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007972:	2300      	movs	r3, #0
 8007974:	7033      	strb	r3, [r6, #0]
				break;
 8007976:	e7d6      	b.n	8007926 <StartDefaultTask+0x2e>
				RTOS_IND_blink(30);
 8007978:	2790      	movs	r7, #144	; 0x90
 800797a:	05ff      	lsls	r7, r7, #23
 800797c:	2201      	movs	r2, #1
 800797e:	2180      	movs	r1, #128	; 0x80
 8007980:	0038      	movs	r0, r7
 8007982:	f00a f85b 	bl	8011a3c <HAL_GPIO_WritePin>
 8007986:	201e      	movs	r0, #30
 8007988:	f006 fceb 	bl	800e362 <osDelay>
 800798c:	2200      	movs	r2, #0
 800798e:	2180      	movs	r1, #128	; 0x80
 8007990:	0038      	movs	r0, r7
 8007992:	f00a f853 	bl	8011a3c <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8007996:	2300      	movs	r3, #0
 8007998:	702b      	strb	r3, [r5, #0]
				break;
 800799a:	e7c4      	b.n	8007926 <StartDefaultTask+0x2e>
 800799c:	20001610 	.word	0x20001610
 80079a0:	200025bd 	.word	0x200025bd
 80079a4:	200025bb 	.word	0x200025bb

080079a8 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 80079a8:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 80079aa:	4b04      	ldr	r3, [pc, #16]	; (80079bc <vMainConfigureTimerForRunTimeStats+0x14>)
 80079ac:	6818      	ldr	r0, [r3, #0]
 80079ae:	4904      	ldr	r1, [pc, #16]	; (80079c0 <vMainConfigureTimerForRunTimeStats+0x18>)
 80079b0:	f7f8 fbce 	bl	8000150 <__udivsi3>
 80079b4:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <vMainConfigureTimerForRunTimeStats+0x1c>)
 80079b6:	6018      	str	r0, [r3, #0]
}
 80079b8:	bd10      	pop	{r4, pc}
 80079ba:	46c0      	nop			; (mov r8, r8)
 80079bc:	20000104 	.word	0x20000104
 80079c0:	00002710 	.word	0x00002710
 80079c4:	20002004 	.word	0x20002004

080079c8 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 80079c8:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <ulMainGetRunTimeCounterValue+0x40>)
 80079cc:	6818      	ldr	r0, [r3, #0]
 80079ce:	21fa      	movs	r1, #250	; 0xfa
 80079d0:	0089      	lsls	r1, r1, #2
 80079d2:	f7f8 fbbd 	bl	8000150 <__udivsi3>
 80079d6:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80079d8:	4b0c      	ldr	r3, [pc, #48]	; (8007a0c <ulMainGetRunTimeCounterValue+0x44>)
 80079da:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 80079dc:	f007 fbcc 	bl	800f178 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 80079e0:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <ulMainGetRunTimeCounterValue+0x48>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	015b      	lsls	r3, r3, #5
 80079e6:	d50d      	bpl.n	8007a04 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 80079e8:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 80079ea:	4b08      	ldr	r3, [pc, #32]	; (8007a0c <ulMainGetRunTimeCounterValue+0x44>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 80079f0:	0084      	lsls	r4, r0, #2
 80079f2:	1824      	adds	r4, r4, r0
 80079f4:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <ulMainGetRunTimeCounterValue+0x4c>)
 80079f8:	6819      	ldr	r1, [r3, #0]
 80079fa:	0028      	movs	r0, r5
 80079fc:	f7f8 fba8 	bl	8000150 <__udivsi3>
 8007a00:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 8007a02:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8007a04:	1b2d      	subs	r5, r5, r4
 8007a06:	e7f3      	b.n	80079f0 <ulMainGetRunTimeCounterValue+0x28>
 8007a08:	20000104 	.word	0x20000104
 8007a0c:	e000e018 	.word	0xe000e018
 8007a10:	e000ed04 	.word	0xe000ed04
 8007a14:	20002004 	.word	0x20002004

08007a18 <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 8007a18:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 8007a1a:	f008 fa2f 	bl	800fe7c <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8007a1e:	b2c4      	uxtb	r4, r0
 8007a20:	0020      	movs	r0, r4
 8007a22:	f003 faa7 	bl	800af74 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8007a26:	0020      	movs	r0, r4
 8007a28:	f003 ff30 	bl	800b88c <SwitchStreamDMAToMsg>
}
 8007a2c:	bd10      	pop	{r4, pc}
	...

08007a30 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8007a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a32:	b085      	sub	sp, #20
 8007a34:	000d      	movs	r5, r1
 8007a36:	0014      	movs	r4, r2
 8007a38:	220f      	movs	r2, #15
 8007a3a:	446a      	add	r2, sp
 8007a3c:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8007a3e:	aa0a      	add	r2, sp, #40	; 0x28
 8007a40:	7812      	ldrb	r2, [r2, #0]
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d058      	beq.n	8007af8 <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d100      	bne.n	8007a4c <SetupDMAStreams+0x1c>
 8007a4a:	e0be      	b.n	8007bca <SetupDMAStreams+0x19a>
 8007a4c:	2a00      	cmp	r2, #0
 8007a4e:	d100      	bne.n	8007a52 <SetupDMAStreams+0x22>
 8007a50:	e0bf      	b.n	8007bd2 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d055      	beq.n	8007b02 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 8007a56:	2801      	cmp	r0, #1
 8007a58:	d100      	bne.n	8007a5c <SetupDMAStreams+0x2c>
 8007a5a:	e08b      	b.n	8007b74 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8007a5c:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8007a5e:	2802      	cmp	r0, #2
 8007a60:	d000      	beq.n	8007a64 <SetupDMAStreams+0x34>
 8007a62:	e0b3      	b.n	8007bcc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007a64:	0018      	movs	r0, r3
 8007a66:	f006 fad3 	bl	800e010 <GetUart>
 8007a6a:	0006      	movs	r6, r0
 8007a6c:	ab0a      	add	r3, sp, #40	; 0x28
 8007a6e:	7818      	ldrb	r0, [r3, #0]
 8007a70:	f006 face 	bl	800e010 <GetUart>
 8007a74:	0001      	movs	r1, r0
 8007a76:	2201      	movs	r2, #1
 8007a78:	0030      	movs	r0, r6
 8007a7a:	f7ff fbf9 	bl	8007270 <StartDMAstream>
 8007a7e:	0002      	movs	r2, r0
 8007a80:	2817      	cmp	r0, #23
 8007a82:	d100      	bne.n	8007a86 <SetupDMAStreams+0x56>
 8007a84:	e0a2      	b.n	8007bcc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007a86:	0160      	lsls	r0, r4, #5
 8007a88:	1b00      	subs	r0, r0, r4
 8007a8a:	0080      	lsls	r0, r0, #2
 8007a8c:	1900      	adds	r0, r0, r4
 8007a8e:	00c0      	lsls	r0, r0, #3
 8007a90:	21fa      	movs	r1, #250	; 0xfa
 8007a92:	0089      	lsls	r1, r1, #2
 8007a94:	f7f8 fb5c 	bl	8000150 <__udivsi3>
 8007a98:	0004      	movs	r4, r0
 8007a9a:	260f      	movs	r6, #15
 8007a9c:	446e      	add	r6, sp
 8007a9e:	4b4e      	ldr	r3, [pc, #312]	; (8007bd8 <SetupDMAStreams+0x1a8>)
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	0033      	movs	r3, r6
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	0001      	movs	r1, r0
 8007aa8:	484c      	ldr	r0, [pc, #304]	; (8007bdc <SetupDMAStreams+0x1ac>)
 8007aaa:	f008 f893 	bl	800fbd4 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8007aae:	7833      	ldrb	r3, [r6, #0]
 8007ab0:	3b01      	subs	r3, #1
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a4a      	ldr	r2, [pc, #296]	; (8007be0 <SetupDMAStreams+0x1b0>)
 8007ab6:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007ab8:	ab0a      	add	r3, sp, #40	; 0x28
 8007aba:	7818      	ldrb	r0, [r3, #0]
 8007abc:	f006 faa8 	bl	800e010 <GetUart>
 8007ac0:	0007      	movs	r7, r0
 8007ac2:	7830      	ldrb	r0, [r6, #0]
 8007ac4:	f006 faa4 	bl	800e010 <GetUart>
 8007ac8:	0001      	movs	r1, r0
 8007aca:	2201      	movs	r2, #1
 8007acc:	0038      	movs	r0, r7
 8007ace:	f7ff fbcf 	bl	8007270 <StartDMAstream>
 8007ad2:	0002      	movs	r2, r0
 8007ad4:	2817      	cmp	r0, #23
 8007ad6:	d079      	beq.n	8007bcc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007ad8:	4b3f      	ldr	r3, [pc, #252]	; (8007bd8 <SetupDMAStreams+0x1a8>)
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	ab0a      	add	r3, sp, #40	; 0x28
 8007ade:	2200      	movs	r2, #0
 8007ae0:	0021      	movs	r1, r4
 8007ae2:	483e      	ldr	r0, [pc, #248]	; (8007bdc <SetupDMAStreams+0x1ac>)
 8007ae4:	f008 f876 	bl	800fbd4 <xTimerCreate>
 8007ae8:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 8007aea:	ab0a      	add	r3, sp, #40	; 0x28
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4a3b      	ldr	r2, [pc, #236]	; (8007be0 <SetupDMAStreams+0x1b0>)
 8007af4:	509d      	str	r5, [r3, r2]
 8007af6:	e02d      	b.n	8007b54 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 8007af8:	4a3a      	ldr	r2, [pc, #232]	; (8007be4 <SetupDMAStreams+0x1b4>)
 8007afa:	2102      	movs	r1, #2
 8007afc:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8007afe:	2267      	movs	r2, #103	; 0x67
 8007b00:	e064      	b.n	8007bcc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8007b02:	0018      	movs	r0, r3
 8007b04:	f006 fa84 	bl	800e010 <GetUart>
 8007b08:	0006      	movs	r6, r0
 8007b0a:	ab0a      	add	r3, sp, #40	; 0x28
 8007b0c:	7818      	ldrb	r0, [r3, #0]
 8007b0e:	f006 fa7f 	bl	800e010 <GetUart>
 8007b12:	0001      	movs	r1, r0
 8007b14:	2201      	movs	r2, #1
 8007b16:	0030      	movs	r0, r6
 8007b18:	f7ff fbaa 	bl	8007270 <StartDMAstream>
 8007b1c:	0002      	movs	r2, r0
 8007b1e:	2817      	cmp	r0, #23
 8007b20:	d054      	beq.n	8007bcc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8007b22:	260f      	movs	r6, #15
 8007b24:	446e      	add	r6, sp
 8007b26:	0160      	lsls	r0, r4, #5
 8007b28:	1b00      	subs	r0, r0, r4
 8007b2a:	0080      	lsls	r0, r0, #2
 8007b2c:	1900      	adds	r0, r0, r4
 8007b2e:	00c0      	lsls	r0, r0, #3
 8007b30:	21fa      	movs	r1, #250	; 0xfa
 8007b32:	0089      	lsls	r1, r1, #2
 8007b34:	f7f8 fb0c 	bl	8000150 <__udivsi3>
 8007b38:	0001      	movs	r1, r0
 8007b3a:	4b27      	ldr	r3, [pc, #156]	; (8007bd8 <SetupDMAStreams+0x1a8>)
 8007b3c:	9300      	str	r3, [sp, #0]
 8007b3e:	0033      	movs	r3, r6
 8007b40:	2200      	movs	r2, #0
 8007b42:	4826      	ldr	r0, [pc, #152]	; (8007bdc <SetupDMAStreams+0x1ac>)
 8007b44:	f008 f846 	bl	800fbd4 <xTimerCreate>
 8007b48:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007b4a:	7833      	ldrb	r3, [r6, #0]
 8007b4c:	3b01      	subs	r3, #1
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4a23      	ldr	r2, [pc, #140]	; (8007be0 <SetupDMAStreams+0x1b0>)
 8007b52:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8007b54:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	d038      	beq.n	8007bcc <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 8007b5a:	f007 fb07 	bl	800f16c <xTaskGetTickCount>
 8007b5e:	0002      	movs	r2, r0
 8007b60:	2301      	movs	r3, #1
 8007b62:	425b      	negs	r3, r3
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	2300      	movs	r3, #0
 8007b68:	2101      	movs	r1, #1
 8007b6a:	0020      	movs	r0, r4
 8007b6c:	f008 f850 	bl	800fc10 <xTimerGenericCommand>
	return BOS_OK;
 8007b70:	2200      	movs	r2, #0
 8007b72:	e02b      	b.n	8007bcc <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8007b74:	0010      	movs	r0, r2
 8007b76:	f006 fa4b 	bl	800e010 <GetUart>
 8007b7a:	0006      	movs	r6, r0
 8007b7c:	230f      	movs	r3, #15
 8007b7e:	446b      	add	r3, sp
 8007b80:	7818      	ldrb	r0, [r3, #0]
 8007b82:	f006 fa45 	bl	800e010 <GetUart>
 8007b86:	0001      	movs	r1, r0
 8007b88:	2201      	movs	r2, #1
 8007b8a:	0030      	movs	r0, r6
 8007b8c:	f7ff fb70 	bl	8007270 <StartDMAstream>
 8007b90:	0002      	movs	r2, r0
 8007b92:	2817      	cmp	r0, #23
 8007b94:	d01a      	beq.n	8007bcc <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 8007b96:	0160      	lsls	r0, r4, #5
 8007b98:	1b00      	subs	r0, r0, r4
 8007b9a:	0080      	lsls	r0, r0, #2
 8007b9c:	1900      	adds	r0, r0, r4
 8007b9e:	00c0      	lsls	r0, r0, #3
 8007ba0:	21fa      	movs	r1, #250	; 0xfa
 8007ba2:	0089      	lsls	r1, r1, #2
 8007ba4:	f7f8 fad4 	bl	8000150 <__udivsi3>
 8007ba8:	0001      	movs	r1, r0
 8007baa:	4b0b      	ldr	r3, [pc, #44]	; (8007bd8 <SetupDMAStreams+0x1a8>)
 8007bac:	9300      	str	r3, [sp, #0]
 8007bae:	ab0a      	add	r3, sp, #40	; 0x28
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	480a      	ldr	r0, [pc, #40]	; (8007bdc <SetupDMAStreams+0x1ac>)
 8007bb4:	f008 f80e 	bl	800fbd4 <xTimerCreate>
 8007bb8:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 8007bba:	230f      	movs	r3, #15
 8007bbc:	446b      	add	r3, sp
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4a06      	ldr	r2, [pc, #24]	; (8007be0 <SetupDMAStreams+0x1b0>)
 8007bc6:	509d      	str	r5, [r3, r2]
 8007bc8:	e7c4      	b.n	8007b54 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 8007bca:	2267      	movs	r2, #103	; 0x67
}
 8007bcc:	0010      	movs	r0, r2
 8007bce:	b005      	add	sp, #20
 8007bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 8007bd2:	2267      	movs	r2, #103	; 0x67
 8007bd4:	e7fa      	b.n	8007bcc <SetupDMAStreams+0x19c>
 8007bd6:	46c0      	nop			; (mov r8, r8)
 8007bd8:	08007a19 	.word	0x08007a19
 8007bdc:	0801b1a4 	.word	0x0801b1a4
 8007be0:	20001ee8 	.word	0x20001ee8
 8007be4:	20001814 	.word	0x20001814

08007be8 <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 8007be8:	b510      	push	{r4, lr}
	switch(port){
 8007bea:	2806      	cmp	r0, #6
 8007bec:	d80a      	bhi.n	8007c04 <NotifyMessagingTask+0x1c>
 8007bee:	0080      	lsls	r0, r0, #2
 8007bf0:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <NotifyMessagingTask+0x70>)
 8007bf2:	581b      	ldr	r3, [r3, r0]
 8007bf4:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 8007bf6:	4b19      	ldr	r3, [pc, #100]	; (8007c5c <NotifyMessagingTask+0x74>)
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	2100      	movs	r1, #0
 8007c00:	f007 ff26 	bl	800fa50 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 8007c04:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 8007c06:	4b16      	ldr	r3, [pc, #88]	; (8007c60 <NotifyMessagingTask+0x78>)
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	2100      	movs	r1, #0
 8007c10:	f007 ff1e 	bl	800fa50 <xTaskGenericNotify>
			break;
 8007c14:	e7f6      	b.n	8007c04 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 8007c16:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <NotifyMessagingTask+0x7c>)
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	2100      	movs	r1, #0
 8007c20:	f007 ff16 	bl	800fa50 <xTaskGenericNotify>
			break;
 8007c24:	e7ee      	b.n	8007c04 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 8007c26:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <NotifyMessagingTask+0x80>)
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	2202      	movs	r2, #2
 8007c2e:	2100      	movs	r1, #0
 8007c30:	f007 ff0e 	bl	800fa50 <xTaskGenericNotify>
			break;
 8007c34:	e7e6      	b.n	8007c04 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 8007c36:	4b0d      	ldr	r3, [pc, #52]	; (8007c6c <NotifyMessagingTask+0x84>)
 8007c38:	6818      	ldr	r0, [r3, #0]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	2100      	movs	r1, #0
 8007c40:	f007 ff06 	bl	800fa50 <xTaskGenericNotify>
			break;
 8007c44:	e7de      	b.n	8007c04 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 8007c46:	4b0a      	ldr	r3, [pc, #40]	; (8007c70 <NotifyMessagingTask+0x88>)
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	2100      	movs	r1, #0
 8007c50:	f007 fefe 	bl	800fa50 <xTaskGenericNotify>
}
 8007c54:	e7d6      	b.n	8007c04 <NotifyMessagingTask+0x1c>
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	0801b188 	.word	0x0801b188
 8007c5c:	20001f04 	.word	0x20001f04
 8007c60:	20001f08 	.word	0x20001f08
 8007c64:	20001f0c 	.word	0x20001f0c
 8007c68:	20001f10 	.word	0x20001f10
 8007c6c:	20001f14 	.word	0x20001f14
 8007c70:	20001f18 	.word	0x20001f18

08007c74 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8007c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c76:	46de      	mov	lr, fp
 8007c78:	4657      	mov	r7, sl
 8007c7a:	464e      	mov	r6, r9
 8007c7c:	4645      	mov	r5, r8
 8007c7e:	b5e0      	push	{r5, r6, r7, lr}
 8007c80:	b087      	sub	sp, #28
 8007c82:	0005      	movs	r5, r0
 8007c84:	9103      	str	r1, [sp, #12]
 8007c86:	0014      	movs	r4, r2
 8007c88:	4699      	mov	r9, r3
 8007c8a:	ab10      	add	r3, sp, #64	; 0x40
 8007c8c:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8007c8e:	0003      	movs	r3, r0
 8007c90:	4313      	orrs	r3, r2
 8007c92:	d100      	bne.n	8007c96 <SendMessageFromPort+0x22>
 8007c94:	e1e8      	b.n	8008068 <SendMessageFromPort+0x3f4>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	d14d      	bne.n	8007d36 <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007c9a:	1c93      	adds	r3, r2, #2
 8007c9c:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8007c9e:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d900      	bls.n	8007ca6 <SendMessageFromPort+0x32>
 8007ca4:	e162      	b.n	8007f6c <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	f007 f9c6 	bl	800f038 <uxTaskPriorityGet>
 8007cac:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007cae:	2105      	movs	r1, #5
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	f007 f9d1 	bl	800f058 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 8007cb6:	4bc4      	ldr	r3, [pc, #784]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007cb8:	2248      	movs	r2, #72	; 0x48
 8007cba:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007cbc:	3212      	adds	r2, #18
 8007cbe:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d000      	beq.n	8007cc8 <SendMessageFromPort+0x54>
 8007cc6:	e1e8      	b.n	800809a <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 8007cc8:	1e73      	subs	r3, r6, #1
 8007cca:	4ac0      	ldr	r2, [pc, #768]	; (8007fcc <SendMessageFromPort+0x358>)
 8007ccc:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 8007cce:	4ec0      	ldr	r6, [pc, #768]	; (8007fd0 <SendMessageFromPort+0x35c>)
 8007cd0:	00d9      	lsls	r1, r3, #3
 8007cd2:	1ac9      	subs	r1, r1, r3
 8007cd4:	00c9      	lsls	r1, r1, #3
 8007cd6:	4bbf      	ldr	r3, [pc, #764]	; (8007fd4 <SendMessageFromPort+0x360>)
 8007cd8:	18c9      	adds	r1, r1, r3
 8007cda:	003a      	movs	r2, r7
 8007cdc:	0030      	movs	r0, r6
 8007cde:	f00c f8fa 	bl	8013ed6 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 8007ce2:	3e03      	subs	r6, #3
 8007ce4:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 8007ce6:	1cfb      	adds	r3, r7, #3
 8007ce8:	4698      	mov	r8, r3
 8007cea:	001a      	movs	r2, r3
 8007cec:	0031      	movs	r1, r6
 8007cee:	48ba      	ldr	r0, [pc, #744]	; (8007fd8 <SendMessageFromPort+0x364>)
 8007cf0:	f00c f8f1 	bl	8013ed6 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007cf4:	b2bf      	uxth	r7, r7
 8007cf6:	1cf9      	adds	r1, r7, #3
 8007cf8:	48b7      	ldr	r0, [pc, #732]	; (8007fd8 <SendMessageFromPort+0x364>)
 8007cfa:	f003 fe3b 	bl	800b974 <CalculateCRC8>
 8007cfe:	4643      	mov	r3, r8
 8007d00:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 8007d02:	2238      	movs	r2, #56	; 0x38
 8007d04:	2100      	movs	r1, #0
 8007d06:	48b4      	ldr	r0, [pc, #720]	; (8007fd8 <SendMessageFromPort+0x364>)
 8007d08:	f00c f8ee 	bl	8013ee8 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007d0c:	3402      	adds	r4, #2
 8007d0e:	b2e4      	uxtb	r4, r4
 8007d10:	2c01      	cmp	r4, #1
 8007d12:	d800      	bhi.n	8007d16 <SendMessageFromPort+0xa2>
 8007d14:	e14e      	b.n	8007fb4 <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 8007d16:	464b      	mov	r3, r9
 8007d18:	3b2c      	subs	r3, #44	; 0x2c
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d800      	bhi.n	8007d22 <SendMessageFromPort+0xae>
 8007d20:	e110      	b.n	8007f44 <SendMessageFromPort+0x2d0>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007d22:	4bae      	ldr	r3, [pc, #696]	; (8007fdc <SendMessageFromPort+0x368>)
 8007d24:	88db      	ldrh	r3, [r3, #6]
 8007d26:	2600      	movs	r6, #0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d100      	bne.n	8007d2e <SendMessageFromPort+0xba>
 8007d2c:	e111      	b.n	8007f52 <SendMessageFromPort+0x2de>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007d2e:	3704      	adds	r7, #4
 8007d30:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 8007d32:	4cab      	ldr	r4, [pc, #684]	; (8007fe0 <SendMessageFromPort+0x36c>)
 8007d34:	e12d      	b.n	8007f92 <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 8007d36:	9b03      	ldr	r3, [sp, #12]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <SendMessageFromPort+0xce>
 8007d3c:	2a00      	cmp	r2, #0
 8007d3e:	d100      	bne.n	8007d42 <SendMessageFromPort+0xce>
 8007d40:	e194      	b.n	800806c <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 8007d42:	2000      	movs	r0, #0
 8007d44:	f007 f978 	bl	800f038 <uxTaskPriorityGet>
 8007d48:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8007d4a:	2105      	movs	r1, #5
 8007d4c:	2000      	movs	r0, #0
 8007d4e:	f007 f983 	bl	800f058 <vTaskPrioritySet>
	message[0] ='H';
 8007d52:	4b9d      	ldr	r3, [pc, #628]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007d54:	2248      	movs	r2, #72	; 0x48
 8007d56:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 8007d58:	3212      	adds	r2, #18
 8007d5a:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d0b2      	beq.n	8007cc8 <SendMessageFromPort+0x54>
		if(src == 0)
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d102      	bne.n	8007d6e <SendMessageFromPort+0xfa>
			src =myID;
 8007d68:	4b9e      	ldr	r3, [pc, #632]	; (8007fe4 <SendMessageFromPort+0x370>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	9303      	str	r3, [sp, #12]
		message[2] =length;
 8007d6e:	4a96      	ldr	r2, [pc, #600]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007d70:	2300      	movs	r3, #0
 8007d72:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8007d74:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 8007d76:	9b03      	ldr	r3, [sp, #12]
 8007d78:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d7a:	4998      	ldr	r1, [pc, #608]	; (8007fdc <SendMessageFromPort+0x368>)
 8007d7c:	790b      	ldrb	r3, [r1, #4]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	7848      	ldrb	r0, [r1, #1]
 8007d82:	0080      	lsls	r0, r0, #2
 8007d84:	4303      	orrs	r3, r0
 8007d86:	7809      	ldrb	r1, [r1, #0]
 8007d88:	430b      	orrs	r3, r1
		if(code > 0xFF)
 8007d8a:	21ff      	movs	r1, #255	; 0xff
 8007d8c:	4549      	cmp	r1, r9
 8007d8e:	4189      	sbcs	r1, r1
 8007d90:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8007d92:	0049      	lsls	r1, r1, #1
 8007d94:	430b      	orrs	r3, r1
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	7191      	strb	r1, [r2, #6]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	4693      	mov	fp, r2
		if(extendCode == true){
 8007da2:	29ff      	cmp	r1, #255	; 0xff
 8007da4:	d904      	bls.n	8007db0 <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 8007da6:	0a0a      	lsrs	r2, r1, #8
 8007da8:	4987      	ldr	r1, [pc, #540]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007daa:	71ca      	strb	r2, [r1, #7]
			++shift;
 8007dac:	2201      	movs	r2, #1
 8007dae:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8007db0:	2e2e      	cmp	r6, #46	; 0x2e
 8007db2:	d932      	bls.n	8007e1a <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 8007db4:	2280      	movs	r2, #128	; 0x80
 8007db6:	4252      	negs	r2, r2
 8007db8:	4313      	orrs	r3, r2
 8007dba:	4a83      	ldr	r2, [pc, #524]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007dbc:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 8007dbe:	4b8a      	ldr	r3, [pc, #552]	; (8007fe8 <SendMessageFromPort+0x374>)
 8007dc0:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 8007dc6:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007dc8:	465b      	mov	r3, fp
 8007dca:	1ddf      	adds	r7, r3, #7
 8007dcc:	003b      	movs	r3, r7
 8007dce:	4694      	mov	ip, r2
 8007dd0:	4463      	add	r3, ip
 8007dd2:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 8007dd4:	4b84      	ldr	r3, [pc, #528]	; (8007fe8 <SendMessageFromPort+0x374>)
 8007dd6:	881f      	ldrh	r7, [r3, #0]
 8007dd8:	2f00      	cmp	r7, #0
 8007dda:	d02d      	beq.n	8007e38 <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 8007ddc:	0031      	movs	r1, r6
 8007dde:	0038      	movs	r0, r7
 8007de0:	f7f8 f9b6 	bl	8000150 <__udivsi3>
 8007de4:	b280      	uxth	r0, r0
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d141      	bne.n	8007e6e <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 8007dea:	4b77      	ldr	r3, [pc, #476]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007dec:	795a      	ldrb	r2, [r3, #5]
 8007dee:	237f      	movs	r3, #127	; 0x7f
 8007df0:	4013      	ands	r3, r2
 8007df2:	4a75      	ldr	r2, [pc, #468]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007df4:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007df6:	4e7d      	ldr	r6, [pc, #500]	; (8007fec <SendMessageFromPort+0x378>)
 8007df8:	8831      	ldrh	r1, [r6, #0]
 8007dfa:	4b7d      	ldr	r3, [pc, #500]	; (8007ff0 <SendMessageFromPort+0x37c>)
 8007dfc:	18c9      	adds	r1, r1, r3
 8007dfe:	003a      	movs	r2, r7
 8007e00:	9805      	ldr	r0, [sp, #20]
 8007e02:	f00c f868 	bl	8013ed6 <memcpy>
					ptrShift =0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 8007e0a:	4a77      	ldr	r2, [pc, #476]	; (8007fe8 <SendMessageFromPort+0x374>)
 8007e0c:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 8007e0e:	1d3b      	adds	r3, r7, #4
 8007e10:	445b      	add	r3, fp
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 8007e16:	003e      	movs	r6, r7
 8007e18:	e7dc      	b.n	8007dd4 <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 8007e1a:	465b      	mov	r3, fp
 8007e1c:	3307      	adds	r3, #7
 8007e1e:	486a      	ldr	r0, [pc, #424]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007e20:	1818      	adds	r0, r3, r0
 8007e22:	4b72      	ldr	r3, [pc, #456]	; (8007fec <SendMessageFromPort+0x378>)
 8007e24:	8819      	ldrh	r1, [r3, #0]
 8007e26:	4b72      	ldr	r3, [pc, #456]	; (8007ff0 <SendMessageFromPort+0x37c>)
 8007e28:	18c9      	adds	r1, r1, r3
 8007e2a:	0032      	movs	r2, r6
 8007e2c:	f00c f853 	bl	8013ed6 <memcpy>
			length =numberOfParams + shift + 4;
 8007e30:	1d31      	adds	r1, r6, #4
 8007e32:	4459      	add	r1, fp
 8007e34:	b2cb      	uxtb	r3, r1
 8007e36:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 8007e38:	4b6e      	ldr	r3, [pc, #440]	; (8007ff4 <SendMessageFromPort+0x380>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d058      	beq.n	8007ef2 <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 8007e40:	4b6d      	ldr	r3, [pc, #436]	; (8007ff8 <SendMessageFromPort+0x384>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2bff      	cmp	r3, #255	; 0xff
 8007e46:	d100      	bne.n	8007e4a <SendMessageFromPort+0x1d6>
 8007e48:	e114      	b.n	8008074 <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007e4a:	4a6c      	ldr	r2, [pc, #432]	; (8007ffc <SendMessageFromPort+0x388>)
 8007e4c:	7817      	ldrb	r7, [r2, #0]
 8007e4e:	2f00      	cmp	r7, #0
 8007e50:	d076      	beq.n	8007f40 <SendMessageFromPort+0x2cc>
 8007e52:	2201      	movs	r2, #1
 8007e54:	409a      	lsls	r2, r3
 8007e56:	4690      	mov	r8, r2
 8007e58:	4869      	ldr	r0, [pc, #420]	; (8008000 <SendMessageFromPort+0x38c>)
 8007e5a:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8007e5c:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007e5e:	495a      	ldr	r1, [pc, #360]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007e60:	468c      	mov	ip, r1
 8007e62:	44b4      	add	ip, r6
 8007e64:	9505      	str	r5, [sp, #20]
 8007e66:	4645      	mov	r5, r8
 8007e68:	46a0      	mov	r8, r4
 8007e6a:	465c      	mov	r4, fp
 8007e6c:	e017      	b.n	8007e9e <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8007e6e:	9600      	str	r6, [sp, #0]
 8007e70:	464b      	mov	r3, r9
 8007e72:	0022      	movs	r2, r4
 8007e74:	9903      	ldr	r1, [sp, #12]
 8007e76:	0028      	movs	r0, r5
 8007e78:	f7ff fefc 	bl	8007c74 <SendMessageFromPort>
					osDelay(10);
 8007e7c:	200a      	movs	r0, #10
 8007e7e:	f006 fa70 	bl	800e362 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8007e82:	4a59      	ldr	r2, [pc, #356]	; (8007fe8 <SendMessageFromPort+0x374>)
 8007e84:	8813      	ldrh	r3, [r2, #0]
 8007e86:	1b9b      	subs	r3, r3, r6
 8007e88:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 8007e8a:	4a58      	ldr	r2, [pc, #352]	; (8007fec <SendMessageFromPort+0x378>)
 8007e8c:	8813      	ldrh	r3, [r2, #0]
 8007e8e:	18f3      	adds	r3, r6, r3
 8007e90:	8013      	strh	r3, [r2, #0]
 8007e92:	e79f      	b.n	8007dd4 <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8007e94:	3301      	adds	r3, #1
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3002      	adds	r0, #2
 8007e9a:	42bb      	cmp	r3, r7
 8007e9c:	d80e      	bhi.n	8007ebc <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 8007e9e:	8801      	ldrh	r1, [r0, #0]
 8007ea0:	420d      	tst	r5, r1
 8007ea2:	d0f7      	beq.n	8007e94 <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 8007ea4:	3201      	adds	r2, #1
 8007ea6:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 8007ea8:	18b1      	adds	r1, r6, r2
 8007eaa:	3101      	adds	r1, #1
 8007eac:	292d      	cmp	r1, #45	; 0x2d
 8007eae:	dd00      	ble.n	8007eb2 <SendMessageFromPort+0x23e>
 8007eb0:	e0de      	b.n	8008070 <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8007eb2:	4661      	mov	r1, ip
 8007eb4:	1889      	adds	r1, r1, r2
 8007eb6:	1909      	adds	r1, r1, r4
 8007eb8:	718b      	strb	r3, [r1, #6]
 8007eba:	e7eb      	b.n	8007e94 <SendMessageFromPort+0x220>
 8007ebc:	46a3      	mov	fp, r4
 8007ebe:	9d05      	ldr	r5, [sp, #20]
 8007ec0:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	3307      	adds	r3, #7
 8007ec6:	199b      	adds	r3, r3, r6
 8007ec8:	189b      	adds	r3, r3, r2
 8007eca:	493f      	ldr	r1, [pc, #252]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007ecc:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007ece:	18b1      	adds	r1, r6, r2
 8007ed0:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8007ed2:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 8007ed4:	292d      	cmp	r1, #45	; 0x2d
 8007ed6:	dc49      	bgt.n	8007f6c <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 8007ed8:	484a      	ldr	r0, [pc, #296]	; (8008004 <SendMessageFromPort+0x390>)
 8007eda:	7801      	ldrb	r1, [r0, #0]
 8007edc:	3101      	adds	r1, #1
 8007ede:	b2c9      	uxtb	r1, r1
 8007ee0:	7001      	strb	r1, [r0, #0]
 8007ee2:	4839      	ldr	r0, [pc, #228]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007ee4:	18c3      	adds	r3, r0, r3
 8007ee6:	7059      	strb	r1, [r3, #1]
 8007ee8:	4651      	mov	r1, sl
 8007eea:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8007eec:	188a      	adds	r2, r1, r2
 8007eee:	b2d3      	uxtb	r3, r2
 8007ef0:	469a      	mov	sl, r3
	message[2] =length;
 8007ef2:	4b35      	ldr	r3, [pc, #212]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007ef4:	4698      	mov	r8, r3
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 8007efa:	1cd6      	adds	r6, r2, #3
 8007efc:	0032      	movs	r2, r6
 8007efe:	4641      	mov	r1, r8
 8007f00:	4835      	ldr	r0, [pc, #212]	; (8007fd8 <SendMessageFromPort+0x364>)
 8007f02:	f00b ffe8 	bl	8013ed6 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 8007f06:	4653      	mov	r3, sl
 8007f08:	b29f      	uxth	r7, r3
 8007f0a:	0031      	movs	r1, r6
 8007f0c:	4832      	ldr	r0, [pc, #200]	; (8007fd8 <SendMessageFromPort+0x364>)
 8007f0e:	f003 fd31 	bl	800b974 <CalculateCRC8>
 8007f12:	4643      	mov	r3, r8
 8007f14:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 8007f16:	2238      	movs	r2, #56	; 0x38
 8007f18:	2100      	movs	r1, #0
 8007f1a:	482f      	ldr	r0, [pc, #188]	; (8007fd8 <SendMessageFromPort+0x364>)
 8007f1c:	f00b ffe4 	bl	8013ee8 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8007f20:	3402      	adds	r4, #2
 8007f22:	b2e4      	uxtb	r4, r4
 8007f24:	2c01      	cmp	r4, #1
 8007f26:	d900      	bls.n	8007f2a <SendMessageFromPort+0x2b6>
 8007f28:	e6f5      	b.n	8007d16 <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8007f2a:	9803      	ldr	r0, [sp, #12]
 8007f2c:	f7fb fd58 	bl	80039e0 <FindBroadcastRoutes>
 8007f30:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8007f32:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8007f34:	4b34      	ldr	r3, [pc, #208]	; (8008008 <SendMessageFromPort+0x394>)
 8007f36:	4699      	mov	r9, r3
 8007f38:	4b2a      	ldr	r3, [pc, #168]	; (8007fe4 <SendMessageFromPort+0x370>)
 8007f3a:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 8007f3c:	9503      	str	r5, [sp, #12]
 8007f3e:	e074      	b.n	800802a <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 8007f40:	2200      	movs	r2, #0
 8007f42:	e7be      	b.n	8007ec2 <SendMessageFromPort+0x24e>
			Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007f44:	1d3a      	adds	r2, r7, #4
 8007f46:	b292      	uxth	r2, r2
 8007f48:	2332      	movs	r3, #50	; 0x32
 8007f4a:	491f      	ldr	r1, [pc, #124]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007f4c:	0028      	movs	r0, r5
 8007f4e:	f7fa fee9 	bl	8002d24 <Send_BOS_Message>
		ACK_FLAG =false; rejected_FLAG=false;
 8007f52:	2300      	movs	r3, #0
 8007f54:	4a22      	ldr	r2, [pc, #136]	; (8007fe0 <SendMessageFromPort+0x36c>)
 8007f56:	7013      	strb	r3, [r2, #0]
 8007f58:	4a2c      	ldr	r2, [pc, #176]	; (800800c <SendMessageFromPort+0x398>)
 8007f5a:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8007f5c:	9904      	ldr	r1, [sp, #16]
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f007 f87a 	bl	800f058 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8007f64:	4b2a      	ldr	r3, [pc, #168]	; (8008010 <SendMessageFromPort+0x39c>)
 8007f66:	2202      	movs	r2, #2
 8007f68:	701a      	strb	r2, [r3, #0]
	
	return result;
 8007f6a:	2000      	movs	r0, #0
}
 8007f6c:	b007      	add	sp, #28
 8007f6e:	bc3c      	pop	{r2, r3, r4, r5}
 8007f70:	4690      	mov	r8, r2
 8007f72:	4699      	mov	r9, r3
 8007f74:	46a2      	mov	sl, r4
 8007f76:	46ab      	mov	fp, r5
 8007f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007f7a:	2332      	movs	r3, #50	; 0x32
 8007f7c:	003a      	movs	r2, r7
 8007f7e:	4912      	ldr	r1, [pc, #72]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007f80:	0028      	movs	r0, r5
 8007f82:	f7fa fecf 	bl	8002d24 <Send_BOS_Message>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8007f86:	3601      	adds	r6, #1
 8007f88:	b2f6      	uxtb	r6, r6
 8007f8a:	4b14      	ldr	r3, [pc, #80]	; (8007fdc <SendMessageFromPort+0x368>)
 8007f8c:	88db      	ldrh	r3, [r3, #6]
 8007f8e:	42b3      	cmp	r3, r6
 8007f90:	d9df      	bls.n	8007f52 <SendMessageFromPort+0x2de>
				Send_BOS_Message(port,message,length + 4,cmd50ms);
 8007f92:	2332      	movs	r3, #50	; 0x32
 8007f94:	003a      	movs	r2, r7
 8007f96:	490c      	ldr	r1, [pc, #48]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007f98:	0028      	movs	r0, r5
 8007f9a:	f7fa fec3 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 8007f9e:	20c8      	movs	r0, #200	; 0xc8
 8007fa0:	f006 f9df 	bl	800e362 <osDelay>
				if(ACK_FLAG == true)
 8007fa4:	7823      	ldrb	r3, [r4, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1d3      	bne.n	8007f52 <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 8007faa:	4b18      	ldr	r3, [pc, #96]	; (800800c <SendMessageFromPort+0x398>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0e9      	beq.n	8007f86 <SendMessageFromPort+0x312>
 8007fb2:	e7e2      	b.n	8007f7a <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8007fb4:	464b      	mov	r3, r9
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1b7      	bne.n	8007f2a <SendMessageFromPort+0x2b6>
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d1b4      	bne.n	8007f2a <SendMessageFromPort+0x2b6>
			src =message[4];
 8007fc0:	4b01      	ldr	r3, [pc, #4]	; (8007fc8 <SendMessageFromPort+0x354>)
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	9303      	str	r3, [sp, #12]
 8007fc6:	e7b0      	b.n	8007f2a <SendMessageFromPort+0x2b6>
 8007fc8:	20001614 	.word	0x20001614
 8007fcc:	2000164c 	.word	0x2000164c
 8007fd0:	20001617 	.word	0x20001617
 8007fd4:	20001424 	.word	0x20001424
 8007fd8:	20001e80 	.word	0x20001e80
 8007fdc:	2000698c 	.word	0x2000698c
 8007fe0:	20000ae4 	.word	0x20000ae4
 8007fe4:	20001792 	.word	0x20001792
 8007fe8:	2000200e 	.word	0x2000200e
 8007fec:	2000200c 	.word	0x2000200c
 8007ff0:	20001654 	.word	0x20001654
 8007ff4:	20000ae6 	.word	0x20000ae6
 8007ff8:	20000045 	.word	0x20000045
 8007ffc:	20000044 	.word	0x20000044
 8008000:	200015dc 	.word	0x200015dc
 8008004:	200013d0 	.word	0x200013d0
 8008008:	200013d4 	.word	0x200013d4
 800800c:	20001824 	.word	0x20001824
 8008010:	20001830 	.word	0x20001830
			rejected_FLAG=false;
 8008014:	4b23      	ldr	r3, [pc, #140]	; (80080a4 <SendMessageFromPort+0x430>)
 8008016:	2200      	movs	r2, #0
 8008018:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 800801a:	200a      	movs	r0, #10
 800801c:	f005 fe0c 	bl	800dc38 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8008020:	3401      	adds	r4, #1
 8008022:	b2e4      	uxtb	r4, r4
 8008024:	3601      	adds	r6, #1
 8008026:	2c07      	cmp	r4, #7
 8008028:	d098      	beq.n	8007f5c <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 800802a:	4643      	mov	r3, r8
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	3b01      	subs	r3, #1
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	464a      	mov	r2, r9
 8008034:	5a9b      	ldrh	r3, [r3, r2]
 8008036:	4133      	asrs	r3, r6
 8008038:	07db      	lsls	r3, r3, #31
 800803a:	d5eb      	bpl.n	8008014 <SendMessageFromPort+0x3a0>
				Send_BOS_Message(p,message,length + 4,cmd50ms);
 800803c:	1d3d      	adds	r5, r7, #4
 800803e:	b2ad      	uxth	r5, r5
 8008040:	2332      	movs	r3, #50	; 0x32
 8008042:	002a      	movs	r2, r5
 8008044:	4918      	ldr	r1, [pc, #96]	; (80080a8 <SendMessageFromPort+0x434>)
 8008046:	0020      	movs	r0, r4
 8008048:	f7fa fe6c 	bl	8002d24 <Send_BOS_Message>
				osDelay(200);
 800804c:	20c8      	movs	r0, #200	; 0xc8
 800804e:	f006 f988 	bl	800e362 <osDelay>
				if(rejected_FLAG == true)
 8008052:	4b14      	ldr	r3, [pc, #80]	; (80080a4 <SendMessageFromPort+0x430>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0dc      	beq.n	8008014 <SendMessageFromPort+0x3a0>
					Send_BOS_Message(port,message,length + 4,cmd50ms);
 800805a:	2332      	movs	r3, #50	; 0x32
 800805c:	002a      	movs	r2, r5
 800805e:	4912      	ldr	r1, [pc, #72]	; (80080a8 <SendMessageFromPort+0x434>)
 8008060:	9803      	ldr	r0, [sp, #12]
 8008062:	f7fa fe5f 	bl	8002d24 <Send_BOS_Message>
 8008066:	e7d5      	b.n	8008014 <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 8008068:	2067      	movs	r0, #103	; 0x67
 800806a:	e77f      	b.n	8007f6c <SendMessageFromPort+0x2f8>
 800806c:	2067      	movs	r0, #103	; 0x67
 800806e:	e77d      	b.n	8007f6c <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8008070:	2069      	movs	r0, #105	; 0x69
 8008072:	e77b      	b.n	8007f6c <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8008074:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8008076:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8008078:	2b2d      	cmp	r3, #45	; 0x2d
 800807a:	dd00      	ble.n	800807e <SendMessageFromPort+0x40a>
 800807c:	e776      	b.n	8007f6c <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 800807e:	4a0b      	ldr	r2, [pc, #44]	; (80080ac <SendMessageFromPort+0x438>)
 8008080:	7813      	ldrb	r3, [r2, #0]
 8008082:	3301      	adds	r3, #1
 8008084:	b2db      	uxtb	r3, r3
 8008086:	7013      	strb	r3, [r2, #0]
 8008088:	4a07      	ldr	r2, [pc, #28]	; (80080a8 <SendMessageFromPort+0x434>)
 800808a:	1992      	adds	r2, r2, r6
 800808c:	445a      	add	r2, fp
 800808e:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 8008090:	4651      	mov	r1, sl
 8008092:	3101      	adds	r1, #1
 8008094:	b2cb      	uxtb	r3, r1
 8008096:	469a      	mov	sl, r3
 8008098:	e72b      	b.n	8007ef2 <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800809a:	464b      	mov	r3, r9
 800809c:	2b00      	cmp	r3, #0
 800809e:	d100      	bne.n	80080a2 <SendMessageFromPort+0x42e>
 80080a0:	e612      	b.n	8007cc8 <SendMessageFromPort+0x54>
 80080a2:	e664      	b.n	8007d6e <SendMessageFromPort+0xfa>
 80080a4:	20001824 	.word	0x20001824
 80080a8:	20001614 	.word	0x20001614
 80080ac:	200013d0 	.word	0x200013d0

080080b0 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 80080b0:	b530      	push	{r4, r5, lr}
 80080b2:	b083      	sub	sp, #12
 80080b4:	0005      	movs	r5, r0
	AddBcastPayload = false;
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <ForwardReceivedMessage+0x34>)
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 80080bc:	1e42      	subs	r2, r0, #1
 80080be:	00d3      	lsls	r3, r2, #3
 80080c0:	1a9b      	subs	r3, r3, r2
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <ForwardReceivedMessage+0x38>)
 80080c6:	5c9c      	ldrb	r4, [r3, r2]
		port =FindRoute(myID,dst);
 80080c8:	4b08      	ldr	r3, [pc, #32]	; (80080ec <ForwardReceivedMessage+0x3c>)
 80080ca:	7818      	ldrb	r0, [r3, #0]
 80080cc:	0021      	movs	r1, r4
 80080ce:	f7fb fd55 	bl	8003b7c <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 80080d2:	9500      	str	r5, [sp, #0]
 80080d4:	2300      	movs	r3, #0
 80080d6:	0022      	movs	r2, r4
 80080d8:	2100      	movs	r1, #0
 80080da:	f7ff fdcb 	bl	8007c74 <SendMessageFromPort>
}
 80080de:	2000      	movs	r0, #0
 80080e0:	b003      	add	sp, #12
 80080e2:	bd30      	pop	{r4, r5, pc}
 80080e4:	20000ae6 	.word	0x20000ae6
 80080e8:	20001424 	.word	0x20001424
 80080ec:	20001792 	.word	0x20001792

080080f0 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 80080f0:	b500      	push	{lr}
 80080f2:	b083      	sub	sp, #12
	AddBcastPayload = false;
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <BroadcastReceivedMessage+0x38>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 80080fa:	4b0c      	ldr	r3, [pc, #48]	; (800812c <BroadcastReceivedMessage+0x3c>)
 80080fc:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 80080fe:	28ff      	cmp	r0, #255	; 0xff
 8008100:	d009      	beq.n	8008116 <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8008102:	9100      	str	r1, [sp, #0]
 8008104:	2300      	movs	r3, #0
 8008106:	22fe      	movs	r2, #254	; 0xfe
 8008108:	2100      	movs	r1, #0
 800810a:	2000      	movs	r0, #0
 800810c:	f7ff fdb2 	bl	8007c74 <SendMessageFromPort>
}
 8008110:	2000      	movs	r0, #0
 8008112:	b003      	add	sp, #12
 8008114:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8008116:	9100      	str	r1, [sp, #0]
 8008118:	2300      	movs	r3, #0
 800811a:	32ff      	adds	r2, #255	; 0xff
 800811c:	2100      	movs	r1, #0
 800811e:	2000      	movs	r0, #0
 8008120:	f7ff fda8 	bl	8007c74 <SendMessageFromPort>
 8008124:	e7f4      	b.n	8008110 <BroadcastReceivedMessage+0x20>
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	20000ae6 	.word	0x20000ae6
 800812c:	20000045 	.word	0x20000045

08008130 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8008130:	b530      	push	{r4, r5, lr}
 8008132:	b083      	sub	sp, #12
 8008134:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8008136:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <BroadcastMessage+0x44>)
 8008138:	2501      	movs	r5, #1
 800813a:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <BroadcastMessage+0x48>)
 800813e:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8008140:	29ff      	cmp	r1, #255	; 0xff
 8008142:	d00e      	beq.n	8008162 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8008144:	9400      	str	r4, [sp, #0]
 8008146:	0013      	movs	r3, r2
 8008148:	22fe      	movs	r2, #254	; 0xfe
 800814a:	0001      	movs	r1, r0
 800814c:	2000      	movs	r0, #0
 800814e:	f7ff fd91 	bl	8007c74 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8008152:	0022      	movs	r2, r4
 8008154:	2100      	movs	r1, #0
 8008156:	4809      	ldr	r0, [pc, #36]	; (800817c <BroadcastMessage+0x4c>)
 8008158:	f00b fec6 	bl	8013ee8 <memset>
}
 800815c:	2000      	movs	r0, #0
 800815e:	b003      	add	sp, #12
 8008160:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8008162:	9400      	str	r4, [sp, #0]
 8008164:	0013      	movs	r3, r2
 8008166:	22ff      	movs	r2, #255	; 0xff
 8008168:	0001      	movs	r1, r0
 800816a:	2000      	movs	r0, #0
 800816c:	f7ff fd82 	bl	8007c74 <SendMessageFromPort>
 8008170:	e7ef      	b.n	8008152 <BroadcastMessage+0x22>
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	20000ae6 	.word	0x20000ae6
 8008178:	20000045 	.word	0x20000045
 800817c:	20001654 	.word	0x20001654

08008180 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8008180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008182:	b083      	sub	sp, #12
 8008184:	0004      	movs	r4, r0
 8008186:	000e      	movs	r6, r1
 8008188:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 800818a:	28ff      	cmp	r0, #255	; 0xff
 800818c:	d012      	beq.n	80081b4 <SendMessageToModule+0x34>
				port =FindRoute(myID,dst);
 800818e:	4f0d      	ldr	r7, [pc, #52]	; (80081c4 <SendMessageToModule+0x44>)
 8008190:	7838      	ldrb	r0, [r7, #0]
 8008192:	0021      	movs	r1, r4
 8008194:	f7fb fcf2 	bl	8003b7c <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8008198:	7839      	ldrb	r1, [r7, #0]
 800819a:	9500      	str	r5, [sp, #0]
 800819c:	0033      	movs	r3, r6
 800819e:	0022      	movs	r2, r4
 80081a0:	f7ff fd68 	bl	8007c74 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 80081a4:	002a      	movs	r2, r5
 80081a6:	2100      	movs	r1, #0
 80081a8:	4807      	ldr	r0, [pc, #28]	; (80081c8 <SendMessageToModule+0x48>)
 80081aa:	f00b fe9d 	bl	8013ee8 <memset>
}
 80081ae:	2000      	movs	r0, #0
 80081b0:	b003      	add	sp, #12
 80081b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 80081b4:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <SendMessageToModule+0x44>)
 80081b6:	7818      	ldrb	r0, [r3, #0]
 80081b8:	0013      	movs	r3, r2
 80081ba:	000a      	movs	r2, r1
 80081bc:	21ff      	movs	r1, #255	; 0xff
 80081be:	f7ff ffb7 	bl	8008130 <BroadcastMessage>
 80081c2:	e7f4      	b.n	80081ae <SendMessageToModule+0x2e>
 80081c4:	20001792 	.word	0x20001792
 80081c8:	20001654 	.word	0x20001654

080081cc <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 80081cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ce:	46de      	mov	lr, fp
 80081d0:	4657      	mov	r7, sl
 80081d2:	464e      	mov	r6, r9
 80081d4:	4645      	mov	r5, r8
 80081d6:	b5e0      	push	{r5, r6, r7, lr}
 80081d8:	b091      	sub	sp, #68	; 0x44
 80081da:	900f      	str	r0, [sp, #60]	; 0x3c
 80081dc:	000c      	movs	r4, r1
 80081de:	9106      	str	r1, [sp, #24]
 80081e0:	0015      	movs	r5, r2
 80081e2:	920e      	str	r2, [sp, #56]	; 0x38
 80081e4:	001e      	movs	r6, r3
 80081e6:	ab1a      	add	r3, sp, #104	; 0x68
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	4698      	mov	r8, r3
 80081ec:	ab1d      	add	r3, sp, #116	; 0x74
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 80081f2:	4b5a      	ldr	r3, [pc, #360]	; (800835c <StartScastDMAStream+0x190>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	428b      	cmp	r3, r1
 80081f8:	d11d      	bne.n	8008236 <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80081fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80081fc:	0e1b      	lsrs	r3, r3, #24
 80081fe:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8008200:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008202:	0c1b      	lsrs	r3, r3, #16
 8008204:	b2db      	uxtb	r3, r3
 8008206:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8008208:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800820a:	0a1b      	lsrs	r3, r3, #8
 800820c:	b2db      	uxtb	r3, r3
 800820e:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8008210:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008212:	0e1b      	lsrs	r3, r3, #24
 8008214:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8008216:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008218:	0c1b      	lsrs	r3, r3, #16
 800821a:	b2db      	uxtb	r3, r3
 800821c:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 800821e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008220:	0a1b      	lsrs	r3, r3, #8
 8008222:	b2db      	uxtb	r3, r3
 8008224:	469b      	mov	fp, r3
 8008226:	4d4e      	ldr	r5, [pc, #312]	; (8008360 <StartScastDMAStream+0x194>)
 8008228:	231a      	movs	r3, #26
 800822a:	4699      	mov	r9, r3
 800822c:	44a9      	add	r9, r5
				temp2 =dstP;
 800822e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008230:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008232:	4c4c      	ldr	r4, [pc, #304]	; (8008364 <StartScastDMAStream+0x198>)
 8008234:	e05c      	b.n	80082f0 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8008236:	4b4b      	ldr	r3, [pc, #300]	; (8008364 <StartScastDMAStream+0x198>)
 8008238:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800823a:	0e12      	lsrs	r2, r2, #24
 800823c:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 800823e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008240:	0c12      	lsrs	r2, r2, #16
 8008242:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8008244:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008246:	0a12      	lsrs	r2, r2, #8
 8008248:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 800824a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800824c:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 800824e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008250:	0e12      	lsrs	r2, r2, #24
 8008252:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8008254:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008256:	0c12      	lsrs	r2, r2, #16
 8008258:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 800825a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800825c:	0a12      	lsrs	r2, r2, #8
 800825e:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8008260:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008262:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8008264:	4642      	mov	r2, r8
 8008266:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8008268:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 800826a:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 800826c:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 800826e:	4652      	mov	r2, sl
 8008270:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8008272:	220d      	movs	r2, #13
 8008274:	211c      	movs	r1, #28
 8008276:	0020      	movs	r0, r4
 8008278:	f7ff ff82 	bl	8008180 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 800827c:	2000      	movs	r0, #0
 800827e:	b011      	add	sp, #68	; 0x44
 8008280:	bc3c      	pop	{r2, r3, r4, r5}
 8008282:	4690      	mov	r8, r2
 8008284:	4699      	mov	r9, r3
 8008286:	46a2      	mov	sl, r4
 8008288:	46ab      	mov	fp, r5
 800828a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 800828c:	9906      	ldr	r1, [sp, #24]
 800828e:	f7fb fc75 	bl	8003b7c <FindRoute>
 8008292:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8008294:	0031      	movs	r1, r6
 8008296:	9806      	ldr	r0, [sp, #24]
 8008298:	f7fb fc70 	bl	8003b7c <FindRoute>
			if(route[i] == dstM){
 800829c:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 800829e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 80082a0:	42b0      	cmp	r0, r6
 80082a2:	d134      	bne.n	800830e <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 80082a4:	9a08      	ldr	r2, [sp, #32]
 80082a6:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 80082a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082aa:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 80082ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082ae:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 80082b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80082b2:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 80082b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082b6:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 80082b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082ba:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 80082bc:	465a      	mov	r2, fp
 80082be:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 80082c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80082c2:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 80082c4:	4642      	mov	r2, r8
 80082c6:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 80082c8:	9a07      	ldr	r2, [sp, #28]
 80082ca:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 80082cc:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 80082ce:	4653      	mov	r3, sl
 80082d0:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 80082d2:	0031      	movs	r1, r6
 80082d4:	9806      	ldr	r0, [sp, #24]
 80082d6:	f7fb fc51 	bl	8003b7c <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 80082da:	7878      	ldrb	r0, [r7, #1]
 80082dc:	220c      	movs	r2, #12
 80082de:	211b      	movs	r1, #27
 80082e0:	f7ff ff4e 	bl	8008180 <SendMessageToModule>
			osDelay(10);
 80082e4:	200a      	movs	r0, #10
 80082e6:	f006 f83c 	bl	800e362 <osDelay>
 80082ea:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 80082ec:	454d      	cmp	r5, r9
 80082ee:	d013      	beq.n	8008318 <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 80082f0:	0031      	movs	r1, r6
 80082f2:	9806      	ldr	r0, [sp, #24]
 80082f4:	f7fb fc42 	bl	8003b7c <FindRoute>
 80082f8:	002f      	movs	r7, r5
		if(route[i]){
 80082fa:	7868      	ldrb	r0, [r5, #1]
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d0f4      	beq.n	80082ea <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8008300:	78a9      	ldrb	r1, [r5, #2]
 8008302:	2900      	cmp	r1, #0
 8008304:	d0c2      	beq.n	800828c <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8008306:	f7fb fc39 	bl	8003b7c <FindRoute>
 800830a:	9007      	str	r0, [sp, #28]
 800830c:	e7c2      	b.n	8008294 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 800830e:	7839      	ldrb	r1, [r7, #0]
 8008310:	f7fb fc34 	bl	8003b7c <FindRoute>
 8008314:	0003      	movs	r3, r0
 8008316:	e7c5      	b.n	80082a4 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8008318:	9806      	ldr	r0, [sp, #24]
 800831a:	42b0      	cmp	r0, r6
 800831c:	d118      	bne.n	8008350 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 800831e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008324:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008326:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008328:	4640      	mov	r0, r8
 800832a:	f7ff fb81 	bl	8007a30 <SetupDMAStreams>
	if(stored){
 800832e:	4653      	mov	r3, sl
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0a3      	beq.n	800827c <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8008334:	2300      	movs	r3, #0
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	9302      	str	r3, [sp, #8]
 800833c:	9301      	str	r3, [sp, #4]
 800833e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008344:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008346:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008348:	4640      	mov	r0, r8
 800834a:	f7fb f90f 	bl	800356c <SaveEEstreams>
 800834e:	e795      	b.n	800827c <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8008350:	0031      	movs	r1, r6
 8008352:	f7fb fc13 	bl	8003b7c <FindRoute>
 8008356:	900e      	str	r0, [sp, #56]	; 0x38
 8008358:	e7e1      	b.n	800831e <StartScastDMAStream+0x152>
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	20001792 	.word	0x20001792
 8008360:	20006ad3 	.word	0x20006ad3
 8008364:	20001654 	.word	0x20001654

08008368 <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8008368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800836a:	46de      	mov	lr, fp
 800836c:	4657      	mov	r7, sl
 800836e:	464e      	mov	r6, r9
 8008370:	4645      	mov	r5, r8
 8008372:	b5e0      	push	{r5, r6, r7, lr}


	uint8_t calculated_crc,port_number,length,port_index;
	for(;;)
	{
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 8008374:	4b55      	ldr	r3, [pc, #340]	; (80084cc <BackEndTask+0x164>)
 8008376:	4698      	mov	r8, r3
		{
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 8008378:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <BackEndTask+0x168>)
 800837a:	4699      	mov	r9, r3
 800837c:	e037      	b.n	80083ee <BackEndTask+0x86>


			Message_counter++;
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
			{
				Accepted_Messages++;
 800837e:	4a55      	ldr	r2, [pc, #340]	; (80084d4 <BackEndTask+0x16c>)
 8008380:	8813      	ldrh	r3, [r2, #0]
 8008382:	3301      	adds	r3, #1
 8008384:	8013      	strh	r3, [r2, #0]
				messageLength[port_index] =length;
 8008386:	4b54      	ldr	r3, [pc, #336]	; (80084d8 <BackEndTask+0x170>)
 8008388:	551d      	strb	r5, [r3, r4]
				memcpy(&cMessage[port_index][0],&MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][3],length);
 800838a:	00e0      	lsls	r0, r4, #3
 800838c:	1b00      	subs	r0, r0, r4
 800838e:	00c0      	lsls	r0, r0, #3
 8008390:	4b52      	ldr	r3, [pc, #328]	; (80084dc <BackEndTask+0x174>)
 8008392:	469a      	mov	sl, r3
 8008394:	4450      	add	r0, sl
 8008396:	00a2      	lsls	r2, r4, #2
 8008398:	1912      	adds	r2, r2, r4
 800839a:	00d3      	lsls	r3, r2, #3
 800839c:	1a9b      	subs	r3, r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	3303      	adds	r3, #3
 80083a2:	4661      	mov	r1, ip
 80083a4:	00c9      	lsls	r1, r1, #3
 80083a6:	1859      	adds	r1, r3, r1
 80083a8:	4b4d      	ldr	r3, [pc, #308]	; (80084e0 <BackEndTask+0x178>)
 80083aa:	18c9      	adds	r1, r1, r3
 80083ac:	002a      	movs	r2, r5
 80083ae:	f00b fd92 	bl	8013ed6 <memcpy>
				if(cMessage[port_index][0] == myID || cMessage[port_index][0] == BOS_BROADCAST || cMessage[port_index][0] == BOS_MULTICAST)
 80083b2:	00e3      	lsls	r3, r4, #3
 80083b4:	1b1b      	subs	r3, r3, r4
 80083b6:	00db      	lsls	r3, r3, #3
 80083b8:	4652      	mov	r2, sl
 80083ba:	5c9b      	ldrb	r3, [r3, r2]
 80083bc:	4a49      	ldr	r2, [pc, #292]	; (80084e4 <BackEndTask+0x17c>)
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d003      	beq.n	80083cc <BackEndTask+0x64>
 80083c4:	3302      	adds	r3, #2
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d803      	bhi.n	80083d4 <BackEndTask+0x6c>
					/* Notify messaging tasks */
					NotifyMessagingTask(port_number);
 80083cc:	0030      	movs	r0, r6
 80083ce:	f7ff fc0b 	bl	8007be8 <NotifyMessagingTask>
 80083d2:	e069      	b.n	80084a8 <BackEndTask+0x140>

				else{
					/* Forward message */
					ForwardReceivedMessage(port_number);
 80083d4:	0030      	movs	r0, r6
 80083d6:	f7ff fe6b 	bl	80080b0 <ForwardReceivedMessage>
 80083da:	e065      	b.n	80084a8 <BackEndTask+0x140>
				Rejected_Messages++;
				//TODO: Implement something here when the message is rejected.
			}

			MSG_Buffer_Index_Start[port_index]++;
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80083dc:	4b42      	ldr	r3, [pc, #264]	; (80084e8 <BackEndTask+0x180>)
 80083de:	2200      	movs	r2, #0
 80083e0:	551a      	strb	r2, [r3, r4]
 80083e2:	e069      	b.n	80084b8 <BackEndTask+0x150>

			Process_Message_Buffer_Index_Start++;
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80083e4:	4b39      	ldr	r3, [pc, #228]	; (80084cc <BackEndTask+0x164>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	701a      	strb	r2, [r3, #0]
		}

		taskYIELD();
 80083ea:	f007 fd9f 	bl	800ff2c <vPortYield>
		if(Process_Message_Buffer_Index_End != Process_Message_Buffer_Index_Start)
 80083ee:	4643      	mov	r3, r8
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	4a3e      	ldr	r2, [pc, #248]	; (80084ec <BackEndTask+0x184>)
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d0f7      	beq.n	80083ea <BackEndTask+0x82>
			port_number = Process_Message_Buffer[Process_Message_Buffer_Index_Start];
 80083fa:	464a      	mov	r2, r9
 80083fc:	5cd6      	ldrb	r6, [r2, r3]
			port_index = port_number - 1;
 80083fe:	1e74      	subs	r4, r6, #1
 8008400:	b2e4      	uxtb	r4, r4
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0] = 'H';
 8008402:	4b39      	ldr	r3, [pc, #228]	; (80084e8 <BackEndTask+0x180>)
 8008404:	5d19      	ldrb	r1, [r3, r4]
 8008406:	4b36      	ldr	r3, [pc, #216]	; (80084e0 <BackEndTask+0x178>)
 8008408:	469a      	mov	sl, r3
 800840a:	00cb      	lsls	r3, r1, #3
 800840c:	469c      	mov	ip, r3
 800840e:	1a5d      	subs	r5, r3, r1
 8008410:	00a0      	lsls	r0, r4, #2
 8008412:	1900      	adds	r0, r0, r4
 8008414:	00c3      	lsls	r3, r0, #3
 8008416:	1a1a      	subs	r2, r3, r0
 8008418:	1952      	adds	r2, r2, r5
 800841a:	00d2      	lsls	r2, r2, #3
 800841c:	2548      	movs	r5, #72	; 0x48
 800841e:	4657      	mov	r7, sl
 8008420:	55d5      	strb	r5, [r2, r7]
			MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1] = 'Z';
 8008422:	4452      	add	r2, sl
 8008424:	3512      	adds	r5, #18
 8008426:	46ab      	mov	fp, r5
 8008428:	7055      	strb	r5, [r2, #1]
			length = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 800842a:	7895      	ldrb	r5, [r2, #2]
			Calculate_CRC_Buffer[0] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][0];
 800842c:	4a30      	ldr	r2, [pc, #192]	; (80084f0 <BackEndTask+0x188>)
 800842e:	4667      	mov	r7, ip
 8008430:	1a7f      	subs	r7, r7, r1
 8008432:	46bc      	mov	ip, r7
 8008434:	1a1b      	subs	r3, r3, r0
 8008436:	4463      	add	r3, ip
 8008438:	00db      	lsls	r3, r3, #3
 800843a:	4650      	mov	r0, sl
 800843c:	5c1b      	ldrb	r3, [r3, r0]
 800843e:	7013      	strb	r3, [r2, #0]
			Calculate_CRC_Buffer[1] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][1];
 8008440:	465b      	mov	r3, fp
 8008442:	7053      	strb	r3, [r2, #1]
			Calculate_CRC_Buffer[2] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][2];
 8008444:	7095      	strb	r5, [r2, #2]
			for(int i=0;i<length;i++)
 8008446:	2d00      	cmp	r5, #0
 8008448:	dd10      	ble.n	800846c <BackEndTask+0x104>
 800844a:	00a2      	lsls	r2, r4, #2
 800844c:	1912      	adds	r2, r2, r4
 800844e:	00d3      	lsls	r3, r2, #3
 8008450:	1a9b      	subs	r3, r3, r2
 8008452:	00db      	lsls	r3, r3, #3
 8008454:	3303      	adds	r3, #3
 8008456:	00f9      	lsls	r1, r7, #3
 8008458:	185b      	adds	r3, r3, r1
 800845a:	181b      	adds	r3, r3, r0
 800845c:	4a25      	ldr	r2, [pc, #148]	; (80084f4 <BackEndTask+0x18c>)
 800845e:	1950      	adds	r0, r2, r5
				Calculate_CRC_Buffer[i+3] = MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][i + 3];
 8008460:	7819      	ldrb	r1, [r3, #0]
 8008462:	7011      	strb	r1, [r2, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	3201      	adds	r2, #1
			for(int i=0;i<length;i++)
 8008468:	4282      	cmp	r2, r0
 800846a:	d1f9      	bne.n	8008460 <BackEndTask+0xf8>
			calculated_crc = CalculateCRC8(Calculate_CRC_Buffer,
 800846c:	1ce9      	adds	r1, r5, #3
 800846e:	4820      	ldr	r0, [pc, #128]	; (80084f0 <BackEndTask+0x188>)
 8008470:	f003 fa80 	bl	800b974 <CalculateCRC8>
			Message_counter++;
 8008474:	4a20      	ldr	r2, [pc, #128]	; (80084f8 <BackEndTask+0x190>)
 8008476:	8813      	ldrh	r3, [r2, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	8013      	strh	r3, [r2, #0]
			if(calculated_crc == MSG_Buffer[port_index][MSG_Buffer_Index_Start[port_index]][length + 3])
 800847c:	4b1a      	ldr	r3, [pc, #104]	; (80084e8 <BackEndTask+0x180>)
 800847e:	5d19      	ldrb	r1, [r3, r4]
 8008480:	00cb      	lsls	r3, r1, #3
 8008482:	1a5b      	subs	r3, r3, r1
 8008484:	469c      	mov	ip, r3
 8008486:	00a3      	lsls	r3, r4, #2
 8008488:	191b      	adds	r3, r3, r4
 800848a:	00da      	lsls	r2, r3, #3
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	4463      	add	r3, ip
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	4a13      	ldr	r2, [pc, #76]	; (80084e0 <BackEndTask+0x178>)
 8008494:	18d3      	adds	r3, r2, r3
 8008496:	195b      	adds	r3, r3, r5
 8008498:	78db      	ldrb	r3, [r3, #3]
 800849a:	4283      	cmp	r3, r0
 800849c:	d100      	bne.n	80084a0 <BackEndTask+0x138>
 800849e:	e76e      	b.n	800837e <BackEndTask+0x16>
				Rejected_Messages++;
 80084a0:	4a16      	ldr	r2, [pc, #88]	; (80084fc <BackEndTask+0x194>)
 80084a2:	8813      	ldrh	r3, [r2, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	8013      	strh	r3, [r2, #0]
			MSG_Buffer_Index_Start[port_index]++;
 80084a8:	4b0f      	ldr	r3, [pc, #60]	; (80084e8 <BackEndTask+0x180>)
 80084aa:	5d1b      	ldrb	r3, [r3, r4]
 80084ac:	3301      	adds	r3, #1
 80084ae:	b2db      	uxtb	r3, r3
			if(MSG_Buffer_Index_Start[port_index] == MSG_COUNT) MSG_Buffer_Index_Start[port_index] = 0;
 80084b0:	2b05      	cmp	r3, #5
 80084b2:	d093      	beq.n	80083dc <BackEndTask+0x74>
			MSG_Buffer_Index_Start[port_index]++;
 80084b4:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <BackEndTask+0x180>)
 80084b6:	5513      	strb	r3, [r2, r4]
			Process_Message_Buffer_Index_Start++;
 80084b8:	4b04      	ldr	r3, [pc, #16]	; (80084cc <BackEndTask+0x164>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	3301      	adds	r3, #1
 80084be:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_Start == MSG_COUNT) Process_Message_Buffer_Index_Start = 0;
 80084c0:	2b05      	cmp	r3, #5
 80084c2:	d08f      	beq.n	80083e4 <BackEndTask+0x7c>
			Process_Message_Buffer_Index_Start++;
 80084c4:	4a01      	ldr	r2, [pc, #4]	; (80084cc <BackEndTask+0x164>)
 80084c6:	7013      	strb	r3, [r2, #0]
 80084c8:	e78f      	b.n	80083ea <BackEndTask+0x82>
 80084ca:	46c0      	nop			; (mov r8, r8)
 80084cc:	20001192 	.word	0x20001192
 80084d0:	2000118c 	.word	0x2000118c
 80084d4:	2000201c 	.word	0x2000201c
 80084d8:	2000164c 	.word	0x2000164c
 80084dc:	20001424 	.word	0x20001424
 80084e0:	20000aec 	.word	0x20000aec
 80084e4:	20001792 	.word	0x20001792
 80084e8:	20001184 	.word	0x20001184
 80084ec:	20001191 	.word	0x20001191
 80084f0:	20006af4 	.word	0x20006af4
 80084f4:	20006af7 	.word	0x20006af7
 80084f8:	2000204c 	.word	0x2000204c
 80084fc:	2000204e 	.word	0x2000204e

08008500 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 8008500:	2001      	movs	r0, #1
 8008502:	4770      	bx	lr

08008504 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 8008504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008506:	46de      	mov	lr, fp
 8008508:	4657      	mov	r7, sl
 800850a:	464e      	mov	r6, r9
 800850c:	4645      	mov	r5, r8
 800850e:	b5e0      	push	{r5, r6, r7, lr}
 8008510:	b093      	sub	sp, #76	; 0x4c
	port =(int8_t )(unsigned )argument;
 8008512:	b2c3      	uxtb	r3, r0
 8008514:	9308      	str	r3, [sp, #32]
 8008516:	23ff      	movs	r3, #255	; 0xff
 8008518:	4003      	ands	r3, r0
 800851a:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 800851c:	1e5d      	subs	r5, r3, #1
 800851e:	00eb      	lsls	r3, r5, #3
 8008520:	1b5b      	subs	r3, r3, r5
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 8008526:	4ae2      	ldr	r2, [pc, #904]	; (80088b0 <PxMessagingTask+0x3ac>)
 8008528:	18d3      	adds	r3, r2, r3
 800852a:	9306      	str	r3, [sp, #24]
	HAL_StatusTypeDef status =HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 8008530:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 8008532:	000e      	movs	r6, r1
 8008534:	1853      	adds	r3, r2, r1
 8008536:	3302      	adds	r3, #2
 8008538:	9309      	str	r3, [sp, #36]	; 0x24
 800853a:	468a      	mov	sl, r1
 800853c:	e062      	b.n	8008604 <PxMessagingTask+0x100>
				longMessage =1;
 800853e:	4add      	ldr	r2, [pc, #884]	; (80088b4 <PxMessagingTask+0x3b0>)
 8008540:	2101      	movs	r1, #1
 8008542:	7011      	strb	r1, [r2, #0]
 8008544:	e06f      	b.n	8008626 <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 8008546:	4bda      	ldr	r3, [pc, #872]	; (80088b0 <PxMessagingTask+0x3ac>)
 8008548:	199b      	adds	r3, r3, r6
 800854a:	1818      	adds	r0, r3, r0
 800854c:	78c7      	ldrb	r7, [r0, #3]
 800854e:	e08e      	b.n	800866e <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 8008550:	4bd9      	ldr	r3, [pc, #868]	; (80088b8 <PxMessagingTask+0x3b4>)
 8008552:	2200      	movs	r2, #0
 8008554:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 8008556:	212c      	movs	r1, #44	; 0x2c
 8008558:	9804      	ldr	r0, [sp, #16]
 800855a:	f7ff fe11 	bl	8008180 <SendMessageToModule>
 800855e:	e089      	b.n	8008674 <PxMessagingTask+0x170>
					Delay_ms(100);
 8008560:	2064      	movs	r0, #100	; 0x64
 8008562:	f007 fe4f 	bl	8010204 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 8008566:	2300      	movs	r3, #0
 8008568:	9a08      	ldr	r2, [sp, #32]
 800856a:	4659      	mov	r1, fp
 800856c:	9804      	ldr	r0, [sp, #16]
 800856e:	f001 fcf3 	bl	8009f58 <remoteBootloaderUpdate>
 8008572:	e02e      	b.n	80085d2 <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8008574:	4bd1      	ldr	r3, [pc, #836]	; (80088bc <PxMessagingTask+0x3b8>)
 8008576:	5d5a      	ldrb	r2, [r3, r5]
 8008578:	4bcd      	ldr	r3, [pc, #820]	; (80088b0 <PxMessagingTask+0x3ac>)
 800857a:	199b      	adds	r3, r3, r6
 800857c:	189b      	adds	r3, r3, r2
 800857e:	3b01      	subs	r3, #1
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	4acf      	ldr	r2, [pc, #828]	; (80088c0 <PxMessagingTask+0x3bc>)
 8008584:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 8008586:	2103      	movs	r1, #3
 8008588:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800858a:	429a      	cmp	r2, r3
 800858c:	d01e      	beq.n	80085cc <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800858e:	4acc      	ldr	r2, [pc, #816]	; (80088c0 <PxMessagingTask+0x3bc>)
 8008590:	7013      	strb	r3, [r2, #0]
 8008592:	4acc      	ldr	r2, [pc, #816]	; (80088c4 <PxMessagingTask+0x3c0>)
 8008594:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 8008596:	9908      	ldr	r1, [sp, #32]
 8008598:	20ff      	movs	r0, #255	; 0xff
 800859a:	f7ff fda9 	bl	80080f0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800859e:	4bc7      	ldr	r3, [pc, #796]	; (80088bc <PxMessagingTask+0x3b8>)
 80085a0:	5d5a      	ldrb	r2, [r3, r5]
 80085a2:	4bc3      	ldr	r3, [pc, #780]	; (80088b0 <PxMessagingTask+0x3ac>)
 80085a4:	199b      	adds	r3, r3, r6
 80085a6:	189b      	adds	r3, r3, r2
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2200      	movs	r2, #0
 80085ac:	701a      	strb	r2, [r3, #0]
				shift +=4;
 80085ae:	9c05      	ldr	r4, [sp, #20]
 80085b0:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 80085b2:	4bc2      	ldr	r3, [pc, #776]	; (80088bc <PxMessagingTask+0x3b8>)
 80085b4:	5d59      	ldrb	r1, [r3, r5]
 80085b6:	1b0a      	subs	r2, r1, r4
 80085b8:	b2d3      	uxtb	r3, r2
 80085ba:	9305      	str	r3, [sp, #20]
					switch(code){
 80085bc:	2f2d      	cmp	r7, #45	; 0x2d
 80085be:	d901      	bls.n	80085c4 <PxMessagingTask+0xc0>
 80085c0:	f001 fa96 	bl	8009af0 <PxMessagingTask+0x15ec>
 80085c4:	00bb      	lsls	r3, r7, #2
 80085c6:	4ac0      	ldr	r2, [pc, #768]	; (80088c8 <PxMessagingTask+0x3c4>)
 80085c8:	58d3      	ldr	r3, [r2, r3]
 80085ca:	469f      	mov	pc, r3
				if(result == BOS_OK){
 80085cc:	464b      	mov	r3, r9
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0ed      	beq.n	80085ae <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 80085d2:	464b      	mov	r3, r9
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <PxMessagingTask+0xd8>
 80085d8:	f001 faac 	bl	8009b34 <PxMessagingTask+0x1630>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 80085dc:	4cb7      	ldr	r4, [pc, #732]	; (80088bc <PxMessagingTask+0x3b8>)
 80085de:	5d62      	ldrb	r2, [r4, r5]
 80085e0:	2100      	movs	r1, #0
 80085e2:	9806      	ldr	r0, [sp, #24]
 80085e4:	f00b fc80 	bl	8013ee8 <memset>
		messageLength[port - 1] =0;
 80085e8:	2300      	movs	r3, #0
 80085ea:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 80085ec:	4bb7      	ldr	r3, [pc, #732]	; (80088cc <PxMessagingTask+0x3c8>)
 80085ee:	4642      	mov	r2, r8
 80085f0:	5c9b      	ldrb	r3, [r3, r2]
 80085f2:	3b02      	subs	r3, #2
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d903      	bls.n	8008600 <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 80085f8:	4bb4      	ldr	r3, [pc, #720]	; (80088cc <PxMessagingTask+0x3c8>)
 80085fa:	2200      	movs	r2, #0
 80085fc:	4641      	mov	r1, r8
 80085fe:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 8008600:	f007 fc94 	bl	800ff2c <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8008604:	2101      	movs	r1, #1
 8008606:	4249      	negs	r1, r1
 8008608:	2001      	movs	r0, #1
 800860a:	f007 f9d5 	bl	800f9b8 <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800860e:	4bab      	ldr	r3, [pc, #684]	; (80088bc <PxMessagingTask+0x3b8>)
 8008610:	5d5b      	ldrb	r3, [r3, r5]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d0dd      	beq.n	80085d2 <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 8008616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	b25a      	sxtb	r2, r3
 800861c:	2a00      	cmp	r2, #0
 800861e:	db8e      	blt.n	800853e <PxMessagingTask+0x3a>
				longMessage =0;
 8008620:	4aa4      	ldr	r2, [pc, #656]	; (80088b4 <PxMessagingTask+0x3b0>)
 8008622:	2100      	movs	r1, #0
 8008624:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 8008626:	4aa2      	ldr	r2, [pc, #648]	; (80088b0 <PxMessagingTask+0x3ac>)
 8008628:	5cb1      	ldrb	r1, [r6, r2]
 800862a:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 800862c:	1992      	adds	r2, r2, r6
 800862e:	7852      	ldrb	r2, [r2, #1]
 8008630:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 8008632:	2201      	movs	r2, #1
 8008634:	0010      	movs	r0, r2
 8008636:	4018      	ands	r0, r3
			shift =0;
 8008638:	9005      	str	r0, [sp, #20]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800863a:	499f      	ldr	r1, [pc, #636]	; (80088b8 <PxMessagingTask+0x3b4>)
 800863c:	071c      	lsls	r4, r3, #28
 800863e:	0fa4      	lsrs	r4, r4, #30
 8008640:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 8008642:	091c      	lsrs	r4, r3, #4
 8008644:	4022      	ands	r2, r4
 8008646:	0014      	movs	r4, r2
 8008648:	1e67      	subs	r7, r4, #1
 800864a:	41bc      	sbcs	r4, r7
 800864c:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800864e:	2460      	movs	r4, #96	; 0x60
 8008650:	401c      	ands	r4, r3
 8008652:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 8008654:	079b      	lsls	r3, r3, #30
 8008656:	d400      	bmi.n	800865a <PxMessagingTask+0x156>
 8008658:	e775      	b.n	8008546 <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800865a:	4b95      	ldr	r3, [pc, #596]	; (80088b0 <PxMessagingTask+0x3ac>)
 800865c:	199b      	adds	r3, r3, r6
 800865e:	181b      	adds	r3, r3, r0
 8008660:	7919      	ldrb	r1, [r3, #4]
 8008662:	0209      	lsls	r1, r1, #8
 8008664:	78df      	ldrb	r7, [r3, #3]
 8008666:	187f      	adds	r7, r7, r1
 8008668:	b2bf      	uxth	r7, r7
				++shift;
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	9305      	str	r3, [sp, #20]
			if(true == BOSMessaging.received_Acknowledgment){
 800866e:	2a00      	cmp	r2, #0
 8008670:	d000      	beq.n	8008674 <PxMessagingTask+0x170>
 8008672:	e76d      	b.n	8008550 <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8008674:	465b      	mov	r3, fp
 8008676:	3b01      	subs	r3, #1
 8008678:	b2db      	uxtb	r3, r3
 800867a:	2bfc      	cmp	r3, #252	; 0xfc
 800867c:	d901      	bls.n	8008682 <PxMessagingTask+0x17e>
 800867e:	f001 fa93 	bl	8009ba8 <PxMessagingTask+0x16a4>
 8008682:	4b93      	ldr	r3, [pc, #588]	; (80088d0 <PxMessagingTask+0x3cc>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	455b      	cmp	r3, fp
 8008688:	d101      	bne.n	800868e <PxMessagingTask+0x18a>
 800868a:	f001 fa8d 	bl	8009ba8 <PxMessagingTask+0x16a4>
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <PxMessagingTask+0x192>
 8008692:	f001 fa83 	bl	8009b9c <PxMessagingTask+0x1698>
				ForwardReceivedMessage(port);
 8008696:	9808      	ldr	r0, [sp, #32]
 8008698:	f7ff fd0a 	bl	80080b0 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800869c:	4b86      	ldr	r3, [pc, #536]	; (80088b8 <PxMessagingTask+0x3b4>)
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 80086a4:	4b8b      	ldr	r3, [pc, #556]	; (80088d4 <PxMessagingTask+0x3d0>)
 80086a6:	2203      	movs	r2, #3
 80086a8:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 80086aa:	2f19      	cmp	r7, #25
 80086ac:	d100      	bne.n	80086b0 <PxMessagingTask+0x1ac>
 80086ae:	e757      	b.n	8008560 <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 80086b0:	2f1a      	cmp	r7, #26
 80086b2:	d18e      	bne.n	80085d2 <PxMessagingTask+0xce>
					Delay_ms(100);
 80086b4:	2064      	movs	r0, #100	; 0x64
 80086b6:	f007 fda5 	bl	8010204 <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 80086ba:	4b7d      	ldr	r3, [pc, #500]	; (80088b0 <PxMessagingTask+0x3ac>)
 80086bc:	199b      	adds	r3, r3, r6
 80086be:	9a05      	ldr	r2, [sp, #20]
 80086c0:	5c9b      	ldrb	r3, [r3, r2]
 80086c2:	9a08      	ldr	r2, [sp, #32]
 80086c4:	4659      	mov	r1, fp
 80086c6:	9804      	ldr	r0, [sp, #16]
 80086c8:	f001 fc46 	bl	8009f58 <remoteBootloaderUpdate>
 80086cc:	e781      	b.n	80085d2 <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 80086ce:	9b05      	ldr	r3, [sp, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d01f      	beq.n	8008714 <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 80086d4:	9b04      	ldr	r3, [sp, #16]
 80086d6:	1e58      	subs	r0, r3, #1
 80086d8:	0042      	lsls	r2, r0, #1
 80086da:	4b7f      	ldr	r3, [pc, #508]	; (80088d8 <PxMessagingTask+0x3d4>)
 80086dc:	5ad3      	ldrh	r3, [r2, r3]
 80086de:	4652      	mov	r2, sl
 80086e0:	1911      	adds	r1, r2, r4
 80086e2:	4a73      	ldr	r2, [pc, #460]	; (80088b0 <PxMessagingTask+0x3ac>)
 80086e4:	1889      	adds	r1, r1, r2
 80086e6:	3201      	adds	r2, #1
 80086e8:	4452      	add	r2, sl
 80086ea:	1914      	adds	r4, r2, r4
 80086ec:	9a05      	ldr	r2, [sp, #20]
 80086ee:	3a01      	subs	r2, #1
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	18a4      	adds	r4, r4, r2
 80086f4:	2780      	movs	r7, #128	; 0x80
 80086f6:	023f      	lsls	r7, r7, #8
 80086f8:	4684      	mov	ip, r0
 80086fa:	780a      	ldrb	r2, [r1, #0]
 80086fc:	3a01      	subs	r2, #1
 80086fe:	0038      	movs	r0, r7
 8008700:	4110      	asrs	r0, r2
 8008702:	4303      	orrs	r3, r0
 8008704:	b29b      	uxth	r3, r3
 8008706:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 8008708:	42a1      	cmp	r1, r4
 800870a:	d1f6      	bne.n	80086fa <PxMessagingTask+0x1f6>
 800870c:	4660      	mov	r0, ip
 800870e:	0040      	lsls	r0, r0, #1
 8008710:	4a71      	ldr	r2, [pc, #452]	; (80088d8 <PxMessagingTask+0x3d4>)
 8008712:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 8008714:	4b71      	ldr	r3, [pc, #452]	; (80088dc <PxMessagingTask+0x3d8>)
 8008716:	2200      	movs	r2, #0
 8008718:	701a      	strb	r2, [r3, #0]
							break;
 800871a:	2300      	movs	r3, #0
 800871c:	4699      	mov	r9, r3
 800871e:	e75d      	b.n	80085dc <PxMessagingTask+0xd8>
							indMode =IND_PING;
 8008720:	4b6c      	ldr	r3, [pc, #432]	; (80088d4 <PxMessagingTask+0x3d0>)
 8008722:	2201      	movs	r2, #1
 8008724:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008726:	200a      	movs	r0, #10
 8008728:	f005 fe1b 	bl	800e362 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800872c:	4b62      	ldr	r3, [pc, #392]	; (80088b8 <PxMessagingTask+0x3b4>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2240      	movs	r2, #64	; 0x40
 8008732:	4393      	bics	r3, r2
 8008734:	2200      	movs	r2, #0
 8008736:	4691      	mov	r9, r2
 8008738:	2b20      	cmp	r3, #32
 800873a:	d000      	beq.n	800873e <PxMessagingTask+0x23a>
 800873c:	e74e      	b.n	80085dc <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800873e:	2102      	movs	r1, #2
 8008740:	9804      	ldr	r0, [sp, #16]
 8008742:	f7ff fd1d 	bl	8008180 <SendMessageToModule>
 8008746:	e749      	b.n	80085dc <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 8008748:	4b61      	ldr	r3, [pc, #388]	; (80088d0 <PxMessagingTask+0x3cc>)
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	0093      	lsls	r3, r2, #2
 800874e:	189b      	adds	r3, r3, r2
 8008750:	005b      	lsls	r3, r3, #1
 8008752:	4a63      	ldr	r2, [pc, #396]	; (80088e0 <PxMessagingTask+0x3dc>)
 8008754:	5c9b      	ldrb	r3, [r3, r2]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d118      	bne.n	800878c <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800875a:	9a04      	ldr	r2, [sp, #16]
 800875c:	4961      	ldr	r1, [pc, #388]	; (80088e4 <PxMessagingTask+0x3e0>)
 800875e:	4862      	ldr	r0, [pc, #392]	; (80088e8 <PxMessagingTask+0x3e4>)
 8008760:	f00b fdee 	bl	8014340 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 8008764:	4c60      	ldr	r4, [pc, #384]	; (80088e8 <PxMessagingTask+0x3e4>)
 8008766:	0020      	movs	r0, r4
 8008768:	f7f7 fcd6 	bl	8000118 <strlen>
 800876c:	b282      	uxth	r2, r0
 800876e:	4b5f      	ldr	r3, [pc, #380]	; (80088ec <PxMessagingTask+0x3e8>)
 8008770:	7818      	ldrb	r0, [r3, #0]
 8008772:	2301      	movs	r3, #1
 8008774:	425b      	negs	r3, r3
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	3333      	adds	r3, #51	; 0x33
 800877a:	0021      	movs	r1, r4
 800877c:	f005 fc6a 	bl	800e054 <writePxMutex>
							responseStatus =BOS_OK;
 8008780:	4b56      	ldr	r3, [pc, #344]	; (80088dc <PxMessagingTask+0x3d8>)
 8008782:	2200      	movs	r2, #0
 8008784:	701a      	strb	r2, [r3, #0]
							break;
 8008786:	2300      	movs	r3, #0
 8008788:	4699      	mov	r9, r3
 800878a:	e727      	b.n	80085dc <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800878c:	230a      	movs	r3, #10
 800878e:	9904      	ldr	r1, [sp, #16]
 8008790:	434b      	muls	r3, r1
 8008792:	4a53      	ldr	r2, [pc, #332]	; (80088e0 <PxMessagingTask+0x3dc>)
 8008794:	189b      	adds	r3, r3, r2
 8008796:	000a      	movs	r2, r1
 8008798:	4955      	ldr	r1, [pc, #340]	; (80088f0 <PxMessagingTask+0x3ec>)
 800879a:	4853      	ldr	r0, [pc, #332]	; (80088e8 <PxMessagingTask+0x3e4>)
 800879c:	f00b fdd0 	bl	8014340 <sprintf>
 80087a0:	e7e0      	b.n	8008764 <PxMessagingTask+0x260>
							IND_ON();
 80087a2:	2090      	movs	r0, #144	; 0x90
 80087a4:	2201      	movs	r2, #1
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	05c0      	lsls	r0, r0, #23
 80087aa:	f009 f947 	bl	8011a3c <HAL_GPIO_WritePin>
							break;
 80087ae:	2300      	movs	r3, #0
 80087b0:	4699      	mov	r9, r3
 80087b2:	e713      	b.n	80085dc <PxMessagingTask+0xd8>
							IND_OFF();
 80087b4:	2090      	movs	r0, #144	; 0x90
 80087b6:	2200      	movs	r2, #0
 80087b8:	2180      	movs	r1, #128	; 0x80
 80087ba:	05c0      	lsls	r0, r0, #23
 80087bc:	f009 f93e 	bl	8011a3c <HAL_GPIO_WritePin>
							break;
 80087c0:	2300      	movs	r3, #0
 80087c2:	4699      	mov	r9, r3
 80087c4:	e70a      	b.n	80085dc <PxMessagingTask+0xd8>
							IND_toggle();
 80087c6:	2090      	movs	r0, #144	; 0x90
 80087c8:	2180      	movs	r1, #128	; 0x80
 80087ca:	05c0      	lsls	r0, r0, #23
 80087cc:	f009 f93c 	bl	8011a48 <HAL_GPIO_TogglePin>
							break;
 80087d0:	2300      	movs	r3, #0
 80087d2:	4699      	mov	r9, r3
 80087d4:	e702      	b.n	80085dc <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 80087d6:	4f47      	ldr	r7, [pc, #284]	; (80088f4 <PxMessagingTask+0x3f0>)
 80087d8:	00ab      	lsls	r3, r5, #2
 80087da:	4a35      	ldr	r2, [pc, #212]	; (80088b0 <PxMessagingTask+0x3ac>)
 80087dc:	1992      	adds	r2, r2, r6
 80087de:	1910      	adds	r0, r2, r4
 80087e0:	7881      	ldrb	r1, [r0, #2]
 80087e2:	468c      	mov	ip, r1
 80087e4:	9904      	ldr	r1, [sp, #16]
 80087e6:	0209      	lsls	r1, r1, #8
 80087e8:	4461      	add	r1, ip
 80087ea:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 80087ec:	18fb      	adds	r3, r7, r3
 80087ee:	5d11      	ldrb	r1, [r2, r4]
 80087f0:	0209      	lsls	r1, r1, #8
 80087f2:	7842      	ldrb	r2, [r0, #1]
 80087f4:	1852      	adds	r2, r2, r1
 80087f6:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 80087f8:	4b3f      	ldr	r3, [pc, #252]	; (80088f8 <PxMessagingTask+0x3f4>)
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	4a3f      	ldr	r2, [pc, #252]	; (80088fc <PxMessagingTask+0x3f8>)
 80087fe:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 8008800:	0a1b      	lsrs	r3, r3, #8
 8008802:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 8008804:	9c08      	ldr	r4, [sp, #32]
 8008806:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 8008808:	2002      	movs	r0, #2
 800880a:	f005 fdaa 	bl	800e362 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800880e:	2303      	movs	r3, #3
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	2200      	movs	r2, #0
 8008816:	2100      	movs	r1, #0
 8008818:	0020      	movs	r0, r4
 800881a:	f7ff fa2b 	bl	8007c74 <SendMessageFromPort>
							break;
 800881e:	2300      	movs	r3, #0
 8008820:	4699      	mov	r9, r3
 8008822:	e6db      	b.n	80085dc <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 8008824:	4f33      	ldr	r7, [pc, #204]	; (80088f4 <PxMessagingTask+0x3f0>)
 8008826:	00ab      	lsls	r3, r5, #2
 8008828:	4a21      	ldr	r2, [pc, #132]	; (80088b0 <PxMessagingTask+0x3ac>)
 800882a:	1992      	adds	r2, r2, r6
 800882c:	1910      	adds	r0, r2, r4
 800882e:	7881      	ldrb	r1, [r0, #2]
 8008830:	468c      	mov	ip, r1
 8008832:	9904      	ldr	r1, [sp, #16]
 8008834:	0209      	lsls	r1, r1, #8
 8008836:	4461      	add	r1, ip
 8008838:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	5d11      	ldrb	r1, [r2, r4]
 800883e:	0209      	lsls	r1, r1, #8
 8008840:	7842      	ldrb	r2, [r0, #1]
 8008842:	1852      	adds	r2, r2, r1
 8008844:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 8008846:	4b25      	ldr	r3, [pc, #148]	; (80088dc <PxMessagingTask+0x3d8>)
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
							break;
 800884c:	2300      	movs	r3, #0
 800884e:	4699      	mov	r9, r3
 8008850:	e6c4      	b.n	80085dc <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 8008852:	9808      	ldr	r0, [sp, #32]
 8008854:	f7fb f89a 	bl	800398c <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 8008858:	4b1e      	ldr	r3, [pc, #120]	; (80088d4 <PxMessagingTask+0x3d0>)
 800885a:	2202      	movs	r2, #2
 800885c:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800885e:	200a      	movs	r0, #10
 8008860:	f005 fd7f 	bl	800e362 <osDelay>
 8008864:	4f23      	ldr	r7, [pc, #140]	; (80088f4 <PxMessagingTask+0x3f0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008866:	2401      	movs	r4, #1
							temp =0;
 8008868:	2300      	movs	r3, #0
 800886a:	9307      	str	r3, [sp, #28]
 800886c:	e004      	b.n	8008878 <PxMessagingTask+0x374>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800886e:	3401      	adds	r4, #1
 8008870:	b2e4      	uxtb	r4, r4
 8008872:	3704      	adds	r7, #4
 8008874:	2c07      	cmp	r4, #7
 8008876:	d011      	beq.n	800889c <PxMessagingTask+0x398>
								if(neighbors[p - 1][0]){
 8008878:	883b      	ldrh	r3, [r7, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0f7      	beq.n	800886e <PxMessagingTask+0x36a>
									messageParams[temp] =p;
 800887e:	4a1f      	ldr	r2, [pc, #124]	; (80088fc <PxMessagingTask+0x3f8>)
 8008880:	9b07      	ldr	r3, [sp, #28]
 8008882:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 8008884:	1c58      	adds	r0, r3, #1
 8008886:	4694      	mov	ip, r2
 8008888:	4460      	add	r0, ip
 800888a:	2204      	movs	r2, #4
 800888c:	0039      	movs	r1, r7
 800888e:	f00b fb22 	bl	8013ed6 <memcpy>
									temp +=5;
 8008892:	9b07      	ldr	r3, [sp, #28]
 8008894:	3305      	adds	r3, #5
 8008896:	b2db      	uxtb	r3, r3
 8008898:	9307      	str	r3, [sp, #28]
 800889a:	e7e8      	b.n	800886e <PxMessagingTask+0x36a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800889c:	466b      	mov	r3, sp
 800889e:	8b9a      	ldrh	r2, [r3, #28]
 80088a0:	210d      	movs	r1, #13
 80088a2:	9804      	ldr	r0, [sp, #16]
 80088a4:	f7ff fc6c 	bl	8008180 <SendMessageToModule>
							break;
 80088a8:	2300      	movs	r3, #0
 80088aa:	4699      	mov	r9, r3
 80088ac:	e696      	b.n	80085dc <PxMessagingTask+0xd8>
 80088ae:	46c0      	nop			; (mov r8, r8)
 80088b0:	20001424 	.word	0x20001424
 80088b4:	20001611 	.word	0x20001611
 80088b8:	2000698c 	.word	0x2000698c
 80088bc:	2000164c 	.word	0x2000164c
 80088c0:	20002050 	.word	0x20002050
 80088c4:	200013d0 	.word	0x200013d0
 80088c8:	0801b1b0 	.word	0x0801b1b0
 80088cc:	20001814 	.word	0x20001814
 80088d0:	20001792 	.word	0x20001792
 80088d4:	20001610 	.word	0x20001610
 80088d8:	20006f50 	.word	0x20006f50
 80088dc:	20001830 	.word	0x20001830
 80088e0:	20001684 	.word	0x20001684
 80088e4:	08019d0c 	.word	0x08019d0c
 80088e8:	200021a8 	.word	0x200021a8
 80088ec:	2000118a 	.word	0x2000118a
 80088f0:	08019d20 	.word	0x08019d20
 80088f4:	20001794 	.word	0x20001794
 80088f8:	20000078 	.word	0x20000078
 80088fc:	20001654 	.word	0x20001654
							temp =numOfParams / 5;
 8008900:	2105      	movs	r1, #5
 8008902:	9805      	ldr	r0, [sp, #20]
 8008904:	f7f7 fc24 	bl	8000150 <__udivsi3>
 8008908:	b2c2      	uxtb	r2, r0
 800890a:	9207      	str	r2, [sp, #28]
							for(uint8_t k =0; k < temp; k++){
 800890c:	2a00      	cmp	r2, #0
 800890e:	d018      	beq.n	8008942 <PxMessagingTask+0x43e>
 8008910:	4653      	mov	r3, sl
 8008912:	191f      	adds	r7, r3, r4
 8008914:	4bda      	ldr	r3, [pc, #872]	; (8008c80 <PxMessagingTask+0x77c>)
 8008916:	18ff      	adds	r7, r7, r3
 8008918:	3305      	adds	r3, #5
 800891a:	4453      	add	r3, sl
 800891c:	191c      	adds	r4, r3, r4
 800891e:	1e53      	subs	r3, r2, #1
 8008920:	b2db      	uxtb	r3, r3
 8008922:	009a      	lsls	r2, r3, #2
 8008924:	18d3      	adds	r3, r2, r3
 8008926:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 8008928:	4bd6      	ldr	r3, [pc, #856]	; (8008c84 <PxMessagingTask+0x780>)
 800892a:	4699      	mov	r9, r3
 800892c:	7838      	ldrb	r0, [r7, #0]
 800892e:	3801      	subs	r0, #1
 8008930:	0080      	lsls	r0, r0, #2
 8008932:	4448      	add	r0, r9
 8008934:	1c79      	adds	r1, r7, #1
 8008936:	2204      	movs	r2, #4
 8008938:	f00b facd 	bl	8013ed6 <memcpy>
 800893c:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800893e:	42bc      	cmp	r4, r7
 8008940:	d1f4      	bne.n	800892c <PxMessagingTask+0x428>
							responseStatus =BOS_OK;
 8008942:	4bd1      	ldr	r3, [pc, #836]	; (8008c88 <PxMessagingTask+0x784>)
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
							break;
 8008948:	2300      	movs	r3, #0
 800894a:	4699      	mov	r9, r3
 800894c:	e646      	b.n	80085dc <PxMessagingTask+0xd8>
 800894e:	4653      	mov	r3, sl
 8008950:	18e3      	adds	r3, r4, r3
 8008952:	4acb      	ldr	r2, [pc, #812]	; (8008c80 <PxMessagingTask+0x77c>)
 8008954:	4699      	mov	r9, r3
 8008956:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 8008958:	2701      	movs	r7, #1
								if(p != port)
 800895a:	9b08      	ldr	r3, [sp, #32]
 800895c:	42bb      	cmp	r3, r7
 800895e:	d006      	beq.n	800896e <PxMessagingTask+0x46a>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 8008960:	0038      	movs	r0, r7
 8008962:	f005 fb55 	bl	800e010 <GetUart>
 8008966:	464b      	mov	r3, r9
 8008968:	7819      	ldrb	r1, [r3, #0]
 800896a:	f005 fbc7 	bl	800e0fc <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800896e:	3701      	adds	r7, #1
 8008970:	b2ff      	uxtb	r7, r7
 8008972:	2301      	movs	r3, #1
 8008974:	469c      	mov	ip, r3
 8008976:	44e1      	add	r9, ip
 8008978:	2f07      	cmp	r7, #7
 800897a:	d1ee      	bne.n	800895a <PxMessagingTask+0x456>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800897c:	9808      	ldr	r0, [sp, #32]
 800897e:	f005 fb47 	bl	800e010 <GetUart>
 8008982:	4bbf      	ldr	r3, [pc, #764]	; (8008c80 <PxMessagingTask+0x77c>)
 8008984:	199b      	adds	r3, r3, r6
 8008986:	191c      	adds	r4, r3, r4
 8008988:	7aa1      	ldrb	r1, [r4, #10]
 800898a:	f005 fbb7 	bl	800e0fc <SwapUartPins>
							break;
 800898e:	2300      	movs	r3, #0
 8008990:	4699      	mov	r9, r3
 8008992:	e623      	b.n	80085dc <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 8008994:	0020      	movs	r0, r4
 8008996:	4bba      	ldr	r3, [pc, #744]	; (8008c80 <PxMessagingTask+0x77c>)
 8008998:	199b      	adds	r3, r3, r6
 800899a:	5d1b      	ldrb	r3, [r3, r4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <PxMessagingTask+0x4b2>
								myID =cMessage[port - 1][1 + shift];
 80089a0:	2238      	movs	r2, #56	; 0x38
 80089a2:	436a      	muls	r2, r5
 80089a4:	4bb6      	ldr	r3, [pc, #728]	; (8008c80 <PxMessagingTask+0x77c>)
 80089a6:	189b      	adds	r3, r3, r2
 80089a8:	191c      	adds	r4, r3, r4
 80089aa:	7862      	ldrb	r2, [r4, #1]
 80089ac:	4bb7      	ldr	r3, [pc, #732]	; (8008c8c <PxMessagingTask+0x788>)
 80089ae:	701a      	strb	r2, [r3, #0]
 80089b0:	2300      	movs	r3, #0
 80089b2:	4699      	mov	r9, r3
 80089b4:	e612      	b.n	80085dc <PxMessagingTask+0xd8>
 80089b6:	2200      	movs	r2, #0
 80089b8:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 80089ba:	2b01      	cmp	r3, #1
 80089bc:	d000      	beq.n	80089c0 <PxMessagingTask+0x4bc>
 80089be:	e60d      	b.n	80085dc <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 80089c0:	49b3      	ldr	r1, [pc, #716]	; (8008c90 <PxMessagingTask+0x78c>)
 80089c2:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 80089c4:	3238      	adds	r2, #56	; 0x38
 80089c6:	436a      	muls	r2, r5
 80089c8:	4bad      	ldr	r3, [pc, #692]	; (8008c80 <PxMessagingTask+0x77c>)
 80089ca:	189b      	adds	r3, r3, r2
 80089cc:	181b      	adds	r3, r3, r0
 80089ce:	785a      	ldrb	r2, [r3, #1]
 80089d0:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 80089d2:	7898      	ldrb	r0, [r3, #2]
 80089d4:	2303      	movs	r3, #3
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	330d      	adds	r3, #13
 80089da:	464a      	mov	r2, r9
 80089dc:	4649      	mov	r1, r9
 80089de:	f7ff f949 	bl	8007c74 <SendMessageFromPort>
 80089e2:	e5fb      	b.n	80085dc <PxMessagingTask+0xd8>
							if(longMessage){
 80089e4:	4bab      	ldr	r3, [pc, #684]	; (8008c94 <PxMessagingTask+0x790>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d012      	beq.n	8008a12 <PxMessagingTask+0x50e>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 80089ec:	4baa      	ldr	r3, [pc, #680]	; (8008c98 <PxMessagingTask+0x794>)
 80089ee:	4699      	mov	r9, r3
 80089f0:	881f      	ldrh	r7, [r3, #0]
 80089f2:	48aa      	ldr	r0, [pc, #680]	; (8008c9c <PxMessagingTask+0x798>)
 80089f4:	1838      	adds	r0, r7, r0
 80089f6:	4454      	add	r4, sl
 80089f8:	49a1      	ldr	r1, [pc, #644]	; (8008c80 <PxMessagingTask+0x77c>)
 80089fa:	1861      	adds	r1, r4, r1
 80089fc:	9c05      	ldr	r4, [sp, #20]
 80089fe:	0022      	movs	r2, r4
 8008a00:	f00b fa69 	bl	8013ed6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008a04:	46a4      	mov	ip, r4
 8008a06:	4467      	add	r7, ip
 8008a08:	464b      	mov	r3, r9
 8008a0a:	801f      	strh	r7, [r3, #0]
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4699      	mov	r9, r3
 8008a10:	e5e4      	b.n	80085dc <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008a12:	4ba1      	ldr	r3, [pc, #644]	; (8008c98 <PxMessagingTask+0x794>)
 8008a14:	469b      	mov	fp, r3
 8008a16:	881f      	ldrh	r7, [r3, #0]
 8008a18:	4ba0      	ldr	r3, [pc, #640]	; (8008c9c <PxMessagingTask+0x798>)
 8008a1a:	4699      	mov	r9, r3
 8008a1c:	18f8      	adds	r0, r7, r3
 8008a1e:	4454      	add	r4, sl
 8008a20:	4997      	ldr	r1, [pc, #604]	; (8008c80 <PxMessagingTask+0x77c>)
 8008a22:	1861      	adds	r1, r4, r1
 8008a24:	9c05      	ldr	r4, [sp, #20]
 8008a26:	0022      	movs	r2, r4
 8008a28:	f00b fa55 	bl	8013ed6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008a2c:	193c      	adds	r4, r7, r4
 8008a2e:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 8008a30:	2116      	movs	r1, #22
 8008a32:	0020      	movs	r0, r4
 8008a34:	f7f7 fb8c 	bl	8000150 <__udivsi3>
 8008a38:	4b99      	ldr	r3, [pc, #612]	; (8008ca0 <PxMessagingTask+0x79c>)
 8008a3a:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 8008a3c:	0022      	movs	r2, r4
 8008a3e:	4649      	mov	r1, r9
 8008a40:	4898      	ldr	r0, [pc, #608]	; (8008ca4 <PxMessagingTask+0x7a0>)
 8008a42:	f00b fa48 	bl	8013ed6 <memcpy>
								longMessageLastPtr =0;
 8008a46:	2400      	movs	r4, #0
 8008a48:	465b      	mov	r3, fp
 8008a4a:	801c      	strh	r4, [r3, #0]
 8008a4c:	46a1      	mov	r9, r4
 8008a4e:	e5c5      	b.n	80085dc <PxMessagingTask+0xd8>
							ReadPortsDirMSG(src);
 8008a50:	9804      	ldr	r0, [sp, #16]
 8008a52:	f005 fbb9 	bl	800e1c8 <ReadPortsDirMSG>
								break;
 8008a56:	2300      	movs	r3, #0
 8008a58:	4699      	mov	r9, r3
 8008a5a:	e5bf      	b.n	80085dc <PxMessagingTask+0xd8>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008a5c:	4b88      	ldr	r3, [pc, #544]	; (8008c80 <PxMessagingTask+0x77c>)
 8008a5e:	199b      	adds	r3, r3, r6
 8008a60:	5d1a      	ldrb	r2, [r3, r4]
 8008a62:	0612      	lsls	r2, r2, #24
 8008a64:	191b      	adds	r3, r3, r4
 8008a66:	78d9      	ldrb	r1, [r3, #3]
 8008a68:	1852      	adds	r2, r2, r1
 8008a6a:	7859      	ldrb	r1, [r3, #1]
 8008a6c:	0409      	lsls	r1, r1, #16
 8008a6e:	1852      	adds	r2, r2, r1
 8008a70:	7899      	ldrb	r1, [r3, #2]
 8008a72:	0209      	lsls	r1, r1, #8
 8008a74:	1852      	adds	r2, r2, r1
 8008a76:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 8008a78:	791b      	ldrb	r3, [r3, #4]
 8008a7a:	2bff      	cmp	r3, #255	; 0xff
 8008a7c:	d01c      	beq.n	8008ab8 <PxMessagingTask+0x5b4>
								for(p =0; p < numOfParams; p++){
 8008a7e:	9b05      	ldr	r3, [sp, #20]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d016      	beq.n	8008ab2 <PxMessagingTask+0x5ae>
 8008a84:	4653      	mov	r3, sl
 8008a86:	1d1f      	adds	r7, r3, #4
 8008a88:	193f      	adds	r7, r7, r4
 8008a8a:	4b7d      	ldr	r3, [pc, #500]	; (8008c80 <PxMessagingTask+0x77c>)
 8008a8c:	18ff      	adds	r7, r7, r3
 8008a8e:	3305      	adds	r3, #5
 8008a90:	4453      	add	r3, sl
 8008a92:	191c      	adds	r4, r3, r4
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 8008a9c:	783b      	ldrb	r3, [r7, #0]
 8008a9e:	9307      	str	r3, [sp, #28]
									if(temp > 0 && temp <= NumOfPorts){
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	2b05      	cmp	r3, #5
 8008aa4:	d915      	bls.n	8008ad2 <PxMessagingTask+0x5ce>
 8008aa6:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 8008aa8:	42a7      	cmp	r7, r4
 8008aaa:	d1f7      	bne.n	8008a9c <PxMessagingTask+0x598>
 8008aac:	2300      	movs	r3, #0
 8008aae:	4699      	mov	r9, r3
 8008ab0:	e594      	b.n	80085dc <PxMessagingTask+0xd8>
							temp =temp32 =0;
 8008ab2:	9307      	str	r3, [sp, #28]
								for(p =0; p < numOfParams; p++){
 8008ab4:	4699      	mov	r9, r3
 8008ab6:	e591      	b.n	80085dc <PxMessagingTask+0xd8>
								for(p =1; p <= NumOfPorts; p++){
 8008ab8:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 8008aba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008abc:	0020      	movs	r0, r4
 8008abe:	f005 fb13 	bl	800e0e8 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 8008ac2:	3401      	adds	r4, #1
 8008ac4:	b2e4      	uxtb	r4, r4
 8008ac6:	2c07      	cmp	r4, #7
 8008ac8:	d1f7      	bne.n	8008aba <PxMessagingTask+0x5b6>
							temp =temp32 =0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	9307      	str	r3, [sp, #28]
 8008ace:	4699      	mov	r9, r3
 8008ad0:	e584      	b.n	80085dc <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 8008ad2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ad4:	9807      	ldr	r0, [sp, #28]
 8008ad6:	f005 fb07 	bl	800e0e8 <UpdateBaudrate>
 8008ada:	e7e4      	b.n	8008aa6 <PxMessagingTask+0x5a2>
							SaveToRO();
 8008adc:	f002 f86e 	bl	800abbc <SaveToRO>
							SaveEEportsDir();
 8008ae0:	f7fa fcd8 	bl	8003494 <SaveEEportsDir>
							indMode =IND_PING;
 8008ae4:	4b70      	ldr	r3, [pc, #448]	; (8008ca8 <PxMessagingTask+0x7a4>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	701a      	strb	r2, [r3, #0]
							break;
 8008aea:	2300      	movs	r3, #0
 8008aec:	4699      	mov	r9, r3
 8008aee:	e575      	b.n	80085dc <PxMessagingTask+0xd8>
							ClearEEportsDir();
 8008af0:	f7fa fdc6 	bl	8003680 <ClearEEportsDir>
							ClearROtopology();
 8008af4:	f002 f96a 	bl	800adcc <ClearROtopology>
							osDelay(100);
 8008af8:	2064      	movs	r0, #100	; 0x64
 8008afa:	f005 fc32 	bl	800e362 <osDelay>
							indMode =IND_TOPOLOGY;
 8008afe:	4b6a      	ldr	r3, [pc, #424]	; (8008ca8 <PxMessagingTask+0x7a4>)
 8008b00:	2202      	movs	r2, #2
 8008b02:	701a      	strb	r2, [r3, #0]
							break;
 8008b04:	2300      	movs	r3, #0
 8008b06:	4699      	mov	r9, r3
 8008b08:	e568      	b.n	80085dc <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008b0a:	f005 fd3b 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8008b0e:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 8008b10:	465b      	mov	r3, fp
 8008b12:	2bff      	cmp	r3, #255	; 0xff
 8008b14:	d028      	beq.n	8008b68 <PxMessagingTask+0x664>
							else if(dst == BOS_MULTICAST)
 8008b16:	2bfe      	cmp	r3, #254	; 0xfe
 8008b18:	d02f      	beq.n	8008b7a <PxMessagingTask+0x676>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008b1a:	4454      	add	r4, sl
 8008b1c:	4958      	ldr	r1, [pc, #352]	; (8008c80 <PxMessagingTask+0x77c>)
 8008b1e:	1861      	adds	r1, r4, r1
 8008b20:	9a05      	ldr	r2, [sp, #20]
 8008b22:	4862      	ldr	r0, [pc, #392]	; (8008cac <PxMessagingTask+0x7a8>)
 8008b24:	f00b f9d7 	bl	8013ed6 <memcpy>
								temp =PcPort;
 8008b28:	4c61      	ldr	r4, [pc, #388]	; (8008cb0 <PxMessagingTask+0x7ac>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008b2a:	4b60      	ldr	r3, [pc, #384]	; (8008cac <PxMessagingTask+0x7a8>)
 8008b2c:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008b2e:	4b61      	ldr	r3, [pc, #388]	; (8008cb4 <PxMessagingTask+0x7b0>)
 8008b30:	4699      	mov	r9, r3
								temp =PcPort;
 8008b32:	7823      	ldrb	r3, [r4, #0]
 8008b34:	9307      	str	r3, [sp, #28]
								PcPort =port;
 8008b36:	9a08      	ldr	r2, [sp, #32]
 8008b38:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8008b3a:	2299      	movs	r2, #153	; 0x99
 8008b3c:	0092      	lsls	r2, r2, #2
 8008b3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b40:	4658      	mov	r0, fp
 8008b42:	f005 fca1 	bl	800e488 <FreeRTOS_CLIProcessCommand>
 8008b46:	0007      	movs	r7, r0
								PcPort =temp;
 8008b48:	9b07      	ldr	r3, [sp, #28]
 8008b4a:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8008b4c:	464b      	mov	r3, r9
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b60      	cmp	r3, #96	; 0x60
 8008b52:	d01d      	beq.n	8008b90 <PxMessagingTask+0x68c>
							} while(xReturned != pdFALSE);
 8008b54:	2f00      	cmp	r7, #0
 8008b56:	d1ec      	bne.n	8008b32 <PxMessagingTask+0x62e>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 8008b58:	2232      	movs	r2, #50	; 0x32
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	4853      	ldr	r0, [pc, #332]	; (8008cac <PxMessagingTask+0x7a8>)
 8008b5e:	f00b f9c3 	bl	8013ee8 <memset>
							break;
 8008b62:	2300      	movs	r3, #0
 8008b64:	4699      	mov	r9, r3
 8008b66:	e539      	b.n	80085dc <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 8008b68:	9a05      	ldr	r2, [sp, #20]
 8008b6a:	3a01      	subs	r2, #1
 8008b6c:	4454      	add	r4, sl
 8008b6e:	4944      	ldr	r1, [pc, #272]	; (8008c80 <PxMessagingTask+0x77c>)
 8008b70:	1861      	adds	r1, r4, r1
 8008b72:	484e      	ldr	r0, [pc, #312]	; (8008cac <PxMessagingTask+0x7a8>)
 8008b74:	f00b f9af 	bl	8013ed6 <memcpy>
 8008b78:	e7d6      	b.n	8008b28 <PxMessagingTask+0x624>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 8008b7a:	9b05      	ldr	r3, [sp, #20]
 8008b7c:	9a07      	ldr	r2, [sp, #28]
 8008b7e:	1a9a      	subs	r2, r3, r2
 8008b80:	3a02      	subs	r2, #2
 8008b82:	4454      	add	r4, sl
 8008b84:	493e      	ldr	r1, [pc, #248]	; (8008c80 <PxMessagingTask+0x77c>)
 8008b86:	1861      	adds	r1, r4, r1
 8008b88:	4848      	ldr	r0, [pc, #288]	; (8008cac <PxMessagingTask+0x7a8>)
 8008b8a:	f00b f9a4 	bl	8013ed6 <memcpy>
 8008b8e:	e7cb      	b.n	8008b28 <PxMessagingTask+0x624>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 8008b90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008b92:	f7f7 fac1 	bl	8000118 <strlen>
 8008b96:	0002      	movs	r2, r0
 8008b98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b9a:	483d      	ldr	r0, [pc, #244]	; (8008c90 <PxMessagingTask+0x78c>)
 8008b9c:	f00b f99b 	bl	8013ed6 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 8008ba0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008ba2:	f7f7 fab9 	bl	8000118 <strlen>
 8008ba6:	b282      	uxth	r2, r0
 8008ba8:	2118      	movs	r1, #24
 8008baa:	9804      	ldr	r0, [sp, #16]
 8008bac:	f7ff fae8 	bl	8008180 <SendMessageToModule>
									osDelay(10);
 8008bb0:	200a      	movs	r0, #10
 8008bb2:	f005 fbd6 	bl	800e362 <osDelay>
 8008bb6:	e7cd      	b.n	8008b54 <PxMessagingTask+0x650>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8008bb8:	f005 fce4 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8008bbc:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8008bbe:	f7f7 faab 	bl	8000118 <strlen>
 8008bc2:	0002      	movs	r2, r0
 8008bc4:	2100      	movs	r1, #0
 8008bc6:	0038      	movs	r0, r7
 8008bc8:	f00b f98e 	bl	8013ee8 <memset>
							if(longMessage){
 8008bcc:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <PxMessagingTask+0x790>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d013      	beq.n	8008bfc <PxMessagingTask+0x6f8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008bd4:	4b30      	ldr	r3, [pc, #192]	; (8008c98 <PxMessagingTask+0x794>)
 8008bd6:	4699      	mov	r9, r3
 8008bd8:	8818      	ldrh	r0, [r3, #0]
 8008bda:	1838      	adds	r0, r7, r0
 8008bdc:	4454      	add	r4, sl
 8008bde:	4928      	ldr	r1, [pc, #160]	; (8008c80 <PxMessagingTask+0x77c>)
 8008be0:	1861      	adds	r1, r4, r1
 8008be2:	9c05      	ldr	r4, [sp, #20]
 8008be4:	0022      	movs	r2, r4
 8008be6:	f00b f976 	bl	8013ed6 <memcpy>
								longMessageLastPtr +=numOfParams;
 8008bea:	464b      	mov	r3, r9
 8008bec:	881a      	ldrh	r2, [r3, #0]
 8008bee:	46a4      	mov	ip, r4
 8008bf0:	4462      	add	r2, ip
 8008bf2:	464b      	mov	r3, r9
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	4699      	mov	r9, r3
 8008bfa:	e4ef      	b.n	80085dc <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 8008bfc:	4b26      	ldr	r3, [pc, #152]	; (8008c98 <PxMessagingTask+0x794>)
 8008bfe:	4699      	mov	r9, r3
 8008c00:	8818      	ldrh	r0, [r3, #0]
 8008c02:	1838      	adds	r0, r7, r0
 8008c04:	4454      	add	r4, sl
 8008c06:	491e      	ldr	r1, [pc, #120]	; (8008c80 <PxMessagingTask+0x77c>)
 8008c08:	1861      	adds	r1, r4, r1
 8008c0a:	9a05      	ldr	r2, [sp, #20]
 8008c0c:	f00b f963 	bl	8013ed6 <memcpy>
								longMessageLastPtr =0;
 8008c10:	2400      	movs	r4, #0
 8008c12:	464b      	mov	r3, r9
 8008c14:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 8008c16:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <PxMessagingTask+0x784>)
 8008c18:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 8008c1a:	0023      	movs	r3, r4
 8008c1c:	0022      	movs	r2, r4
 8008c1e:	0021      	movs	r1, r4
 8008c20:	4825      	ldr	r0, [pc, #148]	; (8008cb8 <PxMessagingTask+0x7b4>)
 8008c22:	6800      	ldr	r0, [r0, #0]
 8008c24:	f006 ff14 	bl	800fa50 <xTaskGenericNotify>
 8008c28:	46a1      	mov	r9, r4
 8008c2a:	e4d7      	b.n	80085dc <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 8008c2c:	4b23      	ldr	r3, [pc, #140]	; (8008cbc <PxMessagingTask+0x7b8>)
 8008c2e:	4a24      	ldr	r2, [pc, #144]	; (8008cc0 <PxMessagingTask+0x7bc>)
 8008c30:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 8008c32:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <PxMessagingTask+0x7a4>)
 8008c34:	2201      	movs	r2, #1
 8008c36:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 8008c38:	200a      	movs	r0, #10
 8008c3a:	f005 fb92 	bl	800e362 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	4b20      	ldr	r3, [pc, #128]	; (8008cc4 <PxMessagingTask+0x7c0>)
 8008c44:	4a20      	ldr	r2, [pc, #128]	; (8008cc8 <PxMessagingTask+0x7c4>)
 8008c46:	60da      	str	r2, [r3, #12]
 8008c48:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008c4c:	46c0      	nop			; (mov r8, r8)
 8008c4e:	e7fd      	b.n	8008c4c <PxMessagingTask+0x748>
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 8008c50:	4f0b      	ldr	r7, [pc, #44]	; (8008c80 <PxMessagingTask+0x77c>)
 8008c52:	19bf      	adds	r7, r7, r6
 8008c54:	5d38      	ldrb	r0, [r7, r4]
 8008c56:	2300      	movs	r3, #0
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	3319      	adds	r3, #25
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	2100      	movs	r1, #0
 8008c60:	f7ff f808 	bl	8007c74 <SendMessageFromPort>
							osDelay(100);
 8008c64:	2064      	movs	r0, #100	; 0x64
 8008c66:	f005 fb7c 	bl	800e362 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 8008c6a:	5d3b      	ldrb	r3, [r7, r4]
 8008c6c:	4a07      	ldr	r2, [pc, #28]	; (8008c8c <PxMessagingTask+0x788>)
 8008c6e:	7811      	ldrb	r1, [r2, #0]
 8008c70:	9a08      	ldr	r2, [sp, #32]
 8008c72:	9804      	ldr	r0, [sp, #16]
 8008c74:	f001 f970 	bl	8009f58 <remoteBootloaderUpdate>
							break;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	4699      	mov	r9, r3
 8008c7c:	e4ae      	b.n	80085dc <PxMessagingTask+0xd8>
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	20001424 	.word	0x20001424
 8008c84:	200017ac 	.word	0x200017ac
 8008c88:	20001830 	.word	0x20001830
 8008c8c:	20001792 	.word	0x20001792
 8008c90:	20001654 	.word	0x20001654
 8008c94:	20001611 	.word	0x20001611
 8008c98:	20001612 	.word	0x20001612
 8008c9c:	20002088 	.word	0x20002088
 8008ca0:	20000044 	.word	0x20000044
 8008ca4:	20001194 	.word	0x20001194
 8008ca8:	20001610 	.word	0x20001610
 8008cac:	20002054 	.word	0x20002054
 8008cb0:	2000118a 	.word	0x2000118a
 8008cb4:	2000698c 	.word	0x2000698c
 8008cb8:	20002008 	.word	0x20002008
 8008cbc:	20007ff0 	.word	0x20007ff0
 8008cc0:	deadbeef 	.word	0xdeadbeef
 8008cc4:	e000ed00 	.word	0xe000ed00
 8008cc8:	05fa0004 	.word	0x05fa0004
							temp =cMessage[port - 1][11 + shift];
 8008ccc:	46a3      	mov	fp, r4
 8008cce:	230b      	movs	r3, #11
 8008cd0:	4699      	mov	r9, r3
 8008cd2:	44a1      	add	r9, r4
 8008cd4:	4be7      	ldr	r3, [pc, #924]	; (8009074 <PxMessagingTask+0xb70>)
 8008cd6:	199b      	adds	r3, r3, r6
 8008cd8:	464a      	mov	r2, r9
 8008cda:	5c9b      	ldrb	r3, [r3, r2]
 8008cdc:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 8008cde:	9b05      	ldr	r3, [sp, #20]
 8008ce0:	2b0f      	cmp	r3, #15
 8008ce2:	d100      	bne.n	8008ce6 <PxMessagingTask+0x7e2>
 8008ce4:	e088      	b.n	8008df8 <PxMessagingTask+0x8f4>
							if(numOfParams == 17)
 8008ce6:	9b05      	ldr	r3, [sp, #20]
 8008ce8:	2b11      	cmp	r3, #17
 8008cea:	d100      	bne.n	8008cee <PxMessagingTask+0x7ea>
 8008cec:	e08c      	b.n	8008e08 <PxMessagingTask+0x904>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008cee:	465b      	mov	r3, fp
 8008cf0:	1c59      	adds	r1, r3, #1
 8008cf2:	910c      	str	r1, [sp, #48]	; 0x30
 8008cf4:	1c98      	adds	r0, r3, #2
 8008cf6:	900d      	str	r0, [sp, #52]	; 0x34
 8008cf8:	1cda      	adds	r2, r3, #3
 8008cfa:	920e      	str	r2, [sp, #56]	; 0x38
 8008cfc:	4bdd      	ldr	r3, [pc, #884]	; (8009074 <PxMessagingTask+0xb70>)
 8008cfe:	199b      	adds	r3, r3, r6
 8008d00:	465c      	mov	r4, fp
 8008d02:	5d1c      	ldrb	r4, [r3, r4]
 8008d04:	0624      	lsls	r4, r4, #24
 8008d06:	5c9a      	ldrb	r2, [r3, r2]
 8008d08:	18a4      	adds	r4, r4, r2
 8008d0a:	5c5a      	ldrb	r2, [r3, r1]
 8008d0c:	0412      	lsls	r2, r2, #16
 8008d0e:	18a4      	adds	r4, r4, r2
 8008d10:	5c1a      	ldrb	r2, [r3, r0]
 8008d12:	0212      	lsls	r2, r2, #8
 8008d14:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008d16:	465a      	mov	r2, fp
 8008d18:	3204      	adds	r2, #4
 8008d1a:	920f      	str	r2, [sp, #60]	; 0x3c
 8008d1c:	4659      	mov	r1, fp
 8008d1e:	3105      	adds	r1, #5
 8008d20:	9110      	str	r1, [sp, #64]	; 0x40
 8008d22:	4658      	mov	r0, fp
 8008d24:	3006      	adds	r0, #6
 8008d26:	9011      	str	r0, [sp, #68]	; 0x44
 8008d28:	465f      	mov	r7, fp
 8008d2a:	3707      	adds	r7, #7
 8008d2c:	9707      	str	r7, [sp, #28]
 8008d2e:	5c9f      	ldrb	r7, [r3, r2]
 8008d30:	063f      	lsls	r7, r7, #24
 8008d32:	5c5a      	ldrb	r2, [r3, r1]
 8008d34:	0412      	lsls	r2, r2, #16
 8008d36:	18bf      	adds	r7, r7, r2
 8008d38:	9a07      	ldr	r2, [sp, #28]
 8008d3a:	5c9a      	ldrb	r2, [r3, r2]
 8008d3c:	18bf      	adds	r7, r7, r2
 8008d3e:	5c1b      	ldrb	r3, [r3, r0]
 8008d40:	021b      	lsls	r3, r3, #8
 8008d42:	18ff      	adds	r7, r7, r3
							if(temp == false){
 8008d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d166      	bne.n	8008e18 <PxMessagingTask+0x914>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 8008d4a:	4bca      	ldr	r3, [pc, #808]	; (8009074 <PxMessagingTask+0xb70>)
 8008d4c:	199b      	adds	r3, r3, r6
 8008d4e:	445b      	add	r3, fp
 8008d50:	7a5b      	ldrb	r3, [r3, #9]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d012      	beq.n	8008d7c <PxMessagingTask+0x878>
 8008d56:	2138      	movs	r1, #56	; 0x38
 8008d58:	4369      	muls	r1, r5
 8008d5a:	4ac6      	ldr	r2, [pc, #792]	; (8009074 <PxMessagingTask+0xb70>)
 8008d5c:	1852      	adds	r2, r2, r1
 8008d5e:	445a      	add	r2, fp
 8008d60:	7a91      	ldrb	r1, [r2, #10]
 8008d62:	2900      	cmp	r1, #0
 8008d64:	d00a      	beq.n	8008d7c <PxMessagingTask+0x878>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 8008d66:	2038      	movs	r0, #56	; 0x38
 8008d68:	4368      	muls	r0, r5
 8008d6a:	4ac2      	ldr	r2, [pc, #776]	; (8009074 <PxMessagingTask+0xb70>)
 8008d6c:	1812      	adds	r2, r2, r0
 8008d6e:	445a      	add	r2, fp
 8008d70:	7a10      	ldrb	r0, [r2, #8]
 8008d72:	9100      	str	r1, [sp, #0]
 8008d74:	003a      	movs	r2, r7
 8008d76:	0021      	movs	r1, r4
 8008d78:	f7fe fe5a 	bl	8007a30 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 8008d7c:	4bbd      	ldr	r3, [pc, #756]	; (8009074 <PxMessagingTask+0xb70>)
 8008d7e:	199b      	adds	r3, r3, r6
 8008d80:	464a      	mov	r2, r9
 8008d82:	5c9b      	ldrb	r3, [r3, r2]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d012      	beq.n	8008dae <PxMessagingTask+0x8aa>
 8008d88:	2138      	movs	r1, #56	; 0x38
 8008d8a:	4369      	muls	r1, r5
 8008d8c:	4ab9      	ldr	r2, [pc, #740]	; (8009074 <PxMessagingTask+0xb70>)
 8008d8e:	1852      	adds	r2, r2, r1
 8008d90:	445a      	add	r2, fp
 8008d92:	7b11      	ldrb	r1, [r2, #12]
 8008d94:	2900      	cmp	r1, #0
 8008d96:	d00a      	beq.n	8008dae <PxMessagingTask+0x8aa>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 8008d98:	2038      	movs	r0, #56	; 0x38
 8008d9a:	4368      	muls	r0, r5
 8008d9c:	4ab5      	ldr	r2, [pc, #724]	; (8009074 <PxMessagingTask+0xb70>)
 8008d9e:	1812      	adds	r2, r2, r0
 8008da0:	445a      	add	r2, fp
 8008da2:	7a10      	ldrb	r0, [r2, #8]
 8008da4:	9100      	str	r1, [sp, #0]
 8008da6:	003a      	movs	r2, r7
 8008da8:	0021      	movs	r1, r4
 8008daa:	f7fe fe41 	bl	8007a30 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 8008dae:	4bb1      	ldr	r3, [pc, #708]	; (8009074 <PxMessagingTask+0xb70>)
 8008db0:	199b      	adds	r3, r3, r6
 8008db2:	445b      	add	r3, fp
 8008db4:	7b5b      	ldrb	r3, [r3, #13]
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	2200      	movs	r2, #0
 8008dba:	4691      	mov	r9, r2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <PxMessagingTask+0x8c0>
 8008dc0:	f7ff fc0c 	bl	80085dc <PxMessagingTask+0xd8>
 8008dc4:	3238      	adds	r2, #56	; 0x38
 8008dc6:	436a      	muls	r2, r5
 8008dc8:	4baa      	ldr	r3, [pc, #680]	; (8009074 <PxMessagingTask+0xb70>)
 8008dca:	189b      	adds	r3, r3, r2
 8008dcc:	445b      	add	r3, fp
 8008dce:	7b9a      	ldrb	r2, [r3, #14]
 8008dd0:	454a      	cmp	r2, r9
 8008dd2:	d101      	bne.n	8008dd8 <PxMessagingTask+0x8d4>
 8008dd4:	f000 febb 	bl	8009b4e <PxMessagingTask+0x164a>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 8008dd8:	2138      	movs	r1, #56	; 0x38
 8008dda:	4369      	muls	r1, r5
 8008ddc:	4ba5      	ldr	r3, [pc, #660]	; (8009074 <PxMessagingTask+0xb70>)
 8008dde:	185b      	adds	r3, r3, r1
 8008de0:	445b      	add	r3, fp
 8008de2:	7a18      	ldrb	r0, [r3, #8]
 8008de4:	9200      	str	r2, [sp, #0]
 8008de6:	9b07      	ldr	r3, [sp, #28]
 8008de8:	003a      	movs	r2, r7
 8008dea:	0021      	movs	r1, r4
 8008dec:	f7fe fe20 	bl	8007a30 <SetupDMAStreams>
 8008df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008df2:	9307      	str	r3, [sp, #28]
 8008df4:	f7ff fbf2 	bl	80085dc <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 8008df8:	2238      	movs	r2, #56	; 0x38
 8008dfa:	436a      	muls	r2, r5
 8008dfc:	4b9d      	ldr	r3, [pc, #628]	; (8009074 <PxMessagingTask+0xb70>)
 8008dfe:	189b      	adds	r3, r3, r2
 8008e00:	191c      	adds	r4, r3, r4
 8008e02:	7b63      	ldrb	r3, [r4, #13]
 8008e04:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e06:	e772      	b.n	8008cee <PxMessagingTask+0x7ea>
								temp =cMessage[port - 1][15 + shift];
 8008e08:	2238      	movs	r2, #56	; 0x38
 8008e0a:	436a      	muls	r2, r5
 8008e0c:	4b99      	ldr	r3, [pc, #612]	; (8009074 <PxMessagingTask+0xb70>)
 8008e0e:	189b      	adds	r3, r3, r2
 8008e10:	445b      	add	r3, fp
 8008e12:	7bdb      	ldrb	r3, [r3, #15]
 8008e14:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e16:	e76a      	b.n	8008cee <PxMessagingTask+0x7ea>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 8008e18:	2338      	movs	r3, #56	; 0x38
 8008e1a:	436b      	muls	r3, r5
 8008e1c:	4c95      	ldr	r4, [pc, #596]	; (8009074 <PxMessagingTask+0xb70>)
 8008e1e:	18e4      	adds	r4, r4, r3
 8008e20:	465b      	mov	r3, fp
 8008e22:	18e6      	adds	r6, r4, r3
 8008e24:	7a31      	ldrb	r1, [r6, #8]
 8008e26:	20e4      	movs	r0, #228	; 0xe4
 8008e28:	f002 fe94 	bl	800bb54 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 8008e2c:	465b      	mov	r3, fp
 8008e2e:	5ce3      	ldrb	r3, [r4, r3]
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e34:	5ca1      	ldrb	r1, [r4, r2]
 8008e36:	18c9      	adds	r1, r1, r3
 8008e38:	b289      	uxth	r1, r1
 8008e3a:	20e5      	movs	r0, #229	; 0xe5
 8008e3c:	f002 fe8a 	bl	800bb54 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 8008e40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e42:	5ce3      	ldrb	r3, [r4, r3]
 8008e44:	021b      	lsls	r3, r3, #8
 8008e46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e48:	5ca1      	ldrb	r1, [r4, r2]
 8008e4a:	18c9      	adds	r1, r1, r3
 8008e4c:	b289      	uxth	r1, r1
 8008e4e:	20e6      	movs	r0, #230	; 0xe6
 8008e50:	f002 fe80 	bl	800bb54 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 8008e54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e56:	5ce3      	ldrb	r3, [r4, r3]
 8008e58:	021b      	lsls	r3, r3, #8
 8008e5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e5c:	5ca1      	ldrb	r1, [r4, r2]
 8008e5e:	18c9      	adds	r1, r1, r3
 8008e60:	b289      	uxth	r1, r1
 8008e62:	20e7      	movs	r0, #231	; 0xe7
 8008e64:	f002 fe76 	bl	800bb54 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 8008e68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e6a:	5ce3      	ldrb	r3, [r4, r3]
 8008e6c:	021b      	lsls	r3, r3, #8
 8008e6e:	9a07      	ldr	r2, [sp, #28]
 8008e70:	5ca1      	ldrb	r1, [r4, r2]
 8008e72:	18c9      	adds	r1, r1, r3
 8008e74:	b289      	uxth	r1, r1
 8008e76:	20e8      	movs	r0, #232	; 0xe8
 8008e78:	f002 fe6c 	bl	800bb54 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 8008e7c:	7a73      	ldrb	r3, [r6, #9]
 8008e7e:	021b      	lsls	r3, r3, #8
 8008e80:	7ab1      	ldrb	r1, [r6, #10]
 8008e82:	18c9      	adds	r1, r1, r3
 8008e84:	b289      	uxth	r1, r1
 8008e86:	20e9      	movs	r0, #233	; 0xe9
 8008e88:	f002 fe64 	bl	800bb54 <EE_WriteVariable>
								if(numOfParams == 19)
 8008e8c:	9b05      	ldr	r3, [sp, #20]
 8008e8e:	2b13      	cmp	r3, #19
 8008e90:	d116      	bne.n	8008ec0 <PxMessagingTask+0x9bc>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 8008e92:	3325      	adds	r3, #37	; 0x25
 8008e94:	436b      	muls	r3, r5
 8008e96:	4d77      	ldr	r5, [pc, #476]	; (8009074 <PxMessagingTask+0xb70>)
 8008e98:	18ed      	adds	r5, r5, r3
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	5ceb      	ldrb	r3, [r5, r3]
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	445d      	add	r5, fp
 8008ea2:	7b29      	ldrb	r1, [r5, #12]
 8008ea4:	18c9      	adds	r1, r1, r3
 8008ea6:	b289      	uxth	r1, r1
 8008ea8:	20ea      	movs	r0, #234	; 0xea
 8008eaa:	f002 fe53 	bl	800bb54 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	4b71      	ldr	r3, [pc, #452]	; (8009078 <PxMessagingTask+0xb74>)
 8008eb4:	4a71      	ldr	r2, [pc, #452]	; (800907c <PxMessagingTask+0xb78>)
 8008eb6:	60da      	str	r2, [r3, #12]
 8008eb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8008ebc:	46c0      	nop			; (mov r8, r8)
 8008ebe:	e7fd      	b.n	8008ebc <PxMessagingTask+0x9b8>
								if(numOfParams == 21)
 8008ec0:	9b05      	ldr	r3, [sp, #20]
 8008ec2:	2b15      	cmp	r3, #21
 8008ec4:	d1f3      	bne.n	8008eae <PxMessagingTask+0x9aa>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 8008ec6:	3323      	adds	r3, #35	; 0x23
 8008ec8:	435d      	muls	r5, r3
 8008eca:	4b6a      	ldr	r3, [pc, #424]	; (8009074 <PxMessagingTask+0xb70>)
 8008ecc:	195b      	adds	r3, r3, r5
 8008ece:	445b      	add	r3, fp
 8008ed0:	7b5a      	ldrb	r2, [r3, #13]
 8008ed2:	0212      	lsls	r2, r2, #8
 8008ed4:	7b99      	ldrb	r1, [r3, #14]
 8008ed6:	1889      	adds	r1, r1, r2
 8008ed8:	b289      	uxth	r1, r1
 8008eda:	20eb      	movs	r0, #235	; 0xeb
 8008edc:	f002 fe3a 	bl	800bb54 <EE_WriteVariable>
 8008ee0:	e7e5      	b.n	8008eae <PxMessagingTask+0x9aa>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008ee2:	4f64      	ldr	r7, [pc, #400]	; (8009074 <PxMessagingTask+0xb70>)
 8008ee4:	19bf      	adds	r7, r7, r6
 8008ee6:	1939      	adds	r1, r7, r4
 8008ee8:	7a8b      	ldrb	r3, [r1, #10]
 8008eea:	9305      	str	r3, [sp, #20]
 8008eec:	7aca      	ldrb	r2, [r1, #11]
 8008eee:	4864      	ldr	r0, [pc, #400]	; (8009080 <PxMessagingTask+0xb7c>)
 8008ef0:	7803      	ldrb	r3, [r0, #0]
 8008ef2:	4699      	mov	r9, r3
 8008ef4:	7a4b      	ldrb	r3, [r1, #9]
 8008ef6:	469b      	mov	fp, r3
 8008ef8:	7b08      	ldrb	r0, [r1, #12]
 8008efa:	0003      	movs	r3, r0
 8008efc:	1e58      	subs	r0, r3, #1
 8008efe:	4183      	sbcs	r3, r0
 8008f00:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 8008f02:	7908      	ldrb	r0, [r1, #4]
 8008f04:	0603      	lsls	r3, r0, #24
 8008f06:	469c      	mov	ip, r3
 8008f08:	7948      	ldrb	r0, [r1, #5]
 8008f0a:	0400      	lsls	r0, r0, #16
 8008f0c:	4460      	add	r0, ip
 8008f0e:	79cb      	ldrb	r3, [r1, #7]
 8008f10:	469c      	mov	ip, r3
 8008f12:	4460      	add	r0, ip
 8008f14:	798b      	ldrb	r3, [r1, #6]
 8008f16:	021b      	lsls	r3, r3, #8
 8008f18:	469c      	mov	ip, r3
 8008f1a:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008f1c:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 8008f1e:	5d38      	ldrb	r0, [r7, r4]
 8008f20:	0600      	lsls	r0, r0, #24
 8008f22:	78cc      	ldrb	r4, [r1, #3]
 8008f24:	1900      	adds	r0, r0, r4
 8008f26:	784c      	ldrb	r4, [r1, #1]
 8008f28:	0424      	lsls	r4, r4, #16
 8008f2a:	1900      	adds	r0, r0, r4
 8008f2c:	788c      	ldrb	r4, [r1, #2]
 8008f2e:	0224      	lsls	r4, r4, #8
 8008f30:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 8008f32:	9001      	str	r0, [sp, #4]
 8008f34:	7a09      	ldrb	r1, [r1, #8]
 8008f36:	9100      	str	r1, [sp, #0]
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	4649      	mov	r1, r9
 8008f3c:	4658      	mov	r0, fp
 8008f3e:	f7ff f945 	bl	80081cc <StartScastDMAStream>
							break;
 8008f42:	2300      	movs	r3, #0
 8008f44:	4699      	mov	r9, r3
 8008f46:	f7ff fb49 	bl	80085dc <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 8008f4a:	0023      	movs	r3, r4
 8008f4c:	4a49      	ldr	r2, [pc, #292]	; (8009074 <PxMessagingTask+0xb70>)
 8008f4e:	1992      	adds	r2, r2, r6
 8008f50:	5d12      	ldrb	r2, [r2, r4]
 8008f52:	2a00      	cmp	r2, #0
 8008f54:	d000      	beq.n	8008f58 <PxMessagingTask+0xa54>
 8008f56:	e099      	b.n	800908c <PxMessagingTask+0xb88>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 8008f58:	3238      	adds	r2, #56	; 0x38
 8008f5a:	436a      	muls	r2, r5
 8008f5c:	4b45      	ldr	r3, [pc, #276]	; (8009074 <PxMessagingTask+0xb70>)
 8008f5e:	189b      	adds	r3, r3, r2
 8008f60:	191c      	adds	r4, r3, r4
 8008f62:	78a3      	ldrb	r3, [r4, #2]
 8008f64:	061b      	lsls	r3, r3, #24
 8008f66:	78e2      	ldrb	r2, [r4, #3]
 8008f68:	0412      	lsls	r2, r2, #16
 8008f6a:	189b      	adds	r3, r3, r2
 8008f6c:	7962      	ldrb	r2, [r4, #5]
 8008f6e:	189b      	adds	r3, r3, r2
 8008f70:	7922      	ldrb	r2, [r4, #4]
 8008f72:	0212      	lsls	r2, r2, #8
 8008f74:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 8008f76:	7862      	ldrb	r2, [r4, #1]
 8008f78:	3a01      	subs	r2, #1
 8008f7a:	b2d1      	uxtb	r1, r2
 8008f7c:	2907      	cmp	r1, #7
 8008f7e:	d901      	bls.n	8008f84 <PxMessagingTask+0xa80>
 8008f80:	f000 fdcc 	bl	8009b1c <PxMessagingTask+0x1618>
 8008f84:	b2d2      	uxtb	r2, r2
 8008f86:	0092      	lsls	r2, r2, #2
 8008f88:	493e      	ldr	r1, [pc, #248]	; (8009084 <PxMessagingTask+0xb80>)
 8008f8a:	588a      	ldr	r2, [r1, r2]
 8008f8c:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 8008f8e:	781a      	ldrb	r2, [r3, #0]
 8008f90:	4b3d      	ldr	r3, [pc, #244]	; (8009088 <PxMessagingTask+0xb84>)
 8008f92:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8008f94:	2201      	movs	r2, #1
 8008f96:	211f      	movs	r1, #31
 8008f98:	9804      	ldr	r0, [sp, #16]
 8008f9a:	f7ff f8f1 	bl	8008180 <SendMessageToModule>
										break;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4699      	mov	r9, r3
 8008fa2:	f7ff fb1b 	bl	80085dc <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 8008fa6:	781a      	ldrb	r2, [r3, #0]
 8008fa8:	4b37      	ldr	r3, [pc, #220]	; (8009088 <PxMessagingTask+0xb84>)
 8008faa:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 8008fac:	2201      	movs	r2, #1
 8008fae:	211f      	movs	r1, #31
 8008fb0:	9804      	ldr	r0, [sp, #16]
 8008fb2:	f7ff f8e5 	bl	8008180 <SendMessageToModule>
										break;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	4699      	mov	r9, r3
 8008fba:	f7ff fb0f 	bl	80085dc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 8008fbe:	8819      	ldrh	r1, [r3, #0]
 8008fc0:	4a31      	ldr	r2, [pc, #196]	; (8009088 <PxMessagingTask+0xb84>)
 8008fc2:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	0a1b      	lsrs	r3, r3, #8
 8008fc8:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8008fca:	2202      	movs	r2, #2
 8008fcc:	211f      	movs	r1, #31
 8008fce:	9804      	ldr	r0, [sp, #16]
 8008fd0:	f7ff f8d6 	bl	8008180 <SendMessageToModule>
										break;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4699      	mov	r9, r3
 8008fd8:	f7ff fb00 	bl	80085dc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 8008fdc:	8819      	ldrh	r1, [r3, #0]
 8008fde:	4a2a      	ldr	r2, [pc, #168]	; (8009088 <PxMessagingTask+0xb84>)
 8008fe0:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b21b      	sxth	r3, r3
 8008fe6:	121b      	asrs	r3, r3, #8
 8008fe8:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 8008fea:	2202      	movs	r2, #2
 8008fec:	211f      	movs	r1, #31
 8008fee:	9804      	ldr	r0, [sp, #16]
 8008ff0:	f7ff f8c6 	bl	8008180 <SendMessageToModule>
										break;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	4699      	mov	r9, r3
 8008ff8:	f7ff faf0 	bl	80085dc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 8008ffc:	6819      	ldr	r1, [r3, #0]
 8008ffe:	4a22      	ldr	r2, [pc, #136]	; (8009088 <PxMessagingTask+0xb84>)
 8009000:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	0a09      	lsrs	r1, r1, #8
 8009006:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009008:	6819      	ldr	r1, [r3, #0]
 800900a:	0c09      	lsrs	r1, r1, #16
 800900c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	0e1b      	lsrs	r3, r3, #24
 8009012:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009014:	2204      	movs	r2, #4
 8009016:	211f      	movs	r1, #31
 8009018:	9804      	ldr	r0, [sp, #16]
 800901a:	f7ff f8b1 	bl	8008180 <SendMessageToModule>
										break;
 800901e:	2300      	movs	r3, #0
 8009020:	4699      	mov	r9, r3
 8009022:	f7ff fadb 	bl	80085dc <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009026:	6819      	ldr	r1, [r3, #0]
 8009028:	4a17      	ldr	r2, [pc, #92]	; (8009088 <PxMessagingTask+0xb84>)
 800902a:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800902c:	6819      	ldr	r1, [r3, #0]
 800902e:	1209      	asrs	r1, r1, #8
 8009030:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009032:	6819      	ldr	r1, [r3, #0]
 8009034:	1409      	asrs	r1, r1, #16
 8009036:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	161b      	asrs	r3, r3, #24
 800903c:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800903e:	2204      	movs	r2, #4
 8009040:	211f      	movs	r1, #31
 8009042:	9804      	ldr	r0, [sp, #16]
 8009044:	f7ff f89c 	bl	8008180 <SendMessageToModule>
										break;
 8009048:	2300      	movs	r3, #0
 800904a:	4699      	mov	r9, r3
 800904c:	f7ff fac6 	bl	80085dc <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 8009050:	7819      	ldrb	r1, [r3, #0]
 8009052:	4a0d      	ldr	r2, [pc, #52]	; (8009088 <PxMessagingTask+0xb84>)
 8009054:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 8009056:	7859      	ldrb	r1, [r3, #1]
 8009058:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800905a:	7899      	ldrb	r1, [r3, #2]
 800905c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800905e:	78db      	ldrb	r3, [r3, #3]
 8009060:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 8009062:	2208      	movs	r2, #8
 8009064:	211f      	movs	r1, #31
 8009066:	9804      	ldr	r0, [sp, #16]
 8009068:	f7ff f88a 	bl	8008180 <SendMessageToModule>
										break; // You cannot bitwise floats
 800906c:	2300      	movs	r3, #0
 800906e:	4699      	mov	r9, r3
 8009070:	f7ff fab4 	bl	80085dc <PxMessagingTask+0xd8>
 8009074:	20001424 	.word	0x20001424
 8009078:	e000ed00 	.word	0xe000ed00
 800907c:	05fa0004 	.word	0x05fa0004
 8009080:	20001792 	.word	0x20001792
 8009084:	0801b268 	.word	0x0801b268
 8009088:	20001654 	.word	0x20001654
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800908c:	2a02      	cmp	r2, #2
 800908e:	d000      	beq.n	8009092 <PxMessagingTask+0xb8e>
 8009090:	e09f      	b.n	80091d2 <PxMessagingTask+0xcce>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 8009092:	48ef      	ldr	r0, [pc, #956]	; (8009450 <PxMessagingTask+0xf4c>)
 8009094:	3236      	adds	r2, #54	; 0x36
 8009096:	436a      	muls	r2, r5
 8009098:	1882      	adds	r2, r0, r2
 800909a:	1851      	adds	r1, r2, r1
 800909c:	3901      	subs	r1, #1
 800909e:	2200      	movs	r2, #0
 80090a0:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 80090a2:	3301      	adds	r3, #1
 80090a4:	4453      	add	r3, sl
 80090a6:	1818      	adds	r0, r3, r0
 80090a8:	f7fa fb7a 	bl	80037a0 <IsModuleParameter>
 80090ac:	9007      	str	r0, [sp, #28]
								if(temp == 0){ // Parameter does not exist
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d108      	bne.n	80090c4 <PxMessagingTask+0xbc0>
									SendMessageToModule(src,
 80090b2:	2201      	movs	r2, #1
 80090b4:	211f      	movs	r1, #31
 80090b6:	9804      	ldr	r0, [sp, #16]
 80090b8:	f7ff f862 	bl	8008180 <SendMessageToModule>
 80090bc:	2300      	movs	r3, #0
 80090be:	4699      	mov	r9, r3
 80090c0:	f7ff fa8c 	bl	80085dc <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 80090c4:	3801      	subs	r0, #1
 80090c6:	4ae3      	ldr	r2, [pc, #908]	; (8009454 <PxMessagingTask+0xf50>)
 80090c8:	210c      	movs	r1, #12
 80090ca:	4341      	muls	r1, r0
 80090cc:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 80090ce:	1852      	adds	r2, r2, r1
 80090d0:	7912      	ldrb	r2, [r2, #4]
 80090d2:	49e1      	ldr	r1, [pc, #900]	; (8009458 <PxMessagingTask+0xf54>)
 80090d4:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 80090d6:	3a01      	subs	r2, #1
 80090d8:	b2d1      	uxtb	r1, r2
 80090da:	2907      	cmp	r1, #7
 80090dc:	d901      	bls.n	80090e2 <PxMessagingTask+0xbde>
 80090de:	f000 fd21 	bl	8009b24 <PxMessagingTask+0x1620>
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	0092      	lsls	r2, r2, #2
 80090e6:	49dd      	ldr	r1, [pc, #884]	; (800945c <PxMessagingTask+0xf58>)
 80090e8:	588a      	ldr	r2, [r1, r2]
 80090ea:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 80090ec:	781a      	ldrb	r2, [r3, #0]
 80090ee:	4bda      	ldr	r3, [pc, #872]	; (8009458 <PxMessagingTask+0xf54>)
 80090f0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 80090f2:	2202      	movs	r2, #2
 80090f4:	211f      	movs	r1, #31
 80090f6:	9804      	ldr	r0, [sp, #16]
 80090f8:	f7ff f842 	bl	8008180 <SendMessageToModule>
											break;
 80090fc:	2300      	movs	r3, #0
 80090fe:	4699      	mov	r9, r3
 8009100:	f7ff fa6c 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	4bd4      	ldr	r3, [pc, #848]	; (8009458 <PxMessagingTask+0xf54>)
 8009108:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800910a:	2202      	movs	r2, #2
 800910c:	211f      	movs	r1, #31
 800910e:	9804      	ldr	r0, [sp, #16]
 8009110:	f7ff f836 	bl	8008180 <SendMessageToModule>
											break;
 8009114:	2300      	movs	r3, #0
 8009116:	4699      	mov	r9, r3
 8009118:	f7ff fa60 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800911c:	8819      	ldrh	r1, [r3, #0]
 800911e:	4ace      	ldr	r2, [pc, #824]	; (8009458 <PxMessagingTask+0xf54>)
 8009120:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009122:	881b      	ldrh	r3, [r3, #0]
 8009124:	0a1b      	lsrs	r3, r3, #8
 8009126:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009128:	2203      	movs	r2, #3
 800912a:	211f      	movs	r1, #31
 800912c:	9804      	ldr	r0, [sp, #16]
 800912e:	f7ff f827 	bl	8008180 <SendMessageToModule>
											break;
 8009132:	2300      	movs	r3, #0
 8009134:	4699      	mov	r9, r3
 8009136:	f7ff fa51 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800913a:	8819      	ldrh	r1, [r3, #0]
 800913c:	4ac6      	ldr	r2, [pc, #792]	; (8009458 <PxMessagingTask+0xf54>)
 800913e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	b21b      	sxth	r3, r3
 8009144:	121b      	asrs	r3, r3, #8
 8009146:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 8009148:	2203      	movs	r2, #3
 800914a:	211f      	movs	r1, #31
 800914c:	9804      	ldr	r0, [sp, #16]
 800914e:	f7ff f817 	bl	8008180 <SendMessageToModule>
											break;
 8009152:	2300      	movs	r3, #0
 8009154:	4699      	mov	r9, r3
 8009156:	f7ff fa41 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800915a:	6819      	ldr	r1, [r3, #0]
 800915c:	4abe      	ldr	r2, [pc, #760]	; (8009458 <PxMessagingTask+0xf54>)
 800915e:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	0a09      	lsrs	r1, r1, #8
 8009164:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009166:	6819      	ldr	r1, [r3, #0]
 8009168:	0c09      	lsrs	r1, r1, #16
 800916a:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	0e1b      	lsrs	r3, r3, #24
 8009170:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 8009172:	2205      	movs	r2, #5
 8009174:	211f      	movs	r1, #31
 8009176:	9804      	ldr	r0, [sp, #16]
 8009178:	f7ff f802 	bl	8008180 <SendMessageToModule>
											break;
 800917c:	2300      	movs	r3, #0
 800917e:	4699      	mov	r9, r3
 8009180:	f7ff fa2c 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 8009184:	6819      	ldr	r1, [r3, #0]
 8009186:	4ab4      	ldr	r2, [pc, #720]	; (8009458 <PxMessagingTask+0xf54>)
 8009188:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800918a:	6819      	ldr	r1, [r3, #0]
 800918c:	1209      	asrs	r1, r1, #8
 800918e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 8009190:	6819      	ldr	r1, [r3, #0]
 8009192:	1409      	asrs	r1, r1, #16
 8009194:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	161b      	asrs	r3, r3, #24
 800919a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800919c:	2205      	movs	r2, #5
 800919e:	211f      	movs	r1, #31
 80091a0:	9804      	ldr	r0, [sp, #16]
 80091a2:	f7fe ffed 	bl	8008180 <SendMessageToModule>
											break;
 80091a6:	2300      	movs	r3, #0
 80091a8:	4699      	mov	r9, r3
 80091aa:	f7ff fa17 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80091ae:	7819      	ldrb	r1, [r3, #0]
 80091b0:	4aa9      	ldr	r2, [pc, #676]	; (8009458 <PxMessagingTask+0xf54>)
 80091b2:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80091b4:	7859      	ldrb	r1, [r3, #1]
 80091b6:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80091b8:	7899      	ldrb	r1, [r3, #2]
 80091ba:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80091bc:	78db      	ldrb	r3, [r3, #3]
 80091be:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80091c0:	2209      	movs	r2, #9
 80091c2:	211f      	movs	r1, #31
 80091c4:	9804      	ldr	r0, [sp, #16]
 80091c6:	f7fe ffdb 	bl	8008180 <SendMessageToModule>
											break;
 80091ca:	2300      	movs	r3, #0
 80091cc:	4699      	mov	r9, r3
 80091ce:	f7ff fa05 	bl	80085dc <PxMessagingTask+0xd8>
								}
 80091d2:	2300      	movs	r3, #0
 80091d4:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 80091d6:	2a02      	cmp	r2, #2
 80091d8:	d801      	bhi.n	80091de <PxMessagingTask+0xcda>
 80091da:	f7ff f9ff 	bl	80085dc <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 80091de:	3a04      	subs	r2, #4
 80091e0:	0092      	lsls	r2, r2, #2
 80091e2:	4b9f      	ldr	r3, [pc, #636]	; (8009460 <PxMessagingTask+0xf5c>)
 80091e4:	58d1      	ldr	r1, [r2, r3]
 80091e6:	220f      	movs	r2, #15
 80091e8:	400a      	ands	r2, r1
 80091ea:	4b9b      	ldr	r3, [pc, #620]	; (8009458 <PxMessagingTask+0xf54>)
 80091ec:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 80091ee:	454a      	cmp	r2, r9
 80091f0:	d106      	bne.n	8009200 <PxMessagingTask+0xcfc>
									SendMessageToModule(src,
 80091f2:	2201      	movs	r2, #1
 80091f4:	211f      	movs	r1, #31
 80091f6:	9804      	ldr	r0, [sp, #16]
 80091f8:	f7fe ffc2 	bl	8008180 <SendMessageToModule>
 80091fc:	f7ff f9ee 	bl	80085dc <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 8009200:	0c09      	lsrs	r1, r1, #16
 8009202:	2380      	movs	r3, #128	; 0x80
 8009204:	059b      	lsls	r3, r3, #22
 8009206:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 8009208:	3a01      	subs	r2, #1
 800920a:	b2d0      	uxtb	r0, r2
 800920c:	2807      	cmp	r0, #7
 800920e:	d901      	bls.n	8009214 <PxMessagingTask+0xd10>
 8009210:	f000 fc8c 	bl	8009b2c <PxMessagingTask+0x1628>
 8009214:	b2d2      	uxtb	r2, r2
 8009216:	0092      	lsls	r2, r2, #2
 8009218:	4892      	ldr	r0, [pc, #584]	; (8009464 <PxMessagingTask+0xf60>)
 800921a:	5882      	ldr	r2, [r0, r2]
 800921c:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	4b8d      	ldr	r3, [pc, #564]	; (8009458 <PxMessagingTask+0xf54>)
 8009222:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 8009224:	2202      	movs	r2, #2
 8009226:	211f      	movs	r1, #31
 8009228:	9804      	ldr	r0, [sp, #16]
 800922a:	f7fe ffa9 	bl	8008180 <SendMessageToModule>
											break;
 800922e:	2300      	movs	r3, #0
 8009230:	4699      	mov	r9, r3
 8009232:	f7ff f9d3 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 8009236:	781a      	ldrb	r2, [r3, #0]
 8009238:	4b87      	ldr	r3, [pc, #540]	; (8009458 <PxMessagingTask+0xf54>)
 800923a:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800923c:	2202      	movs	r2, #2
 800923e:	211f      	movs	r1, #31
 8009240:	9804      	ldr	r0, [sp, #16]
 8009242:	f7fe ff9d 	bl	8008180 <SendMessageToModule>
											break;
 8009246:	2300      	movs	r3, #0
 8009248:	4699      	mov	r9, r3
 800924a:	f7ff f9c7 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800924e:	8819      	ldrh	r1, [r3, #0]
 8009250:	4a81      	ldr	r2, [pc, #516]	; (8009458 <PxMessagingTask+0xf54>)
 8009252:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 8009254:	881b      	ldrh	r3, [r3, #0]
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800925a:	2203      	movs	r2, #3
 800925c:	211f      	movs	r1, #31
 800925e:	9804      	ldr	r0, [sp, #16]
 8009260:	f7fe ff8e 	bl	8008180 <SendMessageToModule>
											break;
 8009264:	2300      	movs	r3, #0
 8009266:	4699      	mov	r9, r3
 8009268:	f7ff f9b8 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800926c:	8819      	ldrh	r1, [r3, #0]
 800926e:	4a7a      	ldr	r2, [pc, #488]	; (8009458 <PxMessagingTask+0xf54>)
 8009270:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b21b      	sxth	r3, r3
 8009276:	121b      	asrs	r3, r3, #8
 8009278:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800927a:	2203      	movs	r2, #3
 800927c:	211f      	movs	r1, #31
 800927e:	9804      	ldr	r0, [sp, #16]
 8009280:	f7fe ff7e 	bl	8008180 <SendMessageToModule>
											break;
 8009284:	2300      	movs	r3, #0
 8009286:	4699      	mov	r9, r3
 8009288:	f7ff f9a8 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	4a72      	ldr	r2, [pc, #456]	; (8009458 <PxMessagingTask+0xf54>)
 8009290:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 8009292:	6819      	ldr	r1, [r3, #0]
 8009294:	0a09      	lsrs	r1, r1, #8
 8009296:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 8009298:	6819      	ldr	r1, [r3, #0]
 800929a:	0c09      	lsrs	r1, r1, #16
 800929c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	0e1b      	lsrs	r3, r3, #24
 80092a2:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80092a4:	2205      	movs	r2, #5
 80092a6:	211f      	movs	r1, #31
 80092a8:	9804      	ldr	r0, [sp, #16]
 80092aa:	f7fe ff69 	bl	8008180 <SendMessageToModule>
											break;
 80092ae:	2300      	movs	r3, #0
 80092b0:	4699      	mov	r9, r3
 80092b2:	f7ff f993 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 80092b6:	6819      	ldr	r1, [r3, #0]
 80092b8:	4a67      	ldr	r2, [pc, #412]	; (8009458 <PxMessagingTask+0xf54>)
 80092ba:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 80092bc:	6819      	ldr	r1, [r3, #0]
 80092be:	1209      	asrs	r1, r1, #8
 80092c0:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 80092c2:	6819      	ldr	r1, [r3, #0]
 80092c4:	1409      	asrs	r1, r1, #16
 80092c6:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	161b      	asrs	r3, r3, #24
 80092cc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 80092ce:	2205      	movs	r2, #5
 80092d0:	211f      	movs	r1, #31
 80092d2:	9804      	ldr	r0, [sp, #16]
 80092d4:	f7fe ff54 	bl	8008180 <SendMessageToModule>
											break;
 80092d8:	2300      	movs	r3, #0
 80092da:	4699      	mov	r9, r3
 80092dc:	f7ff f97e 	bl	80085dc <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 80092e0:	781a      	ldrb	r2, [r3, #0]
 80092e2:	4b5d      	ldr	r3, [pc, #372]	; (8009458 <PxMessagingTask+0xf54>)
 80092e4:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 80092e6:	4a60      	ldr	r2, [pc, #384]	; (8009468 <PxMessagingTask+0xf64>)
 80092e8:	188a      	adds	r2, r1, r2
 80092ea:	7812      	ldrb	r2, [r2, #0]
 80092ec:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 80092ee:	4a5f      	ldr	r2, [pc, #380]	; (800946c <PxMessagingTask+0xf68>)
 80092f0:	188a      	adds	r2, r1, r2
 80092f2:	7812      	ldrb	r2, [r2, #0]
 80092f4:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 80092f6:	4a5e      	ldr	r2, [pc, #376]	; (8009470 <PxMessagingTask+0xf6c>)
 80092f8:	4694      	mov	ip, r2
 80092fa:	4461      	add	r1, ip
 80092fc:	780a      	ldrb	r2, [r1, #0]
 80092fe:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 8009300:	2209      	movs	r2, #9
 8009302:	211f      	movs	r1, #31
 8009304:	9804      	ldr	r0, [sp, #16]
 8009306:	f7fe ff3b 	bl	8008180 <SendMessageToModule>
											break;
 800930a:	2300      	movs	r3, #0
 800930c:	4699      	mov	r9, r3
 800930e:	f7ff f965 	bl	80085dc <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009312:	4b58      	ldr	r3, [pc, #352]	; (8009474 <PxMessagingTask+0xf70>)
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	2002      	movs	r0, #2
 800931a:	4240      	negs	r0, r0
 800931c:	17c1      	asrs	r1, r0, #31
 800931e:	1812      	adds	r2, r2, r0
 8009320:	414b      	adcs	r3, r1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00c      	beq.n	8009340 <PxMessagingTask+0xe3c>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 8009326:	4b54      	ldr	r3, [pc, #336]	; (8009478 <PxMessagingTask+0xf74>)
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b10      	cmp	r3, #16
 800932c:	d101      	bne.n	8009332 <PxMessagingTask+0xe2e>
 800932e:	f000 fc13 	bl	8009b58 <PxMessagingTask+0x1654>
								responseStatus =BOS_OK;
 8009332:	4b51      	ldr	r3, [pc, #324]	; (8009478 <PxMessagingTask+0xf74>)
 8009334:	2200      	movs	r2, #0
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	2300      	movs	r3, #0
 800933a:	4699      	mov	r9, r3
 800933c:	f7ff f94e 	bl	80085dc <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <PxMessagingTask+0xe44>
 8009344:	2a01      	cmp	r2, #1
 8009346:	d8ee      	bhi.n	8009326 <PxMessagingTask+0xe22>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 8009348:	2138      	movs	r1, #56	; 0x38
 800934a:	4369      	muls	r1, r5
 800934c:	4a40      	ldr	r2, [pc, #256]	; (8009450 <PxMessagingTask+0xf4c>)
 800934e:	1852      	adds	r2, r2, r1
 8009350:	5d12      	ldrb	r2, [r2, r4]
 8009352:	494a      	ldr	r1, [pc, #296]	; (800947c <PxMessagingTask+0xf78>)
 8009354:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 8009356:	2a08      	cmp	r2, #8
 8009358:	d8e5      	bhi.n	8009326 <PxMessagingTask+0xe22>
 800935a:	0092      	lsls	r2, r2, #2
 800935c:	4948      	ldr	r1, [pc, #288]	; (8009480 <PxMessagingTask+0xf7c>)
 800935e:	588a      	ldr	r2, [r1, r2]
 8009360:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009362:	4b45      	ldr	r3, [pc, #276]	; (8009478 <PxMessagingTask+0xf74>)
 8009364:	2210      	movs	r2, #16
 8009366:	701a      	strb	r2, [r3, #0]
 8009368:	2300      	movs	r3, #0
 800936a:	4699      	mov	r9, r3
 800936c:	f7ff f936 	bl	80085dc <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 8009370:	4a40      	ldr	r2, [pc, #256]	; (8009474 <PxMessagingTask+0xf70>)
 8009372:	2038      	movs	r0, #56	; 0x38
 8009374:	4368      	muls	r0, r5
 8009376:	4936      	ldr	r1, [pc, #216]	; (8009450 <PxMessagingTask+0xf4c>)
 8009378:	1809      	adds	r1, r1, r0
 800937a:	1909      	adds	r1, r1, r4
 800937c:	784b      	ldrb	r3, [r1, #1]
 800937e:	6013      	str	r3, [r2, #0]
 8009380:	2300      	movs	r3, #0
 8009382:	6053      	str	r3, [r2, #4]
										break;
 8009384:	e7cf      	b.n	8009326 <PxMessagingTask+0xe22>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 8009386:	4a3b      	ldr	r2, [pc, #236]	; (8009474 <PxMessagingTask+0xf70>)
 8009388:	2038      	movs	r0, #56	; 0x38
 800938a:	4368      	muls	r0, r5
 800938c:	4930      	ldr	r1, [pc, #192]	; (8009450 <PxMessagingTask+0xf4c>)
 800938e:	1809      	adds	r1, r1, r0
 8009390:	1909      	adds	r1, r1, r4
 8009392:	2301      	movs	r3, #1
 8009394:	56cb      	ldrsb	r3, [r1, r3]
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	17db      	asrs	r3, r3, #31
 800939a:	6053      	str	r3, [r2, #4]
										break;
 800939c:	e7c3      	b.n	8009326 <PxMessagingTask+0xe22>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800939e:	4a35      	ldr	r2, [pc, #212]	; (8009474 <PxMessagingTask+0xf70>)
 80093a0:	2038      	movs	r0, #56	; 0x38
 80093a2:	4368      	muls	r0, r5
 80093a4:	492a      	ldr	r1, [pc, #168]	; (8009450 <PxMessagingTask+0xf4c>)
 80093a6:	1809      	adds	r1, r1, r0
 80093a8:	1909      	adds	r1, r1, r4
 80093aa:	788b      	ldrb	r3, [r1, #2]
 80093ac:	021b      	lsls	r3, r3, #8
 80093ae:	7849      	ldrb	r1, [r1, #1]
 80093b0:	185b      	adds	r3, r3, r1
 80093b2:	6013      	str	r3, [r2, #0]
 80093b4:	17db      	asrs	r3, r3, #31
 80093b6:	6053      	str	r3, [r2, #4]
										break;
 80093b8:	e7b5      	b.n	8009326 <PxMessagingTask+0xe22>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 80093ba:	4a2e      	ldr	r2, [pc, #184]	; (8009474 <PxMessagingTask+0xf70>)
 80093bc:	2038      	movs	r0, #56	; 0x38
 80093be:	4368      	muls	r0, r5
 80093c0:	4923      	ldr	r1, [pc, #140]	; (8009450 <PxMessagingTask+0xf4c>)
 80093c2:	1809      	adds	r1, r1, r0
 80093c4:	1909      	adds	r1, r1, r4
 80093c6:	788b      	ldrb	r3, [r1, #2]
 80093c8:	021b      	lsls	r3, r3, #8
 80093ca:	7849      	ldrb	r1, [r1, #1]
 80093cc:	185b      	adds	r3, r3, r1
 80093ce:	6013      	str	r3, [r2, #0]
 80093d0:	17db      	asrs	r3, r3, #31
 80093d2:	6053      	str	r3, [r2, #4]
										break;
 80093d4:	e7a7      	b.n	8009326 <PxMessagingTask+0xe22>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80093d6:	4a27      	ldr	r2, [pc, #156]	; (8009474 <PxMessagingTask+0xf70>)
 80093d8:	2038      	movs	r0, #56	; 0x38
 80093da:	4368      	muls	r0, r5
 80093dc:	491c      	ldr	r1, [pc, #112]	; (8009450 <PxMessagingTask+0xf4c>)
 80093de:	1809      	adds	r1, r1, r0
 80093e0:	1909      	adds	r1, r1, r4
 80093e2:	788b      	ldrb	r3, [r1, #2]
 80093e4:	021b      	lsls	r3, r3, #8
 80093e6:	78c8      	ldrb	r0, [r1, #3]
 80093e8:	0400      	lsls	r0, r0, #16
 80093ea:	181b      	adds	r3, r3, r0
 80093ec:	7848      	ldrb	r0, [r1, #1]
 80093ee:	181b      	adds	r3, r3, r0
 80093f0:	7909      	ldrb	r1, [r1, #4]
 80093f2:	0609      	lsls	r1, r1, #24
 80093f4:	185b      	adds	r3, r3, r1
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	2300      	movs	r3, #0
 80093fa:	6053      	str	r3, [r2, #4]
										break;
 80093fc:	e793      	b.n	8009326 <PxMessagingTask+0xe22>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 80093fe:	4a1d      	ldr	r2, [pc, #116]	; (8009474 <PxMessagingTask+0xf70>)
 8009400:	2038      	movs	r0, #56	; 0x38
 8009402:	4368      	muls	r0, r5
 8009404:	4912      	ldr	r1, [pc, #72]	; (8009450 <PxMessagingTask+0xf4c>)
 8009406:	1809      	adds	r1, r1, r0
 8009408:	1909      	adds	r1, r1, r4
 800940a:	788b      	ldrb	r3, [r1, #2]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	7848      	ldrb	r0, [r1, #1]
 8009410:	181b      	adds	r3, r3, r0
 8009412:	78c8      	ldrb	r0, [r1, #3]
 8009414:	0400      	lsls	r0, r0, #16
 8009416:	181b      	adds	r3, r3, r0
 8009418:	7909      	ldrb	r1, [r1, #4]
 800941a:	0609      	lsls	r1, r1, #24
 800941c:	185b      	adds	r3, r3, r1
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	17db      	asrs	r3, r3, #31
 8009422:	6053      	str	r3, [r2, #4]
										break;
 8009424:	e77f      	b.n	8009326 <PxMessagingTask+0xe22>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009426:	4a13      	ldr	r2, [pc, #76]	; (8009474 <PxMessagingTask+0xf70>)
 8009428:	2038      	movs	r0, #56	; 0x38
 800942a:	4368      	muls	r0, r5
 800942c:	4908      	ldr	r1, [pc, #32]	; (8009450 <PxMessagingTask+0xf4c>)
 800942e:	1809      	adds	r1, r1, r0
 8009430:	1909      	adds	r1, r1, r4
 8009432:	788b      	ldrb	r3, [r1, #2]
 8009434:	021b      	lsls	r3, r3, #8
 8009436:	78c8      	ldrb	r0, [r1, #3]
 8009438:	0400      	lsls	r0, r0, #16
 800943a:	181b      	adds	r3, r3, r0
 800943c:	7848      	ldrb	r0, [r1, #1]
 800943e:	181b      	adds	r3, r3, r0
 8009440:	7909      	ldrb	r1, [r1, #4]
 8009442:	0609      	lsls	r1, r1, #24
 8009444:	185b      	adds	r3, r3, r1
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	2300      	movs	r3, #0
 800944a:	6053      	str	r3, [r2, #4]
										break;
 800944c:	e76b      	b.n	8009326 <PxMessagingTask+0xe22>
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	20001424 	.word	0x20001424
 8009454:	200000ac 	.word	0x200000ac
 8009458:	20001654 	.word	0x20001654
 800945c:	0801b288 	.word	0x0801b288
 8009460:	20006994 	.word	0x20006994
 8009464:	0801b2a8 	.word	0x0801b2a8
 8009468:	20000001 	.word	0x20000001
 800946c:	20000002 	.word	0x20000002
 8009470:	20000003 	.word	0x20000003
 8009474:	20001828 	.word	0x20001828
 8009478:	20001830 	.word	0x20001830
 800947c:	200000a8 	.word	0x200000a8
 8009480:	0801b2c8 	.word	0x0801b2c8
							responseStatus =BOS_OK; // Initialize response
 8009484:	4bdd      	ldr	r3, [pc, #884]	; (80097fc <PxMessagingTask+0x12f8>)
 8009486:	2200      	movs	r2, #0
 8009488:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800948a:	46a1      	mov	r9, r4
 800948c:	4bdc      	ldr	r3, [pc, #880]	; (8009800 <PxMessagingTask+0x12fc>)
 800948e:	199b      	adds	r3, r3, r6
 8009490:	5d1b      	ldrb	r3, [r3, r4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d100      	bne.n	8009498 <PxMessagingTask+0xf94>
 8009496:	e10b      	b.n	80096b0 <PxMessagingTask+0x11ac>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 8009498:	2b1e      	cmp	r3, #30
 800949a:	d900      	bls.n	800949e <PxMessagingTask+0xf9a>
 800949c:	e104      	b.n	80096a8 <PxMessagingTask+0x11a4>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800949e:	1e5c      	subs	r4, r3, #1
 80094a0:	00a2      	lsls	r2, r4, #2
 80094a2:	4bd8      	ldr	r3, [pc, #864]	; (8009804 <PxMessagingTask+0x1300>)
 80094a4:	58d1      	ldr	r1, [r2, r3]
 80094a6:	0c0b      	lsrs	r3, r1, #16
 80094a8:	2280      	movs	r2, #128	; 0x80
 80094aa:	0592      	lsls	r2, r2, #22
 80094ac:	4694      	mov	ip, r2
 80094ae:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 80094b0:	464a      	mov	r2, r9
 80094b2:	1c57      	adds	r7, r2, #1
 80094b4:	2038      	movs	r0, #56	; 0x38
 80094b6:	4368      	muls	r0, r5
 80094b8:	4ad1      	ldr	r2, [pc, #836]	; (8009800 <PxMessagingTask+0x12fc>)
 80094ba:	1812      	adds	r2, r2, r0
 80094bc:	5dd2      	ldrb	r2, [r2, r7]
 80094be:	4693      	mov	fp, r2
 80094c0:	3a01      	subs	r2, #1
 80094c2:	b2d0      	uxtb	r0, r2
 80094c4:	2807      	cmp	r0, #7
 80094c6:	d81b      	bhi.n	8009500 <PxMessagingTask+0xffc>
 80094c8:	b2d2      	uxtb	r2, r2
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	48ce      	ldr	r0, [pc, #824]	; (8009808 <PxMessagingTask+0x1304>)
 80094ce:	5882      	ldr	r2, [r0, r2]
 80094d0:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80094d2:	070a      	lsls	r2, r1, #28
 80094d4:	d109      	bne.n	80094ea <PxMessagingTask+0xfe6>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 80094d6:	2001      	movs	r0, #1
 80094d8:	f00a fab0 	bl	8013a3c <malloc>
 80094dc:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80094de:	d00c      	beq.n	80094fa <PxMessagingTask+0xff6>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80094e0:	00a4      	lsls	r4, r4, #2
 80094e2:	0400      	lsls	r0, r0, #16
 80094e4:	4458      	add	r0, fp
 80094e6:	4ac7      	ldr	r2, [pc, #796]	; (8009804 <PxMessagingTask+0x1300>)
 80094e8:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 80094ea:	2138      	movs	r1, #56	; 0x38
 80094ec:	4369      	muls	r1, r5
 80094ee:	4ac4      	ldr	r2, [pc, #784]	; (8009800 <PxMessagingTask+0x12fc>)
 80094f0:	1852      	adds	r2, r2, r1
 80094f2:	444a      	add	r2, r9
 80094f4:	7892      	ldrb	r2, [r2, #2]
 80094f6:	701a      	strb	r2, [r3, #0]
 80094f8:	e002      	b.n	8009500 <PxMessagingTask+0xffc>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 80094fa:	4bc0      	ldr	r3, [pc, #768]	; (80097fc <PxMessagingTask+0x12f8>)
 80094fc:	2212      	movs	r2, #18
 80094fe:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009500:	2338      	movs	r3, #56	; 0x38
 8009502:	436b      	muls	r3, r5
 8009504:	4abe      	ldr	r2, [pc, #760]	; (8009800 <PxMessagingTask+0x12fc>)
 8009506:	18d2      	adds	r2, r2, r3
 8009508:	464b      	mov	r3, r9
 800950a:	5cd3      	ldrb	r3, [r2, r3]
 800950c:	3b01      	subs	r3, #1
 800950e:	0098      	lsls	r0, r3, #2
 8009510:	49bc      	ldr	r1, [pc, #752]	; (8009804 <PxMessagingTask+0x1300>)
 8009512:	5841      	ldr	r1, [r0, r1]
 8009514:	5dd2      	ldrb	r2, [r2, r7]
 8009516:	200f      	movs	r0, #15
 8009518:	4008      	ands	r0, r1
 800951a:	4290      	cmp	r0, r2
 800951c:	d009      	beq.n	8009532 <PxMessagingTask+0x102e>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	48ba      	ldr	r0, [pc, #744]	; (800980c <PxMessagingTask+0x1308>)
 8009522:	4684      	mov	ip, r0
 8009524:	4462      	add	r2, ip
 8009526:	400a      	ands	r2, r1
 8009528:	49b6      	ldr	r1, [pc, #728]	; (8009804 <PxMessagingTask+0x1300>)
 800952a:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800952c:	4bb3      	ldr	r3, [pc, #716]	; (80097fc <PxMessagingTask+0x12f8>)
 800952e:	2214      	movs	r2, #20
 8009530:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 8009532:	4bb7      	ldr	r3, [pc, #732]	; (8009810 <PxMessagingTask+0x130c>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	2240      	movs	r2, #64	; 0x40
 8009538:	4393      	bics	r3, r2
 800953a:	2200      	movs	r2, #0
 800953c:	4691      	mov	r9, r2
 800953e:	2b20      	cmp	r3, #32
 8009540:	d001      	beq.n	8009546 <PxMessagingTask+0x1042>
 8009542:	f7ff f84b 	bl	80085dc <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 8009546:	4bad      	ldr	r3, [pc, #692]	; (80097fc <PxMessagingTask+0x12f8>)
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	4bb2      	ldr	r3, [pc, #712]	; (8009814 <PxMessagingTask+0x1310>)
 800954c:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800954e:	2201      	movs	r2, #1
 8009550:	2121      	movs	r1, #33	; 0x21
 8009552:	9804      	ldr	r0, [sp, #16]
 8009554:	f7fe fe14 	bl	8008180 <SendMessageToModule>
 8009558:	f7ff f840 	bl	80085dc <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800955c:	070a      	lsls	r2, r1, #28
 800955e:	d10a      	bne.n	8009576 <PxMessagingTask+0x1072>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 8009560:	2001      	movs	r0, #1
 8009562:	f00a fa6b 	bl	8013a3c <malloc>
 8009566:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009568:	d100      	bne.n	800956c <PxMessagingTask+0x1068>
 800956a:	e36d      	b.n	8009c48 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800956c:	00a4      	lsls	r4, r4, #2
 800956e:	0400      	lsls	r0, r0, #16
 8009570:	3002      	adds	r0, #2
 8009572:	4aa4      	ldr	r2, [pc, #656]	; (8009804 <PxMessagingTask+0x1300>)
 8009574:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 8009576:	2138      	movs	r1, #56	; 0x38
 8009578:	4369      	muls	r1, r5
 800957a:	4aa1      	ldr	r2, [pc, #644]	; (8009800 <PxMessagingTask+0x12fc>)
 800957c:	1852      	adds	r2, r2, r1
 800957e:	444a      	add	r2, r9
 8009580:	7892      	ldrb	r2, [r2, #2]
 8009582:	b252      	sxtb	r2, r2
 8009584:	701a      	strb	r2, [r3, #0]
 8009586:	e7bb      	b.n	8009500 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009588:	070a      	lsls	r2, r1, #28
 800958a:	d10a      	bne.n	80095a2 <PxMessagingTask+0x109e>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800958c:	2002      	movs	r0, #2
 800958e:	f00a fa55 	bl	8013a3c <malloc>
 8009592:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009594:	d100      	bne.n	8009598 <PxMessagingTask+0x1094>
 8009596:	e357      	b.n	8009c48 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009598:	00a4      	lsls	r4, r4, #2
 800959a:	0400      	lsls	r0, r0, #16
 800959c:	3003      	adds	r0, #3
 800959e:	4a99      	ldr	r2, [pc, #612]	; (8009804 <PxMessagingTask+0x1300>)
 80095a0:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 80095a2:	2138      	movs	r1, #56	; 0x38
 80095a4:	4369      	muls	r1, r5
 80095a6:	4a96      	ldr	r2, [pc, #600]	; (8009800 <PxMessagingTask+0x12fc>)
 80095a8:	1852      	adds	r2, r2, r1
 80095aa:	444a      	add	r2, r9
 80095ac:	78d1      	ldrb	r1, [r2, #3]
 80095ae:	0209      	lsls	r1, r1, #8
 80095b0:	7892      	ldrb	r2, [r2, #2]
 80095b2:	1852      	adds	r2, r2, r1
 80095b4:	b292      	uxth	r2, r2
 80095b6:	801a      	strh	r2, [r3, #0]
 80095b8:	e7a2      	b.n	8009500 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095ba:	070a      	lsls	r2, r1, #28
 80095bc:	d10a      	bne.n	80095d4 <PxMessagingTask+0x10d0>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 80095be:	2002      	movs	r0, #2
 80095c0:	f00a fa3c 	bl	8013a3c <malloc>
 80095c4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80095c6:	d100      	bne.n	80095ca <PxMessagingTask+0x10c6>
 80095c8:	e33e      	b.n	8009c48 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095ca:	00a4      	lsls	r4, r4, #2
 80095cc:	0400      	lsls	r0, r0, #16
 80095ce:	3004      	adds	r0, #4
 80095d0:	4a8c      	ldr	r2, [pc, #560]	; (8009804 <PxMessagingTask+0x1300>)
 80095d2:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 80095d4:	2138      	movs	r1, #56	; 0x38
 80095d6:	4369      	muls	r1, r5
 80095d8:	4a89      	ldr	r2, [pc, #548]	; (8009800 <PxMessagingTask+0x12fc>)
 80095da:	1852      	adds	r2, r2, r1
 80095dc:	444a      	add	r2, r9
 80095de:	78d1      	ldrb	r1, [r2, #3]
 80095e0:	0209      	lsls	r1, r1, #8
 80095e2:	7892      	ldrb	r2, [r2, #2]
 80095e4:	1852      	adds	r2, r2, r1
 80095e6:	b212      	sxth	r2, r2
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	e789      	b.n	8009500 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 80095ec:	070a      	lsls	r2, r1, #28
 80095ee:	d10a      	bne.n	8009606 <PxMessagingTask+0x1102>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 80095f0:	2004      	movs	r0, #4
 80095f2:	f00a fa23 	bl	8013a3c <malloc>
 80095f6:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 80095f8:	d100      	bne.n	80095fc <PxMessagingTask+0x10f8>
 80095fa:	e325      	b.n	8009c48 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 80095fc:	00a4      	lsls	r4, r4, #2
 80095fe:	0400      	lsls	r0, r0, #16
 8009600:	3005      	adds	r0, #5
 8009602:	4a80      	ldr	r2, [pc, #512]	; (8009804 <PxMessagingTask+0x1300>)
 8009604:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 8009606:	2238      	movs	r2, #56	; 0x38
 8009608:	436a      	muls	r2, r5
 800960a:	497d      	ldr	r1, [pc, #500]	; (8009800 <PxMessagingTask+0x12fc>)
 800960c:	1889      	adds	r1, r1, r2
 800960e:	4449      	add	r1, r9
 8009610:	78ca      	ldrb	r2, [r1, #3]
 8009612:	0212      	lsls	r2, r2, #8
 8009614:	7908      	ldrb	r0, [r1, #4]
 8009616:	0400      	lsls	r0, r0, #16
 8009618:	1812      	adds	r2, r2, r0
 800961a:	7888      	ldrb	r0, [r1, #2]
 800961c:	1812      	adds	r2, r2, r0
 800961e:	7949      	ldrb	r1, [r1, #5]
 8009620:	0609      	lsls	r1, r1, #24
 8009622:	1852      	adds	r2, r2, r1
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e76b      	b.n	8009500 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009628:	070a      	lsls	r2, r1, #28
 800962a:	d10a      	bne.n	8009642 <PxMessagingTask+0x113e>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800962c:	2004      	movs	r0, #4
 800962e:	f00a fa05 	bl	8013a3c <malloc>
 8009632:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009634:	d100      	bne.n	8009638 <PxMessagingTask+0x1134>
 8009636:	e307      	b.n	8009c48 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009638:	00a4      	lsls	r4, r4, #2
 800963a:	0400      	lsls	r0, r0, #16
 800963c:	3006      	adds	r0, #6
 800963e:	4a71      	ldr	r2, [pc, #452]	; (8009804 <PxMessagingTask+0x1300>)
 8009640:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 8009642:	2238      	movs	r2, #56	; 0x38
 8009644:	436a      	muls	r2, r5
 8009646:	496e      	ldr	r1, [pc, #440]	; (8009800 <PxMessagingTask+0x12fc>)
 8009648:	1889      	adds	r1, r1, r2
 800964a:	4449      	add	r1, r9
 800964c:	78ca      	ldrb	r2, [r1, #3]
 800964e:	0212      	lsls	r2, r2, #8
 8009650:	7888      	ldrb	r0, [r1, #2]
 8009652:	1812      	adds	r2, r2, r0
 8009654:	7908      	ldrb	r0, [r1, #4]
 8009656:	0400      	lsls	r0, r0, #16
 8009658:	1812      	adds	r2, r2, r0
 800965a:	7949      	ldrb	r1, [r1, #5]
 800965c:	0609      	lsls	r1, r1, #24
 800965e:	1852      	adds	r2, r2, r1
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	e74d      	b.n	8009500 <PxMessagingTask+0xffc>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 8009664:	070a      	lsls	r2, r1, #28
 8009666:	d10a      	bne.n	800967e <PxMessagingTask+0x117a>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 8009668:	2004      	movs	r0, #4
 800966a:	f00a f9e7 	bl	8013a3c <malloc>
 800966e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 8009670:	d100      	bne.n	8009674 <PxMessagingTask+0x1170>
 8009672:	e2e9      	b.n	8009c48 <PxMessagingTask+0x1744>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 8009674:	00a4      	lsls	r4, r4, #2
 8009676:	0400      	lsls	r0, r0, #16
 8009678:	3007      	adds	r0, #7
 800967a:	4a62      	ldr	r2, [pc, #392]	; (8009804 <PxMessagingTask+0x1300>)
 800967c:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800967e:	2238      	movs	r2, #56	; 0x38
 8009680:	436a      	muls	r2, r5
 8009682:	495f      	ldr	r1, [pc, #380]	; (8009800 <PxMessagingTask+0x12fc>)
 8009684:	1889      	adds	r1, r1, r2
 8009686:	4449      	add	r1, r9
 8009688:	78ca      	ldrb	r2, [r1, #3]
 800968a:	0212      	lsls	r2, r2, #8
 800968c:	7908      	ldrb	r0, [r1, #4]
 800968e:	0400      	lsls	r0, r0, #16
 8009690:	1812      	adds	r2, r2, r0
 8009692:	7888      	ldrb	r0, [r1, #2]
 8009694:	1812      	adds	r2, r2, r0
 8009696:	7949      	ldrb	r1, [r1, #5]
 8009698:	0609      	lsls	r1, r1, #24
 800969a:	1852      	adds	r2, r2, r1
 800969c:	495e      	ldr	r1, [pc, #376]	; (8009818 <PxMessagingTask+0x1314>)
 800969e:	600a      	str	r2, [r1, #0]
 80096a0:	2000      	movs	r0, #0
 80096a2:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 80096a4:	601a      	str	r2, [r3, #0]
 80096a6:	e72b      	b.n	8009500 <PxMessagingTask+0xffc>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 80096a8:	4b54      	ldr	r3, [pc, #336]	; (80097fc <PxMessagingTask+0x12f8>)
 80096aa:	2213      	movs	r2, #19
 80096ac:	701a      	strb	r2, [r3, #0]
 80096ae:	e740      	b.n	8009532 <PxMessagingTask+0x102e>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 80096b0:	2238      	movs	r2, #56	; 0x38
 80096b2:	436a      	muls	r2, r5
 80096b4:	4b52      	ldr	r3, [pc, #328]	; (8009800 <PxMessagingTask+0x12fc>)
 80096b6:	189b      	adds	r3, r3, r2
 80096b8:	191b      	adds	r3, r3, r4
 80096ba:	789c      	ldrb	r4, [r3, #2]
 80096bc:	0624      	lsls	r4, r4, #24
 80096be:	78da      	ldrb	r2, [r3, #3]
 80096c0:	0412      	lsls	r2, r2, #16
 80096c2:	18a4      	adds	r4, r4, r2
 80096c4:	795a      	ldrb	r2, [r3, #5]
 80096c6:	18a4      	adds	r4, r4, r2
 80096c8:	791b      	ldrb	r3, [r3, #4]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 80096ce:	23e0      	movs	r3, #224	; 0xe0
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	18e2      	adds	r2, r4, r3
 80096d4:	4b51      	ldr	r3, [pc, #324]	; (800981c <PxMessagingTask+0x1318>)
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d86f      	bhi.n	80097ba <PxMessagingTask+0x12b6>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 80096da:	2238      	movs	r2, #56	; 0x38
 80096dc:	436a      	muls	r2, r5
 80096de:	4b48      	ldr	r3, [pc, #288]	; (8009800 <PxMessagingTask+0x12fc>)
 80096e0:	189b      	adds	r3, r3, r2
 80096e2:	444b      	add	r3, r9
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	2a07      	cmp	r2, #7
 80096ec:	d900      	bls.n	80096f0 <PxMessagingTask+0x11ec>
 80096ee:	e720      	b.n	8009532 <PxMessagingTask+0x102e>
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	009b      	lsls	r3, r3, #2
 80096f4:	4a4a      	ldr	r2, [pc, #296]	; (8009820 <PxMessagingTask+0x131c>)
 80096f6:	58d3      	ldr	r3, [r2, r3]
 80096f8:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 80096fa:	2238      	movs	r2, #56	; 0x38
 80096fc:	436a      	muls	r2, r5
 80096fe:	4b40      	ldr	r3, [pc, #256]	; (8009800 <PxMessagingTask+0x12fc>)
 8009700:	189b      	adds	r3, r3, r2
 8009702:	444b      	add	r3, r9
 8009704:	799b      	ldrb	r3, [r3, #6]
 8009706:	7023      	strb	r3, [r4, #0]
											break;
 8009708:	e713      	b.n	8009532 <PxMessagingTask+0x102e>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800970a:	2238      	movs	r2, #56	; 0x38
 800970c:	436a      	muls	r2, r5
 800970e:	4b3c      	ldr	r3, [pc, #240]	; (8009800 <PxMessagingTask+0x12fc>)
 8009710:	189b      	adds	r3, r3, r2
 8009712:	444b      	add	r3, r9
 8009714:	799b      	ldrb	r3, [r3, #6]
 8009716:	b25b      	sxtb	r3, r3
 8009718:	7023      	strb	r3, [r4, #0]
											break;
 800971a:	e70a      	b.n	8009532 <PxMessagingTask+0x102e>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800971c:	2238      	movs	r2, #56	; 0x38
 800971e:	436a      	muls	r2, r5
 8009720:	4b37      	ldr	r3, [pc, #220]	; (8009800 <PxMessagingTask+0x12fc>)
 8009722:	189b      	adds	r3, r3, r2
 8009724:	444b      	add	r3, r9
 8009726:	79da      	ldrb	r2, [r3, #7]
 8009728:	0212      	lsls	r2, r2, #8
 800972a:	799b      	ldrb	r3, [r3, #6]
 800972c:	189b      	adds	r3, r3, r2
 800972e:	b29b      	uxth	r3, r3
 8009730:	8023      	strh	r3, [r4, #0]
											break;
 8009732:	e6fe      	b.n	8009532 <PxMessagingTask+0x102e>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 8009734:	2238      	movs	r2, #56	; 0x38
 8009736:	436a      	muls	r2, r5
 8009738:	4b31      	ldr	r3, [pc, #196]	; (8009800 <PxMessagingTask+0x12fc>)
 800973a:	189b      	adds	r3, r3, r2
 800973c:	444b      	add	r3, r9
 800973e:	79da      	ldrb	r2, [r3, #7]
 8009740:	0212      	lsls	r2, r2, #8
 8009742:	799b      	ldrb	r3, [r3, #6]
 8009744:	189b      	adds	r3, r3, r2
 8009746:	b21b      	sxth	r3, r3
 8009748:	8023      	strh	r3, [r4, #0]
											break;
 800974a:	e6f2      	b.n	8009532 <PxMessagingTask+0x102e>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800974c:	2338      	movs	r3, #56	; 0x38
 800974e:	436b      	muls	r3, r5
 8009750:	4a2b      	ldr	r2, [pc, #172]	; (8009800 <PxMessagingTask+0x12fc>)
 8009752:	18d2      	adds	r2, r2, r3
 8009754:	444a      	add	r2, r9
 8009756:	79d3      	ldrb	r3, [r2, #7]
 8009758:	021b      	lsls	r3, r3, #8
 800975a:	7a11      	ldrb	r1, [r2, #8]
 800975c:	0409      	lsls	r1, r1, #16
 800975e:	185b      	adds	r3, r3, r1
 8009760:	7991      	ldrb	r1, [r2, #6]
 8009762:	185b      	adds	r3, r3, r1
 8009764:	7a52      	ldrb	r2, [r2, #9]
 8009766:	0612      	lsls	r2, r2, #24
 8009768:	189b      	adds	r3, r3, r2
 800976a:	6023      	str	r3, [r4, #0]
											break;
 800976c:	e6e1      	b.n	8009532 <PxMessagingTask+0x102e>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800976e:	2338      	movs	r3, #56	; 0x38
 8009770:	436b      	muls	r3, r5
 8009772:	4a23      	ldr	r2, [pc, #140]	; (8009800 <PxMessagingTask+0x12fc>)
 8009774:	18d2      	adds	r2, r2, r3
 8009776:	444a      	add	r2, r9
 8009778:	79d3      	ldrb	r3, [r2, #7]
 800977a:	021b      	lsls	r3, r3, #8
 800977c:	7991      	ldrb	r1, [r2, #6]
 800977e:	185b      	adds	r3, r3, r1
 8009780:	7a11      	ldrb	r1, [r2, #8]
 8009782:	0409      	lsls	r1, r1, #16
 8009784:	185b      	adds	r3, r3, r1
 8009786:	7a52      	ldrb	r2, [r2, #9]
 8009788:	0612      	lsls	r2, r2, #24
 800978a:	189b      	adds	r3, r3, r2
 800978c:	6023      	str	r3, [r4, #0]
											break;
 800978e:	e6d0      	b.n	8009532 <PxMessagingTask+0x102e>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 8009790:	2338      	movs	r3, #56	; 0x38
 8009792:	436b      	muls	r3, r5
 8009794:	4a1a      	ldr	r2, [pc, #104]	; (8009800 <PxMessagingTask+0x12fc>)
 8009796:	18d2      	adds	r2, r2, r3
 8009798:	444a      	add	r2, r9
 800979a:	79d3      	ldrb	r3, [r2, #7]
 800979c:	021b      	lsls	r3, r3, #8
 800979e:	7a11      	ldrb	r1, [r2, #8]
 80097a0:	0409      	lsls	r1, r1, #16
 80097a2:	185b      	adds	r3, r3, r1
 80097a4:	7991      	ldrb	r1, [r2, #6]
 80097a6:	185b      	adds	r3, r3, r1
 80097a8:	7a52      	ldrb	r2, [r2, #9]
 80097aa:	0612      	lsls	r2, r2, #24
 80097ac:	189b      	adds	r3, r3, r2
 80097ae:	4a1a      	ldr	r2, [pc, #104]	; (8009818 <PxMessagingTask+0x1314>)
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	2100      	movs	r1, #0
 80097b4:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 80097b6:	6023      	str	r3, [r4, #0]
											break;
 80097b8:	e6bb      	b.n	8009532 <PxMessagingTask+0x102e>
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 80097ba:	4a1a      	ldr	r2, [pc, #104]	; (8009824 <PxMessagingTask+0x1320>)
 80097bc:	23f8      	movs	r3, #248	; 0xf8
 80097be:	061b      	lsls	r3, r3, #24
 80097c0:	18e3      	adds	r3, r4, r3
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d900      	bls.n	80097c8 <PxMessagingTask+0x12c4>
 80097c6:	e0af      	b.n	8009928 <PxMessagingTask+0x1424>
									HAL_FLASH_Unlock();
 80097c8:	f007 fe90 	bl	80114ec <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 80097cc:	2f22      	cmp	r7, #34	; 0x22
 80097ce:	d102      	bne.n	80097d6 <PxMessagingTask+0x12d2>
										EraseSector(temp32);
 80097d0:	0020      	movs	r0, r4
 80097d2:	f002 fc95 	bl	800c100 <EraseSector>
									if(responseStatus == BOS_OK){
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <PxMessagingTask+0x12f8>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d12e      	bne.n	800983c <PxMessagingTask+0x1338>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 80097de:	2238      	movs	r2, #56	; 0x38
 80097e0:	436a      	muls	r2, r5
 80097e2:	4b07      	ldr	r3, [pc, #28]	; (8009800 <PxMessagingTask+0x12fc>)
 80097e4:	189b      	adds	r3, r3, r2
 80097e6:	444b      	add	r3, r9
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b2da      	uxtb	r2, r3
 80097ee:	2a07      	cmp	r2, #7
 80097f0:	d824      	bhi.n	800983c <PxMessagingTask+0x1338>
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4a0c      	ldr	r2, [pc, #48]	; (8009828 <PxMessagingTask+0x1324>)
 80097f8:	58d3      	ldr	r3, [r2, r3]
 80097fa:	469f      	mov	pc, r3
 80097fc:	20001830 	.word	0x20001830
 8009800:	20001424 	.word	0x20001424
 8009804:	20006994 	.word	0x20006994
 8009808:	0801b2ec 	.word	0x0801b2ec
 800980c:	0000fff0 	.word	0x0000fff0
 8009810:	2000698c 	.word	0x2000698c
 8009814:	20001654 	.word	0x20001654
 8009818:	20001828 	.word	0x20001828
 800981c:	00007fff 	.word	0x00007fff
 8009820:	0801b30c 	.word	0x0801b30c
 8009824:	0001ffff 	.word	0x0001ffff
 8009828:	0801b32c 	.word	0x0801b32c
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800982c:	8823      	ldrh	r3, [r4, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	4acb      	ldr	r2, [pc, #812]	; (8009b60 <PxMessagingTask+0x165c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00c      	beq.n	8009850 <PxMessagingTask+0x134c>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009836:	4bcb      	ldr	r3, [pc, #812]	; (8009b64 <PxMessagingTask+0x1660>)
 8009838:	2216      	movs	r2, #22
 800983a:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800983c:	f007 fe68 	bl	8011510 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 8009840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009842:	2b00      	cmp	r3, #0
 8009844:	d100      	bne.n	8009848 <PxMessagingTask+0x1344>
 8009846:	e674      	b.n	8009532 <PxMessagingTask+0x102e>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 8009848:	4bc6      	ldr	r3, [pc, #792]	; (8009b64 <PxMessagingTask+0x1660>)
 800984a:	2216      	movs	r2, #22
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	e670      	b.n	8009532 <PxMessagingTask+0x102e>
													remoteBuffer =cMessage[port - 1][6 + shift];
 8009850:	2238      	movs	r2, #56	; 0x38
 8009852:	436a      	muls	r2, r5
 8009854:	4bc4      	ldr	r3, [pc, #784]	; (8009b68 <PxMessagingTask+0x1664>)
 8009856:	189b      	adds	r3, r3, r2
 8009858:	444b      	add	r3, r9
 800985a:	799a      	ldrb	r2, [r3, #6]
 800985c:	2300      	movs	r3, #0
 800985e:	49c3      	ldr	r1, [pc, #780]	; (8009b6c <PxMessagingTask+0x1668>)
 8009860:	600a      	str	r2, [r1, #0]
 8009862:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 8009864:	0021      	movs	r1, r4
 8009866:	2001      	movs	r0, #1
 8009868:	f007 fe8a 	bl	8011580 <HAL_FLASH_Program>
 800986c:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800986e:	e7e5      	b.n	800983c <PxMessagingTask+0x1338>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 8009870:	8823      	ldrh	r3, [r4, #0]
 8009872:	b29b      	uxth	r3, r3
 8009874:	4aba      	ldr	r2, [pc, #744]	; (8009b60 <PxMessagingTask+0x165c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d003      	beq.n	8009882 <PxMessagingTask+0x137e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800987a:	4bba      	ldr	r3, [pc, #744]	; (8009b64 <PxMessagingTask+0x1660>)
 800987c:	2216      	movs	r2, #22
 800987e:	701a      	strb	r2, [r3, #0]
													break;
 8009880:	e7dc      	b.n	800983c <PxMessagingTask+0x1338>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 8009882:	2238      	movs	r2, #56	; 0x38
 8009884:	436a      	muls	r2, r5
 8009886:	4bb8      	ldr	r3, [pc, #736]	; (8009b68 <PxMessagingTask+0x1664>)
 8009888:	189b      	adds	r3, r3, r2
 800988a:	444b      	add	r3, r9
 800988c:	79da      	ldrb	r2, [r3, #7]
 800988e:	0212      	lsls	r2, r2, #8
 8009890:	799b      	ldrb	r3, [r3, #6]
 8009892:	18d2      	adds	r2, r2, r3
 8009894:	17d3      	asrs	r3, r2, #31
 8009896:	49b5      	ldr	r1, [pc, #724]	; (8009b6c <PxMessagingTask+0x1668>)
 8009898:	600a      	str	r2, [r1, #0]
 800989a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800989c:	0021      	movs	r1, r4
 800989e:	2001      	movs	r0, #1
 80098a0:	f007 fe6e 	bl	8011580 <HAL_FLASH_Program>
 80098a4:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 80098a6:	e7c9      	b.n	800983c <PxMessagingTask+0x1338>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	3301      	adds	r3, #1
 80098ac:	d003      	beq.n	80098b6 <PxMessagingTask+0x13b2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80098ae:	4bad      	ldr	r3, [pc, #692]	; (8009b64 <PxMessagingTask+0x1660>)
 80098b0:	2216      	movs	r2, #22
 80098b2:	701a      	strb	r2, [r3, #0]
													break;
 80098b4:	e7c2      	b.n	800983c <PxMessagingTask+0x1338>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80098b6:	2238      	movs	r2, #56	; 0x38
 80098b8:	436a      	muls	r2, r5
 80098ba:	4bab      	ldr	r3, [pc, #684]	; (8009b68 <PxMessagingTask+0x1664>)
 80098bc:	189b      	adds	r3, r3, r2
 80098be:	444b      	add	r3, r9
 80098c0:	79da      	ldrb	r2, [r3, #7]
 80098c2:	0212      	lsls	r2, r2, #8
 80098c4:	7a19      	ldrb	r1, [r3, #8]
 80098c6:	0409      	lsls	r1, r1, #16
 80098c8:	1852      	adds	r2, r2, r1
 80098ca:	7999      	ldrb	r1, [r3, #6]
 80098cc:	1852      	adds	r2, r2, r1
 80098ce:	7a5b      	ldrb	r3, [r3, #9]
 80098d0:	061b      	lsls	r3, r3, #24
 80098d2:	18d2      	adds	r2, r2, r3
 80098d4:	2300      	movs	r3, #0
 80098d6:	49a5      	ldr	r1, [pc, #660]	; (8009b6c <PxMessagingTask+0x1668>)
 80098d8:	600a      	str	r2, [r1, #0]
 80098da:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 80098dc:	0021      	movs	r1, r4
 80098de:	2002      	movs	r0, #2
 80098e0:	f007 fe4e 	bl	8011580 <HAL_FLASH_Program>
 80098e4:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 80098e6:	e7a9      	b.n	800983c <PxMessagingTask+0x1338>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	3301      	adds	r3, #1
 80098ec:	d003      	beq.n	80098f6 <PxMessagingTask+0x13f2>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 80098ee:	4b9d      	ldr	r3, [pc, #628]	; (8009b64 <PxMessagingTask+0x1660>)
 80098f0:	2216      	movs	r2, #22
 80098f2:	701a      	strb	r2, [r3, #0]
													break;
 80098f4:	e7a2      	b.n	800983c <PxMessagingTask+0x1338>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 80098f6:	2238      	movs	r2, #56	; 0x38
 80098f8:	436a      	muls	r2, r5
 80098fa:	4b9b      	ldr	r3, [pc, #620]	; (8009b68 <PxMessagingTask+0x1664>)
 80098fc:	189b      	adds	r3, r3, r2
 80098fe:	444b      	add	r3, r9
 8009900:	79da      	ldrb	r2, [r3, #7]
 8009902:	0212      	lsls	r2, r2, #8
 8009904:	7a19      	ldrb	r1, [r3, #8]
 8009906:	0409      	lsls	r1, r1, #16
 8009908:	1852      	adds	r2, r2, r1
 800990a:	7999      	ldrb	r1, [r3, #6]
 800990c:	1852      	adds	r2, r2, r1
 800990e:	7a5b      	ldrb	r3, [r3, #9]
 8009910:	061b      	lsls	r3, r3, #24
 8009912:	18d2      	adds	r2, r2, r3
 8009914:	2300      	movs	r3, #0
 8009916:	4995      	ldr	r1, [pc, #596]	; (8009b6c <PxMessagingTask+0x1668>)
 8009918:	600a      	str	r2, [r1, #0]
 800991a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800991c:	0021      	movs	r1, r4
 800991e:	2003      	movs	r0, #3
 8009920:	f007 fe2e 	bl	8011580 <HAL_FLASH_Program>
 8009924:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 8009926:	e789      	b.n	800983c <PxMessagingTask+0x1338>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 8009928:	4b8e      	ldr	r3, [pc, #568]	; (8009b64 <PxMessagingTask+0x1660>)
 800992a:	2215      	movs	r2, #21
 800992c:	701a      	strb	r2, [r3, #0]
 800992e:	e600      	b.n	8009532 <PxMessagingTask+0x102e>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 8009930:	4b8d      	ldr	r3, [pc, #564]	; (8009b68 <PxMessagingTask+0x1664>)
 8009932:	199b      	adds	r3, r3, r6
 8009934:	5d1a      	ldrb	r2, [r3, r4]
 8009936:	4b8b      	ldr	r3, [pc, #556]	; (8009b64 <PxMessagingTask+0x1660>)
 8009938:	701a      	strb	r2, [r3, #0]
							break;
 800993a:	2300      	movs	r3, #0
 800993c:	4699      	mov	r9, r3
 800993e:	f7fe fe4d 	bl	80085dc <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 8009942:	9a05      	ldr	r2, [sp, #20]
 8009944:	3a01      	subs	r2, #1
 8009946:	b292      	uxth	r2, r2
 8009948:	1c61      	adds	r1, r4, #1
 800994a:	4451      	add	r1, sl
 800994c:	4b86      	ldr	r3, [pc, #536]	; (8009b68 <PxMessagingTask+0x1664>)
 800994e:	18c9      	adds	r1, r1, r3
 8009950:	199b      	adds	r3, r3, r6
 8009952:	5d18      	ldrb	r0, [r3, r4]
 8009954:	230a      	movs	r3, #10
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	f004 fb7c 	bl	800e054 <writePxMutex>
							break;
 800995c:	2300      	movs	r3, #0
 800995e:	4699      	mov	r9, r3
 8009960:	f7fe fe3c 	bl	80085dc <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 8009964:	4a80      	ldr	r2, [pc, #512]	; (8009b68 <PxMessagingTask+0x1664>)
 8009966:	1992      	adds	r2, r2, r6
 8009968:	5d12      	ldrb	r2, [r2, r4]
 800996a:	2a01      	cmp	r2, #1
 800996c:	d06a      	beq.n	8009a44 <PxMessagingTask+0x1540>
 800996e:	2a00      	cmp	r2, #0
 8009970:	d040      	beq.n	80099f4 <PxMessagingTask+0x14f0>
 8009972:	2a02      	cmp	r2, #2
 8009974:	d100      	bne.n	8009978 <PxMessagingTask+0x1474>
 8009976:	e08d      	b.n	8009a94 <PxMessagingTask+0x1590>
							ADCPort =cMessage[port - 1][shift];
 8009978:	4b7b      	ldr	r3, [pc, #492]	; (8009b68 <PxMessagingTask+0x1664>)
 800997a:	199b      	adds	r3, r3, r6
 800997c:	5d18      	ldrb	r0, [r3, r4]
 800997e:	4a7c      	ldr	r2, [pc, #496]	; (8009b70 <PxMessagingTask+0x166c>)
 8009980:	8010      	strh	r0, [r2, #0]
							ADCSide =cMessage[port - 1][shift + 1];
 8009982:	191b      	adds	r3, r3, r4
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	4a7b      	ldr	r2, [pc, #492]	; (8009b74 <PxMessagingTask+0x1670>)
 8009988:	8013      	strh	r3, [r2, #0]
							if(0 == ADCSide){
 800998a:	2b00      	cmp	r3, #0
 800998c:	d000      	beq.n	8009990 <PxMessagingTask+0x148c>
 800998e:	e093      	b.n	8009ab8 <PxMessagingTask+0x15b4>
								ADCSelectChannel(ADCPort,"top");
 8009990:	4f79      	ldr	r7, [pc, #484]	; (8009b78 <PxMessagingTask+0x1674>)
 8009992:	0039      	movs	r1, r7
 8009994:	f003 facc 	bl	800cf30 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"top",&ADCValue);
 8009998:	4b75      	ldr	r3, [pc, #468]	; (8009b70 <PxMessagingTask+0x166c>)
 800999a:	7818      	ldrb	r0, [r3, #0]
 800999c:	4a77      	ldr	r2, [pc, #476]	; (8009b7c <PxMessagingTask+0x1678>)
 800999e:	0039      	movs	r1, r7
 80099a0:	f003 faf8 	bl	800cf94 <ReadADCChannel>
							ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 80099a4:	4976      	ldr	r1, [pc, #472]	; (8009b80 <PxMessagingTask+0x167c>)
 80099a6:	4877      	ldr	r0, [pc, #476]	; (8009b84 <PxMessagingTask+0x1680>)
 80099a8:	f003 f922 	bl	800cbf0 <ReadTempAndVref>
							ADCPort =cMessage[port - 1][shift];
 80099ac:	4f6e      	ldr	r7, [pc, #440]	; (8009b68 <PxMessagingTask+0x1664>)
 80099ae:	19bf      	adds	r7, r7, r6
 80099b0:	5d38      	ldrb	r0, [r7, r4]
 80099b2:	4b6f      	ldr	r3, [pc, #444]	; (8009b70 <PxMessagingTask+0x166c>)
 80099b4:	8018      	strh	r0, [r3, #0]
							GetReadPrecentage(ADCPort,&ADCPercentage);
 80099b6:	4974      	ldr	r1, [pc, #464]	; (8009b88 <PxMessagingTask+0x1684>)
 80099b8:	f003 f9d8 	bl	800cd6c <GetReadPrecentage>
							MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 80099bc:	193c      	adds	r4, r7, r4
 80099be:	79a3      	ldrb	r3, [r4, #6]
 80099c0:	021b      	lsls	r3, r3, #8
 80099c2:	79e2      	ldrb	r2, [r4, #7]
 80099c4:	0412      	lsls	r2, r2, #16
 80099c6:	189b      	adds	r3, r3, r2
 80099c8:	7962      	ldrb	r2, [r4, #5]
 80099ca:	189b      	adds	r3, r3, r2
 80099cc:	7a22      	ldrb	r2, [r4, #8]
 80099ce:	0612      	lsls	r2, r2, #24
 80099d0:	189b      	adds	r3, r3, r2
 80099d2:	4a6e      	ldr	r2, [pc, #440]	; (8009b8c <PxMessagingTask+0x1688>)
 80099d4:	61d3      	str	r3, [r2, #28]
							MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 80099d6:	7aa3      	ldrb	r3, [r4, #10]
 80099d8:	021b      	lsls	r3, r3, #8
 80099da:	7ae1      	ldrb	r1, [r4, #11]
 80099dc:	0409      	lsls	r1, r1, #16
 80099de:	185b      	adds	r3, r3, r1
 80099e0:	7a61      	ldrb	r1, [r4, #9]
 80099e2:	185b      	adds	r3, r3, r1
 80099e4:	7b21      	ldrb	r1, [r4, #12]
 80099e6:	0609      	lsls	r1, r1, #24
 80099e8:	185b      	adds	r3, r3, r1
 80099ea:	6213      	str	r3, [r2, #32]
							break;
 80099ec:	2300      	movs	r3, #0
 80099ee:	4699      	mov	r9, r3
 80099f0:	f7fe fdf4 	bl	80085dc <PxMessagingTask+0xd8>
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 80099f4:	2138      	movs	r1, #56	; 0x38
 80099f6:	4369      	muls	r1, r5
 80099f8:	4a5b      	ldr	r2, [pc, #364]	; (8009b68 <PxMessagingTask+0x1664>)
 80099fa:	1852      	adds	r2, r2, r1
 80099fc:	1913      	adds	r3, r2, r4
 80099fe:	789a      	ldrb	r2, [r3, #2]
 8009a00:	0212      	lsls	r2, r2, #8
 8009a02:	78d9      	ldrb	r1, [r3, #3]
 8009a04:	0409      	lsls	r1, r1, #16
 8009a06:	1852      	adds	r2, r2, r1
 8009a08:	7859      	ldrb	r1, [r3, #1]
 8009a0a:	1852      	adds	r2, r2, r1
 8009a0c:	7919      	ldrb	r1, [r3, #4]
 8009a0e:	0609      	lsls	r1, r1, #24
 8009a10:	1852      	adds	r2, r2, r1
 8009a12:	495e      	ldr	r1, [pc, #376]	; (8009b8c <PxMessagingTask+0x1688>)
 8009a14:	600a      	str	r2, [r1, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009a16:	799a      	ldrb	r2, [r3, #6]
 8009a18:	0212      	lsls	r2, r2, #8
 8009a1a:	79d8      	ldrb	r0, [r3, #7]
 8009a1c:	0400      	lsls	r0, r0, #16
 8009a1e:	1812      	adds	r2, r2, r0
 8009a20:	7958      	ldrb	r0, [r3, #5]
 8009a22:	1812      	adds	r2, r2, r0
 8009a24:	7a18      	ldrb	r0, [r3, #8]
 8009a26:	0600      	lsls	r0, r0, #24
 8009a28:	1812      	adds	r2, r2, r0
 8009a2a:	604a      	str	r2, [r1, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009a2c:	7a9a      	ldrb	r2, [r3, #10]
 8009a2e:	0212      	lsls	r2, r2, #8
 8009a30:	7ad8      	ldrb	r0, [r3, #11]
 8009a32:	0400      	lsls	r0, r0, #16
 8009a34:	1812      	adds	r2, r2, r0
 8009a36:	7a58      	ldrb	r0, [r3, #9]
 8009a38:	1812      	adds	r2, r2, r0
 8009a3a:	7b1b      	ldrb	r3, [r3, #12]
 8009a3c:	061b      	lsls	r3, r3, #24
 8009a3e:	18d3      	adds	r3, r2, r3
 8009a40:	608b      	str	r3, [r1, #8]
									break;
 8009a42:	e799      	b.n	8009978 <PxMessagingTask+0x1474>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009a44:	2238      	movs	r2, #56	; 0x38
 8009a46:	436a      	muls	r2, r5
 8009a48:	4b47      	ldr	r3, [pc, #284]	; (8009b68 <PxMessagingTask+0x1664>)
 8009a4a:	189b      	adds	r3, r3, r2
 8009a4c:	191b      	adds	r3, r3, r4
 8009a4e:	789a      	ldrb	r2, [r3, #2]
 8009a50:	0212      	lsls	r2, r2, #8
 8009a52:	78d9      	ldrb	r1, [r3, #3]
 8009a54:	0409      	lsls	r1, r1, #16
 8009a56:	1852      	adds	r2, r2, r1
 8009a58:	7859      	ldrb	r1, [r3, #1]
 8009a5a:	1852      	adds	r2, r2, r1
 8009a5c:	7919      	ldrb	r1, [r3, #4]
 8009a5e:	0609      	lsls	r1, r1, #24
 8009a60:	1852      	adds	r2, r2, r1
 8009a62:	494a      	ldr	r1, [pc, #296]	; (8009b8c <PxMessagingTask+0x1688>)
 8009a64:	60ca      	str	r2, [r1, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 8009a66:	799a      	ldrb	r2, [r3, #6]
 8009a68:	0212      	lsls	r2, r2, #8
 8009a6a:	79d8      	ldrb	r0, [r3, #7]
 8009a6c:	0400      	lsls	r0, r0, #16
 8009a6e:	1812      	adds	r2, r2, r0
 8009a70:	7958      	ldrb	r0, [r3, #5]
 8009a72:	1812      	adds	r2, r2, r0
 8009a74:	7a18      	ldrb	r0, [r3, #8]
 8009a76:	0600      	lsls	r0, r0, #24
 8009a78:	1812      	adds	r2, r2, r0
 8009a7a:	610a      	str	r2, [r1, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 8009a7c:	7a9a      	ldrb	r2, [r3, #10]
 8009a7e:	0212      	lsls	r2, r2, #8
 8009a80:	7ad8      	ldrb	r0, [r3, #11]
 8009a82:	0400      	lsls	r0, r0, #16
 8009a84:	1812      	adds	r2, r2, r0
 8009a86:	7a58      	ldrb	r0, [r3, #9]
 8009a88:	1812      	adds	r2, r2, r0
 8009a8a:	7b1b      	ldrb	r3, [r3, #12]
 8009a8c:	061b      	lsls	r3, r3, #24
 8009a8e:	18d3      	adds	r3, r2, r3
 8009a90:	614b      	str	r3, [r1, #20]
									break;
 8009a92:	e771      	b.n	8009978 <PxMessagingTask+0x1474>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 8009a94:	2138      	movs	r1, #56	; 0x38
 8009a96:	4369      	muls	r1, r5
 8009a98:	4a33      	ldr	r2, [pc, #204]	; (8009b68 <PxMessagingTask+0x1664>)
 8009a9a:	1852      	adds	r2, r2, r1
 8009a9c:	1912      	adds	r2, r2, r4
 8009a9e:	7893      	ldrb	r3, [r2, #2]
 8009aa0:	021b      	lsls	r3, r3, #8
 8009aa2:	78d1      	ldrb	r1, [r2, #3]
 8009aa4:	0409      	lsls	r1, r1, #16
 8009aa6:	185b      	adds	r3, r3, r1
 8009aa8:	7851      	ldrb	r1, [r2, #1]
 8009aaa:	185b      	adds	r3, r3, r1
 8009aac:	7912      	ldrb	r2, [r2, #4]
 8009aae:	0612      	lsls	r2, r2, #24
 8009ab0:	189b      	adds	r3, r3, r2
 8009ab2:	4a36      	ldr	r2, [pc, #216]	; (8009b8c <PxMessagingTask+0x1688>)
 8009ab4:	6193      	str	r3, [r2, #24]
 8009ab6:	e75f      	b.n	8009978 <PxMessagingTask+0x1474>
							else if(1 == ADCSide){
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d000      	beq.n	8009abe <PxMessagingTask+0x15ba>
 8009abc:	e772      	b.n	80099a4 <PxMessagingTask+0x14a0>
								ADCSelectChannel(ADCPort,"bottom");
 8009abe:	4f34      	ldr	r7, [pc, #208]	; (8009b90 <PxMessagingTask+0x168c>)
 8009ac0:	0039      	movs	r1, r7
 8009ac2:	f003 fa35 	bl	800cf30 <ADCSelectChannel>
								ReadADCChannel(ADCPort,"bottom",&ADCValue);
 8009ac6:	4b2a      	ldr	r3, [pc, #168]	; (8009b70 <PxMessagingTask+0x166c>)
 8009ac8:	7818      	ldrb	r0, [r3, #0]
 8009aca:	4a2c      	ldr	r2, [pc, #176]	; (8009b7c <PxMessagingTask+0x1678>)
 8009acc:	0039      	movs	r1, r7
 8009ace:	f003 fa61 	bl	800cf94 <ReadADCChannel>
 8009ad2:	e767      	b.n	80099a4 <PxMessagingTask+0x14a0>
							ACK_FLAG =1;
 8009ad4:	4b2f      	ldr	r3, [pc, #188]	; (8009b94 <PxMessagingTask+0x1690>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	701a      	strb	r2, [r3, #0]
							break;
 8009ada:	2300      	movs	r3, #0
 8009adc:	4699      	mov	r9, r3
 8009ade:	f7fe fd7d 	bl	80085dc <PxMessagingTask+0xd8>
							rejected_FLAG =1;
 8009ae2:	4b2d      	ldr	r3, [pc, #180]	; (8009b98 <PxMessagingTask+0x1694>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	701a      	strb	r2, [r3, #0]
							break;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4699      	mov	r9, r3
 8009aec:	f7fe fd76 	bl	80085dc <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 8009af0:	9400      	str	r4, [sp, #0]
 8009af2:	465b      	mov	r3, fp
 8009af4:	9a04      	ldr	r2, [sp, #16]
 8009af6:	9908      	ldr	r1, [sp, #32]
 8009af8:	0038      	movs	r0, r7
 8009afa:	f7fe fd01 	bl	8008500 <User_MessagingParser>
 8009afe:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 8009b00:	2801      	cmp	r0, #1
 8009b02:	d001      	beq.n	8009b08 <PxMessagingTask+0x1604>
 8009b04:	f7fe fd6a 	bl	80085dc <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 8009b08:	9400      	str	r4, [sp, #0]
 8009b0a:	465b      	mov	r3, fp
 8009b0c:	9a04      	ldr	r2, [sp, #16]
 8009b0e:	9908      	ldr	r1, [sp, #32]
 8009b10:	0038      	movs	r0, r7
 8009b12:	f000 fe11 	bl	800a738 <Module_MessagingTask>
 8009b16:	4681      	mov	r9, r0
 8009b18:	f7fe fd5b 	bl	80085d2 <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	4699      	mov	r9, r3
 8009b20:	f7fe fd57 	bl	80085d2 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 8009b24:	2300      	movs	r3, #0
 8009b26:	4699      	mov	r9, r3
 8009b28:	f7fe fd53 	bl	80085d2 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4699      	mov	r9, r3
 8009b30:	f7fe fd4f 	bl	80085d2 <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 8009b34:	2200      	movs	r2, #0
 8009b36:	2100      	movs	r1, #0
 8009b38:	9804      	ldr	r0, [sp, #16]
 8009b3a:	f7fe fb21 	bl	8008180 <SendMessageToModule>
			result =BOS_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4699      	mov	r9, r3
 8009b42:	f7fe fd4b 	bl	80085dc <PxMessagingTask+0xd8>
					switch(code){
 8009b46:	2300      	movs	r3, #0
 8009b48:	4699      	mov	r9, r3
 8009b4a:	f7fe fd47 	bl	80085dc <PxMessagingTask+0xd8>
 8009b4e:	9207      	str	r2, [sp, #28]
 8009b50:	2300      	movs	r3, #0
 8009b52:	4699      	mov	r9, r3
 8009b54:	f7fe fd42 	bl	80085dc <PxMessagingTask+0xd8>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4699      	mov	r9, r3
 8009b5c:	f7fe fd3e 	bl	80085dc <PxMessagingTask+0xd8>
 8009b60:	0000ffff 	.word	0x0000ffff
 8009b64:	20001830 	.word	0x20001830
 8009b68:	20001424 	.word	0x20001424
 8009b6c:	20001828 	.word	0x20001828
 8009b70:	20002014 	.word	0x20002014
 8009b74:	20002016 	.word	0x20002016
 8009b78:	08019580 	.word	0x08019580
 8009b7c:	20002018 	.word	0x20002018
 8009b80:	20002024 	.word	0x20002024
 8009b84:	20002020 	.word	0x20002020
 8009b88:	20002010 	.word	0x20002010
 8009b8c:	20002028 	.word	0x20002028
 8009b90:	08019584 	.word	0x08019584
 8009b94:	20000ae4 	.word	0x20000ae4
 8009b98:	20001824 	.word	0x20001824
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 8009b9c:	455b      	cmp	r3, fp
 8009b9e:	d003      	beq.n	8009ba8 <PxMessagingTask+0x16a4>
 8009ba0:	2f10      	cmp	r7, #16
 8009ba2:	d001      	beq.n	8009ba8 <PxMessagingTask+0x16a4>
 8009ba4:	f7fe fd77 	bl	8008696 <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009ba8:	465b      	mov	r3, fp
 8009baa:	2bff      	cmp	r3, #255	; 0xff
 8009bac:	d101      	bne.n	8009bb2 <PxMessagingTask+0x16ae>
 8009bae:	f7fe fce1 	bl	8008574 <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009bb2:	2bfe      	cmp	r3, #254	; 0xfe
 8009bb4:	d001      	beq.n	8009bba <PxMessagingTask+0x16b6>
 8009bb6:	f7fe fd09 	bl	80085cc <PxMessagingTask+0xc8>
 8009bba:	4b2b      	ldr	r3, [pc, #172]	; (8009c68 <PxMessagingTask+0x1764>)
 8009bbc:	5d5a      	ldrb	r2, [r3, r5]
 8009bbe:	4b2b      	ldr	r3, [pc, #172]	; (8009c6c <PxMessagingTask+0x1768>)
 8009bc0:	199b      	adds	r3, r3, r6
 8009bc2:	189b      	adds	r3, r3, r2
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	4a29      	ldr	r2, [pc, #164]	; (8009c70 <PxMessagingTask+0x176c>)
 8009bca:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 8009bcc:	2103      	movs	r1, #3
 8009bce:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d101      	bne.n	8009bd8 <PxMessagingTask+0x16d4>
 8009bd4:	f7fe fcfd 	bl	80085d2 <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 8009bd8:	4a25      	ldr	r2, [pc, #148]	; (8009c70 <PxMessagingTask+0x176c>)
 8009bda:	7013      	strb	r3, [r2, #0]
 8009bdc:	4a25      	ldr	r2, [pc, #148]	; (8009c74 <PxMessagingTask+0x1770>)
 8009bde:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 8009be0:	9908      	ldr	r1, [sp, #32]
 8009be2:	20fe      	movs	r0, #254	; 0xfe
 8009be4:	f7fe fa84 	bl	80080f0 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 8009be8:	4b1f      	ldr	r3, [pc, #124]	; (8009c68 <PxMessagingTask+0x1764>)
 8009bea:	5d59      	ldrb	r1, [r3, r5]
 8009bec:	4b1f      	ldr	r3, [pc, #124]	; (8009c6c <PxMessagingTask+0x1768>)
 8009bee:	199b      	adds	r3, r3, r6
 8009bf0:	185a      	adds	r2, r3, r1
 8009bf2:	3a01      	subs	r2, #1
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009bf8:	1e8a      	subs	r2, r1, #2
 8009bfa:	5c9c      	ldrb	r4, [r3, r2]
 8009bfc:	9407      	str	r4, [sp, #28]
					for(i =0; i < temp; i++){
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	d02e      	beq.n	8009c60 <PxMessagingTask+0x175c>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009c02:	1b13      	subs	r3, r2, r4
 8009c04:	469c      	mov	ip, r3
 8009c06:	4b1c      	ldr	r3, [pc, #112]	; (8009c78 <PxMessagingTask+0x1774>)
 8009c08:	7818      	ldrb	r0, [r3, #0]
 8009c0a:	4b18      	ldr	r3, [pc, #96]	; (8009c6c <PxMessagingTask+0x1768>)
 8009c0c:	199b      	adds	r3, r3, r6
 8009c0e:	4662      	mov	r2, ip
 8009c10:	5c9b      	ldrb	r3, [r3, r2]
 8009c12:	4283      	cmp	r3, r0
 8009c14:	d011      	beq.n	8009c3a <PxMessagingTask+0x1736>
 8009c16:	4653      	mov	r3, sl
 8009c18:	3301      	adds	r3, #1
 8009c1a:	4463      	add	r3, ip
 8009c1c:	4a13      	ldr	r2, [pc, #76]	; (8009c6c <PxMessagingTask+0x1768>)
 8009c1e:	189b      	adds	r3, r3, r2
 8009c20:	3201      	adds	r2, #1
 8009c22:	4452      	add	r2, sl
 8009c24:	3c01      	subs	r4, #1
 8009c26:	b2e4      	uxtb	r4, r4
 8009c28:	1912      	adds	r2, r2, r4
 8009c2a:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d017      	beq.n	8009c60 <PxMessagingTask+0x175c>
 8009c30:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 8009c32:	1e5c      	subs	r4, r3, #1
 8009c34:	7824      	ldrb	r4, [r4, #0]
 8009c36:	4284      	cmp	r4, r0
 8009c38:	d1f8      	bne.n	8009c2c <PxMessagingTask+0x1728>
				shift +=4;
 8009c3a:	9c05      	ldr	r4, [sp, #20]
 8009c3c:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 8009c3e:	1b0a      	subs	r2, r1, r4
 8009c40:	b2d3      	uxtb	r3, r2
 8009c42:	9305      	str	r3, [sp, #20]
 8009c44:	f7fe fcba 	bl	80085bc <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 8009c48:	2338      	movs	r3, #56	; 0x38
 8009c4a:	436b      	muls	r3, r5
 8009c4c:	4a07      	ldr	r2, [pc, #28]	; (8009c6c <PxMessagingTask+0x1768>)
 8009c4e:	18d2      	adds	r2, r2, r3
 8009c50:	464b      	mov	r3, r9
 8009c52:	5cd3      	ldrb	r3, [r2, r3]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	0098      	lsls	r0, r3, #2
 8009c58:	4908      	ldr	r1, [pc, #32]	; (8009c7c <PxMessagingTask+0x1778>)
 8009c5a:	5841      	ldr	r1, [r0, r1]
 8009c5c:	5dd2      	ldrb	r2, [r2, r7]
 8009c5e:	e45e      	b.n	800951e <PxMessagingTask+0x101a>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 8009c60:	2366      	movs	r3, #102	; 0x66
 8009c62:	4699      	mov	r9, r3
 8009c64:	f7fe fcba 	bl	80085dc <PxMessagingTask+0xd8>
 8009c68:	2000164c 	.word	0x2000164c
 8009c6c:	20001424 	.word	0x20001424
 8009c70:	20002050 	.word	0x20002050
 8009c74:	200013d0 	.word	0x200013d0
 8009c78:	20001792 	.word	0x20001792
 8009c7c:	20006994 	.word	0x20006994

08009c80 <StreamMemsToPort>:
	}
	return status;
}

static Module_Status StreamMemsToPort(uint8_t port, uint8_t module, uint32_t period, uint32_t timeout, SampleMemsToPort function)
{
 8009c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c82:	b085      	sub	sp, #20
 8009c84:	9001      	str	r0, [sp, #4]
 8009c86:	9102      	str	r1, [sp, #8]
 8009c88:	0016      	movs	r6, r2
 8009c8a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	Module_Status status = H0AR9_OK;


	if (period < MIN_MEMS_PERIOD_MS)
 8009c8c:	2a63      	cmp	r2, #99	; 0x63
 8009c8e:	d930      	bls.n	8009cf2 <StreamMemsToPort+0x72>
		return H0AR9_ERR_WrongParams;
	if (port == 0)
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d030      	beq.n	8009cf6 <StreamMemsToPort+0x76>
		return H0AR9_ERR_WrongParams;
	if (port == PcPort) // Check if CLI is not enabled at that port!
 8009c94:	4a1a      	ldr	r2, [pc, #104]	; (8009d00 <StreamMemsToPort+0x80>)
 8009c96:	7812      	ldrb	r2, [r2, #0]
 8009c98:	4282      	cmp	r2, r0
 8009c9a:	d02e      	beq.n	8009cfa <StreamMemsToPort+0x7a>
 8009c9c:	9603      	str	r6, [sp, #12]
 8009c9e:	429e      	cmp	r6, r3
 8009ca0:	d200      	bcs.n	8009ca4 <StreamMemsToPort+0x24>
 8009ca2:	9303      	str	r3, [sp, #12]
		return H0AR9_ERR_BUSY;

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 8009ca4:	0031      	movs	r1, r6
 8009ca6:	9803      	ldr	r0, [sp, #12]
 8009ca8:	f7f6 fa52 	bl	8000150 <__udivsi3>
 8009cac:	0005      	movs	r5, r0
	stopStream = false;
 8009cae:	4b15      	ldr	r3, [pc, #84]	; (8009d04 <StreamMemsToPort+0x84>)
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]

	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		function(port, module);

		vTaskDelay(pdMS_TO_TICKS(period));
 8009cb4:	0170      	lsls	r0, r6, #5
 8009cb6:	1b80      	subs	r0, r0, r6
 8009cb8:	0080      	lsls	r0, r0, #2
 8009cba:	1980      	adds	r0, r0, r6
 8009cbc:	00c0      	lsls	r0, r0, #3
 8009cbe:	21fa      	movs	r1, #250	; 0xfa
 8009cc0:	0089      	lsls	r1, r1, #2
 8009cc2:	f7f6 fa45 	bl	8000150 <__udivsi3>
 8009cc6:	0006      	movs	r6, r0
		if (stopStream) {
 8009cc8:	4f0e      	ldr	r7, [pc, #56]	; (8009d04 <StreamMemsToPort+0x84>)
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009cca:	2d00      	cmp	r5, #0
 8009ccc:	dd0c      	ble.n	8009ce8 <StreamMemsToPort+0x68>
		function(port, module);
 8009cce:	9902      	ldr	r1, [sp, #8]
 8009cd0:	9801      	ldr	r0, [sp, #4]
 8009cd2:	47a0      	blx	r4
		vTaskDelay(pdMS_TO_TICKS(period));
 8009cd4:	0030      	movs	r0, r6
 8009cd6:	f005 fb5d 	bl	800f394 <vTaskDelay>
 8009cda:	3d01      	subs	r5, #1
		if (stopStream) {
 8009cdc:	783b      	ldrb	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d0f3      	beq.n	8009cca <StreamMemsToPort+0x4a>
			status = H0AR9_ERR_TERMINATED;
 8009ce2:	200a      	movs	r0, #10
			break;
		}
	}
	return status;
}
 8009ce4:	b005      	add	sp, #20
 8009ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	3301      	adds	r3, #1
 8009cec:	d0ef      	beq.n	8009cce <StreamMemsToPort+0x4e>
	Module_Status status = H0AR9_OK;
 8009cee:	2000      	movs	r0, #0
 8009cf0:	e7f8      	b.n	8009ce4 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 8009cf2:	200b      	movs	r0, #11
 8009cf4:	e7f6      	b.n	8009ce4 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 8009cf6:	200b      	movs	r0, #11
 8009cf8:	e7f4      	b.n	8009ce4 <StreamMemsToPort+0x64>
		return H0AR9_ERR_BUSY;
 8009cfa:	2007      	movs	r0, #7
 8009cfc:	e7f2      	b.n	8009ce4 <StreamMemsToPort+0x64>
 8009cfe:	46c0      	nop			; (mov r8, r8)
 8009d00:	2000118a 	.word	0x2000118a
 8009d04:	200021fa 	.word	0x200021fa

08009d08 <StreamMemsToCLI>:

static Module_Status StreamMemsToCLI(uint32_t period, uint32_t timeout, SampleMemsToString function)
{
 8009d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0a:	46de      	mov	lr, fp
 8009d0c:	4657      	mov	r7, sl
 8009d0e:	464e      	mov	r6, r9
 8009d10:	4645      	mov	r5, r8
 8009d12:	b5e0      	push	{r5, r6, r7, lr}
 8009d14:	b087      	sub	sp, #28
 8009d16:	0004      	movs	r4, r0
 8009d18:	4691      	mov	r9, r2
	Module_Status status = H0AR9_OK;
	int8_t *pcOutputString = NULL;

	if (period < MIN_MEMS_PERIOD_MS)
 8009d1a:	2863      	cmp	r0, #99	; 0x63
 8009d1c:	d800      	bhi.n	8009d20 <StreamMemsToCLI+0x18>
 8009d1e:	e081      	b.n	8009e24 <StreamMemsToCLI+0x11c>
 8009d20:	9004      	str	r0, [sp, #16]
 8009d22:	4288      	cmp	r0, r1
 8009d24:	d200      	bcs.n	8009d28 <StreamMemsToCLI+0x20>
 8009d26:	9104      	str	r1, [sp, #16]
	// TODO: Check if CLI is enable or not

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 8009d28:	0021      	movs	r1, r4
 8009d2a:	9804      	ldr	r0, [sp, #16]
 8009d2c:	f7f6 fa10 	bl	8000150 <__udivsi3>
 8009d30:	0006      	movs	r6, r0
	stopStream = false;
 8009d32:	4b3d      	ldr	r3, [pc, #244]	; (8009e28 <StreamMemsToCLI+0x120>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	701a      	strb	r2, [r3, #0]
	long numDeltaDelay =  period / DELTA_SLEEP_MS;
 8009d38:	2164      	movs	r1, #100	; 0x64
 8009d3a:	0020      	movs	r0, r4
 8009d3c:	f7f6 fa08 	bl	8000150 <__udivsi3>
 8009d40:	9003      	str	r0, [sp, #12]
	unsigned lastDelayMS = period % DELTA_SLEEP_MS;
 8009d42:	2164      	movs	r1, #100	; 0x64
 8009d44:	0020      	movs	r0, r4
 8009d46:	f7f6 fa89 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 8009d4a:	0148      	lsls	r0, r1, #5
 8009d4c:	1a40      	subs	r0, r0, r1
 8009d4e:	0080      	lsls	r0, r0, #2
 8009d50:	1840      	adds	r0, r0, r1
 8009d52:	00c0      	lsls	r0, r0, #3
 8009d54:	21fa      	movs	r1, #250	; 0xfa
 8009d56:	0089      	lsls	r1, r1, #2
 8009d58:	f7f6 f9fa 	bl	8000150 <__udivsi3>
 8009d5c:	9005      	str	r0, [sp, #20]
	int8_t *pcOutputString = NULL;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	9302      	str	r3, [sp, #8]
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
		function((char *)pcOutputString, 100);


		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 8009d62:	4b32      	ldr	r3, [pc, #200]	; (8009e2c <StreamMemsToCLI+0x124>)
 8009d64:	469a      	mov	sl, r3
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 8009d66:	4698      	mov	r8, r3
 8009d68:	4f31      	ldr	r7, [pc, #196]	; (8009e30 <StreamMemsToCLI+0x128>)
 8009d6a:	46bb      	mov	fp, r7
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009d6c:	2e00      	cmp	r6, #0
 8009d6e:	dd55      	ble.n	8009e1c <StreamMemsToCLI+0x114>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8009d70:	f004 fc08 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8009d74:	0004      	movs	r4, r0
 8009d76:	9002      	str	r0, [sp, #8]
		function((char *)pcOutputString, 100);
 8009d78:	2164      	movs	r1, #100	; 0x64
 8009d7a:	47c8      	blx	r9
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 8009d7c:	0020      	movs	r0, r4
 8009d7e:	f7f6 f9cb 	bl	8000118 <strlen>
 8009d82:	23fa      	movs	r3, #250	; 0xfa
 8009d84:	b282      	uxth	r2, r0
 8009d86:	4651      	mov	r1, sl
 8009d88:	7808      	ldrb	r0, [r1, #0]
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	4249      	negs	r1, r1
 8009d8e:	9100      	str	r1, [sp, #0]
 8009d90:	005b      	lsls	r3, r3, #1
 8009d92:	0021      	movs	r1, r4
 8009d94:	f004 f95e 	bl	800e054 <writePxMutex>
 8009d98:	9d03      	ldr	r5, [sp, #12]
	while (numDeltaDelay-- > 0) {
 8009d9a:	2d00      	cmp	r5, #0
 8009d9c:	dd39      	ble.n	8009e12 <StreamMemsToCLI+0x10a>
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 8009d9e:	2064      	movs	r0, #100	; 0x64
 8009da0:	f005 faf8 	bl	800f394 <vTaskDelay>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 8009da4:	4643      	mov	r3, r8
 8009da6:	781c      	ldrb	r4, [r3, #0]
 8009da8:	3c01      	subs	r4, #1
 8009daa:	0063      	lsls	r3, r4, #1
 8009dac:	191b      	adds	r3, r3, r4
 8009dae:	019b      	lsls	r3, r3, #6
 8009db0:	5ddb      	ldrb	r3, [r3, r7]
 8009db2:	2b0d      	cmp	r3, #13
 8009db4:	d011      	beq.n	8009dda <StreamMemsToCLI+0xd2>
 8009db6:	0061      	lsls	r1, r4, #1
 8009db8:	1909      	adds	r1, r1, r4
 8009dba:	0189      	lsls	r1, r1, #6
 8009dbc:	4459      	add	r1, fp
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	0018      	movs	r0, r3
 8009dc2:	5cca      	ldrb	r2, [r1, r3]
 8009dc4:	2a0d      	cmp	r2, #13
 8009dc6:	d009      	beq.n	8009ddc <StreamMemsToCLI+0xd4>
 8009dc8:	3301      	adds	r3, #1
		for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 8009dca:	2bc0      	cmp	r3, #192	; 0xc0
 8009dcc:	d1f8      	bne.n	8009dc0 <StreamMemsToCLI+0xb8>
 8009dce:	3d01      	subs	r5, #1
		if (stopStream)
 8009dd0:	4b15      	ldr	r3, [pc, #84]	; (8009e28 <StreamMemsToCLI+0x120>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0e0      	beq.n	8009d9a <StreamMemsToCLI+0x92>
 8009dd8:	e007      	b.n	8009dea <StreamMemsToCLI+0xe2>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 8009dda:	2000      	movs	r0, #0
				UARTRxBuf[PcPort-1][chr] = 0;
 8009ddc:	0063      	lsls	r3, r4, #1
 8009dde:	191b      	adds	r3, r3, r4
 8009de0:	019b      	lsls	r3, r3, #6
 8009de2:	4a13      	ldr	r2, [pc, #76]	; (8009e30 <StreamMemsToCLI+0x128>)
 8009de4:	18d3      	adds	r3, r2, r3
 8009de6:	2200      	movs	r2, #0
 8009de8:	541a      	strb	r2, [r3, r0]
		if (PollingSleepCLISafe(period) != H0AR9_OK)
			break;
	}

	memset((char *) pcOutputString, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8009dea:	2299      	movs	r2, #153	; 0x99
 8009dec:	0092      	lsls	r2, r2, #2
 8009dee:	2100      	movs	r1, #0
 8009df0:	9c02      	ldr	r4, [sp, #8]
 8009df2:	0020      	movs	r0, r4
 8009df4:	f00a f878 	bl	8013ee8 <memset>
  sprintf((char *)pcOutputString, "\r\n");
 8009df8:	2203      	movs	r2, #3
 8009dfa:	490e      	ldr	r1, [pc, #56]	; (8009e34 <StreamMemsToCLI+0x12c>)
 8009dfc:	0020      	movs	r0, r4
 8009dfe:	f00a f86a 	bl	8013ed6 <memcpy>
	return status;
 8009e02:	2000      	movs	r0, #0
}
 8009e04:	b007      	add	sp, #28
 8009e06:	bc3c      	pop	{r2, r3, r4, r5}
 8009e08:	4690      	mov	r8, r2
 8009e0a:	4699      	mov	r9, r3
 8009e0c:	46a2      	mov	sl, r4
 8009e0e:	46ab      	mov	fp, r5
 8009e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009e12:	3e01      	subs	r6, #1
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 8009e14:	9805      	ldr	r0, [sp, #20]
 8009e16:	f005 fabd 	bl	800f394 <vTaskDelay>
 8009e1a:	e7a7      	b.n	8009d6c <StreamMemsToCLI+0x64>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 8009e1c:	9b04      	ldr	r3, [sp, #16]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	d0a6      	beq.n	8009d70 <StreamMemsToCLI+0x68>
 8009e22:	e7e2      	b.n	8009dea <StreamMemsToCLI+0xe2>
		return H0AR9_ERR_WrongParams;
 8009e24:	200b      	movs	r0, #11
 8009e26:	e7ed      	b.n	8009e04 <StreamMemsToCLI+0xfc>
 8009e28:	200021fa 	.word	0x200021fa
 8009e2c:	2000118a 	.word	0x2000118a
 8009e30:	200019f8 	.word	0x200019f8
 8009e34:	0801ab5c 	.word	0x0801ab5c

08009e38 <StopStreamCommand>:
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 8009e38:	b510      	push	{r4, lr}
	// Make sure we return something
	pcWriteBuffer[0] = '\0';
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	7003      	strb	r3, [r0, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Stopping Streaming MEMS...\r\n");
 8009e3e:	4a04      	ldr	r2, [pc, #16]	; (8009e50 <StopStreamCommand+0x18>)
 8009e40:	f00a fa4c 	bl	80142dc <snprintf>
	stopStream = true;
 8009e44:	4b03      	ldr	r3, [pc, #12]	; (8009e54 <StopStreamCommand+0x1c>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	701a      	strb	r2, [r3, #0]

	stopStreamMems();
	return pdFALSE;
}
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	bd10      	pop	{r4, pc}
 8009e4e:	46c0      	nop			; (mov r8, r8)
 8009e50:	0801b43c 	.word	0x0801b43c
 8009e54:	200021fa 	.word	0x200021fa

08009e58 <SystemClock_Config>:
{
 8009e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e5a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009e5c:	2401      	movs	r4, #1
 8009e5e:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009e60:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009e62:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 8009e64:	2310      	movs	r3, #16
 8009e66:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009e68:	2702      	movs	r7, #2
 8009e6a:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009e6c:	2680      	movs	r6, #128	; 0x80
 8009e6e:	0276      	lsls	r6, r6, #9
 8009e70:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8009e72:	2380      	movs	r3, #128	; 0x80
 8009e74:	035b      	lsls	r3, r3, #13
 8009e76:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8009e78:	2500      	movs	r5, #0
 8009e7a:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8009e7c:	a80d      	add	r0, sp, #52	; 0x34
 8009e7e:	f008 f889 	bl	8011f94 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8009e82:	2307      	movs	r3, #7
 8009e84:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e86:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e88:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009e8a:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	a809      	add	r0, sp, #36	; 0x24
 8009e90:	f008 fb42 	bl	8012518 <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 8009e94:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <SystemClock_Config+0xa8>)
 8009e96:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8009e98:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009e9a:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009e9c:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009e9e:	a802      	add	r0, sp, #8
 8009ea0:	f008 fce8 	bl	8012874 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 8009ea4:	4d17      	ldr	r5, [pc, #92]	; (8009f04 <SystemClock_Config+0xac>)
 8009ea6:	69ea      	ldr	r2, [r5, #28]
 8009ea8:	2180      	movs	r1, #128	; 0x80
 8009eaa:	0549      	lsls	r1, r1, #21
 8009eac:	430a      	orrs	r2, r1
 8009eae:	61ea      	str	r2, [r5, #28]
 8009eb0:	69eb      	ldr	r3, [r5, #28]
 8009eb2:	400b      	ands	r3, r1
 8009eb4:	9300      	str	r3, [sp, #0]
 8009eb6:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 8009eb8:	f008 f862 	bl	8011f80 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009ebc:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8009ebe:	23c0      	movs	r3, #192	; 0xc0
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8009ec4:	a802      	add	r0, sp, #8
 8009ec6:	f008 fcd5 	bl	8012874 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8009eca:	f008 fcaf 	bl	801282c <HAL_RCC_GetHCLKFreq>
 8009ece:	21fa      	movs	r1, #250	; 0xfa
 8009ed0:	0089      	lsls	r1, r1, #2
 8009ed2:	f7f6 f93d 	bl	8000150 <__udivsi3>
 8009ed6:	f006 fcbb 	bl	8010850 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8009eda:	2004      	movs	r0, #4
 8009edc:	f006 fcd4 	bl	8010888 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 8009ee0:	69ab      	ldr	r3, [r5, #24]
 8009ee2:	4323      	orrs	r3, r4
 8009ee4:	61ab      	str	r3, [r5, #24]
 8009ee6:	69ab      	ldr	r3, [r5, #24]
 8009ee8:	401c      	ands	r4, r3
 8009eea:	9401      	str	r4, [sp, #4]
 8009eec:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 8009eee:	2001      	movs	r0, #1
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4240      	negs	r0, r0
 8009ef6:	f006 fc63 	bl	80107c0 <HAL_NVIC_SetPriority>
}
 8009efa:	b01b      	add	sp, #108	; 0x6c
 8009efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009efe:	46c0      	nop			; (mov r8, r8)
 8009f00:	00040003 	.word	0x00040003
 8009f04:	40021000 	.word	0x40021000

08009f08 <RegisterModuleCLICommands>:
{
 8009f08:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &SampleCommandDefinition );
 8009f0a:	4805      	ldr	r0, [pc, #20]	; (8009f20 <RegisterModuleCLICommands+0x18>)
 8009f0c:	f004 faa4 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StreamCommandDefinition );
 8009f10:	4804      	ldr	r0, [pc, #16]	; (8009f24 <RegisterModuleCLICommands+0x1c>)
 8009f12:	f004 faa1 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StopCommandDefinition);
 8009f16:	4804      	ldr	r0, [pc, #16]	; (8009f28 <RegisterModuleCLICommands+0x20>)
 8009f18:	f004 fa9e 	bl	800e458 <FreeRTOS_CLIRegisterCommand>
}
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	46c0      	nop			; (mov r8, r8)
 8009f20:	0801b398 	.word	0x0801b398
 8009f24:	0801b45c 	.word	0x0801b45c
 8009f28:	0801b42c 	.word	0x0801b42c

08009f2c <SetupPortForRemoteBootloaderUpdate>:
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 8009f2c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 8009f2e:	f004 f86f 	bl	800e010 <GetUart>
 8009f32:	0004      	movs	r4, r0
	huart->Init.BaudRate =57600;
 8009f34:	23e1      	movs	r3, #225	; 0xe1
 8009f36:	021b      	lsls	r3, r3, #8
 8009f38:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8009f3a:	2380      	movs	r3, #128	; 0x80
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8009f40:	2380      	movs	r3, #128	; 0x80
 8009f42:	015b      	lsls	r3, r3, #5
 8009f44:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8009f46:	f009 fbd7 	bl	80136f8 <HAL_UART_Init>
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 8009f4a:	6822      	ldr	r2, [r4, #0]
 8009f4c:	6813      	ldr	r3, [r2, #0]
 8009f4e:	2120      	movs	r1, #32
 8009f50:	430b      	orrs	r3, r1
 8009f52:	6013      	str	r3, [r2, #0]
}
 8009f54:	bd10      	pop	{r4, pc}
	...

08009f58 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8009f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	0007      	movs	r7, r0
 8009f5e:	000e      	movs	r6, r1
 8009f60:	0015      	movs	r5, r2
 8009f62:	001c      	movs	r4, r3
	myOutport =FindRoute(myID,dst);
 8009f64:	4b2b      	ldr	r3, [pc, #172]	; (800a014 <remoteBootloaderUpdate+0xbc>)
 8009f66:	7818      	ldrb	r0, [r3, #0]
 8009f68:	f7f9 fe08 	bl	8003b7c <FindRoute>
 8009f6c:	9005      	str	r0, [sp, #20]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8009f6e:	2c00      	cmp	r4, #0
 8009f70:	d035      	beq.n	8009fde <remoteBootloaderUpdate+0x86>
 8009f72:	4b28      	ldr	r3, [pc, #160]	; (800a014 <remoteBootloaderUpdate+0xbc>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	42b3      	cmp	r3, r6
 8009f78:	d024      	beq.n	8009fc4 <remoteBootloaderUpdate+0x6c>
	if(src == myID){
 8009f7a:	4b26      	ldr	r3, [pc, #152]	; (800a014 <remoteBootloaderUpdate+0xbc>)
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	42bb      	cmp	r3, r7
 8009f80:	d131      	bne.n	8009fe6 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009f82:	f004 faff 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8009f86:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8009f88:	4b23      	ldr	r3, [pc, #140]	; (800a018 <remoteBootloaderUpdate+0xc0>)
 8009f8a:	6819      	ldr	r1, [r3, #0]
 8009f8c:	0023      	movs	r3, r4
 8009f8e:	0032      	movs	r2, r6
 8009f90:	0038      	movs	r0, r7
 8009f92:	f00a f9d5 	bl	8014340 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8009f96:	4b21      	ldr	r3, [pc, #132]	; (800a01c <remoteBootloaderUpdate+0xc4>)
 8009f98:	6819      	ldr	r1, [r3, #0]
 8009f9a:	0038      	movs	r0, r7
 8009f9c:	f00a f9f0 	bl	8014380 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8009fa0:	0038      	movs	r0, r7
 8009fa2:	f7f6 f8b9 	bl	8000118 <strlen>
 8009fa6:	b282      	uxth	r2, r0
 8009fa8:	2332      	movs	r3, #50	; 0x32
 8009faa:	0039      	movs	r1, r7
 8009fac:	0028      	movs	r0, r5
 8009fae:	f004 f879 	bl	800e0a4 <writePxITMutex>
		Delay_ms(100);
 8009fb2:	2064      	movs	r0, #100	; 0x64
 8009fb4:	f006 f926 	bl	8010204 <HAL_Delay>
 8009fb8:	e015      	b.n	8009fe6 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009fba:	f004 fae3 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8009fbe:	0007      	movs	r7, r0
		myOutport =outport;
 8009fc0:	9405      	str	r4, [sp, #20]
 8009fc2:	e7e1      	b.n	8009f88 <remoteBootloaderUpdate+0x30>
	if(src == myID){
 8009fc4:	42bb      	cmp	r3, r7
 8009fc6:	d0f8      	beq.n	8009fba <remoteBootloaderUpdate+0x62>
		myOutport =outport;
 8009fc8:	9405      	str	r4, [sp, #20]
 8009fca:	e00c      	b.n	8009fe6 <remoteBootloaderUpdate+0x8e>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8009fcc:	f004 fada 	bl	800e584 <FreeRTOS_CLIGetOutputBuffer>
 8009fd0:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8009fd2:	4b13      	ldr	r3, [pc, #76]	; (800a020 <remoteBootloaderUpdate+0xc8>)
 8009fd4:	6819      	ldr	r1, [r3, #0]
 8009fd6:	0032      	movs	r2, r6
 8009fd8:	f00a f9b2 	bl	8014340 <sprintf>
 8009fdc:	e7db      	b.n	8009f96 <remoteBootloaderUpdate+0x3e>
	if(src == myID){
 8009fde:	4b0d      	ldr	r3, [pc, #52]	; (800a014 <remoteBootloaderUpdate+0xbc>)
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	42bb      	cmp	r3, r7
 8009fe4:	d0f2      	beq.n	8009fcc <remoteBootloaderUpdate+0x74>
	SetupPortForRemoteBootloaderUpdate(inport);
 8009fe6:	0028      	movs	r0, r5
 8009fe8:	f7ff ffa0 	bl	8009f2c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8009fec:	9c05      	ldr	r4, [sp, #20]
 8009fee:	0020      	movs	r0, r4
 8009ff0:	f7ff ff9c 	bl	8009f2c <SetupPortForRemoteBootloaderUpdate>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8009ff4:	4b07      	ldr	r3, [pc, #28]	; (800a014 <remoteBootloaderUpdate+0xbc>)
 8009ff6:	7819      	ldrb	r1, [r3, #0]
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	9303      	str	r3, [sp, #12]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	9302      	str	r3, [sp, #8]
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	3303      	adds	r3, #3
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	000b      	movs	r3, r1
 800a008:	0022      	movs	r2, r4
 800a00a:	0028      	movs	r0, r5
 800a00c:	f7fe f8de 	bl	80081cc <StartScastDMAStream>
}
 800a010:	b007      	add	sp, #28
 800a012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a014:	20001792 	.word	0x20001792
 800a018:	200000a0 	.word	0x200000a0
 800a01c:	200000a4 	.word	0x200000a4
 800a020:	2000009c 	.word	0x2000009c

0800a024 <APDS9950_init>:
{
 800a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a026:	46c6      	mov	lr, r8
 800a028:	b500      	push	{lr}
	CONTROL = 0x0F;
 800a02a:	4d1c      	ldr	r5, [pc, #112]	; (800a09c <APDS9950_init+0x78>)
 800a02c:	230f      	movs	r3, #15
 800a02e:	702b      	strb	r3, [r5, #0]
	Enable = 0x00;
 800a030:	4c1b      	ldr	r4, [pc, #108]	; (800a0a0 <APDS9950_init+0x7c>)
 800a032:	2300      	movs	r3, #0
 800a034:	7023      	strb	r3, [r4, #0]
	ATIME  = 0x01;
 800a036:	4b1b      	ldr	r3, [pc, #108]	; (800a0a4 <APDS9950_init+0x80>)
 800a038:	4698      	mov	r8, r3
 800a03a:	2301      	movs	r3, #1
 800a03c:	4642      	mov	r2, r8
 800a03e:	7013      	strb	r3, [r2, #0]
	WTIME  = 0x03;
 800a040:	4f19      	ldr	r7, [pc, #100]	; (800a0a8 <APDS9950_init+0x84>)
 800a042:	3302      	adds	r3, #2
 800a044:	703b      	strb	r3, [r7, #0]
	PPULSE = 0x0E;
 800a046:	4e19      	ldr	r6, [pc, #100]	; (800a0ac <APDS9950_init+0x88>)
 800a048:	330b      	adds	r3, #11
 800a04a:	7033      	strb	r3, [r6, #0]
	redReg = 0x16;
 800a04c:	4b18      	ldr	r3, [pc, #96]	; (800a0b0 <APDS9950_init+0x8c>)
 800a04e:	2216      	movs	r2, #22
 800a050:	701a      	strb	r2, [r3, #0]
	greenReg = 0x18;
 800a052:	4b18      	ldr	r3, [pc, #96]	; (800a0b4 <APDS9950_init+0x90>)
 800a054:	3202      	adds	r2, #2
 800a056:	701a      	strb	r2, [r3, #0]
    blueReg = 0x1A;
 800a058:	4b17      	ldr	r3, [pc, #92]	; (800a0b8 <APDS9950_init+0x94>)
 800a05a:	3202      	adds	r2, #2
 800a05c:	701a      	strb	r2, [r3, #0]
    distanceReg = 0x1C;
 800a05e:	4b17      	ldr	r3, [pc, #92]	; (800a0bc <APDS9950_init+0x98>)
 800a060:	3202      	adds	r2, #2
 800a062:	701a      	strb	r2, [r3, #0]
    WriteRegData (Enable,0x00);
 800a064:	2100      	movs	r1, #0
 800a066:	2000      	movs	r0, #0
 800a068:	f002 fa10 	bl	800c48c <WriteRegData>
    WriteRegData (ATIME,0x00);
 800a06c:	4643      	mov	r3, r8
 800a06e:	7818      	ldrb	r0, [r3, #0]
 800a070:	2100      	movs	r1, #0
 800a072:	f002 fa0b 	bl	800c48c <WriteRegData>
    WriteRegData (WTIME,0xff);
 800a076:	7838      	ldrb	r0, [r7, #0]
 800a078:	21ff      	movs	r1, #255	; 0xff
 800a07a:	f002 fa07 	bl	800c48c <WriteRegData>
    WriteRegData (PPULSE,0x01);
 800a07e:	7830      	ldrb	r0, [r6, #0]
 800a080:	2101      	movs	r1, #1
 800a082:	f002 fa03 	bl	800c48c <WriteRegData>
    WriteRegData (CONTROL, 0x20);
 800a086:	7828      	ldrb	r0, [r5, #0]
 800a088:	2120      	movs	r1, #32
 800a08a:	f002 f9ff 	bl	800c48c <WriteRegData>
    WriteRegData (Enable, 0x0F);
 800a08e:	7820      	ldrb	r0, [r4, #0]
 800a090:	210f      	movs	r1, #15
 800a092:	f002 f9fb 	bl	800c48c <WriteRegData>
}
 800a096:	bc04      	pop	{r2}
 800a098:	4690      	mov	r8, r2
 800a09a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a09c:	20006d16 	.word	0x20006d16
 800a0a0:	20006c96 	.word	0x20006c96
 800a0a4:	20006c1d 	.word	0x20006c1d
 800a0a8:	20006c1c 	.word	0x20006c1c
 800a0ac:	20006c94 	.word	0x20006c94
 800a0b0:	20006c95 	.word	0x20006c95
 800a0b4:	20006c1e 	.word	0x20006c1e
 800a0b8:	20006c20 	.word	0x20006c20
 800a0bc:	20006e00 	.word	0x20006e00

0800a0c0 <Module_Peripheral_Init>:
{
 800a0c0:	b510      	push	{r4, lr}
	MX_USART2_UART_Init();
 800a0c2:	f003 fdf5 	bl	800dcb0 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800a0c6:	f003 fe0b 	bl	800dce0 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800a0ca:	f003 fe21 	bl	800dd10 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800a0ce:	f003 fe37 	bl	800dd40 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800a0d2:	f003 fe4d 	bl	800dd70 <MX_USART6_UART_Init>
	SENSORS_GPIO_Init();
 800a0d6:	f002 f873 	bl	800c1c0 <SENSORS_GPIO_Init>
	MX_I2C_Init();
 800a0da:	f002 f9a1 	bl	800c420 <MX_I2C_Init>
	APDS9950_init();
 800a0de:	f7ff ffa1 	bl	800a024 <APDS9950_init>
}
 800a0e2:	bd10      	pop	{r4, pc}

0800a0e4 <SampleColor>:
{
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	0006      	movs	r6, r0
 800a0e8:	000d      	movs	r5, r1
 800a0ea:	0014      	movs	r4, r2
	*Red = Read_Word(redReg);
 800a0ec:	4b07      	ldr	r3, [pc, #28]	; (800a10c <SampleColor+0x28>)
 800a0ee:	7818      	ldrb	r0, [r3, #0]
 800a0f0:	f002 f9e2 	bl	800c4b8 <Read_Word>
 800a0f4:	8030      	strh	r0, [r6, #0]
	*Green = Read_Word(greenReg);
 800a0f6:	4b06      	ldr	r3, [pc, #24]	; (800a110 <SampleColor+0x2c>)
 800a0f8:	7818      	ldrb	r0, [r3, #0]
 800a0fa:	f002 f9dd 	bl	800c4b8 <Read_Word>
 800a0fe:	8028      	strh	r0, [r5, #0]
	*Blue = Read_Word(blueReg);
 800a100:	4b04      	ldr	r3, [pc, #16]	; (800a114 <SampleColor+0x30>)
 800a102:	7818      	ldrb	r0, [r3, #0]
 800a104:	f002 f9d8 	bl	800c4b8 <Read_Word>
 800a108:	8020      	strh	r0, [r4, #0]
}
 800a10a:	bd70      	pop	{r4, r5, r6, pc}
 800a10c:	20006c95 	.word	0x20006c95
 800a110:	20006c1e 	.word	0x20006c1e
 800a114:	20006c20 	.word	0x20006c20

0800a118 <SampleColorBuf>:
{
 800a118:	b510      	push	{r4, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	0004      	movs	r4, r0
	SampleColor(rgb,rgb+1,rgb+2);
 800a11e:	aa01      	add	r2, sp, #4
 800a120:	466b      	mov	r3, sp
 800a122:	1c99      	adds	r1, r3, #2
 800a124:	4668      	mov	r0, sp
 800a126:	f7ff ffdd 	bl	800a0e4 <SampleColor>
	buffer[0]=rgb[0];
 800a12a:	466b      	mov	r3, sp
 800a12c:	8818      	ldrh	r0, [r3, #0]
 800a12e:	f7f6 ff1b 	bl	8000f68 <__aeabi_ui2f>
 800a132:	6020      	str	r0, [r4, #0]
	buffer[1]=rgb[1];
 800a134:	466b      	mov	r3, sp
 800a136:	8858      	ldrh	r0, [r3, #2]
 800a138:	f7f6 ff16 	bl	8000f68 <__aeabi_ui2f>
 800a13c:	6060      	str	r0, [r4, #4]
	buffer[2]=rgb[2];
 800a13e:	466b      	mov	r3, sp
 800a140:	8898      	ldrh	r0, [r3, #4]
 800a142:	f7f6 ff11 	bl	8000f68 <__aeabi_ui2f>
 800a146:	60a0      	str	r0, [r4, #8]
}
 800a148:	b002      	add	sp, #8
 800a14a:	bd10      	pop	{r4, pc}

0800a14c <SampleColorToPort>:
{
 800a14c:	b530      	push	{r4, r5, lr}
 800a14e:	b085      	sub	sp, #20
 800a150:	0004      	movs	r4, r0
 800a152:	000d      	movs	r5, r1
	SampleColorBuf(buffer);
 800a154:	a801      	add	r0, sp, #4
 800a156:	f7ff ffdf 	bl	800a118 <SampleColorBuf>
	if(module == myID){
 800a15a:	4b23      	ldr	r3, [pc, #140]	; (800a1e8 <SampleColorToPort+0x9c>)
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	42ab      	cmp	r3, r5
 800a160:	d021      	beq.n	800a1a6 <SampleColorToPort+0x5a>
		messageParams[0] =port;
 800a162:	4b22      	ldr	r3, [pc, #136]	; (800a1ec <SampleColorToPort+0xa0>)
 800a164:	701c      	strb	r4, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a166:	aa01      	add	r2, sp, #4
 800a168:	78d1      	ldrb	r1, [r2, #3]
 800a16a:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a16c:	7891      	ldrb	r1, [r2, #2]
 800a16e:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a170:	7851      	ldrb	r1, [r2, #1]
 800a172:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a174:	7811      	ldrb	r1, [r2, #0]
 800a176:	7119      	strb	r1, [r3, #4]
		messageParams[5] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800a178:	79d1      	ldrb	r1, [r2, #7]
 800a17a:	7159      	strb	r1, [r3, #5]
		messageParams[6] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800a17c:	7991      	ldrb	r1, [r2, #6]
 800a17e:	7199      	strb	r1, [r3, #6]
		messageParams[7] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800a180:	7951      	ldrb	r1, [r2, #5]
 800a182:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800a184:	7911      	ldrb	r1, [r2, #4]
 800a186:	7219      	strb	r1, [r3, #8]
		messageParams[9] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800a188:	7ad1      	ldrb	r1, [r2, #11]
 800a18a:	7259      	strb	r1, [r3, #9]
		messageParams[10] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800a18c:	7a91      	ldrb	r1, [r2, #10]
 800a18e:	7299      	strb	r1, [r3, #10]
		messageParams[11] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800a190:	7a51      	ldrb	r1, [r2, #9]
 800a192:	72d9      	strb	r1, [r3, #11]
		messageParams[12] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800a194:	7a12      	ldrb	r2, [r2, #8]
 800a196:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800a198:	220d      	movs	r2, #13
 800a19a:	2123      	movs	r1, #35	; 0x23
 800a19c:	0028      	movs	r0, r5
 800a19e:	f7fd ffef 	bl	8008180 <SendMessageToModule>
}
 800a1a2:	b005      	add	sp, #20
 800a1a4:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a1a6:	ab01      	add	r3, sp, #4
 800a1a8:	78da      	ldrb	r2, [r3, #3]
 800a1aa:	4911      	ldr	r1, [pc, #68]	; (800a1f0 <SampleColorToPort+0xa4>)
 800a1ac:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a1ae:	789a      	ldrb	r2, [r3, #2]
 800a1b0:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a1b2:	785a      	ldrb	r2, [r3, #1]
 800a1b4:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a1b6:	781a      	ldrb	r2, [r3, #0]
 800a1b8:	70ca      	strb	r2, [r1, #3]
		temp[4] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800a1ba:	79da      	ldrb	r2, [r3, #7]
 800a1bc:	710a      	strb	r2, [r1, #4]
		temp[5] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800a1be:	799a      	ldrb	r2, [r3, #6]
 800a1c0:	714a      	strb	r2, [r1, #5]
		temp[6] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800a1c2:	795a      	ldrb	r2, [r3, #5]
 800a1c4:	718a      	strb	r2, [r1, #6]
		temp[7] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800a1c6:	791a      	ldrb	r2, [r3, #4]
 800a1c8:	71ca      	strb	r2, [r1, #7]
		temp[8] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800a1ca:	7ada      	ldrb	r2, [r3, #11]
 800a1cc:	720a      	strb	r2, [r1, #8]
		temp[9] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800a1ce:	7a9a      	ldrb	r2, [r3, #10]
 800a1d0:	724a      	strb	r2, [r1, #9]
		temp[10] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800a1d2:	7a5a      	ldrb	r2, [r3, #9]
 800a1d4:	728a      	strb	r2, [r1, #10]
		temp[11] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800a1d6:	7a1b      	ldrb	r3, [r3, #8]
 800a1d8:	72cb      	strb	r3, [r1, #11]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800a1da:	230a      	movs	r3, #10
 800a1dc:	220c      	movs	r2, #12
 800a1de:	0020      	movs	r0, r4
 800a1e0:	f003 ff60 	bl	800e0a4 <writePxITMutex>
 800a1e4:	e7dd      	b.n	800a1a2 <SampleColorToPort+0x56>
 800a1e6:	46c0      	nop			; (mov r8, r8)
 800a1e8:	20001792 	.word	0x20001792
 800a1ec:	20001654 	.word	0x20001654
 800a1f0:	200021fc 	.word	0x200021fc

0800a1f4 <SampleColorToString>:
{
 800a1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	9003      	str	r0, [sp, #12]
 800a1fa:	000f      	movs	r7, r1
	uint16_t red = 0, green = 0, blue = 0;
 800a1fc:	260e      	movs	r6, #14
 800a1fe:	ab02      	add	r3, sp, #8
 800a200:	469c      	mov	ip, r3
 800a202:	4466      	add	r6, ip
 800a204:	2300      	movs	r3, #0
 800a206:	8033      	strh	r3, [r6, #0]
 800a208:	ad05      	add	r5, sp, #20
 800a20a:	802b      	strh	r3, [r5, #0]
 800a20c:	240a      	movs	r4, #10
 800a20e:	4464      	add	r4, ip
 800a210:	8023      	strh	r3, [r4, #0]
	SampleColor(&red, &green, &blue);
 800a212:	0022      	movs	r2, r4
 800a214:	0029      	movs	r1, r5
 800a216:	0030      	movs	r0, r6
 800a218:	f7ff ff64 	bl	800a0e4 <SampleColor>
	Red=red;
 800a21c:	8833      	ldrh	r3, [r6, #0]
 800a21e:	4a07      	ldr	r2, [pc, #28]	; (800a23c <SampleColorToString+0x48>)
 800a220:	8013      	strh	r3, [r2, #0]
	Green=green;
 800a222:	8829      	ldrh	r1, [r5, #0]
 800a224:	8051      	strh	r1, [r2, #2]
	Blue=blue;
 800a226:	8820      	ldrh	r0, [r4, #0]
 800a228:	8090      	strh	r0, [r2, #4]
	snprintf(cstring, maxLen, "Red: %d, Green: %d, Blue: %d\r\n", red, green, blue);
 800a22a:	9001      	str	r0, [sp, #4]
 800a22c:	9100      	str	r1, [sp, #0]
 800a22e:	4a04      	ldr	r2, [pc, #16]	; (800a240 <SampleColorToString+0x4c>)
 800a230:	0039      	movs	r1, r7
 800a232:	9803      	ldr	r0, [sp, #12]
 800a234:	f00a f852 	bl	80142dc <snprintf>
}
 800a238:	b007      	add	sp, #28
 800a23a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a23c:	20000008 	.word	0x20000008
 800a240:	0801b378 	.word	0x0801b378

0800a244 <SampleDistance>:
{
 800a244:	b510      	push	{r4, lr}
 800a246:	0004      	movs	r4, r0
	*distance = Read_Word(distanceReg)/6.39;
 800a248:	4b06      	ldr	r3, [pc, #24]	; (800a264 <SampleDistance+0x20>)
 800a24a:	7818      	ldrb	r0, [r3, #0]
 800a24c:	f002 f934 	bl	800c4b8 <Read_Word>
 800a250:	f7f8 fbfc 	bl	8002a4c <__aeabi_i2d>
 800a254:	4a04      	ldr	r2, [pc, #16]	; (800a268 <SampleDistance+0x24>)
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <SampleDistance+0x28>)
 800a258:	f7f7 f9e2 	bl	8001620 <__aeabi_ddiv>
 800a25c:	f7f6 f9c8 	bl	80005f0 <__aeabi_d2uiz>
 800a260:	8020      	strh	r0, [r4, #0]
}
 800a262:	bd10      	pop	{r4, pc}
 800a264:	20006e00 	.word	0x20006e00
 800a268:	28f5c28f 	.word	0x28f5c28f
 800a26c:	40198f5c 	.word	0x40198f5c

0800a270 <SampleDistanceBuff>:
{
 800a270:	b530      	push	{r4, r5, lr}
 800a272:	b083      	sub	sp, #12
 800a274:	0005      	movs	r5, r0
	SampleDistance(&distance);
 800a276:	466b      	mov	r3, sp
 800a278:	1d9c      	adds	r4, r3, #6
 800a27a:	0020      	movs	r0, r4
 800a27c:	f7ff ffe2 	bl	800a244 <SampleDistance>
	*buffer = distance;
 800a280:	8820      	ldrh	r0, [r4, #0]
 800a282:	f7f6 fe71 	bl	8000f68 <__aeabi_ui2f>
 800a286:	6028      	str	r0, [r5, #0]
}
 800a288:	b003      	add	sp, #12
 800a28a:	bd30      	pop	{r4, r5, pc}

0800a28c <SampleDistanceToPort>:
{
 800a28c:	b530      	push	{r4, r5, lr}
 800a28e:	b083      	sub	sp, #12
 800a290:	0005      	movs	r5, r0
 800a292:	000c      	movs	r4, r1
	SampleDistanceBuff(buffer);
 800a294:	a801      	add	r0, sp, #4
 800a296:	f7ff ffeb 	bl	800a270 <SampleDistanceBuff>
	if(module == myID){
 800a29a:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <SampleDistanceToPort+0x5c>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	42a3      	cmp	r3, r4
 800a2a0:	d011      	beq.n	800a2c6 <SampleDistanceToPort+0x3a>
		messageParams[0] =port;
 800a2a2:	4b12      	ldr	r3, [pc, #72]	; (800a2ec <SampleDistanceToPort+0x60>)
 800a2a4:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a2a6:	aa01      	add	r2, sp, #4
 800a2a8:	78d1      	ldrb	r1, [r2, #3]
 800a2aa:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a2ac:	7891      	ldrb	r1, [r2, #2]
 800a2ae:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a2b0:	7851      	ldrb	r1, [r2, #1]
 800a2b2:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a2b4:	7812      	ldrb	r2, [r2, #0]
 800a2b6:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800a2b8:	2205      	movs	r2, #5
 800a2ba:	2123      	movs	r1, #35	; 0x23
 800a2bc:	0020      	movs	r0, r4
 800a2be:	f7fd ff5f 	bl	8008180 <SendMessageToModule>
}
 800a2c2:	b003      	add	sp, #12
 800a2c4:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a2c6:	ab01      	add	r3, sp, #4
 800a2c8:	78da      	ldrb	r2, [r3, #3]
 800a2ca:	4909      	ldr	r1, [pc, #36]	; (800a2f0 <SampleDistanceToPort+0x64>)
 800a2cc:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a2ce:	789a      	ldrb	r2, [r3, #2]
 800a2d0:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a2d2:	785a      	ldrb	r2, [r3, #1]
 800a2d4:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800a2da:	230a      	movs	r3, #10
 800a2dc:	2204      	movs	r2, #4
 800a2de:	0028      	movs	r0, r5
 800a2e0:	f003 fee0 	bl	800e0a4 <writePxITMutex>
 800a2e4:	e7ed      	b.n	800a2c2 <SampleDistanceToPort+0x36>
 800a2e6:	46c0      	nop			; (mov r8, r8)
 800a2e8:	20001792 	.word	0x20001792
 800a2ec:	20001654 	.word	0x20001654
 800a2f0:	20002208 	.word	0x20002208

0800a2f4 <SampleDistanceToString>:
{
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	0005      	movs	r5, r0
 800a2fa:	000e      	movs	r6, r1
	uint16_t distance = 0;
 800a2fc:	466b      	mov	r3, sp
 800a2fe:	1d9c      	adds	r4, r3, #6
 800a300:	2300      	movs	r3, #0
 800a302:	8023      	strh	r3, [r4, #0]
	SampleDistance(&distance);
 800a304:	0020      	movs	r0, r4
 800a306:	f7ff ff9d 	bl	800a244 <SampleDistance>
	distance1=distance;
 800a30a:	8823      	ldrh	r3, [r4, #0]
 800a30c:	4a04      	ldr	r2, [pc, #16]	; (800a320 <SampleDistanceToString+0x2c>)
 800a30e:	80d3      	strh	r3, [r2, #6]
	snprintf(cstring, maxLen, "Distance: %d\r\n", distance);
 800a310:	4a04      	ldr	r2, [pc, #16]	; (800a324 <SampleDistanceToString+0x30>)
 800a312:	0031      	movs	r1, r6
 800a314:	0028      	movs	r0, r5
 800a316:	f009 ffe1 	bl	80142dc <snprintf>
}
 800a31a:	b002      	add	sp, #8
 800a31c:	bd70      	pop	{r4, r5, r6, pc}
 800a31e:	46c0      	nop			; (mov r8, r8)
 800a320:	20000008 	.word	0x20000008
 800a324:	0801b3a8 	.word	0x0801b3a8

0800a328 <SampleTemperature>:
{
 800a328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a32a:	b083      	sub	sp, #12
 800a32c:	0007      	movs	r7, r0
	buf[0] = tempReg;
 800a32e:	4c19      	ldr	r4, [pc, #100]	; (800a394 <SampleTemperature+0x6c>)
 800a330:	2300      	movs	r3, #0
 800a332:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800a334:	4d18      	ldr	r5, [pc, #96]	; (800a398 <SampleTemperature+0x70>)
 800a336:	2601      	movs	r6, #1
 800a338:	4276      	negs	r6, r6
 800a33a:	9600      	str	r6, [sp, #0]
 800a33c:	3301      	adds	r3, #1
 800a33e:	0022      	movs	r2, r4
 800a340:	2180      	movs	r1, #128	; 0x80
 800a342:	0028      	movs	r0, r5
 800a344:	f007 fcd8 	bl	8011cf8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800a348:	2014      	movs	r0, #20
 800a34a:	f005 ff5b 	bl	8010204 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800a34e:	9600      	str	r6, [sp, #0]
 800a350:	2302      	movs	r3, #2
 800a352:	0022      	movs	r2, r4
 800a354:	2180      	movs	r1, #128	; 0x80
 800a356:	0028      	movs	r0, r5
 800a358:	f007 fd72 	bl	8011e40 <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800a35c:	7823      	ldrb	r3, [r4, #0]
 800a35e:	021b      	lsls	r3, r3, #8
 800a360:	7860      	ldrb	r0, [r4, #1]
 800a362:	4318      	orrs	r0, r3
 800a364:	4b0d      	ldr	r3, [pc, #52]	; (800a39c <SampleTemperature+0x74>)
 800a366:	8018      	strh	r0, [r3, #0]
	*temperature=((float)val/65536)*165.0-40.0;
 800a368:	f7f6 fdfe 	bl	8000f68 <__aeabi_ui2f>
 800a36c:	21de      	movs	r1, #222	; 0xde
 800a36e:	0589      	lsls	r1, r1, #22
 800a370:	f7f6 fae4 	bl	800093c <__aeabi_fmul>
 800a374:	f7f8 fbd6 	bl	8002b24 <__aeabi_f2d>
 800a378:	2200      	movs	r2, #0
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <SampleTemperature+0x78>)
 800a37c:	f7f7 fd5a 	bl	8001e34 <__aeabi_dmul>
 800a380:	2200      	movs	r2, #0
 800a382:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <SampleTemperature+0x7c>)
 800a384:	f7f7 ffc8 	bl	8002318 <__aeabi_dsub>
 800a388:	f7f8 fc1e 	bl	8002bc8 <__aeabi_d2f>
 800a38c:	6038      	str	r0, [r7, #0]
}
 800a38e:	b003      	add	sp, #12
 800a390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a392:	46c0      	nop			; (mov r8, r8)
 800a394:	20006d0c 	.word	0x20006d0c
 800a398:	20006e28 	.word	0x20006e28
 800a39c:	20006c22 	.word	0x20006c22
 800a3a0:	4064a000 	.word	0x4064a000
 800a3a4:	40440000 	.word	0x40440000

0800a3a8 <SampleTemperatureToString>:
{
 800a3a8:	b530      	push	{r4, r5, lr}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	0004      	movs	r4, r0
 800a3ae:	000d      	movs	r5, r1
	float temprature = 0;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	9303      	str	r3, [sp, #12]
	SampleTemperature(&temprature);
 800a3b4:	a803      	add	r0, sp, #12
 800a3b6:	f7ff ffb7 	bl	800a328 <SampleTemperature>
	temp=temprature;
 800a3ba:	4b07      	ldr	r3, [pc, #28]	; (800a3d8 <SampleTemperatureToString+0x30>)
 800a3bc:	9a03      	ldr	r2, [sp, #12]
 800a3be:	609a      	str	r2, [r3, #8]
	snprintf(cstring, maxLen, "Temperature: %.2f\r\n", temprature);
 800a3c0:	1c10      	adds	r0, r2, #0
 800a3c2:	f7f8 fbaf 	bl	8002b24 <__aeabi_f2d>
 800a3c6:	9000      	str	r0, [sp, #0]
 800a3c8:	9101      	str	r1, [sp, #4]
 800a3ca:	4a04      	ldr	r2, [pc, #16]	; (800a3dc <SampleTemperatureToString+0x34>)
 800a3cc:	0029      	movs	r1, r5
 800a3ce:	0020      	movs	r0, r4
 800a3d0:	f009 ff84 	bl	80142dc <snprintf>
}
 800a3d4:	b005      	add	sp, #20
 800a3d6:	bd30      	pop	{r4, r5, pc}
 800a3d8:	20000008 	.word	0x20000008
 800a3dc:	0801b418 	.word	0x0801b418

0800a3e0 <SampleTemperatureToPort>:
{
 800a3e0:	b530      	push	{r4, r5, lr}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	0005      	movs	r5, r0
 800a3e6:	000c      	movs	r4, r1
	SampleTemperature(buffer);
 800a3e8:	a801      	add	r0, sp, #4
 800a3ea:	f7ff ff9d 	bl	800a328 <SampleTemperature>
	if(module == myID){
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <SampleTemperatureToPort+0x5c>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	d011      	beq.n	800a41a <SampleTemperatureToPort+0x3a>
		messageParams[0] =port;
 800a3f6:	4b12      	ldr	r3, [pc, #72]	; (800a440 <SampleTemperatureToPort+0x60>)
 800a3f8:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a3fa:	aa01      	add	r2, sp, #4
 800a3fc:	78d1      	ldrb	r1, [r2, #3]
 800a3fe:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a400:	7891      	ldrb	r1, [r2, #2]
 800a402:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a404:	7851      	ldrb	r1, [r2, #1]
 800a406:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a408:	7812      	ldrb	r2, [r2, #0]
 800a40a:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800a40c:	2205      	movs	r2, #5
 800a40e:	2123      	movs	r1, #35	; 0x23
 800a410:	0020      	movs	r0, r4
 800a412:	f7fd feb5 	bl	8008180 <SendMessageToModule>
}
 800a416:	b003      	add	sp, #12
 800a418:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a41a:	ab01      	add	r3, sp, #4
 800a41c:	78da      	ldrb	r2, [r3, #3]
 800a41e:	4909      	ldr	r1, [pc, #36]	; (800a444 <SampleTemperatureToPort+0x64>)
 800a420:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a422:	789a      	ldrb	r2, [r3, #2]
 800a424:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a426:	785a      	ldrb	r2, [r3, #1]
 800a428:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800a42e:	230a      	movs	r3, #10
 800a430:	2204      	movs	r2, #4
 800a432:	0028      	movs	r0, r5
 800a434:	f003 fe36 	bl	800e0a4 <writePxITMutex>
 800a438:	e7ed      	b.n	800a416 <SampleTemperatureToPort+0x36>
 800a43a:	46c0      	nop			; (mov r8, r8)
 800a43c:	20001792 	.word	0x20001792
 800a440:	20001654 	.word	0x20001654
 800a444:	2000220c 	.word	0x2000220c

0800a448 <SampleHumidity>:
{
 800a448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a44a:	b083      	sub	sp, #12
 800a44c:	0007      	movs	r7, r0
	buf[0] = humidityReg;
 800a44e:	4c14      	ldr	r4, [pc, #80]	; (800a4a0 <SampleHumidity+0x58>)
 800a450:	2301      	movs	r3, #1
 800a452:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800a454:	4d13      	ldr	r5, [pc, #76]	; (800a4a4 <SampleHumidity+0x5c>)
 800a456:	2601      	movs	r6, #1
 800a458:	4276      	negs	r6, r6
 800a45a:	9600      	str	r6, [sp, #0]
 800a45c:	0022      	movs	r2, r4
 800a45e:	2180      	movs	r1, #128	; 0x80
 800a460:	0028      	movs	r0, r5
 800a462:	f007 fc49 	bl	8011cf8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800a466:	2014      	movs	r0, #20
 800a468:	f005 fecc 	bl	8010204 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800a46c:	9600      	str	r6, [sp, #0]
 800a46e:	2302      	movs	r3, #2
 800a470:	0022      	movs	r2, r4
 800a472:	2180      	movs	r1, #128	; 0x80
 800a474:	0028      	movs	r0, r5
 800a476:	f007 fce3 	bl	8011e40 <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800a47a:	7823      	ldrb	r3, [r4, #0]
 800a47c:	021b      	lsls	r3, r3, #8
 800a47e:	7860      	ldrb	r0, [r4, #1]
 800a480:	4318      	orrs	r0, r3
 800a482:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <SampleHumidity+0x60>)
 800a484:	8018      	strh	r0, [r3, #0]
	*humidity = (((float)val*100)/65536);
 800a486:	f7f6 fd6f 	bl	8000f68 <__aeabi_ui2f>
 800a48a:	4908      	ldr	r1, [pc, #32]	; (800a4ac <SampleHumidity+0x64>)
 800a48c:	f7f6 fa56 	bl	800093c <__aeabi_fmul>
 800a490:	21de      	movs	r1, #222	; 0xde
 800a492:	0589      	lsls	r1, r1, #22
 800a494:	f7f6 fa52 	bl	800093c <__aeabi_fmul>
 800a498:	6038      	str	r0, [r7, #0]
}
 800a49a:	b003      	add	sp, #12
 800a49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a49e:	46c0      	nop			; (mov r8, r8)
 800a4a0:	20006d0c 	.word	0x20006d0c
 800a4a4:	20006e28 	.word	0x20006e28
 800a4a8:	20006c22 	.word	0x20006c22
 800a4ac:	42c80000 	.word	0x42c80000

0800a4b0 <SampleHumidityToString>:
{
 800a4b0:	b530      	push	{r4, r5, lr}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	0004      	movs	r4, r0
 800a4b6:	000d      	movs	r5, r1
	float humidity = 0;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	9303      	str	r3, [sp, #12]
	SampleHumidity(&humidity);
 800a4bc:	a803      	add	r0, sp, #12
 800a4be:	f7ff ffc3 	bl	800a448 <SampleHumidity>
	hum=humidity;
 800a4c2:	4b07      	ldr	r3, [pc, #28]	; (800a4e0 <SampleHumidityToString+0x30>)
 800a4c4:	9a03      	ldr	r2, [sp, #12]
 800a4c6:	60da      	str	r2, [r3, #12]
	snprintf(cstring, maxLen, "Humidity: %.2f\r\n", humidity);
 800a4c8:	1c10      	adds	r0, r2, #0
 800a4ca:	f7f8 fb2b 	bl	8002b24 <__aeabi_f2d>
 800a4ce:	9000      	str	r0, [sp, #0]
 800a4d0:	9101      	str	r1, [sp, #4]
 800a4d2:	4a04      	ldr	r2, [pc, #16]	; (800a4e4 <SampleHumidityToString+0x34>)
 800a4d4:	0029      	movs	r1, r5
 800a4d6:	0020      	movs	r0, r4
 800a4d8:	f009 ff00 	bl	80142dc <snprintf>
}
 800a4dc:	b005      	add	sp, #20
 800a4de:	bd30      	pop	{r4, r5, pc}
 800a4e0:	20000008 	.word	0x20000008
 800a4e4:	0801b3b8 	.word	0x0801b3b8

0800a4e8 <SampleHumidityToPort>:
{
 800a4e8:	b530      	push	{r4, r5, lr}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	0005      	movs	r5, r0
 800a4ee:	000c      	movs	r4, r1
	SampleHumidity(buffer);
 800a4f0:	a801      	add	r0, sp, #4
 800a4f2:	f7ff ffa9 	bl	800a448 <SampleHumidity>
	if(module == myID){
 800a4f6:	4b13      	ldr	r3, [pc, #76]	; (800a544 <SampleHumidityToPort+0x5c>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	42a3      	cmp	r3, r4
 800a4fc:	d011      	beq.n	800a522 <SampleHumidityToPort+0x3a>
		messageParams[0] =port;
 800a4fe:	4b12      	ldr	r3, [pc, #72]	; (800a548 <SampleHumidityToPort+0x60>)
 800a500:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a502:	aa01      	add	r2, sp, #4
 800a504:	78d1      	ldrb	r1, [r2, #3]
 800a506:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a508:	7891      	ldrb	r1, [r2, #2]
 800a50a:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a50c:	7851      	ldrb	r1, [r2, #1]
 800a50e:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a510:	7812      	ldrb	r2, [r2, #0]
 800a512:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800a514:	2205      	movs	r2, #5
 800a516:	2123      	movs	r1, #35	; 0x23
 800a518:	0020      	movs	r0, r4
 800a51a:	f7fd fe31 	bl	8008180 <SendMessageToModule>
}
 800a51e:	b003      	add	sp, #12
 800a520:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800a522:	ab01      	add	r3, sp, #4
 800a524:	78da      	ldrb	r2, [r3, #3]
 800a526:	4909      	ldr	r1, [pc, #36]	; (800a54c <SampleHumidityToPort+0x64>)
 800a528:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800a52a:	789a      	ldrb	r2, [r3, #2]
 800a52c:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800a52e:	785a      	ldrb	r2, [r3, #1]
 800a530:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800a532:	781b      	ldrb	r3, [r3, #0]
 800a534:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800a536:	230a      	movs	r3, #10
 800a538:	2204      	movs	r2, #4
 800a53a:	0028      	movs	r0, r5
 800a53c:	f003 fdb2 	bl	800e0a4 <writePxITMutex>
 800a540:	e7ed      	b.n	800a51e <SampleHumidityToPort+0x36>
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	20001792 	.word	0x20001792
 800a548:	20001654 	.word	0x20001654
 800a54c:	20002210 	.word	0x20002210

0800a550 <SamplePIR>:
{
 800a550:	b510      	push	{r4, lr}
 800a552:	0004      	movs	r4, r0
	*pir=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);/* USER CODE END WHILE */
 800a554:	2180      	movs	r1, #128	; 0x80
 800a556:	4803      	ldr	r0, [pc, #12]	; (800a564 <SamplePIR+0x14>)
 800a558:	f007 fa6a 	bl	8011a30 <HAL_GPIO_ReadPin>
 800a55c:	1e43      	subs	r3, r0, #1
 800a55e:	4198      	sbcs	r0, r3
 800a560:	7020      	strb	r0, [r4, #0]
}
 800a562:	bd10      	pop	{r4, pc}
 800a564:	48000400 	.word	0x48000400

0800a568 <SamplePIRBuf>:
{
 800a568:	b530      	push	{r4, r5, lr}
 800a56a:	b083      	sub	sp, #12
 800a56c:	0005      	movs	r5, r0
    SamplePIR(&pir);
 800a56e:	466b      	mov	r3, sp
 800a570:	1ddc      	adds	r4, r3, #7
 800a572:	0020      	movs	r0, r4
 800a574:	f7ff ffec 	bl	800a550 <SamplePIR>
    *buffer = pir;
 800a578:	7820      	ldrb	r0, [r4, #0]
 800a57a:	f7f6 fcf5 	bl	8000f68 <__aeabi_ui2f>
 800a57e:	6028      	str	r0, [r5, #0]
}
 800a580:	b003      	add	sp, #12
 800a582:	bd30      	pop	{r4, r5, pc}

0800a584 <SamplePIRToPort>:
{
 800a584:	b570      	push	{r4, r5, r6, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	0006      	movs	r6, r0
 800a58a:	000c      	movs	r4, r1
	SamplePIRBuf(&buffer);
 800a58c:	a801      	add	r0, sp, #4
 800a58e:	f7ff ffeb 	bl	800a568 <SamplePIRBuf>
	if(module == myID){
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <SamplePIRToPort+0x50>)
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	42a3      	cmp	r3, r4
 800a598:	d00c      	beq.n	800a5b4 <SamplePIRToPort+0x30>
		messageParams[0] =port;
 800a59a:	4d0f      	ldr	r5, [pc, #60]	; (800a5d8 <SamplePIRToPort+0x54>)
 800a59c:	702e      	strb	r6, [r5, #0]
		messageParams[1] =buffer;
 800a59e:	9801      	ldr	r0, [sp, #4]
 800a5a0:	f7f6 f80e 	bl	80005c0 <__aeabi_f2uiz>
 800a5a4:	7068      	strb	r0, [r5, #1]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(char)+1);
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	2123      	movs	r1, #35	; 0x23
 800a5aa:	0020      	movs	r0, r4
 800a5ac:	f7fd fde8 	bl	8008180 <SendMessageToModule>
}
 800a5b0:	b002      	add	sp, #8
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}
		temp = buffer;
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	9801      	ldr	r0, [sp, #4]
 800a5b8:	f7f5 ff8a 	bl	80004d0 <__aeabi_fcmpeq>
 800a5bc:	4243      	negs	r3, r0
 800a5be:	4158      	adcs	r0, r3
 800a5c0:	466b      	mov	r3, sp
 800a5c2:	70d8      	strb	r0, [r3, #3]
		writePxITMutex(port,(char* )&temp,sizeof(bool),10);
 800a5c4:	230a      	movs	r3, #10
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	4669      	mov	r1, sp
 800a5ca:	3103      	adds	r1, #3
 800a5cc:	0030      	movs	r0, r6
 800a5ce:	f003 fd69 	bl	800e0a4 <writePxITMutex>
 800a5d2:	e7ed      	b.n	800a5b0 <SamplePIRToPort+0x2c>
 800a5d4:	20001792 	.word	0x20001792
 800a5d8:	20001654 	.word	0x20001654

0800a5dc <SamplePIRToString>:
{
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	0005      	movs	r5, r0
 800a5e2:	000e      	movs	r6, r1
	SamplePIR(&sample);
 800a5e4:	466b      	mov	r3, sp
 800a5e6:	1ddc      	adds	r4, r3, #7
 800a5e8:	0020      	movs	r0, r4
 800a5ea:	f7ff ffb1 	bl	800a550 <SamplePIR>
	Sample=sample;
 800a5ee:	7823      	ldrb	r3, [r4, #0]
 800a5f0:	4a04      	ldr	r2, [pc, #16]	; (800a604 <SamplePIRToString+0x28>)
 800a5f2:	7413      	strb	r3, [r2, #16]
	snprintf(cstring, maxLen, "PIR: %d\r\n", sample);
 800a5f4:	4a04      	ldr	r2, [pc, #16]	; (800a608 <SamplePIRToString+0x2c>)
 800a5f6:	0031      	movs	r1, r6
 800a5f8:	0028      	movs	r0, r5
 800a5fa:	f009 fe6f 	bl	80142dc <snprintf>
}
 800a5fe:	b002      	add	sp, #8
 800a600:	bd70      	pop	{r4, r5, r6, pc}
 800a602:	46c0      	nop			; (mov r8, r8)
 800a604:	20000008 	.word	0x20000008
 800a608:	0801b3cc 	.word	0x0801b3cc

0800a60c <SampleSensorCommand>:
{
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	0005      	movs	r5, r0
 800a612:	000e      	movs	r6, r1
 800a614:	0010      	movs	r0, r2
	portBASE_TYPE sensNameLen = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	9301      	str	r3, [sp, #4]
	*pcWriteBuffer = '\0';
 800a61a:	702b      	strb	r3, [r5, #0]
	pSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &sensNameLen);
 800a61c:	aa01      	add	r2, sp, #4
 800a61e:	2101      	movs	r1, #1
 800a620:	f003 ffb4 	bl	800e58c <FreeRTOS_CLIGetParameter>
 800a624:	1e04      	subs	r4, r0, #0
	if (pSensName == NULL) {
 800a626:	d027      	beq.n	800a678 <SampleSensorCommand+0x6c>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800a628:	2205      	movs	r2, #5
 800a62a:	4924      	ldr	r1, [pc, #144]	; (800a6bc <SampleSensorCommand+0xb0>)
 800a62c:	f009 fecc 	bl	80143c8 <strncmp>
 800a630:	2800      	cmp	r0, #0
 800a632:	d027      	beq.n	800a684 <SampleSensorCommand+0x78>
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800a634:	2208      	movs	r2, #8
 800a636:	4922      	ldr	r1, [pc, #136]	; (800a6c0 <SampleSensorCommand+0xb4>)
 800a638:	0020      	movs	r0, r4
 800a63a:	f009 fec5 	bl	80143c8 <strncmp>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d027      	beq.n	800a692 <SampleSensorCommand+0x86>
		} else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800a642:	2204      	movs	r2, #4
 800a644:	491f      	ldr	r1, [pc, #124]	; (800a6c4 <SampleSensorCommand+0xb8>)
 800a646:	0020      	movs	r0, r4
 800a648:	f009 febe 	bl	80143c8 <strncmp>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d025      	beq.n	800a69c <SampleSensorCommand+0x90>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800a650:	2208      	movs	r2, #8
 800a652:	491d      	ldr	r1, [pc, #116]	; (800a6c8 <SampleSensorCommand+0xbc>)
 800a654:	0020      	movs	r0, r4
 800a656:	f009 feb7 	bl	80143c8 <strncmp>
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d023      	beq.n	800a6a6 <SampleSensorCommand+0x9a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800a65e:	2203      	movs	r2, #3
 800a660:	491a      	ldr	r1, [pc, #104]	; (800a6cc <SampleSensorCommand+0xc0>)
 800a662:	0020      	movs	r0, r4
 800a664:	f009 feb0 	bl	80143c8 <strncmp>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d021      	beq.n	800a6b0 <SampleSensorCommand+0xa4>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800a66c:	4a18      	ldr	r2, [pc, #96]	; (800a6d0 <SampleSensorCommand+0xc4>)
 800a66e:	0031      	movs	r1, r6
 800a670:	0028      	movs	r0, r5
 800a672:	f009 fe33 	bl	80142dc <snprintf>
 800a676:	e009      	b.n	800a68c <SampleSensorCommand+0x80>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800a678:	4a15      	ldr	r2, [pc, #84]	; (800a6d0 <SampleSensorCommand+0xc4>)
 800a67a:	0031      	movs	r1, r6
 800a67c:	0028      	movs	r0, r5
 800a67e:	f009 fe2d 	bl	80142dc <snprintf>
		return pdFALSE;
 800a682:	e003      	b.n	800a68c <SampleSensorCommand+0x80>
			SampleColorToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a684:	0031      	movs	r1, r6
 800a686:	0028      	movs	r0, r5
 800a688:	f7ff fdb4 	bl	800a1f4 <SampleColorToString>
}
 800a68c:	2000      	movs	r0, #0
 800a68e:	b002      	add	sp, #8
 800a690:	bd70      	pop	{r4, r5, r6, pc}
			SampleDistanceToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a692:	0031      	movs	r1, r6
 800a694:	0028      	movs	r0, r5
 800a696:	f7ff fe2d 	bl	800a2f4 <SampleDistanceToString>
 800a69a:	e7f7      	b.n	800a68c <SampleSensorCommand+0x80>
			SampleTemperatureToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a69c:	0031      	movs	r1, r6
 800a69e:	0028      	movs	r0, r5
 800a6a0:	f7ff fe82 	bl	800a3a8 <SampleTemperatureToString>
 800a6a4:	e7f2      	b.n	800a68c <SampleSensorCommand+0x80>
			SampleHumidityToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a6a6:	0031      	movs	r1, r6
 800a6a8:	0028      	movs	r0, r5
 800a6aa:	f7ff ff01 	bl	800a4b0 <SampleHumidityToString>
 800a6ae:	e7ed      	b.n	800a68c <SampleSensorCommand+0x80>
			SamplePIRToString((char *)pcWriteBuffer, xWriteBufferLen);
 800a6b0:	0031      	movs	r1, r6
 800a6b2:	0028      	movs	r0, r5
 800a6b4:	f7ff ff92 	bl	800a5dc <SamplePIRToString>
 800a6b8:	e7e8      	b.n	800a68c <SampleSensorCommand+0x80>
 800a6ba:	46c0      	nop			; (mov r8, r8)
 800a6bc:	0801b3ec 	.word	0x0801b3ec
 800a6c0:	0801b3f4 	.word	0x0801b3f4
 800a6c4:	0801b400 	.word	0x0801b400
 800a6c8:	0801b408 	.word	0x0801b408
 800a6cc:	0801b414 	.word	0x0801b414
 800a6d0:	0801b3d8 	.word	0x0801b3d8

0800a6d4 <StreamColorToPort>:
{
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleColorToPort);
 800a6d8:	4c02      	ldr	r4, [pc, #8]	; (800a6e4 <StreamColorToPort+0x10>)
 800a6da:	9400      	str	r4, [sp, #0]
 800a6dc:	f7ff fad0 	bl	8009c80 <StreamMemsToPort>
}
 800a6e0:	b002      	add	sp, #8
 800a6e2:	bd10      	pop	{r4, pc}
 800a6e4:	0800a14d 	.word	0x0800a14d

0800a6e8 <StreamDistanceToPort>:
{
 800a6e8:	b510      	push	{r4, lr}
 800a6ea:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleDistanceToPort);
 800a6ec:	4c02      	ldr	r4, [pc, #8]	; (800a6f8 <StreamDistanceToPort+0x10>)
 800a6ee:	9400      	str	r4, [sp, #0]
 800a6f0:	f7ff fac6 	bl	8009c80 <StreamMemsToPort>
}
 800a6f4:	b002      	add	sp, #8
 800a6f6:	bd10      	pop	{r4, pc}
 800a6f8:	0800a28d 	.word	0x0800a28d

0800a6fc <StreamTemperatureToPort>:
{
 800a6fc:	b510      	push	{r4, lr}
 800a6fe:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleTemperatureToPort);
 800a700:	4c02      	ldr	r4, [pc, #8]	; (800a70c <StreamTemperatureToPort+0x10>)
 800a702:	9400      	str	r4, [sp, #0]
 800a704:	f7ff fabc 	bl	8009c80 <StreamMemsToPort>
}
 800a708:	b002      	add	sp, #8
 800a70a:	bd10      	pop	{r4, pc}
 800a70c:	0800a3e1 	.word	0x0800a3e1

0800a710 <StreamHumidityToPort>:
{
 800a710:	b510      	push	{r4, lr}
 800a712:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleHumidityToPort);
 800a714:	4c02      	ldr	r4, [pc, #8]	; (800a720 <StreamHumidityToPort+0x10>)
 800a716:	9400      	str	r4, [sp, #0]
 800a718:	f7ff fab2 	bl	8009c80 <StreamMemsToPort>
}
 800a71c:	b002      	add	sp, #8
 800a71e:	bd10      	pop	{r4, pc}
 800a720:	0800a4e9 	.word	0x0800a4e9

0800a724 <StreamPIRToPort>:
{
 800a724:	b510      	push	{r4, lr}
 800a726:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SamplePIRToPort);
 800a728:	4c02      	ldr	r4, [pc, #8]	; (800a734 <StreamPIRToPort+0x10>)
 800a72a:	9400      	str	r4, [sp, #0]
 800a72c:	f7ff faa8 	bl	8009c80 <StreamMemsToPort>
}
 800a730:	b002      	add	sp, #8
 800a732:	bd10      	pop	{r4, pc}
 800a734:	0800a585 	.word	0x0800a585

0800a738 <Module_MessagingTask>:
{
 800a738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a73a:	46c6      	mov	lr, r8
 800a73c:	b500      	push	{lr}
 800a73e:	ab06      	add	r3, sp, #24
 800a740:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800a742:	38f5      	subs	r0, #245	; 0xf5
 800a744:	38ff      	subs	r0, #255	; 0xff
 800a746:	b283      	uxth	r3, r0
 800a748:	2b0a      	cmp	r3, #10
 800a74a:	d900      	bls.n	800a74e <Module_MessagingTask+0x16>
 800a74c:	e127      	b.n	800a99e <Module_MessagingTask+0x266>
 800a74e:	0098      	lsls	r0, r3, #2
 800a750:	4b94      	ldr	r3, [pc, #592]	; (800a9a4 <Module_MessagingTask+0x26c>)
 800a752:	581b      	ldr	r3, [r3, r0]
 800a754:	469f      	mov	pc, r3
			SampleColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800a756:	1e4b      	subs	r3, r1, #1
 800a758:	4a93      	ldr	r2, [pc, #588]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a75a:	00d8      	lsls	r0, r3, #3
 800a75c:	1ac1      	subs	r1, r0, r3
 800a75e:	00c9      	lsls	r1, r1, #3
 800a760:	1851      	adds	r1, r2, r1
 800a762:	5d09      	ldrb	r1, [r1, r4]
 800a764:	1ac3      	subs	r3, r0, r3
 800a766:	00db      	lsls	r3, r3, #3
 800a768:	18d2      	adds	r2, r2, r3
 800a76a:	1914      	adds	r4, r2, r4
 800a76c:	7860      	ldrb	r0, [r4, #1]
 800a76e:	f7ff fced 	bl	800a14c <SampleColorToPort>
	Module_Status result = H0AR9_OK;
 800a772:	2000      	movs	r0, #0
}
 800a774:	bc04      	pop	{r2}
 800a776:	4690      	mov	r8, r2
 800a778:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SampleDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800a77a:	1e4b      	subs	r3, r1, #1
 800a77c:	4a8a      	ldr	r2, [pc, #552]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a77e:	00d8      	lsls	r0, r3, #3
 800a780:	1ac1      	subs	r1, r0, r3
 800a782:	00c9      	lsls	r1, r1, #3
 800a784:	1851      	adds	r1, r2, r1
 800a786:	5d09      	ldrb	r1, [r1, r4]
 800a788:	1ac3      	subs	r3, r0, r3
 800a78a:	00db      	lsls	r3, r3, #3
 800a78c:	18d2      	adds	r2, r2, r3
 800a78e:	1914      	adds	r4, r2, r4
 800a790:	7860      	ldrb	r0, [r4, #1]
 800a792:	f7ff fd7b 	bl	800a28c <SampleDistanceToPort>
	Module_Status result = H0AR9_OK;
 800a796:	2000      	movs	r0, #0
			break;
 800a798:	e7ec      	b.n	800a774 <Module_MessagingTask+0x3c>
			SampleTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800a79a:	1e4b      	subs	r3, r1, #1
 800a79c:	4a82      	ldr	r2, [pc, #520]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a79e:	00d8      	lsls	r0, r3, #3
 800a7a0:	1ac1      	subs	r1, r0, r3
 800a7a2:	00c9      	lsls	r1, r1, #3
 800a7a4:	1851      	adds	r1, r2, r1
 800a7a6:	5d09      	ldrb	r1, [r1, r4]
 800a7a8:	1ac3      	subs	r3, r0, r3
 800a7aa:	00db      	lsls	r3, r3, #3
 800a7ac:	18d2      	adds	r2, r2, r3
 800a7ae:	1914      	adds	r4, r2, r4
 800a7b0:	7860      	ldrb	r0, [r4, #1]
 800a7b2:	f7ff fe15 	bl	800a3e0 <SampleTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800a7b6:	2000      	movs	r0, #0
			break;
 800a7b8:	e7dc      	b.n	800a774 <Module_MessagingTask+0x3c>
			SampleHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800a7ba:	1e4b      	subs	r3, r1, #1
 800a7bc:	4a7a      	ldr	r2, [pc, #488]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a7be:	00d8      	lsls	r0, r3, #3
 800a7c0:	1ac1      	subs	r1, r0, r3
 800a7c2:	00c9      	lsls	r1, r1, #3
 800a7c4:	1851      	adds	r1, r2, r1
 800a7c6:	5d09      	ldrb	r1, [r1, r4]
 800a7c8:	1ac3      	subs	r3, r0, r3
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	18d2      	adds	r2, r2, r3
 800a7ce:	1914      	adds	r4, r2, r4
 800a7d0:	7860      	ldrb	r0, [r4, #1]
 800a7d2:	f7ff fe89 	bl	800a4e8 <SampleHumidityToPort>
	Module_Status result = H0AR9_OK;
 800a7d6:	2000      	movs	r0, #0
			break;
 800a7d8:	e7cc      	b.n	800a774 <Module_MessagingTask+0x3c>
			SamplePIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800a7da:	1e4b      	subs	r3, r1, #1
 800a7dc:	4a72      	ldr	r2, [pc, #456]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a7de:	00d8      	lsls	r0, r3, #3
 800a7e0:	1ac1      	subs	r1, r0, r3
 800a7e2:	00c9      	lsls	r1, r1, #3
 800a7e4:	1851      	adds	r1, r2, r1
 800a7e6:	5d09      	ldrb	r1, [r1, r4]
 800a7e8:	1ac3      	subs	r3, r0, r3
 800a7ea:	00db      	lsls	r3, r3, #3
 800a7ec:	18d2      	adds	r2, r2, r3
 800a7ee:	1914      	adds	r4, r2, r4
 800a7f0:	7860      	ldrb	r0, [r4, #1]
 800a7f2:	f7ff fec7 	bl	800a584 <SamplePIRToPort>
	Module_Status result = H0AR9_OK;
 800a7f6:	2000      	movs	r0, #0
			break;
 800a7f8:	e7bc      	b.n	800a774 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift] << 24);
 800a7fa:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] ) + ((uint32_t) cMessage[port - 1][7 + shift] << 8) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t)cMessage[port - 1][9 + shift] << 24);
 800a7fc:	4d6a      	ldr	r5, [pc, #424]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a7fe:	00c6      	lsls	r6, r0, #3
 800a800:	1a31      	subs	r1, r6, r0
 800a802:	00c9      	lsls	r1, r1, #3
 800a804:	1869      	adds	r1, r5, r1
 800a806:	190f      	adds	r7, r1, r4
 800a808:	79fb      	ldrb	r3, [r7, #7]
 800a80a:	021b      	lsls	r3, r3, #8
 800a80c:	7a3a      	ldrb	r2, [r7, #8]
 800a80e:	0412      	lsls	r2, r2, #16
 800a810:	189b      	adds	r3, r3, r2
 800a812:	79ba      	ldrb	r2, [r7, #6]
 800a814:	189b      	adds	r3, r3, r2
 800a816:	7a7a      	ldrb	r2, [r7, #9]
 800a818:	0612      	lsls	r2, r2, #24
 800a81a:	4698      	mov	r8, r3
 800a81c:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift] << 24);
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	0212      	lsls	r2, r2, #8
 800a822:	793b      	ldrb	r3, [r7, #4]
 800a824:	041b      	lsls	r3, r3, #16
 800a826:	469c      	mov	ip, r3
 800a828:	4462      	add	r2, ip
 800a82a:	78bb      	ldrb	r3, [r7, #2]
 800a82c:	469c      	mov	ip, r3
 800a82e:	4462      	add	r2, ip
 800a830:	797f      	ldrb	r7, [r7, #5]
 800a832:	063f      	lsls	r7, r7, #24
 800a834:	19d2      	adds	r2, r2, r7
			StreamColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800a836:	5d09      	ldrb	r1, [r1, r4]
 800a838:	1a30      	subs	r0, r6, r0
 800a83a:	00c0      	lsls	r0, r0, #3
 800a83c:	182d      	adds	r5, r5, r0
 800a83e:	192c      	adds	r4, r5, r4
 800a840:	7860      	ldrb	r0, [r4, #1]
 800a842:	4643      	mov	r3, r8
 800a844:	f7ff ff46 	bl	800a6d4 <StreamColorToPort>
	Module_Status result = H0AR9_OK;
 800a848:	2000      	movs	r0, #0
			break;
 800a84a:	e793      	b.n	800a774 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a84c:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] ) + ((uint32_t) cMessage[port - 1][7 + shift] << 8) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t)cMessage[port - 1][9 + shift]<<24);
 800a84e:	4d56      	ldr	r5, [pc, #344]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a850:	00c6      	lsls	r6, r0, #3
 800a852:	1a31      	subs	r1, r6, r0
 800a854:	00c9      	lsls	r1, r1, #3
 800a856:	1869      	adds	r1, r5, r1
 800a858:	190f      	adds	r7, r1, r4
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	021b      	lsls	r3, r3, #8
 800a85e:	7a3a      	ldrb	r2, [r7, #8]
 800a860:	0412      	lsls	r2, r2, #16
 800a862:	189b      	adds	r3, r3, r2
 800a864:	79ba      	ldrb	r2, [r7, #6]
 800a866:	189b      	adds	r3, r3, r2
 800a868:	7a7a      	ldrb	r2, [r7, #9]
 800a86a:	0612      	lsls	r2, r2, #24
 800a86c:	4698      	mov	r8, r3
 800a86e:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a870:	78fa      	ldrb	r2, [r7, #3]
 800a872:	0212      	lsls	r2, r2, #8
 800a874:	793b      	ldrb	r3, [r7, #4]
 800a876:	041b      	lsls	r3, r3, #16
 800a878:	469c      	mov	ip, r3
 800a87a:	4462      	add	r2, ip
 800a87c:	78bb      	ldrb	r3, [r7, #2]
 800a87e:	469c      	mov	ip, r3
 800a880:	4462      	add	r2, ip
 800a882:	797f      	ldrb	r7, [r7, #5]
 800a884:	063f      	lsls	r7, r7, #24
 800a886:	19d2      	adds	r2, r2, r7
			StreamDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800a888:	5d09      	ldrb	r1, [r1, r4]
 800a88a:	1a30      	subs	r0, r6, r0
 800a88c:	00c0      	lsls	r0, r0, #3
 800a88e:	182d      	adds	r5, r5, r0
 800a890:	192c      	adds	r4, r5, r4
 800a892:	7860      	ldrb	r0, [r4, #1]
 800a894:	4643      	mov	r3, r8
 800a896:	f7ff ff27 	bl	800a6e8 <StreamDistanceToPort>
	Module_Status result = H0AR9_OK;
 800a89a:	2000      	movs	r0, #0
			break;
 800a89c:	e76a      	b.n	800a774 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift]<<24);
 800a89e:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] ) + ((uint32_t) cMessage[port - 1][7 + shift] << 8) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t)cMessage[port - 1][9 + shift]<<24);
 800a8a0:	4d41      	ldr	r5, [pc, #260]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a8a2:	00c6      	lsls	r6, r0, #3
 800a8a4:	1a31      	subs	r1, r6, r0
 800a8a6:	00c9      	lsls	r1, r1, #3
 800a8a8:	1869      	adds	r1, r5, r1
 800a8aa:	190f      	adds	r7, r1, r4
 800a8ac:	79fb      	ldrb	r3, [r7, #7]
 800a8ae:	021b      	lsls	r3, r3, #8
 800a8b0:	7a3a      	ldrb	r2, [r7, #8]
 800a8b2:	0412      	lsls	r2, r2, #16
 800a8b4:	189b      	adds	r3, r3, r2
 800a8b6:	79ba      	ldrb	r2, [r7, #6]
 800a8b8:	189b      	adds	r3, r3, r2
 800a8ba:	7a7a      	ldrb	r2, [r7, #9]
 800a8bc:	0612      	lsls	r2, r2, #24
 800a8be:	4698      	mov	r8, r3
 800a8c0:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift]<<24);
 800a8c2:	78fa      	ldrb	r2, [r7, #3]
 800a8c4:	0212      	lsls	r2, r2, #8
 800a8c6:	793b      	ldrb	r3, [r7, #4]
 800a8c8:	041b      	lsls	r3, r3, #16
 800a8ca:	469c      	mov	ip, r3
 800a8cc:	4462      	add	r2, ip
 800a8ce:	78bb      	ldrb	r3, [r7, #2]
 800a8d0:	469c      	mov	ip, r3
 800a8d2:	4462      	add	r2, ip
 800a8d4:	797f      	ldrb	r7, [r7, #5]
 800a8d6:	063f      	lsls	r7, r7, #24
 800a8d8:	19d2      	adds	r2, r2, r7
			StreamTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800a8da:	5d09      	ldrb	r1, [r1, r4]
 800a8dc:	1a30      	subs	r0, r6, r0
 800a8de:	00c0      	lsls	r0, r0, #3
 800a8e0:	182d      	adds	r5, r5, r0
 800a8e2:	192c      	adds	r4, r5, r4
 800a8e4:	7860      	ldrb	r0, [r4, #1]
 800a8e6:	4643      	mov	r3, r8
 800a8e8:	f7ff ff08 	bl	800a6fc <StreamTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800a8ec:	2000      	movs	r0, #0
			break;
 800a8ee:	e741      	b.n	800a774 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift]<<24);
 800a8f0:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] ) + ((uint32_t) cMessage[port - 1][7 + shift] << 8) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t)cMessage[port - 1][9 + shift]<<24);
 800a8f2:	4d2d      	ldr	r5, [pc, #180]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a8f4:	00c6      	lsls	r6, r0, #3
 800a8f6:	1a31      	subs	r1, r6, r0
 800a8f8:	00c9      	lsls	r1, r1, #3
 800a8fa:	1869      	adds	r1, r5, r1
 800a8fc:	190f      	adds	r7, r1, r4
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	021b      	lsls	r3, r3, #8
 800a902:	7a3a      	ldrb	r2, [r7, #8]
 800a904:	0412      	lsls	r2, r2, #16
 800a906:	189b      	adds	r3, r3, r2
 800a908:	79ba      	ldrb	r2, [r7, #6]
 800a90a:	189b      	adds	r3, r3, r2
 800a90c:	7a7a      	ldrb	r2, [r7, #9]
 800a90e:	0612      	lsls	r2, r2, #24
 800a910:	4698      	mov	r8, r3
 800a912:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift]<<24);
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	0212      	lsls	r2, r2, #8
 800a918:	793b      	ldrb	r3, [r7, #4]
 800a91a:	041b      	lsls	r3, r3, #16
 800a91c:	469c      	mov	ip, r3
 800a91e:	4462      	add	r2, ip
 800a920:	78bb      	ldrb	r3, [r7, #2]
 800a922:	469c      	mov	ip, r3
 800a924:	4462      	add	r2, ip
 800a926:	797f      	ldrb	r7, [r7, #5]
 800a928:	063f      	lsls	r7, r7, #24
 800a92a:	19d2      	adds	r2, r2, r7
			StreamHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800a92c:	5d09      	ldrb	r1, [r1, r4]
 800a92e:	1a30      	subs	r0, r6, r0
 800a930:	00c0      	lsls	r0, r0, #3
 800a932:	182d      	adds	r5, r5, r0
 800a934:	192c      	adds	r4, r5, r4
 800a936:	7860      	ldrb	r0, [r4, #1]
 800a938:	4643      	mov	r3, r8
 800a93a:	f7ff fee9 	bl	800a710 <StreamHumidityToPort>
	Module_Status result = H0AR9_OK;
 800a93e:	2000      	movs	r0, #0
			break;
 800a940:	e718      	b.n	800a774 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a942:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] ) + ((uint32_t) cMessage[port - 1][7 + shift] << 8) + ((uint32_t) cMessage[port - 1][8 + shift] << 16) + ((uint32_t)cMessage[port - 1][9 + shift] <<24);
 800a944:	4d18      	ldr	r5, [pc, #96]	; (800a9a8 <Module_MessagingTask+0x270>)
 800a946:	00c6      	lsls	r6, r0, #3
 800a948:	1a31      	subs	r1, r6, r0
 800a94a:	00c9      	lsls	r1, r1, #3
 800a94c:	1869      	adds	r1, r5, r1
 800a94e:	190f      	adds	r7, r1, r4
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	7a3a      	ldrb	r2, [r7, #8]
 800a956:	0412      	lsls	r2, r2, #16
 800a958:	189b      	adds	r3, r3, r2
 800a95a:	79ba      	ldrb	r2, [r7, #6]
 800a95c:	189b      	adds	r3, r3, r2
 800a95e:	7a7a      	ldrb	r2, [r7, #9]
 800a960:	0612      	lsls	r2, r2, #24
 800a962:	4698      	mov	r8, r3
 800a964:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] ) + ((uint32_t) cMessage[port - 1][3 + shift] << 8) + ((uint32_t) cMessage[port - 1][4 + shift] << 16) + ((uint32_t)cMessage[port - 1][5 + shift] <<24);
 800a966:	78fa      	ldrb	r2, [r7, #3]
 800a968:	0212      	lsls	r2, r2, #8
 800a96a:	793b      	ldrb	r3, [r7, #4]
 800a96c:	041b      	lsls	r3, r3, #16
 800a96e:	469c      	mov	ip, r3
 800a970:	4462      	add	r2, ip
 800a972:	78bb      	ldrb	r3, [r7, #2]
 800a974:	469c      	mov	ip, r3
 800a976:	4462      	add	r2, ip
 800a978:	797f      	ldrb	r7, [r7, #5]
 800a97a:	063f      	lsls	r7, r7, #24
 800a97c:	19d2      	adds	r2, r2, r7
			StreamPIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800a97e:	5d09      	ldrb	r1, [r1, r4]
 800a980:	1a30      	subs	r0, r6, r0
 800a982:	00c0      	lsls	r0, r0, #3
 800a984:	182d      	adds	r5, r5, r0
 800a986:	192c      	adds	r4, r5, r4
 800a988:	7860      	ldrb	r0, [r4, #1]
 800a98a:	4643      	mov	r3, r8
 800a98c:	f7ff feca 	bl	800a724 <StreamPIRToPort>
	Module_Status result = H0AR9_OK;
 800a990:	2000      	movs	r0, #0
			break;
 800a992:	e6ef      	b.n	800a774 <Module_MessagingTask+0x3c>
	stopStream = true;
 800a994:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <Module_MessagingTask+0x274>)
 800a996:	2201      	movs	r2, #1
 800a998:	701a      	strb	r2, [r3, #0]
			result = H0AR9_OK;
 800a99a:	2000      	movs	r0, #0
 800a99c:	e6ea      	b.n	800a774 <Module_MessagingTask+0x3c>
			result = H0AR9_ERR_UnknownMessage;
 800a99e:	2001      	movs	r0, #1
 800a9a0:	e6e8      	b.n	800a774 <Module_MessagingTask+0x3c>
 800a9a2:	46c0      	nop			; (mov r8, r8)
 800a9a4:	0801b34c 	.word	0x0801b34c
 800a9a8:	20001424 	.word	0x20001424
 800a9ac:	200021fa 	.word	0x200021fa

0800a9b0 <StreamColorToCLI>:
{
 800a9b0:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleColorToString);
 800a9b2:	4a02      	ldr	r2, [pc, #8]	; (800a9bc <StreamColorToCLI+0xc>)
 800a9b4:	f7ff f9a8 	bl	8009d08 <StreamMemsToCLI>
}
 800a9b8:	bd10      	pop	{r4, pc}
 800a9ba:	46c0      	nop			; (mov r8, r8)
 800a9bc:	0800a1f5 	.word	0x0800a1f5

0800a9c0 <StreamDistanceToCLI>:
{
 800a9c0:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleDistanceToString);
 800a9c2:	4a02      	ldr	r2, [pc, #8]	; (800a9cc <StreamDistanceToCLI+0xc>)
 800a9c4:	f7ff f9a0 	bl	8009d08 <StreamMemsToCLI>
}
 800a9c8:	bd10      	pop	{r4, pc}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	0800a2f5 	.word	0x0800a2f5

0800a9d0 <StreamTemperatureToCLI>:
{
 800a9d0:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleTemperatureToString);
 800a9d2:	4a02      	ldr	r2, [pc, #8]	; (800a9dc <StreamTemperatureToCLI+0xc>)
 800a9d4:	f7ff f998 	bl	8009d08 <StreamMemsToCLI>
}
 800a9d8:	bd10      	pop	{r4, pc}
 800a9da:	46c0      	nop			; (mov r8, r8)
 800a9dc:	0800a3a9 	.word	0x0800a3a9

0800a9e0 <StreamHumidityToCLI>:
{
 800a9e0:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleHumidityToString);
 800a9e2:	4a02      	ldr	r2, [pc, #8]	; (800a9ec <StreamHumidityToCLI+0xc>)
 800a9e4:	f7ff f990 	bl	8009d08 <StreamMemsToCLI>
}
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	46c0      	nop			; (mov r8, r8)
 800a9ec:	0800a4b1 	.word	0x0800a4b1

0800a9f0 <StreamPIRToCLI>:
{
 800a9f0:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SamplePIRToString);
 800a9f2:	4a02      	ldr	r2, [pc, #8]	; (800a9fc <StreamPIRToCLI+0xc>)
 800a9f4:	f7ff f988 	bl	8009d08 <StreamMemsToCLI>
}
 800a9f8:	bd10      	pop	{r4, pc}
 800a9fa:	46c0      	nop			; (mov r8, r8)
 800a9fc:	0800a5dd 	.word	0x0800a5dd

0800aa00 <StreamSensorCommand>:
{
 800aa00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa02:	b08b      	sub	sp, #44	; 0x2c
 800aa04:	0005      	movs	r5, r0
 800aa06:	9100      	str	r1, [sp, #0]
 800aa08:	0014      	movs	r4, r2
	portBASE_TYPE sensNameLen = 0;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	9309      	str	r3, [sp, #36]	; 0x24
	*pcWriteBuffer = '\0';
 800aa0e:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800aa10:	9305      	str	r3, [sp, #20]
	portBASE_TYPE timeoutStrLen = 0;
 800aa12:	9306      	str	r3, [sp, #24]
	portBASE_TYPE portStrLen = 0;
 800aa14:	9307      	str	r3, [sp, #28]
	portBASE_TYPE modStrLen = 0;
 800aa16:	9308      	str	r3, [sp, #32]
	*ppSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, pSensNameLen);
 800aa18:	aa09      	add	r2, sp, #36	; 0x24
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	0020      	movs	r0, r4
 800aa1e:	f003 fdb5 	bl	800e58c <FreeRTOS_CLIGetParameter>
 800aa22:	0006      	movs	r6, r0
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &periodStrLen);
 800aa24:	aa05      	add	r2, sp, #20
 800aa26:	2102      	movs	r1, #2
 800aa28:	0020      	movs	r0, r4
 800aa2a:	f003 fdaf 	bl	800e58c <FreeRTOS_CLIGetParameter>
 800aa2e:	0007      	movs	r7, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &timeoutStrLen);
 800aa30:	aa06      	add	r2, sp, #24
 800aa32:	2103      	movs	r1, #3
 800aa34:	9401      	str	r4, [sp, #4]
 800aa36:	0020      	movs	r0, r4
 800aa38:	f003 fda8 	bl	800e58c <FreeRTOS_CLIGetParameter>
 800aa3c:	0004      	movs	r4, r0
	if ((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	d036      	beq.n	800aab0 <StreamSensorCommand+0xb0>
 800aa42:	2f00      	cmp	r7, #0
 800aa44:	d034      	beq.n	800aab0 <StreamSensorCommand+0xb0>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d032      	beq.n	800aab0 <StreamSensorCommand+0xb0>
	*pPeriod = atoi(pPeriodMSStr);
 800aa4a:	0038      	movs	r0, r7
 800aa4c:	f008 ffb3 	bl	80139b6 <atoi>
 800aa50:	9002      	str	r0, [sp, #8]
	*pTimeout = atoi(pTimeoutMSStr);
 800aa52:	0020      	movs	r0, r4
 800aa54:	f008 ffaf 	bl	80139b6 <atoi>
 800aa58:	9003      	str	r0, [sp, #12]
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &portStrLen);
 800aa5a:	aa07      	add	r2, sp, #28
 800aa5c:	2104      	movs	r1, #4
 800aa5e:	9c01      	ldr	r4, [sp, #4]
 800aa60:	0020      	movs	r0, r4
 800aa62:	f003 fd93 	bl	800e58c <FreeRTOS_CLIGetParameter>
 800aa66:	0007      	movs	r7, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 5, &modStrLen);
 800aa68:	aa08      	add	r2, sp, #32
 800aa6a:	2105      	movs	r1, #5
 800aa6c:	0020      	movs	r0, r4
 800aa6e:	f003 fd8d 	bl	800e58c <FreeRTOS_CLIGetParameter>
 800aa72:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800aa74:	d01a      	beq.n	800aaac <StreamSensorCommand+0xac>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800aa76:	2f00      	cmp	r7, #0
 800aa78:	d01a      	beq.n	800aab0 <StreamSensorCommand+0xb0>
	*pPort = atoi(pPortStr);
 800aa7a:	0038      	movs	r0, r7
 800aa7c:	f008 ff9b 	bl	80139b6 <atoi>
 800aa80:	b2c3      	uxtb	r3, r0
 800aa82:	9301      	str	r3, [sp, #4]
	*pModule = atoi(pModStr);
 800aa84:	0020      	movs	r0, r4
 800aa86:	f008 ff96 	bl	80139b6 <atoi>
 800aa8a:	b2c4      	uxtb	r4, r0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800aa8c:	2205      	movs	r2, #5
 800aa8e:	4944      	ldr	r1, [pc, #272]	; (800aba0 <StreamSensorCommand+0x1a0>)
 800aa90:	0030      	movs	r0, r6
 800aa92:	f009 fc99 	bl	80143c8 <strncmp>
	*pPortOrCLI = false;
 800aa96:	2700      	movs	r7, #0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d000      	beq.n	800aa9e <StreamSensorCommand+0x9e>
 800aa9c:	e070      	b.n	800ab80 <StreamSensorCommand+0x180>
				StreamColorToPort(port, module, period, timeout);
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	9a02      	ldr	r2, [sp, #8]
 800aaa2:	0021      	movs	r1, r4
 800aaa4:	9801      	ldr	r0, [sp, #4]
 800aaa6:	f7ff fe15 	bl	800a6d4 <StreamColorToPort>
 800aaaa:	e05e      	b.n	800ab6a <StreamSensorCommand+0x16a>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800aaac:	2f00      	cmp	r7, #0
 800aaae:	d051      	beq.n	800ab54 <StreamSensorCommand+0x154>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800aab0:	4a3c      	ldr	r2, [pc, #240]	; (800aba4 <StreamSensorCommand+0x1a4>)
 800aab2:	9900      	ldr	r1, [sp, #0]
 800aab4:	0028      	movs	r0, r5
 800aab6:	f009 fc11 	bl	80142dc <snprintf>
		return pdFALSE;
 800aaba:	e05b      	b.n	800ab74 <StreamSensorCommand+0x174>
				StreamDistanceToPort(port, module, period, timeout);
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	9a02      	ldr	r2, [sp, #8]
 800aac0:	0021      	movs	r1, r4
 800aac2:	9801      	ldr	r0, [sp, #4]
 800aac4:	f7ff fe10 	bl	800a6e8 <StreamDistanceToPort>
 800aac8:	e04f      	b.n	800ab6a <StreamSensorCommand+0x16a>
		else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800aaca:	2204      	movs	r2, #4
 800aacc:	4936      	ldr	r1, [pc, #216]	; (800aba8 <StreamSensorCommand+0x1a8>)
 800aace:	0030      	movs	r0, r6
 800aad0:	f009 fc7a 	bl	80143c8 <strncmp>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	d10d      	bne.n	800aaf4 <StreamSensorCommand+0xf4>
			if (portOrCLI) {
 800aad8:	2f00      	cmp	r7, #0
 800aada:	d004      	beq.n	800aae6 <StreamSensorCommand+0xe6>
				StreamTemperatureToCLI(period, timeout);
 800aadc:	9903      	ldr	r1, [sp, #12]
 800aade:	9802      	ldr	r0, [sp, #8]
 800aae0:	f7ff ff76 	bl	800a9d0 <StreamTemperatureToCLI>
 800aae4:	e041      	b.n	800ab6a <StreamSensorCommand+0x16a>
				StreamTemperatureToPort(port, module, period, timeout);
 800aae6:	9b03      	ldr	r3, [sp, #12]
 800aae8:	9a02      	ldr	r2, [sp, #8]
 800aaea:	0021      	movs	r1, r4
 800aaec:	9801      	ldr	r0, [sp, #4]
 800aaee:	f7ff fe05 	bl	800a6fc <StreamTemperatureToPort>
 800aaf2:	e03a      	b.n	800ab6a <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800aaf4:	2208      	movs	r2, #8
 800aaf6:	492d      	ldr	r1, [pc, #180]	; (800abac <StreamSensorCommand+0x1ac>)
 800aaf8:	0030      	movs	r0, r6
 800aafa:	f009 fc65 	bl	80143c8 <strncmp>
 800aafe:	2800      	cmp	r0, #0
 800ab00:	d10d      	bne.n	800ab1e <StreamSensorCommand+0x11e>
			if (portOrCLI) {
 800ab02:	2f00      	cmp	r7, #0
 800ab04:	d004      	beq.n	800ab10 <StreamSensorCommand+0x110>
				StreamHumidityToCLI(period, timeout);
 800ab06:	9903      	ldr	r1, [sp, #12]
 800ab08:	9802      	ldr	r0, [sp, #8]
 800ab0a:	f7ff ff69 	bl	800a9e0 <StreamHumidityToCLI>
 800ab0e:	e02c      	b.n	800ab6a <StreamSensorCommand+0x16a>
				StreamHumidityToPort(port, module, period, timeout);
 800ab10:	9b03      	ldr	r3, [sp, #12]
 800ab12:	9a02      	ldr	r2, [sp, #8]
 800ab14:	0021      	movs	r1, r4
 800ab16:	9801      	ldr	r0, [sp, #4]
 800ab18:	f7ff fdfa 	bl	800a710 <StreamHumidityToPort>
 800ab1c:	e025      	b.n	800ab6a <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800ab1e:	2203      	movs	r2, #3
 800ab20:	4923      	ldr	r1, [pc, #140]	; (800abb0 <StreamSensorCommand+0x1b0>)
 800ab22:	0030      	movs	r0, r6
 800ab24:	f009 fc50 	bl	80143c8 <strncmp>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d10d      	bne.n	800ab48 <StreamSensorCommand+0x148>
			if (portOrCLI) {
 800ab2c:	2f00      	cmp	r7, #0
 800ab2e:	d004      	beq.n	800ab3a <StreamSensorCommand+0x13a>
				StreamPIRToCLI(period, timeout);
 800ab30:	9903      	ldr	r1, [sp, #12]
 800ab32:	9802      	ldr	r0, [sp, #8]
 800ab34:	f7ff ff5c 	bl	800a9f0 <StreamPIRToCLI>
 800ab38:	e017      	b.n	800ab6a <StreamSensorCommand+0x16a>
				StreamPIRToPort(port, module, period, timeout);
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	9a02      	ldr	r2, [sp, #8]
 800ab3e:	0021      	movs	r1, r4
 800ab40:	9801      	ldr	r0, [sp, #4]
 800ab42:	f7ff fdef 	bl	800a724 <StreamPIRToPort>
 800ab46:	e010      	b.n	800ab6a <StreamSensorCommand+0x16a>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800ab48:	4a16      	ldr	r2, [pc, #88]	; (800aba4 <StreamSensorCommand+0x1a4>)
 800ab4a:	9900      	ldr	r1, [sp, #0]
 800ab4c:	0028      	movs	r0, r5
 800ab4e:	f009 fbc5 	bl	80142dc <snprintf>
 800ab52:	e00a      	b.n	800ab6a <StreamSensorCommand+0x16a>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800ab54:	2205      	movs	r2, #5
 800ab56:	4912      	ldr	r1, [pc, #72]	; (800aba0 <StreamSensorCommand+0x1a0>)
 800ab58:	0030      	movs	r0, r6
 800ab5a:	f009 fc35 	bl	80143c8 <strncmp>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d10b      	bne.n	800ab7a <StreamSensorCommand+0x17a>
				StreamColorToCLI(period, timeout);
 800ab62:	9903      	ldr	r1, [sp, #12]
 800ab64:	9802      	ldr	r0, [sp, #8]
 800ab66:	f7ff ff23 	bl	800a9b0 <StreamColorToCLI>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800ab6a:	4a12      	ldr	r2, [pc, #72]	; (800abb4 <StreamSensorCommand+0x1b4>)
 800ab6c:	9900      	ldr	r1, [sp, #0]
 800ab6e:	0028      	movs	r0, r5
 800ab70:	f009 fbb4 	bl	80142dc <snprintf>
}
 800ab74:	2000      	movs	r0, #0
 800ab76:	b00b      	add	sp, #44	; 0x2c
 800ab78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pPortOrCLI = true;
 800ab7a:	2701      	movs	r7, #1
	uint8_t module = 0;
 800ab7c:	2400      	movs	r4, #0
	uint8_t port = 0;
 800ab7e:	9401      	str	r4, [sp, #4]
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800ab80:	2208      	movs	r2, #8
 800ab82:	490d      	ldr	r1, [pc, #52]	; (800abb8 <StreamSensorCommand+0x1b8>)
 800ab84:	0030      	movs	r0, r6
 800ab86:	f009 fc1f 	bl	80143c8 <strncmp>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	d19d      	bne.n	800aaca <StreamSensorCommand+0xca>
			if (portOrCLI) {
 800ab8e:	2f00      	cmp	r7, #0
 800ab90:	d100      	bne.n	800ab94 <StreamSensorCommand+0x194>
 800ab92:	e793      	b.n	800aabc <StreamSensorCommand+0xbc>
				StreamDistanceToCLI(period, timeout);
 800ab94:	9903      	ldr	r1, [sp, #12]
 800ab96:	9802      	ldr	r0, [sp, #8]
 800ab98:	f7ff ff12 	bl	800a9c0 <StreamDistanceToCLI>
 800ab9c:	e7e5      	b.n	800ab6a <StreamSensorCommand+0x16a>
 800ab9e:	46c0      	nop			; (mov r8, r8)
 800aba0:	0801b3ec 	.word	0x0801b3ec
 800aba4:	0801b3d8 	.word	0x0801b3d8
 800aba8:	0801b400 	.word	0x0801b400
 800abac:	0801b408 	.word	0x0801b408
 800abb0:	0801b414 	.word	0x0801b414
 800abb4:	0801ab5c 	.word	0x0801ab5c
 800abb8:	0801b3f4 	.word	0x0801b3f4

0800abbc <SaveToRO>:

uint8_t SaveToRO(void)
{
 800abbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abbe:	46de      	mov	lr, fp
 800abc0:	4657      	mov	r7, sl
 800abc2:	464e      	mov	r6, r9
 800abc4:	4645      	mov	r5, r8
 800abc6:	b5e0      	push	{r5, r6, r7, lr}
 800abc8:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800abca:	2215      	movs	r2, #21
 800abcc:	2100      	movs	r1, #0
 800abce:	a802      	add	r0, sp, #8
 800abd0:	f009 f98a 	bl	8013ee8 <memset>

	HAL_FLASH_Unlock();
 800abd4:	f006 fc8a 	bl	80114ec <HAL_FLASH_Unlock>

	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800abd8:	4872      	ldr	r0, [pc, #456]	; (800ada4 <SaveToRO+0x1e8>)
 800abda:	f006 fd49 	bl	8011670 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800abde:	4872      	ldr	r0, [pc, #456]	; (800ada8 <SaveToRO+0x1ec>)
 800abe0:	f006 fca0 	bl	8011524 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d112      	bne.n	800ac0e <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800abe8:	4a70      	ldr	r2, [pc, #448]	; (800adac <SaveToRO+0x1f0>)
 800abea:	6913      	ldr	r3, [r2, #16]
 800abec:	2102      	movs	r1, #2
 800abee:	438b      	bics	r3, r1
 800abf0:	6113      	str	r3, [r2, #16]
	}

	/* Save number of modules and myID */
	if (myID)
 800abf2:	4b6f      	ldr	r3, [pc, #444]	; (800adb0 <SaveToRO+0x1f4>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d113      	bne.n	800ac22 <SaveToRO+0x66>
		}
	}

	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800abfa:	4b6e      	ldr	r3, [pc, #440]	; (800adb4 <SaveToRO+0x1f8>)
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d100      	bne.n	800ac04 <SaveToRO+0x48>
 800ac02:	e0ca      	b.n	800ad9a <SaveToRO+0x1de>
 800ac04:	2500      	movs	r5, #0
 800ac06:	4c6c      	ldr	r4, [pc, #432]	; (800adb8 <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType)
 800ac08:	4b6c      	ldr	r3, [pc, #432]	; (800adbc <SaveToRO+0x200>)
 800ac0a:	4698      	mov	r8, r3
 800ac0c:	e06e      	b.n	800acec <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800ac0e:	4b6c      	ldr	r3, [pc, #432]	; (800adc0 <SaveToRO+0x204>)
 800ac10:	69d8      	ldr	r0, [r3, #28]
 800ac12:	b2c0      	uxtb	r0, r0
	}

	HAL_FLASH_Lock();

	return result;
}
 800ac14:	b009      	add	sp, #36	; 0x24
 800ac16:	bc3c      	pop	{r2, r3, r4, r5}
 800ac18:	4690      	mov	r8, r2
 800ac1a:	4699      	mov	r9, r3
 800ac1c:	46a2      	mov	sl, r4
 800ac1e:	46ab      	mov	fp, r5
 800ac20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800ac22:	4a68      	ldr	r2, [pc, #416]	; (800adc4 <SaveToRO+0x208>)
 800ac24:	7812      	ldrb	r2, [r2, #0]
 800ac26:	0212      	lsls	r2, r2, #8
 800ac28:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800ac2a:	b292      	uxth	r2, r2
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	495d      	ldr	r1, [pc, #372]	; (800ada4 <SaveToRO+0x1e8>)
 800ac30:	2001      	movs	r0, #1
 800ac32:	f006 fca5 	bl	8011580 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800ac36:	485c      	ldr	r0, [pc, #368]	; (800ada8 <SaveToRO+0x1ec>)
 800ac38:	f006 fc74 	bl	8011524 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d111      	bne.n	800ac64 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ac40:	4a5a      	ldr	r2, [pc, #360]	; (800adac <SaveToRO+0x1f0>)
 800ac42:	6913      	ldr	r3, [r2, #16]
 800ac44:	2101      	movs	r1, #1
 800ac46:	438b      	bics	r3, r1
 800ac48:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800ac4a:	4b5e      	ldr	r3, [pc, #376]	; (800adc4 <SaveToRO+0x208>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800ac52:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d0d0      	beq.n	800abfa <SaveToRO+0x3e>
 800ac58:	2316      	movs	r3, #22
 800ac5a:	469b      	mov	fp, r3
 800ac5c:	4b5a      	ldr	r3, [pc, #360]	; (800adc8 <SaveToRO+0x20c>)
 800ac5e:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800ac60:	4698      	mov	r8, r3
 800ac62:	e02a      	b.n	800acba <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800ac64:	4b56      	ldr	r3, [pc, #344]	; (800adc0 <SaveToRO+0x204>)
 800ac66:	69d8      	ldr	r0, [r3, #28]
 800ac68:	b2c0      	uxtb	r0, r0
 800ac6a:	e7d3      	b.n	800ac14 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800ac6c:	4b54      	ldr	r3, [pc, #336]	; (800adc0 <SaveToRO+0x204>)
 800ac6e:	69d8      	ldr	r0, [r3, #28]
 800ac70:	b2c0      	uxtb	r0, r0
 800ac72:	e7cf      	b.n	800ac14 <SaveToRO+0x58>
 800ac74:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800ac76:	42b4      	cmp	r4, r6
 800ac78:	d017      	beq.n	800acaa <SaveToRO+0xee>
				if (array[i-1][0]) {
 800ac7a:	4643      	mov	r3, r8
 800ac7c:	5afb      	ldrh	r3, [r7, r3]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d0f8      	beq.n	800ac74 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800ac82:	8822      	ldrh	r2, [r4, #0]
 800ac84:	4b47      	ldr	r3, [pc, #284]	; (800ada4 <SaveToRO+0x1e8>)
 800ac86:	18e9      	adds	r1, r5, r3
 800ac88:	2300      	movs	r3, #0
 800ac8a:	2001      	movs	r0, #1
 800ac8c:	f006 fc78 	bl	8011580 <HAL_FLASH_Program>
					add += 2;
 800ac90:	3502      	adds	r5, #2
 800ac92:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800ac94:	4844      	ldr	r0, [pc, #272]	; (800ada8 <SaveToRO+0x1ec>)
 800ac96:	f006 fc45 	bl	8011524 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d1e6      	bne.n	800ac6c <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ac9e:	4a43      	ldr	r2, [pc, #268]	; (800adac <SaveToRO+0x1f0>)
 800aca0:	6913      	ldr	r3, [r2, #16]
 800aca2:	2101      	movs	r1, #1
 800aca4:	438b      	bics	r3, r1
 800aca6:	6113      	str	r3, [r2, #16]
 800aca8:	e7e4      	b.n	800ac74 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800acaa:	464b      	mov	r3, r9
 800acac:	3301      	adds	r3, #1
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	4699      	mov	r9, r3
 800acb2:	4b44      	ldr	r3, [pc, #272]	; (800adc4 <SaveToRO+0x208>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	454b      	cmp	r3, r9
 800acb8:	d39f      	bcc.n	800abfa <SaveToRO+0x3e>
 800acba:	465e      	mov	r6, fp
 800acbc:	464b      	mov	r3, r9
 800acbe:	435e      	muls	r6, r3
 800acc0:	0034      	movs	r4, r6
 800acc2:	3c16      	subs	r4, #22
 800acc4:	4454      	add	r4, sl
 800acc6:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800acc8:	1e5f      	subs	r7, r3, #1
 800acca:	465b      	mov	r3, fp
 800accc:	435f      	muls	r7, r3
 800acce:	e7d4      	b.n	800ac7a <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800acd0:	4b3b      	ldr	r3, [pc, #236]	; (800adc0 <SaveToRO+0x204>)
 800acd2:	69d8      	ldr	r0, [r3, #28]
 800acd4:	b2c0      	uxtb	r0, r0
 800acd6:	e79d      	b.n	800ac14 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800acd8:	4b39      	ldr	r3, [pc, #228]	; (800adc0 <SaveToRO+0x204>)
 800acda:	69d8      	ldr	r0, [r3, #28]
 800acdc:	b2c0      	uxtb	r0, r0
 800acde:	e799      	b.n	800ac14 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800ace0:	3501      	adds	r5, #1
 800ace2:	b2ed      	uxtb	r5, r5
 800ace4:	4b33      	ldr	r3, [pc, #204]	; (800adb4 <SaveToRO+0x1f8>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	42ab      	cmp	r3, r5
 800acea:	d956      	bls.n	800ad9a <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType)
 800acec:	9501      	str	r5, [sp, #4]
 800acee:	00ab      	lsls	r3, r5, #2
 800acf0:	195b      	adds	r3, r3, r5
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4642      	mov	r2, r8
 800acf6:	5c9b      	ldrb	r3, [r3, r2]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d0f1      	beq.n	800ace0 <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800acfc:	23fe      	movs	r3, #254	; 0xfe
 800acfe:	aa02      	add	r2, sp, #8
 800ad00:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800ad02:	00a9      	lsls	r1, r5, #2
 800ad04:	1949      	adds	r1, r1, r5
 800ad06:	0089      	lsls	r1, r1, #2
 800ad08:	4b2c      	ldr	r3, [pc, #176]	; (800adbc <SaveToRO+0x200>)
 800ad0a:	469c      	mov	ip, r3
 800ad0c:	4461      	add	r1, ip
 800ad0e:	2214      	movs	r2, #20
 800ad10:	ab02      	add	r3, sp, #8
 800ad12:	1c58      	adds	r0, r3, #1
 800ad14:	f009 f8df 	bl	8013ed6 <memcpy>
 800ad18:	2314      	movs	r3, #20
 800ad1a:	469b      	mov	fp, r3
 800ad1c:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800ad1e:	ae02      	add	r6, sp, #8
 800ad20:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ad22:	4f22      	ldr	r7, [pc, #136]	; (800adac <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800ad24:	5b32      	ldrh	r2, [r6, r4]
 800ad26:	2300      	movs	r3, #0
 800ad28:	0021      	movs	r1, r4
 800ad2a:	2001      	movs	r0, #1
 800ad2c:	f006 fc28 	bl	8011580 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800ad30:	481d      	ldr	r0, [pc, #116]	; (800ada8 <SaveToRO+0x1ec>)
 800ad32:	f006 fbf7 	bl	8011524 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800ad36:	2800      	cmp	r0, #0
 800ad38:	d1ca      	bne.n	800acd0 <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	2201      	movs	r2, #1
 800ad3e:	4393      	bics	r3, r2
 800ad40:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800ad42:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800ad44:	455c      	cmp	r4, fp
 800ad46:	d1ed      	bne.n	800ad24 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800ad48:	2700      	movs	r7, #0
 800ad4a:	9a01      	ldr	r2, [sp, #4]
 800ad4c:	0093      	lsls	r3, r2, #2
 800ad4e:	189e      	adds	r6, r3, r2
 800ad50:	00b6      	lsls	r6, r6, #2
 800ad52:	4b1a      	ldr	r3, [pc, #104]	; (800adbc <SaveToRO+0x200>)
 800ad54:	469a      	mov	sl, r3
 800ad56:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ad58:	4b14      	ldr	r3, [pc, #80]	; (800adac <SaveToRO+0x1f0>)
 800ad5a:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800ad5c:	4653      	mov	r3, sl
 800ad5e:	68de      	ldr	r6, [r3, #12]
 800ad60:	0030      	movs	r0, r6
 800ad62:	f7f5 f9d9 	bl	8000118 <strlen>
 800ad66:	3001      	adds	r0, #1
 800ad68:	0840      	lsrs	r0, r0, #1
 800ad6a:	4287      	cmp	r7, r0
 800ad6c:	d2b8      	bcs.n	800ace0 <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800ad6e:	007b      	lsls	r3, r7, #1
 800ad70:	5af2      	ldrh	r2, [r6, r3]
 800ad72:	2300      	movs	r3, #0
 800ad74:	0021      	movs	r1, r4
 800ad76:	2001      	movs	r0, #1
 800ad78:	f006 fc02 	bl	8011580 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800ad7c:	480a      	ldr	r0, [pc, #40]	; (800ada8 <SaveToRO+0x1ec>)
 800ad7e:	f006 fbd1 	bl	8011524 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d1a8      	bne.n	800acd8 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800ad86:	465b      	mov	r3, fp
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	4393      	bics	r3, r2
 800ad8e:	465a      	mov	r2, fp
 800ad90:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800ad92:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800ad94:	3701      	adds	r7, #1
 800ad96:	b2ff      	uxtb	r7, r7
 800ad98:	e7e0      	b.n	800ad5c <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800ad9a:	f006 fbb9 	bl	8011510 <HAL_FLASH_Lock>
	return result;
 800ad9e:	2000      	movs	r0, #0
 800ada0:	e738      	b.n	800ac14 <SaveToRO+0x58>
 800ada2:	46c0      	nop			; (mov r8, r8)
 800ada4:	0801d800 	.word	0x0801d800
 800ada8:	0000c350 	.word	0x0000c350
 800adac:	40022000 	.word	0x40022000
 800adb0:	20001792 	.word	0x20001792
 800adb4:	2000193f 	.word	0x2000193f
 800adb8:	0801dc00 	.word	0x0801dc00
 800adbc:	20006a28 	.word	0x20006a28
 800adc0:	20006fc8 	.word	0x20006fc8
 800adc4:	20000044 	.word	0x20000044
 800adc8:	20001194 	.word	0x20001194

0800adcc <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO ---
*/
uint8_t ClearROtopology(void)
{
 800adcc:	b510      	push	{r4, lr}
	// Clear the array
	memset(array, 0, sizeof(array));
 800adce:	228f      	movs	r2, #143	; 0x8f
 800add0:	0092      	lsls	r2, r2, #2
 800add2:	2100      	movs	r1, #0
 800add4:	4805      	ldr	r0, [pc, #20]	; (800adec <ClearROtopology+0x20>)
 800add6:	f009 f887 	bl	8013ee8 <memset>
	N = 1; myID = 0;
 800adda:	4b05      	ldr	r3, [pc, #20]	; (800adf0 <ClearROtopology+0x24>)
 800addc:	2201      	movs	r2, #1
 800adde:	701a      	strb	r2, [r3, #0]
 800ade0:	4b04      	ldr	r3, [pc, #16]	; (800adf4 <ClearROtopology+0x28>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	701a      	strb	r2, [r3, #0]

	return SaveToRO();
 800ade6:	f7ff fee9 	bl	800abbc <SaveToRO>
}
 800adea:	bd10      	pop	{r4, pc}
 800adec:	20001194 	.word	0x20001194
 800adf0:	20000044 	.word	0x20000044
 800adf4:	20001792 	.word	0x20001792

0800adf8 <GetPort>:

/* --- Get the port for a given UART.
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800adf8:	6800      	ldr	r0, [r0, #0]
 800adfa:	4b11      	ldr	r3, [pc, #68]	; (800ae40 <GetPort+0x48>)
 800adfc:	4298      	cmp	r0, r3
 800adfe:	d014      	beq.n	800ae2a <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800ae00:	4b10      	ldr	r3, [pc, #64]	; (800ae44 <GetPort+0x4c>)
 800ae02:	4298      	cmp	r0, r3
 800ae04:	d013      	beq.n	800ae2e <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART6)
 800ae06:	4b10      	ldr	r3, [pc, #64]	; (800ae48 <GetPort+0x50>)
 800ae08:	4298      	cmp	r0, r3
 800ae0a:	d012      	beq.n	800ae32 <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART3)
 800ae0c:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <GetPort+0x54>)
 800ae0e:	4298      	cmp	r0, r3
 800ae10:	d011      	beq.n	800ae36 <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART1)
 800ae12:	4b0f      	ldr	r3, [pc, #60]	; (800ae50 <GetPort+0x58>)
 800ae14:	4298      	cmp	r0, r3
 800ae16:	d010      	beq.n	800ae3a <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART5)
			return P6;
	return 0;
 800ae18:	4b0e      	ldr	r3, [pc, #56]	; (800ae54 <GetPort+0x5c>)
 800ae1a:	469c      	mov	ip, r3
 800ae1c:	4460      	add	r0, ip
 800ae1e:	4243      	negs	r3, r0
 800ae20:	4158      	adcs	r0, r3
 800ae22:	4240      	negs	r0, r0
 800ae24:	2306      	movs	r3, #6
 800ae26:	4018      	ands	r0, r3
}
 800ae28:	4770      	bx	lr
			return P1;
 800ae2a:	2001      	movs	r0, #1
 800ae2c:	e7fc      	b.n	800ae28 <GetPort+0x30>
			return P2;
 800ae2e:	2002      	movs	r0, #2
 800ae30:	e7fa      	b.n	800ae28 <GetPort+0x30>
			return P3;
 800ae32:	2003      	movs	r0, #3
 800ae34:	e7f8      	b.n	800ae28 <GetPort+0x30>
			return P4;
 800ae36:	2004      	movs	r0, #4
 800ae38:	e7f6      	b.n	800ae28 <GetPort+0x30>
			return P5;
 800ae3a:	2005      	movs	r0, #5
 800ae3c:	e7f4      	b.n	800ae28 <GetPort+0x30>
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	40004c00 	.word	0x40004c00
 800ae44:	40004400 	.word	0x40004400
 800ae48:	40011400 	.word	0x40011400
 800ae4c:	40004800 	.word	0x40004800
 800ae50:	40013800 	.word	0x40013800
 800ae54:	bfffb000 	.word	0xbfffb000

0800ae58 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ae58:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ae5a:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ae60:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ae62:	2280      	movs	r2, #128	; 0x80
 800ae64:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae66:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae68:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ae6a:	3320      	adds	r3, #32
 800ae6c:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae6e:	2380      	movs	r3, #128	; 0x80
 800ae70:	019b      	lsls	r3, r3, #6
 800ae72:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ae74:	f005 fe42 	bl	8010afc <HAL_DMA_Init>
}
 800ae78:	bd10      	pop	{r4, pc}

0800ae7a <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ae7a:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ae7c:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae7e:	2310      	movs	r3, #16
 800ae80:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ae82:	2300      	movs	r3, #0
 800ae84:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ae86:	2280      	movs	r2, #128	; 0x80
 800ae88:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae8a:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae8c:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800ae8e:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ae90:	2380      	movs	r3, #128	; 0x80
 800ae92:	019b      	lsls	r3, r3, #6
 800ae94:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ae96:	f005 fe31 	bl	8010afc <HAL_DMA_Init>
}
 800ae9a:	bd10      	pop	{r4, pc}

0800ae9c <DMA_Init>:
{
 800ae9c:	b510      	push	{r4, lr}
 800ae9e:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800aea0:	4b20      	ldr	r3, [pc, #128]	; (800af24 <DMA_Init+0x88>)
 800aea2:	6959      	ldr	r1, [r3, #20]
 800aea4:	2201      	movs	r2, #1
 800aea6:	4311      	orrs	r1, r2
 800aea8:	6159      	str	r1, [r3, #20]
 800aeaa:	6959      	ldr	r1, [r3, #20]
 800aeac:	400a      	ands	r2, r1
 800aeae:	9200      	str	r2, [sp, #0]
 800aeb0:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800aeb2:	6959      	ldr	r1, [r3, #20]
 800aeb4:	2202      	movs	r2, #2
 800aeb6:	4311      	orrs	r1, r2
 800aeb8:	6159      	str	r1, [r3, #20]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	401a      	ands	r2, r3
 800aebe:	9201      	str	r2, [sp, #4]
 800aec0:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800aec2:	4c19      	ldr	r4, [pc, #100]	; (800af28 <DMA_Init+0x8c>)
 800aec4:	4919      	ldr	r1, [pc, #100]	; (800af2c <DMA_Init+0x90>)
 800aec6:	0020      	movs	r0, r4
 800aec8:	f7ff ffc6 	bl	800ae58 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800aecc:	0020      	movs	r0, r4
 800aece:	3038      	adds	r0, #56	; 0x38
 800aed0:	4917      	ldr	r1, [pc, #92]	; (800af30 <DMA_Init+0x94>)
 800aed2:	f7ff ffc1 	bl	800ae58 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800aed6:	0020      	movs	r0, r4
 800aed8:	3070      	adds	r0, #112	; 0x70
 800aeda:	4916      	ldr	r1, [pc, #88]	; (800af34 <DMA_Init+0x98>)
 800aedc:	f7ff ffbc 	bl	800ae58 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800aee0:	0020      	movs	r0, r4
 800aee2:	30a8      	adds	r0, #168	; 0xa8
 800aee4:	4914      	ldr	r1, [pc, #80]	; (800af38 <DMA_Init+0x9c>)
 800aee6:	f7ff ffb7 	bl	800ae58 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800aeea:	0020      	movs	r0, r4
 800aeec:	30e0      	adds	r0, #224	; 0xe0
 800aeee:	4913      	ldr	r1, [pc, #76]	; (800af3c <DMA_Init+0xa0>)
 800aef0:	f7ff ffb2 	bl	800ae58 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800aef4:	0020      	movs	r0, r4
 800aef6:	3019      	adds	r0, #25
 800aef8:	30ff      	adds	r0, #255	; 0xff
 800aefa:	4911      	ldr	r1, [pc, #68]	; (800af40 <DMA_Init+0xa4>)
 800aefc:	f7ff ffac 	bl	800ae58 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800af00:	4c10      	ldr	r4, [pc, #64]	; (800af44 <DMA_Init+0xa8>)
 800af02:	4911      	ldr	r1, [pc, #68]	; (800af48 <DMA_Init+0xac>)
 800af04:	0020      	movs	r0, r4
 800af06:	f7ff ffb8 	bl	800ae7a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800af0a:	0020      	movs	r0, r4
 800af0c:	3038      	adds	r0, #56	; 0x38
 800af0e:	490f      	ldr	r1, [pc, #60]	; (800af4c <DMA_Init+0xb0>)
 800af10:	f7ff ffb3 	bl	800ae7a <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800af14:	0020      	movs	r0, r4
 800af16:	3070      	adds	r0, #112	; 0x70
 800af18:	490d      	ldr	r1, [pc, #52]	; (800af50 <DMA_Init+0xb4>)
 800af1a:	f7ff ffae 	bl	800ae7a <DMA_MSG_TX_CH_Init>
}
 800af1e:	b002      	add	sp, #8
 800af20:	bd10      	pop	{r4, pc}
 800af22:	46c0      	nop			; (mov r8, r8)
 800af24:	40021000 	.word	0x40021000
 800af28:	20002214 	.word	0x20002214
 800af2c:	40020008 	.word	0x40020008
 800af30:	40020030 	.word	0x40020030
 800af34:	40020058 	.word	0x40020058
 800af38:	4002006c 	.word	0x4002006c
 800af3c:	4002041c 	.word	0x4002041c
 800af40:	40020430 	.word	0x40020430
 800af44:	20002364 	.word	0x20002364
 800af48:	4002001c 	.word	0x4002001c
 800af4c:	40020044 	.word	0x40020044
 800af50:	40020080 	.word	0x40020080

0800af54 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800af54:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800af56:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af58:	2300      	movs	r3, #0
 800af5a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800af5c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800af5e:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af60:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af62:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800af64:	3320      	adds	r3, #32
 800af66:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800af68:	2380      	movs	r3, #128	; 0x80
 800af6a:	015b      	lsls	r3, r3, #5
 800af6c:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800af6e:	f005 fdc5 	bl	8010afc <HAL_DMA_Init>
}
 800af72:	bd10      	pop	{r4, pc}

0800af74 <StopStreamDMA>:
/* Private functions ----------------------------------------*/
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA ---
 */
void StopStreamDMA(uint8_t port) {
 800af74:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA = &streamDMA[port - 1];
 800af76:	1e44      	subs	r4, r0, #1
 800af78:	00e5      	lsls	r5, r4, #3
 800af7a:	1b28      	subs	r0, r5, r4
 800af7c:	00c0      	lsls	r0, r0, #3
 800af7e:	4e07      	ldr	r6, [pc, #28]	; (800af9c <StopStreamDMA+0x28>)
 800af80:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800af82:	f005 fe1a 	bl	8010bba <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 800af86:	1b2d      	subs	r5, r5, r4
 800af88:	00ed      	lsls	r5, r5, #3
 800af8a:	59aa      	ldr	r2, [r5, r6]
 800af8c:	2300      	movs	r3, #0
 800af8e:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] = 0;
 800af90:	00a4      	lsls	r4, r4, #2
 800af92:	4a03      	ldr	r2, [pc, #12]	; (800afa0 <StopStreamDMA+0x2c>)
 800af94:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] = 0;
 800af96:	4a03      	ldr	r2, [pc, #12]	; (800afa4 <StopStreamDMA+0x30>)
 800af98:	50a3      	str	r3, [r4, r2]

}
 800af9a:	bd70      	pop	{r4, r5, r6, pc}
 800af9c:	2000240c 	.word	0x2000240c
 800afa0:	20001eb8 	.word	0x20001eb8
 800afa4:	20001ee8 	.word	0x20001ee8

0800afa8 <StopMsgDMA>:


/* --- Stop a messaging DMA ---
 */
void StopMsgDMA(uint8_t port){
 800afa8:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;

	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800afaa:	1e45      	subs	r5, r0, #1
 800afac:	00ec      	lsls	r4, r5, #3
 800afae:	1b60      	subs	r0, r4, r5
 800afb0:	00c0      	lsls	r0, r0, #3
 800afb2:	4e05      	ldr	r6, [pc, #20]	; (800afc8 <StopMsgDMA+0x20>)
 800afb4:	1980      	adds	r0, r0, r6

	HAL_DMA_Abort(hDMA);
 800afb6:	f005 fe00 	bl	8010bba <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800afba:	1b64      	subs	r4, r4, r5
 800afbc:	00e4      	lsls	r4, r4, #3
 800afbe:	59a3      	ldr	r3, [r4, r6]
 800afc0:	2200      	movs	r2, #0
 800afc2:	605a      	str	r2, [r3, #4]
}
 800afc4:	bd70      	pop	{r4, r5, r6, pc}
 800afc6:	46c0      	nop			; (mov r8, r8)
 800afc8:	20002214 	.word	0x20002214

0800afcc <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming
 */
void SwitchMsgDMAToStream(uint8_t port) {
 800afcc:	b510      	push	{r4, lr}
 800afce:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?

	// Stop the messaging DMA
	StopMsgDMA(port);
 800afd0:	f7ff ffea 	bl	800afa8 <StopMsgDMA>

	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1], msgRxDMA[port - 1].Instance);
 800afd4:	3c01      	subs	r4, #1
 800afd6:	00e0      	lsls	r0, r4, #3
 800afd8:	1b02      	subs	r2, r0, r4
 800afda:	00d2      	lsls	r2, r2, #3
 800afdc:	4903      	ldr	r1, [pc, #12]	; (800afec <SwitchMsgDMAToStream+0x20>)
 800afde:	5851      	ldr	r1, [r2, r1]
 800afe0:	4b03      	ldr	r3, [pc, #12]	; (800aff0 <SwitchMsgDMAToStream+0x24>)
 800afe2:	18d0      	adds	r0, r2, r3
 800afe4:	f7ff ffb6 	bl	800af54 <DMA_STREAM_CH_Init>
}
 800afe8:	bd10      	pop	{r4, pc}
 800afea:	46c0      	nop			; (mov r8, r8)
 800afec:	20002214 	.word	0x20002214
 800aff0:	2000240c 	.word	0x2000240c

0800aff4 <SetupDMAInterrupts>:
}

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800aff4:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800aff6:	6803      	ldr	r3, [r0, #0]
 800aff8:	4a20      	ldr	r2, [pc, #128]	; (800b07c <SetupDMAInterrupts+0x88>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d020      	beq.n	800b040 <SetupDMAInterrupts+0x4c>
 800affe:	d827      	bhi.n	800b050 <SetupDMAInterrupts+0x5c>
 800b000:	4a1f      	ldr	r2, [pc, #124]	; (800b080 <SetupDMAInterrupts+0x8c>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d00e      	beq.n	800b024 <SetupDMAInterrupts+0x30>
 800b006:	d815      	bhi.n	800b034 <SetupDMAInterrupts+0x40>
 800b008:	4a1e      	ldr	r2, [pc, #120]	; (800b084 <SetupDMAInterrupts+0x90>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d107      	bne.n	800b01e <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800b00e:	2200      	movs	r2, #0
 800b010:	2009      	movs	r0, #9
 800b012:	f005 fbd5 	bl	80107c0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800b016:	2009      	movs	r0, #9
 800b018:	f005 fc06 	bl	8010828 <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b01c:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b01e:	4a1a      	ldr	r2, [pc, #104]	; (800b088 <SetupDMAInterrupts+0x94>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d1fb      	bne.n	800b01c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800b024:	2200      	movs	r2, #0
 800b026:	200a      	movs	r0, #10
 800b028:	f005 fbca 	bl	80107c0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b02c:	200a      	movs	r0, #10
 800b02e:	f005 fbfb 	bl	8010828 <HAL_NVIC_EnableIRQ>
			break;
 800b032:	e7f3      	b.n	800b01c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b034:	4a15      	ldr	r2, [pc, #84]	; (800b08c <SetupDMAInterrupts+0x98>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d002      	beq.n	800b040 <SetupDMAInterrupts+0x4c>
 800b03a:	4a15      	ldr	r2, [pc, #84]	; (800b090 <SetupDMAInterrupts+0x9c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d1ed      	bne.n	800b01c <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800b040:	2200      	movs	r2, #0
 800b042:	200b      	movs	r0, #11
 800b044:	f005 fbbc 	bl	80107c0 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b048:	200b      	movs	r0, #11
 800b04a:	f005 fbed 	bl	8010828 <HAL_NVIC_EnableIRQ>
}
 800b04e:	e7e5      	b.n	800b01c <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800b050:	4a10      	ldr	r2, [pc, #64]	; (800b094 <SetupDMAInterrupts+0xa0>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d0e6      	beq.n	800b024 <SetupDMAInterrupts+0x30>
 800b056:	d909      	bls.n	800b06c <SetupDMAInterrupts+0x78>
 800b058:	4a0f      	ldr	r2, [pc, #60]	; (800b098 <SetupDMAInterrupts+0xa4>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d0f0      	beq.n	800b040 <SetupDMAInterrupts+0x4c>
 800b05e:	4a0f      	ldr	r2, [pc, #60]	; (800b09c <SetupDMAInterrupts+0xa8>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d0ed      	beq.n	800b040 <SetupDMAInterrupts+0x4c>
 800b064:	4a0e      	ldr	r2, [pc, #56]	; (800b0a0 <SetupDMAInterrupts+0xac>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d1d8      	bne.n	800b01c <SetupDMAInterrupts+0x28>
 800b06a:	e7e9      	b.n	800b040 <SetupDMAInterrupts+0x4c>
 800b06c:	4a0d      	ldr	r2, [pc, #52]	; (800b0a4 <SetupDMAInterrupts+0xb0>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d0e6      	beq.n	800b040 <SetupDMAInterrupts+0x4c>
 800b072:	4a0d      	ldr	r2, [pc, #52]	; (800b0a8 <SetupDMAInterrupts+0xb4>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d0d5      	beq.n	800b024 <SetupDMAInterrupts+0x30>
 800b078:	e7d0      	b.n	800b01c <SetupDMAInterrupts+0x28>
 800b07a:	46c0      	nop			; (mov r8, r8)
 800b07c:	4002006c 	.word	0x4002006c
 800b080:	40020030 	.word	0x40020030
 800b084:	40020008 	.word	0x40020008
 800b088:	4002001c 	.word	0x4002001c
 800b08c:	40020044 	.word	0x40020044
 800b090:	40020058 	.word	0x40020058
 800b094:	4002041c 	.word	0x4002041c
 800b098:	40020444 	.word	0x40020444
 800b09c:	40020458 	.word	0x40020458
 800b0a0:	40020430 	.word	0x40020430
 800b0a4:	40020080 	.word	0x40020080
 800b0a8:	40020408 	.word	0x40020408

0800b0ac <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800b0ac:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800b0ae:	6803      	ldr	r3, [r0, #0]
 800b0b0:	4a1a      	ldr	r2, [pc, #104]	; (800b11c <UnSetupDMAInterrupts+0x70>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d018      	beq.n	800b0e8 <UnSetupDMAInterrupts+0x3c>
 800b0b6:	d81b      	bhi.n	800b0f0 <UnSetupDMAInterrupts+0x44>
 800b0b8:	4a19      	ldr	r2, [pc, #100]	; (800b120 <UnSetupDMAInterrupts+0x74>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d00a      	beq.n	800b0d4 <UnSetupDMAInterrupts+0x28>
 800b0be:	d80d      	bhi.n	800b0dc <UnSetupDMAInterrupts+0x30>
 800b0c0:	4a18      	ldr	r2, [pc, #96]	; (800b124 <UnSetupDMAInterrupts+0x78>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d103      	bne.n	800b0ce <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800b0c6:	2009      	movs	r0, #9
 800b0c8:	f005 fbb8 	bl	801083c <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800b0cc:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800b0ce:	4a16      	ldr	r2, [pc, #88]	; (800b128 <UnSetupDMAInterrupts+0x7c>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d1fb      	bne.n	800b0cc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800b0d4:	200a      	movs	r0, #10
 800b0d6:	f005 fbb1 	bl	801083c <HAL_NVIC_DisableIRQ>
			break;
 800b0da:	e7f7      	b.n	800b0cc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b0dc:	4a13      	ldr	r2, [pc, #76]	; (800b12c <UnSetupDMAInterrupts+0x80>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d002      	beq.n	800b0e8 <UnSetupDMAInterrupts+0x3c>
 800b0e2:	4a13      	ldr	r2, [pc, #76]	; (800b130 <UnSetupDMAInterrupts+0x84>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d1f1      	bne.n	800b0cc <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800b0e8:	200b      	movs	r0, #11
 800b0ea:	f005 fba7 	bl	801083c <HAL_NVIC_DisableIRQ>
}
 800b0ee:	e7ed      	b.n	800b0cc <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800b0f0:	4a10      	ldr	r2, [pc, #64]	; (800b134 <UnSetupDMAInterrupts+0x88>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d0ee      	beq.n	800b0d4 <UnSetupDMAInterrupts+0x28>
 800b0f6:	d909      	bls.n	800b10c <UnSetupDMAInterrupts+0x60>
 800b0f8:	4a0f      	ldr	r2, [pc, #60]	; (800b138 <UnSetupDMAInterrupts+0x8c>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d0f4      	beq.n	800b0e8 <UnSetupDMAInterrupts+0x3c>
 800b0fe:	4a0f      	ldr	r2, [pc, #60]	; (800b13c <UnSetupDMAInterrupts+0x90>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d0f1      	beq.n	800b0e8 <UnSetupDMAInterrupts+0x3c>
 800b104:	4a0e      	ldr	r2, [pc, #56]	; (800b140 <UnSetupDMAInterrupts+0x94>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d1e0      	bne.n	800b0cc <UnSetupDMAInterrupts+0x20>
 800b10a:	e7ed      	b.n	800b0e8 <UnSetupDMAInterrupts+0x3c>
 800b10c:	4a0d      	ldr	r2, [pc, #52]	; (800b144 <UnSetupDMAInterrupts+0x98>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d0ea      	beq.n	800b0e8 <UnSetupDMAInterrupts+0x3c>
 800b112:	4a0d      	ldr	r2, [pc, #52]	; (800b148 <UnSetupDMAInterrupts+0x9c>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d0dd      	beq.n	800b0d4 <UnSetupDMAInterrupts+0x28>
 800b118:	e7d8      	b.n	800b0cc <UnSetupDMAInterrupts+0x20>
 800b11a:	46c0      	nop			; (mov r8, r8)
 800b11c:	4002006c 	.word	0x4002006c
 800b120:	40020030 	.word	0x40020030
 800b124:	40020008 	.word	0x40020008
 800b128:	4002001c 	.word	0x4002001c
 800b12c:	40020044 	.word	0x40020044
 800b130:	40020058 	.word	0x40020058
 800b134:	4002041c 	.word	0x4002041c
 800b138:	40020444 	.word	0x40020444
 800b13c:	40020458 	.word	0x40020458
 800b140:	40020430 	.word	0x40020430
 800b144:	40020080 	.word	0x40020080
 800b148:	40020408 	.word	0x40020408

0800b14c <DMA_MSG_TX_UnSetup>:
{	
 800b14c:	b510      	push	{r4, lr}
 800b14e:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800b150:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800b152:	f7ff ffab 	bl	800b0ac <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800b156:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800b158:	2300      	movs	r3, #0
 800b15a:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800b15c:	6623      	str	r3, [r4, #96]	; 0x60
}
 800b15e:	bd10      	pop	{r4, pc}

0800b160 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800b160:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b162:	6803      	ldr	r3, [r0, #0]
 800b164:	4abd      	ldr	r2, [pc, #756]	; (800b45c <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d02f      	beq.n	800b1ca <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b16a:	4abd      	ldr	r2, [pc, #756]	; (800b460 <RemapAndLinkDMAtoUARTRx+0x300>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d100      	bne.n	800b172 <RemapAndLinkDMAtoUARTRx+0x12>
 800b170:	e087      	b.n	800b282 <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b172:	4abc      	ldr	r2, [pc, #752]	; (800b464 <RemapAndLinkDMAtoUARTRx+0x304>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d100      	bne.n	800b17a <RemapAndLinkDMAtoUARTRx+0x1a>
 800b178:	e0dc      	b.n	800b334 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800b17a:	4abb      	ldr	r2, [pc, #748]	; (800b468 <RemapAndLinkDMAtoUARTRx+0x308>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d000      	beq.n	800b182 <RemapAndLinkDMAtoUARTRx+0x22>
 800b180:	e18a      	b.n	800b498 <RemapAndLinkDMAtoUARTRx+0x338>
 800b182:	680b      	ldr	r3, [r1, #0]
 800b184:	4ab9      	ldr	r2, [pc, #740]	; (800b46c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d100      	bne.n	800b18c <RemapAndLinkDMAtoUARTRx+0x2c>
 800b18a:	e12d      	b.n	800b3e8 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800b18c:	4ab8      	ldr	r2, [pc, #736]	; (800b470 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d100      	bne.n	800b194 <RemapAndLinkDMAtoUARTRx+0x34>
 800b192:	e134      	b.n	800b3fe <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800b194:	4ab7      	ldr	r2, [pc, #732]	; (800b474 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b196:	4293      	cmp	r3, r2
 800b198:	d100      	bne.n	800b19c <RemapAndLinkDMAtoUARTRx+0x3c>
 800b19a:	e13c      	b.n	800b416 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800b19c:	4ab6      	ldr	r2, [pc, #728]	; (800b478 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d100      	bne.n	800b1a4 <RemapAndLinkDMAtoUARTRx+0x44>
 800b1a2:	e144      	b.n	800b42e <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800b1a4:	4ab5      	ldr	r2, [pc, #724]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d100      	bne.n	800b1ac <RemapAndLinkDMAtoUARTRx+0x4c>
 800b1aa:	e14c      	b.n	800b446 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800b1ac:	4ab4      	ldr	r2, [pc, #720]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d11e      	bne.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800b1b2:	4ab4      	ldr	r2, [pc, #720]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b1b4:	23a8      	movs	r3, #168	; 0xa8
 800b1b6:	58d4      	ldr	r4, [r2, r3]
 800b1b8:	4db3      	ldr	r5, [pc, #716]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b1ba:	402c      	ands	r4, r5
 800b1bc:	50d4      	str	r4, [r2, r3]
 800b1be:	58d5      	ldr	r5, [r2, r3]
 800b1c0:	24b0      	movs	r4, #176	; 0xb0
 800b1c2:	0124      	lsls	r4, r4, #4
 800b1c4:	432c      	orrs	r4, r5
 800b1c6:	50d4      	str	r4, [r2, r3]
 800b1c8:	e012      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800b1ca:	680b      	ldr	r3, [r1, #0]
 800b1cc:	4aa7      	ldr	r2, [pc, #668]	; (800b46c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d011      	beq.n	800b1f6 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800b1d2:	4aa7      	ldr	r2, [pc, #668]	; (800b470 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d019      	beq.n	800b20c <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800b1d8:	4aa6      	ldr	r2, [pc, #664]	; (800b474 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d022      	beq.n	800b224 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800b1de:	4aa6      	ldr	r2, [pc, #664]	; (800b478 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d02b      	beq.n	800b23c <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800b1e4:	4aa5      	ldr	r2, [pc, #660]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d034      	beq.n	800b254 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800b1ea:	4aa5      	ldr	r2, [pc, #660]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d03c      	beq.n	800b26a <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800b1f0:	6641      	str	r1, [r0, #100]	; 0x64
 800b1f2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800b1f4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800b1f6:	4aa5      	ldr	r2, [pc, #660]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b1f8:	23a8      	movs	r3, #168	; 0xa8
 800b1fa:	58d4      	ldr	r4, [r2, r3]
 800b1fc:	250f      	movs	r5, #15
 800b1fe:	43ac      	bics	r4, r5
 800b200:	50d4      	str	r4, [r2, r3]
 800b202:	58d4      	ldr	r4, [r2, r3]
 800b204:	3d07      	subs	r5, #7
 800b206:	432c      	orrs	r4, r5
 800b208:	50d4      	str	r4, [r2, r3]
 800b20a:	e7f1      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800b20c:	4a9f      	ldr	r2, [pc, #636]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b20e:	23a8      	movs	r3, #168	; 0xa8
 800b210:	58d4      	ldr	r4, [r2, r3]
 800b212:	4d9d      	ldr	r5, [pc, #628]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b214:	402c      	ands	r4, r5
 800b216:	50d4      	str	r4, [r2, r3]
 800b218:	58d5      	ldr	r5, [r2, r3]
 800b21a:	2480      	movs	r4, #128	; 0x80
 800b21c:	0124      	lsls	r4, r4, #4
 800b21e:	432c      	orrs	r4, r5
 800b220:	50d4      	str	r4, [r2, r3]
 800b222:	e7e5      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800b224:	4a99      	ldr	r2, [pc, #612]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b226:	23a8      	movs	r3, #168	; 0xa8
 800b228:	58d4      	ldr	r4, [r2, r3]
 800b22a:	4d99      	ldr	r5, [pc, #612]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b22c:	402c      	ands	r4, r5
 800b22e:	50d4      	str	r4, [r2, r3]
 800b230:	58d5      	ldr	r5, [r2, r3]
 800b232:	2480      	movs	r4, #128	; 0x80
 800b234:	0324      	lsls	r4, r4, #12
 800b236:	432c      	orrs	r4, r5
 800b238:	50d4      	str	r4, [r2, r3]
 800b23a:	e7d9      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800b23c:	4a93      	ldr	r2, [pc, #588]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b23e:	23a8      	movs	r3, #168	; 0xa8
 800b240:	58d4      	ldr	r4, [r2, r3]
 800b242:	4d94      	ldr	r5, [pc, #592]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b244:	402c      	ands	r4, r5
 800b246:	50d4      	str	r4, [r2, r3]
 800b248:	58d5      	ldr	r5, [r2, r3]
 800b24a:	2480      	movs	r4, #128	; 0x80
 800b24c:	0424      	lsls	r4, r4, #16
 800b24e:	432c      	orrs	r4, r5
 800b250:	50d4      	str	r4, [r2, r3]
 800b252:	e7cd      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800b254:	4a8b      	ldr	r2, [pc, #556]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b256:	23a8      	movs	r3, #168	; 0xa8
 800b258:	58d4      	ldr	r4, [r2, r3]
 800b25a:	25f0      	movs	r5, #240	; 0xf0
 800b25c:	43ac      	bics	r4, r5
 800b25e:	50d4      	str	r4, [r2, r3]
 800b260:	58d4      	ldr	r4, [r2, r3]
 800b262:	3d70      	subs	r5, #112	; 0x70
 800b264:	432c      	orrs	r4, r5
 800b266:	50d4      	str	r4, [r2, r3]
 800b268:	e7c2      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800b26a:	4a86      	ldr	r2, [pc, #536]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b26c:	23a8      	movs	r3, #168	; 0xa8
 800b26e:	58d4      	ldr	r4, [r2, r3]
 800b270:	4d85      	ldr	r5, [pc, #532]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b272:	402c      	ands	r4, r5
 800b274:	50d4      	str	r4, [r2, r3]
 800b276:	58d5      	ldr	r5, [r2, r3]
 800b278:	2480      	movs	r4, #128	; 0x80
 800b27a:	0124      	lsls	r4, r4, #4
 800b27c:	432c      	orrs	r4, r5
 800b27e:	50d4      	str	r4, [r2, r3]
 800b280:	e7b6      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800b282:	680b      	ldr	r3, [r1, #0]
 800b284:	4a79      	ldr	r2, [pc, #484]	; (800b46c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d01a      	beq.n	800b2c0 <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800b28a:	4a79      	ldr	r2, [pc, #484]	; (800b470 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d022      	beq.n	800b2d6 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800b290:	4a78      	ldr	r2, [pc, #480]	; (800b474 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d02b      	beq.n	800b2ee <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800b296:	4a78      	ldr	r2, [pc, #480]	; (800b478 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d034      	beq.n	800b306 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800b29c:	4a77      	ldr	r2, [pc, #476]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d03d      	beq.n	800b31e <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800b2a2:	4a77      	ldr	r2, [pc, #476]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d1a3      	bne.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800b2a8:	4a76      	ldr	r2, [pc, #472]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b2aa:	23a8      	movs	r3, #168	; 0xa8
 800b2ac:	58d4      	ldr	r4, [r2, r3]
 800b2ae:	4d76      	ldr	r5, [pc, #472]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b2b0:	402c      	ands	r4, r5
 800b2b2:	50d4      	str	r4, [r2, r3]
 800b2b4:	58d5      	ldr	r5, [r2, r3]
 800b2b6:	2490      	movs	r4, #144	; 0x90
 800b2b8:	0124      	lsls	r4, r4, #4
 800b2ba:	432c      	orrs	r4, r5
 800b2bc:	50d4      	str	r4, [r2, r3]
 800b2be:	e797      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800b2c0:	4a72      	ldr	r2, [pc, #456]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b2c2:	23a8      	movs	r3, #168	; 0xa8
 800b2c4:	58d4      	ldr	r4, [r2, r3]
 800b2c6:	250f      	movs	r5, #15
 800b2c8:	43ac      	bics	r4, r5
 800b2ca:	50d4      	str	r4, [r2, r3]
 800b2cc:	58d4      	ldr	r4, [r2, r3]
 800b2ce:	3d06      	subs	r5, #6
 800b2d0:	432c      	orrs	r4, r5
 800b2d2:	50d4      	str	r4, [r2, r3]
 800b2d4:	e78c      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800b2d6:	4a6d      	ldr	r2, [pc, #436]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b2d8:	23a8      	movs	r3, #168	; 0xa8
 800b2da:	58d4      	ldr	r4, [r2, r3]
 800b2dc:	4d6a      	ldr	r5, [pc, #424]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b2de:	402c      	ands	r4, r5
 800b2e0:	50d4      	str	r4, [r2, r3]
 800b2e2:	58d5      	ldr	r5, [r2, r3]
 800b2e4:	2490      	movs	r4, #144	; 0x90
 800b2e6:	0124      	lsls	r4, r4, #4
 800b2e8:	432c      	orrs	r4, r5
 800b2ea:	50d4      	str	r4, [r2, r3]
 800b2ec:	e780      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800b2ee:	4a67      	ldr	r2, [pc, #412]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b2f0:	23a8      	movs	r3, #168	; 0xa8
 800b2f2:	58d4      	ldr	r4, [r2, r3]
 800b2f4:	4d66      	ldr	r5, [pc, #408]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b2f6:	402c      	ands	r4, r5
 800b2f8:	50d4      	str	r4, [r2, r3]
 800b2fa:	58d5      	ldr	r5, [r2, r3]
 800b2fc:	2490      	movs	r4, #144	; 0x90
 800b2fe:	0324      	lsls	r4, r4, #12
 800b300:	432c      	orrs	r4, r5
 800b302:	50d4      	str	r4, [r2, r3]
 800b304:	e774      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800b306:	4a61      	ldr	r2, [pc, #388]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b308:	23a8      	movs	r3, #168	; 0xa8
 800b30a:	58d4      	ldr	r4, [r2, r3]
 800b30c:	4d61      	ldr	r5, [pc, #388]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b30e:	402c      	ands	r4, r5
 800b310:	50d4      	str	r4, [r2, r3]
 800b312:	58d5      	ldr	r5, [r2, r3]
 800b314:	2490      	movs	r4, #144	; 0x90
 800b316:	0424      	lsls	r4, r4, #16
 800b318:	432c      	orrs	r4, r5
 800b31a:	50d4      	str	r4, [r2, r3]
 800b31c:	e768      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800b31e:	4a59      	ldr	r2, [pc, #356]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b320:	23a8      	movs	r3, #168	; 0xa8
 800b322:	58d4      	ldr	r4, [r2, r3]
 800b324:	25f0      	movs	r5, #240	; 0xf0
 800b326:	43ac      	bics	r4, r5
 800b328:	50d4      	str	r4, [r2, r3]
 800b32a:	58d4      	ldr	r4, [r2, r3]
 800b32c:	3d60      	subs	r5, #96	; 0x60
 800b32e:	432c      	orrs	r4, r5
 800b330:	50d4      	str	r4, [r2, r3]
 800b332:	e75d      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800b334:	680b      	ldr	r3, [r1, #0]
 800b336:	4a4d      	ldr	r2, [pc, #308]	; (800b46c <RemapAndLinkDMAtoUARTRx+0x30c>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d01b      	beq.n	800b374 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800b33c:	4a4c      	ldr	r2, [pc, #304]	; (800b470 <RemapAndLinkDMAtoUARTRx+0x310>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d023      	beq.n	800b38a <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800b342:	4a4c      	ldr	r2, [pc, #304]	; (800b474 <RemapAndLinkDMAtoUARTRx+0x314>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d02c      	beq.n	800b3a2 <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800b348:	4a4b      	ldr	r2, [pc, #300]	; (800b478 <RemapAndLinkDMAtoUARTRx+0x318>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d035      	beq.n	800b3ba <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800b34e:	4a4b      	ldr	r2, [pc, #300]	; (800b47c <RemapAndLinkDMAtoUARTRx+0x31c>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d03e      	beq.n	800b3d2 <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800b354:	4a4a      	ldr	r2, [pc, #296]	; (800b480 <RemapAndLinkDMAtoUARTRx+0x320>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d000      	beq.n	800b35c <RemapAndLinkDMAtoUARTRx+0x1fc>
 800b35a:	e749      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800b35c:	4a49      	ldr	r2, [pc, #292]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b35e:	23a8      	movs	r3, #168	; 0xa8
 800b360:	58d4      	ldr	r4, [r2, r3]
 800b362:	4d49      	ldr	r5, [pc, #292]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b364:	402c      	ands	r4, r5
 800b366:	50d4      	str	r4, [r2, r3]
 800b368:	58d5      	ldr	r5, [r2, r3]
 800b36a:	24a0      	movs	r4, #160	; 0xa0
 800b36c:	0124      	lsls	r4, r4, #4
 800b36e:	432c      	orrs	r4, r5
 800b370:	50d4      	str	r4, [r2, r3]
 800b372:	e73d      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800b374:	4a45      	ldr	r2, [pc, #276]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b376:	23a8      	movs	r3, #168	; 0xa8
 800b378:	58d4      	ldr	r4, [r2, r3]
 800b37a:	250f      	movs	r5, #15
 800b37c:	43ac      	bics	r4, r5
 800b37e:	50d4      	str	r4, [r2, r3]
 800b380:	58d4      	ldr	r4, [r2, r3]
 800b382:	3d05      	subs	r5, #5
 800b384:	432c      	orrs	r4, r5
 800b386:	50d4      	str	r4, [r2, r3]
 800b388:	e732      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800b38a:	4a40      	ldr	r2, [pc, #256]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b38c:	23a8      	movs	r3, #168	; 0xa8
 800b38e:	58d4      	ldr	r4, [r2, r3]
 800b390:	4d3d      	ldr	r5, [pc, #244]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b392:	402c      	ands	r4, r5
 800b394:	50d4      	str	r4, [r2, r3]
 800b396:	58d5      	ldr	r5, [r2, r3]
 800b398:	24a0      	movs	r4, #160	; 0xa0
 800b39a:	0124      	lsls	r4, r4, #4
 800b39c:	432c      	orrs	r4, r5
 800b39e:	50d4      	str	r4, [r2, r3]
 800b3a0:	e726      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800b3a2:	4a3a      	ldr	r2, [pc, #232]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b3a4:	23a8      	movs	r3, #168	; 0xa8
 800b3a6:	58d4      	ldr	r4, [r2, r3]
 800b3a8:	4d39      	ldr	r5, [pc, #228]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b3aa:	402c      	ands	r4, r5
 800b3ac:	50d4      	str	r4, [r2, r3]
 800b3ae:	58d5      	ldr	r5, [r2, r3]
 800b3b0:	24a0      	movs	r4, #160	; 0xa0
 800b3b2:	0324      	lsls	r4, r4, #12
 800b3b4:	432c      	orrs	r4, r5
 800b3b6:	50d4      	str	r4, [r2, r3]
 800b3b8:	e71a      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800b3ba:	4a34      	ldr	r2, [pc, #208]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b3bc:	23a8      	movs	r3, #168	; 0xa8
 800b3be:	58d4      	ldr	r4, [r2, r3]
 800b3c0:	4d34      	ldr	r5, [pc, #208]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b3c2:	402c      	ands	r4, r5
 800b3c4:	50d4      	str	r4, [r2, r3]
 800b3c6:	58d5      	ldr	r5, [r2, r3]
 800b3c8:	24a0      	movs	r4, #160	; 0xa0
 800b3ca:	0424      	lsls	r4, r4, #16
 800b3cc:	432c      	orrs	r4, r5
 800b3ce:	50d4      	str	r4, [r2, r3]
 800b3d0:	e70e      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800b3d2:	4a2c      	ldr	r2, [pc, #176]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b3d4:	23a8      	movs	r3, #168	; 0xa8
 800b3d6:	58d4      	ldr	r4, [r2, r3]
 800b3d8:	25f0      	movs	r5, #240	; 0xf0
 800b3da:	43ac      	bics	r4, r5
 800b3dc:	50d4      	str	r4, [r2, r3]
 800b3de:	58d4      	ldr	r4, [r2, r3]
 800b3e0:	3d50      	subs	r5, #80	; 0x50
 800b3e2:	432c      	orrs	r4, r5
 800b3e4:	50d4      	str	r4, [r2, r3]
 800b3e6:	e703      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800b3e8:	4a28      	ldr	r2, [pc, #160]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b3ea:	23a8      	movs	r3, #168	; 0xa8
 800b3ec:	58d4      	ldr	r4, [r2, r3]
 800b3ee:	250f      	movs	r5, #15
 800b3f0:	43ac      	bics	r4, r5
 800b3f2:	50d4      	str	r4, [r2, r3]
 800b3f4:	58d4      	ldr	r4, [r2, r3]
 800b3f6:	3d04      	subs	r5, #4
 800b3f8:	432c      	orrs	r4, r5
 800b3fa:	50d4      	str	r4, [r2, r3]
 800b3fc:	e6f8      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800b3fe:	4a23      	ldr	r2, [pc, #140]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b400:	23a8      	movs	r3, #168	; 0xa8
 800b402:	58d4      	ldr	r4, [r2, r3]
 800b404:	4d20      	ldr	r5, [pc, #128]	; (800b488 <RemapAndLinkDMAtoUARTRx+0x328>)
 800b406:	402c      	ands	r4, r5
 800b408:	50d4      	str	r4, [r2, r3]
 800b40a:	58d5      	ldr	r5, [r2, r3]
 800b40c:	24b0      	movs	r4, #176	; 0xb0
 800b40e:	0124      	lsls	r4, r4, #4
 800b410:	432c      	orrs	r4, r5
 800b412:	50d4      	str	r4, [r2, r3]
 800b414:	e6ec      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800b416:	4a1d      	ldr	r2, [pc, #116]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b418:	23a8      	movs	r3, #168	; 0xa8
 800b41a:	58d4      	ldr	r4, [r2, r3]
 800b41c:	4d1c      	ldr	r5, [pc, #112]	; (800b490 <RemapAndLinkDMAtoUARTRx+0x330>)
 800b41e:	402c      	ands	r4, r5
 800b420:	50d4      	str	r4, [r2, r3]
 800b422:	58d5      	ldr	r5, [r2, r3]
 800b424:	24b0      	movs	r4, #176	; 0xb0
 800b426:	0324      	lsls	r4, r4, #12
 800b428:	432c      	orrs	r4, r5
 800b42a:	50d4      	str	r4, [r2, r3]
 800b42c:	e6e0      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800b42e:	4a17      	ldr	r2, [pc, #92]	; (800b48c <RemapAndLinkDMAtoUARTRx+0x32c>)
 800b430:	23a8      	movs	r3, #168	; 0xa8
 800b432:	58d4      	ldr	r4, [r2, r3]
 800b434:	4d17      	ldr	r5, [pc, #92]	; (800b494 <RemapAndLinkDMAtoUARTRx+0x334>)
 800b436:	402c      	ands	r4, r5
 800b438:	50d4      	str	r4, [r2, r3]
 800b43a:	58d5      	ldr	r5, [r2, r3]
 800b43c:	24b0      	movs	r4, #176	; 0xb0
 800b43e:	0424      	lsls	r4, r4, #16
 800b440:	432c      	orrs	r4, r5
 800b442:	50d4      	str	r4, [r2, r3]
 800b444:	e6d4      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800b446:	4a0f      	ldr	r2, [pc, #60]	; (800b484 <RemapAndLinkDMAtoUARTRx+0x324>)
 800b448:	23a8      	movs	r3, #168	; 0xa8
 800b44a:	58d4      	ldr	r4, [r2, r3]
 800b44c:	25f0      	movs	r5, #240	; 0xf0
 800b44e:	43ac      	bics	r4, r5
 800b450:	50d4      	str	r4, [r2, r3]
 800b452:	58d4      	ldr	r4, [r2, r3]
 800b454:	3d40      	subs	r5, #64	; 0x40
 800b456:	432c      	orrs	r4, r5
 800b458:	50d4      	str	r4, [r2, r3]
 800b45a:	e6c9      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
 800b45c:	40013800 	.word	0x40013800
 800b460:	40004400 	.word	0x40004400
 800b464:	40004800 	.word	0x40004800
 800b468:	40004c00 	.word	0x40004c00
 800b46c:	40020008 	.word	0x40020008
 800b470:	40020030 	.word	0x40020030
 800b474:	40020058 	.word	0x40020058
 800b478:	4002006c 	.word	0x4002006c
 800b47c:	4002041c 	.word	0x4002041c
 800b480:	40020430 	.word	0x40020430
 800b484:	40020400 	.word	0x40020400
 800b488:	fffff0ff 	.word	0xfffff0ff
 800b48c:	40020000 	.word	0x40020000
 800b490:	fff0ffff 	.word	0xfff0ffff
 800b494:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800b498:	4ab9      	ldr	r2, [pc, #740]	; (800b780 <RemapAndLinkDMAtoUARTRx+0x620>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d159      	bne.n	800b552 <RemapAndLinkDMAtoUARTRx+0x3f2>
 800b49e:	680b      	ldr	r3, [r1, #0]
 800b4a0:	4ab8      	ldr	r2, [pc, #736]	; (800b784 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d01b      	beq.n	800b4de <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800b4a6:	4ab8      	ldr	r2, [pc, #736]	; (800b788 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d023      	beq.n	800b4f4 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800b4ac:	4ab7      	ldr	r2, [pc, #732]	; (800b78c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d02c      	beq.n	800b50c <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800b4b2:	4ab7      	ldr	r2, [pc, #732]	; (800b790 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d035      	beq.n	800b524 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800b4b8:	4ab6      	ldr	r2, [pc, #728]	; (800b794 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d03e      	beq.n	800b53c <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800b4be:	4ab6      	ldr	r2, [pc, #728]	; (800b798 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d000      	beq.n	800b4c6 <RemapAndLinkDMAtoUARTRx+0x366>
 800b4c4:	e694      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800b4c6:	4ab5      	ldr	r2, [pc, #724]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b4c8:	23a8      	movs	r3, #168	; 0xa8
 800b4ca:	58d4      	ldr	r4, [r2, r3]
 800b4cc:	4db4      	ldr	r5, [pc, #720]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b4ce:	402c      	ands	r4, r5
 800b4d0:	50d4      	str	r4, [r2, r3]
 800b4d2:	58d5      	ldr	r5, [r2, r3]
 800b4d4:	24c0      	movs	r4, #192	; 0xc0
 800b4d6:	0124      	lsls	r4, r4, #4
 800b4d8:	432c      	orrs	r4, r5
 800b4da:	50d4      	str	r4, [r2, r3]
 800b4dc:	e688      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800b4de:	4ab1      	ldr	r2, [pc, #708]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b4e0:	23a8      	movs	r3, #168	; 0xa8
 800b4e2:	58d4      	ldr	r4, [r2, r3]
 800b4e4:	250f      	movs	r5, #15
 800b4e6:	43ac      	bics	r4, r5
 800b4e8:	50d4      	str	r4, [r2, r3]
 800b4ea:	58d4      	ldr	r4, [r2, r3]
 800b4ec:	3d03      	subs	r5, #3
 800b4ee:	432c      	orrs	r4, r5
 800b4f0:	50d4      	str	r4, [r2, r3]
 800b4f2:	e67d      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800b4f4:	4aab      	ldr	r2, [pc, #684]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b4f6:	23a8      	movs	r3, #168	; 0xa8
 800b4f8:	58d4      	ldr	r4, [r2, r3]
 800b4fa:	4da9      	ldr	r5, [pc, #676]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b4fc:	402c      	ands	r4, r5
 800b4fe:	50d4      	str	r4, [r2, r3]
 800b500:	58d5      	ldr	r5, [r2, r3]
 800b502:	24c0      	movs	r4, #192	; 0xc0
 800b504:	0124      	lsls	r4, r4, #4
 800b506:	432c      	orrs	r4, r5
 800b508:	50d4      	str	r4, [r2, r3]
 800b50a:	e671      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800b50c:	4aa5      	ldr	r2, [pc, #660]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b50e:	23a8      	movs	r3, #168	; 0xa8
 800b510:	58d4      	ldr	r4, [r2, r3]
 800b512:	4da5      	ldr	r5, [pc, #660]	; (800b7a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b514:	402c      	ands	r4, r5
 800b516:	50d4      	str	r4, [r2, r3]
 800b518:	58d5      	ldr	r5, [r2, r3]
 800b51a:	24c0      	movs	r4, #192	; 0xc0
 800b51c:	0324      	lsls	r4, r4, #12
 800b51e:	432c      	orrs	r4, r5
 800b520:	50d4      	str	r4, [r2, r3]
 800b522:	e665      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800b524:	4a9f      	ldr	r2, [pc, #636]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b526:	23a8      	movs	r3, #168	; 0xa8
 800b528:	58d4      	ldr	r4, [r2, r3]
 800b52a:	4da0      	ldr	r5, [pc, #640]	; (800b7ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b52c:	402c      	ands	r4, r5
 800b52e:	50d4      	str	r4, [r2, r3]
 800b530:	58d5      	ldr	r5, [r2, r3]
 800b532:	24c0      	movs	r4, #192	; 0xc0
 800b534:	0424      	lsls	r4, r4, #16
 800b536:	432c      	orrs	r4, r5
 800b538:	50d4      	str	r4, [r2, r3]
 800b53a:	e659      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800b53c:	4a97      	ldr	r2, [pc, #604]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b53e:	23a8      	movs	r3, #168	; 0xa8
 800b540:	58d4      	ldr	r4, [r2, r3]
 800b542:	25f0      	movs	r5, #240	; 0xf0
 800b544:	43ac      	bics	r4, r5
 800b546:	50d4      	str	r4, [r2, r3]
 800b548:	58d4      	ldr	r4, [r2, r3]
 800b54a:	3d30      	subs	r5, #48	; 0x30
 800b54c:	432c      	orrs	r4, r5
 800b54e:	50d4      	str	r4, [r2, r3]
 800b550:	e64e      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800b552:	4a97      	ldr	r2, [pc, #604]	; (800b7b0 <RemapAndLinkDMAtoUARTRx+0x650>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d159      	bne.n	800b60c <RemapAndLinkDMAtoUARTRx+0x4ac>
 800b558:	680b      	ldr	r3, [r1, #0]
 800b55a:	4a8a      	ldr	r2, [pc, #552]	; (800b784 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d01b      	beq.n	800b598 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800b560:	4a89      	ldr	r2, [pc, #548]	; (800b788 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d023      	beq.n	800b5ae <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800b566:	4a89      	ldr	r2, [pc, #548]	; (800b78c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d02c      	beq.n	800b5c6 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800b56c:	4a88      	ldr	r2, [pc, #544]	; (800b790 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d035      	beq.n	800b5de <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800b572:	4a88      	ldr	r2, [pc, #544]	; (800b794 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d03e      	beq.n	800b5f6 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800b578:	4a87      	ldr	r2, [pc, #540]	; (800b798 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d000      	beq.n	800b580 <RemapAndLinkDMAtoUARTRx+0x420>
 800b57e:	e637      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800b580:	4a86      	ldr	r2, [pc, #536]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b582:	23a8      	movs	r3, #168	; 0xa8
 800b584:	58d4      	ldr	r4, [r2, r3]
 800b586:	4d86      	ldr	r5, [pc, #536]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b588:	402c      	ands	r4, r5
 800b58a:	50d4      	str	r4, [r2, r3]
 800b58c:	58d5      	ldr	r5, [r2, r3]
 800b58e:	24d0      	movs	r4, #208	; 0xd0
 800b590:	0124      	lsls	r4, r4, #4
 800b592:	432c      	orrs	r4, r5
 800b594:	50d4      	str	r4, [r2, r3]
 800b596:	e62b      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800b598:	4a82      	ldr	r2, [pc, #520]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b59a:	23a8      	movs	r3, #168	; 0xa8
 800b59c:	58d4      	ldr	r4, [r2, r3]
 800b59e:	250f      	movs	r5, #15
 800b5a0:	43ac      	bics	r4, r5
 800b5a2:	50d4      	str	r4, [r2, r3]
 800b5a4:	58d4      	ldr	r4, [r2, r3]
 800b5a6:	3d02      	subs	r5, #2
 800b5a8:	432c      	orrs	r4, r5
 800b5aa:	50d4      	str	r4, [r2, r3]
 800b5ac:	e620      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800b5ae:	4a7d      	ldr	r2, [pc, #500]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b5b0:	23a8      	movs	r3, #168	; 0xa8
 800b5b2:	58d4      	ldr	r4, [r2, r3]
 800b5b4:	4d7a      	ldr	r5, [pc, #488]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b5b6:	402c      	ands	r4, r5
 800b5b8:	50d4      	str	r4, [r2, r3]
 800b5ba:	58d5      	ldr	r5, [r2, r3]
 800b5bc:	24d0      	movs	r4, #208	; 0xd0
 800b5be:	0124      	lsls	r4, r4, #4
 800b5c0:	432c      	orrs	r4, r5
 800b5c2:	50d4      	str	r4, [r2, r3]
 800b5c4:	e614      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800b5c6:	4a77      	ldr	r2, [pc, #476]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b5c8:	23a8      	movs	r3, #168	; 0xa8
 800b5ca:	58d4      	ldr	r4, [r2, r3]
 800b5cc:	4d76      	ldr	r5, [pc, #472]	; (800b7a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b5ce:	402c      	ands	r4, r5
 800b5d0:	50d4      	str	r4, [r2, r3]
 800b5d2:	58d5      	ldr	r5, [r2, r3]
 800b5d4:	24d0      	movs	r4, #208	; 0xd0
 800b5d6:	0324      	lsls	r4, r4, #12
 800b5d8:	432c      	orrs	r4, r5
 800b5da:	50d4      	str	r4, [r2, r3]
 800b5dc:	e608      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800b5de:	4a71      	ldr	r2, [pc, #452]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b5e0:	23a8      	movs	r3, #168	; 0xa8
 800b5e2:	58d4      	ldr	r4, [r2, r3]
 800b5e4:	4d71      	ldr	r5, [pc, #452]	; (800b7ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b5e6:	402c      	ands	r4, r5
 800b5e8:	50d4      	str	r4, [r2, r3]
 800b5ea:	58d5      	ldr	r5, [r2, r3]
 800b5ec:	24d0      	movs	r4, #208	; 0xd0
 800b5ee:	0424      	lsls	r4, r4, #16
 800b5f0:	432c      	orrs	r4, r5
 800b5f2:	50d4      	str	r4, [r2, r3]
 800b5f4:	e5fc      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800b5f6:	4a69      	ldr	r2, [pc, #420]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b5f8:	23a8      	movs	r3, #168	; 0xa8
 800b5fa:	58d4      	ldr	r4, [r2, r3]
 800b5fc:	25f0      	movs	r5, #240	; 0xf0
 800b5fe:	43ac      	bics	r4, r5
 800b600:	50d4      	str	r4, [r2, r3]
 800b602:	58d4      	ldr	r4, [r2, r3]
 800b604:	3d20      	subs	r5, #32
 800b606:	432c      	orrs	r4, r5
 800b608:	50d4      	str	r4, [r2, r3]
 800b60a:	e5f1      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800b60c:	4a69      	ldr	r2, [pc, #420]	; (800b7b4 <RemapAndLinkDMAtoUARTRx+0x654>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d159      	bne.n	800b6c6 <RemapAndLinkDMAtoUARTRx+0x566>
 800b612:	680b      	ldr	r3, [r1, #0]
 800b614:	4a5b      	ldr	r2, [pc, #364]	; (800b784 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d01b      	beq.n	800b652 <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800b61a:	4a5b      	ldr	r2, [pc, #364]	; (800b788 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d023      	beq.n	800b668 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800b620:	4a5a      	ldr	r2, [pc, #360]	; (800b78c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d02c      	beq.n	800b680 <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800b626:	4a5a      	ldr	r2, [pc, #360]	; (800b790 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d035      	beq.n	800b698 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800b62c:	4a59      	ldr	r2, [pc, #356]	; (800b794 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d03e      	beq.n	800b6b0 <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800b632:	4a59      	ldr	r2, [pc, #356]	; (800b798 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d000      	beq.n	800b63a <RemapAndLinkDMAtoUARTRx+0x4da>
 800b638:	e5da      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800b63a:	4a58      	ldr	r2, [pc, #352]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b63c:	23a8      	movs	r3, #168	; 0xa8
 800b63e:	58d4      	ldr	r4, [r2, r3]
 800b640:	4d57      	ldr	r5, [pc, #348]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b642:	402c      	ands	r4, r5
 800b644:	50d4      	str	r4, [r2, r3]
 800b646:	58d5      	ldr	r5, [r2, r3]
 800b648:	24e0      	movs	r4, #224	; 0xe0
 800b64a:	0124      	lsls	r4, r4, #4
 800b64c:	432c      	orrs	r4, r5
 800b64e:	50d4      	str	r4, [r2, r3]
 800b650:	e5ce      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800b652:	4a54      	ldr	r2, [pc, #336]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b654:	23a8      	movs	r3, #168	; 0xa8
 800b656:	58d4      	ldr	r4, [r2, r3]
 800b658:	250f      	movs	r5, #15
 800b65a:	43ac      	bics	r4, r5
 800b65c:	50d4      	str	r4, [r2, r3]
 800b65e:	58d4      	ldr	r4, [r2, r3]
 800b660:	3d01      	subs	r5, #1
 800b662:	432c      	orrs	r4, r5
 800b664:	50d4      	str	r4, [r2, r3]
 800b666:	e5c3      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800b668:	4a4e      	ldr	r2, [pc, #312]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b66a:	23a8      	movs	r3, #168	; 0xa8
 800b66c:	58d4      	ldr	r4, [r2, r3]
 800b66e:	4d4c      	ldr	r5, [pc, #304]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b670:	402c      	ands	r4, r5
 800b672:	50d4      	str	r4, [r2, r3]
 800b674:	58d5      	ldr	r5, [r2, r3]
 800b676:	24e0      	movs	r4, #224	; 0xe0
 800b678:	0124      	lsls	r4, r4, #4
 800b67a:	432c      	orrs	r4, r5
 800b67c:	50d4      	str	r4, [r2, r3]
 800b67e:	e5b7      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800b680:	4a48      	ldr	r2, [pc, #288]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b682:	23a8      	movs	r3, #168	; 0xa8
 800b684:	58d4      	ldr	r4, [r2, r3]
 800b686:	4d48      	ldr	r5, [pc, #288]	; (800b7a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b688:	402c      	ands	r4, r5
 800b68a:	50d4      	str	r4, [r2, r3]
 800b68c:	58d5      	ldr	r5, [r2, r3]
 800b68e:	24e0      	movs	r4, #224	; 0xe0
 800b690:	0324      	lsls	r4, r4, #12
 800b692:	432c      	orrs	r4, r5
 800b694:	50d4      	str	r4, [r2, r3]
 800b696:	e5ab      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800b698:	4a42      	ldr	r2, [pc, #264]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b69a:	23a8      	movs	r3, #168	; 0xa8
 800b69c:	58d4      	ldr	r4, [r2, r3]
 800b69e:	4d43      	ldr	r5, [pc, #268]	; (800b7ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b6a0:	402c      	ands	r4, r5
 800b6a2:	50d4      	str	r4, [r2, r3]
 800b6a4:	58d5      	ldr	r5, [r2, r3]
 800b6a6:	24e0      	movs	r4, #224	; 0xe0
 800b6a8:	0424      	lsls	r4, r4, #16
 800b6aa:	432c      	orrs	r4, r5
 800b6ac:	50d4      	str	r4, [r2, r3]
 800b6ae:	e59f      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800b6b0:	4a3a      	ldr	r2, [pc, #232]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b6b2:	23a8      	movs	r3, #168	; 0xa8
 800b6b4:	58d4      	ldr	r4, [r2, r3]
 800b6b6:	25f0      	movs	r5, #240	; 0xf0
 800b6b8:	43ac      	bics	r4, r5
 800b6ba:	50d4      	str	r4, [r2, r3]
 800b6bc:	58d4      	ldr	r4, [r2, r3]
 800b6be:	3d10      	subs	r5, #16
 800b6c0:	432c      	orrs	r4, r5
 800b6c2:	50d4      	str	r4, [r2, r3]
 800b6c4:	e594      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800b6c6:	4a3c      	ldr	r2, [pc, #240]	; (800b7b8 <RemapAndLinkDMAtoUARTRx+0x658>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d000      	beq.n	800b6ce <RemapAndLinkDMAtoUARTRx+0x56e>
 800b6cc:	e590      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
 800b6ce:	680b      	ldr	r3, [r1, #0]
 800b6d0:	4a2c      	ldr	r2, [pc, #176]	; (800b784 <RemapAndLinkDMAtoUARTRx+0x624>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d01b      	beq.n	800b70e <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800b6d6:	4a2c      	ldr	r2, [pc, #176]	; (800b788 <RemapAndLinkDMAtoUARTRx+0x628>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d022      	beq.n	800b722 <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800b6dc:	4a2b      	ldr	r2, [pc, #172]	; (800b78c <RemapAndLinkDMAtoUARTRx+0x62c>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d02b      	beq.n	800b73a <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800b6e2:	4a2b      	ldr	r2, [pc, #172]	; (800b790 <RemapAndLinkDMAtoUARTRx+0x630>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d034      	beq.n	800b752 <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800b6e8:	4a2a      	ldr	r2, [pc, #168]	; (800b794 <RemapAndLinkDMAtoUARTRx+0x634>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d03d      	beq.n	800b76a <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800b6ee:	4a2a      	ldr	r2, [pc, #168]	; (800b798 <RemapAndLinkDMAtoUARTRx+0x638>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d000      	beq.n	800b6f6 <RemapAndLinkDMAtoUARTRx+0x596>
 800b6f4:	e57c      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800b6f6:	4a29      	ldr	r2, [pc, #164]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b6f8:	23a8      	movs	r3, #168	; 0xa8
 800b6fa:	58d4      	ldr	r4, [r2, r3]
 800b6fc:	4d28      	ldr	r5, [pc, #160]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b6fe:	402c      	ands	r4, r5
 800b700:	50d4      	str	r4, [r2, r3]
 800b702:	58d5      	ldr	r5, [r2, r3]
 800b704:	24f0      	movs	r4, #240	; 0xf0
 800b706:	0124      	lsls	r4, r4, #4
 800b708:	432c      	orrs	r4, r5
 800b70a:	50d4      	str	r4, [r2, r3]
 800b70c:	e570      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800b70e:	4a25      	ldr	r2, [pc, #148]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b710:	23a8      	movs	r3, #168	; 0xa8
 800b712:	58d5      	ldr	r5, [r2, r3]
 800b714:	260f      	movs	r6, #15
 800b716:	43b5      	bics	r5, r6
 800b718:	50d5      	str	r5, [r2, r3]
 800b71a:	58d4      	ldr	r4, [r2, r3]
 800b71c:	4334      	orrs	r4, r6
 800b71e:	50d4      	str	r4, [r2, r3]
 800b720:	e566      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800b722:	4a20      	ldr	r2, [pc, #128]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b724:	23a8      	movs	r3, #168	; 0xa8
 800b726:	58d4      	ldr	r4, [r2, r3]
 800b728:	4d1d      	ldr	r5, [pc, #116]	; (800b7a0 <RemapAndLinkDMAtoUARTRx+0x640>)
 800b72a:	402c      	ands	r4, r5
 800b72c:	50d4      	str	r4, [r2, r3]
 800b72e:	58d5      	ldr	r5, [r2, r3]
 800b730:	24f0      	movs	r4, #240	; 0xf0
 800b732:	0124      	lsls	r4, r4, #4
 800b734:	432c      	orrs	r4, r5
 800b736:	50d4      	str	r4, [r2, r3]
 800b738:	e55a      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800b73a:	4a1a      	ldr	r2, [pc, #104]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b73c:	23a8      	movs	r3, #168	; 0xa8
 800b73e:	58d4      	ldr	r4, [r2, r3]
 800b740:	4d19      	ldr	r5, [pc, #100]	; (800b7a8 <RemapAndLinkDMAtoUARTRx+0x648>)
 800b742:	402c      	ands	r4, r5
 800b744:	50d4      	str	r4, [r2, r3]
 800b746:	58d5      	ldr	r5, [r2, r3]
 800b748:	24f0      	movs	r4, #240	; 0xf0
 800b74a:	0324      	lsls	r4, r4, #12
 800b74c:	432c      	orrs	r4, r5
 800b74e:	50d4      	str	r4, [r2, r3]
 800b750:	e54e      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800b752:	4a14      	ldr	r2, [pc, #80]	; (800b7a4 <RemapAndLinkDMAtoUARTRx+0x644>)
 800b754:	23a8      	movs	r3, #168	; 0xa8
 800b756:	58d4      	ldr	r4, [r2, r3]
 800b758:	4d14      	ldr	r5, [pc, #80]	; (800b7ac <RemapAndLinkDMAtoUARTRx+0x64c>)
 800b75a:	402c      	ands	r4, r5
 800b75c:	50d4      	str	r4, [r2, r3]
 800b75e:	58d5      	ldr	r5, [r2, r3]
 800b760:	24f0      	movs	r4, #240	; 0xf0
 800b762:	0424      	lsls	r4, r4, #16
 800b764:	432c      	orrs	r4, r5
 800b766:	50d4      	str	r4, [r2, r3]
 800b768:	e542      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800b76a:	4a0c      	ldr	r2, [pc, #48]	; (800b79c <RemapAndLinkDMAtoUARTRx+0x63c>)
 800b76c:	23a8      	movs	r3, #168	; 0xa8
 800b76e:	58d5      	ldr	r5, [r2, r3]
 800b770:	26f0      	movs	r6, #240	; 0xf0
 800b772:	43b5      	bics	r5, r6
 800b774:	50d5      	str	r5, [r2, r3]
 800b776:	58d4      	ldr	r4, [r2, r3]
 800b778:	4334      	orrs	r4, r6
 800b77a:	50d4      	str	r4, [r2, r3]
 800b77c:	e538      	b.n	800b1f0 <RemapAndLinkDMAtoUARTRx+0x90>
 800b77e:	46c0      	nop			; (mov r8, r8)
 800b780:	40005000 	.word	0x40005000
 800b784:	40020008 	.word	0x40020008
 800b788:	40020030 	.word	0x40020030
 800b78c:	40020058 	.word	0x40020058
 800b790:	4002006c 	.word	0x4002006c
 800b794:	4002041c 	.word	0x4002041c
 800b798:	40020430 	.word	0x40020430
 800b79c:	40020400 	.word	0x40020400
 800b7a0:	fffff0ff 	.word	0xfffff0ff
 800b7a4:	40020000 	.word	0x40020000
 800b7a8:	fff0ffff 	.word	0xfff0ffff
 800b7ac:	ff0fffff 	.word	0xff0fffff
 800b7b0:	40011400 	.word	0x40011400
 800b7b4:	40011800 	.word	0x40011800
 800b7b8:	40011c00 	.word	0x40011c00

0800b7bc <DMA_MSG_RX_Setup>:
{	
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	0004      	movs	r4, r0
 800b7c0:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800b7c2:	f7ff fccd 	bl	800b160 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	0028      	movs	r0, r5
 800b7ca:	f7ff fc13 	bl	800aff4 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);	
 800b7ce:	0020      	movs	r0, r4
 800b7d0:	f7ff fb12 	bl	800adf8 <GetPort>
 800b7d4:	1e41      	subs	r1, r0, #1
 800b7d6:	4803      	ldr	r0, [pc, #12]	; (800b7e4 <DMA_MSG_RX_Setup+0x28>)
 800b7d8:	1809      	adds	r1, r1, r0
 800b7da:	2201      	movs	r2, #1
 800b7dc:	0020      	movs	r0, r4
 800b7de:	f007 fc69 	bl	80130b4 <HAL_UART_Receive_DMA>
}
 800b7e2:	bd70      	pop	{r4, r5, r6, pc}
 800b7e4:	200019f0 	.word	0x200019f0

0800b7e8 <SetupMessagingRxDMAs>:
{	
 800b7e8:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <SetupMessagingRxDMAs+0x70>)
 800b7ec:	785b      	ldrb	r3, [r3, #1]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d014      	beq.n	800b81c <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800b7f2:	4b19      	ldr	r3, [pc, #100]	; (800b858 <SetupMessagingRxDMAs+0x70>)
 800b7f4:	789b      	ldrb	r3, [r3, #2]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d015      	beq.n	800b826 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800b7fa:	4b17      	ldr	r3, [pc, #92]	; (800b858 <SetupMessagingRxDMAs+0x70>)
 800b7fc:	78db      	ldrb	r3, [r3, #3]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d016      	beq.n	800b830 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800b802:	4b15      	ldr	r3, [pc, #84]	; (800b858 <SetupMessagingRxDMAs+0x70>)
 800b804:	791b      	ldrb	r3, [r3, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d017      	beq.n	800b83a <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800b80a:	4b13      	ldr	r3, [pc, #76]	; (800b858 <SetupMessagingRxDMAs+0x70>)
 800b80c:	795b      	ldrb	r3, [r3, #5]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d018      	beq.n	800b844 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800b812:	4b11      	ldr	r3, [pc, #68]	; (800b858 <SetupMessagingRxDMAs+0x70>)
 800b814:	799b      	ldrb	r3, [r3, #6]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d019      	beq.n	800b84e <SetupMessagingRxDMAs+0x66>
}
 800b81a:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800b81c:	490f      	ldr	r1, [pc, #60]	; (800b85c <SetupMessagingRxDMAs+0x74>)
 800b81e:	4810      	ldr	r0, [pc, #64]	; (800b860 <SetupMessagingRxDMAs+0x78>)
 800b820:	f7ff ffcc 	bl	800b7bc <DMA_MSG_RX_Setup>
 800b824:	e7e5      	b.n	800b7f2 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800b826:	490f      	ldr	r1, [pc, #60]	; (800b864 <SetupMessagingRxDMAs+0x7c>)
 800b828:	480f      	ldr	r0, [pc, #60]	; (800b868 <SetupMessagingRxDMAs+0x80>)
 800b82a:	f7ff ffc7 	bl	800b7bc <DMA_MSG_RX_Setup>
 800b82e:	e7e4      	b.n	800b7fa <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800b830:	490e      	ldr	r1, [pc, #56]	; (800b86c <SetupMessagingRxDMAs+0x84>)
 800b832:	480f      	ldr	r0, [pc, #60]	; (800b870 <SetupMessagingRxDMAs+0x88>)
 800b834:	f7ff ffc2 	bl	800b7bc <DMA_MSG_RX_Setup>
 800b838:	e7e3      	b.n	800b802 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800b83a:	490e      	ldr	r1, [pc, #56]	; (800b874 <SetupMessagingRxDMAs+0x8c>)
 800b83c:	480e      	ldr	r0, [pc, #56]	; (800b878 <SetupMessagingRxDMAs+0x90>)
 800b83e:	f7ff ffbd 	bl	800b7bc <DMA_MSG_RX_Setup>
 800b842:	e7e2      	b.n	800b80a <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800b844:	490d      	ldr	r1, [pc, #52]	; (800b87c <SetupMessagingRxDMAs+0x94>)
 800b846:	480e      	ldr	r0, [pc, #56]	; (800b880 <SetupMessagingRxDMAs+0x98>)
 800b848:	f7ff ffb8 	bl	800b7bc <DMA_MSG_RX_Setup>
 800b84c:	e7e1      	b.n	800b812 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800b84e:	490d      	ldr	r1, [pc, #52]	; (800b884 <SetupMessagingRxDMAs+0x9c>)
 800b850:	480d      	ldr	r0, [pc, #52]	; (800b888 <SetupMessagingRxDMAs+0xa0>)
 800b852:	f7ff ffb3 	bl	800b7bc <DMA_MSG_RX_Setup>
}
 800b856:	e7e0      	b.n	800b81a <SetupMessagingRxDMAs+0x32>
 800b858:	20001814 	.word	0x20001814
 800b85c:	20002214 	.word	0x20002214
 800b860:	20006d18 	.word	0x20006d18
 800b864:	2000224c 	.word	0x2000224c
 800b868:	20006d8c 	.word	0x20006d8c
 800b86c:	20002284 	.word	0x20002284
 800b870:	20006c9c 	.word	0x20006c9c
 800b874:	200022bc 	.word	0x200022bc
 800b878:	20006b34 	.word	0x20006b34
 800b87c:	200022f4 	.word	0x200022f4
 800b880:	20006c24 	.word	0x20006c24
 800b884:	2000232c 	.word	0x2000232c
 800b888:	20006bac 	.word	0x20006bac

0800b88c <SwitchStreamDMAToMsg>:
void SwitchStreamDMAToMsg(uint8_t port) {
 800b88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b88e:	b083      	sub	sp, #12
 800b890:	0004      	movs	r4, r0
	StopStreamDMA(port);
 800b892:	f7ff fb6f 	bl	800af74 <StopStreamDMA>
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1], streamDMA[port - 1].Instance);
 800b896:	9401      	str	r4, [sp, #4]
 800b898:	3c01      	subs	r4, #1
 800b89a:	00e7      	lsls	r7, r4, #3
 800b89c:	1b3d      	subs	r5, r7, r4
 800b89e:	00ed      	lsls	r5, r5, #3
 800b8a0:	4b0f      	ldr	r3, [pc, #60]	; (800b8e0 <SwitchStreamDMAToMsg+0x54>)
 800b8a2:	18ed      	adds	r5, r5, r3
 800b8a4:	4e0f      	ldr	r6, [pc, #60]	; (800b8e4 <SwitchStreamDMAToMsg+0x58>)
 800b8a6:	1b3b      	subs	r3, r7, r4
 800b8a8:	00db      	lsls	r3, r3, #3
 800b8aa:	5999      	ldr	r1, [r3, r6]
 800b8ac:	0028      	movs	r0, r5
 800b8ae:	f7ff fad3 	bl	800ae58 <DMA_MSG_RX_CH_Init>
	portStatus[GetPort(streamDMA[port - 1].Parent)] = FREE;
 800b8b2:	1b3b      	subs	r3, r7, r4
 800b8b4:	00db      	lsls	r3, r3, #3
 800b8b6:	18f3      	adds	r3, r6, r3
 800b8b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b8ba:	f7ff fa9d 	bl	800adf8 <GetPort>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4a09      	ldr	r2, [pc, #36]	; (800b8e8 <SwitchStreamDMAToMsg+0x5c>)
 800b8c2:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance = 0;
 800b8c4:	1b3f      	subs	r7, r7, r4
 800b8c6:	00ff      	lsls	r7, r7, #3
 800b8c8:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] = 0;
 800b8ca:	00a4      	lsls	r4, r4, #2
 800b8cc:	4a07      	ldr	r2, [pc, #28]	; (800b8ec <SwitchStreamDMAToMsg+0x60>)
 800b8ce:	50a3      	str	r3, [r4, r2]
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port - 1]);
 800b8d0:	9801      	ldr	r0, [sp, #4]
 800b8d2:	f002 fb9d 	bl	800e010 <GetUart>
 800b8d6:	0029      	movs	r1, r5
 800b8d8:	f7ff ff70 	bl	800b7bc <DMA_MSG_RX_Setup>
}
 800b8dc:	b003      	add	sp, #12
 800b8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8e0:	20002214 	.word	0x20002214
 800b8e4:	2000240c 	.word	0x2000240c
 800b8e8:	20001814 	.word	0x20001814
 800b8ec:	20001ed0 	.word	0x20001ed0

0800b8f0 <DMA_STREAM_Setup>:
{	
 800b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8f2:	0005      	movs	r5, r0
 800b8f4:	000f      	movs	r7, r1
 800b8f6:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800b8f8:	f7ff fa7e 	bl	800adf8 <GetPort>
	hDMA = &streamDMA[port-1];
 800b8fc:	3801      	subs	r0, #1
 800b8fe:	00c4      	lsls	r4, r0, #3
 800b900:	1a24      	subs	r4, r4, r0
 800b902:	00e4      	lsls	r4, r4, #3
 800b904:	4809      	ldr	r0, [pc, #36]	; (800b92c <DMA_STREAM_Setup+0x3c>)
 800b906:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800b908:	0021      	movs	r1, r4
 800b90a:	0028      	movs	r0, r5
 800b90c:	f7ff fc28 	bl	800b160 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800b910:	2101      	movs	r1, #1
 800b912:	0020      	movs	r0, r4
 800b914:	f7ff fb6e 	bl	800aff4 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800b918:	2369      	movs	r3, #105	; 0x69
 800b91a:	2201      	movs	r2, #1
 800b91c:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	3128      	adds	r1, #40	; 0x28
 800b922:	0032      	movs	r2, r6
 800b924:	0028      	movs	r0, r5
 800b926:	f007 fbc5 	bl	80130b4 <HAL_UART_Receive_DMA>
}
 800b92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b92c:	2000240c 	.word	0x2000240c

0800b930 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800b930:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800b932:	4807      	ldr	r0, [pc, #28]	; (800b950 <CRC_Init+0x20>)
 800b934:	4b07      	ldr	r3, [pc, #28]	; (800b954 <CRC_Init+0x24>)
 800b936:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800b938:	2310      	movs	r3, #16
 800b93a:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800b93c:	2300      	movs	r3, #0
 800b93e:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800b940:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800b942:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800b944:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800b946:	3303      	adds	r3, #3
 800b948:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800b94a:	f005 f803 	bl	8010954 <HAL_CRC_Init>
}
 800b94e:	bd10      	pop	{r4, pc}
 800b950:	20006e04 	.word	0x20006e04
 800b954:	40023000 	.word	0x40023000

0800b958 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800b958:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800b95a:	4a05      	ldr	r2, [pc, #20]	; (800b970 <HAL_CRC_MspInit+0x18>)
 800b95c:	6951      	ldr	r1, [r2, #20]
 800b95e:	2340      	movs	r3, #64	; 0x40
 800b960:	4319      	orrs	r1, r3
 800b962:	6151      	str	r1, [r2, #20]
 800b964:	6952      	ldr	r2, [r2, #20]
 800b966:	4013      	ands	r3, r2
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	9b01      	ldr	r3, [sp, #4]
}
 800b96c:	b002      	add	sp, #8
 800b96e:	4770      	bx	lr
 800b970:	40021000 	.word	0x40021000

0800b974 <CalculateCRC8>:
/*
 * calculate CRC8 byte for a data buffer
 */

uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800b974:	b530      	push	{r4, r5, lr}
 800b976:	b083      	sub	sp, #12
 800b978:	0005      	movs	r5, r0
 800b97a:	000c      	movs	r4, r1
  uint8_t pTemp;
  uint8_t temp_index;
  uint8_t temp_buffer[4] = {0};
 800b97c:	2300      	movs	r3, #0
 800b97e:	9301      	str	r3, [sp, #4]

  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800b980:	2800      	cmp	r0, #0
 800b982:	d045      	beq.n	800ba10 <CalculateCRC8+0x9c>

	return pTemp;
  }
  
else
	return 0;
 800b984:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800b986:	2900      	cmp	r1, #0
 800b988:	d043      	beq.n	800ba12 <CalculateCRC8+0x9e>
	if(size < 4)
 800b98a:	2903      	cmp	r1, #3
 800b98c:	d817      	bhi.n	800b9be <CalculateCRC8+0x4a>
			temp_buffer[i] = pBuffer[temp_index++];
 800b98e:	782a      	ldrb	r2, [r5, #0]
 800b990:	ab01      	add	r3, sp, #4
 800b992:	701a      	strb	r2, [r3, #0]
			if(--size == 0) break;
 800b994:	2901      	cmp	r1, #1
 800b996:	d00b      	beq.n	800b9b0 <CalculateCRC8+0x3c>
 800b998:	3c02      	subs	r4, #2
 800b99a:	b2a4      	uxth	r4, r4
 800b99c:	3401      	adds	r4, #1
		for(int i=0; i<4; i++)
 800b99e:	2301      	movs	r3, #1
			temp_buffer[i] = pBuffer[temp_index++];
 800b9a0:	a901      	add	r1, sp, #4
 800b9a2:	5cea      	ldrb	r2, [r5, r3]
 800b9a4:	545a      	strb	r2, [r3, r1]
			if(--size == 0) break;
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	d002      	beq.n	800b9b0 <CalculateCRC8+0x3c>
		for(int i=0; i<4; i++)
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	2b04      	cmp	r3, #4
 800b9ae:	d1f8      	bne.n	800b9a2 <CalculateCRC8+0x2e>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	a901      	add	r1, sp, #4
 800b9b4:	4818      	ldr	r0, [pc, #96]	; (800ba18 <CalculateCRC8+0xa4>)
 800b9b6:	f005 f82a 	bl	8010a0e <HAL_CRC_Calculate>
 800b9ba:	b2c0      	uxtb	r0, r0
 800b9bc:	e029      	b.n	800ba12 <CalculateCRC8+0x9e>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800b9be:	088a      	lsrs	r2, r1, #2
 800b9c0:	0029      	movs	r1, r5
 800b9c2:	4815      	ldr	r0, [pc, #84]	; (800ba18 <CalculateCRC8+0xa4>)
 800b9c4:	f005 f823 	bl	8010a0e <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	4023      	ands	r3, r4
 800b9cc:	d01e      	beq.n	800ba0c <CalculateCRC8+0x98>
			temp_index = size - (size%4);
 800b9ce:	22fc      	movs	r2, #252	; 0xfc
 800b9d0:	4014      	ands	r4, r2
				temp_buffer[i] = pBuffer[temp_index++];
 800b9d2:	1c61      	adds	r1, r4, #1
 800b9d4:	b2c9      	uxtb	r1, r1
 800b9d6:	5d28      	ldrb	r0, [r5, r4]
 800b9d8:	aa01      	add	r2, sp, #4
 800b9da:	7010      	strb	r0, [r2, #0]
				if(--size == 0) break;
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d00e      	beq.n	800b9fe <CalculateCRC8+0x8a>
 800b9e0:	3b02      	subs	r3, #2
 800b9e2:	b29b      	uxth	r3, r3
 800b9e4:	3301      	adds	r3, #1
			for(int i=0; i<4; i++)
 800b9e6:	2201      	movs	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b9e8:	ac01      	add	r4, sp, #4
 800b9ea:	1c48      	adds	r0, r1, #1
 800b9ec:	b2c0      	uxtb	r0, r0
 800b9ee:	5c69      	ldrb	r1, [r5, r1]
 800b9f0:	5511      	strb	r1, [r2, r4]
				if(--size == 0) break;
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d003      	beq.n	800b9fe <CalculateCRC8+0x8a>
			for(int i=0; i<4; i++)
 800b9f6:	3201      	adds	r2, #1
				temp_buffer[i] = pBuffer[temp_index++];
 800b9f8:	0001      	movs	r1, r0
			for(int i=0; i<4; i++)
 800b9fa:	2a04      	cmp	r2, #4
 800b9fc:	d1f5      	bne.n	800b9ea <CalculateCRC8+0x76>
		  	pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)temp_buffer, 1);
 800b9fe:	2201      	movs	r2, #1
 800ba00:	a901      	add	r1, sp, #4
 800ba02:	4805      	ldr	r0, [pc, #20]	; (800ba18 <CalculateCRC8+0xa4>)
 800ba04:	f004 ffd7 	bl	80109b6 <HAL_CRC_Accumulate>
 800ba08:	b2c0      	uxtb	r0, r0
 800ba0a:	e002      	b.n	800ba12 <CalculateCRC8+0x9e>
		pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800ba0c:	b2c0      	uxtb	r0, r0
 800ba0e:	e000      	b.n	800ba12 <CalculateCRC8+0x9e>
	return 0;
 800ba10:	2000      	movs	r0, #0
}
 800ba12:	b003      	add	sp, #12
 800ba14:	bd30      	pop	{r4, r5, pc}
 800ba16:	46c0      	nop			; (mov r8, r8)
 800ba18:	20006e04 	.word	0x20006e04

0800ba1c <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 800ba1c:	b570      	push	{r4, r5, r6, lr}
 800ba1e:	0006      	movs	r6, r0
 800ba20:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 800ba22:	f005 fd63 	bl	80114ec <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800ba26:	4b2b      	ldr	r3, [pc, #172]	; (800bad4 <EE_VerifyPageFullWriteVariable+0xb8>)
 800ba28:	881a      	ldrh	r2, [r3, #0]
 800ba2a:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800ba2c:	4b2a      	ldr	r3, [pc, #168]	; (800bad8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800ba2e:	881b      	ldrh	r3, [r3, #0]
 800ba30:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d104      	bne.n	800ba40 <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 800ba36:	4929      	ldr	r1, [pc, #164]	; (800badc <EE_VerifyPageFullWriteVariable+0xc0>)
 800ba38:	428a      	cmp	r2, r1
 800ba3a:	d007      	beq.n	800ba4c <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 800ba3c:	3302      	adds	r3, #2
 800ba3e:	e005      	b.n	800ba4c <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 800ba40:	2a00      	cmp	r2, #0
 800ba42:	d143      	bne.n	800bacc <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 800ba44:	4925      	ldr	r1, [pc, #148]	; (800badc <EE_VerifyPageFullWriteVariable+0xc0>)
 800ba46:	428b      	cmp	r3, r1
 800ba48:	d042      	beq.n	800bad0 <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 800ba4a:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800ba4c:	4a24      	ldr	r2, [pc, #144]	; (800bae0 <EE_VerifyPageFullWriteVariable+0xc4>)
 800ba4e:	189c      	adds	r4, r3, r2
 800ba50:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800ba52:	02db      	lsls	r3, r3, #11
 800ba54:	4a23      	ldr	r2, [pc, #140]	; (800bae4 <EE_VerifyPageFullWriteVariable+0xc8>)
 800ba56:	4694      	mov	ip, r2
 800ba58:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800ba5a:	6822      	ldr	r2, [r4, #0]
 800ba5c:	3201      	adds	r2, #1
 800ba5e:	d005      	beq.n	800ba6c <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 800ba60:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 800ba62:	429c      	cmp	r4, r3
 800ba64:	d22e      	bcs.n	800bac4 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800ba66:	6822      	ldr	r2, [r4, #0]
 800ba68:	3201      	adds	r2, #1
 800ba6a:	d1f9      	bne.n	800ba60 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800ba6c:	002a      	movs	r2, r5
 800ba6e:	2300      	movs	r3, #0
 800ba70:	0021      	movs	r1, r4
 800ba72:	2001      	movs	r0, #1
 800ba74:	f005 fd84 	bl	8011580 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800ba78:	481b      	ldr	r0, [pc, #108]	; (800bae8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800ba7a:	f005 fd53 	bl	8011524 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	d003      	beq.n	800ba8a <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 800ba82:	4b1a      	ldr	r3, [pc, #104]	; (800baec <EE_VerifyPageFullWriteVariable+0xd0>)
 800ba84:	69d8      	ldr	r0, [r3, #28]
 800ba86:	b280      	uxth	r0, r0
 800ba88:	e01f      	b.n	800baca <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800ba8a:	4a19      	ldr	r2, [pc, #100]	; (800baf0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800ba8c:	6913      	ldr	r3, [r2, #16]
 800ba8e:	2101      	movs	r1, #1
 800ba90:	438b      	bics	r3, r1
 800ba92:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 800ba94:	1ca1      	adds	r1, r4, #2
 800ba96:	0032      	movs	r2, r6
 800ba98:	2300      	movs	r3, #0
 800ba9a:	2001      	movs	r0, #1
 800ba9c:	f005 fd70 	bl	8011580 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800baa0:	4811      	ldr	r0, [pc, #68]	; (800bae8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800baa2:	f005 fd3f 	bl	8011524 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800baa6:	2800      	cmp	r0, #0
 800baa8:	d003      	beq.n	800bab2 <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 800baaa:	4b10      	ldr	r3, [pc, #64]	; (800baec <EE_VerifyPageFullWriteVariable+0xd0>)
 800baac:	69d8      	ldr	r0, [r3, #28]
 800baae:	b280      	uxth	r0, r0
 800bab0:	e00b      	b.n	800baca <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bab2:	4a0f      	ldr	r2, [pc, #60]	; (800baf0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800bab4:	6913      	ldr	r3, [r2, #16]
 800bab6:	2101      	movs	r1, #1
 800bab8:	438b      	bics	r3, r1
 800baba:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800babc:	4b0b      	ldr	r3, [pc, #44]	; (800baec <EE_VerifyPageFullWriteVariable+0xd0>)
 800babe:	69d8      	ldr	r0, [r3, #28]
 800bac0:	b280      	uxth	r0, r0
 800bac2:	e002      	b.n	800baca <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 800bac4:	f005 fd24 	bl	8011510 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 800bac8:	2080      	movs	r0, #128	; 0x80
}
 800baca:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 800bacc:	20ab      	movs	r0, #171	; 0xab
 800bace:	e7fc      	b.n	800baca <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 800bad0:	2302      	movs	r3, #2
 800bad2:	e7bb      	b.n	800ba4c <EE_VerifyPageFullWriteVariable+0x30>
 800bad4:	0801e000 	.word	0x0801e000
 800bad8:	0801f000 	.word	0x0801f000
 800badc:	0000eeee 	.word	0x0000eeee
 800bae0:	0001003c 	.word	0x0001003c
 800bae4:	0801effe 	.word	0x0801effe
 800bae8:	0000c350 	.word	0x0000c350
 800baec:	20006fc8 	.word	0x20006fc8
 800baf0:	40022000 	.word	0x40022000

0800baf4 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 800baf4:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800baf6:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <EE_ReadVariable+0x50>)
 800baf8:	881c      	ldrh	r4, [r3, #0]
 800bafa:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bafc:	4b12      	ldr	r3, [pc, #72]	; (800bb48 <EE_ReadVariable+0x54>)
 800bafe:	881b      	ldrh	r3, [r3, #0]
 800bb00:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 800bb02:	2c00      	cmp	r4, #0
 800bb04:	d006      	beq.n	800bb14 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d003      	beq.n	800bb12 <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 800bb0a:	20ab      	movs	r0, #171	; 0xab
 800bb0c:	e019      	b.n	800bb42 <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 800bb0e:	2001      	movs	r0, #1
 800bb10:	e017      	b.n	800bb42 <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 800bb12:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 800bb14:	02e3      	lsls	r3, r4, #11
 800bb16:	4a0d      	ldr	r2, [pc, #52]	; (800bb4c <EE_ReadVariable+0x58>)
 800bb18:	4694      	mov	ip, r2
 800bb1a:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800bb1c:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 800bb1e:	4a0c      	ldr	r2, [pc, #48]	; (800bb50 <EE_ReadVariable+0x5c>)
 800bb20:	4694      	mov	ip, r2
 800bb22:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 800bb24:	881a      	ldrh	r2, [r3, #0]
 800bb26:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800bb28:	4290      	cmp	r0, r2
 800bb2a:	d006      	beq.n	800bb3a <EE_ReadVariable+0x46>
			Address =Address - 4;
 800bb2c:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800bb2e:	42a3      	cmp	r3, r4
 800bb30:	d9ed      	bls.n	800bb0e <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 800bb32:	881a      	ldrh	r2, [r3, #0]
 800bb34:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 800bb36:	4282      	cmp	r2, r0
 800bb38:	d1f8      	bne.n	800bb2c <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800bb3a:	3b02      	subs	r3, #2
 800bb3c:	881b      	ldrh	r3, [r3, #0]
 800bb3e:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 800bb40:	2000      	movs	r0, #0
}
 800bb42:	bd10      	pop	{r4, pc}
 800bb44:	0801e000 	.word	0x0801e000
 800bb48:	0801f000 	.word	0x0801f000
 800bb4c:	0801effe 	.word	0x0801effe
 800bb50:	0801e002 	.word	0x0801e002

0800bb54 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 800bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb56:	46de      	mov	lr, fp
 800bb58:	4647      	mov	r7, r8
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	0005      	movs	r5, r0
 800bb60:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 800bb62:	f005 fcc3 	bl	80114ec <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bb66:	0031      	movs	r1, r6
 800bb68:	0028      	movs	r0, r5
 800bb6a:	f7ff ff57 	bl	800ba1c <EE_VerifyPageFullWriteVariable>
 800bb6e:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 800bb70:	2880      	cmp	r0, #128	; 0x80
 800bb72:	d007      	beq.n	800bb84 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 800bb74:	f005 fccc 	bl	8011510 <HAL_FLASH_Lock>
}
 800bb78:	0020      	movs	r0, r4
 800bb7a:	b003      	add	sp, #12
 800bb7c:	bc0c      	pop	{r2, r3}
 800bb7e:	4690      	mov	r8, r2
 800bb80:	469b      	mov	fp, r3
 800bb82:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 800bb84:	f005 fcb2 	bl	80114ec <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bb88:	4b3e      	ldr	r3, [pc, #248]	; (800bc84 <EE_WriteVariable+0x130>)
 800bb8a:	881b      	ldrh	r3, [r3, #0]
 800bb8c:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bb8e:	4a3e      	ldr	r2, [pc, #248]	; (800bc88 <EE_WriteVariable+0x134>)
 800bb90:	8812      	ldrh	r2, [r2, #0]
 800bb92:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d007      	beq.n	800bba8 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 800bb98:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800bb9a:	2a00      	cmp	r2, #0
 800bb9c:	d1ea      	bne.n	800bb74 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800bb9e:	4b3a      	ldr	r3, [pc, #232]	; (800bc88 <EE_WriteVariable+0x134>)
 800bba0:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 800bba2:	4b38      	ldr	r3, [pc, #224]	; (800bc84 <EE_WriteVariable+0x130>)
 800bba4:	9301      	str	r3, [sp, #4]
 800bba6:	e003      	b.n	800bbb0 <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 800bba8:	4b36      	ldr	r3, [pc, #216]	; (800bc84 <EE_WriteVariable+0x130>)
 800bbaa:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800bbac:	4b36      	ldr	r3, [pc, #216]	; (800bc88 <EE_WriteVariable+0x134>)
 800bbae:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 800bbb0:	4a36      	ldr	r2, [pc, #216]	; (800bc8c <EE_WriteVariable+0x138>)
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	9901      	ldr	r1, [sp, #4]
 800bbb6:	2001      	movs	r0, #1
 800bbb8:	f005 fce2 	bl	8011580 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bbbc:	4834      	ldr	r0, [pc, #208]	; (800bc90 <EE_WriteVariable+0x13c>)
 800bbbe:	f005 fcb1 	bl	8011524 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d003      	beq.n	800bbce <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 800bbc6:	4b33      	ldr	r3, [pc, #204]	; (800bc94 <EE_WriteVariable+0x140>)
 800bbc8:	69dc      	ldr	r4, [r3, #28]
 800bbca:	b2a4      	uxth	r4, r4
 800bbcc:	e7d2      	b.n	800bb74 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bbce:	4a32      	ldr	r2, [pc, #200]	; (800bc98 <EE_WriteVariable+0x144>)
 800bbd0:	6913      	ldr	r3, [r2, #16]
 800bbd2:	2101      	movs	r1, #1
 800bbd4:	438b      	bics	r3, r1
 800bbd6:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 800bbd8:	0031      	movs	r1, r6
 800bbda:	0028      	movs	r0, r5
 800bbdc:	f7ff ff1e 	bl	800ba1c <EE_VerifyPageFullWriteVariable>
 800bbe0:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 800bbe2:	d1c7      	bne.n	800bb74 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bbe4:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bbe6:	4b2d      	ldr	r3, [pc, #180]	; (800bc9c <EE_WriteVariable+0x148>)
 800bbe8:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800bbea:	4e2d      	ldr	r6, [pc, #180]	; (800bca0 <EE_WriteVariable+0x14c>)
 800bbec:	e003      	b.n	800bbf6 <EE_WriteVariable+0xa2>
 800bbee:	3701      	adds	r7, #1
 800bbf0:	b2bf      	uxth	r7, r7
 800bbf2:	42b7      	cmp	r7, r6
 800bbf4:	d00f      	beq.n	800bc16 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 800bbf6:	42bd      	cmp	r5, r7
 800bbf8:	d0f9      	beq.n	800bbee <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bbfa:	4928      	ldr	r1, [pc, #160]	; (800bc9c <EE_WriteVariable+0x148>)
 800bbfc:	0038      	movs	r0, r7
 800bbfe:	f7ff ff79 	bl	800baf4 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 800bc02:	2801      	cmp	r0, #1
 800bc04:	d0f3      	beq.n	800bbee <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bc06:	4643      	mov	r3, r8
 800bc08:	8819      	ldrh	r1, [r3, #0]
 800bc0a:	0038      	movs	r0, r7
 800bc0c:	f7ff ff06 	bl	800ba1c <EE_VerifyPageFullWriteVariable>
 800bc10:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 800bc12:	d0ec      	beq.n	800bbee <EE_WriteVariable+0x9a>
 800bc14:	e7ae      	b.n	800bb74 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 800bc16:	4658      	mov	r0, fp
 800bc18:	f005 fd2a 	bl	8011670 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc1c:	481c      	ldr	r0, [pc, #112]	; (800bc90 <EE_WriteVariable+0x13c>)
 800bc1e:	f005 fc81 	bl	8011524 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d003      	beq.n	800bc2e <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 800bc26:	4b1b      	ldr	r3, [pc, #108]	; (800bc94 <EE_WriteVariable+0x140>)
 800bc28:	69dc      	ldr	r4, [r3, #28]
 800bc2a:	b2a4      	uxth	r4, r4
 800bc2c:	e7a2      	b.n	800bb74 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800bc2e:	2080      	movs	r0, #128	; 0x80
 800bc30:	0100      	lsls	r0, r0, #4
 800bc32:	4458      	add	r0, fp
 800bc34:	f005 fd1c 	bl	8011670 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc38:	4815      	ldr	r0, [pc, #84]	; (800bc90 <EE_WriteVariable+0x13c>)
 800bc3a:	f005 fc73 	bl	8011524 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bc3e:	2800      	cmp	r0, #0
 800bc40:	d003      	beq.n	800bc4a <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 800bc42:	4b14      	ldr	r3, [pc, #80]	; (800bc94 <EE_WriteVariable+0x140>)
 800bc44:	69dc      	ldr	r4, [r3, #28]
 800bc46:	b2a4      	uxth	r4, r4
 800bc48:	e794      	b.n	800bb74 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bc4a:	4a13      	ldr	r2, [pc, #76]	; (800bc98 <EE_WriteVariable+0x144>)
 800bc4c:	6913      	ldr	r3, [r2, #16]
 800bc4e:	2102      	movs	r1, #2
 800bc50:	438b      	bics	r3, r1
 800bc52:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 800bc54:	2200      	movs	r2, #0
 800bc56:	2300      	movs	r3, #0
 800bc58:	9901      	ldr	r1, [sp, #4]
 800bc5a:	2001      	movs	r0, #1
 800bc5c:	f005 fc90 	bl	8011580 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bc60:	480b      	ldr	r0, [pc, #44]	; (800bc90 <EE_WriteVariable+0x13c>)
 800bc62:	f005 fc5f 	bl	8011524 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d003      	beq.n	800bc72 <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 800bc6a:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <EE_WriteVariable+0x140>)
 800bc6c:	69dc      	ldr	r4, [r3, #28]
 800bc6e:	b2a4      	uxth	r4, r4
 800bc70:	e780      	b.n	800bb74 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bc72:	4a09      	ldr	r2, [pc, #36]	; (800bc98 <EE_WriteVariable+0x144>)
 800bc74:	6913      	ldr	r3, [r2, #16]
 800bc76:	2101      	movs	r1, #1
 800bc78:	438b      	bics	r3, r1
 800bc7a:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 800bc7c:	f005 fc48 	bl	8011510 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 800bc80:	2400      	movs	r4, #0
 800bc82:	e777      	b.n	800bb74 <EE_WriteVariable+0x20>
 800bc84:	0801e000 	.word	0x0801e000
 800bc88:	0801f000 	.word	0x0801f000
 800bc8c:	0000eeee 	.word	0x0000eeee
 800bc90:	0000c350 	.word	0x0000c350
 800bc94:	20006fc8 	.word	0x20006fc8
 800bc98:	40022000 	.word	0x40022000
 800bc9c:	2000255c 	.word	0x2000255c
 800bca0:	00000401 	.word	0x00000401

0800bca4 <EE_Format>:
uint16_t EE_Format(void){
 800bca4:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 800bca6:	f005 fc21 	bl	80114ec <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bcaa:	4829      	ldr	r0, [pc, #164]	; (800bd50 <EE_Format+0xac>)
 800bcac:	f005 fce0 	bl	8011670 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcb0:	4828      	ldr	r0, [pc, #160]	; (800bd54 <EE_Format+0xb0>)
 800bcb2:	f005 fc37 	bl	8011524 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d003      	beq.n	800bcc2 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800bcba:	4b27      	ldr	r3, [pc, #156]	; (800bd58 <EE_Format+0xb4>)
 800bcbc:	69d8      	ldr	r0, [r3, #28]
 800bcbe:	b280      	uxth	r0, r0
}
 800bcc0:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bcc2:	4826      	ldr	r0, [pc, #152]	; (800bd5c <EE_Format+0xb8>)
 800bcc4:	f005 fcd4 	bl	8011670 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcc8:	4822      	ldr	r0, [pc, #136]	; (800bd54 <EE_Format+0xb0>)
 800bcca:	f005 fc2b 	bl	8011524 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d003      	beq.n	800bcda <EE_Format+0x36>
			return pFlash.ErrorCode;
 800bcd2:	4b21      	ldr	r3, [pc, #132]	; (800bd58 <EE_Format+0xb4>)
 800bcd4:	69d8      	ldr	r0, [r3, #28]
 800bcd6:	b280      	uxth	r0, r0
 800bcd8:	e7f2      	b.n	800bcc0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bcda:	4a21      	ldr	r2, [pc, #132]	; (800bd60 <EE_Format+0xbc>)
 800bcdc:	6913      	ldr	r3, [r2, #16]
 800bcde:	2102      	movs	r1, #2
 800bce0:	438b      	bics	r3, r1
 800bce2:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bce4:	2200      	movs	r2, #0
 800bce6:	2300      	movs	r3, #0
 800bce8:	4919      	ldr	r1, [pc, #100]	; (800bd50 <EE_Format+0xac>)
 800bcea:	2001      	movs	r0, #1
 800bcec:	f005 fc48 	bl	8011580 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bcf0:	4818      	ldr	r0, [pc, #96]	; (800bd54 <EE_Format+0xb0>)
 800bcf2:	f005 fc17 	bl	8011524 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d003      	beq.n	800bd02 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 800bcfa:	4b17      	ldr	r3, [pc, #92]	; (800bd58 <EE_Format+0xb4>)
 800bcfc:	69d8      	ldr	r0, [r3, #28]
 800bcfe:	b280      	uxth	r0, r0
 800bd00:	e7de      	b.n	800bcc0 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd02:	4a17      	ldr	r2, [pc, #92]	; (800bd60 <EE_Format+0xbc>)
 800bd04:	6913      	ldr	r3, [r2, #16]
 800bd06:	2101      	movs	r1, #1
 800bd08:	438b      	bics	r3, r1
 800bd0a:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bd0c:	4815      	ldr	r0, [pc, #84]	; (800bd64 <EE_Format+0xc0>)
 800bd0e:	f005 fcaf 	bl	8011670 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd12:	4810      	ldr	r0, [pc, #64]	; (800bd54 <EE_Format+0xb0>)
 800bd14:	f005 fc06 	bl	8011524 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d003      	beq.n	800bd24 <EE_Format+0x80>
		return pFlash.ErrorCode;
 800bd1c:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <EE_Format+0xb4>)
 800bd1e:	69d8      	ldr	r0, [r3, #28]
 800bd20:	b280      	uxth	r0, r0
 800bd22:	e7cd      	b.n	800bcc0 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bd24:	4810      	ldr	r0, [pc, #64]	; (800bd68 <EE_Format+0xc4>)
 800bd26:	f005 fca3 	bl	8011670 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd2a:	480a      	ldr	r0, [pc, #40]	; (800bd54 <EE_Format+0xb0>)
 800bd2c:	f005 fbfa 	bl	8011524 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800bd30:	2800      	cmp	r0, #0
 800bd32:	d003      	beq.n	800bd3c <EE_Format+0x98>
			return pFlash.ErrorCode;
 800bd34:	4b08      	ldr	r3, [pc, #32]	; (800bd58 <EE_Format+0xb4>)
 800bd36:	69d8      	ldr	r0, [r3, #28]
 800bd38:	b280      	uxth	r0, r0
 800bd3a:	e7c1      	b.n	800bcc0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bd3c:	4a08      	ldr	r2, [pc, #32]	; (800bd60 <EE_Format+0xbc>)
 800bd3e:	6913      	ldr	r3, [r2, #16]
 800bd40:	2101      	movs	r1, #1
 800bd42:	438b      	bics	r3, r1
 800bd44:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 800bd46:	f005 fbe3 	bl	8011510 <HAL_FLASH_Lock>
	return FlashStatus;
 800bd4a:	2000      	movs	r0, #0
 800bd4c:	e7b8      	b.n	800bcc0 <EE_Format+0x1c>
 800bd4e:	46c0      	nop			; (mov r8, r8)
 800bd50:	0801e000 	.word	0x0801e000
 800bd54:	0000c350 	.word	0x0000c350
 800bd58:	20006fc8 	.word	0x20006fc8
 800bd5c:	0801e800 	.word	0x0801e800
 800bd60:	40022000 	.word	0x40022000
 800bd64:	0801f000 	.word	0x0801f000
 800bd68:	0801f800 	.word	0x0801f800

0800bd6c <EE_Init>:
uint16_t EE_Init(void){
 800bd6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd6e:	46c6      	mov	lr, r8
 800bd70:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 800bd72:	f005 fbbb 	bl	80114ec <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 800bd76:	4bbe      	ldr	r3, [pc, #760]	; (800c070 <EE_Init+0x304>)
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800bd7c:	4abd      	ldr	r2, [pc, #756]	; (800c074 <EE_Init+0x308>)
 800bd7e:	8812      	ldrh	r2, [r2, #0]
 800bd80:	b292      	uxth	r2, r2
	switch(PageStatusA){
 800bd82:	49bd      	ldr	r1, [pc, #756]	; (800c078 <EE_Init+0x30c>)
 800bd84:	428b      	cmp	r3, r1
 800bd86:	d100      	bne.n	800bd8a <EE_Init+0x1e>
 800bd88:	e074      	b.n	800be74 <EE_Init+0x108>
 800bd8a:	49bc      	ldr	r1, [pc, #752]	; (800c07c <EE_Init+0x310>)
 800bd8c:	428b      	cmp	r3, r1
 800bd8e:	d011      	beq.n	800bdb4 <EE_Init+0x48>
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d100      	bne.n	800bd96 <EE_Init+0x2a>
 800bd94:	e109      	b.n	800bfaa <EE_Init+0x23e>
			FlashStatus =EE_Format();
 800bd96:	f7ff ff85 	bl	800bca4 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bd9a:	48b9      	ldr	r0, [pc, #740]	; (800c080 <EE_Init+0x314>)
 800bd9c:	f005 fbc2 	bl	8011524 <FLASH_WaitForLastOperation>
 800bda0:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 800bda2:	2e00      	cmp	r6, #0
 800bda4:	d102      	bne.n	800bdac <EE_Init+0x40>
	HAL_FLASH_Lock();
 800bda6:	f005 fbb3 	bl	8011510 <HAL_FLASH_Lock>
	return HAL_OK;
 800bdaa:	2600      	movs	r6, #0
}
 800bdac:	0030      	movs	r0, r6
 800bdae:	bc04      	pop	{r2}
 800bdb0:	4690      	mov	r8, r2
 800bdb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	d00d      	beq.n	800bdd4 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 800bdb8:	4baf      	ldr	r3, [pc, #700]	; (800c078 <EE_Init+0x30c>)
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d028      	beq.n	800be10 <EE_Init+0xa4>
				FlashStatus =EE_Format();
 800bdbe:	f7ff ff71 	bl	800bca4 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdc2:	48af      	ldr	r0, [pc, #700]	; (800c080 <EE_Init+0x314>)
 800bdc4:	f005 fbae 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d0ec      	beq.n	800bda6 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800bdcc:	4bad      	ldr	r3, [pc, #692]	; (800c084 <EE_Init+0x318>)
 800bdce:	69de      	ldr	r6, [r3, #28]
 800bdd0:	b2b6      	uxth	r6, r6
 800bdd2:	e7eb      	b.n	800bdac <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800bdd4:	48a6      	ldr	r0, [pc, #664]	; (800c070 <EE_Init+0x304>)
 800bdd6:	f005 fc4b 	bl	8011670 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdda:	48a9      	ldr	r0, [pc, #676]	; (800c080 <EE_Init+0x314>)
 800bddc:	f005 fba2 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d003      	beq.n	800bdec <EE_Init+0x80>
					return pFlash.ErrorCode;
 800bde4:	4ba7      	ldr	r3, [pc, #668]	; (800c084 <EE_Init+0x318>)
 800bde6:	69de      	ldr	r6, [r3, #28]
 800bde8:	b2b6      	uxth	r6, r6
 800bdea:	e7df      	b.n	800bdac <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800bdec:	48a6      	ldr	r0, [pc, #664]	; (800c088 <EE_Init+0x31c>)
 800bdee:	f005 fc3f 	bl	8011670 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bdf2:	48a3      	ldr	r0, [pc, #652]	; (800c080 <EE_Init+0x314>)
 800bdf4:	f005 fb96 	bl	8011524 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d105      	bne.n	800be08 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bdfc:	4aa3      	ldr	r2, [pc, #652]	; (800c08c <EE_Init+0x320>)
 800bdfe:	6913      	ldr	r3, [r2, #16]
 800be00:	2102      	movs	r1, #2
 800be02:	438b      	bics	r3, r1
 800be04:	6113      	str	r3, [r2, #16]
 800be06:	e7ce      	b.n	800bda6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800be08:	4b9e      	ldr	r3, [pc, #632]	; (800c084 <EE_Init+0x318>)
 800be0a:	69de      	ldr	r6, [r3, #28]
 800be0c:	b2b6      	uxth	r6, r6
 800be0e:	e7cd      	b.n	800bdac <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800be10:	4897      	ldr	r0, [pc, #604]	; (800c070 <EE_Init+0x304>)
 800be12:	f005 fc2d 	bl	8011670 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be16:	489a      	ldr	r0, [pc, #616]	; (800c080 <EE_Init+0x314>)
 800be18:	f005 fb84 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be1c:	2800      	cmp	r0, #0
 800be1e:	d003      	beq.n	800be28 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 800be20:	4b98      	ldr	r3, [pc, #608]	; (800c084 <EE_Init+0x318>)
 800be22:	69de      	ldr	r6, [r3, #28]
 800be24:	b2b6      	uxth	r6, r6
 800be26:	e7c1      	b.n	800bdac <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800be28:	4897      	ldr	r0, [pc, #604]	; (800c088 <EE_Init+0x31c>)
 800be2a:	f005 fc21 	bl	8011670 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be2e:	4894      	ldr	r0, [pc, #592]	; (800c080 <EE_Init+0x314>)
 800be30:	f005 fb78 	bl	8011524 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800be34:	2800      	cmp	r0, #0
 800be36:	d003      	beq.n	800be40 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 800be38:	4b92      	ldr	r3, [pc, #584]	; (800c084 <EE_Init+0x318>)
 800be3a:	69de      	ldr	r6, [r3, #28]
 800be3c:	b2b6      	uxth	r6, r6
 800be3e:	e7b5      	b.n	800bdac <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800be40:	4a92      	ldr	r2, [pc, #584]	; (800c08c <EE_Init+0x320>)
 800be42:	6913      	ldr	r3, [r2, #16]
 800be44:	2102      	movs	r1, #2
 800be46:	438b      	bics	r3, r1
 800be48:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	4989      	ldr	r1, [pc, #548]	; (800c074 <EE_Init+0x308>)
 800be50:	2001      	movs	r0, #1
 800be52:	f005 fb95 	bl	8011580 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800be56:	488a      	ldr	r0, [pc, #552]	; (800c080 <EE_Init+0x314>)
 800be58:	f005 fb64 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d105      	bne.n	800be6c <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800be60:	4a8a      	ldr	r2, [pc, #552]	; (800c08c <EE_Init+0x320>)
 800be62:	6913      	ldr	r3, [r2, #16]
 800be64:	2101      	movs	r1, #1
 800be66:	438b      	bics	r3, r1
 800be68:	6113      	str	r3, [r2, #16]
 800be6a:	e79c      	b.n	800bda6 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800be6c:	4b85      	ldr	r3, [pc, #532]	; (800c084 <EE_Init+0x318>)
 800be6e:	69de      	ldr	r6, [r3, #28]
 800be70:	b2b6      	uxth	r6, r6
 800be72:	e79b      	b.n	800bdac <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 800be74:	2a00      	cmp	r2, #0
 800be76:	d157      	bne.n	800bf28 <EE_Init+0x1bc>
 800be78:	2401      	movs	r4, #1
	int16_t x =-1;
 800be7a:	2701      	movs	r7, #1
 800be7c:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800be7e:	4d84      	ldr	r5, [pc, #528]	; (800c090 <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800be80:	4b84      	ldr	r3, [pc, #528]	; (800c094 <EE_Init+0x328>)
 800be82:	4698      	mov	r8, r3
 800be84:	e005      	b.n	800be92 <EE_Init+0x126>
						x =VarIdx;
 800be86:	b227      	sxth	r7, r4
 800be88:	e008      	b.n	800be9c <EE_Init+0x130>
 800be8a:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800be8c:	4b82      	ldr	r3, [pc, #520]	; (800c098 <EE_Init+0x32c>)
 800be8e:	429c      	cmp	r4, r3
 800be90:	d018      	beq.n	800bec4 <EE_Init+0x158>
 800be92:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 800be94:	882b      	ldrh	r3, [r5, #0]
 800be96:	b29b      	uxth	r3, r3
 800be98:	42b3      	cmp	r3, r6
 800be9a:	d0f4      	beq.n	800be86 <EE_Init+0x11a>
					if(VarIdx != x){
 800be9c:	42bc      	cmp	r4, r7
 800be9e:	d0f4      	beq.n	800be8a <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800bea0:	497c      	ldr	r1, [pc, #496]	; (800c094 <EE_Init+0x328>)
 800bea2:	0030      	movs	r0, r6
 800bea4:	f7ff fe26 	bl	800baf4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800bea8:	2801      	cmp	r0, #1
 800beaa:	d0ee      	beq.n	800be8a <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800beac:	4643      	mov	r3, r8
 800beae:	8819      	ldrh	r1, [r3, #0]
 800beb0:	0030      	movs	r0, r6
 800beb2:	f7ff fdb3 	bl	800ba1c <EE_VerifyPageFullWriteVariable>
 800beb6:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800beb8:	4871      	ldr	r0, [pc, #452]	; (800c080 <EE_Init+0x314>)
 800beba:	f005 fb33 	bl	8011524 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800bebe:	2800      	cmp	r0, #0
 800bec0:	d0e3      	beq.n	800be8a <EE_Init+0x11e>
 800bec2:	e773      	b.n	800bdac <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bec4:	2200      	movs	r2, #0
 800bec6:	2300      	movs	r3, #0
 800bec8:	4969      	ldr	r1, [pc, #420]	; (800c070 <EE_Init+0x304>)
 800beca:	2001      	movs	r0, #1
 800becc:	f005 fb58 	bl	8011580 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bed0:	486b      	ldr	r0, [pc, #428]	; (800c080 <EE_Init+0x314>)
 800bed2:	f005 fb27 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bed6:	2800      	cmp	r0, #0
 800bed8:	d003      	beq.n	800bee2 <EE_Init+0x176>
					return pFlash.ErrorCode;
 800beda:	4b6a      	ldr	r3, [pc, #424]	; (800c084 <EE_Init+0x318>)
 800bedc:	69de      	ldr	r6, [r3, #28]
 800bede:	b2b6      	uxth	r6, r6
 800bee0:	e764      	b.n	800bdac <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bee2:	4a6a      	ldr	r2, [pc, #424]	; (800c08c <EE_Init+0x320>)
 800bee4:	6913      	ldr	r3, [r2, #16]
 800bee6:	2101      	movs	r1, #1
 800bee8:	438b      	bics	r3, r1
 800beea:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800beec:	4861      	ldr	r0, [pc, #388]	; (800c074 <EE_Init+0x308>)
 800beee:	f005 fbbf 	bl	8011670 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bef2:	4863      	ldr	r0, [pc, #396]	; (800c080 <EE_Init+0x314>)
 800bef4:	f005 fb16 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bef8:	2800      	cmp	r0, #0
 800befa:	d003      	beq.n	800bf04 <EE_Init+0x198>
					return pFlash.ErrorCode;
 800befc:	4b61      	ldr	r3, [pc, #388]	; (800c084 <EE_Init+0x318>)
 800befe:	69de      	ldr	r6, [r3, #28]
 800bf00:	b2b6      	uxth	r6, r6
 800bf02:	e753      	b.n	800bdac <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bf04:	4865      	ldr	r0, [pc, #404]	; (800c09c <EE_Init+0x330>)
 800bf06:	f005 fbb3 	bl	8011670 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf0a:	485d      	ldr	r0, [pc, #372]	; (800c080 <EE_Init+0x314>)
 800bf0c:	f005 fb0a 	bl	8011524 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d105      	bne.n	800bf20 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bf14:	4a5d      	ldr	r2, [pc, #372]	; (800c08c <EE_Init+0x320>)
 800bf16:	6913      	ldr	r3, [r2, #16]
 800bf18:	2102      	movs	r1, #2
 800bf1a:	438b      	bics	r3, r1
 800bf1c:	6113      	str	r3, [r2, #16]
 800bf1e:	e742      	b.n	800bda6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800bf20:	4b58      	ldr	r3, [pc, #352]	; (800c084 <EE_Init+0x318>)
 800bf22:	69de      	ldr	r6, [r3, #28]
 800bf24:	b2b6      	uxth	r6, r6
 800bf26:	e741      	b.n	800bdac <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 800bf28:	4b54      	ldr	r3, [pc, #336]	; (800c07c <EE_Init+0x310>)
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d00b      	beq.n	800bf46 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 800bf2e:	f7ff feb9 	bl	800bca4 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf32:	4853      	ldr	r0, [pc, #332]	; (800c080 <EE_Init+0x314>)
 800bf34:	f005 faf6 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d100      	bne.n	800bf3e <EE_Init+0x1d2>
 800bf3c:	e733      	b.n	800bda6 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 800bf3e:	4b51      	ldr	r3, [pc, #324]	; (800c084 <EE_Init+0x318>)
 800bf40:	69de      	ldr	r6, [r3, #28]
 800bf42:	b2b6      	uxth	r6, r6
 800bf44:	e732      	b.n	800bdac <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bf46:	484b      	ldr	r0, [pc, #300]	; (800c074 <EE_Init+0x308>)
 800bf48:	f005 fb92 	bl	8011670 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf4c:	484c      	ldr	r0, [pc, #304]	; (800c080 <EE_Init+0x314>)
 800bf4e:	f005 fae9 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d003      	beq.n	800bf5e <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 800bf56:	4b4b      	ldr	r3, [pc, #300]	; (800c084 <EE_Init+0x318>)
 800bf58:	69de      	ldr	r6, [r3, #28]
 800bf5a:	b2b6      	uxth	r6, r6
 800bf5c:	e726      	b.n	800bdac <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bf5e:	484f      	ldr	r0, [pc, #316]	; (800c09c <EE_Init+0x330>)
 800bf60:	f005 fb86 	bl	8011670 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf64:	4846      	ldr	r0, [pc, #280]	; (800c080 <EE_Init+0x314>)
 800bf66:	f005 fadd 	bl	8011524 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d003      	beq.n	800bf76 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 800bf6e:	4b45      	ldr	r3, [pc, #276]	; (800c084 <EE_Init+0x318>)
 800bf70:	69de      	ldr	r6, [r3, #28]
 800bf72:	b2b6      	uxth	r6, r6
 800bf74:	e71a      	b.n	800bdac <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bf76:	4a45      	ldr	r2, [pc, #276]	; (800c08c <EE_Init+0x320>)
 800bf78:	6913      	ldr	r3, [r2, #16]
 800bf7a:	2102      	movs	r1, #2
 800bf7c:	438b      	bics	r3, r1
 800bf7e:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 800bf80:	2200      	movs	r2, #0
 800bf82:	2300      	movs	r3, #0
 800bf84:	493a      	ldr	r1, [pc, #232]	; (800c070 <EE_Init+0x304>)
 800bf86:	2001      	movs	r0, #1
 800bf88:	f005 fafa 	bl	8011580 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bf8c:	483c      	ldr	r0, [pc, #240]	; (800c080 <EE_Init+0x314>)
 800bf8e:	f005 fac9 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bf92:	2800      	cmp	r0, #0
 800bf94:	d003      	beq.n	800bf9e <EE_Init+0x232>
					return pFlash.ErrorCode;
 800bf96:	4b3b      	ldr	r3, [pc, #236]	; (800c084 <EE_Init+0x318>)
 800bf98:	69de      	ldr	r6, [r3, #28]
 800bf9a:	b2b6      	uxth	r6, r6
 800bf9c:	e706      	b.n	800bdac <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800bf9e:	4a3b      	ldr	r2, [pc, #236]	; (800c08c <EE_Init+0x320>)
 800bfa0:	6913      	ldr	r3, [r2, #16]
 800bfa2:	2101      	movs	r1, #1
 800bfa4:	438b      	bics	r3, r1
 800bfa6:	6113      	str	r3, [r2, #16]
 800bfa8:	e6fd      	b.n	800bda6 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 800bfaa:	2a00      	cmp	r2, #0
 800bfac:	d009      	beq.n	800bfc2 <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 800bfae:	4b33      	ldr	r3, [pc, #204]	; (800c07c <EE_Init+0x310>)
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d010      	beq.n	800bfd6 <EE_Init+0x26a>
 800bfb4:	2401      	movs	r4, #1
	int16_t x =-1;
 800bfb6:	2701      	movs	r7, #1
 800bfb8:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800bfba:	4d39      	ldr	r5, [pc, #228]	; (800c0a0 <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800bfbc:	4b35      	ldr	r3, [pc, #212]	; (800c094 <EE_Init+0x328>)
 800bfbe:	4698      	mov	r8, r3
 800bfc0:	e02d      	b.n	800c01e <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 800bfc2:	f7ff fe6f 	bl	800bca4 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bfc6:	482e      	ldr	r0, [pc, #184]	; (800c080 <EE_Init+0x314>)
 800bfc8:	f005 faac 	bl	8011524 <FLASH_WaitForLastOperation>
 800bfcc:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 800bfce:	2e00      	cmp	r6, #0
 800bfd0:	d100      	bne.n	800bfd4 <EE_Init+0x268>
 800bfd2:	e6e8      	b.n	800bda6 <EE_Init+0x3a>
 800bfd4:	e6ea      	b.n	800bdac <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 800bfd6:	4827      	ldr	r0, [pc, #156]	; (800c074 <EE_Init+0x308>)
 800bfd8:	f005 fb4a 	bl	8011670 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bfdc:	4828      	ldr	r0, [pc, #160]	; (800c080 <EE_Init+0x314>)
 800bfde:	f005 faa1 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800bfe2:	2800      	cmp	r0, #0
 800bfe4:	d003      	beq.n	800bfee <EE_Init+0x282>
					return pFlash.ErrorCode;
 800bfe6:	4b27      	ldr	r3, [pc, #156]	; (800c084 <EE_Init+0x318>)
 800bfe8:	69de      	ldr	r6, [r3, #28]
 800bfea:	b2b6      	uxth	r6, r6
 800bfec:	e6de      	b.n	800bdac <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 800bfee:	482b      	ldr	r0, [pc, #172]	; (800c09c <EE_Init+0x330>)
 800bff0:	f005 fb3e 	bl	8011670 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800bff4:	4822      	ldr	r0, [pc, #136]	; (800c080 <EE_Init+0x314>)
 800bff6:	f005 fa95 	bl	8011524 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d105      	bne.n	800c00a <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800bffe:	4a23      	ldr	r2, [pc, #140]	; (800c08c <EE_Init+0x320>)
 800c000:	6913      	ldr	r3, [r2, #16]
 800c002:	2102      	movs	r1, #2
 800c004:	438b      	bics	r3, r1
 800c006:	6113      	str	r3, [r2, #16]
 800c008:	e6cd      	b.n	800bda6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c00a:	4b1e      	ldr	r3, [pc, #120]	; (800c084 <EE_Init+0x318>)
 800c00c:	69de      	ldr	r6, [r3, #28]
 800c00e:	b2b6      	uxth	r6, r6
 800c010:	e6cc      	b.n	800bdac <EE_Init+0x40>
						x =VarIdx;
 800c012:	b227      	sxth	r7, r4
 800c014:	e008      	b.n	800c028 <EE_Init+0x2bc>
 800c016:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 800c018:	4b1f      	ldr	r3, [pc, #124]	; (800c098 <EE_Init+0x32c>)
 800c01a:	429c      	cmp	r4, r3
 800c01c:	d018      	beq.n	800c050 <EE_Init+0x2e4>
 800c01e:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 800c020:	882b      	ldrh	r3, [r5, #0]
 800c022:	b29b      	uxth	r3, r3
 800c024:	42b3      	cmp	r3, r6
 800c026:	d0f4      	beq.n	800c012 <EE_Init+0x2a6>
					if(VarIdx != x){
 800c028:	42bc      	cmp	r4, r7
 800c02a:	d0f4      	beq.n	800c016 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 800c02c:	4919      	ldr	r1, [pc, #100]	; (800c094 <EE_Init+0x328>)
 800c02e:	0030      	movs	r0, r6
 800c030:	f7ff fd60 	bl	800baf4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 800c034:	2801      	cmp	r0, #1
 800c036:	d0ee      	beq.n	800c016 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 800c038:	4643      	mov	r3, r8
 800c03a:	8819      	ldrh	r1, [r3, #0]
 800c03c:	0030      	movs	r0, r6
 800c03e:	f7ff fced 	bl	800ba1c <EE_VerifyPageFullWriteVariable>
 800c042:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c044:	480e      	ldr	r0, [pc, #56]	; (800c080 <EE_Init+0x314>)
 800c046:	f005 fa6d 	bl	8011524 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 800c04a:	2800      	cmp	r0, #0
 800c04c:	d0e3      	beq.n	800c016 <EE_Init+0x2aa>
 800c04e:	e6ad      	b.n	800bdac <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 800c050:	2200      	movs	r2, #0
 800c052:	2300      	movs	r3, #0
 800c054:	4907      	ldr	r1, [pc, #28]	; (800c074 <EE_Init+0x308>)
 800c056:	2001      	movs	r0, #1
 800c058:	f005 fa92 	bl	8011580 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c05c:	4808      	ldr	r0, [pc, #32]	; (800c080 <EE_Init+0x314>)
 800c05e:	f005 fa61 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c062:	2800      	cmp	r0, #0
 800c064:	d01e      	beq.n	800c0a4 <EE_Init+0x338>
					return pFlash.ErrorCode;
 800c066:	4b07      	ldr	r3, [pc, #28]	; (800c084 <EE_Init+0x318>)
 800c068:	69de      	ldr	r6, [r3, #28]
 800c06a:	b2b6      	uxth	r6, r6
 800c06c:	e69e      	b.n	800bdac <EE_Init+0x40>
 800c06e:	46c0      	nop			; (mov r8, r8)
 800c070:	0801e000 	.word	0x0801e000
 800c074:	0801f000 	.word	0x0801f000
 800c078:	0000eeee 	.word	0x0000eeee
 800c07c:	0000ffff 	.word	0x0000ffff
 800c080:	0000c350 	.word	0x0000c350
 800c084:	20006fc8 	.word	0x20006fc8
 800c088:	0801e800 	.word	0x0801e800
 800c08c:	40022000 	.word	0x40022000
 800c090:	0801e006 	.word	0x0801e006
 800c094:	2000255c 	.word	0x2000255c
 800c098:	00000401 	.word	0x00000401
 800c09c:	0801f800 	.word	0x0801f800
 800c0a0:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800c0a4:	4a11      	ldr	r2, [pc, #68]	; (800c0ec <EE_Init+0x380>)
 800c0a6:	6913      	ldr	r3, [r2, #16]
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	438b      	bics	r3, r1
 800c0ac:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800c0ae:	4810      	ldr	r0, [pc, #64]	; (800c0f0 <EE_Init+0x384>)
 800c0b0:	f005 fade 	bl	8011670 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c0b4:	480f      	ldr	r0, [pc, #60]	; (800c0f4 <EE_Init+0x388>)
 800c0b6:	f005 fa35 	bl	8011524 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	d003      	beq.n	800c0c6 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 800c0be:	4b0e      	ldr	r3, [pc, #56]	; (800c0f8 <EE_Init+0x38c>)
 800c0c0:	69de      	ldr	r6, [r3, #28]
 800c0c2:	b2b6      	uxth	r6, r6
 800c0c4:	e672      	b.n	800bdac <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 800c0c6:	480d      	ldr	r0, [pc, #52]	; (800c0fc <EE_Init+0x390>)
 800c0c8:	f005 fad2 	bl	8011670 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800c0cc:	4809      	ldr	r0, [pc, #36]	; (800c0f4 <EE_Init+0x388>)
 800c0ce:	f005 fa29 	bl	8011524 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 800c0d2:	2800      	cmp	r0, #0
 800c0d4:	d105      	bne.n	800c0e2 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800c0d6:	4a05      	ldr	r2, [pc, #20]	; (800c0ec <EE_Init+0x380>)
 800c0d8:	6913      	ldr	r3, [r2, #16]
 800c0da:	2102      	movs	r1, #2
 800c0dc:	438b      	bics	r3, r1
 800c0de:	6113      	str	r3, [r2, #16]
 800c0e0:	e661      	b.n	800bda6 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 800c0e2:	4b05      	ldr	r3, [pc, #20]	; (800c0f8 <EE_Init+0x38c>)
 800c0e4:	69de      	ldr	r6, [r3, #28]
 800c0e6:	b2b6      	uxth	r6, r6
 800c0e8:	e660      	b.n	800bdac <EE_Init+0x40>
 800c0ea:	46c0      	nop			; (mov r8, r8)
 800c0ec:	40022000 	.word	0x40022000
 800c0f0:	0801e000 	.word	0x0801e000
 800c0f4:	0000c350 	.word	0x0000c350
 800c0f8:	20006fc8 	.word	0x20006fc8
 800c0fc:	0801e800 	.word	0x0801e800

0800c100 <EraseSector>:
	/* Return last operation flash status */
	return FlashStatus;
}

/* Erase sector if force write is requested */
BOS_Status EraseSector(uint32_t sector ) {
 800c100:	b500      	push	{lr}
 800c102:	b085      	sub	sp, #20
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef status;

		FLASH_EraseInitTypeDef erase;
		uint32_t eraseError;
		erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800c104:	2300      	movs	r3, #0
 800c106:	9301      	str	r3, [sp, #4]
		erase.PageAddress =sector;
 800c108:	9002      	str	r0, [sp, #8]
		erase.NbPages =1;
 800c10a:	3301      	adds	r3, #1
 800c10c:	9303      	str	r3, [sp, #12]
		status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800c10e:	4669      	mov	r1, sp
 800c110:	a801      	add	r0, sp, #4
 800c112:	f005 fabf 	bl	8011694 <HAL_FLASHEx_Erase>
		if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800c116:	2800      	cmp	r0, #0
 800c118:	d102      	bne.n	800c120 <EraseSector+0x20>
 800c11a:	9b00      	ldr	r3, [sp, #0]
 800c11c:	3301      	adds	r3, #1
 800c11e:	d002      	beq.n	800c126 <EraseSector+0x26>
			responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800c120:	4b02      	ldr	r3, [pc, #8]	; (800c12c <EraseSector+0x2c>)
 800c122:	2216      	movs	r2, #22
 800c124:	701a      	strb	r2, [r3, #0]

	return result;
}
 800c126:	2000      	movs	r0, #0
 800c128:	b005      	add	sp, #20
 800c12a:	bd00      	pop	{pc}
 800c12c:	20001830 	.word	0x20001830

0800c130 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800c130:	b500      	push	{lr}
 800c132:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800c134:	2380      	movs	r3, #128	; 0x80
 800c136:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c138:	3b7f      	subs	r3, #127	; 0x7f
 800c13a:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c13c:	2300      	movs	r3, #0
 800c13e:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c140:	3303      	adds	r3, #3
 800c142:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800c144:	2090      	movs	r0, #144	; 0x90
 800c146:	a901      	add	r1, sp, #4
 800c148:	05c0      	lsls	r0, r0, #23
 800c14a:	f005 fb03 	bl	8011754 <HAL_GPIO_Init>
}
 800c14e:	b007      	add	sp, #28
 800c150:	bd00      	pop	{pc}
	...

0800c154 <GPIO_Init>:
{
 800c154:	b500      	push	{lr}
 800c156:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c158:	4b18      	ldr	r3, [pc, #96]	; (800c1bc <GPIO_Init+0x68>)
 800c15a:	6959      	ldr	r1, [r3, #20]
 800c15c:	2080      	movs	r0, #128	; 0x80
 800c15e:	0300      	lsls	r0, r0, #12
 800c160:	4301      	orrs	r1, r0
 800c162:	6159      	str	r1, [r3, #20]
 800c164:	695a      	ldr	r2, [r3, #20]
 800c166:	4002      	ands	r2, r0
 800c168:	9201      	str	r2, [sp, #4]
 800c16a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c16c:	6959      	ldr	r1, [r3, #20]
 800c16e:	2080      	movs	r0, #128	; 0x80
 800c170:	0280      	lsls	r0, r0, #10
 800c172:	4301      	orrs	r1, r0
 800c174:	6159      	str	r1, [r3, #20]
 800c176:	695a      	ldr	r2, [r3, #20]
 800c178:	4002      	ands	r2, r0
 800c17a:	9202      	str	r2, [sp, #8]
 800c17c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c17e:	6959      	ldr	r1, [r3, #20]
 800c180:	2080      	movs	r0, #128	; 0x80
 800c182:	0340      	lsls	r0, r0, #13
 800c184:	4301      	orrs	r1, r0
 800c186:	6159      	str	r1, [r3, #20]
 800c188:	695a      	ldr	r2, [r3, #20]
 800c18a:	4002      	ands	r2, r0
 800c18c:	9203      	str	r2, [sp, #12]
 800c18e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c190:	6959      	ldr	r1, [r3, #20]
 800c192:	2080      	movs	r0, #128	; 0x80
 800c194:	02c0      	lsls	r0, r0, #11
 800c196:	4301      	orrs	r1, r0
 800c198:	6159      	str	r1, [r3, #20]
 800c19a:	695a      	ldr	r2, [r3, #20]
 800c19c:	4002      	ands	r2, r0
 800c19e:	9204      	str	r2, [sp, #16]
 800c1a0:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800c1a2:	695a      	ldr	r2, [r3, #20]
 800c1a4:	2180      	movs	r1, #128	; 0x80
 800c1a6:	03c9      	lsls	r1, r1, #15
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	615a      	str	r2, [r3, #20]
 800c1ac:	695b      	ldr	r3, [r3, #20]
 800c1ae:	400b      	ands	r3, r1
 800c1b0:	9305      	str	r3, [sp, #20]
 800c1b2:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800c1b4:	f7ff ffbc 	bl	800c130 <IND_LED_Init>
}
 800c1b8:	b007      	add	sp, #28
 800c1ba:	bd00      	pop	{pc}
 800c1bc:	40021000 	.word	0x40021000

0800c1c0 <SENSORS_GPIO_Init>:

//-- Configure indicator LED
void SENSORS_GPIO_Init(void)
{
 800c1c0:	b500      	push	{lr}
 800c1c2:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/*Configure GPIO pin : PB11 & PB12 as output*/
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c1c4:	23c0      	movs	r3, #192	; 0xc0
 800c1c6:	015b      	lsls	r3, r3, #5
 800c1c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c1ca:	2312      	movs	r3, #18
 800c1cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c1ce:	3b11      	subs	r3, #17
 800c1d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800c1d2:	3302      	adds	r3, #2
 800c1d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800c1d6:	3302      	adds	r3, #2
 800c1d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1da:	2090      	movs	r0, #144	; 0x90
 800c1dc:	a901      	add	r1, sp, #4
 800c1de:	05c0      	lsls	r0, r0, #23
 800c1e0:	f005 fab8 	bl	8011754 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c1e4:	4a0a      	ldr	r2, [pc, #40]	; (800c210 <SENSORS_GPIO_Init+0x50>)
 800c1e6:	69d1      	ldr	r1, [r2, #28]
 800c1e8:	2080      	movs	r0, #128	; 0x80
 800c1ea:	03c0      	lsls	r0, r0, #15
 800c1ec:	4301      	orrs	r1, r0
 800c1ee:	61d1      	str	r1, [r2, #28]
 800c1f0:	69d3      	ldr	r3, [r2, #28]
 800c1f2:	4003      	ands	r3, r0
 800c1f4:	9300      	str	r3, [sp, #0]
 800c1f6:	9b00      	ldr	r3, [sp, #0]

    /*Configure GPIO pin : PB7 as input*/
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c1f8:	2380      	movs	r3, #128	; 0x80
 800c1fa:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c200:	3302      	adds	r3, #2
 800c202:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c204:	a901      	add	r1, sp, #4
 800c206:	4803      	ldr	r0, [pc, #12]	; (800c214 <SENSORS_GPIO_Init+0x54>)
 800c208:	f005 faa4 	bl	8011754 <HAL_GPIO_Init>
}
 800c20c:	b007      	add	sp, #28
 800c20e:	bd00      	pop	{pc}
 800c210:	40021000 	.word	0x40021000
 800c214:	48000400 	.word	0x48000400

0800c218 <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800c218:	b570      	push	{r4, r5, r6, lr}
 800c21a:	000e      	movs	r6, r1
 800c21c:	0015      	movs	r5, r2
 800c21e:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800c220:	f001 fef6 	bl	800e010 <GetUart>
	
	if (huart == &huart1) 
 800c224:	4b2b      	ldr	r3, [pc, #172]	; (800c2d4 <GetPortGPIOs+0xbc>)
 800c226:	4298      	cmp	r0, r3
 800c228:	d01a      	beq.n	800c260 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800c22a:	4b2b      	ldr	r3, [pc, #172]	; (800c2d8 <GetPortGPIOs+0xc0>)
 800c22c:	4298      	cmp	r0, r3
 800c22e:	d025      	beq.n	800c27c <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800c230:	4b2a      	ldr	r3, [pc, #168]	; (800c2dc <GetPortGPIOs+0xc4>)
 800c232:	4298      	cmp	r0, r3
 800c234:	d02d      	beq.n	800c292 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800c236:	4b2a      	ldr	r3, [pc, #168]	; (800c2e0 <GetPortGPIOs+0xc8>)
 800c238:	4298      	cmp	r0, r3
 800c23a:	d036      	beq.n	800c2aa <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800c23c:	4b29      	ldr	r3, [pc, #164]	; (800c2e4 <GetPortGPIOs+0xcc>)
 800c23e:	4298      	cmp	r0, r3
 800c240:	d03e      	beq.n	800c2c0 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800c242:	4a29      	ldr	r2, [pc, #164]	; (800c2e8 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800c244:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800c246:	4290      	cmp	r0, r2
 800c248:	d116      	bne.n	800c278 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800c24a:	2390      	movs	r3, #144	; 0x90
 800c24c:	05db      	lsls	r3, r3, #23
 800c24e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800c250:	2210      	movs	r2, #16
 800c252:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800c254:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800c256:	2320      	movs	r3, #32
 800c258:	9a04      	ldr	r2, [sp, #16]
 800c25a:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c25c:	2300      	movs	r3, #0
 800c25e:	e00b      	b.n	800c278 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800c260:	2390      	movs	r3, #144	; 0x90
 800c262:	05db      	lsls	r3, r3, #23
 800c264:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800c266:	2280      	movs	r2, #128	; 0x80
 800c268:	0092      	lsls	r2, r2, #2
 800c26a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800c26c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800c26e:	2380      	movs	r3, #128	; 0x80
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	9a04      	ldr	r2, [sp, #16]
 800c274:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c276:	2300      	movs	r3, #0
	
	return result;	
}
 800c278:	0018      	movs	r0, r3
 800c27a:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800c27c:	2390      	movs	r3, #144	; 0x90
 800c27e:	05db      	lsls	r3, r3, #23
 800c280:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800c282:	2204      	movs	r2, #4
 800c284:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800c286:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800c288:	2308      	movs	r3, #8
 800c28a:	9a04      	ldr	r2, [sp, #16]
 800c28c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	e7f2      	b.n	800c278 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800c292:	4b16      	ldr	r3, [pc, #88]	; (800c2ec <GetPortGPIOs+0xd4>)
 800c294:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800c296:	2280      	movs	r2, #128	; 0x80
 800c298:	00d2      	lsls	r2, r2, #3
 800c29a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800c29c:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800c29e:	2380      	movs	r3, #128	; 0x80
 800c2a0:	011b      	lsls	r3, r3, #4
 800c2a2:	9a04      	ldr	r2, [sp, #16]
 800c2a4:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e7e6      	b.n	800c278 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800c2aa:	2390      	movs	r3, #144	; 0x90
 800c2ac:	05db      	lsls	r3, r3, #23
 800c2ae:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800c2b4:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800c2b6:	2302      	movs	r3, #2
 800c2b8:	9a04      	ldr	r2, [sp, #16]
 800c2ba:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	e7db      	b.n	800c278 <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800c2c0:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <GetPortGPIOs+0xd4>)
 800c2c2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800c2c4:	2208      	movs	r2, #8
 800c2c6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800c2c8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800c2ca:	2310      	movs	r3, #16
 800c2cc:	9a04      	ldr	r2, [sp, #16]
 800c2ce:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e7d1      	b.n	800c278 <GetPortGPIOs+0x60>
 800c2d4:	20006c24 	.word	0x20006c24
 800c2d8:	20006d8c 	.word	0x20006d8c
 800c2dc:	20006b34 	.word	0x20006b34
 800c2e0:	20006d18 	.word	0x20006d18
 800c2e4:	20006bac 	.word	0x20006bac
 800c2e8:	20006c9c 	.word	0x20006c9c
 800c2ec:	48000400 	.word	0x48000400

0800c2f0 <IsFactoryReset>:
{
 800c2f0:	b570      	push	{r4, r5, r6, lr}
 800c2f2:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800c2f4:	4b39      	ldr	r3, [pc, #228]	; (800c3dc <IsFactoryReset+0xec>)
 800c2f6:	6959      	ldr	r1, [r3, #20]
 800c2f8:	2080      	movs	r0, #128	; 0x80
 800c2fa:	0280      	lsls	r0, r0, #10
 800c2fc:	4301      	orrs	r1, r0
 800c2fe:	6159      	str	r1, [r3, #20]
 800c300:	695a      	ldr	r2, [r3, #20]
 800c302:	4002      	ands	r2, r0
 800c304:	9203      	str	r2, [sp, #12]
 800c306:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c308:	6959      	ldr	r1, [r3, #20]
 800c30a:	2080      	movs	r0, #128	; 0x80
 800c30c:	02c0      	lsls	r0, r0, #11
 800c30e:	4301      	orrs	r1, r0
 800c310:	6159      	str	r1, [r3, #20]
 800c312:	695a      	ldr	r2, [r3, #20]
 800c314:	4002      	ands	r2, r0
 800c316:	9204      	str	r2, [sp, #16]
 800c318:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800c31a:	6959      	ldr	r1, [r3, #20]
 800c31c:	2080      	movs	r0, #128	; 0x80
 800c31e:	0300      	lsls	r0, r0, #12
 800c320:	4301      	orrs	r1, r0
 800c322:	6159      	str	r1, [r3, #20]
 800c324:	695a      	ldr	r2, [r3, #20]
 800c326:	4002      	ands	r2, r0
 800c328:	9205      	str	r2, [sp, #20]
 800c32a:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800c32c:	695a      	ldr	r2, [r3, #20]
 800c32e:	2180      	movs	r1, #128	; 0x80
 800c330:	0349      	lsls	r1, r1, #13
 800c332:	430a      	orrs	r2, r1
 800c334:	615a      	str	r2, [r3, #20]
 800c336:	695b      	ldr	r3, [r3, #20]
 800c338:	400b      	ands	r3, r1
 800c33a:	9306      	str	r3, [sp, #24]
 800c33c:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800c33e:	2522      	movs	r5, #34	; 0x22
 800c340:	446d      	add	r5, sp
 800c342:	ab08      	add	r3, sp, #32
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	ab0b      	add	r3, sp, #44	; 0x2c
 800c348:	002a      	movs	r2, r5
 800c34a:	a90c      	add	r1, sp, #48	; 0x30
 800c34c:	2001      	movs	r0, #1
 800c34e:	f7ff ff63 	bl	800c218 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800c352:	ac07      	add	r4, sp, #28
 800c354:	9400      	str	r4, [sp, #0]
 800c356:	ab09      	add	r3, sp, #36	; 0x24
 800c358:	221e      	movs	r2, #30
 800c35a:	446a      	add	r2, sp
 800c35c:	a90a      	add	r1, sp, #40	; 0x28
 800c35e:	2006      	movs	r0, #6
 800c360:	f7ff ff5a 	bl	800c218 <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c364:	2301      	movs	r3, #1
 800c366:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c368:	2600      	movs	r6, #0
 800c36a:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800c36c:	882b      	ldrh	r3, [r5, #0]
 800c36e:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800c370:	a90d      	add	r1, sp, #52	; 0x34
 800c372:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c374:	f005 f9ee 	bl	8011754 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c378:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800c37a:	2302      	movs	r3, #2
 800c37c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800c37e:	8823      	ldrh	r3, [r4, #0]
 800c380:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800c382:	a90d      	add	r1, sp, #52	; 0x34
 800c384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c386:	f005 f9e5 	bl	8011754 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800c38a:	8829      	ldrh	r1, [r5, #0]
 800c38c:	2200      	movs	r2, #0
 800c38e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c390:	f005 fb54 	bl	8011a3c <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800c394:	2005      	movs	r0, #5
 800c396:	f001 fc61 	bl	800dc5c <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800c39a:	8821      	ldrh	r1, [r4, #0]
 800c39c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c39e:	f005 fb47 	bl	8011a30 <HAL_GPIO_ReadPin>
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	d006      	beq.n	800c3b4 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800c3a6:	4b0e      	ldr	r3, [pc, #56]	; (800c3e0 <IsFactoryReset+0xf0>)
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	4252      	negs	r2, r2
 800c3ac:	601a      	str	r2, [r3, #0]
	return 0;
 800c3ae:	2000      	movs	r0, #0
}
 800c3b0:	b012      	add	sp, #72	; 0x48
 800c3b2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800c3b4:	2322      	movs	r3, #34	; 0x22
 800c3b6:	446b      	add	r3, sp
 800c3b8:	8819      	ldrh	r1, [r3, #0]
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c3be:	f005 fb3d 	bl	8011a3c <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800c3c2:	2005      	movs	r0, #5
 800c3c4:	f001 fc4a 	bl	800dc5c <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800c3c8:	ab07      	add	r3, sp, #28
 800c3ca:	8819      	ldrh	r1, [r3, #0]
 800c3cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3ce:	f005 fb2f 	bl	8011a30 <HAL_GPIO_ReadPin>
 800c3d2:	2801      	cmp	r0, #1
 800c3d4:	d1e7      	bne.n	800c3a6 <IsFactoryReset+0xb6>
			return 1;
 800c3d6:	2001      	movs	r0, #1
 800c3d8:	e7ea      	b.n	800c3b0 <IsFactoryReset+0xc0>
 800c3da:	46c0      	nop			; (mov r8, r8)
 800c3dc:	40021000 	.word	0x40021000
 800c3e0:	20007ff0 	.word	0x20007ff0

0800c3e4 <MX_I2C1_Init>:
}



void MX_I2C1_Init(void)
{
 800c3e4:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c1.Instance = I2C2;
 800c3e6:	480b      	ldr	r0, [pc, #44]	; (800c414 <MX_I2C1_Init+0x30>)
 800c3e8:	4b0b      	ldr	r3, [pc, #44]	; (800c418 <MX_I2C1_Init+0x34>)
 800c3ea:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E/*Standard mode*/;
 800c3ec:	4b0b      	ldr	r3, [pc, #44]	; (800c41c <MX_I2C1_Init+0x38>)
 800c3ee:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c3f8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800c3fa:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800c3fc:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c3fe:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c400:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800c402:	f005 fc1b 	bl	8011c3c <HAL_I2C_Init>
 800c406:	2800      	cmp	r0, #0
 800c408:	d100      	bne.n	800c40c <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }


}
 800c40a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800c40c:	f000 fbc0 	bl	800cb90 <Error_Handler>
}
 800c410:	e7fb      	b.n	800c40a <MX_I2C1_Init+0x26>
 800c412:	46c0      	nop			; (mov r8, r8)
 800c414:	20006e28 	.word	0x20006e28
 800c418:	40005800 	.word	0x40005800
 800c41c:	2000090e 	.word	0x2000090e

0800c420 <MX_I2C_Init>:
{
 800c420:	b500      	push	{lr}
 800c422:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800c424:	4b18      	ldr	r3, [pc, #96]	; (800c488 <MX_I2C_Init+0x68>)
 800c426:	6959      	ldr	r1, [r3, #20]
 800c428:	2080      	movs	r0, #128	; 0x80
 800c42a:	0300      	lsls	r0, r0, #12
 800c42c:	4301      	orrs	r1, r0
 800c42e:	6159      	str	r1, [r3, #20]
 800c430:	695a      	ldr	r2, [r3, #20]
 800c432:	4002      	ands	r2, r0
 800c434:	9201      	str	r2, [sp, #4]
 800c436:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800c438:	6959      	ldr	r1, [r3, #20]
 800c43a:	2080      	movs	r0, #128	; 0x80
 800c43c:	0280      	lsls	r0, r0, #10
 800c43e:	4301      	orrs	r1, r0
 800c440:	6159      	str	r1, [r3, #20]
 800c442:	695a      	ldr	r2, [r3, #20]
 800c444:	4002      	ands	r2, r0
 800c446:	9202      	str	r2, [sp, #8]
 800c448:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800c44a:	6959      	ldr	r1, [r3, #20]
 800c44c:	2080      	movs	r0, #128	; 0x80
 800c44e:	0340      	lsls	r0, r0, #13
 800c450:	4301      	orrs	r1, r0
 800c452:	6159      	str	r1, [r3, #20]
 800c454:	695a      	ldr	r2, [r3, #20]
 800c456:	4002      	ands	r2, r0
 800c458:	9203      	str	r2, [sp, #12]
 800c45a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800c45c:	6959      	ldr	r1, [r3, #20]
 800c45e:	2080      	movs	r0, #128	; 0x80
 800c460:	02c0      	lsls	r0, r0, #11
 800c462:	4301      	orrs	r1, r0
 800c464:	6159      	str	r1, [r3, #20]
 800c466:	695a      	ldr	r2, [r3, #20]
 800c468:	4002      	ands	r2, r0
 800c46a:	9204      	str	r2, [sp, #16]
 800c46c:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800c46e:	695a      	ldr	r2, [r3, #20]
 800c470:	2180      	movs	r1, #128	; 0x80
 800c472:	03c9      	lsls	r1, r1, #15
 800c474:	430a      	orrs	r2, r1
 800c476:	615a      	str	r2, [r3, #20]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	400b      	ands	r3, r1
 800c47c:	9305      	str	r3, [sp, #20]
 800c47e:	9b05      	ldr	r3, [sp, #20]
  MX_I2C1_Init();
 800c480:	f7ff ffb0 	bl	800c3e4 <MX_I2C1_Init>
}
 800c484:	b007      	add	sp, #28
 800c486:	bd00      	pop	{pc}
 800c488:	40021000 	.word	0x40021000

0800c48c <WriteRegData>:

void WriteRegData(uint8_t reg, uint8_t data)
{
 800c48c:	b500      	push	{lr}
 800c48e:	b083      	sub	sp, #12
	send[0]= 0x80 | reg;
 800c490:	4a07      	ldr	r2, [pc, #28]	; (800c4b0 <WriteRegData+0x24>)
 800c492:	2380      	movs	r3, #128	; 0x80
 800c494:	425b      	negs	r3, r3
 800c496:	4318      	orrs	r0, r3
 800c498:	7010      	strb	r0, [r2, #0]
	send[1]= data;
 800c49a:	7051      	strb	r1, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 2, HAL_MAX_DELAY);
 800c49c:	337f      	adds	r3, #127	; 0x7f
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	3303      	adds	r3, #3
 800c4a2:	2172      	movs	r1, #114	; 0x72
 800c4a4:	4803      	ldr	r0, [pc, #12]	; (800c4b4 <WriteRegData+0x28>)
 800c4a6:	f005 fc27 	bl	8011cf8 <HAL_I2C_Master_Transmit>

}
 800c4aa:	b003      	add	sp, #12
 800c4ac:	bd00      	pop	{pc}
 800c4ae:	46c0      	nop			; (mov r8, r8)
 800c4b0:	20006e64 	.word	0x20006e64
 800c4b4:	20006e28 	.word	0x20006e28

0800c4b8 <Read_Word>:


uint16_t Read_Word(uint8_t reg)
{
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	b082      	sub	sp, #8
   send[0]= 0xA0 | reg;
 800c4bc:	4a0e      	ldr	r2, [pc, #56]	; (800c4f8 <Read_Word+0x40>)
 800c4be:	2360      	movs	r3, #96	; 0x60
 800c4c0:	425b      	negs	r3, r3
 800c4c2:	4318      	orrs	r0, r3
 800c4c4:	7010      	strb	r0, [r2, #0]
   HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 1, HAL_MAX_DELAY);
 800c4c6:	4d0d      	ldr	r5, [pc, #52]	; (800c4fc <Read_Word+0x44>)
 800c4c8:	2601      	movs	r6, #1
 800c4ca:	4276      	negs	r6, r6
 800c4cc:	9600      	str	r6, [sp, #0]
 800c4ce:	3361      	adds	r3, #97	; 0x61
 800c4d0:	2172      	movs	r1, #114	; 0x72
 800c4d2:	0028      	movs	r0, r5
 800c4d4:	f005 fc10 	bl	8011cf8 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c1, colorProximityAdd, receive, 2, HAL_MAX_DELAY);
 800c4d8:	4c09      	ldr	r4, [pc, #36]	; (800c500 <Read_Word+0x48>)
 800c4da:	9600      	str	r6, [sp, #0]
 800c4dc:	2302      	movs	r3, #2
 800c4de:	0022      	movs	r2, r4
 800c4e0:	2172      	movs	r1, #114	; 0x72
 800c4e2:	0028      	movs	r0, r5
 800c4e4:	f005 fcac 	bl	8011e40 <HAL_I2C_Master_Receive>
    return (uint16_t)(receive[0] + (256 * receive[1]));
 800c4e8:	7863      	ldrb	r3, [r4, #1]
 800c4ea:	021b      	lsls	r3, r3, #8
 800c4ec:	7820      	ldrb	r0, [r4, #0]
 800c4ee:	18c0      	adds	r0, r0, r3
 800c4f0:	b280      	uxth	r0, r0

}
 800c4f2:	b002      	add	sp, #8
 800c4f4:	bd70      	pop	{r4, r5, r6, pc}
 800c4f6:	46c0      	nop			; (mov r8, r8)
 800c4f8:	20006e64 	.word	0x20006e64
 800c4fc:	20006e28 	.word	0x20006e28
 800c500:	20006e68 	.word	0x20006e68

0800c504 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 800c504:	4770      	bx	lr
	...

0800c508 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 800c508:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c50a:	00c2      	lsls	r2, r0, #3
 800c50c:	1812      	adds	r2, r2, r0
 800c50e:	4b1b      	ldr	r3, [pc, #108]	; (800c57c <CheckForTimedButtonPress+0x74>)
 800c510:	189b      	adds	r3, r3, r2
 800c512:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 800c514:	0082      	lsls	r2, r0, #2
 800c516:	4b1a      	ldr	r3, [pc, #104]	; (800c580 <CheckForTimedButtonPress+0x78>)
 800c518:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800c51a:	0163      	lsls	r3, r4, #5
 800c51c:	1b1b      	subs	r3, r3, r4
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	191b      	adds	r3, r3, r4
 800c522:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 800c524:	4299      	cmp	r1, r3
 800c526:	d01c      	beq.n	800c562 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800c528:	00c2      	lsls	r2, r0, #3
 800c52a:	1812      	adds	r2, r2, r0
 800c52c:	4b13      	ldr	r3, [pc, #76]	; (800c57c <CheckForTimedButtonPress+0x74>)
 800c52e:	189b      	adds	r3, r3, r2
 800c530:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 800c532:	0163      	lsls	r3, r4, #5
 800c534:	1b1b      	subs	r3, r3, r4
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	191b      	adds	r3, r3, r4
 800c53a:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 800c53c:	4299      	cmp	r1, r3
 800c53e:	d017      	beq.n	800c570 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 800c540:	00c2      	lsls	r2, r0, #3
 800c542:	1812      	adds	r2, r2, r0
 800c544:	4b0d      	ldr	r3, [pc, #52]	; (800c57c <CheckForTimedButtonPress+0x74>)
 800c546:	189b      	adds	r3, r3, r2
 800c548:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 800c54a:	0163      	lsls	r3, r4, #5
 800c54c:	1b1b      	subs	r3, r3, r4
 800c54e:	009b      	lsls	r3, r3, #2
 800c550:	191b      	adds	r3, r3, r4
 800c552:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 800c554:	4299      	cmp	r1, r3
 800c556:	d109      	bne.n	800c56c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 800c558:	0010      	movs	r0, r2
 800c55a:	4b08      	ldr	r3, [pc, #32]	; (800c57c <CheckForTimedButtonPress+0x74>)
 800c55c:	220a      	movs	r2, #10
 800c55e:	54c2      	strb	r2, [r0, r3]
 800c560:	e004      	b.n	800c56c <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 800c562:	00c3      	lsls	r3, r0, #3
 800c564:	1818      	adds	r0, r3, r0
 800c566:	4b05      	ldr	r3, [pc, #20]	; (800c57c <CheckForTimedButtonPress+0x74>)
 800c568:	2209      	movs	r2, #9
 800c56a:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800c56c:	2000      	movs	r0, #0
 800c56e:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 800c570:	0010      	movs	r0, r2
 800c572:	4b02      	ldr	r3, [pc, #8]	; (800c57c <CheckForTimedButtonPress+0x74>)
 800c574:	220a      	movs	r2, #10
 800c576:	54c2      	strb	r2, [r0, r3]
 800c578:	e7f8      	b.n	800c56c <CheckForTimedButtonPress+0x64>
 800c57a:	46c0      	nop			; (mov r8, r8)
 800c57c:	20002570 	.word	0x20002570
 800c580:	200025c4 	.word	0x200025c4

0800c584 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 800c584:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c586:	00c2      	lsls	r2, r0, #3
 800c588:	1812      	adds	r2, r2, r0
 800c58a:	4b1b      	ldr	r3, [pc, #108]	; (800c5f8 <CheckForTimedButtonRelease+0x74>)
 800c58c:	189b      	adds	r3, r3, r2
 800c58e:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 800c590:	0082      	lsls	r2, r0, #2
 800c592:	4b1a      	ldr	r3, [pc, #104]	; (800c5fc <CheckForTimedButtonRelease+0x78>)
 800c594:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 800c596:	0163      	lsls	r3, r4, #5
 800c598:	1b1b      	subs	r3, r3, r4
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	191b      	adds	r3, r3, r4
 800c59e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 800c5a0:	4299      	cmp	r1, r3
 800c5a2:	d01c      	beq.n	800c5de <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 800c5a4:	00c2      	lsls	r2, r0, #3
 800c5a6:	1812      	adds	r2, r2, r0
 800c5a8:	4b13      	ldr	r3, [pc, #76]	; (800c5f8 <CheckForTimedButtonRelease+0x74>)
 800c5aa:	189b      	adds	r3, r3, r2
 800c5ac:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800c5ae:	0163      	lsls	r3, r4, #5
 800c5b0:	1b1b      	subs	r3, r3, r4
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	191b      	adds	r3, r3, r4
 800c5b6:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 800c5b8:	4299      	cmp	r1, r3
 800c5ba:	d017      	beq.n	800c5ec <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800c5bc:	00c2      	lsls	r2, r0, #3
 800c5be:	1812      	adds	r2, r2, r0
 800c5c0:	4b0d      	ldr	r3, [pc, #52]	; (800c5f8 <CheckForTimedButtonRelease+0x74>)
 800c5c2:	189b      	adds	r3, r3, r2
 800c5c4:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 800c5c6:	0163      	lsls	r3, r4, #5
 800c5c8:	1b1b      	subs	r3, r3, r4
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	191b      	adds	r3, r3, r4
 800c5ce:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 800c5d0:	4299      	cmp	r1, r3
 800c5d2:	d109      	bne.n	800c5e8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c5d4:	0010      	movs	r0, r2
 800c5d6:	4b08      	ldr	r3, [pc, #32]	; (800c5f8 <CheckForTimedButtonRelease+0x74>)
 800c5d8:	220d      	movs	r2, #13
 800c5da:	54c2      	strb	r2, [r0, r3]
 800c5dc:	e004      	b.n	800c5e8 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800c5de:	00c3      	lsls	r3, r0, #3
 800c5e0:	1818      	adds	r0, r3, r0
 800c5e2:	4b05      	ldr	r3, [pc, #20]	; (800c5f8 <CheckForTimedButtonRelease+0x74>)
 800c5e4:	220c      	movs	r2, #12
 800c5e6:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 800c5e8:	2000      	movs	r0, #0
 800c5ea:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800c5ec:	0010      	movs	r0, r2
 800c5ee:	4b02      	ldr	r3, [pc, #8]	; (800c5f8 <CheckForTimedButtonRelease+0x74>)
 800c5f0:	220d      	movs	r2, #13
 800c5f2:	54c2      	strb	r2, [r0, r3]
 800c5f4:	e7f8      	b.n	800c5e8 <CheckForTimedButtonRelease+0x64>
 800c5f6:	46c0      	nop			; (mov r8, r8)
 800c5f8:	20002570 	.word	0x20002570
 800c5fc:	200025e0 	.word	0x200025e0

0800c600 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	b08d      	sub	sp, #52	; 0x34
 800c604:	0006      	movs	r6, r0
 800c606:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 800c608:	4b41      	ldr	r3, [pc, #260]	; (800c710 <AddPortButton+0x110>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d157      	bne.n	800c6c0 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 800c610:	4b40      	ldr	r3, [pc, #256]	; (800c714 <AddPortButton+0x114>)
 800c612:	2204      	movs	r2, #4
 800c614:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 800c616:	4b3e      	ldr	r3, [pc, #248]	; (800c710 <AddPortButton+0x110>)
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d15a      	bne.n	800c6d4 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800c61e:	2512      	movs	r5, #18
 800c620:	446d      	add	r5, sp
 800c622:	af04      	add	r7, sp, #16
 800c624:	9700      	str	r7, [sp, #0]
 800c626:	ab05      	add	r3, sp, #20
 800c628:	002a      	movs	r2, r5
 800c62a:	a906      	add	r1, sp, #24
 800c62c:	0020      	movs	r0, r4
 800c62e:	f7ff fdf3 	bl	800c218 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800c632:	882b      	ldrh	r3, [r5, #0]
 800c634:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c636:	2301      	movs	r3, #1
 800c638:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c63a:	2500      	movs	r5, #0
 800c63c:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800c63e:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 800c640:	a907      	add	r1, sp, #28
 800c642:	9806      	ldr	r0, [sp, #24]
 800c644:	f005 f886 	bl	8011754 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 800c648:	883b      	ldrh	r3, [r7, #0]
 800c64a:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c64c:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800c64e:	2302      	movs	r3, #2
 800c650:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 800c652:	a907      	add	r1, sp, #28
 800c654:	9805      	ldr	r0, [sp, #20]
 800c656:	f005 f87d 	bl	8011754 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 800c65a:	00e2      	lsls	r2, r4, #3
 800c65c:	1912      	adds	r2, r2, r4
 800c65e:	4b2e      	ldr	r3, [pc, #184]	; (800c718 <AddPortButton+0x118>)
 800c660:	189b      	adds	r3, r3, r2
 800c662:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c664:	0025      	movs	r5, r4
 800c666:	353a      	adds	r5, #58	; 0x3a
 800c668:	00ad      	lsls	r5, r5, #2
 800c66a:	210e      	movs	r1, #14
 800c66c:	4469      	add	r1, sp
 800c66e:	0028      	movs	r0, r5
 800c670:	f7ff fa40 	bl	800baf4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800c674:	2800      	cmp	r0, #0
 800c676:	d133      	bne.n	800c6e0 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 800c678:	230e      	movs	r3, #14
 800c67a:	446b      	add	r3, sp
 800c67c:	881b      	ldrh	r3, [r3, #0]
 800c67e:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 800c680:	091a      	lsrs	r2, r3, #4
 800c682:	42a2      	cmp	r2, r4
 800c684:	d103      	bne.n	800c68e <AddPortButton+0x8e>
 800c686:	220f      	movs	r2, #15
 800c688:	4013      	ands	r3, r2
 800c68a:	42b3      	cmp	r3, r6
 800c68c:	d015      	beq.n	800c6ba <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c68e:	0324      	lsls	r4, r4, #12
 800c690:	0231      	lsls	r1, r6, #8
 800c692:	4321      	orrs	r1, r4
 800c694:	b289      	uxth	r1, r1
 800c696:	230e      	movs	r3, #14
 800c698:	446b      	add	r3, sp
 800c69a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c69c:	0028      	movs	r0, r5
 800c69e:	f7ff fa59 	bl	800bb54 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c6a2:	1c68      	adds	r0, r5, #1
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	f7ff fa55 	bl	800bb54 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c6aa:	1ca8      	adds	r0, r5, #2
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	f7ff fa51 	bl	800bb54 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c6b2:	1ce8      	adds	r0, r5, #3
 800c6b4:	2100      	movs	r1, #0
 800c6b6:	f7ff fa4d 	bl	800bb54 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800c6ba:	2000      	movs	r0, #0
 800c6bc:	b00d      	add	sp, #52	; 0x34
 800c6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 800c6c0:	008d      	lsls	r5, r1, #2
 800c6c2:	4b16      	ldr	r3, [pc, #88]	; (800c71c <AddPortButton+0x11c>)
 800c6c4:	58e8      	ldr	r0, [r5, r3]
 800c6c6:	f001 fe97 	bl	800e3f8 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800c6ca:	4b15      	ldr	r3, [pc, #84]	; (800c720 <AddPortButton+0x120>)
 800c6cc:	58e8      	ldr	r0, [r5, r3]
 800c6ce:	f001 fe93 	bl	800e3f8 <osSemaphoreRelease>
 800c6d2:	e79d      	b.n	800c610 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 800c6d4:	0020      	movs	r0, r4
 800c6d6:	f001 fc9b 	bl	800e010 <GetUart>
 800c6da:	f006 fc22 	bl	8012f22 <HAL_UART_DeInit>
 800c6de:	e79e      	b.n	800c61e <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800c6e0:	0324      	lsls	r4, r4, #12
 800c6e2:	0231      	lsls	r1, r6, #8
 800c6e4:	4321      	orrs	r1, r4
 800c6e6:	b289      	uxth	r1, r1
 800c6e8:	230e      	movs	r3, #14
 800c6ea:	446b      	add	r3, sp
 800c6ec:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c6ee:	0028      	movs	r0, r5
 800c6f0:	f7ff fa30 	bl	800bb54 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c6f4:	1c68      	adds	r0, r5, #1
 800c6f6:	2100      	movs	r1, #0
 800c6f8:	f7ff fa2c 	bl	800bb54 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c6fc:	1ca8      	adds	r0, r5, #2
 800c6fe:	2100      	movs	r1, #0
 800c700:	f7ff fa28 	bl	800bb54 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c704:	1ce8      	adds	r0, r5, #3
 800c706:	2100      	movs	r1, #0
 800c708:	f7ff fa24 	bl	800bb54 <EE_WriteVariable>
 800c70c:	e7d5      	b.n	800c6ba <AddPortButton+0xba>
 800c70e:	46c0      	nop			; (mov r8, r8)
 800c710:	20000ae7 	.word	0x20000ae7
 800c714:	20001814 	.word	0x20001814
 800c718:	20002570 	.word	0x20002570
 800c71c:	20006ab0 	.word	0x20006ab0
 800c720:	20006a90 	.word	0x20006a90

0800c724 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 800c724:	b570      	push	{r4, r5, r6, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 800c72a:	4837      	ldr	r0, [pc, #220]	; (800c808 <RemovePortButton+0xe4>)
 800c72c:	00e9      	lsls	r1, r5, #3
 800c72e:	1949      	adds	r1, r1, r5
 800c730:	1842      	adds	r2, r0, r1
 800c732:	2300      	movs	r3, #0
 800c734:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 800c736:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 800c738:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 800c73a:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 800c73c:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 800c73e:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 800c740:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 800c742:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 800c744:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800c746:	002c      	movs	r4, r5
 800c748:	343a      	adds	r4, #58	; 0x3a
 800c74a:	00a4      	lsls	r4, r4, #2
 800c74c:	466b      	mov	r3, sp
 800c74e:	1d99      	adds	r1, r3, #6
 800c750:	0020      	movs	r0, r4
 800c752:	f7ff f9cf 	bl	800baf4 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 800c756:	2800      	cmp	r0, #0
 800c758:	d02b      	beq.n	800c7b2 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 800c75a:	0028      	movs	r0, r5
 800c75c:	f001 fc58 	bl	800e010 <GetUart>
 800c760:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 800c762:	6803      	ldr	r3, [r0, #0]
 800c764:	4a29      	ldr	r2, [pc, #164]	; (800c80c <RemovePortButton+0xe8>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d034      	beq.n	800c7d4 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 800c76a:	4a29      	ldr	r2, [pc, #164]	; (800c810 <RemovePortButton+0xec>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d035      	beq.n	800c7dc <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 800c770:	4a28      	ldr	r2, [pc, #160]	; (800c814 <RemovePortButton+0xf0>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d036      	beq.n	800c7e4 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 800c776:	4a28      	ldr	r2, [pc, #160]	; (800c818 <RemovePortButton+0xf4>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d037      	beq.n	800c7ec <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800c77c:	4a27      	ldr	r2, [pc, #156]	; (800c81c <RemovePortButton+0xf8>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d038      	beq.n	800c7f4 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 800c782:	4a27      	ldr	r2, [pc, #156]	; (800c820 <RemovePortButton+0xfc>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d039      	beq.n	800c7fc <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 800c788:	4a26      	ldr	r2, [pc, #152]	; (800c824 <RemovePortButton+0x100>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d03a      	beq.n	800c804 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800c78e:	4a26      	ldr	r2, [pc, #152]	; (800c828 <RemovePortButton+0x104>)
 800c790:	4694      	mov	ip, r2
 800c792:	4463      	add	r3, ip
 800c794:	1e5c      	subs	r4, r3, #1
 800c796:	41a3      	sbcs	r3, r4
 800c798:	425c      	negs	r4, r3
 800c79a:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800c79c:	4b23      	ldr	r3, [pc, #140]	; (800c82c <RemovePortButton+0x108>)
 800c79e:	2200      	movs	r2, #0
 800c7a0:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 800c7a2:	3201      	adds	r2, #1
 800c7a4:	4922      	ldr	r1, [pc, #136]	; (800c830 <RemovePortButton+0x10c>)
 800c7a6:	0030      	movs	r0, r6
 800c7a8:	f006 fc14 	bl	8012fd4 <HAL_UART_Receive_IT>

	return result;
}
 800c7ac:	0020      	movs	r0, r4
 800c7ae:	b002      	add	sp, #8
 800c7b0:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	0020      	movs	r0, r4
 800c7b6:	f7ff f9cd 	bl	800bb54 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800c7ba:	1c60      	adds	r0, r4, #1
 800c7bc:	2100      	movs	r1, #0
 800c7be:	f7ff f9c9 	bl	800bb54 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800c7c2:	1ca0      	adds	r0, r4, #2
 800c7c4:	2100      	movs	r1, #0
 800c7c6:	f7ff f9c5 	bl	800bb54 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800c7ca:	1ce0      	adds	r0, r4, #3
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	f7ff f9c1 	bl	800bb54 <EE_WriteVariable>
 800c7d2:	e7c2      	b.n	800c75a <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 800c7d4:	f001 fa54 	bl	800dc80 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 800c7d8:	2400      	movs	r4, #0
 800c7da:	e7df      	b.n	800c79c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800c7dc:	f001 fa68 	bl	800dcb0 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 800c7e0:	2400      	movs	r4, #0
 800c7e2:	e7db      	b.n	800c79c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 800c7e4:	f001 fa7c 	bl	800dce0 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 800c7e8:	2400      	movs	r4, #0
 800c7ea:	e7d7      	b.n	800c79c <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800c7ec:	f001 fa90 	bl	800dd10 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 800c7f0:	2400      	movs	r4, #0
 800c7f2:	e7d3      	b.n	800c79c <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 800c7f4:	f001 faa4 	bl	800dd40 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 800c7f8:	2400      	movs	r4, #0
 800c7fa:	e7cf      	b.n	800c79c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800c7fc:	f001 fab8 	bl	800dd70 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 800c800:	2400      	movs	r4, #0
 800c802:	e7cb      	b.n	800c79c <RemovePortButton+0x78>
 800c804:	2400      	movs	r4, #0
 800c806:	e7c9      	b.n	800c79c <RemovePortButton+0x78>
 800c808:	20002570 	.word	0x20002570
 800c80c:	40013800 	.word	0x40013800
 800c810:	40004400 	.word	0x40004400
 800c814:	40004800 	.word	0x40004800
 800c818:	40004c00 	.word	0x40004c00
 800c81c:	40005000 	.word	0x40005000
 800c820:	40011400 	.word	0x40011400
 800c824:	40011800 	.word	0x40011800
 800c828:	bffee400 	.word	0xbffee400
 800c82c:	20001814 	.word	0x20001814
 800c830:	20001574 	.word	0x20001574

0800c834 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 800c834:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c836:	46de      	mov	lr, fp
 800c838:	4657      	mov	r7, sl
 800c83a:	464e      	mov	r6, r9
 800c83c:	4645      	mov	r5, r8
 800c83e:	b5e0      	push	{r5, r6, r7, lr}
 800c840:	b085      	sub	sp, #20
 800c842:	0007      	movs	r7, r0
 800c844:	001e      	movs	r6, r3
 800c846:	ab0e      	add	r3, sp, #56	; 0x38
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	4698      	mov	r8, r3
 800c84c:	ab0f      	add	r3, sp, #60	; 0x3c
 800c84e:	781d      	ldrb	r5, [r3, #0]
 800c850:	ab10      	add	r3, sp, #64	; 0x40
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	469b      	mov	fp, r3
 800c856:	ab11      	add	r3, sp, #68	; 0x44
 800c858:	781b      	ldrb	r3, [r3, #0]
 800c85a:	469a      	mov	sl, r3
 800c85c:	ab12      	add	r3, sp, #72	; 0x48
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	4699      	mov	r9, r3
 800c862:	ab13      	add	r3, sp, #76	; 0x4c
 800c864:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 800c866:	00fc      	lsls	r4, r7, #3
 800c868:	19e4      	adds	r4, r4, r7
 800c86a:	4b9e      	ldr	r3, [pc, #632]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c86c:	191b      	adds	r3, r3, r4
 800c86e:	785b      	ldrb	r3, [r3, #1]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d04c      	beq.n	800c90e <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 800c874:	00fc      	lsls	r4, r7, #3
 800c876:	19e4      	adds	r4, r4, r7
 800c878:	4b9a      	ldr	r3, [pc, #616]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c87a:	191b      	adds	r3, r3, r4
 800c87c:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800c87e:	4644      	mov	r4, r8
 800c880:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 800c882:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 800c884:	465c      	mov	r4, fp
 800c886:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 800c888:	4654      	mov	r4, sl
 800c88a:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800c88c:	464c      	mov	r4, r9
 800c88e:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 800c890:	2801      	cmp	r0, #1
 800c892:	d003      	beq.n	800c89c <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 800c894:	2800      	cmp	r0, #0
 800c896:	d113      	bne.n	800c8c0 <SetButtonEvents+0x8c>
 800c898:	2900      	cmp	r1, #0
 800c89a:	d042      	beq.n	800c922 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800c89c:	00f9      	lsls	r1, r7, #3
 800c89e:	19c9      	adds	r1, r1, r7
 800c8a0:	4b90      	ldr	r3, [pc, #576]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c8a2:	185b      	adds	r3, r3, r1
 800c8a4:	7a19      	ldrb	r1, [r3, #8]
 800c8a6:	2401      	movs	r4, #1
 800c8a8:	4321      	orrs	r1, r4
 800c8aa:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c8ac:	2801      	cmp	r0, #1
 800c8ae:	d10c      	bne.n	800c8ca <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 800c8b0:	00fa      	lsls	r2, r7, #3
 800c8b2:	19d2      	adds	r2, r2, r7
 800c8b4:	4b8b      	ldr	r3, [pc, #556]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c8b6:	189b      	adds	r3, r3, r2
 800c8b8:	7a1a      	ldrb	r2, [r3, #8]
 800c8ba:	2102      	movs	r1, #2
 800c8bc:	430a      	orrs	r2, r1
 800c8be:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800c8c0:	2801      	cmp	r0, #1
 800c8c2:	d042      	beq.n	800c94a <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c8c4:	2800      	cmp	r0, #0
 800c8c6:	d152      	bne.n	800c96e <SetButtonEvents+0x13a>
 800c8c8:	e03d      	b.n	800c946 <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d031      	beq.n	800c932 <SetButtonEvents+0xfe>
 800c8ce:	e044      	b.n	800c95a <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d059      	beq.n	800c988 <SetButtonEvents+0x154>
 800c8d4:	e06d      	b.n	800c9b2 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c8d6:	2800      	cmp	r0, #0
 800c8d8:	d100      	bne.n	800c8dc <SetButtonEvents+0xa8>
 800c8da:	e082      	b.n	800c9e2 <SetButtonEvents+0x1ae>
 800c8dc:	e097      	b.n	800ca0e <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800c8de:	2800      	cmp	r0, #0
 800c8e0:	d100      	bne.n	800c8e4 <SetButtonEvents+0xb0>
 800c8e2:	e0f2      	b.n	800caca <SetButtonEvents+0x296>
 800c8e4:	e09f      	b.n	800ca26 <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 800c8e6:	0a19      	lsrs	r1, r3, #8
 800c8e8:	0209      	lsls	r1, r1, #8
 800c8ea:	4311      	orrs	r1, r2
 800c8ec:	ab02      	add	r3, sp, #8
 800c8ee:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800c8f0:	0020      	movs	r0, r4
 800c8f2:	f7ff f92f 	bl	800bb54 <EE_WriteVariable>
 800c8f6:	e0ad      	b.n	800ca54 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 800c8f8:	0019      	movs	r1, r3
 800c8fa:	9801      	ldr	r0, [sp, #4]
 800c8fc:	f7ff f92a 	bl	800bb54 <EE_WriteVariable>
 800c900:	e0b7      	b.n	800ca72 <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 800c902:	4653      	mov	r3, sl
 800c904:	4319      	orrs	r1, r3
 800c906:	0030      	movs	r0, r6
 800c908:	f7ff f924 	bl	800bb54 <EE_WriteVariable>
 800c90c:	e0c0      	b.n	800ca90 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c90e:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 800c910:	b005      	add	sp, #20
 800c912:	bc3c      	pop	{r2, r3, r4, r5}
 800c914:	4690      	mov	r8, r2
 800c916:	4699      	mov	r9, r3
 800c918:	46a2      	mov	sl, r4
 800c91a:	46ab      	mov	fp, r5
 800c91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800c91e:	200b      	movs	r0, #11
 800c920:	e7f6      	b.n	800c910 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 800c922:	00f9      	lsls	r1, r7, #3
 800c924:	19c9      	adds	r1, r1, r7
 800c926:	4b6f      	ldr	r3, [pc, #444]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c928:	185b      	adds	r3, r3, r1
 800c92a:	7a19      	ldrb	r1, [r3, #8]
 800c92c:	2401      	movs	r4, #1
 800c92e:	43a1      	bics	r1, r4
 800c930:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800c932:	2a00      	cmp	r2, #0
 800c934:	d1bc      	bne.n	800c8b0 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 800c936:	00fa      	lsls	r2, r7, #3
 800c938:	19d2      	adds	r2, r2, r7
 800c93a:	4b6a      	ldr	r3, [pc, #424]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c93c:	189b      	adds	r3, r3, r2
 800c93e:	7a1a      	ldrb	r2, [r3, #8]
 800c940:	2102      	movs	r1, #2
 800c942:	438a      	bics	r2, r1
 800c944:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 800c946:	2e00      	cmp	r6, #0
 800c948:	d016      	beq.n	800c978 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c94a:	00fa      	lsls	r2, r7, #3
 800c94c:	19d2      	adds	r2, r2, r7
 800c94e:	4b65      	ldr	r3, [pc, #404]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c950:	189b      	adds	r3, r3, r2
 800c952:	7a1a      	ldrb	r2, [r3, #8]
 800c954:	2104      	movs	r1, #4
 800c956:	430a      	orrs	r2, r1
 800c958:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c95a:	2801      	cmp	r0, #1
 800c95c:	d1b8      	bne.n	800c8d0 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c95e:	00fa      	lsls	r2, r7, #3
 800c960:	19d2      	adds	r2, r2, r7
 800c962:	4b60      	ldr	r3, [pc, #384]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c964:	189b      	adds	r3, r3, r2
 800c966:	7a1a      	ldrb	r2, [r3, #8]
 800c968:	2108      	movs	r1, #8
 800c96a:	430a      	orrs	r2, r1
 800c96c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c96e:	2801      	cmp	r0, #1
 800c970:	d017      	beq.n	800c9a2 <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c972:	2800      	cmp	r0, #0
 800c974:	d128      	bne.n	800c9c8 <SetButtonEvents+0x194>
 800c976:	e012      	b.n	800c99e <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 800c978:	00fa      	lsls	r2, r7, #3
 800c97a:	19d2      	adds	r2, r2, r7
 800c97c:	4b59      	ldr	r3, [pc, #356]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c97e:	189b      	adds	r3, r3, r2
 800c980:	7a1a      	ldrb	r2, [r3, #8]
 800c982:	2104      	movs	r1, #4
 800c984:	438a      	bics	r2, r1
 800c986:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 800c988:	4643      	mov	r3, r8
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e7      	bne.n	800c95e <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800c98e:	00fa      	lsls	r2, r7, #3
 800c990:	19d2      	adds	r2, r2, r7
 800c992:	4b54      	ldr	r3, [pc, #336]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c994:	189b      	adds	r3, r3, r2
 800c996:	7a1a      	ldrb	r2, [r3, #8]
 800c998:	2108      	movs	r1, #8
 800c99a:	438a      	bics	r2, r1
 800c99c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800c99e:	2d00      	cmp	r5, #0
 800c9a0:	d017      	beq.n	800c9d2 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c9a2:	00fa      	lsls	r2, r7, #3
 800c9a4:	19d2      	adds	r2, r2, r7
 800c9a6:	4b4f      	ldr	r3, [pc, #316]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c9a8:	189b      	adds	r3, r3, r2
 800c9aa:	7a1a      	ldrb	r2, [r3, #8]
 800c9ac:	2110      	movs	r1, #16
 800c9ae:	430a      	orrs	r2, r1
 800c9b0:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c9b2:	2801      	cmp	r0, #1
 800c9b4:	d000      	beq.n	800c9b8 <SetButtonEvents+0x184>
 800c9b6:	e78e      	b.n	800c8d6 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c9b8:	00fa      	lsls	r2, r7, #3
 800c9ba:	19d2      	adds	r2, r2, r7
 800c9bc:	4b49      	ldr	r3, [pc, #292]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c9be:	189b      	adds	r3, r3, r2
 800c9c0:	7a1a      	ldrb	r2, [r3, #8]
 800c9c2:	2120      	movs	r1, #32
 800c9c4:	430a      	orrs	r2, r1
 800c9c6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800c9c8:	2801      	cmp	r0, #1
 800c9ca:	d018      	beq.n	800c9fe <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	d12a      	bne.n	800ca26 <SetButtonEvents+0x1f2>
 800c9d0:	e012      	b.n	800c9f8 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 800c9d2:	00fa      	lsls	r2, r7, #3
 800c9d4:	19d2      	adds	r2, r2, r7
 800c9d6:	4b43      	ldr	r3, [pc, #268]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c9d8:	189b      	adds	r3, r3, r2
 800c9da:	7a1a      	ldrb	r2, [r3, #8]
 800c9dc:	2110      	movs	r1, #16
 800c9de:	438a      	bics	r2, r1
 800c9e0:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 800c9e2:	465b      	mov	r3, fp
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d1e7      	bne.n	800c9b8 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 800c9e8:	00fa      	lsls	r2, r7, #3
 800c9ea:	19d2      	adds	r2, r2, r7
 800c9ec:	4b3d      	ldr	r3, [pc, #244]	; (800cae4 <SetButtonEvents+0x2b0>)
 800c9ee:	189b      	adds	r3, r3, r2
 800c9f0:	7a1a      	ldrb	r2, [r3, #8]
 800c9f2:	2120      	movs	r1, #32
 800c9f4:	438a      	bics	r2, r1
 800c9f6:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800c9f8:	4653      	mov	r3, sl
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d05d      	beq.n	800caba <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800c9fe:	00fa      	lsls	r2, r7, #3
 800ca00:	19d2      	adds	r2, r2, r7
 800ca02:	4b38      	ldr	r3, [pc, #224]	; (800cae4 <SetButtonEvents+0x2b0>)
 800ca04:	189b      	adds	r3, r3, r2
 800ca06:	7a1a      	ldrb	r2, [r3, #8]
 800ca08:	2140      	movs	r1, #64	; 0x40
 800ca0a:	430a      	orrs	r2, r1
 800ca0c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800ca0e:	2801      	cmp	r0, #1
 800ca10:	d000      	beq.n	800ca14 <SetButtonEvents+0x1e0>
 800ca12:	e764      	b.n	800c8de <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800ca14:	00fa      	lsls	r2, r7, #3
 800ca16:	19d2      	adds	r2, r2, r7
 800ca18:	4b32      	ldr	r3, [pc, #200]	; (800cae4 <SetButtonEvents+0x2b0>)
 800ca1a:	189b      	adds	r3, r3, r2
 800ca1c:	7a19      	ldrb	r1, [r3, #8]
 800ca1e:	2280      	movs	r2, #128	; 0x80
 800ca20:	4252      	negs	r2, r2
 800ca22:	430a      	orrs	r2, r1
 800ca24:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 800ca26:	003c      	movs	r4, r7
 800ca28:	343a      	adds	r4, #58	; 0x3a
 800ca2a:	00a4      	lsls	r4, r4, #2
 800ca2c:	ab02      	add	r3, sp, #8
 800ca2e:	1d99      	adds	r1, r3, #6
 800ca30:	0020      	movs	r0, r4
 800ca32:	f7ff f85f 	bl	800baf4 <EE_ReadVariable>
	if (!res)											// This variable exists
 800ca36:	2800      	cmp	r0, #0
 800ca38:	d000      	beq.n	800ca3c <SetButtonEvents+0x208>
 800ca3a:	e770      	b.n	800c91e <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 800ca3c:	ab02      	add	r3, sp, #8
 800ca3e:	3306      	adds	r3, #6
 800ca40:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 800ca42:	00fa      	lsls	r2, r7, #3
 800ca44:	19d2      	adds	r2, r2, r7
 800ca46:	4f27      	ldr	r7, [pc, #156]	; (800cae4 <SetButtonEvents+0x2b0>)
 800ca48:	18bf      	adds	r7, r7, r2
 800ca4a:	7a3a      	ldrb	r2, [r7, #8]
 800ca4c:	b2d9      	uxtb	r1, r3
 800ca4e:	4291      	cmp	r1, r2
 800ca50:	d000      	beq.n	800ca54 <SetButtonEvents+0x220>
 800ca52:	e748      	b.n	800c8e6 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 800ca54:	1c63      	adds	r3, r4, #1
 800ca56:	aa02      	add	r2, sp, #8
 800ca58:	1d97      	adds	r7, r2, #6
 800ca5a:	0039      	movs	r1, r7
 800ca5c:	9301      	str	r3, [sp, #4]
 800ca5e:	0018      	movs	r0, r3
 800ca60:	f7ff f848 	bl	800baf4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 800ca64:	0236      	lsls	r6, r6, #8
 800ca66:	883a      	ldrh	r2, [r7, #0]
 800ca68:	465b      	mov	r3, fp
 800ca6a:	4333      	orrs	r3, r6
		if (temp16
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d000      	beq.n	800ca72 <SetButtonEvents+0x23e>
 800ca70:	e742      	b.n	800c8f8 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 800ca72:	1ca6      	adds	r6, r4, #2
 800ca74:	ab02      	add	r3, sp, #8
 800ca76:	1d9f      	adds	r7, r3, #6
 800ca78:	0039      	movs	r1, r7
 800ca7a:	0030      	movs	r0, r6
 800ca7c:	f7ff f83a 	bl	800baf4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 800ca80:	4643      	mov	r3, r8
 800ca82:	0219      	lsls	r1, r3, #8
 800ca84:	883a      	ldrh	r2, [r7, #0]
 800ca86:	4653      	mov	r3, sl
 800ca88:	430b      	orrs	r3, r1
		if (temp16
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d000      	beq.n	800ca90 <SetButtonEvents+0x25c>
 800ca8e:	e738      	b.n	800c902 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 800ca90:	3403      	adds	r4, #3
 800ca92:	ab02      	add	r3, sp, #8
 800ca94:	1d9e      	adds	r6, r3, #6
 800ca96:	0031      	movs	r1, r6
 800ca98:	0020      	movs	r0, r4
 800ca9a:	f7ff f82b 	bl	800baf4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 800ca9e:	022d      	lsls	r5, r5, #8
 800caa0:	8832      	ldrh	r2, [r6, #0]
 800caa2:	464b      	mov	r3, r9
 800caa4:	432b      	orrs	r3, r5
	return result;
 800caa6:	2000      	movs	r0, #0
		if (temp16
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d100      	bne.n	800caae <SetButtonEvents+0x27a>
 800caac:	e730      	b.n	800c910 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 800caae:	0019      	movs	r1, r3
 800cab0:	0020      	movs	r0, r4
 800cab2:	f7ff f84f 	bl	800bb54 <EE_WriteVariable>
	return result;
 800cab6:	2000      	movs	r0, #0
 800cab8:	e72a      	b.n	800c910 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800caba:	00fa      	lsls	r2, r7, #3
 800cabc:	19d2      	adds	r2, r2, r7
 800cabe:	4b09      	ldr	r3, [pc, #36]	; (800cae4 <SetButtonEvents+0x2b0>)
 800cac0:	189b      	adds	r3, r3, r2
 800cac2:	7a1a      	ldrb	r2, [r3, #8]
 800cac4:	2140      	movs	r1, #64	; 0x40
 800cac6:	438a      	bics	r2, r1
 800cac8:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800caca:	464b      	mov	r3, r9
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d1a1      	bne.n	800ca14 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 800cad0:	00fa      	lsls	r2, r7, #3
 800cad2:	19d2      	adds	r2, r2, r7
 800cad4:	4b03      	ldr	r3, [pc, #12]	; (800cae4 <SetButtonEvents+0x2b0>)
 800cad6:	189b      	adds	r3, r3, r2
 800cad8:	7a19      	ldrb	r1, [r3, #8]
 800cada:	227f      	movs	r2, #127	; 0x7f
 800cadc:	400a      	ands	r2, r1
 800cade:	721a      	strb	r2, [r3, #8]
 800cae0:	e7a1      	b.n	800ca26 <SetButtonEvents+0x1f2>
 800cae2:	46c0      	nop			; (mov r8, r8)
 800cae4:	20002570 	.word	0x20002570

0800cae8 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 800cae8:	b500      	push	{lr}
 800caea:	b089      	sub	sp, #36	; 0x24

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800caec:	2214      	movs	r2, #20
 800caee:	2100      	movs	r1, #0
 800caf0:	a803      	add	r0, sp, #12
 800caf2:	f007 f9f9 	bl	8013ee8 <memset>
		/* ADC1 clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 800caf6:	4b12      	ldr	r3, [pc, #72]	; (800cb40 <HAL_ADC_MspInit+0x58>)
 800caf8:	6999      	ldr	r1, [r3, #24]
 800cafa:	2080      	movs	r0, #128	; 0x80
 800cafc:	0080      	lsls	r0, r0, #2
 800cafe:	4301      	orrs	r1, r0
 800cb00:	6199      	str	r1, [r3, #24]
 800cb02:	699a      	ldr	r2, [r3, #24]
 800cb04:	4002      	ands	r2, r0
 800cb06:	9201      	str	r2, [sp, #4]
 800cb08:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800cb0a:	695a      	ldr	r2, [r3, #20]
 800cb0c:	2180      	movs	r1, #128	; 0x80
 800cb0e:	0289      	lsls	r1, r1, #10
 800cb10:	430a      	orrs	r2, r1
 800cb12:	615a      	str	r2, [r3, #20]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	400b      	ands	r3, r1
 800cb18:	9302      	str	r3, [sp, #8]
 800cb1a:	9b02      	ldr	r3, [sp, #8]
		 PA2     ------> ADC_IN2
		 PA3     ------> ADC_IN3
		 PA4     ------> ADC_IN4
		 PA5     ------> ADC_IN5
		 */
		if(flag_ADC_Select==1){
 800cb1c:	4b09      	ldr	r3, [pc, #36]	; (800cb44 <HAL_ADC_MspInit+0x5c>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d001      	beq.n	800cb28 <HAL_ADC_MspInit+0x40>
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
		GPIO_InitStruct.Pull = GPIO_NOPULL;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}

}
 800cb24:	b009      	add	sp, #36	; 0x24
 800cb26:	bd00      	pop	{pc}
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 800cb28:	333b      	adds	r3, #59	; 0x3b
 800cb2a:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb2c:	3b39      	subs	r3, #57	; 0x39
 800cb2e:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);}
 800cb30:	3871      	subs	r0, #113	; 0x71
 800cb32:	38ff      	subs	r0, #255	; 0xff
 800cb34:	a903      	add	r1, sp, #12
 800cb36:	05c0      	lsls	r0, r0, #23
 800cb38:	f004 fe0c 	bl	8011754 <HAL_GPIO_Init>
}
 800cb3c:	e7f2      	b.n	800cb24 <HAL_ADC_MspInit+0x3c>
 800cb3e:	46c0      	nop			; (mov r8, r8)
 800cb40:	40021000 	.word	0x40021000
 800cb44:	200025bc 	.word	0x200025bc

0800cb48 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 800cb48:	6803      	ldr	r3, [r0, #0]
 800cb4a:	4a0d      	ldr	r2, [pc, #52]	; (800cb80 <Get_channel+0x38>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d003      	beq.n	800cb58 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 800cb50:	4a0c      	ldr	r2, [pc, #48]	; (800cb84 <Get_channel+0x3c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d008      	beq.n	800cb68 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 800cb56:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <Get_channel+0x40>)
 800cb5a:	4299      	cmp	r1, r3
 800cb5c:	d00c      	beq.n	800cb78 <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 800cb5e:	4b0b      	ldr	r3, [pc, #44]	; (800cb8c <Get_channel+0x44>)
 800cb60:	4299      	cmp	r1, r3
 800cb62:	d1f8      	bne.n	800cb56 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 800cb64:	2003      	movs	r0, #3
 800cb66:	e7f6      	b.n	800cb56 <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 800cb68:	4b07      	ldr	r3, [pc, #28]	; (800cb88 <Get_channel+0x40>)
 800cb6a:	4299      	cmp	r1, r3
 800cb6c:	d006      	beq.n	800cb7c <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 800cb6e:	4b07      	ldr	r3, [pc, #28]	; (800cb8c <Get_channel+0x44>)
 800cb70:	4299      	cmp	r1, r3
 800cb72:	d1f0      	bne.n	800cb56 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 800cb74:	2005      	movs	r0, #5
 800cb76:	e7ee      	b.n	800cb56 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 800cb78:	2002      	movs	r0, #2
 800cb7a:	e7ec      	b.n	800cb56 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 800cb7c:	2004      	movs	r0, #4
 800cb7e:	e7ea      	b.n	800cb56 <Get_channel+0xe>
 800cb80:	40004400 	.word	0x40004400
 800cb84:	40011400 	.word	0x40011400
 800cb88:	08019580 	.word	0x08019580
 800cb8c:	08019584 	.word	0x08019584

0800cb90 <Error_Handler>:

void Error_Handler(void) {
 800cb90:	b510      	push	{r4, lr}

	HAL_Delay(100);
 800cb92:	2064      	movs	r0, #100	; 0x64
 800cb94:	f003 fb36 	bl	8010204 <HAL_Delay>

}
 800cb98:	bd10      	pop	{r4, pc}
	...

0800cb9c <MX_ADC_Init>:
void MX_ADC_Init(void) {
 800cb9c:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 800cb9e:	4811      	ldr	r0, [pc, #68]	; (800cbe4 <MX_ADC_Init+0x48>)
 800cba0:	4b11      	ldr	r3, [pc, #68]	; (800cbe8 <MX_ADC_Init+0x4c>)
 800cba2:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800cba4:	2380      	movs	r3, #128	; 0x80
 800cba6:	061b      	lsls	r3, r3, #24
 800cba8:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800cbae:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800cbb4:	2104      	movs	r1, #4
 800cbb6:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 800cbb8:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800cbba:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 800cbbc:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 800cbbe:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800cbc0:	21c2      	movs	r1, #194	; 0xc2
 800cbc2:	31ff      	adds	r1, #255	; 0xff
 800cbc4:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800cbc6:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 800cbc8:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800cbca:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 800cbcc:	f003 fbf4 	bl	80103b8 <HAL_ADC_Init>
 800cbd0:	2800      	cmp	r0, #0
 800cbd2:	d103      	bne.n	800cbdc <MX_ADC_Init+0x40>
	ADC_flag = 1;
 800cbd4:	4b05      	ldr	r3, [pc, #20]	; (800cbec <MX_ADC_Init+0x50>)
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	701a      	strb	r2, [r3, #0]
}
 800cbda:	bd10      	pop	{r4, pc}
		Error_Handler();
 800cbdc:	f7ff ffd8 	bl	800cb90 <Error_Handler>
 800cbe0:	e7f8      	b.n	800cbd4 <MX_ADC_Init+0x38>
 800cbe2:	46c0      	nop			; (mov r8, r8)
 800cbe4:	20006e6c 	.word	0x20006e6c
 800cbe8:	40012400 	.word	0x40012400
 800cbec:	2000255e 	.word	0x2000255e

0800cbf0 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 800cbf0:	b570      	push	{r4, r5, r6, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	0005      	movs	r5, r0
 800cbf6:	000e      	movs	r6, r1
	if (0 == ADC_flag)
 800cbf8:	4b4d      	ldr	r3, [pc, #308]	; (800cd30 <ReadTempAndVref+0x140>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d100      	bne.n	800cc02 <ReadTempAndVref+0x12>
 800cc00:	e087      	b.n	800cd12 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800cc02:	494c      	ldr	r1, [pc, #304]	; (800cd34 <ReadTempAndVref+0x144>)
 800cc04:	2310      	movs	r3, #16
 800cc06:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cc08:	2380      	movs	r3, #128	; 0x80
 800cc0a:	015b      	lsls	r3, r3, #5
 800cc0c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cc0e:	2301      	movs	r3, #1
 800cc10:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cc12:	4849      	ldr	r0, [pc, #292]	; (800cd38 <ReadTempAndVref+0x148>)
 800cc14:	f003 fd30 	bl	8010678 <HAL_ADC_ConfigChannel>
 800cc18:	2800      	cmp	r0, #0
 800cc1a:	d000      	beq.n	800cc1e <ReadTempAndVref+0x2e>
 800cc1c:	e07c      	b.n	800cd18 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 800cc1e:	4c46      	ldr	r4, [pc, #280]	; (800cd38 <ReadTempAndVref+0x148>)
 800cc20:	0020      	movs	r0, r4
 800cc22:	f003 fc71 	bl	8010508 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800cc26:	2164      	movs	r1, #100	; 0x64
 800cc28:	0020      	movs	r0, r4
 800cc2a:	f003 fcbf 	bl	80105ac <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 800cc2e:	0020      	movs	r0, r4
 800cc30:	f003 fd1c 	bl	801066c <HAL_ADC_GetValue>
 800cc34:	4b41      	ldr	r3, [pc, #260]	; (800cd3c <ReadTempAndVref+0x14c>)
 800cc36:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 800cc38:	0400      	lsls	r0, r0, #16
 800cc3a:	0c00      	lsrs	r0, r0, #16
 800cc3c:	f7f5 ff06 	bl	8002a4c <__aeabi_i2d>
 800cc40:	4a3f      	ldr	r2, [pc, #252]	; (800cd40 <ReadTempAndVref+0x150>)
 800cc42:	4b40      	ldr	r3, [pc, #256]	; (800cd44 <ReadTempAndVref+0x154>)
 800cc44:	f7f5 f8f6 	bl	8001e34 <__aeabi_dmul>
 800cc48:	2200      	movs	r2, #0
 800cc4a:	4b3f      	ldr	r3, [pc, #252]	; (800cd48 <ReadTempAndVref+0x158>)
 800cc4c:	f7f4 fce8 	bl	8001620 <__aeabi_ddiv>
 800cc50:	4a3e      	ldr	r2, [pc, #248]	; (800cd4c <ReadTempAndVref+0x15c>)
 800cc52:	4b3f      	ldr	r3, [pc, #252]	; (800cd50 <ReadTempAndVref+0x160>)
 800cc54:	f7f5 fb60 	bl	8002318 <__aeabi_dsub>
 800cc58:	4a3e      	ldr	r2, [pc, #248]	; (800cd54 <ReadTempAndVref+0x164>)
 800cc5a:	4b3f      	ldr	r3, [pc, #252]	; (800cd58 <ReadTempAndVref+0x168>)
 800cc5c:	f7f4 fce0 	bl	8001620 <__aeabi_ddiv>
 800cc60:	2200      	movs	r2, #0
 800cc62:	4b3e      	ldr	r3, [pc, #248]	; (800cd5c <ReadTempAndVref+0x16c>)
 800cc64:	f7f4 f9c0 	bl	8000fe8 <__aeabi_dadd>
 800cc68:	f7f5 ffae 	bl	8002bc8 <__aeabi_d2f>
 800cc6c:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 800cc6e:	0020      	movs	r0, r4
 800cc70:	f003 fc7a 	bl	8010568 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800cc74:	492f      	ldr	r1, [pc, #188]	; (800cd34 <ReadTempAndVref+0x144>)
 800cc76:	2310      	movs	r3, #16
 800cc78:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800cc7a:	4b39      	ldr	r3, [pc, #228]	; (800cd60 <ReadTempAndVref+0x170>)
 800cc7c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cc82:	0020      	movs	r0, r4
 800cc84:	f003 fcf8 	bl	8010678 <HAL_ADC_ConfigChannel>
 800cc88:	2800      	cmp	r0, #0
 800cc8a:	d148      	bne.n	800cd1e <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800cc8c:	4929      	ldr	r1, [pc, #164]	; (800cd34 <ReadTempAndVref+0x144>)
 800cc8e:	2311      	movs	r3, #17
 800cc90:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cc92:	2380      	movs	r3, #128	; 0x80
 800cc94:	015b      	lsls	r3, r3, #5
 800cc96:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800cc98:	2305      	movs	r3, #5
 800cc9a:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cc9c:	4826      	ldr	r0, [pc, #152]	; (800cd38 <ReadTempAndVref+0x148>)
 800cc9e:	f003 fceb 	bl	8010678 <HAL_ADC_ConfigChannel>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d13e      	bne.n	800cd24 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 800cca6:	4d24      	ldr	r5, [pc, #144]	; (800cd38 <ReadTempAndVref+0x148>)
 800cca8:	0028      	movs	r0, r5
 800ccaa:	f003 fc2d 	bl	8010508 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 800ccae:	2164      	movs	r1, #100	; 0x64
 800ccb0:	0028      	movs	r0, r5
 800ccb2:	f003 fc7b 	bl	80105ac <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 800ccb6:	0028      	movs	r0, r5
 800ccb8:	f003 fcd8 	bl	801066c <HAL_ADC_GetValue>
 800ccbc:	0004      	movs	r4, r0
 800ccbe:	4b29      	ldr	r3, [pc, #164]	; (800cd64 <ReadTempAndVref+0x174>)
 800ccc0:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 800ccc2:	4b29      	ldr	r3, [pc, #164]	; (800cd68 <ReadTempAndVref+0x178>)
 800ccc4:	8818      	ldrh	r0, [r3, #0]
 800ccc6:	f7f5 fec1 	bl	8002a4c <__aeabi_i2d>
 800ccca:	4a1d      	ldr	r2, [pc, #116]	; (800cd40 <ReadTempAndVref+0x150>)
 800cccc:	4b1d      	ldr	r3, [pc, #116]	; (800cd44 <ReadTempAndVref+0x154>)
 800ccce:	f7f5 f8b1 	bl	8001e34 <__aeabi_dmul>
 800ccd2:	9000      	str	r0, [sp, #0]
 800ccd4:	9101      	str	r1, [sp, #4]
 800ccd6:	0420      	lsls	r0, r4, #16
 800ccd8:	0c00      	lsrs	r0, r0, #16
 800ccda:	f7f5 feb7 	bl	8002a4c <__aeabi_i2d>
 800ccde:	0002      	movs	r2, r0
 800cce0:	000b      	movs	r3, r1
 800cce2:	9800      	ldr	r0, [sp, #0]
 800cce4:	9901      	ldr	r1, [sp, #4]
 800cce6:	f7f4 fc9b 	bl	8001620 <__aeabi_ddiv>
 800ccea:	f7f5 ff6d 	bl	8002bc8 <__aeabi_d2f>
 800ccee:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 800ccf0:	0028      	movs	r0, r5
 800ccf2:	f003 fc39 	bl	8010568 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800ccf6:	490f      	ldr	r1, [pc, #60]	; (800cd34 <ReadTempAndVref+0x144>)
 800ccf8:	2311      	movs	r3, #17
 800ccfa:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 800ccfc:	4b18      	ldr	r3, [pc, #96]	; (800cd60 <ReadTempAndVref+0x170>)
 800ccfe:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cd00:	2301      	movs	r3, #1
 800cd02:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cd04:	0028      	movs	r0, r5
 800cd06:	f003 fcb7 	bl	8010678 <HAL_ADC_ConfigChannel>
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d10d      	bne.n	800cd2a <ReadTempAndVref+0x13a>
}
 800cd0e:	b002      	add	sp, #8
 800cd10:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 800cd12:	f7ff ff43 	bl	800cb9c <MX_ADC_Init>
 800cd16:	e774      	b.n	800cc02 <ReadTempAndVref+0x12>
		Error_Handler();
 800cd18:	f7ff ff3a 	bl	800cb90 <Error_Handler>
 800cd1c:	e77f      	b.n	800cc1e <ReadTempAndVref+0x2e>
		Error_Handler();
 800cd1e:	f7ff ff37 	bl	800cb90 <Error_Handler>
 800cd22:	e7b3      	b.n	800cc8c <ReadTempAndVref+0x9c>
		Error_Handler();
 800cd24:	f7ff ff34 	bl	800cb90 <Error_Handler>
 800cd28:	e7bd      	b.n	800cca6 <ReadTempAndVref+0xb6>
		Error_Handler();
 800cd2a:	f7ff ff31 	bl	800cb90 <Error_Handler>
}
 800cd2e:	e7ee      	b.n	800cd0e <ReadTempAndVref+0x11e>
 800cd30:	2000255e 	.word	0x2000255e
 800cd34:	200025fc 	.word	0x200025fc
 800cd38:	20006e6c 	.word	0x20006e6c
 800cd3c:	20002562 	.word	0x20002562
 800cd40:	66666666 	.word	0x66666666
 800cd44:	400a6666 	.word	0x400a6666
 800cd48:	40affe00 	.word	0x40affe00
 800cd4c:	28f5c28f 	.word	0x28f5c28f
 800cd50:	3ff68f5c 	.word	0x3ff68f5c
 800cd54:	33333333 	.word	0x33333333
 800cd58:	40113333 	.word	0x40113333
 800cd5c:	40390000 	.word	0x40390000
 800cd60:	00001001 	.word	0x00001001
 800cd64:	20002560 	.word	0x20002560
 800cd68:	1ffff7ba 	.word	0x1ffff7ba

0800cd6c <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 800cd6c:	b570      	push	{r4, r5, r6, lr}
 800cd6e:	b086      	sub	sp, #24
 800cd70:	0004      	movs	r4, r0
 800cd72:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 800cd74:	1e83      	subs	r3, r0, #2
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d901      	bls.n	800cd7e <GetReadPrecentage+0x12>
}
 800cd7a:	b006      	add	sp, #24
 800cd7c:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 800cd7e:	4b4a      	ldr	r3, [pc, #296]	; (800cea8 <GetReadPrecentage+0x13c>)
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d04f      	beq.n	800ce26 <GetReadPrecentage+0xba>
		Channel = Get_channel(GetUart(port), "bottom");
 800cd86:	0020      	movs	r0, r4
 800cd88:	f001 f942 	bl	800e010 <GetUart>
 800cd8c:	4947      	ldr	r1, [pc, #284]	; (800ceac <GetReadPrecentage+0x140>)
 800cd8e:	f7ff fedb 	bl	800cb48 <Get_channel>
 800cd92:	4b47      	ldr	r3, [pc, #284]	; (800ceb0 <GetReadPrecentage+0x144>)
 800cd94:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800cd96:	4947      	ldr	r1, [pc, #284]	; (800ceb4 <GetReadPrecentage+0x148>)
 800cd98:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cd9a:	2380      	movs	r3, #128	; 0x80
 800cd9c:	015b      	lsls	r3, r3, #5
 800cd9e:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800cda0:	2301      	movs	r3, #1
 800cda2:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cda4:	4844      	ldr	r0, [pc, #272]	; (800ceb8 <GetReadPrecentage+0x14c>)
 800cda6:	f003 fc67 	bl	8010678 <HAL_ADC_ConfigChannel>
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d178      	bne.n	800cea0 <GetReadPrecentage+0x134>
		HAL_ADC_Start(&hadc);
 800cdae:	4c42      	ldr	r4, [pc, #264]	; (800ceb8 <GetReadPrecentage+0x14c>)
 800cdb0:	0020      	movs	r0, r4
 800cdb2:	f003 fba9 	bl	8010508 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cdb6:	2164      	movs	r1, #100	; 0x64
 800cdb8:	0020      	movs	r0, r4
 800cdba:	f003 fbf7 	bl	80105ac <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 800cdbe:	0020      	movs	r0, r4
 800cdc0:	f003 fc54 	bl	801066c <HAL_ADC_GetValue>
 800cdc4:	f7f4 f8d0 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 800cdc8:	f7f5 feac 	bl	8002b24 <__aeabi_f2d>
 800cdcc:	4a3b      	ldr	r2, [pc, #236]	; (800cebc <GetReadPrecentage+0x150>)
 800cdce:	4b3c      	ldr	r3, [pc, #240]	; (800cec0 <GetReadPrecentage+0x154>)
 800cdd0:	f7f5 f830 	bl	8001e34 <__aeabi_dmul>
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	4b3b      	ldr	r3, [pc, #236]	; (800cec4 <GetReadPrecentage+0x158>)
 800cdd8:	f7f4 fc22 	bl	8001620 <__aeabi_ddiv>
 800cddc:	f7f5 fef4 	bl	8002bc8 <__aeabi_d2f>
 800cde0:	4b39      	ldr	r3, [pc, #228]	; (800cec8 <GetReadPrecentage+0x15c>)
 800cde2:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 800cde4:	4939      	ldr	r1, [pc, #228]	; (800cecc <GetReadPrecentage+0x160>)
 800cde6:	f7f3 fda9 	bl	800093c <__aeabi_fmul>
 800cdea:	f7f5 fe9b 	bl	8002b24 <__aeabi_f2d>
 800cdee:	4a33      	ldr	r2, [pc, #204]	; (800cebc <GetReadPrecentage+0x150>)
 800cdf0:	4b33      	ldr	r3, [pc, #204]	; (800cec0 <GetReadPrecentage+0x154>)
 800cdf2:	f7f4 fc15 	bl	8001620 <__aeabi_ddiv>
 800cdf6:	f7f5 fee7 	bl	8002bc8 <__aeabi_d2f>
 800cdfa:	4b35      	ldr	r3, [pc, #212]	; (800ced0 <GetReadPrecentage+0x164>)
 800cdfc:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 800cdfe:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 800ce00:	0020      	movs	r0, r4
 800ce02:	f003 fbb1 	bl	8010568 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800ce06:	492b      	ldr	r1, [pc, #172]	; (800ceb4 <GetReadPrecentage+0x148>)
 800ce08:	4b29      	ldr	r3, [pc, #164]	; (800ceb0 <GetReadPrecentage+0x144>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800ce0e:	4b31      	ldr	r3, [pc, #196]	; (800ced4 <GetReadPrecentage+0x168>)
 800ce10:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800ce12:	2301      	movs	r3, #1
 800ce14:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800ce16:	0020      	movs	r0, r4
 800ce18:	f003 fc2e 	bl	8010678 <HAL_ADC_ConfigChannel>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d0ac      	beq.n	800cd7a <GetReadPrecentage+0xe>
			Error_Handler();
 800ce20:	f7ff feb6 	bl	800cb90 <Error_Handler>
 800ce24:	e7a9      	b.n	800cd7a <GetReadPrecentage+0xe>
			MX_ADC_Init();
 800ce26:	f7ff feb9 	bl	800cb9c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 800ce2a:	0020      	movs	r0, r4
 800ce2c:	f001 f8f0 	bl	800e010 <GetUart>
 800ce30:	f006 f877 	bl	8012f22 <HAL_UART_DeInit>
			if (port == 3) {
 800ce34:	2c03      	cmp	r4, #3
 800ce36:	d01a      	beq.n	800ce6e <GetReadPrecentage+0x102>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2);
 800ce38:	2690      	movs	r6, #144	; 0x90
 800ce3a:	05f6      	lsls	r6, r6, #23
 800ce3c:	2104      	movs	r1, #4
 800ce3e:	0030      	movs	r0, r6
 800ce40:	f004 fd68 	bl	8011914 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_2;
 800ce44:	2304      	movs	r3, #4
 800ce46:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce48:	3b03      	subs	r3, #3
 800ce4a:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ce4c:	3302      	adds	r3, #2
 800ce4e:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce50:	a901      	add	r1, sp, #4
 800ce52:	0030      	movs	r0, r6
 800ce54:	f004 fc7e 	bl	8011754 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800ce58:	4b1f      	ldr	r3, [pc, #124]	; (800ced8 <GetReadPrecentage+0x16c>)
 800ce5a:	191b      	adds	r3, r3, r4
 800ce5c:	3b01      	subs	r3, #1
 800ce5e:	2206      	movs	r2, #6
 800ce60:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 800ce62:	3a05      	subs	r2, #5
 800ce64:	2104      	movs	r1, #4
 800ce66:	0030      	movs	r0, r6
 800ce68:	f004 fde8 	bl	8011a3c <HAL_GPIO_WritePin>
 800ce6c:	e78b      	b.n	800cd86 <GetReadPrecentage+0x1a>
				HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 800ce6e:	2690      	movs	r6, #144	; 0x90
 800ce70:	05f6      	lsls	r6, r6, #23
 800ce72:	2110      	movs	r1, #16
 800ce74:	0030      	movs	r0, r6
 800ce76:	f004 fd4d 	bl	8011914 <HAL_GPIO_DeInit>
				GPIO_InitStruct.Pin = GPIO_PIN_4;
 800ce7a:	2310      	movs	r3, #16
 800ce7c:	9301      	str	r3, [sp, #4]
				GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ce7e:	3b0f      	subs	r3, #15
 800ce80:	9302      	str	r3, [sp, #8]
				GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ce82:	3302      	adds	r3, #2
 800ce84:	9304      	str	r3, [sp, #16]
				HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce86:	a901      	add	r1, sp, #4
 800ce88:	0030      	movs	r0, r6
 800ce8a:	f004 fc63 	bl	8011754 <HAL_GPIO_Init>
				portStatus[port - 1] = CUSTOM;
 800ce8e:	4b12      	ldr	r3, [pc, #72]	; (800ced8 <GetReadPrecentage+0x16c>)
 800ce90:	2206      	movs	r2, #6
 800ce92:	709a      	strb	r2, [r3, #2]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800ce94:	3a05      	subs	r2, #5
 800ce96:	2110      	movs	r1, #16
 800ce98:	0030      	movs	r0, r6
 800ce9a:	f004 fdcf 	bl	8011a3c <HAL_GPIO_WritePin>
 800ce9e:	e772      	b.n	800cd86 <GetReadPrecentage+0x1a>
			Error_Handler();
 800cea0:	f7ff fe76 	bl	800cb90 <Error_Handler>
 800cea4:	e783      	b.n	800cdae <GetReadPrecentage+0x42>
 800cea6:	46c0      	nop			; (mov r8, r8)
 800cea8:	2000255e 	.word	0x2000255e
 800ceac:	08019584 	.word	0x08019584
 800ceb0:	2000256c 	.word	0x2000256c
 800ceb4:	200025fc 	.word	0x200025fc
 800ceb8:	20006e6c 	.word	0x20006e6c
 800cebc:	66666666 	.word	0x66666666
 800cec0:	400a6666 	.word	0x400a6666
 800cec4:	40affe00 	.word	0x40affe00
 800cec8:	200025c0 	.word	0x200025c0
 800cecc:	42c80000 	.word	0x42c80000
 800ced0:	200025b0 	.word	0x200025b0
 800ced4:	00001001 	.word	0x00001001
 800ced8:	20001814 	.word	0x20001814

0800cedc <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 800cedc:	2802      	cmp	r0, #2
 800cede:	d004      	beq.n	800ceea <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 800cee0:	2803      	cmp	r0, #3
 800cee2:	d010      	beq.n	800cf06 <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 800cee4:	4b0f      	ldr	r3, [pc, #60]	; (800cf24 <Get_Rank+0x48>)
 800cee6:	7818      	ldrb	r0, [r3, #0]
}
 800cee8:	4770      	bx	lr
	if (Port == 2 && side == "top")
 800ceea:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <Get_Rank+0x4c>)
 800ceec:	4299      	cmp	r1, r3
 800ceee:	d006      	beq.n	800cefe <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 800cef0:	4b0e      	ldr	r3, [pc, #56]	; (800cf2c <Get_Rank+0x50>)
 800cef2:	4299      	cmp	r1, r3
 800cef4:	d1f6      	bne.n	800cee4 <Get_Rank+0x8>
		Rank_t = 1;
 800cef6:	4b0b      	ldr	r3, [pc, #44]	; (800cf24 <Get_Rank+0x48>)
 800cef8:	2201      	movs	r2, #1
 800cefa:	701a      	strb	r2, [r3, #0]
 800cefc:	e7f2      	b.n	800cee4 <Get_Rank+0x8>
		Rank_t = 0;
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <Get_Rank+0x48>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	701a      	strb	r2, [r3, #0]
 800cf04:	e7ee      	b.n	800cee4 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 800cf06:	4b08      	ldr	r3, [pc, #32]	; (800cf28 <Get_Rank+0x4c>)
 800cf08:	4299      	cmp	r1, r3
 800cf0a:	d006      	beq.n	800cf1a <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 800cf0c:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <Get_Rank+0x50>)
 800cf0e:	4299      	cmp	r1, r3
 800cf10:	d1e8      	bne.n	800cee4 <Get_Rank+0x8>
		Rank_t = 3;
 800cf12:	4b04      	ldr	r3, [pc, #16]	; (800cf24 <Get_Rank+0x48>)
 800cf14:	2203      	movs	r2, #3
 800cf16:	701a      	strb	r2, [r3, #0]
 800cf18:	e7e4      	b.n	800cee4 <Get_Rank+0x8>
		Rank_t = 2;
 800cf1a:	4b02      	ldr	r3, [pc, #8]	; (800cf24 <Get_Rank+0x48>)
 800cf1c:	2202      	movs	r2, #2
 800cf1e:	701a      	strb	r2, [r3, #0]
 800cf20:	e7e0      	b.n	800cee4 <Get_Rank+0x8>
 800cf22:	46c0      	nop			; (mov r8, r8)
 800cf24:	2000256d 	.word	0x2000256d
 800cf28:	08019580 	.word	0x08019580
 800cf2c:	08019584 	.word	0x08019584

0800cf30 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	0004      	movs	r4, r0
 800cf34:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 800cf36:	1e83      	subs	r3, r0, #2
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d900      	bls.n	800cf3e <ADCSelectChannel+0xe>
}
 800cf3c:	bd70      	pop	{r4, r5, r6, pc}
		flag_ADC_Select=1;
 800cf3e:	4b10      	ldr	r3, [pc, #64]	; (800cf80 <ADCSelectChannel+0x50>)
 800cf40:	2201      	movs	r2, #1
 800cf42:	701a      	strb	r2, [r3, #0]
		HAL_UART_DeInit(GetUart(ADC_port));
 800cf44:	f001 f864 	bl	800e010 <GetUart>
 800cf48:	f005 ffeb 	bl	8012f22 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 800cf4c:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <ADCSelectChannel+0x54>)
 800cf4e:	191b      	adds	r3, r3, r4
 800cf50:	3b01      	subs	r3, #1
 800cf52:	2206      	movs	r2, #6
 800cf54:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 800cf56:	0020      	movs	r0, r4
 800cf58:	f001 f85a 	bl	800e010 <GetUart>
 800cf5c:	0029      	movs	r1, r5
 800cf5e:	f7ff fdf3 	bl	800cb48 <Get_channel>
 800cf62:	4b09      	ldr	r3, [pc, #36]	; (800cf88 <ADCSelectChannel+0x58>)
 800cf64:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 800cf66:	0029      	movs	r1, r5
 800cf68:	0020      	movs	r0, r4
 800cf6a:	f7ff ffb7 	bl	800cedc <Get_Rank>
 800cf6e:	4b07      	ldr	r3, [pc, #28]	; (800cf8c <ADCSelectChannel+0x5c>)
 800cf70:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 800cf72:	4b07      	ldr	r3, [pc, #28]	; (800cf90 <ADCSelectChannel+0x60>)
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d1e0      	bne.n	800cf3c <ADCSelectChannel+0xc>
			MX_ADC_Init();
 800cf7a:	f7ff fe0f 	bl	800cb9c <MX_ADC_Init>
}
 800cf7e:	e7dd      	b.n	800cf3c <ADCSelectChannel+0xc>
 800cf80:	200025bc 	.word	0x200025bc
 800cf84:	20001814 	.word	0x20001814
 800cf88:	2000256c 	.word	0x2000256c
 800cf8c:	2000256d 	.word	0x2000256d
 800cf90:	2000255e 	.word	0x2000255e

0800cf94 <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 800cf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf96:	0005      	movs	r5, r0
 800cf98:	000e      	movs	r6, r1
 800cf9a:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 800cf9c:	4b26      	ldr	r3, [pc, #152]	; (800d038 <ReadADCChannel+0xa4>)
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d008      	beq.n	800cfb6 <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 800cfa4:	4b25      	ldr	r3, [pc, #148]	; (800d03c <ReadADCChannel+0xa8>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	4a25      	ldr	r2, [pc, #148]	; (800d040 <ReadADCChannel+0xac>)
 800cfac:	5a98      	ldrh	r0, [r3, r2]
 800cfae:	f7f3 ffdb 	bl	8000f68 <__aeabi_ui2f>
 800cfb2:	6020      	str	r0, [r4, #0]
}
 800cfb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 800cfb6:	f001 f82b 	bl	800e010 <GetUart>
 800cfba:	0031      	movs	r1, r6
 800cfbc:	f7ff fdc4 	bl	800cb48 <Get_channel>
 800cfc0:	4f20      	ldr	r7, [pc, #128]	; (800d044 <ReadADCChannel+0xb0>)
 800cfc2:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 800cfc4:	0031      	movs	r1, r6
 800cfc6:	0028      	movs	r0, r5
 800cfc8:	f7ff ff88 	bl	800cedc <Get_Rank>
 800cfcc:	4b1b      	ldr	r3, [pc, #108]	; (800d03c <ReadADCChannel+0xa8>)
 800cfce:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 800cfd0:	491d      	ldr	r1, [pc, #116]	; (800d048 <ReadADCChannel+0xb4>)
 800cfd2:	783b      	ldrb	r3, [r7, #0]
 800cfd4:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800cfd6:	2380      	movs	r3, #128	; 0x80
 800cfd8:	015b      	lsls	r3, r3, #5
 800cfda:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800cfe0:	481a      	ldr	r0, [pc, #104]	; (800d04c <ReadADCChannel+0xb8>)
 800cfe2:	f003 fb49 	bl	8010678 <HAL_ADC_ConfigChannel>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	d122      	bne.n	800d030 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 800cfea:	4d18      	ldr	r5, [pc, #96]	; (800d04c <ReadADCChannel+0xb8>)
 800cfec:	0028      	movs	r0, r5
 800cfee:	f003 fa8b 	bl	8010508 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800cff2:	2164      	movs	r1, #100	; 0x64
 800cff4:	0028      	movs	r0, r5
 800cff6:	f003 fad9 	bl	80105ac <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 800cffa:	0028      	movs	r0, r5
 800cffc:	f003 fb36 	bl	801066c <HAL_ADC_GetValue>
 800d000:	4b0e      	ldr	r3, [pc, #56]	; (800d03c <ReadADCChannel+0xa8>)
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	005b      	lsls	r3, r3, #1
 800d006:	4a0e      	ldr	r2, [pc, #56]	; (800d040 <ReadADCChannel+0xac>)
 800d008:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 800d00a:	0028      	movs	r0, r5
 800d00c:	f003 faac 	bl	8010568 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 800d010:	490d      	ldr	r1, [pc, #52]	; (800d048 <ReadADCChannel+0xb4>)
 800d012:	4b0c      	ldr	r3, [pc, #48]	; (800d044 <ReadADCChannel+0xb0>)
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 800d018:	4b0d      	ldr	r3, [pc, #52]	; (800d050 <ReadADCChannel+0xbc>)
 800d01a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800d01c:	2303      	movs	r3, #3
 800d01e:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800d020:	0028      	movs	r0, r5
 800d022:	f003 fb29 	bl	8010678 <HAL_ADC_ConfigChannel>
 800d026:	2800      	cmp	r0, #0
 800d028:	d0bc      	beq.n	800cfa4 <ReadADCChannel+0x10>
			Error_Handler();
 800d02a:	f7ff fdb1 	bl	800cb90 <Error_Handler>
 800d02e:	e7b9      	b.n	800cfa4 <ReadADCChannel+0x10>
			Error_Handler();
 800d030:	f7ff fdae 	bl	800cb90 <Error_Handler>
 800d034:	e7d9      	b.n	800cfea <ReadADCChannel+0x56>
 800d036:	46c0      	nop			; (mov r8, r8)
 800d038:	2000255e 	.word	0x2000255e
 800d03c:	2000256d 	.word	0x2000256d
 800d040:	20002564 	.word	0x20002564
 800d044:	2000256c 	.word	0x2000256c
 800d048:	200025fc 	.word	0x200025fc
 800d04c:	20006e6c 	.word	0x20006e6c
 800d050:	00001001 	.word	0x00001001

0800d054 <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 800d054:	4770      	bx	lr

0800d056 <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 800d056:	4770      	bx	lr

0800d058 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 800d058:	4770      	bx	lr

0800d05a <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 800d05a:	4770      	bx	lr

0800d05c <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 800d05c:	4770      	bx	lr
	...

0800d060 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 800d060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d062:	46de      	mov	lr, fp
 800d064:	4657      	mov	r7, sl
 800d066:	464e      	mov	r6, r9
 800d068:	4645      	mov	r5, r8
 800d06a:	b5e0      	push	{r5, r6, r7, lr}
 800d06c:	b089      	sub	sp, #36	; 0x24
 800d06e:	4dbd      	ldr	r5, [pc, #756]	; (800d364 <CheckAttachedButtons+0x304>)
 800d070:	3509      	adds	r5, #9
 800d072:	2404      	movs	r4, #4
 800d074:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 800d076:	2300      	movs	r3, #0
 800d078:	469b      	mov	fp, r3
 800d07a:	4699      	mov	r9, r3
 800d07c:	e111      	b.n	800d2a2 <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 800d07e:	230e      	movs	r3, #14
 800d080:	aa02      	add	r2, sp, #8
 800d082:	4694      	mov	ip, r2
 800d084:	4463      	add	r3, ip
 800d086:	8819      	ldrh	r1, [r3, #0]
 800d088:	2201      	movs	r2, #1
 800d08a:	9807      	ldr	r0, [sp, #28]
 800d08c:	f004 fcd6 	bl	8011a3c <HAL_GPIO_WritePin>
				Delay_us(10);
 800d090:	200a      	movs	r0, #10
 800d092:	f000 fdd1 	bl	800dc38 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 800d096:	ab05      	add	r3, sp, #20
 800d098:	8819      	ldrh	r1, [r3, #0]
 800d09a:	9806      	ldr	r0, [sp, #24]
 800d09c:	f004 fcc8 	bl	8011a30 <HAL_GPIO_ReadPin>
 800d0a0:	4681      	mov	r9, r0
 800d0a2:	e126      	b.n	800d2f2 <CheckAttachedButtons+0x292>
			switch (button[i].type) {
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d105      	bne.n	800d0b4 <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 800d0a8:	464b      	mov	r3, r9
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d046      	beq.n	800d13c <CheckAttachedButtons+0xdc>
				else if (connected == GPIO_PIN_RESET)
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d100      	bne.n	800d0b4 <CheckAttachedButtons+0x54>
 800d0b2:	e1c5      	b.n	800d440 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 800d0b4:	465b      	mov	r3, fp
 800d0b6:	2b04      	cmp	r3, #4
 800d0b8:	d001      	beq.n	800d0be <CheckAttachedButtons+0x5e>
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d107      	bne.n	800d0ce <CheckAttachedButtons+0x6e>
				if (pressCounter[i] < 0xFFFF)
 800d0be:	4baa      	ldr	r3, [pc, #680]	; (800d368 <CheckAttachedButtons+0x308>)
 800d0c0:	58e3      	ldr	r3, [r4, r3]
 800d0c2:	4aaa      	ldr	r2, [pc, #680]	; (800d36c <CheckAttachedButtons+0x30c>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d842      	bhi.n	800d14e <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 800d0c8:	3301      	adds	r3, #1
 800d0ca:	4aa7      	ldr	r2, [pc, #668]	; (800d368 <CheckAttachedButtons+0x308>)
 800d0cc:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 800d0ce:	23fd      	movs	r3, #253	; 0xfd
 800d0d0:	465a      	mov	r2, fp
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d100      	bne.n	800d0da <CheckAttachedButtons+0x7a>
 800d0d8:	e1b6      	b.n	800d448 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 800d0da:	4ba3      	ldr	r3, [pc, #652]	; (800d368 <CheckAttachedButtons+0x308>)
 800d0dc:	58e3      	ldr	r3, [r4, r3]
 800d0de:	4aa4      	ldr	r2, [pc, #656]	; (800d370 <CheckAttachedButtons+0x310>)
 800d0e0:	8812      	ldrh	r2, [r2, #0]
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d36f      	bcc.n	800d1c6 <CheckAttachedButtons+0x166>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800d0e6:	d045      	beq.n	800d174 <CheckAttachedButtons+0x114>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800d0e8:	4ba2      	ldr	r3, [pc, #648]	; (800d374 <CheckAttachedButtons+0x314>)
 800d0ea:	58e3      	ldr	r3, [r4, r3]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d202      	bcs.n	800d0f6 <CheckAttachedButtons+0x96>
					releaseCounter[i] = 0;
 800d0f0:	4ba0      	ldr	r3, [pc, #640]	; (800d374 <CheckAttachedButtons+0x314>)
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800d0f6:	4b9c      	ldr	r3, [pc, #624]	; (800d368 <CheckAttachedButtons+0x308>)
 800d0f8:	58e3      	ldr	r3, [r4, r3]
 800d0fa:	4a9d      	ldr	r2, [pc, #628]	; (800d370 <CheckAttachedButtons+0x310>)
 800d0fc:	8852      	ldrh	r2, [r2, #2]
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d952      	bls.n	800d1a8 <CheckAttachedButtons+0x148>
						&& pressCounter[i] < 500) {
 800d102:	22f4      	movs	r2, #244	; 0xf4
 800d104:	32ff      	adds	r2, #255	; 0xff
 800d106:	4293      	cmp	r3, r2
 800d108:	d84e      	bhi.n	800d1a8 <CheckAttachedButtons+0x148>
					if (clicked == 0)
 800d10a:	4b9b      	ldr	r3, [pc, #620]	; (800d378 <CheckAttachedButtons+0x318>)
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d137      	bne.n	800d182 <CheckAttachedButtons+0x122>
						clicked = 1;		// Record a possible single click
 800d112:	4b99      	ldr	r3, [pc, #612]	; (800d378 <CheckAttachedButtons+0x318>)
 800d114:	3af3      	subs	r2, #243	; 0xf3
 800d116:	3aff      	subs	r2, #255	; 0xff
 800d118:	701a      	strb	r2, [r3, #0]
 800d11a:	e054      	b.n	800d1c6 <CheckAttachedButtons+0x166>
				if (connected == GPIO_PIN_SET)
 800d11c:	464b      	mov	r3, r9
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d00f      	beq.n	800d142 <CheckAttachedButtons+0xe2>
				else if (connected == GPIO_PIN_RESET)
 800d122:	2b00      	cmp	r3, #0
 800d124:	d1c6      	bne.n	800d0b4 <CheckAttachedButtons+0x54>
					state = OPEN;
 800d126:	2303      	movs	r3, #3
 800d128:	469b      	mov	fp, r3
 800d12a:	e18d      	b.n	800d448 <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 800d12c:	464b      	mov	r3, r9
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d00a      	beq.n	800d148 <CheckAttachedButtons+0xe8>
				else if (connected == GPIO_PIN_RESET)
 800d132:	2b00      	cmp	r3, #0
 800d134:	d1be      	bne.n	800d0b4 <CheckAttachedButtons+0x54>
					state = OFF;
 800d136:	2301      	movs	r3, #1
 800d138:	469b      	mov	fp, r3
 800d13a:	e185      	b.n	800d448 <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 800d13c:	2304      	movs	r3, #4
 800d13e:	469b      	mov	fp, r3
 800d140:	e7bd      	b.n	800d0be <CheckAttachedButtons+0x5e>
					state = CLOSED;
 800d142:	2304      	movs	r3, #4
 800d144:	469b      	mov	fp, r3
 800d146:	e7ba      	b.n	800d0be <CheckAttachedButtons+0x5e>
 800d148:	2302      	movs	r3, #2
 800d14a:	469b      	mov	fp, r3
 800d14c:	e7b7      	b.n	800d0be <CheckAttachedButtons+0x5e>
					pressCounter[i] = 0;			// Reset debounce counter
 800d14e:	4b86      	ldr	r3, [pc, #536]	; (800d368 <CheckAttachedButtons+0x308>)
 800d150:	2200      	movs	r2, #0
 800d152:	50e2      	str	r2, [r4, r3]
 800d154:	e7bb      	b.n	800d0ce <CheckAttachedButtons+0x6e>
					releaseCounter[i] = 0;		// Reset debounce counter
 800d156:	4b87      	ldr	r3, [pc, #540]	; (800d374 <CheckAttachedButtons+0x314>)
 800d158:	2200      	movs	r2, #0
 800d15a:	50e2      	str	r2, [r4, r3]
 800d15c:	e17d      	b.n	800d45a <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 800d15e:	4b87      	ldr	r3, [pc, #540]	; (800d37c <CheckAttachedButtons+0x31c>)
 800d160:	5cf3      	ldrb	r3, [r6, r3]
 800d162:	4a83      	ldr	r2, [pc, #524]	; (800d370 <CheckAttachedButtons+0x310>)
 800d164:	7952      	ldrb	r2, [r2, #5]
 800d166:	429a      	cmp	r2, r3
 800d168:	d200      	bcs.n	800d16c <CheckAttachedButtons+0x10c>
 800d16a:	e182      	b.n	800d472 <CheckAttachedButtons+0x412>
					++dblCounter[i];
 800d16c:	3301      	adds	r3, #1
 800d16e:	4a83      	ldr	r2, [pc, #524]	; (800d37c <CheckAttachedButtons+0x31c>)
 800d170:	54b3      	strb	r3, [r6, r2]
 800d172:	e7b2      	b.n	800d0da <CheckAttachedButtons+0x7a>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 800d174:	2107      	movs	r1, #7
 800d176:	4640      	mov	r0, r8
 800d178:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 800d17a:	3301      	adds	r3, #1
 800d17c:	497a      	ldr	r1, [pc, #488]	; (800d368 <CheckAttachedButtons+0x308>)
 800d17e:	5063      	str	r3, [r4, r1]
 800d180:	e7b2      	b.n	800d0e8 <CheckAttachedButtons+0x88>
					else if (clicked == 2) {
 800d182:	2b02      	cmp	r3, #2
 800d184:	d11f      	bne.n	800d1c6 <CheckAttachedButtons+0x166>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 800d186:	4b7d      	ldr	r3, [pc, #500]	; (800d37c <CheckAttachedButtons+0x31c>)
 800d188:	5cf3      	ldrb	r3, [r6, r3]
 800d18a:	4a79      	ldr	r2, [pc, #484]	; (800d370 <CheckAttachedButtons+0x310>)
 800d18c:	7912      	ldrb	r2, [r2, #4]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d219      	bcs.n	800d1c6 <CheckAttachedButtons+0x166>
										< BOS.buttons.maxInterClickTime) {
 800d192:	4a77      	ldr	r2, [pc, #476]	; (800d370 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 800d194:	7952      	ldrb	r2, [r2, #5]
 800d196:	429a      	cmp	r2, r3
 800d198:	d915      	bls.n	800d1c6 <CheckAttachedButtons+0x166>
							clicked = 3;	// Record a possible double click
 800d19a:	4b77      	ldr	r3, [pc, #476]	; (800d378 <CheckAttachedButtons+0x318>)
 800d19c:	2203      	movs	r2, #3
 800d19e:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 800d1a0:	4b76      	ldr	r3, [pc, #472]	; (800d37c <CheckAttachedButtons+0x31c>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	54f2      	strb	r2, [r6, r3]
 800d1a6:	e00e      	b.n	800d1c6 <CheckAttachedButtons+0x166>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 800d1a8:	3bf5      	subs	r3, #245	; 0xf5
 800d1aa:	3bff      	subs	r3, #255	; 0xff
 800d1ac:	4a74      	ldr	r2, [pc, #464]	; (800d380 <CheckAttachedButtons+0x320>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d809      	bhi.n	800d1c6 <CheckAttachedButtons+0x166>
					if (clicked)
 800d1b2:	4b71      	ldr	r3, [pc, #452]	; (800d378 <CheckAttachedButtons+0x318>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <CheckAttachedButtons+0x160>
						clicked = 0;						// Cannot be a click
 800d1ba:	4b6f      	ldr	r3, [pc, #444]	; (800d378 <CheckAttachedButtons+0x318>)
 800d1bc:	2200      	movs	r2, #0
 800d1be:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800d1c0:	9803      	ldr	r0, [sp, #12]
 800d1c2:	f7ff f9a1 	bl	800c508 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800d1c6:	4b6b      	ldr	r3, [pc, #428]	; (800d374 <CheckAttachedButtons+0x314>)
 800d1c8:	58e3      	ldr	r3, [r4, r3]
 800d1ca:	4a69      	ldr	r2, [pc, #420]	; (800d370 <CheckAttachedButtons+0x310>)
 800d1cc:	8812      	ldrh	r2, [r2, #0]
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	d34d      	bcc.n	800d26e <CheckAttachedButtons+0x20e>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800d1d2:	d02b      	beq.n	800d22c <CheckAttachedButtons+0x1cc>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800d1d4:	4b64      	ldr	r3, [pc, #400]	; (800d368 <CheckAttachedButtons+0x308>)
 800d1d6:	58e3      	ldr	r3, [r4, r3]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d202      	bcs.n	800d1e2 <CheckAttachedButtons+0x182>
					pressCounter[i] = 0;
 800d1dc:	4b62      	ldr	r3, [pc, #392]	; (800d368 <CheckAttachedButtons+0x308>)
 800d1de:	2200      	movs	r2, #0
 800d1e0:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800d1e2:	4b64      	ldr	r3, [pc, #400]	; (800d374 <CheckAttachedButtons+0x314>)
 800d1e4:	58e3      	ldr	r3, [r4, r3]
 800d1e6:	4a62      	ldr	r2, [pc, #392]	; (800d370 <CheckAttachedButtons+0x310>)
 800d1e8:	8852      	ldrh	r2, [r2, #2]
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d93a      	bls.n	800d264 <CheckAttachedButtons+0x204>
						&& releaseCounter[i] < 500) {
 800d1ee:	22f4      	movs	r2, #244	; 0xf4
 800d1f0:	32ff      	adds	r2, #255	; 0xff
 800d1f2:	4293      	cmp	r3, r2
 800d1f4:	d836      	bhi.n	800d264 <CheckAttachedButtons+0x204>
					if (clicked == 1) {
 800d1f6:	4b60      	ldr	r3, [pc, #384]	; (800d378 <CheckAttachedButtons+0x318>)
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	2b01      	cmp	r3, #1
 800d1fc:	d01d      	beq.n	800d23a <CheckAttachedButtons+0x1da>
					} else if (clicked == 3) {
 800d1fe:	2b03      	cmp	r3, #3
 800d200:	d135      	bne.n	800d26e <CheckAttachedButtons+0x20e>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800d202:	3303      	adds	r3, #3
 800d204:	4642      	mov	r2, r8
 800d206:	7013      	strb	r3, [r2, #0]
						clicked = 0;			// Prepare for a single click
 800d208:	4b5b      	ldr	r3, [pc, #364]	; (800d378 <CheckAttachedButtons+0x318>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800d20e:	4b5d      	ldr	r3, [pc, #372]	; (800d384 <CheckAttachedButtons+0x324>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d13f      	bne.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800d216:	4643      	mov	r3, r8
 800d218:	7a1b      	ldrb	r3, [r3, #8]
 800d21a:	079b      	lsls	r3, r3, #30
 800d21c:	d53b      	bpl.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d21e:	4b59      	ldr	r3, [pc, #356]	; (800d384 <CheckAttachedButtons+0x324>)
 800d220:	2201      	movs	r2, #1
 800d222:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 800d224:	9803      	ldr	r0, [sp, #12]
 800d226:	f7ff ff17 	bl	800d058 <buttonDblClickedCallback>
 800d22a:	e034      	b.n	800d296 <CheckAttachedButtons+0x236>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 800d22c:	2108      	movs	r1, #8
 800d22e:	4640      	mov	r0, r8
 800d230:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 800d232:	3301      	adds	r3, #1
 800d234:	494f      	ldr	r1, [pc, #316]	; (800d374 <CheckAttachedButtons+0x314>)
 800d236:	5063      	str	r3, [r4, r1]
 800d238:	e7cc      	b.n	800d1d4 <CheckAttachedButtons+0x174>
						button[i].state = CLICKED;// Record a single button click event
 800d23a:	3304      	adds	r3, #4
 800d23c:	4642      	mov	r2, r8
 800d23e:	7013      	strb	r3, [r2, #0]
						clicked = 2;			// Prepare for a double click
 800d240:	4b4d      	ldr	r3, [pc, #308]	; (800d378 <CheckAttachedButtons+0x318>)
 800d242:	2202      	movs	r2, #2
 800d244:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800d246:	4b4f      	ldr	r3, [pc, #316]	; (800d384 <CheckAttachedButtons+0x324>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d123      	bne.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 800d24e:	4643      	mov	r3, r8
 800d250:	7a1b      	ldrb	r3, [r3, #8]
 800d252:	07db      	lsls	r3, r3, #31
 800d254:	d51f      	bpl.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d256:	4b4b      	ldr	r3, [pc, #300]	; (800d384 <CheckAttachedButtons+0x324>)
 800d258:	2201      	movs	r2, #1
 800d25a:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 800d25c:	9803      	ldr	r0, [sp, #12]
 800d25e:	f7ff fefa 	bl	800d056 <buttonClickedCallback>
 800d262:	e018      	b.n	800d296 <CheckAttachedButtons+0x236>
						&& releaseCounter[i] < 0xFFFF) {
 800d264:	3bf5      	subs	r3, #245	; 0xf5
 800d266:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 800d268:	4a45      	ldr	r2, [pc, #276]	; (800d380 <CheckAttachedButtons+0x320>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d909      	bls.n	800d282 <CheckAttachedButtons+0x222>
			switch (button[i].state) {
 800d26e:	4643      	mov	r3, r8
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	3b05      	subs	r3, #5
 800d274:	b2da      	uxtb	r2, r3
 800d276:	2a09      	cmp	r2, #9
 800d278:	d80d      	bhi.n	800d296 <CheckAttachedButtons+0x236>
 800d27a:	0093      	lsls	r3, r2, #2
 800d27c:	4a42      	ldr	r2, [pc, #264]	; (800d388 <CheckAttachedButtons+0x328>)
 800d27e:	58d3      	ldr	r3, [r2, r3]
 800d280:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 800d282:	9803      	ldr	r0, [sp, #12]
 800d284:	f7ff f97e 	bl	800c584 <CheckForTimedButtonRelease>
 800d288:	e7f1      	b.n	800d26e <CheckAttachedButtons+0x20e>
				buttonPressedCallback(i);
 800d28a:	9803      	ldr	r0, [sp, #12]
 800d28c:	f7ff f93a 	bl	800c504 <buttonPressedCallback>
				button[i].state = NONE;
 800d290:	2300      	movs	r3, #0
 800d292:	4642      	mov	r2, r8
 800d294:	7013      	strb	r3, [r2, #0]
 800d296:	3601      	adds	r6, #1
 800d298:	3509      	adds	r5, #9
 800d29a:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 800d29c:	2c1c      	cmp	r4, #28
 800d29e:	d100      	bne.n	800d2a2 <CheckAttachedButtons+0x242>
 800d2a0:	e0ed      	b.n	800d47e <CheckAttachedButtons+0x41e>
 800d2a2:	b2f3      	uxtb	r3, r6
 800d2a4:	9303      	str	r3, [sp, #12]
 800d2a6:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 800d2a8:	786b      	ldrb	r3, [r5, #1]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0f3      	beq.n	800d296 <CheckAttachedButtons+0x236>
			if (delayButtonStateReset == false)
 800d2ae:	4b35      	ldr	r3, [pc, #212]	; (800d384 <CheckAttachedButtons+0x324>)
 800d2b0:	781b      	ldrb	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d100      	bne.n	800d2b8 <CheckAttachedButtons+0x258>
				button[i].state = NONE;
 800d2b6:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 800d2b8:	230e      	movs	r3, #14
 800d2ba:	aa02      	add	r2, sp, #8
 800d2bc:	4694      	mov	ip, r2
 800d2be:	4463      	add	r3, ip
 800d2c0:	469a      	mov	sl, r3
 800d2c2:	af05      	add	r7, sp, #20
 800d2c4:	9700      	str	r7, [sp, #0]
 800d2c6:	ab06      	add	r3, sp, #24
 800d2c8:	4652      	mov	r2, sl
 800d2ca:	a907      	add	r1, sp, #28
 800d2cc:	9803      	ldr	r0, [sp, #12]
 800d2ce:	f7fe ffa3 	bl	800c218 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d2d2:	4653      	mov	r3, sl
 800d2d4:	8819      	ldrh	r1, [r3, #0]
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	9807      	ldr	r0, [sp, #28]
 800d2da:	f004 fbaf 	bl	8011a3c <HAL_GPIO_WritePin>
			Delay_us(10);
 800d2de:	200a      	movs	r0, #10
 800d2e0:	f000 fcaa 	bl	800dc38 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800d2e4:	8839      	ldrh	r1, [r7, #0]
 800d2e6:	9806      	ldr	r0, [sp, #24]
 800d2e8:	f004 fba2 	bl	8011a30 <HAL_GPIO_ReadPin>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d100      	bne.n	800d2f2 <CheckAttachedButtons+0x292>
 800d2f0:	e6c5      	b.n	800d07e <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800d2f2:	230e      	movs	r3, #14
 800d2f4:	aa02      	add	r2, sp, #8
 800d2f6:	4694      	mov	ip, r2
 800d2f8:	4463      	add	r3, ip
 800d2fa:	8819      	ldrh	r1, [r3, #0]
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	9807      	ldr	r0, [sp, #28]
 800d300:	f004 fb9c 	bl	8011a3c <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800d304:	4643      	mov	r3, r8
 800d306:	785b      	ldrb	r3, [r3, #1]
 800d308:	2b02      	cmp	r3, #2
 800d30a:	d100      	bne.n	800d30e <CheckAttachedButtons+0x2ae>
 800d30c:	e706      	b.n	800d11c <CheckAttachedButtons+0xbc>
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	2a02      	cmp	r2, #2
 800d312:	d800      	bhi.n	800d316 <CheckAttachedButtons+0x2b6>
 800d314:	e6c6      	b.n	800d0a4 <CheckAttachedButtons+0x44>
 800d316:	2b03      	cmp	r3, #3
 800d318:	d100      	bne.n	800d31c <CheckAttachedButtons+0x2bc>
 800d31a:	e707      	b.n	800d12c <CheckAttachedButtons+0xcc>
 800d31c:	2b04      	cmp	r3, #4
 800d31e:	d000      	beq.n	800d322 <CheckAttachedButtons+0x2c2>
 800d320:	e6c8      	b.n	800d0b4 <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 800d322:	464b      	mov	r3, r9
 800d324:	2b01      	cmp	r3, #1
 800d326:	d100      	bne.n	800d32a <CheckAttachedButtons+0x2ca>
 800d328:	e08d      	b.n	800d446 <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d000      	beq.n	800d330 <CheckAttachedButtons+0x2d0>
 800d32e:	e6c1      	b.n	800d0b4 <CheckAttachedButtons+0x54>
 800d330:	2302      	movs	r3, #2
 800d332:	469b      	mov	fp, r3
 800d334:	e6c3      	b.n	800d0be <CheckAttachedButtons+0x5e>
				buttonReleasedCallback(i);
 800d336:	9803      	ldr	r0, [sp, #12]
 800d338:	f7ff fe8c 	bl	800d054 <buttonReleasedCallback>
				button[i].state = NONE;
 800d33c:	2300      	movs	r3, #0
 800d33e:	4642      	mov	r2, r8
 800d340:	7013      	strb	r3, [r2, #0]
				break;
 800d342:	e7a8      	b.n	800d296 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800d344:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <CheckAttachedButtons+0x324>)
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1a4      	bne.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 800d34c:	4643      	mov	r3, r8
 800d34e:	7a1b      	ldrb	r3, [r3, #8]
 800d350:	075b      	lsls	r3, r3, #29
 800d352:	d5a0      	bpl.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d354:	4b0b      	ldr	r3, [pc, #44]	; (800d384 <CheckAttachedButtons+0x324>)
 800d356:	2201      	movs	r2, #1
 800d358:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 800d35a:	2101      	movs	r1, #1
 800d35c:	9803      	ldr	r0, [sp, #12]
 800d35e:	f7ff fe7c 	bl	800d05a <buttonPressedForXCallback>
 800d362:	e798      	b.n	800d296 <CheckAttachedButtons+0x236>
 800d364:	20002570 	.word	0x20002570
 800d368:	200025c4 	.word	0x200025c4
 800d36c:	0000fffe 	.word	0x0000fffe
 800d370:	20006a0c 	.word	0x20006a0c
 800d374:	200025e0 	.word	0x200025e0
 800d378:	200025af 	.word	0x200025af
 800d37c:	200025b4 	.word	0x200025b4
 800d380:	0000fe0a 	.word	0x0000fe0a
 800d384:	200025bb 	.word	0x200025bb
 800d388:	0801b5c8 	.word	0x0801b5c8
				if (!delayButtonStateReset
 800d38c:	4b3f      	ldr	r3, [pc, #252]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d000      	beq.n	800d396 <CheckAttachedButtons+0x336>
 800d394:	e77f      	b.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 800d396:	4643      	mov	r3, r8
 800d398:	7a1b      	ldrb	r3, [r3, #8]
 800d39a:	071b      	lsls	r3, r3, #28
 800d39c:	d400      	bmi.n	800d3a0 <CheckAttachedButtons+0x340>
 800d39e:	e77a      	b.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d3a0:	4b3a      	ldr	r3, [pc, #232]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 800d3a6:	2102      	movs	r1, #2
 800d3a8:	9803      	ldr	r0, [sp, #12]
 800d3aa:	f7ff fe56 	bl	800d05a <buttonPressedForXCallback>
 800d3ae:	e772      	b.n	800d296 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800d3b0:	4b36      	ldr	r3, [pc, #216]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d3b2:	781b      	ldrb	r3, [r3, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d000      	beq.n	800d3ba <CheckAttachedButtons+0x35a>
 800d3b8:	e76d      	b.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 800d3ba:	4643      	mov	r3, r8
 800d3bc:	7a1b      	ldrb	r3, [r3, #8]
 800d3be:	06db      	lsls	r3, r3, #27
 800d3c0:	d400      	bmi.n	800d3c4 <CheckAttachedButtons+0x364>
 800d3c2:	e768      	b.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d3c4:	4b31      	ldr	r3, [pc, #196]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d3c6:	2201      	movs	r2, #1
 800d3c8:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 800d3ca:	2103      	movs	r1, #3
 800d3cc:	9803      	ldr	r0, [sp, #12]
 800d3ce:	f7ff fe44 	bl	800d05a <buttonPressedForXCallback>
 800d3d2:	e760      	b.n	800d296 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800d3d4:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d3d6:	781b      	ldrb	r3, [r3, #0]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d000      	beq.n	800d3de <CheckAttachedButtons+0x37e>
 800d3dc:	e75b      	b.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 800d3de:	4643      	mov	r3, r8
 800d3e0:	7a1b      	ldrb	r3, [r3, #8]
 800d3e2:	069b      	lsls	r3, r3, #26
 800d3e4:	d400      	bmi.n	800d3e8 <CheckAttachedButtons+0x388>
 800d3e6:	e756      	b.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d3e8:	4b28      	ldr	r3, [pc, #160]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 800d3ee:	2101      	movs	r1, #1
 800d3f0:	9803      	ldr	r0, [sp, #12]
 800d3f2:	f7ff fe33 	bl	800d05c <buttonReleasedForYCallback>
 800d3f6:	e74e      	b.n	800d296 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800d3f8:	4b24      	ldr	r3, [pc, #144]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d000      	beq.n	800d402 <CheckAttachedButtons+0x3a2>
 800d400:	e749      	b.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800d402:	4643      	mov	r3, r8
 800d404:	7a1b      	ldrb	r3, [r3, #8]
 800d406:	065b      	lsls	r3, r3, #25
 800d408:	d400      	bmi.n	800d40c <CheckAttachedButtons+0x3ac>
 800d40a:	e744      	b.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d40c:	4b1f      	ldr	r3, [pc, #124]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d40e:	2201      	movs	r2, #1
 800d410:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800d412:	2102      	movs	r1, #2
 800d414:	9803      	ldr	r0, [sp, #12]
 800d416:	f7ff fe21 	bl	800d05c <buttonReleasedForYCallback>
 800d41a:	e73c      	b.n	800d296 <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800d41c:	4b1b      	ldr	r3, [pc, #108]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d41e:	781b      	ldrb	r3, [r3, #0]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d000      	beq.n	800d426 <CheckAttachedButtons+0x3c6>
 800d424:	e737      	b.n	800d296 <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800d426:	4643      	mov	r3, r8
 800d428:	7a1b      	ldrb	r3, [r3, #8]
 800d42a:	2b7f      	cmp	r3, #127	; 0x7f
 800d42c:	d800      	bhi.n	800d430 <CheckAttachedButtons+0x3d0>
 800d42e:	e732      	b.n	800d296 <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800d430:	4b16      	ldr	r3, [pc, #88]	; (800d48c <CheckAttachedButtons+0x42c>)
 800d432:	2201      	movs	r2, #1
 800d434:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800d436:	2103      	movs	r1, #3
 800d438:	9803      	ldr	r0, [sp, #12]
 800d43a:	f7ff fe0f 	bl	800d05c <buttonReleasedForYCallback>
 800d43e:	e72a      	b.n	800d296 <CheckAttachedButtons+0x236>
					state = OPEN;
 800d440:	2303      	movs	r3, #3
 800d442:	469b      	mov	fp, r3
 800d444:	e000      	b.n	800d448 <CheckAttachedButtons+0x3e8>
					state = OFF;
 800d446:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 800d448:	4b11      	ldr	r3, [pc, #68]	; (800d490 <CheckAttachedButtons+0x430>)
 800d44a:	58e3      	ldr	r3, [r4, r3]
 800d44c:	4a11      	ldr	r2, [pc, #68]	; (800d494 <CheckAttachedButtons+0x434>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d900      	bls.n	800d454 <CheckAttachedButtons+0x3f4>
 800d452:	e680      	b.n	800d156 <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 800d454:	3301      	adds	r3, #1
 800d456:	4a0e      	ldr	r2, [pc, #56]	; (800d490 <CheckAttachedButtons+0x430>)
 800d458:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 800d45a:	4b0f      	ldr	r3, [pc, #60]	; (800d498 <CheckAttachedButtons+0x438>)
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	2b02      	cmp	r3, #2
 800d460:	d100      	bne.n	800d464 <CheckAttachedButtons+0x404>
 800d462:	e67c      	b.n	800d15e <CheckAttachedButtons+0xfe>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 800d464:	4b0d      	ldr	r3, [pc, #52]	; (800d49c <CheckAttachedButtons+0x43c>)
 800d466:	5cf2      	ldrb	r2, [r6, r3]
 800d468:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <CheckAttachedButtons+0x440>)
 800d46a:	795b      	ldrb	r3, [r3, #5]
 800d46c:	429a      	cmp	r2, r3
 800d46e:	d800      	bhi.n	800d472 <CheckAttachedButtons+0x412>
 800d470:	e633      	b.n	800d0da <CheckAttachedButtons+0x7a>
					clicked = 0;
 800d472:	2300      	movs	r3, #0
 800d474:	4a08      	ldr	r2, [pc, #32]	; (800d498 <CheckAttachedButtons+0x438>)
 800d476:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 800d478:	4a08      	ldr	r2, [pc, #32]	; (800d49c <CheckAttachedButtons+0x43c>)
 800d47a:	54b3      	strb	r3, [r6, r2]
 800d47c:	e62d      	b.n	800d0da <CheckAttachedButtons+0x7a>
}
 800d47e:	b009      	add	sp, #36	; 0x24
 800d480:	bc3c      	pop	{r2, r3, r4, r5}
 800d482:	4690      	mov	r8, r2
 800d484:	4699      	mov	r9, r3
 800d486:	46a2      	mov	sl, r4
 800d488:	46ab      	mov	fp, r5
 800d48a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d48c:	200025bb 	.word	0x200025bb
 800d490:	200025e0 	.word	0x200025e0
 800d494:	0000fffe 	.word	0x0000fffe
 800d498:	200025af 	.word	0x200025af
 800d49c:	200025b4 	.word	0x200025b4
 800d4a0:	20006a0c 	.word	0x20006a0c

0800d4a4 <NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	4b03      	ldr	r3, [pc, #12]	; (800d4b8 <NVIC_SystemReset+0x14>)
 800d4aa:	4a04      	ldr	r2, [pc, #16]	; (800d4bc <NVIC_SystemReset+0x18>)
 800d4ac:	60da      	str	r2, [r3, #12]
 800d4ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800d4b2:	46c0      	nop			; (mov r8, r8)
 800d4b4:	e7fd      	b.n	800d4b2 <NVIC_SystemReset+0xe>
 800d4b6:	46c0      	nop			; (mov r8, r8)
 800d4b8:	e000ed00 	.word	0xe000ed00
 800d4bc:	05fa0004 	.word	0x05fa0004

0800d4c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d4c0:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d4c2:	f002 fe91 	bl	80101e8 <HAL_IncTick>
  osSystickHandler();  
 800d4c6:	f000 ffbf 	bl	800e448 <osSystickHandler>

}
 800d4ca:	bd10      	pop	{r4, pc}

0800d4cc <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800d4cc:	b530      	push	{r4, r5, lr}
 800d4ce:	b083      	sub	sp, #12
	/* Loop here */
	uint8_t* error_message = "HardFault Error\r\n";
	writePxMutex(PcPort, (char*) error_message, 17, 0xff, 0xff);
 800d4d0:	4d09      	ldr	r5, [pc, #36]	; (800d4f8 <HardFault_Handler+0x2c>)
 800d4d2:	7828      	ldrb	r0, [r5, #0]
 800d4d4:	24ff      	movs	r4, #255	; 0xff
 800d4d6:	9400      	str	r4, [sp, #0]
 800d4d8:	23ff      	movs	r3, #255	; 0xff
 800d4da:	2211      	movs	r2, #17
 800d4dc:	4907      	ldr	r1, [pc, #28]	; (800d4fc <HardFault_Handler+0x30>)
 800d4de:	f000 fdb9 	bl	800e054 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d4e2:	4b07      	ldr	r3, [pc, #28]	; (800d500 <HardFault_Handler+0x34>)
 800d4e4:	6819      	ldr	r1, [r3, #0]
 800d4e6:	7828      	ldrb	r0, [r5, #0]
 800d4e8:	9400      	str	r4, [sp, #0]
 800d4ea:	23ff      	movs	r3, #255	; 0xff
 800d4ec:	220f      	movs	r2, #15
 800d4ee:	f000 fdb1 	bl	800e054 <writePxMutex>
	NVIC_SystemReset();
 800d4f2:	f7ff ffd7 	bl	800d4a4 <NVIC_SystemReset>
 800d4f6:	46c0      	nop			; (mov r8, r8)
 800d4f8:	2000118a 	.word	0x2000118a
 800d4fc:	0801b5f0 	.word	0x0801b5f0
 800d500:	20000100 	.word	0x20000100

0800d504 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d504:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d506:	4802      	ldr	r0, [pc, #8]	; (800d510 <USART1_IRQHandler+0xc>)
 800d508:	f006 f9cd 	bl	80138a6 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d50c:	bd10      	pop	{r4, pc}
 800d50e:	46c0      	nop			; (mov r8, r8)
 800d510:	20006c24 	.word	0x20006c24

0800d514 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d514:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d516:	4802      	ldr	r0, [pc, #8]	; (800d520 <USART2_IRQHandler+0xc>)
 800d518:	f006 f9c5 	bl	80138a6 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d51c:	bd10      	pop	{r4, pc}
 800d51e:	46c0      	nop			; (mov r8, r8)
 800d520:	20006d8c 	.word	0x20006d8c

0800d524 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d524:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d526:	4806      	ldr	r0, [pc, #24]	; (800d540 <USART3_8_IRQHandler+0x1c>)
 800d528:	f006 f9bd 	bl	80138a6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d52c:	4805      	ldr	r0, [pc, #20]	; (800d544 <USART3_8_IRQHandler+0x20>)
 800d52e:	f006 f9ba 	bl	80138a6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d532:	4805      	ldr	r0, [pc, #20]	; (800d548 <USART3_8_IRQHandler+0x24>)
 800d534:	f006 f9b7 	bl	80138a6 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d538:	4804      	ldr	r0, [pc, #16]	; (800d54c <USART3_8_IRQHandler+0x28>)
 800d53a:	f006 f9b4 	bl	80138a6 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d53e:	bd10      	pop	{r4, pc}
 800d540:	20006b34 	.word	0x20006b34
 800d544:	20006d18 	.word	0x20006d18
 800d548:	20006bac 	.word	0x20006bac
 800d54c:	20006c9c 	.word	0x20006c9c

0800d550 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d550:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d552:	2001      	movs	r0, #1
 800d554:	f7f9 feb4 	bl	80072c0 <DMA_IRQHandler>
	
}
 800d558:	bd10      	pop	{r4, pc}
	...

0800d55c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d55c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d55e:	4b0c      	ldr	r3, [pc, #48]	; (800d590 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	06db      	lsls	r3, r3, #27
 800d564:	d408      	bmi.n	800d578 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d566:	4b0b      	ldr	r3, [pc, #44]	; (800d594 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	05db      	lsls	r3, r3, #23
 800d56c:	d408      	bmi.n	800d580 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d56e:	4b09      	ldr	r3, [pc, #36]	; (800d594 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	06db      	lsls	r3, r3, #27
 800d574:	d408      	bmi.n	800d588 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800d576:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800d578:	2005      	movs	r0, #5
 800d57a:	f7f9 fea1 	bl	80072c0 <DMA_IRQHandler>
 800d57e:	e7fa      	b.n	800d576 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800d580:	2002      	movs	r0, #2
 800d582:	f7f9 fe9d 	bl	80072c0 <DMA_IRQHandler>
 800d586:	e7f6      	b.n	800d576 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d588:	4803      	ldr	r0, [pc, #12]	; (800d598 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d58a:	f003 fb3f 	bl	8010c0c <HAL_DMA_IRQHandler>
}
 800d58e:	e7f2      	b.n	800d576 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800d590:	40020400 	.word	0x40020400
 800d594:	40020000 	.word	0x40020000
 800d598:	20002364 	.word	0x20002364

0800d59c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d59c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d59e:	4b14      	ldr	r3, [pc, #80]	; (800d5f0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	03db      	lsls	r3, r3, #15
 800d5a4:	d413      	bmi.n	800d5ce <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d5a6:	4b12      	ldr	r3, [pc, #72]	; (800d5f0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	02db      	lsls	r3, r3, #11
 800d5ac:	d413      	bmi.n	800d5d6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d5ae:	4b11      	ldr	r3, [pc, #68]	; (800d5f4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	05db      	lsls	r3, r3, #23
 800d5b4:	d413      	bmi.n	800d5de <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d5b6:	4b0e      	ldr	r3, [pc, #56]	; (800d5f0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	04db      	lsls	r3, r3, #19
 800d5bc:	d413      	bmi.n	800d5e6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d5be:	4b0c      	ldr	r3, [pc, #48]	; (800d5f0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	01db      	lsls	r3, r3, #7
 800d5c4:	d506      	bpl.n	800d5d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d5c6:	480c      	ldr	r0, [pc, #48]	; (800d5f8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d5c8:	f003 fb20 	bl	8010c0c <HAL_DMA_IRQHandler>
	}
}
 800d5cc:	e002      	b.n	800d5d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d5ce:	2003      	movs	r0, #3
 800d5d0:	f7f9 fe76 	bl	80072c0 <DMA_IRQHandler>
}
 800d5d4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d5d6:	2004      	movs	r0, #4
 800d5d8:	f7f9 fe72 	bl	80072c0 <DMA_IRQHandler>
 800d5dc:	e7fa      	b.n	800d5d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d5de:	2006      	movs	r0, #6
 800d5e0:	f7f9 fe6e 	bl	80072c0 <DMA_IRQHandler>
 800d5e4:	e7f6      	b.n	800d5d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d5e6:	4805      	ldr	r0, [pc, #20]	; (800d5fc <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d5e8:	f003 fb10 	bl	8010c0c <HAL_DMA_IRQHandler>
 800d5ec:	e7f2      	b.n	800d5d4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d5ee:	46c0      	nop			; (mov r8, r8)
 800d5f0:	40020000 	.word	0x40020000
 800d5f4:	40020400 	.word	0x40020400
 800d5f8:	200023d4 	.word	0x200023d4
 800d5fc:	2000239c 	.word	0x2000239c

0800d600 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d600:	b510      	push	{r4, lr}
 800d602:	b082      	sub	sp, #8
 800d604:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d606:	2300      	movs	r3, #0
 800d608:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d60a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d610:	f7fd fd9c 	bl	800b14c <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d614:	0020      	movs	r0, r4
 800d616:	f7fd fbef 	bl	800adf8 <GetPort>
 800d61a:	0080      	lsls	r0, r0, #2
 800d61c:	4b03      	ldr	r3, [pc, #12]	; (800d62c <HAL_UART_TxCpltCallback+0x2c>)
 800d61e:	58c0      	ldr	r0, [r0, r3]
 800d620:	a901      	add	r1, sp, #4
 800d622:	f001 fa4f 	bl	800eac4 <xQueueGiveFromISR>
}
 800d626:	b002      	add	sp, #8
 800d628:	bd10      	pop	{r4, pc}
 800d62a:	46c0      	nop			; (mov r8, r8)
 800d62c:	20006a90 	.word	0x20006a90

0800d630 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d630:	b510      	push	{r4, lr}
 800d632:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d634:	2369      	movs	r3, #105	; 0x69
 800d636:	2201      	movs	r2, #1
 800d638:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d63a:	f7fd fbdd 	bl	800adf8 <GetPort>
	if (portStatus[port] == STREAM) {
 800d63e:	4b0c      	ldr	r3, [pc, #48]	; (800d670 <HAL_UART_ErrorCallback+0x40>)
 800d640:	5c1b      	ldrb	r3, [r3, r0]
 800d642:	2b02      	cmp	r3, #2
 800d644:	d005      	beq.n	800d652 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d646:	4b0b      	ldr	r3, [pc, #44]	; (800d674 <HAL_UART_ErrorCallback+0x44>)
 800d648:	1818      	adds	r0, r3, r0
 800d64a:	3801      	subs	r0, #1
 800d64c:	2301      	movs	r3, #1
 800d64e:	7003      	strb	r3, [r0, #0]
	}	
}
 800d650:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	b292      	uxth	r2, r2
 800d65a:	3801      	subs	r0, #1
 800d65c:	0080      	lsls	r0, r0, #2
 800d65e:	4b06      	ldr	r3, [pc, #24]	; (800d678 <HAL_UART_ErrorCallback+0x48>)
 800d660:	58c3      	ldr	r3, [r0, r3]
 800d662:	6819      	ldr	r1, [r3, #0]
 800d664:	3128      	adds	r1, #40	; 0x28
 800d666:	0020      	movs	r0, r4
 800d668:	f005 fd24 	bl	80130b4 <HAL_UART_Receive_DMA>
 800d66c:	e7f0      	b.n	800d650 <HAL_UART_ErrorCallback+0x20>
 800d66e:	46c0      	nop			; (mov r8, r8)
 800d670:	20001814 	.word	0x20001814
 800d674:	200019e8 	.word	0x200019e8
 800d678:	20001ed0 	.word	0x20001ed0

0800d67c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800d67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d67e:	46de      	mov	lr, fp
 800d680:	4657      	mov	r7, sl
 800d682:	464e      	mov	r6, r9
 800d684:	4645      	mov	r5, r8
 800d686:	b5e0      	push	{r5, r6, r7, lr}
 800d688:	0004      	movs	r4, r0
	uint8_t port_number = GetPort(huart);
 800d68a:	f7fd fbb5 	bl	800adf8 <GetPort>
	uint8_t port_index = port_number - 1;
 800d68e:	1e43      	subs	r3, r0, #1
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d690:	b2db      	uxtb	r3, r3
 800d692:	4a69      	ldr	r2, [pc, #420]	; (800d838 <HAL_UART_RxCpltCallback+0x1bc>)
 800d694:	5cd2      	ldrb	r2, [r2, r3]
 800d696:	2a0d      	cmp	r2, #13
 800d698:	d010      	beq.n	800d6bc <HAL_UART_RxCpltCallback+0x40>

		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
		Activate_CLI_For_First_Time_Flag = 1;

	}
	else if(portStatus[port_number] == CLI)
 800d69a:	0005      	movs	r5, r0
 800d69c:	4967      	ldr	r1, [pc, #412]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d69e:	5c09      	ldrb	r1, [r1, r0]
 800d6a0:	2903      	cmp	r1, #3
 800d6a2:	d02f      	beq.n	800d704 <HAL_UART_RxCpltCallback+0x88>
	{
		Read_In_CLI_Task_Flag = 1;
	}

	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d6a4:	2a48      	cmp	r2, #72	; 0x48
 800d6a6:	d040      	beq.n	800d72a <HAL_UART_RxCpltCallback+0xae>
	{
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
	}

	else if(Rx_Data[port_index] == 'Z' && portStatus[port_number] == H_Status)
 800d6a8:	2a5a      	cmp	r2, #90	; 0x5a
 800d6aa:	d000      	beq.n	800d6ae <HAL_UART_RxCpltCallback+0x32>
 800d6ac:	e0a0      	b.n	800d7f0 <HAL_UART_RxCpltCallback+0x174>
 800d6ae:	2907      	cmp	r1, #7
 800d6b0:	d000      	beq.n	800d6b4 <HAL_UART_RxCpltCallback+0x38>
 800d6b2:	e09f      	b.n	800d7f4 <HAL_UART_RxCpltCallback+0x178>
	{
		portStatus[port_number] =Z_Status; // Z  Character was received, waiting for length byte.
 800d6b4:	4b61      	ldr	r3, [pc, #388]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d6b6:	3a52      	subs	r2, #82	; 0x52
 800d6b8:	541a      	strb	r2, [r3, r0]
 800d6ba:	e026      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
	if(Rx_Data[port_index] == 0x0D && portStatus[port_number] == FREE)
 800d6bc:	495f      	ldr	r1, [pc, #380]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d6be:	5c09      	ldrb	r1, [r1, r0]
 800d6c0:	2900      	cmp	r1, #0
 800d6c2:	d000      	beq.n	800d6c6 <HAL_UART_RxCpltCallback+0x4a>
 800d6c4:	e08e      	b.n	800d7e4 <HAL_UART_RxCpltCallback+0x168>
		for(int i=0;i<=NumOfPorts;i++) portStatus[i] = FREE; // Free all ports
 800d6c6:	4b5d      	ldr	r3, [pc, #372]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	701a      	strb	r2, [r3, #0]
 800d6cc:	705a      	strb	r2, [r3, #1]
 800d6ce:	709a      	strb	r2, [r3, #2]
 800d6d0:	70da      	strb	r2, [r3, #3]
 800d6d2:	711a      	strb	r2, [r3, #4]
 800d6d4:	715a      	strb	r2, [r3, #5]
 800d6d6:	719a      	strb	r2, [r3, #6]
		portStatus[port_number] =CLI; // Continue the CLI session on this port
 800d6d8:	3203      	adds	r2, #3
 800d6da:	541a      	strb	r2, [r3, r0]
		PcPort = port_number;
 800d6dc:	4b58      	ldr	r3, [pc, #352]	; (800d840 <HAL_UART_RxCpltCallback+0x1c4>)
 800d6de:	7018      	strb	r0, [r3, #0]
		xTaskNotifyGive(xCommandConsoleTaskHandle);
 800d6e0:	4b58      	ldr	r3, [pc, #352]	; (800d844 <HAL_UART_RxCpltCallback+0x1c8>)
 800d6e2:	6818      	ldr	r0, [r3, #0]
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	3a01      	subs	r2, #1
 800d6e8:	f002 f9b2 	bl	800fa50 <xTaskGenericNotify>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d6ec:	4b56      	ldr	r3, [pc, #344]	; (800d848 <HAL_UART_RxCpltCallback+0x1cc>)
 800d6ee:	781b      	ldrb	r3, [r3, #0]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d003      	beq.n	800d6fc <HAL_UART_RxCpltCallback+0x80>
		Activate_CLI_For_First_Time_Flag = 1;
 800d6f4:	4b54      	ldr	r3, [pc, #336]	; (800d848 <HAL_UART_RxCpltCallback+0x1cc>)
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	701a      	strb	r2, [r3, #0]
 800d6fa:	e006      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
		if(Activate_CLI_For_First_Time_Flag == 1) Read_In_CLI_Task_Flag = 1;
 800d6fc:	4b53      	ldr	r3, [pc, #332]	; (800d84c <HAL_UART_RxCpltCallback+0x1d0>)
 800d6fe:	2201      	movs	r2, #1
 800d700:	701a      	strb	r2, [r3, #0]
 800d702:	e7f7      	b.n	800d6f4 <HAL_UART_RxCpltCallback+0x78>
		Read_In_CLI_Task_Flag = 1;
 800d704:	4b51      	ldr	r3, [pc, #324]	; (800d84c <HAL_UART_RxCpltCallback+0x1d0>)
 800d706:	2201      	movs	r2, #1
 800d708:	701a      	strb	r2, [r3, #0]
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
			portStatus[port_number] =FREE; // End of receiving message.
		}
	}

		HAL_UART_Receive_DMA(huart,(uint8_t* )&Rx_Data[GetPort(huart) - 1] , 1);
 800d70a:	0020      	movs	r0, r4
 800d70c:	f7fd fb74 	bl	800adf8 <GetPort>
 800d710:	1e41      	subs	r1, r0, #1
 800d712:	4849      	ldr	r0, [pc, #292]	; (800d838 <HAL_UART_RxCpltCallback+0x1bc>)
 800d714:	1809      	adds	r1, r1, r0
 800d716:	2201      	movs	r2, #1
 800d718:	0020      	movs	r0, r4
 800d71a:	f005 fccb 	bl	80130b4 <HAL_UART_Receive_DMA>
}
 800d71e:	bc3c      	pop	{r2, r3, r4, r5}
 800d720:	4690      	mov	r8, r2
 800d722:	4699      	mov	r9, r3
 800d724:	46a2      	mov	sl, r4
 800d726:	46ab      	mov	fp, r5
 800d728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(Rx_Data[port_index] == 'H' && portStatus[port_number] == FREE)
 800d72a:	2900      	cmp	r1, #0
 800d72c:	d160      	bne.n	800d7f0 <HAL_UART_RxCpltCallback+0x174>
		portStatus[port_number] =H_Status; // H  Character was received, waiting for Z character.
 800d72e:	4b43      	ldr	r3, [pc, #268]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d730:	3a41      	subs	r2, #65	; 0x41
 800d732:	541a      	strb	r2, [r3, r0]
 800d734:	e7e9      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
		portStatus[port_number] =FREE; // Z  Character was not received, so there is no message to receive.
 800d736:	4b41      	ldr	r3, [pc, #260]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d738:	2200      	movs	r2, #0
 800d73a:	555a      	strb	r2, [r3, r5]
 800d73c:	e7e5      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
		portStatus[port_number] =MSG; // Receive length byte.
 800d73e:	493f      	ldr	r1, [pc, #252]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d740:	2001      	movs	r0, #1
 800d742:	5548      	strb	r0, [r1, r5]
		MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][2] = Rx_Data[port_index];
 800d744:	4942      	ldr	r1, [pc, #264]	; (800d850 <HAL_UART_RxCpltCallback+0x1d4>)
 800d746:	5cce      	ldrb	r6, [r1, r3]
 800d748:	00f1      	lsls	r1, r6, #3
 800d74a:	1b8e      	subs	r6, r1, r6
 800d74c:	0099      	lsls	r1, r3, #2
 800d74e:	18c9      	adds	r1, r1, r3
 800d750:	00c8      	lsls	r0, r1, #3
 800d752:	1a41      	subs	r1, r0, r1
 800d754:	1989      	adds	r1, r1, r6
 800d756:	00c9      	lsls	r1, r1, #3
 800d758:	483e      	ldr	r0, [pc, #248]	; (800d854 <HAL_UART_RxCpltCallback+0x1d8>)
 800d75a:	1841      	adds	r1, r0, r1
 800d75c:	708a      	strb	r2, [r1, #2]
		temp_index[port_index] = 3;
 800d75e:	493e      	ldr	r1, [pc, #248]	; (800d858 <HAL_UART_RxCpltCallback+0x1dc>)
 800d760:	2003      	movs	r0, #3
 800d762:	54c8      	strb	r0, [r1, r3]
		temp_length[port_index] = Rx_Data[port_index] + 1;
 800d764:	3201      	adds	r2, #1
 800d766:	493d      	ldr	r1, [pc, #244]	; (800d85c <HAL_UART_RxCpltCallback+0x1e0>)
 800d768:	54ca      	strb	r2, [r1, r3]
 800d76a:	e7ce      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d76c:	4e38      	ldr	r6, [pc, #224]	; (800d850 <HAL_UART_RxCpltCallback+0x1d4>)
 800d76e:	5cf6      	ldrb	r6, [r6, r3]
 800d770:	46b3      	mov	fp, r6
 800d772:	4f39      	ldr	r7, [pc, #228]	; (800d858 <HAL_UART_RxCpltCallback+0x1dc>)
 800d774:	46b8      	mov	r8, r7
 800d776:	5cff      	ldrb	r7, [r7, r3]
 800d778:	46bc      	mov	ip, r7
 800d77a:	00f7      	lsls	r7, r6, #3
 800d77c:	1bbf      	subs	r7, r7, r6
 800d77e:	46ba      	mov	sl, r7
 800d780:	009f      	lsls	r7, r3, #2
 800d782:	46b9      	mov	r9, r7
 800d784:	4499      	add	r9, r3
 800d786:	464f      	mov	r7, r9
 800d788:	00ff      	lsls	r7, r7, #3
 800d78a:	464e      	mov	r6, r9
 800d78c:	1bbf      	subs	r7, r7, r6
 800d78e:	4457      	add	r7, sl
 800d790:	00ff      	lsls	r7, r7, #3
 800d792:	4e30      	ldr	r6, [pc, #192]	; (800d854 <HAL_UART_RxCpltCallback+0x1d8>)
 800d794:	46b1      	mov	r9, r6
 800d796:	444f      	add	r7, r9
 800d798:	4666      	mov	r6, ip
 800d79a:	55ba      	strb	r2, [r7, r6]
			temp_index[port_index]++;
 800d79c:	4662      	mov	r2, ip
 800d79e:	3201      	adds	r2, #1
 800d7a0:	4646      	mov	r6, r8
 800d7a2:	54f2      	strb	r2, [r6, r3]
			temp_length[port_index]--;
 800d7a4:	3901      	subs	r1, #1
 800d7a6:	4a2d      	ldr	r2, [pc, #180]	; (800d85c <HAL_UART_RxCpltCallback+0x1e0>)
 800d7a8:	54d1      	strb	r1, [r2, r3]
			MSG_Buffer_Index_End[port_index]++;
 800d7aa:	465e      	mov	r6, fp
 800d7ac:	3601      	adds	r6, #1
 800d7ae:	b2f6      	uxtb	r6, r6
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d7b0:	2e05      	cmp	r6, #5
 800d7b2:	d00f      	beq.n	800d7d4 <HAL_UART_RxCpltCallback+0x158>
			MSG_Buffer_Index_End[port_index]++;
 800d7b4:	4a26      	ldr	r2, [pc, #152]	; (800d850 <HAL_UART_RxCpltCallback+0x1d4>)
 800d7b6:	54d6      	strb	r6, [r2, r3]
			Process_Message_Buffer[Process_Message_Buffer_Index_End] = port_number;
 800d7b8:	4b29      	ldr	r3, [pc, #164]	; (800d860 <HAL_UART_RxCpltCallback+0x1e4>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	4a29      	ldr	r2, [pc, #164]	; (800d864 <HAL_UART_RxCpltCallback+0x1e8>)
 800d7be:	54d0      	strb	r0, [r2, r3]
			Process_Message_Buffer_Index_End++;
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	b2db      	uxtb	r3, r3
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d7c4:	2b05      	cmp	r3, #5
 800d7c6:	d009      	beq.n	800d7dc <HAL_UART_RxCpltCallback+0x160>
			Process_Message_Buffer_Index_End++;
 800d7c8:	4a25      	ldr	r2, [pc, #148]	; (800d860 <HAL_UART_RxCpltCallback+0x1e4>)
 800d7ca:	7013      	strb	r3, [r2, #0]
			portStatus[port_number] =FREE; // End of receiving message.
 800d7cc:	4b1b      	ldr	r3, [pc, #108]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	555a      	strb	r2, [r3, r5]
 800d7d2:	e79a      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
			if(MSG_Buffer_Index_End[port_index] == MSG_COUNT) MSG_Buffer_Index_End[port_index] = 0;
 800d7d4:	4a1e      	ldr	r2, [pc, #120]	; (800d850 <HAL_UART_RxCpltCallback+0x1d4>)
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	54d1      	strb	r1, [r2, r3]
 800d7da:	e7ed      	b.n	800d7b8 <HAL_UART_RxCpltCallback+0x13c>
			if(Process_Message_Buffer_Index_End == MSG_COUNT) Process_Message_Buffer_Index_End = 0;
 800d7dc:	4b20      	ldr	r3, [pc, #128]	; (800d860 <HAL_UART_RxCpltCallback+0x1e4>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	701a      	strb	r2, [r3, #0]
 800d7e2:	e7f3      	b.n	800d7cc <HAL_UART_RxCpltCallback+0x150>
	else if(portStatus[port_number] == CLI)
 800d7e4:	0005      	movs	r5, r0
 800d7e6:	4915      	ldr	r1, [pc, #84]	; (800d83c <HAL_UART_RxCpltCallback+0x1c0>)
 800d7e8:	5c09      	ldrb	r1, [r1, r0]
 800d7ea:	2903      	cmp	r1, #3
 800d7ec:	d100      	bne.n	800d7f0 <HAL_UART_RxCpltCallback+0x174>
 800d7ee:	e789      	b.n	800d704 <HAL_UART_RxCpltCallback+0x88>
	else if(Rx_Data[port_index] != 'Z' && portStatus[port_number] == H_Status)
 800d7f0:	2907      	cmp	r1, #7
 800d7f2:	d0a0      	beq.n	800d736 <HAL_UART_RxCpltCallback+0xba>
	else if(portStatus[port_number] == Z_Status)
 800d7f4:	2908      	cmp	r1, #8
 800d7f6:	d0a2      	beq.n	800d73e <HAL_UART_RxCpltCallback+0xc2>
	else if(portStatus[port_number] == MSG)
 800d7f8:	2901      	cmp	r1, #1
 800d7fa:	d000      	beq.n	800d7fe <HAL_UART_RxCpltCallback+0x182>
 800d7fc:	e785      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
		if(temp_length[port_index] > 1)
 800d7fe:	4917      	ldr	r1, [pc, #92]	; (800d85c <HAL_UART_RxCpltCallback+0x1e0>)
 800d800:	5cc9      	ldrb	r1, [r1, r3]
 800d802:	2901      	cmp	r1, #1
 800d804:	d9b2      	bls.n	800d76c <HAL_UART_RxCpltCallback+0xf0>
			MSG_Buffer[port_index][MSG_Buffer_Index_End[port_index]][temp_index[port_index]] = Rx_Data[port_index];
 800d806:	4814      	ldr	r0, [pc, #80]	; (800d858 <HAL_UART_RxCpltCallback+0x1dc>)
 800d808:	4684      	mov	ip, r0
 800d80a:	5cc6      	ldrb	r6, [r0, r3]
 800d80c:	4810      	ldr	r0, [pc, #64]	; (800d850 <HAL_UART_RxCpltCallback+0x1d4>)
 800d80e:	5cc5      	ldrb	r5, [r0, r3]
 800d810:	00e8      	lsls	r0, r5, #3
 800d812:	1b40      	subs	r0, r0, r5
 800d814:	4680      	mov	r8, r0
 800d816:	0098      	lsls	r0, r3, #2
 800d818:	18c0      	adds	r0, r0, r3
 800d81a:	00c5      	lsls	r5, r0, #3
 800d81c:	1a28      	subs	r0, r5, r0
 800d81e:	4440      	add	r0, r8
 800d820:	00c0      	lsls	r0, r0, #3
 800d822:	4d0c      	ldr	r5, [pc, #48]	; (800d854 <HAL_UART_RxCpltCallback+0x1d8>)
 800d824:	1828      	adds	r0, r5, r0
 800d826:	5582      	strb	r2, [r0, r6]
			temp_index[port_index]++;
 800d828:	3601      	adds	r6, #1
 800d82a:	4662      	mov	r2, ip
 800d82c:	54d6      	strb	r6, [r2, r3]
			temp_length[port_index]--;
 800d82e:	3901      	subs	r1, #1
 800d830:	4a0a      	ldr	r2, [pc, #40]	; (800d85c <HAL_UART_RxCpltCallback+0x1e0>)
 800d832:	54d1      	strb	r1, [r2, r3]
 800d834:	e769      	b.n	800d70a <HAL_UART_RxCpltCallback+0x8e>
 800d836:	46c0      	nop			; (mov r8, r8)
 800d838:	200019f0 	.word	0x200019f0
 800d83c:	20001814 	.word	0x20001814
 800d840:	2000118a 	.word	0x2000118a
 800d844:	20002008 	.word	0x20002008
 800d848:	20000ae5 	.word	0x20000ae5
 800d84c:	20001193 	.word	0x20001193
 800d850:	2000117c 	.word	0x2000117c
 800d854:	20000aec 	.word	0x20000aec
 800d858:	20002608 	.word	0x20002608
 800d85c:	20002610 	.word	0x20002610
 800d860:	20001191 	.word	0x20001191
 800d864:	2000118c 	.word	0x2000118c

0800d868 <vApplicationStackOverflowHook>:
/*-----------------------------------------------------------*/

/* Run time stack overflow checking is performed if
 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
 function is called if a stack overflow is detected. */
void vApplicationStackOverflowHook( xTaskHandle pxTask,signed char *pcTaskName){
 800d868:	b530      	push	{r4, r5, lr}
 800d86a:	b083      	sub	sp, #12
	(void )pcTaskName;
	(void )pxTask;
	uint8_t* error_message = "Stack Overflow\r\n";
	writePxMutex(PcPort, (char*) error_message, 16, 0xff, 0xff);
 800d86c:	4d09      	ldr	r5, [pc, #36]	; (800d894 <vApplicationStackOverflowHook+0x2c>)
 800d86e:	7828      	ldrb	r0, [r5, #0]
 800d870:	24ff      	movs	r4, #255	; 0xff
 800d872:	9400      	str	r4, [sp, #0]
 800d874:	23ff      	movs	r3, #255	; 0xff
 800d876:	2210      	movs	r2, #16
 800d878:	4907      	ldr	r1, [pc, #28]	; (800d898 <vApplicationStackOverflowHook+0x30>)
 800d87a:	f000 fbeb 	bl	800e054 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d87e:	4b07      	ldr	r3, [pc, #28]	; (800d89c <vApplicationStackOverflowHook+0x34>)
 800d880:	6819      	ldr	r1, [r3, #0]
 800d882:	7828      	ldrb	r0, [r5, #0]
 800d884:	9400      	str	r4, [sp, #0]
 800d886:	23ff      	movs	r3, #255	; 0xff
 800d888:	220f      	movs	r2, #15
 800d88a:	f000 fbe3 	bl	800e054 <writePxMutex>
	NVIC_SystemReset();
 800d88e:	f7ff fe09 	bl	800d4a4 <NVIC_SystemReset>
 800d892:	46c0      	nop			; (mov r8, r8)
 800d894:	2000118a 	.word	0x2000118a
 800d898:	0801b62c 	.word	0x0801b62c
 800d89c:	20000100 	.word	0x20000100

0800d8a0 <vApplicationMallocFailedHook>:
 demo application.  If heap_1.c or heap_2.c are used, then the size of the
 heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
 FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
 to query the size of free heap space that remains (although it does not
 provide information on how the remaining heap might be fragmented). */
void vApplicationMallocFailedHook(void){
 800d8a0:	b530      	push	{r4, r5, lr}
 800d8a2:	b083      	sub	sp, #12
	uint8_t* error_message = "Heap size exceeded\r\n";
	writePxMutex(PcPort, (char*) error_message, 20, 0xff, 0xff);
 800d8a4:	4d09      	ldr	r5, [pc, #36]	; (800d8cc <vApplicationMallocFailedHook+0x2c>)
 800d8a6:	7828      	ldrb	r0, [r5, #0]
 800d8a8:	24ff      	movs	r4, #255	; 0xff
 800d8aa:	9400      	str	r4, [sp, #0]
 800d8ac:	23ff      	movs	r3, #255	; 0xff
 800d8ae:	2214      	movs	r2, #20
 800d8b0:	4907      	ldr	r1, [pc, #28]	; (800d8d0 <vApplicationMallocFailedHook+0x30>)
 800d8b2:	f000 fbcf 	bl	800e054 <writePxMutex>
	writePxMutex(PcPort, (char*) error_restart_message, 15, 0xff, 0xff);
 800d8b6:	4b07      	ldr	r3, [pc, #28]	; (800d8d4 <vApplicationMallocFailedHook+0x34>)
 800d8b8:	6819      	ldr	r1, [r3, #0]
 800d8ba:	7828      	ldrb	r0, [r5, #0]
 800d8bc:	9400      	str	r4, [sp, #0]
 800d8be:	23ff      	movs	r3, #255	; 0xff
 800d8c0:	220f      	movs	r2, #15
 800d8c2:	f000 fbc7 	bl	800e054 <writePxMutex>
	NVIC_SystemReset();
 800d8c6:	f7ff fded 	bl	800d4a4 <NVIC_SystemReset>
 800d8ca:	46c0      	nop			; (mov r8, r8)
 800d8cc:	2000118a 	.word	0x2000118a
 800d8d0:	0801b614 	.word	0x0801b614
 800d8d4:	20000100 	.word	0x20000100

0800d8d8 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d8d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8da:	46ce      	mov	lr, r9
 800d8dc:	b500      	push	{lr}
 800d8de:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d8e0:	ac05      	add	r4, sp, #20
 800d8e2:	4b34      	ldr	r3, [pc, #208]	; (800d9b4 <RTC_CalendarConfig+0xdc>)
 800d8e4:	0022      	movs	r2, r4
 800d8e6:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d8e8:	c243      	stmia	r2!, {r0, r1, r6}
 800d8ea:	aa02      	add	r2, sp, #8
 800d8ec:	4b32      	ldr	r3, [pc, #200]	; (800d9b8 <RTC_CalendarConfig+0xe0>)
 800d8ee:	cb03      	ldmia	r3!, {r0, r1}
 800d8f0:	c203      	stmia	r2!, {r0, r1}
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d8f6:	2015      	movs	r0, #21
 800d8f8:	ab02      	add	r3, sp, #8
 800d8fa:	469c      	mov	ip, r3
 800d8fc:	4460      	add	r0, ip
 800d8fe:	f006 f85a 	bl	80139b6 <atoi>
 800d902:	b2c3      	uxtb	r3, r0
 800d904:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d906:	2600      	movs	r6, #0
 800d908:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800d90a:	a806      	add	r0, sp, #24
 800d90c:	f006 f853 	bl	80139b6 <atoi>
 800d910:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800d912:	70e6      	strb	r6, [r4, #3]
 800d914:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d916:	4e29      	ldr	r6, [pc, #164]	; (800d9bc <RTC_CalendarConfig+0xe4>)
 800d918:	e002      	b.n	800d920 <RTC_CalendarConfig+0x48>
 800d91a:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800d91c:	2c0d      	cmp	r4, #13
 800d91e:	d009      	beq.n	800d934 <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d920:	00a3      	lsls	r3, r4, #2
 800d922:	3b04      	subs	r3, #4
 800d924:	58f1      	ldr	r1, [r6, r3]
 800d926:	a805      	add	r0, sp, #20
 800d928:	f7f2 fbec 	bl	8000104 <strcmp>
 800d92c:	2800      	cmp	r0, #0
 800d92e:	d1f4      	bne.n	800d91a <RTC_CalendarConfig+0x42>
			month = i + 1;
 800d930:	b2e5      	uxtb	r5, r4
 800d932:	e7f2      	b.n	800d91a <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d934:	ab02      	add	r3, sp, #8
 800d936:	1d98      	adds	r0, r3, #6
 800d938:	f006 f83d 	bl	80139b6 <atoi>
 800d93c:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800d93e:	ac05      	add	r4, sp, #20
 800d940:	2600      	movs	r6, #0
 800d942:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800d944:	ab02      	add	r3, sp, #8
 800d946:	1cd8      	adds	r0, r3, #3
 800d948:	f006 f835 	bl	80139b6 <atoi>
 800d94c:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800d94e:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800d950:	a802      	add	r0, sp, #8
 800d952:	f006 f830 	bl	80139b6 <atoi>
 800d956:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d958:	a90d      	add	r1, sp, #52	; 0x34
 800d95a:	464b      	mov	r3, r9
 800d95c:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d95e:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d960:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d962:	2301      	movs	r3, #1
 800d964:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d966:	2200      	movs	r2, #0
 800d968:	4815      	ldr	r0, [pc, #84]	; (800d9c0 <RTC_CalendarConfig+0xe8>)
 800d96a:	f005 f93f 	bl	8012bec <HAL_RTC_SetDate>
		return BOS_ERROR;
 800d96e:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d970:	2800      	cmp	r0, #0
 800d972:	d119      	bne.n	800d9a8 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800d974:	a908      	add	r1, sp, #32
 800d976:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800d978:	9b01      	ldr	r3, [sp, #4]
 800d97a:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d980:	2300      	movs	r3, #0
 800d982:	720b      	strb	r3, [r1, #8]
 800d984:	4a0f      	ldr	r2, [pc, #60]	; (800d9c4 <RTC_CalendarConfig+0xec>)
 800d986:	3018      	adds	r0, #24
 800d988:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d98a:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d98c:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d98e:	2200      	movs	r2, #0
 800d990:	480b      	ldr	r0, [pc, #44]	; (800d9c0 <RTC_CalendarConfig+0xe8>)
 800d992:	f005 f8a5 	bl	8012ae0 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800d996:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d998:	2800      	cmp	r0, #0
 800d99a:	d105      	bne.n	800d9a8 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d99c:	4a0a      	ldr	r2, [pc, #40]	; (800d9c8 <RTC_CalendarConfig+0xf0>)
 800d99e:	2101      	movs	r1, #1
 800d9a0:	4807      	ldr	r0, [pc, #28]	; (800d9c0 <RTC_CalendarConfig+0xe8>)
 800d9a2:	f005 f9e7 	bl	8012d74 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	0018      	movs	r0, r3
 800d9aa:	b00e      	add	sp, #56	; 0x38
 800d9ac:	bc04      	pop	{r2}
 800d9ae:	4691      	mov	r9, r2
 800d9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d9b2:	46c0      	nop			; (mov r8, r8)
 800d9b4:	080188b0 	.word	0x080188b0
 800d9b8:	080188d4 	.word	0x080188d4
 800d9bc:	20000048 	.word	0x20000048
 800d9c0:	20006eb8 	.word	0x20006eb8
 800d9c4:	20006a0c 	.word	0x20006a0c
 800d9c8:	000032f2 	.word	0x000032f2

0800d9cc <RTC_Init>:
{
 800d9cc:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d9ce:	4a1c      	ldr	r2, [pc, #112]	; (800da40 <RTC_Init+0x74>)
 800d9d0:	6a11      	ldr	r1, [r2, #32]
 800d9d2:	2380      	movs	r3, #128	; 0x80
 800d9d4:	021b      	lsls	r3, r3, #8
 800d9d6:	430b      	orrs	r3, r1
 800d9d8:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800d9da:	481a      	ldr	r0, [pc, #104]	; (800da44 <RTC_Init+0x78>)
 800d9dc:	4b1a      	ldr	r3, [pc, #104]	; (800da48 <RTC_Init+0x7c>)
 800d9de:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800d9e4:	227c      	movs	r2, #124	; 0x7c
 800d9e6:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800d9e8:	4a18      	ldr	r2, [pc, #96]	; (800da4c <RTC_Init+0x80>)
 800d9ea:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800d9ec:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800d9ee:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800d9f0:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800d9f2:	f005 f817 	bl	8012a24 <HAL_RTC_Init>
 800d9f6:	23ff      	movs	r3, #255	; 0xff
 800d9f8:	2800      	cmp	r0, #0
 800d9fa:	d11e      	bne.n	800da3a <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800d9fc:	2101      	movs	r1, #1
 800d9fe:	4811      	ldr	r0, [pc, #68]	; (800da44 <RTC_Init+0x78>)
 800da00:	f005 f9be 	bl	8012d80 <HAL_RTCEx_BKUPRead>
 800da04:	4b12      	ldr	r3, [pc, #72]	; (800da50 <RTC_Init+0x84>)
 800da06:	4298      	cmp	r0, r3
 800da08:	d10e      	bne.n	800da28 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800da0a:	4b0d      	ldr	r3, [pc, #52]	; (800da40 <RTC_Init+0x74>)
 800da0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da0e:	011b      	lsls	r3, r3, #4
 800da10:	d502      	bpl.n	800da18 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800da12:	4b10      	ldr	r3, [pc, #64]	; (800da54 <RTC_Init+0x88>)
 800da14:	2200      	movs	r2, #0
 800da16:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800da18:	4b09      	ldr	r3, [pc, #36]	; (800da40 <RTC_Init+0x74>)
 800da1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da1c:	015b      	lsls	r3, r3, #5
 800da1e:	d505      	bpl.n	800da2c <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800da20:	4b0c      	ldr	r3, [pc, #48]	; (800da54 <RTC_Init+0x88>)
 800da22:	2201      	movs	r2, #1
 800da24:	701a      	strb	r2, [r3, #0]
 800da26:	e001      	b.n	800da2c <RTC_Init+0x60>
    RTC_CalendarConfig();
 800da28:	f7ff ff56 	bl	800d8d8 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800da2c:	4a04      	ldr	r2, [pc, #16]	; (800da40 <RTC_Init+0x74>)
 800da2e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800da30:	2380      	movs	r3, #128	; 0x80
 800da32:	045b      	lsls	r3, r3, #17
 800da34:	430b      	orrs	r3, r1
 800da36:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	0018      	movs	r0, r3
 800da3c:	bd10      	pop	{r4, pc}
 800da3e:	46c0      	nop			; (mov r8, r8)
 800da40:	40021000 	.word	0x40021000
 800da44:	20006eb8 	.word	0x20006eb8
 800da48:	40002800 	.word	0x40002800
 800da4c:	000007cf 	.word	0x000007cf
 800da50:	000032f2 	.word	0x000032f2
 800da54:	20002616 	.word	0x20002616

0800da58 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800da58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da5a:	46c6      	mov	lr, r8
 800da5c:	b500      	push	{lr}
 800da5e:	b086      	sub	sp, #24
 800da60:	ac0c      	add	r4, sp, #48	; 0x30
 800da62:	7827      	ldrb	r7, [r4, #0]
 800da64:	ac0d      	add	r4, sp, #52	; 0x34
 800da66:	7824      	ldrb	r4, [r4, #0]
 800da68:	46a0      	mov	r8, r4
 800da6a:	ac0e      	add	r4, sp, #56	; 0x38
 800da6c:	7825      	ldrb	r5, [r4, #0]
 800da6e:	ac0f      	add	r4, sp, #60	; 0x3c
 800da70:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800da72:	ac05      	add	r4, sp, #20
 800da74:	3230      	adds	r2, #48	; 0x30
 800da76:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800da78:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800da7a:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800da7c:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800da7e:	2200      	movs	r2, #0
 800da80:	0021      	movs	r1, r4
 800da82:	481f      	ldr	r0, [pc, #124]	; (800db00 <BOS_CalendarConfig+0xa8>)
 800da84:	f005 f8b2 	bl	8012bec <HAL_RTC_SetDate>
 800da88:	2800      	cmp	r0, #0
 800da8a:	d136      	bne.n	800dafa <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800da8c:	466b      	mov	r3, sp
 800da8e:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800da90:	4642      	mov	r2, r8
 800da92:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800da94:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800da96:	2300      	movs	r3, #0
 800da98:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800da9a:	2e01      	cmp	r6, #1
 800da9c:	d020      	beq.n	800dae0 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800da9e:	2e02      	cmp	r6, #2
 800daa0:	d024      	beq.n	800daec <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800daa2:	4b18      	ldr	r3, [pc, #96]	; (800db04 <BOS_CalendarConfig+0xac>)
 800daa4:	2218      	movs	r2, #24
 800daa6:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800daa8:	2200      	movs	r2, #0
 800daaa:	4669      	mov	r1, sp
 800daac:	4814      	ldr	r0, [pc, #80]	; (800db00 <BOS_CalendarConfig+0xa8>)
 800daae:	f005 f817 	bl	8012ae0 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800dab2:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dab4:	2800      	cmp	r0, #0
 800dab6:	d10e      	bne.n	800dad6 <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800dab8:	4a12      	ldr	r2, [pc, #72]	; (800db04 <BOS_CalendarConfig+0xac>)
 800daba:	7b53      	ldrb	r3, [r2, #13]
 800dabc:	021b      	lsls	r3, r3, #8
 800dabe:	7911      	ldrb	r1, [r2, #4]
 800dac0:	4319      	orrs	r1, r3
 800dac2:	308d      	adds	r0, #141	; 0x8d
 800dac4:	0040      	lsls	r0, r0, #1
 800dac6:	f7fe f845 	bl	800bb54 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800daca:	4a0f      	ldr	r2, [pc, #60]	; (800db08 <BOS_CalendarConfig+0xb0>)
 800dacc:	2101      	movs	r1, #1
 800dace:	480c      	ldr	r0, [pc, #48]	; (800db00 <BOS_CalendarConfig+0xa8>)
 800dad0:	f005 f950 	bl	8012d74 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800dad4:	2300      	movs	r3, #0
}
 800dad6:	0018      	movs	r0, r3
 800dad8:	b006      	add	sp, #24
 800dada:	bc04      	pop	{r2}
 800dadc:	4690      	mov	r8, r2
 800dade:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800dae0:	466a      	mov	r2, sp
 800dae2:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800dae4:	4b07      	ldr	r3, [pc, #28]	; (800db04 <BOS_CalendarConfig+0xac>)
 800dae6:	220c      	movs	r2, #12
 800dae8:	735a      	strb	r2, [r3, #13]
 800daea:	e7dd      	b.n	800daa8 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	466a      	mov	r2, sp
 800daf0:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800daf2:	4b04      	ldr	r3, [pc, #16]	; (800db04 <BOS_CalendarConfig+0xac>)
 800daf4:	220c      	movs	r2, #12
 800daf6:	735a      	strb	r2, [r3, #13]
 800daf8:	e7d6      	b.n	800daa8 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800dafa:	23ff      	movs	r3, #255	; 0xff
 800dafc:	e7eb      	b.n	800dad6 <BOS_CalendarConfig+0x7e>
 800dafe:	46c0      	nop			; (mov r8, r8)
 800db00:	20006eb8 	.word	0x20006eb8
 800db04:	20006a0c 	.word	0x20006a0c
 800db08:	000032f2 	.word	0x000032f2

0800db0c <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800db0c:	b530      	push	{r4, r5, lr}
 800db0e:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800db10:	4d16      	ldr	r5, [pc, #88]	; (800db6c <GetTimeDate+0x60>)
 800db12:	2200      	movs	r2, #0
 800db14:	a902      	add	r1, sp, #8
 800db16:	0028      	movs	r0, r5
 800db18:	f005 f8e4 	bl	8012ce4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800db1c:	ac07      	add	r4, sp, #28
 800db1e:	2200      	movs	r2, #0
 800db20:	0021      	movs	r1, r4
 800db22:	0028      	movs	r0, r5
 800db24:	f005 f904 	bl	8012d30 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800db28:	4b11      	ldr	r3, [pc, #68]	; (800db70 <GetTimeDate+0x64>)
 800db2a:	aa02      	add	r2, sp, #8
 800db2c:	7a12      	ldrb	r2, [r2, #8]
 800db2e:	09d2      	lsrs	r2, r2, #7
 800db30:	3201      	adds	r2, #1
 800db32:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800db34:	9a03      	ldr	r2, [sp, #12]
 800db36:	9201      	str	r2, [sp, #4]
 800db38:	0852      	lsrs	r2, r2, #1
 800db3a:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800db3c:	aa02      	add	r2, sp, #8
 800db3e:	7892      	ldrb	r2, [r2, #2]
 800db40:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800db42:	aa02      	add	r2, sp, #8
 800db44:	7852      	ldrb	r2, [r2, #1]
 800db46:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800db48:	aa02      	add	r2, sp, #8
 800db4a:	7812      	ldrb	r2, [r2, #0]
 800db4c:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800db4e:	78a2      	ldrb	r2, [r4, #2]
 800db50:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800db52:	7862      	ldrb	r2, [r4, #1]
 800db54:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800db56:	7822      	ldrb	r2, [r4, #0]
 800db58:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800db5a:	78e2      	ldrb	r2, [r4, #3]
 800db5c:	21fa      	movs	r1, #250	; 0xfa
 800db5e:	00c9      	lsls	r1, r1, #3
 800db60:	468c      	mov	ip, r1
 800db62:	4462      	add	r2, ip
 800db64:	831a      	strh	r2, [r3, #24]
}
 800db66:	b009      	add	sp, #36	; 0x24
 800db68:	bd30      	pop	{r4, r5, pc}
 800db6a:	46c0      	nop			; (mov r8, r8)
 800db6c:	20006eb8 	.word	0x20006eb8
 800db70:	20006a0c 	.word	0x20006a0c

0800db74 <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800db74:	b530      	push	{r4, r5, lr}
 800db76:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800db78:	4a12      	ldr	r2, [pc, #72]	; (800dbc4 <TIM_USEC_Init+0x50>)
 800db7a:	69d1      	ldr	r1, [r2, #28]
 800db7c:	2080      	movs	r0, #128	; 0x80
 800db7e:	0040      	lsls	r0, r0, #1
 800db80:	4301      	orrs	r1, r0
 800db82:	61d1      	str	r1, [r2, #28]
 800db84:	69d3      	ldr	r3, [r2, #28]
 800db86:	4003      	ands	r3, r0
 800db88:	9301      	str	r3, [sp, #4]
 800db8a:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800db8c:	4c0e      	ldr	r4, [pc, #56]	; (800dbc8 <TIM_USEC_Init+0x54>)
 800db8e:	4b0f      	ldr	r3, [pc, #60]	; (800dbcc <TIM_USEC_Init+0x58>)
 800db90:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800db92:	f004 fe5f 	bl	8012854 <HAL_RCC_GetPCLK1Freq>
 800db96:	490e      	ldr	r1, [pc, #56]	; (800dbd0 <TIM_USEC_Init+0x5c>)
 800db98:	f7f2 fada 	bl	8000150 <__udivsi3>
 800db9c:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db9e:	2500      	movs	r5, #0
 800dba0:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800dba2:	4b0c      	ldr	r3, [pc, #48]	; (800dbd4 <TIM_USEC_Init+0x60>)
 800dba4:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800dba6:	0020      	movs	r0, r4
 800dba8:	f005 f97a 	bl	8012ea0 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbac:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbae:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800dbb0:	a902      	add	r1, sp, #8
 800dbb2:	0020      	movs	r0, r4
 800dbb4:	f005 f98e 	bl	8012ed4 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800dbb8:	0020      	movs	r0, r4
 800dbba:	f005 f8e8 	bl	8012d8e <HAL_TIM_Base_Start>
}
 800dbbe:	b005      	add	sp, #20
 800dbc0:	bd30      	pop	{r4, r5, pc}
 800dbc2:	46c0      	nop			; (mov r8, r8)
 800dbc4:	40021000 	.word	0x40021000
 800dbc8:	20006f14 	.word	0x20006f14
 800dbcc:	40002000 	.word	0x40002000
 800dbd0:	000f4240 	.word	0x000f4240
 800dbd4:	0000ffff 	.word	0x0000ffff

0800dbd8 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800dbd8:	b530      	push	{r4, r5, lr}
 800dbda:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dbdc:	4a12      	ldr	r2, [pc, #72]	; (800dc28 <TIM_MSEC_Init+0x50>)
 800dbde:	6991      	ldr	r1, [r2, #24]
 800dbe0:	2080      	movs	r0, #128	; 0x80
 800dbe2:	0240      	lsls	r0, r0, #9
 800dbe4:	4301      	orrs	r1, r0
 800dbe6:	6191      	str	r1, [r2, #24]
 800dbe8:	6993      	ldr	r3, [r2, #24]
 800dbea:	4003      	ands	r3, r0
 800dbec:	9301      	str	r3, [sp, #4]
 800dbee:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800dbf0:	4c0e      	ldr	r4, [pc, #56]	; (800dc2c <TIM_MSEC_Init+0x54>)
 800dbf2:	4b0f      	ldr	r3, [pc, #60]	; (800dc30 <TIM_MSEC_Init+0x58>)
 800dbf4:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dbf6:	f004 fe2d 	bl	8012854 <HAL_RCC_GetPCLK1Freq>
 800dbfa:	21fa      	movs	r1, #250	; 0xfa
 800dbfc:	0089      	lsls	r1, r1, #2
 800dbfe:	f7f2 faa7 	bl	8000150 <__udivsi3>
 800dc02:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc04:	2500      	movs	r5, #0
 800dc06:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800dc08:	4b0a      	ldr	r3, [pc, #40]	; (800dc34 <TIM_MSEC_Init+0x5c>)
 800dc0a:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800dc0c:	0020      	movs	r0, r4
 800dc0e:	f005 f947 	bl	8012ea0 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc12:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc14:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dc16:	a902      	add	r1, sp, #8
 800dc18:	0020      	movs	r0, r4
 800dc1a:	f005 f95b 	bl	8012ed4 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dc1e:	0020      	movs	r0, r4
 800dc20:	f005 f8b5 	bl	8012d8e <HAL_TIM_Base_Start>
}
 800dc24:	b005      	add	sp, #20
 800dc26:	bd30      	pop	{r4, r5, pc}
 800dc28:	40021000 	.word	0x40021000
 800dc2c:	20006ed8 	.word	0x20006ed8
 800dc30:	40014000 	.word	0x40014000
 800dc34:	0000ffff 	.word	0x0000ffff

0800dc38 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800dc38:	b510      	push	{r4, lr}
 800dc3a:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800dc3c:	f002 f982 	bl	800ff44 <vPortEnterCritical>
	
	if (Delay)
 800dc40:	2c00      	cmp	r4, #0
 800dc42:	d006      	beq.n	800dc52 <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800dc44:	4b04      	ldr	r3, [pc, #16]	; (800dc58 <StartMicroDelay+0x20>)
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800dc4a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dc4c:	1a5b      	subs	r3, r3, r1
 800dc4e:	42a3      	cmp	r3, r4
 800dc50:	d9fb      	bls.n	800dc4a <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dc52:	f002 f983 	bl	800ff5c <vPortExitCritical>
}
 800dc56:	bd10      	pop	{r4, pc}
 800dc58:	20006f14 	.word	0x20006f14

0800dc5c <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800dc60:	f002 f970 	bl	800ff44 <vPortEnterCritical>
	
	if (Delay)
 800dc64:	2c00      	cmp	r4, #0
 800dc66:	d006      	beq.n	800dc76 <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800dc68:	4b04      	ldr	r3, [pc, #16]	; (800dc7c <StartMilliDelay+0x20>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800dc6e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dc70:	1a5b      	subs	r3, r3, r1
 800dc72:	42a3      	cmp	r3, r4
 800dc74:	d9fb      	bls.n	800dc6e <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dc76:	f002 f971 	bl	800ff5c <vPortExitCritical>
}
 800dc7a:	bd10      	pop	{r4, pc}
 800dc7c:	20006ed8 	.word	0x20006ed8

0800dc80 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800dc80:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800dc82:	4809      	ldr	r0, [pc, #36]	; (800dca8 <MX_USART1_UART_Init+0x28>)
 800dc84:	4b09      	ldr	r3, [pc, #36]	; (800dcac <MX_USART1_UART_Init+0x2c>)
 800dc86:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dc88:	23e1      	movs	r3, #225	; 0xe1
 800dc8a:	031b      	lsls	r3, r3, #12
 800dc8c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dc92:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dc94:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dc96:	220c      	movs	r2, #12
 800dc98:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dc9a:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dc9c:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dc9e:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dca0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800dca2:	f005 fd29 	bl	80136f8 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800dca6:	bd10      	pop	{r4, pc}
 800dca8:	20006c24 	.word	0x20006c24
 800dcac:	40013800 	.word	0x40013800

0800dcb0 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800dcb0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800dcb2:	4809      	ldr	r0, [pc, #36]	; (800dcd8 <MX_USART2_UART_Init+0x28>)
 800dcb4:	4b09      	ldr	r3, [pc, #36]	; (800dcdc <MX_USART2_UART_Init+0x2c>)
 800dcb6:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dcb8:	23e1      	movs	r3, #225	; 0xe1
 800dcba:	031b      	lsls	r3, r3, #12
 800dcbc:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dcc2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dcc4:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dcc6:	220c      	movs	r2, #12
 800dcc8:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dcca:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dccc:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dcce:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dcd0:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800dcd2:	f005 fd11 	bl	80136f8 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800dcd6:	bd10      	pop	{r4, pc}
 800dcd8:	20006d8c 	.word	0x20006d8c
 800dcdc:	40004400 	.word	0x40004400

0800dce0 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800dce0:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800dce2:	4809      	ldr	r0, [pc, #36]	; (800dd08 <MX_USART3_UART_Init+0x28>)
 800dce4:	4b09      	ldr	r3, [pc, #36]	; (800dd0c <MX_USART3_UART_Init+0x2c>)
 800dce6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dce8:	23e1      	movs	r3, #225	; 0xe1
 800dcea:	031b      	lsls	r3, r3, #12
 800dcec:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dcf2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dcf4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dcf6:	220c      	movs	r2, #12
 800dcf8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dcfa:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dcfc:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dcfe:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd00:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dd02:	f005 fcf9 	bl	80136f8 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dd06:	bd10      	pop	{r4, pc}
 800dd08:	20006b34 	.word	0x20006b34
 800dd0c:	40004800 	.word	0x40004800

0800dd10 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dd10:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dd12:	4809      	ldr	r0, [pc, #36]	; (800dd38 <MX_USART4_UART_Init+0x28>)
 800dd14:	4b09      	ldr	r3, [pc, #36]	; (800dd3c <MX_USART4_UART_Init+0x2c>)
 800dd16:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd18:	23e1      	movs	r3, #225	; 0xe1
 800dd1a:	031b      	lsls	r3, r3, #12
 800dd1c:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dd22:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dd24:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dd26:	220c      	movs	r2, #12
 800dd28:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd2a:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd2c:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd2e:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd30:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dd32:	f005 fce1 	bl	80136f8 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800dd36:	bd10      	pop	{r4, pc}
 800dd38:	20006d18 	.word	0x20006d18
 800dd3c:	40004c00 	.word	0x40004c00

0800dd40 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800dd40:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dd42:	4809      	ldr	r0, [pc, #36]	; (800dd68 <MX_USART5_UART_Init+0x28>)
 800dd44:	4b09      	ldr	r3, [pc, #36]	; (800dd6c <MX_USART5_UART_Init+0x2c>)
 800dd46:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd48:	23e1      	movs	r3, #225	; 0xe1
 800dd4a:	031b      	lsls	r3, r3, #12
 800dd4c:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dd52:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dd54:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dd56:	220c      	movs	r2, #12
 800dd58:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd5a:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd5c:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd5e:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd60:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dd62:	f005 fcc9 	bl	80136f8 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800dd66:	bd10      	pop	{r4, pc}
 800dd68:	20006bac 	.word	0x20006bac
 800dd6c:	40005000 	.word	0x40005000

0800dd70 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800dd70:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800dd72:	4809      	ldr	r0, [pc, #36]	; (800dd98 <MX_USART6_UART_Init+0x28>)
 800dd74:	4b09      	ldr	r3, [pc, #36]	; (800dd9c <MX_USART6_UART_Init+0x2c>)
 800dd76:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd78:	23e1      	movs	r3, #225	; 0xe1
 800dd7a:	031b      	lsls	r3, r3, #12
 800dd7c:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800dd82:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800dd84:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800dd86:	220c      	movs	r2, #12
 800dd88:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd8a:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd8c:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd8e:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd90:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800dd92:	f005 fcb1 	bl	80136f8 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800dd96:	bd10      	pop	{r4, pc}
 800dd98:	20006c9c 	.word	0x20006c9c
 800dd9c:	40011400 	.word	0x40011400

0800dda0 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dda2:	46ce      	mov	lr, r9
 800dda4:	b500      	push	{lr}
 800dda6:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800dda8:	6803      	ldr	r3, [r0, #0]
 800ddaa:	4a91      	ldr	r2, [pc, #580]	; (800dff0 <HAL_UART_MspInit+0x250>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d015      	beq.n	800dddc <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800ddb0:	4a90      	ldr	r2, [pc, #576]	; (800dff4 <HAL_UART_MspInit+0x254>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d040      	beq.n	800de38 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800ddb6:	4a90      	ldr	r2, [pc, #576]	; (800dff8 <HAL_UART_MspInit+0x258>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d069      	beq.n	800de90 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800ddbc:	4a8f      	ldr	r2, [pc, #572]	; (800dffc <HAL_UART_MspInit+0x25c>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d100      	bne.n	800ddc4 <HAL_UART_MspInit+0x24>
 800ddc2:	e092      	b.n	800deea <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800ddc4:	4a8e      	ldr	r2, [pc, #568]	; (800e000 <HAL_UART_MspInit+0x260>)
 800ddc6:	4293      	cmp	r3, r2
 800ddc8:	d100      	bne.n	800ddcc <HAL_UART_MspInit+0x2c>
 800ddca:	e0b9      	b.n	800df40 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800ddcc:	4a8d      	ldr	r2, [pc, #564]	; (800e004 <HAL_UART_MspInit+0x264>)
 800ddce:	4293      	cmp	r3, r2
 800ddd0:	d100      	bne.n	800ddd4 <HAL_UART_MspInit+0x34>
 800ddd2:	e0e0      	b.n	800df96 <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800ddd4:	b00c      	add	sp, #48	; 0x30
 800ddd6:	bc04      	pop	{r2}
 800ddd8:	4691      	mov	r9, r2
 800ddda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800dddc:	4a8a      	ldr	r2, [pc, #552]	; (800e008 <HAL_UART_MspInit+0x268>)
 800ddde:	6991      	ldr	r1, [r2, #24]
 800dde0:	2080      	movs	r0, #128	; 0x80
 800dde2:	01c0      	lsls	r0, r0, #7
 800dde4:	4301      	orrs	r1, r0
 800dde6:	6191      	str	r1, [r2, #24]
 800dde8:	6993      	ldr	r3, [r2, #24]
 800ddea:	4003      	ands	r3, r0
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800ddf0:	2380      	movs	r3, #128	; 0x80
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ddf6:	2702      	movs	r7, #2
 800ddf8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800ddfa:	2401      	movs	r4, #1
 800ddfc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800ddfe:	2603      	movs	r6, #3
 800de00:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800de02:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800de04:	2590      	movs	r5, #144	; 0x90
 800de06:	05ed      	lsls	r5, r5, #23
 800de08:	a907      	add	r1, sp, #28
 800de0a:	0028      	movs	r0, r5
 800de0c:	f003 fca2 	bl	8011754 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800de10:	2380      	movs	r3, #128	; 0x80
 800de12:	00db      	lsls	r3, r3, #3
 800de14:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de16:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de18:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de1a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800de1c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800de1e:	a907      	add	r1, sp, #28
 800de20:	0028      	movs	r0, r5
 800de22:	f003 fc97 	bl	8011754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800de26:	2200      	movs	r2, #0
 800de28:	2101      	movs	r1, #1
 800de2a:	201b      	movs	r0, #27
 800de2c:	f002 fcc8 	bl	80107c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800de30:	201b      	movs	r0, #27
 800de32:	f002 fcf9 	bl	8010828 <HAL_NVIC_EnableIRQ>
 800de36:	e7cd      	b.n	800ddd4 <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800de38:	4a73      	ldr	r2, [pc, #460]	; (800e008 <HAL_UART_MspInit+0x268>)
 800de3a:	69d1      	ldr	r1, [r2, #28]
 800de3c:	2080      	movs	r0, #128	; 0x80
 800de3e:	0280      	lsls	r0, r0, #10
 800de40:	4301      	orrs	r1, r0
 800de42:	61d1      	str	r1, [r2, #28]
 800de44:	69d3      	ldr	r3, [r2, #28]
 800de46:	4003      	ands	r3, r0
 800de48:	9302      	str	r3, [sp, #8]
 800de4a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800de4c:	2304      	movs	r3, #4
 800de4e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de50:	2702      	movs	r7, #2
 800de52:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de54:	2401      	movs	r4, #1
 800de56:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de58:	2603      	movs	r6, #3
 800de5a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800de5c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800de5e:	2590      	movs	r5, #144	; 0x90
 800de60:	05ed      	lsls	r5, r5, #23
 800de62:	a907      	add	r1, sp, #28
 800de64:	0028      	movs	r0, r5
 800de66:	f003 fc75 	bl	8011754 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800de6a:	2308      	movs	r3, #8
 800de6c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de6e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de70:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de72:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800de74:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800de76:	a907      	add	r1, sp, #28
 800de78:	0028      	movs	r0, r5
 800de7a:	f003 fc6b 	bl	8011754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800de7e:	2200      	movs	r2, #0
 800de80:	2101      	movs	r1, #1
 800de82:	201c      	movs	r0, #28
 800de84:	f002 fc9c 	bl	80107c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800de88:	201c      	movs	r0, #28
 800de8a:	f002 fccd 	bl	8010828 <HAL_NVIC_EnableIRQ>
 800de8e:	e7a1      	b.n	800ddd4 <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800de90:	4a5d      	ldr	r2, [pc, #372]	; (800e008 <HAL_UART_MspInit+0x268>)
 800de92:	69d1      	ldr	r1, [r2, #28]
 800de94:	2080      	movs	r0, #128	; 0x80
 800de96:	02c0      	lsls	r0, r0, #11
 800de98:	4301      	orrs	r1, r0
 800de9a:	61d1      	str	r1, [r2, #28]
 800de9c:	69d3      	ldr	r3, [r2, #28]
 800de9e:	4003      	ands	r3, r0
 800dea0:	9303      	str	r3, [sp, #12]
 800dea2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800dea4:	2380      	movs	r3, #128	; 0x80
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deaa:	2402      	movs	r4, #2
 800deac:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deae:	2701      	movs	r7, #1
 800deb0:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800deb2:	2603      	movs	r6, #3
 800deb4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800deb6:	2504      	movs	r5, #4
 800deb8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800deba:	a907      	add	r1, sp, #28
 800debc:	4853      	ldr	r0, [pc, #332]	; (800e00c <HAL_UART_MspInit+0x26c>)
 800debe:	f003 fc49 	bl	8011754 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800dec2:	2380      	movs	r3, #128	; 0x80
 800dec4:	011b      	lsls	r3, r3, #4
 800dec6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dec8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deca:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800decc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800dece:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800ded0:	a907      	add	r1, sp, #28
 800ded2:	484e      	ldr	r0, [pc, #312]	; (800e00c <HAL_UART_MspInit+0x26c>)
 800ded4:	f003 fc3e 	bl	8011754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800ded8:	2200      	movs	r2, #0
 800deda:	2101      	movs	r1, #1
 800dedc:	201d      	movs	r0, #29
 800dede:	f002 fc6f 	bl	80107c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dee2:	201d      	movs	r0, #29
 800dee4:	f002 fca0 	bl	8010828 <HAL_NVIC_EnableIRQ>
 800dee8:	e774      	b.n	800ddd4 <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800deea:	4a47      	ldr	r2, [pc, #284]	; (800e008 <HAL_UART_MspInit+0x268>)
 800deec:	69d1      	ldr	r1, [r2, #28]
 800deee:	2080      	movs	r0, #128	; 0x80
 800def0:	0300      	lsls	r0, r0, #12
 800def2:	4301      	orrs	r1, r0
 800def4:	61d1      	str	r1, [r2, #28]
 800def6:	69d3      	ldr	r3, [r2, #28]
 800def8:	4003      	ands	r3, r0
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800defe:	2401      	movs	r4, #1
 800df00:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df02:	2502      	movs	r5, #2
 800df04:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df06:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df08:	2603      	movs	r6, #3
 800df0a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800df0c:	2704      	movs	r7, #4
 800df0e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800df10:	a907      	add	r1, sp, #28
 800df12:	2090      	movs	r0, #144	; 0x90
 800df14:	05c0      	lsls	r0, r0, #23
 800df16:	f003 fc1d 	bl	8011754 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800df1a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df1c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df1e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df20:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800df22:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800df24:	a907      	add	r1, sp, #28
 800df26:	2090      	movs	r0, #144	; 0x90
 800df28:	05c0      	lsls	r0, r0, #23
 800df2a:	f003 fc13 	bl	8011754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800df2e:	2200      	movs	r2, #0
 800df30:	2101      	movs	r1, #1
 800df32:	201d      	movs	r0, #29
 800df34:	f002 fc44 	bl	80107c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800df38:	201d      	movs	r0, #29
 800df3a:	f002 fc75 	bl	8010828 <HAL_NVIC_EnableIRQ>
 800df3e:	e749      	b.n	800ddd4 <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800df40:	4a31      	ldr	r2, [pc, #196]	; (800e008 <HAL_UART_MspInit+0x268>)
 800df42:	69d1      	ldr	r1, [r2, #28]
 800df44:	2080      	movs	r0, #128	; 0x80
 800df46:	0340      	lsls	r0, r0, #13
 800df48:	4301      	orrs	r1, r0
 800df4a:	61d1      	str	r1, [r2, #28]
 800df4c:	69d3      	ldr	r3, [r2, #28]
 800df4e:	4003      	ands	r3, r0
 800df50:	9305      	str	r3, [sp, #20]
 800df52:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800df54:	2308      	movs	r3, #8
 800df56:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df58:	2402      	movs	r4, #2
 800df5a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df5c:	2701      	movs	r7, #1
 800df5e:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df60:	2603      	movs	r6, #3
 800df62:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800df64:	2504      	movs	r5, #4
 800df66:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800df68:	a907      	add	r1, sp, #28
 800df6a:	4828      	ldr	r0, [pc, #160]	; (800e00c <HAL_UART_MspInit+0x26c>)
 800df6c:	f003 fbf2 	bl	8011754 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800df70:	2310      	movs	r3, #16
 800df72:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df74:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df76:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df78:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800df7a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800df7c:	a907      	add	r1, sp, #28
 800df7e:	4823      	ldr	r0, [pc, #140]	; (800e00c <HAL_UART_MspInit+0x26c>)
 800df80:	f003 fbe8 	bl	8011754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800df84:	2200      	movs	r2, #0
 800df86:	2101      	movs	r1, #1
 800df88:	201d      	movs	r0, #29
 800df8a:	f002 fc19 	bl	80107c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800df8e:	201d      	movs	r0, #29
 800df90:	f002 fc4a 	bl	8010828 <HAL_NVIC_EnableIRQ>
 800df94:	e71e      	b.n	800ddd4 <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800df96:	4b1c      	ldr	r3, [pc, #112]	; (800e008 <HAL_UART_MspInit+0x268>)
 800df98:	699a      	ldr	r2, [r3, #24]
 800df9a:	2420      	movs	r4, #32
 800df9c:	4322      	orrs	r2, r4
 800df9e:	619a      	str	r2, [r3, #24]
 800dfa0:	699b      	ldr	r3, [r3, #24]
 800dfa2:	4023      	ands	r3, r4
 800dfa4:	9306      	str	r3, [sp, #24]
 800dfa6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800dfa8:	2310      	movs	r3, #16
 800dfaa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfac:	3b0e      	subs	r3, #14
 800dfae:	4699      	mov	r9, r3
 800dfb0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfb2:	2501      	movs	r5, #1
 800dfb4:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfb6:	2703      	movs	r7, #3
 800dfb8:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800dfba:	2605      	movs	r6, #5
 800dfbc:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800dfbe:	a907      	add	r1, sp, #28
 800dfc0:	2090      	movs	r0, #144	; 0x90
 800dfc2:	05c0      	lsls	r0, r0, #23
 800dfc4:	f003 fbc6 	bl	8011754 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800dfc8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfca:	464b      	mov	r3, r9
 800dfcc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfce:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfd0:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800dfd2:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800dfd4:	a907      	add	r1, sp, #28
 800dfd6:	2090      	movs	r0, #144	; 0x90
 800dfd8:	05c0      	lsls	r0, r0, #23
 800dfda:	f003 fbbb 	bl	8011754 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2101      	movs	r1, #1
 800dfe2:	201d      	movs	r0, #29
 800dfe4:	f002 fbec 	bl	80107c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dfe8:	201d      	movs	r0, #29
 800dfea:	f002 fc1d 	bl	8010828 <HAL_NVIC_EnableIRQ>
}
 800dfee:	e6f1      	b.n	800ddd4 <HAL_UART_MspInit+0x34>
 800dff0:	40013800 	.word	0x40013800
 800dff4:	40004400 	.word	0x40004400
 800dff8:	40004800 	.word	0x40004800
 800dffc:	40004c00 	.word	0x40004c00
 800e000:	40005000 	.word	0x40005000
 800e004:	40011400 	.word	0x40011400
 800e008:	40021000 	.word	0x40021000
 800e00c:	48000400 	.word	0x48000400

0800e010 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e010:	2806      	cmp	r0, #6
 800e012:	d80d      	bhi.n	800e030 <GetUart+0x20>
 800e014:	0080      	lsls	r0, r0, #2
 800e016:	4b08      	ldr	r3, [pc, #32]	; (800e038 <GetUart+0x28>)
 800e018:	581b      	ldr	r3, [r3, r0]
 800e01a:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800e01c:	4807      	ldr	r0, [pc, #28]	; (800e03c <GetUart+0x2c>)
 800e01e:	e00a      	b.n	800e036 <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800e020:	4807      	ldr	r0, [pc, #28]	; (800e040 <GetUart+0x30>)
 800e022:	e008      	b.n	800e036 <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800e024:	4807      	ldr	r0, [pc, #28]	; (800e044 <GetUart+0x34>)
 800e026:	e006      	b.n	800e036 <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800e028:	4807      	ldr	r0, [pc, #28]	; (800e048 <GetUart+0x38>)
 800e02a:	e004      	b.n	800e036 <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800e02c:	4807      	ldr	r0, [pc, #28]	; (800e04c <GetUart+0x3c>)
 800e02e:	e002      	b.n	800e036 <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e030:	2000      	movs	r0, #0
 800e032:	e000      	b.n	800e036 <GetUart+0x26>
			return P1uart;	
 800e034:	4806      	ldr	r0, [pc, #24]	; (800e050 <GetUart+0x40>)
	}		
}
 800e036:	4770      	bx	lr
 800e038:	0801b640 	.word	0x0801b640
 800e03c:	20006d8c 	.word	0x20006d8c
 800e040:	20006c9c 	.word	0x20006c9c
 800e044:	20006b34 	.word	0x20006b34
 800e048:	20006c24 	.word	0x20006c24
 800e04c:	20006bac 	.word	0x20006bac
 800e050:	20006d18 	.word	0x20006d18

0800e054 <writePxMutex>:
{
 800e054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e056:	b083      	sub	sp, #12
 800e058:	0005      	movs	r5, r0
 800e05a:	9100      	str	r1, [sp, #0]
 800e05c:	0017      	movs	r7, r2
 800e05e:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e060:	f7ff ffd6 	bl	800e010 <GetUart>
 800e064:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e066:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e068:	2800      	cmp	r0, #0
 800e06a:	d016      	beq.n	800e09a <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e06c:	00ab      	lsls	r3, r5, #2
 800e06e:	4a0c      	ldr	r2, [pc, #48]	; (800e0a0 <writePxMutex+0x4c>)
 800e070:	5898      	ldr	r0, [r3, r2]
 800e072:	9901      	ldr	r1, [sp, #4]
 800e074:	f000 f994 	bl	800e3a0 <osSemaphoreWait>
 800e078:	2800      	cmp	r0, #0
 800e07a:	d10e      	bne.n	800e09a <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e07c:	9b08      	ldr	r3, [sp, #32]
 800e07e:	003a      	movs	r2, r7
 800e080:	9900      	ldr	r1, [sp, #0]
 800e082:	0020      	movs	r0, r4
 800e084:	f005 fa92 	bl	80135ac <HAL_UART_Transmit>
 800e088:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e08a:	d001      	beq.n	800e090 <writePxMutex+0x3c>
 800e08c:	2803      	cmp	r0, #3
 800e08e:	d1f5      	bne.n	800e07c <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e090:	00ad      	lsls	r5, r5, #2
 800e092:	4b03      	ldr	r3, [pc, #12]	; (800e0a0 <writePxMutex+0x4c>)
 800e094:	58e8      	ldr	r0, [r5, r3]
 800e096:	f000 f9af 	bl	800e3f8 <osSemaphoreRelease>
}
 800e09a:	0030      	movs	r0, r6
 800e09c:	b003      	add	sp, #12
 800e09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0a0:	20006a90 	.word	0x20006a90

0800e0a4 <writePxITMutex>:
{
 800e0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	0004      	movs	r4, r0
 800e0aa:	9101      	str	r1, [sp, #4]
 800e0ac:	0017      	movs	r7, r2
 800e0ae:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e0b0:	f7ff ffae 	bl	800e010 <GetUart>
 800e0b4:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e0b6:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e0b8:	2800      	cmp	r0, #0
 800e0ba:	d008      	beq.n	800e0ce <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e0bc:	00a4      	lsls	r4, r4, #2
 800e0be:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <writePxITMutex+0x40>)
 800e0c0:	58e0      	ldr	r0, [r4, r3]
 800e0c2:	0029      	movs	r1, r5
 800e0c4:	f000 f96c 	bl	800e3a0 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e0c8:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e0ca:	2800      	cmp	r0, #0
 800e0cc:	d002      	beq.n	800e0d4 <writePxITMutex+0x30>
}
 800e0ce:	0018      	movs	r0, r3
 800e0d0:	b003      	add	sp, #12
 800e0d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e0d4:	003a      	movs	r2, r7
 800e0d6:	9901      	ldr	r1, [sp, #4]
 800e0d8:	0030      	movs	r0, r6
 800e0da:	f004 ff3f 	bl	8012f5c <HAL_UART_Transmit_IT>
 800e0de:	0003      	movs	r3, r0
 800e0e0:	e7f5      	b.n	800e0ce <writePxITMutex+0x2a>
 800e0e2:	46c0      	nop			; (mov r8, r8)
 800e0e4:	20006a90 	.word	0x20006a90

0800e0e8 <UpdateBaudrate>:
{
 800e0e8:	b510      	push	{r4, lr}
 800e0ea:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e0ec:	f7ff ff90 	bl	800e010 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e0f0:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e0f2:	f005 fb01 	bl	80136f8 <HAL_UART_Init>
}
 800e0f6:	2000      	movs	r0, #0
 800e0f8:	bd10      	pop	{r4, pc}
	...

0800e0fc <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e100:	d003      	beq.n	800e10a <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e102:	2901      	cmp	r1, #1
 800e104:	d002      	beq.n	800e10c <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e106:	2900      	cmp	r1, #0
 800e108:	d016      	beq.n	800e138 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e10c:	f7fc fe74 	bl	800adf8 <GetPort>
 800e110:	4b14      	ldr	r3, [pc, #80]	; (800e164 <SwapUartPins+0x68>)
 800e112:	781b      	ldrb	r3, [r3, #0]
 800e114:	3b01      	subs	r3, #1
 800e116:	4d14      	ldr	r5, [pc, #80]	; (800e168 <SwapUartPins+0x6c>)
 800e118:	005b      	lsls	r3, r3, #1
 800e11a:	3801      	subs	r0, #1
 800e11c:	2180      	movs	r1, #128	; 0x80
 800e11e:	0209      	lsls	r1, r1, #8
 800e120:	000a      	movs	r2, r1
 800e122:	4102      	asrs	r2, r0
 800e124:	5b58      	ldrh	r0, [r3, r5]
 800e126:	4302      	orrs	r2, r0
 800e128:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e12a:	2308      	movs	r3, #8
 800e12c:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e12e:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e130:	0020      	movs	r0, r4
 800e132:	f005 fae1 	bl	80136f8 <HAL_UART_Init>
 800e136:	e7e8      	b.n	800e10a <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e138:	f7fc fe5e 	bl	800adf8 <GetPort>
 800e13c:	4b09      	ldr	r3, [pc, #36]	; (800e164 <SwapUartPins+0x68>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	3b01      	subs	r3, #1
 800e142:	4d09      	ldr	r5, [pc, #36]	; (800e168 <SwapUartPins+0x6c>)
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	3801      	subs	r0, #1
 800e148:	2180      	movs	r1, #128	; 0x80
 800e14a:	0209      	lsls	r1, r1, #8
 800e14c:	4101      	asrs	r1, r0
 800e14e:	5b5a      	ldrh	r2, [r3, r5]
 800e150:	438a      	bics	r2, r1
 800e152:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e154:	2308      	movs	r3, #8
 800e156:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e158:	2300      	movs	r3, #0
 800e15a:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e15c:	0020      	movs	r0, r4
 800e15e:	f005 facb 	bl	80136f8 <HAL_UART_Init>
}
 800e162:	e7d2      	b.n	800e10a <SwapUartPins+0xe>
 800e164:	20001792 	.word	0x20001792
 800e168:	20006f50 	.word	0x20006f50

0800e16c <ReadPortsDir>:
/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDir(void) {
 800e16c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e16e:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK;
	/* Ask all other modules for their ports directions */
	for (uint8_t i = 1; i <= N; i++) {
 800e170:	4b12      	ldr	r3, [pc, #72]	; (800e1bc <ReadPortsDir+0x50>)
 800e172:	781b      	ldrb	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d01c      	beq.n	800e1b2 <ReadPortsDir+0x46>
 800e178:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	9301      	str	r3, [sp, #4]
		if (i != myID) {
 800e17e:	4e10      	ldr	r6, [pc, #64]	; (800e1c0 <ReadPortsDir+0x54>)
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
			Delay_ms_no_rtos(50);
			if (responseStatus != BOS_OK) {
 800e180:	4d10      	ldr	r5, [pc, #64]	; (800e1c4 <ReadPortsDir+0x58>)
	for (uint8_t i = 1; i <= N; i++) {
 800e182:	4f0e      	ldr	r7, [pc, #56]	; (800e1bc <ReadPortsDir+0x50>)
 800e184:	e004      	b.n	800e190 <ReadPortsDir+0x24>
 800e186:	3401      	adds	r4, #1
 800e188:	b2e4      	uxtb	r4, r4
 800e18a:	783b      	ldrb	r3, [r7, #0]
 800e18c:	42a3      	cmp	r3, r4
 800e18e:	d312      	bcc.n	800e1b6 <ReadPortsDir+0x4a>
		if (i != myID) {
 800e190:	7833      	ldrb	r3, [r6, #0]
 800e192:	42a3      	cmp	r3, r4
 800e194:	d0f7      	beq.n	800e186 <ReadPortsDir+0x1a>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 800e196:	2200      	movs	r2, #0
 800e198:	2113      	movs	r1, #19
 800e19a:	0020      	movs	r0, r4
 800e19c:	f7f9 fff0 	bl	8008180 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800e1a0:	2032      	movs	r0, #50	; 0x32
 800e1a2:	f7ff fd5b 	bl	800dc5c <StartMilliDelay>
			if (responseStatus != BOS_OK) {
 800e1a6:	782b      	ldrb	r3, [r5, #0]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d0ec      	beq.n	800e186 <ReadPortsDir+0x1a>
				result = BOS_ERR_NoResponse;
 800e1ac:	2302      	movs	r3, #2
 800e1ae:	9301      	str	r3, [sp, #4]
 800e1b0:	e7e9      	b.n	800e186 <ReadPortsDir+0x1a>
	BOS_Status result = BOS_OK;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	9301      	str	r3, [sp, #4]
			}
		}
	}

	return result;
}
 800e1b6:	9801      	ldr	r0, [sp, #4]
 800e1b8:	b003      	add	sp, #12
 800e1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1bc:	20000044 	.word	0x20000044
 800e1c0:	20001792 	.word	0x20001792
 800e1c4:	20001830 	.word	0x20001830

0800e1c8 <ReadPortsDirMSG>:

/* --- Read Ports directions when a pre-defined topology file is used ---
 */
BOS_Status ReadPortsDirMSG(uint8_t SourceModule) {
 800e1c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1ca:	b083      	sub	sp, #12
 800e1cc:	9001      	str	r0, [sp, #4]
	BOS_Status result = BOS_OK;
	uint16_t temp =0;
	/* Check my own ports */
	for (int p = 1; p <= NumOfPorts; p++) {
 800e1ce:	2401      	movs	r4, #1
	uint16_t temp =0;
 800e1d0:	2600      	movs	r6, #0
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e1d2:	2780      	movs	r7, #128	; 0x80
 800e1d4:	023f      	lsls	r7, r7, #8
 800e1d6:	e002      	b.n	800e1de <ReadPortsDirMSG+0x16>
	for (int p = 1; p <= NumOfPorts; p++) {
 800e1d8:	3401      	adds	r4, #1
 800e1da:	2c07      	cmp	r4, #7
 800e1dc:	d00b      	beq.n	800e1f6 <ReadPortsDirMSG+0x2e>
		if (GetUart(p)->AdvancedInit.Swap== UART_ADVFEATURE_SWAP_ENABLE) {
 800e1de:	b2e5      	uxtb	r5, r4
 800e1e0:	0028      	movs	r0, r5
 800e1e2:	f7ff ff15 	bl	800e010 <GetUart>
 800e1e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e1e8:	42bb      	cmp	r3, r7
 800e1ea:	d1f5      	bne.n	800e1d8 <ReadPortsDirMSG+0x10>
			messageParams[temp++] = p;
 800e1ec:	1c73      	adds	r3, r6, #1
 800e1ee:	4a06      	ldr	r2, [pc, #24]	; (800e208 <ReadPortsDirMSG+0x40>)
 800e1f0:	5595      	strb	r5, [r2, r6]
 800e1f2:	b29e      	uxth	r6, r3
 800e1f4:	e7f0      	b.n	800e1d8 <ReadPortsDirMSG+0x10>
		}
	}
	/* Send response */
	SendMessageToModule(SourceModule, CODE_READ_PORT_DIR_RESPONSE, temp);
 800e1f6:	0032      	movs	r2, r6
 800e1f8:	2114      	movs	r1, #20
 800e1fa:	9801      	ldr	r0, [sp, #4]
 800e1fc:	f7f9 ffc0 	bl	8008180 <SendMessageToModule>
	return result;
}
 800e200:	2000      	movs	r0, #0
 800e202:	b003      	add	sp, #12
 800e204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e206:	46c0      	nop			; (mov r8, r8)
 800e208:	20001654 	.word	0x20001654

0800e20c <UpdateMyPortsDir>:
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom ---
*/
BOS_Status UpdateMyPortsDir(void)
{
 800e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e20e:	46c6      	mov	lr, r8
 800e210:	b500      	push	{lr}
 800e212:	2500      	movs	r5, #0
	BOS_Status result = BOS_OK;

	/* Check port direction */
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e214:	2401      	movs	r4, #1
	{
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e216:	4b12      	ldr	r3, [pc, #72]	; (800e260 <UpdateMyPortsDir+0x54>)
 800e218:	4698      	mov	r8, r3
 800e21a:	4f12      	ldr	r7, [pc, #72]	; (800e264 <UpdateMyPortsDir+0x58>)
 800e21c:	2680      	movs	r6, #128	; 0x80
 800e21e:	0236      	lsls	r6, r6, #8
 800e220:	e00a      	b.n	800e238 <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p), NORMAL);
		} else {
			/* Port is reversed */
			SwapUartPins(GetUart(p), REVERSED);
 800e222:	0020      	movs	r0, r4
 800e224:	f7ff fef4 	bl	800e010 <GetUart>
 800e228:	2101      	movs	r1, #1
 800e22a:	f7ff ff67 	bl	800e0fc <SwapUartPins>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++)
 800e22e:	3401      	adds	r4, #1
 800e230:	b2e4      	uxtb	r4, r4
 800e232:	3501      	adds	r5, #1
 800e234:	2c07      	cmp	r4, #7
 800e236:	d00f      	beq.n	800e258 <UpdateMyPortsDir+0x4c>
		if ( !(arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) {
 800e238:	783b      	ldrb	r3, [r7, #0]
 800e23a:	3b01      	subs	r3, #1
 800e23c:	005b      	lsls	r3, r3, #1
 800e23e:	4642      	mov	r2, r8
 800e240:	5a9b      	ldrh	r3, [r3, r2]
 800e242:	0032      	movs	r2, r6
 800e244:	412a      	asrs	r2, r5
 800e246:	421a      	tst	r2, r3
 800e248:	d1eb      	bne.n	800e222 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p), NORMAL);
 800e24a:	0020      	movs	r0, r4
 800e24c:	f7ff fee0 	bl	800e010 <GetUart>
 800e250:	2100      	movs	r1, #0
 800e252:	f7ff ff53 	bl	800e0fc <SwapUartPins>
 800e256:	e7ea      	b.n	800e22e <UpdateMyPortsDir+0x22>
		}
	}

	return result;
}
 800e258:	2000      	movs	r0, #0
 800e25a:	bc04      	pop	{r2}
 800e25c:	4690      	mov	r8, r2
 800e25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e260:	20006f50 	.word	0x20006f50
 800e264:	20001792 	.word	0x20001792

0800e268 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 800e268:	4816      	ldr	r0, [pc, #88]	; (800e2c4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e26a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e26c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e26e:	e003      	b.n	800e278 <LoopCopyDataInit>

0800e270 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e270:	4b15      	ldr	r3, [pc, #84]	; (800e2c8 <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e272:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e274:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e276:	3104      	adds	r1, #4

0800e278 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e278:	4814      	ldr	r0, [pc, #80]	; (800e2cc <LoopForever+0xc>)
  ldr r3, =_edata
 800e27a:	4b15      	ldr	r3, [pc, #84]	; (800e2d0 <LoopForever+0x10>)
  adds r2, r0, r1
 800e27c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e27e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e280:	d3f6      	bcc.n	800e270 <CopyDataInit>
  ldr r2, =_sbss
 800e282:	4a14      	ldr	r2, [pc, #80]	; (800e2d4 <LoopForever+0x14>)
  b LoopFillZerobss
 800e284:	e002      	b.n	800e28c <LoopFillZerobss>

0800e286 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e286:	2300      	movs	r3, #0
  str  r3, [r2]
 800e288:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e28a:	3204      	adds	r2, #4

0800e28c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e28c:	4b12      	ldr	r3, [pc, #72]	; (800e2d8 <LoopForever+0x18>)
  cmp r2, r3
 800e28e:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e290:	d3f9      	bcc.n	800e286 <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e292:	4812      	ldr	r0, [pc, #72]	; (800e2dc <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e294:	4912      	ldr	r1, [pc, #72]	; (800e2e0 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e296:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e298:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e29a:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e29c:	d005      	beq.n	800e2aa <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e29e:	f000 f82b 	bl	800e2f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e2a2:	f005 fb95 	bl	80139d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e2a6:	f005 fb7c 	bl	80139a2 <main>

0800e2aa <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e2aa:	480e      	ldr	r0, [pc, #56]	; (800e2e4 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e2ac:	490e      	ldr	r1, [pc, #56]	; (800e2e8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e2ae:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e2b0:	480e      	ldr	r0, [pc, #56]	; (800e2ec <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e2b2:	490d      	ldr	r1, [pc, #52]	; (800e2e8 <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e2b4:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e2b6:	480e      	ldr	r0, [pc, #56]	; (800e2f0 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e2b8:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e2ba:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e2bc:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e2be:	4700      	bx	r0

0800e2c0 <LoopForever>:


LoopForever:
    b LoopForever
 800e2c0:	e7fe      	b.n	800e2c0 <LoopForever>
 800e2c2:	0000      	.short	0x0000
	  ldr   r0, =_estack
 800e2c4:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e2c8:	0801bb1c 	.word	0x0801bb1c
  ldr r0, =_sdata
 800e2cc:	20000020 	.word	0x20000020
  ldr r3, =_edata
 800e2d0:	20000ac8 	.word	0x20000ac8
  ldr r2, =_sbss
 800e2d4:	20000ac8 	.word	0x20000ac8
  ldr r3, = _ebss
 800e2d8:	20006ff8 	.word	0x20006ff8
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e2dc:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e2e0:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e2e4:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e2e8:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e2ec:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e2f0:	1fffd800 	.word	0x1fffd800

0800e2f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e2f4:	e7fe      	b.n	800e2f4 <ADC1_COMP_IRQHandler>
	...

0800e2f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e2f8:	4b11      	ldr	r3, [pc, #68]	; (800e340 <SystemInit+0x48>)
 800e2fa:	681a      	ldr	r2, [r3, #0]
 800e2fc:	2101      	movs	r1, #1
 800e2fe:	430a      	orrs	r2, r1
 800e300:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e302:	685a      	ldr	r2, [r3, #4]
 800e304:	480f      	ldr	r0, [pc, #60]	; (800e344 <SystemInit+0x4c>)
 800e306:	4002      	ands	r2, r0
 800e308:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e30a:	681a      	ldr	r2, [r3, #0]
 800e30c:	480e      	ldr	r0, [pc, #56]	; (800e348 <SystemInit+0x50>)
 800e30e:	4002      	ands	r2, r0
 800e310:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	480d      	ldr	r0, [pc, #52]	; (800e34c <SystemInit+0x54>)
 800e316:	4002      	ands	r2, r0
 800e318:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e31a:	685a      	ldr	r2, [r3, #4]
 800e31c:	480c      	ldr	r0, [pc, #48]	; (800e350 <SystemInit+0x58>)
 800e31e:	4002      	ands	r2, r0
 800e320:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e324:	200f      	movs	r0, #15
 800e326:	4382      	bics	r2, r0
 800e328:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e32a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e32c:	4809      	ldr	r0, [pc, #36]	; (800e354 <SystemInit+0x5c>)
 800e32e:	4002      	ands	r2, r0
 800e330:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e334:	438a      	bics	r2, r1
 800e336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e338:	2200      	movs	r2, #0
 800e33a:	609a      	str	r2, [r3, #8]

}
 800e33c:	4770      	bx	lr
 800e33e:	46c0      	nop			; (mov r8, r8)
 800e340:	40021000 	.word	0x40021000
 800e344:	08ffb80c 	.word	0x08ffb80c
 800e348:	fef6ffff 	.word	0xfef6ffff
 800e34c:	fffbffff 	.word	0xfffbffff
 800e350:	ffc0ffff 	.word	0xffc0ffff
 800e354:	fff0feac 	.word	0xfff0feac

0800e358 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e358:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800e35a:	f000 fed7 	bl	800f10c <vTaskStartScheduler>
  
  return osOK;
}
 800e35e:	2000      	movs	r0, #0
 800e360:	bd10      	pop	{r4, pc}

0800e362 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e362:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e364:	2800      	cmp	r0, #0
 800e366:	d100      	bne.n	800e36a <osDelay+0x8>
 800e368:	3001      	adds	r0, #1
 800e36a:	f001 f813 	bl	800f394 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e36e:	2000      	movs	r0, #0
 800e370:	bd10      	pop	{r4, pc}

0800e372 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800e372:	b510      	push	{r4, lr}
 800e374:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800e376:	2901      	cmp	r1, #1
 800e378:	d005      	beq.n	800e386 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800e37a:	2100      	movs	r1, #0
 800e37c:	f000 fae7 	bl	800e94e <xQueueCreateCountingSemaphore>
 800e380:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800e382:	0020      	movs	r0, r4
 800e384:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800e386:	2203      	movs	r2, #3
 800e388:	2100      	movs	r1, #0
 800e38a:	f000 fac0 	bl	800e90e <xQueueGenericCreate>
 800e38e:	1e04      	subs	r4, r0, #0
 800e390:	d0f7      	beq.n	800e382 <osSemaphoreCreate+0x10>
 800e392:	2300      	movs	r3, #0
 800e394:	2200      	movs	r2, #0
 800e396:	2100      	movs	r1, #0
 800e398:	f000 fae3 	bl	800e962 <xQueueGenericSend>
 800e39c:	e7f1      	b.n	800e382 <osSemaphoreCreate+0x10>
	...

0800e3a0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800e3a0:	b500      	push	{lr}
 800e3a2:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800e3a8:	2800      	cmp	r0, #0
 800e3aa:	d021      	beq.n	800e3f0 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e3ac:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d010      	beq.n	800e3d6 <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e3b4:	aa01      	add	r2, sp, #4
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	f000 fc3f 	bl	800ec3a <xQueueReceiveFromISR>
 800e3bc:	0003      	movs	r3, r0
      return osErrorOS;
 800e3be:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	d113      	bne.n	800e3ec <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800e3c4:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800e3c6:	9b01      	ldr	r3, [sp, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00f      	beq.n	800e3ec <osSemaphoreWait+0x4c>
 800e3cc:	4b09      	ldr	r3, [pc, #36]	; (800e3f4 <osSemaphoreWait+0x54>)
 800e3ce:	2280      	movs	r2, #128	; 0x80
 800e3d0:	0552      	lsls	r2, r2, #21
 800e3d2:	601a      	str	r2, [r3, #0]
 800e3d4:	e00a      	b.n	800e3ec <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	000a      	movs	r2, r1
 800e3da:	2100      	movs	r1, #0
 800e3dc:	f000 fb9d 	bl	800eb1a <xQueueGenericReceive>
  return osOK;
 800e3e0:	3801      	subs	r0, #1
 800e3e2:	1e43      	subs	r3, r0, #1
 800e3e4:	4198      	sbcs	r0, r3
 800e3e6:	4240      	negs	r0, r0
 800e3e8:	23ff      	movs	r3, #255	; 0xff
 800e3ea:	4018      	ands	r0, r3
}
 800e3ec:	b003      	add	sp, #12
 800e3ee:	bd00      	pop	{pc}
    return osErrorParameter;
 800e3f0:	2080      	movs	r0, #128	; 0x80
 800e3f2:	e7fb      	b.n	800e3ec <osSemaphoreWait+0x4c>
 800e3f4:	e000ed04 	.word	0xe000ed04

0800e3f8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800e3f8:	b500      	push	{lr}
 800e3fa:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	9301      	str	r3, [sp, #4]
 800e400:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00f      	beq.n	800e428 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e408:	a901      	add	r1, sp, #4
 800e40a:	f000 fb5b 	bl	800eac4 <xQueueGiveFromISR>
 800e40e:	0003      	movs	r3, r0
      return osErrorOS;
 800e410:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800e412:	2b01      	cmp	r3, #1
 800e414:	d114      	bne.n	800e440 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800e416:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e418:	9b01      	ldr	r3, [sp, #4]
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d010      	beq.n	800e440 <osSemaphoreRelease+0x48>
 800e41e:	4b09      	ldr	r3, [pc, #36]	; (800e444 <osSemaphoreRelease+0x4c>)
 800e420:	2280      	movs	r2, #128	; 0x80
 800e422:	0552      	lsls	r2, r2, #21
 800e424:	601a      	str	r2, [r3, #0]
 800e426:	e00b      	b.n	800e440 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800e428:	2300      	movs	r3, #0
 800e42a:	2200      	movs	r2, #0
 800e42c:	2100      	movs	r1, #0
 800e42e:	f000 fa98 	bl	800e962 <xQueueGenericSend>
      result = osErrorOS;
 800e432:	3801      	subs	r0, #1
 800e434:	4243      	negs	r3, r0
 800e436:	4158      	adcs	r0, r3
 800e438:	4240      	negs	r0, r0
 800e43a:	23fe      	movs	r3, #254	; 0xfe
 800e43c:	4398      	bics	r0, r3
 800e43e:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800e440:	b003      	add	sp, #12
 800e442:	bd00      	pop	{pc}
 800e444:	e000ed04 	.word	0xe000ed04

0800e448 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800e448:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e44a:	f001 f971 	bl	800f730 <xTaskGetSchedulerState>
 800e44e:	2801      	cmp	r0, #1
 800e450:	d001      	beq.n	800e456 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800e452:	f001 fdb7 	bl	800ffc4 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800e456:	bd10      	pop	{r4, pc}

0800e458 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800e458:	b570      	push	{r4, r5, r6, lr}
 800e45a:	0005      	movs	r5, r0

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800e45c:	2008      	movs	r0, #8
 800e45e:	f001 fded 	bl	801003c <pvPortMalloc>
 800e462:	0004      	movs	r4, r0
portBASE_TYPE xReturn = pdFAIL;
 800e464:	2000      	movs	r0, #0
	configASSERT( pxNewListItem );

	if( pxNewListItem != NULL )
 800e466:	2c00      	cmp	r4, #0
 800e468:	d00b      	beq.n	800e482 <FreeRTOS_CLIRegisterCommand+0x2a>
	{
		taskENTER_CRITICAL();
 800e46a:	f001 fd6b 	bl	800ff44 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800e46e:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800e470:	2300      	movs	r3, #0
 800e472:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800e474:	4b03      	ldr	r3, [pc, #12]	; (800e484 <FreeRTOS_CLIRegisterCommand+0x2c>)
 800e476:	681a      	ldr	r2, [r3, #0]
 800e478:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800e47a:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800e47c:	f001 fd6e 	bl	800ff5c <vPortExitCritical>

		xReturn = pdPASS;
 800e480:	2001      	movs	r0, #1
	}

	return xReturn;
}
 800e482:	bd70      	pop	{r4, r5, r6, pc}
 800e484:	20000108 	.word	0x20000108

0800e488 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800e488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e48a:	46d6      	mov	lr, sl
 800e48c:	b500      	push	{lr}
 800e48e:	b084      	sub	sp, #16
 800e490:	9001      	str	r0, [sp, #4]
 800e492:	9102      	str	r1, [sp, #8]
 800e494:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800e496:	4b37      	ldr	r3, [pc, #220]	; (800e574 <FreeRTOS_CLIProcessCommand+0xec>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00e      	beq.n	800e4bc <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	9a01      	ldr	r2, [sp, #4]
 800e4a4:	9903      	ldr	r1, [sp, #12]
 800e4a6:	9802      	ldr	r0, [sp, #8]
 800e4a8:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d102      	bne.n	800e4b4 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800e4ae:	4b31      	ldr	r3, [pc, #196]	; (800e574 <FreeRTOS_CLIProcessCommand+0xec>)
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800e4b4:	b004      	add	sp, #16
 800e4b6:	bc04      	pop	{r2}
 800e4b8:	4692      	mov	sl, r2
 800e4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e4bc:	4d2e      	ldr	r5, [pc, #184]	; (800e578 <FreeRTOS_CLIProcessCommand+0xf0>)
 800e4be:	4a2d      	ldr	r2, [pc, #180]	; (800e574 <FreeRTOS_CLIProcessCommand+0xec>)
 800e4c0:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e4c2:	3320      	adds	r3, #32
 800e4c4:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e4c6:	0017      	movs	r7, r2
 800e4c8:	e00a      	b.n	800e4e0 <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800e4ca:	0002      	movs	r2, r0
 800e4cc:	0021      	movs	r1, r4
 800e4ce:	9801      	ldr	r0, [sp, #4]
 800e4d0:	f005 ff7a 	bl	80143c8 <strncmp>
 800e4d4:	2800      	cmp	r0, #0
 800e4d6:	d00e      	beq.n	800e4f6 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800e4d8:	686d      	ldr	r5, [r5, #4]
 800e4da:	603d      	str	r5, [r7, #0]
 800e4dc:	2d00      	cmp	r5, #0
 800e4de:	d012      	beq.n	800e506 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800e4e0:	682e      	ldr	r6, [r5, #0]
 800e4e2:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800e4e4:	0020      	movs	r0, r4
 800e4e6:	f7f1 fe17 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800e4ea:	9b01      	ldr	r3, [sp, #4]
 800e4ec:	5c1b      	ldrb	r3, [r3, r0]
 800e4ee:	4652      	mov	r2, sl
 800e4f0:	4393      	bics	r3, r2
 800e4f2:	d1f1      	bne.n	800e4d8 <FreeRTOS_CLIProcessCommand+0x50>
 800e4f4:	e7e9      	b.n	800e4ca <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800e4f6:	200c      	movs	r0, #12
 800e4f8:	5630      	ldrsb	r0, [r6, r0]
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	da0a      	bge.n	800e514 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e4fe:	4b1d      	ldr	r3, [pc, #116]	; (800e574 <FreeRTOS_CLIProcessCommand+0xec>)
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1cb      	bne.n	800e49e <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e506:	9a03      	ldr	r2, [sp, #12]
 800e508:	491c      	ldr	r1, [pc, #112]	; (800e57c <FreeRTOS_CLIProcessCommand+0xf4>)
 800e50a:	9802      	ldr	r0, [sp, #8]
 800e50c:	f005 ff6d 	bl	80143ea <strncpy>
		xReturn = pdFALSE;
 800e510:	2000      	movs	r0, #0
	return xReturn;
 800e512:	e7cf      	b.n	800e4b4 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800e514:	9a01      	ldr	r2, [sp, #4]
 800e516:	2300      	movs	r3, #0
 800e518:	56d3      	ldrsb	r3, [r2, r3]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d027      	beq.n	800e56e <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800e51e:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800e520:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800e522:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800e524:	2501      	movs	r5, #1
 800e526:	e009      	b.n	800e53c <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800e528:	2901      	cmp	r1, #1
 800e52a:	d002      	beq.n	800e532 <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800e52c:	3401      	adds	r4, #1
 800e52e:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800e530:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800e532:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800e534:	2300      	movs	r3, #0
 800e536:	56d3      	ldrsb	r3, [r2, r3]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d003      	beq.n	800e544 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800e53c:	2b20      	cmp	r3, #32
 800e53e:	d0f3      	beq.n	800e528 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800e540:	0031      	movs	r1, r6
 800e542:	e7f6      	b.n	800e532 <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800e544:	2901      	cmp	r1, #1
 800e546:	d00f      	beq.n	800e568 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800e548:	4b0a      	ldr	r3, [pc, #40]	; (800e574 <FreeRTOS_CLIProcessCommand+0xec>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d0da      	beq.n	800e506 <FreeRTOS_CLIProcessCommand+0x7e>
 800e550:	42a0      	cmp	r0, r4
 800e552:	d0a4      	beq.n	800e49e <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800e554:	9a03      	ldr	r2, [sp, #12]
 800e556:	490a      	ldr	r1, [pc, #40]	; (800e580 <FreeRTOS_CLIProcessCommand+0xf8>)
 800e558:	9802      	ldr	r0, [sp, #8]
 800e55a:	f005 ff46 	bl	80143ea <strncpy>
		pxCommand = NULL;
 800e55e:	4b05      	ldr	r3, [pc, #20]	; (800e574 <FreeRTOS_CLIProcessCommand+0xec>)
 800e560:	2200      	movs	r2, #0
 800e562:	601a      	str	r2, [r3, #0]
 800e564:	2000      	movs	r0, #0
 800e566:	e7a5      	b.n	800e4b4 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800e568:	3c01      	subs	r4, #1
 800e56a:	b264      	sxtb	r4, r4
 800e56c:	e7ec      	b.n	800e548 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800e56e:	2400      	movs	r4, #0
 800e570:	e7ea      	b.n	800e548 <FreeRTOS_CLIProcessCommand+0xc0>
 800e572:	46c0      	nop			; (mov r8, r8)
 800e574:	20002880 	.word	0x20002880
 800e578:	2000010c 	.word	0x2000010c
 800e57c:	0801b6b4 	.word	0x0801b6b4
 800e580:	0801b65c 	.word	0x0801b65c

0800e584 <FreeRTOS_CLIGetOutputBuffer>:
}
 800e584:	4800      	ldr	r0, [pc, #0]	; (800e588 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800e586:	4770      	bx	lr
 800e588:	20002618 	.word	0x20002618

0800e58c <FreeRTOS_CLIGetParameter>:
{
 800e58c:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800e592:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800e594:	2900      	cmp	r1, #0
 800e596:	d10b      	bne.n	800e5b0 <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800e598:	2000      	movs	r0, #0
 800e59a:	e02a      	b.n	800e5f2 <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800e59c:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e59e:	2300      	movs	r3, #0
 800e5a0:	56c3      	ldrsb	r3, [r0, r3]
 800e5a2:	2b20      	cmp	r3, #32
 800e5a4:	d0fa      	beq.n	800e59c <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d022      	beq.n	800e5f0 <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800e5aa:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800e5ac:	42a1      	cmp	r1, r4
 800e5ae:	d00d      	beq.n	800e5cc <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	56c3      	ldrsb	r3, [r0, r3]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d01f      	beq.n	800e5f8 <FreeRTOS_CLIGetParameter+0x6c>
 800e5b8:	2b20      	cmp	r3, #32
 800e5ba:	d0ef      	beq.n	800e59c <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800e5bc:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5be:	2300      	movs	r3, #0
 800e5c0:	56c3      	ldrsb	r3, [r0, r3]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d018      	beq.n	800e5f8 <FreeRTOS_CLIGetParameter+0x6c>
 800e5c6:	2b20      	cmp	r3, #32
 800e5c8:	d1f8      	bne.n	800e5bc <FreeRTOS_CLIGetParameter+0x30>
 800e5ca:	e7e7      	b.n	800e59c <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5cc:	7803      	ldrb	r3, [r0, #0]
 800e5ce:	2120      	movs	r1, #32
 800e5d0:	438b      	bics	r3, r1
 800e5d2:	d00f      	beq.n	800e5f4 <FreeRTOS_CLIGetParameter+0x68>
 800e5d4:	0004      	movs	r4, r0
 800e5d6:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800e5d8:	6813      	ldr	r3, [r2, #0]
 800e5da:	3301      	adds	r3, #1
 800e5dc:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800e5de:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800e5e0:	7821      	ldrb	r1, [r4, #0]
 800e5e2:	43a9      	bics	r1, r5
 800e5e4:	d1f8      	bne.n	800e5d8 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800e5e6:	1e5a      	subs	r2, r3, #1
 800e5e8:	4193      	sbcs	r3, r2
 800e5ea:	425b      	negs	r3, r3
 800e5ec:	4018      	ands	r0, r3
 800e5ee:	e000      	b.n	800e5f2 <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800e5f0:	2000      	movs	r0, #0
}
 800e5f2:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	e7fc      	b.n	800e5f2 <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	56c3      	ldrsb	r3, [r0, r3]
 800e5fc:	e7d3      	b.n	800e5a6 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800e600 <prvHelpCommand>:
{
 800e600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e602:	b083      	sub	sp, #12
 800e604:	0004      	movs	r4, r0
 800e606:	000d      	movs	r5, r1
 800e608:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800e60e:	aa01      	add	r2, sp, #4
 800e610:	2101      	movs	r1, #1
 800e612:	f7ff ffbb 	bl	800e58c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800e616:	2800      	cmp	r0, #0
 800e618:	d027      	beq.n	800e66a <prvHelpCommand+0x6a>
 800e61a:	2206      	movs	r2, #6
 800e61c:	4930      	ldr	r1, [pc, #192]	; (800e6e0 <prvHelpCommand+0xe0>)
 800e61e:	f005 fed3 	bl	80143c8 <strncmp>
 800e622:	2800      	cmp	r0, #0
 800e624:	d149      	bne.n	800e6ba <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800e626:	4b2f      	ldr	r3, [pc, #188]	; (800e6e4 <prvHelpCommand+0xe4>)
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	2b07      	cmp	r3, #7
 800e62c:	d012      	beq.n	800e654 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e62e:	1c5f      	adds	r7, r3, #1
 800e630:	b2ff      	uxtb	r7, r7
 800e632:	4a2c      	ldr	r2, [pc, #176]	; (800e6e4 <prvHelpCommand+0xe4>)
 800e634:	7017      	strb	r7, [r2, #0]
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	4a2b      	ldr	r2, [pc, #172]	; (800e6e8 <prvHelpCommand+0xe8>)
 800e63a:	5899      	ldr	r1, [r3, r2]
 800e63c:	002a      	movs	r2, r5
 800e63e:	0020      	movs	r0, r4
 800e640:	f005 fed3 	bl	80143ea <strncpy>
			xReturn = pdTRUE;
 800e644:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800e646:	2f07      	cmp	r7, #7
 800e648:	d137      	bne.n	800e6ba <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800e64a:	4b26      	ldr	r3, [pc, #152]	; (800e6e4 <prvHelpCommand+0xe4>)
 800e64c:	2200      	movs	r2, #0
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	2600      	movs	r6, #0
 800e652:	e032      	b.n	800e6ba <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800e654:	4b23      	ldr	r3, [pc, #140]	; (800e6e4 <prvHelpCommand+0xe4>)
 800e656:	2201      	movs	r2, #1
 800e658:	701a      	strb	r2, [r3, #0]
 800e65a:	4b23      	ldr	r3, [pc, #140]	; (800e6e8 <prvHelpCommand+0xe8>)
 800e65c:	6819      	ldr	r1, [r3, #0]
 800e65e:	002a      	movs	r2, r5
 800e660:	0020      	movs	r0, r4
 800e662:	f005 fec2 	bl	80143ea <strncpy>
			xReturn = pdTRUE;
 800e666:	2601      	movs	r6, #1
 800e668:	e027      	b.n	800e6ba <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800e66a:	4b20      	ldr	r3, [pc, #128]	; (800e6ec <prvHelpCommand+0xec>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d026      	beq.n	800e6c0 <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800e672:	4b1f      	ldr	r3, [pc, #124]	; (800e6f0 <prvHelpCommand+0xf0>)
 800e674:	781a      	ldrb	r2, [r3, #0]
 800e676:	4b1f      	ldr	r3, [pc, #124]	; (800e6f4 <prvHelpCommand+0xf4>)
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d927      	bls.n	800e6ce <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800e67e:	002a      	movs	r2, r5
 800e680:	3a08      	subs	r2, #8
 800e682:	4b1a      	ldr	r3, [pc, #104]	; (800e6ec <prvHelpCommand+0xec>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	6859      	ldr	r1, [r3, #4]
 800e68a:	0020      	movs	r0, r4
 800e68c:	3008      	adds	r0, #8
 800e68e:	f005 feac 	bl	80143ea <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800e692:	1c60      	adds	r0, r4, #1
 800e694:	4918      	ldr	r1, [pc, #96]	; (800e6f8 <prvHelpCommand+0xf8>)
 800e696:	f005 fe8f 	bl	80143b8 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800e69a:	2328      	movs	r3, #40	; 0x28
 800e69c:	7023      	strb	r3, [r4, #0]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	71a3      	strb	r3, [r4, #6]
 800e6a2:	3b09      	subs	r3, #9
 800e6a4:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800e6a6:	4b11      	ldr	r3, [pc, #68]	; (800e6ec <prvHelpCommand+0xec>)
 800e6a8:	681a      	ldr	r2, [r3, #0]
 800e6aa:	6856      	ldr	r6, [r2, #4]
 800e6ac:	601e      	str	r6, [r3, #0]
		counter++;
 800e6ae:	4a10      	ldr	r2, [pc, #64]	; (800e6f0 <prvHelpCommand+0xf0>)
 800e6b0:	7813      	ldrb	r3, [r2, #0]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800e6b6:	1e73      	subs	r3, r6, #1
 800e6b8:	419e      	sbcs	r6, r3
}
 800e6ba:	0030      	movs	r0, r6
 800e6bc:	b003      	add	sp, #12
 800e6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800e6c0:	4b0a      	ldr	r3, [pc, #40]	; (800e6ec <prvHelpCommand+0xec>)
 800e6c2:	4a0e      	ldr	r2, [pc, #56]	; (800e6fc <prvHelpCommand+0xfc>)
 800e6c4:	601a      	str	r2, [r3, #0]
			counter = 1;
 800e6c6:	4b0a      	ldr	r3, [pc, #40]	; (800e6f0 <prvHelpCommand+0xf0>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	701a      	strb	r2, [r3, #0]
 800e6cc:	e7d1      	b.n	800e672 <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800e6ce:	4b07      	ldr	r3, [pc, #28]	; (800e6ec <prvHelpCommand+0xec>)
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	6859      	ldr	r1, [r3, #4]
 800e6d6:	002a      	movs	r2, r5
 800e6d8:	0020      	movs	r0, r4
 800e6da:	f005 fe86 	bl	80143ea <strncpy>
 800e6de:	e7e2      	b.n	800e6a6 <prvHelpCommand+0xa6>
 800e6e0:	080197e4 	.word	0x080197e4
 800e6e4:	20002888 	.word	0x20002888
 800e6e8:	20000080 	.word	0x20000080
 800e6ec:	20002884 	.word	0x20002884
 800e6f0:	2000287c 	.word	0x2000287c
 800e6f4:	20006988 	.word	0x20006988
 800e6f8:	08018b38 	.word	0x08018b38
 800e6fc:	2000010c 	.word	0x2000010c

0800e700 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e700:	0003      	movs	r3, r0
 800e702:	3308      	adds	r3, #8
 800e704:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e706:	2201      	movs	r2, #1
 800e708:	4252      	negs	r2, r2
 800e70a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e70c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e70e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e710:	2300      	movs	r3, #0
 800e712:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e714:	4770      	bx	lr

0800e716 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800e716:	2300      	movs	r3, #0
 800e718:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e71a:	4770      	bx	lr

0800e71c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800e71c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e71e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e720:	689a      	ldr	r2, [r3, #8]
 800e722:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e724:	689a      	ldr	r2, [r3, #8]
 800e726:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e728:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e72a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e72c:	6803      	ldr	r3, [r0, #0]
 800e72e:	3301      	adds	r3, #1
 800e730:	6003      	str	r3, [r0, #0]
}
 800e732:	4770      	bx	lr

0800e734 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e734:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e736:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e738:	0002      	movs	r2, r0
 800e73a:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800e73c:	1c63      	adds	r3, r4, #1
 800e73e:	d102      	bne.n	800e746 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800e740:	6902      	ldr	r2, [r0, #16]
 800e742:	e004      	b.n	800e74e <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e744:	001a      	movs	r2, r3
 800e746:	6853      	ldr	r3, [r2, #4]
 800e748:	681d      	ldr	r5, [r3, #0]
 800e74a:	42a5      	cmp	r5, r4
 800e74c:	d9fa      	bls.n	800e744 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e74e:	6853      	ldr	r3, [r2, #4]
 800e750:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e752:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e754:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800e756:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800e758:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800e75a:	6803      	ldr	r3, [r0, #0]
 800e75c:	3301      	adds	r3, #1
 800e75e:	6003      	str	r3, [r0, #0]
}
 800e760:	bd30      	pop	{r4, r5, pc}

0800e762 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800e762:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e764:	6842      	ldr	r2, [r0, #4]
 800e766:	6881      	ldr	r1, [r0, #8]
 800e768:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e76a:	6882      	ldr	r2, [r0, #8]
 800e76c:	6841      	ldr	r1, [r0, #4]
 800e76e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e770:	685a      	ldr	r2, [r3, #4]
 800e772:	4282      	cmp	r2, r0
 800e774:	d005      	beq.n	800e782 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800e776:	2200      	movs	r2, #0
 800e778:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	1e50      	subs	r0, r2, #1
 800e77e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800e780:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e782:	6882      	ldr	r2, [r0, #8]
 800e784:	605a      	str	r2, [r3, #4]
 800e786:	e7f6      	b.n	800e776 <uxListRemove+0x14>

0800e788 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e788:	b570      	push	{r4, r5, r6, lr}
 800e78a:	0004      	movs	r4, r0
 800e78c:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e78e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e790:	2a00      	cmp	r2, #0
 800e792:	d10d      	bne.n	800e7b0 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800e794:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e796:	6823      	ldr	r3, [r4, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d003      	beq.n	800e7a4 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800e79c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e79e:	3301      	adds	r3, #1
 800e7a0:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800e7a2:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800e7a4:	6860      	ldr	r0, [r4, #4]
 800e7a6:	f001 f811 	bl	800f7cc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	6063      	str	r3, [r4, #4]
 800e7ae:	e7f5      	b.n	800e79c <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800e7b0:	2d00      	cmp	r5, #0
 800e7b2:	d10e      	bne.n	800e7d2 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800e7b4:	6880      	ldr	r0, [r0, #8]
 800e7b6:	f005 fb8e 	bl	8013ed6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800e7ba:	68a3      	ldr	r3, [r4, #8]
 800e7bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e7be:	4694      	mov	ip, r2
 800e7c0:	4463      	add	r3, ip
 800e7c2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800e7c4:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7c6:	6862      	ldr	r2, [r4, #4]
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d3e7      	bcc.n	800e79c <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	60a3      	str	r3, [r4, #8]
 800e7d0:	e7e4      	b.n	800e79c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7d2:	68c0      	ldr	r0, [r0, #12]
 800e7d4:	f005 fb7f 	bl	8013ed6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800e7d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7da:	425a      	negs	r2, r3
 800e7dc:	68e3      	ldr	r3, [r4, #12]
 800e7de:	189b      	adds	r3, r3, r2
 800e7e0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e7e2:	6821      	ldr	r1, [r4, #0]
 800e7e4:	428b      	cmp	r3, r1
 800e7e6:	d203      	bcs.n	800e7f0 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800e7e8:	6863      	ldr	r3, [r4, #4]
 800e7ea:	469c      	mov	ip, r3
 800e7ec:	4462      	add	r2, ip
 800e7ee:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800e7f0:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800e7f2:	2d02      	cmp	r5, #2
 800e7f4:	d1d2      	bne.n	800e79c <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e7f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d0cf      	beq.n	800e79c <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800e7fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e7fe:	3b01      	subs	r3, #1
 800e800:	63a3      	str	r3, [r4, #56]	; 0x38
 800e802:	e7cb      	b.n	800e79c <prvCopyDataToQueue+0x14>

0800e804 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e804:	b510      	push	{r4, lr}
 800e806:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e808:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e80a:	2a00      	cmp	r2, #0
 800e80c:	d00b      	beq.n	800e826 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800e80e:	68c3      	ldr	r3, [r0, #12]
 800e810:	189b      	adds	r3, r3, r2
 800e812:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e814:	6841      	ldr	r1, [r0, #4]
 800e816:	428b      	cmp	r3, r1
 800e818:	d301      	bcc.n	800e81e <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800e81a:	6803      	ldr	r3, [r0, #0]
 800e81c:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800e81e:	68c1      	ldr	r1, [r0, #12]
 800e820:	0020      	movs	r0, r4
 800e822:	f005 fb58 	bl	8013ed6 <memcpy>
	}
}
 800e826:	bd10      	pop	{r4, pc}

0800e828 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e828:	b570      	push	{r4, r5, r6, lr}
 800e82a:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e82c:	f001 fb8a 	bl	800ff44 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e830:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e832:	2b00      	cmp	r3, #0
 800e834:	dd04      	ble.n	800e840 <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e836:	0025      	movs	r5, r4
 800e838:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e83a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d11f      	bne.n	800e880 <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800e840:	2301      	movs	r3, #1
 800e842:	425b      	negs	r3, r3
 800e844:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800e846:	f001 fb89 	bl	800ff5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e84a:	f001 fb7b 	bl	800ff44 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e84e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e850:	2b00      	cmp	r3, #0
 800e852:	dd04      	ble.n	800e85e <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e854:	0025      	movs	r5, r4
 800e856:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e858:	6923      	ldr	r3, [r4, #16]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d121      	bne.n	800e8a2 <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800e85e:	2301      	movs	r3, #1
 800e860:	425b      	negs	r3, r3
 800e862:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e864:	f001 fb7a 	bl	800ff5c <vPortExitCritical>
}
 800e868:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800e86a:	f000 ff5b 	bl	800f724 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800e86e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e870:	3b01      	subs	r3, #1
 800e872:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800e874:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800e876:	2b00      	cmp	r3, #0
 800e878:	dde2      	ble.n	800e840 <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e87a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d0df      	beq.n	800e840 <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e880:	0028      	movs	r0, r5
 800e882:	f000 fedd 	bl	800f640 <xTaskRemoveFromEventList>
 800e886:	2800      	cmp	r0, #0
 800e888:	d0f1      	beq.n	800e86e <prvUnlockQueue+0x46>
 800e88a:	e7ee      	b.n	800e86a <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800e88c:	f000 ff4a 	bl	800f724 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800e890:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e892:	3b01      	subs	r3, #1
 800e894:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800e896:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e898:	2b00      	cmp	r3, #0
 800e89a:	dde0      	ble.n	800e85e <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e89c:	6923      	ldr	r3, [r4, #16]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d0dd      	beq.n	800e85e <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e8a2:	0028      	movs	r0, r5
 800e8a4:	f000 fecc 	bl	800f640 <xTaskRemoveFromEventList>
 800e8a8:	2800      	cmp	r0, #0
 800e8aa:	d0f1      	beq.n	800e890 <prvUnlockQueue+0x68>
 800e8ac:	e7ee      	b.n	800e88c <prvUnlockQueue+0x64>

0800e8ae <xQueueGenericReset>:
{
 800e8ae:	b570      	push	{r4, r5, r6, lr}
 800e8b0:	0004      	movs	r4, r0
 800e8b2:	000d      	movs	r5, r1
	taskENTER_CRITICAL();
 800e8b4:	f001 fb46 	bl	800ff44 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800e8b8:	6822      	ldr	r2, [r4, #0]
 800e8ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e8bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e8be:	434b      	muls	r3, r1
 800e8c0:	18d0      	adds	r0, r2, r3
 800e8c2:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e8c4:	2000      	movs	r0, #0
 800e8c6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e8c8:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800e8ca:	1a5b      	subs	r3, r3, r1
 800e8cc:	18d3      	adds	r3, r2, r3
 800e8ce:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	425b      	negs	r3, r3
 800e8d4:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800e8d6:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800e8d8:	2d00      	cmp	r5, #0
 800e8da:	d10f      	bne.n	800e8fc <xQueueGenericReset+0x4e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e8dc:	6923      	ldr	r3, [r4, #16]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d103      	bne.n	800e8ea <xQueueGenericReset+0x3c>
	taskEXIT_CRITICAL();
 800e8e2:	f001 fb3b 	bl	800ff5c <vPortExitCritical>
}
 800e8e6:	2001      	movs	r0, #1
 800e8e8:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800e8ea:	0020      	movs	r0, r4
 800e8ec:	3010      	adds	r0, #16
 800e8ee:	f000 fea7 	bl	800f640 <xTaskRemoveFromEventList>
 800e8f2:	2801      	cmp	r0, #1
 800e8f4:	d1f5      	bne.n	800e8e2 <xQueueGenericReset+0x34>
					queueYIELD_IF_USING_PREEMPTION();
 800e8f6:	f001 fb19 	bl	800ff2c <vPortYield>
 800e8fa:	e7f2      	b.n	800e8e2 <xQueueGenericReset+0x34>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e8fc:	0020      	movs	r0, r4
 800e8fe:	3010      	adds	r0, #16
 800e900:	f7ff fefe 	bl	800e700 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e904:	0020      	movs	r0, r4
 800e906:	3024      	adds	r0, #36	; 0x24
 800e908:	f7ff fefa 	bl	800e700 <vListInitialise>
 800e90c:	e7e9      	b.n	800e8e2 <xQueueGenericReset+0x34>

0800e90e <xQueueGenericCreate>:
{
 800e90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e910:	0006      	movs	r6, r0
 800e912:	000d      	movs	r5, r1
 800e914:	0017      	movs	r7, r2
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e916:	2900      	cmp	r1, #0
 800e918:	d009      	beq.n	800e92e <xQueueGenericCreate+0x20>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e91a:	4348      	muls	r0, r1
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e91c:	3055      	adds	r0, #85	; 0x55
 800e91e:	f001 fb8d 	bl	801003c <pvPortMalloc>
 800e922:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e924:	d011      	beq.n	800e94a <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800e926:	0003      	movs	r3, r0
 800e928:	3354      	adds	r3, #84	; 0x54
 800e92a:	6003      	str	r3, [r0, #0]
 800e92c:	e005      	b.n	800e93a <xQueueGenericCreate+0x2c>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800e92e:	2054      	movs	r0, #84	; 0x54
 800e930:	f001 fb84 	bl	801003c <pvPortMalloc>
 800e934:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800e936:	d008      	beq.n	800e94a <xQueueGenericCreate+0x3c>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e938:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800e93a:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800e93c:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e93e:	2101      	movs	r1, #1
 800e940:	0020      	movs	r0, r4
 800e942:	f7ff ffb4 	bl	800e8ae <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800e946:	2350      	movs	r3, #80	; 0x50
 800e948:	54e7      	strb	r7, [r4, r3]
}
 800e94a:	0020      	movs	r0, r4
 800e94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e94e <xQueueCreateCountingSemaphore>:
	{
 800e94e:	b510      	push	{r4, lr}
 800e950:	000c      	movs	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e952:	2202      	movs	r2, #2
 800e954:	2100      	movs	r1, #0
 800e956:	f7ff ffda 	bl	800e90e <xQueueGenericCreate>
		if( xHandle != NULL )
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d000      	beq.n	800e960 <xQueueCreateCountingSemaphore+0x12>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e95e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800e960:	bd10      	pop	{r4, pc}

0800e962 <xQueueGenericSend>:
{
 800e962:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e964:	46c6      	mov	lr, r8
 800e966:	b500      	push	{lr}
 800e968:	b084      	sub	sp, #16
 800e96a:	0004      	movs	r4, r0
 800e96c:	9100      	str	r1, [sp, #0]
 800e96e:	9201      	str	r2, [sp, #4]
 800e970:	001f      	movs	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e972:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e974:	2300      	movs	r3, #0
 800e976:	4698      	mov	r8, r3
 800e978:	e030      	b.n	800e9dc <xQueueGenericSend+0x7a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e97a:	003a      	movs	r2, r7
 800e97c:	9900      	ldr	r1, [sp, #0]
 800e97e:	0020      	movs	r0, r4
 800e980:	f7ff ff02 	bl	800e788 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e986:	2b00      	cmp	r3, #0
 800e988:	d108      	bne.n	800e99c <xQueueGenericSend+0x3a>
					else if( xYieldRequired != pdFALSE )
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d10f      	bne.n	800e9ae <xQueueGenericSend+0x4c>
				taskEXIT_CRITICAL();
 800e98e:	f001 fae5 	bl	800ff5c <vPortExitCritical>
				return pdPASS;
 800e992:	2001      	movs	r0, #1
}
 800e994:	b004      	add	sp, #16
 800e996:	bc04      	pop	{r2}
 800e998:	4690      	mov	r8, r2
 800e99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800e99c:	0020      	movs	r0, r4
 800e99e:	3024      	adds	r0, #36	; 0x24
 800e9a0:	f000 fe4e 	bl	800f640 <xTaskRemoveFromEventList>
 800e9a4:	2801      	cmp	r0, #1
 800e9a6:	d1f2      	bne.n	800e98e <xQueueGenericSend+0x2c>
							queueYIELD_IF_USING_PREEMPTION();
 800e9a8:	f001 fac0 	bl	800ff2c <vPortYield>
 800e9ac:	e7ef      	b.n	800e98e <xQueueGenericSend+0x2c>
						queueYIELD_IF_USING_PREEMPTION();
 800e9ae:	f001 fabd 	bl	800ff2c <vPortYield>
 800e9b2:	e7ec      	b.n	800e98e <xQueueGenericSend+0x2c>
					taskEXIT_CRITICAL();
 800e9b4:	f001 fad2 	bl	800ff5c <vPortExitCritical>
					return errQUEUE_FULL;
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	e7eb      	b.n	800e994 <xQueueGenericSend+0x32>
					vTaskSetTimeOutState( &xTimeOut );
 800e9bc:	a802      	add	r0, sp, #8
 800e9be:	f000 fe7b 	bl	800f6b8 <vTaskSetTimeOutState>
 800e9c2:	e018      	b.n	800e9f6 <xQueueGenericSend+0x94>
		prvLockQueue( pxQueue );
 800e9c4:	4643      	mov	r3, r8
 800e9c6:	6463      	str	r3, [r4, #68]	; 0x44
 800e9c8:	e01e      	b.n	800ea08 <xQueueGenericSend+0xa6>
 800e9ca:	4643      	mov	r3, r8
 800e9cc:	64a3      	str	r3, [r4, #72]	; 0x48
 800e9ce:	e01e      	b.n	800ea0e <xQueueGenericSend+0xac>
				prvUnlockQueue( pxQueue );
 800e9d0:	0020      	movs	r0, r4
 800e9d2:	f7ff ff29 	bl	800e828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9d6:	f000 fc65 	bl	800f2a4 <xTaskResumeAll>
 800e9da:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800e9dc:	f001 fab2 	bl	800ff44 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9e2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d3c8      	bcc.n	800e97a <xQueueGenericSend+0x18>
 800e9e8:	2f02      	cmp	r7, #2
 800e9ea:	d0c6      	beq.n	800e97a <xQueueGenericSend+0x18>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9ec:	9b01      	ldr	r3, [sp, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d0e0      	beq.n	800e9b4 <xQueueGenericSend+0x52>
				else if( xEntryTimeSet == pdFALSE )
 800e9f2:	2d00      	cmp	r5, #0
 800e9f4:	d0e2      	beq.n	800e9bc <xQueueGenericSend+0x5a>
		taskEXIT_CRITICAL();
 800e9f6:	f001 fab1 	bl	800ff5c <vPortExitCritical>
		vTaskSuspendAll();
 800e9fa:	f000 fbaf 	bl	800f15c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9fe:	f001 faa1 	bl	800ff44 <vPortEnterCritical>
 800ea02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ea04:	3301      	adds	r3, #1
 800ea06:	d0dd      	beq.n	800e9c4 <xQueueGenericSend+0x62>
 800ea08:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	d0dd      	beq.n	800e9ca <xQueueGenericSend+0x68>
 800ea0e:	f001 faa5 	bl	800ff5c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea12:	a901      	add	r1, sp, #4
 800ea14:	a802      	add	r0, sp, #8
 800ea16:	f000 fe5b 	bl	800f6d0 <xTaskCheckForTimeOut>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	d116      	bne.n	800ea4c <xQueueGenericSend+0xea>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ea1e:	f001 fa91 	bl	800ff44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ea22:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ea24:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800ea26:	f001 fa99 	bl	800ff5c <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ea2a:	42ae      	cmp	r6, r5
 800ea2c:	d1d0      	bne.n	800e9d0 <xQueueGenericSend+0x6e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ea2e:	0020      	movs	r0, r4
 800ea30:	3010      	adds	r0, #16
 800ea32:	9901      	ldr	r1, [sp, #4]
 800ea34:	f000 fdce 	bl	800f5d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea38:	0020      	movs	r0, r4
 800ea3a:	f7ff fef5 	bl	800e828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea3e:	f000 fc31 	bl	800f2a4 <xTaskResumeAll>
 800ea42:	2800      	cmp	r0, #0
 800ea44:	d1c9      	bne.n	800e9da <xQueueGenericSend+0x78>
					portYIELD_WITHIN_API();
 800ea46:	f001 fa71 	bl	800ff2c <vPortYield>
 800ea4a:	e7c6      	b.n	800e9da <xQueueGenericSend+0x78>
			prvUnlockQueue( pxQueue );
 800ea4c:	0020      	movs	r0, r4
 800ea4e:	f7ff feeb 	bl	800e828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea52:	f000 fc27 	bl	800f2a4 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ea56:	2000      	movs	r0, #0
 800ea58:	e79c      	b.n	800e994 <xQueueGenericSend+0x32>

0800ea5a <xQueueGenericSendFromISR>:
{
 800ea5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea5c:	b083      	sub	sp, #12
 800ea5e:	0007      	movs	r7, r0
 800ea60:	9100      	str	r1, [sp, #0]
 800ea62:	9201      	str	r2, [sp, #4]
 800ea64:	001d      	movs	r5, r3
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ea66:	f001 fa83 	bl	800ff70 <ulSetInterruptMaskFromISR>
 800ea6a:	0006      	movs	r6, r0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ea70:	4293      	cmp	r3, r2
 800ea72:	d308      	bcc.n	800ea86 <xQueueGenericSendFromISR+0x2c>
			xReturn = errQUEUE_FULL;
 800ea74:	2400      	movs	r4, #0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ea76:	2d02      	cmp	r5, #2
 800ea78:	d005      	beq.n	800ea86 <xQueueGenericSendFromISR+0x2c>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ea7a:	0030      	movs	r0, r6
 800ea7c:	f001 fa7d 	bl	800ff7a <vClearInterruptMaskFromISR>
}
 800ea80:	0020      	movs	r0, r4
 800ea82:	b003      	add	sp, #12
 800ea84:	bdf0      	pop	{r4, r5, r6, r7, pc}
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ea86:	002a      	movs	r2, r5
 800ea88:	9900      	ldr	r1, [sp, #0]
 800ea8a:	0038      	movs	r0, r7
 800ea8c:	f7ff fe7c 	bl	800e788 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800ea90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea92:	3301      	adds	r3, #1
 800ea94:	d004      	beq.n	800eaa0 <xQueueGenericSendFromISR+0x46>
				++( pxQueue->xTxLock );
 800ea96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea98:	3301      	adds	r3, #1
 800ea9a:	64bb      	str	r3, [r7, #72]	; 0x48
			xReturn = pdPASS;
 800ea9c:	2401      	movs	r4, #1
 800ea9e:	e7ec      	b.n	800ea7a <xQueueGenericSendFromISR+0x20>
 800eaa0:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d0e8      	beq.n	800ea7a <xQueueGenericSendFromISR+0x20>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eaa8:	0038      	movs	r0, r7
 800eaaa:	3024      	adds	r0, #36	; 0x24
 800eaac:	f000 fdc8 	bl	800f640 <xTaskRemoveFromEventList>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	d0e2      	beq.n	800ea7a <xQueueGenericSendFromISR+0x20>
							if( pxHigherPriorityTaskWoken != NULL )
 800eab4:	9a01      	ldr	r2, [sp, #4]
 800eab6:	2a00      	cmp	r2, #0
 800eab8:	d002      	beq.n	800eac0 <xQueueGenericSendFromISR+0x66>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eaba:	2301      	movs	r3, #1
 800eabc:	6013      	str	r3, [r2, #0]
 800eabe:	e7dc      	b.n	800ea7a <xQueueGenericSendFromISR+0x20>
			xReturn = pdPASS;
 800eac0:	2401      	movs	r4, #1
 800eac2:	e7da      	b.n	800ea7a <xQueueGenericSendFromISR+0x20>

0800eac4 <xQueueGiveFromISR>:
{
 800eac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac6:	0004      	movs	r4, r0
 800eac8:	000f      	movs	r7, r1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800eaca:	f001 fa51 	bl	800ff70 <ulSetInterruptMaskFromISR>
 800eace:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ead0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800ead2:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800ead4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800ead6:	4293      	cmp	r3, r2
 800ead8:	d209      	bcs.n	800eaee <xQueueGiveFromISR+0x2a>
			++( pxQueue->uxMessagesWaiting );
 800eada:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eadc:	3301      	adds	r3, #1
 800eade:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800eae0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eae2:	3301      	adds	r3, #1
 800eae4:	d008      	beq.n	800eaf8 <xQueueGiveFromISR+0x34>
				++( pxQueue->xTxLock );
 800eae6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800eae8:	3301      	adds	r3, #1
 800eaea:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800eaec:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800eaee:	0030      	movs	r0, r6
 800eaf0:	f001 fa43 	bl	800ff7a <vClearInterruptMaskFromISR>
}
 800eaf4:	0028      	movs	r0, r5
 800eaf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800eaf8:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eafa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d0f6      	beq.n	800eaee <xQueueGiveFromISR+0x2a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb00:	0020      	movs	r0, r4
 800eb02:	3024      	adds	r0, #36	; 0x24
 800eb04:	f000 fd9c 	bl	800f640 <xTaskRemoveFromEventList>
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d0f0      	beq.n	800eaee <xQueueGiveFromISR+0x2a>
							if( pxHigherPriorityTaskWoken != NULL )
 800eb0c:	2f00      	cmp	r7, #0
 800eb0e:	d002      	beq.n	800eb16 <xQueueGiveFromISR+0x52>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800eb10:	2301      	movs	r3, #1
 800eb12:	603b      	str	r3, [r7, #0]
 800eb14:	e7eb      	b.n	800eaee <xQueueGiveFromISR+0x2a>
			xReturn = pdPASS;
 800eb16:	2501      	movs	r5, #1
 800eb18:	e7e9      	b.n	800eaee <xQueueGiveFromISR+0x2a>

0800eb1a <xQueueGenericReceive>:
{
 800eb1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb1c:	b085      	sub	sp, #20
 800eb1e:	0004      	movs	r4, r0
 800eb20:	9100      	str	r1, [sp, #0]
 800eb22:	9201      	str	r2, [sp, #4]
 800eb24:	001d      	movs	r5, r3
BaseType_t xEntryTimeSet = pdFALSE;
 800eb26:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800eb28:	2600      	movs	r6, #0
 800eb2a:	e048      	b.n	800ebbe <xQueueGenericReceive+0xa4>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800eb2c:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800eb2e:	9900      	ldr	r1, [sp, #0]
 800eb30:	0020      	movs	r0, r4
 800eb32:	f7ff fe67 	bl	800e804 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800eb36:	2d00      	cmp	r5, #0
 800eb38:	d11a      	bne.n	800eb70 <xQueueGenericReceive+0x56>
					--( pxQueue->uxMessagesWaiting );
 800eb3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb40:	6823      	ldr	r3, [r4, #0]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d007      	beq.n	800eb56 <xQueueGenericReceive+0x3c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb46:	6923      	ldr	r3, [r4, #16]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d108      	bne.n	800eb5e <xQueueGenericReceive+0x44>
				taskEXIT_CRITICAL();
 800eb4c:	f001 fa06 	bl	800ff5c <vPortExitCritical>
				return pdPASS;
 800eb50:	2001      	movs	r0, #1
}
 800eb52:	b005      	add	sp, #20
 800eb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800eb56:	f000 ff21 	bl	800f99c <pvTaskIncrementMutexHeldCount>
 800eb5a:	6060      	str	r0, [r4, #4]
 800eb5c:	e7f3      	b.n	800eb46 <xQueueGenericReceive+0x2c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800eb5e:	0020      	movs	r0, r4
 800eb60:	3010      	adds	r0, #16
 800eb62:	f000 fd6d 	bl	800f640 <xTaskRemoveFromEventList>
 800eb66:	2801      	cmp	r0, #1
 800eb68:	d1f0      	bne.n	800eb4c <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800eb6a:	f001 f9df 	bl	800ff2c <vPortYield>
 800eb6e:	e7ed      	b.n	800eb4c <xQueueGenericReceive+0x32>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800eb70:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d0e9      	beq.n	800eb4c <xQueueGenericReceive+0x32>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb78:	0020      	movs	r0, r4
 800eb7a:	3024      	adds	r0, #36	; 0x24
 800eb7c:	f000 fd60 	bl	800f640 <xTaskRemoveFromEventList>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d0e3      	beq.n	800eb4c <xQueueGenericReceive+0x32>
							queueYIELD_IF_USING_PREEMPTION();
 800eb84:	f001 f9d2 	bl	800ff2c <vPortYield>
 800eb88:	e7e0      	b.n	800eb4c <xQueueGenericReceive+0x32>
					taskEXIT_CRITICAL();
 800eb8a:	f001 f9e7 	bl	800ff5c <vPortExitCritical>
					return errQUEUE_EMPTY;
 800eb8e:	2000      	movs	r0, #0
 800eb90:	e7df      	b.n	800eb52 <xQueueGenericReceive+0x38>
					vTaskSetTimeOutState( &xTimeOut );
 800eb92:	a802      	add	r0, sp, #8
 800eb94:	f000 fd90 	bl	800f6b8 <vTaskSetTimeOutState>
 800eb98:	e01b      	b.n	800ebd2 <xQueueGenericReceive+0xb8>
		prvLockQueue( pxQueue );
 800eb9a:	6466      	str	r6, [r4, #68]	; 0x44
 800eb9c:	e022      	b.n	800ebe4 <xQueueGenericReceive+0xca>
 800eb9e:	64a6      	str	r6, [r4, #72]	; 0x48
 800eba0:	e023      	b.n	800ebea <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 800eba2:	f001 f9cf 	bl	800ff44 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800eba6:	6860      	ldr	r0, [r4, #4]
 800eba8:	f000 fdd2 	bl	800f750 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800ebac:	f001 f9d6 	bl	800ff5c <vPortExitCritical>
 800ebb0:	e02d      	b.n	800ec0e <xQueueGenericReceive+0xf4>
				prvUnlockQueue( pxQueue );
 800ebb2:	0020      	movs	r0, r4
 800ebb4:	f7ff fe38 	bl	800e828 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ebb8:	f000 fb74 	bl	800f2a4 <xTaskResumeAll>
 800ebbc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800ebbe:	f001 f9c1 	bl	800ff44 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1b1      	bne.n	800eb2c <xQueueGenericReceive+0x12>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ebc8:	9b01      	ldr	r3, [sp, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d0dd      	beq.n	800eb8a <xQueueGenericReceive+0x70>
				else if( xEntryTimeSet == pdFALSE )
 800ebce:	2f00      	cmp	r7, #0
 800ebd0:	d0df      	beq.n	800eb92 <xQueueGenericReceive+0x78>
		taskEXIT_CRITICAL();
 800ebd2:	f001 f9c3 	bl	800ff5c <vPortExitCritical>
		vTaskSuspendAll();
 800ebd6:	f000 fac1 	bl	800f15c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebda:	f001 f9b3 	bl	800ff44 <vPortEnterCritical>
 800ebde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	d0da      	beq.n	800eb9a <xQueueGenericReceive+0x80>
 800ebe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ebe6:	3301      	adds	r3, #1
 800ebe8:	d0d9      	beq.n	800eb9e <xQueueGenericReceive+0x84>
 800ebea:	f001 f9b7 	bl	800ff5c <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebee:	a901      	add	r1, sp, #4
 800ebf0:	a802      	add	r0, sp, #8
 800ebf2:	f000 fd6d 	bl	800f6d0 <xTaskCheckForTimeOut>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d118      	bne.n	800ec2c <xQueueGenericReceive+0x112>
	taskENTER_CRITICAL();
 800ebfa:	f001 f9a3 	bl	800ff44 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ebfe:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800ec00:	f001 f9ac 	bl	800ff5c <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec04:	2f00      	cmp	r7, #0
 800ec06:	d1d4      	bne.n	800ebb2 <xQueueGenericReceive+0x98>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec08:	6823      	ldr	r3, [r4, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d0c9      	beq.n	800eba2 <xQueueGenericReceive+0x88>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec0e:	0020      	movs	r0, r4
 800ec10:	3024      	adds	r0, #36	; 0x24
 800ec12:	9901      	ldr	r1, [sp, #4]
 800ec14:	f000 fcde 	bl	800f5d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec18:	0020      	movs	r0, r4
 800ec1a:	f7ff fe05 	bl	800e828 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec1e:	f000 fb41 	bl	800f2a4 <xTaskResumeAll>
 800ec22:	2800      	cmp	r0, #0
 800ec24:	d1ca      	bne.n	800ebbc <xQueueGenericReceive+0xa2>
					portYIELD_WITHIN_API();
 800ec26:	f001 f981 	bl	800ff2c <vPortYield>
 800ec2a:	e7c7      	b.n	800ebbc <xQueueGenericReceive+0xa2>
			prvUnlockQueue( pxQueue );
 800ec2c:	0020      	movs	r0, r4
 800ec2e:	f7ff fdfb 	bl	800e828 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec32:	f000 fb37 	bl	800f2a4 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800ec36:	2000      	movs	r0, #0
 800ec38:	e78b      	b.n	800eb52 <xQueueGenericReceive+0x38>

0800ec3a <xQueueReceiveFromISR>:
{
 800ec3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec3c:	b083      	sub	sp, #12
 800ec3e:	0006      	movs	r6, r0
 800ec40:	9101      	str	r1, [sp, #4]
 800ec42:	0017      	movs	r7, r2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ec44:	f001 f994 	bl	800ff70 <ulSetInterruptMaskFromISR>
 800ec48:	0005      	movs	r5, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec4a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			xReturn = pdFAIL;
 800ec4c:	2400      	movs	r4, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d105      	bne.n	800ec5e <xQueueReceiveFromISR+0x24>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800ec52:	0028      	movs	r0, r5
 800ec54:	f001 f991 	bl	800ff7a <vClearInterruptMaskFromISR>
}
 800ec58:	0020      	movs	r0, r4
 800ec5a:	b003      	add	sp, #12
 800ec5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec5e:	9901      	ldr	r1, [sp, #4]
 800ec60:	0030      	movs	r0, r6
 800ec62:	f7ff fdcf 	bl	800e804 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800ec66:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	63b3      	str	r3, [r6, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800ec6c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ec6e:	3301      	adds	r3, #1
 800ec70:	d004      	beq.n	800ec7c <xQueueReceiveFromISR+0x42>
				++( pxQueue->xRxLock );
 800ec72:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800ec74:	3301      	adds	r3, #1
 800ec76:	6473      	str	r3, [r6, #68]	; 0x44
			xReturn = pdPASS;
 800ec78:	2401      	movs	r4, #1
 800ec7a:	e7ea      	b.n	800ec52 <xQueueReceiveFromISR+0x18>
 800ec7c:	3401      	adds	r4, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec7e:	6933      	ldr	r3, [r6, #16]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d0e6      	beq.n	800ec52 <xQueueReceiveFromISR+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec84:	0030      	movs	r0, r6
 800ec86:	3010      	adds	r0, #16
 800ec88:	f000 fcda 	bl	800f640 <xTaskRemoveFromEventList>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d0e0      	beq.n	800ec52 <xQueueReceiveFromISR+0x18>
						if( pxHigherPriorityTaskWoken != NULL )
 800ec90:	2f00      	cmp	r7, #0
 800ec92:	d002      	beq.n	800ec9a <xQueueReceiveFromISR+0x60>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ec94:	2301      	movs	r3, #1
 800ec96:	603b      	str	r3, [r7, #0]
 800ec98:	e7db      	b.n	800ec52 <xQueueReceiveFromISR+0x18>
			xReturn = pdPASS;
 800ec9a:	2401      	movs	r4, #1
 800ec9c:	e7d9      	b.n	800ec52 <xQueueReceiveFromISR+0x18>
	...

0800eca0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eca0:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eca2:	4b0a      	ldr	r3, [pc, #40]	; (800eccc <vQueueAddToRegistry+0x2c>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d009      	beq.n	800ecbe <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecaa:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ecac:	4c07      	ldr	r4, [pc, #28]	; (800eccc <vQueueAddToRegistry+0x2c>)
 800ecae:	00da      	lsls	r2, r3, #3
 800ecb0:	58a2      	ldr	r2, [r4, r2]
 800ecb2:	2a00      	cmp	r2, #0
 800ecb4:	d004      	beq.n	800ecc0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	2b08      	cmp	r3, #8
 800ecba:	d1f8      	bne.n	800ecae <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ecbc:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ecbe:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ecc0:	4a02      	ldr	r2, [pc, #8]	; (800eccc <vQueueAddToRegistry+0x2c>)
 800ecc2:	00db      	lsls	r3, r3, #3
 800ecc4:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ecc6:	18d3      	adds	r3, r2, r3
 800ecc8:	6058      	str	r0, [r3, #4]
				break;
 800ecca:	e7f7      	b.n	800ecbc <vQueueAddToRegistry+0x1c>
 800eccc:	20006f84 	.word	0x20006f84

0800ecd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800ecd0:	b570      	push	{r4, r5, r6, lr}
 800ecd2:	0004      	movs	r4, r0
 800ecd4:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ecd6:	f001 f935 	bl	800ff44 <vPortEnterCritical>
 800ecda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ecdc:	3301      	adds	r3, #1
 800ecde:	d00b      	beq.n	800ecf8 <vQueueWaitForMessageRestricted+0x28>
 800ece0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800ece2:	3301      	adds	r3, #1
 800ece4:	d00b      	beq.n	800ecfe <vQueueWaitForMessageRestricted+0x2e>
 800ece6:	f001 f939 	bl	800ff5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ecea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d009      	beq.n	800ed04 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ecf0:	0020      	movs	r0, r4
 800ecf2:	f7ff fd99 	bl	800e828 <prvUnlockQueue>
	}
 800ecf6:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	6463      	str	r3, [r4, #68]	; 0x44
 800ecfc:	e7f0      	b.n	800ece0 <vQueueWaitForMessageRestricted+0x10>
 800ecfe:	2300      	movs	r3, #0
 800ed00:	64a3      	str	r3, [r4, #72]	; 0x48
 800ed02:	e7f0      	b.n	800ece6 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ed04:	0020      	movs	r0, r4
 800ed06:	3024      	adds	r0, #36	; 0x24
 800ed08:	0029      	movs	r1, r5
 800ed0a:	f000 fc83 	bl	800f614 <vTaskPlaceOnEventListRestricted>
 800ed0e:	e7ef      	b.n	800ecf0 <vQueueWaitForMessageRestricted+0x20>

0800ed10 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800ed10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed12:	46d6      	mov	lr, sl
 800ed14:	464f      	mov	r7, r9
 800ed16:	4646      	mov	r6, r8
 800ed18:	b5c0      	push	{r6, r7, lr}
 800ed1a:	0006      	movs	r6, r0
 800ed1c:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800ed1e:	6808      	ldr	r0, [r1, #0]
 800ed20:	2800      	cmp	r0, #0
 800ed22:	d044      	beq.n	800edae <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ed24:	684b      	ldr	r3, [r1, #4]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	604b      	str	r3, [r1, #4]
 800ed2a:	2208      	movs	r2, #8
 800ed2c:	4690      	mov	r8, r2
 800ed2e:	4488      	add	r8, r1
 800ed30:	4543      	cmp	r3, r8
 800ed32:	d006      	beq.n	800ed42 <prvListTaskWithinSingleList+0x32>
 800ed34:	684b      	ldr	r3, [r1, #4]
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800ed3a:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800ed3c:	2302      	movs	r3, #2
 800ed3e:	469a      	mov	sl, r3
 800ed40:	e018      	b.n	800ed74 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800ed42:	68cb      	ldr	r3, [r1, #12]
 800ed44:	604b      	str	r3, [r1, #4]
 800ed46:	e7f5      	b.n	800ed34 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ed48:	68cb      	ldr	r3, [r1, #12]
 800ed4a:	604b      	str	r3, [r1, #4]
 800ed4c:	e017      	b.n	800ed7e <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800ed4e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800ed50:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800ed52:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800ed54:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800ed56:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed58:	783b      	ldrb	r3, [r7, #0]
 800ed5a:	2ba5      	cmp	r3, #165	; 0xa5
 800ed5c:	d125      	bne.n	800edaa <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800ed5e:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800ed60:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800ed62:	5cfc      	ldrb	r4, [r7, r3]
 800ed64:	2ca5      	cmp	r4, #165	; 0xa5
 800ed66:	d0fb      	beq.n	800ed60 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800ed68:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800ed6a:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800ed70:	45a9      	cmp	r9, r5
 800ed72:	d01c      	beq.n	800edae <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800ed74:	684b      	ldr	r3, [r1, #4]
 800ed76:	685b      	ldr	r3, [r3, #4]
 800ed78:	604b      	str	r3, [r1, #4]
 800ed7a:	4598      	cmp	r8, r3
 800ed7c:	d0e4      	beq.n	800ed48 <prvListTaskWithinSingleList+0x38>
 800ed7e:	684b      	ldr	r3, [r1, #4]
 800ed80:	68dd      	ldr	r5, [r3, #12]
 800ed82:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800ed84:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800ed86:	002b      	movs	r3, r5
 800ed88:	3334      	adds	r3, #52	; 0x34
 800ed8a:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800ed8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800ed8e:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800ed90:	4663      	mov	r3, ip
 800ed92:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800ed94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ed96:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800ed98:	4663      	mov	r3, ip
 800ed9a:	2b03      	cmp	r3, #3
 800ed9c:	d1d7      	bne.n	800ed4e <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800ed9e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d0d4      	beq.n	800ed4e <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800eda4:	4653      	mov	r3, sl
 800eda6:	7333      	strb	r3, [r6, #12]
 800eda8:	e7d1      	b.n	800ed4e <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800edaa:	2300      	movs	r3, #0
 800edac:	e7dc      	b.n	800ed68 <prvListTaskWithinSingleList+0x58>
	}
 800edae:	bc1c      	pop	{r2, r3, r4}
 800edb0:	4690      	mov	r8, r2
 800edb2:	4699      	mov	r9, r3
 800edb4:	46a2      	mov	sl, r4
 800edb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edb8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800edb8:	4b08      	ldr	r3, [pc, #32]	; (800eddc <prvResetNextTaskUnblockTime+0x24>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d007      	beq.n	800edd2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800edc2:	4b06      	ldr	r3, [pc, #24]	; (800eddc <prvResetNextTaskUnblockTime+0x24>)
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800edc8:	68db      	ldr	r3, [r3, #12]
 800edca:	685a      	ldr	r2, [r3, #4]
 800edcc:	4b04      	ldr	r3, [pc, #16]	; (800ede0 <prvResetNextTaskUnblockTime+0x28>)
 800edce:	601a      	str	r2, [r3, #0]
	}
}
 800edd0:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800edd2:	4b03      	ldr	r3, [pc, #12]	; (800ede0 <prvResetNextTaskUnblockTime+0x28>)
 800edd4:	2201      	movs	r2, #1
 800edd6:	4252      	negs	r2, r2
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	e7f9      	b.n	800edd0 <prvResetNextTaskUnblockTime+0x18>
 800eddc:	20002890 	.word	0x20002890
 800ede0:	20000114 	.word	0x20000114

0800ede4 <prvAddCurrentTaskToDelayedList>:
{
 800ede4:	b510      	push	{r4, lr}
 800ede6:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800ede8:	4b0e      	ldr	r3, [pc, #56]	; (800ee24 <prvAddCurrentTaskToDelayedList+0x40>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800edee:	4b0e      	ldr	r3, [pc, #56]	; (800ee28 <prvAddCurrentTaskToDelayedList+0x44>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	4283      	cmp	r3, r0
 800edf4:	d80d      	bhi.n	800ee12 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800edf6:	4b0d      	ldr	r3, [pc, #52]	; (800ee2c <prvAddCurrentTaskToDelayedList+0x48>)
 800edf8:	6818      	ldr	r0, [r3, #0]
 800edfa:	4b0a      	ldr	r3, [pc, #40]	; (800ee24 <prvAddCurrentTaskToDelayedList+0x40>)
 800edfc:	6819      	ldr	r1, [r3, #0]
 800edfe:	3104      	adds	r1, #4
 800ee00:	f7ff fc98 	bl	800e734 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800ee04:	4b0a      	ldr	r3, [pc, #40]	; (800ee30 <prvAddCurrentTaskToDelayedList+0x4c>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	42a3      	cmp	r3, r4
 800ee0a:	d909      	bls.n	800ee20 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800ee0c:	4b08      	ldr	r3, [pc, #32]	; (800ee30 <prvAddCurrentTaskToDelayedList+0x4c>)
 800ee0e:	601c      	str	r4, [r3, #0]
}
 800ee10:	e006      	b.n	800ee20 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ee12:	4b08      	ldr	r3, [pc, #32]	; (800ee34 <prvAddCurrentTaskToDelayedList+0x50>)
 800ee14:	6818      	ldr	r0, [r3, #0]
 800ee16:	4b03      	ldr	r3, [pc, #12]	; (800ee24 <prvAddCurrentTaskToDelayedList+0x40>)
 800ee18:	6819      	ldr	r1, [r3, #0]
 800ee1a:	3104      	adds	r1, #4
 800ee1c:	f7ff fc8a 	bl	800e734 <vListInsert>
}
 800ee20:	bd10      	pop	{r4, pc}
 800ee22:	46c0      	nop			; (mov r8, r8)
 800ee24:	2000288c 	.word	0x2000288c
 800ee28:	200029ac 	.word	0x200029ac
 800ee2c:	20002890 	.word	0x20002890
 800ee30:	20000114 	.word	0x20000114
 800ee34:	20002894 	.word	0x20002894

0800ee38 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ee38:	b510      	push	{r4, lr}
 800ee3a:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ee3c:	f005 fabc 	bl	80143b8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ee40:	0020      	movs	r0, r4
 800ee42:	f7f1 f969 	bl	8000118 <strlen>
 800ee46:	0003      	movs	r3, r0
 800ee48:	280b      	cmp	r0, #11
 800ee4a:	dc08      	bgt.n	800ee5e <prvWriteNameToBuffer+0x26>
 800ee4c:	1820      	adds	r0, r4, r0
 800ee4e:	0022      	movs	r2, r4
 800ee50:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800ee52:	2320      	movs	r3, #32
 800ee54:	7003      	strb	r3, [r0, #0]
 800ee56:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ee58:	4290      	cmp	r0, r2
 800ee5a:	d1fb      	bne.n	800ee54 <prvWriteNameToBuffer+0x1c>
 800ee5c:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800ee5e:	18e0      	adds	r0, r4, r3
 800ee60:	2300      	movs	r3, #0
 800ee62:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800ee64:	bd10      	pop	{r4, pc}
	...

0800ee68 <xTaskGenericCreate>:
{
 800ee68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee6a:	46c6      	mov	lr, r8
 800ee6c:	b500      	push	{lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	9000      	str	r0, [sp, #0]
 800ee72:	000c      	movs	r4, r1
 800ee74:	0015      	movs	r5, r2
 800ee76:	9301      	str	r3, [sp, #4]
 800ee78:	9f0a      	ldr	r7, [sp, #40]	; 0x28
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee7a:	2f00      	cmp	r7, #0
 800ee7c:	d064      	beq.n	800ef48 <xTaskGenericCreate+0xe0>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800ee7e:	2060      	movs	r0, #96	; 0x60
 800ee80:	f001 f8dc 	bl	801003c <pvPortMalloc>
 800ee84:	1e06      	subs	r6, r0, #0
			if( pxNewTCB != NULL )
 800ee86:	d067      	beq.n	800ef58 <xTaskGenericCreate+0xf0>
				pxNewTCB->pxStack = pxStack;
 800ee88:	6307      	str	r7, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800ee8a:	00aa      	lsls	r2, r5, #2
 800ee8c:	21a5      	movs	r1, #165	; 0xa5
 800ee8e:	0038      	movs	r0, r7
 800ee90:	f005 f82a 	bl	8013ee8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800ee94:	4b5a      	ldr	r3, [pc, #360]	; (800f000 <xTaskGenericCreate+0x198>)
 800ee96:	18eb      	adds	r3, r5, r3
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800ee9c:	4694      	mov	ip, r2
 800ee9e:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800eea0:	2207      	movs	r2, #7
 800eea2:	4393      	bics	r3, r2
 800eea4:	4698      	mov	r8, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800eea6:	7822      	ldrb	r2, [r4, #0]
 800eea8:	2334      	movs	r3, #52	; 0x34
 800eeaa:	54f2      	strb	r2, [r6, r3]
		if( pcName[ x ] == 0x00 )
 800eeac:	7823      	ldrb	r3, [r4, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00d      	beq.n	800eece <xTaskGenericCreate+0x66>
 800eeb2:	1c61      	adds	r1, r4, #1
 800eeb4:	0033      	movs	r3, r6
 800eeb6:	3335      	adds	r3, #53	; 0x35
 800eeb8:	0030      	movs	r0, r6
 800eeba:	3041      	adds	r0, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800eebc:	780a      	ldrb	r2, [r1, #0]
 800eebe:	701a      	strb	r2, [r3, #0]
		if( pcName[ x ] == 0x00 )
 800eec0:	780a      	ldrb	r2, [r1, #0]
 800eec2:	2a00      	cmp	r2, #0
 800eec4:	d003      	beq.n	800eece <xTaskGenericCreate+0x66>
 800eec6:	3101      	adds	r1, #1
 800eec8:	3301      	adds	r3, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800eeca:	4283      	cmp	r3, r0
 800eecc:	d1f6      	bne.n	800eebc <xTaskGenericCreate+0x54>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eece:	2340      	movs	r3, #64	; 0x40
 800eed0:	2200      	movs	r2, #0
 800eed2:	54f2      	strb	r2, [r6, r3]
 800eed4:	9d08      	ldr	r5, [sp, #32]
 800eed6:	2d06      	cmp	r5, #6
 800eed8:	d900      	bls.n	800eedc <xTaskGenericCreate+0x74>
 800eeda:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800eedc:	62f5      	str	r5, [r6, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800eede:	64f5      	str	r5, [r6, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800eee0:	2400      	movs	r4, #0
 800eee2:	6534      	str	r4, [r6, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800eee4:	1d37      	adds	r7, r6, #4
 800eee6:	0038      	movs	r0, r7
 800eee8:	f7ff fc15 	bl	800e716 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800eeec:	0030      	movs	r0, r6
 800eeee:	3018      	adds	r0, #24
 800eef0:	f7ff fc11 	bl	800e716 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800eef4:	6136      	str	r6, [r6, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eef6:	2307      	movs	r3, #7
 800eef8:	1b5b      	subs	r3, r3, r5
 800eefa:	61b3      	str	r3, [r6, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800eefc:	6276      	str	r6, [r6, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800eefe:	6574      	str	r4, [r6, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800ef00:	65b4      	str	r4, [r6, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800ef02:	235c      	movs	r3, #92	; 0x5c
 800ef04:	54f4      	strb	r4, [r6, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ef06:	9a01      	ldr	r2, [sp, #4]
 800ef08:	9900      	ldr	r1, [sp, #0]
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	f000 ffd2 	bl	800feb4 <pxPortInitialiseStack>
 800ef10:	6030      	str	r0, [r6, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800ef12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d000      	beq.n	800ef1a <xTaskGenericCreate+0xb2>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ef18:	601e      	str	r6, [r3, #0]
		taskENTER_CRITICAL();
 800ef1a:	f001 f813 	bl	800ff44 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800ef1e:	4a39      	ldr	r2, [pc, #228]	; (800f004 <xTaskGenericCreate+0x19c>)
 800ef20:	6813      	ldr	r3, [r2, #0]
 800ef22:	3301      	adds	r3, #1
 800ef24:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800ef26:	4b38      	ldr	r3, [pc, #224]	; (800f008 <xTaskGenericCreate+0x1a0>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d01a      	beq.n	800ef64 <xTaskGenericCreate+0xfc>
				if( xSchedulerRunning == pdFALSE )
 800ef2e:	4b37      	ldr	r3, [pc, #220]	; (800f00c <xTaskGenericCreate+0x1a4>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d11b      	bne.n	800ef6e <xTaskGenericCreate+0x106>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800ef36:	4b34      	ldr	r3, [pc, #208]	; (800f008 <xTaskGenericCreate+0x1a0>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef3c:	9a08      	ldr	r2, [sp, #32]
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d815      	bhi.n	800ef6e <xTaskGenericCreate+0x106>
						pxCurrentTCB = pxNewTCB;
 800ef42:	4b31      	ldr	r3, [pc, #196]	; (800f008 <xTaskGenericCreate+0x1a0>)
 800ef44:	601e      	str	r6, [r3, #0]
 800ef46:	e012      	b.n	800ef6e <xTaskGenericCreate+0x106>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef48:	0090      	lsls	r0, r2, #2
 800ef4a:	f001 f877 	bl	801003c <pvPortMalloc>
 800ef4e:	1e07      	subs	r7, r0, #0
		if( pxStack != NULL )
 800ef50:	d195      	bne.n	800ee7e <xTaskGenericCreate+0x16>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef52:	2001      	movs	r0, #1
 800ef54:	4240      	negs	r0, r0
 800ef56:	e02b      	b.n	800efb0 <xTaskGenericCreate+0x148>
				vPortFree( pxStack );
 800ef58:	0038      	movs	r0, r7
 800ef5a:	f001 f8fd 	bl	8010158 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ef5e:	2001      	movs	r0, #1
 800ef60:	4240      	negs	r0, r0
 800ef62:	e025      	b.n	800efb0 <xTaskGenericCreate+0x148>
				pxCurrentTCB =  pxNewTCB;
 800ef64:	4b28      	ldr	r3, [pc, #160]	; (800f008 <xTaskGenericCreate+0x1a0>)
 800ef66:	601e      	str	r6, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ef68:	6813      	ldr	r3, [r2, #0]
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d024      	beq.n	800efb8 <xTaskGenericCreate+0x150>
			uxTaskNumber++;
 800ef6e:	4a28      	ldr	r2, [pc, #160]	; (800f010 <xTaskGenericCreate+0x1a8>)
 800ef70:	6813      	ldr	r3, [r2, #0]
 800ef72:	3301      	adds	r3, #1
 800ef74:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ef76:	6473      	str	r3, [r6, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800ef78:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800ef7a:	4a26      	ldr	r2, [pc, #152]	; (800f014 <xTaskGenericCreate+0x1ac>)
 800ef7c:	6812      	ldr	r2, [r2, #0]
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d901      	bls.n	800ef86 <xTaskGenericCreate+0x11e>
 800ef82:	4a24      	ldr	r2, [pc, #144]	; (800f014 <xTaskGenericCreate+0x1ac>)
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	0098      	lsls	r0, r3, #2
 800ef88:	18c0      	adds	r0, r0, r3
 800ef8a:	0080      	lsls	r0, r0, #2
 800ef8c:	4b22      	ldr	r3, [pc, #136]	; (800f018 <xTaskGenericCreate+0x1b0>)
 800ef8e:	18c0      	adds	r0, r0, r3
 800ef90:	0039      	movs	r1, r7
 800ef92:	f7ff fbc3 	bl	800e71c <vListInsertEnd>
		taskEXIT_CRITICAL();
 800ef96:	f000 ffe1 	bl	800ff5c <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800ef9a:	4b1c      	ldr	r3, [pc, #112]	; (800f00c <xTaskGenericCreate+0x1a4>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800ef9e:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d005      	beq.n	800efb0 <xTaskGenericCreate+0x148>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800efa4:	4b18      	ldr	r3, [pc, #96]	; (800f008 <xTaskGenericCreate+0x1a0>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efaa:	9a08      	ldr	r2, [sp, #32]
 800efac:	4293      	cmp	r3, r2
 800efae:	d322      	bcc.n	800eff6 <xTaskGenericCreate+0x18e>
}
 800efb0:	b002      	add	sp, #8
 800efb2:	bc04      	pop	{r2}
 800efb4:	4690      	mov	r8, r2
 800efb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efb8:	4c17      	ldr	r4, [pc, #92]	; (800f018 <xTaskGenericCreate+0x1b0>)
 800efba:	0025      	movs	r5, r4
 800efbc:	358c      	adds	r5, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800efbe:	0020      	movs	r0, r4
 800efc0:	f7ff fb9e 	bl	800e700 <vListInitialise>
 800efc4:	3414      	adds	r4, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800efc6:	42ac      	cmp	r4, r5
 800efc8:	d1f9      	bne.n	800efbe <xTaskGenericCreate+0x156>
	vListInitialise( &xDelayedTaskList1 );
 800efca:	4d14      	ldr	r5, [pc, #80]	; (800f01c <xTaskGenericCreate+0x1b4>)
 800efcc:	0028      	movs	r0, r5
 800efce:	f7ff fb97 	bl	800e700 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800efd2:	4c13      	ldr	r4, [pc, #76]	; (800f020 <xTaskGenericCreate+0x1b8>)
 800efd4:	0020      	movs	r0, r4
 800efd6:	f7ff fb93 	bl	800e700 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800efda:	4812      	ldr	r0, [pc, #72]	; (800f024 <xTaskGenericCreate+0x1bc>)
 800efdc:	f7ff fb90 	bl	800e700 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800efe0:	4811      	ldr	r0, [pc, #68]	; (800f028 <xTaskGenericCreate+0x1c0>)
 800efe2:	f7ff fb8d 	bl	800e700 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800efe6:	4811      	ldr	r0, [pc, #68]	; (800f02c <xTaskGenericCreate+0x1c4>)
 800efe8:	f7ff fb8a 	bl	800e700 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800efec:	4b10      	ldr	r3, [pc, #64]	; (800f030 <xTaskGenericCreate+0x1c8>)
 800efee:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eff0:	4b10      	ldr	r3, [pc, #64]	; (800f034 <xTaskGenericCreate+0x1cc>)
 800eff2:	601c      	str	r4, [r3, #0]
 800eff4:	e7bb      	b.n	800ef6e <xTaskGenericCreate+0x106>
				taskYIELD_IF_USING_PREEMPTION();
 800eff6:	f000 ff99 	bl	800ff2c <vPortYield>
			xReturn = pdPASS;
 800effa:	2001      	movs	r0, #1
 800effc:	e7d8      	b.n	800efb0 <xTaskGenericCreate+0x148>
 800effe:	46c0      	nop			; (mov r8, r8)
 800f000:	3fffffff 	.word	0x3fffffff
 800f004:	20002928 	.word	0x20002928
 800f008:	2000288c 	.word	0x2000288c
 800f00c:	20002980 	.word	0x20002980
 800f010:	20002934 	.word	0x20002934
 800f014:	2000293c 	.word	0x2000293c
 800f018:	20002898 	.word	0x20002898
 800f01c:	20002940 	.word	0x20002940
 800f020:	20002954 	.word	0x20002954
 800f024:	2000296c 	.word	0x2000296c
 800f028:	20002998 	.word	0x20002998
 800f02c:	20002984 	.word	0x20002984
 800f030:	20002890 	.word	0x20002890
 800f034:	20002894 	.word	0x20002894

0800f038 <uxTaskPriorityGet>:
	{
 800f038:	b510      	push	{r4, lr}
 800f03a:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f03c:	f000 ff82 	bl	800ff44 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f040:	2c00      	cmp	r4, #0
 800f042:	d004      	beq.n	800f04e <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f044:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f046:	f000 ff89 	bl	800ff5c <vPortExitCritical>
	}
 800f04a:	0020      	movs	r0, r4
 800f04c:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f04e:	4b01      	ldr	r3, [pc, #4]	; (800f054 <uxTaskPriorityGet+0x1c>)
 800f050:	681c      	ldr	r4, [r3, #0]
 800f052:	e7f7      	b.n	800f044 <uxTaskPriorityGet+0xc>
 800f054:	2000288c 	.word	0x2000288c

0800f058 <vTaskPrioritySet>:
	{
 800f058:	b570      	push	{r4, r5, r6, lr}
 800f05a:	0004      	movs	r4, r0
 800f05c:	000d      	movs	r5, r1
 800f05e:	2906      	cmp	r1, #6
 800f060:	d900      	bls.n	800f064 <vTaskPrioritySet+0xc>
 800f062:	2506      	movs	r5, #6
		taskENTER_CRITICAL();
 800f064:	f000 ff6e 	bl	800ff44 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f068:	2c00      	cmp	r4, #0
 800f06a:	d00e      	beq.n	800f08a <vTaskPrioritySet+0x32>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f06c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f06e:	42aa      	cmp	r2, r5
 800f070:	d027      	beq.n	800f0c2 <vTaskPrioritySet+0x6a>
				if( uxNewPriority > uxCurrentBasePriority )
 800f072:	d20d      	bcs.n	800f090 <vTaskPrioritySet+0x38>
					if( pxTCB != pxCurrentTCB )
 800f074:	4b22      	ldr	r3, [pc, #136]	; (800f100 <vTaskPrioritySet+0xa8>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	42a3      	cmp	r3, r4
 800f07a:	d025      	beq.n	800f0c8 <vTaskPrioritySet+0x70>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f07c:	4b20      	ldr	r3, [pc, #128]	; (800f100 <vTaskPrioritySet+0xa8>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f082:	2600      	movs	r6, #0
 800f084:	429d      	cmp	r5, r3
 800f086:	4176      	adcs	r6, r6
 800f088:	e007      	b.n	800f09a <vTaskPrioritySet+0x42>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f08a:	4b1d      	ldr	r3, [pc, #116]	; (800f100 <vTaskPrioritySet+0xa8>)
 800f08c:	681c      	ldr	r4, [r3, #0]
 800f08e:	e7ed      	b.n	800f06c <vTaskPrioritySet+0x14>
				else if( pxTCB == pxCurrentTCB )
 800f090:	4b1b      	ldr	r3, [pc, #108]	; (800f100 <vTaskPrioritySet+0xa8>)
 800f092:	681e      	ldr	r6, [r3, #0]
 800f094:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f096:	4273      	negs	r3, r6
 800f098:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f09a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f09c:	428a      	cmp	r2, r1
 800f09e:	d015      	beq.n	800f0cc <vTaskPrioritySet+0x74>
					pxTCB->uxBasePriority = uxNewPriority;
 800f0a0:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0a2:	69a3      	ldr	r3, [r4, #24]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	db02      	blt.n	800f0ae <vTaskPrioritySet+0x56>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0a8:	2307      	movs	r3, #7
 800f0aa:	1b5d      	subs	r5, r3, r5
 800f0ac:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f0ae:	008b      	lsls	r3, r1, #2
 800f0b0:	185b      	adds	r3, r3, r1
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	4a13      	ldr	r2, [pc, #76]	; (800f104 <vTaskPrioritySet+0xac>)
 800f0b6:	189b      	adds	r3, r3, r2
 800f0b8:	6962      	ldr	r2, [r4, #20]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d008      	beq.n	800f0d0 <vTaskPrioritySet+0x78>
				if( xYieldRequired == pdTRUE )
 800f0be:	2e01      	cmp	r6, #1
 800f0c0:	d01a      	beq.n	800f0f8 <vTaskPrioritySet+0xa0>
		taskEXIT_CRITICAL();
 800f0c2:	f000 ff4b 	bl	800ff5c <vPortExitCritical>
	}
 800f0c6:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800f0c8:	2600      	movs	r6, #0
 800f0ca:	e7e6      	b.n	800f09a <vTaskPrioritySet+0x42>
						pxTCB->uxPriority = uxNewPriority;
 800f0cc:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f0ce:	e7e7      	b.n	800f0a0 <vTaskPrioritySet+0x48>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f0d0:	1d25      	adds	r5, r4, #4
 800f0d2:	0028      	movs	r0, r5
 800f0d4:	f7ff fb45 	bl	800e762 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f0da:	4a0b      	ldr	r2, [pc, #44]	; (800f108 <vTaskPrioritySet+0xb0>)
 800f0dc:	6812      	ldr	r2, [r2, #0]
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d901      	bls.n	800f0e6 <vTaskPrioritySet+0x8e>
 800f0e2:	4a09      	ldr	r2, [pc, #36]	; (800f108 <vTaskPrioritySet+0xb0>)
 800f0e4:	6013      	str	r3, [r2, #0]
 800f0e6:	0098      	lsls	r0, r3, #2
 800f0e8:	18c0      	adds	r0, r0, r3
 800f0ea:	0080      	lsls	r0, r0, #2
 800f0ec:	4b05      	ldr	r3, [pc, #20]	; (800f104 <vTaskPrioritySet+0xac>)
 800f0ee:	18c0      	adds	r0, r0, r3
 800f0f0:	0029      	movs	r1, r5
 800f0f2:	f7ff fb13 	bl	800e71c <vListInsertEnd>
 800f0f6:	e7e2      	b.n	800f0be <vTaskPrioritySet+0x66>
					taskYIELD_IF_USING_PREEMPTION();
 800f0f8:	f000 ff18 	bl	800ff2c <vPortYield>
 800f0fc:	e7e1      	b.n	800f0c2 <vTaskPrioritySet+0x6a>
 800f0fe:	46c0      	nop			; (mov r8, r8)
 800f100:	2000288c 	.word	0x2000288c
 800f104:	20002898 	.word	0x20002898
 800f108:	2000293c 	.word	0x2000293c

0800f10c <vTaskStartScheduler>:
{
 800f10c:	b500      	push	{lr}
 800f10e:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f110:	2300      	movs	r3, #0
 800f112:	9303      	str	r3, [sp, #12]
 800f114:	9302      	str	r3, [sp, #8]
 800f116:	9301      	str	r3, [sp, #4]
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	2296      	movs	r2, #150	; 0x96
 800f11c:	490b      	ldr	r1, [pc, #44]	; (800f14c <vTaskStartScheduler+0x40>)
 800f11e:	480c      	ldr	r0, [pc, #48]	; (800f150 <vTaskStartScheduler+0x44>)
 800f120:	f7ff fea2 	bl	800ee68 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f124:	2801      	cmp	r0, #1
 800f126:	d001      	beq.n	800f12c <vTaskStartScheduler+0x20>
}
 800f128:	b005      	add	sp, #20
 800f12a:	bd00      	pop	{pc}
			xReturn = xTimerCreateTimerTask();
 800f12c:	f000 fd34 	bl	800fb98 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f130:	2801      	cmp	r0, #1
 800f132:	d1f9      	bne.n	800f128 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f134:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f136:	4b07      	ldr	r3, [pc, #28]	; (800f154 <vTaskStartScheduler+0x48>)
 800f138:	2201      	movs	r2, #1
 800f13a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f13c:	4b06      	ldr	r3, [pc, #24]	; (800f158 <vTaskStartScheduler+0x4c>)
 800f13e:	2200      	movs	r2, #0
 800f140:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f142:	f7f8 fc31 	bl	80079a8 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f146:	f000 fec7 	bl	800fed8 <xPortStartScheduler>
}
 800f14a:	e7ed      	b.n	800f128 <vTaskStartScheduler+0x1c>
 800f14c:	0801b7d4 	.word	0x0801b7d4
 800f150:	0800f3cd 	.word	0x0800f3cd
 800f154:	20002980 	.word	0x20002980
 800f158:	200029ac 	.word	0x200029ac

0800f15c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f15c:	4a02      	ldr	r2, [pc, #8]	; (800f168 <vTaskSuspendAll+0xc>)
 800f15e:	6813      	ldr	r3, [r2, #0]
 800f160:	3301      	adds	r3, #1
 800f162:	6013      	str	r3, [r2, #0]
}
 800f164:	4770      	bx	lr
 800f166:	46c0      	nop			; (mov r8, r8)
 800f168:	20002930 	.word	0x20002930

0800f16c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f16c:	4b01      	ldr	r3, [pc, #4]	; (800f174 <xTaskGetTickCount+0x8>)
 800f16e:	6818      	ldr	r0, [r3, #0]
}
 800f170:	4770      	bx	lr
 800f172:	46c0      	nop			; (mov r8, r8)
 800f174:	200029ac 	.word	0x200029ac

0800f178 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800f178:	4b01      	ldr	r3, [pc, #4]	; (800f180 <xTaskGetTickCountFromISR+0x8>)
 800f17a:	6818      	ldr	r0, [r3, #0]
}
 800f17c:	4770      	bx	lr
 800f17e:	46c0      	nop			; (mov r8, r8)
 800f180:	200029ac 	.word	0x200029ac

0800f184 <xTaskIncrementTick>:
{
 800f184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f186:	46d6      	mov	lr, sl
 800f188:	464f      	mov	r7, r9
 800f18a:	4646      	mov	r6, r8
 800f18c:	b5c0      	push	{r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f18e:	4b3a      	ldr	r3, [pc, #232]	; (800f278 <xTaskIncrementTick+0xf4>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d15f      	bne.n	800f256 <xTaskIncrementTick+0xd2>
		++xTickCount;
 800f196:	4b39      	ldr	r3, [pc, #228]	; (800f27c <xTaskIncrementTick+0xf8>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	3201      	adds	r2, #1
 800f19c:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800f19e:	681f      	ldr	r7, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800f1a0:	2f00      	cmp	r7, #0
 800f1a2:	d038      	beq.n	800f216 <xTaskIncrementTick+0x92>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f1a4:	4b36      	ldr	r3, [pc, #216]	; (800f280 <xTaskIncrementTick+0xfc>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f1a8:	2600      	movs	r6, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800f1aa:	42bb      	cmp	r3, r7
 800f1ac:	d844      	bhi.n	800f238 <xTaskIncrementTick+0xb4>
BaseType_t xSwitchRequired = pdFALSE;
 800f1ae:	2600      	movs	r6, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1b0:	4b34      	ldr	r3, [pc, #208]	; (800f284 <xTaskIncrementTick+0x100>)
 800f1b2:	4698      	mov	r8, r3
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f1b4:	4699      	mov	r9, r3
						prvAddTaskToReadyList( pxTCB );
 800f1b6:	4b34      	ldr	r3, [pc, #208]	; (800f288 <xTaskIncrementTick+0x104>)
 800f1b8:	469a      	mov	sl, r3
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1ba:	4643      	mov	r3, r8
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d035      	beq.n	800f230 <xTaskIncrementTick+0xac>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f1c4:	464b      	mov	r3, r9
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800f1cc:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800f1ce:	429f      	cmp	r7, r3
 800f1d0:	d33e      	bcc.n	800f250 <xTaskIncrementTick+0xcc>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f1d2:	1d25      	adds	r5, r4, #4
 800f1d4:	0028      	movs	r0, r5
 800f1d6:	f7ff fac4 	bl	800e762 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f1da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d003      	beq.n	800f1e8 <xTaskIncrementTick+0x64>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f1e0:	0020      	movs	r0, r4
 800f1e2:	3018      	adds	r0, #24
 800f1e4:	f7ff fabd 	bl	800e762 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f1e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f1ea:	4652      	mov	r2, sl
 800f1ec:	6812      	ldr	r2, [r2, #0]
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d901      	bls.n	800f1f6 <xTaskIncrementTick+0x72>
 800f1f2:	4a25      	ldr	r2, [pc, #148]	; (800f288 <xTaskIncrementTick+0x104>)
 800f1f4:	6013      	str	r3, [r2, #0]
 800f1f6:	0098      	lsls	r0, r3, #2
 800f1f8:	18c0      	adds	r0, r0, r3
 800f1fa:	0080      	lsls	r0, r0, #2
 800f1fc:	4b23      	ldr	r3, [pc, #140]	; (800f28c <xTaskIncrementTick+0x108>)
 800f1fe:	18c0      	adds	r0, r0, r3
 800f200:	0029      	movs	r1, r5
 800f202:	f7ff fa8b 	bl	800e71c <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f206:	4b22      	ldr	r3, [pc, #136]	; (800f290 <xTaskIncrementTick+0x10c>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f20c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f20e:	429a      	cmp	r2, r3
 800f210:	d3d3      	bcc.n	800f1ba <xTaskIncrementTick+0x36>
								xSwitchRequired = pdTRUE;
 800f212:	2601      	movs	r6, #1
 800f214:	e7d1      	b.n	800f1ba <xTaskIncrementTick+0x36>
				taskSWITCH_DELAYED_LISTS();
 800f216:	4a1b      	ldr	r2, [pc, #108]	; (800f284 <xTaskIncrementTick+0x100>)
 800f218:	6811      	ldr	r1, [r2, #0]
 800f21a:	4b1e      	ldr	r3, [pc, #120]	; (800f294 <xTaskIncrementTick+0x110>)
 800f21c:	6818      	ldr	r0, [r3, #0]
 800f21e:	6010      	str	r0, [r2, #0]
 800f220:	6019      	str	r1, [r3, #0]
 800f222:	4a1d      	ldr	r2, [pc, #116]	; (800f298 <xTaskIncrementTick+0x114>)
 800f224:	6813      	ldr	r3, [r2, #0]
 800f226:	3301      	adds	r3, #1
 800f228:	6013      	str	r3, [r2, #0]
 800f22a:	f7ff fdc5 	bl	800edb8 <prvResetNextTaskUnblockTime>
 800f22e:	e7b9      	b.n	800f1a4 <xTaskIncrementTick+0x20>
						xNextTaskUnblockTime = portMAX_DELAY;
 800f230:	4b13      	ldr	r3, [pc, #76]	; (800f280 <xTaskIncrementTick+0xfc>)
 800f232:	2201      	movs	r2, #1
 800f234:	4252      	negs	r2, r2
 800f236:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f238:	4b15      	ldr	r3, [pc, #84]	; (800f290 <xTaskIncrementTick+0x10c>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f23e:	0093      	lsls	r3, r2, #2
 800f240:	189b      	adds	r3, r3, r2
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4a11      	ldr	r2, [pc, #68]	; (800f28c <xTaskIncrementTick+0x108>)
 800f246:	589b      	ldr	r3, [r3, r2]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	d909      	bls.n	800f260 <xTaskIncrementTick+0xdc>
				xSwitchRequired = pdTRUE;
 800f24c:	2601      	movs	r6, #1
 800f24e:	e007      	b.n	800f260 <xTaskIncrementTick+0xdc>
							xNextTaskUnblockTime = xItemValue;
 800f250:	4a0b      	ldr	r2, [pc, #44]	; (800f280 <xTaskIncrementTick+0xfc>)
 800f252:	6013      	str	r3, [r2, #0]
							break;
 800f254:	e7f0      	b.n	800f238 <xTaskIncrementTick+0xb4>
		++uxPendedTicks;
 800f256:	4a11      	ldr	r2, [pc, #68]	; (800f29c <xTaskIncrementTick+0x118>)
 800f258:	6813      	ldr	r3, [r2, #0]
 800f25a:	3301      	adds	r3, #1
 800f25c:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800f25e:	2600      	movs	r6, #0
		if( xYieldPending != pdFALSE )
 800f260:	4b0f      	ldr	r3, [pc, #60]	; (800f2a0 <xTaskIncrementTick+0x11c>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d000      	beq.n	800f26a <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800f268:	2601      	movs	r6, #1
}
 800f26a:	0030      	movs	r0, r6
 800f26c:	bc1c      	pop	{r2, r3, r4}
 800f26e:	4690      	mov	r8, r2
 800f270:	4699      	mov	r9, r3
 800f272:	46a2      	mov	sl, r4
 800f274:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f276:	46c0      	nop			; (mov r8, r8)
 800f278:	20002930 	.word	0x20002930
 800f27c:	200029ac 	.word	0x200029ac
 800f280:	20000114 	.word	0x20000114
 800f284:	20002890 	.word	0x20002890
 800f288:	2000293c 	.word	0x2000293c
 800f28c:	20002898 	.word	0x20002898
 800f290:	2000288c 	.word	0x2000288c
 800f294:	20002894 	.word	0x20002894
 800f298:	20002968 	.word	0x20002968
 800f29c:	2000292c 	.word	0x2000292c
 800f2a0:	200029b0 	.word	0x200029b0

0800f2a4 <xTaskResumeAll>:
{
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	46ce      	mov	lr, r9
 800f2a8:	4647      	mov	r7, r8
 800f2aa:	b580      	push	{r7, lr}
	taskENTER_CRITICAL();
 800f2ac:	f000 fe4a 	bl	800ff44 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f2b0:	4b30      	ldr	r3, [pc, #192]	; (800f374 <xTaskResumeAll+0xd0>)
 800f2b2:	681a      	ldr	r2, [r3, #0]
 800f2b4:	3a01      	subs	r2, #1
 800f2b6:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2b8:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f2ba:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d14d      	bne.n	800f35c <xTaskResumeAll+0xb8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f2c0:	4b2d      	ldr	r3, [pc, #180]	; (800f378 <xTaskResumeAll+0xd4>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f2c4:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d048      	beq.n	800f35c <xTaskResumeAll+0xb8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2ca:	4e2c      	ldr	r6, [pc, #176]	; (800f37c <xTaskResumeAll+0xd8>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f2cc:	46b0      	mov	r8, r6
					prvAddTaskToReadyList( pxTCB );
 800f2ce:	4f2c      	ldr	r7, [pc, #176]	; (800f380 <xTaskResumeAll+0xdc>)
 800f2d0:	46b9      	mov	r9, r7
 800f2d2:	e00d      	b.n	800f2f0 <xTaskResumeAll+0x4c>
 800f2d4:	0098      	lsls	r0, r3, #2
 800f2d6:	18c0      	adds	r0, r0, r3
 800f2d8:	0080      	lsls	r0, r0, #2
 800f2da:	4b2a      	ldr	r3, [pc, #168]	; (800f384 <xTaskResumeAll+0xe0>)
 800f2dc:	18c0      	adds	r0, r0, r3
 800f2de:	0029      	movs	r1, r5
 800f2e0:	f7ff fa1c 	bl	800e71c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f2e4:	4b28      	ldr	r3, [pc, #160]	; (800f388 <xTaskResumeAll+0xe4>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	d214      	bcs.n	800f31a <xTaskResumeAll+0x76>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2f0:	6833      	ldr	r3, [r6, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d015      	beq.n	800f322 <xTaskResumeAll+0x7e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800f2f6:	4643      	mov	r3, r8
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f2fc:	0020      	movs	r0, r4
 800f2fe:	3018      	adds	r0, #24
 800f300:	f7ff fa2f 	bl	800e762 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f304:	1d25      	adds	r5, r4, #4
 800f306:	0028      	movs	r0, r5
 800f308:	f7ff fa2b 	bl	800e762 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f30c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	4293      	cmp	r3, r2
 800f312:	d9df      	bls.n	800f2d4 <xTaskResumeAll+0x30>
 800f314:	464a      	mov	r2, r9
 800f316:	6013      	str	r3, [r2, #0]
 800f318:	e7dc      	b.n	800f2d4 <xTaskResumeAll+0x30>
						xYieldPending = pdTRUE;
 800f31a:	4b1c      	ldr	r3, [pc, #112]	; (800f38c <xTaskResumeAll+0xe8>)
 800f31c:	2201      	movs	r2, #1
 800f31e:	601a      	str	r2, [r3, #0]
 800f320:	e7e6      	b.n	800f2f0 <xTaskResumeAll+0x4c>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800f322:	4b1b      	ldr	r3, [pc, #108]	; (800f390 <xTaskResumeAll+0xec>)
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d013      	beq.n	800f352 <xTaskResumeAll+0xae>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f32a:	4b19      	ldr	r3, [pc, #100]	; (800f390 <xTaskResumeAll+0xec>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d00f      	beq.n	800f352 <xTaskResumeAll+0xae>
							xYieldPending = pdTRUE;
 800f332:	4e16      	ldr	r6, [pc, #88]	; (800f38c <xTaskResumeAll+0xe8>)
 800f334:	2501      	movs	r5, #1
						--uxPendedTicks;
 800f336:	4c16      	ldr	r4, [pc, #88]	; (800f390 <xTaskResumeAll+0xec>)
 800f338:	e005      	b.n	800f346 <xTaskResumeAll+0xa2>
 800f33a:	6823      	ldr	r3, [r4, #0]
 800f33c:	3b01      	subs	r3, #1
 800f33e:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800f340:	6823      	ldr	r3, [r4, #0]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d005      	beq.n	800f352 <xTaskResumeAll+0xae>
						if( xTaskIncrementTick() != pdFALSE )
 800f346:	f7ff ff1d 	bl	800f184 <xTaskIncrementTick>
 800f34a:	2800      	cmp	r0, #0
 800f34c:	d0f5      	beq.n	800f33a <xTaskResumeAll+0x96>
							xYieldPending = pdTRUE;
 800f34e:	6035      	str	r5, [r6, #0]
 800f350:	e7f3      	b.n	800f33a <xTaskResumeAll+0x96>
				if( xYieldPending == pdTRUE )
 800f352:	4b0e      	ldr	r3, [pc, #56]	; (800f38c <xTaskResumeAll+0xe8>)
 800f354:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800f356:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800f358:	2b01      	cmp	r3, #1
 800f35a:	d006      	beq.n	800f36a <xTaskResumeAll+0xc6>
	taskEXIT_CRITICAL();
 800f35c:	f000 fdfe 	bl	800ff5c <vPortExitCritical>
}
 800f360:	0020      	movs	r0, r4
 800f362:	bc0c      	pop	{r2, r3}
 800f364:	4690      	mov	r8, r2
 800f366:	4699      	mov	r9, r3
 800f368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800f36a:	f000 fddf 	bl	800ff2c <vPortYield>
						xAlreadyYielded = pdTRUE;
 800f36e:	3401      	adds	r4, #1
 800f370:	e7f4      	b.n	800f35c <xTaskResumeAll+0xb8>
 800f372:	46c0      	nop			; (mov r8, r8)
 800f374:	20002930 	.word	0x20002930
 800f378:	20002928 	.word	0x20002928
 800f37c:	2000296c 	.word	0x2000296c
 800f380:	2000293c 	.word	0x2000293c
 800f384:	20002898 	.word	0x20002898
 800f388:	2000288c 	.word	0x2000288c
 800f38c:	200029b0 	.word	0x200029b0
 800f390:	2000292c 	.word	0x2000292c

0800f394 <vTaskDelay>:
	{
 800f394:	b510      	push	{r4, lr}
 800f396:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f398:	d010      	beq.n	800f3bc <vTaskDelay+0x28>
			vTaskSuspendAll();
 800f39a:	f7ff fedf 	bl	800f15c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800f39e:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <vTaskDelay+0x30>)
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f3a4:	4b08      	ldr	r3, [pc, #32]	; (800f3c8 <vTaskDelay+0x34>)
 800f3a6:	6818      	ldr	r0, [r3, #0]
 800f3a8:	3004      	adds	r0, #4
 800f3aa:	f7ff f9da 	bl	800e762 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f3ae:	0020      	movs	r0, r4
 800f3b0:	f7ff fd18 	bl	800ede4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800f3b4:	f7ff ff76 	bl	800f2a4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d101      	bne.n	800f3c0 <vTaskDelay+0x2c>
			portYIELD_WITHIN_API();
 800f3bc:	f000 fdb6 	bl	800ff2c <vPortYield>
	}
 800f3c0:	bd10      	pop	{r4, pc}
 800f3c2:	46c0      	nop			; (mov r8, r8)
 800f3c4:	200029ac 	.word	0x200029ac
 800f3c8:	2000288c 	.word	0x2000288c

0800f3cc <prvIdleTask>:
{
 800f3cc:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f3ce:	4d16      	ldr	r5, [pc, #88]	; (800f428 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f3d0:	4e16      	ldr	r6, [pc, #88]	; (800f42c <prvIdleTask+0x60>)
 800f3d2:	e003      	b.n	800f3dc <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f3d4:	4b16      	ldr	r3, [pc, #88]	; (800f430 <prvIdleTask+0x64>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d822      	bhi.n	800f422 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800f3dc:	682b      	ldr	r3, [r5, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d0f8      	beq.n	800f3d4 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800f3e2:	f7ff febb 	bl	800f15c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800f3e6:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800f3e8:	f7ff ff5c 	bl	800f2a4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800f3ec:	2c00      	cmp	r4, #0
 800f3ee:	d0f5      	beq.n	800f3dc <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800f3f0:	f000 fda8 	bl	800ff44 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800f3f4:	4b0d      	ldr	r3, [pc, #52]	; (800f42c <prvIdleTask+0x60>)
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800f3fa:	1d20      	adds	r0, r4, #4
 800f3fc:	f7ff f9b1 	bl	800e762 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800f400:	4a0c      	ldr	r2, [pc, #48]	; (800f434 <prvIdleTask+0x68>)
 800f402:	6813      	ldr	r3, [r2, #0]
 800f404:	3b01      	subs	r3, #1
 800f406:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800f408:	4a07      	ldr	r2, [pc, #28]	; (800f428 <prvIdleTask+0x5c>)
 800f40a:	6813      	ldr	r3, [r2, #0]
 800f40c:	3b01      	subs	r3, #1
 800f40e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800f410:	f000 fda4 	bl	800ff5c <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800f414:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800f416:	f000 fe9f 	bl	8010158 <vPortFree>
		vPortFree( pxTCB );
 800f41a:	0020      	movs	r0, r4
 800f41c:	f000 fe9c 	bl	8010158 <vPortFree>
 800f420:	e7dc      	b.n	800f3dc <prvIdleTask+0x10>
				taskYIELD();
 800f422:	f000 fd83 	bl	800ff2c <vPortYield>
 800f426:	e7d9      	b.n	800f3dc <prvIdleTask+0x10>
 800f428:	20002938 	.word	0x20002938
 800f42c:	20002998 	.word	0x20002998
 800f430:	20002898 	.word	0x20002898
 800f434:	20002928 	.word	0x20002928

0800f438 <uxTaskGetSystemState>:
	{
 800f438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f43a:	46c6      	mov	lr, r8
 800f43c:	b500      	push	{lr}
 800f43e:	0006      	movs	r6, r0
 800f440:	000d      	movs	r5, r1
 800f442:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800f444:	f7ff fe8a 	bl	800f15c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f448:	4b1e      	ldr	r3, [pc, #120]	; (800f4c4 <uxTaskGetSystemState+0x8c>)
 800f44a:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800f44c:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800f44e:	42ab      	cmp	r3, r5
 800f450:	d831      	bhi.n	800f4b6 <uxTaskGetSystemState+0x7e>
 800f452:	4d1d      	ldr	r5, [pc, #116]	; (800f4c8 <uxTaskGetSystemState+0x90>)
 800f454:	002f      	movs	r7, r5
 800f456:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800f458:	0160      	lsls	r0, r4, #5
 800f45a:	1830      	adds	r0, r6, r0
 800f45c:	2201      	movs	r2, #1
 800f45e:	0029      	movs	r1, r5
 800f460:	f7ff fc56 	bl	800ed10 <prvListTaskWithinSingleList>
 800f464:	1824      	adds	r4, r4, r0
 800f466:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f468:	42bd      	cmp	r5, r7
 800f46a:	d1f5      	bne.n	800f458 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800f46c:	4b17      	ldr	r3, [pc, #92]	; (800f4cc <uxTaskGetSystemState+0x94>)
 800f46e:	6819      	ldr	r1, [r3, #0]
 800f470:	0160      	lsls	r0, r4, #5
 800f472:	1830      	adds	r0, r6, r0
 800f474:	2202      	movs	r2, #2
 800f476:	f7ff fc4b 	bl	800ed10 <prvListTaskWithinSingleList>
 800f47a:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800f47c:	4b14      	ldr	r3, [pc, #80]	; (800f4d0 <uxTaskGetSystemState+0x98>)
 800f47e:	6819      	ldr	r1, [r3, #0]
 800f480:	0160      	lsls	r0, r4, #5
 800f482:	1830      	adds	r0, r6, r0
 800f484:	2202      	movs	r2, #2
 800f486:	f7ff fc43 	bl	800ed10 <prvListTaskWithinSingleList>
 800f48a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800f48c:	0160      	lsls	r0, r4, #5
 800f48e:	1830      	adds	r0, r6, r0
 800f490:	2204      	movs	r2, #4
 800f492:	4910      	ldr	r1, [pc, #64]	; (800f4d4 <uxTaskGetSystemState+0x9c>)
 800f494:	f7ff fc3c 	bl	800ed10 <prvListTaskWithinSingleList>
 800f498:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800f49a:	0160      	lsls	r0, r4, #5
 800f49c:	1830      	adds	r0, r6, r0
 800f49e:	2203      	movs	r2, #3
 800f4a0:	490d      	ldr	r1, [pc, #52]	; (800f4d8 <uxTaskGetSystemState+0xa0>)
 800f4a2:	f7ff fc35 	bl	800ed10 <prvListTaskWithinSingleList>
 800f4a6:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800f4a8:	4643      	mov	r3, r8
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d003      	beq.n	800f4b6 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f4ae:	f7f8 fa8b 	bl	80079c8 <ulMainGetRunTimeCounterValue>
 800f4b2:	4643      	mov	r3, r8
 800f4b4:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800f4b6:	f7ff fef5 	bl	800f2a4 <xTaskResumeAll>
	}
 800f4ba:	0020      	movs	r0, r4
 800f4bc:	bc04      	pop	{r2}
 800f4be:	4690      	mov	r8, r2
 800f4c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4c2:	46c0      	nop			; (mov r8, r8)
 800f4c4:	20002928 	.word	0x20002928
 800f4c8:	20002910 	.word	0x20002910
 800f4cc:	20002890 	.word	0x20002890
 800f4d0:	20002894 	.word	0x20002894
 800f4d4:	20002998 	.word	0x20002998
 800f4d8:	20002984 	.word	0x20002984

0800f4dc <vTaskSwitchContext>:
{
 800f4dc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4de:	4b36      	ldr	r3, [pc, #216]	; (800f5b8 <vTaskSwitchContext+0xdc>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d003      	beq.n	800f4ee <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800f4e6:	4b35      	ldr	r3, [pc, #212]	; (800f5bc <vTaskSwitchContext+0xe0>)
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	601a      	str	r2, [r3, #0]
}
 800f4ec:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800f4ee:	4b33      	ldr	r3, [pc, #204]	; (800f5bc <vTaskSwitchContext+0xe0>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800f4f4:	f7f8 fa68 	bl	80079c8 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800f4f8:	4b31      	ldr	r3, [pc, #196]	; (800f5c0 <vTaskSwitchContext+0xe4>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4298      	cmp	r0, r3
 800f4fe:	d905      	bls.n	800f50c <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800f500:	4a30      	ldr	r2, [pc, #192]	; (800f5c4 <vTaskSwitchContext+0xe8>)
 800f502:	6812      	ldr	r2, [r2, #0]
 800f504:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800f506:	1acb      	subs	r3, r1, r3
 800f508:	181b      	adds	r3, r3, r0
 800f50a:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800f50c:	4b2c      	ldr	r3, [pc, #176]	; (800f5c0 <vTaskSwitchContext+0xe4>)
 800f50e:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f510:	4b2c      	ldr	r3, [pc, #176]	; (800f5c4 <vTaskSwitchContext+0xe8>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	6812      	ldr	r2, [r2, #0]
 800f518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d937      	bls.n	800f58e <vTaskSwitchContext+0xb2>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f51e:	4b29      	ldr	r3, [pc, #164]	; (800f5c4 <vTaskSwitchContext+0xe8>)
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f524:	2214      	movs	r2, #20
 800f526:	4928      	ldr	r1, [pc, #160]	; (800f5c8 <vTaskSwitchContext+0xec>)
 800f528:	f004 fcc6 	bl	8013eb8 <memcmp>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	d135      	bne.n	800f59c <vTaskSwitchContext+0xc0>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f530:	4b26      	ldr	r3, [pc, #152]	; (800f5cc <vTaskSwitchContext+0xf0>)
 800f532:	681a      	ldr	r2, [r3, #0]
 800f534:	0093      	lsls	r3, r2, #2
 800f536:	189b      	adds	r3, r3, r2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	4a25      	ldr	r2, [pc, #148]	; (800f5d0 <vTaskSwitchContext+0xf4>)
 800f53c:	589b      	ldr	r3, [r3, r2]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d10b      	bne.n	800f55a <vTaskSwitchContext+0x7e>
 800f542:	4a22      	ldr	r2, [pc, #136]	; (800f5cc <vTaskSwitchContext+0xf0>)
 800f544:	4822      	ldr	r0, [pc, #136]	; (800f5d0 <vTaskSwitchContext+0xf4>)
 800f546:	6813      	ldr	r3, [r2, #0]
 800f548:	3b01      	subs	r3, #1
 800f54a:	6013      	str	r3, [r2, #0]
 800f54c:	6811      	ldr	r1, [r2, #0]
 800f54e:	008b      	lsls	r3, r1, #2
 800f550:	185b      	adds	r3, r3, r1
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	581b      	ldr	r3, [r3, r0]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d0f5      	beq.n	800f546 <vTaskSwitchContext+0x6a>
 800f55a:	4b1c      	ldr	r3, [pc, #112]	; (800f5cc <vTaskSwitchContext+0xf0>)
 800f55c:	6819      	ldr	r1, [r3, #0]
 800f55e:	4c1c      	ldr	r4, [pc, #112]	; (800f5d0 <vTaskSwitchContext+0xf4>)
 800f560:	008b      	lsls	r3, r1, #2
 800f562:	185a      	adds	r2, r3, r1
 800f564:	0092      	lsls	r2, r2, #2
 800f566:	18a2      	adds	r2, r4, r2
 800f568:	6850      	ldr	r0, [r2, #4]
 800f56a:	6840      	ldr	r0, [r0, #4]
 800f56c:	6050      	str	r0, [r2, #4]
 800f56e:	185b      	adds	r3, r3, r1
 800f570:	009b      	lsls	r3, r3, #2
 800f572:	3308      	adds	r3, #8
 800f574:	191b      	adds	r3, r3, r4
 800f576:	4298      	cmp	r0, r3
 800f578:	d017      	beq.n	800f5aa <vTaskSwitchContext+0xce>
 800f57a:	008b      	lsls	r3, r1, #2
 800f57c:	1859      	adds	r1, r3, r1
 800f57e:	0089      	lsls	r1, r1, #2
 800f580:	4b13      	ldr	r3, [pc, #76]	; (800f5d0 <vTaskSwitchContext+0xf4>)
 800f582:	1859      	adds	r1, r3, r1
 800f584:	684b      	ldr	r3, [r1, #4]
 800f586:	68da      	ldr	r2, [r3, #12]
 800f588:	4b0e      	ldr	r3, [pc, #56]	; (800f5c4 <vTaskSwitchContext+0xe8>)
 800f58a:	601a      	str	r2, [r3, #0]
}
 800f58c:	e7ae      	b.n	800f4ec <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800f58e:	4b0d      	ldr	r3, [pc, #52]	; (800f5c4 <vTaskSwitchContext+0xe8>)
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	6819      	ldr	r1, [r3, #0]
 800f594:	3134      	adds	r1, #52	; 0x34
 800f596:	f7fe f967 	bl	800d868 <vApplicationStackOverflowHook>
 800f59a:	e7c0      	b.n	800f51e <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800f59c:	4b09      	ldr	r3, [pc, #36]	; (800f5c4 <vTaskSwitchContext+0xe8>)
 800f59e:	6818      	ldr	r0, [r3, #0]
 800f5a0:	6819      	ldr	r1, [r3, #0]
 800f5a2:	3134      	adds	r1, #52	; 0x34
 800f5a4:	f7fe f960 	bl	800d868 <vApplicationStackOverflowHook>
 800f5a8:	e7c2      	b.n	800f530 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800f5aa:	6840      	ldr	r0, [r0, #4]
 800f5ac:	008b      	lsls	r3, r1, #2
 800f5ae:	185b      	adds	r3, r3, r1
 800f5b0:	009b      	lsls	r3, r3, #2
 800f5b2:	18e3      	adds	r3, r4, r3
 800f5b4:	6058      	str	r0, [r3, #4]
 800f5b6:	e7e0      	b.n	800f57a <vTaskSwitchContext+0x9e>
 800f5b8:	20002930 	.word	0x20002930
 800f5bc:	200029b0 	.word	0x200029b0
 800f5c0:	20002924 	.word	0x20002924
 800f5c4:	2000288c 	.word	0x2000288c
 800f5c8:	0801b798 	.word	0x0801b798
 800f5cc:	2000293c 	.word	0x2000293c
 800f5d0:	20002898 	.word	0x20002898

0800f5d4 <vTaskPlaceOnEventList>:
{
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	000d      	movs	r5, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f5d8:	4c0b      	ldr	r4, [pc, #44]	; (800f608 <vTaskPlaceOnEventList+0x34>)
 800f5da:	6821      	ldr	r1, [r4, #0]
 800f5dc:	3118      	adds	r1, #24
 800f5de:	f7ff f8a9 	bl	800e734 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f5e2:	6820      	ldr	r0, [r4, #0]
 800f5e4:	3004      	adds	r0, #4
 800f5e6:	f7ff f8bc 	bl	800e762 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800f5ea:	1c6b      	adds	r3, r5, #1
 800f5ec:	d005      	beq.n	800f5fa <vTaskPlaceOnEventList+0x26>
			xTimeToWake = xTickCount + xTicksToWait;
 800f5ee:	4b07      	ldr	r3, [pc, #28]	; (800f60c <vTaskPlaceOnEventList+0x38>)
 800f5f0:	6818      	ldr	r0, [r3, #0]
 800f5f2:	1940      	adds	r0, r0, r5
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f5f4:	f7ff fbf6 	bl	800ede4 <prvAddCurrentTaskToDelayedList>
}
 800f5f8:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f5fa:	4b03      	ldr	r3, [pc, #12]	; (800f608 <vTaskPlaceOnEventList+0x34>)
 800f5fc:	6819      	ldr	r1, [r3, #0]
 800f5fe:	3104      	adds	r1, #4
 800f600:	4803      	ldr	r0, [pc, #12]	; (800f610 <vTaskPlaceOnEventList+0x3c>)
 800f602:	f7ff f88b 	bl	800e71c <vListInsertEnd>
 800f606:	e7f7      	b.n	800f5f8 <vTaskPlaceOnEventList+0x24>
 800f608:	2000288c 	.word	0x2000288c
 800f60c:	200029ac 	.word	0x200029ac
 800f610:	20002984 	.word	0x20002984

0800f614 <vTaskPlaceOnEventListRestricted>:
	{
 800f614:	b570      	push	{r4, r5, r6, lr}
 800f616:	000d      	movs	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f618:	4c07      	ldr	r4, [pc, #28]	; (800f638 <vTaskPlaceOnEventListRestricted+0x24>)
 800f61a:	6821      	ldr	r1, [r4, #0]
 800f61c:	3118      	adds	r1, #24
 800f61e:	f7ff f87d 	bl	800e71c <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f622:	6820      	ldr	r0, [r4, #0]
 800f624:	3004      	adds	r0, #4
 800f626:	f7ff f89c 	bl	800e762 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800f62a:	4b04      	ldr	r3, [pc, #16]	; (800f63c <vTaskPlaceOnEventListRestricted+0x28>)
 800f62c:	6818      	ldr	r0, [r3, #0]
 800f62e:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800f630:	f7ff fbd8 	bl	800ede4 <prvAddCurrentTaskToDelayedList>
	}
 800f634:	bd70      	pop	{r4, r5, r6, pc}
 800f636:	46c0      	nop			; (mov r8, r8)
 800f638:	2000288c 	.word	0x2000288c
 800f63c:	200029ac 	.word	0x200029ac

0800f640 <xTaskRemoveFromEventList>:
{
 800f640:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800f642:	68c3      	ldr	r3, [r0, #12]
 800f644:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f646:	0025      	movs	r5, r4
 800f648:	3518      	adds	r5, #24
 800f64a:	0028      	movs	r0, r5
 800f64c:	f7ff f889 	bl	800e762 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f650:	4b13      	ldr	r3, [pc, #76]	; (800f6a0 <xTaskRemoveFromEventList+0x60>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11e      	bne.n	800f696 <xTaskRemoveFromEventList+0x56>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800f658:	1d25      	adds	r5, r4, #4
 800f65a:	0028      	movs	r0, r5
 800f65c:	f7ff f881 	bl	800e762 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f660:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f662:	4a10      	ldr	r2, [pc, #64]	; (800f6a4 <xTaskRemoveFromEventList+0x64>)
 800f664:	6812      	ldr	r2, [r2, #0]
 800f666:	4293      	cmp	r3, r2
 800f668:	d901      	bls.n	800f66e <xTaskRemoveFromEventList+0x2e>
 800f66a:	4a0e      	ldr	r2, [pc, #56]	; (800f6a4 <xTaskRemoveFromEventList+0x64>)
 800f66c:	6013      	str	r3, [r2, #0]
 800f66e:	0098      	lsls	r0, r3, #2
 800f670:	18c0      	adds	r0, r0, r3
 800f672:	0080      	lsls	r0, r0, #2
 800f674:	4b0c      	ldr	r3, [pc, #48]	; (800f6a8 <xTaskRemoveFromEventList+0x68>)
 800f676:	18c0      	adds	r0, r0, r3
 800f678:	0029      	movs	r1, r5
 800f67a:	f7ff f84f 	bl	800e71c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f67e:	4b0b      	ldr	r3, [pc, #44]	; (800f6ac <xTaskRemoveFromEventList+0x6c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800f684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800f686:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f688:	429a      	cmp	r2, r3
 800f68a:	d903      	bls.n	800f694 <xTaskRemoveFromEventList+0x54>
		xYieldPending = pdTRUE;
 800f68c:	4b08      	ldr	r3, [pc, #32]	; (800f6b0 <xTaskRemoveFromEventList+0x70>)
 800f68e:	2201      	movs	r2, #1
 800f690:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800f692:	3001      	adds	r0, #1
}
 800f694:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f696:	0029      	movs	r1, r5
 800f698:	4806      	ldr	r0, [pc, #24]	; (800f6b4 <xTaskRemoveFromEventList+0x74>)
 800f69a:	f7ff f83f 	bl	800e71c <vListInsertEnd>
 800f69e:	e7ee      	b.n	800f67e <xTaskRemoveFromEventList+0x3e>
 800f6a0:	20002930 	.word	0x20002930
 800f6a4:	2000293c 	.word	0x2000293c
 800f6a8:	20002898 	.word	0x20002898
 800f6ac:	2000288c 	.word	0x2000288c
 800f6b0:	200029b0 	.word	0x200029b0
 800f6b4:	2000296c 	.word	0x2000296c

0800f6b8 <vTaskSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f6b8:	4b03      	ldr	r3, [pc, #12]	; (800f6c8 <vTaskSetTimeOutState+0x10>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f6be:	4b03      	ldr	r3, [pc, #12]	; (800f6cc <vTaskSetTimeOutState+0x14>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	6043      	str	r3, [r0, #4]
}
 800f6c4:	4770      	bx	lr
 800f6c6:	46c0      	nop			; (mov r8, r8)
 800f6c8:	20002968 	.word	0x20002968
 800f6cc:	200029ac 	.word	0x200029ac

0800f6d0 <xTaskCheckForTimeOut>:
{
 800f6d0:	b570      	push	{r4, r5, r6, lr}
 800f6d2:	0004      	movs	r4, r0
 800f6d4:	000e      	movs	r6, r1
	taskENTER_CRITICAL();
 800f6d6:	f000 fc35 	bl	800ff44 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f6da:	4b10      	ldr	r3, [pc, #64]	; (800f71c <xTaskCheckForTimeOut+0x4c>)
 800f6dc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f6de:	6833      	ldr	r3, [r6, #0]
 800f6e0:	1c59      	adds	r1, r3, #1
 800f6e2:	d019      	beq.n	800f718 <xTaskCheckForTimeOut+0x48>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f6e4:	490e      	ldr	r1, [pc, #56]	; (800f720 <xTaskCheckForTimeOut+0x50>)
 800f6e6:	6809      	ldr	r1, [r1, #0]
 800f6e8:	6820      	ldr	r0, [r4, #0]
 800f6ea:	4288      	cmp	r0, r1
 800f6ec:	d003      	beq.n	800f6f6 <xTaskCheckForTimeOut+0x26>
			xReturn = pdTRUE;
 800f6ee:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f6f0:	6861      	ldr	r1, [r4, #4]
 800f6f2:	4291      	cmp	r1, r2
 800f6f4:	d904      	bls.n	800f700 <xTaskCheckForTimeOut+0x30>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f6f6:	6861      	ldr	r1, [r4, #4]
 800f6f8:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800f6fa:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800f6fc:	4283      	cmp	r3, r0
 800f6fe:	d803      	bhi.n	800f708 <xTaskCheckForTimeOut+0x38>
	taskEXIT_CRITICAL();
 800f700:	f000 fc2c 	bl	800ff5c <vPortExitCritical>
}
 800f704:	0028      	movs	r0, r5
 800f706:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800f708:	1a8a      	subs	r2, r1, r2
 800f70a:	18d3      	adds	r3, r2, r3
 800f70c:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800f70e:	0020      	movs	r0, r4
 800f710:	f7ff ffd2 	bl	800f6b8 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800f714:	2500      	movs	r5, #0
 800f716:	e7f3      	b.n	800f700 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 800f718:	2500      	movs	r5, #0
 800f71a:	e7f1      	b.n	800f700 <xTaskCheckForTimeOut+0x30>
 800f71c:	200029ac 	.word	0x200029ac
 800f720:	20002968 	.word	0x20002968

0800f724 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f724:	4b01      	ldr	r3, [pc, #4]	; (800f72c <vTaskMissedYield+0x8>)
 800f726:	2201      	movs	r2, #1
 800f728:	601a      	str	r2, [r3, #0]
}
 800f72a:	4770      	bx	lr
 800f72c:	200029b0 	.word	0x200029b0

0800f730 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f730:	4b05      	ldr	r3, [pc, #20]	; (800f748 <xTaskGetSchedulerState+0x18>)
 800f732:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f734:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 800f736:	2b00      	cmp	r3, #0
 800f738:	d004      	beq.n	800f744 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f73a:	4b04      	ldr	r3, [pc, #16]	; (800f74c <xTaskGetSchedulerState+0x1c>)
 800f73c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800f73e:	4243      	negs	r3, r0
 800f740:	4158      	adcs	r0, r3
 800f742:	0040      	lsls	r0, r0, #1
	}
 800f744:	4770      	bx	lr
 800f746:	46c0      	nop			; (mov r8, r8)
 800f748:	20002980 	.word	0x20002980
 800f74c:	20002930 	.word	0x20002930

0800f750 <vTaskPriorityInherit>:
	{
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f754:	d01a      	beq.n	800f78c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f756:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f758:	4b19      	ldr	r3, [pc, #100]	; (800f7c0 <vTaskPriorityInherit+0x70>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75e:	429a      	cmp	r2, r3
 800f760:	d214      	bcs.n	800f78c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f762:	6983      	ldr	r3, [r0, #24]
 800f764:	2b00      	cmp	r3, #0
 800f766:	db05      	blt.n	800f774 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f768:	4b15      	ldr	r3, [pc, #84]	; (800f7c0 <vTaskPriorityInherit+0x70>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f76e:	2307      	movs	r3, #7
 800f770:	1a5b      	subs	r3, r3, r1
 800f772:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f774:	0093      	lsls	r3, r2, #2
 800f776:	189b      	adds	r3, r3, r2
 800f778:	009b      	lsls	r3, r3, #2
 800f77a:	4a12      	ldr	r2, [pc, #72]	; (800f7c4 <vTaskPriorityInherit+0x74>)
 800f77c:	189b      	adds	r3, r3, r2
 800f77e:	6962      	ldr	r2, [r4, #20]
 800f780:	429a      	cmp	r2, r3
 800f782:	d004      	beq.n	800f78e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f784:	4b0e      	ldr	r3, [pc, #56]	; (800f7c0 <vTaskPriorityInherit+0x70>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f78a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 800f78c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f78e:	1d25      	adds	r5, r4, #4
 800f790:	0028      	movs	r0, r5
 800f792:	f7fe ffe6 	bl	800e762 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f796:	4b0a      	ldr	r3, [pc, #40]	; (800f7c0 <vTaskPriorityInherit+0x70>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f79c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800f79e:	4a0a      	ldr	r2, [pc, #40]	; (800f7c8 <vTaskPriorityInherit+0x78>)
 800f7a0:	6812      	ldr	r2, [r2, #0]
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d808      	bhi.n	800f7b8 <vTaskPriorityInherit+0x68>
 800f7a6:	0098      	lsls	r0, r3, #2
 800f7a8:	18c0      	adds	r0, r0, r3
 800f7aa:	0080      	lsls	r0, r0, #2
 800f7ac:	4b05      	ldr	r3, [pc, #20]	; (800f7c4 <vTaskPriorityInherit+0x74>)
 800f7ae:	18c0      	adds	r0, r0, r3
 800f7b0:	0029      	movs	r1, r5
 800f7b2:	f7fe ffb3 	bl	800e71c <vListInsertEnd>
	}
 800f7b6:	e7e9      	b.n	800f78c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 800f7b8:	4a03      	ldr	r2, [pc, #12]	; (800f7c8 <vTaskPriorityInherit+0x78>)
 800f7ba:	6013      	str	r3, [r2, #0]
 800f7bc:	e7f3      	b.n	800f7a6 <vTaskPriorityInherit+0x56>
 800f7be:	46c0      	nop			; (mov r8, r8)
 800f7c0:	2000288c 	.word	0x2000288c
 800f7c4:	20002898 	.word	0x20002898
 800f7c8:	2000293c 	.word	0x2000293c

0800f7cc <xTaskPriorityDisinherit>:
	{
 800f7cc:	b570      	push	{r4, r5, r6, lr}
 800f7ce:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 800f7d0:	d023      	beq.n	800f81a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800f7d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800f7d4:	3b01      	subs	r3, #1
 800f7d6:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f7d8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800f7da:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800f7dc:	428a      	cmp	r2, r1
 800f7de:	d01e      	beq.n	800f81e <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 800f7e0:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d000      	beq.n	800f7e8 <xTaskPriorityDisinherit+0x1c>
	}
 800f7e6:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f7e8:	1d25      	adds	r5, r4, #4
 800f7ea:	0028      	movs	r0, r5
 800f7ec:	f7fe ffb9 	bl	800e762 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f7f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f7f2:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7f4:	2207      	movs	r2, #7
 800f7f6:	1ad2      	subs	r2, r2, r3
 800f7f8:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f7fa:	4a0a      	ldr	r2, [pc, #40]	; (800f824 <xTaskPriorityDisinherit+0x58>)
 800f7fc:	6812      	ldr	r2, [r2, #0]
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d901      	bls.n	800f806 <xTaskPriorityDisinherit+0x3a>
 800f802:	4a08      	ldr	r2, [pc, #32]	; (800f824 <xTaskPriorityDisinherit+0x58>)
 800f804:	6013      	str	r3, [r2, #0]
 800f806:	0098      	lsls	r0, r3, #2
 800f808:	18c0      	adds	r0, r0, r3
 800f80a:	0080      	lsls	r0, r0, #2
 800f80c:	4b06      	ldr	r3, [pc, #24]	; (800f828 <xTaskPriorityDisinherit+0x5c>)
 800f80e:	18c0      	adds	r0, r0, r3
 800f810:	0029      	movs	r1, r5
 800f812:	f7fe ff83 	bl	800e71c <vListInsertEnd>
					xReturn = pdTRUE;
 800f816:	2001      	movs	r0, #1
 800f818:	e7e5      	b.n	800f7e6 <xTaskPriorityDisinherit+0x1a>
	BaseType_t xReturn = pdFALSE;
 800f81a:	2000      	movs	r0, #0
 800f81c:	e7e3      	b.n	800f7e6 <xTaskPriorityDisinherit+0x1a>
 800f81e:	2000      	movs	r0, #0
 800f820:	e7e1      	b.n	800f7e6 <xTaskPriorityDisinherit+0x1a>
 800f822:	46c0      	nop			; (mov r8, r8)
 800f824:	2000293c 	.word	0x2000293c
 800f828:	20002898 	.word	0x20002898

0800f82c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800f82c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f82e:	b085      	sub	sp, #20
 800f830:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f832:	2300      	movs	r3, #0
 800f834:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f836:	4b2b      	ldr	r3, [pc, #172]	; (800f8e4 <vTaskList+0xb8>)
 800f838:	681a      	ldr	r2, [r3, #0]
 800f83a:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f83c:	6818      	ldr	r0, [r3, #0]
 800f83e:	0140      	lsls	r0, r0, #5
 800f840:	f000 fbfc 	bl	801003c <pvPortMalloc>
 800f844:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 800f846:	d04a      	beq.n	800f8de <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800f848:	9903      	ldr	r1, [sp, #12]
 800f84a:	2200      	movs	r2, #0
 800f84c:	f7ff fdf4 	bl	800f438 <uxTaskGetSystemState>
 800f850:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800f852:	2300      	movs	r3, #0
 800f854:	9302      	str	r3, [sp, #8]
 800f856:	9a02      	ldr	r2, [sp, #8]
 800f858:	9b03      	ldr	r3, [sp, #12]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d23c      	bcs.n	800f8d8 <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f85e:	4e22      	ldr	r6, [pc, #136]	; (800f8e8 <vTaskList+0xbc>)
 800f860:	e027      	b.n	800f8b2 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 800f862:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f864:	2b01      	cmp	r3, #1
 800f866:	d133      	bne.n	800f8d0 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f868:	9b02      	ldr	r3, [sp, #8]
 800f86a:	015b      	lsls	r3, r3, #5
 800f86c:	18fb      	adds	r3, r7, r3
 800f86e:	6859      	ldr	r1, [r3, #4]
 800f870:	0020      	movs	r0, r4
 800f872:	f7ff fae1 	bl	800ee38 <prvWriteNameToBuffer>
 800f876:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 800f878:	9b02      	ldr	r3, [sp, #8]
 800f87a:	9a02      	ldr	r2, [sp, #8]
 800f87c:	9902      	ldr	r1, [sp, #8]
 800f87e:	015b      	lsls	r3, r3, #5
 800f880:	18fb      	adds	r3, r7, r3
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	0149      	lsls	r1, r1, #5
 800f886:	1879      	adds	r1, r7, r1
 800f888:	6889      	ldr	r1, [r1, #8]
 800f88a:	9101      	str	r1, [sp, #4]
 800f88c:	0152      	lsls	r2, r2, #5
 800f88e:	18ba      	adds	r2, r7, r2
 800f890:	8b92      	ldrh	r2, [r2, #28]
 800f892:	9200      	str	r2, [sp, #0]
 800f894:	002a      	movs	r2, r5
 800f896:	0031      	movs	r1, r6
 800f898:	f004 fd52 	bl	8014340 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 800f89c:	0020      	movs	r0, r4
 800f89e:	f7f0 fc3b 	bl	8000118 <strlen>
 800f8a2:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 800f8a4:	9b02      	ldr	r3, [sp, #8]
 800f8a6:	3301      	adds	r3, #1
 800f8a8:	9302      	str	r3, [sp, #8]
 800f8aa:	9a02      	ldr	r2, [sp, #8]
 800f8ac:	9b03      	ldr	r3, [sp, #12]
 800f8ae:	429a      	cmp	r2, r3
 800f8b0:	d212      	bcs.n	800f8d8 <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f8b2:	9b02      	ldr	r3, [sp, #8]
 800f8b4:	015b      	lsls	r3, r3, #5
 800f8b6:	18fb      	adds	r3, r7, r3
 800f8b8:	7b1b      	ldrb	r3, [r3, #12]
 800f8ba:	2b02      	cmp	r3, #2
 800f8bc:	d00a      	beq.n	800f8d4 <vTaskList+0xa8>
 800f8be:	b2da      	uxtb	r2, r3
 800f8c0:	2a02      	cmp	r2, #2
 800f8c2:	d9ce      	bls.n	800f862 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800f8c4:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f8c6:	2b03      	cmp	r3, #3
 800f8c8:	d0ce      	beq.n	800f868 <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 800f8ca:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800f8cc:	2b04      	cmp	r3, #4
 800f8ce:	d0cb      	beq.n	800f868 <vTaskList+0x3c>
										cStatus = 0x00;
 800f8d0:	2500      	movs	r5, #0
										break;
 800f8d2:	e7c9      	b.n	800f868 <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800f8d4:	2542      	movs	r5, #66	; 0x42
 800f8d6:	e7c7      	b.n	800f868 <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f8d8:	0038      	movs	r0, r7
 800f8da:	f000 fc3d 	bl	8010158 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f8de:	b005      	add	sp, #20
 800f8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e2:	46c0      	nop			; (mov r8, r8)
 800f8e4:	20002928 	.word	0x20002928
 800f8e8:	0801b7c4 	.word	0x0801b7c4

0800f8ec <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800f8f6:	4b26      	ldr	r3, [pc, #152]	; (800f990 <vTaskGetRunTimeStats+0xa4>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 800f8fc:	6818      	ldr	r0, [r3, #0]
 800f8fe:	0140      	lsls	r0, r0, #5
 800f900:	f000 fb9c 	bl	801003c <pvPortMalloc>
 800f904:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 800f906:	d014      	beq.n	800f932 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 800f908:	9903      	ldr	r1, [sp, #12]
 800f90a:	aa01      	add	r2, sp, #4
 800f90c:	f7ff fd94 	bl	800f438 <uxTaskGetSystemState>
 800f910:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 800f912:	2164      	movs	r1, #100	; 0x64
 800f914:	9801      	ldr	r0, [sp, #4]
 800f916:	f7f0 fc1b 	bl	8000150 <__udivsi3>
 800f91a:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 800f91c:	2800      	cmp	r0, #0
 800f91e:	d005      	beq.n	800f92c <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 800f920:	2300      	movs	r3, #0
 800f922:	9302      	str	r3, [sp, #8]
 800f924:	9a02      	ldr	r2, [sp, #8]
 800f926:	9b03      	ldr	r3, [sp, #12]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d316      	bcc.n	800f95a <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 800f92c:	0030      	movs	r0, r6
 800f92e:	f000 fc13 	bl	8010158 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f932:	b004      	add	sp, #16
 800f934:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 800f936:	9b02      	ldr	r3, [sp, #8]
 800f938:	015b      	lsls	r3, r3, #5
 800f93a:	18f3      	adds	r3, r6, r3
 800f93c:	699a      	ldr	r2, [r3, #24]
 800f93e:	4915      	ldr	r1, [pc, #84]	; (800f994 <vTaskGetRunTimeStats+0xa8>)
 800f940:	f004 fcfe 	bl	8014340 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 800f944:	0020      	movs	r0, r4
 800f946:	f7f0 fbe7 	bl	8000118 <strlen>
 800f94a:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 800f94c:	9b02      	ldr	r3, [sp, #8]
 800f94e:	3301      	adds	r3, #1
 800f950:	9302      	str	r3, [sp, #8]
 800f952:	9a02      	ldr	r2, [sp, #8]
 800f954:	9b03      	ldr	r3, [sp, #12]
 800f956:	429a      	cmp	r2, r3
 800f958:	d2e8      	bcs.n	800f92c <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 800f95a:	9b02      	ldr	r3, [sp, #8]
 800f95c:	015b      	lsls	r3, r3, #5
 800f95e:	18f3      	adds	r3, r6, r3
 800f960:	9901      	ldr	r1, [sp, #4]
 800f962:	6998      	ldr	r0, [r3, #24]
 800f964:	f7f0 fbf4 	bl	8000150 <__udivsi3>
 800f968:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800f96a:	9b02      	ldr	r3, [sp, #8]
 800f96c:	015b      	lsls	r3, r3, #5
 800f96e:	18f3      	adds	r3, r6, r3
 800f970:	6859      	ldr	r1, [r3, #4]
 800f972:	0020      	movs	r0, r4
 800f974:	f7ff fa60 	bl	800ee38 <prvWriteNameToBuffer>
 800f978:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 800f97a:	2d00      	cmp	r5, #0
 800f97c:	d0db      	beq.n	800f936 <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 800f97e:	9b02      	ldr	r3, [sp, #8]
 800f980:	015b      	lsls	r3, r3, #5
 800f982:	18f3      	adds	r3, r6, r3
 800f984:	699a      	ldr	r2, [r3, #24]
 800f986:	002b      	movs	r3, r5
 800f988:	4903      	ldr	r1, [pc, #12]	; (800f998 <vTaskGetRunTimeStats+0xac>)
 800f98a:	f004 fcd9 	bl	8014340 <sprintf>
 800f98e:	e7d9      	b.n	800f944 <vTaskGetRunTimeStats+0x58>
 800f990:	20002928 	.word	0x20002928
 800f994:	0801b7b8 	.word	0x0801b7b8
 800f998:	0801b7ac 	.word	0x0801b7ac

0800f99c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f99c:	4b05      	ldr	r3, [pc, #20]	; (800f9b4 <pvTaskIncrementMutexHeldCount+0x18>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d004      	beq.n	800f9ae <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f9a4:	4b03      	ldr	r3, [pc, #12]	; (800f9b4 <pvTaskIncrementMutexHeldCount+0x18>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 800f9ae:	4b01      	ldr	r3, [pc, #4]	; (800f9b4 <pvTaskIncrementMutexHeldCount+0x18>)
 800f9b0:	6818      	ldr	r0, [r3, #0]
	}
 800f9b2:	4770      	bx	lr
 800f9b4:	2000288c 	.word	0x2000288c

0800f9b8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f9b8:	b570      	push	{r4, r5, r6, lr}
 800f9ba:	0005      	movs	r5, r0
 800f9bc:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f9be:	f000 fac1 	bl	800ff44 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f9c2:	4b20      	ldr	r3, [pc, #128]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d106      	bne.n	800f9da <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 800f9cc:	4b1d      	ldr	r3, [pc, #116]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800f9ce:	681a      	ldr	r2, [r3, #0]
 800f9d0:	235c      	movs	r3, #92	; 0x5c
 800f9d2:	2101      	movs	r1, #1
 800f9d4:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 800f9d6:	2c00      	cmp	r4, #0
 800f9d8:	d118      	bne.n	800fa0c <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f9da:	f000 fabf 	bl	800ff5c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f9de:	f000 fab1 	bl	800ff44 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f9e2:	4b18      	ldr	r3, [pc, #96]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 800f9e8:	2c00      	cmp	r4, #0
 800f9ea:	d006      	beq.n	800f9fa <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 800f9ec:	2d00      	cmp	r5, #0
 800f9ee:	d123      	bne.n	800fa38 <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 800f9f0:	4b14      	ldr	r3, [pc, #80]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800f9f6:	3b01      	subs	r3, #1
 800f9f8:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 800f9fa:	4b12      	ldr	r3, [pc, #72]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800f9fc:	681a      	ldr	r2, [r3, #0]
 800f9fe:	235c      	movs	r3, #92	; 0x5c
 800fa00:	2100      	movs	r1, #0
 800fa02:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 800fa04:	f000 faaa 	bl	800ff5c <vPortExitCritical>

		return ulReturn;
	}
 800fa08:	0020      	movs	r0, r4
 800fa0a:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fa0c:	4b0d      	ldr	r3, [pc, #52]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800fa0e:	6818      	ldr	r0, [r3, #0]
 800fa10:	3004      	adds	r0, #4
 800fa12:	f7fe fea6 	bl	800e762 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 800fa16:	1c63      	adds	r3, r4, #1
 800fa18:	d007      	beq.n	800fa2a <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 800fa1a:	4b0b      	ldr	r3, [pc, #44]	; (800fa48 <ulTaskNotifyTake+0x90>)
 800fa1c:	6818      	ldr	r0, [r3, #0]
 800fa1e:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fa20:	f7ff f9e0 	bl	800ede4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 800fa24:	f000 fa82 	bl	800ff2c <vPortYield>
 800fa28:	e7d7      	b.n	800f9da <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800fa2a:	4b06      	ldr	r3, [pc, #24]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800fa2c:	6819      	ldr	r1, [r3, #0]
 800fa2e:	3104      	adds	r1, #4
 800fa30:	4806      	ldr	r0, [pc, #24]	; (800fa4c <ulTaskNotifyTake+0x94>)
 800fa32:	f7fe fe73 	bl	800e71c <vListInsertEnd>
 800fa36:	e7f5      	b.n	800fa24 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fa38:	4b02      	ldr	r3, [pc, #8]	; (800fa44 <ulTaskNotifyTake+0x8c>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	659a      	str	r2, [r3, #88]	; 0x58
 800fa40:	e7db      	b.n	800f9fa <ulTaskNotifyTake+0x42>
 800fa42:	46c0      	nop			; (mov r8, r8)
 800fa44:	2000288c 	.word	0x2000288c
 800fa48:	200029ac 	.word	0x200029ac
 800fa4c:	20002984 	.word	0x20002984

0800fa50 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800fa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa52:	0004      	movs	r4, r0
 800fa54:	000d      	movs	r5, r1
 800fa56:	0016      	movs	r6, r2
 800fa58:	001f      	movs	r7, r3
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 800fa5a:	f000 fa73 	bl	800ff44 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800fa5e:	2f00      	cmp	r7, #0
 800fa60:	d001      	beq.n	800fa66 <xTaskGenericNotify+0x16>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800fa62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800fa64:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 800fa66:	225c      	movs	r2, #92	; 0x5c
 800fa68:	5ca3      	ldrb	r3, [r4, r2]
 800fa6a:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 800fa6c:	2102      	movs	r1, #2
 800fa6e:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 800fa70:	2e02      	cmp	r6, #2
 800fa72:	d014      	beq.n	800fa9e <xTaskGenericNotify+0x4e>
 800fa74:	d907      	bls.n	800fa86 <xTaskGenericNotify+0x36>
 800fa76:	2e03      	cmp	r6, #3
 800fa78:	d015      	beq.n	800faa6 <xTaskGenericNotify+0x56>
 800fa7a:	2e04      	cmp	r6, #4
 800fa7c:	d108      	bne.n	800fa90 <xTaskGenericNotify+0x40>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 800fa7e:	2b02      	cmp	r3, #2
 800fa80:	d030      	beq.n	800fae4 <xTaskGenericNotify+0x94>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800fa82:	65a5      	str	r5, [r4, #88]	; 0x58
 800fa84:	e004      	b.n	800fa90 <xTaskGenericNotify+0x40>
			switch( eAction )
 800fa86:	2e01      	cmp	r6, #1
 800fa88:	d102      	bne.n	800fa90 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue |= ulValue;
 800fa8a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800fa8c:	4315      	orrs	r5, r2
 800fa8e:	65a5      	str	r5, [r4, #88]	; 0x58
 800fa90:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 800fa92:	2b01      	cmp	r3, #1
 800fa94:	d009      	beq.n	800faaa <xTaskGenericNotify+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fa96:	f000 fa61 	bl	800ff5c <vPortExitCritical>

		return xReturn;
	}
 800fa9a:	0028      	movs	r0, r5
 800fa9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					( pxTCB->ulNotifiedValue )++;
 800fa9e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800faa0:	3201      	adds	r2, #1
 800faa2:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 800faa4:	e7f4      	b.n	800fa90 <xTaskGenericNotify+0x40>
					pxTCB->ulNotifiedValue = ulValue;
 800faa6:	65a5      	str	r5, [r4, #88]	; 0x58
					break;
 800faa8:	e7f2      	b.n	800fa90 <xTaskGenericNotify+0x40>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800faaa:	1d25      	adds	r5, r4, #4
 800faac:	0028      	movs	r0, r5
 800faae:	f7fe fe58 	bl	800e762 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800fab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fab4:	4a0c      	ldr	r2, [pc, #48]	; (800fae8 <xTaskGenericNotify+0x98>)
 800fab6:	6812      	ldr	r2, [r2, #0]
 800fab8:	4293      	cmp	r3, r2
 800faba:	d901      	bls.n	800fac0 <xTaskGenericNotify+0x70>
 800fabc:	4a0a      	ldr	r2, [pc, #40]	; (800fae8 <xTaskGenericNotify+0x98>)
 800fabe:	6013      	str	r3, [r2, #0]
 800fac0:	0098      	lsls	r0, r3, #2
 800fac2:	18c0      	adds	r0, r0, r3
 800fac4:	0080      	lsls	r0, r0, #2
 800fac6:	4b09      	ldr	r3, [pc, #36]	; (800faec <xTaskGenericNotify+0x9c>)
 800fac8:	18c0      	adds	r0, r0, r3
 800faca:	0029      	movs	r1, r5
 800facc:	f7fe fe26 	bl	800e71c <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fad0:	4b07      	ldr	r3, [pc, #28]	; (800faf0 <xTaskGenericNotify+0xa0>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fad8:	2501      	movs	r5, #1
 800fada:	429a      	cmp	r2, r3
 800fadc:	d9db      	bls.n	800fa96 <xTaskGenericNotify+0x46>
					taskYIELD_IF_USING_PREEMPTION();
 800fade:	f000 fa25 	bl	800ff2c <vPortYield>
 800fae2:	e7d8      	b.n	800fa96 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 800fae4:	2500      	movs	r5, #0
 800fae6:	e7d6      	b.n	800fa96 <xTaskGenericNotify+0x46>
 800fae8:	2000293c 	.word	0x2000293c
 800faec:	20002898 	.word	0x20002898
 800faf0:	2000288c 	.word	0x2000288c

0800faf4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800faf4:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800faf6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800faf8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800fafa:	4291      	cmp	r1, r2
 800fafc:	d80b      	bhi.n	800fb16 <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fafe:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800fb00:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 800fb02:	6983      	ldr	r3, [r0, #24]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d211      	bcs.n	800fb2c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800fb08:	1d01      	adds	r1, r0, #4
 800fb0a:	4b09      	ldr	r3, [pc, #36]	; (800fb30 <prvInsertTimerInActiveList+0x3c>)
 800fb0c:	6818      	ldr	r0, [r3, #0]
 800fb0e:	f7fe fe11 	bl	800e734 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fb12:	2400      	movs	r4, #0
 800fb14:	e00a      	b.n	800fb2c <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d202      	bcs.n	800fb20 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800fb1a:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800fb1c:	4299      	cmp	r1, r3
 800fb1e:	d205      	bcs.n	800fb2c <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fb20:	1d01      	adds	r1, r0, #4
 800fb22:	4b04      	ldr	r3, [pc, #16]	; (800fb34 <prvInsertTimerInActiveList+0x40>)
 800fb24:	6818      	ldr	r0, [r3, #0]
 800fb26:	f7fe fe05 	bl	800e734 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800fb2a:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 800fb2c:	0020      	movs	r0, r4
 800fb2e:	bd10      	pop	{r4, pc}
 800fb30:	200029b8 	.word	0x200029b8
 800fb34:	200029b4 	.word	0x200029b4

0800fb38 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fb38:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fb3a:	f000 fa03 	bl	800ff44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fb3e:	4b10      	ldr	r3, [pc, #64]	; (800fb80 <prvCheckForValidListAndQueue+0x48>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb46:	f000 fa09 	bl	800ff5c <vPortExitCritical>
}
 800fb4a:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 800fb4c:	4d0d      	ldr	r5, [pc, #52]	; (800fb84 <prvCheckForValidListAndQueue+0x4c>)
 800fb4e:	0028      	movs	r0, r5
 800fb50:	f7fe fdd6 	bl	800e700 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fb54:	4c0c      	ldr	r4, [pc, #48]	; (800fb88 <prvCheckForValidListAndQueue+0x50>)
 800fb56:	0020      	movs	r0, r4
 800fb58:	f7fe fdd2 	bl	800e700 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fb5c:	4b0b      	ldr	r3, [pc, #44]	; (800fb8c <prvCheckForValidListAndQueue+0x54>)
 800fb5e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fb60:	4b0b      	ldr	r3, [pc, #44]	; (800fb90 <prvCheckForValidListAndQueue+0x58>)
 800fb62:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800fb64:	2200      	movs	r2, #0
 800fb66:	2110      	movs	r1, #16
 800fb68:	2004      	movs	r0, #4
 800fb6a:	f7fe fed0 	bl	800e90e <xQueueGenericCreate>
 800fb6e:	4b04      	ldr	r3, [pc, #16]	; (800fb80 <prvCheckForValidListAndQueue+0x48>)
 800fb70:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800fb72:	2800      	cmp	r0, #0
 800fb74:	d0e7      	beq.n	800fb46 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fb76:	4907      	ldr	r1, [pc, #28]	; (800fb94 <prvCheckForValidListAndQueue+0x5c>)
 800fb78:	f7ff f892 	bl	800eca0 <vQueueAddToRegistry>
 800fb7c:	e7e3      	b.n	800fb46 <prvCheckForValidListAndQueue+0xe>
 800fb7e:	46c0      	nop			; (mov r8, r8)
 800fb80:	200029e8 	.word	0x200029e8
 800fb84:	200029bc 	.word	0x200029bc
 800fb88:	200029d0 	.word	0x200029d0
 800fb8c:	200029b4 	.word	0x200029b4
 800fb90:	200029b8 	.word	0x200029b8
 800fb94:	0801b804 	.word	0x0801b804

0800fb98 <xTimerCreateTimerTask>:
{
 800fb98:	b500      	push	{lr}
 800fb9a:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 800fb9c:	f7ff ffcc 	bl	800fb38 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800fba0:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <xTimerCreateTimerTask+0x30>)
 800fba2:	681b      	ldr	r3, [r3, #0]
BaseType_t xReturn = pdFAIL;
 800fba4:	2000      	movs	r0, #0
	if( xTimerQueue != NULL )
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00b      	beq.n	800fbc2 <xTimerCreateTimerTask+0x2a>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 800fbaa:	2300      	movs	r3, #0
 800fbac:	9303      	str	r3, [sp, #12]
 800fbae:	9302      	str	r3, [sp, #8]
 800fbb0:	9301      	str	r3, [sp, #4]
 800fbb2:	3303      	adds	r3, #3
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	2296      	movs	r2, #150	; 0x96
 800fbba:	4904      	ldr	r1, [pc, #16]	; (800fbcc <xTimerCreateTimerTask+0x34>)
 800fbbc:	4804      	ldr	r0, [pc, #16]	; (800fbd0 <xTimerCreateTimerTask+0x38>)
 800fbbe:	f7ff f953 	bl	800ee68 <xTaskGenericCreate>
}
 800fbc2:	b005      	add	sp, #20
 800fbc4:	bd00      	pop	{pc}
 800fbc6:	46c0      	nop			; (mov r8, r8)
 800fbc8:	200029e8 	.word	0x200029e8
 800fbcc:	0801b80c 	.word	0x0801b80c
 800fbd0:	0800fd11 	.word	0x0800fd11

0800fbd4 <xTimerCreate>:
{
 800fbd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	0007      	movs	r7, r0
 800fbda:	000d      	movs	r5, r1
 800fbdc:	0016      	movs	r6, r2
 800fbde:	9301      	str	r3, [sp, #4]
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 800fbe0:	2900      	cmp	r1, #0
 800fbe2:	d013      	beq.n	800fc0c <xTimerCreate+0x38>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800fbe4:	202c      	movs	r0, #44	; 0x2c
 800fbe6:	f000 fa29 	bl	801003c <pvPortMalloc>
 800fbea:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 800fbec:	d00b      	beq.n	800fc06 <xTimerCreate+0x32>
			prvCheckForValidListAndQueue();
 800fbee:	f7ff ffa3 	bl	800fb38 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 800fbf2:	6027      	str	r7, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800fbf4:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 800fbf6:	61e6      	str	r6, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 800fbf8:	9b01      	ldr	r3, [sp, #4]
 800fbfa:	6223      	str	r3, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800fbfc:	9b08      	ldr	r3, [sp, #32]
 800fbfe:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800fc00:	1d20      	adds	r0, r4, #4
 800fc02:	f7fe fd88 	bl	800e716 <vListInitialiseItem>
}
 800fc06:	0020      	movs	r0, r4
 800fc08:	b003      	add	sp, #12
 800fc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pxNewTimer = NULL;
 800fc0c:	2400      	movs	r4, #0
	return ( TimerHandle_t ) pxNewTimer;
 800fc0e:	e7fa      	b.n	800fc06 <xTimerCreate+0x32>

0800fc10 <xTimerGenericCommand>:
{
 800fc10:	b530      	push	{r4, r5, lr}
 800fc12:	b085      	sub	sp, #20
 800fc14:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 800fc16:	4b13      	ldr	r3, [pc, #76]	; (800fc64 <xTimerGenericCommand+0x54>)
 800fc18:	681c      	ldr	r4, [r3, #0]
 800fc1a:	2c00      	cmp	r4, #0
 800fc1c:	d020      	beq.n	800fc60 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 800fc1e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800fc20:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800fc22:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800fc24:	2905      	cmp	r1, #5
 800fc26:	dc13      	bgt.n	800fc50 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800fc28:	f7ff fd82 	bl	800f730 <xTaskGetSchedulerState>
 800fc2c:	2802      	cmp	r0, #2
 800fc2e:	d007      	beq.n	800fc40 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800fc30:	4b0c      	ldr	r3, [pc, #48]	; (800fc64 <xTimerGenericCommand+0x54>)
 800fc32:	6818      	ldr	r0, [r3, #0]
 800fc34:	2300      	movs	r3, #0
 800fc36:	2200      	movs	r2, #0
 800fc38:	4669      	mov	r1, sp
 800fc3a:	f7fe fe92 	bl	800e962 <xQueueGenericSend>
 800fc3e:	e00d      	b.n	800fc5c <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800fc40:	4b08      	ldr	r3, [pc, #32]	; (800fc64 <xTimerGenericCommand+0x54>)
 800fc42:	6818      	ldr	r0, [r3, #0]
 800fc44:	2300      	movs	r3, #0
 800fc46:	9a08      	ldr	r2, [sp, #32]
 800fc48:	4669      	mov	r1, sp
 800fc4a:	f7fe fe8a 	bl	800e962 <xQueueGenericSend>
 800fc4e:	e005      	b.n	800fc5c <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800fc50:	2300      	movs	r3, #0
 800fc52:	002a      	movs	r2, r5
 800fc54:	4669      	mov	r1, sp
 800fc56:	0020      	movs	r0, r4
 800fc58:	f7fe feff 	bl	800ea5a <xQueueGenericSendFromISR>
}
 800fc5c:	b005      	add	sp, #20
 800fc5e:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 800fc60:	2000      	movs	r0, #0
	return xReturn;
 800fc62:	e7fb      	b.n	800fc5c <xTimerGenericCommand+0x4c>
 800fc64:	200029e8 	.word	0x200029e8

0800fc68 <prvSampleTimeNow>:
{
 800fc68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc6a:	46d6      	mov	lr, sl
 800fc6c:	464f      	mov	r7, r9
 800fc6e:	4646      	mov	r6, r8
 800fc70:	b5c0      	push	{r6, r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 800fc76:	f7ff fa79 	bl	800f16c <xTaskGetTickCount>
 800fc7a:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 800fc7c:	4b21      	ldr	r3, [pc, #132]	; (800fd04 <prvSampleTimeNow+0x9c>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4283      	cmp	r3, r0
 800fc82:	d80b      	bhi.n	800fc9c <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 800fc84:	2300      	movs	r3, #0
 800fc86:	4642      	mov	r2, r8
 800fc88:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 800fc8a:	4b1e      	ldr	r3, [pc, #120]	; (800fd04 <prvSampleTimeNow+0x9c>)
 800fc8c:	601f      	str	r7, [r3, #0]
}
 800fc8e:	0038      	movs	r0, r7
 800fc90:	b004      	add	sp, #16
 800fc92:	bc1c      	pop	{r2, r3, r4}
 800fc94:	4690      	mov	r8, r2
 800fc96:	4699      	mov	r9, r3
 800fc98:	46a2      	mov	sl, r4
 800fc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc9c:	4e1a      	ldr	r6, [pc, #104]	; (800fd08 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fc9e:	2300      	movs	r3, #0
 800fca0:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fca2:	6833      	ldr	r3, [r6, #0]
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	2a00      	cmp	r2, #0
 800fca8:	d023      	beq.n	800fcf2 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fcb0:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fcb2:	1d25      	adds	r5, r4, #4
 800fcb4:	0028      	movs	r0, r5
 800fcb6:	f7fe fd54 	bl	800e762 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fcba:	0020      	movs	r0, r4
 800fcbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcbe:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fcc0:	69e3      	ldr	r3, [r4, #28]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d1ed      	bne.n	800fca2 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fcc6:	69a3      	ldr	r3, [r4, #24]
 800fcc8:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800fcca:	459a      	cmp	sl, r3
 800fccc:	d209      	bcs.n	800fce2 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fcce:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fcd0:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fcd2:	4b0d      	ldr	r3, [pc, #52]	; (800fd08 <prvSampleTimeNow+0xa0>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	9303      	str	r3, [sp, #12]
 800fcd8:	0029      	movs	r1, r5
 800fcda:	0018      	movs	r0, r3
 800fcdc:	f7fe fd2a 	bl	800e734 <vListInsert>
 800fce0:	e7df      	b.n	800fca2 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fce2:	464b      	mov	r3, r9
 800fce4:	9300      	str	r3, [sp, #0]
 800fce6:	4652      	mov	r2, sl
 800fce8:	4649      	mov	r1, r9
 800fcea:	0020      	movs	r0, r4
 800fcec:	f7ff ff90 	bl	800fc10 <xTimerGenericCommand>
 800fcf0:	e7d7      	b.n	800fca2 <prvSampleTimeNow+0x3a>
	pxCurrentTimerList = pxOverflowTimerList;
 800fcf2:	4a06      	ldr	r2, [pc, #24]	; (800fd0c <prvSampleTimeNow+0xa4>)
 800fcf4:	4904      	ldr	r1, [pc, #16]	; (800fd08 <prvSampleTimeNow+0xa0>)
 800fcf6:	6810      	ldr	r0, [r2, #0]
 800fcf8:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800fcfa:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800fcfc:	2301      	movs	r3, #1
 800fcfe:	4642      	mov	r2, r8
 800fd00:	6013      	str	r3, [r2, #0]
 800fd02:	e7c2      	b.n	800fc8a <prvSampleTimeNow+0x22>
 800fd04:	200029e4 	.word	0x200029e4
 800fd08:	200029b4 	.word	0x200029b4
 800fd0c:	200029b8 	.word	0x200029b8

0800fd10 <prvTimerTask>:
{
 800fd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd12:	46c6      	mov	lr, r8
 800fd14:	b500      	push	{lr}
 800fd16:	b08c      	sub	sp, #48	; 0x30
		xNextExpireTime = ( TickType_t ) 0U;
 800fd18:	2400      	movs	r4, #0
			switch( xMessage.xMessageID )
 800fd1a:	4f55      	ldr	r7, [pc, #340]	; (800fe70 <prvTimerTask+0x160>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fd1c:	4b55      	ldr	r3, [pc, #340]	; (800fe74 <prvTimerTask+0x164>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	2a00      	cmp	r2, #0
 800fd24:	d100      	bne.n	800fd28 <prvTimerTask+0x18>
 800fd26:	e096      	b.n	800fe56 <prvTimerTask+0x146>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fd28:	68db      	ldr	r3, [r3, #12]
 800fd2a:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 800fd2c:	f7ff fa16 	bl	800f15c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd30:	a808      	add	r0, sp, #32
 800fd32:	f7ff ff99 	bl	800fc68 <prvSampleTimeNow>
 800fd36:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fd38:	9b08      	ldr	r3, [sp, #32]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d000      	beq.n	800fd40 <prvTimerTask+0x30>
 800fd3e:	e093      	b.n	800fe68 <prvTimerTask+0x158>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fd40:	42a8      	cmp	r0, r5
 800fd42:	d233      	bcs.n	800fdac <prvTimerTask+0x9c>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 800fd44:	1ba9      	subs	r1, r5, r6
 800fd46:	4b4c      	ldr	r3, [pc, #304]	; (800fe78 <prvTimerTask+0x168>)
 800fd48:	6818      	ldr	r0, [r3, #0]
 800fd4a:	f7fe ffc1 	bl	800ecd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800fd4e:	f7ff faa9 	bl	800f2a4 <xTaskResumeAll>
 800fd52:	2800      	cmp	r0, #0
 800fd54:	d051      	beq.n	800fdfa <prvTimerTask+0xea>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fd56:	4d48      	ldr	r5, [pc, #288]	; (800fe78 <prvTimerTask+0x168>)
 800fd58:	0023      	movs	r3, r4
 800fd5a:	0022      	movs	r2, r4
 800fd5c:	a908      	add	r1, sp, #32
 800fd5e:	6828      	ldr	r0, [r5, #0]
 800fd60:	f7fe fedb 	bl	800eb1a <xQueueGenericReceive>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d0d9      	beq.n	800fd1c <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fd68:	9b08      	ldr	r3, [sp, #32]
 800fd6a:	9303      	str	r3, [sp, #12]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	da0c      	bge.n	800fd8a <prvTimerTask+0x7a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fd70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd72:	9303      	str	r3, [sp, #12]
 800fd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd76:	9304      	str	r3, [sp, #16]
 800fd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd7a:	9305      	str	r3, [sp, #20]
 800fd7c:	9903      	ldr	r1, [sp, #12]
 800fd7e:	9804      	ldr	r0, [sp, #16]
 800fd80:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fd82:	9b08      	ldr	r3, [sp, #32]
 800fd84:	9303      	str	r3, [sp, #12]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	dbe6      	blt.n	800fd58 <prvTimerTask+0x48>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fd8a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800fd8c:	6973      	ldr	r3, [r6, #20]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d002      	beq.n	800fd98 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fd92:	1d30      	adds	r0, r6, #4
 800fd94:	f7fe fce5 	bl	800e762 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fd98:	a807      	add	r0, sp, #28
 800fd9a:	f7ff ff65 	bl	800fc68 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800fd9e:	9b08      	ldr	r3, [sp, #32]
 800fda0:	9303      	str	r3, [sp, #12]
 800fda2:	2b09      	cmp	r3, #9
 800fda4:	d8d8      	bhi.n	800fd58 <prvTimerTask+0x48>
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	58fb      	ldr	r3, [r7, r3]
 800fdaa:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 800fdac:	f7ff fa7a 	bl	800f2a4 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fdb0:	4b30      	ldr	r3, [pc, #192]	; (800fe74 <prvTimerTask+0x164>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	68db      	ldr	r3, [r3, #12]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	4698      	mov	r8, r3
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fdba:	1d18      	adds	r0, r3, #4
 800fdbc:	f7fe fcd1 	bl	800e762 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fdc0:	4643      	mov	r3, r8
 800fdc2:	69db      	ldr	r3, [r3, #28]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	d004      	beq.n	800fdd2 <prvTimerTask+0xc2>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fdc8:	4643      	mov	r3, r8
 800fdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdcc:	4640      	mov	r0, r8
 800fdce:	4798      	blx	r3
 800fdd0:	e7c1      	b.n	800fd56 <prvTimerTask+0x46>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 800fdd2:	4643      	mov	r3, r8
 800fdd4:	699b      	ldr	r3, [r3, #24]
 800fdd6:	18e9      	adds	r1, r5, r3
 800fdd8:	002b      	movs	r3, r5
 800fdda:	0032      	movs	r2, r6
 800fddc:	4640      	mov	r0, r8
 800fdde:	f7ff fe89 	bl	800faf4 <prvInsertTimerInActiveList>
 800fde2:	2801      	cmp	r0, #1
 800fde4:	d1f0      	bne.n	800fdc8 <prvTimerTask+0xb8>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fde6:	9400      	str	r4, [sp, #0]
 800fde8:	0023      	movs	r3, r4
 800fdea:	002a      	movs	r2, r5
 800fdec:	0021      	movs	r1, r4
 800fdee:	4640      	mov	r0, r8
 800fdf0:	f7ff ff0e 	bl	800fc10 <xTimerGenericCommand>
 800fdf4:	e7e8      	b.n	800fdc8 <prvTimerTask+0xb8>
		xNextExpireTime = ( TickType_t ) 0U;
 800fdf6:	0025      	movs	r5, r4
 800fdf8:	e7a4      	b.n	800fd44 <prvTimerTask+0x34>
					portYIELD_WITHIN_API();
 800fdfa:	f000 f897 	bl	800ff2c <vPortYield>
 800fdfe:	e7aa      	b.n	800fd56 <prvTimerTask+0x46>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 800fe00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe02:	69b2      	ldr	r2, [r6, #24]
 800fe04:	4694      	mov	ip, r2
 800fe06:	4463      	add	r3, ip
 800fe08:	0019      	movs	r1, r3
 800fe0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe0c:	0002      	movs	r2, r0
 800fe0e:	0030      	movs	r0, r6
 800fe10:	f7ff fe70 	bl	800faf4 <prvInsertTimerInActiveList>
 800fe14:	2801      	cmp	r0, #1
 800fe16:	d19f      	bne.n	800fd58 <prvTimerTask+0x48>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fe18:	0030      	movs	r0, r6
 800fe1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fe1c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800fe1e:	69f3      	ldr	r3, [r6, #28]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d199      	bne.n	800fd58 <prvTimerTask+0x48>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fe24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe26:	69b1      	ldr	r1, [r6, #24]
 800fe28:	468c      	mov	ip, r1
 800fe2a:	4463      	add	r3, ip
 800fe2c:	001a      	movs	r2, r3
 800fe2e:	9400      	str	r4, [sp, #0]
 800fe30:	0023      	movs	r3, r4
 800fe32:	0021      	movs	r1, r4
 800fe34:	0030      	movs	r0, r6
 800fe36:	f7ff feeb 	bl	800fc10 <xTimerGenericCommand>
 800fe3a:	e78d      	b.n	800fd58 <prvTimerTask+0x48>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fe3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe3e:	61b1      	str	r1, [r6, #24]
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fe40:	1841      	adds	r1, r0, r1
 800fe42:	0003      	movs	r3, r0
 800fe44:	0002      	movs	r2, r0
 800fe46:	0030      	movs	r0, r6
 800fe48:	f7ff fe54 	bl	800faf4 <prvInsertTimerInActiveList>
 800fe4c:	e784      	b.n	800fd58 <prvTimerTask+0x48>
					vPortFree( pxTimer );
 800fe4e:	0030      	movs	r0, r6
 800fe50:	f000 f982 	bl	8010158 <vPortFree>
 800fe54:	e780      	b.n	800fd58 <prvTimerTask+0x48>
	vTaskSuspendAll();
 800fe56:	f7ff f981 	bl	800f15c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fe5a:	a808      	add	r0, sp, #32
 800fe5c:	f7ff ff04 	bl	800fc68 <prvSampleTimeNow>
 800fe60:	0006      	movs	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fe62:	9b08      	ldr	r3, [sp, #32]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d0c6      	beq.n	800fdf6 <prvTimerTask+0xe6>
			( void ) xTaskResumeAll();
 800fe68:	f7ff fa1c 	bl	800f2a4 <xTaskResumeAll>
 800fe6c:	e773      	b.n	800fd56 <prvTimerTask+0x46>
 800fe6e:	46c0      	nop			; (mov r8, r8)
 800fe70:	0801b7dc 	.word	0x0801b7dc
 800fe74:	200029b4 	.word	0x200029b4
 800fe78:	200029e8 	.word	0x200029e8

0800fe7c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800fe7c:	b510      	push	{r4, lr}
 800fe7e:	0004      	movs	r4, r0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );

	taskENTER_CRITICAL();
 800fe80:	f000 f860 	bl	800ff44 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800fe84:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 800fe86:	f000 f869 	bl	800ff5c <vPortExitCritical>

	return pvReturn;
}
 800fe8a:	0020      	movs	r0, r4
 800fe8c:	bd10      	pop	{r4, pc}

0800fe8e <prvTaskExitError>:
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
 800fe8e:	b672      	cpsid	i
 800fe90:	e7fe      	b.n	800fe90 <prvTaskExitError+0x2>
	...

0800fe94 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800fe94:	4a06      	ldr	r2, [pc, #24]	; (800feb0 <pxCurrentTCBConst2>)
 800fe96:	6813      	ldr	r3, [r2, #0]
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	3020      	adds	r0, #32
 800fe9c:	f380 8809 	msr	PSP, r0
 800fea0:	2002      	movs	r0, #2
 800fea2:	f380 8814 	msr	CONTROL, r0
 800fea6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800fea8:	46ae      	mov	lr, r5
 800feaa:	b662      	cpsie	i
 800feac:	bd00      	pop	{pc}
 800feae:	46c0      	nop			; (mov r8, r8)

0800feb0 <pxCurrentTCBConst2>:
 800feb0:	2000288c 	.word	0x2000288c

0800feb4 <pxPortInitialiseStack>:
{
 800feb4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800feb6:	1f03      	subs	r3, r0, #4
 800feb8:	2480      	movs	r4, #128	; 0x80
 800feba:	0464      	lsls	r4, r4, #17
 800febc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800febe:	3b04      	subs	r3, #4
 800fec0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fec2:	3b04      	subs	r3, #4
 800fec4:	4902      	ldr	r1, [pc, #8]	; (800fed0 <pxPortInitialiseStack+0x1c>)
 800fec6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fec8:	3b14      	subs	r3, #20
 800feca:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800fecc:	3840      	subs	r0, #64	; 0x40
}
 800fece:	bd10      	pop	{r4, pc}
 800fed0:	0800fe8f 	.word	0x0800fe8f

0800fed4 <SVC_Handler>:
}
 800fed4:	4770      	bx	lr
	...

0800fed8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fed8:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800feda:	4b0f      	ldr	r3, [pc, #60]	; (800ff18 <xPortStartScheduler+0x40>)
 800fedc:	6819      	ldr	r1, [r3, #0]
 800fede:	22ff      	movs	r2, #255	; 0xff
 800fee0:	0412      	lsls	r2, r2, #16
 800fee2:	430a      	orrs	r2, r1
 800fee4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800fee6:	6819      	ldr	r1, [r3, #0]
 800fee8:	22ff      	movs	r2, #255	; 0xff
 800feea:	0612      	lsls	r2, r2, #24
 800feec:	430a      	orrs	r2, r1
 800feee:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fef0:	4b0a      	ldr	r3, [pc, #40]	; (800ff1c <xPortStartScheduler+0x44>)
 800fef2:	6818      	ldr	r0, [r3, #0]
 800fef4:	21fa      	movs	r1, #250	; 0xfa
 800fef6:	0089      	lsls	r1, r1, #2
 800fef8:	f7f0 f92a 	bl	8000150 <__udivsi3>
 800fefc:	3801      	subs	r0, #1
 800fefe:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <xPortStartScheduler+0x48>)
 800ff00:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800ff02:	4b08      	ldr	r3, [pc, #32]	; (800ff24 <xPortStartScheduler+0x4c>)
 800ff04:	2207      	movs	r2, #7
 800ff06:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 800ff08:	4b07      	ldr	r3, [pc, #28]	; (800ff28 <xPortStartScheduler+0x50>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 800ff0e:	f7ff ffc1 	bl	800fe94 <vPortStartFirstTask>
	portDISABLE_INTERRUPTS();
 800ff12:	b672      	cpsid	i
 800ff14:	e7fe      	b.n	800ff14 <xPortStartScheduler+0x3c>
 800ff16:	46c0      	nop			; (mov r8, r8)
 800ff18:	e000ed20 	.word	0xe000ed20
 800ff1c:	20000104 	.word	0x20000104
 800ff20:	e000e014 	.word	0xe000e014
 800ff24:	e000e010 	.word	0xe000e010
 800ff28:	20000118 	.word	0x20000118

0800ff2c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800ff2c:	4b04      	ldr	r3, [pc, #16]	; (800ff40 <vPortYield+0x14>)
 800ff2e:	2280      	movs	r2, #128	; 0x80
 800ff30:	0552      	lsls	r2, r2, #21
 800ff32:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 800ff34:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ff38:	f3bf 8f6f 	isb	sy
}
 800ff3c:	4770      	bx	lr
 800ff3e:	46c0      	nop			; (mov r8, r8)
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 800ff44:	b672      	cpsid	i
    uxCriticalNesting++;
 800ff46:	4a04      	ldr	r2, [pc, #16]	; (800ff58 <vPortEnterCritical+0x14>)
 800ff48:	6813      	ldr	r3, [r2, #0]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 800ff4e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800ff52:	f3bf 8f6f 	isb	sy
}
 800ff56:	4770      	bx	lr
 800ff58:	20000118 	.word	0x20000118

0800ff5c <vPortExitCritical>:
    uxCriticalNesting--;
 800ff5c:	4a03      	ldr	r2, [pc, #12]	; (800ff6c <vPortExitCritical+0x10>)
 800ff5e:	6813      	ldr	r3, [r2, #0]
 800ff60:	3b01      	subs	r3, #1
 800ff62:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d100      	bne.n	800ff6a <vPortExitCritical+0xe>
        portENABLE_INTERRUPTS();
 800ff68:	b662      	cpsie	i
}
 800ff6a:	4770      	bx	lr
 800ff6c:	20000118 	.word	0x20000118

0800ff70 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 800ff70:	f3ef 8010 	mrs	r0, PRIMASK
 800ff74:	b672      	cpsid	i
 800ff76:	4770      	bx	lr
}
 800ff78:	2000      	movs	r0, #0

0800ff7a <vClearInterruptMaskFromISR>:
	__asm volatile(
 800ff7a:	f380 8810 	msr	PRIMASK, r0
 800ff7e:	4770      	bx	lr

0800ff80 <PendSV_Handler>:
	__asm volatile
 800ff80:	f3ef 8009 	mrs	r0, PSP
 800ff84:	4b0e      	ldr	r3, [pc, #56]	; (800ffc0 <pxCurrentTCBConst>)
 800ff86:	681a      	ldr	r2, [r3, #0]
 800ff88:	3820      	subs	r0, #32
 800ff8a:	6010      	str	r0, [r2, #0]
 800ff8c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ff8e:	4644      	mov	r4, r8
 800ff90:	464d      	mov	r5, r9
 800ff92:	4656      	mov	r6, sl
 800ff94:	465f      	mov	r7, fp
 800ff96:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800ff98:	b508      	push	{r3, lr}
 800ff9a:	b672      	cpsid	i
 800ff9c:	f7ff fa9e 	bl	800f4dc <vTaskSwitchContext>
 800ffa0:	b662      	cpsie	i
 800ffa2:	bc0c      	pop	{r2, r3}
 800ffa4:	6811      	ldr	r1, [r2, #0]
 800ffa6:	6808      	ldr	r0, [r1, #0]
 800ffa8:	3010      	adds	r0, #16
 800ffaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ffac:	46a0      	mov	r8, r4
 800ffae:	46a9      	mov	r9, r5
 800ffb0:	46b2      	mov	sl, r6
 800ffb2:	46bb      	mov	fp, r7
 800ffb4:	f380 8809 	msr	PSP, r0
 800ffb8:	3820      	subs	r0, #32
 800ffba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800ffbc:	4718      	bx	r3
 800ffbe:	46c0      	nop			; (mov r8, r8)

0800ffc0 <pxCurrentTCBConst>:
 800ffc0:	2000288c 	.word	0x2000288c

0800ffc4 <xPortSysTickHandler>:
{
 800ffc4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800ffc6:	f7ff ffd3 	bl	800ff70 <ulSetInterruptMaskFromISR>
 800ffca:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 800ffcc:	f7ff f8da 	bl	800f184 <xTaskIncrementTick>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d003      	beq.n	800ffdc <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800ffd4:	4b03      	ldr	r3, [pc, #12]	; (800ffe4 <xPortSysTickHandler+0x20>)
 800ffd6:	2280      	movs	r2, #128	; 0x80
 800ffd8:	0552      	lsls	r2, r2, #21
 800ffda:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800ffdc:	0020      	movs	r0, r4
 800ffde:	f7ff ffcc 	bl	800ff7a <vClearInterruptMaskFromISR>
}
 800ffe2:	bd10      	pop	{r4, pc}
 800ffe4:	e000ed04 	.word	0xe000ed04

0800ffe8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ffe8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ffea:	4a12      	ldr	r2, [pc, #72]	; (8010034 <prvInsertBlockIntoFreeList+0x4c>)
 800ffec:	e000      	b.n	800fff0 <prvInsertBlockIntoFreeList+0x8>
 800ffee:	001a      	movs	r2, r3
 800fff0:	6813      	ldr	r3, [r2, #0]
 800fff2:	4283      	cmp	r3, r0
 800fff4:	d3fb      	bcc.n	800ffee <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800fff6:	6851      	ldr	r1, [r2, #4]
 800fff8:	1854      	adds	r4, r2, r1
 800fffa:	42a0      	cmp	r0, r4
 800fffc:	d008      	beq.n	8010010 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800fffe:	6841      	ldr	r1, [r0, #4]
 8010000:	1844      	adds	r4, r0, r1
 8010002:	42a3      	cmp	r3, r4
 8010004:	d009      	beq.n	801001a <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010006:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010008:	4290      	cmp	r0, r2
 801000a:	d000      	beq.n	801000e <prvInsertBlockIntoFreeList+0x26>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801000c:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801000e:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010010:	6840      	ldr	r0, [r0, #4]
 8010012:	1841      	adds	r1, r0, r1
 8010014:	6051      	str	r1, [r2, #4]
 8010016:	0010      	movs	r0, r2
 8010018:	e7f1      	b.n	800fffe <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801001a:	4c07      	ldr	r4, [pc, #28]	; (8010038 <prvInsertBlockIntoFreeList+0x50>)
 801001c:	6824      	ldr	r4, [r4, #0]
 801001e:	42a3      	cmp	r3, r4
 8010020:	d006      	beq.n	8010030 <prvInsertBlockIntoFreeList+0x48>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	1859      	adds	r1, r3, r1
 8010026:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010028:	6813      	ldr	r3, [r2, #0]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	6003      	str	r3, [r0, #0]
 801002e:	e7eb      	b.n	8010008 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010030:	6003      	str	r3, [r0, #0]
 8010032:	e7e9      	b.n	8010008 <prvInsertBlockIntoFreeList+0x20>
 8010034:	20006944 	.word	0x20006944
 8010038:	200029ec 	.word	0x200029ec

0801003c <pvPortMalloc>:
{
 801003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010040:	f7ff f88c 	bl	800f15c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010044:	4b3d      	ldr	r3, [pc, #244]	; (801013c <pvPortMalloc+0x100>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d015      	beq.n	8010078 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801004c:	4b3c      	ldr	r3, [pc, #240]	; (8010140 <pvPortMalloc+0x104>)
 801004e:	681e      	ldr	r6, [r3, #0]
 8010050:	4234      	tst	r4, r6
 8010052:	d136      	bne.n	80100c2 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8010054:	2c00      	cmp	r4, #0
 8010056:	d03b      	beq.n	80100d0 <pvPortMalloc+0x94>
				xWantedSize += xHeapStructSize;
 8010058:	0022      	movs	r2, r4
 801005a:	3208      	adds	r2, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801005c:	0753      	lsls	r3, r2, #29
 801005e:	d002      	beq.n	8010066 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010060:	2307      	movs	r3, #7
 8010062:	439a      	bics	r2, r3
 8010064:	3208      	adds	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010066:	2a00      	cmp	r2, #0
 8010068:	d032      	beq.n	80100d0 <pvPortMalloc+0x94>
 801006a:	4b36      	ldr	r3, [pc, #216]	; (8010144 <pvPortMalloc+0x108>)
 801006c:	681f      	ldr	r7, [r3, #0]
 801006e:	4297      	cmp	r7, r2
 8010070:	d331      	bcc.n	80100d6 <pvPortMalloc+0x9a>
				pxBlock = xStart.pxNextFreeBlock;
 8010072:	4935      	ldr	r1, [pc, #212]	; (8010148 <pvPortMalloc+0x10c>)
 8010074:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010076:	e033      	b.n	80100e0 <pvPortMalloc+0xa4>
	ulAddress = ( uint32_t ) ucHeap;
 8010078:	4a34      	ldr	r2, [pc, #208]	; (801014c <pvPortMalloc+0x110>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801007a:	0753      	lsls	r3, r2, #29
 801007c:	d01f      	beq.n	80100be <pvPortMalloc+0x82>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 801007e:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010080:	2307      	movs	r3, #7
 8010082:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8010084:	4b32      	ldr	r3, [pc, #200]	; (8010150 <pvPortMalloc+0x114>)
 8010086:	469c      	mov	ip, r3
 8010088:	4462      	add	r2, ip
 801008a:	1a53      	subs	r3, r2, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801008c:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801008e:	482e      	ldr	r0, [pc, #184]	; (8010148 <pvPortMalloc+0x10c>)
 8010090:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010092:	2100      	movs	r1, #0
 8010094:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010096:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010098:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 801009a:	2007      	movs	r0, #7
 801009c:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 801009e:	4827      	ldr	r0, [pc, #156]	; (801013c <pvPortMalloc+0x100>)
 80100a0:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80100a2:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80100a4:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80100a6:	1a99      	subs	r1, r3, r2
 80100a8:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80100aa:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100ac:	4b29      	ldr	r3, [pc, #164]	; (8010154 <pvPortMalloc+0x118>)
 80100ae:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100b0:	4b24      	ldr	r3, [pc, #144]	; (8010144 <pvPortMalloc+0x108>)
 80100b2:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80100b4:	4b22      	ldr	r3, [pc, #136]	; (8010140 <pvPortMalloc+0x104>)
 80100b6:	2280      	movs	r2, #128	; 0x80
 80100b8:	0612      	lsls	r2, r2, #24
 80100ba:	601a      	str	r2, [r3, #0]
 80100bc:	e7c6      	b.n	801004c <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80100be:	4b24      	ldr	r3, [pc, #144]	; (8010150 <pvPortMalloc+0x114>)
 80100c0:	e7e5      	b.n	801008e <pvPortMalloc+0x52>
	( void ) xTaskResumeAll();
 80100c2:	f7ff f8ef 	bl	800f2a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 80100c6:	f7fd fbeb 	bl	800d8a0 <vApplicationMallocFailedHook>
 80100ca:	2500      	movs	r5, #0
}
 80100cc:	0028      	movs	r0, r5
 80100ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 80100d0:	f7ff f8e8 	bl	800f2a4 <xTaskResumeAll>
 80100d4:	e7f7      	b.n	80100c6 <pvPortMalloc+0x8a>
 80100d6:	f7ff f8e5 	bl	800f2a4 <xTaskResumeAll>
 80100da:	e7f4      	b.n	80100c6 <pvPortMalloc+0x8a>
 80100dc:	0021      	movs	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 80100de:	001c      	movs	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100e0:	6863      	ldr	r3, [r4, #4]
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d202      	bcs.n	80100ec <pvPortMalloc+0xb0>
 80100e6:	6823      	ldr	r3, [r4, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1f7      	bne.n	80100dc <pvPortMalloc+0xa0>
				if( pxBlock != pxEnd )
 80100ec:	4b13      	ldr	r3, [pc, #76]	; (801013c <pvPortMalloc+0x100>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	42a3      	cmp	r3, r4
 80100f2:	d01a      	beq.n	801012a <pvPortMalloc+0xee>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100f4:	680d      	ldr	r5, [r1, #0]
 80100f6:	3508      	adds	r5, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80100f8:	6823      	ldr	r3, [r4, #0]
 80100fa:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80100fc:	6863      	ldr	r3, [r4, #4]
 80100fe:	1a9b      	subs	r3, r3, r2
 8010100:	2b10      	cmp	r3, #16
 8010102:	d815      	bhi.n	8010130 <pvPortMalloc+0xf4>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010104:	6863      	ldr	r3, [r4, #4]
 8010106:	1aff      	subs	r7, r7, r3
 8010108:	4a0e      	ldr	r2, [pc, #56]	; (8010144 <pvPortMalloc+0x108>)
 801010a:	6017      	str	r7, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801010c:	4a11      	ldr	r2, [pc, #68]	; (8010154 <pvPortMalloc+0x118>)
 801010e:	6812      	ldr	r2, [r2, #0]
 8010110:	4297      	cmp	r7, r2
 8010112:	d201      	bcs.n	8010118 <pvPortMalloc+0xdc>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010114:	4a0f      	ldr	r2, [pc, #60]	; (8010154 <pvPortMalloc+0x118>)
 8010116:	6017      	str	r7, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010118:	431e      	orrs	r6, r3
 801011a:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801011c:	2300      	movs	r3, #0
 801011e:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8010120:	f7ff f8c0 	bl	800f2a4 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010124:	2d00      	cmp	r5, #0
 8010126:	d1d1      	bne.n	80100cc <pvPortMalloc+0x90>
 8010128:	e7cd      	b.n	80100c6 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 801012a:	f7ff f8bb 	bl	800f2a4 <xTaskResumeAll>
 801012e:	e7ca      	b.n	80100c6 <pvPortMalloc+0x8a>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010130:	18a0      	adds	r0, r4, r2
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010132:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010134:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010136:	f7ff ff57 	bl	800ffe8 <prvInsertBlockIntoFreeList>
 801013a:	e7e3      	b.n	8010104 <pvPortMalloc+0xc8>
 801013c:	200029ec 	.word	0x200029ec
 8010140:	20006938 	.word	0x20006938
 8010144:	2000693c 	.word	0x2000693c
 8010148:	20006944 	.word	0x20006944
 801014c:	200029f0 	.word	0x200029f0
 8010150:	00003f48 	.word	0x00003f48
 8010154:	20006940 	.word	0x20006940

08010158 <vPortFree>:
{
 8010158:	b510      	push	{r4, lr}
	if( pv != NULL )
 801015a:	2800      	cmp	r0, #0
 801015c:	d00b      	beq.n	8010176 <vPortFree+0x1e>
		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801015e:	0003      	movs	r3, r0
 8010160:	3b08      	subs	r3, #8
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	4a0d      	ldr	r2, [pc, #52]	; (801019c <vPortFree+0x44>)
 8010166:	6812      	ldr	r2, [r2, #0]
 8010168:	421a      	tst	r2, r3
 801016a:	d004      	beq.n	8010176 <vPortFree+0x1e>
			if( pxLink->pxNextFreeBlock == NULL )
 801016c:	0001      	movs	r1, r0
 801016e:	3908      	subs	r1, #8
 8010170:	6809      	ldr	r1, [r1, #0]
 8010172:	2900      	cmp	r1, #0
 8010174:	d000      	beq.n	8010178 <vPortFree+0x20>
}
 8010176:	bd10      	pop	{r4, pc}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010178:	3808      	subs	r0, #8
 801017a:	0004      	movs	r4, r0
 801017c:	4393      	bics	r3, r2
 801017e:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8010180:	f7fe ffec 	bl	800f15c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010184:	4a06      	ldr	r2, [pc, #24]	; (80101a0 <vPortFree+0x48>)
 8010186:	6863      	ldr	r3, [r4, #4]
 8010188:	6811      	ldr	r1, [r2, #0]
 801018a:	468c      	mov	ip, r1
 801018c:	4463      	add	r3, ip
 801018e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010190:	0020      	movs	r0, r4
 8010192:	f7ff ff29 	bl	800ffe8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010196:	f7ff f885 	bl	800f2a4 <xTaskResumeAll>
}
 801019a:	e7ec      	b.n	8010176 <vPortFree+0x1e>
 801019c:	20006938 	.word	0x20006938
 80101a0:	2000693c 	.word	0x2000693c

080101a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80101a4:	b510      	push	{r4, lr}
 80101a6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80101a8:	f002 fb40 	bl	801282c <HAL_RCC_GetHCLKFreq>
 80101ac:	21fa      	movs	r1, #250	; 0xfa
 80101ae:	0089      	lsls	r1, r1, #2
 80101b0:	f7ef ffce 	bl	8000150 <__udivsi3>
 80101b4:	f000 fb4c 	bl	8010850 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80101b8:	2001      	movs	r0, #1
 80101ba:	2200      	movs	r2, #0
 80101bc:	0021      	movs	r1, r4
 80101be:	4240      	negs	r0, r0
 80101c0:	f000 fafe 	bl	80107c0 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80101c4:	2000      	movs	r0, #0
 80101c6:	bd10      	pop	{r4, pc}

080101c8 <HAL_Init>:
{
 80101c8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80101ca:	4a06      	ldr	r2, [pc, #24]	; (80101e4 <HAL_Init+0x1c>)
 80101cc:	6813      	ldr	r3, [r2, #0]
 80101ce:	2110      	movs	r1, #16
 80101d0:	430b      	orrs	r3, r1
 80101d2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80101d4:	2000      	movs	r0, #0
 80101d6:	f7ff ffe5 	bl	80101a4 <HAL_InitTick>
  HAL_MspInit();
 80101da:	f001 fecf 	bl	8011f7c <HAL_MspInit>
}
 80101de:	2000      	movs	r0, #0
 80101e0:	bd10      	pop	{r4, pc}
 80101e2:	46c0      	nop			; (mov r8, r8)
 80101e4:	40022000 	.word	0x40022000

080101e8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80101e8:	4a02      	ldr	r2, [pc, #8]	; (80101f4 <HAL_IncTick+0xc>)
 80101ea:	6813      	ldr	r3, [r2, #0]
 80101ec:	3301      	adds	r3, #1
 80101ee:	6013      	str	r3, [r2, #0]
}
 80101f0:	4770      	bx	lr
 80101f2:	46c0      	nop			; (mov r8, r8)
 80101f4:	2000694c 	.word	0x2000694c

080101f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80101f8:	4b01      	ldr	r3, [pc, #4]	; (8010200 <HAL_GetTick+0x8>)
 80101fa:	6818      	ldr	r0, [r3, #0]
}
 80101fc:	4770      	bx	lr
 80101fe:	46c0      	nop			; (mov r8, r8)
 8010200:	2000694c 	.word	0x2000694c

08010204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010204:	b510      	push	{r4, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 801020a:	f7ff fff5 	bl	80101f8 <HAL_GetTick>
 801020e:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010210:	f7ff fff2 	bl	80101f8 <HAL_GetTick>
 8010214:	9b01      	ldr	r3, [sp, #4]
 8010216:	1b00      	subs	r0, r0, r4
 8010218:	4298      	cmp	r0, r3
 801021a:	d3f9      	bcc.n	8010210 <HAL_Delay+0xc>
  {
  }
}
 801021c:	b002      	add	sp, #8
 801021e:	bd10      	pop	{r4, pc}

08010220 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010220:	4b01      	ldr	r3, [pc, #4]	; (8010228 <HAL_GetREVID+0x8>)
 8010222:	6818      	ldr	r0, [r3, #0]
 8010224:	0c00      	lsrs	r0, r0, #16
}
 8010226:	4770      	bx	lr
 8010228:	40015800 	.word	0x40015800

0801022c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 801022c:	4b02      	ldr	r3, [pc, #8]	; (8010238 <HAL_GetDEVID+0xc>)
 801022e:	6818      	ldr	r0, [r3, #0]
 8010230:	0500      	lsls	r0, r0, #20
 8010232:	0d00      	lsrs	r0, r0, #20
}
 8010234:	4770      	bx	lr
 8010236:	46c0      	nop			; (mov r8, r8)
 8010238:	40015800 	.word	0x40015800

0801023c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 801023c:	b570      	push	{r4, r5, r6, lr}
 801023e:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010240:	6803      	ldr	r3, [r0, #0]
 8010242:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010244:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010246:	0752      	lsls	r2, r2, #29
 8010248:	d521      	bpl.n	801028e <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 801024a:	689a      	ldr	r2, [r3, #8]
 801024c:	0752      	lsls	r2, r2, #29
 801024e:	d506      	bpl.n	801025e <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010250:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010252:	0792      	lsls	r2, r2, #30
 8010254:	d403      	bmi.n	801025e <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010256:	689a      	ldr	r2, [r3, #8]
 8010258:	2110      	movs	r1, #16
 801025a:	430a      	orrs	r2, r1
 801025c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 801025e:	f7ff ffcb 	bl	80101f8 <HAL_GetTick>
 8010262:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010264:	2504      	movs	r5, #4
 8010266:	6823      	ldr	r3, [r4, #0]
 8010268:	689b      	ldr	r3, [r3, #8]
 801026a:	421d      	tst	r5, r3
 801026c:	d00e      	beq.n	801028c <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801026e:	f7ff ffc3 	bl	80101f8 <HAL_GetTick>
 8010272:	1b80      	subs	r0, r0, r6
 8010274:	2802      	cmp	r0, #2
 8010276:	d9f6      	bls.n	8010266 <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010278:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801027a:	2210      	movs	r2, #16
 801027c:	4313      	orrs	r3, r2
 801027e:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010280:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010282:	3a0f      	subs	r2, #15
 8010284:	4313      	orrs	r3, r2
 8010286:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010288:	2001      	movs	r0, #1
 801028a:	e000      	b.n	801028e <ADC_ConversionStop+0x52>
  return HAL_OK;
 801028c:	2000      	movs	r0, #0
}
 801028e:	bd70      	pop	{r4, r5, r6, pc}

08010290 <ADC_Disable>:
{
 8010290:	b570      	push	{r4, r5, r6, lr}
 8010292:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010294:	6802      	ldr	r2, [r0, #0]
 8010296:	6891      	ldr	r1, [r2, #8]
 8010298:	2303      	movs	r3, #3
 801029a:	400b      	ands	r3, r1
  return HAL_OK;
 801029c:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 801029e:	2b01      	cmp	r3, #1
 80102a0:	d000      	beq.n	80102a4 <ADC_Disable+0x14>
}
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80102a4:	6813      	ldr	r3, [r2, #0]
 80102a6:	07db      	lsls	r3, r3, #31
 80102a8:	d402      	bmi.n	80102b0 <ADC_Disable+0x20>
 80102aa:	68d3      	ldr	r3, [r2, #12]
 80102ac:	041b      	lsls	r3, r3, #16
 80102ae:	d5f8      	bpl.n	80102a2 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80102b0:	6891      	ldr	r1, [r2, #8]
 80102b2:	2305      	movs	r3, #5
 80102b4:	400b      	ands	r3, r1
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d009      	beq.n	80102ce <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80102ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102bc:	2210      	movs	r2, #16
 80102be:	4313      	orrs	r3, r2
 80102c0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80102c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80102c4:	3a0f      	subs	r2, #15
 80102c6:	4313      	orrs	r3, r2
 80102c8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80102ca:	2001      	movs	r0, #1
 80102cc:	e7e9      	b.n	80102a2 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 80102ce:	6893      	ldr	r3, [r2, #8]
 80102d0:	2102      	movs	r1, #2
 80102d2:	430b      	orrs	r3, r1
 80102d4:	6093      	str	r3, [r2, #8]
 80102d6:	6823      	ldr	r3, [r4, #0]
 80102d8:	2203      	movs	r2, #3
 80102da:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80102dc:	f7ff ff8c 	bl	80101f8 <HAL_GetTick>
 80102e0:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80102e2:	2501      	movs	r5, #1
 80102e4:	6823      	ldr	r3, [r4, #0]
 80102e6:	689b      	ldr	r3, [r3, #8]
 80102e8:	421d      	tst	r5, r3
 80102ea:	d00e      	beq.n	801030a <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80102ec:	f7ff ff84 	bl	80101f8 <HAL_GetTick>
 80102f0:	1b80      	subs	r0, r0, r6
 80102f2:	2802      	cmp	r0, #2
 80102f4:	d9f6      	bls.n	80102e4 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80102f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80102f8:	2210      	movs	r2, #16
 80102fa:	4313      	orrs	r3, r2
 80102fc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80102fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010300:	3a0f      	subs	r2, #15
 8010302:	4313      	orrs	r3, r2
 8010304:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010306:	2001      	movs	r0, #1
 8010308:	e7cb      	b.n	80102a2 <ADC_Disable+0x12>
  return HAL_OK;
 801030a:	2000      	movs	r0, #0
 801030c:	e7c9      	b.n	80102a2 <ADC_Disable+0x12>
	...

08010310 <ADC_Enable>:
{
 8010310:	b570      	push	{r4, r5, r6, lr}
 8010312:	b082      	sub	sp, #8
 8010314:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 801031a:	6803      	ldr	r3, [r0, #0]
 801031c:	6899      	ldr	r1, [r3, #8]
 801031e:	2203      	movs	r2, #3
 8010320:	400a      	ands	r2, r1
 8010322:	2a01      	cmp	r2, #1
 8010324:	d02d      	beq.n	8010382 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010326:	6899      	ldr	r1, [r3, #8]
 8010328:	4a20      	ldr	r2, [pc, #128]	; (80103ac <ADC_Enable+0x9c>)
 801032a:	4211      	tst	r1, r2
 801032c:	d131      	bne.n	8010392 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 801032e:	689a      	ldr	r2, [r3, #8]
 8010330:	2101      	movs	r1, #1
 8010332:	430a      	orrs	r2, r1
 8010334:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010336:	4b1e      	ldr	r3, [pc, #120]	; (80103b0 <ADC_Enable+0xa0>)
 8010338:	6818      	ldr	r0, [r3, #0]
 801033a:	491e      	ldr	r1, [pc, #120]	; (80103b4 <ADC_Enable+0xa4>)
 801033c:	f7ef ff08 	bl	8000150 <__udivsi3>
 8010340:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010342:	9b01      	ldr	r3, [sp, #4]
 8010344:	2b00      	cmp	r3, #0
 8010346:	d005      	beq.n	8010354 <ADC_Enable+0x44>
      wait_loop_index--;
 8010348:	9b01      	ldr	r3, [sp, #4]
 801034a:	3b01      	subs	r3, #1
 801034c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 801034e:	9b01      	ldr	r3, [sp, #4]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1f9      	bne.n	8010348 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010354:	f7ff ff50 	bl	80101f8 <HAL_GetTick>
 8010358:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 801035a:	2501      	movs	r5, #1
 801035c:	6823      	ldr	r3, [r4, #0]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	421d      	tst	r5, r3
 8010362:	d121      	bne.n	80103a8 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010364:	f7ff ff48 	bl	80101f8 <HAL_GetTick>
 8010368:	1b80      	subs	r0, r0, r6
 801036a:	2802      	cmp	r0, #2
 801036c:	d9f6      	bls.n	801035c <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801036e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010370:	2210      	movs	r2, #16
 8010372:	4313      	orrs	r3, r2
 8010374:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010376:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010378:	3a0f      	subs	r2, #15
 801037a:	4313      	orrs	r3, r2
 801037c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 801037e:	2001      	movs	r0, #1
 8010380:	e010      	b.n	80103a4 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010382:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010384:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010386:	07d2      	lsls	r2, r2, #31
 8010388:	d40c      	bmi.n	80103a4 <ADC_Enable+0x94>
 801038a:	68da      	ldr	r2, [r3, #12]
 801038c:	0412      	lsls	r2, r2, #16
 801038e:	d5ca      	bpl.n	8010326 <ADC_Enable+0x16>
 8010390:	e008      	b.n	80103a4 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010392:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010394:	2210      	movs	r2, #16
 8010396:	4313      	orrs	r3, r2
 8010398:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801039a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801039c:	3a0f      	subs	r2, #15
 801039e:	4313      	orrs	r3, r2
 80103a0:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80103a2:	2001      	movs	r0, #1
}
 80103a4:	b002      	add	sp, #8
 80103a6:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80103a8:	2000      	movs	r0, #0
 80103aa:	e7fb      	b.n	80103a4 <ADC_Enable+0x94>
 80103ac:	80000017 	.word	0x80000017
 80103b0:	20000104 	.word	0x20000104
 80103b4:	000f4240 	.word	0x000f4240

080103b8 <HAL_ADC_Init>:
{
 80103b8:	b570      	push	{r4, r5, r6, lr}
 80103ba:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 80103bc:	d100      	bne.n	80103c0 <HAL_ADC_Init+0x8>
 80103be:	e09b      	b.n	80104f8 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80103c0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d073      	beq.n	80104ae <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80103c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103c8:	06db      	lsls	r3, r3, #27
 80103ca:	d500      	bpl.n	80103ce <HAL_ADC_Init+0x16>
 80103cc:	e08e      	b.n	80104ec <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80103ce:	6822      	ldr	r2, [r4, #0]
 80103d0:	6893      	ldr	r3, [r2, #8]
 80103d2:	2104      	movs	r1, #4
 80103d4:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 80103d6:	d000      	beq.n	80103da <HAL_ADC_Init+0x22>
 80103d8:	e088      	b.n	80104ec <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 80103da:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80103dc:	4847      	ldr	r0, [pc, #284]	; (80104fc <HAL_ADC_Init+0x144>)
 80103de:	4003      	ands	r3, r0
 80103e0:	3006      	adds	r0, #6
 80103e2:	30ff      	adds	r0, #255	; 0xff
 80103e4:	4303      	orrs	r3, r0
 80103e6:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80103e8:	6890      	ldr	r0, [r2, #8]
 80103ea:	2303      	movs	r3, #3
 80103ec:	4003      	ands	r3, r0
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d063      	beq.n	80104ba <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 80103f2:	68d3      	ldr	r3, [r2, #12]
 80103f4:	2018      	movs	r0, #24
 80103f6:	4383      	bics	r3, r0
 80103f8:	68a0      	ldr	r0, [r4, #8]
 80103fa:	4303      	orrs	r3, r0
 80103fc:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80103fe:	6822      	ldr	r2, [r4, #0]
 8010400:	6913      	ldr	r3, [r2, #16]
 8010402:	009b      	lsls	r3, r3, #2
 8010404:	089b      	lsrs	r3, r3, #2
 8010406:	6860      	ldr	r0, [r4, #4]
 8010408:	4303      	orrs	r3, r0
 801040a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 801040c:	6822      	ldr	r2, [r4, #0]
 801040e:	68d3      	ldr	r3, [r2, #12]
 8010410:	483b      	ldr	r0, [pc, #236]	; (8010500 <HAL_ADC_Init+0x148>)
 8010412:	4003      	ands	r3, r0
 8010414:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010416:	69a3      	ldr	r3, [r4, #24]
 8010418:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 801041a:	69e3      	ldr	r3, [r4, #28]
 801041c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 801041e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010420:	6a20      	ldr	r0, [r4, #32]
 8010422:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010426:	000e      	movs	r6, r1
 8010428:	2b01      	cmp	r3, #1
 801042a:	d001      	beq.n	8010430 <HAL_ADC_Init+0x78>
 801042c:	2680      	movs	r6, #128	; 0x80
 801042e:	0176      	lsls	r6, r6, #5
 8010430:	68e3      	ldr	r3, [r4, #12]
 8010432:	431a      	orrs	r2, r3
 8010434:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010436:	6923      	ldr	r3, [r4, #16]
 8010438:	2b02      	cmp	r3, #2
 801043a:	d045      	beq.n	80104c8 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 801043c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801043e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010440:	4313      	orrs	r3, r2
 8010442:	4333      	orrs	r3, r6
 8010444:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010446:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010448:	2a01      	cmp	r2, #1
 801044a:	d03f      	beq.n	80104cc <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801044c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 801044e:	21c2      	movs	r1, #194	; 0xc2
 8010450:	31ff      	adds	r1, #255	; 0xff
 8010452:	428a      	cmp	r2, r1
 8010454:	d002      	beq.n	801045c <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010456:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010458:	430a      	orrs	r2, r1
 801045a:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 801045c:	6821      	ldr	r1, [r4, #0]
 801045e:	68ca      	ldr	r2, [r1, #12]
 8010460:	431a      	orrs	r2, r3
 8010462:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010464:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010466:	2180      	movs	r1, #128	; 0x80
 8010468:	0549      	lsls	r1, r1, #21
 801046a:	428a      	cmp	r2, r1
 801046c:	d002      	beq.n	8010474 <HAL_ADC_Init+0xbc>
 801046e:	3a01      	subs	r2, #1
 8010470:	2a06      	cmp	r2, #6
 8010472:	d80a      	bhi.n	801048a <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010474:	6820      	ldr	r0, [r4, #0]
 8010476:	6941      	ldr	r1, [r0, #20]
 8010478:	2207      	movs	r2, #7
 801047a:	4391      	bics	r1, r2
 801047c:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 801047e:	6821      	ldr	r1, [r4, #0]
 8010480:	6948      	ldr	r0, [r1, #20]
 8010482:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010484:	402a      	ands	r2, r5
 8010486:	4302      	orrs	r2, r0
 8010488:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 801048a:	6822      	ldr	r2, [r4, #0]
 801048c:	68d2      	ldr	r2, [r2, #12]
 801048e:	491d      	ldr	r1, [pc, #116]	; (8010504 <HAL_ADC_Init+0x14c>)
 8010490:	400a      	ands	r2, r1
 8010492:	429a      	cmp	r2, r3
 8010494:	d020      	beq.n	80104d8 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 8010496:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010498:	2212      	movs	r2, #18
 801049a:	4393      	bics	r3, r2
 801049c:	3a02      	subs	r2, #2
 801049e:	4313      	orrs	r3, r2
 80104a0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80104a2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80104a4:	3a0f      	subs	r2, #15
 80104a6:	4313      	orrs	r3, r2
 80104a8:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80104aa:	2001      	movs	r0, #1
 80104ac:	e023      	b.n	80104f6 <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 80104ae:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 80104b0:	2240      	movs	r2, #64	; 0x40
 80104b2:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 80104b4:	f7fc fb18 	bl	800cae8 <HAL_ADC_MspInit>
 80104b8:	e785      	b.n	80103c6 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 80104ba:	6813      	ldr	r3, [r2, #0]
 80104bc:	07db      	lsls	r3, r3, #31
 80104be:	d4a5      	bmi.n	801040c <HAL_ADC_Init+0x54>
 80104c0:	68d3      	ldr	r3, [r2, #12]
 80104c2:	041b      	lsls	r3, r3, #16
 80104c4:	d4a2      	bmi.n	801040c <HAL_ADC_Init+0x54>
 80104c6:	e794      	b.n	80103f2 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80104c8:	2104      	movs	r1, #4
 80104ca:	e7b7      	b.n	801043c <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d1bd      	bne.n	801044c <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80104d0:	2280      	movs	r2, #128	; 0x80
 80104d2:	0252      	lsls	r2, r2, #9
 80104d4:	4313      	orrs	r3, r2
 80104d6:	e7b9      	b.n	801044c <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 80104d8:	2300      	movs	r3, #0
 80104da:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80104dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104de:	2203      	movs	r2, #3
 80104e0:	4393      	bics	r3, r2
 80104e2:	3a02      	subs	r2, #2
 80104e4:	4313      	orrs	r3, r2
 80104e6:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104e8:	2000      	movs	r0, #0
 80104ea:	e004      	b.n	80104f6 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80104ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80104ee:	2210      	movs	r2, #16
 80104f0:	4313      	orrs	r3, r2
 80104f2:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80104f4:	2001      	movs	r0, #1
}
 80104f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80104f8:	2001      	movs	r0, #1
 80104fa:	e7fc      	b.n	80104f6 <HAL_ADC_Init+0x13e>
 80104fc:	fffffefd 	.word	0xfffffefd
 8010500:	fffe0219 	.word	0xfffe0219
 8010504:	833fffe7 	.word	0x833fffe7

08010508 <HAL_ADC_Start>:
{
 8010508:	b510      	push	{r4, lr}
 801050a:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801050c:	6803      	ldr	r3, [r0, #0]
 801050e:	689b      	ldr	r3, [r3, #8]
 8010510:	075b      	lsls	r3, r3, #29
 8010512:	d423      	bmi.n	801055c <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010514:	2340      	movs	r3, #64	; 0x40
 8010516:	5cc3      	ldrb	r3, [r0, r3]
 8010518:	2b01      	cmp	r3, #1
 801051a:	d021      	beq.n	8010560 <HAL_ADC_Start+0x58>
 801051c:	2340      	movs	r3, #64	; 0x40
 801051e:	2201      	movs	r2, #1
 8010520:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010522:	69c3      	ldr	r3, [r0, #28]
 8010524:	2b01      	cmp	r3, #1
 8010526:	d114      	bne.n	8010552 <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010528:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801052a:	4a0e      	ldr	r2, [pc, #56]	; (8010564 <HAL_ADC_Start+0x5c>)
 801052c:	401a      	ands	r2, r3
 801052e:	2380      	movs	r3, #128	; 0x80
 8010530:	005b      	lsls	r3, r3, #1
 8010532:	4313      	orrs	r3, r2
 8010534:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010536:	2300      	movs	r3, #0
 8010538:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 801053a:	2240      	movs	r2, #64	; 0x40
 801053c:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	3a24      	subs	r2, #36	; 0x24
 8010542:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010544:	6822      	ldr	r2, [r4, #0]
 8010546:	6893      	ldr	r3, [r2, #8]
 8010548:	2104      	movs	r1, #4
 801054a:	430b      	orrs	r3, r1
 801054c:	6093      	str	r3, [r2, #8]
 801054e:	2000      	movs	r0, #0
}
 8010550:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010552:	f7ff fedd 	bl	8010310 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010556:	2800      	cmp	r0, #0
 8010558:	d0e6      	beq.n	8010528 <HAL_ADC_Start+0x20>
 801055a:	e7f9      	b.n	8010550 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 801055c:	2002      	movs	r0, #2
 801055e:	e7f7      	b.n	8010550 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010560:	2002      	movs	r0, #2
 8010562:	e7f5      	b.n	8010550 <HAL_ADC_Start+0x48>
 8010564:	fffff0fe 	.word	0xfffff0fe

08010568 <HAL_ADC_Stop>:
{ 
 8010568:	b510      	push	{r4, lr}
 801056a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 801056c:	2340      	movs	r3, #64	; 0x40
 801056e:	5cc3      	ldrb	r3, [r0, r3]
 8010570:	2b01      	cmp	r3, #1
 8010572:	d017      	beq.n	80105a4 <HAL_ADC_Stop+0x3c>
 8010574:	2340      	movs	r3, #64	; 0x40
 8010576:	2201      	movs	r2, #1
 8010578:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 801057a:	f7ff fe5f 	bl	801023c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 801057e:	2800      	cmp	r0, #0
 8010580:	d003      	beq.n	801058a <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010582:	2340      	movs	r3, #64	; 0x40
 8010584:	2200      	movs	r2, #0
 8010586:	54e2      	strb	r2, [r4, r3]
}
 8010588:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 801058a:	0020      	movs	r0, r4
 801058c:	f7ff fe80 	bl	8010290 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010590:	2800      	cmp	r0, #0
 8010592:	d1f6      	bne.n	8010582 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010596:	4a04      	ldr	r2, [pc, #16]	; (80105a8 <HAL_ADC_Stop+0x40>)
 8010598:	4013      	ands	r3, r2
 801059a:	3204      	adds	r2, #4
 801059c:	32ff      	adds	r2, #255	; 0xff
 801059e:	4313      	orrs	r3, r2
 80105a0:	6463      	str	r3, [r4, #68]	; 0x44
 80105a2:	e7ee      	b.n	8010582 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80105a4:	2002      	movs	r0, #2
 80105a6:	e7ef      	b.n	8010588 <HAL_ADC_Stop+0x20>
 80105a8:	fffffefe 	.word	0xfffffefe

080105ac <HAL_ADC_PollForConversion>:
{
 80105ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ae:	0006      	movs	r6, r0
 80105b0:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80105b2:	6943      	ldr	r3, [r0, #20]
 80105b4:	2b08      	cmp	r3, #8
 80105b6:	d026      	beq.n	8010606 <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80105b8:	6803      	ldr	r3, [r0, #0]
 80105ba:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80105bc:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80105be:	07db      	lsls	r3, r3, #31
 80105c0:	d418      	bmi.n	80105f4 <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 80105c2:	f7ff fe19 	bl	80101f8 <HAL_GetTick>
 80105c6:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80105c8:	6832      	ldr	r2, [r6, #0]
 80105ca:	6813      	ldr	r3, [r2, #0]
 80105cc:	421d      	tst	r5, r3
 80105ce:	d11c      	bne.n	801060a <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80105d0:	1c63      	adds	r3, r4, #1
 80105d2:	d0fa      	beq.n	80105ca <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80105d4:	2c00      	cmp	r4, #0
 80105d6:	d004      	beq.n	80105e2 <HAL_ADC_PollForConversion+0x36>
 80105d8:	f7ff fe0e 	bl	80101f8 <HAL_GetTick>
 80105dc:	1bc0      	subs	r0, r0, r7
 80105de:	42a0      	cmp	r0, r4
 80105e0:	d9f2      	bls.n	80105c8 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80105e2:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80105e4:	2204      	movs	r2, #4
 80105e6:	4313      	orrs	r3, r2
 80105e8:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80105ea:	2340      	movs	r3, #64	; 0x40
 80105ec:	2200      	movs	r2, #0
 80105ee:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 80105f0:	2003      	movs	r0, #3
 80105f2:	e007      	b.n	8010604 <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80105f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80105f6:	2220      	movs	r2, #32
 80105f8:	4313      	orrs	r3, r2
 80105fa:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80105fc:	2340      	movs	r3, #64	; 0x40
 80105fe:	2200      	movs	r2, #0
 8010600:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010602:	2001      	movs	r0, #1
}
 8010604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010606:	2508      	movs	r5, #8
 8010608:	e7db      	b.n	80105c2 <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801060a:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801060c:	2380      	movs	r3, #128	; 0x80
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	430b      	orrs	r3, r1
 8010612:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010614:	68d1      	ldr	r1, [r2, #12]
 8010616:	23c0      	movs	r3, #192	; 0xc0
 8010618:	011b      	lsls	r3, r3, #4
 801061a:	4219      	tst	r1, r3
 801061c:	d113      	bne.n	8010646 <HAL_ADC_PollForConversion+0x9a>
 801061e:	6a33      	ldr	r3, [r6, #32]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d110      	bne.n	8010646 <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010624:	6813      	ldr	r3, [r2, #0]
 8010626:	071b      	lsls	r3, r3, #28
 8010628:	d50d      	bpl.n	8010646 <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 801062a:	6893      	ldr	r3, [r2, #8]
 801062c:	075b      	lsls	r3, r3, #29
 801062e:	d412      	bmi.n	8010656 <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010630:	6853      	ldr	r3, [r2, #4]
 8010632:	210c      	movs	r1, #12
 8010634:	438b      	bics	r3, r1
 8010636:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010638:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801063a:	4a0b      	ldr	r2, [pc, #44]	; (8010668 <HAL_ADC_PollForConversion+0xbc>)
 801063c:	4013      	ands	r3, r2
 801063e:	3204      	adds	r2, #4
 8010640:	32ff      	adds	r2, #255	; 0xff
 8010642:	4313      	orrs	r3, r2
 8010644:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010646:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010648:	69b3      	ldr	r3, [r6, #24]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d1da      	bne.n	8010604 <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801064e:	6833      	ldr	r3, [r6, #0]
 8010650:	220c      	movs	r2, #12
 8010652:	601a      	str	r2, [r3, #0]
 8010654:	e7d6      	b.n	8010604 <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010656:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010658:	2220      	movs	r2, #32
 801065a:	4313      	orrs	r3, r2
 801065c:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801065e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010660:	3a1f      	subs	r2, #31
 8010662:	4313      	orrs	r3, r2
 8010664:	64b3      	str	r3, [r6, #72]	; 0x48
 8010666:	e7ee      	b.n	8010646 <HAL_ADC_PollForConversion+0x9a>
 8010668:	fffffefe 	.word	0xfffffefe

0801066c <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801066c:	6803      	ldr	r3, [r0, #0]
 801066e:	2208      	movs	r2, #8
 8010670:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010672:	6803      	ldr	r3, [r0, #0]
 8010674:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010676:	4770      	bx	lr

08010678 <HAL_ADC_ConfigChannel>:
{
 8010678:	b530      	push	{r4, r5, lr}
 801067a:	b083      	sub	sp, #12
 801067c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 801067e:	2300      	movs	r3, #0
 8010680:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010682:	3340      	adds	r3, #64	; 0x40
 8010684:	5cc3      	ldrb	r3, [r0, r3]
 8010686:	2b01      	cmp	r3, #1
 8010688:	d100      	bne.n	801068c <HAL_ADC_ConfigChannel+0x14>
 801068a:	e088      	b.n	801079e <HAL_ADC_ConfigChannel+0x126>
 801068c:	2340      	movs	r3, #64	; 0x40
 801068e:	2201      	movs	r2, #1
 8010690:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010692:	6803      	ldr	r3, [r0, #0]
 8010694:	689a      	ldr	r2, [r3, #8]
 8010696:	0752      	lsls	r2, r2, #29
 8010698:	d475      	bmi.n	8010786 <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 801069a:	4a42      	ldr	r2, [pc, #264]	; (80107a4 <HAL_ADC_ConfigChannel+0x12c>)
 801069c:	6848      	ldr	r0, [r1, #4]
 801069e:	4290      	cmp	r0, r2
 80106a0:	d050      	beq.n	8010744 <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80106a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80106a4:	2201      	movs	r2, #1
 80106a6:	680d      	ldr	r5, [r1, #0]
 80106a8:	40aa      	lsls	r2, r5
 80106aa:	4302      	orrs	r2, r0
 80106ac:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80106ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80106b0:	2280      	movs	r2, #128	; 0x80
 80106b2:	0552      	lsls	r2, r2, #21
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d013      	beq.n	80106e0 <HAL_ADC_ConfigChannel+0x68>
 80106b8:	3b01      	subs	r3, #1
 80106ba:	2b06      	cmp	r3, #6
 80106bc:	d910      	bls.n	80106e0 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80106be:	6822      	ldr	r2, [r4, #0]
 80106c0:	6950      	ldr	r0, [r2, #20]
 80106c2:	2307      	movs	r3, #7
 80106c4:	4003      	ands	r3, r0
 80106c6:	6888      	ldr	r0, [r1, #8]
 80106c8:	4298      	cmp	r0, r3
 80106ca:	d009      	beq.n	80106e0 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80106cc:	6950      	ldr	r0, [r2, #20]
 80106ce:	2307      	movs	r3, #7
 80106d0:	4398      	bics	r0, r3
 80106d2:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80106d4:	6822      	ldr	r2, [r4, #0]
 80106d6:	6950      	ldr	r0, [r2, #20]
 80106d8:	688d      	ldr	r5, [r1, #8]
 80106da:	402b      	ands	r3, r5
 80106dc:	4303      	orrs	r3, r0
 80106de:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80106e0:	680b      	ldr	r3, [r1, #0]
 80106e2:	001a      	movs	r2, r3
 80106e4:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80106e6:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80106e8:	2a02      	cmp	r2, #2
 80106ea:	d851      	bhi.n	8010790 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80106ec:	4a2e      	ldr	r2, [pc, #184]	; (80107a8 <HAL_ADC_ConfigChannel+0x130>)
 80106ee:	6810      	ldr	r0, [r2, #0]
 80106f0:	2b10      	cmp	r3, #16
 80106f2:	d024      	beq.n	801073e <HAL_ADC_ConfigChannel+0xc6>
 80106f4:	3b11      	subs	r3, #17
 80106f6:	425a      	negs	r2, r3
 80106f8:	415a      	adcs	r2, r3
 80106fa:	4253      	negs	r3, r2
 80106fc:	4a2b      	ldr	r2, [pc, #172]	; (80107ac <HAL_ADC_ConfigChannel+0x134>)
 80106fe:	4013      	ands	r3, r2
 8010700:	2280      	movs	r2, #128	; 0x80
 8010702:	0452      	lsls	r2, r2, #17
 8010704:	4694      	mov	ip, r2
 8010706:	4463      	add	r3, ip
 8010708:	4303      	orrs	r3, r0
 801070a:	4a27      	ldr	r2, [pc, #156]	; (80107a8 <HAL_ADC_ConfigChannel+0x130>)
 801070c:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801070e:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010710:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8010712:	2b10      	cmp	r3, #16
 8010714:	d13c      	bne.n	8010790 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8010716:	4b26      	ldr	r3, [pc, #152]	; (80107b0 <HAL_ADC_ConfigChannel+0x138>)
 8010718:	6818      	ldr	r0, [r3, #0]
 801071a:	4926      	ldr	r1, [pc, #152]	; (80107b4 <HAL_ADC_ConfigChannel+0x13c>)
 801071c:	f7ef fd18 	bl	8000150 <__udivsi3>
 8010720:	0083      	lsls	r3, r0, #2
 8010722:	1818      	adds	r0, r3, r0
 8010724:	0040      	lsls	r0, r0, #1
 8010726:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 8010728:	9b01      	ldr	r3, [sp, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d035      	beq.n	801079a <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 801072e:	9b01      	ldr	r3, [sp, #4]
 8010730:	3b01      	subs	r3, #1
 8010732:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8010734:	9b01      	ldr	r3, [sp, #4]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1f9      	bne.n	801072e <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801073a:	2000      	movs	r0, #0
 801073c:	e028      	b.n	8010790 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801073e:	2380      	movs	r3, #128	; 0x80
 8010740:	041b      	lsls	r3, r3, #16
 8010742:	e7e1      	b.n	8010708 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010746:	2001      	movs	r0, #1
 8010748:	680d      	ldr	r5, [r1, #0]
 801074a:	40a8      	lsls	r0, r5
 801074c:	4382      	bics	r2, r0
 801074e:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010750:	680b      	ldr	r3, [r1, #0]
 8010752:	001a      	movs	r2, r3
 8010754:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010756:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8010758:	2a02      	cmp	r2, #2
 801075a:	d819      	bhi.n	8010790 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 801075c:	4a12      	ldr	r2, [pc, #72]	; (80107a8 <HAL_ADC_ConfigChannel+0x130>)
 801075e:	6811      	ldr	r1, [r2, #0]
 8010760:	2b10      	cmp	r3, #16
 8010762:	d00e      	beq.n	8010782 <HAL_ADC_ConfigChannel+0x10a>
 8010764:	3b11      	subs	r3, #17
 8010766:	425a      	negs	r2, r3
 8010768:	415a      	adcs	r2, r3
 801076a:	4252      	negs	r2, r2
 801076c:	23c0      	movs	r3, #192	; 0xc0
 801076e:	041b      	lsls	r3, r3, #16
 8010770:	4013      	ands	r3, r2
 8010772:	4a11      	ldr	r2, [pc, #68]	; (80107b8 <HAL_ADC_ConfigChannel+0x140>)
 8010774:	4694      	mov	ip, r2
 8010776:	4463      	add	r3, ip
 8010778:	400b      	ands	r3, r1
 801077a:	4a0b      	ldr	r2, [pc, #44]	; (80107a8 <HAL_ADC_ConfigChannel+0x130>)
 801077c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801077e:	2000      	movs	r0, #0
 8010780:	e006      	b.n	8010790 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8010782:	4b0e      	ldr	r3, [pc, #56]	; (80107bc <HAL_ADC_ConfigChannel+0x144>)
 8010784:	e7f8      	b.n	8010778 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010786:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010788:	2220      	movs	r2, #32
 801078a:	4313      	orrs	r3, r2
 801078c:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 801078e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8010790:	2340      	movs	r3, #64	; 0x40
 8010792:	2200      	movs	r2, #0
 8010794:	54e2      	strb	r2, [r4, r3]
}
 8010796:	b003      	add	sp, #12
 8010798:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801079a:	2000      	movs	r0, #0
 801079c:	e7f8      	b.n	8010790 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 801079e:	2002      	movs	r0, #2
 80107a0:	e7f9      	b.n	8010796 <HAL_ADC_ConfigChannel+0x11e>
 80107a2:	46c0      	nop			; (mov r8, r8)
 80107a4:	00001001 	.word	0x00001001
 80107a8:	40012708 	.word	0x40012708
 80107ac:	ff400000 	.word	0xff400000
 80107b0:	20000104 	.word	0x20000104
 80107b4:	000f4240 	.word	0x000f4240
 80107b8:	feffffff 	.word	0xfeffffff
 80107bc:	ff7fffff 	.word	0xff7fffff

080107c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80107c0:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 80107c2:	2800      	cmp	r0, #0
 80107c4:	db14      	blt.n	80107f0 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80107c6:	0883      	lsrs	r3, r0, #2
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	4a15      	ldr	r2, [pc, #84]	; (8010820 <HAL_NVIC_SetPriority+0x60>)
 80107cc:	4694      	mov	ip, r2
 80107ce:	4463      	add	r3, ip
 80107d0:	26c0      	movs	r6, #192	; 0xc0
 80107d2:	00b6      	lsls	r6, r6, #2
 80107d4:	599d      	ldr	r5, [r3, r6]
 80107d6:	2403      	movs	r4, #3
 80107d8:	4020      	ands	r0, r4
 80107da:	00c0      	lsls	r0, r0, #3
 80107dc:	22ff      	movs	r2, #255	; 0xff
 80107de:	0014      	movs	r4, r2
 80107e0:	4084      	lsls	r4, r0
 80107e2:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80107e4:	0189      	lsls	r1, r1, #6
 80107e6:	400a      	ands	r2, r1
 80107e8:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80107ea:	432a      	orrs	r2, r5
 80107ec:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80107ee:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80107f0:	b2c0      	uxtb	r0, r0
 80107f2:	230f      	movs	r3, #15
 80107f4:	4003      	ands	r3, r0
 80107f6:	3b08      	subs	r3, #8
 80107f8:	089b      	lsrs	r3, r3, #2
 80107fa:	009b      	lsls	r3, r3, #2
 80107fc:	4a09      	ldr	r2, [pc, #36]	; (8010824 <HAL_NVIC_SetPriority+0x64>)
 80107fe:	4694      	mov	ip, r2
 8010800:	4463      	add	r3, ip
 8010802:	69dd      	ldr	r5, [r3, #28]
 8010804:	2203      	movs	r2, #3
 8010806:	4010      	ands	r0, r2
 8010808:	00c0      	lsls	r0, r0, #3
 801080a:	24ff      	movs	r4, #255	; 0xff
 801080c:	0022      	movs	r2, r4
 801080e:	4082      	lsls	r2, r0
 8010810:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010812:	0189      	lsls	r1, r1, #6
 8010814:	400c      	ands	r4, r1
 8010816:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010818:	432c      	orrs	r4, r5
 801081a:	61dc      	str	r4, [r3, #28]
 801081c:	e7e7      	b.n	80107ee <HAL_NVIC_SetPriority+0x2e>
 801081e:	46c0      	nop			; (mov r8, r8)
 8010820:	e000e100 	.word	0xe000e100
 8010824:	e000ed00 	.word	0xe000ed00

08010828 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010828:	231f      	movs	r3, #31
 801082a:	4018      	ands	r0, r3
 801082c:	3b1e      	subs	r3, #30
 801082e:	4083      	lsls	r3, r0
 8010830:	4a01      	ldr	r2, [pc, #4]	; (8010838 <HAL_NVIC_EnableIRQ+0x10>)
 8010832:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010834:	4770      	bx	lr
 8010836:	46c0      	nop			; (mov r8, r8)
 8010838:	e000e100 	.word	0xe000e100

0801083c <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801083c:	231f      	movs	r3, #31
 801083e:	4018      	ands	r0, r3
 8010840:	3b1e      	subs	r3, #30
 8010842:	4083      	lsls	r3, r0
 8010844:	4901      	ldr	r1, [pc, #4]	; (801084c <HAL_NVIC_DisableIRQ+0x10>)
 8010846:	2280      	movs	r2, #128	; 0x80
 8010848:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801084a:	4770      	bx	lr
 801084c:	e000e100 	.word	0xe000e100

08010850 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010850:	1e43      	subs	r3, r0, #1
 8010852:	4a0a      	ldr	r2, [pc, #40]	; (801087c <HAL_SYSTICK_Config+0x2c>)
 8010854:	2001      	movs	r0, #1
 8010856:	4293      	cmp	r3, r2
 8010858:	d80e      	bhi.n	8010878 <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801085a:	4a09      	ldr	r2, [pc, #36]	; (8010880 <HAL_SYSTICK_Config+0x30>)
 801085c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801085e:	4809      	ldr	r0, [pc, #36]	; (8010884 <HAL_SYSTICK_Config+0x34>)
 8010860:	6a03      	ldr	r3, [r0, #32]
 8010862:	021b      	lsls	r3, r3, #8
 8010864:	0a1b      	lsrs	r3, r3, #8
 8010866:	21c0      	movs	r1, #192	; 0xc0
 8010868:	0609      	lsls	r1, r1, #24
 801086a:	430b      	orrs	r3, r1
 801086c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801086e:	2300      	movs	r3, #0
 8010870:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010872:	3307      	adds	r3, #7
 8010874:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010876:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010878:	4770      	bx	lr
 801087a:	46c0      	nop			; (mov r8, r8)
 801087c:	00ffffff 	.word	0x00ffffff
 8010880:	e000e010 	.word	0xe000e010
 8010884:	e000ed00 	.word	0xe000ed00

08010888 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010888:	2804      	cmp	r0, #4
 801088a:	d005      	beq.n	8010898 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 801088c:	4a05      	ldr	r2, [pc, #20]	; (80108a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801088e:	6813      	ldr	r3, [r2, #0]
 8010890:	2104      	movs	r1, #4
 8010892:	438b      	bics	r3, r1
 8010894:	6013      	str	r3, [r2, #0]
  }
}
 8010896:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010898:	4a02      	ldr	r2, [pc, #8]	; (80108a4 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801089a:	6813      	ldr	r3, [r2, #0]
 801089c:	2104      	movs	r1, #4
 801089e:	430b      	orrs	r3, r1
 80108a0:	6013      	str	r3, [r2, #0]
 80108a2:	e7f8      	b.n	8010896 <HAL_SYSTICK_CLKSourceConfig+0xe>
 80108a4:	e000e010 	.word	0xe000e010

080108a8 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80108a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108aa:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 80108ac:	0891      	lsrs	r1, r2, #2
 80108ae:	d013      	beq.n	80108d8 <CRC_Handle_8+0x30>
 80108b0:	0034      	movs	r4, r6
 80108b2:	2303      	movs	r3, #3
 80108b4:	0017      	movs	r7, r2
 80108b6:	439f      	bics	r7, r3
 80108b8:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80108ba:	7823      	ldrb	r3, [r4, #0]
 80108bc:	061b      	lsls	r3, r3, #24
 80108be:	7865      	ldrb	r5, [r4, #1]
 80108c0:	042d      	lsls	r5, r5, #16
 80108c2:	432b      	orrs	r3, r5
 80108c4:	78e5      	ldrb	r5, [r4, #3]
 80108c6:	432b      	orrs	r3, r5
 80108c8:	78a5      	ldrb	r5, [r4, #2]
 80108ca:	022d      	lsls	r5, r5, #8
 80108cc:	432b      	orrs	r3, r5
 80108ce:	6805      	ldr	r5, [r0, #0]
 80108d0:	602b      	str	r3, [r5, #0]
 80108d2:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 80108d4:	42bc      	cmp	r4, r7
 80108d6:	d1f0      	bne.n	80108ba <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80108d8:	2303      	movs	r3, #3
 80108da:	401a      	ands	r2, r3
 80108dc:	d01e      	beq.n	801091c <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 80108de:	2a01      	cmp	r2, #1
 80108e0:	d00a      	beq.n	80108f8 <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80108e2:	2a02      	cmp	r2, #2
 80108e4:	d10d      	bne.n	8010902 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80108e6:	0089      	lsls	r1, r1, #2
 80108e8:	5c72      	ldrb	r2, [r6, r1]
 80108ea:	0212      	lsls	r2, r2, #8
 80108ec:	1871      	adds	r1, r6, r1
 80108ee:	784b      	ldrb	r3, [r1, #1]
 80108f0:	4313      	orrs	r3, r2
 80108f2:	6802      	ldr	r2, [r0, #0]
 80108f4:	8013      	strh	r3, [r2, #0]
 80108f6:	e011      	b.n	801091c <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80108f8:	0089      	lsls	r1, r1, #2
 80108fa:	5d8b      	ldrb	r3, [r1, r6]
 80108fc:	6802      	ldr	r2, [r0, #0]
 80108fe:	7013      	strb	r3, [r2, #0]
 8010900:	e00c      	b.n	801091c <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 8010902:	2a03      	cmp	r2, #3
 8010904:	d10a      	bne.n	801091c <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010906:	0089      	lsls	r1, r1, #2
 8010908:	5c72      	ldrb	r2, [r6, r1]
 801090a:	0212      	lsls	r2, r2, #8
 801090c:	1871      	adds	r1, r6, r1
 801090e:	784b      	ldrb	r3, [r1, #1]
 8010910:	4313      	orrs	r3, r2
 8010912:	6802      	ldr	r2, [r0, #0]
 8010914:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010916:	788b      	ldrb	r3, [r1, #2]
 8010918:	6802      	ldr	r2, [r0, #0]
 801091a:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801091c:	6803      	ldr	r3, [r0, #0]
 801091e:	6818      	ldr	r0, [r3, #0]
}
 8010920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010922 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010924:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010926:	0852      	lsrs	r2, r2, #1
 8010928:	d00b      	beq.n	8010942 <CRC_Handle_16+0x20>
 801092a:	000c      	movs	r4, r1
 801092c:	0097      	lsls	r7, r2, #2
 801092e:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010930:	8823      	ldrh	r3, [r4, #0]
 8010932:	041b      	lsls	r3, r3, #16
 8010934:	8866      	ldrh	r6, [r4, #2]
 8010936:	4333      	orrs	r3, r6
 8010938:	6806      	ldr	r6, [r0, #0]
 801093a:	6033      	str	r3, [r6, #0]
 801093c:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 801093e:	42bc      	cmp	r4, r7
 8010940:	d1f6      	bne.n	8010930 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8010942:	07eb      	lsls	r3, r5, #31
 8010944:	d503      	bpl.n	801094e <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010946:	0092      	lsls	r2, r2, #2
 8010948:	5a53      	ldrh	r3, [r2, r1]
 801094a:	6802      	ldr	r2, [r0, #0]
 801094c:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 801094e:	6803      	ldr	r3, [r0, #0]
 8010950:	6818      	ldr	r0, [r3, #0]
}
 8010952:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010954 <HAL_CRC_Init>:
{
 8010954:	b510      	push	{r4, lr}
 8010956:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010958:	d029      	beq.n	80109ae <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 801095a:	7f43      	ldrb	r3, [r0, #29]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d01e      	beq.n	801099e <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010960:	2302      	movs	r3, #2
 8010962:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010964:	0020      	movs	r0, r4
 8010966:	f000 f8b1 	bl	8010acc <HAL_CRCEx_Init>
 801096a:	2800      	cmp	r0, #0
 801096c:	d121      	bne.n	80109b2 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 801096e:	7963      	ldrb	r3, [r4, #5]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d118      	bne.n	80109a6 <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010974:	6823      	ldr	r3, [r4, #0]
 8010976:	2201      	movs	r2, #1
 8010978:	4252      	negs	r2, r2
 801097a:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 801097c:	6822      	ldr	r2, [r4, #0]
 801097e:	6893      	ldr	r3, [r2, #8]
 8010980:	2160      	movs	r1, #96	; 0x60
 8010982:	438b      	bics	r3, r1
 8010984:	6961      	ldr	r1, [r4, #20]
 8010986:	430b      	orrs	r3, r1
 8010988:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801098a:	6822      	ldr	r2, [r4, #0]
 801098c:	6893      	ldr	r3, [r2, #8]
 801098e:	2180      	movs	r1, #128	; 0x80
 8010990:	438b      	bics	r3, r1
 8010992:	69a1      	ldr	r1, [r4, #24]
 8010994:	430b      	orrs	r3, r1
 8010996:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010998:	2301      	movs	r3, #1
 801099a:	7763      	strb	r3, [r4, #29]
}
 801099c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 801099e:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80109a0:	f7fa ffda 	bl	800b958 <HAL_CRC_MspInit>
 80109a4:	e7dc      	b.n	8010960 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80109a6:	6823      	ldr	r3, [r4, #0]
 80109a8:	6922      	ldr	r2, [r4, #16]
 80109aa:	611a      	str	r2, [r3, #16]
 80109ac:	e7e6      	b.n	801097c <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 80109ae:	2001      	movs	r0, #1
 80109b0:	e7f4      	b.n	801099c <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 80109b2:	2001      	movs	r0, #1
 80109b4:	e7f2      	b.n	801099c <HAL_CRC_Init+0x48>

080109b6 <HAL_CRC_Accumulate>:
{
 80109b6:	b510      	push	{r4, lr}
 80109b8:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80109ba:	7f03      	ldrb	r3, [r0, #28]
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d024      	beq.n	8010a0a <HAL_CRC_Accumulate+0x54>
 80109c0:	2301      	movs	r3, #1
 80109c2:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80109c4:	3301      	adds	r3, #1
 80109c6:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80109c8:	6a03      	ldr	r3, [r0, #32]
 80109ca:	2b02      	cmp	r3, #2
 80109cc:	d01a      	beq.n	8010a04 <HAL_CRC_Accumulate+0x4e>
 80109ce:	2b03      	cmp	r3, #3
 80109d0:	d007      	beq.n	80109e2 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80109d2:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80109d4:	2b01      	cmp	r3, #1
 80109d6:	d011      	beq.n	80109fc <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 80109d8:	2301      	movs	r3, #1
 80109da:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80109dc:	2300      	movs	r3, #0
 80109de:	7723      	strb	r3, [r4, #28]
}
 80109e0:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80109e2:	2a00      	cmp	r2, #0
 80109e4:	d007      	beq.n	80109f6 <HAL_CRC_Accumulate+0x40>
 80109e6:	000b      	movs	r3, r1
 80109e8:	0092      	lsls	r2, r2, #2
 80109ea:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80109ec:	6822      	ldr	r2, [r4, #0]
 80109ee:	cb01      	ldmia	r3!, {r0}
 80109f0:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80109f2:	428b      	cmp	r3, r1
 80109f4:	d1fa      	bne.n	80109ec <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80109f6:	6823      	ldr	r3, [r4, #0]
 80109f8:	6818      	ldr	r0, [r3, #0]
      break;
 80109fa:	e7ed      	b.n	80109d8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80109fc:	0020      	movs	r0, r4
 80109fe:	f7ff ff53 	bl	80108a8 <CRC_Handle_8>
      break;
 8010a02:	e7e9      	b.n	80109d8 <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010a04:	f7ff ff8d 	bl	8010922 <CRC_Handle_16>
      break;
 8010a08:	e7e6      	b.n	80109d8 <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010a0a:	2002      	movs	r0, #2
 8010a0c:	e7e8      	b.n	80109e0 <HAL_CRC_Accumulate+0x2a>

08010a0e <HAL_CRC_Calculate>:
{
 8010a0e:	b570      	push	{r4, r5, r6, lr}
 8010a10:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010a12:	7f03      	ldrb	r3, [r0, #28]
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d029      	beq.n	8010a6c <HAL_CRC_Calculate+0x5e>
 8010a18:	2501      	movs	r5, #1
 8010a1a:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010a1c:	2302      	movs	r3, #2
 8010a1e:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010a20:	6800      	ldr	r0, [r0, #0]
 8010a22:	6883      	ldr	r3, [r0, #8]
 8010a24:	432b      	orrs	r3, r5
 8010a26:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010a28:	6a23      	ldr	r3, [r4, #32]
 8010a2a:	2b02      	cmp	r3, #2
 8010a2c:	d01a      	beq.n	8010a64 <HAL_CRC_Calculate+0x56>
 8010a2e:	2b03      	cmp	r3, #3
 8010a30:	d007      	beq.n	8010a42 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8010a32:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d011      	beq.n	8010a5c <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 8010a38:	2301      	movs	r3, #1
 8010a3a:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	7723      	strb	r3, [r4, #28]
}
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	d007      	beq.n	8010a56 <HAL_CRC_Calculate+0x48>
 8010a46:	000b      	movs	r3, r1
 8010a48:	0092      	lsls	r2, r2, #2
 8010a4a:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010a4c:	6820      	ldr	r0, [r4, #0]
 8010a4e:	cb20      	ldmia	r3!, {r5}
 8010a50:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8010a52:	428b      	cmp	r3, r1
 8010a54:	d1fa      	bne.n	8010a4c <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010a56:	6823      	ldr	r3, [r4, #0]
 8010a58:	6818      	ldr	r0, [r3, #0]
      break;
 8010a5a:	e7ed      	b.n	8010a38 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010a5c:	0020      	movs	r0, r4
 8010a5e:	f7ff ff23 	bl	80108a8 <CRC_Handle_8>
      break;
 8010a62:	e7e9      	b.n	8010a38 <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010a64:	0020      	movs	r0, r4
 8010a66:	f7ff ff5c 	bl	8010922 <CRC_Handle_16>
      break;
 8010a6a:	e7e5      	b.n	8010a38 <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010a6c:	2002      	movs	r0, #2
 8010a6e:	e7e7      	b.n	8010a40 <HAL_CRC_Calculate+0x32>

08010a70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010a70:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010a72:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010a74:	2501      	movs	r5, #1
 8010a76:	002c      	movs	r4, r5
 8010a78:	409c      	lsls	r4, r3
 8010a7a:	4221      	tst	r1, r4
 8010a7c:	d10b      	bne.n	8010a96 <HAL_CRCEx_Polynomial_Set+0x26>
 8010a7e:	3b01      	subs	r3, #1
 8010a80:	d2f9      	bcs.n	8010a76 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010a82:	2a10      	cmp	r2, #16
 8010a84:	d01c      	beq.n	8010ac0 <HAL_CRCEx_Polynomial_Set+0x50>
 8010a86:	2a18      	cmp	r2, #24
 8010a88:	d01e      	beq.n	8010ac8 <HAL_CRCEx_Polynomial_Set+0x58>
 8010a8a:	2a08      	cmp	r2, #8
 8010a8c:	d109      	bne.n	8010aa2 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8010a8e:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8010a90:	2b0f      	cmp	r3, #15
 8010a92:	d906      	bls.n	8010aa2 <HAL_CRCEx_Polynomial_Set+0x32>
 8010a94:	e00e      	b.n	8010ab4 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 8010a96:	2a10      	cmp	r2, #16
 8010a98:	d012      	beq.n	8010ac0 <HAL_CRCEx_Polynomial_Set+0x50>
 8010a9a:	2a18      	cmp	r2, #24
 8010a9c:	d00c      	beq.n	8010ab8 <HAL_CRCEx_Polynomial_Set+0x48>
 8010a9e:	2a08      	cmp	r2, #8
 8010aa0:	d0f5      	beq.n	8010a8e <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010aa2:	6803      	ldr	r3, [r0, #0]
 8010aa4:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010aa6:	6801      	ldr	r1, [r0, #0]
 8010aa8:	688b      	ldr	r3, [r1, #8]
 8010aaa:	2018      	movs	r0, #24
 8010aac:	4383      	bics	r3, r0
 8010aae:	431a      	orrs	r2, r3
 8010ab0:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010ab2:	2400      	movs	r4, #0
}
 8010ab4:	0020      	movs	r0, r4
 8010ab6:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010ab8:	2b06      	cmp	r3, #6
 8010aba:	d9f2      	bls.n	8010aa2 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 8010abc:	2401      	movs	r4, #1
 8010abe:	e7f9      	b.n	8010ab4 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010ac0:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 8010ac2:	2b07      	cmp	r3, #7
 8010ac4:	d9ed      	bls.n	8010aa2 <HAL_CRCEx_Polynomial_Set+0x32>
 8010ac6:	e7f5      	b.n	8010ab4 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 8010ac8:	2401      	movs	r4, #1
 8010aca:	e7f3      	b.n	8010ab4 <HAL_CRCEx_Polynomial_Set+0x44>

08010acc <HAL_CRCEx_Init>:
{
 8010acc:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010ace:	7903      	ldrb	r3, [r0, #4]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d109      	bne.n	8010ae8 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010ad4:	6803      	ldr	r3, [r0, #0]
 8010ad6:	4a08      	ldr	r2, [pc, #32]	; (8010af8 <HAL_CRCEx_Init+0x2c>)
 8010ad8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010ada:	6802      	ldr	r2, [r0, #0]
 8010adc:	6893      	ldr	r3, [r2, #8]
 8010ade:	2118      	movs	r1, #24
 8010ae0:	438b      	bics	r3, r1
 8010ae2:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 8010ae4:	2000      	movs	r0, #0
}
 8010ae6:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010ae8:	68c2      	ldr	r2, [r0, #12]
 8010aea:	6881      	ldr	r1, [r0, #8]
 8010aec:	f7ff ffc0 	bl	8010a70 <HAL_CRCEx_Polynomial_Set>
 8010af0:	1e43      	subs	r3, r0, #1
 8010af2:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010af4:	b2c0      	uxtb	r0, r0
 8010af6:	e7f6      	b.n	8010ae6 <HAL_CRCEx_Init+0x1a>
 8010af8:	04c11db7 	.word	0x04c11db7

08010afc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010afc:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010afe:	2800      	cmp	r0, #0
 8010b00:	d022      	beq.n	8010b48 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010b02:	2321      	movs	r3, #33	; 0x21
 8010b04:	5cc3      	ldrb	r3, [r0, r3]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d102      	bne.n	8010b10 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010b0a:	3320      	adds	r3, #32
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010b10:	2121      	movs	r1, #33	; 0x21
 8010b12:	2302      	movs	r3, #2
 8010b14:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010b16:	6804      	ldr	r4, [r0, #0]
 8010b18:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010b1a:	4a0c      	ldr	r2, [pc, #48]	; (8010b4c <HAL_DMA_Init+0x50>)
 8010b1c:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010b1e:	6843      	ldr	r3, [r0, #4]
 8010b20:	6885      	ldr	r5, [r0, #8]
 8010b22:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010b24:	68c5      	ldr	r5, [r0, #12]
 8010b26:	432b      	orrs	r3, r5
 8010b28:	6905      	ldr	r5, [r0, #16]
 8010b2a:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010b2c:	6945      	ldr	r5, [r0, #20]
 8010b2e:	432b      	orrs	r3, r5
 8010b30:	6985      	ldr	r5, [r0, #24]
 8010b32:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010b34:	69c5      	ldr	r5, [r0, #28]
 8010b36:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010b38:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010b3a:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010b40:	3301      	adds	r3, #1
 8010b42:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010b44:	2000      	movs	r0, #0
}  
 8010b46:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010b48:	2001      	movs	r0, #1
 8010b4a:	e7fc      	b.n	8010b46 <HAL_DMA_Init+0x4a>
 8010b4c:	ffffc00f 	.word	0xffffc00f

08010b50 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010b50:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010b52:	2420      	movs	r4, #32
 8010b54:	5d04      	ldrb	r4, [r0, r4]
 8010b56:	2c01      	cmp	r4, #1
 8010b58:	d02d      	beq.n	8010bb6 <HAL_DMA_Start_IT+0x66>
 8010b5a:	2601      	movs	r6, #1
 8010b5c:	2420      	movs	r4, #32
 8010b5e:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010b60:	3401      	adds	r4, #1
 8010b62:	2502      	movs	r5, #2
 8010b64:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010b66:	6805      	ldr	r5, [r0, #0]
 8010b68:	682c      	ldr	r4, [r5, #0]
 8010b6a:	43b4      	bics	r4, r6
 8010b6c:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010b6e:	6804      	ldr	r4, [r0, #0]
 8010b70:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010b72:	6843      	ldr	r3, [r0, #4]
 8010b74:	2b10      	cmp	r3, #16
 8010b76:	d019      	beq.n	8010bac <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010b78:	6803      	ldr	r3, [r0, #0]
 8010b7a:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010b7c:	6803      	ldr	r3, [r0, #0]
 8010b7e:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010b80:	6802      	ldr	r2, [r0, #0]
 8010b82:	6813      	ldr	r3, [r2, #0]
 8010b84:	2102      	movs	r1, #2
 8010b86:	430b      	orrs	r3, r1
 8010b88:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010b8a:	6802      	ldr	r2, [r0, #0]
 8010b8c:	6813      	ldr	r3, [r2, #0]
 8010b8e:	3102      	adds	r1, #2
 8010b90:	430b      	orrs	r3, r1
 8010b92:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8010b94:	6802      	ldr	r2, [r0, #0]
 8010b96:	6813      	ldr	r3, [r2, #0]
 8010b98:	3104      	adds	r1, #4
 8010b9a:	430b      	orrs	r3, r1
 8010b9c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8010b9e:	6802      	ldr	r2, [r0, #0]
 8010ba0:	6813      	ldr	r3, [r2, #0]
 8010ba2:	3907      	subs	r1, #7
 8010ba4:	430b      	orrs	r3, r1
 8010ba6:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8010ba8:	2000      	movs	r0, #0
} 
 8010baa:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8010bac:	6803      	ldr	r3, [r0, #0]
 8010bae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8010bb0:	6803      	ldr	r3, [r0, #0]
 8010bb2:	60d9      	str	r1, [r3, #12]
 8010bb4:	e7e4      	b.n	8010b80 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8010bb6:	2002      	movs	r0, #2
 8010bb8:	e7f7      	b.n	8010baa <HAL_DMA_Start_IT+0x5a>

08010bba <HAL_DMA_Abort>:
{
 8010bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bbc:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8010bbe:	6802      	ldr	r2, [r0, #0]
 8010bc0:	6813      	ldr	r3, [r2, #0]
 8010bc2:	2101      	movs	r1, #1
 8010bc4:	438b      	bics	r3, r1
 8010bc6:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8010bc8:	f7ff fb16 	bl	80101f8 <HAL_GetTick>
 8010bcc:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010bce:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010bd0:	26fa      	movs	r6, #250	; 0xfa
 8010bd2:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8010bd4:	6823      	ldr	r3, [r4, #0]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	421d      	tst	r5, r3
 8010bda:	d00f      	beq.n	8010bfc <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8010bdc:	f7ff fb0c 	bl	80101f8 <HAL_GetTick>
 8010be0:	1bc0      	subs	r0, r0, r7
 8010be2:	42b0      	cmp	r0, r6
 8010be4:	d9f6      	bls.n	8010bd4 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8010be6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010be8:	2220      	movs	r2, #32
 8010bea:	4313      	orrs	r3, r2
 8010bec:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010bee:	2321      	movs	r3, #33	; 0x21
 8010bf0:	2103      	movs	r1, #3
 8010bf2:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8010bf8:	2003      	movs	r0, #3
 8010bfa:	e006      	b.n	8010c0a <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8010bfc:	2321      	movs	r3, #33	; 0x21
 8010bfe:	2201      	movs	r2, #1
 8010c00:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 8010c02:	3b01      	subs	r3, #1
 8010c04:	2200      	movs	r2, #0
 8010c06:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8010c08:	2000      	movs	r0, #0
}
 8010c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010c0c <HAL_DMA_IRQHandler>:
{        
 8010c0c:	b510      	push	{r4, lr}
 8010c0e:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010c10:	6803      	ldr	r3, [r0, #0]
 8010c12:	4ab4      	ldr	r2, [pc, #720]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d94d      	bls.n	8010cb4 <HAL_DMA_IRQHandler+0xa8>
 8010c18:	4ab3      	ldr	r2, [pc, #716]	; (8010ee8 <HAL_DMA_IRQHandler+0x2dc>)
 8010c1a:	6811      	ldr	r1, [r2, #0]
 8010c1c:	4ab3      	ldr	r2, [pc, #716]	; (8010eec <HAL_DMA_IRQHandler+0x2e0>)
 8010c1e:	4293      	cmp	r3, r2
 8010c20:	d026      	beq.n	8010c70 <HAL_DMA_IRQHandler+0x64>
 8010c22:	4ab3      	ldr	r2, [pc, #716]	; (8010ef0 <HAL_DMA_IRQHandler+0x2e4>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d02d      	beq.n	8010c84 <HAL_DMA_IRQHandler+0x78>
 8010c28:	4ab2      	ldr	r2, [pc, #712]	; (8010ef4 <HAL_DMA_IRQHandler+0x2e8>)
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d02c      	beq.n	8010c88 <HAL_DMA_IRQHandler+0x7c>
 8010c2e:	4ab2      	ldr	r2, [pc, #712]	; (8010ef8 <HAL_DMA_IRQHandler+0x2ec>)
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d02c      	beq.n	8010c8e <HAL_DMA_IRQHandler+0x82>
 8010c34:	4ab1      	ldr	r2, [pc, #708]	; (8010efc <HAL_DMA_IRQHandler+0x2f0>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d02c      	beq.n	8010c94 <HAL_DMA_IRQHandler+0x88>
 8010c3a:	4ab1      	ldr	r2, [pc, #708]	; (8010f00 <HAL_DMA_IRQHandler+0x2f4>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d02c      	beq.n	8010c9a <HAL_DMA_IRQHandler+0x8e>
 8010c40:	4aa8      	ldr	r2, [pc, #672]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010c42:	4293      	cmp	r3, r2
 8010c44:	d02c      	beq.n	8010ca0 <HAL_DMA_IRQHandler+0x94>
 8010c46:	4aaf      	ldr	r2, [pc, #700]	; (8010f04 <HAL_DMA_IRQHandler+0x2f8>)
 8010c48:	4293      	cmp	r3, r2
 8010c4a:	d02c      	beq.n	8010ca6 <HAL_DMA_IRQHandler+0x9a>
 8010c4c:	4aae      	ldr	r2, [pc, #696]	; (8010f08 <HAL_DMA_IRQHandler+0x2fc>)
 8010c4e:	4293      	cmp	r3, r2
 8010c50:	d02b      	beq.n	8010caa <HAL_DMA_IRQHandler+0x9e>
 8010c52:	4aae      	ldr	r2, [pc, #696]	; (8010f0c <HAL_DMA_IRQHandler+0x300>)
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d02a      	beq.n	8010cae <HAL_DMA_IRQHandler+0xa2>
 8010c58:	4aad      	ldr	r2, [pc, #692]	; (8010f10 <HAL_DMA_IRQHandler+0x304>)
 8010c5a:	189a      	adds	r2, r3, r2
 8010c5c:	4250      	negs	r0, r2
 8010c5e:	4142      	adcs	r2, r0
 8010c60:	4252      	negs	r2, r2
 8010c62:	48ac      	ldr	r0, [pc, #688]	; (8010f14 <HAL_DMA_IRQHandler+0x308>)
 8010c64:	4002      	ands	r2, r0
 8010c66:	2080      	movs	r0, #128	; 0x80
 8010c68:	0300      	lsls	r0, r0, #12
 8010c6a:	4684      	mov	ip, r0
 8010c6c:	4462      	add	r2, ip
 8010c6e:	e000      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010c70:	2208      	movs	r2, #8
 8010c72:	420a      	tst	r2, r1
 8010c74:	d100      	bne.n	8010c78 <HAL_DMA_IRQHandler+0x6c>
 8010c76:	e0e6      	b.n	8010e46 <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	0712      	lsls	r2, r2, #28
 8010c7c:	d500      	bpl.n	8010c80 <HAL_DMA_IRQHandler+0x74>
 8010c7e:	e097      	b.n	8010db0 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010c80:	6823      	ldr	r3, [r4, #0]
 8010c82:	e0e0      	b.n	8010e46 <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010c84:	2280      	movs	r2, #128	; 0x80
 8010c86:	e7f4      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010c88:	2280      	movs	r2, #128	; 0x80
 8010c8a:	0112      	lsls	r2, r2, #4
 8010c8c:	e7f1      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010c8e:	2280      	movs	r2, #128	; 0x80
 8010c90:	0212      	lsls	r2, r2, #8
 8010c92:	e7ee      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010c94:	2280      	movs	r2, #128	; 0x80
 8010c96:	0312      	lsls	r2, r2, #12
 8010c98:	e7eb      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010c9a:	2280      	movs	r2, #128	; 0x80
 8010c9c:	0412      	lsls	r2, r2, #16
 8010c9e:	e7e8      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010ca0:	2280      	movs	r2, #128	; 0x80
 8010ca2:	0512      	lsls	r2, r2, #20
 8010ca4:	e7e5      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010ca6:	2208      	movs	r2, #8
 8010ca8:	e7e3      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010caa:	2280      	movs	r2, #128	; 0x80
 8010cac:	e7e1      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010cae:	2280      	movs	r2, #128	; 0x80
 8010cb0:	0112      	lsls	r2, r2, #4
 8010cb2:	e7de      	b.n	8010c72 <HAL_DMA_IRQHandler+0x66>
 8010cb4:	4a98      	ldr	r2, [pc, #608]	; (8010f18 <HAL_DMA_IRQHandler+0x30c>)
 8010cb6:	6811      	ldr	r1, [r2, #0]
 8010cb8:	4a8c      	ldr	r2, [pc, #560]	; (8010eec <HAL_DMA_IRQHandler+0x2e0>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d026      	beq.n	8010d0c <HAL_DMA_IRQHandler+0x100>
 8010cbe:	4a8c      	ldr	r2, [pc, #560]	; (8010ef0 <HAL_DMA_IRQHandler+0x2e4>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d05d      	beq.n	8010d80 <HAL_DMA_IRQHandler+0x174>
 8010cc4:	4a8b      	ldr	r2, [pc, #556]	; (8010ef4 <HAL_DMA_IRQHandler+0x2e8>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d05c      	beq.n	8010d84 <HAL_DMA_IRQHandler+0x178>
 8010cca:	4a8b      	ldr	r2, [pc, #556]	; (8010ef8 <HAL_DMA_IRQHandler+0x2ec>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	d05c      	beq.n	8010d8a <HAL_DMA_IRQHandler+0x17e>
 8010cd0:	4a8a      	ldr	r2, [pc, #552]	; (8010efc <HAL_DMA_IRQHandler+0x2f0>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d05c      	beq.n	8010d90 <HAL_DMA_IRQHandler+0x184>
 8010cd6:	4a8a      	ldr	r2, [pc, #552]	; (8010f00 <HAL_DMA_IRQHandler+0x2f4>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d05c      	beq.n	8010d96 <HAL_DMA_IRQHandler+0x18a>
 8010cdc:	4a81      	ldr	r2, [pc, #516]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010cde:	4293      	cmp	r3, r2
 8010ce0:	d05c      	beq.n	8010d9c <HAL_DMA_IRQHandler+0x190>
 8010ce2:	4a88      	ldr	r2, [pc, #544]	; (8010f04 <HAL_DMA_IRQHandler+0x2f8>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d05c      	beq.n	8010da2 <HAL_DMA_IRQHandler+0x196>
 8010ce8:	4a87      	ldr	r2, [pc, #540]	; (8010f08 <HAL_DMA_IRQHandler+0x2fc>)
 8010cea:	4293      	cmp	r3, r2
 8010cec:	d05b      	beq.n	8010da6 <HAL_DMA_IRQHandler+0x19a>
 8010cee:	4a87      	ldr	r2, [pc, #540]	; (8010f0c <HAL_DMA_IRQHandler+0x300>)
 8010cf0:	4293      	cmp	r3, r2
 8010cf2:	d05a      	beq.n	8010daa <HAL_DMA_IRQHandler+0x19e>
 8010cf4:	4a86      	ldr	r2, [pc, #536]	; (8010f10 <HAL_DMA_IRQHandler+0x304>)
 8010cf6:	189a      	adds	r2, r3, r2
 8010cf8:	4250      	negs	r0, r2
 8010cfa:	4142      	adcs	r2, r0
 8010cfc:	4252      	negs	r2, r2
 8010cfe:	4885      	ldr	r0, [pc, #532]	; (8010f14 <HAL_DMA_IRQHandler+0x308>)
 8010d00:	4002      	ands	r2, r0
 8010d02:	2080      	movs	r0, #128	; 0x80
 8010d04:	0300      	lsls	r0, r0, #12
 8010d06:	4684      	mov	ip, r0
 8010d08:	4462      	add	r2, ip
 8010d0a:	e000      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010d0c:	2208      	movs	r2, #8
 8010d0e:	420a      	tst	r2, r1
 8010d10:	d000      	beq.n	8010d14 <HAL_DMA_IRQHandler+0x108>
 8010d12:	e3ad      	b.n	8011470 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010d14:	4a80      	ldr	r2, [pc, #512]	; (8010f18 <HAL_DMA_IRQHandler+0x30c>)
 8010d16:	6811      	ldr	r1, [r2, #0]
 8010d18:	4a74      	ldr	r2, [pc, #464]	; (8010eec <HAL_DMA_IRQHandler+0x2e0>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d100      	bne.n	8010d20 <HAL_DMA_IRQHandler+0x114>
 8010d1e:	e198      	b.n	8011052 <HAL_DMA_IRQHandler+0x446>
 8010d20:	4a73      	ldr	r2, [pc, #460]	; (8010ef0 <HAL_DMA_IRQHandler+0x2e4>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d100      	bne.n	8010d28 <HAL_DMA_IRQHandler+0x11c>
 8010d26:	e1da      	b.n	80110de <HAL_DMA_IRQHandler+0x4d2>
 8010d28:	4a72      	ldr	r2, [pc, #456]	; (8010ef4 <HAL_DMA_IRQHandler+0x2e8>)
 8010d2a:	4293      	cmp	r3, r2
 8010d2c:	d100      	bne.n	8010d30 <HAL_DMA_IRQHandler+0x124>
 8010d2e:	e1d8      	b.n	80110e2 <HAL_DMA_IRQHandler+0x4d6>
 8010d30:	4a71      	ldr	r2, [pc, #452]	; (8010ef8 <HAL_DMA_IRQHandler+0x2ec>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d100      	bne.n	8010d38 <HAL_DMA_IRQHandler+0x12c>
 8010d36:	e1d7      	b.n	80110e8 <HAL_DMA_IRQHandler+0x4dc>
 8010d38:	4a70      	ldr	r2, [pc, #448]	; (8010efc <HAL_DMA_IRQHandler+0x2f0>)
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d100      	bne.n	8010d40 <HAL_DMA_IRQHandler+0x134>
 8010d3e:	e1d6      	b.n	80110ee <HAL_DMA_IRQHandler+0x4e2>
 8010d40:	4a6f      	ldr	r2, [pc, #444]	; (8010f00 <HAL_DMA_IRQHandler+0x2f4>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d100      	bne.n	8010d48 <HAL_DMA_IRQHandler+0x13c>
 8010d46:	e1d5      	b.n	80110f4 <HAL_DMA_IRQHandler+0x4e8>
 8010d48:	4a66      	ldr	r2, [pc, #408]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010d4a:	4293      	cmp	r3, r2
 8010d4c:	d100      	bne.n	8010d50 <HAL_DMA_IRQHandler+0x144>
 8010d4e:	e1d4      	b.n	80110fa <HAL_DMA_IRQHandler+0x4ee>
 8010d50:	4a6c      	ldr	r2, [pc, #432]	; (8010f04 <HAL_DMA_IRQHandler+0x2f8>)
 8010d52:	4293      	cmp	r3, r2
 8010d54:	d100      	bne.n	8010d58 <HAL_DMA_IRQHandler+0x14c>
 8010d56:	e1d3      	b.n	8011100 <HAL_DMA_IRQHandler+0x4f4>
 8010d58:	4a6b      	ldr	r2, [pc, #428]	; (8010f08 <HAL_DMA_IRQHandler+0x2fc>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d100      	bne.n	8010d60 <HAL_DMA_IRQHandler+0x154>
 8010d5e:	e1d1      	b.n	8011104 <HAL_DMA_IRQHandler+0x4f8>
 8010d60:	4a6a      	ldr	r2, [pc, #424]	; (8010f0c <HAL_DMA_IRQHandler+0x300>)
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d100      	bne.n	8010d68 <HAL_DMA_IRQHandler+0x15c>
 8010d66:	e1cf      	b.n	8011108 <HAL_DMA_IRQHandler+0x4fc>
 8010d68:	4a69      	ldr	r2, [pc, #420]	; (8010f10 <HAL_DMA_IRQHandler+0x304>)
 8010d6a:	189a      	adds	r2, r3, r2
 8010d6c:	4250      	negs	r0, r2
 8010d6e:	4142      	adcs	r2, r0
 8010d70:	4252      	negs	r2, r2
 8010d72:	486a      	ldr	r0, [pc, #424]	; (8010f1c <HAL_DMA_IRQHandler+0x310>)
 8010d74:	4002      	ands	r2, r0
 8010d76:	2080      	movs	r0, #128	; 0x80
 8010d78:	02c0      	lsls	r0, r0, #11
 8010d7a:	4684      	mov	ip, r0
 8010d7c:	4462      	add	r2, ip
 8010d7e:	e169      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8010d80:	2280      	movs	r2, #128	; 0x80
 8010d82:	e7c4      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010d84:	2280      	movs	r2, #128	; 0x80
 8010d86:	0112      	lsls	r2, r2, #4
 8010d88:	e7c1      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010d8a:	2280      	movs	r2, #128	; 0x80
 8010d8c:	0212      	lsls	r2, r2, #8
 8010d8e:	e7be      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010d90:	2280      	movs	r2, #128	; 0x80
 8010d92:	0312      	lsls	r2, r2, #12
 8010d94:	e7bb      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010d96:	2280      	movs	r2, #128	; 0x80
 8010d98:	0412      	lsls	r2, r2, #16
 8010d9a:	e7b8      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010d9c:	2280      	movs	r2, #128	; 0x80
 8010d9e:	0512      	lsls	r2, r2, #20
 8010da0:	e7b5      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010da2:	2208      	movs	r2, #8
 8010da4:	e7b3      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010da6:	2280      	movs	r2, #128	; 0x80
 8010da8:	e7b1      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
 8010daa:	2280      	movs	r2, #128	; 0x80
 8010dac:	0112      	lsls	r2, r2, #4
 8010dae:	e7ae      	b.n	8010d0e <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	2108      	movs	r1, #8
 8010db4:	438a      	bics	r2, r1
 8010db6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010db8:	6823      	ldr	r3, [r4, #0]
 8010dba:	4a4a      	ldr	r2, [pc, #296]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d800      	bhi.n	8010dc2 <HAL_DMA_IRQHandler+0x1b6>
 8010dc0:	e0ae      	b.n	8010f20 <HAL_DMA_IRQHandler+0x314>
 8010dc2:	4a4a      	ldr	r2, [pc, #296]	; (8010eec <HAL_DMA_IRQHandler+0x2e0>)
 8010dc4:	4293      	cmp	r3, r2
 8010dc6:	d027      	beq.n	8010e18 <HAL_DMA_IRQHandler+0x20c>
 8010dc8:	4a49      	ldr	r2, [pc, #292]	; (8010ef0 <HAL_DMA_IRQHandler+0x2e4>)
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	d071      	beq.n	8010eb2 <HAL_DMA_IRQHandler+0x2a6>
 8010dce:	4a49      	ldr	r2, [pc, #292]	; (8010ef4 <HAL_DMA_IRQHandler+0x2e8>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d070      	beq.n	8010eb6 <HAL_DMA_IRQHandler+0x2aa>
 8010dd4:	4a48      	ldr	r2, [pc, #288]	; (8010ef8 <HAL_DMA_IRQHandler+0x2ec>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d070      	beq.n	8010ebc <HAL_DMA_IRQHandler+0x2b0>
 8010dda:	4a48      	ldr	r2, [pc, #288]	; (8010efc <HAL_DMA_IRQHandler+0x2f0>)
 8010ddc:	4293      	cmp	r3, r2
 8010dde:	d070      	beq.n	8010ec2 <HAL_DMA_IRQHandler+0x2b6>
 8010de0:	4a47      	ldr	r2, [pc, #284]	; (8010f00 <HAL_DMA_IRQHandler+0x2f4>)
 8010de2:	4293      	cmp	r3, r2
 8010de4:	d070      	beq.n	8010ec8 <HAL_DMA_IRQHandler+0x2bc>
 8010de6:	4a3f      	ldr	r2, [pc, #252]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d070      	beq.n	8010ece <HAL_DMA_IRQHandler+0x2c2>
 8010dec:	4a45      	ldr	r2, [pc, #276]	; (8010f04 <HAL_DMA_IRQHandler+0x2f8>)
 8010dee:	4293      	cmp	r3, r2
 8010df0:	d070      	beq.n	8010ed4 <HAL_DMA_IRQHandler+0x2c8>
 8010df2:	4a45      	ldr	r2, [pc, #276]	; (8010f08 <HAL_DMA_IRQHandler+0x2fc>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d06f      	beq.n	8010ed8 <HAL_DMA_IRQHandler+0x2cc>
 8010df8:	4a44      	ldr	r2, [pc, #272]	; (8010f0c <HAL_DMA_IRQHandler+0x300>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d06e      	beq.n	8010edc <HAL_DMA_IRQHandler+0x2d0>
 8010dfe:	4a44      	ldr	r2, [pc, #272]	; (8010f10 <HAL_DMA_IRQHandler+0x304>)
 8010e00:	4694      	mov	ip, r2
 8010e02:	4463      	add	r3, ip
 8010e04:	425a      	negs	r2, r3
 8010e06:	4153      	adcs	r3, r2
 8010e08:	425b      	negs	r3, r3
 8010e0a:	4a42      	ldr	r2, [pc, #264]	; (8010f14 <HAL_DMA_IRQHandler+0x308>)
 8010e0c:	4013      	ands	r3, r2
 8010e0e:	2280      	movs	r2, #128	; 0x80
 8010e10:	0312      	lsls	r2, r2, #12
 8010e12:	4694      	mov	ip, r2
 8010e14:	4463      	add	r3, ip
 8010e16:	e000      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010e18:	2308      	movs	r3, #8
 8010e1a:	4a33      	ldr	r2, [pc, #204]	; (8010ee8 <HAL_DMA_IRQHandler+0x2dc>)
 8010e1c:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8010e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e20:	2201      	movs	r2, #1
 8010e22:	4313      	orrs	r3, r2
 8010e24:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 8010e26:	2321      	movs	r3, #33	; 0x21
 8010e28:	3203      	adds	r2, #3
 8010e2a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8010e2c:	3b01      	subs	r3, #1
 8010e2e:	2200      	movs	r2, #0
 8010e30:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8010e32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d001      	beq.n	8010e3c <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 8010e38:	0020      	movs	r0, r4
 8010e3a:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010e3c:	6823      	ldr	r3, [r4, #0]
 8010e3e:	4a29      	ldr	r2, [pc, #164]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d800      	bhi.n	8010e46 <HAL_DMA_IRQHandler+0x23a>
 8010e44:	e766      	b.n	8010d14 <HAL_DMA_IRQHandler+0x108>
 8010e46:	4a28      	ldr	r2, [pc, #160]	; (8010ee8 <HAL_DMA_IRQHandler+0x2dc>)
 8010e48:	6811      	ldr	r1, [r2, #0]
 8010e4a:	4a28      	ldr	r2, [pc, #160]	; (8010eec <HAL_DMA_IRQHandler+0x2e0>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d100      	bne.n	8010e52 <HAL_DMA_IRQHandler+0x246>
 8010e50:	e0ad      	b.n	8010fae <HAL_DMA_IRQHandler+0x3a2>
 8010e52:	4a27      	ldr	r2, [pc, #156]	; (8010ef0 <HAL_DMA_IRQHandler+0x2e4>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d100      	bne.n	8010e5a <HAL_DMA_IRQHandler+0x24e>
 8010e58:	e0e3      	b.n	8011022 <HAL_DMA_IRQHandler+0x416>
 8010e5a:	4a26      	ldr	r2, [pc, #152]	; (8010ef4 <HAL_DMA_IRQHandler+0x2e8>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d100      	bne.n	8010e62 <HAL_DMA_IRQHandler+0x256>
 8010e60:	e0e1      	b.n	8011026 <HAL_DMA_IRQHandler+0x41a>
 8010e62:	4a25      	ldr	r2, [pc, #148]	; (8010ef8 <HAL_DMA_IRQHandler+0x2ec>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d100      	bne.n	8010e6a <HAL_DMA_IRQHandler+0x25e>
 8010e68:	e0e0      	b.n	801102c <HAL_DMA_IRQHandler+0x420>
 8010e6a:	4a24      	ldr	r2, [pc, #144]	; (8010efc <HAL_DMA_IRQHandler+0x2f0>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d100      	bne.n	8010e72 <HAL_DMA_IRQHandler+0x266>
 8010e70:	e0df      	b.n	8011032 <HAL_DMA_IRQHandler+0x426>
 8010e72:	4a23      	ldr	r2, [pc, #140]	; (8010f00 <HAL_DMA_IRQHandler+0x2f4>)
 8010e74:	4293      	cmp	r3, r2
 8010e76:	d100      	bne.n	8010e7a <HAL_DMA_IRQHandler+0x26e>
 8010e78:	e0de      	b.n	8011038 <HAL_DMA_IRQHandler+0x42c>
 8010e7a:	4a1a      	ldr	r2, [pc, #104]	; (8010ee4 <HAL_DMA_IRQHandler+0x2d8>)
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d100      	bne.n	8010e82 <HAL_DMA_IRQHandler+0x276>
 8010e80:	e0dd      	b.n	801103e <HAL_DMA_IRQHandler+0x432>
 8010e82:	4a20      	ldr	r2, [pc, #128]	; (8010f04 <HAL_DMA_IRQHandler+0x2f8>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d100      	bne.n	8010e8a <HAL_DMA_IRQHandler+0x27e>
 8010e88:	e0dc      	b.n	8011044 <HAL_DMA_IRQHandler+0x438>
 8010e8a:	4a1f      	ldr	r2, [pc, #124]	; (8010f08 <HAL_DMA_IRQHandler+0x2fc>)
 8010e8c:	4293      	cmp	r3, r2
 8010e8e:	d100      	bne.n	8010e92 <HAL_DMA_IRQHandler+0x286>
 8010e90:	e0da      	b.n	8011048 <HAL_DMA_IRQHandler+0x43c>
 8010e92:	4a1e      	ldr	r2, [pc, #120]	; (8010f0c <HAL_DMA_IRQHandler+0x300>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d100      	bne.n	8010e9a <HAL_DMA_IRQHandler+0x28e>
 8010e98:	e0d8      	b.n	801104c <HAL_DMA_IRQHandler+0x440>
 8010e9a:	4a1d      	ldr	r2, [pc, #116]	; (8010f10 <HAL_DMA_IRQHandler+0x304>)
 8010e9c:	189a      	adds	r2, r3, r2
 8010e9e:	4250      	negs	r0, r2
 8010ea0:	4142      	adcs	r2, r0
 8010ea2:	4252      	negs	r2, r2
 8010ea4:	481d      	ldr	r0, [pc, #116]	; (8010f1c <HAL_DMA_IRQHandler+0x310>)
 8010ea6:	4002      	ands	r2, r0
 8010ea8:	2080      	movs	r0, #128	; 0x80
 8010eaa:	02c0      	lsls	r0, r0, #11
 8010eac:	4684      	mov	ip, r0
 8010eae:	4462      	add	r2, ip
 8010eb0:	e07e      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8010eb2:	2380      	movs	r3, #128	; 0x80
 8010eb4:	e7b1      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010eb6:	2380      	movs	r3, #128	; 0x80
 8010eb8:	011b      	lsls	r3, r3, #4
 8010eba:	e7ae      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010ebc:	2380      	movs	r3, #128	; 0x80
 8010ebe:	021b      	lsls	r3, r3, #8
 8010ec0:	e7ab      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010ec2:	2380      	movs	r3, #128	; 0x80
 8010ec4:	031b      	lsls	r3, r3, #12
 8010ec6:	e7a8      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010ec8:	2380      	movs	r3, #128	; 0x80
 8010eca:	041b      	lsls	r3, r3, #16
 8010ecc:	e7a5      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010ece:	2380      	movs	r3, #128	; 0x80
 8010ed0:	051b      	lsls	r3, r3, #20
 8010ed2:	e7a2      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010ed4:	2308      	movs	r3, #8
 8010ed6:	e7a0      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010ed8:	2380      	movs	r3, #128	; 0x80
 8010eda:	e79e      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010edc:	2380      	movs	r3, #128	; 0x80
 8010ede:	011b      	lsls	r3, r3, #4
 8010ee0:	e79b      	b.n	8010e1a <HAL_DMA_IRQHandler+0x20e>
 8010ee2:	46c0      	nop			; (mov r8, r8)
 8010ee4:	40020080 	.word	0x40020080
 8010ee8:	40020400 	.word	0x40020400
 8010eec:	40020008 	.word	0x40020008
 8010ef0:	4002001c 	.word	0x4002001c
 8010ef4:	40020030 	.word	0x40020030
 8010ef8:	40020044 	.word	0x40020044
 8010efc:	40020058 	.word	0x40020058
 8010f00:	4002006c 	.word	0x4002006c
 8010f04:	40020408 	.word	0x40020408
 8010f08:	4002041c 	.word	0x4002041c
 8010f0c:	40020430 	.word	0x40020430
 8010f10:	bffdfbbc 	.word	0xbffdfbbc
 8010f14:	fff88000 	.word	0xfff88000
 8010f18:	40020000 	.word	0x40020000
 8010f1c:	fffc4000 	.word	0xfffc4000
 8010f20:	4aaa      	ldr	r2, [pc, #680]	; (80111cc <HAL_DMA_IRQHandler+0x5c0>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d027      	beq.n	8010f76 <HAL_DMA_IRQHandler+0x36a>
 8010f26:	4aaa      	ldr	r2, [pc, #680]	; (80111d0 <HAL_DMA_IRQHandler+0x5c4>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d028      	beq.n	8010f7e <HAL_DMA_IRQHandler+0x372>
 8010f2c:	4aa9      	ldr	r2, [pc, #676]	; (80111d4 <HAL_DMA_IRQHandler+0x5c8>)
 8010f2e:	4293      	cmp	r3, r2
 8010f30:	d027      	beq.n	8010f82 <HAL_DMA_IRQHandler+0x376>
 8010f32:	4aa9      	ldr	r2, [pc, #676]	; (80111d8 <HAL_DMA_IRQHandler+0x5cc>)
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d027      	beq.n	8010f88 <HAL_DMA_IRQHandler+0x37c>
 8010f38:	4aa8      	ldr	r2, [pc, #672]	; (80111dc <HAL_DMA_IRQHandler+0x5d0>)
 8010f3a:	4293      	cmp	r3, r2
 8010f3c:	d027      	beq.n	8010f8e <HAL_DMA_IRQHandler+0x382>
 8010f3e:	4aa8      	ldr	r2, [pc, #672]	; (80111e0 <HAL_DMA_IRQHandler+0x5d4>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d027      	beq.n	8010f94 <HAL_DMA_IRQHandler+0x388>
 8010f44:	4aa7      	ldr	r2, [pc, #668]	; (80111e4 <HAL_DMA_IRQHandler+0x5d8>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d027      	beq.n	8010f9a <HAL_DMA_IRQHandler+0x38e>
 8010f4a:	4aa7      	ldr	r2, [pc, #668]	; (80111e8 <HAL_DMA_IRQHandler+0x5dc>)
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	d027      	beq.n	8010fa0 <HAL_DMA_IRQHandler+0x394>
 8010f50:	4aa6      	ldr	r2, [pc, #664]	; (80111ec <HAL_DMA_IRQHandler+0x5e0>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d026      	beq.n	8010fa4 <HAL_DMA_IRQHandler+0x398>
 8010f56:	4aa6      	ldr	r2, [pc, #664]	; (80111f0 <HAL_DMA_IRQHandler+0x5e4>)
 8010f58:	4293      	cmp	r3, r2
 8010f5a:	d025      	beq.n	8010fa8 <HAL_DMA_IRQHandler+0x39c>
 8010f5c:	4aa5      	ldr	r2, [pc, #660]	; (80111f4 <HAL_DMA_IRQHandler+0x5e8>)
 8010f5e:	4694      	mov	ip, r2
 8010f60:	4463      	add	r3, ip
 8010f62:	425a      	negs	r2, r3
 8010f64:	4153      	adcs	r3, r2
 8010f66:	425b      	negs	r3, r3
 8010f68:	4aa3      	ldr	r2, [pc, #652]	; (80111f8 <HAL_DMA_IRQHandler+0x5ec>)
 8010f6a:	4013      	ands	r3, r2
 8010f6c:	2280      	movs	r2, #128	; 0x80
 8010f6e:	0312      	lsls	r2, r2, #12
 8010f70:	4694      	mov	ip, r2
 8010f72:	4463      	add	r3, ip
 8010f74:	e000      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010f76:	2308      	movs	r3, #8
 8010f78:	4aa0      	ldr	r2, [pc, #640]	; (80111fc <HAL_DMA_IRQHandler+0x5f0>)
 8010f7a:	6053      	str	r3, [r2, #4]
 8010f7c:	e74f      	b.n	8010e1e <HAL_DMA_IRQHandler+0x212>
 8010f7e:	2380      	movs	r3, #128	; 0x80
 8010f80:	e7fa      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010f82:	2380      	movs	r3, #128	; 0x80
 8010f84:	011b      	lsls	r3, r3, #4
 8010f86:	e7f7      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010f88:	2380      	movs	r3, #128	; 0x80
 8010f8a:	021b      	lsls	r3, r3, #8
 8010f8c:	e7f4      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010f8e:	2380      	movs	r3, #128	; 0x80
 8010f90:	031b      	lsls	r3, r3, #12
 8010f92:	e7f1      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010f94:	2380      	movs	r3, #128	; 0x80
 8010f96:	041b      	lsls	r3, r3, #16
 8010f98:	e7ee      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010f9a:	2380      	movs	r3, #128	; 0x80
 8010f9c:	051b      	lsls	r3, r3, #20
 8010f9e:	e7eb      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010fa0:	2308      	movs	r3, #8
 8010fa2:	e7e9      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010fa4:	2380      	movs	r3, #128	; 0x80
 8010fa6:	e7e7      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
 8010fa8:	2380      	movs	r3, #128	; 0x80
 8010faa:	011b      	lsls	r3, r3, #4
 8010fac:	e7e4      	b.n	8010f78 <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8010fae:	2204      	movs	r2, #4
 8010fb0:	420a      	tst	r2, r1
 8010fb2:	d152      	bne.n	801105a <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8010fb4:	6821      	ldr	r1, [r4, #0]
 8010fb6:	4b92      	ldr	r3, [pc, #584]	; (8011200 <HAL_DMA_IRQHandler+0x5f4>)
 8010fb8:	6818      	ldr	r0, [r3, #0]
 8010fba:	4a84      	ldr	r2, [pc, #528]	; (80111cc <HAL_DMA_IRQHandler+0x5c0>)
 8010fbc:	4291      	cmp	r1, r2
 8010fbe:	d100      	bne.n	8010fc2 <HAL_DMA_IRQHandler+0x3b6>
 8010fc0:	e16b      	b.n	801129a <HAL_DMA_IRQHandler+0x68e>
 8010fc2:	4a83      	ldr	r2, [pc, #524]	; (80111d0 <HAL_DMA_IRQHandler+0x5c4>)
 8010fc4:	4291      	cmp	r1, r2
 8010fc6:	d100      	bne.n	8010fca <HAL_DMA_IRQHandler+0x3be>
 8010fc8:	e1aa      	b.n	8011320 <HAL_DMA_IRQHandler+0x714>
 8010fca:	4a82      	ldr	r2, [pc, #520]	; (80111d4 <HAL_DMA_IRQHandler+0x5c8>)
 8010fcc:	4291      	cmp	r1, r2
 8010fce:	d100      	bne.n	8010fd2 <HAL_DMA_IRQHandler+0x3c6>
 8010fd0:	e1a8      	b.n	8011324 <HAL_DMA_IRQHandler+0x718>
 8010fd2:	4a81      	ldr	r2, [pc, #516]	; (80111d8 <HAL_DMA_IRQHandler+0x5cc>)
 8010fd4:	4291      	cmp	r1, r2
 8010fd6:	d100      	bne.n	8010fda <HAL_DMA_IRQHandler+0x3ce>
 8010fd8:	e1a7      	b.n	801132a <HAL_DMA_IRQHandler+0x71e>
 8010fda:	4b80      	ldr	r3, [pc, #512]	; (80111dc <HAL_DMA_IRQHandler+0x5d0>)
 8010fdc:	4299      	cmp	r1, r3
 8010fde:	d100      	bne.n	8010fe2 <HAL_DMA_IRQHandler+0x3d6>
 8010fe0:	e1a6      	b.n	8011330 <HAL_DMA_IRQHandler+0x724>
 8010fe2:	4b7f      	ldr	r3, [pc, #508]	; (80111e0 <HAL_DMA_IRQHandler+0x5d4>)
 8010fe4:	4299      	cmp	r1, r3
 8010fe6:	d100      	bne.n	8010fea <HAL_DMA_IRQHandler+0x3de>
 8010fe8:	e1a5      	b.n	8011336 <HAL_DMA_IRQHandler+0x72a>
 8010fea:	4b7e      	ldr	r3, [pc, #504]	; (80111e4 <HAL_DMA_IRQHandler+0x5d8>)
 8010fec:	4299      	cmp	r1, r3
 8010fee:	d100      	bne.n	8010ff2 <HAL_DMA_IRQHandler+0x3e6>
 8010ff0:	e1a4      	b.n	801133c <HAL_DMA_IRQHandler+0x730>
 8010ff2:	4b7d      	ldr	r3, [pc, #500]	; (80111e8 <HAL_DMA_IRQHandler+0x5dc>)
 8010ff4:	4299      	cmp	r1, r3
 8010ff6:	d100      	bne.n	8010ffa <HAL_DMA_IRQHandler+0x3ee>
 8010ff8:	e1a3      	b.n	8011342 <HAL_DMA_IRQHandler+0x736>
 8010ffa:	4b7c      	ldr	r3, [pc, #496]	; (80111ec <HAL_DMA_IRQHandler+0x5e0>)
 8010ffc:	4299      	cmp	r1, r3
 8010ffe:	d100      	bne.n	8011002 <HAL_DMA_IRQHandler+0x3f6>
 8011000:	e1a1      	b.n	8011346 <HAL_DMA_IRQHandler+0x73a>
 8011002:	4b7b      	ldr	r3, [pc, #492]	; (80111f0 <HAL_DMA_IRQHandler+0x5e4>)
 8011004:	4299      	cmp	r1, r3
 8011006:	d100      	bne.n	801100a <HAL_DMA_IRQHandler+0x3fe>
 8011008:	e19f      	b.n	801134a <HAL_DMA_IRQHandler+0x73e>
 801100a:	4b7a      	ldr	r3, [pc, #488]	; (80111f4 <HAL_DMA_IRQHandler+0x5e8>)
 801100c:	18ca      	adds	r2, r1, r3
 801100e:	4253      	negs	r3, r2
 8011010:	415a      	adcs	r2, r3
 8011012:	4252      	negs	r2, r2
 8011014:	4b7b      	ldr	r3, [pc, #492]	; (8011204 <HAL_DMA_IRQHandler+0x5f8>)
 8011016:	4013      	ands	r3, r2
 8011018:	2280      	movs	r2, #128	; 0x80
 801101a:	0292      	lsls	r2, r2, #10
 801101c:	4694      	mov	ip, r2
 801101e:	4463      	add	r3, ip
 8011020:	e13c      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011022:	2240      	movs	r2, #64	; 0x40
 8011024:	e7c4      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 8011026:	2280      	movs	r2, #128	; 0x80
 8011028:	00d2      	lsls	r2, r2, #3
 801102a:	e7c1      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 801102c:	2280      	movs	r2, #128	; 0x80
 801102e:	01d2      	lsls	r2, r2, #7
 8011030:	e7be      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 8011032:	2280      	movs	r2, #128	; 0x80
 8011034:	02d2      	lsls	r2, r2, #11
 8011036:	e7bb      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 8011038:	2280      	movs	r2, #128	; 0x80
 801103a:	03d2      	lsls	r2, r2, #15
 801103c:	e7b8      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 801103e:	2280      	movs	r2, #128	; 0x80
 8011040:	04d2      	lsls	r2, r2, #19
 8011042:	e7b5      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 8011044:	2204      	movs	r2, #4
 8011046:	e7b3      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 8011048:	2240      	movs	r2, #64	; 0x40
 801104a:	e7b1      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 801104c:	2280      	movs	r2, #128	; 0x80
 801104e:	00d2      	lsls	r2, r2, #3
 8011050:	e7ae      	b.n	8010fb0 <HAL_DMA_IRQHandler+0x3a4>
 8011052:	2204      	movs	r2, #4
 8011054:	420a      	tst	r2, r1
 8011056:	d100      	bne.n	801105a <HAL_DMA_IRQHandler+0x44e>
 8011058:	e208      	b.n	801146c <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	0752      	lsls	r2, r2, #29
 801105e:	d561      	bpl.n	8011124 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	0692      	lsls	r2, r2, #26
 8011064:	d403      	bmi.n	801106e <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011066:	681a      	ldr	r2, [r3, #0]
 8011068:	2104      	movs	r1, #4
 801106a:	438a      	bics	r2, r1
 801106c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801106e:	6823      	ldr	r3, [r4, #0]
 8011070:	4a5c      	ldr	r2, [pc, #368]	; (80111e4 <HAL_DMA_IRQHandler+0x5d8>)
 8011072:	4293      	cmp	r3, r2
 8011074:	d800      	bhi.n	8011078 <HAL_DMA_IRQHandler+0x46c>
 8011076:	e0c9      	b.n	801120c <HAL_DMA_IRQHandler+0x600>
 8011078:	4a54      	ldr	r2, [pc, #336]	; (80111cc <HAL_DMA_IRQHandler+0x5c0>)
 801107a:	4293      	cmp	r3, r2
 801107c:	d047      	beq.n	801110e <HAL_DMA_IRQHandler+0x502>
 801107e:	4a54      	ldr	r2, [pc, #336]	; (80111d0 <HAL_DMA_IRQHandler+0x5c4>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d100      	bne.n	8011086 <HAL_DMA_IRQHandler+0x47a>
 8011084:	e089      	b.n	801119a <HAL_DMA_IRQHandler+0x58e>
 8011086:	4a53      	ldr	r2, [pc, #332]	; (80111d4 <HAL_DMA_IRQHandler+0x5c8>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d100      	bne.n	801108e <HAL_DMA_IRQHandler+0x482>
 801108c:	e087      	b.n	801119e <HAL_DMA_IRQHandler+0x592>
 801108e:	4a52      	ldr	r2, [pc, #328]	; (80111d8 <HAL_DMA_IRQHandler+0x5cc>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d100      	bne.n	8011096 <HAL_DMA_IRQHandler+0x48a>
 8011094:	e086      	b.n	80111a4 <HAL_DMA_IRQHandler+0x598>
 8011096:	4a51      	ldr	r2, [pc, #324]	; (80111dc <HAL_DMA_IRQHandler+0x5d0>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d100      	bne.n	801109e <HAL_DMA_IRQHandler+0x492>
 801109c:	e085      	b.n	80111aa <HAL_DMA_IRQHandler+0x59e>
 801109e:	4a50      	ldr	r2, [pc, #320]	; (80111e0 <HAL_DMA_IRQHandler+0x5d4>)
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d100      	bne.n	80110a6 <HAL_DMA_IRQHandler+0x49a>
 80110a4:	e084      	b.n	80111b0 <HAL_DMA_IRQHandler+0x5a4>
 80110a6:	4a4f      	ldr	r2, [pc, #316]	; (80111e4 <HAL_DMA_IRQHandler+0x5d8>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d100      	bne.n	80110ae <HAL_DMA_IRQHandler+0x4a2>
 80110ac:	e083      	b.n	80111b6 <HAL_DMA_IRQHandler+0x5aa>
 80110ae:	4a4e      	ldr	r2, [pc, #312]	; (80111e8 <HAL_DMA_IRQHandler+0x5dc>)
 80110b0:	4293      	cmp	r3, r2
 80110b2:	d100      	bne.n	80110b6 <HAL_DMA_IRQHandler+0x4aa>
 80110b4:	e082      	b.n	80111bc <HAL_DMA_IRQHandler+0x5b0>
 80110b6:	4a4d      	ldr	r2, [pc, #308]	; (80111ec <HAL_DMA_IRQHandler+0x5e0>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d100      	bne.n	80110be <HAL_DMA_IRQHandler+0x4b2>
 80110bc:	e080      	b.n	80111c0 <HAL_DMA_IRQHandler+0x5b4>
 80110be:	4a4c      	ldr	r2, [pc, #304]	; (80111f0 <HAL_DMA_IRQHandler+0x5e4>)
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d07f      	beq.n	80111c4 <HAL_DMA_IRQHandler+0x5b8>
 80110c4:	4a4b      	ldr	r2, [pc, #300]	; (80111f4 <HAL_DMA_IRQHandler+0x5e8>)
 80110c6:	4694      	mov	ip, r2
 80110c8:	4463      	add	r3, ip
 80110ca:	425a      	negs	r2, r3
 80110cc:	4153      	adcs	r3, r2
 80110ce:	425b      	negs	r3, r3
 80110d0:	4a4d      	ldr	r2, [pc, #308]	; (8011208 <HAL_DMA_IRQHandler+0x5fc>)
 80110d2:	4013      	ands	r3, r2
 80110d4:	2280      	movs	r2, #128	; 0x80
 80110d6:	02d2      	lsls	r2, r2, #11
 80110d8:	4694      	mov	ip, r2
 80110da:	4463      	add	r3, ip
 80110dc:	e018      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80110de:	2240      	movs	r2, #64	; 0x40
 80110e0:	e7b8      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 80110e2:	2280      	movs	r2, #128	; 0x80
 80110e4:	00d2      	lsls	r2, r2, #3
 80110e6:	e7b5      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 80110e8:	2280      	movs	r2, #128	; 0x80
 80110ea:	01d2      	lsls	r2, r2, #7
 80110ec:	e7b2      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 80110ee:	2280      	movs	r2, #128	; 0x80
 80110f0:	02d2      	lsls	r2, r2, #11
 80110f2:	e7af      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 80110f4:	2280      	movs	r2, #128	; 0x80
 80110f6:	03d2      	lsls	r2, r2, #15
 80110f8:	e7ac      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 80110fa:	2280      	movs	r2, #128	; 0x80
 80110fc:	04d2      	lsls	r2, r2, #19
 80110fe:	e7a9      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 8011100:	2204      	movs	r2, #4
 8011102:	e7a7      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 8011104:	2240      	movs	r2, #64	; 0x40
 8011106:	e7a5      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
 8011108:	2280      	movs	r2, #128	; 0x80
 801110a:	00d2      	lsls	r2, r2, #3
 801110c:	e7a2      	b.n	8011054 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801110e:	2304      	movs	r3, #4
 8011110:	4a3b      	ldr	r2, [pc, #236]	; (8011200 <HAL_DMA_IRQHandler+0x5f4>)
 8011112:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011114:	2321      	movs	r3, #33	; 0x21
 8011116:	2211      	movs	r2, #17
 8011118:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 801111a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801111c:	2b00      	cmp	r3, #0
 801111e:	d001      	beq.n	8011124 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8011120:	0020      	movs	r0, r4
 8011122:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011124:	6821      	ldr	r1, [r4, #0]
 8011126:	4b2f      	ldr	r3, [pc, #188]	; (80111e4 <HAL_DMA_IRQHandler+0x5d8>)
 8011128:	4299      	cmp	r1, r3
 801112a:	d900      	bls.n	801112e <HAL_DMA_IRQHandler+0x522>
 801112c:	e743      	b.n	8010fb6 <HAL_DMA_IRQHandler+0x3aa>
 801112e:	4b33      	ldr	r3, [pc, #204]	; (80111fc <HAL_DMA_IRQHandler+0x5f0>)
 8011130:	6818      	ldr	r0, [r3, #0]
 8011132:	4a26      	ldr	r2, [pc, #152]	; (80111cc <HAL_DMA_IRQHandler+0x5c0>)
 8011134:	4291      	cmp	r1, r2
 8011136:	d100      	bne.n	801113a <HAL_DMA_IRQHandler+0x52e>
 8011138:	e10a      	b.n	8011350 <HAL_DMA_IRQHandler+0x744>
 801113a:	4a25      	ldr	r2, [pc, #148]	; (80111d0 <HAL_DMA_IRQHandler+0x5c4>)
 801113c:	4291      	cmp	r1, r2
 801113e:	d100      	bne.n	8011142 <HAL_DMA_IRQHandler+0x536>
 8011140:	e10c      	b.n	801135c <HAL_DMA_IRQHandler+0x750>
 8011142:	4a24      	ldr	r2, [pc, #144]	; (80111d4 <HAL_DMA_IRQHandler+0x5c8>)
 8011144:	4291      	cmp	r1, r2
 8011146:	d100      	bne.n	801114a <HAL_DMA_IRQHandler+0x53e>
 8011148:	e10a      	b.n	8011360 <HAL_DMA_IRQHandler+0x754>
 801114a:	4a23      	ldr	r2, [pc, #140]	; (80111d8 <HAL_DMA_IRQHandler+0x5cc>)
 801114c:	4291      	cmp	r1, r2
 801114e:	d100      	bne.n	8011152 <HAL_DMA_IRQHandler+0x546>
 8011150:	e109      	b.n	8011366 <HAL_DMA_IRQHandler+0x75a>
 8011152:	4b22      	ldr	r3, [pc, #136]	; (80111dc <HAL_DMA_IRQHandler+0x5d0>)
 8011154:	4299      	cmp	r1, r3
 8011156:	d100      	bne.n	801115a <HAL_DMA_IRQHandler+0x54e>
 8011158:	e108      	b.n	801136c <HAL_DMA_IRQHandler+0x760>
 801115a:	4b21      	ldr	r3, [pc, #132]	; (80111e0 <HAL_DMA_IRQHandler+0x5d4>)
 801115c:	4299      	cmp	r1, r3
 801115e:	d100      	bne.n	8011162 <HAL_DMA_IRQHandler+0x556>
 8011160:	e107      	b.n	8011372 <HAL_DMA_IRQHandler+0x766>
 8011162:	4b20      	ldr	r3, [pc, #128]	; (80111e4 <HAL_DMA_IRQHandler+0x5d8>)
 8011164:	4299      	cmp	r1, r3
 8011166:	d100      	bne.n	801116a <HAL_DMA_IRQHandler+0x55e>
 8011168:	e106      	b.n	8011378 <HAL_DMA_IRQHandler+0x76c>
 801116a:	4b1f      	ldr	r3, [pc, #124]	; (80111e8 <HAL_DMA_IRQHandler+0x5dc>)
 801116c:	4299      	cmp	r1, r3
 801116e:	d100      	bne.n	8011172 <HAL_DMA_IRQHandler+0x566>
 8011170:	e105      	b.n	801137e <HAL_DMA_IRQHandler+0x772>
 8011172:	4b1e      	ldr	r3, [pc, #120]	; (80111ec <HAL_DMA_IRQHandler+0x5e0>)
 8011174:	4299      	cmp	r1, r3
 8011176:	d100      	bne.n	801117a <HAL_DMA_IRQHandler+0x56e>
 8011178:	e103      	b.n	8011382 <HAL_DMA_IRQHandler+0x776>
 801117a:	4b1d      	ldr	r3, [pc, #116]	; (80111f0 <HAL_DMA_IRQHandler+0x5e4>)
 801117c:	4299      	cmp	r1, r3
 801117e:	d100      	bne.n	8011182 <HAL_DMA_IRQHandler+0x576>
 8011180:	e101      	b.n	8011386 <HAL_DMA_IRQHandler+0x77a>
 8011182:	4b1c      	ldr	r3, [pc, #112]	; (80111f4 <HAL_DMA_IRQHandler+0x5e8>)
 8011184:	18ca      	adds	r2, r1, r3
 8011186:	4253      	negs	r3, r2
 8011188:	415a      	adcs	r2, r3
 801118a:	4252      	negs	r2, r2
 801118c:	4b1d      	ldr	r3, [pc, #116]	; (8011204 <HAL_DMA_IRQHandler+0x5f8>)
 801118e:	4013      	ands	r3, r2
 8011190:	2280      	movs	r2, #128	; 0x80
 8011192:	0292      	lsls	r2, r2, #10
 8011194:	4694      	mov	ip, r2
 8011196:	4463      	add	r3, ip
 8011198:	e0db      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 801119a:	2340      	movs	r3, #64	; 0x40
 801119c:	e7b8      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 801119e:	2380      	movs	r3, #128	; 0x80
 80111a0:	00db      	lsls	r3, r3, #3
 80111a2:	e7b5      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111a4:	2380      	movs	r3, #128	; 0x80
 80111a6:	01db      	lsls	r3, r3, #7
 80111a8:	e7b2      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111aa:	2380      	movs	r3, #128	; 0x80
 80111ac:	02db      	lsls	r3, r3, #11
 80111ae:	e7af      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111b0:	2380      	movs	r3, #128	; 0x80
 80111b2:	03db      	lsls	r3, r3, #15
 80111b4:	e7ac      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111b6:	2380      	movs	r3, #128	; 0x80
 80111b8:	04db      	lsls	r3, r3, #19
 80111ba:	e7a9      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111bc:	2304      	movs	r3, #4
 80111be:	e7a7      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111c0:	2340      	movs	r3, #64	; 0x40
 80111c2:	e7a5      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111c4:	2380      	movs	r3, #128	; 0x80
 80111c6:	00db      	lsls	r3, r3, #3
 80111c8:	e7a2      	b.n	8011110 <HAL_DMA_IRQHandler+0x504>
 80111ca:	46c0      	nop			; (mov r8, r8)
 80111cc:	40020008 	.word	0x40020008
 80111d0:	4002001c 	.word	0x4002001c
 80111d4:	40020030 	.word	0x40020030
 80111d8:	40020044 	.word	0x40020044
 80111dc:	40020058 	.word	0x40020058
 80111e0:	4002006c 	.word	0x4002006c
 80111e4:	40020080 	.word	0x40020080
 80111e8:	40020408 	.word	0x40020408
 80111ec:	4002041c 	.word	0x4002041c
 80111f0:	40020430 	.word	0x40020430
 80111f4:	bffdfbbc 	.word	0xbffdfbbc
 80111f8:	fff88000 	.word	0xfff88000
 80111fc:	40020000 	.word	0x40020000
 8011200:	40020400 	.word	0x40020400
 8011204:	fffe2000 	.word	0xfffe2000
 8011208:	fffc4000 	.word	0xfffc4000
 801120c:	4a9b      	ldr	r2, [pc, #620]	; (801147c <HAL_DMA_IRQHandler+0x870>)
 801120e:	4293      	cmp	r3, r2
 8011210:	d027      	beq.n	8011262 <HAL_DMA_IRQHandler+0x656>
 8011212:	4a9b      	ldr	r2, [pc, #620]	; (8011480 <HAL_DMA_IRQHandler+0x874>)
 8011214:	4293      	cmp	r3, r2
 8011216:	d028      	beq.n	801126a <HAL_DMA_IRQHandler+0x65e>
 8011218:	4a9a      	ldr	r2, [pc, #616]	; (8011484 <HAL_DMA_IRQHandler+0x878>)
 801121a:	4293      	cmp	r3, r2
 801121c:	d027      	beq.n	801126e <HAL_DMA_IRQHandler+0x662>
 801121e:	4a9a      	ldr	r2, [pc, #616]	; (8011488 <HAL_DMA_IRQHandler+0x87c>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d027      	beq.n	8011274 <HAL_DMA_IRQHandler+0x668>
 8011224:	4a99      	ldr	r2, [pc, #612]	; (801148c <HAL_DMA_IRQHandler+0x880>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d027      	beq.n	801127a <HAL_DMA_IRQHandler+0x66e>
 801122a:	4a99      	ldr	r2, [pc, #612]	; (8011490 <HAL_DMA_IRQHandler+0x884>)
 801122c:	4293      	cmp	r3, r2
 801122e:	d027      	beq.n	8011280 <HAL_DMA_IRQHandler+0x674>
 8011230:	4a98      	ldr	r2, [pc, #608]	; (8011494 <HAL_DMA_IRQHandler+0x888>)
 8011232:	4293      	cmp	r3, r2
 8011234:	d027      	beq.n	8011286 <HAL_DMA_IRQHandler+0x67a>
 8011236:	4a98      	ldr	r2, [pc, #608]	; (8011498 <HAL_DMA_IRQHandler+0x88c>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d027      	beq.n	801128c <HAL_DMA_IRQHandler+0x680>
 801123c:	4a97      	ldr	r2, [pc, #604]	; (801149c <HAL_DMA_IRQHandler+0x890>)
 801123e:	4293      	cmp	r3, r2
 8011240:	d026      	beq.n	8011290 <HAL_DMA_IRQHandler+0x684>
 8011242:	4a97      	ldr	r2, [pc, #604]	; (80114a0 <HAL_DMA_IRQHandler+0x894>)
 8011244:	4293      	cmp	r3, r2
 8011246:	d025      	beq.n	8011294 <HAL_DMA_IRQHandler+0x688>
 8011248:	4a96      	ldr	r2, [pc, #600]	; (80114a4 <HAL_DMA_IRQHandler+0x898>)
 801124a:	4694      	mov	ip, r2
 801124c:	4463      	add	r3, ip
 801124e:	425a      	negs	r2, r3
 8011250:	4153      	adcs	r3, r2
 8011252:	425b      	negs	r3, r3
 8011254:	4a94      	ldr	r2, [pc, #592]	; (80114a8 <HAL_DMA_IRQHandler+0x89c>)
 8011256:	4013      	ands	r3, r2
 8011258:	2280      	movs	r2, #128	; 0x80
 801125a:	02d2      	lsls	r2, r2, #11
 801125c:	4694      	mov	ip, r2
 801125e:	4463      	add	r3, ip
 8011260:	e000      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 8011262:	2304      	movs	r3, #4
 8011264:	4a91      	ldr	r2, [pc, #580]	; (80114ac <HAL_DMA_IRQHandler+0x8a0>)
 8011266:	6053      	str	r3, [r2, #4]
 8011268:	e754      	b.n	8011114 <HAL_DMA_IRQHandler+0x508>
 801126a:	2340      	movs	r3, #64	; 0x40
 801126c:	e7fa      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 801126e:	2380      	movs	r3, #128	; 0x80
 8011270:	00db      	lsls	r3, r3, #3
 8011272:	e7f7      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 8011274:	2380      	movs	r3, #128	; 0x80
 8011276:	01db      	lsls	r3, r3, #7
 8011278:	e7f4      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 801127a:	2380      	movs	r3, #128	; 0x80
 801127c:	02db      	lsls	r3, r3, #11
 801127e:	e7f1      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 8011280:	2380      	movs	r3, #128	; 0x80
 8011282:	03db      	lsls	r3, r3, #15
 8011284:	e7ee      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 8011286:	2380      	movs	r3, #128	; 0x80
 8011288:	04db      	lsls	r3, r3, #19
 801128a:	e7eb      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 801128c:	2304      	movs	r3, #4
 801128e:	e7e9      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 8011290:	2340      	movs	r3, #64	; 0x40
 8011292:	e7e7      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
 8011294:	2380      	movs	r3, #128	; 0x80
 8011296:	00db      	lsls	r3, r3, #3
 8011298:	e7e4      	b.n	8011264 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801129a:	2302      	movs	r3, #2
 801129c:	4003      	ands	r3, r0
 801129e:	1e5a      	subs	r2, r3, #1
 80112a0:	4193      	sbcs	r3, r2
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d100      	bne.n	80112aa <HAL_DMA_IRQHandler+0x69e>
 80112a8:	e080      	b.n	80113ac <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80112aa:	680b      	ldr	r3, [r1, #0]
 80112ac:	079b      	lsls	r3, r3, #30
 80112ae:	d57d      	bpl.n	80113ac <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80112b0:	680b      	ldr	r3, [r1, #0]
 80112b2:	069b      	lsls	r3, r3, #26
 80112b4:	d403      	bmi.n	80112be <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80112b6:	680b      	ldr	r3, [r1, #0]
 80112b8:	2202      	movs	r2, #2
 80112ba:	4393      	bics	r3, r2
 80112bc:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80112be:	6823      	ldr	r3, [r4, #0]
 80112c0:	4a74      	ldr	r2, [pc, #464]	; (8011494 <HAL_DMA_IRQHandler+0x888>)
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d800      	bhi.n	80112c8 <HAL_DMA_IRQHandler+0x6bc>
 80112c6:	e08a      	b.n	80113de <HAL_DMA_IRQHandler+0x7d2>
 80112c8:	4a6c      	ldr	r2, [pc, #432]	; (801147c <HAL_DMA_IRQHandler+0x870>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d05e      	beq.n	801138c <HAL_DMA_IRQHandler+0x780>
 80112ce:	4a6c      	ldr	r2, [pc, #432]	; (8011480 <HAL_DMA_IRQHandler+0x874>)
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d100      	bne.n	80112d6 <HAL_DMA_IRQHandler+0x6ca>
 80112d4:	e06b      	b.n	80113ae <HAL_DMA_IRQHandler+0x7a2>
 80112d6:	4a6b      	ldr	r2, [pc, #428]	; (8011484 <HAL_DMA_IRQHandler+0x878>)
 80112d8:	4293      	cmp	r3, r2
 80112da:	d06a      	beq.n	80113b2 <HAL_DMA_IRQHandler+0x7a6>
 80112dc:	4a6a      	ldr	r2, [pc, #424]	; (8011488 <HAL_DMA_IRQHandler+0x87c>)
 80112de:	4293      	cmp	r3, r2
 80112e0:	d06a      	beq.n	80113b8 <HAL_DMA_IRQHandler+0x7ac>
 80112e2:	4a6a      	ldr	r2, [pc, #424]	; (801148c <HAL_DMA_IRQHandler+0x880>)
 80112e4:	4293      	cmp	r3, r2
 80112e6:	d06a      	beq.n	80113be <HAL_DMA_IRQHandler+0x7b2>
 80112e8:	4a69      	ldr	r2, [pc, #420]	; (8011490 <HAL_DMA_IRQHandler+0x884>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d06a      	beq.n	80113c4 <HAL_DMA_IRQHandler+0x7b8>
 80112ee:	4a69      	ldr	r2, [pc, #420]	; (8011494 <HAL_DMA_IRQHandler+0x888>)
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d06a      	beq.n	80113ca <HAL_DMA_IRQHandler+0x7be>
 80112f4:	4a68      	ldr	r2, [pc, #416]	; (8011498 <HAL_DMA_IRQHandler+0x88c>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d06a      	beq.n	80113d0 <HAL_DMA_IRQHandler+0x7c4>
 80112fa:	4a68      	ldr	r2, [pc, #416]	; (801149c <HAL_DMA_IRQHandler+0x890>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d069      	beq.n	80113d4 <HAL_DMA_IRQHandler+0x7c8>
 8011300:	4a67      	ldr	r2, [pc, #412]	; (80114a0 <HAL_DMA_IRQHandler+0x894>)
 8011302:	4293      	cmp	r3, r2
 8011304:	d068      	beq.n	80113d8 <HAL_DMA_IRQHandler+0x7cc>
 8011306:	4a67      	ldr	r2, [pc, #412]	; (80114a4 <HAL_DMA_IRQHandler+0x898>)
 8011308:	4694      	mov	ip, r2
 801130a:	4463      	add	r3, ip
 801130c:	425a      	negs	r2, r3
 801130e:	4153      	adcs	r3, r2
 8011310:	425b      	negs	r3, r3
 8011312:	4a67      	ldr	r2, [pc, #412]	; (80114b0 <HAL_DMA_IRQHandler+0x8a4>)
 8011314:	4013      	ands	r3, r2
 8011316:	2280      	movs	r2, #128	; 0x80
 8011318:	0292      	lsls	r2, r2, #10
 801131a:	4694      	mov	ip, r2
 801131c:	4463      	add	r3, ip
 801131e:	e036      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011320:	2320      	movs	r3, #32
 8011322:	e7bb      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 8011324:	2380      	movs	r3, #128	; 0x80
 8011326:	009b      	lsls	r3, r3, #2
 8011328:	e7b8      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 801132a:	2380      	movs	r3, #128	; 0x80
 801132c:	019b      	lsls	r3, r3, #6
 801132e:	e7b5      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 8011330:	2380      	movs	r3, #128	; 0x80
 8011332:	029b      	lsls	r3, r3, #10
 8011334:	e7b2      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 8011336:	2380      	movs	r3, #128	; 0x80
 8011338:	039b      	lsls	r3, r3, #14
 801133a:	e7af      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 801133c:	2380      	movs	r3, #128	; 0x80
 801133e:	049b      	lsls	r3, r3, #18
 8011340:	e7ac      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 8011342:	2302      	movs	r3, #2
 8011344:	e7aa      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 8011346:	2320      	movs	r3, #32
 8011348:	e7a8      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 801134a:	2380      	movs	r3, #128	; 0x80
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	e7a5      	b.n	801129c <HAL_DMA_IRQHandler+0x690>
 8011350:	2302      	movs	r3, #2
 8011352:	4003      	ands	r3, r0
 8011354:	1e5a      	subs	r2, r3, #1
 8011356:	4193      	sbcs	r3, r2
 8011358:	b2db      	uxtb	r3, r3
 801135a:	e7a3      	b.n	80112a4 <HAL_DMA_IRQHandler+0x698>
 801135c:	2320      	movs	r3, #32
 801135e:	e7f8      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 8011360:	2380      	movs	r3, #128	; 0x80
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	e7f5      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 8011366:	2380      	movs	r3, #128	; 0x80
 8011368:	019b      	lsls	r3, r3, #6
 801136a:	e7f2      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 801136c:	2380      	movs	r3, #128	; 0x80
 801136e:	029b      	lsls	r3, r3, #10
 8011370:	e7ef      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 8011372:	2380      	movs	r3, #128	; 0x80
 8011374:	039b      	lsls	r3, r3, #14
 8011376:	e7ec      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 8011378:	2380      	movs	r3, #128	; 0x80
 801137a:	049b      	lsls	r3, r3, #18
 801137c:	e7e9      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 801137e:	2302      	movs	r3, #2
 8011380:	e7e7      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 8011382:	2320      	movs	r3, #32
 8011384:	e7e5      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
 8011386:	2380      	movs	r3, #128	; 0x80
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	e7e2      	b.n	8011352 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 801138c:	2302      	movs	r3, #2
 801138e:	4a49      	ldr	r2, [pc, #292]	; (80114b4 <HAL_DMA_IRQHandler+0x8a8>)
 8011390:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011394:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011396:	2321      	movs	r3, #33	; 0x21
 8011398:	2201      	movs	r2, #1
 801139a:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 801139c:	3b01      	subs	r3, #1
 801139e:	2200      	movs	r2, #0
 80113a0:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80113a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d001      	beq.n	80113ac <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 80113a8:	0020      	movs	r0, r4
 80113aa:	4798      	blx	r3
}  
 80113ac:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80113ae:	2320      	movs	r3, #32
 80113b0:	e7ed      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113b2:	2380      	movs	r3, #128	; 0x80
 80113b4:	009b      	lsls	r3, r3, #2
 80113b6:	e7ea      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113b8:	2380      	movs	r3, #128	; 0x80
 80113ba:	019b      	lsls	r3, r3, #6
 80113bc:	e7e7      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113be:	2380      	movs	r3, #128	; 0x80
 80113c0:	029b      	lsls	r3, r3, #10
 80113c2:	e7e4      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113c4:	2380      	movs	r3, #128	; 0x80
 80113c6:	039b      	lsls	r3, r3, #14
 80113c8:	e7e1      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113ca:	2380      	movs	r3, #128	; 0x80
 80113cc:	049b      	lsls	r3, r3, #18
 80113ce:	e7de      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113d0:	2302      	movs	r3, #2
 80113d2:	e7dc      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113d4:	2320      	movs	r3, #32
 80113d6:	e7da      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113d8:	2380      	movs	r3, #128	; 0x80
 80113da:	009b      	lsls	r3, r3, #2
 80113dc:	e7d7      	b.n	801138e <HAL_DMA_IRQHandler+0x782>
 80113de:	4a27      	ldr	r2, [pc, #156]	; (801147c <HAL_DMA_IRQHandler+0x870>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d027      	beq.n	8011434 <HAL_DMA_IRQHandler+0x828>
 80113e4:	4a26      	ldr	r2, [pc, #152]	; (8011480 <HAL_DMA_IRQHandler+0x874>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d028      	beq.n	801143c <HAL_DMA_IRQHandler+0x830>
 80113ea:	4a26      	ldr	r2, [pc, #152]	; (8011484 <HAL_DMA_IRQHandler+0x878>)
 80113ec:	4293      	cmp	r3, r2
 80113ee:	d027      	beq.n	8011440 <HAL_DMA_IRQHandler+0x834>
 80113f0:	4a25      	ldr	r2, [pc, #148]	; (8011488 <HAL_DMA_IRQHandler+0x87c>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d027      	beq.n	8011446 <HAL_DMA_IRQHandler+0x83a>
 80113f6:	4a25      	ldr	r2, [pc, #148]	; (801148c <HAL_DMA_IRQHandler+0x880>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d027      	beq.n	801144c <HAL_DMA_IRQHandler+0x840>
 80113fc:	4a24      	ldr	r2, [pc, #144]	; (8011490 <HAL_DMA_IRQHandler+0x884>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d027      	beq.n	8011452 <HAL_DMA_IRQHandler+0x846>
 8011402:	4a24      	ldr	r2, [pc, #144]	; (8011494 <HAL_DMA_IRQHandler+0x888>)
 8011404:	4293      	cmp	r3, r2
 8011406:	d027      	beq.n	8011458 <HAL_DMA_IRQHandler+0x84c>
 8011408:	4a23      	ldr	r2, [pc, #140]	; (8011498 <HAL_DMA_IRQHandler+0x88c>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d027      	beq.n	801145e <HAL_DMA_IRQHandler+0x852>
 801140e:	4a23      	ldr	r2, [pc, #140]	; (801149c <HAL_DMA_IRQHandler+0x890>)
 8011410:	4293      	cmp	r3, r2
 8011412:	d026      	beq.n	8011462 <HAL_DMA_IRQHandler+0x856>
 8011414:	4a22      	ldr	r2, [pc, #136]	; (80114a0 <HAL_DMA_IRQHandler+0x894>)
 8011416:	4293      	cmp	r3, r2
 8011418:	d025      	beq.n	8011466 <HAL_DMA_IRQHandler+0x85a>
 801141a:	4a22      	ldr	r2, [pc, #136]	; (80114a4 <HAL_DMA_IRQHandler+0x898>)
 801141c:	4694      	mov	ip, r2
 801141e:	4463      	add	r3, ip
 8011420:	425a      	negs	r2, r3
 8011422:	4153      	adcs	r3, r2
 8011424:	425b      	negs	r3, r3
 8011426:	4a22      	ldr	r2, [pc, #136]	; (80114b0 <HAL_DMA_IRQHandler+0x8a4>)
 8011428:	4013      	ands	r3, r2
 801142a:	2280      	movs	r2, #128	; 0x80
 801142c:	0292      	lsls	r2, r2, #10
 801142e:	4694      	mov	ip, r2
 8011430:	4463      	add	r3, ip
 8011432:	e000      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 8011434:	2302      	movs	r3, #2
 8011436:	4a1d      	ldr	r2, [pc, #116]	; (80114ac <HAL_DMA_IRQHandler+0x8a0>)
 8011438:	6053      	str	r3, [r2, #4]
 801143a:	e7aa      	b.n	8011392 <HAL_DMA_IRQHandler+0x786>
 801143c:	2320      	movs	r3, #32
 801143e:	e7fa      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 8011440:	2380      	movs	r3, #128	; 0x80
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	e7f7      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 8011446:	2380      	movs	r3, #128	; 0x80
 8011448:	019b      	lsls	r3, r3, #6
 801144a:	e7f4      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 801144c:	2380      	movs	r3, #128	; 0x80
 801144e:	029b      	lsls	r3, r3, #10
 8011450:	e7f1      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 8011452:	2380      	movs	r3, #128	; 0x80
 8011454:	039b      	lsls	r3, r3, #14
 8011456:	e7ee      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 8011458:	2380      	movs	r3, #128	; 0x80
 801145a:	049b      	lsls	r3, r3, #18
 801145c:	e7eb      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 801145e:	2302      	movs	r3, #2
 8011460:	e7e9      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 8011462:	2320      	movs	r3, #32
 8011464:	e7e7      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
 8011466:	2380      	movs	r3, #128	; 0x80
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	e7e4      	b.n	8011436 <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801146c:	6821      	ldr	r1, [r4, #0]
 801146e:	e65e      	b.n	801112e <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011470:	681a      	ldr	r2, [r3, #0]
 8011472:	0712      	lsls	r2, r2, #28
 8011474:	d500      	bpl.n	8011478 <HAL_DMA_IRQHandler+0x86c>
 8011476:	e49b      	b.n	8010db0 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011478:	6823      	ldr	r3, [r4, #0]
 801147a:	e44b      	b.n	8010d14 <HAL_DMA_IRQHandler+0x108>
 801147c:	40020008 	.word	0x40020008
 8011480:	4002001c 	.word	0x4002001c
 8011484:	40020030 	.word	0x40020030
 8011488:	40020044 	.word	0x40020044
 801148c:	40020058 	.word	0x40020058
 8011490:	4002006c 	.word	0x4002006c
 8011494:	40020080 	.word	0x40020080
 8011498:	40020408 	.word	0x40020408
 801149c:	4002041c 	.word	0x4002041c
 80114a0:	40020430 	.word	0x40020430
 80114a4:	bffdfbbc 	.word	0xbffdfbbc
 80114a8:	fffc4000 	.word	0xfffc4000
 80114ac:	40020000 	.word	0x40020000
 80114b0:	fffe2000 	.word	0xfffe2000
 80114b4:	40020400 	.word	0x40020400

080114b8 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80114b8:	4b0a      	ldr	r3, [pc, #40]	; (80114e4 <FLASH_SetErrorCode+0x2c>)
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	06db      	lsls	r3, r3, #27
 80114be:	d504      	bpl.n	80114ca <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80114c0:	4a09      	ldr	r2, [pc, #36]	; (80114e8 <FLASH_SetErrorCode+0x30>)
 80114c2:	69d3      	ldr	r3, [r2, #28]
 80114c4:	2102      	movs	r1, #2
 80114c6:	430b      	orrs	r3, r1
 80114c8:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80114ca:	4b06      	ldr	r3, [pc, #24]	; (80114e4 <FLASH_SetErrorCode+0x2c>)
 80114cc:	68db      	ldr	r3, [r3, #12]
 80114ce:	075b      	lsls	r3, r3, #29
 80114d0:	d504      	bpl.n	80114dc <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80114d2:	4a05      	ldr	r2, [pc, #20]	; (80114e8 <FLASH_SetErrorCode+0x30>)
 80114d4:	69d3      	ldr	r3, [r2, #28]
 80114d6:	2101      	movs	r1, #1
 80114d8:	430b      	orrs	r3, r1
 80114da:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 80114dc:	4b01      	ldr	r3, [pc, #4]	; (80114e4 <FLASH_SetErrorCode+0x2c>)
 80114de:	2214      	movs	r2, #20
 80114e0:	60da      	str	r2, [r3, #12]
}  
 80114e2:	4770      	bx	lr
 80114e4:	40022000 	.word	0x40022000
 80114e8:	20006fc8 	.word	0x20006fc8

080114ec <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80114ec:	4b05      	ldr	r3, [pc, #20]	; (8011504 <HAL_FLASH_Unlock+0x18>)
 80114ee:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 80114f0:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 80114f2:	061b      	lsls	r3, r3, #24
 80114f4:	d505      	bpl.n	8011502 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80114f6:	4b03      	ldr	r3, [pc, #12]	; (8011504 <HAL_FLASH_Unlock+0x18>)
 80114f8:	4a03      	ldr	r2, [pc, #12]	; (8011508 <HAL_FLASH_Unlock+0x1c>)
 80114fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80114fc:	4a03      	ldr	r2, [pc, #12]	; (801150c <HAL_FLASH_Unlock+0x20>)
 80114fe:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011500:	2000      	movs	r0, #0
}
 8011502:	4770      	bx	lr
 8011504:	40022000 	.word	0x40022000
 8011508:	45670123 	.word	0x45670123
 801150c:	cdef89ab 	.word	0xcdef89ab

08011510 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011510:	4a03      	ldr	r2, [pc, #12]	; (8011520 <HAL_FLASH_Lock+0x10>)
 8011512:	6913      	ldr	r3, [r2, #16]
 8011514:	2180      	movs	r1, #128	; 0x80
 8011516:	430b      	orrs	r3, r1
 8011518:	6113      	str	r3, [r2, #16]
}
 801151a:	2000      	movs	r0, #0
 801151c:	4770      	bx	lr
 801151e:	46c0      	nop			; (mov r8, r8)
 8011520:	40022000 	.word	0x40022000

08011524 <FLASH_WaitForLastOperation>:
{
 8011524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011526:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011528:	f7fe fe66 	bl	80101f8 <HAL_GetTick>
 801152c:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801152e:	4e13      	ldr	r6, [pc, #76]	; (801157c <FLASH_WaitForLastOperation+0x58>)
 8011530:	2501      	movs	r5, #1
 8011532:	68f3      	ldr	r3, [r6, #12]
 8011534:	421d      	tst	r5, r3
 8011536:	d00a      	beq.n	801154e <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011538:	1c63      	adds	r3, r4, #1
 801153a:	d0fa      	beq.n	8011532 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 801153c:	2c00      	cmp	r4, #0
 801153e:	d01a      	beq.n	8011576 <FLASH_WaitForLastOperation+0x52>
 8011540:	f7fe fe5a 	bl	80101f8 <HAL_GetTick>
 8011544:	1bc0      	subs	r0, r0, r7
 8011546:	42a0      	cmp	r0, r4
 8011548:	d9f3      	bls.n	8011532 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 801154a:	2003      	movs	r0, #3
 801154c:	e012      	b.n	8011574 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801154e:	4b0b      	ldr	r3, [pc, #44]	; (801157c <FLASH_WaitForLastOperation+0x58>)
 8011550:	68db      	ldr	r3, [r3, #12]
 8011552:	069b      	lsls	r3, r3, #26
 8011554:	d502      	bpl.n	801155c <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011556:	4b09      	ldr	r3, [pc, #36]	; (801157c <FLASH_WaitForLastOperation+0x58>)
 8011558:	2220      	movs	r2, #32
 801155a:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801155c:	4b07      	ldr	r3, [pc, #28]	; (801157c <FLASH_WaitForLastOperation+0x58>)
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	06db      	lsls	r3, r3, #27
 8011562:	d404      	bmi.n	801156e <FLASH_WaitForLastOperation+0x4a>
 8011564:	4b05      	ldr	r3, [pc, #20]	; (801157c <FLASH_WaitForLastOperation+0x58>)
 8011566:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011568:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 801156a:	075b      	lsls	r3, r3, #29
 801156c:	d502      	bpl.n	8011574 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 801156e:	f7ff ffa3 	bl	80114b8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011572:	2001      	movs	r0, #1
}
 8011574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011576:	2003      	movs	r0, #3
 8011578:	e7fc      	b.n	8011574 <FLASH_WaitForLastOperation+0x50>
 801157a:	46c0      	nop			; (mov r8, r8)
 801157c:	40022000 	.word	0x40022000

08011580 <HAL_FLASH_Program>:
{
 8011580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011582:	46de      	mov	lr, fp
 8011584:	4657      	mov	r7, sl
 8011586:	464e      	mov	r6, r9
 8011588:	4645      	mov	r5, r8
 801158a:	b5e0      	push	{r5, r6, r7, lr}
 801158c:	b083      	sub	sp, #12
 801158e:	0004      	movs	r4, r0
 8011590:	000e      	movs	r6, r1
 8011592:	9201      	str	r2, [sp, #4]
 8011594:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011596:	4b2a      	ldr	r3, [pc, #168]	; (8011640 <HAL_FLASH_Program+0xc0>)
 8011598:	7e1b      	ldrb	r3, [r3, #24]
 801159a:	2b01      	cmp	r3, #1
 801159c:	d04b      	beq.n	8011636 <HAL_FLASH_Program+0xb6>
 801159e:	4b28      	ldr	r3, [pc, #160]	; (8011640 <HAL_FLASH_Program+0xc0>)
 80115a0:	2201      	movs	r2, #1
 80115a2:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80115a4:	4827      	ldr	r0, [pc, #156]	; (8011644 <HAL_FLASH_Program+0xc4>)
 80115a6:	f7ff ffbd 	bl	8011524 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80115aa:	2800      	cmp	r0, #0
 80115ac:	d139      	bne.n	8011622 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80115ae:	2c01      	cmp	r4, #1
 80115b0:	d043      	beq.n	801163a <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 80115b2:	3c02      	subs	r4, #2
 80115b4:	4263      	negs	r3, r4
 80115b6:	415c      	adcs	r4, r3
 80115b8:	4264      	negs	r4, r4
 80115ba:	2301      	movs	r3, #1
 80115bc:	439c      	bics	r4, r3
 80115be:	46a0      	mov	r8, r4
 80115c0:	3303      	adds	r3, #3
 80115c2:	469c      	mov	ip, r3
 80115c4:	44e0      	add	r8, ip
{
 80115c6:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80115c8:	4b1d      	ldr	r3, [pc, #116]	; (8011640 <HAL_FLASH_Program+0xc0>)
 80115ca:	469b      	mov	fp, r3
 80115cc:	2300      	movs	r3, #0
 80115ce:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80115d0:	4c1d      	ldr	r4, [pc, #116]	; (8011648 <HAL_FLASH_Program+0xc8>)
 80115d2:	e01e      	b.n	8011612 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 80115d4:	2220      	movs	r2, #32
 80115d6:	1ad2      	subs	r2, r2, r3
 80115d8:	4649      	mov	r1, r9
 80115da:	4091      	lsls	r1, r2
 80115dc:	000a      	movs	r2, r1
 80115de:	9901      	ldr	r1, [sp, #4]
 80115e0:	40d9      	lsrs	r1, r3
 80115e2:	000b      	movs	r3, r1
 80115e4:	4313      	orrs	r3, r2
 80115e6:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80115e8:	465a      	mov	r2, fp
 80115ea:	4651      	mov	r1, sl
 80115ec:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80115ee:	6922      	ldr	r2, [r4, #16]
 80115f0:	2701      	movs	r7, #1
 80115f2:	433a      	orrs	r2, r7
 80115f4:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 80115f6:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80115f8:	4812      	ldr	r0, [pc, #72]	; (8011644 <HAL_FLASH_Program+0xc4>)
 80115fa:	f7ff ff93 	bl	8011524 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80115fe:	6923      	ldr	r3, [r4, #16]
 8011600:	43bb      	bics	r3, r7
 8011602:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011604:	2800      	cmp	r0, #0
 8011606:	d10c      	bne.n	8011622 <HAL_FLASH_Program+0xa2>
 8011608:	3501      	adds	r5, #1
 801160a:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 801160c:	b2eb      	uxtb	r3, r5
 801160e:	4598      	cmp	r8, r3
 8011610:	d907      	bls.n	8011622 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011612:	012b      	lsls	r3, r5, #4
 8011614:	2220      	movs	r2, #32
 8011616:	4252      	negs	r2, r2
 8011618:	189a      	adds	r2, r3, r2
 801161a:	d4db      	bmi.n	80115d4 <HAL_FLASH_Program+0x54>
 801161c:	464b      	mov	r3, r9
 801161e:	40d3      	lsrs	r3, r2
 8011620:	e7e1      	b.n	80115e6 <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8011622:	4b07      	ldr	r3, [pc, #28]	; (8011640 <HAL_FLASH_Program+0xc0>)
 8011624:	2200      	movs	r2, #0
 8011626:	761a      	strb	r2, [r3, #24]
}
 8011628:	b003      	add	sp, #12
 801162a:	bc3c      	pop	{r2, r3, r4, r5}
 801162c:	4690      	mov	r8, r2
 801162e:	4699      	mov	r9, r3
 8011630:	46a2      	mov	sl, r4
 8011632:	46ab      	mov	fp, r5
 8011634:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011636:	2002      	movs	r0, #2
 8011638:	e7f6      	b.n	8011628 <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 801163a:	2301      	movs	r3, #1
 801163c:	4698      	mov	r8, r3
 801163e:	e7c2      	b.n	80115c6 <HAL_FLASH_Program+0x46>
 8011640:	20006fc8 	.word	0x20006fc8
 8011644:	0000c350 	.word	0x0000c350
 8011648:	40022000 	.word	0x40022000

0801164c <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801164c:	4b06      	ldr	r3, [pc, #24]	; (8011668 <FLASH_MassErase+0x1c>)
 801164e:	2200      	movs	r2, #0
 8011650:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011652:	4b06      	ldr	r3, [pc, #24]	; (801166c <FLASH_MassErase+0x20>)
 8011654:	691a      	ldr	r2, [r3, #16]
 8011656:	2104      	movs	r1, #4
 8011658:	430a      	orrs	r2, r1
 801165a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801165c:	691a      	ldr	r2, [r3, #16]
 801165e:	313c      	adds	r1, #60	; 0x3c
 8011660:	430a      	orrs	r2, r1
 8011662:	611a      	str	r2, [r3, #16]
}
 8011664:	4770      	bx	lr
 8011666:	46c0      	nop			; (mov r8, r8)
 8011668:	20006fc8 	.word	0x20006fc8
 801166c:	40022000 	.word	0x40022000

08011670 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011670:	4b06      	ldr	r3, [pc, #24]	; (801168c <FLASH_PageErase+0x1c>)
 8011672:	2200      	movs	r2, #0
 8011674:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011676:	4b06      	ldr	r3, [pc, #24]	; (8011690 <FLASH_PageErase+0x20>)
 8011678:	691a      	ldr	r2, [r3, #16]
 801167a:	2102      	movs	r1, #2
 801167c:	430a      	orrs	r2, r1
 801167e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011680:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011682:	691a      	ldr	r2, [r3, #16]
 8011684:	313e      	adds	r1, #62	; 0x3e
 8011686:	430a      	orrs	r2, r1
 8011688:	611a      	str	r2, [r3, #16]
}
 801168a:	4770      	bx	lr
 801168c:	20006fc8 	.word	0x20006fc8
 8011690:	40022000 	.word	0x40022000

08011694 <HAL_FLASHEx_Erase>:
{
 8011694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011696:	46c6      	mov	lr, r8
 8011698:	b500      	push	{lr}
 801169a:	0006      	movs	r6, r0
 801169c:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 801169e:	4b2a      	ldr	r3, [pc, #168]	; (8011748 <HAL_FLASHEx_Erase+0xb4>)
 80116a0:	7e1b      	ldrb	r3, [r3, #24]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d04d      	beq.n	8011742 <HAL_FLASHEx_Erase+0xae>
 80116a6:	4b28      	ldr	r3, [pc, #160]	; (8011748 <HAL_FLASHEx_Erase+0xb4>)
 80116a8:	2201      	movs	r2, #1
 80116aa:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80116ac:	6803      	ldr	r3, [r0, #0]
 80116ae:	2b01      	cmp	r3, #1
 80116b0:	d029      	beq.n	8011706 <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80116b2:	4826      	ldr	r0, [pc, #152]	; (801174c <HAL_FLASHEx_Erase+0xb8>)
 80116b4:	f7ff ff36 	bl	8011524 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80116b8:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d129      	bne.n	8011712 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 80116be:	2301      	movs	r3, #1
 80116c0:	425b      	negs	r3, r3
 80116c2:	4642      	mov	r2, r8
 80116c4:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 80116c6:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80116c8:	68b3      	ldr	r3, [r6, #8]
 80116ca:	02db      	lsls	r3, r3, #11
 80116cc:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 80116ce:	429c      	cmp	r4, r3
 80116d0:	d235      	bcs.n	801173e <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80116d2:	4f1f      	ldr	r7, [pc, #124]	; (8011750 <HAL_FLASHEx_Erase+0xbc>)
 80116d4:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80116d6:	0020      	movs	r0, r4
 80116d8:	f7ff ffca 	bl	8011670 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80116dc:	481b      	ldr	r0, [pc, #108]	; (801174c <HAL_FLASHEx_Erase+0xb8>)
 80116de:	f7ff ff21 	bl	8011524 <FLASH_WaitForLastOperation>
 80116e2:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80116e4:	693b      	ldr	r3, [r7, #16]
 80116e6:	43ab      	bics	r3, r5
 80116e8:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d124      	bne.n	8011738 <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 80116ee:	2380      	movs	r3, #128	; 0x80
 80116f0:	011b      	lsls	r3, r3, #4
 80116f2:	469c      	mov	ip, r3
 80116f4:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80116f6:	68b3      	ldr	r3, [r6, #8]
 80116f8:	02db      	lsls	r3, r3, #11
 80116fa:	6871      	ldr	r1, [r6, #4]
 80116fc:	468c      	mov	ip, r1
 80116fe:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011700:	42a3      	cmp	r3, r4
 8011702:	d8e8      	bhi.n	80116d6 <HAL_FLASHEx_Erase+0x42>
 8011704:	e005      	b.n	8011712 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011706:	4811      	ldr	r0, [pc, #68]	; (801174c <HAL_FLASHEx_Erase+0xb8>)
 8011708:	f7ff ff0c 	bl	8011524 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 801170c:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 801170e:	2800      	cmp	r0, #0
 8011710:	d006      	beq.n	8011720 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8011712:	4b0d      	ldr	r3, [pc, #52]	; (8011748 <HAL_FLASHEx_Erase+0xb4>)
 8011714:	2100      	movs	r1, #0
 8011716:	7619      	strb	r1, [r3, #24]
}
 8011718:	0010      	movs	r0, r2
 801171a:	bc04      	pop	{r2}
 801171c:	4690      	mov	r8, r2
 801171e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011720:	f7ff ff94 	bl	801164c <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011724:	4809      	ldr	r0, [pc, #36]	; (801174c <HAL_FLASHEx_Erase+0xb8>)
 8011726:	f7ff fefd 	bl	8011524 <FLASH_WaitForLastOperation>
 801172a:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 801172c:	4908      	ldr	r1, [pc, #32]	; (8011750 <HAL_FLASHEx_Erase+0xbc>)
 801172e:	690b      	ldr	r3, [r1, #16]
 8011730:	2004      	movs	r0, #4
 8011732:	4383      	bics	r3, r0
 8011734:	610b      	str	r3, [r1, #16]
 8011736:	e7ec      	b.n	8011712 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8011738:	4643      	mov	r3, r8
 801173a:	601c      	str	r4, [r3, #0]
            break;
 801173c:	e7e9      	b.n	8011712 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 801173e:	2201      	movs	r2, #1
 8011740:	e7e7      	b.n	8011712 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8011742:	2202      	movs	r2, #2
 8011744:	e7e8      	b.n	8011718 <HAL_FLASHEx_Erase+0x84>
 8011746:	46c0      	nop			; (mov r8, r8)
 8011748:	20006fc8 	.word	0x20006fc8
 801174c:	0000c350 	.word	0x0000c350
 8011750:	40022000 	.word	0x40022000

08011754 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011756:	46de      	mov	lr, fp
 8011758:	4657      	mov	r7, sl
 801175a:	464e      	mov	r6, r9
 801175c:	4645      	mov	r5, r8
 801175e:	b5e0      	push	{r5, r6, r7, lr}
 8011760:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011762:	680a      	ldr	r2, [r1, #0]
 8011764:	2a00      	cmp	r2, #0
 8011766:	d100      	bne.n	801176a <HAL_GPIO_Init+0x16>
 8011768:	e0bf      	b.n	80118ea <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 801176a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 801176c:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801176e:	2410      	movs	r4, #16
 8011770:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011772:	3c0d      	subs	r4, #13
 8011774:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011776:	2480      	movs	r4, #128	; 0x80
 8011778:	0564      	lsls	r4, r4, #21
 801177a:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801177c:	4c5e      	ldr	r4, [pc, #376]	; (80118f8 <HAL_GPIO_Init+0x1a4>)
 801177e:	1904      	adds	r4, r0, r4
 8011780:	1e65      	subs	r5, r4, #1
 8011782:	41ac      	sbcs	r4, r5
 8011784:	3404      	adds	r4, #4
 8011786:	46a1      	mov	r9, r4
 8011788:	e03b      	b.n	8011802 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 801178a:	08dc      	lsrs	r4, r3, #3
 801178c:	00a4      	lsls	r4, r4, #2
 801178e:	1904      	adds	r4, r0, r4
 8011790:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011792:	2507      	movs	r5, #7
 8011794:	401d      	ands	r5, r3
 8011796:	00ad      	lsls	r5, r5, #2
 8011798:	220f      	movs	r2, #15
 801179a:	40aa      	lsls	r2, r5
 801179c:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 801179e:	690a      	ldr	r2, [r1, #16]
 80117a0:	40aa      	lsls	r2, r5
 80117a2:	0015      	movs	r5, r2
 80117a4:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 80117a6:	6225      	str	r5, [r4, #32]
 80117a8:	e035      	b.n	8011816 <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80117aa:	2500      	movs	r5, #0
 80117ac:	465a      	mov	r2, fp
 80117ae:	4095      	lsls	r5, r2
 80117b0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80117b2:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80117b4:	4c51      	ldr	r4, [pc, #324]	; (80118fc <HAL_GPIO_Init+0x1a8>)
 80117b6:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80117b8:	9a01      	ldr	r2, [sp, #4]
 80117ba:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80117bc:	684a      	ldr	r2, [r1, #4]
 80117be:	03d2      	lsls	r2, r2, #15
 80117c0:	d500      	bpl.n	80117c4 <HAL_GPIO_Init+0x70>
 80117c2:	e086      	b.n	80118d2 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80117c4:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80117c6:	4f4d      	ldr	r7, [pc, #308]	; (80118fc <HAL_GPIO_Init+0x1a8>)
 80117c8:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 80117ca:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80117cc:	684a      	ldr	r2, [r1, #4]
 80117ce:	0392      	lsls	r2, r2, #14
 80117d0:	d500      	bpl.n	80117d4 <HAL_GPIO_Init+0x80>
 80117d2:	e081      	b.n	80118d8 <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80117d4:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80117d6:	4f49      	ldr	r7, [pc, #292]	; (80118fc <HAL_GPIO_Init+0x1a8>)
 80117d8:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80117da:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80117dc:	684a      	ldr	r2, [r1, #4]
 80117de:	02d2      	lsls	r2, r2, #11
 80117e0:	d47d      	bmi.n	80118de <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80117e2:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80117e4:	4f45      	ldr	r7, [pc, #276]	; (80118fc <HAL_GPIO_Init+0x1a8>)
 80117e6:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 80117e8:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80117ea:	684a      	ldr	r2, [r1, #4]
 80117ec:	0292      	lsls	r2, r2, #10
 80117ee:	d479      	bmi.n	80118e4 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80117f0:	0022      	movs	r2, r4
 80117f2:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80117f4:	4c41      	ldr	r4, [pc, #260]	; (80118fc <HAL_GPIO_Init+0x1a8>)
 80117f6:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 80117f8:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80117fa:	680a      	ldr	r2, [r1, #0]
 80117fc:	0014      	movs	r4, r2
 80117fe:	40dc      	lsrs	r4, r3
 8011800:	d073      	beq.n	80118ea <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011802:	0034      	movs	r4, r6
 8011804:	409c      	lsls	r4, r3
 8011806:	4022      	ands	r2, r4
 8011808:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 801180a:	d0f5      	beq.n	80117f8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 801180c:	684c      	ldr	r4, [r1, #4]
 801180e:	4642      	mov	r2, r8
 8011810:	4394      	bics	r4, r2
 8011812:	2c02      	cmp	r4, #2
 8011814:	d0b9      	beq.n	801178a <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 8011816:	6804      	ldr	r4, [r0, #0]
 8011818:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801181a:	4665      	mov	r5, ip
 801181c:	40bd      	lsls	r5, r7
 801181e:	43ed      	mvns	r5, r5
 8011820:	402c      	ands	r4, r5
 8011822:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011824:	684c      	ldr	r4, [r1, #4]
 8011826:	4662      	mov	r2, ip
 8011828:	4014      	ands	r4, r2
 801182a:	40bc      	lsls	r4, r7
 801182c:	465a      	mov	r2, fp
 801182e:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8011830:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011832:	684c      	ldr	r4, [r1, #4]
 8011834:	4642      	mov	r2, r8
 8011836:	4394      	bics	r4, r2
 8011838:	3c01      	subs	r4, #1
 801183a:	2c01      	cmp	r4, #1
 801183c:	d813      	bhi.n	8011866 <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 801183e:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011840:	402c      	ands	r4, r5
 8011842:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011844:	68cc      	ldr	r4, [r1, #12]
 8011846:	40bc      	lsls	r4, r7
 8011848:	465a      	mov	r2, fp
 801184a:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 801184c:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 801184e:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011850:	0032      	movs	r2, r6
 8011852:	409a      	lsls	r2, r3
 8011854:	4394      	bics	r4, r2
 8011856:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011858:	684a      	ldr	r2, [r1, #4]
 801185a:	0914      	lsrs	r4, r2, #4
 801185c:	4034      	ands	r4, r6
 801185e:	409c      	lsls	r4, r3
 8011860:	465a      	mov	r2, fp
 8011862:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8011864:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8011866:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011868:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801186a:	688d      	ldr	r5, [r1, #8]
 801186c:	40bd      	lsls	r5, r7
 801186e:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8011870:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011872:	684a      	ldr	r2, [r1, #4]
 8011874:	4654      	mov	r4, sl
 8011876:	4222      	tst	r2, r4
 8011878:	d0be      	beq.n	80117f8 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801187a:	4c21      	ldr	r4, [pc, #132]	; (8011900 <HAL_GPIO_Init+0x1ac>)
 801187c:	69a5      	ldr	r5, [r4, #24]
 801187e:	4335      	orrs	r5, r6
 8011880:	61a5      	str	r5, [r4, #24]
 8011882:	69a4      	ldr	r4, [r4, #24]
 8011884:	4034      	ands	r4, r6
 8011886:	9403      	str	r4, [sp, #12]
 8011888:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 801188a:	089c      	lsrs	r4, r3, #2
 801188c:	00a4      	lsls	r4, r4, #2
 801188e:	4a1d      	ldr	r2, [pc, #116]	; (8011904 <HAL_GPIO_Init+0x1b0>)
 8011890:	4693      	mov	fp, r2
 8011892:	445c      	add	r4, fp
 8011894:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011896:	4667      	mov	r7, ip
 8011898:	401f      	ands	r7, r3
 801189a:	00ba      	lsls	r2, r7, #2
 801189c:	4693      	mov	fp, r2
 801189e:	270f      	movs	r7, #15
 80118a0:	4097      	lsls	r7, r2
 80118a2:	43bd      	bics	r5, r7
 80118a4:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80118a6:	2590      	movs	r5, #144	; 0x90
 80118a8:	05ed      	lsls	r5, r5, #23
 80118aa:	42a8      	cmp	r0, r5
 80118ac:	d100      	bne.n	80118b0 <HAL_GPIO_Init+0x15c>
 80118ae:	e77c      	b.n	80117aa <HAL_GPIO_Init+0x56>
 80118b0:	4d15      	ldr	r5, [pc, #84]	; (8011908 <HAL_GPIO_Init+0x1b4>)
 80118b2:	42a8      	cmp	r0, r5
 80118b4:	d007      	beq.n	80118c6 <HAL_GPIO_Init+0x172>
 80118b6:	4d15      	ldr	r5, [pc, #84]	; (801190c <HAL_GPIO_Init+0x1b8>)
 80118b8:	42a8      	cmp	r0, r5
 80118ba:	d006      	beq.n	80118ca <HAL_GPIO_Init+0x176>
 80118bc:	4d14      	ldr	r5, [pc, #80]	; (8011910 <HAL_GPIO_Init+0x1bc>)
 80118be:	42a8      	cmp	r0, r5
 80118c0:	d005      	beq.n	80118ce <HAL_GPIO_Init+0x17a>
 80118c2:	464d      	mov	r5, r9
 80118c4:	e772      	b.n	80117ac <HAL_GPIO_Init+0x58>
 80118c6:	0035      	movs	r5, r6
 80118c8:	e770      	b.n	80117ac <HAL_GPIO_Init+0x58>
 80118ca:	2502      	movs	r5, #2
 80118cc:	e76e      	b.n	80117ac <HAL_GPIO_Init+0x58>
 80118ce:	4665      	mov	r5, ip
 80118d0:	e76c      	b.n	80117ac <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 80118d2:	9a01      	ldr	r2, [sp, #4]
 80118d4:	4314      	orrs	r4, r2
 80118d6:	e776      	b.n	80117c6 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 80118d8:	9a01      	ldr	r2, [sp, #4]
 80118da:	4314      	orrs	r4, r2
 80118dc:	e77b      	b.n	80117d6 <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 80118de:	9a01      	ldr	r2, [sp, #4]
 80118e0:	4314      	orrs	r4, r2
 80118e2:	e77f      	b.n	80117e4 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 80118e4:	9a01      	ldr	r2, [sp, #4]
 80118e6:	4322      	orrs	r2, r4
 80118e8:	e784      	b.n	80117f4 <HAL_GPIO_Init+0xa0>
  } 
}
 80118ea:	b005      	add	sp, #20
 80118ec:	bc3c      	pop	{r2, r3, r4, r5}
 80118ee:	4690      	mov	r8, r2
 80118f0:	4699      	mov	r9, r3
 80118f2:	46a2      	mov	sl, r4
 80118f4:	46ab      	mov	fp, r5
 80118f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80118f8:	b7fff000 	.word	0xb7fff000
 80118fc:	40010400 	.word	0x40010400
 8011900:	40021000 	.word	0x40021000
 8011904:	40010000 	.word	0x40010000
 8011908:	48000400 	.word	0x48000400
 801190c:	48000800 	.word	0x48000800
 8011910:	48000c00 	.word	0x48000c00

08011914 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8011914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011916:	46de      	mov	lr, fp
 8011918:	4657      	mov	r7, sl
 801191a:	464e      	mov	r6, r9
 801191c:	4645      	mov	r5, r8
 801191e:	b5e0      	push	{r5, r6, r7, lr}
 8011920:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8011922:	2900      	cmp	r1, #0
 8011924:	d071      	beq.n	8011a0a <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 8011926:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 8011928:	2201      	movs	r2, #1
 801192a:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801192c:	3202      	adds	r2, #2
 801192e:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011930:	3204      	adds	r2, #4
 8011932:	4693      	mov	fp, r2
 8011934:	3208      	adds	r2, #8
 8011936:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 8011938:	4a37      	ldr	r2, [pc, #220]	; (8011a18 <HAL_GPIO_DeInit+0x104>)
 801193a:	1882      	adds	r2, r0, r2
 801193c:	1e54      	subs	r4, r2, #1
 801193e:	41a2      	sbcs	r2, r4
 8011940:	3204      	adds	r2, #4
 8011942:	9201      	str	r2, [sp, #4]
 8011944:	9100      	str	r1, [sp, #0]
 8011946:	e009      	b.n	801195c <HAL_GPIO_DeInit+0x48>
 8011948:	2100      	movs	r1, #0
 801194a:	4689      	mov	r9, r1
 801194c:	4649      	mov	r1, r9
 801194e:	40a9      	lsls	r1, r5
 8011950:	42b1      	cmp	r1, r6
 8011952:	d048      	beq.n	80119e6 <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8011954:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 8011956:	9a00      	ldr	r2, [sp, #0]
 8011958:	40da      	lsrs	r2, r3
 801195a:	d056      	beq.n	8011a0a <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 801195c:	4662      	mov	r2, ip
 801195e:	409a      	lsls	r2, r3
 8011960:	9900      	ldr	r1, [sp, #0]
 8011962:	400a      	ands	r2, r1
    if (iocurrent)
 8011964:	d0f6      	beq.n	8011954 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8011966:	6804      	ldr	r4, [r0, #0]
 8011968:	005d      	lsls	r5, r3, #1
 801196a:	4646      	mov	r6, r8
 801196c:	40ae      	lsls	r6, r5
 801196e:	43f5      	mvns	r5, r6
 8011970:	402c      	ands	r4, r5
 8011972:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8011974:	08dc      	lsrs	r4, r3, #3
 8011976:	00a4      	lsls	r4, r4, #2
 8011978:	1904      	adds	r4, r0, r4
 801197a:	6a26      	ldr	r6, [r4, #32]
 801197c:	465f      	mov	r7, fp
 801197e:	401f      	ands	r7, r3
 8011980:	00bf      	lsls	r7, r7, #2
 8011982:	4651      	mov	r1, sl
 8011984:	40b9      	lsls	r1, r7
 8011986:	438e      	bics	r6, r1
 8011988:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801198a:	6884      	ldr	r4, [r0, #8]
 801198c:	402c      	ands	r4, r5
 801198e:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8011990:	6844      	ldr	r4, [r0, #4]
 8011992:	4666      	mov	r6, ip
 8011994:	409e      	lsls	r6, r3
 8011996:	43b4      	bics	r4, r6
 8011998:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801199a:	68c4      	ldr	r4, [r0, #12]
 801199c:	4025      	ands	r5, r4
 801199e:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 80119a0:	089c      	lsrs	r4, r3, #2
 80119a2:	00a4      	lsls	r4, r4, #2
 80119a4:	491d      	ldr	r1, [pc, #116]	; (8011a1c <HAL_GPIO_DeInit+0x108>)
 80119a6:	4689      	mov	r9, r1
 80119a8:	444c      	add	r4, r9
 80119aa:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80119ac:	4645      	mov	r5, r8
 80119ae:	401d      	ands	r5, r3
 80119b0:	00ad      	lsls	r5, r5, #2
 80119b2:	4657      	mov	r7, sl
 80119b4:	40af      	lsls	r7, r5
 80119b6:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80119b8:	2190      	movs	r1, #144	; 0x90
 80119ba:	05c9      	lsls	r1, r1, #23
 80119bc:	4288      	cmp	r0, r1
 80119be:	d0c3      	beq.n	8011948 <HAL_GPIO_DeInit+0x34>
 80119c0:	4917      	ldr	r1, [pc, #92]	; (8011a20 <HAL_GPIO_DeInit+0x10c>)
 80119c2:	4288      	cmp	r0, r1
 80119c4:	d008      	beq.n	80119d8 <HAL_GPIO_DeInit+0xc4>
 80119c6:	4917      	ldr	r1, [pc, #92]	; (8011a24 <HAL_GPIO_DeInit+0x110>)
 80119c8:	4288      	cmp	r0, r1
 80119ca:	d007      	beq.n	80119dc <HAL_GPIO_DeInit+0xc8>
 80119cc:	4916      	ldr	r1, [pc, #88]	; (8011a28 <HAL_GPIO_DeInit+0x114>)
 80119ce:	4288      	cmp	r0, r1
 80119d0:	d007      	beq.n	80119e2 <HAL_GPIO_DeInit+0xce>
 80119d2:	9901      	ldr	r1, [sp, #4]
 80119d4:	4689      	mov	r9, r1
 80119d6:	e7b9      	b.n	801194c <HAL_GPIO_DeInit+0x38>
 80119d8:	46e1      	mov	r9, ip
 80119da:	e7b7      	b.n	801194c <HAL_GPIO_DeInit+0x38>
 80119dc:	2102      	movs	r1, #2
 80119de:	4689      	mov	r9, r1
 80119e0:	e7b4      	b.n	801194c <HAL_GPIO_DeInit+0x38>
 80119e2:	46c1      	mov	r9, r8
 80119e4:	e7b2      	b.n	801194c <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80119e6:	68a5      	ldr	r5, [r4, #8]
 80119e8:	43bd      	bics	r5, r7
 80119ea:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80119ec:	4c0f      	ldr	r4, [pc, #60]	; (8011a2c <HAL_GPIO_DeInit+0x118>)
 80119ee:	6825      	ldr	r5, [r4, #0]
 80119f0:	43d2      	mvns	r2, r2
 80119f2:	4015      	ands	r5, r2
 80119f4:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80119f6:	6865      	ldr	r5, [r4, #4]
 80119f8:	4015      	ands	r5, r2
 80119fa:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80119fc:	68a5      	ldr	r5, [r4, #8]
 80119fe:	4015      	ands	r5, r2
 8011a00:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8011a02:	68e5      	ldr	r5, [r4, #12]
 8011a04:	402a      	ands	r2, r5
 8011a06:	60e2      	str	r2, [r4, #12]
 8011a08:	e7a4      	b.n	8011954 <HAL_GPIO_DeInit+0x40>
  }
}
 8011a0a:	b003      	add	sp, #12
 8011a0c:	bc3c      	pop	{r2, r3, r4, r5}
 8011a0e:	4690      	mov	r8, r2
 8011a10:	4699      	mov	r9, r3
 8011a12:	46a2      	mov	sl, r4
 8011a14:	46ab      	mov	fp, r5
 8011a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a18:	b7fff000 	.word	0xb7fff000
 8011a1c:	40010000 	.word	0x40010000
 8011a20:	48000400 	.word	0x48000400
 8011a24:	48000800 	.word	0x48000800
 8011a28:	48000c00 	.word	0x48000c00
 8011a2c:	40010400 	.word	0x40010400

08011a30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011a30:	6900      	ldr	r0, [r0, #16]
 8011a32:	4008      	ands	r0, r1
 8011a34:	1e41      	subs	r1, r0, #1
 8011a36:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011a38:	b2c0      	uxtb	r0, r0
  }
 8011a3a:	4770      	bx	lr

08011a3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011a3c:	2a00      	cmp	r2, #0
 8011a3e:	d101      	bne.n	8011a44 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011a40:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8011a42:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011a44:	6181      	str	r1, [r0, #24]
 8011a46:	e7fc      	b.n	8011a42 <HAL_GPIO_WritePin+0x6>

08011a48 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011a48:	6943      	ldr	r3, [r0, #20]
 8011a4a:	4059      	eors	r1, r3
 8011a4c:	6141      	str	r1, [r0, #20]
}
 8011a4e:	4770      	bx	lr

08011a50 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8011a50:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8011a52:	6804      	ldr	r4, [r0, #0]
 8011a54:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8011a56:	4d06      	ldr	r5, [pc, #24]	; (8011a70 <I2C_TransferConfig+0x20>)
 8011a58:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8011a5a:	0412      	lsls	r2, r2, #16
 8011a5c:	9d03      	ldr	r5, [sp, #12]
 8011a5e:	432b      	orrs	r3, r5
 8011a60:	431a      	orrs	r2, r3
 8011a62:	0589      	lsls	r1, r1, #22
 8011a64:	0d89      	lsrs	r1, r1, #22
 8011a66:	430a      	orrs	r2, r1
 8011a68:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8011a6a:	6062      	str	r2, [r4, #4]
}  
 8011a6c:	bd30      	pop	{r4, r5, pc}
 8011a6e:	46c0      	nop			; (mov r8, r8)
 8011a70:	fc009800 	.word	0xfc009800

08011a74 <I2C_IsAcknowledgeFailed>:
{
 8011a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a76:	0007      	movs	r7, r0
 8011a78:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8011a7a:	f7fe fbbd 	bl	80101f8 <HAL_GetTick>
 8011a7e:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8011a84:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011a86:	06d2      	lsls	r2, r2, #27
 8011a88:	d53c      	bpl.n	8011b04 <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8011a8a:	2235      	movs	r2, #53	; 0x35
 8011a8c:	5cba      	ldrb	r2, [r7, r2]
 8011a8e:	2a12      	cmp	r2, #18
 8011a90:	d007      	beq.n	8011aa2 <I2C_IsAcknowledgeFailed+0x2e>
 8011a92:	2235      	movs	r2, #53	; 0x35
 8011a94:	5cba      	ldrb	r2, [r7, r2]
 8011a96:	2a52      	cmp	r2, #82	; 0x52
 8011a98:	d003      	beq.n	8011aa2 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8011a9a:	2235      	movs	r2, #53	; 0x35
 8011a9c:	5cba      	ldrb	r2, [r7, r2]
 8011a9e:	2a62      	cmp	r2, #98	; 0x62
 8011aa0:	d107      	bne.n	8011ab2 <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8011aa2:	685a      	ldr	r2, [r3, #4]
 8011aa4:	0192      	lsls	r2, r2, #6
 8011aa6:	d404      	bmi.n	8011ab2 <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011aa8:	6859      	ldr	r1, [r3, #4]
 8011aaa:	2280      	movs	r2, #128	; 0x80
 8011aac:	01d2      	lsls	r2, r2, #7
 8011aae:	430a      	orrs	r2, r1
 8011ab0:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011ab2:	2620      	movs	r6, #32
 8011ab4:	683a      	ldr	r2, [r7, #0]
 8011ab6:	6993      	ldr	r3, [r2, #24]
 8011ab8:	421e      	tst	r6, r3
 8011aba:	d110      	bne.n	8011ade <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 8011abc:	1c63      	adds	r3, r4, #1
 8011abe:	d0fa      	beq.n	8011ab6 <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011ac0:	2c00      	cmp	r4, #0
 8011ac2:	d004      	beq.n	8011ace <I2C_IsAcknowledgeFailed+0x5a>
 8011ac4:	f7fe fb98 	bl	80101f8 <HAL_GetTick>
 8011ac8:	1b40      	subs	r0, r0, r5
 8011aca:	42a0      	cmp	r0, r4
 8011acc:	d9f2      	bls.n	8011ab4 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 8011ace:	2335      	movs	r3, #53	; 0x35
 8011ad0:	2201      	movs	r2, #1
 8011ad2:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8011ad4:	3b01      	subs	r3, #1
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011ada:	2003      	movs	r0, #3
 8011adc:	e012      	b.n	8011b04 <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011ade:	2310      	movs	r3, #16
 8011ae0:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	2220      	movs	r2, #32
 8011ae6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011ae8:	683a      	ldr	r2, [r7, #0]
 8011aea:	6853      	ldr	r3, [r2, #4]
 8011aec:	4906      	ldr	r1, [pc, #24]	; (8011b08 <I2C_IsAcknowledgeFailed+0x94>)
 8011aee:	400b      	ands	r3, r1
 8011af0:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011af2:	2304      	movs	r3, #4
 8011af4:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 8011af6:	3331      	adds	r3, #49	; 0x31
 8011af8:	2201      	movs	r2, #1
 8011afa:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8011afc:	3b01      	subs	r3, #1
 8011afe:	2200      	movs	r2, #0
 8011b00:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 8011b02:	2001      	movs	r0, #1
}
 8011b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b06:	46c0      	nop			; (mov r8, r8)
 8011b08:	fe00e800 	.word	0xfe00e800

08011b0c <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8011b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b0e:	0004      	movs	r4, r0
 8011b10:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8011b12:	f7fe fb71 	bl	80101f8 <HAL_GetTick>
 8011b16:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011b18:	2702      	movs	r7, #2
 8011b1a:	6823      	ldr	r3, [r4, #0]
 8011b1c:	699b      	ldr	r3, [r3, #24]
 8011b1e:	421f      	tst	r7, r3
 8011b20:	d11a      	bne.n	8011b58 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011b22:	0029      	movs	r1, r5
 8011b24:	0020      	movs	r0, r4
 8011b26:	f7ff ffa5 	bl	8011a74 <I2C_IsAcknowledgeFailed>
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d116      	bne.n	8011b5c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8011b2e:	1c6b      	adds	r3, r5, #1
 8011b30:	d0f3      	beq.n	8011b1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011b32:	2d00      	cmp	r5, #0
 8011b34:	d004      	beq.n	8011b40 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 8011b36:	f7fe fb5f 	bl	80101f8 <HAL_GetTick>
 8011b3a:	1b80      	subs	r0, r0, r6
 8011b3c:	42a8      	cmp	r0, r5
 8011b3e:	d9ec      	bls.n	8011b1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011b40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011b42:	2220      	movs	r2, #32
 8011b44:	4313      	orrs	r3, r2
 8011b46:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8011b48:	2335      	movs	r3, #53	; 0x35
 8011b4a:	3a1f      	subs	r2, #31
 8011b4c:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8011b4e:	3b01      	subs	r3, #1
 8011b50:	2200      	movs	r2, #0
 8011b52:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011b54:	2003      	movs	r0, #3
 8011b56:	e000      	b.n	8011b5a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 8011b58:	2000      	movs	r0, #0
}
 8011b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011b5c:	2001      	movs	r0, #1
 8011b5e:	e7fc      	b.n	8011b5a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08011b60 <I2C_WaitOnFlagUntilTimeout>:
{  
 8011b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b62:	46c6      	mov	lr, r8
 8011b64:	b500      	push	{lr}
 8011b66:	0006      	movs	r6, r0
 8011b68:	000c      	movs	r4, r1
 8011b6a:	0017      	movs	r7, r2
 8011b6c:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8011b6e:	f7fe fb43 	bl	80101f8 <HAL_GetTick>
 8011b72:	4680      	mov	r8, r0
  if(Status == RESET)
 8011b74:	2f00      	cmp	r7, #0
 8011b76:	d118      	bne.n	8011baa <I2C_WaitOnFlagUntilTimeout+0x4a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011b78:	03e4      	lsls	r4, r4, #15
 8011b7a:	0be4      	lsrs	r4, r4, #15
 8011b7c:	6832      	ldr	r2, [r6, #0]
 8011b7e:	6993      	ldr	r3, [r2, #24]
 8011b80:	0021      	movs	r1, r4
 8011b82:	4399      	bics	r1, r3
 8011b84:	d02a      	beq.n	8011bdc <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 8011b86:	1c6b      	adds	r3, r5, #1
 8011b88:	d0f9      	beq.n	8011b7e <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011b8a:	2d00      	cmp	r5, #0
 8011b8c:	d005      	beq.n	8011b9a <I2C_WaitOnFlagUntilTimeout+0x3a>
 8011b8e:	f7fe fb33 	bl	80101f8 <HAL_GetTick>
 8011b92:	4643      	mov	r3, r8
 8011b94:	1ac0      	subs	r0, r0, r3
 8011b96:	42a8      	cmp	r0, r5
 8011b98:	d9f0      	bls.n	8011b7c <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 8011b9a:	2335      	movs	r3, #53	; 0x35
 8011b9c:	2201      	movs	r2, #1
 8011b9e:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8011ba0:	3b01      	subs	r3, #1
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011ba6:	2003      	movs	r0, #3
 8011ba8:	e019      	b.n	8011bde <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8011baa:	03e4      	lsls	r4, r4, #15
 8011bac:	0be4      	lsrs	r4, r4, #15
 8011bae:	6832      	ldr	r2, [r6, #0]
 8011bb0:	6993      	ldr	r3, [r2, #24]
 8011bb2:	0021      	movs	r1, r4
 8011bb4:	4399      	bics	r1, r3
 8011bb6:	d115      	bne.n	8011be4 <I2C_WaitOnFlagUntilTimeout+0x84>
      if(Timeout != HAL_MAX_DELAY)
 8011bb8:	1c6b      	adds	r3, r5, #1
 8011bba:	d0f9      	beq.n	8011bb0 <I2C_WaitOnFlagUntilTimeout+0x50>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011bbc:	2d00      	cmp	r5, #0
 8011bbe:	d005      	beq.n	8011bcc <I2C_WaitOnFlagUntilTimeout+0x6c>
 8011bc0:	f7fe fb1a 	bl	80101f8 <HAL_GetTick>
 8011bc4:	4643      	mov	r3, r8
 8011bc6:	1ac0      	subs	r0, r0, r3
 8011bc8:	42a8      	cmp	r0, r5
 8011bca:	d9f0      	bls.n	8011bae <I2C_WaitOnFlagUntilTimeout+0x4e>
          hi2c->State= HAL_I2C_STATE_READY;
 8011bcc:	2335      	movs	r3, #53	; 0x35
 8011bce:	2201      	movs	r2, #1
 8011bd0:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8011bd2:	3b01      	subs	r3, #1
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8011bd8:	2003      	movs	r0, #3
 8011bda:	e000      	b.n	8011bde <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 8011bdc:	2000      	movs	r0, #0
}
 8011bde:	bc04      	pop	{r2}
 8011be0:	4690      	mov	r8, r2
 8011be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 8011be4:	2000      	movs	r0, #0
 8011be6:	e7fa      	b.n	8011bde <I2C_WaitOnFlagUntilTimeout+0x7e>

08011be8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 8011be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011bea:	0005      	movs	r5, r0
 8011bec:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8011bee:	f7fe fb03 	bl	80101f8 <HAL_GetTick>
 8011bf2:	0007      	movs	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011bf4:	2620      	movs	r6, #32
 8011bf6:	682b      	ldr	r3, [r5, #0]
 8011bf8:	699b      	ldr	r3, [r3, #24]
 8011bfa:	421e      	tst	r6, r3
 8011bfc:	d118      	bne.n	8011c30 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011bfe:	0021      	movs	r1, r4
 8011c00:	0028      	movs	r0, r5
 8011c02:	f7ff ff37 	bl	8011a74 <I2C_IsAcknowledgeFailed>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	d114      	bne.n	8011c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011c0a:	2c00      	cmp	r4, #0
 8011c0c:	d004      	beq.n	8011c18 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 8011c0e:	f7fe faf3 	bl	80101f8 <HAL_GetTick>
 8011c12:	1bc0      	subs	r0, r0, r7
 8011c14:	42a0      	cmp	r0, r4
 8011c16:	d9ee      	bls.n	8011bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011c18:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011c1a:	2220      	movs	r2, #32
 8011c1c:	4313      	orrs	r3, r2
 8011c1e:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8011c20:	2335      	movs	r3, #53	; 0x35
 8011c22:	3a1f      	subs	r2, #31
 8011c24:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 8011c26:	3b01      	subs	r3, #1
 8011c28:	2200      	movs	r2, #0
 8011c2a:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 8011c2c:	2003      	movs	r0, #3
}
 8011c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8011c30:	2000      	movs	r0, #0
 8011c32:	e7fc      	b.n	8011c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8011c34:	2001      	movs	r0, #1
 8011c36:	e7fa      	b.n	8011c2e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08011c38 <HAL_I2C_MspInit>:
}
 8011c38:	4770      	bx	lr
	...

08011c3c <HAL_I2C_Init>:
{ 
 8011c3c:	b510      	push	{r4, lr}
 8011c3e:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 8011c40:	d051      	beq.n	8011ce6 <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8011c42:	2335      	movs	r3, #53	; 0x35
 8011c44:	5cc3      	ldrb	r3, [r0, r3]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d03c      	beq.n	8011cc4 <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8011c4a:	2335      	movs	r3, #53	; 0x35
 8011c4c:	2202      	movs	r2, #2
 8011c4e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8011c50:	6822      	ldr	r2, [r4, #0]
 8011c52:	6813      	ldr	r3, [r2, #0]
 8011c54:	2101      	movs	r1, #1
 8011c56:	438b      	bics	r3, r1
 8011c58:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8011c5a:	6822      	ldr	r2, [r4, #0]
 8011c5c:	4b23      	ldr	r3, [pc, #140]	; (8011cec <HAL_I2C_Init+0xb0>)
 8011c5e:	6861      	ldr	r1, [r4, #4]
 8011c60:	400b      	ands	r3, r1
 8011c62:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8011c64:	6822      	ldr	r2, [r4, #0]
 8011c66:	6893      	ldr	r3, [r2, #8]
 8011c68:	4921      	ldr	r1, [pc, #132]	; (8011cf0 <HAL_I2C_Init+0xb4>)
 8011c6a:	400b      	ands	r3, r1
 8011c6c:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8011c6e:	68a3      	ldr	r3, [r4, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d007      	beq.n	8011c84 <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8011c74:	68e2      	ldr	r2, [r4, #12]
 8011c76:	2a01      	cmp	r2, #1
 8011c78:	d02a      	beq.n	8011cd0 <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8011c7a:	6821      	ldr	r1, [r4, #0]
 8011c7c:	2284      	movs	r2, #132	; 0x84
 8011c7e:	0212      	lsls	r2, r2, #8
 8011c80:	4313      	orrs	r3, r2
 8011c82:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8011c84:	68e3      	ldr	r3, [r4, #12]
 8011c86:	2b02      	cmp	r3, #2
 8011c88:	d028      	beq.n	8011cdc <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8011c8a:	6822      	ldr	r2, [r4, #0]
 8011c8c:	6851      	ldr	r1, [r2, #4]
 8011c8e:	4b19      	ldr	r3, [pc, #100]	; (8011cf4 <HAL_I2C_Init+0xb8>)
 8011c90:	430b      	orrs	r3, r1
 8011c92:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8011c94:	6821      	ldr	r1, [r4, #0]
 8011c96:	6923      	ldr	r3, [r4, #16]
 8011c98:	6962      	ldr	r2, [r4, #20]
 8011c9a:	4313      	orrs	r3, r2
 8011c9c:	69a2      	ldr	r2, [r4, #24]
 8011c9e:	0212      	lsls	r2, r2, #8
 8011ca0:	4313      	orrs	r3, r2
 8011ca2:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8011ca4:	6822      	ldr	r2, [r4, #0]
 8011ca6:	69e3      	ldr	r3, [r4, #28]
 8011ca8:	6a21      	ldr	r1, [r4, #32]
 8011caa:	430b      	orrs	r3, r1
 8011cac:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8011cae:	6821      	ldr	r1, [r4, #0]
 8011cb0:	680b      	ldr	r3, [r1, #0]
 8011cb2:	2201      	movs	r2, #1
 8011cb4:	4313      	orrs	r3, r2
 8011cb6:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8011cbc:	3335      	adds	r3, #53	; 0x35
 8011cbe:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8011cc0:	2000      	movs	r0, #0
}
 8011cc2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8011cc4:	3334      	adds	r3, #52	; 0x34
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8011cca:	f7ff ffb5 	bl	8011c38 <HAL_I2C_MspInit>
 8011cce:	e7bc      	b.n	8011c4a <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8011cd0:	6821      	ldr	r1, [r4, #0]
 8011cd2:	2280      	movs	r2, #128	; 0x80
 8011cd4:	0212      	lsls	r2, r2, #8
 8011cd6:	4313      	orrs	r3, r2
 8011cd8:	608b      	str	r3, [r1, #8]
 8011cda:	e7d3      	b.n	8011c84 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	2280      	movs	r2, #128	; 0x80
 8011ce0:	0112      	lsls	r2, r2, #4
 8011ce2:	605a      	str	r2, [r3, #4]
 8011ce4:	e7d1      	b.n	8011c8a <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 8011ce6:	2001      	movs	r0, #1
 8011ce8:	e7eb      	b.n	8011cc2 <HAL_I2C_Init+0x86>
 8011cea:	46c0      	nop			; (mov r8, r8)
 8011cec:	f0ffffff 	.word	0xf0ffffff
 8011cf0:	ffff7fff 	.word	0xffff7fff
 8011cf4:	02008000 	.word	0x02008000

08011cf8 <HAL_I2C_Master_Transmit>:
{
 8011cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cfa:	b085      	sub	sp, #20
 8011cfc:	0007      	movs	r7, r0
 8011cfe:	9103      	str	r1, [sp, #12]
 8011d00:	0016      	movs	r6, r2
 8011d02:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011d04:	2335      	movs	r3, #53	; 0x35
 8011d06:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 8011d08:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d000      	beq.n	8011d10 <HAL_I2C_Master_Transmit+0x18>
 8011d0e:	e08c      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
    if((pData == NULL ) || (Size == 0)) 
 8011d10:	2a00      	cmp	r2, #0
 8011d12:	d100      	bne.n	8011d16 <HAL_I2C_Master_Transmit+0x1e>
 8011d14:	e088      	b.n	8011e28 <HAL_I2C_Master_Transmit+0x130>
      return  HAL_ERROR;                                    
 8011d16:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 8011d18:	2c00      	cmp	r4, #0
 8011d1a:	d100      	bne.n	8011d1e <HAL_I2C_Master_Transmit+0x26>
 8011d1c:	e085      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	699b      	ldr	r3, [r3, #24]
 8011d22:	041b      	lsls	r3, r3, #16
 8011d24:	d500      	bpl.n	8011d28 <HAL_I2C_Master_Transmit+0x30>
 8011d26:	e082      	b.n	8011e2e <HAL_I2C_Master_Transmit+0x136>
    __HAL_LOCK(hi2c);
 8011d28:	2334      	movs	r3, #52	; 0x34
 8011d2a:	5cfb      	ldrb	r3, [r7, r3]
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d100      	bne.n	8011d32 <HAL_I2C_Master_Transmit+0x3a>
 8011d30:	e07f      	b.n	8011e32 <HAL_I2C_Master_Transmit+0x13a>
 8011d32:	2334      	movs	r3, #52	; 0x34
 8011d34:	2201      	movs	r2, #1
 8011d36:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_TX;
 8011d38:	3301      	adds	r3, #1
 8011d3a:	3211      	adds	r2, #17
 8011d3c:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 8011d42:	2cff      	cmp	r4, #255	; 0xff
 8011d44:	d90a      	bls.n	8011d5c <HAL_I2C_Master_Transmit+0x64>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011d46:	3380      	adds	r3, #128	; 0x80
 8011d48:	2280      	movs	r2, #128	; 0x80
 8011d4a:	0192      	lsls	r2, r2, #6
 8011d4c:	9200      	str	r2, [sp, #0]
 8011d4e:	045b      	lsls	r3, r3, #17
 8011d50:	22ff      	movs	r2, #255	; 0xff
 8011d52:	0038      	movs	r0, r7
 8011d54:	f7ff fe7c 	bl	8011a50 <I2C_TransferConfig>
      sizetmp = 255;
 8011d58:	25ff      	movs	r5, #255	; 0xff
 8011d5a:	e037      	b.n	8011dcc <HAL_I2C_Master_Transmit+0xd4>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8011d5c:	2380      	movs	r3, #128	; 0x80
 8011d5e:	b2e2      	uxtb	r2, r4
 8011d60:	2180      	movs	r1, #128	; 0x80
 8011d62:	0189      	lsls	r1, r1, #6
 8011d64:	9100      	str	r1, [sp, #0]
 8011d66:	049b      	lsls	r3, r3, #18
 8011d68:	9903      	ldr	r1, [sp, #12]
 8011d6a:	0038      	movs	r0, r7
 8011d6c:	f7ff fe70 	bl	8011a50 <I2C_TransferConfig>
      sizetmp = Size;
 8011d70:	0025      	movs	r5, r4
 8011d72:	e02b      	b.n	8011dcc <HAL_I2C_Master_Transmit+0xd4>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011d74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
          return HAL_TIMEOUT;
 8011d76:	3804      	subs	r0, #4
 8011d78:	4243      	negs	r3, r0
 8011d7a:	4158      	adcs	r0, r3
 8011d7c:	4240      	negs	r0, r0
 8011d7e:	2301      	movs	r3, #1
 8011d80:	4398      	bics	r0, r3
 8011d82:	3003      	adds	r0, #3
 8011d84:	e051      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d88:	2200      	movs	r2, #0
 8011d8a:	2180      	movs	r1, #128	; 0x80
 8011d8c:	0038      	movs	r0, r7
 8011d8e:	f7ff fee7 	bl	8011b60 <I2C_WaitOnFlagUntilTimeout>
 8011d92:	2800      	cmp	r0, #0
 8011d94:	d14f      	bne.n	8011e36 <HAL_I2C_Master_Transmit+0x13e>
        if(Size > 255)
 8011d96:	2cff      	cmp	r4, #255	; 0xff
 8011d98:	d90a      	bls.n	8011db0 <HAL_I2C_Master_Transmit+0xb8>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	9300      	str	r3, [sp, #0]
 8011d9e:	2380      	movs	r3, #128	; 0x80
 8011da0:	045b      	lsls	r3, r3, #17
 8011da2:	22ff      	movs	r2, #255	; 0xff
 8011da4:	9903      	ldr	r1, [sp, #12]
 8011da6:	0038      	movs	r0, r7
 8011da8:	f7ff fe52 	bl	8011a50 <I2C_TransferConfig>
          sizetmp = 255;
 8011dac:	35ff      	adds	r5, #255	; 0xff
 8011dae:	e00c      	b.n	8011dca <HAL_I2C_Master_Transmit+0xd2>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011db0:	b2e2      	uxtb	r2, r4
 8011db2:	2300      	movs	r3, #0
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	2380      	movs	r3, #128	; 0x80
 8011db8:	049b      	lsls	r3, r3, #18
 8011dba:	9903      	ldr	r1, [sp, #12]
 8011dbc:	0038      	movs	r0, r7
 8011dbe:	f7ff fe47 	bl	8011a50 <I2C_TransferConfig>
          sizetmp = Size;
 8011dc2:	0025      	movs	r5, r4
 8011dc4:	e001      	b.n	8011dca <HAL_I2C_Master_Transmit+0xd2>
    }while(Size > 0);
 8011dc6:	2c00      	cmp	r4, #0
 8011dc8:	d010      	beq.n	8011dec <HAL_I2C_Master_Transmit+0xf4>
 8011dca:	3601      	adds	r6, #1
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011dcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011dce:	0038      	movs	r0, r7
 8011dd0:	f7ff fe9c 	bl	8011b0c <I2C_WaitOnTXISFlagUntilTimeout>
 8011dd4:	2800      	cmp	r0, #0
 8011dd6:	d1cd      	bne.n	8011d74 <HAL_I2C_Master_Transmit+0x7c>
      hi2c->Instance->TXDR = (*pData++);
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	7832      	ldrb	r2, [r6, #0]
 8011ddc:	629a      	str	r2, [r3, #40]	; 0x28
      sizetmp--;
 8011dde:	3d01      	subs	r5, #1
      Size--;
 8011de0:	3c01      	subs	r4, #1
 8011de2:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 8011de4:	2d00      	cmp	r5, #0
 8011de6:	d1ee      	bne.n	8011dc6 <HAL_I2C_Master_Transmit+0xce>
 8011de8:	2c00      	cmp	r4, #0
 8011dea:	d1cc      	bne.n	8011d86 <HAL_I2C_Master_Transmit+0x8e>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011dec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011dee:	0038      	movs	r0, r7
 8011df0:	f7ff fefa 	bl	8011be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d008      	beq.n	8011e0a <HAL_I2C_Master_Transmit+0x112>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011df8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 8011dfa:	3804      	subs	r0, #4
 8011dfc:	4243      	negs	r3, r0
 8011dfe:	4158      	adcs	r0, r3
 8011e00:	4240      	negs	r0, r0
 8011e02:	2301      	movs	r3, #1
 8011e04:	4398      	bics	r0, r3
 8011e06:	3003      	adds	r0, #3
 8011e08:	e00f      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	2220      	movs	r2, #32
 8011e0e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011e10:	683a      	ldr	r2, [r7, #0]
 8011e12:	6853      	ldr	r3, [r2, #4]
 8011e14:	4909      	ldr	r1, [pc, #36]	; (8011e3c <HAL_I2C_Master_Transmit+0x144>)
 8011e16:	400b      	ands	r3, r1
 8011e18:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8011e1a:	2335      	movs	r3, #53	; 0x35
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8011e20:	3b01      	subs	r3, #1
 8011e22:	2200      	movs	r2, #0
 8011e24:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 8011e26:	e000      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
      return  HAL_ERROR;                                    
 8011e28:	2001      	movs	r0, #1
}
 8011e2a:	b005      	add	sp, #20
 8011e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8011e2e:	2002      	movs	r0, #2
 8011e30:	e7fb      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
    __HAL_LOCK(hi2c);
 8011e32:	2002      	movs	r0, #2
 8011e34:	e7f9      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
          return HAL_TIMEOUT;
 8011e36:	2003      	movs	r0, #3
 8011e38:	e7f7      	b.n	8011e2a <HAL_I2C_Master_Transmit+0x132>
 8011e3a:	46c0      	nop			; (mov r8, r8)
 8011e3c:	fe00e800 	.word	0xfe00e800

08011e40 <HAL_I2C_Master_Receive>:
{
 8011e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e42:	b085      	sub	sp, #20
 8011e44:	0007      	movs	r7, r0
 8011e46:	9103      	str	r1, [sp, #12]
 8011e48:	0016      	movs	r6, r2
 8011e4a:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011e4c:	2335      	movs	r3, #53	; 0x35
 8011e4e:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 8011e50:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d000      	beq.n	8011e58 <HAL_I2C_Master_Receive+0x18>
 8011e56:	e084      	b.n	8011f62 <HAL_I2C_Master_Receive+0x122>
    if((pData == NULL ) || (Size == 0)) 
 8011e58:	2a00      	cmp	r2, #0
 8011e5a:	d100      	bne.n	8011e5e <HAL_I2C_Master_Receive+0x1e>
 8011e5c:	e080      	b.n	8011f60 <HAL_I2C_Master_Receive+0x120>
      return  HAL_ERROR;                                    
 8011e5e:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 8011e60:	2c00      	cmp	r4, #0
 8011e62:	d07e      	beq.n	8011f62 <HAL_I2C_Master_Receive+0x122>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	699b      	ldr	r3, [r3, #24]
 8011e68:	041b      	lsls	r3, r3, #16
 8011e6a:	d500      	bpl.n	8011e6e <HAL_I2C_Master_Receive+0x2e>
 8011e6c:	e07b      	b.n	8011f66 <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8011e6e:	2334      	movs	r3, #52	; 0x34
 8011e70:	5cfb      	ldrb	r3, [r7, r3]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	d100      	bne.n	8011e78 <HAL_I2C_Master_Receive+0x38>
 8011e76:	e078      	b.n	8011f6a <HAL_I2C_Master_Receive+0x12a>
 8011e78:	2334      	movs	r3, #52	; 0x34
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_RX;
 8011e7e:	3301      	adds	r3, #1
 8011e80:	3221      	adds	r2, #33	; 0x21
 8011e82:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8011e84:	2300      	movs	r3, #0
 8011e86:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 8011e88:	2cff      	cmp	r4, #255	; 0xff
 8011e8a:	d90a      	bls.n	8011ea2 <HAL_I2C_Master_Receive+0x62>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8011e8c:	3380      	adds	r3, #128	; 0x80
 8011e8e:	2290      	movs	r2, #144	; 0x90
 8011e90:	0192      	lsls	r2, r2, #6
 8011e92:	9200      	str	r2, [sp, #0]
 8011e94:	045b      	lsls	r3, r3, #17
 8011e96:	22ff      	movs	r2, #255	; 0xff
 8011e98:	0038      	movs	r0, r7
 8011e9a:	f7ff fdd9 	bl	8011a50 <I2C_TransferConfig>
      sizetmp = 255;
 8011e9e:	25ff      	movs	r5, #255	; 0xff
 8011ea0:	e02e      	b.n	8011f00 <HAL_I2C_Master_Receive+0xc0>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8011ea2:	2380      	movs	r3, #128	; 0x80
 8011ea4:	b2e2      	uxtb	r2, r4
 8011ea6:	2190      	movs	r1, #144	; 0x90
 8011ea8:	0189      	lsls	r1, r1, #6
 8011eaa:	9100      	str	r1, [sp, #0]
 8011eac:	049b      	lsls	r3, r3, #18
 8011eae:	9903      	ldr	r1, [sp, #12]
 8011eb0:	0038      	movs	r0, r7
 8011eb2:	f7ff fdcd 	bl	8011a50 <I2C_TransferConfig>
      sizetmp = Size;
 8011eb6:	0025      	movs	r5, r4
 8011eb8:	e022      	b.n	8011f00 <HAL_I2C_Master_Receive+0xc0>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	2180      	movs	r1, #128	; 0x80
 8011ec0:	0038      	movs	r0, r7
 8011ec2:	f7ff fe4d 	bl	8011b60 <I2C_WaitOnFlagUntilTimeout>
 8011ec6:	2800      	cmp	r0, #0
 8011ec8:	d153      	bne.n	8011f72 <HAL_I2C_Master_Receive+0x132>
        if(Size > 255)
 8011eca:	2cff      	cmp	r4, #255	; 0xff
 8011ecc:	d90a      	bls.n	8011ee4 <HAL_I2C_Master_Receive+0xa4>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8011ece:	2300      	movs	r3, #0
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	2380      	movs	r3, #128	; 0x80
 8011ed4:	045b      	lsls	r3, r3, #17
 8011ed6:	22ff      	movs	r2, #255	; 0xff
 8011ed8:	9903      	ldr	r1, [sp, #12]
 8011eda:	0038      	movs	r0, r7
 8011edc:	f7ff fdb8 	bl	8011a50 <I2C_TransferConfig>
          sizetmp = 255;
 8011ee0:	35ff      	adds	r5, #255	; 0xff
 8011ee2:	e00c      	b.n	8011efe <HAL_I2C_Master_Receive+0xbe>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8011ee4:	b2e2      	uxtb	r2, r4
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	9300      	str	r3, [sp, #0]
 8011eea:	2380      	movs	r3, #128	; 0x80
 8011eec:	049b      	lsls	r3, r3, #18
 8011eee:	9903      	ldr	r1, [sp, #12]
 8011ef0:	0038      	movs	r0, r7
 8011ef2:	f7ff fdad 	bl	8011a50 <I2C_TransferConfig>
          sizetmp = Size;
 8011ef6:	0025      	movs	r5, r4
 8011ef8:	e001      	b.n	8011efe <HAL_I2C_Master_Receive+0xbe>
    }while(Size > 0);
 8011efa:	2c00      	cmp	r4, #0
 8011efc:	d012      	beq.n	8011f24 <HAL_I2C_Master_Receive+0xe4>
 8011efe:	3601      	adds	r6, #1
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 8011f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f02:	2200      	movs	r2, #0
 8011f04:	2104      	movs	r1, #4
 8011f06:	0038      	movs	r0, r7
 8011f08:	f7ff fe2a 	bl	8011b60 <I2C_WaitOnFlagUntilTimeout>
 8011f0c:	2800      	cmp	r0, #0
 8011f0e:	d12e      	bne.n	8011f6e <HAL_I2C_Master_Receive+0x12e>
      (*pData++) =hi2c->Instance->RXDR;
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f14:	7033      	strb	r3, [r6, #0]
      sizetmp--;
 8011f16:	3d01      	subs	r5, #1
      Size--;
 8011f18:	3c01      	subs	r4, #1
 8011f1a:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 8011f1c:	2d00      	cmp	r5, #0
 8011f1e:	d1ec      	bne.n	8011efa <HAL_I2C_Master_Receive+0xba>
 8011f20:	2c00      	cmp	r4, #0
 8011f22:	d1ca      	bne.n	8011eba <HAL_I2C_Master_Receive+0x7a>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8011f24:	2119      	movs	r1, #25
 8011f26:	0038      	movs	r0, r7
 8011f28:	f7ff fe5e 	bl	8011be8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	d008      	beq.n	8011f42 <HAL_I2C_Master_Receive+0x102>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011f30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 8011f32:	3804      	subs	r0, #4
 8011f34:	4243      	negs	r3, r0
 8011f36:	4158      	adcs	r0, r3
 8011f38:	4240      	negs	r0, r0
 8011f3a:	2301      	movs	r3, #1
 8011f3c:	4398      	bics	r0, r3
 8011f3e:	3003      	adds	r0, #3
 8011f40:	e00f      	b.n	8011f62 <HAL_I2C_Master_Receive+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	2220      	movs	r2, #32
 8011f46:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011f48:	683a      	ldr	r2, [r7, #0]
 8011f4a:	6853      	ldr	r3, [r2, #4]
 8011f4c:	490a      	ldr	r1, [pc, #40]	; (8011f78 <HAL_I2C_Master_Receive+0x138>)
 8011f4e:	400b      	ands	r3, r1
 8011f50:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8011f52:	2335      	movs	r3, #53	; 0x35
 8011f54:	2201      	movs	r2, #1
 8011f56:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8011f58:	3b01      	subs	r3, #1
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 8011f5e:	e000      	b.n	8011f62 <HAL_I2C_Master_Receive+0x122>
      return  HAL_ERROR;                                    
 8011f60:	2001      	movs	r0, #1
}
 8011f62:	b005      	add	sp, #20
 8011f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8011f66:	2002      	movs	r0, #2
 8011f68:	e7fb      	b.n	8011f62 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 8011f6a:	2002      	movs	r0, #2
 8011f6c:	e7f9      	b.n	8011f62 <HAL_I2C_Master_Receive+0x122>
        return HAL_TIMEOUT;
 8011f6e:	2003      	movs	r0, #3
 8011f70:	e7f7      	b.n	8011f62 <HAL_I2C_Master_Receive+0x122>
          return HAL_TIMEOUT;
 8011f72:	2003      	movs	r0, #3
 8011f74:	e7f5      	b.n	8011f62 <HAL_I2C_Master_Receive+0x122>
 8011f76:	46c0      	nop			; (mov r8, r8)
 8011f78:	fe00e800 	.word	0xfe00e800

08011f7c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8011f7c:	4770      	bx	lr
	...

08011f80 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8011f80:	4a03      	ldr	r2, [pc, #12]	; (8011f90 <HAL_PWR_EnableBkUpAccess+0x10>)
 8011f82:	6811      	ldr	r1, [r2, #0]
 8011f84:	2380      	movs	r3, #128	; 0x80
 8011f86:	005b      	lsls	r3, r3, #1
 8011f88:	430b      	orrs	r3, r1
 8011f8a:	6013      	str	r3, [r2, #0]
}
 8011f8c:	4770      	bx	lr
 8011f8e:	46c0      	nop			; (mov r8, r8)
 8011f90:	40007000 	.word	0x40007000

08011f94 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f96:	46c6      	mov	lr, r8
 8011f98:	b500      	push	{lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8011f9e:	6803      	ldr	r3, [r0, #0]
 8011fa0:	07db      	lsls	r3, r3, #31
 8011fa2:	d538      	bpl.n	8012016 <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8011fa4:	4bbd      	ldr	r3, [pc, #756]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8011fa6:	685a      	ldr	r2, [r3, #4]
 8011fa8:	230c      	movs	r3, #12
 8011faa:	4013      	ands	r3, r2
 8011fac:	2b04      	cmp	r3, #4
 8011fae:	d02a      	beq.n	8012006 <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8011fb0:	4bba      	ldr	r3, [pc, #744]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8011fb2:	685a      	ldr	r2, [r3, #4]
 8011fb4:	230c      	movs	r3, #12
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	2b08      	cmp	r3, #8
 8011fba:	d108      	bne.n	8011fce <HAL_RCC_OscConfig+0x3a>
 8011fbc:	4bb7      	ldr	r3, [pc, #732]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	22c0      	movs	r2, #192	; 0xc0
 8011fc2:	0252      	lsls	r2, r2, #9
 8011fc4:	4013      	ands	r3, r2
 8011fc6:	2280      	movs	r2, #128	; 0x80
 8011fc8:	0252      	lsls	r2, r2, #9
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d01b      	beq.n	8012006 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8011fce:	4bb3      	ldr	r3, [pc, #716]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	49b3      	ldr	r1, [pc, #716]	; (80122a0 <HAL_RCC_OscConfig+0x30c>)
 8011fd4:	400a      	ands	r2, r1
 8011fd6:	601a      	str	r2, [r3, #0]
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	49b2      	ldr	r1, [pc, #712]	; (80122a4 <HAL_RCC_OscConfig+0x310>)
 8011fdc:	400a      	ands	r2, r1
 8011fde:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011fe0:	f7fe f90a 	bl	80101f8 <HAL_GetTick>
 8011fe4:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8011fe6:	4ead      	ldr	r6, [pc, #692]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8011fe8:	2580      	movs	r5, #128	; 0x80
 8011fea:	02ad      	lsls	r5, r5, #10
 8011fec:	6833      	ldr	r3, [r6, #0]
 8011fee:	422b      	tst	r3, r5
 8011ff0:	d039      	beq.n	8012066 <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011ff2:	f7fe f901 	bl	80101f8 <HAL_GetTick>
 8011ff6:	1bc0      	subs	r0, r0, r7
 8011ff8:	2864      	cmp	r0, #100	; 0x64
 8011ffa:	d9f7      	bls.n	8011fec <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8011ffc:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8011ffe:	b002      	add	sp, #8
 8012000:	bc04      	pop	{r2}
 8012002:	4690      	mov	r8, r2
 8012004:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012006:	4ba5      	ldr	r3, [pc, #660]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	039b      	lsls	r3, r3, #14
 801200c:	d503      	bpl.n	8012016 <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 801200e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012010:	6863      	ldr	r3, [r4, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d0f3      	beq.n	8011ffe <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012016:	6823      	ldr	r3, [r4, #0]
 8012018:	079b      	lsls	r3, r3, #30
 801201a:	d400      	bmi.n	801201e <HAL_RCC_OscConfig+0x8a>
 801201c:	e08d      	b.n	801213a <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 801201e:	4b9f      	ldr	r3, [pc, #636]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012020:	685b      	ldr	r3, [r3, #4]
 8012022:	220c      	movs	r2, #12
 8012024:	421a      	tst	r2, r3
 8012026:	d077      	beq.n	8012118 <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012028:	4b9c      	ldr	r3, [pc, #624]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801202a:	685a      	ldr	r2, [r3, #4]
 801202c:	230c      	movs	r3, #12
 801202e:	4013      	ands	r3, r2
 8012030:	2b08      	cmp	r3, #8
 8012032:	d068      	beq.n	8012106 <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012034:	68e3      	ldr	r3, [r4, #12]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d100      	bne.n	801203c <HAL_RCC_OscConfig+0xa8>
 801203a:	e0a1      	b.n	8012180 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 801203c:	4a97      	ldr	r2, [pc, #604]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801203e:	6813      	ldr	r3, [r2, #0]
 8012040:	2101      	movs	r1, #1
 8012042:	430b      	orrs	r3, r1
 8012044:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012046:	f7fe f8d7 	bl	80101f8 <HAL_GetTick>
 801204a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801204c:	4e93      	ldr	r6, [pc, #588]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801204e:	2502      	movs	r5, #2
 8012050:	6833      	ldr	r3, [r6, #0]
 8012052:	421d      	tst	r5, r3
 8012054:	d000      	beq.n	8012058 <HAL_RCC_OscConfig+0xc4>
 8012056:	e08a      	b.n	801216e <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012058:	f7fe f8ce 	bl	80101f8 <HAL_GetTick>
 801205c:	1bc0      	subs	r0, r0, r7
 801205e:	2864      	cmp	r0, #100	; 0x64
 8012060:	d9f6      	bls.n	8012050 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8012062:	2003      	movs	r0, #3
 8012064:	e7cb      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012066:	6863      	ldr	r3, [r4, #4]
 8012068:	2b01      	cmp	r3, #1
 801206a:	d00b      	beq.n	8012084 <HAL_RCC_OscConfig+0xf0>
 801206c:	2b00      	cmp	r3, #0
 801206e:	d122      	bne.n	80120b6 <HAL_RCC_OscConfig+0x122>
 8012070:	4b8a      	ldr	r3, [pc, #552]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012072:	681a      	ldr	r2, [r3, #0]
 8012074:	498a      	ldr	r1, [pc, #552]	; (80122a0 <HAL_RCC_OscConfig+0x30c>)
 8012076:	400a      	ands	r2, r1
 8012078:	601a      	str	r2, [r3, #0]
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	4989      	ldr	r1, [pc, #548]	; (80122a4 <HAL_RCC_OscConfig+0x310>)
 801207e:	400a      	ands	r2, r1
 8012080:	601a      	str	r2, [r3, #0]
 8012082:	e005      	b.n	8012090 <HAL_RCC_OscConfig+0xfc>
 8012084:	4a85      	ldr	r2, [pc, #532]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012086:	6811      	ldr	r1, [r2, #0]
 8012088:	2380      	movs	r3, #128	; 0x80
 801208a:	025b      	lsls	r3, r3, #9
 801208c:	430b      	orrs	r3, r1
 801208e:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012090:	6863      	ldr	r3, [r4, #4]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d027      	beq.n	80120e6 <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8012096:	f7fe f8af 	bl	80101f8 <HAL_GetTick>
 801209a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801209c:	4e7f      	ldr	r6, [pc, #508]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801209e:	2580      	movs	r5, #128	; 0x80
 80120a0:	02ad      	lsls	r5, r5, #10
 80120a2:	6833      	ldr	r3, [r6, #0]
 80120a4:	422b      	tst	r3, r5
 80120a6:	d1b6      	bne.n	8012016 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80120a8:	f7fe f8a6 	bl	80101f8 <HAL_GetTick>
 80120ac:	1bc0      	subs	r0, r0, r7
 80120ae:	2864      	cmp	r0, #100	; 0x64
 80120b0:	d9f7      	bls.n	80120a2 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80120b2:	2003      	movs	r0, #3
 80120b4:	e7a3      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80120b6:	2b05      	cmp	r3, #5
 80120b8:	d009      	beq.n	80120ce <HAL_RCC_OscConfig+0x13a>
 80120ba:	4b78      	ldr	r3, [pc, #480]	; (801229c <HAL_RCC_OscConfig+0x308>)
 80120bc:	681a      	ldr	r2, [r3, #0]
 80120be:	4978      	ldr	r1, [pc, #480]	; (80122a0 <HAL_RCC_OscConfig+0x30c>)
 80120c0:	400a      	ands	r2, r1
 80120c2:	601a      	str	r2, [r3, #0]
 80120c4:	681a      	ldr	r2, [r3, #0]
 80120c6:	4977      	ldr	r1, [pc, #476]	; (80122a4 <HAL_RCC_OscConfig+0x310>)
 80120c8:	400a      	ands	r2, r1
 80120ca:	601a      	str	r2, [r3, #0]
 80120cc:	e7e0      	b.n	8012090 <HAL_RCC_OscConfig+0xfc>
 80120ce:	4b73      	ldr	r3, [pc, #460]	; (801229c <HAL_RCC_OscConfig+0x308>)
 80120d0:	6819      	ldr	r1, [r3, #0]
 80120d2:	2280      	movs	r2, #128	; 0x80
 80120d4:	02d2      	lsls	r2, r2, #11
 80120d6:	430a      	orrs	r2, r1
 80120d8:	601a      	str	r2, [r3, #0]
 80120da:	6819      	ldr	r1, [r3, #0]
 80120dc:	2280      	movs	r2, #128	; 0x80
 80120de:	0252      	lsls	r2, r2, #9
 80120e0:	430a      	orrs	r2, r1
 80120e2:	601a      	str	r2, [r3, #0]
 80120e4:	e7d4      	b.n	8012090 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80120e6:	f7fe f887 	bl	80101f8 <HAL_GetTick>
 80120ea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80120ec:	4e6b      	ldr	r6, [pc, #428]	; (801229c <HAL_RCC_OscConfig+0x308>)
 80120ee:	2580      	movs	r5, #128	; 0x80
 80120f0:	02ad      	lsls	r5, r5, #10
 80120f2:	6833      	ldr	r3, [r6, #0]
 80120f4:	422b      	tst	r3, r5
 80120f6:	d08e      	beq.n	8012016 <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80120f8:	f7fe f87e 	bl	80101f8 <HAL_GetTick>
 80120fc:	1bc0      	subs	r0, r0, r7
 80120fe:	2864      	cmp	r0, #100	; 0x64
 8012100:	d9f7      	bls.n	80120f2 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8012102:	2003      	movs	r0, #3
 8012104:	e77b      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012106:	4b65      	ldr	r3, [pc, #404]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	22c0      	movs	r2, #192	; 0xc0
 801210c:	0252      	lsls	r2, r2, #9
 801210e:	4013      	ands	r3, r2
 8012110:	2280      	movs	r2, #128	; 0x80
 8012112:	0212      	lsls	r2, r2, #8
 8012114:	4293      	cmp	r3, r2
 8012116:	d18d      	bne.n	8012034 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012118:	4b60      	ldr	r3, [pc, #384]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	079b      	lsls	r3, r3, #30
 801211e:	d504      	bpl.n	801212a <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8012120:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012122:	68e3      	ldr	r3, [r4, #12]
 8012124:	2b01      	cmp	r3, #1
 8012126:	d000      	beq.n	801212a <HAL_RCC_OscConfig+0x196>
 8012128:	e769      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801212a:	495c      	ldr	r1, [pc, #368]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801212c:	680a      	ldr	r2, [r1, #0]
 801212e:	6923      	ldr	r3, [r4, #16]
 8012130:	00db      	lsls	r3, r3, #3
 8012132:	20f8      	movs	r0, #248	; 0xf8
 8012134:	4382      	bics	r2, r0
 8012136:	4313      	orrs	r3, r2
 8012138:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	071b      	lsls	r3, r3, #28
 801213e:	d547      	bpl.n	80121d0 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012140:	6a23      	ldr	r3, [r4, #32]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d030      	beq.n	80121a8 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8012146:	4a55      	ldr	r2, [pc, #340]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012148:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801214a:	2101      	movs	r1, #1
 801214c:	430b      	orrs	r3, r1
 801214e:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012150:	f7fe f852 	bl	80101f8 <HAL_GetTick>
 8012154:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012156:	4e51      	ldr	r6, [pc, #324]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012158:	2502      	movs	r5, #2
 801215a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801215c:	421d      	tst	r5, r3
 801215e:	d137      	bne.n	80121d0 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012160:	f7fe f84a 	bl	80101f8 <HAL_GetTick>
 8012164:	1bc0      	subs	r0, r0, r7
 8012166:	2864      	cmp	r0, #100	; 0x64
 8012168:	d9f7      	bls.n	801215a <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801216a:	2003      	movs	r0, #3
 801216c:	e747      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801216e:	494b      	ldr	r1, [pc, #300]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012170:	680a      	ldr	r2, [r1, #0]
 8012172:	6923      	ldr	r3, [r4, #16]
 8012174:	00db      	lsls	r3, r3, #3
 8012176:	20f8      	movs	r0, #248	; 0xf8
 8012178:	4382      	bics	r2, r0
 801217a:	4313      	orrs	r3, r2
 801217c:	600b      	str	r3, [r1, #0]
 801217e:	e7dc      	b.n	801213a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012180:	4a46      	ldr	r2, [pc, #280]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012182:	6813      	ldr	r3, [r2, #0]
 8012184:	2101      	movs	r1, #1
 8012186:	438b      	bics	r3, r1
 8012188:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801218a:	f7fe f835 	bl	80101f8 <HAL_GetTick>
 801218e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012190:	4e42      	ldr	r6, [pc, #264]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012192:	2502      	movs	r5, #2
 8012194:	6833      	ldr	r3, [r6, #0]
 8012196:	421d      	tst	r5, r3
 8012198:	d0cf      	beq.n	801213a <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801219a:	f7fe f82d 	bl	80101f8 <HAL_GetTick>
 801219e:	1bc0      	subs	r0, r0, r7
 80121a0:	2864      	cmp	r0, #100	; 0x64
 80121a2:	d9f7      	bls.n	8012194 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 80121a4:	2003      	movs	r0, #3
 80121a6:	e72a      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80121a8:	4a3c      	ldr	r2, [pc, #240]	; (801229c <HAL_RCC_OscConfig+0x308>)
 80121aa:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80121ac:	2101      	movs	r1, #1
 80121ae:	438b      	bics	r3, r1
 80121b0:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80121b2:	f7fe f821 	bl	80101f8 <HAL_GetTick>
 80121b6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80121b8:	4e38      	ldr	r6, [pc, #224]	; (801229c <HAL_RCC_OscConfig+0x308>)
 80121ba:	2502      	movs	r5, #2
 80121bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80121be:	421d      	tst	r5, r3
 80121c0:	d006      	beq.n	80121d0 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80121c2:	f7fe f819 	bl	80101f8 <HAL_GetTick>
 80121c6:	1bc0      	subs	r0, r0, r7
 80121c8:	2864      	cmp	r0, #100	; 0x64
 80121ca:	d9f7      	bls.n	80121bc <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80121cc:	2003      	movs	r0, #3
 80121ce:	e716      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80121d0:	6823      	ldr	r3, [r4, #0]
 80121d2:	075b      	lsls	r3, r3, #29
 80121d4:	d442      	bmi.n	801225c <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80121d6:	6823      	ldr	r3, [r4, #0]
 80121d8:	06db      	lsls	r3, r3, #27
 80121da:	d512      	bpl.n	8012202 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80121dc:	6963      	ldr	r3, [r4, #20]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d100      	bne.n	80121e4 <HAL_RCC_OscConfig+0x250>
 80121e2:	e0ce      	b.n	8012382 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80121e4:	3305      	adds	r3, #5
 80121e6:	d000      	beq.n	80121ea <HAL_RCC_OscConfig+0x256>
 80121e8:	e0ec      	b.n	80123c4 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80121ea:	4a2c      	ldr	r2, [pc, #176]	; (801229c <HAL_RCC_OscConfig+0x308>)
 80121ec:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80121ee:	2104      	movs	r1, #4
 80121f0:	438b      	bics	r3, r1
 80121f2:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80121f4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80121f6:	69a3      	ldr	r3, [r4, #24]
 80121f8:	00db      	lsls	r3, r3, #3
 80121fa:	20f8      	movs	r0, #248	; 0xf8
 80121fc:	4381      	bics	r1, r0
 80121fe:	430b      	orrs	r3, r1
 8012200:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012202:	6823      	ldr	r3, [r4, #0]
 8012204:	069b      	lsls	r3, r3, #26
 8012206:	d400      	bmi.n	801220a <HAL_RCC_OscConfig+0x276>
 8012208:	e106      	b.n	8012418 <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801220a:	4b24      	ldr	r3, [pc, #144]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801220c:	685a      	ldr	r2, [r3, #4]
 801220e:	230c      	movs	r3, #12
 8012210:	4013      	ands	r3, r2
 8012212:	2b0c      	cmp	r3, #12
 8012214:	d100      	bne.n	8012218 <HAL_RCC_OscConfig+0x284>
 8012216:	e0f6      	b.n	8012406 <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012218:	4b20      	ldr	r3, [pc, #128]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801221a:	685a      	ldr	r2, [r3, #4]
 801221c:	230c      	movs	r3, #12
 801221e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012220:	2b08      	cmp	r3, #8
 8012222:	d100      	bne.n	8012226 <HAL_RCC_OscConfig+0x292>
 8012224:	e0e7      	b.n	80123f6 <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012226:	69e3      	ldr	r3, [r4, #28]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d100      	bne.n	801222e <HAL_RCC_OscConfig+0x29a>
 801222c:	e116      	b.n	801245c <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 801222e:	4a1b      	ldr	r2, [pc, #108]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012230:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012232:	2380      	movs	r3, #128	; 0x80
 8012234:	025b      	lsls	r3, r3, #9
 8012236:	430b      	orrs	r3, r1
 8012238:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801223a:	f7fd ffdd 	bl	80101f8 <HAL_GetTick>
 801223e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012240:	4e16      	ldr	r6, [pc, #88]	; (801229c <HAL_RCC_OscConfig+0x308>)
 8012242:	2580      	movs	r5, #128	; 0x80
 8012244:	026d      	lsls	r5, r5, #9
 8012246:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012248:	422b      	tst	r3, r5
 801224a:	d000      	beq.n	801224e <HAL_RCC_OscConfig+0x2ba>
 801224c:	e0e4      	b.n	8012418 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801224e:	f7fd ffd3 	bl	80101f8 <HAL_GetTick>
 8012252:	1bc0      	subs	r0, r0, r7
 8012254:	2864      	cmp	r0, #100	; 0x64
 8012256:	d9f6      	bls.n	8012246 <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012258:	2003      	movs	r0, #3
 801225a:	e6d0      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 801225c:	4a0f      	ldr	r2, [pc, #60]	; (801229c <HAL_RCC_OscConfig+0x308>)
 801225e:	69d1      	ldr	r1, [r2, #28]
 8012260:	2080      	movs	r0, #128	; 0x80
 8012262:	0540      	lsls	r0, r0, #21
 8012264:	4301      	orrs	r1, r0
 8012266:	61d1      	str	r1, [r2, #28]
 8012268:	69d3      	ldr	r3, [r2, #28]
 801226a:	4003      	ands	r3, r0
 801226c:	9301      	str	r3, [sp, #4]
 801226e:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012270:	4a0d      	ldr	r2, [pc, #52]	; (80122a8 <HAL_RCC_OscConfig+0x314>)
 8012272:	6811      	ldr	r1, [r2, #0]
 8012274:	2380      	movs	r3, #128	; 0x80
 8012276:	005b      	lsls	r3, r3, #1
 8012278:	430b      	orrs	r3, r1
 801227a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 801227c:	f7fd ffbc 	bl	80101f8 <HAL_GetTick>
 8012280:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012282:	4e09      	ldr	r6, [pc, #36]	; (80122a8 <HAL_RCC_OscConfig+0x314>)
 8012284:	2580      	movs	r5, #128	; 0x80
 8012286:	006d      	lsls	r5, r5, #1
 8012288:	6833      	ldr	r3, [r6, #0]
 801228a:	422b      	tst	r3, r5
 801228c:	d10e      	bne.n	80122ac <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 801228e:	f7fd ffb3 	bl	80101f8 <HAL_GetTick>
 8012292:	1bc0      	subs	r0, r0, r7
 8012294:	2864      	cmp	r0, #100	; 0x64
 8012296:	d9f7      	bls.n	8012288 <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8012298:	2003      	movs	r0, #3
 801229a:	e6b0      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
 801229c:	40021000 	.word	0x40021000
 80122a0:	fffeffff 	.word	0xfffeffff
 80122a4:	fffbffff 	.word	0xfffbffff
 80122a8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80122ac:	4b95      	ldr	r3, [pc, #596]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80122ae:	6a1a      	ldr	r2, [r3, #32]
 80122b0:	2101      	movs	r1, #1
 80122b2:	438a      	bics	r2, r1
 80122b4:	621a      	str	r2, [r3, #32]
 80122b6:	6a1a      	ldr	r2, [r3, #32]
 80122b8:	3103      	adds	r1, #3
 80122ba:	438a      	bics	r2, r1
 80122bc:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80122be:	f7fd ff9b 	bl	80101f8 <HAL_GetTick>
 80122c2:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80122c4:	4e8f      	ldr	r6, [pc, #572]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80122c6:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80122c8:	4f8f      	ldr	r7, [pc, #572]	; (8012508 <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80122ca:	6a33      	ldr	r3, [r6, #32]
 80122cc:	421d      	tst	r5, r3
 80122ce:	d007      	beq.n	80122e0 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80122d0:	f7fd ff92 	bl	80101f8 <HAL_GetTick>
 80122d4:	4643      	mov	r3, r8
 80122d6:	1ac0      	subs	r0, r0, r3
 80122d8:	42b8      	cmp	r0, r7
 80122da:	d9f6      	bls.n	80122ca <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 80122dc:	2003      	movs	r0, #3
 80122de:	e68e      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80122e0:	68a3      	ldr	r3, [r4, #8]
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	d00b      	beq.n	80122fe <HAL_RCC_OscConfig+0x36a>
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d123      	bne.n	8012332 <HAL_RCC_OscConfig+0x39e>
 80122ea:	4b86      	ldr	r3, [pc, #536]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80122ec:	6a1a      	ldr	r2, [r3, #32]
 80122ee:	2101      	movs	r1, #1
 80122f0:	438a      	bics	r2, r1
 80122f2:	621a      	str	r2, [r3, #32]
 80122f4:	6a1a      	ldr	r2, [r3, #32]
 80122f6:	3103      	adds	r1, #3
 80122f8:	438a      	bics	r2, r1
 80122fa:	621a      	str	r2, [r3, #32]
 80122fc:	e004      	b.n	8012308 <HAL_RCC_OscConfig+0x374>
 80122fe:	4a81      	ldr	r2, [pc, #516]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012300:	6a13      	ldr	r3, [r2, #32]
 8012302:	2101      	movs	r1, #1
 8012304:	430b      	orrs	r3, r1
 8012306:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012308:	68a3      	ldr	r3, [r4, #8]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d027      	beq.n	801235e <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 801230e:	f7fd ff73 	bl	80101f8 <HAL_GetTick>
 8012312:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012314:	4e7b      	ldr	r6, [pc, #492]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012316:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012318:	4f7b      	ldr	r7, [pc, #492]	; (8012508 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801231a:	6a33      	ldr	r3, [r6, #32]
 801231c:	421d      	tst	r5, r3
 801231e:	d000      	beq.n	8012322 <HAL_RCC_OscConfig+0x38e>
 8012320:	e759      	b.n	80121d6 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012322:	f7fd ff69 	bl	80101f8 <HAL_GetTick>
 8012326:	4643      	mov	r3, r8
 8012328:	1ac0      	subs	r0, r0, r3
 801232a:	42b8      	cmp	r0, r7
 801232c:	d9f5      	bls.n	801231a <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 801232e:	2003      	movs	r0, #3
 8012330:	e665      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012332:	2b05      	cmp	r3, #5
 8012334:	d009      	beq.n	801234a <HAL_RCC_OscConfig+0x3b6>
 8012336:	4b73      	ldr	r3, [pc, #460]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012338:	6a1a      	ldr	r2, [r3, #32]
 801233a:	2101      	movs	r1, #1
 801233c:	438a      	bics	r2, r1
 801233e:	621a      	str	r2, [r3, #32]
 8012340:	6a1a      	ldr	r2, [r3, #32]
 8012342:	3103      	adds	r1, #3
 8012344:	438a      	bics	r2, r1
 8012346:	621a      	str	r2, [r3, #32]
 8012348:	e7de      	b.n	8012308 <HAL_RCC_OscConfig+0x374>
 801234a:	4b6e      	ldr	r3, [pc, #440]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 801234c:	6a1a      	ldr	r2, [r3, #32]
 801234e:	2104      	movs	r1, #4
 8012350:	430a      	orrs	r2, r1
 8012352:	621a      	str	r2, [r3, #32]
 8012354:	6a1a      	ldr	r2, [r3, #32]
 8012356:	3903      	subs	r1, #3
 8012358:	430a      	orrs	r2, r1
 801235a:	621a      	str	r2, [r3, #32]
 801235c:	e7d4      	b.n	8012308 <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 801235e:	f7fd ff4b 	bl	80101f8 <HAL_GetTick>
 8012362:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012364:	4e67      	ldr	r6, [pc, #412]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012366:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012368:	4f67      	ldr	r7, [pc, #412]	; (8012508 <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801236a:	6a33      	ldr	r3, [r6, #32]
 801236c:	421d      	tst	r5, r3
 801236e:	d100      	bne.n	8012372 <HAL_RCC_OscConfig+0x3de>
 8012370:	e731      	b.n	80121d6 <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012372:	f7fd ff41 	bl	80101f8 <HAL_GetTick>
 8012376:	4643      	mov	r3, r8
 8012378:	1ac0      	subs	r0, r0, r3
 801237a:	42b8      	cmp	r0, r7
 801237c:	d9f5      	bls.n	801236a <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 801237e:	2003      	movs	r0, #3
 8012380:	e63d      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012382:	4b60      	ldr	r3, [pc, #384]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012386:	2104      	movs	r1, #4
 8012388:	430a      	orrs	r2, r1
 801238a:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 801238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801238e:	3903      	subs	r1, #3
 8012390:	430a      	orrs	r2, r1
 8012392:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012394:	f7fd ff30 	bl	80101f8 <HAL_GetTick>
 8012398:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801239a:	4e5a      	ldr	r6, [pc, #360]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 801239c:	2502      	movs	r5, #2
 801239e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80123a0:	421d      	tst	r5, r3
 80123a2:	d106      	bne.n	80123b2 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80123a4:	f7fd ff28 	bl	80101f8 <HAL_GetTick>
 80123a8:	1bc0      	subs	r0, r0, r7
 80123aa:	2864      	cmp	r0, #100	; 0x64
 80123ac:	d9f7      	bls.n	801239e <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80123ae:	2003      	movs	r0, #3
 80123b0:	e625      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80123b2:	4954      	ldr	r1, [pc, #336]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80123b4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80123b6:	69a3      	ldr	r3, [r4, #24]
 80123b8:	00db      	lsls	r3, r3, #3
 80123ba:	20f8      	movs	r0, #248	; 0xf8
 80123bc:	4382      	bics	r2, r0
 80123be:	4313      	orrs	r3, r2
 80123c0:	634b      	str	r3, [r1, #52]	; 0x34
 80123c2:	e71e      	b.n	8012202 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80123c4:	4b4f      	ldr	r3, [pc, #316]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80123c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123c8:	2104      	movs	r1, #4
 80123ca:	430a      	orrs	r2, r1
 80123cc:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80123ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123d0:	3903      	subs	r1, #3
 80123d2:	438a      	bics	r2, r1
 80123d4:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80123d6:	f7fd ff0f 	bl	80101f8 <HAL_GetTick>
 80123da:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80123dc:	4e49      	ldr	r6, [pc, #292]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80123de:	2502      	movs	r5, #2
 80123e0:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80123e2:	421d      	tst	r5, r3
 80123e4:	d100      	bne.n	80123e8 <HAL_RCC_OscConfig+0x454>
 80123e6:	e70c      	b.n	8012202 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80123e8:	f7fd ff06 	bl	80101f8 <HAL_GetTick>
 80123ec:	1bc0      	subs	r0, r0, r7
 80123ee:	2864      	cmp	r0, #100	; 0x64
 80123f0:	d9f6      	bls.n	80123e0 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80123f2:	2003      	movs	r0, #3
 80123f4:	e603      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80123f6:	4b43      	ldr	r3, [pc, #268]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80123f8:	685b      	ldr	r3, [r3, #4]
 80123fa:	22c0      	movs	r2, #192	; 0xc0
 80123fc:	0252      	lsls	r2, r2, #9
 80123fe:	4013      	ands	r3, r2
 8012400:	4293      	cmp	r3, r2
 8012402:	d000      	beq.n	8012406 <HAL_RCC_OscConfig+0x472>
 8012404:	e70f      	b.n	8012226 <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012406:	4b3f      	ldr	r3, [pc, #252]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801240a:	03db      	lsls	r3, r3, #15
 801240c:	d504      	bpl.n	8012418 <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 801240e:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012410:	69e3      	ldr	r3, [r4, #28]
 8012412:	2b01      	cmp	r3, #1
 8012414:	d000      	beq.n	8012418 <HAL_RCC_OscConfig+0x484>
 8012416:	e5f2      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012418:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 801241a:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801241c:	2b00      	cmp	r3, #0
 801241e:	d100      	bne.n	8012422 <HAL_RCC_OscConfig+0x48e>
 8012420:	e5ed      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012422:	4a38      	ldr	r2, [pc, #224]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012424:	6851      	ldr	r1, [r2, #4]
 8012426:	220c      	movs	r2, #12
 8012428:	400a      	ands	r2, r1
 801242a:	2a08      	cmp	r2, #8
 801242c:	d068      	beq.n	8012500 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801242e:	2b02      	cmp	r3, #2
 8012430:	d029      	beq.n	8012486 <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8012432:	4a34      	ldr	r2, [pc, #208]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012434:	6813      	ldr	r3, [r2, #0]
 8012436:	4935      	ldr	r1, [pc, #212]	; (801250c <HAL_RCC_OscConfig+0x578>)
 8012438:	400b      	ands	r3, r1
 801243a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801243c:	f7fd fedc 	bl	80101f8 <HAL_GetTick>
 8012440:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012442:	4d30      	ldr	r5, [pc, #192]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012444:	2480      	movs	r4, #128	; 0x80
 8012446:	04a4      	lsls	r4, r4, #18
 8012448:	682b      	ldr	r3, [r5, #0]
 801244a:	4223      	tst	r3, r4
 801244c:	d056      	beq.n	80124fc <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801244e:	f7fd fed3 	bl	80101f8 <HAL_GetTick>
 8012452:	1b80      	subs	r0, r0, r6
 8012454:	2864      	cmp	r0, #100	; 0x64
 8012456:	d9f7      	bls.n	8012448 <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012458:	2003      	movs	r0, #3
 801245a:	e5d0      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 801245c:	4a29      	ldr	r2, [pc, #164]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 801245e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012460:	492b      	ldr	r1, [pc, #172]	; (8012510 <HAL_RCC_OscConfig+0x57c>)
 8012462:	400b      	ands	r3, r1
 8012464:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012466:	f7fd fec7 	bl	80101f8 <HAL_GetTick>
 801246a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 801246c:	4e25      	ldr	r6, [pc, #148]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 801246e:	2580      	movs	r5, #128	; 0x80
 8012470:	026d      	lsls	r5, r5, #9
 8012472:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012474:	422b      	tst	r3, r5
 8012476:	d0cf      	beq.n	8012418 <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012478:	f7fd febe 	bl	80101f8 <HAL_GetTick>
 801247c:	1bc0      	subs	r0, r0, r7
 801247e:	2864      	cmp	r0, #100	; 0x64
 8012480:	d9f7      	bls.n	8012472 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012482:	2003      	movs	r0, #3
 8012484:	e5bb      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8012486:	4a1f      	ldr	r2, [pc, #124]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012488:	6813      	ldr	r3, [r2, #0]
 801248a:	4920      	ldr	r1, [pc, #128]	; (801250c <HAL_RCC_OscConfig+0x578>)
 801248c:	400b      	ands	r3, r1
 801248e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012490:	f7fd feb2 	bl	80101f8 <HAL_GetTick>
 8012494:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012496:	4e1b      	ldr	r6, [pc, #108]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 8012498:	2580      	movs	r5, #128	; 0x80
 801249a:	04ad      	lsls	r5, r5, #18
 801249c:	6833      	ldr	r3, [r6, #0]
 801249e:	422b      	tst	r3, r5
 80124a0:	d006      	beq.n	80124b0 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80124a2:	f7fd fea9 	bl	80101f8 <HAL_GetTick>
 80124a6:	1bc0      	subs	r0, r0, r7
 80124a8:	2864      	cmp	r0, #100	; 0x64
 80124aa:	d9f7      	bls.n	801249c <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 80124ac:	2003      	movs	r0, #3
 80124ae:	e5a6      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80124b0:	4b14      	ldr	r3, [pc, #80]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80124b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124b4:	210f      	movs	r1, #15
 80124b6:	438a      	bics	r2, r1
 80124b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80124ba:	430a      	orrs	r2, r1
 80124bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80124be:	6859      	ldr	r1, [r3, #4]
 80124c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80124c2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80124c4:	4302      	orrs	r2, r0
 80124c6:	4813      	ldr	r0, [pc, #76]	; (8012514 <HAL_RCC_OscConfig+0x580>)
 80124c8:	4001      	ands	r1, r0
 80124ca:	430a      	orrs	r2, r1
 80124cc:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 80124ce:	6819      	ldr	r1, [r3, #0]
 80124d0:	2280      	movs	r2, #128	; 0x80
 80124d2:	0452      	lsls	r2, r2, #17
 80124d4:	430a      	orrs	r2, r1
 80124d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80124d8:	f7fd fe8e 	bl	80101f8 <HAL_GetTick>
 80124dc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80124de:	4d09      	ldr	r5, [pc, #36]	; (8012504 <HAL_RCC_OscConfig+0x570>)
 80124e0:	2480      	movs	r4, #128	; 0x80
 80124e2:	04a4      	lsls	r4, r4, #18
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	4223      	tst	r3, r4
 80124e8:	d106      	bne.n	80124f8 <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80124ea:	f7fd fe85 	bl	80101f8 <HAL_GetTick>
 80124ee:	1b80      	subs	r0, r0, r6
 80124f0:	2864      	cmp	r0, #100	; 0x64
 80124f2:	d9f7      	bls.n	80124e4 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 80124f4:	2003      	movs	r0, #3
 80124f6:	e582      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 80124f8:	2000      	movs	r0, #0
 80124fa:	e580      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
 80124fc:	2000      	movs	r0, #0
 80124fe:	e57e      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8012500:	2001      	movs	r0, #1
 8012502:	e57c      	b.n	8011ffe <HAL_RCC_OscConfig+0x6a>
 8012504:	40021000 	.word	0x40021000
 8012508:	00001388 	.word	0x00001388
 801250c:	feffffff 	.word	0xfeffffff
 8012510:	fffeffff 	.word	0xfffeffff
 8012514:	ffc27fff 	.word	0xffc27fff

08012518 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801251a:	46ce      	mov	lr, r9
 801251c:	4647      	mov	r7, r8
 801251e:	b580      	push	{r7, lr}
 8012520:	0005      	movs	r5, r0
 8012522:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012524:	4b95      	ldr	r3, [pc, #596]	; (801277c <HAL_RCC_ClockConfig+0x264>)
 8012526:	681a      	ldr	r2, [r3, #0]
 8012528:	2301      	movs	r3, #1
 801252a:	4013      	ands	r3, r2
 801252c:	428b      	cmp	r3, r1
 801252e:	d300      	bcc.n	8012532 <HAL_RCC_ClockConfig+0x1a>
 8012530:	e089      	b.n	8012646 <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012532:	4992      	ldr	r1, [pc, #584]	; (801277c <HAL_RCC_ClockConfig+0x264>)
 8012534:	680b      	ldr	r3, [r1, #0]
 8012536:	2201      	movs	r2, #1
 8012538:	4393      	bics	r3, r2
 801253a:	4323      	orrs	r3, r4
 801253c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801253e:	680b      	ldr	r3, [r1, #0]
 8012540:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012542:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012544:	42a2      	cmp	r2, r4
 8012546:	d003      	beq.n	8012550 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012548:	bc0c      	pop	{r2, r3}
 801254a:	4690      	mov	r8, r2
 801254c:	4699      	mov	r9, r3
 801254e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012550:	682b      	ldr	r3, [r5, #0]
 8012552:	079b      	lsls	r3, r3, #30
 8012554:	d506      	bpl.n	8012564 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012556:	4a8a      	ldr	r2, [pc, #552]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012558:	6853      	ldr	r3, [r2, #4]
 801255a:	21f0      	movs	r1, #240	; 0xf0
 801255c:	438b      	bics	r3, r1
 801255e:	68a9      	ldr	r1, [r5, #8]
 8012560:	430b      	orrs	r3, r1
 8012562:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012564:	682b      	ldr	r3, [r5, #0]
 8012566:	07db      	lsls	r3, r3, #31
 8012568:	d400      	bmi.n	801256c <HAL_RCC_ClockConfig+0x54>
 801256a:	e0f7      	b.n	801275c <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801256c:	686b      	ldr	r3, [r5, #4]
 801256e:	2b01      	cmp	r3, #1
 8012570:	d009      	beq.n	8012586 <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012572:	2b02      	cmp	r3, #2
 8012574:	d02b      	beq.n	80125ce <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012576:	2b03      	cmp	r3, #3
 8012578:	d02f      	beq.n	80125da <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801257a:	4a81      	ldr	r2, [pc, #516]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 801257c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801257e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012580:	0792      	lsls	r2, r2, #30
 8012582:	d405      	bmi.n	8012590 <HAL_RCC_ClockConfig+0x78>
 8012584:	e7e0      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012586:	4a7e      	ldr	r2, [pc, #504]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012588:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801258a:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801258c:	0392      	lsls	r2, r2, #14
 801258e:	d5db      	bpl.n	8012548 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012590:	497b      	ldr	r1, [pc, #492]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012592:	684a      	ldr	r2, [r1, #4]
 8012594:	2003      	movs	r0, #3
 8012596:	4382      	bics	r2, r0
 8012598:	4313      	orrs	r3, r2
 801259a:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 801259c:	f7fd fe2c 	bl	80101f8 <HAL_GetTick>
 80125a0:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80125a2:	686b      	ldr	r3, [r5, #4]
 80125a4:	2b01      	cmp	r3, #1
 80125a6:	d01e      	beq.n	80125e6 <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d02c      	beq.n	8012606 <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80125ac:	2b03      	cmp	r3, #3
 80125ae:	d03a      	beq.n	8012626 <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80125b0:	4f73      	ldr	r7, [pc, #460]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80125b2:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125b4:	4b73      	ldr	r3, [pc, #460]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 80125b6:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	421e      	tst	r6, r3
 80125bc:	d100      	bne.n	80125c0 <HAL_RCC_ClockConfig+0xa8>
 80125be:	e0cd      	b.n	801275c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125c0:	f7fd fe1a 	bl	80101f8 <HAL_GetTick>
 80125c4:	1b00      	subs	r0, r0, r4
 80125c6:	4540      	cmp	r0, r8
 80125c8:	d9f6      	bls.n	80125b8 <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 80125ca:	2003      	movs	r0, #3
 80125cc:	e7bc      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80125ce:	4a6c      	ldr	r2, [pc, #432]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80125d0:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80125d2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80125d4:	0192      	lsls	r2, r2, #6
 80125d6:	d4db      	bmi.n	8012590 <HAL_RCC_ClockConfig+0x78>
 80125d8:	e7b6      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80125da:	4a69      	ldr	r2, [pc, #420]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80125dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80125de:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80125e0:	03d2      	lsls	r2, r2, #15
 80125e2:	d4d5      	bmi.n	8012590 <HAL_RCC_ClockConfig+0x78>
 80125e4:	e7b0      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80125e6:	4f66      	ldr	r7, [pc, #408]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80125e8:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125ea:	4b66      	ldr	r3, [pc, #408]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 80125ec:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4033      	ands	r3, r6
 80125f2:	2b04      	cmp	r3, #4
 80125f4:	d100      	bne.n	80125f8 <HAL_RCC_ClockConfig+0xe0>
 80125f6:	e0b1      	b.n	801275c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80125f8:	f7fd fdfe 	bl	80101f8 <HAL_GetTick>
 80125fc:	1b00      	subs	r0, r0, r4
 80125fe:	4540      	cmp	r0, r8
 8012600:	d9f5      	bls.n	80125ee <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8012602:	2003      	movs	r0, #3
 8012604:	e7a0      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012606:	4f5e      	ldr	r7, [pc, #376]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012608:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801260a:	4b5e      	ldr	r3, [pc, #376]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 801260c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	4033      	ands	r3, r6
 8012612:	2b08      	cmp	r3, #8
 8012614:	d100      	bne.n	8012618 <HAL_RCC_ClockConfig+0x100>
 8012616:	e0a1      	b.n	801275c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012618:	f7fd fdee 	bl	80101f8 <HAL_GetTick>
 801261c:	1b00      	subs	r0, r0, r4
 801261e:	4540      	cmp	r0, r8
 8012620:	d9f5      	bls.n	801260e <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8012622:	2003      	movs	r0, #3
 8012624:	e790      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012626:	4f56      	ldr	r7, [pc, #344]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012628:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801262a:	4b56      	ldr	r3, [pc, #344]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 801262c:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	4033      	ands	r3, r6
 8012632:	2b0c      	cmp	r3, #12
 8012634:	d100      	bne.n	8012638 <HAL_RCC_ClockConfig+0x120>
 8012636:	e091      	b.n	801275c <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012638:	f7fd fdde 	bl	80101f8 <HAL_GetTick>
 801263c:	1b00      	subs	r0, r0, r4
 801263e:	4540      	cmp	r0, r8
 8012640:	d9f5      	bls.n	801262e <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8012642:	2003      	movs	r0, #3
 8012644:	e780      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012646:	6803      	ldr	r3, [r0, #0]
 8012648:	079b      	lsls	r3, r3, #30
 801264a:	d506      	bpl.n	801265a <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801264c:	4a4c      	ldr	r2, [pc, #304]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 801264e:	6853      	ldr	r3, [r2, #4]
 8012650:	21f0      	movs	r1, #240	; 0xf0
 8012652:	438b      	bics	r3, r1
 8012654:	6881      	ldr	r1, [r0, #8]
 8012656:	430b      	orrs	r3, r1
 8012658:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801265a:	682b      	ldr	r3, [r5, #0]
 801265c:	07db      	lsls	r3, r3, #31
 801265e:	d571      	bpl.n	8012744 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012660:	686b      	ldr	r3, [r5, #4]
 8012662:	2b01      	cmp	r3, #1
 8012664:	d009      	beq.n	801267a <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012666:	2b02      	cmp	r3, #2
 8012668:	d02d      	beq.n	80126c6 <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801266a:	2b03      	cmp	r3, #3
 801266c:	d031      	beq.n	80126d2 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801266e:	4a44      	ldr	r2, [pc, #272]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012670:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012672:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012674:	0792      	lsls	r2, r2, #30
 8012676:	d406      	bmi.n	8012686 <HAL_RCC_ClockConfig+0x16e>
 8012678:	e766      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801267a:	4a41      	ldr	r2, [pc, #260]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 801267c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 801267e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012680:	0392      	lsls	r2, r2, #14
 8012682:	d400      	bmi.n	8012686 <HAL_RCC_ClockConfig+0x16e>
 8012684:	e760      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012686:	493e      	ldr	r1, [pc, #248]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012688:	684a      	ldr	r2, [r1, #4]
 801268a:	2003      	movs	r0, #3
 801268c:	4382      	bics	r2, r0
 801268e:	4313      	orrs	r3, r2
 8012690:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012692:	f7fd fdb1 	bl	80101f8 <HAL_GetTick>
 8012696:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012698:	686b      	ldr	r3, [r5, #4]
 801269a:	2b01      	cmp	r3, #1
 801269c:	d01f      	beq.n	80126de <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801269e:	2b02      	cmp	r3, #2
 80126a0:	d02e      	beq.n	8012700 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80126a2:	2b03      	cmp	r3, #3
 80126a4:	d03d      	beq.n	8012722 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80126a6:	4b36      	ldr	r3, [pc, #216]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80126a8:	4698      	mov	r8, r3
 80126aa:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126ac:	4b35      	ldr	r3, [pc, #212]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 80126ae:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80126b0:	4643      	mov	r3, r8
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	421f      	tst	r7, r3
 80126b6:	d045      	beq.n	8012744 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126b8:	f7fd fd9e 	bl	80101f8 <HAL_GetTick>
 80126bc:	1b80      	subs	r0, r0, r6
 80126be:	4548      	cmp	r0, r9
 80126c0:	d9f6      	bls.n	80126b0 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80126c2:	2003      	movs	r0, #3
 80126c4:	e740      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126c6:	4a2e      	ldr	r2, [pc, #184]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80126c8:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80126ca:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126cc:	0192      	lsls	r2, r2, #6
 80126ce:	d4da      	bmi.n	8012686 <HAL_RCC_ClockConfig+0x16e>
 80126d0:	e73a      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80126d2:	4a2b      	ldr	r2, [pc, #172]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80126d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80126d6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80126d8:	03d2      	lsls	r2, r2, #15
 80126da:	d4d4      	bmi.n	8012686 <HAL_RCC_ClockConfig+0x16e>
 80126dc:	e734      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80126de:	4b28      	ldr	r3, [pc, #160]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 80126e0:	4698      	mov	r8, r3
 80126e2:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126e4:	4b27      	ldr	r3, [pc, #156]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 80126e6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80126e8:	4643      	mov	r3, r8
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	403b      	ands	r3, r7
 80126ee:	2b04      	cmp	r3, #4
 80126f0:	d028      	beq.n	8012744 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80126f2:	f7fd fd81 	bl	80101f8 <HAL_GetTick>
 80126f6:	1b80      	subs	r0, r0, r6
 80126f8:	4548      	cmp	r0, r9
 80126fa:	d9f5      	bls.n	80126e8 <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80126fc:	2003      	movs	r0, #3
 80126fe:	e723      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012700:	4b1f      	ldr	r3, [pc, #124]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012702:	4698      	mov	r8, r3
 8012704:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012706:	4b1f      	ldr	r3, [pc, #124]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 8012708:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801270a:	4643      	mov	r3, r8
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	403b      	ands	r3, r7
 8012710:	2b08      	cmp	r3, #8
 8012712:	d017      	beq.n	8012744 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012714:	f7fd fd70 	bl	80101f8 <HAL_GetTick>
 8012718:	1b80      	subs	r0, r0, r6
 801271a:	4548      	cmp	r0, r9
 801271c:	d9f5      	bls.n	801270a <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 801271e:	2003      	movs	r0, #3
 8012720:	e712      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012722:	4b17      	ldr	r3, [pc, #92]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012724:	4698      	mov	r8, r3
 8012726:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012728:	4b16      	ldr	r3, [pc, #88]	; (8012784 <HAL_RCC_ClockConfig+0x26c>)
 801272a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801272c:	4643      	mov	r3, r8
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	403b      	ands	r3, r7
 8012732:	2b0c      	cmp	r3, #12
 8012734:	d006      	beq.n	8012744 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012736:	f7fd fd5f 	bl	80101f8 <HAL_GetTick>
 801273a:	1b80      	subs	r0, r0, r6
 801273c:	4548      	cmp	r0, r9
 801273e:	d9f5      	bls.n	801272c <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8012740:	2003      	movs	r0, #3
 8012742:	e701      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012744:	490d      	ldr	r1, [pc, #52]	; (801277c <HAL_RCC_ClockConfig+0x264>)
 8012746:	680b      	ldr	r3, [r1, #0]
 8012748:	2201      	movs	r2, #1
 801274a:	4393      	bics	r3, r2
 801274c:	4323      	orrs	r3, r4
 801274e:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012750:	680b      	ldr	r3, [r1, #0]
 8012752:	401a      	ands	r2, r3
      return HAL_ERROR;
 8012754:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012756:	42a2      	cmp	r2, r4
 8012758:	d000      	beq.n	801275c <HAL_RCC_ClockConfig+0x244>
 801275a:	e6f5      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801275c:	682b      	ldr	r3, [r5, #0]
 801275e:	075b      	lsls	r3, r3, #29
 8012760:	d506      	bpl.n	8012770 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012762:	4a07      	ldr	r2, [pc, #28]	; (8012780 <HAL_RCC_ClockConfig+0x268>)
 8012764:	6853      	ldr	r3, [r2, #4]
 8012766:	4908      	ldr	r1, [pc, #32]	; (8012788 <HAL_RCC_ClockConfig+0x270>)
 8012768:	400b      	ands	r3, r1
 801276a:	68e9      	ldr	r1, [r5, #12]
 801276c:	430b      	orrs	r3, r1
 801276e:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8012770:	2000      	movs	r0, #0
 8012772:	f7fd fd17 	bl	80101a4 <HAL_InitTick>
  return HAL_OK;
 8012776:	2000      	movs	r0, #0
 8012778:	e6e6      	b.n	8012548 <HAL_RCC_ClockConfig+0x30>
 801277a:	46c0      	nop			; (mov r8, r8)
 801277c:	40022000 	.word	0x40022000
 8012780:	40021000 	.word	0x40021000
 8012784:	00001388 	.word	0x00001388
 8012788:	fffff8ff 	.word	0xfffff8ff

0801278c <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801278c:	b530      	push	{r4, r5, lr}
 801278e:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012790:	aa04      	add	r2, sp, #16
 8012792:	4b21      	ldr	r3, [pc, #132]	; (8012818 <HAL_RCC_GetSysClockFreq+0x8c>)
 8012794:	0018      	movs	r0, r3
 8012796:	c832      	ldmia	r0!, {r1, r4, r5}
 8012798:	c232      	stmia	r2!, {r1, r4, r5}
 801279a:	0011      	movs	r1, r2
 801279c:	6802      	ldr	r2, [r0, #0]
 801279e:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 80127a0:	466a      	mov	r2, sp
 80127a2:	3310      	adds	r3, #16
 80127a4:	cb13      	ldmia	r3!, {r0, r1, r4}
 80127a6:	c213      	stmia	r2!, {r0, r1, r4}
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80127ac:	4b1b      	ldr	r3, [pc, #108]	; (801281c <HAL_RCC_GetSysClockFreq+0x90>)
 80127ae:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80127b0:	200c      	movs	r0, #12
 80127b2:	4018      	ands	r0, r3
 80127b4:	2808      	cmp	r0, #8
 80127b6:	d00a      	beq.n	80127ce <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80127b8:	380c      	subs	r0, #12
 80127ba:	4243      	negs	r3, r0
 80127bc:	4158      	adcs	r0, r3
 80127be:	4240      	negs	r0, r0
 80127c0:	4b17      	ldr	r3, [pc, #92]	; (8012820 <HAL_RCC_GetSysClockFreq+0x94>)
 80127c2:	4018      	ands	r0, r3
 80127c4:	4b17      	ldr	r3, [pc, #92]	; (8012824 <HAL_RCC_GetSysClockFreq+0x98>)
 80127c6:	469c      	mov	ip, r3
 80127c8:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80127ca:	b009      	add	sp, #36	; 0x24
 80127cc:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80127ce:	0c99      	lsrs	r1, r3, #18
 80127d0:	220f      	movs	r2, #15
 80127d2:	4011      	ands	r1, r2
 80127d4:	a804      	add	r0, sp, #16
 80127d6:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80127d8:	4910      	ldr	r1, [pc, #64]	; (801281c <HAL_RCC_GetSysClockFreq+0x90>)
 80127da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80127dc:	400a      	ands	r2, r1
 80127de:	4669      	mov	r1, sp
 80127e0:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80127e2:	22c0      	movs	r2, #192	; 0xc0
 80127e4:	0252      	lsls	r2, r2, #9
 80127e6:	4013      	ands	r3, r2
 80127e8:	2280      	movs	r2, #128	; 0x80
 80127ea:	0252      	lsls	r2, r2, #9
 80127ec:	4293      	cmp	r3, r2
 80127ee:	d008      	beq.n	8012802 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80127f0:	22c0      	movs	r2, #192	; 0xc0
 80127f2:	0252      	lsls	r2, r2, #9
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d009      	beq.n	801280c <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80127f8:	480a      	ldr	r0, [pc, #40]	; (8012824 <HAL_RCC_GetSysClockFreq+0x98>)
 80127fa:	f7ed fca9 	bl	8000150 <__udivsi3>
 80127fe:	4360      	muls	r0, r4
 8012800:	e7e3      	b.n	80127ca <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012802:	4808      	ldr	r0, [pc, #32]	; (8012824 <HAL_RCC_GetSysClockFreq+0x98>)
 8012804:	f7ed fca4 	bl	8000150 <__udivsi3>
 8012808:	4360      	muls	r0, r4
 801280a:	e7de      	b.n	80127ca <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 801280c:	4806      	ldr	r0, [pc, #24]	; (8012828 <HAL_RCC_GetSysClockFreq+0x9c>)
 801280e:	f7ed fc9f 	bl	8000150 <__udivsi3>
 8012812:	4360      	muls	r0, r4
 8012814:	e7d9      	b.n	80127ca <HAL_RCC_GetSysClockFreq+0x3e>
 8012816:	46c0      	nop			; (mov r8, r8)
 8012818:	08018754 	.word	0x08018754
 801281c:	40021000 	.word	0x40021000
 8012820:	02625a00 	.word	0x02625a00
 8012824:	007a1200 	.word	0x007a1200
 8012828:	02dc6c00 	.word	0x02dc6c00

0801282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801282c:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 801282e:	f7ff ffad 	bl	801278c <HAL_RCC_GetSysClockFreq>
 8012832:	4b05      	ldr	r3, [pc, #20]	; (8012848 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	061b      	lsls	r3, r3, #24
 8012838:	0f1b      	lsrs	r3, r3, #28
 801283a:	4a04      	ldr	r2, [pc, #16]	; (801284c <HAL_RCC_GetHCLKFreq+0x20>)
 801283c:	5cd3      	ldrb	r3, [r2, r3]
 801283e:	40d8      	lsrs	r0, r3
 8012840:	4b03      	ldr	r3, [pc, #12]	; (8012850 <HAL_RCC_GetHCLKFreq+0x24>)
 8012842:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012844:	bd10      	pop	{r4, pc}
 8012846:	46c0      	nop			; (mov r8, r8)
 8012848:	40021000 	.word	0x40021000
 801284c:	0801b814 	.word	0x0801b814
 8012850:	20000104 	.word	0x20000104

08012854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012854:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012856:	f7ff ffe9 	bl	801282c <HAL_RCC_GetHCLKFreq>
 801285a:	4b04      	ldr	r3, [pc, #16]	; (801286c <HAL_RCC_GetPCLK1Freq+0x18>)
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	055b      	lsls	r3, r3, #21
 8012860:	0f5b      	lsrs	r3, r3, #29
 8012862:	4a03      	ldr	r2, [pc, #12]	; (8012870 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012864:	5cd3      	ldrb	r3, [r2, r3]
 8012866:	40d8      	lsrs	r0, r3
}    
 8012868:	bd10      	pop	{r4, pc}
 801286a:	46c0      	nop			; (mov r8, r8)
 801286c:	40021000 	.word	0x40021000
 8012870:	0801b814 	.word	0x0801b814

08012874 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012876:	46c6      	mov	lr, r8
 8012878:	b500      	push	{lr}
 801287a:	b082      	sub	sp, #8
 801287c:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801287e:	6803      	ldr	r3, [r0, #0]
 8012880:	03db      	lsls	r3, r3, #15
 8012882:	d507      	bpl.n	8012894 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012884:	4b43      	ldr	r3, [pc, #268]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012886:	6a1b      	ldr	r3, [r3, #32]
 8012888:	6842      	ldr	r2, [r0, #4]
 801288a:	4053      	eors	r3, r2
 801288c:	22c0      	movs	r2, #192	; 0xc0
 801288e:	0092      	lsls	r2, r2, #2
 8012890:	4213      	tst	r3, r2
 8012892:	d136      	bne.n	8012902 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012894:	6823      	ldr	r3, [r4, #0]
 8012896:	07db      	lsls	r3, r3, #31
 8012898:	d506      	bpl.n	80128a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801289a:	4a3e      	ldr	r2, [pc, #248]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801289c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801289e:	2103      	movs	r1, #3
 80128a0:	438b      	bics	r3, r1
 80128a2:	68a1      	ldr	r1, [r4, #8]
 80128a4:	430b      	orrs	r3, r1
 80128a6:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80128a8:	6823      	ldr	r3, [r4, #0]
 80128aa:	079b      	lsls	r3, r3, #30
 80128ac:	d506      	bpl.n	80128bc <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80128ae:	4a39      	ldr	r2, [pc, #228]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128b0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128b2:	4939      	ldr	r1, [pc, #228]	; (8012998 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80128b4:	400b      	ands	r3, r1
 80128b6:	68e1      	ldr	r1, [r4, #12]
 80128b8:	430b      	orrs	r3, r1
 80128ba:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80128bc:	6823      	ldr	r3, [r4, #0]
 80128be:	035b      	lsls	r3, r3, #13
 80128c0:	d506      	bpl.n	80128d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80128c2:	4a34      	ldr	r2, [pc, #208]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128c6:	4935      	ldr	r1, [pc, #212]	; (801299c <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80128c8:	400b      	ands	r3, r1
 80128ca:	6921      	ldr	r1, [r4, #16]
 80128cc:	430b      	orrs	r3, r1
 80128ce:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80128d0:	6823      	ldr	r3, [r4, #0]
 80128d2:	069b      	lsls	r3, r3, #26
 80128d4:	d506      	bpl.n	80128e4 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80128d6:	4a2f      	ldr	r2, [pc, #188]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128d8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128da:	2110      	movs	r1, #16
 80128dc:	438b      	bics	r3, r1
 80128de:	6961      	ldr	r1, [r4, #20]
 80128e0:	430b      	orrs	r3, r1
 80128e2:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80128e4:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80128e6:	6823      	ldr	r3, [r4, #0]
 80128e8:	055b      	lsls	r3, r3, #21
 80128ea:	d506      	bpl.n	80128fa <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80128ec:	4a29      	ldr	r2, [pc, #164]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80128ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80128f0:	2140      	movs	r1, #64	; 0x40
 80128f2:	438b      	bics	r3, r1
 80128f4:	69a1      	ldr	r1, [r4, #24]
 80128f6:	430b      	orrs	r3, r1
 80128f8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80128fa:	b002      	add	sp, #8
 80128fc:	bc04      	pop	{r2}
 80128fe:	4690      	mov	r8, r2
 8012900:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012902:	4a24      	ldr	r2, [pc, #144]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012904:	69d1      	ldr	r1, [r2, #28]
 8012906:	2080      	movs	r0, #128	; 0x80
 8012908:	0540      	lsls	r0, r0, #21
 801290a:	4301      	orrs	r1, r0
 801290c:	61d1      	str	r1, [r2, #28]
 801290e:	69d3      	ldr	r3, [r2, #28]
 8012910:	4003      	ands	r3, r0
 8012912:	9301      	str	r3, [sp, #4]
 8012914:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012916:	4a22      	ldr	r2, [pc, #136]	; (80129a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012918:	6811      	ldr	r1, [r2, #0]
 801291a:	2380      	movs	r3, #128	; 0x80
 801291c:	005b      	lsls	r3, r3, #1
 801291e:	430b      	orrs	r3, r1
 8012920:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012922:	f7fd fc69 	bl	80101f8 <HAL_GetTick>
 8012926:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012928:	4e1d      	ldr	r6, [pc, #116]	; (80129a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801292a:	2580      	movs	r5, #128	; 0x80
 801292c:	006d      	lsls	r5, r5, #1
 801292e:	6833      	ldr	r3, [r6, #0]
 8012930:	422b      	tst	r3, r5
 8012932:	d106      	bne.n	8012942 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012934:	f7fd fc60 	bl	80101f8 <HAL_GetTick>
 8012938:	1bc0      	subs	r0, r0, r7
 801293a:	2864      	cmp	r0, #100	; 0x64
 801293c:	d9f7      	bls.n	801292e <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 801293e:	2003      	movs	r0, #3
 8012940:	e7db      	b.n	80128fa <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012942:	4b14      	ldr	r3, [pc, #80]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012944:	6a18      	ldr	r0, [r3, #32]
 8012946:	4a17      	ldr	r2, [pc, #92]	; (80129a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012948:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801294a:	6a1d      	ldr	r5, [r3, #32]
 801294c:	2180      	movs	r1, #128	; 0x80
 801294e:	0249      	lsls	r1, r1, #9
 8012950:	4329      	orrs	r1, r5
 8012952:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012954:	6a19      	ldr	r1, [r3, #32]
 8012956:	4d14      	ldr	r5, [pc, #80]	; (80129a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012958:	4029      	ands	r1, r5
 801295a:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 801295c:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 801295e:	0783      	lsls	r3, r0, #30
 8012960:	d407      	bmi.n	8012972 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012962:	4a0c      	ldr	r2, [pc, #48]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012964:	6a13      	ldr	r3, [r2, #32]
 8012966:	490f      	ldr	r1, [pc, #60]	; (80129a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012968:	400b      	ands	r3, r1
 801296a:	6861      	ldr	r1, [r4, #4]
 801296c:	430b      	orrs	r3, r1
 801296e:	6213      	str	r3, [r2, #32]
 8012970:	e790      	b.n	8012894 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012972:	f7fd fc41 	bl	80101f8 <HAL_GetTick>
 8012976:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012978:	4e06      	ldr	r6, [pc, #24]	; (8012994 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801297a:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801297c:	4f0b      	ldr	r7, [pc, #44]	; (80129ac <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801297e:	6a33      	ldr	r3, [r6, #32]
 8012980:	421d      	tst	r5, r3
 8012982:	d1ee      	bne.n	8012962 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012984:	f7fd fc38 	bl	80101f8 <HAL_GetTick>
 8012988:	4643      	mov	r3, r8
 801298a:	1ac0      	subs	r0, r0, r3
 801298c:	42b8      	cmp	r0, r7
 801298e:	d9f6      	bls.n	801297e <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8012990:	2003      	movs	r0, #3
 8012992:	e7b2      	b.n	80128fa <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012994:	40021000 	.word	0x40021000
 8012998:	fffcffff 	.word	0xfffcffff
 801299c:	fff3ffff 	.word	0xfff3ffff
 80129a0:	40007000 	.word	0x40007000
 80129a4:	fffffcff 	.word	0xfffffcff
 80129a8:	fffeffff 	.word	0xfffeffff
 80129ac:	00001388 	.word	0x00001388

080129b0 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80129b0:	4770      	bx	lr

080129b2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80129b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80129b6:	6802      	ldr	r2, [r0, #0]
 80129b8:	68d3      	ldr	r3, [r2, #12]
 80129ba:	21a0      	movs	r1, #160	; 0xa0
 80129bc:	438b      	bics	r3, r1
 80129be:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80129c0:	f7fd fc1a 	bl	80101f8 <HAL_GetTick>
 80129c4:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80129c6:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80129c8:	26fa      	movs	r6, #250	; 0xfa
 80129ca:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80129cc:	6823      	ldr	r3, [r4, #0]
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	421d      	tst	r5, r3
 80129d2:	d106      	bne.n	80129e2 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80129d4:	f7fd fc10 	bl	80101f8 <HAL_GetTick>
 80129d8:	1bc0      	subs	r0, r0, r7
 80129da:	42b0      	cmp	r0, r6
 80129dc:	d9f6      	bls.n	80129cc <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80129de:	2003      	movs	r0, #3
 80129e0:	e000      	b.n	80129e4 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80129e2:	2000      	movs	r0, #0
}
 80129e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080129e6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80129e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e8:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80129ea:	6803      	ldr	r3, [r0, #0]
 80129ec:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80129ee:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80129f0:	0652      	lsls	r2, r2, #25
 80129f2:	d500      	bpl.n	80129f6 <RTC_EnterInitMode+0x10>
}
 80129f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80129f6:	2201      	movs	r2, #1
 80129f8:	4252      	negs	r2, r2
 80129fa:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80129fc:	f7fd fbfc 	bl	80101f8 <HAL_GetTick>
 8012a00:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a02:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012a04:	26fa      	movs	r6, #250	; 0xfa
 8012a06:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012a08:	6823      	ldr	r3, [r4, #0]
 8012a0a:	68db      	ldr	r3, [r3, #12]
 8012a0c:	421d      	tst	r5, r3
 8012a0e:	d106      	bne.n	8012a1e <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012a10:	f7fd fbf2 	bl	80101f8 <HAL_GetTick>
 8012a14:	1bc0      	subs	r0, r0, r7
 8012a16:	42b0      	cmp	r0, r6
 8012a18:	d9f6      	bls.n	8012a08 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8012a1a:	2003      	movs	r0, #3
 8012a1c:	e7ea      	b.n	80129f4 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8012a1e:	2000      	movs	r0, #0
 8012a20:	e7e8      	b.n	80129f4 <RTC_EnterInitMode+0xe>
	...

08012a24 <HAL_RTC_Init>:
{
 8012a24:	b570      	push	{r4, r5, r6, lr}
 8012a26:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8012a28:	d046      	beq.n	8012ab8 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8012a2a:	7f43      	ldrb	r3, [r0, #29]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d038      	beq.n	8012aa2 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8012a30:	2302      	movs	r3, #2
 8012a32:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012a34:	6823      	ldr	r3, [r4, #0]
 8012a36:	22ca      	movs	r2, #202	; 0xca
 8012a38:	625a      	str	r2, [r3, #36]	; 0x24
 8012a3a:	6823      	ldr	r3, [r4, #0]
 8012a3c:	3a77      	subs	r2, #119	; 0x77
 8012a3e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012a40:	0020      	movs	r0, r4
 8012a42:	f7ff ffd0 	bl	80129e6 <RTC_EnterInitMode>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	d12f      	bne.n	8012aaa <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8012a4a:	6822      	ldr	r2, [r4, #0]
 8012a4c:	6893      	ldr	r3, [r2, #8]
 8012a4e:	491b      	ldr	r1, [pc, #108]	; (8012abc <HAL_RTC_Init+0x98>)
 8012a50:	400b      	ands	r3, r1
 8012a52:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012a54:	6822      	ldr	r2, [r4, #0]
 8012a56:	6891      	ldr	r1, [r2, #8]
 8012a58:	6863      	ldr	r3, [r4, #4]
 8012a5a:	6925      	ldr	r5, [r4, #16]
 8012a5c:	432b      	orrs	r3, r5
 8012a5e:	6965      	ldr	r5, [r4, #20]
 8012a60:	432b      	orrs	r3, r5
 8012a62:	430b      	orrs	r3, r1
 8012a64:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8012a66:	6823      	ldr	r3, [r4, #0]
 8012a68:	68e2      	ldr	r2, [r4, #12]
 8012a6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8012a6c:	6822      	ldr	r2, [r4, #0]
 8012a6e:	6911      	ldr	r1, [r2, #16]
 8012a70:	68a3      	ldr	r3, [r4, #8]
 8012a72:	041b      	lsls	r3, r3, #16
 8012a74:	430b      	orrs	r3, r1
 8012a76:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8012a78:	6822      	ldr	r2, [r4, #0]
 8012a7a:	68d3      	ldr	r3, [r2, #12]
 8012a7c:	2180      	movs	r1, #128	; 0x80
 8012a7e:	438b      	bics	r3, r1
 8012a80:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8012a82:	6822      	ldr	r2, [r4, #0]
 8012a84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012a86:	490e      	ldr	r1, [pc, #56]	; (8012ac0 <HAL_RTC_Init+0x9c>)
 8012a88:	400b      	ands	r3, r1
 8012a8a:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8012a8c:	6822      	ldr	r2, [r4, #0]
 8012a8e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012a90:	69a1      	ldr	r1, [r4, #24]
 8012a92:	430b      	orrs	r3, r1
 8012a94:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012a96:	6823      	ldr	r3, [r4, #0]
 8012a98:	22ff      	movs	r2, #255	; 0xff
 8012a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8012a9c:	2301      	movs	r3, #1
 8012a9e:	7763      	strb	r3, [r4, #29]
}
 8012aa0:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8012aa2:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8012aa4:	f7ff ff84 	bl	80129b0 <HAL_RTC_MspInit>
 8012aa8:	e7c2      	b.n	8012a30 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012aaa:	6823      	ldr	r3, [r4, #0]
 8012aac:	22ff      	movs	r2, #255	; 0xff
 8012aae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012ab0:	2304      	movs	r3, #4
 8012ab2:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8012ab4:	2001      	movs	r0, #1
 8012ab6:	e7f3      	b.n	8012aa0 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 8012ab8:	2001      	movs	r0, #1
 8012aba:	e7f1      	b.n	8012aa0 <HAL_RTC_Init+0x7c>
 8012abc:	ff8fffbf 	.word	0xff8fffbf
 8012ac0:	fffbffff 	.word	0xfffbffff

08012ac4 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 8012ac4:	2809      	cmp	r0, #9
 8012ac6:	d909      	bls.n	8012adc <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 8012ac8:	2300      	movs	r3, #0
  {
    bcdhigh++;
 8012aca:	3301      	adds	r3, #1
    Value -= 10;
 8012acc:	380a      	subs	r0, #10
 8012ace:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 8012ad0:	2809      	cmp	r0, #9
 8012ad2:	d8fa      	bhi.n	8012aca <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 8012ad4:	011b      	lsls	r3, r3, #4
 8012ad6:	4318      	orrs	r0, r3
 8012ad8:	b2c0      	uxtb	r0, r0
}
 8012ada:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 8012adc:	2300      	movs	r3, #0
 8012ade:	e7f9      	b.n	8012ad4 <RTC_ByteToBcd2+0x10>

08012ae0 <HAL_RTC_SetTime>:
{
 8012ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ae2:	46c6      	mov	lr, r8
 8012ae4:	b500      	push	{lr}
 8012ae6:	0004      	movs	r4, r0
 8012ae8:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8012aea:	7f03      	ldrb	r3, [r0, #28]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d100      	bne.n	8012af2 <HAL_RTC_SetTime+0x12>
 8012af0:	e075      	b.n	8012bde <HAL_RTC_SetTime+0xfe>
 8012af2:	2301      	movs	r3, #1
 8012af4:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8012af6:	3301      	adds	r3, #1
 8012af8:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8012afa:	2a00      	cmp	r2, #0
 8012afc:	d144      	bne.n	8012b88 <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012afe:	6803      	ldr	r3, [r0, #0]
 8012b00:	689b      	ldr	r3, [r3, #8]
 8012b02:	065b      	lsls	r3, r3, #25
 8012b04:	d401      	bmi.n	8012b0a <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 8012b06:	2300      	movs	r3, #0
 8012b08:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012b0a:	7830      	ldrb	r0, [r6, #0]
 8012b0c:	f7ff ffda 	bl	8012ac4 <RTC_ByteToBcd2>
 8012b10:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012b12:	7870      	ldrb	r0, [r6, #1]
 8012b14:	f7ff ffd6 	bl	8012ac4 <RTC_ByteToBcd2>
 8012b18:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8012b1a:	78b0      	ldrb	r0, [r6, #2]
 8012b1c:	f7ff ffd2 	bl	8012ac4 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8012b20:	7a35      	ldrb	r5, [r6, #8]
 8012b22:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012b24:	4305      	orrs	r5, r0
 8012b26:	4643      	mov	r3, r8
 8012b28:	0418      	lsls	r0, r3, #16
 8012b2a:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8012b2c:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8012b2e:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012b30:	6823      	ldr	r3, [r4, #0]
 8012b32:	22ca      	movs	r2, #202	; 0xca
 8012b34:	625a      	str	r2, [r3, #36]	; 0x24
 8012b36:	6823      	ldr	r3, [r4, #0]
 8012b38:	3a77      	subs	r2, #119	; 0x77
 8012b3a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012b3c:	0020      	movs	r0, r4
 8012b3e:	f7ff ff52 	bl	80129e6 <RTC_EnterInitMode>
 8012b42:	1e07      	subs	r7, r0, #0
 8012b44:	d131      	bne.n	8012baa <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	4826      	ldr	r0, [pc, #152]	; (8012be4 <HAL_RTC_SetTime+0x104>)
 8012b4a:	4005      	ands	r5, r0
 8012b4c:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8012b4e:	6822      	ldr	r2, [r4, #0]
 8012b50:	6893      	ldr	r3, [r2, #8]
 8012b52:	4925      	ldr	r1, [pc, #148]	; (8012be8 <HAL_RTC_SetTime+0x108>)
 8012b54:	400b      	ands	r3, r1
 8012b56:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012b58:	6822      	ldr	r2, [r4, #0]
 8012b5a:	6891      	ldr	r1, [r2, #8]
 8012b5c:	68f3      	ldr	r3, [r6, #12]
 8012b5e:	6930      	ldr	r0, [r6, #16]
 8012b60:	4303      	orrs	r3, r0
 8012b62:	430b      	orrs	r3, r1
 8012b64:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012b66:	6822      	ldr	r2, [r4, #0]
 8012b68:	68d3      	ldr	r3, [r2, #12]
 8012b6a:	2180      	movs	r1, #128	; 0x80
 8012b6c:	438b      	bics	r3, r1
 8012b6e:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012b70:	6823      	ldr	r3, [r4, #0]
 8012b72:	689b      	ldr	r3, [r3, #8]
 8012b74:	069b      	lsls	r3, r3, #26
 8012b76:	d524      	bpl.n	8012bc2 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012b78:	6823      	ldr	r3, [r4, #0]
 8012b7a:	22ff      	movs	r2, #255	; 0xff
 8012b7c:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8012b7e:	2301      	movs	r3, #1
 8012b80:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8012b82:	2300      	movs	r3, #0
 8012b84:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8012b86:	e018      	b.n	8012bba <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8012b88:	6803      	ldr	r3, [r0, #0]
 8012b8a:	689b      	ldr	r3, [r3, #8]
 8012b8c:	065b      	lsls	r3, r3, #25
 8012b8e:	d401      	bmi.n	8012b94 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8012b90:	2300      	movs	r3, #0
 8012b92:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012b94:	7835      	ldrb	r5, [r6, #0]
 8012b96:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012b98:	7870      	ldrb	r0, [r6, #1]
 8012b9a:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012b9c:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8012b9e:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8012ba0:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8012ba2:	7a30      	ldrb	r0, [r6, #8]
 8012ba4:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8012ba6:	4305      	orrs	r5, r0
 8012ba8:	e7c2      	b.n	8012b30 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012baa:	6823      	ldr	r3, [r4, #0]
 8012bac:	22ff      	movs	r2, #255	; 0xff
 8012bae:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012bb0:	2304      	movs	r3, #4
 8012bb2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012bb4:	2300      	movs	r3, #0
 8012bb6:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012bb8:	2701      	movs	r7, #1
}
 8012bba:	0038      	movs	r0, r7
 8012bbc:	bc04      	pop	{r2}
 8012bbe:	4690      	mov	r8, r2
 8012bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012bc2:	0020      	movs	r0, r4
 8012bc4:	f7ff fef5 	bl	80129b2 <HAL_RTC_WaitForSynchro>
 8012bc8:	2800      	cmp	r0, #0
 8012bca:	d0d5      	beq.n	8012b78 <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012bcc:	6823      	ldr	r3, [r4, #0]
 8012bce:	22ff      	movs	r2, #255	; 0xff
 8012bd0:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012bd2:	2304      	movs	r3, #4
 8012bd4:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012bda:	2701      	movs	r7, #1
 8012bdc:	e7ed      	b.n	8012bba <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 8012bde:	2702      	movs	r7, #2
 8012be0:	e7eb      	b.n	8012bba <HAL_RTC_SetTime+0xda>
 8012be2:	46c0      	nop			; (mov r8, r8)
 8012be4:	007f7f7f 	.word	0x007f7f7f
 8012be8:	fffbffff 	.word	0xfffbffff

08012bec <HAL_RTC_SetDate>:
{
 8012bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012bee:	46c6      	mov	lr, r8
 8012bf0:	b500      	push	{lr}
 8012bf2:	0004      	movs	r4, r0
 8012bf4:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 8012bf6:	7f03      	ldrb	r3, [r0, #28]
 8012bf8:	2b01      	cmp	r3, #1
 8012bfa:	d03a      	beq.n	8012c72 <HAL_RTC_SetDate+0x86>
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8012c00:	3301      	adds	r3, #1
 8012c02:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8012c04:	2a00      	cmp	r2, #0
 8012c06:	d136      	bne.n	8012c76 <HAL_RTC_SetDate+0x8a>
 8012c08:	784b      	ldrb	r3, [r1, #1]
 8012c0a:	06da      	lsls	r2, r3, #27
 8012c0c:	d503      	bpl.n	8012c16 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8012c0e:	2210      	movs	r2, #16
 8012c10:	4393      	bics	r3, r2
 8012c12:	330a      	adds	r3, #10
 8012c14:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012c16:	78f0      	ldrb	r0, [r6, #3]
 8012c18:	f7ff ff54 	bl	8012ac4 <RTC_ByteToBcd2>
 8012c1c:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012c1e:	7870      	ldrb	r0, [r6, #1]
 8012c20:	f7ff ff50 	bl	8012ac4 <RTC_ByteToBcd2>
 8012c24:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8012c26:	78b0      	ldrb	r0, [r6, #2]
 8012c28:	f7ff ff4c 	bl	8012ac4 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8012c2c:	7835      	ldrb	r5, [r6, #0]
 8012c2e:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012c30:	4305      	orrs	r5, r0
 8012c32:	4643      	mov	r3, r8
 8012c34:	0418      	lsls	r0, r3, #16
 8012c36:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8012c38:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8012c3a:	433d      	orrs	r5, r7
 8012c3c:	e025      	b.n	8012c8a <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	22ff      	movs	r2, #255	; 0xff
 8012c42:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8012c44:	2304      	movs	r3, #4
 8012c46:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012c48:	2300      	movs	r3, #0
 8012c4a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8012c4c:	2601      	movs	r6, #1
}
 8012c4e:	0030      	movs	r0, r6
 8012c50:	bc04      	pop	{r2}
 8012c52:	4690      	mov	r8, r2
 8012c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012c56:	0020      	movs	r0, r4
 8012c58:	f7ff feab 	bl	80129b2 <HAL_RTC_WaitForSynchro>
 8012c5c:	2800      	cmp	r0, #0
 8012c5e:	d02c      	beq.n	8012cba <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	22ff      	movs	r2, #255	; 0xff
 8012c64:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012c66:	2304      	movs	r3, #4
 8012c68:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8012c6e:	2601      	movs	r6, #1
 8012c70:	e7ed      	b.n	8012c4e <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8012c72:	2602      	movs	r6, #2
 8012c74:	e7eb      	b.n	8012c4e <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012c76:	78cd      	ldrb	r5, [r1, #3]
 8012c78:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8012c7a:	7848      	ldrb	r0, [r1, #1]
 8012c7c:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012c7e:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8012c80:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8012c82:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8012c84:	7808      	ldrb	r0, [r1, #0]
 8012c86:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8012c88:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c8a:	6823      	ldr	r3, [r4, #0]
 8012c8c:	22ca      	movs	r2, #202	; 0xca
 8012c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8012c90:	6823      	ldr	r3, [r4, #0]
 8012c92:	3a77      	subs	r2, #119	; 0x77
 8012c94:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8012c96:	0020      	movs	r0, r4
 8012c98:	f7ff fea5 	bl	80129e6 <RTC_EnterInitMode>
 8012c9c:	1e06      	subs	r6, r0, #0
 8012c9e:	d1ce      	bne.n	8012c3e <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012ca0:	6823      	ldr	r3, [r4, #0]
 8012ca2:	480a      	ldr	r0, [pc, #40]	; (8012ccc <HAL_RTC_SetDate+0xe0>)
 8012ca4:	4005      	ands	r5, r0
 8012ca6:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8012ca8:	6822      	ldr	r2, [r4, #0]
 8012caa:	68d3      	ldr	r3, [r2, #12]
 8012cac:	2180      	movs	r1, #128	; 0x80
 8012cae:	438b      	bics	r3, r1
 8012cb0:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	689b      	ldr	r3, [r3, #8]
 8012cb6:	069b      	lsls	r3, r3, #26
 8012cb8:	d5cd      	bpl.n	8012c56 <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	22ff      	movs	r2, #255	; 0xff
 8012cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8012cc8:	e7c1      	b.n	8012c4e <HAL_RTC_SetDate+0x62>
 8012cca:	46c0      	nop			; (mov r8, r8)
 8012ccc:	00ffff3f 	.word	0x00ffff3f

08012cd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8012cd0:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8012cd2:	0900      	lsrs	r0, r0, #4
 8012cd4:	0083      	lsls	r3, r0, #2
 8012cd6:	181b      	adds	r3, r3, r0
 8012cd8:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 8012cda:	200f      	movs	r0, #15
 8012cdc:	4010      	ands	r0, r2
 8012cde:	1818      	adds	r0, r3, r0
 8012ce0:	b2c0      	uxtb	r0, r0
}
 8012ce2:	4770      	bx	lr

08012ce4 <HAL_RTC_GetTime>:
{
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012ce8:	6803      	ldr	r3, [r0, #0]
 8012cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cec:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8012cee:	6803      	ldr	r3, [r0, #0]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	490e      	ldr	r1, [pc, #56]	; (8012d2c <HAL_RTC_GetTime+0x48>)
 8012cf4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8012cf6:	0c19      	lsrs	r1, r3, #16
 8012cf8:	203f      	movs	r0, #63	; 0x3f
 8012cfa:	4008      	ands	r0, r1
 8012cfc:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8012cfe:	0a1e      	lsrs	r6, r3, #8
 8012d00:	b2f6      	uxtb	r6, r6
 8012d02:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8012d04:	b2dc      	uxtb	r4, r3
 8012d06:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8012d08:	2340      	movs	r3, #64	; 0x40
 8012d0a:	400b      	ands	r3, r1
 8012d0c:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8012d0e:	2a00      	cmp	r2, #0
 8012d10:	d10a      	bne.n	8012d28 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012d12:	f7ff ffdd 	bl	8012cd0 <RTC_Bcd2ToByte>
 8012d16:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012d18:	0030      	movs	r0, r6
 8012d1a:	f7ff ffd9 	bl	8012cd0 <RTC_Bcd2ToByte>
 8012d1e:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8012d20:	0020      	movs	r0, r4
 8012d22:	f7ff ffd5 	bl	8012cd0 <RTC_Bcd2ToByte>
 8012d26:	70a8      	strb	r0, [r5, #2]
}
 8012d28:	2000      	movs	r0, #0
 8012d2a:	bd70      	pop	{r4, r5, r6, pc}
 8012d2c:	007f7f7f 	.word	0x007f7f7f

08012d30 <HAL_RTC_GetDate>:
{
 8012d30:	b570      	push	{r4, r5, r6, lr}
 8012d32:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8012d34:	6803      	ldr	r3, [r0, #0]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	490d      	ldr	r1, [pc, #52]	; (8012d70 <HAL_RTC_GetDate+0x40>)
 8012d3a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8012d3c:	0c18      	lsrs	r0, r3, #16
 8012d3e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8012d40:	04dd      	lsls	r5, r3, #19
 8012d42:	0eed      	lsrs	r5, r5, #27
 8012d44:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8012d46:	b2de      	uxtb	r6, r3
 8012d48:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 8012d4a:	041b      	lsls	r3, r3, #16
 8012d4c:	0f5b      	lsrs	r3, r3, #29
 8012d4e:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8012d50:	2a00      	cmp	r2, #0
 8012d52:	d10a      	bne.n	8012d6a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012d54:	f7ff ffbc 	bl	8012cd0 <RTC_Bcd2ToByte>
 8012d58:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012d5a:	0028      	movs	r0, r5
 8012d5c:	f7ff ffb8 	bl	8012cd0 <RTC_Bcd2ToByte>
 8012d60:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8012d62:	0030      	movs	r0, r6
 8012d64:	f7ff ffb4 	bl	8012cd0 <RTC_Bcd2ToByte>
 8012d68:	70a0      	strb	r0, [r4, #2]
}
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	bd70      	pop	{r4, r5, r6, pc}
 8012d6e:	46c0      	nop			; (mov r8, r8)
 8012d70:	00ffff3f 	.word	0x00ffff3f

08012d74 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012d74:	6803      	ldr	r3, [r0, #0]
 8012d76:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012d78:	0089      	lsls	r1, r1, #2
 8012d7a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8012d7c:	600a      	str	r2, [r1, #0]
}
 8012d7e:	4770      	bx	lr

08012d80 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8012d80:	6803      	ldr	r3, [r0, #0]
 8012d82:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8012d84:	0089      	lsls	r1, r1, #2
 8012d86:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8012d88:	6808      	ldr	r0, [r1, #0]
}
 8012d8a:	4770      	bx	lr

08012d8c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8012d8c:	4770      	bx	lr

08012d8e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012d8e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8012d90:	2239      	movs	r2, #57	; 0x39
 8012d92:	2302      	movs	r3, #2
 8012d94:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8012d96:	6804      	ldr	r4, [r0, #0]
 8012d98:	6823      	ldr	r3, [r4, #0]
 8012d9a:	2101      	movs	r1, #1
 8012d9c:	430b      	orrs	r3, r1
 8012d9e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8012da0:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8012da2:	2000      	movs	r0, #0
 8012da4:	bd10      	pop	{r4, pc}
	...

08012da8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8012da8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012daa:	4a36      	ldr	r2, [pc, #216]	; (8012e84 <TIM_Base_SetConfig+0xdc>)
 8012dac:	4290      	cmp	r0, r2
 8012dae:	d022      	beq.n	8012df6 <TIM_Base_SetConfig+0x4e>
 8012db0:	2280      	movs	r2, #128	; 0x80
 8012db2:	05d2      	lsls	r2, r2, #23
 8012db4:	4290      	cmp	r0, r2
 8012db6:	d014      	beq.n	8012de2 <TIM_Base_SetConfig+0x3a>
 8012db8:	4a33      	ldr	r2, [pc, #204]	; (8012e88 <TIM_Base_SetConfig+0xe0>)
 8012dba:	4290      	cmp	r0, r2
 8012dbc:	d016      	beq.n	8012dec <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012dbe:	4a33      	ldr	r2, [pc, #204]	; (8012e8c <TIM_Base_SetConfig+0xe4>)
 8012dc0:	4290      	cmp	r0, r2
 8012dc2:	d040      	beq.n	8012e46 <TIM_Base_SetConfig+0x9e>
 8012dc4:	4a32      	ldr	r2, [pc, #200]	; (8012e90 <TIM_Base_SetConfig+0xe8>)
 8012dc6:	4290      	cmp	r0, r2
 8012dc8:	d047      	beq.n	8012e5a <TIM_Base_SetConfig+0xb2>
 8012dca:	4a32      	ldr	r2, [pc, #200]	; (8012e94 <TIM_Base_SetConfig+0xec>)
 8012dcc:	4290      	cmp	r0, r2
 8012dce:	d04e      	beq.n	8012e6e <TIM_Base_SetConfig+0xc6>
 8012dd0:	4a31      	ldr	r2, [pc, #196]	; (8012e98 <TIM_Base_SetConfig+0xf0>)
 8012dd2:	4290      	cmp	r0, r2
 8012dd4:	d02d      	beq.n	8012e32 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8012dd6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012dd8:	688b      	ldr	r3, [r1, #8]
 8012dda:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012ddc:	680b      	ldr	r3, [r1, #0]
 8012dde:	6283      	str	r3, [r0, #40]	; 0x28
 8012de0:	e024      	b.n	8012e2c <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012de2:	2270      	movs	r2, #112	; 0x70
 8012de4:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012de6:	684a      	ldr	r2, [r1, #4]
 8012de8:	4313      	orrs	r3, r2
 8012dea:	e008      	b.n	8012dfe <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012dec:	2270      	movs	r2, #112	; 0x70
 8012dee:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012df0:	684a      	ldr	r2, [r1, #4]
 8012df2:	4313      	orrs	r3, r2
 8012df4:	e003      	b.n	8012dfe <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012df6:	2270      	movs	r2, #112	; 0x70
 8012df8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8012dfa:	684a      	ldr	r2, [r1, #4]
 8012dfc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8012dfe:	4a27      	ldr	r2, [pc, #156]	; (8012e9c <TIM_Base_SetConfig+0xf4>)
 8012e00:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e02:	68ca      	ldr	r2, [r1, #12]
 8012e04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e08:	688b      	ldr	r3, [r1, #8]
 8012e0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e0c:	680b      	ldr	r3, [r1, #0]
 8012e0e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012e10:	4b1c      	ldr	r3, [pc, #112]	; (8012e84 <TIM_Base_SetConfig+0xdc>)
 8012e12:	4298      	cmp	r0, r3
 8012e14:	d008      	beq.n	8012e28 <TIM_Base_SetConfig+0x80>
 8012e16:	4b1e      	ldr	r3, [pc, #120]	; (8012e90 <TIM_Base_SetConfig+0xe8>)
 8012e18:	4298      	cmp	r0, r3
 8012e1a:	d005      	beq.n	8012e28 <TIM_Base_SetConfig+0x80>
 8012e1c:	4b1d      	ldr	r3, [pc, #116]	; (8012e94 <TIM_Base_SetConfig+0xec>)
 8012e1e:	4298      	cmp	r0, r3
 8012e20:	d002      	beq.n	8012e28 <TIM_Base_SetConfig+0x80>
 8012e22:	4b1d      	ldr	r3, [pc, #116]	; (8012e98 <TIM_Base_SetConfig+0xf0>)
 8012e24:	4298      	cmp	r0, r3
 8012e26:	d101      	bne.n	8012e2c <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012e28:	690b      	ldr	r3, [r1, #16]
 8012e2a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	6143      	str	r3, [r0, #20]
}
 8012e30:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e32:	4a1a      	ldr	r2, [pc, #104]	; (8012e9c <TIM_Base_SetConfig+0xf4>)
 8012e34:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e36:	68ca      	ldr	r2, [r1, #12]
 8012e38:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e3a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e3c:	688b      	ldr	r3, [r1, #8]
 8012e3e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e40:	680b      	ldr	r3, [r1, #0]
 8012e42:	6283      	str	r3, [r0, #40]	; 0x28
 8012e44:	e7f0      	b.n	8012e28 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e46:	4a15      	ldr	r2, [pc, #84]	; (8012e9c <TIM_Base_SetConfig+0xf4>)
 8012e48:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e4a:	68ca      	ldr	r2, [r1, #12]
 8012e4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e50:	688b      	ldr	r3, [r1, #8]
 8012e52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e54:	680b      	ldr	r3, [r1, #0]
 8012e56:	6283      	str	r3, [r0, #40]	; 0x28
 8012e58:	e7e8      	b.n	8012e2c <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e5a:	4a10      	ldr	r2, [pc, #64]	; (8012e9c <TIM_Base_SetConfig+0xf4>)
 8012e5c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e5e:	68ca      	ldr	r2, [r1, #12]
 8012e60:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e62:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e64:	688b      	ldr	r3, [r1, #8]
 8012e66:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e68:	680b      	ldr	r3, [r1, #0]
 8012e6a:	6283      	str	r3, [r0, #40]	; 0x28
 8012e6c:	e7dc      	b.n	8012e28 <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8012e6e:	4a0b      	ldr	r2, [pc, #44]	; (8012e9c <TIM_Base_SetConfig+0xf4>)
 8012e70:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012e72:	68ca      	ldr	r2, [r1, #12]
 8012e74:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8012e76:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012e78:	688b      	ldr	r3, [r1, #8]
 8012e7a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8012e7c:	680b      	ldr	r3, [r1, #0]
 8012e7e:	6283      	str	r3, [r0, #40]	; 0x28
 8012e80:	e7d2      	b.n	8012e28 <TIM_Base_SetConfig+0x80>
 8012e82:	46c0      	nop			; (mov r8, r8)
 8012e84:	40012c00 	.word	0x40012c00
 8012e88:	40000400 	.word	0x40000400
 8012e8c:	40002000 	.word	0x40002000
 8012e90:	40014000 	.word	0x40014000
 8012e94:	40014400 	.word	0x40014400
 8012e98:	40014800 	.word	0x40014800
 8012e9c:	fffffcff 	.word	0xfffffcff

08012ea0 <HAL_TIM_Base_Init>:
{
 8012ea0:	b570      	push	{r4, r5, r6, lr}
 8012ea2:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8012ea4:	d014      	beq.n	8012ed0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8012ea6:	2339      	movs	r3, #57	; 0x39
 8012ea8:	5cc3      	ldrb	r3, [r0, r3]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d00a      	beq.n	8012ec4 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8012eae:	2539      	movs	r5, #57	; 0x39
 8012eb0:	2302      	movs	r3, #2
 8012eb2:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012eb4:	1d21      	adds	r1, r4, #4
 8012eb6:	6820      	ldr	r0, [r4, #0]
 8012eb8:	f7ff ff76 	bl	8012da8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8012ec0:	2000      	movs	r0, #0
}
 8012ec2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8012ec4:	3338      	adds	r3, #56	; 0x38
 8012ec6:	2200      	movs	r2, #0
 8012ec8:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8012eca:	f7ff ff5f 	bl	8012d8c <HAL_TIM_Base_MspInit>
 8012ece:	e7ee      	b.n	8012eae <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8012ed0:	2001      	movs	r0, #1
 8012ed2:	e7f6      	b.n	8012ec2 <HAL_TIM_Base_Init+0x22>

08012ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8012ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8012ed6:	2338      	movs	r3, #56	; 0x38
 8012ed8:	5cc3      	ldrb	r3, [r0, r3]
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d01e      	beq.n	8012f1c <HAL_TIMEx_MasterConfigSynchronization+0x48>
 8012ede:	2238      	movs	r2, #56	; 0x38
 8012ee0:	2501      	movs	r5, #1
 8012ee2:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8012ee4:	2439      	movs	r4, #57	; 0x39
 8012ee6:	2302      	movs	r3, #2
 8012ee8:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8012eea:	6806      	ldr	r6, [r0, #0]
 8012eec:	6873      	ldr	r3, [r6, #4]
 8012eee:	2770      	movs	r7, #112	; 0x70
 8012ef0:	43bb      	bics	r3, r7
 8012ef2:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8012ef4:	6806      	ldr	r6, [r0, #0]
 8012ef6:	6873      	ldr	r3, [r6, #4]
 8012ef8:	680f      	ldr	r7, [r1, #0]
 8012efa:	433b      	orrs	r3, r7
 8012efc:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8012efe:	6806      	ldr	r6, [r0, #0]
 8012f00:	68b3      	ldr	r3, [r6, #8]
 8012f02:	2780      	movs	r7, #128	; 0x80
 8012f04:	43bb      	bics	r3, r7
 8012f06:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8012f08:	6806      	ldr	r6, [r0, #0]
 8012f0a:	68b3      	ldr	r3, [r6, #8]
 8012f0c:	6849      	ldr	r1, [r1, #4]
 8012f0e:	430b      	orrs	r3, r1
 8012f10:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8012f12:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8012f14:	2300      	movs	r3, #0
 8012f16:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 8012f18:	2000      	movs	r0, #0
}
 8012f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8012f1c:	2002      	movs	r0, #2
 8012f1e:	e7fc      	b.n	8012f1a <HAL_TIMEx_MasterConfigSynchronization+0x46>

08012f20 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8012f20:	4770      	bx	lr

08012f22 <HAL_UART_DeInit>:
{
 8012f22:	b570      	push	{r4, r5, r6, lr}
 8012f24:	0004      	movs	r4, r0
    return HAL_ERROR;
 8012f26:	2001      	movs	r0, #1
  if(huart == NULL)
 8012f28:	2c00      	cmp	r4, #0
 8012f2a:	d016      	beq.n	8012f5a <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8012f2c:	2669      	movs	r6, #105	; 0x69
 8012f2e:	2302      	movs	r3, #2
 8012f30:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8012f32:	6822      	ldr	r2, [r4, #0]
 8012f34:	6813      	ldr	r3, [r2, #0]
 8012f36:	2101      	movs	r1, #1
 8012f38:	438b      	bics	r3, r1
 8012f3a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8012f3c:	6823      	ldr	r3, [r4, #0]
 8012f3e:	2500      	movs	r5, #0
 8012f40:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8012f42:	6823      	ldr	r3, [r4, #0]
 8012f44:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8012f46:	6823      	ldr	r3, [r4, #0]
 8012f48:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8012f4a:	0020      	movs	r0, r4
 8012f4c:	f7ff ffe8 	bl	8012f20 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f50:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8012f52:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8012f54:	2368      	movs	r3, #104	; 0x68
 8012f56:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8012f58:	2000      	movs	r0, #0
}
 8012f5a:	bd70      	pop	{r4, r5, r6, pc}

08012f5c <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012f5c:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012f5e:	2369      	movs	r3, #105	; 0x69
 8012f60:	5cc3      	ldrb	r3, [r0, r3]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d004      	beq.n	8012f70 <HAL_UART_Transmit_IT+0x14>
 8012f66:	2369      	movs	r3, #105	; 0x69
 8012f68:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012f6a:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8012f6c:	2c22      	cmp	r4, #34	; 0x22
 8012f6e:	d127      	bne.n	8012fc0 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8012f70:	2900      	cmp	r1, #0
 8012f72:	d02b      	beq.n	8012fcc <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8012f74:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012f76:	2a00      	cmp	r2, #0
 8012f78:	d022      	beq.n	8012fc0 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012f7a:	3367      	adds	r3, #103	; 0x67
 8012f7c:	5cc3      	ldrb	r3, [r0, r3]
 8012f7e:	2b01      	cmp	r3, #1
 8012f80:	d026      	beq.n	8012fd0 <HAL_UART_Transmit_IT+0x74>
 8012f82:	2368      	movs	r3, #104	; 0x68
 8012f84:	2401      	movs	r4, #1
 8012f86:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 8012f88:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8012f8a:	3b18      	subs	r3, #24
 8012f8c:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8012f8e:	3302      	adds	r3, #2
 8012f90:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012f92:	2300      	movs	r3, #0
 8012f94:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8012f96:	3369      	adds	r3, #105	; 0x69
 8012f98:	5cc3      	ldrb	r3, [r0, r3]
 8012f9a:	2b22      	cmp	r3, #34	; 0x22
 8012f9c:	d012      	beq.n	8012fc4 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8012f9e:	2369      	movs	r3, #105	; 0x69
 8012fa0:	2212      	movs	r2, #18
 8012fa2:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8012fa4:	6802      	ldr	r2, [r0, #0]
 8012fa6:	6893      	ldr	r3, [r2, #8]
 8012fa8:	2101      	movs	r1, #1
 8012faa:	430b      	orrs	r3, r1
 8012fac:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8012fae:	2368      	movs	r3, #104	; 0x68
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8012fb4:	6802      	ldr	r2, [r0, #0]
 8012fb6:	6813      	ldr	r3, [r2, #0]
 8012fb8:	317f      	adds	r1, #127	; 0x7f
 8012fba:	430b      	orrs	r3, r1
 8012fbc:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8012fbe:	2300      	movs	r3, #0
  }
}
 8012fc0:	0018      	movs	r0, r3
 8012fc2:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8012fc4:	3347      	adds	r3, #71	; 0x47
 8012fc6:	2232      	movs	r2, #50	; 0x32
 8012fc8:	54c2      	strb	r2, [r0, r3]
 8012fca:	e7eb      	b.n	8012fa4 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	e7f7      	b.n	8012fc0 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 8012fd0:	2302      	movs	r3, #2
 8012fd2:	e7f5      	b.n	8012fc0 <HAL_UART_Transmit_IT+0x64>

08012fd4 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012fd4:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012fd6:	2369      	movs	r3, #105	; 0x69
 8012fd8:	5cc3      	ldrb	r3, [r0, r3]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d004      	beq.n	8012fe8 <HAL_UART_Receive_IT+0x14>
 8012fde:	2369      	movs	r3, #105	; 0x69
 8012fe0:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8012fe2:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8012fe4:	2c12      	cmp	r4, #18
 8012fe6:	d14e      	bne.n	8013086 <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 8012fe8:	2900      	cmp	r1, #0
 8012fea:	d05d      	beq.n	80130a8 <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 8012fec:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 8012fee:	2a00      	cmp	r2, #0
 8012ff0:	d049      	beq.n	8013086 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8012ff2:	3367      	adds	r3, #103	; 0x67
 8012ff4:	5cc3      	ldrb	r3, [r0, r3]
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d058      	beq.n	80130ac <HAL_UART_Receive_IT+0xd8>
 8012ffa:	2368      	movs	r3, #104	; 0x68
 8012ffc:	2401      	movs	r4, #1
 8012ffe:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 8013000:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 8013002:	3b10      	subs	r3, #16
 8013004:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8013006:	3302      	adds	r3, #2
 8013008:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 801300a:	6883      	ldr	r3, [r0, #8]
 801300c:	2280      	movs	r2, #128	; 0x80
 801300e:	0152      	lsls	r2, r2, #5
 8013010:	4293      	cmp	r3, r2
 8013012:	d008      	beq.n	8013026 <HAL_UART_Receive_IT+0x52>
 8013014:	2b00      	cmp	r3, #0
 8013016:	d115      	bne.n	8013044 <HAL_UART_Receive_IT+0x70>
 8013018:	6903      	ldr	r3, [r0, #16]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d10e      	bne.n	801303c <HAL_UART_Receive_IT+0x68>
 801301e:	335c      	adds	r3, #92	; 0x5c
 8013020:	22ff      	movs	r2, #255	; 0xff
 8013022:	52c2      	strh	r2, [r0, r3]
 8013024:	e012      	b.n	801304c <HAL_UART_Receive_IT+0x78>
 8013026:	6903      	ldr	r3, [r0, #16]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d103      	bne.n	8013034 <HAL_UART_Receive_IT+0x60>
 801302c:	335c      	adds	r3, #92	; 0x5c
 801302e:	4a20      	ldr	r2, [pc, #128]	; (80130b0 <HAL_UART_Receive_IT+0xdc>)
 8013030:	52c2      	strh	r2, [r0, r3]
 8013032:	e00b      	b.n	801304c <HAL_UART_Receive_IT+0x78>
 8013034:	235c      	movs	r3, #92	; 0x5c
 8013036:	22ff      	movs	r2, #255	; 0xff
 8013038:	52c2      	strh	r2, [r0, r3]
 801303a:	e007      	b.n	801304c <HAL_UART_Receive_IT+0x78>
 801303c:	235c      	movs	r3, #92	; 0x5c
 801303e:	227f      	movs	r2, #127	; 0x7f
 8013040:	52c2      	strh	r2, [r0, r3]
 8013042:	e003      	b.n	801304c <HAL_UART_Receive_IT+0x78>
 8013044:	2280      	movs	r2, #128	; 0x80
 8013046:	0552      	lsls	r2, r2, #21
 8013048:	4293      	cmp	r3, r2
 801304a:	d01e      	beq.n	801308a <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801304c:	2300      	movs	r3, #0
 801304e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013050:	3369      	adds	r3, #105	; 0x69
 8013052:	5cc3      	ldrb	r3, [r0, r3]
 8013054:	2b12      	cmp	r3, #18
 8013056:	d023      	beq.n	80130a0 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013058:	2369      	movs	r3, #105	; 0x69
 801305a:	2222      	movs	r2, #34	; 0x22
 801305c:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801305e:	6802      	ldr	r2, [r0, #0]
 8013060:	6811      	ldr	r1, [r2, #0]
 8013062:	2380      	movs	r3, #128	; 0x80
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	430b      	orrs	r3, r1
 8013068:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801306a:	6802      	ldr	r2, [r0, #0]
 801306c:	6893      	ldr	r3, [r2, #8]
 801306e:	2101      	movs	r1, #1
 8013070:	430b      	orrs	r3, r1
 8013072:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013074:	2368      	movs	r3, #104	; 0x68
 8013076:	2200      	movs	r2, #0
 8013078:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801307a:	6802      	ldr	r2, [r0, #0]
 801307c:	6813      	ldr	r3, [r2, #0]
 801307e:	311f      	adds	r1, #31
 8013080:	430b      	orrs	r3, r1
 8013082:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8013084:	2300      	movs	r3, #0
  }
}
 8013086:	0018      	movs	r0, r3
 8013088:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 801308a:	6903      	ldr	r3, [r0, #16]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d103      	bne.n	8013098 <HAL_UART_Receive_IT+0xc4>
 8013090:	335c      	adds	r3, #92	; 0x5c
 8013092:	227f      	movs	r2, #127	; 0x7f
 8013094:	52c2      	strh	r2, [r0, r3]
 8013096:	e7d9      	b.n	801304c <HAL_UART_Receive_IT+0x78>
 8013098:	235c      	movs	r3, #92	; 0x5c
 801309a:	223f      	movs	r2, #63	; 0x3f
 801309c:	52c2      	strh	r2, [r0, r3]
 801309e:	e7d5      	b.n	801304c <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80130a0:	3357      	adds	r3, #87	; 0x57
 80130a2:	2232      	movs	r2, #50	; 0x32
 80130a4:	54c2      	strb	r2, [r0, r3]
 80130a6:	e7da      	b.n	801305e <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 80130a8:	2301      	movs	r3, #1
 80130aa:	e7ec      	b.n	8013086 <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80130ac:	2302      	movs	r3, #2
 80130ae:	e7ea      	b.n	8013086 <HAL_UART_Receive_IT+0xb2>
 80130b0:	000001ff 	.word	0x000001ff

080130b4 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80130b4:	b510      	push	{r4, lr}
 80130b6:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80130b8:	2069      	movs	r0, #105	; 0x69
 80130ba:	5c20      	ldrb	r0, [r4, r0]
 80130bc:	2801      	cmp	r0, #1
 80130be:	d004      	beq.n	80130ca <HAL_UART_Receive_DMA+0x16>
 80130c0:	2369      	movs	r3, #105	; 0x69
 80130c2:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80130c4:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80130c6:	2b12      	cmp	r3, #18
 80130c8:	d130      	bne.n	801312c <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 80130ca:	2900      	cmp	r1, #0
 80130cc:	d033      	beq.n	8013136 <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 80130ce:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80130d0:	2a00      	cmp	r2, #0
 80130d2:	d02b      	beq.n	801312c <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 80130d4:	2368      	movs	r3, #104	; 0x68
 80130d6:	5ce3      	ldrb	r3, [r4, r3]
 80130d8:	2b01      	cmp	r3, #1
 80130da:	d02e      	beq.n	801313a <HAL_UART_Receive_DMA+0x86>
 80130dc:	2368      	movs	r3, #104	; 0x68
 80130de:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 80130e0:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 80130e2:	3b10      	subs	r3, #16
 80130e4:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80130e6:	2300      	movs	r3, #0
 80130e8:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 80130ea:	3369      	adds	r3, #105	; 0x69
 80130ec:	5ce3      	ldrb	r3, [r4, r3]
 80130ee:	2b12      	cmp	r3, #18
 80130f0:	d01d      	beq.n	801312e <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 80130f2:	2369      	movs	r3, #105	; 0x69
 80130f4:	2022      	movs	r0, #34	; 0x22
 80130f6:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80130f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80130fa:	4811      	ldr	r0, [pc, #68]	; (8013140 <HAL_UART_Receive_DMA+0x8c>)
 80130fc:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80130fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013100:	4810      	ldr	r0, [pc, #64]	; (8013144 <HAL_UART_Receive_DMA+0x90>)
 8013102:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013106:	4810      	ldr	r0, [pc, #64]	; (8013148 <HAL_UART_Receive_DMA+0x94>)
 8013108:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 801310a:	6820      	ldr	r0, [r4, #0]
 801310c:	3024      	adds	r0, #36	; 0x24
 801310e:	0013      	movs	r3, r2
 8013110:	000a      	movs	r2, r1
 8013112:	0001      	movs	r1, r0
 8013114:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013116:	f7fd fd1b 	bl	8010b50 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 801311a:	6822      	ldr	r2, [r4, #0]
 801311c:	6893      	ldr	r3, [r2, #8]
 801311e:	2140      	movs	r1, #64	; 0x40
 8013120:	430b      	orrs	r3, r1
 8013122:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8013124:	2368      	movs	r3, #104	; 0x68
 8013126:	2200      	movs	r2, #0
 8013128:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 801312a:	2000      	movs	r0, #0
  }
}
 801312c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801312e:	3357      	adds	r3, #87	; 0x57
 8013130:	3031      	adds	r0, #49	; 0x31
 8013132:	54e0      	strb	r0, [r4, r3]
 8013134:	e7e0      	b.n	80130f8 <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8013136:	2001      	movs	r0, #1
 8013138:	e7f8      	b.n	801312c <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 801313a:	2002      	movs	r0, #2
 801313c:	e7f6      	b.n	801312c <HAL_UART_Receive_DMA+0x78>
 801313e:	46c0      	nop			; (mov r8, r8)
 8013140:	0801314d 	.word	0x0801314d
 8013144:	08013189 	.word	0x08013189
 8013148:	08013193 	.word	0x08013193

0801314c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 801314c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801314e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013150:	6802      	ldr	r2, [r0, #0]
 8013152:	6812      	ldr	r2, [r2, #0]
 8013154:	0692      	lsls	r2, r2, #26
 8013156:	d40e      	bmi.n	8013176 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013158:	225a      	movs	r2, #90	; 0x5a
 801315a:	2100      	movs	r1, #0
 801315c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801315e:	6819      	ldr	r1, [r3, #0]
 8013160:	688a      	ldr	r2, [r1, #8]
 8013162:	2040      	movs	r0, #64	; 0x40
 8013164:	4382      	bics	r2, r0
 8013166:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013168:	2269      	movs	r2, #105	; 0x69
 801316a:	5c9a      	ldrb	r2, [r3, r2]
 801316c:	2a32      	cmp	r2, #50	; 0x32
 801316e:	d006      	beq.n	801317e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013170:	2269      	movs	r2, #105	; 0x69
 8013172:	2101      	movs	r1, #1
 8013174:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013176:	0018      	movs	r0, r3
 8013178:	f7fa fa80 	bl	800d67c <HAL_UART_RxCpltCallback>
}
 801317c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801317e:	3237      	adds	r2, #55	; 0x37
 8013180:	2112      	movs	r1, #18
 8013182:	5499      	strb	r1, [r3, r2]
 8013184:	e7f7      	b.n	8013176 <UART_DMAReceiveCplt+0x2a>

08013186 <HAL_UART_RxHalfCpltCallback>:
}
 8013186:	4770      	bx	lr

08013188 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013188:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 801318a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801318c:	f7ff fffb 	bl	8013186 <HAL_UART_RxHalfCpltCallback>
}
 8013190:	bd10      	pop	{r4, pc}

08013192 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013192:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013194:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013196:	2300      	movs	r3, #0
 8013198:	225a      	movs	r2, #90	; 0x5a
 801319a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 801319c:	3a08      	subs	r2, #8
 801319e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 80131a0:	3369      	adds	r3, #105	; 0x69
 80131a2:	3a51      	subs	r2, #81	; 0x51
 80131a4:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80131a6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80131a8:	320f      	adds	r2, #15
 80131aa:	4313      	orrs	r3, r2
 80131ac:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 80131ae:	f7fa fa3f 	bl	800d630 <HAL_UART_ErrorCallback>
}
 80131b2:	bd10      	pop	{r4, pc}

080131b4 <UART_SetConfig>:
{
 80131b4:	b570      	push	{r4, r5, r6, lr}
 80131b6:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80131b8:	6801      	ldr	r1, [r0, #0]
 80131ba:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80131bc:	6883      	ldr	r3, [r0, #8]
 80131be:	6900      	ldr	r0, [r0, #16]
 80131c0:	4303      	orrs	r3, r0
 80131c2:	6960      	ldr	r0, [r4, #20]
 80131c4:	4303      	orrs	r3, r0
 80131c6:	69e0      	ldr	r0, [r4, #28]
 80131c8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80131ca:	487e      	ldr	r0, [pc, #504]	; (80133c4 <UART_SetConfig+0x210>)
 80131cc:	4002      	ands	r2, r0
 80131ce:	4313      	orrs	r3, r2
 80131d0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80131d2:	6822      	ldr	r2, [r4, #0]
 80131d4:	6853      	ldr	r3, [r2, #4]
 80131d6:	497c      	ldr	r1, [pc, #496]	; (80133c8 <UART_SetConfig+0x214>)
 80131d8:	400b      	ands	r3, r1
 80131da:	68e1      	ldr	r1, [r4, #12]
 80131dc:	430b      	orrs	r3, r1
 80131de:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80131e0:	6821      	ldr	r1, [r4, #0]
 80131e2:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80131e4:	69a3      	ldr	r3, [r4, #24]
 80131e6:	6a20      	ldr	r0, [r4, #32]
 80131e8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80131ea:	4878      	ldr	r0, [pc, #480]	; (80133cc <UART_SetConfig+0x218>)
 80131ec:	4002      	ands	r2, r0
 80131ee:	4313      	orrs	r3, r2
 80131f0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80131f2:	6825      	ldr	r5, [r4, #0]
 80131f4:	4b76      	ldr	r3, [pc, #472]	; (80133d0 <UART_SetConfig+0x21c>)
 80131f6:	429d      	cmp	r5, r3
 80131f8:	d022      	beq.n	8013240 <UART_SetConfig+0x8c>
 80131fa:	4b76      	ldr	r3, [pc, #472]	; (80133d4 <UART_SetConfig+0x220>)
 80131fc:	429d      	cmp	r5, r3
 80131fe:	d034      	beq.n	801326a <UART_SetConfig+0xb6>
 8013200:	4b75      	ldr	r3, [pc, #468]	; (80133d8 <UART_SetConfig+0x224>)
 8013202:	429d      	cmp	r5, r3
 8013204:	d100      	bne.n	8013208 <UART_SetConfig+0x54>
 8013206:	e06b      	b.n	80132e0 <UART_SetConfig+0x12c>
 8013208:	4b74      	ldr	r3, [pc, #464]	; (80133dc <UART_SetConfig+0x228>)
 801320a:	429d      	cmp	r5, r3
 801320c:	d100      	bne.n	8013210 <UART_SetConfig+0x5c>
 801320e:	e08e      	b.n	801332e <UART_SetConfig+0x17a>
 8013210:	4b73      	ldr	r3, [pc, #460]	; (80133e0 <UART_SetConfig+0x22c>)
 8013212:	429d      	cmp	r5, r3
 8013214:	d100      	bne.n	8013218 <UART_SetConfig+0x64>
 8013216:	e08a      	b.n	801332e <UART_SetConfig+0x17a>
 8013218:	4b72      	ldr	r3, [pc, #456]	; (80133e4 <UART_SetConfig+0x230>)
 801321a:	429d      	cmp	r5, r3
 801321c:	d100      	bne.n	8013220 <UART_SetConfig+0x6c>
 801321e:	e086      	b.n	801332e <UART_SetConfig+0x17a>
 8013220:	4b71      	ldr	r3, [pc, #452]	; (80133e8 <UART_SetConfig+0x234>)
 8013222:	429d      	cmp	r5, r3
 8013224:	d100      	bne.n	8013228 <UART_SetConfig+0x74>
 8013226:	e082      	b.n	801332e <UART_SetConfig+0x17a>
 8013228:	4b70      	ldr	r3, [pc, #448]	; (80133ec <UART_SetConfig+0x238>)
 801322a:	429d      	cmp	r5, r3
 801322c:	d100      	bne.n	8013230 <UART_SetConfig+0x7c>
 801322e:	e07e      	b.n	801332e <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013230:	2380      	movs	r3, #128	; 0x80
 8013232:	021b      	lsls	r3, r3, #8
 8013234:	69e2      	ldr	r2, [r4, #28]
 8013236:	429a      	cmp	r2, r3
 8013238:	d100      	bne.n	801323c <UART_SetConfig+0x88>
 801323a:	e072      	b.n	8013322 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 801323c:	2001      	movs	r0, #1
 801323e:	e04e      	b.n	80132de <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013240:	4b6b      	ldr	r3, [pc, #428]	; (80133f0 <UART_SetConfig+0x23c>)
 8013242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013244:	2303      	movs	r3, #3
 8013246:	4013      	ands	r3, r2
 8013248:	2b01      	cmp	r3, #1
 801324a:	d100      	bne.n	801324e <UART_SetConfig+0x9a>
 801324c:	e09a      	b.n	8013384 <UART_SetConfig+0x1d0>
 801324e:	2b00      	cmp	r3, #0
 8013250:	d02f      	beq.n	80132b2 <UART_SetConfig+0xfe>
 8013252:	2b02      	cmp	r3, #2
 8013254:	d100      	bne.n	8013258 <UART_SetConfig+0xa4>
 8013256:	e0a5      	b.n	80133a4 <UART_SetConfig+0x1f0>
 8013258:	2b03      	cmp	r3, #3
 801325a:	d01a      	beq.n	8013292 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801325c:	2380      	movs	r3, #128	; 0x80
 801325e:	021b      	lsls	r3, r3, #8
 8013260:	69e2      	ldr	r2, [r4, #28]
 8013262:	429a      	cmp	r2, r3
 8013264:	d060      	beq.n	8013328 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8013266:	2001      	movs	r0, #1
 8013268:	e039      	b.n	80132de <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801326a:	4b61      	ldr	r3, [pc, #388]	; (80133f0 <UART_SetConfig+0x23c>)
 801326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801326e:	22c0      	movs	r2, #192	; 0xc0
 8013270:	0292      	lsls	r2, r2, #10
 8013272:	4013      	ands	r3, r2
 8013274:	2280      	movs	r2, #128	; 0x80
 8013276:	0252      	lsls	r2, r2, #9
 8013278:	4293      	cmp	r3, r2
 801327a:	d100      	bne.n	801327e <UART_SetConfig+0xca>
 801327c:	e082      	b.n	8013384 <UART_SetConfig+0x1d0>
 801327e:	d916      	bls.n	80132ae <UART_SetConfig+0xfa>
 8013280:	2280      	movs	r2, #128	; 0x80
 8013282:	0292      	lsls	r2, r2, #10
 8013284:	4293      	cmp	r3, r2
 8013286:	d100      	bne.n	801328a <UART_SetConfig+0xd6>
 8013288:	e08c      	b.n	80133a4 <UART_SetConfig+0x1f0>
 801328a:	22c0      	movs	r2, #192	; 0xc0
 801328c:	0292      	lsls	r2, r2, #10
 801328e:	4293      	cmp	r3, r2
 8013290:	d1e4      	bne.n	801325c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013292:	2380      	movs	r3, #128	; 0x80
 8013294:	021b      	lsls	r3, r3, #8
 8013296:	69e2      	ldr	r2, [r4, #28]
 8013298:	429a      	cmp	r2, r3
 801329a:	d038      	beq.n	801330e <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 801329c:	6861      	ldr	r1, [r4, #4]
 801329e:	4855      	ldr	r0, [pc, #340]	; (80133f4 <UART_SetConfig+0x240>)
 80132a0:	f7ec ff56 	bl	8000150 <__udivsi3>
 80132a4:	0400      	lsls	r0, r0, #16
 80132a6:	0c00      	lsrs	r0, r0, #16
 80132a8:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80132aa:	2000      	movs	r0, #0
        break;
 80132ac:	e017      	b.n	80132de <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d1d4      	bne.n	801325c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80132b2:	2380      	movs	r3, #128	; 0x80
 80132b4:	021b      	lsls	r3, r3, #8
 80132b6:	69e2      	ldr	r2, [r4, #28]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d13d      	bne.n	8013338 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80132bc:	f7ff faca 	bl	8012854 <HAL_RCC_GetPCLK1Freq>
 80132c0:	0040      	lsls	r0, r0, #1
 80132c2:	6861      	ldr	r1, [r4, #4]
 80132c4:	f7ec ff44 	bl	8000150 <__udivsi3>
 80132c8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80132ca:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 80132cc:	220f      	movs	r2, #15
 80132ce:	0019      	movs	r1, r3
 80132d0:	4391      	bics	r1, r2
 80132d2:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 80132d4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 80132d6:	071b      	lsls	r3, r3, #28
 80132d8:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80132da:	4313      	orrs	r3, r2
 80132dc:	60cb      	str	r3, [r1, #12]
}
 80132de:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80132e0:	4b43      	ldr	r3, [pc, #268]	; (80133f0 <UART_SetConfig+0x23c>)
 80132e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132e4:	22c0      	movs	r2, #192	; 0xc0
 80132e6:	0312      	lsls	r2, r2, #12
 80132e8:	4013      	ands	r3, r2
 80132ea:	2280      	movs	r2, #128	; 0x80
 80132ec:	02d2      	lsls	r2, r2, #11
 80132ee:	4293      	cmp	r3, r2
 80132f0:	d02d      	beq.n	801334e <UART_SetConfig+0x19a>
 80132f2:	d913      	bls.n	801331c <UART_SetConfig+0x168>
 80132f4:	2280      	movs	r2, #128	; 0x80
 80132f6:	0312      	lsls	r2, r2, #12
 80132f8:	4293      	cmp	r3, r2
 80132fa:	d036      	beq.n	801336a <UART_SetConfig+0x1b6>
 80132fc:	22c0      	movs	r2, #192	; 0xc0
 80132fe:	0312      	lsls	r2, r2, #12
 8013300:	4293      	cmp	r3, r2
 8013302:	d1ab      	bne.n	801325c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013304:	2380      	movs	r3, #128	; 0x80
 8013306:	021b      	lsls	r3, r3, #8
 8013308:	69e2      	ldr	r2, [r4, #28]
 801330a:	429a      	cmp	r2, r3
 801330c:	d1c6      	bne.n	801329c <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801330e:	6861      	ldr	r1, [r4, #4]
 8013310:	4839      	ldr	r0, [pc, #228]	; (80133f8 <UART_SetConfig+0x244>)
 8013312:	f7ec ff1d 	bl	8000150 <__udivsi3>
 8013316:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013318:	2000      	movs	r0, #0
        break;
 801331a:	e7d7      	b.n	80132cc <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801331c:	2b00      	cmp	r3, #0
 801331e:	d0c8      	beq.n	80132b2 <UART_SetConfig+0xfe>
 8013320:	e79c      	b.n	801325c <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8013322:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013324:	2300      	movs	r3, #0
 8013326:	e7d1      	b.n	80132cc <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8013328:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 801332a:	2300      	movs	r3, #0
 801332c:	e7ce      	b.n	80132cc <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801332e:	2380      	movs	r3, #128	; 0x80
 8013330:	021b      	lsls	r3, r3, #8
 8013332:	69e2      	ldr	r2, [r4, #28]
 8013334:	429a      	cmp	r2, r3
 8013336:	d0c1      	beq.n	80132bc <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013338:	f7ff fa8c 	bl	8012854 <HAL_RCC_GetPCLK1Freq>
 801333c:	6825      	ldr	r5, [r4, #0]
 801333e:	6861      	ldr	r1, [r4, #4]
 8013340:	f7ec ff06 	bl	8000150 <__udivsi3>
 8013344:	0400      	lsls	r0, r0, #16
 8013346:	0c00      	lsrs	r0, r0, #16
 8013348:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801334a:	2000      	movs	r0, #0
  return ret;
 801334c:	e7c7      	b.n	80132de <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801334e:	2380      	movs	r3, #128	; 0x80
 8013350:	021b      	lsls	r3, r3, #8
 8013352:	69e2      	ldr	r2, [r4, #28]
 8013354:	429a      	cmp	r2, r3
 8013356:	d11a      	bne.n	801338e <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013358:	f7ff fa18 	bl	801278c <HAL_RCC_GetSysClockFreq>
 801335c:	0040      	lsls	r0, r0, #1
 801335e:	6861      	ldr	r1, [r4, #4]
 8013360:	f7ec fef6 	bl	8000150 <__udivsi3>
 8013364:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013366:	2000      	movs	r0, #0
        break;
 8013368:	e7b0      	b.n	80132cc <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801336a:	2380      	movs	r3, #128	; 0x80
 801336c:	021b      	lsls	r3, r3, #8
 801336e:	69e2      	ldr	r2, [r4, #28]
 8013370:	429a      	cmp	r2, r3
 8013372:	d11c      	bne.n	80133ae <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013374:	6861      	ldr	r1, [r4, #4]
 8013376:	2080      	movs	r0, #128	; 0x80
 8013378:	0240      	lsls	r0, r0, #9
 801337a:	f7ec fee9 	bl	8000150 <__udivsi3>
 801337e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013380:	2000      	movs	r0, #0
        break;
 8013382:	e7a3      	b.n	80132cc <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013384:	2380      	movs	r3, #128	; 0x80
 8013386:	021b      	lsls	r3, r3, #8
 8013388:	69e2      	ldr	r2, [r4, #28]
 801338a:	429a      	cmp	r2, r3
 801338c:	d0e4      	beq.n	8013358 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801338e:	f7ff f9fd 	bl	801278c <HAL_RCC_GetSysClockFreq>
 8013392:	6825      	ldr	r5, [r4, #0]
 8013394:	6861      	ldr	r1, [r4, #4]
 8013396:	f7ec fedb 	bl	8000150 <__udivsi3>
 801339a:	0400      	lsls	r0, r0, #16
 801339c:	0c00      	lsrs	r0, r0, #16
 801339e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80133a0:	2000      	movs	r0, #0
        break;
 80133a2:	e79c      	b.n	80132de <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80133a4:	2380      	movs	r3, #128	; 0x80
 80133a6:	021b      	lsls	r3, r3, #8
 80133a8:	69e2      	ldr	r2, [r4, #28]
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d0e2      	beq.n	8013374 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 80133ae:	6861      	ldr	r1, [r4, #4]
 80133b0:	2080      	movs	r0, #128	; 0x80
 80133b2:	0200      	lsls	r0, r0, #8
 80133b4:	f7ec fecc 	bl	8000150 <__udivsi3>
 80133b8:	0400      	lsls	r0, r0, #16
 80133ba:	0c00      	lsrs	r0, r0, #16
 80133bc:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80133be:	2000      	movs	r0, #0
        break;
 80133c0:	e78d      	b.n	80132de <UART_SetConfig+0x12a>
 80133c2:	46c0      	nop			; (mov r8, r8)
 80133c4:	efff69f3 	.word	0xefff69f3
 80133c8:	ffffcfff 	.word	0xffffcfff
 80133cc:	fffff4ff 	.word	0xfffff4ff
 80133d0:	40013800 	.word	0x40013800
 80133d4:	40004400 	.word	0x40004400
 80133d8:	40004800 	.word	0x40004800
 80133dc:	40004c00 	.word	0x40004c00
 80133e0:	40005000 	.word	0x40005000
 80133e4:	40011400 	.word	0x40011400
 80133e8:	40011800 	.word	0x40011800
 80133ec:	40011c00 	.word	0x40011c00
 80133f0:	40021000 	.word	0x40021000
 80133f4:	007a1200 	.word	0x007a1200
 80133f8:	00f42400 	.word	0x00f42400

080133fc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80133fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80133fe:	07db      	lsls	r3, r3, #31
 8013400:	d506      	bpl.n	8013410 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013402:	6802      	ldr	r2, [r0, #0]
 8013404:	6853      	ldr	r3, [r2, #4]
 8013406:	492c      	ldr	r1, [pc, #176]	; (80134b8 <UART_AdvFeatureConfig+0xbc>)
 8013408:	400b      	ands	r3, r1
 801340a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801340c:	430b      	orrs	r3, r1
 801340e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013410:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013412:	079b      	lsls	r3, r3, #30
 8013414:	d506      	bpl.n	8013424 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013416:	6802      	ldr	r2, [r0, #0]
 8013418:	6853      	ldr	r3, [r2, #4]
 801341a:	4928      	ldr	r1, [pc, #160]	; (80134bc <UART_AdvFeatureConfig+0xc0>)
 801341c:	400b      	ands	r3, r1
 801341e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013420:	430b      	orrs	r3, r1
 8013422:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013424:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013426:	075b      	lsls	r3, r3, #29
 8013428:	d506      	bpl.n	8013438 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801342a:	6802      	ldr	r2, [r0, #0]
 801342c:	6853      	ldr	r3, [r2, #4]
 801342e:	4924      	ldr	r1, [pc, #144]	; (80134c0 <UART_AdvFeatureConfig+0xc4>)
 8013430:	400b      	ands	r3, r1
 8013432:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013434:	430b      	orrs	r3, r1
 8013436:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013438:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801343a:	071b      	lsls	r3, r3, #28
 801343c:	d506      	bpl.n	801344c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801343e:	6802      	ldr	r2, [r0, #0]
 8013440:	6853      	ldr	r3, [r2, #4]
 8013442:	4920      	ldr	r1, [pc, #128]	; (80134c4 <UART_AdvFeatureConfig+0xc8>)
 8013444:	400b      	ands	r3, r1
 8013446:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013448:	430b      	orrs	r3, r1
 801344a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801344c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801344e:	06db      	lsls	r3, r3, #27
 8013450:	d506      	bpl.n	8013460 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013452:	6802      	ldr	r2, [r0, #0]
 8013454:	6893      	ldr	r3, [r2, #8]
 8013456:	491c      	ldr	r1, [pc, #112]	; (80134c8 <UART_AdvFeatureConfig+0xcc>)
 8013458:	400b      	ands	r3, r1
 801345a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801345c:	430b      	orrs	r3, r1
 801345e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013460:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013462:	069b      	lsls	r3, r3, #26
 8013464:	d506      	bpl.n	8013474 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013466:	6802      	ldr	r2, [r0, #0]
 8013468:	6893      	ldr	r3, [r2, #8]
 801346a:	4918      	ldr	r1, [pc, #96]	; (80134cc <UART_AdvFeatureConfig+0xd0>)
 801346c:	400b      	ands	r3, r1
 801346e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013470:	430b      	orrs	r3, r1
 8013472:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013474:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013476:	065b      	lsls	r3, r3, #25
 8013478:	d50b      	bpl.n	8013492 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801347a:	6802      	ldr	r2, [r0, #0]
 801347c:	6853      	ldr	r3, [r2, #4]
 801347e:	4914      	ldr	r1, [pc, #80]	; (80134d0 <UART_AdvFeatureConfig+0xd4>)
 8013480:	400b      	ands	r3, r1
 8013482:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013484:	430b      	orrs	r3, r1
 8013486:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013488:	2380      	movs	r3, #128	; 0x80
 801348a:	035b      	lsls	r3, r3, #13
 801348c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801348e:	429a      	cmp	r2, r3
 8013490:	d00a      	beq.n	80134a8 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013492:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013494:	061b      	lsls	r3, r3, #24
 8013496:	d506      	bpl.n	80134a6 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013498:	6802      	ldr	r2, [r0, #0]
 801349a:	6853      	ldr	r3, [r2, #4]
 801349c:	490d      	ldr	r1, [pc, #52]	; (80134d4 <UART_AdvFeatureConfig+0xd8>)
 801349e:	400b      	ands	r3, r1
 80134a0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80134a2:	430b      	orrs	r3, r1
 80134a4:	6053      	str	r3, [r2, #4]
}
 80134a6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80134a8:	6802      	ldr	r2, [r0, #0]
 80134aa:	6853      	ldr	r3, [r2, #4]
 80134ac:	490a      	ldr	r1, [pc, #40]	; (80134d8 <UART_AdvFeatureConfig+0xdc>)
 80134ae:	400b      	ands	r3, r1
 80134b0:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80134b2:	430b      	orrs	r3, r1
 80134b4:	6053      	str	r3, [r2, #4]
 80134b6:	e7ec      	b.n	8013492 <UART_AdvFeatureConfig+0x96>
 80134b8:	fffdffff 	.word	0xfffdffff
 80134bc:	fffeffff 	.word	0xfffeffff
 80134c0:	fffbffff 	.word	0xfffbffff
 80134c4:	ffff7fff 	.word	0xffff7fff
 80134c8:	ffffefff 	.word	0xffffefff
 80134cc:	ffffdfff 	.word	0xffffdfff
 80134d0:	ffefffff 	.word	0xffefffff
 80134d4:	fff7ffff 	.word	0xfff7ffff
 80134d8:	ff9fffff 	.word	0xff9fffff

080134dc <UART_WaitOnFlagUntilTimeout>:
{
 80134dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134de:	46c6      	mov	lr, r8
 80134e0:	b500      	push	{lr}
 80134e2:	0006      	movs	r6, r0
 80134e4:	000c      	movs	r4, r1
 80134e6:	0017      	movs	r7, r2
 80134e8:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80134ea:	f7fc fe85 	bl	80101f8 <HAL_GetTick>
 80134ee:	4680      	mov	r8, r0
  if(Status == RESET)
 80134f0:	2f00      	cmp	r7, #0
 80134f2:	d029      	beq.n	8013548 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80134f4:	6832      	ldr	r2, [r6, #0]
 80134f6:	69d3      	ldr	r3, [r2, #28]
 80134f8:	4023      	ands	r3, r4
 80134fa:	42a3      	cmp	r3, r4
 80134fc:	d152      	bne.n	80135a4 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 80134fe:	1c6b      	adds	r3, r5, #1
 8013500:	d0f9      	beq.n	80134f6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013502:	2d00      	cmp	r5, #0
 8013504:	d005      	beq.n	8013512 <UART_WaitOnFlagUntilTimeout+0x36>
 8013506:	f7fc fe77 	bl	80101f8 <HAL_GetTick>
 801350a:	4643      	mov	r3, r8
 801350c:	1ac0      	subs	r0, r0, r3
 801350e:	42a8      	cmp	r0, r5
 8013510:	d9f0      	bls.n	80134f4 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013512:	6832      	ldr	r2, [r6, #0]
 8013514:	6813      	ldr	r3, [r2, #0]
 8013516:	2180      	movs	r1, #128	; 0x80
 8013518:	438b      	bics	r3, r1
 801351a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801351c:	6832      	ldr	r2, [r6, #0]
 801351e:	6813      	ldr	r3, [r2, #0]
 8013520:	3960      	subs	r1, #96	; 0x60
 8013522:	438b      	bics	r3, r1
 8013524:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013526:	6832      	ldr	r2, [r6, #0]
 8013528:	6813      	ldr	r3, [r2, #0]
 801352a:	491f      	ldr	r1, [pc, #124]	; (80135a8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 801352c:	400b      	ands	r3, r1
 801352e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013530:	6831      	ldr	r1, [r6, #0]
 8013532:	688b      	ldr	r3, [r1, #8]
 8013534:	2201      	movs	r2, #1
 8013536:	4393      	bics	r3, r2
 8013538:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801353a:	2369      	movs	r3, #105	; 0x69
 801353c:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801353e:	3b01      	subs	r3, #1
 8013540:	2200      	movs	r2, #0
 8013542:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013544:	2003      	movs	r0, #3
 8013546:	e02a      	b.n	801359e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013548:	6832      	ldr	r2, [r6, #0]
 801354a:	69d3      	ldr	r3, [r2, #28]
 801354c:	4023      	ands	r3, r4
 801354e:	42a3      	cmp	r3, r4
 8013550:	d024      	beq.n	801359c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8013552:	1c6b      	adds	r3, r5, #1
 8013554:	d0f9      	beq.n	801354a <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013556:	2d00      	cmp	r5, #0
 8013558:	d005      	beq.n	8013566 <UART_WaitOnFlagUntilTimeout+0x8a>
 801355a:	f7fc fe4d 	bl	80101f8 <HAL_GetTick>
 801355e:	4643      	mov	r3, r8
 8013560:	1ac0      	subs	r0, r0, r3
 8013562:	42a8      	cmp	r0, r5
 8013564:	d9f0      	bls.n	8013548 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013566:	6832      	ldr	r2, [r6, #0]
 8013568:	6813      	ldr	r3, [r2, #0]
 801356a:	2180      	movs	r1, #128	; 0x80
 801356c:	438b      	bics	r3, r1
 801356e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013570:	6832      	ldr	r2, [r6, #0]
 8013572:	6813      	ldr	r3, [r2, #0]
 8013574:	3960      	subs	r1, #96	; 0x60
 8013576:	438b      	bics	r3, r1
 8013578:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801357a:	6832      	ldr	r2, [r6, #0]
 801357c:	6813      	ldr	r3, [r2, #0]
 801357e:	490a      	ldr	r1, [pc, #40]	; (80135a8 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013580:	400b      	ands	r3, r1
 8013582:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013584:	6831      	ldr	r1, [r6, #0]
 8013586:	688b      	ldr	r3, [r1, #8]
 8013588:	2201      	movs	r2, #1
 801358a:	4393      	bics	r3, r2
 801358c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801358e:	2369      	movs	r3, #105	; 0x69
 8013590:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8013592:	3b01      	subs	r3, #1
 8013594:	2200      	movs	r2, #0
 8013596:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8013598:	2003      	movs	r0, #3
 801359a:	e000      	b.n	801359e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 801359c:	2000      	movs	r0, #0
}
 801359e:	bc04      	pop	{r2}
 80135a0:	4690      	mov	r8, r2
 80135a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 80135a4:	2000      	movs	r0, #0
 80135a6:	e7fa      	b.n	801359e <UART_WaitOnFlagUntilTimeout+0xc2>
 80135a8:	fffffeff 	.word	0xfffffeff

080135ac <HAL_UART_Transmit>:
{
 80135ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135ae:	b083      	sub	sp, #12
 80135b0:	0004      	movs	r4, r0
 80135b2:	000e      	movs	r6, r1
 80135b4:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80135b6:	2369      	movs	r3, #105	; 0x69
 80135b8:	5cc3      	ldrb	r3, [r0, r3]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d004      	beq.n	80135c8 <HAL_UART_Transmit+0x1c>
 80135be:	2369      	movs	r3, #105	; 0x69
 80135c0:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 80135c2:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80135c4:	2b22      	cmp	r3, #34	; 0x22
 80135c6:	d153      	bne.n	8013670 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 80135c8:	2e00      	cmp	r6, #0
 80135ca:	d050      	beq.n	801366e <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 80135cc:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 80135ce:	2a00      	cmp	r2, #0
 80135d0:	d04e      	beq.n	8013670 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80135d2:	2368      	movs	r3, #104	; 0x68
 80135d4:	5ce3      	ldrb	r3, [r4, r3]
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	d04c      	beq.n	8013674 <HAL_UART_Transmit+0xc8>
 80135da:	2368      	movs	r3, #104	; 0x68
 80135dc:	2101      	movs	r1, #1
 80135de:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80135e0:	2300      	movs	r3, #0
 80135e2:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80135e4:	3369      	adds	r3, #105	; 0x69
 80135e6:	5ce3      	ldrb	r3, [r4, r3]
 80135e8:	2b22      	cmp	r3, #34	; 0x22
 80135ea:	d008      	beq.n	80135fe <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80135ec:	2369      	movs	r3, #105	; 0x69
 80135ee:	2112      	movs	r1, #18
 80135f0:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80135f2:	2350      	movs	r3, #80	; 0x50
 80135f4:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80135f6:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80135f8:	2580      	movs	r5, #128	; 0x80
 80135fa:	016d      	lsls	r5, r5, #5
 80135fc:	e00a      	b.n	8013614 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80135fe:	3347      	adds	r3, #71	; 0x47
 8013600:	3131      	adds	r1, #49	; 0x31
 8013602:	54e1      	strb	r1, [r4, r3]
 8013604:	e7f5      	b.n	80135f2 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013606:	7833      	ldrb	r3, [r6, #0]
 8013608:	6822      	ldr	r2, [r4, #0]
 801360a:	8513      	strh	r3, [r2, #40]	; 0x28
 801360c:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 801360e:	5be2      	ldrh	r2, [r4, r7]
 8013610:	2a00      	cmp	r2, #0
 8013612:	d016      	beq.n	8013642 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013614:	3a01      	subs	r2, #1
 8013616:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013618:	9b01      	ldr	r3, [sp, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	2180      	movs	r1, #128	; 0x80
 801361e:	0020      	movs	r0, r4
 8013620:	f7ff ff5c 	bl	80134dc <UART_WaitOnFlagUntilTimeout>
 8013624:	2800      	cmp	r0, #0
 8013626:	d127      	bne.n	8013678 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013628:	68a3      	ldr	r3, [r4, #8]
 801362a:	42ab      	cmp	r3, r5
 801362c:	d1eb      	bne.n	8013606 <HAL_UART_Transmit+0x5a>
 801362e:	6923      	ldr	r3, [r4, #16]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1e8      	bne.n	8013606 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013634:	8833      	ldrh	r3, [r6, #0]
 8013636:	05db      	lsls	r3, r3, #23
 8013638:	0ddb      	lsrs	r3, r3, #23
 801363a:	6822      	ldr	r2, [r4, #0]
 801363c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 801363e:	3602      	adds	r6, #2
 8013640:	e7e5      	b.n	801360e <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013642:	9b01      	ldr	r3, [sp, #4]
 8013644:	2140      	movs	r1, #64	; 0x40
 8013646:	0020      	movs	r0, r4
 8013648:	f7ff ff48 	bl	80134dc <UART_WaitOnFlagUntilTimeout>
 801364c:	2800      	cmp	r0, #0
 801364e:	d115      	bne.n	801367c <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013650:	2369      	movs	r3, #105	; 0x69
 8013652:	5ce3      	ldrb	r3, [r4, r3]
 8013654:	2b32      	cmp	r3, #50	; 0x32
 8013656:	d006      	beq.n	8013666 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013658:	2369      	movs	r3, #105	; 0x69
 801365a:	2201      	movs	r2, #1
 801365c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801365e:	2368      	movs	r3, #104	; 0x68
 8013660:	2200      	movs	r2, #0
 8013662:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013664:	e004      	b.n	8013670 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013666:	3337      	adds	r3, #55	; 0x37
 8013668:	2222      	movs	r2, #34	; 0x22
 801366a:	54e2      	strb	r2, [r4, r3]
 801366c:	e7f7      	b.n	801365e <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 801366e:	2001      	movs	r0, #1
}
 8013670:	b003      	add	sp, #12
 8013672:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8013674:	2002      	movs	r0, #2
 8013676:	e7fb      	b.n	8013670 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013678:	2003      	movs	r0, #3
 801367a:	e7f9      	b.n	8013670 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 801367c:	2003      	movs	r0, #3
 801367e:	e7f7      	b.n	8013670 <HAL_UART_Transmit+0xc4>

08013680 <UART_CheckIdleState>:
{
 8013680:	b510      	push	{r4, lr}
 8013682:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013684:	2300      	movs	r3, #0
 8013686:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013688:	6803      	ldr	r3, [r0, #0]
 801368a:	4a18      	ldr	r2, [pc, #96]	; (80136ec <UART_CheckIdleState+0x6c>)
 801368c:	4293      	cmp	r3, r2
 801368e:	d005      	beq.n	801369c <UART_CheckIdleState+0x1c>
 8013690:	4a17      	ldr	r2, [pc, #92]	; (80136f0 <UART_CheckIdleState+0x70>)
 8013692:	4293      	cmp	r3, r2
 8013694:	d002      	beq.n	801369c <UART_CheckIdleState+0x1c>
 8013696:	4a17      	ldr	r2, [pc, #92]	; (80136f4 <UART_CheckIdleState+0x74>)
 8013698:	4293      	cmp	r3, r2
 801369a:	d106      	bne.n	80136aa <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	071b      	lsls	r3, r3, #28
 80136a0:	d40b      	bmi.n	80136ba <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80136a2:	6823      	ldr	r3, [r4, #0]
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	075b      	lsls	r3, r3, #29
 80136a8:	d413      	bmi.n	80136d2 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 80136aa:	2369      	movs	r3, #105	; 0x69
 80136ac:	2201      	movs	r2, #1
 80136ae:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 80136b0:	3b01      	subs	r3, #1
 80136b2:	2200      	movs	r2, #0
 80136b4:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80136b6:	2000      	movs	r0, #0
}
 80136b8:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80136ba:	23fa      	movs	r3, #250	; 0xfa
 80136bc:	2180      	movs	r1, #128	; 0x80
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	2200      	movs	r2, #0
 80136c2:	0389      	lsls	r1, r1, #14
 80136c4:	0020      	movs	r0, r4
 80136c6:	f7ff ff09 	bl	80134dc <UART_WaitOnFlagUntilTimeout>
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d0e9      	beq.n	80136a2 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 80136ce:	2003      	movs	r0, #3
 80136d0:	e7f2      	b.n	80136b8 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80136d2:	23fa      	movs	r3, #250	; 0xfa
 80136d4:	2180      	movs	r1, #128	; 0x80
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	2200      	movs	r2, #0
 80136da:	03c9      	lsls	r1, r1, #15
 80136dc:	0020      	movs	r0, r4
 80136de:	f7ff fefd 	bl	80134dc <UART_WaitOnFlagUntilTimeout>
 80136e2:	2800      	cmp	r0, #0
 80136e4:	d0e1      	beq.n	80136aa <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80136e6:	2003      	movs	r0, #3
 80136e8:	e7e6      	b.n	80136b8 <UART_CheckIdleState+0x38>
 80136ea:	46c0      	nop			; (mov r8, r8)
 80136ec:	40013800 	.word	0x40013800
 80136f0:	40004400 	.word	0x40004400
 80136f4:	40004800 	.word	0x40004800

080136f8 <HAL_UART_Init>:
{
 80136f8:	b510      	push	{r4, lr}
 80136fa:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80136fc:	d030      	beq.n	8013760 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80136fe:	2369      	movs	r3, #105	; 0x69
 8013700:	5cc3      	ldrb	r3, [r0, r3]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d022      	beq.n	801374c <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013706:	2369      	movs	r3, #105	; 0x69
 8013708:	2202      	movs	r2, #2
 801370a:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 801370c:	6822      	ldr	r2, [r4, #0]
 801370e:	6813      	ldr	r3, [r2, #0]
 8013710:	2101      	movs	r1, #1
 8013712:	438b      	bics	r3, r1
 8013714:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013716:	0020      	movs	r0, r4
 8013718:	f7ff fd4c 	bl	80131b4 <UART_SetConfig>
 801371c:	2801      	cmp	r0, #1
 801371e:	d014      	beq.n	801374a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013720:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013722:	2b00      	cmp	r3, #0
 8013724:	d118      	bne.n	8013758 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013726:	6822      	ldr	r2, [r4, #0]
 8013728:	6853      	ldr	r3, [r2, #4]
 801372a:	490e      	ldr	r1, [pc, #56]	; (8013764 <HAL_UART_Init+0x6c>)
 801372c:	400b      	ands	r3, r1
 801372e:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013730:	6822      	ldr	r2, [r4, #0]
 8013732:	6893      	ldr	r3, [r2, #8]
 8013734:	212a      	movs	r1, #42	; 0x2a
 8013736:	438b      	bics	r3, r1
 8013738:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 801373a:	6822      	ldr	r2, [r4, #0]
 801373c:	6813      	ldr	r3, [r2, #0]
 801373e:	3929      	subs	r1, #41	; 0x29
 8013740:	430b      	orrs	r3, r1
 8013742:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013744:	0020      	movs	r0, r4
 8013746:	f7ff ff9b 	bl	8013680 <UART_CheckIdleState>
}
 801374a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801374c:	3368      	adds	r3, #104	; 0x68
 801374e:	2200      	movs	r2, #0
 8013750:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013752:	f7fa fb25 	bl	800dda0 <HAL_UART_MspInit>
 8013756:	e7d6      	b.n	8013706 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013758:	0020      	movs	r0, r4
 801375a:	f7ff fe4f 	bl	80133fc <UART_AdvFeatureConfig>
 801375e:	e7e2      	b.n	8013726 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013760:	2001      	movs	r0, #1
 8013762:	e7f2      	b.n	801374a <HAL_UART_Init+0x52>
 8013764:	ffffb7ff 	.word	0xffffb7ff

08013768 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013768:	2369      	movs	r3, #105	; 0x69
 801376a:	5cc3      	ldrb	r3, [r0, r3]
 801376c:	2b12      	cmp	r3, #18
 801376e:	d004      	beq.n	801377a <UART_Transmit_IT+0x12>
 8013770:	2369      	movs	r3, #105	; 0x69
 8013772:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8013774:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013776:	2a32      	cmp	r2, #50	; 0x32
 8013778:	d113      	bne.n	80137a2 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 801377a:	2352      	movs	r3, #82	; 0x52
 801377c:	5ac3      	ldrh	r3, [r0, r3]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d011      	beq.n	80137a6 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013782:	2380      	movs	r3, #128	; 0x80
 8013784:	015b      	lsls	r3, r3, #5
 8013786:	6882      	ldr	r2, [r0, #8]
 8013788:	429a      	cmp	r2, r3
 801378a:	d018      	beq.n	80137be <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801378c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801378e:	1c5a      	adds	r2, r3, #1
 8013790:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	6802      	ldr	r2, [r0, #0]
 8013796:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8013798:	2252      	movs	r2, #82	; 0x52
 801379a:	5a83      	ldrh	r3, [r0, r2]
 801379c:	3b01      	subs	r3, #1
 801379e:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 80137a0:	2300      	movs	r3, #0
  }
}
 80137a2:	0018      	movs	r0, r3
 80137a4:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80137a6:	6802      	ldr	r2, [r0, #0]
 80137a8:	6813      	ldr	r3, [r2, #0]
 80137aa:	2180      	movs	r1, #128	; 0x80
 80137ac:	438b      	bics	r3, r1
 80137ae:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80137b0:	6802      	ldr	r2, [r0, #0]
 80137b2:	6813      	ldr	r3, [r2, #0]
 80137b4:	3940      	subs	r1, #64	; 0x40
 80137b6:	430b      	orrs	r3, r1
 80137b8:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80137ba:	2300      	movs	r3, #0
 80137bc:	e7f1      	b.n	80137a2 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80137be:	6903      	ldr	r3, [r0, #16]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d1e3      	bne.n	801378c <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 80137c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80137c6:	881b      	ldrh	r3, [r3, #0]
 80137c8:	05db      	lsls	r3, r3, #23
 80137ca:	0ddb      	lsrs	r3, r3, #23
 80137cc:	6802      	ldr	r2, [r0, #0]
 80137ce:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80137d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80137d2:	3302      	adds	r3, #2
 80137d4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80137d6:	e7df      	b.n	8013798 <UART_Transmit_IT+0x30>

080137d8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80137d8:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80137da:	6802      	ldr	r2, [r0, #0]
 80137dc:	6813      	ldr	r3, [r2, #0]
 80137de:	2140      	movs	r1, #64	; 0x40
 80137e0:	438b      	bics	r3, r1
 80137e2:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80137e4:	2369      	movs	r3, #105	; 0x69
 80137e6:	5cc3      	ldrb	r3, [r0, r3]
 80137e8:	2b32      	cmp	r3, #50	; 0x32
 80137ea:	d00a      	beq.n	8013802 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80137ec:	6801      	ldr	r1, [r0, #0]
 80137ee:	688b      	ldr	r3, [r1, #8]
 80137f0:	2201      	movs	r2, #1
 80137f2:	4393      	bics	r3, r2
 80137f4:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80137f6:	2369      	movs	r3, #105	; 0x69
 80137f8:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80137fa:	f7f9 ff01 	bl	800d600 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80137fe:	2000      	movs	r0, #0
 8013800:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013802:	3337      	adds	r3, #55	; 0x37
 8013804:	2222      	movs	r2, #34	; 0x22
 8013806:	54c2      	strb	r2, [r0, r3]
 8013808:	e7f7      	b.n	80137fa <UART_EndTransmit_IT+0x22>
	...

0801380c <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801380c:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801380e:	2369      	movs	r3, #105	; 0x69
 8013810:	5cc3      	ldrb	r3, [r0, r3]
 8013812:	2b22      	cmp	r3, #34	; 0x22
 8013814:	d004      	beq.n	8013820 <UART_Receive_IT+0x14>
 8013816:	2369      	movs	r3, #105	; 0x69
 8013818:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801381a:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 801381c:	2b32      	cmp	r3, #50	; 0x32
 801381e:	d12d      	bne.n	801387c <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 8013820:	235c      	movs	r3, #92	; 0x5c
 8013822:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013824:	2280      	movs	r2, #128	; 0x80
 8013826:	0152      	lsls	r2, r2, #5
 8013828:	6883      	ldr	r3, [r0, #8]
 801382a:	4293      	cmp	r3, r2
 801382c:	d028      	beq.n	8013880 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 801382e:	6803      	ldr	r3, [r0, #0]
 8013830:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013832:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8013834:	1c54      	adds	r4, r2, #1
 8013836:	6544      	str	r4, [r0, #84]	; 0x54
 8013838:	400b      	ands	r3, r1
 801383a:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 801383c:	225a      	movs	r2, #90	; 0x5a
 801383e:	5a83      	ldrh	r3, [r0, r2]
 8013840:	3b01      	subs	r3, #1
 8013842:	b29b      	uxth	r3, r3
 8013844:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8013846:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8013848:	2b00      	cmp	r3, #0
 801384a:	d117      	bne.n	801387c <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801384c:	6802      	ldr	r2, [r0, #0]
 801384e:	6813      	ldr	r3, [r2, #0]
 8013850:	2120      	movs	r1, #32
 8013852:	438b      	bics	r3, r1
 8013854:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013856:	2369      	movs	r3, #105	; 0x69
 8013858:	5cc3      	ldrb	r3, [r0, r3]
 801385a:	2b32      	cmp	r3, #50	; 0x32
 801385c:	d01c      	beq.n	8013898 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801385e:	6802      	ldr	r2, [r0, #0]
 8013860:	6813      	ldr	r3, [r2, #0]
 8013862:	490f      	ldr	r1, [pc, #60]	; (80138a0 <UART_Receive_IT+0x94>)
 8013864:	400b      	ands	r3, r1
 8013866:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013868:	6801      	ldr	r1, [r0, #0]
 801386a:	688b      	ldr	r3, [r1, #8]
 801386c:	2201      	movs	r2, #1
 801386e:	4393      	bics	r3, r2
 8013870:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8013872:	2369      	movs	r3, #105	; 0x69
 8013874:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8013876:	f7f9 ff01 	bl	800d67c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 801387a:	2200      	movs	r2, #0
  }
}
 801387c:	0010      	movs	r0, r2
 801387e:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013880:	6903      	ldr	r3, [r0, #16]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d1d3      	bne.n	801382e <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013886:	6803      	ldr	r3, [r0, #0]
 8013888:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801388a:	400b      	ands	r3, r1
 801388c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801388e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8013890:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8013892:	3302      	adds	r3, #2
 8013894:	6543      	str	r3, [r0, #84]	; 0x54
 8013896:	e7d1      	b.n	801383c <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013898:	3337      	adds	r3, #55	; 0x37
 801389a:	2212      	movs	r2, #18
 801389c:	54c2      	strb	r2, [r0, r3]
 801389e:	e7ea      	b.n	8013876 <UART_Receive_IT+0x6a>
 80138a0:	fffffeff 	.word	0xfffffeff

080138a4 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 80138a4:	4770      	bx	lr

080138a6 <HAL_UART_IRQHandler>:
{
 80138a6:	b510      	push	{r4, lr}
 80138a8:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80138aa:	6803      	ldr	r3, [r0, #0]
 80138ac:	69da      	ldr	r2, [r3, #28]
 80138ae:	07d2      	lsls	r2, r2, #31
 80138b0:	d509      	bpl.n	80138c6 <HAL_UART_IRQHandler+0x20>
 80138b2:	681a      	ldr	r2, [r3, #0]
 80138b4:	05d2      	lsls	r2, r2, #23
 80138b6:	d506      	bpl.n	80138c6 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80138b8:	2201      	movs	r2, #1
 80138ba:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80138bc:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80138be:	4313      	orrs	r3, r2
 80138c0:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80138c2:	2369      	movs	r3, #105	; 0x69
 80138c4:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	69da      	ldr	r2, [r3, #28]
 80138ca:	0792      	lsls	r2, r2, #30
 80138cc:	d50b      	bpl.n	80138e6 <HAL_UART_IRQHandler+0x40>
 80138ce:	689a      	ldr	r2, [r3, #8]
 80138d0:	07d2      	lsls	r2, r2, #31
 80138d2:	d508      	bpl.n	80138e6 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80138d4:	2202      	movs	r2, #2
 80138d6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80138d8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80138da:	3202      	adds	r2, #2
 80138dc:	4313      	orrs	r3, r2
 80138de:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80138e0:	2369      	movs	r3, #105	; 0x69
 80138e2:	3a03      	subs	r2, #3
 80138e4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80138e6:	6823      	ldr	r3, [r4, #0]
 80138e8:	69da      	ldr	r2, [r3, #28]
 80138ea:	0752      	lsls	r2, r2, #29
 80138ec:	d50b      	bpl.n	8013906 <HAL_UART_IRQHandler+0x60>
 80138ee:	689a      	ldr	r2, [r3, #8]
 80138f0:	07d2      	lsls	r2, r2, #31
 80138f2:	d508      	bpl.n	8013906 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80138f4:	2204      	movs	r2, #4
 80138f6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80138f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80138fa:	3a02      	subs	r2, #2
 80138fc:	4313      	orrs	r3, r2
 80138fe:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013900:	2369      	movs	r3, #105	; 0x69
 8013902:	3a01      	subs	r2, #1
 8013904:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013906:	6823      	ldr	r3, [r4, #0]
 8013908:	69da      	ldr	r2, [r3, #28]
 801390a:	0712      	lsls	r2, r2, #28
 801390c:	d50a      	bpl.n	8013924 <HAL_UART_IRQHandler+0x7e>
 801390e:	689a      	ldr	r2, [r3, #8]
 8013910:	07d2      	lsls	r2, r2, #31
 8013912:	d507      	bpl.n	8013924 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013914:	2208      	movs	r2, #8
 8013916:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013918:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801391a:	4313      	orrs	r3, r2
 801391c:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 801391e:	2369      	movs	r3, #105	; 0x69
 8013920:	3a07      	subs	r2, #7
 8013922:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013924:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013926:	2b00      	cmp	r3, #0
 8013928:	d11c      	bne.n	8013964 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 801392a:	6823      	ldr	r3, [r4, #0]
 801392c:	69da      	ldr	r2, [r3, #28]
 801392e:	02d2      	lsls	r2, r2, #11
 8013930:	d502      	bpl.n	8013938 <HAL_UART_IRQHandler+0x92>
 8013932:	689a      	ldr	r2, [r3, #8]
 8013934:	0252      	lsls	r2, r2, #9
 8013936:	d419      	bmi.n	801396c <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8013938:	6823      	ldr	r3, [r4, #0]
 801393a:	69da      	ldr	r2, [r3, #28]
 801393c:	0692      	lsls	r2, r2, #26
 801393e:	d502      	bpl.n	8013946 <HAL_UART_IRQHandler+0xa0>
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	069b      	lsls	r3, r3, #26
 8013944:	d41c      	bmi.n	8013980 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8013946:	6823      	ldr	r3, [r4, #0]
 8013948:	69da      	ldr	r2, [r3, #28]
 801394a:	0612      	lsls	r2, r2, #24
 801394c:	d502      	bpl.n	8013954 <HAL_UART_IRQHandler+0xae>
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	061b      	lsls	r3, r3, #24
 8013952:	d41e      	bmi.n	8013992 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8013954:	6823      	ldr	r3, [r4, #0]
 8013956:	69da      	ldr	r2, [r3, #28]
 8013958:	0652      	lsls	r2, r2, #25
 801395a:	d502      	bpl.n	8013962 <HAL_UART_IRQHandler+0xbc>
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	065b      	lsls	r3, r3, #25
 8013960:	d41b      	bmi.n	801399a <HAL_UART_IRQHandler+0xf4>
}
 8013962:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8013964:	0020      	movs	r0, r4
 8013966:	f7f9 fe63 	bl	800d630 <HAL_UART_ErrorCallback>
 801396a:	e7de      	b.n	801392a <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 801396c:	2280      	movs	r2, #128	; 0x80
 801396e:	0352      	lsls	r2, r2, #13
 8013970:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8013972:	2369      	movs	r3, #105	; 0x69
 8013974:	2201      	movs	r2, #1
 8013976:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8013978:	0020      	movs	r0, r4
 801397a:	f7ff ff93 	bl	80138a4 <HAL_UARTEx_WakeupCallback>
 801397e:	e7db      	b.n	8013938 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8013980:	0020      	movs	r0, r4
 8013982:	f7ff ff43 	bl	801380c <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013986:	6822      	ldr	r2, [r4, #0]
 8013988:	6993      	ldr	r3, [r2, #24]
 801398a:	2108      	movs	r1, #8
 801398c:	430b      	orrs	r3, r1
 801398e:	6193      	str	r3, [r2, #24]
 8013990:	e7d9      	b.n	8013946 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8013992:	0020      	movs	r0, r4
 8013994:	f7ff fee8 	bl	8013768 <UART_Transmit_IT>
 8013998:	e7dc      	b.n	8013954 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801399a:	0020      	movs	r0, r4
 801399c:	f7ff ff1c 	bl	80137d8 <UART_EndTransmit_IT>
}
 80139a0:	e7df      	b.n	8013962 <HAL_UART_IRQHandler+0xbc>

080139a2 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 80139a2:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 80139a4:	f7ef ffe6 	bl	8003974 <Module_Init>
 80139a8:	e7fe      	b.n	80139a8 <main+0x6>

080139aa <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 80139aa:	e7fe      	b.n	80139aa <UserTask>

080139ac <atof>:
 80139ac:	b510      	push	{r4, lr}
 80139ae:	2100      	movs	r1, #0
 80139b0:	f001 fb70 	bl	8015094 <strtod>
 80139b4:	bd10      	pop	{r4, pc}

080139b6 <atoi>:
 80139b6:	b510      	push	{r4, lr}
 80139b8:	220a      	movs	r2, #10
 80139ba:	2100      	movs	r1, #0
 80139bc:	f001 fc36 	bl	801522c <strtol>
 80139c0:	bd10      	pop	{r4, pc}

080139c2 <atol>:
 80139c2:	b510      	push	{r4, lr}
 80139c4:	220a      	movs	r2, #10
 80139c6:	2100      	movs	r1, #0
 80139c8:	f001 fc30 	bl	801522c <strtol>
 80139cc:	bd10      	pop	{r4, pc}
	...

080139d0 <__libc_init_array>:
 80139d0:	b570      	push	{r4, r5, r6, lr}
 80139d2:	2600      	movs	r6, #0
 80139d4:	4d0c      	ldr	r5, [pc, #48]	; (8013a08 <__libc_init_array+0x38>)
 80139d6:	4c0d      	ldr	r4, [pc, #52]	; (8013a0c <__libc_init_array+0x3c>)
 80139d8:	1b64      	subs	r4, r4, r5
 80139da:	10a4      	asrs	r4, r4, #2
 80139dc:	42a6      	cmp	r6, r4
 80139de:	d109      	bne.n	80139f4 <__libc_init_array+0x24>
 80139e0:	2600      	movs	r6, #0
 80139e2:	f004 fe9f 	bl	8018724 <_init>
 80139e6:	4d0a      	ldr	r5, [pc, #40]	; (8013a10 <__libc_init_array+0x40>)
 80139e8:	4c0a      	ldr	r4, [pc, #40]	; (8013a14 <__libc_init_array+0x44>)
 80139ea:	1b64      	subs	r4, r4, r5
 80139ec:	10a4      	asrs	r4, r4, #2
 80139ee:	42a6      	cmp	r6, r4
 80139f0:	d105      	bne.n	80139fe <__libc_init_array+0x2e>
 80139f2:	bd70      	pop	{r4, r5, r6, pc}
 80139f4:	00b3      	lsls	r3, r6, #2
 80139f6:	58eb      	ldr	r3, [r5, r3]
 80139f8:	4798      	blx	r3
 80139fa:	3601      	adds	r6, #1
 80139fc:	e7ee      	b.n	80139dc <__libc_init_array+0xc>
 80139fe:	00b3      	lsls	r3, r6, #2
 8013a00:	58eb      	ldr	r3, [r5, r3]
 8013a02:	4798      	blx	r3
 8013a04:	3601      	adds	r6, #1
 8013a06:	e7f2      	b.n	80139ee <__libc_init_array+0x1e>
 8013a08:	0801baf4 	.word	0x0801baf4
 8013a0c:	0801baf4 	.word	0x0801baf4
 8013a10:	0801baf4 	.word	0x0801baf4
 8013a14:	0801bafc 	.word	0x0801bafc

08013a18 <__locale_ctype_ptr_l>:
 8013a18:	30ec      	adds	r0, #236	; 0xec
 8013a1a:	6800      	ldr	r0, [r0, #0]
 8013a1c:	4770      	bx	lr
	...

08013a20 <__locale_ctype_ptr>:
 8013a20:	4b04      	ldr	r3, [pc, #16]	; (8013a34 <__locale_ctype_ptr+0x14>)
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d100      	bne.n	8013a2c <__locale_ctype_ptr+0xc>
 8013a2a:	4b03      	ldr	r3, [pc, #12]	; (8013a38 <__locale_ctype_ptr+0x18>)
 8013a2c:	33ec      	adds	r3, #236	; 0xec
 8013a2e:	6818      	ldr	r0, [r3, #0]
 8013a30:	4770      	bx	lr
 8013a32:	46c0      	nop			; (mov r8, r8)
 8013a34:	2000011c 	.word	0x2000011c
 8013a38:	20000548 	.word	0x20000548

08013a3c <malloc>:
 8013a3c:	b510      	push	{r4, lr}
 8013a3e:	4b03      	ldr	r3, [pc, #12]	; (8013a4c <malloc+0x10>)
 8013a40:	0001      	movs	r1, r0
 8013a42:	6818      	ldr	r0, [r3, #0]
 8013a44:	f000 f80e 	bl	8013a64 <_malloc_r>
 8013a48:	bd10      	pop	{r4, pc}
 8013a4a:	46c0      	nop			; (mov r8, r8)
 8013a4c:	2000011c 	.word	0x2000011c

08013a50 <free>:
 8013a50:	b510      	push	{r4, lr}
 8013a52:	4b03      	ldr	r3, [pc, #12]	; (8013a60 <free+0x10>)
 8013a54:	0001      	movs	r1, r0
 8013a56:	6818      	ldr	r0, [r3, #0]
 8013a58:	f003 fd42 	bl	80174e0 <_free_r>
 8013a5c:	bd10      	pop	{r4, pc}
 8013a5e:	46c0      	nop			; (mov r8, r8)
 8013a60:	2000011c 	.word	0x2000011c

08013a64 <_malloc_r>:
 8013a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a66:	000d      	movs	r5, r1
 8013a68:	b085      	sub	sp, #20
 8013a6a:	350b      	adds	r5, #11
 8013a6c:	9001      	str	r0, [sp, #4]
 8013a6e:	2d16      	cmp	r5, #22
 8013a70:	d908      	bls.n	8013a84 <_malloc_r+0x20>
 8013a72:	2307      	movs	r3, #7
 8013a74:	439d      	bics	r5, r3
 8013a76:	d506      	bpl.n	8013a86 <_malloc_r+0x22>
 8013a78:	230c      	movs	r3, #12
 8013a7a:	9a01      	ldr	r2, [sp, #4]
 8013a7c:	6013      	str	r3, [r2, #0]
 8013a7e:	2000      	movs	r0, #0
 8013a80:	b005      	add	sp, #20
 8013a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a84:	2510      	movs	r5, #16
 8013a86:	428d      	cmp	r5, r1
 8013a88:	d3f6      	bcc.n	8013a78 <_malloc_r+0x14>
 8013a8a:	9801      	ldr	r0, [sp, #4]
 8013a8c:	f000 fa34 	bl	8013ef8 <__malloc_lock>
 8013a90:	23f8      	movs	r3, #248	; 0xf8
 8013a92:	33ff      	adds	r3, #255	; 0xff
 8013a94:	4ac4      	ldr	r2, [pc, #784]	; (8013da8 <_malloc_r+0x344>)
 8013a96:	429d      	cmp	r5, r3
 8013a98:	d820      	bhi.n	8013adc <_malloc_r+0x78>
 8013a9a:	0029      	movs	r1, r5
 8013a9c:	3108      	adds	r1, #8
 8013a9e:	1851      	adds	r1, r2, r1
 8013aa0:	0008      	movs	r0, r1
 8013aa2:	684c      	ldr	r4, [r1, #4]
 8013aa4:	3808      	subs	r0, #8
 8013aa6:	08eb      	lsrs	r3, r5, #3
 8013aa8:	4284      	cmp	r4, r0
 8013aaa:	d104      	bne.n	8013ab6 <_malloc_r+0x52>
 8013aac:	68cc      	ldr	r4, [r1, #12]
 8013aae:	3302      	adds	r3, #2
 8013ab0:	469c      	mov	ip, r3
 8013ab2:	42a1      	cmp	r1, r4
 8013ab4:	d02a      	beq.n	8013b0c <_malloc_r+0xa8>
 8013ab6:	2303      	movs	r3, #3
 8013ab8:	6862      	ldr	r2, [r4, #4]
 8013aba:	68a1      	ldr	r1, [r4, #8]
 8013abc:	439a      	bics	r2, r3
 8013abe:	0013      	movs	r3, r2
 8013ac0:	68e2      	ldr	r2, [r4, #12]
 8013ac2:	18e3      	adds	r3, r4, r3
 8013ac4:	60ca      	str	r2, [r1, #12]
 8013ac6:	6091      	str	r1, [r2, #8]
 8013ac8:	2201      	movs	r2, #1
 8013aca:	6859      	ldr	r1, [r3, #4]
 8013acc:	430a      	orrs	r2, r1
 8013ace:	605a      	str	r2, [r3, #4]
 8013ad0:	9801      	ldr	r0, [sp, #4]
 8013ad2:	f000 fa19 	bl	8013f08 <__malloc_unlock>
 8013ad6:	0020      	movs	r0, r4
 8013ad8:	3008      	adds	r0, #8
 8013ada:	e7d1      	b.n	8013a80 <_malloc_r+0x1c>
 8013adc:	0a69      	lsrs	r1, r5, #9
 8013ade:	233f      	movs	r3, #63	; 0x3f
 8013ae0:	2900      	cmp	r1, #0
 8013ae2:	d003      	beq.n	8013aec <_malloc_r+0x88>
 8013ae4:	2904      	cmp	r1, #4
 8013ae6:	d828      	bhi.n	8013b3a <_malloc_r+0xd6>
 8013ae8:	09ab      	lsrs	r3, r5, #6
 8013aea:	3338      	adds	r3, #56	; 0x38
 8013aec:	2103      	movs	r1, #3
 8013aee:	468c      	mov	ip, r1
 8013af0:	00d8      	lsls	r0, r3, #3
 8013af2:	1880      	adds	r0, r0, r2
 8013af4:	68c4      	ldr	r4, [r0, #12]
 8013af6:	4284      	cmp	r4, r0
 8013af8:	d006      	beq.n	8013b08 <_malloc_r+0xa4>
 8013afa:	4666      	mov	r6, ip
 8013afc:	6861      	ldr	r1, [r4, #4]
 8013afe:	43b1      	bics	r1, r6
 8013b00:	1b4f      	subs	r7, r1, r5
 8013b02:	2f0f      	cmp	r7, #15
 8013b04:	dd31      	ble.n	8013b6a <_malloc_r+0x106>
 8013b06:	3b01      	subs	r3, #1
 8013b08:	3301      	adds	r3, #1
 8013b0a:	469c      	mov	ip, r3
 8013b0c:	6914      	ldr	r4, [r2, #16]
 8013b0e:	49a7      	ldr	r1, [pc, #668]	; (8013dac <_malloc_r+0x348>)
 8013b10:	428c      	cmp	r4, r1
 8013b12:	d055      	beq.n	8013bc0 <_malloc_r+0x15c>
 8013b14:	2303      	movs	r3, #3
 8013b16:	6860      	ldr	r0, [r4, #4]
 8013b18:	4398      	bics	r0, r3
 8013b1a:	0003      	movs	r3, r0
 8013b1c:	1b46      	subs	r6, r0, r5
 8013b1e:	2e0f      	cmp	r6, #15
 8013b20:	dd31      	ble.n	8013b86 <_malloc_r+0x122>
 8013b22:	2701      	movs	r7, #1
 8013b24:	1960      	adds	r0, r4, r5
 8013b26:	433d      	orrs	r5, r7
 8013b28:	4337      	orrs	r7, r6
 8013b2a:	6065      	str	r5, [r4, #4]
 8013b2c:	6150      	str	r0, [r2, #20]
 8013b2e:	6110      	str	r0, [r2, #16]
 8013b30:	60c1      	str	r1, [r0, #12]
 8013b32:	6081      	str	r1, [r0, #8]
 8013b34:	6047      	str	r7, [r0, #4]
 8013b36:	50e6      	str	r6, [r4, r3]
 8013b38:	e7ca      	b.n	8013ad0 <_malloc_r+0x6c>
 8013b3a:	2914      	cmp	r1, #20
 8013b3c:	d802      	bhi.n	8013b44 <_malloc_r+0xe0>
 8013b3e:	000b      	movs	r3, r1
 8013b40:	335b      	adds	r3, #91	; 0x5b
 8013b42:	e7d3      	b.n	8013aec <_malloc_r+0x88>
 8013b44:	2954      	cmp	r1, #84	; 0x54
 8013b46:	d802      	bhi.n	8013b4e <_malloc_r+0xea>
 8013b48:	0b2b      	lsrs	r3, r5, #12
 8013b4a:	336e      	adds	r3, #110	; 0x6e
 8013b4c:	e7ce      	b.n	8013aec <_malloc_r+0x88>
 8013b4e:	23aa      	movs	r3, #170	; 0xaa
 8013b50:	005b      	lsls	r3, r3, #1
 8013b52:	4299      	cmp	r1, r3
 8013b54:	d802      	bhi.n	8013b5c <_malloc_r+0xf8>
 8013b56:	0beb      	lsrs	r3, r5, #15
 8013b58:	3377      	adds	r3, #119	; 0x77
 8013b5a:	e7c7      	b.n	8013aec <_malloc_r+0x88>
 8013b5c:	4894      	ldr	r0, [pc, #592]	; (8013db0 <_malloc_r+0x34c>)
 8013b5e:	237e      	movs	r3, #126	; 0x7e
 8013b60:	4281      	cmp	r1, r0
 8013b62:	d8c3      	bhi.n	8013aec <_malloc_r+0x88>
 8013b64:	0cab      	lsrs	r3, r5, #18
 8013b66:	337c      	adds	r3, #124	; 0x7c
 8013b68:	e7c0      	b.n	8013aec <_malloc_r+0x88>
 8013b6a:	68e6      	ldr	r6, [r4, #12]
 8013b6c:	2f00      	cmp	r7, #0
 8013b6e:	db08      	blt.n	8013b82 <_malloc_r+0x11e>
 8013b70:	68a3      	ldr	r3, [r4, #8]
 8013b72:	1861      	adds	r1, r4, r1
 8013b74:	60de      	str	r6, [r3, #12]
 8013b76:	60b3      	str	r3, [r6, #8]
 8013b78:	2301      	movs	r3, #1
 8013b7a:	684a      	ldr	r2, [r1, #4]
 8013b7c:	4313      	orrs	r3, r2
 8013b7e:	604b      	str	r3, [r1, #4]
 8013b80:	e7a6      	b.n	8013ad0 <_malloc_r+0x6c>
 8013b82:	0034      	movs	r4, r6
 8013b84:	e7b7      	b.n	8013af6 <_malloc_r+0x92>
 8013b86:	6151      	str	r1, [r2, #20]
 8013b88:	6111      	str	r1, [r2, #16]
 8013b8a:	2e00      	cmp	r6, #0
 8013b8c:	db05      	blt.n	8013b9a <_malloc_r+0x136>
 8013b8e:	2101      	movs	r1, #1
 8013b90:	1823      	adds	r3, r4, r0
 8013b92:	685a      	ldr	r2, [r3, #4]
 8013b94:	4311      	orrs	r1, r2
 8013b96:	6059      	str	r1, [r3, #4]
 8013b98:	e79a      	b.n	8013ad0 <_malloc_r+0x6c>
 8013b9a:	4986      	ldr	r1, [pc, #536]	; (8013db4 <_malloc_r+0x350>)
 8013b9c:	6857      	ldr	r7, [r2, #4]
 8013b9e:	4288      	cmp	r0, r1
 8013ba0:	d900      	bls.n	8013ba4 <_malloc_r+0x140>
 8013ba2:	e090      	b.n	8013cc6 <_malloc_r+0x262>
 8013ba4:	08c3      	lsrs	r3, r0, #3
 8013ba6:	39ff      	subs	r1, #255	; 0xff
 8013ba8:	1098      	asrs	r0, r3, #2
 8013baa:	39ff      	subs	r1, #255	; 0xff
 8013bac:	4081      	lsls	r1, r0
 8013bae:	00db      	lsls	r3, r3, #3
 8013bb0:	4339      	orrs	r1, r7
 8013bb2:	6051      	str	r1, [r2, #4]
 8013bb4:	189a      	adds	r2, r3, r2
 8013bb6:	6893      	ldr	r3, [r2, #8]
 8013bb8:	60e2      	str	r2, [r4, #12]
 8013bba:	60a3      	str	r3, [r4, #8]
 8013bbc:	6094      	str	r4, [r2, #8]
 8013bbe:	60dc      	str	r4, [r3, #12]
 8013bc0:	4663      	mov	r3, ip
 8013bc2:	2201      	movs	r2, #1
 8013bc4:	4978      	ldr	r1, [pc, #480]	; (8013da8 <_malloc_r+0x344>)
 8013bc6:	109b      	asrs	r3, r3, #2
 8013bc8:	6848      	ldr	r0, [r1, #4]
 8013bca:	409a      	lsls	r2, r3
 8013bcc:	4290      	cmp	r0, r2
 8013bce:	d32d      	bcc.n	8013c2c <_malloc_r+0x1c8>
 8013bd0:	4202      	tst	r2, r0
 8013bd2:	d109      	bne.n	8013be8 <_malloc_r+0x184>
 8013bd4:	2303      	movs	r3, #3
 8013bd6:	4664      	mov	r4, ip
 8013bd8:	439c      	bics	r4, r3
 8013bda:	0023      	movs	r3, r4
 8013bdc:	3304      	adds	r3, #4
 8013bde:	469c      	mov	ip, r3
 8013be0:	0052      	lsls	r2, r2, #1
 8013be2:	4202      	tst	r2, r0
 8013be4:	d100      	bne.n	8013be8 <_malloc_r+0x184>
 8013be6:	e0a4      	b.n	8013d32 <_malloc_r+0x2ce>
 8013be8:	4663      	mov	r3, ip
 8013bea:	00db      	lsls	r3, r3, #3
 8013bec:	18cb      	adds	r3, r1, r3
 8013bee:	9303      	str	r3, [sp, #12]
 8013bf0:	001f      	movs	r7, r3
 8013bf2:	4663      	mov	r3, ip
 8013bf4:	9302      	str	r3, [sp, #8]
 8013bf6:	68fc      	ldr	r4, [r7, #12]
 8013bf8:	42bc      	cmp	r4, r7
 8013bfa:	d000      	beq.n	8013bfe <_malloc_r+0x19a>
 8013bfc:	e09c      	b.n	8013d38 <_malloc_r+0x2d4>
 8013bfe:	2003      	movs	r0, #3
 8013c00:	9b02      	ldr	r3, [sp, #8]
 8013c02:	3708      	adds	r7, #8
 8013c04:	3301      	adds	r3, #1
 8013c06:	9302      	str	r3, [sp, #8]
 8013c08:	4203      	tst	r3, r0
 8013c0a:	d1f4      	bne.n	8013bf6 <_malloc_r+0x192>
 8013c0c:	4663      	mov	r3, ip
 8013c0e:	2003      	movs	r0, #3
 8013c10:	4203      	tst	r3, r0
 8013c12:	d000      	beq.n	8013c16 <_malloc_r+0x1b2>
 8013c14:	e0b3      	b.n	8013d7e <_malloc_r+0x31a>
 8013c16:	684b      	ldr	r3, [r1, #4]
 8013c18:	4393      	bics	r3, r2
 8013c1a:	604b      	str	r3, [r1, #4]
 8013c1c:	4b62      	ldr	r3, [pc, #392]	; (8013da8 <_malloc_r+0x344>)
 8013c1e:	0052      	lsls	r2, r2, #1
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	4293      	cmp	r3, r2
 8013c24:	d302      	bcc.n	8013c2c <_malloc_r+0x1c8>
 8013c26:	2a00      	cmp	r2, #0
 8013c28:	d000      	beq.n	8013c2c <_malloc_r+0x1c8>
 8013c2a:	e0b9      	b.n	8013da0 <_malloc_r+0x33c>
 8013c2c:	2303      	movs	r3, #3
 8013c2e:	688f      	ldr	r7, [r1, #8]
 8013c30:	687a      	ldr	r2, [r7, #4]
 8013c32:	439a      	bics	r2, r3
 8013c34:	9202      	str	r2, [sp, #8]
 8013c36:	42aa      	cmp	r2, r5
 8013c38:	d303      	bcc.n	8013c42 <_malloc_r+0x1de>
 8013c3a:	1b52      	subs	r2, r2, r5
 8013c3c:	2a0f      	cmp	r2, #15
 8013c3e:	dd00      	ble.n	8013c42 <_malloc_r+0x1de>
 8013c40:	e116      	b.n	8013e70 <_malloc_r+0x40c>
 8013c42:	4b5d      	ldr	r3, [pc, #372]	; (8013db8 <_malloc_r+0x354>)
 8013c44:	2008      	movs	r0, #8
 8013c46:	681e      	ldr	r6, [r3, #0]
 8013c48:	f002 fd58 	bl	80166fc <sysconf>
 8013c4c:	4b5b      	ldr	r3, [pc, #364]	; (8013dbc <_malloc_r+0x358>)
 8013c4e:	3610      	adds	r6, #16
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	1976      	adds	r6, r6, r5
 8013c54:	9003      	str	r0, [sp, #12]
 8013c56:	3301      	adds	r3, #1
 8013c58:	d003      	beq.n	8013c62 <_malloc_r+0x1fe>
 8013c5a:	3e01      	subs	r6, #1
 8013c5c:	1836      	adds	r6, r6, r0
 8013c5e:	4243      	negs	r3, r0
 8013c60:	401e      	ands	r6, r3
 8013c62:	0031      	movs	r1, r6
 8013c64:	9801      	ldr	r0, [sp, #4]
 8013c66:	f000 fb27 	bl	80142b8 <_sbrk_r>
 8013c6a:	0004      	movs	r4, r0
 8013c6c:	1c43      	adds	r3, r0, #1
 8013c6e:	d100      	bne.n	8013c72 <_malloc_r+0x20e>
 8013c70:	e0d6      	b.n	8013e20 <_malloc_r+0x3bc>
 8013c72:	9b02      	ldr	r3, [sp, #8]
 8013c74:	18fb      	adds	r3, r7, r3
 8013c76:	4283      	cmp	r3, r0
 8013c78:	d903      	bls.n	8013c82 <_malloc_r+0x21e>
 8013c7a:	4a4b      	ldr	r2, [pc, #300]	; (8013da8 <_malloc_r+0x344>)
 8013c7c:	4297      	cmp	r7, r2
 8013c7e:	d000      	beq.n	8013c82 <_malloc_r+0x21e>
 8013c80:	e0ce      	b.n	8013e20 <_malloc_r+0x3bc>
 8013c82:	494f      	ldr	r1, [pc, #316]	; (8013dc0 <_malloc_r+0x35c>)
 8013c84:	680a      	ldr	r2, [r1, #0]
 8013c86:	18b2      	adds	r2, r6, r2
 8013c88:	600a      	str	r2, [r1, #0]
 8013c8a:	9903      	ldr	r1, [sp, #12]
 8013c8c:	4694      	mov	ip, r2
 8013c8e:	1e48      	subs	r0, r1, #1
 8013c90:	42a3      	cmp	r3, r4
 8013c92:	d000      	beq.n	8013c96 <_malloc_r+0x232>
 8013c94:	e09a      	b.n	8013dcc <_malloc_r+0x368>
 8013c96:	4203      	tst	r3, r0
 8013c98:	d000      	beq.n	8013c9c <_malloc_r+0x238>
 8013c9a:	e097      	b.n	8013dcc <_malloc_r+0x368>
 8013c9c:	9a02      	ldr	r2, [sp, #8]
 8013c9e:	4b42      	ldr	r3, [pc, #264]	; (8013da8 <_malloc_r+0x344>)
 8013ca0:	1992      	adds	r2, r2, r6
 8013ca2:	2601      	movs	r6, #1
 8013ca4:	689b      	ldr	r3, [r3, #8]
 8013ca6:	4316      	orrs	r6, r2
 8013ca8:	605e      	str	r6, [r3, #4]
 8013caa:	4b45      	ldr	r3, [pc, #276]	; (8013dc0 <_malloc_r+0x35c>)
 8013cac:	4a45      	ldr	r2, [pc, #276]	; (8013dc4 <_malloc_r+0x360>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	6811      	ldr	r1, [r2, #0]
 8013cb2:	428b      	cmp	r3, r1
 8013cb4:	d900      	bls.n	8013cb8 <_malloc_r+0x254>
 8013cb6:	6013      	str	r3, [r2, #0]
 8013cb8:	4a43      	ldr	r2, [pc, #268]	; (8013dc8 <_malloc_r+0x364>)
 8013cba:	6811      	ldr	r1, [r2, #0]
 8013cbc:	428b      	cmp	r3, r1
 8013cbe:	d800      	bhi.n	8013cc2 <_malloc_r+0x25e>
 8013cc0:	e0ae      	b.n	8013e20 <_malloc_r+0x3bc>
 8013cc2:	6013      	str	r3, [r2, #0]
 8013cc4:	e0ac      	b.n	8013e20 <_malloc_r+0x3bc>
 8013cc6:	0a40      	lsrs	r0, r0, #9
 8013cc8:	2804      	cmp	r0, #4
 8013cca:	d810      	bhi.n	8013cee <_malloc_r+0x28a>
 8013ccc:	0999      	lsrs	r1, r3, #6
 8013cce:	3138      	adds	r1, #56	; 0x38
 8013cd0:	00ce      	lsls	r6, r1, #3
 8013cd2:	18b6      	adds	r6, r6, r2
 8013cd4:	68b0      	ldr	r0, [r6, #8]
 8013cd6:	4286      	cmp	r6, r0
 8013cd8:	d124      	bne.n	8013d24 <_malloc_r+0x2c0>
 8013cda:	2301      	movs	r3, #1
 8013cdc:	1089      	asrs	r1, r1, #2
 8013cde:	408b      	lsls	r3, r1
 8013ce0:	433b      	orrs	r3, r7
 8013ce2:	6053      	str	r3, [r2, #4]
 8013ce4:	60e6      	str	r6, [r4, #12]
 8013ce6:	60a0      	str	r0, [r4, #8]
 8013ce8:	60b4      	str	r4, [r6, #8]
 8013cea:	60c4      	str	r4, [r0, #12]
 8013cec:	e768      	b.n	8013bc0 <_malloc_r+0x15c>
 8013cee:	2814      	cmp	r0, #20
 8013cf0:	d802      	bhi.n	8013cf8 <_malloc_r+0x294>
 8013cf2:	0001      	movs	r1, r0
 8013cf4:	315b      	adds	r1, #91	; 0x5b
 8013cf6:	e7eb      	b.n	8013cd0 <_malloc_r+0x26c>
 8013cf8:	2854      	cmp	r0, #84	; 0x54
 8013cfa:	d802      	bhi.n	8013d02 <_malloc_r+0x29e>
 8013cfc:	0b19      	lsrs	r1, r3, #12
 8013cfe:	316e      	adds	r1, #110	; 0x6e
 8013d00:	e7e6      	b.n	8013cd0 <_malloc_r+0x26c>
 8013d02:	21aa      	movs	r1, #170	; 0xaa
 8013d04:	0049      	lsls	r1, r1, #1
 8013d06:	4288      	cmp	r0, r1
 8013d08:	d802      	bhi.n	8013d10 <_malloc_r+0x2ac>
 8013d0a:	0bd9      	lsrs	r1, r3, #15
 8013d0c:	3177      	adds	r1, #119	; 0x77
 8013d0e:	e7df      	b.n	8013cd0 <_malloc_r+0x26c>
 8013d10:	4e27      	ldr	r6, [pc, #156]	; (8013db0 <_malloc_r+0x34c>)
 8013d12:	217e      	movs	r1, #126	; 0x7e
 8013d14:	42b0      	cmp	r0, r6
 8013d16:	d8db      	bhi.n	8013cd0 <_malloc_r+0x26c>
 8013d18:	0c99      	lsrs	r1, r3, #18
 8013d1a:	317c      	adds	r1, #124	; 0x7c
 8013d1c:	e7d8      	b.n	8013cd0 <_malloc_r+0x26c>
 8013d1e:	6880      	ldr	r0, [r0, #8]
 8013d20:	4286      	cmp	r6, r0
 8013d22:	d004      	beq.n	8013d2e <_malloc_r+0x2ca>
 8013d24:	2103      	movs	r1, #3
 8013d26:	6842      	ldr	r2, [r0, #4]
 8013d28:	438a      	bics	r2, r1
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d8f7      	bhi.n	8013d1e <_malloc_r+0x2ba>
 8013d2e:	68c6      	ldr	r6, [r0, #12]
 8013d30:	e7d8      	b.n	8013ce4 <_malloc_r+0x280>
 8013d32:	2304      	movs	r3, #4
 8013d34:	449c      	add	ip, r3
 8013d36:	e753      	b.n	8013be0 <_malloc_r+0x17c>
 8013d38:	2003      	movs	r0, #3
 8013d3a:	6863      	ldr	r3, [r4, #4]
 8013d3c:	4383      	bics	r3, r0
 8013d3e:	1b5e      	subs	r6, r3, r5
 8013d40:	68e0      	ldr	r0, [r4, #12]
 8013d42:	2e0f      	cmp	r6, #15
 8013d44:	dd0e      	ble.n	8013d64 <_malloc_r+0x300>
 8013d46:	2701      	movs	r7, #1
 8013d48:	1962      	adds	r2, r4, r5
 8013d4a:	433d      	orrs	r5, r7
 8013d4c:	6065      	str	r5, [r4, #4]
 8013d4e:	68a5      	ldr	r5, [r4, #8]
 8013d50:	4337      	orrs	r7, r6
 8013d52:	60e8      	str	r0, [r5, #12]
 8013d54:	6085      	str	r5, [r0, #8]
 8013d56:	614a      	str	r2, [r1, #20]
 8013d58:	610a      	str	r2, [r1, #16]
 8013d5a:	4914      	ldr	r1, [pc, #80]	; (8013dac <_malloc_r+0x348>)
 8013d5c:	6057      	str	r7, [r2, #4]
 8013d5e:	60d1      	str	r1, [r2, #12]
 8013d60:	6091      	str	r1, [r2, #8]
 8013d62:	e6e8      	b.n	8013b36 <_malloc_r+0xd2>
 8013d64:	2e00      	cmp	r6, #0
 8013d66:	db08      	blt.n	8013d7a <_malloc_r+0x316>
 8013d68:	2201      	movs	r2, #1
 8013d6a:	18e3      	adds	r3, r4, r3
 8013d6c:	6859      	ldr	r1, [r3, #4]
 8013d6e:	430a      	orrs	r2, r1
 8013d70:	605a      	str	r2, [r3, #4]
 8013d72:	68a3      	ldr	r3, [r4, #8]
 8013d74:	60d8      	str	r0, [r3, #12]
 8013d76:	6083      	str	r3, [r0, #8]
 8013d78:	e6aa      	b.n	8013ad0 <_malloc_r+0x6c>
 8013d7a:	0004      	movs	r4, r0
 8013d7c:	e73c      	b.n	8013bf8 <_malloc_r+0x194>
 8013d7e:	2301      	movs	r3, #1
 8013d80:	425b      	negs	r3, r3
 8013d82:	449c      	add	ip, r3
 8013d84:	9b03      	ldr	r3, [sp, #12]
 8013d86:	6818      	ldr	r0, [r3, #0]
 8013d88:	3b08      	subs	r3, #8
 8013d8a:	9003      	str	r0, [sp, #12]
 8013d8c:	4298      	cmp	r0, r3
 8013d8e:	d100      	bne.n	8013d92 <_malloc_r+0x32e>
 8013d90:	e73c      	b.n	8013c0c <_malloc_r+0x1a8>
 8013d92:	e743      	b.n	8013c1c <_malloc_r+0x1b8>
 8013d94:	2004      	movs	r0, #4
 8013d96:	0052      	lsls	r2, r2, #1
 8013d98:	4484      	add	ip, r0
 8013d9a:	421a      	tst	r2, r3
 8013d9c:	d0fa      	beq.n	8013d94 <_malloc_r+0x330>
 8013d9e:	e723      	b.n	8013be8 <_malloc_r+0x184>
 8013da0:	9802      	ldr	r0, [sp, #8]
 8013da2:	4684      	mov	ip, r0
 8013da4:	e7f9      	b.n	8013d9a <_malloc_r+0x336>
 8013da6:	46c0      	nop			; (mov r8, r8)
 8013da8:	200006b4 	.word	0x200006b4
 8013dac:	200006bc 	.word	0x200006bc
 8013db0:	00000554 	.word	0x00000554
 8013db4:	000001ff 	.word	0x000001ff
 8013db8:	20006980 	.word	0x20006980
 8013dbc:	20000abc 	.word	0x20000abc
 8013dc0:	20006950 	.word	0x20006950
 8013dc4:	20006978 	.word	0x20006978
 8013dc8:	2000697c 	.word	0x2000697c
 8013dcc:	492e      	ldr	r1, [pc, #184]	; (8013e88 <_malloc_r+0x424>)
 8013dce:	680a      	ldr	r2, [r1, #0]
 8013dd0:	3201      	adds	r2, #1
 8013dd2:	d133      	bne.n	8013e3c <_malloc_r+0x3d8>
 8013dd4:	600c      	str	r4, [r1, #0]
 8013dd6:	2307      	movs	r3, #7
 8013dd8:	4023      	ands	r3, r4
 8013dda:	d002      	beq.n	8013de2 <_malloc_r+0x37e>
 8013ddc:	2208      	movs	r2, #8
 8013dde:	1ad3      	subs	r3, r2, r3
 8013de0:	18e4      	adds	r4, r4, r3
 8013de2:	9a03      	ldr	r2, [sp, #12]
 8013de4:	19a6      	adds	r6, r4, r6
 8013de6:	18d3      	adds	r3, r2, r3
 8013de8:	4006      	ands	r6, r0
 8013dea:	1b9e      	subs	r6, r3, r6
 8013dec:	0031      	movs	r1, r6
 8013dee:	9801      	ldr	r0, [sp, #4]
 8013df0:	f000 fa62 	bl	80142b8 <_sbrk_r>
 8013df4:	1c43      	adds	r3, r0, #1
 8013df6:	d101      	bne.n	8013dfc <_malloc_r+0x398>
 8013df8:	0020      	movs	r0, r4
 8013dfa:	2600      	movs	r6, #0
 8013dfc:	4a23      	ldr	r2, [pc, #140]	; (8013e8c <_malloc_r+0x428>)
 8013dfe:	1b00      	subs	r0, r0, r4
 8013e00:	6813      	ldr	r3, [r2, #0]
 8013e02:	199b      	adds	r3, r3, r6
 8013e04:	6013      	str	r3, [r2, #0]
 8013e06:	2301      	movs	r3, #1
 8013e08:	4a21      	ldr	r2, [pc, #132]	; (8013e90 <_malloc_r+0x42c>)
 8013e0a:	1986      	adds	r6, r0, r6
 8013e0c:	431e      	orrs	r6, r3
 8013e0e:	6094      	str	r4, [r2, #8]
 8013e10:	6066      	str	r6, [r4, #4]
 8013e12:	4297      	cmp	r7, r2
 8013e14:	d100      	bne.n	8013e18 <_malloc_r+0x3b4>
 8013e16:	e748      	b.n	8013caa <_malloc_r+0x246>
 8013e18:	9a02      	ldr	r2, [sp, #8]
 8013e1a:	2a0f      	cmp	r2, #15
 8013e1c:	d813      	bhi.n	8013e46 <_malloc_r+0x3e2>
 8013e1e:	6063      	str	r3, [r4, #4]
 8013e20:	2203      	movs	r2, #3
 8013e22:	4b1b      	ldr	r3, [pc, #108]	; (8013e90 <_malloc_r+0x42c>)
 8013e24:	689b      	ldr	r3, [r3, #8]
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	4393      	bics	r3, r2
 8013e2a:	1b5a      	subs	r2, r3, r5
 8013e2c:	42ab      	cmp	r3, r5
 8013e2e:	d301      	bcc.n	8013e34 <_malloc_r+0x3d0>
 8013e30:	2a0f      	cmp	r2, #15
 8013e32:	dc1d      	bgt.n	8013e70 <_malloc_r+0x40c>
 8013e34:	9801      	ldr	r0, [sp, #4]
 8013e36:	f000 f867 	bl	8013f08 <__malloc_unlock>
 8013e3a:	e620      	b.n	8013a7e <_malloc_r+0x1a>
 8013e3c:	1ae3      	subs	r3, r4, r3
 8013e3e:	4a13      	ldr	r2, [pc, #76]	; (8013e8c <_malloc_r+0x428>)
 8013e40:	4463      	add	r3, ip
 8013e42:	6013      	str	r3, [r2, #0]
 8013e44:	e7c7      	b.n	8013dd6 <_malloc_r+0x372>
 8013e46:	2207      	movs	r2, #7
 8013e48:	9e02      	ldr	r6, [sp, #8]
 8013e4a:	3e0c      	subs	r6, #12
 8013e4c:	4396      	bics	r6, r2
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	4013      	ands	r3, r2
 8013e52:	2205      	movs	r2, #5
 8013e54:	4333      	orrs	r3, r6
 8013e56:	607b      	str	r3, [r7, #4]
 8013e58:	19bb      	adds	r3, r7, r6
 8013e5a:	605a      	str	r2, [r3, #4]
 8013e5c:	609a      	str	r2, [r3, #8]
 8013e5e:	2e0f      	cmp	r6, #15
 8013e60:	d800      	bhi.n	8013e64 <_malloc_r+0x400>
 8013e62:	e722      	b.n	8013caa <_malloc_r+0x246>
 8013e64:	0039      	movs	r1, r7
 8013e66:	9801      	ldr	r0, [sp, #4]
 8013e68:	3108      	adds	r1, #8
 8013e6a:	f003 fb39 	bl	80174e0 <_free_r>
 8013e6e:	e71c      	b.n	8013caa <_malloc_r+0x246>
 8013e70:	2301      	movs	r3, #1
 8013e72:	0018      	movs	r0, r3
 8013e74:	4906      	ldr	r1, [pc, #24]	; (8013e90 <_malloc_r+0x42c>)
 8013e76:	4328      	orrs	r0, r5
 8013e78:	688c      	ldr	r4, [r1, #8]
 8013e7a:	4313      	orrs	r3, r2
 8013e7c:	1965      	adds	r5, r4, r5
 8013e7e:	6060      	str	r0, [r4, #4]
 8013e80:	608d      	str	r5, [r1, #8]
 8013e82:	606b      	str	r3, [r5, #4]
 8013e84:	e624      	b.n	8013ad0 <_malloc_r+0x6c>
 8013e86:	46c0      	nop			; (mov r8, r8)
 8013e88:	20000abc 	.word	0x20000abc
 8013e8c:	20006950 	.word	0x20006950
 8013e90:	200006b4 	.word	0x200006b4

08013e94 <__ascii_mbtowc>:
 8013e94:	b082      	sub	sp, #8
 8013e96:	2900      	cmp	r1, #0
 8013e98:	d100      	bne.n	8013e9c <__ascii_mbtowc+0x8>
 8013e9a:	a901      	add	r1, sp, #4
 8013e9c:	1e10      	subs	r0, r2, #0
 8013e9e:	d006      	beq.n	8013eae <__ascii_mbtowc+0x1a>
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d006      	beq.n	8013eb2 <__ascii_mbtowc+0x1e>
 8013ea4:	7813      	ldrb	r3, [r2, #0]
 8013ea6:	600b      	str	r3, [r1, #0]
 8013ea8:	7810      	ldrb	r0, [r2, #0]
 8013eaa:	1e43      	subs	r3, r0, #1
 8013eac:	4198      	sbcs	r0, r3
 8013eae:	b002      	add	sp, #8
 8013eb0:	4770      	bx	lr
 8013eb2:	2002      	movs	r0, #2
 8013eb4:	4240      	negs	r0, r0
 8013eb6:	e7fa      	b.n	8013eae <__ascii_mbtowc+0x1a>

08013eb8 <memcmp>:
 8013eb8:	b530      	push	{r4, r5, lr}
 8013eba:	2400      	movs	r4, #0
 8013ebc:	42a2      	cmp	r2, r4
 8013ebe:	d101      	bne.n	8013ec4 <memcmp+0xc>
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	e005      	b.n	8013ed0 <memcmp+0x18>
 8013ec4:	5d03      	ldrb	r3, [r0, r4]
 8013ec6:	1c65      	adds	r5, r4, #1
 8013ec8:	5d0c      	ldrb	r4, [r1, r4]
 8013eca:	42a3      	cmp	r3, r4
 8013ecc:	d001      	beq.n	8013ed2 <memcmp+0x1a>
 8013ece:	1b18      	subs	r0, r3, r4
 8013ed0:	bd30      	pop	{r4, r5, pc}
 8013ed2:	002c      	movs	r4, r5
 8013ed4:	e7f2      	b.n	8013ebc <memcmp+0x4>

08013ed6 <memcpy>:
 8013ed6:	2300      	movs	r3, #0
 8013ed8:	b510      	push	{r4, lr}
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d100      	bne.n	8013ee0 <memcpy+0xa>
 8013ede:	bd10      	pop	{r4, pc}
 8013ee0:	5ccc      	ldrb	r4, [r1, r3]
 8013ee2:	54c4      	strb	r4, [r0, r3]
 8013ee4:	3301      	adds	r3, #1
 8013ee6:	e7f8      	b.n	8013eda <memcpy+0x4>

08013ee8 <memset>:
 8013ee8:	0003      	movs	r3, r0
 8013eea:	1812      	adds	r2, r2, r0
 8013eec:	4293      	cmp	r3, r2
 8013eee:	d100      	bne.n	8013ef2 <memset+0xa>
 8013ef0:	4770      	bx	lr
 8013ef2:	7019      	strb	r1, [r3, #0]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	e7f9      	b.n	8013eec <memset+0x4>

08013ef8 <__malloc_lock>:
 8013ef8:	b510      	push	{r4, lr}
 8013efa:	4802      	ldr	r0, [pc, #8]	; (8013f04 <__malloc_lock+0xc>)
 8013efc:	f003 fee4 	bl	8017cc8 <__retarget_lock_acquire_recursive>
 8013f00:	bd10      	pop	{r4, pc}
 8013f02:	46c0      	nop			; (mov r8, r8)
 8013f04:	20006fec 	.word	0x20006fec

08013f08 <__malloc_unlock>:
 8013f08:	b510      	push	{r4, lr}
 8013f0a:	4802      	ldr	r0, [pc, #8]	; (8013f14 <__malloc_unlock+0xc>)
 8013f0c:	f003 fedd 	bl	8017cca <__retarget_lock_release_recursive>
 8013f10:	bd10      	pop	{r4, pc}
 8013f12:	46c0      	nop			; (mov r8, r8)
 8013f14:	20006fec 	.word	0x20006fec

08013f18 <rand>:
 8013f18:	4b09      	ldr	r3, [pc, #36]	; (8013f40 <rand+0x28>)
 8013f1a:	b510      	push	{r4, lr}
 8013f1c:	681c      	ldr	r4, [r3, #0]
 8013f1e:	4a09      	ldr	r2, [pc, #36]	; (8013f44 <rand+0x2c>)
 8013f20:	34a8      	adds	r4, #168	; 0xa8
 8013f22:	6820      	ldr	r0, [r4, #0]
 8013f24:	6861      	ldr	r1, [r4, #4]
 8013f26:	4b08      	ldr	r3, [pc, #32]	; (8013f48 <rand+0x30>)
 8013f28:	f7ec fb20 	bl	800056c <__aeabi_lmul>
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	2300      	movs	r3, #0
 8013f30:	1880      	adds	r0, r0, r2
 8013f32:	4159      	adcs	r1, r3
 8013f34:	6020      	str	r0, [r4, #0]
 8013f36:	6061      	str	r1, [r4, #4]
 8013f38:	0048      	lsls	r0, r1, #1
 8013f3a:	0840      	lsrs	r0, r0, #1
 8013f3c:	bd10      	pop	{r4, pc}
 8013f3e:	46c0      	nop			; (mov r8, r8)
 8013f40:	2000011c 	.word	0x2000011c
 8013f44:	4c957f2d 	.word	0x4c957f2d
 8013f48:	5851f42d 	.word	0x5851f42d

08013f4c <realloc>:
 8013f4c:	b510      	push	{r4, lr}
 8013f4e:	4b03      	ldr	r3, [pc, #12]	; (8013f5c <realloc+0x10>)
 8013f50:	000a      	movs	r2, r1
 8013f52:	0001      	movs	r1, r0
 8013f54:	6818      	ldr	r0, [r3, #0]
 8013f56:	f000 f803 	bl	8013f60 <_realloc_r>
 8013f5a:	bd10      	pop	{r4, pc}
 8013f5c:	2000011c 	.word	0x2000011c

08013f60 <_realloc_r>:
 8013f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f62:	b087      	sub	sp, #28
 8013f64:	9003      	str	r0, [sp, #12]
 8013f66:	1e0c      	subs	r4, r1, #0
 8013f68:	9205      	str	r2, [sp, #20]
 8013f6a:	d106      	bne.n	8013f7a <_realloc_r+0x1a>
 8013f6c:	0011      	movs	r1, r2
 8013f6e:	f7ff fd79 	bl	8013a64 <_malloc_r>
 8013f72:	0007      	movs	r7, r0
 8013f74:	0038      	movs	r0, r7
 8013f76:	b007      	add	sp, #28
 8013f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f7a:	9803      	ldr	r0, [sp, #12]
 8013f7c:	f7ff ffbc 	bl	8013ef8 <__malloc_lock>
 8013f80:	0023      	movs	r3, r4
 8013f82:	3b08      	subs	r3, #8
 8013f84:	685f      	ldr	r7, [r3, #4]
 8013f86:	9302      	str	r3, [sp, #8]
 8013f88:	003a      	movs	r2, r7
 8013f8a:	2303      	movs	r3, #3
 8013f8c:	9e05      	ldr	r6, [sp, #20]
 8013f8e:	439a      	bics	r2, r3
 8013f90:	360b      	adds	r6, #11
 8013f92:	9204      	str	r2, [sp, #16]
 8013f94:	2e16      	cmp	r6, #22
 8013f96:	d908      	bls.n	8013faa <_realloc_r+0x4a>
 8013f98:	3304      	adds	r3, #4
 8013f9a:	439e      	bics	r6, r3
 8013f9c:	9601      	str	r6, [sp, #4]
 8013f9e:	d506      	bpl.n	8013fae <_realloc_r+0x4e>
 8013fa0:	230c      	movs	r3, #12
 8013fa2:	9a03      	ldr	r2, [sp, #12]
 8013fa4:	2700      	movs	r7, #0
 8013fa6:	6013      	str	r3, [r2, #0]
 8013fa8:	e7e4      	b.n	8013f74 <_realloc_r+0x14>
 8013faa:	2310      	movs	r3, #16
 8013fac:	9301      	str	r3, [sp, #4]
 8013fae:	9b01      	ldr	r3, [sp, #4]
 8013fb0:	9a05      	ldr	r2, [sp, #20]
 8013fb2:	4293      	cmp	r3, r2
 8013fb4:	d3f4      	bcc.n	8013fa0 <_realloc_r+0x40>
 8013fb6:	9b01      	ldr	r3, [sp, #4]
 8013fb8:	9a04      	ldr	r2, [sp, #16]
 8013fba:	4293      	cmp	r3, r2
 8013fbc:	dc00      	bgt.n	8013fc0 <_realloc_r+0x60>
 8013fbe:	e16f      	b.n	80142a0 <_realloc_r+0x340>
 8013fc0:	9b02      	ldr	r3, [sp, #8]
 8013fc2:	48bc      	ldr	r0, [pc, #752]	; (80142b4 <_realloc_r+0x354>)
 8013fc4:	189b      	adds	r3, r3, r2
 8013fc6:	6882      	ldr	r2, [r0, #8]
 8013fc8:	4694      	mov	ip, r2
 8013fca:	685a      	ldr	r2, [r3, #4]
 8013fcc:	459c      	cmp	ip, r3
 8013fce:	d006      	beq.n	8013fde <_realloc_r+0x7e>
 8013fd0:	2501      	movs	r5, #1
 8013fd2:	0011      	movs	r1, r2
 8013fd4:	43a9      	bics	r1, r5
 8013fd6:	1859      	adds	r1, r3, r1
 8013fd8:	6849      	ldr	r1, [r1, #4]
 8013fda:	4229      	tst	r1, r5
 8013fdc:	d146      	bne.n	801406c <_realloc_r+0x10c>
 8013fde:	2103      	movs	r1, #3
 8013fe0:	438a      	bics	r2, r1
 8013fe2:	9904      	ldr	r1, [sp, #16]
 8013fe4:	188e      	adds	r6, r1, r2
 8013fe6:	9901      	ldr	r1, [sp, #4]
 8013fe8:	459c      	cmp	ip, r3
 8013fea:	d117      	bne.n	801401c <_realloc_r+0xbc>
 8013fec:	3110      	adds	r1, #16
 8013fee:	42b1      	cmp	r1, r6
 8013ff0:	dc3e      	bgt.n	8014070 <_realloc_r+0x110>
 8013ff2:	9901      	ldr	r1, [sp, #4]
 8013ff4:	9b02      	ldr	r3, [sp, #8]
 8013ff6:	468c      	mov	ip, r1
 8013ff8:	4463      	add	r3, ip
 8013ffa:	6083      	str	r3, [r0, #8]
 8013ffc:	001a      	movs	r2, r3
 8013ffe:	1a73      	subs	r3, r6, r1
 8014000:	2601      	movs	r6, #1
 8014002:	4333      	orrs	r3, r6
 8014004:	6053      	str	r3, [r2, #4]
 8014006:	0023      	movs	r3, r4
 8014008:	3b08      	subs	r3, #8
 801400a:	685a      	ldr	r2, [r3, #4]
 801400c:	9803      	ldr	r0, [sp, #12]
 801400e:	4016      	ands	r6, r2
 8014010:	430e      	orrs	r6, r1
 8014012:	605e      	str	r6, [r3, #4]
 8014014:	f7ff ff78 	bl	8013f08 <__malloc_unlock>
 8014018:	0027      	movs	r7, r4
 801401a:	e7ab      	b.n	8013f74 <_realloc_r+0x14>
 801401c:	42b1      	cmp	r1, r6
 801401e:	dc27      	bgt.n	8014070 <_realloc_r+0x110>
 8014020:	68da      	ldr	r2, [r3, #12]
 8014022:	689b      	ldr	r3, [r3, #8]
 8014024:	60da      	str	r2, [r3, #12]
 8014026:	6093      	str	r3, [r2, #8]
 8014028:	9b01      	ldr	r3, [sp, #4]
 801402a:	9a02      	ldr	r2, [sp, #8]
 801402c:	1af4      	subs	r4, r6, r3
 801402e:	9b02      	ldr	r3, [sp, #8]
 8014030:	1992      	adds	r2, r2, r6
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	9304      	str	r3, [sp, #16]
 8014036:	2301      	movs	r3, #1
 8014038:	9804      	ldr	r0, [sp, #16]
 801403a:	4018      	ands	r0, r3
 801403c:	2c0f      	cmp	r4, #15
 801403e:	d800      	bhi.n	8014042 <_realloc_r+0xe2>
 8014040:	e130      	b.n	80142a4 <_realloc_r+0x344>
 8014042:	9d01      	ldr	r5, [sp, #4]
 8014044:	9902      	ldr	r1, [sp, #8]
 8014046:	4328      	orrs	r0, r5
 8014048:	1949      	adds	r1, r1, r5
 801404a:	9d02      	ldr	r5, [sp, #8]
 801404c:	431c      	orrs	r4, r3
 801404e:	6068      	str	r0, [r5, #4]
 8014050:	604c      	str	r4, [r1, #4]
 8014052:	6850      	ldr	r0, [r2, #4]
 8014054:	3108      	adds	r1, #8
 8014056:	4303      	orrs	r3, r0
 8014058:	6053      	str	r3, [r2, #4]
 801405a:	9803      	ldr	r0, [sp, #12]
 801405c:	f003 fa40 	bl	80174e0 <_free_r>
 8014060:	9803      	ldr	r0, [sp, #12]
 8014062:	f7ff ff51 	bl	8013f08 <__malloc_unlock>
 8014066:	9f02      	ldr	r7, [sp, #8]
 8014068:	3708      	adds	r7, #8
 801406a:	e783      	b.n	8013f74 <_realloc_r+0x14>
 801406c:	2200      	movs	r2, #0
 801406e:	0013      	movs	r3, r2
 8014070:	07f9      	lsls	r1, r7, #31
 8014072:	d500      	bpl.n	8014076 <_realloc_r+0x116>
 8014074:	e0c6      	b.n	8014204 <_realloc_r+0x2a4>
 8014076:	0021      	movs	r1, r4
 8014078:	3908      	subs	r1, #8
 801407a:	680d      	ldr	r5, [r1, #0]
 801407c:	9902      	ldr	r1, [sp, #8]
 801407e:	1b4d      	subs	r5, r1, r5
 8014080:	2103      	movs	r1, #3
 8014082:	686f      	ldr	r7, [r5, #4]
 8014084:	438f      	bics	r7, r1
 8014086:	9904      	ldr	r1, [sp, #16]
 8014088:	187f      	adds	r7, r7, r1
 801408a:	2b00      	cmp	r3, #0
 801408c:	d100      	bne.n	8014090 <_realloc_r+0x130>
 801408e:	e084      	b.n	801419a <_realloc_r+0x23a>
 8014090:	19d6      	adds	r6, r2, r7
 8014092:	459c      	cmp	ip, r3
 8014094:	d148      	bne.n	8014128 <_realloc_r+0x1c8>
 8014096:	9b01      	ldr	r3, [sp, #4]
 8014098:	3310      	adds	r3, #16
 801409a:	42b3      	cmp	r3, r6
 801409c:	dc7d      	bgt.n	801419a <_realloc_r+0x23a>
 801409e:	68aa      	ldr	r2, [r5, #8]
 80140a0:	68eb      	ldr	r3, [r5, #12]
 80140a2:	002f      	movs	r7, r5
 80140a4:	60d3      	str	r3, [r2, #12]
 80140a6:	609a      	str	r2, [r3, #8]
 80140a8:	000a      	movs	r2, r1
 80140aa:	3a04      	subs	r2, #4
 80140ac:	3708      	adds	r7, #8
 80140ae:	2a24      	cmp	r2, #36	; 0x24
 80140b0:	d835      	bhi.n	801411e <_realloc_r+0x1be>
 80140b2:	003b      	movs	r3, r7
 80140b4:	2a13      	cmp	r2, #19
 80140b6:	d908      	bls.n	80140ca <_realloc_r+0x16a>
 80140b8:	6823      	ldr	r3, [r4, #0]
 80140ba:	60ab      	str	r3, [r5, #8]
 80140bc:	6863      	ldr	r3, [r4, #4]
 80140be:	60eb      	str	r3, [r5, #12]
 80140c0:	2a1b      	cmp	r2, #27
 80140c2:	d81a      	bhi.n	80140fa <_realloc_r+0x19a>
 80140c4:	002b      	movs	r3, r5
 80140c6:	3408      	adds	r4, #8
 80140c8:	3310      	adds	r3, #16
 80140ca:	6822      	ldr	r2, [r4, #0]
 80140cc:	601a      	str	r2, [r3, #0]
 80140ce:	6862      	ldr	r2, [r4, #4]
 80140d0:	605a      	str	r2, [r3, #4]
 80140d2:	68a2      	ldr	r2, [r4, #8]
 80140d4:	609a      	str	r2, [r3, #8]
 80140d6:	9b01      	ldr	r3, [sp, #4]
 80140d8:	18ea      	adds	r2, r5, r3
 80140da:	4b76      	ldr	r3, [pc, #472]	; (80142b4 <_realloc_r+0x354>)
 80140dc:	609a      	str	r2, [r3, #8]
 80140de:	9b01      	ldr	r3, [sp, #4]
 80140e0:	1af3      	subs	r3, r6, r3
 80140e2:	2601      	movs	r6, #1
 80140e4:	4333      	orrs	r3, r6
 80140e6:	6053      	str	r3, [r2, #4]
 80140e8:	686b      	ldr	r3, [r5, #4]
 80140ea:	401e      	ands	r6, r3
 80140ec:	9b01      	ldr	r3, [sp, #4]
 80140ee:	431e      	orrs	r6, r3
 80140f0:	606e      	str	r6, [r5, #4]
 80140f2:	9803      	ldr	r0, [sp, #12]
 80140f4:	f7ff ff08 	bl	8013f08 <__malloc_unlock>
 80140f8:	e73c      	b.n	8013f74 <_realloc_r+0x14>
 80140fa:	68a3      	ldr	r3, [r4, #8]
 80140fc:	612b      	str	r3, [r5, #16]
 80140fe:	68e3      	ldr	r3, [r4, #12]
 8014100:	616b      	str	r3, [r5, #20]
 8014102:	2a24      	cmp	r2, #36	; 0x24
 8014104:	d003      	beq.n	801410e <_realloc_r+0x1ae>
 8014106:	002b      	movs	r3, r5
 8014108:	3410      	adds	r4, #16
 801410a:	3318      	adds	r3, #24
 801410c:	e7dd      	b.n	80140ca <_realloc_r+0x16a>
 801410e:	6923      	ldr	r3, [r4, #16]
 8014110:	61ab      	str	r3, [r5, #24]
 8014112:	002b      	movs	r3, r5
 8014114:	6962      	ldr	r2, [r4, #20]
 8014116:	3320      	adds	r3, #32
 8014118:	61ea      	str	r2, [r5, #28]
 801411a:	3418      	adds	r4, #24
 801411c:	e7d5      	b.n	80140ca <_realloc_r+0x16a>
 801411e:	0021      	movs	r1, r4
 8014120:	0038      	movs	r0, r7
 8014122:	f003 fdde 	bl	8017ce2 <memmove>
 8014126:	e7d6      	b.n	80140d6 <_realloc_r+0x176>
 8014128:	9a01      	ldr	r2, [sp, #4]
 801412a:	42b2      	cmp	r2, r6
 801412c:	dc35      	bgt.n	801419a <_realloc_r+0x23a>
 801412e:	0028      	movs	r0, r5
 8014130:	68da      	ldr	r2, [r3, #12]
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	3008      	adds	r0, #8
 8014136:	60da      	str	r2, [r3, #12]
 8014138:	6093      	str	r3, [r2, #8]
 801413a:	68aa      	ldr	r2, [r5, #8]
 801413c:	68eb      	ldr	r3, [r5, #12]
 801413e:	60d3      	str	r3, [r2, #12]
 8014140:	609a      	str	r2, [r3, #8]
 8014142:	9a04      	ldr	r2, [sp, #16]
 8014144:	3a04      	subs	r2, #4
 8014146:	2a24      	cmp	r2, #36	; 0x24
 8014148:	d823      	bhi.n	8014192 <_realloc_r+0x232>
 801414a:	2a13      	cmp	r2, #19
 801414c:	d907      	bls.n	801415e <_realloc_r+0x1fe>
 801414e:	6823      	ldr	r3, [r4, #0]
 8014150:	60ab      	str	r3, [r5, #8]
 8014152:	6863      	ldr	r3, [r4, #4]
 8014154:	60eb      	str	r3, [r5, #12]
 8014156:	2a1b      	cmp	r2, #27
 8014158:	d809      	bhi.n	801416e <_realloc_r+0x20e>
 801415a:	3408      	adds	r4, #8
 801415c:	3008      	adds	r0, #8
 801415e:	6823      	ldr	r3, [r4, #0]
 8014160:	6003      	str	r3, [r0, #0]
 8014162:	6863      	ldr	r3, [r4, #4]
 8014164:	6043      	str	r3, [r0, #4]
 8014166:	68a3      	ldr	r3, [r4, #8]
 8014168:	6083      	str	r3, [r0, #8]
 801416a:	9502      	str	r5, [sp, #8]
 801416c:	e75c      	b.n	8014028 <_realloc_r+0xc8>
 801416e:	68a3      	ldr	r3, [r4, #8]
 8014170:	612b      	str	r3, [r5, #16]
 8014172:	68e3      	ldr	r3, [r4, #12]
 8014174:	616b      	str	r3, [r5, #20]
 8014176:	2a24      	cmp	r2, #36	; 0x24
 8014178:	d003      	beq.n	8014182 <_realloc_r+0x222>
 801417a:	0028      	movs	r0, r5
 801417c:	3410      	adds	r4, #16
 801417e:	3018      	adds	r0, #24
 8014180:	e7ed      	b.n	801415e <_realloc_r+0x1fe>
 8014182:	0028      	movs	r0, r5
 8014184:	6923      	ldr	r3, [r4, #16]
 8014186:	3020      	adds	r0, #32
 8014188:	61ab      	str	r3, [r5, #24]
 801418a:	6963      	ldr	r3, [r4, #20]
 801418c:	3418      	adds	r4, #24
 801418e:	61eb      	str	r3, [r5, #28]
 8014190:	e7e5      	b.n	801415e <_realloc_r+0x1fe>
 8014192:	0021      	movs	r1, r4
 8014194:	f003 fda5 	bl	8017ce2 <memmove>
 8014198:	e7e7      	b.n	801416a <_realloc_r+0x20a>
 801419a:	9b01      	ldr	r3, [sp, #4]
 801419c:	42bb      	cmp	r3, r7
 801419e:	dc31      	bgt.n	8014204 <_realloc_r+0x2a4>
 80141a0:	0028      	movs	r0, r5
 80141a2:	68aa      	ldr	r2, [r5, #8]
 80141a4:	68eb      	ldr	r3, [r5, #12]
 80141a6:	3008      	adds	r0, #8
 80141a8:	60d3      	str	r3, [r2, #12]
 80141aa:	609a      	str	r2, [r3, #8]
 80141ac:	9a04      	ldr	r2, [sp, #16]
 80141ae:	3a04      	subs	r2, #4
 80141b0:	2a24      	cmp	r2, #36	; 0x24
 80141b2:	d823      	bhi.n	80141fc <_realloc_r+0x29c>
 80141b4:	2a13      	cmp	r2, #19
 80141b6:	d907      	bls.n	80141c8 <_realloc_r+0x268>
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	60ab      	str	r3, [r5, #8]
 80141bc:	6863      	ldr	r3, [r4, #4]
 80141be:	60eb      	str	r3, [r5, #12]
 80141c0:	2a1b      	cmp	r2, #27
 80141c2:	d809      	bhi.n	80141d8 <_realloc_r+0x278>
 80141c4:	3408      	adds	r4, #8
 80141c6:	3008      	adds	r0, #8
 80141c8:	6823      	ldr	r3, [r4, #0]
 80141ca:	6003      	str	r3, [r0, #0]
 80141cc:	6863      	ldr	r3, [r4, #4]
 80141ce:	6043      	str	r3, [r0, #4]
 80141d0:	68a3      	ldr	r3, [r4, #8]
 80141d2:	6083      	str	r3, [r0, #8]
 80141d4:	003e      	movs	r6, r7
 80141d6:	e7c8      	b.n	801416a <_realloc_r+0x20a>
 80141d8:	68a3      	ldr	r3, [r4, #8]
 80141da:	612b      	str	r3, [r5, #16]
 80141dc:	68e3      	ldr	r3, [r4, #12]
 80141de:	616b      	str	r3, [r5, #20]
 80141e0:	2a24      	cmp	r2, #36	; 0x24
 80141e2:	d003      	beq.n	80141ec <_realloc_r+0x28c>
 80141e4:	0028      	movs	r0, r5
 80141e6:	3410      	adds	r4, #16
 80141e8:	3018      	adds	r0, #24
 80141ea:	e7ed      	b.n	80141c8 <_realloc_r+0x268>
 80141ec:	0028      	movs	r0, r5
 80141ee:	6923      	ldr	r3, [r4, #16]
 80141f0:	3020      	adds	r0, #32
 80141f2:	61ab      	str	r3, [r5, #24]
 80141f4:	6963      	ldr	r3, [r4, #20]
 80141f6:	3418      	adds	r4, #24
 80141f8:	61eb      	str	r3, [r5, #28]
 80141fa:	e7e5      	b.n	80141c8 <_realloc_r+0x268>
 80141fc:	0021      	movs	r1, r4
 80141fe:	f003 fd70 	bl	8017ce2 <memmove>
 8014202:	e7e7      	b.n	80141d4 <_realloc_r+0x274>
 8014204:	9905      	ldr	r1, [sp, #20]
 8014206:	9803      	ldr	r0, [sp, #12]
 8014208:	f7ff fc2c 	bl	8013a64 <_malloc_r>
 801420c:	1e07      	subs	r7, r0, #0
 801420e:	d100      	bne.n	8014212 <_realloc_r+0x2b2>
 8014210:	e76f      	b.n	80140f2 <_realloc_r+0x192>
 8014212:	0023      	movs	r3, r4
 8014214:	2201      	movs	r2, #1
 8014216:	3b08      	subs	r3, #8
 8014218:	685b      	ldr	r3, [r3, #4]
 801421a:	4393      	bics	r3, r2
 801421c:	9a02      	ldr	r2, [sp, #8]
 801421e:	18d3      	adds	r3, r2, r3
 8014220:	0002      	movs	r2, r0
 8014222:	3a08      	subs	r2, #8
 8014224:	4293      	cmp	r3, r2
 8014226:	d105      	bne.n	8014234 <_realloc_r+0x2d4>
 8014228:	685e      	ldr	r6, [r3, #4]
 801422a:	2303      	movs	r3, #3
 801422c:	439e      	bics	r6, r3
 801422e:	9b04      	ldr	r3, [sp, #16]
 8014230:	18f6      	adds	r6, r6, r3
 8014232:	e6f9      	b.n	8014028 <_realloc_r+0xc8>
 8014234:	9a04      	ldr	r2, [sp, #16]
 8014236:	3a04      	subs	r2, #4
 8014238:	2a24      	cmp	r2, #36	; 0x24
 801423a:	d82d      	bhi.n	8014298 <_realloc_r+0x338>
 801423c:	2a13      	cmp	r2, #19
 801423e:	d928      	bls.n	8014292 <_realloc_r+0x332>
 8014240:	6823      	ldr	r3, [r4, #0]
 8014242:	6003      	str	r3, [r0, #0]
 8014244:	6863      	ldr	r3, [r4, #4]
 8014246:	6043      	str	r3, [r0, #4]
 8014248:	2a1b      	cmp	r2, #27
 801424a:	d80e      	bhi.n	801426a <_realloc_r+0x30a>
 801424c:	0022      	movs	r2, r4
 801424e:	0003      	movs	r3, r0
 8014250:	3208      	adds	r2, #8
 8014252:	3308      	adds	r3, #8
 8014254:	6811      	ldr	r1, [r2, #0]
 8014256:	6019      	str	r1, [r3, #0]
 8014258:	6851      	ldr	r1, [r2, #4]
 801425a:	6059      	str	r1, [r3, #4]
 801425c:	6892      	ldr	r2, [r2, #8]
 801425e:	609a      	str	r2, [r3, #8]
 8014260:	0021      	movs	r1, r4
 8014262:	9803      	ldr	r0, [sp, #12]
 8014264:	f003 f93c 	bl	80174e0 <_free_r>
 8014268:	e743      	b.n	80140f2 <_realloc_r+0x192>
 801426a:	68a3      	ldr	r3, [r4, #8]
 801426c:	6083      	str	r3, [r0, #8]
 801426e:	68e3      	ldr	r3, [r4, #12]
 8014270:	60c3      	str	r3, [r0, #12]
 8014272:	2a24      	cmp	r2, #36	; 0x24
 8014274:	d004      	beq.n	8014280 <_realloc_r+0x320>
 8014276:	0022      	movs	r2, r4
 8014278:	0003      	movs	r3, r0
 801427a:	3210      	adds	r2, #16
 801427c:	3310      	adds	r3, #16
 801427e:	e7e9      	b.n	8014254 <_realloc_r+0x2f4>
 8014280:	6923      	ldr	r3, [r4, #16]
 8014282:	0022      	movs	r2, r4
 8014284:	6103      	str	r3, [r0, #16]
 8014286:	0003      	movs	r3, r0
 8014288:	6961      	ldr	r1, [r4, #20]
 801428a:	3218      	adds	r2, #24
 801428c:	3318      	adds	r3, #24
 801428e:	6141      	str	r1, [r0, #20]
 8014290:	e7e0      	b.n	8014254 <_realloc_r+0x2f4>
 8014292:	0003      	movs	r3, r0
 8014294:	0022      	movs	r2, r4
 8014296:	e7dd      	b.n	8014254 <_realloc_r+0x2f4>
 8014298:	0021      	movs	r1, r4
 801429a:	f003 fd22 	bl	8017ce2 <memmove>
 801429e:	e7df      	b.n	8014260 <_realloc_r+0x300>
 80142a0:	9e04      	ldr	r6, [sp, #16]
 80142a2:	e6c1      	b.n	8014028 <_realloc_r+0xc8>
 80142a4:	9902      	ldr	r1, [sp, #8]
 80142a6:	4306      	orrs	r6, r0
 80142a8:	604e      	str	r6, [r1, #4]
 80142aa:	6851      	ldr	r1, [r2, #4]
 80142ac:	430b      	orrs	r3, r1
 80142ae:	6053      	str	r3, [r2, #4]
 80142b0:	e6d6      	b.n	8014060 <_realloc_r+0x100>
 80142b2:	46c0      	nop			; (mov r8, r8)
 80142b4:	200006b4 	.word	0x200006b4

080142b8 <_sbrk_r>:
 80142b8:	2300      	movs	r3, #0
 80142ba:	b570      	push	{r4, r5, r6, lr}
 80142bc:	4c06      	ldr	r4, [pc, #24]	; (80142d8 <_sbrk_r+0x20>)
 80142be:	0005      	movs	r5, r0
 80142c0:	0008      	movs	r0, r1
 80142c2:	6023      	str	r3, [r4, #0]
 80142c4:	f004 fa1e 	bl	8018704 <_sbrk>
 80142c8:	1c43      	adds	r3, r0, #1
 80142ca:	d103      	bne.n	80142d4 <_sbrk_r+0x1c>
 80142cc:	6823      	ldr	r3, [r4, #0]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d000      	beq.n	80142d4 <_sbrk_r+0x1c>
 80142d2:	602b      	str	r3, [r5, #0]
 80142d4:	bd70      	pop	{r4, r5, r6, pc}
 80142d6:	46c0      	nop			; (mov r8, r8)
 80142d8:	20006ff4 	.word	0x20006ff4

080142dc <snprintf>:
 80142dc:	b40c      	push	{r2, r3}
 80142de:	b530      	push	{r4, r5, lr}
 80142e0:	4b16      	ldr	r3, [pc, #88]	; (801433c <snprintf+0x60>)
 80142e2:	b09d      	sub	sp, #116	; 0x74
 80142e4:	1e0c      	subs	r4, r1, #0
 80142e6:	681d      	ldr	r5, [r3, #0]
 80142e8:	da08      	bge.n	80142fc <snprintf+0x20>
 80142ea:	238b      	movs	r3, #139	; 0x8b
 80142ec:	2001      	movs	r0, #1
 80142ee:	602b      	str	r3, [r5, #0]
 80142f0:	4240      	negs	r0, r0
 80142f2:	b01d      	add	sp, #116	; 0x74
 80142f4:	bc30      	pop	{r4, r5}
 80142f6:	bc08      	pop	{r3}
 80142f8:	b002      	add	sp, #8
 80142fa:	4718      	bx	r3
 80142fc:	2382      	movs	r3, #130	; 0x82
 80142fe:	a902      	add	r1, sp, #8
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	818b      	strh	r3, [r1, #12]
 8014304:	2300      	movs	r3, #0
 8014306:	9002      	str	r0, [sp, #8]
 8014308:	6108      	str	r0, [r1, #16]
 801430a:	429c      	cmp	r4, r3
 801430c:	d000      	beq.n	8014310 <snprintf+0x34>
 801430e:	1e63      	subs	r3, r4, #1
 8014310:	608b      	str	r3, [r1, #8]
 8014312:	614b      	str	r3, [r1, #20]
 8014314:	2301      	movs	r3, #1
 8014316:	425b      	negs	r3, r3
 8014318:	81cb      	strh	r3, [r1, #14]
 801431a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801431c:	ab21      	add	r3, sp, #132	; 0x84
 801431e:	0028      	movs	r0, r5
 8014320:	9301      	str	r3, [sp, #4]
 8014322:	f000 ff97 	bl	8015254 <_svfprintf_r>
 8014326:	1c43      	adds	r3, r0, #1
 8014328:	da01      	bge.n	801432e <snprintf+0x52>
 801432a:	238b      	movs	r3, #139	; 0x8b
 801432c:	602b      	str	r3, [r5, #0]
 801432e:	2c00      	cmp	r4, #0
 8014330:	d0df      	beq.n	80142f2 <snprintf+0x16>
 8014332:	2300      	movs	r3, #0
 8014334:	9a02      	ldr	r2, [sp, #8]
 8014336:	7013      	strb	r3, [r2, #0]
 8014338:	e7db      	b.n	80142f2 <snprintf+0x16>
 801433a:	46c0      	nop			; (mov r8, r8)
 801433c:	2000011c 	.word	0x2000011c

08014340 <sprintf>:
 8014340:	b40e      	push	{r1, r2, r3}
 8014342:	b500      	push	{lr}
 8014344:	490b      	ldr	r1, [pc, #44]	; (8014374 <sprintf+0x34>)
 8014346:	b09c      	sub	sp, #112	; 0x70
 8014348:	ab1d      	add	r3, sp, #116	; 0x74
 801434a:	9002      	str	r0, [sp, #8]
 801434c:	9006      	str	r0, [sp, #24]
 801434e:	9107      	str	r1, [sp, #28]
 8014350:	9104      	str	r1, [sp, #16]
 8014352:	4809      	ldr	r0, [pc, #36]	; (8014378 <sprintf+0x38>)
 8014354:	4909      	ldr	r1, [pc, #36]	; (801437c <sprintf+0x3c>)
 8014356:	cb04      	ldmia	r3!, {r2}
 8014358:	9105      	str	r1, [sp, #20]
 801435a:	6800      	ldr	r0, [r0, #0]
 801435c:	a902      	add	r1, sp, #8
 801435e:	9301      	str	r3, [sp, #4]
 8014360:	f000 ff78 	bl	8015254 <_svfprintf_r>
 8014364:	2300      	movs	r3, #0
 8014366:	9a02      	ldr	r2, [sp, #8]
 8014368:	7013      	strb	r3, [r2, #0]
 801436a:	b01c      	add	sp, #112	; 0x70
 801436c:	bc08      	pop	{r3}
 801436e:	b003      	add	sp, #12
 8014370:	4718      	bx	r3
 8014372:	46c0      	nop			; (mov r8, r8)
 8014374:	7fffffff 	.word	0x7fffffff
 8014378:	2000011c 	.word	0x2000011c
 801437c:	ffff0208 	.word	0xffff0208

08014380 <strcat>:
 8014380:	0002      	movs	r2, r0
 8014382:	b510      	push	{r4, lr}
 8014384:	7813      	ldrb	r3, [r2, #0]
 8014386:	1c54      	adds	r4, r2, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d105      	bne.n	8014398 <strcat+0x18>
 801438c:	5ccc      	ldrb	r4, [r1, r3]
 801438e:	54d4      	strb	r4, [r2, r3]
 8014390:	3301      	adds	r3, #1
 8014392:	2c00      	cmp	r4, #0
 8014394:	d1fa      	bne.n	801438c <strcat+0xc>
 8014396:	bd10      	pop	{r4, pc}
 8014398:	0022      	movs	r2, r4
 801439a:	e7f3      	b.n	8014384 <strcat+0x4>

0801439c <strchr>:
 801439c:	b2c9      	uxtb	r1, r1
 801439e:	7803      	ldrb	r3, [r0, #0]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d004      	beq.n	80143ae <strchr+0x12>
 80143a4:	428b      	cmp	r3, r1
 80143a6:	d100      	bne.n	80143aa <strchr+0xe>
 80143a8:	4770      	bx	lr
 80143aa:	3001      	adds	r0, #1
 80143ac:	e7f7      	b.n	801439e <strchr+0x2>
 80143ae:	424b      	negs	r3, r1
 80143b0:	4159      	adcs	r1, r3
 80143b2:	4249      	negs	r1, r1
 80143b4:	4008      	ands	r0, r1
 80143b6:	e7f7      	b.n	80143a8 <strchr+0xc>

080143b8 <strcpy>:
 80143b8:	0003      	movs	r3, r0
 80143ba:	780a      	ldrb	r2, [r1, #0]
 80143bc:	3101      	adds	r1, #1
 80143be:	701a      	strb	r2, [r3, #0]
 80143c0:	3301      	adds	r3, #1
 80143c2:	2a00      	cmp	r2, #0
 80143c4:	d1f9      	bne.n	80143ba <strcpy+0x2>
 80143c6:	4770      	bx	lr

080143c8 <strncmp>:
 80143c8:	2300      	movs	r3, #0
 80143ca:	b530      	push	{r4, r5, lr}
 80143cc:	429a      	cmp	r2, r3
 80143ce:	d00a      	beq.n	80143e6 <strncmp+0x1e>
 80143d0:	3a01      	subs	r2, #1
 80143d2:	5cc4      	ldrb	r4, [r0, r3]
 80143d4:	5ccd      	ldrb	r5, [r1, r3]
 80143d6:	42ac      	cmp	r4, r5
 80143d8:	d104      	bne.n	80143e4 <strncmp+0x1c>
 80143da:	4293      	cmp	r3, r2
 80143dc:	d002      	beq.n	80143e4 <strncmp+0x1c>
 80143de:	3301      	adds	r3, #1
 80143e0:	2c00      	cmp	r4, #0
 80143e2:	d1f6      	bne.n	80143d2 <strncmp+0xa>
 80143e4:	1b63      	subs	r3, r4, r5
 80143e6:	0018      	movs	r0, r3
 80143e8:	bd30      	pop	{r4, r5, pc}

080143ea <strncpy>:
 80143ea:	b530      	push	{r4, r5, lr}
 80143ec:	0005      	movs	r5, r0
 80143ee:	2a00      	cmp	r2, #0
 80143f0:	d100      	bne.n	80143f4 <strncpy+0xa>
 80143f2:	bd30      	pop	{r4, r5, pc}
 80143f4:	780c      	ldrb	r4, [r1, #0]
 80143f6:	3a01      	subs	r2, #1
 80143f8:	1c6b      	adds	r3, r5, #1
 80143fa:	702c      	strb	r4, [r5, #0]
 80143fc:	3101      	adds	r1, #1
 80143fe:	2c00      	cmp	r4, #0
 8014400:	d105      	bne.n	801440e <strncpy+0x24>
 8014402:	189a      	adds	r2, r3, r2
 8014404:	429a      	cmp	r2, r3
 8014406:	d0f4      	beq.n	80143f2 <strncpy+0x8>
 8014408:	701c      	strb	r4, [r3, #0]
 801440a:	3301      	adds	r3, #1
 801440c:	e7fa      	b.n	8014404 <strncpy+0x1a>
 801440e:	001d      	movs	r5, r3
 8014410:	e7ed      	b.n	80143ee <strncpy+0x4>
	...

08014414 <sulp>:
 8014414:	b570      	push	{r4, r5, r6, lr}
 8014416:	0016      	movs	r6, r2
 8014418:	000d      	movs	r5, r1
 801441a:	f003 ff17 	bl	801824c <__ulp>
 801441e:	2e00      	cmp	r6, #0
 8014420:	d00d      	beq.n	801443e <sulp+0x2a>
 8014422:	236b      	movs	r3, #107	; 0x6b
 8014424:	006a      	lsls	r2, r5, #1
 8014426:	0d52      	lsrs	r2, r2, #21
 8014428:	1a9b      	subs	r3, r3, r2
 801442a:	2b00      	cmp	r3, #0
 801442c:	dd07      	ble.n	801443e <sulp+0x2a>
 801442e:	2400      	movs	r4, #0
 8014430:	4a03      	ldr	r2, [pc, #12]	; (8014440 <sulp+0x2c>)
 8014432:	051b      	lsls	r3, r3, #20
 8014434:	189d      	adds	r5, r3, r2
 8014436:	002b      	movs	r3, r5
 8014438:	0022      	movs	r2, r4
 801443a:	f7ed fcfb 	bl	8001e34 <__aeabi_dmul>
 801443e:	bd70      	pop	{r4, r5, r6, pc}
 8014440:	3ff00000 	.word	0x3ff00000

08014444 <_strtod_l>:
 8014444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014446:	b0a7      	sub	sp, #156	; 0x9c
 8014448:	9307      	str	r3, [sp, #28]
 801444a:	2300      	movs	r3, #0
 801444c:	9004      	str	r0, [sp, #16]
 801444e:	9807      	ldr	r0, [sp, #28]
 8014450:	9322      	str	r3, [sp, #136]	; 0x88
 8014452:	9106      	str	r1, [sp, #24]
 8014454:	921d      	str	r2, [sp, #116]	; 0x74
 8014456:	f003 fc28 	bl	8017caa <__localeconv_l>
 801445a:	0005      	movs	r5, r0
 801445c:	6800      	ldr	r0, [r0, #0]
 801445e:	f7eb fe5b 	bl	8000118 <strlen>
 8014462:	2600      	movs	r6, #0
 8014464:	2700      	movs	r7, #0
 8014466:	9b06      	ldr	r3, [sp, #24]
 8014468:	9005      	str	r0, [sp, #20]
 801446a:	9321      	str	r3, [sp, #132]	; 0x84
 801446c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801446e:	781a      	ldrb	r2, [r3, #0]
 8014470:	2a0d      	cmp	r2, #13
 8014472:	d839      	bhi.n	80144e8 <_strtod_l+0xa4>
 8014474:	2a09      	cmp	r2, #9
 8014476:	d23d      	bcs.n	80144f4 <_strtod_l+0xb0>
 8014478:	2a00      	cmp	r2, #0
 801447a:	d044      	beq.n	8014506 <_strtod_l+0xc2>
 801447c:	2300      	movs	r3, #0
 801447e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014480:	2200      	movs	r2, #0
 8014482:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014484:	920c      	str	r2, [sp, #48]	; 0x30
 8014486:	7823      	ldrb	r3, [r4, #0]
 8014488:	2b30      	cmp	r3, #48	; 0x30
 801448a:	d000      	beq.n	801448e <_strtod_l+0x4a>
 801448c:	e07e      	b.n	801458c <_strtod_l+0x148>
 801448e:	7863      	ldrb	r3, [r4, #1]
 8014490:	2b58      	cmp	r3, #88	; 0x58
 8014492:	d002      	beq.n	801449a <_strtod_l+0x56>
 8014494:	2b78      	cmp	r3, #120	; 0x78
 8014496:	d000      	beq.n	801449a <_strtod_l+0x56>
 8014498:	e06e      	b.n	8014578 <_strtod_l+0x134>
 801449a:	9b07      	ldr	r3, [sp, #28]
 801449c:	4a96      	ldr	r2, [pc, #600]	; (80146f8 <_strtod_l+0x2b4>)
 801449e:	9302      	str	r3, [sp, #8]
 80144a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144a2:	a921      	add	r1, sp, #132	; 0x84
 80144a4:	9301      	str	r3, [sp, #4]
 80144a6:	ab22      	add	r3, sp, #136	; 0x88
 80144a8:	9300      	str	r3, [sp, #0]
 80144aa:	9804      	ldr	r0, [sp, #16]
 80144ac:	ab23      	add	r3, sp, #140	; 0x8c
 80144ae:	f003 f914 	bl	80176da <__gethex>
 80144b2:	2507      	movs	r5, #7
 80144b4:	9005      	str	r0, [sp, #20]
 80144b6:	4005      	ands	r5, r0
 80144b8:	d005      	beq.n	80144c6 <_strtod_l+0x82>
 80144ba:	2d06      	cmp	r5, #6
 80144bc:	d12f      	bne.n	801451e <_strtod_l+0xda>
 80144be:	2300      	movs	r3, #0
 80144c0:	3401      	adds	r4, #1
 80144c2:	9421      	str	r4, [sp, #132]	; 0x84
 80144c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80144c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d002      	beq.n	80144d2 <_strtod_l+0x8e>
 80144cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80144ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144d0:	601a      	str	r2, [r3, #0]
 80144d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d01d      	beq.n	8014514 <_strtod_l+0xd0>
 80144d8:	2380      	movs	r3, #128	; 0x80
 80144da:	0032      	movs	r2, r6
 80144dc:	061b      	lsls	r3, r3, #24
 80144de:	18fb      	adds	r3, r7, r3
 80144e0:	0010      	movs	r0, r2
 80144e2:	0019      	movs	r1, r3
 80144e4:	b027      	add	sp, #156	; 0x9c
 80144e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144e8:	2a2b      	cmp	r2, #43	; 0x2b
 80144ea:	d016      	beq.n	801451a <_strtod_l+0xd6>
 80144ec:	2a2d      	cmp	r2, #45	; 0x2d
 80144ee:	d003      	beq.n	80144f8 <_strtod_l+0xb4>
 80144f0:	2a20      	cmp	r2, #32
 80144f2:	d1c3      	bne.n	801447c <_strtod_l+0x38>
 80144f4:	3301      	adds	r3, #1
 80144f6:	e7b8      	b.n	801446a <_strtod_l+0x26>
 80144f8:	2201      	movs	r2, #1
 80144fa:	9213      	str	r2, [sp, #76]	; 0x4c
 80144fc:	1c5a      	adds	r2, r3, #1
 80144fe:	9221      	str	r2, [sp, #132]	; 0x84
 8014500:	785b      	ldrb	r3, [r3, #1]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d1bc      	bne.n	8014480 <_strtod_l+0x3c>
 8014506:	9b06      	ldr	r3, [sp, #24]
 8014508:	9321      	str	r3, [sp, #132]	; 0x84
 801450a:	2300      	movs	r3, #0
 801450c:	9313      	str	r3, [sp, #76]	; 0x4c
 801450e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014510:	2b00      	cmp	r3, #0
 8014512:	d1db      	bne.n	80144cc <_strtod_l+0x88>
 8014514:	0032      	movs	r2, r6
 8014516:	003b      	movs	r3, r7
 8014518:	e7e2      	b.n	80144e0 <_strtod_l+0x9c>
 801451a:	2200      	movs	r2, #0
 801451c:	e7ed      	b.n	80144fa <_strtod_l+0xb6>
 801451e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014520:	2a00      	cmp	r2, #0
 8014522:	d007      	beq.n	8014534 <_strtod_l+0xf0>
 8014524:	2135      	movs	r1, #53	; 0x35
 8014526:	a824      	add	r0, sp, #144	; 0x90
 8014528:	f003 ff7d 	bl	8018426 <__copybits>
 801452c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801452e:	9804      	ldr	r0, [sp, #16]
 8014530:	f003 fc12 	bl	8017d58 <_Bfree>
 8014534:	1e68      	subs	r0, r5, #1
 8014536:	2804      	cmp	r0, #4
 8014538:	d806      	bhi.n	8014548 <_strtod_l+0x104>
 801453a:	f7eb fdf5 	bl	8000128 <__gnu_thumb1_case_uqi>
 801453e:	030c      	.short	0x030c
 8014540:	1917      	.short	0x1917
 8014542:	0c          	.byte	0x0c
 8014543:	00          	.byte	0x00
 8014544:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014546:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014548:	9b05      	ldr	r3, [sp, #20]
 801454a:	071b      	lsls	r3, r3, #28
 801454c:	d5bb      	bpl.n	80144c6 <_strtod_l+0x82>
 801454e:	2380      	movs	r3, #128	; 0x80
 8014550:	061b      	lsls	r3, r3, #24
 8014552:	431f      	orrs	r7, r3
 8014554:	e7b7      	b.n	80144c6 <_strtod_l+0x82>
 8014556:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014558:	4a68      	ldr	r2, [pc, #416]	; (80146fc <_strtod_l+0x2b8>)
 801455a:	4969      	ldr	r1, [pc, #420]	; (8014700 <_strtod_l+0x2bc>)
 801455c:	401a      	ands	r2, r3
 801455e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014560:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014562:	185b      	adds	r3, r3, r1
 8014564:	051b      	lsls	r3, r3, #20
 8014566:	431a      	orrs	r2, r3
 8014568:	0017      	movs	r7, r2
 801456a:	e7ed      	b.n	8014548 <_strtod_l+0x104>
 801456c:	4f65      	ldr	r7, [pc, #404]	; (8014704 <_strtod_l+0x2c0>)
 801456e:	e7eb      	b.n	8014548 <_strtod_l+0x104>
 8014570:	2601      	movs	r6, #1
 8014572:	4f65      	ldr	r7, [pc, #404]	; (8014708 <_strtod_l+0x2c4>)
 8014574:	4276      	negs	r6, r6
 8014576:	e7e7      	b.n	8014548 <_strtod_l+0x104>
 8014578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801457a:	1c5a      	adds	r2, r3, #1
 801457c:	9221      	str	r2, [sp, #132]	; 0x84
 801457e:	785b      	ldrb	r3, [r3, #1]
 8014580:	2b30      	cmp	r3, #48	; 0x30
 8014582:	d0f9      	beq.n	8014578 <_strtod_l+0x134>
 8014584:	2b00      	cmp	r3, #0
 8014586:	d09e      	beq.n	80144c6 <_strtod_l+0x82>
 8014588:	2301      	movs	r3, #1
 801458a:	930c      	str	r3, [sp, #48]	; 0x30
 801458c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801458e:	220a      	movs	r2, #10
 8014590:	9312      	str	r3, [sp, #72]	; 0x48
 8014592:	2300      	movs	r3, #0
 8014594:	930b      	str	r3, [sp, #44]	; 0x2c
 8014596:	9308      	str	r3, [sp, #32]
 8014598:	930a      	str	r3, [sp, #40]	; 0x28
 801459a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801459c:	7804      	ldrb	r4, [r0, #0]
 801459e:	0023      	movs	r3, r4
 80145a0:	3b30      	subs	r3, #48	; 0x30
 80145a2:	b2d9      	uxtb	r1, r3
 80145a4:	2909      	cmp	r1, #9
 80145a6:	d934      	bls.n	8014612 <_strtod_l+0x1ce>
 80145a8:	9a05      	ldr	r2, [sp, #20]
 80145aa:	6829      	ldr	r1, [r5, #0]
 80145ac:	f7ff ff0c 	bl	80143c8 <strncmp>
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d040      	beq.n	8014636 <_strtod_l+0x1f2>
 80145b4:	2000      	movs	r0, #0
 80145b6:	0023      	movs	r3, r4
 80145b8:	4684      	mov	ip, r0
 80145ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80145bc:	9007      	str	r0, [sp, #28]
 80145be:	9205      	str	r2, [sp, #20]
 80145c0:	2220      	movs	r2, #32
 80145c2:	0019      	movs	r1, r3
 80145c4:	4391      	bics	r1, r2
 80145c6:	000a      	movs	r2, r1
 80145c8:	2100      	movs	r1, #0
 80145ca:	2a45      	cmp	r2, #69	; 0x45
 80145cc:	d000      	beq.n	80145d0 <_strtod_l+0x18c>
 80145ce:	e0bf      	b.n	8014750 <_strtod_l+0x30c>
 80145d0:	9b05      	ldr	r3, [sp, #20]
 80145d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145d4:	4303      	orrs	r3, r0
 80145d6:	4313      	orrs	r3, r2
 80145d8:	428b      	cmp	r3, r1
 80145da:	d094      	beq.n	8014506 <_strtod_l+0xc2>
 80145dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145de:	9306      	str	r3, [sp, #24]
 80145e0:	3301      	adds	r3, #1
 80145e2:	9321      	str	r3, [sp, #132]	; 0x84
 80145e4:	9b06      	ldr	r3, [sp, #24]
 80145e6:	785b      	ldrb	r3, [r3, #1]
 80145e8:	2b2b      	cmp	r3, #43	; 0x2b
 80145ea:	d100      	bne.n	80145ee <_strtod_l+0x1aa>
 80145ec:	e082      	b.n	80146f4 <_strtod_l+0x2b0>
 80145ee:	000c      	movs	r4, r1
 80145f0:	2b2d      	cmp	r3, #45	; 0x2d
 80145f2:	d105      	bne.n	8014600 <_strtod_l+0x1bc>
 80145f4:	2401      	movs	r4, #1
 80145f6:	9b06      	ldr	r3, [sp, #24]
 80145f8:	3302      	adds	r3, #2
 80145fa:	9321      	str	r3, [sp, #132]	; 0x84
 80145fc:	9b06      	ldr	r3, [sp, #24]
 80145fe:	789b      	ldrb	r3, [r3, #2]
 8014600:	001a      	movs	r2, r3
 8014602:	3a30      	subs	r2, #48	; 0x30
 8014604:	2a09      	cmp	r2, #9
 8014606:	d800      	bhi.n	801460a <_strtod_l+0x1c6>
 8014608:	e084      	b.n	8014714 <_strtod_l+0x2d0>
 801460a:	9a06      	ldr	r2, [sp, #24]
 801460c:	2100      	movs	r1, #0
 801460e:	9221      	str	r2, [sp, #132]	; 0x84
 8014610:	e09e      	b.n	8014750 <_strtod_l+0x30c>
 8014612:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014614:	2908      	cmp	r1, #8
 8014616:	dc09      	bgt.n	801462c <_strtod_l+0x1e8>
 8014618:	9908      	ldr	r1, [sp, #32]
 801461a:	4351      	muls	r1, r2
 801461c:	18cb      	adds	r3, r1, r3
 801461e:	9308      	str	r3, [sp, #32]
 8014620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014622:	3001      	adds	r0, #1
 8014624:	3301      	adds	r3, #1
 8014626:	930a      	str	r3, [sp, #40]	; 0x28
 8014628:	9021      	str	r0, [sp, #132]	; 0x84
 801462a:	e7b6      	b.n	801459a <_strtod_l+0x156>
 801462c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801462e:	4351      	muls	r1, r2
 8014630:	18cb      	adds	r3, r1, r3
 8014632:	930b      	str	r3, [sp, #44]	; 0x2c
 8014634:	e7f4      	b.n	8014620 <_strtod_l+0x1dc>
 8014636:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014638:	9b05      	ldr	r3, [sp, #20]
 801463a:	4694      	mov	ip, r2
 801463c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801463e:	4463      	add	r3, ip
 8014640:	9321      	str	r3, [sp, #132]	; 0x84
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	2a00      	cmp	r2, #0
 8014646:	d036      	beq.n	80146b6 <_strtod_l+0x272>
 8014648:	4684      	mov	ip, r0
 801464a:	9205      	str	r2, [sp, #20]
 801464c:	001a      	movs	r2, r3
 801464e:	3a30      	subs	r2, #48	; 0x30
 8014650:	2a09      	cmp	r2, #9
 8014652:	d912      	bls.n	801467a <_strtod_l+0x236>
 8014654:	2201      	movs	r2, #1
 8014656:	9207      	str	r2, [sp, #28]
 8014658:	e7b2      	b.n	80145c0 <_strtod_l+0x17c>
 801465a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801465c:	3001      	adds	r0, #1
 801465e:	1c5a      	adds	r2, r3, #1
 8014660:	9221      	str	r2, [sp, #132]	; 0x84
 8014662:	785b      	ldrb	r3, [r3, #1]
 8014664:	2b30      	cmp	r3, #48	; 0x30
 8014666:	d0f8      	beq.n	801465a <_strtod_l+0x216>
 8014668:	001a      	movs	r2, r3
 801466a:	3a31      	subs	r2, #49	; 0x31
 801466c:	2a08      	cmp	r2, #8
 801466e:	d83c      	bhi.n	80146ea <_strtod_l+0x2a6>
 8014670:	4684      	mov	ip, r0
 8014672:	2000      	movs	r0, #0
 8014674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014676:	9005      	str	r0, [sp, #20]
 8014678:	9212      	str	r2, [sp, #72]	; 0x48
 801467a:	3b30      	subs	r3, #48	; 0x30
 801467c:	1c42      	adds	r2, r0, #1
 801467e:	2b00      	cmp	r3, #0
 8014680:	d013      	beq.n	80146aa <_strtod_l+0x266>
 8014682:	210a      	movs	r1, #10
 8014684:	4494      	add	ip, r2
 8014686:	9a05      	ldr	r2, [sp, #20]
 8014688:	1885      	adds	r5, r0, r2
 801468a:	42aa      	cmp	r2, r5
 801468c:	d115      	bne.n	80146ba <_strtod_l+0x276>
 801468e:	9905      	ldr	r1, [sp, #20]
 8014690:	9a05      	ldr	r2, [sp, #20]
 8014692:	3101      	adds	r1, #1
 8014694:	1809      	adds	r1, r1, r0
 8014696:	1812      	adds	r2, r2, r0
 8014698:	9105      	str	r1, [sp, #20]
 801469a:	2a08      	cmp	r2, #8
 801469c:	dc1b      	bgt.n	80146d6 <_strtod_l+0x292>
 801469e:	220a      	movs	r2, #10
 80146a0:	9908      	ldr	r1, [sp, #32]
 80146a2:	434a      	muls	r2, r1
 80146a4:	189b      	adds	r3, r3, r2
 80146a6:	2200      	movs	r2, #0
 80146a8:	9308      	str	r3, [sp, #32]
 80146aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146ac:	0010      	movs	r0, r2
 80146ae:	1c59      	adds	r1, r3, #1
 80146b0:	9121      	str	r1, [sp, #132]	; 0x84
 80146b2:	785b      	ldrb	r3, [r3, #1]
 80146b4:	e7ca      	b.n	801464c <_strtod_l+0x208>
 80146b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80146b8:	e7d4      	b.n	8014664 <_strtod_l+0x220>
 80146ba:	1c54      	adds	r4, r2, #1
 80146bc:	2a08      	cmp	r2, #8
 80146be:	dc04      	bgt.n	80146ca <_strtod_l+0x286>
 80146c0:	9a08      	ldr	r2, [sp, #32]
 80146c2:	434a      	muls	r2, r1
 80146c4:	9208      	str	r2, [sp, #32]
 80146c6:	0022      	movs	r2, r4
 80146c8:	e7df      	b.n	801468a <_strtod_l+0x246>
 80146ca:	2c10      	cmp	r4, #16
 80146cc:	dcfb      	bgt.n	80146c6 <_strtod_l+0x282>
 80146ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80146d0:	434a      	muls	r2, r1
 80146d2:	920b      	str	r2, [sp, #44]	; 0x2c
 80146d4:	e7f7      	b.n	80146c6 <_strtod_l+0x282>
 80146d6:	9905      	ldr	r1, [sp, #20]
 80146d8:	2200      	movs	r2, #0
 80146da:	2910      	cmp	r1, #16
 80146dc:	dce5      	bgt.n	80146aa <_strtod_l+0x266>
 80146de:	210a      	movs	r1, #10
 80146e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80146e2:	4341      	muls	r1, r0
 80146e4:	185b      	adds	r3, r3, r1
 80146e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80146e8:	e7df      	b.n	80146aa <_strtod_l+0x266>
 80146ea:	2200      	movs	r2, #0
 80146ec:	4694      	mov	ip, r2
 80146ee:	9205      	str	r2, [sp, #20]
 80146f0:	3201      	adds	r2, #1
 80146f2:	e7b0      	b.n	8014656 <_strtod_l+0x212>
 80146f4:	000c      	movs	r4, r1
 80146f6:	e77e      	b.n	80145f6 <_strtod_l+0x1b2>
 80146f8:	0801b834 	.word	0x0801b834
 80146fc:	ffefffff 	.word	0xffefffff
 8014700:	00000433 	.word	0x00000433
 8014704:	7ff00000 	.word	0x7ff00000
 8014708:	7fffffff 	.word	0x7fffffff
 801470c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801470e:	1c5a      	adds	r2, r3, #1
 8014710:	9221      	str	r2, [sp, #132]	; 0x84
 8014712:	785b      	ldrb	r3, [r3, #1]
 8014714:	2b30      	cmp	r3, #48	; 0x30
 8014716:	d0f9      	beq.n	801470c <_strtod_l+0x2c8>
 8014718:	001a      	movs	r2, r3
 801471a:	3a31      	subs	r2, #49	; 0x31
 801471c:	2100      	movs	r1, #0
 801471e:	2a08      	cmp	r2, #8
 8014720:	d816      	bhi.n	8014750 <_strtod_l+0x30c>
 8014722:	3b30      	subs	r3, #48	; 0x30
 8014724:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8014726:	930e      	str	r3, [sp, #56]	; 0x38
 8014728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801472a:	1c59      	adds	r1, r3, #1
 801472c:	9121      	str	r1, [sp, #132]	; 0x84
 801472e:	785b      	ldrb	r3, [r3, #1]
 8014730:	001a      	movs	r2, r3
 8014732:	3a30      	subs	r2, #48	; 0x30
 8014734:	2a09      	cmp	r2, #9
 8014736:	d932      	bls.n	801479e <_strtod_l+0x35a>
 8014738:	1b4a      	subs	r2, r1, r5
 801473a:	4dad      	ldr	r5, [pc, #692]	; (80149f0 <_strtod_l+0x5ac>)
 801473c:	0029      	movs	r1, r5
 801473e:	2a08      	cmp	r2, #8
 8014740:	dc03      	bgt.n	801474a <_strtod_l+0x306>
 8014742:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014744:	42a9      	cmp	r1, r5
 8014746:	dd00      	ble.n	801474a <_strtod_l+0x306>
 8014748:	0029      	movs	r1, r5
 801474a:	2c00      	cmp	r4, #0
 801474c:	d000      	beq.n	8014750 <_strtod_l+0x30c>
 801474e:	4249      	negs	r1, r1
 8014750:	9a05      	ldr	r2, [sp, #20]
 8014752:	2a00      	cmp	r2, #0
 8014754:	d149      	bne.n	80147ea <_strtod_l+0x3a6>
 8014756:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014758:	4310      	orrs	r0, r2
 801475a:	d000      	beq.n	801475e <_strtod_l+0x31a>
 801475c:	e6b3      	b.n	80144c6 <_strtod_l+0x82>
 801475e:	9a07      	ldr	r2, [sp, #28]
 8014760:	2a00      	cmp	r2, #0
 8014762:	d000      	beq.n	8014766 <_strtod_l+0x322>
 8014764:	e6cf      	b.n	8014506 <_strtod_l+0xc2>
 8014766:	2b4e      	cmp	r3, #78	; 0x4e
 8014768:	d025      	beq.n	80147b6 <_strtod_l+0x372>
 801476a:	dc1f      	bgt.n	80147ac <_strtod_l+0x368>
 801476c:	2b49      	cmp	r3, #73	; 0x49
 801476e:	d000      	beq.n	8014772 <_strtod_l+0x32e>
 8014770:	e6c9      	b.n	8014506 <_strtod_l+0xc2>
 8014772:	49a0      	ldr	r1, [pc, #640]	; (80149f4 <_strtod_l+0x5b0>)
 8014774:	a821      	add	r0, sp, #132	; 0x84
 8014776:	f003 f9ed 	bl	8017b54 <__match>
 801477a:	2800      	cmp	r0, #0
 801477c:	d100      	bne.n	8014780 <_strtod_l+0x33c>
 801477e:	e6c2      	b.n	8014506 <_strtod_l+0xc2>
 8014780:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014782:	499d      	ldr	r1, [pc, #628]	; (80149f8 <_strtod_l+0x5b4>)
 8014784:	3b01      	subs	r3, #1
 8014786:	a821      	add	r0, sp, #132	; 0x84
 8014788:	9321      	str	r3, [sp, #132]	; 0x84
 801478a:	f003 f9e3 	bl	8017b54 <__match>
 801478e:	2800      	cmp	r0, #0
 8014790:	d102      	bne.n	8014798 <_strtod_l+0x354>
 8014792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014794:	3301      	adds	r3, #1
 8014796:	9321      	str	r3, [sp, #132]	; 0x84
 8014798:	4f98      	ldr	r7, [pc, #608]	; (80149fc <_strtod_l+0x5b8>)
 801479a:	2600      	movs	r6, #0
 801479c:	e693      	b.n	80144c6 <_strtod_l+0x82>
 801479e:	220a      	movs	r2, #10
 80147a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80147a2:	434a      	muls	r2, r1
 80147a4:	18d2      	adds	r2, r2, r3
 80147a6:	3a30      	subs	r2, #48	; 0x30
 80147a8:	920e      	str	r2, [sp, #56]	; 0x38
 80147aa:	e7bd      	b.n	8014728 <_strtod_l+0x2e4>
 80147ac:	2b69      	cmp	r3, #105	; 0x69
 80147ae:	d0e0      	beq.n	8014772 <_strtod_l+0x32e>
 80147b0:	2b6e      	cmp	r3, #110	; 0x6e
 80147b2:	d000      	beq.n	80147b6 <_strtod_l+0x372>
 80147b4:	e6a7      	b.n	8014506 <_strtod_l+0xc2>
 80147b6:	4992      	ldr	r1, [pc, #584]	; (8014a00 <_strtod_l+0x5bc>)
 80147b8:	a821      	add	r0, sp, #132	; 0x84
 80147ba:	f003 f9cb 	bl	8017b54 <__match>
 80147be:	2800      	cmp	r0, #0
 80147c0:	d100      	bne.n	80147c4 <_strtod_l+0x380>
 80147c2:	e6a0      	b.n	8014506 <_strtod_l+0xc2>
 80147c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	2b28      	cmp	r3, #40	; 0x28
 80147ca:	d10c      	bne.n	80147e6 <_strtod_l+0x3a2>
 80147cc:	aa24      	add	r2, sp, #144	; 0x90
 80147ce:	498d      	ldr	r1, [pc, #564]	; (8014a04 <_strtod_l+0x5c0>)
 80147d0:	a821      	add	r0, sp, #132	; 0x84
 80147d2:	f003 f9d3 	bl	8017b7c <__hexnan>
 80147d6:	2805      	cmp	r0, #5
 80147d8:	d105      	bne.n	80147e6 <_strtod_l+0x3a2>
 80147da:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80147dc:	4a87      	ldr	r2, [pc, #540]	; (80149fc <_strtod_l+0x5b8>)
 80147de:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80147e0:	431a      	orrs	r2, r3
 80147e2:	0017      	movs	r7, r2
 80147e4:	e66f      	b.n	80144c6 <_strtod_l+0x82>
 80147e6:	4f88      	ldr	r7, [pc, #544]	; (8014a08 <_strtod_l+0x5c4>)
 80147e8:	e7d7      	b.n	801479a <_strtod_l+0x356>
 80147ea:	4663      	mov	r3, ip
 80147ec:	1acb      	subs	r3, r1, r3
 80147ee:	9307      	str	r3, [sp, #28]
 80147f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d101      	bne.n	80147fa <_strtod_l+0x3b6>
 80147f6:	9b05      	ldr	r3, [sp, #20]
 80147f8:	930a      	str	r3, [sp, #40]	; 0x28
 80147fa:	9c05      	ldr	r4, [sp, #20]
 80147fc:	2c10      	cmp	r4, #16
 80147fe:	dd00      	ble.n	8014802 <_strtod_l+0x3be>
 8014800:	2410      	movs	r4, #16
 8014802:	9808      	ldr	r0, [sp, #32]
 8014804:	f7ee f95c 	bl	8002ac0 <__aeabi_ui2d>
 8014808:	9b05      	ldr	r3, [sp, #20]
 801480a:	0006      	movs	r6, r0
 801480c:	000f      	movs	r7, r1
 801480e:	2b09      	cmp	r3, #9
 8014810:	dc15      	bgt.n	801483e <_strtod_l+0x3fa>
 8014812:	9b07      	ldr	r3, [sp, #28]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d100      	bne.n	801481a <_strtod_l+0x3d6>
 8014818:	e655      	b.n	80144c6 <_strtod_l+0x82>
 801481a:	9b07      	ldr	r3, [sp, #28]
 801481c:	2b00      	cmp	r3, #0
 801481e:	dc00      	bgt.n	8014822 <_strtod_l+0x3de>
 8014820:	e07d      	b.n	801491e <_strtod_l+0x4da>
 8014822:	2b16      	cmp	r3, #22
 8014824:	dc62      	bgt.n	80148ec <_strtod_l+0x4a8>
 8014826:	00dc      	lsls	r4, r3, #3
 8014828:	4b78      	ldr	r3, [pc, #480]	; (8014a0c <_strtod_l+0x5c8>)
 801482a:	0032      	movs	r2, r6
 801482c:	1919      	adds	r1, r3, r4
 801482e:	003b      	movs	r3, r7
 8014830:	6808      	ldr	r0, [r1, #0]
 8014832:	6849      	ldr	r1, [r1, #4]
 8014834:	f7ed fafe 	bl	8001e34 <__aeabi_dmul>
 8014838:	0006      	movs	r6, r0
 801483a:	000f      	movs	r7, r1
 801483c:	e643      	b.n	80144c6 <_strtod_l+0x82>
 801483e:	0022      	movs	r2, r4
 8014840:	4b72      	ldr	r3, [pc, #456]	; (8014a0c <_strtod_l+0x5c8>)
 8014842:	3a09      	subs	r2, #9
 8014844:	00d2      	lsls	r2, r2, #3
 8014846:	189b      	adds	r3, r3, r2
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	685b      	ldr	r3, [r3, #4]
 801484c:	f7ed faf2 	bl	8001e34 <__aeabi_dmul>
 8014850:	0006      	movs	r6, r0
 8014852:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014854:	000f      	movs	r7, r1
 8014856:	f7ee f933 	bl	8002ac0 <__aeabi_ui2d>
 801485a:	000b      	movs	r3, r1
 801485c:	0002      	movs	r2, r0
 801485e:	0039      	movs	r1, r7
 8014860:	0030      	movs	r0, r6
 8014862:	f7ec fbc1 	bl	8000fe8 <__aeabi_dadd>
 8014866:	9b05      	ldr	r3, [sp, #20]
 8014868:	0006      	movs	r6, r0
 801486a:	000f      	movs	r7, r1
 801486c:	2b0f      	cmp	r3, #15
 801486e:	ddd0      	ble.n	8014812 <_strtod_l+0x3ce>
 8014870:	9b05      	ldr	r3, [sp, #20]
 8014872:	1b1c      	subs	r4, r3, r4
 8014874:	9b07      	ldr	r3, [sp, #28]
 8014876:	18e4      	adds	r4, r4, r3
 8014878:	2c00      	cmp	r4, #0
 801487a:	dc00      	bgt.n	801487e <_strtod_l+0x43a>
 801487c:	e094      	b.n	80149a8 <_strtod_l+0x564>
 801487e:	230f      	movs	r3, #15
 8014880:	4023      	ands	r3, r4
 8014882:	d00a      	beq.n	801489a <_strtod_l+0x456>
 8014884:	4961      	ldr	r1, [pc, #388]	; (8014a0c <_strtod_l+0x5c8>)
 8014886:	00db      	lsls	r3, r3, #3
 8014888:	18c9      	adds	r1, r1, r3
 801488a:	0032      	movs	r2, r6
 801488c:	6808      	ldr	r0, [r1, #0]
 801488e:	6849      	ldr	r1, [r1, #4]
 8014890:	003b      	movs	r3, r7
 8014892:	f7ed facf 	bl	8001e34 <__aeabi_dmul>
 8014896:	0006      	movs	r6, r0
 8014898:	000f      	movs	r7, r1
 801489a:	230f      	movs	r3, #15
 801489c:	439c      	bics	r4, r3
 801489e:	d06e      	beq.n	801497e <_strtod_l+0x53a>
 80148a0:	3326      	adds	r3, #38	; 0x26
 80148a2:	33ff      	adds	r3, #255	; 0xff
 80148a4:	429c      	cmp	r4, r3
 80148a6:	dd48      	ble.n	801493a <_strtod_l+0x4f6>
 80148a8:	2400      	movs	r4, #0
 80148aa:	9405      	str	r4, [sp, #20]
 80148ac:	940b      	str	r4, [sp, #44]	; 0x2c
 80148ae:	940a      	str	r4, [sp, #40]	; 0x28
 80148b0:	2322      	movs	r3, #34	; 0x22
 80148b2:	2600      	movs	r6, #0
 80148b4:	9a04      	ldr	r2, [sp, #16]
 80148b6:	4f51      	ldr	r7, [pc, #324]	; (80149fc <_strtod_l+0x5b8>)
 80148b8:	6013      	str	r3, [r2, #0]
 80148ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148bc:	42b3      	cmp	r3, r6
 80148be:	d100      	bne.n	80148c2 <_strtod_l+0x47e>
 80148c0:	e601      	b.n	80144c6 <_strtod_l+0x82>
 80148c2:	9922      	ldr	r1, [sp, #136]	; 0x88
 80148c4:	9804      	ldr	r0, [sp, #16]
 80148c6:	f003 fa47 	bl	8017d58 <_Bfree>
 80148ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80148cc:	9804      	ldr	r0, [sp, #16]
 80148ce:	f003 fa43 	bl	8017d58 <_Bfree>
 80148d2:	9905      	ldr	r1, [sp, #20]
 80148d4:	9804      	ldr	r0, [sp, #16]
 80148d6:	f003 fa3f 	bl	8017d58 <_Bfree>
 80148da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80148dc:	9804      	ldr	r0, [sp, #16]
 80148de:	f003 fa3b 	bl	8017d58 <_Bfree>
 80148e2:	0021      	movs	r1, r4
 80148e4:	9804      	ldr	r0, [sp, #16]
 80148e6:	f003 fa37 	bl	8017d58 <_Bfree>
 80148ea:	e5ec      	b.n	80144c6 <_strtod_l+0x82>
 80148ec:	2325      	movs	r3, #37	; 0x25
 80148ee:	9a05      	ldr	r2, [sp, #20]
 80148f0:	1a9b      	subs	r3, r3, r2
 80148f2:	9a07      	ldr	r2, [sp, #28]
 80148f4:	4293      	cmp	r3, r2
 80148f6:	dbbb      	blt.n	8014870 <_strtod_l+0x42c>
 80148f8:	230f      	movs	r3, #15
 80148fa:	9a05      	ldr	r2, [sp, #20]
 80148fc:	4c43      	ldr	r4, [pc, #268]	; (8014a0c <_strtod_l+0x5c8>)
 80148fe:	1a9d      	subs	r5, r3, r2
 8014900:	00e9      	lsls	r1, r5, #3
 8014902:	1861      	adds	r1, r4, r1
 8014904:	0032      	movs	r2, r6
 8014906:	6808      	ldr	r0, [r1, #0]
 8014908:	6849      	ldr	r1, [r1, #4]
 801490a:	003b      	movs	r3, r7
 801490c:	f7ed fa92 	bl	8001e34 <__aeabi_dmul>
 8014910:	9b07      	ldr	r3, [sp, #28]
 8014912:	1b5e      	subs	r6, r3, r5
 8014914:	00f6      	lsls	r6, r6, #3
 8014916:	19a6      	adds	r6, r4, r6
 8014918:	6832      	ldr	r2, [r6, #0]
 801491a:	6873      	ldr	r3, [r6, #4]
 801491c:	e78a      	b.n	8014834 <_strtod_l+0x3f0>
 801491e:	9b07      	ldr	r3, [sp, #28]
 8014920:	3316      	adds	r3, #22
 8014922:	dba5      	blt.n	8014870 <_strtod_l+0x42c>
 8014924:	9b07      	ldr	r3, [sp, #28]
 8014926:	0030      	movs	r0, r6
 8014928:	00da      	lsls	r2, r3, #3
 801492a:	4b38      	ldr	r3, [pc, #224]	; (8014a0c <_strtod_l+0x5c8>)
 801492c:	0039      	movs	r1, r7
 801492e:	1a9b      	subs	r3, r3, r2
 8014930:	681a      	ldr	r2, [r3, #0]
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	f7ec fe74 	bl	8001620 <__aeabi_ddiv>
 8014938:	e77e      	b.n	8014838 <_strtod_l+0x3f4>
 801493a:	2300      	movs	r3, #0
 801493c:	0030      	movs	r0, r6
 801493e:	0039      	movs	r1, r7
 8014940:	001d      	movs	r5, r3
 8014942:	1124      	asrs	r4, r4, #4
 8014944:	2c01      	cmp	r4, #1
 8014946:	dc1d      	bgt.n	8014984 <_strtod_l+0x540>
 8014948:	2b00      	cmp	r3, #0
 801494a:	d001      	beq.n	8014950 <_strtod_l+0x50c>
 801494c:	0006      	movs	r6, r0
 801494e:	000f      	movs	r7, r1
 8014950:	4b2f      	ldr	r3, [pc, #188]	; (8014a10 <_strtod_l+0x5cc>)
 8014952:	00ed      	lsls	r5, r5, #3
 8014954:	18ff      	adds	r7, r7, r3
 8014956:	4b2f      	ldr	r3, [pc, #188]	; (8014a14 <_strtod_l+0x5d0>)
 8014958:	0032      	movs	r2, r6
 801495a:	195d      	adds	r5, r3, r5
 801495c:	6828      	ldr	r0, [r5, #0]
 801495e:	6869      	ldr	r1, [r5, #4]
 8014960:	003b      	movs	r3, r7
 8014962:	f7ed fa67 	bl	8001e34 <__aeabi_dmul>
 8014966:	4b25      	ldr	r3, [pc, #148]	; (80149fc <_strtod_l+0x5b8>)
 8014968:	4a2b      	ldr	r2, [pc, #172]	; (8014a18 <_strtod_l+0x5d4>)
 801496a:	0006      	movs	r6, r0
 801496c:	400b      	ands	r3, r1
 801496e:	4293      	cmp	r3, r2
 8014970:	d89a      	bhi.n	80148a8 <_strtod_l+0x464>
 8014972:	4a2a      	ldr	r2, [pc, #168]	; (8014a1c <_strtod_l+0x5d8>)
 8014974:	4293      	cmp	r3, r2
 8014976:	d913      	bls.n	80149a0 <_strtod_l+0x55c>
 8014978:	2601      	movs	r6, #1
 801497a:	4f29      	ldr	r7, [pc, #164]	; (8014a20 <_strtod_l+0x5dc>)
 801497c:	4276      	negs	r6, r6
 801497e:	2300      	movs	r3, #0
 8014980:	9306      	str	r3, [sp, #24]
 8014982:	e07b      	b.n	8014a7c <_strtod_l+0x638>
 8014984:	2201      	movs	r2, #1
 8014986:	4214      	tst	r4, r2
 8014988:	d007      	beq.n	801499a <_strtod_l+0x556>
 801498a:	4a22      	ldr	r2, [pc, #136]	; (8014a14 <_strtod_l+0x5d0>)
 801498c:	00eb      	lsls	r3, r5, #3
 801498e:	189b      	adds	r3, r3, r2
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	f7ed fa4e 	bl	8001e34 <__aeabi_dmul>
 8014998:	2301      	movs	r3, #1
 801499a:	3501      	adds	r5, #1
 801499c:	1064      	asrs	r4, r4, #1
 801499e:	e7d1      	b.n	8014944 <_strtod_l+0x500>
 80149a0:	23d4      	movs	r3, #212	; 0xd4
 80149a2:	049b      	lsls	r3, r3, #18
 80149a4:	18cf      	adds	r7, r1, r3
 80149a6:	e7ea      	b.n	801497e <_strtod_l+0x53a>
 80149a8:	2c00      	cmp	r4, #0
 80149aa:	d0e8      	beq.n	801497e <_strtod_l+0x53a>
 80149ac:	230f      	movs	r3, #15
 80149ae:	4264      	negs	r4, r4
 80149b0:	4023      	ands	r3, r4
 80149b2:	d00a      	beq.n	80149ca <_strtod_l+0x586>
 80149b4:	4a15      	ldr	r2, [pc, #84]	; (8014a0c <_strtod_l+0x5c8>)
 80149b6:	00db      	lsls	r3, r3, #3
 80149b8:	18d3      	adds	r3, r2, r3
 80149ba:	0030      	movs	r0, r6
 80149bc:	681a      	ldr	r2, [r3, #0]
 80149be:	685b      	ldr	r3, [r3, #4]
 80149c0:	0039      	movs	r1, r7
 80149c2:	f7ec fe2d 	bl	8001620 <__aeabi_ddiv>
 80149c6:	0006      	movs	r6, r0
 80149c8:	000f      	movs	r7, r1
 80149ca:	1124      	asrs	r4, r4, #4
 80149cc:	d0d7      	beq.n	801497e <_strtod_l+0x53a>
 80149ce:	2c1f      	cmp	r4, #31
 80149d0:	dd28      	ble.n	8014a24 <_strtod_l+0x5e0>
 80149d2:	2400      	movs	r4, #0
 80149d4:	9405      	str	r4, [sp, #20]
 80149d6:	940b      	str	r4, [sp, #44]	; 0x2c
 80149d8:	940a      	str	r4, [sp, #40]	; 0x28
 80149da:	2322      	movs	r3, #34	; 0x22
 80149dc:	9a04      	ldr	r2, [sp, #16]
 80149de:	2600      	movs	r6, #0
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80149e4:	2700      	movs	r7, #0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d000      	beq.n	80149ec <_strtod_l+0x5a8>
 80149ea:	e76a      	b.n	80148c2 <_strtod_l+0x47e>
 80149ec:	e56b      	b.n	80144c6 <_strtod_l+0x82>
 80149ee:	46c0      	nop			; (mov r8, r8)
 80149f0:	00004e1f 	.word	0x00004e1f
 80149f4:	0801b88d 	.word	0x0801b88d
 80149f8:	0801b9e0 	.word	0x0801b9e0
 80149fc:	7ff00000 	.word	0x7ff00000
 8014a00:	0801b895 	.word	0x0801b895
 8014a04:	0801b848 	.word	0x0801b848
 8014a08:	fff80000 	.word	0xfff80000
 8014a0c:	0801ba18 	.word	0x0801ba18
 8014a10:	fcb00000 	.word	0xfcb00000
 8014a14:	0801b9f0 	.word	0x0801b9f0
 8014a18:	7ca00000 	.word	0x7ca00000
 8014a1c:	7c900000 	.word	0x7c900000
 8014a20:	7fefffff 	.word	0x7fefffff
 8014a24:	2310      	movs	r3, #16
 8014a26:	4023      	ands	r3, r4
 8014a28:	9306      	str	r3, [sp, #24]
 8014a2a:	d001      	beq.n	8014a30 <_strtod_l+0x5ec>
 8014a2c:	236a      	movs	r3, #106	; 0x6a
 8014a2e:	9306      	str	r3, [sp, #24]
 8014a30:	2300      	movs	r3, #0
 8014a32:	0030      	movs	r0, r6
 8014a34:	0039      	movs	r1, r7
 8014a36:	001d      	movs	r5, r3
 8014a38:	2c00      	cmp	r4, #0
 8014a3a:	dd00      	ble.n	8014a3e <_strtod_l+0x5fa>
 8014a3c:	e10e      	b.n	8014c5c <_strtod_l+0x818>
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d001      	beq.n	8014a46 <_strtod_l+0x602>
 8014a42:	0006      	movs	r6, r0
 8014a44:	000f      	movs	r7, r1
 8014a46:	9b06      	ldr	r3, [sp, #24]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d00f      	beq.n	8014a6c <_strtod_l+0x628>
 8014a4c:	236b      	movs	r3, #107	; 0x6b
 8014a4e:	0079      	lsls	r1, r7, #1
 8014a50:	0d49      	lsrs	r1, r1, #21
 8014a52:	003a      	movs	r2, r7
 8014a54:	1a5b      	subs	r3, r3, r1
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	dd08      	ble.n	8014a6c <_strtod_l+0x628>
 8014a5a:	2b1f      	cmp	r3, #31
 8014a5c:	dc00      	bgt.n	8014a60 <_strtod_l+0x61c>
 8014a5e:	e112      	b.n	8014c86 <_strtod_l+0x842>
 8014a60:	2600      	movs	r6, #0
 8014a62:	2b34      	cmp	r3, #52	; 0x34
 8014a64:	dc00      	bgt.n	8014a68 <_strtod_l+0x624>
 8014a66:	e107      	b.n	8014c78 <_strtod_l+0x834>
 8014a68:	27dc      	movs	r7, #220	; 0xdc
 8014a6a:	04bf      	lsls	r7, r7, #18
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	2300      	movs	r3, #0
 8014a70:	0030      	movs	r0, r6
 8014a72:	0039      	movs	r1, r7
 8014a74:	f7eb fcf2 	bl	800045c <__aeabi_dcmpeq>
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d1aa      	bne.n	80149d2 <_strtod_l+0x58e>
 8014a7c:	9b08      	ldr	r3, [sp, #32]
 8014a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014a80:	9300      	str	r3, [sp, #0]
 8014a82:	9912      	ldr	r1, [sp, #72]	; 0x48
 8014a84:	9b05      	ldr	r3, [sp, #20]
 8014a86:	9804      	ldr	r0, [sp, #16]
 8014a88:	f003 f9ae 	bl	8017de8 <__s2b>
 8014a8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	d100      	bne.n	8014a94 <_strtod_l+0x650>
 8014a92:	e709      	b.n	80148a8 <_strtod_l+0x464>
 8014a94:	9b07      	ldr	r3, [sp, #28]
 8014a96:	9a07      	ldr	r2, [sp, #28]
 8014a98:	17db      	asrs	r3, r3, #31
 8014a9a:	4252      	negs	r2, r2
 8014a9c:	4013      	ands	r3, r2
 8014a9e:	9315      	str	r3, [sp, #84]	; 0x54
 8014aa0:	9b07      	ldr	r3, [sp, #28]
 8014aa2:	2400      	movs	r4, #0
 8014aa4:	43db      	mvns	r3, r3
 8014aa6:	9a07      	ldr	r2, [sp, #28]
 8014aa8:	17db      	asrs	r3, r3, #31
 8014aaa:	401a      	ands	r2, r3
 8014aac:	921c      	str	r2, [sp, #112]	; 0x70
 8014aae:	9405      	str	r4, [sp, #20]
 8014ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ab2:	9804      	ldr	r0, [sp, #16]
 8014ab4:	6859      	ldr	r1, [r3, #4]
 8014ab6:	f003 f927 	bl	8017d08 <_Balloc>
 8014aba:	900a      	str	r0, [sp, #40]	; 0x28
 8014abc:	2800      	cmp	r0, #0
 8014abe:	d100      	bne.n	8014ac2 <_strtod_l+0x67e>
 8014ac0:	e6f6      	b.n	80148b0 <_strtod_l+0x46c>
 8014ac2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014ac6:	691b      	ldr	r3, [r3, #16]
 8014ac8:	310c      	adds	r1, #12
 8014aca:	1c9a      	adds	r2, r3, #2
 8014acc:	0092      	lsls	r2, r2, #2
 8014ace:	300c      	adds	r0, #12
 8014ad0:	9308      	str	r3, [sp, #32]
 8014ad2:	f7ff fa00 	bl	8013ed6 <memcpy>
 8014ad6:	ab24      	add	r3, sp, #144	; 0x90
 8014ad8:	9301      	str	r3, [sp, #4]
 8014ada:	ab23      	add	r3, sp, #140	; 0x8c
 8014adc:	9300      	str	r3, [sp, #0]
 8014ade:	0032      	movs	r2, r6
 8014ae0:	003b      	movs	r3, r7
 8014ae2:	9804      	ldr	r0, [sp, #16]
 8014ae4:	960e      	str	r6, [sp, #56]	; 0x38
 8014ae6:	970f      	str	r7, [sp, #60]	; 0x3c
 8014ae8:	f003 fc22 	bl	8018330 <__d2b>
 8014aec:	9022      	str	r0, [sp, #136]	; 0x88
 8014aee:	2800      	cmp	r0, #0
 8014af0:	d100      	bne.n	8014af4 <_strtod_l+0x6b0>
 8014af2:	e6dd      	b.n	80148b0 <_strtod_l+0x46c>
 8014af4:	2101      	movs	r1, #1
 8014af6:	9804      	ldr	r0, [sp, #16]
 8014af8:	f003 f9fd 	bl	8017ef6 <__i2b>
 8014afc:	9005      	str	r0, [sp, #20]
 8014afe:	2800      	cmp	r0, #0
 8014b00:	d100      	bne.n	8014b04 <_strtod_l+0x6c0>
 8014b02:	e6d5      	b.n	80148b0 <_strtod_l+0x46c>
 8014b04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	da00      	bge.n	8014b0c <_strtod_l+0x6c8>
 8014b0a:	e0c1      	b.n	8014c90 <_strtod_l+0x84c>
 8014b0c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8014b0e:	189d      	adds	r5, r3, r2
 8014b10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014b12:	4694      	mov	ip, r2
 8014b14:	9906      	ldr	r1, [sp, #24]
 8014b16:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8014b18:	1a5b      	subs	r3, r3, r1
 8014b1a:	2136      	movs	r1, #54	; 0x36
 8014b1c:	189b      	adds	r3, r3, r2
 8014b1e:	1a8a      	subs	r2, r1, r2
 8014b20:	49b2      	ldr	r1, [pc, #712]	; (8014dec <_strtod_l+0x9a8>)
 8014b22:	3b01      	subs	r3, #1
 8014b24:	2001      	movs	r0, #1
 8014b26:	428b      	cmp	r3, r1
 8014b28:	db00      	blt.n	8014b2c <_strtod_l+0x6e8>
 8014b2a:	e0bd      	b.n	8014ca8 <_strtod_l+0x864>
 8014b2c:	1ac9      	subs	r1, r1, r3
 8014b2e:	1a52      	subs	r2, r2, r1
 8014b30:	291f      	cmp	r1, #31
 8014b32:	dd00      	ble.n	8014b36 <_strtod_l+0x6f2>
 8014b34:	e0b1      	b.n	8014c9a <_strtod_l+0x856>
 8014b36:	4088      	lsls	r0, r1
 8014b38:	2300      	movs	r3, #0
 8014b3a:	9014      	str	r0, [sp, #80]	; 0x50
 8014b3c:	9310      	str	r3, [sp, #64]	; 0x40
 8014b3e:	18ab      	adds	r3, r5, r2
 8014b40:	9308      	str	r3, [sp, #32]
 8014b42:	0013      	movs	r3, r2
 8014b44:	9a06      	ldr	r2, [sp, #24]
 8014b46:	4463      	add	r3, ip
 8014b48:	18d3      	adds	r3, r2, r3
 8014b4a:	9a08      	ldr	r2, [sp, #32]
 8014b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8014b4e:	002b      	movs	r3, r5
 8014b50:	4295      	cmp	r5, r2
 8014b52:	dd00      	ble.n	8014b56 <_strtod_l+0x712>
 8014b54:	0013      	movs	r3, r2
 8014b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b58:	4293      	cmp	r3, r2
 8014b5a:	dd00      	ble.n	8014b5e <_strtod_l+0x71a>
 8014b5c:	0013      	movs	r3, r2
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	dd06      	ble.n	8014b70 <_strtod_l+0x72c>
 8014b62:	9a08      	ldr	r2, [sp, #32]
 8014b64:	1aed      	subs	r5, r5, r3
 8014b66:	1ad2      	subs	r2, r2, r3
 8014b68:	9208      	str	r2, [sp, #32]
 8014b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b6c:	1ad2      	subs	r2, r2, r3
 8014b6e:	920c      	str	r2, [sp, #48]	; 0x30
 8014b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d017      	beq.n	8014ba6 <_strtod_l+0x762>
 8014b76:	001a      	movs	r2, r3
 8014b78:	9905      	ldr	r1, [sp, #20]
 8014b7a:	9804      	ldr	r0, [sp, #16]
 8014b7c:	f003 fa54 	bl	8018028 <__pow5mult>
 8014b80:	9005      	str	r0, [sp, #20]
 8014b82:	2800      	cmp	r0, #0
 8014b84:	d100      	bne.n	8014b88 <_strtod_l+0x744>
 8014b86:	e693      	b.n	80148b0 <_strtod_l+0x46c>
 8014b88:	0001      	movs	r1, r0
 8014b8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014b8c:	9804      	ldr	r0, [sp, #16]
 8014b8e:	f003 f9bb 	bl	8017f08 <__multiply>
 8014b92:	9012      	str	r0, [sp, #72]	; 0x48
 8014b94:	2800      	cmp	r0, #0
 8014b96:	d100      	bne.n	8014b9a <_strtod_l+0x756>
 8014b98:	e68a      	b.n	80148b0 <_strtod_l+0x46c>
 8014b9a:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014b9c:	9804      	ldr	r0, [sp, #16]
 8014b9e:	f003 f8db 	bl	8017d58 <_Bfree>
 8014ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ba4:	9322      	str	r3, [sp, #136]	; 0x88
 8014ba6:	9b08      	ldr	r3, [sp, #32]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	dd00      	ble.n	8014bae <_strtod_l+0x76a>
 8014bac:	e07f      	b.n	8014cae <_strtod_l+0x86a>
 8014bae:	9b07      	ldr	r3, [sp, #28]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	dd08      	ble.n	8014bc6 <_strtod_l+0x782>
 8014bb4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014bb6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014bb8:	9804      	ldr	r0, [sp, #16]
 8014bba:	f003 fa35 	bl	8018028 <__pow5mult>
 8014bbe:	900a      	str	r0, [sp, #40]	; 0x28
 8014bc0:	2800      	cmp	r0, #0
 8014bc2:	d100      	bne.n	8014bc6 <_strtod_l+0x782>
 8014bc4:	e674      	b.n	80148b0 <_strtod_l+0x46c>
 8014bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	dd08      	ble.n	8014bde <_strtod_l+0x79a>
 8014bcc:	001a      	movs	r2, r3
 8014bce:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014bd0:	9804      	ldr	r0, [sp, #16]
 8014bd2:	f003 fa6b 	bl	80180ac <__lshift>
 8014bd6:	900a      	str	r0, [sp, #40]	; 0x28
 8014bd8:	2800      	cmp	r0, #0
 8014bda:	d100      	bne.n	8014bde <_strtod_l+0x79a>
 8014bdc:	e668      	b.n	80148b0 <_strtod_l+0x46c>
 8014bde:	2d00      	cmp	r5, #0
 8014be0:	dd08      	ble.n	8014bf4 <_strtod_l+0x7b0>
 8014be2:	002a      	movs	r2, r5
 8014be4:	9905      	ldr	r1, [sp, #20]
 8014be6:	9804      	ldr	r0, [sp, #16]
 8014be8:	f003 fa60 	bl	80180ac <__lshift>
 8014bec:	9005      	str	r0, [sp, #20]
 8014bee:	2800      	cmp	r0, #0
 8014bf0:	d100      	bne.n	8014bf4 <_strtod_l+0x7b0>
 8014bf2:	e65d      	b.n	80148b0 <_strtod_l+0x46c>
 8014bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bf6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014bf8:	9804      	ldr	r0, [sp, #16]
 8014bfa:	f003 fac3 	bl	8018184 <__mdiff>
 8014bfe:	1e04      	subs	r4, r0, #0
 8014c00:	d100      	bne.n	8014c04 <_strtod_l+0x7c0>
 8014c02:	e655      	b.n	80148b0 <_strtod_l+0x46c>
 8014c04:	2500      	movs	r5, #0
 8014c06:	68c3      	ldr	r3, [r0, #12]
 8014c08:	9905      	ldr	r1, [sp, #20]
 8014c0a:	60c5      	str	r5, [r0, #12]
 8014c0c:	9312      	str	r3, [sp, #72]	; 0x48
 8014c0e:	f003 fa9f 	bl	8018150 <__mcmp>
 8014c12:	42a8      	cmp	r0, r5
 8014c14:	da55      	bge.n	8014cc2 <_strtod_l+0x87e>
 8014c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014c18:	42ab      	cmp	r3, r5
 8014c1a:	d11b      	bne.n	8014c54 <_strtod_l+0x810>
 8014c1c:	42ae      	cmp	r6, r5
 8014c1e:	d119      	bne.n	8014c54 <_strtod_l+0x810>
 8014c20:	033b      	lsls	r3, r7, #12
 8014c22:	42ab      	cmp	r3, r5
 8014c24:	d116      	bne.n	8014c54 <_strtod_l+0x810>
 8014c26:	22d6      	movs	r2, #214	; 0xd6
 8014c28:	4b71      	ldr	r3, [pc, #452]	; (8014df0 <_strtod_l+0x9ac>)
 8014c2a:	04d2      	lsls	r2, r2, #19
 8014c2c:	403b      	ands	r3, r7
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	d910      	bls.n	8014c54 <_strtod_l+0x810>
 8014c32:	6963      	ldr	r3, [r4, #20]
 8014c34:	42ab      	cmp	r3, r5
 8014c36:	d102      	bne.n	8014c3e <_strtod_l+0x7fa>
 8014c38:	6923      	ldr	r3, [r4, #16]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	dd0a      	ble.n	8014c54 <_strtod_l+0x810>
 8014c3e:	0021      	movs	r1, r4
 8014c40:	2201      	movs	r2, #1
 8014c42:	9804      	ldr	r0, [sp, #16]
 8014c44:	f003 fa32 	bl	80180ac <__lshift>
 8014c48:	9905      	ldr	r1, [sp, #20]
 8014c4a:	0004      	movs	r4, r0
 8014c4c:	f003 fa80 	bl	8018150 <__mcmp>
 8014c50:	2800      	cmp	r0, #0
 8014c52:	dc6b      	bgt.n	8014d2c <_strtod_l+0x8e8>
 8014c54:	9b06      	ldr	r3, [sp, #24]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d178      	bne.n	8014d4c <_strtod_l+0x908>
 8014c5a:	e632      	b.n	80148c2 <_strtod_l+0x47e>
 8014c5c:	2201      	movs	r2, #1
 8014c5e:	4214      	tst	r4, r2
 8014c60:	d007      	beq.n	8014c72 <_strtod_l+0x82e>
 8014c62:	4a64      	ldr	r2, [pc, #400]	; (8014df4 <_strtod_l+0x9b0>)
 8014c64:	00eb      	lsls	r3, r5, #3
 8014c66:	18d3      	adds	r3, r2, r3
 8014c68:	681a      	ldr	r2, [r3, #0]
 8014c6a:	685b      	ldr	r3, [r3, #4]
 8014c6c:	f7ed f8e2 	bl	8001e34 <__aeabi_dmul>
 8014c70:	2301      	movs	r3, #1
 8014c72:	3501      	adds	r5, #1
 8014c74:	1064      	asrs	r4, r4, #1
 8014c76:	e6df      	b.n	8014a38 <_strtod_l+0x5f4>
 8014c78:	2101      	movs	r1, #1
 8014c7a:	3b20      	subs	r3, #32
 8014c7c:	4249      	negs	r1, r1
 8014c7e:	4099      	lsls	r1, r3
 8014c80:	400a      	ands	r2, r1
 8014c82:	0017      	movs	r7, r2
 8014c84:	e6f2      	b.n	8014a6c <_strtod_l+0x628>
 8014c86:	2201      	movs	r2, #1
 8014c88:	4252      	negs	r2, r2
 8014c8a:	409a      	lsls	r2, r3
 8014c8c:	4016      	ands	r6, r2
 8014c8e:	e6ed      	b.n	8014a6c <_strtod_l+0x628>
 8014c90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014c92:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8014c94:	1ad2      	subs	r2, r2, r3
 8014c96:	4694      	mov	ip, r2
 8014c98:	e73c      	b.n	8014b14 <_strtod_l+0x6d0>
 8014c9a:	4957      	ldr	r1, [pc, #348]	; (8014df8 <_strtod_l+0x9b4>)
 8014c9c:	1acb      	subs	r3, r1, r3
 8014c9e:	0001      	movs	r1, r0
 8014ca0:	4099      	lsls	r1, r3
 8014ca2:	9110      	str	r1, [sp, #64]	; 0x40
 8014ca4:	9014      	str	r0, [sp, #80]	; 0x50
 8014ca6:	e74a      	b.n	8014b3e <_strtod_l+0x6fa>
 8014ca8:	2300      	movs	r3, #0
 8014caa:	9310      	str	r3, [sp, #64]	; 0x40
 8014cac:	e7fa      	b.n	8014ca4 <_strtod_l+0x860>
 8014cae:	9a08      	ldr	r2, [sp, #32]
 8014cb0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014cb2:	9804      	ldr	r0, [sp, #16]
 8014cb4:	f003 f9fa 	bl	80180ac <__lshift>
 8014cb8:	9022      	str	r0, [sp, #136]	; 0x88
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d000      	beq.n	8014cc0 <_strtod_l+0x87c>
 8014cbe:	e776      	b.n	8014bae <_strtod_l+0x76a>
 8014cc0:	e5f6      	b.n	80148b0 <_strtod_l+0x46c>
 8014cc2:	970c      	str	r7, [sp, #48]	; 0x30
 8014cc4:	2800      	cmp	r0, #0
 8014cc6:	d000      	beq.n	8014cca <_strtod_l+0x886>
 8014cc8:	e0a0      	b.n	8014e0c <_strtod_l+0x9c8>
 8014cca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014ccc:	033b      	lsls	r3, r7, #12
 8014cce:	0b1b      	lsrs	r3, r3, #12
 8014cd0:	2a00      	cmp	r2, #0
 8014cd2:	d027      	beq.n	8014d24 <_strtod_l+0x8e0>
 8014cd4:	4a49      	ldr	r2, [pc, #292]	; (8014dfc <_strtod_l+0x9b8>)
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d157      	bne.n	8014d8a <_strtod_l+0x946>
 8014cda:	2201      	movs	r2, #1
 8014cdc:	9b06      	ldr	r3, [sp, #24]
 8014cde:	4252      	negs	r2, r2
 8014ce0:	0031      	movs	r1, r6
 8014ce2:	0010      	movs	r0, r2
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00b      	beq.n	8014d00 <_strtod_l+0x8bc>
 8014ce8:	25d4      	movs	r5, #212	; 0xd4
 8014cea:	4b41      	ldr	r3, [pc, #260]	; (8014df0 <_strtod_l+0x9ac>)
 8014cec:	04ed      	lsls	r5, r5, #19
 8014cee:	403b      	ands	r3, r7
 8014cf0:	0010      	movs	r0, r2
 8014cf2:	42ab      	cmp	r3, r5
 8014cf4:	d804      	bhi.n	8014d00 <_strtod_l+0x8bc>
 8014cf6:	306c      	adds	r0, #108	; 0x6c
 8014cf8:	0d1b      	lsrs	r3, r3, #20
 8014cfa:	1ac3      	subs	r3, r0, r3
 8014cfc:	409a      	lsls	r2, r3
 8014cfe:	0010      	movs	r0, r2
 8014d00:	4281      	cmp	r1, r0
 8014d02:	d142      	bne.n	8014d8a <_strtod_l+0x946>
 8014d04:	4b3e      	ldr	r3, [pc, #248]	; (8014e00 <_strtod_l+0x9bc>)
 8014d06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	d102      	bne.n	8014d12 <_strtod_l+0x8ce>
 8014d0c:	1c4b      	adds	r3, r1, #1
 8014d0e:	d100      	bne.n	8014d12 <_strtod_l+0x8ce>
 8014d10:	e5ce      	b.n	80148b0 <_strtod_l+0x46c>
 8014d12:	4b37      	ldr	r3, [pc, #220]	; (8014df0 <_strtod_l+0x9ac>)
 8014d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d16:	2600      	movs	r6, #0
 8014d18:	401a      	ands	r2, r3
 8014d1a:	0013      	movs	r3, r2
 8014d1c:	2280      	movs	r2, #128	; 0x80
 8014d1e:	0352      	lsls	r2, r2, #13
 8014d20:	189f      	adds	r7, r3, r2
 8014d22:	e797      	b.n	8014c54 <_strtod_l+0x810>
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d130      	bne.n	8014d8a <_strtod_l+0x946>
 8014d28:	2e00      	cmp	r6, #0
 8014d2a:	d12e      	bne.n	8014d8a <_strtod_l+0x946>
 8014d2c:	9906      	ldr	r1, [sp, #24]
 8014d2e:	003b      	movs	r3, r7
 8014d30:	4a2f      	ldr	r2, [pc, #188]	; (8014df0 <_strtod_l+0x9ac>)
 8014d32:	2900      	cmp	r1, #0
 8014d34:	d020      	beq.n	8014d78 <_strtod_l+0x934>
 8014d36:	0011      	movs	r1, r2
 8014d38:	20d6      	movs	r0, #214	; 0xd6
 8014d3a:	4039      	ands	r1, r7
 8014d3c:	04c0      	lsls	r0, r0, #19
 8014d3e:	4281      	cmp	r1, r0
 8014d40:	dc1a      	bgt.n	8014d78 <_strtod_l+0x934>
 8014d42:	23dc      	movs	r3, #220	; 0xdc
 8014d44:	049b      	lsls	r3, r3, #18
 8014d46:	4299      	cmp	r1, r3
 8014d48:	dc00      	bgt.n	8014d4c <_strtod_l+0x908>
 8014d4a:	e646      	b.n	80149da <_strtod_l+0x596>
 8014d4c:	4b2d      	ldr	r3, [pc, #180]	; (8014e04 <_strtod_l+0x9c0>)
 8014d4e:	0030      	movs	r0, r6
 8014d50:	931b      	str	r3, [sp, #108]	; 0x6c
 8014d52:	2300      	movs	r3, #0
 8014d54:	931a      	str	r3, [sp, #104]	; 0x68
 8014d56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8014d58:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d5a:	0039      	movs	r1, r7
 8014d5c:	f7ed f86a 	bl	8001e34 <__aeabi_dmul>
 8014d60:	0006      	movs	r6, r0
 8014d62:	000f      	movs	r7, r1
 8014d64:	1e0b      	subs	r3, r1, #0
 8014d66:	d000      	beq.n	8014d6a <_strtod_l+0x926>
 8014d68:	e5ab      	b.n	80148c2 <_strtod_l+0x47e>
 8014d6a:	2800      	cmp	r0, #0
 8014d6c:	d000      	beq.n	8014d70 <_strtod_l+0x92c>
 8014d6e:	e5a8      	b.n	80148c2 <_strtod_l+0x47e>
 8014d70:	9a04      	ldr	r2, [sp, #16]
 8014d72:	3322      	adds	r3, #34	; 0x22
 8014d74:	6013      	str	r3, [r2, #0]
 8014d76:	e5a4      	b.n	80148c2 <_strtod_l+0x47e>
 8014d78:	2601      	movs	r6, #1
 8014d7a:	4013      	ands	r3, r2
 8014d7c:	4a22      	ldr	r2, [pc, #136]	; (8014e08 <_strtod_l+0x9c4>)
 8014d7e:	4276      	negs	r6, r6
 8014d80:	189b      	adds	r3, r3, r2
 8014d82:	4a1e      	ldr	r2, [pc, #120]	; (8014dfc <_strtod_l+0x9b8>)
 8014d84:	431a      	orrs	r2, r3
 8014d86:	0017      	movs	r7, r2
 8014d88:	e764      	b.n	8014c54 <_strtod_l+0x810>
 8014d8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d015      	beq.n	8014dbc <_strtod_l+0x978>
 8014d90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014d92:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014d94:	4213      	tst	r3, r2
 8014d96:	d100      	bne.n	8014d9a <_strtod_l+0x956>
 8014d98:	e75c      	b.n	8014c54 <_strtod_l+0x810>
 8014d9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014d9c:	9a06      	ldr	r2, [sp, #24]
 8014d9e:	0030      	movs	r0, r6
 8014da0:	0039      	movs	r1, r7
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d00f      	beq.n	8014dc6 <_strtod_l+0x982>
 8014da6:	f7ff fb35 	bl	8014414 <sulp>
 8014daa:	0002      	movs	r2, r0
 8014dac:	000b      	movs	r3, r1
 8014dae:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014db0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014db2:	f7ec f919 	bl	8000fe8 <__aeabi_dadd>
 8014db6:	0006      	movs	r6, r0
 8014db8:	000f      	movs	r7, r1
 8014dba:	e74b      	b.n	8014c54 <_strtod_l+0x810>
 8014dbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014dbe:	4233      	tst	r3, r6
 8014dc0:	d100      	bne.n	8014dc4 <_strtod_l+0x980>
 8014dc2:	e747      	b.n	8014c54 <_strtod_l+0x810>
 8014dc4:	e7e9      	b.n	8014d9a <_strtod_l+0x956>
 8014dc6:	f7ff fb25 	bl	8014414 <sulp>
 8014dca:	0002      	movs	r2, r0
 8014dcc:	000b      	movs	r3, r1
 8014dce:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014dd0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014dd2:	f7ed faa1 	bl	8002318 <__aeabi_dsub>
 8014dd6:	2200      	movs	r2, #0
 8014dd8:	2300      	movs	r3, #0
 8014dda:	0006      	movs	r6, r0
 8014ddc:	000f      	movs	r7, r1
 8014dde:	f7eb fb3d 	bl	800045c <__aeabi_dcmpeq>
 8014de2:	2800      	cmp	r0, #0
 8014de4:	d000      	beq.n	8014de8 <_strtod_l+0x9a4>
 8014de6:	e5f8      	b.n	80149da <_strtod_l+0x596>
 8014de8:	e734      	b.n	8014c54 <_strtod_l+0x810>
 8014dea:	46c0      	nop			; (mov r8, r8)
 8014dec:	fffffc02 	.word	0xfffffc02
 8014df0:	7ff00000 	.word	0x7ff00000
 8014df4:	0801b860 	.word	0x0801b860
 8014df8:	fffffbe2 	.word	0xfffffbe2
 8014dfc:	000fffff 	.word	0x000fffff
 8014e00:	7fefffff 	.word	0x7fefffff
 8014e04:	39500000 	.word	0x39500000
 8014e08:	fff00000 	.word	0xfff00000
 8014e0c:	9905      	ldr	r1, [sp, #20]
 8014e0e:	0020      	movs	r0, r4
 8014e10:	f003 fae2 	bl	80183d8 <__ratio>
 8014e14:	2380      	movs	r3, #128	; 0x80
 8014e16:	2200      	movs	r2, #0
 8014e18:	05db      	lsls	r3, r3, #23
 8014e1a:	9008      	str	r0, [sp, #32]
 8014e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8014e1e:	f7eb fb2d 	bl	800047c <__aeabi_dcmple>
 8014e22:	2800      	cmp	r0, #0
 8014e24:	d100      	bne.n	8014e28 <_strtod_l+0x9e4>
 8014e26:	e07f      	b.n	8014f28 <_strtod_l+0xae4>
 8014e28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d04b      	beq.n	8014ec6 <_strtod_l+0xa82>
 8014e2e:	2200      	movs	r2, #0
 8014e30:	4b8a      	ldr	r3, [pc, #552]	; (801505c <_strtod_l+0xc18>)
 8014e32:	9210      	str	r2, [sp, #64]	; 0x40
 8014e34:	9311      	str	r3, [sp, #68]	; 0x44
 8014e36:	4b89      	ldr	r3, [pc, #548]	; (801505c <_strtod_l+0xc18>)
 8014e38:	9308      	str	r3, [sp, #32]
 8014e3a:	4a89      	ldr	r2, [pc, #548]	; (8015060 <_strtod_l+0xc1c>)
 8014e3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e3e:	4013      	ands	r3, r2
 8014e40:	9314      	str	r3, [sp, #80]	; 0x50
 8014e42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014e44:	4b87      	ldr	r3, [pc, #540]	; (8015064 <_strtod_l+0xc20>)
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d000      	beq.n	8014e4c <_strtod_l+0xa08>
 8014e4a:	e0ba      	b.n	8014fc2 <_strtod_l+0xb7e>
 8014e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014e4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e50:	921a      	str	r2, [sp, #104]	; 0x68
 8014e52:	931b      	str	r3, [sp, #108]	; 0x6c
 8014e54:	4a84      	ldr	r2, [pc, #528]	; (8015068 <_strtod_l+0xc24>)
 8014e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e58:	4694      	mov	ip, r2
 8014e5a:	4463      	add	r3, ip
 8014e5c:	001f      	movs	r7, r3
 8014e5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014e62:	0030      	movs	r0, r6
 8014e64:	0039      	movs	r1, r7
 8014e66:	920c      	str	r2, [sp, #48]	; 0x30
 8014e68:	930d      	str	r3, [sp, #52]	; 0x34
 8014e6a:	f003 f9ef 	bl	801824c <__ulp>
 8014e6e:	0002      	movs	r2, r0
 8014e70:	000b      	movs	r3, r1
 8014e72:	980c      	ldr	r0, [sp, #48]	; 0x30
 8014e74:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014e76:	f7ec ffdd 	bl	8001e34 <__aeabi_dmul>
 8014e7a:	0032      	movs	r2, r6
 8014e7c:	003b      	movs	r3, r7
 8014e7e:	f7ec f8b3 	bl	8000fe8 <__aeabi_dadd>
 8014e82:	4a77      	ldr	r2, [pc, #476]	; (8015060 <_strtod_l+0xc1c>)
 8014e84:	4b79      	ldr	r3, [pc, #484]	; (801506c <_strtod_l+0xc28>)
 8014e86:	0006      	movs	r6, r0
 8014e88:	400a      	ands	r2, r1
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d964      	bls.n	8014f58 <_strtod_l+0xb14>
 8014e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014e90:	4a77      	ldr	r2, [pc, #476]	; (8015070 <_strtod_l+0xc2c>)
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d103      	bne.n	8014e9e <_strtod_l+0xa5a>
 8014e96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e98:	3301      	adds	r3, #1
 8014e9a:	d100      	bne.n	8014e9e <_strtod_l+0xa5a>
 8014e9c:	e508      	b.n	80148b0 <_strtod_l+0x46c>
 8014e9e:	2601      	movs	r6, #1
 8014ea0:	4f73      	ldr	r7, [pc, #460]	; (8015070 <_strtod_l+0xc2c>)
 8014ea2:	4276      	negs	r6, r6
 8014ea4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014ea6:	9804      	ldr	r0, [sp, #16]
 8014ea8:	f002 ff56 	bl	8017d58 <_Bfree>
 8014eac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014eae:	9804      	ldr	r0, [sp, #16]
 8014eb0:	f002 ff52 	bl	8017d58 <_Bfree>
 8014eb4:	9905      	ldr	r1, [sp, #20]
 8014eb6:	9804      	ldr	r0, [sp, #16]
 8014eb8:	f002 ff4e 	bl	8017d58 <_Bfree>
 8014ebc:	0021      	movs	r1, r4
 8014ebe:	9804      	ldr	r0, [sp, #16]
 8014ec0:	f002 ff4a 	bl	8017d58 <_Bfree>
 8014ec4:	e5f4      	b.n	8014ab0 <_strtod_l+0x66c>
 8014ec6:	2e00      	cmp	r6, #0
 8014ec8:	d11e      	bne.n	8014f08 <_strtod_l+0xac4>
 8014eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ecc:	031b      	lsls	r3, r3, #12
 8014ece:	d121      	bne.n	8014f14 <_strtod_l+0xad0>
 8014ed0:	9808      	ldr	r0, [sp, #32]
 8014ed2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	4b61      	ldr	r3, [pc, #388]	; (801505c <_strtod_l+0xc18>)
 8014ed8:	f7eb fac6 	bl	8000468 <__aeabi_dcmplt>
 8014edc:	2800      	cmp	r0, #0
 8014ede:	d11f      	bne.n	8014f20 <_strtod_l+0xadc>
 8014ee0:	9808      	ldr	r0, [sp, #32]
 8014ee2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014ee4:	2200      	movs	r2, #0
 8014ee6:	4b63      	ldr	r3, [pc, #396]	; (8015074 <_strtod_l+0xc30>)
 8014ee8:	f7ec ffa4 	bl	8001e34 <__aeabi_dmul>
 8014eec:	0005      	movs	r5, r0
 8014eee:	9108      	str	r1, [sp, #32]
 8014ef0:	2280      	movs	r2, #128	; 0x80
 8014ef2:	0612      	lsls	r2, r2, #24
 8014ef4:	4694      	mov	ip, r2
 8014ef6:	9b08      	ldr	r3, [sp, #32]
 8014ef8:	951e      	str	r5, [sp, #120]	; 0x78
 8014efa:	4463      	add	r3, ip
 8014efc:	931f      	str	r3, [sp, #124]	; 0x7c
 8014efe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014f00:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014f02:	9210      	str	r2, [sp, #64]	; 0x40
 8014f04:	9311      	str	r3, [sp, #68]	; 0x44
 8014f06:	e798      	b.n	8014e3a <_strtod_l+0x9f6>
 8014f08:	2e01      	cmp	r6, #1
 8014f0a:	d103      	bne.n	8014f14 <_strtod_l+0xad0>
 8014f0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d100      	bne.n	8014f14 <_strtod_l+0xad0>
 8014f12:	e562      	b.n	80149da <_strtod_l+0x596>
 8014f14:	2200      	movs	r2, #0
 8014f16:	4b58      	ldr	r3, [pc, #352]	; (8015078 <_strtod_l+0xc34>)
 8014f18:	2500      	movs	r5, #0
 8014f1a:	9210      	str	r2, [sp, #64]	; 0x40
 8014f1c:	9311      	str	r3, [sp, #68]	; 0x44
 8014f1e:	e78a      	b.n	8014e36 <_strtod_l+0x9f2>
 8014f20:	4b54      	ldr	r3, [pc, #336]	; (8015074 <_strtod_l+0xc30>)
 8014f22:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8014f24:	9308      	str	r3, [sp, #32]
 8014f26:	e7e3      	b.n	8014ef0 <_strtod_l+0xaac>
 8014f28:	4b52      	ldr	r3, [pc, #328]	; (8015074 <_strtod_l+0xc30>)
 8014f2a:	9808      	ldr	r0, [sp, #32]
 8014f2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f2e:	2200      	movs	r2, #0
 8014f30:	f7ec ff80 	bl	8001e34 <__aeabi_dmul>
 8014f34:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f36:	0005      	movs	r5, r0
 8014f38:	9108      	str	r1, [sp, #32]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d107      	bne.n	8014f4e <_strtod_l+0xb0a>
 8014f3e:	2380      	movs	r3, #128	; 0x80
 8014f40:	061b      	lsls	r3, r3, #24
 8014f42:	18cb      	adds	r3, r1, r3
 8014f44:	9016      	str	r0, [sp, #88]	; 0x58
 8014f46:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014f4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014f4c:	e7d9      	b.n	8014f02 <_strtod_l+0xabe>
 8014f4e:	0002      	movs	r2, r0
 8014f50:	9b08      	ldr	r3, [sp, #32]
 8014f52:	9216      	str	r2, [sp, #88]	; 0x58
 8014f54:	9317      	str	r3, [sp, #92]	; 0x5c
 8014f56:	e7f7      	b.n	8014f48 <_strtod_l+0xb04>
 8014f58:	23d4      	movs	r3, #212	; 0xd4
 8014f5a:	049b      	lsls	r3, r3, #18
 8014f5c:	18cf      	adds	r7, r1, r3
 8014f5e:	9b06      	ldr	r3, [sp, #24]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d19f      	bne.n	8014ea4 <_strtod_l+0xa60>
 8014f64:	4b3e      	ldr	r3, [pc, #248]	; (8015060 <_strtod_l+0xc1c>)
 8014f66:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f68:	970c      	str	r7, [sp, #48]	; 0x30
 8014f6a:	403b      	ands	r3, r7
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d199      	bne.n	8014ea4 <_strtod_l+0xa60>
 8014f70:	9908      	ldr	r1, [sp, #32]
 8014f72:	0028      	movs	r0, r5
 8014f74:	f7ed fd34 	bl	80029e0 <__aeabi_d2iz>
 8014f78:	f7ed fd68 	bl	8002a4c <__aeabi_i2d>
 8014f7c:	000b      	movs	r3, r1
 8014f7e:	0002      	movs	r2, r0
 8014f80:	9908      	ldr	r1, [sp, #32]
 8014f82:	0028      	movs	r0, r5
 8014f84:	f7ed f9c8 	bl	8002318 <__aeabi_dsub>
 8014f88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014f8a:	9008      	str	r0, [sp, #32]
 8014f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d104      	bne.n	8014f9c <_strtod_l+0xb58>
 8014f92:	2e00      	cmp	r6, #0
 8014f94:	d102      	bne.n	8014f9c <_strtod_l+0xb58>
 8014f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f98:	031b      	lsls	r3, r3, #12
 8014f9a:	d058      	beq.n	801504e <_strtod_l+0xc0a>
 8014f9c:	9808      	ldr	r0, [sp, #32]
 8014f9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fa0:	4a36      	ldr	r2, [pc, #216]	; (801507c <_strtod_l+0xc38>)
 8014fa2:	4b37      	ldr	r3, [pc, #220]	; (8015080 <_strtod_l+0xc3c>)
 8014fa4:	f7eb fa60 	bl	8000468 <__aeabi_dcmplt>
 8014fa8:	2800      	cmp	r0, #0
 8014faa:	d000      	beq.n	8014fae <_strtod_l+0xb6a>
 8014fac:	e489      	b.n	80148c2 <_strtod_l+0x47e>
 8014fae:	9808      	ldr	r0, [sp, #32]
 8014fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fb2:	4a34      	ldr	r2, [pc, #208]	; (8015084 <_strtod_l+0xc40>)
 8014fb4:	4b2f      	ldr	r3, [pc, #188]	; (8015074 <_strtod_l+0xc30>)
 8014fb6:	f7eb fa6b 	bl	8000490 <__aeabi_dcmpgt>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	d100      	bne.n	8014fc0 <_strtod_l+0xb7c>
 8014fbe:	e771      	b.n	8014ea4 <_strtod_l+0xa60>
 8014fc0:	e47f      	b.n	80148c2 <_strtod_l+0x47e>
 8014fc2:	9b06      	ldr	r3, [sp, #24]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d02a      	beq.n	801501e <_strtod_l+0xbda>
 8014fc8:	23d4      	movs	r3, #212	; 0xd4
 8014fca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014fcc:	04db      	lsls	r3, r3, #19
 8014fce:	429a      	cmp	r2, r3
 8014fd0:	d825      	bhi.n	801501e <_strtod_l+0xbda>
 8014fd2:	4a2d      	ldr	r2, [pc, #180]	; (8015088 <_strtod_l+0xc44>)
 8014fd4:	4b2d      	ldr	r3, [pc, #180]	; (801508c <_strtod_l+0xc48>)
 8014fd6:	0028      	movs	r0, r5
 8014fd8:	9908      	ldr	r1, [sp, #32]
 8014fda:	f7eb fa4f 	bl	800047c <__aeabi_dcmple>
 8014fde:	2800      	cmp	r0, #0
 8014fe0:	d016      	beq.n	8015010 <_strtod_l+0xbcc>
 8014fe2:	0028      	movs	r0, r5
 8014fe4:	9908      	ldr	r1, [sp, #32]
 8014fe6:	f7eb fb03 	bl	80005f0 <__aeabi_d2uiz>
 8014fea:	2800      	cmp	r0, #0
 8014fec:	d100      	bne.n	8014ff0 <_strtod_l+0xbac>
 8014fee:	3001      	adds	r0, #1
 8014ff0:	f7ed fd66 	bl	8002ac0 <__aeabi_ui2d>
 8014ff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014ff6:	0005      	movs	r5, r0
 8014ff8:	9108      	str	r1, [sp, #32]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d122      	bne.n	8015044 <_strtod_l+0xc00>
 8014ffe:	2380      	movs	r3, #128	; 0x80
 8015000:	061b      	lsls	r3, r3, #24
 8015002:	18cb      	adds	r3, r1, r3
 8015004:	9018      	str	r0, [sp, #96]	; 0x60
 8015006:	9319      	str	r3, [sp, #100]	; 0x64
 8015008:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801500a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801500c:	9210      	str	r2, [sp, #64]	; 0x40
 801500e:	9311      	str	r3, [sp, #68]	; 0x44
 8015010:	22d6      	movs	r2, #214	; 0xd6
 8015012:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015014:	04d2      	lsls	r2, r2, #19
 8015016:	189b      	adds	r3, r3, r2
 8015018:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801501a:	1a9b      	subs	r3, r3, r2
 801501c:	9311      	str	r3, [sp, #68]	; 0x44
 801501e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015020:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015022:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015024:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015026:	f003 f911 	bl	801824c <__ulp>
 801502a:	0002      	movs	r2, r0
 801502c:	000b      	movs	r3, r1
 801502e:	0030      	movs	r0, r6
 8015030:	0039      	movs	r1, r7
 8015032:	f7ec feff 	bl	8001e34 <__aeabi_dmul>
 8015036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801503a:	f7eb ffd5 	bl	8000fe8 <__aeabi_dadd>
 801503e:	0006      	movs	r6, r0
 8015040:	000f      	movs	r7, r1
 8015042:	e78c      	b.n	8014f5e <_strtod_l+0xb1a>
 8015044:	0002      	movs	r2, r0
 8015046:	9b08      	ldr	r3, [sp, #32]
 8015048:	9218      	str	r2, [sp, #96]	; 0x60
 801504a:	9319      	str	r3, [sp, #100]	; 0x64
 801504c:	e7dc      	b.n	8015008 <_strtod_l+0xbc4>
 801504e:	4a0b      	ldr	r2, [pc, #44]	; (801507c <_strtod_l+0xc38>)
 8015050:	4b0f      	ldr	r3, [pc, #60]	; (8015090 <_strtod_l+0xc4c>)
 8015052:	9808      	ldr	r0, [sp, #32]
 8015054:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015056:	f7eb fa07 	bl	8000468 <__aeabi_dcmplt>
 801505a:	e7ae      	b.n	8014fba <_strtod_l+0xb76>
 801505c:	3ff00000 	.word	0x3ff00000
 8015060:	7ff00000 	.word	0x7ff00000
 8015064:	7fe00000 	.word	0x7fe00000
 8015068:	fcb00000 	.word	0xfcb00000
 801506c:	7c9fffff 	.word	0x7c9fffff
 8015070:	7fefffff 	.word	0x7fefffff
 8015074:	3fe00000 	.word	0x3fe00000
 8015078:	bff00000 	.word	0xbff00000
 801507c:	94a03595 	.word	0x94a03595
 8015080:	3fdfffff 	.word	0x3fdfffff
 8015084:	35afe535 	.word	0x35afe535
 8015088:	ffc00000 	.word	0xffc00000
 801508c:	41dfffff 	.word	0x41dfffff
 8015090:	3fcfffff 	.word	0x3fcfffff

08015094 <strtod>:
 8015094:	4b06      	ldr	r3, [pc, #24]	; (80150b0 <strtod+0x1c>)
 8015096:	b510      	push	{r4, lr}
 8015098:	0004      	movs	r4, r0
 801509a:	6818      	ldr	r0, [r3, #0]
 801509c:	000a      	movs	r2, r1
 801509e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d100      	bne.n	80150a6 <strtod+0x12>
 80150a4:	4b03      	ldr	r3, [pc, #12]	; (80150b4 <strtod+0x20>)
 80150a6:	0021      	movs	r1, r4
 80150a8:	f7ff f9cc 	bl	8014444 <_strtod_l>
 80150ac:	bd10      	pop	{r4, pc}
 80150ae:	46c0      	nop			; (mov r8, r8)
 80150b0:	2000011c 	.word	0x2000011c
 80150b4:	20000548 	.word	0x20000548

080150b8 <strtok>:
 80150b8:	4b03      	ldr	r3, [pc, #12]	; (80150c8 <strtok+0x10>)
 80150ba:	b510      	push	{r4, lr}
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	2301      	movs	r3, #1
 80150c0:	325c      	adds	r2, #92	; 0x5c
 80150c2:	f000 f803 	bl	80150cc <__strtok_r>
 80150c6:	bd10      	pop	{r4, pc}
 80150c8:	2000011c 	.word	0x2000011c

080150cc <__strtok_r>:
 80150cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150ce:	2800      	cmp	r0, #0
 80150d0:	d104      	bne.n	80150dc <__strtok_r+0x10>
 80150d2:	6810      	ldr	r0, [r2, #0]
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d101      	bne.n	80150dc <__strtok_r+0x10>
 80150d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150da:	0020      	movs	r0, r4
 80150dc:	000e      	movs	r6, r1
 80150de:	7805      	ldrb	r5, [r0, #0]
 80150e0:	1c44      	adds	r4, r0, #1
 80150e2:	7837      	ldrb	r7, [r6, #0]
 80150e4:	2f00      	cmp	r7, #0
 80150e6:	d104      	bne.n	80150f2 <__strtok_r+0x26>
 80150e8:	2d00      	cmp	r5, #0
 80150ea:	d110      	bne.n	801510e <__strtok_r+0x42>
 80150ec:	6015      	str	r5, [r2, #0]
 80150ee:	0028      	movs	r0, r5
 80150f0:	e7f2      	b.n	80150d8 <__strtok_r+0xc>
 80150f2:	3601      	adds	r6, #1
 80150f4:	42bd      	cmp	r5, r7
 80150f6:	d1f4      	bne.n	80150e2 <__strtok_r+0x16>
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d1ee      	bne.n	80150da <__strtok_r+0xe>
 80150fc:	6014      	str	r4, [r2, #0]
 80150fe:	7003      	strb	r3, [r0, #0]
 8015100:	e7ea      	b.n	80150d8 <__strtok_r+0xc>
 8015102:	0033      	movs	r3, r6
 8015104:	e00d      	b.n	8015122 <__strtok_r+0x56>
 8015106:	3501      	adds	r5, #1
 8015108:	2f00      	cmp	r7, #0
 801510a:	d103      	bne.n	8015114 <__strtok_r+0x48>
 801510c:	001c      	movs	r4, r3
 801510e:	000d      	movs	r5, r1
 8015110:	7826      	ldrb	r6, [r4, #0]
 8015112:	1c63      	adds	r3, r4, #1
 8015114:	782f      	ldrb	r7, [r5, #0]
 8015116:	42be      	cmp	r6, r7
 8015118:	d1f5      	bne.n	8015106 <__strtok_r+0x3a>
 801511a:	2e00      	cmp	r6, #0
 801511c:	d0f1      	beq.n	8015102 <__strtok_r+0x36>
 801511e:	2100      	movs	r1, #0
 8015120:	7021      	strb	r1, [r4, #0]
 8015122:	6013      	str	r3, [r2, #0]
 8015124:	e7d8      	b.n	80150d8 <__strtok_r+0xc>
	...

08015128 <_strtol_l.isra.0>:
 8015128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801512a:	001f      	movs	r7, r3
 801512c:	000e      	movs	r6, r1
 801512e:	b087      	sub	sp, #28
 8015130:	9005      	str	r0, [sp, #20]
 8015132:	9101      	str	r1, [sp, #4]
 8015134:	9202      	str	r2, [sp, #8]
 8015136:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015138:	7834      	ldrb	r4, [r6, #0]
 801513a:	f7fe fc6d 	bl	8013a18 <__locale_ctype_ptr_l>
 801513e:	2208      	movs	r2, #8
 8015140:	1900      	adds	r0, r0, r4
 8015142:	7843      	ldrb	r3, [r0, #1]
 8015144:	1c75      	adds	r5, r6, #1
 8015146:	4013      	ands	r3, r2
 8015148:	d136      	bne.n	80151b8 <_strtol_l.isra.0+0x90>
 801514a:	2c2d      	cmp	r4, #45	; 0x2d
 801514c:	d136      	bne.n	80151bc <_strtol_l.isra.0+0x94>
 801514e:	1cb5      	adds	r5, r6, #2
 8015150:	7874      	ldrb	r4, [r6, #1]
 8015152:	2601      	movs	r6, #1
 8015154:	2f00      	cmp	r7, #0
 8015156:	d062      	beq.n	801521e <_strtol_l.isra.0+0xf6>
 8015158:	2f10      	cmp	r7, #16
 801515a:	d109      	bne.n	8015170 <_strtol_l.isra.0+0x48>
 801515c:	2c30      	cmp	r4, #48	; 0x30
 801515e:	d107      	bne.n	8015170 <_strtol_l.isra.0+0x48>
 8015160:	2220      	movs	r2, #32
 8015162:	782b      	ldrb	r3, [r5, #0]
 8015164:	4393      	bics	r3, r2
 8015166:	2b58      	cmp	r3, #88	; 0x58
 8015168:	d154      	bne.n	8015214 <_strtol_l.isra.0+0xec>
 801516a:	2710      	movs	r7, #16
 801516c:	786c      	ldrb	r4, [r5, #1]
 801516e:	3502      	adds	r5, #2
 8015170:	4b2d      	ldr	r3, [pc, #180]	; (8015228 <_strtol_l.isra.0+0x100>)
 8015172:	0039      	movs	r1, r7
 8015174:	18f3      	adds	r3, r6, r3
 8015176:	0018      	movs	r0, r3
 8015178:	9303      	str	r3, [sp, #12]
 801517a:	f7eb f86f 	bl	800025c <__aeabi_uidivmod>
 801517e:	9104      	str	r1, [sp, #16]
 8015180:	2101      	movs	r1, #1
 8015182:	2300      	movs	r3, #0
 8015184:	4249      	negs	r1, r1
 8015186:	0002      	movs	r2, r0
 8015188:	468c      	mov	ip, r1
 801518a:	0018      	movs	r0, r3
 801518c:	0021      	movs	r1, r4
 801518e:	3930      	subs	r1, #48	; 0x30
 8015190:	2909      	cmp	r1, #9
 8015192:	d81a      	bhi.n	80151ca <_strtol_l.isra.0+0xa2>
 8015194:	000c      	movs	r4, r1
 8015196:	42a7      	cmp	r7, r4
 8015198:	dd23      	ble.n	80151e2 <_strtol_l.isra.0+0xba>
 801519a:	1c59      	adds	r1, r3, #1
 801519c:	d009      	beq.n	80151b2 <_strtol_l.isra.0+0x8a>
 801519e:	4663      	mov	r3, ip
 80151a0:	4282      	cmp	r2, r0
 80151a2:	d306      	bcc.n	80151b2 <_strtol_l.isra.0+0x8a>
 80151a4:	d102      	bne.n	80151ac <_strtol_l.isra.0+0x84>
 80151a6:	9904      	ldr	r1, [sp, #16]
 80151a8:	42a1      	cmp	r1, r4
 80151aa:	db02      	blt.n	80151b2 <_strtol_l.isra.0+0x8a>
 80151ac:	2301      	movs	r3, #1
 80151ae:	4378      	muls	r0, r7
 80151b0:	1820      	adds	r0, r4, r0
 80151b2:	782c      	ldrb	r4, [r5, #0]
 80151b4:	3501      	adds	r5, #1
 80151b6:	e7e9      	b.n	801518c <_strtol_l.isra.0+0x64>
 80151b8:	002e      	movs	r6, r5
 80151ba:	e7bc      	b.n	8015136 <_strtol_l.isra.0+0xe>
 80151bc:	2c2b      	cmp	r4, #43	; 0x2b
 80151be:	d001      	beq.n	80151c4 <_strtol_l.isra.0+0x9c>
 80151c0:	001e      	movs	r6, r3
 80151c2:	e7c7      	b.n	8015154 <_strtol_l.isra.0+0x2c>
 80151c4:	1cb5      	adds	r5, r6, #2
 80151c6:	7874      	ldrb	r4, [r6, #1]
 80151c8:	e7fa      	b.n	80151c0 <_strtol_l.isra.0+0x98>
 80151ca:	0021      	movs	r1, r4
 80151cc:	3941      	subs	r1, #65	; 0x41
 80151ce:	2919      	cmp	r1, #25
 80151d0:	d801      	bhi.n	80151d6 <_strtol_l.isra.0+0xae>
 80151d2:	3c37      	subs	r4, #55	; 0x37
 80151d4:	e7df      	b.n	8015196 <_strtol_l.isra.0+0x6e>
 80151d6:	0021      	movs	r1, r4
 80151d8:	3961      	subs	r1, #97	; 0x61
 80151da:	2919      	cmp	r1, #25
 80151dc:	d801      	bhi.n	80151e2 <_strtol_l.isra.0+0xba>
 80151de:	3c57      	subs	r4, #87	; 0x57
 80151e0:	e7d9      	b.n	8015196 <_strtol_l.isra.0+0x6e>
 80151e2:	1c5a      	adds	r2, r3, #1
 80151e4:	d108      	bne.n	80151f8 <_strtol_l.isra.0+0xd0>
 80151e6:	9a05      	ldr	r2, [sp, #20]
 80151e8:	3323      	adds	r3, #35	; 0x23
 80151ea:	6013      	str	r3, [r2, #0]
 80151ec:	9b02      	ldr	r3, [sp, #8]
 80151ee:	9803      	ldr	r0, [sp, #12]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d109      	bne.n	8015208 <_strtol_l.isra.0+0xe0>
 80151f4:	b007      	add	sp, #28
 80151f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80151f8:	2e00      	cmp	r6, #0
 80151fa:	d000      	beq.n	80151fe <_strtol_l.isra.0+0xd6>
 80151fc:	4240      	negs	r0, r0
 80151fe:	9a02      	ldr	r2, [sp, #8]
 8015200:	2a00      	cmp	r2, #0
 8015202:	d0f7      	beq.n	80151f4 <_strtol_l.isra.0+0xcc>
 8015204:	2b00      	cmp	r3, #0
 8015206:	d001      	beq.n	801520c <_strtol_l.isra.0+0xe4>
 8015208:	1e6b      	subs	r3, r5, #1
 801520a:	9301      	str	r3, [sp, #4]
 801520c:	9b02      	ldr	r3, [sp, #8]
 801520e:	9a01      	ldr	r2, [sp, #4]
 8015210:	601a      	str	r2, [r3, #0]
 8015212:	e7ef      	b.n	80151f4 <_strtol_l.isra.0+0xcc>
 8015214:	2430      	movs	r4, #48	; 0x30
 8015216:	2f00      	cmp	r7, #0
 8015218:	d1aa      	bne.n	8015170 <_strtol_l.isra.0+0x48>
 801521a:	2708      	movs	r7, #8
 801521c:	e7a8      	b.n	8015170 <_strtol_l.isra.0+0x48>
 801521e:	2c30      	cmp	r4, #48	; 0x30
 8015220:	d09e      	beq.n	8015160 <_strtol_l.isra.0+0x38>
 8015222:	270a      	movs	r7, #10
 8015224:	e7a4      	b.n	8015170 <_strtol_l.isra.0+0x48>
 8015226:	46c0      	nop			; (mov r8, r8)
 8015228:	7fffffff 	.word	0x7fffffff

0801522c <strtol>:
 801522c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801522e:	0013      	movs	r3, r2
 8015230:	4a06      	ldr	r2, [pc, #24]	; (801524c <strtol+0x20>)
 8015232:	0005      	movs	r5, r0
 8015234:	6810      	ldr	r0, [r2, #0]
 8015236:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015238:	2c00      	cmp	r4, #0
 801523a:	d100      	bne.n	801523e <strtol+0x12>
 801523c:	4c04      	ldr	r4, [pc, #16]	; (8015250 <strtol+0x24>)
 801523e:	000a      	movs	r2, r1
 8015240:	9400      	str	r4, [sp, #0]
 8015242:	0029      	movs	r1, r5
 8015244:	f7ff ff70 	bl	8015128 <_strtol_l.isra.0>
 8015248:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 801524a:	46c0      	nop			; (mov r8, r8)
 801524c:	2000011c 	.word	0x2000011c
 8015250:	20000548 	.word	0x20000548

08015254 <_svfprintf_r>:
 8015254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015256:	b0d9      	sub	sp, #356	; 0x164
 8015258:	910b      	str	r1, [sp, #44]	; 0x2c
 801525a:	9209      	str	r2, [sp, #36]	; 0x24
 801525c:	001c      	movs	r4, r3
 801525e:	900a      	str	r0, [sp, #40]	; 0x28
 8015260:	f002 fd26 	bl	8017cb0 <_localeconv_r>
 8015264:	6803      	ldr	r3, [r0, #0]
 8015266:	0018      	movs	r0, r3
 8015268:	931c      	str	r3, [sp, #112]	; 0x70
 801526a:	f7ea ff55 	bl	8000118 <strlen>
 801526e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015270:	9014      	str	r0, [sp, #80]	; 0x50
 8015272:	899b      	ldrh	r3, [r3, #12]
 8015274:	061b      	lsls	r3, r3, #24
 8015276:	d518      	bpl.n	80152aa <_svfprintf_r+0x56>
 8015278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801527a:	691b      	ldr	r3, [r3, #16]
 801527c:	9308      	str	r3, [sp, #32]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d113      	bne.n	80152aa <_svfprintf_r+0x56>
 8015282:	2140      	movs	r1, #64	; 0x40
 8015284:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015286:	f7fe fbed 	bl	8013a64 <_malloc_r>
 801528a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801528c:	6018      	str	r0, [r3, #0]
 801528e:	6118      	str	r0, [r3, #16]
 8015290:	2800      	cmp	r0, #0
 8015292:	d107      	bne.n	80152a4 <_svfprintf_r+0x50>
 8015294:	230c      	movs	r3, #12
 8015296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015298:	6013      	str	r3, [r2, #0]
 801529a:	3b0d      	subs	r3, #13
 801529c:	9315      	str	r3, [sp, #84]	; 0x54
 801529e:	9815      	ldr	r0, [sp, #84]	; 0x54
 80152a0:	b059      	add	sp, #356	; 0x164
 80152a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80152a4:	2340      	movs	r3, #64	; 0x40
 80152a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80152a8:	6153      	str	r3, [r2, #20]
 80152aa:	2600      	movs	r6, #0
 80152ac:	af2f      	add	r7, sp, #188	; 0xbc
 80152ae:	972c      	str	r7, [sp, #176]	; 0xb0
 80152b0:	962e      	str	r6, [sp, #184]	; 0xb8
 80152b2:	962d      	str	r6, [sp, #180]	; 0xb4
 80152b4:	960d      	str	r6, [sp, #52]	; 0x34
 80152b6:	961a      	str	r6, [sp, #104]	; 0x68
 80152b8:	9619      	str	r6, [sp, #100]	; 0x64
 80152ba:	961e      	str	r6, [sp, #120]	; 0x78
 80152bc:	961d      	str	r6, [sp, #116]	; 0x74
 80152be:	9613      	str	r6, [sp, #76]	; 0x4c
 80152c0:	961b      	str	r6, [sp, #108]	; 0x6c
 80152c2:	961f      	str	r6, [sp, #124]	; 0x7c
 80152c4:	9615      	str	r6, [sp, #84]	; 0x54
 80152c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80152c8:	782b      	ldrb	r3, [r5, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d002      	beq.n	80152d4 <_svfprintf_r+0x80>
 80152ce:	2b25      	cmp	r3, #37	; 0x25
 80152d0:	d000      	beq.n	80152d4 <_svfprintf_r+0x80>
 80152d2:	e095      	b.n	8015400 <_svfprintf_r+0x1ac>
 80152d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152d6:	1aee      	subs	r6, r5, r3
 80152d8:	d017      	beq.n	801530a <_svfprintf_r+0xb6>
 80152da:	603b      	str	r3, [r7, #0]
 80152dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80152de:	607e      	str	r6, [r7, #4]
 80152e0:	199b      	adds	r3, r3, r6
 80152e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80152e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80152e6:	3708      	adds	r7, #8
 80152e8:	9308      	str	r3, [sp, #32]
 80152ea:	3301      	adds	r3, #1
 80152ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80152ee:	2b07      	cmp	r3, #7
 80152f0:	dd08      	ble.n	8015304 <_svfprintf_r+0xb0>
 80152f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80152f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80152f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80152f8:	f003 f900 	bl	80184fc <__ssprint_r>
 80152fc:	2800      	cmp	r0, #0
 80152fe:	d000      	beq.n	8015302 <_svfprintf_r+0xae>
 8015300:	e2d9      	b.n	80158b6 <_svfprintf_r+0x662>
 8015302:	af2f      	add	r7, sp, #188	; 0xbc
 8015304:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015306:	199b      	adds	r3, r3, r6
 8015308:	9315      	str	r3, [sp, #84]	; 0x54
 801530a:	782b      	ldrb	r3, [r5, #0]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d101      	bne.n	8015314 <_svfprintf_r+0xc0>
 8015310:	f001 f9e5 	bl	80166de <_svfprintf_r+0x148a>
 8015314:	1c6b      	adds	r3, r5, #1
 8015316:	221b      	movs	r2, #27
 8015318:	9311      	str	r3, [sp, #68]	; 0x44
 801531a:	2300      	movs	r3, #0
 801531c:	a91e      	add	r1, sp, #120	; 0x78
 801531e:	1852      	adds	r2, r2, r1
 8015320:	7013      	strb	r3, [r2, #0]
 8015322:	2201      	movs	r2, #1
 8015324:	001e      	movs	r6, r3
 8015326:	2520      	movs	r5, #32
 8015328:	4252      	negs	r2, r2
 801532a:	9208      	str	r2, [sp, #32]
 801532c:	9316      	str	r3, [sp, #88]	; 0x58
 801532e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	930e      	str	r3, [sp, #56]	; 0x38
 8015334:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015336:	3301      	adds	r3, #1
 8015338:	9311      	str	r3, [sp, #68]	; 0x44
 801533a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801533c:	3820      	subs	r0, #32
 801533e:	285a      	cmp	r0, #90	; 0x5a
 8015340:	d901      	bls.n	8015346 <_svfprintf_r+0xf2>
 8015342:	f000 fe3d 	bl	8015fc0 <_svfprintf_r+0xd6c>
 8015346:	f7ea fef9 	bl	800013c <__gnu_thumb1_case_shi>
 801534a:	009e      	.short	0x009e
 801534c:	063b063b 	.word	0x063b063b
 8015350:	063b00a7 	.word	0x063b00a7
 8015354:	063b063b 	.word	0x063b063b
 8015358:	063b0080 	.word	0x063b0080
 801535c:	00a9063b 	.word	0x00a9063b
 8015360:	063b00b3 	.word	0x063b00b3
 8015364:	00b900b1 	.word	0x00b900b1
 8015368:	00dd063b 	.word	0x00dd063b
 801536c:	00df00df 	.word	0x00df00df
 8015370:	00df00df 	.word	0x00df00df
 8015374:	00df00df 	.word	0x00df00df
 8015378:	00df00df 	.word	0x00df00df
 801537c:	063b00df 	.word	0x063b00df
 8015380:	063b063b 	.word	0x063b063b
 8015384:	063b063b 	.word	0x063b063b
 8015388:	063b063b 	.word	0x063b063b
 801538c:	063b0240 	.word	0x063b0240
 8015390:	01fd010a 	.word	0x01fd010a
 8015394:	02400240 	.word	0x02400240
 8015398:	063b0240 	.word	0x063b0240
 801539c:	063b063b 	.word	0x063b063b
 80153a0:	00f1063b 	.word	0x00f1063b
 80153a4:	063b063b 	.word	0x063b063b
 80153a8:	063b04e2 	.word	0x063b04e2
 80153ac:	063b063b 	.word	0x063b063b
 80153b0:	063b0537 	.word	0x063b0537
 80153b4:	063b0557 	.word	0x063b0557
 80153b8:	005d063b 	.word	0x005d063b
 80153bc:	063b063b 	.word	0x063b063b
 80153c0:	063b063b 	.word	0x063b063b
 80153c4:	063b063b 	.word	0x063b063b
 80153c8:	063b063b 	.word	0x063b063b
 80153cc:	063b0240 	.word	0x063b0240
 80153d0:	01ff010a 	.word	0x01ff010a
 80153d4:	02400240 	.word	0x02400240
 80153d8:	00f30240 	.word	0x00f30240
 80153dc:	010601ff 	.word	0x010601ff
 80153e0:	00ff063b 	.word	0x00ff063b
 80153e4:	04c5063b 	.word	0x04c5063b
 80153e8:	052704e4 	.word	0x052704e4
 80153ec:	063b0106 	.word	0x063b0106
 80153f0:	fff20537 	.word	0xfff20537
 80153f4:	063b0559 	.word	0x063b0559
 80153f8:	0582063b 	.word	0x0582063b
 80153fc:	fff2063b 	.word	0xfff2063b
 8015400:	3501      	adds	r5, #1
 8015402:	e761      	b.n	80152c8 <_svfprintf_r+0x74>
 8015404:	4bcb      	ldr	r3, [pc, #812]	; (8015734 <_svfprintf_r+0x4e0>)
 8015406:	2220      	movs	r2, #32
 8015408:	931e      	str	r3, [sp, #120]	; 0x78
 801540a:	4032      	ands	r2, r6
 801540c:	d101      	bne.n	8015412 <_svfprintf_r+0x1be>
 801540e:	f000 fd21 	bl	8015e54 <_svfprintf_r+0xc00>
 8015412:	2307      	movs	r3, #7
 8015414:	3407      	adds	r4, #7
 8015416:	439c      	bics	r4, r3
 8015418:	0023      	movs	r3, r4
 801541a:	3308      	adds	r3, #8
 801541c:	9312      	str	r3, [sp, #72]	; 0x48
 801541e:	6823      	ldr	r3, [r4, #0]
 8015420:	6864      	ldr	r4, [r4, #4]
 8015422:	9306      	str	r3, [sp, #24]
 8015424:	9407      	str	r4, [sp, #28]
 8015426:	07f3      	lsls	r3, r6, #31
 8015428:	d50a      	bpl.n	8015440 <_svfprintf_r+0x1ec>
 801542a:	9b06      	ldr	r3, [sp, #24]
 801542c:	9a07      	ldr	r2, [sp, #28]
 801542e:	4313      	orrs	r3, r2
 8015430:	d006      	beq.n	8015440 <_svfprintf_r+0x1ec>
 8015432:	2230      	movs	r2, #48	; 0x30
 8015434:	ab25      	add	r3, sp, #148	; 0x94
 8015436:	701a      	strb	r2, [r3, #0]
 8015438:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801543a:	705a      	strb	r2, [r3, #1]
 801543c:	2302      	movs	r3, #2
 801543e:	431e      	orrs	r6, r3
 8015440:	4bbd      	ldr	r3, [pc, #756]	; (8015738 <_svfprintf_r+0x4e4>)
 8015442:	401e      	ands	r6, r3
 8015444:	2302      	movs	r3, #2
 8015446:	f000 fc74 	bl	8015d32 <_svfprintf_r+0xade>
 801544a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801544c:	f002 fc30 	bl	8017cb0 <_localeconv_r>
 8015450:	6843      	ldr	r3, [r0, #4]
 8015452:	0018      	movs	r0, r3
 8015454:	931f      	str	r3, [sp, #124]	; 0x7c
 8015456:	f7ea fe5f 	bl	8000118 <strlen>
 801545a:	901b      	str	r0, [sp, #108]	; 0x6c
 801545c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801545e:	f002 fc27 	bl	8017cb0 <_localeconv_r>
 8015462:	6883      	ldr	r3, [r0, #8]
 8015464:	9313      	str	r3, [sp, #76]	; 0x4c
 8015466:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015468:	2b00      	cmp	r3, #0
 801546a:	d100      	bne.n	801546e <_svfprintf_r+0x21a>
 801546c:	e75f      	b.n	801532e <_svfprintf_r+0xda>
 801546e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015470:	2b00      	cmp	r3, #0
 8015472:	d100      	bne.n	8015476 <_svfprintf_r+0x222>
 8015474:	e75b      	b.n	801532e <_svfprintf_r+0xda>
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d100      	bne.n	801547e <_svfprintf_r+0x22a>
 801547c:	e757      	b.n	801532e <_svfprintf_r+0xda>
 801547e:	2380      	movs	r3, #128	; 0x80
 8015480:	00db      	lsls	r3, r3, #3
 8015482:	431e      	orrs	r6, r3
 8015484:	e753      	b.n	801532e <_svfprintf_r+0xda>
 8015486:	231b      	movs	r3, #27
 8015488:	aa1e      	add	r2, sp, #120	; 0x78
 801548a:	189b      	adds	r3, r3, r2
 801548c:	781a      	ldrb	r2, [r3, #0]
 801548e:	2a00      	cmp	r2, #0
 8015490:	d000      	beq.n	8015494 <_svfprintf_r+0x240>
 8015492:	e74c      	b.n	801532e <_svfprintf_r+0xda>
 8015494:	701d      	strb	r5, [r3, #0]
 8015496:	e74a      	b.n	801532e <_svfprintf_r+0xda>
 8015498:	2301      	movs	r3, #1
 801549a:	e7f2      	b.n	8015482 <_svfprintf_r+0x22e>
 801549c:	6823      	ldr	r3, [r4, #0]
 801549e:	3404      	adds	r4, #4
 80154a0:	9316      	str	r3, [sp, #88]	; 0x58
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	db00      	blt.n	80154a8 <_svfprintf_r+0x254>
 80154a6:	e742      	b.n	801532e <_svfprintf_r+0xda>
 80154a8:	425b      	negs	r3, r3
 80154aa:	9316      	str	r3, [sp, #88]	; 0x58
 80154ac:	2304      	movs	r3, #4
 80154ae:	e7e8      	b.n	8015482 <_svfprintf_r+0x22e>
 80154b0:	231b      	movs	r3, #27
 80154b2:	aa1e      	add	r2, sp, #120	; 0x78
 80154b4:	189b      	adds	r3, r3, r2
 80154b6:	222b      	movs	r2, #43	; 0x2b
 80154b8:	701a      	strb	r2, [r3, #0]
 80154ba:	e738      	b.n	801532e <_svfprintf_r+0xda>
 80154bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80154be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154c0:	7812      	ldrb	r2, [r2, #0]
 80154c2:	3301      	adds	r3, #1
 80154c4:	920e      	str	r2, [sp, #56]	; 0x38
 80154c6:	2a2a      	cmp	r2, #42	; 0x2a
 80154c8:	d008      	beq.n	80154dc <_svfprintf_r+0x288>
 80154ca:	2200      	movs	r2, #0
 80154cc:	9208      	str	r2, [sp, #32]
 80154ce:	990e      	ldr	r1, [sp, #56]	; 0x38
 80154d0:	001a      	movs	r2, r3
 80154d2:	3930      	subs	r1, #48	; 0x30
 80154d4:	2909      	cmp	r1, #9
 80154d6:	d90c      	bls.n	80154f2 <_svfprintf_r+0x29e>
 80154d8:	9211      	str	r2, [sp, #68]	; 0x44
 80154da:	e72e      	b.n	801533a <_svfprintf_r+0xe6>
 80154dc:	6821      	ldr	r1, [r4, #0]
 80154de:	1d22      	adds	r2, r4, #4
 80154e0:	9108      	str	r1, [sp, #32]
 80154e2:	2900      	cmp	r1, #0
 80154e4:	da02      	bge.n	80154ec <_svfprintf_r+0x298>
 80154e6:	2101      	movs	r1, #1
 80154e8:	4249      	negs	r1, r1
 80154ea:	9108      	str	r1, [sp, #32]
 80154ec:	0014      	movs	r4, r2
 80154ee:	9311      	str	r3, [sp, #68]	; 0x44
 80154f0:	e71d      	b.n	801532e <_svfprintf_r+0xda>
 80154f2:	200a      	movs	r0, #10
 80154f4:	9a08      	ldr	r2, [sp, #32]
 80154f6:	4342      	muls	r2, r0
 80154f8:	1852      	adds	r2, r2, r1
 80154fa:	9208      	str	r2, [sp, #32]
 80154fc:	781a      	ldrb	r2, [r3, #0]
 80154fe:	3301      	adds	r3, #1
 8015500:	920e      	str	r2, [sp, #56]	; 0x38
 8015502:	e7e4      	b.n	80154ce <_svfprintf_r+0x27a>
 8015504:	2380      	movs	r3, #128	; 0x80
 8015506:	e7bc      	b.n	8015482 <_svfprintf_r+0x22e>
 8015508:	2300      	movs	r3, #0
 801550a:	9316      	str	r3, [sp, #88]	; 0x58
 801550c:	220a      	movs	r2, #10
 801550e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015510:	4353      	muls	r3, r2
 8015512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015514:	3a30      	subs	r2, #48	; 0x30
 8015516:	18d3      	adds	r3, r2, r3
 8015518:	9316      	str	r3, [sp, #88]	; 0x58
 801551a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801551c:	1c5a      	adds	r2, r3, #1
 801551e:	781b      	ldrb	r3, [r3, #0]
 8015520:	9211      	str	r2, [sp, #68]	; 0x44
 8015522:	930e      	str	r3, [sp, #56]	; 0x38
 8015524:	3b30      	subs	r3, #48	; 0x30
 8015526:	2b09      	cmp	r3, #9
 8015528:	d9f0      	bls.n	801550c <_svfprintf_r+0x2b8>
 801552a:	e7d5      	b.n	80154d8 <_svfprintf_r+0x284>
 801552c:	2308      	movs	r3, #8
 801552e:	e7a8      	b.n	8015482 <_svfprintf_r+0x22e>
 8015530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	2b68      	cmp	r3, #104	; 0x68
 8015536:	d105      	bne.n	8015544 <_svfprintf_r+0x2f0>
 8015538:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801553a:	3301      	adds	r3, #1
 801553c:	9311      	str	r3, [sp, #68]	; 0x44
 801553e:	2380      	movs	r3, #128	; 0x80
 8015540:	009b      	lsls	r3, r3, #2
 8015542:	e79e      	b.n	8015482 <_svfprintf_r+0x22e>
 8015544:	2340      	movs	r3, #64	; 0x40
 8015546:	e79c      	b.n	8015482 <_svfprintf_r+0x22e>
 8015548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	2b6c      	cmp	r3, #108	; 0x6c
 801554e:	d104      	bne.n	801555a <_svfprintf_r+0x306>
 8015550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015552:	3301      	adds	r3, #1
 8015554:	9311      	str	r3, [sp, #68]	; 0x44
 8015556:	432e      	orrs	r6, r5
 8015558:	e6e9      	b.n	801532e <_svfprintf_r+0xda>
 801555a:	2310      	movs	r3, #16
 801555c:	e791      	b.n	8015482 <_svfprintf_r+0x22e>
 801555e:	1d23      	adds	r3, r4, #4
 8015560:	6822      	ldr	r2, [r4, #0]
 8015562:	9312      	str	r3, [sp, #72]	; 0x48
 8015564:	ab3f      	add	r3, sp, #252	; 0xfc
 8015566:	701a      	strb	r2, [r3, #0]
 8015568:	221b      	movs	r2, #27
 801556a:	2000      	movs	r0, #0
 801556c:	a91e      	add	r1, sp, #120	; 0x78
 801556e:	1852      	adds	r2, r2, r1
 8015570:	7010      	strb	r0, [r2, #0]
 8015572:	2201      	movs	r2, #1
 8015574:	0005      	movs	r5, r0
 8015576:	900c      	str	r0, [sp, #48]	; 0x30
 8015578:	9208      	str	r2, [sp, #32]
 801557a:	9017      	str	r0, [sp, #92]	; 0x5c
 801557c:	9010      	str	r0, [sp, #64]	; 0x40
 801557e:	900f      	str	r0, [sp, #60]	; 0x3c
 8015580:	9309      	str	r3, [sp, #36]	; 0x24
 8015582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015584:	9a08      	ldr	r2, [sp, #32]
 8015586:	9318      	str	r3, [sp, #96]	; 0x60
 8015588:	4293      	cmp	r3, r2
 801558a:	da00      	bge.n	801558e <_svfprintf_r+0x33a>
 801558c:	9218      	str	r2, [sp, #96]	; 0x60
 801558e:	231b      	movs	r3, #27
 8015590:	aa1e      	add	r2, sp, #120	; 0x78
 8015592:	189b      	adds	r3, r3, r2
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	1e5a      	subs	r2, r3, #1
 8015598:	4193      	sbcs	r3, r2
 801559a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801559c:	18d3      	adds	r3, r2, r3
 801559e:	9318      	str	r3, [sp, #96]	; 0x60
 80155a0:	2302      	movs	r3, #2
 80155a2:	4033      	ands	r3, r6
 80155a4:	9320      	str	r3, [sp, #128]	; 0x80
 80155a6:	d002      	beq.n	80155ae <_svfprintf_r+0x35a>
 80155a8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80155aa:	3302      	adds	r3, #2
 80155ac:	9318      	str	r3, [sp, #96]	; 0x60
 80155ae:	2384      	movs	r3, #132	; 0x84
 80155b0:	4033      	ands	r3, r6
 80155b2:	9321      	str	r3, [sp, #132]	; 0x84
 80155b4:	d121      	bne.n	80155fa <_svfprintf_r+0x3a6>
 80155b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80155b8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80155ba:	1a9c      	subs	r4, r3, r2
 80155bc:	2c00      	cmp	r4, #0
 80155be:	dd1c      	ble.n	80155fa <_svfprintf_r+0x3a6>
 80155c0:	0039      	movs	r1, r7
 80155c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80155c4:	485d      	ldr	r0, [pc, #372]	; (801573c <_svfprintf_r+0x4e8>)
 80155c6:	9322      	str	r3, [sp, #136]	; 0x88
 80155c8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80155ca:	3301      	adds	r3, #1
 80155cc:	3108      	adds	r1, #8
 80155ce:	6038      	str	r0, [r7, #0]
 80155d0:	2c10      	cmp	r4, #16
 80155d2:	dd01      	ble.n	80155d8 <_svfprintf_r+0x384>
 80155d4:	f000 fd08 	bl	8015fe8 <_svfprintf_r+0xd94>
 80155d8:	607c      	str	r4, [r7, #4]
 80155da:	18a4      	adds	r4, r4, r2
 80155dc:	942e      	str	r4, [sp, #184]	; 0xb8
 80155de:	932d      	str	r3, [sp, #180]	; 0xb4
 80155e0:	000f      	movs	r7, r1
 80155e2:	2b07      	cmp	r3, #7
 80155e4:	dd09      	ble.n	80155fa <_svfprintf_r+0x3a6>
 80155e6:	aa2c      	add	r2, sp, #176	; 0xb0
 80155e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80155ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155ec:	f002 ff86 	bl	80184fc <__ssprint_r>
 80155f0:	2800      	cmp	r0, #0
 80155f2:	d001      	beq.n	80155f8 <_svfprintf_r+0x3a4>
 80155f4:	f001 f852 	bl	801669c <_svfprintf_r+0x1448>
 80155f8:	af2f      	add	r7, sp, #188	; 0xbc
 80155fa:	231b      	movs	r3, #27
 80155fc:	aa1e      	add	r2, sp, #120	; 0x78
 80155fe:	189b      	adds	r3, r3, r2
 8015600:	781a      	ldrb	r2, [r3, #0]
 8015602:	2a00      	cmp	r2, #0
 8015604:	d017      	beq.n	8015636 <_svfprintf_r+0x3e2>
 8015606:	603b      	str	r3, [r7, #0]
 8015608:	2301      	movs	r3, #1
 801560a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801560c:	607b      	str	r3, [r7, #4]
 801560e:	0013      	movs	r3, r2
 8015610:	3301      	adds	r3, #1
 8015612:	932e      	str	r3, [sp, #184]	; 0xb8
 8015614:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015616:	3708      	adds	r7, #8
 8015618:	9322      	str	r3, [sp, #136]	; 0x88
 801561a:	3301      	adds	r3, #1
 801561c:	932d      	str	r3, [sp, #180]	; 0xb4
 801561e:	2b07      	cmp	r3, #7
 8015620:	dd09      	ble.n	8015636 <_svfprintf_r+0x3e2>
 8015622:	aa2c      	add	r2, sp, #176	; 0xb0
 8015624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015626:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015628:	f002 ff68 	bl	80184fc <__ssprint_r>
 801562c:	2800      	cmp	r0, #0
 801562e:	d001      	beq.n	8015634 <_svfprintf_r+0x3e0>
 8015630:	f001 f834 	bl	801669c <_svfprintf_r+0x1448>
 8015634:	af2f      	add	r7, sp, #188	; 0xbc
 8015636:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015638:	2b00      	cmp	r3, #0
 801563a:	d019      	beq.n	8015670 <_svfprintf_r+0x41c>
 801563c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801563e:	9320      	str	r3, [sp, #128]	; 0x80
 8015640:	ab25      	add	r3, sp, #148	; 0x94
 8015642:	603b      	str	r3, [r7, #0]
 8015644:	2302      	movs	r3, #2
 8015646:	607b      	str	r3, [r7, #4]
 8015648:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801564a:	3708      	adds	r7, #8
 801564c:	3302      	adds	r3, #2
 801564e:	932e      	str	r3, [sp, #184]	; 0xb8
 8015650:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015652:	9320      	str	r3, [sp, #128]	; 0x80
 8015654:	3301      	adds	r3, #1
 8015656:	932d      	str	r3, [sp, #180]	; 0xb4
 8015658:	2b07      	cmp	r3, #7
 801565a:	dd09      	ble.n	8015670 <_svfprintf_r+0x41c>
 801565c:	aa2c      	add	r2, sp, #176	; 0xb0
 801565e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015660:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015662:	f002 ff4b 	bl	80184fc <__ssprint_r>
 8015666:	2800      	cmp	r0, #0
 8015668:	d001      	beq.n	801566e <_svfprintf_r+0x41a>
 801566a:	f001 f817 	bl	801669c <_svfprintf_r+0x1448>
 801566e:	af2f      	add	r7, sp, #188	; 0xbc
 8015670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015672:	2b80      	cmp	r3, #128	; 0x80
 8015674:	d121      	bne.n	80156ba <_svfprintf_r+0x466>
 8015676:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015678:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801567a:	1a9c      	subs	r4, r3, r2
 801567c:	2c00      	cmp	r4, #0
 801567e:	dd1c      	ble.n	80156ba <_svfprintf_r+0x466>
 8015680:	0039      	movs	r1, r7
 8015682:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015684:	482e      	ldr	r0, [pc, #184]	; (8015740 <_svfprintf_r+0x4ec>)
 8015686:	9320      	str	r3, [sp, #128]	; 0x80
 8015688:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801568a:	3301      	adds	r3, #1
 801568c:	3108      	adds	r1, #8
 801568e:	6038      	str	r0, [r7, #0]
 8015690:	2c10      	cmp	r4, #16
 8015692:	dd01      	ble.n	8015698 <_svfprintf_r+0x444>
 8015694:	f000 fcbc 	bl	8016010 <_svfprintf_r+0xdbc>
 8015698:	607c      	str	r4, [r7, #4]
 801569a:	18a4      	adds	r4, r4, r2
 801569c:	942e      	str	r4, [sp, #184]	; 0xb8
 801569e:	932d      	str	r3, [sp, #180]	; 0xb4
 80156a0:	000f      	movs	r7, r1
 80156a2:	2b07      	cmp	r3, #7
 80156a4:	dd09      	ble.n	80156ba <_svfprintf_r+0x466>
 80156a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80156a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156ac:	f002 ff26 	bl	80184fc <__ssprint_r>
 80156b0:	2800      	cmp	r0, #0
 80156b2:	d001      	beq.n	80156b8 <_svfprintf_r+0x464>
 80156b4:	f000 fff2 	bl	801669c <_svfprintf_r+0x1448>
 80156b8:	af2f      	add	r7, sp, #188	; 0xbc
 80156ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80156bc:	9a08      	ldr	r2, [sp, #32]
 80156be:	1a9c      	subs	r4, r3, r2
 80156c0:	2c00      	cmp	r4, #0
 80156c2:	dd1c      	ble.n	80156fe <_svfprintf_r+0x4aa>
 80156c4:	0039      	movs	r1, r7
 80156c6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80156c8:	481d      	ldr	r0, [pc, #116]	; (8015740 <_svfprintf_r+0x4ec>)
 80156ca:	9317      	str	r3, [sp, #92]	; 0x5c
 80156cc:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80156ce:	3301      	adds	r3, #1
 80156d0:	3108      	adds	r1, #8
 80156d2:	6038      	str	r0, [r7, #0]
 80156d4:	2c10      	cmp	r4, #16
 80156d6:	dd01      	ble.n	80156dc <_svfprintf_r+0x488>
 80156d8:	f000 fcb4 	bl	8016044 <_svfprintf_r+0xdf0>
 80156dc:	18a2      	adds	r2, r4, r2
 80156de:	607c      	str	r4, [r7, #4]
 80156e0:	922e      	str	r2, [sp, #184]	; 0xb8
 80156e2:	932d      	str	r3, [sp, #180]	; 0xb4
 80156e4:	000f      	movs	r7, r1
 80156e6:	2b07      	cmp	r3, #7
 80156e8:	dd09      	ble.n	80156fe <_svfprintf_r+0x4aa>
 80156ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80156ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80156ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80156f0:	f002 ff04 	bl	80184fc <__ssprint_r>
 80156f4:	2800      	cmp	r0, #0
 80156f6:	d001      	beq.n	80156fc <_svfprintf_r+0x4a8>
 80156f8:	f000 ffd0 	bl	801669c <_svfprintf_r+0x1448>
 80156fc:	af2f      	add	r7, sp, #188	; 0xbc
 80156fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015700:	9317      	str	r3, [sp, #92]	; 0x5c
 8015702:	05f3      	lsls	r3, r6, #23
 8015704:	d501      	bpl.n	801570a <_svfprintf_r+0x4b6>
 8015706:	f000 fcb1 	bl	801606c <_svfprintf_r+0xe18>
 801570a:	9a08      	ldr	r2, [sp, #32]
 801570c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801570e:	4694      	mov	ip, r2
 8015710:	603b      	str	r3, [r7, #0]
 8015712:	9b08      	ldr	r3, [sp, #32]
 8015714:	607b      	str	r3, [r7, #4]
 8015716:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015718:	4463      	add	r3, ip
 801571a:	932e      	str	r3, [sp, #184]	; 0xb8
 801571c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801571e:	9308      	str	r3, [sp, #32]
 8015720:	3301      	adds	r3, #1
 8015722:	932d      	str	r3, [sp, #180]	; 0xb4
 8015724:	2b07      	cmp	r3, #7
 8015726:	dd01      	ble.n	801572c <_svfprintf_r+0x4d8>
 8015728:	f000 fd94 	bl	8016254 <_svfprintf_r+0x1000>
 801572c:	3708      	adds	r7, #8
 801572e:	f000 fce4 	bl	80160fa <_svfprintf_r+0xea6>
 8015732:	46c0      	nop			; (mov r8, r8)
 8015734:	0801b8a9 	.word	0x0801b8a9
 8015738:	fffffbff 	.word	0xfffffbff
 801573c:	0801b8bc 	.word	0x0801b8bc
 8015740:	0801b8cc 	.word	0x0801b8cc
 8015744:	2310      	movs	r3, #16
 8015746:	431e      	orrs	r6, r3
 8015748:	06b3      	lsls	r3, r6, #26
 801574a:	d52c      	bpl.n	80157a6 <_svfprintf_r+0x552>
 801574c:	2307      	movs	r3, #7
 801574e:	3407      	adds	r4, #7
 8015750:	439c      	bics	r4, r3
 8015752:	0023      	movs	r3, r4
 8015754:	3308      	adds	r3, #8
 8015756:	9312      	str	r3, [sp, #72]	; 0x48
 8015758:	6823      	ldr	r3, [r4, #0]
 801575a:	6864      	ldr	r4, [r4, #4]
 801575c:	9306      	str	r3, [sp, #24]
 801575e:	9407      	str	r4, [sp, #28]
 8015760:	9b07      	ldr	r3, [sp, #28]
 8015762:	2b00      	cmp	r3, #0
 8015764:	da0b      	bge.n	801577e <_svfprintf_r+0x52a>
 8015766:	9906      	ldr	r1, [sp, #24]
 8015768:	9a07      	ldr	r2, [sp, #28]
 801576a:	2400      	movs	r4, #0
 801576c:	424b      	negs	r3, r1
 801576e:	4194      	sbcs	r4, r2
 8015770:	9306      	str	r3, [sp, #24]
 8015772:	9407      	str	r4, [sp, #28]
 8015774:	231b      	movs	r3, #27
 8015776:	aa1e      	add	r2, sp, #120	; 0x78
 8015778:	189b      	adds	r3, r3, r2
 801577a:	222d      	movs	r2, #45	; 0x2d
 801577c:	701a      	strb	r2, [r3, #0]
 801577e:	9b08      	ldr	r3, [sp, #32]
 8015780:	3301      	adds	r3, #1
 8015782:	d000      	beq.n	8015786 <_svfprintf_r+0x532>
 8015784:	e382      	b.n	8015e8c <_svfprintf_r+0xc38>
 8015786:	9b07      	ldr	r3, [sp, #28]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d000      	beq.n	801578e <_svfprintf_r+0x53a>
 801578c:	e3b0      	b.n	8015ef0 <_svfprintf_r+0xc9c>
 801578e:	9b06      	ldr	r3, [sp, #24]
 8015790:	2b09      	cmp	r3, #9
 8015792:	d900      	bls.n	8015796 <_svfprintf_r+0x542>
 8015794:	e3ac      	b.n	8015ef0 <_svfprintf_r+0xc9c>
 8015796:	23e7      	movs	r3, #231	; 0xe7
 8015798:	aa1e      	add	r2, sp, #120	; 0x78
 801579a:	189b      	adds	r3, r3, r2
 801579c:	9a06      	ldr	r2, [sp, #24]
 801579e:	3230      	adds	r2, #48	; 0x30
 80157a0:	701a      	strb	r2, [r3, #0]
 80157a2:	9309      	str	r3, [sp, #36]	; 0x24
 80157a4:	e395      	b.n	8015ed2 <_svfprintf_r+0xc7e>
 80157a6:	1d23      	adds	r3, r4, #4
 80157a8:	9312      	str	r3, [sp, #72]	; 0x48
 80157aa:	06f3      	lsls	r3, r6, #27
 80157ac:	d504      	bpl.n	80157b8 <_svfprintf_r+0x564>
 80157ae:	6823      	ldr	r3, [r4, #0]
 80157b0:	9306      	str	r3, [sp, #24]
 80157b2:	17db      	asrs	r3, r3, #31
 80157b4:	9307      	str	r3, [sp, #28]
 80157b6:	e7d3      	b.n	8015760 <_svfprintf_r+0x50c>
 80157b8:	6823      	ldr	r3, [r4, #0]
 80157ba:	0672      	lsls	r2, r6, #25
 80157bc:	d501      	bpl.n	80157c2 <_svfprintf_r+0x56e>
 80157be:	b21b      	sxth	r3, r3
 80157c0:	e7f6      	b.n	80157b0 <_svfprintf_r+0x55c>
 80157c2:	05b2      	lsls	r2, r6, #22
 80157c4:	d5f4      	bpl.n	80157b0 <_svfprintf_r+0x55c>
 80157c6:	b25b      	sxtb	r3, r3
 80157c8:	e7f2      	b.n	80157b0 <_svfprintf_r+0x55c>
 80157ca:	2307      	movs	r3, #7
 80157cc:	3407      	adds	r4, #7
 80157ce:	439c      	bics	r4, r3
 80157d0:	0023      	movs	r3, r4
 80157d2:	2201      	movs	r2, #1
 80157d4:	3308      	adds	r3, #8
 80157d6:	9312      	str	r3, [sp, #72]	; 0x48
 80157d8:	6823      	ldr	r3, [r4, #0]
 80157da:	4252      	negs	r2, r2
 80157dc:	931a      	str	r3, [sp, #104]	; 0x68
 80157de:	6863      	ldr	r3, [r4, #4]
 80157e0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80157e2:	005c      	lsls	r4, r3, #1
 80157e4:	0864      	lsrs	r4, r4, #1
 80157e6:	9319      	str	r3, [sp, #100]	; 0x64
 80157e8:	0028      	movs	r0, r5
 80157ea:	4bcf      	ldr	r3, [pc, #828]	; (8015b28 <_svfprintf_r+0x8d4>)
 80157ec:	0021      	movs	r1, r4
 80157ee:	f7ed f8db 	bl	80029a8 <__aeabi_dcmpun>
 80157f2:	2800      	cmp	r0, #0
 80157f4:	d125      	bne.n	8015842 <_svfprintf_r+0x5ee>
 80157f6:	2201      	movs	r2, #1
 80157f8:	4bcb      	ldr	r3, [pc, #812]	; (8015b28 <_svfprintf_r+0x8d4>)
 80157fa:	4252      	negs	r2, r2
 80157fc:	0028      	movs	r0, r5
 80157fe:	0021      	movs	r1, r4
 8015800:	f7ea fe3c 	bl	800047c <__aeabi_dcmple>
 8015804:	2800      	cmp	r0, #0
 8015806:	d11c      	bne.n	8015842 <_svfprintf_r+0x5ee>
 8015808:	2200      	movs	r2, #0
 801580a:	2300      	movs	r3, #0
 801580c:	981a      	ldr	r0, [sp, #104]	; 0x68
 801580e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8015810:	f7ea fe2a 	bl	8000468 <__aeabi_dcmplt>
 8015814:	2800      	cmp	r0, #0
 8015816:	d004      	beq.n	8015822 <_svfprintf_r+0x5ce>
 8015818:	231b      	movs	r3, #27
 801581a:	aa1e      	add	r2, sp, #120	; 0x78
 801581c:	189b      	adds	r3, r3, r2
 801581e:	222d      	movs	r2, #45	; 0x2d
 8015820:	701a      	strb	r2, [r3, #0]
 8015822:	4bc2      	ldr	r3, [pc, #776]	; (8015b2c <_svfprintf_r+0x8d8>)
 8015824:	9309      	str	r3, [sp, #36]	; 0x24
 8015826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015828:	2b47      	cmp	r3, #71	; 0x47
 801582a:	dc01      	bgt.n	8015830 <_svfprintf_r+0x5dc>
 801582c:	4bc0      	ldr	r3, [pc, #768]	; (8015b30 <_svfprintf_r+0x8dc>)
 801582e:	9309      	str	r3, [sp, #36]	; 0x24
 8015830:	2380      	movs	r3, #128	; 0x80
 8015832:	439e      	bics	r6, r3
 8015834:	2300      	movs	r3, #0
 8015836:	930c      	str	r3, [sp, #48]	; 0x30
 8015838:	3303      	adds	r3, #3
 801583a:	9308      	str	r3, [sp, #32]
 801583c:	2300      	movs	r3, #0
 801583e:	9317      	str	r3, [sp, #92]	; 0x5c
 8015840:	e34f      	b.n	8015ee2 <_svfprintf_r+0xc8e>
 8015842:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015844:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015846:	981a      	ldr	r0, [sp, #104]	; 0x68
 8015848:	9919      	ldr	r1, [sp, #100]	; 0x64
 801584a:	f7ed f8ad 	bl	80029a8 <__aeabi_dcmpun>
 801584e:	2800      	cmp	r0, #0
 8015850:	d00e      	beq.n	8015870 <_svfprintf_r+0x61c>
 8015852:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015854:	2b00      	cmp	r3, #0
 8015856:	da04      	bge.n	8015862 <_svfprintf_r+0x60e>
 8015858:	231b      	movs	r3, #27
 801585a:	aa1e      	add	r2, sp, #120	; 0x78
 801585c:	189b      	adds	r3, r3, r2
 801585e:	222d      	movs	r2, #45	; 0x2d
 8015860:	701a      	strb	r2, [r3, #0]
 8015862:	4bb4      	ldr	r3, [pc, #720]	; (8015b34 <_svfprintf_r+0x8e0>)
 8015864:	9309      	str	r3, [sp, #36]	; 0x24
 8015866:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015868:	2b47      	cmp	r3, #71	; 0x47
 801586a:	dce1      	bgt.n	8015830 <_svfprintf_r+0x5dc>
 801586c:	4bb2      	ldr	r3, [pc, #712]	; (8015b38 <_svfprintf_r+0x8e4>)
 801586e:	e7de      	b.n	801582e <_svfprintf_r+0x5da>
 8015870:	2320      	movs	r3, #32
 8015872:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015874:	439a      	bics	r2, r3
 8015876:	920f      	str	r2, [sp, #60]	; 0x3c
 8015878:	2a41      	cmp	r2, #65	; 0x41
 801587a:	d124      	bne.n	80158c6 <_svfprintf_r+0x672>
 801587c:	2230      	movs	r2, #48	; 0x30
 801587e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015880:	ab25      	add	r3, sp, #148	; 0x94
 8015882:	701a      	strb	r2, [r3, #0]
 8015884:	3228      	adds	r2, #40	; 0x28
 8015886:	2961      	cmp	r1, #97	; 0x61
 8015888:	d100      	bne.n	801588c <_svfprintf_r+0x638>
 801588a:	3220      	adds	r2, #32
 801588c:	705a      	strb	r2, [r3, #1]
 801588e:	2302      	movs	r3, #2
 8015890:	431e      	orrs	r6, r3
 8015892:	9b08      	ldr	r3, [sp, #32]
 8015894:	2b63      	cmp	r3, #99	; 0x63
 8015896:	dc00      	bgt.n	801589a <_svfprintf_r+0x646>
 8015898:	e09e      	b.n	80159d8 <_svfprintf_r+0x784>
 801589a:	1c59      	adds	r1, r3, #1
 801589c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801589e:	f7fe f8e1 	bl	8013a64 <_malloc_r>
 80158a2:	9009      	str	r0, [sp, #36]	; 0x24
 80158a4:	2800      	cmp	r0, #0
 80158a6:	d000      	beq.n	80158aa <_svfprintf_r+0x656>
 80158a8:	e09b      	b.n	80159e2 <_svfprintf_r+0x78e>
 80158aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158ac:	899a      	ldrh	r2, [r3, #12]
 80158ae:	2340      	movs	r3, #64	; 0x40
 80158b0:	4313      	orrs	r3, r2
 80158b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158b4:	8193      	strh	r3, [r2, #12]
 80158b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158b8:	899b      	ldrh	r3, [r3, #12]
 80158ba:	065b      	lsls	r3, r3, #25
 80158bc:	d400      	bmi.n	80158c0 <_svfprintf_r+0x66c>
 80158be:	e4ee      	b.n	801529e <_svfprintf_r+0x4a>
 80158c0:	2301      	movs	r3, #1
 80158c2:	425b      	negs	r3, r3
 80158c4:	e4ea      	b.n	801529c <_svfprintf_r+0x48>
 80158c6:	9b08      	ldr	r3, [sp, #32]
 80158c8:	900c      	str	r0, [sp, #48]	; 0x30
 80158ca:	3301      	adds	r3, #1
 80158cc:	d100      	bne.n	80158d0 <_svfprintf_r+0x67c>
 80158ce:	e08b      	b.n	80159e8 <_svfprintf_r+0x794>
 80158d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158d2:	2b47      	cmp	r3, #71	; 0x47
 80158d4:	d103      	bne.n	80158de <_svfprintf_r+0x68a>
 80158d6:	9b08      	ldr	r3, [sp, #32]
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d100      	bne.n	80158de <_svfprintf_r+0x68a>
 80158dc:	e087      	b.n	80159ee <_svfprintf_r+0x79a>
 80158de:	2380      	movs	r3, #128	; 0x80
 80158e0:	005b      	lsls	r3, r3, #1
 80158e2:	4333      	orrs	r3, r6
 80158e4:	9320      	str	r3, [sp, #128]	; 0x80
 80158e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80158e8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	db00      	blt.n	80158f0 <_svfprintf_r+0x69c>
 80158ee:	e082      	b.n	80159f6 <_svfprintf_r+0x7a2>
 80158f0:	2280      	movs	r2, #128	; 0x80
 80158f2:	0612      	lsls	r2, r2, #24
 80158f4:	4694      	mov	ip, r2
 80158f6:	4463      	add	r3, ip
 80158f8:	930d      	str	r3, [sp, #52]	; 0x34
 80158fa:	232d      	movs	r3, #45	; 0x2d
 80158fc:	9322      	str	r3, [sp, #136]	; 0x88
 80158fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015900:	2b41      	cmp	r3, #65	; 0x41
 8015902:	d000      	beq.n	8015906 <_svfprintf_r+0x6b2>
 8015904:	e105      	b.n	8015b12 <_svfprintf_r+0x8be>
 8015906:	aa26      	add	r2, sp, #152	; 0x98
 8015908:	0020      	movs	r0, r4
 801590a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801590c:	f002 fdc4 	bl	8018498 <frexp>
 8015910:	23ff      	movs	r3, #255	; 0xff
 8015912:	2200      	movs	r2, #0
 8015914:	059b      	lsls	r3, r3, #22
 8015916:	f7ec fa8d 	bl	8001e34 <__aeabi_dmul>
 801591a:	2200      	movs	r2, #0
 801591c:	2300      	movs	r3, #0
 801591e:	0004      	movs	r4, r0
 8015920:	000d      	movs	r5, r1
 8015922:	f7ea fd9b 	bl	800045c <__aeabi_dcmpeq>
 8015926:	2800      	cmp	r0, #0
 8015928:	d001      	beq.n	801592e <_svfprintf_r+0x6da>
 801592a:	2301      	movs	r3, #1
 801592c:	9326      	str	r3, [sp, #152]	; 0x98
 801592e:	4b83      	ldr	r3, [pc, #524]	; (8015b3c <_svfprintf_r+0x8e8>)
 8015930:	9317      	str	r3, [sp, #92]	; 0x5c
 8015932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015934:	2b61      	cmp	r3, #97	; 0x61
 8015936:	d101      	bne.n	801593c <_svfprintf_r+0x6e8>
 8015938:	4b81      	ldr	r3, [pc, #516]	; (8015b40 <_svfprintf_r+0x8ec>)
 801593a:	9317      	str	r3, [sp, #92]	; 0x5c
 801593c:	9b08      	ldr	r3, [sp, #32]
 801593e:	3b01      	subs	r3, #1
 8015940:	9310      	str	r3, [sp, #64]	; 0x40
 8015942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015944:	9318      	str	r3, [sp, #96]	; 0x60
 8015946:	2200      	movs	r2, #0
 8015948:	4b7e      	ldr	r3, [pc, #504]	; (8015b44 <_svfprintf_r+0x8f0>)
 801594a:	0020      	movs	r0, r4
 801594c:	0029      	movs	r1, r5
 801594e:	f7ec fa71 	bl	8001e34 <__aeabi_dmul>
 8015952:	000d      	movs	r5, r1
 8015954:	0004      	movs	r4, r0
 8015956:	f7ed f843 	bl	80029e0 <__aeabi_d2iz>
 801595a:	9021      	str	r0, [sp, #132]	; 0x84
 801595c:	f7ed f876 	bl	8002a4c <__aeabi_i2d>
 8015960:	0002      	movs	r2, r0
 8015962:	000b      	movs	r3, r1
 8015964:	0020      	movs	r0, r4
 8015966:	0029      	movs	r1, r5
 8015968:	f7ec fcd6 	bl	8002318 <__aeabi_dsub>
 801596c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801596e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015970:	3301      	adds	r3, #1
 8015972:	930d      	str	r3, [sp, #52]	; 0x34
 8015974:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015976:	0004      	movs	r4, r0
 8015978:	5c9b      	ldrb	r3, [r3, r2]
 801597a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801597c:	000d      	movs	r5, r1
 801597e:	7013      	strb	r3, [r2, #0]
 8015980:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015982:	9323      	str	r3, [sp, #140]	; 0x8c
 8015984:	3301      	adds	r3, #1
 8015986:	d00a      	beq.n	801599e <_svfprintf_r+0x74a>
 8015988:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801598a:	2200      	movs	r2, #0
 801598c:	3b01      	subs	r3, #1
 801598e:	9310      	str	r3, [sp, #64]	; 0x40
 8015990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015992:	9318      	str	r3, [sp, #96]	; 0x60
 8015994:	2300      	movs	r3, #0
 8015996:	f7ea fd61 	bl	800045c <__aeabi_dcmpeq>
 801599a:	2800      	cmp	r0, #0
 801599c:	d0d3      	beq.n	8015946 <_svfprintf_r+0x6f2>
 801599e:	2200      	movs	r2, #0
 80159a0:	4b69      	ldr	r3, [pc, #420]	; (8015b48 <_svfprintf_r+0x8f4>)
 80159a2:	0020      	movs	r0, r4
 80159a4:	0029      	movs	r1, r5
 80159a6:	f7ea fd73 	bl	8000490 <__aeabi_dcmpgt>
 80159aa:	2800      	cmp	r0, #0
 80159ac:	d126      	bne.n	80159fc <_svfprintf_r+0x7a8>
 80159ae:	2200      	movs	r2, #0
 80159b0:	4b65      	ldr	r3, [pc, #404]	; (8015b48 <_svfprintf_r+0x8f4>)
 80159b2:	0020      	movs	r0, r4
 80159b4:	0029      	movs	r1, r5
 80159b6:	f7ea fd51 	bl	800045c <__aeabi_dcmpeq>
 80159ba:	2800      	cmp	r0, #0
 80159bc:	d002      	beq.n	80159c4 <_svfprintf_r+0x770>
 80159be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80159c0:	07db      	lsls	r3, r3, #31
 80159c2:	d41b      	bmi.n	80159fc <_svfprintf_r+0x7a8>
 80159c4:	2130      	movs	r1, #48	; 0x30
 80159c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159c8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80159ca:	1898      	adds	r0, r3, r2
 80159cc:	930d      	str	r3, [sp, #52]	; 0x34
 80159ce:	1ac2      	subs	r2, r0, r3
 80159d0:	d426      	bmi.n	8015a20 <_svfprintf_r+0x7cc>
 80159d2:	7019      	strb	r1, [r3, #0]
 80159d4:	3301      	adds	r3, #1
 80159d6:	e7f9      	b.n	80159cc <_svfprintf_r+0x778>
 80159d8:	2300      	movs	r3, #0
 80159da:	930c      	str	r3, [sp, #48]	; 0x30
 80159dc:	ab3f      	add	r3, sp, #252	; 0xfc
 80159de:	9309      	str	r3, [sp, #36]	; 0x24
 80159e0:	e77d      	b.n	80158de <_svfprintf_r+0x68a>
 80159e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159e4:	930c      	str	r3, [sp, #48]	; 0x30
 80159e6:	e77a      	b.n	80158de <_svfprintf_r+0x68a>
 80159e8:	2306      	movs	r3, #6
 80159ea:	9308      	str	r3, [sp, #32]
 80159ec:	e777      	b.n	80158de <_svfprintf_r+0x68a>
 80159ee:	9b08      	ldr	r3, [sp, #32]
 80159f0:	930c      	str	r3, [sp, #48]	; 0x30
 80159f2:	2301      	movs	r3, #1
 80159f4:	e7f9      	b.n	80159ea <_svfprintf_r+0x796>
 80159f6:	930d      	str	r3, [sp, #52]	; 0x34
 80159f8:	2300      	movs	r3, #0
 80159fa:	e77f      	b.n	80158fc <_svfprintf_r+0x6a8>
 80159fc:	2030      	movs	r0, #48	; 0x30
 80159fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a00:	932a      	str	r3, [sp, #168]	; 0xa8
 8015a02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a04:	7bda      	ldrb	r2, [r3, #15]
 8015a06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015a08:	3b01      	subs	r3, #1
 8015a0a:	932a      	str	r3, [sp, #168]	; 0xa8
 8015a0c:	7819      	ldrb	r1, [r3, #0]
 8015a0e:	4291      	cmp	r1, r2
 8015a10:	d07d      	beq.n	8015b0e <_svfprintf_r+0x8ba>
 8015a12:	1c4a      	adds	r2, r1, #1
 8015a14:	b2d2      	uxtb	r2, r2
 8015a16:	2939      	cmp	r1, #57	; 0x39
 8015a18:	d101      	bne.n	8015a1e <_svfprintf_r+0x7ca>
 8015a1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015a1c:	7a92      	ldrb	r2, [r2, #10]
 8015a1e:	701a      	strb	r2, [r3, #0]
 8015a20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a24:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8015a26:	1a9b      	subs	r3, r3, r2
 8015a28:	930d      	str	r3, [sp, #52]	; 0x34
 8015a2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a2c:	2b47      	cmp	r3, #71	; 0x47
 8015a2e:	d000      	beq.n	8015a32 <_svfprintf_r+0x7de>
 8015a30:	e0d2      	b.n	8015bd8 <_svfprintf_r+0x984>
 8015a32:	1ceb      	adds	r3, r5, #3
 8015a34:	db03      	blt.n	8015a3e <_svfprintf_r+0x7ea>
 8015a36:	9b08      	ldr	r3, [sp, #32]
 8015a38:	42ab      	cmp	r3, r5
 8015a3a:	db00      	blt.n	8015a3e <_svfprintf_r+0x7ea>
 8015a3c:	e0fd      	b.n	8015c3a <_svfprintf_r+0x9e6>
 8015a3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015a40:	3b02      	subs	r3, #2
 8015a42:	930e      	str	r3, [sp, #56]	; 0x38
 8015a44:	2238      	movs	r2, #56	; 0x38
 8015a46:	466b      	mov	r3, sp
 8015a48:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015a4a:	189b      	adds	r3, r3, r2
 8015a4c:	3a18      	subs	r2, #24
 8015a4e:	4391      	bics	r1, r2
 8015a50:	1e6c      	subs	r4, r5, #1
 8015a52:	000a      	movs	r2, r1
 8015a54:	9426      	str	r4, [sp, #152]	; 0x98
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	2100      	movs	r1, #0
 8015a5a:	2a41      	cmp	r2, #65	; 0x41
 8015a5c:	d102      	bne.n	8015a64 <_svfprintf_r+0x810>
 8015a5e:	330f      	adds	r3, #15
 8015a60:	b2db      	uxtb	r3, r3
 8015a62:	3101      	adds	r1, #1
 8015a64:	aa28      	add	r2, sp, #160	; 0xa0
 8015a66:	7013      	strb	r3, [r2, #0]
 8015a68:	232b      	movs	r3, #43	; 0x2b
 8015a6a:	2c00      	cmp	r4, #0
 8015a6c:	da02      	bge.n	8015a74 <_svfprintf_r+0x820>
 8015a6e:	2401      	movs	r4, #1
 8015a70:	232d      	movs	r3, #45	; 0x2d
 8015a72:	1b64      	subs	r4, r4, r5
 8015a74:	7053      	strb	r3, [r2, #1]
 8015a76:	2c09      	cmp	r4, #9
 8015a78:	dc00      	bgt.n	8015a7c <_svfprintf_r+0x828>
 8015a7a:	e0c7      	b.n	8015c0c <_svfprintf_r+0x9b8>
 8015a7c:	2537      	movs	r5, #55	; 0x37
 8015a7e:	ab1e      	add	r3, sp, #120	; 0x78
 8015a80:	18ed      	adds	r5, r5, r3
 8015a82:	1e6b      	subs	r3, r5, #1
 8015a84:	0020      	movs	r0, r4
 8015a86:	210a      	movs	r1, #10
 8015a88:	9308      	str	r3, [sp, #32]
 8015a8a:	f7ea fcd1 	bl	8000430 <__aeabi_idivmod>
 8015a8e:	1e6b      	subs	r3, r5, #1
 8015a90:	3130      	adds	r1, #48	; 0x30
 8015a92:	7019      	strb	r1, [r3, #0]
 8015a94:	0020      	movs	r0, r4
 8015a96:	210a      	movs	r1, #10
 8015a98:	f7ea fbe4 	bl	8000264 <__divsi3>
 8015a9c:	0004      	movs	r4, r0
 8015a9e:	2809      	cmp	r0, #9
 8015aa0:	dd00      	ble.n	8015aa4 <_svfprintf_r+0x850>
 8015aa2:	e0ac      	b.n	8015bfe <_svfprintf_r+0x9aa>
 8015aa4:	232a      	movs	r3, #42	; 0x2a
 8015aa6:	2137      	movs	r1, #55	; 0x37
 8015aa8:	aa1e      	add	r2, sp, #120	; 0x78
 8015aaa:	3d02      	subs	r5, #2
 8015aac:	3430      	adds	r4, #48	; 0x30
 8015aae:	702c      	strb	r4, [r5, #0]
 8015ab0:	189b      	adds	r3, r3, r2
 8015ab2:	1889      	adds	r1, r1, r2
 8015ab4:	001a      	movs	r2, r3
 8015ab6:	428d      	cmp	r5, r1
 8015ab8:	d200      	bcs.n	8015abc <_svfprintf_r+0x868>
 8015aba:	e0a2      	b.n	8015c02 <_svfprintf_r+0x9ae>
 8015abc:	ab28      	add	r3, sp, #160	; 0xa0
 8015abe:	1ad3      	subs	r3, r2, r3
 8015ac0:	931d      	str	r3, [sp, #116]	; 0x74
 8015ac2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ac6:	4694      	mov	ip, r2
 8015ac8:	4463      	add	r3, ip
 8015aca:	9308      	str	r3, [sp, #32]
 8015acc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ace:	2b01      	cmp	r3, #1
 8015ad0:	dc01      	bgt.n	8015ad6 <_svfprintf_r+0x882>
 8015ad2:	07f3      	lsls	r3, r6, #31
 8015ad4:	d504      	bpl.n	8015ae0 <_svfprintf_r+0x88c>
 8015ad6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015ad8:	9b08      	ldr	r3, [sp, #32]
 8015ada:	4694      	mov	ip, r2
 8015adc:	4463      	add	r3, ip
 8015ade:	9308      	str	r3, [sp, #32]
 8015ae0:	2280      	movs	r2, #128	; 0x80
 8015ae2:	4b1a      	ldr	r3, [pc, #104]	; (8015b4c <_svfprintf_r+0x8f8>)
 8015ae4:	0052      	lsls	r2, r2, #1
 8015ae6:	4033      	ands	r3, r6
 8015ae8:	431a      	orrs	r2, r3
 8015aea:	2300      	movs	r3, #0
 8015aec:	001d      	movs	r5, r3
 8015aee:	9220      	str	r2, [sp, #128]	; 0x80
 8015af0:	9310      	str	r3, [sp, #64]	; 0x40
 8015af2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015af4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d100      	bne.n	8015afc <_svfprintf_r+0x8a8>
 8015afa:	e270      	b.n	8015fde <_svfprintf_r+0xd8a>
 8015afc:	231b      	movs	r3, #27
 8015afe:	aa1e      	add	r2, sp, #120	; 0x78
 8015b00:	189b      	adds	r3, r3, r2
 8015b02:	222d      	movs	r2, #45	; 0x2d
 8015b04:	701a      	strb	r2, [r3, #0]
 8015b06:	2300      	movs	r3, #0
 8015b08:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015b0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8015b0c:	e539      	b.n	8015582 <_svfprintf_r+0x32e>
 8015b0e:	7018      	strb	r0, [r3, #0]
 8015b10:	e779      	b.n	8015a06 <_svfprintf_r+0x7b2>
 8015b12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b14:	2b46      	cmp	r3, #70	; 0x46
 8015b16:	d01b      	beq.n	8015b50 <_svfprintf_r+0x8fc>
 8015b18:	9d08      	ldr	r5, [sp, #32]
 8015b1a:	2b45      	cmp	r3, #69	; 0x45
 8015b1c:	d101      	bne.n	8015b22 <_svfprintf_r+0x8ce>
 8015b1e:	9b08      	ldr	r3, [sp, #32]
 8015b20:	1c5d      	adds	r5, r3, #1
 8015b22:	2302      	movs	r3, #2
 8015b24:	e016      	b.n	8015b54 <_svfprintf_r+0x900>
 8015b26:	46c0      	nop			; (mov r8, r8)
 8015b28:	7fefffff 	.word	0x7fefffff
 8015b2c:	0801b88c 	.word	0x0801b88c
 8015b30:	0801b888 	.word	0x0801b888
 8015b34:	0801b894 	.word	0x0801b894
 8015b38:	0801b890 	.word	0x0801b890
 8015b3c:	0801b8a9 	.word	0x0801b8a9
 8015b40:	0801b898 	.word	0x0801b898
 8015b44:	40300000 	.word	0x40300000
 8015b48:	3fe00000 	.word	0x3fe00000
 8015b4c:	fffffbff 	.word	0xfffffbff
 8015b50:	2303      	movs	r3, #3
 8015b52:	9d08      	ldr	r5, [sp, #32]
 8015b54:	aa2a      	add	r2, sp, #168	; 0xa8
 8015b56:	9204      	str	r2, [sp, #16]
 8015b58:	aa27      	add	r2, sp, #156	; 0x9c
 8015b5a:	9203      	str	r2, [sp, #12]
 8015b5c:	aa26      	add	r2, sp, #152	; 0x98
 8015b5e:	9202      	str	r2, [sp, #8]
 8015b60:	9300      	str	r3, [sp, #0]
 8015b62:	9501      	str	r5, [sp, #4]
 8015b64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b66:	0022      	movs	r2, r4
 8015b68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015b6a:	f000 fe79 	bl	8016860 <_dtoa_r>
 8015b6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b70:	9009      	str	r0, [sp, #36]	; 0x24
 8015b72:	2b47      	cmp	r3, #71	; 0x47
 8015b74:	d101      	bne.n	8015b7a <_svfprintf_r+0x926>
 8015b76:	07f3      	lsls	r3, r6, #31
 8015b78:	d524      	bpl.n	8015bc4 <_svfprintf_r+0x970>
 8015b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b7c:	195b      	adds	r3, r3, r5
 8015b7e:	9310      	str	r3, [sp, #64]	; 0x40
 8015b80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b82:	2b46      	cmp	r3, #70	; 0x46
 8015b84:	d113      	bne.n	8015bae <_svfprintf_r+0x95a>
 8015b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	2b30      	cmp	r3, #48	; 0x30
 8015b8c:	d10a      	bne.n	8015ba4 <_svfprintf_r+0x950>
 8015b8e:	2200      	movs	r2, #0
 8015b90:	2300      	movs	r3, #0
 8015b92:	0020      	movs	r0, r4
 8015b94:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015b96:	f7ea fc61 	bl	800045c <__aeabi_dcmpeq>
 8015b9a:	2800      	cmp	r0, #0
 8015b9c:	d102      	bne.n	8015ba4 <_svfprintf_r+0x950>
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	1b5d      	subs	r5, r3, r5
 8015ba2:	9526      	str	r5, [sp, #152]	; 0x98
 8015ba4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8015ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ba8:	4694      	mov	ip, r2
 8015baa:	4463      	add	r3, ip
 8015bac:	9310      	str	r3, [sp, #64]	; 0x40
 8015bae:	2200      	movs	r2, #0
 8015bb0:	2300      	movs	r3, #0
 8015bb2:	0020      	movs	r0, r4
 8015bb4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015bb6:	f7ea fc51 	bl	800045c <__aeabi_dcmpeq>
 8015bba:	2230      	movs	r2, #48	; 0x30
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	d006      	beq.n	8015bce <_svfprintf_r+0x97a>
 8015bc0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015bc2:	932a      	str	r3, [sp, #168]	; 0xa8
 8015bc4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015bc6:	e72c      	b.n	8015a22 <_svfprintf_r+0x7ce>
 8015bc8:	1c59      	adds	r1, r3, #1
 8015bca:	912a      	str	r1, [sp, #168]	; 0xa8
 8015bcc:	701a      	strb	r2, [r3, #0]
 8015bce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8015bd0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8015bd2:	4299      	cmp	r1, r3
 8015bd4:	d8f8      	bhi.n	8015bc8 <_svfprintf_r+0x974>
 8015bd6:	e7f5      	b.n	8015bc4 <_svfprintf_r+0x970>
 8015bd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015bda:	2b46      	cmp	r3, #70	; 0x46
 8015bdc:	d000      	beq.n	8015be0 <_svfprintf_r+0x98c>
 8015bde:	e731      	b.n	8015a44 <_svfprintf_r+0x7f0>
 8015be0:	9b08      	ldr	r3, [sp, #32]
 8015be2:	2d00      	cmp	r5, #0
 8015be4:	dd21      	ble.n	8015c2a <_svfprintf_r+0x9d6>
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d101      	bne.n	8015bee <_svfprintf_r+0x99a>
 8015bea:	07f3      	lsls	r3, r6, #31
 8015bec:	d54a      	bpl.n	8015c84 <_svfprintf_r+0xa30>
 8015bee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015bf0:	18eb      	adds	r3, r5, r3
 8015bf2:	9a08      	ldr	r2, [sp, #32]
 8015bf4:	18d3      	adds	r3, r2, r3
 8015bf6:	9308      	str	r3, [sp, #32]
 8015bf8:	2366      	movs	r3, #102	; 0x66
 8015bfa:	930e      	str	r3, [sp, #56]	; 0x38
 8015bfc:	e034      	b.n	8015c68 <_svfprintf_r+0xa14>
 8015bfe:	9d08      	ldr	r5, [sp, #32]
 8015c00:	e73f      	b.n	8015a82 <_svfprintf_r+0x82e>
 8015c02:	782a      	ldrb	r2, [r5, #0]
 8015c04:	3501      	adds	r5, #1
 8015c06:	701a      	strb	r2, [r3, #0]
 8015c08:	3301      	adds	r3, #1
 8015c0a:	e753      	b.n	8015ab4 <_svfprintf_r+0x860>
 8015c0c:	232a      	movs	r3, #42	; 0x2a
 8015c0e:	aa1e      	add	r2, sp, #120	; 0x78
 8015c10:	189b      	adds	r3, r3, r2
 8015c12:	2900      	cmp	r1, #0
 8015c14:	d105      	bne.n	8015c22 <_svfprintf_r+0x9ce>
 8015c16:	2230      	movs	r2, #48	; 0x30
 8015c18:	ab28      	add	r3, sp, #160	; 0xa0
 8015c1a:	709a      	strb	r2, [r3, #2]
 8015c1c:	232b      	movs	r3, #43	; 0x2b
 8015c1e:	aa1e      	add	r2, sp, #120	; 0x78
 8015c20:	189b      	adds	r3, r3, r2
 8015c22:	3430      	adds	r4, #48	; 0x30
 8015c24:	1c5a      	adds	r2, r3, #1
 8015c26:	701c      	strb	r4, [r3, #0]
 8015c28:	e748      	b.n	8015abc <_svfprintf_r+0x868>
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d102      	bne.n	8015c34 <_svfprintf_r+0x9e0>
 8015c2e:	3301      	adds	r3, #1
 8015c30:	421e      	tst	r6, r3
 8015c32:	d029      	beq.n	8015c88 <_svfprintf_r+0xa34>
 8015c34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c36:	3301      	adds	r3, #1
 8015c38:	e7db      	b.n	8015bf2 <_svfprintf_r+0x99e>
 8015c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c3c:	42ab      	cmp	r3, r5
 8015c3e:	dc06      	bgt.n	8015c4e <_svfprintf_r+0x9fa>
 8015c40:	07f3      	lsls	r3, r6, #31
 8015c42:	d524      	bpl.n	8015c8e <_svfprintf_r+0xa3a>
 8015c44:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c46:	18eb      	adds	r3, r5, r3
 8015c48:	9308      	str	r3, [sp, #32]
 8015c4a:	2367      	movs	r3, #103	; 0x67
 8015c4c:	e7d5      	b.n	8015bfa <_svfprintf_r+0x9a6>
 8015c4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c52:	4694      	mov	ip, r2
 8015c54:	4463      	add	r3, ip
 8015c56:	9308      	str	r3, [sp, #32]
 8015c58:	2367      	movs	r3, #103	; 0x67
 8015c5a:	930e      	str	r3, [sp, #56]	; 0x38
 8015c5c:	2d00      	cmp	r5, #0
 8015c5e:	dc03      	bgt.n	8015c68 <_svfprintf_r+0xa14>
 8015c60:	9b08      	ldr	r3, [sp, #32]
 8015c62:	1b5b      	subs	r3, r3, r5
 8015c64:	3301      	adds	r3, #1
 8015c66:	9308      	str	r3, [sp, #32]
 8015c68:	2380      	movs	r3, #128	; 0x80
 8015c6a:	00db      	lsls	r3, r3, #3
 8015c6c:	401e      	ands	r6, r3
 8015c6e:	2300      	movs	r3, #0
 8015c70:	960f      	str	r6, [sp, #60]	; 0x3c
 8015c72:	9310      	str	r3, [sp, #64]	; 0x40
 8015c74:	2e00      	cmp	r6, #0
 8015c76:	d100      	bne.n	8015c7a <_svfprintf_r+0xa26>
 8015c78:	e73c      	b.n	8015af4 <_svfprintf_r+0x8a0>
 8015c7a:	2d00      	cmp	r5, #0
 8015c7c:	dc27      	bgt.n	8015cce <_svfprintf_r+0xa7a>
 8015c7e:	2300      	movs	r3, #0
 8015c80:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c82:	e737      	b.n	8015af4 <_svfprintf_r+0x8a0>
 8015c84:	9508      	str	r5, [sp, #32]
 8015c86:	e7b7      	b.n	8015bf8 <_svfprintf_r+0x9a4>
 8015c88:	2266      	movs	r2, #102	; 0x66
 8015c8a:	920e      	str	r2, [sp, #56]	; 0x38
 8015c8c:	e7eb      	b.n	8015c66 <_svfprintf_r+0xa12>
 8015c8e:	9508      	str	r5, [sp, #32]
 8015c90:	e7db      	b.n	8015c4a <_svfprintf_r+0x9f6>
 8015c92:	42ab      	cmp	r3, r5
 8015c94:	da0e      	bge.n	8015cb4 <_svfprintf_r+0xa60>
 8015c96:	1aed      	subs	r5, r5, r3
 8015c98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015c9a:	785b      	ldrb	r3, [r3, #1]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d012      	beq.n	8015cc6 <_svfprintf_r+0xa72>
 8015ca0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ca2:	3301      	adds	r3, #1
 8015ca4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ca6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015ca8:	3301      	adds	r3, #1
 8015caa:	9313      	str	r3, [sp, #76]	; 0x4c
 8015cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015cae:	781b      	ldrb	r3, [r3, #0]
 8015cb0:	2bff      	cmp	r3, #255	; 0xff
 8015cb2:	d1ee      	bne.n	8015c92 <_svfprintf_r+0xa3e>
 8015cb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015cb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cb8:	189b      	adds	r3, r3, r2
 8015cba:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015cbc:	4353      	muls	r3, r2
 8015cbe:	9a08      	ldr	r2, [sp, #32]
 8015cc0:	189b      	adds	r3, r3, r2
 8015cc2:	9308      	str	r3, [sp, #32]
 8015cc4:	e716      	b.n	8015af4 <_svfprintf_r+0x8a0>
 8015cc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cc8:	3301      	adds	r3, #1
 8015cca:	9310      	str	r3, [sp, #64]	; 0x40
 8015ccc:	e7ee      	b.n	8015cac <_svfprintf_r+0xa58>
 8015cce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015cd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8015cd2:	e7eb      	b.n	8015cac <_svfprintf_r+0xa58>
 8015cd4:	0022      	movs	r2, r4
 8015cd6:	ca08      	ldmia	r2!, {r3}
 8015cd8:	9212      	str	r2, [sp, #72]	; 0x48
 8015cda:	06b2      	lsls	r2, r6, #26
 8015cdc:	d508      	bpl.n	8015cf0 <_svfprintf_r+0xa9c>
 8015cde:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015ce0:	601a      	str	r2, [r3, #0]
 8015ce2:	17d2      	asrs	r2, r2, #31
 8015ce4:	605a      	str	r2, [r3, #4]
 8015ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ce8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8015cea:	9309      	str	r3, [sp, #36]	; 0x24
 8015cec:	f7ff faeb 	bl	80152c6 <_svfprintf_r+0x72>
 8015cf0:	06f2      	lsls	r2, r6, #27
 8015cf2:	d502      	bpl.n	8015cfa <_svfprintf_r+0xaa6>
 8015cf4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015cf6:	601a      	str	r2, [r3, #0]
 8015cf8:	e7f5      	b.n	8015ce6 <_svfprintf_r+0xa92>
 8015cfa:	0672      	lsls	r2, r6, #25
 8015cfc:	d502      	bpl.n	8015d04 <_svfprintf_r+0xab0>
 8015cfe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015d00:	801a      	strh	r2, [r3, #0]
 8015d02:	e7f0      	b.n	8015ce6 <_svfprintf_r+0xa92>
 8015d04:	05b2      	lsls	r2, r6, #22
 8015d06:	d5f5      	bpl.n	8015cf4 <_svfprintf_r+0xaa0>
 8015d08:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015d0a:	701a      	strb	r2, [r3, #0]
 8015d0c:	e7eb      	b.n	8015ce6 <_svfprintf_r+0xa92>
 8015d0e:	2310      	movs	r3, #16
 8015d10:	431e      	orrs	r6, r3
 8015d12:	2220      	movs	r2, #32
 8015d14:	4032      	ands	r2, r6
 8015d16:	d025      	beq.n	8015d64 <_svfprintf_r+0xb10>
 8015d18:	2307      	movs	r3, #7
 8015d1a:	3407      	adds	r4, #7
 8015d1c:	439c      	bics	r4, r3
 8015d1e:	0023      	movs	r3, r4
 8015d20:	3308      	adds	r3, #8
 8015d22:	9312      	str	r3, [sp, #72]	; 0x48
 8015d24:	6823      	ldr	r3, [r4, #0]
 8015d26:	6864      	ldr	r4, [r4, #4]
 8015d28:	9306      	str	r3, [sp, #24]
 8015d2a:	9407      	str	r4, [sp, #28]
 8015d2c:	4bc2      	ldr	r3, [pc, #776]	; (8016038 <_svfprintf_r+0xde4>)
 8015d2e:	401e      	ands	r6, r3
 8015d30:	2300      	movs	r3, #0
 8015d32:	221b      	movs	r2, #27
 8015d34:	a91e      	add	r1, sp, #120	; 0x78
 8015d36:	1852      	adds	r2, r2, r1
 8015d38:	2100      	movs	r1, #0
 8015d3a:	7011      	strb	r1, [r2, #0]
 8015d3c:	9a08      	ldr	r2, [sp, #32]
 8015d3e:	3201      	adds	r2, #1
 8015d40:	d100      	bne.n	8015d44 <_svfprintf_r+0xaf0>
 8015d42:	e0a6      	b.n	8015e92 <_svfprintf_r+0xc3e>
 8015d44:	0032      	movs	r2, r6
 8015d46:	2180      	movs	r1, #128	; 0x80
 8015d48:	9807      	ldr	r0, [sp, #28]
 8015d4a:	438e      	bics	r6, r1
 8015d4c:	9906      	ldr	r1, [sp, #24]
 8015d4e:	4301      	orrs	r1, r0
 8015d50:	d000      	beq.n	8015d54 <_svfprintf_r+0xb00>
 8015d52:	e09e      	b.n	8015e92 <_svfprintf_r+0xc3e>
 8015d54:	9908      	ldr	r1, [sp, #32]
 8015d56:	2900      	cmp	r1, #0
 8015d58:	d100      	bne.n	8015d5c <_svfprintf_r+0xb08>
 8015d5a:	e125      	b.n	8015fa8 <_svfprintf_r+0xd54>
 8015d5c:	2b01      	cmp	r3, #1
 8015d5e:	d000      	beq.n	8015d62 <_svfprintf_r+0xb0e>
 8015d60:	e09a      	b.n	8015e98 <_svfprintf_r+0xc44>
 8015d62:	e518      	b.n	8015796 <_svfprintf_r+0x542>
 8015d64:	1d23      	adds	r3, r4, #4
 8015d66:	9312      	str	r3, [sp, #72]	; 0x48
 8015d68:	2310      	movs	r3, #16
 8015d6a:	4033      	ands	r3, r6
 8015d6c:	d003      	beq.n	8015d76 <_svfprintf_r+0xb22>
 8015d6e:	6823      	ldr	r3, [r4, #0]
 8015d70:	9306      	str	r3, [sp, #24]
 8015d72:	9207      	str	r2, [sp, #28]
 8015d74:	e7da      	b.n	8015d2c <_svfprintf_r+0xad8>
 8015d76:	2240      	movs	r2, #64	; 0x40
 8015d78:	4032      	ands	r2, r6
 8015d7a:	d004      	beq.n	8015d86 <_svfprintf_r+0xb32>
 8015d7c:	6822      	ldr	r2, [r4, #0]
 8015d7e:	b292      	uxth	r2, r2
 8015d80:	9206      	str	r2, [sp, #24]
 8015d82:	9307      	str	r3, [sp, #28]
 8015d84:	e7d2      	b.n	8015d2c <_svfprintf_r+0xad8>
 8015d86:	2380      	movs	r3, #128	; 0x80
 8015d88:	009b      	lsls	r3, r3, #2
 8015d8a:	4033      	ands	r3, r6
 8015d8c:	d002      	beq.n	8015d94 <_svfprintf_r+0xb40>
 8015d8e:	6823      	ldr	r3, [r4, #0]
 8015d90:	b2db      	uxtb	r3, r3
 8015d92:	e7ed      	b.n	8015d70 <_svfprintf_r+0xb1c>
 8015d94:	6822      	ldr	r2, [r4, #0]
 8015d96:	e7f3      	b.n	8015d80 <_svfprintf_r+0xb2c>
 8015d98:	1d23      	adds	r3, r4, #4
 8015d9a:	49a8      	ldr	r1, [pc, #672]	; (801603c <_svfprintf_r+0xde8>)
 8015d9c:	aa25      	add	r2, sp, #148	; 0x94
 8015d9e:	9312      	str	r3, [sp, #72]	; 0x48
 8015da0:	6823      	ldr	r3, [r4, #0]
 8015da2:	8011      	strh	r1, [r2, #0]
 8015da4:	4aa6      	ldr	r2, [pc, #664]	; (8016040 <_svfprintf_r+0xdec>)
 8015da6:	9306      	str	r3, [sp, #24]
 8015da8:	2300      	movs	r3, #0
 8015daa:	921e      	str	r2, [sp, #120]	; 0x78
 8015dac:	2278      	movs	r2, #120	; 0x78
 8015dae:	9307      	str	r3, [sp, #28]
 8015db0:	3302      	adds	r3, #2
 8015db2:	431e      	orrs	r6, r3
 8015db4:	920e      	str	r2, [sp, #56]	; 0x38
 8015db6:	e7bc      	b.n	8015d32 <_svfprintf_r+0xade>
 8015db8:	1d23      	adds	r3, r4, #4
 8015dba:	9312      	str	r3, [sp, #72]	; 0x48
 8015dbc:	6823      	ldr	r3, [r4, #0]
 8015dbe:	2400      	movs	r4, #0
 8015dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8015dc2:	231b      	movs	r3, #27
 8015dc4:	aa1e      	add	r2, sp, #120	; 0x78
 8015dc6:	189b      	adds	r3, r3, r2
 8015dc8:	701c      	strb	r4, [r3, #0]
 8015dca:	9b08      	ldr	r3, [sp, #32]
 8015dcc:	3301      	adds	r3, #1
 8015dce:	d00e      	beq.n	8015dee <_svfprintf_r+0xb9a>
 8015dd0:	9a08      	ldr	r2, [sp, #32]
 8015dd2:	0021      	movs	r1, r4
 8015dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015dd6:	f001 ff79 	bl	8017ccc <memchr>
 8015dda:	900c      	str	r0, [sp, #48]	; 0x30
 8015ddc:	42a0      	cmp	r0, r4
 8015dde:	d100      	bne.n	8015de2 <_svfprintf_r+0xb8e>
 8015de0:	e100      	b.n	8015fe4 <_svfprintf_r+0xd90>
 8015de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015de4:	1a83      	subs	r3, r0, r2
 8015de6:	9308      	str	r3, [sp, #32]
 8015de8:	940c      	str	r4, [sp, #48]	; 0x30
 8015dea:	0023      	movs	r3, r4
 8015dec:	e527      	b.n	801583e <_svfprintf_r+0x5ea>
 8015dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015df0:	f7ea f992 	bl	8000118 <strlen>
 8015df4:	9008      	str	r0, [sp, #32]
 8015df6:	e7f7      	b.n	8015de8 <_svfprintf_r+0xb94>
 8015df8:	2310      	movs	r3, #16
 8015dfa:	431e      	orrs	r6, r3
 8015dfc:	2220      	movs	r2, #32
 8015dfe:	4032      	ands	r2, r6
 8015e00:	d00b      	beq.n	8015e1a <_svfprintf_r+0xbc6>
 8015e02:	2307      	movs	r3, #7
 8015e04:	3407      	adds	r4, #7
 8015e06:	439c      	bics	r4, r3
 8015e08:	0023      	movs	r3, r4
 8015e0a:	3308      	adds	r3, #8
 8015e0c:	9312      	str	r3, [sp, #72]	; 0x48
 8015e0e:	6823      	ldr	r3, [r4, #0]
 8015e10:	6864      	ldr	r4, [r4, #4]
 8015e12:	9306      	str	r3, [sp, #24]
 8015e14:	9407      	str	r4, [sp, #28]
 8015e16:	2301      	movs	r3, #1
 8015e18:	e78b      	b.n	8015d32 <_svfprintf_r+0xade>
 8015e1a:	1d23      	adds	r3, r4, #4
 8015e1c:	9312      	str	r3, [sp, #72]	; 0x48
 8015e1e:	2310      	movs	r3, #16
 8015e20:	4033      	ands	r3, r6
 8015e22:	d003      	beq.n	8015e2c <_svfprintf_r+0xbd8>
 8015e24:	6823      	ldr	r3, [r4, #0]
 8015e26:	9306      	str	r3, [sp, #24]
 8015e28:	9207      	str	r2, [sp, #28]
 8015e2a:	e7f4      	b.n	8015e16 <_svfprintf_r+0xbc2>
 8015e2c:	2240      	movs	r2, #64	; 0x40
 8015e2e:	4032      	ands	r2, r6
 8015e30:	d004      	beq.n	8015e3c <_svfprintf_r+0xbe8>
 8015e32:	6822      	ldr	r2, [r4, #0]
 8015e34:	b292      	uxth	r2, r2
 8015e36:	9206      	str	r2, [sp, #24]
 8015e38:	9307      	str	r3, [sp, #28]
 8015e3a:	e7ec      	b.n	8015e16 <_svfprintf_r+0xbc2>
 8015e3c:	2380      	movs	r3, #128	; 0x80
 8015e3e:	009b      	lsls	r3, r3, #2
 8015e40:	4033      	ands	r3, r6
 8015e42:	d002      	beq.n	8015e4a <_svfprintf_r+0xbf6>
 8015e44:	6823      	ldr	r3, [r4, #0]
 8015e46:	b2db      	uxtb	r3, r3
 8015e48:	e7ed      	b.n	8015e26 <_svfprintf_r+0xbd2>
 8015e4a:	6822      	ldr	r2, [r4, #0]
 8015e4c:	e7f3      	b.n	8015e36 <_svfprintf_r+0xbe2>
 8015e4e:	4b7c      	ldr	r3, [pc, #496]	; (8016040 <_svfprintf_r+0xdec>)
 8015e50:	f7ff fad9 	bl	8015406 <_svfprintf_r+0x1b2>
 8015e54:	1d23      	adds	r3, r4, #4
 8015e56:	9312      	str	r3, [sp, #72]	; 0x48
 8015e58:	2310      	movs	r3, #16
 8015e5a:	4033      	ands	r3, r6
 8015e5c:	d004      	beq.n	8015e68 <_svfprintf_r+0xc14>
 8015e5e:	6823      	ldr	r3, [r4, #0]
 8015e60:	9306      	str	r3, [sp, #24]
 8015e62:	9207      	str	r2, [sp, #28]
 8015e64:	f7ff fadf 	bl	8015426 <_svfprintf_r+0x1d2>
 8015e68:	2240      	movs	r2, #64	; 0x40
 8015e6a:	4032      	ands	r2, r6
 8015e6c:	d005      	beq.n	8015e7a <_svfprintf_r+0xc26>
 8015e6e:	6822      	ldr	r2, [r4, #0]
 8015e70:	b292      	uxth	r2, r2
 8015e72:	9206      	str	r2, [sp, #24]
 8015e74:	9307      	str	r3, [sp, #28]
 8015e76:	f7ff fad6 	bl	8015426 <_svfprintf_r+0x1d2>
 8015e7a:	2380      	movs	r3, #128	; 0x80
 8015e7c:	009b      	lsls	r3, r3, #2
 8015e7e:	4033      	ands	r3, r6
 8015e80:	d002      	beq.n	8015e88 <_svfprintf_r+0xc34>
 8015e82:	6823      	ldr	r3, [r4, #0]
 8015e84:	b2db      	uxtb	r3, r3
 8015e86:	e7eb      	b.n	8015e60 <_svfprintf_r+0xc0c>
 8015e88:	6822      	ldr	r2, [r4, #0]
 8015e8a:	e7f2      	b.n	8015e72 <_svfprintf_r+0xc1e>
 8015e8c:	0032      	movs	r2, r6
 8015e8e:	2301      	movs	r3, #1
 8015e90:	e759      	b.n	8015d46 <_svfprintf_r+0xaf2>
 8015e92:	2b01      	cmp	r3, #1
 8015e94:	d100      	bne.n	8015e98 <_svfprintf_r+0xc44>
 8015e96:	e476      	b.n	8015786 <_svfprintf_r+0x532>
 8015e98:	2b02      	cmp	r3, #2
 8015e9a:	d06b      	beq.n	8015f74 <_svfprintf_r+0xd20>
 8015e9c:	2507      	movs	r5, #7
 8015e9e:	ab58      	add	r3, sp, #352	; 0x160
 8015ea0:	1e5a      	subs	r2, r3, #1
 8015ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8015ea4:	9a06      	ldr	r2, [sp, #24]
 8015ea6:	1e59      	subs	r1, r3, #1
 8015ea8:	402a      	ands	r2, r5
 8015eaa:	3230      	adds	r2, #48	; 0x30
 8015eac:	700a      	strb	r2, [r1, #0]
 8015eae:	9907      	ldr	r1, [sp, #28]
 8015eb0:	074c      	lsls	r4, r1, #29
 8015eb2:	9906      	ldr	r1, [sp, #24]
 8015eb4:	08c8      	lsrs	r0, r1, #3
 8015eb6:	9907      	ldr	r1, [sp, #28]
 8015eb8:	4304      	orrs	r4, r0
 8015eba:	08c9      	lsrs	r1, r1, #3
 8015ebc:	9107      	str	r1, [sp, #28]
 8015ebe:	0021      	movs	r1, r4
 8015ec0:	9807      	ldr	r0, [sp, #28]
 8015ec2:	9406      	str	r4, [sp, #24]
 8015ec4:	4301      	orrs	r1, r0
 8015ec6:	d111      	bne.n	8015eec <_svfprintf_r+0xc98>
 8015ec8:	07f1      	lsls	r1, r6, #31
 8015eca:	d502      	bpl.n	8015ed2 <_svfprintf_r+0xc7e>
 8015ecc:	3b02      	subs	r3, #2
 8015ece:	2a30      	cmp	r2, #48	; 0x30
 8015ed0:	d173      	bne.n	8015fba <_svfprintf_r+0xd66>
 8015ed2:	9b08      	ldr	r3, [sp, #32]
 8015ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ed6:	9317      	str	r3, [sp, #92]	; 0x5c
 8015ed8:	ab58      	add	r3, sp, #352	; 0x160
 8015eda:	1a9b      	subs	r3, r3, r2
 8015edc:	9308      	str	r3, [sp, #32]
 8015ede:	2300      	movs	r3, #0
 8015ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8015ee2:	9310      	str	r3, [sp, #64]	; 0x40
 8015ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ee6:	001d      	movs	r5, r3
 8015ee8:	f7ff fb4b 	bl	8015582 <_svfprintf_r+0x32e>
 8015eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eee:	e7d7      	b.n	8015ea0 <_svfprintf_r+0xc4c>
 8015ef0:	2480      	movs	r4, #128	; 0x80
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	00e4      	lsls	r4, r4, #3
 8015ef6:	930d      	str	r3, [sp, #52]	; 0x34
 8015ef8:	4034      	ands	r4, r6
 8015efa:	ab58      	add	r3, sp, #352	; 0x160
 8015efc:	3b01      	subs	r3, #1
 8015efe:	9309      	str	r3, [sp, #36]	; 0x24
 8015f00:	220a      	movs	r2, #10
 8015f02:	9806      	ldr	r0, [sp, #24]
 8015f04:	9907      	ldr	r1, [sp, #28]
 8015f06:	2300      	movs	r3, #0
 8015f08:	f7ea fb10 	bl	800052c <__aeabi_uldivmod>
 8015f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f0e:	3230      	adds	r2, #48	; 0x30
 8015f10:	701a      	strb	r2, [r3, #0]
 8015f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015f14:	3301      	adds	r3, #1
 8015f16:	930d      	str	r3, [sp, #52]	; 0x34
 8015f18:	2c00      	cmp	r4, #0
 8015f1a:	d01d      	beq.n	8015f58 <_svfprintf_r+0xd04>
 8015f1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	429a      	cmp	r2, r3
 8015f24:	d118      	bne.n	8015f58 <_svfprintf_r+0xd04>
 8015f26:	2aff      	cmp	r2, #255	; 0xff
 8015f28:	d016      	beq.n	8015f58 <_svfprintf_r+0xd04>
 8015f2a:	9b07      	ldr	r3, [sp, #28]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d102      	bne.n	8015f36 <_svfprintf_r+0xce2>
 8015f30:	9b06      	ldr	r3, [sp, #24]
 8015f32:	2b09      	cmp	r3, #9
 8015f34:	d910      	bls.n	8015f58 <_svfprintf_r+0xd04>
 8015f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f38:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015f3a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8015f3c:	1a9b      	subs	r3, r3, r2
 8015f3e:	0018      	movs	r0, r3
 8015f40:	9309      	str	r3, [sp, #36]	; 0x24
 8015f42:	f7fe fa52 	bl	80143ea <strncpy>
 8015f46:	2200      	movs	r2, #0
 8015f48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f4a:	920d      	str	r2, [sp, #52]	; 0x34
 8015f4c:	785b      	ldrb	r3, [r3, #1]
 8015f4e:	1e5a      	subs	r2, r3, #1
 8015f50:	4193      	sbcs	r3, r2
 8015f52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015f54:	18d3      	adds	r3, r2, r3
 8015f56:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f58:	220a      	movs	r2, #10
 8015f5a:	9806      	ldr	r0, [sp, #24]
 8015f5c:	9907      	ldr	r1, [sp, #28]
 8015f5e:	2300      	movs	r3, #0
 8015f60:	f7ea fae4 	bl	800052c <__aeabi_uldivmod>
 8015f64:	9006      	str	r0, [sp, #24]
 8015f66:	9107      	str	r1, [sp, #28]
 8015f68:	9b06      	ldr	r3, [sp, #24]
 8015f6a:	9a07      	ldr	r2, [sp, #28]
 8015f6c:	4313      	orrs	r3, r2
 8015f6e:	d0b0      	beq.n	8015ed2 <_svfprintf_r+0xc7e>
 8015f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f72:	e7c3      	b.n	8015efc <_svfprintf_r+0xca8>
 8015f74:	200f      	movs	r0, #15
 8015f76:	ab58      	add	r3, sp, #352	; 0x160
 8015f78:	9309      	str	r3, [sp, #36]	; 0x24
 8015f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f7c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015f7e:	3b01      	subs	r3, #1
 8015f80:	9309      	str	r3, [sp, #36]	; 0x24
 8015f82:	9b06      	ldr	r3, [sp, #24]
 8015f84:	4003      	ands	r3, r0
 8015f86:	5cd3      	ldrb	r3, [r2, r3]
 8015f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f8a:	7013      	strb	r3, [r2, #0]
 8015f8c:	9b07      	ldr	r3, [sp, #28]
 8015f8e:	0719      	lsls	r1, r3, #28
 8015f90:	9b06      	ldr	r3, [sp, #24]
 8015f92:	091a      	lsrs	r2, r3, #4
 8015f94:	9b07      	ldr	r3, [sp, #28]
 8015f96:	4311      	orrs	r1, r2
 8015f98:	091b      	lsrs	r3, r3, #4
 8015f9a:	9307      	str	r3, [sp, #28]
 8015f9c:	000b      	movs	r3, r1
 8015f9e:	9a07      	ldr	r2, [sp, #28]
 8015fa0:	9106      	str	r1, [sp, #24]
 8015fa2:	4313      	orrs	r3, r2
 8015fa4:	d1e9      	bne.n	8015f7a <_svfprintf_r+0xd26>
 8015fa6:	e794      	b.n	8015ed2 <_svfprintf_r+0xc7e>
 8015fa8:	a958      	add	r1, sp, #352	; 0x160
 8015faa:	9109      	str	r1, [sp, #36]	; 0x24
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d190      	bne.n	8015ed2 <_svfprintf_r+0xc7e>
 8015fb0:	07d3      	lsls	r3, r2, #31
 8015fb2:	d58e      	bpl.n	8015ed2 <_svfprintf_r+0xc7e>
 8015fb4:	23e7      	movs	r3, #231	; 0xe7
 8015fb6:	aa1e      	add	r2, sp, #120	; 0x78
 8015fb8:	189b      	adds	r3, r3, r2
 8015fba:	2230      	movs	r2, #48	; 0x30
 8015fbc:	f7ff fbf0 	bl	80157a0 <_svfprintf_r+0x54c>
 8015fc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d100      	bne.n	8015fc8 <_svfprintf_r+0xd74>
 8015fc6:	e38a      	b.n	80166de <_svfprintf_r+0x148a>
 8015fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fca:	ab3f      	add	r3, sp, #252	; 0xfc
 8015fcc:	701a      	strb	r2, [r3, #0]
 8015fce:	221b      	movs	r2, #27
 8015fd0:	2000      	movs	r0, #0
 8015fd2:	a91e      	add	r1, sp, #120	; 0x78
 8015fd4:	1852      	adds	r2, r2, r1
 8015fd6:	7010      	strb	r0, [r2, #0]
 8015fd8:	9412      	str	r4, [sp, #72]	; 0x48
 8015fda:	f7ff faca 	bl	8015572 <_svfprintf_r+0x31e>
 8015fde:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8015fe0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8015fe2:	e592      	b.n	8015b0a <_svfprintf_r+0x8b6>
 8015fe4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fe6:	e42a      	b.n	801583e <_svfprintf_r+0x5ea>
 8015fe8:	2010      	movs	r0, #16
 8015fea:	1812      	adds	r2, r2, r0
 8015fec:	6078      	str	r0, [r7, #4]
 8015fee:	922e      	str	r2, [sp, #184]	; 0xb8
 8015ff0:	932d      	str	r3, [sp, #180]	; 0xb4
 8015ff2:	2b07      	cmp	r3, #7
 8015ff4:	dd08      	ble.n	8016008 <_svfprintf_r+0xdb4>
 8015ff6:	aa2c      	add	r2, sp, #176	; 0xb0
 8015ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015ffa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ffc:	f002 fa7e 	bl	80184fc <__ssprint_r>
 8016000:	2800      	cmp	r0, #0
 8016002:	d000      	beq.n	8016006 <_svfprintf_r+0xdb2>
 8016004:	e34a      	b.n	801669c <_svfprintf_r+0x1448>
 8016006:	a92f      	add	r1, sp, #188	; 0xbc
 8016008:	3c10      	subs	r4, #16
 801600a:	000f      	movs	r7, r1
 801600c:	f7ff fad8 	bl	80155c0 <_svfprintf_r+0x36c>
 8016010:	2010      	movs	r0, #16
 8016012:	1812      	adds	r2, r2, r0
 8016014:	6078      	str	r0, [r7, #4]
 8016016:	922e      	str	r2, [sp, #184]	; 0xb8
 8016018:	932d      	str	r3, [sp, #180]	; 0xb4
 801601a:	2b07      	cmp	r3, #7
 801601c:	dd08      	ble.n	8016030 <_svfprintf_r+0xddc>
 801601e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016022:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016024:	f002 fa6a 	bl	80184fc <__ssprint_r>
 8016028:	2800      	cmp	r0, #0
 801602a:	d000      	beq.n	801602e <_svfprintf_r+0xdda>
 801602c:	e336      	b.n	801669c <_svfprintf_r+0x1448>
 801602e:	a92f      	add	r1, sp, #188	; 0xbc
 8016030:	3c10      	subs	r4, #16
 8016032:	000f      	movs	r7, r1
 8016034:	f7ff fb24 	bl	8015680 <_svfprintf_r+0x42c>
 8016038:	fffffbff 	.word	0xfffffbff
 801603c:	00007830 	.word	0x00007830
 8016040:	0801b898 	.word	0x0801b898
 8016044:	2010      	movs	r0, #16
 8016046:	1812      	adds	r2, r2, r0
 8016048:	6078      	str	r0, [r7, #4]
 801604a:	922e      	str	r2, [sp, #184]	; 0xb8
 801604c:	932d      	str	r3, [sp, #180]	; 0xb4
 801604e:	2b07      	cmp	r3, #7
 8016050:	dd08      	ble.n	8016064 <_svfprintf_r+0xe10>
 8016052:	aa2c      	add	r2, sp, #176	; 0xb0
 8016054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016056:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016058:	f002 fa50 	bl	80184fc <__ssprint_r>
 801605c:	2800      	cmp	r0, #0
 801605e:	d000      	beq.n	8016062 <_svfprintf_r+0xe0e>
 8016060:	e31c      	b.n	801669c <_svfprintf_r+0x1448>
 8016062:	a92f      	add	r1, sp, #188	; 0xbc
 8016064:	3c10      	subs	r4, #16
 8016066:	000f      	movs	r7, r1
 8016068:	f7ff fb2c 	bl	80156c4 <_svfprintf_r+0x470>
 801606c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801606e:	2b65      	cmp	r3, #101	; 0x65
 8016070:	dc00      	bgt.n	8016074 <_svfprintf_r+0xe20>
 8016072:	e259      	b.n	8016528 <_svfprintf_r+0x12d4>
 8016074:	2200      	movs	r2, #0
 8016076:	2300      	movs	r3, #0
 8016078:	981a      	ldr	r0, [sp, #104]	; 0x68
 801607a:	9919      	ldr	r1, [sp, #100]	; 0x64
 801607c:	f7ea f9ee 	bl	800045c <__aeabi_dcmpeq>
 8016080:	2800      	cmp	r0, #0
 8016082:	d07c      	beq.n	801617e <_svfprintf_r+0xf2a>
 8016084:	4b81      	ldr	r3, [pc, #516]	; (801628c <_svfprintf_r+0x1038>)
 8016086:	603b      	str	r3, [r7, #0]
 8016088:	2301      	movs	r3, #1
 801608a:	607b      	str	r3, [r7, #4]
 801608c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801608e:	3708      	adds	r7, #8
 8016090:	3301      	adds	r3, #1
 8016092:	932e      	str	r3, [sp, #184]	; 0xb8
 8016094:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016096:	9308      	str	r3, [sp, #32]
 8016098:	3301      	adds	r3, #1
 801609a:	932d      	str	r3, [sp, #180]	; 0xb4
 801609c:	2b07      	cmp	r3, #7
 801609e:	dd08      	ble.n	80160b2 <_svfprintf_r+0xe5e>
 80160a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80160a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160a6:	f002 fa29 	bl	80184fc <__ssprint_r>
 80160aa:	2800      	cmp	r0, #0
 80160ac:	d000      	beq.n	80160b0 <_svfprintf_r+0xe5c>
 80160ae:	e2f5      	b.n	801669c <_svfprintf_r+0x1448>
 80160b0:	af2f      	add	r7, sp, #188	; 0xbc
 80160b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80160b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80160b6:	4293      	cmp	r3, r2
 80160b8:	db01      	blt.n	80160be <_svfprintf_r+0xe6a>
 80160ba:	07f3      	lsls	r3, r6, #31
 80160bc:	d51d      	bpl.n	80160fa <_svfprintf_r+0xea6>
 80160be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80160c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80160c2:	4694      	mov	ip, r2
 80160c4:	603b      	str	r3, [r7, #0]
 80160c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160c8:	607b      	str	r3, [r7, #4]
 80160ca:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80160cc:	3708      	adds	r7, #8
 80160ce:	4463      	add	r3, ip
 80160d0:	932e      	str	r3, [sp, #184]	; 0xb8
 80160d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160d4:	9308      	str	r3, [sp, #32]
 80160d6:	3301      	adds	r3, #1
 80160d8:	932d      	str	r3, [sp, #180]	; 0xb4
 80160da:	2b07      	cmp	r3, #7
 80160dc:	dd08      	ble.n	80160f0 <_svfprintf_r+0xe9c>
 80160de:	aa2c      	add	r2, sp, #176	; 0xb0
 80160e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160e4:	f002 fa0a 	bl	80184fc <__ssprint_r>
 80160e8:	2800      	cmp	r0, #0
 80160ea:	d000      	beq.n	80160ee <_svfprintf_r+0xe9a>
 80160ec:	e2d6      	b.n	801669c <_svfprintf_r+0x1448>
 80160ee:	af2f      	add	r7, sp, #188	; 0xbc
 80160f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160f2:	2510      	movs	r5, #16
 80160f4:	1e5c      	subs	r4, r3, #1
 80160f6:	2c00      	cmp	r4, #0
 80160f8:	dc2f      	bgt.n	801615a <_svfprintf_r+0xf06>
 80160fa:	0773      	lsls	r3, r6, #29
 80160fc:	d500      	bpl.n	8016100 <_svfprintf_r+0xeac>
 80160fe:	e2af      	b.n	8016660 <_svfprintf_r+0x140c>
 8016100:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016102:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016104:	4293      	cmp	r3, r2
 8016106:	da00      	bge.n	801610a <_svfprintf_r+0xeb6>
 8016108:	0013      	movs	r3, r2
 801610a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801610c:	18d3      	adds	r3, r2, r3
 801610e:	9315      	str	r3, [sp, #84]	; 0x54
 8016110:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016112:	9308      	str	r3, [sp, #32]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d007      	beq.n	8016128 <_svfprintf_r+0xed4>
 8016118:	aa2c      	add	r2, sp, #176	; 0xb0
 801611a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801611c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801611e:	f002 f9ed 	bl	80184fc <__ssprint_r>
 8016122:	2800      	cmp	r0, #0
 8016124:	d000      	beq.n	8016128 <_svfprintf_r+0xed4>
 8016126:	e2b9      	b.n	801669c <_svfprintf_r+0x1448>
 8016128:	2300      	movs	r3, #0
 801612a:	932d      	str	r3, [sp, #180]	; 0xb4
 801612c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801612e:	2b00      	cmp	r3, #0
 8016130:	d000      	beq.n	8016134 <_svfprintf_r+0xee0>
 8016132:	e2cf      	b.n	80166d4 <_svfprintf_r+0x1480>
 8016134:	af2f      	add	r7, sp, #188	; 0xbc
 8016136:	e5d6      	b.n	8015ce6 <_svfprintf_r+0xa92>
 8016138:	3210      	adds	r2, #16
 801613a:	607d      	str	r5, [r7, #4]
 801613c:	922e      	str	r2, [sp, #184]	; 0xb8
 801613e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016140:	2b07      	cmp	r3, #7
 8016142:	dd08      	ble.n	8016156 <_svfprintf_r+0xf02>
 8016144:	aa2c      	add	r2, sp, #176	; 0xb0
 8016146:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016148:	980a      	ldr	r0, [sp, #40]	; 0x28
 801614a:	f002 f9d7 	bl	80184fc <__ssprint_r>
 801614e:	2800      	cmp	r0, #0
 8016150:	d000      	beq.n	8016154 <_svfprintf_r+0xf00>
 8016152:	e2a3      	b.n	801669c <_svfprintf_r+0x1448>
 8016154:	a92f      	add	r1, sp, #188	; 0xbc
 8016156:	000f      	movs	r7, r1
 8016158:	3c10      	subs	r4, #16
 801615a:	0039      	movs	r1, r7
 801615c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801615e:	484c      	ldr	r0, [pc, #304]	; (8016290 <_svfprintf_r+0x103c>)
 8016160:	9308      	str	r3, [sp, #32]
 8016162:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016164:	3301      	adds	r3, #1
 8016166:	3108      	adds	r1, #8
 8016168:	6038      	str	r0, [r7, #0]
 801616a:	2c10      	cmp	r4, #16
 801616c:	dce4      	bgt.n	8016138 <_svfprintf_r+0xee4>
 801616e:	607c      	str	r4, [r7, #4]
 8016170:	18a4      	adds	r4, r4, r2
 8016172:	942e      	str	r4, [sp, #184]	; 0xb8
 8016174:	932d      	str	r3, [sp, #180]	; 0xb4
 8016176:	000f      	movs	r7, r1
 8016178:	2b07      	cmp	r3, #7
 801617a:	ddbe      	ble.n	80160fa <_svfprintf_r+0xea6>
 801617c:	e06a      	b.n	8016254 <_svfprintf_r+0x1000>
 801617e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016180:	2b00      	cmp	r3, #0
 8016182:	dd00      	ble.n	8016186 <_svfprintf_r+0xf32>
 8016184:	e086      	b.n	8016294 <_svfprintf_r+0x1040>
 8016186:	4b41      	ldr	r3, [pc, #260]	; (801628c <_svfprintf_r+0x1038>)
 8016188:	603b      	str	r3, [r7, #0]
 801618a:	2301      	movs	r3, #1
 801618c:	607b      	str	r3, [r7, #4]
 801618e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016190:	3708      	adds	r7, #8
 8016192:	3301      	adds	r3, #1
 8016194:	932e      	str	r3, [sp, #184]	; 0xb8
 8016196:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016198:	9308      	str	r3, [sp, #32]
 801619a:	3301      	adds	r3, #1
 801619c:	932d      	str	r3, [sp, #180]	; 0xb4
 801619e:	2b07      	cmp	r3, #7
 80161a0:	dd08      	ble.n	80161b4 <_svfprintf_r+0xf60>
 80161a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80161a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161a8:	f002 f9a8 	bl	80184fc <__ssprint_r>
 80161ac:	2800      	cmp	r0, #0
 80161ae:	d000      	beq.n	80161b2 <_svfprintf_r+0xf5e>
 80161b0:	e274      	b.n	801669c <_svfprintf_r+0x1448>
 80161b2:	af2f      	add	r7, sp, #188	; 0xbc
 80161b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d104      	bne.n	80161c4 <_svfprintf_r+0xf70>
 80161ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d101      	bne.n	80161c4 <_svfprintf_r+0xf70>
 80161c0:	07f3      	lsls	r3, r6, #31
 80161c2:	d59a      	bpl.n	80160fa <_svfprintf_r+0xea6>
 80161c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80161c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80161c8:	4694      	mov	ip, r2
 80161ca:	603b      	str	r3, [r7, #0]
 80161cc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80161ce:	607b      	str	r3, [r7, #4]
 80161d0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161d2:	3708      	adds	r7, #8
 80161d4:	4463      	add	r3, ip
 80161d6:	932e      	str	r3, [sp, #184]	; 0xb8
 80161d8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161da:	9308      	str	r3, [sp, #32]
 80161dc:	3301      	adds	r3, #1
 80161de:	932d      	str	r3, [sp, #180]	; 0xb4
 80161e0:	2b07      	cmp	r3, #7
 80161e2:	dd08      	ble.n	80161f6 <_svfprintf_r+0xfa2>
 80161e4:	aa2c      	add	r2, sp, #176	; 0xb0
 80161e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161e8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161ea:	f002 f987 	bl	80184fc <__ssprint_r>
 80161ee:	2800      	cmp	r0, #0
 80161f0:	d000      	beq.n	80161f4 <_svfprintf_r+0xfa0>
 80161f2:	e253      	b.n	801669c <_svfprintf_r+0x1448>
 80161f4:	af2f      	add	r7, sp, #188	; 0xbc
 80161f6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 80161f8:	2c00      	cmp	r4, #0
 80161fa:	da1a      	bge.n	8016232 <_svfprintf_r+0xfde>
 80161fc:	0039      	movs	r1, r7
 80161fe:	2510      	movs	r5, #16
 8016200:	4264      	negs	r4, r4
 8016202:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016204:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8016206:	9308      	str	r3, [sp, #32]
 8016208:	1c5a      	adds	r2, r3, #1
 801620a:	4b21      	ldr	r3, [pc, #132]	; (8016290 <_svfprintf_r+0x103c>)
 801620c:	3708      	adds	r7, #8
 801620e:	600b      	str	r3, [r1, #0]
 8016210:	2c10      	cmp	r4, #16
 8016212:	dc29      	bgt.n	8016268 <_svfprintf_r+0x1014>
 8016214:	604c      	str	r4, [r1, #4]
 8016216:	1824      	adds	r4, r4, r0
 8016218:	942e      	str	r4, [sp, #184]	; 0xb8
 801621a:	922d      	str	r2, [sp, #180]	; 0xb4
 801621c:	2a07      	cmp	r2, #7
 801621e:	dd08      	ble.n	8016232 <_svfprintf_r+0xfde>
 8016220:	aa2c      	add	r2, sp, #176	; 0xb0
 8016222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016224:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016226:	f002 f969 	bl	80184fc <__ssprint_r>
 801622a:	2800      	cmp	r0, #0
 801622c:	d000      	beq.n	8016230 <_svfprintf_r+0xfdc>
 801622e:	e235      	b.n	801669c <_svfprintf_r+0x1448>
 8016230:	af2f      	add	r7, sp, #188	; 0xbc
 8016232:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016236:	468c      	mov	ip, r1
 8016238:	603b      	str	r3, [r7, #0]
 801623a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801623c:	607b      	str	r3, [r7, #4]
 801623e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016240:	4463      	add	r3, ip
 8016242:	932e      	str	r3, [sp, #184]	; 0xb8
 8016244:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016246:	1c5a      	adds	r2, r3, #1
 8016248:	9308      	str	r3, [sp, #32]
 801624a:	922d      	str	r2, [sp, #180]	; 0xb4
 801624c:	2a07      	cmp	r2, #7
 801624e:	dc01      	bgt.n	8016254 <_svfprintf_r+0x1000>
 8016250:	f7ff fa6c 	bl	801572c <_svfprintf_r+0x4d8>
 8016254:	aa2c      	add	r2, sp, #176	; 0xb0
 8016256:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016258:	980a      	ldr	r0, [sp, #40]	; 0x28
 801625a:	f002 f94f 	bl	80184fc <__ssprint_r>
 801625e:	2800      	cmp	r0, #0
 8016260:	d000      	beq.n	8016264 <_svfprintf_r+0x1010>
 8016262:	e21b      	b.n	801669c <_svfprintf_r+0x1448>
 8016264:	af2f      	add	r7, sp, #188	; 0xbc
 8016266:	e748      	b.n	80160fa <_svfprintf_r+0xea6>
 8016268:	3010      	adds	r0, #16
 801626a:	604d      	str	r5, [r1, #4]
 801626c:	902e      	str	r0, [sp, #184]	; 0xb8
 801626e:	922d      	str	r2, [sp, #180]	; 0xb4
 8016270:	2a07      	cmp	r2, #7
 8016272:	dd08      	ble.n	8016286 <_svfprintf_r+0x1032>
 8016274:	aa2c      	add	r2, sp, #176	; 0xb0
 8016276:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016278:	980a      	ldr	r0, [sp, #40]	; 0x28
 801627a:	f002 f93f 	bl	80184fc <__ssprint_r>
 801627e:	2800      	cmp	r0, #0
 8016280:	d000      	beq.n	8016284 <_svfprintf_r+0x1030>
 8016282:	e20b      	b.n	801669c <_svfprintf_r+0x1448>
 8016284:	af2f      	add	r7, sp, #188	; 0xbc
 8016286:	3c10      	subs	r4, #16
 8016288:	0039      	movs	r1, r7
 801628a:	e7ba      	b.n	8016202 <_svfprintf_r+0xfae>
 801628c:	0801b8ba 	.word	0x0801b8ba
 8016290:	0801b8cc 	.word	0x0801b8cc
 8016294:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016296:	002c      	movs	r4, r5
 8016298:	429d      	cmp	r5, r3
 801629a:	dd00      	ble.n	801629e <_svfprintf_r+0x104a>
 801629c:	001c      	movs	r4, r3
 801629e:	2c00      	cmp	r4, #0
 80162a0:	dd15      	ble.n	80162ce <_svfprintf_r+0x107a>
 80162a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162a4:	607c      	str	r4, [r7, #4]
 80162a6:	603b      	str	r3, [r7, #0]
 80162a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80162aa:	3708      	adds	r7, #8
 80162ac:	18e3      	adds	r3, r4, r3
 80162ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80162b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80162b2:	9308      	str	r3, [sp, #32]
 80162b4:	3301      	adds	r3, #1
 80162b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80162b8:	2b07      	cmp	r3, #7
 80162ba:	dd08      	ble.n	80162ce <_svfprintf_r+0x107a>
 80162bc:	aa2c      	add	r2, sp, #176	; 0xb0
 80162be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80162c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80162c2:	f002 f91b 	bl	80184fc <__ssprint_r>
 80162c6:	2800      	cmp	r0, #0
 80162c8:	d000      	beq.n	80162cc <_svfprintf_r+0x1078>
 80162ca:	e1e7      	b.n	801669c <_svfprintf_r+0x1448>
 80162cc:	af2f      	add	r7, sp, #188	; 0xbc
 80162ce:	43e3      	mvns	r3, r4
 80162d0:	17db      	asrs	r3, r3, #31
 80162d2:	401c      	ands	r4, r3
 80162d4:	1b2c      	subs	r4, r5, r4
 80162d6:	2c00      	cmp	r4, #0
 80162d8:	dd1a      	ble.n	8016310 <_svfprintf_r+0x10bc>
 80162da:	0039      	movs	r1, r7
 80162dc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80162de:	48d4      	ldr	r0, [pc, #848]	; (8016630 <_svfprintf_r+0x13dc>)
 80162e0:	9308      	str	r3, [sp, #32]
 80162e2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80162e4:	3301      	adds	r3, #1
 80162e6:	3108      	adds	r1, #8
 80162e8:	6038      	str	r0, [r7, #0]
 80162ea:	2c10      	cmp	r4, #16
 80162ec:	dd00      	ble.n	80162f0 <_svfprintf_r+0x109c>
 80162ee:	e089      	b.n	8016404 <_svfprintf_r+0x11b0>
 80162f0:	607c      	str	r4, [r7, #4]
 80162f2:	18a4      	adds	r4, r4, r2
 80162f4:	942e      	str	r4, [sp, #184]	; 0xb8
 80162f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80162f8:	000f      	movs	r7, r1
 80162fa:	2b07      	cmp	r3, #7
 80162fc:	dd08      	ble.n	8016310 <_svfprintf_r+0x10bc>
 80162fe:	aa2c      	add	r2, sp, #176	; 0xb0
 8016300:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016302:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016304:	f002 f8fa 	bl	80184fc <__ssprint_r>
 8016308:	2800      	cmp	r0, #0
 801630a:	d000      	beq.n	801630e <_svfprintf_r+0x10ba>
 801630c:	e1c6      	b.n	801669c <_svfprintf_r+0x1448>
 801630e:	af2f      	add	r7, sp, #188	; 0xbc
 8016310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016312:	195d      	adds	r5, r3, r5
 8016314:	0573      	lsls	r3, r6, #21
 8016316:	d50d      	bpl.n	8016334 <_svfprintf_r+0x10e0>
 8016318:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801631a:	2b00      	cmp	r3, #0
 801631c:	d000      	beq.n	8016320 <_svfprintf_r+0x10cc>
 801631e:	e084      	b.n	801642a <_svfprintf_r+0x11d6>
 8016320:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016322:	2b00      	cmp	r3, #0
 8016324:	d000      	beq.n	8016328 <_svfprintf_r+0x10d4>
 8016326:	e083      	b.n	8016430 <_svfprintf_r+0x11dc>
 8016328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801632a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801632c:	189b      	adds	r3, r3, r2
 801632e:	429d      	cmp	r5, r3
 8016330:	d900      	bls.n	8016334 <_svfprintf_r+0x10e0>
 8016332:	001d      	movs	r5, r3
 8016334:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016336:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016338:	4293      	cmp	r3, r2
 801633a:	db01      	blt.n	8016340 <_svfprintf_r+0x10ec>
 801633c:	07f3      	lsls	r3, r6, #31
 801633e:	d518      	bpl.n	8016372 <_svfprintf_r+0x111e>
 8016340:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016342:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016344:	4694      	mov	ip, r2
 8016346:	603b      	str	r3, [r7, #0]
 8016348:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801634a:	607b      	str	r3, [r7, #4]
 801634c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801634e:	3708      	adds	r7, #8
 8016350:	4463      	add	r3, ip
 8016352:	932e      	str	r3, [sp, #184]	; 0xb8
 8016354:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016356:	9308      	str	r3, [sp, #32]
 8016358:	3301      	adds	r3, #1
 801635a:	932d      	str	r3, [sp, #180]	; 0xb4
 801635c:	2b07      	cmp	r3, #7
 801635e:	dd08      	ble.n	8016372 <_svfprintf_r+0x111e>
 8016360:	aa2c      	add	r2, sp, #176	; 0xb0
 8016362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016364:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016366:	f002 f8c9 	bl	80184fc <__ssprint_r>
 801636a:	2800      	cmp	r0, #0
 801636c:	d000      	beq.n	8016370 <_svfprintf_r+0x111c>
 801636e:	e195      	b.n	801669c <_svfprintf_r+0x1448>
 8016370:	af2f      	add	r7, sp, #188	; 0xbc
 8016372:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016376:	4694      	mov	ip, r2
 8016378:	9926      	ldr	r1, [sp, #152]	; 0x98
 801637a:	4463      	add	r3, ip
 801637c:	1b5b      	subs	r3, r3, r5
 801637e:	1a54      	subs	r4, r2, r1
 8016380:	429c      	cmp	r4, r3
 8016382:	dd00      	ble.n	8016386 <_svfprintf_r+0x1132>
 8016384:	001c      	movs	r4, r3
 8016386:	2c00      	cmp	r4, #0
 8016388:	dd14      	ble.n	80163b4 <_svfprintf_r+0x1160>
 801638a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801638c:	603d      	str	r5, [r7, #0]
 801638e:	18e3      	adds	r3, r4, r3
 8016390:	932e      	str	r3, [sp, #184]	; 0xb8
 8016392:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016394:	607c      	str	r4, [r7, #4]
 8016396:	9308      	str	r3, [sp, #32]
 8016398:	3301      	adds	r3, #1
 801639a:	932d      	str	r3, [sp, #180]	; 0xb4
 801639c:	3708      	adds	r7, #8
 801639e:	2b07      	cmp	r3, #7
 80163a0:	dd08      	ble.n	80163b4 <_svfprintf_r+0x1160>
 80163a2:	aa2c      	add	r2, sp, #176	; 0xb0
 80163a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163a8:	f002 f8a8 	bl	80184fc <__ssprint_r>
 80163ac:	2800      	cmp	r0, #0
 80163ae:	d000      	beq.n	80163b2 <_svfprintf_r+0x115e>
 80163b0:	e174      	b.n	801669c <_svfprintf_r+0x1448>
 80163b2:	af2f      	add	r7, sp, #188	; 0xbc
 80163b4:	43e3      	mvns	r3, r4
 80163b6:	17db      	asrs	r3, r3, #31
 80163b8:	401c      	ands	r4, r3
 80163ba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80163bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163be:	2510      	movs	r5, #16
 80163c0:	1a9b      	subs	r3, r3, r2
 80163c2:	1b1c      	subs	r4, r3, r4
 80163c4:	2c00      	cmp	r4, #0
 80163c6:	dc00      	bgt.n	80163ca <_svfprintf_r+0x1176>
 80163c8:	e697      	b.n	80160fa <_svfprintf_r+0xea6>
 80163ca:	0039      	movs	r1, r7
 80163cc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80163ce:	4898      	ldr	r0, [pc, #608]	; (8016630 <_svfprintf_r+0x13dc>)
 80163d0:	9308      	str	r3, [sp, #32]
 80163d2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80163d4:	3301      	adds	r3, #1
 80163d6:	3108      	adds	r1, #8
 80163d8:	6038      	str	r0, [r7, #0]
 80163da:	2c10      	cmp	r4, #16
 80163dc:	dc00      	bgt.n	80163e0 <_svfprintf_r+0x118c>
 80163de:	e6c6      	b.n	801616e <_svfprintf_r+0xf1a>
 80163e0:	3210      	adds	r2, #16
 80163e2:	607d      	str	r5, [r7, #4]
 80163e4:	922e      	str	r2, [sp, #184]	; 0xb8
 80163e6:	932d      	str	r3, [sp, #180]	; 0xb4
 80163e8:	2b07      	cmp	r3, #7
 80163ea:	dd08      	ble.n	80163fe <_svfprintf_r+0x11aa>
 80163ec:	aa2c      	add	r2, sp, #176	; 0xb0
 80163ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80163f2:	f002 f883 	bl	80184fc <__ssprint_r>
 80163f6:	2800      	cmp	r0, #0
 80163f8:	d000      	beq.n	80163fc <_svfprintf_r+0x11a8>
 80163fa:	e14f      	b.n	801669c <_svfprintf_r+0x1448>
 80163fc:	a92f      	add	r1, sp, #188	; 0xbc
 80163fe:	3c10      	subs	r4, #16
 8016400:	000f      	movs	r7, r1
 8016402:	e7e2      	b.n	80163ca <_svfprintf_r+0x1176>
 8016404:	2010      	movs	r0, #16
 8016406:	1812      	adds	r2, r2, r0
 8016408:	6078      	str	r0, [r7, #4]
 801640a:	922e      	str	r2, [sp, #184]	; 0xb8
 801640c:	932d      	str	r3, [sp, #180]	; 0xb4
 801640e:	2b07      	cmp	r3, #7
 8016410:	dd08      	ble.n	8016424 <_svfprintf_r+0x11d0>
 8016412:	aa2c      	add	r2, sp, #176	; 0xb0
 8016414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016416:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016418:	f002 f870 	bl	80184fc <__ssprint_r>
 801641c:	2800      	cmp	r0, #0
 801641e:	d000      	beq.n	8016422 <_svfprintf_r+0x11ce>
 8016420:	e13c      	b.n	801669c <_svfprintf_r+0x1448>
 8016422:	a92f      	add	r1, sp, #188	; 0xbc
 8016424:	3c10      	subs	r4, #16
 8016426:	000f      	movs	r7, r1
 8016428:	e757      	b.n	80162da <_svfprintf_r+0x1086>
 801642a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801642c:	2b00      	cmp	r3, #0
 801642e:	d061      	beq.n	80164f4 <_svfprintf_r+0x12a0>
 8016430:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016432:	3b01      	subs	r3, #1
 8016434:	9310      	str	r3, [sp, #64]	; 0x40
 8016436:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016438:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801643a:	4694      	mov	ip, r2
 801643c:	603b      	str	r3, [r7, #0]
 801643e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016440:	607b      	str	r3, [r7, #4]
 8016442:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016444:	3708      	adds	r7, #8
 8016446:	4463      	add	r3, ip
 8016448:	932e      	str	r3, [sp, #184]	; 0xb8
 801644a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801644c:	9308      	str	r3, [sp, #32]
 801644e:	3301      	adds	r3, #1
 8016450:	932d      	str	r3, [sp, #180]	; 0xb4
 8016452:	2b07      	cmp	r3, #7
 8016454:	dd08      	ble.n	8016468 <_svfprintf_r+0x1214>
 8016456:	aa2c      	add	r2, sp, #176	; 0xb0
 8016458:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801645a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801645c:	f002 f84e 	bl	80184fc <__ssprint_r>
 8016460:	2800      	cmp	r0, #0
 8016462:	d000      	beq.n	8016466 <_svfprintf_r+0x1212>
 8016464:	e11a      	b.n	801669c <_svfprintf_r+0x1448>
 8016466:	af2f      	add	r7, sp, #188	; 0xbc
 8016468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801646a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801646c:	189b      	adds	r3, r3, r2
 801646e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016470:	1b5b      	subs	r3, r3, r5
 8016472:	7814      	ldrb	r4, [r2, #0]
 8016474:	429c      	cmp	r4, r3
 8016476:	dd00      	ble.n	801647a <_svfprintf_r+0x1226>
 8016478:	001c      	movs	r4, r3
 801647a:	2c00      	cmp	r4, #0
 801647c:	dd14      	ble.n	80164a8 <_svfprintf_r+0x1254>
 801647e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016480:	603d      	str	r5, [r7, #0]
 8016482:	18e3      	adds	r3, r4, r3
 8016484:	932e      	str	r3, [sp, #184]	; 0xb8
 8016486:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016488:	607c      	str	r4, [r7, #4]
 801648a:	9308      	str	r3, [sp, #32]
 801648c:	3301      	adds	r3, #1
 801648e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016490:	3708      	adds	r7, #8
 8016492:	2b07      	cmp	r3, #7
 8016494:	dd08      	ble.n	80164a8 <_svfprintf_r+0x1254>
 8016496:	aa2c      	add	r2, sp, #176	; 0xb0
 8016498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801649a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801649c:	f002 f82e 	bl	80184fc <__ssprint_r>
 80164a0:	2800      	cmp	r0, #0
 80164a2:	d000      	beq.n	80164a6 <_svfprintf_r+0x1252>
 80164a4:	e0fa      	b.n	801669c <_svfprintf_r+0x1448>
 80164a6:	af2f      	add	r7, sp, #188	; 0xbc
 80164a8:	43e3      	mvns	r3, r4
 80164aa:	17db      	asrs	r3, r3, #31
 80164ac:	401c      	ands	r4, r3
 80164ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80164b0:	781b      	ldrb	r3, [r3, #0]
 80164b2:	1b1c      	subs	r4, r3, r4
 80164b4:	2c00      	cmp	r4, #0
 80164b6:	dd19      	ble.n	80164ec <_svfprintf_r+0x1298>
 80164b8:	0039      	movs	r1, r7
 80164ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80164bc:	485c      	ldr	r0, [pc, #368]	; (8016630 <_svfprintf_r+0x13dc>)
 80164be:	9308      	str	r3, [sp, #32]
 80164c0:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80164c2:	3301      	adds	r3, #1
 80164c4:	3108      	adds	r1, #8
 80164c6:	6038      	str	r0, [r7, #0]
 80164c8:	2c10      	cmp	r4, #16
 80164ca:	dc1a      	bgt.n	8016502 <_svfprintf_r+0x12ae>
 80164cc:	607c      	str	r4, [r7, #4]
 80164ce:	18a4      	adds	r4, r4, r2
 80164d0:	942e      	str	r4, [sp, #184]	; 0xb8
 80164d2:	932d      	str	r3, [sp, #180]	; 0xb4
 80164d4:	000f      	movs	r7, r1
 80164d6:	2b07      	cmp	r3, #7
 80164d8:	dd08      	ble.n	80164ec <_svfprintf_r+0x1298>
 80164da:	aa2c      	add	r2, sp, #176	; 0xb0
 80164dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164de:	980a      	ldr	r0, [sp, #40]	; 0x28
 80164e0:	f002 f80c 	bl	80184fc <__ssprint_r>
 80164e4:	2800      	cmp	r0, #0
 80164e6:	d000      	beq.n	80164ea <_svfprintf_r+0x1296>
 80164e8:	e0d8      	b.n	801669c <_svfprintf_r+0x1448>
 80164ea:	af2f      	add	r7, sp, #188	; 0xbc
 80164ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80164ee:	781b      	ldrb	r3, [r3, #0]
 80164f0:	18ed      	adds	r5, r5, r3
 80164f2:	e711      	b.n	8016318 <_svfprintf_r+0x10c4>
 80164f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80164f6:	3b01      	subs	r3, #1
 80164f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80164fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164fc:	3b01      	subs	r3, #1
 80164fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8016500:	e799      	b.n	8016436 <_svfprintf_r+0x11e2>
 8016502:	2010      	movs	r0, #16
 8016504:	1812      	adds	r2, r2, r0
 8016506:	6078      	str	r0, [r7, #4]
 8016508:	922e      	str	r2, [sp, #184]	; 0xb8
 801650a:	932d      	str	r3, [sp, #180]	; 0xb4
 801650c:	2b07      	cmp	r3, #7
 801650e:	dd08      	ble.n	8016522 <_svfprintf_r+0x12ce>
 8016510:	aa2c      	add	r2, sp, #176	; 0xb0
 8016512:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016514:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016516:	f001 fff1 	bl	80184fc <__ssprint_r>
 801651a:	2800      	cmp	r0, #0
 801651c:	d000      	beq.n	8016520 <_svfprintf_r+0x12cc>
 801651e:	e0bd      	b.n	801669c <_svfprintf_r+0x1448>
 8016520:	a92f      	add	r1, sp, #188	; 0xbc
 8016522:	3c10      	subs	r4, #16
 8016524:	000f      	movs	r7, r1
 8016526:	e7c7      	b.n	80164b8 <_svfprintf_r+0x1264>
 8016528:	003c      	movs	r4, r7
 801652a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801652c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801652e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016530:	9308      	str	r3, [sp, #32]
 8016532:	3101      	adds	r1, #1
 8016534:	3301      	adds	r3, #1
 8016536:	3408      	adds	r4, #8
 8016538:	2a01      	cmp	r2, #1
 801653a:	dc03      	bgt.n	8016544 <_svfprintf_r+0x12f0>
 801653c:	2201      	movs	r2, #1
 801653e:	4216      	tst	r6, r2
 8016540:	d100      	bne.n	8016544 <_svfprintf_r+0x12f0>
 8016542:	e088      	b.n	8016656 <_svfprintf_r+0x1402>
 8016544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016546:	912e      	str	r1, [sp, #184]	; 0xb8
 8016548:	603a      	str	r2, [r7, #0]
 801654a:	2201      	movs	r2, #1
 801654c:	932d      	str	r3, [sp, #180]	; 0xb4
 801654e:	607a      	str	r2, [r7, #4]
 8016550:	2b07      	cmp	r3, #7
 8016552:	dd08      	ble.n	8016566 <_svfprintf_r+0x1312>
 8016554:	aa2c      	add	r2, sp, #176	; 0xb0
 8016556:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016558:	980a      	ldr	r0, [sp, #40]	; 0x28
 801655a:	f001 ffcf 	bl	80184fc <__ssprint_r>
 801655e:	2800      	cmp	r0, #0
 8016560:	d000      	beq.n	8016564 <_svfprintf_r+0x1310>
 8016562:	e09b      	b.n	801669c <_svfprintf_r+0x1448>
 8016564:	ac2f      	add	r4, sp, #188	; 0xbc
 8016566:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016568:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801656a:	4694      	mov	ip, r2
 801656c:	6023      	str	r3, [r4, #0]
 801656e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016570:	6063      	str	r3, [r4, #4]
 8016572:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016574:	3408      	adds	r4, #8
 8016576:	4463      	add	r3, ip
 8016578:	932e      	str	r3, [sp, #184]	; 0xb8
 801657a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801657c:	9308      	str	r3, [sp, #32]
 801657e:	3301      	adds	r3, #1
 8016580:	932d      	str	r3, [sp, #180]	; 0xb4
 8016582:	2b07      	cmp	r3, #7
 8016584:	dd08      	ble.n	8016598 <_svfprintf_r+0x1344>
 8016586:	aa2c      	add	r2, sp, #176	; 0xb0
 8016588:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801658a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801658c:	f001 ffb6 	bl	80184fc <__ssprint_r>
 8016590:	2800      	cmp	r0, #0
 8016592:	d000      	beq.n	8016596 <_svfprintf_r+0x1342>
 8016594:	e082      	b.n	801669c <_svfprintf_r+0x1448>
 8016596:	ac2f      	add	r4, sp, #188	; 0xbc
 8016598:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801659a:	2200      	movs	r2, #0
 801659c:	1e5d      	subs	r5, r3, #1
 801659e:	981a      	ldr	r0, [sp, #104]	; 0x68
 80165a0:	2300      	movs	r3, #0
 80165a2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80165a4:	f7e9 ff5a 	bl	800045c <__aeabi_dcmpeq>
 80165a8:	2800      	cmp	r0, #0
 80165aa:	d12c      	bne.n	8016606 <_svfprintf_r+0x13b2>
 80165ac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80165ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 80165b0:	9308      	str	r3, [sp, #32]
 80165b2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165b4:	6065      	str	r5, [r4, #4]
 80165b6:	1c5a      	adds	r2, r3, #1
 80165b8:	930e      	str	r3, [sp, #56]	; 0x38
 80165ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165bc:	922d      	str	r2, [sp, #180]	; 0xb4
 80165be:	3301      	adds	r3, #1
 80165c0:	6023      	str	r3, [r4, #0]
 80165c2:	9b08      	ldr	r3, [sp, #32]
 80165c4:	3408      	adds	r4, #8
 80165c6:	3b01      	subs	r3, #1
 80165c8:	185b      	adds	r3, r3, r1
 80165ca:	932e      	str	r3, [sp, #184]	; 0xb8
 80165cc:	2a07      	cmp	r2, #7
 80165ce:	dd07      	ble.n	80165e0 <_svfprintf_r+0x138c>
 80165d0:	aa2c      	add	r2, sp, #176	; 0xb0
 80165d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80165d6:	f001 ff91 	bl	80184fc <__ssprint_r>
 80165da:	2800      	cmp	r0, #0
 80165dc:	d15e      	bne.n	801669c <_svfprintf_r+0x1448>
 80165de:	ac2f      	add	r4, sp, #188	; 0xbc
 80165e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80165e2:	ab28      	add	r3, sp, #160	; 0xa0
 80165e4:	4694      	mov	ip, r2
 80165e6:	6023      	str	r3, [r4, #0]
 80165e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80165ea:	6063      	str	r3, [r4, #4]
 80165ec:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80165ee:	4463      	add	r3, ip
 80165f0:	932e      	str	r3, [sp, #184]	; 0xb8
 80165f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80165f4:	9308      	str	r3, [sp, #32]
 80165f6:	3301      	adds	r3, #1
 80165f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80165fa:	2b07      	cmp	r3, #7
 80165fc:	dd00      	ble.n	8016600 <_svfprintf_r+0x13ac>
 80165fe:	e629      	b.n	8016254 <_svfprintf_r+0x1000>
 8016600:	3408      	adds	r4, #8
 8016602:	0027      	movs	r7, r4
 8016604:	e579      	b.n	80160fa <_svfprintf_r+0xea6>
 8016606:	2710      	movs	r7, #16
 8016608:	2d00      	cmp	r5, #0
 801660a:	dde9      	ble.n	80165e0 <_svfprintf_r+0x138c>
 801660c:	0021      	movs	r1, r4
 801660e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016610:	4807      	ldr	r0, [pc, #28]	; (8016630 <_svfprintf_r+0x13dc>)
 8016612:	9308      	str	r3, [sp, #32]
 8016614:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016616:	3301      	adds	r3, #1
 8016618:	3108      	adds	r1, #8
 801661a:	6020      	str	r0, [r4, #0]
 801661c:	2d10      	cmp	r5, #16
 801661e:	dc09      	bgt.n	8016634 <_svfprintf_r+0x13e0>
 8016620:	6065      	str	r5, [r4, #4]
 8016622:	000c      	movs	r4, r1
 8016624:	18ad      	adds	r5, r5, r2
 8016626:	952e      	str	r5, [sp, #184]	; 0xb8
 8016628:	932d      	str	r3, [sp, #180]	; 0xb4
 801662a:	2b07      	cmp	r3, #7
 801662c:	ddd8      	ble.n	80165e0 <_svfprintf_r+0x138c>
 801662e:	e7cf      	b.n	80165d0 <_svfprintf_r+0x137c>
 8016630:	0801b8cc 	.word	0x0801b8cc
 8016634:	3210      	adds	r2, #16
 8016636:	6067      	str	r7, [r4, #4]
 8016638:	922e      	str	r2, [sp, #184]	; 0xb8
 801663a:	932d      	str	r3, [sp, #180]	; 0xb4
 801663c:	2b07      	cmp	r3, #7
 801663e:	dd07      	ble.n	8016650 <_svfprintf_r+0x13fc>
 8016640:	aa2c      	add	r2, sp, #176	; 0xb0
 8016642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016644:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016646:	f001 ff59 	bl	80184fc <__ssprint_r>
 801664a:	2800      	cmp	r0, #0
 801664c:	d126      	bne.n	801669c <_svfprintf_r+0x1448>
 801664e:	a92f      	add	r1, sp, #188	; 0xbc
 8016650:	3d10      	subs	r5, #16
 8016652:	000c      	movs	r4, r1
 8016654:	e7da      	b.n	801660c <_svfprintf_r+0x13b8>
 8016656:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016658:	912e      	str	r1, [sp, #184]	; 0xb8
 801665a:	c705      	stmia	r7!, {r0, r2}
 801665c:	932d      	str	r3, [sp, #180]	; 0xb4
 801665e:	e7e4      	b.n	801662a <_svfprintf_r+0x13d6>
 8016660:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016662:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016664:	2510      	movs	r5, #16
 8016666:	1a9c      	subs	r4, r3, r2
 8016668:	2c00      	cmp	r4, #0
 801666a:	dc00      	bgt.n	801666e <_svfprintf_r+0x141a>
 801666c:	e548      	b.n	8016100 <_svfprintf_r+0xeac>
 801666e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016670:	4921      	ldr	r1, [pc, #132]	; (80166f8 <_svfprintf_r+0x14a4>)
 8016672:	9308      	str	r3, [sp, #32]
 8016674:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016676:	3301      	adds	r3, #1
 8016678:	6039      	str	r1, [r7, #0]
 801667a:	2c10      	cmp	r4, #16
 801667c:	dc19      	bgt.n	80166b2 <_svfprintf_r+0x145e>
 801667e:	607c      	str	r4, [r7, #4]
 8016680:	18a4      	adds	r4, r4, r2
 8016682:	942e      	str	r4, [sp, #184]	; 0xb8
 8016684:	932d      	str	r3, [sp, #180]	; 0xb4
 8016686:	2b07      	cmp	r3, #7
 8016688:	dc00      	bgt.n	801668c <_svfprintf_r+0x1438>
 801668a:	e539      	b.n	8016100 <_svfprintf_r+0xeac>
 801668c:	aa2c      	add	r2, sp, #176	; 0xb0
 801668e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016690:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016692:	f001 ff33 	bl	80184fc <__ssprint_r>
 8016696:	2800      	cmp	r0, #0
 8016698:	d100      	bne.n	801669c <_svfprintf_r+0x1448>
 801669a:	e531      	b.n	8016100 <_svfprintf_r+0xeac>
 801669c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d101      	bne.n	80166a6 <_svfprintf_r+0x1452>
 80166a2:	f7ff f908 	bl	80158b6 <_svfprintf_r+0x662>
 80166a6:	0019      	movs	r1, r3
 80166a8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166aa:	f000 ff19 	bl	80174e0 <_free_r>
 80166ae:	f7ff f902 	bl	80158b6 <_svfprintf_r+0x662>
 80166b2:	3210      	adds	r2, #16
 80166b4:	607d      	str	r5, [r7, #4]
 80166b6:	922e      	str	r2, [sp, #184]	; 0xb8
 80166b8:	932d      	str	r3, [sp, #180]	; 0xb4
 80166ba:	3708      	adds	r7, #8
 80166bc:	2b07      	cmp	r3, #7
 80166be:	dd07      	ble.n	80166d0 <_svfprintf_r+0x147c>
 80166c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80166c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166c6:	f001 ff19 	bl	80184fc <__ssprint_r>
 80166ca:	2800      	cmp	r0, #0
 80166cc:	d1e6      	bne.n	801669c <_svfprintf_r+0x1448>
 80166ce:	af2f      	add	r7, sp, #188	; 0xbc
 80166d0:	3c10      	subs	r4, #16
 80166d2:	e7cc      	b.n	801666e <_svfprintf_r+0x141a>
 80166d4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80166d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166d8:	f000 ff02 	bl	80174e0 <_free_r>
 80166dc:	e52a      	b.n	8016134 <_svfprintf_r+0xee0>
 80166de:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80166e0:	9306      	str	r3, [sp, #24]
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	d101      	bne.n	80166ea <_svfprintf_r+0x1496>
 80166e6:	f7ff f8e6 	bl	80158b6 <_svfprintf_r+0x662>
 80166ea:	aa2c      	add	r2, sp, #176	; 0xb0
 80166ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166ee:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166f0:	f001 ff04 	bl	80184fc <__ssprint_r>
 80166f4:	f7ff f8df 	bl	80158b6 <_svfprintf_r+0x662>
 80166f8:	0801b8bc 	.word	0x0801b8bc

080166fc <sysconf>:
 80166fc:	2380      	movs	r3, #128	; 0x80
 80166fe:	b510      	push	{r4, lr}
 8016700:	015b      	lsls	r3, r3, #5
 8016702:	2808      	cmp	r0, #8
 8016704:	d004      	beq.n	8016710 <sysconf+0x14>
 8016706:	f000 fe7d 	bl	8017404 <__errno>
 801670a:	2316      	movs	r3, #22
 801670c:	6003      	str	r3, [r0, #0]
 801670e:	3b17      	subs	r3, #23
 8016710:	0018      	movs	r0, r3
 8016712:	bd10      	pop	{r4, pc}

08016714 <__ascii_wctomb>:
 8016714:	1e0b      	subs	r3, r1, #0
 8016716:	d004      	beq.n	8016722 <__ascii_wctomb+0xe>
 8016718:	2aff      	cmp	r2, #255	; 0xff
 801671a:	d904      	bls.n	8016726 <__ascii_wctomb+0x12>
 801671c:	238a      	movs	r3, #138	; 0x8a
 801671e:	6003      	str	r3, [r0, #0]
 8016720:	3b8b      	subs	r3, #139	; 0x8b
 8016722:	0018      	movs	r0, r3
 8016724:	4770      	bx	lr
 8016726:	700a      	strb	r2, [r1, #0]
 8016728:	2301      	movs	r3, #1
 801672a:	e7fa      	b.n	8016722 <__ascii_wctomb+0xe>

0801672c <register_fini>:
 801672c:	4b03      	ldr	r3, [pc, #12]	; (801673c <register_fini+0x10>)
 801672e:	b510      	push	{r4, lr}
 8016730:	2b00      	cmp	r3, #0
 8016732:	d002      	beq.n	801673a <register_fini+0xe>
 8016734:	4802      	ldr	r0, [pc, #8]	; (8016740 <register_fini+0x14>)
 8016736:	f000 f805 	bl	8016744 <atexit>
 801673a:	bd10      	pop	{r4, pc}
 801673c:	00000000 	.word	0x00000000
 8016740:	08017411 	.word	0x08017411

08016744 <atexit>:
 8016744:	2300      	movs	r3, #0
 8016746:	b510      	push	{r4, lr}
 8016748:	0001      	movs	r1, r0
 801674a:	001a      	movs	r2, r3
 801674c:	0018      	movs	r0, r3
 801674e:	f001 ff53 	bl	80185f8 <__register_exitproc>
 8016752:	bd10      	pop	{r4, pc}

08016754 <quorem>:
 8016754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016756:	6903      	ldr	r3, [r0, #16]
 8016758:	690c      	ldr	r4, [r1, #16]
 801675a:	b089      	sub	sp, #36	; 0x24
 801675c:	0007      	movs	r7, r0
 801675e:	9105      	str	r1, [sp, #20]
 8016760:	2600      	movs	r6, #0
 8016762:	42a3      	cmp	r3, r4
 8016764:	db65      	blt.n	8016832 <quorem+0xde>
 8016766:	000b      	movs	r3, r1
 8016768:	3c01      	subs	r4, #1
 801676a:	3314      	adds	r3, #20
 801676c:	00a5      	lsls	r5, r4, #2
 801676e:	9303      	str	r3, [sp, #12]
 8016770:	195b      	adds	r3, r3, r5
 8016772:	9304      	str	r3, [sp, #16]
 8016774:	0003      	movs	r3, r0
 8016776:	3314      	adds	r3, #20
 8016778:	9302      	str	r3, [sp, #8]
 801677a:	195d      	adds	r5, r3, r5
 801677c:	9b04      	ldr	r3, [sp, #16]
 801677e:	6828      	ldr	r0, [r5, #0]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	1c59      	adds	r1, r3, #1
 8016784:	9301      	str	r3, [sp, #4]
 8016786:	f7e9 fce3 	bl	8000150 <__udivsi3>
 801678a:	9001      	str	r0, [sp, #4]
 801678c:	42b0      	cmp	r0, r6
 801678e:	d029      	beq.n	80167e4 <quorem+0x90>
 8016790:	9b03      	ldr	r3, [sp, #12]
 8016792:	9802      	ldr	r0, [sp, #8]
 8016794:	469c      	mov	ip, r3
 8016796:	9606      	str	r6, [sp, #24]
 8016798:	4662      	mov	r2, ip
 801679a:	ca08      	ldmia	r2!, {r3}
 801679c:	4694      	mov	ip, r2
 801679e:	9a01      	ldr	r2, [sp, #4]
 80167a0:	b299      	uxth	r1, r3
 80167a2:	4351      	muls	r1, r2
 80167a4:	0c1b      	lsrs	r3, r3, #16
 80167a6:	4353      	muls	r3, r2
 80167a8:	1989      	adds	r1, r1, r6
 80167aa:	0c0a      	lsrs	r2, r1, #16
 80167ac:	189b      	adds	r3, r3, r2
 80167ae:	9307      	str	r3, [sp, #28]
 80167b0:	0c1e      	lsrs	r6, r3, #16
 80167b2:	6803      	ldr	r3, [r0, #0]
 80167b4:	b289      	uxth	r1, r1
 80167b6:	b29a      	uxth	r2, r3
 80167b8:	9b06      	ldr	r3, [sp, #24]
 80167ba:	18d2      	adds	r2, r2, r3
 80167bc:	6803      	ldr	r3, [r0, #0]
 80167be:	1a52      	subs	r2, r2, r1
 80167c0:	0c19      	lsrs	r1, r3, #16
 80167c2:	466b      	mov	r3, sp
 80167c4:	8b9b      	ldrh	r3, [r3, #28]
 80167c6:	1acb      	subs	r3, r1, r3
 80167c8:	1411      	asrs	r1, r2, #16
 80167ca:	185b      	adds	r3, r3, r1
 80167cc:	1419      	asrs	r1, r3, #16
 80167ce:	b292      	uxth	r2, r2
 80167d0:	041b      	lsls	r3, r3, #16
 80167d2:	431a      	orrs	r2, r3
 80167d4:	9b04      	ldr	r3, [sp, #16]
 80167d6:	9106      	str	r1, [sp, #24]
 80167d8:	c004      	stmia	r0!, {r2}
 80167da:	4563      	cmp	r3, ip
 80167dc:	d2dc      	bcs.n	8016798 <quorem+0x44>
 80167de:	682b      	ldr	r3, [r5, #0]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d02d      	beq.n	8016840 <quorem+0xec>
 80167e4:	9905      	ldr	r1, [sp, #20]
 80167e6:	0038      	movs	r0, r7
 80167e8:	f001 fcb2 	bl	8018150 <__mcmp>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	db1f      	blt.n	8016830 <quorem+0xdc>
 80167f0:	2500      	movs	r5, #0
 80167f2:	9b01      	ldr	r3, [sp, #4]
 80167f4:	9802      	ldr	r0, [sp, #8]
 80167f6:	3301      	adds	r3, #1
 80167f8:	9903      	ldr	r1, [sp, #12]
 80167fa:	9301      	str	r3, [sp, #4]
 80167fc:	6802      	ldr	r2, [r0, #0]
 80167fe:	c908      	ldmia	r1!, {r3}
 8016800:	b292      	uxth	r2, r2
 8016802:	1955      	adds	r5, r2, r5
 8016804:	b29a      	uxth	r2, r3
 8016806:	1aaa      	subs	r2, r5, r2
 8016808:	6805      	ldr	r5, [r0, #0]
 801680a:	0c1b      	lsrs	r3, r3, #16
 801680c:	0c2d      	lsrs	r5, r5, #16
 801680e:	1aeb      	subs	r3, r5, r3
 8016810:	1415      	asrs	r5, r2, #16
 8016812:	195b      	adds	r3, r3, r5
 8016814:	141d      	asrs	r5, r3, #16
 8016816:	b292      	uxth	r2, r2
 8016818:	041b      	lsls	r3, r3, #16
 801681a:	4313      	orrs	r3, r2
 801681c:	c008      	stmia	r0!, {r3}
 801681e:	9b04      	ldr	r3, [sp, #16]
 8016820:	428b      	cmp	r3, r1
 8016822:	d2eb      	bcs.n	80167fc <quorem+0xa8>
 8016824:	9a02      	ldr	r2, [sp, #8]
 8016826:	00a3      	lsls	r3, r4, #2
 8016828:	18d3      	adds	r3, r2, r3
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	2a00      	cmp	r2, #0
 801682e:	d011      	beq.n	8016854 <quorem+0x100>
 8016830:	9e01      	ldr	r6, [sp, #4]
 8016832:	0030      	movs	r0, r6
 8016834:	b009      	add	sp, #36	; 0x24
 8016836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016838:	682b      	ldr	r3, [r5, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d104      	bne.n	8016848 <quorem+0xf4>
 801683e:	3c01      	subs	r4, #1
 8016840:	9b02      	ldr	r3, [sp, #8]
 8016842:	3d04      	subs	r5, #4
 8016844:	42ab      	cmp	r3, r5
 8016846:	d3f7      	bcc.n	8016838 <quorem+0xe4>
 8016848:	613c      	str	r4, [r7, #16]
 801684a:	e7cb      	b.n	80167e4 <quorem+0x90>
 801684c:	681a      	ldr	r2, [r3, #0]
 801684e:	2a00      	cmp	r2, #0
 8016850:	d104      	bne.n	801685c <quorem+0x108>
 8016852:	3c01      	subs	r4, #1
 8016854:	9a02      	ldr	r2, [sp, #8]
 8016856:	3b04      	subs	r3, #4
 8016858:	429a      	cmp	r2, r3
 801685a:	d3f7      	bcc.n	801684c <quorem+0xf8>
 801685c:	613c      	str	r4, [r7, #16]
 801685e:	e7e7      	b.n	8016830 <quorem+0xdc>

08016860 <_dtoa_r>:
 8016860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016862:	0014      	movs	r4, r2
 8016864:	001d      	movs	r5, r3
 8016866:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016868:	b09b      	sub	sp, #108	; 0x6c
 801686a:	9002      	str	r0, [sp, #8]
 801686c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801686e:	9406      	str	r4, [sp, #24]
 8016870:	9507      	str	r5, [sp, #28]
 8016872:	2900      	cmp	r1, #0
 8016874:	d009      	beq.n	801688a <_dtoa_r+0x2a>
 8016876:	2301      	movs	r3, #1
 8016878:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801687a:	4093      	lsls	r3, r2
 801687c:	604a      	str	r2, [r1, #4]
 801687e:	608b      	str	r3, [r1, #8]
 8016880:	f001 fa6a 	bl	8017d58 <_Bfree>
 8016884:	2300      	movs	r3, #0
 8016886:	9a02      	ldr	r2, [sp, #8]
 8016888:	6413      	str	r3, [r2, #64]	; 0x40
 801688a:	2d00      	cmp	r5, #0
 801688c:	da20      	bge.n	80168d0 <_dtoa_r+0x70>
 801688e:	2301      	movs	r3, #1
 8016890:	6033      	str	r3, [r6, #0]
 8016892:	006b      	lsls	r3, r5, #1
 8016894:	085b      	lsrs	r3, r3, #1
 8016896:	9307      	str	r3, [sp, #28]
 8016898:	9c07      	ldr	r4, [sp, #28]
 801689a:	4bb2      	ldr	r3, [pc, #712]	; (8016b64 <_dtoa_r+0x304>)
 801689c:	0022      	movs	r2, r4
 801689e:	9317      	str	r3, [sp, #92]	; 0x5c
 80168a0:	401a      	ands	r2, r3
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d117      	bne.n	80168d6 <_dtoa_r+0x76>
 80168a6:	4bb0      	ldr	r3, [pc, #704]	; (8016b68 <_dtoa_r+0x308>)
 80168a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80168aa:	6013      	str	r3, [r2, #0]
 80168ac:	9b06      	ldr	r3, [sp, #24]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d103      	bne.n	80168ba <_dtoa_r+0x5a>
 80168b2:	0324      	lsls	r4, r4, #12
 80168b4:	d101      	bne.n	80168ba <_dtoa_r+0x5a>
 80168b6:	f000 fd89 	bl	80173cc <_dtoa_r+0xb6c>
 80168ba:	4bac      	ldr	r3, [pc, #688]	; (8016b6c <_dtoa_r+0x30c>)
 80168bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80168be:	9308      	str	r3, [sp, #32]
 80168c0:	2a00      	cmp	r2, #0
 80168c2:	d002      	beq.n	80168ca <_dtoa_r+0x6a>
 80168c4:	4baa      	ldr	r3, [pc, #680]	; (8016b70 <_dtoa_r+0x310>)
 80168c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80168c8:	6013      	str	r3, [r2, #0]
 80168ca:	9808      	ldr	r0, [sp, #32]
 80168cc:	b01b      	add	sp, #108	; 0x6c
 80168ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168d0:	2300      	movs	r3, #0
 80168d2:	6033      	str	r3, [r6, #0]
 80168d4:	e7e0      	b.n	8016898 <_dtoa_r+0x38>
 80168d6:	9e06      	ldr	r6, [sp, #24]
 80168d8:	9f07      	ldr	r7, [sp, #28]
 80168da:	2200      	movs	r2, #0
 80168dc:	2300      	movs	r3, #0
 80168de:	0030      	movs	r0, r6
 80168e0:	0039      	movs	r1, r7
 80168e2:	f7e9 fdbb 	bl	800045c <__aeabi_dcmpeq>
 80168e6:	1e05      	subs	r5, r0, #0
 80168e8:	d00b      	beq.n	8016902 <_dtoa_r+0xa2>
 80168ea:	2301      	movs	r3, #1
 80168ec:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80168ee:	6013      	str	r3, [r2, #0]
 80168f0:	4ba0      	ldr	r3, [pc, #640]	; (8016b74 <_dtoa_r+0x314>)
 80168f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80168f4:	9308      	str	r3, [sp, #32]
 80168f6:	2a00      	cmp	r2, #0
 80168f8:	d0e7      	beq.n	80168ca <_dtoa_r+0x6a>
 80168fa:	4a9f      	ldr	r2, [pc, #636]	; (8016b78 <_dtoa_r+0x318>)
 80168fc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80168fe:	600a      	str	r2, [r1, #0]
 8016900:	e7e3      	b.n	80168ca <_dtoa_r+0x6a>
 8016902:	ab18      	add	r3, sp, #96	; 0x60
 8016904:	9301      	str	r3, [sp, #4]
 8016906:	ab19      	add	r3, sp, #100	; 0x64
 8016908:	9300      	str	r3, [sp, #0]
 801690a:	0032      	movs	r2, r6
 801690c:	003b      	movs	r3, r7
 801690e:	9802      	ldr	r0, [sp, #8]
 8016910:	f001 fd0e 	bl	8018330 <__d2b>
 8016914:	0063      	lsls	r3, r4, #1
 8016916:	9003      	str	r0, [sp, #12]
 8016918:	0d5b      	lsrs	r3, r3, #21
 801691a:	d074      	beq.n	8016a06 <_dtoa_r+0x1a6>
 801691c:	033a      	lsls	r2, r7, #12
 801691e:	4c97      	ldr	r4, [pc, #604]	; (8016b7c <_dtoa_r+0x31c>)
 8016920:	0b12      	lsrs	r2, r2, #12
 8016922:	4314      	orrs	r4, r2
 8016924:	0021      	movs	r1, r4
 8016926:	4a96      	ldr	r2, [pc, #600]	; (8016b80 <_dtoa_r+0x320>)
 8016928:	0030      	movs	r0, r6
 801692a:	9516      	str	r5, [sp, #88]	; 0x58
 801692c:	189e      	adds	r6, r3, r2
 801692e:	2200      	movs	r2, #0
 8016930:	4b94      	ldr	r3, [pc, #592]	; (8016b84 <_dtoa_r+0x324>)
 8016932:	f7eb fcf1 	bl	8002318 <__aeabi_dsub>
 8016936:	4a94      	ldr	r2, [pc, #592]	; (8016b88 <_dtoa_r+0x328>)
 8016938:	4b94      	ldr	r3, [pc, #592]	; (8016b8c <_dtoa_r+0x32c>)
 801693a:	f7eb fa7b 	bl	8001e34 <__aeabi_dmul>
 801693e:	4a94      	ldr	r2, [pc, #592]	; (8016b90 <_dtoa_r+0x330>)
 8016940:	4b94      	ldr	r3, [pc, #592]	; (8016b94 <_dtoa_r+0x334>)
 8016942:	f7ea fb51 	bl	8000fe8 <__aeabi_dadd>
 8016946:	0004      	movs	r4, r0
 8016948:	0030      	movs	r0, r6
 801694a:	000d      	movs	r5, r1
 801694c:	f7ec f87e 	bl	8002a4c <__aeabi_i2d>
 8016950:	4a91      	ldr	r2, [pc, #580]	; (8016b98 <_dtoa_r+0x338>)
 8016952:	4b92      	ldr	r3, [pc, #584]	; (8016b9c <_dtoa_r+0x33c>)
 8016954:	f7eb fa6e 	bl	8001e34 <__aeabi_dmul>
 8016958:	0002      	movs	r2, r0
 801695a:	000b      	movs	r3, r1
 801695c:	0020      	movs	r0, r4
 801695e:	0029      	movs	r1, r5
 8016960:	f7ea fb42 	bl	8000fe8 <__aeabi_dadd>
 8016964:	0004      	movs	r4, r0
 8016966:	000d      	movs	r5, r1
 8016968:	f7ec f83a 	bl	80029e0 <__aeabi_d2iz>
 801696c:	2200      	movs	r2, #0
 801696e:	0007      	movs	r7, r0
 8016970:	2300      	movs	r3, #0
 8016972:	0020      	movs	r0, r4
 8016974:	0029      	movs	r1, r5
 8016976:	f7e9 fd77 	bl	8000468 <__aeabi_dcmplt>
 801697a:	2800      	cmp	r0, #0
 801697c:	d009      	beq.n	8016992 <_dtoa_r+0x132>
 801697e:	0038      	movs	r0, r7
 8016980:	f7ec f864 	bl	8002a4c <__aeabi_i2d>
 8016984:	002b      	movs	r3, r5
 8016986:	0022      	movs	r2, r4
 8016988:	f7e9 fd68 	bl	800045c <__aeabi_dcmpeq>
 801698c:	4243      	negs	r3, r0
 801698e:	4158      	adcs	r0, r3
 8016990:	1a3f      	subs	r7, r7, r0
 8016992:	2301      	movs	r3, #1
 8016994:	9314      	str	r3, [sp, #80]	; 0x50
 8016996:	2f16      	cmp	r7, #22
 8016998:	d80d      	bhi.n	80169b6 <_dtoa_r+0x156>
 801699a:	4981      	ldr	r1, [pc, #516]	; (8016ba0 <_dtoa_r+0x340>)
 801699c:	00fb      	lsls	r3, r7, #3
 801699e:	18c9      	adds	r1, r1, r3
 80169a0:	6808      	ldr	r0, [r1, #0]
 80169a2:	6849      	ldr	r1, [r1, #4]
 80169a4:	9a06      	ldr	r2, [sp, #24]
 80169a6:	9b07      	ldr	r3, [sp, #28]
 80169a8:	f7e9 fd72 	bl	8000490 <__aeabi_dcmpgt>
 80169ac:	2800      	cmp	r0, #0
 80169ae:	d046      	beq.n	8016a3e <_dtoa_r+0x1de>
 80169b0:	2300      	movs	r3, #0
 80169b2:	3f01      	subs	r7, #1
 80169b4:	9314      	str	r3, [sp, #80]	; 0x50
 80169b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80169b8:	1b9e      	subs	r6, r3, r6
 80169ba:	2300      	movs	r3, #0
 80169bc:	930a      	str	r3, [sp, #40]	; 0x28
 80169be:	0033      	movs	r3, r6
 80169c0:	3b01      	subs	r3, #1
 80169c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80169c4:	d504      	bpl.n	80169d0 <_dtoa_r+0x170>
 80169c6:	2301      	movs	r3, #1
 80169c8:	1b9b      	subs	r3, r3, r6
 80169ca:	930a      	str	r3, [sp, #40]	; 0x28
 80169cc:	2300      	movs	r3, #0
 80169ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80169d0:	2f00      	cmp	r7, #0
 80169d2:	db36      	blt.n	8016a42 <_dtoa_r+0x1e2>
 80169d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169d6:	9711      	str	r7, [sp, #68]	; 0x44
 80169d8:	19db      	adds	r3, r3, r7
 80169da:	930b      	str	r3, [sp, #44]	; 0x2c
 80169dc:	2300      	movs	r3, #0
 80169de:	9304      	str	r3, [sp, #16]
 80169e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169e2:	2401      	movs	r4, #1
 80169e4:	2b09      	cmp	r3, #9
 80169e6:	d900      	bls.n	80169ea <_dtoa_r+0x18a>
 80169e8:	e082      	b.n	8016af0 <_dtoa_r+0x290>
 80169ea:	2b05      	cmp	r3, #5
 80169ec:	dd02      	ble.n	80169f4 <_dtoa_r+0x194>
 80169ee:	2400      	movs	r4, #0
 80169f0:	3b04      	subs	r3, #4
 80169f2:	9320      	str	r3, [sp, #128]	; 0x80
 80169f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80169f6:	1e98      	subs	r0, r3, #2
 80169f8:	2803      	cmp	r0, #3
 80169fa:	d900      	bls.n	80169fe <_dtoa_r+0x19e>
 80169fc:	e082      	b.n	8016b04 <_dtoa_r+0x2a4>
 80169fe:	f7e9 fb93 	bl	8000128 <__gnu_thumb1_case_uqi>
 8016a02:	7573      	.short	0x7573
 8016a04:	6828      	.short	0x6828
 8016a06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016a08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8016a0a:	189e      	adds	r6, r3, r2
 8016a0c:	4b65      	ldr	r3, [pc, #404]	; (8016ba4 <_dtoa_r+0x344>)
 8016a0e:	18f2      	adds	r2, r6, r3
 8016a10:	2a20      	cmp	r2, #32
 8016a12:	dd0f      	ble.n	8016a34 <_dtoa_r+0x1d4>
 8016a14:	2340      	movs	r3, #64	; 0x40
 8016a16:	1a9b      	subs	r3, r3, r2
 8016a18:	409c      	lsls	r4, r3
 8016a1a:	4b63      	ldr	r3, [pc, #396]	; (8016ba8 <_dtoa_r+0x348>)
 8016a1c:	9806      	ldr	r0, [sp, #24]
 8016a1e:	18f3      	adds	r3, r6, r3
 8016a20:	40d8      	lsrs	r0, r3
 8016a22:	4320      	orrs	r0, r4
 8016a24:	f7ec f84c 	bl	8002ac0 <__aeabi_ui2d>
 8016a28:	2301      	movs	r3, #1
 8016a2a:	4c60      	ldr	r4, [pc, #384]	; (8016bac <_dtoa_r+0x34c>)
 8016a2c:	3e01      	subs	r6, #1
 8016a2e:	1909      	adds	r1, r1, r4
 8016a30:	9316      	str	r3, [sp, #88]	; 0x58
 8016a32:	e77c      	b.n	801692e <_dtoa_r+0xce>
 8016a34:	2320      	movs	r3, #32
 8016a36:	9806      	ldr	r0, [sp, #24]
 8016a38:	1a9b      	subs	r3, r3, r2
 8016a3a:	4098      	lsls	r0, r3
 8016a3c:	e7f2      	b.n	8016a24 <_dtoa_r+0x1c4>
 8016a3e:	9014      	str	r0, [sp, #80]	; 0x50
 8016a40:	e7b9      	b.n	80169b6 <_dtoa_r+0x156>
 8016a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a44:	1bdb      	subs	r3, r3, r7
 8016a46:	930a      	str	r3, [sp, #40]	; 0x28
 8016a48:	427b      	negs	r3, r7
 8016a4a:	9304      	str	r3, [sp, #16]
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	9311      	str	r3, [sp, #68]	; 0x44
 8016a50:	e7c6      	b.n	80169e0 <_dtoa_r+0x180>
 8016a52:	2301      	movs	r3, #1
 8016a54:	930d      	str	r3, [sp, #52]	; 0x34
 8016a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	dd57      	ble.n	8016b0c <_dtoa_r+0x2ac>
 8016a5c:	930c      	str	r3, [sp, #48]	; 0x30
 8016a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8016a60:	2200      	movs	r2, #0
 8016a62:	9902      	ldr	r1, [sp, #8]
 8016a64:	644a      	str	r2, [r1, #68]	; 0x44
 8016a66:	3204      	adds	r2, #4
 8016a68:	0010      	movs	r0, r2
 8016a6a:	9902      	ldr	r1, [sp, #8]
 8016a6c:	3014      	adds	r0, #20
 8016a6e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8016a70:	4298      	cmp	r0, r3
 8016a72:	d950      	bls.n	8016b16 <_dtoa_r+0x2b6>
 8016a74:	9802      	ldr	r0, [sp, #8]
 8016a76:	f001 f947 	bl	8017d08 <_Balloc>
 8016a7a:	9b02      	ldr	r3, [sp, #8]
 8016a7c:	9008      	str	r0, [sp, #32]
 8016a7e:	6418      	str	r0, [r3, #64]	; 0x40
 8016a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a82:	2b0e      	cmp	r3, #14
 8016a84:	d900      	bls.n	8016a88 <_dtoa_r+0x228>
 8016a86:	e10c      	b.n	8016ca2 <_dtoa_r+0x442>
 8016a88:	2c00      	cmp	r4, #0
 8016a8a:	d100      	bne.n	8016a8e <_dtoa_r+0x22e>
 8016a8c:	e109      	b.n	8016ca2 <_dtoa_r+0x442>
 8016a8e:	9b06      	ldr	r3, [sp, #24]
 8016a90:	9c07      	ldr	r4, [sp, #28]
 8016a92:	9312      	str	r3, [sp, #72]	; 0x48
 8016a94:	9413      	str	r4, [sp, #76]	; 0x4c
 8016a96:	2f00      	cmp	r7, #0
 8016a98:	dc00      	bgt.n	8016a9c <_dtoa_r+0x23c>
 8016a9a:	e08b      	b.n	8016bb4 <_dtoa_r+0x354>
 8016a9c:	210f      	movs	r1, #15
 8016a9e:	003a      	movs	r2, r7
 8016aa0:	4b3f      	ldr	r3, [pc, #252]	; (8016ba0 <_dtoa_r+0x340>)
 8016aa2:	400a      	ands	r2, r1
 8016aa4:	00d2      	lsls	r2, r2, #3
 8016aa6:	189b      	adds	r3, r3, r2
 8016aa8:	681d      	ldr	r5, [r3, #0]
 8016aaa:	685e      	ldr	r6, [r3, #4]
 8016aac:	2302      	movs	r3, #2
 8016aae:	113c      	asrs	r4, r7, #4
 8016ab0:	930e      	str	r3, [sp, #56]	; 0x38
 8016ab2:	06e3      	lsls	r3, r4, #27
 8016ab4:	d50b      	bpl.n	8016ace <_dtoa_r+0x26e>
 8016ab6:	4b3e      	ldr	r3, [pc, #248]	; (8016bb0 <_dtoa_r+0x350>)
 8016ab8:	400c      	ands	r4, r1
 8016aba:	6a1a      	ldr	r2, [r3, #32]
 8016abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016abe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016ac0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016ac2:	f7ea fdad 	bl	8001620 <__aeabi_ddiv>
 8016ac6:	2303      	movs	r3, #3
 8016ac8:	9006      	str	r0, [sp, #24]
 8016aca:	9107      	str	r1, [sp, #28]
 8016acc:	930e      	str	r3, [sp, #56]	; 0x38
 8016ace:	2300      	movs	r3, #0
 8016ad0:	e03b      	b.n	8016b4a <_dtoa_r+0x2ea>
 8016ad2:	2301      	movs	r3, #1
 8016ad4:	930d      	str	r3, [sp, #52]	; 0x34
 8016ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ad8:	18fb      	adds	r3, r7, r3
 8016ada:	930c      	str	r3, [sp, #48]	; 0x30
 8016adc:	3301      	adds	r3, #1
 8016ade:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	dcbd      	bgt.n	8016a60 <_dtoa_r+0x200>
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	e7bb      	b.n	8016a60 <_dtoa_r+0x200>
 8016ae8:	2300      	movs	r3, #0
 8016aea:	e7b3      	b.n	8016a54 <_dtoa_r+0x1f4>
 8016aec:	2300      	movs	r3, #0
 8016aee:	e7f1      	b.n	8016ad4 <_dtoa_r+0x274>
 8016af0:	2300      	movs	r3, #0
 8016af2:	940d      	str	r4, [sp, #52]	; 0x34
 8016af4:	9320      	str	r3, [sp, #128]	; 0x80
 8016af6:	3b01      	subs	r3, #1
 8016af8:	2200      	movs	r2, #0
 8016afa:	930c      	str	r3, [sp, #48]	; 0x30
 8016afc:	9309      	str	r3, [sp, #36]	; 0x24
 8016afe:	3313      	adds	r3, #19
 8016b00:	9221      	str	r2, [sp, #132]	; 0x84
 8016b02:	e7ad      	b.n	8016a60 <_dtoa_r+0x200>
 8016b04:	2301      	movs	r3, #1
 8016b06:	930d      	str	r3, [sp, #52]	; 0x34
 8016b08:	3b02      	subs	r3, #2
 8016b0a:	e7f5      	b.n	8016af8 <_dtoa_r+0x298>
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8016b10:	9309      	str	r3, [sp, #36]	; 0x24
 8016b12:	001a      	movs	r2, r3
 8016b14:	e7f4      	b.n	8016b00 <_dtoa_r+0x2a0>
 8016b16:	9802      	ldr	r0, [sp, #8]
 8016b18:	3101      	adds	r1, #1
 8016b1a:	6441      	str	r1, [r0, #68]	; 0x44
 8016b1c:	0052      	lsls	r2, r2, #1
 8016b1e:	e7a3      	b.n	8016a68 <_dtoa_r+0x208>
 8016b20:	2301      	movs	r3, #1
 8016b22:	421c      	tst	r4, r3
 8016b24:	d00e      	beq.n	8016b44 <_dtoa_r+0x2e4>
 8016b26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b28:	4a21      	ldr	r2, [pc, #132]	; (8016bb0 <_dtoa_r+0x350>)
 8016b2a:	3301      	adds	r3, #1
 8016b2c:	930e      	str	r3, [sp, #56]	; 0x38
 8016b2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b30:	0028      	movs	r0, r5
 8016b32:	00db      	lsls	r3, r3, #3
 8016b34:	189b      	adds	r3, r3, r2
 8016b36:	0031      	movs	r1, r6
 8016b38:	681a      	ldr	r2, [r3, #0]
 8016b3a:	685b      	ldr	r3, [r3, #4]
 8016b3c:	f7eb f97a 	bl	8001e34 <__aeabi_dmul>
 8016b40:	0005      	movs	r5, r0
 8016b42:	000e      	movs	r6, r1
 8016b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016b46:	1064      	asrs	r4, r4, #1
 8016b48:	3301      	adds	r3, #1
 8016b4a:	9310      	str	r3, [sp, #64]	; 0x40
 8016b4c:	2c00      	cmp	r4, #0
 8016b4e:	d1e7      	bne.n	8016b20 <_dtoa_r+0x2c0>
 8016b50:	9806      	ldr	r0, [sp, #24]
 8016b52:	9907      	ldr	r1, [sp, #28]
 8016b54:	002a      	movs	r2, r5
 8016b56:	0033      	movs	r3, r6
 8016b58:	f7ea fd62 	bl	8001620 <__aeabi_ddiv>
 8016b5c:	9006      	str	r0, [sp, #24]
 8016b5e:	9107      	str	r1, [sp, #28]
 8016b60:	e043      	b.n	8016bea <_dtoa_r+0x38a>
 8016b62:	46c0      	nop			; (mov r8, r8)
 8016b64:	7ff00000 	.word	0x7ff00000
 8016b68:	0000270f 	.word	0x0000270f
 8016b6c:	0801b9e6 	.word	0x0801b9e6
 8016b70:	0801b9e9 	.word	0x0801b9e9
 8016b74:	0801b8ba 	.word	0x0801b8ba
 8016b78:	0801b8bb 	.word	0x0801b8bb
 8016b7c:	3ff00000 	.word	0x3ff00000
 8016b80:	fffffc01 	.word	0xfffffc01
 8016b84:	3ff80000 	.word	0x3ff80000
 8016b88:	636f4361 	.word	0x636f4361
 8016b8c:	3fd287a7 	.word	0x3fd287a7
 8016b90:	8b60c8b3 	.word	0x8b60c8b3
 8016b94:	3fc68a28 	.word	0x3fc68a28
 8016b98:	509f79fb 	.word	0x509f79fb
 8016b9c:	3fd34413 	.word	0x3fd34413
 8016ba0:	0801ba18 	.word	0x0801ba18
 8016ba4:	00000432 	.word	0x00000432
 8016ba8:	00000412 	.word	0x00000412
 8016bac:	fe100000 	.word	0xfe100000
 8016bb0:	0801b9f0 	.word	0x0801b9f0
 8016bb4:	2302      	movs	r3, #2
 8016bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8016bb8:	2f00      	cmp	r7, #0
 8016bba:	d016      	beq.n	8016bea <_dtoa_r+0x38a>
 8016bbc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016bbe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8016bc0:	427c      	negs	r4, r7
 8016bc2:	330d      	adds	r3, #13
 8016bc4:	4023      	ands	r3, r4
 8016bc6:	4acf      	ldr	r2, [pc, #828]	; (8016f04 <_dtoa_r+0x6a4>)
 8016bc8:	00db      	lsls	r3, r3, #3
 8016bca:	18d3      	adds	r3, r2, r3
 8016bcc:	681a      	ldr	r2, [r3, #0]
 8016bce:	685b      	ldr	r3, [r3, #4]
 8016bd0:	f7eb f930 	bl	8001e34 <__aeabi_dmul>
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	2601      	movs	r6, #1
 8016bd8:	001d      	movs	r5, r3
 8016bda:	9006      	str	r0, [sp, #24]
 8016bdc:	9107      	str	r1, [sp, #28]
 8016bde:	1124      	asrs	r4, r4, #4
 8016be0:	2c00      	cmp	r4, #0
 8016be2:	d000      	beq.n	8016be6 <_dtoa_r+0x386>
 8016be4:	e08c      	b.n	8016d00 <_dtoa_r+0x4a0>
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d1b8      	bne.n	8016b5c <_dtoa_r+0x2fc>
 8016bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d100      	bne.n	8016bf2 <_dtoa_r+0x392>
 8016bf0:	e096      	b.n	8016d20 <_dtoa_r+0x4c0>
 8016bf2:	9c06      	ldr	r4, [sp, #24]
 8016bf4:	9d07      	ldr	r5, [sp, #28]
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	4bc3      	ldr	r3, [pc, #780]	; (8016f08 <_dtoa_r+0x6a8>)
 8016bfa:	0020      	movs	r0, r4
 8016bfc:	0029      	movs	r1, r5
 8016bfe:	f7e9 fc33 	bl	8000468 <__aeabi_dcmplt>
 8016c02:	2800      	cmp	r0, #0
 8016c04:	d100      	bne.n	8016c08 <_dtoa_r+0x3a8>
 8016c06:	e08b      	b.n	8016d20 <_dtoa_r+0x4c0>
 8016c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d100      	bne.n	8016c10 <_dtoa_r+0x3b0>
 8016c0e:	e087      	b.n	8016d20 <_dtoa_r+0x4c0>
 8016c10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	dd41      	ble.n	8016c9a <_dtoa_r+0x43a>
 8016c16:	4bbd      	ldr	r3, [pc, #756]	; (8016f0c <_dtoa_r+0x6ac>)
 8016c18:	2200      	movs	r2, #0
 8016c1a:	0020      	movs	r0, r4
 8016c1c:	0029      	movs	r1, r5
 8016c1e:	f7eb f909 	bl	8001e34 <__aeabi_dmul>
 8016c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c24:	9006      	str	r0, [sp, #24]
 8016c26:	9107      	str	r1, [sp, #28]
 8016c28:	3301      	adds	r3, #1
 8016c2a:	930e      	str	r3, [sp, #56]	; 0x38
 8016c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016c2e:	1e7e      	subs	r6, r7, #1
 8016c30:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016c32:	9310      	str	r3, [sp, #64]	; 0x40
 8016c34:	f7eb ff0a 	bl	8002a4c <__aeabi_i2d>
 8016c38:	9a06      	ldr	r2, [sp, #24]
 8016c3a:	9b07      	ldr	r3, [sp, #28]
 8016c3c:	f7eb f8fa 	bl	8001e34 <__aeabi_dmul>
 8016c40:	2200      	movs	r2, #0
 8016c42:	4bb3      	ldr	r3, [pc, #716]	; (8016f10 <_dtoa_r+0x6b0>)
 8016c44:	f7ea f9d0 	bl	8000fe8 <__aeabi_dadd>
 8016c48:	4ab2      	ldr	r2, [pc, #712]	; (8016f14 <_dtoa_r+0x6b4>)
 8016c4a:	900e      	str	r0, [sp, #56]	; 0x38
 8016c4c:	910f      	str	r1, [sp, #60]	; 0x3c
 8016c4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016c50:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8016c52:	4694      	mov	ip, r2
 8016c54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016c56:	4463      	add	r3, ip
 8016c58:	9315      	str	r3, [sp, #84]	; 0x54
 8016c5a:	001d      	movs	r5, r3
 8016c5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d161      	bne.n	8016d26 <_dtoa_r+0x4c6>
 8016c62:	9806      	ldr	r0, [sp, #24]
 8016c64:	9907      	ldr	r1, [sp, #28]
 8016c66:	2200      	movs	r2, #0
 8016c68:	4bab      	ldr	r3, [pc, #684]	; (8016f18 <_dtoa_r+0x6b8>)
 8016c6a:	f7eb fb55 	bl	8002318 <__aeabi_dsub>
 8016c6e:	0022      	movs	r2, r4
 8016c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016c72:	9006      	str	r0, [sp, #24]
 8016c74:	9107      	str	r1, [sp, #28]
 8016c76:	f7e9 fc0b 	bl	8000490 <__aeabi_dcmpgt>
 8016c7a:	2800      	cmp	r0, #0
 8016c7c:	d000      	beq.n	8016c80 <_dtoa_r+0x420>
 8016c7e:	e2aa      	b.n	80171d6 <_dtoa_r+0x976>
 8016c80:	48a6      	ldr	r0, [pc, #664]	; (8016f1c <_dtoa_r+0x6bc>)
 8016c82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016c84:	4684      	mov	ip, r0
 8016c86:	4461      	add	r1, ip
 8016c88:	000b      	movs	r3, r1
 8016c8a:	9806      	ldr	r0, [sp, #24]
 8016c8c:	9907      	ldr	r1, [sp, #28]
 8016c8e:	0022      	movs	r2, r4
 8016c90:	f7e9 fbea 	bl	8000468 <__aeabi_dcmplt>
 8016c94:	2800      	cmp	r0, #0
 8016c96:	d000      	beq.n	8016c9a <_dtoa_r+0x43a>
 8016c98:	e297      	b.n	80171ca <_dtoa_r+0x96a>
 8016c9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016c9c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016c9e:	9306      	str	r3, [sp, #24]
 8016ca0:	9407      	str	r4, [sp, #28]
 8016ca2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	da00      	bge.n	8016caa <_dtoa_r+0x44a>
 8016ca8:	e15e      	b.n	8016f68 <_dtoa_r+0x708>
 8016caa:	2f0e      	cmp	r7, #14
 8016cac:	dd00      	ble.n	8016cb0 <_dtoa_r+0x450>
 8016cae:	e15b      	b.n	8016f68 <_dtoa_r+0x708>
 8016cb0:	4b94      	ldr	r3, [pc, #592]	; (8016f04 <_dtoa_r+0x6a4>)
 8016cb2:	00fa      	lsls	r2, r7, #3
 8016cb4:	189b      	adds	r3, r3, r2
 8016cb6:	685c      	ldr	r4, [r3, #4]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	9304      	str	r3, [sp, #16]
 8016cbc:	9405      	str	r4, [sp, #20]
 8016cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	db00      	blt.n	8016cc6 <_dtoa_r+0x466>
 8016cc4:	e0da      	b.n	8016e7c <_dtoa_r+0x61c>
 8016cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	dd00      	ble.n	8016cce <_dtoa_r+0x46e>
 8016ccc:	e0d6      	b.n	8016e7c <_dtoa_r+0x61c>
 8016cce:	d000      	beq.n	8016cd2 <_dtoa_r+0x472>
 8016cd0:	e27f      	b.n	80171d2 <_dtoa_r+0x972>
 8016cd2:	9804      	ldr	r0, [sp, #16]
 8016cd4:	9905      	ldr	r1, [sp, #20]
 8016cd6:	2200      	movs	r2, #0
 8016cd8:	4b8f      	ldr	r3, [pc, #572]	; (8016f18 <_dtoa_r+0x6b8>)
 8016cda:	f7eb f8ab 	bl	8001e34 <__aeabi_dmul>
 8016cde:	9a06      	ldr	r2, [sp, #24]
 8016ce0:	9b07      	ldr	r3, [sp, #28]
 8016ce2:	f7e9 fbdf 	bl	80004a4 <__aeabi_dcmpge>
 8016ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ce8:	9304      	str	r3, [sp, #16]
 8016cea:	001e      	movs	r6, r3
 8016cec:	2800      	cmp	r0, #0
 8016cee:	d000      	beq.n	8016cf2 <_dtoa_r+0x492>
 8016cf0:	e251      	b.n	8017196 <_dtoa_r+0x936>
 8016cf2:	9b08      	ldr	r3, [sp, #32]
 8016cf4:	9a08      	ldr	r2, [sp, #32]
 8016cf6:	1c5d      	adds	r5, r3, #1
 8016cf8:	2331      	movs	r3, #49	; 0x31
 8016cfa:	3701      	adds	r7, #1
 8016cfc:	7013      	strb	r3, [r2, #0]
 8016cfe:	e24d      	b.n	801719c <_dtoa_r+0x93c>
 8016d00:	4234      	tst	r4, r6
 8016d02:	d00a      	beq.n	8016d1a <_dtoa_r+0x4ba>
 8016d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d06:	4a86      	ldr	r2, [pc, #536]	; (8016f20 <_dtoa_r+0x6c0>)
 8016d08:	3301      	adds	r3, #1
 8016d0a:	930e      	str	r3, [sp, #56]	; 0x38
 8016d0c:	00eb      	lsls	r3, r5, #3
 8016d0e:	189b      	adds	r3, r3, r2
 8016d10:	681a      	ldr	r2, [r3, #0]
 8016d12:	685b      	ldr	r3, [r3, #4]
 8016d14:	f7eb f88e 	bl	8001e34 <__aeabi_dmul>
 8016d18:	0033      	movs	r3, r6
 8016d1a:	1064      	asrs	r4, r4, #1
 8016d1c:	3501      	adds	r5, #1
 8016d1e:	e75f      	b.n	8016be0 <_dtoa_r+0x380>
 8016d20:	003e      	movs	r6, r7
 8016d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d24:	e784      	b.n	8016c30 <_dtoa_r+0x3d0>
 8016d26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016d28:	1e5a      	subs	r2, r3, #1
 8016d2a:	4b76      	ldr	r3, [pc, #472]	; (8016f04 <_dtoa_r+0x6a4>)
 8016d2c:	00d2      	lsls	r2, r2, #3
 8016d2e:	189b      	adds	r3, r3, r2
 8016d30:	6818      	ldr	r0, [r3, #0]
 8016d32:	6859      	ldr	r1, [r3, #4]
 8016d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d04b      	beq.n	8016dd2 <_dtoa_r+0x572>
 8016d3a:	0002      	movs	r2, r0
 8016d3c:	000b      	movs	r3, r1
 8016d3e:	2000      	movs	r0, #0
 8016d40:	4978      	ldr	r1, [pc, #480]	; (8016f24 <_dtoa_r+0x6c4>)
 8016d42:	f7ea fc6d 	bl	8001620 <__aeabi_ddiv>
 8016d46:	002b      	movs	r3, r5
 8016d48:	0022      	movs	r2, r4
 8016d4a:	f7eb fae5 	bl	8002318 <__aeabi_dsub>
 8016d4e:	9b08      	ldr	r3, [sp, #32]
 8016d50:	900e      	str	r0, [sp, #56]	; 0x38
 8016d52:	910f      	str	r1, [sp, #60]	; 0x3c
 8016d54:	9315      	str	r3, [sp, #84]	; 0x54
 8016d56:	9806      	ldr	r0, [sp, #24]
 8016d58:	9907      	ldr	r1, [sp, #28]
 8016d5a:	f7eb fe41 	bl	80029e0 <__aeabi_d2iz>
 8016d5e:	0004      	movs	r4, r0
 8016d60:	f7eb fe74 	bl	8002a4c <__aeabi_i2d>
 8016d64:	0002      	movs	r2, r0
 8016d66:	000b      	movs	r3, r1
 8016d68:	9806      	ldr	r0, [sp, #24]
 8016d6a:	9907      	ldr	r1, [sp, #28]
 8016d6c:	f7eb fad4 	bl	8002318 <__aeabi_dsub>
 8016d70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016d72:	3430      	adds	r4, #48	; 0x30
 8016d74:	1c5d      	adds	r5, r3, #1
 8016d76:	701c      	strb	r4, [r3, #0]
 8016d78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d7c:	9006      	str	r0, [sp, #24]
 8016d7e:	9107      	str	r1, [sp, #28]
 8016d80:	f7e9 fb72 	bl	8000468 <__aeabi_dcmplt>
 8016d84:	2800      	cmp	r0, #0
 8016d86:	d16c      	bne.n	8016e62 <_dtoa_r+0x602>
 8016d88:	9a06      	ldr	r2, [sp, #24]
 8016d8a:	9b07      	ldr	r3, [sp, #28]
 8016d8c:	2000      	movs	r0, #0
 8016d8e:	495e      	ldr	r1, [pc, #376]	; (8016f08 <_dtoa_r+0x6a8>)
 8016d90:	f7eb fac2 	bl	8002318 <__aeabi_dsub>
 8016d94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016d96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d98:	f7e9 fb66 	bl	8000468 <__aeabi_dcmplt>
 8016d9c:	2800      	cmp	r0, #0
 8016d9e:	d000      	beq.n	8016da2 <_dtoa_r+0x542>
 8016da0:	e0c3      	b.n	8016f2a <_dtoa_r+0x6ca>
 8016da2:	9b08      	ldr	r3, [sp, #32]
 8016da4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016da6:	1aeb      	subs	r3, r5, r3
 8016da8:	429a      	cmp	r2, r3
 8016daa:	dc00      	bgt.n	8016dae <_dtoa_r+0x54e>
 8016dac:	e775      	b.n	8016c9a <_dtoa_r+0x43a>
 8016dae:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016db0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016db2:	2200      	movs	r2, #0
 8016db4:	4b55      	ldr	r3, [pc, #340]	; (8016f0c <_dtoa_r+0x6ac>)
 8016db6:	f7eb f83d 	bl	8001e34 <__aeabi_dmul>
 8016dba:	2200      	movs	r2, #0
 8016dbc:	900e      	str	r0, [sp, #56]	; 0x38
 8016dbe:	910f      	str	r1, [sp, #60]	; 0x3c
 8016dc0:	9806      	ldr	r0, [sp, #24]
 8016dc2:	9907      	ldr	r1, [sp, #28]
 8016dc4:	4b51      	ldr	r3, [pc, #324]	; (8016f0c <_dtoa_r+0x6ac>)
 8016dc6:	f7eb f835 	bl	8001e34 <__aeabi_dmul>
 8016dca:	9515      	str	r5, [sp, #84]	; 0x54
 8016dcc:	9006      	str	r0, [sp, #24]
 8016dce:	9107      	str	r1, [sp, #28]
 8016dd0:	e7c1      	b.n	8016d56 <_dtoa_r+0x4f6>
 8016dd2:	0022      	movs	r2, r4
 8016dd4:	002b      	movs	r3, r5
 8016dd6:	f7eb f82d 	bl	8001e34 <__aeabi_dmul>
 8016dda:	9c08      	ldr	r4, [sp, #32]
 8016ddc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016dde:	0023      	movs	r3, r4
 8016de0:	4694      	mov	ip, r2
 8016de2:	900e      	str	r0, [sp, #56]	; 0x38
 8016de4:	910f      	str	r1, [sp, #60]	; 0x3c
 8016de6:	4463      	add	r3, ip
 8016de8:	9315      	str	r3, [sp, #84]	; 0x54
 8016dea:	9806      	ldr	r0, [sp, #24]
 8016dec:	9907      	ldr	r1, [sp, #28]
 8016dee:	f7eb fdf7 	bl	80029e0 <__aeabi_d2iz>
 8016df2:	0005      	movs	r5, r0
 8016df4:	f7eb fe2a 	bl	8002a4c <__aeabi_i2d>
 8016df8:	000b      	movs	r3, r1
 8016dfa:	0002      	movs	r2, r0
 8016dfc:	9806      	ldr	r0, [sp, #24]
 8016dfe:	9907      	ldr	r1, [sp, #28]
 8016e00:	f7eb fa8a 	bl	8002318 <__aeabi_dsub>
 8016e04:	3530      	adds	r5, #48	; 0x30
 8016e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e08:	7025      	strb	r5, [r4, #0]
 8016e0a:	3401      	adds	r4, #1
 8016e0c:	9006      	str	r0, [sp, #24]
 8016e0e:	9107      	str	r1, [sp, #28]
 8016e10:	42a3      	cmp	r3, r4
 8016e12:	d12a      	bne.n	8016e6a <_dtoa_r+0x60a>
 8016e14:	980e      	ldr	r0, [sp, #56]	; 0x38
 8016e16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8016e18:	9a08      	ldr	r2, [sp, #32]
 8016e1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016e1c:	4694      	mov	ip, r2
 8016e1e:	4463      	add	r3, ip
 8016e20:	2200      	movs	r2, #0
 8016e22:	001d      	movs	r5, r3
 8016e24:	4b3f      	ldr	r3, [pc, #252]	; (8016f24 <_dtoa_r+0x6c4>)
 8016e26:	f7ea f8df 	bl	8000fe8 <__aeabi_dadd>
 8016e2a:	0002      	movs	r2, r0
 8016e2c:	000b      	movs	r3, r1
 8016e2e:	9806      	ldr	r0, [sp, #24]
 8016e30:	9907      	ldr	r1, [sp, #28]
 8016e32:	f7e9 fb2d 	bl	8000490 <__aeabi_dcmpgt>
 8016e36:	2800      	cmp	r0, #0
 8016e38:	d000      	beq.n	8016e3c <_dtoa_r+0x5dc>
 8016e3a:	e076      	b.n	8016f2a <_dtoa_r+0x6ca>
 8016e3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016e3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e40:	2000      	movs	r0, #0
 8016e42:	4938      	ldr	r1, [pc, #224]	; (8016f24 <_dtoa_r+0x6c4>)
 8016e44:	f7eb fa68 	bl	8002318 <__aeabi_dsub>
 8016e48:	0002      	movs	r2, r0
 8016e4a:	000b      	movs	r3, r1
 8016e4c:	9806      	ldr	r0, [sp, #24]
 8016e4e:	9907      	ldr	r1, [sp, #28]
 8016e50:	f7e9 fb0a 	bl	8000468 <__aeabi_dcmplt>
 8016e54:	2800      	cmp	r0, #0
 8016e56:	d100      	bne.n	8016e5a <_dtoa_r+0x5fa>
 8016e58:	e71f      	b.n	8016c9a <_dtoa_r+0x43a>
 8016e5a:	1e6b      	subs	r3, r5, #1
 8016e5c:	781a      	ldrb	r2, [r3, #0]
 8016e5e:	2a30      	cmp	r2, #48	; 0x30
 8016e60:	d001      	beq.n	8016e66 <_dtoa_r+0x606>
 8016e62:	0037      	movs	r7, r6
 8016e64:	e03f      	b.n	8016ee6 <_dtoa_r+0x686>
 8016e66:	001d      	movs	r5, r3
 8016e68:	e7f7      	b.n	8016e5a <_dtoa_r+0x5fa>
 8016e6a:	9806      	ldr	r0, [sp, #24]
 8016e6c:	9907      	ldr	r1, [sp, #28]
 8016e6e:	2200      	movs	r2, #0
 8016e70:	4b26      	ldr	r3, [pc, #152]	; (8016f0c <_dtoa_r+0x6ac>)
 8016e72:	f7ea ffdf 	bl	8001e34 <__aeabi_dmul>
 8016e76:	9006      	str	r0, [sp, #24]
 8016e78:	9107      	str	r1, [sp, #28]
 8016e7a:	e7b6      	b.n	8016dea <_dtoa_r+0x58a>
 8016e7c:	9e08      	ldr	r6, [sp, #32]
 8016e7e:	9a04      	ldr	r2, [sp, #16]
 8016e80:	9b05      	ldr	r3, [sp, #20]
 8016e82:	9806      	ldr	r0, [sp, #24]
 8016e84:	9907      	ldr	r1, [sp, #28]
 8016e86:	f7ea fbcb 	bl	8001620 <__aeabi_ddiv>
 8016e8a:	f7eb fda9 	bl	80029e0 <__aeabi_d2iz>
 8016e8e:	0004      	movs	r4, r0
 8016e90:	f7eb fddc 	bl	8002a4c <__aeabi_i2d>
 8016e94:	9a04      	ldr	r2, [sp, #16]
 8016e96:	9b05      	ldr	r3, [sp, #20]
 8016e98:	f7ea ffcc 	bl	8001e34 <__aeabi_dmul>
 8016e9c:	0002      	movs	r2, r0
 8016e9e:	000b      	movs	r3, r1
 8016ea0:	9806      	ldr	r0, [sp, #24]
 8016ea2:	9907      	ldr	r1, [sp, #28]
 8016ea4:	f7eb fa38 	bl	8002318 <__aeabi_dsub>
 8016ea8:	0023      	movs	r3, r4
 8016eaa:	3330      	adds	r3, #48	; 0x30
 8016eac:	7033      	strb	r3, [r6, #0]
 8016eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016eb0:	9b08      	ldr	r3, [sp, #32]
 8016eb2:	1c75      	adds	r5, r6, #1
 8016eb4:	1aeb      	subs	r3, r5, r3
 8016eb6:	429a      	cmp	r2, r3
 8016eb8:	d148      	bne.n	8016f4c <_dtoa_r+0x6ec>
 8016eba:	0002      	movs	r2, r0
 8016ebc:	000b      	movs	r3, r1
 8016ebe:	f7ea f893 	bl	8000fe8 <__aeabi_dadd>
 8016ec2:	9a04      	ldr	r2, [sp, #16]
 8016ec4:	9b05      	ldr	r3, [sp, #20]
 8016ec6:	9006      	str	r0, [sp, #24]
 8016ec8:	9107      	str	r1, [sp, #28]
 8016eca:	f7e9 fae1 	bl	8000490 <__aeabi_dcmpgt>
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	d12a      	bne.n	8016f28 <_dtoa_r+0x6c8>
 8016ed2:	9a04      	ldr	r2, [sp, #16]
 8016ed4:	9b05      	ldr	r3, [sp, #20]
 8016ed6:	9806      	ldr	r0, [sp, #24]
 8016ed8:	9907      	ldr	r1, [sp, #28]
 8016eda:	f7e9 fabf 	bl	800045c <__aeabi_dcmpeq>
 8016ede:	2800      	cmp	r0, #0
 8016ee0:	d001      	beq.n	8016ee6 <_dtoa_r+0x686>
 8016ee2:	07e3      	lsls	r3, r4, #31
 8016ee4:	d420      	bmi.n	8016f28 <_dtoa_r+0x6c8>
 8016ee6:	9903      	ldr	r1, [sp, #12]
 8016ee8:	9802      	ldr	r0, [sp, #8]
 8016eea:	f000 ff35 	bl	8017d58 <_Bfree>
 8016eee:	2300      	movs	r3, #0
 8016ef0:	702b      	strb	r3, [r5, #0]
 8016ef2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016ef4:	3701      	adds	r7, #1
 8016ef6:	601f      	str	r7, [r3, #0]
 8016ef8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d100      	bne.n	8016f00 <_dtoa_r+0x6a0>
 8016efe:	e4e4      	b.n	80168ca <_dtoa_r+0x6a>
 8016f00:	601d      	str	r5, [r3, #0]
 8016f02:	e4e2      	b.n	80168ca <_dtoa_r+0x6a>
 8016f04:	0801ba18 	.word	0x0801ba18
 8016f08:	3ff00000 	.word	0x3ff00000
 8016f0c:	40240000 	.word	0x40240000
 8016f10:	401c0000 	.word	0x401c0000
 8016f14:	fcc00000 	.word	0xfcc00000
 8016f18:	40140000 	.word	0x40140000
 8016f1c:	7cc00000 	.word	0x7cc00000
 8016f20:	0801b9f0 	.word	0x0801b9f0
 8016f24:	3fe00000 	.word	0x3fe00000
 8016f28:	003e      	movs	r6, r7
 8016f2a:	1e6b      	subs	r3, r5, #1
 8016f2c:	781a      	ldrb	r2, [r3, #0]
 8016f2e:	2a39      	cmp	r2, #57	; 0x39
 8016f30:	d106      	bne.n	8016f40 <_dtoa_r+0x6e0>
 8016f32:	9a08      	ldr	r2, [sp, #32]
 8016f34:	429a      	cmp	r2, r3
 8016f36:	d107      	bne.n	8016f48 <_dtoa_r+0x6e8>
 8016f38:	2330      	movs	r3, #48	; 0x30
 8016f3a:	7013      	strb	r3, [r2, #0]
 8016f3c:	0013      	movs	r3, r2
 8016f3e:	3601      	adds	r6, #1
 8016f40:	781a      	ldrb	r2, [r3, #0]
 8016f42:	3201      	adds	r2, #1
 8016f44:	701a      	strb	r2, [r3, #0]
 8016f46:	e78c      	b.n	8016e62 <_dtoa_r+0x602>
 8016f48:	001d      	movs	r5, r3
 8016f4a:	e7ee      	b.n	8016f2a <_dtoa_r+0x6ca>
 8016f4c:	2200      	movs	r2, #0
 8016f4e:	4ba4      	ldr	r3, [pc, #656]	; (80171e0 <_dtoa_r+0x980>)
 8016f50:	f7ea ff70 	bl	8001e34 <__aeabi_dmul>
 8016f54:	2200      	movs	r2, #0
 8016f56:	2300      	movs	r3, #0
 8016f58:	9006      	str	r0, [sp, #24]
 8016f5a:	9107      	str	r1, [sp, #28]
 8016f5c:	002e      	movs	r6, r5
 8016f5e:	f7e9 fa7d 	bl	800045c <__aeabi_dcmpeq>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	d08b      	beq.n	8016e7e <_dtoa_r+0x61e>
 8016f66:	e7be      	b.n	8016ee6 <_dtoa_r+0x686>
 8016f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f6a:	2a00      	cmp	r2, #0
 8016f6c:	d100      	bne.n	8016f70 <_dtoa_r+0x710>
 8016f6e:	e0da      	b.n	8017126 <_dtoa_r+0x8c6>
 8016f70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016f72:	2a01      	cmp	r2, #1
 8016f74:	dd00      	ble.n	8016f78 <_dtoa_r+0x718>
 8016f76:	e0bd      	b.n	80170f4 <_dtoa_r+0x894>
 8016f78:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016f7a:	2a00      	cmp	r2, #0
 8016f7c:	d100      	bne.n	8016f80 <_dtoa_r+0x720>
 8016f7e:	e0b5      	b.n	80170ec <_dtoa_r+0x88c>
 8016f80:	4a98      	ldr	r2, [pc, #608]	; (80171e4 <_dtoa_r+0x984>)
 8016f82:	189b      	adds	r3, r3, r2
 8016f84:	9d04      	ldr	r5, [sp, #16]
 8016f86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8016f88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016f8a:	2101      	movs	r1, #1
 8016f8c:	18d2      	adds	r2, r2, r3
 8016f8e:	920a      	str	r2, [sp, #40]	; 0x28
 8016f90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016f92:	9802      	ldr	r0, [sp, #8]
 8016f94:	18d3      	adds	r3, r2, r3
 8016f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f98:	f000 ffad 	bl	8017ef6 <__i2b>
 8016f9c:	0006      	movs	r6, r0
 8016f9e:	2c00      	cmp	r4, #0
 8016fa0:	dd0e      	ble.n	8016fc0 <_dtoa_r+0x760>
 8016fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	dd0b      	ble.n	8016fc0 <_dtoa_r+0x760>
 8016fa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016faa:	0023      	movs	r3, r4
 8016fac:	4294      	cmp	r4, r2
 8016fae:	dd00      	ble.n	8016fb2 <_dtoa_r+0x752>
 8016fb0:	0013      	movs	r3, r2
 8016fb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016fb4:	1ae4      	subs	r4, r4, r3
 8016fb6:	1ad2      	subs	r2, r2, r3
 8016fb8:	920a      	str	r2, [sp, #40]	; 0x28
 8016fba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016fbc:	1ad3      	subs	r3, r2, r3
 8016fbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8016fc0:	9b04      	ldr	r3, [sp, #16]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d01f      	beq.n	8017006 <_dtoa_r+0x7a6>
 8016fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d100      	bne.n	8016fce <_dtoa_r+0x76e>
 8016fcc:	e0af      	b.n	801712e <_dtoa_r+0x8ce>
 8016fce:	2d00      	cmp	r5, #0
 8016fd0:	d011      	beq.n	8016ff6 <_dtoa_r+0x796>
 8016fd2:	0031      	movs	r1, r6
 8016fd4:	002a      	movs	r2, r5
 8016fd6:	9802      	ldr	r0, [sp, #8]
 8016fd8:	f001 f826 	bl	8018028 <__pow5mult>
 8016fdc:	9a03      	ldr	r2, [sp, #12]
 8016fde:	0001      	movs	r1, r0
 8016fe0:	0006      	movs	r6, r0
 8016fe2:	9802      	ldr	r0, [sp, #8]
 8016fe4:	f000 ff90 	bl	8017f08 <__multiply>
 8016fe8:	9903      	ldr	r1, [sp, #12]
 8016fea:	9010      	str	r0, [sp, #64]	; 0x40
 8016fec:	9802      	ldr	r0, [sp, #8]
 8016fee:	f000 feb3 	bl	8017d58 <_Bfree>
 8016ff2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ff4:	9303      	str	r3, [sp, #12]
 8016ff6:	9b04      	ldr	r3, [sp, #16]
 8016ff8:	1b5a      	subs	r2, r3, r5
 8016ffa:	d004      	beq.n	8017006 <_dtoa_r+0x7a6>
 8016ffc:	9903      	ldr	r1, [sp, #12]
 8016ffe:	9802      	ldr	r0, [sp, #8]
 8017000:	f001 f812 	bl	8018028 <__pow5mult>
 8017004:	9003      	str	r0, [sp, #12]
 8017006:	2101      	movs	r1, #1
 8017008:	9802      	ldr	r0, [sp, #8]
 801700a:	f000 ff74 	bl	8017ef6 <__i2b>
 801700e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017010:	9004      	str	r0, [sp, #16]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d100      	bne.n	8017018 <_dtoa_r+0x7b8>
 8017016:	e1e3      	b.n	80173e0 <_dtoa_r+0xb80>
 8017018:	001a      	movs	r2, r3
 801701a:	0001      	movs	r1, r0
 801701c:	9802      	ldr	r0, [sp, #8]
 801701e:	f001 f803 	bl	8018028 <__pow5mult>
 8017022:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017024:	9004      	str	r0, [sp, #16]
 8017026:	2b01      	cmp	r3, #1
 8017028:	dd00      	ble.n	801702c <_dtoa_r+0x7cc>
 801702a:	e082      	b.n	8017132 <_dtoa_r+0x8d2>
 801702c:	2500      	movs	r5, #0
 801702e:	9b06      	ldr	r3, [sp, #24]
 8017030:	42ab      	cmp	r3, r5
 8017032:	d10e      	bne.n	8017052 <_dtoa_r+0x7f2>
 8017034:	9b07      	ldr	r3, [sp, #28]
 8017036:	031b      	lsls	r3, r3, #12
 8017038:	42ab      	cmp	r3, r5
 801703a:	d10a      	bne.n	8017052 <_dtoa_r+0x7f2>
 801703c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801703e:	9a07      	ldr	r2, [sp, #28]
 8017040:	4213      	tst	r3, r2
 8017042:	d006      	beq.n	8017052 <_dtoa_r+0x7f2>
 8017044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017046:	3501      	adds	r5, #1
 8017048:	3301      	adds	r3, #1
 801704a:	930a      	str	r3, [sp, #40]	; 0x28
 801704c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801704e:	3301      	adds	r3, #1
 8017050:	930b      	str	r3, [sp, #44]	; 0x2c
 8017052:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017054:	2001      	movs	r0, #1
 8017056:	2b00      	cmp	r3, #0
 8017058:	d16c      	bne.n	8017134 <_dtoa_r+0x8d4>
 801705a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801705c:	1818      	adds	r0, r3, r0
 801705e:	231f      	movs	r3, #31
 8017060:	4018      	ands	r0, r3
 8017062:	d07e      	beq.n	8017162 <_dtoa_r+0x902>
 8017064:	3301      	adds	r3, #1
 8017066:	1a1b      	subs	r3, r3, r0
 8017068:	2b04      	cmp	r3, #4
 801706a:	dd70      	ble.n	801714e <_dtoa_r+0x8ee>
 801706c:	231c      	movs	r3, #28
 801706e:	1a18      	subs	r0, r3, r0
 8017070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017072:	1824      	adds	r4, r4, r0
 8017074:	181b      	adds	r3, r3, r0
 8017076:	930a      	str	r3, [sp, #40]	; 0x28
 8017078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801707a:	181b      	adds	r3, r3, r0
 801707c:	930b      	str	r3, [sp, #44]	; 0x2c
 801707e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017080:	2b00      	cmp	r3, #0
 8017082:	dd05      	ble.n	8017090 <_dtoa_r+0x830>
 8017084:	001a      	movs	r2, r3
 8017086:	9903      	ldr	r1, [sp, #12]
 8017088:	9802      	ldr	r0, [sp, #8]
 801708a:	f001 f80f 	bl	80180ac <__lshift>
 801708e:	9003      	str	r0, [sp, #12]
 8017090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017092:	2b00      	cmp	r3, #0
 8017094:	dd05      	ble.n	80170a2 <_dtoa_r+0x842>
 8017096:	001a      	movs	r2, r3
 8017098:	9904      	ldr	r1, [sp, #16]
 801709a:	9802      	ldr	r0, [sp, #8]
 801709c:	f001 f806 	bl	80180ac <__lshift>
 80170a0:	9004      	str	r0, [sp, #16]
 80170a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d05e      	beq.n	8017166 <_dtoa_r+0x906>
 80170a8:	9904      	ldr	r1, [sp, #16]
 80170aa:	9803      	ldr	r0, [sp, #12]
 80170ac:	f001 f850 	bl	8018150 <__mcmp>
 80170b0:	2800      	cmp	r0, #0
 80170b2:	da58      	bge.n	8017166 <_dtoa_r+0x906>
 80170b4:	2300      	movs	r3, #0
 80170b6:	220a      	movs	r2, #10
 80170b8:	9903      	ldr	r1, [sp, #12]
 80170ba:	9802      	ldr	r0, [sp, #8]
 80170bc:	f000 fe56 	bl	8017d6c <__multadd>
 80170c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170c2:	3f01      	subs	r7, #1
 80170c4:	9003      	str	r0, [sp, #12]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d100      	bne.n	80170cc <_dtoa_r+0x86c>
 80170ca:	e190      	b.n	80173ee <_dtoa_r+0xb8e>
 80170cc:	2300      	movs	r3, #0
 80170ce:	0031      	movs	r1, r6
 80170d0:	220a      	movs	r2, #10
 80170d2:	9802      	ldr	r0, [sp, #8]
 80170d4:	f000 fe4a 	bl	8017d6c <__multadd>
 80170d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170da:	0006      	movs	r6, r0
 80170dc:	2b00      	cmp	r3, #0
 80170de:	dd00      	ble.n	80170e2 <_dtoa_r+0x882>
 80170e0:	e088      	b.n	80171f4 <_dtoa_r+0x994>
 80170e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80170e4:	2b02      	cmp	r3, #2
 80170e6:	dc00      	bgt.n	80170ea <_dtoa_r+0x88a>
 80170e8:	e084      	b.n	80171f4 <_dtoa_r+0x994>
 80170ea:	e044      	b.n	8017176 <_dtoa_r+0x916>
 80170ec:	2336      	movs	r3, #54	; 0x36
 80170ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80170f0:	1a9b      	subs	r3, r3, r2
 80170f2:	e747      	b.n	8016f84 <_dtoa_r+0x724>
 80170f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170f6:	1e5d      	subs	r5, r3, #1
 80170f8:	9b04      	ldr	r3, [sp, #16]
 80170fa:	42ab      	cmp	r3, r5
 80170fc:	db08      	blt.n	8017110 <_dtoa_r+0x8b0>
 80170fe:	1b5d      	subs	r5, r3, r5
 8017100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017102:	2b00      	cmp	r3, #0
 8017104:	da0c      	bge.n	8017120 <_dtoa_r+0x8c0>
 8017106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017108:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801710a:	1a9c      	subs	r4, r3, r2
 801710c:	2300      	movs	r3, #0
 801710e:	e73b      	b.n	8016f88 <_dtoa_r+0x728>
 8017110:	9b04      	ldr	r3, [sp, #16]
 8017112:	9504      	str	r5, [sp, #16]
 8017114:	1aea      	subs	r2, r5, r3
 8017116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017118:	2500      	movs	r5, #0
 801711a:	189b      	adds	r3, r3, r2
 801711c:	9311      	str	r3, [sp, #68]	; 0x44
 801711e:	e7ef      	b.n	8017100 <_dtoa_r+0x8a0>
 8017120:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017124:	e730      	b.n	8016f88 <_dtoa_r+0x728>
 8017126:	9d04      	ldr	r5, [sp, #16]
 8017128:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801712a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 801712c:	e737      	b.n	8016f9e <_dtoa_r+0x73e>
 801712e:	9a04      	ldr	r2, [sp, #16]
 8017130:	e764      	b.n	8016ffc <_dtoa_r+0x79c>
 8017132:	2500      	movs	r5, #0
 8017134:	9b04      	ldr	r3, [sp, #16]
 8017136:	9a04      	ldr	r2, [sp, #16]
 8017138:	691b      	ldr	r3, [r3, #16]
 801713a:	9310      	str	r3, [sp, #64]	; 0x40
 801713c:	3303      	adds	r3, #3
 801713e:	009b      	lsls	r3, r3, #2
 8017140:	18d3      	adds	r3, r2, r3
 8017142:	6858      	ldr	r0, [r3, #4]
 8017144:	f000 fe8e 	bl	8017e64 <__hi0bits>
 8017148:	2320      	movs	r3, #32
 801714a:	1a18      	subs	r0, r3, r0
 801714c:	e785      	b.n	801705a <_dtoa_r+0x7fa>
 801714e:	2b04      	cmp	r3, #4
 8017150:	d095      	beq.n	801707e <_dtoa_r+0x81e>
 8017152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017154:	331c      	adds	r3, #28
 8017156:	18d2      	adds	r2, r2, r3
 8017158:	920a      	str	r2, [sp, #40]	; 0x28
 801715a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801715c:	18e4      	adds	r4, r4, r3
 801715e:	18d3      	adds	r3, r2, r3
 8017160:	e78c      	b.n	801707c <_dtoa_r+0x81c>
 8017162:	0003      	movs	r3, r0
 8017164:	e7f5      	b.n	8017152 <_dtoa_r+0x8f2>
 8017166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017168:	2b00      	cmp	r3, #0
 801716a:	dc3d      	bgt.n	80171e8 <_dtoa_r+0x988>
 801716c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801716e:	2b02      	cmp	r3, #2
 8017170:	dd3a      	ble.n	80171e8 <_dtoa_r+0x988>
 8017172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017174:	930c      	str	r3, [sp, #48]	; 0x30
 8017176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017178:	2b00      	cmp	r3, #0
 801717a:	d10c      	bne.n	8017196 <_dtoa_r+0x936>
 801717c:	9904      	ldr	r1, [sp, #16]
 801717e:	2205      	movs	r2, #5
 8017180:	9802      	ldr	r0, [sp, #8]
 8017182:	f000 fdf3 	bl	8017d6c <__multadd>
 8017186:	9004      	str	r0, [sp, #16]
 8017188:	0001      	movs	r1, r0
 801718a:	9803      	ldr	r0, [sp, #12]
 801718c:	f000 ffe0 	bl	8018150 <__mcmp>
 8017190:	2800      	cmp	r0, #0
 8017192:	dd00      	ble.n	8017196 <_dtoa_r+0x936>
 8017194:	e5ad      	b.n	8016cf2 <_dtoa_r+0x492>
 8017196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017198:	9d08      	ldr	r5, [sp, #32]
 801719a:	43df      	mvns	r7, r3
 801719c:	2300      	movs	r3, #0
 801719e:	9309      	str	r3, [sp, #36]	; 0x24
 80171a0:	9904      	ldr	r1, [sp, #16]
 80171a2:	9802      	ldr	r0, [sp, #8]
 80171a4:	f000 fdd8 	bl	8017d58 <_Bfree>
 80171a8:	2e00      	cmp	r6, #0
 80171aa:	d100      	bne.n	80171ae <_dtoa_r+0x94e>
 80171ac:	e69b      	b.n	8016ee6 <_dtoa_r+0x686>
 80171ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d005      	beq.n	80171c0 <_dtoa_r+0x960>
 80171b4:	42b3      	cmp	r3, r6
 80171b6:	d003      	beq.n	80171c0 <_dtoa_r+0x960>
 80171b8:	0019      	movs	r1, r3
 80171ba:	9802      	ldr	r0, [sp, #8]
 80171bc:	f000 fdcc 	bl	8017d58 <_Bfree>
 80171c0:	0031      	movs	r1, r6
 80171c2:	9802      	ldr	r0, [sp, #8]
 80171c4:	f000 fdc8 	bl	8017d58 <_Bfree>
 80171c8:	e68d      	b.n	8016ee6 <_dtoa_r+0x686>
 80171ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171cc:	9304      	str	r3, [sp, #16]
 80171ce:	001e      	movs	r6, r3
 80171d0:	e7e1      	b.n	8017196 <_dtoa_r+0x936>
 80171d2:	2300      	movs	r3, #0
 80171d4:	e7fa      	b.n	80171cc <_dtoa_r+0x96c>
 80171d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80171d8:	0037      	movs	r7, r6
 80171da:	9304      	str	r3, [sp, #16]
 80171dc:	001e      	movs	r6, r3
 80171de:	e588      	b.n	8016cf2 <_dtoa_r+0x492>
 80171e0:	40240000 	.word	0x40240000
 80171e4:	00000433 	.word	0x00000433
 80171e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d100      	bne.n	80171f0 <_dtoa_r+0x990>
 80171ee:	e0b2      	b.n	8017356 <_dtoa_r+0xaf6>
 80171f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171f2:	930c      	str	r3, [sp, #48]	; 0x30
 80171f4:	2c00      	cmp	r4, #0
 80171f6:	dd05      	ble.n	8017204 <_dtoa_r+0x9a4>
 80171f8:	0031      	movs	r1, r6
 80171fa:	0022      	movs	r2, r4
 80171fc:	9802      	ldr	r0, [sp, #8]
 80171fe:	f000 ff55 	bl	80180ac <__lshift>
 8017202:	0006      	movs	r6, r0
 8017204:	0030      	movs	r0, r6
 8017206:	2d00      	cmp	r5, #0
 8017208:	d011      	beq.n	801722e <_dtoa_r+0x9ce>
 801720a:	6871      	ldr	r1, [r6, #4]
 801720c:	9802      	ldr	r0, [sp, #8]
 801720e:	f000 fd7b 	bl	8017d08 <_Balloc>
 8017212:	0031      	movs	r1, r6
 8017214:	0004      	movs	r4, r0
 8017216:	6933      	ldr	r3, [r6, #16]
 8017218:	310c      	adds	r1, #12
 801721a:	1c9a      	adds	r2, r3, #2
 801721c:	0092      	lsls	r2, r2, #2
 801721e:	300c      	adds	r0, #12
 8017220:	f7fc fe59 	bl	8013ed6 <memcpy>
 8017224:	2201      	movs	r2, #1
 8017226:	0021      	movs	r1, r4
 8017228:	9802      	ldr	r0, [sp, #8]
 801722a:	f000 ff3f 	bl	80180ac <__lshift>
 801722e:	9609      	str	r6, [sp, #36]	; 0x24
 8017230:	0006      	movs	r6, r0
 8017232:	9b08      	ldr	r3, [sp, #32]
 8017234:	930a      	str	r3, [sp, #40]	; 0x28
 8017236:	9904      	ldr	r1, [sp, #16]
 8017238:	9803      	ldr	r0, [sp, #12]
 801723a:	f7ff fa8b 	bl	8016754 <quorem>
 801723e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017240:	900d      	str	r0, [sp, #52]	; 0x34
 8017242:	0004      	movs	r4, r0
 8017244:	9803      	ldr	r0, [sp, #12]
 8017246:	f000 ff83 	bl	8018150 <__mcmp>
 801724a:	0032      	movs	r2, r6
 801724c:	9010      	str	r0, [sp, #64]	; 0x40
 801724e:	9904      	ldr	r1, [sp, #16]
 8017250:	9802      	ldr	r0, [sp, #8]
 8017252:	f000 ff97 	bl	8018184 <__mdiff>
 8017256:	2301      	movs	r3, #1
 8017258:	930b      	str	r3, [sp, #44]	; 0x2c
 801725a:	68c3      	ldr	r3, [r0, #12]
 801725c:	3430      	adds	r4, #48	; 0x30
 801725e:	0005      	movs	r5, r0
 8017260:	2b00      	cmp	r3, #0
 8017262:	d104      	bne.n	801726e <_dtoa_r+0xa0e>
 8017264:	0001      	movs	r1, r0
 8017266:	9803      	ldr	r0, [sp, #12]
 8017268:	f000 ff72 	bl	8018150 <__mcmp>
 801726c:	900b      	str	r0, [sp, #44]	; 0x2c
 801726e:	0029      	movs	r1, r5
 8017270:	9802      	ldr	r0, [sp, #8]
 8017272:	f000 fd71 	bl	8017d58 <_Bfree>
 8017276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017278:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801727a:	4313      	orrs	r3, r2
 801727c:	d10e      	bne.n	801729c <_dtoa_r+0xa3c>
 801727e:	9a06      	ldr	r2, [sp, #24]
 8017280:	3301      	adds	r3, #1
 8017282:	4213      	tst	r3, r2
 8017284:	d10a      	bne.n	801729c <_dtoa_r+0xa3c>
 8017286:	2c39      	cmp	r4, #57	; 0x39
 8017288:	d026      	beq.n	80172d8 <_dtoa_r+0xa78>
 801728a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801728c:	2b00      	cmp	r3, #0
 801728e:	dd01      	ble.n	8017294 <_dtoa_r+0xa34>
 8017290:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017292:	3431      	adds	r4, #49	; 0x31
 8017294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017296:	1c5d      	adds	r5, r3, #1
 8017298:	701c      	strb	r4, [r3, #0]
 801729a:	e781      	b.n	80171a0 <_dtoa_r+0x940>
 801729c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801729e:	2b00      	cmp	r3, #0
 80172a0:	db07      	blt.n	80172b2 <_dtoa_r+0xa52>
 80172a2:	001d      	movs	r5, r3
 80172a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80172a6:	431d      	orrs	r5, r3
 80172a8:	d122      	bne.n	80172f0 <_dtoa_r+0xa90>
 80172aa:	2301      	movs	r3, #1
 80172ac:	9a06      	ldr	r2, [sp, #24]
 80172ae:	4213      	tst	r3, r2
 80172b0:	d11e      	bne.n	80172f0 <_dtoa_r+0xa90>
 80172b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	dded      	ble.n	8017294 <_dtoa_r+0xa34>
 80172b8:	9903      	ldr	r1, [sp, #12]
 80172ba:	2201      	movs	r2, #1
 80172bc:	9802      	ldr	r0, [sp, #8]
 80172be:	f000 fef5 	bl	80180ac <__lshift>
 80172c2:	9904      	ldr	r1, [sp, #16]
 80172c4:	9003      	str	r0, [sp, #12]
 80172c6:	f000 ff43 	bl	8018150 <__mcmp>
 80172ca:	2800      	cmp	r0, #0
 80172cc:	dc02      	bgt.n	80172d4 <_dtoa_r+0xa74>
 80172ce:	d1e1      	bne.n	8017294 <_dtoa_r+0xa34>
 80172d0:	07e3      	lsls	r3, r4, #31
 80172d2:	d5df      	bpl.n	8017294 <_dtoa_r+0xa34>
 80172d4:	2c39      	cmp	r4, #57	; 0x39
 80172d6:	d1db      	bne.n	8017290 <_dtoa_r+0xa30>
 80172d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80172dc:	1c5d      	adds	r5, r3, #1
 80172de:	2339      	movs	r3, #57	; 0x39
 80172e0:	7013      	strb	r3, [r2, #0]
 80172e2:	1e6b      	subs	r3, r5, #1
 80172e4:	781a      	ldrb	r2, [r3, #0]
 80172e6:	2a39      	cmp	r2, #57	; 0x39
 80172e8:	d067      	beq.n	80173ba <_dtoa_r+0xb5a>
 80172ea:	3201      	adds	r2, #1
 80172ec:	701a      	strb	r2, [r3, #0]
 80172ee:	e757      	b.n	80171a0 <_dtoa_r+0x940>
 80172f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80172f2:	1c5d      	adds	r5, r3, #1
 80172f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	dd04      	ble.n	8017304 <_dtoa_r+0xaa4>
 80172fa:	2c39      	cmp	r4, #57	; 0x39
 80172fc:	d0ec      	beq.n	80172d8 <_dtoa_r+0xa78>
 80172fe:	3401      	adds	r4, #1
 8017300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017302:	e7c9      	b.n	8017298 <_dtoa_r+0xa38>
 8017304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017306:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017308:	701c      	strb	r4, [r3, #0]
 801730a:	9b08      	ldr	r3, [sp, #32]
 801730c:	1aeb      	subs	r3, r5, r3
 801730e:	4293      	cmp	r3, r2
 8017310:	d03e      	beq.n	8017390 <_dtoa_r+0xb30>
 8017312:	2300      	movs	r3, #0
 8017314:	220a      	movs	r2, #10
 8017316:	9903      	ldr	r1, [sp, #12]
 8017318:	9802      	ldr	r0, [sp, #8]
 801731a:	f000 fd27 	bl	8017d6c <__multadd>
 801731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017320:	9003      	str	r0, [sp, #12]
 8017322:	42b3      	cmp	r3, r6
 8017324:	d109      	bne.n	801733a <_dtoa_r+0xada>
 8017326:	2300      	movs	r3, #0
 8017328:	220a      	movs	r2, #10
 801732a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801732c:	9802      	ldr	r0, [sp, #8]
 801732e:	f000 fd1d 	bl	8017d6c <__multadd>
 8017332:	9009      	str	r0, [sp, #36]	; 0x24
 8017334:	0006      	movs	r6, r0
 8017336:	950a      	str	r5, [sp, #40]	; 0x28
 8017338:	e77d      	b.n	8017236 <_dtoa_r+0x9d6>
 801733a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801733c:	2300      	movs	r3, #0
 801733e:	220a      	movs	r2, #10
 8017340:	9802      	ldr	r0, [sp, #8]
 8017342:	f000 fd13 	bl	8017d6c <__multadd>
 8017346:	2300      	movs	r3, #0
 8017348:	9009      	str	r0, [sp, #36]	; 0x24
 801734a:	220a      	movs	r2, #10
 801734c:	0031      	movs	r1, r6
 801734e:	9802      	ldr	r0, [sp, #8]
 8017350:	f000 fd0c 	bl	8017d6c <__multadd>
 8017354:	e7ee      	b.n	8017334 <_dtoa_r+0xad4>
 8017356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017358:	930c      	str	r3, [sp, #48]	; 0x30
 801735a:	9b08      	ldr	r3, [sp, #32]
 801735c:	9306      	str	r3, [sp, #24]
 801735e:	9904      	ldr	r1, [sp, #16]
 8017360:	9803      	ldr	r0, [sp, #12]
 8017362:	f7ff f9f7 	bl	8016754 <quorem>
 8017366:	9b06      	ldr	r3, [sp, #24]
 8017368:	3030      	adds	r0, #48	; 0x30
 801736a:	1c5d      	adds	r5, r3, #1
 801736c:	7018      	strb	r0, [r3, #0]
 801736e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017370:	9b08      	ldr	r3, [sp, #32]
 8017372:	0004      	movs	r4, r0
 8017374:	1aeb      	subs	r3, r5, r3
 8017376:	429a      	cmp	r2, r3
 8017378:	dd08      	ble.n	801738c <_dtoa_r+0xb2c>
 801737a:	2300      	movs	r3, #0
 801737c:	220a      	movs	r2, #10
 801737e:	9903      	ldr	r1, [sp, #12]
 8017380:	9802      	ldr	r0, [sp, #8]
 8017382:	f000 fcf3 	bl	8017d6c <__multadd>
 8017386:	9506      	str	r5, [sp, #24]
 8017388:	9003      	str	r0, [sp, #12]
 801738a:	e7e8      	b.n	801735e <_dtoa_r+0xafe>
 801738c:	2300      	movs	r3, #0
 801738e:	9309      	str	r3, [sp, #36]	; 0x24
 8017390:	9903      	ldr	r1, [sp, #12]
 8017392:	2201      	movs	r2, #1
 8017394:	9802      	ldr	r0, [sp, #8]
 8017396:	f000 fe89 	bl	80180ac <__lshift>
 801739a:	9904      	ldr	r1, [sp, #16]
 801739c:	9003      	str	r0, [sp, #12]
 801739e:	f000 fed7 	bl	8018150 <__mcmp>
 80173a2:	2800      	cmp	r0, #0
 80173a4:	dc9d      	bgt.n	80172e2 <_dtoa_r+0xa82>
 80173a6:	d101      	bne.n	80173ac <_dtoa_r+0xb4c>
 80173a8:	07e3      	lsls	r3, r4, #31
 80173aa:	d49a      	bmi.n	80172e2 <_dtoa_r+0xa82>
 80173ac:	1e6b      	subs	r3, r5, #1
 80173ae:	781a      	ldrb	r2, [r3, #0]
 80173b0:	2a30      	cmp	r2, #48	; 0x30
 80173b2:	d000      	beq.n	80173b6 <_dtoa_r+0xb56>
 80173b4:	e6f4      	b.n	80171a0 <_dtoa_r+0x940>
 80173b6:	001d      	movs	r5, r3
 80173b8:	e7f8      	b.n	80173ac <_dtoa_r+0xb4c>
 80173ba:	9a08      	ldr	r2, [sp, #32]
 80173bc:	429a      	cmp	r2, r3
 80173be:	d103      	bne.n	80173c8 <_dtoa_r+0xb68>
 80173c0:	2331      	movs	r3, #49	; 0x31
 80173c2:	3701      	adds	r7, #1
 80173c4:	7013      	strb	r3, [r2, #0]
 80173c6:	e6eb      	b.n	80171a0 <_dtoa_r+0x940>
 80173c8:	001d      	movs	r5, r3
 80173ca:	e78a      	b.n	80172e2 <_dtoa_r+0xa82>
 80173cc:	4b0b      	ldr	r3, [pc, #44]	; (80173fc <_dtoa_r+0xb9c>)
 80173ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80173d0:	9308      	str	r3, [sp, #32]
 80173d2:	4b0b      	ldr	r3, [pc, #44]	; (8017400 <_dtoa_r+0xba0>)
 80173d4:	2a00      	cmp	r2, #0
 80173d6:	d001      	beq.n	80173dc <_dtoa_r+0xb7c>
 80173d8:	f7ff fa75 	bl	80168c6 <_dtoa_r+0x66>
 80173dc:	f7ff fa75 	bl	80168ca <_dtoa_r+0x6a>
 80173e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80173e2:	2b01      	cmp	r3, #1
 80173e4:	dc00      	bgt.n	80173e8 <_dtoa_r+0xb88>
 80173e6:	e621      	b.n	801702c <_dtoa_r+0x7cc>
 80173e8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80173ea:	2001      	movs	r0, #1
 80173ec:	e635      	b.n	801705a <_dtoa_r+0x7fa>
 80173ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	dcb2      	bgt.n	801735a <_dtoa_r+0xafa>
 80173f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80173f6:	2b02      	cmp	r3, #2
 80173f8:	ddaf      	ble.n	801735a <_dtoa_r+0xafa>
 80173fa:	e6bc      	b.n	8017176 <_dtoa_r+0x916>
 80173fc:	0801b9dd 	.word	0x0801b9dd
 8017400:	0801b9e5 	.word	0x0801b9e5

08017404 <__errno>:
 8017404:	4b01      	ldr	r3, [pc, #4]	; (801740c <__errno+0x8>)
 8017406:	6818      	ldr	r0, [r3, #0]
 8017408:	4770      	bx	lr
 801740a:	46c0      	nop			; (mov r8, r8)
 801740c:	2000011c 	.word	0x2000011c

08017410 <__libc_fini_array>:
 8017410:	b570      	push	{r4, r5, r6, lr}
 8017412:	4d07      	ldr	r5, [pc, #28]	; (8017430 <__libc_fini_array+0x20>)
 8017414:	4c07      	ldr	r4, [pc, #28]	; (8017434 <__libc_fini_array+0x24>)
 8017416:	1b64      	subs	r4, r4, r5
 8017418:	10a4      	asrs	r4, r4, #2
 801741a:	2c00      	cmp	r4, #0
 801741c:	d102      	bne.n	8017424 <__libc_fini_array+0x14>
 801741e:	f001 f987 	bl	8018730 <_fini>
 8017422:	bd70      	pop	{r4, r5, r6, pc}
 8017424:	3c01      	subs	r4, #1
 8017426:	00a3      	lsls	r3, r4, #2
 8017428:	58eb      	ldr	r3, [r5, r3]
 801742a:	4798      	blx	r3
 801742c:	e7f5      	b.n	801741a <__libc_fini_array+0xa>
 801742e:	46c0      	nop			; (mov r8, r8)
 8017430:	0801bafc 	.word	0x0801bafc
 8017434:	0801bb00 	.word	0x0801bb00

08017438 <_malloc_trim_r>:
 8017438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801743a:	0005      	movs	r5, r0
 801743c:	2008      	movs	r0, #8
 801743e:	000c      	movs	r4, r1
 8017440:	f7ff f95c 	bl	80166fc <sysconf>
 8017444:	0007      	movs	r7, r0
 8017446:	0028      	movs	r0, r5
 8017448:	f7fc fd56 	bl	8013ef8 <__malloc_lock>
 801744c:	2203      	movs	r2, #3
 801744e:	4e21      	ldr	r6, [pc, #132]	; (80174d4 <_malloc_trim_r+0x9c>)
 8017450:	0039      	movs	r1, r7
 8017452:	68b3      	ldr	r3, [r6, #8]
 8017454:	685b      	ldr	r3, [r3, #4]
 8017456:	4393      	bics	r3, r2
 8017458:	1b18      	subs	r0, r3, r4
 801745a:	3811      	subs	r0, #17
 801745c:	19c0      	adds	r0, r0, r7
 801745e:	9301      	str	r3, [sp, #4]
 8017460:	f7e8 fe76 	bl	8000150 <__udivsi3>
 8017464:	1e44      	subs	r4, r0, #1
 8017466:	437c      	muls	r4, r7
 8017468:	42a7      	cmp	r7, r4
 801746a:	dd04      	ble.n	8017476 <_malloc_trim_r+0x3e>
 801746c:	0028      	movs	r0, r5
 801746e:	f7fc fd4b 	bl	8013f08 <__malloc_unlock>
 8017472:	2000      	movs	r0, #0
 8017474:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017476:	2100      	movs	r1, #0
 8017478:	0028      	movs	r0, r5
 801747a:	f7fc ff1d 	bl	80142b8 <_sbrk_r>
 801747e:	68b3      	ldr	r3, [r6, #8]
 8017480:	9a01      	ldr	r2, [sp, #4]
 8017482:	189b      	adds	r3, r3, r2
 8017484:	4298      	cmp	r0, r3
 8017486:	d1f1      	bne.n	801746c <_malloc_trim_r+0x34>
 8017488:	4261      	negs	r1, r4
 801748a:	0028      	movs	r0, r5
 801748c:	f7fc ff14 	bl	80142b8 <_sbrk_r>
 8017490:	1c43      	adds	r3, r0, #1
 8017492:	d110      	bne.n	80174b6 <_malloc_trim_r+0x7e>
 8017494:	2100      	movs	r1, #0
 8017496:	0028      	movs	r0, r5
 8017498:	f7fc ff0e 	bl	80142b8 <_sbrk_r>
 801749c:	68b2      	ldr	r2, [r6, #8]
 801749e:	1a81      	subs	r1, r0, r2
 80174a0:	290f      	cmp	r1, #15
 80174a2:	dde3      	ble.n	801746c <_malloc_trim_r+0x34>
 80174a4:	4b0c      	ldr	r3, [pc, #48]	; (80174d8 <_malloc_trim_r+0xa0>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	1ac0      	subs	r0, r0, r3
 80174aa:	4b0c      	ldr	r3, [pc, #48]	; (80174dc <_malloc_trim_r+0xa4>)
 80174ac:	6018      	str	r0, [r3, #0]
 80174ae:	2301      	movs	r3, #1
 80174b0:	430b      	orrs	r3, r1
 80174b2:	6053      	str	r3, [r2, #4]
 80174b4:	e7da      	b.n	801746c <_malloc_trim_r+0x34>
 80174b6:	68b2      	ldr	r2, [r6, #8]
 80174b8:	2601      	movs	r6, #1
 80174ba:	9b01      	ldr	r3, [sp, #4]
 80174bc:	0028      	movs	r0, r5
 80174be:	1b1b      	subs	r3, r3, r4
 80174c0:	4333      	orrs	r3, r6
 80174c2:	6053      	str	r3, [r2, #4]
 80174c4:	4b05      	ldr	r3, [pc, #20]	; (80174dc <_malloc_trim_r+0xa4>)
 80174c6:	681a      	ldr	r2, [r3, #0]
 80174c8:	1b14      	subs	r4, r2, r4
 80174ca:	601c      	str	r4, [r3, #0]
 80174cc:	f7fc fd1c 	bl	8013f08 <__malloc_unlock>
 80174d0:	0030      	movs	r0, r6
 80174d2:	e7cf      	b.n	8017474 <_malloc_trim_r+0x3c>
 80174d4:	200006b4 	.word	0x200006b4
 80174d8:	20000abc 	.word	0x20000abc
 80174dc:	20006950 	.word	0x20006950

080174e0 <_free_r>:
 80174e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80174e2:	1e0d      	subs	r5, r1, #0
 80174e4:	9001      	str	r0, [sp, #4]
 80174e6:	d02d      	beq.n	8017544 <_free_r+0x64>
 80174e8:	f7fc fd06 	bl	8013ef8 <__malloc_lock>
 80174ec:	2301      	movs	r3, #1
 80174ee:	0029      	movs	r1, r5
 80174f0:	469c      	mov	ip, r3
 80174f2:	3908      	subs	r1, #8
 80174f4:	684f      	ldr	r7, [r1, #4]
 80174f6:	4662      	mov	r2, ip
 80174f8:	003b      	movs	r3, r7
 80174fa:	4666      	mov	r6, ip
 80174fc:	4393      	bics	r3, r2
 80174fe:	18c8      	adds	r0, r1, r3
 8017500:	6845      	ldr	r5, [r0, #4]
 8017502:	3202      	adds	r2, #2
 8017504:	4395      	bics	r5, r2
 8017506:	4a4a      	ldr	r2, [pc, #296]	; (8017630 <_free_r+0x150>)
 8017508:	4037      	ands	r7, r6
 801750a:	6896      	ldr	r6, [r2, #8]
 801750c:	4286      	cmp	r6, r0
 801750e:	d11a      	bne.n	8017546 <_free_r+0x66>
 8017510:	195b      	adds	r3, r3, r5
 8017512:	2f00      	cmp	r7, #0
 8017514:	d106      	bne.n	8017524 <_free_r+0x44>
 8017516:	6808      	ldr	r0, [r1, #0]
 8017518:	1a09      	subs	r1, r1, r0
 801751a:	688d      	ldr	r5, [r1, #8]
 801751c:	181b      	adds	r3, r3, r0
 801751e:	68c8      	ldr	r0, [r1, #12]
 8017520:	60e8      	str	r0, [r5, #12]
 8017522:	6085      	str	r5, [r0, #8]
 8017524:	2001      	movs	r0, #1
 8017526:	4318      	orrs	r0, r3
 8017528:	6048      	str	r0, [r1, #4]
 801752a:	6091      	str	r1, [r2, #8]
 801752c:	4a41      	ldr	r2, [pc, #260]	; (8017634 <_free_r+0x154>)
 801752e:	6812      	ldr	r2, [r2, #0]
 8017530:	429a      	cmp	r2, r3
 8017532:	d804      	bhi.n	801753e <_free_r+0x5e>
 8017534:	4b40      	ldr	r3, [pc, #256]	; (8017638 <_free_r+0x158>)
 8017536:	9801      	ldr	r0, [sp, #4]
 8017538:	6819      	ldr	r1, [r3, #0]
 801753a:	f7ff ff7d 	bl	8017438 <_malloc_trim_r>
 801753e:	9801      	ldr	r0, [sp, #4]
 8017540:	f7fc fce2 	bl	8013f08 <__malloc_unlock>
 8017544:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017546:	2600      	movs	r6, #0
 8017548:	6045      	str	r5, [r0, #4]
 801754a:	42b7      	cmp	r7, r6
 801754c:	d109      	bne.n	8017562 <_free_r+0x82>
 801754e:	680f      	ldr	r7, [r1, #0]
 8017550:	4c3a      	ldr	r4, [pc, #232]	; (801763c <_free_r+0x15c>)
 8017552:	1bc9      	subs	r1, r1, r7
 8017554:	19db      	adds	r3, r3, r7
 8017556:	688f      	ldr	r7, [r1, #8]
 8017558:	42a7      	cmp	r7, r4
 801755a:	d02b      	beq.n	80175b4 <_free_r+0xd4>
 801755c:	68cc      	ldr	r4, [r1, #12]
 801755e:	60fc      	str	r4, [r7, #12]
 8017560:	60a7      	str	r7, [r4, #8]
 8017562:	1947      	adds	r7, r0, r5
 8017564:	687c      	ldr	r4, [r7, #4]
 8017566:	2701      	movs	r7, #1
 8017568:	423c      	tst	r4, r7
 801756a:	d10b      	bne.n	8017584 <_free_r+0xa4>
 801756c:	195b      	adds	r3, r3, r5
 801756e:	6885      	ldr	r5, [r0, #8]
 8017570:	2e00      	cmp	r6, #0
 8017572:	d121      	bne.n	80175b8 <_free_r+0xd8>
 8017574:	4c31      	ldr	r4, [pc, #196]	; (801763c <_free_r+0x15c>)
 8017576:	42a5      	cmp	r5, r4
 8017578:	d11e      	bne.n	80175b8 <_free_r+0xd8>
 801757a:	003e      	movs	r6, r7
 801757c:	6151      	str	r1, [r2, #20]
 801757e:	6111      	str	r1, [r2, #16]
 8017580:	60cd      	str	r5, [r1, #12]
 8017582:	608d      	str	r5, [r1, #8]
 8017584:	2001      	movs	r0, #1
 8017586:	0005      	movs	r5, r0
 8017588:	431d      	orrs	r5, r3
 801758a:	604d      	str	r5, [r1, #4]
 801758c:	50cb      	str	r3, [r1, r3]
 801758e:	2e00      	cmp	r6, #0
 8017590:	d1d5      	bne.n	801753e <_free_r+0x5e>
 8017592:	4d2b      	ldr	r5, [pc, #172]	; (8017640 <_free_r+0x160>)
 8017594:	42ab      	cmp	r3, r5
 8017596:	d813      	bhi.n	80175c0 <_free_r+0xe0>
 8017598:	08db      	lsrs	r3, r3, #3
 801759a:	109d      	asrs	r5, r3, #2
 801759c:	40a8      	lsls	r0, r5
 801759e:	6854      	ldr	r4, [r2, #4]
 80175a0:	00db      	lsls	r3, r3, #3
 80175a2:	4320      	orrs	r0, r4
 80175a4:	6050      	str	r0, [r2, #4]
 80175a6:	189a      	adds	r2, r3, r2
 80175a8:	6893      	ldr	r3, [r2, #8]
 80175aa:	60ca      	str	r2, [r1, #12]
 80175ac:	608b      	str	r3, [r1, #8]
 80175ae:	6091      	str	r1, [r2, #8]
 80175b0:	60d9      	str	r1, [r3, #12]
 80175b2:	e7c4      	b.n	801753e <_free_r+0x5e>
 80175b4:	4666      	mov	r6, ip
 80175b6:	e7d4      	b.n	8017562 <_free_r+0x82>
 80175b8:	68c0      	ldr	r0, [r0, #12]
 80175ba:	60e8      	str	r0, [r5, #12]
 80175bc:	6085      	str	r5, [r0, #8]
 80175be:	e7e1      	b.n	8017584 <_free_r+0xa4>
 80175c0:	0a5d      	lsrs	r5, r3, #9
 80175c2:	2d04      	cmp	r5, #4
 80175c4:	d812      	bhi.n	80175ec <_free_r+0x10c>
 80175c6:	0998      	lsrs	r0, r3, #6
 80175c8:	3038      	adds	r0, #56	; 0x38
 80175ca:	00c6      	lsls	r6, r0, #3
 80175cc:	18b6      	adds	r6, r6, r2
 80175ce:	68b5      	ldr	r5, [r6, #8]
 80175d0:	2703      	movs	r7, #3
 80175d2:	42ae      	cmp	r6, r5
 80175d4:	d125      	bne.n	8017622 <_free_r+0x142>
 80175d6:	2301      	movs	r3, #1
 80175d8:	1080      	asrs	r0, r0, #2
 80175da:	4083      	lsls	r3, r0
 80175dc:	6850      	ldr	r0, [r2, #4]
 80175de:	4303      	orrs	r3, r0
 80175e0:	6053      	str	r3, [r2, #4]
 80175e2:	60ce      	str	r6, [r1, #12]
 80175e4:	608d      	str	r5, [r1, #8]
 80175e6:	60b1      	str	r1, [r6, #8]
 80175e8:	60e9      	str	r1, [r5, #12]
 80175ea:	e7a8      	b.n	801753e <_free_r+0x5e>
 80175ec:	2d14      	cmp	r5, #20
 80175ee:	d802      	bhi.n	80175f6 <_free_r+0x116>
 80175f0:	0028      	movs	r0, r5
 80175f2:	305b      	adds	r0, #91	; 0x5b
 80175f4:	e7e9      	b.n	80175ca <_free_r+0xea>
 80175f6:	2d54      	cmp	r5, #84	; 0x54
 80175f8:	d802      	bhi.n	8017600 <_free_r+0x120>
 80175fa:	0b18      	lsrs	r0, r3, #12
 80175fc:	306e      	adds	r0, #110	; 0x6e
 80175fe:	e7e4      	b.n	80175ca <_free_r+0xea>
 8017600:	20aa      	movs	r0, #170	; 0xaa
 8017602:	0040      	lsls	r0, r0, #1
 8017604:	4285      	cmp	r5, r0
 8017606:	d802      	bhi.n	801760e <_free_r+0x12e>
 8017608:	0bd8      	lsrs	r0, r3, #15
 801760a:	3077      	adds	r0, #119	; 0x77
 801760c:	e7dd      	b.n	80175ca <_free_r+0xea>
 801760e:	4e0d      	ldr	r6, [pc, #52]	; (8017644 <_free_r+0x164>)
 8017610:	207e      	movs	r0, #126	; 0x7e
 8017612:	42b5      	cmp	r5, r6
 8017614:	d8d9      	bhi.n	80175ca <_free_r+0xea>
 8017616:	0c98      	lsrs	r0, r3, #18
 8017618:	307c      	adds	r0, #124	; 0x7c
 801761a:	e7d6      	b.n	80175ca <_free_r+0xea>
 801761c:	68ad      	ldr	r5, [r5, #8]
 801761e:	42ae      	cmp	r6, r5
 8017620:	d003      	beq.n	801762a <_free_r+0x14a>
 8017622:	686a      	ldr	r2, [r5, #4]
 8017624:	43ba      	bics	r2, r7
 8017626:	429a      	cmp	r2, r3
 8017628:	d8f8      	bhi.n	801761c <_free_r+0x13c>
 801762a:	68ee      	ldr	r6, [r5, #12]
 801762c:	e7d9      	b.n	80175e2 <_free_r+0x102>
 801762e:	46c0      	nop			; (mov r8, r8)
 8017630:	200006b4 	.word	0x200006b4
 8017634:	20000ac0 	.word	0x20000ac0
 8017638:	20006980 	.word	0x20006980
 801763c:	200006bc 	.word	0x200006bc
 8017640:	000001ff 	.word	0x000001ff
 8017644:	00000554 	.word	0x00000554

08017648 <rshift>:
 8017648:	b5f0      	push	{r4, r5, r6, r7, lr}
 801764a:	0004      	movs	r4, r0
 801764c:	6905      	ldr	r5, [r0, #16]
 801764e:	3414      	adds	r4, #20
 8017650:	114b      	asrs	r3, r1, #5
 8017652:	0026      	movs	r6, r4
 8017654:	429d      	cmp	r5, r3
 8017656:	dd14      	ble.n	8017682 <rshift+0x3a>
 8017658:	221f      	movs	r2, #31
 801765a:	00ad      	lsls	r5, r5, #2
 801765c:	009b      	lsls	r3, r3, #2
 801765e:	4011      	ands	r1, r2
 8017660:	1965      	adds	r5, r4, r5
 8017662:	18e3      	adds	r3, r4, r3
 8017664:	0022      	movs	r2, r4
 8017666:	2900      	cmp	r1, #0
 8017668:	d01e      	beq.n	80176a8 <rshift+0x60>
 801766a:	cb04      	ldmia	r3!, {r2}
 801766c:	2720      	movs	r7, #32
 801766e:	40ca      	lsrs	r2, r1
 8017670:	46a4      	mov	ip, r4
 8017672:	1a7f      	subs	r7, r7, r1
 8017674:	4666      	mov	r6, ip
 8017676:	429d      	cmp	r5, r3
 8017678:	d80b      	bhi.n	8017692 <rshift+0x4a>
 801767a:	6032      	str	r2, [r6, #0]
 801767c:	2a00      	cmp	r2, #0
 801767e:	d000      	beq.n	8017682 <rshift+0x3a>
 8017680:	3604      	adds	r6, #4
 8017682:	1b33      	subs	r3, r6, r4
 8017684:	109b      	asrs	r3, r3, #2
 8017686:	6103      	str	r3, [r0, #16]
 8017688:	42a6      	cmp	r6, r4
 801768a:	d101      	bne.n	8017690 <rshift+0x48>
 801768c:	2300      	movs	r3, #0
 801768e:	6143      	str	r3, [r0, #20]
 8017690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017692:	681e      	ldr	r6, [r3, #0]
 8017694:	40be      	lsls	r6, r7
 8017696:	4332      	orrs	r2, r6
 8017698:	4666      	mov	r6, ip
 801769a:	c604      	stmia	r6!, {r2}
 801769c:	cb04      	ldmia	r3!, {r2}
 801769e:	46b4      	mov	ip, r6
 80176a0:	40ca      	lsrs	r2, r1
 80176a2:	e7e7      	b.n	8017674 <rshift+0x2c>
 80176a4:	cb02      	ldmia	r3!, {r1}
 80176a6:	c202      	stmia	r2!, {r1}
 80176a8:	0016      	movs	r6, r2
 80176aa:	429d      	cmp	r5, r3
 80176ac:	d8fa      	bhi.n	80176a4 <rshift+0x5c>
 80176ae:	e7e8      	b.n	8017682 <rshift+0x3a>

080176b0 <__hexdig_fun>:
 80176b0:	0003      	movs	r3, r0
 80176b2:	3b30      	subs	r3, #48	; 0x30
 80176b4:	2b09      	cmp	r3, #9
 80176b6:	d803      	bhi.n	80176c0 <__hexdig_fun+0x10>
 80176b8:	3820      	subs	r0, #32
 80176ba:	b2c3      	uxtb	r3, r0
 80176bc:	0018      	movs	r0, r3
 80176be:	4770      	bx	lr
 80176c0:	0003      	movs	r3, r0
 80176c2:	3b61      	subs	r3, #97	; 0x61
 80176c4:	2b05      	cmp	r3, #5
 80176c6:	d801      	bhi.n	80176cc <__hexdig_fun+0x1c>
 80176c8:	3847      	subs	r0, #71	; 0x47
 80176ca:	e7f6      	b.n	80176ba <__hexdig_fun+0xa>
 80176cc:	0002      	movs	r2, r0
 80176ce:	3a41      	subs	r2, #65	; 0x41
 80176d0:	2300      	movs	r3, #0
 80176d2:	2a05      	cmp	r2, #5
 80176d4:	d8f2      	bhi.n	80176bc <__hexdig_fun+0xc>
 80176d6:	3827      	subs	r0, #39	; 0x27
 80176d8:	e7ef      	b.n	80176ba <__hexdig_fun+0xa>

080176da <__gethex>:
 80176da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176dc:	b08d      	sub	sp, #52	; 0x34
 80176de:	9005      	str	r0, [sp, #20]
 80176e0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80176e2:	9109      	str	r1, [sp, #36]	; 0x24
 80176e4:	9202      	str	r2, [sp, #8]
 80176e6:	930a      	str	r3, [sp, #40]	; 0x28
 80176e8:	f000 fadf 	bl	8017caa <__localeconv_l>
 80176ec:	6803      	ldr	r3, [r0, #0]
 80176ee:	0018      	movs	r0, r3
 80176f0:	9307      	str	r3, [sp, #28]
 80176f2:	f7e8 fd11 	bl	8000118 <strlen>
 80176f6:	2202      	movs	r2, #2
 80176f8:	9b07      	ldr	r3, [sp, #28]
 80176fa:	4252      	negs	r2, r2
 80176fc:	181b      	adds	r3, r3, r0
 80176fe:	3b01      	subs	r3, #1
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	9004      	str	r0, [sp, #16]
 8017704:	930b      	str	r3, [sp, #44]	; 0x2c
 8017706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017708:	6819      	ldr	r1, [r3, #0]
 801770a:	1c8b      	adds	r3, r1, #2
 801770c:	1a52      	subs	r2, r2, r1
 801770e:	18d1      	adds	r1, r2, r3
 8017710:	9301      	str	r3, [sp, #4]
 8017712:	9108      	str	r1, [sp, #32]
 8017714:	9901      	ldr	r1, [sp, #4]
 8017716:	3301      	adds	r3, #1
 8017718:	7808      	ldrb	r0, [r1, #0]
 801771a:	2830      	cmp	r0, #48	; 0x30
 801771c:	d0f7      	beq.n	801770e <__gethex+0x34>
 801771e:	f7ff ffc7 	bl	80176b0 <__hexdig_fun>
 8017722:	1e07      	subs	r7, r0, #0
 8017724:	d000      	beq.n	8017728 <__gethex+0x4e>
 8017726:	e06f      	b.n	8017808 <__gethex+0x12e>
 8017728:	9a04      	ldr	r2, [sp, #16]
 801772a:	9907      	ldr	r1, [sp, #28]
 801772c:	9801      	ldr	r0, [sp, #4]
 801772e:	f7fc fe4b 	bl	80143c8 <strncmp>
 8017732:	2800      	cmp	r0, #0
 8017734:	d000      	beq.n	8017738 <__gethex+0x5e>
 8017736:	e06d      	b.n	8017814 <__gethex+0x13a>
 8017738:	9b01      	ldr	r3, [sp, #4]
 801773a:	9a04      	ldr	r2, [sp, #16]
 801773c:	189c      	adds	r4, r3, r2
 801773e:	7820      	ldrb	r0, [r4, #0]
 8017740:	f7ff ffb6 	bl	80176b0 <__hexdig_fun>
 8017744:	2800      	cmp	r0, #0
 8017746:	d069      	beq.n	801781c <__gethex+0x142>
 8017748:	9401      	str	r4, [sp, #4]
 801774a:	9b01      	ldr	r3, [sp, #4]
 801774c:	7818      	ldrb	r0, [r3, #0]
 801774e:	2830      	cmp	r0, #48	; 0x30
 8017750:	d009      	beq.n	8017766 <__gethex+0x8c>
 8017752:	f7ff ffad 	bl	80176b0 <__hexdig_fun>
 8017756:	4243      	negs	r3, r0
 8017758:	4143      	adcs	r3, r0
 801775a:	9303      	str	r3, [sp, #12]
 801775c:	2301      	movs	r3, #1
 801775e:	0026      	movs	r6, r4
 8017760:	9308      	str	r3, [sp, #32]
 8017762:	9c01      	ldr	r4, [sp, #4]
 8017764:	e004      	b.n	8017770 <__gethex+0x96>
 8017766:	9b01      	ldr	r3, [sp, #4]
 8017768:	3301      	adds	r3, #1
 801776a:	9301      	str	r3, [sp, #4]
 801776c:	e7ed      	b.n	801774a <__gethex+0x70>
 801776e:	3401      	adds	r4, #1
 8017770:	7820      	ldrb	r0, [r4, #0]
 8017772:	f7ff ff9d 	bl	80176b0 <__hexdig_fun>
 8017776:	2800      	cmp	r0, #0
 8017778:	d1f9      	bne.n	801776e <__gethex+0x94>
 801777a:	9a04      	ldr	r2, [sp, #16]
 801777c:	9907      	ldr	r1, [sp, #28]
 801777e:	0020      	movs	r0, r4
 8017780:	f7fc fe22 	bl	80143c8 <strncmp>
 8017784:	2800      	cmp	r0, #0
 8017786:	d109      	bne.n	801779c <__gethex+0xc2>
 8017788:	2e00      	cmp	r6, #0
 801778a:	d10a      	bne.n	80177a2 <__gethex+0xc8>
 801778c:	9b04      	ldr	r3, [sp, #16]
 801778e:	18e4      	adds	r4, r4, r3
 8017790:	0026      	movs	r6, r4
 8017792:	7820      	ldrb	r0, [r4, #0]
 8017794:	f7ff ff8c 	bl	80176b0 <__hexdig_fun>
 8017798:	2800      	cmp	r0, #0
 801779a:	d139      	bne.n	8017810 <__gethex+0x136>
 801779c:	2700      	movs	r7, #0
 801779e:	42be      	cmp	r6, r7
 80177a0:	d001      	beq.n	80177a6 <__gethex+0xcc>
 80177a2:	1b37      	subs	r7, r6, r4
 80177a4:	00bf      	lsls	r7, r7, #2
 80177a6:	7823      	ldrb	r3, [r4, #0]
 80177a8:	2b50      	cmp	r3, #80	; 0x50
 80177aa:	d001      	beq.n	80177b0 <__gethex+0xd6>
 80177ac:	2b70      	cmp	r3, #112	; 0x70
 80177ae:	d142      	bne.n	8017836 <__gethex+0x15c>
 80177b0:	7863      	ldrb	r3, [r4, #1]
 80177b2:	2b2b      	cmp	r3, #43	; 0x2b
 80177b4:	d034      	beq.n	8017820 <__gethex+0x146>
 80177b6:	2b2d      	cmp	r3, #45	; 0x2d
 80177b8:	d036      	beq.n	8017828 <__gethex+0x14e>
 80177ba:	2300      	movs	r3, #0
 80177bc:	1c66      	adds	r6, r4, #1
 80177be:	9306      	str	r3, [sp, #24]
 80177c0:	7830      	ldrb	r0, [r6, #0]
 80177c2:	f7ff ff75 	bl	80176b0 <__hexdig_fun>
 80177c6:	1e43      	subs	r3, r0, #1
 80177c8:	b2db      	uxtb	r3, r3
 80177ca:	2b18      	cmp	r3, #24
 80177cc:	d833      	bhi.n	8017836 <__gethex+0x15c>
 80177ce:	3810      	subs	r0, #16
 80177d0:	0005      	movs	r5, r0
 80177d2:	3601      	adds	r6, #1
 80177d4:	7830      	ldrb	r0, [r6, #0]
 80177d6:	f7ff ff6b 	bl	80176b0 <__hexdig_fun>
 80177da:	1e43      	subs	r3, r0, #1
 80177dc:	b2db      	uxtb	r3, r3
 80177de:	2b18      	cmp	r3, #24
 80177e0:	d924      	bls.n	801782c <__gethex+0x152>
 80177e2:	9b06      	ldr	r3, [sp, #24]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d000      	beq.n	80177ea <__gethex+0x110>
 80177e8:	426d      	negs	r5, r5
 80177ea:	197f      	adds	r7, r7, r5
 80177ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ee:	601e      	str	r6, [r3, #0]
 80177f0:	9b03      	ldr	r3, [sp, #12]
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d021      	beq.n	801783a <__gethex+0x160>
 80177f6:	9b08      	ldr	r3, [sp, #32]
 80177f8:	2606      	movs	r6, #6
 80177fa:	425a      	negs	r2, r3
 80177fc:	4153      	adcs	r3, r2
 80177fe:	425b      	negs	r3, r3
 8017800:	401e      	ands	r6, r3
 8017802:	0030      	movs	r0, r6
 8017804:	b00d      	add	sp, #52	; 0x34
 8017806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017808:	2300      	movs	r3, #0
 801780a:	9303      	str	r3, [sp, #12]
 801780c:	001e      	movs	r6, r3
 801780e:	e7a8      	b.n	8017762 <__gethex+0x88>
 8017810:	3401      	adds	r4, #1
 8017812:	e7be      	b.n	8017792 <__gethex+0xb8>
 8017814:	9c01      	ldr	r4, [sp, #4]
 8017816:	2301      	movs	r3, #1
 8017818:	9303      	str	r3, [sp, #12]
 801781a:	e7c4      	b.n	80177a6 <__gethex+0xcc>
 801781c:	0007      	movs	r7, r0
 801781e:	e7fa      	b.n	8017816 <__gethex+0x13c>
 8017820:	2300      	movs	r3, #0
 8017822:	9306      	str	r3, [sp, #24]
 8017824:	1ca6      	adds	r6, r4, #2
 8017826:	e7cb      	b.n	80177c0 <__gethex+0xe6>
 8017828:	2301      	movs	r3, #1
 801782a:	e7fa      	b.n	8017822 <__gethex+0x148>
 801782c:	230a      	movs	r3, #10
 801782e:	435d      	muls	r5, r3
 8017830:	182d      	adds	r5, r5, r0
 8017832:	3d10      	subs	r5, #16
 8017834:	e7cd      	b.n	80177d2 <__gethex+0xf8>
 8017836:	0026      	movs	r6, r4
 8017838:	e7d8      	b.n	80177ec <__gethex+0x112>
 801783a:	9b01      	ldr	r3, [sp, #4]
 801783c:	9903      	ldr	r1, [sp, #12]
 801783e:	1ae3      	subs	r3, r4, r3
 8017840:	3b01      	subs	r3, #1
 8017842:	2b07      	cmp	r3, #7
 8017844:	dc47      	bgt.n	80178d6 <__gethex+0x1fc>
 8017846:	9805      	ldr	r0, [sp, #20]
 8017848:	f000 fa5e 	bl	8017d08 <_Balloc>
 801784c:	0003      	movs	r3, r0
 801784e:	3314      	adds	r3, #20
 8017850:	9303      	str	r3, [sp, #12]
 8017852:	9308      	str	r3, [sp, #32]
 8017854:	2300      	movs	r3, #0
 8017856:	0005      	movs	r5, r0
 8017858:	001e      	movs	r6, r3
 801785a:	9306      	str	r3, [sp, #24]
 801785c:	9b01      	ldr	r3, [sp, #4]
 801785e:	42a3      	cmp	r3, r4
 8017860:	d33c      	bcc.n	80178dc <__gethex+0x202>
 8017862:	9c08      	ldr	r4, [sp, #32]
 8017864:	9b03      	ldr	r3, [sp, #12]
 8017866:	c440      	stmia	r4!, {r6}
 8017868:	1ae4      	subs	r4, r4, r3
 801786a:	10a4      	asrs	r4, r4, #2
 801786c:	612c      	str	r4, [r5, #16]
 801786e:	0030      	movs	r0, r6
 8017870:	f000 faf8 	bl	8017e64 <__hi0bits>
 8017874:	9b02      	ldr	r3, [sp, #8]
 8017876:	0164      	lsls	r4, r4, #5
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	1a26      	subs	r6, r4, r0
 801787c:	9301      	str	r3, [sp, #4]
 801787e:	429e      	cmp	r6, r3
 8017880:	dd5f      	ble.n	8017942 <__gethex+0x268>
 8017882:	1af6      	subs	r6, r6, r3
 8017884:	0031      	movs	r1, r6
 8017886:	0028      	movs	r0, r5
 8017888:	f000 fde3 	bl	8018452 <__any_on>
 801788c:	1e04      	subs	r4, r0, #0
 801788e:	d00f      	beq.n	80178b0 <__gethex+0x1d6>
 8017890:	2401      	movs	r4, #1
 8017892:	211f      	movs	r1, #31
 8017894:	0020      	movs	r0, r4
 8017896:	1e73      	subs	r3, r6, #1
 8017898:	4019      	ands	r1, r3
 801789a:	4088      	lsls	r0, r1
 801789c:	0001      	movs	r1, r0
 801789e:	115a      	asrs	r2, r3, #5
 80178a0:	9803      	ldr	r0, [sp, #12]
 80178a2:	0092      	lsls	r2, r2, #2
 80178a4:	5812      	ldr	r2, [r2, r0]
 80178a6:	420a      	tst	r2, r1
 80178a8:	d002      	beq.n	80178b0 <__gethex+0x1d6>
 80178aa:	42a3      	cmp	r3, r4
 80178ac:	dc41      	bgt.n	8017932 <__gethex+0x258>
 80178ae:	2402      	movs	r4, #2
 80178b0:	0031      	movs	r1, r6
 80178b2:	0028      	movs	r0, r5
 80178b4:	f7ff fec8 	bl	8017648 <rshift>
 80178b8:	19bf      	adds	r7, r7, r6
 80178ba:	9b02      	ldr	r3, [sp, #8]
 80178bc:	689b      	ldr	r3, [r3, #8]
 80178be:	9304      	str	r3, [sp, #16]
 80178c0:	42bb      	cmp	r3, r7
 80178c2:	da4e      	bge.n	8017962 <__gethex+0x288>
 80178c4:	0029      	movs	r1, r5
 80178c6:	9805      	ldr	r0, [sp, #20]
 80178c8:	f000 fa46 	bl	8017d58 <_Bfree>
 80178cc:	2300      	movs	r3, #0
 80178ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80178d0:	26a3      	movs	r6, #163	; 0xa3
 80178d2:	6013      	str	r3, [r2, #0]
 80178d4:	e795      	b.n	8017802 <__gethex+0x128>
 80178d6:	3101      	adds	r1, #1
 80178d8:	105b      	asrs	r3, r3, #1
 80178da:	e7b2      	b.n	8017842 <__gethex+0x168>
 80178dc:	1e63      	subs	r3, r4, #1
 80178de:	9309      	str	r3, [sp, #36]	; 0x24
 80178e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80178e2:	781b      	ldrb	r3, [r3, #0]
 80178e4:	4293      	cmp	r3, r2
 80178e6:	d015      	beq.n	8017914 <__gethex+0x23a>
 80178e8:	9b06      	ldr	r3, [sp, #24]
 80178ea:	2b20      	cmp	r3, #32
 80178ec:	d105      	bne.n	80178fa <__gethex+0x220>
 80178ee:	9b08      	ldr	r3, [sp, #32]
 80178f0:	601e      	str	r6, [r3, #0]
 80178f2:	2600      	movs	r6, #0
 80178f4:	3304      	adds	r3, #4
 80178f6:	9308      	str	r3, [sp, #32]
 80178f8:	9606      	str	r6, [sp, #24]
 80178fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178fc:	7818      	ldrb	r0, [r3, #0]
 80178fe:	f7ff fed7 	bl	80176b0 <__hexdig_fun>
 8017902:	230f      	movs	r3, #15
 8017904:	4018      	ands	r0, r3
 8017906:	9b06      	ldr	r3, [sp, #24]
 8017908:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801790a:	4098      	lsls	r0, r3
 801790c:	3304      	adds	r3, #4
 801790e:	4306      	orrs	r6, r0
 8017910:	9306      	str	r3, [sp, #24]
 8017912:	e7a3      	b.n	801785c <__gethex+0x182>
 8017914:	2301      	movs	r3, #1
 8017916:	9a04      	ldr	r2, [sp, #16]
 8017918:	1a9c      	subs	r4, r3, r2
 801791a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801791c:	191c      	adds	r4, r3, r4
 801791e:	9b01      	ldr	r3, [sp, #4]
 8017920:	429c      	cmp	r4, r3
 8017922:	d3e1      	bcc.n	80178e8 <__gethex+0x20e>
 8017924:	9907      	ldr	r1, [sp, #28]
 8017926:	0020      	movs	r0, r4
 8017928:	f7fc fd4e 	bl	80143c8 <strncmp>
 801792c:	2800      	cmp	r0, #0
 801792e:	d1db      	bne.n	80178e8 <__gethex+0x20e>
 8017930:	e794      	b.n	801785c <__gethex+0x182>
 8017932:	1eb1      	subs	r1, r6, #2
 8017934:	0028      	movs	r0, r5
 8017936:	f000 fd8c 	bl	8018452 <__any_on>
 801793a:	2800      	cmp	r0, #0
 801793c:	d0b7      	beq.n	80178ae <__gethex+0x1d4>
 801793e:	2403      	movs	r4, #3
 8017940:	e7b6      	b.n	80178b0 <__gethex+0x1d6>
 8017942:	9b01      	ldr	r3, [sp, #4]
 8017944:	2400      	movs	r4, #0
 8017946:	429e      	cmp	r6, r3
 8017948:	dab7      	bge.n	80178ba <__gethex+0x1e0>
 801794a:	1b9e      	subs	r6, r3, r6
 801794c:	0029      	movs	r1, r5
 801794e:	0032      	movs	r2, r6
 8017950:	9805      	ldr	r0, [sp, #20]
 8017952:	f000 fbab 	bl	80180ac <__lshift>
 8017956:	0003      	movs	r3, r0
 8017958:	3314      	adds	r3, #20
 801795a:	0005      	movs	r5, r0
 801795c:	1bbf      	subs	r7, r7, r6
 801795e:	9303      	str	r3, [sp, #12]
 8017960:	e7ab      	b.n	80178ba <__gethex+0x1e0>
 8017962:	9b02      	ldr	r3, [sp, #8]
 8017964:	685e      	ldr	r6, [r3, #4]
 8017966:	42be      	cmp	r6, r7
 8017968:	dd6b      	ble.n	8017a42 <__gethex+0x368>
 801796a:	9b01      	ldr	r3, [sp, #4]
 801796c:	1bf6      	subs	r6, r6, r7
 801796e:	42b3      	cmp	r3, r6
 8017970:	dc32      	bgt.n	80179d8 <__gethex+0x2fe>
 8017972:	9b02      	ldr	r3, [sp, #8]
 8017974:	68db      	ldr	r3, [r3, #12]
 8017976:	2b02      	cmp	r3, #2
 8017978:	d026      	beq.n	80179c8 <__gethex+0x2ee>
 801797a:	2b03      	cmp	r3, #3
 801797c:	d028      	beq.n	80179d0 <__gethex+0x2f6>
 801797e:	2b01      	cmp	r3, #1
 8017980:	d119      	bne.n	80179b6 <__gethex+0x2dc>
 8017982:	9b01      	ldr	r3, [sp, #4]
 8017984:	42b3      	cmp	r3, r6
 8017986:	d116      	bne.n	80179b6 <__gethex+0x2dc>
 8017988:	2b01      	cmp	r3, #1
 801798a:	dc0d      	bgt.n	80179a8 <__gethex+0x2ce>
 801798c:	9b02      	ldr	r3, [sp, #8]
 801798e:	2662      	movs	r6, #98	; 0x62
 8017990:	685b      	ldr	r3, [r3, #4]
 8017992:	9301      	str	r3, [sp, #4]
 8017994:	9a01      	ldr	r2, [sp, #4]
 8017996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017998:	601a      	str	r2, [r3, #0]
 801799a:	2301      	movs	r3, #1
 801799c:	9a03      	ldr	r2, [sp, #12]
 801799e:	612b      	str	r3, [r5, #16]
 80179a0:	6013      	str	r3, [r2, #0]
 80179a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80179a4:	601d      	str	r5, [r3, #0]
 80179a6:	e72c      	b.n	8017802 <__gethex+0x128>
 80179a8:	9901      	ldr	r1, [sp, #4]
 80179aa:	0028      	movs	r0, r5
 80179ac:	3901      	subs	r1, #1
 80179ae:	f000 fd50 	bl	8018452 <__any_on>
 80179b2:	2800      	cmp	r0, #0
 80179b4:	d1ea      	bne.n	801798c <__gethex+0x2b2>
 80179b6:	0029      	movs	r1, r5
 80179b8:	9805      	ldr	r0, [sp, #20]
 80179ba:	f000 f9cd 	bl	8017d58 <_Bfree>
 80179be:	2300      	movs	r3, #0
 80179c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80179c2:	2650      	movs	r6, #80	; 0x50
 80179c4:	6013      	str	r3, [r2, #0]
 80179c6:	e71c      	b.n	8017802 <__gethex+0x128>
 80179c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d0de      	beq.n	801798c <__gethex+0x2b2>
 80179ce:	e7f2      	b.n	80179b6 <__gethex+0x2dc>
 80179d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d1da      	bne.n	801798c <__gethex+0x2b2>
 80179d6:	e7ee      	b.n	80179b6 <__gethex+0x2dc>
 80179d8:	1e77      	subs	r7, r6, #1
 80179da:	2c00      	cmp	r4, #0
 80179dc:	d12f      	bne.n	8017a3e <__gethex+0x364>
 80179de:	2f00      	cmp	r7, #0
 80179e0:	d004      	beq.n	80179ec <__gethex+0x312>
 80179e2:	0039      	movs	r1, r7
 80179e4:	0028      	movs	r0, r5
 80179e6:	f000 fd34 	bl	8018452 <__any_on>
 80179ea:	0004      	movs	r4, r0
 80179ec:	231f      	movs	r3, #31
 80179ee:	117a      	asrs	r2, r7, #5
 80179f0:	401f      	ands	r7, r3
 80179f2:	3b1e      	subs	r3, #30
 80179f4:	40bb      	lsls	r3, r7
 80179f6:	9903      	ldr	r1, [sp, #12]
 80179f8:	0092      	lsls	r2, r2, #2
 80179fa:	5852      	ldr	r2, [r2, r1]
 80179fc:	421a      	tst	r2, r3
 80179fe:	d001      	beq.n	8017a04 <__gethex+0x32a>
 8017a00:	2302      	movs	r3, #2
 8017a02:	431c      	orrs	r4, r3
 8017a04:	9b01      	ldr	r3, [sp, #4]
 8017a06:	0031      	movs	r1, r6
 8017a08:	1b9b      	subs	r3, r3, r6
 8017a0a:	2602      	movs	r6, #2
 8017a0c:	0028      	movs	r0, r5
 8017a0e:	9301      	str	r3, [sp, #4]
 8017a10:	f7ff fe1a 	bl	8017648 <rshift>
 8017a14:	9b02      	ldr	r3, [sp, #8]
 8017a16:	685f      	ldr	r7, [r3, #4]
 8017a18:	2c00      	cmp	r4, #0
 8017a1a:	d040      	beq.n	8017a9e <__gethex+0x3c4>
 8017a1c:	9b02      	ldr	r3, [sp, #8]
 8017a1e:	68db      	ldr	r3, [r3, #12]
 8017a20:	2b02      	cmp	r3, #2
 8017a22:	d010      	beq.n	8017a46 <__gethex+0x36c>
 8017a24:	2b03      	cmp	r3, #3
 8017a26:	d012      	beq.n	8017a4e <__gethex+0x374>
 8017a28:	2b01      	cmp	r3, #1
 8017a2a:	d106      	bne.n	8017a3a <__gethex+0x360>
 8017a2c:	07a2      	lsls	r2, r4, #30
 8017a2e:	d504      	bpl.n	8017a3a <__gethex+0x360>
 8017a30:	9a03      	ldr	r2, [sp, #12]
 8017a32:	6812      	ldr	r2, [r2, #0]
 8017a34:	4314      	orrs	r4, r2
 8017a36:	421c      	tst	r4, r3
 8017a38:	d10c      	bne.n	8017a54 <__gethex+0x37a>
 8017a3a:	2310      	movs	r3, #16
 8017a3c:	e02e      	b.n	8017a9c <__gethex+0x3c2>
 8017a3e:	2401      	movs	r4, #1
 8017a40:	e7d4      	b.n	80179ec <__gethex+0x312>
 8017a42:	2601      	movs	r6, #1
 8017a44:	e7e8      	b.n	8017a18 <__gethex+0x33e>
 8017a46:	2301      	movs	r3, #1
 8017a48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017a4a:	1a9b      	subs	r3, r3, r2
 8017a4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8017a4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017a50:	2b00      	cmp	r3, #0
 8017a52:	d0f2      	beq.n	8017a3a <__gethex+0x360>
 8017a54:	692c      	ldr	r4, [r5, #16]
 8017a56:	00a3      	lsls	r3, r4, #2
 8017a58:	9304      	str	r3, [sp, #16]
 8017a5a:	002b      	movs	r3, r5
 8017a5c:	00a2      	lsls	r2, r4, #2
 8017a5e:	3314      	adds	r3, #20
 8017a60:	1899      	adds	r1, r3, r2
 8017a62:	2200      	movs	r2, #0
 8017a64:	4694      	mov	ip, r2
 8017a66:	681a      	ldr	r2, [r3, #0]
 8017a68:	1c50      	adds	r0, r2, #1
 8017a6a:	d01d      	beq.n	8017aa8 <__gethex+0x3ce>
 8017a6c:	3201      	adds	r2, #1
 8017a6e:	601a      	str	r2, [r3, #0]
 8017a70:	002b      	movs	r3, r5
 8017a72:	3314      	adds	r3, #20
 8017a74:	2e02      	cmp	r6, #2
 8017a76:	d13a      	bne.n	8017aee <__gethex+0x414>
 8017a78:	9a02      	ldr	r2, [sp, #8]
 8017a7a:	9901      	ldr	r1, [sp, #4]
 8017a7c:	6812      	ldr	r2, [r2, #0]
 8017a7e:	3a01      	subs	r2, #1
 8017a80:	428a      	cmp	r2, r1
 8017a82:	d10a      	bne.n	8017a9a <__gethex+0x3c0>
 8017a84:	114a      	asrs	r2, r1, #5
 8017a86:	211f      	movs	r1, #31
 8017a88:	9801      	ldr	r0, [sp, #4]
 8017a8a:	0092      	lsls	r2, r2, #2
 8017a8c:	4001      	ands	r1, r0
 8017a8e:	2001      	movs	r0, #1
 8017a90:	0004      	movs	r4, r0
 8017a92:	408c      	lsls	r4, r1
 8017a94:	58d3      	ldr	r3, [r2, r3]
 8017a96:	4223      	tst	r3, r4
 8017a98:	d148      	bne.n	8017b2c <__gethex+0x452>
 8017a9a:	2320      	movs	r3, #32
 8017a9c:	431e      	orrs	r6, r3
 8017a9e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017aa0:	601d      	str	r5, [r3, #0]
 8017aa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017aa4:	601f      	str	r7, [r3, #0]
 8017aa6:	e6ac      	b.n	8017802 <__gethex+0x128>
 8017aa8:	4662      	mov	r2, ip
 8017aaa:	c304      	stmia	r3!, {r2}
 8017aac:	4299      	cmp	r1, r3
 8017aae:	d8da      	bhi.n	8017a66 <__gethex+0x38c>
 8017ab0:	68ab      	ldr	r3, [r5, #8]
 8017ab2:	429c      	cmp	r4, r3
 8017ab4:	db12      	blt.n	8017adc <__gethex+0x402>
 8017ab6:	686b      	ldr	r3, [r5, #4]
 8017ab8:	9805      	ldr	r0, [sp, #20]
 8017aba:	1c59      	adds	r1, r3, #1
 8017abc:	f000 f924 	bl	8017d08 <_Balloc>
 8017ac0:	0029      	movs	r1, r5
 8017ac2:	692b      	ldr	r3, [r5, #16]
 8017ac4:	9003      	str	r0, [sp, #12]
 8017ac6:	1c9a      	adds	r2, r3, #2
 8017ac8:	0092      	lsls	r2, r2, #2
 8017aca:	310c      	adds	r1, #12
 8017acc:	300c      	adds	r0, #12
 8017ace:	f7fc fa02 	bl	8013ed6 <memcpy>
 8017ad2:	0029      	movs	r1, r5
 8017ad4:	9805      	ldr	r0, [sp, #20]
 8017ad6:	f000 f93f 	bl	8017d58 <_Bfree>
 8017ada:	9d03      	ldr	r5, [sp, #12]
 8017adc:	692b      	ldr	r3, [r5, #16]
 8017ade:	1c5a      	adds	r2, r3, #1
 8017ae0:	612a      	str	r2, [r5, #16]
 8017ae2:	2201      	movs	r2, #1
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	009b      	lsls	r3, r3, #2
 8017ae8:	18eb      	adds	r3, r5, r3
 8017aea:	605a      	str	r2, [r3, #4]
 8017aec:	e7c0      	b.n	8017a70 <__gethex+0x396>
 8017aee:	692a      	ldr	r2, [r5, #16]
 8017af0:	42a2      	cmp	r2, r4
 8017af2:	dd0a      	ble.n	8017b0a <__gethex+0x430>
 8017af4:	2101      	movs	r1, #1
 8017af6:	0028      	movs	r0, r5
 8017af8:	f7ff fda6 	bl	8017648 <rshift>
 8017afc:	9b02      	ldr	r3, [sp, #8]
 8017afe:	3701      	adds	r7, #1
 8017b00:	689b      	ldr	r3, [r3, #8]
 8017b02:	2601      	movs	r6, #1
 8017b04:	42bb      	cmp	r3, r7
 8017b06:	dac8      	bge.n	8017a9a <__gethex+0x3c0>
 8017b08:	e6dc      	b.n	80178c4 <__gethex+0x1ea>
 8017b0a:	241f      	movs	r4, #31
 8017b0c:	9a01      	ldr	r2, [sp, #4]
 8017b0e:	2601      	movs	r6, #1
 8017b10:	4022      	ands	r2, r4
 8017b12:	1e14      	subs	r4, r2, #0
 8017b14:	d0c1      	beq.n	8017a9a <__gethex+0x3c0>
 8017b16:	9a04      	ldr	r2, [sp, #16]
 8017b18:	189b      	adds	r3, r3, r2
 8017b1a:	3b04      	subs	r3, #4
 8017b1c:	6818      	ldr	r0, [r3, #0]
 8017b1e:	f000 f9a1 	bl	8017e64 <__hi0bits>
 8017b22:	2120      	movs	r1, #32
 8017b24:	1b0c      	subs	r4, r1, r4
 8017b26:	42a0      	cmp	r0, r4
 8017b28:	dbe4      	blt.n	8017af4 <__gethex+0x41a>
 8017b2a:	e7b6      	b.n	8017a9a <__gethex+0x3c0>
 8017b2c:	0006      	movs	r6, r0
 8017b2e:	e7b4      	b.n	8017a9a <__gethex+0x3c0>

08017b30 <L_shift>:
 8017b30:	2308      	movs	r3, #8
 8017b32:	b570      	push	{r4, r5, r6, lr}
 8017b34:	2520      	movs	r5, #32
 8017b36:	1a9a      	subs	r2, r3, r2
 8017b38:	0092      	lsls	r2, r2, #2
 8017b3a:	1aad      	subs	r5, r5, r2
 8017b3c:	6843      	ldr	r3, [r0, #4]
 8017b3e:	6806      	ldr	r6, [r0, #0]
 8017b40:	001c      	movs	r4, r3
 8017b42:	40ac      	lsls	r4, r5
 8017b44:	40d3      	lsrs	r3, r2
 8017b46:	4334      	orrs	r4, r6
 8017b48:	6004      	str	r4, [r0, #0]
 8017b4a:	6043      	str	r3, [r0, #4]
 8017b4c:	3004      	adds	r0, #4
 8017b4e:	4288      	cmp	r0, r1
 8017b50:	d3f4      	bcc.n	8017b3c <L_shift+0xc>
 8017b52:	bd70      	pop	{r4, r5, r6, pc}

08017b54 <__match>:
 8017b54:	b530      	push	{r4, r5, lr}
 8017b56:	6803      	ldr	r3, [r0, #0]
 8017b58:	780c      	ldrb	r4, [r1, #0]
 8017b5a:	3301      	adds	r3, #1
 8017b5c:	2c00      	cmp	r4, #0
 8017b5e:	d102      	bne.n	8017b66 <__match+0x12>
 8017b60:	6003      	str	r3, [r0, #0]
 8017b62:	2001      	movs	r0, #1
 8017b64:	bd30      	pop	{r4, r5, pc}
 8017b66:	781a      	ldrb	r2, [r3, #0]
 8017b68:	0015      	movs	r5, r2
 8017b6a:	3d41      	subs	r5, #65	; 0x41
 8017b6c:	2d19      	cmp	r5, #25
 8017b6e:	d800      	bhi.n	8017b72 <__match+0x1e>
 8017b70:	3220      	adds	r2, #32
 8017b72:	3101      	adds	r1, #1
 8017b74:	42a2      	cmp	r2, r4
 8017b76:	d0ef      	beq.n	8017b58 <__match+0x4>
 8017b78:	2000      	movs	r0, #0
 8017b7a:	e7f3      	b.n	8017b64 <__match+0x10>

08017b7c <__hexnan>:
 8017b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b7e:	b08b      	sub	sp, #44	; 0x2c
 8017b80:	9201      	str	r2, [sp, #4]
 8017b82:	680a      	ldr	r2, [r1, #0]
 8017b84:	9901      	ldr	r1, [sp, #4]
 8017b86:	1153      	asrs	r3, r2, #5
 8017b88:	009b      	lsls	r3, r3, #2
 8017b8a:	18cb      	adds	r3, r1, r3
 8017b8c:	9304      	str	r3, [sp, #16]
 8017b8e:	231f      	movs	r3, #31
 8017b90:	401a      	ands	r2, r3
 8017b92:	9008      	str	r0, [sp, #32]
 8017b94:	9206      	str	r2, [sp, #24]
 8017b96:	d002      	beq.n	8017b9e <__hexnan+0x22>
 8017b98:	9b04      	ldr	r3, [sp, #16]
 8017b9a:	3304      	adds	r3, #4
 8017b9c:	9304      	str	r3, [sp, #16]
 8017b9e:	9b04      	ldr	r3, [sp, #16]
 8017ba0:	2500      	movs	r5, #0
 8017ba2:	1f1e      	subs	r6, r3, #4
 8017ba4:	0037      	movs	r7, r6
 8017ba6:	0034      	movs	r4, r6
 8017ba8:	9b08      	ldr	r3, [sp, #32]
 8017baa:	6035      	str	r5, [r6, #0]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	9507      	str	r5, [sp, #28]
 8017bb0:	9305      	str	r3, [sp, #20]
 8017bb2:	9502      	str	r5, [sp, #8]
 8017bb4:	9b05      	ldr	r3, [sp, #20]
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8017bba:	9b05      	ldr	r3, [sp, #20]
 8017bbc:	785b      	ldrb	r3, [r3, #1]
 8017bbe:	9303      	str	r3, [sp, #12]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d028      	beq.n	8017c16 <__hexnan+0x9a>
 8017bc4:	9803      	ldr	r0, [sp, #12]
 8017bc6:	f7ff fd73 	bl	80176b0 <__hexdig_fun>
 8017bca:	2800      	cmp	r0, #0
 8017bcc:	d145      	bne.n	8017c5a <__hexnan+0xde>
 8017bce:	9b03      	ldr	r3, [sp, #12]
 8017bd0:	2b20      	cmp	r3, #32
 8017bd2:	d819      	bhi.n	8017c08 <__hexnan+0x8c>
 8017bd4:	9b02      	ldr	r3, [sp, #8]
 8017bd6:	9a07      	ldr	r2, [sp, #28]
 8017bd8:	4293      	cmp	r3, r2
 8017bda:	dd12      	ble.n	8017c02 <__hexnan+0x86>
 8017bdc:	42bc      	cmp	r4, r7
 8017bde:	d206      	bcs.n	8017bee <__hexnan+0x72>
 8017be0:	2d07      	cmp	r5, #7
 8017be2:	dc04      	bgt.n	8017bee <__hexnan+0x72>
 8017be4:	002a      	movs	r2, r5
 8017be6:	0039      	movs	r1, r7
 8017be8:	0020      	movs	r0, r4
 8017bea:	f7ff ffa1 	bl	8017b30 <L_shift>
 8017bee:	9b01      	ldr	r3, [sp, #4]
 8017bf0:	2508      	movs	r5, #8
 8017bf2:	429c      	cmp	r4, r3
 8017bf4:	d905      	bls.n	8017c02 <__hexnan+0x86>
 8017bf6:	1f27      	subs	r7, r4, #4
 8017bf8:	2500      	movs	r5, #0
 8017bfa:	003c      	movs	r4, r7
 8017bfc:	9b02      	ldr	r3, [sp, #8]
 8017bfe:	603d      	str	r5, [r7, #0]
 8017c00:	9307      	str	r3, [sp, #28]
 8017c02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c04:	9305      	str	r3, [sp, #20]
 8017c06:	e7d5      	b.n	8017bb4 <__hexnan+0x38>
 8017c08:	9b03      	ldr	r3, [sp, #12]
 8017c0a:	2b29      	cmp	r3, #41	; 0x29
 8017c0c:	d14a      	bne.n	8017ca4 <__hexnan+0x128>
 8017c0e:	9b05      	ldr	r3, [sp, #20]
 8017c10:	9a08      	ldr	r2, [sp, #32]
 8017c12:	3302      	adds	r3, #2
 8017c14:	6013      	str	r3, [r2, #0]
 8017c16:	9b02      	ldr	r3, [sp, #8]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d043      	beq.n	8017ca4 <__hexnan+0x128>
 8017c1c:	42bc      	cmp	r4, r7
 8017c1e:	d206      	bcs.n	8017c2e <__hexnan+0xb2>
 8017c20:	2d07      	cmp	r5, #7
 8017c22:	dc04      	bgt.n	8017c2e <__hexnan+0xb2>
 8017c24:	002a      	movs	r2, r5
 8017c26:	0039      	movs	r1, r7
 8017c28:	0020      	movs	r0, r4
 8017c2a:	f7ff ff81 	bl	8017b30 <L_shift>
 8017c2e:	9b01      	ldr	r3, [sp, #4]
 8017c30:	429c      	cmp	r4, r3
 8017c32:	d926      	bls.n	8017c82 <__hexnan+0x106>
 8017c34:	cc04      	ldmia	r4!, {r2}
 8017c36:	601a      	str	r2, [r3, #0]
 8017c38:	3304      	adds	r3, #4
 8017c3a:	42a6      	cmp	r6, r4
 8017c3c:	d2fa      	bcs.n	8017c34 <__hexnan+0xb8>
 8017c3e:	2200      	movs	r2, #0
 8017c40:	c304      	stmia	r3!, {r2}
 8017c42:	429e      	cmp	r6, r3
 8017c44:	d2fc      	bcs.n	8017c40 <__hexnan+0xc4>
 8017c46:	6833      	ldr	r3, [r6, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d104      	bne.n	8017c56 <__hexnan+0xda>
 8017c4c:	9b01      	ldr	r3, [sp, #4]
 8017c4e:	429e      	cmp	r6, r3
 8017c50:	d126      	bne.n	8017ca0 <__hexnan+0x124>
 8017c52:	2301      	movs	r3, #1
 8017c54:	6033      	str	r3, [r6, #0]
 8017c56:	2005      	movs	r0, #5
 8017c58:	e025      	b.n	8017ca6 <__hexnan+0x12a>
 8017c5a:	9b02      	ldr	r3, [sp, #8]
 8017c5c:	3501      	adds	r5, #1
 8017c5e:	3301      	adds	r3, #1
 8017c60:	9302      	str	r3, [sp, #8]
 8017c62:	2d08      	cmp	r5, #8
 8017c64:	dd06      	ble.n	8017c74 <__hexnan+0xf8>
 8017c66:	9b01      	ldr	r3, [sp, #4]
 8017c68:	429c      	cmp	r4, r3
 8017c6a:	d9ca      	bls.n	8017c02 <__hexnan+0x86>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	2501      	movs	r5, #1
 8017c70:	3c04      	subs	r4, #4
 8017c72:	6023      	str	r3, [r4, #0]
 8017c74:	220f      	movs	r2, #15
 8017c76:	6823      	ldr	r3, [r4, #0]
 8017c78:	4010      	ands	r0, r2
 8017c7a:	011b      	lsls	r3, r3, #4
 8017c7c:	4318      	orrs	r0, r3
 8017c7e:	6020      	str	r0, [r4, #0]
 8017c80:	e7bf      	b.n	8017c02 <__hexnan+0x86>
 8017c82:	9b06      	ldr	r3, [sp, #24]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d0de      	beq.n	8017c46 <__hexnan+0xca>
 8017c88:	2120      	movs	r1, #32
 8017c8a:	9a06      	ldr	r2, [sp, #24]
 8017c8c:	9b04      	ldr	r3, [sp, #16]
 8017c8e:	1a89      	subs	r1, r1, r2
 8017c90:	2201      	movs	r2, #1
 8017c92:	4252      	negs	r2, r2
 8017c94:	40ca      	lsrs	r2, r1
 8017c96:	3b04      	subs	r3, #4
 8017c98:	6819      	ldr	r1, [r3, #0]
 8017c9a:	400a      	ands	r2, r1
 8017c9c:	601a      	str	r2, [r3, #0]
 8017c9e:	e7d2      	b.n	8017c46 <__hexnan+0xca>
 8017ca0:	3e04      	subs	r6, #4
 8017ca2:	e7d0      	b.n	8017c46 <__hexnan+0xca>
 8017ca4:	2004      	movs	r0, #4
 8017ca6:	b00b      	add	sp, #44	; 0x2c
 8017ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017caa <__localeconv_l>:
 8017caa:	30f0      	adds	r0, #240	; 0xf0
 8017cac:	4770      	bx	lr
	...

08017cb0 <_localeconv_r>:
 8017cb0:	4b03      	ldr	r3, [pc, #12]	; (8017cc0 <_localeconv_r+0x10>)
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	d100      	bne.n	8017cbc <_localeconv_r+0xc>
 8017cba:	4802      	ldr	r0, [pc, #8]	; (8017cc4 <_localeconv_r+0x14>)
 8017cbc:	30f0      	adds	r0, #240	; 0xf0
 8017cbe:	4770      	bx	lr
 8017cc0:	2000011c 	.word	0x2000011c
 8017cc4:	20000548 	.word	0x20000548

08017cc8 <__retarget_lock_acquire_recursive>:
 8017cc8:	4770      	bx	lr

08017cca <__retarget_lock_release_recursive>:
 8017cca:	4770      	bx	lr

08017ccc <memchr>:
 8017ccc:	b2c9      	uxtb	r1, r1
 8017cce:	1882      	adds	r2, r0, r2
 8017cd0:	4290      	cmp	r0, r2
 8017cd2:	d101      	bne.n	8017cd8 <memchr+0xc>
 8017cd4:	2000      	movs	r0, #0
 8017cd6:	4770      	bx	lr
 8017cd8:	7803      	ldrb	r3, [r0, #0]
 8017cda:	428b      	cmp	r3, r1
 8017cdc:	d0fb      	beq.n	8017cd6 <memchr+0xa>
 8017cde:	3001      	adds	r0, #1
 8017ce0:	e7f6      	b.n	8017cd0 <memchr+0x4>

08017ce2 <memmove>:
 8017ce2:	b510      	push	{r4, lr}
 8017ce4:	4288      	cmp	r0, r1
 8017ce6:	d902      	bls.n	8017cee <memmove+0xc>
 8017ce8:	188b      	adds	r3, r1, r2
 8017cea:	4298      	cmp	r0, r3
 8017cec:	d303      	bcc.n	8017cf6 <memmove+0x14>
 8017cee:	2300      	movs	r3, #0
 8017cf0:	e007      	b.n	8017d02 <memmove+0x20>
 8017cf2:	5c8b      	ldrb	r3, [r1, r2]
 8017cf4:	5483      	strb	r3, [r0, r2]
 8017cf6:	3a01      	subs	r2, #1
 8017cf8:	d2fb      	bcs.n	8017cf2 <memmove+0x10>
 8017cfa:	bd10      	pop	{r4, pc}
 8017cfc:	5ccc      	ldrb	r4, [r1, r3]
 8017cfe:	54c4      	strb	r4, [r0, r3]
 8017d00:	3301      	adds	r3, #1
 8017d02:	429a      	cmp	r2, r3
 8017d04:	d1fa      	bne.n	8017cfc <memmove+0x1a>
 8017d06:	e7f8      	b.n	8017cfa <memmove+0x18>

08017d08 <_Balloc>:
 8017d08:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017d0a:	b570      	push	{r4, r5, r6, lr}
 8017d0c:	0004      	movs	r4, r0
 8017d0e:	000d      	movs	r5, r1
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d012      	beq.n	8017d3a <_Balloc+0x32>
 8017d14:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8017d16:	00ab      	lsls	r3, r5, #2
 8017d18:	18d3      	adds	r3, r2, r3
 8017d1a:	6818      	ldr	r0, [r3, #0]
 8017d1c:	2800      	cmp	r0, #0
 8017d1e:	d115      	bne.n	8017d4c <_Balloc+0x44>
 8017d20:	2101      	movs	r1, #1
 8017d22:	000e      	movs	r6, r1
 8017d24:	40ae      	lsls	r6, r5
 8017d26:	1d72      	adds	r2, r6, #5
 8017d28:	0092      	lsls	r2, r2, #2
 8017d2a:	0020      	movs	r0, r4
 8017d2c:	f000 fcbe 	bl	80186ac <_calloc_r>
 8017d30:	2800      	cmp	r0, #0
 8017d32:	d009      	beq.n	8017d48 <_Balloc+0x40>
 8017d34:	6045      	str	r5, [r0, #4]
 8017d36:	6086      	str	r6, [r0, #8]
 8017d38:	e00a      	b.n	8017d50 <_Balloc+0x48>
 8017d3a:	2221      	movs	r2, #33	; 0x21
 8017d3c:	2104      	movs	r1, #4
 8017d3e:	f000 fcb5 	bl	80186ac <_calloc_r>
 8017d42:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017d44:	2800      	cmp	r0, #0
 8017d46:	d1e5      	bne.n	8017d14 <_Balloc+0xc>
 8017d48:	2000      	movs	r0, #0
 8017d4a:	bd70      	pop	{r4, r5, r6, pc}
 8017d4c:	6802      	ldr	r2, [r0, #0]
 8017d4e:	601a      	str	r2, [r3, #0]
 8017d50:	2300      	movs	r3, #0
 8017d52:	6103      	str	r3, [r0, #16]
 8017d54:	60c3      	str	r3, [r0, #12]
 8017d56:	e7f8      	b.n	8017d4a <_Balloc+0x42>

08017d58 <_Bfree>:
 8017d58:	2900      	cmp	r1, #0
 8017d5a:	d006      	beq.n	8017d6a <_Bfree+0x12>
 8017d5c:	684b      	ldr	r3, [r1, #4]
 8017d5e:	009a      	lsls	r2, r3, #2
 8017d60:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017d62:	189b      	adds	r3, r3, r2
 8017d64:	681a      	ldr	r2, [r3, #0]
 8017d66:	600a      	str	r2, [r1, #0]
 8017d68:	6019      	str	r1, [r3, #0]
 8017d6a:	4770      	bx	lr

08017d6c <__multadd>:
 8017d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d6e:	001e      	movs	r6, r3
 8017d70:	2314      	movs	r3, #20
 8017d72:	469c      	mov	ip, r3
 8017d74:	0007      	movs	r7, r0
 8017d76:	000c      	movs	r4, r1
 8017d78:	2000      	movs	r0, #0
 8017d7a:	690d      	ldr	r5, [r1, #16]
 8017d7c:	448c      	add	ip, r1
 8017d7e:	4663      	mov	r3, ip
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	3001      	adds	r0, #1
 8017d84:	b299      	uxth	r1, r3
 8017d86:	4663      	mov	r3, ip
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4351      	muls	r1, r2
 8017d8c:	0c1b      	lsrs	r3, r3, #16
 8017d8e:	4353      	muls	r3, r2
 8017d90:	1989      	adds	r1, r1, r6
 8017d92:	0c0e      	lsrs	r6, r1, #16
 8017d94:	199b      	adds	r3, r3, r6
 8017d96:	b289      	uxth	r1, r1
 8017d98:	0c1e      	lsrs	r6, r3, #16
 8017d9a:	041b      	lsls	r3, r3, #16
 8017d9c:	185b      	adds	r3, r3, r1
 8017d9e:	4661      	mov	r1, ip
 8017da0:	c108      	stmia	r1!, {r3}
 8017da2:	468c      	mov	ip, r1
 8017da4:	4285      	cmp	r5, r0
 8017da6:	dcea      	bgt.n	8017d7e <__multadd+0x12>
 8017da8:	2e00      	cmp	r6, #0
 8017daa:	d01b      	beq.n	8017de4 <__multadd+0x78>
 8017dac:	68a3      	ldr	r3, [r4, #8]
 8017dae:	42ab      	cmp	r3, r5
 8017db0:	dc12      	bgt.n	8017dd8 <__multadd+0x6c>
 8017db2:	6863      	ldr	r3, [r4, #4]
 8017db4:	0038      	movs	r0, r7
 8017db6:	1c59      	adds	r1, r3, #1
 8017db8:	f7ff ffa6 	bl	8017d08 <_Balloc>
 8017dbc:	0021      	movs	r1, r4
 8017dbe:	6923      	ldr	r3, [r4, #16]
 8017dc0:	9001      	str	r0, [sp, #4]
 8017dc2:	1c9a      	adds	r2, r3, #2
 8017dc4:	0092      	lsls	r2, r2, #2
 8017dc6:	310c      	adds	r1, #12
 8017dc8:	300c      	adds	r0, #12
 8017dca:	f7fc f884 	bl	8013ed6 <memcpy>
 8017dce:	0021      	movs	r1, r4
 8017dd0:	0038      	movs	r0, r7
 8017dd2:	f7ff ffc1 	bl	8017d58 <_Bfree>
 8017dd6:	9c01      	ldr	r4, [sp, #4]
 8017dd8:	1d2b      	adds	r3, r5, #4
 8017dda:	009b      	lsls	r3, r3, #2
 8017ddc:	18e3      	adds	r3, r4, r3
 8017dde:	3501      	adds	r5, #1
 8017de0:	605e      	str	r6, [r3, #4]
 8017de2:	6125      	str	r5, [r4, #16]
 8017de4:	0020      	movs	r0, r4
 8017de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08017de8 <__s2b>:
 8017de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017dea:	0006      	movs	r6, r0
 8017dec:	0018      	movs	r0, r3
 8017dee:	000c      	movs	r4, r1
 8017df0:	3008      	adds	r0, #8
 8017df2:	2109      	movs	r1, #9
 8017df4:	9301      	str	r3, [sp, #4]
 8017df6:	0015      	movs	r5, r2
 8017df8:	f7e8 fa34 	bl	8000264 <__divsi3>
 8017dfc:	2301      	movs	r3, #1
 8017dfe:	2100      	movs	r1, #0
 8017e00:	4283      	cmp	r3, r0
 8017e02:	db1f      	blt.n	8017e44 <__s2b+0x5c>
 8017e04:	0030      	movs	r0, r6
 8017e06:	f7ff ff7f 	bl	8017d08 <_Balloc>
 8017e0a:	9b08      	ldr	r3, [sp, #32]
 8017e0c:	6143      	str	r3, [r0, #20]
 8017e0e:	2301      	movs	r3, #1
 8017e10:	6103      	str	r3, [r0, #16]
 8017e12:	2d09      	cmp	r5, #9
 8017e14:	dd19      	ble.n	8017e4a <__s2b+0x62>
 8017e16:	0023      	movs	r3, r4
 8017e18:	3309      	adds	r3, #9
 8017e1a:	001f      	movs	r7, r3
 8017e1c:	9300      	str	r3, [sp, #0]
 8017e1e:	1964      	adds	r4, r4, r5
 8017e20:	783b      	ldrb	r3, [r7, #0]
 8017e22:	0001      	movs	r1, r0
 8017e24:	3b30      	subs	r3, #48	; 0x30
 8017e26:	220a      	movs	r2, #10
 8017e28:	0030      	movs	r0, r6
 8017e2a:	3701      	adds	r7, #1
 8017e2c:	f7ff ff9e 	bl	8017d6c <__multadd>
 8017e30:	42a7      	cmp	r7, r4
 8017e32:	d1f5      	bne.n	8017e20 <__s2b+0x38>
 8017e34:	9b00      	ldr	r3, [sp, #0]
 8017e36:	195c      	adds	r4, r3, r5
 8017e38:	3c08      	subs	r4, #8
 8017e3a:	002f      	movs	r7, r5
 8017e3c:	9b01      	ldr	r3, [sp, #4]
 8017e3e:	429f      	cmp	r7, r3
 8017e40:	db06      	blt.n	8017e50 <__s2b+0x68>
 8017e42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017e44:	005b      	lsls	r3, r3, #1
 8017e46:	3101      	adds	r1, #1
 8017e48:	e7da      	b.n	8017e00 <__s2b+0x18>
 8017e4a:	340a      	adds	r4, #10
 8017e4c:	2509      	movs	r5, #9
 8017e4e:	e7f4      	b.n	8017e3a <__s2b+0x52>
 8017e50:	1b63      	subs	r3, r4, r5
 8017e52:	5ddb      	ldrb	r3, [r3, r7]
 8017e54:	0001      	movs	r1, r0
 8017e56:	3b30      	subs	r3, #48	; 0x30
 8017e58:	220a      	movs	r2, #10
 8017e5a:	0030      	movs	r0, r6
 8017e5c:	f7ff ff86 	bl	8017d6c <__multadd>
 8017e60:	3701      	adds	r7, #1
 8017e62:	e7eb      	b.n	8017e3c <__s2b+0x54>

08017e64 <__hi0bits>:
 8017e64:	0003      	movs	r3, r0
 8017e66:	0c02      	lsrs	r2, r0, #16
 8017e68:	2000      	movs	r0, #0
 8017e6a:	4282      	cmp	r2, r0
 8017e6c:	d101      	bne.n	8017e72 <__hi0bits+0xe>
 8017e6e:	041b      	lsls	r3, r3, #16
 8017e70:	3010      	adds	r0, #16
 8017e72:	0e1a      	lsrs	r2, r3, #24
 8017e74:	d101      	bne.n	8017e7a <__hi0bits+0x16>
 8017e76:	3008      	adds	r0, #8
 8017e78:	021b      	lsls	r3, r3, #8
 8017e7a:	0f1a      	lsrs	r2, r3, #28
 8017e7c:	d101      	bne.n	8017e82 <__hi0bits+0x1e>
 8017e7e:	3004      	adds	r0, #4
 8017e80:	011b      	lsls	r3, r3, #4
 8017e82:	0f9a      	lsrs	r2, r3, #30
 8017e84:	d101      	bne.n	8017e8a <__hi0bits+0x26>
 8017e86:	3002      	adds	r0, #2
 8017e88:	009b      	lsls	r3, r3, #2
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	db03      	blt.n	8017e96 <__hi0bits+0x32>
 8017e8e:	3001      	adds	r0, #1
 8017e90:	005b      	lsls	r3, r3, #1
 8017e92:	d400      	bmi.n	8017e96 <__hi0bits+0x32>
 8017e94:	2020      	movs	r0, #32
 8017e96:	4770      	bx	lr

08017e98 <__lo0bits>:
 8017e98:	2207      	movs	r2, #7
 8017e9a:	6803      	ldr	r3, [r0, #0]
 8017e9c:	b510      	push	{r4, lr}
 8017e9e:	0001      	movs	r1, r0
 8017ea0:	401a      	ands	r2, r3
 8017ea2:	d00d      	beq.n	8017ec0 <__lo0bits+0x28>
 8017ea4:	2401      	movs	r4, #1
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	4223      	tst	r3, r4
 8017eaa:	d105      	bne.n	8017eb8 <__lo0bits+0x20>
 8017eac:	3002      	adds	r0, #2
 8017eae:	4203      	tst	r3, r0
 8017eb0:	d003      	beq.n	8017eba <__lo0bits+0x22>
 8017eb2:	40e3      	lsrs	r3, r4
 8017eb4:	0020      	movs	r0, r4
 8017eb6:	600b      	str	r3, [r1, #0]
 8017eb8:	bd10      	pop	{r4, pc}
 8017eba:	089b      	lsrs	r3, r3, #2
 8017ebc:	600b      	str	r3, [r1, #0]
 8017ebe:	e7fb      	b.n	8017eb8 <__lo0bits+0x20>
 8017ec0:	b29c      	uxth	r4, r3
 8017ec2:	0010      	movs	r0, r2
 8017ec4:	2c00      	cmp	r4, #0
 8017ec6:	d101      	bne.n	8017ecc <__lo0bits+0x34>
 8017ec8:	2010      	movs	r0, #16
 8017eca:	0c1b      	lsrs	r3, r3, #16
 8017ecc:	b2da      	uxtb	r2, r3
 8017ece:	2a00      	cmp	r2, #0
 8017ed0:	d101      	bne.n	8017ed6 <__lo0bits+0x3e>
 8017ed2:	3008      	adds	r0, #8
 8017ed4:	0a1b      	lsrs	r3, r3, #8
 8017ed6:	071a      	lsls	r2, r3, #28
 8017ed8:	d101      	bne.n	8017ede <__lo0bits+0x46>
 8017eda:	3004      	adds	r0, #4
 8017edc:	091b      	lsrs	r3, r3, #4
 8017ede:	079a      	lsls	r2, r3, #30
 8017ee0:	d101      	bne.n	8017ee6 <__lo0bits+0x4e>
 8017ee2:	3002      	adds	r0, #2
 8017ee4:	089b      	lsrs	r3, r3, #2
 8017ee6:	07da      	lsls	r2, r3, #31
 8017ee8:	d4e8      	bmi.n	8017ebc <__lo0bits+0x24>
 8017eea:	085b      	lsrs	r3, r3, #1
 8017eec:	d001      	beq.n	8017ef2 <__lo0bits+0x5a>
 8017eee:	3001      	adds	r0, #1
 8017ef0:	e7e4      	b.n	8017ebc <__lo0bits+0x24>
 8017ef2:	2020      	movs	r0, #32
 8017ef4:	e7e0      	b.n	8017eb8 <__lo0bits+0x20>

08017ef6 <__i2b>:
 8017ef6:	b510      	push	{r4, lr}
 8017ef8:	000c      	movs	r4, r1
 8017efa:	2101      	movs	r1, #1
 8017efc:	f7ff ff04 	bl	8017d08 <_Balloc>
 8017f00:	2301      	movs	r3, #1
 8017f02:	6144      	str	r4, [r0, #20]
 8017f04:	6103      	str	r3, [r0, #16]
 8017f06:	bd10      	pop	{r4, pc}

08017f08 <__multiply>:
 8017f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f0a:	690b      	ldr	r3, [r1, #16]
 8017f0c:	0014      	movs	r4, r2
 8017f0e:	6912      	ldr	r2, [r2, #16]
 8017f10:	b089      	sub	sp, #36	; 0x24
 8017f12:	000d      	movs	r5, r1
 8017f14:	4293      	cmp	r3, r2
 8017f16:	da01      	bge.n	8017f1c <__multiply+0x14>
 8017f18:	0025      	movs	r5, r4
 8017f1a:	000c      	movs	r4, r1
 8017f1c:	692f      	ldr	r7, [r5, #16]
 8017f1e:	6926      	ldr	r6, [r4, #16]
 8017f20:	6869      	ldr	r1, [r5, #4]
 8017f22:	19bb      	adds	r3, r7, r6
 8017f24:	9302      	str	r3, [sp, #8]
 8017f26:	68ab      	ldr	r3, [r5, #8]
 8017f28:	19ba      	adds	r2, r7, r6
 8017f2a:	4293      	cmp	r3, r2
 8017f2c:	da00      	bge.n	8017f30 <__multiply+0x28>
 8017f2e:	3101      	adds	r1, #1
 8017f30:	f7ff feea 	bl	8017d08 <_Balloc>
 8017f34:	0002      	movs	r2, r0
 8017f36:	19bb      	adds	r3, r7, r6
 8017f38:	3214      	adds	r2, #20
 8017f3a:	009b      	lsls	r3, r3, #2
 8017f3c:	18d3      	adds	r3, r2, r3
 8017f3e:	469c      	mov	ip, r3
 8017f40:	2100      	movs	r1, #0
 8017f42:	0013      	movs	r3, r2
 8017f44:	9004      	str	r0, [sp, #16]
 8017f46:	4563      	cmp	r3, ip
 8017f48:	d31d      	bcc.n	8017f86 <__multiply+0x7e>
 8017f4a:	3514      	adds	r5, #20
 8017f4c:	00bf      	lsls	r7, r7, #2
 8017f4e:	19eb      	adds	r3, r5, r7
 8017f50:	3414      	adds	r4, #20
 8017f52:	00b6      	lsls	r6, r6, #2
 8017f54:	9305      	str	r3, [sp, #20]
 8017f56:	19a3      	adds	r3, r4, r6
 8017f58:	9503      	str	r5, [sp, #12]
 8017f5a:	9401      	str	r4, [sp, #4]
 8017f5c:	9307      	str	r3, [sp, #28]
 8017f5e:	9b07      	ldr	r3, [sp, #28]
 8017f60:	9901      	ldr	r1, [sp, #4]
 8017f62:	4299      	cmp	r1, r3
 8017f64:	d311      	bcc.n	8017f8a <__multiply+0x82>
 8017f66:	9b02      	ldr	r3, [sp, #8]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	dd06      	ble.n	8017f7a <__multiply+0x72>
 8017f6c:	2304      	movs	r3, #4
 8017f6e:	425b      	negs	r3, r3
 8017f70:	449c      	add	ip, r3
 8017f72:	4663      	mov	r3, ip
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d051      	beq.n	801801e <__multiply+0x116>
 8017f7a:	9b04      	ldr	r3, [sp, #16]
 8017f7c:	9a02      	ldr	r2, [sp, #8]
 8017f7e:	0018      	movs	r0, r3
 8017f80:	611a      	str	r2, [r3, #16]
 8017f82:	b009      	add	sp, #36	; 0x24
 8017f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f86:	c302      	stmia	r3!, {r1}
 8017f88:	e7dd      	b.n	8017f46 <__multiply+0x3e>
 8017f8a:	9b01      	ldr	r3, [sp, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	b298      	uxth	r0, r3
 8017f90:	2800      	cmp	r0, #0
 8017f92:	d01c      	beq.n	8017fce <__multiply+0xc6>
 8017f94:	0015      	movs	r5, r2
 8017f96:	2600      	movs	r6, #0
 8017f98:	9f03      	ldr	r7, [sp, #12]
 8017f9a:	cf02      	ldmia	r7!, {r1}
 8017f9c:	682c      	ldr	r4, [r5, #0]
 8017f9e:	b28b      	uxth	r3, r1
 8017fa0:	4343      	muls	r3, r0
 8017fa2:	0c09      	lsrs	r1, r1, #16
 8017fa4:	4341      	muls	r1, r0
 8017fa6:	b2a4      	uxth	r4, r4
 8017fa8:	191b      	adds	r3, r3, r4
 8017faa:	199b      	adds	r3, r3, r6
 8017fac:	000e      	movs	r6, r1
 8017fae:	6829      	ldr	r1, [r5, #0]
 8017fb0:	9506      	str	r5, [sp, #24]
 8017fb2:	0c09      	lsrs	r1, r1, #16
 8017fb4:	1871      	adds	r1, r6, r1
 8017fb6:	0c1e      	lsrs	r6, r3, #16
 8017fb8:	1989      	adds	r1, r1, r6
 8017fba:	0c0e      	lsrs	r6, r1, #16
 8017fbc:	b29b      	uxth	r3, r3
 8017fbe:	0409      	lsls	r1, r1, #16
 8017fc0:	430b      	orrs	r3, r1
 8017fc2:	c508      	stmia	r5!, {r3}
 8017fc4:	9b05      	ldr	r3, [sp, #20]
 8017fc6:	42bb      	cmp	r3, r7
 8017fc8:	d8e7      	bhi.n	8017f9a <__multiply+0x92>
 8017fca:	9b06      	ldr	r3, [sp, #24]
 8017fcc:	605e      	str	r6, [r3, #4]
 8017fce:	9b01      	ldr	r3, [sp, #4]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	0c1d      	lsrs	r5, r3, #16
 8017fd4:	d01e      	beq.n	8018014 <__multiply+0x10c>
 8017fd6:	0010      	movs	r0, r2
 8017fd8:	2700      	movs	r7, #0
 8017fda:	6813      	ldr	r3, [r2, #0]
 8017fdc:	9e03      	ldr	r6, [sp, #12]
 8017fde:	6831      	ldr	r1, [r6, #0]
 8017fe0:	6804      	ldr	r4, [r0, #0]
 8017fe2:	b289      	uxth	r1, r1
 8017fe4:	4369      	muls	r1, r5
 8017fe6:	0c24      	lsrs	r4, r4, #16
 8017fe8:	1909      	adds	r1, r1, r4
 8017fea:	19c9      	adds	r1, r1, r7
 8017fec:	040f      	lsls	r7, r1, #16
 8017fee:	b29b      	uxth	r3, r3
 8017ff0:	433b      	orrs	r3, r7
 8017ff2:	6003      	str	r3, [r0, #0]
 8017ff4:	ce80      	ldmia	r6!, {r7}
 8017ff6:	6843      	ldr	r3, [r0, #4]
 8017ff8:	0c3f      	lsrs	r7, r7, #16
 8017ffa:	436f      	muls	r7, r5
 8017ffc:	b29b      	uxth	r3, r3
 8017ffe:	18fb      	adds	r3, r7, r3
 8018000:	0c09      	lsrs	r1, r1, #16
 8018002:	185b      	adds	r3, r3, r1
 8018004:	9905      	ldr	r1, [sp, #20]
 8018006:	9006      	str	r0, [sp, #24]
 8018008:	0c1f      	lsrs	r7, r3, #16
 801800a:	3004      	adds	r0, #4
 801800c:	42b1      	cmp	r1, r6
 801800e:	d8e6      	bhi.n	8017fde <__multiply+0xd6>
 8018010:	9906      	ldr	r1, [sp, #24]
 8018012:	604b      	str	r3, [r1, #4]
 8018014:	9b01      	ldr	r3, [sp, #4]
 8018016:	3204      	adds	r2, #4
 8018018:	3304      	adds	r3, #4
 801801a:	9301      	str	r3, [sp, #4]
 801801c:	e79f      	b.n	8017f5e <__multiply+0x56>
 801801e:	9b02      	ldr	r3, [sp, #8]
 8018020:	3b01      	subs	r3, #1
 8018022:	9302      	str	r3, [sp, #8]
 8018024:	e79f      	b.n	8017f66 <__multiply+0x5e>
	...

08018028 <__pow5mult>:
 8018028:	2303      	movs	r3, #3
 801802a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801802c:	4013      	ands	r3, r2
 801802e:	0006      	movs	r6, r0
 8018030:	000f      	movs	r7, r1
 8018032:	0015      	movs	r5, r2
 8018034:	2b00      	cmp	r3, #0
 8018036:	d008      	beq.n	801804a <__pow5mult+0x22>
 8018038:	491a      	ldr	r1, [pc, #104]	; (80180a4 <__pow5mult+0x7c>)
 801803a:	3b01      	subs	r3, #1
 801803c:	009a      	lsls	r2, r3, #2
 801803e:	5852      	ldr	r2, [r2, r1]
 8018040:	2300      	movs	r3, #0
 8018042:	0039      	movs	r1, r7
 8018044:	f7ff fe92 	bl	8017d6c <__multadd>
 8018048:	0007      	movs	r7, r0
 801804a:	10ad      	asrs	r5, r5, #2
 801804c:	d027      	beq.n	801809e <__pow5mult+0x76>
 801804e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018050:	2c00      	cmp	r4, #0
 8018052:	d107      	bne.n	8018064 <__pow5mult+0x3c>
 8018054:	4914      	ldr	r1, [pc, #80]	; (80180a8 <__pow5mult+0x80>)
 8018056:	0030      	movs	r0, r6
 8018058:	f7ff ff4d 	bl	8017ef6 <__i2b>
 801805c:	2300      	movs	r3, #0
 801805e:	0004      	movs	r4, r0
 8018060:	64b0      	str	r0, [r6, #72]	; 0x48
 8018062:	6003      	str	r3, [r0, #0]
 8018064:	2301      	movs	r3, #1
 8018066:	421d      	tst	r5, r3
 8018068:	d00a      	beq.n	8018080 <__pow5mult+0x58>
 801806a:	0039      	movs	r1, r7
 801806c:	0022      	movs	r2, r4
 801806e:	0030      	movs	r0, r6
 8018070:	f7ff ff4a 	bl	8017f08 <__multiply>
 8018074:	0039      	movs	r1, r7
 8018076:	9001      	str	r0, [sp, #4]
 8018078:	0030      	movs	r0, r6
 801807a:	f7ff fe6d 	bl	8017d58 <_Bfree>
 801807e:	9f01      	ldr	r7, [sp, #4]
 8018080:	106d      	asrs	r5, r5, #1
 8018082:	d00c      	beq.n	801809e <__pow5mult+0x76>
 8018084:	6820      	ldr	r0, [r4, #0]
 8018086:	2800      	cmp	r0, #0
 8018088:	d107      	bne.n	801809a <__pow5mult+0x72>
 801808a:	0022      	movs	r2, r4
 801808c:	0021      	movs	r1, r4
 801808e:	0030      	movs	r0, r6
 8018090:	f7ff ff3a 	bl	8017f08 <__multiply>
 8018094:	2300      	movs	r3, #0
 8018096:	6020      	str	r0, [r4, #0]
 8018098:	6003      	str	r3, [r0, #0]
 801809a:	0004      	movs	r4, r0
 801809c:	e7e2      	b.n	8018064 <__pow5mult+0x3c>
 801809e:	0038      	movs	r0, r7
 80180a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80180a2:	46c0      	nop			; (mov r8, r8)
 80180a4:	0801bae0 	.word	0x0801bae0
 80180a8:	00000271 	.word	0x00000271

080180ac <__lshift>:
 80180ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180ae:	000d      	movs	r5, r1
 80180b0:	0017      	movs	r7, r2
 80180b2:	692b      	ldr	r3, [r5, #16]
 80180b4:	1154      	asrs	r4, r2, #5
 80180b6:	b085      	sub	sp, #20
 80180b8:	18e3      	adds	r3, r4, r3
 80180ba:	9301      	str	r3, [sp, #4]
 80180bc:	3301      	adds	r3, #1
 80180be:	9300      	str	r3, [sp, #0]
 80180c0:	6849      	ldr	r1, [r1, #4]
 80180c2:	68ab      	ldr	r3, [r5, #8]
 80180c4:	9002      	str	r0, [sp, #8]
 80180c6:	9a00      	ldr	r2, [sp, #0]
 80180c8:	4293      	cmp	r3, r2
 80180ca:	db35      	blt.n	8018138 <__lshift+0x8c>
 80180cc:	9802      	ldr	r0, [sp, #8]
 80180ce:	f7ff fe1b 	bl	8017d08 <_Balloc>
 80180d2:	2300      	movs	r3, #0
 80180d4:	0002      	movs	r2, r0
 80180d6:	0006      	movs	r6, r0
 80180d8:	0019      	movs	r1, r3
 80180da:	3214      	adds	r2, #20
 80180dc:	42a3      	cmp	r3, r4
 80180de:	db2e      	blt.n	801813e <__lshift+0x92>
 80180e0:	43e3      	mvns	r3, r4
 80180e2:	17db      	asrs	r3, r3, #31
 80180e4:	401c      	ands	r4, r3
 80180e6:	002b      	movs	r3, r5
 80180e8:	00a4      	lsls	r4, r4, #2
 80180ea:	1914      	adds	r4, r2, r4
 80180ec:	692a      	ldr	r2, [r5, #16]
 80180ee:	3314      	adds	r3, #20
 80180f0:	0092      	lsls	r2, r2, #2
 80180f2:	189a      	adds	r2, r3, r2
 80180f4:	4694      	mov	ip, r2
 80180f6:	221f      	movs	r2, #31
 80180f8:	4017      	ands	r7, r2
 80180fa:	d024      	beq.n	8018146 <__lshift+0x9a>
 80180fc:	3201      	adds	r2, #1
 80180fe:	1bd2      	subs	r2, r2, r7
 8018100:	9203      	str	r2, [sp, #12]
 8018102:	2200      	movs	r2, #0
 8018104:	6819      	ldr	r1, [r3, #0]
 8018106:	0020      	movs	r0, r4
 8018108:	40b9      	lsls	r1, r7
 801810a:	430a      	orrs	r2, r1
 801810c:	c404      	stmia	r4!, {r2}
 801810e:	cb04      	ldmia	r3!, {r2}
 8018110:	9903      	ldr	r1, [sp, #12]
 8018112:	40ca      	lsrs	r2, r1
 8018114:	459c      	cmp	ip, r3
 8018116:	d8f5      	bhi.n	8018104 <__lshift+0x58>
 8018118:	6042      	str	r2, [r0, #4]
 801811a:	2a00      	cmp	r2, #0
 801811c:	d002      	beq.n	8018124 <__lshift+0x78>
 801811e:	9b01      	ldr	r3, [sp, #4]
 8018120:	3302      	adds	r3, #2
 8018122:	9300      	str	r3, [sp, #0]
 8018124:	9b00      	ldr	r3, [sp, #0]
 8018126:	9802      	ldr	r0, [sp, #8]
 8018128:	3b01      	subs	r3, #1
 801812a:	6133      	str	r3, [r6, #16]
 801812c:	0029      	movs	r1, r5
 801812e:	f7ff fe13 	bl	8017d58 <_Bfree>
 8018132:	0030      	movs	r0, r6
 8018134:	b005      	add	sp, #20
 8018136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018138:	3101      	adds	r1, #1
 801813a:	005b      	lsls	r3, r3, #1
 801813c:	e7c3      	b.n	80180c6 <__lshift+0x1a>
 801813e:	0098      	lsls	r0, r3, #2
 8018140:	5011      	str	r1, [r2, r0]
 8018142:	3301      	adds	r3, #1
 8018144:	e7ca      	b.n	80180dc <__lshift+0x30>
 8018146:	cb04      	ldmia	r3!, {r2}
 8018148:	c404      	stmia	r4!, {r2}
 801814a:	459c      	cmp	ip, r3
 801814c:	d8fb      	bhi.n	8018146 <__lshift+0x9a>
 801814e:	e7e9      	b.n	8018124 <__lshift+0x78>

08018150 <__mcmp>:
 8018150:	690a      	ldr	r2, [r1, #16]
 8018152:	6903      	ldr	r3, [r0, #16]
 8018154:	b530      	push	{r4, r5, lr}
 8018156:	1a9b      	subs	r3, r3, r2
 8018158:	d10d      	bne.n	8018176 <__mcmp+0x26>
 801815a:	0092      	lsls	r2, r2, #2
 801815c:	3014      	adds	r0, #20
 801815e:	3114      	adds	r1, #20
 8018160:	1884      	adds	r4, r0, r2
 8018162:	1889      	adds	r1, r1, r2
 8018164:	3c04      	subs	r4, #4
 8018166:	3904      	subs	r1, #4
 8018168:	6825      	ldr	r5, [r4, #0]
 801816a:	680a      	ldr	r2, [r1, #0]
 801816c:	4295      	cmp	r5, r2
 801816e:	d004      	beq.n	801817a <__mcmp+0x2a>
 8018170:	2301      	movs	r3, #1
 8018172:	4295      	cmp	r5, r2
 8018174:	d304      	bcc.n	8018180 <__mcmp+0x30>
 8018176:	0018      	movs	r0, r3
 8018178:	bd30      	pop	{r4, r5, pc}
 801817a:	42a0      	cmp	r0, r4
 801817c:	d3f2      	bcc.n	8018164 <__mcmp+0x14>
 801817e:	e7fa      	b.n	8018176 <__mcmp+0x26>
 8018180:	425b      	negs	r3, r3
 8018182:	e7f8      	b.n	8018176 <__mcmp+0x26>

08018184 <__mdiff>:
 8018184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018186:	000d      	movs	r5, r1
 8018188:	b085      	sub	sp, #20
 801818a:	0007      	movs	r7, r0
 801818c:	0011      	movs	r1, r2
 801818e:	0028      	movs	r0, r5
 8018190:	0014      	movs	r4, r2
 8018192:	f7ff ffdd 	bl	8018150 <__mcmp>
 8018196:	1e06      	subs	r6, r0, #0
 8018198:	d108      	bne.n	80181ac <__mdiff+0x28>
 801819a:	0001      	movs	r1, r0
 801819c:	0038      	movs	r0, r7
 801819e:	f7ff fdb3 	bl	8017d08 <_Balloc>
 80181a2:	2301      	movs	r3, #1
 80181a4:	6146      	str	r6, [r0, #20]
 80181a6:	6103      	str	r3, [r0, #16]
 80181a8:	b005      	add	sp, #20
 80181aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181ac:	2301      	movs	r3, #1
 80181ae:	9301      	str	r3, [sp, #4]
 80181b0:	2800      	cmp	r0, #0
 80181b2:	db04      	blt.n	80181be <__mdiff+0x3a>
 80181b4:	0023      	movs	r3, r4
 80181b6:	002c      	movs	r4, r5
 80181b8:	001d      	movs	r5, r3
 80181ba:	2300      	movs	r3, #0
 80181bc:	9301      	str	r3, [sp, #4]
 80181be:	6861      	ldr	r1, [r4, #4]
 80181c0:	0038      	movs	r0, r7
 80181c2:	f7ff fda1 	bl	8017d08 <_Balloc>
 80181c6:	002f      	movs	r7, r5
 80181c8:	2200      	movs	r2, #0
 80181ca:	9b01      	ldr	r3, [sp, #4]
 80181cc:	6926      	ldr	r6, [r4, #16]
 80181ce:	60c3      	str	r3, [r0, #12]
 80181d0:	3414      	adds	r4, #20
 80181d2:	00b3      	lsls	r3, r6, #2
 80181d4:	18e3      	adds	r3, r4, r3
 80181d6:	9302      	str	r3, [sp, #8]
 80181d8:	692b      	ldr	r3, [r5, #16]
 80181da:	3714      	adds	r7, #20
 80181dc:	009b      	lsls	r3, r3, #2
 80181de:	18fb      	adds	r3, r7, r3
 80181e0:	9303      	str	r3, [sp, #12]
 80181e2:	0003      	movs	r3, r0
 80181e4:	4694      	mov	ip, r2
 80181e6:	3314      	adds	r3, #20
 80181e8:	cc20      	ldmia	r4!, {r5}
 80181ea:	cf04      	ldmia	r7!, {r2}
 80181ec:	9201      	str	r2, [sp, #4]
 80181ee:	b2aa      	uxth	r2, r5
 80181f0:	4494      	add	ip, r2
 80181f2:	466a      	mov	r2, sp
 80181f4:	4661      	mov	r1, ip
 80181f6:	8892      	ldrh	r2, [r2, #4]
 80181f8:	0c2d      	lsrs	r5, r5, #16
 80181fa:	1a8a      	subs	r2, r1, r2
 80181fc:	9901      	ldr	r1, [sp, #4]
 80181fe:	0c09      	lsrs	r1, r1, #16
 8018200:	1a69      	subs	r1, r5, r1
 8018202:	1415      	asrs	r5, r2, #16
 8018204:	1949      	adds	r1, r1, r5
 8018206:	140d      	asrs	r5, r1, #16
 8018208:	b292      	uxth	r2, r2
 801820a:	0409      	lsls	r1, r1, #16
 801820c:	430a      	orrs	r2, r1
 801820e:	601a      	str	r2, [r3, #0]
 8018210:	9a03      	ldr	r2, [sp, #12]
 8018212:	46ac      	mov	ip, r5
 8018214:	3304      	adds	r3, #4
 8018216:	42ba      	cmp	r2, r7
 8018218:	d8e6      	bhi.n	80181e8 <__mdiff+0x64>
 801821a:	9902      	ldr	r1, [sp, #8]
 801821c:	001a      	movs	r2, r3
 801821e:	428c      	cmp	r4, r1
 8018220:	d305      	bcc.n	801822e <__mdiff+0xaa>
 8018222:	3a04      	subs	r2, #4
 8018224:	6813      	ldr	r3, [r2, #0]
 8018226:	2b00      	cmp	r3, #0
 8018228:	d00e      	beq.n	8018248 <__mdiff+0xc4>
 801822a:	6106      	str	r6, [r0, #16]
 801822c:	e7bc      	b.n	80181a8 <__mdiff+0x24>
 801822e:	cc04      	ldmia	r4!, {r2}
 8018230:	b291      	uxth	r1, r2
 8018232:	4461      	add	r1, ip
 8018234:	140d      	asrs	r5, r1, #16
 8018236:	0c12      	lsrs	r2, r2, #16
 8018238:	1952      	adds	r2, r2, r5
 801823a:	1415      	asrs	r5, r2, #16
 801823c:	b289      	uxth	r1, r1
 801823e:	0412      	lsls	r2, r2, #16
 8018240:	430a      	orrs	r2, r1
 8018242:	46ac      	mov	ip, r5
 8018244:	c304      	stmia	r3!, {r2}
 8018246:	e7e8      	b.n	801821a <__mdiff+0x96>
 8018248:	3e01      	subs	r6, #1
 801824a:	e7ea      	b.n	8018222 <__mdiff+0x9e>

0801824c <__ulp>:
 801824c:	000b      	movs	r3, r1
 801824e:	4910      	ldr	r1, [pc, #64]	; (8018290 <__ulp+0x44>)
 8018250:	b510      	push	{r4, lr}
 8018252:	4019      	ands	r1, r3
 8018254:	4b0f      	ldr	r3, [pc, #60]	; (8018294 <__ulp+0x48>)
 8018256:	18c9      	adds	r1, r1, r3
 8018258:	2900      	cmp	r1, #0
 801825a:	dd04      	ble.n	8018266 <__ulp+0x1a>
 801825c:	2200      	movs	r2, #0
 801825e:	000b      	movs	r3, r1
 8018260:	0010      	movs	r0, r2
 8018262:	0019      	movs	r1, r3
 8018264:	bd10      	pop	{r4, pc}
 8018266:	4249      	negs	r1, r1
 8018268:	1509      	asrs	r1, r1, #20
 801826a:	2200      	movs	r2, #0
 801826c:	2300      	movs	r3, #0
 801826e:	2913      	cmp	r1, #19
 8018270:	dc04      	bgt.n	801827c <__ulp+0x30>
 8018272:	2080      	movs	r0, #128	; 0x80
 8018274:	0300      	lsls	r0, r0, #12
 8018276:	4108      	asrs	r0, r1
 8018278:	0003      	movs	r3, r0
 801827a:	e7f1      	b.n	8018260 <__ulp+0x14>
 801827c:	3914      	subs	r1, #20
 801827e:	2001      	movs	r0, #1
 8018280:	291e      	cmp	r1, #30
 8018282:	dc02      	bgt.n	801828a <__ulp+0x3e>
 8018284:	241f      	movs	r4, #31
 8018286:	1a61      	subs	r1, r4, r1
 8018288:	4088      	lsls	r0, r1
 801828a:	0002      	movs	r2, r0
 801828c:	e7e8      	b.n	8018260 <__ulp+0x14>
 801828e:	46c0      	nop			; (mov r8, r8)
 8018290:	7ff00000 	.word	0x7ff00000
 8018294:	fcc00000 	.word	0xfcc00000

08018298 <__b2d>:
 8018298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801829a:	0006      	movs	r6, r0
 801829c:	6903      	ldr	r3, [r0, #16]
 801829e:	3614      	adds	r6, #20
 80182a0:	009b      	lsls	r3, r3, #2
 80182a2:	18f3      	adds	r3, r6, r3
 80182a4:	1f1d      	subs	r5, r3, #4
 80182a6:	682c      	ldr	r4, [r5, #0]
 80182a8:	000f      	movs	r7, r1
 80182aa:	0020      	movs	r0, r4
 80182ac:	9301      	str	r3, [sp, #4]
 80182ae:	f7ff fdd9 	bl	8017e64 <__hi0bits>
 80182b2:	2320      	movs	r3, #32
 80182b4:	1a1b      	subs	r3, r3, r0
 80182b6:	603b      	str	r3, [r7, #0]
 80182b8:	491c      	ldr	r1, [pc, #112]	; (801832c <__b2d+0x94>)
 80182ba:	280a      	cmp	r0, #10
 80182bc:	dc16      	bgt.n	80182ec <__b2d+0x54>
 80182be:	230b      	movs	r3, #11
 80182c0:	0027      	movs	r7, r4
 80182c2:	1a1b      	subs	r3, r3, r0
 80182c4:	40df      	lsrs	r7, r3
 80182c6:	4339      	orrs	r1, r7
 80182c8:	469c      	mov	ip, r3
 80182ca:	000b      	movs	r3, r1
 80182cc:	2100      	movs	r1, #0
 80182ce:	42ae      	cmp	r6, r5
 80182d0:	d202      	bcs.n	80182d8 <__b2d+0x40>
 80182d2:	9901      	ldr	r1, [sp, #4]
 80182d4:	3908      	subs	r1, #8
 80182d6:	6809      	ldr	r1, [r1, #0]
 80182d8:	3015      	adds	r0, #21
 80182da:	4084      	lsls	r4, r0
 80182dc:	4660      	mov	r0, ip
 80182de:	40c1      	lsrs	r1, r0
 80182e0:	430c      	orrs	r4, r1
 80182e2:	0022      	movs	r2, r4
 80182e4:	0010      	movs	r0, r2
 80182e6:	0019      	movs	r1, r3
 80182e8:	b003      	add	sp, #12
 80182ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182ec:	2700      	movs	r7, #0
 80182ee:	42ae      	cmp	r6, r5
 80182f0:	d202      	bcs.n	80182f8 <__b2d+0x60>
 80182f2:	9d01      	ldr	r5, [sp, #4]
 80182f4:	3d08      	subs	r5, #8
 80182f6:	682f      	ldr	r7, [r5, #0]
 80182f8:	380b      	subs	r0, #11
 80182fa:	4684      	mov	ip, r0
 80182fc:	1e03      	subs	r3, r0, #0
 80182fe:	d012      	beq.n	8018326 <__b2d+0x8e>
 8018300:	409c      	lsls	r4, r3
 8018302:	2020      	movs	r0, #32
 8018304:	4321      	orrs	r1, r4
 8018306:	003c      	movs	r4, r7
 8018308:	1ac0      	subs	r0, r0, r3
 801830a:	40c4      	lsrs	r4, r0
 801830c:	4321      	orrs	r1, r4
 801830e:	000b      	movs	r3, r1
 8018310:	2100      	movs	r1, #0
 8018312:	42b5      	cmp	r5, r6
 8018314:	d901      	bls.n	801831a <__b2d+0x82>
 8018316:	3d04      	subs	r5, #4
 8018318:	6829      	ldr	r1, [r5, #0]
 801831a:	4664      	mov	r4, ip
 801831c:	40c1      	lsrs	r1, r0
 801831e:	40a7      	lsls	r7, r4
 8018320:	430f      	orrs	r7, r1
 8018322:	003a      	movs	r2, r7
 8018324:	e7de      	b.n	80182e4 <__b2d+0x4c>
 8018326:	4321      	orrs	r1, r4
 8018328:	000b      	movs	r3, r1
 801832a:	e7fa      	b.n	8018322 <__b2d+0x8a>
 801832c:	3ff00000 	.word	0x3ff00000

08018330 <__d2b>:
 8018330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018332:	001d      	movs	r5, r3
 8018334:	2101      	movs	r1, #1
 8018336:	0014      	movs	r4, r2
 8018338:	9f08      	ldr	r7, [sp, #32]
 801833a:	f7ff fce5 	bl	8017d08 <_Balloc>
 801833e:	032b      	lsls	r3, r5, #12
 8018340:	006d      	lsls	r5, r5, #1
 8018342:	0006      	movs	r6, r0
 8018344:	0b1b      	lsrs	r3, r3, #12
 8018346:	0d6d      	lsrs	r5, r5, #21
 8018348:	d124      	bne.n	8018394 <__d2b+0x64>
 801834a:	9301      	str	r3, [sp, #4]
 801834c:	2c00      	cmp	r4, #0
 801834e:	d027      	beq.n	80183a0 <__d2b+0x70>
 8018350:	4668      	mov	r0, sp
 8018352:	9400      	str	r4, [sp, #0]
 8018354:	f7ff fda0 	bl	8017e98 <__lo0bits>
 8018358:	9c00      	ldr	r4, [sp, #0]
 801835a:	2800      	cmp	r0, #0
 801835c:	d01e      	beq.n	801839c <__d2b+0x6c>
 801835e:	9b01      	ldr	r3, [sp, #4]
 8018360:	2120      	movs	r1, #32
 8018362:	001a      	movs	r2, r3
 8018364:	1a09      	subs	r1, r1, r0
 8018366:	408a      	lsls	r2, r1
 8018368:	40c3      	lsrs	r3, r0
 801836a:	4322      	orrs	r2, r4
 801836c:	6172      	str	r2, [r6, #20]
 801836e:	9301      	str	r3, [sp, #4]
 8018370:	9c01      	ldr	r4, [sp, #4]
 8018372:	61b4      	str	r4, [r6, #24]
 8018374:	1e63      	subs	r3, r4, #1
 8018376:	419c      	sbcs	r4, r3
 8018378:	3401      	adds	r4, #1
 801837a:	6134      	str	r4, [r6, #16]
 801837c:	2d00      	cmp	r5, #0
 801837e:	d018      	beq.n	80183b2 <__d2b+0x82>
 8018380:	4b12      	ldr	r3, [pc, #72]	; (80183cc <__d2b+0x9c>)
 8018382:	18ed      	adds	r5, r5, r3
 8018384:	2335      	movs	r3, #53	; 0x35
 8018386:	182d      	adds	r5, r5, r0
 8018388:	603d      	str	r5, [r7, #0]
 801838a:	1a18      	subs	r0, r3, r0
 801838c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801838e:	6018      	str	r0, [r3, #0]
 8018390:	0030      	movs	r0, r6
 8018392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018394:	2280      	movs	r2, #128	; 0x80
 8018396:	0352      	lsls	r2, r2, #13
 8018398:	4313      	orrs	r3, r2
 801839a:	e7d6      	b.n	801834a <__d2b+0x1a>
 801839c:	6174      	str	r4, [r6, #20]
 801839e:	e7e7      	b.n	8018370 <__d2b+0x40>
 80183a0:	a801      	add	r0, sp, #4
 80183a2:	f7ff fd79 	bl	8017e98 <__lo0bits>
 80183a6:	2401      	movs	r4, #1
 80183a8:	9b01      	ldr	r3, [sp, #4]
 80183aa:	6134      	str	r4, [r6, #16]
 80183ac:	6173      	str	r3, [r6, #20]
 80183ae:	3020      	adds	r0, #32
 80183b0:	e7e4      	b.n	801837c <__d2b+0x4c>
 80183b2:	4b07      	ldr	r3, [pc, #28]	; (80183d0 <__d2b+0xa0>)
 80183b4:	18c0      	adds	r0, r0, r3
 80183b6:	4b07      	ldr	r3, [pc, #28]	; (80183d4 <__d2b+0xa4>)
 80183b8:	6038      	str	r0, [r7, #0]
 80183ba:	18e3      	adds	r3, r4, r3
 80183bc:	009b      	lsls	r3, r3, #2
 80183be:	18f3      	adds	r3, r6, r3
 80183c0:	6958      	ldr	r0, [r3, #20]
 80183c2:	f7ff fd4f 	bl	8017e64 <__hi0bits>
 80183c6:	0164      	lsls	r4, r4, #5
 80183c8:	1a20      	subs	r0, r4, r0
 80183ca:	e7df      	b.n	801838c <__d2b+0x5c>
 80183cc:	fffffbcd 	.word	0xfffffbcd
 80183d0:	fffffbce 	.word	0xfffffbce
 80183d4:	3fffffff 	.word	0x3fffffff

080183d8 <__ratio>:
 80183d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183da:	b085      	sub	sp, #20
 80183dc:	000f      	movs	r7, r1
 80183de:	a902      	add	r1, sp, #8
 80183e0:	0006      	movs	r6, r0
 80183e2:	f7ff ff59 	bl	8018298 <__b2d>
 80183e6:	0004      	movs	r4, r0
 80183e8:	000d      	movs	r5, r1
 80183ea:	0038      	movs	r0, r7
 80183ec:	a903      	add	r1, sp, #12
 80183ee:	9400      	str	r4, [sp, #0]
 80183f0:	9501      	str	r5, [sp, #4]
 80183f2:	f7ff ff51 	bl	8018298 <__b2d>
 80183f6:	6936      	ldr	r6, [r6, #16]
 80183f8:	693f      	ldr	r7, [r7, #16]
 80183fa:	0002      	movs	r2, r0
 80183fc:	1bf7      	subs	r7, r6, r7
 80183fe:	017e      	lsls	r6, r7, #5
 8018400:	46b4      	mov	ip, r6
 8018402:	9f03      	ldr	r7, [sp, #12]
 8018404:	9e02      	ldr	r6, [sp, #8]
 8018406:	000b      	movs	r3, r1
 8018408:	1bf6      	subs	r6, r6, r7
 801840a:	4466      	add	r6, ip
 801840c:	0537      	lsls	r7, r6, #20
 801840e:	2e00      	cmp	r6, #0
 8018410:	dd07      	ble.n	8018422 <__ratio+0x4a>
 8018412:	1979      	adds	r1, r7, r5
 8018414:	9101      	str	r1, [sp, #4]
 8018416:	9800      	ldr	r0, [sp, #0]
 8018418:	9901      	ldr	r1, [sp, #4]
 801841a:	f7e9 f901 	bl	8001620 <__aeabi_ddiv>
 801841e:	b005      	add	sp, #20
 8018420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018422:	1bcb      	subs	r3, r1, r7
 8018424:	e7f7      	b.n	8018416 <__ratio+0x3e>

08018426 <__copybits>:
 8018426:	0013      	movs	r3, r2
 8018428:	3901      	subs	r1, #1
 801842a:	b510      	push	{r4, lr}
 801842c:	1149      	asrs	r1, r1, #5
 801842e:	6912      	ldr	r2, [r2, #16]
 8018430:	3101      	adds	r1, #1
 8018432:	0089      	lsls	r1, r1, #2
 8018434:	3314      	adds	r3, #20
 8018436:	0092      	lsls	r2, r2, #2
 8018438:	1841      	adds	r1, r0, r1
 801843a:	189a      	adds	r2, r3, r2
 801843c:	429a      	cmp	r2, r3
 801843e:	d803      	bhi.n	8018448 <__copybits+0x22>
 8018440:	2300      	movs	r3, #0
 8018442:	4281      	cmp	r1, r0
 8018444:	d803      	bhi.n	801844e <__copybits+0x28>
 8018446:	bd10      	pop	{r4, pc}
 8018448:	cb10      	ldmia	r3!, {r4}
 801844a:	c010      	stmia	r0!, {r4}
 801844c:	e7f6      	b.n	801843c <__copybits+0x16>
 801844e:	c008      	stmia	r0!, {r3}
 8018450:	e7f7      	b.n	8018442 <__copybits+0x1c>

08018452 <__any_on>:
 8018452:	0002      	movs	r2, r0
 8018454:	6900      	ldr	r0, [r0, #16]
 8018456:	b510      	push	{r4, lr}
 8018458:	3214      	adds	r2, #20
 801845a:	114b      	asrs	r3, r1, #5
 801845c:	4298      	cmp	r0, r3
 801845e:	db12      	blt.n	8018486 <__any_on+0x34>
 8018460:	dd0b      	ble.n	801847a <__any_on+0x28>
 8018462:	201f      	movs	r0, #31
 8018464:	4001      	ands	r1, r0
 8018466:	d008      	beq.n	801847a <__any_on+0x28>
 8018468:	0098      	lsls	r0, r3, #2
 801846a:	5884      	ldr	r4, [r0, r2]
 801846c:	0020      	movs	r0, r4
 801846e:	40c8      	lsrs	r0, r1
 8018470:	4088      	lsls	r0, r1
 8018472:	0001      	movs	r1, r0
 8018474:	2001      	movs	r0, #1
 8018476:	428c      	cmp	r4, r1
 8018478:	d104      	bne.n	8018484 <__any_on+0x32>
 801847a:	009b      	lsls	r3, r3, #2
 801847c:	18d3      	adds	r3, r2, r3
 801847e:	4293      	cmp	r3, r2
 8018480:	d803      	bhi.n	801848a <__any_on+0x38>
 8018482:	2000      	movs	r0, #0
 8018484:	bd10      	pop	{r4, pc}
 8018486:	0003      	movs	r3, r0
 8018488:	e7f7      	b.n	801847a <__any_on+0x28>
 801848a:	3b04      	subs	r3, #4
 801848c:	6819      	ldr	r1, [r3, #0]
 801848e:	2900      	cmp	r1, #0
 8018490:	d0f5      	beq.n	801847e <__any_on+0x2c>
 8018492:	2001      	movs	r0, #1
 8018494:	e7f6      	b.n	8018484 <__any_on+0x32>
	...

08018498 <frexp>:
 8018498:	b570      	push	{r4, r5, r6, lr}
 801849a:	0014      	movs	r4, r2
 801849c:	2500      	movs	r5, #0
 801849e:	6025      	str	r5, [r4, #0]
 80184a0:	4d10      	ldr	r5, [pc, #64]	; (80184e4 <frexp+0x4c>)
 80184a2:	004b      	lsls	r3, r1, #1
 80184a4:	000a      	movs	r2, r1
 80184a6:	085b      	lsrs	r3, r3, #1
 80184a8:	42ab      	cmp	r3, r5
 80184aa:	dc1a      	bgt.n	80184e2 <frexp+0x4a>
 80184ac:	001d      	movs	r5, r3
 80184ae:	4305      	orrs	r5, r0
 80184b0:	d017      	beq.n	80184e2 <frexp+0x4a>
 80184b2:	4d0d      	ldr	r5, [pc, #52]	; (80184e8 <frexp+0x50>)
 80184b4:	42ab      	cmp	r3, r5
 80184b6:	dc09      	bgt.n	80184cc <frexp+0x34>
 80184b8:	2200      	movs	r2, #0
 80184ba:	4b0c      	ldr	r3, [pc, #48]	; (80184ec <frexp+0x54>)
 80184bc:	f7e9 fcba 	bl	8001e34 <__aeabi_dmul>
 80184c0:	2536      	movs	r5, #54	; 0x36
 80184c2:	000a      	movs	r2, r1
 80184c4:	004b      	lsls	r3, r1, #1
 80184c6:	426d      	negs	r5, r5
 80184c8:	085b      	lsrs	r3, r3, #1
 80184ca:	6025      	str	r5, [r4, #0]
 80184cc:	4d08      	ldr	r5, [pc, #32]	; (80184f0 <frexp+0x58>)
 80184ce:	151b      	asrs	r3, r3, #20
 80184d0:	195b      	adds	r3, r3, r5
 80184d2:	6825      	ldr	r5, [r4, #0]
 80184d4:	18eb      	adds	r3, r5, r3
 80184d6:	6023      	str	r3, [r4, #0]
 80184d8:	4b06      	ldr	r3, [pc, #24]	; (80184f4 <frexp+0x5c>)
 80184da:	401a      	ands	r2, r3
 80184dc:	4b06      	ldr	r3, [pc, #24]	; (80184f8 <frexp+0x60>)
 80184de:	4313      	orrs	r3, r2
 80184e0:	0019      	movs	r1, r3
 80184e2:	bd70      	pop	{r4, r5, r6, pc}
 80184e4:	7fefffff 	.word	0x7fefffff
 80184e8:	000fffff 	.word	0x000fffff
 80184ec:	43500000 	.word	0x43500000
 80184f0:	fffffc02 	.word	0xfffffc02
 80184f4:	800fffff 	.word	0x800fffff
 80184f8:	3fe00000 	.word	0x3fe00000

080184fc <__ssprint_r>:
 80184fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184fe:	6893      	ldr	r3, [r2, #8]
 8018500:	b087      	sub	sp, #28
 8018502:	9002      	str	r0, [sp, #8]
 8018504:	000c      	movs	r4, r1
 8018506:	0016      	movs	r6, r2
 8018508:	2b00      	cmp	r3, #0
 801850a:	d063      	beq.n	80185d4 <__ssprint_r+0xd8>
 801850c:	6813      	ldr	r3, [r2, #0]
 801850e:	9303      	str	r3, [sp, #12]
 8018510:	2300      	movs	r3, #0
 8018512:	001f      	movs	r7, r3
 8018514:	9305      	str	r3, [sp, #20]
 8018516:	2f00      	cmp	r7, #0
 8018518:	d02e      	beq.n	8018578 <__ssprint_r+0x7c>
 801851a:	68a5      	ldr	r5, [r4, #8]
 801851c:	42af      	cmp	r7, r5
 801851e:	d347      	bcc.n	80185b0 <__ssprint_r+0xb4>
 8018520:	2390      	movs	r3, #144	; 0x90
 8018522:	89a2      	ldrh	r2, [r4, #12]
 8018524:	00db      	lsls	r3, r3, #3
 8018526:	421a      	tst	r2, r3
 8018528:	d042      	beq.n	80185b0 <__ssprint_r+0xb4>
 801852a:	2003      	movs	r0, #3
 801852c:	6921      	ldr	r1, [r4, #16]
 801852e:	6823      	ldr	r3, [r4, #0]
 8018530:	1a5b      	subs	r3, r3, r1
 8018532:	9304      	str	r3, [sp, #16]
 8018534:	6963      	ldr	r3, [r4, #20]
 8018536:	4343      	muls	r3, r0
 8018538:	0fd8      	lsrs	r0, r3, #31
 801853a:	18c3      	adds	r3, r0, r3
 801853c:	105b      	asrs	r3, r3, #1
 801853e:	9301      	str	r3, [sp, #4]
 8018540:	9b04      	ldr	r3, [sp, #16]
 8018542:	9801      	ldr	r0, [sp, #4]
 8018544:	3301      	adds	r3, #1
 8018546:	19db      	adds	r3, r3, r7
 8018548:	4283      	cmp	r3, r0
 801854a:	d900      	bls.n	801854e <__ssprint_r+0x52>
 801854c:	9301      	str	r3, [sp, #4]
 801854e:	0553      	lsls	r3, r2, #21
 8018550:	d544      	bpl.n	80185dc <__ssprint_r+0xe0>
 8018552:	9901      	ldr	r1, [sp, #4]
 8018554:	9802      	ldr	r0, [sp, #8]
 8018556:	f7fb fa85 	bl	8013a64 <_malloc_r>
 801855a:	1e05      	subs	r5, r0, #0
 801855c:	d114      	bne.n	8018588 <__ssprint_r+0x8c>
 801855e:	230c      	movs	r3, #12
 8018560:	9a02      	ldr	r2, [sp, #8]
 8018562:	2001      	movs	r0, #1
 8018564:	6013      	str	r3, [r2, #0]
 8018566:	2340      	movs	r3, #64	; 0x40
 8018568:	89a2      	ldrh	r2, [r4, #12]
 801856a:	4240      	negs	r0, r0
 801856c:	4313      	orrs	r3, r2
 801856e:	81a3      	strh	r3, [r4, #12]
 8018570:	2300      	movs	r3, #0
 8018572:	60b3      	str	r3, [r6, #8]
 8018574:	6073      	str	r3, [r6, #4]
 8018576:	e02f      	b.n	80185d8 <__ssprint_r+0xdc>
 8018578:	9b03      	ldr	r3, [sp, #12]
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	9305      	str	r3, [sp, #20]
 801857e:	9b03      	ldr	r3, [sp, #12]
 8018580:	685f      	ldr	r7, [r3, #4]
 8018582:	3308      	adds	r3, #8
 8018584:	9303      	str	r3, [sp, #12]
 8018586:	e7c6      	b.n	8018516 <__ssprint_r+0x1a>
 8018588:	9a04      	ldr	r2, [sp, #16]
 801858a:	6921      	ldr	r1, [r4, #16]
 801858c:	f7fb fca3 	bl	8013ed6 <memcpy>
 8018590:	89a3      	ldrh	r3, [r4, #12]
 8018592:	4a18      	ldr	r2, [pc, #96]	; (80185f4 <__ssprint_r+0xf8>)
 8018594:	401a      	ands	r2, r3
 8018596:	2380      	movs	r3, #128	; 0x80
 8018598:	4313      	orrs	r3, r2
 801859a:	81a3      	strh	r3, [r4, #12]
 801859c:	9b04      	ldr	r3, [sp, #16]
 801859e:	6125      	str	r5, [r4, #16]
 80185a0:	18ed      	adds	r5, r5, r3
 80185a2:	6025      	str	r5, [r4, #0]
 80185a4:	003d      	movs	r5, r7
 80185a6:	9b01      	ldr	r3, [sp, #4]
 80185a8:	9a04      	ldr	r2, [sp, #16]
 80185aa:	6163      	str	r3, [r4, #20]
 80185ac:	1a9b      	subs	r3, r3, r2
 80185ae:	60a3      	str	r3, [r4, #8]
 80185b0:	42bd      	cmp	r5, r7
 80185b2:	d900      	bls.n	80185b6 <__ssprint_r+0xba>
 80185b4:	003d      	movs	r5, r7
 80185b6:	002a      	movs	r2, r5
 80185b8:	9905      	ldr	r1, [sp, #20]
 80185ba:	6820      	ldr	r0, [r4, #0]
 80185bc:	f7ff fb91 	bl	8017ce2 <memmove>
 80185c0:	68a3      	ldr	r3, [r4, #8]
 80185c2:	1b5b      	subs	r3, r3, r5
 80185c4:	60a3      	str	r3, [r4, #8]
 80185c6:	6823      	ldr	r3, [r4, #0]
 80185c8:	195d      	adds	r5, r3, r5
 80185ca:	68b3      	ldr	r3, [r6, #8]
 80185cc:	6025      	str	r5, [r4, #0]
 80185ce:	1bdb      	subs	r3, r3, r7
 80185d0:	60b3      	str	r3, [r6, #8]
 80185d2:	d1d1      	bne.n	8018578 <__ssprint_r+0x7c>
 80185d4:	2000      	movs	r0, #0
 80185d6:	6070      	str	r0, [r6, #4]
 80185d8:	b007      	add	sp, #28
 80185da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185dc:	9a01      	ldr	r2, [sp, #4]
 80185de:	9802      	ldr	r0, [sp, #8]
 80185e0:	f7fb fcbe 	bl	8013f60 <_realloc_r>
 80185e4:	1e05      	subs	r5, r0, #0
 80185e6:	d1d9      	bne.n	801859c <__ssprint_r+0xa0>
 80185e8:	6921      	ldr	r1, [r4, #16]
 80185ea:	9802      	ldr	r0, [sp, #8]
 80185ec:	f7fe ff78 	bl	80174e0 <_free_r>
 80185f0:	e7b5      	b.n	801855e <__ssprint_r+0x62>
 80185f2:	46c0      	nop			; (mov r8, r8)
 80185f4:	fffffb7f 	.word	0xfffffb7f

080185f8 <__register_exitproc>:
 80185f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80185fa:	4d29      	ldr	r5, [pc, #164]	; (80186a0 <__register_exitproc+0xa8>)
 80185fc:	0006      	movs	r6, r0
 80185fe:	6828      	ldr	r0, [r5, #0]
 8018600:	9301      	str	r3, [sp, #4]
 8018602:	9100      	str	r1, [sp, #0]
 8018604:	0017      	movs	r7, r2
 8018606:	f7ff fb5f 	bl	8017cc8 <__retarget_lock_acquire_recursive>
 801860a:	4b26      	ldr	r3, [pc, #152]	; (80186a4 <__register_exitproc+0xac>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	001c      	movs	r4, r3
 8018610:	34fc      	adds	r4, #252	; 0xfc
 8018612:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8018614:	2800      	cmp	r0, #0
 8018616:	d103      	bne.n	8018620 <__register_exitproc+0x28>
 8018618:	334d      	adds	r3, #77	; 0x4d
 801861a:	33ff      	adds	r3, #255	; 0xff
 801861c:	0018      	movs	r0, r3
 801861e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8018620:	6843      	ldr	r3, [r0, #4]
 8018622:	2b1f      	cmp	r3, #31
 8018624:	dd18      	ble.n	8018658 <__register_exitproc+0x60>
 8018626:	4b20      	ldr	r3, [pc, #128]	; (80186a8 <__register_exitproc+0xb0>)
 8018628:	2b00      	cmp	r3, #0
 801862a:	d105      	bne.n	8018638 <__register_exitproc+0x40>
 801862c:	6828      	ldr	r0, [r5, #0]
 801862e:	f7ff fb4c 	bl	8017cca <__retarget_lock_release_recursive>
 8018632:	2001      	movs	r0, #1
 8018634:	4240      	negs	r0, r0
 8018636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018638:	20c8      	movs	r0, #200	; 0xc8
 801863a:	0040      	lsls	r0, r0, #1
 801863c:	f7fb f9fe 	bl	8013a3c <malloc>
 8018640:	2800      	cmp	r0, #0
 8018642:	d0f3      	beq.n	801862c <__register_exitproc+0x34>
 8018644:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8018646:	2300      	movs	r3, #0
 8018648:	6002      	str	r2, [r0, #0]
 801864a:	22c4      	movs	r2, #196	; 0xc4
 801864c:	0052      	lsls	r2, r2, #1
 801864e:	6043      	str	r3, [r0, #4]
 8018650:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018652:	5083      	str	r3, [r0, r2]
 8018654:	3204      	adds	r2, #4
 8018656:	5083      	str	r3, [r0, r2]
 8018658:	6843      	ldr	r3, [r0, #4]
 801865a:	2e00      	cmp	r6, #0
 801865c:	d014      	beq.n	8018688 <__register_exitproc+0x90>
 801865e:	009a      	lsls	r2, r3, #2
 8018660:	1882      	adds	r2, r0, r2
 8018662:	0011      	movs	r1, r2
 8018664:	3188      	adds	r1, #136	; 0x88
 8018666:	600f      	str	r7, [r1, #0]
 8018668:	2101      	movs	r1, #1
 801866a:	0004      	movs	r4, r0
 801866c:	4099      	lsls	r1, r3
 801866e:	3485      	adds	r4, #133	; 0x85
 8018670:	34ff      	adds	r4, #255	; 0xff
 8018672:	6865      	ldr	r5, [r4, #4]
 8018674:	32fc      	adds	r2, #252	; 0xfc
 8018676:	430d      	orrs	r5, r1
 8018678:	6065      	str	r5, [r4, #4]
 801867a:	9d01      	ldr	r5, [sp, #4]
 801867c:	60d5      	str	r5, [r2, #12]
 801867e:	2e02      	cmp	r6, #2
 8018680:	d102      	bne.n	8018688 <__register_exitproc+0x90>
 8018682:	68a2      	ldr	r2, [r4, #8]
 8018684:	4311      	orrs	r1, r2
 8018686:	60a1      	str	r1, [r4, #8]
 8018688:	1c5a      	adds	r2, r3, #1
 801868a:	6042      	str	r2, [r0, #4]
 801868c:	3302      	adds	r3, #2
 801868e:	9a00      	ldr	r2, [sp, #0]
 8018690:	009b      	lsls	r3, r3, #2
 8018692:	501a      	str	r2, [r3, r0]
 8018694:	4b02      	ldr	r3, [pc, #8]	; (80186a0 <__register_exitproc+0xa8>)
 8018696:	6818      	ldr	r0, [r3, #0]
 8018698:	f7ff fb17 	bl	8017cca <__retarget_lock_release_recursive>
 801869c:	2000      	movs	r0, #0
 801869e:	e7ca      	b.n	8018636 <__register_exitproc+0x3e>
 80186a0:	20000ac4 	.word	0x20000ac4
 80186a4:	0801b824 	.word	0x0801b824
 80186a8:	08013a3d 	.word	0x08013a3d

080186ac <_calloc_r>:
 80186ac:	b510      	push	{r4, lr}
 80186ae:	4351      	muls	r1, r2
 80186b0:	f7fb f9d8 	bl	8013a64 <_malloc_r>
 80186b4:	1e04      	subs	r4, r0, #0
 80186b6:	d01a      	beq.n	80186ee <_calloc_r+0x42>
 80186b8:	0003      	movs	r3, r0
 80186ba:	3b08      	subs	r3, #8
 80186bc:	685a      	ldr	r2, [r3, #4]
 80186be:	2303      	movs	r3, #3
 80186c0:	439a      	bics	r2, r3
 80186c2:	3a04      	subs	r2, #4
 80186c4:	2a24      	cmp	r2, #36	; 0x24
 80186c6:	d819      	bhi.n	80186fc <_calloc_r+0x50>
 80186c8:	0003      	movs	r3, r0
 80186ca:	2a13      	cmp	r2, #19
 80186cc:	d90b      	bls.n	80186e6 <_calloc_r+0x3a>
 80186ce:	2100      	movs	r1, #0
 80186d0:	3308      	adds	r3, #8
 80186d2:	6001      	str	r1, [r0, #0]
 80186d4:	6041      	str	r1, [r0, #4]
 80186d6:	2a1b      	cmp	r2, #27
 80186d8:	d905      	bls.n	80186e6 <_calloc_r+0x3a>
 80186da:	6081      	str	r1, [r0, #8]
 80186dc:	60c1      	str	r1, [r0, #12]
 80186de:	2a24      	cmp	r2, #36	; 0x24
 80186e0:	d007      	beq.n	80186f2 <_calloc_r+0x46>
 80186e2:	0003      	movs	r3, r0
 80186e4:	3310      	adds	r3, #16
 80186e6:	2200      	movs	r2, #0
 80186e8:	601a      	str	r2, [r3, #0]
 80186ea:	605a      	str	r2, [r3, #4]
 80186ec:	609a      	str	r2, [r3, #8]
 80186ee:	0020      	movs	r0, r4
 80186f0:	bd10      	pop	{r4, pc}
 80186f2:	0003      	movs	r3, r0
 80186f4:	6101      	str	r1, [r0, #16]
 80186f6:	3318      	adds	r3, #24
 80186f8:	6141      	str	r1, [r0, #20]
 80186fa:	e7f4      	b.n	80186e6 <_calloc_r+0x3a>
 80186fc:	2100      	movs	r1, #0
 80186fe:	f7fb fbf3 	bl	8013ee8 <memset>
 8018702:	e7f4      	b.n	80186ee <_calloc_r+0x42>

08018704 <_sbrk>:
 8018704:	4b05      	ldr	r3, [pc, #20]	; (801871c <_sbrk+0x18>)
 8018706:	0002      	movs	r2, r0
 8018708:	6819      	ldr	r1, [r3, #0]
 801870a:	2900      	cmp	r1, #0
 801870c:	d101      	bne.n	8018712 <_sbrk+0xe>
 801870e:	4904      	ldr	r1, [pc, #16]	; (8018720 <_sbrk+0x1c>)
 8018710:	6019      	str	r1, [r3, #0]
 8018712:	6818      	ldr	r0, [r3, #0]
 8018714:	1882      	adds	r2, r0, r2
 8018716:	601a      	str	r2, [r3, #0]
 8018718:	4770      	bx	lr
 801871a:	46c0      	nop			; (mov r8, r8)
 801871c:	20006984 	.word	0x20006984
 8018720:	20006ff8 	.word	0x20006ff8

08018724 <_init>:
 8018724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018726:	46c0      	nop			; (mov r8, r8)
 8018728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801872a:	bc08      	pop	{r3}
 801872c:	469e      	mov	lr, r3
 801872e:	4770      	bx	lr

08018730 <_fini>:
 8018730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018732:	46c0      	nop			; (mov r8, r8)
 8018734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018736:	bc08      	pop	{r3}
 8018738:	469e      	mov	lr, r3
 801873a:	4770      	bx	lr
