
H0AR9x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019150  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033ec  08019210  08019210  00029210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c5fc  0801c5fc  00030ac8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c5fc  0801c5fc  0002c5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c604  0801c604  00030ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c604  0801c604  0002c604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c60c  0801c60c  0002c60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .mySection    0000001c  20000000  0801c610  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000aa8  20000020  0801c62c  00030020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00006938  20000ac8  0801d0d4  00030ac8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20007400  0801d0d4  00037400  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  00030ac8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a6da  00000000  00000000  00030af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009300  00000000  00000000  0008b1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d71f  00000000  00000000  000944ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001fa0  00000000  00000000  000b1bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000023b0  00000000  00000000  000b3b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000180bf  00000000  00000000  000b5f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b223  00000000  00000000  000cdfff  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d9222  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b78  00000000  00000000  000d92a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000ac8 	.word	0x20000ac8
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080191f4 	.word	0x080191f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000acc 	.word	0x20000acc
 8000100:	080191f4 	.word	0x080191f4

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_shi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5e09      	ldrsh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fc89 	bl	8001d64 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fbe1 	bl	8001c24 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fc7b 	bl	8001d64 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fc71 	bl	8001d64 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fc03 	bl	8001c9c <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fbf9 	bl	8001c9c <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 f9eb 	bl	800089c <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f96d 	bl	80007b0 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 f9dd 	bl	800089c <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 f9d3 	bl	800089c <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 f97b 	bl	8000800 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 f971 	bl	8000800 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_uldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d111      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d10f      	bne.n	8000554 <__aeabi_uldivmod+0x28>
 8000534:	2900      	cmp	r1, #0
 8000536:	d100      	bne.n	800053a <__aeabi_uldivmod+0xe>
 8000538:	2800      	cmp	r0, #0
 800053a:	d002      	beq.n	8000542 <__aeabi_uldivmod+0x16>
 800053c:	2100      	movs	r1, #0
 800053e:	43c9      	mvns	r1, r1
 8000540:	1c08      	adds	r0, r1, #0
 8000542:	b407      	push	{r0, r1, r2}
 8000544:	4802      	ldr	r0, [pc, #8]	; (8000550 <__aeabi_uldivmod+0x24>)
 8000546:	a102      	add	r1, pc, #8	; (adr r1, 8000550 <__aeabi_uldivmod+0x24>)
 8000548:	1840      	adds	r0, r0, r1
 800054a:	9002      	str	r0, [sp, #8]
 800054c:	bd03      	pop	{r0, r1, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fffffee9 	.word	0xfffffee9
 8000554:	b403      	push	{r0, r1}
 8000556:	4668      	mov	r0, sp
 8000558:	b501      	push	{r0, lr}
 800055a:	9802      	ldr	r0, [sp, #8]
 800055c:	f000 f866 	bl	800062c <__udivmoddi4>
 8000560:	9b01      	ldr	r3, [sp, #4]
 8000562:	469e      	mov	lr, r3
 8000564:	b002      	add	sp, #8
 8000566:	bc0c      	pop	{r2, r3}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)

0800056c <__aeabi_lmul>:
 800056c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800056e:	46ce      	mov	lr, r9
 8000570:	4647      	mov	r7, r8
 8000572:	0415      	lsls	r5, r2, #16
 8000574:	0c2d      	lsrs	r5, r5, #16
 8000576:	002e      	movs	r6, r5
 8000578:	b580      	push	{r7, lr}
 800057a:	0407      	lsls	r7, r0, #16
 800057c:	0c14      	lsrs	r4, r2, #16
 800057e:	0c3f      	lsrs	r7, r7, #16
 8000580:	4699      	mov	r9, r3
 8000582:	0c03      	lsrs	r3, r0, #16
 8000584:	437e      	muls	r6, r7
 8000586:	435d      	muls	r5, r3
 8000588:	4367      	muls	r7, r4
 800058a:	4363      	muls	r3, r4
 800058c:	197f      	adds	r7, r7, r5
 800058e:	0c34      	lsrs	r4, r6, #16
 8000590:	19e4      	adds	r4, r4, r7
 8000592:	469c      	mov	ip, r3
 8000594:	42a5      	cmp	r5, r4
 8000596:	d903      	bls.n	80005a0 <__aeabi_lmul+0x34>
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	025b      	lsls	r3, r3, #9
 800059c:	4698      	mov	r8, r3
 800059e:	44c4      	add	ip, r8
 80005a0:	464b      	mov	r3, r9
 80005a2:	4343      	muls	r3, r0
 80005a4:	4351      	muls	r1, r2
 80005a6:	0c25      	lsrs	r5, r4, #16
 80005a8:	0436      	lsls	r6, r6, #16
 80005aa:	4465      	add	r5, ip
 80005ac:	0c36      	lsrs	r6, r6, #16
 80005ae:	0424      	lsls	r4, r4, #16
 80005b0:	19a4      	adds	r4, r4, r6
 80005b2:	195b      	adds	r3, r3, r5
 80005b4:	1859      	adds	r1, r3, r1
 80005b6:	0020      	movs	r0, r4
 80005b8:	bc0c      	pop	{r2, r3}
 80005ba:	4690      	mov	r8, r2
 80005bc:	4699      	mov	r9, r3
 80005be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005c0 <__aeabi_f2uiz>:
 80005c0:	219e      	movs	r1, #158	; 0x9e
 80005c2:	b510      	push	{r4, lr}
 80005c4:	05c9      	lsls	r1, r1, #23
 80005c6:	1c04      	adds	r4, r0, #0
 80005c8:	f7ff ffa6 	bl	8000518 <__aeabi_fcmpge>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d103      	bne.n	80005d8 <__aeabi_f2uiz+0x18>
 80005d0:	1c20      	adds	r0, r4, #0
 80005d2:	f000 fca9 	bl	8000f28 <__aeabi_f2iz>
 80005d6:	bd10      	pop	{r4, pc}
 80005d8:	219e      	movs	r1, #158	; 0x9e
 80005da:	1c20      	adds	r0, r4, #0
 80005dc:	05c9      	lsls	r1, r1, #23
 80005de:	f000 fadf 	bl	8000ba0 <__aeabi_fsub>
 80005e2:	f000 fca1 	bl	8000f28 <__aeabi_f2iz>
 80005e6:	2380      	movs	r3, #128	; 0x80
 80005e8:	061b      	lsls	r3, r3, #24
 80005ea:	469c      	mov	ip, r3
 80005ec:	4460      	add	r0, ip
 80005ee:	e7f2      	b.n	80005d6 <__aeabi_f2uiz+0x16>

080005f0 <__aeabi_d2uiz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	2200      	movs	r2, #0
 80005f4:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <__aeabi_d2uiz+0x38>)
 80005f6:	0004      	movs	r4, r0
 80005f8:	000d      	movs	r5, r1
 80005fa:	f7ff ff53 	bl	80004a4 <__aeabi_dcmpge>
 80005fe:	2800      	cmp	r0, #0
 8000600:	d104      	bne.n	800060c <__aeabi_d2uiz+0x1c>
 8000602:	0020      	movs	r0, r4
 8000604:	0029      	movs	r1, r5
 8000606:	f002 f9eb 	bl	80029e0 <__aeabi_d2iz>
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <__aeabi_d2uiz+0x38>)
 800060e:	2200      	movs	r2, #0
 8000610:	0020      	movs	r0, r4
 8000612:	0029      	movs	r1, r5
 8000614:	f001 fe80 	bl	8002318 <__aeabi_dsub>
 8000618:	f002 f9e2 	bl	80029e0 <__aeabi_d2iz>
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	061b      	lsls	r3, r3, #24
 8000620:	469c      	mov	ip, r3
 8000622:	4460      	add	r0, ip
 8000624:	e7f1      	b.n	800060a <__aeabi_d2uiz+0x1a>
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	41e00000 	.word	0x41e00000

0800062c <__udivmoddi4>:
 800062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800062e:	464f      	mov	r7, r9
 8000630:	4646      	mov	r6, r8
 8000632:	46d6      	mov	lr, sl
 8000634:	b5c0      	push	{r6, r7, lr}
 8000636:	0004      	movs	r4, r0
 8000638:	b082      	sub	sp, #8
 800063a:	000d      	movs	r5, r1
 800063c:	4691      	mov	r9, r2
 800063e:	4698      	mov	r8, r3
 8000640:	428b      	cmp	r3, r1
 8000642:	d82f      	bhi.n	80006a4 <__udivmoddi4+0x78>
 8000644:	d02c      	beq.n	80006a0 <__udivmoddi4+0x74>
 8000646:	4641      	mov	r1, r8
 8000648:	4648      	mov	r0, r9
 800064a:	f002 fb5f 	bl	8002d0c <__clzdi2>
 800064e:	0029      	movs	r1, r5
 8000650:	0006      	movs	r6, r0
 8000652:	0020      	movs	r0, r4
 8000654:	f002 fb5a 	bl	8002d0c <__clzdi2>
 8000658:	1a33      	subs	r3, r6, r0
 800065a:	469c      	mov	ip, r3
 800065c:	3b20      	subs	r3, #32
 800065e:	469a      	mov	sl, r3
 8000660:	d500      	bpl.n	8000664 <__udivmoddi4+0x38>
 8000662:	e076      	b.n	8000752 <__udivmoddi4+0x126>
 8000664:	464b      	mov	r3, r9
 8000666:	4652      	mov	r2, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001f      	movs	r7, r3
 800066c:	464b      	mov	r3, r9
 800066e:	4662      	mov	r2, ip
 8000670:	4093      	lsls	r3, r2
 8000672:	001e      	movs	r6, r3
 8000674:	42af      	cmp	r7, r5
 8000676:	d828      	bhi.n	80006ca <__udivmoddi4+0x9e>
 8000678:	d025      	beq.n	80006c6 <__udivmoddi4+0x9a>
 800067a:	4653      	mov	r3, sl
 800067c:	1ba4      	subs	r4, r4, r6
 800067e:	41bd      	sbcs	r5, r7
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <__udivmoddi4+0x5a>
 8000684:	e07b      	b.n	800077e <__udivmoddi4+0x152>
 8000686:	2200      	movs	r2, #0
 8000688:	2300      	movs	r3, #0
 800068a:	9200      	str	r2, [sp, #0]
 800068c:	9301      	str	r3, [sp, #4]
 800068e:	2301      	movs	r3, #1
 8000690:	4652      	mov	r2, sl
 8000692:	4093      	lsls	r3, r2
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	2301      	movs	r3, #1
 8000698:	4662      	mov	r2, ip
 800069a:	4093      	lsls	r3, r2
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	e018      	b.n	80006d2 <__udivmoddi4+0xa6>
 80006a0:	4282      	cmp	r2, r0
 80006a2:	d9d0      	bls.n	8000646 <__udivmoddi4+0x1a>
 80006a4:	2200      	movs	r2, #0
 80006a6:	2300      	movs	r3, #0
 80006a8:	9200      	str	r2, [sp, #0]
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <__udivmoddi4+0x8a>
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	9800      	ldr	r0, [sp, #0]
 80006b8:	9901      	ldr	r1, [sp, #4]
 80006ba:	b002      	add	sp, #8
 80006bc:	bc1c      	pop	{r2, r3, r4}
 80006be:	4690      	mov	r8, r2
 80006c0:	4699      	mov	r9, r3
 80006c2:	46a2      	mov	sl, r4
 80006c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c6:	42a3      	cmp	r3, r4
 80006c8:	d9d7      	bls.n	800067a <__udivmoddi4+0x4e>
 80006ca:	2200      	movs	r2, #0
 80006cc:	2300      	movs	r3, #0
 80006ce:	9200      	str	r2, [sp, #0]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	4663      	mov	r3, ip
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0e9      	beq.n	80006ac <__udivmoddi4+0x80>
 80006d8:	07fb      	lsls	r3, r7, #31
 80006da:	4698      	mov	r8, r3
 80006dc:	4641      	mov	r1, r8
 80006de:	0872      	lsrs	r2, r6, #1
 80006e0:	430a      	orrs	r2, r1
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	4666      	mov	r6, ip
 80006e6:	e00e      	b.n	8000706 <__udivmoddi4+0xda>
 80006e8:	42ab      	cmp	r3, r5
 80006ea:	d101      	bne.n	80006f0 <__udivmoddi4+0xc4>
 80006ec:	42a2      	cmp	r2, r4
 80006ee:	d80c      	bhi.n	800070a <__udivmoddi4+0xde>
 80006f0:	1aa4      	subs	r4, r4, r2
 80006f2:	419d      	sbcs	r5, r3
 80006f4:	2001      	movs	r0, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2100      	movs	r1, #0
 80006fc:	3e01      	subs	r6, #1
 80006fe:	1824      	adds	r4, r4, r0
 8000700:	414d      	adcs	r5, r1
 8000702:	2e00      	cmp	r6, #0
 8000704:	d006      	beq.n	8000714 <__udivmoddi4+0xe8>
 8000706:	42ab      	cmp	r3, r5
 8000708:	d9ee      	bls.n	80006e8 <__udivmoddi4+0xbc>
 800070a:	3e01      	subs	r6, #1
 800070c:	1924      	adds	r4, r4, r4
 800070e:	416d      	adcs	r5, r5
 8000710:	2e00      	cmp	r6, #0
 8000712:	d1f8      	bne.n	8000706 <__udivmoddi4+0xda>
 8000714:	9800      	ldr	r0, [sp, #0]
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	4653      	mov	r3, sl
 800071a:	1900      	adds	r0, r0, r4
 800071c:	4169      	adcs	r1, r5
 800071e:	2b00      	cmp	r3, #0
 8000720:	db23      	blt.n	800076a <__udivmoddi4+0x13e>
 8000722:	002b      	movs	r3, r5
 8000724:	4652      	mov	r2, sl
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	4664      	mov	r4, ip
 800072c:	40e2      	lsrs	r2, r4
 800072e:	001c      	movs	r4, r3
 8000730:	4653      	mov	r3, sl
 8000732:	0015      	movs	r5, r2
 8000734:	2b00      	cmp	r3, #0
 8000736:	db2d      	blt.n	8000794 <__udivmoddi4+0x168>
 8000738:	0026      	movs	r6, r4
 800073a:	4657      	mov	r7, sl
 800073c:	40be      	lsls	r6, r7
 800073e:	0033      	movs	r3, r6
 8000740:	0026      	movs	r6, r4
 8000742:	4667      	mov	r7, ip
 8000744:	40be      	lsls	r6, r7
 8000746:	0032      	movs	r2, r6
 8000748:	1a80      	subs	r0, r0, r2
 800074a:	4199      	sbcs	r1, r3
 800074c:	9000      	str	r0, [sp, #0]
 800074e:	9101      	str	r1, [sp, #4]
 8000750:	e7ac      	b.n	80006ac <__udivmoddi4+0x80>
 8000752:	4662      	mov	r2, ip
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	464a      	mov	r2, r9
 800075a:	40da      	lsrs	r2, r3
 800075c:	4661      	mov	r1, ip
 800075e:	0013      	movs	r3, r2
 8000760:	4642      	mov	r2, r8
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	431f      	orrs	r7, r3
 8000768:	e780      	b.n	800066c <__udivmoddi4+0x40>
 800076a:	4662      	mov	r2, ip
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4666      	mov	r6, ip
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4313      	orrs	r3, r2
 800077c:	e7d4      	b.n	8000728 <__udivmoddi4+0xfc>
 800077e:	4662      	mov	r2, ip
 8000780:	2320      	movs	r3, #32
 8000782:	2100      	movs	r1, #0
 8000784:	1a9b      	subs	r3, r3, r2
 8000786:	2200      	movs	r2, #0
 8000788:	9100      	str	r1, [sp, #0]
 800078a:	9201      	str	r2, [sp, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	40da      	lsrs	r2, r3
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	e780      	b.n	8000696 <__udivmoddi4+0x6a>
 8000794:	2320      	movs	r3, #32
 8000796:	4662      	mov	r2, ip
 8000798:	0026      	movs	r6, r4
 800079a:	1a9b      	subs	r3, r3, r2
 800079c:	40de      	lsrs	r6, r3
 800079e:	002f      	movs	r7, r5
 80007a0:	46b0      	mov	r8, r6
 80007a2:	4666      	mov	r6, ip
 80007a4:	40b7      	lsls	r7, r6
 80007a6:	4646      	mov	r6, r8
 80007a8:	003b      	movs	r3, r7
 80007aa:	4333      	orrs	r3, r6
 80007ac:	e7c8      	b.n	8000740 <__udivmoddi4+0x114>
 80007ae:	46c0      	nop			; (mov r8, r8)

080007b0 <__eqsf2>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	0042      	lsls	r2, r0, #1
 80007b4:	024e      	lsls	r6, r1, #9
 80007b6:	004c      	lsls	r4, r1, #1
 80007b8:	0245      	lsls	r5, r0, #9
 80007ba:	0a6d      	lsrs	r5, r5, #9
 80007bc:	0e12      	lsrs	r2, r2, #24
 80007be:	0fc3      	lsrs	r3, r0, #31
 80007c0:	0a76      	lsrs	r6, r6, #9
 80007c2:	0e24      	lsrs	r4, r4, #24
 80007c4:	0fc9      	lsrs	r1, r1, #31
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d00f      	beq.n	80007ea <__eqsf2+0x3a>
 80007ca:	2cff      	cmp	r4, #255	; 0xff
 80007cc:	d011      	beq.n	80007f2 <__eqsf2+0x42>
 80007ce:	2001      	movs	r0, #1
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d000      	beq.n	80007d6 <__eqsf2+0x26>
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	42b5      	cmp	r5, r6
 80007d8:	d1fc      	bne.n	80007d4 <__eqsf2+0x24>
 80007da:	428b      	cmp	r3, r1
 80007dc:	d00d      	beq.n	80007fa <__eqsf2+0x4a>
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d1f8      	bne.n	80007d4 <__eqsf2+0x24>
 80007e2:	0028      	movs	r0, r5
 80007e4:	1e45      	subs	r5, r0, #1
 80007e6:	41a8      	sbcs	r0, r5
 80007e8:	e7f4      	b.n	80007d4 <__eqsf2+0x24>
 80007ea:	2001      	movs	r0, #1
 80007ec:	2d00      	cmp	r5, #0
 80007ee:	d1f1      	bne.n	80007d4 <__eqsf2+0x24>
 80007f0:	e7eb      	b.n	80007ca <__eqsf2+0x1a>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2e00      	cmp	r6, #0
 80007f6:	d1ed      	bne.n	80007d4 <__eqsf2+0x24>
 80007f8:	e7e9      	b.n	80007ce <__eqsf2+0x1e>
 80007fa:	2000      	movs	r0, #0
 80007fc:	e7ea      	b.n	80007d4 <__eqsf2+0x24>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <__gesf2>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	004a      	lsls	r2, r1, #1
 8000804:	024e      	lsls	r6, r1, #9
 8000806:	0245      	lsls	r5, r0, #9
 8000808:	0044      	lsls	r4, r0, #1
 800080a:	0a6d      	lsrs	r5, r5, #9
 800080c:	0e24      	lsrs	r4, r4, #24
 800080e:	0fc3      	lsrs	r3, r0, #31
 8000810:	0a76      	lsrs	r6, r6, #9
 8000812:	0e12      	lsrs	r2, r2, #24
 8000814:	0fc9      	lsrs	r1, r1, #31
 8000816:	2cff      	cmp	r4, #255	; 0xff
 8000818:	d015      	beq.n	8000846 <__gesf2+0x46>
 800081a:	2aff      	cmp	r2, #255	; 0xff
 800081c:	d00e      	beq.n	800083c <__gesf2+0x3c>
 800081e:	2c00      	cmp	r4, #0
 8000820:	d115      	bne.n	800084e <__gesf2+0x4e>
 8000822:	2a00      	cmp	r2, #0
 8000824:	d101      	bne.n	800082a <__gesf2+0x2a>
 8000826:	2e00      	cmp	r6, #0
 8000828:	d01c      	beq.n	8000864 <__gesf2+0x64>
 800082a:	2d00      	cmp	r5, #0
 800082c:	d014      	beq.n	8000858 <__gesf2+0x58>
 800082e:	428b      	cmp	r3, r1
 8000830:	d027      	beq.n	8000882 <__gesf2+0x82>
 8000832:	2002      	movs	r0, #2
 8000834:	3b01      	subs	r3, #1
 8000836:	4018      	ands	r0, r3
 8000838:	3801      	subs	r0, #1
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	2e00      	cmp	r6, #0
 800083e:	d0ee      	beq.n	800081e <__gesf2+0x1e>
 8000840:	2002      	movs	r0, #2
 8000842:	4240      	negs	r0, r0
 8000844:	e7f9      	b.n	800083a <__gesf2+0x3a>
 8000846:	2d00      	cmp	r5, #0
 8000848:	d1fa      	bne.n	8000840 <__gesf2+0x40>
 800084a:	2aff      	cmp	r2, #255	; 0xff
 800084c:	d00e      	beq.n	800086c <__gesf2+0x6c>
 800084e:	2a00      	cmp	r2, #0
 8000850:	d10e      	bne.n	8000870 <__gesf2+0x70>
 8000852:	2e00      	cmp	r6, #0
 8000854:	d0ed      	beq.n	8000832 <__gesf2+0x32>
 8000856:	e00b      	b.n	8000870 <__gesf2+0x70>
 8000858:	2301      	movs	r3, #1
 800085a:	3901      	subs	r1, #1
 800085c:	4399      	bics	r1, r3
 800085e:	0008      	movs	r0, r1
 8000860:	3001      	adds	r0, #1
 8000862:	e7ea      	b.n	800083a <__gesf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	2d00      	cmp	r5, #0
 8000868:	d0e7      	beq.n	800083a <__gesf2+0x3a>
 800086a:	e7e2      	b.n	8000832 <__gesf2+0x32>
 800086c:	2e00      	cmp	r6, #0
 800086e:	d1e7      	bne.n	8000840 <__gesf2+0x40>
 8000870:	428b      	cmp	r3, r1
 8000872:	d1de      	bne.n	8000832 <__gesf2+0x32>
 8000874:	4294      	cmp	r4, r2
 8000876:	dd05      	ble.n	8000884 <__gesf2+0x84>
 8000878:	2102      	movs	r1, #2
 800087a:	1e58      	subs	r0, r3, #1
 800087c:	4008      	ands	r0, r1
 800087e:	3801      	subs	r0, #1
 8000880:	e7db      	b.n	800083a <__gesf2+0x3a>
 8000882:	2400      	movs	r4, #0
 8000884:	42a2      	cmp	r2, r4
 8000886:	dc04      	bgt.n	8000892 <__gesf2+0x92>
 8000888:	42b5      	cmp	r5, r6
 800088a:	d8d2      	bhi.n	8000832 <__gesf2+0x32>
 800088c:	2000      	movs	r0, #0
 800088e:	42b5      	cmp	r5, r6
 8000890:	d2d3      	bcs.n	800083a <__gesf2+0x3a>
 8000892:	1e58      	subs	r0, r3, #1
 8000894:	2301      	movs	r3, #1
 8000896:	4398      	bics	r0, r3
 8000898:	3001      	adds	r0, #1
 800089a:	e7ce      	b.n	800083a <__gesf2+0x3a>

0800089c <__lesf2>:
 800089c:	b530      	push	{r4, r5, lr}
 800089e:	0042      	lsls	r2, r0, #1
 80008a0:	0244      	lsls	r4, r0, #9
 80008a2:	024d      	lsls	r5, r1, #9
 80008a4:	0fc3      	lsrs	r3, r0, #31
 80008a6:	0048      	lsls	r0, r1, #1
 80008a8:	0a64      	lsrs	r4, r4, #9
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	0a6d      	lsrs	r5, r5, #9
 80008ae:	0e00      	lsrs	r0, r0, #24
 80008b0:	0fc9      	lsrs	r1, r1, #31
 80008b2:	2aff      	cmp	r2, #255	; 0xff
 80008b4:	d012      	beq.n	80008dc <__lesf2+0x40>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d00c      	beq.n	80008d4 <__lesf2+0x38>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d112      	bne.n	80008e4 <__lesf2+0x48>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d119      	bne.n	80008f6 <__lesf2+0x5a>
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d117      	bne.n	80008f6 <__lesf2+0x5a>
 80008c6:	2c00      	cmp	r4, #0
 80008c8:	d02b      	beq.n	8000922 <__lesf2+0x86>
 80008ca:	2002      	movs	r0, #2
 80008cc:	3b01      	subs	r3, #1
 80008ce:	4018      	ands	r0, r3
 80008d0:	3801      	subs	r0, #1
 80008d2:	e026      	b.n	8000922 <__lesf2+0x86>
 80008d4:	2d00      	cmp	r5, #0
 80008d6:	d0f0      	beq.n	80008ba <__lesf2+0x1e>
 80008d8:	2002      	movs	r0, #2
 80008da:	e022      	b.n	8000922 <__lesf2+0x86>
 80008dc:	2c00      	cmp	r4, #0
 80008de:	d1fb      	bne.n	80008d8 <__lesf2+0x3c>
 80008e0:	28ff      	cmp	r0, #255	; 0xff
 80008e2:	d01f      	beq.n	8000924 <__lesf2+0x88>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d11f      	bne.n	8000928 <__lesf2+0x8c>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d11d      	bne.n	8000928 <__lesf2+0x8c>
 80008ec:	2002      	movs	r0, #2
 80008ee:	3b01      	subs	r3, #1
 80008f0:	4018      	ands	r0, r3
 80008f2:	3801      	subs	r0, #1
 80008f4:	e015      	b.n	8000922 <__lesf2+0x86>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d00e      	beq.n	8000918 <__lesf2+0x7c>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d1e5      	bne.n	80008ca <__lesf2+0x2e>
 80008fe:	2200      	movs	r2, #0
 8000900:	4290      	cmp	r0, r2
 8000902:	dc04      	bgt.n	800090e <__lesf2+0x72>
 8000904:	42ac      	cmp	r4, r5
 8000906:	d8e0      	bhi.n	80008ca <__lesf2+0x2e>
 8000908:	2000      	movs	r0, #0
 800090a:	42ac      	cmp	r4, r5
 800090c:	d209      	bcs.n	8000922 <__lesf2+0x86>
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	2301      	movs	r3, #1
 8000912:	4398      	bics	r0, r3
 8000914:	3001      	adds	r0, #1
 8000916:	e004      	b.n	8000922 <__lesf2+0x86>
 8000918:	2301      	movs	r3, #1
 800091a:	3901      	subs	r1, #1
 800091c:	4399      	bics	r1, r3
 800091e:	0008      	movs	r0, r1
 8000920:	3001      	adds	r0, #1
 8000922:	bd30      	pop	{r4, r5, pc}
 8000924:	2d00      	cmp	r5, #0
 8000926:	d1d7      	bne.n	80008d8 <__lesf2+0x3c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1ce      	bne.n	80008ca <__lesf2+0x2e>
 800092c:	4282      	cmp	r2, r0
 800092e:	dde7      	ble.n	8000900 <__lesf2+0x64>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7f3      	b.n	8000922 <__lesf2+0x86>
 800093a:	46c0      	nop			; (mov r8, r8)

0800093c <__aeabi_fmul>:
 800093c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093e:	464e      	mov	r6, r9
 8000940:	4657      	mov	r7, sl
 8000942:	4645      	mov	r5, r8
 8000944:	46de      	mov	lr, fp
 8000946:	b5e0      	push	{r5, r6, r7, lr}
 8000948:	0243      	lsls	r3, r0, #9
 800094a:	0a5b      	lsrs	r3, r3, #9
 800094c:	0045      	lsls	r5, r0, #1
 800094e:	b083      	sub	sp, #12
 8000950:	1c0f      	adds	r7, r1, #0
 8000952:	4699      	mov	r9, r3
 8000954:	0e2d      	lsrs	r5, r5, #24
 8000956:	0fc6      	lsrs	r6, r0, #31
 8000958:	2d00      	cmp	r5, #0
 800095a:	d057      	beq.n	8000a0c <__aeabi_fmul+0xd0>
 800095c:	2dff      	cmp	r5, #255	; 0xff
 800095e:	d024      	beq.n	80009aa <__aeabi_fmul+0x6e>
 8000960:	2080      	movs	r0, #128	; 0x80
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	04c0      	lsls	r0, r0, #19
 8000966:	4318      	orrs	r0, r3
 8000968:	2300      	movs	r3, #0
 800096a:	4681      	mov	r9, r0
 800096c:	469a      	mov	sl, r3
 800096e:	469b      	mov	fp, r3
 8000970:	3d7f      	subs	r5, #127	; 0x7f
 8000972:	027c      	lsls	r4, r7, #9
 8000974:	007a      	lsls	r2, r7, #1
 8000976:	0ffb      	lsrs	r3, r7, #31
 8000978:	0a64      	lsrs	r4, r4, #9
 800097a:	0e12      	lsrs	r2, r2, #24
 800097c:	4698      	mov	r8, r3
 800097e:	d023      	beq.n	80009c8 <__aeabi_fmul+0x8c>
 8000980:	2aff      	cmp	r2, #255	; 0xff
 8000982:	d04b      	beq.n	8000a1c <__aeabi_fmul+0xe0>
 8000984:	00e3      	lsls	r3, r4, #3
 8000986:	2480      	movs	r4, #128	; 0x80
 8000988:	2000      	movs	r0, #0
 800098a:	04e4      	lsls	r4, r4, #19
 800098c:	3a7f      	subs	r2, #127	; 0x7f
 800098e:	431c      	orrs	r4, r3
 8000990:	18ad      	adds	r5, r5, r2
 8000992:	1c6b      	adds	r3, r5, #1
 8000994:	4647      	mov	r7, r8
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4653      	mov	r3, sl
 800099a:	4077      	eors	r7, r6
 800099c:	003a      	movs	r2, r7
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d848      	bhi.n	8000a34 <__aeabi_fmul+0xf8>
 80009a2:	497d      	ldr	r1, [pc, #500]	; (8000b98 <__aeabi_fmul+0x25c>)
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	58cb      	ldr	r3, [r1, r3]
 80009a8:	469f      	mov	pc, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fmul+0x74>
 80009ae:	e085      	b.n	8000abc <__aeabi_fmul+0x180>
 80009b0:	3308      	adds	r3, #8
 80009b2:	469a      	mov	sl, r3
 80009b4:	3b06      	subs	r3, #6
 80009b6:	469b      	mov	fp, r3
 80009b8:	027c      	lsls	r4, r7, #9
 80009ba:	007a      	lsls	r2, r7, #1
 80009bc:	0ffb      	lsrs	r3, r7, #31
 80009be:	25ff      	movs	r5, #255	; 0xff
 80009c0:	0a64      	lsrs	r4, r4, #9
 80009c2:	0e12      	lsrs	r2, r2, #24
 80009c4:	4698      	mov	r8, r3
 80009c6:	d1db      	bne.n	8000980 <__aeabi_fmul+0x44>
 80009c8:	2c00      	cmp	r4, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_fmul+0x92>
 80009cc:	e090      	b.n	8000af0 <__aeabi_fmul+0x1b4>
 80009ce:	4652      	mov	r2, sl
 80009d0:	2301      	movs	r3, #1
 80009d2:	431a      	orrs	r2, r3
 80009d4:	4692      	mov	sl, r2
 80009d6:	2001      	movs	r0, #1
 80009d8:	e7db      	b.n	8000992 <__aeabi_fmul+0x56>
 80009da:	464c      	mov	r4, r9
 80009dc:	4658      	mov	r0, fp
 80009de:	0017      	movs	r7, r2
 80009e0:	2802      	cmp	r0, #2
 80009e2:	d024      	beq.n	8000a2e <__aeabi_fmul+0xf2>
 80009e4:	2803      	cmp	r0, #3
 80009e6:	d100      	bne.n	80009ea <__aeabi_fmul+0xae>
 80009e8:	e0cf      	b.n	8000b8a <__aeabi_fmul+0x24e>
 80009ea:	2200      	movs	r2, #0
 80009ec:	2300      	movs	r3, #0
 80009ee:	2801      	cmp	r0, #1
 80009f0:	d14d      	bne.n	8000a8e <__aeabi_fmul+0x152>
 80009f2:	0258      	lsls	r0, r3, #9
 80009f4:	05d2      	lsls	r2, r2, #23
 80009f6:	0a40      	lsrs	r0, r0, #9
 80009f8:	07ff      	lsls	r7, r7, #31
 80009fa:	4310      	orrs	r0, r2
 80009fc:	4338      	orrs	r0, r7
 80009fe:	b003      	add	sp, #12
 8000a00:	bc3c      	pop	{r2, r3, r4, r5}
 8000a02:	4690      	mov	r8, r2
 8000a04:	4699      	mov	r9, r3
 8000a06:	46a2      	mov	sl, r4
 8000a08:	46ab      	mov	fp, r5
 8000a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d15b      	bne.n	8000ac8 <__aeabi_fmul+0x18c>
 8000a10:	2304      	movs	r3, #4
 8000a12:	469a      	mov	sl, r3
 8000a14:	3b03      	subs	r3, #3
 8000a16:	2500      	movs	r5, #0
 8000a18:	469b      	mov	fp, r3
 8000a1a:	e7aa      	b.n	8000972 <__aeabi_fmul+0x36>
 8000a1c:	35ff      	adds	r5, #255	; 0xff
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d160      	bne.n	8000ae4 <__aeabi_fmul+0x1a8>
 8000a22:	4652      	mov	r2, sl
 8000a24:	2302      	movs	r3, #2
 8000a26:	431a      	orrs	r2, r3
 8000a28:	4692      	mov	sl, r2
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	e7b1      	b.n	8000992 <__aeabi_fmul+0x56>
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2300      	movs	r3, #0
 8000a32:	e7de      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0c1b      	lsrs	r3, r3, #16
 8000a38:	469c      	mov	ip, r3
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	0426      	lsls	r6, r4, #16
 8000a3e:	0c36      	lsrs	r6, r6, #16
 8000a40:	0418      	lsls	r0, r3, #16
 8000a42:	4661      	mov	r1, ip
 8000a44:	0033      	movs	r3, r6
 8000a46:	0c22      	lsrs	r2, r4, #16
 8000a48:	4664      	mov	r4, ip
 8000a4a:	0c00      	lsrs	r0, r0, #16
 8000a4c:	4343      	muls	r3, r0
 8000a4e:	434e      	muls	r6, r1
 8000a50:	4350      	muls	r0, r2
 8000a52:	4354      	muls	r4, r2
 8000a54:	1980      	adds	r0, r0, r6
 8000a56:	0c1a      	lsrs	r2, r3, #16
 8000a58:	1812      	adds	r2, r2, r0
 8000a5a:	4296      	cmp	r6, r2
 8000a5c:	d903      	bls.n	8000a66 <__aeabi_fmul+0x12a>
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0249      	lsls	r1, r1, #9
 8000a62:	468c      	mov	ip, r1
 8000a64:	4464      	add	r4, ip
 8000a66:	041b      	lsls	r3, r3, #16
 8000a68:	0c1b      	lsrs	r3, r3, #16
 8000a6a:	0410      	lsls	r0, r2, #16
 8000a6c:	18c0      	adds	r0, r0, r3
 8000a6e:	0183      	lsls	r3, r0, #6
 8000a70:	1e5e      	subs	r6, r3, #1
 8000a72:	41b3      	sbcs	r3, r6
 8000a74:	0e80      	lsrs	r0, r0, #26
 8000a76:	4318      	orrs	r0, r3
 8000a78:	0c13      	lsrs	r3, r2, #16
 8000a7a:	191b      	adds	r3, r3, r4
 8000a7c:	019b      	lsls	r3, r3, #6
 8000a7e:	4303      	orrs	r3, r0
 8000a80:	001c      	movs	r4, r3
 8000a82:	0123      	lsls	r3, r4, #4
 8000a84:	d579      	bpl.n	8000b7a <__aeabi_fmul+0x23e>
 8000a86:	2301      	movs	r3, #1
 8000a88:	0862      	lsrs	r2, r4, #1
 8000a8a:	401c      	ands	r4, r3
 8000a8c:	4314      	orrs	r4, r2
 8000a8e:	9a01      	ldr	r2, [sp, #4]
 8000a90:	327f      	adds	r2, #127	; 0x7f
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	dd4d      	ble.n	8000b32 <__aeabi_fmul+0x1f6>
 8000a96:	0763      	lsls	r3, r4, #29
 8000a98:	d004      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	4023      	ands	r3, r4
 8000a9e:	2b04      	cmp	r3, #4
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fmul+0x168>
 8000aa2:	3404      	adds	r4, #4
 8000aa4:	0123      	lsls	r3, r4, #4
 8000aa6:	d503      	bpl.n	8000ab0 <__aeabi_fmul+0x174>
 8000aa8:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <__aeabi_fmul+0x260>)
 8000aaa:	9a01      	ldr	r2, [sp, #4]
 8000aac:	401c      	ands	r4, r3
 8000aae:	3280      	adds	r2, #128	; 0x80
 8000ab0:	2afe      	cmp	r2, #254	; 0xfe
 8000ab2:	dcbc      	bgt.n	8000a2e <__aeabi_fmul+0xf2>
 8000ab4:	01a3      	lsls	r3, r4, #6
 8000ab6:	0a5b      	lsrs	r3, r3, #9
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	e79a      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000abc:	230c      	movs	r3, #12
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b09      	subs	r3, #9
 8000ac2:	25ff      	movs	r5, #255	; 0xff
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e754      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f002 f901 	bl	8002cd0 <__clzsi2>
 8000ace:	464a      	mov	r2, r9
 8000ad0:	1f43      	subs	r3, r0, #5
 8000ad2:	2576      	movs	r5, #118	; 0x76
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	426d      	negs	r5, r5
 8000ada:	4691      	mov	r9, r2
 8000adc:	1a2d      	subs	r5, r5, r0
 8000ade:	469a      	mov	sl, r3
 8000ae0:	469b      	mov	fp, r3
 8000ae2:	e746      	b.n	8000972 <__aeabi_fmul+0x36>
 8000ae4:	4652      	mov	r2, sl
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	4692      	mov	sl, r2
 8000aec:	2003      	movs	r0, #3
 8000aee:	e750      	b.n	8000992 <__aeabi_fmul+0x56>
 8000af0:	0020      	movs	r0, r4
 8000af2:	f002 f8ed 	bl	8002cd0 <__clzsi2>
 8000af6:	1f43      	subs	r3, r0, #5
 8000af8:	1a2d      	subs	r5, r5, r0
 8000afa:	409c      	lsls	r4, r3
 8000afc:	3d76      	subs	r5, #118	; 0x76
 8000afe:	2000      	movs	r0, #0
 8000b00:	e747      	b.n	8000992 <__aeabi_fmul+0x56>
 8000b02:	2380      	movs	r3, #128	; 0x80
 8000b04:	2700      	movs	r7, #0
 8000b06:	03db      	lsls	r3, r3, #15
 8000b08:	22ff      	movs	r2, #255	; 0xff
 8000b0a:	e772      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b0c:	4642      	mov	r2, r8
 8000b0e:	e766      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b10:	464c      	mov	r4, r9
 8000b12:	0032      	movs	r2, r6
 8000b14:	4658      	mov	r0, fp
 8000b16:	e762      	b.n	80009de <__aeabi_fmul+0xa2>
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	03db      	lsls	r3, r3, #15
 8000b1e:	421a      	tst	r2, r3
 8000b20:	d022      	beq.n	8000b68 <__aeabi_fmul+0x22c>
 8000b22:	421c      	tst	r4, r3
 8000b24:	d120      	bne.n	8000b68 <__aeabi_fmul+0x22c>
 8000b26:	4323      	orrs	r3, r4
 8000b28:	025b      	lsls	r3, r3, #9
 8000b2a:	0a5b      	lsrs	r3, r3, #9
 8000b2c:	4647      	mov	r7, r8
 8000b2e:	22ff      	movs	r2, #255	; 0xff
 8000b30:	e75f      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b32:	2301      	movs	r3, #1
 8000b34:	1a9a      	subs	r2, r3, r2
 8000b36:	2a1b      	cmp	r2, #27
 8000b38:	dc21      	bgt.n	8000b7e <__aeabi_fmul+0x242>
 8000b3a:	0023      	movs	r3, r4
 8000b3c:	9901      	ldr	r1, [sp, #4]
 8000b3e:	40d3      	lsrs	r3, r2
 8000b40:	319e      	adds	r1, #158	; 0x9e
 8000b42:	408c      	lsls	r4, r1
 8000b44:	001a      	movs	r2, r3
 8000b46:	0023      	movs	r3, r4
 8000b48:	1e5c      	subs	r4, r3, #1
 8000b4a:	41a3      	sbcs	r3, r4
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	075a      	lsls	r2, r3, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b52:	220f      	movs	r2, #15
 8000b54:	401a      	ands	r2, r3
 8000b56:	2a04      	cmp	r2, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x220>
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	015a      	lsls	r2, r3, #5
 8000b5e:	d411      	bmi.n	8000b84 <__aeabi_fmul+0x248>
 8000b60:	019b      	lsls	r3, r3, #6
 8000b62:	0a5b      	lsrs	r3, r3, #9
 8000b64:	2200      	movs	r2, #0
 8000b66:	e744      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	464a      	mov	r2, r9
 8000b6c:	03db      	lsls	r3, r3, #15
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	0037      	movs	r7, r6
 8000b76:	22ff      	movs	r2, #255	; 0xff
 8000b78:	e73b      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b7a:	9501      	str	r5, [sp, #4]
 8000b7c:	e787      	b.n	8000a8e <__aeabi_fmul+0x152>
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2300      	movs	r3, #0
 8000b82:	e736      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b84:	2201      	movs	r2, #1
 8000b86:	2300      	movs	r3, #0
 8000b88:	e733      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	4323      	orrs	r3, r4
 8000b90:	025b      	lsls	r3, r3, #9
 8000b92:	0a5b      	lsrs	r3, r3, #9
 8000b94:	22ff      	movs	r2, #255	; 0xff
 8000b96:	e72c      	b.n	80009f2 <__aeabi_fmul+0xb6>
 8000b98:	08019244 	.word	0x08019244
 8000b9c:	f7ffffff 	.word	0xf7ffffff

08000ba0 <__aeabi_fsub>:
 8000ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ba2:	4647      	mov	r7, r8
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	0044      	lsls	r4, r0, #1
 8000ba8:	0fc2      	lsrs	r2, r0, #31
 8000baa:	b580      	push	{r7, lr}
 8000bac:	0247      	lsls	r7, r0, #9
 8000bae:	0248      	lsls	r0, r1, #9
 8000bb0:	0a40      	lsrs	r0, r0, #9
 8000bb2:	4684      	mov	ip, r0
 8000bb4:	4666      	mov	r6, ip
 8000bb6:	0048      	lsls	r0, r1, #1
 8000bb8:	0a7f      	lsrs	r7, r7, #9
 8000bba:	0e24      	lsrs	r4, r4, #24
 8000bbc:	00f6      	lsls	r6, r6, #3
 8000bbe:	0025      	movs	r5, r4
 8000bc0:	4690      	mov	r8, r2
 8000bc2:	00fb      	lsls	r3, r7, #3
 8000bc4:	0e00      	lsrs	r0, r0, #24
 8000bc6:	0fc9      	lsrs	r1, r1, #31
 8000bc8:	46b1      	mov	r9, r6
 8000bca:	28ff      	cmp	r0, #255	; 0xff
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_fsub+0x30>
 8000bce:	e085      	b.n	8000cdc <__aeabi_fsub+0x13c>
 8000bd0:	2601      	movs	r6, #1
 8000bd2:	4071      	eors	r1, r6
 8000bd4:	1a26      	subs	r6, r4, r0
 8000bd6:	4291      	cmp	r1, r2
 8000bd8:	d057      	beq.n	8000c8a <__aeabi_fsub+0xea>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	dd43      	ble.n	8000c66 <__aeabi_fsub+0xc6>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <__aeabi_fsub+0x44>
 8000be2:	e07f      	b.n	8000ce4 <__aeabi_fsub+0x144>
 8000be4:	4649      	mov	r1, r9
 8000be6:	2900      	cmp	r1, #0
 8000be8:	d100      	bne.n	8000bec <__aeabi_fsub+0x4c>
 8000bea:	e0aa      	b.n	8000d42 <__aeabi_fsub+0x1a2>
 8000bec:	3e01      	subs	r6, #1
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	d000      	beq.n	8000bf4 <__aeabi_fsub+0x54>
 8000bf2:	e0f7      	b.n	8000de4 <__aeabi_fsub+0x244>
 8000bf4:	1a5b      	subs	r3, r3, r1
 8000bf6:	015a      	lsls	r2, r3, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x5c>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	099c      	lsrs	r4, r3, #6
 8000c00:	0020      	movs	r0, r4
 8000c02:	f002 f865 	bl	8002cd0 <__clzsi2>
 8000c06:	3805      	subs	r0, #5
 8000c08:	4084      	lsls	r4, r0
 8000c0a:	4285      	cmp	r5, r0
 8000c0c:	dd00      	ble.n	8000c10 <__aeabi_fsub+0x70>
 8000c0e:	e0d3      	b.n	8000db8 <__aeabi_fsub+0x218>
 8000c10:	1b45      	subs	r5, r0, r5
 8000c12:	0023      	movs	r3, r4
 8000c14:	2020      	movs	r0, #32
 8000c16:	3501      	adds	r5, #1
 8000c18:	40eb      	lsrs	r3, r5
 8000c1a:	1b45      	subs	r5, r0, r5
 8000c1c:	40ac      	lsls	r4, r5
 8000c1e:	1e62      	subs	r2, r4, #1
 8000c20:	4194      	sbcs	r4, r2
 8000c22:	4323      	orrs	r3, r4
 8000c24:	2407      	movs	r4, #7
 8000c26:	2500      	movs	r5, #0
 8000c28:	401c      	ands	r4, r3
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	4641      	mov	r1, r8
 8000c2e:	400a      	ands	r2, r1
 8000c30:	2c00      	cmp	r4, #0
 8000c32:	d004      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4019      	ands	r1, r3
 8000c38:	2904      	cmp	r1, #4
 8000c3a:	d000      	beq.n	8000c3e <__aeabi_fsub+0x9e>
 8000c3c:	3304      	adds	r3, #4
 8000c3e:	0159      	lsls	r1, r3, #5
 8000c40:	d400      	bmi.n	8000c44 <__aeabi_fsub+0xa4>
 8000c42:	e080      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000c44:	3501      	adds	r5, #1
 8000c46:	b2ec      	uxtb	r4, r5
 8000c48:	2dff      	cmp	r5, #255	; 0xff
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_fsub+0xae>
 8000c4c:	e0a3      	b.n	8000d96 <__aeabi_fsub+0x1f6>
 8000c4e:	24ff      	movs	r4, #255	; 0xff
 8000c50:	2300      	movs	r3, #0
 8000c52:	025b      	lsls	r3, r3, #9
 8000c54:	05e4      	lsls	r4, r4, #23
 8000c56:	0a58      	lsrs	r0, r3, #9
 8000c58:	07d2      	lsls	r2, r2, #31
 8000c5a:	4320      	orrs	r0, r4
 8000c5c:	4310      	orrs	r0, r2
 8000c5e:	bc0c      	pop	{r2, r3}
 8000c60:	4690      	mov	r8, r2
 8000c62:	4699      	mov	r9, r3
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d174      	bne.n	8000d54 <__aeabi_fsub+0x1b4>
 8000c6a:	1c60      	adds	r0, r4, #1
 8000c6c:	b2c0      	uxtb	r0, r0
 8000c6e:	2801      	cmp	r0, #1
 8000c70:	dc00      	bgt.n	8000c74 <__aeabi_fsub+0xd4>
 8000c72:	e0a7      	b.n	8000dc4 <__aeabi_fsub+0x224>
 8000c74:	464a      	mov	r2, r9
 8000c76:	1a9c      	subs	r4, r3, r2
 8000c78:	0162      	lsls	r2, r4, #5
 8000c7a:	d500      	bpl.n	8000c7e <__aeabi_fsub+0xde>
 8000c7c:	e0b6      	b.n	8000dec <__aeabi_fsub+0x24c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1be      	bne.n	8000c00 <__aeabi_fsub+0x60>
 8000c82:	2200      	movs	r2, #0
 8000c84:	2400      	movs	r4, #0
 8000c86:	2300      	movs	r3, #0
 8000c88:	e7e3      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_fsub+0xf0>
 8000c8e:	e085      	b.n	8000d9c <__aeabi_fsub+0x1fc>
 8000c90:	2800      	cmp	r0, #0
 8000c92:	d046      	beq.n	8000d22 <__aeabi_fsub+0x182>
 8000c94:	2cff      	cmp	r4, #255	; 0xff
 8000c96:	d049      	beq.n	8000d2c <__aeabi_fsub+0x18c>
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	4648      	mov	r0, r9
 8000c9c:	04d2      	lsls	r2, r2, #19
 8000c9e:	4310      	orrs	r0, r2
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2e1b      	cmp	r6, #27
 8000ca6:	dc09      	bgt.n	8000cbc <__aeabi_fsub+0x11c>
 8000ca8:	2020      	movs	r0, #32
 8000caa:	464c      	mov	r4, r9
 8000cac:	1b80      	subs	r0, r0, r6
 8000cae:	4084      	lsls	r4, r0
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	0020      	movs	r0, r4
 8000cb4:	40f2      	lsrs	r2, r6
 8000cb6:	1e44      	subs	r4, r0, #1
 8000cb8:	41a0      	sbcs	r0, r4
 8000cba:	4302      	orrs	r2, r0
 8000cbc:	189b      	adds	r3, r3, r2
 8000cbe:	015a      	lsls	r2, r3, #5
 8000cc0:	d528      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000cc2:	3501      	adds	r5, #1
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fsub+0x12a>
 8000cc8:	e0a8      	b.n	8000e1c <__aeabi_fsub+0x27c>
 8000cca:	2201      	movs	r2, #1
 8000ccc:	2407      	movs	r4, #7
 8000cce:	4994      	ldr	r1, [pc, #592]	; (8000f20 <__aeabi_fsub+0x380>)
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	400b      	ands	r3, r1
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	401c      	ands	r4, r3
 8000cda:	e7a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000cdc:	2e00      	cmp	r6, #0
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_fsub+0x142>
 8000ce0:	e778      	b.n	8000bd4 <__aeabi_fsub+0x34>
 8000ce2:	e775      	b.n	8000bd0 <__aeabi_fsub+0x30>
 8000ce4:	2cff      	cmp	r4, #255	; 0xff
 8000ce6:	d054      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000ce8:	2280      	movs	r2, #128	; 0x80
 8000cea:	4649      	mov	r1, r9
 8000cec:	04d2      	lsls	r2, r2, #19
 8000cee:	4311      	orrs	r1, r2
 8000cf0:	4689      	mov	r9, r1
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2e1b      	cmp	r6, #27
 8000cf6:	dc09      	bgt.n	8000d0c <__aeabi_fsub+0x16c>
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4648      	mov	r0, r9
 8000cfc:	1b89      	subs	r1, r1, r6
 8000cfe:	4088      	lsls	r0, r1
 8000d00:	464a      	mov	r2, r9
 8000d02:	0001      	movs	r1, r0
 8000d04:	40f2      	lsrs	r2, r6
 8000d06:	1e48      	subs	r0, r1, #1
 8000d08:	4181      	sbcs	r1, r0
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	1a9b      	subs	r3, r3, r2
 8000d0e:	015a      	lsls	r2, r3, #5
 8000d10:	d500      	bpl.n	8000d14 <__aeabi_fsub+0x174>
 8000d12:	e773      	b.n	8000bfc <__aeabi_fsub+0x5c>
 8000d14:	2201      	movs	r2, #1
 8000d16:	4641      	mov	r1, r8
 8000d18:	400a      	ands	r2, r1
 8000d1a:	0759      	lsls	r1, r3, #29
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fsub+0x180>
 8000d1e:	e789      	b.n	8000c34 <__aeabi_fsub+0x94>
 8000d20:	e011      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d22:	4648      	mov	r0, r9
 8000d24:	2800      	cmp	r0, #0
 8000d26:	d158      	bne.n	8000dda <__aeabi_fsub+0x23a>
 8000d28:	2cff      	cmp	r4, #255	; 0xff
 8000d2a:	d10c      	bne.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d2c:	08db      	lsrs	r3, r3, #3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x194>
 8000d32:	e78c      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000d34:	2080      	movs	r0, #128	; 0x80
 8000d36:	03c0      	lsls	r0, r0, #15
 8000d38:	4303      	orrs	r3, r0
 8000d3a:	025b      	lsls	r3, r3, #9
 8000d3c:	0a5b      	lsrs	r3, r3, #9
 8000d3e:	24ff      	movs	r4, #255	; 0xff
 8000d40:	e787      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d42:	2cff      	cmp	r4, #255	; 0xff
 8000d44:	d025      	beq.n	8000d92 <__aeabi_fsub+0x1f2>
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	2dff      	cmp	r5, #255	; 0xff
 8000d4a:	d0f0      	beq.n	8000d2e <__aeabi_fsub+0x18e>
 8000d4c:	025b      	lsls	r3, r3, #9
 8000d4e:	0a5b      	lsrs	r3, r3, #9
 8000d50:	b2ec      	uxtb	r4, r5
 8000d52:	e77e      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d54:	2c00      	cmp	r4, #0
 8000d56:	d04d      	beq.n	8000df4 <__aeabi_fsub+0x254>
 8000d58:	28ff      	cmp	r0, #255	; 0xff
 8000d5a:	d018      	beq.n	8000d8e <__aeabi_fsub+0x1ee>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	04e4      	lsls	r4, r4, #19
 8000d60:	4272      	negs	r2, r6
 8000d62:	4323      	orrs	r3, r4
 8000d64:	2a1b      	cmp	r2, #27
 8000d66:	dd00      	ble.n	8000d6a <__aeabi_fsub+0x1ca>
 8000d68:	e0c4      	b.n	8000ef4 <__aeabi_fsub+0x354>
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	2520      	movs	r5, #32
 8000d6e:	40d4      	lsrs	r4, r2
 8000d70:	1aaa      	subs	r2, r5, r2
 8000d72:	4093      	lsls	r3, r2
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	4193      	sbcs	r3, r2
 8000d78:	4323      	orrs	r3, r4
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	0005      	movs	r5, r0
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	4688      	mov	r8, r1
 8000d82:	e738      	b.n	8000bf6 <__aeabi_fsub+0x56>
 8000d84:	1c72      	adds	r2, r6, #1
 8000d86:	d0f8      	beq.n	8000d7a <__aeabi_fsub+0x1da>
 8000d88:	43f2      	mvns	r2, r6
 8000d8a:	28ff      	cmp	r0, #255	; 0xff
 8000d8c:	d1ea      	bne.n	8000d64 <__aeabi_fsub+0x1c4>
 8000d8e:	000a      	movs	r2, r1
 8000d90:	464b      	mov	r3, r9
 8000d92:	25ff      	movs	r5, #255	; 0xff
 8000d94:	e7d7      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000d96:	019b      	lsls	r3, r3, #6
 8000d98:	0a5b      	lsrs	r3, r3, #9
 8000d9a:	e75a      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000d9c:	2e00      	cmp	r6, #0
 8000d9e:	d141      	bne.n	8000e24 <__aeabi_fsub+0x284>
 8000da0:	1c65      	adds	r5, r4, #1
 8000da2:	b2e9      	uxtb	r1, r5
 8000da4:	2901      	cmp	r1, #1
 8000da6:	dd45      	ble.n	8000e34 <__aeabi_fsub+0x294>
 8000da8:	2dff      	cmp	r5, #255	; 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x20e>
 8000dac:	e74f      	b.n	8000c4e <__aeabi_fsub+0xae>
 8000dae:	2407      	movs	r4, #7
 8000db0:	444b      	add	r3, r9
 8000db2:	085b      	lsrs	r3, r3, #1
 8000db4:	401c      	ands	r4, r3
 8000db6:	e738      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000db8:	2207      	movs	r2, #7
 8000dba:	4b5a      	ldr	r3, [pc, #360]	; (8000f24 <__aeabi_fsub+0x384>)
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	4023      	ands	r3, r4
 8000dc0:	4014      	ands	r4, r2
 8000dc2:	e732      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000dc4:	2c00      	cmp	r4, #0
 8000dc6:	d11d      	bne.n	8000e04 <__aeabi_fsub+0x264>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d17a      	bne.n	8000ec2 <__aeabi_fsub+0x322>
 8000dcc:	464b      	mov	r3, r9
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x234>
 8000dd2:	e091      	b.n	8000ef8 <__aeabi_fsub+0x358>
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	2500      	movs	r5, #0
 8000dd8:	e7b5      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dda:	3e01      	subs	r6, #1
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d119      	bne.n	8000e14 <__aeabi_fsub+0x274>
 8000de0:	444b      	add	r3, r9
 8000de2:	e76c      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000de4:	2cff      	cmp	r4, #255	; 0xff
 8000de6:	d184      	bne.n	8000cf2 <__aeabi_fsub+0x152>
 8000de8:	25ff      	movs	r5, #255	; 0xff
 8000dea:	e7ac      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000dec:	464a      	mov	r2, r9
 8000dee:	4688      	mov	r8, r1
 8000df0:	1ad4      	subs	r4, r2, r3
 8000df2:	e705      	b.n	8000c00 <__aeabi_fsub+0x60>
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1c5      	bne.n	8000d84 <__aeabi_fsub+0x1e4>
 8000df8:	000a      	movs	r2, r1
 8000dfa:	28ff      	cmp	r0, #255	; 0xff
 8000dfc:	d0c8      	beq.n	8000d90 <__aeabi_fsub+0x1f0>
 8000dfe:	0005      	movs	r5, r0
 8000e00:	464b      	mov	r3, r9
 8000e02:	e7a0      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d149      	bne.n	8000e9c <__aeabi_fsub+0x2fc>
 8000e08:	464b      	mov	r3, r9
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d077      	beq.n	8000efe <__aeabi_fsub+0x35e>
 8000e0e:	000a      	movs	r2, r1
 8000e10:	25ff      	movs	r5, #255	; 0xff
 8000e12:	e798      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000e14:	2cff      	cmp	r4, #255	; 0xff
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x27a>
 8000e18:	e743      	b.n	8000ca2 <__aeabi_fsub+0x102>
 8000e1a:	e787      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	24ff      	movs	r4, #255	; 0xff
 8000e20:	2300      	movs	r3, #0
 8000e22:	e716      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000e24:	2c00      	cmp	r4, #0
 8000e26:	d115      	bne.n	8000e54 <__aeabi_fsub+0x2b4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d157      	bne.n	8000edc <__aeabi_fsub+0x33c>
 8000e2c:	28ff      	cmp	r0, #255	; 0xff
 8000e2e:	d1e6      	bne.n	8000dfe <__aeabi_fsub+0x25e>
 8000e30:	464b      	mov	r3, r9
 8000e32:	e77b      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e34:	2c00      	cmp	r4, #0
 8000e36:	d120      	bne.n	8000e7a <__aeabi_fsub+0x2da>
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d057      	beq.n	8000eec <__aeabi_fsub+0x34c>
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d053      	beq.n	8000eea <__aeabi_fsub+0x34a>
 8000e42:	444b      	add	r3, r9
 8000e44:	015a      	lsls	r2, r3, #5
 8000e46:	d568      	bpl.n	8000f1a <__aeabi_fsub+0x37a>
 8000e48:	2407      	movs	r4, #7
 8000e4a:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <__aeabi_fsub+0x384>)
 8000e4c:	401c      	ands	r4, r3
 8000e4e:	2501      	movs	r5, #1
 8000e50:	4013      	ands	r3, r2
 8000e52:	e6ea      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000e54:	28ff      	cmp	r0, #255	; 0xff
 8000e56:	d0eb      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	04d2      	lsls	r2, r2, #19
 8000e5c:	4276      	negs	r6, r6
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	2e1b      	cmp	r6, #27
 8000e62:	dc53      	bgt.n	8000f0c <__aeabi_fsub+0x36c>
 8000e64:	2520      	movs	r5, #32
 8000e66:	1bad      	subs	r5, r5, r6
 8000e68:	001a      	movs	r2, r3
 8000e6a:	40ab      	lsls	r3, r5
 8000e6c:	40f2      	lsrs	r2, r6
 8000e6e:	1e5c      	subs	r4, r3, #1
 8000e70:	41a3      	sbcs	r3, r4
 8000e72:	4313      	orrs	r3, r2
 8000e74:	444b      	add	r3, r9
 8000e76:	0005      	movs	r5, r0
 8000e78:	e721      	b.n	8000cbe <__aeabi_fsub+0x11e>
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0d8      	beq.n	8000e30 <__aeabi_fsub+0x290>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	2900      	cmp	r1, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x2e6>
 8000e84:	e752      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	03c9      	lsls	r1, r1, #15
 8000e8a:	420f      	tst	r7, r1
 8000e8c:	d100      	bne.n	8000e90 <__aeabi_fsub+0x2f0>
 8000e8e:	e74d      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e90:	4660      	mov	r0, ip
 8000e92:	4208      	tst	r0, r1
 8000e94:	d000      	beq.n	8000e98 <__aeabi_fsub+0x2f8>
 8000e96:	e749      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e98:	464b      	mov	r3, r9
 8000e9a:	e747      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000e9c:	4648      	mov	r0, r9
 8000e9e:	25ff      	movs	r5, #255	; 0xff
 8000ea0:	2800      	cmp	r0, #0
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x306>
 8000ea4:	e74f      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	03d2      	lsls	r2, r2, #15
 8000eaa:	4217      	tst	r7, r2
 8000eac:	d004      	beq.n	8000eb8 <__aeabi_fsub+0x318>
 8000eae:	4660      	mov	r0, ip
 8000eb0:	4210      	tst	r0, r2
 8000eb2:	d101      	bne.n	8000eb8 <__aeabi_fsub+0x318>
 8000eb4:	464b      	mov	r3, r9
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	2201      	movs	r2, #1
 8000eba:	4641      	mov	r1, r8
 8000ebc:	25ff      	movs	r5, #255	; 0xff
 8000ebe:	400a      	ands	r2, r1
 8000ec0:	e741      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000ec2:	4648      	mov	r0, r9
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d01f      	beq.n	8000f08 <__aeabi_fsub+0x368>
 8000ec8:	1a1a      	subs	r2, r3, r0
 8000eca:	0150      	lsls	r0, r2, #5
 8000ecc:	d520      	bpl.n	8000f10 <__aeabi_fsub+0x370>
 8000ece:	464a      	mov	r2, r9
 8000ed0:	2407      	movs	r4, #7
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	401c      	ands	r4, r3
 8000ed6:	4688      	mov	r8, r1
 8000ed8:	2500      	movs	r5, #0
 8000eda:	e6a6      	b.n	8000c2a <__aeabi_fsub+0x8a>
 8000edc:	1c74      	adds	r4, r6, #1
 8000ede:	d0c9      	beq.n	8000e74 <__aeabi_fsub+0x2d4>
 8000ee0:	43f6      	mvns	r6, r6
 8000ee2:	28ff      	cmp	r0, #255	; 0xff
 8000ee4:	d1bc      	bne.n	8000e60 <__aeabi_fsub+0x2c0>
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	e720      	b.n	8000d2c <__aeabi_fsub+0x18c>
 8000eea:	4699      	mov	r9, r3
 8000eec:	464b      	mov	r3, r9
 8000eee:	2500      	movs	r5, #0
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	e72b      	b.n	8000d4c <__aeabi_fsub+0x1ac>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e740      	b.n	8000d7a <__aeabi_fsub+0x1da>
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2300      	movs	r3, #0
 8000efc:	e6a9      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	2200      	movs	r2, #0
 8000f02:	03db      	lsls	r3, r3, #15
 8000f04:	24ff      	movs	r4, #255	; 0xff
 8000f06:	e6a4      	b.n	8000c52 <__aeabi_fsub+0xb2>
 8000f08:	2500      	movs	r5, #0
 8000f0a:	e71c      	b.n	8000d46 <__aeabi_fsub+0x1a6>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e7b1      	b.n	8000e74 <__aeabi_fsub+0x2d4>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d0f1      	beq.n	8000ef8 <__aeabi_fsub+0x358>
 8000f14:	0013      	movs	r3, r2
 8000f16:	2500      	movs	r5, #0
 8000f18:	e6fc      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	e6fa      	b.n	8000d14 <__aeabi_fsub+0x174>
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	7dffffff 	.word	0x7dffffff
 8000f24:	fbffffff 	.word	0xfbffffff

08000f28 <__aeabi_f2iz>:
 8000f28:	0241      	lsls	r1, r0, #9
 8000f2a:	0042      	lsls	r2, r0, #1
 8000f2c:	0fc3      	lsrs	r3, r0, #31
 8000f2e:	0a49      	lsrs	r1, r1, #9
 8000f30:	0e12      	lsrs	r2, r2, #24
 8000f32:	2000      	movs	r0, #0
 8000f34:	2a7e      	cmp	r2, #126	; 0x7e
 8000f36:	d90d      	bls.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f38:	2a9d      	cmp	r2, #157	; 0x9d
 8000f3a:	d80c      	bhi.n	8000f56 <__aeabi_f2iz+0x2e>
 8000f3c:	2080      	movs	r0, #128	; 0x80
 8000f3e:	0400      	lsls	r0, r0, #16
 8000f40:	4301      	orrs	r1, r0
 8000f42:	2a95      	cmp	r2, #149	; 0x95
 8000f44:	dc0a      	bgt.n	8000f5c <__aeabi_f2iz+0x34>
 8000f46:	2096      	movs	r0, #150	; 0x96
 8000f48:	1a82      	subs	r2, r0, r2
 8000f4a:	40d1      	lsrs	r1, r2
 8000f4c:	4248      	negs	r0, r1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d100      	bne.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f52:	0008      	movs	r0, r1
 8000f54:	4770      	bx	lr
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <__aeabi_f2iz+0x3c>)
 8000f58:	1898      	adds	r0, r3, r2
 8000f5a:	e7fb      	b.n	8000f54 <__aeabi_f2iz+0x2c>
 8000f5c:	3a96      	subs	r2, #150	; 0x96
 8000f5e:	4091      	lsls	r1, r2
 8000f60:	e7f4      	b.n	8000f4c <__aeabi_f2iz+0x24>
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	7fffffff 	.word	0x7fffffff

08000f68 <__aeabi_ui2f>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	1e04      	subs	r4, r0, #0
 8000f6c:	d034      	beq.n	8000fd8 <__aeabi_ui2f+0x70>
 8000f6e:	f001 feaf 	bl	8002cd0 <__clzsi2>
 8000f72:	229e      	movs	r2, #158	; 0x9e
 8000f74:	1a12      	subs	r2, r2, r0
 8000f76:	2a96      	cmp	r2, #150	; 0x96
 8000f78:	dc07      	bgt.n	8000f8a <__aeabi_ui2f+0x22>
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	2808      	cmp	r0, #8
 8000f7e:	dd2e      	ble.n	8000fde <__aeabi_ui2f+0x76>
 8000f80:	3808      	subs	r0, #8
 8000f82:	4084      	lsls	r4, r0
 8000f84:	0260      	lsls	r0, r4, #9
 8000f86:	0a40      	lsrs	r0, r0, #9
 8000f88:	e021      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000f8a:	2a99      	cmp	r2, #153	; 0x99
 8000f8c:	dd09      	ble.n	8000fa2 <__aeabi_ui2f+0x3a>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	0021      	movs	r1, r4
 8000f92:	331b      	adds	r3, #27
 8000f94:	4099      	lsls	r1, r3
 8000f96:	1e4b      	subs	r3, r1, #1
 8000f98:	4199      	sbcs	r1, r3
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	1a1b      	subs	r3, r3, r0
 8000f9e:	40dc      	lsrs	r4, r3
 8000fa0:	430c      	orrs	r4, r1
 8000fa2:	2805      	cmp	r0, #5
 8000fa4:	dd01      	ble.n	8000faa <__aeabi_ui2f+0x42>
 8000fa6:	1f43      	subs	r3, r0, #5
 8000fa8:	409c      	lsls	r4, r3
 8000faa:	0023      	movs	r3, r4
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <__aeabi_ui2f+0x7c>)
 8000fae:	400b      	ands	r3, r1
 8000fb0:	0765      	lsls	r5, r4, #29
 8000fb2:	d009      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fb4:	250f      	movs	r5, #15
 8000fb6:	402c      	ands	r4, r5
 8000fb8:	2c04      	cmp	r4, #4
 8000fba:	d005      	beq.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	015c      	lsls	r4, r3, #5
 8000fc0:	d502      	bpl.n	8000fc8 <__aeabi_ui2f+0x60>
 8000fc2:	229f      	movs	r2, #159	; 0x9f
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	1a12      	subs	r2, r2, r0
 8000fc8:	019b      	lsls	r3, r3, #6
 8000fca:	0a58      	lsrs	r0, r3, #9
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	0240      	lsls	r0, r0, #9
 8000fd0:	05d2      	lsls	r2, r2, #23
 8000fd2:	0a40      	lsrs	r0, r0, #9
 8000fd4:	4310      	orrs	r0, r2
 8000fd6:	bd70      	pop	{r4, r5, r6, pc}
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	e7f7      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fde:	0260      	lsls	r0, r4, #9
 8000fe0:	0a40      	lsrs	r0, r0, #9
 8000fe2:	e7f4      	b.n	8000fce <__aeabi_ui2f+0x66>
 8000fe4:	fbffffff 	.word	0xfbffffff

08000fe8 <__aeabi_dadd>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	464f      	mov	r7, r9
 8000fec:	4646      	mov	r6, r8
 8000fee:	46d6      	mov	lr, sl
 8000ff0:	000c      	movs	r4, r1
 8000ff2:	0309      	lsls	r1, r1, #12
 8000ff4:	b5c0      	push	{r6, r7, lr}
 8000ff6:	0a49      	lsrs	r1, r1, #9
 8000ff8:	0f47      	lsrs	r7, r0, #29
 8000ffa:	005e      	lsls	r6, r3, #1
 8000ffc:	4339      	orrs	r1, r7
 8000ffe:	031f      	lsls	r7, r3, #12
 8001000:	0fdb      	lsrs	r3, r3, #31
 8001002:	469c      	mov	ip, r3
 8001004:	0065      	lsls	r5, r4, #1
 8001006:	0a7b      	lsrs	r3, r7, #9
 8001008:	0f57      	lsrs	r7, r2, #29
 800100a:	431f      	orrs	r7, r3
 800100c:	0d6d      	lsrs	r5, r5, #21
 800100e:	0fe4      	lsrs	r4, r4, #31
 8001010:	0d76      	lsrs	r6, r6, #21
 8001012:	46a1      	mov	r9, r4
 8001014:	00c0      	lsls	r0, r0, #3
 8001016:	46b8      	mov	r8, r7
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	1bab      	subs	r3, r5, r6
 800101c:	4564      	cmp	r4, ip
 800101e:	d07b      	beq.n	8001118 <__aeabi_dadd+0x130>
 8001020:	2b00      	cmp	r3, #0
 8001022:	dd5f      	ble.n	80010e4 <__aeabi_dadd+0xfc>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_dadd+0x42>
 8001028:	e0a4      	b.n	8001174 <__aeabi_dadd+0x18c>
 800102a:	003e      	movs	r6, r7
 800102c:	4316      	orrs	r6, r2
 800102e:	d100      	bne.n	8001032 <__aeabi_dadd+0x4a>
 8001030:	e112      	b.n	8001258 <__aeabi_dadd+0x270>
 8001032:	1e5e      	subs	r6, r3, #1
 8001034:	2e00      	cmp	r6, #0
 8001036:	d000      	beq.n	800103a <__aeabi_dadd+0x52>
 8001038:	e19e      	b.n	8001378 <__aeabi_dadd+0x390>
 800103a:	1a87      	subs	r7, r0, r2
 800103c:	4643      	mov	r3, r8
 800103e:	42b8      	cmp	r0, r7
 8001040:	4180      	sbcs	r0, r0
 8001042:	2501      	movs	r5, #1
 8001044:	1ac9      	subs	r1, r1, r3
 8001046:	4240      	negs	r0, r0
 8001048:	1a09      	subs	r1, r1, r0
 800104a:	020b      	lsls	r3, r1, #8
 800104c:	d400      	bmi.n	8001050 <__aeabi_dadd+0x68>
 800104e:	e131      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	0a4e      	lsrs	r6, r1, #9
 8001054:	2e00      	cmp	r6, #0
 8001056:	d100      	bne.n	800105a <__aeabi_dadd+0x72>
 8001058:	e16e      	b.n	8001338 <__aeabi_dadd+0x350>
 800105a:	0030      	movs	r0, r6
 800105c:	f001 fe38 	bl	8002cd0 <__clzsi2>
 8001060:	0003      	movs	r3, r0
 8001062:	3b08      	subs	r3, #8
 8001064:	2b1f      	cmp	r3, #31
 8001066:	dd00      	ble.n	800106a <__aeabi_dadd+0x82>
 8001068:	e161      	b.n	800132e <__aeabi_dadd+0x346>
 800106a:	2220      	movs	r2, #32
 800106c:	0039      	movs	r1, r7
 800106e:	1ad2      	subs	r2, r2, r3
 8001070:	409e      	lsls	r6, r3
 8001072:	40d1      	lsrs	r1, r2
 8001074:	409f      	lsls	r7, r3
 8001076:	430e      	orrs	r6, r1
 8001078:	429d      	cmp	r5, r3
 800107a:	dd00      	ble.n	800107e <__aeabi_dadd+0x96>
 800107c:	e151      	b.n	8001322 <__aeabi_dadd+0x33a>
 800107e:	1b5d      	subs	r5, r3, r5
 8001080:	1c6b      	adds	r3, r5, #1
 8001082:	2b1f      	cmp	r3, #31
 8001084:	dd00      	ble.n	8001088 <__aeabi_dadd+0xa0>
 8001086:	e17c      	b.n	8001382 <__aeabi_dadd+0x39a>
 8001088:	2120      	movs	r1, #32
 800108a:	1ac9      	subs	r1, r1, r3
 800108c:	003d      	movs	r5, r7
 800108e:	0030      	movs	r0, r6
 8001090:	408f      	lsls	r7, r1
 8001092:	4088      	lsls	r0, r1
 8001094:	40dd      	lsrs	r5, r3
 8001096:	1e79      	subs	r1, r7, #1
 8001098:	418f      	sbcs	r7, r1
 800109a:	0031      	movs	r1, r6
 800109c:	2207      	movs	r2, #7
 800109e:	4328      	orrs	r0, r5
 80010a0:	40d9      	lsrs	r1, r3
 80010a2:	2500      	movs	r5, #0
 80010a4:	4307      	orrs	r7, r0
 80010a6:	403a      	ands	r2, r7
 80010a8:	2a00      	cmp	r2, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010ac:	230f      	movs	r3, #15
 80010ae:	403b      	ands	r3, r7
 80010b0:	2b04      	cmp	r3, #4
 80010b2:	d005      	beq.n	80010c0 <__aeabi_dadd+0xd8>
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	42bb      	cmp	r3, r7
 80010b8:	41bf      	sbcs	r7, r7
 80010ba:	427f      	negs	r7, r7
 80010bc:	19c9      	adds	r1, r1, r7
 80010be:	001f      	movs	r7, r3
 80010c0:	020b      	lsls	r3, r1, #8
 80010c2:	d400      	bmi.n	80010c6 <__aeabi_dadd+0xde>
 80010c4:	e226      	b.n	8001514 <__aeabi_dadd+0x52c>
 80010c6:	1c6a      	adds	r2, r5, #1
 80010c8:	4bc6      	ldr	r3, [pc, #792]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80010ca:	0555      	lsls	r5, r2, #21
 80010cc:	0d6d      	lsrs	r5, r5, #21
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d100      	bne.n	80010d4 <__aeabi_dadd+0xec>
 80010d2:	e106      	b.n	80012e2 <__aeabi_dadd+0x2fa>
 80010d4:	4ac4      	ldr	r2, [pc, #784]	; (80013e8 <__aeabi_dadd+0x400>)
 80010d6:	08ff      	lsrs	r7, r7, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	0753      	lsls	r3, r2, #29
 80010dc:	0252      	lsls	r2, r2, #9
 80010de:	433b      	orrs	r3, r7
 80010e0:	0b12      	lsrs	r2, r2, #12
 80010e2:	e08e      	b.n	8001202 <__aeabi_dadd+0x21a>
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <__aeabi_dadd+0x102>
 80010e8:	e0b8      	b.n	800125c <__aeabi_dadd+0x274>
 80010ea:	1c6b      	adds	r3, r5, #1
 80010ec:	055b      	lsls	r3, r3, #21
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	dc00      	bgt.n	80010f6 <__aeabi_dadd+0x10e>
 80010f4:	e130      	b.n	8001358 <__aeabi_dadd+0x370>
 80010f6:	1a87      	subs	r7, r0, r2
 80010f8:	4643      	mov	r3, r8
 80010fa:	42b8      	cmp	r0, r7
 80010fc:	41b6      	sbcs	r6, r6
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	4276      	negs	r6, r6
 8001102:	1b9e      	subs	r6, r3, r6
 8001104:	0233      	lsls	r3, r6, #8
 8001106:	d500      	bpl.n	800110a <__aeabi_dadd+0x122>
 8001108:	e14c      	b.n	80013a4 <__aeabi_dadd+0x3bc>
 800110a:	003b      	movs	r3, r7
 800110c:	4333      	orrs	r3, r6
 800110e:	d1a1      	bne.n	8001054 <__aeabi_dadd+0x6c>
 8001110:	2200      	movs	r2, #0
 8001112:	2400      	movs	r4, #0
 8001114:	2500      	movs	r5, #0
 8001116:	e070      	b.n	80011fa <__aeabi_dadd+0x212>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dc00      	bgt.n	800111e <__aeabi_dadd+0x136>
 800111c:	e0e5      	b.n	80012ea <__aeabi_dadd+0x302>
 800111e:	2e00      	cmp	r6, #0
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x13c>
 8001122:	e083      	b.n	800122c <__aeabi_dadd+0x244>
 8001124:	4eaf      	ldr	r6, [pc, #700]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001126:	42b5      	cmp	r5, r6
 8001128:	d060      	beq.n	80011ec <__aeabi_dadd+0x204>
 800112a:	2680      	movs	r6, #128	; 0x80
 800112c:	0436      	lsls	r6, r6, #16
 800112e:	4337      	orrs	r7, r6
 8001130:	46b8      	mov	r8, r7
 8001132:	2b38      	cmp	r3, #56	; 0x38
 8001134:	dc00      	bgt.n	8001138 <__aeabi_dadd+0x150>
 8001136:	e13e      	b.n	80013b6 <__aeabi_dadd+0x3ce>
 8001138:	4643      	mov	r3, r8
 800113a:	4313      	orrs	r3, r2
 800113c:	001f      	movs	r7, r3
 800113e:	1e7a      	subs	r2, r7, #1
 8001140:	4197      	sbcs	r7, r2
 8001142:	183f      	adds	r7, r7, r0
 8001144:	4287      	cmp	r7, r0
 8001146:	4180      	sbcs	r0, r0
 8001148:	4240      	negs	r0, r0
 800114a:	1809      	adds	r1, r1, r0
 800114c:	020b      	lsls	r3, r1, #8
 800114e:	d400      	bmi.n	8001152 <__aeabi_dadd+0x16a>
 8001150:	e0b0      	b.n	80012b4 <__aeabi_dadd+0x2cc>
 8001152:	4ba4      	ldr	r3, [pc, #656]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001154:	3501      	adds	r5, #1
 8001156:	429d      	cmp	r5, r3
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x174>
 800115a:	e0c3      	b.n	80012e4 <__aeabi_dadd+0x2fc>
 800115c:	4aa2      	ldr	r2, [pc, #648]	; (80013e8 <__aeabi_dadd+0x400>)
 800115e:	087b      	lsrs	r3, r7, #1
 8001160:	400a      	ands	r2, r1
 8001162:	2101      	movs	r1, #1
 8001164:	400f      	ands	r7, r1
 8001166:	431f      	orrs	r7, r3
 8001168:	0851      	lsrs	r1, r2, #1
 800116a:	07d3      	lsls	r3, r2, #31
 800116c:	2207      	movs	r2, #7
 800116e:	431f      	orrs	r7, r3
 8001170:	403a      	ands	r2, r7
 8001172:	e799      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001174:	4e9b      	ldr	r6, [pc, #620]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001176:	42b5      	cmp	r5, r6
 8001178:	d038      	beq.n	80011ec <__aeabi_dadd+0x204>
 800117a:	2680      	movs	r6, #128	; 0x80
 800117c:	0436      	lsls	r6, r6, #16
 800117e:	4337      	orrs	r7, r6
 8001180:	46b8      	mov	r8, r7
 8001182:	2b38      	cmp	r3, #56	; 0x38
 8001184:	dd00      	ble.n	8001188 <__aeabi_dadd+0x1a0>
 8001186:	e0dc      	b.n	8001342 <__aeabi_dadd+0x35a>
 8001188:	2b1f      	cmp	r3, #31
 800118a:	dc00      	bgt.n	800118e <__aeabi_dadd+0x1a6>
 800118c:	e130      	b.n	80013f0 <__aeabi_dadd+0x408>
 800118e:	001e      	movs	r6, r3
 8001190:	4647      	mov	r7, r8
 8001192:	3e20      	subs	r6, #32
 8001194:	40f7      	lsrs	r7, r6
 8001196:	46bc      	mov	ip, r7
 8001198:	2b20      	cmp	r3, #32
 800119a:	d004      	beq.n	80011a6 <__aeabi_dadd+0x1be>
 800119c:	2640      	movs	r6, #64	; 0x40
 800119e:	1af3      	subs	r3, r6, r3
 80011a0:	4646      	mov	r6, r8
 80011a2:	409e      	lsls	r6, r3
 80011a4:	4332      	orrs	r2, r6
 80011a6:	0017      	movs	r7, r2
 80011a8:	4663      	mov	r3, ip
 80011aa:	1e7a      	subs	r2, r7, #1
 80011ac:	4197      	sbcs	r7, r2
 80011ae:	431f      	orrs	r7, r3
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x364>
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_dadd+0x1d0>
 80011b6:	e204      	b.n	80015c2 <__aeabi_dadd+0x5da>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x1d8>
 80011be:	e159      	b.n	8001474 <__aeabi_dadd+0x48c>
 80011c0:	074b      	lsls	r3, r1, #29
 80011c2:	08c0      	lsrs	r0, r0, #3
 80011c4:	4318      	orrs	r0, r3
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	08c9      	lsrs	r1, r1, #3
 80011ca:	031b      	lsls	r3, r3, #12
 80011cc:	4219      	tst	r1, r3
 80011ce:	d008      	beq.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d0:	4645      	mov	r5, r8
 80011d2:	08ed      	lsrs	r5, r5, #3
 80011d4:	421d      	tst	r5, r3
 80011d6:	d104      	bne.n	80011e2 <__aeabi_dadd+0x1fa>
 80011d8:	4643      	mov	r3, r8
 80011da:	08d0      	lsrs	r0, r2, #3
 80011dc:	0759      	lsls	r1, r3, #29
 80011de:	4308      	orrs	r0, r1
 80011e0:	0029      	movs	r1, r5
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00c9      	lsls	r1, r1, #3
 80011e6:	4d7f      	ldr	r5, [pc, #508]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011e8:	4311      	orrs	r1, r2
 80011ea:	00c0      	lsls	r0, r0, #3
 80011ec:	074b      	lsls	r3, r1, #29
 80011ee:	08ca      	lsrs	r2, r1, #3
 80011f0:	497c      	ldr	r1, [pc, #496]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80011f2:	08c0      	lsrs	r0, r0, #3
 80011f4:	4303      	orrs	r3, r0
 80011f6:	428d      	cmp	r5, r1
 80011f8:	d068      	beq.n	80012cc <__aeabi_dadd+0x2e4>
 80011fa:	0312      	lsls	r2, r2, #12
 80011fc:	056d      	lsls	r5, r5, #21
 80011fe:	0b12      	lsrs	r2, r2, #12
 8001200:	0d6d      	lsrs	r5, r5, #21
 8001202:	2100      	movs	r1, #0
 8001204:	0312      	lsls	r2, r2, #12
 8001206:	0018      	movs	r0, r3
 8001208:	0b13      	lsrs	r3, r2, #12
 800120a:	0d0a      	lsrs	r2, r1, #20
 800120c:	0512      	lsls	r2, r2, #20
 800120e:	431a      	orrs	r2, r3
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <__aeabi_dadd+0x404>)
 8001212:	052d      	lsls	r5, r5, #20
 8001214:	4013      	ands	r3, r2
 8001216:	432b      	orrs	r3, r5
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	07e4      	lsls	r4, r4, #31
 800121c:	085b      	lsrs	r3, r3, #1
 800121e:	4323      	orrs	r3, r4
 8001220:	0019      	movs	r1, r3
 8001222:	bc1c      	pop	{r2, r3, r4}
 8001224:	4690      	mov	r8, r2
 8001226:	4699      	mov	r9, r3
 8001228:	46a2      	mov	sl, r4
 800122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122c:	003e      	movs	r6, r7
 800122e:	4316      	orrs	r6, r2
 8001230:	d012      	beq.n	8001258 <__aeabi_dadd+0x270>
 8001232:	1e5e      	subs	r6, r3, #1
 8001234:	2e00      	cmp	r6, #0
 8001236:	d000      	beq.n	800123a <__aeabi_dadd+0x252>
 8001238:	e100      	b.n	800143c <__aeabi_dadd+0x454>
 800123a:	1887      	adds	r7, r0, r2
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4441      	add	r1, r8
 8001242:	4240      	negs	r0, r0
 8001244:	1809      	adds	r1, r1, r0
 8001246:	2501      	movs	r5, #1
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d533      	bpl.n	80012b4 <__aeabi_dadd+0x2cc>
 800124c:	2502      	movs	r5, #2
 800124e:	e785      	b.n	800115c <__aeabi_dadd+0x174>
 8001250:	4664      	mov	r4, ip
 8001252:	0033      	movs	r3, r6
 8001254:	4641      	mov	r1, r8
 8001256:	0010      	movs	r0, r2
 8001258:	001d      	movs	r5, r3
 800125a:	e7c7      	b.n	80011ec <__aeabi_dadd+0x204>
 800125c:	2d00      	cmp	r5, #0
 800125e:	d000      	beq.n	8001262 <__aeabi_dadd+0x27a>
 8001260:	e0da      	b.n	8001418 <__aeabi_dadd+0x430>
 8001262:	000c      	movs	r4, r1
 8001264:	4304      	orrs	r4, r0
 8001266:	d0f3      	beq.n	8001250 <__aeabi_dadd+0x268>
 8001268:	1c5c      	adds	r4, r3, #1
 800126a:	d100      	bne.n	800126e <__aeabi_dadd+0x286>
 800126c:	e19f      	b.n	80015ae <__aeabi_dadd+0x5c6>
 800126e:	4c5d      	ldr	r4, [pc, #372]	; (80013e4 <__aeabi_dadd+0x3fc>)
 8001270:	42a6      	cmp	r6, r4
 8001272:	d100      	bne.n	8001276 <__aeabi_dadd+0x28e>
 8001274:	e12f      	b.n	80014d6 <__aeabi_dadd+0x4ee>
 8001276:	43db      	mvns	r3, r3
 8001278:	2b38      	cmp	r3, #56	; 0x38
 800127a:	dd00      	ble.n	800127e <__aeabi_dadd+0x296>
 800127c:	e166      	b.n	800154c <__aeabi_dadd+0x564>
 800127e:	2b1f      	cmp	r3, #31
 8001280:	dd00      	ble.n	8001284 <__aeabi_dadd+0x29c>
 8001282:	e183      	b.n	800158c <__aeabi_dadd+0x5a4>
 8001284:	2420      	movs	r4, #32
 8001286:	0005      	movs	r5, r0
 8001288:	1ae4      	subs	r4, r4, r3
 800128a:	000f      	movs	r7, r1
 800128c:	40dd      	lsrs	r5, r3
 800128e:	40d9      	lsrs	r1, r3
 8001290:	40a0      	lsls	r0, r4
 8001292:	4643      	mov	r3, r8
 8001294:	40a7      	lsls	r7, r4
 8001296:	1a5b      	subs	r3, r3, r1
 8001298:	1e44      	subs	r4, r0, #1
 800129a:	41a0      	sbcs	r0, r4
 800129c:	4698      	mov	r8, r3
 800129e:	432f      	orrs	r7, r5
 80012a0:	4338      	orrs	r0, r7
 80012a2:	1a17      	subs	r7, r2, r0
 80012a4:	42ba      	cmp	r2, r7
 80012a6:	4192      	sbcs	r2, r2
 80012a8:	4643      	mov	r3, r8
 80012aa:	4252      	negs	r2, r2
 80012ac:	1a99      	subs	r1, r3, r2
 80012ae:	4664      	mov	r4, ip
 80012b0:	0035      	movs	r5, r6
 80012b2:	e6ca      	b.n	800104a <__aeabi_dadd+0x62>
 80012b4:	2207      	movs	r2, #7
 80012b6:	403a      	ands	r2, r7
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d000      	beq.n	80012be <__aeabi_dadd+0x2d6>
 80012bc:	e6f6      	b.n	80010ac <__aeabi_dadd+0xc4>
 80012be:	074b      	lsls	r3, r1, #29
 80012c0:	08ca      	lsrs	r2, r1, #3
 80012c2:	4948      	ldr	r1, [pc, #288]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012c4:	08ff      	lsrs	r7, r7, #3
 80012c6:	433b      	orrs	r3, r7
 80012c8:	428d      	cmp	r5, r1
 80012ca:	d196      	bne.n	80011fa <__aeabi_dadd+0x212>
 80012cc:	0019      	movs	r1, r3
 80012ce:	4311      	orrs	r1, r2
 80012d0:	d100      	bne.n	80012d4 <__aeabi_dadd+0x2ec>
 80012d2:	e19e      	b.n	8001612 <__aeabi_dadd+0x62a>
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0309      	lsls	r1, r1, #12
 80012d8:	430a      	orrs	r2, r1
 80012da:	0312      	lsls	r2, r2, #12
 80012dc:	0b12      	lsrs	r2, r2, #12
 80012de:	4d41      	ldr	r5, [pc, #260]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012e0:	e78f      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012e2:	0015      	movs	r5, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2300      	movs	r3, #0
 80012e8:	e78b      	b.n	8001202 <__aeabi_dadd+0x21a>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_dadd+0x308>
 80012ee:	e0c7      	b.n	8001480 <__aeabi_dadd+0x498>
 80012f0:	1c6b      	adds	r3, r5, #1
 80012f2:	055f      	lsls	r7, r3, #21
 80012f4:	0d7f      	lsrs	r7, r7, #21
 80012f6:	2f01      	cmp	r7, #1
 80012f8:	dc00      	bgt.n	80012fc <__aeabi_dadd+0x314>
 80012fa:	e0f1      	b.n	80014e0 <__aeabi_dadd+0x4f8>
 80012fc:	4d39      	ldr	r5, [pc, #228]	; (80013e4 <__aeabi_dadd+0x3fc>)
 80012fe:	42ab      	cmp	r3, r5
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x31c>
 8001302:	e0b9      	b.n	8001478 <__aeabi_dadd+0x490>
 8001304:	1885      	adds	r5, r0, r2
 8001306:	000a      	movs	r2, r1
 8001308:	4285      	cmp	r5, r0
 800130a:	4189      	sbcs	r1, r1
 800130c:	4442      	add	r2, r8
 800130e:	4249      	negs	r1, r1
 8001310:	1851      	adds	r1, r2, r1
 8001312:	2207      	movs	r2, #7
 8001314:	07cf      	lsls	r7, r1, #31
 8001316:	086d      	lsrs	r5, r5, #1
 8001318:	432f      	orrs	r7, r5
 800131a:	0849      	lsrs	r1, r1, #1
 800131c:	403a      	ands	r2, r7
 800131e:	001d      	movs	r5, r3
 8001320:	e6c2      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001322:	2207      	movs	r2, #7
 8001324:	4930      	ldr	r1, [pc, #192]	; (80013e8 <__aeabi_dadd+0x400>)
 8001326:	1aed      	subs	r5, r5, r3
 8001328:	4031      	ands	r1, r6
 800132a:	403a      	ands	r2, r7
 800132c:	e6bc      	b.n	80010a8 <__aeabi_dadd+0xc0>
 800132e:	003e      	movs	r6, r7
 8001330:	3828      	subs	r0, #40	; 0x28
 8001332:	4086      	lsls	r6, r0
 8001334:	2700      	movs	r7, #0
 8001336:	e69f      	b.n	8001078 <__aeabi_dadd+0x90>
 8001338:	0038      	movs	r0, r7
 800133a:	f001 fcc9 	bl	8002cd0 <__clzsi2>
 800133e:	3020      	adds	r0, #32
 8001340:	e68e      	b.n	8001060 <__aeabi_dadd+0x78>
 8001342:	4643      	mov	r3, r8
 8001344:	4313      	orrs	r3, r2
 8001346:	001f      	movs	r7, r3
 8001348:	1e7a      	subs	r2, r7, #1
 800134a:	4197      	sbcs	r7, r2
 800134c:	1bc7      	subs	r7, r0, r7
 800134e:	42b8      	cmp	r0, r7
 8001350:	4180      	sbcs	r0, r0
 8001352:	4240      	negs	r0, r0
 8001354:	1a09      	subs	r1, r1, r0
 8001356:	e678      	b.n	800104a <__aeabi_dadd+0x62>
 8001358:	000e      	movs	r6, r1
 800135a:	003b      	movs	r3, r7
 800135c:	4306      	orrs	r6, r0
 800135e:	4313      	orrs	r3, r2
 8001360:	2d00      	cmp	r5, #0
 8001362:	d161      	bne.n	8001428 <__aeabi_dadd+0x440>
 8001364:	2e00      	cmp	r6, #0
 8001366:	d000      	beq.n	800136a <__aeabi_dadd+0x382>
 8001368:	e0f4      	b.n	8001554 <__aeabi_dadd+0x56c>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x388>
 800136e:	e11b      	b.n	80015a8 <__aeabi_dadd+0x5c0>
 8001370:	4664      	mov	r4, ip
 8001372:	0039      	movs	r1, r7
 8001374:	0010      	movs	r0, r2
 8001376:	e739      	b.n	80011ec <__aeabi_dadd+0x204>
 8001378:	4f1a      	ldr	r7, [pc, #104]	; (80013e4 <__aeabi_dadd+0x3fc>)
 800137a:	42bb      	cmp	r3, r7
 800137c:	d07a      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800137e:	0033      	movs	r3, r6
 8001380:	e6ff      	b.n	8001182 <__aeabi_dadd+0x19a>
 8001382:	0030      	movs	r0, r6
 8001384:	3d1f      	subs	r5, #31
 8001386:	40e8      	lsrs	r0, r5
 8001388:	2b20      	cmp	r3, #32
 800138a:	d003      	beq.n	8001394 <__aeabi_dadd+0x3ac>
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	409e      	lsls	r6, r3
 8001392:	4337      	orrs	r7, r6
 8001394:	1e7b      	subs	r3, r7, #1
 8001396:	419f      	sbcs	r7, r3
 8001398:	2207      	movs	r2, #7
 800139a:	4307      	orrs	r7, r0
 800139c:	403a      	ands	r2, r7
 800139e:	2100      	movs	r1, #0
 80013a0:	2500      	movs	r5, #0
 80013a2:	e789      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 80013a4:	1a17      	subs	r7, r2, r0
 80013a6:	4643      	mov	r3, r8
 80013a8:	42ba      	cmp	r2, r7
 80013aa:	41b6      	sbcs	r6, r6
 80013ac:	1a59      	subs	r1, r3, r1
 80013ae:	4276      	negs	r6, r6
 80013b0:	1b8e      	subs	r6, r1, r6
 80013b2:	4664      	mov	r4, ip
 80013b4:	e64e      	b.n	8001054 <__aeabi_dadd+0x6c>
 80013b6:	2b1f      	cmp	r3, #31
 80013b8:	dd00      	ble.n	80013bc <__aeabi_dadd+0x3d4>
 80013ba:	e0ad      	b.n	8001518 <__aeabi_dadd+0x530>
 80013bc:	2620      	movs	r6, #32
 80013be:	4647      	mov	r7, r8
 80013c0:	1af6      	subs	r6, r6, r3
 80013c2:	40b7      	lsls	r7, r6
 80013c4:	46b9      	mov	r9, r7
 80013c6:	0017      	movs	r7, r2
 80013c8:	46b2      	mov	sl, r6
 80013ca:	40df      	lsrs	r7, r3
 80013cc:	464e      	mov	r6, r9
 80013ce:	433e      	orrs	r6, r7
 80013d0:	0037      	movs	r7, r6
 80013d2:	4656      	mov	r6, sl
 80013d4:	40b2      	lsls	r2, r6
 80013d6:	1e56      	subs	r6, r2, #1
 80013d8:	41b2      	sbcs	r2, r6
 80013da:	4317      	orrs	r7, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	40da      	lsrs	r2, r3
 80013e0:	1889      	adds	r1, r1, r2
 80013e2:	e6ae      	b.n	8001142 <__aeabi_dadd+0x15a>
 80013e4:	000007ff 	.word	0x000007ff
 80013e8:	ff7fffff 	.word	0xff7fffff
 80013ec:	800fffff 	.word	0x800fffff
 80013f0:	2620      	movs	r6, #32
 80013f2:	4647      	mov	r7, r8
 80013f4:	1af6      	subs	r6, r6, r3
 80013f6:	40b7      	lsls	r7, r6
 80013f8:	46b9      	mov	r9, r7
 80013fa:	0017      	movs	r7, r2
 80013fc:	46b2      	mov	sl, r6
 80013fe:	40df      	lsrs	r7, r3
 8001400:	464e      	mov	r6, r9
 8001402:	433e      	orrs	r6, r7
 8001404:	0037      	movs	r7, r6
 8001406:	4656      	mov	r6, sl
 8001408:	40b2      	lsls	r2, r6
 800140a:	1e56      	subs	r6, r2, #1
 800140c:	41b2      	sbcs	r2, r6
 800140e:	4317      	orrs	r7, r2
 8001410:	4642      	mov	r2, r8
 8001412:	40da      	lsrs	r2, r3
 8001414:	1a89      	subs	r1, r1, r2
 8001416:	e799      	b.n	800134c <__aeabi_dadd+0x364>
 8001418:	4c7f      	ldr	r4, [pc, #508]	; (8001618 <__aeabi_dadd+0x630>)
 800141a:	42a6      	cmp	r6, r4
 800141c:	d05b      	beq.n	80014d6 <__aeabi_dadd+0x4ee>
 800141e:	2480      	movs	r4, #128	; 0x80
 8001420:	0424      	lsls	r4, r4, #16
 8001422:	425b      	negs	r3, r3
 8001424:	4321      	orrs	r1, r4
 8001426:	e727      	b.n	8001278 <__aeabi_dadd+0x290>
 8001428:	2e00      	cmp	r6, #0
 800142a:	d10c      	bne.n	8001446 <__aeabi_dadd+0x45e>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d100      	bne.n	8001432 <__aeabi_dadd+0x44a>
 8001430:	e0cb      	b.n	80015ca <__aeabi_dadd+0x5e2>
 8001432:	4664      	mov	r4, ip
 8001434:	0039      	movs	r1, r7
 8001436:	0010      	movs	r0, r2
 8001438:	4d77      	ldr	r5, [pc, #476]	; (8001618 <__aeabi_dadd+0x630>)
 800143a:	e6d7      	b.n	80011ec <__aeabi_dadd+0x204>
 800143c:	4f76      	ldr	r7, [pc, #472]	; (8001618 <__aeabi_dadd+0x630>)
 800143e:	42bb      	cmp	r3, r7
 8001440:	d018      	beq.n	8001474 <__aeabi_dadd+0x48c>
 8001442:	0033      	movs	r3, r6
 8001444:	e675      	b.n	8001132 <__aeabi_dadd+0x14a>
 8001446:	2b00      	cmp	r3, #0
 8001448:	d014      	beq.n	8001474 <__aeabi_dadd+0x48c>
 800144a:	074b      	lsls	r3, r1, #29
 800144c:	08c0      	lsrs	r0, r0, #3
 800144e:	4318      	orrs	r0, r3
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	031b      	lsls	r3, r3, #12
 8001456:	4219      	tst	r1, r3
 8001458:	d007      	beq.n	800146a <__aeabi_dadd+0x482>
 800145a:	08fc      	lsrs	r4, r7, #3
 800145c:	421c      	tst	r4, r3
 800145e:	d104      	bne.n	800146a <__aeabi_dadd+0x482>
 8001460:	0779      	lsls	r1, r7, #29
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	4308      	orrs	r0, r1
 8001466:	46e1      	mov	r9, ip
 8001468:	0021      	movs	r1, r4
 800146a:	464c      	mov	r4, r9
 800146c:	0f42      	lsrs	r2, r0, #29
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	4311      	orrs	r1, r2
 8001472:	00c0      	lsls	r0, r0, #3
 8001474:	4d68      	ldr	r5, [pc, #416]	; (8001618 <__aeabi_dadd+0x630>)
 8001476:	e6b9      	b.n	80011ec <__aeabi_dadd+0x204>
 8001478:	001d      	movs	r5, r3
 800147a:	2200      	movs	r2, #0
 800147c:	2300      	movs	r3, #0
 800147e:	e6c0      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001480:	2d00      	cmp	r5, #0
 8001482:	d15b      	bne.n	800153c <__aeabi_dadd+0x554>
 8001484:	000d      	movs	r5, r1
 8001486:	4305      	orrs	r5, r0
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x4a4>
 800148a:	e6e2      	b.n	8001252 <__aeabi_dadd+0x26a>
 800148c:	1c5d      	adds	r5, r3, #1
 800148e:	d100      	bne.n	8001492 <__aeabi_dadd+0x4aa>
 8001490:	e0b0      	b.n	80015f4 <__aeabi_dadd+0x60c>
 8001492:	4d61      	ldr	r5, [pc, #388]	; (8001618 <__aeabi_dadd+0x630>)
 8001494:	42ae      	cmp	r6, r5
 8001496:	d01f      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001498:	43db      	mvns	r3, r3
 800149a:	2b38      	cmp	r3, #56	; 0x38
 800149c:	dc71      	bgt.n	8001582 <__aeabi_dadd+0x59a>
 800149e:	2b1f      	cmp	r3, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x4bc>
 80014a2:	e096      	b.n	80015d2 <__aeabi_dadd+0x5ea>
 80014a4:	2520      	movs	r5, #32
 80014a6:	000f      	movs	r7, r1
 80014a8:	1aed      	subs	r5, r5, r3
 80014aa:	40af      	lsls	r7, r5
 80014ac:	46b9      	mov	r9, r7
 80014ae:	0007      	movs	r7, r0
 80014b0:	46aa      	mov	sl, r5
 80014b2:	40df      	lsrs	r7, r3
 80014b4:	464d      	mov	r5, r9
 80014b6:	433d      	orrs	r5, r7
 80014b8:	002f      	movs	r7, r5
 80014ba:	4655      	mov	r5, sl
 80014bc:	40a8      	lsls	r0, r5
 80014be:	40d9      	lsrs	r1, r3
 80014c0:	1e45      	subs	r5, r0, #1
 80014c2:	41a8      	sbcs	r0, r5
 80014c4:	4488      	add	r8, r1
 80014c6:	4307      	orrs	r7, r0
 80014c8:	18bf      	adds	r7, r7, r2
 80014ca:	4297      	cmp	r7, r2
 80014cc:	4192      	sbcs	r2, r2
 80014ce:	4251      	negs	r1, r2
 80014d0:	4441      	add	r1, r8
 80014d2:	0035      	movs	r5, r6
 80014d4:	e63a      	b.n	800114c <__aeabi_dadd+0x164>
 80014d6:	4664      	mov	r4, ip
 80014d8:	0035      	movs	r5, r6
 80014da:	4641      	mov	r1, r8
 80014dc:	0010      	movs	r0, r2
 80014de:	e685      	b.n	80011ec <__aeabi_dadd+0x204>
 80014e0:	000b      	movs	r3, r1
 80014e2:	4303      	orrs	r3, r0
 80014e4:	2d00      	cmp	r5, #0
 80014e6:	d000      	beq.n	80014ea <__aeabi_dadd+0x502>
 80014e8:	e663      	b.n	80011b2 <__aeabi_dadd+0x1ca>
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f5      	beq.n	80014da <__aeabi_dadd+0x4f2>
 80014ee:	4643      	mov	r3, r8
 80014f0:	4313      	orrs	r3, r2
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x50e>
 80014f4:	e67a      	b.n	80011ec <__aeabi_dadd+0x204>
 80014f6:	1887      	adds	r7, r0, r2
 80014f8:	4287      	cmp	r7, r0
 80014fa:	4180      	sbcs	r0, r0
 80014fc:	2207      	movs	r2, #7
 80014fe:	4441      	add	r1, r8
 8001500:	4240      	negs	r0, r0
 8001502:	1809      	adds	r1, r1, r0
 8001504:	403a      	ands	r2, r7
 8001506:	020b      	lsls	r3, r1, #8
 8001508:	d400      	bmi.n	800150c <__aeabi_dadd+0x524>
 800150a:	e6d5      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 800150c:	4b43      	ldr	r3, [pc, #268]	; (800161c <__aeabi_dadd+0x634>)
 800150e:	3501      	adds	r5, #1
 8001510:	4019      	ands	r1, r3
 8001512:	e5c9      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001514:	0038      	movs	r0, r7
 8001516:	e669      	b.n	80011ec <__aeabi_dadd+0x204>
 8001518:	001e      	movs	r6, r3
 800151a:	4647      	mov	r7, r8
 800151c:	3e20      	subs	r6, #32
 800151e:	40f7      	lsrs	r7, r6
 8001520:	46bc      	mov	ip, r7
 8001522:	2b20      	cmp	r3, #32
 8001524:	d004      	beq.n	8001530 <__aeabi_dadd+0x548>
 8001526:	2640      	movs	r6, #64	; 0x40
 8001528:	1af3      	subs	r3, r6, r3
 800152a:	4646      	mov	r6, r8
 800152c:	409e      	lsls	r6, r3
 800152e:	4332      	orrs	r2, r6
 8001530:	0017      	movs	r7, r2
 8001532:	4663      	mov	r3, ip
 8001534:	1e7a      	subs	r2, r7, #1
 8001536:	4197      	sbcs	r7, r2
 8001538:	431f      	orrs	r7, r3
 800153a:	e602      	b.n	8001142 <__aeabi_dadd+0x15a>
 800153c:	4d36      	ldr	r5, [pc, #216]	; (8001618 <__aeabi_dadd+0x630>)
 800153e:	42ae      	cmp	r6, r5
 8001540:	d0ca      	beq.n	80014d8 <__aeabi_dadd+0x4f0>
 8001542:	2580      	movs	r5, #128	; 0x80
 8001544:	042d      	lsls	r5, r5, #16
 8001546:	425b      	negs	r3, r3
 8001548:	4329      	orrs	r1, r5
 800154a:	e7a6      	b.n	800149a <__aeabi_dadd+0x4b2>
 800154c:	4308      	orrs	r0, r1
 800154e:	1e41      	subs	r1, r0, #1
 8001550:	4188      	sbcs	r0, r1
 8001552:	e6a6      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 8001554:	2b00      	cmp	r3, #0
 8001556:	d100      	bne.n	800155a <__aeabi_dadd+0x572>
 8001558:	e648      	b.n	80011ec <__aeabi_dadd+0x204>
 800155a:	1a87      	subs	r7, r0, r2
 800155c:	4643      	mov	r3, r8
 800155e:	42b8      	cmp	r0, r7
 8001560:	41b6      	sbcs	r6, r6
 8001562:	1acb      	subs	r3, r1, r3
 8001564:	4276      	negs	r6, r6
 8001566:	1b9e      	subs	r6, r3, r6
 8001568:	0233      	lsls	r3, r6, #8
 800156a:	d54b      	bpl.n	8001604 <__aeabi_dadd+0x61c>
 800156c:	1a17      	subs	r7, r2, r0
 800156e:	4643      	mov	r3, r8
 8001570:	42ba      	cmp	r2, r7
 8001572:	4192      	sbcs	r2, r2
 8001574:	1a59      	subs	r1, r3, r1
 8001576:	4252      	negs	r2, r2
 8001578:	1a89      	subs	r1, r1, r2
 800157a:	2207      	movs	r2, #7
 800157c:	4664      	mov	r4, ip
 800157e:	403a      	ands	r2, r7
 8001580:	e592      	b.n	80010a8 <__aeabi_dadd+0xc0>
 8001582:	4301      	orrs	r1, r0
 8001584:	000f      	movs	r7, r1
 8001586:	1e79      	subs	r1, r7, #1
 8001588:	418f      	sbcs	r7, r1
 800158a:	e79d      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 800158c:	001c      	movs	r4, r3
 800158e:	000f      	movs	r7, r1
 8001590:	3c20      	subs	r4, #32
 8001592:	40e7      	lsrs	r7, r4
 8001594:	2b20      	cmp	r3, #32
 8001596:	d003      	beq.n	80015a0 <__aeabi_dadd+0x5b8>
 8001598:	2440      	movs	r4, #64	; 0x40
 800159a:	1ae3      	subs	r3, r4, r3
 800159c:	4099      	lsls	r1, r3
 800159e:	4308      	orrs	r0, r1
 80015a0:	1e41      	subs	r1, r0, #1
 80015a2:	4188      	sbcs	r0, r1
 80015a4:	4338      	orrs	r0, r7
 80015a6:	e67c      	b.n	80012a2 <__aeabi_dadd+0x2ba>
 80015a8:	2200      	movs	r2, #0
 80015aa:	2400      	movs	r4, #0
 80015ac:	e625      	b.n	80011fa <__aeabi_dadd+0x212>
 80015ae:	1a17      	subs	r7, r2, r0
 80015b0:	4643      	mov	r3, r8
 80015b2:	42ba      	cmp	r2, r7
 80015b4:	4192      	sbcs	r2, r2
 80015b6:	1a59      	subs	r1, r3, r1
 80015b8:	4252      	negs	r2, r2
 80015ba:	1a89      	subs	r1, r1, r2
 80015bc:	4664      	mov	r4, ip
 80015be:	0035      	movs	r5, r6
 80015c0:	e543      	b.n	800104a <__aeabi_dadd+0x62>
 80015c2:	4641      	mov	r1, r8
 80015c4:	0010      	movs	r0, r2
 80015c6:	4d14      	ldr	r5, [pc, #80]	; (8001618 <__aeabi_dadd+0x630>)
 80015c8:	e610      	b.n	80011ec <__aeabi_dadd+0x204>
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	2400      	movs	r4, #0
 80015ce:	0312      	lsls	r2, r2, #12
 80015d0:	e680      	b.n	80012d4 <__aeabi_dadd+0x2ec>
 80015d2:	001d      	movs	r5, r3
 80015d4:	000f      	movs	r7, r1
 80015d6:	3d20      	subs	r5, #32
 80015d8:	40ef      	lsrs	r7, r5
 80015da:	46bc      	mov	ip, r7
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d003      	beq.n	80015e8 <__aeabi_dadd+0x600>
 80015e0:	2540      	movs	r5, #64	; 0x40
 80015e2:	1aeb      	subs	r3, r5, r3
 80015e4:	4099      	lsls	r1, r3
 80015e6:	4308      	orrs	r0, r1
 80015e8:	0007      	movs	r7, r0
 80015ea:	4663      	mov	r3, ip
 80015ec:	1e78      	subs	r0, r7, #1
 80015ee:	4187      	sbcs	r7, r0
 80015f0:	431f      	orrs	r7, r3
 80015f2:	e769      	b.n	80014c8 <__aeabi_dadd+0x4e0>
 80015f4:	1887      	adds	r7, r0, r2
 80015f6:	4297      	cmp	r7, r2
 80015f8:	419b      	sbcs	r3, r3
 80015fa:	4441      	add	r1, r8
 80015fc:	425b      	negs	r3, r3
 80015fe:	18c9      	adds	r1, r1, r3
 8001600:	0035      	movs	r5, r6
 8001602:	e5a3      	b.n	800114c <__aeabi_dadd+0x164>
 8001604:	003b      	movs	r3, r7
 8001606:	4333      	orrs	r3, r6
 8001608:	d0ce      	beq.n	80015a8 <__aeabi_dadd+0x5c0>
 800160a:	2207      	movs	r2, #7
 800160c:	0031      	movs	r1, r6
 800160e:	403a      	ands	r2, r7
 8001610:	e652      	b.n	80012b8 <__aeabi_dadd+0x2d0>
 8001612:	2300      	movs	r3, #0
 8001614:	001a      	movs	r2, r3
 8001616:	e5f4      	b.n	8001202 <__aeabi_dadd+0x21a>
 8001618:	000007ff 	.word	0x000007ff
 800161c:	ff7fffff 	.word	0xff7fffff

08001620 <__aeabi_ddiv>:
 8001620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001622:	4657      	mov	r7, sl
 8001624:	46de      	mov	lr, fp
 8001626:	464e      	mov	r6, r9
 8001628:	4645      	mov	r5, r8
 800162a:	b5e0      	push	{r5, r6, r7, lr}
 800162c:	4683      	mov	fp, r0
 800162e:	0007      	movs	r7, r0
 8001630:	030e      	lsls	r6, r1, #12
 8001632:	0048      	lsls	r0, r1, #1
 8001634:	b085      	sub	sp, #20
 8001636:	4692      	mov	sl, r2
 8001638:	001c      	movs	r4, r3
 800163a:	0b36      	lsrs	r6, r6, #12
 800163c:	0d40      	lsrs	r0, r0, #21
 800163e:	0fcd      	lsrs	r5, r1, #31
 8001640:	2800      	cmp	r0, #0
 8001642:	d100      	bne.n	8001646 <__aeabi_ddiv+0x26>
 8001644:	e09d      	b.n	8001782 <__aeabi_ddiv+0x162>
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <__aeabi_ddiv+0x27c>)
 8001648:	4298      	cmp	r0, r3
 800164a:	d039      	beq.n	80016c0 <__aeabi_ddiv+0xa0>
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	00f6      	lsls	r6, r6, #3
 8001650:	041b      	lsls	r3, r3, #16
 8001652:	431e      	orrs	r6, r3
 8001654:	4a92      	ldr	r2, [pc, #584]	; (80018a0 <__aeabi_ddiv+0x280>)
 8001656:	0f7b      	lsrs	r3, r7, #29
 8001658:	4333      	orrs	r3, r6
 800165a:	4699      	mov	r9, r3
 800165c:	4694      	mov	ip, r2
 800165e:	0003      	movs	r3, r0
 8001660:	4463      	add	r3, ip
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2600      	movs	r6, #0
 8001668:	00ff      	lsls	r7, r7, #3
 800166a:	9302      	str	r3, [sp, #8]
 800166c:	0323      	lsls	r3, r4, #12
 800166e:	0b1b      	lsrs	r3, r3, #12
 8001670:	4698      	mov	r8, r3
 8001672:	0063      	lsls	r3, r4, #1
 8001674:	0fe4      	lsrs	r4, r4, #31
 8001676:	4652      	mov	r2, sl
 8001678:	0d5b      	lsrs	r3, r3, #21
 800167a:	9401      	str	r4, [sp, #4]
 800167c:	d100      	bne.n	8001680 <__aeabi_ddiv+0x60>
 800167e:	e0b3      	b.n	80017e8 <__aeabi_ddiv+0x1c8>
 8001680:	4986      	ldr	r1, [pc, #536]	; (800189c <__aeabi_ddiv+0x27c>)
 8001682:	428b      	cmp	r3, r1
 8001684:	d100      	bne.n	8001688 <__aeabi_ddiv+0x68>
 8001686:	e09e      	b.n	80017c6 <__aeabi_ddiv+0x1a6>
 8001688:	4642      	mov	r2, r8
 800168a:	00d1      	lsls	r1, r2, #3
 800168c:	2280      	movs	r2, #128	; 0x80
 800168e:	0412      	lsls	r2, r2, #16
 8001690:	430a      	orrs	r2, r1
 8001692:	4651      	mov	r1, sl
 8001694:	0f49      	lsrs	r1, r1, #29
 8001696:	4311      	orrs	r1, r2
 8001698:	468b      	mov	fp, r1
 800169a:	4981      	ldr	r1, [pc, #516]	; (80018a0 <__aeabi_ddiv+0x280>)
 800169c:	4652      	mov	r2, sl
 800169e:	468c      	mov	ip, r1
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4463      	add	r3, ip
 80016a4:	1acb      	subs	r3, r1, r3
 80016a6:	2100      	movs	r1, #0
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	9300      	str	r3, [sp, #0]
 80016ac:	002b      	movs	r3, r5
 80016ae:	4063      	eors	r3, r4
 80016b0:	469a      	mov	sl, r3
 80016b2:	2e0f      	cmp	r6, #15
 80016b4:	d900      	bls.n	80016b8 <__aeabi_ddiv+0x98>
 80016b6:	e105      	b.n	80018c4 <__aeabi_ddiv+0x2a4>
 80016b8:	4b7a      	ldr	r3, [pc, #488]	; (80018a4 <__aeabi_ddiv+0x284>)
 80016ba:	00b6      	lsls	r6, r6, #2
 80016bc:	599b      	ldr	r3, [r3, r6]
 80016be:	469f      	mov	pc, r3
 80016c0:	465b      	mov	r3, fp
 80016c2:	4333      	orrs	r3, r6
 80016c4:	4699      	mov	r9, r3
 80016c6:	d000      	beq.n	80016ca <__aeabi_ddiv+0xaa>
 80016c8:	e0b8      	b.n	800183c <__aeabi_ddiv+0x21c>
 80016ca:	2302      	movs	r3, #2
 80016cc:	2608      	movs	r6, #8
 80016ce:	2700      	movs	r7, #0
 80016d0:	9000      	str	r0, [sp, #0]
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	e7ca      	b.n	800166c <__aeabi_ddiv+0x4c>
 80016d6:	46cb      	mov	fp, r9
 80016d8:	003a      	movs	r2, r7
 80016da:	9902      	ldr	r1, [sp, #8]
 80016dc:	9501      	str	r5, [sp, #4]
 80016de:	9b01      	ldr	r3, [sp, #4]
 80016e0:	469a      	mov	sl, r3
 80016e2:	2902      	cmp	r1, #2
 80016e4:	d027      	beq.n	8001736 <__aeabi_ddiv+0x116>
 80016e6:	2903      	cmp	r1, #3
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0xcc>
 80016ea:	e280      	b.n	8001bee <__aeabi_ddiv+0x5ce>
 80016ec:	2901      	cmp	r1, #1
 80016ee:	d044      	beq.n	800177a <__aeabi_ddiv+0x15a>
 80016f0:	496d      	ldr	r1, [pc, #436]	; (80018a8 <__aeabi_ddiv+0x288>)
 80016f2:	9b00      	ldr	r3, [sp, #0]
 80016f4:	468c      	mov	ip, r1
 80016f6:	4463      	add	r3, ip
 80016f8:	001c      	movs	r4, r3
 80016fa:	2c00      	cmp	r4, #0
 80016fc:	dd38      	ble.n	8001770 <__aeabi_ddiv+0x150>
 80016fe:	0753      	lsls	r3, r2, #29
 8001700:	d000      	beq.n	8001704 <__aeabi_ddiv+0xe4>
 8001702:	e213      	b.n	8001b2c <__aeabi_ddiv+0x50c>
 8001704:	08d2      	lsrs	r2, r2, #3
 8001706:	465b      	mov	r3, fp
 8001708:	01db      	lsls	r3, r3, #7
 800170a:	d509      	bpl.n	8001720 <__aeabi_ddiv+0x100>
 800170c:	4659      	mov	r1, fp
 800170e:	4b67      	ldr	r3, [pc, #412]	; (80018ac <__aeabi_ddiv+0x28c>)
 8001710:	4019      	ands	r1, r3
 8001712:	468b      	mov	fp, r1
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	00c9      	lsls	r1, r1, #3
 8001718:	468c      	mov	ip, r1
 800171a:	9b00      	ldr	r3, [sp, #0]
 800171c:	4463      	add	r3, ip
 800171e:	001c      	movs	r4, r3
 8001720:	4b63      	ldr	r3, [pc, #396]	; (80018b0 <__aeabi_ddiv+0x290>)
 8001722:	429c      	cmp	r4, r3
 8001724:	dc07      	bgt.n	8001736 <__aeabi_ddiv+0x116>
 8001726:	465b      	mov	r3, fp
 8001728:	0564      	lsls	r4, r4, #21
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	025b      	lsls	r3, r3, #9
 800172e:	4317      	orrs	r7, r2
 8001730:	0b1b      	lsrs	r3, r3, #12
 8001732:	0d62      	lsrs	r2, r4, #21
 8001734:	e002      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001736:	2300      	movs	r3, #0
 8001738:	2700      	movs	r7, #0
 800173a:	4a58      	ldr	r2, [pc, #352]	; (800189c <__aeabi_ddiv+0x27c>)
 800173c:	2100      	movs	r1, #0
 800173e:	031b      	lsls	r3, r3, #12
 8001740:	0b1c      	lsrs	r4, r3, #12
 8001742:	0d0b      	lsrs	r3, r1, #20
 8001744:	051b      	lsls	r3, r3, #20
 8001746:	4323      	orrs	r3, r4
 8001748:	0514      	lsls	r4, r2, #20
 800174a:	4a5a      	ldr	r2, [pc, #360]	; (80018b4 <__aeabi_ddiv+0x294>)
 800174c:	0038      	movs	r0, r7
 800174e:	4013      	ands	r3, r2
 8001750:	431c      	orrs	r4, r3
 8001752:	4653      	mov	r3, sl
 8001754:	0064      	lsls	r4, r4, #1
 8001756:	07db      	lsls	r3, r3, #31
 8001758:	0864      	lsrs	r4, r4, #1
 800175a:	431c      	orrs	r4, r3
 800175c:	0021      	movs	r1, r4
 800175e:	b005      	add	sp, #20
 8001760:	bc3c      	pop	{r2, r3, r4, r5}
 8001762:	4690      	mov	r8, r2
 8001764:	4699      	mov	r9, r3
 8001766:	46a2      	mov	sl, r4
 8001768:	46ab      	mov	fp, r5
 800176a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800176c:	2201      	movs	r2, #1
 800176e:	4252      	negs	r2, r2
 8001770:	2301      	movs	r3, #1
 8001772:	1b1b      	subs	r3, r3, r4
 8001774:	2b38      	cmp	r3, #56	; 0x38
 8001776:	dc00      	bgt.n	800177a <__aeabi_ddiv+0x15a>
 8001778:	e1ad      	b.n	8001ad6 <__aeabi_ddiv+0x4b6>
 800177a:	2200      	movs	r2, #0
 800177c:	2300      	movs	r3, #0
 800177e:	2700      	movs	r7, #0
 8001780:	e7dc      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001782:	465b      	mov	r3, fp
 8001784:	4333      	orrs	r3, r6
 8001786:	4699      	mov	r9, r3
 8001788:	d05e      	beq.n	8001848 <__aeabi_ddiv+0x228>
 800178a:	2e00      	cmp	r6, #0
 800178c:	d100      	bne.n	8001790 <__aeabi_ddiv+0x170>
 800178e:	e18a      	b.n	8001aa6 <__aeabi_ddiv+0x486>
 8001790:	0030      	movs	r0, r6
 8001792:	f001 fa9d 	bl	8002cd0 <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	3b0b      	subs	r3, #11
 800179a:	2b1c      	cmp	r3, #28
 800179c:	dd00      	ble.n	80017a0 <__aeabi_ddiv+0x180>
 800179e:	e17b      	b.n	8001a98 <__aeabi_ddiv+0x478>
 80017a0:	221d      	movs	r2, #29
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	465a      	mov	r2, fp
 80017a6:	0001      	movs	r1, r0
 80017a8:	40da      	lsrs	r2, r3
 80017aa:	3908      	subs	r1, #8
 80017ac:	408e      	lsls	r6, r1
 80017ae:	0013      	movs	r3, r2
 80017b0:	465f      	mov	r7, fp
 80017b2:	4333      	orrs	r3, r6
 80017b4:	4699      	mov	r9, r3
 80017b6:	408f      	lsls	r7, r1
 80017b8:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <__aeabi_ddiv+0x298>)
 80017ba:	2600      	movs	r6, #0
 80017bc:	1a1b      	subs	r3, r3, r0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	e752      	b.n	800166c <__aeabi_ddiv+0x4c>
 80017c6:	4641      	mov	r1, r8
 80017c8:	4653      	mov	r3, sl
 80017ca:	430b      	orrs	r3, r1
 80017cc:	493b      	ldr	r1, [pc, #236]	; (80018bc <__aeabi_ddiv+0x29c>)
 80017ce:	469b      	mov	fp, r3
 80017d0:	468c      	mov	ip, r1
 80017d2:	9b00      	ldr	r3, [sp, #0]
 80017d4:	4463      	add	r3, ip
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	465b      	mov	r3, fp
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d13b      	bne.n	8001856 <__aeabi_ddiv+0x236>
 80017de:	2302      	movs	r3, #2
 80017e0:	2200      	movs	r2, #0
 80017e2:	431e      	orrs	r6, r3
 80017e4:	2102      	movs	r1, #2
 80017e6:	e761      	b.n	80016ac <__aeabi_ddiv+0x8c>
 80017e8:	4643      	mov	r3, r8
 80017ea:	4313      	orrs	r3, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	d037      	beq.n	8001860 <__aeabi_ddiv+0x240>
 80017f0:	4643      	mov	r3, r8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d100      	bne.n	80017f8 <__aeabi_ddiv+0x1d8>
 80017f6:	e162      	b.n	8001abe <__aeabi_ddiv+0x49e>
 80017f8:	4640      	mov	r0, r8
 80017fa:	f001 fa69 	bl	8002cd0 <__clzsi2>
 80017fe:	0003      	movs	r3, r0
 8001800:	3b0b      	subs	r3, #11
 8001802:	2b1c      	cmp	r3, #28
 8001804:	dd00      	ble.n	8001808 <__aeabi_ddiv+0x1e8>
 8001806:	e153      	b.n	8001ab0 <__aeabi_ddiv+0x490>
 8001808:	0002      	movs	r2, r0
 800180a:	4641      	mov	r1, r8
 800180c:	3a08      	subs	r2, #8
 800180e:	4091      	lsls	r1, r2
 8001810:	4688      	mov	r8, r1
 8001812:	211d      	movs	r1, #29
 8001814:	1acb      	subs	r3, r1, r3
 8001816:	4651      	mov	r1, sl
 8001818:	40d9      	lsrs	r1, r3
 800181a:	000b      	movs	r3, r1
 800181c:	4641      	mov	r1, r8
 800181e:	430b      	orrs	r3, r1
 8001820:	469b      	mov	fp, r3
 8001822:	4653      	mov	r3, sl
 8001824:	4093      	lsls	r3, r2
 8001826:	001a      	movs	r2, r3
 8001828:	9b00      	ldr	r3, [sp, #0]
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <__aeabi_ddiv+0x2a0>)
 800182c:	469c      	mov	ip, r3
 800182e:	4460      	add	r0, ip
 8001830:	0003      	movs	r3, r0
 8001832:	468c      	mov	ip, r1
 8001834:	4463      	add	r3, ip
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2100      	movs	r1, #0
 800183a:	e737      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800183c:	2303      	movs	r3, #3
 800183e:	46b1      	mov	r9, r6
 8001840:	9000      	str	r0, [sp, #0]
 8001842:	260c      	movs	r6, #12
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	e711      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001848:	2300      	movs	r3, #0
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	3301      	adds	r3, #1
 800184e:	2604      	movs	r6, #4
 8001850:	2700      	movs	r7, #0
 8001852:	9302      	str	r3, [sp, #8]
 8001854:	e70a      	b.n	800166c <__aeabi_ddiv+0x4c>
 8001856:	2303      	movs	r3, #3
 8001858:	46c3      	mov	fp, r8
 800185a:	431e      	orrs	r6, r3
 800185c:	2103      	movs	r1, #3
 800185e:	e725      	b.n	80016ac <__aeabi_ddiv+0x8c>
 8001860:	3301      	adds	r3, #1
 8001862:	431e      	orrs	r6, r3
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	e720      	b.n	80016ac <__aeabi_ddiv+0x8c>
 800186a:	2300      	movs	r3, #0
 800186c:	469a      	mov	sl, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	2700      	movs	r7, #0
 8001872:	031b      	lsls	r3, r3, #12
 8001874:	4a09      	ldr	r2, [pc, #36]	; (800189c <__aeabi_ddiv+0x27c>)
 8001876:	e761      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	4649      	mov	r1, r9
 800187c:	031b      	lsls	r3, r3, #12
 800187e:	4219      	tst	r1, r3
 8001880:	d100      	bne.n	8001884 <__aeabi_ddiv+0x264>
 8001882:	e0e2      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 8001884:	4659      	mov	r1, fp
 8001886:	4219      	tst	r1, r3
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0x26c>
 800188a:	e0de      	b.n	8001a4a <__aeabi_ddiv+0x42a>
 800188c:	430b      	orrs	r3, r1
 800188e:	031b      	lsls	r3, r3, #12
 8001890:	0017      	movs	r7, r2
 8001892:	0b1b      	lsrs	r3, r3, #12
 8001894:	46a2      	mov	sl, r4
 8001896:	4a01      	ldr	r2, [pc, #4]	; (800189c <__aeabi_ddiv+0x27c>)
 8001898:	e750      	b.n	800173c <__aeabi_ddiv+0x11c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	fffffc01 	.word	0xfffffc01
 80018a4:	08019284 	.word	0x08019284
 80018a8:	000003ff 	.word	0x000003ff
 80018ac:	feffffff 	.word	0xfeffffff
 80018b0:	000007fe 	.word	0x000007fe
 80018b4:	800fffff 	.word	0x800fffff
 80018b8:	fffffc0d 	.word	0xfffffc0d
 80018bc:	fffff801 	.word	0xfffff801
 80018c0:	000003f3 	.word	0x000003f3
 80018c4:	45d9      	cmp	r9, fp
 80018c6:	d900      	bls.n	80018ca <__aeabi_ddiv+0x2aa>
 80018c8:	e0cb      	b.n	8001a62 <__aeabi_ddiv+0x442>
 80018ca:	d100      	bne.n	80018ce <__aeabi_ddiv+0x2ae>
 80018cc:	e0c6      	b.n	8001a5c <__aeabi_ddiv+0x43c>
 80018ce:	003c      	movs	r4, r7
 80018d0:	4648      	mov	r0, r9
 80018d2:	2700      	movs	r7, #0
 80018d4:	9b00      	ldr	r3, [sp, #0]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	465b      	mov	r3, fp
 80018dc:	0e16      	lsrs	r6, r2, #24
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	431e      	orrs	r6, r3
 80018e2:	0213      	lsls	r3, r2, #8
 80018e4:	4698      	mov	r8, r3
 80018e6:	0433      	lsls	r3, r6, #16
 80018e8:	0c1b      	lsrs	r3, r3, #16
 80018ea:	4699      	mov	r9, r3
 80018ec:	0c31      	lsrs	r1, r6, #16
 80018ee:	9101      	str	r1, [sp, #4]
 80018f0:	f7fe fcb4 	bl	800025c <__aeabi_uidivmod>
 80018f4:	464a      	mov	r2, r9
 80018f6:	4342      	muls	r2, r0
 80018f8:	040b      	lsls	r3, r1, #16
 80018fa:	0c21      	lsrs	r1, r4, #16
 80018fc:	0005      	movs	r5, r0
 80018fe:	4319      	orrs	r1, r3
 8001900:	428a      	cmp	r2, r1
 8001902:	d907      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001904:	1989      	adds	r1, r1, r6
 8001906:	3d01      	subs	r5, #1
 8001908:	428e      	cmp	r6, r1
 800190a:	d803      	bhi.n	8001914 <__aeabi_ddiv+0x2f4>
 800190c:	428a      	cmp	r2, r1
 800190e:	d901      	bls.n	8001914 <__aeabi_ddiv+0x2f4>
 8001910:	1e85      	subs	r5, r0, #2
 8001912:	1989      	adds	r1, r1, r6
 8001914:	1a88      	subs	r0, r1, r2
 8001916:	9901      	ldr	r1, [sp, #4]
 8001918:	f7fe fca0 	bl	800025c <__aeabi_uidivmod>
 800191c:	0409      	lsls	r1, r1, #16
 800191e:	468c      	mov	ip, r1
 8001920:	464a      	mov	r2, r9
 8001922:	0421      	lsls	r1, r4, #16
 8001924:	4664      	mov	r4, ip
 8001926:	4342      	muls	r2, r0
 8001928:	0c09      	lsrs	r1, r1, #16
 800192a:	0003      	movs	r3, r0
 800192c:	4321      	orrs	r1, r4
 800192e:	428a      	cmp	r2, r1
 8001930:	d904      	bls.n	800193c <__aeabi_ddiv+0x31c>
 8001932:	1989      	adds	r1, r1, r6
 8001934:	3b01      	subs	r3, #1
 8001936:	428e      	cmp	r6, r1
 8001938:	d800      	bhi.n	800193c <__aeabi_ddiv+0x31c>
 800193a:	e0f1      	b.n	8001b20 <__aeabi_ddiv+0x500>
 800193c:	042d      	lsls	r5, r5, #16
 800193e:	431d      	orrs	r5, r3
 8001940:	46ab      	mov	fp, r5
 8001942:	4643      	mov	r3, r8
 8001944:	1a89      	subs	r1, r1, r2
 8001946:	4642      	mov	r2, r8
 8001948:	0c28      	lsrs	r0, r5, #16
 800194a:	0412      	lsls	r2, r2, #16
 800194c:	0c1d      	lsrs	r5, r3, #16
 800194e:	465b      	mov	r3, fp
 8001950:	0c14      	lsrs	r4, r2, #16
 8001952:	0022      	movs	r2, r4
 8001954:	041b      	lsls	r3, r3, #16
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	435a      	muls	r2, r3
 800195a:	9403      	str	r4, [sp, #12]
 800195c:	436b      	muls	r3, r5
 800195e:	4344      	muls	r4, r0
 8001960:	9502      	str	r5, [sp, #8]
 8001962:	4368      	muls	r0, r5
 8001964:	191b      	adds	r3, r3, r4
 8001966:	0c15      	lsrs	r5, r2, #16
 8001968:	18eb      	adds	r3, r5, r3
 800196a:	429c      	cmp	r4, r3
 800196c:	d903      	bls.n	8001976 <__aeabi_ddiv+0x356>
 800196e:	2480      	movs	r4, #128	; 0x80
 8001970:	0264      	lsls	r4, r4, #9
 8001972:	46a4      	mov	ip, r4
 8001974:	4460      	add	r0, ip
 8001976:	0c1c      	lsrs	r4, r3, #16
 8001978:	0415      	lsls	r5, r2, #16
 800197a:	041b      	lsls	r3, r3, #16
 800197c:	0c2d      	lsrs	r5, r5, #16
 800197e:	1820      	adds	r0, r4, r0
 8001980:	195d      	adds	r5, r3, r5
 8001982:	4281      	cmp	r1, r0
 8001984:	d377      	bcc.n	8001a76 <__aeabi_ddiv+0x456>
 8001986:	d073      	beq.n	8001a70 <__aeabi_ddiv+0x450>
 8001988:	1a0c      	subs	r4, r1, r0
 800198a:	4aa2      	ldr	r2, [pc, #648]	; (8001c14 <__aeabi_ddiv+0x5f4>)
 800198c:	1b7d      	subs	r5, r7, r5
 800198e:	42af      	cmp	r7, r5
 8001990:	41bf      	sbcs	r7, r7
 8001992:	4694      	mov	ip, r2
 8001994:	9b00      	ldr	r3, [sp, #0]
 8001996:	427f      	negs	r7, r7
 8001998:	4463      	add	r3, ip
 800199a:	1be0      	subs	r0, r4, r7
 800199c:	001c      	movs	r4, r3
 800199e:	4286      	cmp	r6, r0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x384>
 80019a2:	e0db      	b.n	8001b5c <__aeabi_ddiv+0x53c>
 80019a4:	9901      	ldr	r1, [sp, #4]
 80019a6:	f7fe fc59 	bl	800025c <__aeabi_uidivmod>
 80019aa:	464a      	mov	r2, r9
 80019ac:	4342      	muls	r2, r0
 80019ae:	040b      	lsls	r3, r1, #16
 80019b0:	0c29      	lsrs	r1, r5, #16
 80019b2:	0007      	movs	r7, r0
 80019b4:	4319      	orrs	r1, r3
 80019b6:	428a      	cmp	r2, r1
 80019b8:	d907      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019ba:	1989      	adds	r1, r1, r6
 80019bc:	3f01      	subs	r7, #1
 80019be:	428e      	cmp	r6, r1
 80019c0:	d803      	bhi.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c2:	428a      	cmp	r2, r1
 80019c4:	d901      	bls.n	80019ca <__aeabi_ddiv+0x3aa>
 80019c6:	1e87      	subs	r7, r0, #2
 80019c8:	1989      	adds	r1, r1, r6
 80019ca:	1a88      	subs	r0, r1, r2
 80019cc:	9901      	ldr	r1, [sp, #4]
 80019ce:	f7fe fc45 	bl	800025c <__aeabi_uidivmod>
 80019d2:	0409      	lsls	r1, r1, #16
 80019d4:	464a      	mov	r2, r9
 80019d6:	4689      	mov	r9, r1
 80019d8:	0429      	lsls	r1, r5, #16
 80019da:	464d      	mov	r5, r9
 80019dc:	4342      	muls	r2, r0
 80019de:	0c09      	lsrs	r1, r1, #16
 80019e0:	0003      	movs	r3, r0
 80019e2:	4329      	orrs	r1, r5
 80019e4:	428a      	cmp	r2, r1
 80019e6:	d907      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019e8:	1989      	adds	r1, r1, r6
 80019ea:	3b01      	subs	r3, #1
 80019ec:	428e      	cmp	r6, r1
 80019ee:	d803      	bhi.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f0:	428a      	cmp	r2, r1
 80019f2:	d901      	bls.n	80019f8 <__aeabi_ddiv+0x3d8>
 80019f4:	1e83      	subs	r3, r0, #2
 80019f6:	1989      	adds	r1, r1, r6
 80019f8:	043f      	lsls	r7, r7, #16
 80019fa:	1a89      	subs	r1, r1, r2
 80019fc:	003a      	movs	r2, r7
 80019fe:	9f03      	ldr	r7, [sp, #12]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	0038      	movs	r0, r7
 8001a04:	0413      	lsls	r3, r2, #16
 8001a06:	0c1b      	lsrs	r3, r3, #16
 8001a08:	4358      	muls	r0, r3
 8001a0a:	4681      	mov	r9, r0
 8001a0c:	9802      	ldr	r0, [sp, #8]
 8001a0e:	0c15      	lsrs	r5, r2, #16
 8001a10:	436f      	muls	r7, r5
 8001a12:	4343      	muls	r3, r0
 8001a14:	4345      	muls	r5, r0
 8001a16:	4648      	mov	r0, r9
 8001a18:	0c00      	lsrs	r0, r0, #16
 8001a1a:	4684      	mov	ip, r0
 8001a1c:	19db      	adds	r3, r3, r7
 8001a1e:	4463      	add	r3, ip
 8001a20:	429f      	cmp	r7, r3
 8001a22:	d903      	bls.n	8001a2c <__aeabi_ddiv+0x40c>
 8001a24:	2080      	movs	r0, #128	; 0x80
 8001a26:	0240      	lsls	r0, r0, #9
 8001a28:	4684      	mov	ip, r0
 8001a2a:	4465      	add	r5, ip
 8001a2c:	4648      	mov	r0, r9
 8001a2e:	0c1f      	lsrs	r7, r3, #16
 8001a30:	0400      	lsls	r0, r0, #16
 8001a32:	041b      	lsls	r3, r3, #16
 8001a34:	0c00      	lsrs	r0, r0, #16
 8001a36:	197d      	adds	r5, r7, r5
 8001a38:	1818      	adds	r0, r3, r0
 8001a3a:	42a9      	cmp	r1, r5
 8001a3c:	d200      	bcs.n	8001a40 <__aeabi_ddiv+0x420>
 8001a3e:	e084      	b.n	8001b4a <__aeabi_ddiv+0x52a>
 8001a40:	d100      	bne.n	8001a44 <__aeabi_ddiv+0x424>
 8001a42:	e07f      	b.n	8001b44 <__aeabi_ddiv+0x524>
 8001a44:	2301      	movs	r3, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	e657      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	464a      	mov	r2, r9
 8001a4e:	031b      	lsls	r3, r3, #12
 8001a50:	4313      	orrs	r3, r2
 8001a52:	031b      	lsls	r3, r3, #12
 8001a54:	0b1b      	lsrs	r3, r3, #12
 8001a56:	46aa      	mov	sl, r5
 8001a58:	4a6f      	ldr	r2, [pc, #444]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001a5a:	e66f      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001a5c:	42ba      	cmp	r2, r7
 8001a5e:	d900      	bls.n	8001a62 <__aeabi_ddiv+0x442>
 8001a60:	e735      	b.n	80018ce <__aeabi_ddiv+0x2ae>
 8001a62:	464b      	mov	r3, r9
 8001a64:	07dc      	lsls	r4, r3, #31
 8001a66:	0858      	lsrs	r0, r3, #1
 8001a68:	087b      	lsrs	r3, r7, #1
 8001a6a:	431c      	orrs	r4, r3
 8001a6c:	07ff      	lsls	r7, r7, #31
 8001a6e:	e734      	b.n	80018da <__aeabi_ddiv+0x2ba>
 8001a70:	2400      	movs	r4, #0
 8001a72:	42af      	cmp	r7, r5
 8001a74:	d289      	bcs.n	800198a <__aeabi_ddiv+0x36a>
 8001a76:	4447      	add	r7, r8
 8001a78:	4547      	cmp	r7, r8
 8001a7a:	41a4      	sbcs	r4, r4
 8001a7c:	465b      	mov	r3, fp
 8001a7e:	4264      	negs	r4, r4
 8001a80:	19a4      	adds	r4, r4, r6
 8001a82:	1864      	adds	r4, r4, r1
 8001a84:	3b01      	subs	r3, #1
 8001a86:	42a6      	cmp	r6, r4
 8001a88:	d21e      	bcs.n	8001ac8 <__aeabi_ddiv+0x4a8>
 8001a8a:	42a0      	cmp	r0, r4
 8001a8c:	d86d      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001a8e:	d100      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001a90:	e0b6      	b.n	8001c00 <__aeabi_ddiv+0x5e0>
 8001a92:	1a24      	subs	r4, r4, r0
 8001a94:	469b      	mov	fp, r3
 8001a96:	e778      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	465a      	mov	r2, fp
 8001a9c:	3b28      	subs	r3, #40	; 0x28
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	2700      	movs	r7, #0
 8001aa2:	4691      	mov	r9, r2
 8001aa4:	e688      	b.n	80017b8 <__aeabi_ddiv+0x198>
 8001aa6:	4658      	mov	r0, fp
 8001aa8:	f001 f912 	bl	8002cd0 <__clzsi2>
 8001aac:	3020      	adds	r0, #32
 8001aae:	e672      	b.n	8001796 <__aeabi_ddiv+0x176>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3b28      	subs	r3, #40	; 0x28
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	4693      	mov	fp, r2
 8001aba:	2200      	movs	r2, #0
 8001abc:	e6b4      	b.n	8001828 <__aeabi_ddiv+0x208>
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f001 f906 	bl	8002cd0 <__clzsi2>
 8001ac4:	3020      	adds	r0, #32
 8001ac6:	e69a      	b.n	80017fe <__aeabi_ddiv+0x1de>
 8001ac8:	42a6      	cmp	r6, r4
 8001aca:	d1e2      	bne.n	8001a92 <__aeabi_ddiv+0x472>
 8001acc:	45b8      	cmp	r8, r7
 8001ace:	d9dc      	bls.n	8001a8a <__aeabi_ddiv+0x46a>
 8001ad0:	1a34      	subs	r4, r6, r0
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	e759      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001ad6:	2b1f      	cmp	r3, #31
 8001ad8:	dc65      	bgt.n	8001ba6 <__aeabi_ddiv+0x586>
 8001ada:	4c50      	ldr	r4, [pc, #320]	; (8001c1c <__aeabi_ddiv+0x5fc>)
 8001adc:	9900      	ldr	r1, [sp, #0]
 8001ade:	46a4      	mov	ip, r4
 8001ae0:	465c      	mov	r4, fp
 8001ae2:	4461      	add	r1, ip
 8001ae4:	0008      	movs	r0, r1
 8001ae6:	408c      	lsls	r4, r1
 8001ae8:	0011      	movs	r1, r2
 8001aea:	4082      	lsls	r2, r0
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	1e50      	subs	r0, r2, #1
 8001af0:	4182      	sbcs	r2, r0
 8001af2:	430c      	orrs	r4, r1
 8001af4:	4314      	orrs	r4, r2
 8001af6:	465a      	mov	r2, fp
 8001af8:	40da      	lsrs	r2, r3
 8001afa:	0013      	movs	r3, r2
 8001afc:	0762      	lsls	r2, r4, #29
 8001afe:	d009      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b00:	220f      	movs	r2, #15
 8001b02:	4022      	ands	r2, r4
 8001b04:	2a04      	cmp	r2, #4
 8001b06:	d005      	beq.n	8001b14 <__aeabi_ddiv+0x4f4>
 8001b08:	0022      	movs	r2, r4
 8001b0a:	1d14      	adds	r4, r2, #4
 8001b0c:	4294      	cmp	r4, r2
 8001b0e:	4189      	sbcs	r1, r1
 8001b10:	4249      	negs	r1, r1
 8001b12:	185b      	adds	r3, r3, r1
 8001b14:	021a      	lsls	r2, r3, #8
 8001b16:	d562      	bpl.n	8001bde <__aeabi_ddiv+0x5be>
 8001b18:	2201      	movs	r2, #1
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2700      	movs	r7, #0
 8001b1e:	e60d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001b20:	428a      	cmp	r2, r1
 8001b22:	d800      	bhi.n	8001b26 <__aeabi_ddiv+0x506>
 8001b24:	e70a      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b26:	1e83      	subs	r3, r0, #2
 8001b28:	1989      	adds	r1, r1, r6
 8001b2a:	e707      	b.n	800193c <__aeabi_ddiv+0x31c>
 8001b2c:	230f      	movs	r3, #15
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x516>
 8001b34:	e5e6      	b.n	8001704 <__aeabi_ddiv+0xe4>
 8001b36:	1d17      	adds	r7, r2, #4
 8001b38:	4297      	cmp	r7, r2
 8001b3a:	4192      	sbcs	r2, r2
 8001b3c:	4253      	negs	r3, r2
 8001b3e:	449b      	add	fp, r3
 8001b40:	08fa      	lsrs	r2, r7, #3
 8001b42:	e5e0      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b44:	2800      	cmp	r0, #0
 8001b46:	d100      	bne.n	8001b4a <__aeabi_ddiv+0x52a>
 8001b48:	e5d7      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001b4a:	1871      	adds	r1, r6, r1
 8001b4c:	1e53      	subs	r3, r2, #1
 8001b4e:	42b1      	cmp	r1, r6
 8001b50:	d327      	bcc.n	8001ba2 <__aeabi_ddiv+0x582>
 8001b52:	42a9      	cmp	r1, r5
 8001b54:	d315      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001b56:	d058      	beq.n	8001c0a <__aeabi_ddiv+0x5ea>
 8001b58:	001a      	movs	r2, r3
 8001b5a:	e773      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_ddiv+0x542>
 8001b60:	e604      	b.n	800176c <__aeabi_ddiv+0x14c>
 8001b62:	2301      	movs	r3, #1
 8001b64:	2200      	movs	r2, #0
 8001b66:	449b      	add	fp, r3
 8001b68:	e5cd      	b.n	8001706 <__aeabi_ddiv+0xe6>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	4447      	add	r7, r8
 8001b6e:	4547      	cmp	r7, r8
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	425b      	negs	r3, r3
 8001b74:	469c      	mov	ip, r3
 8001b76:	4249      	negs	r1, r1
 8001b78:	1989      	adds	r1, r1, r6
 8001b7a:	190c      	adds	r4, r1, r4
 8001b7c:	44e3      	add	fp, ip
 8001b7e:	1a24      	subs	r4, r4, r0
 8001b80:	e703      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001b82:	4643      	mov	r3, r8
 8001b84:	005f      	lsls	r7, r3, #1
 8001b86:	4547      	cmp	r7, r8
 8001b88:	419b      	sbcs	r3, r3
 8001b8a:	46b8      	mov	r8, r7
 8001b8c:	425b      	negs	r3, r3
 8001b8e:	199e      	adds	r6, r3, r6
 8001b90:	3a02      	subs	r2, #2
 8001b92:	1989      	adds	r1, r1, r6
 8001b94:	42a9      	cmp	r1, r5
 8001b96:	d000      	beq.n	8001b9a <__aeabi_ddiv+0x57a>
 8001b98:	e754      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001b9a:	4540      	cmp	r0, r8
 8001b9c:	d000      	beq.n	8001ba0 <__aeabi_ddiv+0x580>
 8001b9e:	e751      	b.n	8001a44 <__aeabi_ddiv+0x424>
 8001ba0:	e5ab      	b.n	80016fa <__aeabi_ddiv+0xda>
 8001ba2:	001a      	movs	r2, r3
 8001ba4:	e7f6      	b.n	8001b94 <__aeabi_ddiv+0x574>
 8001ba6:	211f      	movs	r1, #31
 8001ba8:	465f      	mov	r7, fp
 8001baa:	4249      	negs	r1, r1
 8001bac:	1b0c      	subs	r4, r1, r4
 8001bae:	40e7      	lsrs	r7, r4
 8001bb0:	2b20      	cmp	r3, #32
 8001bb2:	d007      	beq.n	8001bc4 <__aeabi_ddiv+0x5a4>
 8001bb4:	491a      	ldr	r1, [pc, #104]	; (8001c20 <__aeabi_ddiv+0x600>)
 8001bb6:	9b00      	ldr	r3, [sp, #0]
 8001bb8:	468c      	mov	ip, r1
 8001bba:	4463      	add	r3, ip
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	465b      	mov	r3, fp
 8001bc0:	4083      	lsls	r3, r0
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	1e50      	subs	r0, r2, #1
 8001bc6:	4182      	sbcs	r2, r0
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	2707      	movs	r7, #7
 8001bcc:	2300      	movs	r3, #0
 8001bce:	4017      	ands	r7, r2
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_ddiv+0x5c6>
 8001bd2:	210f      	movs	r1, #15
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4011      	ands	r1, r2
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2904      	cmp	r1, #4
 8001bdc:	d195      	bne.n	8001b0a <__aeabi_ddiv+0x4ea>
 8001bde:	0022      	movs	r2, r4
 8001be0:	075f      	lsls	r7, r3, #29
 8001be2:	025b      	lsls	r3, r3, #9
 8001be4:	0b1b      	lsrs	r3, r3, #12
 8001be6:	08d2      	lsrs	r2, r2, #3
 8001be8:	4317      	orrs	r7, r2
 8001bea:	2200      	movs	r2, #0
 8001bec:	e5a6      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001bee:	2380      	movs	r3, #128	; 0x80
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	031b      	lsls	r3, r3, #12
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	031b      	lsls	r3, r3, #12
 8001bf8:	0017      	movs	r7, r2
 8001bfa:	0b1b      	lsrs	r3, r3, #12
 8001bfc:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <__aeabi_ddiv+0x5f8>)
 8001bfe:	e59d      	b.n	800173c <__aeabi_ddiv+0x11c>
 8001c00:	42bd      	cmp	r5, r7
 8001c02:	d8b2      	bhi.n	8001b6a <__aeabi_ddiv+0x54a>
 8001c04:	469b      	mov	fp, r3
 8001c06:	2400      	movs	r4, #0
 8001c08:	e6bf      	b.n	800198a <__aeabi_ddiv+0x36a>
 8001c0a:	4580      	cmp	r8, r0
 8001c0c:	d3b9      	bcc.n	8001b82 <__aeabi_ddiv+0x562>
 8001c0e:	001a      	movs	r2, r3
 8001c10:	e7c3      	b.n	8001b9a <__aeabi_ddiv+0x57a>
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	000003ff 	.word	0x000003ff
 8001c18:	000007ff 	.word	0x000007ff
 8001c1c:	0000041e 	.word	0x0000041e
 8001c20:	0000043e 	.word	0x0000043e

08001c24 <__eqdf2>:
 8001c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c26:	464f      	mov	r7, r9
 8001c28:	4646      	mov	r6, r8
 8001c2a:	46d6      	mov	lr, sl
 8001c2c:	4684      	mov	ip, r0
 8001c2e:	b5c0      	push	{r6, r7, lr}
 8001c30:	4680      	mov	r8, r0
 8001c32:	4e19      	ldr	r6, [pc, #100]	; (8001c98 <__eqdf2+0x74>)
 8001c34:	0318      	lsls	r0, r3, #12
 8001c36:	030f      	lsls	r7, r1, #12
 8001c38:	004d      	lsls	r5, r1, #1
 8001c3a:	0b00      	lsrs	r0, r0, #12
 8001c3c:	005c      	lsls	r4, r3, #1
 8001c3e:	4682      	mov	sl, r0
 8001c40:	0b3f      	lsrs	r7, r7, #12
 8001c42:	0d6d      	lsrs	r5, r5, #21
 8001c44:	0fc9      	lsrs	r1, r1, #31
 8001c46:	4691      	mov	r9, r2
 8001c48:	0d64      	lsrs	r4, r4, #21
 8001c4a:	0fdb      	lsrs	r3, r3, #31
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	42b5      	cmp	r5, r6
 8001c50:	d00a      	beq.n	8001c68 <__eqdf2+0x44>
 8001c52:	42b4      	cmp	r4, r6
 8001c54:	d003      	beq.n	8001c5e <__eqdf2+0x3a>
 8001c56:	42a5      	cmp	r5, r4
 8001c58:	d101      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c5a:	4557      	cmp	r7, sl
 8001c5c:	d00c      	beq.n	8001c78 <__eqdf2+0x54>
 8001c5e:	bc1c      	pop	{r2, r3, r4}
 8001c60:	4690      	mov	r8, r2
 8001c62:	4699      	mov	r9, r3
 8001c64:	46a2      	mov	sl, r4
 8001c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c68:	4666      	mov	r6, ip
 8001c6a:	433e      	orrs	r6, r7
 8001c6c:	d1f7      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c6e:	42ac      	cmp	r4, r5
 8001c70:	d1f5      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c72:	4654      	mov	r4, sl
 8001c74:	4314      	orrs	r4, r2
 8001c76:	d1f2      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c78:	2001      	movs	r0, #1
 8001c7a:	45c8      	cmp	r8, r9
 8001c7c:	d1ef      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c7e:	4299      	cmp	r1, r3
 8001c80:	d007      	beq.n	8001c92 <__eqdf2+0x6e>
 8001c82:	2d00      	cmp	r5, #0
 8001c84:	d1eb      	bne.n	8001c5e <__eqdf2+0x3a>
 8001c86:	4663      	mov	r3, ip
 8001c88:	431f      	orrs	r7, r3
 8001c8a:	0038      	movs	r0, r7
 8001c8c:	1e47      	subs	r7, r0, #1
 8001c8e:	41b8      	sbcs	r0, r7
 8001c90:	e7e5      	b.n	8001c5e <__eqdf2+0x3a>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e7e3      	b.n	8001c5e <__eqdf2+0x3a>
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	000007ff 	.word	0x000007ff

08001c9c <__gedf2>:
 8001c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c9e:	464f      	mov	r7, r9
 8001ca0:	4646      	mov	r6, r8
 8001ca2:	46d6      	mov	lr, sl
 8001ca4:	004d      	lsls	r5, r1, #1
 8001ca6:	b5c0      	push	{r6, r7, lr}
 8001ca8:	030e      	lsls	r6, r1, #12
 8001caa:	0fc9      	lsrs	r1, r1, #31
 8001cac:	468a      	mov	sl, r1
 8001cae:	492c      	ldr	r1, [pc, #176]	; (8001d60 <__gedf2+0xc4>)
 8001cb0:	031f      	lsls	r7, r3, #12
 8001cb2:	005c      	lsls	r4, r3, #1
 8001cb4:	4680      	mov	r8, r0
 8001cb6:	0b36      	lsrs	r6, r6, #12
 8001cb8:	0d6d      	lsrs	r5, r5, #21
 8001cba:	4691      	mov	r9, r2
 8001cbc:	0b3f      	lsrs	r7, r7, #12
 8001cbe:	0d64      	lsrs	r4, r4, #21
 8001cc0:	0fdb      	lsrs	r3, r3, #31
 8001cc2:	428d      	cmp	r5, r1
 8001cc4:	d01e      	beq.n	8001d04 <__gedf2+0x68>
 8001cc6:	428c      	cmp	r4, r1
 8001cc8:	d016      	beq.n	8001cf8 <__gedf2+0x5c>
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d11e      	bne.n	8001d0c <__gedf2+0x70>
 8001cce:	4330      	orrs	r0, r6
 8001cd0:	4684      	mov	ip, r0
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d101      	bne.n	8001cda <__gedf2+0x3e>
 8001cd6:	433a      	orrs	r2, r7
 8001cd8:	d023      	beq.n	8001d22 <__gedf2+0x86>
 8001cda:	4662      	mov	r2, ip
 8001cdc:	2a00      	cmp	r2, #0
 8001cde:	d01a      	beq.n	8001d16 <__gedf2+0x7a>
 8001ce0:	459a      	cmp	sl, r3
 8001ce2:	d029      	beq.n	8001d38 <__gedf2+0x9c>
 8001ce4:	4651      	mov	r1, sl
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	3901      	subs	r1, #1
 8001cea:	4008      	ands	r0, r1
 8001cec:	3801      	subs	r0, #1
 8001cee:	bc1c      	pop	{r2, r3, r4}
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4699      	mov	r9, r3
 8001cf4:	46a2      	mov	sl, r4
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cf8:	0039      	movs	r1, r7
 8001cfa:	4311      	orrs	r1, r2
 8001cfc:	d0e5      	beq.n	8001cca <__gedf2+0x2e>
 8001cfe:	2002      	movs	r0, #2
 8001d00:	4240      	negs	r0, r0
 8001d02:	e7f4      	b.n	8001cee <__gedf2+0x52>
 8001d04:	4330      	orrs	r0, r6
 8001d06:	d1fa      	bne.n	8001cfe <__gedf2+0x62>
 8001d08:	42ac      	cmp	r4, r5
 8001d0a:	d00f      	beq.n	8001d2c <__gedf2+0x90>
 8001d0c:	2c00      	cmp	r4, #0
 8001d0e:	d10f      	bne.n	8001d30 <__gedf2+0x94>
 8001d10:	433a      	orrs	r2, r7
 8001d12:	d0e7      	beq.n	8001ce4 <__gedf2+0x48>
 8001d14:	e00c      	b.n	8001d30 <__gedf2+0x94>
 8001d16:	2201      	movs	r2, #1
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4393      	bics	r3, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	3001      	adds	r0, #1
 8001d20:	e7e5      	b.n	8001cee <__gedf2+0x52>
 8001d22:	4663      	mov	r3, ip
 8001d24:	2000      	movs	r0, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0e1      	beq.n	8001cee <__gedf2+0x52>
 8001d2a:	e7db      	b.n	8001ce4 <__gedf2+0x48>
 8001d2c:	433a      	orrs	r2, r7
 8001d2e:	d1e6      	bne.n	8001cfe <__gedf2+0x62>
 8001d30:	459a      	cmp	sl, r3
 8001d32:	d1d7      	bne.n	8001ce4 <__gedf2+0x48>
 8001d34:	42a5      	cmp	r5, r4
 8001d36:	dcd5      	bgt.n	8001ce4 <__gedf2+0x48>
 8001d38:	42a5      	cmp	r5, r4
 8001d3a:	db05      	blt.n	8001d48 <__gedf2+0xac>
 8001d3c:	42be      	cmp	r6, r7
 8001d3e:	d8d1      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d40:	d008      	beq.n	8001d54 <__gedf2+0xb8>
 8001d42:	2000      	movs	r0, #0
 8001d44:	42be      	cmp	r6, r7
 8001d46:	d2d2      	bcs.n	8001cee <__gedf2+0x52>
 8001d48:	4650      	mov	r0, sl
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	4398      	bics	r0, r3
 8001d50:	3001      	adds	r0, #1
 8001d52:	e7cc      	b.n	8001cee <__gedf2+0x52>
 8001d54:	45c8      	cmp	r8, r9
 8001d56:	d8c5      	bhi.n	8001ce4 <__gedf2+0x48>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	45c8      	cmp	r8, r9
 8001d5c:	d3f4      	bcc.n	8001d48 <__gedf2+0xac>
 8001d5e:	e7c6      	b.n	8001cee <__gedf2+0x52>
 8001d60:	000007ff 	.word	0x000007ff

08001d64 <__ledf2>:
 8001d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d66:	464f      	mov	r7, r9
 8001d68:	4646      	mov	r6, r8
 8001d6a:	46d6      	mov	lr, sl
 8001d6c:	004d      	lsls	r5, r1, #1
 8001d6e:	b5c0      	push	{r6, r7, lr}
 8001d70:	030e      	lsls	r6, r1, #12
 8001d72:	0fc9      	lsrs	r1, r1, #31
 8001d74:	468a      	mov	sl, r1
 8001d76:	492e      	ldr	r1, [pc, #184]	; (8001e30 <__ledf2+0xcc>)
 8001d78:	031f      	lsls	r7, r3, #12
 8001d7a:	005c      	lsls	r4, r3, #1
 8001d7c:	4680      	mov	r8, r0
 8001d7e:	0b36      	lsrs	r6, r6, #12
 8001d80:	0d6d      	lsrs	r5, r5, #21
 8001d82:	4691      	mov	r9, r2
 8001d84:	0b3f      	lsrs	r7, r7, #12
 8001d86:	0d64      	lsrs	r4, r4, #21
 8001d88:	0fdb      	lsrs	r3, r3, #31
 8001d8a:	428d      	cmp	r5, r1
 8001d8c:	d018      	beq.n	8001dc0 <__ledf2+0x5c>
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	d011      	beq.n	8001db6 <__ledf2+0x52>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d118      	bne.n	8001dc8 <__ledf2+0x64>
 8001d96:	4330      	orrs	r0, r6
 8001d98:	4684      	mov	ip, r0
 8001d9a:	2c00      	cmp	r4, #0
 8001d9c:	d11e      	bne.n	8001ddc <__ledf2+0x78>
 8001d9e:	433a      	orrs	r2, r7
 8001da0:	d11c      	bne.n	8001ddc <__ledf2+0x78>
 8001da2:	4663      	mov	r3, ip
 8001da4:	2000      	movs	r0, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d030      	beq.n	8001e0c <__ledf2+0xa8>
 8001daa:	4651      	mov	r1, sl
 8001dac:	2002      	movs	r0, #2
 8001dae:	3901      	subs	r1, #1
 8001db0:	4008      	ands	r0, r1
 8001db2:	3801      	subs	r0, #1
 8001db4:	e02a      	b.n	8001e0c <__ledf2+0xa8>
 8001db6:	0039      	movs	r1, r7
 8001db8:	4311      	orrs	r1, r2
 8001dba:	d0ea      	beq.n	8001d92 <__ledf2+0x2e>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	e025      	b.n	8001e0c <__ledf2+0xa8>
 8001dc0:	4330      	orrs	r0, r6
 8001dc2:	d1fb      	bne.n	8001dbc <__ledf2+0x58>
 8001dc4:	42ac      	cmp	r4, r5
 8001dc6:	d026      	beq.n	8001e16 <__ledf2+0xb2>
 8001dc8:	2c00      	cmp	r4, #0
 8001dca:	d126      	bne.n	8001e1a <__ledf2+0xb6>
 8001dcc:	433a      	orrs	r2, r7
 8001dce:	d124      	bne.n	8001e1a <__ledf2+0xb6>
 8001dd0:	4651      	mov	r1, sl
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	3901      	subs	r1, #1
 8001dd6:	4008      	ands	r0, r1
 8001dd8:	3801      	subs	r0, #1
 8001dda:	e017      	b.n	8001e0c <__ledf2+0xa8>
 8001ddc:	4662      	mov	r2, ip
 8001dde:	2a00      	cmp	r2, #0
 8001de0:	d00f      	beq.n	8001e02 <__ledf2+0x9e>
 8001de2:	459a      	cmp	sl, r3
 8001de4:	d1e1      	bne.n	8001daa <__ledf2+0x46>
 8001de6:	42a5      	cmp	r5, r4
 8001de8:	db05      	blt.n	8001df6 <__ledf2+0x92>
 8001dea:	42be      	cmp	r6, r7
 8001dec:	d8dd      	bhi.n	8001daa <__ledf2+0x46>
 8001dee:	d019      	beq.n	8001e24 <__ledf2+0xc0>
 8001df0:	2000      	movs	r0, #0
 8001df2:	42be      	cmp	r6, r7
 8001df4:	d20a      	bcs.n	8001e0c <__ledf2+0xa8>
 8001df6:	4650      	mov	r0, sl
 8001df8:	2301      	movs	r3, #1
 8001dfa:	3801      	subs	r0, #1
 8001dfc:	4398      	bics	r0, r3
 8001dfe:	3001      	adds	r0, #1
 8001e00:	e004      	b.n	8001e0c <__ledf2+0xa8>
 8001e02:	2201      	movs	r2, #1
 8001e04:	3b01      	subs	r3, #1
 8001e06:	4393      	bics	r3, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	3001      	adds	r0, #1
 8001e0c:	bc1c      	pop	{r2, r3, r4}
 8001e0e:	4690      	mov	r8, r2
 8001e10:	4699      	mov	r9, r3
 8001e12:	46a2      	mov	sl, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	433a      	orrs	r2, r7
 8001e18:	d1d0      	bne.n	8001dbc <__ledf2+0x58>
 8001e1a:	459a      	cmp	sl, r3
 8001e1c:	d1c5      	bne.n	8001daa <__ledf2+0x46>
 8001e1e:	42a5      	cmp	r5, r4
 8001e20:	dcc3      	bgt.n	8001daa <__ledf2+0x46>
 8001e22:	e7e0      	b.n	8001de6 <__ledf2+0x82>
 8001e24:	45c8      	cmp	r8, r9
 8001e26:	d8c0      	bhi.n	8001daa <__ledf2+0x46>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	45c8      	cmp	r8, r9
 8001e2c:	d3e3      	bcc.n	8001df6 <__ledf2+0x92>
 8001e2e:	e7ed      	b.n	8001e0c <__ledf2+0xa8>
 8001e30:	000007ff 	.word	0x000007ff

08001e34 <__aeabi_dmul>:
 8001e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	464e      	mov	r6, r9
 8001e3c:	4645      	mov	r5, r8
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	4683      	mov	fp, r0
 8001e42:	0006      	movs	r6, r0
 8001e44:	030f      	lsls	r7, r1, #12
 8001e46:	0048      	lsls	r0, r1, #1
 8001e48:	b087      	sub	sp, #28
 8001e4a:	4692      	mov	sl, r2
 8001e4c:	001d      	movs	r5, r3
 8001e4e:	0b3f      	lsrs	r7, r7, #12
 8001e50:	0d40      	lsrs	r0, r0, #21
 8001e52:	0fcc      	lsrs	r4, r1, #31
 8001e54:	2800      	cmp	r0, #0
 8001e56:	d100      	bne.n	8001e5a <__aeabi_dmul+0x26>
 8001e58:	e06f      	b.n	8001f3a <__aeabi_dmul+0x106>
 8001e5a:	4bde      	ldr	r3, [pc, #888]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e5c:	4298      	cmp	r0, r3
 8001e5e:	d038      	beq.n	8001ed2 <__aeabi_dmul+0x9e>
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00ff      	lsls	r7, r7, #3
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	431f      	orrs	r7, r3
 8001e68:	0f73      	lsrs	r3, r6, #29
 8001e6a:	433b      	orrs	r3, r7
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4bda      	ldr	r3, [pc, #872]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001e70:	2700      	movs	r7, #0
 8001e72:	4699      	mov	r9, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	469b      	mov	fp, r3
 8001e78:	00f6      	lsls	r6, r6, #3
 8001e7a:	4481      	add	r9, r0
 8001e7c:	032b      	lsls	r3, r5, #12
 8001e7e:	0069      	lsls	r1, r5, #1
 8001e80:	0b1b      	lsrs	r3, r3, #12
 8001e82:	4652      	mov	r2, sl
 8001e84:	4698      	mov	r8, r3
 8001e86:	0d49      	lsrs	r1, r1, #21
 8001e88:	0fed      	lsrs	r5, r5, #31
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x5c>
 8001e8e:	e085      	b.n	8001f9c <__aeabi_dmul+0x168>
 8001e90:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001e92:	4299      	cmp	r1, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x64>
 8001e96:	e073      	b.n	8001f80 <__aeabi_dmul+0x14c>
 8001e98:	4643      	mov	r3, r8
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	041b      	lsls	r3, r3, #16
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4652      	mov	r2, sl
 8001ea4:	48cc      	ldr	r0, [pc, #816]	; (80021d8 <__aeabi_dmul+0x3a4>)
 8001ea6:	0f52      	lsrs	r2, r2, #29
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	4652      	mov	r2, sl
 8001eae:	2000      	movs	r0, #0
 8001eb0:	4461      	add	r1, ip
 8001eb2:	00d2      	lsls	r2, r2, #3
 8001eb4:	4489      	add	r9, r1
 8001eb6:	0021      	movs	r1, r4
 8001eb8:	4069      	eors	r1, r5
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	468c      	mov	ip, r1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4449      	add	r1, r9
 8001ec2:	468a      	mov	sl, r1
 8001ec4:	2f0f      	cmp	r7, #15
 8001ec6:	d900      	bls.n	8001eca <__aeabi_dmul+0x96>
 8001ec8:	e090      	b.n	8001fec <__aeabi_dmul+0x1b8>
 8001eca:	49c4      	ldr	r1, [pc, #784]	; (80021dc <__aeabi_dmul+0x3a8>)
 8001ecc:	00bf      	lsls	r7, r7, #2
 8001ece:	59cf      	ldr	r7, [r1, r7]
 8001ed0:	46bf      	mov	pc, r7
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	433b      	orrs	r3, r7
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	d000      	beq.n	8001edc <__aeabi_dmul+0xa8>
 8001eda:	e16a      	b.n	80021b2 <__aeabi_dmul+0x37e>
 8001edc:	2302      	movs	r3, #2
 8001ede:	2708      	movs	r7, #8
 8001ee0:	2600      	movs	r6, #0
 8001ee2:	4681      	mov	r9, r0
 8001ee4:	469b      	mov	fp, r3
 8001ee6:	e7c9      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001ee8:	0032      	movs	r2, r6
 8001eea:	4658      	mov	r0, fp
 8001eec:	9b01      	ldr	r3, [sp, #4]
 8001eee:	4661      	mov	r1, ip
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_dmul+0xc4>
 8001ef6:	e075      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8001ef8:	2803      	cmp	r0, #3
 8001efa:	d100      	bne.n	8001efe <__aeabi_dmul+0xca>
 8001efc:	e1fe      	b.n	80022fc <__aeabi_dmul+0x4c8>
 8001efe:	2801      	cmp	r0, #1
 8001f00:	d000      	beq.n	8001f04 <__aeabi_dmul+0xd0>
 8001f02:	e12c      	b.n	800215e <__aeabi_dmul+0x32a>
 8001f04:	2300      	movs	r3, #0
 8001f06:	2700      	movs	r7, #0
 8001f08:	2600      	movs	r6, #0
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	033f      	lsls	r7, r7, #12
 8001f0e:	0d2a      	lsrs	r2, r5, #20
 8001f10:	0b3f      	lsrs	r7, r7, #12
 8001f12:	48b3      	ldr	r0, [pc, #716]	; (80021e0 <__aeabi_dmul+0x3ac>)
 8001f14:	0512      	lsls	r2, r2, #20
 8001f16:	433a      	orrs	r2, r7
 8001f18:	4002      	ands	r2, r0
 8001f1a:	051b      	lsls	r3, r3, #20
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	9a00      	ldr	r2, [sp, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	07d1      	lsls	r1, r2, #31
 8001f24:	085b      	lsrs	r3, r3, #1
 8001f26:	430b      	orrs	r3, r1
 8001f28:	0030      	movs	r0, r6
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	b007      	add	sp, #28
 8001f2e:	bc3c      	pop	{r2, r3, r4, r5}
 8001f30:	4690      	mov	r8, r2
 8001f32:	4699      	mov	r9, r3
 8001f34:	46a2      	mov	sl, r4
 8001f36:	46ab      	mov	fp, r5
 8001f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f3a:	465b      	mov	r3, fp
 8001f3c:	433b      	orrs	r3, r7
 8001f3e:	9301      	str	r3, [sp, #4]
 8001f40:	d100      	bne.n	8001f44 <__aeabi_dmul+0x110>
 8001f42:	e12f      	b.n	80021a4 <__aeabi_dmul+0x370>
 8001f44:	2f00      	cmp	r7, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_dmul+0x116>
 8001f48:	e1a5      	b.n	8002296 <__aeabi_dmul+0x462>
 8001f4a:	0038      	movs	r0, r7
 8001f4c:	f000 fec0 	bl	8002cd0 <__clzsi2>
 8001f50:	0003      	movs	r3, r0
 8001f52:	3b0b      	subs	r3, #11
 8001f54:	2b1c      	cmp	r3, #28
 8001f56:	dd00      	ble.n	8001f5a <__aeabi_dmul+0x126>
 8001f58:	e196      	b.n	8002288 <__aeabi_dmul+0x454>
 8001f5a:	221d      	movs	r2, #29
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	465a      	mov	r2, fp
 8001f60:	0001      	movs	r1, r0
 8001f62:	40da      	lsrs	r2, r3
 8001f64:	465e      	mov	r6, fp
 8001f66:	3908      	subs	r1, #8
 8001f68:	408f      	lsls	r7, r1
 8001f6a:	0013      	movs	r3, r2
 8001f6c:	408e      	lsls	r6, r1
 8001f6e:	433b      	orrs	r3, r7
 8001f70:	9301      	str	r3, [sp, #4]
 8001f72:	4b9c      	ldr	r3, [pc, #624]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001f74:	2700      	movs	r7, #0
 8001f76:	1a1b      	subs	r3, r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	469b      	mov	fp, r3
 8001f7e:	e77d      	b.n	8001e7c <__aeabi_dmul+0x48>
 8001f80:	4641      	mov	r1, r8
 8001f82:	4653      	mov	r3, sl
 8001f84:	430b      	orrs	r3, r1
 8001f86:	4993      	ldr	r1, [pc, #588]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001f88:	468c      	mov	ip, r1
 8001f8a:	44e1      	add	r9, ip
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d000      	beq.n	8001f92 <__aeabi_dmul+0x15e>
 8001f90:	e11a      	b.n	80021c8 <__aeabi_dmul+0x394>
 8001f92:	2202      	movs	r2, #2
 8001f94:	2002      	movs	r0, #2
 8001f96:	4317      	orrs	r7, r2
 8001f98:	2200      	movs	r2, #0
 8001f9a:	e78c      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <__aeabi_dmul+0x16e>
 8001fa0:	e10d      	b.n	80021be <__aeabi_dmul+0x38a>
 8001fa2:	4643      	mov	r3, r8
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d100      	bne.n	8001faa <__aeabi_dmul+0x176>
 8001fa8:	e181      	b.n	80022ae <__aeabi_dmul+0x47a>
 8001faa:	4640      	mov	r0, r8
 8001fac:	f000 fe90 	bl	8002cd0 <__clzsi2>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	3a0b      	subs	r2, #11
 8001fb4:	2a1c      	cmp	r2, #28
 8001fb6:	dd00      	ble.n	8001fba <__aeabi_dmul+0x186>
 8001fb8:	e172      	b.n	80022a0 <__aeabi_dmul+0x46c>
 8001fba:	0001      	movs	r1, r0
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	3908      	subs	r1, #8
 8001fc0:	408b      	lsls	r3, r1
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	231d      	movs	r3, #29
 8001fc6:	1a9a      	subs	r2, r3, r2
 8001fc8:	4653      	mov	r3, sl
 8001fca:	40d3      	lsrs	r3, r2
 8001fcc:	001a      	movs	r2, r3
 8001fce:	4643      	mov	r3, r8
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	4652      	mov	r2, sl
 8001fd4:	408a      	lsls	r2, r1
 8001fd6:	4649      	mov	r1, r9
 8001fd8:	1a08      	subs	r0, r1, r0
 8001fda:	4982      	ldr	r1, [pc, #520]	; (80021e4 <__aeabi_dmul+0x3b0>)
 8001fdc:	4689      	mov	r9, r1
 8001fde:	4481      	add	r9, r0
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	e768      	b.n	8001eb6 <__aeabi_dmul+0x82>
 8001fe4:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <__aeabi_dmul+0x3a0>)
 8001fe6:	2700      	movs	r7, #0
 8001fe8:	2600      	movs	r6, #0
 8001fea:	e78e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8001fec:	0c14      	lsrs	r4, r2, #16
 8001fee:	0412      	lsls	r2, r2, #16
 8001ff0:	0c12      	lsrs	r2, r2, #16
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0c37      	lsrs	r7, r6, #16
 8001ff6:	0436      	lsls	r6, r6, #16
 8001ff8:	0c35      	lsrs	r5, r6, #16
 8001ffa:	4379      	muls	r1, r7
 8001ffc:	0028      	movs	r0, r5
 8001ffe:	468c      	mov	ip, r1
 8002000:	002e      	movs	r6, r5
 8002002:	4360      	muls	r0, r4
 8002004:	4460      	add	r0, ip
 8002006:	4683      	mov	fp, r0
 8002008:	4356      	muls	r6, r2
 800200a:	0021      	movs	r1, r4
 800200c:	0c30      	lsrs	r0, r6, #16
 800200e:	4680      	mov	r8, r0
 8002010:	4658      	mov	r0, fp
 8002012:	4379      	muls	r1, r7
 8002014:	4440      	add	r0, r8
 8002016:	9102      	str	r1, [sp, #8]
 8002018:	4584      	cmp	ip, r0
 800201a:	d906      	bls.n	800202a <__aeabi_dmul+0x1f6>
 800201c:	4688      	mov	r8, r1
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	468c      	mov	ip, r1
 8002024:	44e0      	add	r8, ip
 8002026:	4641      	mov	r1, r8
 8002028:	9102      	str	r1, [sp, #8]
 800202a:	0436      	lsls	r6, r6, #16
 800202c:	0c01      	lsrs	r1, r0, #16
 800202e:	0c36      	lsrs	r6, r6, #16
 8002030:	0400      	lsls	r0, r0, #16
 8002032:	468b      	mov	fp, r1
 8002034:	1981      	adds	r1, r0, r6
 8002036:	0c1e      	lsrs	r6, r3, #16
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	9103      	str	r1, [sp, #12]
 800203e:	0019      	movs	r1, r3
 8002040:	4379      	muls	r1, r7
 8002042:	468c      	mov	ip, r1
 8002044:	0028      	movs	r0, r5
 8002046:	4375      	muls	r5, r6
 8002048:	4465      	add	r5, ip
 800204a:	46a8      	mov	r8, r5
 800204c:	4358      	muls	r0, r3
 800204e:	0c05      	lsrs	r5, r0, #16
 8002050:	4445      	add	r5, r8
 8002052:	4377      	muls	r7, r6
 8002054:	42a9      	cmp	r1, r5
 8002056:	d903      	bls.n	8002060 <__aeabi_dmul+0x22c>
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	0249      	lsls	r1, r1, #9
 800205c:	468c      	mov	ip, r1
 800205e:	4467      	add	r7, ip
 8002060:	0c29      	lsrs	r1, r5, #16
 8002062:	468c      	mov	ip, r1
 8002064:	0039      	movs	r1, r7
 8002066:	0400      	lsls	r0, r0, #16
 8002068:	0c00      	lsrs	r0, r0, #16
 800206a:	042d      	lsls	r5, r5, #16
 800206c:	182d      	adds	r5, r5, r0
 800206e:	4461      	add	r1, ip
 8002070:	44ab      	add	fp, r5
 8002072:	9105      	str	r1, [sp, #20]
 8002074:	4659      	mov	r1, fp
 8002076:	9104      	str	r1, [sp, #16]
 8002078:	9901      	ldr	r1, [sp, #4]
 800207a:	040f      	lsls	r7, r1, #16
 800207c:	0c3f      	lsrs	r7, r7, #16
 800207e:	0c08      	lsrs	r0, r1, #16
 8002080:	0039      	movs	r1, r7
 8002082:	4351      	muls	r1, r2
 8002084:	4342      	muls	r2, r0
 8002086:	4690      	mov	r8, r2
 8002088:	0002      	movs	r2, r0
 800208a:	468c      	mov	ip, r1
 800208c:	0c09      	lsrs	r1, r1, #16
 800208e:	468b      	mov	fp, r1
 8002090:	4362      	muls	r2, r4
 8002092:	437c      	muls	r4, r7
 8002094:	4444      	add	r4, r8
 8002096:	445c      	add	r4, fp
 8002098:	45a0      	cmp	r8, r4
 800209a:	d903      	bls.n	80020a4 <__aeabi_dmul+0x270>
 800209c:	2180      	movs	r1, #128	; 0x80
 800209e:	0249      	lsls	r1, r1, #9
 80020a0:	4688      	mov	r8, r1
 80020a2:	4442      	add	r2, r8
 80020a4:	0c21      	lsrs	r1, r4, #16
 80020a6:	4688      	mov	r8, r1
 80020a8:	4661      	mov	r1, ip
 80020aa:	0409      	lsls	r1, r1, #16
 80020ac:	0c09      	lsrs	r1, r1, #16
 80020ae:	468c      	mov	ip, r1
 80020b0:	0039      	movs	r1, r7
 80020b2:	4359      	muls	r1, r3
 80020b4:	4343      	muls	r3, r0
 80020b6:	4370      	muls	r0, r6
 80020b8:	437e      	muls	r6, r7
 80020ba:	0c0f      	lsrs	r7, r1, #16
 80020bc:	18f6      	adds	r6, r6, r3
 80020be:	0424      	lsls	r4, r4, #16
 80020c0:	19be      	adds	r6, r7, r6
 80020c2:	4464      	add	r4, ip
 80020c4:	4442      	add	r2, r8
 80020c6:	468c      	mov	ip, r1
 80020c8:	42b3      	cmp	r3, r6
 80020ca:	d903      	bls.n	80020d4 <__aeabi_dmul+0x2a0>
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	025b      	lsls	r3, r3, #9
 80020d0:	4698      	mov	r8, r3
 80020d2:	4440      	add	r0, r8
 80020d4:	9b02      	ldr	r3, [sp, #8]
 80020d6:	4661      	mov	r1, ip
 80020d8:	4698      	mov	r8, r3
 80020da:	9b04      	ldr	r3, [sp, #16]
 80020dc:	0437      	lsls	r7, r6, #16
 80020de:	4443      	add	r3, r8
 80020e0:	469b      	mov	fp, r3
 80020e2:	45ab      	cmp	fp, r5
 80020e4:	41ad      	sbcs	r5, r5
 80020e6:	426b      	negs	r3, r5
 80020e8:	040d      	lsls	r5, r1, #16
 80020ea:	9905      	ldr	r1, [sp, #20]
 80020ec:	0c2d      	lsrs	r5, r5, #16
 80020ee:	468c      	mov	ip, r1
 80020f0:	197f      	adds	r7, r7, r5
 80020f2:	4467      	add	r7, ip
 80020f4:	18fd      	adds	r5, r7, r3
 80020f6:	46a8      	mov	r8, r5
 80020f8:	465d      	mov	r5, fp
 80020fa:	192d      	adds	r5, r5, r4
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	41a4      	sbcs	r4, r4
 8002100:	4693      	mov	fp, r2
 8002102:	4264      	negs	r4, r4
 8002104:	46a4      	mov	ip, r4
 8002106:	44c3      	add	fp, r8
 8002108:	44dc      	add	ip, fp
 800210a:	428f      	cmp	r7, r1
 800210c:	41bf      	sbcs	r7, r7
 800210e:	4598      	cmp	r8, r3
 8002110:	419b      	sbcs	r3, r3
 8002112:	4593      	cmp	fp, r2
 8002114:	4192      	sbcs	r2, r2
 8002116:	45a4      	cmp	ip, r4
 8002118:	41a4      	sbcs	r4, r4
 800211a:	425b      	negs	r3, r3
 800211c:	427f      	negs	r7, r7
 800211e:	431f      	orrs	r7, r3
 8002120:	0c36      	lsrs	r6, r6, #16
 8002122:	4252      	negs	r2, r2
 8002124:	4264      	negs	r4, r4
 8002126:	19bf      	adds	r7, r7, r6
 8002128:	4322      	orrs	r2, r4
 800212a:	18bf      	adds	r7, r7, r2
 800212c:	4662      	mov	r2, ip
 800212e:	1838      	adds	r0, r7, r0
 8002130:	0243      	lsls	r3, r0, #9
 8002132:	0dd2      	lsrs	r2, r2, #23
 8002134:	9903      	ldr	r1, [sp, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	026a      	lsls	r2, r5, #9
 800213a:	430a      	orrs	r2, r1
 800213c:	1e50      	subs	r0, r2, #1
 800213e:	4182      	sbcs	r2, r0
 8002140:	4661      	mov	r1, ip
 8002142:	0ded      	lsrs	r5, r5, #23
 8002144:	432a      	orrs	r2, r5
 8002146:	024e      	lsls	r6, r1, #9
 8002148:	4332      	orrs	r2, r6
 800214a:	01d9      	lsls	r1, r3, #7
 800214c:	d400      	bmi.n	8002150 <__aeabi_dmul+0x31c>
 800214e:	e0b3      	b.n	80022b8 <__aeabi_dmul+0x484>
 8002150:	2601      	movs	r6, #1
 8002152:	0850      	lsrs	r0, r2, #1
 8002154:	4032      	ands	r2, r6
 8002156:	4302      	orrs	r2, r0
 8002158:	07de      	lsls	r6, r3, #31
 800215a:	4332      	orrs	r2, r6
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	4c22      	ldr	r4, [pc, #136]	; (80021e8 <__aeabi_dmul+0x3b4>)
 8002160:	4454      	add	r4, sl
 8002162:	2c00      	cmp	r4, #0
 8002164:	dd62      	ble.n	800222c <__aeabi_dmul+0x3f8>
 8002166:	0751      	lsls	r1, r2, #29
 8002168:	d009      	beq.n	800217e <__aeabi_dmul+0x34a>
 800216a:	200f      	movs	r0, #15
 800216c:	4010      	ands	r0, r2
 800216e:	2804      	cmp	r0, #4
 8002170:	d005      	beq.n	800217e <__aeabi_dmul+0x34a>
 8002172:	1d10      	adds	r0, r2, #4
 8002174:	4290      	cmp	r0, r2
 8002176:	4192      	sbcs	r2, r2
 8002178:	4252      	negs	r2, r2
 800217a:	189b      	adds	r3, r3, r2
 800217c:	0002      	movs	r2, r0
 800217e:	01d9      	lsls	r1, r3, #7
 8002180:	d504      	bpl.n	800218c <__aeabi_dmul+0x358>
 8002182:	2480      	movs	r4, #128	; 0x80
 8002184:	4819      	ldr	r0, [pc, #100]	; (80021ec <__aeabi_dmul+0x3b8>)
 8002186:	00e4      	lsls	r4, r4, #3
 8002188:	4003      	ands	r3, r0
 800218a:	4454      	add	r4, sl
 800218c:	4818      	ldr	r0, [pc, #96]	; (80021f0 <__aeabi_dmul+0x3bc>)
 800218e:	4284      	cmp	r4, r0
 8002190:	dd00      	ble.n	8002194 <__aeabi_dmul+0x360>
 8002192:	e727      	b.n	8001fe4 <__aeabi_dmul+0x1b0>
 8002194:	075e      	lsls	r6, r3, #29
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	08d2      	lsrs	r2, r2, #3
 800219a:	0b1f      	lsrs	r7, r3, #12
 800219c:	0563      	lsls	r3, r4, #21
 800219e:	4316      	orrs	r6, r2
 80021a0:	0d5b      	lsrs	r3, r3, #21
 80021a2:	e6b2      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	2704      	movs	r7, #4
 80021ac:	2600      	movs	r6, #0
 80021ae:	469b      	mov	fp, r3
 80021b0:	e664      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021b2:	2303      	movs	r3, #3
 80021b4:	9701      	str	r7, [sp, #4]
 80021b6:	4681      	mov	r9, r0
 80021b8:	270c      	movs	r7, #12
 80021ba:	469b      	mov	fp, r3
 80021bc:	e65e      	b.n	8001e7c <__aeabi_dmul+0x48>
 80021be:	2201      	movs	r2, #1
 80021c0:	2001      	movs	r0, #1
 80021c2:	4317      	orrs	r7, r2
 80021c4:	2200      	movs	r2, #0
 80021c6:	e676      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021c8:	2303      	movs	r3, #3
 80021ca:	2003      	movs	r0, #3
 80021cc:	431f      	orrs	r7, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	e671      	b.n	8001eb6 <__aeabi_dmul+0x82>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	000007ff 	.word	0x000007ff
 80021d8:	fffffc01 	.word	0xfffffc01
 80021dc:	080192c4 	.word	0x080192c4
 80021e0:	800fffff 	.word	0x800fffff
 80021e4:	fffffc0d 	.word	0xfffffc0d
 80021e8:	000003ff 	.word	0x000003ff
 80021ec:	feffffff 	.word	0xfeffffff
 80021f0:	000007fe 	.word	0x000007fe
 80021f4:	2300      	movs	r3, #0
 80021f6:	2780      	movs	r7, #128	; 0x80
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033f      	lsls	r7, r7, #12
 80021fc:	2600      	movs	r6, #0
 80021fe:	4b43      	ldr	r3, [pc, #268]	; (800230c <__aeabi_dmul+0x4d8>)
 8002200:	e683      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	0032      	movs	r2, r6
 8002206:	46a4      	mov	ip, r4
 8002208:	4658      	mov	r0, fp
 800220a:	e670      	b.n	8001eee <__aeabi_dmul+0xba>
 800220c:	46ac      	mov	ip, r5
 800220e:	e66e      	b.n	8001eee <__aeabi_dmul+0xba>
 8002210:	2780      	movs	r7, #128	; 0x80
 8002212:	9901      	ldr	r1, [sp, #4]
 8002214:	033f      	lsls	r7, r7, #12
 8002216:	4239      	tst	r1, r7
 8002218:	d02d      	beq.n	8002276 <__aeabi_dmul+0x442>
 800221a:	423b      	tst	r3, r7
 800221c:	d12b      	bne.n	8002276 <__aeabi_dmul+0x442>
 800221e:	431f      	orrs	r7, r3
 8002220:	033f      	lsls	r7, r7, #12
 8002222:	0b3f      	lsrs	r7, r7, #12
 8002224:	9500      	str	r5, [sp, #0]
 8002226:	0016      	movs	r6, r2
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <__aeabi_dmul+0x4d8>)
 800222a:	e66e      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800222c:	2501      	movs	r5, #1
 800222e:	1b2d      	subs	r5, r5, r4
 8002230:	2d38      	cmp	r5, #56	; 0x38
 8002232:	dd00      	ble.n	8002236 <__aeabi_dmul+0x402>
 8002234:	e666      	b.n	8001f04 <__aeabi_dmul+0xd0>
 8002236:	2d1f      	cmp	r5, #31
 8002238:	dc40      	bgt.n	80022bc <__aeabi_dmul+0x488>
 800223a:	4835      	ldr	r0, [pc, #212]	; (8002310 <__aeabi_dmul+0x4dc>)
 800223c:	001c      	movs	r4, r3
 800223e:	4450      	add	r0, sl
 8002240:	0016      	movs	r6, r2
 8002242:	4082      	lsls	r2, r0
 8002244:	4084      	lsls	r4, r0
 8002246:	40ee      	lsrs	r6, r5
 8002248:	1e50      	subs	r0, r2, #1
 800224a:	4182      	sbcs	r2, r0
 800224c:	4334      	orrs	r4, r6
 800224e:	4314      	orrs	r4, r2
 8002250:	40eb      	lsrs	r3, r5
 8002252:	0762      	lsls	r2, r4, #29
 8002254:	d009      	beq.n	800226a <__aeabi_dmul+0x436>
 8002256:	220f      	movs	r2, #15
 8002258:	4022      	ands	r2, r4
 800225a:	2a04      	cmp	r2, #4
 800225c:	d005      	beq.n	800226a <__aeabi_dmul+0x436>
 800225e:	0022      	movs	r2, r4
 8002260:	1d14      	adds	r4, r2, #4
 8002262:	4294      	cmp	r4, r2
 8002264:	4180      	sbcs	r0, r0
 8002266:	4240      	negs	r0, r0
 8002268:	181b      	adds	r3, r3, r0
 800226a:	021a      	lsls	r2, r3, #8
 800226c:	d53e      	bpl.n	80022ec <__aeabi_dmul+0x4b8>
 800226e:	2301      	movs	r3, #1
 8002270:	2700      	movs	r7, #0
 8002272:	2600      	movs	r6, #0
 8002274:	e649      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002276:	2780      	movs	r7, #128	; 0x80
 8002278:	9b01      	ldr	r3, [sp, #4]
 800227a:	033f      	lsls	r7, r7, #12
 800227c:	431f      	orrs	r7, r3
 800227e:	033f      	lsls	r7, r7, #12
 8002280:	0b3f      	lsrs	r7, r7, #12
 8002282:	9400      	str	r4, [sp, #0]
 8002284:	4b21      	ldr	r3, [pc, #132]	; (800230c <__aeabi_dmul+0x4d8>)
 8002286:	e640      	b.n	8001f0a <__aeabi_dmul+0xd6>
 8002288:	0003      	movs	r3, r0
 800228a:	465a      	mov	r2, fp
 800228c:	3b28      	subs	r3, #40	; 0x28
 800228e:	409a      	lsls	r2, r3
 8002290:	2600      	movs	r6, #0
 8002292:	9201      	str	r2, [sp, #4]
 8002294:	e66d      	b.n	8001f72 <__aeabi_dmul+0x13e>
 8002296:	4658      	mov	r0, fp
 8002298:	f000 fd1a 	bl	8002cd0 <__clzsi2>
 800229c:	3020      	adds	r0, #32
 800229e:	e657      	b.n	8001f50 <__aeabi_dmul+0x11c>
 80022a0:	0003      	movs	r3, r0
 80022a2:	4652      	mov	r2, sl
 80022a4:	3b28      	subs	r3, #40	; 0x28
 80022a6:	409a      	lsls	r2, r3
 80022a8:	0013      	movs	r3, r2
 80022aa:	2200      	movs	r2, #0
 80022ac:	e693      	b.n	8001fd6 <__aeabi_dmul+0x1a2>
 80022ae:	4650      	mov	r0, sl
 80022b0:	f000 fd0e 	bl	8002cd0 <__clzsi2>
 80022b4:	3020      	adds	r0, #32
 80022b6:	e67b      	b.n	8001fb0 <__aeabi_dmul+0x17c>
 80022b8:	46ca      	mov	sl, r9
 80022ba:	e750      	b.n	800215e <__aeabi_dmul+0x32a>
 80022bc:	201f      	movs	r0, #31
 80022be:	001e      	movs	r6, r3
 80022c0:	4240      	negs	r0, r0
 80022c2:	1b04      	subs	r4, r0, r4
 80022c4:	40e6      	lsrs	r6, r4
 80022c6:	2d20      	cmp	r5, #32
 80022c8:	d003      	beq.n	80022d2 <__aeabi_dmul+0x49e>
 80022ca:	4c12      	ldr	r4, [pc, #72]	; (8002314 <__aeabi_dmul+0x4e0>)
 80022cc:	4454      	add	r4, sl
 80022ce:	40a3      	lsls	r3, r4
 80022d0:	431a      	orrs	r2, r3
 80022d2:	1e50      	subs	r0, r2, #1
 80022d4:	4182      	sbcs	r2, r0
 80022d6:	4332      	orrs	r2, r6
 80022d8:	2607      	movs	r6, #7
 80022da:	2700      	movs	r7, #0
 80022dc:	4016      	ands	r6, r2
 80022de:	d009      	beq.n	80022f4 <__aeabi_dmul+0x4c0>
 80022e0:	200f      	movs	r0, #15
 80022e2:	2300      	movs	r3, #0
 80022e4:	4010      	ands	r0, r2
 80022e6:	0014      	movs	r4, r2
 80022e8:	2804      	cmp	r0, #4
 80022ea:	d1b9      	bne.n	8002260 <__aeabi_dmul+0x42c>
 80022ec:	0022      	movs	r2, r4
 80022ee:	075e      	lsls	r6, r3, #29
 80022f0:	025b      	lsls	r3, r3, #9
 80022f2:	0b1f      	lsrs	r7, r3, #12
 80022f4:	08d2      	lsrs	r2, r2, #3
 80022f6:	4316      	orrs	r6, r2
 80022f8:	2300      	movs	r3, #0
 80022fa:	e606      	b.n	8001f0a <__aeabi_dmul+0xd6>
 80022fc:	2780      	movs	r7, #128	; 0x80
 80022fe:	033f      	lsls	r7, r7, #12
 8002300:	431f      	orrs	r7, r3
 8002302:	033f      	lsls	r7, r7, #12
 8002304:	0b3f      	lsrs	r7, r7, #12
 8002306:	0016      	movs	r6, r2
 8002308:	4b00      	ldr	r3, [pc, #0]	; (800230c <__aeabi_dmul+0x4d8>)
 800230a:	e5fe      	b.n	8001f0a <__aeabi_dmul+0xd6>
 800230c:	000007ff 	.word	0x000007ff
 8002310:	0000041e 	.word	0x0000041e
 8002314:	0000043e 	.word	0x0000043e

08002318 <__aeabi_dsub>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	4657      	mov	r7, sl
 800231c:	464e      	mov	r6, r9
 800231e:	4645      	mov	r5, r8
 8002320:	46de      	mov	lr, fp
 8002322:	000c      	movs	r4, r1
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	0a49      	lsrs	r1, r1, #9
 800232a:	0f46      	lsrs	r6, r0, #29
 800232c:	005f      	lsls	r7, r3, #1
 800232e:	4331      	orrs	r1, r6
 8002330:	031e      	lsls	r6, r3, #12
 8002332:	0fdb      	lsrs	r3, r3, #31
 8002334:	0a76      	lsrs	r6, r6, #9
 8002336:	469b      	mov	fp, r3
 8002338:	0f53      	lsrs	r3, r2, #29
 800233a:	4333      	orrs	r3, r6
 800233c:	4ec8      	ldr	r6, [pc, #800]	; (8002660 <__aeabi_dsub+0x348>)
 800233e:	0065      	lsls	r5, r4, #1
 8002340:	00c0      	lsls	r0, r0, #3
 8002342:	0fe4      	lsrs	r4, r4, #31
 8002344:	00d2      	lsls	r2, r2, #3
 8002346:	0d6d      	lsrs	r5, r5, #21
 8002348:	46a2      	mov	sl, r4
 800234a:	4681      	mov	r9, r0
 800234c:	0d7f      	lsrs	r7, r7, #21
 800234e:	469c      	mov	ip, r3
 8002350:	4690      	mov	r8, r2
 8002352:	42b7      	cmp	r7, r6
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x40>
 8002356:	e0b9      	b.n	80024cc <__aeabi_dsub+0x1b4>
 8002358:	465b      	mov	r3, fp
 800235a:	2601      	movs	r6, #1
 800235c:	4073      	eors	r3, r6
 800235e:	469b      	mov	fp, r3
 8002360:	1bee      	subs	r6, r5, r7
 8002362:	45a3      	cmp	fp, r4
 8002364:	d100      	bne.n	8002368 <__aeabi_dsub+0x50>
 8002366:	e083      	b.n	8002470 <__aeabi_dsub+0x158>
 8002368:	2e00      	cmp	r6, #0
 800236a:	dd63      	ble.n	8002434 <__aeabi_dsub+0x11c>
 800236c:	2f00      	cmp	r7, #0
 800236e:	d000      	beq.n	8002372 <__aeabi_dsub+0x5a>
 8002370:	e0b1      	b.n	80024d6 <__aeabi_dsub+0x1be>
 8002372:	4663      	mov	r3, ip
 8002374:	4313      	orrs	r3, r2
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x62>
 8002378:	e123      	b.n	80025c2 <__aeabi_dsub+0x2aa>
 800237a:	1e73      	subs	r3, r6, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d000      	beq.n	8002382 <__aeabi_dsub+0x6a>
 8002380:	e1ba      	b.n	80026f8 <__aeabi_dsub+0x3e0>
 8002382:	1a86      	subs	r6, r0, r2
 8002384:	4663      	mov	r3, ip
 8002386:	42b0      	cmp	r0, r6
 8002388:	4180      	sbcs	r0, r0
 800238a:	2501      	movs	r5, #1
 800238c:	1ac9      	subs	r1, r1, r3
 800238e:	4240      	negs	r0, r0
 8002390:	1a09      	subs	r1, r1, r0
 8002392:	020b      	lsls	r3, r1, #8
 8002394:	d400      	bmi.n	8002398 <__aeabi_dsub+0x80>
 8002396:	e147      	b.n	8002628 <__aeabi_dsub+0x310>
 8002398:	0249      	lsls	r1, r1, #9
 800239a:	0a4b      	lsrs	r3, r1, #9
 800239c:	4698      	mov	r8, r3
 800239e:	4643      	mov	r3, r8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dsub+0x8e>
 80023a4:	e189      	b.n	80026ba <__aeabi_dsub+0x3a2>
 80023a6:	4640      	mov	r0, r8
 80023a8:	f000 fc92 	bl	8002cd0 <__clzsi2>
 80023ac:	0003      	movs	r3, r0
 80023ae:	3b08      	subs	r3, #8
 80023b0:	2b1f      	cmp	r3, #31
 80023b2:	dd00      	ble.n	80023b6 <__aeabi_dsub+0x9e>
 80023b4:	e17c      	b.n	80026b0 <__aeabi_dsub+0x398>
 80023b6:	2220      	movs	r2, #32
 80023b8:	0030      	movs	r0, r6
 80023ba:	1ad2      	subs	r2, r2, r3
 80023bc:	4641      	mov	r1, r8
 80023be:	40d0      	lsrs	r0, r2
 80023c0:	4099      	lsls	r1, r3
 80023c2:	0002      	movs	r2, r0
 80023c4:	409e      	lsls	r6, r3
 80023c6:	430a      	orrs	r2, r1
 80023c8:	429d      	cmp	r5, r3
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0xb6>
 80023cc:	e16a      	b.n	80026a4 <__aeabi_dsub+0x38c>
 80023ce:	1b5d      	subs	r5, r3, r5
 80023d0:	1c6b      	adds	r3, r5, #1
 80023d2:	2b1f      	cmp	r3, #31
 80023d4:	dd00      	ble.n	80023d8 <__aeabi_dsub+0xc0>
 80023d6:	e194      	b.n	8002702 <__aeabi_dsub+0x3ea>
 80023d8:	2120      	movs	r1, #32
 80023da:	0010      	movs	r0, r2
 80023dc:	0035      	movs	r5, r6
 80023de:	1ac9      	subs	r1, r1, r3
 80023e0:	408e      	lsls	r6, r1
 80023e2:	40da      	lsrs	r2, r3
 80023e4:	4088      	lsls	r0, r1
 80023e6:	40dd      	lsrs	r5, r3
 80023e8:	1e71      	subs	r1, r6, #1
 80023ea:	418e      	sbcs	r6, r1
 80023ec:	0011      	movs	r1, r2
 80023ee:	2207      	movs	r2, #7
 80023f0:	4328      	orrs	r0, r5
 80023f2:	2500      	movs	r5, #0
 80023f4:	4306      	orrs	r6, r0
 80023f6:	4032      	ands	r2, r6
 80023f8:	2a00      	cmp	r2, #0
 80023fa:	d009      	beq.n	8002410 <__aeabi_dsub+0xf8>
 80023fc:	230f      	movs	r3, #15
 80023fe:	4033      	ands	r3, r6
 8002400:	2b04      	cmp	r3, #4
 8002402:	d005      	beq.n	8002410 <__aeabi_dsub+0xf8>
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	42b3      	cmp	r3, r6
 8002408:	41b6      	sbcs	r6, r6
 800240a:	4276      	negs	r6, r6
 800240c:	1989      	adds	r1, r1, r6
 800240e:	001e      	movs	r6, r3
 8002410:	020b      	lsls	r3, r1, #8
 8002412:	d400      	bmi.n	8002416 <__aeabi_dsub+0xfe>
 8002414:	e23d      	b.n	8002892 <__aeabi_dsub+0x57a>
 8002416:	1c6a      	adds	r2, r5, #1
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <__aeabi_dsub+0x348>)
 800241a:	0555      	lsls	r5, r2, #21
 800241c:	0d6d      	lsrs	r5, r5, #21
 800241e:	429a      	cmp	r2, r3
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x10c>
 8002422:	e119      	b.n	8002658 <__aeabi_dsub+0x340>
 8002424:	4a8f      	ldr	r2, [pc, #572]	; (8002664 <__aeabi_dsub+0x34c>)
 8002426:	08f6      	lsrs	r6, r6, #3
 8002428:	400a      	ands	r2, r1
 800242a:	0757      	lsls	r7, r2, #29
 800242c:	0252      	lsls	r2, r2, #9
 800242e:	4337      	orrs	r7, r6
 8002430:	0b12      	lsrs	r2, r2, #12
 8002432:	e09b      	b.n	800256c <__aeabi_dsub+0x254>
 8002434:	2e00      	cmp	r6, #0
 8002436:	d000      	beq.n	800243a <__aeabi_dsub+0x122>
 8002438:	e0c5      	b.n	80025c6 <__aeabi_dsub+0x2ae>
 800243a:	1c6e      	adds	r6, r5, #1
 800243c:	0576      	lsls	r6, r6, #21
 800243e:	0d76      	lsrs	r6, r6, #21
 8002440:	2e01      	cmp	r6, #1
 8002442:	dc00      	bgt.n	8002446 <__aeabi_dsub+0x12e>
 8002444:	e148      	b.n	80026d8 <__aeabi_dsub+0x3c0>
 8002446:	4667      	mov	r7, ip
 8002448:	1a86      	subs	r6, r0, r2
 800244a:	1bcb      	subs	r3, r1, r7
 800244c:	42b0      	cmp	r0, r6
 800244e:	41bf      	sbcs	r7, r7
 8002450:	427f      	negs	r7, r7
 8002452:	46b8      	mov	r8, r7
 8002454:	001f      	movs	r7, r3
 8002456:	4643      	mov	r3, r8
 8002458:	1aff      	subs	r7, r7, r3
 800245a:	003b      	movs	r3, r7
 800245c:	46b8      	mov	r8, r7
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	d500      	bpl.n	8002464 <__aeabi_dsub+0x14c>
 8002462:	e15f      	b.n	8002724 <__aeabi_dsub+0x40c>
 8002464:	4337      	orrs	r7, r6
 8002466:	d19a      	bne.n	800239e <__aeabi_dsub+0x86>
 8002468:	2200      	movs	r2, #0
 800246a:	2400      	movs	r4, #0
 800246c:	2500      	movs	r5, #0
 800246e:	e079      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002470:	2e00      	cmp	r6, #0
 8002472:	dc00      	bgt.n	8002476 <__aeabi_dsub+0x15e>
 8002474:	e0fa      	b.n	800266c <__aeabi_dsub+0x354>
 8002476:	2f00      	cmp	r7, #0
 8002478:	d100      	bne.n	800247c <__aeabi_dsub+0x164>
 800247a:	e08d      	b.n	8002598 <__aeabi_dsub+0x280>
 800247c:	4b78      	ldr	r3, [pc, #480]	; (8002660 <__aeabi_dsub+0x348>)
 800247e:	429d      	cmp	r5, r3
 8002480:	d067      	beq.n	8002552 <__aeabi_dsub+0x23a>
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	4667      	mov	r7, ip
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431f      	orrs	r7, r3
 800248a:	46bc      	mov	ip, r7
 800248c:	2e38      	cmp	r6, #56	; 0x38
 800248e:	dc00      	bgt.n	8002492 <__aeabi_dsub+0x17a>
 8002490:	e152      	b.n	8002738 <__aeabi_dsub+0x420>
 8002492:	4663      	mov	r3, ip
 8002494:	4313      	orrs	r3, r2
 8002496:	1e5a      	subs	r2, r3, #1
 8002498:	4193      	sbcs	r3, r2
 800249a:	181e      	adds	r6, r3, r0
 800249c:	4286      	cmp	r6, r0
 800249e:	4180      	sbcs	r0, r0
 80024a0:	4240      	negs	r0, r0
 80024a2:	1809      	adds	r1, r1, r0
 80024a4:	020b      	lsls	r3, r1, #8
 80024a6:	d400      	bmi.n	80024aa <__aeabi_dsub+0x192>
 80024a8:	e0be      	b.n	8002628 <__aeabi_dsub+0x310>
 80024aa:	4b6d      	ldr	r3, [pc, #436]	; (8002660 <__aeabi_dsub+0x348>)
 80024ac:	3501      	adds	r5, #1
 80024ae:	429d      	cmp	r5, r3
 80024b0:	d100      	bne.n	80024b4 <__aeabi_dsub+0x19c>
 80024b2:	e0d2      	b.n	800265a <__aeabi_dsub+0x342>
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <__aeabi_dsub+0x34c>)
 80024b6:	0873      	lsrs	r3, r6, #1
 80024b8:	400a      	ands	r2, r1
 80024ba:	2101      	movs	r1, #1
 80024bc:	400e      	ands	r6, r1
 80024be:	431e      	orrs	r6, r3
 80024c0:	0851      	lsrs	r1, r2, #1
 80024c2:	07d3      	lsls	r3, r2, #31
 80024c4:	2207      	movs	r2, #7
 80024c6:	431e      	orrs	r6, r3
 80024c8:	4032      	ands	r2, r6
 80024ca:	e795      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80024cc:	001e      	movs	r6, r3
 80024ce:	4316      	orrs	r6, r2
 80024d0:	d000      	beq.n	80024d4 <__aeabi_dsub+0x1bc>
 80024d2:	e745      	b.n	8002360 <__aeabi_dsub+0x48>
 80024d4:	e740      	b.n	8002358 <__aeabi_dsub+0x40>
 80024d6:	4b62      	ldr	r3, [pc, #392]	; (8002660 <__aeabi_dsub+0x348>)
 80024d8:	429d      	cmp	r5, r3
 80024da:	d03a      	beq.n	8002552 <__aeabi_dsub+0x23a>
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	4667      	mov	r7, ip
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	431f      	orrs	r7, r3
 80024e4:	46bc      	mov	ip, r7
 80024e6:	2e38      	cmp	r6, #56	; 0x38
 80024e8:	dd00      	ble.n	80024ec <__aeabi_dsub+0x1d4>
 80024ea:	e0eb      	b.n	80026c4 <__aeabi_dsub+0x3ac>
 80024ec:	2e1f      	cmp	r6, #31
 80024ee:	dc00      	bgt.n	80024f2 <__aeabi_dsub+0x1da>
 80024f0:	e13a      	b.n	8002768 <__aeabi_dsub+0x450>
 80024f2:	0033      	movs	r3, r6
 80024f4:	4667      	mov	r7, ip
 80024f6:	3b20      	subs	r3, #32
 80024f8:	40df      	lsrs	r7, r3
 80024fa:	003b      	movs	r3, r7
 80024fc:	2e20      	cmp	r6, #32
 80024fe:	d005      	beq.n	800250c <__aeabi_dsub+0x1f4>
 8002500:	2740      	movs	r7, #64	; 0x40
 8002502:	1bbf      	subs	r7, r7, r6
 8002504:	4666      	mov	r6, ip
 8002506:	40be      	lsls	r6, r7
 8002508:	4332      	orrs	r2, r6
 800250a:	4690      	mov	r8, r2
 800250c:	4646      	mov	r6, r8
 800250e:	1e72      	subs	r2, r6, #1
 8002510:	4196      	sbcs	r6, r2
 8002512:	4333      	orrs	r3, r6
 8002514:	e0da      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002516:	2b00      	cmp	r3, #0
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x204>
 800251a:	e214      	b.n	8002946 <__aeabi_dsub+0x62e>
 800251c:	4663      	mov	r3, ip
 800251e:	4313      	orrs	r3, r2
 8002520:	d100      	bne.n	8002524 <__aeabi_dsub+0x20c>
 8002522:	e168      	b.n	80027f6 <__aeabi_dsub+0x4de>
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	074e      	lsls	r6, r1, #29
 8002528:	08c0      	lsrs	r0, r0, #3
 800252a:	08c9      	lsrs	r1, r1, #3
 800252c:	031b      	lsls	r3, r3, #12
 800252e:	4306      	orrs	r6, r0
 8002530:	4219      	tst	r1, r3
 8002532:	d008      	beq.n	8002546 <__aeabi_dsub+0x22e>
 8002534:	4660      	mov	r0, ip
 8002536:	08c0      	lsrs	r0, r0, #3
 8002538:	4218      	tst	r0, r3
 800253a:	d104      	bne.n	8002546 <__aeabi_dsub+0x22e>
 800253c:	4663      	mov	r3, ip
 800253e:	0001      	movs	r1, r0
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	075e      	lsls	r6, r3, #29
 8002544:	4316      	orrs	r6, r2
 8002546:	00f3      	lsls	r3, r6, #3
 8002548:	4699      	mov	r9, r3
 800254a:	00c9      	lsls	r1, r1, #3
 800254c:	0f72      	lsrs	r2, r6, #29
 800254e:	4d44      	ldr	r5, [pc, #272]	; (8002660 <__aeabi_dsub+0x348>)
 8002550:	4311      	orrs	r1, r2
 8002552:	464b      	mov	r3, r9
 8002554:	08de      	lsrs	r6, r3, #3
 8002556:	4b42      	ldr	r3, [pc, #264]	; (8002660 <__aeabi_dsub+0x348>)
 8002558:	074f      	lsls	r7, r1, #29
 800255a:	4337      	orrs	r7, r6
 800255c:	08ca      	lsrs	r2, r1, #3
 800255e:	429d      	cmp	r5, r3
 8002560:	d100      	bne.n	8002564 <__aeabi_dsub+0x24c>
 8002562:	e06e      	b.n	8002642 <__aeabi_dsub+0x32a>
 8002564:	0312      	lsls	r2, r2, #12
 8002566:	056d      	lsls	r5, r5, #21
 8002568:	0b12      	lsrs	r2, r2, #12
 800256a:	0d6d      	lsrs	r5, r5, #21
 800256c:	2100      	movs	r1, #0
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	0b13      	lsrs	r3, r2, #12
 8002572:	0d0a      	lsrs	r2, r1, #20
 8002574:	0512      	lsls	r2, r2, #20
 8002576:	431a      	orrs	r2, r3
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <__aeabi_dsub+0x350>)
 800257a:	052d      	lsls	r5, r5, #20
 800257c:	4013      	ands	r3, r2
 800257e:	432b      	orrs	r3, r5
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	07e4      	lsls	r4, r4, #31
 8002584:	085b      	lsrs	r3, r3, #1
 8002586:	4323      	orrs	r3, r4
 8002588:	0038      	movs	r0, r7
 800258a:	0019      	movs	r1, r3
 800258c:	bc3c      	pop	{r2, r3, r4, r5}
 800258e:	4690      	mov	r8, r2
 8002590:	4699      	mov	r9, r3
 8002592:	46a2      	mov	sl, r4
 8002594:	46ab      	mov	fp, r5
 8002596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002598:	4663      	mov	r3, ip
 800259a:	4313      	orrs	r3, r2
 800259c:	d011      	beq.n	80025c2 <__aeabi_dsub+0x2aa>
 800259e:	1e73      	subs	r3, r6, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d000      	beq.n	80025a6 <__aeabi_dsub+0x28e>
 80025a4:	e107      	b.n	80027b6 <__aeabi_dsub+0x49e>
 80025a6:	1886      	adds	r6, r0, r2
 80025a8:	4286      	cmp	r6, r0
 80025aa:	4180      	sbcs	r0, r0
 80025ac:	4461      	add	r1, ip
 80025ae:	4240      	negs	r0, r0
 80025b0:	1809      	adds	r1, r1, r0
 80025b2:	2501      	movs	r5, #1
 80025b4:	020b      	lsls	r3, r1, #8
 80025b6:	d537      	bpl.n	8002628 <__aeabi_dsub+0x310>
 80025b8:	2502      	movs	r5, #2
 80025ba:	e77b      	b.n	80024b4 <__aeabi_dsub+0x19c>
 80025bc:	003e      	movs	r6, r7
 80025be:	4661      	mov	r1, ip
 80025c0:	4691      	mov	r9, r2
 80025c2:	0035      	movs	r5, r6
 80025c4:	e7c5      	b.n	8002552 <__aeabi_dsub+0x23a>
 80025c6:	465c      	mov	r4, fp
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d000      	beq.n	80025ce <__aeabi_dsub+0x2b6>
 80025cc:	e0e1      	b.n	8002792 <__aeabi_dsub+0x47a>
 80025ce:	000b      	movs	r3, r1
 80025d0:	4303      	orrs	r3, r0
 80025d2:	d0f3      	beq.n	80025bc <__aeabi_dsub+0x2a4>
 80025d4:	1c73      	adds	r3, r6, #1
 80025d6:	d100      	bne.n	80025da <__aeabi_dsub+0x2c2>
 80025d8:	e1ac      	b.n	8002934 <__aeabi_dsub+0x61c>
 80025da:	4b21      	ldr	r3, [pc, #132]	; (8002660 <__aeabi_dsub+0x348>)
 80025dc:	429f      	cmp	r7, r3
 80025de:	d100      	bne.n	80025e2 <__aeabi_dsub+0x2ca>
 80025e0:	e13a      	b.n	8002858 <__aeabi_dsub+0x540>
 80025e2:	43f3      	mvns	r3, r6
 80025e4:	2b38      	cmp	r3, #56	; 0x38
 80025e6:	dd00      	ble.n	80025ea <__aeabi_dsub+0x2d2>
 80025e8:	e16f      	b.n	80028ca <__aeabi_dsub+0x5b2>
 80025ea:	2b1f      	cmp	r3, #31
 80025ec:	dd00      	ble.n	80025f0 <__aeabi_dsub+0x2d8>
 80025ee:	e18c      	b.n	800290a <__aeabi_dsub+0x5f2>
 80025f0:	2520      	movs	r5, #32
 80025f2:	000e      	movs	r6, r1
 80025f4:	1aed      	subs	r5, r5, r3
 80025f6:	40ae      	lsls	r6, r5
 80025f8:	46b0      	mov	r8, r6
 80025fa:	0006      	movs	r6, r0
 80025fc:	46aa      	mov	sl, r5
 80025fe:	40de      	lsrs	r6, r3
 8002600:	4645      	mov	r5, r8
 8002602:	4335      	orrs	r5, r6
 8002604:	002e      	movs	r6, r5
 8002606:	4655      	mov	r5, sl
 8002608:	40d9      	lsrs	r1, r3
 800260a:	40a8      	lsls	r0, r5
 800260c:	4663      	mov	r3, ip
 800260e:	1e45      	subs	r5, r0, #1
 8002610:	41a8      	sbcs	r0, r5
 8002612:	1a5b      	subs	r3, r3, r1
 8002614:	469c      	mov	ip, r3
 8002616:	4330      	orrs	r0, r6
 8002618:	1a16      	subs	r6, r2, r0
 800261a:	42b2      	cmp	r2, r6
 800261c:	4192      	sbcs	r2, r2
 800261e:	4663      	mov	r3, ip
 8002620:	4252      	negs	r2, r2
 8002622:	1a99      	subs	r1, r3, r2
 8002624:	003d      	movs	r5, r7
 8002626:	e6b4      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002628:	2207      	movs	r2, #7
 800262a:	4032      	ands	r2, r6
 800262c:	2a00      	cmp	r2, #0
 800262e:	d000      	beq.n	8002632 <__aeabi_dsub+0x31a>
 8002630:	e6e4      	b.n	80023fc <__aeabi_dsub+0xe4>
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <__aeabi_dsub+0x348>)
 8002634:	08f6      	lsrs	r6, r6, #3
 8002636:	074f      	lsls	r7, r1, #29
 8002638:	4337      	orrs	r7, r6
 800263a:	08ca      	lsrs	r2, r1, #3
 800263c:	429d      	cmp	r5, r3
 800263e:	d000      	beq.n	8002642 <__aeabi_dsub+0x32a>
 8002640:	e790      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002642:	003b      	movs	r3, r7
 8002644:	4313      	orrs	r3, r2
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x332>
 8002648:	e1a6      	b.n	8002998 <__aeabi_dsub+0x680>
 800264a:	2380      	movs	r3, #128	; 0x80
 800264c:	031b      	lsls	r3, r3, #12
 800264e:	431a      	orrs	r2, r3
 8002650:	0312      	lsls	r2, r2, #12
 8002652:	0b12      	lsrs	r2, r2, #12
 8002654:	4d02      	ldr	r5, [pc, #8]	; (8002660 <__aeabi_dsub+0x348>)
 8002656:	e789      	b.n	800256c <__aeabi_dsub+0x254>
 8002658:	0015      	movs	r5, r2
 800265a:	2200      	movs	r2, #0
 800265c:	2700      	movs	r7, #0
 800265e:	e785      	b.n	800256c <__aeabi_dsub+0x254>
 8002660:	000007ff 	.word	0x000007ff
 8002664:	ff7fffff 	.word	0xff7fffff
 8002668:	800fffff 	.word	0x800fffff
 800266c:	2e00      	cmp	r6, #0
 800266e:	d000      	beq.n	8002672 <__aeabi_dsub+0x35a>
 8002670:	e0c7      	b.n	8002802 <__aeabi_dsub+0x4ea>
 8002672:	1c6b      	adds	r3, r5, #1
 8002674:	055e      	lsls	r6, r3, #21
 8002676:	0d76      	lsrs	r6, r6, #21
 8002678:	2e01      	cmp	r6, #1
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x366>
 800267c:	e0f0      	b.n	8002860 <__aeabi_dsub+0x548>
 800267e:	4dc8      	ldr	r5, [pc, #800]	; (80029a0 <__aeabi_dsub+0x688>)
 8002680:	42ab      	cmp	r3, r5
 8002682:	d100      	bne.n	8002686 <__aeabi_dsub+0x36e>
 8002684:	e0b9      	b.n	80027fa <__aeabi_dsub+0x4e2>
 8002686:	1885      	adds	r5, r0, r2
 8002688:	000a      	movs	r2, r1
 800268a:	4285      	cmp	r5, r0
 800268c:	4189      	sbcs	r1, r1
 800268e:	4462      	add	r2, ip
 8002690:	4249      	negs	r1, r1
 8002692:	1851      	adds	r1, r2, r1
 8002694:	2207      	movs	r2, #7
 8002696:	07ce      	lsls	r6, r1, #31
 8002698:	086d      	lsrs	r5, r5, #1
 800269a:	432e      	orrs	r6, r5
 800269c:	0849      	lsrs	r1, r1, #1
 800269e:	4032      	ands	r2, r6
 80026a0:	001d      	movs	r5, r3
 80026a2:	e6a9      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026a4:	49bf      	ldr	r1, [pc, #764]	; (80029a4 <__aeabi_dsub+0x68c>)
 80026a6:	1aed      	subs	r5, r5, r3
 80026a8:	4011      	ands	r1, r2
 80026aa:	2207      	movs	r2, #7
 80026ac:	4032      	ands	r2, r6
 80026ae:	e6a3      	b.n	80023f8 <__aeabi_dsub+0xe0>
 80026b0:	0032      	movs	r2, r6
 80026b2:	3828      	subs	r0, #40	; 0x28
 80026b4:	4082      	lsls	r2, r0
 80026b6:	2600      	movs	r6, #0
 80026b8:	e686      	b.n	80023c8 <__aeabi_dsub+0xb0>
 80026ba:	0030      	movs	r0, r6
 80026bc:	f000 fb08 	bl	8002cd0 <__clzsi2>
 80026c0:	3020      	adds	r0, #32
 80026c2:	e673      	b.n	80023ac <__aeabi_dsub+0x94>
 80026c4:	4663      	mov	r3, ip
 80026c6:	4313      	orrs	r3, r2
 80026c8:	1e5a      	subs	r2, r3, #1
 80026ca:	4193      	sbcs	r3, r2
 80026cc:	1ac6      	subs	r6, r0, r3
 80026ce:	42b0      	cmp	r0, r6
 80026d0:	4180      	sbcs	r0, r0
 80026d2:	4240      	negs	r0, r0
 80026d4:	1a09      	subs	r1, r1, r0
 80026d6:	e65c      	b.n	8002392 <__aeabi_dsub+0x7a>
 80026d8:	000e      	movs	r6, r1
 80026da:	4667      	mov	r7, ip
 80026dc:	4306      	orrs	r6, r0
 80026de:	4317      	orrs	r7, r2
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d15e      	bne.n	80027a2 <__aeabi_dsub+0x48a>
 80026e4:	2e00      	cmp	r6, #0
 80026e6:	d000      	beq.n	80026ea <__aeabi_dsub+0x3d2>
 80026e8:	e0f3      	b.n	80028d2 <__aeabi_dsub+0x5ba>
 80026ea:	2f00      	cmp	r7, #0
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x3d8>
 80026ee:	e11e      	b.n	800292e <__aeabi_dsub+0x616>
 80026f0:	465c      	mov	r4, fp
 80026f2:	4661      	mov	r1, ip
 80026f4:	4691      	mov	r9, r2
 80026f6:	e72c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80026f8:	4fa9      	ldr	r7, [pc, #676]	; (80029a0 <__aeabi_dsub+0x688>)
 80026fa:	42be      	cmp	r6, r7
 80026fc:	d07b      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80026fe:	001e      	movs	r6, r3
 8002700:	e6f1      	b.n	80024e6 <__aeabi_dsub+0x1ce>
 8002702:	0010      	movs	r0, r2
 8002704:	3d1f      	subs	r5, #31
 8002706:	40e8      	lsrs	r0, r5
 8002708:	2b20      	cmp	r3, #32
 800270a:	d003      	beq.n	8002714 <__aeabi_dsub+0x3fc>
 800270c:	2140      	movs	r1, #64	; 0x40
 800270e:	1acb      	subs	r3, r1, r3
 8002710:	409a      	lsls	r2, r3
 8002712:	4316      	orrs	r6, r2
 8002714:	1e73      	subs	r3, r6, #1
 8002716:	419e      	sbcs	r6, r3
 8002718:	2207      	movs	r2, #7
 800271a:	4306      	orrs	r6, r0
 800271c:	4032      	ands	r2, r6
 800271e:	2100      	movs	r1, #0
 8002720:	2500      	movs	r5, #0
 8002722:	e783      	b.n	800262c <__aeabi_dsub+0x314>
 8002724:	1a16      	subs	r6, r2, r0
 8002726:	4663      	mov	r3, ip
 8002728:	42b2      	cmp	r2, r6
 800272a:	4180      	sbcs	r0, r0
 800272c:	1a59      	subs	r1, r3, r1
 800272e:	4240      	negs	r0, r0
 8002730:	1a0b      	subs	r3, r1, r0
 8002732:	4698      	mov	r8, r3
 8002734:	465c      	mov	r4, fp
 8002736:	e632      	b.n	800239e <__aeabi_dsub+0x86>
 8002738:	2e1f      	cmp	r6, #31
 800273a:	dd00      	ble.n	800273e <__aeabi_dsub+0x426>
 800273c:	e0ab      	b.n	8002896 <__aeabi_dsub+0x57e>
 800273e:	2720      	movs	r7, #32
 8002740:	1bbb      	subs	r3, r7, r6
 8002742:	469a      	mov	sl, r3
 8002744:	4663      	mov	r3, ip
 8002746:	4657      	mov	r7, sl
 8002748:	40bb      	lsls	r3, r7
 800274a:	4699      	mov	r9, r3
 800274c:	0013      	movs	r3, r2
 800274e:	464f      	mov	r7, r9
 8002750:	40f3      	lsrs	r3, r6
 8002752:	431f      	orrs	r7, r3
 8002754:	003b      	movs	r3, r7
 8002756:	4657      	mov	r7, sl
 8002758:	40ba      	lsls	r2, r7
 800275a:	1e57      	subs	r7, r2, #1
 800275c:	41ba      	sbcs	r2, r7
 800275e:	4313      	orrs	r3, r2
 8002760:	4662      	mov	r2, ip
 8002762:	40f2      	lsrs	r2, r6
 8002764:	1889      	adds	r1, r1, r2
 8002766:	e698      	b.n	800249a <__aeabi_dsub+0x182>
 8002768:	2720      	movs	r7, #32
 800276a:	1bbb      	subs	r3, r7, r6
 800276c:	469a      	mov	sl, r3
 800276e:	4663      	mov	r3, ip
 8002770:	4657      	mov	r7, sl
 8002772:	40bb      	lsls	r3, r7
 8002774:	4699      	mov	r9, r3
 8002776:	0013      	movs	r3, r2
 8002778:	464f      	mov	r7, r9
 800277a:	40f3      	lsrs	r3, r6
 800277c:	431f      	orrs	r7, r3
 800277e:	003b      	movs	r3, r7
 8002780:	4657      	mov	r7, sl
 8002782:	40ba      	lsls	r2, r7
 8002784:	1e57      	subs	r7, r2, #1
 8002786:	41ba      	sbcs	r2, r7
 8002788:	4313      	orrs	r3, r2
 800278a:	4662      	mov	r2, ip
 800278c:	40f2      	lsrs	r2, r6
 800278e:	1a89      	subs	r1, r1, r2
 8002790:	e79c      	b.n	80026cc <__aeabi_dsub+0x3b4>
 8002792:	4b83      	ldr	r3, [pc, #524]	; (80029a0 <__aeabi_dsub+0x688>)
 8002794:	429f      	cmp	r7, r3
 8002796:	d05f      	beq.n	8002858 <__aeabi_dsub+0x540>
 8002798:	2580      	movs	r5, #128	; 0x80
 800279a:	042d      	lsls	r5, r5, #16
 800279c:	4273      	negs	r3, r6
 800279e:	4329      	orrs	r1, r5
 80027a0:	e720      	b.n	80025e4 <__aeabi_dsub+0x2cc>
 80027a2:	2e00      	cmp	r6, #0
 80027a4:	d10c      	bne.n	80027c0 <__aeabi_dsub+0x4a8>
 80027a6:	2f00      	cmp	r7, #0
 80027a8:	d100      	bne.n	80027ac <__aeabi_dsub+0x494>
 80027aa:	e0d0      	b.n	800294e <__aeabi_dsub+0x636>
 80027ac:	465c      	mov	r4, fp
 80027ae:	4661      	mov	r1, ip
 80027b0:	4691      	mov	r9, r2
 80027b2:	4d7b      	ldr	r5, [pc, #492]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b4:	e6cd      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027b6:	4f7a      	ldr	r7, [pc, #488]	; (80029a0 <__aeabi_dsub+0x688>)
 80027b8:	42be      	cmp	r6, r7
 80027ba:	d01c      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027bc:	001e      	movs	r6, r3
 80027be:	e665      	b.n	800248c <__aeabi_dsub+0x174>
 80027c0:	2f00      	cmp	r7, #0
 80027c2:	d018      	beq.n	80027f6 <__aeabi_dsub+0x4de>
 80027c4:	08c0      	lsrs	r0, r0, #3
 80027c6:	074e      	lsls	r6, r1, #29
 80027c8:	4306      	orrs	r6, r0
 80027ca:	2080      	movs	r0, #128	; 0x80
 80027cc:	08c9      	lsrs	r1, r1, #3
 80027ce:	0300      	lsls	r0, r0, #12
 80027d0:	4201      	tst	r1, r0
 80027d2:	d008      	beq.n	80027e6 <__aeabi_dsub+0x4ce>
 80027d4:	4663      	mov	r3, ip
 80027d6:	08dc      	lsrs	r4, r3, #3
 80027d8:	4204      	tst	r4, r0
 80027da:	d104      	bne.n	80027e6 <__aeabi_dsub+0x4ce>
 80027dc:	0021      	movs	r1, r4
 80027de:	46da      	mov	sl, fp
 80027e0:	08d2      	lsrs	r2, r2, #3
 80027e2:	075e      	lsls	r6, r3, #29
 80027e4:	4316      	orrs	r6, r2
 80027e6:	00f3      	lsls	r3, r6, #3
 80027e8:	4699      	mov	r9, r3
 80027ea:	2401      	movs	r4, #1
 80027ec:	4653      	mov	r3, sl
 80027ee:	00c9      	lsls	r1, r1, #3
 80027f0:	0f72      	lsrs	r2, r6, #29
 80027f2:	4311      	orrs	r1, r2
 80027f4:	401c      	ands	r4, r3
 80027f6:	4d6a      	ldr	r5, [pc, #424]	; (80029a0 <__aeabi_dsub+0x688>)
 80027f8:	e6ab      	b.n	8002552 <__aeabi_dsub+0x23a>
 80027fa:	001d      	movs	r5, r3
 80027fc:	2200      	movs	r2, #0
 80027fe:	2700      	movs	r7, #0
 8002800:	e6b4      	b.n	800256c <__aeabi_dsub+0x254>
 8002802:	2d00      	cmp	r5, #0
 8002804:	d159      	bne.n	80028ba <__aeabi_dsub+0x5a2>
 8002806:	000b      	movs	r3, r1
 8002808:	4303      	orrs	r3, r0
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x4f6>
 800280c:	e6d6      	b.n	80025bc <__aeabi_dsub+0x2a4>
 800280e:	1c73      	adds	r3, r6, #1
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x4fc>
 8002812:	e0b2      	b.n	800297a <__aeabi_dsub+0x662>
 8002814:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <__aeabi_dsub+0x688>)
 8002816:	429f      	cmp	r7, r3
 8002818:	d01e      	beq.n	8002858 <__aeabi_dsub+0x540>
 800281a:	43f3      	mvns	r3, r6
 800281c:	2b38      	cmp	r3, #56	; 0x38
 800281e:	dc6f      	bgt.n	8002900 <__aeabi_dsub+0x5e8>
 8002820:	2b1f      	cmp	r3, #31
 8002822:	dd00      	ble.n	8002826 <__aeabi_dsub+0x50e>
 8002824:	e097      	b.n	8002956 <__aeabi_dsub+0x63e>
 8002826:	2520      	movs	r5, #32
 8002828:	000e      	movs	r6, r1
 800282a:	1aed      	subs	r5, r5, r3
 800282c:	40ae      	lsls	r6, r5
 800282e:	46b0      	mov	r8, r6
 8002830:	0006      	movs	r6, r0
 8002832:	46aa      	mov	sl, r5
 8002834:	40de      	lsrs	r6, r3
 8002836:	4645      	mov	r5, r8
 8002838:	4335      	orrs	r5, r6
 800283a:	002e      	movs	r6, r5
 800283c:	4655      	mov	r5, sl
 800283e:	40a8      	lsls	r0, r5
 8002840:	40d9      	lsrs	r1, r3
 8002842:	1e45      	subs	r5, r0, #1
 8002844:	41a8      	sbcs	r0, r5
 8002846:	448c      	add	ip, r1
 8002848:	4306      	orrs	r6, r0
 800284a:	18b6      	adds	r6, r6, r2
 800284c:	4296      	cmp	r6, r2
 800284e:	4192      	sbcs	r2, r2
 8002850:	4251      	negs	r1, r2
 8002852:	4461      	add	r1, ip
 8002854:	003d      	movs	r5, r7
 8002856:	e625      	b.n	80024a4 <__aeabi_dsub+0x18c>
 8002858:	003d      	movs	r5, r7
 800285a:	4661      	mov	r1, ip
 800285c:	4691      	mov	r9, r2
 800285e:	e678      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002860:	000b      	movs	r3, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	2d00      	cmp	r5, #0
 8002866:	d000      	beq.n	800286a <__aeabi_dsub+0x552>
 8002868:	e655      	b.n	8002516 <__aeabi_dsub+0x1fe>
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f5      	beq.n	800285a <__aeabi_dsub+0x542>
 800286e:	4663      	mov	r3, ip
 8002870:	4313      	orrs	r3, r2
 8002872:	d100      	bne.n	8002876 <__aeabi_dsub+0x55e>
 8002874:	e66d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002876:	1886      	adds	r6, r0, r2
 8002878:	4286      	cmp	r6, r0
 800287a:	4180      	sbcs	r0, r0
 800287c:	4461      	add	r1, ip
 800287e:	4240      	negs	r0, r0
 8002880:	1809      	adds	r1, r1, r0
 8002882:	2200      	movs	r2, #0
 8002884:	020b      	lsls	r3, r1, #8
 8002886:	d400      	bmi.n	800288a <__aeabi_dsub+0x572>
 8002888:	e6d0      	b.n	800262c <__aeabi_dsub+0x314>
 800288a:	4b46      	ldr	r3, [pc, #280]	; (80029a4 <__aeabi_dsub+0x68c>)
 800288c:	3501      	adds	r5, #1
 800288e:	4019      	ands	r1, r3
 8002890:	e5b2      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002892:	46b1      	mov	r9, r6
 8002894:	e65d      	b.n	8002552 <__aeabi_dsub+0x23a>
 8002896:	0033      	movs	r3, r6
 8002898:	4667      	mov	r7, ip
 800289a:	3b20      	subs	r3, #32
 800289c:	40df      	lsrs	r7, r3
 800289e:	003b      	movs	r3, r7
 80028a0:	2e20      	cmp	r6, #32
 80028a2:	d005      	beq.n	80028b0 <__aeabi_dsub+0x598>
 80028a4:	2740      	movs	r7, #64	; 0x40
 80028a6:	1bbf      	subs	r7, r7, r6
 80028a8:	4666      	mov	r6, ip
 80028aa:	40be      	lsls	r6, r7
 80028ac:	4332      	orrs	r2, r6
 80028ae:	4690      	mov	r8, r2
 80028b0:	4646      	mov	r6, r8
 80028b2:	1e72      	subs	r2, r6, #1
 80028b4:	4196      	sbcs	r6, r2
 80028b6:	4333      	orrs	r3, r6
 80028b8:	e5ef      	b.n	800249a <__aeabi_dsub+0x182>
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <__aeabi_dsub+0x688>)
 80028bc:	429f      	cmp	r7, r3
 80028be:	d0cb      	beq.n	8002858 <__aeabi_dsub+0x540>
 80028c0:	2580      	movs	r5, #128	; 0x80
 80028c2:	042d      	lsls	r5, r5, #16
 80028c4:	4273      	negs	r3, r6
 80028c6:	4329      	orrs	r1, r5
 80028c8:	e7a8      	b.n	800281c <__aeabi_dsub+0x504>
 80028ca:	4308      	orrs	r0, r1
 80028cc:	1e41      	subs	r1, r0, #1
 80028ce:	4188      	sbcs	r0, r1
 80028d0:	e6a2      	b.n	8002618 <__aeabi_dsub+0x300>
 80028d2:	2f00      	cmp	r7, #0
 80028d4:	d100      	bne.n	80028d8 <__aeabi_dsub+0x5c0>
 80028d6:	e63c      	b.n	8002552 <__aeabi_dsub+0x23a>
 80028d8:	4663      	mov	r3, ip
 80028da:	1a86      	subs	r6, r0, r2
 80028dc:	1acf      	subs	r7, r1, r3
 80028de:	42b0      	cmp	r0, r6
 80028e0:	419b      	sbcs	r3, r3
 80028e2:	425b      	negs	r3, r3
 80028e4:	1afb      	subs	r3, r7, r3
 80028e6:	4698      	mov	r8, r3
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	d54e      	bpl.n	800298a <__aeabi_dsub+0x672>
 80028ec:	1a16      	subs	r6, r2, r0
 80028ee:	4663      	mov	r3, ip
 80028f0:	42b2      	cmp	r2, r6
 80028f2:	4192      	sbcs	r2, r2
 80028f4:	1a59      	subs	r1, r3, r1
 80028f6:	4252      	negs	r2, r2
 80028f8:	1a89      	subs	r1, r1, r2
 80028fa:	465c      	mov	r4, fp
 80028fc:	2200      	movs	r2, #0
 80028fe:	e57b      	b.n	80023f8 <__aeabi_dsub+0xe0>
 8002900:	4301      	orrs	r1, r0
 8002902:	000e      	movs	r6, r1
 8002904:	1e71      	subs	r1, r6, #1
 8002906:	418e      	sbcs	r6, r1
 8002908:	e79f      	b.n	800284a <__aeabi_dsub+0x532>
 800290a:	001d      	movs	r5, r3
 800290c:	000e      	movs	r6, r1
 800290e:	3d20      	subs	r5, #32
 8002910:	40ee      	lsrs	r6, r5
 8002912:	46b0      	mov	r8, r6
 8002914:	2b20      	cmp	r3, #32
 8002916:	d004      	beq.n	8002922 <__aeabi_dsub+0x60a>
 8002918:	2540      	movs	r5, #64	; 0x40
 800291a:	1aeb      	subs	r3, r5, r3
 800291c:	4099      	lsls	r1, r3
 800291e:	4308      	orrs	r0, r1
 8002920:	4681      	mov	r9, r0
 8002922:	4648      	mov	r0, r9
 8002924:	4643      	mov	r3, r8
 8002926:	1e41      	subs	r1, r0, #1
 8002928:	4188      	sbcs	r0, r1
 800292a:	4318      	orrs	r0, r3
 800292c:	e674      	b.n	8002618 <__aeabi_dsub+0x300>
 800292e:	2200      	movs	r2, #0
 8002930:	2400      	movs	r4, #0
 8002932:	e617      	b.n	8002564 <__aeabi_dsub+0x24c>
 8002934:	1a16      	subs	r6, r2, r0
 8002936:	4663      	mov	r3, ip
 8002938:	42b2      	cmp	r2, r6
 800293a:	4192      	sbcs	r2, r2
 800293c:	1a59      	subs	r1, r3, r1
 800293e:	4252      	negs	r2, r2
 8002940:	1a89      	subs	r1, r1, r2
 8002942:	003d      	movs	r5, r7
 8002944:	e525      	b.n	8002392 <__aeabi_dsub+0x7a>
 8002946:	4661      	mov	r1, ip
 8002948:	4691      	mov	r9, r2
 800294a:	4d15      	ldr	r5, [pc, #84]	; (80029a0 <__aeabi_dsub+0x688>)
 800294c:	e601      	b.n	8002552 <__aeabi_dsub+0x23a>
 800294e:	2280      	movs	r2, #128	; 0x80
 8002950:	2400      	movs	r4, #0
 8002952:	0312      	lsls	r2, r2, #12
 8002954:	e679      	b.n	800264a <__aeabi_dsub+0x332>
 8002956:	001d      	movs	r5, r3
 8002958:	000e      	movs	r6, r1
 800295a:	3d20      	subs	r5, #32
 800295c:	40ee      	lsrs	r6, r5
 800295e:	46b0      	mov	r8, r6
 8002960:	2b20      	cmp	r3, #32
 8002962:	d004      	beq.n	800296e <__aeabi_dsub+0x656>
 8002964:	2540      	movs	r5, #64	; 0x40
 8002966:	1aeb      	subs	r3, r5, r3
 8002968:	4099      	lsls	r1, r3
 800296a:	4308      	orrs	r0, r1
 800296c:	4681      	mov	r9, r0
 800296e:	464e      	mov	r6, r9
 8002970:	4643      	mov	r3, r8
 8002972:	1e71      	subs	r1, r6, #1
 8002974:	418e      	sbcs	r6, r1
 8002976:	431e      	orrs	r6, r3
 8002978:	e767      	b.n	800284a <__aeabi_dsub+0x532>
 800297a:	1886      	adds	r6, r0, r2
 800297c:	4296      	cmp	r6, r2
 800297e:	419b      	sbcs	r3, r3
 8002980:	4461      	add	r1, ip
 8002982:	425b      	negs	r3, r3
 8002984:	18c9      	adds	r1, r1, r3
 8002986:	003d      	movs	r5, r7
 8002988:	e58c      	b.n	80024a4 <__aeabi_dsub+0x18c>
 800298a:	4647      	mov	r7, r8
 800298c:	4337      	orrs	r7, r6
 800298e:	d0ce      	beq.n	800292e <__aeabi_dsub+0x616>
 8002990:	2207      	movs	r2, #7
 8002992:	4641      	mov	r1, r8
 8002994:	4032      	ands	r2, r6
 8002996:	e649      	b.n	800262c <__aeabi_dsub+0x314>
 8002998:	2700      	movs	r7, #0
 800299a:	003a      	movs	r2, r7
 800299c:	e5e6      	b.n	800256c <__aeabi_dsub+0x254>
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	000007ff 	.word	0x000007ff
 80029a4:	ff7fffff 	.word	0xff7fffff

080029a8 <__aeabi_dcmpun>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4e0c      	ldr	r6, [pc, #48]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029ac:	030d      	lsls	r5, r1, #12
 80029ae:	031c      	lsls	r4, r3, #12
 80029b0:	0049      	lsls	r1, r1, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	0b2d      	lsrs	r5, r5, #12
 80029b6:	0d49      	lsrs	r1, r1, #21
 80029b8:	0b24      	lsrs	r4, r4, #12
 80029ba:	0d5b      	lsrs	r3, r3, #21
 80029bc:	42b1      	cmp	r1, r6
 80029be:	d008      	beq.n	80029d2 <__aeabi_dcmpun+0x2a>
 80029c0:	4906      	ldr	r1, [pc, #24]	; (80029dc <__aeabi_dcmpun+0x34>)
 80029c2:	2000      	movs	r0, #0
 80029c4:	428b      	cmp	r3, r1
 80029c6:	d103      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029c8:	4314      	orrs	r4, r2
 80029ca:	0020      	movs	r0, r4
 80029cc:	1e44      	subs	r4, r0, #1
 80029ce:	41a0      	sbcs	r0, r4
 80029d0:	bd70      	pop	{r4, r5, r6, pc}
 80029d2:	4305      	orrs	r5, r0
 80029d4:	2001      	movs	r0, #1
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	d1fa      	bne.n	80029d0 <__aeabi_dcmpun+0x28>
 80029da:	e7f1      	b.n	80029c0 <__aeabi_dcmpun+0x18>
 80029dc:	000007ff 	.word	0x000007ff

080029e0 <__aeabi_d2iz>:
 80029e0:	b530      	push	{r4, r5, lr}
 80029e2:	4d14      	ldr	r5, [pc, #80]	; (8002a34 <__aeabi_d2iz+0x54>)
 80029e4:	030a      	lsls	r2, r1, #12
 80029e6:	004b      	lsls	r3, r1, #1
 80029e8:	0b12      	lsrs	r2, r2, #12
 80029ea:	0d5b      	lsrs	r3, r3, #21
 80029ec:	0fc9      	lsrs	r1, r1, #31
 80029ee:	2400      	movs	r4, #0
 80029f0:	42ab      	cmp	r3, r5
 80029f2:	dd11      	ble.n	8002a18 <__aeabi_d2iz+0x38>
 80029f4:	4c10      	ldr	r4, [pc, #64]	; (8002a38 <__aeabi_d2iz+0x58>)
 80029f6:	42a3      	cmp	r3, r4
 80029f8:	dc10      	bgt.n	8002a1c <__aeabi_d2iz+0x3c>
 80029fa:	2480      	movs	r4, #128	; 0x80
 80029fc:	0364      	lsls	r4, r4, #13
 80029fe:	4322      	orrs	r2, r4
 8002a00:	4c0e      	ldr	r4, [pc, #56]	; (8002a3c <__aeabi_d2iz+0x5c>)
 8002a02:	1ae4      	subs	r4, r4, r3
 8002a04:	2c1f      	cmp	r4, #31
 8002a06:	dd0c      	ble.n	8002a22 <__aeabi_d2iz+0x42>
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <__aeabi_d2iz+0x60>)
 8002a0a:	1ac3      	subs	r3, r0, r3
 8002a0c:	40da      	lsrs	r2, r3
 8002a0e:	0013      	movs	r3, r2
 8002a10:	425c      	negs	r4, r3
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d100      	bne.n	8002a18 <__aeabi_d2iz+0x38>
 8002a16:	001c      	movs	r4, r3
 8002a18:	0020      	movs	r0, r4
 8002a1a:	bd30      	pop	{r4, r5, pc}
 8002a1c:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <__aeabi_d2iz+0x64>)
 8002a1e:	18cc      	adds	r4, r1, r3
 8002a20:	e7fa      	b.n	8002a18 <__aeabi_d2iz+0x38>
 8002a22:	4d09      	ldr	r5, [pc, #36]	; (8002a48 <__aeabi_d2iz+0x68>)
 8002a24:	40e0      	lsrs	r0, r4
 8002a26:	46ac      	mov	ip, r5
 8002a28:	4463      	add	r3, ip
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	0013      	movs	r3, r2
 8002a2e:	4303      	orrs	r3, r0
 8002a30:	e7ee      	b.n	8002a10 <__aeabi_d2iz+0x30>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	000003fe 	.word	0x000003fe
 8002a38:	0000041d 	.word	0x0000041d
 8002a3c:	00000433 	.word	0x00000433
 8002a40:	00000413 	.word	0x00000413
 8002a44:	7fffffff 	.word	0x7fffffff
 8002a48:	fffffbed 	.word	0xfffffbed

08002a4c <__aeabi_i2d>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	2800      	cmp	r0, #0
 8002a50:	d02d      	beq.n	8002aae <__aeabi_i2d+0x62>
 8002a52:	17c3      	asrs	r3, r0, #31
 8002a54:	18c5      	adds	r5, r0, r3
 8002a56:	405d      	eors	r5, r3
 8002a58:	0fc4      	lsrs	r4, r0, #31
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f000 f938 	bl	8002cd0 <__clzsi2>
 8002a60:	4b15      	ldr	r3, [pc, #84]	; (8002ab8 <__aeabi_i2d+0x6c>)
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0d5b      	lsrs	r3, r3, #21
 8002a68:	280a      	cmp	r0, #10
 8002a6a:	dd15      	ble.n	8002a98 <__aeabi_i2d+0x4c>
 8002a6c:	380b      	subs	r0, #11
 8002a6e:	4085      	lsls	r5, r0
 8002a70:	2200      	movs	r2, #0
 8002a72:	032d      	lsls	r5, r5, #12
 8002a74:	0b2d      	lsrs	r5, r5, #12
 8002a76:	2100      	movs	r1, #0
 8002a78:	0010      	movs	r0, r2
 8002a7a:	032d      	lsls	r5, r5, #12
 8002a7c:	0d0a      	lsrs	r2, r1, #20
 8002a7e:	0b2d      	lsrs	r5, r5, #12
 8002a80:	0512      	lsls	r2, r2, #20
 8002a82:	432a      	orrs	r2, r5
 8002a84:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__aeabi_i2d+0x70>)
 8002a86:	051b      	lsls	r3, r3, #20
 8002a88:	402a      	ands	r2, r5
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	07e4      	lsls	r4, r4, #31
 8002a90:	085b      	lsrs	r3, r3, #1
 8002a92:	4323      	orrs	r3, r4
 8002a94:	0019      	movs	r1, r3
 8002a96:	bd70      	pop	{r4, r5, r6, pc}
 8002a98:	0002      	movs	r2, r0
 8002a9a:	0029      	movs	r1, r5
 8002a9c:	3215      	adds	r2, #21
 8002a9e:	4091      	lsls	r1, r2
 8002aa0:	000a      	movs	r2, r1
 8002aa2:	210b      	movs	r1, #11
 8002aa4:	1a08      	subs	r0, r1, r0
 8002aa6:	40c5      	lsrs	r5, r0
 8002aa8:	032d      	lsls	r5, r5, #12
 8002aaa:	0b2d      	lsrs	r5, r5, #12
 8002aac:	e7e3      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002aae:	2400      	movs	r4, #0
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	e7de      	b.n	8002a76 <__aeabi_i2d+0x2a>
 8002ab8:	0000041e 	.word	0x0000041e
 8002abc:	800fffff 	.word	0x800fffff

08002ac0 <__aeabi_ui2d>:
 8002ac0:	b510      	push	{r4, lr}
 8002ac2:	1e04      	subs	r4, r0, #0
 8002ac4:	d025      	beq.n	8002b12 <__aeabi_ui2d+0x52>
 8002ac6:	f000 f903 	bl	8002cd0 <__clzsi2>
 8002aca:	4b14      	ldr	r3, [pc, #80]	; (8002b1c <__aeabi_ui2d+0x5c>)
 8002acc:	1a1b      	subs	r3, r3, r0
 8002ace:	055b      	lsls	r3, r3, #21
 8002ad0:	0d5b      	lsrs	r3, r3, #21
 8002ad2:	280a      	cmp	r0, #10
 8002ad4:	dd12      	ble.n	8002afc <__aeabi_ui2d+0x3c>
 8002ad6:	380b      	subs	r0, #11
 8002ad8:	4084      	lsls	r4, r0
 8002ada:	2200      	movs	r2, #0
 8002adc:	0324      	lsls	r4, r4, #12
 8002ade:	0b24      	lsrs	r4, r4, #12
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	0010      	movs	r0, r2
 8002ae4:	0324      	lsls	r4, r4, #12
 8002ae6:	0d0a      	lsrs	r2, r1, #20
 8002ae8:	0b24      	lsrs	r4, r4, #12
 8002aea:	0512      	lsls	r2, r2, #20
 8002aec:	4322      	orrs	r2, r4
 8002aee:	4c0c      	ldr	r4, [pc, #48]	; (8002b20 <__aeabi_ui2d+0x60>)
 8002af0:	051b      	lsls	r3, r3, #20
 8002af2:	4022      	ands	r2, r4
 8002af4:	4313      	orrs	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	0859      	lsrs	r1, r3, #1
 8002afa:	bd10      	pop	{r4, pc}
 8002afc:	0002      	movs	r2, r0
 8002afe:	0021      	movs	r1, r4
 8002b00:	3215      	adds	r2, #21
 8002b02:	4091      	lsls	r1, r2
 8002b04:	000a      	movs	r2, r1
 8002b06:	210b      	movs	r1, #11
 8002b08:	1a08      	subs	r0, r1, r0
 8002b0a:	40c4      	lsrs	r4, r0
 8002b0c:	0324      	lsls	r4, r4, #12
 8002b0e:	0b24      	lsrs	r4, r4, #12
 8002b10:	e7e6      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b12:	2300      	movs	r3, #0
 8002b14:	2400      	movs	r4, #0
 8002b16:	2200      	movs	r2, #0
 8002b18:	e7e2      	b.n	8002ae0 <__aeabi_ui2d+0x20>
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	0000041e 	.word	0x0000041e
 8002b20:	800fffff 	.word	0x800fffff

08002b24 <__aeabi_f2d>:
 8002b24:	0041      	lsls	r1, r0, #1
 8002b26:	0e09      	lsrs	r1, r1, #24
 8002b28:	1c4b      	adds	r3, r1, #1
 8002b2a:	b570      	push	{r4, r5, r6, lr}
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	0246      	lsls	r6, r0, #9
 8002b30:	0a75      	lsrs	r5, r6, #9
 8002b32:	0fc4      	lsrs	r4, r0, #31
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	dd14      	ble.n	8002b62 <__aeabi_f2d+0x3e>
 8002b38:	23e0      	movs	r3, #224	; 0xe0
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	076d      	lsls	r5, r5, #29
 8002b3e:	0b36      	lsrs	r6, r6, #12
 8002b40:	18cb      	adds	r3, r1, r3
 8002b42:	2100      	movs	r1, #0
 8002b44:	0d0a      	lsrs	r2, r1, #20
 8002b46:	0028      	movs	r0, r5
 8002b48:	0512      	lsls	r2, r2, #20
 8002b4a:	4d1c      	ldr	r5, [pc, #112]	; (8002bbc <__aeabi_f2d+0x98>)
 8002b4c:	4332      	orrs	r2, r6
 8002b4e:	055b      	lsls	r3, r3, #21
 8002b50:	402a      	ands	r2, r5
 8002b52:	085b      	lsrs	r3, r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	07e4      	lsls	r4, r4, #31
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	4323      	orrs	r3, r4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	bd70      	pop	{r4, r5, r6, pc}
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d114      	bne.n	8002b90 <__aeabi_f2d+0x6c>
 8002b66:	2d00      	cmp	r5, #0
 8002b68:	d01e      	beq.n	8002ba8 <__aeabi_f2d+0x84>
 8002b6a:	0028      	movs	r0, r5
 8002b6c:	f000 f8b0 	bl	8002cd0 <__clzsi2>
 8002b70:	280a      	cmp	r0, #10
 8002b72:	dc1c      	bgt.n	8002bae <__aeabi_f2d+0x8a>
 8002b74:	230b      	movs	r3, #11
 8002b76:	002a      	movs	r2, r5
 8002b78:	1a1b      	subs	r3, r3, r0
 8002b7a:	40da      	lsrs	r2, r3
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	3315      	adds	r3, #21
 8002b80:	409d      	lsls	r5, r3
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <__aeabi_f2d+0x9c>)
 8002b84:	0312      	lsls	r2, r2, #12
 8002b86:	1a1b      	subs	r3, r3, r0
 8002b88:	055b      	lsls	r3, r3, #21
 8002b8a:	0b16      	lsrs	r6, r2, #12
 8002b8c:	0d5b      	lsrs	r3, r3, #21
 8002b8e:	e7d8      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002b90:	2d00      	cmp	r5, #0
 8002b92:	d006      	beq.n	8002ba2 <__aeabi_f2d+0x7e>
 8002b94:	0b32      	lsrs	r2, r6, #12
 8002b96:	2680      	movs	r6, #128	; 0x80
 8002b98:	0336      	lsls	r6, r6, #12
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	4316      	orrs	r6, r2
 8002b9e:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba0:	e7cf      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <__aeabi_f2d+0xa0>)
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	e7cc      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2600      	movs	r6, #0
 8002bac:	e7c9      	b.n	8002b42 <__aeabi_f2d+0x1e>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	002a      	movs	r2, r5
 8002bb2:	3b0b      	subs	r3, #11
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	2500      	movs	r5, #0
 8002bb8:	e7e3      	b.n	8002b82 <__aeabi_f2d+0x5e>
 8002bba:	46c0      	nop			; (mov r8, r8)
 8002bbc:	800fffff 	.word	0x800fffff
 8002bc0:	00000389 	.word	0x00000389
 8002bc4:	000007ff 	.word	0x000007ff

08002bc8 <__aeabi_d2f>:
 8002bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bca:	004c      	lsls	r4, r1, #1
 8002bcc:	0d64      	lsrs	r4, r4, #21
 8002bce:	030b      	lsls	r3, r1, #12
 8002bd0:	1c62      	adds	r2, r4, #1
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	0f46      	lsrs	r6, r0, #29
 8002bd6:	0552      	lsls	r2, r2, #21
 8002bd8:	0fc9      	lsrs	r1, r1, #31
 8002bda:	431e      	orrs	r6, r3
 8002bdc:	00c5      	lsls	r5, r0, #3
 8002bde:	0d52      	lsrs	r2, r2, #21
 8002be0:	2a01      	cmp	r2, #1
 8002be2:	dd29      	ble.n	8002c38 <__aeabi_d2f+0x70>
 8002be4:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <__aeabi_d2f+0xfc>)
 8002be6:	18e7      	adds	r7, r4, r3
 8002be8:	2ffe      	cmp	r7, #254	; 0xfe
 8002bea:	dc1c      	bgt.n	8002c26 <__aeabi_d2f+0x5e>
 8002bec:	2f00      	cmp	r7, #0
 8002bee:	dd3b      	ble.n	8002c68 <__aeabi_d2f+0xa0>
 8002bf0:	0180      	lsls	r0, r0, #6
 8002bf2:	1e43      	subs	r3, r0, #1
 8002bf4:	4198      	sbcs	r0, r3
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	00f3      	lsls	r3, r6, #3
 8002bfa:	0f6d      	lsrs	r5, r5, #29
 8002bfc:	4303      	orrs	r3, r0
 8002bfe:	432b      	orrs	r3, r5
 8002c00:	401a      	ands	r2, r3
 8002c02:	2a00      	cmp	r2, #0
 8002c04:	d004      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c06:	220f      	movs	r2, #15
 8002c08:	401a      	ands	r2, r3
 8002c0a:	2a04      	cmp	r2, #4
 8002c0c:	d000      	beq.n	8002c10 <__aeabi_d2f+0x48>
 8002c0e:	3304      	adds	r3, #4
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	04d2      	lsls	r2, r2, #19
 8002c14:	401a      	ands	r2, r3
 8002c16:	d024      	beq.n	8002c62 <__aeabi_d2f+0x9a>
 8002c18:	3701      	adds	r7, #1
 8002c1a:	b2fa      	uxtb	r2, r7
 8002c1c:	2fff      	cmp	r7, #255	; 0xff
 8002c1e:	d002      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	0a58      	lsrs	r0, r3, #9
 8002c24:	e001      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c26:	22ff      	movs	r2, #255	; 0xff
 8002c28:	2000      	movs	r0, #0
 8002c2a:	0240      	lsls	r0, r0, #9
 8002c2c:	05d2      	lsls	r2, r2, #23
 8002c2e:	0a40      	lsrs	r0, r0, #9
 8002c30:	07c9      	lsls	r1, r1, #31
 8002c32:	4310      	orrs	r0, r2
 8002c34:	4308      	orrs	r0, r1
 8002c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c38:	4335      	orrs	r5, r6
 8002c3a:	2c00      	cmp	r4, #0
 8002c3c:	d104      	bne.n	8002c48 <__aeabi_d2f+0x80>
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	d10a      	bne.n	8002c58 <__aeabi_d2f+0x90>
 8002c42:	2200      	movs	r2, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	e7f0      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c48:	2d00      	cmp	r5, #0
 8002c4a:	d0ec      	beq.n	8002c26 <__aeabi_d2f+0x5e>
 8002c4c:	2080      	movs	r0, #128	; 0x80
 8002c4e:	03c0      	lsls	r0, r0, #15
 8002c50:	4330      	orrs	r0, r6
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	e7e9      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c56:	2400      	movs	r4, #0
 8002c58:	2300      	movs	r3, #0
 8002c5a:	025b      	lsls	r3, r3, #9
 8002c5c:	0a58      	lsrs	r0, r3, #9
 8002c5e:	b2e2      	uxtb	r2, r4
 8002c60:	e7e3      	b.n	8002c2a <__aeabi_d2f+0x62>
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	003c      	movs	r4, r7
 8002c66:	e7f8      	b.n	8002c5a <__aeabi_d2f+0x92>
 8002c68:	003b      	movs	r3, r7
 8002c6a:	3317      	adds	r3, #23
 8002c6c:	dbf3      	blt.n	8002c56 <__aeabi_d2f+0x8e>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	4333      	orrs	r3, r6
 8002c74:	261e      	movs	r6, #30
 8002c76:	1bf6      	subs	r6, r6, r7
 8002c78:	2e1f      	cmp	r6, #31
 8002c7a:	dd14      	ble.n	8002ca6 <__aeabi_d2f+0xde>
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4252      	negs	r2, r2
 8002c80:	1bd7      	subs	r7, r2, r7
 8002c82:	001a      	movs	r2, r3
 8002c84:	40fa      	lsrs	r2, r7
 8002c86:	0017      	movs	r7, r2
 8002c88:	2e20      	cmp	r6, #32
 8002c8a:	d004      	beq.n	8002c96 <__aeabi_d2f+0xce>
 8002c8c:	4a0e      	ldr	r2, [pc, #56]	; (8002cc8 <__aeabi_d2f+0x100>)
 8002c8e:	4694      	mov	ip, r2
 8002c90:	4464      	add	r4, ip
 8002c92:	40a3      	lsls	r3, r4
 8002c94:	431d      	orrs	r5, r3
 8002c96:	002b      	movs	r3, r5
 8002c98:	1e5d      	subs	r5, r3, #1
 8002c9a:	41ab      	sbcs	r3, r5
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	433b      	orrs	r3, r7
 8002ca0:	401a      	ands	r2, r3
 8002ca2:	2700      	movs	r7, #0
 8002ca4:	e7ad      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <__aeabi_d2f+0x104>)
 8002ca8:	0028      	movs	r0, r5
 8002caa:	18a2      	adds	r2, r4, r2
 8002cac:	4095      	lsls	r5, r2
 8002cae:	4093      	lsls	r3, r2
 8002cb0:	1e6c      	subs	r4, r5, #1
 8002cb2:	41a5      	sbcs	r5, r4
 8002cb4:	40f0      	lsrs	r0, r6
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	4303      	orrs	r3, r0
 8002cbc:	401a      	ands	r2, r3
 8002cbe:	2700      	movs	r7, #0
 8002cc0:	e79f      	b.n	8002c02 <__aeabi_d2f+0x3a>
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	fffffc80 	.word	0xfffffc80
 8002cc8:	fffffca2 	.word	0xfffffca2
 8002ccc:	fffffc82 	.word	0xfffffc82

08002cd0 <__clzsi2>:
 8002cd0:	211c      	movs	r1, #28
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	041b      	lsls	r3, r3, #16
 8002cd6:	4298      	cmp	r0, r3
 8002cd8:	d301      	bcc.n	8002cde <__clzsi2+0xe>
 8002cda:	0c00      	lsrs	r0, r0, #16
 8002cdc:	3910      	subs	r1, #16
 8002cde:	0a1b      	lsrs	r3, r3, #8
 8002ce0:	4298      	cmp	r0, r3
 8002ce2:	d301      	bcc.n	8002ce8 <__clzsi2+0x18>
 8002ce4:	0a00      	lsrs	r0, r0, #8
 8002ce6:	3908      	subs	r1, #8
 8002ce8:	091b      	lsrs	r3, r3, #4
 8002cea:	4298      	cmp	r0, r3
 8002cec:	d301      	bcc.n	8002cf2 <__clzsi2+0x22>
 8002cee:	0900      	lsrs	r0, r0, #4
 8002cf0:	3904      	subs	r1, #4
 8002cf2:	a202      	add	r2, pc, #8	; (adr r2, 8002cfc <__clzsi2+0x2c>)
 8002cf4:	5c10      	ldrb	r0, [r2, r0]
 8002cf6:	1840      	adds	r0, r0, r1
 8002cf8:	4770      	bx	lr
 8002cfa:	46c0      	nop			; (mov r8, r8)
 8002cfc:	02020304 	.word	0x02020304
 8002d00:	01010101 	.word	0x01010101
	...

08002d0c <__clzdi2>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	2900      	cmp	r1, #0
 8002d10:	d103      	bne.n	8002d1a <__clzdi2+0xe>
 8002d12:	f7ff ffdd 	bl	8002cd0 <__clzsi2>
 8002d16:	3020      	adds	r0, #32
 8002d18:	e002      	b.n	8002d20 <__clzdi2+0x14>
 8002d1a:	1c08      	adds	r0, r1, #0
 8002d1c:	f7ff ffd8 	bl	8002cd0 <__clzsi2>
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	46c0      	nop			; (mov r8, r8)

08002d24 <LoadROtopology>:
}

/*-----------------------------------------------------------*/

/* --- Load array topology stored in Flash RO --- */
BOS_Status LoadROtopology(void){
 8002d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d26:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =2, temp =0;
	
	/* Load number of modules */
	temp =(*(__IO uint16_t* )(RO_START_ADDRESS));
 8002d28:	4b23      	ldr	r3, [pc, #140]	; (8002db8 <LoadROtopology+0x94>)
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	b29b      	uxth	r3, r3
	
	if(temp == 0xFFFF)				// Memory has been erased
 8002d2e:	4a23      	ldr	r2, [pc, #140]	; (8002dbc <LoadROtopology+0x98>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d033      	beq.n	8002d9c <LoadROtopology+0x78>
		N =1;
		myID =0;
		return BOS_MEM_ERASED;
	}
	else{
		N =(uint8_t )(temp >> 8);
 8002d34:	0a1a      	lsrs	r2, r3, #8
		if(N == 0)
 8002d36:	d039      	beq.n	8002dac <LoadROtopology+0x88>
		N =(uint8_t )(temp >> 8);
 8002d38:	4921      	ldr	r1, [pc, #132]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d3a:	700a      	strb	r2, [r1, #0]
			N =1;
		myID =(uint8_t )temp;
 8002d3c:	4a21      	ldr	r2, [pc, #132]	; (8002dc4 <LoadROtopology+0xa0>)
 8002d3e:	7013      	strb	r3, [r2, #0]
		
		/* Load topology */
		for(uint8_t i =1; i <= N; i++){
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d42:	781e      	ldrb	r6, [r3, #0]
 8002d44:	2e00      	cmp	r6, #0
 8002d46:	d035      	beq.n	8002db4 <LoadROtopology+0x90>
 8002d48:	2401      	movs	r4, #1
	uint16_t add =2, temp =0;
 8002d4a:	2202      	movs	r2, #2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d4c:	466b      	mov	r3, sp
 8002d4e:	1dd9      	adds	r1, r3, #7
 8002d50:	2300      	movs	r3, #0
 8002d52:	469c      	mov	ip, r3
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d54:	4d1c      	ldr	r5, [pc, #112]	; (8002dc8 <LoadROtopology+0xa4>)
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d56:	4663      	mov	r3, ip
 8002d58:	700b      	strb	r3, [r1, #0]
 8002d5a:	780b      	ldrb	r3, [r1, #0]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b0a      	cmp	r3, #10
 8002d60:	d815      	bhi.n	8002d8e <LoadROtopology+0x6a>
				array[i - 1][j] =(*(__IO uint16_t* )(RO_START_ADDRESS + add));
 8002d62:	1e63      	subs	r3, r4, #1
 8002d64:	0098      	lsls	r0, r3, #2
 8002d66:	18c0      	adds	r0, r0, r3
 8002d68:	0040      	lsls	r0, r0, #1
 8002d6a:	18c0      	adds	r0, r0, r3
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <LoadROtopology+0x94>)
 8002d6e:	18d7      	adds	r7, r2, r3
 8002d70:	780b      	ldrb	r3, [r1, #0]
 8002d72:	883f      	ldrh	r7, [r7, #0]
 8002d74:	181b      	adds	r3, r3, r0
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	52ef      	strh	r7, [r5, r3]
				add +=2;
 8002d7a:	3202      	adds	r2, #2
 8002d7c:	b292      	uxth	r2, r2
			for(volatile uint8_t j =0; j <= MaxNumOfPorts; j++){
 8002d7e:	780b      	ldrb	r3, [r1, #0]
 8002d80:	3301      	adds	r3, #1
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	700b      	strb	r3, [r1, #0]
 8002d86:	780b      	ldrb	r3, [r1, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b0a      	cmp	r3, #10
 8002d8c:	d9ee      	bls.n	8002d6c <LoadROtopology+0x48>
		for(uint8_t i =1; i <= N; i++){
 8002d8e:	3401      	adds	r4, #1
 8002d90:	b2e4      	uxtb	r4, r4
 8002d92:	42b4      	cmp	r4, r6
 8002d94:	d9df      	bls.n	8002d56 <LoadROtopology+0x32>
			}
		}
	}
	
	return result;
 8002d96:	2000      	movs	r0, #0
}
 8002d98:	b003      	add	sp, #12
 8002d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		N =1;
 8002d9c:	4b08      	ldr	r3, [pc, #32]	; (8002dc0 <LoadROtopology+0x9c>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	701a      	strb	r2, [r3, #0]
		myID =0;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <LoadROtopology+0xa0>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
		return BOS_MEM_ERASED;
 8002da8:	20fa      	movs	r0, #250	; 0xfa
 8002daa:	e7f5      	b.n	8002d98 <LoadROtopology+0x74>
			N =1;
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LoadROtopology+0x9c>)
 8002dae:	2101      	movs	r1, #1
 8002db0:	7011      	strb	r1, [r2, #0]
 8002db2:	e7c3      	b.n	8002d3c <LoadROtopology+0x18>
	return result;
 8002db4:	2000      	movs	r0, #0
 8002db6:	e7ef      	b.n	8002d98 <LoadROtopology+0x74>
 8002db8:	0801d800 	.word	0x0801d800
 8002dbc:	0000ffff 	.word	0x0000ffff
 8002dc0:	20000044 	.word	0x20000044
 8002dc4:	200010ea 	.word	0x200010ea
 8002dc8:	20000aec 	.word	0x20000aec

08002dcc <LoadEEportsDir>:

/* --- Load array ports directions stored in EEPROM --- */

BOS_Status LoadEEportsDir(void){
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <LoadEEportsDir+0x40>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8002dd2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d017      	beq.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002dd8:	490d      	ldr	r1, [pc, #52]	; (8002e10 <LoadEEportsDir+0x44>)
 8002dda:	2002      	movs	r0, #2
 8002ddc:	f004 fcfa 	bl	80077d4 <EE_ReadVariable>
	for(uint8_t i =1; i <= N; i++){
 8002de0:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8002de2:	2500      	movs	r5, #0
	for(uint8_t i =1; i <= N; i++){
 8002de4:	4f09      	ldr	r7, [pc, #36]	; (8002e0c <LoadEEportsDir+0x40>)
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002de6:	4e0a      	ldr	r6, [pc, #40]	; (8002e10 <LoadEEportsDir+0x44>)
	for(uint8_t i =1; i <= N; i++){
 8002de8:	3401      	adds	r4, #1
 8002dea:	b2e4      	uxtb	r4, r4
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	42a3      	cmp	r3, r4
 8002df0:	d30a      	bcc.n	8002e08 <LoadEEportsDir+0x3c>
		EE_ReadVariable(_EE_PORT_DIR_BASE + i - 1,&arrayPortsDir[i - 1]);
 8002df2:	1e61      	subs	r1, r4, #1
 8002df4:	0049      	lsls	r1, r1, #1
 8002df6:	1989      	adds	r1, r1, r6
 8002df8:	1c60      	adds	r0, r4, #1
 8002dfa:	f004 fceb 	bl	80077d4 <EE_ReadVariable>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8002dfe:	1ca3      	adds	r3, r4, #2
 8002e00:	2b1b      	cmp	r3, #27
 8002e02:	ddf1      	ble.n	8002de8 <LoadEEportsDir+0x1c>
			result =BOS_ERR_EEPROM;
 8002e04:	250a      	movs	r5, #10
 8002e06:	e7ef      	b.n	8002de8 <LoadEEportsDir+0x1c>
	}
	
	return result;
}
 8002e08:	0028      	movs	r0, r5
 8002e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e0c:	20000044 	.word	0x20000044
 8002e10:	2000735c 	.word	0x2000735c

08002e14 <LoadEEalias>:

/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- */
BOS_Status LoadEEalias(void){
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	46de      	mov	lr, fp
 8002e18:	4657      	mov	r7, sl
 8002e1a:	464e      	mov	r6, r9
 8002e1c:	4645      	mov	r5, r8
 8002e1e:	b5e0      	push	{r5, r6, r7, lr}
 8002e20:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002e22:	466b      	mov	r3, sp
 8002e24:	2200      	movs	r2, #0
 8002e26:	80da      	strh	r2, [r3, #6]
 8002e28:	241c      	movs	r4, #28
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e2a:	2700      	movs	r7, #0
 8002e2c:	4b18      	ldr	r3, [pc, #96]	; (8002e90 <LoadEEalias+0x7c>)
 8002e2e:	469a      	mov	sl, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
			moduleAlias[i][j] =(uint8_t )temp;
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		moduleAlias[i][MaxLengthOfAlias] ='\0';
 8002e30:	469b      	mov	fp, r3
 8002e32:	e00c      	b.n	8002e4e <LoadEEalias+0x3a>
 8002e34:	464b      	mov	r3, r9
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	444b      	add	r3, r9
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	445b      	add	r3, fp
 8002e3e:	2200      	movs	r2, #0
 8002e40:	725a      	strb	r2, [r3, #9]
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8002e42:	3701      	adds	r7, #1
 8002e44:	b2ff      	uxtb	r7, r7
 8002e46:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <LoadEEalias+0x80>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d317      	bcc.n	8002e7e <LoadEEalias+0x6a>
 8002e4e:	00bd      	lsls	r5, r7, #2
 8002e50:	19ed      	adds	r5, r5, r7
 8002e52:	006d      	lsls	r5, r5, #1
 8002e54:	4455      	add	r5, sl
 8002e56:	1d63      	adds	r3, r4, #5
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	4698      	mov	r8, r3
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e5c:	466b      	mov	r3, sp
 8002e5e:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] =(uint8_t )temp;
 8002e60:	46b9      	mov	r9, r7
			EE_ReadVariable(_EE_ALIAS_BASE + add,&temp);
 8002e62:	0031      	movs	r1, r6
 8002e64:	0020      	movs	r0, r4
 8002e66:	f004 fcb5 	bl	80077d4 <EE_ReadVariable>
			moduleAlias[i][j] =(uint8_t )temp;
 8002e6a:	8833      	ldrh	r3, [r6, #0]
 8002e6c:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002e6e:	0a1b      	lsrs	r3, r3, #8
 8002e70:	702b      	strb	r3, [r5, #0]
 8002e72:	3401      	adds	r4, #1
 8002e74:	b2a4      	uxth	r4, r4
 8002e76:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002e78:	45a0      	cmp	r8, r4
 8002e7a:	d1f2      	bne.n	8002e62 <LoadEEalias+0x4e>
 8002e7c:	e7da      	b.n	8002e34 <LoadEEalias+0x20>
	}
	
	return result;
}
 8002e7e:	2000      	movs	r0, #0
 8002e80:	b003      	add	sp, #12
 8002e82:	bc3c      	pop	{r2, r3, r4, r5}
 8002e84:	4690      	mov	r8, r2
 8002e86:	4699      	mov	r9, r3
 8002e88:	46a2      	mov	sl, r4
 8002e8a:	46ab      	mov	fp, r5
 8002e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000fdc 	.word	0x20000fdc
 8002e94:	20000044 	.word	0x20000044

08002e98 <LoadEEgroup>:

/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- */
BOS_Status LoadEEgroup(void){
 8002e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e9a:	46d6      	mov	lr, sl
 8002e9c:	464f      	mov	r7, r9
 8002e9e:	4646      	mov	r6, r8
 8002ea0:	b5c0      	push	{r6, r7, lr}
 8002ea2:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
 8002ea4:	466b      	mov	r3, sp
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	80da      	strh	r2, [r3, #6]
	uint8_t i =0;
	
	/* Load group members */
	for(i =0; i < N; i++)			// N modules
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <LoadEEgroup+0x9c>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d01d      	beq.n	8002eee <LoadEEgroup+0x56>
	uint16_t add =0, temp =0;
 8002eb2:	2500      	movs	r5, #0
	    {
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb4:	4e20      	ldr	r6, [pc, #128]	; (8002f38 <LoadEEgroup+0xa0>)
	for(i =0; i < N; i++)			// N modules
 8002eb6:	4c1f      	ldr	r4, [pc, #124]	; (8002f34 <LoadEEgroup+0x9c>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE + add,&groupModules[i]);
 8002eb8:	b2e9      	uxtb	r1, r5
 8002eba:	0049      	lsls	r1, r1, #1
 8002ebc:	1871      	adds	r1, r6, r1
 8002ebe:	0028      	movs	r0, r5
 8002ec0:	30cb      	adds	r0, #203	; 0xcb
 8002ec2:	b280      	uxth	r0, r0
 8002ec4:	f004 fc86 	bl	80077d4 <EE_ReadVariable>
		add++;
 8002ec8:	3501      	adds	r5, #1
 8002eca:	b2ad      	uxth	r5, r5
	for(i =0; i < N; i++)			// N modules
 8002ecc:	7822      	ldrb	r2, [r4, #0]
 8002ece:	b2eb      	uxtb	r3, r5
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d8f1      	bhi.n	8002eb8 <LoadEEgroup+0x20>
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <LoadEEgroup+0xa4>)
 8002ed6:	4699      	mov	r9, r3
 8002ed8:	002c      	movs	r4, r5
 8002eda:	3499      	adds	r4, #153	; 0x99
 8002edc:	b2a4      	uxth	r4, r4
 8002ede:	35cb      	adds	r5, #203	; 0xcb
 8002ee0:	b2ab      	uxth	r3, r5
 8002ee2:	4698      	mov	r8, r3
	
	/* Load group alias */
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
	    {
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002ee4:	466b      	mov	r3, sp
 8002ee6:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] =(uint8_t )temp;
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
			add++;
		}
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ee8:	2300      	movs	r3, #0
 8002eea:	469a      	mov	sl, r3
 8002eec:	e009      	b.n	8002f02 <LoadEEgroup+0x6a>
	uint16_t add =0, temp =0;
 8002eee:	2500      	movs	r5, #0
 8002ef0:	e7f0      	b.n	8002ed4 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] ='\0';
 8002ef2:	464b      	mov	r3, r9
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	725a      	strb	r2, [r3, #9]
 8002ef8:	230a      	movs	r3, #10
 8002efa:	469c      	mov	ip, r3
 8002efc:	44e1      	add	r9, ip
	for(i =0; i < MaxNumOfGroups; i++)		// MaxNumOfGroups group aliases
 8002efe:	4544      	cmp	r4, r8
 8002f00:	d010      	beq.n	8002f24 <LoadEEgroup+0x8c>
 8002f02:	1d67      	adds	r7, r4, #5
 8002f04:	b2bf      	uxth	r7, r7
	uint16_t add =0, temp =0;
 8002f06:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE + add,&temp);
 8002f08:	0031      	movs	r1, r6
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f004 fc62 	bl	80077d4 <EE_ReadVariable>
			groupAlias[i][j] =(uint8_t )temp;
 8002f10:	8833      	ldrh	r3, [r6, #0]
 8002f12:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j - 1] =(uint8_t )(temp >> 8);
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	702b      	strb	r3, [r5, #0]
 8002f18:	3401      	adds	r4, #1
 8002f1a:	b2a4      	uxth	r4, r4
 8002f1c:	3502      	adds	r5, #2
		for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 8002f1e:	42bc      	cmp	r4, r7
 8002f20:	d1f2      	bne.n	8002f08 <LoadEEgroup+0x70>
 8002f22:	e7e6      	b.n	8002ef2 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8002f24:	2000      	movs	r0, #0
 8002f26:	b002      	add	sp, #8
 8002f28:	bc1c      	pop	{r2, r3, r4}
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	20000044 	.word	0x20000044
 8002f38:	20000f34 	.word	0x20000f34
 8002f3c:	20000ed0 	.word	0x20000ed0

08002f40 <LoadEEstreams>:

/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- */

BOS_Status LoadEEstreams(void){
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	b084      	sub	sp, #16
	BOS_Status result =BOS_OK;
	uint16_t temp1 =0, temp2 =0, status1 =0, status2 =0;
 8002f44:	210e      	movs	r1, #14
 8002f46:	4469      	add	r1, sp
 8002f48:	2300      	movs	r3, #0
 8002f4a:	800b      	strh	r3, [r1, #0]
 8002f4c:	aa03      	add	r2, sp, #12
 8002f4e:	8013      	strh	r3, [r2, #0]
	uint8_t direction =0;
	uint32_t count =0, timeout =0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE,&temp1);
 8002f50:	20e4      	movs	r0, #228	; 0xe4
 8002f52:	f004 fc3f 	bl	80077d4 <EE_ReadVariable>
	uint8_t direction =0;
 8002f56:	2600      	movs	r6, #0
	if(!status1){
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	d102      	bne.n	8002f62 <LoadEEstreams+0x22>
		direction =(uint8_t )temp1;
 8002f5c:	230e      	movs	r3, #14
 8002f5e:	446b      	add	r3, sp
 8002f60:	781e      	ldrb	r6, [r3, #0]
	}
	
	/* Count */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 1,&temp1);
 8002f62:	210e      	movs	r1, #14
 8002f64:	4469      	add	r1, sp
 8002f66:	20e5      	movs	r0, #229	; 0xe5
 8002f68:	f004 fc34 	bl	80077d4 <EE_ReadVariable>
 8002f6c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 2,&temp2);
 8002f6e:	a903      	add	r1, sp, #12
 8002f70:	20e6      	movs	r0, #230	; 0xe6
 8002f72:	f004 fc2f 	bl	80077d4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002f76:	4304      	orrs	r4, r0
 8002f78:	b2a4      	uxth	r4, r4
	uint32_t count =0, timeout =0;
 8002f7a:	2500      	movs	r5, #0
	if(!status1 && !status2){
 8002f7c:	2c00      	cmp	r4, #0
 8002f7e:	d106      	bne.n	8002f8e <LoadEEstreams+0x4e>
		count =((uint32_t )temp1 << 16) + temp2;
 8002f80:	230e      	movs	r3, #14
 8002f82:	446b      	add	r3, sp
 8002f84:	881d      	ldrh	r5, [r3, #0]
 8002f86:	042d      	lsls	r5, r5, #16
 8002f88:	ab03      	add	r3, sp, #12
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	18ed      	adds	r5, r5, r3
	}
	
	/* Timeout */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 3,&temp1);
 8002f8e:	210e      	movs	r1, #14
 8002f90:	4469      	add	r1, sp
 8002f92:	20e7      	movs	r0, #231	; 0xe7
 8002f94:	f004 fc1e 	bl	80077d4 <EE_ReadVariable>
 8002f98:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 4,&temp2);
 8002f9a:	a903      	add	r1, sp, #12
 8002f9c:	20e8      	movs	r0, #232	; 0xe8
 8002f9e:	f004 fc19 	bl	80077d4 <EE_ReadVariable>
	if(!status1 && !status2){
 8002fa2:	4320      	orrs	r0, r4
 8002fa4:	b280      	uxth	r0, r0
	uint32_t count =0, timeout =0;
 8002fa6:	2400      	movs	r4, #0
	if(!status1 && !status2){
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d106      	bne.n	8002fba <LoadEEstreams+0x7a>
		timeout =((uint32_t )temp1 << 16) + temp2;
 8002fac:	230e      	movs	r3, #14
 8002fae:	446b      	add	r3, sp
 8002fb0:	881c      	ldrh	r4, [r3, #0]
 8002fb2:	0424      	lsls	r4, r4, #16
 8002fb4:	ab03      	add	r3, sp, #12
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 5,&temp1);
 8002fba:	210e      	movs	r1, #14
 8002fbc:	4469      	add	r1, sp
 8002fbe:	20e9      	movs	r0, #233	; 0xe9
 8002fc0:	f004 fc08 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d107      	bne.n	8002fd8 <LoadEEstreams+0x98>
		src1 =(uint8_t )(temp1 >> 8);
 8002fc8:	230e      	movs	r3, #14
 8002fca:	446b      	add	r3, sp
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	0a19      	lsrs	r1, r3, #8
 8002fd0:	4a28      	ldr	r2, [pc, #160]	; (8003074 <LoadEEstreams+0x134>)
 8002fd2:	7011      	strb	r1, [r2, #0]
		dst1 =(uint8_t )temp1;
 8002fd4:	4a28      	ldr	r2, [pc, #160]	; (8003078 <LoadEEstreams+0x138>)
 8002fd6:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 6,&temp1);
 8002fd8:	210e      	movs	r1, #14
 8002fda:	4469      	add	r1, sp
 8002fdc:	20ea      	movs	r0, #234	; 0xea
 8002fde:	f004 fbf9 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d107      	bne.n	8002ff6 <LoadEEstreams+0xb6>
		src2 =(uint8_t )(temp1 >> 8);
 8002fe6:	230e      	movs	r3, #14
 8002fe8:	446b      	add	r3, sp
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	0a19      	lsrs	r1, r3, #8
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <LoadEEstreams+0x13c>)
 8002ff0:	7011      	strb	r1, [r2, #0]
		dst2 =(uint8_t )temp1;
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <LoadEEstreams+0x140>)
 8002ff4:	7013      	strb	r3, [r2, #0]
	}
	
	/* src3 | dst3 */
	status1 =EE_ReadVariable(_EE_DMA_STREAM_BASE + 7,&temp1);
 8002ff6:	210e      	movs	r1, #14
 8002ff8:	4469      	add	r1, sp
 8002ffa:	20eb      	movs	r0, #235	; 0xeb
 8002ffc:	f004 fbea 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 8003000:	2800      	cmp	r0, #0
 8003002:	d107      	bne.n	8003014 <LoadEEstreams+0xd4>
		src3 =(uint8_t )(temp1 >> 8);
 8003004:	230e      	movs	r3, #14
 8003006:	446b      	add	r3, sp
 8003008:	881b      	ldrh	r3, [r3, #0]
 800300a:	0a19      	lsrs	r1, r3, #8
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <LoadEEstreams+0x144>)
 800300e:	7011      	strb	r1, [r2, #0]
		dst3 =(uint8_t )temp1;
 8003010:	4a1d      	ldr	r2, [pc, #116]	; (8003088 <LoadEEstreams+0x148>)
 8003012:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if(src1 && dst1)
 8003014:	4b17      	ldr	r3, [pc, #92]	; (8003074 <LoadEEstreams+0x134>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <LoadEEstreams+0xe4>
 800301c:	4a16      	ldr	r2, [pc, #88]	; (8003078 <LoadEEstreams+0x138>)
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	2a00      	cmp	r2, #0
 8003022:	d112      	bne.n	800304a <LoadEEstreams+0x10a>
		SetupDMAStreams(direction,count,timeout,src1,dst1);
	if(src2 && dst2)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <LoadEEstreams+0x13c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <LoadEEstreams+0xf4>
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <LoadEEstreams+0x140>)
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	2a00      	cmp	r2, #0
 8003032:	d111      	bne.n	8003058 <LoadEEstreams+0x118>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
	if(src3 && dst3)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <LoadEEstreams+0x144>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <LoadEEstreams+0x104>
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <LoadEEstreams+0x148>)
 800303e:	7812      	ldrb	r2, [r2, #0]
 8003040:	2a00      	cmp	r2, #0
 8003042:	d110      	bne.n	8003066 <LoadEEstreams+0x126>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
	
	return result;
}
 8003044:	2000      	movs	r0, #0
 8003046:	b004      	add	sp, #16
 8003048:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction,count,timeout,src1,dst1);
 800304a:	9200      	str	r2, [sp, #0]
 800304c:	0022      	movs	r2, r4
 800304e:	0029      	movs	r1, r5
 8003050:	0030      	movs	r0, r6
 8003052:	f006 f9df 	bl	8009414 <SetupDMAStreams>
 8003056:	e7e5      	b.n	8003024 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction,count,timeout,src2,dst2);
 8003058:	9200      	str	r2, [sp, #0]
 800305a:	0022      	movs	r2, r4
 800305c:	0029      	movs	r1, r5
 800305e:	0030      	movs	r0, r6
 8003060:	f006 f9d8 	bl	8009414 <SetupDMAStreams>
 8003064:	e7e6      	b.n	8003034 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction,count,timeout,src3,dst3);
 8003066:	9200      	str	r2, [sp, #0]
 8003068:	0022      	movs	r2, r4
 800306a:	0029      	movs	r1, r5
 800306c:	0030      	movs	r0, r6
 800306e:	f006 f9d1 	bl	8009414 <SetupDMAStreams>
 8003072:	e7e7      	b.n	8003044 <LoadEEstreams+0x104>
 8003074:	200011c2 	.word	0x200011c2
 8003078:	20000ecd 	.word	0x20000ecd
 800307c:	200011c3 	.word	0x200011c3
 8003080:	20000ece 	.word	0x20000ece
 8003084:	200011c4 	.word	0x200011c4
 8003088:	20000ecf 	.word	0x20000ecf

0800308c <LoadEEparams>:

// --- Load module parameters from emulated EEPROM. If erased, load defaults --- */

BOS_Status LoadEEparams(void){
 800308c:	b510      	push	{r4, lr}
 800308e:	b082      	sub	sp, #8
	BOS_Status result =BOS_OK;
	uint16_t temp1, temp2, status1, status2;
	
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_BASE,&temp1);
 8003090:	208a      	movs	r0, #138	; 0x8a
 8003092:	466b      	mov	r3, sp
 8003094:	1d99      	adds	r1, r3, #6
 8003096:	0040      	lsls	r0, r0, #1
 8003098:	f004 fb9c 	bl	80077d4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800309c:	2800      	cmp	r0, #0
 800309e:	d000      	beq.n	80030a2 <LoadEEparams+0x16>
 80030a0:	e075      	b.n	800318e <LoadEEparams+0x102>
		BOSMessaging.response =(uint8_t )temp1;
 80030a2:	466b      	mov	r3, sp
 80030a4:	3306      	adds	r3, #6
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	4a55      	ldr	r2, [pc, #340]	; (8003200 <LoadEEparams+0x174>)
 80030aa:	7013      	strb	r3, [r2, #0]
		BOSMessaging.trace =(traceOptions_t )(temp1 >> 8);
 80030ac:	0a1b      	lsrs	r3, r3, #8
 80030ae:	7053      	strb	r3, [r2, #1]
		BOSMessaging.response =BOSMessging_default.response;
		BOSMessaging.trace =BOSMessging_default.trace;

	}
	/* Read params base - BOS response and BOS trace */
	status1 =EE_ReadVariable(_EE_PARAMS_Messaging,&temp1);
 80030b0:	208e      	movs	r0, #142	; 0x8e
 80030b2:	466b      	mov	r3, sp
 80030b4:	1d99      	adds	r1, r3, #6
 80030b6:	0040      	lsls	r0, r0, #1
 80030b8:	f004 fb8c 	bl	80077d4 <EE_ReadVariable>

	if(!status1){
 80030bc:	2800      	cmp	r0, #0
 80030be:	d000      	beq.n	80030c2 <LoadEEparams+0x36>
 80030c0:	e06c      	b.n	800319c <LoadEEparams+0x110>
		BOSMessaging.Acknowledgment =(bool )(temp1 >>15);
 80030c2:	466b      	mov	r3, sp
 80030c4:	3306      	adds	r3, #6
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	4a4d      	ldr	r2, [pc, #308]	; (8003200 <LoadEEparams+0x174>)
 80030ca:	0bd9      	lsrs	r1, r3, #15
 80030cc:	7111      	strb	r1, [r2, #4]
		BOSMessaging.trial =(uint16_t)(temp1 >> 1);
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	80d3      	strh	r3, [r2, #6]
	else{
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
		BOSMessaging.trial=BOSMessging_default.trial;
	}
	/* Read Button debounce */
	status1 =EE_ReadVariable(_EE_PARAMS_DEBOUNCE,&temp1);
 80030d2:	2016      	movs	r0, #22
 80030d4:	466b      	mov	r3, sp
 80030d6:	1d99      	adds	r1, r3, #6
 80030d8:	30ff      	adds	r0, #255	; 0xff
 80030da:	f004 fb7b 	bl	80077d4 <EE_ReadVariable>
	if(!status1)
 80030de:	2800      	cmp	r0, #0
 80030e0:	d163      	bne.n	80031aa <LoadEEparams+0x11e>
		BOS.buttons.debounce =temp1;
 80030e2:	466b      	mov	r3, sp
 80030e4:	88da      	ldrh	r2, [r3, #6]
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <LoadEEparams+0x178>)
 80030e8:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce =BOS_default.buttons.debounce;
	
	/* Read Button single click time */
	status1 =EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK,&temp1);
 80030ea:	208b      	movs	r0, #139	; 0x8b
 80030ec:	466b      	mov	r3, sp
 80030ee:	1d99      	adds	r1, r3, #6
 80030f0:	0040      	lsls	r0, r0, #1
 80030f2:	f004 fb6f 	bl	80077d4 <EE_ReadVariable>
	if(!status1)
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d15c      	bne.n	80031b4 <LoadEEparams+0x128>
		BOS.buttons.singleClickTime =temp1;
 80030fa:	466b      	mov	r3, sp
 80030fc:	88da      	ldrh	r2, [r3, #6]
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <LoadEEparams+0x178>)
 8003100:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
	
	/* Read Button double click time (min and max inter-click) */
	status1 =EE_ReadVariable(_EE_PARAMS_DBL_CLICK,&temp1);
 8003102:	2018      	movs	r0, #24
 8003104:	466b      	mov	r3, sp
 8003106:	1d99      	adds	r1, r3, #6
 8003108:	30ff      	adds	r0, #255	; 0xff
 800310a:	f004 fb63 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 800310e:	2800      	cmp	r0, #0
 8003110:	d155      	bne.n	80031be <LoadEEparams+0x132>
		BOS.buttons.minInterClickTime =(uint8_t )temp1;
 8003112:	466b      	mov	r3, sp
 8003114:	3306      	adds	r3, #6
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	4a3a      	ldr	r2, [pc, #232]	; (8003204 <LoadEEparams+0x178>)
 800311a:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime =(uint8_t )(temp1 >> 8);
 800311c:	0a1b      	lsrs	r3, r3, #8
 800311e:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
	}
	
	/* Read CLI baudrate */
	status1 =EE_ReadVariable(_EE_CLI_BAUD,&temp1);
 8003120:	208c      	movs	r0, #140	; 0x8c
 8003122:	466b      	mov	r3, sp
 8003124:	1d99      	adds	r1, r3, #6
 8003126:	0040      	lsls	r0, r0, #1
 8003128:	f004 fb54 	bl	80077d4 <EE_ReadVariable>
 800312c:	0004      	movs	r4, r0
	status2 =EE_ReadVariable(_EE_CLI_BAUD + 1,&temp2);
 800312e:	201a      	movs	r0, #26
 8003130:	a901      	add	r1, sp, #4
 8003132:	30ff      	adds	r0, #255	; 0xff
 8003134:	f004 fb4e 	bl	80077d4 <EE_ReadVariable>
	if(!status1 && !status2){
 8003138:	4304      	orrs	r4, r0
 800313a:	b2a4      	uxth	r4, r4
 800313c:	2c00      	cmp	r4, #0
 800313e:	d145      	bne.n	80031cc <LoadEEparams+0x140>
		BOS.clibaudrate =(uint32_t )temp1 | (((uint32_t )temp2) << 16);
 8003140:	ab01      	add	r3, sp, #4
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	466a      	mov	r2, sp
 8003148:	3206      	adds	r2, #6
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	4a2d      	ldr	r2, [pc, #180]	; (8003204 <LoadEEparams+0x178>)
 8003150:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate =BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 =EE_ReadVariable(_EE_PARAMS_RTC,&temp1);
 8003152:	208d      	movs	r0, #141	; 0x8d
 8003154:	466b      	mov	r3, sp
 8003156:	1d99      	adds	r1, r3, #6
 8003158:	0040      	lsls	r0, r0, #1
 800315a:	f004 fb3b 	bl	80077d4 <EE_ReadVariable>
	if(!status1){
 800315e:	2800      	cmp	r0, #0
 8003160:	d142      	bne.n	80031e8 <LoadEEparams+0x15c>
		BOS.daylightsaving =(int8_t )temp1;
 8003162:	466b      	mov	r3, sp
 8003164:	3306      	adds	r3, #6
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <LoadEEparams+0x178>)
 800316a:	7313      	strb	r3, [r2, #12]
		BOS.hourformat =(uint8_t )(temp1 >> 8);
 800316c:	0a1b      	lsrs	r3, r3, #8
 800316e:	7353      	strb	r3, [r2, #13]
		BOS.hourformat =24;
		BOS.daylightsaving =DAYLIGHT_NONE;
	}
	
	/* Read disableCLI */
	status1 =EE_ReadVariable(_EE_PARAMS_DISABLE_CLI,&temp1);
 8003170:	201c      	movs	r0, #28
 8003172:	466b      	mov	r3, sp
 8003174:	1d99      	adds	r1, r3, #6
 8003176:	30ff      	adds	r0, #255	; 0xff
 8003178:	f004 fb2c 	bl	80077d4 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if(!status1){
 800317c:	2800      	cmp	r0, #0
 800317e:	d039      	beq.n	80031f4 <LoadEEparams+0x168>
		BOS.disableCLI =(uint8_t )temp1;
		/* Couldn't find the variable, load default config */
	}
	else{
		BOS.disableCLI =BOS_default.disableCLI;
 8003180:	4b21      	ldr	r3, [pc, #132]	; (8003208 <LoadEEparams+0x17c>)
 8003182:	7e9a      	ldrb	r2, [r3, #26]
 8003184:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <LoadEEparams+0x178>)
 8003186:	769a      	strb	r2, [r3, #26]
	}
	
	return result;
}
 8003188:	2000      	movs	r0, #0
 800318a:	b002      	add	sp, #8
 800318c:	bd10      	pop	{r4, pc}
		BOSMessaging.response =BOSMessging_default.response;
 800318e:	4b1c      	ldr	r3, [pc, #112]	; (8003200 <LoadEEparams+0x174>)
 8003190:	4a1e      	ldr	r2, [pc, #120]	; (800320c <LoadEEparams+0x180>)
 8003192:	7811      	ldrb	r1, [r2, #0]
 8003194:	7019      	strb	r1, [r3, #0]
		BOSMessaging.trace =BOSMessging_default.trace;
 8003196:	7852      	ldrb	r2, [r2, #1]
 8003198:	705a      	strb	r2, [r3, #1]
 800319a:	e789      	b.n	80030b0 <LoadEEparams+0x24>
		BOSMessaging.Acknowledgment=BOSMessging_default.Acknowledgment;
 800319c:	4b18      	ldr	r3, [pc, #96]	; (8003200 <LoadEEparams+0x174>)
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <LoadEEparams+0x180>)
 80031a0:	7911      	ldrb	r1, [r2, #4]
 80031a2:	7119      	strb	r1, [r3, #4]
		BOSMessaging.trial=BOSMessging_default.trial;
 80031a4:	88d2      	ldrh	r2, [r2, #6]
 80031a6:	80da      	strh	r2, [r3, #6]
 80031a8:	e793      	b.n	80030d2 <LoadEEparams+0x46>
		BOS.buttons.debounce =BOS_default.buttons.debounce;
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <LoadEEparams+0x17c>)
 80031ac:	881a      	ldrh	r2, [r3, #0]
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <LoadEEparams+0x178>)
 80031b0:	801a      	strh	r2, [r3, #0]
 80031b2:	e79a      	b.n	80030ea <LoadEEparams+0x5e>
		BOS.buttons.singleClickTime =BOS_default.buttons.singleClickTime;
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <LoadEEparams+0x17c>)
 80031b6:	885a      	ldrh	r2, [r3, #2]
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <LoadEEparams+0x178>)
 80031ba:	805a      	strh	r2, [r3, #2]
 80031bc:	e7a1      	b.n	8003102 <LoadEEparams+0x76>
		BOS.buttons.minInterClickTime =BOS_default.buttons.minInterClickTime;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <LoadEEparams+0x178>)
 80031c0:	4a11      	ldr	r2, [pc, #68]	; (8003208 <LoadEEparams+0x17c>)
 80031c2:	7911      	ldrb	r1, [r2, #4]
 80031c4:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime =BOS_default.buttons.maxInterClickTime;
 80031c6:	7952      	ldrb	r2, [r2, #5]
 80031c8:	715a      	strb	r2, [r3, #5]
 80031ca:	e7a9      	b.n	8003120 <LoadEEparams+0x94>
	else if(CLI_LOW_Baudrate_Flag)
 80031cc:	4b10      	ldr	r3, [pc, #64]	; (8003210 <LoadEEparams+0x184>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d004      	beq.n	80031de <LoadEEparams+0x152>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80031d4:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <LoadEEparams+0x178>)
 80031d6:	22e1      	movs	r2, #225	; 0xe1
 80031d8:	0252      	lsls	r2, r2, #9
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	e7b9      	b.n	8003152 <LoadEEparams+0xc6>
		BOS.clibaudrate =BOS_default.clibaudrate;
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <LoadEEparams+0x17c>)
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <LoadEEparams+0x178>)
 80031e4:	609a      	str	r2, [r3, #8]
 80031e6:	e7b4      	b.n	8003152 <LoadEEparams+0xc6>
		BOS.hourformat =24;
 80031e8:	4b06      	ldr	r3, [pc, #24]	; (8003204 <LoadEEparams+0x178>)
 80031ea:	2218      	movs	r2, #24
 80031ec:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving =DAYLIGHT_NONE;
 80031ee:	2200      	movs	r2, #0
 80031f0:	731a      	strb	r2, [r3, #12]
 80031f2:	e7bd      	b.n	8003170 <LoadEEparams+0xe4>
		BOS.disableCLI =(uint8_t )temp1;
 80031f4:	466b      	mov	r3, sp
 80031f6:	88da      	ldrh	r2, [r3, #6]
 80031f8:	4b02      	ldr	r3, [pc, #8]	; (8003204 <LoadEEparams+0x178>)
 80031fa:	769a      	strb	r2, [r3, #26]
 80031fc:	e7c4      	b.n	8003188 <LoadEEparams+0xfc>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	20006dd4 	.word	0x20006dd4
 8003204:	20006e54 	.word	0x20006e54
 8003208:	20000028 	.word	0x20000028
 800320c:	20000020 	.word	0x20000020
 8003210:	20000ae7 	.word	0x20000ae7

08003214 <LoadEEbuttons>:

/*-----------------------------------------------------------*/

/* --- Load button definitions and events from EEPROM --- */
BOS_Status LoadEEbuttons(void){
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	46ce      	mov	lr, r9
 8003218:	4647      	mov	r7, r8
 800321a:	b580      	push	{r7, lr}
 800321c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result =BOS_OK;
	uint16_t temp16 =0, status1 =0;
 800321e:	231e      	movs	r3, #30
 8003220:	446b      	add	r3, sp
 8003222:	2200      	movs	r2, #0
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	2501      	movs	r5, #1
 8003228:	24ec      	movs	r4, #236	; 0xec
	uint8_t temp8 =0;
	
	for(uint8_t i =0; i <= NumOfPorts; i++){
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800322a:	001e      	movs	r6, r3
 800322c:	230f      	movs	r3, #15
 800322e:	4698      	mov	r8, r3
 8003230:	e004      	b.n	800323c <LoadEEbuttons+0x28>
 8003232:	3404      	adds	r4, #4
 8003234:	b2a4      	uxth	r4, r4
 8003236:	3501      	adds	r5, #1
	for(uint8_t i =0; i <= NumOfPorts; i++){
 8003238:	2d08      	cmp	r5, #8
 800323a:	d058      	beq.n	80032ee <LoadEEbuttons+0xda>
		status1 =EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i),&temp16);
 800323c:	0031      	movs	r1, r6
 800323e:	0020      	movs	r0, r4
 8003240:	f004 fac8 	bl	80077d4 <EE_ReadVariable>
		
		if(!status1)									// This variable exists
 8003244:	2800      	cmp	r0, #0
 8003246:	d1f4      	bne.n	8003232 <LoadEEbuttons+0x1e>
		{
			temp8 =(uint8_t )(temp16 >> 8);
 8003248:	8831      	ldrh	r1, [r6, #0]
 800324a:	0a0b      	lsrs	r3, r1, #8
			if(((temp8 >> 4) == i + 1) && ((temp8 & 0x0F) != NONE))									// This is same port and button type is not none
 800324c:	091a      	lsrs	r2, r3, #4
 800324e:	42aa      	cmp	r2, r5
 8003250:	d1ef      	bne.n	8003232 <LoadEEbuttons+0x1e>
 8003252:	4640      	mov	r0, r8
 8003254:	4003      	ands	r3, r0
 8003256:	d0ec      	beq.n	8003232 <LoadEEbuttons+0x1e>
			{
				button[i + 1].type =temp8 & 0x0F;
 8003258:	00d0      	lsls	r0, r2, #3
 800325a:	1882      	adds	r2, r0, r2
 800325c:	4827      	ldr	r0, [pc, #156]	; (80032fc <LoadEEbuttons+0xe8>)
 800325e:	4681      	mov	r9, r0
 8003260:	4491      	add	r9, r2
 8003262:	464a      	mov	r2, r9
 8003264:	7053      	strb	r3, [r2, #1]
				button[i + 1].events =(uint8_t )temp16;
 8003266:	7211      	strb	r1, [r2, #8]
 8003268:	00af      	lsls	r7, r5, #2
 800326a:	b2bf      	uxth	r7, r7
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 1,&temp16);
 800326c:	0038      	movs	r0, r7
 800326e:	30e9      	adds	r0, #233	; 0xe9
 8003270:	b280      	uxth	r0, r0
 8003272:	0031      	movs	r1, r6
 8003274:	f004 faae 	bl	80077d4 <EE_ReadVariable>
				button[i + 1].pressedX1Sec =(uint8_t )(temp16 >> 8);
 8003278:	8833      	ldrh	r3, [r6, #0]
 800327a:	0a1a      	lsrs	r2, r3, #8
 800327c:	4649      	mov	r1, r9
 800327e:	708a      	strb	r2, [r1, #2]
				button[i + 1].releasedY1Sec =(uint8_t )temp16;
 8003280:	714b      	strb	r3, [r1, #5]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 2,&temp16);
 8003282:	0038      	movs	r0, r7
 8003284:	30ea      	adds	r0, #234	; 0xea
 8003286:	b280      	uxth	r0, r0
 8003288:	0031      	movs	r1, r6
 800328a:	f004 faa3 	bl	80077d4 <EE_ReadVariable>
				button[i + 1].pressedX2Sec =(uint8_t )(temp16 >> 8);
 800328e:	8833      	ldrh	r3, [r6, #0]
 8003290:	0a1a      	lsrs	r2, r3, #8
 8003292:	4649      	mov	r1, r9
 8003294:	70ca      	strb	r2, [r1, #3]
				button[i + 1].releasedY2Sec =(uint8_t )temp16;
 8003296:	718b      	strb	r3, [r1, #6]
				EE_ReadVariable(_EE_BUTTON_BASE + 4 * (i) + 3,&temp16);
 8003298:	37eb      	adds	r7, #235	; 0xeb
 800329a:	b2b8      	uxth	r0, r7
 800329c:	0031      	movs	r1, r6
 800329e:	f004 fa99 	bl	80077d4 <EE_ReadVariable>
				button[i + 1].pressedX3Sec =(uint8_t )(temp16 >> 8);
 80032a2:	8833      	ldrh	r3, [r6, #0]
 80032a4:	0a1a      	lsrs	r2, r3, #8
 80032a6:	4649      	mov	r1, r9
 80032a8:	710a      	strb	r2, [r1, #4]
				button[i + 1].releasedY3Sec =(uint8_t )temp16;
 80032aa:	71cb      	strb	r3, [r1, #7]
				/* Setup the button and its events */
				AddPortButton(button[i + 1].type,i + 1);
 80032ac:	b2ef      	uxtb	r7, r5
 80032ae:	7848      	ldrb	r0, [r1, #1]
 80032b0:	0039      	movs	r1, r7
 80032b2:	f005 f96d 	bl	8008590 <AddPortButton>
				SetButtonEvents(i + 1,(button[i + 1].events & BUTTON_EVENT_CLICKED),((button[i + 1].events & BUTTON_EVENT_DBL_CLICKED) >> 1),button[i + 1].pressedX1Sec,button[i + 1].pressedX2Sec,button[i + 1].pressedX3Sec,button[i + 1].releasedY1Sec,button[i + 1].releasedY2Sec,button[i + 1].releasedY3Sec,BUTTON_EVENT_MODE_CLEAR);
 80032b6:	464b      	mov	r3, r9
 80032b8:	7a19      	ldrb	r1, [r3, #8]
 80032ba:	789b      	ldrb	r3, [r3, #2]
 80032bc:	104a      	asrs	r2, r1, #1
 80032be:	2001      	movs	r0, #1
 80032c0:	4002      	ands	r2, r0
 80032c2:	4001      	ands	r1, r0
 80032c4:	2000      	movs	r0, #0
 80032c6:	9005      	str	r0, [sp, #20]
 80032c8:	4648      	mov	r0, r9
 80032ca:	79c0      	ldrb	r0, [r0, #7]
 80032cc:	9004      	str	r0, [sp, #16]
 80032ce:	4648      	mov	r0, r9
 80032d0:	7980      	ldrb	r0, [r0, #6]
 80032d2:	9003      	str	r0, [sp, #12]
 80032d4:	4648      	mov	r0, r9
 80032d6:	7940      	ldrb	r0, [r0, #5]
 80032d8:	9002      	str	r0, [sp, #8]
 80032da:	4648      	mov	r0, r9
 80032dc:	7900      	ldrb	r0, [r0, #4]
 80032de:	9001      	str	r0, [sp, #4]
 80032e0:	4648      	mov	r0, r9
 80032e2:	78c0      	ldrb	r0, [r0, #3]
 80032e4:	9000      	str	r0, [sp, #0]
 80032e6:	0038      	movs	r0, r7
 80032e8:	f005 fa6c 	bl	80087c4 <SetButtonEvents>
 80032ec:	e7a1      	b.n	8003232 <LoadEEbuttons+0x1e>
			}
		}
	}
	
	return result;
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	b009      	add	sp, #36	; 0x24
 80032f2:	bc0c      	pop	{r2, r3}
 80032f4:	4690      	mov	r8, r2
 80032f6:	4699      	mov	r9, r3
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20001974 	.word	0x20001974

08003300 <LoadROsnippets>:

/*-----------------------------------------------------------*/
/* --- Load Command Snippets stored in Flash RO  ---*/
BOS_Status LoadROsnippets(void){
 8003300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003302:	46de      	mov	lr, fp
 8003304:	4657      	mov	r7, sl
 8003306:	464e      	mov	r6, r9
 8003308:	b5c0      	push	{r6, r7, lr}
 800330a:	b082      	sub	sp, #8
	uint8_t i =0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer =(char* )malloc(cmdMAX_INPUT_SIZE);
 800330c:	2032      	movs	r0, #50	; 0x32
 800330e:	f011 f8fd 	bl	801450c <malloc>
 8003312:	1e07      	subs	r7, r0, #0
	if(snipBuffer == NULL)
 8003314:	d100      	bne.n	8003318 <LoadROsnippets+0x18>
 8003316:	e071      	b.n	80033fc <LoadROsnippets+0xfc>
		return BOS_MEM_FULL;
	
	// Exit if no recorded Snippets
	if(*(uint8_t* )currentAdd != 0xFE)
 8003318:	4b39      	ldr	r3, [pc, #228]	; (8003400 <LoadROsnippets+0x100>)
 800331a:	781b      	ldrb	r3, [r3, #0]
		return BOS_ERROR;
 800331c:	20ff      	movs	r0, #255	; 0xff
	if(*(uint8_t* )currentAdd != 0xFE)
 800331e:	2bfe      	cmp	r3, #254	; 0xfe
 8003320:	d166      	bne.n	80033f0 <LoadROsnippets+0xf0>
 8003322:	4e38      	ldr	r6, [pc, #224]	; (8003404 <LoadROsnippets+0x104>)
 8003324:	3b9a      	subs	r3, #154	; 0x9a
 8003326:	469b      	mov	fp, r3
 8003328:	44b3      	add	fp, r6
	int currentAdd = RO_MID_ADDRESS;
 800332a:	4d35      	ldr	r5, [pc, #212]	; (8003400 <LoadROsnippets+0x100>)
	/* Load Snippets */
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
		// Load conditions starting at RO_MID_ADDRESS
		for(i =0; i < sizeof(snippet_t); i++)
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 800332c:	1c7b      	adds	r3, r7, #1
 800332e:	9301      	str	r3, [sp, #4]
			return BOS_ERR_SNIP_MEM_FULL;
		}
		else{
			// Copy the command
			memcpy(snippets[s].cmd,snipBuffer,i);
			++numOfRecordedSnippets;		// Record a successful Snippet
 8003330:	4b35      	ldr	r3, [pc, #212]	; (8003408 <LoadROsnippets+0x108>)
 8003332:	4699      	mov	r9, r3
 8003334:	e023      	b.n	800337e <LoadROsnippets+0x7e>
		i =0;
 8003336:	2400      	movs	r4, #0
		if(snipBuffer[i - 1] != 0)
 8003338:	193b      	adds	r3, r7, r4
 800333a:	3b01      	subs	r3, #1
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <LoadROsnippets+0x46>
			++i;	// String termination char was not recorded, then add one
 8003342:	3401      	adds	r4, #1
 8003344:	b2e4      	uxtb	r4, r4
		snippets[s].cmd =(char* )malloc(i);
 8003346:	0020      	movs	r0, r4
 8003348:	f011 f8e0 	bl	801450c <malloc>
 800334c:	4653      	mov	r3, sl
 800334e:	60d8      	str	r0, [r3, #12]
		if(snippets[s].cmd == NULL){
 8003350:	2800      	cmp	r0, #0
 8003352:	d03f      	beq.n	80033d4 <LoadROsnippets+0xd4>
			memcpy(snippets[s].cmd,snipBuffer,i);
 8003354:	0022      	movs	r2, r4
 8003356:	0039      	movs	r1, r7
 8003358:	f011 fb25 	bl	80149a6 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800335c:	464b      	mov	r3, r9
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	464a      	mov	r2, r9
 8003364:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer,0,i);
 8003366:	0022      	movs	r2, r4
 8003368:	2100      	movs	r1, #0
 800336a:	0038      	movs	r0, r7
 800336c:	f011 fb24 	bl	80149b8 <memset>
		}
		// Exit if no more Snippets
		if(*(uint8_t* )currentAdd != 0xFE)
 8003370:	9b00      	ldr	r3, [sp, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2bfe      	cmp	r3, #254	; 0xfe
 8003376:	d137      	bne.n	80033e8 <LoadROsnippets+0xe8>
 8003378:	3614      	adds	r6, #20
	for(uint8_t s =0; s < MAX_SNIPPETS; s++){
 800337a:	455e      	cmp	r6, fp
 800337c:	d034      	beq.n	80033e8 <LoadROsnippets+0xe8>
 800337e:	0028      	movs	r0, r5
 8003380:	3014      	adds	r0, #20
BOS_Status LoadROsnippets(void){
 8003382:	002b      	movs	r3, r5
			snipBuffer[i] =(*(__IO uint8_t* )(currentAdd++));
 8003384:	1b79      	subs	r1, r7, r5
 8003386:	781a      	ldrb	r2, [r3, #0]
 8003388:	54ca      	strb	r2, [r1, r3]
 800338a:	3301      	adds	r3, #1
		for(i =0; i < sizeof(snippet_t); i++)
 800338c:	4283      	cmp	r3, r0
 800338e:	d1fa      	bne.n	8003386 <LoadROsnippets+0x86>
 8003390:	3514      	adds	r5, #20
		memcpy((uint8_t* )&snippets[s],(uint8_t* )&snipBuffer[1],sizeof(snippet_t));
 8003392:	46b2      	mov	sl, r6
 8003394:	2214      	movs	r2, #20
 8003396:	9901      	ldr	r1, [sp, #4]
 8003398:	0030      	movs	r0, r6
 800339a:	f011 fb04 	bl	80149a6 <memcpy>
		memset(snipBuffer,0,sizeof(snippet_t));
 800339e:	2214      	movs	r2, #20
 80033a0:	2100      	movs	r1, #0
 80033a2:	0038      	movs	r0, r7
 80033a4:	f011 fb08 	bl	80149b8 <memset>
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033a8:	9500      	str	r5, [sp, #0]
 80033aa:	782a      	ldrb	r2, [r5, #0]
 80033ac:	1c93      	adds	r3, r2, #2
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d9c0      	bls.n	8003336 <LoadROsnippets+0x36>
 80033b4:	0039      	movs	r1, r7
		i =0;
 80033b6:	2400      	movs	r4, #0
			snipBuffer[i] =*(uint8_t* )currentAdd;
 80033b8:	700a      	strb	r2, [r1, #0]
			++currentAdd;
 80033ba:	3501      	adds	r5, #1
			++i;
 80033bc:	3401      	adds	r4, #1
 80033be:	b2e4      	uxtb	r4, r4
		while(*(uint8_t* )currentAdd != 0xFE && *(uint8_t* )currentAdd != 0xFF && i < cmdMAX_INPUT_SIZE){
 80033c0:	9500      	str	r5, [sp, #0]
 80033c2:	782a      	ldrb	r2, [r5, #0]
 80033c4:	1c93      	adds	r3, r2, #2
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d9b5      	bls.n	8003338 <LoadROsnippets+0x38>
 80033cc:	3101      	adds	r1, #1
 80033ce:	2c32      	cmp	r4, #50	; 0x32
 80033d0:	d1f2      	bne.n	80033b8 <LoadROsnippets+0xb8>
 80033d2:	e7b1      	b.n	8003338 <LoadROsnippets+0x38>
			memset(&snippets[s],0,sizeof(snippet_t));
 80033d4:	2214      	movs	r2, #20
 80033d6:	2100      	movs	r1, #0
 80033d8:	4650      	mov	r0, sl
 80033da:	f011 faed 	bl	80149b8 <memset>
			free(snipBuffer);
 80033de:	0038      	movs	r0, r7
 80033e0:	f011 f89e 	bl	8014520 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033e4:	200e      	movs	r0, #14
 80033e6:	e003      	b.n	80033f0 <LoadROsnippets+0xf0>
			break;
	}
	
	free(snipBuffer);
 80033e8:	0038      	movs	r0, r7
 80033ea:	f011 f899 	bl	8014520 <free>
	return BOS_OK;
 80033ee:	2000      	movs	r0, #0
}
 80033f0:	b002      	add	sp, #8
 80033f2:	bc1c      	pop	{r2, r3, r4}
 80033f4:	4691      	mov	r9, r2
 80033f6:	469a      	mov	sl, r3
 80033f8:	46a3      	mov	fp, r4
 80033fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_MEM_FULL;
 80033fc:	20fb      	movs	r0, #251	; 0xfb
 80033fe:	e7f7      	b.n	80033f0 <LoadROsnippets+0xf0>
 8003400:	0801dc00 	.word	0x0801dc00
 8003404:	20006e70 	.word	0x20006e70
 8003408:	20001297 	.word	0x20001297

0800340c <LoadEEvars>:
void LoadEEvars(void){
 800340c:	b510      	push	{r4, lr}
	LoadROtopology();
 800340e:	f7ff fc89 	bl	8002d24 <LoadROtopology>
	LoadEEportsDir();
 8003412:	f7ff fcdb 	bl	8002dcc <LoadEEportsDir>
	LoadEEalias();
 8003416:	f7ff fcfd 	bl	8002e14 <LoadEEalias>
	LoadEEgroup();
 800341a:	f7ff fd3d 	bl	8002e98 <LoadEEgroup>
	LoadEEstreams();
 800341e:	f7ff fd8f 	bl	8002f40 <LoadEEstreams>
	LoadEEparams();
 8003422:	f7ff fe33 	bl	800308c <LoadEEparams>
	LoadEEbuttons();
 8003426:	f7ff fef5 	bl	8003214 <LoadEEbuttons>
	LoadROsnippets();
 800342a:	f7ff ff69 	bl	8003300 <LoadROsnippets>
}
 800342e:	bd10      	pop	{r4, pc}

08003430 <SaveEEportsDir>:

/* Save to EEPROM related APIs */

/* --- Save array ports directions in EEPROM ---*/

BOS_Status SaveEEportsDir(void){
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	for(uint8_t i =1; i <= N; i++){
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <SaveEEportsDir+0x4c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01a      	beq.n	8003472 <SaveEEportsDir+0x42>
 800343c:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003442:	4e0f      	ldr	r6, [pc, #60]	; (8003480 <SaveEEportsDir+0x50>)
	for(uint8_t i =1; i <= N; i++){
 8003444:	4f0d      	ldr	r7, [pc, #52]	; (800347c <SaveEEportsDir+0x4c>)
 8003446:	e008      	b.n	800345a <SaveEEportsDir+0x2a>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 8003448:	1c60      	adds	r0, r4, #1
 800344a:	f004 f9f3 	bl	8007834 <EE_WriteVariable>
 800344e:	e00a      	b.n	8003466 <SaveEEportsDir+0x36>
	for(uint8_t i =1; i <= N; i++){
 8003450:	3401      	adds	r4, #1
 8003452:	b2e4      	uxtb	r4, r4
 8003454:	783b      	ldrb	r3, [r7, #0]
 8003456:	42a3      	cmp	r3, r4
 8003458:	d30d      	bcc.n	8003476 <SaveEEportsDir+0x46>
		if(arrayPortsDir[i - 1])
 800345a:	0025      	movs	r5, r4
 800345c:	1e63      	subs	r3, r4, #1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	5b99      	ldrh	r1, [r3, r6]
 8003462:	2900      	cmp	r1, #0
 8003464:	d1f0      	bne.n	8003448 <SaveEEportsDir+0x18>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003466:	3502      	adds	r5, #2
 8003468:	2d1b      	cmp	r5, #27
 800346a:	ddf1      	ble.n	8003450 <SaveEEportsDir+0x20>
			result =BOS_ERR_EEPROM;
 800346c:	230a      	movs	r3, #10
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	e7ee      	b.n	8003450 <SaveEEportsDir+0x20>
	BOS_Status result =BOS_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 8003476:	9801      	ldr	r0, [sp, #4]
 8003478:	b003      	add	sp, #12
 800347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800347c:	20000044 	.word	0x20000044
 8003480:	2000735c 	.word	0x2000735c

08003484 <SaveEEalias>:

/*-----------------------------------------------------------*/
// --- Save module alias in EEPROM ---
BOS_Status SaveEEalias(void){
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	46d6      	mov	lr, sl
 8003488:	464f      	mov	r7, r9
 800348a:	4646      	mov	r6, r8
 800348c:	b5c0      	push	{r6, r7, lr}
	BOS_Status result =BOS_OK;
	uint16_t add =0, temp =0;
	
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 800348e:	2600      	movs	r6, #0
	uint16_t add =0, temp =0;
 8003490:	2300      	movs	r3, #0
 8003492:	4698      	mov	r8, r3
	    {
		if(moduleAlias[i][0]){
 8003494:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <SaveEEalias+0x7c>)
 8003496:	469a      	mov	sl, r3
	for(uint8_t i =0; i <= N; i++)				// N+1 module aliases
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <SaveEEalias+0x80>)
 800349a:	4699      	mov	r9, r3
 800349c:	e005      	b.n	80034aa <SaveEEalias+0x26>
 800349e:	3601      	adds	r6, #1
 80034a0:	b2f6      	uxtb	r6, r6
 80034a2:	464b      	mov	r3, r9
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	42b3      	cmp	r3, r6
 80034a8:	d324      	bcc.n	80034f4 <SaveEEalias+0x70>
		if(moduleAlias[i][0]){
 80034aa:	00b3      	lsls	r3, r6, #2
 80034ac:	199b      	adds	r3, r3, r6
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4652      	mov	r2, sl
 80034b2:	5c9b      	ldrb	r3, [r3, r2]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f2      	beq.n	800349e <SaveEEalias+0x1a>
 80034b8:	00b5      	lsls	r5, r6, #2
 80034ba:	19ad      	adds	r5, r5, r6
 80034bc:	006d      	lsls	r5, r5, #1
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <SaveEEalias+0x7c>)
 80034c0:	469c      	mov	ip, r3
 80034c2:	4465      	add	r5, ip
 80034c4:	4644      	mov	r4, r8
 80034c6:	341c      	adds	r4, #28
 80034c8:	b2a4      	uxth	r4, r4
 80034ca:	4647      	mov	r7, r8
 80034cc:	3721      	adds	r7, #33	; 0x21
 80034ce:	b2bf      	uxth	r7, r7
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
				temp =(uint16_t )(moduleAlias[i][j - 1] << 8) + moduleAlias[i][j];
 80034d0:	782b      	ldrb	r3, [r5, #0]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	7869      	ldrb	r1, [r5, #1]
 80034d6:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE + add,temp);
 80034d8:	b289      	uxth	r1, r1
 80034da:	0020      	movs	r0, r4
 80034dc:	f004 f9aa 	bl	8007834 <EE_WriteVariable>
 80034e0:	3502      	adds	r5, #2
 80034e2:	3401      	adds	r4, #1
 80034e4:	b2a4      	uxth	r4, r4
			for(uint8_t j =1; j <= MaxLengthOfAlias; j +=2){
 80034e6:	42bc      	cmp	r4, r7
 80034e8:	d1f2      	bne.n	80034d0 <SaveEEalias+0x4c>
 80034ea:	4643      	mov	r3, r8
 80034ec:	3305      	adds	r3, #5
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	4698      	mov	r8, r3
 80034f2:	e7d4      	b.n	800349e <SaveEEalias+0x1a>
			}
		}
	}
	
	return result;
}
 80034f4:	2000      	movs	r0, #0
 80034f6:	bc1c      	pop	{r2, r3, r4}
 80034f8:	4690      	mov	r8, r2
 80034fa:	4699      	mov	r9, r3
 80034fc:	46a2      	mov	sl, r4
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003500:	20000fdc 	.word	0x20000fdc
 8003504:	20000044 	.word	0x20000044

08003508 <SaveEEstreams>:
}

/*-----------------------------------------------------------*/

/* --- Save DMA streams to emulated EEPROM.*/
BOS_Status SaveEEstreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src1,uint8_t dst1,uint8_t src2,uint8_t dst2,uint8_t src3,uint8_t dst3){
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	46de      	mov	lr, fp
 800350c:	4657      	mov	r7, sl
 800350e:	464e      	mov	r6, r9
 8003510:	4645      	mov	r5, r8
 8003512:	b5e0      	push	{r5, r6, r7, lr}
 8003514:	000f      	movs	r7, r1
 8003516:	0016      	movs	r6, r2
 8003518:	4699      	mov	r9, r3
 800351a:	ab0a      	add	r3, sp, #40	; 0x28
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	469b      	mov	fp, r3
 8003520:	ab0b      	add	r3, sp, #44	; 0x2c
 8003522:	781d      	ldrb	r5, [r3, #0]
 8003524:	ab0c      	add	r3, sp, #48	; 0x30
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	469a      	mov	sl, r3
 800352a:	ab0d      	add	r3, sp, #52	; 0x34
 800352c:	781c      	ldrb	r4, [r3, #0]
 800352e:	ab0e      	add	r3, sp, #56	; 0x38
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4698      	mov	r8, r3
	BOS_Status result =BOS_OK;
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE,direction); /* Direction */
 8003534:	b281      	uxth	r1, r0
 8003536:	20e4      	movs	r0, #228	; 0xe4
 8003538:	f004 f97c 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )(count >> 8))); /* Count high half-word */
 800353c:	0a39      	lsrs	r1, r7, #8
 800353e:	b289      	uxth	r1, r1
 8003540:	20e5      	movs	r0, #229	; 0xe5
 8003542:	f004 f977 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )count)); /* Count low half-word */
 8003546:	b2b9      	uxth	r1, r7
 8003548:	20e6      	movs	r0, #230	; 0xe6
 800354a:	f004 f973 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )(timeout >> 8))); /* Timeout high half-word */
 800354e:	0a31      	lsrs	r1, r6, #8
 8003550:	b289      	uxth	r1, r1
 8003552:	20e7      	movs	r0, #231	; 0xe7
 8003554:	f004 f96e 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )timeout)); /* Timeout low half-word */
 8003558:	b2b1      	uxth	r1, r6
 800355a:	20e8      	movs	r0, #232	; 0xe8
 800355c:	f004 f96a 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )(src1 << 8)) + (uint16_t )dst1); /* src1 | dst1 */
 8003560:	464b      	mov	r3, r9
 8003562:	0219      	lsls	r1, r3, #8
 8003564:	4459      	add	r1, fp
 8003566:	b289      	uxth	r1, r1
 8003568:	20e9      	movs	r0, #233	; 0xe9
 800356a:	f004 f963 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )(src2 << 8)) + (uint16_t )dst2); /* src1 | dst1 */
 800356e:	022d      	lsls	r5, r5, #8
 8003570:	4455      	add	r5, sl
 8003572:	b2a9      	uxth	r1, r5
 8003574:	20ea      	movs	r0, #234	; 0xea
 8003576:	f004 f95d 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )(src3 << 8)) + (uint16_t )dst3); /* src1 | dst1 */
 800357a:	0224      	lsls	r4, r4, #8
 800357c:	4444      	add	r4, r8
 800357e:	b2a1      	uxth	r1, r4
 8003580:	20eb      	movs	r0, #235	; 0xeb
 8003582:	f004 f957 	bl	8007834 <EE_WriteVariable>
	
	return result;
}
 8003586:	2000      	movs	r0, #0
 8003588:	bc3c      	pop	{r2, r3, r4, r5}
 800358a:	4690      	mov	r8, r2
 800358c:	4699      	mov	r9, r3
 800358e:	46a2      	mov	sl, r4
 8003590:	46ab      	mov	fp, r5
 8003592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003594 <SaveEEparams>:

/*-----------------------------------------------------------*/

/* --- Save module parameters to emulated EEPROM. ---*/

BOS_Status SaveEEparams(void){
 8003594:	b510      	push	{r4, lr}
	BOS_Status result =BOS_OK;
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 5) | (uint16_t )BOSMessaging.response);
 8003596:	4c1f      	ldr	r4, [pc, #124]	; (8003614 <SaveEEparams+0x80>)
 8003598:	7863      	ldrb	r3, [r4, #1]
 800359a:	015b      	lsls	r3, r3, #5
 800359c:	7821      	ldrb	r1, [r4, #0]
 800359e:	4319      	orrs	r1, r3
 80035a0:	208a      	movs	r0, #138	; 0x8a
 80035a2:	0040      	lsls	r0, r0, #1
 80035a4:	f004 f946 	bl	8007834 <EE_WriteVariable>
	
	EE_WriteVariable(_EE_PARAMS_Messaging,((uint16_t )BOSMessaging.Acknowledgment << 15) | (uint16_t )BOSMessaging.trial);
 80035a8:	7921      	ldrb	r1, [r4, #4]
 80035aa:	03c9      	lsls	r1, r1, #15
 80035ac:	88e3      	ldrh	r3, [r4, #6]
 80035ae:	4319      	orrs	r1, r3
 80035b0:	b289      	uxth	r1, r1
 80035b2:	208e      	movs	r0, #142	; 0x8e
 80035b4:	0040      	lsls	r0, r0, #1
 80035b6:	f004 f93d 	bl	8007834 <EE_WriteVariable>

	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE,BOS.buttons.debounce);
 80035ba:	4c17      	ldr	r4, [pc, #92]	; (8003618 <SaveEEparams+0x84>)
 80035bc:	8821      	ldrh	r1, [r4, #0]
 80035be:	2016      	movs	r0, #22
 80035c0:	30ff      	adds	r0, #255	; 0xff
 80035c2:	f004 f937 	bl	8007834 <EE_WriteVariable>
	
	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,BOS.buttons.singleClickTime);
 80035c6:	8861      	ldrh	r1, [r4, #2]
 80035c8:	208b      	movs	r0, #139	; 0x8b
 80035ca:	0040      	lsls	r0, r0, #1
 80035cc:	f004 f932 	bl	8007834 <EE_WriteVariable>
	
	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.daylightsaving);
 80035d0:	7963      	ldrb	r3, [r4, #5]
 80035d2:	021b      	lsls	r3, r3, #8
 80035d4:	7b21      	ldrb	r1, [r4, #12]
 80035d6:	4319      	orrs	r1, r3
 80035d8:	2018      	movs	r0, #24
 80035da:	30ff      	adds	r0, #255	; 0xff
 80035dc:	f004 f92a 	bl	8007834 <EE_WriteVariable>
	
	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80035e0:	8921      	ldrh	r1, [r4, #8]
 80035e2:	208c      	movs	r0, #140	; 0x8c
 80035e4:	0040      	lsls	r0, r0, #1
 80035e6:	f004 f925 	bl	8007834 <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80035ea:	8961      	ldrh	r1, [r4, #10]
 80035ec:	201a      	movs	r0, #26
 80035ee:	30ff      	adds	r0, #255	; 0xff
 80035f0:	f004 f920 	bl	8007834 <EE_WriteVariable>
	
	/* Save RTC hour format and daylight saving */
	EE_WriteVariable(_EE_PARAMS_RTC,((uint16_t )BOS.hourformat << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 80035f4:	7b63      	ldrb	r3, [r4, #13]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	7921      	ldrb	r1, [r4, #4]
 80035fa:	4319      	orrs	r1, r3
 80035fc:	208d      	movs	r0, #141	; 0x8d
 80035fe:	0040      	lsls	r0, r0, #1
 8003600:	f004 f918 	bl	8007834 <EE_WriteVariable>
	
	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI,(uint16_t )BOS.disableCLI);
 8003604:	7ea1      	ldrb	r1, [r4, #26]
 8003606:	201c      	movs	r0, #28
 8003608:	30ff      	adds	r0, #255	; 0xff
 800360a:	f004 f913 	bl	8007834 <EE_WriteVariable>
	
	return result;
}
 800360e:	2000      	movs	r0, #0
 8003610:	bd10      	pop	{r4, pc}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20006dd4 	.word	0x20006dd4
 8003618:	20006e54 	.word	0x20006e54

0800361c <ClearEEportsDir>:

/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- */

BOS_Status ClearEEportsDir(void){
 800361c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361e:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	memset(arrayPortsDir,0,sizeof(arrayPortsDir));
 8003620:	2234      	movs	r2, #52	; 0x34
 8003622:	2100      	movs	r1, #0
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <ClearEEportsDir+0x58>)
 8003626:	f011 f9c7 	bl	80149b8 <memset>
	
	for(uint8_t i =1; i <= N; i++){
 800362a:	4b13      	ldr	r3, [pc, #76]	; (8003678 <ClearEEportsDir+0x5c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d01a      	beq.n	8003668 <ClearEEportsDir+0x4c>
 8003632:	2401      	movs	r4, #1
	BOS_Status result =BOS_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	9301      	str	r3, [sp, #4]
		if(arrayPortsDir[i - 1])
 8003638:	4e0e      	ldr	r6, [pc, #56]	; (8003674 <ClearEEportsDir+0x58>)
	for(uint8_t i =1; i <= N; i++){
 800363a:	4f0f      	ldr	r7, [pc, #60]	; (8003678 <ClearEEportsDir+0x5c>)
 800363c:	e008      	b.n	8003650 <ClearEEportsDir+0x34>
			EE_WriteVariable(_EE_PORT_DIR_BASE + i - 1,arrayPortsDir[i - 1]);
 800363e:	1c60      	adds	r0, r4, #1
 8003640:	f004 f8f8 	bl	8007834 <EE_WriteVariable>
 8003644:	e00a      	b.n	800365c <ClearEEportsDir+0x40>
	for(uint8_t i =1; i <= N; i++){
 8003646:	3401      	adds	r4, #1
 8003648:	b2e4      	uxtb	r4, r4
 800364a:	783b      	ldrb	r3, [r7, #0]
 800364c:	42a3      	cmp	r3, r4
 800364e:	d30d      	bcc.n	800366c <ClearEEportsDir+0x50>
		if(arrayPortsDir[i - 1])
 8003650:	0025      	movs	r5, r4
 8003652:	1e63      	subs	r3, r4, #1
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	5b99      	ldrh	r1, [r3, r6]
 8003658:	2900      	cmp	r1, #0
 800365a:	d1f0      	bne.n	800363e <ClearEEportsDir+0x22>
		
		if((i + _EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800365c:	3502      	adds	r5, #2
 800365e:	2d1b      	cmp	r5, #27
 8003660:	ddf1      	ble.n	8003646 <ClearEEportsDir+0x2a>
			result =BOS_ERR_EEPROM;
 8003662:	230a      	movs	r3, #10
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	e7ee      	b.n	8003646 <ClearEEportsDir+0x2a>
	BOS_Status result =BOS_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	9301      	str	r3, [sp, #4]
	}
	
	return result;
}
 800366c:	9801      	ldr	r0, [sp, #4]
 800366e:	b003      	add	sp, #12
 8003670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003672:	46c0      	nop			; (mov r8, r8)
 8003674:	2000735c 	.word	0x2000735c
 8003678:	20000044 	.word	0x20000044

0800367c <EE_FormatForFactoryReset>:

/*-----------------------------------------------------------*/

// --- Format emulated EEPROM for a factory reset
void EE_FormatForFactoryReset(void){
 800367c:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if(*((unsigned long* )0x20007FF0) == 0xBEEFDEAD){
 800367e:	4b06      	ldr	r3, [pc, #24]	; (8003698 <EE_FormatForFactoryReset+0x1c>)
 8003680:	4a06      	ldr	r2, [pc, #24]	; (800369c <EE_FormatForFactoryReset+0x20>)
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d006      	beq.n	8003696 <EE_FormatForFactoryReset+0x1a>
		// Do nothing
	}
	else{
		if(EE_Format() == HAL_OK){
 8003688:	f004 f97c 	bl	8007984 <EE_Format>
 800368c:	2800      	cmp	r0, #0
 800368e:	d102      	bne.n	8003696 <EE_FormatForFactoryReset+0x1a>
			/* Set flag for formated EEPROM */
			*((unsigned long* )0x20007FF0) =0xBEEFDEAD;
 8003690:	4b02      	ldr	r3, [pc, #8]	; (800369c <EE_FormatForFactoryReset+0x20>)
 8003692:	4a01      	ldr	r2, [pc, #4]	; (8003698 <EE_FormatForFactoryReset+0x1c>)
 8003694:	601a      	str	r2, [r3, #0]
		}
	}
	
}
 8003696:	bd10      	pop	{r4, pc}
 8003698:	beefdead 	.word	0xbeefdead
 800369c:	20007ff0 	.word	0x20007ff0

080036a0 <IsLowerCLIbaud>:
/*----------------------------------------------------------------*/

/* --- Check if booting into lower CLI baudrate:
 - Connect P1 TXD and P2 RXD to boot CLI at 115200
 */
uint8_t IsLowerCLIbaud(void){
 80036a0:	b570      	push	{r4, r5, r6, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */

	/* Get GPIOs */
	GetPortGPIOs(P1,&P1_TX_Port,&P1_TX_Pin,&P1_RX_Port,&P1_RX_Pin);
 80036a4:	2512      	movs	r5, #18
 80036a6:	446d      	add	r5, sp
 80036a8:	ab04      	add	r3, sp, #16
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	ab07      	add	r3, sp, #28
 80036ae:	002a      	movs	r2, r5
 80036b0:	a908      	add	r1, sp, #32
 80036b2:	2001      	movs	r0, #1
 80036b4:	f00a faca 	bl	800dc4c <GetPortGPIOs>
	GetPortGPIOs(P2,&P2_TX_Port,&P2_TX_Pin,&P2_RX_Port,&P2_RX_Pin);
 80036b8:	ac03      	add	r4, sp, #12
 80036ba:	9400      	str	r4, [sp, #0]
 80036bc:	ab05      	add	r3, sp, #20
 80036be:	220e      	movs	r2, #14
 80036c0:	446a      	add	r2, sp
 80036c2:	a906      	add	r1, sp, #24
 80036c4:	2002      	movs	r0, #2
 80036c6:	f00a fac1 	bl	800dc4c <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ca:	2301      	movs	r3, #1
 80036cc:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2600      	movs	r6, #0
 80036d0:	960b      	str	r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P1_TX_Pin;
 80036d2:	882b      	ldrh	r3, [r5, #0]
 80036d4:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P1_TX_Port,&GPIO_InitStruct);
 80036d6:	a909      	add	r1, sp, #36	; 0x24
 80036d8:	9808      	ldr	r0, [sp, #32]
 80036da:	f00e fd35 	bl	8012148 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036de:	960a      	str	r6, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036e0:	2302      	movs	r3, #2
 80036e2:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin =P2_RX_Pin;
 80036e4:	8823      	ldrh	r3, [r4, #0]
 80036e6:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef* )P2_RX_Port,&GPIO_InitStruct);
 80036e8:	a909      	add	r1, sp, #36	; 0x24
 80036ea:	9805      	ldr	r0, [sp, #20]
 80036ec:	f00e fd2c 	bl	8012148 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 80036f0:	8829      	ldrh	r1, [r5, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	9808      	ldr	r0, [sp, #32]
 80036f6:	f00e fe9b 	bl	8012430 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 80036fa:	2005      	movs	r0, #5
 80036fc:	f00a feda 	bl	800e4b4 <StartMilliDelay>
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 8003700:	8821      	ldrh	r1, [r4, #0]
 8003702:	9805      	ldr	r0, [sp, #20]
 8003704:	f00e fe8e 	bl	8012424 <HAL_GPIO_ReadPin>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
			return 1;
		}
	}
	
	return 0;
 8003708:	2300      	movs	r3, #0
	if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == RESET){
 800370a:	2800      	cmp	r0, #0
 800370c:	d002      	beq.n	8003714 <IsLowerCLIbaud+0x74>
}
 800370e:	0018      	movs	r0, r3
 8003710:	b00e      	add	sp, #56	; 0x38
 8003712:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef* )P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003714:	3312      	adds	r3, #18
 8003716:	446b      	add	r3, sp
 8003718:	8819      	ldrh	r1, [r3, #0]
 800371a:	2201      	movs	r2, #1
 800371c:	9808      	ldr	r0, [sp, #32]
 800371e:	f00e fe87 	bl	8012430 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 8003722:	2005      	movs	r0, #5
 8003724:	f00a fec6 	bl	800e4b4 <StartMilliDelay>
		if(HAL_GPIO_ReadPin((GPIO_TypeDef* )P2_RX_Port,P2_RX_Pin) == SET){
 8003728:	ab03      	add	r3, sp, #12
 800372a:	8819      	ldrh	r1, [r3, #0]
 800372c:	9805      	ldr	r0, [sp, #20]
 800372e:	f00e fe79 	bl	8012424 <HAL_GPIO_ReadPin>
 8003732:	3801      	subs	r0, #1
 8003734:	4243      	negs	r3, r0
 8003736:	4143      	adcs	r3, r0
			return 1;
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e7e8      	b.n	800370e <IsLowerCLIbaud+0x6e>

0800373c <SetupPortForRemoteBootloaderUpdate>:
/* --- Setup a port for remote ST factory bootloader update:
 - Set baudrate to 57600
 - Enable even parity
 - Set datasize to 9 bits
 */
void SetupPortForRemoteBootloaderUpdate(uint8_t port){
 800373c:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart =GetUart(port);
 800373e:	f00b f893 	bl	800e868 <GetUart>
 8003742:	0004      	movs	r4, r0
	
	huart->Init.BaudRate =57600;
 8003744:	23e1      	movs	r3, #225	; 0xe1
 8003746:	021b      	lsls	r3, r3, #8
 8003748:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	015b      	lsls	r3, r3, #5
 8003754:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);
 8003756:	f010 fd37 	bl	80141c8 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
	__HAL_UART_ENABLE_IT(huart,UART_IT_RXNE);
 800375a:	6822      	ldr	r2, [r4, #0]
 800375c:	6813      	ldr	r3, [r2, #0]
 800375e:	2120      	movs	r1, #32
 8003760:	430b      	orrs	r3, r1
 8003762:	6013      	str	r3, [r2, #0]
}
 8003764:	bd10      	pop	{r4, pc}
	...

08003768 <IsModuleParameter>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
 */
uint8_t IsModuleParameter(char *name){
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	0006      	movs	r6, r0
 800376c:	4d08      	ldr	r5, [pc, #32]	; (8003790 <IsModuleParameter+0x28>)
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 800376e:	2400      	movs	r4, #0
		if(!strcmp(name,(const char* )(modParam[i].paramName)))
 8003770:	68a9      	ldr	r1, [r5, #8]
 8003772:	0030      	movs	r0, r6
 8003774:	f7fc fcc6 	bl	8000104 <strcmp>
 8003778:	2800      	cmp	r0, #0
 800377a:	d006      	beq.n	800378a <IsModuleParameter+0x22>
	for(uint8_t i =0; i < NUM_MODULE_PARAMS; i++){
 800377c:	3401      	adds	r4, #1
 800377e:	b2e4      	uxtb	r4, r4
 8003780:	350c      	adds	r5, #12
 8003782:	2c07      	cmp	r4, #7
 8003784:	d1f4      	bne.n	8003770 <IsModuleParameter+0x8>
			return i + 1;
	}
	return 0;
 8003786:	2000      	movs	r0, #0
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
			return i + 1;
 800378a:	3401      	adds	r4, #1
 800378c:	b2e0      	uxtb	r0, r4
 800378e:	e7fb      	b.n	8003788 <IsModuleParameter+0x20>
 8003790:	200000ac 	.word	0x200000ac

08003794 <IsMathOperator>:

/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
 */
uint8_t IsMathOperator(char *string){
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	0004      	movs	r4, r0
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
		if(!strcmp(string,"="))
 8003798:	491b      	ldr	r1, [pc, #108]	; (8003808 <IsMathOperator+0x74>)
 800379a:	f7fc fcb3 	bl	8000104 <strcmp>
 800379e:	0006      	movs	r6, r0
 80037a0:	2506      	movs	r5, #6
 80037a2:	2e00      	cmp	r6, #0
 80037a4:	d023      	beq.n	80037ee <IsMathOperator+0x5a>
			return MATH_EQUAL;
		else if(!strcmp(string,">"))
 80037a6:	4919      	ldr	r1, [pc, #100]	; (800380c <IsMathOperator+0x78>)
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fc fcab 	bl	8000104 <strcmp>
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d01f      	beq.n	80037f2 <IsMathOperator+0x5e>
			return MATH_GREATER;
		else if(!strcmp(string,"<"))
 80037b2:	4917      	ldr	r1, [pc, #92]	; (8003810 <IsMathOperator+0x7c>)
 80037b4:	0020      	movs	r0, r4
 80037b6:	f7fc fca5 	bl	8000104 <strcmp>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d01b      	beq.n	80037f6 <IsMathOperator+0x62>
			return MATH_SMALLER;
		else if(!strcmp(string,">="))
 80037be:	4915      	ldr	r1, [pc, #84]	; (8003814 <IsMathOperator+0x80>)
 80037c0:	0020      	movs	r0, r4
 80037c2:	f7fc fc9f 	bl	8000104 <strcmp>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d017      	beq.n	80037fa <IsMathOperator+0x66>
			return MATH_GREATER_EQUAL;
		else if(!strcmp(string,"<="))
 80037ca:	4913      	ldr	r1, [pc, #76]	; (8003818 <IsMathOperator+0x84>)
 80037cc:	0020      	movs	r0, r4
 80037ce:	f7fc fc99 	bl	8000104 <strcmp>
 80037d2:	2800      	cmp	r0, #0
 80037d4:	d013      	beq.n	80037fe <IsMathOperator+0x6a>
			return MATH_SMALLER_EQUAL;
		else if(!strcmp(string,"!="))
 80037d6:	4911      	ldr	r1, [pc, #68]	; (800381c <IsMathOperator+0x88>)
 80037d8:	0020      	movs	r0, r4
 80037da:	f7fc fc93 	bl	8000104 <strcmp>
 80037de:	2800      	cmp	r0, #0
 80037e0:	d00f      	beq.n	8003802 <IsMathOperator+0x6e>
 80037e2:	3d01      	subs	r5, #1
 80037e4:	b2ed      	uxtb	r5, r5
	for(uint8_t i =0; i < NUM_MATH_OPERATORS; i++){
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	d1db      	bne.n	80037a2 <IsMathOperator+0xe>
			return MATH_NOT_EQUAL;
	}
	return 0;
 80037ea:	2000      	movs	r0, #0
}
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
			return MATH_EQUAL;
 80037ee:	2001      	movs	r0, #1
 80037f0:	e7fc      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_GREATER;
 80037f2:	2002      	movs	r0, #2
 80037f4:	e7fa      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_SMALLER;
 80037f6:	2003      	movs	r0, #3
 80037f8:	e7f8      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 80037fa:	2004      	movs	r0, #4
 80037fc:	e7f6      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 80037fe:	2005      	movs	r0, #5
 8003800:	e7f4      	b.n	80037ec <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003802:	2006      	movs	r0, #6
 8003804:	e7f2      	b.n	80037ec <IsMathOperator+0x58>
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	08019570 	.word	0x08019570
 800380c:	08019574 	.word	0x08019574
 8003810:	08019578 	.word	0x08019578
 8003814:	0801957c 	.word	0x0801957c
 8003818:	08019580 	.word	0x08019580
 800381c:	08019584 	.word	0x08019584

08003820 <ExploreNeighbors>:
//#endif
/*-----------------------------------------------------------*/
#ifndef __N
/* --- Explore adjacent neighbors 
 */
BOS_Status ExploreNeighbors(uint8_t ignore){
 8003820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003822:	46c6      	mov	lr, r8
 8003824:	b500      	push	{lr}
 8003826:	b082      	sub	sp, #8
 8003828:	0006      	movs	r6, r0
	BOS_Status result =BOS_OK;
	
	/* Send Hi messages to adjacent neighbors */
	for(uint8_t port =1; port <= NumOfPorts; port++){
 800382a:	2401      	movs	r4, #1
		if(port != ignore){
			/* This module info */
			messageParams[0] =(uint8_t )(myPN >> 8);
 800382c:	4b0f      	ldr	r3, [pc, #60]	; (800386c <ExploreNeighbors+0x4c>)
 800382e:	4698      	mov	r8, r3
 8003830:	4d0f      	ldr	r5, [pc, #60]	; (8003870 <ExploreNeighbors+0x50>)
			messageParams[1] =(uint8_t )myPN;
			messageParams[2] =port;
			/* Port, Source = 0 (myID), Destination = 0 (adjacent neighbor), message code, number of parameters */
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003832:	2703      	movs	r7, #3
		if(port != ignore){
 8003834:	42a6      	cmp	r6, r4
 8003836:	d00f      	beq.n	8003858 <ExploreNeighbors+0x38>
			messageParams[0] =(uint8_t )(myPN >> 8);
 8003838:	4643      	mov	r3, r8
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0a1a      	lsrs	r2, r3, #8
 800383e:	702a      	strb	r2, [r5, #0]
			messageParams[1] =(uint8_t )myPN;
 8003840:	706b      	strb	r3, [r5, #1]
			messageParams[2] =port;
 8003842:	70ac      	strb	r4, [r5, #2]
			SendMessageFromPort(port,0,0,CODE_HI,3);
 8003844:	9700      	str	r7, [sp, #0]
 8003846:	230a      	movs	r3, #10
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	0020      	movs	r0, r4
 800384e:	f005 ff03 	bl	8009658 <SendMessageFromPort>
			/* Minimum delay between two consequetive SendMessage commands (with response) */
			osDelay(10);
 8003852:	200a      	movs	r0, #10
 8003854:	f00b f957 	bl	800eb06 <osDelay>
	for(uint8_t port =1; port <= NumOfPorts; port++){
 8003858:	3401      	adds	r4, #1
 800385a:	b2e4      	uxtb	r4, r4
 800385c:	2c07      	cmp	r4, #7
 800385e:	d1e9      	bne.n	8003834 <ExploreNeighbors+0x14>
		}
	}
	
	return result;
}
 8003860:	2000      	movs	r0, #0
 8003862:	b002      	add	sp, #8
 8003864:	bc04      	pop	{r2}
 8003866:	4690      	mov	r8, r2
 8003868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	20000078 	.word	0x20000078
 8003870:	20000fac 	.word	0x20000fac

08003874 <FindBroadcastRoutes>:
#endif
/*-----------------------------------------------------------*/

/* --- Find array broadcast routes starting from a given module (Takes about 50 usec) */
BOS_Status FindBroadcastRoutes(uint8_t src){
 8003874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003876:	46de      	mov	lr, fp
 8003878:	4657      	mov	r7, sl
 800387a:	464e      	mov	r6, r9
 800387c:	4645      	mov	r5, r8
 800387e:	b5e0      	push	{r5, r6, r7, lr}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
	BOS_Status result =BOS_OK;
	uint8_t p =0, m =0, level =0, untaged =0;
	uint8_t modules[N];			// Todo: Optimize to make bit-wise
 8003884:	4b47      	ldr	r3, [pc, #284]	; (80039a4 <FindBroadcastRoutes+0x130>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	469c      	mov	ip, r3
 800388a:	3307      	adds	r3, #7
 800388c:	08db      	lsrs	r3, r3, #3
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	466a      	mov	r2, sp
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	469d      	mov	sp, r3
 8003896:	466c      	mov	r4, sp
	
	/* 1. Initialize modules list and broadcast routes */

	for(m =0; m < N; m++){
 8003898:	4663      	mov	r3, ip
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00d      	beq.n	80038ba <FindBroadcastRoutes+0x46>
 800389e:	0023      	movs	r3, r4
 80038a0:	4a41      	ldr	r2, [pc, #260]	; (80039a8 <FindBroadcastRoutes+0x134>)
 80038a2:	4661      	mov	r1, ip
 80038a4:	1e4d      	subs	r5, r1, #1
 80038a6:	b2ed      	uxtb	r5, r5
 80038a8:	3501      	adds	r5, #1
 80038aa:	192d      	adds	r5, r5, r4
		modules[m] =0;
 80038ac:	2100      	movs	r1, #0
 80038ae:	7019      	strb	r1, [r3, #0]
		bcastRoutes[m] =0;
 80038b0:	8011      	strh	r1, [r2, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	3202      	adds	r2, #2
	for(m =0; m < N; m++){
 80038b6:	42ab      	cmp	r3, r5
 80038b8:	d1f9      	bne.n	80038ae <FindBroadcastRoutes+0x3a>
	}
	modules[src - 1] =++level;					// Tag the source
 80038ba:	3801      	subs	r0, #1
 80038bc:	2301      	movs	r3, #1
 80038be:	5423      	strb	r3, [r4, r0]
 80038c0:	2216      	movs	r2, #22
 80038c2:	4342      	muls	r2, r0
 80038c4:	3202      	adds	r2, #2
 80038c6:	4b39      	ldr	r3, [pc, #228]	; (80039ac <FindBroadcastRoutes+0x138>)
 80038c8:	18d2      	adds	r2, r2, r3
 80038ca:	2100      	movs	r1, #0

	++level;												// Move one level
	
	for(p =1; p <= 6; p++){
		if(array[src - 1][p]){
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038cc:	4d36      	ldr	r5, [pc, #216]	; (80039a8 <FindBroadcastRoutes+0x134>)
 80038ce:	0040      	lsls	r0, r0, #1
 80038d0:	2301      	movs	r3, #1
 80038d2:	4698      	mov	r8, r3
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038d4:	46a3      	mov	fp, r4
 80038d6:	e003      	b.n	80038e0 <FindBroadcastRoutes+0x6c>
 80038d8:	3101      	adds	r1, #1
 80038da:	3202      	adds	r2, #2
	for(p =1; p <= 6; p++){
 80038dc:	2906      	cmp	r1, #6
 80038de:	d011      	beq.n	8003904 <FindBroadcastRoutes+0x90>
		if(array[src - 1][p]){
 80038e0:	8813      	ldrh	r3, [r2, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f8      	beq.n	80038d8 <FindBroadcastRoutes+0x64>
			bcastRoutes[src - 1] |=(0x01 << (p - 1));
 80038e6:	5b46      	ldrh	r6, [r0, r5]
 80038e8:	46b1      	mov	r9, r6
 80038ea:	4646      	mov	r6, r8
 80038ec:	408e      	lsls	r6, r1
 80038ee:	46b2      	mov	sl, r6
 80038f0:	464e      	mov	r6, r9
 80038f2:	4654      	mov	r4, sl
 80038f4:	4326      	orrs	r6, r4
 80038f6:	5346      	strh	r6, [r0, r5]
			modules[(array[src - 1][p] >> 3) - 1] =level;												// Tag this module as already broadcasted-to
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	445b      	add	r3, fp
 80038fc:	3b01      	subs	r3, #1
 80038fe:	2402      	movs	r4, #2
 8003900:	701c      	strb	r4, [r3, #0]
 8003902:	e7e9      	b.n	80038d8 <FindBroadcastRoutes+0x64>
 8003904:	465c      	mov	r4, fp
	++level;												// Move one level
 8003906:	2602      	movs	r6, #2
 8003908:	4b28      	ldr	r3, [pc, #160]	; (80039ac <FindBroadcastRoutes+0x138>)
 800390a:	3302      	adds	r3, #2
 800390c:	607b      	str	r3, [r7, #4]
			{
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
				    {
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
					{
						bcastRoutes[m] |=(0x01 << (p - 1));
 800390e:	2301      	movs	r3, #1
 8003910:	469b      	mov	fp, r3
 8003912:	46b0      	mov	r8, r6
 8003914:	0026      	movs	r6, r4
		++level;											// Move one level
 8003916:	4643      	mov	r3, r8
 8003918:	3301      	adds	r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4698      	mov	r8, r3
		for(m =0; m < N; m++)					// Scan all modules in the list
 800391e:	4663      	mov	r3, ip
 8003920:	2b00      	cmp	r3, #0
 8003922:	d035      	beq.n	8003990 <FindBroadcastRoutes+0x11c>
 8003924:	2200      	movs	r2, #0
		untaged =0;								// Reset the untaged counter
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 800392a:	3b01      	subs	r3, #1
 800392c:	4443      	add	r3, r8
 800392e:	4699      	mov	r9, r3
 8003930:	e01e      	b.n	8003970 <FindBroadcastRoutes+0xfc>
 8003932:	3001      	adds	r0, #1
 8003934:	3102      	adds	r1, #2
				for(p =1; p <= 6; p++)					// Check all neighbors if they're not already broadcasted-to
 8003936:	2806      	cmp	r0, #6
 8003938:	d015      	beq.n	8003966 <FindBroadcastRoutes+0xf2>
					if(array[m][p] && (modules[(array[m][p] >> 3) - 1] == 0)) // Found an untaged module
 800393a:	880b      	ldrh	r3, [r1, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f8      	beq.n	8003932 <FindBroadcastRoutes+0xbe>
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	3b01      	subs	r3, #1
 8003944:	5cf5      	ldrb	r5, [r6, r3]
 8003946:	2d00      	cmp	r5, #0
 8003948:	d1f3      	bne.n	8003932 <FindBroadcastRoutes+0xbe>
						bcastRoutes[m] |=(0x01 << (p - 1));
 800394a:	4a17      	ldr	r2, [pc, #92]	; (80039a8 <FindBroadcastRoutes+0x134>)
 800394c:	5aa5      	ldrh	r5, [r4, r2]
 800394e:	465a      	mov	r2, fp
 8003950:	4082      	lsls	r2, r0
 8003952:	4315      	orrs	r5, r2
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <FindBroadcastRoutes+0x134>)
 8003956:	52a5      	strh	r5, [r4, r2]
						modules[(array[m][p] >> 3) - 1] =level; // Tag this module as already broadcasted-to
 8003958:	4642      	mov	r2, r8
 800395a:	54f2      	strb	r2, [r6, r3]
						++untaged;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3301      	adds	r3, #1
 8003960:	b2db      	uxtb	r3, r3
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e7e5      	b.n	8003932 <FindBroadcastRoutes+0xbe>
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	3201      	adds	r2, #1
		for(m =0; m < N; m++)					// Scan all modules in the list
 800396a:	b2d3      	uxtb	r3, r2
 800396c:	4563      	cmp	r3, ip
 800396e:	d20c      	bcs.n	800398a <FindBroadcastRoutes+0x116>
			if(modules[m] == (level - 1))					// This module is already broadcasted-to from the previous level
 8003970:	5cb3      	ldrb	r3, [r6, r2]
 8003972:	454b      	cmp	r3, r9
 8003974:	d1f8      	bne.n	8003968 <FindBroadcastRoutes+0xf4>
 8003976:	2116      	movs	r1, #22
 8003978:	4351      	muls	r1, r2
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	469a      	mov	sl, r3
 800397e:	4451      	add	r1, sl
 8003980:	0053      	lsls	r3, r2, #1
 8003982:	2000      	movs	r0, #0
 8003984:	60ba      	str	r2, [r7, #8]
 8003986:	001c      	movs	r4, r3
 8003988:	e7d7      	b.n	800393a <FindBroadcastRoutes+0xc6>
					}
				}
			}
		}
	} while(untaged);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1c2      	bne.n	8003916 <FindBroadcastRoutes+0xa2>
	
	return result;
}
 8003990:	2000      	movs	r0, #0
 8003992:	46bd      	mov	sp, r7
 8003994:	b005      	add	sp, #20
 8003996:	bc3c      	pop	{r2, r3, r4, r5}
 8003998:	4690      	mov	r8, r2
 800399a:	4699      	mov	r9, r3
 800399c:	46a2      	mov	sl, r4
 800399e:	46ab      	mov	fp, r5
 80039a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	20000044 	.word	0x20000044
 80039a8:	20000d2c 	.word	0x20000d2c
 80039ac:	20000aec 	.word	0x20000aec

080039b0 <minArr>:
	return 0;
}

/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited
 */
uint8_t minArr(uint8_t *arr,uint8_t *Q){
 80039b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t smallest =0xFF;
	uint8_t index =0;
	
	/* Consider first element as smallest */
	if(!Q[0])						// Not visited yet
 80039b2:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest =0xFF;
 80039b4:	24ff      	movs	r4, #255	; 0xff
	if(!Q[0])						// Not visited yet
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d100      	bne.n	80039bc <minArr+0xc>
		smallest =arr[0];
 80039ba:	7804      	ldrb	r4, [r0, #0]
	
	for(int i =0; i < N; i++){
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <minArr+0x38>)
 80039be:	781d      	ldrb	r5, [r3, #0]
 80039c0:	2d00      	cmp	r5, #0
 80039c2:	dd0e      	ble.n	80039e2 <minArr+0x32>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2700      	movs	r7, #0
 80039c8:	e002      	b.n	80039d0 <minArr+0x20>
 80039ca:	3301      	adds	r3, #1
 80039cc:	42ab      	cmp	r3, r5
 80039ce:	da09      	bge.n	80039e4 <minArr+0x34>
		if((arr[i] < smallest) && !Q[i]){
 80039d0:	5cc2      	ldrb	r2, [r0, r3]
 80039d2:	42a2      	cmp	r2, r4
 80039d4:	d2f9      	bcs.n	80039ca <minArr+0x1a>
 80039d6:	5cce      	ldrb	r6, [r1, r3]
 80039d8:	2e00      	cmp	r6, #0
 80039da:	d1f6      	bne.n	80039ca <minArr+0x1a>
			smallest =arr[i];
			index =i;
 80039dc:	b2df      	uxtb	r7, r3
			smallest =arr[i];
 80039de:	0014      	movs	r4, r2
 80039e0:	e7f3      	b.n	80039ca <minArr+0x1a>
	for(int i =0; i < N; i++){
 80039e2:	2700      	movs	r7, #0
		}
	}
	
	return index;
}
 80039e4:	0038      	movs	r0, r7
 80039e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039e8:	20000044 	.word	0x20000044

080039ec <QnotEmpty>:
/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited)
 */
uint8_t QnotEmpty(uint8_t *Q){
	char temp =1;
	
	for(int i =0; i < N; i++){
 80039ec:	4b07      	ldr	r3, [pc, #28]	; (8003a0c <QnotEmpty+0x20>)
 80039ee:	7819      	ldrb	r1, [r3, #0]
 80039f0:	2900      	cmp	r1, #0
 80039f2:	d008      	beq.n	8003a06 <QnotEmpty+0x1a>
 80039f4:	0003      	movs	r3, r0
 80039f6:	1841      	adds	r1, r0, r1
	char temp =1;
 80039f8:	2001      	movs	r0, #1
		temp &=Q[i];
 80039fa:	781a      	ldrb	r2, [r3, #0]
 80039fc:	4010      	ands	r0, r2
 80039fe:	3301      	adds	r3, #1
	for(int i =0; i < N; i++){
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d1fa      	bne.n	80039fa <QnotEmpty+0xe>
	}
	
	return temp;
}
 8003a04:	4770      	bx	lr
	char temp =1;
 8003a06:	2001      	movs	r0, #1
 8003a08:	e7fc      	b.n	8003a04 <QnotEmpty+0x18>
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000044 	.word	0x20000044

08003a10 <FindRoute>:
uint8_t FindRoute(uint8_t sourceID,uint8_t desID){
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	46de      	mov	lr, fp
 8003a14:	4657      	mov	r7, sl
 8003a16:	464e      	mov	r6, r9
 8003a18:	4645      	mov	r5, r8
 8003a1a:	b5e0      	push	{r5, r6, r7, lr}
 8003a1c:	b08f      	sub	sp, #60	; 0x3c
 8003a1e:	0005      	movs	r5, r0
 8003a20:	468a      	mov	sl, r1
	uint8_t Q[50] ={0};			// All nodes initially in Q (unvisited nodes)
 8003a22:	2232      	movs	r2, #50	; 0x32
 8003a24:	2100      	movs	r1, #0
 8003a26:	a801      	add	r0, sp, #4
 8003a28:	f010 ffc6 	bl	80149b8 <memset>
	memset(route,0,sizeof(route));
 8003a2c:	221a      	movs	r2, #26
 8003a2e:	2100      	movs	r1, #0
 8003a30:	485a      	ldr	r0, [pc, #360]	; (8003b9c <FindRoute+0x18c>)
 8003a32:	f010 ffc1 	bl	80149b8 <memset>
	routeDist[sourceID - 1] =0;               // Distance from source to source
 8003a36:	0029      	movs	r1, r5
 8003a38:	1e68      	subs	r0, r5, #1
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <FindRoute+0x190>)
 8003a3e:	5413      	strb	r3, [r2, r0]
	routePrev[sourceID - 1] =0; // Previous node in optimal path initialization undefined
 8003a40:	4a58      	ldr	r2, [pc, #352]	; (8003ba4 <FindRoute+0x194>)
 8003a42:	5413      	strb	r3, [r2, r0]
 8003a44:	2516      	movs	r5, #22
 8003a46:	4345      	muls	r5, r0
 8003a48:	3502      	adds	r5, #2
 8003a4a:	4b57      	ldr	r3, [pc, #348]	; (8003ba8 <FindRoute+0x198>)
 8003a4c:	18ed      	adds	r5, r5, r3
 8003a4e:	002a      	movs	r2, r5
	for(int col =1; col <= 6; col++){
 8003a50:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003a52:	4653      	mov	r3, sl
 8003a54:	b29c      	uxth	r4, r3
 8003a56:	e003      	b.n	8003a60 <FindRoute+0x50>
	for(int col =1; col <= 6; col++){
 8003a58:	3001      	adds	r0, #1
 8003a5a:	3202      	adds	r2, #2
 8003a5c:	2807      	cmp	r0, #7
 8003a5e:	d00f      	beq.n	8003a80 <FindRoute+0x70>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == desID)){
 8003a60:	8813      	ldrh	r3, [r2, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f8      	beq.n	8003a58 <FindRoute+0x48>
 8003a66:	08db      	lsrs	r3, r3, #3
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d1f5      	bne.n	8003a58 <FindRoute+0x48>
			routeDist[desID - 1] =1;
 8003a6c:	4b4c      	ldr	r3, [pc, #304]	; (8003ba0 <FindRoute+0x190>)
 8003a6e:	4453      	add	r3, sl
 8003a70:	3b01      	subs	r3, #1
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
			route[0] =desID;
 8003a76:	4b49      	ldr	r3, [pc, #292]	; (8003b9c <FindRoute+0x18c>)
 8003a78:	4652      	mov	r2, sl
 8003a7a:	701a      	strb	r2, [r3, #0]
			return col;
 8003a7c:	b2c0      	uxtb	r0, r0
 8003a7e:	e085      	b.n	8003b8c <FindRoute+0x17c>
	for(int i =1; i <= N; i++){
 8003a80:	4b4a      	ldr	r3, [pc, #296]	; (8003bac <FindRoute+0x19c>)
 8003a82:	781e      	ldrb	r6, [r3, #0]
 8003a84:	2e00      	cmp	r6, #0
 8003a86:	dd11      	ble.n	8003aac <FindRoute+0x9c>
 8003a88:	2301      	movs	r3, #1
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a8a:	24ff      	movs	r4, #255	; 0xff
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003a8c:	4f45      	ldr	r7, [pc, #276]	; (8003ba4 <FindRoute+0x194>)
 8003a8e:	2000      	movs	r0, #0
 8003a90:	46ac      	mov	ip, r5
 8003a92:	e002      	b.n	8003a9a <FindRoute+0x8a>
	for(int i =1; i <= N; i++){
 8003a94:	3301      	adds	r3, #1
 8003a96:	42b3      	cmp	r3, r6
 8003a98:	dc07      	bgt.n	8003aaa <FindRoute+0x9a>
		if(i != sourceID) // Where i has not yet been removed from Q (unvisited nodes)
 8003a9a:	4299      	cmp	r1, r3
 8003a9c:	d0fa      	beq.n	8003a94 <FindRoute+0x84>
			routeDist[i - 1] =0xFF; // Unknown distance function from source to i
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	4d3f      	ldr	r5, [pc, #252]	; (8003ba0 <FindRoute+0x190>)
 8003aa2:	54ac      	strb	r4, [r5, r2]
			routePrev[i - 1] =0;   // Previous node in optimal path from source
 8003aa4:	18ba      	adds	r2, r7, r2
 8003aa6:	7010      	strb	r0, [r2, #0]
 8003aa8:	e7f4      	b.n	8003a94 <FindRoute+0x84>
 8003aaa:	4665      	mov	r5, ip
	uint8_t u =0;
 8003aac:	2400      	movs	r4, #0
 8003aae:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <FindRoute+0x198>)
 8003ab0:	4698      	mov	r8, r3
 8003ab2:	230e      	movs	r3, #14
 8003ab4:	4443      	add	r3, r8
 8003ab6:	4656      	mov	r6, sl
 8003ab8:	469b      	mov	fp, r3
 8003aba:	46a9      	mov	r9, r5
 8003abc:	e01d      	b.n	8003afa <FindRoute+0xea>
 8003abe:	464d      	mov	r5, r9
 8003ac0:	46b2      	mov	sl, r6
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003ac2:	0034      	movs	r4, r6
 8003ac4:	e034      	b.n	8003b30 <FindRoute+0x120>
 8003ac6:	3102      	adds	r1, #2
		for(uint8_t n =1; n <= 6; n++)      		// Check all module ports
 8003ac8:	4281      	cmp	r1, r0
 8003aca:	d015      	beq.n	8003af8 <FindRoute+0xe8>
			if(array[u - 1][n])		// There's a neighbor v at this port n
 8003acc:	880b      	ldrh	r3, [r1, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f9      	beq.n	8003ac6 <FindRoute+0xb6>
				v =(array[u - 1][n] >> 3);
 8003ad2:	08db      	lsrs	r3, r3, #3
				if(!Q[v - 1])								// v is still in Q
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	5cd7      	ldrb	r7, [r2, r3]
 8003ada:	2f00      	cmp	r7, #0
 8003adc:	d1f3      	bne.n	8003ac6 <FindRoute+0xb6>
					alt =routeDist[u - 1] + 1;					// Add one hop
 8003ade:	4f30      	ldr	r7, [pc, #192]	; (8003ba0 <FindRoute+0x190>)
 8003ae0:	5d7f      	ldrb	r7, [r7, r5]
 8003ae2:	3701      	adds	r7, #1
 8003ae4:	b2ff      	uxtb	r7, r7
					if(alt < routeDist[v - 1]) // A shorter path to v has been found
 8003ae6:	4e2e      	ldr	r6, [pc, #184]	; (8003ba0 <FindRoute+0x190>)
 8003ae8:	5cf6      	ldrb	r6, [r6, r3]
 8003aea:	42be      	cmp	r6, r7
 8003aec:	d9eb      	bls.n	8003ac6 <FindRoute+0xb6>
						routeDist[v - 1] =alt;
 8003aee:	4e2c      	ldr	r6, [pc, #176]	; (8003ba0 <FindRoute+0x190>)
 8003af0:	54f7      	strb	r7, [r6, r3]
						routePrev[v - 1] =u;
 8003af2:	4e2c      	ldr	r6, [pc, #176]	; (8003ba4 <FindRoute+0x194>)
 8003af4:	54f4      	strb	r4, [r6, r3]
 8003af6:	e7e6      	b.n	8003ac6 <FindRoute+0xb6>
 8003af8:	4656      	mov	r6, sl
	while(!QnotEmpty(Q)){
 8003afa:	a801      	add	r0, sp, #4
 8003afc:	f7ff ff76 	bl	80039ec <QnotEmpty>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d113      	bne.n	8003b2c <FindRoute+0x11c>
		u =minArr(routeDist,Q) + 1;				// Source node in first case
 8003b04:	a901      	add	r1, sp, #4
 8003b06:	4826      	ldr	r0, [pc, #152]	; (8003ba0 <FindRoute+0x190>)
 8003b08:	f7ff ff52 	bl	80039b0 <minArr>
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	b2c4      	uxtb	r4, r0
		if(u == desID){
 8003b10:	42b4      	cmp	r4, r6
 8003b12:	d0d4      	beq.n	8003abe <FindRoute+0xae>
			Q[u - 1] =1;									// Remove u from Q
 8003b14:	1e65      	subs	r5, r4, #1
 8003b16:	ab01      	add	r3, sp, #4
 8003b18:	2201      	movs	r2, #1
 8003b1a:	555a      	strb	r2, [r3, r5]
 8003b1c:	2016      	movs	r0, #22
 8003b1e:	4368      	muls	r0, r5
 8003b20:	1c81      	adds	r1, r0, #2
 8003b22:	4441      	add	r1, r8
 8003b24:	4458      	add	r0, fp
				if(!Q[v - 1])								// v is still in Q
 8003b26:	001a      	movs	r2, r3
 8003b28:	46b2      	mov	sl, r6
 8003b2a:	e7cf      	b.n	8003acc <FindRoute+0xbc>
 8003b2c:	464d      	mov	r5, r9
 8003b2e:	46b2      	mov	sl, r6
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b30:	4b1c      	ldr	r3, [pc, #112]	; (8003ba4 <FindRoute+0x194>)
 8003b32:	191b      	adds	r3, r3, r4
 8003b34:	3b01      	subs	r3, #1
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2a00      	cmp	r2, #0
 8003b3c:	d00e      	beq.n	8003b5c <FindRoute+0x14c>
		route[j++] =u;          			// Push the vertex onto the stack
 8003b3e:	4917      	ldr	r1, [pc, #92]	; (8003b9c <FindRoute+0x18c>)
 8003b40:	468c      	mov	ip, r1
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b42:	4e18      	ldr	r6, [pc, #96]	; (8003ba4 <FindRoute+0x194>)
 8003b44:	e000      	b.n	8003b48 <FindRoute+0x138>
 8003b46:	000a      	movs	r2, r1
		route[j++] =u;          			// Push the vertex onto the stack
 8003b48:	1c58      	adds	r0, r3, #1
 8003b4a:	4661      	mov	r1, ip
 8003b4c:	54cc      	strb	r4, [r1, r3]
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b4e:	18b3      	adds	r3, r6, r2
 8003b50:	3b01      	subs	r3, #1
 8003b52:	7819      	ldrb	r1, [r3, #0]
 8003b54:	0014      	movs	r4, r2
		route[j++] =u;          			// Push the vertex onto the stack
 8003b56:	b2c3      	uxtb	r3, r0
	while(routePrev[u - 1])   // Construct the shortest path with a stack route
 8003b58:	2900      	cmp	r1, #0
 8003b5a:	d1f4      	bne.n	8003b46 <FindRoute+0x136>
	for(int col =1; col <= 6; col++){
 8003b5c:	2001      	movs	r0, #1
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b5e:	490f      	ldr	r1, [pc, #60]	; (8003b9c <FindRoute+0x18c>)
 8003b60:	4b0f      	ldr	r3, [pc, #60]	; (8003ba0 <FindRoute+0x190>)
 8003b62:	4453      	add	r3, sl
 8003b64:	001f      	movs	r7, r3
 8003b66:	3f01      	subs	r7, #1
 8003b68:	e003      	b.n	8003b72 <FindRoute+0x162>
	for(int col =1; col <= 6; col++){
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	3502      	adds	r5, #2
 8003b6e:	2807      	cmp	r0, #7
 8003b70:	d00b      	beq.n	8003b8a <FindRoute+0x17a>
		if(array[sourceID - 1][col] && ((array[sourceID - 1][col] >> 3) == route[routeDist[desID - 1] - 1])){
 8003b72:	882b      	ldrh	r3, [r5, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f8      	beq.n	8003b6a <FindRoute+0x15a>
 8003b78:	783a      	ldrb	r2, [r7, #0]
 8003b7a:	188a      	adds	r2, r1, r2
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	7812      	ldrb	r2, [r2, #0]
 8003b80:	08db      	lsrs	r3, r3, #3
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d1f1      	bne.n	8003b6a <FindRoute+0x15a>
			return col;
 8003b86:	b2c0      	uxtb	r0, r0
 8003b88:	e000      	b.n	8003b8c <FindRoute+0x17c>
	return 0;
 8003b8a:	2000      	movs	r0, #0
}
 8003b8c:	b00f      	add	sp, #60	; 0x3c
 8003b8e:	bc3c      	pop	{r2, r3, r4, r5}
 8003b90:	4690      	mov	r8, r2
 8003b92:	4699      	mov	r9, r3
 8003b94:	46a2      	mov	sl, r4
 8003b96:	46ab      	mov	fp, r5
 8003b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	20006f68 	.word	0x20006f68
 8003ba0:	2000118c 	.word	0x2000118c
 8003ba4:	200011a8 	.word	0x200011a8
 8003ba8:	20000aec 	.word	0x20000aec
 8003bac:	20000044 	.word	0x20000044

08003bb0 <remoteBootloaderUpdate>:
void remoteBootloaderUpdate(uint8_t src,uint8_t dst,uint8_t inport,uint8_t outport){
 8003bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	0007      	movs	r7, r0
 8003bb6:	000e      	movs	r6, r1
 8003bb8:	9205      	str	r2, [sp, #20]
 8003bba:	001d      	movs	r5, r3
	myOutport =FindRoute(myID,dst);
 8003bbc:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003bbe:	7818      	ldrb	r0, [r3, #0]
 8003bc0:	f7ff ff26 	bl	8003a10 <FindRoute>
 8003bc4:	9004      	str	r0, [sp, #16]
	if(outport && dst == myID){ /* This is a 'via port' update and I'm the last module */
 8003bc6:	2d00      	cmp	r5, #0
 8003bc8:	d020      	beq.n	8003c0c <remoteBootloaderUpdate+0x5c>
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003bcc:	781c      	ldrb	r4, [r3, #0]
 8003bce:	42b4      	cmp	r4, r6
 8003bd0:	d05f      	beq.n	8003c92 <remoteBootloaderUpdate+0xe2>
	if(src == myID){
 8003bd2:	42bc      	cmp	r4, r7
 8003bd4:	d034      	beq.n	8003c40 <remoteBootloaderUpdate+0x90>
	uint8_t myOutport =0, lastModule =0;
 8003bd6:	2400      	movs	r4, #0
	SetupPortForRemoteBootloaderUpdate(inport);
 8003bd8:	9805      	ldr	r0, [sp, #20]
 8003bda:	f7ff fdaf 	bl	800373c <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 8003bde:	9804      	ldr	r0, [sp, #16]
 8003be0:	f7ff fdac 	bl	800373c <SetupPortForRemoteBootloaderUpdate>
	if(lastModule == myID){
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	42a3      	cmp	r3, r4
 8003bea:	d046      	beq.n	8003c7a <remoteBootloaderUpdate+0xca>
	StartScastDMAStream(inport,myID,myOutport,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,false);
 8003bec:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003bee:	7819      	ldrb	r1, [r3, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9303      	str	r3, [sp, #12]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	9302      	str	r3, [sp, #8]
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	3303      	adds	r3, #3
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	000b      	movs	r3, r1
 8003c00:	9a04      	ldr	r2, [sp, #16]
 8003c02:	9805      	ldr	r0, [sp, #20]
 8003c04:	f005 ffd4 	bl	8009bb0 <StartScastDMAStream>
}
 8003c08:	b007      	add	sp, #28
 8003c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(NumberOfHops(dst)== 1)
 8003c0c:	4b24      	ldr	r3, [pc, #144]	; (8003ca0 <remoteBootloaderUpdate+0xf0>)
 8003c0e:	199b      	adds	r3, r3, r6
 8003c10:	3b01      	subs	r3, #1
 8003c12:	781a      	ldrb	r2, [r3, #0]
 8003c14:	2a01      	cmp	r2, #1
 8003c16:	d010      	beq.n	8003c3a <remoteBootloaderUpdate+0x8a>
		lastModule = route[NumberOfHops(dst)-1]; /* previous module = route[Number of hops - 1] */
 8003c18:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <remoteBootloaderUpdate+0xf4>)
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	781c      	ldrb	r4, [r3, #0]
	if(src == myID){
 8003c20:	4b1e      	ldr	r3, [pc, #120]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	42bb      	cmp	r3, r7
 8003c26:	d1d7      	bne.n	8003bd8 <remoteBootloaderUpdate+0x28>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c28:	f00b f882 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 8003c2c:	0007      	movs	r7, r0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateMessage,dst);
 8003c2e:	4b1e      	ldr	r3, [pc, #120]	; (8003ca8 <remoteBootloaderUpdate+0xf8>)
 8003c30:	6819      	ldr	r1, [r3, #0]
 8003c32:	0032      	movs	r2, r6
 8003c34:	f011 f8ec 	bl	8014e10 <sprintf>
 8003c38:	e00d      	b.n	8003c56 <remoteBootloaderUpdate+0xa6>
		lastModule = myID;
 8003c3a:	4b18      	ldr	r3, [pc, #96]	; (8003c9c <remoteBootloaderUpdate+0xec>)
 8003c3c:	781c      	ldrb	r4, [r3, #0]
 8003c3e:	e7ef      	b.n	8003c20 <remoteBootloaderUpdate+0x70>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c40:	f00b f876 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 8003c44:	0007      	movs	r7, r0
	uint8_t myOutport =0, lastModule =0;
 8003c46:	2400      	movs	r4, #0
			sprintf((char* )pcOutputString,pcRemoteBootloaderUpdateViaPortMessage,dst,outport);
 8003c48:	4b18      	ldr	r3, [pc, #96]	; (8003cac <remoteBootloaderUpdate+0xfc>)
 8003c4a:	6819      	ldr	r1, [r3, #0]
 8003c4c:	002b      	movs	r3, r5
 8003c4e:	0032      	movs	r2, r6
 8003c50:	0038      	movs	r0, r7
 8003c52:	f011 f8dd 	bl	8014e10 <sprintf>
		strcat((char* )pcOutputString,pcRemoteBootloaderUpdateWarningMessage);
 8003c56:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <remoteBootloaderUpdate+0x100>)
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	0038      	movs	r0, r7
 8003c5c:	f011 f8f8 	bl	8014e50 <strcat>
		writePxITMutex(inport,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms);
 8003c60:	0038      	movs	r0, r7
 8003c62:	f7fc fa59 	bl	8000118 <strlen>
 8003c66:	b282      	uxth	r2, r0
 8003c68:	2332      	movs	r3, #50	; 0x32
 8003c6a:	0039      	movs	r1, r7
 8003c6c:	9805      	ldr	r0, [sp, #20]
 8003c6e:	f00a fe45 	bl	800e8fc <writePxITMutex>
		Delay_ms(100);
 8003c72:	2064      	movs	r0, #100	; 0x64
 8003c74:	f00c ff72 	bl	8010b5c <HAL_Delay>
 8003c78:	e7ae      	b.n	8003bd8 <remoteBootloaderUpdate+0x28>
		SwapUartPins(GetUart(myOutport),REVERSED);
 8003c7a:	9804      	ldr	r0, [sp, #16]
 8003c7c:	f00a fdf4 	bl	800e868 <GetUart>
 8003c80:	2101      	movs	r1, #1
 8003c82:	f00a fe8b 	bl	800e99c <SwapUartPins>
 8003c86:	e7b1      	b.n	8003bec <remoteBootloaderUpdate+0x3c>
		pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003c88:	f00b f852 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 8003c8c:	0007      	movs	r7, r0
		myOutport =outport;
 8003c8e:	9504      	str	r5, [sp, #16]
 8003c90:	e7da      	b.n	8003c48 <remoteBootloaderUpdate+0x98>
	if(src == myID){
 8003c92:	42bc      	cmp	r4, r7
 8003c94:	d0f8      	beq.n	8003c88 <remoteBootloaderUpdate+0xd8>
		myOutport =outport;
 8003c96:	9504      	str	r5, [sp, #16]
 8003c98:	e79e      	b.n	8003bd8 <remoteBootloaderUpdate+0x28>
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	200010ea 	.word	0x200010ea
 8003ca0:	2000118c 	.word	0x2000118c
 8003ca4:	20006f68 	.word	0x20006f68
 8003ca8:	200000a0 	.word	0x200000a0
 8003cac:	200000a4 	.word	0x200000a4
 8003cb0:	200000a8 	.word	0x200000a8

08003cb4 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
 */
void DisplayTopology(uint8_t port){
 8003cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cb6:	46d6      	mov	lr, sl
 8003cb8:	464f      	mov	r7, r9
 8003cba:	4646      	mov	r6, r8
 8003cbc:	b5c0      	push	{r6, r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	0005      	movs	r5, r0
 8003cc2:	9003      	str	r0, [sp, #12]
	/* Print table header */
	sprintf(pcUserMessage,"\n\r(Module:Port)\t\t");
 8003cc4:	4c56      	ldr	r4, [pc, #344]	; (8003e20 <DisplayTopology+0x16c>)
 8003cc6:	4b57      	ldr	r3, [pc, #348]	; (8003e24 <DisplayTopology+0x170>)
 8003cc8:	0022      	movs	r2, r4
 8003cca:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003ccc:	c243      	stmia	r2!, {r0, r1, r6}
 8003cce:	6819      	ldr	r1, [r3, #0]
 8003cd0:	6011      	str	r1, [r2, #0]
 8003cd2:	889b      	ldrh	r3, [r3, #4]
 8003cd4:	8093      	strh	r3, [r2, #4]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cd6:	0020      	movs	r0, r4
 8003cd8:	f7fc fa1e 	bl	8000118 <strlen>
 8003cdc:	b282      	uxth	r2, r0
 8003cde:	2301      	movs	r3, #1
 8003ce0:	425b      	negs	r3, r3
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	3333      	adds	r3, #51	; 0x33
 8003ce6:	0021      	movs	r1, r4
 8003ce8:	0028      	movs	r0, r5
 8003cea:	f00a fddf 	bl	800e8ac <writePxMutex>
 8003cee:	2401      	movs	r4, #1
	HAL_MAX_DELAY);
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d\t",i);
 8003cf0:	4f4d      	ldr	r7, [pc, #308]	; (8003e28 <DisplayTopology+0x174>)
 8003cf2:	4d4b      	ldr	r5, [pc, #300]	; (8003e20 <DisplayTopology+0x16c>)
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003cf4:	2601      	movs	r6, #1
 8003cf6:	4276      	negs	r6, r6
		sprintf(pcUserMessage,"P%d\t",i);
 8003cf8:	0022      	movs	r2, r4
 8003cfa:	0039      	movs	r1, r7
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f011 f887 	bl	8014e10 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d02:	0028      	movs	r0, r5
 8003d04:	f7fc fa08 	bl	8000118 <strlen>
 8003d08:	b282      	uxth	r2, r0
 8003d0a:	9600      	str	r6, [sp, #0]
 8003d0c:	2332      	movs	r3, #50	; 0x32
 8003d0e:	0029      	movs	r1, r5
 8003d10:	9803      	ldr	r0, [sp, #12]
 8003d12:	f00a fdcb 	bl	800e8ac <writePxMutex>
 8003d16:	3401      	adds	r4, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003d18:	2c07      	cmp	r4, #7
 8003d1a:	d1ed      	bne.n	8003cf8 <DisplayTopology+0x44>
		HAL_MAX_DELAY);
	}
	writePxMutex(port,"\n\n\r",3,cmd50ms,HAL_MAX_DELAY);
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	425b      	negs	r3, r3
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	3333      	adds	r3, #51	; 0x33
 8003d24:	2203      	movs	r2, #3
 8003d26:	4941      	ldr	r1, [pc, #260]	; (8003e2c <DisplayTopology+0x178>)
 8003d28:	9803      	ldr	r0, [sp, #12]
 8003d2a:	f00a fdbf 	bl	800e8ac <writePxMutex>
	
	/* Print each row */
	for(uint8_t row =0; row < N; row++){
 8003d2e:	4b40      	ldr	r3, [pc, #256]	; (8003e30 <DisplayTopology+0x17c>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d065      	beq.n	8003e02 <DisplayTopology+0x14e>
 8003d36:	2600      	movs	r6, #0
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d38:	2701      	movs	r7, #1
 8003d3a:	427f      	negs	r7, r7
		HAL_MAX_DELAY);
		/* Module PN */
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <DisplayTopology+0x180>)
 8003d3e:	4699      	mov	r9, r3
 8003d40:	230e      	movs	r3, #14
 8003d42:	444b      	add	r3, r9
 8003d44:	469a      	mov	sl, r3
 8003d46:	e02a      	b.n	8003d9e <DisplayTopology+0xea>
		/* Connections */
		for(uint8_t col =1; col <= NumOfPorts; col++){
			if(!array[row][col])
				sprintf(pcUserMessage,"%d\t",0);
			else
				sprintf(pcUserMessage,"%d:%d\t",(array[row][col] >> 3),(array[row][col] & 0x07));
 8003d48:	2307      	movs	r3, #7
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	08d2      	lsrs	r2, r2, #3
 8003d4e:	493a      	ldr	r1, [pc, #232]	; (8003e38 <DisplayTopology+0x184>)
 8003d50:	4833      	ldr	r0, [pc, #204]	; (8003e20 <DisplayTopology+0x16c>)
 8003d52:	f011 f85d 	bl	8014e10 <sprintf>
			writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003d56:	4d32      	ldr	r5, [pc, #200]	; (8003e20 <DisplayTopology+0x16c>)
 8003d58:	0028      	movs	r0, r5
 8003d5a:	f7fc f9dd 	bl	8000118 <strlen>
 8003d5e:	b282      	uxth	r2, r0
 8003d60:	9700      	str	r7, [sp, #0]
 8003d62:	2332      	movs	r3, #50	; 0x32
 8003d64:	0029      	movs	r1, r5
 8003d66:	9803      	ldr	r0, [sp, #12]
 8003d68:	f00a fda0 	bl	800e8ac <writePxMutex>
 8003d6c:	3402      	adds	r4, #2
		for(uint8_t col =1; col <= NumOfPorts; col++){
 8003d6e:	42b4      	cmp	r4, r6
 8003d70:	d007      	beq.n	8003d82 <DisplayTopology+0xce>
			if(!array[row][col])
 8003d72:	8822      	ldrh	r2, [r4, #0]
 8003d74:	2a00      	cmp	r2, #0
 8003d76:	d1e7      	bne.n	8003d48 <DisplayTopology+0x94>
				sprintf(pcUserMessage,"%d\t",0);
 8003d78:	4930      	ldr	r1, [pc, #192]	; (8003e3c <DisplayTopology+0x188>)
 8003d7a:	4829      	ldr	r0, [pc, #164]	; (8003e20 <DisplayTopology+0x16c>)
 8003d7c:	f011 f848 	bl	8014e10 <sprintf>
 8003d80:	e7e9      	b.n	8003d56 <DisplayTopology+0xa2>
 8003d82:	4646      	mov	r6, r8
			HAL_MAX_DELAY);
		}
		writePxMutex(port,"\n\r",2,cmd50ms,HAL_MAX_DELAY);
 8003d84:	9700      	str	r7, [sp, #0]
 8003d86:	2332      	movs	r3, #50	; 0x32
 8003d88:	2202      	movs	r2, #2
 8003d8a:	492d      	ldr	r1, [pc, #180]	; (8003e40 <DisplayTopology+0x18c>)
 8003d8c:	9803      	ldr	r0, [sp, #12]
 8003d8e:	f00a fd8d 	bl	800e8ac <writePxMutex>
	for(uint8_t row =0; row < N; row++){
 8003d92:	3601      	adds	r6, #1
 8003d94:	b2f6      	uxtb	r6, r6
 8003d96:	4b26      	ldr	r3, [pc, #152]	; (8003e30 <DisplayTopology+0x17c>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	42b3      	cmp	r3, r6
 8003d9c:	d931      	bls.n	8003e02 <DisplayTopology+0x14e>
		sprintf(pcUserMessage,"Module %d:\t",row + 1);
 8003d9e:	1c72      	adds	r2, r6, #1
 8003da0:	4c1f      	ldr	r4, [pc, #124]	; (8003e20 <DisplayTopology+0x16c>)
 8003da2:	4928      	ldr	r1, [pc, #160]	; (8003e44 <DisplayTopology+0x190>)
 8003da4:	0020      	movs	r0, r4
 8003da6:	f011 f833 	bl	8014e10 <sprintf>
		writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003daa:	0020      	movs	r0, r4
 8003dac:	f7fc f9b4 	bl	8000118 <strlen>
 8003db0:	b282      	uxth	r2, r0
 8003db2:	9700      	str	r7, [sp, #0]
 8003db4:	2332      	movs	r3, #50	; 0x32
 8003db6:	0021      	movs	r1, r4
 8003db8:	9803      	ldr	r0, [sp, #12]
 8003dba:	f00a fd77 	bl	800e8ac <writePxMutex>
		strncpy(pcUserMessage,modulePNstring[(array[row][0])],5);
 8003dbe:	2516      	movs	r5, #22
 8003dc0:	4375      	muls	r5, r6
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	5aeb      	ldrh	r3, [r5, r3]
 8003dc6:	0059      	lsls	r1, r3, #1
 8003dc8:	18c9      	adds	r1, r1, r3
 8003dca:	0049      	lsls	r1, r1, #1
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <DisplayTopology+0x194>)
 8003dce:	18c9      	adds	r1, r1, r3
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	0020      	movs	r0, r4
 8003dd4:	f011 f871 	bl	8014eba <strncpy>
		writePxMutex(port,pcUserMessage,5,cmd50ms,HAL_MAX_DELAY);
 8003dd8:	9700      	str	r7, [sp, #0]
 8003dda:	2332      	movs	r3, #50	; 0x32
 8003ddc:	2205      	movs	r2, #5
 8003dde:	0021      	movs	r1, r4
 8003de0:	9c03      	ldr	r4, [sp, #12]
 8003de2:	0020      	movs	r0, r4
 8003de4:	f00a fd62 	bl	800e8ac <writePxMutex>
		writePxMutex(port,"\t",1,cmd50ms,HAL_MAX_DELAY);
 8003de8:	9700      	str	r7, [sp, #0]
 8003dea:	2332      	movs	r3, #50	; 0x32
 8003dec:	2201      	movs	r2, #1
 8003dee:	4917      	ldr	r1, [pc, #92]	; (8003e4c <DisplayTopology+0x198>)
 8003df0:	0020      	movs	r0, r4
 8003df2:	f00a fd5b 	bl	800e8ac <writePxMutex>
 8003df6:	1cac      	adds	r4, r5, #2
 8003df8:	444c      	add	r4, r9
 8003dfa:	4455      	add	r5, sl
				sprintf(pcUserMessage,"%d\t",0);
 8003dfc:	46b0      	mov	r8, r6
 8003dfe:	002e      	movs	r6, r5
 8003e00:	e7b7      	b.n	8003d72 <DisplayTopology+0xbe>
	}
	
	writePxMutex(port,"\n",1,cmd50ms,HAL_MAX_DELAY);
 8003e02:	2301      	movs	r3, #1
 8003e04:	425b      	negs	r3, r3
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	3333      	adds	r3, #51	; 0x33
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4910      	ldr	r1, [pc, #64]	; (8003e50 <DisplayTopology+0x19c>)
 8003e0e:	9803      	ldr	r0, [sp, #12]
 8003e10:	f00a fd4c 	bl	800e8ac <writePxMutex>
}
 8003e14:	b004      	add	sp, #16
 8003e16:	bc1c      	pop	{r2, r3, r4}
 8003e18:	4690      	mov	r8, r2
 8003e1a:	4699      	mov	r9, r3
 8003e1c:	46a2      	mov	sl, r4
 8003e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e20:	2000111c 	.word	0x2000111c
 8003e24:	08019534 	.word	0x08019534
 8003e28:	08019548 	.word	0x08019548
 8003e2c:	0801a9c8 	.word	0x0801a9c8
 8003e30:	20000044 	.word	0x20000044
 8003e34:	20000aec 	.word	0x20000aec
 8003e38:	08019560 	.word	0x08019560
 8003e3c:	0801955c 	.word	0x0801955c
 8003e40:	080193dc 	.word	0x080193dc
 8003e44:	08019550 	.word	0x08019550
 8003e48:	0801959c 	.word	0x0801959c
 8003e4c:	08019544 	.word	0x08019544
 8003e50:	0801ab8c 	.word	0x0801ab8c

08003e54 <DisplayPortsDir>:

/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
 */
void DisplayPortsDir(uint8_t port){
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	46c6      	mov	lr, r8
 8003e58:	b500      	push	{lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	0005      	movs	r5, r0
 8003e5e:	9003      	str	r0, [sp, #12]
	sprintf(pcUserMessage,"\n\rThese ports are reversed:");
 8003e60:	4c30      	ldr	r4, [pc, #192]	; (8003f24 <DisplayPortsDir+0xd0>)
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <DisplayPortsDir+0xd4>)
 8003e64:	0022      	movs	r2, r4
 8003e66:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e68:	c243      	stmia	r2!, {r0, r1, r6}
 8003e6a:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003e6c:	c243      	stmia	r2!, {r0, r1, r6}
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6013      	str	r3, [r2, #0]
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003e72:	0020      	movs	r0, r4
 8003e74:	f7fc f950 	bl	8000118 <strlen>
 8003e78:	b282      	uxth	r2, r0
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	3333      	adds	r3, #51	; 0x33
 8003e82:	0021      	movs	r1, r4
 8003e84:	0028      	movs	r0, r5
 8003e86:	f00a fd11 	bl	800e8ac <writePxMutex>
	HAL_MAX_DELAY);
	
	for(uint8_t i =1; i <= N; i++){
 8003e8a:	4b28      	ldr	r3, [pc, #160]	; (8003f2c <DisplayPortsDir+0xd8>)
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4690      	mov	r8, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d02c      	beq.n	8003ef0 <DisplayPortsDir+0x9c>
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003e96:	4e26      	ldr	r6, [pc, #152]	; (8003f30 <DisplayPortsDir+0xdc>)
 8003e98:	e025      	b.n	8003ee6 <DisplayPortsDir+0x92>
 8003e9a:	0023      	movs	r3, r4
		for(uint8_t p =1; p <= MaxNumOfPorts; p++){
 8003e9c:	2c0a      	cmp	r4, #10
 8003e9e:	d01a      	beq.n	8003ed6 <DisplayPortsDir+0x82>
 8003ea0:	1c5c      	adds	r4, r3, #1
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ea2:	5ba9      	ldrh	r1, [r5, r6]
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	0212      	lsls	r2, r2, #8
 8003ea8:	411a      	asrs	r2, r3
 8003eaa:	420a      	tst	r2, r1
 8003eac:	d0f5      	beq.n	8003e9a <DisplayPortsDir+0x46>
			{
				sprintf(pcUserMessage,"\n\rModule %d : P%d",i,p);
 8003eae:	4f1d      	ldr	r7, [pc, #116]	; (8003f24 <DisplayPortsDir+0xd0>)
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	4642      	mov	r2, r8
 8003eb4:	491f      	ldr	r1, [pc, #124]	; (8003f34 <DisplayPortsDir+0xe0>)
 8003eb6:	0038      	movs	r0, r7
 8003eb8:	f010 ffaa 	bl	8014e10 <sprintf>
				writePxMutex(port,pcUserMessage,strlen(pcUserMessage),
 8003ebc:	0038      	movs	r0, r7
 8003ebe:	f7fc f92b 	bl	8000118 <strlen>
 8003ec2:	b282      	uxth	r2, r0
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	425b      	negs	r3, r3
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	3333      	adds	r3, #51	; 0x33
 8003ecc:	0039      	movs	r1, r7
 8003ece:	9803      	ldr	r0, [sp, #12]
 8003ed0:	f00a fcec 	bl	800e8ac <writePxMutex>
 8003ed4:	e7e1      	b.n	8003e9a <DisplayPortsDir+0x46>
	for(uint8_t i =1; i <= N; i++){
 8003ed6:	4643      	mov	r3, r8
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	4698      	mov	r8, r3
 8003ede:	4b13      	ldr	r3, [pc, #76]	; (8003f2c <DisplayPortsDir+0xd8>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	4543      	cmp	r3, r8
 8003ee4:	d304      	bcc.n	8003ef0 <DisplayPortsDir+0x9c>
void DisplayPortsDir(uint8_t port){
 8003ee6:	2300      	movs	r3, #0
			if((arrayPortsDir[i - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8003ee8:	4642      	mov	r2, r8
 8003eea:	1e55      	subs	r5, r2, #1
 8003eec:	006d      	lsls	r5, r5, #1
 8003eee:	e7d7      	b.n	8003ea0 <DisplayPortsDir+0x4c>
				cmd50ms,HAL_MAX_DELAY);
			}
		}
	}
	
	sprintf(pcUserMessage,"\n\n\rAll other ports are normal\n\r");
 8003ef0:	4c0c      	ldr	r4, [pc, #48]	; (8003f24 <DisplayPortsDir+0xd0>)
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <DisplayPortsDir+0xe4>)
 8003ef4:	0022      	movs	r2, r4
 8003ef6:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003ef8:	c223      	stmia	r2!, {r0, r1, r5}
 8003efa:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003efc:	c223      	stmia	r2!, {r0, r1, r5}
 8003efe:	cb03      	ldmia	r3!, {r0, r1}
 8003f00:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port,pcUserMessage,strlen(pcUserMessage),cmd50ms,
 8003f02:	0020      	movs	r0, r4
 8003f04:	f7fc f908 	bl	8000118 <strlen>
 8003f08:	b282      	uxth	r2, r0
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	425b      	negs	r3, r3
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	3333      	adds	r3, #51	; 0x33
 8003f12:	0021      	movs	r1, r4
 8003f14:	9803      	ldr	r0, [sp, #12]
 8003f16:	f00a fcc9 	bl	800e8ac <writePxMutex>
	HAL_MAX_DELAY);
}
 8003f1a:	b004      	add	sp, #16
 8003f1c:	bc04      	pop	{r2}
 8003f1e:	4690      	mov	r8, r2
 8003f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	2000111c 	.word	0x2000111c
 8003f28:	080194e4 	.word	0x080194e4
 8003f2c:	20000044 	.word	0x20000044
 8003f30:	2000735c 	.word	0x2000735c
 8003f34:	08019500 	.word	0x08019500
 8003f38:	08019514 	.word	0x08019514

08003f3c <DisplayModuleStatus>:

/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
 */
void DisplayModuleStatus(uint8_t port){
 8003f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3e:	46d6      	mov	lr, sl
 8003f40:	b500      	push	{lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	9003      	str	r0, [sp, #12]
	int8_t *pcOutputString;
	uint16_t temp =0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8003f46:	f00a fef3 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 8003f4a:	0004      	movs	r4, r0
	
	strcpy((char* )pcOutputString,"");
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage,"\n\r*** Module %d Status ***\n",myID);
 8003f50:	4b8d      	ldr	r3, [pc, #564]	; (8004188 <DisplayModuleStatus+0x24c>)
 8003f52:	781a      	ldrb	r2, [r3, #0]
 8003f54:	4d8d      	ldr	r5, [pc, #564]	; (800418c <DisplayModuleStatus+0x250>)
 8003f56:	498e      	ldr	r1, [pc, #568]	; (8004190 <DisplayModuleStatus+0x254>)
 8003f58:	0028      	movs	r0, r5
 8003f5a:	f010 ff59 	bl	8014e10 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f5e:	0029      	movs	r1, r5
 8003f60:	0020      	movs	r0, r4
 8003f62:	f010 ff75 	bl	8014e50 <strcat>
	sprintf(pcUserMessage,"\n\rConnected via port: P%d\n\r",PcPort);
 8003f66:	4b8b      	ldr	r3, [pc, #556]	; (8004194 <DisplayModuleStatus+0x258>)
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	498b      	ldr	r1, [pc, #556]	; (8004198 <DisplayModuleStatus+0x25c>)
 8003f6c:	0028      	movs	r0, r5
 8003f6e:	f010 ff4f 	bl	8014e10 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f72:	0029      	movs	r1, r5
 8003f74:	0020      	movs	r0, r4
 8003f76:	f010 ff6b 	bl	8014e50 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage,"\n\rFirmware version: %d.%d.%d",_firmMajor,
 8003f7a:	2305      	movs	r3, #5
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	3b03      	subs	r3, #3
 8003f80:	2200      	movs	r2, #0
 8003f82:	4986      	ldr	r1, [pc, #536]	; (800419c <DisplayModuleStatus+0x260>)
 8003f84:	0028      	movs	r0, r5
 8003f86:	f010 ff43 	bl	8014e10 <sprintf>
	_firmMinor,_firmPatch);
	strcat((char* )pcOutputString,pcUserMessage);
 8003f8a:	0029      	movs	r1, r5
 8003f8c:	0020      	movs	r0, r4
 8003f8e:	f010 ff5f 	bl	8014e50 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware date:    %s",_firmDate);
 8003f92:	4a83      	ldr	r2, [pc, #524]	; (80041a0 <DisplayModuleStatus+0x264>)
 8003f94:	4983      	ldr	r1, [pc, #524]	; (80041a4 <DisplayModuleStatus+0x268>)
 8003f96:	0028      	movs	r0, r5
 8003f98:	f010 ff3a 	bl	8014e10 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003f9c:	0029      	movs	r1, r5
 8003f9e:	0020      	movs	r0, r4
 8003fa0:	f010 ff56 	bl	8014e50 <strcat>
	sprintf(pcUserMessage,"\n\rFirmware time:    %s\n\r",_firmTime);
 8003fa4:	4a80      	ldr	r2, [pc, #512]	; (80041a8 <DisplayModuleStatus+0x26c>)
 8003fa6:	4981      	ldr	r1, [pc, #516]	; (80041ac <DisplayModuleStatus+0x270>)
 8003fa8:	0028      	movs	r0, r5
 8003faa:	f010 ff31 	bl	8014e10 <sprintf>
	strcat((char* )pcOutputString,pcUserMessage);
 8003fae:	0029      	movs	r1, r5
 8003fb0:	0020      	movs	r0, r4
 8003fb2:	f010 ff4d 	bl	8014e50 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage,"\n\rPorts Status:\n\n\r");
 8003fb6:	4b7e      	ldr	r3, [pc, #504]	; (80041b0 <DisplayModuleStatus+0x274>)
 8003fb8:	002a      	movs	r2, r5
 8003fba:	cb43      	ldmia	r3!, {r0, r1, r6}
 8003fbc:	c243      	stmia	r2!, {r0, r1, r6}
 8003fbe:	6819      	ldr	r1, [r3, #0]
 8003fc0:	6011      	str	r1, [r2, #0]
 8003fc2:	8899      	ldrh	r1, [r3, #4]
 8003fc4:	8091      	strh	r1, [r2, #4]
 8003fc6:	799b      	ldrb	r3, [r3, #6]
 8003fc8:	7193      	strb	r3, [r2, #6]
	strcat((char* )pcOutputString,pcUserMessage);
 8003fca:	0029      	movs	r1, r5
 8003fcc:	0020      	movs	r0, r4
 8003fce:	f010 ff3f 	bl	8014e50 <strcat>
 8003fd2:	2701      	movs	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
		sprintf(pcUserMessage,"P%d: ",i);
 8003fd4:	4d6d      	ldr	r5, [pc, #436]	; (800418c <DisplayModuleStatus+0x250>)
		strcat((char* )pcOutputString,pcUserMessage);
		switch(portStatus[i]){
 8003fd6:	4b77      	ldr	r3, [pc, #476]	; (80041b4 <DisplayModuleStatus+0x278>)
 8003fd8:	469a      	mov	sl, r3
 8003fda:	e00e      	b.n	8003ffa <DisplayModuleStatus+0xbe>
			case FREE:
				sprintf(pcUserMessage,"Free\n\r");
 8003fdc:	4b6b      	ldr	r3, [pc, #428]	; (800418c <DisplayModuleStatus+0x250>)
 8003fde:	4a76      	ldr	r2, [pc, #472]	; (80041b8 <DisplayModuleStatus+0x27c>)
 8003fe0:	6811      	ldr	r1, [r2, #0]
 8003fe2:	6019      	str	r1, [r3, #0]
 8003fe4:	8891      	ldrh	r1, [r2, #4]
 8003fe6:	8099      	strh	r1, [r3, #4]
 8003fe8:	7992      	ldrb	r2, [r2, #6]
 8003fea:	719a      	strb	r2, [r3, #6]
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
				break;
			default:
				break;
		}
		strcat((char* )pcOutputString,pcUserMessage);
 8003fec:	4967      	ldr	r1, [pc, #412]	; (800418c <DisplayModuleStatus+0x250>)
 8003fee:	0020      	movs	r0, r4
 8003ff0:	f010 ff2e 	bl	8014e50 <strcat>
 8003ff4:	3701      	adds	r7, #1
	for(uint8_t i =1; i <= NumOfPorts; i++){
 8003ff6:	2f07      	cmp	r7, #7
 8003ff8:	d039      	beq.n	800406e <DisplayModuleStatus+0x132>
		sprintf(pcUserMessage,"P%d: ",i);
 8003ffa:	003a      	movs	r2, r7
 8003ffc:	496f      	ldr	r1, [pc, #444]	; (80041bc <DisplayModuleStatus+0x280>)
 8003ffe:	0028      	movs	r0, r5
 8004000:	f010 ff06 	bl	8014e10 <sprintf>
		strcat((char* )pcOutputString,pcUserMessage);
 8004004:	0029      	movs	r1, r5
 8004006:	0020      	movs	r0, r4
 8004008:	f010 ff22 	bl	8014e50 <strcat>
		switch(portStatus[i]){
 800400c:	4653      	mov	r3, sl
 800400e:	5cfb      	ldrb	r3, [r7, r3]
 8004010:	2b04      	cmp	r3, #4
 8004012:	d8eb      	bhi.n	8003fec <DisplayModuleStatus+0xb0>
 8004014:	4653      	mov	r3, sl
 8004016:	5cfb      	ldrb	r3, [r7, r3]
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4a69      	ldr	r2, [pc, #420]	; (80041c0 <DisplayModuleStatus+0x284>)
 800401c:	58d3      	ldr	r3, [r2, r3]
 800401e:	469f      	mov	pc, r3
				sprintf(pcUserMessage,"Receiving messages\n\r");
 8004020:	495a      	ldr	r1, [pc, #360]	; (800418c <DisplayModuleStatus+0x250>)
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <DisplayModuleStatus+0x288>)
 8004024:	000a      	movs	r2, r1
 8004026:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004028:	c243      	stmia	r2!, {r0, r1, r6}
 800402a:	cb03      	ldmia	r3!, {r0, r1}
 800402c:	c203      	stmia	r2!, {r0, r1}
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	7013      	strb	r3, [r2, #0]
				break;
 8004032:	e7db      	b.n	8003fec <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Streaming\n\r");
 8004034:	4a55      	ldr	r2, [pc, #340]	; (800418c <DisplayModuleStatus+0x250>)
 8004036:	4b64      	ldr	r3, [pc, #400]	; (80041c8 <DisplayModuleStatus+0x28c>)
 8004038:	cb43      	ldmia	r3!, {r0, r1, r6}
 800403a:	c243      	stmia	r2!, {r0, r1, r6}
				break;
 800403c:	e7d6      	b.n	8003fec <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Receiving user commands\n\r");
 800403e:	4953      	ldr	r1, [pc, #332]	; (800418c <DisplayModuleStatus+0x250>)
 8004040:	4b62      	ldr	r3, [pc, #392]	; (80041cc <DisplayModuleStatus+0x290>)
 8004042:	000a      	movs	r2, r1
 8004044:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004046:	c243      	stmia	r2!, {r0, r1, r6}
 8004048:	cb43      	ldmia	r3!, {r0, r1, r6}
 800404a:	c243      	stmia	r2!, {r0, r1, r6}
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	8013      	strh	r3, [r2, #0]
				break;
 8004050:	e7cc      	b.n	8003fec <DisplayModuleStatus+0xb0>
				sprintf(pcUserMessage,"Connected to a button/switch\n\r");
 8004052:	494e      	ldr	r1, [pc, #312]	; (800418c <DisplayModuleStatus+0x250>)
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <DisplayModuleStatus+0x294>)
 8004056:	000a      	movs	r2, r1
 8004058:	cb43      	ldmia	r3!, {r0, r1, r6}
 800405a:	c243      	stmia	r2!, {r0, r1, r6}
 800405c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800405e:	c243      	stmia	r2!, {r0, r1, r6}
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	6011      	str	r1, [r2, #0]
 8004064:	8899      	ldrh	r1, [r3, #4]
 8004066:	8091      	strh	r1, [r2, #4]
 8004068:	799b      	ldrb	r3, [r3, #6]
 800406a:	7193      	strb	r3, [r2, #6]
				break;
 800406c:	e7be      	b.n	8003fec <DisplayModuleStatus+0xb0>
	}
	
	/* P2P DMAs */
	sprintf(pcUserMessage,"\n\rDMA Streams Status:\n\r");
 800406e:	4947      	ldr	r1, [pc, #284]	; (800418c <DisplayModuleStatus+0x250>)
 8004070:	4b58      	ldr	r3, [pc, #352]	; (80041d4 <DisplayModuleStatus+0x298>)
 8004072:	000a      	movs	r2, r1
 8004074:	cb61      	ldmia	r3!, {r0, r5, r6}
 8004076:	c261      	stmia	r2!, {r0, r5, r6}
 8004078:	cb61      	ldmia	r3!, {r0, r5, r6}
 800407a:	c261      	stmia	r2!, {r0, r5, r6}
	strcat((char* )pcOutputString,pcUserMessage);
 800407c:	0020      	movs	r0, r4
 800407e:	f010 fee7 	bl	8014e50 <strcat>
 8004082:	4f55      	ldr	r7, [pc, #340]	; (80041d8 <DisplayModuleStatus+0x29c>)
 8004084:	2601      	movs	r6, #1
 8004086:	e00d      	b.n	80040a4 <DisplayModuleStatus+0x168>
	for(char i =1; i <= 6; i++){
		if(streamDMA[i - 1].Instance == 0){
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is free",i);
 8004088:	4d40      	ldr	r5, [pc, #256]	; (800418c <DisplayModuleStatus+0x250>)
 800408a:	0032      	movs	r2, r6
 800408c:	4953      	ldr	r1, [pc, #332]	; (80041dc <DisplayModuleStatus+0x2a0>)
 800408e:	0028      	movs	r0, r5
 8004090:	f010 febe 	bl	8014e10 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 8004094:	0029      	movs	r1, r5
 8004096:	0020      	movs	r0, r4
 8004098:	f010 feda 	bl	8014e50 <strcat>
 800409c:	3601      	adds	r6, #1
 800409e:	3738      	adds	r7, #56	; 0x38
	for(char i =1; i <= 6; i++){
 80040a0:	2e07      	cmp	r6, #7
 80040a2:	d018      	beq.n	80040d6 <DisplayModuleStatus+0x19a>
		if(streamDMA[i - 1].Instance == 0){
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0ee      	beq.n	8004088 <DisplayModuleStatus+0x14c>
		}
		else{
			sprintf(pcUserMessage,"\n\rStreaming DMA %d is streaming from P%d to P%d",i,GetPort(streamDMA[i - 1].Parent),GetPort(dmaStreamDst[i - 1]));
 80040aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040ac:	f008 fc9a 	bl	800c9e4 <GetPort>
 80040b0:	0005      	movs	r5, r0
 80040b2:	00b3      	lsls	r3, r6, #2
 80040b4:	3b04      	subs	r3, #4
 80040b6:	4a4a      	ldr	r2, [pc, #296]	; (80041e0 <DisplayModuleStatus+0x2a4>)
 80040b8:	58d0      	ldr	r0, [r2, r3]
 80040ba:	f008 fc93 	bl	800c9e4 <GetPort>
 80040be:	9000      	str	r0, [sp, #0]
 80040c0:	002b      	movs	r3, r5
 80040c2:	0032      	movs	r2, r6
 80040c4:	4947      	ldr	r1, [pc, #284]	; (80041e4 <DisplayModuleStatus+0x2a8>)
 80040c6:	4831      	ldr	r0, [pc, #196]	; (800418c <DisplayModuleStatus+0x250>)
 80040c8:	f010 fea2 	bl	8014e10 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 80040cc:	492f      	ldr	r1, [pc, #188]	; (800418c <DisplayModuleStatus+0x250>)
 80040ce:	0020      	movs	r0, r4
 80040d0:	f010 febe 	bl	8014e50 <strcat>
 80040d4:	e7e2      	b.n	800409c <DisplayModuleStatus+0x160>
		}
	}
	strcat((char* )pcOutputString,"\n\r");
 80040d6:	0020      	movs	r0, r4
 80040d8:	f7fc f81e 	bl	8000118 <strlen>
 80040dc:	1820      	adds	r0, r4, r0
 80040de:	2203      	movs	r2, #3
 80040e0:	4941      	ldr	r1, [pc, #260]	; (80041e8 <DisplayModuleStatus+0x2ac>)
 80040e2:	f010 fc60 	bl	80149a6 <memcpy>
	
	/* Ports direction */
	strcat((char* )pcOutputString,"\n\rThese ports are reversed: ");
 80040e6:	0020      	movs	r0, r4
 80040e8:	f7fc f816 	bl	8000118 <strlen>
 80040ec:	1820      	adds	r0, r4, r0
 80040ee:	221d      	movs	r2, #29
 80040f0:	493e      	ldr	r1, [pc, #248]	; (80041ec <DisplayModuleStatus+0x2b0>)
 80040f2:	f010 fc58 	bl	80149a6 <memcpy>
	temp =strlen((char* )pcOutputString);
 80040f6:	0020      	movs	r0, r4
 80040f8:	f7fc f80e 	bl	8000118 <strlen>
 80040fc:	4682      	mov	sl, r0
 80040fe:	2200      	movs	r2, #0
	for(uint8_t p =1; p <= NumOfPorts; p++){
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 8004100:	4f3b      	ldr	r7, [pc, #236]	; (80041f0 <DisplayModuleStatus+0x2b4>)
 8004102:	4e21      	ldr	r6, [pc, #132]	; (8004188 <DisplayModuleStatus+0x24c>)
 8004104:	e002      	b.n	800410c <DisplayModuleStatus+0x1d0>
 8004106:	002a      	movs	r2, r5
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004108:	2d06      	cmp	r5, #6
 800410a:	d013      	beq.n	8004134 <DisplayModuleStatus+0x1f8>
 800410c:	1c55      	adds	r5, r2, #1
		if((arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))) /* Port is reversed */
 800410e:	7833      	ldrb	r3, [r6, #0]
 8004110:	3b01      	subs	r3, #1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	5bd9      	ldrh	r1, [r3, r7]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	4113      	asrs	r3, r2
 800411c:	420b      	tst	r3, r1
 800411e:	d0f2      	beq.n	8004106 <DisplayModuleStatus+0x1ca>
		{
			sprintf(pcUserMessage,"P%d ",p);
 8004120:	002a      	movs	r2, r5
 8004122:	4934      	ldr	r1, [pc, #208]	; (80041f4 <DisplayModuleStatus+0x2b8>)
 8004124:	4819      	ldr	r0, [pc, #100]	; (800418c <DisplayModuleStatus+0x250>)
 8004126:	f010 fe73 	bl	8014e10 <sprintf>
			strcat((char* )pcOutputString,pcUserMessage);
 800412a:	4918      	ldr	r1, [pc, #96]	; (800418c <DisplayModuleStatus+0x250>)
 800412c:	0020      	movs	r0, r4
 800412e:	f010 fe8f 	bl	8014e50 <strcat>
 8004132:	e7e8      	b.n	8004106 <DisplayModuleStatus+0x1ca>
		}
	}
	if(temp == strlen((char* )pcOutputString)){ /* All ports are normal */
 8004134:	0020      	movs	r0, r4
 8004136:	f7fb ffef 	bl	8000118 <strlen>
 800413a:	4653      	mov	r3, sl
 800413c:	041b      	lsls	r3, r3, #16
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	4298      	cmp	r0, r3
 8004142:	d00e      	beq.n	8004162 <DisplayModuleStatus+0x226>
		strcat((char* )pcOutputString,"None");
	}
	strcat((char* )pcOutputString,"\n\r");
 8004144:	0020      	movs	r0, r4
 8004146:	f7fb ffe7 	bl	8000118 <strlen>
 800414a:	1820      	adds	r0, r4, r0
 800414c:	2203      	movs	r2, #3
 800414e:	4926      	ldr	r1, [pc, #152]	; (80041e8 <DisplayModuleStatus+0x2ac>)
 8004150:	f010 fc29 	bl	80149a6 <memcpy>
	
	/* Display output */
	if(port)
 8004154:	9b03      	ldr	r3, [sp, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <DisplayModuleStatus+0x232>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
	
}
 800415a:	b004      	add	sp, #16
 800415c:	bc04      	pop	{r2}
 800415e:	4692      	mov	sl, r2
 8004160:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat((char* )pcOutputString,"None");
 8004162:	1820      	adds	r0, r4, r0
 8004164:	2205      	movs	r2, #5
 8004166:	4924      	ldr	r1, [pc, #144]	; (80041f8 <DisplayModuleStatus+0x2bc>)
 8004168:	f010 fc1d 	bl	80149a6 <memcpy>
 800416c:	e7ea      	b.n	8004144 <DisplayModuleStatus+0x208>
		writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 800416e:	0020      	movs	r0, r4
 8004170:	f7fb ffd2 	bl	8000118 <strlen>
 8004174:	b282      	uxth	r2, r0
 8004176:	2301      	movs	r3, #1
 8004178:	425b      	negs	r3, r3
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	3333      	adds	r3, #51	; 0x33
 800417e:	0021      	movs	r1, r4
 8004180:	9803      	ldr	r0, [sp, #12]
 8004182:	f00a fb93 	bl	800e8ac <writePxMutex>
}
 8004186:	e7e8      	b.n	800415a <DisplayModuleStatus+0x21e>
 8004188:	200010ea 	.word	0x200010ea
 800418c:	2000111c 	.word	0x2000111c
 8004190:	08019328 	.word	0x08019328
 8004194:	20000ae8 	.word	0x20000ae8
 8004198:	08019344 	.word	0x08019344
 800419c:	08019360 	.word	0x08019360
 80041a0:	08019380 	.word	0x08019380
 80041a4:	0801938c 	.word	0x0801938c
 80041a8:	080193a4 	.word	0x080193a4
 80041ac:	080193b0 	.word	0x080193b0
 80041b0:	080193cc 	.word	0x080193cc
 80041b4:	2000116c 	.word	0x2000116c
 80041b8:	080193e8 	.word	0x080193e8
 80041bc:	080193e0 	.word	0x080193e0
 80041c0:	08019304 	.word	0x08019304
 80041c4:	080193f0 	.word	0x080193f0
 80041c8:	08019408 	.word	0x08019408
 80041cc:	08019414 	.word	0x08019414
 80041d0:	08019430 	.word	0x08019430
 80041d4:	08019450 	.word	0x08019450
 80041d8:	20001e1c 	.word	0x20001e1c
 80041dc:	08019468 	.word	0x08019468
 80041e0:	20001820 	.word	0x20001820
 80041e4:	08019484 	.word	0x08019484
 80041e8:	080193dc 	.word	0x080193dc
 80041ec:	080194b4 	.word	0x080194b4
 80041f0:	2000735c 	.word	0x2000735c
 80041f4:	080194d4 	.word	0x080194d4
 80041f8:	080194dc 	.word	0x080194dc

080041fc <GetID>:

/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
 */
int16_t GetID(char *string){
 80041fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041fe:	46c6      	mov	lr, r8
 8004200:	b500      	push	{lr}
 8004202:	0005      	movs	r5, r0
	uint8_t id =0, i =0;
	
	if(!strcmp(string,"me")) /* Check keywords */
 8004204:	4929      	ldr	r1, [pc, #164]	; (80042ac <GetID+0xb0>)
 8004206:	f7fb ff7d 	bl	8000104 <strcmp>
 800420a:	2800      	cmp	r0, #0
 800420c:	d010      	beq.n	8004230 <GetID+0x34>
		return myID;
	else if(!strcmp(string,"all"))
 800420e:	4928      	ldr	r1, [pc, #160]	; (80042b0 <GetID+0xb4>)
 8004210:	0028      	movs	r0, r5
 8004212:	f7fb ff77 	bl	8000104 <strcmp>
 8004216:	2800      	cmp	r0, #0
 8004218:	d045      	beq.n	80042a6 <GetID+0xaa>
		return BOS_BROADCAST;
	else if(string[0] == '#') /* Check IDs */
 800421a:	782b      	ldrb	r3, [r5, #0]
 800421c:	4698      	mov	r8, r3
 800421e:	2b23      	cmp	r3, #35	; 0x23
 8004220:	d00b      	beq.n	800423a <GetID+0x3e>
			return BOS_ERR_WrongID;
	}
	else /* Check alias */
	{
		/* Check module alias */
		for(i =0; i < N; i++){
 8004222:	4b24      	ldr	r3, [pc, #144]	; (80042b4 <GetID+0xb8>)
 8004224:	781f      	ldrb	r7, [r3, #0]
 8004226:	2f00      	cmp	r7, #0
 8004228:	d02a      	beq.n	8004280 <GetID+0x84>
 800422a:	4e23      	ldr	r6, [pc, #140]	; (80042b8 <GetID+0xbc>)
 800422c:	2400      	movs	r4, #0
 800422e:	e01c      	b.n	800426a <GetID+0x6e>
		return myID;
 8004230:	4b22      	ldr	r3, [pc, #136]	; (80042bc <GetID+0xc0>)
 8004232:	7818      	ldrb	r0, [r3, #0]
		}
		
		return BOS_ERR_WrongName;
	}
	
}
 8004234:	bc04      	pop	{r2}
 8004236:	4690      	mov	r8, r2
 8004238:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id =atol(string + 1);
 800423a:	1c68      	adds	r0, r5, #1
 800423c:	f010 f929 	bl	8014492 <atol>
 8004240:	b2c3      	uxtb	r3, r0
		if(id > 0 && id <= N)
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <GetID+0x52>
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <GetID+0xb8>)
 8004248:	7812      	ldrb	r2, [r2, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d206      	bcs.n	800425c <GetID+0x60>
		else if(id == myID)
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <GetID+0xc0>)
 8004250:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;
 8004252:	2066      	movs	r0, #102	; 0x66
		else if(id == myID)
 8004254:	429a      	cmp	r2, r3
 8004256:	d1ed      	bne.n	8004234 <GetID+0x38>
			return myID;
 8004258:	b210      	sxth	r0, r2
 800425a:	e7eb      	b.n	8004234 <GetID+0x38>
			return id;
 800425c:	b218      	sxth	r0, r3
 800425e:	e7e9      	b.n	8004234 <GetID+0x38>
		for(i =0; i < N; i++){
 8004260:	3401      	adds	r4, #1
 8004262:	b2e4      	uxtb	r4, r4
 8004264:	360a      	adds	r6, #10
 8004266:	42bc      	cmp	r4, r7
 8004268:	d00a      	beq.n	8004280 <GetID+0x84>
			if(!strcmp(string,moduleAlias[i]) && (*string != 0))
 800426a:	0031      	movs	r1, r6
 800426c:	0028      	movs	r0, r5
 800426e:	f7fb ff49 	bl	8000104 <strcmp>
 8004272:	2800      	cmp	r0, #0
 8004274:	d1f4      	bne.n	8004260 <GetID+0x64>
 8004276:	4643      	mov	r3, r8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0f1      	beq.n	8004260 <GetID+0x64>
				return (i);
 800427c:	b220      	sxth	r0, r4
 800427e:	e7d9      	b.n	8004234 <GetID+0x38>
 8004280:	4f0f      	ldr	r7, [pc, #60]	; (80042c0 <GetID+0xc4>)
		for(i =0; i < N; i++){
 8004282:	2600      	movs	r6, #0
			if(!strcmp(string,groupAlias[i]))
 8004284:	0039      	movs	r1, r7
 8004286:	0028      	movs	r0, r5
 8004288:	f7fb ff3c 	bl	8000104 <strcmp>
 800428c:	2800      	cmp	r0, #0
 800428e:	d005      	beq.n	800429c <GetID+0xa0>
 8004290:	3601      	adds	r6, #1
 8004292:	370a      	adds	r7, #10
		for(i =0; i < MaxNumOfGroups; i++){
 8004294:	2e0a      	cmp	r6, #10
 8004296:	d1f5      	bne.n	8004284 <GetID+0x88>
		return BOS_ERR_WrongName;
 8004298:	2064      	movs	r0, #100	; 0x64
 800429a:	e7cb      	b.n	8004234 <GetID+0x38>
				return (BOS_MULTICAST | (i << 8));
 800429c:	0234      	lsls	r4, r6, #8
 800429e:	20fe      	movs	r0, #254	; 0xfe
 80042a0:	4320      	orrs	r0, r4
 80042a2:	b200      	sxth	r0, r0
 80042a4:	e7c6      	b.n	8004234 <GetID+0x38>
		return BOS_BROADCAST;
 80042a6:	20ff      	movs	r0, #255	; 0xff
 80042a8:	e7c4      	b.n	8004234 <GetID+0x38>
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	08019568 	.word	0x08019568
 80042b0:	0801956c 	.word	0x0801956c
 80042b4:	20000044 	.word	0x20000044
 80042b8:	20000fdc 	.word	0x20000fdc
 80042bc:	200010ea 	.word	0x200010ea
 80042c0:	20000ed0 	.word	0x20000ed0

080042c4 <NameModule>:

/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
 */
BOS_Status NameModule(uint8_t module,char *alias){
 80042c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042c6:	b083      	sub	sp, #12
 80042c8:	9001      	str	r0, [sp, #4]
 80042ca:	000d      	movs	r5, r1
 80042cc:	4c2a      	ldr	r4, [pc, #168]	; (8004378 <NameModule+0xb4>)
 80042ce:	0027      	movs	r7, r4
 80042d0:	3710      	adds	r7, #16
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* 1. Check module alias with keywords */
	for(i =0; i < NumOfKeywords; i++){
		if(!strcmp(alias,BOSkeywords[i]))
 80042d2:	0021      	movs	r1, r4
 80042d4:	0028      	movs	r0, r5
 80042d6:	f7fb ff15 	bl	8000104 <strcmp>
 80042da:	2800      	cmp	r0, #0
 80042dc:	d043      	beq.n	8004366 <NameModule+0xa2>
 80042de:	3404      	adds	r4, #4
	for(i =0; i < NumOfKeywords; i++){
 80042e0:	42bc      	cmp	r4, r7
 80042e2:	d1f6      	bne.n	80042d2 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i =1; i < N; i++){
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <NameModule+0xb8>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d90f      	bls.n	800430c <NameModule+0x48>
 80042ec:	4c24      	ldr	r4, [pc, #144]	; (8004380 <NameModule+0xbc>)
 80042ee:	009f      	lsls	r7, r3, #2
 80042f0:	18ff      	adds	r7, r7, r3
 80042f2:	007f      	lsls	r7, r7, #1
 80042f4:	0023      	movs	r3, r4
 80042f6:	3b0a      	subs	r3, #10
 80042f8:	18ff      	adds	r7, r7, r3
		if(!strcmp(alias,moduleAlias[i]))
 80042fa:	0021      	movs	r1, r4
 80042fc:	0028      	movs	r0, r5
 80042fe:	f7fb ff01 	bl	8000104 <strcmp>
 8004302:	2800      	cmp	r0, #0
 8004304:	d031      	beq.n	800436a <NameModule+0xa6>
 8004306:	340a      	adds	r4, #10
	for(i =1; i < N; i++){
 8004308:	42bc      	cmp	r4, r7
 800430a:	d1f6      	bne.n	80042fa <NameModule+0x36>
 800430c:	4c1d      	ldr	r4, [pc, #116]	; (8004384 <NameModule+0xc0>)
 800430e:	0027      	movs	r7, r4
 8004310:	3764      	adds	r7, #100	; 0x64
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check module alias with group aliases */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!strcmp(alias,groupAlias[i]))
 8004312:	0021      	movs	r1, r4
 8004314:	0028      	movs	r0, r5
 8004316:	f7fb fef5 	bl	8000104 <strcmp>
 800431a:	2800      	cmp	r0, #0
 800431c:	d028      	beq.n	8004370 <NameModule+0xac>
 800431e:	340a      	adds	r4, #10
	for(i =0; i < MaxNumOfGroups; i++){
 8004320:	42bc      	cmp	r4, r7
 8004322:	d1f6      	bne.n	8004312 <NameModule+0x4e>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004324:	4c18      	ldr	r4, [pc, #96]	; (8004388 <NameModule+0xc4>)
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <NameModule+0xc8>)
 8004328:	601c      	str	r4, [r3, #0]
 800432a:	001e      	movs	r6, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	681f      	ldr	r7, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004330:	0038      	movs	r0, r7
 8004332:	f7fb fef1 	bl	8000118 <strlen>
 8004336:	0002      	movs	r2, r0
		
		if(!strncmp(alias,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 8004338:	0039      	movs	r1, r7
 800433a:	0028      	movs	r0, r5
 800433c:	f010 fdac 	bl	8014e98 <strncmp>
 8004340:	2800      	cmp	r0, #0
 8004342:	d017      	beq.n	8004374 <NameModule+0xb0>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004344:	6864      	ldr	r4, [r4, #4]
 8004346:	6034      	str	r4, [r6, #0]
 8004348:	2c00      	cmp	r4, #0
 800434a:	d1ef      	bne.n	800432c <NameModule+0x68>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module],alias);
 800434c:	9b01      	ldr	r3, [sp, #4]
 800434e:	0098      	lsls	r0, r3, #2
 8004350:	469c      	mov	ip, r3
 8004352:	4460      	add	r0, ip
 8004354:	0040      	lsls	r0, r0, #1
 8004356:	4e0e      	ldr	r6, [pc, #56]	; (8004390 <NameModule+0xcc>)
 8004358:	1980      	adds	r0, r0, r6
 800435a:	0029      	movs	r1, r5
 800435c:	f010 fd94 	bl	8014e88 <strcpy>
	
	/* 6. Share new module alias with other modules */

	/* 7. Save new alias to emulated EEPROM */
	result =SaveEEalias();
 8004360:	f7ff f890 	bl	8003484 <SaveEEalias>
	
	return result;
 8004364:	e002      	b.n	800436c <NameModule+0xa8>
			return BOS_ERR_Keyword;
 8004366:	2006      	movs	r0, #6
 8004368:	e000      	b.n	800436c <NameModule+0xa8>
			return BOS_ERR_ExistingAlias;
 800436a:	2007      	movs	r0, #7
}
 800436c:	b003      	add	sp, #12
 800436e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 8004370:	2007      	movs	r0, #7
 8004372:	e7fb      	b.n	800436c <NameModule+0xa8>
			return BOS_ERR_ExistingCmd;
 8004374:	2008      	movs	r0, #8
 8004376:	e7f9      	b.n	800436c <NameModule+0xa8>
 8004378:	08019318 	.word	0x08019318
 800437c:	20000044 	.word	0x20000044
 8004380:	20000fe6 	.word	0x20000fe6
 8004384:	20000ed0 	.word	0x20000ed0
 8004388:	20000108 	.word	0x20000108
 800438c:	20001174 	.word	0x20001174
 8004390:	20000fdc 	.word	0x20000fdc

08004394 <AddModuleToGroup>:

/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
 */
BOS_Status AddModuleToGroup(uint8_t module,char *group){
 8004394:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004396:	46c6      	mov	lr, r8
 8004398:	b500      	push	{lr}
 800439a:	0007      	movs	r7, r0
 800439c:	000e      	movs	r6, r1
 800439e:	4d3a      	ldr	r5, [pc, #232]	; (8004488 <AddModuleToGroup+0xf4>)
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;
	
	/* Check alias with other group aliases */

	for(i =0; i < MaxNumOfGroups; i++){
 80043a0:	2400      	movs	r4, #0
		/* This group already exists */
		if(!strcmp(group,groupAlias[i])){
 80043a2:	0029      	movs	r1, r5
 80043a4:	0030      	movs	r0, r6
 80043a6:	f7fb fead 	bl	8000104 <strcmp>
 80043aa:	2800      	cmp	r0, #0
 80043ac:	d050      	beq.n	8004450 <AddModuleToGroup+0xbc>
	for(i =0; i < MaxNumOfGroups; i++){
 80043ae:	3401      	adds	r4, #1
 80043b0:	350a      	adds	r5, #10
 80043b2:	2c0a      	cmp	r4, #10
 80043b4:	d1f5      	bne.n	80043a2 <AddModuleToGroup+0xe>
 80043b6:	4c35      	ldr	r4, [pc, #212]	; (800448c <AddModuleToGroup+0xf8>)
 80043b8:	0025      	movs	r5, r4
 80043ba:	3510      	adds	r5, #16
	
	/* This is a new group - Verify alias and create the group */

	/* 1. Check group alias with keywords */
	for(j =0; j < NumOfKeywords; j++){
		if(!strcmp(group,BOSkeywords[j]))
 80043bc:	0021      	movs	r1, r4
 80043be:	0030      	movs	r0, r6
 80043c0:	f7fb fea0 	bl	8000104 <strcmp>
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d058      	beq.n	800447a <AddModuleToGroup+0xe6>
 80043c8:	3404      	adds	r4, #4
	for(j =0; j < NumOfKeywords; j++){
 80043ca:	42ac      	cmp	r4, r5
 80043cc:	d1f6      	bne.n	80043bc <AddModuleToGroup+0x28>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check group alias with module aliases */
	for(j =1; j < N; j++){
 80043ce:	4b30      	ldr	r3, [pc, #192]	; (8004490 <AddModuleToGroup+0xfc>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d90f      	bls.n	80043f6 <AddModuleToGroup+0x62>
 80043d6:	4c2f      	ldr	r4, [pc, #188]	; (8004494 <AddModuleToGroup+0x100>)
 80043d8:	009d      	lsls	r5, r3, #2
 80043da:	18ed      	adds	r5, r5, r3
 80043dc:	006d      	lsls	r5, r5, #1
 80043de:	0023      	movs	r3, r4
 80043e0:	3b0a      	subs	r3, #10
 80043e2:	18ed      	adds	r5, r5, r3
		if(!strcmp(group,moduleAlias[j]))
 80043e4:	0021      	movs	r1, r4
 80043e6:	0030      	movs	r0, r6
 80043e8:	f7fb fe8c 	bl	8000104 <strcmp>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d046      	beq.n	800447e <AddModuleToGroup+0xea>
 80043f0:	340a      	adds	r4, #10
	for(j =1; j < N; j++){
 80043f2:	42ac      	cmp	r4, r5
 80043f4:	d1f6      	bne.n	80043e4 <AddModuleToGroup+0x50>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 3. Check group alias with BOS and module commands */
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 80043f6:	4c28      	ldr	r4, [pc, #160]	; (8004498 <AddModuleToGroup+0x104>)
 80043f8:	4b28      	ldr	r3, [pc, #160]	; (800449c <AddModuleToGroup+0x108>)
 80043fa:	601c      	str	r4, [r3, #0]
 80043fc:	4698      	mov	r8, r3
		pcRegisteredCommandString =pxCommand->pxCommandLineDefinition->pcCommand;
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength =strlen((const char* )pcRegisteredCommandString);
 8004402:	0028      	movs	r0, r5
 8004404:	f7fb fe88 	bl	8000118 <strlen>
 8004408:	0002      	movs	r2, r0
		
		if(!strncmp(group,(const char* )pcRegisteredCommandString,xCommandStringLength)){
 800440a:	0029      	movs	r1, r5
 800440c:	0030      	movs	r0, r6
 800440e:	f010 fd43 	bl	8014e98 <strncmp>
 8004412:	2800      	cmp	r0, #0
 8004414:	d035      	beq.n	8004482 <AddModuleToGroup+0xee>
	for(pxCommand =&xRegisteredCommands; pxCommand != NULL; pxCommand =pxCommand->pxNext){
 8004416:	6864      	ldr	r4, [r4, #4]
 8004418:	4643      	mov	r3, r8
 800441a:	601c      	str	r4, [r3, #0]
 800441c:	2c00      	cmp	r4, #0
 800441e:	d1ee      	bne.n	80043fe <AddModuleToGroup+0x6a>
		}
	}
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i =0; i < MaxNumOfGroups; i++){
		if(!groupAlias[i][0]){
 8004420:	4b19      	ldr	r3, [pc, #100]	; (8004488 <AddModuleToGroup+0xf4>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01e      	beq.n	8004466 <AddModuleToGroup+0xd2>
 8004428:	4b17      	ldr	r3, [pc, #92]	; (8004488 <AddModuleToGroup+0xf4>)
 800442a:	330a      	adds	r3, #10
	for(i =0; i < MaxNumOfGroups; i++){
 800442c:	3401      	adds	r4, #1
		if(!groupAlias[i][0]){
 800442e:	781a      	ldrb	r2, [r3, #0]
 8004430:	2a00      	cmp	r2, #0
 8004432:	d019      	beq.n	8004468 <AddModuleToGroup+0xd4>
	for(i =0; i < MaxNumOfGroups; i++){
 8004434:	3401      	adds	r4, #1
 8004436:	330a      	adds	r3, #10
 8004438:	2c0a      	cmp	r4, #10
 800443a:	d1f8      	bne.n	800442e <AddModuleToGroup+0x9a>
			break;
		}
	}
	
	/* 5. Add this module to the new group */
	groupModules[module - 1] |=(0x0001 << i);
 800443c:	3f01      	subs	r7, #1
 800443e:	4918      	ldr	r1, [pc, #96]	; (80044a0 <AddModuleToGroup+0x10c>)
 8004440:	007f      	lsls	r7, r7, #1
 8004442:	2201      	movs	r2, #1
 8004444:	40a2      	lsls	r2, r4
 8004446:	5a7b      	ldrh	r3, [r7, r1]
 8004448:	4313      	orrs	r3, r2
 800444a:	527b      	strh	r3, [r7, r1]
	
	/* 6. Share new group with other modules */

	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	return result;
 800444c:	2000      	movs	r0, #0
 800444e:	e007      	b.n	8004460 <AddModuleToGroup+0xcc>
			groupModules[module - 1] |=(0x0001 << i);
 8004450:	3f01      	subs	r7, #1
 8004452:	4913      	ldr	r1, [pc, #76]	; (80044a0 <AddModuleToGroup+0x10c>)
 8004454:	007f      	lsls	r7, r7, #1
 8004456:	2201      	movs	r2, #1
 8004458:	40a2      	lsls	r2, r4
 800445a:	5a7b      	ldrh	r3, [r7, r1]
 800445c:	4313      	orrs	r3, r2
 800445e:	527b      	strh	r3, [r7, r1]
}
 8004460:	bc04      	pop	{r2}
 8004462:	4690      	mov	r8, r2
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for(i =0; i < MaxNumOfGroups; i++){
 8004466:	2400      	movs	r4, #0
			strcpy(groupAlias[i],group);
 8004468:	00a0      	lsls	r0, r4, #2
 800446a:	1900      	adds	r0, r0, r4
 800446c:	0040      	lsls	r0, r0, #1
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <AddModuleToGroup+0xf4>)
 8004470:	1818      	adds	r0, r3, r0
 8004472:	0031      	movs	r1, r6
 8004474:	f010 fd08 	bl	8014e88 <strcpy>
			break;
 8004478:	e7e0      	b.n	800443c <AddModuleToGroup+0xa8>
			return BOS_ERR_Keyword;
 800447a:	2006      	movs	r0, #6
 800447c:	e7f0      	b.n	8004460 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingAlias;
 800447e:	2007      	movs	r0, #7
 8004480:	e7ee      	b.n	8004460 <AddModuleToGroup+0xcc>
			return BOS_ERR_ExistingCmd;
 8004482:	2008      	movs	r0, #8
 8004484:	e7ec      	b.n	8004460 <AddModuleToGroup+0xcc>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	20000ed0 	.word	0x20000ed0
 800448c:	08019318 	.word	0x08019318
 8004490:	20000044 	.word	0x20000044
 8004494:	20000fe6 	.word	0x20000fe6
 8004498:	20000108 	.word	0x20000108
 800449c:	20001178 	.word	0x20001178
 80044a0:	20000f34 	.word	0x20000f34

080044a4 <ReadPortsDir>:

/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
 */
BOS_Status ReadPortsDir(void){
 80044a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044a6:	46ce      	mov	lr, r9
 80044a8:	4647      	mov	r7, r8
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b083      	sub	sp, #12
	BOS_Status result =BOS_OK;
	
	/* Ask all other modules for their ports directions */
	for(uint8_t i =1; i <= N; i++){
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <ReadPortsDir+0x9c>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d03c      	beq.n	8004530 <ReadPortsDir+0x8c>
 80044b6:	2501      	movs	r5, #1
	BOS_Status result =BOS_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	9301      	str	r3, [sp, #4]
		if(i != myID){
 80044bc:	4b21      	ldr	r3, [pc, #132]	; (8004544 <ReadPortsDir+0xa0>)
 80044be:	4699      	mov	r9, r3
		}
		else{
			/* Check my own ports */
			for(uint8_t p =1; p <= NumOfPorts; p++){
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <ReadPortsDir+0xa4>)
 80044c2:	4698      	mov	r8, r3
 80044c4:	e021      	b.n	800450a <ReadPortsDir+0x66>
 80044c6:	2600      	movs	r6, #0
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044c8:	2401      	movs	r4, #1
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044ca:	2780      	movs	r7, #128	; 0x80
 80044cc:	023f      	lsls	r7, r7, #8
 80044ce:	e004      	b.n	80044da <ReadPortsDir+0x36>
			for(uint8_t p =1; p <= NumOfPorts; p++){
 80044d0:	3401      	adds	r4, #1
 80044d2:	b2e4      	uxtb	r4, r4
 80044d4:	3601      	adds	r6, #1
 80044d6:	2c07      	cmp	r4, #7
 80044d8:	d011      	beq.n	80044fe <ReadPortsDir+0x5a>
				if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 80044da:	0020      	movs	r0, r4
 80044dc:	f00a f9c4 	bl	800e868 <GetUart>
 80044e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044e2:	42bb      	cmp	r3, r7
 80044e4:	d1f4      	bne.n	80044d0 <ReadPortsDir+0x2c>
					arrayPortsDir[myID - 1] |=(0x8000 >> (p - 1)); /* Set bit to 1 */
 80044e6:	4b17      	ldr	r3, [pc, #92]	; (8004544 <ReadPortsDir+0xa0>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	4642      	mov	r2, r8
 80044f0:	5a9a      	ldrh	r2, [r3, r2]
 80044f2:	0039      	movs	r1, r7
 80044f4:	4131      	asrs	r1, r6
 80044f6:	430a      	orrs	r2, r1
 80044f8:	4641      	mov	r1, r8
 80044fa:	525a      	strh	r2, [r3, r1]
 80044fc:	e7e8      	b.n	80044d0 <ReadPortsDir+0x2c>
	for(uint8_t i =1; i <= N; i++){
 80044fe:	3501      	adds	r5, #1
 8004500:	b2ed      	uxtb	r5, r5
 8004502:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <ReadPortsDir+0x9c>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	42ab      	cmp	r3, r5
 8004508:	d314      	bcc.n	8004534 <ReadPortsDir+0x90>
		if(i != myID){
 800450a:	464b      	mov	r3, r9
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	42ab      	cmp	r3, r5
 8004510:	d0d9      	beq.n	80044c6 <ReadPortsDir+0x22>
			SendMessageToModule(i,CODE_READ_PORT_DIR,0);
 8004512:	2200      	movs	r2, #0
 8004514:	2113      	movs	r1, #19
 8004516:	0028      	movs	r0, r5
 8004518:	f005 fb24 	bl	8009b64 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 800451c:	2032      	movs	r0, #50	; 0x32
 800451e:	f009 ffc9 	bl	800e4b4 <StartMilliDelay>
			if(responseStatus != BOS_OK){
 8004522:	4b0a      	ldr	r3, [pc, #40]	; (800454c <ReadPortsDir+0xa8>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0e9      	beq.n	80044fe <ReadPortsDir+0x5a>
				result =BOS_ERR_NoResponse;
 800452a:	2302      	movs	r3, #2
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	e7e6      	b.n	80044fe <ReadPortsDir+0x5a>
	BOS_Status result =BOS_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	9301      	str	r3, [sp, #4]
			}
		}
	}
	
	return result;
}
 8004534:	9801      	ldr	r0, [sp, #4]
 8004536:	b003      	add	sp, #12
 8004538:	bc0c      	pop	{r2, r3}
 800453a:	4690      	mov	r8, r2
 800453c:	4699      	mov	r9, r3
 800453e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004540:	20000044 	.word	0x20000044
 8004544:	200010ea 	.word	0x200010ea
 8004548:	2000735c 	.word	0x2000735c
 800454c:	20001188 	.word	0x20001188

08004550 <UpdateMyPortsDir>:

/*-----------------------------------------------------------*/
#ifndef __N
/* --- Update module port directions based on what is stored in eeprom --- 
 */
BOS_Status UpdateMyPortsDir(void){
 8004550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004552:	46c6      	mov	lr, r8
 8004554:	b500      	push	{lr}
 8004556:	2500      	movs	r5, #0
	BOS_Status result =BOS_OK;
	
	/* Check port direction */
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004558:	2401      	movs	r4, #1
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <UpdateMyPortsDir+0x54>)
 800455c:	4698      	mov	r8, r3
 800455e:	4f12      	ldr	r7, [pc, #72]	; (80045a8 <UpdateMyPortsDir+0x58>)
 8004560:	2680      	movs	r6, #128	; 0x80
 8004562:	0236      	lsls	r6, r6, #8
 8004564:	e00a      	b.n	800457c <UpdateMyPortsDir+0x2c>
			/* Port is normal */
			SwapUartPins(GetUart(p),NORMAL);
		}
		else{
			/* Port is reversed */
			SwapUartPins(GetUart(p),REVERSED);
 8004566:	0020      	movs	r0, r4
 8004568:	f00a f97e 	bl	800e868 <GetUart>
 800456c:	2101      	movs	r1, #1
 800456e:	f00a fa15 	bl	800e99c <SwapUartPins>
	for(uint8_t p =1; p <= NumOfPorts; p++){
 8004572:	3401      	adds	r4, #1
 8004574:	b2e4      	uxtb	r4, r4
 8004576:	3501      	adds	r5, #1
 8004578:	2c07      	cmp	r4, #7
 800457a:	d00f      	beq.n	800459c <UpdateMyPortsDir+0x4c>
		if(!(arrayPortsDir[myID - 1] & (0x8000 >> (p - 1)))){
 800457c:	783b      	ldrb	r3, [r7, #0]
 800457e:	3b01      	subs	r3, #1
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	4642      	mov	r2, r8
 8004584:	5a9b      	ldrh	r3, [r3, r2]
 8004586:	0032      	movs	r2, r6
 8004588:	412a      	asrs	r2, r5
 800458a:	421a      	tst	r2, r3
 800458c:	d1eb      	bne.n	8004566 <UpdateMyPortsDir+0x16>
			SwapUartPins(GetUart(p),NORMAL);
 800458e:	0020      	movs	r0, r4
 8004590:	f00a f96a 	bl	800e868 <GetUart>
 8004594:	2100      	movs	r1, #0
 8004596:	f00a fa01 	bl	800e99c <SwapUartPins>
 800459a:	e7ea      	b.n	8004572 <UpdateMyPortsDir+0x22>
		}
	}
	
	return result;
}
 800459c:	2000      	movs	r0, #0
 800459e:	bc04      	pop	{r2}
 80045a0:	4690      	mov	r8, r2
 80045a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a4:	2000735c 	.word	0x2000735c
 80045a8:	200010ea 	.word	0x200010ea

080045ac <BOS_Init>:
void BOS_Init(void){
 80045ac:	b570      	push	{r4, r5, r6, lr}
	RTC_Init();
 80045ae:	f009 fe39 	bl	800e224 <RTC_Init>
	GetTimeDate();
 80045b2:	f009 fed7 	bl	800e364 <GetTimeDate>
	EE_Init();
 80045b6:	f003 fa49 	bl	8007a4c <EE_Init>
	GPIO_Init();
 80045ba:	f009 fae5 	bl	800db88 <GPIO_Init>
	DMA_Init();
 80045be:	f008 fa63 	bl	800ca88 <DMA_Init>
	TIM_USEC_Init();
 80045c2:	f009 ff03 	bl	800e3cc <TIM_USEC_Init>
	CRC_Init();
 80045c6:	f009 fa8b 	bl	800dae0 <CRC_Init>
	TIM_MSEC_Init();
 80045ca:	f009 ff31 	bl	800e430 <TIM_MSEC_Init>
	if(IsFactoryReset()){
 80045ce:	f009 fba9 	bl	800dd24 <IsFactoryReset>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d11a      	bne.n	800460c <BOS_Init+0x60>
	if(IsLowerCLIbaud()){
 80045d6:	f7ff f863 	bl	80036a0 <IsLowerCLIbaud>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d021      	beq.n	8004622 <BOS_Init+0x76>
		CLI_LOW_Baudrate_Flag =1;
 80045de:	4b34      	ldr	r3, [pc, #208]	; (80046b0 <BOS_Init+0x104>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 80045e4:	2032      	movs	r0, #50	; 0x32
 80045e6:	f009 ff65 	bl	800e4b4 <StartMilliDelay>
		Module_Peripheral_Init();
 80045ea:	f007 fb5f 	bl	800bcac <Module_Peripheral_Init>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 80045ee:	4b31      	ldr	r3, [pc, #196]	; (80046b4 <BOS_Init+0x108>)
 80045f0:	22e1      	movs	r2, #225	; 0xe1
 80045f2:	0252      	lsls	r2, r2, #9
 80045f4:	609a      	str	r2, [r3, #8]
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80045f6:	2401      	movs	r4, #1
			UpdateBaudrate(port,BOS.clibaudrate);
 80045f8:	001d      	movs	r5, r3
 80045fa:	68a9      	ldr	r1, [r5, #8]
 80045fc:	0020      	movs	r0, r4
 80045fe:	f00a f9c3 	bl	800e988 <UpdateBaudrate>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 8004602:	3401      	adds	r4, #1
 8004604:	b2e4      	uxtb	r4, r4
 8004606:	2c07      	cmp	r4, #7
 8004608:	d1f7      	bne.n	80045fa <BOS_Init+0x4e>
 800460a:	e00f      	b.n	800462c <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 800460c:	f7ff f836 	bl	800367c <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004610:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004614:	4b28      	ldr	r3, [pc, #160]	; (80046b8 <BOS_Init+0x10c>)
 8004616:	4a29      	ldr	r2, [pc, #164]	; (80046bc <BOS_Init+0x110>)
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	e7fd      	b.n	800461e <BOS_Init+0x72>
		Delay_ms_no_rtos(50);		// Give other modules time to finish factory reset and baudrate check
 8004622:	2032      	movs	r0, #50	; 0x32
 8004624:	f009 ff46 	bl	800e4b4 <StartMilliDelay>
		Module_Peripheral_Init();
 8004628:	f007 fb40 	bl	800bcac <Module_Peripheral_Init>
	LoadEEvars();
 800462c:	f7fe feee 	bl	800340c <LoadEEvars>
	UpdateMyPortsDir();
 8004630:	f7ff ff8e 	bl	8004550 <UpdateMyPortsDir>
	SetupMessagingRxDMAs();
 8004634:	f008 fe92 	bl	800d35c <SetupMessagingRxDMAs>
	if(myID == 0) /* Native module */
 8004638:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <BOS_Init+0x114>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d025      	beq.n	800468c <BOS_Init+0xe0>
		IND_ON();
 8004640:	2490      	movs	r4, #144	; 0x90
 8004642:	05e4      	lsls	r4, r4, #23
 8004644:	2201      	movs	r2, #1
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	0020      	movs	r0, r4
 800464a:	f00d fef1 	bl	8012430 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);
 800464e:	20fa      	movs	r0, #250	; 0xfa
 8004650:	0040      	lsls	r0, r0, #1
 8004652:	f009 ff2f 	bl	800e4b4 <StartMilliDelay>
		IND_OFF();
 8004656:	2200      	movs	r2, #0
 8004658:	2180      	movs	r1, #128	; 0x80
 800465a:	0020      	movs	r0, r4
 800465c:	f00d fee8 	bl	8012430 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004660:	2064      	movs	r0, #100	; 0x64
 8004662:	f009 ff27 	bl	800e4b4 <StartMilliDelay>
		IND_ON();
 8004666:	2201      	movs	r2, #1
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	0020      	movs	r0, r4
 800466c:	f00d fee0 	bl	8012430 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8004670:	2064      	movs	r0, #100	; 0x64
 8004672:	f009 ff1f 	bl	800e4b4 <StartMilliDelay>
		IND_OFF();
 8004676:	2200      	movs	r2, #0
 8004678:	2180      	movs	r1, #128	; 0x80
 800467a:	0020      	movs	r0, r4
 800467c:	f00d fed8 	bl	8012430 <HAL_GPIO_WritePin>
	ResetUartORE();
 8004680:	f003 f820 	bl	80076c4 <ResetUartORE>
	BOS_initialized =1;
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <BOS_Init+0x118>)
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
}
 800468a:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();
 800468c:	2490      	movs	r4, #144	; 0x90
 800468e:	05e4      	lsls	r4, r4, #23
 8004690:	2201      	movs	r2, #1
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	0020      	movs	r0, r4
 8004696:	f00d fecb 	bl	8012430 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(500);IND_OFF();
 800469a:	20fa      	movs	r0, #250	; 0xfa
 800469c:	0040      	lsls	r0, r0, #1
 800469e:	f009 ff09 	bl	800e4b4 <StartMilliDelay>
 80046a2:	2200      	movs	r2, #0
 80046a4:	2180      	movs	r1, #128	; 0x80
 80046a6:	0020      	movs	r0, r4
 80046a8:	f00d fec2 	bl	8012430 <HAL_GPIO_WritePin>
 80046ac:	e7e8      	b.n	8004680 <BOS_Init+0xd4>
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	20000ae7 	.word	0x20000ae7
 80046b4:	20006e54 	.word	0x20006e54
 80046b8:	e000ed00 	.word	0xe000ed00
 80046bc:	05fa0004 	.word	0x05fa0004
 80046c0:	200010ea 	.word	0x200010ea
 80046c4:	20000ae6 	.word	0x20000ae6

080046c8 <Module_Init>:
void Module_Init(void){
 80046c8:	b510      	push	{r4, lr}
	HAL_Init();
 80046ca:	f00c fa29 	bl	8010b20 <HAL_Init>
	SystemClock_Config();
 80046ce:	f007 fa35 	bl	800bb3c <SystemClock_Config>
	BOS_Init();
 80046d2:	f7ff ff6b 	bl	80045ac <BOS_Init>
	MX_FREERTOS_Init();
 80046d6:	f003 fb83 	bl	8007de0 <MX_FREERTOS_Init>
	osKernelStart();
 80046da:	f00a fa0f 	bl	800eafc <osKernelStart>
}
 80046de:	bd10      	pop	{r4, pc}

080046e0 <GetDateString>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year */
char* GetDateString(void){
 80046e0:	b510      	push	{r4, lr}
 80046e2:	b082      	sub	sp, #8
	static const char formatDateStr[] ="%s %02d/%02d/%04d";
	char *buffer =malloc(30 * sizeof(int8_t));
 80046e4:	201e      	movs	r0, #30
 80046e6:	f00f ff11 	bl	801450c <malloc>
 80046ea:	0004      	movs	r4, r0
	memset(buffer,0x00,30 * sizeof(int8_t));
 80046ec:	221e      	movs	r2, #30
 80046ee:	2100      	movs	r1, #0
 80046f0:	f010 f962 	bl	80149b8 <memset>
	sprintf(buffer,formatDateStr,weekdayString[BOS.date.weekday - 1],BOS.date.month,BOS.date.day,BOS.date.year);
 80046f4:	4908      	ldr	r1, [pc, #32]	; (8004718 <GetDateString+0x38>)
 80046f6:	7d8b      	ldrb	r3, [r1, #22]
 80046f8:	7d0a      	ldrb	r2, [r1, #20]
 80046fa:	3a01      	subs	r2, #1
 80046fc:	0092      	lsls	r2, r2, #2
 80046fe:	4807      	ldr	r0, [pc, #28]	; (800471c <GetDateString+0x3c>)
 8004700:	5812      	ldr	r2, [r2, r0]
 8004702:	8b08      	ldrh	r0, [r1, #24]
 8004704:	9001      	str	r0, [sp, #4]
 8004706:	7d49      	ldrb	r1, [r1, #21]
 8004708:	9100      	str	r1, [sp, #0]
 800470a:	4905      	ldr	r1, [pc, #20]	; (8004720 <GetDateString+0x40>)
 800470c:	0020      	movs	r0, r4
 800470e:	f010 fb7f 	bl	8014e10 <sprintf>
	return buffer;
}
 8004712:	0020      	movs	r0, r4
 8004714:	b002      	add	sp, #8
 8004716:	bd10      	pop	{r4, pc}
 8004718:	20006e54 	.word	0x20006e54
 800471c:	0801987c 	.word	0x0801987c
 8004720:	08019588 	.word	0x08019588

08004724 <Bridge>:
}

/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together */
BOS_Status Bridge(uint8_t port1,uint8_t port2){
 8004724:	b500      	push	{lr}
 8004726:	b085      	sub	sp, #20
 8004728:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1,myID,port2,myID,BIDIRECTIONAL,0xFFFFFFFF,0xFFFFFFFF,true);
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <Bridge+0x24>)
 800472c:	7819      	ldrb	r1, [r3, #0]
 800472e:	2301      	movs	r3, #1
 8004730:	9303      	str	r3, [sp, #12]
 8004732:	3b02      	subs	r3, #2
 8004734:	9302      	str	r3, [sp, #8]
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	3303      	adds	r3, #3
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	000b      	movs	r3, r1
 800473e:	f005 fa37 	bl	8009bb0 <StartScastDMAStream>
}
 8004742:	b005      	add	sp, #20
 8004744:	bd00      	pop	{pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	200010ea 	.word	0x200010ea

0800474c <Unbridge>:

/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports  */
BOS_Status Unbridge(uint8_t port1,uint8_t port2){
 800474c:	b530      	push	{r4, r5, lr}
 800474e:	b087      	sub	sp, #28
 8004750:	0004      	movs	r4, r0
 8004752:	000d      	movs	r5, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0,0,0,0,0,0,0,0,0);
 8004754:	2300      	movs	r3, #0
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	9303      	str	r3, [sp, #12]
 800475a:	9302      	str	r3, [sp, #8]
 800475c:	9301      	str	r3, [sp, #4]
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2200      	movs	r2, #0
 8004762:	2100      	movs	r1, #0
 8004764:	2000      	movs	r0, #0
 8004766:	f7fe fecf 	bl	8003508 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1 - 1].Instance != 0 && streamDMA[port2 - 1].Instance != 0){
 800476a:	1e62      	subs	r2, r4, #1
 800476c:	00d3      	lsls	r3, r2, #3
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	4a14      	ldr	r2, [pc, #80]	; (80047c4 <Unbridge+0x78>)
 8004774:	589b      	ldr	r3, [r3, r2]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d015      	beq.n	80047a6 <Unbridge+0x5a>
 800477a:	1e6a      	subs	r2, r5, #1
 800477c:	00d3      	lsls	r3, r2, #3
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4a10      	ldr	r2, [pc, #64]	; (80047c4 <Unbridge+0x78>)
 8004784:	589b      	ldr	r3, [r3, r2]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <Unbridge+0x48>
		SwitchStreamDMAToMsg(port1);
		SwitchStreamDMAToMsg(port2);
		return BOS_OK;
	}
	else if(streamDMA[port1 - 1].Instance != 0){
		SwitchStreamDMAToMsg(port1);
 800478a:	0020      	movs	r0, r4
 800478c:	f002 ff0e 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 8004790:	2000      	movs	r0, #0
 8004792:	e006      	b.n	80047a2 <Unbridge+0x56>
		SwitchStreamDMAToMsg(port1);
 8004794:	0020      	movs	r0, r4
 8004796:	f002 ff09 	bl	80075ac <SwitchStreamDMAToMsg>
		SwitchStreamDMAToMsg(port2);
 800479a:	0028      	movs	r0, r5
 800479c:	f002 ff06 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047a0:	2000      	movs	r0, #0
		return BOS_OK;
	}
	else{
		return BOS_ERR_WrongValue;
	}
}
 80047a2:	b007      	add	sp, #28
 80047a4:	bd30      	pop	{r4, r5, pc}
	else if(streamDMA[port2 - 1].Instance != 0){
 80047a6:	1e6a      	subs	r2, r5, #1
 80047a8:	00d3      	lsls	r3, r2, #3
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	00db      	lsls	r3, r3, #3
 80047ae:	4a05      	ldr	r2, [pc, #20]	; (80047c4 <Unbridge+0x78>)
 80047b0:	589b      	ldr	r3, [r3, r2]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d004      	beq.n	80047c0 <Unbridge+0x74>
		SwitchStreamDMAToMsg(port2);
 80047b6:	0028      	movs	r0, r5
 80047b8:	f002 fef8 	bl	80075ac <SwitchStreamDMAToMsg>
		return BOS_OK;
 80047bc:	2000      	movs	r0, #0
 80047be:	e7f0      	b.n	80047a2 <Unbridge+0x56>
		return BOS_ERR_WrongValue;
 80047c0:	2068      	movs	r0, #104	; 0x68
 80047c2:	e7ee      	b.n	80047a2 <Unbridge+0x56>
 80047c4:	20001e1c 	.word	0x20001e1c

080047c8 <StringToLowerCase>:

/*-----------------------------------------------------------*/

/* Convert a string to lower case
 */
void StringToLowerCase(char *string){
 80047c8:	b570      	push	{r4, r5, r6, lr}
 80047ca:	0005      	movs	r5, r0
	for(int i =0; string[i]; i++){
 80047cc:	7804      	ldrb	r4, [r0, #0]
 80047ce:	2c00      	cmp	r4, #0
 80047d0:	d010      	beq.n	80047f4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80047d2:	2603      	movs	r6, #3
 80047d4:	e004      	b.n	80047e0 <StringToLowerCase+0x18>
 80047d6:	702a      	strb	r2, [r5, #0]
 80047d8:	3501      	adds	r5, #1
	for(int i =0; string[i]; i++){
 80047da:	782c      	ldrb	r4, [r5, #0]
 80047dc:	2c00      	cmp	r4, #0
 80047de:	d009      	beq.n	80047f4 <StringToLowerCase+0x2c>
		string[i] =tolower(string[i]);
 80047e0:	f00f fe86 	bl	80144f0 <__locale_ctype_ptr>
 80047e4:	1900      	adds	r0, r0, r4
 80047e6:	7843      	ldrb	r3, [r0, #1]
 80047e8:	4033      	ands	r3, r6
 80047ea:	0022      	movs	r2, r4
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d1f2      	bne.n	80047d6 <StringToLowerCase+0xe>
 80047f0:	3220      	adds	r2, #32
 80047f2:	e7f0      	b.n	80047d6 <StringToLowerCase+0xe>
	}
}
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080047f8 <ParseSnippetCondition>:

/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
 */
BOS_Status ParseSnippetCondition(char *string){
 80047f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047fa:	46c6      	mov	lr, r8
 80047fc:	b500      	push	{lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	0005      	movs	r5, r0
	static int8_t cInputString[cmdMAX_INPUT_SIZE];
	BOS_Status status =BOS_OK;
	uint8_t port =0;
	
	// A. Verify first there's still memory left to store Snippets	
	if(numOfRecordedSnippets == MAX_SNIPPETS){
 8004802:	4bdc      	ldr	r3, [pc, #880]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004804:	781c      	ldrb	r4, [r3, #0]
 8004806:	2c05      	cmp	r4, #5
 8004808:	d100      	bne.n	800480c <ParseSnippetCondition+0x14>
 800480a:	e210      	b.n	8004c2e <ParseSnippetCondition+0x436>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else{
		snippets[numOfRecordedSnippets].cond.conditionType =0;
 800480c:	49da      	ldr	r1, [pc, #872]	; (8004b78 <ParseSnippetCondition+0x380>)
 800480e:	00a3      	lsls	r3, r4, #2
 8004810:	191a      	adds	r2, r3, r4
 8004812:	0092      	lsls	r2, r2, #2
 8004814:	2000      	movs	r0, #0
 8004816:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator =0;
 8004818:	191a      	adds	r2, r3, r4
 800481a:	0092      	lsls	r2, r2, #2
 800481c:	188a      	adds	r2, r1, r2
 800481e:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1,0,4);
 8004820:	1918      	adds	r0, r3, r4
 8004822:	0080      	lsls	r0, r0, #2
 8004824:	3002      	adds	r0, #2
 8004826:	1840      	adds	r0, r0, r1
 8004828:	2204      	movs	r2, #4
 800482a:	2100      	movs	r1, #0
 800482c:	f010 f8c4 	bl	80149b8 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.'){
 8004830:	782b      	ldrb	r3, [r5, #0]
 8004832:	2b62      	cmp	r3, #98	; 0x62
 8004834:	d102      	bne.n	800483c <ParseSnippetCondition+0x44>
 8004836:	78ab      	ldrb	r3, [r5, #2]
 8004838:	2b2e      	cmp	r3, #46	; 0x2e
 800483a:	d032      	beq.n	80048a2 <ParseSnippetCondition+0xaa>
			++numOfRecordedSnippets;		// Record a successful Snippet			
		}
	}
	// Module-related conditions (local only for now)
	else{
		strcpy((char* )cInputString,string);
 800483c:	4ecf      	ldr	r6, [pc, #828]	; (8004b7c <ParseSnippetCondition+0x384>)
 800483e:	0029      	movs	r1, r5
 8004840:	0030      	movs	r0, r6
 8004842:	f010 fb21 	bl	8014e88 <strcpy>
		
		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart;
		uint8_t modPar1 =0, modPar2 =0;
		firstPart =strtok((char* )cInputString," ");
 8004846:	4cce      	ldr	r4, [pc, #824]	; (8004b80 <ParseSnippetCondition+0x388>)
 8004848:	0021      	movs	r1, r4
 800484a:	0030      	movs	r0, r6
 800484c:	f011 f99c 	bl	8015b88 <strtok>
 8004850:	0005      	movs	r5, r0
		secondPart =strtok( NULL," ");
 8004852:	0021      	movs	r1, r4
 8004854:	2000      	movs	r0, #0
 8004856:	f011 f997 	bl	8015b88 <strtok>
 800485a:	0006      	movs	r6, r0
		thirdPart =strtok( NULL," ");
 800485c:	0021      	movs	r1, r4
 800485e:	2000      	movs	r0, #0
 8004860:	f011 f992 	bl	8015b88 <strtok>
 8004864:	0004      	movs	r4, r0
		
		// Check if first part is module parameter or event
		if(firstPart == NULL){
 8004866:	2d00      	cmp	r5, #0
 8004868:	d100      	bne.n	800486c <ParseSnippetCondition+0x74>
 800486a:	e1e5      	b.n	8004c38 <ParseSnippetCondition+0x440>
			return BOS_ERR_WrongParam;
		}
		else{
			modPar1 =IsModuleParameter(firstPart);
 800486c:	0028      	movs	r0, r5
 800486e:	f7fe ff7b 	bl	8003768 <IsModuleParameter>
 8004872:	1e05      	subs	r5, r0, #0
			// Found a module parameter and no more strings
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004874:	d100      	bne.n	8004878 <ParseSnippetCondition+0x80>
 8004876:	e18f      	b.n	8004b98 <ParseSnippetCondition+0x3a0>
 8004878:	2e00      	cmp	r6, #0
 800487a:	d000      	beq.n	800487e <ParseSnippetCondition+0x86>
 800487c:	e18e      	b.n	8004b9c <ParseSnippetCondition+0x3a4>
				
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;
			}
			else{
				return BOS_ERR_WrongParam;
 800487e:	2067      	movs	r0, #103	; 0x67
			if(modPar1 && secondPart == NULL && thirdPart == NULL){
 8004880:	2c00      	cmp	r4, #0
 8004882:	d000      	beq.n	8004886 <ParseSnippetCondition+0x8e>
 8004884:	e1d4      	b.n	8004c30 <ParseSnippetCondition+0x438>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;
 8004886:	4cbb      	ldr	r4, [pc, #748]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004888:	7823      	ldrb	r3, [r4, #0]
 800488a:	49bb      	ldr	r1, [pc, #748]	; (8004b78 <ParseSnippetCondition+0x380>)
 800488c:	009a      	lsls	r2, r3, #2
 800488e:	18d0      	adds	r0, r2, r3
 8004890:	0080      	lsls	r0, r0, #2
 8004892:	3602      	adds	r6, #2
 8004894:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004896:	180a      	adds	r2, r1, r0
 8004898:	70d5      	strb	r5, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 800489a:	3301      	adds	r3, #1
 800489c:	7023      	strb	r3, [r4, #0]
				return BOS_OK;
 800489e:	2000      	movs	r0, #0
 80048a0:	e1c6      	b.n	8004c30 <ParseSnippetCondition+0x438>
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80048a2:	786e      	ldrb	r6, [r5, #1]
 80048a4:	3e30      	subs	r6, #48	; 0x30
 80048a6:	b2f6      	uxtb	r6, r6
	BOS_Status status =BOS_OK;
 80048a8:	2000      	movs	r0, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts + '0'))		// Valid port number
 80048aa:	2e06      	cmp	r6, #6
 80048ac:	d900      	bls.n	80048b0 <ParseSnippetCondition+0xb8>
 80048ae:	e1bf      	b.n	8004c30 <ParseSnippetCondition+0x438>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 80048b0:	4ab1      	ldr	r2, [pc, #708]	; (8004b78 <ParseSnippetCondition+0x380>)
 80048b2:	00a3      	lsls	r3, r4, #2
 80048b4:	1919      	adds	r1, r3, r4
 80048b6:	0089      	lsls	r1, r1, #2
 80048b8:	3001      	adds	r0, #1
 80048ba:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator =0;			// No math operations
 80048bc:	1853      	adds	r3, r2, r1
 80048be:	2200      	movs	r2, #0
 80048c0:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] =port;		// Store button port number
 80048c2:	709e      	strb	r6, [r3, #2]
			if(!strncmp((char* )&string[3],"clicked",7)){
 80048c4:	1cef      	adds	r7, r5, #3
 80048c6:	3207      	adds	r2, #7
 80048c8:	49ae      	ldr	r1, [pc, #696]	; (8004b84 <ParseSnippetCondition+0x38c>)
 80048ca:	0038      	movs	r0, r7
 80048cc:	f010 fae4 	bl	8014e98 <strncmp>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d121      	bne.n	8004918 <ParseSnippetCondition+0x120>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =CLICKED;
 80048d4:	00a3      	lsls	r3, r4, #2
 80048d6:	191c      	adds	r4, r3, r4
 80048d8:	00a4      	lsls	r4, r4, #2
 80048da:	4ba7      	ldr	r3, [pc, #668]	; (8004b78 <ParseSnippetCondition+0x380>)
 80048dc:	191c      	adds	r4, r3, r4
 80048de:	2305      	movs	r3, #5
 80048e0:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 80048e2:	00f2      	lsls	r2, r6, #3
 80048e4:	1992      	adds	r2, r2, r6
 80048e6:	4ba8      	ldr	r3, [pc, #672]	; (8004b88 <ParseSnippetCondition+0x390>)
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	7a1b      	ldrb	r3, [r3, #8]
 80048ec:	07db      	lsls	r3, r3, #31
 80048ee:	d504      	bpl.n	80048fa <ParseSnippetCondition+0x102>
			++numOfRecordedSnippets;		// Record a successful Snippet			
 80048f0:	4aa0      	ldr	r2, [pc, #640]	; (8004b74 <ParseSnippetCondition+0x37c>)
 80048f2:	7813      	ldrb	r3, [r2, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	7013      	strb	r3, [r2, #0]
 80048f8:	e19a      	b.n	8004c30 <ParseSnippetCondition+0x438>
					SetButtonEvents(port,1,0,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 80048fa:	2301      	movs	r3, #1
 80048fc:	9305      	str	r3, [sp, #20]
 80048fe:	2300      	movs	r3, #0
 8004900:	9304      	str	r3, [sp, #16]
 8004902:	9303      	str	r3, [sp, #12]
 8004904:	9302      	str	r3, [sp, #8]
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	2101      	movs	r1, #1
 800490e:	0030      	movs	r0, r6
 8004910:	f003 ff58 	bl	80087c4 <SetButtonEvents>
				status =BOS_OK;
 8004914:	2000      	movs	r0, #0
 8004916:	e7eb      	b.n	80048f0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"double clicked",14)){
 8004918:	220e      	movs	r2, #14
 800491a:	499c      	ldr	r1, [pc, #624]	; (8004b8c <ParseSnippetCondition+0x394>)
 800491c:	0038      	movs	r0, r7
 800491e:	f010 fabb 	bl	8014e98 <strncmp>
 8004922:	2800      	cmp	r0, #0
 8004924:	d11c      	bne.n	8004960 <ParseSnippetCondition+0x168>
				snippets[numOfRecordedSnippets].cond.buffer1[1] =DBL_CLICKED;
 8004926:	00a3      	lsls	r3, r4, #2
 8004928:	191c      	adds	r4, r3, r4
 800492a:	00a4      	lsls	r4, r4, #2
 800492c:	4b92      	ldr	r3, [pc, #584]	; (8004b78 <ParseSnippetCondition+0x380>)
 800492e:	191c      	adds	r4, r3, r4
 8004930:	2306      	movs	r3, #6
 8004932:	70e3      	strb	r3, [r4, #3]
				if((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004934:	00f2      	lsls	r2, r6, #3
 8004936:	1992      	adds	r2, r2, r6
 8004938:	4b93      	ldr	r3, [pc, #588]	; (8004b88 <ParseSnippetCondition+0x390>)
 800493a:	189b      	adds	r3, r3, r2
 800493c:	7a1b      	ldrb	r3, [r3, #8]
 800493e:	079b      	lsls	r3, r3, #30
 8004940:	d4d6      	bmi.n	80048f0 <ParseSnippetCondition+0xf8>
					SetButtonEvents(port,0,1,0,0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004942:	2301      	movs	r3, #1
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	2300      	movs	r3, #0
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	9303      	str	r3, [sp, #12]
 800494c:	9302      	str	r3, [sp, #8]
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	2201      	movs	r2, #1
 8004954:	2100      	movs	r1, #0
 8004956:	0030      	movs	r0, r6
 8004958:	f003 ff34 	bl	80087c4 <SetButtonEvents>
				status =BOS_OK;
 800495c:	2000      	movs	r0, #0
 800495e:	e7c7      	b.n	80048f0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"pressed for ",12)){
 8004960:	220c      	movs	r2, #12
 8004962:	498b      	ldr	r1, [pc, #556]	; (8004b90 <ParseSnippetCondition+0x398>)
 8004964:	0038      	movs	r0, r7
 8004966:	f010 fa97 	bl	8014e98 <strncmp>
 800496a:	2800      	cmp	r0, #0
 800496c:	d17a      	bne.n	8004a64 <ParseSnippetCondition+0x26c>
				if(!button[port].pressedX1Sec){
 800496e:	00f2      	lsls	r2, r6, #3
 8004970:	1992      	adds	r2, r2, r6
 8004972:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004974:	189b      	adds	r3, r3, r2
 8004976:	789b      	ldrb	r3, [r3, #2]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d030      	beq.n	80049de <ParseSnippetCondition+0x1e6>
				else if(!button[port].pressedX2Sec){
 800497c:	00f2      	lsls	r2, r6, #3
 800497e:	1992      	adds	r2, r2, r6
 8004980:	4b81      	ldr	r3, [pc, #516]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004982:	189b      	adds	r3, r3, r2
 8004984:	78db      	ldrb	r3, [r3, #3]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d04a      	beq.n	8004a20 <ParseSnippetCondition+0x228>
				else if(!button[port].pressedX3Sec){
 800498a:	00f2      	lsls	r2, r6, #3
 800498c:	1992      	adds	r2, r2, r6
 800498e:	4b7e      	ldr	r3, [pc, #504]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004990:	189b      	adds	r3, r3, r2
 8004992:	791b      	ldrb	r3, [r3, #4]
					status =BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004994:	200c      	movs	r0, #12
				else if(!button[port].pressedX3Sec){
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1aa      	bne.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X3_SEC;
 800499a:	4f77      	ldr	r7, [pc, #476]	; (8004b78 <ParseSnippetCondition+0x380>)
 800499c:	00a3      	lsls	r3, r4, #2
 800499e:	191b      	adds	r3, r3, r4
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	18fb      	adds	r3, r7, r3
 80049a4:	220b      	movs	r2, #11
 80049a6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049a8:	0028      	movs	r0, r5
 80049aa:	300f      	adds	r0, #15
 80049ac:	f00f fd6b 	bl	8014486 <atoi>
 80049b0:	b2c0      	uxtb	r0, r0
 80049b2:	4b70      	ldr	r3, [pc, #448]	; (8004b74 <ParseSnippetCondition+0x37c>)
 80049b4:	781a      	ldrb	r2, [r3, #0]
 80049b6:	0093      	lsls	r3, r2, #2
 80049b8:	189b      	adds	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	18ff      	adds	r7, r7, r3
 80049be:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,BUTTON_EVENT_MODE_OR);
 80049c0:	2301      	movs	r3, #1
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	2300      	movs	r3, #0
 80049c6:	9304      	str	r3, [sp, #16]
 80049c8:	9303      	str	r3, [sp, #12]
 80049ca:	9302      	str	r3, [sp, #8]
 80049cc:	9001      	str	r0, [sp, #4]
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	0030      	movs	r0, r6
 80049d6:	f003 fef5 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 80049da:	2000      	movs	r0, #0
 80049dc:	e788      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X1_SEC;
 80049de:	4f66      	ldr	r7, [pc, #408]	; (8004b78 <ParseSnippetCondition+0x380>)
 80049e0:	00a3      	lsls	r3, r4, #2
 80049e2:	191b      	adds	r3, r3, r4
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	2209      	movs	r2, #9
 80049ea:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 80049ec:	0028      	movs	r0, r5
 80049ee:	300f      	adds	r0, #15
 80049f0:	f00f fd49 	bl	8014486 <atoi>
 80049f4:	b2c3      	uxtb	r3, r0
 80049f6:	4a5f      	ldr	r2, [pc, #380]	; (8004b74 <ParseSnippetCondition+0x37c>)
 80049f8:	7811      	ldrb	r1, [r2, #0]
 80049fa:	008a      	lsls	r2, r1, #2
 80049fc:	1852      	adds	r2, r2, r1
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	18bf      	adds	r7, r7, r2
 8004a02:	713b      	strb	r3, [r7, #4]
					SetButtonEvents(port,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a04:	2201      	movs	r2, #1
 8004a06:	9205      	str	r2, [sp, #20]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	9204      	str	r2, [sp, #16]
 8004a0c:	9203      	str	r2, [sp, #12]
 8004a0e:	9202      	str	r2, [sp, #8]
 8004a10:	9201      	str	r2, [sp, #4]
 8004a12:	9200      	str	r2, [sp, #0]
 8004a14:	2100      	movs	r1, #0
 8004a16:	0030      	movs	r0, r6
 8004a18:	f003 fed4 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e767      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =PRESSED_FOR_X2_SEC;
 8004a20:	4f55      	ldr	r7, [pc, #340]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004a22:	00a3      	lsls	r3, r4, #2
 8004a24:	191b      	adds	r3, r3, r4
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	18fb      	adds	r3, r7, r3
 8004a2a:	220a      	movs	r2, #10
 8004a2c:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[15]);
 8004a2e:	0028      	movs	r0, r5
 8004a30:	300f      	adds	r0, #15
 8004a32:	f00f fd28 	bl	8014486 <atoi>
 8004a36:	b2c0      	uxtb	r0, r0
 8004a38:	4b4e      	ldr	r3, [pc, #312]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	0093      	lsls	r3, r2, #2
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	18ff      	adds	r7, r7, r3
 8004a44:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,0,0,BUTTON_EVENT_MODE_OR);
 8004a46:	2301      	movs	r3, #1
 8004a48:	9305      	str	r3, [sp, #20]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	9304      	str	r3, [sp, #16]
 8004a4e:	9303      	str	r3, [sp, #12]
 8004a50:	9302      	str	r3, [sp, #8]
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	9000      	str	r0, [sp, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	0030      	movs	r0, r6
 8004a5c:	f003 feb2 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004a60:	2000      	movs	r0, #0
 8004a62:	e745      	b.n	80048f0 <ParseSnippetCondition+0xf8>
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a64:	220d      	movs	r2, #13
 8004a66:	494b      	ldr	r1, [pc, #300]	; (8004b94 <ParseSnippetCondition+0x39c>)
 8004a68:	0038      	movs	r0, r7
 8004a6a:	f010 fa15 	bl	8014e98 <strncmp>
 8004a6e:	0003      	movs	r3, r0
	BOS_Status status =BOS_OK;
 8004a70:	2000      	movs	r0, #0
			else if(!strncmp((char* )&string[3],"released for ",13)){
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d000      	beq.n	8004a78 <ParseSnippetCondition+0x280>
 8004a76:	e73b      	b.n	80048f0 <ParseSnippetCondition+0xf8>
				if(!button[port].releasedY1Sec){
 8004a78:	00f2      	lsls	r2, r6, #3
 8004a7a:	1992      	adds	r2, r2, r6
 8004a7c:	4b42      	ldr	r3, [pc, #264]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	795b      	ldrb	r3, [r3, #5]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d031      	beq.n	8004aea <ParseSnippetCondition+0x2f2>
				else if(!button[port].releasedY2Sec){
 8004a86:	00f2      	lsls	r2, r6, #3
 8004a88:	1992      	adds	r2, r2, r6
 8004a8a:	4b3f      	ldr	r3, [pc, #252]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004a8c:	189b      	adds	r3, r3, r2
 8004a8e:	799b      	ldrb	r3, [r3, #6]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d04c      	beq.n	8004b2e <ParseSnippetCondition+0x336>
				else if(!button[port].releasedY3Sec){
 8004a94:	00f2      	lsls	r2, r6, #3
 8004a96:	1992      	adds	r2, r2, r6
 8004a98:	4b3b      	ldr	r3, [pc, #236]	; (8004b88 <ParseSnippetCondition+0x390>)
 8004a9a:	189b      	adds	r3, r3, r2
 8004a9c:	79db      	ldrb	r3, [r3, #7]
					status =BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004a9e:	200d      	movs	r0, #13
				else if(!button[port].releasedY3Sec){
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d000      	beq.n	8004aa6 <ParseSnippetCondition+0x2ae>
 8004aa4:	e724      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y3_SEC;
 8004aa6:	4f34      	ldr	r7, [pc, #208]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004aa8:	3314      	adds	r3, #20
 8004aaa:	4698      	mov	r8, r3
 8004aac:	435c      	muls	r4, r3
 8004aae:	193c      	adds	r4, r7, r4
 8004ab0:	3b06      	subs	r3, #6
 8004ab2:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004ab4:	0028      	movs	r0, r5
 8004ab6:	3010      	adds	r0, #16
 8004ab8:	f00f fce5 	bl	8014486 <atoi>
 8004abc:	b2c0      	uxtb	r0, r0
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	4353      	muls	r3, r2
 8004ac6:	18ff      	adds	r7, r7, r3
 8004ac8:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],BUTTON_EVENT_MODE_OR);
 8004aca:	2301      	movs	r3, #1
 8004acc:	9305      	str	r3, [sp, #20]
 8004ace:	9004      	str	r0, [sp, #16]
 8004ad0:	2400      	movs	r4, #0
 8004ad2:	9403      	str	r4, [sp, #12]
 8004ad4:	9402      	str	r4, [sp, #8]
 8004ad6:	9401      	str	r4, [sp, #4]
 8004ad8:	9400      	str	r4, [sp, #0]
 8004ada:	0023      	movs	r3, r4
 8004adc:	0022      	movs	r2, r4
 8004ade:	0021      	movs	r1, r4
 8004ae0:	0030      	movs	r0, r6
 8004ae2:	f003 fe6f 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004ae6:	0020      	movs	r0, r4
 8004ae8:	e702      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y1_SEC;
 8004aea:	4f23      	ldr	r7, [pc, #140]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004aec:	00a3      	lsls	r3, r4, #2
 8004aee:	191b      	adds	r3, r3, r4
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	220c      	movs	r2, #12
 8004af6:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004af8:	0028      	movs	r0, r5
 8004afa:	3010      	adds	r0, #16
 8004afc:	f00f fcc3 	bl	8014486 <atoi>
 8004b00:	b2c0      	uxtb	r0, r0
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004b04:	781a      	ldrb	r2, [r3, #0]
 8004b06:	0093      	lsls	r3, r2, #2
 8004b08:	189b      	adds	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	18ff      	adds	r7, r7, r3
 8004b0e:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,0,BUTTON_EVENT_MODE_OR);
 8004b10:	2301      	movs	r3, #1
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	2300      	movs	r3, #0
 8004b16:	9304      	str	r3, [sp, #16]
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	9002      	str	r0, [sp, #8]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	9300      	str	r3, [sp, #0]
 8004b20:	2200      	movs	r2, #0
 8004b22:	2100      	movs	r1, #0
 8004b24:	0030      	movs	r0, r6
 8004b26:	f003 fe4d 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004b2a:	2000      	movs	r0, #0
 8004b2c:	e6e0      	b.n	80048f0 <ParseSnippetCondition+0xf8>
					snippets[numOfRecordedSnippets].cond.buffer1[1] =RELEASED_FOR_Y2_SEC;
 8004b2e:	4f12      	ldr	r7, [pc, #72]	; (8004b78 <ParseSnippetCondition+0x380>)
 8004b30:	00a3      	lsls	r3, r4, #2
 8004b32:	191b      	adds	r3, r3, r4
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	18fb      	adds	r3, r7, r3
 8004b38:	220d      	movs	r2, #13
 8004b3a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] =atoi((char* )&string[16]);
 8004b3c:	0028      	movs	r0, r5
 8004b3e:	3010      	adds	r0, #16
 8004b40:	f00f fca1 	bl	8014486 <atoi>
 8004b44:	b2c0      	uxtb	r0, r0
 8004b46:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <ParseSnippetCondition+0x37c>)
 8004b48:	781a      	ldrb	r2, [r3, #0]
 8004b4a:	0093      	lsls	r3, r2, #2
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	18ff      	adds	r7, r7, r3
 8004b52:	7138      	strb	r0, [r7, #4]
					SetButtonEvents(port,0,0,0,0,0,0,snippets[numOfRecordedSnippets].cond.buffer1[2],0,BUTTON_EVENT_MODE_OR);
 8004b54:	2301      	movs	r3, #1
 8004b56:	9305      	str	r3, [sp, #20]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9304      	str	r3, [sp, #16]
 8004b5c:	9003      	str	r0, [sp, #12]
 8004b5e:	9302      	str	r3, [sp, #8]
 8004b60:	9301      	str	r3, [sp, #4]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2100      	movs	r1, #0
 8004b68:	0030      	movs	r0, r6
 8004b6a:	f003 fe2b 	bl	80087c4 <SetButtonEvents>
					status =BOS_OK;
 8004b6e:	2000      	movs	r0, #0
 8004b70:	e6be      	b.n	80048f0 <ParseSnippetCondition+0xf8>
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	20001297 	.word	0x20001297
 8004b78:	20006e70 	.word	0x20006e70
 8004b7c:	200011fc 	.word	0x200011fc
 8004b80:	080193e4 	.word	0x080193e4
 8004b84:	0801a9fc 	.word	0x0801a9fc
 8004b88:	20001974 	.word	0x20001974
 8004b8c:	08019a80 	.word	0x08019a80
 8004b90:	08019a90 	.word	0x08019a90
 8004b94:	08019aa0 	.word	0x08019aa0
			else if(secondPart != NULL && thirdPart != NULL){
 8004b98:	2e00      	cmp	r6, #0
 8004b9a:	d04f      	beq.n	8004c3c <ParseSnippetCondition+0x444>
 8004b9c:	2c00      	cmp	r4, #0
 8004b9e:	d04f      	beq.n	8004c40 <ParseSnippetCondition+0x448>
				modPar2 =IsModuleParameter(thirdPart);
 8004ba0:	0020      	movs	r0, r4
 8004ba2:	f7fe fde1 	bl	8003768 <IsModuleParameter>
				if(modPar2) 		// Found a module parameter
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d024      	beq.n	8004bf4 <ParseSnippetCondition+0x3fc>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004baa:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bac:	781c      	ldrb	r4, [r3, #0]
 8004bae:	4a27      	ldr	r2, [pc, #156]	; (8004c4c <ParseSnippetCondition+0x454>)
 8004bb0:	00a3      	lsls	r3, r4, #2
 8004bb2:	1919      	adds	r1, r3, r4
 8004bb4:	0089      	lsls	r1, r1, #2
 8004bb6:	2704      	movs	r7, #4
 8004bb8:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004bba:	1919      	adds	r1, r3, r4
 8004bbc:	0089      	lsls	r1, r1, #2
 8004bbe:	1851      	adds	r1, r2, r1
 8004bc0:	70cd      	strb	r5, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] =modPar2;		// Leaving first buffer byte for remote module ID
 8004bc2:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator =IsMathOperator(secondPart);
 8004bc4:	4d20      	ldr	r5, [pc, #128]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bc6:	782c      	ldrb	r4, [r5, #0]
 8004bc8:	0030      	movs	r0, r6
 8004bca:	f7fe fde3 	bl	8003794 <IsMathOperator>
 8004bce:	491f      	ldr	r1, [pc, #124]	; (8004c4c <ParseSnippetCondition+0x454>)
 8004bd0:	00a3      	lsls	r3, r4, #2
 8004bd2:	191b      	adds	r3, r3, r4
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	18cb      	adds	r3, r1, r3
 8004bd8:	7058      	strb	r0, [r3, #1]
				if(!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004bda:	782a      	ldrb	r2, [r5, #0]
 8004bdc:	0093      	lsls	r3, r2, #2
 8004bde:	189b      	adds	r3, r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	18cb      	adds	r3, r1, r3
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d02c      	beq.n	8004c44 <ParseSnippetCondition+0x44c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004bea:	3201      	adds	r2, #1
 8004bec:	4b16      	ldr	r3, [pc, #88]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bee:	701a      	strb	r2, [r3, #0]
				return BOS_OK;
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	e01d      	b.n	8004c30 <ParseSnippetCondition+0x438>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <ParseSnippetCondition+0x450>)
 8004bf6:	4698      	mov	r8, r3
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	4f14      	ldr	r7, [pc, #80]	; (8004c4c <ParseSnippetCondition+0x454>)
 8004bfc:	0093      	lsls	r3, r2, #2
 8004bfe:	1899      	adds	r1, r3, r2
 8004c00:	0089      	lsls	r1, r1, #2
 8004c02:	2003      	movs	r0, #3
 8004c04:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] =modPar1;		// Leaving first buffer byte for remote module ID
 8004c06:	187b      	adds	r3, r7, r1
 8004c08:	70dd      	strb	r5, [r3, #3]
					float constant =atof(thirdPart);
 8004c0a:	0020      	movs	r0, r4
 8004c0c:	f00f fc36 	bl	801447c <atof>
 8004c10:	f7fd ffda 	bl	8002bc8 <__aeabi_d2f>
 8004c14:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2,&constant,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004c16:	4643      	mov	r3, r8
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	0098      	lsls	r0, r3, #2
 8004c1c:	18c0      	adds	r0, r0, r3
 8004c1e:	0080      	lsls	r0, r0, #2
 8004c20:	3006      	adds	r0, #6
 8004c22:	19c0      	adds	r0, r0, r7
 8004c24:	2204      	movs	r2, #4
 8004c26:	a907      	add	r1, sp, #28
 8004c28:	f00f febd 	bl	80149a6 <memcpy>
 8004c2c:	e7ca      	b.n	8004bc4 <ParseSnippetCondition+0x3cc>
		return BOS_ERR_SNIP_MEM_FULL;
 8004c2e:	200e      	movs	r0, #14
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004c30:	b008      	add	sp, #32
 8004c32:	bc04      	pop	{r2}
 8004c34:	4690      	mov	r8, r2
 8004c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_WrongParam;
 8004c38:	2067      	movs	r0, #103	; 0x67
 8004c3a:	e7f9      	b.n	8004c30 <ParseSnippetCondition+0x438>
				return BOS_ERR_WrongParam;
 8004c3c:	2067      	movs	r0, #103	; 0x67
 8004c3e:	e7f7      	b.n	8004c30 <ParseSnippetCondition+0x438>
 8004c40:	2067      	movs	r0, #103	; 0x67
 8004c42:	e7f5      	b.n	8004c30 <ParseSnippetCondition+0x438>
					return BOS_ERR_WrongParam;
 8004c44:	2067      	movs	r0, #103	; 0x67
 8004c46:	e7f3      	b.n	8004c30 <ParseSnippetCondition+0x438>
 8004c48:	20001297 	.word	0x20001297
 8004c4c:	20006e70 	.word	0x20006e70

08004c50 <AddSnippet>:
BOS_Status AddSnippet(uint8_t code,char *string){
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	000c      	movs	r4, r1
	switch(code){
 8004c54:	2802      	cmp	r0, #2
 8004c56:	d017      	beq.n	8004c88 <AddSnippet+0x38>
 8004c58:	2803      	cmp	r0, #3
 8004c5a:	d003      	beq.n	8004c64 <AddSnippet+0x14>
 8004c5c:	2801      	cmp	r0, #1
 8004c5e:	d00f      	beq.n	8004c80 <AddSnippet+0x30>
	return BOS_OK;
 8004c60:	2000      	movs	r0, #0
 8004c62:	e00c      	b.n	8004c7e <AddSnippet+0x2e>
			snippets[numOfRecordedSnippets - 1].state = true;
 8004c64:	4b35      	ldr	r3, [pc, #212]	; (8004d3c <AddSnippet+0xec>)
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	0093      	lsls	r3, r2, #2
 8004c6c:	189b      	adds	r3, r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4a33      	ldr	r2, [pc, #204]	; (8004d40 <AddSnippet+0xf0>)
 8004c72:	18d3      	adds	r3, r2, r3
 8004c74:	2201      	movs	r2, #1
 8004c76:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8004c78:	f007 fd96 	bl	800c7a8 <SaveToRO>
	return BOS_OK;
 8004c7c:	2000      	movs	r0, #0
}
 8004c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return ParseSnippetCondition(string);
 8004c80:	0008      	movs	r0, r1
 8004c82:	f7ff fdb9 	bl	80047f8 <ParseSnippetCondition>
 8004c86:	e7fa      	b.n	8004c7e <AddSnippet+0x2e>
			if(snippets[numOfRecordedSnippets - 1].cmd != NULL){
 8004c88:	4b2c      	ldr	r3, [pc, #176]	; (8004d3c <AddSnippet+0xec>)
 8004c8a:	781d      	ldrb	r5, [r3, #0]
 8004c8c:	3d01      	subs	r5, #1
 8004c8e:	00ab      	lsls	r3, r5, #2
 8004c90:	195b      	adds	r3, r3, r5
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4a2a      	ldr	r2, [pc, #168]	; (8004d40 <AddSnippet+0xf0>)
 8004c96:	18d3      	adds	r3, r2, r3
 8004c98:	68de      	ldr	r6, [r3, #12]
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	d03d      	beq.n	8004d1a <AddSnippet+0xca>
				int currentLenght =strlen(snippets[numOfRecordedSnippets - 1].cmd);
 8004c9e:	0030      	movs	r0, r6
 8004ca0:	f7fb fa3a 	bl	8000118 <strlen>
 8004ca4:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets - 1].cmd =(char* )realloc(snippets[numOfRecordedSnippets - 1].cmd,currentLenght + strlen(string) + 2);
 8004ca6:	0020      	movs	r0, r4
 8004ca8:	f7fb fa36 	bl	8000118 <strlen>
 8004cac:	1839      	adds	r1, r7, r0
 8004cae:	3102      	adds	r1, #2
 8004cb0:	0030      	movs	r0, r6
 8004cb2:	f00f feb3 	bl	8014a1c <realloc>
 8004cb6:	4e22      	ldr	r6, [pc, #136]	; (8004d40 <AddSnippet+0xf0>)
 8004cb8:	00ab      	lsls	r3, r5, #2
 8004cba:	195d      	adds	r5, r3, r5
 8004cbc:	00ad      	lsls	r5, r5, #2
 8004cbe:	1975      	adds	r5, r6, r5
 8004cc0:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd + currentLenght + 1,string);
 8004cc2:	4d1e      	ldr	r5, [pc, #120]	; (8004d3c <AddSnippet+0xec>)
 8004cc4:	782a      	ldrb	r2, [r5, #0]
 8004cc6:	3a01      	subs	r2, #1
 8004cc8:	0093      	lsls	r3, r2, #2
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	18f3      	adds	r3, r6, r3
 8004cd0:	1c7a      	adds	r2, r7, #1
 8004cd2:	68d8      	ldr	r0, [r3, #12]
 8004cd4:	1880      	adds	r0, r0, r2
 8004cd6:	0021      	movs	r1, r4
 8004cd8:	f010 f8d6 	bl	8014e88 <strcpy>
				*(snippets[numOfRecordedSnippets - 1].cmd + currentLenght) =0x13;		// ENTER key between commands
 8004cdc:	782a      	ldrb	r2, [r5, #0]
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	0093      	lsls	r3, r2, #2
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	18f6      	adds	r6, r6, r3
 8004ce8:	68f3      	ldr	r3, [r6, #12]
 8004cea:	2213      	movs	r2, #19
 8004cec:	55da      	strb	r2, [r3, r7]
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004cee:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <AddSnippet+0xec>)
 8004cf0:	781a      	ldrb	r2, [r3, #0]
 8004cf2:	3a01      	subs	r2, #1
 8004cf4:	0093      	lsls	r3, r2, #2
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4911      	ldr	r1, [pc, #68]	; (8004d40 <AddSnippet+0xf0>)
 8004cfc:	18cb      	adds	r3, r1, r3
 8004cfe:	68db      	ldr	r3, [r3, #12]
	return BOS_OK;
 8004d00:	2000      	movs	r0, #0
			if(snippets[numOfRecordedSnippets - 1].cmd == NULL){
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1bb      	bne.n	8004c7e <AddSnippet+0x2e>
				memset(&snippets[numOfRecordedSnippets - 1],0,sizeof(snippet_t));
 8004d06:	0090      	lsls	r0, r2, #2
 8004d08:	1880      	adds	r0, r0, r2
 8004d0a:	0080      	lsls	r0, r0, #2
 8004d0c:	1840      	adds	r0, r0, r1
 8004d0e:	2214      	movs	r2, #20
 8004d10:	2100      	movs	r1, #0
 8004d12:	f00f fe51 	bl	80149b8 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 8004d16:	200e      	movs	r0, #14
 8004d18:	e7b1      	b.n	8004c7e <AddSnippet+0x2e>
				snippets[numOfRecordedSnippets - 1].cmd =(char* )malloc(strlen(string) + 1);
 8004d1a:	0008      	movs	r0, r1
 8004d1c:	f7fb f9fc 	bl	8000118 <strlen>
 8004d20:	3001      	adds	r0, #1
 8004d22:	f00f fbf3 	bl	801450c <malloc>
 8004d26:	00ab      	lsls	r3, r5, #2
 8004d28:	195d      	adds	r5, r3, r5
 8004d2a:	00ad      	lsls	r5, r5, #2
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <AddSnippet+0xf0>)
 8004d2e:	195d      	adds	r5, r3, r5
 8004d30:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets - 1].cmd,string);
 8004d32:	0021      	movs	r1, r4
 8004d34:	f010 f8a8 	bl	8014e88 <strcpy>
 8004d38:	e7d9      	b.n	8004cee <AddSnippet+0x9e>
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	20001297 	.word	0x20001297
 8004d40:	20006e70 	.word	0x20006e70

08004d44 <CLI_CommandParser>:
void CLI_CommandParser(uint8_t port,bool enableOutput,int8_t *cInputString,int8_t *pcOutputString){
 8004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d46:	46de      	mov	lr, fp
 8004d48:	4657      	mov	r7, sl
 8004d4a:	464e      	mov	r6, r9
 8004d4c:	4645      	mov	r5, r8
 8004d4e:	b5e0      	push	{r5, r6, r7, lr}
 8004d50:	b08b      	sub	sp, #44	; 0x2c
 8004d52:	9004      	str	r0, [sp, #16]
 8004d54:	4688      	mov	r8, r1
 8004d56:	9203      	str	r2, [sp, #12]
 8004d58:	001c      	movs	r4, r3
	char idString[MaxLengthOfAlias] ={0};
 8004d5a:	2209      	movs	r2, #9
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	a807      	add	r0, sp, #28
 8004d60:	f00f fe2a 	bl	80149b8 <memset>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004d64:	4fd5      	ldr	r7, [pc, #852]	; (80050bc <CLI_CommandParser+0x378>)
				if(id == myID){
 8004d66:	002e      	movs	r6, r5
 8004d68:	e034      	b.n	8004dd4 <CLI_CommandParser+0x90>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004d6a:	2252      	movs	r2, #82	; 0x52
 8004d6c:	49d4      	ldr	r1, [pc, #848]	; (80050c0 <CLI_CommandParser+0x37c>)
 8004d6e:	0020      	movs	r0, r4
 8004d70:	f00f fe19 	bl	80149a6 <memcpy>
				recordSnippet =0;
 8004d74:	4bd1      	ldr	r3, [pc, #836]	; (80050bc <CLI_CommandParser+0x378>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	e044      	b.n	8004e06 <CLI_CommandParser+0xc2>
		else if(recordSnippet && !strncmp((char* )cInputString,"end if",6)){
 8004d7c:	2206      	movs	r2, #6
 8004d7e:	49d1      	ldr	r1, [pc, #836]	; (80050c4 <CLI_CommandParser+0x380>)
 8004d80:	9803      	ldr	r0, [sp, #12]
 8004d82:	f010 f889 	bl	8014e98 <strncmp>
 8004d86:	2800      	cmp	r0, #0
 8004d88:	d053      	beq.n	8004e32 <CLI_CommandParser+0xee>
		else if(recordSnippet == SNIPPET_COMMANDS){
 8004d8a:	2d02      	cmp	r5, #2
 8004d8c:	d05e      	beq.n	8004e4c <CLI_CommandParser+0x108>
			loc =strchr((char* )cInputString,'.');
 8004d8e:	212e      	movs	r1, #46	; 0x2e
 8004d90:	9803      	ldr	r0, [sp, #12]
 8004d92:	f010 f86b 	bl	8014e6c <strchr>
 8004d96:	1e05      	subs	r5, r0, #0
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004d98:	d006      	beq.n	8004da8 <CLI_CommandParser+0x64>
 8004d9a:	3803      	subs	r0, #3
 8004d9c:	2203      	movs	r2, #3
 8004d9e:	49ca      	ldr	r1, [pc, #808]	; (80050c8 <CLI_CommandParser+0x384>)
 8004da0:	f010 f87a 	bl	8014e98 <strncmp>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	d160      	bne.n	8004e6a <CLI_CommandParser+0x126>
				xReturned =FreeRTOS_CLIProcessCommand(cInputString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004da8:	2299      	movs	r2, #153	; 0x99
 8004daa:	0092      	lsls	r2, r2, #2
 8004dac:	0021      	movs	r1, r4
 8004dae:	9803      	ldr	r0, [sp, #12]
 8004db0:	f009 ff40 	bl	800ec34 <FreeRTOS_CLIProcessCommand>
 8004db4:	0006      	movs	r6, r0
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004db6:	7823      	ldrb	r3, [r4, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d000      	beq.n	8004dbe <CLI_CommandParser+0x7a>
 8004dbc:	e16f      	b.n	800509e <CLI_CommandParser+0x35a>
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8004dbe:	0020      	movs	r0, r4
 8004dc0:	f7fb f9aa 	bl	8000118 <strlen>
 8004dc4:	0002      	movs	r2, r0
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	0020      	movs	r0, r4
 8004dca:	f00f fdf5 	bl	80149b8 <memset>
	} while(xReturned != pdFALSE);
 8004dce:	2e00      	cmp	r6, #0
 8004dd0:	d100      	bne.n	8004dd4 <CLI_CommandParser+0x90>
 8004dd2:	e1ab      	b.n	800512c <CLI_CommandParser+0x3e8>
		StringToLowerCase((char* )cInputString);
 8004dd4:	9803      	ldr	r0, [sp, #12]
 8004dd6:	f7ff fcf7 	bl	80047c8 <StringToLowerCase>
		if(!recordSnippet && !strncmp((char* )cInputString,"if ",3)){
 8004dda:	783d      	ldrb	r5, [r7, #0]
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	d1cd      	bne.n	8004d7c <CLI_CommandParser+0x38>
 8004de0:	2203      	movs	r2, #3
 8004de2:	49ba      	ldr	r1, [pc, #744]	; (80050cc <CLI_CommandParser+0x388>)
 8004de4:	9803      	ldr	r0, [sp, #12]
 8004de6:	f010 f857 	bl	8014e98 <strncmp>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d1cf      	bne.n	8004d8e <CLI_CommandParser+0x4a>
			if(AddSnippet(SNIPPET_CONDITION,(char* )(cInputString + 3)) != BOS_OK){
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	1cd9      	adds	r1, r3, #3
 8004df2:	3001      	adds	r0, #1
 8004df4:	f7ff ff2c 	bl	8004c50 <AddSnippet>
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d1b6      	bne.n	8004d6a <CLI_CommandParser+0x26>
				recordSnippet = SNIPPET_COMMANDS;
 8004dfc:	4baf      	ldr	r3, [pc, #700]	; (80050bc <CLI_CommandParser+0x378>)
 8004dfe:	2202      	movs	r2, #2
 8004e00:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] ='\r';
 8004e02:	230d      	movs	r3, #13
 8004e04:	7023      	strb	r3, [r4, #0]
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 8004e06:	7823      	ldrb	r3, [r4, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d100      	bne.n	8004e0e <CLI_CommandParser+0xca>
 8004e0c:	e186      	b.n	800511c <CLI_CommandParser+0x3d8>
 8004e0e:	4643      	mov	r3, r8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d100      	bne.n	8004e16 <CLI_CommandParser+0xd2>
 8004e14:	e19d      	b.n	8005152 <CLI_CommandParser+0x40e>
 8004e16:	2600      	movs	r6, #0
			writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,HAL_MAX_DELAY);
 8004e18:	0020      	movs	r0, r4
 8004e1a:	f7fb f97d 	bl	8000118 <strlen>
 8004e1e:	b282      	uxth	r2, r0
 8004e20:	2301      	movs	r3, #1
 8004e22:	425b      	negs	r3, r3
 8004e24:	9300      	str	r3, [sp, #0]
 8004e26:	3333      	adds	r3, #51	; 0x33
 8004e28:	0021      	movs	r1, r4
 8004e2a:	9804      	ldr	r0, [sp, #16]
 8004e2c:	f009 fd3e 	bl	800e8ac <writePxMutex>
 8004e30:	e7c5      	b.n	8004dbe <CLI_CommandParser+0x7a>
			recordSnippet =0;
 8004e32:	4ba2      	ldr	r3, [pc, #648]	; (80050bc <CLI_CommandParser+0x378>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE,"");
 8004e38:	49a5      	ldr	r1, [pc, #660]	; (80050d0 <CLI_CommandParser+0x38c>)
 8004e3a:	3003      	adds	r0, #3
 8004e3c:	f7ff ff08 	bl	8004c50 <AddSnippet>
			sprintf((char* )pcOutputString,"\nConditional statement accepted and added to Command Snippets.\n\r");
 8004e40:	2241      	movs	r2, #65	; 0x41
 8004e42:	49a4      	ldr	r1, [pc, #656]	; (80050d4 <CLI_CommandParser+0x390>)
 8004e44:	0020      	movs	r0, r4
 8004e46:	f00f fdae 	bl	80149a6 <memcpy>
			xReturned = pdFALSE;
 8004e4a:	e7dc      	b.n	8004e06 <CLI_CommandParser+0xc2>
			if(AddSnippet(SNIPPET_COMMANDS,(char* )cInputString) != BOS_OK)
 8004e4c:	9903      	ldr	r1, [sp, #12]
 8004e4e:	2002      	movs	r0, #2
 8004e50:	f7ff fefe 	bl	8004c50 <AddSnippet>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d102      	bne.n	8004e5e <CLI_CommandParser+0x11a>
				pcOutputString[0] ='\r';
 8004e58:	230d      	movs	r3, #13
 8004e5a:	7023      	strb	r3, [r4, #0]
 8004e5c:	e7d3      	b.n	8004e06 <CLI_CommandParser+0xc2>
				sprintf((char* )pcOutputString,"\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8004e5e:	2252      	movs	r2, #82	; 0x52
 8004e60:	4997      	ldr	r1, [pc, #604]	; (80050c0 <CLI_CommandParser+0x37c>)
 8004e62:	0020      	movs	r0, r4
 8004e64:	f00f fd9f 	bl	80149a6 <memcpy>
 8004e68:	e7cd      	b.n	8004e06 <CLI_CommandParser+0xc2>
			if(loc != NULL && strncmp((char* )loc - 3,"bos",3) && !isdigit(*(loc + 1))){
 8004e6a:	f00f fb41 	bl	80144f0 <__locale_ctype_ptr>
 8004e6e:	786b      	ldrb	r3, [r5, #1]
 8004e70:	18c0      	adds	r0, r0, r3
 8004e72:	7843      	ldrb	r3, [r0, #1]
 8004e74:	075b      	lsls	r3, r3, #29
 8004e76:	d497      	bmi.n	8004da8 <CLI_CommandParser+0x64>
				strncpy(idString,(char* )cInputString,(size_t )(loc - (char* )cInputString));
 8004e78:	9903      	ldr	r1, [sp, #12]
 8004e7a:	1a6a      	subs	r2, r5, r1
 8004e7c:	a807      	add	r0, sp, #28
 8004e7e:	f010 f81c 	bl	8014eba <strncpy>
				id =GetID(idString);
 8004e82:	a807      	add	r0, sp, #28
 8004e84:	f7ff f9ba 	bl	80041fc <GetID>
 8004e88:	9005      	str	r0, [sp, #20]
				if(id == myID){
 8004e8a:	4a93      	ldr	r2, [pc, #588]	; (80050d8 <CLI_CommandParser+0x394>)
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	4693      	mov	fp, r2
 8004e90:	4290      	cmp	r0, r2
 8004e92:	d03d      	beq.n	8004f10 <CLI_CommandParser+0x1cc>
				else if(id == BOS_ERR_WrongName){
 8004e94:	2864      	cmp	r0, #100	; 0x64
 8004e96:	d043      	beq.n	8004f20 <CLI_CommandParser+0x1dc>
				else if(id == BOS_ERR_WrongID){
 8004e98:	2866      	cmp	r0, #102	; 0x66
 8004e9a:	d047      	beq.n	8004f2c <CLI_CommandParser+0x1e8>
				else if(id == BOS_BROADCAST){
 8004e9c:	28ff      	cmp	r0, #255	; 0xff
 8004e9e:	d04b      	beq.n	8004f38 <CLI_CommandParser+0x1f4>
				else if((uint8_t )id == BOS_MULTICAST){
 8004ea0:	466b      	mov	r3, sp
 8004ea2:	7d1b      	ldrb	r3, [r3, #20]
 8004ea4:	469a      	mov	sl, r3
 8004ea6:	2bfe      	cmp	r3, #254	; 0xfe
 8004ea8:	d078      	beq.n	8004f9c <CLI_CommandParser+0x258>
					if(!strncmp((char* )loc + 1,"update",6)){			// remote update
 8004eaa:	3501      	adds	r5, #1
 8004eac:	2206      	movs	r2, #6
 8004eae:	498b      	ldr	r1, [pc, #556]	; (80050dc <CLI_CommandParser+0x398>)
 8004eb0:	0028      	movs	r0, r5
 8004eb2:	f00f fff1 	bl	8014e98 <strncmp>
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d000      	beq.n	8004ebc <CLI_CommandParser+0x178>
 8004eba:	e0b4      	b.n	8005026 <CLI_CommandParser+0x2e2>
						BOSMessaging.response = BOS_RESPONSE_NONE;
 8004ebc:	4b88      	ldr	r3, [pc, #544]	; (80050e0 <CLI_CommandParser+0x39c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	701a      	strb	r2, [r3, #0]
						SendMessageToModule(id,CODE_UPDATE,0);
 8004ec2:	2119      	movs	r1, #25
 8004ec4:	4650      	mov	r0, sl
 8004ec6:	f004 fe4d 	bl	8009b64 <SendMessageToModule>
						osDelay(100);
 8004eca:	2064      	movs	r0, #100	; 0x64
 8004ecc:	f009 fe1b 	bl	800eb06 <osDelay>
						remoteBootloaderUpdate(myID,id,PcPort,0);
 8004ed0:	4b84      	ldr	r3, [pc, #528]	; (80050e4 <CLI_CommandParser+0x3a0>)
 8004ed2:	781a      	ldrb	r2, [r3, #0]
 8004ed4:	4b80      	ldr	r3, [pc, #512]	; (80050d8 <CLI_CommandParser+0x394>)
 8004ed6:	7818      	ldrb	r0, [r3, #0]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	4651      	mov	r1, sl
 8004edc:	f7fe fe68 	bl	8003bb0 <remoteBootloaderUpdate>
					if(BOSMessaging.response == BOS_RESPONSE_ALL){
 8004ee0:	4b7f      	ldr	r3, [pc, #508]	; (80050e0 <CLI_CommandParser+0x39c>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b60      	cmp	r3, #96	; 0x60
 8004ee6:	d18e      	bne.n	8004e06 <CLI_CommandParser+0xc2>
						ulTaskNotifyTake(pdTRUE,1000);		//cmd500ms
 8004ee8:	21fa      	movs	r1, #250	; 0xfa
 8004eea:	0089      	lsls	r1, r1, #2
 8004eec:	2001      	movs	r0, #1
 8004eee:	f00b f9dd 	bl	80102ac <ulTaskNotifyTake>
						if(responseStatus != BOS_OK){
 8004ef2:	4b7d      	ldr	r3, [pc, #500]	; (80050e8 <CLI_CommandParser+0x3a4>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d085      	beq.n	8004e06 <CLI_CommandParser+0xc2>
							++timedoutMsg;
 8004efa:	4a7c      	ldr	r2, [pc, #496]	; (80050ec <CLI_CommandParser+0x3a8>)
 8004efc:	8813      	ldrh	r3, [r2, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	8013      	strh	r3, [r2, #0]
							sprintf((char* )pcOutputString,"%sModule %d is not reachable.\n\r",(char* )pcOutputString,id);
 8004f02:	9b05      	ldr	r3, [sp, #20]
 8004f04:	0022      	movs	r2, r4
 8004f06:	497a      	ldr	r1, [pc, #488]	; (80050f0 <CLI_CommandParser+0x3ac>)
 8004f08:	0020      	movs	r0, r4
 8004f0a:	f00f ff81 	bl	8014e10 <sprintf>
 8004f0e:	e77a      	b.n	8004e06 <CLI_CommandParser+0xc2>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f10:	2299      	movs	r2, #153	; 0x99
 8004f12:	1c68      	adds	r0, r5, #1
 8004f14:	0092      	lsls	r2, r2, #2
 8004f16:	0021      	movs	r1, r4
 8004f18:	f009 fe8c 	bl	800ec34 <FreeRTOS_CLIProcessCommand>
 8004f1c:	0006      	movs	r6, r0
 8004f1e:	e74a      	b.n	8004db6 <CLI_CommandParser+0x72>
					sprintf((char* )pcOutputString,"Wrong module name! Please try again.\n\r");
 8004f20:	2227      	movs	r2, #39	; 0x27
 8004f22:	4974      	ldr	r1, [pc, #464]	; (80050f4 <CLI_CommandParser+0x3b0>)
 8004f24:	0020      	movs	r0, r4
 8004f26:	f00f fd3e 	bl	80149a6 <memcpy>
 8004f2a:	e76c      	b.n	8004e06 <CLI_CommandParser+0xc2>
					sprintf((char* )pcOutputString,"Wrong module ID! Please try again.\n\r");
 8004f2c:	2225      	movs	r2, #37	; 0x25
 8004f2e:	4972      	ldr	r1, [pc, #456]	; (80050f8 <CLI_CommandParser+0x3b4>)
 8004f30:	0020      	movs	r0, r4
 8004f32:	f00f fd38 	bl	80149a6 <memcpy>
 8004f36:	e766      	b.n	8004e06 <CLI_CommandParser+0xc2>
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004f38:	221a      	movs	r2, #26
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	486f      	ldr	r0, [pc, #444]	; (80050fc <CLI_CommandParser+0x3b8>)
 8004f3e:	f00f fd3b 	bl	80149b8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004f42:	3501      	adds	r5, #1
 8004f44:	9803      	ldr	r0, [sp, #12]
 8004f46:	f7fb f8e7 	bl	8000118 <strlen>
 8004f4a:	0006      	movs	r6, r0
 8004f4c:	ab07      	add	r3, sp, #28
 8004f4e:	0018      	movs	r0, r3
 8004f50:	f7fb f8e2 	bl	8000118 <strlen>
 8004f54:	1e72      	subs	r2, r6, #1
 8004f56:	1a12      	subs	r2, r2, r0
 8004f58:	0029      	movs	r1, r5
 8004f5a:	4869      	ldr	r0, [pc, #420]	; (8005100 <CLI_CommandParser+0x3bc>)
 8004f5c:	f00f ffad 	bl	8014eba <strncpy>
					BroadcastMessage(myID,BOS_BROADCAST,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004f60:	9803      	ldr	r0, [sp, #12]
 8004f62:	f7fb f8d9 	bl	8000118 <strlen>
 8004f66:	0006      	movs	r6, r0
 8004f68:	a807      	add	r0, sp, #28
 8004f6a:	f7fb f8d5 	bl	8000118 <strlen>
 8004f6e:	1a33      	subs	r3, r6, r0
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2217      	movs	r2, #23
 8004f74:	21ff      	movs	r1, #255	; 0xff
 8004f76:	4658      	mov	r0, fp
 8004f78:	f004 fdcc 	bl	8009b14 <BroadcastMessage>
					xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8004f7c:	2299      	movs	r2, #153	; 0x99
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	0021      	movs	r1, r4
 8004f82:	0028      	movs	r0, r5
 8004f84:	f009 fe56 	bl	800ec34 <FreeRTOS_CLIProcessCommand>
 8004f88:	0006      	movs	r6, r0
					strcat((char* )pcOutputString,"Command broadcasted to all\n\r");
 8004f8a:	0020      	movs	r0, r4
 8004f8c:	f7fb f8c4 	bl	8000118 <strlen>
 8004f90:	1820      	adds	r0, r4, r0
 8004f92:	221d      	movs	r2, #29
 8004f94:	495b      	ldr	r1, [pc, #364]	; (8005104 <CLI_CommandParser+0x3c0>)
 8004f96:	f00f fd06 	bl	80149a6 <memcpy>
 8004f9a:	e70c      	b.n	8004db6 <CLI_CommandParser+0x72>
					group =id >> 8;
 8004f9c:	9b05      	ldr	r3, [sp, #20]
 8004f9e:	121b      	asrs	r3, r3, #8
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	469a      	mov	sl, r3
 8004fa4:	4b58      	ldr	r3, [pc, #352]	; (8005108 <CLI_CommandParser+0x3c4>)
 8004fa6:	4699      	mov	r9, r3
 8004fa8:	4652      	mov	r2, sl
 8004faa:	701a      	strb	r2, [r3, #0]
					memset(broadcastResponse,0x00,sizeof(broadcastResponse));
 8004fac:	221a      	movs	r2, #26
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4852      	ldr	r0, [pc, #328]	; (80050fc <CLI_CommandParser+0x3b8>)
 8004fb2:	f00f fd01 	bl	80149b8 <memset>
					strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8004fb6:	1c6b      	adds	r3, r5, #1
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	9803      	ldr	r0, [sp, #12]
 8004fbc:	f7fb f8ac 	bl	8000118 <strlen>
 8004fc0:	0005      	movs	r5, r0
 8004fc2:	aa07      	add	r2, sp, #28
 8004fc4:	0010      	movs	r0, r2
 8004fc6:	f7fb f8a7 	bl	8000118 <strlen>
 8004fca:	3d01      	subs	r5, #1
 8004fcc:	1a2a      	subs	r2, r5, r0
 8004fce:	9905      	ldr	r1, [sp, #20]
 8004fd0:	484b      	ldr	r0, [pc, #300]	; (8005100 <CLI_CommandParser+0x3bc>)
 8004fd2:	f00f ff72 	bl	8014eba <strncpy>
					BroadcastMessage(myID,group,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString));		// Send terminating zero
 8004fd6:	9803      	ldr	r0, [sp, #12]
 8004fd8:	f7fb f89e 	bl	8000118 <strlen>
 8004fdc:	0005      	movs	r5, r0
 8004fde:	a807      	add	r0, sp, #28
 8004fe0:	f7fb f89a 	bl	8000118 <strlen>
 8004fe4:	1a2b      	subs	r3, r5, r0
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	2217      	movs	r2, #23
 8004fea:	4651      	mov	r1, sl
 8004fec:	4658      	mov	r0, fp
 8004fee:	f004 fd91 	bl	8009b14 <BroadcastMessage>
					if(InGroup(myID,group))
 8004ff2:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <CLI_CommandParser+0x394>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4a44      	ldr	r2, [pc, #272]	; (800510c <CLI_CommandParser+0x3c8>)
 8004ffc:	5a9b      	ldrh	r3, [r3, r2]
 8004ffe:	464a      	mov	r2, r9
 8005000:	7812      	ldrb	r2, [r2, #0]
 8005002:	4113      	asrs	r3, r2
 8005004:	07db      	lsls	r3, r3, #31
 8005006:	d406      	bmi.n	8005016 <CLI_CommandParser+0x2d2>
					sprintf((char* )pcOutputString,"%sMulticast Command forwarded to group %s\n\r",pcOutputString,idString);
 8005008:	ab07      	add	r3, sp, #28
 800500a:	0022      	movs	r2, r4
 800500c:	4940      	ldr	r1, [pc, #256]	; (8005110 <CLI_CommandParser+0x3cc>)
 800500e:	0020      	movs	r0, r4
 8005010:	f00f fefe 	bl	8014e10 <sprintf>
 8005014:	e6cf      	b.n	8004db6 <CLI_CommandParser+0x72>
						xReturned =FreeRTOS_CLIProcessCommand((const signed char* )(loc + 1),pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8005016:	2299      	movs	r2, #153	; 0x99
 8005018:	0092      	lsls	r2, r2, #2
 800501a:	0021      	movs	r1, r4
 800501c:	9805      	ldr	r0, [sp, #20]
 800501e:	f009 fe09 	bl	800ec34 <FreeRTOS_CLIProcessCommand>
 8005022:	0006      	movs	r6, r0
 8005024:	e7f0      	b.n	8005008 <CLI_CommandParser+0x2c4>
						strncpy((char* )messageParams,loc + 1,(size_t )(strlen((char* )cInputString) - strlen((char* )idString) - 1));
 8005026:	9803      	ldr	r0, [sp, #12]
 8005028:	f7fb f876 	bl	8000118 <strlen>
 800502c:	0006      	movs	r6, r0
 800502e:	ab07      	add	r3, sp, #28
 8005030:	0018      	movs	r0, r3
 8005032:	f7fb f871 	bl	8000118 <strlen>
 8005036:	1e72      	subs	r2, r6, #1
 8005038:	1a12      	subs	r2, r2, r0
 800503a:	0029      	movs	r1, r5
 800503c:	4830      	ldr	r0, [pc, #192]	; (8005100 <CLI_CommandParser+0x3bc>)
 800503e:	f00f ff3c 	bl	8014eba <strncpy>
						SendMessageToModule(id,CODE_CLI_COMMAND,strlen((char* )cInputString) - strlen((char* )idString) - 1);
 8005042:	9803      	ldr	r0, [sp, #12]
 8005044:	f7fb f868 	bl	8000118 <strlen>
 8005048:	0005      	movs	r5, r0
 800504a:	a807      	add	r0, sp, #28
 800504c:	f7fb f864 	bl	8000118 <strlen>
 8005050:	3d01      	subs	r5, #1
 8005052:	1a2a      	subs	r2, r5, r0
 8005054:	b292      	uxth	r2, r2
 8005056:	2117      	movs	r1, #23
 8005058:	4650      	mov	r0, sl
 800505a:	f004 fd83 	bl	8009b64 <SendMessageToModule>
						sprintf((char* )pcOutputString,"Command forwarded to Module %d\n\r",id);
 800505e:	9a05      	ldr	r2, [sp, #20]
 8005060:	492c      	ldr	r1, [pc, #176]	; (8005114 <CLI_CommandParser+0x3d0>)
 8005062:	0020      	movs	r0, r4
 8005064:	f00f fed4 	bl	8014e10 <sprintf>
						if((strlen((char* )pcOutputString) > 0) && enableOutput)
 8005068:	7823      	ldrb	r3, [r4, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <CLI_CommandParser+0x330>
 800506e:	4643      	mov	r3, r8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <CLI_CommandParser+0x342>
						memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005074:	0020      	movs	r0, r4
 8005076:	f7fb f84f 	bl	8000118 <strlen>
 800507a:	0002      	movs	r2, r0
 800507c:	2100      	movs	r1, #0
 800507e:	0020      	movs	r0, r4
 8005080:	f00f fc9a 	bl	80149b8 <memset>
 8005084:	e72c      	b.n	8004ee0 <CLI_CommandParser+0x19c>
							writePxMutex(port,(char* )pcOutputString,strlen((char* )pcOutputString),cmd50ms,1);
 8005086:	0020      	movs	r0, r4
 8005088:	f7fb f846 	bl	8000118 <strlen>
 800508c:	b282      	uxth	r2, r0
 800508e:	2301      	movs	r3, #1
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	3331      	adds	r3, #49	; 0x31
 8005094:	0021      	movs	r1, r4
 8005096:	9804      	ldr	r0, [sp, #16]
 8005098:	f009 fc08 	bl	800e8ac <writePxMutex>
 800509c:	e7ea      	b.n	8005074 <CLI_CommandParser+0x330>
		if(strlen((char* )pcOutputString) > 0 && enableOutput)
 800509e:	4643      	mov	r3, r8
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d100      	bne.n	80050a6 <CLI_CommandParser+0x362>
 80050a4:	e68b      	b.n	8004dbe <CLI_CommandParser+0x7a>
 80050a6:	e6b7      	b.n	8004e18 <CLI_CommandParser+0xd4>
		writePxMutex(port,pcEndOfCommandOutputString,strlen(pcEndOfCommandOutputString),cmd50ms,HAL_MAX_DELAY);
 80050a8:	2301      	movs	r3, #1
 80050aa:	425b      	negs	r3, r3
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	3333      	adds	r3, #51	; 0x33
 80050b0:	2238      	movs	r2, #56	; 0x38
 80050b2:	4919      	ldr	r1, [pc, #100]	; (8005118 <CLI_CommandParser+0x3d4>)
 80050b4:	9804      	ldr	r0, [sp, #16]
 80050b6:	f009 fbf9 	bl	800e8ac <writePxMutex>
}
 80050ba:	e043      	b.n	8005144 <CLI_CommandParser+0x400>
 80050bc:	200012c4 	.word	0x200012c4
 80050c0:	080198b8 	.word	0x080198b8
 80050c4:	0801990c 	.word	0x0801990c
 80050c8:	08019958 	.word	0x08019958
 80050cc:	080198b4 	.word	0x080198b4
 80050d0:	0801954c 	.word	0x0801954c
 80050d4:	08019914 	.word	0x08019914
 80050d8:	200010ea 	.word	0x200010ea
 80050dc:	080199f8 	.word	0x080199f8
 80050e0:	20006dd4 	.word	0x20006dd4
 80050e4:	20000ae8 	.word	0x20000ae8
 80050e8:	20001188 	.word	0x20001188
 80050ec:	20001c02 	.word	0x20001c02
 80050f0:	08019a24 	.word	0x08019a24
 80050f4:	0801995c 	.word	0x0801995c
 80050f8:	08019984 	.word	0x08019984
 80050fc:	20000d60 	.word	0x20000d60
 8005100:	20000fac 	.word	0x20000fac
 8005104:	080199ac 	.word	0x080199ac
 8005108:	20001296 	.word	0x20001296
 800510c:	20000f34 	.word	0x20000f34
 8005110:	080199cc 	.word	0x080199cc
 8005114:	08019a00 	.word	0x08019a00
 8005118:	08019a44 	.word	0x08019a44
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800511c:	0020      	movs	r0, r4
 800511e:	f7fa fffb 	bl	8000118 <strlen>
 8005122:	0002      	movs	r2, r0
 8005124:	2100      	movs	r1, #0
 8005126:	0020      	movs	r0, r4
 8005128:	f00f fc46 	bl	80149b8 <memset>
	memset(idString,0x00,MaxLengthOfAlias);
 800512c:	2209      	movs	r2, #9
 800512e:	2100      	movs	r1, #0
 8005130:	a807      	add	r0, sp, #28
 8005132:	f00f fc41 	bl	80149b8 <memset>
	if(!recordSnippet && enableOutput)
 8005136:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <CLI_CommandParser+0x420>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <CLI_CommandParser+0x400>
 800513e:	4643      	mov	r3, r8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1b1      	bne.n	80050a8 <CLI_CommandParser+0x364>
}
 8005144:	b00b      	add	sp, #44	; 0x2c
 8005146:	bc3c      	pop	{r2, r3, r4, r5}
 8005148:	4690      	mov	r8, r2
 800514a:	4699      	mov	r9, r3
 800514c:	46a2      	mov	sl, r4
 800514e:	46ab      	mov	fp, r5
 8005150:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 8005152:	0020      	movs	r0, r4
 8005154:	f7fa ffe0 	bl	8000118 <strlen>
 8005158:	0002      	movs	r2, r0
 800515a:	2100      	movs	r1, #0
 800515c:	0020      	movs	r0, r4
 800515e:	f00f fc2b 	bl	80149b8 <memset>
 8005162:	e7e3      	b.n	800512c <CLI_CommandParser+0x3e8>
 8005164:	200012c4 	.word	0x200012c4

08005168 <prvCLITask>:
void prvCLITask(void *pvParameters){
 8005168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800516a:	46ce      	mov	lr, r9
 800516c:	4647      	mov	r7, r8
 800516e:	b580      	push	{r7, lr}
 8005170:	b089      	sub	sp, #36	; 0x24
	char cRxedChar ='\0';
 8005172:	230f      	movs	r3, #15
 8005174:	aa04      	add	r2, sp, #16
 8005176:	4694      	mov	ip, r2
 8005178:	4463      	add	r3, ip
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
	ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800517e:	2101      	movs	r1, #1
 8005180:	4249      	negs	r1, r1
 8005182:	2001      	movs	r0, #1
 8005184:	f00b f892 	bl	80102ac <ulTaskNotifyTake>
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 8005188:	f009 fdd2 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 800518c:	9005      	str	r0, [sp, #20]
	if(BOS.clibaudrate != DEF_ARRAY_BAUDRATE){
 800518e:	23e1      	movs	r3, #225	; 0xe1
 8005190:	031b      	lsls	r3, r3, #12
 8005192:	4a5b      	ldr	r2, [pc, #364]	; (8005300 <prvCLITask+0x198>)
 8005194:	6892      	ldr	r2, [r2, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d009      	beq.n	80051ae <prvCLITask+0x46>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 800519a:	2401      	movs	r4, #1
			if(port != PcPort)
 800519c:	4e59      	ldr	r6, [pc, #356]	; (8005304 <prvCLITask+0x19c>)
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 800519e:	001d      	movs	r5, r3
			if(port != PcPort)
 80051a0:	7833      	ldrb	r3, [r6, #0]
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	d12d      	bne.n	8005202 <prvCLITask+0x9a>
		for(uint8_t port =1; port <= NumOfPorts; port++){
 80051a6:	3401      	adds	r4, #1
 80051a8:	b2e4      	uxtb	r4, r4
 80051aa:	2c07      	cmp	r4, #7
 80051ac:	d1f8      	bne.n	80051a0 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage,"Connected to module %d (%s), port P%d.\n\n\r>",myID,modulePNstring[myPN],PcPort);
 80051ae:	4b56      	ldr	r3, [pc, #344]	; (8005308 <prvCLITask+0x1a0>)
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	0053      	lsls	r3, r2, #1
 80051b4:	189b      	adds	r3, r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4a54      	ldr	r2, [pc, #336]	; (800530c <prvCLITask+0x1a4>)
 80051ba:	189b      	adds	r3, r3, r2
 80051bc:	4a54      	ldr	r2, [pc, #336]	; (8005310 <prvCLITask+0x1a8>)
 80051be:	7812      	ldrb	r2, [r2, #0]
 80051c0:	4c54      	ldr	r4, [pc, #336]	; (8005314 <prvCLITask+0x1ac>)
 80051c2:	4d50      	ldr	r5, [pc, #320]	; (8005304 <prvCLITask+0x19c>)
 80051c4:	7829      	ldrb	r1, [r5, #0]
 80051c6:	9100      	str	r1, [sp, #0]
 80051c8:	4953      	ldr	r1, [pc, #332]	; (8005318 <prvCLITask+0x1b0>)
 80051ca:	0020      	movs	r0, r4
 80051cc:	f00f fe20 	bl	8014e10 <sprintf>
	writePxITMutex(PcPort,pcWelcomeMessage,strlen(pcWelcomeMessage),10);
 80051d0:	22a4      	movs	r2, #164	; 0xa4
 80051d2:	7828      	ldrb	r0, [r5, #0]
 80051d4:	230a      	movs	r3, #10
 80051d6:	0092      	lsls	r2, r2, #2
 80051d8:	4950      	ldr	r1, [pc, #320]	; (800531c <prvCLITask+0x1b4>)
 80051da:	f009 fb8f 	bl	800e8fc <writePxITMutex>
	writePxITMutex(PcPort,pcWelcomePortMessage,strlen(pcWelcomePortMessage),10);
 80051de:	0020      	movs	r0, r4
 80051e0:	f7fa ff9a 	bl	8000118 <strlen>
 80051e4:	b282      	uxth	r2, r0
 80051e6:	7828      	ldrb	r0, [r5, #0]
 80051e8:	230a      	movs	r3, #10
 80051ea:	0021      	movs	r1, r4
 80051ec:	f009 fb86 	bl	800e8fc <writePxITMutex>
	int8_t cInputIndex =0, *pcOutputString;
 80051f0:	2700      	movs	r7, #0
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80051f2:	4b44      	ldr	r3, [pc, #272]	; (8005304 <prvCLITask+0x19c>)
 80051f4:	4699      	mov	r9, r3
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <prvCLITask+0x1b8>)
 80051f8:	4698      	mov	r8, r3
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80051fa:	001e      	movs	r6, r3
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80051fc:	2301      	movs	r3, #1
 80051fe:	9304      	str	r3, [sp, #16]
 8005200:	e05a      	b.n	80052b8 <prvCLITask+0x150>
				UpdateBaudrate(port,DEF_ARRAY_BAUDRATE);
 8005202:	0029      	movs	r1, r5
 8005204:	0020      	movs	r0, r4
 8005206:	f009 fbbf 	bl	800e988 <UpdateBaudrate>
 800520a:	e7cc      	b.n	80051a6 <prvCLITask+0x3e>
				cRxedChar =UARTRxBuf[PcPort - 1][chr];
 800520c:	240f      	movs	r4, #15
 800520e:	a904      	add	r1, sp, #16
 8005210:	468c      	mov	ip, r1
 8005212:	4464      	add	r4, ip
 8005214:	7022      	strb	r2, [r4, #0]
				UARTRxBuf[PcPort - 1][chr] =0;
 8005216:	006a      	lsls	r2, r5, #1
 8005218:	1952      	adds	r2, r2, r5
 800521a:	0192      	lsls	r2, r2, #6
 800521c:	4c41      	ldr	r4, [pc, #260]	; (8005324 <prvCLITask+0x1bc>)
 800521e:	18a2      	adds	r2, r4, r2
 8005220:	2400      	movs	r4, #0
 8005222:	9903      	ldr	r1, [sp, #12]
 8005224:	5454      	strb	r4, [r2, r1]
				UARTRxBufIndex[PcPort - 1] =chr;
 8005226:	4a3e      	ldr	r2, [pc, #248]	; (8005320 <prvCLITask+0x1b8>)
 8005228:	5553      	strb	r3, [r2, r5]
		writePxITMutex(PcPort,&cRxedChar,1,10);
 800522a:	250f      	movs	r5, #15
 800522c:	ab04      	add	r3, sp, #16
 800522e:	469c      	mov	ip, r3
 8005230:	4465      	add	r5, ip
 8005232:	230a      	movs	r3, #10
 8005234:	2201      	movs	r2, #1
 8005236:	0029      	movs	r1, r5
 8005238:	f009 fb60 	bl	800e8fc <writePxITMutex>
		if(cRxedChar == '\r'){
 800523c:	782b      	ldrb	r3, [r5, #0]
 800523e:	2b0d      	cmp	r3, #13
 8005240:	d01d      	beq.n	800527e <prvCLITask+0x116>
			if(cRxedChar == '\n'){
 8005242:	2b0a      	cmp	r3, #10
 8005244:	d036      	beq.n	80052b4 <prvCLITask+0x14c>
			else if(cRxedChar == '\b' || cRxedChar == 127 ){
 8005246:	2b08      	cmp	r3, #8
 8005248:	d052      	beq.n	80052f0 <prvCLITask+0x188>
 800524a:	2b7f      	cmp	r3, #127	; 0x7f
 800524c:	d050      	beq.n	80052f0 <prvCLITask+0x188>
				if((cRxedChar >= ' ') && (cRxedChar <= '~')){
 800524e:	001a      	movs	r2, r3
 8005250:	3a20      	subs	r2, #32
 8005252:	2a5e      	cmp	r2, #94	; 0x5e
 8005254:	d82e      	bhi.n	80052b4 <prvCLITask+0x14c>
					if(cInputIndex < cmdMAX_INPUT_SIZE){
 8005256:	2f31      	cmp	r7, #49	; 0x31
 8005258:	dc2c      	bgt.n	80052b4 <prvCLITask+0x14c>
						cInputString[cInputIndex] =cRxedChar;
 800525a:	4a33      	ldr	r2, [pc, #204]	; (8005328 <prvCLITask+0x1c0>)
 800525c:	55d3      	strb	r3, [r2, r7]
						cInputIndex++;
 800525e:	3701      	adds	r7, #1
 8005260:	b27f      	sxtb	r7, r7
 8005262:	e027      	b.n	80052b4 <prvCLITask+0x14c>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 8005264:	5571      	strb	r1, [r6, r5]
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005266:	9b04      	ldr	r3, [sp, #16]
			if(UARTRxBuf[PcPort - 1][chr]){
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	5ce2      	ldrb	r2, [r4, r3]
 800526c:	2a00      	cmp	r2, #0
 800526e:	d1cd      	bne.n	800520c <prvCLITask+0xa4>
			if(chr == MSG_RX_BUF_SIZE - 1){
 8005270:	2bbf      	cmp	r3, #191	; 0xbf
 8005272:	d0f7      	beq.n	8005264 <prvCLITask+0xfc>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 8005274:	3301      	adds	r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	2bbf      	cmp	r3, #191	; 0xbf
 800527a:	d9f5      	bls.n	8005268 <prvCLITask+0x100>
 800527c:	e7d5      	b.n	800522a <prvCLITask+0xc2>
			writePxITMutex(PcPort,pcNewLine,strlen(pcNewLine),10);
 800527e:	4b21      	ldr	r3, [pc, #132]	; (8005304 <prvCLITask+0x19c>)
 8005280:	7818      	ldrb	r0, [r3, #0]
 8005282:	230a      	movs	r3, #10
 8005284:	2202      	movs	r2, #2
 8005286:	4929      	ldr	r1, [pc, #164]	; (800532c <prvCLITask+0x1c4>)
 8005288:	f009 fb38 	bl	800e8fc <writePxITMutex>
			if(cInputIndex == 0){
 800528c:	2f00      	cmp	r7, #0
 800528e:	d02a      	beq.n	80052e6 <prvCLITask+0x17e>
			CLI_CommandParser(PcPort,true,cInputString,pcOutputString);
 8005290:	4f25      	ldr	r7, [pc, #148]	; (8005328 <prvCLITask+0x1c0>)
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <prvCLITask+0x19c>)
 8005294:	7818      	ldrb	r0, [r3, #0]
 8005296:	9b05      	ldr	r3, [sp, #20]
 8005298:	003a      	movs	r2, r7
 800529a:	2101      	movs	r1, #1
 800529c:	f7ff fd52 	bl	8004d44 <CLI_CommandParser>
			strcpy((char* )cLastInputString,(char* )cInputString);
 80052a0:	0039      	movs	r1, r7
 80052a2:	4823      	ldr	r0, [pc, #140]	; (8005330 <prvCLITask+0x1c8>)
 80052a4:	f00f fdf0 	bl	8014e88 <strcpy>
			memset(cInputString,0x00,cmdMAX_INPUT_SIZE);
 80052a8:	2232      	movs	r2, #50	; 0x32
 80052aa:	2100      	movs	r1, #0
 80052ac:	0038      	movs	r0, r7
 80052ae:	f00f fb83 	bl	80149b8 <memset>
			cInputIndex =0;
 80052b2:	2700      	movs	r7, #0
		taskYIELD();
 80052b4:	f00b fad4 	bl	8010860 <vPortYield>
		for(chr =UARTRxBufIndex[PcPort - 1]; chr < MSG_RX_BUF_SIZE; chr++){
 80052b8:	464b      	mov	r3, r9
 80052ba:	7818      	ldrb	r0, [r3, #0]
 80052bc:	1e45      	subs	r5, r0, #1
 80052be:	4643      	mov	r3, r8
 80052c0:	5d59      	ldrb	r1, [r3, r5]
 80052c2:	b28b      	uxth	r3, r1
 80052c4:	2bbf      	cmp	r3, #191	; 0xbf
 80052c6:	d8b0      	bhi.n	800522a <prvCLITask+0xc2>
			if(UARTRxBuf[PcPort - 1][chr]){
 80052c8:	9103      	str	r1, [sp, #12]
 80052ca:	006a      	lsls	r2, r5, #1
 80052cc:	1952      	adds	r2, r2, r5
 80052ce:	0192      	lsls	r2, r2, #6
 80052d0:	4c14      	ldr	r4, [pc, #80]	; (8005324 <prvCLITask+0x1bc>)
 80052d2:	18a2      	adds	r2, r4, r2
 80052d4:	5c52      	ldrb	r2, [r2, r1]
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	d198      	bne.n	800520c <prvCLITask+0xa4>
				chr =UARTRxBufIndex[PcPort - 1] =0;
 80052da:	2100      	movs	r1, #0
			if(UARTRxBuf[PcPort - 1][chr]){
 80052dc:	006a      	lsls	r2, r5, #1
 80052de:	1952      	adds	r2, r2, r5
 80052e0:	0192      	lsls	r2, r2, #6
 80052e2:	18a4      	adds	r4, r4, r2
 80052e4:	e7c4      	b.n	8005270 <prvCLITask+0x108>
				strcpy((char* )cInputString,(char* )cLastInputString);
 80052e6:	4912      	ldr	r1, [pc, #72]	; (8005330 <prvCLITask+0x1c8>)
 80052e8:	480f      	ldr	r0, [pc, #60]	; (8005328 <prvCLITask+0x1c0>)
 80052ea:	f00f fdcd 	bl	8014e88 <strcpy>
 80052ee:	e7cf      	b.n	8005290 <prvCLITask+0x128>
				if(cInputIndex > 0){
 80052f0:	2f00      	cmp	r7, #0
 80052f2:	dddf      	ble.n	80052b4 <prvCLITask+0x14c>
					cInputIndex--;
 80052f4:	3f01      	subs	r7, #1
 80052f6:	b27f      	sxtb	r7, r7
					cInputString[cInputIndex] ='\0';
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <prvCLITask+0x1c0>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	55da      	strb	r2, [r3, r7]
 80052fe:	e7d9      	b.n	80052b4 <prvCLITask+0x14c>
 8005300:	20006e54 	.word	0x20006e54
 8005304:	20000ae8 	.word	0x20000ae8
 8005308:	20000078 	.word	0x20000078
 800530c:	0801959c 	.word	0x0801959c
 8005310:	200010ea 	.word	0x200010ea
 8005314:	20001298 	.word	0x20001298
 8005318:	08019ab0 	.word	0x08019ab0
 800531c:	08019adc 	.word	0x08019adc
 8005320:	200017c8 	.word	0x200017c8
 8005324:	20001348 	.word	0x20001348
 8005328:	200011c8 	.word	0x200011c8
 800532c:	0801b398 	.word	0x0801b398
 8005330:	20001264 	.word	0x20001264

08005334 <ParseSnippetCommand>:

/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
 */
bool ParseSnippetCommand(char *snippetBuffer,int8_t *cliBuffer){
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if(snippets[numOfRecordedSnippets - 1].cmd == NULL)
 8005338:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <ParseSnippetCommand+0x78>)
 800533a:	781a      	ldrb	r2, [r3, #0]
 800533c:	3a01      	subs	r2, #1
 800533e:	0093      	lsls	r3, r2, #2
 8005340:	189b      	adds	r3, r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4a1a      	ldr	r2, [pc, #104]	; (80053b0 <ParseSnippetCommand+0x7c>)
 8005346:	18d3      	adds	r3, r2, r3
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d02c      	beq.n	80053a8 <ParseSnippetCommand+0x74>
		return false;
	
	// Initialize the start pointer to snippet buffer address
	if(!ptrStart)
 800534e:	4b19      	ldr	r3, [pc, #100]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d014      	beq.n	8005380 <ParseSnippetCommand+0x4c>
		ptrStart =snippetBuffer;
	
	// Did we already reach end of Snippet buffer?
	if(*ptrStart == 0x00){
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005358:	681d      	ldr	r5, [r3, #0]
 800535a:	782b      	ldrb	r3, [r5, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d012      	beq.n	8005386 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd =strchr(ptrStart,0x13);
 8005360:	2113      	movs	r1, #19
 8005362:	0028      	movs	r0, r5
 8005364:	f00f fd82 	bl	8014e6c <strchr>
 8005368:	1e06      	subs	r6, r0, #0
	if(ptrEnd != NULL){
 800536a:	d011      	beq.n	8005390 <ParseSnippetCommand+0x5c>
		strncpy((char* )cliBuffer,ptrStart,ptrEnd - ptrStart);
 800536c:	1b42      	subs	r2, r0, r5
 800536e:	0029      	movs	r1, r5
 8005370:	0020      	movs	r0, r4
 8005372:	f00f fda2 	bl	8014eba <strncpy>
		ptrStart =ptrEnd + 1;
 8005376:	3601      	adds	r6, #1
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <ParseSnippetCommand+0x80>)
 800537a:	601e      	str	r6, [r3, #0]
	else{
		strcpy((char* )cliBuffer,ptrStart);
		ptrStart +=strlen((const char* )cliBuffer);
	}
	
	return true;
 800537c:	2001      	movs	r0, #1
 800537e:	e006      	b.n	800538e <ParseSnippetCommand+0x5a>
		ptrStart =snippetBuffer;
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005382:	6018      	str	r0, [r3, #0]
 8005384:	e7e7      	b.n	8005356 <ParseSnippetCommand+0x22>
		ptrStart =0;		// Initialize the start pointer for next Snippet
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <ParseSnippetCommand+0x80>)
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
		return false;
 800538c:	2000      	movs	r0, #0
}
 800538e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )cliBuffer,ptrStart);
 8005390:	0029      	movs	r1, r5
 8005392:	0020      	movs	r0, r4
 8005394:	f00f fd78 	bl	8014e88 <strcpy>
		ptrStart +=strlen((const char* )cliBuffer);
 8005398:	0020      	movs	r0, r4
 800539a:	f7fa febd 	bl	8000118 <strlen>
 800539e:	182d      	adds	r5, r5, r0
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <ParseSnippetCommand+0x80>)
 80053a2:	601d      	str	r5, [r3, #0]
	return true;
 80053a4:	2001      	movs	r0, #1
 80053a6:	e7f2      	b.n	800538e <ParseSnippetCommand+0x5a>
		return false;
 80053a8:	2000      	movs	r0, #0
 80053aa:	e7f0      	b.n	800538e <ParseSnippetCommand+0x5a>
 80053ac:	20001297 	.word	0x20001297
 80053b0:	20006e70 	.word	0x20006e70
 80053b4:	200012c0 	.word	0x200012c0

080053b8 <CheckSnippetCondition>:

/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
 */
bool CheckSnippetCondition(uint8_t index){
 80053b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ba:	b083      	sub	sp, #12
 80053bc:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */

	switch(snippets[index].cond.conditionType){
 80053be:	0083      	lsls	r3, r0, #2
 80053c0:	181b      	adds	r3, r3, r0
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <CheckSnippetCondition+0x10c>)
 80053c6:	5c9b      	ldrb	r3, [r3, r2]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d003      	beq.n	80053d4 <CheckSnippetCondition+0x1c>
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d015      	beq.n	80053fc <CheckSnippetCondition+0x44>
			
		default:
			break;
	}
	
	return false;
 80053d0:	2000      	movs	r0, #0
 80053d2:	e011      	b.n	80053f8 <CheckSnippetCondition+0x40>
			temp8 =snippets[index].cond.buffer1[0]; 	// Button port
 80053d4:	493b      	ldr	r1, [pc, #236]	; (80054c4 <CheckSnippetCondition+0x10c>)
 80053d6:	0083      	lsls	r3, r0, #2
 80053d8:	181a      	adds	r2, r3, r0
 80053da:	0092      	lsls	r2, r2, #2
 80053dc:	188a      	adds	r2, r1, r2
			if(snippets[index].cond.buffer1[1] == button[temp8].state)
 80053de:	7890      	ldrb	r0, [r2, #2]
 80053e0:	00c2      	lsls	r2, r0, #3
 80053e2:	1812      	adds	r2, r2, r0
 80053e4:	191b      	adds	r3, r3, r4
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	18cb      	adds	r3, r1, r3
 80053ea:	4937      	ldr	r1, [pc, #220]	; (80054c8 <CheckSnippetCondition+0x110>)
 80053ec:	5c50      	ldrb	r0, [r2, r1]
 80053ee:	78db      	ldrb	r3, [r3, #3]
 80053f0:	1ac0      	subs	r0, r0, r3
 80053f2:	4243      	negs	r3, r0
 80053f4:	4158      	adcs	r0, r3
 80053f6:	b2c0      	uxtb	r0, r0
}
 80053f8:	b003      	add	sp, #12
 80053fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			flt1 =*(float* )modParam[snippets[index].cond.buffer1[1] - 1].paramPtr;
 80053fc:	4e31      	ldr	r6, [pc, #196]	; (80054c4 <CheckSnippetCondition+0x10c>)
 80053fe:	0085      	lsls	r5, r0, #2
 8005400:	182b      	adds	r3, r5, r0
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	18f3      	adds	r3, r6, r3
 8005406:	78da      	ldrb	r2, [r3, #3]
 8005408:	3a01      	subs	r2, #1
 800540a:	0053      	lsls	r3, r2, #1
 800540c:	189b      	adds	r3, r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <CheckSnippetCondition+0x114>)
 8005412:	589b      	ldr	r3, [r3, r2]
 8005414:	681f      	ldr	r7, [r3, #0]
			memcpy((uint8_t* )&flt2,&snippets[index].cond.buffer2,sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8005416:	1829      	adds	r1, r5, r0
 8005418:	0089      	lsls	r1, r1, #2
 800541a:	3106      	adds	r1, #6
 800541c:	1989      	adds	r1, r1, r6
 800541e:	2204      	movs	r2, #4
 8005420:	a801      	add	r0, sp, #4
 8005422:	f00f fac0 	bl	80149a6 <memcpy>
			switch(snippets[index].cond.mathOperator){
 8005426:	192d      	adds	r5, r5, r4
 8005428:	00ad      	lsls	r5, r5, #2
 800542a:	1975      	adds	r5, r6, r5
 800542c:	786b      	ldrb	r3, [r5, #1]
 800542e:	2b06      	cmp	r3, #6
 8005430:	d83f      	bhi.n	80054b2 <CheckSnippetCondition+0xfa>
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4a26      	ldr	r2, [pc, #152]	; (80054d0 <CheckSnippetCondition+0x118>)
 8005436:	58d3      	ldr	r3, [r2, r3]
 8005438:	469f      	mov	pc, r3
					if(flt1 == flt2)
 800543a:	1c39      	adds	r1, r7, #0
 800543c:	9801      	ldr	r0, [sp, #4]
 800543e:	f7fb f847 	bl	80004d0 <__aeabi_fcmpeq>
 8005442:	1e43      	subs	r3, r0, #1
 8005444:	4198      	sbcs	r0, r3
 8005446:	e7d7      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 > flt2)
 8005448:	1c39      	adds	r1, r7, #0
 800544a:	9801      	ldr	r0, [sp, #4]
 800544c:	f7fb f846 	bl	80004dc <__aeabi_fcmplt>
 8005450:	1e43      	subs	r3, r0, #1
 8005452:	4198      	sbcs	r0, r3
 8005454:	e7d0      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 < flt2 && flt1 != 0.0f)
 8005456:	1c39      	adds	r1, r7, #0
 8005458:	9801      	ldr	r0, [sp, #4]
 800545a:	f7fb f853 	bl	8000504 <__aeabi_fcmpgt>
 800545e:	2800      	cmp	r0, #0
 8005460:	d029      	beq.n	80054b6 <CheckSnippetCondition+0xfe>
 8005462:	2100      	movs	r1, #0
 8005464:	1c38      	adds	r0, r7, #0
 8005466:	f7fb f833 	bl	80004d0 <__aeabi_fcmpeq>
 800546a:	4243      	negs	r3, r0
 800546c:	4158      	adcs	r0, r3
 800546e:	e7c3      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 >= flt2)
 8005470:	1c39      	adds	r1, r7, #0
 8005472:	9801      	ldr	r0, [sp, #4]
 8005474:	f7fb f83c 	bl	80004f0 <__aeabi_fcmple>
 8005478:	1e43      	subs	r3, r0, #1
 800547a:	4198      	sbcs	r0, r3
 800547c:	e7bc      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 <= flt2 && flt1 != 0.0f)
 800547e:	1c39      	adds	r1, r7, #0
 8005480:	9801      	ldr	r0, [sp, #4]
 8005482:	f7fb f849 	bl	8000518 <__aeabi_fcmpge>
 8005486:	2800      	cmp	r0, #0
 8005488:	d017      	beq.n	80054ba <CheckSnippetCondition+0x102>
 800548a:	2100      	movs	r1, #0
 800548c:	1c38      	adds	r0, r7, #0
 800548e:	f7fb f81f 	bl	80004d0 <__aeabi_fcmpeq>
 8005492:	4243      	negs	r3, r0
 8005494:	4158      	adcs	r0, r3
 8005496:	e7af      	b.n	80053f8 <CheckSnippetCondition+0x40>
					if(flt1 != flt2 && flt1 != 0.0f)
 8005498:	1c39      	adds	r1, r7, #0
 800549a:	9801      	ldr	r0, [sp, #4]
 800549c:	f7fb f818 	bl	80004d0 <__aeabi_fcmpeq>
 80054a0:	2800      	cmp	r0, #0
 80054a2:	d10c      	bne.n	80054be <CheckSnippetCondition+0x106>
 80054a4:	2100      	movs	r1, #0
 80054a6:	1c38      	adds	r0, r7, #0
 80054a8:	f7fb f812 	bl	80004d0 <__aeabi_fcmpeq>
 80054ac:	4243      	negs	r3, r0
 80054ae:	4158      	adcs	r0, r3
 80054b0:	e7a2      	b.n	80053f8 <CheckSnippetCondition+0x40>
	return false;
 80054b2:	2000      	movs	r0, #0
 80054b4:	e7a0      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054b6:	2000      	movs	r0, #0
 80054b8:	e79e      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054ba:	2000      	movs	r0, #0
 80054bc:	e79c      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054be:	2000      	movs	r0, #0
 80054c0:	e79a      	b.n	80053f8 <CheckSnippetCondition+0x40>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	20006e70 	.word	0x20006e70
 80054c8:	20001974 	.word	0x20001974
 80054cc:	200000ac 	.word	0x200000ac
 80054d0:	08019898 	.word	0x08019898

080054d4 <ExecuteSnippet>:

/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
 */
BOS_Status ExecuteSnippet(void){
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	 exclusion on this buffer as it is assumed only one command console
	 interface will be used at any one time. */
	pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 80054d6:	f009 fc2b 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 80054da:	0005      	movs	r5, r0
	
	/* Go through activated Snippets */
	for(s =0; s < numOfRecordedSnippets; s++){
 80054dc:	4b1c      	ldr	r3, [pc, #112]	; (8005550 <ExecuteSnippet+0x7c>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d032      	beq.n	800554a <ExecuteSnippet+0x76>
 80054e4:	2400      	movs	r4, #0
		if(snippets[s].state)								// Check for activated Snippets
 80054e6:	4f1b      	ldr	r7, [pc, #108]	; (8005554 <ExecuteSnippet+0x80>)
 80054e8:	e01a      	b.n	8005520 <ExecuteSnippet+0x4c>
				// Loop over all recorded Snippet commands
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
					/* Pass the received command to the command interpreter.  The
					 command interpreter is called repeatedly until it returns
					 pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort,false,cInputString,pcOutputString);
 80054ea:	4b1b      	ldr	r3, [pc, #108]	; (8005558 <ExecuteSnippet+0x84>)
 80054ec:	7818      	ldrb	r0, [r3, #0]
 80054ee:	002b      	movs	r3, r5
 80054f0:	4a1a      	ldr	r2, [pc, #104]	; (800555c <ExecuteSnippet+0x88>)
 80054f2:	2100      	movs	r1, #0
 80054f4:	f7ff fc26 	bl	8004d44 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 80054f8:	0028      	movs	r0, r5
 80054fa:	f7fa fe0d 	bl	8000118 <strlen>
 80054fe:	0002      	movs	r2, r0
 8005500:	2100      	movs	r1, #0
 8005502:	0028      	movs	r0, r5
 8005504:	f00f fa58 	bl	80149b8 <memset>
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 8005508:	4914      	ldr	r1, [pc, #80]	; (800555c <ExecuteSnippet+0x88>)
 800550a:	68f0      	ldr	r0, [r6, #12]
 800550c:	f7ff ff12 	bl	8005334 <ParseSnippetCommand>
 8005510:	2800      	cmp	r0, #0
 8005512:	d1ea      	bne.n	80054ea <ExecuteSnippet+0x16>
	for(s =0; s < numOfRecordedSnippets; s++){
 8005514:	3401      	adds	r4, #1
 8005516:	b2a4      	uxth	r4, r4
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <ExecuteSnippet+0x7c>)
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	42a3      	cmp	r3, r4
 800551e:	d914      	bls.n	800554a <ExecuteSnippet+0x76>
		if(snippets[s].state)								// Check for activated Snippets
 8005520:	00a3      	lsls	r3, r4, #2
 8005522:	191b      	adds	r3, r3, r4
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	7c1b      	ldrb	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f2      	beq.n	8005514 <ExecuteSnippet+0x40>
			if(CheckSnippetCondition(s))				// Process Snippet condition
 800552e:	b2e0      	uxtb	r0, r4
 8005530:	f7ff ff42 	bl	80053b8 <CheckSnippetCondition>
 8005534:	2800      	cmp	r0, #0
 8005536:	d0ed      	beq.n	8005514 <ExecuteSnippet+0x40>
				BOSMessaging.response = BOS_RESPONSE_MSG;		// Disable CLI response
 8005538:	4b09      	ldr	r3, [pc, #36]	; (8005560 <ExecuteSnippet+0x8c>)
 800553a:	2220      	movs	r2, #32
 800553c:	701a      	strb	r2, [r3, #0]
				while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&cInputString) != false){
 800553e:	00a3      	lsls	r3, r4, #2
 8005540:	191e      	adds	r6, r3, r4
 8005542:	00b6      	lsls	r6, r6, #2
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <ExecuteSnippet+0x80>)
 8005546:	199e      	adds	r6, r3, r6
 8005548:	e7de      	b.n	8005508 <ExecuteSnippet+0x34>
			}
		}
	}
	
	return result;
}
 800554a:	2000      	movs	r0, #0
 800554c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	20001297 	.word	0x20001297
 8005554:	20006e70 	.word	0x20006e70
 8005558:	20000ae8 	.word	0x20000ae8
 800555c:	20001230 	.word	0x20001230
 8005560:	20006dd4 	.word	0x20006dd4

08005564 <exploreCommand>:
//	
//	/* There is no more data to return after this single string, so return
//	pdFALSE. */
//	return pdFALSE;
	return 0;
}
 8005564:	2000      	movs	r0, #0
 8005566:	4770      	bx	lr

08005568 <setBaudrateCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005568:	b570      	push	{r4, r5, r6, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	0004      	movs	r4, r0
 800556e:	0015      	movs	r5, r2
	BOS_Status result =BOS_OK;
	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 =0;
 8005570:	2300      	movs	r3, #0
 8005572:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 =0;
 8005574:	9300      	str	r3, [sp, #0]
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005576:	2800      	cmp	r0, #0
 8005578:	d101      	bne.n	800557e <setBaudrateCommand+0x16>
 800557a:	b672      	cpsid	i
 800557c:	e7fe      	b.n	800557c <setBaudrateCommand+0x14>
	
	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800557e:	aa01      	add	r2, sp, #4
 8005580:	2101      	movs	r1, #1
 8005582:	0028      	movs	r0, r5
 8005584:	f009 fbd8 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005588:	2300      	movs	r3, #0
 800558a:	56c3      	ldrsb	r3, [r0, r3]
 800558c:	2b70      	cmp	r3, #112	; 0x70
 800558e:	d00c      	beq.n	80055aa <setBaudrateCommand+0x42>
	}
	else{
		result =BOS_ERR_WrongValue;
	}
	/* 2nd parameter for baudrate */
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005590:	466a      	mov	r2, sp
 8005592:	2102      	movs	r1, #2
 8005594:	0028      	movs	r0, r5
 8005596:	f009 fbcf 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 800559a:	f00e ff7a 	bl	8014492 <atol>
	
	/* Respond to the command */
	if(BOS_ERR_WrongValue == result){
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 800559e:	2213      	movs	r2, #19
 80055a0:	490f      	ldr	r1, [pc, #60]	; (80055e0 <setBaudrateCommand+0x78>)
 80055a2:	0020      	movs	r0, r4
 80055a4:	f00f f9ff 	bl	80149a6 <memcpy>
		UpdateBaudrate(port,baudrate);
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
	}
	
	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 80055a8:	e016      	b.n	80055d8 <setBaudrateCommand+0x70>
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 80055aa:	3001      	adds	r0, #1
 80055ac:	f00e ff71 	bl	8014492 <atol>
 80055b0:	0006      	movs	r6, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80055b2:	466a      	mov	r2, sp
 80055b4:	2102      	movs	r1, #2
 80055b6:	0028      	movs	r0, r5
 80055b8:	f009 fbbe 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	baudrate =(uint32_t )atol((char* )pcParameterString2);
 80055bc:	f00e ff69 	bl	8014492 <atol>
 80055c0:	0005      	movs	r5, r0
		UpdateBaudrate(port,baudrate);
 80055c2:	b2f0      	uxtb	r0, r6
 80055c4:	0029      	movs	r1, r5
 80055c6:	f009 f9df 	bl	800e988 <UpdateBaudrate>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,baudrate,port);
 80055ca:	23ff      	movs	r3, #255	; 0xff
 80055cc:	4033      	ands	r3, r6
 80055ce:	002a      	movs	r2, r5
 80055d0:	4904      	ldr	r1, [pc, #16]	; (80055e4 <setBaudrateCommand+0x7c>)
 80055d2:	0020      	movs	r0, r4
 80055d4:	f00f fc1c 	bl	8014e10 <sprintf>
}
 80055d8:	2000      	movs	r0, #0
 80055da:	b002      	add	sp, #8
 80055dc:	bd70      	pop	{r4, r5, r6, pc}
 80055de:	46c0      	nop			; (mov r8, r8)
 80055e0:	0801a768 	.word	0x0801a768
 80055e4:	0801a740 	.word	0x0801a740

080055e8 <flashsizeCommand>:
	return pdFALSE;
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80055e8:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 80055ea:	2800      	cmp	r0, #0
 80055ec:	d101      	bne.n	80055f2 <flashsizeCommand+0xa>
 80055ee:	b672      	cpsid	i
 80055f0:	e7fe      	b.n	80055f0 <flashsizeCommand+0x8>
	
	/* Respond to the command */
	sprintf((char* )pcWriteBuffer,(char* )pcMessageFLASH,(*(uint32_t* )(MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF);
 80055f2:	4b03      	ldr	r3, [pc, #12]	; (8005600 <flashsizeCommand+0x18>)
 80055f4:	881a      	ldrh	r2, [r3, #0]
 80055f6:	4903      	ldr	r1, [pc, #12]	; (8005604 <flashsizeCommand+0x1c>)
 80055f8:	f00f fc0a 	bl	8014e10 <sprintf>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}
 80055fc:	2000      	movs	r0, #0
 80055fe:	bd10      	pop	{r4, pc}
 8005600:	1ffff7cc 	.word	0x1ffff7cc
 8005604:	0801a134 	.word	0x0801a134

08005608 <GetReadPrecentageCommand>:
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
}

static portBASE_TYPE GetReadPrecentageCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005608:	b510      	push	{r4, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	0004      	movs	r4, r0
 800560e:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong =(int8_t* )"Wrong Port number \n\r"; //wrong port number was entered
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 =0;
 8005610:	2300      	movs	r3, #0
 8005612:	9301      	str	r3, [sp, #4]
	BOS_Status result =BOS_OK;
	uint8_t ADCports;
	float ADC_Value_CLI =0;
 8005614:	2300      	movs	r3, #0
 8005616:	9300      	str	r3, [sp, #0]
	/* Remove compile time warnings about unused parameters, and check the
	 write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	 write buffer length is adequate, so does not check for buffer overflows. */
	(void )xWriteBufferLen;
	configASSERT(pcWriteBuffer);
 8005618:	2c00      	cmp	r4, #0
 800561a:	d101      	bne.n	8005620 <GetReadPrecentageCommand+0x18>
 800561c:	b672      	cpsid	i
 800561e:	e7fe      	b.n	800561e <GetReadPrecentageCommand+0x16>
	
	/* Obtain the 1st parameter string. */

	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005620:	aa01      	add	r2, sp, #4
 8005622:	2101      	movs	r1, #1
 8005624:	f009 fb88 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 8005628:	7803      	ldrb	r3, [r0, #0]
 800562a:	3b32      	subs	r3, #50	; 0x32
 800562c:	2b01      	cmp	r3, #1
 800562e:	d907      	bls.n	8005640 <GetReadPrecentageCommand+0x38>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
		
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
	}
	else
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005630:	2215      	movs	r2, #21
 8005632:	490b      	ldr	r1, [pc, #44]	; (8005660 <GetReadPrecentageCommand+0x58>)
 8005634:	0020      	movs	r0, r4
 8005636:	f00f f9b6 	bl	80149a6 <memcpy>
	
	/* There is no more data to return after this single string, so return
	 pdFALSE. */
	return pdFALSE;
	
}
 800563a:	2000      	movs	r0, #0
 800563c:	b002      	add	sp, #8
 800563e:	bd10      	pop	{r4, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005640:	f00e ff27 	bl	8014492 <atol>
		GetReadPrecentage(ADCports,&ADC_Value_CLI);
 8005644:	b2c0      	uxtb	r0, r0
 8005646:	4669      	mov	r1, sp
 8005648:	f003 fb58 	bl	8008cfc <GetReadPrecentage>
		sprintf(pcWriteBuffer,"ADC value percentage is=%.2f%% %\r\n",ADC_Value_CLI);
 800564c:	9800      	ldr	r0, [sp, #0]
 800564e:	f7fd fa69 	bl	8002b24 <__aeabi_f2d>
 8005652:	0002      	movs	r2, r0
 8005654:	000b      	movs	r3, r1
 8005656:	4903      	ldr	r1, [pc, #12]	; (8005664 <GetReadPrecentageCommand+0x5c>)
 8005658:	0020      	movs	r0, r4
 800565a:	f00f fbd9 	bl	8014e10 <sprintf>
 800565e:	e7ec      	b.n	800563a <GetReadPrecentageCommand+0x32>
 8005660:	08019e30 	.word	0x08019e30
 8005664:	08019e0c 	.word	0x08019e0c

08005668 <ReadVrefCommand>:
static portBASE_TYPE ReadVrefCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005668:	b510      	push	{r4, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 800566e:	2300      	movs	r3, #0
 8005670:	9301      	str	r3, [sp, #4]
 8005672:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005674:	2800      	cmp	r0, #0
 8005676:	d101      	bne.n	800567c <ReadVrefCommand+0x14>
 8005678:	b672      	cpsid	i
 800567a:	e7fe      	b.n	800567a <ReadVrefCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 800567c:	4669      	mov	r1, sp
 800567e:	a801      	add	r0, sp, #4
 8005680:	f003 fa7e 	bl	8008b80 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 8005684:	a901      	add	r1, sp, #4
 8005686:	0020      	movs	r0, r4
 8005688:	f00f fbfe 	bl	8014e88 <strcpy>
	sprintf(pcWriteBuffer,"internal reference voltage is=%.2fV \r\n",ADC_Value_Vref);
 800568c:	9800      	ldr	r0, [sp, #0]
 800568e:	f7fd fa49 	bl	8002b24 <__aeabi_f2d>
 8005692:	0002      	movs	r2, r0
 8005694:	000b      	movs	r3, r1
 8005696:	4903      	ldr	r1, [pc, #12]	; (80056a4 <ReadVrefCommand+0x3c>)
 8005698:	0020      	movs	r0, r4
 800569a:	f00f fbb9 	bl	8014e10 <sprintf>
}
 800569e:	2000      	movs	r0, #0
 80056a0:	b002      	add	sp, #8
 80056a2:	bd10      	pop	{r4, pc}
 80056a4:	08019e7c 	.word	0x08019e7c

080056a8 <ReadTempCommand>:
static portBASE_TYPE ReadTempCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056a8:	b510      	push	{r4, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	0004      	movs	r4, r0
	float ADC_Value_TEMP =0, ADC_Value_Vref =0;
 80056ae:	2300      	movs	r3, #0
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d101      	bne.n	80056bc <ReadTempCommand+0x14>
 80056b8:	b672      	cpsid	i
 80056ba:	e7fe      	b.n	80056ba <ReadTempCommand+0x12>
	ReadTempAndVref(&ADC_Value_TEMP,&ADC_Value_Vref);
 80056bc:	4669      	mov	r1, sp
 80056be:	a801      	add	r0, sp, #4
 80056c0:	f003 fa5e 	bl	8008b80 <ReadTempAndVref>
	strcpy(pcWriteBuffer,(char* )&ADC_Value_TEMP);
 80056c4:	a901      	add	r1, sp, #4
 80056c6:	0020      	movs	r0, r4
 80056c8:	f00f fbde 	bl	8014e88 <strcpy>
	sprintf(pcWriteBuffer,"internal temperature is %.2fC \r\n",ADC_Value_TEMP);
 80056cc:	9801      	ldr	r0, [sp, #4]
 80056ce:	f7fd fa29 	bl	8002b24 <__aeabi_f2d>
 80056d2:	0002      	movs	r2, r0
 80056d4:	000b      	movs	r3, r1
 80056d6:	4903      	ldr	r1, [pc, #12]	; (80056e4 <ReadTempCommand+0x3c>)
 80056d8:	0020      	movs	r0, r4
 80056da:	f00f fb99 	bl	8014e10 <sprintf>
}
 80056de:	2000      	movs	r0, #0
 80056e0:	b002      	add	sp, #8
 80056e2:	bd10      	pop	{r4, pc}
 80056e4:	08019e48 	.word	0x08019e48

080056e8 <ADCReadCommand>:
static portBASE_TYPE ADCReadCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	0004      	movs	r4, r0
 80056ee:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	9303      	str	r3, [sp, #12]
	portBASE_TYPE xParameterStringLength2 =0;
 80056f4:	9302      	str	r3, [sp, #8]
	float ADC_Value_CLI =0;
 80056f6:	2300      	movs	r3, #0
 80056f8:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 80056fa:	2800      	cmp	r0, #0
 80056fc:	d101      	bne.n	8005702 <ADCReadCommand+0x1a>
 80056fe:	b672      	cpsid	i
 8005700:	e7fe      	b.n	8005700 <ADCReadCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005702:	aa03      	add	r2, sp, #12
 8005704:	2101      	movs	r1, #1
 8005706:	0030      	movs	r0, r6
 8005708:	f009 fb16 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800570c:	0005      	movs	r5, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800570e:	aa02      	add	r2, sp, #8
 8005710:	2102      	movs	r1, #2
 8005712:	0030      	movs	r0, r6
 8005714:	f009 fb10 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8005718:	0006      	movs	r6, r0
	if(*pcParameterString1 == '2' || *pcParameterString1 == '3'){
 800571a:	782b      	ldrb	r3, [r5, #0]
 800571c:	3b32      	subs	r3, #50	; 0x32
 800571e:	2b01      	cmp	r3, #1
 8005720:	d907      	bls.n	8005732 <ADCReadCommand+0x4a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005722:	2215      	movs	r2, #21
 8005724:	4919      	ldr	r1, [pc, #100]	; (800578c <ADCReadCommand+0xa4>)
 8005726:	0020      	movs	r0, r4
 8005728:	f00f f93d 	bl	80149a6 <memcpy>
}
 800572c:	2000      	movs	r0, #0
 800572e:	b004      	add	sp, #16
 8005730:	bd70      	pop	{r4, r5, r6, pc}
		ADCports =(uint8_t )atol((char* )pcParameterString1);
 8005732:	0028      	movs	r0, r5
 8005734:	f00e fead 	bl	8014492 <atol>
 8005738:	b2c5      	uxtb	r5, r0
		if(strcmp((char* )pcParameterString2,"top") == 0 || strcmp((char* )pcParameterString2,"bottom") == 0){
 800573a:	4915      	ldr	r1, [pc, #84]	; (8005790 <ADCReadCommand+0xa8>)
 800573c:	0030      	movs	r0, r6
 800573e:	f7fa fce1 	bl	8000104 <strcmp>
 8005742:	2800      	cmp	r0, #0
 8005744:	d005      	beq.n	8005752 <ADCReadCommand+0x6a>
 8005746:	4913      	ldr	r1, [pc, #76]	; (8005794 <ADCReadCommand+0xac>)
 8005748:	0030      	movs	r0, r6
 800574a:	f7fa fcdb 	bl	8000104 <strcmp>
 800574e:	2800      	cmp	r0, #0
 8005750:	d116      	bne.n	8005780 <ADCReadCommand+0x98>
			ADCSelectChannel(ADCports,ADC_Side);
 8005752:	4e0f      	ldr	r6, [pc, #60]	; (8005790 <ADCReadCommand+0xa8>)
 8005754:	0031      	movs	r1, r6
 8005756:	0028      	movs	r0, r5
 8005758:	f003 fb9a 	bl	8008e90 <ADCSelectChannel>
			ReadADCChannel(ADCports,ADC_Side,&ADC_Value_CLI);
 800575c:	aa01      	add	r2, sp, #4
 800575e:	0031      	movs	r1, r6
 8005760:	0028      	movs	r0, r5
 8005762:	f003 fbc3 	bl	8008eec <ReadADCChannel>
			strcpy(pcWriteBuffer,(char* )&ADC_Value_CLI);
 8005766:	a901      	add	r1, sp, #4
 8005768:	0020      	movs	r0, r4
 800576a:	f00f fb8d 	bl	8014e88 <strcpy>
			sprintf(pcWriteBuffer,"ADC_Value=%u \r\n",(uint16_t )ADC_Value_CLI);
 800576e:	9801      	ldr	r0, [sp, #4]
 8005770:	f7fa ff26 	bl	80005c0 <__aeabi_f2uiz>
 8005774:	b282      	uxth	r2, r0
 8005776:	4908      	ldr	r1, [pc, #32]	; (8005798 <ADCReadCommand+0xb0>)
 8005778:	0020      	movs	r0, r4
 800577a:	f00f fb49 	bl	8014e10 <sprintf>
 800577e:	e7d5      	b.n	800572c <ADCReadCommand+0x44>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005780:	2212      	movs	r2, #18
 8005782:	4906      	ldr	r1, [pc, #24]	; (800579c <ADCReadCommand+0xb4>)
 8005784:	0020      	movs	r0, r4
 8005786:	f00f f90e 	bl	80149a6 <memcpy>
 800578a:	e7cf      	b.n	800572c <ADCReadCommand+0x44>
 800578c:	08019e30 	.word	0x08019e30
 8005790:	08019dbc 	.word	0x08019dbc
 8005794:	08019dc0 	.word	0x08019dc0
 8005798:	08019dc8 	.word	0x08019dc8
 800579c:	08019dd8 	.word	0x08019dd8

080057a0 <testportCommand>:
static portBASE_TYPE testportCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80057a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a2:	46d6      	mov	lr, sl
 80057a4:	4647      	mov	r7, r8
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b085      	sub	sp, #20
 80057aa:	0004      	movs	r4, r0
 80057ac:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	9303      	str	r3, [sp, #12]
	char WriteVaule[1] ="H";
 80057b2:	4b64      	ldr	r3, [pc, #400]	; (8005944 <testportCommand+0x1a4>)
 80057b4:	781a      	ldrb	r2, [r3, #0]
 80057b6:	ab02      	add	r3, sp, #8
 80057b8:	701a      	strb	r2, [r3, #0]
	configASSERT(pcWriteBuffer);
 80057ba:	2c00      	cmp	r4, #0
 80057bc:	d101      	bne.n	80057c2 <testportCommand+0x22>
 80057be:	b672      	cpsid	i
 80057c0:	e7fe      	b.n	80057c0 <testportCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80057c2:	aa03      	add	r2, sp, #12
 80057c4:	2101      	movs	r1, #1
 80057c6:	f009 fab7 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80057ca:	0005      	movs	r5, r0
	if(strcmp((char* )pcParameterString1,"all") == 0){
 80057cc:	495e      	ldr	r1, [pc, #376]	; (8005948 <testportCommand+0x1a8>)
 80057ce:	f7fa fc99 	bl	8000104 <strcmp>
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d177      	bne.n	80058c6 <testportCommand+0x126>
			LastEnter =UARTRxBufIndex[PcPort - 1];
 80057d6:	4b5d      	ldr	r3, [pc, #372]	; (800594c <testportCommand+0x1ac>)
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	4b5d      	ldr	r3, [pc, #372]	; (8005950 <testportCommand+0x1b0>)
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	3b01      	subs	r3, #1
 80057e0:	781e      	ldrb	r6, [r3, #0]
 80057e2:	2501      	movs	r5, #1
			if(PcPort != ports){
 80057e4:	4b59      	ldr	r3, [pc, #356]	; (800594c <testportCommand+0x1ac>)
 80057e6:	4698      	mov	r8, r3
 80057e8:	e015      	b.n	8005816 <testportCommand+0x76>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,ports);
 80057ea:	002a      	movs	r2, r5
 80057ec:	4959      	ldr	r1, [pc, #356]	; (8005954 <testportCommand+0x1b4>)
 80057ee:	0020      	movs	r0, r4
 80057f0:	f00f fb0e 	bl	8014e10 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 80057f4:	0020      	movs	r0, r4
 80057f6:	f7fa fc8f 	bl	8000118 <strlen>
 80057fa:	b282      	uxth	r2, r0
 80057fc:	4b53      	ldr	r3, [pc, #332]	; (800594c <testportCommand+0x1ac>)
 80057fe:	7818      	ldrb	r0, [r3, #0]
 8005800:	2364      	movs	r3, #100	; 0x64
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	3b5a      	subs	r3, #90	; 0x5a
 8005806:	0021      	movs	r1, r4
 8005808:	f009 f850 	bl	800e8ac <writePxMutex>
 800580c:	e02f      	b.n	800586e <testportCommand+0xce>
 800580e:	3501      	adds	r5, #1
		for(ports =1; ports <= NumOfPorts; ports++){
 8005810:	2d07      	cmp	r5, #7
 8005812:	d100      	bne.n	8005816 <testportCommand+0x76>
 8005814:	e083      	b.n	800591e <testportCommand+0x17e>
 8005816:	b2eb      	uxtb	r3, r5
 8005818:	469a      	mov	sl, r3
			if(PcPort != ports){
 800581a:	4643      	mov	r3, r8
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	4553      	cmp	r3, sl
 8005820:	d0f5      	beq.n	800580e <testportCommand+0x6e>
				WriteVaule[0] =rand();
 8005822:	f00f f8e1 	bl	80149e8 <rand>
 8005826:	af02      	add	r7, sp, #8
 8005828:	7038      	strb	r0, [r7, #0]
				writePxMutex(ports,WriteVaule,1,10,100);
 800582a:	2364      	movs	r3, #100	; 0x64
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	3b5a      	subs	r3, #90	; 0x5a
 8005830:	2201      	movs	r2, #1
 8005832:	0039      	movs	r1, r7
 8005834:	4650      	mov	r0, sl
 8005836:	f009 f839 	bl	800e8ac <writePxMutex>
				ReadValue[0] =(GetUart(ports)->Instance->RDR);
 800583a:	4650      	mov	r0, sl
 800583c:	f009 f814 	bl	800e868 <GetUart>
 8005840:	6803      	ldr	r3, [r0, #0]
 8005842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
				if(WriteVaule[0] == ReadValue[0])
 8005844:	783a      	ldrb	r2, [r7, #0]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	429a      	cmp	r2, r3
 800584a:	d0ce      	beq.n	80057ea <testportCommand+0x4a>
					sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,ports);
 800584c:	002a      	movs	r2, r5
 800584e:	4942      	ldr	r1, [pc, #264]	; (8005958 <testportCommand+0x1b8>)
 8005850:	0020      	movs	r0, r4
 8005852:	f00f fadd 	bl	8014e10 <sprintf>
					writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005856:	0020      	movs	r0, r4
 8005858:	f7fa fc5e 	bl	8000118 <strlen>
 800585c:	b282      	uxth	r2, r0
 800585e:	4b3b      	ldr	r3, [pc, #236]	; (800594c <testportCommand+0x1ac>)
 8005860:	7818      	ldrb	r0, [r3, #0]
 8005862:	2364      	movs	r3, #100	; 0x64
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	3b5a      	subs	r3, #90	; 0x5a
 8005868:	0021      	movs	r1, r4
 800586a:	f009 f81f 	bl	800e8ac <writePxMutex>
				strcpy((char* )pcWriteBuffer,(char* )pcMessageWait);
 800586e:	2254      	movs	r2, #84	; 0x54
 8005870:	493a      	ldr	r1, [pc, #232]	; (800595c <testportCommand+0x1bc>)
 8005872:	0020      	movs	r0, r4
 8005874:	f00f f897 	bl	80149a6 <memcpy>
				writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),10,100);
 8005878:	0020      	movs	r0, r4
 800587a:	f7fa fc4d 	bl	8000118 <strlen>
 800587e:	b282      	uxth	r2, r0
 8005880:	4b32      	ldr	r3, [pc, #200]	; (800594c <testportCommand+0x1ac>)
 8005882:	7818      	ldrb	r0, [r3, #0]
 8005884:	2364      	movs	r3, #100	; 0x64
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	3b5a      	subs	r3, #90	; 0x5a
 800588a:	0021      	movs	r1, r4
 800588c:	f009 f80e 	bl	800e8ac <writePxMutex>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 8005890:	3601      	adds	r6, #1
 8005892:	4b2e      	ldr	r3, [pc, #184]	; (800594c <testportCommand+0x1ac>)
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	3a01      	subs	r2, #1
 8005898:	0053      	lsls	r3, r2, #1
 800589a:	189b      	adds	r3, r3, r2
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	4a30      	ldr	r2, [pc, #192]	; (8005960 <testportCommand+0x1c0>)
 80058a0:	18d3      	adds	r3, r2, r3
 80058a2:	5d9b      	ldrb	r3, [r3, r6]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1b2      	bne.n	800580e <testportCommand+0x6e>
 80058a8:	4692      	mov	sl, r2
 80058aa:	4f28      	ldr	r7, [pc, #160]	; (800594c <testportCommand+0x1ac>)
					Delay_ms(1);
 80058ac:	2001      	movs	r0, #1
 80058ae:	f00b f955 	bl	8010b5c <HAL_Delay>
				while(UARTRxBuf[PcPort - 1][LastEnter + 1] == 0){
 80058b2:	783a      	ldrb	r2, [r7, #0]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	0053      	lsls	r3, r2, #1
 80058b8:	189b      	adds	r3, r3, r2
 80058ba:	019b      	lsls	r3, r3, #6
 80058bc:	4453      	add	r3, sl
 80058be:	5d9b      	ldrb	r3, [r3, r6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f3      	beq.n	80058ac <testportCommand+0x10c>
 80058c4:	e7a3      	b.n	800580e <testportCommand+0x6e>
	else if(pcParameterString1[0] == 'p'){
 80058c6:	2300      	movs	r3, #0
 80058c8:	56eb      	ldrsb	r3, [r5, r3]
 80058ca:	2b70      	cmp	r3, #112	; 0x70
 80058cc:	d005      	beq.n	80058da <testportCommand+0x13a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80058ce:	220f      	movs	r2, #15
 80058d0:	4924      	ldr	r1, [pc, #144]	; (8005964 <testportCommand+0x1c4>)
 80058d2:	0020      	movs	r0, r4
 80058d4:	f00f f867 	bl	80149a6 <memcpy>
 80058d8:	e021      	b.n	800591e <testportCommand+0x17e>
		portt =(uint8_t )atol((char* )pcParameterString1 + 1);
 80058da:	1c68      	adds	r0, r5, #1
 80058dc:	f00e fdd9 	bl	8014492 <atol>
 80058e0:	0005      	movs	r5, r0
 80058e2:	b2c7      	uxtb	r7, r0
		if(portt > 0 && portt <= NumOfPorts){
 80058e4:	1e7b      	subs	r3, r7, #1
 80058e6:	2b05      	cmp	r3, #5
 80058e8:	d825      	bhi.n	8005936 <testportCommand+0x196>
				WriteVaule[0] =rand();
 80058ea:	f00f f87d 	bl	80149e8 <rand>
 80058ee:	ae02      	add	r6, sp, #8
 80058f0:	7030      	strb	r0, [r6, #0]
				writePxMutex(portt,WriteVaule,1,cmd50ms,100);
 80058f2:	2364      	movs	r3, #100	; 0x64
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	3b32      	subs	r3, #50	; 0x32
 80058f8:	2201      	movs	r2, #1
 80058fa:	0031      	movs	r1, r6
 80058fc:	0038      	movs	r0, r7
 80058fe:	f008 ffd5 	bl	800e8ac <writePxMutex>
				ReadValue[0] =(GetUart(portt)->Instance->RDR);
 8005902:	0038      	movs	r0, r7
 8005904:	f008 ffb0 	bl	800e868 <GetUart>
 8005908:	6803      	ldr	r3, [r0, #0]
 800590a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
			if(WriteVaule[0] == ReadValue[0])
 800590c:	7832      	ldrb	r2, [r6, #0]
 800590e:	b2db      	uxtb	r3, r3
 8005910:	429a      	cmp	r2, r3
 8005912:	d10a      	bne.n	800592a <testportCommand+0x18a>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,portt);
 8005914:	b2ea      	uxtb	r2, r5
 8005916:	490f      	ldr	r1, [pc, #60]	; (8005954 <testportCommand+0x1b4>)
 8005918:	0020      	movs	r0, r4
 800591a:	f00f fa79 	bl	8014e10 <sprintf>
}
 800591e:	2000      	movs	r0, #0
 8005920:	b005      	add	sp, #20
 8005922:	bc0c      	pop	{r2, r3}
 8005924:	4690      	mov	r8, r2
 8005926:	469a      	mov	sl, r3
 8005928:	bdf0      	pop	{r4, r5, r6, r7, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageFail,portt);
 800592a:	b2ea      	uxtb	r2, r5
 800592c:	490a      	ldr	r1, [pc, #40]	; (8005958 <testportCommand+0x1b8>)
 800592e:	0020      	movs	r0, r4
 8005930:	f00f fa6e 	bl	8014e10 <sprintf>
 8005934:	e7f3      	b.n	800591e <testportCommand+0x17e>
			strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong1);
 8005936:	221b      	movs	r2, #27
 8005938:	490b      	ldr	r1, [pc, #44]	; (8005968 <testportCommand+0x1c8>)
 800593a:	0020      	movs	r0, r4
 800593c:	f00f f833 	bl	80149a6 <memcpy>
	return pdFALSE;
 8005940:	e7ed      	b.n	800591e <testportCommand+0x17e>
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	08019210 	.word	0x08019210
 8005948:	0801956c 	.word	0x0801956c
 800594c:	20000ae8 	.word	0x20000ae8
 8005950:	200017c8 	.word	0x200017c8
 8005954:	0801ba28 	.word	0x0801ba28
 8005958:	0801ba44 	.word	0x0801ba44
 800595c:	0801ba58 	.word	0x0801ba58
 8005960:	20001348 	.word	0x20001348
 8005964:	0801baac 	.word	0x0801baac
 8005968:	0801babc 	.word	0x0801babc

0800596c <unbridgeCommand>:
static portBASE_TYPE unbridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800596c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800596e:	b083      	sub	sp, #12
 8005970:	0004      	movs	r4, r0
 8005972:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005974:	2300      	movs	r3, #0
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 800597a:	2800      	cmp	r0, #0
 800597c:	d101      	bne.n	8005982 <unbridgeCommand+0x16>
 800597e:	b672      	cpsid	i
 8005980:	e7fe      	b.n	8005980 <unbridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005982:	aa01      	add	r2, sp, #4
 8005984:	2101      	movs	r1, #1
 8005986:	0028      	movs	r0, r5
 8005988:	f009 f9d6 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 800598c:	2300      	movs	r3, #0
 800598e:	56c3      	ldrsb	r3, [r0, r3]
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d00e      	beq.n	80059b2 <unbridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005994:	466a      	mov	r2, sp
 8005996:	2102      	movs	r1, #2
 8005998:	0028      	movs	r0, r5
 800599a:	f009 f9cd 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 800599e:	2300      	movs	r3, #0
 80059a0:	56c3      	ldrsb	r3, [r0, r3]
 80059a2:	2b70      	cmp	r3, #112	; 0x70
 80059a4:	d01e      	beq.n	80059e4 <unbridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 80059a6:	220f      	movs	r2, #15
 80059a8:	491a      	ldr	r1, [pc, #104]	; (8005a14 <unbridgeCommand+0xa8>)
 80059aa:	0020      	movs	r0, r4
 80059ac:	f00e fffb 	bl	80149a6 <memcpy>
 80059b0:	e015      	b.n	80059de <unbridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 80059b2:	3001      	adds	r0, #1
 80059b4:	f00e fd6d 	bl	8014492 <atol>
 80059b8:	0006      	movs	r6, r0
 80059ba:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80059bc:	466a      	mov	r2, sp
 80059be:	2102      	movs	r1, #2
 80059c0:	0028      	movs	r0, r5
 80059c2:	f009 f9b9 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 80059c6:	2300      	movs	r3, #0
 80059c8:	56c3      	ldrsb	r3, [r0, r3]
 80059ca:	2b70      	cmp	r3, #112	; 0x70
 80059cc:	d00e      	beq.n	80059ec <unbridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 80059ce:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 80059d0:	2867      	cmp	r0, #103	; 0x67
 80059d2:	d0e8      	beq.n	80059a6 <unbridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 80059d4:	2219      	movs	r2, #25
 80059d6:	4910      	ldr	r1, [pc, #64]	; (8005a18 <unbridgeCommand+0xac>)
 80059d8:	0020      	movs	r0, r4
 80059da:	f00e ffe4 	bl	80149a6 <memcpy>
}
 80059de:	2000      	movs	r0, #0
 80059e0:	b003      	add	sp, #12
 80059e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 80059e4:	3001      	adds	r0, #1
 80059e6:	f00e fd54 	bl	8014492 <atol>
 80059ea:	e7dc      	b.n	80059a6 <unbridgeCommand+0x3a>
 80059ec:	3001      	adds	r0, #1
 80059ee:	f00e fd50 	bl	8014492 <atol>
 80059f2:	0005      	movs	r5, r0
		result =Unbridge(port1,port2);
 80059f4:	b2c1      	uxtb	r1, r0
 80059f6:	0038      	movs	r0, r7
 80059f8:	f7fe fea8 	bl	800474c <Unbridge>
	if(result == BOS_OK)
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d1e7      	bne.n	80059d0 <unbridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005a00:	22ff      	movs	r2, #255	; 0xff
 8005a02:	002b      	movs	r3, r5
 8005a04:	4013      	ands	r3, r2
 8005a06:	4032      	ands	r2, r6
 8005a08:	4904      	ldr	r1, [pc, #16]	; (8005a1c <unbridgeCommand+0xb0>)
 8005a0a:	0020      	movs	r0, r4
 8005a0c:	f00f fa00 	bl	8014e10 <sprintf>
 8005a10:	e7e5      	b.n	80059de <unbridgeCommand+0x72>
 8005a12:	46c0      	nop			; (mov r8, r8)
 8005a14:	0801baac 	.word	0x0801baac
 8005a18:	0801bb74 	.word	0x0801bb74
 8005a1c:	0801bb54 	.word	0x0801bb54

08005a20 <bridgeCommand>:
static portBASE_TYPE bridgeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	b083      	sub	sp, #12
 8005a24:	0004      	movs	r4, r0
 8005a26:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d101      	bne.n	8005a36 <bridgeCommand+0x16>
 8005a32:	b672      	cpsid	i
 8005a34:	e7fe      	b.n	8005a34 <bridgeCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005a36:	aa01      	add	r2, sp, #4
 8005a38:	2101      	movs	r1, #1
 8005a3a:	0028      	movs	r0, r5
 8005a3c:	f009 f97c 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8005a40:	2300      	movs	r3, #0
 8005a42:	56c3      	ldrsb	r3, [r0, r3]
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d00e      	beq.n	8005a66 <bridgeCommand+0x46>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a48:	466a      	mov	r2, sp
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	0028      	movs	r0, r5
 8005a4e:	f009 f973 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a52:	2300      	movs	r3, #0
 8005a54:	56c3      	ldrsb	r3, [r0, r3]
 8005a56:	2b70      	cmp	r3, #112	; 0x70
 8005a58:	d01e      	beq.n	8005a98 <bridgeCommand+0x78>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005a5a:	220f      	movs	r2, #15
 8005a5c:	491a      	ldr	r1, [pc, #104]	; (8005ac8 <bridgeCommand+0xa8>)
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f00e ffa1 	bl	80149a6 <memcpy>
 8005a64:	e015      	b.n	8005a92 <bridgeCommand+0x72>
		port1 =(uint8_t )atol((char* )pcParameterString1 + 1);
 8005a66:	3001      	adds	r0, #1
 8005a68:	f00e fd13 	bl	8014492 <atol>
 8005a6c:	0006      	movs	r6, r0
 8005a6e:	b2c7      	uxtb	r7, r0
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8005a70:	466a      	mov	r2, sp
 8005a72:	2102      	movs	r1, #2
 8005a74:	0028      	movs	r0, r5
 8005a76:	f009 f95f 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	56c3      	ldrsb	r3, [r0, r3]
 8005a7e:	2b70      	cmp	r3, #112	; 0x70
 8005a80:	d00e      	beq.n	8005aa0 <bridgeCommand+0x80>
		result =BOS_ERR_WrongParam;
 8005a82:	2067      	movs	r0, #103	; 0x67
	else if(result == BOS_ERR_WrongParam)
 8005a84:	2867      	cmp	r0, #103	; 0x67
 8005a86:	d0e8      	beq.n	8005a5a <bridgeCommand+0x3a>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageFail);
 8005a88:	2217      	movs	r2, #23
 8005a8a:	4910      	ldr	r1, [pc, #64]	; (8005acc <bridgeCommand+0xac>)
 8005a8c:	0020      	movs	r0, r4
 8005a8e:	f00e ff8a 	bl	80149a6 <memcpy>
}
 8005a92:	2000      	movs	r0, #0
 8005a94:	b003      	add	sp, #12
 8005a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port2 =(uint8_t )atol((char* )pcParameterString2 + 1);
 8005a98:	3001      	adds	r0, #1
 8005a9a:	f00e fcfa 	bl	8014492 <atol>
 8005a9e:	e7dc      	b.n	8005a5a <bridgeCommand+0x3a>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f00e fcf6 	bl	8014492 <atol>
 8005aa6:	0005      	movs	r5, r0
		result =Bridge(port1,port2);
 8005aa8:	b2c1      	uxtb	r1, r0
 8005aaa:	0038      	movs	r0, r7
 8005aac:	f7fe fe3a 	bl	8004724 <Bridge>
	if(result == BOS_OK)
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d1e7      	bne.n	8005a84 <bridgeCommand+0x64>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,port1,port2);
 8005ab4:	22ff      	movs	r2, #255	; 0xff
 8005ab6:	002b      	movs	r3, r5
 8005ab8:	4013      	ands	r3, r2
 8005aba:	4032      	ands	r2, r6
 8005abc:	4904      	ldr	r1, [pc, #16]	; (8005ad0 <bridgeCommand+0xb0>)
 8005abe:	0020      	movs	r0, r4
 8005ac0:	f00f f9a6 	bl	8014e10 <sprintf>
 8005ac4:	e7e5      	b.n	8005a92 <bridgeCommand+0x72>
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	0801baac 	.word	0x0801baac
 8005acc:	08019fd0 	.word	0x08019fd0
 8005ad0:	08019fac 	.word	0x08019fac

08005ad4 <delSnipCommand>:
static portBASE_TYPE delSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	0005      	movs	r5, r0
 8005ada:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	9303      	str	r3, [sp, #12]
	configASSERT(pcWriteBuffer);
 8005ae0:	2d00      	cmp	r5, #0
 8005ae2:	d101      	bne.n	8005ae8 <delSnipCommand+0x14>
 8005ae4:	b672      	cpsid	i
 8005ae6:	e7fe      	b.n	8005ae6 <delSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005ae8:	aa03      	add	r2, sp, #12
 8005aea:	2101      	movs	r1, #1
 8005aec:	f009 f924 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005af0:	f00e fcc9 	bl	8014486 <atoi>
 8005af4:	9001      	str	r0, [sp, #4]
 8005af6:	b2c6      	uxtb	r6, r0
	if(!index || index > numOfRecordedSnippets)
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	d003      	beq.n	8005b04 <delSnipCommand+0x30>
 8005afc:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <delSnipCommand+0xc8>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	42b3      	cmp	r3, r6
 8005b02:	d207      	bcs.n	8005b14 <delSnipCommand+0x40>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005b04:	2223      	movs	r2, #35	; 0x23
 8005b06:	4926      	ldr	r1, [pc, #152]	; (8005ba0 <delSnipCommand+0xcc>)
 8005b08:	0028      	movs	r0, r5
 8005b0a:	f00e ff4c 	bl	80149a6 <memcpy>
}
 8005b0e:	2000      	movs	r0, #0
 8005b10:	b005      	add	sp, #20
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
		snippets[index - 1].cond.conditionType =0;
 8005b14:	466b      	mov	r3, sp
 8005b16:	791a      	ldrb	r2, [r3, #4]
 8005b18:	3a01      	subs	r2, #1
 8005b1a:	4822      	ldr	r0, [pc, #136]	; (8005ba4 <delSnipCommand+0xd0>)
 8005b1c:	2314      	movs	r3, #20
 8005b1e:	4353      	muls	r3, r2
 8005b20:	2700      	movs	r7, #0
 8005b22:	541f      	strb	r7, [r3, r0]
		snippets[index - 1].cond.mathOperator =0;
 8005b24:	18c4      	adds	r4, r0, r3
 8005b26:	7067      	strb	r7, [r4, #1]
		memset(snippets[index - 1].cond.buffer1,0,4);
 8005b28:	3302      	adds	r3, #2
 8005b2a:	1818      	adds	r0, r3, r0
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	0039      	movs	r1, r7
 8005b30:	f00e ff42 	bl	80149b8 <memset>
		snippets[index - 1].state = false;
 8005b34:	7427      	strb	r7, [r4, #16]
		free(snippets[index - 1].cmd);
 8005b36:	68e0      	ldr	r0, [r4, #12]
 8005b38:	f00e fcf2 	bl	8014520 <free>
		snippets[index - 1].cmd = NULL;
 8005b3c:	60e7      	str	r7, [r4, #12]
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b3e:	4b17      	ldr	r3, [pc, #92]	; (8005b9c <delSnipCommand+0xc8>)
 8005b40:	781f      	ldrb	r7, [r3, #0]
 8005b42:	42be      	cmp	r6, r7
 8005b44:	d213      	bcs.n	8005b6e <delSnipCommand+0x9a>
 8005b46:	466b      	mov	r3, sp
 8005b48:	7919      	ldrb	r1, [r3, #4]
 8005b4a:	2214      	movs	r2, #20
 8005b4c:	0014      	movs	r4, r2
 8005b4e:	434c      	muls	r4, r1
 8005b50:	4814      	ldr	r0, [pc, #80]	; (8005ba4 <delSnipCommand+0xd0>)
 8005b52:	1824      	adds	r4, r4, r0
 8005b54:	1e7b      	subs	r3, r7, #1
 8005b56:	1b9b      	subs	r3, r3, r6
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	185b      	adds	r3, r3, r1
 8005b5c:	4353      	muls	r3, r2
 8005b5e:	1880      	adds	r0, r0, r2
 8005b60:	181e      	adds	r6, r3, r0
			if(snippets[s].cond.conditionType){
 8005b62:	7823      	ldrb	r3, [r4, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10d      	bne.n	8005b84 <delSnipCommand+0xb0>
 8005b68:	3414      	adds	r4, #20
		for(uint8_t s =index; s < numOfRecordedSnippets; s++){
 8005b6a:	42b4      	cmp	r4, r6
 8005b6c:	d1f9      	bne.n	8005b62 <delSnipCommand+0x8e>
		--numOfRecordedSnippets;
 8005b6e:	1e7b      	subs	r3, r7, #1
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <delSnipCommand+0xc8>)
 8005b72:	7013      	strb	r3, [r2, #0]
		SaveToRO();
 8005b74:	f006 fe18 	bl	800c7a8 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005b78:	2236      	movs	r2, #54	; 0x36
 8005b7a:	490b      	ldr	r1, [pc, #44]	; (8005ba8 <delSnipCommand+0xd4>)
 8005b7c:	0028      	movs	r0, r5
 8005b7e:	f00e ff12 	bl	80149a6 <memcpy>
 8005b82:	e7c4      	b.n	8005b0e <delSnipCommand+0x3a>
				memcpy(&snippets[s - 1],&snippets[s],sizeof(snippet_t));
 8005b84:	2214      	movs	r2, #20
 8005b86:	0021      	movs	r1, r4
 8005b88:	0020      	movs	r0, r4
 8005b8a:	3814      	subs	r0, #20
 8005b8c:	f00e ff0b 	bl	80149a6 <memcpy>
				memset(&snippets[s],0,sizeof(snippet_t));
 8005b90:	2214      	movs	r2, #20
 8005b92:	2100      	movs	r1, #0
 8005b94:	0020      	movs	r0, r4
 8005b96:	f00e ff0f 	bl	80149b8 <memset>
 8005b9a:	e7e5      	b.n	8005b68 <delSnipCommand+0x94>
 8005b9c:	20001297 	.word	0x20001297
 8005ba0:	0801a0f0 	.word	0x0801a0f0
 8005ba4:	20006e70 	.word	0x20006e70
 8005ba8:	0801a0b8 	.word	0x0801a0b8

08005bac <pauseSnipCommand>:
static portBASE_TYPE pauseSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005bac:	b510      	push	{r4, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	0004      	movs	r4, r0
 8005bb2:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005bb8:	2c00      	cmp	r4, #0
 8005bba:	d101      	bne.n	8005bc0 <pauseSnipCommand+0x14>
 8005bbc:	b672      	cpsid	i
 8005bbe:	e7fe      	b.n	8005bbe <pauseSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005bc0:	aa01      	add	r2, sp, #4
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	f009 f8b8 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005bc8:	f00e fc5d 	bl	8014486 <atoi>
 8005bcc:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <pauseSnipCommand+0x2e>
 8005bd2:	4a0e      	ldr	r2, [pc, #56]	; (8005c0c <pauseSnipCommand+0x60>)
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d207      	bcs.n	8005bea <pauseSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005bda:	2223      	movs	r2, #35	; 0x23
 8005bdc:	490c      	ldr	r1, [pc, #48]	; (8005c10 <pauseSnipCommand+0x64>)
 8005bde:	0020      	movs	r0, r4
 8005be0:	f00e fee1 	bl	80149a6 <memcpy>
}
 8005be4:	2000      	movs	r0, #0
 8005be6:	b002      	add	sp, #8
 8005be8:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = false;
 8005bea:	b2c0      	uxtb	r0, r0
 8005bec:	3801      	subs	r0, #1
 8005bee:	2314      	movs	r3, #20
 8005bf0:	4343      	muls	r3, r0
 8005bf2:	4808      	ldr	r0, [pc, #32]	; (8005c14 <pauseSnipCommand+0x68>)
 8005bf4:	18c0      	adds	r0, r0, r3
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005bfa:	f006 fdd5 	bl	800c7a8 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005bfe:	2235      	movs	r2, #53	; 0x35
 8005c00:	4905      	ldr	r1, [pc, #20]	; (8005c18 <pauseSnipCommand+0x6c>)
 8005c02:	0020      	movs	r0, r4
 8005c04:	f00e fecf 	bl	80149a6 <memcpy>
 8005c08:	e7ec      	b.n	8005be4 <pauseSnipCommand+0x38>
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	20001297 	.word	0x20001297
 8005c10:	0801a0f0 	.word	0x0801a0f0
 8005c14:	20006e70 	.word	0x20006e70
 8005c18:	0801a500 	.word	0x0801a500

08005c1c <actSnipCommand>:
static portBASE_TYPE actSnipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c1c:	b510      	push	{r4, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	0004      	movs	r4, r0
 8005c22:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8005c28:	2c00      	cmp	r4, #0
 8005c2a:	d101      	bne.n	8005c30 <actSnipCommand+0x14>
 8005c2c:	b672      	cpsid	i
 8005c2e:	e7fe      	b.n	8005c2e <actSnipCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8005c30:	aa01      	add	r2, sp, #4
 8005c32:	2101      	movs	r1, #1
 8005c34:	f009 f880 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	uint8_t index =(uint8_t )atoi((char* )pcParameterString1);
 8005c38:	f00e fc25 	bl	8014486 <atoi>
 8005c3c:	b2c3      	uxtb	r3, r0
	if(!index || index > numOfRecordedSnippets)
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <actSnipCommand+0x2e>
 8005c42:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <actSnipCommand+0x60>)
 8005c44:	7812      	ldrb	r2, [r2, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d207      	bcs.n	8005c5a <actSnipCommand+0x3e>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrong);
 8005c4a:	2223      	movs	r2, #35	; 0x23
 8005c4c:	490c      	ldr	r1, [pc, #48]	; (8005c80 <actSnipCommand+0x64>)
 8005c4e:	0020      	movs	r0, r4
 8005c50:	f00e fea9 	bl	80149a6 <memcpy>
}
 8005c54:	2000      	movs	r0, #0
 8005c56:	b002      	add	sp, #8
 8005c58:	bd10      	pop	{r4, pc}
		snippets[index - 1].state = true;
 8005c5a:	b2c0      	uxtb	r0, r0
 8005c5c:	3801      	subs	r0, #1
 8005c5e:	2314      	movs	r3, #20
 8005c60:	4343      	muls	r3, r0
 8005c62:	4808      	ldr	r0, [pc, #32]	; (8005c84 <actSnipCommand+0x68>)
 8005c64:	18c0      	adds	r0, r0, r3
 8005c66:	2301      	movs	r3, #1
 8005c68:	7403      	strb	r3, [r0, #16]
		SaveToRO();
 8005c6a:	f006 fd9d 	bl	800c7a8 <SaveToRO>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOK);
 8005c6e:	2238      	movs	r2, #56	; 0x38
 8005c70:	4905      	ldr	r1, [pc, #20]	; (8005c88 <actSnipCommand+0x6c>)
 8005c72:	0020      	movs	r0, r4
 8005c74:	f00e fe97 	bl	80149a6 <memcpy>
 8005c78:	e7ec      	b.n	8005c54 <actSnipCommand+0x38>
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	20001297 	.word	0x20001297
 8005c80:	0801a0f0 	.word	0x0801a0f0
 8005c84:	20006e70 	.word	0x20006e70
 8005c88:	08019eb4 	.word	0x08019eb4

08005c8c <snipCommand>:
static portBASE_TYPE snipCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8e:	46d6      	mov	lr, sl
 8005c90:	464f      	mov	r7, r9
 8005c92:	4646      	mov	r6, r8
 8005c94:	b5c0      	push	{r6, r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	0004      	movs	r4, r0
	char status[2][7] ={"Paused", "Active"};
 8005c9a:	aa06      	add	r2, sp, #24
 8005c9c:	4b7a      	ldr	r3, [pc, #488]	; (8005e88 <snipCommand+0x1fc>)
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005ca2:	c223      	stmia	r2!, {r0, r1, r5}
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	8013      	strh	r3, [r2, #0]
	configASSERT(pcWriteBuffer);
 8005ca8:	2c00      	cmp	r4, #0
 8005caa:	d101      	bne.n	8005cb0 <snipCommand+0x24>
 8005cac:	b672      	cpsid	i
 8005cae:	e7fe      	b.n	8005cae <snipCommand+0x22>
	writePxMutex(PcPort,(char* )pcMessageSnipWelcome,strlen((char* )pcMessageSnipWelcome),cmd50ms,HAL_MAX_DELAY);
 8005cb0:	4b76      	ldr	r3, [pc, #472]	; (8005e8c <snipCommand+0x200>)
 8005cb2:	7818      	ldrb	r0, [r3, #0]
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	425b      	negs	r3, r3
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	3333      	adds	r3, #51	; 0x33
 8005cbc:	2237      	movs	r2, #55	; 0x37
 8005cbe:	4974      	ldr	r1, [pc, #464]	; (8005e90 <snipCommand+0x204>)
 8005cc0:	f008 fdf4 	bl	800e8ac <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005cc4:	4b73      	ldr	r3, [pc, #460]	; (8005e94 <snipCommand+0x208>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d100      	bne.n	8005cce <snipCommand+0x42>
 8005ccc:	e0d0      	b.n	8005e70 <snipCommand+0x1e4>
 8005cce:	2500      	movs	r5, #0
		if(snippets[s].cond.conditionType)
 8005cd0:	4b71      	ldr	r3, [pc, #452]	; (8005e98 <snipCommand+0x20c>)
 8005cd2:	4698      	mov	r8, r3
 8005cd4:	e0ba      	b.n	8005e4c <snipCommand+0x1c0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipStart,count,status[snippets[s].state]);
 8005cd6:	4b70      	ldr	r3, [pc, #448]	; (8005e98 <snipCommand+0x20c>)
 8005cd8:	4699      	mov	r9, r3
 8005cda:	00ab      	lsls	r3, r5, #2
 8005cdc:	469a      	mov	sl, r3
 8005cde:	195b      	adds	r3, r3, r5
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	444b      	add	r3, r9
 8005ce4:	7c1a      	ldrb	r2, [r3, #16]
 8005ce6:	00d3      	lsls	r3, r2, #3
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	aa06      	add	r2, sp, #24
 8005cec:	4694      	mov	ip, r2
 8005cee:	4463      	add	r3, ip
 8005cf0:	003a      	movs	r2, r7
 8005cf2:	496a      	ldr	r1, [pc, #424]	; (8005e9c <snipCommand+0x210>)
 8005cf4:	0020      	movs	r0, r4
 8005cf6:	f00f f88b 	bl	8014e10 <sprintf>
		switch(snippets[s].cond.conditionType){
 8005cfa:	4653      	mov	r3, sl
 8005cfc:	195b      	adds	r3, r3, r5
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	464a      	mov	r2, r9
 8005d02:	5c9b      	ldrb	r3, [r3, r2]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d02d      	beq.n	8005d64 <snipCommand+0xd8>
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d000      	beq.n	8005d0e <snipCommand+0x82>
 8005d0c:	e0a9      	b.n	8005e62 <snipCommand+0x1d6>
				memcpy((uint8_t* )&flt1,&snippets[s].cond.buffer2,sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005d0e:	00a9      	lsls	r1, r5, #2
 8005d10:	1949      	adds	r1, r1, r5
 8005d12:	0089      	lsls	r1, r1, #2
 8005d14:	3106      	adds	r1, #6
 8005d16:	4b60      	ldr	r3, [pc, #384]	; (8005e98 <snipCommand+0x20c>)
 8005d18:	4699      	mov	r9, r3
 8005d1a:	4449      	add	r1, r9
 8005d1c:	2204      	movs	r2, #4
 8005d1e:	a805      	add	r0, sp, #20
 8005d20:	f00e fe41 	bl	80149a6 <memcpy>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipModuleParamConst,(char* )pcWriteBuffer,modParam[snippets[s].cond.buffer1[1] - 1].paramName,mathStr[snippets[s].cond.mathOperator - 1],flt1);
 8005d24:	00ad      	lsls	r5, r5, #2
 8005d26:	19ad      	adds	r5, r5, r6
 8005d28:	00ad      	lsls	r5, r5, #2
 8005d2a:	444d      	add	r5, r9
 8005d2c:	78ea      	ldrb	r2, [r5, #3]
 8005d2e:	3a01      	subs	r2, #1
 8005d30:	0053      	lsls	r3, r2, #1
 8005d32:	189b      	adds	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a5a      	ldr	r2, [pc, #360]	; (8005ea0 <snipCommand+0x214>)
 8005d38:	18d3      	adds	r3, r2, r3
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	4699      	mov	r9, r3
 8005d3e:	9805      	ldr	r0, [sp, #20]
 8005d40:	f7fc fef0 	bl	8002b24 <__aeabi_f2d>
 8005d44:	9002      	str	r0, [sp, #8]
 8005d46:	9103      	str	r1, [sp, #12]
 8005d48:	786b      	ldrb	r3, [r5, #1]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	005a      	lsls	r2, r3, #1
 8005d4e:	18d2      	adds	r2, r2, r3
 8005d50:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <snipCommand+0x218>)
 8005d52:	189b      	adds	r3, r3, r2
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	464b      	mov	r3, r9
 8005d58:	0022      	movs	r2, r4
 8005d5a:	4953      	ldr	r1, [pc, #332]	; (8005ea8 <snipCommand+0x21c>)
 8005d5c:	0020      	movs	r0, r4
 8005d5e:	f00f f857 	bl	8014e10 <sprintf>
				break;
 8005d62:	e07e      	b.n	8005e62 <snipCommand+0x1d6>
				switch(snippets[s].cond.buffer1[1]){
 8005d64:	00ab      	lsls	r3, r5, #2
 8005d66:	195b      	adds	r3, r3, r5
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4a4b      	ldr	r2, [pc, #300]	; (8005e98 <snipCommand+0x20c>)
 8005d6c:	18d3      	adds	r3, r2, r3
 8005d6e:	78db      	ldrb	r3, [r3, #3]
 8005d70:	3b05      	subs	r3, #5
 8005d72:	b2da      	uxtb	r2, r3
 8005d74:	2a09      	cmp	r2, #9
 8005d76:	d874      	bhi.n	8005e62 <snipCommand+0x1d6>
 8005d78:	0093      	lsls	r3, r2, #2
 8005d7a:	4a4c      	ldr	r2, [pc, #304]	; (8005eac <snipCommand+0x220>)
 8005d7c:	58d3      	ldr	r3, [r2, r3]
 8005d7e:	469f      	mov	pc, r3
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d80:	2314      	movs	r3, #20
 8005d82:	436b      	muls	r3, r5
 8005d84:	4a44      	ldr	r2, [pc, #272]	; (8005e98 <snipCommand+0x20c>)
 8005d86:	18d2      	adds	r2, r2, r3
 8005d88:	7893      	ldrb	r3, [r2, #2]
 8005d8a:	68d2      	ldr	r2, [r2, #12]
 8005d8c:	9200      	str	r2, [sp, #0]
 8005d8e:	0022      	movs	r2, r4
 8005d90:	4947      	ldr	r1, [pc, #284]	; (8005eb0 <snipCommand+0x224>)
 8005d92:	0020      	movs	r0, r4
 8005d94:	f00f f83c 	bl	8014e10 <sprintf>
						break;
 8005d98:	e063      	b.n	8005e62 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventDblClicked,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cmd);
 8005d9a:	2314      	movs	r3, #20
 8005d9c:	436b      	muls	r3, r5
 8005d9e:	4a3e      	ldr	r2, [pc, #248]	; (8005e98 <snipCommand+0x20c>)
 8005da0:	18d2      	adds	r2, r2, r3
 8005da2:	7893      	ldrb	r3, [r2, #2]
 8005da4:	68d2      	ldr	r2, [r2, #12]
 8005da6:	9200      	str	r2, [sp, #0]
 8005da8:	0022      	movs	r2, r4
 8005daa:	4942      	ldr	r1, [pc, #264]	; (8005eb4 <snipCommand+0x228>)
 8005dac:	0020      	movs	r0, r4
 8005dae:	f00f f82f 	bl	8014e10 <sprintf>
						break;
 8005db2:	e056      	b.n	8005e62 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventPressed,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005db4:	2314      	movs	r3, #20
 8005db6:	436b      	muls	r3, r5
 8005db8:	4a37      	ldr	r2, [pc, #220]	; (8005e98 <snipCommand+0x20c>)
 8005dba:	18d2      	adds	r2, r2, r3
 8005dbc:	7893      	ldrb	r3, [r2, #2]
 8005dbe:	68d1      	ldr	r1, [r2, #12]
 8005dc0:	9101      	str	r1, [sp, #4]
 8005dc2:	7912      	ldrb	r2, [r2, #4]
 8005dc4:	9200      	str	r2, [sp, #0]
 8005dc6:	0022      	movs	r2, r4
 8005dc8:	493b      	ldr	r1, [pc, #236]	; (8005eb8 <snipCommand+0x22c>)
 8005dca:	0020      	movs	r0, r4
 8005dcc:	f00f f820 	bl	8014e10 <sprintf>
						break;
 8005dd0:	e047      	b.n	8005e62 <snipCommand+0x1d6>
						sprintf((char* )pcWriteBuffer,(char* )pcMessageSnipButtonEventReleased,(char* )pcWriteBuffer,snippets[s].cond.buffer1[0],snippets[s].cond.buffer1[2],snippets[s].cmd);
 8005dd2:	2314      	movs	r3, #20
 8005dd4:	436b      	muls	r3, r5
 8005dd6:	4a30      	ldr	r2, [pc, #192]	; (8005e98 <snipCommand+0x20c>)
 8005dd8:	18d2      	adds	r2, r2, r3
 8005dda:	7893      	ldrb	r3, [r2, #2]
 8005ddc:	68d1      	ldr	r1, [r2, #12]
 8005dde:	9101      	str	r1, [sp, #4]
 8005de0:	7912      	ldrb	r2, [r2, #4]
 8005de2:	9200      	str	r2, [sp, #0]
 8005de4:	0022      	movs	r2, r4
 8005de6:	4935      	ldr	r1, [pc, #212]	; (8005ebc <snipCommand+0x230>)
 8005de8:	0020      	movs	r0, r4
 8005dea:	f00f f811 	bl	8014e10 <sprintf>
						break;
 8005dee:	e038      	b.n	8005e62 <snipCommand+0x1d6>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageCmds,pcWriteBuffer,commands);
 8005df0:	4b33      	ldr	r3, [pc, #204]	; (8005ec0 <snipCommand+0x234>)
 8005df2:	0022      	movs	r2, r4
 8005df4:	4933      	ldr	r1, [pc, #204]	; (8005ec4 <snipCommand+0x238>)
 8005df6:	0020      	movs	r0, r4
 8005df8:	f00f f80a 	bl	8014e10 <sprintf>
			memset(&commands,0x00,strlen((char* )commands));
 8005dfc:	4830      	ldr	r0, [pc, #192]	; (8005ec0 <snipCommand+0x234>)
 8005dfe:	f7fa f98b 	bl	8000118 <strlen>
 8005e02:	0002      	movs	r2, r0
 8005e04:	2100      	movs	r1, #0
 8005e06:	482e      	ldr	r0, [pc, #184]	; (8005ec0 <snipCommand+0x234>)
 8005e08:	f00e fdd6 	bl	80149b8 <memset>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e0c:	0029      	movs	r1, r5
 8005e0e:	68f0      	ldr	r0, [r6, #12]
 8005e10:	f7ff fa90 	bl	8005334 <ParseSnippetCommand>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1eb      	bne.n	8005df0 <snipCommand+0x164>
		strcat((char* )pcWriteBuffer,(char* )pcMessageEnd);
 8005e18:	0020      	movs	r0, r4
 8005e1a:	f7fa f97d 	bl	8000118 <strlen>
 8005e1e:	1820      	adds	r0, r4, r0
 8005e20:	220c      	movs	r2, #12
 8005e22:	4929      	ldr	r1, [pc, #164]	; (8005ec8 <snipCommand+0x23c>)
 8005e24:	f00e fdbf 	bl	80149a6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8005e28:	0020      	movs	r0, r4
 8005e2a:	f7fa f975 	bl	8000118 <strlen>
 8005e2e:	b282      	uxth	r2, r0
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <snipCommand+0x200>)
 8005e32:	7818      	ldrb	r0, [r3, #0]
 8005e34:	2301      	movs	r3, #1
 8005e36:	425b      	negs	r3, r3
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	3333      	adds	r3, #51	; 0x33
 8005e3c:	0021      	movs	r1, r4
 8005e3e:	f008 fd35 	bl	800e8ac <writePxMutex>
	for(uint8_t s =0; s < numOfRecordedSnippets; s++){
 8005e42:	003d      	movs	r5, r7
 8005e44:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <snipCommand+0x208>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	42bb      	cmp	r3, r7
 8005e4a:	d911      	bls.n	8005e70 <snipCommand+0x1e4>
 8005e4c:	1c6f      	adds	r7, r5, #1
 8005e4e:	b2ff      	uxtb	r7, r7
		if(snippets[s].cond.conditionType)
 8005e50:	002e      	movs	r6, r5
 8005e52:	00ab      	lsls	r3, r5, #2
 8005e54:	195b      	adds	r3, r3, r5
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4642      	mov	r2, r8
 8005e5a:	5c9b      	ldrb	r3, [r3, r2]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d000      	beq.n	8005e62 <snipCommand+0x1d6>
 8005e60:	e739      	b.n	8005cd6 <snipCommand+0x4a>
		while(ParseSnippetCommand(snippets[s].cmd,(int8_t* )&commands) != false){
 8005e62:	4d17      	ldr	r5, [pc, #92]	; (8005ec0 <snipCommand+0x234>)
 8005e64:	00b3      	lsls	r3, r6, #2
 8005e66:	199b      	adds	r3, r3, r6
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4e0b      	ldr	r6, [pc, #44]	; (8005e98 <snipCommand+0x20c>)
 8005e6c:	18f6      	adds	r6, r6, r3
 8005e6e:	e7cd      	b.n	8005e0c <snipCommand+0x180>
	strcpy((char* )pcWriteBuffer,(char* )pcMessageSnipAction);
 8005e70:	22b5      	movs	r2, #181	; 0xb5
 8005e72:	4916      	ldr	r1, [pc, #88]	; (8005ecc <snipCommand+0x240>)
 8005e74:	0020      	movs	r0, r4
 8005e76:	f00e fd96 	bl	80149a6 <memcpy>
}
 8005e7a:	2000      	movs	r0, #0
 8005e7c:	b00a      	add	sp, #40	; 0x28
 8005e7e:	bc1c      	pop	{r2, r3, r4}
 8005e80:	4690      	mov	r8, r2
 8005e82:	4699      	mov	r9, r3
 8005e84:	46a2      	mov	sl, r4
 8005e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e88:	08019210 	.word	0x08019210
 8005e8c:	20000ae8 	.word	0x20000ae8
 8005e90:	0801a994 	.word	0x0801a994
 8005e94:	20001297 	.word	0x20001297
 8005e98:	20006e70 	.word	0x20006e70
 8005e9c:	0801a9cc 	.word	0x0801a9cc
 8005ea0:	200000ac 	.word	0x200000ac
 8005ea4:	0801a4c4 	.word	0x0801a4c4
 8005ea8:	0801aa38 	.word	0x0801aa38
 8005eac:	08019d70 	.word	0x08019d70
 8005eb0:	0801a9d8 	.word	0x0801a9d8
 8005eb4:	0801a9ec 	.word	0x0801a9ec
 8005eb8:	0801aa04 	.word	0x0801aa04
 8005ebc:	0801aa1c 	.word	0x0801aa1c
 8005ec0:	200012c8 	.word	0x200012c8
 8005ec4:	0801aa48 	.word	0x0801aa48
 8005ec8:	0801aa50 	.word	0x0801aa50
 8005ecc:	0801aa5c 	.word	0x0801aa5c

08005ed0 <idcodeCommand>:
static portBASE_TYPE idcodeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005ed0:	b510      	push	{r4, lr}
 8005ed2:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005ed4:	d101      	bne.n	8005eda <idcodeCommand+0xa>
 8005ed6:	b672      	cpsid	i
 8005ed8:	e7fe      	b.n	8005ed8 <idcodeCommand+0x8>
	dev =HAL_GetDEVID();
 8005eda:	f00a fe53 	bl	8010b84 <HAL_GetDEVID>
	switch(dev){
 8005ede:	0403      	lsls	r3, r0, #16
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <idcodeCommand+0x80>)
 8005ee4:	4694      	mov	ip, r2
 8005ee6:	4463      	add	r3, ip
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d82a      	bhi.n	8005f42 <idcodeCommand+0x72>
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4a19      	ldr	r2, [pc, #100]	; (8005f54 <idcodeCommand+0x84>)
 8005ef0:	58d3      	ldr	r3, [r2, r3]
 8005ef2:	469f      	mov	pc, r3
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F03x");
 8005ef4:	4a18      	ldr	r2, [pc, #96]	; (8005f58 <idcodeCommand+0x88>)
 8005ef6:	4919      	ldr	r1, [pc, #100]	; (8005f5c <idcodeCommand+0x8c>)
 8005ef8:	0020      	movs	r0, r4
 8005efa:	f00e ff89 	bl	8014e10 <sprintf>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageREVID,(char* )pcWriteBuffer,HAL_GetREVID() >> 12);
 8005efe:	f00a fe3b 	bl	8010b78 <HAL_GetREVID>
 8005f02:	0b03      	lsrs	r3, r0, #12
 8005f04:	0022      	movs	r2, r4
 8005f06:	4916      	ldr	r1, [pc, #88]	; (8005f60 <idcodeCommand+0x90>)
 8005f08:	0020      	movs	r0, r4
 8005f0a:	f00e ff81 	bl	8014e10 <sprintf>
}
 8005f0e:	2000      	movs	r0, #0
 8005f10:	bd10      	pop	{r4, pc}
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F04x");
 8005f12:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <idcodeCommand+0x94>)
 8005f14:	4911      	ldr	r1, [pc, #68]	; (8005f5c <idcodeCommand+0x8c>)
 8005f16:	0020      	movs	r0, r4
 8005f18:	f00e ff7a 	bl	8014e10 <sprintf>
			break;
 8005f1c:	e7ef      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F05x");
 8005f1e:	4a12      	ldr	r2, [pc, #72]	; (8005f68 <idcodeCommand+0x98>)
 8005f20:	490e      	ldr	r1, [pc, #56]	; (8005f5c <idcodeCommand+0x8c>)
 8005f22:	0020      	movs	r0, r4
 8005f24:	f00e ff74 	bl	8014e10 <sprintf>
			break;
 8005f28:	e7e9      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F07x");
 8005f2a:	4a10      	ldr	r2, [pc, #64]	; (8005f6c <idcodeCommand+0x9c>)
 8005f2c:	490b      	ldr	r1, [pc, #44]	; (8005f5c <idcodeCommand+0x8c>)
 8005f2e:	0020      	movs	r0, r4
 8005f30:	f00e ff6e 	bl	8014e10 <sprintf>
			break;
 8005f34:	e7e3      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"STM32F09x");
 8005f36:	4a0e      	ldr	r2, [pc, #56]	; (8005f70 <idcodeCommand+0xa0>)
 8005f38:	4908      	ldr	r1, [pc, #32]	; (8005f5c <idcodeCommand+0x8c>)
 8005f3a:	0020      	movs	r0, r4
 8005f3c:	f00e ff68 	bl	8014e10 <sprintf>
			break;
 8005f40:	e7dd      	b.n	8005efe <idcodeCommand+0x2e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageDEVID,"UNKNOWN");
 8005f42:	4a0c      	ldr	r2, [pc, #48]	; (8005f74 <idcodeCommand+0xa4>)
 8005f44:	4905      	ldr	r1, [pc, #20]	; (8005f5c <idcodeCommand+0x8c>)
 8005f46:	0020      	movs	r0, r4
 8005f48:	f00e ff62 	bl	8014e10 <sprintf>
			break;
 8005f4c:	e7d7      	b.n	8005efe <idcodeCommand+0x2e>
 8005f4e:	46c0      	nop			; (mov r8, r8)
 8005f50:	fffffbc0 	.word	0xfffffbc0
 8005f54:	08019d98 	.word	0x08019d98
 8005f58:	0801a3c0 	.word	0x0801a3c0
 8005f5c:	0801a3cc 	.word	0x0801a3cc
 8005f60:	0801a418 	.word	0x0801a418
 8005f64:	0801a3e0 	.word	0x0801a3e0
 8005f68:	0801a3ec 	.word	0x0801a3ec
 8005f6c:	0801a3f8 	.word	0x0801a3f8
 8005f70:	0801a404 	.word	0x0801a404
 8005f74:	0801a410 	.word	0x0801a410

08005f78 <uuidCommand>:
static portBASE_TYPE uuidCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005f78:	b570      	push	{r4, r5, r6, lr}
 8005f7a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005f7c:	d101      	bne.n	8005f82 <uuidCommand+0xa>
 8005f7e:	b672      	cpsid	i
 8005f80:	e7fe      	b.n	8005f80 <uuidCommand+0x8>
	sprintf((char* )pcWriteBuffer,"%s",(char* )pcMessageUUID);
 8005f82:	220e      	movs	r2, #14
 8005f84:	4911      	ldr	r1, [pc, #68]	; (8005fcc <uuidCommand+0x54>)
 8005f86:	f00e fd0e 	bl	80149a6 <memcpy>
		sprintf((char* )pcWriteBuffer,"%s%08X",(char* )pcWriteBuffer,*(uint32_t* )(MCU_F0_UUID_BASE + i * 4));
 8005f8a:	4b11      	ldr	r3, [pc, #68]	; (8005fd0 <uuidCommand+0x58>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4d11      	ldr	r5, [pc, #68]	; (8005fd4 <uuidCommand+0x5c>)
 8005f90:	0022      	movs	r2, r4
 8005f92:	0029      	movs	r1, r5
 8005f94:	0020      	movs	r0, r4
 8005f96:	f00e ff3b 	bl	8014e10 <sprintf>
 8005f9a:	4b0f      	ldr	r3, [pc, #60]	; (8005fd8 <uuidCommand+0x60>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	0022      	movs	r2, r4
 8005fa0:	0029      	movs	r1, r5
 8005fa2:	0020      	movs	r0, r4
 8005fa4:	f00e ff34 	bl	8014e10 <sprintf>
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <uuidCommand+0x64>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0022      	movs	r2, r4
 8005fae:	0029      	movs	r1, r5
 8005fb0:	0020      	movs	r0, r4
 8005fb2:	f00e ff2d 	bl	8014e10 <sprintf>
	strcat((char* )pcWriteBuffer,"\r\n");
 8005fb6:	0020      	movs	r0, r4
 8005fb8:	f7fa f8ae 	bl	8000118 <strlen>
 8005fbc:	1820      	adds	r0, r4, r0
 8005fbe:	2203      	movs	r2, #3
 8005fc0:	4907      	ldr	r1, [pc, #28]	; (8005fe0 <uuidCommand+0x68>)
 8005fc2:	f00e fcf0 	bl	80149a6 <memcpy>
}
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	bd70      	pop	{r4, r5, r6, pc}
 8005fca:	46c0      	nop			; (mov r8, r8)
 8005fcc:	0801bba0 	.word	0x0801bba0
 8005fd0:	1ffff7ac 	.word	0x1ffff7ac
 8005fd4:	0801bbb0 	.word	0x0801bbb0
 8005fd8:	1ffff7b0 	.word	0x1ffff7b0
 8005fdc:	1ffff7b4 	.word	0x1ffff7b4
 8005fe0:	0801b398 	.word	0x0801b398

08005fe4 <timeCommand>:
static portBASE_TYPE timeCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8005fe4:	b510      	push	{r4, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8005fea:	d101      	bne.n	8005ff0 <timeCommand+0xc>
 8005fec:	b672      	cpsid	i
 8005fee:	e7fe      	b.n	8005fee <timeCommand+0xa>
	GetTimeDate();
 8005ff0:	f008 f9b8 	bl	800e364 <GetTimeDate>
	if(BOS.hourformat == 24)
 8005ff4:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <timeCommand+0x80>)
 8005ff6:	7b5b      	ldrb	r3, [r3, #13]
 8005ff8:	2b18      	cmp	r3, #24
 8005ffa:	d004      	beq.n	8006006 <timeCommand+0x22>
	else if(BOS.hourformat == 12){
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d00e      	beq.n	800601e <timeCommand+0x3a>
}
 8006000:	2000      	movs	r0, #0
 8006002:	b004      	add	sp, #16
 8006004:	bd10      	pop	{r4, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage24,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec);
 8006006:	4917      	ldr	r1, [pc, #92]	; (8006064 <timeCommand+0x80>)
 8006008:	7c4b      	ldrb	r3, [r1, #17]
 800600a:	7c8a      	ldrb	r2, [r1, #18]
 800600c:	89c8      	ldrh	r0, [r1, #14]
 800600e:	9001      	str	r0, [sp, #4]
 8006010:	7c09      	ldrb	r1, [r1, #16]
 8006012:	9100      	str	r1, [sp, #0]
 8006014:	4914      	ldr	r1, [pc, #80]	; (8006068 <timeCommand+0x84>)
 8006016:	0020      	movs	r0, r4
 8006018:	f00e fefa 	bl	8014e10 <sprintf>
 800601c:	e7f0      	b.n	8006000 <timeCommand+0x1c>
		if(BOS.time.ampm == RTC_AM)
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <timeCommand+0x80>)
 8006020:	7cdb      	ldrb	r3, [r3, #19]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d10d      	bne.n	8006042 <timeCommand+0x5e>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"AM");
 8006026:	490f      	ldr	r1, [pc, #60]	; (8006064 <timeCommand+0x80>)
 8006028:	7c4b      	ldrb	r3, [r1, #17]
 800602a:	7c8a      	ldrb	r2, [r1, #18]
 800602c:	480f      	ldr	r0, [pc, #60]	; (800606c <timeCommand+0x88>)
 800602e:	9002      	str	r0, [sp, #8]
 8006030:	89c8      	ldrh	r0, [r1, #14]
 8006032:	9001      	str	r0, [sp, #4]
 8006034:	7c09      	ldrb	r1, [r1, #16]
 8006036:	9100      	str	r1, [sp, #0]
 8006038:	490d      	ldr	r1, [pc, #52]	; (8006070 <timeCommand+0x8c>)
 800603a:	0020      	movs	r0, r4
 800603c:	f00e fee8 	bl	8014e10 <sprintf>
 8006040:	e7de      	b.n	8006000 <timeCommand+0x1c>
		else if(BOS.time.ampm == RTC_PM)
 8006042:	2b02      	cmp	r3, #2
 8006044:	d1dc      	bne.n	8006000 <timeCommand+0x1c>
			sprintf((char* )pcWriteBuffer,(char* )pcMessage12,BOS.time.hours,BOS.time.minutes,BOS.time.seconds,BOS.time.msec,"PM");
 8006046:	4907      	ldr	r1, [pc, #28]	; (8006064 <timeCommand+0x80>)
 8006048:	7c4b      	ldrb	r3, [r1, #17]
 800604a:	7c8a      	ldrb	r2, [r1, #18]
 800604c:	4809      	ldr	r0, [pc, #36]	; (8006074 <timeCommand+0x90>)
 800604e:	9002      	str	r0, [sp, #8]
 8006050:	89c8      	ldrh	r0, [r1, #14]
 8006052:	9001      	str	r0, [sp, #4]
 8006054:	7c09      	ldrb	r1, [r1, #16]
 8006056:	9100      	str	r1, [sp, #0]
 8006058:	4905      	ldr	r1, [pc, #20]	; (8006070 <timeCommand+0x8c>)
 800605a:	0020      	movs	r0, r4
 800605c:	f00e fed8 	bl	8014e10 <sprintf>
 8006060:	e7ce      	b.n	8006000 <timeCommand+0x1c>
 8006062:	46c0      	nop			; (mov r8, r8)
 8006064:	20006e54 	.word	0x20006e54
 8006068:	0801bae8 	.word	0x0801bae8
 800606c:	0801bb3c 	.word	0x0801bb3c
 8006070:	0801bb10 	.word	0x0801bb10
 8006074:	0801bb40 	.word	0x0801bb40

08006078 <dateCommand>:
static portBASE_TYPE dateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006078:	b510      	push	{r4, lr}
 800607a:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 800607c:	d101      	bne.n	8006082 <dateCommand+0xa>
 800607e:	b672      	cpsid	i
 8006080:	e7fe      	b.n	8006080 <dateCommand+0x8>
	GetTimeDate();
 8006082:	f008 f96f 	bl	800e364 <GetTimeDate>
	sprintf((char* )pcWriteBuffer,(char* )pcMessageDate,GetDateString());
 8006086:	f7fe fb2b 	bl	80046e0 <GetDateString>
 800608a:	0002      	movs	r2, r0
 800608c:	4902      	ldr	r1, [pc, #8]	; (8006098 <dateCommand+0x20>)
 800608e:	0020      	movs	r0, r4
 8006090:	f00e febe 	bl	8014e10 <sprintf>
}
 8006094:	2000      	movs	r0, #0
 8006096:	bd10      	pop	{r4, pc}
 8006098:	08019ff8 	.word	0x08019ff8

0800609c <getCommand>:
static portBASE_TYPE getCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800609c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609e:	46c6      	mov	lr, r8
 80060a0:	b500      	push	{lr}
 80060a2:	b082      	sub	sp, #8
 80060a4:	0004      	movs	r4, r0
 80060a6:	0016      	movs	r6, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 80060a8:	2300      	movs	r3, #0
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	9300      	str	r3, [sp, #0]
	configASSERT(pcWriteBuffer);
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d101      	bne.n	80060b6 <getCommand+0x1a>
 80060b2:	b672      	cpsid	i
 80060b4:	e7fe      	b.n	80060b4 <getCommand+0x18>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80060b6:	aa01      	add	r2, sp, #4
 80060b8:	2101      	movs	r1, #1
 80060ba:	0030      	movs	r0, r6
 80060bc:	f008 fe3c 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80060c0:	0005      	movs	r5, r0
 80060c2:	4b74      	ldr	r3, [pc, #464]	; (8006294 <getCommand+0x1f8>)
 80060c4:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80060c6:	2204      	movs	r2, #4
 80060c8:	4973      	ldr	r1, [pc, #460]	; (8006298 <getCommand+0x1fc>)
 80060ca:	f00e fee5 	bl	8014e98 <strncmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d000      	beq.n	80060d4 <getCommand+0x38>
 80060d2:	e090      	b.n	80061f6 <getCommand+0x15a>
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 80060d4:	1d2f      	adds	r7, r5, #4
 80060d6:	9b01      	ldr	r3, [sp, #4]
 80060d8:	1f1e      	subs	r6, r3, #4
 80060da:	0032      	movs	r2, r6
 80060dc:	496f      	ldr	r1, [pc, #444]	; (800629c <getCommand+0x200>)
 80060de:	0038      	movs	r0, r7
 80060e0:	f00e feda 	bl	8014e98 <strncmp>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d11e      	bne.n	8006126 <getCommand+0x8a>
			if(BOSMessaging.response == BOS_RESPONSE_ALL)
 80060e8:	4b6d      	ldr	r3, [pc, #436]	; (80062a0 <getCommand+0x204>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	2b60      	cmp	r3, #96	; 0x60
 80060ee:	d109      	bne.n	8006104 <getCommand+0x68>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 80060f0:	4a6c      	ldr	r2, [pc, #432]	; (80062a4 <getCommand+0x208>)
 80060f2:	496d      	ldr	r1, [pc, #436]	; (80062a8 <getCommand+0x20c>)
 80060f4:	0020      	movs	r0, r4
 80060f6:	f00e fe8b 	bl	8014e10 <sprintf>
}
 80060fa:	2000      	movs	r0, #0
 80060fc:	b002      	add	sp, #8
 80060fe:	bc04      	pop	{r2}
 8006100:	4690      	mov	r8, r2
 8006102:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(BOSMessaging.response == BOS_RESPONSE_MSG)
 8006104:	2b20      	cmp	r3, #32
 8006106:	d105      	bne.n	8006114 <getCommand+0x78>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 8006108:	4a68      	ldr	r2, [pc, #416]	; (80062ac <getCommand+0x210>)
 800610a:	4967      	ldr	r1, [pc, #412]	; (80062a8 <getCommand+0x20c>)
 800610c:	0020      	movs	r0, r4
 800610e:	f00e fe7f 	bl	8014e10 <sprintf>
 8006112:	e7f2      	b.n	80060fa <getCommand+0x5e>
			else if(BOSMessaging.response == BOS_RESPONSE_NONE)
 8006114:	2b00      	cmp	r3, #0
 8006116:	d000      	beq.n	800611a <getCommand+0x7e>
 8006118:	e0b6      	b.n	8006288 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800611a:	4a65      	ldr	r2, [pc, #404]	; (80062b0 <getCommand+0x214>)
 800611c:	4962      	ldr	r1, [pc, #392]	; (80062a8 <getCommand+0x20c>)
 800611e:	0020      	movs	r0, r4
 8006120:	f00e fe76 	bl	8014e10 <sprintf>
 8006124:	e7e9      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 8006126:	0032      	movs	r2, r6
 8006128:	4962      	ldr	r1, [pc, #392]	; (80062b4 <getCommand+0x218>)
 800612a:	0038      	movs	r0, r7
 800612c:	f00e feb4 	bl	8014e98 <strncmp>
 8006130:	2800      	cmp	r0, #0
 8006132:	d11a      	bne.n	800616a <getCommand+0xce>
			if(BOSMessaging.trace == TRACE_BOTH)
 8006134:	4b5a      	ldr	r3, [pc, #360]	; (80062a0 <getCommand+0x204>)
 8006136:	785b      	ldrb	r3, [r3, #1]
 8006138:	2b03      	cmp	r3, #3
 800613a:	d105      	bne.n	8006148 <getCommand+0xac>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"all");
 800613c:	4a59      	ldr	r2, [pc, #356]	; (80062a4 <getCommand+0x208>)
 800613e:	495a      	ldr	r1, [pc, #360]	; (80062a8 <getCommand+0x20c>)
 8006140:	0020      	movs	r0, r4
 8006142:	f00e fe65 	bl	8014e10 <sprintf>
 8006146:	e7d8      	b.n	80060fa <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_MESSAGE)
 8006148:	2b01      	cmp	r3, #1
 800614a:	d105      	bne.n	8006158 <getCommand+0xbc>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"msg");
 800614c:	4a57      	ldr	r2, [pc, #348]	; (80062ac <getCommand+0x210>)
 800614e:	4956      	ldr	r1, [pc, #344]	; (80062a8 <getCommand+0x20c>)
 8006150:	0020      	movs	r0, r4
 8006152:	f00e fe5d 	bl	8014e10 <sprintf>
 8006156:	e7d0      	b.n	80060fa <getCommand+0x5e>
			else if(BOSMessaging.trace == TRACE_NONE)
 8006158:	2b00      	cmp	r3, #0
 800615a:	d000      	beq.n	800615e <getCommand+0xc2>
 800615c:	e094      	b.n	8006288 <getCommand+0x1ec>
				sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,"none");
 800615e:	4a54      	ldr	r2, [pc, #336]	; (80062b0 <getCommand+0x214>)
 8006160:	4951      	ldr	r1, [pc, #324]	; (80062a8 <getCommand+0x20c>)
 8006162:	0020      	movs	r0, r4
 8006164:	f00e fe54 	bl	8014e10 <sprintf>
 8006168:	e7c7      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 800616a:	0032      	movs	r2, r6
 800616c:	4952      	ldr	r1, [pc, #328]	; (80062b8 <getCommand+0x21c>)
 800616e:	0038      	movs	r0, r7
 8006170:	f00e fe92 	bl	8014e98 <strncmp>
 8006174:	2800      	cmp	r0, #0
 8006176:	d106      	bne.n	8006186 <getCommand+0xea>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.clibaudrate);
 8006178:	4b50      	ldr	r3, [pc, #320]	; (80062bc <getCommand+0x220>)
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	4950      	ldr	r1, [pc, #320]	; (80062c0 <getCommand+0x224>)
 800617e:	0020      	movs	r0, r4
 8006180:	f00e fe46 	bl	8014e10 <sprintf>
 8006184:	e7b9      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 8006186:	0032      	movs	r2, r6
 8006188:	494e      	ldr	r1, [pc, #312]	; (80062c4 <getCommand+0x228>)
 800618a:	0038      	movs	r0, r7
 800618c:	f00e fe84 	bl	8014e98 <strncmp>
 8006190:	2800      	cmp	r0, #0
 8006192:	d106      	bne.n	80061a2 <getCommand+0x106>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.debounce);
 8006194:	4b49      	ldr	r3, [pc, #292]	; (80062bc <getCommand+0x220>)
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	4949      	ldr	r1, [pc, #292]	; (80062c0 <getCommand+0x224>)
 800619a:	0020      	movs	r0, r4
 800619c:	f00e fe38 	bl	8014e10 <sprintf>
 80061a0:	e7ab      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 80061a2:	0032      	movs	r2, r6
 80061a4:	4948      	ldr	r1, [pc, #288]	; (80062c8 <getCommand+0x22c>)
 80061a6:	0038      	movs	r0, r7
 80061a8:	f00e fe76 	bl	8014e98 <strncmp>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d106      	bne.n	80061be <getCommand+0x122>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.singleClickTime);
 80061b0:	4b42      	ldr	r3, [pc, #264]	; (80062bc <getCommand+0x220>)
 80061b2:	885a      	ldrh	r2, [r3, #2]
 80061b4:	4942      	ldr	r1, [pc, #264]	; (80062c0 <getCommand+0x224>)
 80061b6:	0020      	movs	r0, r4
 80061b8:	f00e fe2a 	bl	8014e10 <sprintf>
 80061bc:	e79d      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 80061be:	0032      	movs	r2, r6
 80061c0:	4942      	ldr	r1, [pc, #264]	; (80062cc <getCommand+0x230>)
 80061c2:	0038      	movs	r0, r7
 80061c4:	f00e fe68 	bl	8014e98 <strncmp>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	d106      	bne.n	80061da <getCommand+0x13e>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.minInterClickTime);
 80061cc:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <getCommand+0x220>)
 80061ce:	791a      	ldrb	r2, [r3, #4]
 80061d0:	493b      	ldr	r1, [pc, #236]	; (80062c0 <getCommand+0x224>)
 80061d2:	0020      	movs	r0, r4
 80061d4:	f00e fe1c 	bl	8014e10 <sprintf>
 80061d8:	e78f      	b.n	80060fa <getCommand+0x5e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 80061da:	0032      	movs	r2, r6
 80061dc:	493c      	ldr	r1, [pc, #240]	; (80062d0 <getCommand+0x234>)
 80061de:	0038      	movs	r0, r7
 80061e0:	f00e fe5a 	bl	8014e98 <strncmp>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	d10d      	bne.n	8006204 <getCommand+0x168>
			sprintf((char* )pcWriteBuffer,"%d\n\r",BOS.buttons.maxInterClickTime);
 80061e8:	4b34      	ldr	r3, [pc, #208]	; (80062bc <getCommand+0x220>)
 80061ea:	795a      	ldrb	r2, [r3, #5]
 80061ec:	4934      	ldr	r1, [pc, #208]	; (80062c0 <getCommand+0x224>)
 80061ee:	0020      	movs	r0, r4
 80061f0:	f00e fe0e 	bl	8014e10 <sprintf>
 80061f4:	e781      	b.n	80060fa <getCommand+0x5e>
	else if(!strncmp((const char* )pcParameterString1,"group",5)){
 80061f6:	2205      	movs	r2, #5
 80061f8:	4936      	ldr	r1, [pc, #216]	; (80062d4 <getCommand+0x238>)
 80061fa:	0028      	movs	r0, r5
 80061fc:	f00e fe4c 	bl	8014e98 <strncmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	d005      	beq.n	8006210 <getCommand+0x174>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006204:	2213      	movs	r2, #19
 8006206:	4934      	ldr	r1, [pc, #208]	; (80062d8 <getCommand+0x23c>)
 8006208:	0020      	movs	r0, r4
 800620a:	f00e fbcc 	bl	80149a6 <memcpy>
 800620e:	e774      	b.n	80060fa <getCommand+0x5e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006210:	466a      	mov	r2, sp
 8006212:	2102      	movs	r1, #2
 8006214:	0030      	movs	r0, r6
 8006216:	f008 fd8f 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800621a:	0005      	movs	r5, r0
 800621c:	4f2f      	ldr	r7, [pc, #188]	; (80062dc <getCommand+0x240>)
		for(i =0; i < MaxNumOfGroups; i++){
 800621e:	2600      	movs	r6, #0
			if(!strcmp((char* )pcParameterString2,groupAlias[i])){
 8006220:	0039      	movs	r1, r7
 8006222:	0028      	movs	r0, r5
 8006224:	f7f9 ff6e 	bl	8000104 <strcmp>
 8006228:	2800      	cmp	r0, #0
 800622a:	d011      	beq.n	8006250 <getCommand+0x1b4>
		for(i =0; i < MaxNumOfGroups; i++){
 800622c:	3601      	adds	r6, #1
 800622e:	b2f6      	uxtb	r6, r6
 8006230:	370a      	adds	r7, #10
 8006232:	2e0a      	cmp	r6, #10
 8006234:	d1f4      	bne.n	8006220 <getCommand+0x184>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupDoesNotExist,(char* )pcParameterString2);
 8006236:	002a      	movs	r2, r5
 8006238:	4929      	ldr	r1, [pc, #164]	; (80062e0 <getCommand+0x244>)
 800623a:	0020      	movs	r0, r4
 800623c:	f00e fde8 	bl	8014e10 <sprintf>
			return pdFALSE;
 8006240:	e75b      	b.n	80060fa <getCommand+0x5e>
					sprintf((char* )pcWriteBuffer,"%s#%d\n\r",(char* )pcWriteBuffer,j);
 8006242:	002b      	movs	r3, r5
 8006244:	0022      	movs	r2, r4
 8006246:	4927      	ldr	r1, [pc, #156]	; (80062e4 <getCommand+0x248>)
 8006248:	0020      	movs	r0, r4
 800624a:	f00e fde1 	bl	8014e10 <sprintf>
 800624e:	e015      	b.n	800627c <getCommand+0x1e0>
			sprintf((char* )pcWriteBuffer,(char* )pcMessageGroupExists,(char* )pcParameterString2);
 8006250:	002a      	movs	r2, r5
 8006252:	4925      	ldr	r1, [pc, #148]	; (80062e8 <getCommand+0x24c>)
 8006254:	0020      	movs	r0, r4
 8006256:	f00e fddb 	bl	8014e10 <sprintf>
			for(j =1; j <= N; j++)						// N modules
 800625a:	4b24      	ldr	r3, [pc, #144]	; (80062ec <getCommand+0x250>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d100      	bne.n	8006264 <getCommand+0x1c8>
 8006262:	e74a      	b.n	80060fa <getCommand+0x5e>
 8006264:	2501      	movs	r5, #1
 8006266:	002b      	movs	r3, r5
 8006268:	40b3      	lsls	r3, r6
 800626a:	4698      	mov	r8, r3
				if(InGroup(j,i)){
 800626c:	4f20      	ldr	r7, [pc, #128]	; (80062f0 <getCommand+0x254>)
			for(j =1; j <= N; j++)						// N modules
 800626e:	4e1f      	ldr	r6, [pc, #124]	; (80062ec <getCommand+0x250>)
				if(InGroup(j,i)){
 8006270:	1e6b      	subs	r3, r5, #1
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	5bdb      	ldrh	r3, [r3, r7]
 8006276:	4642      	mov	r2, r8
 8006278:	421a      	tst	r2, r3
 800627a:	d1e2      	bne.n	8006242 <getCommand+0x1a6>
			for(j =1; j <= N; j++)						// N modules
 800627c:	3501      	adds	r5, #1
 800627e:	b2ed      	uxtb	r5, r5
 8006280:	7833      	ldrb	r3, [r6, #0]
 8006282:	42ab      	cmp	r3, r5
 8006284:	d2f4      	bcs.n	8006270 <getCommand+0x1d4>
 8006286:	e738      	b.n	80060fa <getCommand+0x5e>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongValue,pcParameterString1);
 8006288:	002a      	movs	r2, r5
 800628a:	491a      	ldr	r1, [pc, #104]	; (80062f4 <getCommand+0x258>)
 800628c:	0020      	movs	r0, r4
 800628e:	f00e fdbf 	bl	8014e10 <sprintf>
 8006292:	e732      	b.n	80060fa <getCommand+0x5e>
 8006294:	2000130c 	.word	0x2000130c
 8006298:	0801a164 	.word	0x0801a164
 800629c:	0801a16c 	.word	0x0801a16c
 80062a0:	20006dd4 	.word	0x20006dd4
 80062a4:	0801956c 	.word	0x0801956c
 80062a8:	080193c4 	.word	0x080193c4
 80062ac:	0801a178 	.word	0x0801a178
 80062b0:	0801a17c 	.word	0x0801a17c
 80062b4:	0801a184 	.word	0x0801a184
 80062b8:	0801a18c 	.word	0x0801a18c
 80062bc:	20006e54 	.word	0x20006e54
 80062c0:	08019a1c 	.word	0x08019a1c
 80062c4:	0801a198 	.word	0x0801a198
 80062c8:	0801a1a4 	.word	0x0801a1a4
 80062cc:	0801a1b4 	.word	0x0801a1b4
 80062d0:	0801a1c8 	.word	0x0801a1c8
 80062d4:	0801a1dc 	.word	0x0801a1dc
 80062d8:	0801a1ec 	.word	0x0801a1ec
 80062dc:	20000ed0 	.word	0x20000ed0
 80062e0:	0801a200 	.word	0x0801a200
 80062e4:	0801a1e4 	.word	0x0801a1e4
 80062e8:	0801a21c 	.word	0x0801a21c
 80062ec:	20000044 	.word	0x20000044
 80062f0:	20000f34 	.word	0x20000f34
 80062f4:	0801a230 	.word	0x0801a230

080062f8 <defaultCommand>:
static portBASE_TYPE defaultCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	0004      	movs	r4, r0
 80062fe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006300:	2300      	movs	r3, #0
 8006302:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006304:	2c00      	cmp	r4, #0
 8006306:	d101      	bne.n	800630c <defaultCommand+0x14>
 8006308:	b672      	cpsid	i
 800630a:	e7fe      	b.n	800630a <defaultCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800630c:	aa01      	add	r2, sp, #4
 800630e:	2101      	movs	r1, #1
 8006310:	f008 fd12 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006314:	0005      	movs	r5, r0
	if(!strncmp((const char* )pcParameterString1,"params",xParameterStringLength1)){
 8006316:	9e01      	ldr	r6, [sp, #4]
 8006318:	0032      	movs	r2, r6
 800631a:	491e      	ldr	r1, [pc, #120]	; (8006394 <defaultCommand+0x9c>)
 800631c:	f00e fdbc 	bl	8014e98 <strncmp>
 8006320:	2800      	cmp	r0, #0
 8006322:	d01e      	beq.n	8006362 <defaultCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"array",xParameterStringLength1)){
 8006324:	0032      	movs	r2, r6
 8006326:	491c      	ldr	r1, [pc, #112]	; (8006398 <defaultCommand+0xa0>)
 8006328:	0028      	movs	r0, r5
 800632a:	f00e fdb5 	bl	8014e98 <strncmp>
 800632e:	2800      	cmp	r0, #0
 8006330:	d12a      	bne.n	8006388 <defaultCommand+0x90>
		SendMessageToModule(BOS_BROADCAST,CODE_DEF_ARRAY,0);
 8006332:	2200      	movs	r2, #0
 8006334:	2116      	movs	r1, #22
 8006336:	20ff      	movs	r0, #255	; 0xff
 8006338:	f003 fc14 	bl	8009b64 <SendMessageToModule>
		indMode =IND_TOPOLOGY;
 800633c:	4b17      	ldr	r3, [pc, #92]	; (800639c <defaultCommand+0xa4>)
 800633e:	2202      	movs	r2, #2
 8006340:	701a      	strb	r2, [r3, #0]
		osDelay(100);
 8006342:	2064      	movs	r0, #100	; 0x64
 8006344:	f008 fbdf 	bl	800eb06 <osDelay>
		ClearEEportsDir();
 8006348:	f7fd f968 	bl	800361c <ClearEEportsDir>
		ClearROtopology();
 800634c:	f006 fb34 	bl	800c9b8 <ClearROtopology>
		osDelay(100);
 8006350:	2064      	movs	r0, #100	; 0x64
 8006352:	f008 fbd8 	bl	800eb06 <osDelay>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKArray);
 8006356:	2240      	movs	r2, #64	; 0x40
 8006358:	4911      	ldr	r1, [pc, #68]	; (80063a0 <defaultCommand+0xa8>)
 800635a:	0020      	movs	r0, r4
 800635c:	f00e fb23 	bl	80149a6 <memcpy>
 8006360:	e00f      	b.n	8006382 <defaultCommand+0x8a>
		memcpy(&BOS,&BOS_default,sizeof(BOS_default));
 8006362:	4910      	ldr	r1, [pc, #64]	; (80063a4 <defaultCommand+0xac>)
 8006364:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <defaultCommand+0xb0>)
 8006366:	000a      	movs	r2, r1
 8006368:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636a:	c223      	stmia	r2!, {r0, r1, r5}
 800636c:	cb23      	ldmia	r3!, {r0, r1, r5}
 800636e:	c223      	stmia	r2!, {r0, r1, r5}
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 8006374:	f7fd f90e 	bl	8003594 <SaveEEparams>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageOKParams);
 8006378:	2227      	movs	r2, #39	; 0x27
 800637a:	490c      	ldr	r1, [pc, #48]	; (80063ac <defaultCommand+0xb4>)
 800637c:	0020      	movs	r0, r4
 800637e:	f00e fb12 	bl	80149a6 <memcpy>
}
 8006382:	2000      	movs	r0, #0
 8006384:	b002      	add	sp, #8
 8006386:	bd70      	pop	{r4, r5, r6, pc}
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006388:	220f      	movs	r2, #15
 800638a:	4909      	ldr	r1, [pc, #36]	; (80063b0 <defaultCommand+0xb8>)
 800638c:	0020      	movs	r0, r4
 800638e:	f00e fb0a 	bl	80149a6 <memcpy>
 8006392:	e7f6      	b.n	8006382 <defaultCommand+0x8a>
 8006394:	0801a020 	.word	0x0801a020
 8006398:	0801a050 	.word	0x0801a050
 800639c:	20000f68 	.word	0x20000f68
 80063a0:	0801a068 	.word	0x0801a068
 80063a4:	20006e54 	.word	0x20006e54
 80063a8:	20000028 	.word	0x20000028
 80063ac:	0801a028 	.word	0x0801a028
 80063b0:	0801a058 	.word	0x0801a058

080063b4 <setCommand>:
static portBASE_TYPE setCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	46ce      	mov	lr, r9
 80063b8:	4647      	mov	r7, r8
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b08d      	sub	sp, #52	; 0x34
 80063be:	0005      	movs	r5, r0
 80063c0:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c6:	930a      	str	r3, [sp, #40]	; 0x28
 80063c8:	9309      	str	r3, [sp, #36]	; 0x24
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0;
 80063ca:	9308      	str	r3, [sp, #32]
 80063cc:	9307      	str	r3, [sp, #28]
	configASSERT(pcWriteBuffer);
 80063ce:	2800      	cmp	r0, #0
 80063d0:	d101      	bne.n	80063d6 <setCommand+0x22>
 80063d2:	b672      	cpsid	i
 80063d4:	e7fe      	b.n	80063d4 <setCommand+0x20>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80063d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80063d8:	2101      	movs	r1, #1
 80063da:	0020      	movs	r0, r4
 80063dc:	f008 fcac 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80063e0:	0006      	movs	r6, r0
 80063e2:	4bb3      	ldr	r3, [pc, #716]	; (80066b0 <setCommand+0x2fc>)
 80063e4:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"bos.",4)){
 80063e6:	2204      	movs	r2, #4
 80063e8:	49b2      	ldr	r1, [pc, #712]	; (80066b4 <setCommand+0x300>)
 80063ea:	f00e fd55 	bl	8014e98 <strncmp>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d015      	beq.n	800641e <setCommand+0x6a>
	else if(!strncmp((const char* )pcParameterString1,"time",4)){
 80063f2:	2204      	movs	r2, #4
 80063f4:	49b0      	ldr	r1, [pc, #704]	; (80066b8 <setCommand+0x304>)
 80063f6:	0030      	movs	r0, r6
 80063f8:	f00e fd4e 	bl	8014e98 <strncmp>
 80063fc:	2800      	cmp	r0, #0
 80063fe:	d100      	bne.n	8006402 <setCommand+0x4e>
 8006400:	e182      	b.n	8006708 <setCommand+0x354>
	else if(!strncmp((const char* )pcParameterString1,"date",4)){
 8006402:	2204      	movs	r2, #4
 8006404:	49ad      	ldr	r1, [pc, #692]	; (80066bc <setCommand+0x308>)
 8006406:	0030      	movs	r0, r6
 8006408:	f00e fd46 	bl	8014e98 <strncmp>
 800640c:	2800      	cmp	r0, #0
 800640e:	d100      	bne.n	8006412 <setCommand+0x5e>
 8006410:	e1e8      	b.n	80067e4 <setCommand+0x430>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongParam);
 8006412:	2213      	movs	r2, #19
 8006414:	49aa      	ldr	r1, [pc, #680]	; (80066c0 <setCommand+0x30c>)
 8006416:	0028      	movs	r0, r5
 8006418:	f00e fac5 	bl	80149a6 <memcpy>
 800641c:	e1d9      	b.n	80067d2 <setCommand+0x41e>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800641e:	aa0a      	add	r2, sp, #40	; 0x28
 8006420:	2102      	movs	r1, #2
 8006422:	0020      	movs	r0, r4
 8006424:	f008 fc88 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006428:	0004      	movs	r4, r0
 800642a:	4ba6      	ldr	r3, [pc, #664]	; (80066c4 <setCommand+0x310>)
 800642c:	6018      	str	r0, [r3, #0]
		if(!strncmp((const char* )pcParameterString1 + 4,"response",xParameterStringLength1 - 4)){
 800642e:	4ba0      	ldr	r3, [pc, #640]	; (80066b0 <setCommand+0x2fc>)
 8006430:	681e      	ldr	r6, [r3, #0]
 8006432:	3604      	adds	r6, #4
 8006434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006436:	1f1f      	subs	r7, r3, #4
 8006438:	003a      	movs	r2, r7
 800643a:	49a3      	ldr	r1, [pc, #652]	; (80066c8 <setCommand+0x314>)
 800643c:	0030      	movs	r0, r6
 800643e:	f00e fd2b 	bl	8014e98 <strncmp>
 8006442:	2800      	cmp	r0, #0
 8006444:	d153      	bne.n	80064ee <setCommand+0x13a>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 8006446:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006448:	0032      	movs	r2, r6
 800644a:	49a0      	ldr	r1, [pc, #640]	; (80066cc <setCommand+0x318>)
 800644c:	0020      	movs	r0, r4
 800644e:	f00e fd23 	bl	8014e98 <strncmp>
 8006452:	2800      	cmp	r0, #0
 8006454:	d115      	bne.n	8006482 <setCommand+0xce>
				BOSMessaging.response = BOS_RESPONSE_ALL;
 8006456:	4b9e      	ldr	r3, [pc, #632]	; (80066d0 <setCommand+0x31c>)
 8006458:	2160      	movs	r1, #96	; 0x60
 800645a:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800645c:	785b      	ldrb	r3, [r3, #1]
 800645e:	021b      	lsls	r3, r3, #8
 8006460:	4319      	orrs	r1, r3
 8006462:	308a      	adds	r0, #138	; 0x8a
 8006464:	0040      	lsls	r0, r0, #1
 8006466:	f001 f9e5 	bl	8007834 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 800646a:	4b91      	ldr	r3, [pc, #580]	; (80066b0 <setCommand+0x2fc>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	2300      	movs	r3, #0
 8006470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006472:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 8006474:	4b93      	ldr	r3, [pc, #588]	; (80066c4 <setCommand+0x310>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4996      	ldr	r1, [pc, #600]	; (80066d4 <setCommand+0x320>)
 800647a:	0028      	movs	r0, r5
 800647c:	f00e fcc8 	bl	8014e10 <sprintf>
	return pdFALSE;
 8006480:	e1a7      	b.n	80067d2 <setCommand+0x41e>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006482:	0032      	movs	r2, r6
 8006484:	4994      	ldr	r1, [pc, #592]	; (80066d8 <setCommand+0x324>)
 8006486:	0020      	movs	r0, r4
 8006488:	f00e fd06 	bl	8014e98 <strncmp>
 800648c:	2800      	cmp	r0, #0
 800648e:	d10a      	bne.n	80064a6 <setCommand+0xf2>
				BOSMessaging.response = BOS_RESPONSE_MSG;
 8006490:	4b8f      	ldr	r3, [pc, #572]	; (80066d0 <setCommand+0x31c>)
 8006492:	2120      	movs	r1, #32
 8006494:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	4319      	orrs	r1, r3
 800649c:	308a      	adds	r0, #138	; 0x8a
 800649e:	0040      	lsls	r0, r0, #1
 80064a0:	f001 f9c8 	bl	8007834 <EE_WriteVariable>
 80064a4:	e7e1      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"cli",xParameterStringLength2)){
 80064a6:	0032      	movs	r2, r6
 80064a8:	498c      	ldr	r1, [pc, #560]	; (80066dc <setCommand+0x328>)
 80064aa:	0020      	movs	r0, r4
 80064ac:	f00e fcf4 	bl	8014e98 <strncmp>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d10a      	bne.n	80064ca <setCommand+0x116>
				BOSMessaging.response = BOS_RESPONSE_CLI;
 80064b4:	4b86      	ldr	r3, [pc, #536]	; (80066d0 <setCommand+0x31c>)
 80064b6:	2140      	movs	r1, #64	; 0x40
 80064b8:	7019      	strb	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064ba:	785b      	ldrb	r3, [r3, #1]
 80064bc:	021b      	lsls	r3, r3, #8
 80064be:	4319      	orrs	r1, r3
 80064c0:	308a      	adds	r0, #138	; 0x8a
 80064c2:	0040      	lsls	r0, r0, #1
 80064c4:	f001 f9b6 	bl	8007834 <EE_WriteVariable>
 80064c8:	e7cf      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 80064ca:	0032      	movs	r2, r6
 80064cc:	4984      	ldr	r1, [pc, #528]	; (80066e0 <setCommand+0x32c>)
 80064ce:	0020      	movs	r0, r4
 80064d0:	f00e fce2 	bl	8014e98 <strncmp>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d000      	beq.n	80064da <setCommand+0x126>
 80064d8:	e2a9      	b.n	8006a2e <setCommand+0x67a>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80064da:	4b7d      	ldr	r3, [pc, #500]	; (80066d0 <setCommand+0x31c>)
 80064dc:	2200      	movs	r2, #0
 80064de:	701a      	strb	r2, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 80064e0:	7859      	ldrb	r1, [r3, #1]
 80064e2:	0209      	lsls	r1, r1, #8
 80064e4:	308a      	adds	r0, #138	; 0x8a
 80064e6:	0040      	lsls	r0, r0, #1
 80064e8:	f001 f9a4 	bl	8007834 <EE_WriteVariable>
 80064ec:	e7bd      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"trace",xParameterStringLength1 - 4)){
 80064ee:	003a      	movs	r2, r7
 80064f0:	497c      	ldr	r1, [pc, #496]	; (80066e4 <setCommand+0x330>)
 80064f2:	0030      	movs	r0, r6
 80064f4:	f00e fcd0 	bl	8014e98 <strncmp>
 80064f8:	2800      	cmp	r0, #0
 80064fa:	d14a      	bne.n	8006592 <setCommand+0x1de>
			if(!strncmp((const char* )pcParameterString2,"all",xParameterStringLength2)){
 80064fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064fe:	0032      	movs	r2, r6
 8006500:	4972      	ldr	r1, [pc, #456]	; (80066cc <setCommand+0x318>)
 8006502:	0020      	movs	r0, r4
 8006504:	f00e fcc8 	bl	8014e98 <strncmp>
 8006508:	2800      	cmp	r0, #0
 800650a:	d10b      	bne.n	8006524 <setCommand+0x170>
				BOSMessaging.trace =TRACE_BOTH;
 800650c:	4b70      	ldr	r3, [pc, #448]	; (80066d0 <setCommand+0x31c>)
 800650e:	2203      	movs	r2, #3
 8006510:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	21c0      	movs	r1, #192	; 0xc0
 8006516:	0089      	lsls	r1, r1, #2
 8006518:	4319      	orrs	r1, r3
 800651a:	308a      	adds	r0, #138	; 0x8a
 800651c:	0040      	lsls	r0, r0, #1
 800651e:	f001 f989 	bl	8007834 <EE_WriteVariable>
 8006522:	e7a2      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"message",xParameterStringLength2)){
 8006524:	0032      	movs	r2, r6
 8006526:	496c      	ldr	r1, [pc, #432]	; (80066d8 <setCommand+0x324>)
 8006528:	0020      	movs	r0, r4
 800652a:	f00e fcb5 	bl	8014e98 <strncmp>
 800652e:	2800      	cmp	r0, #0
 8006530:	d10b      	bne.n	800654a <setCommand+0x196>
				BOSMessaging.trace =TRACE_MESSAGE;
 8006532:	4b67      	ldr	r3, [pc, #412]	; (80066d0 <setCommand+0x31c>)
 8006534:	2201      	movs	r2, #1
 8006536:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2180      	movs	r1, #128	; 0x80
 800653c:	0049      	lsls	r1, r1, #1
 800653e:	4319      	orrs	r1, r3
 8006540:	308a      	adds	r0, #138	; 0x8a
 8006542:	4090      	lsls	r0, r2
 8006544:	f001 f976 	bl	8007834 <EE_WriteVariable>
 8006548:	e78f      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"response",xParameterStringLength2)){
 800654a:	0032      	movs	r2, r6
 800654c:	495e      	ldr	r1, [pc, #376]	; (80066c8 <setCommand+0x314>)
 800654e:	0020      	movs	r0, r4
 8006550:	f00e fca2 	bl	8014e98 <strncmp>
 8006554:	2800      	cmp	r0, #0
 8006556:	d10b      	bne.n	8006570 <setCommand+0x1bc>
				BOSMessaging.trace =TRACE_RESPONSE;
 8006558:	4b5d      	ldr	r3, [pc, #372]	; (80066d0 <setCommand+0x31c>)
 800655a:	2202      	movs	r2, #2
 800655c:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2180      	movs	r1, #128	; 0x80
 8006562:	0089      	lsls	r1, r1, #2
 8006564:	4319      	orrs	r1, r3
 8006566:	308a      	adds	r0, #138	; 0x8a
 8006568:	0040      	lsls	r0, r0, #1
 800656a:	f001 f963 	bl	8007834 <EE_WriteVariable>
 800656e:	e77c      	b.n	800646a <setCommand+0xb6>
			else if(!strncmp((const char* )pcParameterString2,"none",xParameterStringLength2)){
 8006570:	0032      	movs	r2, r6
 8006572:	495b      	ldr	r1, [pc, #364]	; (80066e0 <setCommand+0x32c>)
 8006574:	0020      	movs	r0, r4
 8006576:	f00e fc8f 	bl	8014e98 <strncmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	d000      	beq.n	8006580 <setCommand+0x1cc>
 800657e:	e256      	b.n	8006a2e <setCommand+0x67a>
				BOSMessaging.trace =TRACE_NONE;
 8006580:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <setCommand+0x31c>)
 8006582:	2200      	movs	r2, #0
 8006584:	705a      	strb	r2, [r3, #1]
				EE_WriteVariable(_EE_PARAMS_BASE,((uint16_t )BOSMessaging.trace << 8) | (uint16_t )BOSMessaging.response);
 8006586:	7819      	ldrb	r1, [r3, #0]
 8006588:	308a      	adds	r0, #138	; 0x8a
 800658a:	0040      	lsls	r0, r0, #1
 800658c:	f001 f952 	bl	8007834 <EE_WriteVariable>
 8006590:	e76b      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"clibaudrate",xParameterStringLength1 - 4)){
 8006592:	003a      	movs	r2, r7
 8006594:	4954      	ldr	r1, [pc, #336]	; (80066e8 <setCommand+0x334>)
 8006596:	0030      	movs	r0, r6
 8006598:	f00e fc7e 	bl	8014e98 <strncmp>
 800659c:	2800      	cmp	r0, #0
 800659e:	d128      	bne.n	80065f2 <setCommand+0x23e>
			temp2 =atoi((const char* )pcParameterString2);
 80065a0:	0020      	movs	r0, r4
 80065a2:	f00d ff70 	bl	8014486 <atoi>
			if(temp2 <= DEF_CLI_BAUDRATE){
 80065a6:	23e1      	movs	r3, #225	; 0xe1
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	4298      	cmp	r0, r3
 80065ac:	d900      	bls.n	80065b0 <setCommand+0x1fc>
 80065ae:	e23e      	b.n	8006a2e <setCommand+0x67a>
				BOS.clibaudrate =temp2;
 80065b0:	4c4e      	ldr	r4, [pc, #312]	; (80066ec <setCommand+0x338>)
 80065b2:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD,(uint16_t )BOS.clibaudrate);
 80065b4:	b281      	uxth	r1, r0
 80065b6:	208c      	movs	r0, #140	; 0x8c
 80065b8:	0040      	lsls	r0, r0, #1
 80065ba:	f001 f93b 	bl	8007834 <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD + 1,(uint16_t )(BOS.clibaudrate >> 16));
 80065be:	68a1      	ldr	r1, [r4, #8]
 80065c0:	0c09      	lsrs	r1, r1, #16
 80065c2:	201a      	movs	r0, #26
 80065c4:	30ff      	adds	r0, #255	; 0xff
 80065c6:	f001 f935 	bl	8007834 <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] =0;		// Get rid of the remaining parameters
 80065ca:	4b39      	ldr	r3, [pc, #228]	; (80066b0 <setCommand+0x2fc>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	2300      	movs	r3, #0
 80065d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80065d2:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,pcParameterString1,pcParameterString2);
 80065d4:	4b3b      	ldr	r3, [pc, #236]	; (80066c4 <setCommand+0x310>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	493e      	ldr	r1, [pc, #248]	; (80066d4 <setCommand+0x320>)
 80065da:	0028      	movs	r0, r5
 80065dc:	f00e fc18 	bl	8014e10 <sprintf>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI1);
 80065e0:	4943      	ldr	r1, [pc, #268]	; (80066f0 <setCommand+0x33c>)
 80065e2:	0028      	movs	r0, r5
 80065e4:	f00e fc34 	bl	8014e50 <strcat>
			strcat((char* )pcWriteBuffer,(char* )pcMessageCLI2);
 80065e8:	4942      	ldr	r1, [pc, #264]	; (80066f4 <setCommand+0x340>)
 80065ea:	0028      	movs	r0, r5
 80065ec:	f00e fc30 	bl	8014e50 <strcat>
 80065f0:	e0ef      	b.n	80067d2 <setCommand+0x41e>
		else if(!strncmp((const char* )pcParameterString1 + 4,"debounce",xParameterStringLength1 - 4)){
 80065f2:	003a      	movs	r2, r7
 80065f4:	4940      	ldr	r1, [pc, #256]	; (80066f8 <setCommand+0x344>)
 80065f6:	0030      	movs	r0, r6
 80065f8:	f00e fc4e 	bl	8014e98 <strncmp>
 80065fc:	2800      	cmp	r0, #0
 80065fe:	d10d      	bne.n	800661c <setCommand+0x268>
			temp16 =atoi((const char* )pcParameterString2);
 8006600:	0020      	movs	r0, r4
 8006602:	f00d ff40 	bl	8014486 <atoi>
 8006606:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006608:	2900      	cmp	r1, #0
 800660a:	d100      	bne.n	800660e <setCommand+0x25a>
 800660c:	e20f      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.debounce =temp16;
 800660e:	4b37      	ldr	r3, [pc, #220]	; (80066ec <setCommand+0x338>)
 8006610:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE,temp16);
 8006612:	2016      	movs	r0, #22
 8006614:	30ff      	adds	r0, #255	; 0xff
 8006616:	f001 f90d 	bl	8007834 <EE_WriteVariable>
 800661a:	e726      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"singleclicktime",xParameterStringLength1 - 4)){
 800661c:	003a      	movs	r2, r7
 800661e:	4937      	ldr	r1, [pc, #220]	; (80066fc <setCommand+0x348>)
 8006620:	0030      	movs	r0, r6
 8006622:	f00e fc39 	bl	8014e98 <strncmp>
 8006626:	2800      	cmp	r0, #0
 8006628:	d10d      	bne.n	8006646 <setCommand+0x292>
			temp16 =atoi((const char* )pcParameterString2);
 800662a:	0020      	movs	r0, r4
 800662c:	f00d ff2b 	bl	8014486 <atoi>
 8006630:	b281      	uxth	r1, r0
			if(temp16 >= 1 && temp16 <= USHRT_MAX){
 8006632:	2900      	cmp	r1, #0
 8006634:	d100      	bne.n	8006638 <setCommand+0x284>
 8006636:	e1fa      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.singleClickTime =temp16;
 8006638:	4b2c      	ldr	r3, [pc, #176]	; (80066ec <setCommand+0x338>)
 800663a:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK,temp16);
 800663c:	208b      	movs	r0, #139	; 0x8b
 800663e:	0040      	lsls	r0, r0, #1
 8006640:	f001 f8f8 	bl	8007834 <EE_WriteVariable>
 8006644:	e711      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"mininterclicktime",xParameterStringLength1 - 4)){
 8006646:	003a      	movs	r2, r7
 8006648:	492d      	ldr	r1, [pc, #180]	; (8006700 <setCommand+0x34c>)
 800664a:	0030      	movs	r0, r6
 800664c:	f00e fc24 	bl	8014e98 <strncmp>
 8006650:	2800      	cmp	r0, #0
 8006652:	d112      	bne.n	800667a <setCommand+0x2c6>
			temp16 =atoi((const char* )pcParameterString2);
 8006654:	0020      	movs	r0, r4
 8006656:	f00d ff16 	bl	8014486 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 800665a:	1e43      	subs	r3, r0, #1
 800665c:	b29b      	uxth	r3, r3
 800665e:	2bfe      	cmp	r3, #254	; 0xfe
 8006660:	d900      	bls.n	8006664 <setCommand+0x2b0>
 8006662:	e1e4      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.minInterClickTime =temp16;
 8006664:	b2c0      	uxtb	r0, r0
 8006666:	4b21      	ldr	r3, [pc, #132]	; (80066ec <setCommand+0x338>)
 8006668:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800666a:	7959      	ldrb	r1, [r3, #5]
 800666c:	0209      	lsls	r1, r1, #8
 800666e:	4301      	orrs	r1, r0
 8006670:	2018      	movs	r0, #24
 8006672:	30ff      	adds	r0, #255	; 0xff
 8006674:	f001 f8de 	bl	8007834 <EE_WriteVariable>
 8006678:	e6f7      	b.n	800646a <setCommand+0xb6>
		else if(!strncmp((const char* )pcParameterString1 + 4,"maxinterclicktime",xParameterStringLength1 - 4)){
 800667a:	003a      	movs	r2, r7
 800667c:	4921      	ldr	r1, [pc, #132]	; (8006704 <setCommand+0x350>)
 800667e:	0030      	movs	r0, r6
 8006680:	f00e fc0a 	bl	8014e98 <strncmp>
 8006684:	2800      	cmp	r0, #0
 8006686:	d000      	beq.n	800668a <setCommand+0x2d6>
 8006688:	e6c3      	b.n	8006412 <setCommand+0x5e>
			temp16 =atoi((const char* )pcParameterString2);
 800668a:	0020      	movs	r0, r4
 800668c:	f00d fefb 	bl	8014486 <atoi>
			if(temp16 >= 1 && temp16 <= UCHAR_MAX){
 8006690:	1e43      	subs	r3, r0, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	2bfe      	cmp	r3, #254	; 0xfe
 8006696:	d900      	bls.n	800669a <setCommand+0x2e6>
 8006698:	e1c9      	b.n	8006a2e <setCommand+0x67a>
				BOS.buttons.maxInterClickTime =temp16;
 800669a:	4b14      	ldr	r3, [pc, #80]	; (80066ec <setCommand+0x338>)
 800669c:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK,((uint16_t )BOS.buttons.maxInterClickTime << 8) | (uint16_t )BOS.buttons.minInterClickTime);
 800669e:	0200      	lsls	r0, r0, #8
 80066a0:	7919      	ldrb	r1, [r3, #4]
 80066a2:	4301      	orrs	r1, r0
 80066a4:	b289      	uxth	r1, r1
 80066a6:	2018      	movs	r0, #24
 80066a8:	30ff      	adds	r0, #255	; 0xff
 80066aa:	f001 f8c3 	bl	8007834 <EE_WriteVariable>
 80066ae:	e6dc      	b.n	800646a <setCommand+0xb6>
 80066b0:	20001308 	.word	0x20001308
 80066b4:	0801a164 	.word	0x0801a164
 80066b8:	0801a890 	.word	0x0801a890
 80066bc:	0801a89c 	.word	0x0801a89c
 80066c0:	0801a1ec 	.word	0x0801a1ec
 80066c4:	20001314 	.word	0x20001314
 80066c8:	0801a16c 	.word	0x0801a16c
 80066cc:	0801956c 	.word	0x0801956c
 80066d0:	20006dd4 	.word	0x20006dd4
 80066d4:	0801a798 	.word	0x0801a798
 80066d8:	0801a78c 	.word	0x0801a78c
 80066dc:	0801a794 	.word	0x0801a794
 80066e0:	0801a17c 	.word	0x0801a17c
 80066e4:	0801a184 	.word	0x0801a184
 80066e8:	0801a18c 	.word	0x0801a18c
 80066ec:	20006e54 	.word	0x20006e54
 80066f0:	0801a7ac 	.word	0x0801a7ac
 80066f4:	0801a7dc 	.word	0x0801a7dc
 80066f8:	0801a198 	.word	0x0801a198
 80066fc:	0801a1a4 	.word	0x0801a1a4
 8006700:	0801a1b4 	.word	0x0801a1b4
 8006704:	0801a1c8 	.word	0x0801a1c8
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006708:	aa0a      	add	r2, sp, #40	; 0x28
 800670a:	2102      	movs	r1, #2
 800670c:	0020      	movs	r0, r4
 800670e:	f008 fb13 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006712:	4bca      	ldr	r3, [pc, #808]	; (8006a3c <setCommand+0x688>)
 8006714:	4699      	mov	r9, r3
 8006716:	6018      	str	r0, [r3, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006718:	aa09      	add	r2, sp, #36	; 0x24
 800671a:	2103      	movs	r1, #3
 800671c:	0020      	movs	r0, r4
 800671e:	f008 fb0b 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006722:	4fc7      	ldr	r7, [pc, #796]	; (8006a40 <setCommand+0x68c>)
 8006724:	6038      	str	r0, [r7, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006726:	aa08      	add	r2, sp, #32
 8006728:	2104      	movs	r1, #4
 800672a:	0020      	movs	r0, r4
 800672c:	f008 fb04 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006730:	4ec4      	ldr	r6, [pc, #784]	; (8006a44 <setCommand+0x690>)
 8006732:	6030      	str	r0, [r6, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006734:	aa07      	add	r2, sp, #28
 8006736:	2105      	movs	r1, #5
 8006738:	0020      	movs	r0, r4
 800673a:	f008 fafd 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800673e:	4cc2      	ldr	r4, [pc, #776]	; (8006a48 <setCommand+0x694>)
 8006740:	6020      	str	r0, [r4, #0]
		temp81 =atoi((const char* )pcParameterString2);		// Hours
 8006742:	464b      	mov	r3, r9
 8006744:	6818      	ldr	r0, [r3, #0]
 8006746:	f00d fe9e 	bl	8014486 <atoi>
 800674a:	b2c3      	uxtb	r3, r0
 800674c:	4699      	mov	r9, r3
		temp82 =atoi((const char* )pcParameterString3);		// Minutes
 800674e:	6838      	ldr	r0, [r7, #0]
 8006750:	f00d fe99 	bl	8014486 <atoi>
 8006754:	b2c7      	uxtb	r7, r0
		temp83 =atoi((const char* )pcParameterString4);		// Seconds
 8006756:	6830      	ldr	r0, [r6, #0]
 8006758:	f00d fe95 	bl	8014486 <atoi>
 800675c:	b2c6      	uxtb	r6, r0
		if(pcParameterString5 != NULL){
 800675e:	6824      	ldr	r4, [r4, #0]
 8006760:	2c00      	cmp	r4, #0
 8006762:	d010      	beq.n	8006786 <setCommand+0x3d2>
			if(!strncmp((const char* )pcParameterString5,"am",2))
 8006764:	2202      	movs	r2, #2
 8006766:	49b9      	ldr	r1, [pc, #740]	; (8006a4c <setCommand+0x698>)
 8006768:	0020      	movs	r0, r4
 800676a:	f00e fb95 	bl	8014e98 <strncmp>
 800676e:	2800      	cmp	r0, #0
 8006770:	d035      	beq.n	80067de <setCommand+0x42a>
			else if(!strncmp((const char* )pcParameterString5,"pm",2))
 8006772:	2202      	movs	r2, #2
 8006774:	49b6      	ldr	r1, [pc, #728]	; (8006a50 <setCommand+0x69c>)
 8006776:	0020      	movs	r0, r4
 8006778:	f00e fb8e 	bl	8014e98 <strncmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	d000      	beq.n	8006782 <setCommand+0x3ce>
 8006780:	e155      	b.n	8006a2e <setCommand+0x67a>
				temp84 =RTC_PM;
 8006782:	2302      	movs	r3, #2
 8006784:	4698      	mov	r8, r3
			if(temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006786:	464b      	mov	r3, r9
 8006788:	2b17      	cmp	r3, #23
 800678a:	d900      	bls.n	800678e <setCommand+0x3da>
 800678c:	e14f      	b.n	8006a2e <setCommand+0x67a>
 800678e:	2f3b      	cmp	r7, #59	; 0x3b
 8006790:	d900      	bls.n	8006794 <setCommand+0x3e0>
 8006792:	e14c      	b.n	8006a2e <setCommand+0x67a>
 8006794:	2e3b      	cmp	r6, #59	; 0x3b
 8006796:	d900      	bls.n	800679a <setCommand+0x3e6>
 8006798:	e149      	b.n	8006a2e <setCommand+0x67a>
				GetTimeDate();
 800679a:	f007 fde3 	bl	800e364 <GetTimeDate>
				result =BOS_CalendarConfig(BOS.date.month,BOS.date.day,BOS.date.year,BOS.date.weekday,temp83,temp82,temp81,temp84,BOS.daylightsaving);
 800679e:	4cad      	ldr	r4, [pc, #692]	; (8006a54 <setCommand+0x6a0>)
 80067a0:	7d23      	ldrb	r3, [r4, #20]
 80067a2:	8b22      	ldrh	r2, [r4, #24]
 80067a4:	7d61      	ldrb	r1, [r4, #21]
 80067a6:	7da0      	ldrb	r0, [r4, #22]
 80067a8:	7b24      	ldrb	r4, [r4, #12]
 80067aa:	b264      	sxtb	r4, r4
 80067ac:	9404      	str	r4, [sp, #16]
 80067ae:	4644      	mov	r4, r8
 80067b0:	9403      	str	r4, [sp, #12]
 80067b2:	464c      	mov	r4, r9
 80067b4:	9402      	str	r4, [sp, #8]
 80067b6:	9701      	str	r7, [sp, #4]
 80067b8:	9600      	str	r6, [sp, #0]
 80067ba:	f007 fd79 	bl	800e2b0 <BOS_CalendarConfig>
 80067be:	0006      	movs	r6, r0
	if(result == BOS_OK){
 80067c0:	2e00      	cmp	r6, #0
 80067c2:	d100      	bne.n	80067c6 <setCommand+0x412>
 80067c4:	e651      	b.n	800646a <setCommand+0xb6>
	else if(result == BOS_ERR_WrongParam)
 80067c6:	2e67      	cmp	r6, #103	; 0x67
 80067c8:	d100      	bne.n	80067cc <setCommand+0x418>
 80067ca:	e622      	b.n	8006412 <setCommand+0x5e>
	else if(result == BOS_ERR_WrongValue)
 80067cc:	2e68      	cmp	r6, #104	; 0x68
 80067ce:	d100      	bne.n	80067d2 <setCommand+0x41e>
 80067d0:	e12d      	b.n	8006a2e <setCommand+0x67a>
}
 80067d2:	2000      	movs	r0, #0
 80067d4:	b00d      	add	sp, #52	; 0x34
 80067d6:	bc0c      	pop	{r2, r3}
 80067d8:	4690      	mov	r8, r2
 80067da:	4699      	mov	r9, r3
 80067dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp84 =RTC_AM;
 80067de:	2301      	movs	r3, #1
 80067e0:	4698      	mov	r8, r3
 80067e2:	e7d0      	b.n	8006786 <setCommand+0x3d2>
		pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 80067e4:	aa0a      	add	r2, sp, #40	; 0x28
 80067e6:	2102      	movs	r1, #2
 80067e8:	0020      	movs	r0, r4
 80067ea:	f008 faa5 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80067ee:	4e93      	ldr	r6, [pc, #588]	; (8006a3c <setCommand+0x688>)
 80067f0:	6030      	str	r0, [r6, #0]
		pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80067f2:	aa09      	add	r2, sp, #36	; 0x24
 80067f4:	2103      	movs	r1, #3
 80067f6:	0020      	movs	r0, r4
 80067f8:	f008 fa9e 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80067fc:	4b90      	ldr	r3, [pc, #576]	; (8006a40 <setCommand+0x68c>)
 80067fe:	6018      	str	r0, [r3, #0]
		pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006800:	aa08      	add	r2, sp, #32
 8006802:	2104      	movs	r1, #4
 8006804:	0020      	movs	r0, r4
 8006806:	f008 fa97 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800680a:	4b8e      	ldr	r3, [pc, #568]	; (8006a44 <setCommand+0x690>)
 800680c:	4698      	mov	r8, r3
 800680e:	6018      	str	r0, [r3, #0]
		pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006810:	aa07      	add	r2, sp, #28
 8006812:	2105      	movs	r1, #5
 8006814:	0020      	movs	r0, r4
 8006816:	f008 fa8f 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800681a:	4c8b      	ldr	r4, [pc, #556]	; (8006a48 <setCommand+0x694>)
 800681c:	6020      	str	r0, [r4, #0]
		temp83 =atoi((const char* )pcParameterString4);		// day
 800681e:	4643      	mov	r3, r8
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f00d fe30 	bl	8014486 <atoi>
 8006826:	b2c3      	uxtb	r3, r0
 8006828:	4698      	mov	r8, r3
		temp16 =atoi((const char* )pcParameterString5);		// year
 800682a:	6820      	ldr	r0, [r4, #0]
 800682c:	f00d fe2b 	bl	8014486 <atoi>
 8006830:	b283      	uxth	r3, r0
 8006832:	4699      	mov	r9, r3
		if(!strncmp((const char* )pcParameterString2,"monday",6))
 8006834:	6834      	ldr	r4, [r6, #0]
 8006836:	2206      	movs	r2, #6
 8006838:	4987      	ldr	r1, [pc, #540]	; (8006a58 <setCommand+0x6a4>)
 800683a:	0020      	movs	r0, r4
 800683c:	f00e fb2c 	bl	8014e98 <strncmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	d100      	bne.n	8006846 <setCommand+0x492>
 8006844:	e195      	b.n	8006b72 <setCommand+0x7be>
		else if(!strncmp((const char* )pcParameterString2,"tuesday",7))
 8006846:	2207      	movs	r2, #7
 8006848:	4984      	ldr	r1, [pc, #528]	; (8006a5c <setCommand+0x6a8>)
 800684a:	0020      	movs	r0, r4
 800684c:	f00e fb24 	bl	8014e98 <strncmp>
 8006850:	2800      	cmp	r0, #0
 8006852:	d100      	bne.n	8006856 <setCommand+0x4a2>
 8006854:	e19b      	b.n	8006b8e <setCommand+0x7da>
		else if(!strncmp((const char* )pcParameterString2,"wednesday",9))
 8006856:	2209      	movs	r2, #9
 8006858:	4981      	ldr	r1, [pc, #516]	; (8006a60 <setCommand+0x6ac>)
 800685a:	0020      	movs	r0, r4
 800685c:	f00e fb1c 	bl	8014e98 <strncmp>
 8006860:	2800      	cmp	r0, #0
 8006862:	d100      	bne.n	8006866 <setCommand+0x4b2>
 8006864:	e195      	b.n	8006b92 <setCommand+0x7de>
		else if(!strncmp((const char* )pcParameterString2,"thursday",8))
 8006866:	2208      	movs	r2, #8
 8006868:	497e      	ldr	r1, [pc, #504]	; (8006a64 <setCommand+0x6b0>)
 800686a:	0020      	movs	r0, r4
 800686c:	f00e fb14 	bl	8014e98 <strncmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	d100      	bne.n	8006876 <setCommand+0x4c2>
 8006874:	e18f      	b.n	8006b96 <setCommand+0x7e2>
		else if(!strncmp((const char* )pcParameterString2,"friday",6))
 8006876:	2206      	movs	r2, #6
 8006878:	497b      	ldr	r1, [pc, #492]	; (8006a68 <setCommand+0x6b4>)
 800687a:	0020      	movs	r0, r4
 800687c:	f00e fb0c 	bl	8014e98 <strncmp>
 8006880:	2800      	cmp	r0, #0
 8006882:	d100      	bne.n	8006886 <setCommand+0x4d2>
 8006884:	e189      	b.n	8006b9a <setCommand+0x7e6>
		else if(!strncmp((const char* )pcParameterString2,"saturday",8))
 8006886:	2208      	movs	r2, #8
 8006888:	4978      	ldr	r1, [pc, #480]	; (8006a6c <setCommand+0x6b8>)
 800688a:	0020      	movs	r0, r4
 800688c:	f00e fb04 	bl	8014e98 <strncmp>
 8006890:	2800      	cmp	r0, #0
 8006892:	d100      	bne.n	8006896 <setCommand+0x4e2>
 8006894:	e183      	b.n	8006b9e <setCommand+0x7ea>
		else if(!strncmp((const char* )pcParameterString2,"sunday",6))
 8006896:	2206      	movs	r2, #6
 8006898:	4975      	ldr	r1, [pc, #468]	; (8006a70 <setCommand+0x6bc>)
 800689a:	0020      	movs	r0, r4
 800689c:	f00e fafc 	bl	8014e98 <strncmp>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d100      	bne.n	80068a6 <setCommand+0x4f2>
 80068a4:	e17d      	b.n	8006ba2 <setCommand+0x7ee>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068a6:	4b66      	ldr	r3, [pc, #408]	; (8006a40 <setCommand+0x68c>)
 80068a8:	681c      	ldr	r4, [r3, #0]
 80068aa:	2207      	movs	r2, #7
 80068ac:	4971      	ldr	r1, [pc, #452]	; (8006a74 <setCommand+0x6c0>)
 80068ae:	0020      	movs	r0, r4
 80068b0:	f00e faf2 	bl	8014e98 <strncmp>
			result =BOS_ERR_WrongValue;
 80068b4:	2668      	movs	r6, #104	; 0x68
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068b6:	2800      	cmp	r0, #0
 80068b8:	d101      	bne.n	80068be <setCommand+0x50a>
			result =BOS_ERR_WrongValue;
 80068ba:	2668      	movs	r6, #104	; 0x68
 80068bc:	e783      	b.n	80067c6 <setCommand+0x412>
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 80068be:	2202      	movs	r2, #2
 80068c0:	496d      	ldr	r1, [pc, #436]	; (8006a78 <setCommand+0x6c4>)
 80068c2:	0020      	movs	r0, r4
 80068c4:	f00e fae8 	bl	8014e98 <strncmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d100      	bne.n	80068ce <setCommand+0x51a>
 80068cc:	e104      	b.n	8006ad8 <setCommand+0x724>
		else if(!strncmp((const char* )pcParameterString3,"february",8) || !strncmp((const char* )pcParameterString3,"2 ",2))
 80068ce:	2208      	movs	r2, #8
 80068d0:	496a      	ldr	r1, [pc, #424]	; (8006a7c <setCommand+0x6c8>)
 80068d2:	0020      	movs	r0, r4
 80068d4:	f00e fae0 	bl	8014e98 <strncmp>
 80068d8:	2800      	cmp	r0, #0
 80068da:	d100      	bne.n	80068de <setCommand+0x52a>
 80068dc:	e11f      	b.n	8006b1e <setCommand+0x76a>
 80068de:	2202      	movs	r2, #2
 80068e0:	4967      	ldr	r1, [pc, #412]	; (8006a80 <setCommand+0x6cc>)
 80068e2:	0020      	movs	r0, r4
 80068e4:	f00e fad8 	bl	8014e98 <strncmp>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d100      	bne.n	80068ee <setCommand+0x53a>
 80068ec:	e119      	b.n	8006b22 <setCommand+0x76e>
		else if(!strncmp((const char* )pcParameterString3,"march",5) || !strncmp((const char* )pcParameterString3,"3 ",2))
 80068ee:	2205      	movs	r2, #5
 80068f0:	4964      	ldr	r1, [pc, #400]	; (8006a84 <setCommand+0x6d0>)
 80068f2:	0020      	movs	r0, r4
 80068f4:	f00e fad0 	bl	8014e98 <strncmp>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d100      	bne.n	80068fe <setCommand+0x54a>
 80068fc:	e113      	b.n	8006b26 <setCommand+0x772>
 80068fe:	2202      	movs	r2, #2
 8006900:	4961      	ldr	r1, [pc, #388]	; (8006a88 <setCommand+0x6d4>)
 8006902:	0020      	movs	r0, r4
 8006904:	f00e fac8 	bl	8014e98 <strncmp>
 8006908:	2800      	cmp	r0, #0
 800690a:	d100      	bne.n	800690e <setCommand+0x55a>
 800690c:	e10d      	b.n	8006b2a <setCommand+0x776>
		else if(!strncmp((const char* )pcParameterString3,"april",5) || !strncmp((const char* )pcParameterString3,"4 ",2))
 800690e:	2205      	movs	r2, #5
 8006910:	495e      	ldr	r1, [pc, #376]	; (8006a8c <setCommand+0x6d8>)
 8006912:	0020      	movs	r0, r4
 8006914:	f00e fac0 	bl	8014e98 <strncmp>
 8006918:	2800      	cmp	r0, #0
 800691a:	d100      	bne.n	800691e <setCommand+0x56a>
 800691c:	e107      	b.n	8006b2e <setCommand+0x77a>
 800691e:	2202      	movs	r2, #2
 8006920:	495b      	ldr	r1, [pc, #364]	; (8006a90 <setCommand+0x6dc>)
 8006922:	0020      	movs	r0, r4
 8006924:	f00e fab8 	bl	8014e98 <strncmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	d100      	bne.n	800692e <setCommand+0x57a>
 800692c:	e101      	b.n	8006b32 <setCommand+0x77e>
		else if(!strncmp((const char* )pcParameterString3,"may",3) || !strncmp((const char* )pcParameterString3,"5 ",2))
 800692e:	2203      	movs	r2, #3
 8006930:	4958      	ldr	r1, [pc, #352]	; (8006a94 <setCommand+0x6e0>)
 8006932:	0020      	movs	r0, r4
 8006934:	f00e fab0 	bl	8014e98 <strncmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	d100      	bne.n	800693e <setCommand+0x58a>
 800693c:	e0fb      	b.n	8006b36 <setCommand+0x782>
 800693e:	2202      	movs	r2, #2
 8006940:	4955      	ldr	r1, [pc, #340]	; (8006a98 <setCommand+0x6e4>)
 8006942:	0020      	movs	r0, r4
 8006944:	f00e faa8 	bl	8014e98 <strncmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	d100      	bne.n	800694e <setCommand+0x59a>
 800694c:	e0f5      	b.n	8006b3a <setCommand+0x786>
		else if(!strncmp((const char* )pcParameterString3,"june",4) || !strncmp((const char* )pcParameterString3,"6 ",2))
 800694e:	2204      	movs	r2, #4
 8006950:	4952      	ldr	r1, [pc, #328]	; (8006a9c <setCommand+0x6e8>)
 8006952:	0020      	movs	r0, r4
 8006954:	f00e faa0 	bl	8014e98 <strncmp>
 8006958:	2800      	cmp	r0, #0
 800695a:	d100      	bne.n	800695e <setCommand+0x5aa>
 800695c:	e0ef      	b.n	8006b3e <setCommand+0x78a>
 800695e:	2202      	movs	r2, #2
 8006960:	494f      	ldr	r1, [pc, #316]	; (8006aa0 <setCommand+0x6ec>)
 8006962:	0020      	movs	r0, r4
 8006964:	f00e fa98 	bl	8014e98 <strncmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	d100      	bne.n	800696e <setCommand+0x5ba>
 800696c:	e0e9      	b.n	8006b42 <setCommand+0x78e>
		else if(!strncmp((const char* )pcParameterString3,"july",4) || !strncmp((const char* )pcParameterString3,"7 ",2))
 800696e:	2204      	movs	r2, #4
 8006970:	494c      	ldr	r1, [pc, #304]	; (8006aa4 <setCommand+0x6f0>)
 8006972:	0020      	movs	r0, r4
 8006974:	f00e fa90 	bl	8014e98 <strncmp>
 8006978:	2800      	cmp	r0, #0
 800697a:	d100      	bne.n	800697e <setCommand+0x5ca>
 800697c:	e0e3      	b.n	8006b46 <setCommand+0x792>
 800697e:	2202      	movs	r2, #2
 8006980:	4949      	ldr	r1, [pc, #292]	; (8006aa8 <setCommand+0x6f4>)
 8006982:	0020      	movs	r0, r4
 8006984:	f00e fa88 	bl	8014e98 <strncmp>
 8006988:	2800      	cmp	r0, #0
 800698a:	d100      	bne.n	800698e <setCommand+0x5da>
 800698c:	e0dd      	b.n	8006b4a <setCommand+0x796>
		else if(!strncmp((const char* )pcParameterString3,"august",5) || !strncmp((const char* )pcParameterString3,"8 ",2))
 800698e:	2205      	movs	r2, #5
 8006990:	4946      	ldr	r1, [pc, #280]	; (8006aac <setCommand+0x6f8>)
 8006992:	0020      	movs	r0, r4
 8006994:	f00e fa80 	bl	8014e98 <strncmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	d100      	bne.n	800699e <setCommand+0x5ea>
 800699c:	e0d7      	b.n	8006b4e <setCommand+0x79a>
 800699e:	2202      	movs	r2, #2
 80069a0:	4943      	ldr	r1, [pc, #268]	; (8006ab0 <setCommand+0x6fc>)
 80069a2:	0020      	movs	r0, r4
 80069a4:	f00e fa78 	bl	8014e98 <strncmp>
 80069a8:	2800      	cmp	r0, #0
 80069aa:	d100      	bne.n	80069ae <setCommand+0x5fa>
 80069ac:	e0d1      	b.n	8006b52 <setCommand+0x79e>
		else if(!strncmp((const char* )pcParameterString3,"september",9) || !strncmp((const char* )pcParameterString3,"9 ",2))
 80069ae:	2209      	movs	r2, #9
 80069b0:	4940      	ldr	r1, [pc, #256]	; (8006ab4 <setCommand+0x700>)
 80069b2:	0020      	movs	r0, r4
 80069b4:	f00e fa70 	bl	8014e98 <strncmp>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d100      	bne.n	80069be <setCommand+0x60a>
 80069bc:	e0cb      	b.n	8006b56 <setCommand+0x7a2>
 80069be:	2202      	movs	r2, #2
 80069c0:	493d      	ldr	r1, [pc, #244]	; (8006ab8 <setCommand+0x704>)
 80069c2:	0020      	movs	r0, r4
 80069c4:	f00e fa68 	bl	8014e98 <strncmp>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d100      	bne.n	80069ce <setCommand+0x61a>
 80069cc:	e0c5      	b.n	8006b5a <setCommand+0x7a6>
		else if(!strncmp((const char* )pcParameterString3,"october",7) || !strncmp((const char* )pcParameterString3,"10",2))
 80069ce:	2207      	movs	r2, #7
 80069d0:	493a      	ldr	r1, [pc, #232]	; (8006abc <setCommand+0x708>)
 80069d2:	0020      	movs	r0, r4
 80069d4:	f00e fa60 	bl	8014e98 <strncmp>
 80069d8:	2800      	cmp	r0, #0
 80069da:	d100      	bne.n	80069de <setCommand+0x62a>
 80069dc:	e0bf      	b.n	8006b5e <setCommand+0x7aa>
 80069de:	2202      	movs	r2, #2
 80069e0:	4937      	ldr	r1, [pc, #220]	; (8006ac0 <setCommand+0x70c>)
 80069e2:	0020      	movs	r0, r4
 80069e4:	f00e fa58 	bl	8014e98 <strncmp>
 80069e8:	2800      	cmp	r0, #0
 80069ea:	d100      	bne.n	80069ee <setCommand+0x63a>
 80069ec:	e0b9      	b.n	8006b62 <setCommand+0x7ae>
		else if(!strncmp((const char* )pcParameterString3,"november",8) || !strncmp((const char* )pcParameterString3,"11",2))
 80069ee:	2208      	movs	r2, #8
 80069f0:	4934      	ldr	r1, [pc, #208]	; (8006ac4 <setCommand+0x710>)
 80069f2:	0020      	movs	r0, r4
 80069f4:	f00e fa50 	bl	8014e98 <strncmp>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	d100      	bne.n	80069fe <setCommand+0x64a>
 80069fc:	e0b3      	b.n	8006b66 <setCommand+0x7b2>
 80069fe:	2202      	movs	r2, #2
 8006a00:	4931      	ldr	r1, [pc, #196]	; (8006ac8 <setCommand+0x714>)
 8006a02:	0020      	movs	r0, r4
 8006a04:	f00e fa48 	bl	8014e98 <strncmp>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d100      	bne.n	8006a0e <setCommand+0x65a>
 8006a0c:	e0ad      	b.n	8006b6a <setCommand+0x7b6>
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006a0e:	2208      	movs	r2, #8
 8006a10:	492e      	ldr	r1, [pc, #184]	; (8006acc <setCommand+0x718>)
 8006a12:	0020      	movs	r0, r4
 8006a14:	f00e fa40 	bl	8014e98 <strncmp>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d100      	bne.n	8006a1e <setCommand+0x66a>
 8006a1c:	e0a7      	b.n	8006b6e <setCommand+0x7ba>
 8006a1e:	2202      	movs	r2, #2
 8006a20:	492b      	ldr	r1, [pc, #172]	; (8006ad0 <setCommand+0x71c>)
 8006a22:	0020      	movs	r0, r4
 8006a24:	f00e fa38 	bl	8014e98 <strncmp>
			temp82 =DECEMBER;
 8006a28:	240c      	movs	r4, #12
		else if(!strncmp((const char* )pcParameterString3,"december",8) || !strncmp((const char* )pcParameterString3,"12",2))
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	d055      	beq.n	8006ada <setCommand+0x726>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 8006a2e:	220f      	movs	r2, #15
 8006a30:	4928      	ldr	r1, [pc, #160]	; (8006ad4 <setCommand+0x720>)
 8006a32:	0028      	movs	r0, r5
 8006a34:	f00d ffb7 	bl	80149a6 <memcpy>
 8006a38:	e6cb      	b.n	80067d2 <setCommand+0x41e>
 8006a3a:	46c0      	nop			; (mov r8, r8)
 8006a3c:	20001314 	.word	0x20001314
 8006a40:	2000131c 	.word	0x2000131c
 8006a44:	20001320 	.word	0x20001320
 8006a48:	20001324 	.word	0x20001324
 8006a4c:	0801c04c 	.word	0x0801c04c
 8006a50:	0801a898 	.word	0x0801a898
 8006a54:	20006e54 	.word	0x20006e54
 8006a58:	0801a8a4 	.word	0x0801a8a4
 8006a5c:	0801a8ac 	.word	0x0801a8ac
 8006a60:	0801a8b4 	.word	0x0801a8b4
 8006a64:	0801a8c0 	.word	0x0801a8c0
 8006a68:	0801a8cc 	.word	0x0801a8cc
 8006a6c:	0801a8d4 	.word	0x0801a8d4
 8006a70:	0801a8e0 	.word	0x0801a8e0
 8006a74:	0801a97c 	.word	0x0801a97c
 8006a78:	0801a8e8 	.word	0x0801a8e8
 8006a7c:	0801a8ec 	.word	0x0801a8ec
 8006a80:	0801a8f8 	.word	0x0801a8f8
 8006a84:	0801a8fc 	.word	0x0801a8fc
 8006a88:	0801a904 	.word	0x0801a904
 8006a8c:	0801a908 	.word	0x0801a908
 8006a90:	0801a910 	.word	0x0801a910
 8006a94:	0801a914 	.word	0x0801a914
 8006a98:	0801a918 	.word	0x0801a918
 8006a9c:	0801a91c 	.word	0x0801a91c
 8006aa0:	0801a924 	.word	0x0801a924
 8006aa4:	0801a928 	.word	0x0801a928
 8006aa8:	0801a930 	.word	0x0801a930
 8006aac:	0801a934 	.word	0x0801a934
 8006ab0:	0801a93c 	.word	0x0801a93c
 8006ab4:	0801a940 	.word	0x0801a940
 8006ab8:	0801a94c 	.word	0x0801a94c
 8006abc:	0801a950 	.word	0x0801a950
 8006ac0:	0801a958 	.word	0x0801a958
 8006ac4:	0801a95c 	.word	0x0801a95c
 8006ac8:	0801a968 	.word	0x0801a968
 8006acc:	0801a96c 	.word	0x0801a96c
 8006ad0:	0801a978 	.word	0x0801a978
 8006ad4:	0801a058 	.word	0x0801a058
			temp82 =JANUARY;
 8006ad8:	2401      	movs	r4, #1
		if(result == BOS_OK){
 8006ada:	2e00      	cmp	r6, #0
 8006adc:	d000      	beq.n	8006ae0 <setCommand+0x72c>
 8006ade:	e672      	b.n	80067c6 <setCommand+0x412>
			if(temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006ae0:	4643      	mov	r3, r8
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	2b1e      	cmp	r3, #30
 8006ae6:	d8a2      	bhi.n	8006a2e <setCommand+0x67a>
 8006ae8:	4b2f      	ldr	r3, [pc, #188]	; (8006ba8 <setCommand+0x7f4>)
 8006aea:	444b      	add	r3, r9
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d89d      	bhi.n	8006a2e <setCommand+0x67a>
				GetTimeDate();
 8006af2:	f007 fc37 	bl	800e364 <GetTimeDate>
				result =BOS_CalendarConfig(temp82,temp83,temp16,temp81,BOS.time.seconds,BOS.time.minutes,BOS.time.hours,BOS.time.ampm,BOS.daylightsaving);
 8006af6:	4b2d      	ldr	r3, [pc, #180]	; (8006bac <setCommand+0x7f8>)
 8006af8:	220c      	movs	r2, #12
 8006afa:	569a      	ldrsb	r2, [r3, r2]
 8006afc:	9204      	str	r2, [sp, #16]
 8006afe:	7cda      	ldrb	r2, [r3, #19]
 8006b00:	9203      	str	r2, [sp, #12]
 8006b02:	7c9a      	ldrb	r2, [r3, #18]
 8006b04:	9202      	str	r2, [sp, #8]
 8006b06:	7c5a      	ldrb	r2, [r3, #17]
 8006b08:	9201      	str	r2, [sp, #4]
 8006b0a:	7c1b      	ldrb	r3, [r3, #16]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	003b      	movs	r3, r7
 8006b10:	464a      	mov	r2, r9
 8006b12:	4641      	mov	r1, r8
 8006b14:	0020      	movs	r0, r4
 8006b16:	f007 fbcb 	bl	800e2b0 <BOS_CalendarConfig>
 8006b1a:	0006      	movs	r6, r0
 8006b1c:	e650      	b.n	80067c0 <setCommand+0x40c>
			temp82 =FEBRUARY;
 8006b1e:	2402      	movs	r4, #2
 8006b20:	e7db      	b.n	8006ada <setCommand+0x726>
 8006b22:	2402      	movs	r4, #2
 8006b24:	e7d9      	b.n	8006ada <setCommand+0x726>
			temp82 =MARCH;
 8006b26:	2403      	movs	r4, #3
 8006b28:	e7d7      	b.n	8006ada <setCommand+0x726>
 8006b2a:	2403      	movs	r4, #3
 8006b2c:	e7d5      	b.n	8006ada <setCommand+0x726>
			temp82 =APRIL;
 8006b2e:	2404      	movs	r4, #4
 8006b30:	e7d3      	b.n	8006ada <setCommand+0x726>
 8006b32:	2404      	movs	r4, #4
 8006b34:	e7d1      	b.n	8006ada <setCommand+0x726>
			temp82 =MAY;
 8006b36:	2405      	movs	r4, #5
 8006b38:	e7cf      	b.n	8006ada <setCommand+0x726>
 8006b3a:	2405      	movs	r4, #5
 8006b3c:	e7cd      	b.n	8006ada <setCommand+0x726>
			temp82 =JUNE;
 8006b3e:	2406      	movs	r4, #6
 8006b40:	e7cb      	b.n	8006ada <setCommand+0x726>
 8006b42:	2406      	movs	r4, #6
 8006b44:	e7c9      	b.n	8006ada <setCommand+0x726>
			temp82 =JULY;
 8006b46:	2407      	movs	r4, #7
 8006b48:	e7c7      	b.n	8006ada <setCommand+0x726>
 8006b4a:	2407      	movs	r4, #7
 8006b4c:	e7c5      	b.n	8006ada <setCommand+0x726>
			temp82 =AUGUST;
 8006b4e:	2408      	movs	r4, #8
 8006b50:	e7c3      	b.n	8006ada <setCommand+0x726>
 8006b52:	2408      	movs	r4, #8
 8006b54:	e7c1      	b.n	8006ada <setCommand+0x726>
			temp82 =SEPTEMBER;
 8006b56:	2409      	movs	r4, #9
 8006b58:	e7bf      	b.n	8006ada <setCommand+0x726>
 8006b5a:	2409      	movs	r4, #9
 8006b5c:	e7bd      	b.n	8006ada <setCommand+0x726>
			temp82 =OCTOBER;
 8006b5e:	240a      	movs	r4, #10
 8006b60:	e7bb      	b.n	8006ada <setCommand+0x726>
 8006b62:	240a      	movs	r4, #10
 8006b64:	e7b9      	b.n	8006ada <setCommand+0x726>
			temp82 =NOVEMBER;
 8006b66:	240b      	movs	r4, #11
 8006b68:	e7b7      	b.n	8006ada <setCommand+0x726>
 8006b6a:	240b      	movs	r4, #11
 8006b6c:	e7b5      	b.n	8006ada <setCommand+0x726>
			temp82 =DECEMBER;
 8006b6e:	240c      	movs	r4, #12
 8006b70:	e7b3      	b.n	8006ada <setCommand+0x726>
			temp81 =MONDAY;
 8006b72:	2701      	movs	r7, #1
		if(!strncmp((const char* )pcParameterString3,"january",7) || !strncmp((const char* )pcParameterString3,"1 ",2))
 8006b74:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <setCommand+0x7fc>)
 8006b76:	681c      	ldr	r4, [r3, #0]
 8006b78:	2207      	movs	r2, #7
 8006b7a:	490e      	ldr	r1, [pc, #56]	; (8006bb4 <setCommand+0x800>)
 8006b7c:	0020      	movs	r0, r4
 8006b7e:	f00e f98b 	bl	8014e98 <strncmp>
 8006b82:	2600      	movs	r6, #0
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d000      	beq.n	8006b8a <setCommand+0x7d6>
 8006b88:	e699      	b.n	80068be <setCommand+0x50a>
			temp82 =JANUARY;
 8006b8a:	2401      	movs	r4, #1
 8006b8c:	e7a8      	b.n	8006ae0 <setCommand+0x72c>
			temp81 =TUESDAY;
 8006b8e:	2702      	movs	r7, #2
 8006b90:	e7f0      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =WEDNESDAY;
 8006b92:	2703      	movs	r7, #3
 8006b94:	e7ee      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =THURSDAY;
 8006b96:	2704      	movs	r7, #4
 8006b98:	e7ec      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =FRIDAY;
 8006b9a:	2705      	movs	r7, #5
 8006b9c:	e7ea      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =SATURDAY;
 8006b9e:	2706      	movs	r7, #6
 8006ba0:	e7e8      	b.n	8006b74 <setCommand+0x7c0>
			temp81 =SUNDAY;
 8006ba2:	2707      	movs	r7, #7
 8006ba4:	e7e6      	b.n	8006b74 <setCommand+0x7c0>
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	fffff830 	.word	0xfffff830
 8006bac:	20006e54 	.word	0x20006e54
 8006bb0:	2000131c 	.word	0x2000131c
 8006bb4:	0801a97c 	.word	0x0801a97c

08006bb8 <removebuttonCommand>:
static portBASE_TYPE removebuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006bb8:	b530      	push	{r4, r5, lr}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	0005      	movs	r5, r0
 8006bbe:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 =0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	9301      	str	r3, [sp, #4]
	configASSERT(pcWriteBuffer);
 8006bc4:	2d00      	cmp	r5, #0
 8006bc6:	d101      	bne.n	8006bcc <removebuttonCommand+0x14>
 8006bc8:	b672      	cpsid	i
 8006bca:	e7fe      	b.n	8006bca <removebuttonCommand+0x12>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006bcc:	aa01      	add	r2, sp, #4
 8006bce:	2101      	movs	r1, #1
 8006bd0:	f008 f8b2 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'p'){
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0;
 8006bd8:	2400      	movs	r4, #0
	if(pcParameterString1[0] == 'p'){
 8006bda:	2b70      	cmp	r3, #112	; 0x70
 8006bdc:	d007      	beq.n	8006bee <removebuttonCommand+0x36>
	result =RemovePortButton(port);
 8006bde:	0020      	movs	r0, r4
 8006be0:	f001 fd68 	bl	80086b4 <RemovePortButton>
	if(result == BOS_OK){
 8006be4:	2800      	cmp	r0, #0
 8006be6:	d007      	beq.n	8006bf8 <removebuttonCommand+0x40>
}
 8006be8:	2000      	movs	r0, #0
 8006bea:	b003      	add	sp, #12
 8006bec:	bd30      	pop	{r4, r5, pc}
		port =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006bee:	3001      	adds	r0, #1
 8006bf0:	f00d fc4f 	bl	8014492 <atol>
 8006bf4:	b2c4      	uxtb	r4, r0
 8006bf6:	e7f2      	b.n	8006bde <removebuttonCommand+0x26>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,port,port);
 8006bf8:	0023      	movs	r3, r4
 8006bfa:	0022      	movs	r2, r4
 8006bfc:	4902      	ldr	r1, [pc, #8]	; (8006c08 <removebuttonCommand+0x50>)
 8006bfe:	0028      	movs	r0, r5
 8006c00:	f00e f906 	bl	8014e10 <sprintf>
 8006c04:	e7f0      	b.n	8006be8 <removebuttonCommand+0x30>
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	0801a63c 	.word	0x0801a63c

08006c0c <addbuttonCommand>:
static portBASE_TYPE addbuttonCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c0e:	b087      	sub	sp, #28
 8006c10:	0006      	movs	r6, r0
 8006c12:	9203      	str	r2, [sp, #12]
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	9305      	str	r3, [sp, #20]
 8006c18:	9304      	str	r3, [sp, #16]
	configASSERT(pcWriteBuffer);
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d101      	bne.n	8006c22 <addbuttonCommand+0x16>
 8006c1e:	b672      	cpsid	i
 8006c20:	e7fe      	b.n	8006c20 <addbuttonCommand+0x14>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006c22:	aa05      	add	r2, sp, #20
 8006c24:	2101      	movs	r1, #1
 8006c26:	9803      	ldr	r0, [sp, #12]
 8006c28:	f008 f886 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006c2c:	0004      	movs	r4, r0
 8006c2e:	4b23      	ldr	r3, [pc, #140]	; (8006cbc <addbuttonCommand+0xb0>)
 8006c30:	6018      	str	r0, [r3, #0]
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c32:	9d05      	ldr	r5, [sp, #20]
 8006c34:	002a      	movs	r2, r5
 8006c36:	4922      	ldr	r1, [pc, #136]	; (8006cc0 <addbuttonCommand+0xb4>)
 8006c38:	f00e f92e 	bl	8014e98 <strncmp>
		type =MOMENTARY_NO;
 8006c3c:	2701      	movs	r7, #1
	if(!strncmp((const char* )pcParameterString1,"momentary-no",xParameterStringLength1)){
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d017      	beq.n	8006c72 <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c42:	002a      	movs	r2, r5
 8006c44:	491f      	ldr	r1, [pc, #124]	; (8006cc4 <addbuttonCommand+0xb8>)
 8006c46:	0020      	movs	r0, r4
 8006c48:	f00e f926 	bl	8014e98 <strncmp>
		type =MOMENTARY_NC;
 8006c4c:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"momentary-nc",xParameterStringLength1)){
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d00f      	beq.n	8006c72 <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c52:	002a      	movs	r2, r5
 8006c54:	491c      	ldr	r1, [pc, #112]	; (8006cc8 <addbuttonCommand+0xbc>)
 8006c56:	0020      	movs	r0, r4
 8006c58:	f00e f91e 	bl	8014e98 <strncmp>
		type =ONOFF_NO;
 8006c5c:	3701      	adds	r7, #1
	else if(!strncmp((const char* )pcParameterString1,"onoff-no",xParameterStringLength1)){
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d007      	beq.n	8006c72 <addbuttonCommand+0x66>
	else if(!strncmp((const char* )pcParameterString1,"onoff-nc",xParameterStringLength1)){
 8006c62:	002a      	movs	r2, r5
 8006c64:	4919      	ldr	r1, [pc, #100]	; (8006ccc <addbuttonCommand+0xc0>)
 8006c66:	0020      	movs	r0, r4
 8006c68:	f00e f916 	bl	8014e98 <strncmp>
		type =ONOFF_NC;
 8006c6c:	4243      	negs	r3, r0
 8006c6e:	4158      	adcs	r0, r3
 8006c70:	0087      	lsls	r7, r0, #2
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006c72:	aa04      	add	r2, sp, #16
 8006c74:	2102      	movs	r1, #2
 8006c76:	9803      	ldr	r0, [sp, #12]
 8006c78:	f008 f85e 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString2[0] == 'p'){
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port =0, type =0;
 8006c80:	2400      	movs	r4, #0
	if(pcParameterString2[0] == 'p'){
 8006c82:	2b70      	cmp	r3, #112	; 0x70
 8006c84:	d008      	beq.n	8006c98 <addbuttonCommand+0x8c>
	result =AddPortButton(type,port);
 8006c86:	0021      	movs	r1, r4
 8006c88:	0038      	movs	r0, r7
 8006c8a:	f001 fc81 	bl	8008590 <AddPortButton>
	if(result == BOS_OK){
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d007      	beq.n	8006ca2 <addbuttonCommand+0x96>
}
 8006c92:	2000      	movs	r0, #0
 8006c94:	b007      	add	sp, #28
 8006c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port =(uint8_t )atol((char* )pcParameterString2 + 1);
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f00d fbfa 	bl	8014492 <atol>
 8006c9e:	b2c4      	uxtb	r4, r0
 8006ca0:	e7f1      	b.n	8006c86 <addbuttonCommand+0x7a>
		pcParameterString1[xParameterStringLength1] =0;			// Get rid of the remaining parameters
 8006ca2:	4b06      	ldr	r3, [pc, #24]	; (8006cbc <addbuttonCommand+0xb0>)
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9905      	ldr	r1, [sp, #20]
 8006caa:	5453      	strb	r3, [r2, r1]
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,pcParameterString1,port,port);
 8006cac:	9400      	str	r4, [sp, #0]
 8006cae:	0023      	movs	r3, r4
 8006cb0:	4907      	ldr	r1, [pc, #28]	; (8006cd0 <addbuttonCommand+0xc4>)
 8006cb2:	0030      	movs	r0, r6
 8006cb4:	f00e f8ac 	bl	8014e10 <sprintf>
 8006cb8:	e7eb      	b.n	8006c92 <addbuttonCommand+0x86>
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	20001304 	.word	0x20001304
 8006cc0:	08019efc 	.word	0x08019efc
 8006cc4:	08019f0c 	.word	0x08019f0c
 8006cc8:	08019f1c 	.word	0x08019f1c
 8006ccc:	08019f28 	.word	0x08019f28
 8006cd0:	08019f34 	.word	0x08019f34

08006cd4 <scastCommand>:
static portBASE_TYPE scastCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd6:	46de      	mov	lr, fp
 8006cd8:	4657      	mov	r7, sl
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b09b      	sub	sp, #108	; 0x6c
 8006cde:	0005      	movs	r5, r0
 8006ce0:	9009      	str	r0, [sp, #36]	; 0x24
 8006ce2:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 =0, xParameterStringLength2 =0, xParameterStringLength3 =0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9319      	str	r3, [sp, #100]	; 0x64
 8006ce8:	9318      	str	r3, [sp, #96]	; 0x60
 8006cea:	9317      	str	r3, [sp, #92]	; 0x5c
	portBASE_TYPE xParameterStringLength4 =0, xParameterStringLength5 =0, xParameterStringLength6 =0;
 8006cec:	9316      	str	r3, [sp, #88]	; 0x58
 8006cee:	9315      	str	r3, [sp, #84]	; 0x54
 8006cf0:	9314      	str	r3, [sp, #80]	; 0x50
	portBASE_TYPE xParameterStringLength7 =0;
 8006cf2:	9313      	str	r3, [sp, #76]	; 0x4c
	char par1[MaxLengthOfAlias + 1] ={0}, par2[MaxLengthOfAlias + 1] ={0}, par3[MaxLengthOfAlias + 1] ={0};
 8006cf4:	220a      	movs	r2, #10
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	a810      	add	r0, sp, #64	; 0x40
 8006cfa:	f00d fe5d 	bl	80149b8 <memset>
 8006cfe:	220a      	movs	r2, #10
 8006d00:	2100      	movs	r1, #0
 8006d02:	a80d      	add	r0, sp, #52	; 0x34
 8006d04:	f00d fe58 	bl	80149b8 <memset>
 8006d08:	220a      	movs	r2, #10
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	a80a      	add	r0, sp, #40	; 0x28
 8006d0e:	f00d fe53 	bl	80149b8 <memset>
	configASSERT(pcWriteBuffer);
 8006d12:	2d00      	cmp	r5, #0
 8006d14:	d101      	bne.n	8006d1a <scastCommand+0x46>
 8006d16:	b672      	cpsid	i
 8006d18:	e7fe      	b.n	8006d18 <scastCommand+0x44>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006d1a:	aa19      	add	r2, sp, #100	; 0x64
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	0020      	movs	r0, r4
 8006d20:	f008 f80a 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1[0] == 'P'){
 8006d24:	2300      	movs	r3, #0
 8006d26:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d28:	2200      	movs	r2, #0
 8006d2a:	9208      	str	r2, [sp, #32]
	if(pcParameterString1[0] == 'P'){
 8006d2c:	2b50      	cmp	r3, #80	; 0x50
 8006d2e:	d100      	bne.n	8006d32 <scastCommand+0x5e>
 8006d30:	e06d      	b.n	8006e0e <scastCommand+0x13a>
	pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 8006d32:	aa18      	add	r2, sp, #96	; 0x60
 8006d34:	2102      	movs	r1, #2
 8006d36:	0020      	movs	r0, r4
 8006d38:	f007 fffe 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006d3c:	0001      	movs	r1, r0
	strncpy(par1,(char* )pcParameterString2,xParameterStringLength2);
 8006d3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d40:	a810      	add	r0, sp, #64	; 0x40
 8006d42:	f00e f8ba 	bl	8014eba <strncpy>
	srcM =(uint8_t )GetID(par1);
 8006d46:	a810      	add	r0, sp, #64	; 0x40
 8006d48:	f7fd fa58 	bl	80041fc <GetID>
 8006d4c:	b2c3      	uxtb	r3, r0
 8006d4e:	469a      	mov	sl, r3
	pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 8006d50:	aa17      	add	r2, sp, #92	; 0x5c
 8006d52:	2103      	movs	r1, #3
 8006d54:	0020      	movs	r0, r4
 8006d56:	f007 ffef 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString3[0] == 'p'){
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction =0, srcP =0, dstP =0, srcM =0, dstM =0;
 8006d5e:	2700      	movs	r7, #0
	if(pcParameterString3[0] == 'p'){
 8006d60:	2b70      	cmp	r3, #112	; 0x70
 8006d62:	d05a      	beq.n	8006e1a <scastCommand+0x146>
	pcParameterString4 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,4,&xParameterStringLength4);
 8006d64:	aa16      	add	r2, sp, #88	; 0x58
 8006d66:	2104      	movs	r1, #4
 8006d68:	0020      	movs	r0, r4
 8006d6a:	f007 ffe5 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006d6e:	0001      	movs	r1, r0
	strncpy(par2,(char* )pcParameterString4,xParameterStringLength4);
 8006d70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006d72:	a80d      	add	r0, sp, #52	; 0x34
 8006d74:	f00e f8a1 	bl	8014eba <strncpy>
	dstM =(uint8_t )GetID(par2);
 8006d78:	a80d      	add	r0, sp, #52	; 0x34
 8006d7a:	f7fd fa3f 	bl	80041fc <GetID>
 8006d7e:	b2c3      	uxtb	r3, r0
 8006d80:	469b      	mov	fp, r3
	pcParameterString5 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,5,&xParameterStringLength5);
 8006d82:	aa15      	add	r2, sp, #84	; 0x54
 8006d84:	2105      	movs	r1, #5
 8006d86:	0020      	movs	r0, r4
 8006d88:	f007 ffd6 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d8c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006d8e:	0032      	movs	r2, r6
 8006d90:	492b      	ldr	r1, [pc, #172]	; (8006e40 <scastCommand+0x16c>)
 8006d92:	9007      	str	r0, [sp, #28]
 8006d94:	f00e f880 	bl	8014e98 <strncmp>
		direction =FORWARD;
 8006d98:	2500      	movs	r5, #0
	if(!strncmp((const char* )pcParameterString5,"forward",xParameterStringLength5))
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	d00f      	beq.n	8006dbe <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006d9e:	0032      	movs	r2, r6
 8006da0:	4928      	ldr	r1, [pc, #160]	; (8006e44 <scastCommand+0x170>)
 8006da2:	9807      	ldr	r0, [sp, #28]
 8006da4:	f00e f878 	bl	8014e98 <strncmp>
		direction =BACKWARD;
 8006da8:	3501      	adds	r5, #1
	else if(!strncmp((const char* )pcParameterString5,"backward",xParameterStringLength5))
 8006daa:	2800      	cmp	r0, #0
 8006dac:	d007      	beq.n	8006dbe <scastCommand+0xea>
	else if(!strncmp((const char* )pcParameterString5,"bidirectional",xParameterStringLength5))
 8006dae:	0032      	movs	r2, r6
 8006db0:	4925      	ldr	r1, [pc, #148]	; (8006e48 <scastCommand+0x174>)
 8006db2:	9807      	ldr	r0, [sp, #28]
 8006db4:	f00e f870 	bl	8014e98 <strncmp>
		direction =BIDIRECTIONAL;
 8006db8:	4243      	negs	r3, r0
 8006dba:	4158      	adcs	r0, r3
 8006dbc:	0045      	lsls	r5, r0, #1
	strncpy(par3,(char* )pcParameterString5,xParameterStringLength5);
 8006dbe:	0032      	movs	r2, r6
 8006dc0:	9907      	ldr	r1, [sp, #28]
 8006dc2:	a80a      	add	r0, sp, #40	; 0x28
 8006dc4:	f00e f879 	bl	8014eba <strncpy>
	pcParameterString6 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,6,&xParameterStringLength6);
 8006dc8:	aa14      	add	r2, sp, #80	; 0x50
 8006dca:	2106      	movs	r1, #6
 8006dcc:	0020      	movs	r0, r4
 8006dce:	f007 ffb3 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	count =(uint32_t )atol((char* )pcParameterString6);
 8006dd2:	f00d fb5e 	bl	8014492 <atol>
 8006dd6:	0006      	movs	r6, r0
	pcParameterString7 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,7,&xParameterStringLength7);
 8006dd8:	aa13      	add	r2, sp, #76	; 0x4c
 8006dda:	2107      	movs	r1, #7
 8006ddc:	0020      	movs	r0, r4
 8006dde:	f007 ffab 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	timeout =(uint32_t )atol((char* )pcParameterString7);
 8006de2:	f00d fb56 	bl	8014492 <atol>
 8006de6:	0004      	movs	r4, r0
	result =StartScastDMAStream(srcP,srcM,dstP,dstM,direction,count,timeout,false);
 8006de8:	2300      	movs	r3, #0
 8006dea:	9303      	str	r3, [sp, #12]
 8006dec:	9002      	str	r0, [sp, #8]
 8006dee:	9601      	str	r6, [sp, #4]
 8006df0:	9500      	str	r5, [sp, #0]
 8006df2:	465b      	mov	r3, fp
 8006df4:	003a      	movs	r2, r7
 8006df6:	4651      	mov	r1, sl
 8006df8:	9808      	ldr	r0, [sp, #32]
 8006dfa:	f002 fed9 	bl	8009bb0 <StartScastDMAStream>
	if(result == BOS_OK){
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d010      	beq.n	8006e24 <scastCommand+0x150>
}
 8006e02:	2000      	movs	r0, #0
 8006e04:	b01b      	add	sp, #108	; 0x6c
 8006e06:	bc0c      	pop	{r2, r3}
 8006e08:	4692      	mov	sl, r2
 8006e0a:	469b      	mov	fp, r3
 8006e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		srcP =(uint8_t )atol((char* )pcParameterString1 + 1);
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f00d fb3f 	bl	8014492 <atol>
 8006e14:	b2c3      	uxtb	r3, r0
 8006e16:	9308      	str	r3, [sp, #32]
 8006e18:	e78b      	b.n	8006d32 <scastCommand+0x5e>
		dstP =(uint8_t )atol((char* )pcParameterString3 + 1);
 8006e1a:	3001      	adds	r0, #1
 8006e1c:	f00d fb39 	bl	8014492 <atol>
 8006e20:	b2c7      	uxtb	r7, r0
 8006e22:	e79f      	b.n	8006d64 <scastCommand+0x90>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,par3,srcP,par1,dstP,par2,count,timeout);
 8006e24:	9404      	str	r4, [sp, #16]
 8006e26:	9603      	str	r6, [sp, #12]
 8006e28:	ab0d      	add	r3, sp, #52	; 0x34
 8006e2a:	9302      	str	r3, [sp, #8]
 8006e2c:	9701      	str	r7, [sp, #4]
 8006e2e:	ab10      	add	r3, sp, #64	; 0x40
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	9b08      	ldr	r3, [sp, #32]
 8006e34:	aa0a      	add	r2, sp, #40	; 0x28
 8006e36:	4905      	ldr	r1, [pc, #20]	; (8006e4c <scastCommand+0x178>)
 8006e38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e3a:	f00d ffe9 	bl	8014e10 <sprintf>
 8006e3e:	e7e0      	b.n	8006e02 <scastCommand+0x12e>
 8006e40:	0801a684 	.word	0x0801a684
 8006e44:	0801a68c 	.word	0x0801a68c
 8006e48:	0801a698 	.word	0x0801a698
 8006e4c:	0801a6a8 	.word	0x0801a6a8

08006e50 <infoCommand>:
static portBASE_TYPE infoCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e52:	b083      	sub	sp, #12
 8006e54:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8006e56:	d039      	beq.n	8006ecc <infoCommand+0x7c>
	if(N > 1)
 8006e58:	4b26      	ldr	r3, [pc, #152]	; (8006ef4 <infoCommand+0xa4>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result =BOS_OK;
 8006e5c:	2500      	movs	r5, #0
	if(N > 1)
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d902      	bls.n	8006e68 <infoCommand+0x18>
		result =ReadPortsDir();
 8006e62:	f7fd fb1f 	bl	80044a4 <ReadPortsDir>
 8006e66:	0005      	movs	r5, r0
	sprintf((char* )pcWriteBuffer,"\n\rNumber of modules: %d\n",N);
 8006e68:	4b22      	ldr	r3, [pc, #136]	; (8006ef4 <infoCommand+0xa4>)
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	4922      	ldr	r1, [pc, #136]	; (8006ef8 <infoCommand+0xa8>)
 8006e6e:	0020      	movs	r0, r4
 8006e70:	f00d ffce 	bl	8014e10 <sprintf>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e74:	0020      	movs	r0, r4
 8006e76:	f7f9 f94f 	bl	8000118 <strlen>
 8006e7a:	b282      	uxth	r2, r0
 8006e7c:	4e1f      	ldr	r6, [pc, #124]	; (8006efc <infoCommand+0xac>)
 8006e7e:	7830      	ldrb	r0, [r6, #0]
 8006e80:	2701      	movs	r7, #1
 8006e82:	427f      	negs	r7, r7
 8006e84:	9700      	str	r7, [sp, #0]
 8006e86:	2332      	movs	r3, #50	; 0x32
 8006e88:	0021      	movs	r1, r4
 8006e8a:	f007 fd0f 	bl	800e8ac <writePxMutex>
	sprintf((char* )pcWriteBuffer,"\n\rArray topology:\n");
 8006e8e:	2213      	movs	r2, #19
 8006e90:	491b      	ldr	r1, [pc, #108]	; (8006f00 <infoCommand+0xb0>)
 8006e92:	0020      	movs	r0, r4
 8006e94:	f00d fd87 	bl	80149a6 <memcpy>
	writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),
 8006e98:	0020      	movs	r0, r4
 8006e9a:	f7f9 f93d 	bl	8000118 <strlen>
 8006e9e:	b282      	uxth	r2, r0
 8006ea0:	7830      	ldrb	r0, [r6, #0]
 8006ea2:	9700      	str	r7, [sp, #0]
 8006ea4:	2332      	movs	r3, #50	; 0x32
 8006ea6:	0021      	movs	r1, r4
 8006ea8:	f007 fd00 	bl	800e8ac <writePxMutex>
	DisplayTopology(PcPort);
 8006eac:	7830      	ldrb	r0, [r6, #0]
 8006eae:	f7fc ff01 	bl	8003cb4 <DisplayTopology>
	DisplayPortsDir(PcPort);
 8006eb2:	7830      	ldrb	r0, [r6, #0]
 8006eb4:	f7fc ffce 	bl	8003e54 <DisplayPortsDir>
	if(result == BOS_ERR_NoResponse){
 8006eb8:	2d02      	cmp	r5, #2
 8006eba:	d009      	beq.n	8006ed0 <infoCommand+0x80>
	sprintf((char* )pcWriteBuffer," ");
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	4911      	ldr	r1, [pc, #68]	; (8006f04 <infoCommand+0xb4>)
 8006ec0:	0020      	movs	r0, r4
 8006ec2:	f00d fd70 	bl	80149a6 <memcpy>
}
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	b003      	add	sp, #12
 8006eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT(pcWriteBuffer);
 8006ecc:	b672      	cpsid	i
 8006ece:	e7fe      	b.n	8006ece <infoCommand+0x7e>
		sprintf((char* )pcWriteBuffer,"Could not read ports direction for some modules! Please try again\n\r");
 8006ed0:	2244      	movs	r2, #68	; 0x44
 8006ed2:	490d      	ldr	r1, [pc, #52]	; (8006f08 <infoCommand+0xb8>)
 8006ed4:	0020      	movs	r0, r4
 8006ed6:	f00d fd66 	bl	80149a6 <memcpy>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8006eda:	0020      	movs	r0, r4
 8006edc:	f7f9 f91c 	bl	8000118 <strlen>
 8006ee0:	b282      	uxth	r2, r0
 8006ee2:	4b06      	ldr	r3, [pc, #24]	; (8006efc <infoCommand+0xac>)
 8006ee4:	7818      	ldrb	r0, [r3, #0]
 8006ee6:	003b      	movs	r3, r7
 8006ee8:	9700      	str	r7, [sp, #0]
 8006eea:	3333      	adds	r3, #51	; 0x33
 8006eec:	0021      	movs	r1, r4
 8006eee:	f007 fcdd 	bl	800e8ac <writePxMutex>
 8006ef2:	e7e3      	b.n	8006ebc <infoCommand+0x6c>
 8006ef4:	20000044 	.word	0x20000044
 8006ef8:	0801a440 	.word	0x0801a440
 8006efc:	20000ae8 	.word	0x20000ae8
 8006f00:	0801a45c 	.word	0x0801a45c
 8006f04:	080193e4 	.word	0x080193e4
 8006f08:	0801a470 	.word	0x0801a470

08006f0c <statusCommand>:
static portBASE_TYPE statusCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f0c:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d101      	bne.n	8006f16 <statusCommand+0xa>
 8006f12:	b672      	cpsid	i
 8006f14:	e7fe      	b.n	8006f14 <statusCommand+0x8>
	DisplayModuleStatus(0);
 8006f16:	2000      	movs	r0, #0
 8006f18:	f7fd f810 	bl	8003f3c <DisplayModuleStatus>
}
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	bd10      	pop	{r4, pc}

08006f20 <groupCommand>:
static portBASE_TYPE groupCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8006f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f22:	46ce      	mov	lr, r9
 8006f24:	b500      	push	{lr}
 8006f26:	b090      	sub	sp, #64	; 0x40
 8006f28:	0004      	movs	r4, r0
 8006f2a:	9201      	str	r2, [sp, #4]
	char module[MaxLengthOfAlias + 30] ={0};
 8006f2c:	2227      	movs	r2, #39	; 0x27
 8006f2e:	2100      	movs	r1, #0
 8006f30:	a806      	add	r0, sp, #24
 8006f32:	f00d fd41 	bl	80149b8 <memset>
	char alias[MaxLengthOfAlias + 1] ={0};
 8006f36:	220a      	movs	r2, #10
 8006f38:	2100      	movs	r1, #0
 8006f3a:	a803      	add	r0, sp, #12
 8006f3c:	f00d fd3c 	bl	80149b8 <memset>
	configASSERT(pcWriteBuffer);
 8006f40:	2c00      	cmp	r4, #0
 8006f42:	d101      	bne.n	8006f48 <groupCommand+0x28>
 8006f44:	b672      	cpsid	i
 8006f46:	e7fe      	b.n	8006f46 <groupCommand+0x26>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 8006f48:	4d54      	ldr	r5, [pc, #336]	; (800709c <groupCommand+0x17c>)
 8006f4a:	002a      	movs	r2, r5
 8006f4c:	2101      	movs	r1, #1
 8006f4e:	9801      	ldr	r0, [sp, #4]
 8006f50:	f007 fef2 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006f54:	0001      	movs	r1, r0
	strncpy(alias,(char* )pcParameterString1,xParameterStringLength1);
 8006f56:	682a      	ldr	r2, [r5, #0]
 8006f58:	a803      	add	r0, sp, #12
 8006f5a:	f00d ffae 	bl	8014eba <strncpy>
 8006f5e:	4d50      	ldr	r5, [pc, #320]	; (80070a0 <groupCommand+0x180>)
 8006f60:	002f      	movs	r7, r5
 8006f62:	3764      	adds	r7, #100	; 0x64
		if(!strcmp(alias,groupAlias[i])){
 8006f64:	0029      	movs	r1, r5
 8006f66:	a803      	add	r0, sp, #12
 8006f68:	f7f9 f8cc 	bl	8000104 <strcmp>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d016      	beq.n	8006f9e <groupCommand+0x7e>
 8006f70:	350a      	adds	r5, #10
	for(uint8_t i =0; i < MaxNumOfGroups; i++){
 8006f72:	42bd      	cmp	r5, r7
 8006f74:	d1f6      	bne.n	8006f64 <groupCommand+0x44>
	type =1;
 8006f76:	2701      	movs	r7, #1
	count =2;
 8006f78:	4b4a      	ldr	r3, [pc, #296]	; (80070a4 <groupCommand+0x184>)
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
	strcpy((char* )pcWriteBuffer,"Modules [");
 8006f7e:	3208      	adds	r2, #8
 8006f80:	4949      	ldr	r1, [pc, #292]	; (80070a8 <groupCommand+0x188>)
 8006f82:	0020      	movs	r0, r4
 8006f84:	f00d fd0f 	bl	80149a6 <memcpy>
	pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,count,&xParameterStringLength);
 8006f88:	4a48      	ldr	r2, [pc, #288]	; (80070ac <groupCommand+0x18c>)
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	9801      	ldr	r0, [sp, #4]
 8006f8e:	f007 fed3 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006f92:	4b47      	ldr	r3, [pc, #284]	; (80070b0 <groupCommand+0x190>)
 8006f94:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d061      	beq.n	800705e <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006f9a:	4e44      	ldr	r6, [pc, #272]	; (80070ac <groupCommand+0x18c>)
 8006f9c:	e011      	b.n	8006fc2 <groupCommand+0xa2>
			type =0;
 8006f9e:	2700      	movs	r7, #0
 8006fa0:	e7ea      	b.n	8006f78 <groupCommand+0x58>
		strcat((char* )pcWriteBuffer,module);
 8006fa2:	a906      	add	r1, sp, #24
 8006fa4:	0020      	movs	r0, r4
 8006fa6:	f00d ff53 	bl	8014e50 <strcat>
		pcParameterString =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,++count,&xParameterStringLength);
 8006faa:	1c69      	adds	r1, r5, #1
 8006fac:	b249      	sxtb	r1, r1
 8006fae:	4b3d      	ldr	r3, [pc, #244]	; (80070a4 <groupCommand+0x184>)
 8006fb0:	7019      	strb	r1, [r3, #0]
 8006fb2:	4a3e      	ldr	r2, [pc, #248]	; (80070ac <groupCommand+0x18c>)
 8006fb4:	9801      	ldr	r0, [sp, #4]
 8006fb6:	f007 febf 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 8006fba:	4b3d      	ldr	r3, [pc, #244]	; (80070b0 <groupCommand+0x190>)
 8006fbc:	6018      	str	r0, [r3, #0]
	while(pcParameterString != NULL){
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d04d      	beq.n	800705e <groupCommand+0x13e>
		strncpy(module,(char* )pcParameterString,xParameterStringLength);
 8006fc2:	6833      	ldr	r3, [r6, #0]
 8006fc4:	4699      	mov	r9, r3
 8006fc6:	ad06      	add	r5, sp, #24
 8006fc8:	001a      	movs	r2, r3
 8006fca:	0001      	movs	r1, r0
 8006fcc:	0028      	movs	r0, r5
 8006fce:	f00d ff74 	bl	8014eba <strncpy>
		module[xParameterStringLength] ='\0';
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	464a      	mov	r2, r9
 8006fd6:	54ab      	strb	r3, [r5, r2]
		modID =GetID(module);
 8006fd8:	0028      	movs	r0, r5
 8006fda:	f7fd f90f 	bl	80041fc <GetID>
		if(modID < 0)
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	db37      	blt.n	8007052 <groupCommand+0x132>
		result =AddModuleToGroup(modID,alias);
 8006fe2:	b2c0      	uxtb	r0, r0
 8006fe4:	a903      	add	r1, sp, #12
 8006fe6:	f7fd f9d5 	bl	8004394 <AddModuleToGroup>
		if(result != BOS_OK)
 8006fea:	2800      	cmp	r0, #0
 8006fec:	d146      	bne.n	800707c <groupCommand+0x15c>
		if(count > 2)
 8006fee:	4b2d      	ldr	r3, [pc, #180]	; (80070a4 <groupCommand+0x184>)
 8006ff0:	2500      	movs	r5, #0
 8006ff2:	575d      	ldrsb	r5, [r3, r5]
 8006ff4:	2d02      	cmp	r5, #2
 8006ff6:	ddd4      	ble.n	8006fa2 <groupCommand+0x82>
			strcat((char* )pcWriteBuffer,", ");
 8006ff8:	0020      	movs	r0, r4
 8006ffa:	f7f9 f88d 	bl	8000118 <strlen>
 8006ffe:	1820      	adds	r0, r4, r0
 8007000:	2203      	movs	r2, #3
 8007002:	492c      	ldr	r1, [pc, #176]	; (80070b4 <groupCommand+0x194>)
 8007004:	f00d fccf 	bl	80149a6 <memcpy>
 8007008:	e7cb      	b.n	8006fa2 <groupCommand+0x82>
	else if(result == BOS_OK && type){
 800700a:	2f00      	cmp	r7, #0
 800700c:	d009      	beq.n	8007022 <groupCommand+0x102>
		sprintf(module,(char* )pcMessageOKnew,alias);
 800700e:	aa03      	add	r2, sp, #12
 8007010:	4929      	ldr	r1, [pc, #164]	; (80070b8 <groupCommand+0x198>)
 8007012:	a806      	add	r0, sp, #24
 8007014:	f00d fefc 	bl	8014e10 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 8007018:	a906      	add	r1, sp, #24
 800701a:	0020      	movs	r0, r4
 800701c:	f00d ff18 	bl	8014e50 <strcat>
 8007020:	e027      	b.n	8007072 <groupCommand+0x152>
		sprintf(module,(char* )pcMessageOKexist,alias);
 8007022:	aa03      	add	r2, sp, #12
 8007024:	4925      	ldr	r1, [pc, #148]	; (80070bc <groupCommand+0x19c>)
 8007026:	a806      	add	r0, sp, #24
 8007028:	f00d fef2 	bl	8014e10 <sprintf>
		strcat((char* )pcWriteBuffer,module);
 800702c:	a906      	add	r1, sp, #24
 800702e:	0020      	movs	r0, r4
 8007030:	f00d ff0e 	bl	8014e50 <strcat>
 8007034:	e01d      	b.n	8007072 <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,alias);
 8007036:	aa03      	add	r2, sp, #12
 8007038:	4921      	ldr	r1, [pc, #132]	; (80070c0 <groupCommand+0x1a0>)
 800703a:	0020      	movs	r0, r4
 800703c:	f00d fee8 	bl	8014e10 <sprintf>
 8007040:	e017      	b.n	8007072 <groupCommand+0x152>
	else if(result == BOS_ERR_ExistingCmd)
 8007042:	2808      	cmp	r0, #8
 8007044:	d115      	bne.n	8007072 <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,alias);
 8007046:	aa03      	add	r2, sp, #12
 8007048:	491e      	ldr	r1, [pc, #120]	; (80070c4 <groupCommand+0x1a4>)
 800704a:	0020      	movs	r0, r4
 800704c:	f00d fee0 	bl	8014e10 <sprintf>
 8007050:	e00f      	b.n	8007072 <groupCommand+0x152>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageWrongModule,module);
 8007052:	aa06      	add	r2, sp, #24
 8007054:	491c      	ldr	r1, [pc, #112]	; (80070c8 <groupCommand+0x1a8>)
 8007056:	0020      	movs	r0, r4
 8007058:	f00d feda 	bl	8014e10 <sprintf>
	return pdFALSE;
 800705c:	e009      	b.n	8007072 <groupCommand+0x152>
	else if(count == 2)
 800705e:	4b11      	ldr	r3, [pc, #68]	; (80070a4 <groupCommand+0x184>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b25b      	sxtb	r3, r3
 8007064:	2b02      	cmp	r3, #2
 8007066:	d1d0      	bne.n	800700a <groupCommand+0xea>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageNoModules,alias);
 8007068:	aa03      	add	r2, sp, #12
 800706a:	4918      	ldr	r1, [pc, #96]	; (80070cc <groupCommand+0x1ac>)
 800706c:	0020      	movs	r0, r4
 800706e:	f00d fecf 	bl	8014e10 <sprintf>
}
 8007072:	2000      	movs	r0, #0
 8007074:	b010      	add	sp, #64	; 0x40
 8007076:	bc04      	pop	{r2}
 8007078:	4691      	mov	r9, r2
 800707a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(count == 2)
 800707c:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <groupCommand+0x184>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b25b      	sxtb	r3, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d0f0      	beq.n	8007068 <groupCommand+0x148>
	else if(result == BOS_ERR_Keyword)
 8007086:	2806      	cmp	r0, #6
 8007088:	d0d5      	beq.n	8007036 <groupCommand+0x116>
	else if(result == BOS_ERR_ExistingAlias)
 800708a:	2807      	cmp	r0, #7
 800708c:	d1d9      	bne.n	8007042 <groupCommand+0x122>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,alias);
 800708e:	aa03      	add	r2, sp, #12
 8007090:	490f      	ldr	r1, [pc, #60]	; (80070d0 <groupCommand+0x1b0>)
 8007092:	0020      	movs	r0, r4
 8007094:	f00d febc 	bl	8014e10 <sprintf>
 8007098:	e7eb      	b.n	8007072 <groupCommand+0x152>
 800709a:	46c0      	nop			; (mov r8, r8)
 800709c:	20001334 	.word	0x20001334
 80070a0:	20000ed0 	.word	0x20000ed0
 80070a4:	200012fa 	.word	0x200012fa
 80070a8:	0801a260 	.word	0x0801a260
 80070ac:	20001328 	.word	0x20001328
 80070b0:	200012fc 	.word	0x200012fc
 80070b4:	0801a26c 	.word	0x0801a26c
 80070b8:	0801a29c 	.word	0x0801a29c
 80070bc:	0801a2b8 	.word	0x0801a2b8
 80070c0:	0801a2d8 	.word	0x0801a2d8
 80070c4:	0801a34c 	.word	0x0801a34c
 80070c8:	0801a38c 	.word	0x0801a38c
 80070cc:	0801a270 	.word	0x0801a270
 80070d0:	0801a318 	.word	0x0801a318

080070d4 <nameCommand>:
static portBASE_TYPE nameCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	0004      	movs	r4, r0
 80070d8:	0010      	movs	r0, r2
	configASSERT(pcWriteBuffer);
 80070da:	2c00      	cmp	r4, #0
 80070dc:	d101      	bne.n	80070e2 <nameCommand+0xe>
 80070de:	b672      	cpsid	i
 80070e0:	e7fe      	b.n	80070e0 <nameCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 80070e2:	4d1c      	ldr	r5, [pc, #112]	; (8007154 <nameCommand+0x80>)
 80070e4:	002a      	movs	r2, r5
 80070e6:	2101      	movs	r1, #1
 80070e8:	f007 fe26 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80070ec:	0001      	movs	r1, r0
 80070ee:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <nameCommand+0x84>)
 80070f0:	6018      	str	r0, [r3, #0]
	if(xParameterStringLength1 > MaxLengthOfAlias){
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	dd01      	ble.n	80070fc <nameCommand+0x28>
		pcParameterString1[MaxLengthOfAlias] ='\0';
 80070f8:	2300      	movs	r3, #0
 80070fa:	7243      	strb	r3, [r0, #9]
	result =NameModule(myID,(char* )pcParameterString1);
 80070fc:	4b17      	ldr	r3, [pc, #92]	; (800715c <nameCommand+0x88>)
 80070fe:	7818      	ldrb	r0, [r3, #0]
 8007100:	f7fd f8e0 	bl	80042c4 <NameModule>
	if(result == BOS_OK)
 8007104:	2800      	cmp	r0, #0
 8007106:	d007      	beq.n	8007118 <nameCommand+0x44>
	else if(result == BOS_ERR_Keyword)
 8007108:	2806      	cmp	r0, #6
 800710a:	d00e      	beq.n	800712a <nameCommand+0x56>
	else if(result == BOS_ERR_ExistingAlias)
 800710c:	2807      	cmp	r0, #7
 800710e:	d013      	beq.n	8007138 <nameCommand+0x64>
	else if(result == BOS_ERR_ExistingCmd)
 8007110:	2808      	cmp	r0, #8
 8007112:	d018      	beq.n	8007146 <nameCommand+0x72>
}
 8007114:	2000      	movs	r0, #0
 8007116:	bd70      	pop	{r4, r5, r6, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessageOK,myID,pcParameterString1);
 8007118:	4b10      	ldr	r3, [pc, #64]	; (800715c <nameCommand+0x88>)
 800711a:	781a      	ldrb	r2, [r3, #0]
 800711c:	4b0e      	ldr	r3, [pc, #56]	; (8007158 <nameCommand+0x84>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	490f      	ldr	r1, [pc, #60]	; (8007160 <nameCommand+0x8c>)
 8007122:	0020      	movs	r0, r4
 8007124:	f00d fe74 	bl	8014e10 <sprintf>
 8007128:	e7f4      	b.n	8007114 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageKey,pcParameterString1);
 800712a:	4b0b      	ldr	r3, [pc, #44]	; (8007158 <nameCommand+0x84>)
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	490d      	ldr	r1, [pc, #52]	; (8007164 <nameCommand+0x90>)
 8007130:	0020      	movs	r0, r4
 8007132:	f00d fe6d 	bl	8014e10 <sprintf>
 8007136:	e7ed      	b.n	8007114 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageAlias,pcParameterString1);
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <nameCommand+0x84>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	490a      	ldr	r1, [pc, #40]	; (8007168 <nameCommand+0x94>)
 800713e:	0020      	movs	r0, r4
 8007140:	f00d fe66 	bl	8014e10 <sprintf>
 8007144:	e7e6      	b.n	8007114 <nameCommand+0x40>
		sprintf((char* )pcWriteBuffer,(char* )pcMessageCmd,pcParameterString1);
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <nameCommand+0x84>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	4908      	ldr	r1, [pc, #32]	; (800716c <nameCommand+0x98>)
 800714c:	0020      	movs	r0, r4
 800714e:	f00d fe5f 	bl	8014e10 <sprintf>
 8007152:	e7df      	b.n	8007114 <nameCommand+0x40>
 8007154:	20001330 	.word	0x20001330
 8007158:	20001300 	.word	0x20001300
 800715c:	200010ea 	.word	0x200010ea
 8007160:	0801a4d8 	.word	0x0801a4d8
 8007164:	0801a2d8 	.word	0x0801a2d8
 8007168:	0801a318 	.word	0x0801a318
 800716c:	0801a34c 	.word	0x0801a34c

08007170 <bootloaderUpdateCommand>:
static portBASE_TYPE bootloaderUpdateCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007172:	b085      	sub	sp, #20
 8007174:	1e04      	subs	r4, r0, #0
 8007176:	9203      	str	r2, [sp, #12]
	configASSERT(pcWriteBuffer);
 8007178:	d101      	bne.n	800717e <bootloaderUpdateCommand+0xe>
 800717a:	b672      	cpsid	i
 800717c:	e7fe      	b.n	800717c <bootloaderUpdateCommand+0xc>
	pcParameterString1 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,1,&xParameterStringLength1);
 800717e:	4a4b      	ldr	r2, [pc, #300]	; (80072ac <bootloaderUpdateCommand+0x13c>)
 8007180:	2101      	movs	r1, #1
 8007182:	9803      	ldr	r0, [sp, #12]
 8007184:	f007 fdd8 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if(pcParameterString1 == NULL){
 8007188:	2800      	cmp	r0, #0
 800718a:	d040      	beq.n	800720e <bootloaderUpdateCommand+0x9e>
		if(!strncmp((const char* )pcParameterString1,"via",xParameterStringLength1)){
 800718c:	4b47      	ldr	r3, [pc, #284]	; (80072ac <bootloaderUpdateCommand+0x13c>)
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	4947      	ldr	r1, [pc, #284]	; (80072b0 <bootloaderUpdateCommand+0x140>)
 8007192:	f00d fe81 	bl	8014e98 <strncmp>
 8007196:	2800      	cmp	r0, #0
 8007198:	d000      	beq.n	800719c <bootloaderUpdateCommand+0x2c>
 800719a:	e080      	b.n	800729e <bootloaderUpdateCommand+0x12e>
			pcParameterString2 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,2,&xParameterStringLength2);
 800719c:	4a45      	ldr	r2, [pc, #276]	; (80072b4 <bootloaderUpdateCommand+0x144>)
 800719e:	2102      	movs	r1, #2
 80071a0:	9803      	ldr	r0, [sp, #12]
 80071a2:	f007 fdc9 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80071a6:	4f44      	ldr	r7, [pc, #272]	; (80072b8 <bootloaderUpdateCommand+0x148>)
 80071a8:	6038      	str	r0, [r7, #0]
			pcParameterString3 =(int8_t* )FreeRTOS_CLIGetParameter(pcCommandString,3,&xParameterStringLength3);
 80071aa:	4a44      	ldr	r2, [pc, #272]	; (80072bc <bootloaderUpdateCommand+0x14c>)
 80071ac:	2103      	movs	r1, #3
 80071ae:	9803      	ldr	r0, [sp, #12]
 80071b0:	f007 fdc2 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 80071b4:	4b42      	ldr	r3, [pc, #264]	; (80072c0 <bootloaderUpdateCommand+0x150>)
 80071b6:	6018      	str	r0, [r3, #0]
			if(pcParameterString2[0] == '#'){
 80071b8:	6838      	ldr	r0, [r7, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	56c3      	ldrsb	r3, [r0, r3]
				result =BOS_ERR_WrongValue;
 80071be:	2768      	movs	r7, #104	; 0x68
			if(pcParameterString2[0] == '#'){
 80071c0:	2b23      	cmp	r3, #35	; 0x23
 80071c2:	d04e      	beq.n	8007262 <bootloaderUpdateCommand+0xf2>
			if(pcParameterString3[0] == 'p'){
 80071c4:	4b3e      	ldr	r3, [pc, #248]	; (80072c0 <bootloaderUpdateCommand+0x150>)
 80071c6:	6818      	ldr	r0, [r3, #0]
 80071c8:	2300      	movs	r3, #0
 80071ca:	56c3      	ldrsb	r3, [r0, r3]
 80071cc:	2b70      	cmp	r3, #112	; 0x70
 80071ce:	d04e      	beq.n	800726e <bootloaderUpdateCommand+0xfe>
				result =BOS_ERR_WrongValue;
 80071d0:	2768      	movs	r7, #104	; 0x68
			if(module != myID){
 80071d2:	4b3c      	ldr	r3, [pc, #240]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	42b3      	cmp	r3, r6
 80071d8:	d04e      	beq.n	8007278 <bootloaderUpdateCommand+0x108>
				BOSMessaging.response = BOS_RESPONSE_NONE;
 80071da:	4b3b      	ldr	r3, [pc, #236]	; (80072c8 <bootloaderUpdateCommand+0x158>)
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
				messageParams[0] =port;
 80071e0:	4b3a      	ldr	r3, [pc, #232]	; (80072cc <bootloaderUpdateCommand+0x15c>)
 80071e2:	701d      	strb	r5, [r3, #0]
				SendMessageToModule(module,CODE_UPDATE_VIA_PORT,1);
 80071e4:	3201      	adds	r2, #1
 80071e6:	211a      	movs	r1, #26
 80071e8:	0030      	movs	r0, r6
 80071ea:	f002 fcbb 	bl	8009b64 <SendMessageToModule>
				osDelay(100);
 80071ee:	2064      	movs	r0, #100	; 0x64
 80071f0:	f007 fc89 	bl	800eb06 <osDelay>
				remoteBootloaderUpdate(myID,module,PcPort,port);
 80071f4:	4b36      	ldr	r3, [pc, #216]	; (80072d0 <bootloaderUpdateCommand+0x160>)
 80071f6:	781a      	ldrb	r2, [r3, #0]
 80071f8:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 80071fa:	7818      	ldrb	r0, [r3, #0]
 80071fc:	002b      	movs	r3, r5
 80071fe:	0031      	movs	r1, r6
 8007200:	f7fc fcd6 	bl	8003bb0 <remoteBootloaderUpdate>
	if(result == BOS_ERR_WrongValue){
 8007204:	2f68      	cmp	r7, #104	; 0x68
 8007206:	d04a      	beq.n	800729e <bootloaderUpdateCommand+0x12e>
}
 8007208:	2000      	movs	r0, #0
 800720a:	b005      	add	sp, #20
 800720c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sprintf((char* )pcWriteBuffer,(char* )pcMessage,myID);
 800720e:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	4930      	ldr	r1, [pc, #192]	; (80072d4 <bootloaderUpdateCommand+0x164>)
 8007214:	0020      	movs	r0, r4
 8007216:	f00d fdfb 	bl	8014e10 <sprintf>
		strcat((char* )pcWriteBuffer,(char* )pcBootloaderUpdateMessage);
 800721a:	4b2f      	ldr	r3, [pc, #188]	; (80072d8 <bootloaderUpdateCommand+0x168>)
 800721c:	6819      	ldr	r1, [r3, #0]
 800721e:	0020      	movs	r0, r4
 8007220:	f00d fe16 	bl	8014e50 <strcat>
		writePxMutex(PcPort,(char* )pcWriteBuffer,strlen((char* )pcWriteBuffer),cmd50ms,HAL_MAX_DELAY);
 8007224:	0020      	movs	r0, r4
 8007226:	f7f8 ff77 	bl	8000118 <strlen>
 800722a:	b282      	uxth	r2, r0
 800722c:	4b28      	ldr	r3, [pc, #160]	; (80072d0 <bootloaderUpdateCommand+0x160>)
 800722e:	7818      	ldrb	r0, [r3, #0]
 8007230:	2301      	movs	r3, #1
 8007232:	425b      	negs	r3, r3
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	3333      	adds	r3, #51	; 0x33
 8007238:	0021      	movs	r1, r4
 800723a:	f007 fb37 	bl	800e8ac <writePxMutex>
		*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800723e:	4b27      	ldr	r3, [pc, #156]	; (80072dc <bootloaderUpdateCommand+0x16c>)
 8007240:	4a27      	ldr	r2, [pc, #156]	; (80072e0 <bootloaderUpdateCommand+0x170>)
 8007242:	601a      	str	r2, [r3, #0]
		indMode =IND_PING;
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <bootloaderUpdateCommand+0x174>)
 8007246:	2201      	movs	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 800724a:	200a      	movs	r0, #10
 800724c:	f007 fc5b 	bl	800eb06 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	4b24      	ldr	r3, [pc, #144]	; (80072e8 <bootloaderUpdateCommand+0x178>)
 8007256:	4a25      	ldr	r2, [pc, #148]	; (80072ec <bootloaderUpdateCommand+0x17c>)
 8007258:	60da      	str	r2, [r3, #12]
 800725a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800725e:	46c0      	nop			; (mov r8, r8)
 8007260:	e7fd      	b.n	800725e <bootloaderUpdateCommand+0xee>
				module =(uint8_t )atol((char* )pcParameterString2 + 1);
 8007262:	3001      	adds	r0, #1
 8007264:	f00d f915 	bl	8014492 <atol>
 8007268:	b2c6      	uxtb	r6, r0
	BOS_Status result =BOS_OK;
 800726a:	2700      	movs	r7, #0
 800726c:	e7aa      	b.n	80071c4 <bootloaderUpdateCommand+0x54>
				port =(uint8_t )atol((char* )pcParameterString3 + 1);
 800726e:	3001      	adds	r0, #1
 8007270:	f00d f90f 	bl	8014492 <atol>
 8007274:	b2c5      	uxtb	r5, r0
 8007276:	e7ac      	b.n	80071d2 <bootloaderUpdateCommand+0x62>
				SendMessageFromPort(port,0,0,CODE_UPDATE,0);
 8007278:	2100      	movs	r1, #0
 800727a:	9100      	str	r1, [sp, #0]
 800727c:	2319      	movs	r3, #25
 800727e:	000a      	movs	r2, r1
 8007280:	0028      	movs	r0, r5
 8007282:	f002 f9e9 	bl	8009658 <SendMessageFromPort>
				osDelay(100);
 8007286:	2064      	movs	r0, #100	; 0x64
 8007288:	f007 fc3d 	bl	800eb06 <osDelay>
				remoteBootloaderUpdate(myID,myID,PcPort,port);
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <bootloaderUpdateCommand+0x154>)
 800728e:	7818      	ldrb	r0, [r3, #0]
 8007290:	4b0f      	ldr	r3, [pc, #60]	; (80072d0 <bootloaderUpdateCommand+0x160>)
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	002b      	movs	r3, r5
 8007296:	0001      	movs	r1, r0
 8007298:	f7fc fc8a 	bl	8003bb0 <remoteBootloaderUpdate>
 800729c:	e7b2      	b.n	8007204 <bootloaderUpdateCommand+0x94>
		strcpy((char* )pcWriteBuffer,(char* )pcMessageWrongValue);
 800729e:	220f      	movs	r2, #15
 80072a0:	4913      	ldr	r1, [pc, #76]	; (80072f0 <bootloaderUpdateCommand+0x180>)
 80072a2:	0020      	movs	r0, r4
 80072a4:	f00d fb7f 	bl	80149a6 <memcpy>
 80072a8:	e7ae      	b.n	8007208 <bootloaderUpdateCommand+0x98>
 80072aa:	46c0      	nop			; (mov r8, r8)
 80072ac:	2000132c 	.word	0x2000132c
 80072b0:	08019f98 	.word	0x08019f98
 80072b4:	20001338 	.word	0x20001338
 80072b8:	20001310 	.word	0x20001310
 80072bc:	2000133c 	.word	0x2000133c
 80072c0:	20001318 	.word	0x20001318
 80072c4:	200010ea 	.word	0x200010ea
 80072c8:	20006dd4 	.word	0x20006dd4
 80072cc:	20000fac 	.word	0x20000fac
 80072d0:	20000ae8 	.word	0x20000ae8
 80072d4:	08019f78 	.word	0x08019f78
 80072d8:	2000009c 	.word	0x2000009c
 80072dc:	20007ff0 	.word	0x20007ff0
 80072e0:	deadbeef 	.word	0xdeadbeef
 80072e4:	20000f68 	.word	0x20000f68
 80072e8:	e000ed00 	.word	0xe000ed00
 80072ec:	05fa0004 	.word	0x05fa0004
 80072f0:	0801a058 	.word	0x0801a058

080072f4 <pingCommand>:
static portBASE_TYPE pingCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 80072f4:	b510      	push	{r4, lr}
	configASSERT(pcWriteBuffer);
 80072f6:	2800      	cmp	r0, #0
 80072f8:	d01c      	beq.n	8007334 <pingCommand+0x40>
	if(!moduleAlias[myID][0])
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <pingCommand+0x58>)
 80072fc:	781a      	ldrb	r2, [r3, #0]
 80072fe:	0093      	lsls	r3, r2, #2
 8007300:	189b      	adds	r3, r3, r2
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	4912      	ldr	r1, [pc, #72]	; (8007350 <pingCommand+0x5c>)
 8007306:	5c5b      	ldrb	r3, [r3, r1]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d115      	bne.n	8007338 <pingCommand+0x44>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage1,myID);
 800730c:	4911      	ldr	r1, [pc, #68]	; (8007354 <pingCommand+0x60>)
 800730e:	f00d fd7f 	bl	8014e10 <sprintf>
	RTOS_IND_blink(200);
 8007312:	2490      	movs	r4, #144	; 0x90
 8007314:	05e4      	lsls	r4, r4, #23
 8007316:	2201      	movs	r2, #1
 8007318:	2180      	movs	r1, #128	; 0x80
 800731a:	0020      	movs	r0, r4
 800731c:	f00b f888 	bl	8012430 <HAL_GPIO_WritePin>
 8007320:	20c8      	movs	r0, #200	; 0xc8
 8007322:	f007 fbf0 	bl	800eb06 <osDelay>
 8007326:	2200      	movs	r2, #0
 8007328:	2180      	movs	r1, #128	; 0x80
 800732a:	0020      	movs	r0, r4
 800732c:	f00b f880 	bl	8012430 <HAL_GPIO_WritePin>
}
 8007330:	2000      	movs	r0, #0
 8007332:	bd10      	pop	{r4, pc}
	configASSERT(pcWriteBuffer);
 8007334:	b672      	cpsid	i
 8007336:	e7fe      	b.n	8007336 <pingCommand+0x42>
		sprintf((char* )pcWriteBuffer,(char* )pcMessage2,myID,moduleAlias[myID]);
 8007338:	0093      	lsls	r3, r2, #2
 800733a:	189b      	adds	r3, r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4904      	ldr	r1, [pc, #16]	; (8007350 <pingCommand+0x5c>)
 8007340:	185b      	adds	r3, r3, r1
 8007342:	4905      	ldr	r1, [pc, #20]	; (8007358 <pingCommand+0x64>)
 8007344:	f00d fd64 	bl	8014e10 <sprintf>
 8007348:	e7e3      	b.n	8007312 <pingCommand+0x1e>
 800734a:	46c0      	nop			; (mov r8, r8)
 800734c:	200010ea 	.word	0x200010ea
 8007350:	20000fdc 	.word	0x20000fdc
 8007354:	0801a548 	.word	0x0801a548
 8007358:	0801a55c 	.word	0x0801a55c

0800735c <prvRunTimeStatsCommand>:
static portBASE_TYPE prvRunTimeStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 800735c:	b510      	push	{r4, lr}
 800735e:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007360:	d101      	bne.n	8007366 <prvRunTimeStatsCommand+0xa>
 8007362:	b672      	cpsid	i
 8007364:	e7fe      	b.n	8007364 <prvRunTimeStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcStatsTableHeader);
 8007366:	2241      	movs	r2, #65	; 0x41
 8007368:	4904      	ldr	r1, [pc, #16]	; (800737c <prvRunTimeStatsCommand+0x20>)
 800736a:	f00d fb1c 	bl	80149a6 <memcpy>
	vTaskGetRunTimeStats(((char* )pcWriteBuffer) + strlen((char* )pcStatsTableHeader));
 800736e:	0020      	movs	r0, r4
 8007370:	3040      	adds	r0, #64	; 0x40
 8007372:	f008 ff35 	bl	80101e0 <vTaskGetRunTimeStats>
}
 8007376:	2000      	movs	r0, #0
 8007378:	bd10      	pop	{r4, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	0801a588 	.word	0x0801a588

08007380 <prvTaskStatsCommand>:
static portBASE_TYPE prvTaskStatsCommand(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString){
 8007380:	b510      	push	{r4, lr}
 8007382:	1e04      	subs	r4, r0, #0
	configASSERT(pcWriteBuffer);
 8007384:	d101      	bne.n	800738a <prvTaskStatsCommand+0xa>
 8007386:	b672      	cpsid	i
 8007388:	e7fe      	b.n	8007388 <prvTaskStatsCommand+0x8>
	strcpy((char* )pcWriteBuffer,(char* )pcTaskTableHeader);
 800738a:	2250      	movs	r2, #80	; 0x50
 800738c:	4904      	ldr	r1, [pc, #16]	; (80073a0 <prvTaskStatsCommand+0x20>)
 800738e:	f00d fb0a 	bl	80149a6 <memcpy>
	vTaskList(((char* )pcWriteBuffer) + strlen((char* )pcTaskTableHeader));
 8007392:	0020      	movs	r0, r4
 8007394:	304f      	adds	r0, #79	; 0x4f
 8007396:	f008 fec3 	bl	8010120 <vTaskList>
}
 800739a:	2000      	movs	r0, #0
 800739c:	bd10      	pop	{r4, pc}
 800739e:	46c0      	nop			; (mov r8, r8)
 80073a0:	0801a5dc 	.word	0x0801a5dc

080073a4 <resetCommand>:
	configASSERT(pcWriteBuffer);
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d101      	bne.n	80073ac <resetCommand+0x8>
 80073a8:	b672      	cpsid	i
 80073aa:	e7fe      	b.n	80073aa <resetCommand+0x6>
  __ASM volatile ("dsb 0xF":::"memory");
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	4b03      	ldr	r3, [pc, #12]	; (80073c0 <resetCommand+0x1c>)
 80073b2:	4a04      	ldr	r2, [pc, #16]	; (80073c4 <resetCommand+0x20>)
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	e7fd      	b.n	80073ba <resetCommand+0x16>
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	e000ed00 	.word	0xe000ed00
 80073c4:	05fa0004 	.word	0x05fa0004

080073c8 <RegisterUserCLICommands>:
}
 80073c8:	4770      	bx	lr
	...

080073cc <vRegisterCLICommands>:
void vRegisterCLICommands(void){
 80073cc:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&prvTaskStatsCommandDefinition);
 80073ce:	4835      	ldr	r0, [pc, #212]	; (80074a4 <vRegisterCLICommands+0xd8>)
 80073d0:	f007 fc14 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&prvRunTimeStatsCommandDefinition);
 80073d4:	4834      	ldr	r0, [pc, #208]	; (80074a8 <vRegisterCLICommands+0xdc>)
 80073d6:	f007 fc11 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pingCommandDefinition);
 80073da:	4834      	ldr	r0, [pc, #208]	; (80074ac <vRegisterCLICommands+0xe0>)
 80073dc:	f007 fc0e 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bootloaderUpdateCommandDefinition);
 80073e0:	4833      	ldr	r0, [pc, #204]	; (80074b0 <vRegisterCLICommands+0xe4>)
 80073e2:	f007 fc0b 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&exploreCommandDefinition);
 80073e6:	4833      	ldr	r0, [pc, #204]	; (80074b4 <vRegisterCLICommands+0xe8>)
 80073e8:	f007 fc08 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&resetCommandDefinition);
 80073ec:	4832      	ldr	r0, [pc, #200]	; (80074b8 <vRegisterCLICommands+0xec>)
 80073ee:	f007 fc05 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&nameCommandDefinition);
 80073f2:	4832      	ldr	r0, [pc, #200]	; (80074bc <vRegisterCLICommands+0xf0>)
 80073f4:	f007 fc02 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&groupCommandDefinition);
 80073f8:	4831      	ldr	r0, [pc, #196]	; (80074c0 <vRegisterCLICommands+0xf4>)
 80073fa:	f007 fbff 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&statusCommandDefinition);
 80073fe:	4831      	ldr	r0, [pc, #196]	; (80074c4 <vRegisterCLICommands+0xf8>)
 8007400:	f007 fbfc 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&infoCommandDefinition);
 8007404:	4830      	ldr	r0, [pc, #192]	; (80074c8 <vRegisterCLICommands+0xfc>)
 8007406:	f007 fbf9 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&scastCommandDefinition);
 800740a:	4830      	ldr	r0, [pc, #192]	; (80074cc <vRegisterCLICommands+0x100>)
 800740c:	f007 fbf6 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&addbuttonCommandDefinition);
 8007410:	482f      	ldr	r0, [pc, #188]	; (80074d0 <vRegisterCLICommands+0x104>)
 8007412:	f007 fbf3 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&removebuttonCommandDefinition);
 8007416:	482f      	ldr	r0, [pc, #188]	; (80074d4 <vRegisterCLICommands+0x108>)
 8007418:	f007 fbf0 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setCommandDefinition);
 800741c:	482e      	ldr	r0, [pc, #184]	; (80074d8 <vRegisterCLICommands+0x10c>)
 800741e:	f007 fbed 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&getCommandDefinition);
 8007422:	482e      	ldr	r0, [pc, #184]	; (80074dc <vRegisterCLICommands+0x110>)
 8007424:	f007 fbea 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&defaultCommandDefinition);
 8007428:	482d      	ldr	r0, [pc, #180]	; (80074e0 <vRegisterCLICommands+0x114>)
 800742a:	f007 fbe7 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&timeCommandDefinition);
 800742e:	482d      	ldr	r0, [pc, #180]	; (80074e4 <vRegisterCLICommands+0x118>)
 8007430:	f007 fbe4 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&dateCommandDefinition);
 8007434:	482c      	ldr	r0, [pc, #176]	; (80074e8 <vRegisterCLICommands+0x11c>)
 8007436:	f007 fbe1 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&setBaudrateCommandDefinition);
 800743a:	482c      	ldr	r0, [pc, #176]	; (80074ec <vRegisterCLICommands+0x120>)
 800743c:	f007 fbde 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&uuidCommandDefinition);
 8007440:	482b      	ldr	r0, [pc, #172]	; (80074f0 <vRegisterCLICommands+0x124>)
 8007442:	f007 fbdb 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&idcodeCommandDefinition);
 8007446:	482b      	ldr	r0, [pc, #172]	; (80074f4 <vRegisterCLICommands+0x128>)
 8007448:	f007 fbd8 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&flashsizeCommandDefinition);
 800744c:	482a      	ldr	r0, [pc, #168]	; (80074f8 <vRegisterCLICommands+0x12c>)
 800744e:	f007 fbd5 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&snipCommandDefinition);
 8007452:	482a      	ldr	r0, [pc, #168]	; (80074fc <vRegisterCLICommands+0x130>)
 8007454:	f007 fbd2 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&actSnipCommandDefinition);
 8007458:	4829      	ldr	r0, [pc, #164]	; (8007500 <vRegisterCLICommands+0x134>)
 800745a:	f007 fbcf 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&pauseSnipCommandDefinition);
 800745e:	4829      	ldr	r0, [pc, #164]	; (8007504 <vRegisterCLICommands+0x138>)
 8007460:	f007 fbcc 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&delSnipCommandDefinition);
 8007464:	4828      	ldr	r0, [pc, #160]	; (8007508 <vRegisterCLICommands+0x13c>)
 8007466:	f007 fbc9 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&bridgeCommandDefinition);
 800746a:	4828      	ldr	r0, [pc, #160]	; (800750c <vRegisterCLICommands+0x140>)
 800746c:	f007 fbc6 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&unbridgeCommandDefinition);
 8007470:	4827      	ldr	r0, [pc, #156]	; (8007510 <vRegisterCLICommands+0x144>)
 8007472:	f007 fbc3 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&testportCommandDefinition);
 8007476:	4827      	ldr	r0, [pc, #156]	; (8007514 <vRegisterCLICommands+0x148>)
 8007478:	f007 fbc0 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ADCReadCommandDefinition);
 800747c:	4826      	ldr	r0, [pc, #152]	; (8007518 <vRegisterCLICommands+0x14c>)
 800747e:	f007 fbbd 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadTempDefinition);
 8007482:	4826      	ldr	r0, [pc, #152]	; (800751c <vRegisterCLICommands+0x150>)
 8007484:	f007 fbba 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&ReadVrefDefinition);
 8007488:	4825      	ldr	r0, [pc, #148]	; (8007520 <vRegisterCLICommands+0x154>)
 800748a:	f007 fbb7 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&GetReadPercentageDefinition);
 800748e:	4825      	ldr	r0, [pc, #148]	; (8007524 <vRegisterCLICommands+0x158>)
 8007490:	f007 fbb4 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands =35;
 8007494:	4b24      	ldr	r3, [pc, #144]	; (8007528 <vRegisterCLICommands+0x15c>)
 8007496:	2223      	movs	r2, #35	; 0x23
 8007498:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 800749a:	f004 fba7 	bl	800bbec <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 800749e:	f7ff ff93 	bl	80073c8 <RegisterUserCLICommands>
}
 80074a2:	bd10      	pop	{r4, pc}
 80074a4:	0801a62c 	.word	0x0801a62c
 80074a8:	0801a5cc 	.word	0x0801a5cc
 80074ac:	0801a578 	.word	0x0801a578
 80074b0:	08019f9c 	.word	0x08019f9c
 80074b4:	0801a124 	.word	0x0801a124
 80074b8:	0801a674 	.word	0x0801a674
 80074bc:	0801a4f0 	.word	0x0801a4f0
 80074c0:	0801a3b0 	.word	0x0801a3b0
 80074c4:	0801ab24 	.word	0x0801ab24
 80074c8:	0801a4b4 	.word	0x0801a4b4
 80074cc:	0801a730 	.word	0x0801a730
 80074d0:	08019f68 	.word	0x08019f68
 80074d4:	0801a664 	.word	0x0801a664
 80074d8:	0801a984 	.word	0x0801a984
 80074dc:	0801a250 	.word	0x0801a250
 80074e0:	0801a0a8 	.word	0x0801a0a8
 80074e4:	0801bb44 	.word	0x0801bb44
 80074e8:	0801a010 	.word	0x0801a010
 80074ec:	0801a77c 	.word	0x0801a77c
 80074f0:	0801bbb8 	.word	0x0801bbb8
 80074f4:	0801a430 	.word	0x0801a430
 80074f8:	0801a154 	.word	0x0801a154
 80074fc:	0801ab14 	.word	0x0801ab14
 8007500:	08019eec 	.word	0x08019eec
 8007504:	0801a538 	.word	0x0801a538
 8007508:	0801a114 	.word	0x0801a114
 800750c:	08019fe8 	.word	0x08019fe8
 8007510:	0801bb90 	.word	0x0801bb90
 8007514:	0801bad8 	.word	0x0801bad8
 8007518:	08019dec 	.word	0x08019dec
 800751c:	08019e6c 	.word	0x08019e6c
 8007520:	08019ea4 	.word	0x08019ea4
 8007524:	08019dfc 	.word	0x08019dfc
 8007528:	20006dd0 	.word	0x20006dd0

0800752c <StopMsgDMA>:
/* External functions --------------------------------------------------------*/
extern void DMA_STREAM_Setup(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num);

/* --- Stop a messaging DMA --- 
 */
void StopMsgDMA(uint8_t port){
 800752c:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&msgRxDMA[port - 1];
 800752e:	1e45      	subs	r5, r0, #1
 8007530:	00ec      	lsls	r4, r5, #3
 8007532:	1b60      	subs	r0, r4, r5
 8007534:	00c0      	lsls	r0, r0, #3
 8007536:	4e05      	ldr	r6, [pc, #20]	; (800754c <StopMsgDMA+0x20>)
 8007538:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800753a:	f00a f838 	bl	80115ae <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 800753e:	1b64      	subs	r4, r4, r5
 8007540:	00e4      	lsls	r4, r4, #3
 8007542:	59a3      	ldr	r3, [r4, r6]
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]
}
 8007548:	bd70      	pop	{r4, r5, r6, pc}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	20001c24 	.word	0x20001c24

08007550 <StopStreamDMA>:

/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
 */
void StopStreamDMA(uint8_t port){
 8007550:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA =&streamDMA[port - 1];
 8007552:	1e44      	subs	r4, r0, #1
 8007554:	00e5      	lsls	r5, r4, #3
 8007556:	1b28      	subs	r0, r5, r4
 8007558:	00c0      	lsls	r0, r0, #3
 800755a:	4e07      	ldr	r6, [pc, #28]	; (8007578 <StopStreamDMA+0x28>)
 800755c:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 800755e:	f00a f826 	bl	80115ae <HAL_DMA_Abort>
	hDMA->Instance->CNDTR =0;
 8007562:	1b2d      	subs	r5, r5, r4
 8007564:	00ed      	lsls	r5, r5, #3
 8007566:	59aa      	ldr	r2, [r5, r6]
 8007568:	2300      	movs	r3, #0
 800756a:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port - 1] =0;
 800756c:	00a4      	lsls	r4, r4, #2
 800756e:	4a03      	ldr	r2, [pc, #12]	; (800757c <StopStreamDMA+0x2c>)
 8007570:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port - 1] =0;
 8007572:	4a03      	ldr	r2, [pc, #12]	; (8007580 <StopStreamDMA+0x30>)
 8007574:	50a3      	str	r3, [r4, r2]
	
}
 8007576:	bd70      	pop	{r4, r5, r6, pc}
 8007578:	20001e1c 	.word	0x20001e1c
 800757c:	20001808 	.word	0x20001808
 8007580:	20001838 	.word	0x20001838

08007584 <SwitchMsgDMAToStream>:

/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
 */
void SwitchMsgDMAToStream(uint8_t port){
 8007584:	b510      	push	{r4, lr}
 8007586:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 8007588:	f7ff ffd0 	bl	800752c <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port - 1],msgRxDMA[port - 1].Instance);
 800758c:	3c01      	subs	r4, #1
 800758e:	00e0      	lsls	r0, r4, #3
 8007590:	1b02      	subs	r2, r0, r4
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	4903      	ldr	r1, [pc, #12]	; (80075a4 <SwitchMsgDMAToStream+0x20>)
 8007596:	5851      	ldr	r1, [r2, r1]
 8007598:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <SwitchMsgDMAToStream+0x24>)
 800759a:	18d0      	adds	r0, r2, r3
 800759c:	f005 fad0 	bl	800cb40 <DMA_STREAM_CH_Init>
}
 80075a0:	bd10      	pop	{r4, pc}
 80075a2:	46c0      	nop			; (mov r8, r8)
 80075a4:	20001c24 	.word	0x20001c24
 80075a8:	20001e1c 	.word	0x20001e1c

080075ac <SwitchStreamDMAToMsg>:

/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
 */
void SwitchStreamDMAToMsg(uint8_t port){
 80075ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ae:	b083      	sub	sp, #12
 80075b0:	0004      	movs	r4, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 80075b2:	f7ff ffcd 	bl	8007550 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port - 1],streamDMA[port - 1].Instance);
 80075b6:	9401      	str	r4, [sp, #4]
 80075b8:	3c01      	subs	r4, #1
 80075ba:	00e7      	lsls	r7, r4, #3
 80075bc:	1b3d      	subs	r5, r7, r4
 80075be:	00ed      	lsls	r5, r5, #3
 80075c0:	4b0f      	ldr	r3, [pc, #60]	; (8007600 <SwitchStreamDMAToMsg+0x54>)
 80075c2:	18ed      	adds	r5, r5, r3
 80075c4:	4e0f      	ldr	r6, [pc, #60]	; (8007604 <SwitchStreamDMAToMsg+0x58>)
 80075c6:	1b3b      	subs	r3, r7, r4
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	5999      	ldr	r1, [r3, r6]
 80075cc:	0028      	movs	r0, r5
 80075ce:	f005 fa39 	bl	800ca44 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port - 1].Parent)] =FREE;
 80075d2:	1b3b      	subs	r3, r7, r4
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	18f3      	adds	r3, r6, r3
 80075d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80075da:	f005 fa03 	bl	800c9e4 <GetPort>
 80075de:	2300      	movs	r3, #0
 80075e0:	4a09      	ldr	r2, [pc, #36]	; (8007608 <SwitchStreamDMAToMsg+0x5c>)
 80075e2:	5413      	strb	r3, [r2, r0]
	streamDMA[port - 1].Instance =0;
 80075e4:	1b3f      	subs	r7, r7, r4
 80075e6:	00ff      	lsls	r7, r7, #3
 80075e8:	51bb      	str	r3, [r7, r6]
	dmaStreamDst[port - 1] =0;
 80075ea:	00a4      	lsls	r4, r4, #2
 80075ec:	4a07      	ldr	r2, [pc, #28]	; (800760c <SwitchStreamDMAToMsg+0x60>)
 80075ee:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port),&msgRxDMA[port - 1]);
 80075f0:	9801      	ldr	r0, [sp, #4]
 80075f2:	f007 f939 	bl	800e868 <GetUart>
 80075f6:	0029      	movs	r1, r5
 80075f8:	f005 fe96 	bl	800d328 <DMA_MSG_RX_Setup>
	
}
 80075fc:	b003      	add	sp, #12
 80075fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007600:	20001c24 	.word	0x20001c24
 8007604:	20001e1c 	.word	0x20001e1c
 8007608:	2000116c 	.word	0x2000116c
 800760c:	20001820 	.word	0x20001820

08007610 <StartDMAstream>:

/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
 */
BOS_Status StartDMAstream(UART_HandleTypeDef *huartSrc,UART_HandleTypeDef *huartDst,uint16_t num){
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	0005      	movs	r5, r0
 8007614:	000e      	movs	r6, r1
 8007616:	0017      	movs	r7, r2
	uint8_t srcPort =GetPort(huartSrc);
 8007618:	f005 f9e4 	bl	800c9e4 <GetPort>
 800761c:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 800761e:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <StartDMAstream+0x44>)
 8007620:	5c1b      	ldrb	r3, [r3, r0]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d902      	bls.n	800762c <StartDMAstream+0x1c>
	{
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if(portStatus[srcPort] == STREAM){
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 8007626:	2017      	movs	r0, #23
	if(portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 8007628:	2b03      	cmp	r3, #3
 800762a:	d112      	bne.n	8007652 <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 800762c:	0020      	movs	r0, r4
 800762e:	f7ff ffa9 	bl	8007584 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;
	
	// 2. Setup streaming destination
	dmaStreamDst[srcPort - 1] =huartDst;
 8007632:	1e63      	subs	r3, r4, #1
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4a08      	ldr	r2, [pc, #32]	; (8007658 <StartDMAstream+0x48>)
 8007638:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] =STREAM;
 800763a:	4a06      	ldr	r2, [pc, #24]	; (8007654 <StartDMAstream+0x44>)
 800763c:	2102      	movs	r1, #2
 800763e:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort - 1] =0;
 8007640:	4a06      	ldr	r2, [pc, #24]	; (800765c <StartDMAstream+0x4c>)
 8007642:	2100      	movs	r1, #0
 8007644:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc,huartDst,num);
 8007646:	003a      	movs	r2, r7
 8007648:	0031      	movs	r1, r6
 800764a:	0028      	movs	r0, r5
 800764c:	f005 fed8 	bl	800d400 <DMA_STREAM_Setup>
	
	return BOS_OK;
 8007650:	2000      	movs	r0, #0
}
 8007652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007654:	2000116c 	.word	0x2000116c
 8007658:	20001820 	.word	0x20001820
 800765c:	20001808 	.word	0x20001808

08007660 <DMA_IRQHandler>:

/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
 */
void DMA_IRQHandler(uint8_t port){
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	0004      	movs	r4, r0
	if(portStatus[port] != STREAM){
 8007664:	4b12      	ldr	r3, [pc, #72]	; (80076b0 <DMA_IRQHandler+0x50>)
 8007666:	5c1b      	ldrb	r3, [r3, r0]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d008      	beq.n	800767e <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port - 1]);
 800766c:	3c01      	subs	r4, #1
 800766e:	00e0      	lsls	r0, r4, #3
 8007670:	1b00      	subs	r0, r0, r4
 8007672:	00c0      	lsls	r0, r0, #3
 8007674:	4c0f      	ldr	r4, [pc, #60]	; (80076b4 <DMA_IRQHandler+0x54>)
 8007676:	1900      	adds	r0, r0, r4
 8007678:	f009 ffc2 	bl	8011600 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port - 1];
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
			StopStreamDMA(port);
		}
	}
}
 800767c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port - 1]);
 800767e:	1e45      	subs	r5, r0, #1
 8007680:	00e8      	lsls	r0, r5, #3
 8007682:	1b40      	subs	r0, r0, r5
 8007684:	00c0      	lsls	r0, r0, #3
 8007686:	4b0c      	ldr	r3, [pc, #48]	; (80076b8 <DMA_IRQHandler+0x58>)
 8007688:	18c0      	adds	r0, r0, r3
 800768a:	f009 ffb9 	bl	8011600 <HAL_DMA_IRQHandler>
		if(dmaStreamTotal[port - 1])
 800768e:	00aa      	lsls	r2, r5, #2
 8007690:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <DMA_IRQHandler+0x5c>)
 8007692:	58d2      	ldr	r2, [r2, r3]
 8007694:	2a00      	cmp	r2, #0
 8007696:	d006      	beq.n	80076a6 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port - 1];
 8007698:	4909      	ldr	r1, [pc, #36]	; (80076c0 <DMA_IRQHandler+0x60>)
 800769a:	00ad      	lsls	r5, r5, #2
 800769c:	586b      	ldr	r3, [r5, r1]
 800769e:	3301      	adds	r3, #1
 80076a0:	506b      	str	r3, [r5, r1]
		if(dmaStreamCount[port - 1] >= dmaStreamTotal[port - 1]){
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d8ea      	bhi.n	800767c <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 80076a6:	0020      	movs	r0, r4
 80076a8:	f7ff ff52 	bl	8007550 <StopStreamDMA>
}
 80076ac:	e7e6      	b.n	800767c <DMA_IRQHandler+0x1c>
 80076ae:	46c0      	nop			; (mov r8, r8)
 80076b0:	2000116c 	.word	0x2000116c
 80076b4:	20001c24 	.word	0x20001c24
 80076b8:	20001e1c 	.word	0x20001e1c
 80076bc:	20001838 	.word	0x20001838
 80076c0:	20001808 	.word	0x20001808

080076c4 <ResetUartORE>:

/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
 */
void ResetUartORE(void){
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 80076c4:	4b08      	ldr	r3, [pc, #32]	; (80076e8 <ResetUartORE+0x24>)
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	2308      	movs	r3, #8
 80076ca:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80076cc:	4a07      	ldr	r2, [pc, #28]	; (80076ec <ResetUartORE+0x28>)
 80076ce:	6812      	ldr	r2, [r2, #0]
 80076d0:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 80076d2:	4a07      	ldr	r2, [pc, #28]	; (80076f0 <ResetUartORE+0x2c>)
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	//__HAL_UART_CLEAR_OREFLAG(&huart4);
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 80076d8:	4a06      	ldr	r2, [pc, #24]	; (80076f4 <ResetUartORE+0x30>)
 80076da:	6812      	ldr	r2, [r2, #0]
 80076dc:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 80076de:	4a06      	ldr	r2, [pc, #24]	; (80076f8 <ResetUartORE+0x34>)
 80076e0:	6812      	ldr	r2, [r2, #0]
 80076e2:	6213      	str	r3, [r2, #32]
#endif
}
 80076e4:	4770      	bx	lr
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	2000707c 	.word	0x2000707c
 80076ec:	200071e4 	.word	0x200071e4
 80076f0:	20006f8c 	.word	0x20006f8c
 80076f4:	20007004 	.word	0x20007004
 80076f8:	200070f4 	.word	0x200070f4

080076fc <EE_VerifyPageFullWriteVariable>:
 *           - FLASH_COMPLETE: on success
 *           - PAGE_FULL: if valid page is full
 *           - NO_VALID_PAGE: if no valid page was found
 *           - Flash error code: on write Flash error
 */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress,uint16_t Data){
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	0006      	movs	r6, r0
 8007700:	000d      	movs	r5, r1
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint16_t ValidPage = PAGEA;
	uint32_t Address =0, PageEndAddress =0;
	
	HAL_FLASH_Unlock();
 8007702:	f00a fbed 	bl	8011ee0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007706:	4b2b      	ldr	r3, [pc, #172]	; (80077b4 <EE_VerifyPageFullWriteVariable+0xb8>)
 8007708:	881a      	ldrh	r2, [r3, #0]
 800770a:	b292      	uxth	r2, r2
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800770c:	4b2a      	ldr	r3, [pc, #168]	; (80077b8 <EE_VerifyPageFullWriteVariable+0xbc>)
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	b29b      	uxth	r3, r3
			if(PageStatusB == VALID_PAGE){
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <EE_VerifyPageFullWriteVariable+0x24>
				if(PageStatusA == RECEIVE_DATA){
 8007716:	4929      	ldr	r1, [pc, #164]	; (80077bc <EE_VerifyPageFullWriteVariable+0xc0>)
 8007718:	428a      	cmp	r2, r1
 800771a:	d007      	beq.n	800772c <EE_VerifyPageFullWriteVariable+0x30>
					return PAGEB; /* PageB valid */
 800771c:	3302      	adds	r3, #2
 800771e:	e005      	b.n	800772c <EE_VerifyPageFullWriteVariable+0x30>
			else if(PageStatusA == VALID_PAGE){
 8007720:	2a00      	cmp	r2, #0
 8007722:	d143      	bne.n	80077ac <EE_VerifyPageFullWriteVariable+0xb0>
				if(PageStatusB == RECEIVE_DATA){
 8007724:	4925      	ldr	r1, [pc, #148]	; (80077bc <EE_VerifyPageFullWriteVariable+0xc0>)
 8007726:	428b      	cmp	r3, r1
 8007728:	d042      	beq.n	80077b0 <EE_VerifyPageFullWriteVariable+0xb4>
					return PAGEA; /* PageA valid */
 800772a:	0013      	movs	r3, r2
	if(ValidPage == NO_VALID_PAGE){
		return NO_VALID_PAGE;
	}
	
	/* Get the valid Page start Address */
	Address =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 800772c:	4a24      	ldr	r2, [pc, #144]	; (80077c0 <EE_VerifyPageFullWriteVariable+0xc4>)
 800772e:	189c      	adds	r4, r3, r2
 8007730:	02e4      	lsls	r4, r4, #11
	
	/* Get the valid Page end Address - Each page is twice pages size */
	PageEndAddress =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 8007732:	02db      	lsls	r3, r3, #11
 8007734:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007736:	4694      	mov	ip, r2
 8007738:	4463      	add	r3, ip
	
	/* Check each active page address starting from begining */
	while(Address < PageEndAddress){
		/* Verify if Address and Address+2 contents are 0xFFFFFFFF */
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 800773a:	6822      	ldr	r2, [r4, #0]
 800773c:	3201      	adds	r2, #1
 800773e:	d005      	beq.n	800774c <EE_VerifyPageFullWriteVariable+0x50>
			/* Return program operation status */
			return pFlash.ErrorCode;
		}
		else{
			/* Next address location */
			Address =Address + 4;
 8007740:	3404      	adds	r4, #4
	while(Address < PageEndAddress){
 8007742:	429c      	cmp	r4, r3
 8007744:	d22e      	bcs.n	80077a4 <EE_VerifyPageFullWriteVariable+0xa8>
		if((*(__IO uint32_t* )Address) == 0xFFFFFFFF){
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	3201      	adds	r2, #1
 800774a:	d1f9      	bne.n	8007740 <EE_VerifyPageFullWriteVariable+0x44>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address,Data);
 800774c:	002a      	movs	r2, r5
 800774e:	2300      	movs	r3, #0
 8007750:	0021      	movs	r1, r4
 8007752:	2001      	movs	r0, #1
 8007754:	f00a fc0e 	bl	8011f74 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007758:	481b      	ldr	r0, [pc, #108]	; (80077c8 <EE_VerifyPageFullWriteVariable+0xcc>)
 800775a:	f00a fbdd 	bl	8011f18 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 800775e:	2800      	cmp	r0, #0
 8007760:	d003      	beq.n	800776a <EE_VerifyPageFullWriteVariable+0x6e>
				return pFlash.ErrorCode;
 8007762:	4b1a      	ldr	r3, [pc, #104]	; (80077cc <EE_VerifyPageFullWriteVariable+0xd0>)
 8007764:	69d8      	ldr	r0, [r3, #28]
 8007766:	b280      	uxth	r0, r0
 8007768:	e01f      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 800776a:	4a19      	ldr	r2, [pc, #100]	; (80077d0 <EE_VerifyPageFullWriteVariable+0xd4>)
 800776c:	6913      	ldr	r3, [r2, #16]
 800776e:	2101      	movs	r1, #1
 8007770:	438b      	bics	r3, r1
 8007772:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,Address + 2,VirtAddress);
 8007774:	1ca1      	adds	r1, r4, #2
 8007776:	0032      	movs	r2, r6
 8007778:	2300      	movs	r3, #0
 800777a:	2001      	movs	r0, #1
 800777c:	f00a fbfa 	bl	8011f74 <HAL_FLASH_Program>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007780:	4811      	ldr	r0, [pc, #68]	; (80077c8 <EE_VerifyPageFullWriteVariable+0xcc>)
 8007782:	f00a fbc9 	bl	8011f18 <FLASH_WaitForLastOperation>
			if(FlashStatus != HAL_OK){
 8007786:	2800      	cmp	r0, #0
 8007788:	d003      	beq.n	8007792 <EE_VerifyPageFullWriteVariable+0x96>
				return pFlash.ErrorCode;
 800778a:	4b10      	ldr	r3, [pc, #64]	; (80077cc <EE_VerifyPageFullWriteVariable+0xd0>)
 800778c:	69d8      	ldr	r0, [r3, #28]
 800778e:	b280      	uxth	r0, r0
 8007790:	e00b      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
				CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007792:	4a0f      	ldr	r2, [pc, #60]	; (80077d0 <EE_VerifyPageFullWriteVariable+0xd4>)
 8007794:	6913      	ldr	r3, [r2, #16]
 8007796:	2101      	movs	r1, #1
 8007798:	438b      	bics	r3, r1
 800779a:	6113      	str	r3, [r2, #16]
			return pFlash.ErrorCode;
 800779c:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <EE_VerifyPageFullWriteVariable+0xd0>)
 800779e:	69d8      	ldr	r0, [r3, #28]
 80077a0:	b280      	uxth	r0, r0
 80077a2:	e002      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
		}
	}
	
	HAL_FLASH_Lock();
 80077a4:	f00a fbae 	bl	8011f04 <HAL_FLASH_Lock>
	
	/* Return PAGE_FULL in case the valid page is full */
	return PAGE_FULL;
 80077a8:	2080      	movs	r0, #128	; 0x80
}
 80077aa:	bd70      	pop	{r4, r5, r6, pc}
		return NO_VALID_PAGE;
 80077ac:	20ab      	movs	r0, #171	; 0xab
 80077ae:	e7fc      	b.n	80077aa <EE_VerifyPageFullWriteVariable+0xae>
					return PAGEB; /* PageB valid */
 80077b0:	2302      	movs	r3, #2
 80077b2:	e7bb      	b.n	800772c <EE_VerifyPageFullWriteVariable+0x30>
 80077b4:	0801e000 	.word	0x0801e000
 80077b8:	0801f000 	.word	0x0801f000
 80077bc:	0000eeee 	.word	0x0000eeee
 80077c0:	0001003c 	.word	0x0001003c
 80077c4:	0801effe 	.word	0x0801effe
 80077c8:	0000c350 	.word	0x0000c350
 80077cc:	200073d0 	.word	0x200073d0
 80077d0:	40022000 	.word	0x40022000

080077d4 <EE_ReadVariable>:
uint16_t EE_ReadVariable(uint16_t VirtAddress,uint16_t *Data){
 80077d4:	b510      	push	{r4, lr}
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 80077d6:	4b13      	ldr	r3, [pc, #76]	; (8007824 <EE_ReadVariable+0x50>)
 80077d8:	881c      	ldrh	r4, [r3, #0]
 80077da:	b2a4      	uxth	r4, r4
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 80077dc:	4b12      	ldr	r3, [pc, #72]	; (8007828 <EE_ReadVariable+0x54>)
 80077de:	881b      	ldrh	r3, [r3, #0]
 80077e0:	b29b      	uxth	r3, r3
			if(PageStatusA == VALID_PAGE){
 80077e2:	2c00      	cmp	r4, #0
 80077e4:	d006      	beq.n	80077f4 <EE_ReadVariable+0x20>
			else if(PageStatusB == VALID_PAGE){
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <EE_ReadVariable+0x1e>
		return NO_VALID_PAGE;
 80077ea:	20ab      	movs	r0, #171	; 0xab
 80077ec:	e019      	b.n	8007822 <EE_ReadVariable+0x4e>
	uint16_t AddressValue =0x5555, ReadStatus =1;
 80077ee:	2001      	movs	r0, #1
 80077f0:	e017      	b.n	8007822 <EE_ReadVariable+0x4e>
				return PAGEB; /* PageB valid */
 80077f2:	2402      	movs	r4, #2
	Address =(uint32_t )((EEPROM_START_ADDRESS - 2) + (uint32_t )((2 + ValidPage) * PAGE_SIZE));
 80077f4:	02e3      	lsls	r3, r4, #11
 80077f6:	4a0d      	ldr	r2, [pc, #52]	; (800782c <EE_ReadVariable+0x58>)
 80077f8:	4694      	mov	ip, r2
 80077fa:	4463      	add	r3, ip
	PageStartAddress =(uint32_t )(EEPROM_START_ADDRESS + (uint32_t )(ValidPage * PAGE_SIZE));
 80077fc:	02e4      	lsls	r4, r4, #11
	while(Address > (PageStartAddress + 2)){
 80077fe:	4a0c      	ldr	r2, [pc, #48]	; (8007830 <EE_ReadVariable+0x5c>)
 8007800:	4694      	mov	ip, r2
 8007802:	4464      	add	r4, ip
		AddressValue =(*(__IO uint16_t* )Address);
 8007804:	881a      	ldrh	r2, [r3, #0]
 8007806:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 8007808:	4290      	cmp	r0, r2
 800780a:	d006      	beq.n	800781a <EE_ReadVariable+0x46>
			Address =Address - 4;
 800780c:	3b04      	subs	r3, #4
	while(Address > (PageStartAddress + 2)){
 800780e:	42a3      	cmp	r3, r4
 8007810:	d9ed      	bls.n	80077ee <EE_ReadVariable+0x1a>
		AddressValue =(*(__IO uint16_t* )Address);
 8007812:	881a      	ldrh	r2, [r3, #0]
 8007814:	b292      	uxth	r2, r2
		if(AddressValue == VirtAddress){
 8007816:	4282      	cmp	r2, r0
 8007818:	d1f8      	bne.n	800780c <EE_ReadVariable+0x38>
			*Data =(*(__IO uint16_t* )(Address - 2));
 800781a:	3b02      	subs	r3, #2
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	800b      	strh	r3, [r1, #0]
			ReadStatus =0;
 8007820:	2000      	movs	r0, #0
}
 8007822:	bd10      	pop	{r4, pc}
 8007824:	0801e000 	.word	0x0801e000
 8007828:	0801f000 	.word	0x0801f000
 800782c:	0801effe 	.word	0x0801effe
 8007830:	0801e002 	.word	0x0801e002

08007834 <EE_WriteVariable>:
uint16_t EE_WriteVariable(uint16_t VirtAddress,uint16_t Data){
 8007834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007836:	46de      	mov	lr, fp
 8007838:	4647      	mov	r7, r8
 800783a:	b580      	push	{r7, lr}
 800783c:	b083      	sub	sp, #12
 800783e:	0005      	movs	r5, r0
 8007840:	000e      	movs	r6, r1
	HAL_FLASH_Unlock();
 8007842:	f00a fb4d 	bl	8011ee0 <HAL_FLASH_Unlock>
	Status =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 8007846:	0031      	movs	r1, r6
 8007848:	0028      	movs	r0, r5
 800784a:	f7ff ff57 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 800784e:	0004      	movs	r4, r0
	if(Status == PAGE_FULL){
 8007850:	2880      	cmp	r0, #128	; 0x80
 8007852:	d007      	beq.n	8007864 <EE_WriteVariable+0x30>
	HAL_FLASH_Lock();
 8007854:	f00a fb56 	bl	8011f04 <HAL_FLASH_Lock>
}
 8007858:	0020      	movs	r0, r4
 800785a:	b003      	add	sp, #12
 800785c:	bc0c      	pop	{r2, r3}
 800785e:	4690      	mov	r8, r2
 8007860:	469b      	mov	fp, r3
 8007862:	bdf0      	pop	{r4, r5, r6, r7, pc}
	HAL_StatusTypeDef FlashStatus =HAL_OK;
	uint32_t NewPageAddress =0, OldPageAddress =0;
	uint16_t ValidPage = PAGEA, VarIdx =0;
	uint16_t EepromStatus =0, ReadStatus =0;
	
	HAL_FLASH_Unlock();
 8007864:	f00a fb3c 	bl	8011ee0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007868:	4b3e      	ldr	r3, [pc, #248]	; (8007964 <EE_WriteVariable+0x130>)
 800786a:	881b      	ldrh	r3, [r3, #0]
 800786c:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 800786e:	4a3e      	ldr	r2, [pc, #248]	; (8007968 <EE_WriteVariable+0x134>)
 8007870:	8812      	ldrh	r2, [r2, #0]
 8007872:	b292      	uxth	r2, r2
			if(PageStatusA == VALID_PAGE){
 8007874:	2b00      	cmp	r3, #0
 8007876:	d007      	beq.n	8007888 <EE_WriteVariable+0x54>
		
		/* Old page address where variable will be taken from */
		OldPageAddress = PAGEA1_BASE_ADDRESS;
	}
	else{
		return NO_VALID_PAGE; /* No valid Page */
 8007878:	342b      	adds	r4, #43	; 0x2b
			else if(PageStatusB == VALID_PAGE){
 800787a:	2a00      	cmp	r2, #0
 800787c:	d1ea      	bne.n	8007854 <EE_WriteVariable+0x20>
		OldPageAddress = PAGEB1_BASE_ADDRESS;
 800787e:	4b3a      	ldr	r3, [pc, #232]	; (8007968 <EE_WriteVariable+0x134>)
 8007880:	469b      	mov	fp, r3
		NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007882:	4b38      	ldr	r3, [pc, #224]	; (8007964 <EE_WriteVariable+0x130>)
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	e003      	b.n	8007890 <EE_WriteVariable+0x5c>
		OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007888:	4b36      	ldr	r3, [pc, #216]	; (8007964 <EE_WriteVariable+0x130>)
 800788a:	469b      	mov	fp, r3
		NewPageAddress = PAGEB1_BASE_ADDRESS;
 800788c:	4b36      	ldr	r3, [pc, #216]	; (8007968 <EE_WriteVariable+0x134>)
 800788e:	9301      	str	r3, [sp, #4]
	}
	
	/* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,RECEIVE_DATA);
 8007890:	4a36      	ldr	r2, [pc, #216]	; (800796c <EE_WriteVariable+0x138>)
 8007892:	2300      	movs	r3, #0
 8007894:	9901      	ldr	r1, [sp, #4]
 8007896:	2001      	movs	r0, #1
 8007898:	f00a fb6c 	bl	8011f74 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 800789c:	4834      	ldr	r0, [pc, #208]	; (8007970 <EE_WriteVariable+0x13c>)
 800789e:	f00a fb3b 	bl	8011f18 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d003      	beq.n	80078ae <EE_WriteVariable+0x7a>
		return pFlash.ErrorCode;
 80078a6:	4b33      	ldr	r3, [pc, #204]	; (8007974 <EE_WriteVariable+0x140>)
 80078a8:	69dc      	ldr	r4, [r3, #28]
 80078aa:	b2a4      	uxth	r4, r4
 80078ac:	e7d2      	b.n	8007854 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80078ae:	4a32      	ldr	r2, [pc, #200]	; (8007978 <EE_WriteVariable+0x144>)
 80078b0:	6913      	ldr	r3, [r2, #16]
 80078b2:	2101      	movs	r1, #1
 80078b4:	438b      	bics	r3, r1
 80078b6:	6113      	str	r3, [r2, #16]
	}
	
	/* Write the variable passed as parameter in the new active page */
	EepromStatus =EE_VerifyPageFullWriteVariable(VirtAddress,Data);
 80078b8:	0031      	movs	r1, r6
 80078ba:	0028      	movs	r0, r5
 80078bc:	f7ff ff1e 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 80078c0:	1e04      	subs	r4, r0, #0
	/* If program operation was failed, a Flash error code is returned */
	if(EepromStatus != HAL_OK){
 80078c2:	d1c7      	bne.n	8007854 <EE_WriteVariable+0x20>
		return EepromStatus;
	}
	
	/* Transfer process: transfer variables from old to the new active page */
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80078c4:	2701      	movs	r7, #1
			/* Read the other last variable updates */
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
			/* In case variable corresponding to the virtual address was found */
			if(ReadStatus != 0x1){
				/* Transfer the variable to the new active page */
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 80078c6:	4b2d      	ldr	r3, [pc, #180]	; (800797c <EE_WriteVariable+0x148>)
 80078c8:	4698      	mov	r8, r3
	for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 80078ca:	4e2d      	ldr	r6, [pc, #180]	; (8007980 <EE_WriteVariable+0x14c>)
 80078cc:	e003      	b.n	80078d6 <EE_WriteVariable+0xa2>
 80078ce:	3701      	adds	r7, #1
 80078d0:	b2bf      	uxth	r7, r7
 80078d2:	42b7      	cmp	r7, r6
 80078d4:	d00f      	beq.n	80078f6 <EE_WriteVariable+0xc2>
		if(VarIdx != VirtAddress) /* Check each variable except the one passed as parameter */
 80078d6:	42bd      	cmp	r5, r7
 80078d8:	d0f9      	beq.n	80078ce <EE_WriteVariable+0x9a>
			ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 80078da:	4928      	ldr	r1, [pc, #160]	; (800797c <EE_WriteVariable+0x148>)
 80078dc:	0038      	movs	r0, r7
 80078de:	f7ff ff79 	bl	80077d4 <EE_ReadVariable>
			if(ReadStatus != 0x1){
 80078e2:	2801      	cmp	r0, #1
 80078e4:	d0f3      	beq.n	80078ce <EE_WriteVariable+0x9a>
				EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 80078e6:	4643      	mov	r3, r8
 80078e8:	8819      	ldrh	r1, [r3, #0]
 80078ea:	0038      	movs	r0, r7
 80078ec:	f7ff ff06 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 80078f0:	1e04      	subs	r4, r0, #0
				/* If program operation was failed, a Flash error code is returned */
				if(EepromStatus != HAL_OK){
 80078f2:	d0ec      	beq.n	80078ce <EE_WriteVariable+0x9a>
 80078f4:	e7ae      	b.n	8007854 <EE_WriteVariable+0x20>
			}
		}
	}
	
	/* Erase the old Page: Set old Page status to ERASED status */
	FLASH_PageErase(OldPageAddress);
 80078f6:	4658      	mov	r0, fp
 80078f8:	f00a fbb4 	bl	8012064 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80078fc:	481c      	ldr	r0, [pc, #112]	; (8007970 <EE_WriteVariable+0x13c>)
 80078fe:	f00a fb0b 	bl	8011f18 <FLASH_WaitForLastOperation>
	/* If erase operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007902:	2800      	cmp	r0, #0
 8007904:	d003      	beq.n	800790e <EE_WriteVariable+0xda>
		return pFlash.ErrorCode;
 8007906:	4b1b      	ldr	r3, [pc, #108]	; (8007974 <EE_WriteVariable+0x140>)
 8007908:	69dc      	ldr	r4, [r3, #28]
 800790a:	b2a4      	uxth	r4, r4
 800790c:	e7a2      	b.n	8007854 <EE_WriteVariable+0x20>
	}
	else{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 800790e:	2080      	movs	r0, #128	; 0x80
 8007910:	0100      	lsls	r0, r0, #4
 8007912:	4458      	add	r0, fp
 8007914:	f00a fba6 	bl	8012064 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007918:	4815      	ldr	r0, [pc, #84]	; (8007970 <EE_WriteVariable+0x13c>)
 800791a:	f00a fafd 	bl	8011f18 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 800791e:	2800      	cmp	r0, #0
 8007920:	d003      	beq.n	800792a <EE_WriteVariable+0xf6>
			return pFlash.ErrorCode;
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <EE_WriteVariable+0x140>)
 8007924:	69dc      	ldr	r4, [r3, #28]
 8007926:	b2a4      	uxth	r4, r4
 8007928:	e794      	b.n	8007854 <EE_WriteVariable+0x20>
		}
		else{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 800792a:	4a13      	ldr	r2, [pc, #76]	; (8007978 <EE_WriteVariable+0x144>)
 800792c:	6913      	ldr	r3, [r2, #16]
 800792e:	2102      	movs	r1, #2
 8007930:	438b      	bics	r3, r1
 8007932:	6113      	str	r3, [r2, #16]
		}
	}
	
	/* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,NewPageAddress,VALID_PAGE);
 8007934:	2200      	movs	r2, #0
 8007936:	2300      	movs	r3, #0
 8007938:	9901      	ldr	r1, [sp, #4]
 800793a:	2001      	movs	r0, #1
 800793c:	f00a fb1a 	bl	8011f74 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007940:	480b      	ldr	r0, [pc, #44]	; (8007970 <EE_WriteVariable+0x13c>)
 8007942:	f00a fae9 	bl	8011f18 <FLASH_WaitForLastOperation>
	/* If program operation was failed, a Flash error code is returned */
	if(FlashStatus != HAL_OK){
 8007946:	2800      	cmp	r0, #0
 8007948:	d003      	beq.n	8007952 <EE_WriteVariable+0x11e>
		return pFlash.ErrorCode;
 800794a:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <EE_WriteVariable+0x140>)
 800794c:	69dc      	ldr	r4, [r3, #28]
 800794e:	b2a4      	uxth	r4, r4
 8007950:	e780      	b.n	8007854 <EE_WriteVariable+0x20>
	}
	else{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <EE_WriteVariable+0x144>)
 8007954:	6913      	ldr	r3, [r2, #16]
 8007956:	2101      	movs	r1, #1
 8007958:	438b      	bics	r3, r1
 800795a:	6113      	str	r3, [r2, #16]
	}
	
	HAL_FLASH_Lock();
 800795c:	f00a fad2 	bl	8011f04 <HAL_FLASH_Lock>
	
	/* Return last operation flash status */
	return FlashStatus;
 8007960:	2400      	movs	r4, #0
 8007962:	e777      	b.n	8007854 <EE_WriteVariable+0x20>
 8007964:	0801e000 	.word	0x0801e000
 8007968:	0801f000 	.word	0x0801f000
 800796c:	0000eeee 	.word	0x0000eeee
 8007970:	0000c350 	.word	0x0000c350
 8007974:	200073d0 	.word	0x200073d0
 8007978:	40022000 	.word	0x40022000
 800797c:	20001850 	.word	0x20001850
 8007980:	00000401 	.word	0x00000401

08007984 <EE_Format>:
uint16_t EE_Format(void){
 8007984:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007986:	f00a faab 	bl	8011ee0 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800798a:	4829      	ldr	r0, [pc, #164]	; (8007a30 <EE_Format+0xac>)
 800798c:	f00a fb6a 	bl	8012064 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007990:	4828      	ldr	r0, [pc, #160]	; (8007a34 <EE_Format+0xb0>)
 8007992:	f00a fac1 	bl	8011f18 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 8007996:	2800      	cmp	r0, #0
 8007998:	d003      	beq.n	80079a2 <EE_Format+0x1e>
		return pFlash.ErrorCode;
 800799a:	4b27      	ldr	r3, [pc, #156]	; (8007a38 <EE_Format+0xb4>)
 800799c:	69d8      	ldr	r0, [r3, #28]
 800799e:	b280      	uxth	r0, r0
}
 80079a0:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 80079a2:	4826      	ldr	r0, [pc, #152]	; (8007a3c <EE_Format+0xb8>)
 80079a4:	f00a fb5e 	bl	8012064 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079a8:	4822      	ldr	r0, [pc, #136]	; (8007a34 <EE_Format+0xb0>)
 80079aa:	f00a fab5 	bl	8011f18 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d003      	beq.n	80079ba <EE_Format+0x36>
			return pFlash.ErrorCode;
 80079b2:	4b21      	ldr	r3, [pc, #132]	; (8007a38 <EE_Format+0xb4>)
 80079b4:	69d8      	ldr	r0, [r3, #28]
 80079b6:	b280      	uxth	r0, r0
 80079b8:	e7f2      	b.n	80079a0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 80079ba:	4a21      	ldr	r2, [pc, #132]	; (8007a40 <EE_Format+0xbc>)
 80079bc:	6913      	ldr	r3, [r2, #16]
 80079be:	2102      	movs	r1, #2
 80079c0:	438b      	bics	r3, r1
 80079c2:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 80079c4:	2200      	movs	r2, #0
 80079c6:	2300      	movs	r3, #0
 80079c8:	4919      	ldr	r1, [pc, #100]	; (8007a30 <EE_Format+0xac>)
 80079ca:	2001      	movs	r0, #1
 80079cc:	f00a fad2 	bl	8011f74 <HAL_FLASH_Program>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079d0:	4818      	ldr	r0, [pc, #96]	; (8007a34 <EE_Format+0xb0>)
 80079d2:	f00a faa1 	bl	8011f18 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d003      	beq.n	80079e2 <EE_Format+0x5e>
		return pFlash.ErrorCode;
 80079da:	4b17      	ldr	r3, [pc, #92]	; (8007a38 <EE_Format+0xb4>)
 80079dc:	69d8      	ldr	r0, [r3, #28]
 80079de:	b280      	uxth	r0, r0
 80079e0:	e7de      	b.n	80079a0 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 80079e2:	4a17      	ldr	r2, [pc, #92]	; (8007a40 <EE_Format+0xbc>)
 80079e4:	6913      	ldr	r3, [r2, #16]
 80079e6:	2101      	movs	r1, #1
 80079e8:	438b      	bics	r3, r1
 80079ea:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 80079ec:	4815      	ldr	r0, [pc, #84]	; (8007a44 <EE_Format+0xc0>)
 80079ee:	f00a fb39 	bl	8012064 <FLASH_PageErase>
	FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 80079f2:	4810      	ldr	r0, [pc, #64]	; (8007a34 <EE_Format+0xb0>)
 80079f4:	f00a fa90 	bl	8011f18 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK){
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d003      	beq.n	8007a04 <EE_Format+0x80>
		return pFlash.ErrorCode;
 80079fc:	4b0e      	ldr	r3, [pc, #56]	; (8007a38 <EE_Format+0xb4>)
 80079fe:	69d8      	ldr	r0, [r3, #28]
 8007a00:	b280      	uxth	r0, r0
 8007a02:	e7cd      	b.n	80079a0 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007a04:	4810      	ldr	r0, [pc, #64]	; (8007a48 <EE_Format+0xc4>)
 8007a06:	f00a fb2d 	bl	8012064 <FLASH_PageErase>
		FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a0a:	480a      	ldr	r0, [pc, #40]	; (8007a34 <EE_Format+0xb0>)
 8007a0c:	f00a fa84 	bl	8011f18 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK){
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d003      	beq.n	8007a1c <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007a14:	4b08      	ldr	r3, [pc, #32]	; (8007a38 <EE_Format+0xb4>)
 8007a16:	69d8      	ldr	r0, [r3, #28]
 8007a18:	b280      	uxth	r0, r0
 8007a1a:	e7c1      	b.n	80079a0 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007a1c:	4a08      	ldr	r2, [pc, #32]	; (8007a40 <EE_Format+0xbc>)
 8007a1e:	6913      	ldr	r3, [r2, #16]
 8007a20:	2101      	movs	r1, #1
 8007a22:	438b      	bics	r3, r1
 8007a24:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007a26:	f00a fa6d 	bl	8011f04 <HAL_FLASH_Lock>
	return FlashStatus;
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e7b8      	b.n	80079a0 <EE_Format+0x1c>
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	0801e000 	.word	0x0801e000
 8007a34:	0000c350 	.word	0x0000c350
 8007a38:	200073d0 	.word	0x200073d0
 8007a3c:	0801e800 	.word	0x0801e800
 8007a40:	40022000 	.word	0x40022000
 8007a44:	0801f000 	.word	0x0801f000
 8007a48:	0801f800 	.word	0x0801f800

08007a4c <EE_Init>:
uint16_t EE_Init(void){
 8007a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a4e:	46c6      	mov	lr, r8
 8007a50:	b500      	push	{lr}
	HAL_FLASH_Unlock();
 8007a52:	f00a fa45 	bl	8011ee0 <HAL_FLASH_Unlock>
	PageStatusA =(*(__IO uint16_t* )PAGEA1_BASE_ADDRESS);
 8007a56:	4bbe      	ldr	r3, [pc, #760]	; (8007d50 <EE_Init+0x304>)
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	b29b      	uxth	r3, r3
	PageStatusB =(*(__IO uint16_t* )PAGEB1_BASE_ADDRESS);
 8007a5c:	4abd      	ldr	r2, [pc, #756]	; (8007d54 <EE_Init+0x308>)
 8007a5e:	8812      	ldrh	r2, [r2, #0]
 8007a60:	b292      	uxth	r2, r2
	switch(PageStatusA){
 8007a62:	49bd      	ldr	r1, [pc, #756]	; (8007d58 <EE_Init+0x30c>)
 8007a64:	428b      	cmp	r3, r1
 8007a66:	d100      	bne.n	8007a6a <EE_Init+0x1e>
 8007a68:	e074      	b.n	8007b54 <EE_Init+0x108>
 8007a6a:	49bc      	ldr	r1, [pc, #752]	; (8007d5c <EE_Init+0x310>)
 8007a6c:	428b      	cmp	r3, r1
 8007a6e:	d011      	beq.n	8007a94 <EE_Init+0x48>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d100      	bne.n	8007a76 <EE_Init+0x2a>
 8007a74:	e109      	b.n	8007c8a <EE_Init+0x23e>
			FlashStatus =EE_Format();
 8007a76:	f7ff ff85 	bl	8007984 <EE_Format>
			FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007a7a:	48b9      	ldr	r0, [pc, #740]	; (8007d60 <EE_Init+0x314>)
 8007a7c:	f00a fa4c 	bl	8011f18 <FLASH_WaitForLastOperation>
 8007a80:	b286      	uxth	r6, r0
			if(FlashStatus != HAL_OK){
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d102      	bne.n	8007a8c <EE_Init+0x40>
	HAL_FLASH_Lock();
 8007a86:	f00a fa3d 	bl	8011f04 <HAL_FLASH_Lock>
	return HAL_OK;
 8007a8a:	2600      	movs	r6, #0
}
 8007a8c:	0030      	movs	r0, r6
 8007a8e:	bc04      	pop	{r2}
 8007a90:	4690      	mov	r8, r2
 8007a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007a94:	2a00      	cmp	r2, #0
 8007a96:	d00d      	beq.n	8007ab4 <EE_Init+0x68>
			else if(PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007a98:	4baf      	ldr	r3, [pc, #700]	; (8007d58 <EE_Init+0x30c>)
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d028      	beq.n	8007af0 <EE_Init+0xa4>
				FlashStatus =EE_Format();
 8007a9e:	f7ff ff71 	bl	8007984 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aa2:	48af      	ldr	r0, [pc, #700]	; (8007d60 <EE_Init+0x314>)
 8007aa4:	f00a fa38 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d0ec      	beq.n	8007a86 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007aac:	4bad      	ldr	r3, [pc, #692]	; (8007d64 <EE_Init+0x318>)
 8007aae:	69de      	ldr	r6, [r3, #28]
 8007ab0:	b2b6      	uxth	r6, r6
 8007ab2:	e7eb      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007ab4:	48a6      	ldr	r0, [pc, #664]	; (8007d50 <EE_Init+0x304>)
 8007ab6:	f00a fad5 	bl	8012064 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007aba:	48a9      	ldr	r0, [pc, #676]	; (8007d60 <EE_Init+0x314>)
 8007abc:	f00a fa2c 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	d003      	beq.n	8007acc <EE_Init+0x80>
					return pFlash.ErrorCode;
 8007ac4:	4ba7      	ldr	r3, [pc, #668]	; (8007d64 <EE_Init+0x318>)
 8007ac6:	69de      	ldr	r6, [r3, #28]
 8007ac8:	b2b6      	uxth	r6, r6
 8007aca:	e7df      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007acc:	48a6      	ldr	r0, [pc, #664]	; (8007d68 <EE_Init+0x31c>)
 8007ace:	f00a fac9 	bl	8012064 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ad2:	48a3      	ldr	r0, [pc, #652]	; (8007d60 <EE_Init+0x314>)
 8007ad4:	f00a fa20 	bl	8011f18 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	d105      	bne.n	8007ae8 <EE_Init+0x9c>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007adc:	4aa3      	ldr	r2, [pc, #652]	; (8007d6c <EE_Init+0x320>)
 8007ade:	6913      	ldr	r3, [r2, #16]
 8007ae0:	2102      	movs	r1, #2
 8007ae2:	438b      	bics	r3, r1
 8007ae4:	6113      	str	r3, [r2, #16]
 8007ae6:	e7ce      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007ae8:	4b9e      	ldr	r3, [pc, #632]	; (8007d64 <EE_Init+0x318>)
 8007aea:	69de      	ldr	r6, [r3, #28]
 8007aec:	b2b6      	uxth	r6, r6
 8007aee:	e7cd      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007af0:	4897      	ldr	r0, [pc, #604]	; (8007d50 <EE_Init+0x304>)
 8007af2:	f00a fab7 	bl	8012064 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007af6:	489a      	ldr	r0, [pc, #616]	; (8007d60 <EE_Init+0x314>)
 8007af8:	f00a fa0e 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d003      	beq.n	8007b08 <EE_Init+0xbc>
					return pFlash.ErrorCode;
 8007b00:	4b98      	ldr	r3, [pc, #608]	; (8007d64 <EE_Init+0x318>)
 8007b02:	69de      	ldr	r6, [r3, #28]
 8007b04:	b2b6      	uxth	r6, r6
 8007b06:	e7c1      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007b08:	4897      	ldr	r0, [pc, #604]	; (8007d68 <EE_Init+0x31c>)
 8007b0a:	f00a faab 	bl	8012064 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b0e:	4894      	ldr	r0, [pc, #592]	; (8007d60 <EE_Init+0x314>)
 8007b10:	f00a fa02 	bl	8011f18 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d003      	beq.n	8007b20 <EE_Init+0xd4>
						return pFlash.ErrorCode;
 8007b18:	4b92      	ldr	r3, [pc, #584]	; (8007d64 <EE_Init+0x318>)
 8007b1a:	69de      	ldr	r6, [r3, #28]
 8007b1c:	b2b6      	uxth	r6, r6
 8007b1e:	e7b5      	b.n	8007a8c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007b20:	4a92      	ldr	r2, [pc, #584]	; (8007d6c <EE_Init+0x320>)
 8007b22:	6913      	ldr	r3, [r2, #16]
 8007b24:	2102      	movs	r1, #2
 8007b26:	438b      	bics	r3, r1
 8007b28:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	4989      	ldr	r1, [pc, #548]	; (8007d54 <EE_Init+0x308>)
 8007b30:	2001      	movs	r0, #1
 8007b32:	f00a fa1f 	bl	8011f74 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b36:	488a      	ldr	r0, [pc, #552]	; (8007d60 <EE_Init+0x314>)
 8007b38:	f00a f9ee 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d105      	bne.n	8007b4c <EE_Init+0x100>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007b40:	4a8a      	ldr	r2, [pc, #552]	; (8007d6c <EE_Init+0x320>)
 8007b42:	6913      	ldr	r3, [r2, #16]
 8007b44:	2101      	movs	r1, #1
 8007b46:	438b      	bics	r3, r1
 8007b48:	6113      	str	r3, [r2, #16]
 8007b4a:	e79c      	b.n	8007a86 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007b4c:	4b85      	ldr	r3, [pc, #532]	; (8007d64 <EE_Init+0x318>)
 8007b4e:	69de      	ldr	r6, [r3, #28]
 8007b50:	b2b6      	uxth	r6, r6
 8007b52:	e79b      	b.n	8007a8c <EE_Init+0x40>
			if(PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	d157      	bne.n	8007c08 <EE_Init+0x1bc>
 8007b58:	2401      	movs	r4, #1
	int16_t x =-1;
 8007b5a:	2701      	movs	r7, #1
 8007b5c:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b5e:	4d84      	ldr	r5, [pc, #528]	; (8007d70 <EE_Init+0x324>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b60:	4b84      	ldr	r3, [pc, #528]	; (8007d74 <EE_Init+0x328>)
 8007b62:	4698      	mov	r8, r3
 8007b64:	e005      	b.n	8007b72 <EE_Init+0x126>
						x =VarIdx;
 8007b66:	b227      	sxth	r7, r4
 8007b68:	e008      	b.n	8007b7c <EE_Init+0x130>
 8007b6a:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007b6c:	4b82      	ldr	r3, [pc, #520]	; (8007d78 <EE_Init+0x32c>)
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d018      	beq.n	8007ba4 <EE_Init+0x158>
 8007b72:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEA1_BASE_ADDRESS + 6)) == VarIdx){
 8007b74:	882b      	ldrh	r3, [r5, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	42b3      	cmp	r3, r6
 8007b7a:	d0f4      	beq.n	8007b66 <EE_Init+0x11a>
					if(VarIdx != x){
 8007b7c:	42bc      	cmp	r4, r7
 8007b7e:	d0f4      	beq.n	8007b6a <EE_Init+0x11e>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007b80:	497c      	ldr	r1, [pc, #496]	; (8007d74 <EE_Init+0x328>)
 8007b82:	0030      	movs	r0, r6
 8007b84:	f7ff fe26 	bl	80077d4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007b88:	2801      	cmp	r0, #1
 8007b8a:	d0ee      	beq.n	8007b6a <EE_Init+0x11e>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007b8c:	4643      	mov	r3, r8
 8007b8e:	8819      	ldrh	r1, [r3, #0]
 8007b90:	0030      	movs	r0, r6
 8007b92:	f7ff fdb3 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 8007b96:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007b98:	4871      	ldr	r0, [pc, #452]	; (8007d60 <EE_Init+0x314>)
 8007b9a:	f00a f9bd 	bl	8011f18 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	d0e3      	beq.n	8007b6a <EE_Init+0x11e>
 8007ba2:	e773      	b.n	8007a8c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	4969      	ldr	r1, [pc, #420]	; (8007d50 <EE_Init+0x304>)
 8007baa:	2001      	movs	r0, #1
 8007bac:	f00a f9e2 	bl	8011f74 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bb0:	486b      	ldr	r0, [pc, #428]	; (8007d60 <EE_Init+0x314>)
 8007bb2:	f00a f9b1 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bb6:	2800      	cmp	r0, #0
 8007bb8:	d003      	beq.n	8007bc2 <EE_Init+0x176>
					return pFlash.ErrorCode;
 8007bba:	4b6a      	ldr	r3, [pc, #424]	; (8007d64 <EE_Init+0x318>)
 8007bbc:	69de      	ldr	r6, [r3, #28]
 8007bbe:	b2b6      	uxth	r6, r6
 8007bc0:	e764      	b.n	8007a8c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007bc2:	4a6a      	ldr	r2, [pc, #424]	; (8007d6c <EE_Init+0x320>)
 8007bc4:	6913      	ldr	r3, [r2, #16]
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	438b      	bics	r3, r1
 8007bca:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007bcc:	4861      	ldr	r0, [pc, #388]	; (8007d54 <EE_Init+0x308>)
 8007bce:	f00a fa49 	bl	8012064 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bd2:	4863      	ldr	r0, [pc, #396]	; (8007d60 <EE_Init+0x314>)
 8007bd4:	f00a f9a0 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	d003      	beq.n	8007be4 <EE_Init+0x198>
					return pFlash.ErrorCode;
 8007bdc:	4b61      	ldr	r3, [pc, #388]	; (8007d64 <EE_Init+0x318>)
 8007bde:	69de      	ldr	r6, [r3, #28]
 8007be0:	b2b6      	uxth	r6, r6
 8007be2:	e753      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007be4:	4865      	ldr	r0, [pc, #404]	; (8007d7c <EE_Init+0x330>)
 8007be6:	f00a fa3d 	bl	8012064 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007bea:	485d      	ldr	r0, [pc, #372]	; (8007d60 <EE_Init+0x314>)
 8007bec:	f00a f994 	bl	8011f18 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	d105      	bne.n	8007c00 <EE_Init+0x1b4>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007bf4:	4a5d      	ldr	r2, [pc, #372]	; (8007d6c <EE_Init+0x320>)
 8007bf6:	6913      	ldr	r3, [r2, #16]
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	438b      	bics	r3, r1
 8007bfc:	6113      	str	r3, [r2, #16]
 8007bfe:	e742      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007c00:	4b58      	ldr	r3, [pc, #352]	; (8007d64 <EE_Init+0x318>)
 8007c02:	69de      	ldr	r6, [r3, #28]
 8007c04:	b2b6      	uxth	r6, r6
 8007c06:	e741      	b.n	8007a8c <EE_Init+0x40>
			else if(PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007c08:	4b54      	ldr	r3, [pc, #336]	; (8007d5c <EE_Init+0x310>)
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d00b      	beq.n	8007c26 <EE_Init+0x1da>
				FlashStatus =EE_Format();
 8007c0e:	f7ff feb9 	bl	8007984 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c12:	4853      	ldr	r0, [pc, #332]	; (8007d60 <EE_Init+0x314>)
 8007c14:	f00a f980 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d100      	bne.n	8007c1e <EE_Init+0x1d2>
 8007c1c:	e733      	b.n	8007a86 <EE_Init+0x3a>
					return pFlash.ErrorCode;
 8007c1e:	4b51      	ldr	r3, [pc, #324]	; (8007d64 <EE_Init+0x318>)
 8007c20:	69de      	ldr	r6, [r3, #28]
 8007c22:	b2b6      	uxth	r6, r6
 8007c24:	e732      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c26:	484b      	ldr	r0, [pc, #300]	; (8007d54 <EE_Init+0x308>)
 8007c28:	f00a fa1c 	bl	8012064 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c2c:	484c      	ldr	r0, [pc, #304]	; (8007d60 <EE_Init+0x314>)
 8007c2e:	f00a f973 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d003      	beq.n	8007c3e <EE_Init+0x1f2>
					return pFlash.ErrorCode;
 8007c36:	4b4b      	ldr	r3, [pc, #300]	; (8007d64 <EE_Init+0x318>)
 8007c38:	69de      	ldr	r6, [r3, #28]
 8007c3a:	b2b6      	uxth	r6, r6
 8007c3c:	e726      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007c3e:	484f      	ldr	r0, [pc, #316]	; (8007d7c <EE_Init+0x330>)
 8007c40:	f00a fa10 	bl	8012064 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c44:	4846      	ldr	r0, [pc, #280]	; (8007d60 <EE_Init+0x314>)
 8007c46:	f00a f967 	bl	8011f18 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	d003      	beq.n	8007c56 <EE_Init+0x20a>
						return pFlash.ErrorCode;
 8007c4e:	4b45      	ldr	r3, [pc, #276]	; (8007d64 <EE_Init+0x318>)
 8007c50:	69de      	ldr	r6, [r3, #28]
 8007c52:	b2b6      	uxth	r6, r6
 8007c54:	e71a      	b.n	8007a8c <EE_Init+0x40>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007c56:	4a45      	ldr	r2, [pc, #276]	; (8007d6c <EE_Init+0x320>)
 8007c58:	6913      	ldr	r3, [r2, #16]
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	438b      	bics	r3, r1
 8007c5e:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEA1_BASE_ADDRESS,VALID_PAGE);
 8007c60:	2200      	movs	r2, #0
 8007c62:	2300      	movs	r3, #0
 8007c64:	493a      	ldr	r1, [pc, #232]	; (8007d50 <EE_Init+0x304>)
 8007c66:	2001      	movs	r0, #1
 8007c68:	f00a f984 	bl	8011f74 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007c6c:	483c      	ldr	r0, [pc, #240]	; (8007d60 <EE_Init+0x314>)
 8007c6e:	f00a f953 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007c72:	2800      	cmp	r0, #0
 8007c74:	d003      	beq.n	8007c7e <EE_Init+0x232>
					return pFlash.ErrorCode;
 8007c76:	4b3b      	ldr	r3, [pc, #236]	; (8007d64 <EE_Init+0x318>)
 8007c78:	69de      	ldr	r6, [r3, #28]
 8007c7a:	b2b6      	uxth	r6, r6
 8007c7c:	e706      	b.n	8007a8c <EE_Init+0x40>
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007c7e:	4a3b      	ldr	r2, [pc, #236]	; (8007d6c <EE_Init+0x320>)
 8007c80:	6913      	ldr	r3, [r2, #16]
 8007c82:	2101      	movs	r1, #1
 8007c84:	438b      	bics	r3, r1
 8007c86:	6113      	str	r3, [r2, #16]
 8007c88:	e6fd      	b.n	8007a86 <EE_Init+0x3a>
			if(PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d009      	beq.n	8007ca2 <EE_Init+0x256>
			else if(PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007c8e:	4b33      	ldr	r3, [pc, #204]	; (8007d5c <EE_Init+0x310>)
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d010      	beq.n	8007cb6 <EE_Init+0x26a>
 8007c94:	2401      	movs	r4, #1
	int16_t x =-1;
 8007c96:	2701      	movs	r7, #1
 8007c98:	427f      	negs	r7, r7
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007c9a:	4d39      	ldr	r5, [pc, #228]	; (8007d80 <EE_Init+0x334>)
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007c9c:	4b35      	ldr	r3, [pc, #212]	; (8007d74 <EE_Init+0x328>)
 8007c9e:	4698      	mov	r8, r3
 8007ca0:	e02d      	b.n	8007cfe <EE_Init+0x2b2>
				FlashStatus =EE_Format();
 8007ca2:	f7ff fe6f 	bl	8007984 <EE_Format>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007ca6:	482e      	ldr	r0, [pc, #184]	; (8007d60 <EE_Init+0x314>)
 8007ca8:	f00a f936 	bl	8011f18 <FLASH_WaitForLastOperation>
 8007cac:	b286      	uxth	r6, r0
				if(FlashStatus != HAL_OK){
 8007cae:	2e00      	cmp	r6, #0
 8007cb0:	d100      	bne.n	8007cb4 <EE_Init+0x268>
 8007cb2:	e6e8      	b.n	8007a86 <EE_Init+0x3a>
 8007cb4:	e6ea      	b.n	8007a8c <EE_Init+0x40>
				FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007cb6:	4827      	ldr	r0, [pc, #156]	; (8007d54 <EE_Init+0x308>)
 8007cb8:	f00a f9d4 	bl	8012064 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cbc:	4828      	ldr	r0, [pc, #160]	; (8007d60 <EE_Init+0x314>)
 8007cbe:	f00a f92b 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007cc2:	2800      	cmp	r0, #0
 8007cc4:	d003      	beq.n	8007cce <EE_Init+0x282>
					return pFlash.ErrorCode;
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <EE_Init+0x318>)
 8007cc8:	69de      	ldr	r6, [r3, #28]
 8007cca:	b2b6      	uxth	r6, r6
 8007ccc:	e6de      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cce:	482b      	ldr	r0, [pc, #172]	; (8007d7c <EE_Init+0x330>)
 8007cd0:	f00a f9c8 	bl	8012064 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007cd4:	4822      	ldr	r0, [pc, #136]	; (8007d60 <EE_Init+0x314>)
 8007cd6:	f00a f91f 	bl	8011f18 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d105      	bne.n	8007cea <EE_Init+0x29e>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007cde:	4a23      	ldr	r2, [pc, #140]	; (8007d6c <EE_Init+0x320>)
 8007ce0:	6913      	ldr	r3, [r2, #16]
 8007ce2:	2102      	movs	r1, #2
 8007ce4:	438b      	bics	r3, r1
 8007ce6:	6113      	str	r3, [r2, #16]
 8007ce8:	e6cd      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007cea:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <EE_Init+0x318>)
 8007cec:	69de      	ldr	r6, [r3, #28]
 8007cee:	b2b6      	uxth	r6, r6
 8007cf0:	e6cc      	b.n	8007a8c <EE_Init+0x40>
						x =VarIdx;
 8007cf2:	b227      	sxth	r7, r4
 8007cf4:	e008      	b.n	8007d08 <EE_Init+0x2bc>
 8007cf6:	3401      	adds	r4, #1
				for(VarIdx =1; VarIdx <= NumOfEEPROMvar; VarIdx++){
 8007cf8:	4b1f      	ldr	r3, [pc, #124]	; (8007d78 <EE_Init+0x32c>)
 8007cfa:	429c      	cmp	r4, r3
 8007cfc:	d018      	beq.n	8007d30 <EE_Init+0x2e4>
 8007cfe:	b2a6      	uxth	r6, r4
					if((*(__IO uint16_t* )(PAGEB1_BASE_ADDRESS + 6)) == VarIdx){
 8007d00:	882b      	ldrh	r3, [r5, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	42b3      	cmp	r3, r6
 8007d06:	d0f4      	beq.n	8007cf2 <EE_Init+0x2a6>
					if(VarIdx != x){
 8007d08:	42bc      	cmp	r4, r7
 8007d0a:	d0f4      	beq.n	8007cf6 <EE_Init+0x2aa>
						ReadStatus =EE_ReadVariable(VarIdx,&DataVar);
 8007d0c:	4919      	ldr	r1, [pc, #100]	; (8007d74 <EE_Init+0x328>)
 8007d0e:	0030      	movs	r0, r6
 8007d10:	f7ff fd60 	bl	80077d4 <EE_ReadVariable>
						if(ReadStatus != 0x1){
 8007d14:	2801      	cmp	r0, #1
 8007d16:	d0ee      	beq.n	8007cf6 <EE_Init+0x2aa>
							EepromStatus =EE_VerifyPageFullWriteVariable(VarIdx,DataVar);
 8007d18:	4643      	mov	r3, r8
 8007d1a:	8819      	ldrh	r1, [r3, #0]
 8007d1c:	0030      	movs	r0, r6
 8007d1e:	f7ff fced 	bl	80076fc <EE_VerifyPageFullWriteVariable>
 8007d22:	0006      	movs	r6, r0
							FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d24:	480e      	ldr	r0, [pc, #56]	; (8007d60 <EE_Init+0x314>)
 8007d26:	f00a f8f7 	bl	8011f18 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK){
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d0e3      	beq.n	8007cf6 <EE_Init+0x2aa>
 8007d2e:	e6ad      	b.n	8007a8c <EE_Init+0x40>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,PAGEB1_BASE_ADDRESS,VALID_PAGE);
 8007d30:	2200      	movs	r2, #0
 8007d32:	2300      	movs	r3, #0
 8007d34:	4907      	ldr	r1, [pc, #28]	; (8007d54 <EE_Init+0x308>)
 8007d36:	2001      	movs	r0, #1
 8007d38:	f00a f91c 	bl	8011f74 <HAL_FLASH_Program>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d3c:	4808      	ldr	r0, [pc, #32]	; (8007d60 <EE_Init+0x314>)
 8007d3e:	f00a f8eb 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d01e      	beq.n	8007d84 <EE_Init+0x338>
					return pFlash.ErrorCode;
 8007d46:	4b07      	ldr	r3, [pc, #28]	; (8007d64 <EE_Init+0x318>)
 8007d48:	69de      	ldr	r6, [r3, #28]
 8007d4a:	b2b6      	uxth	r6, r6
 8007d4c:	e69e      	b.n	8007a8c <EE_Init+0x40>
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	0801e000 	.word	0x0801e000
 8007d54:	0801f000 	.word	0x0801f000
 8007d58:	0000eeee 	.word	0x0000eeee
 8007d5c:	0000ffff 	.word	0x0000ffff
 8007d60:	0000c350 	.word	0x0000c350
 8007d64:	200073d0 	.word	0x200073d0
 8007d68:	0801e800 	.word	0x0801e800
 8007d6c:	40022000 	.word	0x40022000
 8007d70:	0801e006 	.word	0x0801e006
 8007d74:	20001850 	.word	0x20001850
 8007d78:	00000401 	.word	0x00000401
 8007d7c:	0801f800 	.word	0x0801f800
 8007d80:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR,FLASH_CR_PG);
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <EE_Init+0x380>)
 8007d86:	6913      	ldr	r3, [r2, #16]
 8007d88:	2101      	movs	r1, #1
 8007d8a:	438b      	bics	r3, r1
 8007d8c:	6113      	str	r3, [r2, #16]
				FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d8e:	4810      	ldr	r0, [pc, #64]	; (8007dd0 <EE_Init+0x384>)
 8007d90:	f00a f968 	bl	8012064 <FLASH_PageErase>
				FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007d94:	480f      	ldr	r0, [pc, #60]	; (8007dd4 <EE_Init+0x388>)
 8007d96:	f00a f8bf 	bl	8011f18 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK){
 8007d9a:	2800      	cmp	r0, #0
 8007d9c:	d003      	beq.n	8007da6 <EE_Init+0x35a>
					return pFlash.ErrorCode;
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <EE_Init+0x38c>)
 8007da0:	69de      	ldr	r6, [r3, #28]
 8007da2:	b2b6      	uxth	r6, r6
 8007da4:	e672      	b.n	8007a8c <EE_Init+0x40>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007da6:	480d      	ldr	r0, [pc, #52]	; (8007ddc <EE_Init+0x390>)
 8007da8:	f00a f95c 	bl	8012064 <FLASH_PageErase>
					FlashStatus =FLASH_WaitForLastOperation((uint32_t )HAL_FLASH_TIMEOUT_VALUE);
 8007dac:	4809      	ldr	r0, [pc, #36]	; (8007dd4 <EE_Init+0x388>)
 8007dae:	f00a f8b3 	bl	8011f18 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK){
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d105      	bne.n	8007dc2 <EE_Init+0x376>
						CLEAR_BIT(FLASH->CR,FLASH_CR_PER);
 8007db6:	4a05      	ldr	r2, [pc, #20]	; (8007dcc <EE_Init+0x380>)
 8007db8:	6913      	ldr	r3, [r2, #16]
 8007dba:	2102      	movs	r1, #2
 8007dbc:	438b      	bics	r3, r1
 8007dbe:	6113      	str	r3, [r2, #16]
 8007dc0:	e661      	b.n	8007a86 <EE_Init+0x3a>
						return pFlash.ErrorCode;
 8007dc2:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <EE_Init+0x38c>)
 8007dc4:	69de      	ldr	r6, [r3, #28]
 8007dc6:	b2b6      	uxth	r6, r6
 8007dc8:	e660      	b.n	8007a8c <EE_Init+0x40>
 8007dca:	46c0      	nop			; (mov r8, r8)
 8007dcc:	40022000 	.word	0x40022000
 8007dd0:	0801e000 	.word	0x0801e000
 8007dd4:	0000c350 	.word	0x0000c350
 8007dd8:	200073d0 	.word	0x200073d0
 8007ddc:	0801e800 	.word	0x0801e800

08007de0 <MX_FREERTOS_Init>:
extern void NotifyMessagingTask(uint8_t port);

/*-----------------------------------------------------------*/

/* Init FreeRTOS */
void MX_FREERTOS_Init(void){
 8007de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007de2:	b091      	sub	sp, #68	; 0x44
	/* Note: CMSIS OS priority levels are -3 to +3 and FreeRTOS priority levels are 0 to 6. Use osPriorityIdle to shift CMSIS priority levels to positive */

	/* Create a defaultTask */
	xTaskCreate(StartDefaultTask,(const char* ) "DefaultTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&defaultTaskHandle);
 8007de4:	25a0      	movs	r5, #160	; 0xa0
 8007de6:	006d      	lsls	r5, r5, #1
 8007de8:	2400      	movs	r4, #0
 8007dea:	9403      	str	r4, [sp, #12]
 8007dec:	9402      	str	r4, [sp, #8]
 8007dee:	4b5e      	ldr	r3, [pc, #376]	; (8007f68 <MX_FREERTOS_Init+0x188>)
 8007df0:	9301      	str	r3, [sp, #4]
 8007df2:	2603      	movs	r6, #3
 8007df4:	9600      	str	r6, [sp, #0]
 8007df6:	2300      	movs	r3, #0
 8007df8:	002a      	movs	r2, r5
 8007dfa:	495c      	ldr	r1, [pc, #368]	; (8007f6c <MX_FREERTOS_Init+0x18c>)
 8007dfc:	485c      	ldr	r0, [pc, #368]	; (8007f70 <MX_FREERTOS_Init+0x190>)
 8007dfe:	f007 fc7d 	bl	800f6fc <xTaskGenericCreate>
	
	/* Create the back-end task */
	xTaskCreate(BackEndTask,(const char* ) "BackEndTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&BackEndTaskHandle);
 8007e02:	9403      	str	r4, [sp, #12]
 8007e04:	9402      	str	r4, [sp, #8]
 8007e06:	4b5b      	ldr	r3, [pc, #364]	; (8007f74 <MX_FREERTOS_Init+0x194>)
 8007e08:	9301      	str	r3, [sp, #4]
 8007e0a:	9600      	str	r6, [sp, #0]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	002a      	movs	r2, r5
 8007e10:	4959      	ldr	r1, [pc, #356]	; (8007f78 <MX_FREERTOS_Init+0x198>)
 8007e12:	485a      	ldr	r0, [pc, #360]	; (8007f7c <MX_FREERTOS_Init+0x19c>)
 8007e14:	f007 fc72 	bl	800f6fc <xTaskGenericCreate>
	
	/* Create the User task */
	xTaskCreate(UserTask,(const char* ) "UserTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&UserTaskHandle);
 8007e18:	9403      	str	r4, [sp, #12]
 8007e1a:	9402      	str	r4, [sp, #8]
 8007e1c:	4b58      	ldr	r3, [pc, #352]	; (8007f80 <MX_FREERTOS_Init+0x1a0>)
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	9600      	str	r6, [sp, #0]
 8007e22:	2300      	movs	r3, #0
 8007e24:	002a      	movs	r2, r5
 8007e26:	4957      	ldr	r1, [pc, #348]	; (8007f84 <MX_FREERTOS_Init+0x1a4>)
 8007e28:	4857      	ldr	r0, [pc, #348]	; (8007f88 <MX_FREERTOS_Init+0x1a8>)
 8007e2a:	f007 fc67 	bl	800f6fc <xTaskGenericCreate>
	
	/* Register command line commands */
	vRegisterCLICommands();
 8007e2e:	f7ff facd 	bl	80073cc <vRegisterCLICommands>
	/* Create the CLI task */
	xTaskCreate(prvCLITask,"CliTask",(2*configMINIMAL_STACK_SIZE),NULL,osPriorityNormal - osPriorityIdle,&xCommandConsoleTaskHandle);
 8007e32:	9403      	str	r4, [sp, #12]
 8007e34:	9402      	str	r4, [sp, #8]
 8007e36:	4b55      	ldr	r3, [pc, #340]	; (8007f8c <MX_FREERTOS_Init+0x1ac>)
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	9600      	str	r6, [sp, #0]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	002a      	movs	r2, r5
 8007e40:	4953      	ldr	r1, [pc, #332]	; (8007f90 <MX_FREERTOS_Init+0x1b0>)
 8007e42:	4854      	ldr	r0, [pc, #336]	; (8007f94 <MX_FREERTOS_Init+0x1b4>)
 8007e44:	f007 fc5a 	bl	800f6fc <xTaskGenericCreate>
	
	/* Create message parsing tasks for module ports */
#ifdef _P1
	xTaskCreate(PxMessagingTask,(const char* ) "P1MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P1,osPriorityAboveNormal - osPriorityIdle,&P1MsgTaskHandle);
 8007e48:	4e53      	ldr	r6, [pc, #332]	; (8007f98 <MX_FREERTOS_Init+0x1b8>)
 8007e4a:	9403      	str	r4, [sp, #12]
 8007e4c:	9402      	str	r4, [sp, #8]
 8007e4e:	4b53      	ldr	r3, [pc, #332]	; (8007f9c <MX_FREERTOS_Init+0x1bc>)
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	2704      	movs	r7, #4
 8007e54:	9700      	str	r7, [sp, #0]
 8007e56:	2301      	movs	r3, #1
 8007e58:	002a      	movs	r2, r5
 8007e5a:	4951      	ldr	r1, [pc, #324]	; (8007fa0 <MX_FREERTOS_Init+0x1c0>)
 8007e5c:	0030      	movs	r0, r6
 8007e5e:	f007 fc4d 	bl	800f6fc <xTaskGenericCreate>
#endif
#ifdef _P2
	xTaskCreate(PxMessagingTask,(const char* ) "P2MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P2,osPriorityAboveNormal - osPriorityIdle,&P2MsgTaskHandle);
 8007e62:	9403      	str	r4, [sp, #12]
 8007e64:	9402      	str	r4, [sp, #8]
 8007e66:	4b4f      	ldr	r3, [pc, #316]	; (8007fa4 <MX_FREERTOS_Init+0x1c4>)
 8007e68:	9301      	str	r3, [sp, #4]
 8007e6a:	9700      	str	r7, [sp, #0]
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	002a      	movs	r2, r5
 8007e70:	494d      	ldr	r1, [pc, #308]	; (8007fa8 <MX_FREERTOS_Init+0x1c8>)
 8007e72:	0030      	movs	r0, r6
 8007e74:	f007 fc42 	bl	800f6fc <xTaskGenericCreate>
#endif
#ifdef _P3
	xTaskCreate(PxMessagingTask,(const char* ) "P3MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P3,osPriorityAboveNormal - osPriorityIdle,&P3MsgTaskHandle);
 8007e78:	9403      	str	r4, [sp, #12]
 8007e7a:	9402      	str	r4, [sp, #8]
 8007e7c:	4b4b      	ldr	r3, [pc, #300]	; (8007fac <MX_FREERTOS_Init+0x1cc>)
 8007e7e:	9301      	str	r3, [sp, #4]
 8007e80:	9700      	str	r7, [sp, #0]
 8007e82:	2303      	movs	r3, #3
 8007e84:	002a      	movs	r2, r5
 8007e86:	494a      	ldr	r1, [pc, #296]	; (8007fb0 <MX_FREERTOS_Init+0x1d0>)
 8007e88:	0030      	movs	r0, r6
 8007e8a:	f007 fc37 	bl	800f6fc <xTaskGenericCreate>
#endif
#ifdef _P4
	xTaskCreate(PxMessagingTask,(const char* ) "P4MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P4,osPriorityAboveNormal - osPriorityIdle,&P4MsgTaskHandle);
 8007e8e:	9403      	str	r4, [sp, #12]
 8007e90:	9402      	str	r4, [sp, #8]
 8007e92:	4b48      	ldr	r3, [pc, #288]	; (8007fb4 <MX_FREERTOS_Init+0x1d4>)
 8007e94:	9301      	str	r3, [sp, #4]
 8007e96:	9700      	str	r7, [sp, #0]
 8007e98:	2304      	movs	r3, #4
 8007e9a:	002a      	movs	r2, r5
 8007e9c:	4946      	ldr	r1, [pc, #280]	; (8007fb8 <MX_FREERTOS_Init+0x1d8>)
 8007e9e:	0030      	movs	r0, r6
 8007ea0:	f007 fc2c 	bl	800f6fc <xTaskGenericCreate>
#endif
#ifdef _P5
	xTaskCreate(PxMessagingTask,(const char* ) "P5MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P5,osPriorityAboveNormal - osPriorityIdle,&P5MsgTaskHandle);
 8007ea4:	9403      	str	r4, [sp, #12]
 8007ea6:	9402      	str	r4, [sp, #8]
 8007ea8:	4b44      	ldr	r3, [pc, #272]	; (8007fbc <MX_FREERTOS_Init+0x1dc>)
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	9700      	str	r7, [sp, #0]
 8007eae:	2305      	movs	r3, #5
 8007eb0:	002a      	movs	r2, r5
 8007eb2:	4943      	ldr	r1, [pc, #268]	; (8007fc0 <MX_FREERTOS_Init+0x1e0>)
 8007eb4:	0030      	movs	r0, r6
 8007eb6:	f007 fc21 	bl	800f6fc <xTaskGenericCreate>
#endif
#ifdef _P6
	xTaskCreate(PxMessagingTask,(const char* ) "P6MsgTask",(2*configMINIMAL_STACK_SIZE),(void* ) P6,osPriorityAboveNormal - osPriorityIdle,&P6MsgTaskHandle);
 8007eba:	9403      	str	r4, [sp, #12]
 8007ebc:	9402      	str	r4, [sp, #8]
 8007ebe:	4b41      	ldr	r3, [pc, #260]	; (8007fc4 <MX_FREERTOS_Init+0x1e4>)
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	9700      	str	r7, [sp, #0]
 8007ec4:	2306      	movs	r3, #6
 8007ec6:	002a      	movs	r2, r5
 8007ec8:	493f      	ldr	r1, [pc, #252]	; (8007fc8 <MX_FREERTOS_Init+0x1e8>)
 8007eca:	0030      	movs	r0, r6
 8007ecc:	f007 fc16 	bl	800f6fc <xTaskGenericCreate>
#endif
	
	/* Create semaphores to protect module ports (FreeRTOS vSemaphoreCreateBinary didn't work) */
#ifdef _P1
	osSemaphoreDef(SemaphoreP1);
 8007ed0:	940f      	str	r4, [sp, #60]	; 0x3c
	PxRxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP1),1);
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	a80f      	add	r0, sp, #60	; 0x3c
 8007ed6:	f006 fe1e 	bl	800eb16 <osSemaphoreCreate>
 8007eda:	4e3c      	ldr	r6, [pc, #240]	; (8007fcc <MX_FREERTOS_Init+0x1ec>)
 8007edc:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2);
 8007ede:	940e      	str	r4, [sp, #56]	; 0x38
	PxTxSemaphoreHandle[P1] =osSemaphoreCreate(osSemaphore(SemaphoreP2),1);
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	a80e      	add	r0, sp, #56	; 0x38
 8007ee4:	f006 fe17 	bl	800eb16 <osSemaphoreCreate>
 8007ee8:	4d39      	ldr	r5, [pc, #228]	; (8007fd0 <MX_FREERTOS_Init+0x1f0>)
 8007eea:	6068      	str	r0, [r5, #4]
#endif
#ifdef _P2	
	osSemaphoreDef(SemaphoreP3);
 8007eec:	940d      	str	r4, [sp, #52]	; 0x34
	PxRxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP3),1);
 8007eee:	2101      	movs	r1, #1
 8007ef0:	a80d      	add	r0, sp, #52	; 0x34
 8007ef2:	f006 fe10 	bl	800eb16 <osSemaphoreCreate>
 8007ef6:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4);
 8007ef8:	940c      	str	r4, [sp, #48]	; 0x30
	PxTxSemaphoreHandle[P2] =osSemaphoreCreate(osSemaphore(SemaphoreP4),1);
 8007efa:	2101      	movs	r1, #1
 8007efc:	a80c      	add	r0, sp, #48	; 0x30
 8007efe:	f006 fe0a 	bl	800eb16 <osSemaphoreCreate>
 8007f02:	60a8      	str	r0, [r5, #8]
#endif
#ifdef _P3	
	osSemaphoreDef(SemaphoreP5);
 8007f04:	940b      	str	r4, [sp, #44]	; 0x2c
	PxRxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP5),1);
 8007f06:	2101      	movs	r1, #1
 8007f08:	a80b      	add	r0, sp, #44	; 0x2c
 8007f0a:	f006 fe04 	bl	800eb16 <osSemaphoreCreate>
 8007f0e:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6);
 8007f10:	940a      	str	r4, [sp, #40]	; 0x28
	PxTxSemaphoreHandle[P3] =osSemaphoreCreate(osSemaphore(SemaphoreP6),1);
 8007f12:	2101      	movs	r1, #1
 8007f14:	a80a      	add	r0, sp, #40	; 0x28
 8007f16:	f006 fdfe 	bl	800eb16 <osSemaphoreCreate>
 8007f1a:	60e8      	str	r0, [r5, #12]
#endif
#ifdef _P4	
	osSemaphoreDef(SemaphoreP7);
 8007f1c:	9409      	str	r4, [sp, #36]	; 0x24
	PxRxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP7),1);
 8007f1e:	2101      	movs	r1, #1
 8007f20:	a809      	add	r0, sp, #36	; 0x24
 8007f22:	f006 fdf8 	bl	800eb16 <osSemaphoreCreate>
 8007f26:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8);
 8007f28:	9408      	str	r4, [sp, #32]
	PxTxSemaphoreHandle[P4] =osSemaphoreCreate(osSemaphore(SemaphoreP8),1);
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	a808      	add	r0, sp, #32
 8007f2e:	f006 fdf2 	bl	800eb16 <osSemaphoreCreate>
 8007f32:	6128      	str	r0, [r5, #16]
#endif
#ifdef _P5	
	osSemaphoreDef(SemaphoreP9);
 8007f34:	9407      	str	r4, [sp, #28]
	PxRxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP9),1);
 8007f36:	2101      	movs	r1, #1
 8007f38:	a807      	add	r0, sp, #28
 8007f3a:	f006 fdec 	bl	800eb16 <osSemaphoreCreate>
 8007f3e:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10);
 8007f40:	9406      	str	r4, [sp, #24]
	PxTxSemaphoreHandle[P5] =osSemaphoreCreate(osSemaphore(SemaphoreP10),1);
 8007f42:	2101      	movs	r1, #1
 8007f44:	a806      	add	r0, sp, #24
 8007f46:	f006 fde6 	bl	800eb16 <osSemaphoreCreate>
 8007f4a:	6168      	str	r0, [r5, #20]
#endif
#ifdef _P6	
	osSemaphoreDef(SemaphoreP11);
 8007f4c:	9405      	str	r4, [sp, #20]
	PxRxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP11),1);
 8007f4e:	2101      	movs	r1, #1
 8007f50:	a805      	add	r0, sp, #20
 8007f52:	f006 fde0 	bl	800eb16 <osSemaphoreCreate>
 8007f56:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12);
 8007f58:	9404      	str	r4, [sp, #16]
	PxTxSemaphoreHandle[P6] =osSemaphoreCreate(osSemaphore(SemaphoreP12),1);
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	a804      	add	r0, sp, #16
 8007f5e:	f006 fdda 	bl	800eb16 <osSemaphoreCreate>
 8007f62:	61a8      	str	r0, [r5, #24]
#endif
	
}
 8007f64:	b011      	add	sp, #68	; 0x44
 8007f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f68:	20001888 	.word	0x20001888
 8007f6c:	0801bbc8 	.word	0x0801bbc8
 8007f70:	08008375 	.word	0x08008375
 8007f74:	20001854 	.word	0x20001854
 8007f78:	0801bbd4 	.word	0x0801bbd4
 8007f7c:	08009d4d 	.word	0x08009d4d
 8007f80:	20001884 	.word	0x20001884
 8007f84:	0801bbe0 	.word	0x0801bbe0
 8007f88:	0801447b 	.word	0x0801447b
 8007f8c:	2000195c 	.word	0x2000195c
 8007f90:	0801bbec 	.word	0x0801bbec
 8007f94:	08005169 	.word	0x08005169
 8007f98:	0800a199 	.word	0x0800a199
 8007f9c:	20001858 	.word	0x20001858
 8007fa0:	0801bbf4 	.word	0x0801bbf4
 8007fa4:	2000185c 	.word	0x2000185c
 8007fa8:	0801bc00 	.word	0x0801bc00
 8007fac:	20001860 	.word	0x20001860
 8007fb0:	0801bc0c 	.word	0x0801bc0c
 8007fb4:	20001864 	.word	0x20001864
 8007fb8:	0801bc18 	.word	0x0801bc18
 8007fbc:	20001868 	.word	0x20001868
 8007fc0:	0801bc24 	.word	0x0801bc24
 8007fc4:	2000186c 	.word	0x2000186c
 8007fc8:	0801bc30 	.word	0x0801bc30
 8007fcc:	20006ef8 	.word	0x20006ef8
 8007fd0:	20006ed8 	.word	0x20006ed8

08007fd4 <ExecuteMonitor>:
}

/*-----------------------------------------------------------*/

void ExecuteMonitor(void)
{
 8007fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fd6:	46de      	mov	lr, fp
 8007fd8:	4657      	mov	r7, sl
 8007fda:	464e      	mov	r6, r9
 8007fdc:	4645      	mov	r5, r8
 8007fde:	b5e0      	push	{r5, r6, r7, lr}
 8007fe0:	b083      	sub	sp, #12
	//                 11 means if the number of command 1 means that the location of the parameter is the first place in the 2dmatrix.
    //                 22 means if the number of command 2 means that the location of the parameter is the second place in the 2dmatrix.



    if(Monitor_time == INTIAL_VALUE)
 8007fe2:	4bd3      	ldr	r3, [pc, #844]	; (8008330 <ExecuteMonitor+0x35c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d000      	beq.n	8007fec <ExecuteMonitor+0x18>
 8007fea:	e19a      	b.n	8008322 <ExecuteMonitor+0x34e>

#if defined(H0FR7) || defined(H08R6) || defined(H09R0)  || defined(H15R0) || defined(H26R0)
initialValue();
#endif

	Monitor_time =0;
 8007fec:	4bd0      	ldr	r3, [pc, #832]	; (8008330 <ExecuteMonitor+0x35c>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
	flag=0;
 8007ff2:	711a      	strb	r2, [r3, #4]
	currentCharacter=SPACE;
 8007ff4:	3220      	adds	r2, #32
 8007ff6:	715a      	strb	r2, [r3, #5]
                	    digitTheCommand=nonProcessingParameter[1]%10;
                	    numCommandParameters=nonProcessingParameter[2]%10;
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
                	    nonProcessingParameterIndex=4;
                	    processingParameterIndex=1;
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8007ff8:	4bce      	ldr	r3, [pc, #824]	; (8008334 <ExecuteMonitor+0x360>)
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	4bce      	ldr	r3, [pc, #824]	; (8008338 <ExecuteMonitor+0x364>)
 8008000:	3304      	adds	r3, #4
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	e186      	b.n	8008314 <ExecuteMonitor+0x340>
				while(perviousCharacter != SPACE && perviousCharacter != null && flag != RUN_FOR_ONCE && flag != CONTINUOUS_RUN);
 8008006:	4bcd      	ldr	r3, [pc, #820]	; (800833c <ExecuteMonitor+0x368>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2220      	movs	r2, #32
 800800c:	4393      	bics	r3, r2
 800800e:	d018      	beq.n	8008042 <ExecuteMonitor+0x6e>
 8008010:	4bc7      	ldr	r3, [pc, #796]	; (8008330 <ExecuteMonitor+0x35c>)
 8008012:	791b      	ldrb	r3, [r3, #4]
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	2a01      	cmp	r2, #1
 8008018:	d800      	bhi.n	800801c <ExecuteMonitor+0x48>
 800801a:	e0b8      	b.n	800818e <ExecuteMonitor+0x1ba>
		            	    perviousCharacter= INTIAL_VALUE;
 800801c:	703d      	strb	r5, [r7, #0]
		            	    Delay_us(100);
 800801e:	2064      	movs	r0, #100	; 0x64
 8008020:	f006 fa36 	bl	800e490 <StartMicroDelay>
							if(currentCharacter != perviousCharacter)
 8008024:	7963      	ldrb	r3, [r4, #5]
 8008026:	783a      	ldrb	r2, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d0ec      	beq.n	8008006 <ExecuteMonitor+0x32>
								nonProcessingParameter[nonProcessingParameterIndex++]=currentCharacter;
 800802c:	49c4      	ldr	r1, [pc, #784]	; (8008340 <ExecuteMonitor+0x36c>)
 800802e:	780a      	ldrb	r2, [r1, #0]
 8008030:	1c50      	adds	r0, r2, #1
 8008032:	7008      	strb	r0, [r1, #0]
 8008034:	49c0      	ldr	r1, [pc, #768]	; (8008338 <ExecuteMonitor+0x364>)
 8008036:	548b      	strb	r3, [r1, r2]
								perviousCharacter=currentCharacter;
 8008038:	4ac0      	ldr	r2, [pc, #768]	; (800833c <ExecuteMonitor+0x368>)
 800803a:	7013      	strb	r3, [r2, #0]
								currentCharacter= INTIAL_VALUE;
 800803c:	4bbc      	ldr	r3, [pc, #752]	; (8008330 <ExecuteMonitor+0x35c>)
 800803e:	715e      	strb	r6, [r3, #5]
 8008040:	e7e1      	b.n	8008006 <ExecuteMonitor+0x32>
                   if(flag == NonActive)
 8008042:	4bbb      	ldr	r3, [pc, #748]	; (8008330 <ExecuteMonitor+0x35c>)
 8008044:	791b      	ldrb	r3, [r3, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d000      	beq.n	800804c <ExecuteMonitor+0x78>
 800804a:	e0a0      	b.n	800818e <ExecuteMonitor+0x1ba>
                	   nonProcessingParameterIndex=0;
 800804c:	4bbc      	ldr	r3, [pc, #752]	; (8008340 <ExecuteMonitor+0x36c>)
 800804e:	464a      	mov	r2, r9
 8008050:	701a      	strb	r2, [r3, #0]
 		            if(FirstCharacterInParameter == '[')
 8008052:	4bb9      	ldr	r3, [pc, #740]	; (8008338 <ExecuteMonitor+0x364>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b5b      	cmp	r3, #91	; 0x5b
 8008058:	d020      	beq.n	800809c <ExecuteMonitor+0xc8>
 		            else if(FirstCharacterInParameter == '#')
 800805a:	2b23      	cmp	r3, #35	; 0x23
 800805c:	d063      	beq.n	8008126 <ExecuteMonitor+0x152>
 		            else if(FirstCharacterInParameter == '=')
 800805e:	2b3d      	cmp	r3, #61	; 0x3d
 8008060:	d074      	beq.n	800814c <ExecuteMonitor+0x178>
                	   }


               	   desiredArray=ParameterLocationIn2dArray;
 8008062:	4cb4      	ldr	r4, [pc, #720]	; (8008334 <ExecuteMonitor+0x360>)
 8008064:	7823      	ldrb	r3, [r4, #0]
 8008066:	4ab7      	ldr	r2, [pc, #732]	; (8008344 <ExecuteMonitor+0x370>)
 8008068:	7013      	strb	r3, [r2, #0]
               	   memset (&twoDMatrix[desiredArray][0],0, SizeOfMatrix2d);
 800806a:	0118      	lsls	r0, r3, #4
 800806c:	1ac3      	subs	r3, r0, r3
 800806e:	48b6      	ldr	r0, [pc, #728]	; (8008348 <ExecuteMonitor+0x374>)
 8008070:	18c0      	adds	r0, r0, r3
               	   memcpy(&twoDMatrix[desiredArray][0],&ProcessingParameter[0],SizeOfMatrix2d);
 8008072:	220f      	movs	r2, #15
 8008074:	0021      	movs	r1, r4
 8008076:	f00c fc96 	bl	80149a6 <memcpy>
		           memset (&nonProcessingParameter[0],0, SizeOfMatrix);
 800807a:	2214      	movs	r2, #20
 800807c:	4649      	mov	r1, r9
 800807e:	48ae      	ldr	r0, [pc, #696]	; (8008338 <ExecuteMonitor+0x364>)
 8008080:	f00c fc9a 	bl	80149b8 <memset>
		           memset (&ProcessingParameter[0],0, SizeOfMatrix);
 8008084:	2214      	movs	r2, #20
 8008086:	4649      	mov	r1, r9
 8008088:	0020      	movs	r0, r4
 800808a:	f00c fc95 	bl	80149b8 <memset>
		                    nonProcessingParameterIndex=0;
 800808e:	465b      	mov	r3, fp
 8008090:	4652      	mov	r2, sl
 8008092:	701a      	strb	r2, [r3, #0]
		            	    perviousCharacter= INTIAL_VALUE;
 8008094:	2603      	movs	r6, #3
 8008096:	1c35      	adds	r5, r6, #0
							if(currentCharacter != perviousCharacter)
 8008098:	4ca5      	ldr	r4, [pc, #660]	; (8008330 <ExecuteMonitor+0x35c>)
 800809a:	e7bf      	b.n	800801c <ExecuteMonitor+0x48>
 		            	nonProcessingParameterIndex++;
 800809c:	4ba8      	ldr	r3, [pc, #672]	; (8008340 <ExecuteMonitor+0x36c>)
 800809e:	2201      	movs	r2, #1
 80080a0:	701a      	strb	r2, [r3, #0]
 		            		if(nonProcessingParameter[nonProcessingParameterIndex]%10 == digitTheCommand)
 80080a2:	4baa      	ldr	r3, [pc, #680]	; (800834c <ExecuteMonitor+0x378>)
 80080a4:	781c      	ldrb	r4, [r3, #0]
 80080a6:	4ba4      	ldr	r3, [pc, #656]	; (8008338 <ExecuteMonitor+0x364>)
 80080a8:	7858      	ldrb	r0, [r3, #1]
 80080aa:	210a      	movs	r1, #10
 80080ac:	f7f8 f8d6 	bl	800025c <__aeabi_uidivmod>
 80080b0:	b2c9      	uxtb	r1, r1
 80080b2:	2603      	movs	r6, #3
 80080b4:	42a1      	cmp	r1, r4
 80080b6:	d00d      	beq.n	80080d4 <ExecuteMonitor+0x100>
 80080b8:	4b9f      	ldr	r3, [pc, #636]	; (8008338 <ExecuteMonitor+0x364>)
 80080ba:	4698      	mov	r8, r3
 80080bc:	1cb5      	adds	r5, r6, #2
 80080be:	b2ed      	uxtb	r5, r5
 80080c0:	4643      	mov	r3, r8
 80080c2:	5d98      	ldrb	r0, [r3, r6]
 80080c4:	210a      	movs	r1, #10
 80080c6:	f7f8 f8c9 	bl	800025c <__aeabi_uidivmod>
 80080ca:	b2c9      	uxtb	r1, r1
 80080cc:	42a1      	cmp	r1, r4
 80080ce:	d002      	beq.n	80080d6 <ExecuteMonitor+0x102>
 80080d0:	002e      	movs	r6, r5
 80080d2:	e7f3      	b.n	80080bc <ExecuteMonitor+0xe8>
 80080d4:	2601      	movs	r6, #1
 		            			nonProcessingParameterIndex++;
 80080d6:	1c74      	adds	r4, r6, #1
 80080d8:	b2e4      	uxtb	r4, r4
 80080da:	4b99      	ldr	r3, [pc, #612]	; (8008340 <ExecuteMonitor+0x36c>)
 80080dc:	701c      	strb	r4, [r3, #0]
 		            			ParameterLocationIn2dArray=nonProcessingParameter[nonProcessingParameterIndex]%10;
 80080de:	4b96      	ldr	r3, [pc, #600]	; (8008338 <ExecuteMonitor+0x364>)
 80080e0:	5d1d      	ldrb	r5, [r3, r4]
 80080e2:	210a      	movs	r1, #10
 80080e4:	0028      	movs	r0, r5
 80080e6:	f7f8 f8b9 	bl	800025c <__aeabi_uidivmod>
 80080ea:	4b92      	ldr	r3, [pc, #584]	; (8008334 <ExecuteMonitor+0x360>)
 80080ec:	7019      	strb	r1, [r3, #0]
 		            	while(nonProcessingParameter[nonProcessingParameterIndex] != ']')
 80080ee:	2d5d      	cmp	r5, #93	; 0x5d
 80080f0:	d009      	beq.n	8008106 <ExecuteMonitor+0x132>
 80080f2:	3602      	adds	r6, #2
 80080f4:	b2f4      	uxtb	r4, r6
 80080f6:	4990      	ldr	r1, [pc, #576]	; (8008338 <ExecuteMonitor+0x364>)
 80080f8:	e000      	b.n	80080fc <ExecuteMonitor+0x128>
 80080fa:	001c      	movs	r4, r3
 80080fc:	1c63      	adds	r3, r4, #1
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	5d0a      	ldrb	r2, [r1, r4]
 8008102:	2a5d      	cmp	r2, #93	; 0x5d
 8008104:	d1f9      	bne.n	80080fa <ExecuteMonitor+0x126>
 		            	nonProcessingParameterIndex++;
 8008106:	3401      	adds	r4, #1
 8008108:	b2e1      	uxtb	r1, r4
 800810a:	4b8d      	ldr	r3, [pc, #564]	; (8008340 <ExecuteMonitor+0x36c>)
 800810c:	7019      	strb	r1, [r3, #0]
 		            	processingParameterIndex=1;
 800810e:	4b90      	ldr	r3, [pc, #576]	; (8008350 <ExecuteMonitor+0x37c>)
 8008110:	2201      	movs	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008114:	4887      	ldr	r0, [pc, #540]	; (8008334 <ExecuteMonitor+0x360>)
 8008116:	3213      	adds	r2, #19
 8008118:	1a52      	subs	r2, r2, r1
 800811a:	4c87      	ldr	r4, [pc, #540]	; (8008338 <ExecuteMonitor+0x364>)
 800811c:	1861      	adds	r1, r4, r1
 800811e:	3001      	adds	r0, #1
 8008120:	f00c fc41 	bl	80149a6 <memcpy>
 8008124:	e79d      	b.n	8008062 <ExecuteMonitor+0x8e>
 		            	ParameterLocationIn2dArray=nonProcessingParameter[1]%10;
 8008126:	4c83      	ldr	r4, [pc, #524]	; (8008334 <ExecuteMonitor+0x360>)
 8008128:	4d83      	ldr	r5, [pc, #524]	; (8008338 <ExecuteMonitor+0x364>)
 800812a:	7868      	ldrb	r0, [r5, #1]
 800812c:	210a      	movs	r1, #10
 800812e:	f7f8 f895 	bl	800025c <__aeabi_uidivmod>
 8008132:	7021      	strb	r1, [r4, #0]
 		            	nonProcessingParameterIndex=2;
 8008134:	4b82      	ldr	r3, [pc, #520]	; (8008340 <ExecuteMonitor+0x36c>)
 8008136:	2202      	movs	r2, #2
 8008138:	701a      	strb	r2, [r3, #0]
 		            	processingParameterIndex=1;
 800813a:	4b85      	ldr	r3, [pc, #532]	; (8008350 <ExecuteMonitor+0x37c>)
 800813c:	3a01      	subs	r2, #1
 800813e:	701a      	strb	r2, [r3, #0]
 		            	memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008140:	1c60      	adds	r0, r4, #1
 8008142:	1ca9      	adds	r1, r5, #2
 8008144:	3211      	adds	r2, #17
 8008146:	f00c fc2e 	bl	80149a6 <memcpy>
 800814a:	e78a      	b.n	8008062 <ExecuteMonitor+0x8e>
                	    digitTheCommand=nonProcessingParameter[1]%10;
 800814c:	4b7a      	ldr	r3, [pc, #488]	; (8008338 <ExecuteMonitor+0x364>)
 800814e:	7858      	ldrb	r0, [r3, #1]
 8008150:	210a      	movs	r1, #10
 8008152:	f7f8 f883 	bl	800025c <__aeabi_uidivmod>
 8008156:	4b7d      	ldr	r3, [pc, #500]	; (800834c <ExecuteMonitor+0x378>)
 8008158:	7019      	strb	r1, [r3, #0]
                	    numCommandParameters=nonProcessingParameter[2]%10;
 800815a:	4b77      	ldr	r3, [pc, #476]	; (8008338 <ExecuteMonitor+0x364>)
 800815c:	7898      	ldrb	r0, [r3, #2]
 800815e:	210a      	movs	r1, #10
 8008160:	f7f8 f87c 	bl	800025c <__aeabi_uidivmod>
 8008164:	4b7b      	ldr	r3, [pc, #492]	; (8008354 <ExecuteMonitor+0x380>)
 8008166:	7019      	strb	r1, [r3, #0]
                	    ParameterLocationIn2dArray=nonProcessingParameter[3]%10;
 8008168:	4b73      	ldr	r3, [pc, #460]	; (8008338 <ExecuteMonitor+0x364>)
 800816a:	78d8      	ldrb	r0, [r3, #3]
 800816c:	210a      	movs	r1, #10
 800816e:	f7f8 f875 	bl	800025c <__aeabi_uidivmod>
 8008172:	4b70      	ldr	r3, [pc, #448]	; (8008334 <ExecuteMonitor+0x360>)
 8008174:	7019      	strb	r1, [r3, #0]
                	    nonProcessingParameterIndex=4;
 8008176:	4b72      	ldr	r3, [pc, #456]	; (8008340 <ExecuteMonitor+0x36c>)
 8008178:	2204      	movs	r2, #4
 800817a:	701a      	strb	r2, [r3, #0]
                	    processingParameterIndex=1;
 800817c:	4b74      	ldr	r3, [pc, #464]	; (8008350 <ExecuteMonitor+0x37c>)
 800817e:	3a03      	subs	r2, #3
 8008180:	701a      	strb	r2, [r3, #0]
                	    memcpy(&ProcessingParameter[processingParameterIndex],&nonProcessingParameter[nonProcessingParameterIndex],SizeOfMatrix-nonProcessingParameterIndex);
 8008182:	320f      	adds	r2, #15
 8008184:	9901      	ldr	r1, [sp, #4]
 8008186:	9800      	ldr	r0, [sp, #0]
 8008188:	f00c fc0d 	bl	80149a6 <memcpy>
 800818c:	e769      	b.n	8008062 <ExecuteMonitor+0x8e>
                   }


                  //mode RUN_FOR_ONCE
                   if(flag == RUN_FOR_ONCE)
 800818e:	2b01      	cmp	r3, #1
 8008190:	d015      	beq.n	80081be <ExecuteMonitor+0x1ea>
		           }



                   //mode CONTINUOUS_RUN
                   if(flag == CONTINUOUS_RUN)
 8008192:	4b67      	ldr	r3, [pc, #412]	; (8008330 <ExecuteMonitor+0x35c>)
 8008194:	791b      	ldrb	r3, [r3, #4]
 8008196:	2b02      	cmp	r3, #2
 8008198:	d000      	beq.n	800819c <ExecuteMonitor+0x1c8>
 800819a:	e778      	b.n	800808e <ExecuteMonitor+0xba>
		           {
                	finalMatrixIndex=0;
 800819c:	2300      	movs	r3, #0
 800819e:	4a6e      	ldr	r2, [pc, #440]	; (8008358 <ExecuteMonitor+0x384>)
 80081a0:	7013      	strb	r3, [r2, #0]
                	twoDMatrixIndex=1;
 80081a2:	4a6e      	ldr	r2, [pc, #440]	; (800835c <ExecuteMonitor+0x388>)
 80081a4:	2101      	movs	r1, #1
 80081a6:	7011      	strb	r1, [r2, #0]
   		          	counter=0;
 80081a8:	4a6d      	ldr	r2, [pc, #436]	; (8008360 <ExecuteMonitor+0x38c>)
 80081aa:	7013      	strb	r3, [r2, #0]
   		           while(counter != numCommandParameters)
 80081ac:	4b69      	ldr	r3, [pc, #420]	; (8008354 <ExecuteMonitor+0x380>)
 80081ae:	781b      	ldrb	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d100      	bne.n	80081b6 <ExecuteMonitor+0x1e2>
 80081b4:	e07f      	b.n	80082b6 <ExecuteMonitor+0x2e2>
   		          {
   		            do
   		          {
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80081b6:	0017      	movs	r7, r2
 80081b8:	4e68      	ldr	r6, [pc, #416]	; (800835c <ExecuteMonitor+0x388>)
 80081ba:	4d67      	ldr	r5, [pc, #412]	; (8008358 <ExecuteMonitor+0x384>)
 80081bc:	e062      	b.n	8008284 <ExecuteMonitor+0x2b0>
                	finalMatrixIndex=0;
 80081be:	4b66      	ldr	r3, [pc, #408]	; (8008358 <ExecuteMonitor+0x384>)
 80081c0:	464a      	mov	r2, r9
 80081c2:	701a      	strb	r2, [r3, #0]
                	twoDMatrixIndex=1;
 80081c4:	4b65      	ldr	r3, [pc, #404]	; (800835c <ExecuteMonitor+0x388>)
 80081c6:	2201      	movs	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
		          	counter=0;
 80081ca:	4b65      	ldr	r3, [pc, #404]	; (8008360 <ExecuteMonitor+0x38c>)
 80081cc:	464a      	mov	r2, r9
 80081ce:	701a      	strb	r2, [r3, #0]
		           while(counter != numCommandParameters)
 80081d0:	4b60      	ldr	r3, [pc, #384]	; (8008354 <ExecuteMonitor+0x380>)
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d02a      	beq.n	800822e <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80081d8:	4b61      	ldr	r3, [pc, #388]	; (8008360 <ExecuteMonitor+0x38c>)
 80081da:	4698      	mov	r8, r3
 80081dc:	4e5f      	ldr	r6, [pc, #380]	; (800835c <ExecuteMonitor+0x388>)
 80081de:	4d5e      	ldr	r5, [pc, #376]	; (8008358 <ExecuteMonitor+0x384>)
 80081e0:	e00b      	b.n	80081fa <ExecuteMonitor+0x226>
		                   counter++;
 80081e2:	4a5f      	ldr	r2, [pc, #380]	; (8008360 <ExecuteMonitor+0x38c>)
 80081e4:	7813      	ldrb	r3, [r2, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	7013      	strb	r3, [r2, #0]
		                   twoDMatrixIndex=1;
 80081ec:	4a5b      	ldr	r2, [pc, #364]	; (800835c <ExecuteMonitor+0x388>)
 80081ee:	2101      	movs	r1, #1
 80081f0:	7011      	strb	r1, [r2, #0]
		           while(counter != numCommandParameters)
 80081f2:	4a58      	ldr	r2, [pc, #352]	; (8008354 <ExecuteMonitor+0x380>)
 80081f4:	7812      	ldrb	r2, [r2, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d019      	beq.n	800822e <ExecuteMonitor+0x25a>
		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 80081fa:	4643      	mov	r3, r8
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	7830      	ldrb	r0, [r6, #0]
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	7033      	strb	r3, [r6, #0]
 8008204:	7829      	ldrb	r1, [r5, #0]
 8008206:	1c4b      	adds	r3, r1, #1
 8008208:	702b      	strb	r3, [r5, #0]
 800820a:	4c56      	ldr	r4, [pc, #344]	; (8008364 <ExecuteMonitor+0x390>)
 800820c:	0113      	lsls	r3, r2, #4
 800820e:	1a9a      	subs	r2, r3, r2
 8008210:	4b4d      	ldr	r3, [pc, #308]	; (8008348 <ExecuteMonitor+0x374>)
 8008212:	189b      	adds	r3, r3, r2
 8008214:	5c1b      	ldrb	r3, [r3, r0]
 8008216:	5463      	strb	r3, [r4, r1]
		            	Delay_ms(1);
 8008218:	2001      	movs	r0, #1
 800821a:	f008 fc9f 	bl	8010b5c <HAL_Delay>
	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 800821e:	782b      	ldrb	r3, [r5, #0]
 8008220:	18e4      	adds	r4, r4, r3
 8008222:	3c01      	subs	r4, #1
 8008224:	7823      	ldrb	r3, [r4, #0]
 8008226:	2220      	movs	r2, #32
 8008228:	4393      	bics	r3, r2
 800822a:	d1e6      	bne.n	80081fa <ExecuteMonitor+0x226>
 800822c:	e7d9      	b.n	80081e2 <ExecuteMonitor+0x20e>
		          		   flag=0;
 800822e:	4b40      	ldr	r3, [pc, #256]	; (8008330 <ExecuteMonitor+0x35c>)
 8008230:	464a      	mov	r2, r9
 8008232:	711a      	strb	r2, [r3, #4]
		          		   counter=0;
 8008234:	4b4a      	ldr	r3, [pc, #296]	; (8008360 <ExecuteMonitor+0x38c>)
 8008236:	701a      	strb	r2, [r3, #0]
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008238:	4b4b      	ldr	r3, [pc, #300]	; (8008368 <ExecuteMonitor+0x394>)
 800823a:	701a      	strb	r2, [r3, #0]
 800823c:	464b      	mov	r3, r9
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 800823e:	4e4b      	ldr	r6, [pc, #300]	; (800836c <ExecuteMonitor+0x398>)
 8008240:	4d48      	ldr	r5, [pc, #288]	; (8008364 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008242:	4c49      	ldr	r4, [pc, #292]	; (8008368 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 8008244:	18f2      	adds	r2, r6, r3
 8008246:	3281      	adds	r2, #129	; 0x81
 8008248:	32ff      	adds	r2, #255	; 0xff
 800824a:	5ceb      	ldrb	r3, [r5, r3]
 800824c:	7013      	strb	r3, [r2, #0]
		          			Delay_ms(1);
 800824e:	2001      	movs	r0, #1
 8008250:	f008 fc84 	bl	8010b5c <HAL_Delay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 8008254:	7823      	ldrb	r3, [r4, #0]
 8008256:	3301      	adds	r3, #1
 8008258:	b2db      	uxtb	r3, r3
 800825a:	7023      	strb	r3, [r4, #0]
 800825c:	2b3f      	cmp	r3, #63	; 0x3f
 800825e:	d9f1      	bls.n	8008244 <ExecuteMonitor+0x270>
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008260:	2240      	movs	r2, #64	; 0x40
 8008262:	4649      	mov	r1, r9
 8008264:	483f      	ldr	r0, [pc, #252]	; (8008364 <ExecuteMonitor+0x390>)
 8008266:	f00c fba7 	bl	80149b8 <memset>
 800826a:	e792      	b.n	8008192 <ExecuteMonitor+0x1be>
   		            	Delay_ms(1);
   		          }

   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);

   		             counter++;
 800826c:	4a3c      	ldr	r2, [pc, #240]	; (8008360 <ExecuteMonitor+0x38c>)
 800826e:	7813      	ldrb	r3, [r2, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	b2db      	uxtb	r3, r3
 8008274:	7013      	strb	r3, [r2, #0]
   		             twoDMatrixIndex=1;
 8008276:	4a39      	ldr	r2, [pc, #228]	; (800835c <ExecuteMonitor+0x388>)
 8008278:	2101      	movs	r1, #1
 800827a:	7011      	strb	r1, [r2, #0]
   		           while(counter != numCommandParameters)
 800827c:	4a35      	ldr	r2, [pc, #212]	; (8008354 <ExecuteMonitor+0x380>)
 800827e:	7812      	ldrb	r2, [r2, #0]
 8008280:	429a      	cmp	r2, r3
 8008282:	d018      	beq.n	80082b6 <ExecuteMonitor+0x2e2>
   		            	finalMatrix[finalMatrixIndex++]=twoDMatrix[counter][twoDMatrixIndex++];
 8008284:	783a      	ldrb	r2, [r7, #0]
 8008286:	7830      	ldrb	r0, [r6, #0]
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	7033      	strb	r3, [r6, #0]
 800828c:	7829      	ldrb	r1, [r5, #0]
 800828e:	1c4b      	adds	r3, r1, #1
 8008290:	702b      	strb	r3, [r5, #0]
 8008292:	4c34      	ldr	r4, [pc, #208]	; (8008364 <ExecuteMonitor+0x390>)
 8008294:	0113      	lsls	r3, r2, #4
 8008296:	1a9a      	subs	r2, r3, r2
 8008298:	4b2b      	ldr	r3, [pc, #172]	; (8008348 <ExecuteMonitor+0x374>)
 800829a:	189b      	adds	r3, r3, r2
 800829c:	5c1b      	ldrb	r3, [r3, r0]
 800829e:	5463      	strb	r3, [r4, r1]
   		            	Delay_ms(1);
 80082a0:	2001      	movs	r0, #1
 80082a2:	f008 fc5b 	bl	8010b5c <HAL_Delay>
   	            while(finalMatrix[finalMatrixIndex-1] != null && finalMatrix[finalMatrixIndex-1] != SPACE);
 80082a6:	782b      	ldrb	r3, [r5, #0]
 80082a8:	18e4      	adds	r4, r4, r3
 80082aa:	3c01      	subs	r4, #1
 80082ac:	7823      	ldrb	r3, [r4, #0]
 80082ae:	2220      	movs	r2, #32
 80082b0:	4393      	bics	r3, r2
 80082b2:	d1e7      	bne.n	8008284 <ExecuteMonitor+0x2b0>
 80082b4:	e7da      	b.n	800826c <ExecuteMonitor+0x298>
   		          }
		            counter=0;
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <ExecuteMonitor+0x38c>)
 80082b8:	2200      	movs	r2, #0
 80082ba:	701a      	strb	r2, [r3, #0]
                  while(flag != NonActive)
 80082bc:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <ExecuteMonitor+0x35c>)
 80082be:	791b      	ldrb	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01d      	beq.n	8008300 <ExecuteMonitor+0x32c>
                  {
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082c4:	4b28      	ldr	r3, [pc, #160]	; (8008368 <ExecuteMonitor+0x394>)
 80082c6:	4699      	mov	r9, r3
 80082c8:	2500      	movs	r5, #0
		          		 					  {
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80082ca:	4f28      	ldr	r7, [pc, #160]	; (800836c <ExecuteMonitor+0x398>)
 80082cc:	4e25      	ldr	r6, [pc, #148]	; (8008364 <ExecuteMonitor+0x390>)
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082ce:	464b      	mov	r3, r9
 80082d0:	701d      	strb	r5, [r3, #0]
 80082d2:	2300      	movs	r3, #0
 80082d4:	4c24      	ldr	r4, [pc, #144]	; (8008368 <ExecuteMonitor+0x394>)
		          			UARTRxBuf[2][Monitor_index]=finalMatrix[Monitor_index];
 80082d6:	18fa      	adds	r2, r7, r3
 80082d8:	3281      	adds	r2, #129	; 0x81
 80082da:	32ff      	adds	r2, #255	; 0xff
 80082dc:	5cf3      	ldrb	r3, [r6, r3]
 80082de:	7013      	strb	r3, [r2, #0]
		          			Delay_us(200);
 80082e0:	20c8      	movs	r0, #200	; 0xc8
 80082e2:	f006 f8d5 	bl	800e490 <StartMicroDelay>
  	          		 for( Monitor_index=0;Monitor_index<COMMAND_SIZE;Monitor_index++)
 80082e6:	7823      	ldrb	r3, [r4, #0]
 80082e8:	3301      	adds	r3, #1
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	7023      	strb	r3, [r4, #0]
 80082ee:	2b3f      	cmp	r3, #63	; 0x3f
 80082f0:	d9f1      	bls.n	80082d6 <ExecuteMonitor+0x302>
		          		 					  }
  	          		 Delay_ms(Monitor_time);
 80082f2:	4c0f      	ldr	r4, [pc, #60]	; (8008330 <ExecuteMonitor+0x35c>)
 80082f4:	6820      	ldr	r0, [r4, #0]
 80082f6:	f008 fc31 	bl	8010b5c <HAL_Delay>
                  while(flag != NonActive)
 80082fa:	7923      	ldrb	r3, [r4, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d1e6      	bne.n	80082ce <ExecuteMonitor+0x2fa>
                  }
  	          		memset (&finalMatrix[0],0, COMMAND_SIZE);
 8008300:	2240      	movs	r2, #64	; 0x40
 8008302:	2100      	movs	r1, #0
 8008304:	4817      	ldr	r0, [pc, #92]	; (8008364 <ExecuteMonitor+0x390>)
 8008306:	f00c fb57 	bl	80149b8 <memset>
  	          	    memset (&UARTRxBuf[2][0],0, MSG_RX_BUF_SIZE);
 800830a:	22c0      	movs	r2, #192	; 0xc0
 800830c:	2100      	movs	r1, #0
 800830e:	4818      	ldr	r0, [pc, #96]	; (8008370 <ExecuteMonitor+0x39c>)
 8008310:	f00c fb52 	bl	80149b8 <memset>
		                    nonProcessingParameterIndex=0;
 8008314:	4b0a      	ldr	r3, [pc, #40]	; (8008340 <ExecuteMonitor+0x36c>)
 8008316:	469b      	mov	fp, r3
 8008318:	2300      	movs	r3, #0
 800831a:	4699      	mov	r9, r3
 800831c:	469a      	mov	sl, r3
		            	    perviousCharacter= INTIAL_VALUE;
 800831e:	4f07      	ldr	r7, [pc, #28]	; (800833c <ExecuteMonitor+0x368>)
 8008320:	e6b5      	b.n	800808e <ExecuteMonitor+0xba>
		           }
	}
  }
}
 8008322:	b003      	add	sp, #12
 8008324:	bc3c      	pop	{r2, r3, r4, r5}
 8008326:	4690      	mov	r8, r2
 8008328:	4699      	mov	r9, r3
 800832a:	46a2      	mov	sl, r4
 800832c:	46ab      	mov	fp, r5
 800832e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008330:	20000000 	.word	0x20000000
 8008334:	20001870 	.word	0x20001870
 8008338:	200018cc 	.word	0x200018cc
 800833c:	20006ed4 	.word	0x20006ed4
 8008340:	20006ef5 	.word	0x20006ef5
 8008344:	20006f17 	.word	0x20006f17
 8008348:	200018e0 	.word	0x200018e0
 800834c:	20006f16 	.word	0x20006f16
 8008350:	20006ef4 	.word	0x20006ef4
 8008354:	20006f14 	.word	0x20006f14
 8008358:	20006f18 	.word	0x20006f18
 800835c:	20006f15 	.word	0x20006f15
 8008360:	20006ef6 	.word	0x20006ef6
 8008364:	2000188c 	.word	0x2000188c
 8008368:	20006ed5 	.word	0x20006ed5
 800836c:	20001348 	.word	0x20001348
 8008370:	200014c8 	.word	0x200014c8

08008374 <StartDefaultTask>:
void StartDefaultTask(void *argument){
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		switch(indMode){
 8008376:	4c28      	ldr	r4, [pc, #160]	; (8008418 <StartDefaultTask+0xa4>)
				indMode =IND_OFF;
 8008378:	0026      	movs	r6, r4
				indMode =IND_OFF;
 800837a:	0025      	movs	r5, r4
 800837c:	e020      	b.n	80083c0 <StartDefaultTask+0x4c>
				RTOS_IND_blink(200);
 800837e:	2790      	movs	r7, #144	; 0x90
 8008380:	05ff      	lsls	r7, r7, #23
 8008382:	2201      	movs	r2, #1
 8008384:	2180      	movs	r1, #128	; 0x80
 8008386:	0038      	movs	r0, r7
 8008388:	f00a f852 	bl	8012430 <HAL_GPIO_WritePin>
 800838c:	20c8      	movs	r0, #200	; 0xc8
 800838e:	f006 fbba 	bl	800eb06 <osDelay>
 8008392:	2200      	movs	r2, #0
 8008394:	2180      	movs	r1, #128	; 0x80
 8008396:	0038      	movs	r0, r7
 8008398:	f00a f84a 	bl	8012430 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 800839c:	4b1e      	ldr	r3, [pc, #120]	; (8008418 <StartDefaultTask+0xa4>)
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]
		CheckAttachedButtons();
 80083a2:	f000 fe09 	bl	8008fb8 <CheckAttachedButtons>
		ExecuteSnippet();
 80083a6:	f7fd f895 	bl	80054d4 <ExecuteSnippet>
		ExecuteMonitor();
 80083aa:	f7ff fe13 	bl	8007fd4 <ExecuteMonitor>
		if(needToDelayButtonStateReset != true)
 80083ae:	4b1b      	ldr	r3, [pc, #108]	; (800841c <StartDefaultTask+0xa8>)
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d102      	bne.n	80083bc <StartDefaultTask+0x48>
			delayButtonStateReset = false;
 80083b6:	4b1a      	ldr	r3, [pc, #104]	; (8008420 <StartDefaultTask+0xac>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
		taskYIELD();
 80083bc:	f008 fa50 	bl	8010860 <vPortYield>
		switch(indMode){
 80083c0:	7823      	ldrb	r3, [r4, #0]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d004      	beq.n	80083d0 <StartDefaultTask+0x5c>
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d014      	beq.n	80083f4 <StartDefaultTask+0x80>
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d1e9      	bne.n	80083a2 <StartDefaultTask+0x2e>
 80083ce:	e7d6      	b.n	800837e <StartDefaultTask+0xa>
				RTOS_IND_blink(100);
 80083d0:	2790      	movs	r7, #144	; 0x90
 80083d2:	05ff      	lsls	r7, r7, #23
 80083d4:	2201      	movs	r2, #1
 80083d6:	2180      	movs	r1, #128	; 0x80
 80083d8:	0038      	movs	r0, r7
 80083da:	f00a f829 	bl	8012430 <HAL_GPIO_WritePin>
 80083de:	2064      	movs	r0, #100	; 0x64
 80083e0:	f006 fb91 	bl	800eb06 <osDelay>
 80083e4:	2200      	movs	r2, #0
 80083e6:	2180      	movs	r1, #128	; 0x80
 80083e8:	0038      	movs	r0, r7
 80083ea:	f00a f821 	bl	8012430 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 80083ee:	2300      	movs	r3, #0
 80083f0:	7033      	strb	r3, [r6, #0]
				break;
 80083f2:	e7d6      	b.n	80083a2 <StartDefaultTask+0x2e>
				RTOS_IND_blink(30);
 80083f4:	2790      	movs	r7, #144	; 0x90
 80083f6:	05ff      	lsls	r7, r7, #23
 80083f8:	2201      	movs	r2, #1
 80083fa:	2180      	movs	r1, #128	; 0x80
 80083fc:	0038      	movs	r0, r7
 80083fe:	f00a f817 	bl	8012430 <HAL_GPIO_WritePin>
 8008402:	201e      	movs	r0, #30
 8008404:	f006 fb7f 	bl	800eb06 <osDelay>
 8008408:	2200      	movs	r2, #0
 800840a:	2180      	movs	r1, #128	; 0x80
 800840c:	0038      	movs	r0, r7
 800840e:	f00a f80f 	bl	8012430 <HAL_GPIO_WritePin>
				indMode =IND_OFF;
 8008412:	2300      	movs	r3, #0
 8008414:	702b      	strb	r3, [r5, #0]
				break;
 8008416:	e7c4      	b.n	80083a2 <StartDefaultTask+0x2e>
 8008418:	20000f68 	.word	0x20000f68
 800841c:	200019c0 	.word	0x200019c0
 8008420:	200019bf 	.word	0x200019bf

08008424 <vMainConfigureTimerForRunTimeStats>:


void vMainConfigureTimerForRunTimeStats(void){
 8008424:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008426:	4b04      	ldr	r3, [pc, #16]	; (8008438 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	4904      	ldr	r1, [pc, #16]	; (800843c <vMainConfigureTimerForRunTimeStats+0x18>)
 800842c:	f7f7 fe90 	bl	8000150 <__udivsi3>
 8008430:	4b03      	ldr	r3, [pc, #12]	; (8008440 <vMainConfigureTimerForRunTimeStats+0x1c>)
 8008432:	6018      	str	r0, [r3, #0]
}
 8008434:	bd10      	pop	{r4, pc}
 8008436:	46c0      	nop			; (mov r8, r8)
 8008438:	20000100 	.word	0x20000100
 800843c:	00002710 	.word	0x00002710
 8008440:	20001958 	.word	0x20001958

08008444 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue(void){
 8008444:	b570      	push	{r4, r5, r6, lr}
	uint32_t ulSysTickCounts, ulTickCount, ulReturn;
	const uint32_t ulSysTickReloadValue =( configCPU_CLOCK_HZ / configTICK_RATE_HZ) - 1UL;
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <ulMainGetRunTimeCounterValue+0x40>)
 8008448:	6818      	ldr	r0, [r3, #0]
 800844a:	21fa      	movs	r1, #250	; 0xfa
 800844c:	0089      	lsls	r1, r1, #2
 800844e:	f7f7 fe7f 	bl	8000150 <__udivsi3>
 8008452:	1e45      	subs	r5, r0, #1
	 anyway to keep the examples simple, and to avoid reliance on a separate
	 timer peripheral. */

	/* The SysTick is a down counter.  How many clocks have passed since it was
	 last reloaded? */
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008454:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <ulMainGetRunTimeCounterValue+0x44>)
 8008456:	681c      	ldr	r4, [r3, #0]
	
	/* How many times has it overflowed? */
	ulTickCount =xTaskGetTickCountFromISR();
 8008458:	f007 fae2 	bl	800fa20 <xTaskGetTickCountFromISR>
	
	/* Is there a SysTick interrupt pending? */
	if((*pulInterruptCTRLState & ulSysTickPendingBit) != 0UL){
 800845c:	4b0b      	ldr	r3, [pc, #44]	; (800848c <ulMainGetRunTimeCounterValue+0x48>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	015b      	lsls	r3, r3, #5
 8008462:	d50d      	bpl.n	8008480 <ulMainGetRunTimeCounterValue+0x3c>
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		 but the tick count not yet incremented. */
		ulTickCount++;
 8008464:	3001      	adds	r0, #1
		
		/* Read the SysTick again, as the overflow might have occurred since
		 it was read last. */
		ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008466:	4b08      	ldr	r3, [pc, #32]	; (8008488 <ulMainGetRunTimeCounterValue+0x44>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	1aed      	subs	r5, r5, r3
	}
	
	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	 configTICK_RATE_HZ is 1000! */
	ulReturn =(ulTickCount * 10UL);
 800846c:	0084      	lsls	r4, r0, #2
 800846e:	1824      	adds	r4, r4, r0
 8008470:	0064      	lsls	r4, r4, #1
	
	/* Add on the number of tenths of a millisecond that have passed since the
	 tick count last got updated. */
	ulReturn +=(ulSysTickCounts / ulClocksPer10thOfAMilliSecond);
 8008472:	4b07      	ldr	r3, [pc, #28]	; (8008490 <ulMainGetRunTimeCounterValue+0x4c>)
 8008474:	6819      	ldr	r1, [r3, #0]
 8008476:	0028      	movs	r0, r5
 8008478:	f7f7 fe6a 	bl	8000150 <__udivsi3>
 800847c:	1900      	adds	r0, r0, r4
	
	return ulReturn;
}
 800847e:	bd70      	pop	{r4, r5, r6, pc}
	ulSysTickCounts =ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008480:	1b2d      	subs	r5, r5, r4
 8008482:	e7f3      	b.n	800846c <ulMainGetRunTimeCounterValue+0x28>
 8008484:	20000100 	.word	0x20000100
 8008488:	e000e018 	.word	0xe000e018
 800848c:	e000ed04 	.word	0xe000ed04
 8008490:	20001958 	.word	0x20001958

08008494 <buttonPressedCallback>:

/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedCallback(uint8_t port) {
}
 8008494:	4770      	bx	lr
	...

08008498 <CheckForTimedButtonPress>:

/*-----------------------------------------------------------*/

/* --- Check for timed press button events
 */
BOS_Status CheckForTimedButtonPress(uint8_t port) {
 8008498:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 800849a:	00c2      	lsls	r2, r0, #3
 800849c:	1812      	adds	r2, r2, r0
 800849e:	4b1b      	ldr	r3, [pc, #108]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084a0:	189b      	adds	r3, r3, r2
 80084a2:	789c      	ldrb	r4, [r3, #2]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (pressCounter[port] == t1) {
 80084a4:	0082      	lsls	r2, r0, #2
 80084a6:	4b1a      	ldr	r3, [pc, #104]	; (8008510 <CheckForTimedButtonPress+0x78>)
 80084a8:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 80084aa:	0163      	lsls	r3, r4, #5
 80084ac:	1b1b      	subs	r3, r3, r4
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	191b      	adds	r3, r3, r4
 80084b2:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1) {
 80084b4:	4299      	cmp	r1, r3
 80084b6:	d01c      	beq.n	80084f2 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec,
 80084b8:	00c2      	lsls	r2, r0, #3
 80084ba:	1812      	adds	r2, r2, r0
 80084bc:	4b13      	ldr	r3, [pc, #76]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	78dc      	ldrb	r4, [r3, #3]
	t2 *= 1000;
 80084c2:	0163      	lsls	r3, r4, #5
 80084c4:	1b1b      	subs	r3, r3, r4
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	191b      	adds	r3, r3, r4
 80084ca:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X1_SEC;
	} else if (pressCounter[port] == t2) {
 80084cc:	4299      	cmp	r1, r3
 80084ce:	d017      	beq.n	8008500 <CheckForTimedButtonPress+0x68>
			t3 = button[port].pressedX3Sec;
 80084d0:	00c2      	lsls	r2, r0, #3
 80084d2:	1812      	adds	r2, r2, r0
 80084d4:	4b0d      	ldr	r3, [pc, #52]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084d6:	189b      	adds	r3, r3, r2
 80084d8:	791c      	ldrb	r4, [r3, #4]
	t3 *= 1000;
 80084da:	0163      	lsls	r3, r4, #5
 80084dc:	1b1b      	subs	r3, r3, r4
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	191b      	adds	r3, r3, r4
 80084e2:	00db      	lsls	r3, r3, #3
		button[port].state = PRESSED_FOR_X2_SEC;
	} else if (pressCounter[port] == t3) {
 80084e4:	4299      	cmp	r1, r3
 80084e6:	d109      	bne.n	80084fc <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X2_SEC;
 80084e8:	0010      	movs	r0, r2
 80084ea:	4b08      	ldr	r3, [pc, #32]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084ec:	220a      	movs	r2, #10
 80084ee:	54c2      	strb	r2, [r0, r3]
 80084f0:	e004      	b.n	80084fc <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 80084f2:	00c3      	lsls	r3, r0, #3
 80084f4:	1818      	adds	r0, r3, r0
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <CheckForTimedButtonPress+0x74>)
 80084f8:	2209      	movs	r2, #9
 80084fa:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 80084fc:	2000      	movs	r0, #0
 80084fe:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008500:	0010      	movs	r0, r2
 8008502:	4b02      	ldr	r3, [pc, #8]	; (800850c <CheckForTimedButtonPress+0x74>)
 8008504:	220a      	movs	r2, #10
 8008506:	54c2      	strb	r2, [r0, r3]
 8008508:	e7f8      	b.n	80084fc <CheckForTimedButtonPress+0x64>
 800850a:	46c0      	nop			; (mov r8, r8)
 800850c:	20001974 	.word	0x20001974
 8008510:	200019c8 	.word	0x200019c8

08008514 <CheckForTimedButtonRelease>:

/*-----------------------------------------------------------*/

/* --- Check for timed release button events
 */
BOS_Status CheckForTimedButtonRelease(uint8_t port) {
 8008514:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8008516:	00c2      	lsls	r2, r0, #3
 8008518:	1812      	adds	r2, r2, r0
 800851a:	4b1b      	ldr	r3, [pc, #108]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 800851c:	189b      	adds	r3, r3, r2
 800851e:	795c      	ldrb	r4, [r3, #5]
	/* Convert to ms */
	t1 *= 1000;
	t2 *= 1000;
	t3 *= 1000;

	if (releaseCounter[port] == t1) {
 8008520:	0082      	lsls	r2, r0, #2
 8008522:	4b1a      	ldr	r3, [pc, #104]	; (800858c <CheckForTimedButtonRelease+0x78>)
 8008524:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000;
 8008526:	0163      	lsls	r3, r4, #5
 8008528:	1b1b      	subs	r3, r3, r4
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	191b      	adds	r3, r3, r4
 800852e:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1) {
 8008530:	4299      	cmp	r1, r3
 8008532:	d01c      	beq.n	800856e <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec,
 8008534:	00c2      	lsls	r2, r0, #3
 8008536:	1812      	adds	r2, r2, r0
 8008538:	4b13      	ldr	r3, [pc, #76]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 800853a:	189b      	adds	r3, r3, r2
 800853c:	799c      	ldrb	r4, [r3, #6]
	t2 *= 1000;
 800853e:	0163      	lsls	r3, r4, #5
 8008540:	1b1b      	subs	r3, r3, r4
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	191b      	adds	r3, r3, r4
 8008546:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y1_SEC;
	} else if (releaseCounter[port] == t2) {
 8008548:	4299      	cmp	r1, r3
 800854a:	d017      	beq.n	800857c <CheckForTimedButtonRelease+0x68>
			t3 = button[port].releasedY3Sec;
 800854c:	00c2      	lsls	r2, r0, #3
 800854e:	1812      	adds	r2, r2, r0
 8008550:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008552:	189b      	adds	r3, r3, r2
 8008554:	79dc      	ldrb	r4, [r3, #7]
	t3 *= 1000;
 8008556:	0163      	lsls	r3, r4, #5
 8008558:	1b1b      	subs	r3, r3, r4
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	191b      	adds	r3, r3, r4
 800855e:	00db      	lsls	r3, r3, #3
		button[port].state = RELEASED_FOR_Y2_SEC;
	} else if (releaseCounter[port] == t3) {
 8008560:	4299      	cmp	r1, r3
 8008562:	d109      	bne.n	8008578 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008564:	0010      	movs	r0, r2
 8008566:	4b08      	ldr	r3, [pc, #32]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008568:	220d      	movs	r2, #13
 800856a:	54c2      	strb	r2, [r0, r3]
 800856c:	e004      	b.n	8008578 <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 800856e:	00c3      	lsls	r3, r0, #3
 8008570:	1818      	adds	r0, r3, r0
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008574:	220c      	movs	r2, #12
 8008576:	54c2      	strb	r2, [r0, r3]
	}

	return result;
}
 8008578:	2000      	movs	r0, #0
 800857a:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 800857c:	0010      	movs	r0, r2
 800857e:	4b02      	ldr	r3, [pc, #8]	; (8008588 <CheckForTimedButtonRelease+0x74>)
 8008580:	220d      	movs	r2, #13
 8008582:	54c2      	strb	r2, [r0, r3]
 8008584:	e7f8      	b.n	8008578 <CheckForTimedButtonRelease+0x64>
 8008586:	46c0      	nop			; (mov r8, r8)
 8008588:	20001974 	.word	0x20001974
 800858c:	200019e4 	.word	0x200019e4

08008590 <AddPortButton>:

/* --- Define a new button attached to one of array ports
 buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
 port: array port (P1 - Px)
 */
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port) {
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	b08d      	sub	sp, #52	; 0x34
 8008594:	0006      	movs	r6, r0
 8008596:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port;
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;

	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 8008598:	4b41      	ldr	r3, [pc, #260]	; (80086a0 <AddPortButton+0x110>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d157      	bne.n	8008650 <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;
 80085a0:	4b40      	ldr	r3, [pc, #256]	; (80086a4 <AddPortButton+0x114>)
 80085a2:	2204      	movs	r2, #4
 80085a4:	551a      	strb	r2, [r3, r4]

	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 80085a6:	4b3e      	ldr	r3, [pc, #248]	; (80086a0 <AddPortButton+0x110>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d15a      	bne.n	8008664 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}

	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 80085ae:	2512      	movs	r5, #18
 80085b0:	446d      	add	r5, sp
 80085b2:	af04      	add	r7, sp, #16
 80085b4:	9700      	str	r7, [sp, #0]
 80085b6:	ab05      	add	r3, sp, #20
 80085b8:	002a      	movs	r2, r5
 80085ba:	a906      	add	r1, sp, #24
 80085bc:	0020      	movs	r0, r4
 80085be:	f005 fb45 	bl	800dc4c <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 80085c2:	882b      	ldrh	r3, [r5, #0]
 80085c4:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80085c6:	2301      	movs	r3, #1
 80085c8:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ca:	2500      	movs	r5, #0
 80085cc:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80085ce:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef*) TX_Port, &GPIO_InitStruct);
 80085d0:	a907      	add	r1, sp, #28
 80085d2:	9806      	ldr	r0, [sp, #24]
 80085d4:	f009 fdb8 	bl	8012148 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 80085d8:	883b      	ldrh	r3, [r7, #0]
 80085da:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80085dc:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80085de:	2302      	movs	r3, #2
 80085e0:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef*) RX_Port, &GPIO_InitStruct);
 80085e2:	a907      	add	r1, sp, #28
 80085e4:	9805      	ldr	r0, [sp, #20]
 80085e6:	f009 fdaf 	bl	8012148 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;
 80085ea:	00e2      	lsls	r2, r4, #3
 80085ec:	1912      	adds	r2, r2, r4
 80085ee:	4b2e      	ldr	r3, [pc, #184]	; (80086a8 <AddPortButton+0x118>)
 80085f0:	189b      	adds	r3, r3, r2
 80085f2:	705e      	strb	r6, [r3, #1]

	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80085f4:	0025      	movs	r5, r4
 80085f6:	353a      	adds	r5, #58	; 0x3a
 80085f8:	00ad      	lsls	r5, r5, #2
 80085fa:	210e      	movs	r1, #14
 80085fc:	4469      	add	r1, sp
 80085fe:	0028      	movs	r0, r5
 8008600:	f7ff f8e8 	bl	80077d4 <EE_ReadVariable>
	if (!res)											// This variable exists
 8008604:	2800      	cmp	r0, #0
 8008606:	d133      	bne.n	8008670 <AddPortButton+0xe0>
	{
		temp8 = (uint8_t) (temp16 >> 8);
 8008608:	230e      	movs	r3, #14
 800860a:	446b      	add	r3, sp
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	0a1b      	lsrs	r3, r3, #8
		if (((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType))// This is same port and same type, do not update
 8008610:	091a      	lsrs	r2, r3, #4
 8008612:	42a2      	cmp	r2, r4
 8008614:	d103      	bne.n	800861e <AddPortButton+0x8e>
 8008616:	220f      	movs	r2, #15
 8008618:	4013      	ands	r3, r2
 800861a:	42b3      	cmp	r3, r6
 800861c:	d015      	beq.n	800864a <AddPortButton+0xba>
			return BOS_OK;
		else 											// Update the variable
		{
			temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 800861e:	0324      	lsls	r4, r4, #12
 8008620:	0231      	lsls	r1, r6, #8
 8008622:	4321      	orrs	r1, r4
 8008624:	b289      	uxth	r1, r1
 8008626:	230e      	movs	r3, #14
 8008628:	446b      	add	r3, sp
 800862a:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800862c:	0028      	movs	r0, r5
 800862e:	f7ff f901 	bl	8007834 <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008632:	1c68      	adds	r0, r5, #1
 8008634:	2100      	movs	r1, #0
 8008636:	f7ff f8fd 	bl	8007834 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800863a:	1ca8      	adds	r0, r5, #2
 800863c:	2100      	movs	r1, #0
 800863e:	f7ff f8f9 	bl	8007834 <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008642:	1ce8      	adds	r0, r5, #3
 8008644:	2100      	movs	r1, #0
 8008646:	f7ff f8f5 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	return result;
}
 800864a:	2000      	movs	r0, #0
 800864c:	b00d      	add	sp, #52	; 0x34
 800864e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]); /* Give back the semaphore if it was taken */
 8008650:	008d      	lsls	r5, r1, #2
 8008652:	4b16      	ldr	r3, [pc, #88]	; (80086ac <AddPortButton+0x11c>)
 8008654:	58e8      	ldr	r0, [r5, r3]
 8008656:	f006 faa1 	bl	800eb9c <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <AddPortButton+0x120>)
 800865c:	58e8      	ldr	r0, [r5, r3]
 800865e:	f006 fa9d 	bl	800eb9c <osSemaphoreRelease>
 8008662:	e79d      	b.n	80085a0 <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 8008664:	0020      	movs	r0, r4
 8008666:	f006 f8ff 	bl	800e868 <GetUart>
 800866a:	f00b f954 	bl	8013916 <HAL_UART_DeInit>
 800866e:	e79e      	b.n	80085ae <AddPortButton+0x1e>
		temp16 = ((uint16_t) port << 12) | ((uint16_t) buttonType << 8);
 8008670:	0324      	lsls	r4, r4, #12
 8008672:	0231      	lsls	r1, r6, #8
 8008674:	4321      	orrs	r1, r4
 8008676:	b289      	uxth	r1, r1
 8008678:	230e      	movs	r3, #14
 800867a:	446b      	add	r3, sp
 800867c:	8019      	strh	r1, [r3, #0]
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 800867e:	0028      	movs	r0, r5
 8008680:	f7ff f8d8 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 8008684:	1c68      	adds	r0, r5, #1
 8008686:	2100      	movs	r1, #0
 8008688:	f7ff f8d4 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 800868c:	1ca8      	adds	r0, r5, #2
 800868e:	2100      	movs	r1, #0
 8008690:	f7ff f8d0 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 8008694:	1ce8      	adds	r0, r5, #3
 8008696:	2100      	movs	r1, #0
 8008698:	f7ff f8cc 	bl	8007834 <EE_WriteVariable>
 800869c:	e7d5      	b.n	800864a <AddPortButton+0xba>
 800869e:	46c0      	nop			; (mov r8, r8)
 80086a0:	20000ae6 	.word	0x20000ae6
 80086a4:	2000116c 	.word	0x2000116c
 80086a8:	20001974 	.word	0x20001974
 80086ac:	20006ef8 	.word	0x20006ef8
 80086b0:	20006ed8 	.word	0x20006ed8

080086b4 <RemovePortButton>:
/*-----------------------------------------------------------*/

/* --- Undefine a button attached to one of array ports and restore the port to default state
 port: array port (P1 - Px)
 */
BOS_Status RemovePortButton(uint8_t port) {
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;

	/* 1. Remove from button struct */
	button[port].type = NONE;
 80086ba:	4837      	ldr	r0, [pc, #220]	; (8008798 <RemovePortButton+0xe4>)
 80086bc:	00e9      	lsls	r1, r5, #3
 80086be:	1949      	adds	r1, r1, r5
 80086c0:	1842      	adds	r2, r0, r1
 80086c2:	2300      	movs	r3, #0
 80086c4:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 80086c6:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 80086c8:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0;
 80086ca:	7093      	strb	r3, [r2, #2]
	button[port].pressedX2Sec = 0;
 80086cc:	70d3      	strb	r3, [r2, #3]
	button[port].pressedX3Sec = 0;
 80086ce:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0;
 80086d0:	7153      	strb	r3, [r2, #5]
	button[port].releasedY2Sec = 0;
 80086d2:	7193      	strb	r3, [r2, #6]
	button[port].releasedY3Sec = 0;
 80086d4:	71d3      	strb	r3, [r2, #7]

	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80086d6:	002c      	movs	r4, r5
 80086d8:	343a      	adds	r4, #58	; 0x3a
 80086da:	00a4      	lsls	r4, r4, #2
 80086dc:	466b      	mov	r3, sp
 80086de:	1d99      	adds	r1, r3, #6
 80086e0:	0020      	movs	r0, r4
 80086e2:	f7ff f877 	bl	80077d4 <EE_ReadVariable>
	if (!res)						// This variable exists, reset all to zeros
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d02b      	beq.n	8008742 <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
	}

	/* 3. Initialize UART at this port */
	UART_HandleTypeDef *huart = GetUart(port);
 80086ea:	0028      	movs	r0, r5
 80086ec:	f006 f8bc 	bl	800e868 <GetUart>
 80086f0:	0006      	movs	r6, r0

	if (huart->Instance == USART1) {
 80086f2:	6803      	ldr	r3, [r0, #0]
 80086f4:	4a29      	ldr	r2, [pc, #164]	; (800879c <RemovePortButton+0xe8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d034      	beq.n	8008764 <RemovePortButton+0xb0>
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} else if (huart->Instance == USART2) {
 80086fa:	4a29      	ldr	r2, [pc, #164]	; (80087a0 <RemovePortButton+0xec>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d035      	beq.n	800876c <RemovePortButton+0xb8>
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} else if (huart->Instance == USART3) {
 8008700:	4a28      	ldr	r2, [pc, #160]	; (80087a4 <RemovePortButton+0xf0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d036      	beq.n	8008774 <RemovePortButton+0xc0>
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} else if (huart->Instance == USART4) {
 8008706:	4a28      	ldr	r2, [pc, #160]	; (80087a8 <RemovePortButton+0xf4>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d037      	beq.n	800877c <RemovePortButton+0xc8>
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} else if (huart->Instance == USART5) {
 800870c:	4a27      	ldr	r2, [pc, #156]	; (80087ac <RemovePortButton+0xf8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d038      	beq.n	8008784 <RemovePortButton+0xd0>
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} else if (huart->Instance == USART6) {
 8008712:	4a27      	ldr	r2, [pc, #156]	; (80087b0 <RemovePortButton+0xfc>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d039      	beq.n	800878c <RemovePortButton+0xd8>
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} else if (huart->Instance == USART7) {
 8008718:	4a26      	ldr	r2, [pc, #152]	; (80087b4 <RemovePortButton+0x100>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d03a      	beq.n	8008794 <RemovePortButton+0xe0>
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} else if (huart->Instance == USART8) {
 800871e:	4a26      	ldr	r2, [pc, #152]	; (80087b8 <RemovePortButton+0x104>)
 8008720:	4694      	mov	ip, r2
 8008722:	4463      	add	r3, ip
 8008724:	1e5c      	subs	r4, r3, #1
 8008726:	41a3      	sbcs	r3, r4
 8008728:	425c      	negs	r4, r3
 800872a:	b2e4      	uxtb	r4, r4
#endif
	} else
		result = BOS_ERROR;

	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 800872c:	4b23      	ldr	r3, [pc, #140]	; (80087bc <RemovePortButton+0x108>)
 800872e:	2200      	movs	r2, #0
 8008730:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t*) &cRxedChar, 1);
 8008732:	3201      	adds	r2, #1
 8008734:	4922      	ldr	r1, [pc, #136]	; (80087c0 <RemovePortButton+0x10c>)
 8008736:	0030      	movs	r0, r6
 8008738:	f00b f946 	bl	80139c8 <HAL_UART_Receive_IT>

	return result;
}
 800873c:	0020      	movs	r0, r4
 800873e:	b002      	add	sp, #8
 8008740:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), 0);
 8008742:	2100      	movs	r1, #0
 8008744:	0020      	movs	r0, r4
 8008746:	f7ff f875 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, 0);
 800874a:	1c60      	adds	r0, r4, #1
 800874c:	2100      	movs	r1, #0
 800874e:	f7ff f871 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, 0);
 8008752:	1ca0      	adds	r0, r4, #2
 8008754:	2100      	movs	r1, #0
 8008756:	f7ff f86d 	bl	8007834 <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, 0);
 800875a:	1ce0      	adds	r0, r4, #3
 800875c:	2100      	movs	r1, #0
 800875e:	f7ff f869 	bl	8007834 <EE_WriteVariable>
 8008762:	e7c2      	b.n	80086ea <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008764:	f005 feb8 	bl	800e4d8 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008768:	2400      	movs	r4, #0
 800876a:	e7df      	b.n	800872c <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 800876c:	f005 fecc 	bl	800e508 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008770:	2400      	movs	r4, #0
 8008772:	e7db      	b.n	800872c <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008774:	f005 fee0 	bl	800e538 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008778:	2400      	movs	r4, #0
 800877a:	e7d7      	b.n	800872c <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 800877c:	f005 fef4 	bl	800e568 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008780:	2400      	movs	r4, #0
 8008782:	e7d3      	b.n	800872c <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008784:	f005 ff08 	bl	800e598 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008788:	2400      	movs	r4, #0
 800878a:	e7cf      	b.n	800872c <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 800878c:	f005 ff1c 	bl	800e5c8 <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008790:	2400      	movs	r4, #0
 8008792:	e7cb      	b.n	800872c <RemovePortButton+0x78>
 8008794:	2400      	movs	r4, #0
 8008796:	e7c9      	b.n	800872c <RemovePortButton+0x78>
 8008798:	20001974 	.word	0x20001974
 800879c:	40013800 	.word	0x40013800
 80087a0:	40004400 	.word	0x40004400
 80087a4:	40004800 	.word	0x40004800
 80087a8:	40004c00 	.word	0x40004c00
 80087ac:	40005000 	.word	0x40005000
 80087b0:	40011400 	.word	0x40011400
 80087b4:	40011800 	.word	0x40011800
 80087b8:	bffee400 	.word	0xbffee400
 80087bc:	2000116c 	.word	0x2000116c
 80087c0:	20000ecc 	.word	0x20000ecc

080087c4 <SetButtonEvents>:
 mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
 */
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked,
		uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,
		uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec,
		uint8_t mode) {
 80087c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087c6:	46de      	mov	lr, fp
 80087c8:	4657      	mov	r7, sl
 80087ca:	464e      	mov	r6, r9
 80087cc:	4645      	mov	r5, r8
 80087ce:	b5e0      	push	{r5, r6, r7, lr}
 80087d0:	b085      	sub	sp, #20
 80087d2:	0007      	movs	r7, r0
 80087d4:	001e      	movs	r6, r3
 80087d6:	ab0e      	add	r3, sp, #56	; 0x38
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	4698      	mov	r8, r3
 80087dc:	ab0f      	add	r3, sp, #60	; 0x3c
 80087de:	781d      	ldrb	r5, [r3, #0]
 80087e0:	ab10      	add	r3, sp, #64	; 0x40
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	469b      	mov	fp, r3
 80087e6:	ab11      	add	r3, sp, #68	; 0x44
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	469a      	mov	sl, r3
 80087ec:	ab12      	add	r3, sp, #72	; 0x48
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	4699      	mov	r9, r3
 80087f2:	ab13      	add	r3, sp, #76	; 0x4c
 80087f4:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	uint8_t temp8;

	if (button[port].type == NONE)
 80087f6:	00fc      	lsls	r4, r7, #3
 80087f8:	19e4      	adds	r4, r4, r7
 80087fa:	4b9e      	ldr	r3, [pc, #632]	; (8008a74 <SetButtonEvents+0x2b0>)
 80087fc:	191b      	adds	r3, r3, r4
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d04c      	beq.n	800889e <SetButtonEvents+0xda>
		return BOS_ERR_BUTTON_NOT_DEFINED;

	button[port].pressedX1Sec = pressed_x1sec;
 8008804:	00fc      	lsls	r4, r7, #3
 8008806:	19e4      	adds	r4, r4, r7
 8008808:	4b9a      	ldr	r3, [pc, #616]	; (8008a74 <SetButtonEvents+0x2b0>)
 800880a:	191b      	adds	r3, r3, r4
 800880c:	709e      	strb	r6, [r3, #2]
	button[port].pressedX2Sec = pressed_x2sec;
 800880e:	4644      	mov	r4, r8
 8008810:	70dc      	strb	r4, [r3, #3]
	button[port].pressedX3Sec = pressed_x3sec;
 8008812:	711d      	strb	r5, [r3, #4]
	button[port].releasedY1Sec = released_y1sec;
 8008814:	465c      	mov	r4, fp
 8008816:	715c      	strb	r4, [r3, #5]
	button[port].releasedY2Sec = released_y2sec;
 8008818:	4654      	mov	r4, sl
 800881a:	719c      	strb	r4, [r3, #6]
	button[port].releasedY3Sec = released_y3sec;
 800881c:	464c      	mov	r4, r9
 800881e:	71dc      	strb	r4, [r3, #7]

	if (mode == BUTTON_EVENT_MODE_OR
 8008820:	2801      	cmp	r0, #1
 8008822:	d003      	beq.n	800882c <SetButtonEvents+0x68>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {
 8008824:	2800      	cmp	r0, #0
 8008826:	d113      	bne.n	8008850 <SetButtonEvents+0x8c>
 8008828:	2900      	cmp	r1, #0
 800882a:	d042      	beq.n	80088b2 <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_CLICKED;
 800882c:	00f9      	lsls	r1, r7, #3
 800882e:	19c9      	adds	r1, r1, r7
 8008830:	4b90      	ldr	r3, [pc, #576]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008832:	185b      	adds	r3, r3, r1
 8008834:	7a19      	ldrb	r1, [r3, #8]
 8008836:	2401      	movs	r4, #1
 8008838:	4321      	orrs	r1, r4
 800883a:	7219      	strb	r1, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 800883c:	2801      	cmp	r0, #1
 800883e:	d10c      	bne.n	800885a <SetButtonEvents+0x96>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008840:	00fa      	lsls	r2, r7, #3
 8008842:	19d2      	adds	r2, r2, r7
 8008844:	4b8b      	ldr	r3, [pc, #556]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008846:	189b      	adds	r3, r3, r2
 8008848:	7a1a      	ldrb	r2, [r3, #8]
 800884a:	2102      	movs	r1, #2
 800884c:	430a      	orrs	r2, r1
 800884e:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
	}
	if (mode == BUTTON_EVENT_MODE_OR
 8008850:	2801      	cmp	r0, #1
 8008852:	d042      	beq.n	80088da <SetButtonEvents+0x116>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 8008854:	2800      	cmp	r0, #0
 8008856:	d152      	bne.n	80088fe <SetButtonEvents+0x13a>
 8008858:	e03d      	b.n	80088d6 <SetButtonEvents+0x112>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 800885a:	2800      	cmp	r0, #0
 800885c:	d031      	beq.n	80088c2 <SetButtonEvents+0xfe>
 800885e:	e044      	b.n	80088ea <SetButtonEvents+0x126>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x1sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008860:	2800      	cmp	r0, #0
 8008862:	d059      	beq.n	8008918 <SetButtonEvents+0x154>
 8008864:	e06d      	b.n	8008942 <SetButtonEvents+0x17e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8008866:	2800      	cmp	r0, #0
 8008868:	d100      	bne.n	800886c <SetButtonEvents+0xa8>
 800886a:	e082      	b.n	8008972 <SetButtonEvents+0x1ae>
 800886c:	e097      	b.n	800899e <SetButtonEvents+0x1da>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
	}
	if (mode == BUTTON_EVENT_MODE_OR
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 800886e:	2800      	cmp	r0, #0
 8008870:	d100      	bne.n	8008874 <SetButtonEvents+0xb0>
 8008872:	e0f2      	b.n	8008a5a <SetButtonEvents+0x296>
 8008874:	e09f      	b.n	80089b6 <SetButtonEvents+0x1f2>
	if (!res)											// This variable exists
	{
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
		/* Store event flags */
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
			temp16 = ((uint16_t) temp8 << 8) | (uint16_t) button[port].events;
 8008876:	0a19      	lsrs	r1, r3, #8
 8008878:	0209      	lsls	r1, r1, #8
 800887a:	4311      	orrs	r1, r2
 800887c:	ab02      	add	r3, sp, #8
 800887e:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1), temp16);
 8008880:	0020      	movs	r0, r4
 8008882:	f7fe ffd7 	bl	8007834 <EE_WriteVariable>
 8008886:	e0ad      	b.n	80089e4 <SetButtonEvents+0x220>

		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1,
 8008888:	0019      	movs	r1, r3
 800888a:	9801      	ldr	r0, [sp, #4]
 800888c:	f7fe ffd2 	bl	8007834 <EE_WriteVariable>
 8008890:	e0b7      	b.n	8008a02 <SetButtonEvents+0x23e>
							| (uint16_t) released_y1sec);

		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
		if (temp16
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2,
 8008892:	4653      	mov	r3, sl
 8008894:	4319      	orrs	r1, r3
 8008896:	0030      	movs	r0, r6
 8008898:	f7fe ffcc 	bl	8007834 <EE_WriteVariable>
 800889c:	e0c0      	b.n	8008a20 <SetButtonEvents+0x25c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 800889e:	200b      	movs	r0, #11
	else
		// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;

	return result;
}
 80088a0:	b005      	add	sp, #20
 80088a2:	bc3c      	pop	{r2, r3, r4, r5}
 80088a4:	4690      	mov	r8, r2
 80088a6:	4699      	mov	r9, r3
 80088a8:	46a2      	mov	sl, r4
 80088aa:	46ab      	mov	fp, r5
 80088ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_BUTTON_NOT_DEFINED;
 80088ae:	200b      	movs	r0, #11
 80088b0:	e7f6      	b.n	80088a0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_CLICKED;
 80088b2:	00f9      	lsls	r1, r7, #3
 80088b4:	19c9      	adds	r1, r1, r7
 80088b6:	4b6f      	ldr	r3, [pc, #444]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088b8:	185b      	adds	r3, r3, r1
 80088ba:	7a19      	ldrb	r1, [r3, #8]
 80088bc:	2401      	movs	r4, #1
 80088be:	43a1      	bics	r1, r4
 80088c0:	7219      	strb	r1, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {
 80088c2:	2a00      	cmp	r2, #0
 80088c4:	d1bc      	bne.n	8008840 <SetButtonEvents+0x7c>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;
 80088c6:	00fa      	lsls	r2, r7, #3
 80088c8:	19d2      	adds	r2, r2, r7
 80088ca:	4b6a      	ldr	r3, [pc, #424]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088cc:	189b      	adds	r3, r3, r2
 80088ce:	7a1a      	ldrb	r2, [r3, #8]
 80088d0:	2102      	movs	r1, #2
 80088d2:	438a      	bics	r2, r1
 80088d4:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d016      	beq.n	8008908 <SetButtonEvents+0x144>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 80088da:	00fa      	lsls	r2, r7, #3
 80088dc:	19d2      	adds	r2, r2, r7
 80088de:	4b65      	ldr	r3, [pc, #404]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088e0:	189b      	adds	r3, r3, r2
 80088e2:	7a1a      	ldrb	r2, [r3, #8]
 80088e4:	2104      	movs	r1, #4
 80088e6:	430a      	orrs	r2, r1
 80088e8:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80088ea:	2801      	cmp	r0, #1
 80088ec:	d1b8      	bne.n	8008860 <SetButtonEvents+0x9c>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 80088ee:	00fa      	lsls	r2, r7, #3
 80088f0:	19d2      	adds	r2, r2, r7
 80088f2:	4b60      	ldr	r3, [pc, #384]	; (8008a74 <SetButtonEvents+0x2b0>)
 80088f4:	189b      	adds	r3, r3, r2
 80088f6:	7a1a      	ldrb	r2, [r3, #8]
 80088f8:	2108      	movs	r1, #8
 80088fa:	430a      	orrs	r2, r1
 80088fc:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 80088fe:	2801      	cmp	r0, #1
 8008900:	d017      	beq.n	8008932 <SetButtonEvents+0x16e>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 8008902:	2800      	cmp	r0, #0
 8008904:	d128      	bne.n	8008958 <SetButtonEvents+0x194>
 8008906:	e012      	b.n	800892e <SetButtonEvents+0x16a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008908:	00fa      	lsls	r2, r7, #3
 800890a:	19d2      	adds	r2, r2, r7
 800890c:	4b59      	ldr	r3, [pc, #356]	; (8008a74 <SetButtonEvents+0x2b0>)
 800890e:	189b      	adds	r3, r3, r2
 8008910:	7a1a      	ldrb	r2, [r3, #8]
 8008912:	2104      	movs	r1, #4
 8008914:	438a      	bics	r2, r1
 8008916:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {
 8008918:	4643      	mov	r3, r8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e7      	bne.n	80088ee <SetButtonEvents+0x12a>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 800891e:	00fa      	lsls	r2, r7, #3
 8008920:	19d2      	adds	r2, r2, r7
 8008922:	4b54      	ldr	r3, [pc, #336]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008924:	189b      	adds	r3, r3, r2
 8008926:	7a1a      	ldrb	r2, [r3, #8]
 8008928:	2108      	movs	r1, #8
 800892a:	438a      	bics	r2, r1
 800892c:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {
 800892e:	2d00      	cmp	r5, #0
 8008930:	d017      	beq.n	8008962 <SetButtonEvents+0x19e>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008932:	00fa      	lsls	r2, r7, #3
 8008934:	19d2      	adds	r2, r2, r7
 8008936:	4b4f      	ldr	r3, [pc, #316]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008938:	189b      	adds	r3, r3, r2
 800893a:	7a1a      	ldrb	r2, [r3, #8]
 800893c:	2110      	movs	r1, #16
 800893e:	430a      	orrs	r2, r1
 8008940:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008942:	2801      	cmp	r0, #1
 8008944:	d000      	beq.n	8008948 <SetButtonEvents+0x184>
 8008946:	e78e      	b.n	8008866 <SetButtonEvents+0xa2>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008948:	00fa      	lsls	r2, r7, #3
 800894a:	19d2      	adds	r2, r2, r7
 800894c:	4b49      	ldr	r3, [pc, #292]	; (8008a74 <SetButtonEvents+0x2b0>)
 800894e:	189b      	adds	r3, r3, r2
 8008950:	7a1a      	ldrb	r2, [r3, #8]
 8008952:	2120      	movs	r1, #32
 8008954:	430a      	orrs	r2, r1
 8008956:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 8008958:	2801      	cmp	r0, #1
 800895a:	d018      	beq.n	800898e <SetButtonEvents+0x1ca>
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 800895c:	2800      	cmp	r0, #0
 800895e:	d12a      	bne.n	80089b6 <SetButtonEvents+0x1f2>
 8008960:	e012      	b.n	8008988 <SetButtonEvents+0x1c4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008962:	00fa      	lsls	r2, r7, #3
 8008964:	19d2      	adds	r2, r2, r7
 8008966:	4b43      	ldr	r3, [pc, #268]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008968:	189b      	adds	r3, r3, r2
 800896a:	7a1a      	ldrb	r2, [r3, #8]
 800896c:	2110      	movs	r1, #16
 800896e:	438a      	bics	r2, r1
 8008970:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {
 8008972:	465b      	mov	r3, fp
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e7      	bne.n	8008948 <SetButtonEvents+0x184>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008978:	00fa      	lsls	r2, r7, #3
 800897a:	19d2      	adds	r2, r2, r7
 800897c:	4b3d      	ldr	r3, [pc, #244]	; (8008a74 <SetButtonEvents+0x2b0>)
 800897e:	189b      	adds	r3, r3, r2
 8008980:	7a1a      	ldrb	r2, [r3, #8]
 8008982:	2120      	movs	r1, #32
 8008984:	438a      	bics	r2, r1
 8008986:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {
 8008988:	4653      	mov	r3, sl
 800898a:	2b00      	cmp	r3, #0
 800898c:	d05d      	beq.n	8008a4a <SetButtonEvents+0x286>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 800898e:	00fa      	lsls	r2, r7, #3
 8008990:	19d2      	adds	r2, r2, r7
 8008992:	4b38      	ldr	r3, [pc, #224]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008994:	189b      	adds	r3, r3, r2
 8008996:	7a1a      	ldrb	r2, [r3, #8]
 8008998:	2140      	movs	r1, #64	; 0x40
 800899a:	430a      	orrs	r2, r1
 800899c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR
 800899e:	2801      	cmp	r0, #1
 80089a0:	d000      	beq.n	80089a4 <SetButtonEvents+0x1e0>
 80089a2:	e764      	b.n	800886e <SetButtonEvents+0xaa>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 80089a4:	00fa      	lsls	r2, r7, #3
 80089a6:	19d2      	adds	r2, r2, r7
 80089a8:	4b32      	ldr	r3, [pc, #200]	; (8008a74 <SetButtonEvents+0x2b0>)
 80089aa:	189b      	adds	r3, r3, r2
 80089ac:	7a19      	ldrb	r1, [r3, #8]
 80089ae:	2280      	movs	r2, #128	; 0x80
 80089b0:	4252      	negs	r2, r2
 80089b2:	430a      	orrs	r2, r1
 80089b4:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1), &temp16);
 80089b6:	003c      	movs	r4, r7
 80089b8:	343a      	adds	r4, #58	; 0x3a
 80089ba:	00a4      	lsls	r4, r4, #2
 80089bc:	ab02      	add	r3, sp, #8
 80089be:	1d99      	adds	r1, r3, #6
 80089c0:	0020      	movs	r0, r4
 80089c2:	f7fe ff07 	bl	80077d4 <EE_ReadVariable>
	if (!res)											// This variable exists
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d000      	beq.n	80089cc <SetButtonEvents+0x208>
 80089ca:	e770      	b.n	80088ae <SetButtonEvents+0xea>
		temp8 = (uint8_t) (temp16 >> 8);					// Keep upper byte
 80089cc:	ab02      	add	r3, sp, #8
 80089ce:	3306      	adds	r3, #6
 80089d0:	881b      	ldrh	r3, [r3, #0]
		if ((uint8_t) (temp16) != button[port].events) {// Update only if different
 80089d2:	00fa      	lsls	r2, r7, #3
 80089d4:	19d2      	adds	r2, r2, r7
 80089d6:	4f27      	ldr	r7, [pc, #156]	; (8008a74 <SetButtonEvents+0x2b0>)
 80089d8:	18bf      	adds	r7, r7, r2
 80089da:	7a3a      	ldrb	r2, [r7, #8]
 80089dc:	b2d9      	uxtb	r1, r3
 80089de:	4291      	cmp	r1, r2
 80089e0:	d000      	beq.n	80089e4 <SetButtonEvents+0x220>
 80089e2:	e748      	b.n	8008876 <SetButtonEvents+0xb2>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 1, &temp16);
 80089e4:	1c63      	adds	r3, r4, #1
 80089e6:	aa02      	add	r2, sp, #8
 80089e8:	1d97      	adds	r7, r2, #6
 80089ea:	0039      	movs	r1, r7
 80089ec:	9301      	str	r3, [sp, #4]
 80089ee:	0018      	movs	r0, r3
 80089f0:	f7fe fef0 	bl	80077d4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x1sec << 8) | (uint16_t) released_y1sec))
 80089f4:	0236      	lsls	r6, r6, #8
 80089f6:	883a      	ldrh	r2, [r7, #0]
 80089f8:	465b      	mov	r3, fp
 80089fa:	4333      	orrs	r3, r6
		if (temp16
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d000      	beq.n	8008a02 <SetButtonEvents+0x23e>
 8008a00:	e742      	b.n	8008888 <SetButtonEvents+0xc4>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 2, &temp16);
 8008a02:	1ca6      	adds	r6, r4, #2
 8008a04:	ab02      	add	r3, sp, #8
 8008a06:	1d9f      	adds	r7, r3, #6
 8008a08:	0039      	movs	r1, r7
 8008a0a:	0030      	movs	r0, r6
 8008a0c:	f7fe fee2 	bl	80077d4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x2sec << 8) | (uint16_t) released_y2sec))
 8008a10:	4643      	mov	r3, r8
 8008a12:	0219      	lsls	r1, r3, #8
 8008a14:	883a      	ldrh	r2, [r7, #0]
 8008a16:	4653      	mov	r3, sl
 8008a18:	430b      	orrs	r3, r1
		if (temp16
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d000      	beq.n	8008a20 <SetButtonEvents+0x25c>
 8008a1e:	e738      	b.n	8008892 <SetButtonEvents+0xce>
		EE_ReadVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3, &temp16);
 8008a20:	3403      	adds	r4, #3
 8008a22:	ab02      	add	r3, sp, #8
 8008a24:	1d9e      	adds	r6, r3, #6
 8008a26:	0031      	movs	r1, r6
 8008a28:	0020      	movs	r0, r4
 8008a2a:	f7fe fed3 	bl	80077d4 <EE_ReadVariable>
				!= (((uint16_t) pressed_x3sec << 8) | (uint16_t) released_y3sec))
 8008a2e:	022d      	lsls	r5, r5, #8
 8008a30:	8832      	ldrh	r2, [r6, #0]
 8008a32:	464b      	mov	r3, r9
 8008a34:	432b      	orrs	r3, r5
	return result;
 8008a36:	2000      	movs	r0, #0
		if (temp16
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d100      	bne.n	8008a3e <SetButtonEvents+0x27a>
 8008a3c:	e730      	b.n	80088a0 <SetButtonEvents+0xdc>
			EE_WriteVariable(_EE_BUTTON_BASE + 4 * (port - 1) + 3,
 8008a3e:	0019      	movs	r1, r3
 8008a40:	0020      	movs	r0, r4
 8008a42:	f7fe fef7 	bl	8007834 <EE_WriteVariable>
	return result;
 8008a46:	2000      	movs	r0, #0
 8008a48:	e72a      	b.n	80088a0 <SetButtonEvents+0xdc>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008a4a:	00fa      	lsls	r2, r7, #3
 8008a4c:	19d2      	adds	r2, r2, r7
 8008a4e:	4b09      	ldr	r3, [pc, #36]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008a50:	189b      	adds	r3, r3, r2
 8008a52:	7a1a      	ldrb	r2, [r3, #8]
 8008a54:	2140      	movs	r1, #64	; 0x40
 8008a56:	438a      	bics	r2, r1
 8008a58:	721a      	strb	r2, [r3, #8]
			|| (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {
 8008a5a:	464b      	mov	r3, r9
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1a1      	bne.n	80089a4 <SetButtonEvents+0x1e0>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;
 8008a60:	00fa      	lsls	r2, r7, #3
 8008a62:	19d2      	adds	r2, r2, r7
 8008a64:	4b03      	ldr	r3, [pc, #12]	; (8008a74 <SetButtonEvents+0x2b0>)
 8008a66:	189b      	adds	r3, r3, r2
 8008a68:	7a19      	ldrb	r1, [r3, #8]
 8008a6a:	227f      	movs	r2, #127	; 0x7f
 8008a6c:	400a      	ands	r2, r1
 8008a6e:	721a      	strb	r2, [r3, #8]
 8008a70:	e7a1      	b.n	80089b6 <SetButtonEvents+0x1f2>
 8008a72:	46c0      	nop			; (mov r8, r8)
 8008a74:	20001974 	.word	0x20001974

08008a78 <HAL_ADC_MspInit>:
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
		Error_Handler();
	}
	ADC_flag = 1;
}
void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle) {
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	b088      	sub	sp, #32
 8008a7c:	0004      	movs	r4, r0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008a7e:	2214      	movs	r2, #20
 8008a80:	2100      	movs	r1, #0
 8008a82:	a803      	add	r0, sp, #12
 8008a84:	f00b ff98 	bl	80149b8 <memset>
	if (adcHandle->Instance == ADC1) {
 8008a88:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <HAL_ADC_MspInit+0x58>)
 8008a8a:	6822      	ldr	r2, [r4, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d001      	beq.n	8008a94 <HAL_ADC_MspInit+0x1c>

		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}
}
 8008a90:	b008      	add	sp, #32
 8008a92:	bd10      	pop	{r4, pc}
		__HAL_RCC_ADC1_CLK_ENABLE();
 8008a94:	4b0f      	ldr	r3, [pc, #60]	; (8008ad4 <HAL_ADC_MspInit+0x5c>)
 8008a96:	6999      	ldr	r1, [r3, #24]
 8008a98:	2080      	movs	r0, #128	; 0x80
 8008a9a:	0080      	lsls	r0, r0, #2
 8008a9c:	4301      	orrs	r1, r0
 8008a9e:	6199      	str	r1, [r3, #24]
 8008aa0:	699a      	ldr	r2, [r3, #24]
 8008aa2:	4002      	ands	r2, r0
 8008aa4:	9201      	str	r2, [sp, #4]
 8008aa6:	9a01      	ldr	r2, [sp, #4]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008aa8:	695a      	ldr	r2, [r3, #20]
 8008aaa:	2180      	movs	r1, #128	; 0x80
 8008aac:	0289      	lsls	r1, r1, #10
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	615a      	str	r2, [r3, #20]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	400b      	ands	r3, r1
 8008ab6:	9302      	str	r3, [sp, #8]
 8008ab8:	9b02      	ldr	r3, [sp, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 8008aba:	233c      	movs	r3, #60	; 0x3c
 8008abc:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008abe:	3b39      	subs	r3, #57	; 0x39
 8008ac0:	9304      	str	r3, [sp, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ac2:	3871      	subs	r0, #113	; 0x71
 8008ac4:	38ff      	subs	r0, #255	; 0xff
 8008ac6:	a903      	add	r1, sp, #12
 8008ac8:	05c0      	lsls	r0, r0, #23
 8008aca:	f009 fb3d 	bl	8012148 <HAL_GPIO_Init>
}
 8008ace:	e7df      	b.n	8008a90 <HAL_ADC_MspInit+0x18>
 8008ad0:	40012400 	.word	0x40012400
 8008ad4:	40021000 	.word	0x40021000

08008ad8 <Get_channel>:

/* --- Get the ADC_channel Number for a given UART.
 */
uint8_t Get_channel(UART_HandleTypeDef *huart, char *side) {

	if (huart->Instance == USART2 && side == "top")
 8008ad8:	6803      	ldr	r3, [r0, #0]
 8008ada:	4a0d      	ldr	r2, [pc, #52]	; (8008b10 <Get_channel+0x38>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <Get_channel+0x10>
		return ADC_CHANNEL_2;
	else if (huart->Instance == USART2 && side == "bottom")
		return ADC_CHANNEL_3;
	else if (huart->Instance == USART6 && side == "top")
 8008ae0:	4a0c      	ldr	r2, [pc, #48]	; (8008b14 <Get_channel+0x3c>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d008      	beq.n	8008af8 <Get_channel+0x20>
		return ADC_CHANNEL_4;
	else if (huart->Instance == USART6 && side == "bottom")
		return ADC_CHANNEL_5;
}
 8008ae6:	4770      	bx	lr
	if (huart->Instance == USART2 && side == "top")
 8008ae8:	4b0b      	ldr	r3, [pc, #44]	; (8008b18 <Get_channel+0x40>)
 8008aea:	4299      	cmp	r1, r3
 8008aec:	d00c      	beq.n	8008b08 <Get_channel+0x30>
	else if (huart->Instance == USART2 && side == "bottom")
 8008aee:	4b0b      	ldr	r3, [pc, #44]	; (8008b1c <Get_channel+0x44>)
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d1f8      	bne.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_3;
 8008af4:	2003      	movs	r0, #3
 8008af6:	e7f6      	b.n	8008ae6 <Get_channel+0xe>
	else if (huart->Instance == USART6 && side == "top")
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <Get_channel+0x40>)
 8008afa:	4299      	cmp	r1, r3
 8008afc:	d006      	beq.n	8008b0c <Get_channel+0x34>
	else if (huart->Instance == USART6 && side == "bottom")
 8008afe:	4b07      	ldr	r3, [pc, #28]	; (8008b1c <Get_channel+0x44>)
 8008b00:	4299      	cmp	r1, r3
 8008b02:	d1f0      	bne.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_5;
 8008b04:	2005      	movs	r0, #5
 8008b06:	e7ee      	b.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_2;
 8008b08:	2002      	movs	r0, #2
 8008b0a:	e7ec      	b.n	8008ae6 <Get_channel+0xe>
		return ADC_CHANNEL_4;
 8008b0c:	2004      	movs	r0, #4
 8008b0e:	e7ea      	b.n	8008ae6 <Get_channel+0xe>
 8008b10:	40004400 	.word	0x40004400
 8008b14:	40011400 	.word	0x40011400
 8008b18:	08019dbc 	.word	0x08019dbc
 8008b1c:	08019dc0 	.word	0x08019dc0

08008b20 <Error_Handler>:

void Error_Handler(void) {
 8008b20:	b510      	push	{r4, lr}

	HAL_Delay(100);
 8008b22:	2064      	movs	r0, #100	; 0x64
 8008b24:	f008 f81a 	bl	8010b5c <HAL_Delay>

}
 8008b28:	bd10      	pop	{r4, pc}
	...

08008b2c <MX_ADC_Init>:
void MX_ADC_Init(void) {
 8008b2c:	b510      	push	{r4, lr}
	hadc.Instance = ADC1;
 8008b2e:	4811      	ldr	r0, [pc, #68]	; (8008b74 <MX_ADC_Init+0x48>)
 8008b30:	4b11      	ldr	r3, [pc, #68]	; (8008b78 <MX_ADC_Init+0x4c>)
 8008b32:	6003      	str	r3, [r0, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008b34:	2380      	movs	r3, #128	; 0x80
 8008b36:	061b      	lsls	r3, r3, #24
 8008b38:	6043      	str	r3, [r0, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6083      	str	r3, [r0, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008b3e:	60c3      	str	r3, [r0, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8008b40:	2201      	movs	r2, #1
 8008b42:	6102      	str	r2, [r0, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008b44:	2104      	movs	r1, #4
 8008b46:	6141      	str	r1, [r0, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8008b48:	6183      	str	r3, [r0, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8008b4a:	61c3      	str	r3, [r0, #28]
	hadc.Init.ContinuousConvMode = ENABLE;
 8008b4c:	6202      	str	r2, [r0, #32]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8008b4e:	6243      	str	r3, [r0, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008b50:	21c2      	movs	r1, #194	; 0xc2
 8008b52:	31ff      	adds	r1, #255	; 0xff
 8008b54:	6281      	str	r1, [r0, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008b56:	62c3      	str	r3, [r0, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 8008b58:	6303      	str	r3, [r0, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008b5a:	6342      	str	r2, [r0, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8008b5c:	f008 f8d8 	bl	8010d10 <HAL_ADC_Init>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d103      	bne.n	8008b6c <MX_ADC_Init+0x40>
	ADC_flag = 1;
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <MX_ADC_Init+0x50>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
}
 8008b6a:	bd10      	pop	{r4, pc}
		Error_Handler();
 8008b6c:	f7ff ffd8 	bl	8008b20 <Error_Handler>
 8008b70:	e7f8      	b.n	8008b64 <MX_ADC_Init+0x38>
 8008b72:	46c0      	nop			; (mov r8, r8)
 8008b74:	20006f1c 	.word	0x20006f1c
 8008b78:	40012400 	.word	0x40012400
 8008b7c:	20001960 	.word	0x20001960

08008b80 <ReadTempAndVref>:
void ReadTempAndVref(float *temp, float *Vref) {
 8008b80:	b570      	push	{r4, r5, r6, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	0005      	movs	r5, r0
 8008b86:	000e      	movs	r6, r1
	if (0 == ADC_flag)
 8008b88:	4b4d      	ldr	r3, [pc, #308]	; (8008cc0 <ReadTempAndVref+0x140>)
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d100      	bne.n	8008b92 <ReadTempAndVref+0x12>
 8008b90:	e087      	b.n	8008ca2 <ReadTempAndVref+0x122>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008b92:	494c      	ldr	r1, [pc, #304]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008b94:	2310      	movs	r3, #16
 8008b96:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	015b      	lsls	r3, r3, #5
 8008b9c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008ba2:	4849      	ldr	r0, [pc, #292]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008ba4:	f008 fa14 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	d000      	beq.n	8008bae <ReadTempAndVref+0x2e>
 8008bac:	e07c      	b.n	8008ca8 <ReadTempAndVref+0x128>
	HAL_ADC_Start(&hadc);
 8008bae:	4c46      	ldr	r4, [pc, #280]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008bb0:	0020      	movs	r0, r4
 8008bb2:	f008 f955 	bl	8010e60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008bb6:	2164      	movs	r1, #100	; 0x64
 8008bb8:	0020      	movs	r0, r4
 8008bba:	f008 f9a3 	bl	8010f04 <HAL_ADC_PollForConversion>
	ADC_value_temp = HAL_ADC_GetValue(&hadc);
 8008bbe:	0020      	movs	r0, r4
 8008bc0:	f008 fa00 	bl	8010fc4 <HAL_ADC_GetValue>
 8008bc4:	4b41      	ldr	r3, [pc, #260]	; (8008ccc <ReadTempAndVref+0x14c>)
 8008bc6:	8018      	strh	r0, [r3, #0]
	*temp = ((3.3 * ADC_value_temp / 4095 - V25) / Avg_Slope) + 25;
 8008bc8:	0400      	lsls	r0, r0, #16
 8008bca:	0c00      	lsrs	r0, r0, #16
 8008bcc:	f7f9 ff3e 	bl	8002a4c <__aeabi_i2d>
 8008bd0:	4a3f      	ldr	r2, [pc, #252]	; (8008cd0 <ReadTempAndVref+0x150>)
 8008bd2:	4b40      	ldr	r3, [pc, #256]	; (8008cd4 <ReadTempAndVref+0x154>)
 8008bd4:	f7f9 f92e 	bl	8001e34 <__aeabi_dmul>
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4b3f      	ldr	r3, [pc, #252]	; (8008cd8 <ReadTempAndVref+0x158>)
 8008bdc:	f7f8 fd20 	bl	8001620 <__aeabi_ddiv>
 8008be0:	4a3e      	ldr	r2, [pc, #248]	; (8008cdc <ReadTempAndVref+0x15c>)
 8008be2:	4b3f      	ldr	r3, [pc, #252]	; (8008ce0 <ReadTempAndVref+0x160>)
 8008be4:	f7f9 fb98 	bl	8002318 <__aeabi_dsub>
 8008be8:	4a3e      	ldr	r2, [pc, #248]	; (8008ce4 <ReadTempAndVref+0x164>)
 8008bea:	4b3f      	ldr	r3, [pc, #252]	; (8008ce8 <ReadTempAndVref+0x168>)
 8008bec:	f7f8 fd18 	bl	8001620 <__aeabi_ddiv>
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	4b3e      	ldr	r3, [pc, #248]	; (8008cec <ReadTempAndVref+0x16c>)
 8008bf4:	f7f8 f9f8 	bl	8000fe8 <__aeabi_dadd>
 8008bf8:	f7f9 ffe6 	bl	8002bc8 <__aeabi_d2f>
 8008bfc:	6028      	str	r0, [r5, #0]
	HAL_ADC_Stop(&hadc);
 8008bfe:	0020      	movs	r0, r4
 8008c00:	f008 f95e 	bl	8010ec0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8008c04:	492f      	ldr	r1, [pc, #188]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008c06:	2310      	movs	r3, #16
 8008c08:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c0a:	4b39      	ldr	r3, [pc, #228]	; (8008cf0 <ReadTempAndVref+0x170>)
 8008c0c:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c12:	0020      	movs	r0, r4
 8008c14:	f008 f9dc 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008c18:	2800      	cmp	r0, #0
 8008c1a:	d148      	bne.n	8008cae <ReadTempAndVref+0x12e>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008c1c:	4929      	ldr	r1, [pc, #164]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008c1e:	2311      	movs	r3, #17
 8008c20:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008c22:	2380      	movs	r3, #128	; 0x80
 8008c24:	015b      	lsls	r3, r3, #5
 8008c26:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8008c28:	2305      	movs	r3, #5
 8008c2a:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c2c:	4826      	ldr	r0, [pc, #152]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008c2e:	f008 f9cf 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d13e      	bne.n	8008cb4 <ReadTempAndVref+0x134>
	HAL_ADC_Start(&hadc);
 8008c36:	4d24      	ldr	r5, [pc, #144]	; (8008cc8 <ReadTempAndVref+0x148>)
 8008c38:	0028      	movs	r0, r5
 8008c3a:	f008 f911 	bl	8010e60 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 100);
 8008c3e:	2164      	movs	r1, #100	; 0x64
 8008c40:	0028      	movs	r0, r5
 8008c42:	f008 f95f 	bl	8010f04 <HAL_ADC_PollForConversion>
	ADC_value_Vref = HAL_ADC_GetValue(&hadc);
 8008c46:	0028      	movs	r0, r5
 8008c48:	f008 f9bc 	bl	8010fc4 <HAL_ADC_GetValue>
 8008c4c:	0004      	movs	r4, r0
 8008c4e:	4b29      	ldr	r3, [pc, #164]	; (8008cf4 <ReadTempAndVref+0x174>)
 8008c50:	8018      	strh	r0, [r3, #0]
	*Vref = 3.3 * (*Vref_Cal) / ADC_value_Vref;
 8008c52:	4b29      	ldr	r3, [pc, #164]	; (8008cf8 <ReadTempAndVref+0x178>)
 8008c54:	8818      	ldrh	r0, [r3, #0]
 8008c56:	f7f9 fef9 	bl	8002a4c <__aeabi_i2d>
 8008c5a:	4a1d      	ldr	r2, [pc, #116]	; (8008cd0 <ReadTempAndVref+0x150>)
 8008c5c:	4b1d      	ldr	r3, [pc, #116]	; (8008cd4 <ReadTempAndVref+0x154>)
 8008c5e:	f7f9 f8e9 	bl	8001e34 <__aeabi_dmul>
 8008c62:	9000      	str	r0, [sp, #0]
 8008c64:	9101      	str	r1, [sp, #4]
 8008c66:	0420      	lsls	r0, r4, #16
 8008c68:	0c00      	lsrs	r0, r0, #16
 8008c6a:	f7f9 feef 	bl	8002a4c <__aeabi_i2d>
 8008c6e:	0002      	movs	r2, r0
 8008c70:	000b      	movs	r3, r1
 8008c72:	9800      	ldr	r0, [sp, #0]
 8008c74:	9901      	ldr	r1, [sp, #4]
 8008c76:	f7f8 fcd3 	bl	8001620 <__aeabi_ddiv>
 8008c7a:	f7f9 ffa5 	bl	8002bc8 <__aeabi_d2f>
 8008c7e:	6030      	str	r0, [r6, #0]
	HAL_ADC_Stop(&hadc);
 8008c80:	0028      	movs	r0, r5
 8008c82:	f008 f91d 	bl	8010ec0 <HAL_ADC_Stop>
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8008c86:	490f      	ldr	r1, [pc, #60]	; (8008cc4 <ReadTempAndVref+0x144>)
 8008c88:	2311      	movs	r3, #17
 8008c8a:	600b      	str	r3, [r1, #0]
	sConfig.Rank = ADC_RANK_NONE;
 8008c8c:	4b18      	ldr	r3, [pc, #96]	; (8008cf0 <ReadTempAndVref+0x170>)
 8008c8e:	604b      	str	r3, [r1, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008c90:	2301      	movs	r3, #1
 8008c92:	608b      	str	r3, [r1, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008c94:	0028      	movs	r0, r5
 8008c96:	f008 f99b 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	d10d      	bne.n	8008cba <ReadTempAndVref+0x13a>
}
 8008c9e:	b002      	add	sp, #8
 8008ca0:	bd70      	pop	{r4, r5, r6, pc}
		MX_ADC_Init();
 8008ca2:	f7ff ff43 	bl	8008b2c <MX_ADC_Init>
 8008ca6:	e774      	b.n	8008b92 <ReadTempAndVref+0x12>
		Error_Handler();
 8008ca8:	f7ff ff3a 	bl	8008b20 <Error_Handler>
 8008cac:	e77f      	b.n	8008bae <ReadTempAndVref+0x2e>
		Error_Handler();
 8008cae:	f7ff ff37 	bl	8008b20 <Error_Handler>
 8008cb2:	e7b3      	b.n	8008c1c <ReadTempAndVref+0x9c>
		Error_Handler();
 8008cb4:	f7ff ff34 	bl	8008b20 <Error_Handler>
 8008cb8:	e7bd      	b.n	8008c36 <ReadTempAndVref+0xb6>
		Error_Handler();
 8008cba:	f7ff ff31 	bl	8008b20 <Error_Handler>
}
 8008cbe:	e7ee      	b.n	8008c9e <ReadTempAndVref+0x11e>
 8008cc0:	20001960 	.word	0x20001960
 8008cc4:	20001a00 	.word	0x20001a00
 8008cc8:	20006f1c 	.word	0x20006f1c
 8008ccc:	20001964 	.word	0x20001964
 8008cd0:	66666666 	.word	0x66666666
 8008cd4:	400a6666 	.word	0x400a6666
 8008cd8:	40affe00 	.word	0x40affe00
 8008cdc:	28f5c28f 	.word	0x28f5c28f
 8008ce0:	3ff68f5c 	.word	0x3ff68f5c
 8008ce4:	33333333 	.word	0x33333333
 8008ce8:	40113333 	.word	0x40113333
 8008cec:	40390000 	.word	0x40390000
 8008cf0:	00001001 	.word	0x00001001
 8008cf4:	20001962 	.word	0x20001962
 8008cf8:	1ffff7ba 	.word	0x1ffff7ba

08008cfc <GetReadPrecentage>:
float GetReadPrecentage(uint8_t port, float *precentageValue) {
 8008cfc:	b570      	push	{r4, r5, r6, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	0004      	movs	r4, r0
 8008d02:	000d      	movs	r5, r1
	if (port == 2 || port == 3) {
 8008d04:	1e83      	subs	r3, r0, #2
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d901      	bls.n	8008d0e <GetReadPrecentage+0x12>
}
 8008d0a:	b006      	add	sp, #24
 8008d0c:	bd70      	pop	{r4, r5, r6, pc}
		if (0 == ADC_flag) {
 8008d0e:	4b3e      	ldr	r3, [pc, #248]	; (8008e08 <GetReadPrecentage+0x10c>)
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d055      	beq.n	8008dc2 <GetReadPrecentage+0xc6>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8008d16:	2090      	movs	r0, #144	; 0x90
 8008d18:	2201      	movs	r2, #1
 8008d1a:	2110      	movs	r1, #16
 8008d1c:	05c0      	lsls	r0, r0, #23
 8008d1e:	f009 fb87 	bl	8012430 <HAL_GPIO_WritePin>
		Channel = Get_channel(GetUart(port), "bottom");
 8008d22:	0020      	movs	r0, r4
 8008d24:	f005 fda0 	bl	800e868 <GetUart>
 8008d28:	4938      	ldr	r1, [pc, #224]	; (8008e0c <GetReadPrecentage+0x110>)
 8008d2a:	f7ff fed5 	bl	8008ad8 <Get_channel>
 8008d2e:	4b38      	ldr	r3, [pc, #224]	; (8008e10 <GetReadPrecentage+0x114>)
 8008d30:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008d32:	4938      	ldr	r1, [pc, #224]	; (8008e14 <GetReadPrecentage+0x118>)
 8008d34:	6008      	str	r0, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008d36:	2380      	movs	r3, #128	; 0x80
 8008d38:	015b      	lsls	r3, r3, #5
 8008d3a:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008d40:	4835      	ldr	r0, [pc, #212]	; (8008e18 <GetReadPrecentage+0x11c>)
 8008d42:	f008 f945 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008d46:	2800      	cmp	r0, #0
 8008d48:	d15b      	bne.n	8008e02 <GetReadPrecentage+0x106>
		HAL_ADC_Start(&hadc);
 8008d4a:	4c33      	ldr	r4, [pc, #204]	; (8008e18 <GetReadPrecentage+0x11c>)
 8008d4c:	0020      	movs	r0, r4
 8008d4e:	f008 f887 	bl	8010e60 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008d52:	2164      	movs	r1, #100	; 0x64
 8008d54:	0020      	movs	r0, r4
 8008d56:	f008 f8d5 	bl	8010f04 <HAL_ADC_PollForConversion>
		percentage = HAL_ADC_GetValue(&hadc);
 8008d5a:	0020      	movs	r0, r4
 8008d5c:	f008 f932 	bl	8010fc4 <HAL_ADC_GetValue>
 8008d60:	f7f8 f902 	bl	8000f68 <__aeabi_ui2f>
		percentage = 3.3 * percentage / 4095;
 8008d64:	f7f9 fede 	bl	8002b24 <__aeabi_f2d>
 8008d68:	4a2c      	ldr	r2, [pc, #176]	; (8008e1c <GetReadPrecentage+0x120>)
 8008d6a:	4b2d      	ldr	r3, [pc, #180]	; (8008e20 <GetReadPrecentage+0x124>)
 8008d6c:	f7f9 f862 	bl	8001e34 <__aeabi_dmul>
 8008d70:	2200      	movs	r2, #0
 8008d72:	4b2c      	ldr	r3, [pc, #176]	; (8008e24 <GetReadPrecentage+0x128>)
 8008d74:	f7f8 fc54 	bl	8001620 <__aeabi_ddiv>
 8008d78:	f7f9 ff26 	bl	8002bc8 <__aeabi_d2f>
 8008d7c:	4b2a      	ldr	r3, [pc, #168]	; (8008e28 <GetReadPrecentage+0x12c>)
 8008d7e:	6018      	str	r0, [r3, #0]
		current = (100 * percentage) / 3.3;
 8008d80:	492a      	ldr	r1, [pc, #168]	; (8008e2c <GetReadPrecentage+0x130>)
 8008d82:	f7f7 fddb 	bl	800093c <__aeabi_fmul>
 8008d86:	f7f9 fecd 	bl	8002b24 <__aeabi_f2d>
 8008d8a:	4a24      	ldr	r2, [pc, #144]	; (8008e1c <GetReadPrecentage+0x120>)
 8008d8c:	4b24      	ldr	r3, [pc, #144]	; (8008e20 <GetReadPrecentage+0x124>)
 8008d8e:	f7f8 fc47 	bl	8001620 <__aeabi_ddiv>
 8008d92:	f7f9 ff19 	bl	8002bc8 <__aeabi_d2f>
 8008d96:	4b26      	ldr	r3, [pc, #152]	; (8008e30 <GetReadPrecentage+0x134>)
 8008d98:	6018      	str	r0, [r3, #0]
		*precentageValue = current;
 8008d9a:	6028      	str	r0, [r5, #0]
		HAL_ADC_Stop(&hadc);
 8008d9c:	0020      	movs	r0, r4
 8008d9e:	f008 f88f 	bl	8010ec0 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008da2:	491c      	ldr	r1, [pc, #112]	; (8008e14 <GetReadPrecentage+0x118>)
 8008da4:	4b1a      	ldr	r3, [pc, #104]	; (8008e10 <GetReadPrecentage+0x114>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008daa:	4b22      	ldr	r3, [pc, #136]	; (8008e34 <GetReadPrecentage+0x138>)
 8008dac:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8008dae:	2301      	movs	r3, #1
 8008db0:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008db2:	0020      	movs	r0, r4
 8008db4:	f008 f90c 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d0a6      	beq.n	8008d0a <GetReadPrecentage+0xe>
			Error_Handler();
 8008dbc:	f7ff feb0 	bl	8008b20 <Error_Handler>
 8008dc0:	e7a3      	b.n	8008d0a <GetReadPrecentage+0xe>
			MX_ADC_Init();
 8008dc2:	f7ff feb3 	bl	8008b2c <MX_ADC_Init>
			HAL_UART_DeInit(GetUart(port));
 8008dc6:	0020      	movs	r0, r4
 8008dc8:	f005 fd4e 	bl	800e868 <GetUart>
 8008dcc:	f00a fda3 	bl	8013916 <HAL_UART_DeInit>
			HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8008dd0:	2690      	movs	r6, #144	; 0x90
 8008dd2:	05f6      	lsls	r6, r6, #23
 8008dd4:	2110      	movs	r1, #16
 8008dd6:	0030      	movs	r0, r6
 8008dd8:	f009 fa96 	bl	8012308 <HAL_GPIO_DeInit>
			HAL_ADCEx_Calibration_Start(&hadc);
 8008ddc:	480e      	ldr	r0, [pc, #56]	; (8008e18 <GetReadPrecentage+0x11c>)
 8008dde:	f008 f99b 	bl	8011118 <HAL_ADCEx_Calibration_Start>
			GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008de2:	2310      	movs	r3, #16
 8008de4:	9301      	str	r3, [sp, #4]
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008de6:	3b0f      	subs	r3, #15
 8008de8:	9302      	str	r3, [sp, #8]
			GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008dea:	3302      	adds	r3, #2
 8008dec:	9304      	str	r3, [sp, #16]
			HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dee:	a901      	add	r1, sp, #4
 8008df0:	0030      	movs	r0, r6
 8008df2:	f009 f9a9 	bl	8012148 <HAL_GPIO_Init>
			portStatus[port - 1] = CUSTOM;
 8008df6:	4b10      	ldr	r3, [pc, #64]	; (8008e38 <GetReadPrecentage+0x13c>)
 8008df8:	191b      	adds	r3, r3, r4
 8008dfa:	3b01      	subs	r3, #1
 8008dfc:	2206      	movs	r2, #6
 8008dfe:	701a      	strb	r2, [r3, #0]
 8008e00:	e789      	b.n	8008d16 <GetReadPrecentage+0x1a>
			Error_Handler();
 8008e02:	f7ff fe8d 	bl	8008b20 <Error_Handler>
 8008e06:	e7a0      	b.n	8008d4a <GetReadPrecentage+0x4e>
 8008e08:	20001960 	.word	0x20001960
 8008e0c:	08019dc0 	.word	0x08019dc0
 8008e10:	20001970 	.word	0x20001970
 8008e14:	20001a00 	.word	0x20001a00
 8008e18:	20006f1c 	.word	0x20006f1c
 8008e1c:	66666666 	.word	0x66666666
 8008e20:	400a6666 	.word	0x400a6666
 8008e24:	40affe00 	.word	0x40affe00
 8008e28:	200019c4 	.word	0x200019c4
 8008e2c:	42c80000 	.word	0x42c80000
 8008e30:	200019b4 	.word	0x200019b4
 8008e34:	00001001 	.word	0x00001001
 8008e38:	2000116c 	.word	0x2000116c

08008e3c <Get_Rank>:

uint8_t Get_Rank(uint8_t Port, char *side) {

	if (Port == 2 && side == "top")
 8008e3c:	2802      	cmp	r0, #2
 8008e3e:	d004      	beq.n	8008e4a <Get_Rank+0xe>
		Rank_t = 0;
	else if (Port == 2 && side == "bottom")
		Rank_t = 1;
	else if (Port == 3 && side == "top")
 8008e40:	2803      	cmp	r0, #3
 8008e42:	d010      	beq.n	8008e66 <Get_Rank+0x2a>
		Rank_t = 2;
	else if (Port == 3 && side == "bottom")
		Rank_t = 3;
	return Rank_t;
 8008e44:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <Get_Rank+0x48>)
 8008e46:	7818      	ldrb	r0, [r3, #0]
}
 8008e48:	4770      	bx	lr
	if (Port == 2 && side == "top")
 8008e4a:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <Get_Rank+0x4c>)
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d006      	beq.n	8008e5e <Get_Rank+0x22>
	else if (Port == 2 && side == "bottom")
 8008e50:	4b0e      	ldr	r3, [pc, #56]	; (8008e8c <Get_Rank+0x50>)
 8008e52:	4299      	cmp	r1, r3
 8008e54:	d1f6      	bne.n	8008e44 <Get_Rank+0x8>
		Rank_t = 1;
 8008e56:	4b0b      	ldr	r3, [pc, #44]	; (8008e84 <Get_Rank+0x48>)
 8008e58:	2201      	movs	r2, #1
 8008e5a:	701a      	strb	r2, [r3, #0]
 8008e5c:	e7f2      	b.n	8008e44 <Get_Rank+0x8>
		Rank_t = 0;
 8008e5e:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <Get_Rank+0x48>)
 8008e60:	2200      	movs	r2, #0
 8008e62:	701a      	strb	r2, [r3, #0]
 8008e64:	e7ee      	b.n	8008e44 <Get_Rank+0x8>
	else if (Port == 3 && side == "top")
 8008e66:	4b08      	ldr	r3, [pc, #32]	; (8008e88 <Get_Rank+0x4c>)
 8008e68:	4299      	cmp	r1, r3
 8008e6a:	d006      	beq.n	8008e7a <Get_Rank+0x3e>
	else if (Port == 3 && side == "bottom")
 8008e6c:	4b07      	ldr	r3, [pc, #28]	; (8008e8c <Get_Rank+0x50>)
 8008e6e:	4299      	cmp	r1, r3
 8008e70:	d1e8      	bne.n	8008e44 <Get_Rank+0x8>
		Rank_t = 3;
 8008e72:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <Get_Rank+0x48>)
 8008e74:	2203      	movs	r2, #3
 8008e76:	701a      	strb	r2, [r3, #0]
 8008e78:	e7e4      	b.n	8008e44 <Get_Rank+0x8>
		Rank_t = 2;
 8008e7a:	4b02      	ldr	r3, [pc, #8]	; (8008e84 <Get_Rank+0x48>)
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e7e0      	b.n	8008e44 <Get_Rank+0x8>
 8008e82:	46c0      	nop			; (mov r8, r8)
 8008e84:	20001971 	.word	0x20001971
 8008e88:	08019dbc 	.word	0x08019dbc
 8008e8c:	08019dc0 	.word	0x08019dc0

08008e90 <ADCSelectChannel>:
void ADCSelectChannel(uint8_t ADC_port, char *side) {
 8008e90:	b570      	push	{r4, r5, r6, lr}
 8008e92:	0004      	movs	r4, r0
 8008e94:	000d      	movs	r5, r1
	if (ADC_port == 2 || ADC_port == 3) {
 8008e96:	1e83      	subs	r3, r0, #2
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d900      	bls.n	8008e9e <ADCSelectChannel+0xe>
}
 8008e9c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_DeInit(GetUart(ADC_port));
 8008e9e:	f005 fce3 	bl	800e868 <GetUart>
 8008ea2:	f00a fd38 	bl	8013916 <HAL_UART_DeInit>
		portStatus[ADC_port - 1] = CUSTOM;
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <ADCSelectChannel+0x4c>)
 8008ea8:	191b      	adds	r3, r3, r4
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	2206      	movs	r2, #6
 8008eae:	701a      	strb	r2, [r3, #0]
		Channel = Get_channel(GetUart(ADC_port), side);
 8008eb0:	0020      	movs	r0, r4
 8008eb2:	f005 fcd9 	bl	800e868 <GetUart>
 8008eb6:	0029      	movs	r1, r5
 8008eb8:	f7ff fe0e 	bl	8008ad8 <Get_channel>
 8008ebc:	4b08      	ldr	r3, [pc, #32]	; (8008ee0 <ADCSelectChannel+0x50>)
 8008ebe:	7018      	strb	r0, [r3, #0]
		Rank_t = Get_Rank(ADC_port, side);
 8008ec0:	0029      	movs	r1, r5
 8008ec2:	0020      	movs	r0, r4
 8008ec4:	f7ff ffba 	bl	8008e3c <Get_Rank>
 8008ec8:	4b06      	ldr	r3, [pc, #24]	; (8008ee4 <ADCSelectChannel+0x54>)
 8008eca:	7018      	strb	r0, [r3, #0]
		if (ADC_flag == 0)
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <ADCSelectChannel+0x58>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e3      	bne.n	8008e9c <ADCSelectChannel+0xc>
			MX_ADC_Init();
 8008ed4:	f7ff fe2a 	bl	8008b2c <MX_ADC_Init>
}
 8008ed8:	e7e0      	b.n	8008e9c <ADCSelectChannel+0xc>
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	2000116c 	.word	0x2000116c
 8008ee0:	20001970 	.word	0x20001970
 8008ee4:	20001971 	.word	0x20001971
 8008ee8:	20001960 	.word	0x20001960

08008eec <ReadADCChannel>:
void ReadADCChannel(uint8_t Port, char *side, float *ADC_Value) {
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	0005      	movs	r5, r0
 8008ef0:	000e      	movs	r6, r1
 8008ef2:	0014      	movs	r4, r2
	if (ADC_flag == 1) {
 8008ef4:	4b26      	ldr	r3, [pc, #152]	; (8008f90 <ReadADCChannel+0xa4>)
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d008      	beq.n	8008f0e <ReadADCChannel+0x22>
	*ADC_Value = (float) ADCchannelvalue[Rank_t];
 8008efc:	4b25      	ldr	r3, [pc, #148]	; (8008f94 <ReadADCChannel+0xa8>)
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	4a25      	ldr	r2, [pc, #148]	; (8008f98 <ReadADCChannel+0xac>)
 8008f04:	5a98      	ldrh	r0, [r3, r2]
 8008f06:	f7f8 f82f 	bl	8000f68 <__aeabi_ui2f>
 8008f0a:	6020      	str	r0, [r4, #0]
}
 8008f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		Channel = Get_channel(GetUart(Port), side);
 8008f0e:	f005 fcab 	bl	800e868 <GetUart>
 8008f12:	0031      	movs	r1, r6
 8008f14:	f7ff fde0 	bl	8008ad8 <Get_channel>
 8008f18:	4f20      	ldr	r7, [pc, #128]	; (8008f9c <ReadADCChannel+0xb0>)
 8008f1a:	7038      	strb	r0, [r7, #0]
		Rank_t = Get_Rank(Port, side);
 8008f1c:	0031      	movs	r1, r6
 8008f1e:	0028      	movs	r0, r5
 8008f20:	f7ff ff8c 	bl	8008e3c <Get_Rank>
 8008f24:	4b1b      	ldr	r3, [pc, #108]	; (8008f94 <ReadADCChannel+0xa8>)
 8008f26:	7018      	strb	r0, [r3, #0]
		sConfig.Channel = Channel;
 8008f28:	491d      	ldr	r1, [pc, #116]	; (8008fa0 <ReadADCChannel+0xb4>)
 8008f2a:	783b      	ldrb	r3, [r7, #0]
 8008f2c:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8008f2e:	2380      	movs	r3, #128	; 0x80
 8008f30:	015b      	lsls	r3, r3, #5
 8008f32:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008f34:	2303      	movs	r3, #3
 8008f36:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008f38:	481a      	ldr	r0, [pc, #104]	; (8008fa4 <ReadADCChannel+0xb8>)
 8008f3a:	f008 f849 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d122      	bne.n	8008f88 <ReadADCChannel+0x9c>
		HAL_ADC_Start(&hadc);
 8008f42:	4d18      	ldr	r5, [pc, #96]	; (8008fa4 <ReadADCChannel+0xb8>)
 8008f44:	0028      	movs	r0, r5
 8008f46:	f007 ff8b 	bl	8010e60 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 8008f4a:	2164      	movs	r1, #100	; 0x64
 8008f4c:	0028      	movs	r0, r5
 8008f4e:	f007 ffd9 	bl	8010f04 <HAL_ADC_PollForConversion>
		ADCchannelvalue[Rank_t] = HAL_ADC_GetValue(&hadc);
 8008f52:	0028      	movs	r0, r5
 8008f54:	f008 f836 	bl	8010fc4 <HAL_ADC_GetValue>
 8008f58:	4b0e      	ldr	r3, [pc, #56]	; (8008f94 <ReadADCChannel+0xa8>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	4a0e      	ldr	r2, [pc, #56]	; (8008f98 <ReadADCChannel+0xac>)
 8008f60:	5298      	strh	r0, [r3, r2]
		HAL_ADC_Stop(&hadc);
 8008f62:	0028      	movs	r0, r5
 8008f64:	f007 ffac 	bl	8010ec0 <HAL_ADC_Stop>
		sConfig.Channel = Channel;
 8008f68:	490d      	ldr	r1, [pc, #52]	; (8008fa0 <ReadADCChannel+0xb4>)
 8008f6a:	4b0c      	ldr	r3, [pc, #48]	; (8008f9c <ReadADCChannel+0xb0>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	600b      	str	r3, [r1, #0]
		sConfig.Rank = ADC_RANK_NONE;
 8008f70:	4b0d      	ldr	r3, [pc, #52]	; (8008fa8 <ReadADCChannel+0xbc>)
 8008f72:	604b      	str	r3, [r1, #4]
		sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8008f74:	2303      	movs	r3, #3
 8008f76:	608b      	str	r3, [r1, #8]
		if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8008f78:	0028      	movs	r0, r5
 8008f7a:	f008 f829 	bl	8010fd0 <HAL_ADC_ConfigChannel>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d0bc      	beq.n	8008efc <ReadADCChannel+0x10>
			Error_Handler();
 8008f82:	f7ff fdcd 	bl	8008b20 <Error_Handler>
 8008f86:	e7b9      	b.n	8008efc <ReadADCChannel+0x10>
			Error_Handler();
 8008f88:	f7ff fdca 	bl	8008b20 <Error_Handler>
 8008f8c:	e7d9      	b.n	8008f42 <ReadADCChannel+0x56>
 8008f8e:	46c0      	nop			; (mov r8, r8)
 8008f90:	20001960 	.word	0x20001960
 8008f94:	20001971 	.word	0x20001971
 8008f98:	20001968 	.word	0x20001968
 8008f9c:	20001970 	.word	0x20001970
 8008fa0:	20001a00 	.word	0x20001a00
 8008fa4:	20006f1c 	.word	0x20006f1c
 8008fa8:	00001001 	.word	0x00001001

08008fac <buttonReleasedCallback>:

/* --- Button release callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedCallback(uint8_t port) {
}
 8008fac:	4770      	bx	lr

08008fae <buttonClickedCallback>:

/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonClickedCallback(uint8_t port) {
}
 8008fae:	4770      	bx	lr

08008fb0 <buttonDblClickedCallback>:

/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonDblClickedCallback(uint8_t port) {
}
 8008fb0:	4770      	bx	lr

08008fb2 <buttonPressedForXCallback>:

/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType) {
}
 8008fb2:	4770      	bx	lr

08008fb4 <buttonReleasedForYCallback>:

/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK.
 This function is declared as __weak to be overwritten by other implementations in user file.
 */
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType) {
}
 8008fb4:	4770      	bx	lr
	...

08008fb8 <CheckAttachedButtons>:
void CheckAttachedButtons(void) {
 8008fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fba:	46de      	mov	lr, fp
 8008fbc:	4657      	mov	r7, sl
 8008fbe:	464e      	mov	r6, r9
 8008fc0:	4645      	mov	r5, r8
 8008fc2:	b5e0      	push	{r5, r6, r7, lr}
 8008fc4:	b089      	sub	sp, #36	; 0x24
 8008fc6:	4dbd      	ldr	r5, [pc, #756]	; (80092bc <CheckAttachedButtons+0x304>)
 8008fc8:	3509      	adds	r5, #9
 8008fca:	2404      	movs	r4, #4
 8008fcc:	2601      	movs	r6, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	469b      	mov	fp, r3
 8008fd2:	4699      	mov	r9, r3
 8008fd4:	e111      	b.n	80091fa <CheckAttachedButtons+0x242>
				HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin,
 8008fd6:	230e      	movs	r3, #14
 8008fd8:	aa02      	add	r2, sp, #8
 8008fda:	4694      	mov	ip, r2
 8008fdc:	4463      	add	r3, ip
 8008fde:	8819      	ldrh	r1, [r3, #0]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	9807      	ldr	r0, [sp, #28]
 8008fe4:	f009 fa24 	bl	8012430 <HAL_GPIO_WritePin>
				Delay_us(10);
 8008fe8:	200a      	movs	r0, #10
 8008fea:	f005 fa51 	bl	800e490 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin);
 8008fee:	ab05      	add	r3, sp, #20
 8008ff0:	8819      	ldrh	r1, [r3, #0]
 8008ff2:	9806      	ldr	r0, [sp, #24]
 8008ff4:	f009 fa16 	bl	8012424 <HAL_GPIO_ReadPin>
 8008ff8:	4681      	mov	r9, r0
 8008ffa:	e126      	b.n	800924a <CheckAttachedButtons+0x292>
			switch (button[i].type) {
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d105      	bne.n	800900c <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 8009000:	464b      	mov	r3, r9
 8009002:	2b01      	cmp	r3, #1
 8009004:	d046      	beq.n	8009094 <CheckAttachedButtons+0xdc>
				else if (connected == GPIO_PIN_RESET)
 8009006:	2b00      	cmp	r3, #0
 8009008:	d100      	bne.n	800900c <CheckAttachedButtons+0x54>
 800900a:	e1c5      	b.n	8009398 <CheckAttachedButtons+0x3e0>
			if (state == CLOSED || state == ON) {
 800900c:	465b      	mov	r3, fp
 800900e:	2b04      	cmp	r3, #4
 8009010:	d001      	beq.n	8009016 <CheckAttachedButtons+0x5e>
 8009012:	2b02      	cmp	r3, #2
 8009014:	d107      	bne.n	8009026 <CheckAttachedButtons+0x6e>
				if (pressCounter[i] < 0xFFFF)
 8009016:	4baa      	ldr	r3, [pc, #680]	; (80092c0 <CheckAttachedButtons+0x308>)
 8009018:	58e3      	ldr	r3, [r4, r3]
 800901a:	4aaa      	ldr	r2, [pc, #680]	; (80092c4 <CheckAttachedButtons+0x30c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d842      	bhi.n	80090a6 <CheckAttachedButtons+0xee>
					++pressCounter[i];			// Advance the debounce counter
 8009020:	3301      	adds	r3, #1
 8009022:	4aa7      	ldr	r2, [pc, #668]	; (80092c0 <CheckAttachedButtons+0x308>)
 8009024:	50a3      	str	r3, [r4, r2]
			if (state == OPEN || state == OFF) {
 8009026:	23fd      	movs	r3, #253	; 0xfd
 8009028:	465a      	mov	r2, fp
 800902a:	4013      	ands	r3, r2
 800902c:	2b01      	cmp	r3, #1
 800902e:	d100      	bne.n	8009032 <CheckAttachedButtons+0x7a>
 8009030:	e1b6      	b.n	80093a0 <CheckAttachedButtons+0x3e8>
			if (pressCounter[i] < BOS.buttons.debounce) {
 8009032:	4ba3      	ldr	r3, [pc, #652]	; (80092c0 <CheckAttachedButtons+0x308>)
 8009034:	58e3      	ldr	r3, [r4, r3]
 8009036:	4aa4      	ldr	r2, [pc, #656]	; (80092c8 <CheckAttachedButtons+0x310>)
 8009038:	8812      	ldrh	r2, [r2, #0]
 800903a:	4293      	cmp	r3, r2
 800903c:	d36f      	bcc.n	800911e <CheckAttachedButtons+0x166>
				if (pressCounter[i] == BOS.buttons.debounce) {
 800903e:	d045      	beq.n	80090cc <CheckAttachedButtons+0x114>
				if (releaseCounter[i] > BOS.buttons.debounce)// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 8009040:	4ba2      	ldr	r3, [pc, #648]	; (80092cc <CheckAttachedButtons+0x314>)
 8009042:	58e3      	ldr	r3, [r4, r3]
 8009044:	429a      	cmp	r2, r3
 8009046:	d202      	bcs.n	800904e <CheckAttachedButtons+0x96>
					releaseCounter[i] = 0;
 8009048:	4ba0      	ldr	r3, [pc, #640]	; (80092cc <CheckAttachedButtons+0x314>)
 800904a:	2200      	movs	r2, #0
 800904c:	50e2      	str	r2, [r4, r3]
				if (pressCounter[i] > BOS.buttons.singleClickTime
 800904e:	4b9c      	ldr	r3, [pc, #624]	; (80092c0 <CheckAttachedButtons+0x308>)
 8009050:	58e3      	ldr	r3, [r4, r3]
 8009052:	4a9d      	ldr	r2, [pc, #628]	; (80092c8 <CheckAttachedButtons+0x310>)
 8009054:	8852      	ldrh	r2, [r2, #2]
 8009056:	4293      	cmp	r3, r2
 8009058:	d952      	bls.n	8009100 <CheckAttachedButtons+0x148>
						&& pressCounter[i] < 500) {
 800905a:	22f4      	movs	r2, #244	; 0xf4
 800905c:	32ff      	adds	r2, #255	; 0xff
 800905e:	4293      	cmp	r3, r2
 8009060:	d84e      	bhi.n	8009100 <CheckAttachedButtons+0x148>
					if (clicked == 0)
 8009062:	4b9b      	ldr	r3, [pc, #620]	; (80092d0 <CheckAttachedButtons+0x318>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d137      	bne.n	80090da <CheckAttachedButtons+0x122>
						clicked = 1;		// Record a possible single click
 800906a:	4b99      	ldr	r3, [pc, #612]	; (80092d0 <CheckAttachedButtons+0x318>)
 800906c:	3af3      	subs	r2, #243	; 0xf3
 800906e:	3aff      	subs	r2, #255	; 0xff
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	e054      	b.n	800911e <CheckAttachedButtons+0x166>
				if (connected == GPIO_PIN_SET)
 8009074:	464b      	mov	r3, r9
 8009076:	2b01      	cmp	r3, #1
 8009078:	d00f      	beq.n	800909a <CheckAttachedButtons+0xe2>
				else if (connected == GPIO_PIN_RESET)
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1c6      	bne.n	800900c <CheckAttachedButtons+0x54>
					state = OPEN;
 800907e:	2303      	movs	r3, #3
 8009080:	469b      	mov	fp, r3
 8009082:	e18d      	b.n	80093a0 <CheckAttachedButtons+0x3e8>
				if (connected == GPIO_PIN_SET)
 8009084:	464b      	mov	r3, r9
 8009086:	2b01      	cmp	r3, #1
 8009088:	d00a      	beq.n	80090a0 <CheckAttachedButtons+0xe8>
				else if (connected == GPIO_PIN_RESET)
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1be      	bne.n	800900c <CheckAttachedButtons+0x54>
					state = OFF;
 800908e:	2301      	movs	r3, #1
 8009090:	469b      	mov	fp, r3
 8009092:	e185      	b.n	80093a0 <CheckAttachedButtons+0x3e8>
					state = CLOSED;
 8009094:	2304      	movs	r3, #4
 8009096:	469b      	mov	fp, r3
 8009098:	e7bd      	b.n	8009016 <CheckAttachedButtons+0x5e>
					state = CLOSED;
 800909a:	2304      	movs	r3, #4
 800909c:	469b      	mov	fp, r3
 800909e:	e7ba      	b.n	8009016 <CheckAttachedButtons+0x5e>
 80090a0:	2302      	movs	r3, #2
 80090a2:	469b      	mov	fp, r3
 80090a4:	e7b7      	b.n	8009016 <CheckAttachedButtons+0x5e>
					pressCounter[i] = 0;			// Reset debounce counter
 80090a6:	4b86      	ldr	r3, [pc, #536]	; (80092c0 <CheckAttachedButtons+0x308>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	50e2      	str	r2, [r4, r3]
 80090ac:	e7bb      	b.n	8009026 <CheckAttachedButtons+0x6e>
					releaseCounter[i] = 0;		// Reset debounce counter
 80090ae:	4b87      	ldr	r3, [pc, #540]	; (80092cc <CheckAttachedButtons+0x314>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	50e2      	str	r2, [r4, r3]
 80090b4:	e17d      	b.n	80093b2 <CheckAttachedButtons+0x3fa>
						&& dblCounter[i] <= BOS.buttons.maxInterClickTime)// Advance the inter-click counter
 80090b6:	4b87      	ldr	r3, [pc, #540]	; (80092d4 <CheckAttachedButtons+0x31c>)
 80090b8:	5cf3      	ldrb	r3, [r6, r3]
 80090ba:	4a83      	ldr	r2, [pc, #524]	; (80092c8 <CheckAttachedButtons+0x310>)
 80090bc:	7952      	ldrb	r2, [r2, #5]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d200      	bcs.n	80090c4 <CheckAttachedButtons+0x10c>
 80090c2:	e182      	b.n	80093ca <CheckAttachedButtons+0x412>
					++dblCounter[i];
 80090c4:	3301      	adds	r3, #1
 80090c6:	4a83      	ldr	r2, [pc, #524]	; (80092d4 <CheckAttachedButtons+0x31c>)
 80090c8:	54b3      	strb	r3, [r6, r2]
 80090ca:	e7b2      	b.n	8009032 <CheckAttachedButtons+0x7a>
					button[i].state = PRESSED;// Record a PRESSED event. This event is always reset on next tick.
 80090cc:	2107      	movs	r1, #7
 80090ce:	4640      	mov	r0, r8
 80090d0:	7001      	strb	r1, [r0, #0]
					++pressCounter[i];
 80090d2:	3301      	adds	r3, #1
 80090d4:	497a      	ldr	r1, [pc, #488]	; (80092c0 <CheckAttachedButtons+0x308>)
 80090d6:	5063      	str	r3, [r4, r1]
 80090d8:	e7b2      	b.n	8009040 <CheckAttachedButtons+0x88>
					else if (clicked == 2) {
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d11f      	bne.n	800911e <CheckAttachedButtons+0x166>
						if (dblCounter[i] > BOS.buttons.minInterClickTime
 80090de:	4b7d      	ldr	r3, [pc, #500]	; (80092d4 <CheckAttachedButtons+0x31c>)
 80090e0:	5cf3      	ldrb	r3, [r6, r3]
 80090e2:	4a79      	ldr	r2, [pc, #484]	; (80092c8 <CheckAttachedButtons+0x310>)
 80090e4:	7912      	ldrb	r2, [r2, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d219      	bcs.n	800911e <CheckAttachedButtons+0x166>
										< BOS.buttons.maxInterClickTime) {
 80090ea:	4a77      	ldr	r2, [pc, #476]	; (80092c8 <CheckAttachedButtons+0x310>)
								&& dblCounter[i]
 80090ec:	7952      	ldrb	r2, [r2, #5]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d915      	bls.n	800911e <CheckAttachedButtons+0x166>
							clicked = 3;	// Record a possible double click
 80090f2:	4b77      	ldr	r3, [pc, #476]	; (80092d0 <CheckAttachedButtons+0x318>)
 80090f4:	2203      	movs	r2, #3
 80090f6:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;	// Reset the inter-click counter
 80090f8:	4b76      	ldr	r3, [pc, #472]	; (80092d4 <CheckAttachedButtons+0x31c>)
 80090fa:	2200      	movs	r2, #0
 80090fc:	54f2      	strb	r2, [r6, r3]
 80090fe:	e00e      	b.n	800911e <CheckAttachedButtons+0x166>
				} else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF) {
 8009100:	3bf5      	subs	r3, #245	; 0xf5
 8009102:	3bff      	subs	r3, #255	; 0xff
 8009104:	4a74      	ldr	r2, [pc, #464]	; (80092d8 <CheckAttachedButtons+0x320>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d809      	bhi.n	800911e <CheckAttachedButtons+0x166>
					if (clicked)
 800910a:	4b71      	ldr	r3, [pc, #452]	; (80092d0 <CheckAttachedButtons+0x318>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d002      	beq.n	8009118 <CheckAttachedButtons+0x160>
						clicked = 0;						// Cannot be a click
 8009112:	4b6f      	ldr	r3, [pc, #444]	; (80092d0 <CheckAttachedButtons+0x318>)
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 8009118:	9803      	ldr	r0, [sp, #12]
 800911a:	f7ff f9bd 	bl	8008498 <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) {
 800911e:	4b6b      	ldr	r3, [pc, #428]	; (80092cc <CheckAttachedButtons+0x314>)
 8009120:	58e3      	ldr	r3, [r4, r3]
 8009122:	4a69      	ldr	r2, [pc, #420]	; (80092c8 <CheckAttachedButtons+0x310>)
 8009124:	8812      	ldrh	r2, [r2, #0]
 8009126:	4293      	cmp	r3, r2
 8009128:	d34d      	bcc.n	80091c6 <CheckAttachedButtons+0x20e>
				if (releaseCounter[i] == BOS.buttons.debounce) {
 800912a:	d02b      	beq.n	8009184 <CheckAttachedButtons+0x1cc>
				if (pressCounter[i] > BOS.buttons.debounce)	// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 800912c:	4b64      	ldr	r3, [pc, #400]	; (80092c0 <CheckAttachedButtons+0x308>)
 800912e:	58e3      	ldr	r3, [r4, r3]
 8009130:	429a      	cmp	r2, r3
 8009132:	d202      	bcs.n	800913a <CheckAttachedButtons+0x182>
					pressCounter[i] = 0;
 8009134:	4b62      	ldr	r3, [pc, #392]	; (80092c0 <CheckAttachedButtons+0x308>)
 8009136:	2200      	movs	r2, #0
 8009138:	50e2      	str	r2, [r4, r3]
				if (releaseCounter[i] > BOS.buttons.singleClickTime
 800913a:	4b64      	ldr	r3, [pc, #400]	; (80092cc <CheckAttachedButtons+0x314>)
 800913c:	58e3      	ldr	r3, [r4, r3]
 800913e:	4a62      	ldr	r2, [pc, #392]	; (80092c8 <CheckAttachedButtons+0x310>)
 8009140:	8852      	ldrh	r2, [r2, #2]
 8009142:	4293      	cmp	r3, r2
 8009144:	d93a      	bls.n	80091bc <CheckAttachedButtons+0x204>
						&& releaseCounter[i] < 500) {
 8009146:	22f4      	movs	r2, #244	; 0xf4
 8009148:	32ff      	adds	r2, #255	; 0xff
 800914a:	4293      	cmp	r3, r2
 800914c:	d836      	bhi.n	80091bc <CheckAttachedButtons+0x204>
					if (clicked == 1) {
 800914e:	4b60      	ldr	r3, [pc, #384]	; (80092d0 <CheckAttachedButtons+0x318>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d01d      	beq.n	8009192 <CheckAttachedButtons+0x1da>
					} else if (clicked == 3) {
 8009156:	2b03      	cmp	r3, #3
 8009158:	d135      	bne.n	80091c6 <CheckAttachedButtons+0x20e>
						button[i].state = DBL_CLICKED;// Record a double button click event
 800915a:	3303      	adds	r3, #3
 800915c:	4642      	mov	r2, r8
 800915e:	7013      	strb	r3, [r2, #0]
						clicked = 0;			// Prepare for a single click
 8009160:	4b5b      	ldr	r3, [pc, #364]	; (80092d0 <CheckAttachedButtons+0x318>)
 8009162:	2200      	movs	r2, #0
 8009164:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 8009166:	4b5d      	ldr	r3, [pc, #372]	; (80092dc <CheckAttachedButtons+0x324>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d13f      	bne.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_DBL_CLICKED)) {
 800916e:	4643      	mov	r3, r8
 8009170:	7a1b      	ldrb	r3, [r3, #8]
 8009172:	079b      	lsls	r3, r3, #30
 8009174:	d53b      	bpl.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8009176:	4b59      	ldr	r3, [pc, #356]	; (80092dc <CheckAttachedButtons+0x324>)
 8009178:	2201      	movs	r2, #1
 800917a:	701a      	strb	r2, [r3, #0]
					buttonDblClickedCallback(i);
 800917c:	9803      	ldr	r0, [sp, #12]
 800917e:	f7ff ff17 	bl	8008fb0 <buttonDblClickedCallback>
 8009182:	e034      	b.n	80091ee <CheckAttachedButtons+0x236>
					button[i].state = RELEASED;	// Record a RELEASED event. This event is always reset on next tick.
 8009184:	2108      	movs	r1, #8
 8009186:	4640      	mov	r0, r8
 8009188:	7001      	strb	r1, [r0, #0]
					++releaseCounter[i];
 800918a:	3301      	adds	r3, #1
 800918c:	494f      	ldr	r1, [pc, #316]	; (80092cc <CheckAttachedButtons+0x314>)
 800918e:	5063      	str	r3, [r4, r1]
 8009190:	e7cc      	b.n	800912c <CheckAttachedButtons+0x174>
						button[i].state = CLICKED;// Record a single button click event
 8009192:	3304      	adds	r3, #4
 8009194:	4642      	mov	r2, r8
 8009196:	7013      	strb	r3, [r2, #0]
						clicked = 2;			// Prepare for a double click
 8009198:	4b4d      	ldr	r3, [pc, #308]	; (80092d0 <CheckAttachedButtons+0x318>)
 800919a:	2202      	movs	r2, #2
 800919c:	701a      	strb	r2, [r3, #0]
				if (!delayButtonStateReset
 800919e:	4b4f      	ldr	r3, [pc, #316]	; (80092dc <CheckAttachedButtons+0x324>)
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d123      	bne.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_CLICKED)) {
 80091a6:	4643      	mov	r3, r8
 80091a8:	7a1b      	ldrb	r3, [r3, #8]
 80091aa:	07db      	lsls	r3, r3, #31
 80091ac:	d51f      	bpl.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80091ae:	4b4b      	ldr	r3, [pc, #300]	; (80092dc <CheckAttachedButtons+0x324>)
 80091b0:	2201      	movs	r2, #1
 80091b2:	701a      	strb	r2, [r3, #0]
					buttonClickedCallback(i);
 80091b4:	9803      	ldr	r0, [sp, #12]
 80091b6:	f7ff fefa 	bl	8008fae <buttonClickedCallback>
 80091ba:	e018      	b.n	80091ee <CheckAttachedButtons+0x236>
						&& releaseCounter[i] < 0xFFFF) {
 80091bc:	3bf5      	subs	r3, #245	; 0xf5
 80091be:	3bff      	subs	r3, #255	; 0xff
				} else if (releaseCounter[i] >= 500
 80091c0:	4a45      	ldr	r2, [pc, #276]	; (80092d8 <CheckAttachedButtons+0x320>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d909      	bls.n	80091da <CheckAttachedButtons+0x222>
			switch (button[i].state) {
 80091c6:	4643      	mov	r3, r8
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	3b05      	subs	r3, #5
 80091cc:	b2da      	uxtb	r2, r3
 80091ce:	2a09      	cmp	r2, #9
 80091d0:	d80d      	bhi.n	80091ee <CheckAttachedButtons+0x236>
 80091d2:	0093      	lsls	r3, r2, #2
 80091d4:	4a42      	ldr	r2, [pc, #264]	; (80092e0 <CheckAttachedButtons+0x328>)
 80091d6:	58d3      	ldr	r3, [r2, r3]
 80091d8:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80091da:	9803      	ldr	r0, [sp, #12]
 80091dc:	f7ff f99a 	bl	8008514 <CheckForTimedButtonRelease>
 80091e0:	e7f1      	b.n	80091c6 <CheckAttachedButtons+0x20e>
				buttonPressedCallback(i);
 80091e2:	9803      	ldr	r0, [sp, #12]
 80091e4:	f7ff f956 	bl	8008494 <buttonPressedCallback>
				button[i].state = NONE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	4642      	mov	r2, r8
 80091ec:	7013      	strb	r3, [r2, #0]
 80091ee:	3601      	adds	r6, #1
 80091f0:	3509      	adds	r5, #9
 80091f2:	3404      	adds	r4, #4
	for (uint8_t i = 1; i <= NumOfPorts; i++) {
 80091f4:	2c1c      	cmp	r4, #28
 80091f6:	d100      	bne.n	80091fa <CheckAttachedButtons+0x242>
 80091f8:	e0ed      	b.n	80093d6 <CheckAttachedButtons+0x41e>
 80091fa:	b2f3      	uxtb	r3, r6
 80091fc:	9303      	str	r3, [sp, #12]
 80091fe:	46a8      	mov	r8, r5
		if (button[i].type)			// Only check defined butons
 8009200:	786b      	ldrb	r3, [r5, #1]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0f3      	beq.n	80091ee <CheckAttachedButtons+0x236>
			if (delayButtonStateReset == false)
 8009206:	4b35      	ldr	r3, [pc, #212]	; (80092dc <CheckAttachedButtons+0x324>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d100      	bne.n	8009210 <CheckAttachedButtons+0x258>
				button[i].state = NONE;
 800920e:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8009210:	230e      	movs	r3, #14
 8009212:	aa02      	add	r2, sp, #8
 8009214:	4694      	mov	ip, r2
 8009216:	4463      	add	r3, ip
 8009218:	469a      	mov	sl, r3
 800921a:	af05      	add	r7, sp, #20
 800921c:	9700      	str	r7, [sp, #0]
 800921e:	ab06      	add	r3, sp, #24
 8009220:	4652      	mov	r2, sl
 8009222:	a907      	add	r1, sp, #28
 8009224:	9803      	ldr	r0, [sp, #12]
 8009226:	f004 fd11 	bl	800dc4c <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800922a:	4653      	mov	r3, sl
 800922c:	8819      	ldrh	r1, [r3, #0]
 800922e:	2200      	movs	r2, #0
 8009230:	9807      	ldr	r0, [sp, #28]
 8009232:	f009 f8fd 	bl	8012430 <HAL_GPIO_WritePin>
			Delay_us(10);
 8009236:	200a      	movs	r0, #10
 8009238:	f005 f92a 	bl	800e490 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef*) RX_Port, RX_Pin)
 800923c:	8839      	ldrh	r1, [r7, #0]
 800923e:	9806      	ldr	r0, [sp, #24]
 8009240:	f009 f8f0 	bl	8012424 <HAL_GPIO_ReadPin>
 8009244:	2800      	cmp	r0, #0
 8009246:	d100      	bne.n	800924a <CheckAttachedButtons+0x292>
 8009248:	e6c5      	b.n	8008fd6 <CheckAttachedButtons+0x1e>
			HAL_GPIO_WritePin((GPIO_TypeDef*) TX_Port, TX_Pin, GPIO_PIN_RESET);
 800924a:	230e      	movs	r3, #14
 800924c:	aa02      	add	r2, sp, #8
 800924e:	4694      	mov	ip, r2
 8009250:	4463      	add	r3, ip
 8009252:	8819      	ldrh	r1, [r3, #0]
 8009254:	2200      	movs	r2, #0
 8009256:	9807      	ldr	r0, [sp, #28]
 8009258:	f009 f8ea 	bl	8012430 <HAL_GPIO_WritePin>
			switch (button[i].type) {
 800925c:	4643      	mov	r3, r8
 800925e:	785b      	ldrb	r3, [r3, #1]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d100      	bne.n	8009266 <CheckAttachedButtons+0x2ae>
 8009264:	e706      	b.n	8009074 <CheckAttachedButtons+0xbc>
 8009266:	b2da      	uxtb	r2, r3
 8009268:	2a02      	cmp	r2, #2
 800926a:	d800      	bhi.n	800926e <CheckAttachedButtons+0x2b6>
 800926c:	e6c6      	b.n	8008ffc <CheckAttachedButtons+0x44>
 800926e:	2b03      	cmp	r3, #3
 8009270:	d100      	bne.n	8009274 <CheckAttachedButtons+0x2bc>
 8009272:	e707      	b.n	8009084 <CheckAttachedButtons+0xcc>
 8009274:	2b04      	cmp	r3, #4
 8009276:	d000      	beq.n	800927a <CheckAttachedButtons+0x2c2>
 8009278:	e6c8      	b.n	800900c <CheckAttachedButtons+0x54>
				if (connected == GPIO_PIN_SET)
 800927a:	464b      	mov	r3, r9
 800927c:	2b01      	cmp	r3, #1
 800927e:	d100      	bne.n	8009282 <CheckAttachedButtons+0x2ca>
 8009280:	e08d      	b.n	800939e <CheckAttachedButtons+0x3e6>
				else if (connected == GPIO_PIN_RESET)
 8009282:	2b00      	cmp	r3, #0
 8009284:	d000      	beq.n	8009288 <CheckAttachedButtons+0x2d0>
 8009286:	e6c1      	b.n	800900c <CheckAttachedButtons+0x54>
 8009288:	2302      	movs	r3, #2
 800928a:	469b      	mov	fp, r3
 800928c:	e6c3      	b.n	8009016 <CheckAttachedButtons+0x5e>
				buttonReleasedCallback(i);
 800928e:	9803      	ldr	r0, [sp, #12]
 8009290:	f7ff fe8c 	bl	8008fac <buttonReleasedCallback>
				button[i].state = NONE;
 8009294:	2300      	movs	r3, #0
 8009296:	4642      	mov	r2, r8
 8009298:	7013      	strb	r3, [r2, #0]
				break;
 800929a:	e7a8      	b.n	80091ee <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800929c:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <CheckAttachedButtons+0x324>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1a4      	bne.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) {
 80092a4:	4643      	mov	r3, r8
 80092a6:	7a1b      	ldrb	r3, [r3, #8]
 80092a8:	075b      	lsls	r3, r3, #29
 80092aa:	d5a0      	bpl.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80092ac:	4b0b      	ldr	r3, [pc, #44]	; (80092dc <CheckAttachedButtons+0x324>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC - 8);
 80092b2:	2101      	movs	r1, #1
 80092b4:	9803      	ldr	r0, [sp, #12]
 80092b6:	f7ff fe7c 	bl	8008fb2 <buttonPressedForXCallback>
 80092ba:	e798      	b.n	80091ee <CheckAttachedButtons+0x236>
 80092bc:	20001974 	.word	0x20001974
 80092c0:	200019c8 	.word	0x200019c8
 80092c4:	0000fffe 	.word	0x0000fffe
 80092c8:	20006e54 	.word	0x20006e54
 80092cc:	200019e4 	.word	0x200019e4
 80092d0:	200019b3 	.word	0x200019b3
 80092d4:	200019b8 	.word	0x200019b8
 80092d8:	0000fe0a 	.word	0x0000fe0a
 80092dc:	200019bf 	.word	0x200019bf
 80092e0:	0801bc3c 	.word	0x0801bc3c
				if (!delayButtonStateReset
 80092e4:	4b3f      	ldr	r3, [pc, #252]	; (80093e4 <CheckAttachedButtons+0x42c>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d000      	beq.n	80092ee <CheckAttachedButtons+0x336>
 80092ec:	e77f      	b.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) {
 80092ee:	4643      	mov	r3, r8
 80092f0:	7a1b      	ldrb	r3, [r3, #8]
 80092f2:	071b      	lsls	r3, r3, #28
 80092f4:	d400      	bmi.n	80092f8 <CheckAttachedButtons+0x340>
 80092f6:	e77a      	b.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 80092f8:	4b3a      	ldr	r3, [pc, #232]	; (80093e4 <CheckAttachedButtons+0x42c>)
 80092fa:	2201      	movs	r2, #1
 80092fc:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC - 8);
 80092fe:	2102      	movs	r1, #2
 8009300:	9803      	ldr	r0, [sp, #12]
 8009302:	f7ff fe56 	bl	8008fb2 <buttonPressedForXCallback>
 8009306:	e772      	b.n	80091ee <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 8009308:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <CheckAttachedButtons+0x42c>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d000      	beq.n	8009312 <CheckAttachedButtons+0x35a>
 8009310:	e76d      	b.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) {
 8009312:	4643      	mov	r3, r8
 8009314:	7a1b      	ldrb	r3, [r3, #8]
 8009316:	06db      	lsls	r3, r3, #27
 8009318:	d400      	bmi.n	800931c <CheckAttachedButtons+0x364>
 800931a:	e768      	b.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 800931c:	4b31      	ldr	r3, [pc, #196]	; (80093e4 <CheckAttachedButtons+0x42c>)
 800931e:	2201      	movs	r2, #1
 8009320:	701a      	strb	r2, [r3, #0]
					buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC - 8);
 8009322:	2103      	movs	r1, #3
 8009324:	9803      	ldr	r0, [sp, #12]
 8009326:	f7ff fe44 	bl	8008fb2 <buttonPressedForXCallback>
 800932a:	e760      	b.n	80091ee <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 800932c:	4b2d      	ldr	r3, [pc, #180]	; (80093e4 <CheckAttachedButtons+0x42c>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d000      	beq.n	8009336 <CheckAttachedButtons+0x37e>
 8009334:	e75b      	b.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) {
 8009336:	4643      	mov	r3, r8
 8009338:	7a1b      	ldrb	r3, [r3, #8]
 800933a:	069b      	lsls	r3, r3, #26
 800933c:	d400      	bmi.n	8009340 <CheckAttachedButtons+0x388>
 800933e:	e756      	b.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8009340:	4b28      	ldr	r3, [pc, #160]	; (80093e4 <CheckAttachedButtons+0x42c>)
 8009342:	2201      	movs	r2, #1
 8009344:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC - 11);
 8009346:	2101      	movs	r1, #1
 8009348:	9803      	ldr	r0, [sp, #12]
 800934a:	f7ff fe33 	bl	8008fb4 <buttonReleasedForYCallback>
 800934e:	e74e      	b.n	80091ee <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 8009350:	4b24      	ldr	r3, [pc, #144]	; (80093e4 <CheckAttachedButtons+0x42c>)
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d000      	beq.n	800935a <CheckAttachedButtons+0x3a2>
 8009358:	e749      	b.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) {
 800935a:	4643      	mov	r3, r8
 800935c:	7a1b      	ldrb	r3, [r3, #8]
 800935e:	065b      	lsls	r3, r3, #25
 8009360:	d400      	bmi.n	8009364 <CheckAttachedButtons+0x3ac>
 8009362:	e744      	b.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8009364:	4b1f      	ldr	r3, [pc, #124]	; (80093e4 <CheckAttachedButtons+0x42c>)
 8009366:	2201      	movs	r2, #1
 8009368:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC - 11);
 800936a:	2102      	movs	r1, #2
 800936c:	9803      	ldr	r0, [sp, #12]
 800936e:	f7ff fe21 	bl	8008fb4 <buttonReleasedForYCallback>
 8009372:	e73c      	b.n	80091ee <CheckAttachedButtons+0x236>
				if (!delayButtonStateReset
 8009374:	4b1b      	ldr	r3, [pc, #108]	; (80093e4 <CheckAttachedButtons+0x42c>)
 8009376:	781b      	ldrb	r3, [r3, #0]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d000      	beq.n	800937e <CheckAttachedButtons+0x3c6>
 800937c:	e737      	b.n	80091ee <CheckAttachedButtons+0x236>
						&& (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) {
 800937e:	4643      	mov	r3, r8
 8009380:	7a1b      	ldrb	r3, [r3, #8]
 8009382:	2b7f      	cmp	r3, #127	; 0x7f
 8009384:	d800      	bhi.n	8009388 <CheckAttachedButtons+0x3d0>
 8009386:	e732      	b.n	80091ee <CheckAttachedButtons+0x236>
					delayButtonStateReset = true;
 8009388:	4b16      	ldr	r3, [pc, #88]	; (80093e4 <CheckAttachedButtons+0x42c>)
 800938a:	2201      	movs	r2, #1
 800938c:	701a      	strb	r2, [r3, #0]
					buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC - 11);
 800938e:	2103      	movs	r1, #3
 8009390:	9803      	ldr	r0, [sp, #12]
 8009392:	f7ff fe0f 	bl	8008fb4 <buttonReleasedForYCallback>
 8009396:	e72a      	b.n	80091ee <CheckAttachedButtons+0x236>
					state = OPEN;
 8009398:	2303      	movs	r3, #3
 800939a:	469b      	mov	fp, r3
 800939c:	e000      	b.n	80093a0 <CheckAttachedButtons+0x3e8>
					state = OFF;
 800939e:	46cb      	mov	fp, r9
				if (releaseCounter[i] < 0xFFFF)
 80093a0:	4b11      	ldr	r3, [pc, #68]	; (80093e8 <CheckAttachedButtons+0x430>)
 80093a2:	58e3      	ldr	r3, [r4, r3]
 80093a4:	4a11      	ldr	r2, [pc, #68]	; (80093ec <CheckAttachedButtons+0x434>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d900      	bls.n	80093ac <CheckAttachedButtons+0x3f4>
 80093aa:	e680      	b.n	80090ae <CheckAttachedButtons+0xf6>
					++releaseCounter[i];		// Advance the debounce counter
 80093ac:	3301      	adds	r3, #1
 80093ae:	4a0e      	ldr	r2, [pc, #56]	; (80093e8 <CheckAttachedButtons+0x430>)
 80093b0:	50a3      	str	r3, [r4, r2]
				if (clicked == 2
 80093b2:	4b0f      	ldr	r3, [pc, #60]	; (80093f0 <CheckAttachedButtons+0x438>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d100      	bne.n	80093bc <CheckAttachedButtons+0x404>
 80093ba:	e67c      	b.n	80090b6 <CheckAttachedButtons+0xfe>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime) {
 80093bc:	4b0d      	ldr	r3, [pc, #52]	; (80093f4 <CheckAttachedButtons+0x43c>)
 80093be:	5cf2      	ldrb	r2, [r6, r3]
 80093c0:	4b0d      	ldr	r3, [pc, #52]	; (80093f8 <CheckAttachedButtons+0x440>)
 80093c2:	795b      	ldrb	r3, [r3, #5]
 80093c4:	429a      	cmp	r2, r3
 80093c6:	d800      	bhi.n	80093ca <CheckAttachedButtons+0x412>
 80093c8:	e633      	b.n	8009032 <CheckAttachedButtons+0x7a>
					clicked = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	4a08      	ldr	r2, [pc, #32]	; (80093f0 <CheckAttachedButtons+0x438>)
 80093ce:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;			// Reset the inter-click counter
 80093d0:	4a08      	ldr	r2, [pc, #32]	; (80093f4 <CheckAttachedButtons+0x43c>)
 80093d2:	54b3      	strb	r3, [r6, r2]
 80093d4:	e62d      	b.n	8009032 <CheckAttachedButtons+0x7a>
}
 80093d6:	b009      	add	sp, #36	; 0x24
 80093d8:	bc3c      	pop	{r2, r3, r4, r5}
 80093da:	4690      	mov	r8, r2
 80093dc:	4699      	mov	r9, r3
 80093de:	46a2      	mov	sl, r4
 80093e0:	46ab      	mov	fp, r5
 80093e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e4:	200019bf 	.word	0x200019bf
 80093e8:	200019e4 	.word	0x200019e4
 80093ec:	0000fffe 	.word	0x0000fffe
 80093f0:	200019b3 	.word	0x200019b3
 80093f4:	200019b8 	.word	0x200019b8
 80093f8:	20006e54 	.word	0x20006e54

080093fc <StreamTimerCallback>:

/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
 */
void StreamTimerCallback(TimerHandle_t xTimerStream){
 80093fc:	b510      	push	{r4, lr}
	uint32_t tid =0;
	
	tid =(uint32_t )pvTimerGetTimerID(xTimerStream);
 80093fe:	f007 f9cd 	bl	801079c <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8009402:	b2c4      	uxtb	r4, r0
 8009404:	0020      	movs	r0, r4
 8009406:	f7fe f8a3 	bl	8007550 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 800940a:	0020      	movs	r0, r4
 800940c:	f7fe f8ce 	bl	80075ac <SwitchStreamDMAToMsg>
}
 8009410:	bd10      	pop	{r4, pc}
	...

08009414 <SetupDMAStreams>:
BOS_Status SetupDMAStreams(uint8_t direction,uint32_t count,uint32_t timeout,uint8_t src,uint8_t dst){
 8009414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009416:	b085      	sub	sp, #20
 8009418:	000d      	movs	r5, r1
 800941a:	0014      	movs	r4, r2
 800941c:	220f      	movs	r2, #15
 800941e:	446a      	add	r2, sp
 8009420:	7013      	strb	r3, [r2, #0]
	if(src == dst){							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8009422:	aa0a      	add	r2, sp, #40	; 0x28
 8009424:	7812      	ldrb	r2, [r2, #0]
 8009426:	4293      	cmp	r3, r2
 8009428:	d058      	beq.n	80094dc <SetupDMAStreams+0xc8>
	else if(src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 800942a:	2b00      	cmp	r3, #0
 800942c:	d100      	bne.n	8009430 <SetupDMAStreams+0x1c>
 800942e:	e0be      	b.n	80095ae <SetupDMAStreams+0x19a>
 8009430:	2a00      	cmp	r2, #0
 8009432:	d100      	bne.n	8009436 <SetupDMAStreams+0x22>
 8009434:	e0bf      	b.n	80095b6 <SetupDMAStreams+0x1a2>
	if(direction == FORWARD){
 8009436:	2800      	cmp	r0, #0
 8009438:	d055      	beq.n	80094e6 <SetupDMAStreams+0xd2>
	else if(direction == BACKWARD){
 800943a:	2801      	cmp	r0, #1
 800943c:	d100      	bne.n	8009440 <SetupDMAStreams+0x2c>
 800943e:	e08b      	b.n	8009558 <SetupDMAStreams+0x144>
		return BOS_ERR_WrongParam;
 8009440:	2267      	movs	r2, #103	; 0x67
	else if(direction == BIDIRECTIONAL){
 8009442:	2802      	cmp	r0, #2
 8009444:	d000      	beq.n	8009448 <SetupDMAStreams+0x34>
 8009446:	e0b3      	b.n	80095b0 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 8009448:	0018      	movs	r0, r3
 800944a:	f005 fa0d 	bl	800e868 <GetUart>
 800944e:	0006      	movs	r6, r0
 8009450:	ab0a      	add	r3, sp, #40	; 0x28
 8009452:	7818      	ldrb	r0, [r3, #0]
 8009454:	f005 fa08 	bl	800e868 <GetUart>
 8009458:	0001      	movs	r1, r0
 800945a:	2201      	movs	r2, #1
 800945c:	0030      	movs	r0, r6
 800945e:	f7fe f8d7 	bl	8007610 <StartDMAstream>
 8009462:	0002      	movs	r2, r0
 8009464:	2817      	cmp	r0, #23
 8009466:	d100      	bne.n	800946a <SetupDMAStreams+0x56>
 8009468:	e0a2      	b.n	80095b0 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 800946a:	0160      	lsls	r0, r4, #5
 800946c:	1b00      	subs	r0, r0, r4
 800946e:	0080      	lsls	r0, r0, #2
 8009470:	1900      	adds	r0, r0, r4
 8009472:	00c0      	lsls	r0, r0, #3
 8009474:	21fa      	movs	r1, #250	; 0xfa
 8009476:	0089      	lsls	r1, r1, #2
 8009478:	f7f6 fe6a 	bl	8000150 <__udivsi3>
 800947c:	0004      	movs	r4, r0
 800947e:	260f      	movs	r6, #15
 8009480:	446e      	add	r6, sp
 8009482:	4b4e      	ldr	r3, [pc, #312]	; (80095bc <SetupDMAStreams+0x1a8>)
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	0033      	movs	r3, r6
 8009488:	2200      	movs	r2, #0
 800948a:	0001      	movs	r1, r0
 800948c:	484c      	ldr	r0, [pc, #304]	; (80095c0 <SetupDMAStreams+0x1ac>)
 800948e:	f007 f829 	bl	80104e4 <xTimerCreate>
		dmaStreamTotal[src - 1] =count;
 8009492:	7833      	ldrb	r3, [r6, #0]
 8009494:	3b01      	subs	r3, #1
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4a4a      	ldr	r2, [pc, #296]	; (80095c4 <SetupDMAStreams+0x1b0>)
 800949a:	509d      	str	r5, [r3, r2]
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 800949c:	ab0a      	add	r3, sp, #40	; 0x28
 800949e:	7818      	ldrb	r0, [r3, #0]
 80094a0:	f005 f9e2 	bl	800e868 <GetUart>
 80094a4:	0007      	movs	r7, r0
 80094a6:	7830      	ldrb	r0, [r6, #0]
 80094a8:	f005 f9de 	bl	800e868 <GetUart>
 80094ac:	0001      	movs	r1, r0
 80094ae:	2201      	movs	r2, #1
 80094b0:	0038      	movs	r0, r7
 80094b2:	f7fe f8ad 	bl	8007610 <StartDMAstream>
 80094b6:	0002      	movs	r2, r0
 80094b8:	2817      	cmp	r0, #23
 80094ba:	d079      	beq.n	80095b0 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 80094bc:	4b3f      	ldr	r3, [pc, #252]	; (80095bc <SetupDMAStreams+0x1a8>)
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	ab0a      	add	r3, sp, #40	; 0x28
 80094c2:	2200      	movs	r2, #0
 80094c4:	0021      	movs	r1, r4
 80094c6:	483e      	ldr	r0, [pc, #248]	; (80095c0 <SetupDMAStreams+0x1ac>)
 80094c8:	f007 f80c 	bl	80104e4 <xTimerCreate>
 80094cc:	0004      	movs	r4, r0
		dmaStreamTotal[dst - 1] =count;
 80094ce:	ab0a      	add	r3, sp, #40	; 0x28
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a3b      	ldr	r2, [pc, #236]	; (80095c4 <SetupDMAStreams+0x1b0>)
 80094d8:	509d      	str	r5, [r3, r2]
 80094da:	e02d      	b.n	8009538 <SetupDMAStreams+0x124>
		portStatus[src] =STREAM;
 80094dc:	4a3a      	ldr	r2, [pc, #232]	; (80095c8 <SetupDMAStreams+0x1b4>)
 80094de:	2102      	movs	r1, #2
 80094e0:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 80094e2:	2267      	movs	r2, #103	; 0x67
 80094e4:	e064      	b.n	80095b0 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(src),GetUart(dst),1) == BOS_ERR_PORT_BUSY)
 80094e6:	0018      	movs	r0, r3
 80094e8:	f005 f9be 	bl	800e868 <GetUart>
 80094ec:	0006      	movs	r6, r0
 80094ee:	ab0a      	add	r3, sp, #40	; 0x28
 80094f0:	7818      	ldrb	r0, [r3, #0]
 80094f2:	f005 f9b9 	bl	800e868 <GetUart>
 80094f6:	0001      	movs	r1, r0
 80094f8:	2201      	movs	r2, #1
 80094fa:	0030      	movs	r0, r6
 80094fc:	f7fe f888 	bl	8007610 <StartDMAstream>
 8009500:	0002      	movs	r2, r0
 8009502:	2817      	cmp	r0, #23
 8009504:	d054      	beq.n	80095b0 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&src,StreamTimerCallback);
 8009506:	260f      	movs	r6, #15
 8009508:	446e      	add	r6, sp
 800950a:	0160      	lsls	r0, r4, #5
 800950c:	1b00      	subs	r0, r0, r4
 800950e:	0080      	lsls	r0, r0, #2
 8009510:	1900      	adds	r0, r0, r4
 8009512:	00c0      	lsls	r0, r0, #3
 8009514:	21fa      	movs	r1, #250	; 0xfa
 8009516:	0089      	lsls	r1, r1, #2
 8009518:	f7f6 fe1a 	bl	8000150 <__udivsi3>
 800951c:	0001      	movs	r1, r0
 800951e:	4b27      	ldr	r3, [pc, #156]	; (80095bc <SetupDMAStreams+0x1a8>)
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	0033      	movs	r3, r6
 8009524:	2200      	movs	r2, #0
 8009526:	4826      	ldr	r0, [pc, #152]	; (80095c0 <SetupDMAStreams+0x1ac>)
 8009528:	f006 ffdc 	bl	80104e4 <xTimerCreate>
 800952c:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800952e:	7833      	ldrb	r3, [r6, #0]
 8009530:	3b01      	subs	r3, #1
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	4a23      	ldr	r2, [pc, #140]	; (80095c4 <SetupDMAStreams+0x1b0>)
 8009536:	509d      	str	r5, [r3, r2]
	return BOS_OK;
 8009538:	2200      	movs	r2, #0
	if(xTimerStream != NULL)
 800953a:	2c00      	cmp	r4, #0
 800953c:	d038      	beq.n	80095b0 <SetupDMAStreams+0x19c>
		xTimerStart(xTimerStream,portMAX_DELAY);
 800953e:	f006 fa69 	bl	800fa14 <xTaskGetTickCount>
 8009542:	0002      	movs	r2, r0
 8009544:	2301      	movs	r3, #1
 8009546:	425b      	negs	r3, r3
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	2300      	movs	r3, #0
 800954c:	2101      	movs	r1, #1
 800954e:	0020      	movs	r0, r4
 8009550:	f006 ffe8 	bl	8010524 <xTimerGenericCommand>
	return BOS_OK;
 8009554:	2200      	movs	r2, #0
 8009556:	e02b      	b.n	80095b0 <SetupDMAStreams+0x19c>
		if(StartDMAstream(GetUart(dst),GetUart(src),1) == BOS_ERR_PORT_BUSY)
 8009558:	0010      	movs	r0, r2
 800955a:	f005 f985 	bl	800e868 <GetUart>
 800955e:	0006      	movs	r6, r0
 8009560:	230f      	movs	r3, #15
 8009562:	446b      	add	r3, sp
 8009564:	7818      	ldrb	r0, [r3, #0]
 8009566:	f005 f97f 	bl	800e868 <GetUart>
 800956a:	0001      	movs	r1, r0
 800956c:	2201      	movs	r2, #1
 800956e:	0030      	movs	r0, r6
 8009570:	f7fe f84e 	bl	8007610 <StartDMAstream>
 8009574:	0002      	movs	r2, r0
 8009576:	2817      	cmp	r0, #23
 8009578:	d01a      	beq.n	80095b0 <SetupDMAStreams+0x19c>
		xTimerStream =xTimerCreate("StreamTimer",pdMS_TO_TICKS(timeout),pdFALSE,(void* )&dst,StreamTimerCallback);
 800957a:	0160      	lsls	r0, r4, #5
 800957c:	1b00      	subs	r0, r0, r4
 800957e:	0080      	lsls	r0, r0, #2
 8009580:	1900      	adds	r0, r0, r4
 8009582:	00c0      	lsls	r0, r0, #3
 8009584:	21fa      	movs	r1, #250	; 0xfa
 8009586:	0089      	lsls	r1, r1, #2
 8009588:	f7f6 fde2 	bl	8000150 <__udivsi3>
 800958c:	0001      	movs	r1, r0
 800958e:	4b0b      	ldr	r3, [pc, #44]	; (80095bc <SetupDMAStreams+0x1a8>)
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	ab0a      	add	r3, sp, #40	; 0x28
 8009594:	2200      	movs	r2, #0
 8009596:	480a      	ldr	r0, [pc, #40]	; (80095c0 <SetupDMAStreams+0x1ac>)
 8009598:	f006 ffa4 	bl	80104e4 <xTimerCreate>
 800959c:	0004      	movs	r4, r0
		dmaStreamTotal[src - 1] =count;
 800959e:	230f      	movs	r3, #15
 80095a0:	446b      	add	r3, sp
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4a06      	ldr	r2, [pc, #24]	; (80095c4 <SetupDMAStreams+0x1b0>)
 80095aa:	509d      	str	r5, [r3, r2]
 80095ac:	e7c4      	b.n	8009538 <SetupDMAStreams+0x124>
		return BOS_ERR_WrongParam;
 80095ae:	2267      	movs	r2, #103	; 0x67
}
 80095b0:	0010      	movs	r0, r2
 80095b2:	b005      	add	sp, #20
 80095b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERR_WrongParam;
 80095b6:	2267      	movs	r2, #103	; 0x67
 80095b8:	e7fa      	b.n	80095b0 <SetupDMAStreams+0x19c>
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	080093fd 	.word	0x080093fd
 80095c0:	0801bc80 	.word	0x0801bc80
 80095c4:	20001838 	.word	0x20001838
 80095c8:	2000116c 	.word	0x2000116c

080095cc <NotifyMessagingTask>:

/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
 */
void NotifyMessagingTask(uint8_t port){
 80095cc:	b510      	push	{r4, lr}
	switch(port){
 80095ce:	2806      	cmp	r0, #6
 80095d0:	d80a      	bhi.n	80095e8 <NotifyMessagingTask+0x1c>
 80095d2:	0080      	lsls	r0, r0, #2
 80095d4:	4b19      	ldr	r3, [pc, #100]	; (800963c <NotifyMessagingTask+0x70>)
 80095d6:	581b      	ldr	r3, [r3, r0]
 80095d8:	469f      	mov	pc, r3
#ifdef _P1
		case P1:
			xTaskNotifyGive(P1MsgTaskHandle)
 80095da:	4b19      	ldr	r3, [pc, #100]	; (8009640 <NotifyMessagingTask+0x74>)
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	2300      	movs	r3, #0
 80095e0:	2202      	movs	r2, #2
 80095e2:	2100      	movs	r1, #0
 80095e4:	f006 feae 	bl	8010344 <xTaskGenericNotify>
			break;
#endif
		default:
			break;
	}
}
 80095e8:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle)
 80095ea:	4b16      	ldr	r3, [pc, #88]	; (8009644 <NotifyMessagingTask+0x78>)
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	2300      	movs	r3, #0
 80095f0:	2202      	movs	r2, #2
 80095f2:	2100      	movs	r1, #0
 80095f4:	f006 fea6 	bl	8010344 <xTaskGenericNotify>
			break;
 80095f8:	e7f6      	b.n	80095e8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle)
 80095fa:	4b13      	ldr	r3, [pc, #76]	; (8009648 <NotifyMessagingTask+0x7c>)
 80095fc:	6818      	ldr	r0, [r3, #0]
 80095fe:	2300      	movs	r3, #0
 8009600:	2202      	movs	r2, #2
 8009602:	2100      	movs	r1, #0
 8009604:	f006 fe9e 	bl	8010344 <xTaskGenericNotify>
			break;
 8009608:	e7ee      	b.n	80095e8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle)
 800960a:	4b10      	ldr	r3, [pc, #64]	; (800964c <NotifyMessagingTask+0x80>)
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	2300      	movs	r3, #0
 8009610:	2202      	movs	r2, #2
 8009612:	2100      	movs	r1, #0
 8009614:	f006 fe96 	bl	8010344 <xTaskGenericNotify>
			break;
 8009618:	e7e6      	b.n	80095e8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle)
 800961a:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <NotifyMessagingTask+0x84>)
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	2300      	movs	r3, #0
 8009620:	2202      	movs	r2, #2
 8009622:	2100      	movs	r1, #0
 8009624:	f006 fe8e 	bl	8010344 <xTaskGenericNotify>
			break;
 8009628:	e7de      	b.n	80095e8 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle)
 800962a:	4b0a      	ldr	r3, [pc, #40]	; (8009654 <NotifyMessagingTask+0x88>)
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	2300      	movs	r3, #0
 8009630:	2202      	movs	r2, #2
 8009632:	2100      	movs	r1, #0
 8009634:	f006 fe86 	bl	8010344 <xTaskGenericNotify>
}
 8009638:	e7d6      	b.n	80095e8 <NotifyMessagingTask+0x1c>
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	0801bc64 	.word	0x0801bc64
 8009640:	20001858 	.word	0x20001858
 8009644:	2000185c 	.word	0x2000185c
 8009648:	20001860 	.word	0x20001860
 800964c:	20001864 	.word	0x20001864
 8009650:	20001868 	.word	0x20001868
 8009654:	2000186c 	.word	0x2000186c

08009658 <SendMessageFromPort>:
 6     !0        		 0				!0							Either single-cast message with myID as source module OR (if code == 0)
 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	 	    single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
 7     !0        	    !0				 0							Not allowed.
 8     !0                0				 0							Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
 */
BOS_Status SendMessageFromPort(uint8_t port,uint8_t src,uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800965a:	46de      	mov	lr, fp
 800965c:	4657      	mov	r7, sl
 800965e:	464e      	mov	r6, r9
 8009660:	4645      	mov	r5, r8
 8009662:	b5e0      	push	{r5, r6, r7, lr}
 8009664:	b087      	sub	sp, #28
 8009666:	0005      	movs	r5, r0
 8009668:	9103      	str	r1, [sp, #12]
 800966a:	0014      	movs	r4, r2
 800966c:	4699      	mov	r9, r3
 800966e:	ab10      	add	r3, sp, #64	; 0x40
 8009670:	881e      	ldrh	r6, [r3, #0]
	static uint16_t ptrShift =0,pp=0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if((port == 0 && dst == 0) ||																												// cases 3 & 4
 8009672:	0003      	movs	r3, r0
 8009674:	4313      	orrs	r3, r2
 8009676:	d100      	bne.n	800967a <SendMessageFromPort+0x22>
 8009678:	e1e8      	b.n	8009a4c <SendMessageFromPort+0x3f4>
 800967a:	2800      	cmp	r0, #0
 800967c:	d14d      	bne.n	800971a <SendMessageFromPort+0xc2>
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 800967e:	1c93      	adds	r3, r2, #2
 8009680:	b2db      	uxtb	r3, r3
	(port != 0 && src != 0 && dst == 0)){																						// case 7
		return BOS_ERR_WrongParam;
 8009682:	2067      	movs	r0, #103	; 0x67
	(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 8009684:	2b01      	cmp	r3, #1
 8009686:	d900      	bls.n	800968a <SendMessageFromPort+0x32>
 8009688:	e162      	b.n	8009950 <SendMessageFromPort+0x2f8>
	}
	
	/* Increase the priority of current running task */
	TaskPriority =uxTaskPriorityGet( NULL);
 800968a:	2000      	movs	r0, #0
 800968c:	f006 f92a 	bl	800f8e4 <uxTaskPriorityGet>
 8009690:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 8009692:	2105      	movs	r1, #5
 8009694:	2000      	movs	r0, #0
 8009696:	f006 f935 	bl	800f904 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] ='H';
 800969a:	4bc4      	ldr	r3, [pc, #784]	; (80099ac <SendMessageFromPort+0x354>)
 800969c:	2248      	movs	r2, #72	; 0x48
 800969e:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 80096a0:	3212      	adds	r2, #18
 80096a2:	705a      	strb	r2, [r3, #1]
	
	/* Should I copy message buffer from another port or construct from scratch? */
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80096a4:	9b03      	ldr	r3, [sp, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d000      	beq.n	80096ac <SendMessageFromPort+0x54>
 80096aa:	e1e8      	b.n	8009a7e <SendMessageFromPort+0x426>
	{
		/* Get message length from the incoming port */
		length =messageLength[numberOfParams - 1];
 80096ac:	1e73      	subs	r3, r6, #1
 80096ae:	4ac0      	ldr	r2, [pc, #768]	; (80099b0 <SendMessageFromPort+0x358>)
 80096b0:	5cd7      	ldrb	r7, [r2, r3]
		
		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3],&cMessage[numberOfParams - 1][0],(size_t )length);
 80096b2:	4ec0      	ldr	r6, [pc, #768]	; (80099b4 <SendMessageFromPort+0x35c>)
 80096b4:	00d9      	lsls	r1, r3, #3
 80096b6:	1ac9      	subs	r1, r1, r3
 80096b8:	00c9      	lsls	r1, r1, #3
 80096ba:	4bbf      	ldr	r3, [pc, #764]	; (80099b8 <SendMessageFromPort+0x360>)
 80096bc:	18c9      	adds	r1, r1, r3
 80096be:	003a      	movs	r2, r7
 80096c0:	0030      	movs	r0, r6
 80096c2:	f00b f970 	bl	80149a6 <memcpy>
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
	
	/* Copy message length */
	message[2] =length;
 80096c6:	3e03      	subs	r6, #3
 80096c8:	70b7      	strb	r7, [r6, #2]
	
	/* End of message - Calculate CRC8 */
	memcpy(crcBuffer,&message[0],length + 3);
 80096ca:	1cfb      	adds	r3, r7, #3
 80096cc:	4698      	mov	r8, r3
 80096ce:	001a      	movs	r2, r3
 80096d0:	0031      	movs	r1, r6
 80096d2:	48ba      	ldr	r0, [pc, #744]	; (80099bc <SendMessageFromPort+0x364>)
 80096d4:	f00b f967 	bl	80149a6 <memcpy>
	
	/* crc calculation function added for test */
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 80096d8:	b2bf      	uxth	r7, r7
 80096da:	1cf9      	adds	r1, r7, #3
 80096dc:	48b7      	ldr	r0, [pc, #732]	; (80099bc <SendMessageFromPort+0x364>)
 80096de:	f004 fa21 	bl	800db24 <CalculateCRC8>
 80096e2:	4643      	mov	r3, r8
 80096e4:	54f0      	strb	r0, [r6, r3]
	/* end of crc calculation function addition */

	memset(crcBuffer,0,sizeof(crcBuffer));
 80096e6:	2238      	movs	r2, #56	; 0x38
 80096e8:	2100      	movs	r1, #0
 80096ea:	48b4      	ldr	r0, [pc, #720]	; (80099bc <SendMessageFromPort+0x364>)
 80096ec:	f00b f964 	bl	80149b8 <memset>
	
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 80096f0:	3402      	adds	r4, #2
 80096f2:	b2e4      	uxtb	r4, r4
 80096f4:	2c01      	cmp	r4, #1
 80096f6:	d800      	bhi.n	80096fa <SendMessageFromPort+0xa2>
 80096f8:	e14e      	b.n	8009998 <SendMessageFromPort+0x340>
		/* Transmit the message - single-cast */

		if(code == MSG_Acknowledgment_Accepted || code==MSG_rejected){
 80096fa:	464b      	mov	r3, r9
 80096fc:	3b2c      	subs	r3, #44	; 0x2c
 80096fe:	b29b      	uxth	r3, r3
 8009700:	2b01      	cmp	r3, #1
 8009702:	d800      	bhi.n	8009706 <SendMessageFromPort+0xae>
 8009704:	e110      	b.n	8009928 <SendMessageFromPort+0x2d0>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
		}
		else{

			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 8009706:	4bae      	ldr	r3, [pc, #696]	; (80099c0 <SendMessageFromPort+0x368>)
 8009708:	88db      	ldrh	r3, [r3, #6]
 800970a:	2600      	movs	r6, #0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d100      	bne.n	8009712 <SendMessageFromPort+0xba>
 8009710:	e111      	b.n	8009936 <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009712:	3704      	adds	r7, #4
 8009714:	b2bf      	uxth	r7, r7
				osDelay(200);
				if(ACK_FLAG == true)
 8009716:	4cab      	ldr	r4, [pc, #684]	; (80099c4 <SendMessageFromPort+0x36c>)
 8009718:	e12d      	b.n	8009976 <SendMessageFromPort+0x31e>
	(port != 0 && src != 0 && dst == 0)){																						// case 7
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d002      	beq.n	8009726 <SendMessageFromPort+0xce>
 8009720:	2a00      	cmp	r2, #0
 8009722:	d100      	bne.n	8009726 <SendMessageFromPort+0xce>
 8009724:	e194      	b.n	8009a50 <SendMessageFromPort+0x3f8>
	TaskPriority =uxTaskPriorityGet( NULL);
 8009726:	2000      	movs	r0, #0
 8009728:	f006 f8dc 	bl	800f8e4 <uxTaskPriorityGet>
 800972c:	9004      	str	r0, [sp, #16]
	vTaskPrioritySet( NULL,osPriorityHigh - osPriorityIdle);
 800972e:	2105      	movs	r1, #5
 8009730:	2000      	movs	r0, #0
 8009732:	f006 f8e7 	bl	800f904 <vTaskPrioritySet>
	message[0] ='H';
 8009736:	4b9d      	ldr	r3, [pc, #628]	; (80099ac <SendMessageFromPort+0x354>)
 8009738:	2248      	movs	r2, #72	; 0x48
 800973a:	701a      	strb	r2, [r3, #0]
	message[1] ='Z';
 800973c:	3212      	adds	r2, #18
 800973e:	705a      	strb	r2, [r3, #1]
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009740:	464b      	mov	r3, r9
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0b2      	beq.n	80096ac <SendMessageFromPort+0x54>
		if(src == 0)
 8009746:	9b03      	ldr	r3, [sp, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d102      	bne.n	8009752 <SendMessageFromPort+0xfa>
			src =myID;
 800974c:	4b9e      	ldr	r3, [pc, #632]	; (80099c8 <SendMessageFromPort+0x370>)
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	9303      	str	r3, [sp, #12]
		message[2] =length;
 8009752:	4a96      	ldr	r2, [pc, #600]	; (80099ac <SendMessageFromPort+0x354>)
 8009754:	2300      	movs	r3, #0
 8009756:	7093      	strb	r3, [r2, #2]
		message[3] =dst;
 8009758:	70d4      	strb	r4, [r2, #3]
		message[4] =src;
 800975a:	9b03      	ldr	r3, [sp, #12]
 800975c:	7113      	strb	r3, [r2, #4]
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 800975e:	4998      	ldr	r1, [pc, #608]	; (80099c0 <SendMessageFromPort+0x368>)
 8009760:	790b      	ldrb	r3, [r1, #4]
 8009762:	011b      	lsls	r3, r3, #4
 8009764:	7848      	ldrb	r0, [r1, #1]
 8009766:	0080      	lsls	r0, r0, #2
 8009768:	4303      	orrs	r3, r0
 800976a:	7809      	ldrb	r1, [r1, #0]
 800976c:	430b      	orrs	r3, r1
		if(code > 0xFF)
 800976e:	21ff      	movs	r1, #255	; 0xff
 8009770:	4549      	cmp	r1, r9
 8009772:	4189      	sbcs	r1, r1
 8009774:	4249      	negs	r1, r1
		message[5] =(BOSMessaging.response) | (BOSMessaging.Acknowledgment << 4) | (BOSMessaging.trace << 2) | (extendCode << 1) | (extendOptions);
 8009776:	0049      	lsls	r1, r1, #1
 8009778:	430b      	orrs	r3, r1
 800977a:	b2db      	uxtb	r3, r3
 800977c:	7153      	strb	r3, [r2, #5]
		message[6 + shift] =(uint8_t )code;
 800977e:	4649      	mov	r1, r9
 8009780:	7191      	strb	r1, [r2, #6]
 8009782:	2200      	movs	r2, #0
 8009784:	4693      	mov	fp, r2
		if(extendCode == true){
 8009786:	29ff      	cmp	r1, #255	; 0xff
 8009788:	d904      	bls.n	8009794 <SendMessageFromPort+0x13c>
			message[6 + shift] =(uint8_t )(code >> 8);
 800978a:	0a0a      	lsrs	r2, r1, #8
 800978c:	4987      	ldr	r1, [pc, #540]	; (80099ac <SendMessageFromPort+0x354>)
 800978e:	71ca      	strb	r2, [r1, #7]
			++shift;
 8009790:	2201      	movs	r2, #1
 8009792:	4693      	mov	fp, r2
		if(numberOfParams <= MAX_PARAMS_PER_MESSAGE){
 8009794:	2e2e      	cmp	r6, #46	; 0x2e
 8009796:	d932      	bls.n	80097fe <SendMessageFromPort+0x1a6>
			message[5] |=0x80;
 8009798:	2280      	movs	r2, #128	; 0x80
 800979a:	4252      	negs	r2, r2
 800979c:	4313      	orrs	r3, r2
 800979e:	4a83      	ldr	r2, [pc, #524]	; (80099ac <SendMessageFromPort+0x354>)
 80097a0:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams =numberOfParams;
 80097a2:	4b8a      	ldr	r3, [pc, #552]	; (80099cc <SendMessageFromPort+0x374>)
 80097a4:	801e      	strh	r6, [r3, #0]
	uint8_t length =0, shift =0;
 80097a6:	2300      	movs	r3, #0
 80097a8:	469a      	mov	sl, r3
			numberOfParams = MAX_PARAMS_PER_MESSAGE;
 80097aa:	262e      	movs	r6, #46	; 0x2e
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80097ac:	465b      	mov	r3, fp
 80097ae:	1ddf      	adds	r7, r3, #7
 80097b0:	003b      	movs	r3, r7
 80097b2:	4694      	mov	ip, r2
 80097b4:	4463      	add	r3, ip
 80097b6:	9305      	str	r3, [sp, #20]
			while(totalNumberOfParams != 0){
 80097b8:	4b84      	ldr	r3, [pc, #528]	; (80099cc <SendMessageFromPort+0x374>)
 80097ba:	881f      	ldrh	r7, [r3, #0]
 80097bc:	2f00      	cmp	r7, #0
 80097be:	d02d      	beq.n	800981c <SendMessageFromPort+0x1c4>
				if((totalNumberOfParams / numberOfParams) >= 1){
 80097c0:	0031      	movs	r1, r6
 80097c2:	0038      	movs	r0, r7
 80097c4:	f7f6 fcc4 	bl	8000150 <__udivsi3>
 80097c8:	b280      	uxth	r0, r0
 80097ca:	2800      	cmp	r0, #0
 80097cc:	d141      	bne.n	8009852 <SendMessageFromPort+0x1fa>
					message[5] &=0x7F; /* Last message. Reset long message flag */
 80097ce:	4b77      	ldr	r3, [pc, #476]	; (80099ac <SendMessageFromPort+0x354>)
 80097d0:	795a      	ldrb	r2, [r3, #5]
 80097d2:	237f      	movs	r3, #127	; 0x7f
 80097d4:	4013      	ands	r3, r2
 80097d6:	4a75      	ldr	r2, [pc, #468]	; (80099ac <SendMessageFromPort+0x354>)
 80097d8:	7153      	strb	r3, [r2, #5]
					memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80097da:	4e7d      	ldr	r6, [pc, #500]	; (80099d0 <SendMessageFromPort+0x378>)
 80097dc:	8831      	ldrh	r1, [r6, #0]
 80097de:	4b7d      	ldr	r3, [pc, #500]	; (80099d4 <SendMessageFromPort+0x37c>)
 80097e0:	18c9      	adds	r1, r1, r3
 80097e2:	003a      	movs	r2, r7
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	f00b f8de 	bl	80149a6 <memcpy>
					ptrShift =0;
 80097ea:	2300      	movs	r3, #0
 80097ec:	8033      	strh	r3, [r6, #0]
					totalNumberOfParams =0;
 80097ee:	4a77      	ldr	r2, [pc, #476]	; (80099cc <SendMessageFromPort+0x374>)
 80097f0:	8013      	strh	r3, [r2, #0]
					length =numberOfParams + shift + 4;
 80097f2:	1d3b      	adds	r3, r7, #4
 80097f4:	445b      	add	r3, fp
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	469a      	mov	sl, r3
					numberOfParams =totalNumberOfParams;
 80097fa:	003e      	movs	r6, r7
 80097fc:	e7dc      	b.n	80097b8 <SendMessageFromPort+0x160>
			memcpy((char* )&message[7 + shift],(&messageParams[0] + ptrShift),numberOfParams);
 80097fe:	465b      	mov	r3, fp
 8009800:	3307      	adds	r3, #7
 8009802:	486a      	ldr	r0, [pc, #424]	; (80099ac <SendMessageFromPort+0x354>)
 8009804:	1818      	adds	r0, r3, r0
 8009806:	4b72      	ldr	r3, [pc, #456]	; (80099d0 <SendMessageFromPort+0x378>)
 8009808:	8819      	ldrh	r1, [r3, #0]
 800980a:	4b72      	ldr	r3, [pc, #456]	; (80099d4 <SendMessageFromPort+0x37c>)
 800980c:	18c9      	adds	r1, r1, r3
 800980e:	0032      	movs	r2, r6
 8009810:	f00b f8c9 	bl	80149a6 <memcpy>
			length =numberOfParams + shift + 4;
 8009814:	1d31      	adds	r1, r6, #4
 8009816:	4459      	add	r1, fp
 8009818:	b2cb      	uxtb	r3, r1
 800981a:	469a      	mov	sl, r3
		if(AddBcastPayload == true){
 800981c:	4b6e      	ldr	r3, [pc, #440]	; (80099d8 <SendMessageFromPort+0x380>)
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d058      	beq.n	80098d6 <SendMessageFromPort+0x27e>
			if(dstGroupID < BOS_BROADCAST){
 8009824:	4b6d      	ldr	r3, [pc, #436]	; (80099dc <SendMessageFromPort+0x384>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	2bff      	cmp	r3, #255	; 0xff
 800982a:	d100      	bne.n	800982e <SendMessageFromPort+0x1d6>
 800982c:	e114      	b.n	8009a58 <SendMessageFromPort+0x400>
				for(uint16_t i =1; i <= N; i++)						// N modules
 800982e:	4a6c      	ldr	r2, [pc, #432]	; (80099e0 <SendMessageFromPort+0x388>)
 8009830:	7817      	ldrb	r7, [r2, #0]
 8009832:	2f00      	cmp	r7, #0
 8009834:	d076      	beq.n	8009924 <SendMessageFromPort+0x2cc>
 8009836:	2201      	movs	r2, #1
 8009838:	409a      	lsls	r2, r3
 800983a:	4690      	mov	r8, r2
 800983c:	4869      	ldr	r0, [pc, #420]	; (80099e4 <SendMessageFromPort+0x38c>)
 800983e:	2301      	movs	r3, #1
			uint8_t groupMembers =0;
 8009840:	2200      	movs	r2, #0
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009842:	495a      	ldr	r1, [pc, #360]	; (80099ac <SendMessageFromPort+0x354>)
 8009844:	468c      	mov	ip, r1
 8009846:	44b4      	add	ip, r6
 8009848:	9505      	str	r5, [sp, #20]
 800984a:	4645      	mov	r5, r8
 800984c:	46a0      	mov	r8, r4
 800984e:	465c      	mov	r4, fp
 8009850:	e017      	b.n	8009882 <SendMessageFromPort+0x22a>
					SendMessageFromPort(port,src,dst,code,numberOfParams);
 8009852:	9600      	str	r6, [sp, #0]
 8009854:	464b      	mov	r3, r9
 8009856:	0022      	movs	r2, r4
 8009858:	9903      	ldr	r1, [sp, #12]
 800985a:	0028      	movs	r0, r5
 800985c:	f7ff fefc 	bl	8009658 <SendMessageFromPort>
					osDelay(10);
 8009860:	200a      	movs	r0, #10
 8009862:	f005 f950 	bl	800eb06 <osDelay>
					totalNumberOfParams -=numberOfParams;
 8009866:	4a59      	ldr	r2, [pc, #356]	; (80099cc <SendMessageFromPort+0x374>)
 8009868:	8813      	ldrh	r3, [r2, #0]
 800986a:	1b9b      	subs	r3, r3, r6
 800986c:	8013      	strh	r3, [r2, #0]
					ptrShift +=numberOfParams;
 800986e:	4a58      	ldr	r2, [pc, #352]	; (80099d0 <SendMessageFromPort+0x378>)
 8009870:	8813      	ldrh	r3, [r2, #0]
 8009872:	18f3      	adds	r3, r6, r3
 8009874:	8013      	strh	r3, [r2, #0]
 8009876:	e79f      	b.n	80097b8 <SendMessageFromPort+0x160>
				for(uint16_t i =1; i <= N; i++)						// N modules
 8009878:	3301      	adds	r3, #1
 800987a:	b29b      	uxth	r3, r3
 800987c:	3002      	adds	r0, #2
 800987e:	42bb      	cmp	r3, r7
 8009880:	d80e      	bhi.n	80098a0 <SendMessageFromPort+0x248>
					if(InGroup(i,dstGroupID)){
 8009882:	8801      	ldrh	r1, [r0, #0]
 8009884:	420d      	tst	r5, r1
 8009886:	d0f7      	beq.n	8009878 <SendMessageFromPort+0x220>
						++groupMembers;							// Add this member
 8009888:	3201      	adds	r2, #1
 800988a:	b2d2      	uxtb	r2, r2
						if((numberOfParams + groupMembers + 1) < MAX_PARAMS_PER_MESSAGE)
 800988c:	18b1      	adds	r1, r6, r2
 800988e:	3101      	adds	r1, #1
 8009890:	292d      	cmp	r1, #45	; 0x2d
 8009892:	dd00      	ble.n	8009896 <SendMessageFromPort+0x23e>
 8009894:	e0de      	b.n	8009a54 <SendMessageFromPort+0x3fc>
							message[7 + shift + numberOfParams + groupMembers - 1] =i;
 8009896:	4661      	mov	r1, ip
 8009898:	1889      	adds	r1, r1, r2
 800989a:	1909      	adds	r1, r1, r4
 800989c:	718b      	strb	r3, [r1, #6]
 800989e:	e7eb      	b.n	8009878 <SendMessageFromPort+0x220>
 80098a0:	46a3      	mov	fp, r4
 80098a2:	9d05      	ldr	r5, [sp, #20]
 80098a4:	4644      	mov	r4, r8
				message[7 + shift + numberOfParams + groupMembers] =groupMembers;
 80098a6:	465b      	mov	r3, fp
 80098a8:	3307      	adds	r3, #7
 80098aa:	199b      	adds	r3, r3, r6
 80098ac:	189b      	adds	r3, r3, r2
 80098ae:	493f      	ldr	r1, [pc, #252]	; (80099ac <SendMessageFromPort+0x354>)
 80098b0:	54ca      	strb	r2, [r1, r3]
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80098b2:	18b1      	adds	r1, r6, r2
 80098b4:	3102      	adds	r1, #2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80098b6:	2069      	movs	r0, #105	; 0x69
			else if((dstGroupID < BOS_BROADCAST) && ((numberOfParams + groupMembers + 2) < MAX_PARAMS_PER_MESSAGE))		// Multicast
 80098b8:	292d      	cmp	r1, #45	; 0x2d
 80098ba:	dc49      	bgt.n	8009950 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams + groupMembers + 1] =++bcastID;
 80098bc:	484a      	ldr	r0, [pc, #296]	; (80099e8 <SendMessageFromPort+0x390>)
 80098be:	7801      	ldrb	r1, [r0, #0]
 80098c0:	3101      	adds	r1, #1
 80098c2:	b2c9      	uxtb	r1, r1
 80098c4:	7001      	strb	r1, [r0, #0]
 80098c6:	4839      	ldr	r0, [pc, #228]	; (80099ac <SendMessageFromPort+0x354>)
 80098c8:	18c3      	adds	r3, r0, r3
 80098ca:	7059      	strb	r1, [r3, #1]
 80098cc:	4651      	mov	r1, sl
 80098ce:	3102      	adds	r1, #2
				length +=groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 80098d0:	188a      	adds	r2, r1, r2
 80098d2:	b2d3      	uxtb	r3, r2
 80098d4:	469a      	mov	sl, r3
	message[2] =length;
 80098d6:	4b35      	ldr	r3, [pc, #212]	; (80099ac <SendMessageFromPort+0x354>)
 80098d8:	4698      	mov	r8, r3
 80098da:	4652      	mov	r2, sl
 80098dc:	709a      	strb	r2, [r3, #2]
	memcpy(crcBuffer,&message[0],length + 3);
 80098de:	1cd6      	adds	r6, r2, #3
 80098e0:	0032      	movs	r2, r6
 80098e2:	4641      	mov	r1, r8
 80098e4:	4835      	ldr	r0, [pc, #212]	; (80099bc <SendMessageFromPort+0x364>)
 80098e6:	f00b f85e 	bl	80149a6 <memcpy>
	message[length + 3] =CalculateCRC8(crcBuffer,(length + 3));
 80098ea:	4653      	mov	r3, sl
 80098ec:	b29f      	uxth	r7, r3
 80098ee:	0031      	movs	r1, r6
 80098f0:	4832      	ldr	r0, [pc, #200]	; (80099bc <SendMessageFromPort+0x364>)
 80098f2:	f004 f917 	bl	800db24 <CalculateCRC8>
 80098f6:	4643      	mov	r3, r8
 80098f8:	5598      	strb	r0, [r3, r6]
	memset(crcBuffer,0,sizeof(crcBuffer));
 80098fa:	2238      	movs	r2, #56	; 0x38
 80098fc:	2100      	movs	r1, #0
 80098fe:	482f      	ldr	r0, [pc, #188]	; (80099bc <SendMessageFromPort+0x364>)
 8009900:	f00b f85a 	bl	80149b8 <memset>
	if(dst != BOS_BROADCAST && dst != BOS_MULTICAST){
 8009904:	3402      	adds	r4, #2
 8009906:	b2e4      	uxtb	r4, r4
 8009908:	2c01      	cmp	r4, #1
 800990a:	d900      	bls.n	800990e <SendMessageFromPort+0x2b6>
 800990c:	e6f5      	b.n	80096fa <SendMessageFromPort+0xa2>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
			src =message[4];
		}
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 800990e:	9803      	ldr	r0, [sp, #12]
 8009910:	f7f9 ffb0 	bl	8003874 <FindBroadcastRoutes>
 8009914:	2600      	movs	r6, #0
		
		/* Send to all my broadcast ports */
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009916:	2401      	movs	r4, #1
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009918:	4b34      	ldr	r3, [pc, #208]	; (80099ec <SendMessageFromPort+0x394>)
 800991a:	4699      	mov	r9, r3
 800991c:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <SendMessageFromPort+0x370>)
 800991e:	4698      	mov	r8, r3
				/* Transmit the message from this port */
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009920:	9503      	str	r5, [sp, #12]
 8009922:	e074      	b.n	8009a0e <SendMessageFromPort+0x3b6>
			uint8_t groupMembers =0;
 8009924:	2200      	movs	r2, #0
 8009926:	e7be      	b.n	80098a6 <SendMessageFromPort+0x24e>
			writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009928:	1d3a      	adds	r2, r7, #4
 800992a:	b292      	uxth	r2, r2
 800992c:	2332      	movs	r3, #50	; 0x32
 800992e:	491f      	ldr	r1, [pc, #124]	; (80099ac <SendMessageFromPort+0x354>)
 8009930:	0028      	movs	r0, r5
 8009932:	f005 f805 	bl	800e940 <writePxDMAMutex>
		ACK_FLAG =false; rejected_FLAG=false;
 8009936:	2300      	movs	r3, #0
 8009938:	4a22      	ldr	r2, [pc, #136]	; (80099c4 <SendMessageFromPort+0x36c>)
 800993a:	7013      	strb	r3, [r2, #0]
 800993c:	4a2c      	ldr	r2, [pc, #176]	; (80099f0 <SendMessageFromPort+0x398>)
 800993e:	7013      	strb	r3, [r2, #0]
			Delay_us(10);
		}
	}
	
	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL,TaskPriority);
 8009940:	9904      	ldr	r1, [sp, #16]
 8009942:	2000      	movs	r0, #0
 8009944:	f005 ffde 	bl	800f904 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus =BOS_ERR_NoResponse;
 8009948:	4b2a      	ldr	r3, [pc, #168]	; (80099f4 <SendMessageFromPort+0x39c>)
 800994a:	2202      	movs	r2, #2
 800994c:	701a      	strb	r2, [r3, #0]
	
	return result;
 800994e:	2000      	movs	r0, #0
}
 8009950:	b007      	add	sp, #28
 8009952:	bc3c      	pop	{r2, r3, r4, r5}
 8009954:	4690      	mov	r8, r2
 8009956:	4699      	mov	r9, r3
 8009958:	46a2      	mov	sl, r4
 800995a:	46ab      	mov	fp, r5
 800995c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 800995e:	2332      	movs	r3, #50	; 0x32
 8009960:	003a      	movs	r2, r7
 8009962:	4912      	ldr	r1, [pc, #72]	; (80099ac <SendMessageFromPort+0x354>)
 8009964:	0028      	movs	r0, r5
 8009966:	f004 ffeb 	bl	800e940 <writePxDMAMutex>
			for(uint8_t Number_of_attempt =0; Number_of_attempt < BOSMessaging.trial; Number_of_attempt++){
 800996a:	3601      	adds	r6, #1
 800996c:	b2f6      	uxtb	r6, r6
 800996e:	4b14      	ldr	r3, [pc, #80]	; (80099c0 <SendMessageFromPort+0x368>)
 8009970:	88db      	ldrh	r3, [r3, #6]
 8009972:	42b3      	cmp	r3, r6
 8009974:	d9df      	bls.n	8009936 <SendMessageFromPort+0x2de>
				writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009976:	2332      	movs	r3, #50	; 0x32
 8009978:	003a      	movs	r2, r7
 800997a:	490c      	ldr	r1, [pc, #48]	; (80099ac <SendMessageFromPort+0x354>)
 800997c:	0028      	movs	r0, r5
 800997e:	f004 ffdf 	bl	800e940 <writePxDMAMutex>
				osDelay(200);
 8009982:	20c8      	movs	r0, #200	; 0xc8
 8009984:	f005 f8bf 	bl	800eb06 <osDelay>
				if(ACK_FLAG == true)
 8009988:	7823      	ldrb	r3, [r4, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d1d3      	bne.n	8009936 <SendMessageFromPort+0x2de>
				if(rejected_FLAG == true)
 800998e:	4b18      	ldr	r3, [pc, #96]	; (80099f0 <SendMessageFromPort+0x398>)
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d0e9      	beq.n	800996a <SendMessageFromPort+0x312>
 8009996:	e7e2      	b.n	800995e <SendMessageFromPort+0x306>
		if(code == 0 && src == 0){					// Forwarded broadcast or multicast. Update with original source.
 8009998:	464b      	mov	r3, r9
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1b7      	bne.n	800990e <SendMessageFromPort+0x2b6>
 800999e:	9b03      	ldr	r3, [sp, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d1b4      	bne.n	800990e <SendMessageFromPort+0x2b6>
			src =message[4];
 80099a4:	4b01      	ldr	r3, [pc, #4]	; (80099ac <SendMessageFromPort+0x354>)
 80099a6:	791b      	ldrb	r3, [r3, #4]
 80099a8:	9303      	str	r3, [sp, #12]
 80099aa:	e7b0      	b.n	800990e <SendMessageFromPort+0x2b6>
 80099ac:	20000f6c 	.word	0x20000f6c
 80099b0:	20000fa4 	.word	0x20000fa4
 80099b4:	20000f6f 	.word	0x20000f6f
 80099b8:	20000d7c 	.word	0x20000d7c
 80099bc:	200017d0 	.word	0x200017d0
 80099c0:	20006dd4 	.word	0x20006dd4
 80099c4:	20000ae4 	.word	0x20000ae4
 80099c8:	200010ea 	.word	0x200010ea
 80099cc:	20001a0e 	.word	0x20001a0e
 80099d0:	20001a0c 	.word	0x20001a0c
 80099d4:	20000fac 	.word	0x20000fac
 80099d8:	20000ae5 	.word	0x20000ae5
 80099dc:	20000045 	.word	0x20000045
 80099e0:	20000044 	.word	0x20000044
 80099e4:	20000f34 	.word	0x20000f34
 80099e8:	20000d28 	.word	0x20000d28
 80099ec:	20000d2c 	.word	0x20000d2c
 80099f0:	2000117c 	.word	0x2000117c
 80099f4:	20001188 	.word	0x20001188
			rejected_FLAG=false;
 80099f8:	4b23      	ldr	r3, [pc, #140]	; (8009a88 <SendMessageFromPort+0x430>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	701a      	strb	r2, [r3, #0]
			Delay_us(10);
 80099fe:	200a      	movs	r0, #10
 8009a00:	f004 fd46 	bl	800e490 <StartMicroDelay>
		for(uint8_t p =1; p <= NumOfPorts; p++){
 8009a04:	3401      	adds	r4, #1
 8009a06:	b2e4      	uxtb	r4, r4
 8009a08:	3601      	adds	r6, #1
 8009a0a:	2c07      	cmp	r4, #7
 8009a0c:	d098      	beq.n	8009940 <SendMessageFromPort+0x2e8>
			if((bcastRoutes[myID - 1] >> (p - 1)) & 0x01){
 8009a0e:	4643      	mov	r3, r8
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	3b01      	subs	r3, #1
 8009a14:	005b      	lsls	r3, r3, #1
 8009a16:	464a      	mov	r2, r9
 8009a18:	5a9b      	ldrh	r3, [r3, r2]
 8009a1a:	4133      	asrs	r3, r6
 8009a1c:	07db      	lsls	r3, r3, #31
 8009a1e:	d5eb      	bpl.n	80099f8 <SendMessageFromPort+0x3a0>
				writePxDMAMutex(p,message,length + 4,cmd50ms);
 8009a20:	1d3d      	adds	r5, r7, #4
 8009a22:	b2ad      	uxth	r5, r5
 8009a24:	2332      	movs	r3, #50	; 0x32
 8009a26:	002a      	movs	r2, r5
 8009a28:	4918      	ldr	r1, [pc, #96]	; (8009a8c <SendMessageFromPort+0x434>)
 8009a2a:	0020      	movs	r0, r4
 8009a2c:	f004 ff88 	bl	800e940 <writePxDMAMutex>
				osDelay(200);
 8009a30:	20c8      	movs	r0, #200	; 0xc8
 8009a32:	f005 f868 	bl	800eb06 <osDelay>
				if(rejected_FLAG == true)
 8009a36:	4b14      	ldr	r3, [pc, #80]	; (8009a88 <SendMessageFromPort+0x430>)
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d0dc      	beq.n	80099f8 <SendMessageFromPort+0x3a0>
					writePxDMAMutex(port,message,length + 4,cmd50ms);
 8009a3e:	2332      	movs	r3, #50	; 0x32
 8009a40:	002a      	movs	r2, r5
 8009a42:	4912      	ldr	r1, [pc, #72]	; (8009a8c <SendMessageFromPort+0x434>)
 8009a44:	9803      	ldr	r0, [sp, #12]
 8009a46:	f004 ff7b 	bl	800e940 <writePxDMAMutex>
 8009a4a:	e7d5      	b.n	80099f8 <SendMessageFromPort+0x3a0>
		return BOS_ERR_WrongParam;
 8009a4c:	2067      	movs	r0, #103	; 0x67
 8009a4e:	e77f      	b.n	8009950 <SendMessageFromPort+0x2f8>
 8009a50:	2067      	movs	r0, #103	; 0x67
 8009a52:	e77d      	b.n	8009950 <SendMessageFromPort+0x2f8>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a54:	2069      	movs	r0, #105	; 0x69
 8009a56:	e77b      	b.n	8009950 <SendMessageFromPort+0x2f8>
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009a58:	1c73      	adds	r3, r6, #1
				return BOS_ERR_MSG_DOES_NOT_FIT;
 8009a5a:	2069      	movs	r0, #105	; 0x69
			if((dstGroupID == BOS_BROADCAST) && ((numberOfParams + 1) < MAX_PARAMS_PER_MESSAGE))
 8009a5c:	2b2d      	cmp	r3, #45	; 0x2d
 8009a5e:	dd00      	ble.n	8009a62 <SendMessageFromPort+0x40a>
 8009a60:	e776      	b.n	8009950 <SendMessageFromPort+0x2f8>
				message[7 + shift + numberOfParams] =++bcastID;
 8009a62:	4a0b      	ldr	r2, [pc, #44]	; (8009a90 <SendMessageFromPort+0x438>)
 8009a64:	7813      	ldrb	r3, [r2, #0]
 8009a66:	3301      	adds	r3, #1
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	7013      	strb	r3, [r2, #0]
 8009a6c:	4a07      	ldr	r2, [pc, #28]	; (8009a8c <SendMessageFromPort+0x434>)
 8009a6e:	1992      	adds	r2, r2, r6
 8009a70:	445a      	add	r2, fp
 8009a72:	71d3      	strb	r3, [r2, #7]
				length +=1;		// + bcastID
 8009a74:	4651      	mov	r1, sl
 8009a76:	3101      	adds	r1, #1
 8009a78:	b2cb      	uxtb	r3, r1
 8009a7a:	469a      	mov	sl, r3
 8009a7c:	e72b      	b.n	80098d6 <SendMessageFromPort+0x27e>
	if((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009a7e:	464b      	mov	r3, r9
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d100      	bne.n	8009a86 <SendMessageFromPort+0x42e>
 8009a84:	e612      	b.n	80096ac <SendMessageFromPort+0x54>
 8009a86:	e664      	b.n	8009752 <SendMessageFromPort+0xfa>
 8009a88:	2000117c 	.word	0x2000117c
 8009a8c:	20000f6c 	.word	0x20000f6c
 8009a90:	20000d28 	.word	0x20000d28

08009a94 <ForwardReceivedMessage>:
BOS_Status ForwardReceivedMessage(uint8_t incomingPort){
 8009a94:	b530      	push	{r4, r5, lr}
 8009a96:	b083      	sub	sp, #12
 8009a98:	0005      	movs	r5, r0
	AddBcastPayload = false;
 8009a9a:	4b0b      	ldr	r3, [pc, #44]	; (8009ac8 <ForwardReceivedMessage+0x34>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
	dst =cMessage[incomingPort - 1][0];
 8009aa0:	1e42      	subs	r2, r0, #1
 8009aa2:	00d3      	lsls	r3, r2, #3
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	00db      	lsls	r3, r3, #3
 8009aa8:	4a08      	ldr	r2, [pc, #32]	; (8009acc <ForwardReceivedMessage+0x38>)
 8009aaa:	5c9c      	ldrb	r4, [r3, r2]
	port =FindRoute(myID,dst);
 8009aac:	4b08      	ldr	r3, [pc, #32]	; (8009ad0 <ForwardReceivedMessage+0x3c>)
 8009aae:	7818      	ldrb	r0, [r3, #0]
 8009ab0:	0021      	movs	r1, r4
 8009ab2:	f7f9 ffad 	bl	8003a10 <FindRoute>
	SendMessageFromPort(port,0,dst,0,incomingPort);
 8009ab6:	9500      	str	r5, [sp, #0]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	0022      	movs	r2, r4
 8009abc:	2100      	movs	r1, #0
 8009abe:	f7ff fdcb 	bl	8009658 <SendMessageFromPort>
}
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	b003      	add	sp, #12
 8009ac6:	bd30      	pop	{r4, r5, pc}
 8009ac8:	20000ae5 	.word	0x20000ae5
 8009acc:	20000d7c 	.word	0x20000d7c
 8009ad0:	200010ea 	.word	0x200010ea

08009ad4 <BroadcastReceivedMessage>:
BOS_Status BroadcastReceivedMessage(uint8_t dstGroup,uint8_t incomingPort){
 8009ad4:	b500      	push	{lr}
 8009ad6:	b083      	sub	sp, #12
	AddBcastPayload = false;
 8009ad8:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <BroadcastReceivedMessage+0x38>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	701a      	strb	r2, [r3, #0]
	dstGroupID =dstGroup;
 8009ade:	4b0c      	ldr	r3, [pc, #48]	; (8009b10 <BroadcastReceivedMessage+0x3c>)
 8009ae0:	7018      	strb	r0, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009ae2:	28ff      	cmp	r0, #255	; 0xff
 8009ae4:	d009      	beq.n	8009afa <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0,0,BOS_MULTICAST,0,incomingPort);
 8009ae6:	9100      	str	r1, [sp, #0]
 8009ae8:	2300      	movs	r3, #0
 8009aea:	22fe      	movs	r2, #254	; 0xfe
 8009aec:	2100      	movs	r1, #0
 8009aee:	2000      	movs	r0, #0
 8009af0:	f7ff fdb2 	bl	8009658 <SendMessageFromPort>
}
 8009af4:	2000      	movs	r0, #0
 8009af6:	b003      	add	sp, #12
 8009af8:	bd00      	pop	{pc}
		SendMessageFromPort(0,0,BOS_BROADCAST,0,incomingPort);
 8009afa:	9100      	str	r1, [sp, #0]
 8009afc:	2300      	movs	r3, #0
 8009afe:	32ff      	adds	r2, #255	; 0xff
 8009b00:	2100      	movs	r1, #0
 8009b02:	2000      	movs	r0, #0
 8009b04:	f7ff fda8 	bl	8009658 <SendMessageFromPort>
 8009b08:	e7f4      	b.n	8009af4 <BroadcastReceivedMessage+0x20>
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	20000ae5 	.word	0x20000ae5
 8009b10:	20000045 	.word	0x20000045

08009b14 <BroadcastMessage>:
BOS_Status BroadcastMessage(uint8_t src,uint8_t dstGroup,uint16_t code,uint16_t numberOfParams){
 8009b14:	b530      	push	{r4, r5, lr}
 8009b16:	b083      	sub	sp, #12
 8009b18:	001c      	movs	r4, r3
	AddBcastPayload = true;
 8009b1a:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <BroadcastMessage+0x44>)
 8009b1c:	2501      	movs	r5, #1
 8009b1e:	701d      	strb	r5, [r3, #0]
	dstGroupID =dstGroup;
 8009b20:	4b0e      	ldr	r3, [pc, #56]	; (8009b5c <BroadcastMessage+0x48>)
 8009b22:	7019      	strb	r1, [r3, #0]
	if(dstGroup == BOS_BROADCAST)
 8009b24:	29ff      	cmp	r1, #255	; 0xff
 8009b26:	d00e      	beq.n	8009b46 <BroadcastMessage+0x32>
		SendMessageFromPort(0,src,BOS_MULTICAST,code,numberOfParams);
 8009b28:	9400      	str	r4, [sp, #0]
 8009b2a:	0013      	movs	r3, r2
 8009b2c:	22fe      	movs	r2, #254	; 0xfe
 8009b2e:	0001      	movs	r1, r0
 8009b30:	2000      	movs	r0, #0
 8009b32:	f7ff fd91 	bl	8009658 <SendMessageFromPort>
	memset(messageParams,0,numberOfParams);
 8009b36:	0022      	movs	r2, r4
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4809      	ldr	r0, [pc, #36]	; (8009b60 <BroadcastMessage+0x4c>)
 8009b3c:	f00a ff3c 	bl	80149b8 <memset>
}
 8009b40:	2000      	movs	r0, #0
 8009b42:	b003      	add	sp, #12
 8009b44:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0,src,BOS_BROADCAST,code,numberOfParams);
 8009b46:	9400      	str	r4, [sp, #0]
 8009b48:	0013      	movs	r3, r2
 8009b4a:	22ff      	movs	r2, #255	; 0xff
 8009b4c:	0001      	movs	r1, r0
 8009b4e:	2000      	movs	r0, #0
 8009b50:	f7ff fd82 	bl	8009658 <SendMessageFromPort>
 8009b54:	e7ef      	b.n	8009b36 <BroadcastMessage+0x22>
 8009b56:	46c0      	nop			; (mov r8, r8)
 8009b58:	20000ae5 	.word	0x20000ae5
 8009b5c:	20000045 	.word	0x20000045
 8009b60:	20000fac 	.word	0x20000fac

08009b64 <SendMessageToModule>:
BOS_Status SendMessageToModule(uint8_t dst,uint16_t code,uint16_t numberOfParams){
 8009b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b66:	b083      	sub	sp, #12
 8009b68:	0004      	movs	r4, r0
 8009b6a:	000e      	movs	r6, r1
 8009b6c:	0015      	movs	r5, r2
	if(dst != BOS_BROADCAST){
 8009b6e:	28ff      	cmp	r0, #255	; 0xff
 8009b70:	d012      	beq.n	8009b98 <SendMessageToModule+0x34>
		port =FindRoute(myID,dst);
 8009b72:	4f0d      	ldr	r7, [pc, #52]	; (8009ba8 <SendMessageToModule+0x44>)
 8009b74:	7838      	ldrb	r0, [r7, #0]
 8009b76:	0021      	movs	r1, r4
 8009b78:	f7f9 ff4a 	bl	8003a10 <FindRoute>
		SendMessageFromPort(port,myID,dst,code,numberOfParams);
 8009b7c:	7839      	ldrb	r1, [r7, #0]
 8009b7e:	9500      	str	r5, [sp, #0]
 8009b80:	0033      	movs	r3, r6
 8009b82:	0022      	movs	r2, r4
 8009b84:	f7ff fd68 	bl	8009658 <SendMessageFromPort>
		memset(messageParams,0,numberOfParams);
 8009b88:	002a      	movs	r2, r5
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	4807      	ldr	r0, [pc, #28]	; (8009bac <SendMessageToModule+0x48>)
 8009b8e:	f00a ff13 	bl	80149b8 <memset>
}
 8009b92:	2000      	movs	r0, #0
 8009b94:	b003      	add	sp, #12
 8009b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID,BOS_BROADCAST,code,numberOfParams);
 8009b98:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <SendMessageToModule+0x44>)
 8009b9a:	7818      	ldrb	r0, [r3, #0]
 8009b9c:	0013      	movs	r3, r2
 8009b9e:	000a      	movs	r2, r1
 8009ba0:	21ff      	movs	r1, #255	; 0xff
 8009ba2:	f7ff ffb7 	bl	8009b14 <BroadcastMessage>
 8009ba6:	e7f4      	b.n	8009b92 <SendMessageToModule+0x2e>
 8009ba8:	200010ea 	.word	0x200010ea
 8009bac:	20000fac 	.word	0x20000fac

08009bb0 <StartScastDMAStream>:
/*-----------------------------------------------------------*/

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
 or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
 */
BOS_Status StartScastDMAStream(uint8_t srcP,uint8_t srcM,uint8_t dstP,uint8_t dstM,uint8_t direction,uint32_t count,uint32_t timeout,bool stored){
 8009bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bb2:	46de      	mov	lr, fp
 8009bb4:	4657      	mov	r7, sl
 8009bb6:	464e      	mov	r6, r9
 8009bb8:	4645      	mov	r5, r8
 8009bba:	b5e0      	push	{r5, r6, r7, lr}
 8009bbc:	b091      	sub	sp, #68	; 0x44
 8009bbe:	900f      	str	r0, [sp, #60]	; 0x3c
 8009bc0:	000c      	movs	r4, r1
 8009bc2:	9106      	str	r1, [sp, #24]
 8009bc4:	0015      	movs	r5, r2
 8009bc6:	920e      	str	r2, [sp, #56]	; 0x38
 8009bc8:	001e      	movs	r6, r3
 8009bca:	ab1a      	add	r3, sp, #104	; 0x68
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	4698      	mov	r8, r3
 8009bd0:	ab1d      	add	r3, sp, #116	; 0x74
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	469a      	mov	sl, r3
	BOS_Status result =BOS_OK;
	uint8_t port =0, temp1 =0, temp2 =0;
	
	/* Is the source a different module? */
	if(srcM != myID){
 8009bd6:	4b5a      	ldr	r3, [pc, #360]	; (8009d40 <StartScastDMAStream+0x190>)
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	428b      	cmp	r3, r1
 8009bdc:	d11d      	bne.n	8009c1a <StartScastDMAStream+0x6a>
			}
			else{
				temp2 =FindRoute(route[i],route[i - 1]);
			}
			/* Message parameters*/
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009bde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009be0:	0e1b      	lsrs	r3, r3, #24
 8009be2:	9308      	str	r3, [sp, #32]
			messageParams[1] =(uint8_t )(count >> 16);
 8009be4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009be6:	0c1b      	lsrs	r3, r3, #16
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] =(uint8_t )(count >> 8);
 8009bec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bee:	0a1b      	lsrs	r3, r3, #8
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] =(uint8_t )count;
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009bf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009bf6:	0e1b      	lsrs	r3, r3, #24
 8009bf8:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009bfa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009bfc:	0c1b      	lsrs	r3, r3, #16
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009c02:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c04:	0a1b      	lsrs	r3, r3, #8
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	469b      	mov	fp, r3
 8009c0a:	4d4e      	ldr	r5, [pc, #312]	; (8009d44 <StartScastDMAStream+0x194>)
 8009c0c:	231a      	movs	r3, #26
 8009c0e:	4699      	mov	r9, r3
 8009c10:	44a9      	add	r9, r5
				temp2 =dstP;
 8009c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c14:	930d      	str	r3, [sp, #52]	; 0x34
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c16:	4c4c      	ldr	r4, [pc, #304]	; (8009d48 <StartScastDMAStream+0x198>)
 8009c18:	e05c      	b.n	8009cd4 <StartScastDMAStream+0x124>
		messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c1a:	4b4b      	ldr	r3, [pc, #300]	; (8009d48 <StartScastDMAStream+0x198>)
 8009c1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c1e:	0e12      	lsrs	r2, r2, #24
 8009c20:	701a      	strb	r2, [r3, #0]
		messageParams[1] =(uint8_t )(count >> 16);
 8009c22:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c24:	0c12      	lsrs	r2, r2, #16
 8009c26:	705a      	strb	r2, [r3, #1]
		messageParams[2] =(uint8_t )(count >> 8);
 8009c28:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c2a:	0a12      	lsrs	r2, r2, #8
 8009c2c:	709a      	strb	r2, [r3, #2]
		messageParams[3] =(uint8_t )count;
 8009c2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c30:	70da      	strb	r2, [r3, #3]
		messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c32:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c34:	0e12      	lsrs	r2, r2, #24
 8009c36:	711a      	strb	r2, [r3, #4]
		messageParams[5] =(uint8_t )(timeout >> 16);
 8009c38:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c3a:	0c12      	lsrs	r2, r2, #16
 8009c3c:	715a      	strb	r2, [r3, #5]
		messageParams[6] =(uint8_t )(timeout >> 8);
 8009c3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c40:	0a12      	lsrs	r2, r2, #8
 8009c42:	719a      	strb	r2, [r3, #6]
		messageParams[7] =(uint8_t )timeout;
 8009c44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c46:	71da      	strb	r2, [r3, #7]
		messageParams[8] =direction; /* Stream direction */
 8009c48:	4642      	mov	r2, r8
 8009c4a:	721a      	strb	r2, [r3, #8]
		messageParams[9] =srcP; /* Source port */
 8009c4c:	7258      	strb	r0, [r3, #9]
		messageParams[10] =dstM; /* destination module */
 8009c4e:	729e      	strb	r6, [r3, #10]
		messageParams[11] =dstP; /* destination port */
 8009c50:	72dd      	strb	r5, [r3, #11]
		messageParams[12] =stored; /* EEPROM storage */
 8009c52:	4652      	mov	r2, sl
 8009c54:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM,CODE_DMA_SCAST_STREAM,13);
 8009c56:	220d      	movs	r2, #13
 8009c58:	211c      	movs	r1, #28
 8009c5a:	0020      	movs	r0, r4
 8009c5c:	f7ff ff82 	bl	8009b64 <SendMessageToModule>
	if(stored){
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
	}
	
	return result;
}
 8009c60:	2000      	movs	r0, #0
 8009c62:	b011      	add	sp, #68	; 0x44
 8009c64:	bc3c      	pop	{r2, r3, r4, r5}
 8009c66:	4690      	mov	r8, r2
 8009c68:	4699      	mov	r9, r3
 8009c6a:	46a2      	mov	sl, r4
 8009c6c:	46ab      	mov	fp, r5
 8009c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp1 =FindRoute(route[i],srcM);
 8009c70:	9906      	ldr	r1, [sp, #24]
 8009c72:	f7f9 fecd 	bl	8003a10 <FindRoute>
 8009c76:	9007      	str	r0, [sp, #28]
			FindRoute(srcM,dstM);
 8009c78:	0031      	movs	r1, r6
 8009c7a:	9806      	ldr	r0, [sp, #24]
 8009c7c:	f7f9 fec8 	bl	8003a10 <FindRoute>
			if(route[i] == dstM){
 8009c80:	7878      	ldrb	r0, [r7, #1]
				temp2 =dstP;
 8009c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
			if(route[i] == dstM){
 8009c84:	42b0      	cmp	r0, r6
 8009c86:	d134      	bne.n	8009cf2 <StartScastDMAStream+0x142>
			messageParams[0] =(uint8_t )(count >> 24); /* Count */
 8009c88:	9a08      	ldr	r2, [sp, #32]
 8009c8a:	7022      	strb	r2, [r4, #0]
			messageParams[1] =(uint8_t )(count >> 16);
 8009c8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c8e:	7062      	strb	r2, [r4, #1]
			messageParams[2] =(uint8_t )(count >> 8);
 8009c90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c92:	70a2      	strb	r2, [r4, #2]
			messageParams[3] =(uint8_t )count;
 8009c94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009c96:	70e2      	strb	r2, [r4, #3]
			messageParams[4] =(uint8_t )(timeout >> 24); /* Timeout */
 8009c98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c9a:	7122      	strb	r2, [r4, #4]
			messageParams[5] =(uint8_t )(timeout >> 16);
 8009c9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c9e:	7162      	strb	r2, [r4, #5]
			messageParams[6] =(uint8_t )(timeout >> 8);
 8009ca0:	465a      	mov	r2, fp
 8009ca2:	71a2      	strb	r2, [r4, #6]
			messageParams[7] =(uint8_t )timeout;
 8009ca4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009ca6:	71e2      	strb	r2, [r4, #7]
			messageParams[8] =direction; /* Stream direction */
 8009ca8:	4642      	mov	r2, r8
 8009caa:	7222      	strb	r2, [r4, #8]
			messageParams[9] =temp1; /* Source port */
 8009cac:	9a07      	ldr	r2, [sp, #28]
 8009cae:	7262      	strb	r2, [r4, #9]
			messageParams[10] =temp2; /* destination port */
 8009cb0:	72a3      	strb	r3, [r4, #10]
			messageParams[11] =stored; /* EEPROM storage */
 8009cb2:	4653      	mov	r3, sl
 8009cb4:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM,dstM);
 8009cb6:	0031      	movs	r1, r6
 8009cb8:	9806      	ldr	r0, [sp, #24]
 8009cba:	f7f9 fea9 	bl	8003a10 <FindRoute>
			SendMessageToModule(route[i],CODE_DMA_CHANNEL,12);
 8009cbe:	7878      	ldrb	r0, [r7, #1]
 8009cc0:	220c      	movs	r2, #12
 8009cc2:	211b      	movs	r1, #27
 8009cc4:	f7ff ff4e 	bl	8009b64 <SendMessageToModule>
			osDelay(10);
 8009cc8:	200a      	movs	r0, #10
 8009cca:	f004 ff1c 	bl	800eb06 <osDelay>
 8009cce:	3501      	adds	r5, #1
	for(uint8_t i =0; i < sizeof(route); i++){
 8009cd0:	454d      	cmp	r5, r9
 8009cd2:	d013      	beq.n	8009cfc <StartScastDMAStream+0x14c>
		FindRoute(srcM,dstM);
 8009cd4:	0031      	movs	r1, r6
 8009cd6:	9806      	ldr	r0, [sp, #24]
 8009cd8:	f7f9 fe9a 	bl	8003a10 <FindRoute>
 8009cdc:	002f      	movs	r7, r5
		if(route[i]){
 8009cde:	7868      	ldrb	r0, [r5, #1]
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d0f4      	beq.n	8009cce <StartScastDMAStream+0x11e>
			if(route[i + 1]){
 8009ce4:	78a9      	ldrb	r1, [r5, #2]
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	d0c2      	beq.n	8009c70 <StartScastDMAStream+0xc0>
				temp1 =FindRoute(route[i],route[i + 1]);
 8009cea:	f7f9 fe91 	bl	8003a10 <FindRoute>
 8009cee:	9007      	str	r0, [sp, #28]
 8009cf0:	e7c2      	b.n	8009c78 <StartScastDMAStream+0xc8>
				temp2 =FindRoute(route[i],route[i - 1]);
 8009cf2:	7839      	ldrb	r1, [r7, #0]
 8009cf4:	f7f9 fe8c 	bl	8003a10 <FindRoute>
 8009cf8:	0003      	movs	r3, r0
 8009cfa:	e7c5      	b.n	8009c88 <StartScastDMAStream+0xd8>
	if(srcM == dstM)
 8009cfc:	9806      	ldr	r0, [sp, #24]
 8009cfe:	42b0      	cmp	r0, r6
 8009d00:	d118      	bne.n	8009d34 <StartScastDMAStream+0x184>
	SetupDMAStreams(direction,count,timeout,srcP,port);
 8009d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d04:	9300      	str	r3, [sp, #0]
 8009d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d0a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d0c:	4640      	mov	r0, r8
 8009d0e:	f7ff fb81 	bl	8009414 <SetupDMAStreams>
	if(stored){
 8009d12:	4653      	mov	r3, sl
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d0a3      	beq.n	8009c60 <StartScastDMAStream+0xb0>
		SaveEEstreams(direction,count,timeout,srcP,port,0,0,0,0);
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	9303      	str	r3, [sp, #12]
 8009d1e:	9302      	str	r3, [sp, #8]
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009d2a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	f7f9 fbeb 	bl	8003508 <SaveEEstreams>
 8009d32:	e795      	b.n	8009c60 <StartScastDMAStream+0xb0>
		port =FindRoute(srcM,dstM);
 8009d34:	0031      	movs	r1, r6
 8009d36:	f7f9 fe6b 	bl	8003a10 <FindRoute>
 8009d3a:	900e      	str	r0, [sp, #56]	; 0x38
 8009d3c:	e7e1      	b.n	8009d02 <StartScastDMAStream+0x152>
 8009d3e:	46c0      	nop			; (mov r8, r8)
 8009d40:	200010ea 	.word	0x200010ea
 8009d44:	20006f67 	.word	0x20006f67
 8009d48:	20000fac 	.word	0x20000fac

08009d4c <BackEndTask>:
/* -----------------------------------------------------------------------
 |												 Private Functions	 		|
 -----------------------------------------------------------------------
 */
/* BackEndTask function */
void BackEndTask(void *argument){
 8009d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d4e:	46de      	mov	lr, fp
 8009d50:	4657      	mov	r7, sl
 8009d52:	464e      	mov	r6, r9
 8009d54:	4645      	mov	r5, r8
 8009d56:	b5e0      	push	{r5, r6, r7, lr}
 8009d58:	b085      	sub	sp, #20
						/* A.5.1. Copy the packet to message buffer */
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
						}
						else{ // Message wraps around
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 8009d5a:	4bd2      	ldr	r3, [pc, #840]	; (800a0a4 <BackEndTask+0x358>)
 8009d5c:	3b70      	subs	r3, #112	; 0x70
 8009d5e:	9302      	str	r3, [sp, #8]
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009d60:	4bd0      	ldr	r3, [pc, #832]	; (800a0a4 <BackEndTask+0x358>)
 8009d62:	3b70      	subs	r3, #112	; 0x70
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	e201      	b.n	800a16c <BackEndTask+0x420>
 8009d68:	1eab      	subs	r3, r5, #2
 8009d6a:	4699      	mov	r9, r3
 8009d6c:	4bce      	ldr	r3, [pc, #824]	; (800a0a8 <BackEndTask+0x35c>)
 8009d6e:	444b      	add	r3, r9
 8009d70:	469a      	mov	sl, r3
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009d72:	7819      	ldrb	r1, [r3, #0]
 8009d74:	29bf      	cmp	r1, #191	; 0xbf
 8009d76:	dc17      	bgt.n	8009da8 <BackEndTask+0x5c>
							if(BOS.disableCLI == false){
 8009d78:	4bcc      	ldr	r3, [pc, #816]	; (800a0ac <BackEndTask+0x360>)
 8009d7a:	7e9e      	ldrb	r6, [r3, #26]
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009d7c:	000b      	movs	r3, r1
							if(BOS.disableCLI == false){
 8009d7e:	2000      	movs	r0, #0
 8009d80:	e004      	b.n	8009d8c <BackEndTask+0x40>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009d82:	2bbf      	cmp	r3, #191	; 0xbf
 8009d84:	d02c      	beq.n	8009de0 <BackEndTask+0x94>
				for(int i =UARTRxBufIndex[port - 1]; i < MSG_RX_BUF_SIZE; i++){
 8009d86:	3301      	adds	r3, #1
 8009d88:	2bc0      	cmp	r3, #192	; 0xc0
 8009d8a:	d00a      	beq.n	8009da2 <BackEndTask+0x56>
					if(i < (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][i] == 'H' && UARTRxBuf[port - 1][i + 1] == 'Z'){
 8009d8c:	2bbe      	cmp	r3, #190	; 0xbe
 8009d8e:	dcf8      	bgt.n	8009d82 <BackEndTask+0x36>
 8009d90:	5ce2      	ldrb	r2, [r4, r3]
 8009d92:	2a48      	cmp	r2, #72	; 0x48
 8009d94:	d1f5      	bne.n	8009d82 <BackEndTask+0x36>
 8009d96:	18e2      	adds	r2, r4, r3
 8009d98:	7852      	ldrb	r2, [r2, #1]
 8009d9a:	2a5a      	cmp	r2, #90	; 0x5a
 8009d9c:	d1f1      	bne.n	8009d82 <BackEndTask+0x36>
						packetStart =i;
 8009d9e:	4ac4      	ldr	r2, [pc, #784]	; (800a0b0 <BackEndTask+0x364>)
 8009da0:	6013      	str	r3, [r2, #0]
				if(emptyBuffer){
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d000      	beq.n	8009da8 <BackEndTask+0x5c>
 8009da6:	e1c1      	b.n	800a12c <BackEndTask+0x3e0>
				totalnumberofrecevedmesg++;
 8009da8:	4ac2      	ldr	r2, [pc, #776]	; (800a0b4 <BackEndTask+0x368>)
 8009daa:	6813      	ldr	r3, [r2, #0]
 8009dac:	3301      	adds	r3, #1
 8009dae:	6013      	str	r3, [r2, #0]
				if(packetStart == MSG_RX_BUF_SIZE - 3){
 8009db0:	4bbf      	ldr	r3, [pc, #764]	; (800a0b0 <BackEndTask+0x364>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2bbd      	cmp	r3, #189	; 0xbd
 8009db6:	d054      	beq.n	8009e62 <BackEndTask+0x116>
				else if(packetStart == MSG_RX_BUF_SIZE - 2){
 8009db8:	2bbe      	cmp	r3, #190	; 0xbe
 8009dba:	d100      	bne.n	8009dbe <BackEndTask+0x72>
 8009dbc:	e0bb      	b.n	8009f36 <BackEndTask+0x1ea>
				else if(packetStart == MSG_RX_BUF_SIZE - 1){
 8009dbe:	2bbf      	cmp	r3, #191	; 0xbf
 8009dc0:	d100      	bne.n	8009dc4 <BackEndTask+0x78>
 8009dc2:	e0bf      	b.n	8009f44 <BackEndTask+0x1f8>
					packetLength =UARTRxBuf[port - 1][packetStart + 2];
 8009dc4:	464a      	mov	r2, r9
 8009dc6:	0052      	lsls	r2, r2, #1
 8009dc8:	444a      	add	r2, r9
 8009dca:	0191      	lsls	r1, r2, #6
 8009dcc:	4aba      	ldr	r2, [pc, #744]	; (800a0b8 <BackEndTask+0x36c>)
 8009dce:	1852      	adds	r2, r2, r1
 8009dd0:	18d2      	adds	r2, r2, r3
 8009dd2:	7891      	ldrb	r1, [r2, #2]
 8009dd4:	4ab9      	ldr	r2, [pc, #740]	; (800a0bc <BackEndTask+0x370>)
 8009dd6:	6011      	str	r1, [r2, #0]
					parseStart =packetStart + 3;
 8009dd8:	3303      	adds	r3, #3
 8009dda:	4ab9      	ldr	r2, [pc, #740]	; (800a0c0 <BackEndTask+0x374>)
 8009ddc:	6013      	str	r3, [r2, #0]
 8009dde:	e048      	b.n	8009e72 <BackEndTask+0x126>
 8009de0:	46a4      	mov	ip, r4
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009de2:	0023      	movs	r3, r4
 8009de4:	33bf      	adds	r3, #191	; 0xbf
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b48      	cmp	r3, #72	; 0x48
 8009dea:	d004      	beq.n	8009df6 <BackEndTask+0xaa>
							if(BOS.disableCLI == false){
 8009dec:	2e00      	cmp	r6, #0
 8009dee:	d000      	beq.n	8009df2 <BackEndTask+0xa6>
 8009df0:	e19c      	b.n	800a12c <BackEndTask+0x3e0>
 8009df2:	4660      	mov	r0, ip
 8009df4:	e00c      	b.n	8009e10 <BackEndTask+0xc4>
					else if(i == (MSG_RX_BUF_SIZE - 1) && UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1] == 'H' && UARTRxBuf[port - 1][0] == 'Z') // HZ wrap around
 8009df6:	7823      	ldrb	r3, [r4, #0]
 8009df8:	2b5a      	cmp	r3, #90	; 0x5a
 8009dfa:	d1f7      	bne.n	8009dec <BackEndTask+0xa0>
						packetStart = MSG_RX_BUF_SIZE - 1;
 8009dfc:	4bac      	ldr	r3, [pc, #688]	; (800a0b0 <BackEndTask+0x364>)
 8009dfe:	22bf      	movs	r2, #191	; 0xbf
 8009e00:	601a      	str	r2, [r3, #0]
						break;
 8009e02:	e7ce      	b.n	8009da2 <BackEndTask+0x56>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e04:	29bf      	cmp	r1, #191	; 0xbf
 8009e06:	d027      	beq.n	8009e58 <BackEndTask+0x10c>
								for(int j =UARTRxBufIndex[port - 1]; j < MSG_RX_BUF_SIZE; j++){
 8009e08:	3101      	adds	r1, #1
 8009e0a:	29c0      	cmp	r1, #192	; 0xc0
 8009e0c:	d100      	bne.n	8009e10 <BackEndTask+0xc4>
 8009e0e:	e18d      	b.n	800a12c <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e10:	5c43      	ldrb	r3, [r0, r1]
 8009e12:	2b0d      	cmp	r3, #13
 8009e14:	d1f8      	bne.n	8009e08 <BackEndTask+0xbc>
 8009e16:	29be      	cmp	r1, #190	; 0xbe
 8009e18:	dcf4      	bgt.n	8009e04 <BackEndTask+0xb8>
 8009e1a:	1842      	adds	r2, r0, r1
 8009e1c:	7853      	ldrb	r3, [r2, #1]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1f0      	bne.n	8009e04 <BackEndTask+0xb8>
										UARTRxBuf[port - 1][j] =0;
 8009e22:	464b      	mov	r3, r9
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	444b      	add	r3, r9
 8009e28:	019b      	lsls	r3, r3, #6
 8009e2a:	4aa3      	ldr	r2, [pc, #652]	; (800a0b8 <BackEndTask+0x36c>)
 8009e2c:	18d3      	adds	r3, r2, r3
 8009e2e:	2200      	movs	r2, #0
 8009e30:	545a      	strb	r2, [r3, r1]
										UARTRxBufIndex[port - 1] =j + 1; // Advance buffer index
 8009e32:	3101      	adds	r1, #1
 8009e34:	4653      	mov	r3, sl
 8009e36:	7019      	strb	r1, [r3, #0]
										portStatus[PcPort] =FREE; // Free the previous CLI port
 8009e38:	4ba2      	ldr	r3, [pc, #648]	; (800a0c4 <BackEndTask+0x378>)
 8009e3a:	7819      	ldrb	r1, [r3, #0]
 8009e3c:	48a2      	ldr	r0, [pc, #648]	; (800a0c8 <BackEndTask+0x37c>)
 8009e3e:	5442      	strb	r2, [r0, r1]
										portStatus[port] =CLI; // Continue the CLI session on this port
 8009e40:	3203      	adds	r2, #3
 8009e42:	4641      	mov	r1, r8
 8009e44:	700a      	strb	r2, [r1, #0]
										PcPort =port;
 8009e46:	701f      	strb	r7, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);
 8009e48:	4ba0      	ldr	r3, [pc, #640]	; (800a0cc <BackEndTask+0x380>)
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	3a01      	subs	r2, #1
 8009e50:	2100      	movs	r1, #0
 8009e52:	f006 fa77 	bl	8010344 <xTaskGenericNotify>
										break;
 8009e56:	e169      	b.n	800a12c <BackEndTask+0x3e0>
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e58:	7803      	ldrb	r3, [r0, #0]
							emptyBuffer = true;
 8009e5a:	2001      	movs	r0, #1
									if(UARTRxBuf[port - 1][j] == 0xD && ((j < MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][j + 1] == 0) || (j == MSG_RX_BUF_SIZE - 1 && UARTRxBuf[port - 1][0] == 0))){
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1a0      	bne.n	8009da2 <BackEndTask+0x56>
 8009e60:	e7df      	b.n	8009e22 <BackEndTask+0xd6>
					packetLength =UARTRxBuf[port - 1][MSG_RX_BUF_SIZE - 1];
 8009e62:	0023      	movs	r3, r4
 8009e64:	33bf      	adds	r3, #191	; 0xbf
 8009e66:	781a      	ldrb	r2, [r3, #0]
 8009e68:	4b94      	ldr	r3, [pc, #592]	; (800a0bc <BackEndTask+0x370>)
 8009e6a:	601a      	str	r2, [r3, #0]
					parseStart =0;
 8009e6c:	4b94      	ldr	r3, [pc, #592]	; (800a0c0 <BackEndTask+0x374>)
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 8009e72:	4b92      	ldr	r3, [pc, #584]	; (800a0bc <BackEndTask+0x370>)
 8009e74:	681e      	ldr	r6, [r3, #0]
 8009e76:	3603      	adds	r6, #3
 8009e78:	4b8d      	ldr	r3, [pc, #564]	; (800a0b0 <BackEndTask+0x364>)
 8009e7a:	6819      	ldr	r1, [r3, #0]
 8009e7c:	1873      	adds	r3, r6, r1
				if(packetEnd > MSG_RX_BUF_SIZE - 1) // wrap-around
 8009e7e:	2bbf      	cmp	r3, #191	; 0xbf
 8009e80:	dc00      	bgt.n	8009e84 <BackEndTask+0x138>
 8009e82:	e179      	b.n	800a178 <BackEndTask+0x42c>
					packetEnd -= MSG_RX_BUF_SIZE;
 8009e84:	3bc0      	subs	r3, #192	; 0xc0
 8009e86:	4a92      	ldr	r2, [pc, #584]	; (800a0d0 <BackEndTask+0x384>)
 8009e88:	6013      	str	r3, [r2, #0]
				if(packetStart != packetEnd) // Non-empty packet
 8009e8a:	4b91      	ldr	r3, [pc, #580]	; (800a0d0 <BackEndTask+0x384>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4299      	cmp	r1, r3
 8009e90:	d100      	bne.n	8009e94 <BackEndTask+0x148>
 8009e92:	e129      	b.n	800a0e8 <BackEndTask+0x39c>
					if(packetStart < packetEnd){
 8009e94:	da5d      	bge.n	8009f52 <BackEndTask+0x206>
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],packetLength + 3);
 8009e96:	006b      	lsls	r3, r5, #1
 8009e98:	195b      	adds	r3, r3, r5
 8009e9a:	019b      	lsls	r3, r3, #6
 8009e9c:	3b81      	subs	r3, #129	; 0x81
 8009e9e:	3bff      	subs	r3, #255	; 0xff
 8009ea0:	1859      	adds	r1, r3, r1
 8009ea2:	4b85      	ldr	r3, [pc, #532]	; (800a0b8 <BackEndTask+0x36c>)
 8009ea4:	18c9      	adds	r1, r1, r3
 8009ea6:	0032      	movs	r2, r6
 8009ea8:	488a      	ldr	r0, [pc, #552]	; (800a0d4 <BackEndTask+0x388>)
 8009eaa:	f00a fd7c 	bl	80149a6 <memcpy>
					crc8 =CalculateCRC8(crcBuffer,(packetLength + 3));
 8009eae:	4b83      	ldr	r3, [pc, #524]	; (800a0bc <BackEndTask+0x370>)
 8009eb0:	6819      	ldr	r1, [r3, #0]
 8009eb2:	3103      	adds	r1, #3
 8009eb4:	b289      	uxth	r1, r1
 8009eb6:	4e87      	ldr	r6, [pc, #540]	; (800a0d4 <BackEndTask+0x388>)
 8009eb8:	0030      	movs	r0, r6
 8009eba:	f003 fe33 	bl	800db24 <CalculateCRC8>
 8009ebe:	9001      	str	r0, [sp, #4]
					memset(crcBuffer,0,sizeof(crcBuffer));
 8009ec0:	2238      	movs	r2, #56	; 0x38
 8009ec2:	2100      	movs	r1, #0
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	f00a fd77 	bl	80149b8 <memset>
					if(crc8 == UARTRxBuf[port - 1][packetEnd]){
 8009eca:	4b81      	ldr	r3, [pc, #516]	; (800a0d0 <BackEndTask+0x384>)
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	464b      	mov	r3, r9
 8009ed0:	005b      	lsls	r3, r3, #1
 8009ed2:	444b      	add	r3, r9
 8009ed4:	019b      	lsls	r3, r3, #6
 8009ed6:	4978      	ldr	r1, [pc, #480]	; (800a0b8 <BackEndTask+0x36c>)
 8009ed8:	18cb      	adds	r3, r1, r3
 8009eda:	5c9b      	ldrb	r3, [r3, r2]
 8009edc:	9901      	ldr	r1, [sp, #4]
 8009ede:	428b      	cmp	r3, r1
 8009ee0:	d04f      	beq.n	8009f82 <BackEndTask+0x236>
				}

				/* A.6. If you are still here, then this packet is rejected TODO do something */

				/* A.6.1 Clear packet location in the circular buffer */
				if(packetStart < packetEnd){
 8009ee2:	4b73      	ldr	r3, [pc, #460]	; (800a0b0 <BackEndTask+0x364>)
 8009ee4:	6819      	ldr	r1, [r3, #0]
 8009ee6:	428a      	cmp	r2, r1
 8009ee8:	dc00      	bgt.n	8009eec <BackEndTask+0x1a0>
 8009eea:	e0fd      	b.n	800a0e8 <BackEndTask+0x39c>
					memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009eec:	4b73      	ldr	r3, [pc, #460]	; (800a0bc <BackEndTask+0x370>)
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	3204      	adds	r2, #4
 8009ef2:	0068      	lsls	r0, r5, #1
 8009ef4:	1940      	adds	r0, r0, r5
 8009ef6:	0180      	lsls	r0, r0, #6
 8009ef8:	3881      	subs	r0, #129	; 0x81
 8009efa:	38ff      	subs	r0, #255	; 0xff
 8009efc:	1841      	adds	r1, r0, r1
 8009efe:	486e      	ldr	r0, [pc, #440]	; (800a0b8 <BackEndTask+0x36c>)
 8009f00:	1808      	adds	r0, r1, r0
 8009f02:	2100      	movs	r1, #0
 8009f04:	f00a fd58 	bl	80149b8 <memset>
					MSG_RX_BUF_SIZE - packetStart);
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
				}

				/* A.6.2 Advance buffer index */
				if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009f08:	4b71      	ldr	r3, [pc, #452]	; (800a0d0 <BackEndTask+0x384>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2bbf      	cmp	r3, #191	; 0xbf
 8009f0e:	d100      	bne.n	8009f12 <BackEndTask+0x1c6>
 8009f10:	e101      	b.n	800a116 <BackEndTask+0x3ca>
					UARTRxBufIndex[port - 1] =0;
				else{
					UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009f12:	3301      	adds	r3, #1
 8009f14:	4652      	mov	r2, sl
 8009f16:	7013      	strb	r3, [r2, #0]
				}
				SendMessageToModule(cMessage[port - 1][1], MSG_rejected, 0);
 8009f18:	00eb      	lsls	r3, r5, #3
 8009f1a:	1b5b      	subs	r3, r3, r5
 8009f1c:	00db      	lsls	r3, r3, #3
 8009f1e:	3b6f      	subs	r3, #111	; 0x6f
 8009f20:	4a60      	ldr	r2, [pc, #384]	; (800a0a4 <BackEndTask+0x358>)
 8009f22:	5cd0      	ldrb	r0, [r2, r3]
 8009f24:	2200      	movs	r2, #0
 8009f26:	212d      	movs	r1, #45	; 0x2d
 8009f28:	f7ff fe1c 	bl	8009b64 <SendMessageToModule>
				++rejectedMsg;
 8009f2c:	4a6a      	ldr	r2, [pc, #424]	; (800a0d8 <BackEndTask+0x38c>)
 8009f2e:	8813      	ldrh	r3, [r2, #0]
 8009f30:	3301      	adds	r3, #1
 8009f32:	8013      	strh	r3, [r2, #0]
 8009f34:	e107      	b.n	800a146 <BackEndTask+0x3fa>
					packetLength =UARTRxBuf[port - 1][0];
 8009f36:	7822      	ldrb	r2, [r4, #0]
 8009f38:	4b60      	ldr	r3, [pc, #384]	; (800a0bc <BackEndTask+0x370>)
 8009f3a:	601a      	str	r2, [r3, #0]
					parseStart =1;
 8009f3c:	4b60      	ldr	r3, [pc, #384]	; (800a0c0 <BackEndTask+0x374>)
 8009f3e:	2201      	movs	r2, #1
 8009f40:	601a      	str	r2, [r3, #0]
 8009f42:	e796      	b.n	8009e72 <BackEndTask+0x126>
					packetLength =UARTRxBuf[port - 1][1];
 8009f44:	7862      	ldrb	r2, [r4, #1]
 8009f46:	4b5d      	ldr	r3, [pc, #372]	; (800a0bc <BackEndTask+0x370>)
 8009f48:	601a      	str	r2, [r3, #0]
					parseStart =2;
 8009f4a:	4b5d      	ldr	r3, [pc, #372]	; (800a0c0 <BackEndTask+0x374>)
 8009f4c:	2202      	movs	r2, #2
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	e78f      	b.n	8009e72 <BackEndTask+0x126>
						MSG_RX_BUF_SIZE - packetStart);
 8009f52:	22c0      	movs	r2, #192	; 0xc0
 8009f54:	1a52      	subs	r2, r2, r1
						memcpy(crcBuffer,&UARTRxBuf[port - 1][packetStart],
 8009f56:	006b      	lsls	r3, r5, #1
 8009f58:	195b      	adds	r3, r3, r5
 8009f5a:	019b      	lsls	r3, r3, #6
 8009f5c:	3b81      	subs	r3, #129	; 0x81
 8009f5e:	3bff      	subs	r3, #255	; 0xff
 8009f60:	1859      	adds	r1, r3, r1
 8009f62:	4b55      	ldr	r3, [pc, #340]	; (800a0b8 <BackEndTask+0x36c>)
 8009f64:	18c9      	adds	r1, r1, r3
 8009f66:	9201      	str	r2, [sp, #4]
 8009f68:	485a      	ldr	r0, [pc, #360]	; (800a0d4 <BackEndTask+0x388>)
 8009f6a:	f00a fd1c 	bl	80149a6 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE - packetStart],&UARTRxBuf[port - 1][0],(packetLength + 3) - (MSG_RX_BUF_SIZE - packetStart));
 8009f6e:	4959      	ldr	r1, [pc, #356]	; (800a0d4 <BackEndTask+0x388>)
 8009f70:	9b01      	ldr	r3, [sp, #4]
 8009f72:	469c      	mov	ip, r3
 8009f74:	4461      	add	r1, ip
 8009f76:	0008      	movs	r0, r1
 8009f78:	1af2      	subs	r2, r6, r3
 8009f7a:	0021      	movs	r1, r4
 8009f7c:	f00a fd13 	bl	80149a6 <memcpy>
 8009f80:	e795      	b.n	8009eae <BackEndTask+0x162>
						portStatus[port] =MSG;
 8009f82:	2301      	movs	r3, #1
 8009f84:	4642      	mov	r2, r8
 8009f86:	7013      	strb	r3, [r2, #0]
						messageLength[port - 1] =packetLength;
 8009f88:	4b4c      	ldr	r3, [pc, #304]	; (800a0bc <BackEndTask+0x370>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4698      	mov	r8, r3
 8009f8e:	1eab      	subs	r3, r5, #2
 8009f90:	4a52      	ldr	r2, [pc, #328]	; (800a0dc <BackEndTask+0x390>)
 8009f92:	4641      	mov	r1, r8
 8009f94:	54d1      	strb	r1, [r2, r3]
						if((packetLength) <= (MSG_RX_BUF_SIZE - parseStart - 1)){
 8009f96:	4b4a      	ldr	r3, [pc, #296]	; (800a0c0 <BackEndTask+0x374>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	22bf      	movs	r2, #191	; 0xbf
 8009f9c:	1ad2      	subs	r2, r2, r3
 8009f9e:	4590      	cmp	r8, r2
 8009fa0:	dc41      	bgt.n	800a026 <BackEndTask+0x2da>
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],packetLength);
 8009fa2:	00e8      	lsls	r0, r5, #3
 8009fa4:	1b40      	subs	r0, r0, r5
 8009fa6:	00c0      	lsls	r0, r0, #3
 8009fa8:	9a03      	ldr	r2, [sp, #12]
 8009faa:	4694      	mov	ip, r2
 8009fac:	4460      	add	r0, ip
 8009fae:	0069      	lsls	r1, r5, #1
 8009fb0:	1949      	adds	r1, r1, r5
 8009fb2:	0189      	lsls	r1, r1, #6
 8009fb4:	3981      	subs	r1, #129	; 0x81
 8009fb6:	39ff      	subs	r1, #255	; 0xff
 8009fb8:	18c9      	adds	r1, r1, r3
 8009fba:	4b3f      	ldr	r3, [pc, #252]	; (800a0b8 <BackEndTask+0x36c>)
 8009fbc:	18c9      	adds	r1, r1, r3
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	f00a fcf1 	bl	80149a6 <memcpy>
						if(packetStart < packetEnd){
 8009fc4:	4b3a      	ldr	r3, [pc, #232]	; (800a0b0 <BackEndTask+0x364>)
 8009fc6:	6819      	ldr	r1, [r3, #0]
 8009fc8:	4b41      	ldr	r3, [pc, #260]	; (800a0d0 <BackEndTask+0x384>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4299      	cmp	r1, r3
 8009fce:	da4a      	bge.n	800a066 <BackEndTask+0x31a>
							memset(&UARTRxBuf[port - 1][packetStart],0,(packetLength) + 4);
 8009fd0:	4b3a      	ldr	r3, [pc, #232]	; (800a0bc <BackEndTask+0x370>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	3204      	adds	r2, #4
 8009fd6:	0068      	lsls	r0, r5, #1
 8009fd8:	1940      	adds	r0, r0, r5
 8009fda:	0180      	lsls	r0, r0, #6
 8009fdc:	3881      	subs	r0, #129	; 0x81
 8009fde:	38ff      	subs	r0, #255	; 0xff
 8009fe0:	1840      	adds	r0, r0, r1
 8009fe2:	4b35      	ldr	r3, [pc, #212]	; (800a0b8 <BackEndTask+0x36c>)
 8009fe4:	18c0      	adds	r0, r0, r3
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	f00a fce6 	bl	80149b8 <memset>
						if(packetEnd == MSG_RX_BUF_SIZE - 1)
 8009fec:	4b38      	ldr	r3, [pc, #224]	; (800a0d0 <BackEndTask+0x384>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2bbf      	cmp	r3, #191	; 0xbf
 8009ff2:	d04f      	beq.n	800a094 <BackEndTask+0x348>
							UARTRxBufIndex[port - 1] =(packetEnd + 1); // Set buffer pointer after the CRC byte
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	4652      	mov	r2, sl
 8009ff8:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 8009ffa:	4a39      	ldr	r2, [pc, #228]	; (800a0e0 <BackEndTask+0x394>)
 8009ffc:	8813      	ldrh	r3, [r2, #0]
 8009ffe:	3301      	adds	r3, #1
 800a000:	8013      	strh	r3, [r2, #0]
						if(cMessage[port - 1][0] == myID || cMessage[port - 1][0] == BOS_BROADCAST || cMessage[port - 1][0] == BOS_MULTICAST)
 800a002:	00eb      	lsls	r3, r5, #3
 800a004:	1b5b      	subs	r3, r3, r5
 800a006:	00db      	lsls	r3, r3, #3
 800a008:	3b70      	subs	r3, #112	; 0x70
 800a00a:	4a26      	ldr	r2, [pc, #152]	; (800a0a4 <BackEndTask+0x358>)
 800a00c:	5cd3      	ldrb	r3, [r2, r3]
 800a00e:	4a35      	ldr	r2, [pc, #212]	; (800a0e4 <BackEndTask+0x398>)
 800a010:	7812      	ldrb	r2, [r2, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d003      	beq.n	800a01e <BackEndTask+0x2d2>
 800a016:	3302      	adds	r3, #2
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d83e      	bhi.n	800a09c <BackEndTask+0x350>
							NotifyMessagingTask(port);
 800a01e:	0038      	movs	r0, r7
 800a020:	f7ff fad4 	bl	80095cc <NotifyMessagingTask>
 800a024:	e082      	b.n	800a12c <BackEndTask+0x3e0>
 800a026:	00ee      	lsls	r6, r5, #3
 800a028:	1b76      	subs	r6, r6, r5
 800a02a:	00f6      	lsls	r6, r6, #3
							MSG_RX_BUF_SIZE - parseStart);
 800a02c:	22c0      	movs	r2, #192	; 0xc0
 800a02e:	1ad2      	subs	r2, r2, r3
 800a030:	4691      	mov	r9, r2
							memcpy(&cMessage[port - 1][0],&UARTRxBuf[port - 1][parseStart],
 800a032:	9a02      	ldr	r2, [sp, #8]
 800a034:	1990      	adds	r0, r2, r6
 800a036:	0069      	lsls	r1, r5, #1
 800a038:	1949      	adds	r1, r1, r5
 800a03a:	0189      	lsls	r1, r1, #6
 800a03c:	3981      	subs	r1, #129	; 0x81
 800a03e:	39ff      	subs	r1, #255	; 0xff
 800a040:	18c9      	adds	r1, r1, r3
 800a042:	4b1d      	ldr	r3, [pc, #116]	; (800a0b8 <BackEndTask+0x36c>)
 800a044:	18c9      	adds	r1, r1, r3
 800a046:	464a      	mov	r2, r9
 800a048:	f00a fcad 	bl	80149a6 <memcpy>
							memcpy(&cMessage[port - 1][MSG_RX_BUF_SIZE - parseStart],&UARTRxBuf[port - 1][0],(packetLength) - (MSG_RX_BUF_SIZE - parseStart)); // wrap-around
 800a04c:	0030      	movs	r0, r6
 800a04e:	3870      	subs	r0, #112	; 0x70
 800a050:	4448      	add	r0, r9
 800a052:	4b14      	ldr	r3, [pc, #80]	; (800a0a4 <BackEndTask+0x358>)
 800a054:	469c      	mov	ip, r3
 800a056:	4460      	add	r0, ip
 800a058:	4643      	mov	r3, r8
 800a05a:	464a      	mov	r2, r9
 800a05c:	1a9a      	subs	r2, r3, r2
 800a05e:	0021      	movs	r1, r4
 800a060:	f00a fca1 	bl	80149a6 <memcpy>
 800a064:	e7ae      	b.n	8009fc4 <BackEndTask+0x278>
							MSG_RX_BUF_SIZE - packetStart);
 800a066:	26c0      	movs	r6, #192	; 0xc0
 800a068:	1a76      	subs	r6, r6, r1
							memset(&UARTRxBuf[port - 1][packetStart],0,
 800a06a:	0068      	lsls	r0, r5, #1
 800a06c:	1940      	adds	r0, r0, r5
 800a06e:	0180      	lsls	r0, r0, #6
 800a070:	3881      	subs	r0, #129	; 0x81
 800a072:	38ff      	subs	r0, #255	; 0xff
 800a074:	1840      	adds	r0, r0, r1
 800a076:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <BackEndTask+0x36c>)
 800a078:	18c0      	adds	r0, r0, r3
 800a07a:	0032      	movs	r2, r6
 800a07c:	2100      	movs	r1, #0
 800a07e:	f00a fc9b 	bl	80149b8 <memset>
							memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a082:	4b0e      	ldr	r3, [pc, #56]	; (800a0bc <BackEndTask+0x370>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	3204      	adds	r2, #4
 800a088:	1b92      	subs	r2, r2, r6
 800a08a:	2100      	movs	r1, #0
 800a08c:	0020      	movs	r0, r4
 800a08e:	f00a fc93 	bl	80149b8 <memset>
 800a092:	e7ab      	b.n	8009fec <BackEndTask+0x2a0>
							UARTRxBufIndex[port - 1] =0;
 800a094:	2300      	movs	r3, #0
 800a096:	4652      	mov	r2, sl
 800a098:	7013      	strb	r3, [r2, #0]
 800a09a:	e7ae      	b.n	8009ffa <BackEndTask+0x2ae>
							ForwardReceivedMessage(port);
 800a09c:	0038      	movs	r0, r7
 800a09e:	f7ff fcf9 	bl	8009a94 <ForwardReceivedMessage>
 800a0a2:	e043      	b.n	800a12c <BackEndTask+0x3e0>
 800a0a4:	20000d7c 	.word	0x20000d7c
 800a0a8:	200017c8 	.word	0x200017c8
 800a0ac:	20006e54 	.word	0x20006e54
 800a0b0:	20001ba8 	.word	0x20001ba8
 800a0b4:	20001c04 	.word	0x20001c04
 800a0b8:	20001348 	.word	0x20001348
 800a0bc:	20001ba4 	.word	0x20001ba4
 800a0c0:	20001bac 	.word	0x20001bac
 800a0c4:	20000ae8 	.word	0x20000ae8
 800a0c8:	2000116c 	.word	0x2000116c
 800a0cc:	2000195c 	.word	0x2000195c
 800a0d0:	20001ba0 	.word	0x20001ba0
 800a0d4:	200017d0 	.word	0x200017d0
 800a0d8:	20001c00 	.word	0x20001c00
 800a0dc:	20000fa4 	.word	0x20000fa4
 800a0e0:	20001a48 	.word	0x20001a48
 800a0e4:	200010ea 	.word	0x200010ea
					MSG_RX_BUF_SIZE - packetStart);
 800a0e8:	26c0      	movs	r6, #192	; 0xc0
 800a0ea:	1a76      	subs	r6, r6, r1
					memset(&UARTRxBuf[port - 1][packetStart],0,
 800a0ec:	0068      	lsls	r0, r5, #1
 800a0ee:	1940      	adds	r0, r0, r5
 800a0f0:	0180      	lsls	r0, r0, #6
 800a0f2:	3881      	subs	r0, #129	; 0x81
 800a0f4:	38ff      	subs	r0, #255	; 0xff
 800a0f6:	1841      	adds	r1, r0, r1
 800a0f8:	4821      	ldr	r0, [pc, #132]	; (800a180 <BackEndTask+0x434>)
 800a0fa:	1808      	adds	r0, r1, r0
 800a0fc:	0032      	movs	r2, r6
 800a0fe:	2100      	movs	r1, #0
 800a100:	f00a fc5a 	bl	80149b8 <memset>
					memset(&UARTRxBuf[port - 1][0],0,((packetLength) + 4) - (MSG_RX_BUF_SIZE - packetStart));
 800a104:	4b1f      	ldr	r3, [pc, #124]	; (800a184 <BackEndTask+0x438>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	3204      	adds	r2, #4
 800a10a:	1b92      	subs	r2, r2, r6
 800a10c:	2100      	movs	r1, #0
 800a10e:	0020      	movs	r0, r4
 800a110:	f00a fc52 	bl	80149b8 <memset>
 800a114:	e6f8      	b.n	8009f08 <BackEndTask+0x1bc>
					UARTRxBufIndex[port - 1] =0;
 800a116:	2300      	movs	r3, #0
 800a118:	4652      	mov	r2, sl
 800a11a:	7013      	strb	r3, [r2, #0]
 800a11c:	e6fc      	b.n	8009f18 <BackEndTask+0x1cc>
			/* C. If DMA stopped due to communication errors, restart again */
			if(MsgDMAStopped[port - 1] == true){
				MsgDMAStopped[port - 1] = false;
				if(portStatus[port] == OVERRUN)
					portStatus[port] =FREE;
				HAL_UART_Receive_DMA(GetUart(port),(uint8_t* )&UARTRxBuf[port - 1],MSG_RX_BUF_SIZE);
 800a11e:	0038      	movs	r0, r7
 800a120:	f004 fba2 	bl	800e868 <GetUart>
 800a124:	22c0      	movs	r2, #192	; 0xc0
 800a126:	0021      	movs	r1, r4
 800a128:	f009 fd0e 	bl	8013b48 <HAL_UART_Receive_DMA>
		for(port =1; port <= NumOfPorts; port++){
 800a12c:	3701      	adds	r7, #1
 800a12e:	b2ff      	uxtb	r7, r7
 800a130:	3501      	adds	r5, #1
 800a132:	34c0      	adds	r4, #192	; 0xc0
 800a134:	2f07      	cmp	r7, #7
 800a136:	d017      	beq.n	800a168 <BackEndTask+0x41c>
 800a138:	1e6b      	subs	r3, r5, #1
 800a13a:	445b      	add	r3, fp
 800a13c:	4698      	mov	r8, r3
			if(portStatus[port] == MSG || portStatus[port] == FREE){
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	2b01      	cmp	r3, #1
 800a142:	d800      	bhi.n	800a146 <BackEndTask+0x3fa>
 800a144:	e610      	b.n	8009d68 <BackEndTask+0x1c>
 800a146:	1eab      	subs	r3, r5, #2
 800a148:	4a0f      	ldr	r2, [pc, #60]	; (800a188 <BackEndTask+0x43c>)
 800a14a:	4694      	mov	ip, r2
 800a14c:	4463      	add	r3, ip
			if(MsgDMAStopped[port - 1] == true){
 800a14e:	781a      	ldrb	r2, [r3, #0]
 800a150:	2a00      	cmp	r2, #0
 800a152:	d0eb      	beq.n	800a12c <BackEndTask+0x3e0>
				MsgDMAStopped[port - 1] = false;
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]
				if(portStatus[port] == OVERRUN)
 800a158:	4643      	mov	r3, r8
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b05      	cmp	r3, #5
 800a15e:	d1de      	bne.n	800a11e <BackEndTask+0x3d2>
					portStatus[port] =FREE;
 800a160:	2300      	movs	r3, #0
 800a162:	4642      	mov	r2, r8
 800a164:	7013      	strb	r3, [r2, #0]
 800a166:	e7da      	b.n	800a11e <BackEndTask+0x3d2>
			}
		}

		taskYIELD();
 800a168:	f006 fb7a 	bl	8010860 <vPortYield>
 800a16c:	4c04      	ldr	r4, [pc, #16]	; (800a180 <BackEndTask+0x434>)
void BackEndTask(void *argument){
 800a16e:	2502      	movs	r5, #2
		for(port =1; port <= NumOfPorts; port++){
 800a170:	2701      	movs	r7, #1
 800a172:	4b06      	ldr	r3, [pc, #24]	; (800a18c <BackEndTask+0x440>)
 800a174:	469b      	mov	fp, r3
 800a176:	e7df      	b.n	800a138 <BackEndTask+0x3ec>
				packetEnd =packetStart + (packetLength + 3); // Packet length is counted from Dst to before CRC
 800a178:	4a05      	ldr	r2, [pc, #20]	; (800a190 <BackEndTask+0x444>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	e685      	b.n	8009e8a <BackEndTask+0x13e>
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	20001348 	.word	0x20001348
 800a184:	20001ba4 	.word	0x20001ba4
 800a188:	20001340 	.word	0x20001340
 800a18c:	2000116c 	.word	0x2000116c
 800a190:	20001ba0 	.word	0x20001ba0

0800a194 <User_MessagingParser>:

{
	BOS_Status result =BOS_ERR_UnknownMessage;
	
	return result;
}
 800a194:	2001      	movs	r0, #1
 800a196:	4770      	bx	lr

0800a198 <PxMessagingTask>:
void PxMessagingTask(void *argument){
 800a198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a19a:	46de      	mov	lr, fp
 800a19c:	4657      	mov	r7, sl
 800a19e:	464e      	mov	r6, r9
 800a1a0:	4645      	mov	r5, r8
 800a1a2:	b5e0      	push	{r5, r6, r7, lr}
 800a1a4:	b097      	sub	sp, #92	; 0x5c
	port =(int8_t )(unsigned )argument;
 800a1a6:	b2c3      	uxtb	r3, r0
 800a1a8:	9308      	str	r3, [sp, #32]
 800a1aa:	23ff      	movs	r3, #255	; 0xff
 800a1ac:	4003      	ands	r3, r0
 800a1ae:	4698      	mov	r8, r3
		if(messageLength[port - 1]){
 800a1b0:	1e5d      	subs	r5, r3, #1
 800a1b2:	00eb      	lsls	r3, r5, #3
 800a1b4:	1b5b      	subs	r3, r3, r5
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	0019      	movs	r1, r3
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a1ba:	4ae2      	ldr	r2, [pc, #904]	; (800a544 <PxMessagingTask+0x3ac>)
 800a1bc:	18d3      	adds	r3, r2, r3
 800a1be:	9307      	str	r3, [sp, #28]
	HAL_StatusTypeDef status =HAL_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	930a      	str	r3, [sp, #40]	; 0x28
	BOS_Status result =BOS_OK;
 800a1c4:	4699      	mov	r9, r3
			if(cMessage[port - 1][2] >> 7){
 800a1c6:	000e      	movs	r6, r1
 800a1c8:	1853      	adds	r3, r2, r1
 800a1ca:	3302      	adds	r3, #2
 800a1cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ce:	468a      	mov	sl, r1
 800a1d0:	e062      	b.n	800a298 <PxMessagingTask+0x100>
				longMessage =1;
 800a1d2:	4add      	ldr	r2, [pc, #884]	; (800a548 <PxMessagingTask+0x3b0>)
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	7011      	strb	r1, [r2, #0]
 800a1d8:	e06f      	b.n	800a2ba <PxMessagingTask+0x122>
				code =cMessage[port - 1][3 + shift];
 800a1da:	4bda      	ldr	r3, [pc, #872]	; (800a544 <PxMessagingTask+0x3ac>)
 800a1dc:	199b      	adds	r3, r3, r6
 800a1de:	1818      	adds	r0, r3, r0
 800a1e0:	78c7      	ldrb	r7, [r0, #3]
 800a1e2:	e08e      	b.n	800a302 <PxMessagingTask+0x16a>
				BOSMessaging.Acknowledgment =false;
 800a1e4:	4bd9      	ldr	r3, [pc, #868]	; (800a54c <PxMessagingTask+0x3b4>)
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	711a      	strb	r2, [r3, #4]
				SendMessageToModule(src,MSG_Acknowledgment_Accepted,0);
 800a1ea:	212c      	movs	r1, #44	; 0x2c
 800a1ec:	9804      	ldr	r0, [sp, #16]
 800a1ee:	f7ff fcb9 	bl	8009b64 <SendMessageToModule>
 800a1f2:	e089      	b.n	800a308 <PxMessagingTask+0x170>
					Delay_ms(100);
 800a1f4:	2064      	movs	r0, #100	; 0x64
 800a1f6:	f006 fcb1 	bl	8010b5c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,0);
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	9a08      	ldr	r2, [sp, #32]
 800a1fe:	4659      	mov	r1, fp
 800a200:	9804      	ldr	r0, [sp, #16]
 800a202:	f7f9 fcd5 	bl	8003bb0 <remoteBootloaderUpdate>
 800a206:	e02e      	b.n	800a266 <PxMessagingTask+0xce>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a208:	4bd1      	ldr	r3, [pc, #836]	; (800a550 <PxMessagingTask+0x3b8>)
 800a20a:	5d5a      	ldrb	r2, [r3, r5]
 800a20c:	4bcd      	ldr	r3, [pc, #820]	; (800a544 <PxMessagingTask+0x3ac>)
 800a20e:	199b      	adds	r3, r3, r6
 800a210:	189b      	adds	r3, r3, r2
 800a212:	3b01      	subs	r3, #1
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	4acf      	ldr	r2, [pc, #828]	; (800a554 <PxMessagingTask+0x3bc>)
 800a218:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800a21a:	2103      	movs	r1, #3
 800a21c:	4689      	mov	r9, r1
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800a21e:	429a      	cmp	r2, r3
 800a220:	d01e      	beq.n	800a260 <PxMessagingTask+0xc8>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800a222:	4acc      	ldr	r2, [pc, #816]	; (800a554 <PxMessagingTask+0x3bc>)
 800a224:	7013      	strb	r3, [r2, #0]
 800a226:	4acc      	ldr	r2, [pc, #816]	; (800a558 <PxMessagingTask+0x3c0>)
 800a228:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST,port);
 800a22a:	9908      	ldr	r1, [sp, #32]
 800a22c:	20ff      	movs	r0, #255	; 0xff
 800a22e:	f7ff fc51 	bl	8009ad4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800a232:	4bc7      	ldr	r3, [pc, #796]	; (800a550 <PxMessagingTask+0x3b8>)
 800a234:	5d5a      	ldrb	r2, [r3, r5]
 800a236:	4bc3      	ldr	r3, [pc, #780]	; (800a544 <PxMessagingTask+0x3ac>)
 800a238:	199b      	adds	r3, r3, r6
 800a23a:	189b      	adds	r3, r3, r2
 800a23c:	3b01      	subs	r3, #1
 800a23e:	2200      	movs	r2, #0
 800a240:	701a      	strb	r2, [r3, #0]
				shift +=4;
 800a242:	9c06      	ldr	r4, [sp, #24]
 800a244:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800a246:	4bc2      	ldr	r3, [pc, #776]	; (800a550 <PxMessagingTask+0x3b8>)
 800a248:	5d59      	ldrb	r1, [r3, r5]
 800a24a:	1b0a      	subs	r2, r1, r4
 800a24c:	b2d3      	uxtb	r3, r2
 800a24e:	9306      	str	r3, [sp, #24]
					switch(code){
 800a250:	2f2d      	cmp	r7, #45	; 0x2d
 800a252:	d901      	bls.n	800a258 <PxMessagingTask+0xc0>
 800a254:	f001 fab7 	bl	800b7c6 <PxMessagingTask+0x162e>
 800a258:	00bb      	lsls	r3, r7, #2
 800a25a:	4ac0      	ldr	r2, [pc, #768]	; (800a55c <PxMessagingTask+0x3c4>)
 800a25c:	58d3      	ldr	r3, [r2, r3]
 800a25e:	469f      	mov	pc, r3
				if(result == BOS_OK){
 800a260:	464b      	mov	r3, r9
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0ed      	beq.n	800a242 <PxMessagingTask+0xaa>
		if(result == BOS_ERR_UnknownMessage){
 800a266:	464b      	mov	r3, r9
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d101      	bne.n	800a270 <PxMessagingTask+0xd8>
 800a26c:	f001 facd 	bl	800b80a <PxMessagingTask+0x1672>
		memset(cMessage[port - 1],0,(size_t )messageLength[port - 1]);
 800a270:	4cb7      	ldr	r4, [pc, #732]	; (800a550 <PxMessagingTask+0x3b8>)
 800a272:	5d62      	ldrb	r2, [r4, r5]
 800a274:	2100      	movs	r1, #0
 800a276:	9807      	ldr	r0, [sp, #28]
 800a278:	f00a fb9e 	bl	80149b8 <memset>
		messageLength[port - 1] =0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	5563      	strb	r3, [r4, r5]
		if(portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON){
 800a280:	4bb7      	ldr	r3, [pc, #732]	; (800a560 <PxMessagingTask+0x3c8>)
 800a282:	4642      	mov	r2, r8
 800a284:	5c9b      	ldrb	r3, [r3, r2]
 800a286:	3b02      	subs	r3, #2
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d903      	bls.n	800a294 <PxMessagingTask+0xfc>
			portStatus[port] =FREE;
 800a28c:	4bb4      	ldr	r3, [pc, #720]	; (800a560 <PxMessagingTask+0x3c8>)
 800a28e:	2200      	movs	r2, #0
 800a290:	4641      	mov	r1, r8
 800a292:	545a      	strb	r2, [r3, r1]
		taskYIELD();
 800a294:	f006 fae4 	bl	8010860 <vPortYield>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800a298:	2101      	movs	r1, #1
 800a29a:	4249      	negs	r1, r1
 800a29c:	2001      	movs	r0, #1
 800a29e:	f006 f805 	bl	80102ac <ulTaskNotifyTake>
		if(messageLength[port - 1]){
 800a2a2:	4bab      	ldr	r3, [pc, #684]	; (800a550 <PxMessagingTask+0x3b8>)
 800a2a4:	5d5b      	ldrb	r3, [r3, r5]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0dd      	beq.n	800a266 <PxMessagingTask+0xce>
			if(cMessage[port - 1][2] >> 7){
 800a2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	b25a      	sxtb	r2, r3
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	db8e      	blt.n	800a1d2 <PxMessagingTask+0x3a>
				longMessage =0;
 800a2b4:	4aa4      	ldr	r2, [pc, #656]	; (800a548 <PxMessagingTask+0x3b0>)
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	7011      	strb	r1, [r2, #0]
			dst =cMessage[port - 1][0];
 800a2ba:	4aa2      	ldr	r2, [pc, #648]	; (800a544 <PxMessagingTask+0x3ac>)
 800a2bc:	5cb1      	ldrb	r1, [r6, r2]
 800a2be:	468b      	mov	fp, r1
			src =cMessage[port - 1][1];
 800a2c0:	1992      	adds	r2, r2, r6
 800a2c2:	7852      	ldrb	r2, [r2, #1]
 800a2c4:	9204      	str	r2, [sp, #16]
			if(cMessage[port - 1][2] & 0x01){ // 1st bit (LSB) Extended options - TODO handle extended options case
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	0010      	movs	r0, r2
 800a2ca:	4018      	ands	r0, r3
			shift =0;
 800a2cc:	9006      	str	r0, [sp, #24]
			BOSMessaging.trace =(traceOptions_t )((cMessage[port - 1][2] >> 2) & 0x03);  // 3rd-4th bits Trace
 800a2ce:	499f      	ldr	r1, [pc, #636]	; (800a54c <PxMessagingTask+0x3b4>)
 800a2d0:	071c      	lsls	r4, r3, #28
 800a2d2:	0fa4      	lsrs	r4, r4, #30
 800a2d4:	704c      	strb	r4, [r1, #1]
			BOSMessaging.received_Acknowledgment =((cMessage[port - 1][2] >> 4) & 0x01);						    // 5th bit Reserved
 800a2d6:	091c      	lsrs	r4, r3, #4
 800a2d8:	4022      	ands	r2, r4
 800a2da:	0014      	movs	r4, r2
 800a2dc:	1e67      	subs	r7, r4, #1
 800a2de:	41bc      	sbcs	r4, r7
 800a2e0:	70cc      	strb	r4, [r1, #3]
			BOSMessaging.response =(cMessage[port - 1][2]) & 0x60; 					    // 6th-7th bits Response mode
 800a2e2:	2460      	movs	r4, #96	; 0x60
 800a2e4:	401c      	ands	r4, r3
 800a2e6:	700c      	strb	r4, [r1, #0]
			if(extendCode == true){
 800a2e8:	079b      	lsls	r3, r3, #30
 800a2ea:	d400      	bmi.n	800a2ee <PxMessagingTask+0x156>
 800a2ec:	e775      	b.n	800a1da <PxMessagingTask+0x42>
				code =(((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][3 + shift]);
 800a2ee:	4b95      	ldr	r3, [pc, #596]	; (800a544 <PxMessagingTask+0x3ac>)
 800a2f0:	199b      	adds	r3, r3, r6
 800a2f2:	181b      	adds	r3, r3, r0
 800a2f4:	7919      	ldrb	r1, [r3, #4]
 800a2f6:	0209      	lsls	r1, r1, #8
 800a2f8:	78df      	ldrb	r7, [r3, #3]
 800a2fa:	187f      	adds	r7, r7, r1
 800a2fc:	b2bf      	uxth	r7, r7
				++shift;
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	9306      	str	r3, [sp, #24]
			if(true == BOSMessaging.received_Acknowledgment){
 800a302:	2a00      	cmp	r2, #0
 800a304:	d000      	beq.n	800a308 <PxMessagingTask+0x170>
 800a306:	e76d      	b.n	800a1e4 <PxMessagingTask+0x4c>
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800a308:	465b      	mov	r3, fp
 800a30a:	3b01      	subs	r3, #1
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	2bfc      	cmp	r3, #252	; 0xfc
 800a310:	d901      	bls.n	800a316 <PxMessagingTask+0x17e>
 800a312:	f001 fabb 	bl	800b88c <PxMessagingTask+0x16f4>
 800a316:	4b93      	ldr	r3, [pc, #588]	; (800a564 <PxMessagingTask+0x3cc>)
 800a318:	781b      	ldrb	r3, [r3, #0]
 800a31a:	455b      	cmp	r3, fp
 800a31c:	d101      	bne.n	800a322 <PxMessagingTask+0x18a>
 800a31e:	f001 fab5 	bl	800b88c <PxMessagingTask+0x16f4>
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <PxMessagingTask+0x192>
 800a326:	f001 faab 	bl	800b880 <PxMessagingTask+0x16e8>
				ForwardReceivedMessage(port);
 800a32a:	9808      	ldr	r0, [sp, #32]
 800a32c:	f7ff fbb2 	bl	8009a94 <ForwardReceivedMessage>
				if(BOSMessaging.trace)
 800a330:	4b86      	ldr	r3, [pc, #536]	; (800a54c <PxMessagingTask+0x3b4>)
 800a332:	785b      	ldrb	r3, [r3, #1]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d002      	beq.n	800a33e <PxMessagingTask+0x1a6>
					indMode =IND_SHORT_BLINK;
 800a338:	4b8b      	ldr	r3, [pc, #556]	; (800a568 <PxMessagingTask+0x3d0>)
 800a33a:	2203      	movs	r2, #3
 800a33c:	701a      	strb	r2, [r3, #0]
				if(code == CODE_UPDATE){ // Remote bootloader update
 800a33e:	2f19      	cmp	r7, #25
 800a340:	d100      	bne.n	800a344 <PxMessagingTask+0x1ac>
 800a342:	e757      	b.n	800a1f4 <PxMessagingTask+0x5c>
				else if(code == CODE_UPDATE_VIA_PORT){ // Remote 'via port' bootloader update
 800a344:	2f1a      	cmp	r7, #26
 800a346:	d18e      	bne.n	800a266 <PxMessagingTask+0xce>
					Delay_ms(100);
 800a348:	2064      	movs	r0, #100	; 0x64
 800a34a:	f006 fc07 	bl	8010b5c <HAL_Delay>
					remoteBootloaderUpdate(src,dst,port,cMessage[port - 1][shift]);
 800a34e:	4b7d      	ldr	r3, [pc, #500]	; (800a544 <PxMessagingTask+0x3ac>)
 800a350:	199b      	adds	r3, r3, r6
 800a352:	9a06      	ldr	r2, [sp, #24]
 800a354:	5c9b      	ldrb	r3, [r3, r2]
 800a356:	9a08      	ldr	r2, [sp, #32]
 800a358:	4659      	mov	r1, fp
 800a35a:	9804      	ldr	r0, [sp, #16]
 800a35c:	f7f9 fc28 	bl	8003bb0 <remoteBootloaderUpdate>
 800a360:	e781      	b.n	800a266 <PxMessagingTask+0xce>
							for(p =0; p < numOfParams; p++){
 800a362:	9b06      	ldr	r3, [sp, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d01f      	beq.n	800a3a8 <PxMessagingTask+0x210>
								arrayPortsDir[src - 1] |=(0x8000 >> ((cMessage[port - 1][shift + p]) - 1));
 800a368:	9b04      	ldr	r3, [sp, #16]
 800a36a:	1e58      	subs	r0, r3, #1
 800a36c:	0042      	lsls	r2, r0, #1
 800a36e:	4b7f      	ldr	r3, [pc, #508]	; (800a56c <PxMessagingTask+0x3d4>)
 800a370:	5ad3      	ldrh	r3, [r2, r3]
 800a372:	4652      	mov	r2, sl
 800a374:	1911      	adds	r1, r2, r4
 800a376:	4a73      	ldr	r2, [pc, #460]	; (800a544 <PxMessagingTask+0x3ac>)
 800a378:	1889      	adds	r1, r1, r2
 800a37a:	3201      	adds	r2, #1
 800a37c:	4452      	add	r2, sl
 800a37e:	1914      	adds	r4, r2, r4
 800a380:	9a06      	ldr	r2, [sp, #24]
 800a382:	3a01      	subs	r2, #1
 800a384:	b2d2      	uxtb	r2, r2
 800a386:	18a4      	adds	r4, r4, r2
 800a388:	2780      	movs	r7, #128	; 0x80
 800a38a:	023f      	lsls	r7, r7, #8
 800a38c:	4684      	mov	ip, r0
 800a38e:	780a      	ldrb	r2, [r1, #0]
 800a390:	3a01      	subs	r2, #1
 800a392:	0038      	movs	r0, r7
 800a394:	4110      	asrs	r0, r2
 800a396:	4303      	orrs	r3, r0
 800a398:	b29b      	uxth	r3, r3
 800a39a:	3101      	adds	r1, #1
							for(p =0; p < numOfParams; p++){
 800a39c:	42a1      	cmp	r1, r4
 800a39e:	d1f6      	bne.n	800a38e <PxMessagingTask+0x1f6>
 800a3a0:	4660      	mov	r0, ip
 800a3a2:	0040      	lsls	r0, r0, #1
 800a3a4:	4a71      	ldr	r2, [pc, #452]	; (800a56c <PxMessagingTask+0x3d4>)
 800a3a6:	5283      	strh	r3, [r0, r2]
							responseStatus =BOS_OK;
 800a3a8:	4b71      	ldr	r3, [pc, #452]	; (800a570 <PxMessagingTask+0x3d8>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	701a      	strb	r2, [r3, #0]
							break;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	4699      	mov	r9, r3
 800a3b2:	e75d      	b.n	800a270 <PxMessagingTask+0xd8>
							indMode =IND_PING;
 800a3b4:	4b6c      	ldr	r3, [pc, #432]	; (800a568 <PxMessagingTask+0x3d0>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a3ba:	200a      	movs	r0, #10
 800a3bc:	f004 fba3 	bl	800eb06 <osDelay>
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG)
 800a3c0:	4b62      	ldr	r3, [pc, #392]	; (800a54c <PxMessagingTask+0x3b4>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2240      	movs	r2, #64	; 0x40
 800a3c6:	4393      	bics	r3, r2
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4691      	mov	r9, r2
 800a3cc:	2b20      	cmp	r3, #32
 800a3ce:	d000      	beq.n	800a3d2 <PxMessagingTask+0x23a>
 800a3d0:	e74e      	b.n	800a270 <PxMessagingTask+0xd8>
								SendMessageToModule(src,CODE_PING_RESPONSE,0);
 800a3d2:	2102      	movs	r1, #2
 800a3d4:	9804      	ldr	r0, [sp, #16]
 800a3d6:	f7ff fbc5 	bl	8009b64 <SendMessageToModule>
 800a3da:	e749      	b.n	800a270 <PxMessagingTask+0xd8>
							if(!moduleAlias[myID][0])
 800a3dc:	4b61      	ldr	r3, [pc, #388]	; (800a564 <PxMessagingTask+0x3cc>)
 800a3de:	781a      	ldrb	r2, [r3, #0]
 800a3e0:	0093      	lsls	r3, r2, #2
 800a3e2:	189b      	adds	r3, r3, r2
 800a3e4:	005b      	lsls	r3, r3, #1
 800a3e6:	4a63      	ldr	r2, [pc, #396]	; (800a574 <PxMessagingTask+0x3dc>)
 800a3e8:	5c9b      	ldrb	r3, [r3, r2]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d118      	bne.n	800a420 <PxMessagingTask+0x288>
								sprintf((char* )pcUserMessage,"Hi from module %d\r\n",src);
 800a3ee:	9a04      	ldr	r2, [sp, #16]
 800a3f0:	4961      	ldr	r1, [pc, #388]	; (800a578 <PxMessagingTask+0x3e0>)
 800a3f2:	4862      	ldr	r0, [pc, #392]	; (800a57c <PxMessagingTask+0x3e4>)
 800a3f4:	f00a fd0c 	bl	8014e10 <sprintf>
							writePxMutex(PcPort,pcUserMessage,strlen(pcUserMessage),cmd50ms,HAL_MAX_DELAY);
 800a3f8:	4c60      	ldr	r4, [pc, #384]	; (800a57c <PxMessagingTask+0x3e4>)
 800a3fa:	0020      	movs	r0, r4
 800a3fc:	f7f5 fe8c 	bl	8000118 <strlen>
 800a400:	b282      	uxth	r2, r0
 800a402:	4b5f      	ldr	r3, [pc, #380]	; (800a580 <PxMessagingTask+0x3e8>)
 800a404:	7818      	ldrb	r0, [r3, #0]
 800a406:	2301      	movs	r3, #1
 800a408:	425b      	negs	r3, r3
 800a40a:	9300      	str	r3, [sp, #0]
 800a40c:	3333      	adds	r3, #51	; 0x33
 800a40e:	0021      	movs	r1, r4
 800a410:	f004 fa4c 	bl	800e8ac <writePxMutex>
							responseStatus =BOS_OK;
 800a414:	4b56      	ldr	r3, [pc, #344]	; (800a570 <PxMessagingTask+0x3d8>)
 800a416:	2200      	movs	r2, #0
 800a418:	701a      	strb	r2, [r3, #0]
							break;
 800a41a:	2300      	movs	r3, #0
 800a41c:	4699      	mov	r9, r3
 800a41e:	e727      	b.n	800a270 <PxMessagingTask+0xd8>
								sprintf((char* )pcUserMessage,"Hi from module %d (%s)\r\n",src,moduleAlias[src]);
 800a420:	230a      	movs	r3, #10
 800a422:	9904      	ldr	r1, [sp, #16]
 800a424:	434b      	muls	r3, r1
 800a426:	4a53      	ldr	r2, [pc, #332]	; (800a574 <PxMessagingTask+0x3dc>)
 800a428:	189b      	adds	r3, r3, r2
 800a42a:	000a      	movs	r2, r1
 800a42c:	4955      	ldr	r1, [pc, #340]	; (800a584 <PxMessagingTask+0x3ec>)
 800a42e:	4853      	ldr	r0, [pc, #332]	; (800a57c <PxMessagingTask+0x3e4>)
 800a430:	f00a fcee 	bl	8014e10 <sprintf>
 800a434:	e7e0      	b.n	800a3f8 <PxMessagingTask+0x260>
							IND_ON();
 800a436:	2090      	movs	r0, #144	; 0x90
 800a438:	2201      	movs	r2, #1
 800a43a:	2180      	movs	r1, #128	; 0x80
 800a43c:	05c0      	lsls	r0, r0, #23
 800a43e:	f007 fff7 	bl	8012430 <HAL_GPIO_WritePin>
							break;
 800a442:	2300      	movs	r3, #0
 800a444:	4699      	mov	r9, r3
 800a446:	e713      	b.n	800a270 <PxMessagingTask+0xd8>
							IND_OFF();
 800a448:	2090      	movs	r0, #144	; 0x90
 800a44a:	2200      	movs	r2, #0
 800a44c:	2180      	movs	r1, #128	; 0x80
 800a44e:	05c0      	lsls	r0, r0, #23
 800a450:	f007 ffee 	bl	8012430 <HAL_GPIO_WritePin>
							break;
 800a454:	2300      	movs	r3, #0
 800a456:	4699      	mov	r9, r3
 800a458:	e70a      	b.n	800a270 <PxMessagingTask+0xd8>
							IND_toggle();
 800a45a:	2090      	movs	r0, #144	; 0x90
 800a45c:	2180      	movs	r1, #128	; 0x80
 800a45e:	05c0      	lsls	r0, r0, #23
 800a460:	f007 ffec 	bl	801243c <HAL_GPIO_TogglePin>
							break;
 800a464:	2300      	movs	r3, #0
 800a466:	4699      	mov	r9, r3
 800a468:	e702      	b.n	800a270 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a46a:	4f47      	ldr	r7, [pc, #284]	; (800a588 <PxMessagingTask+0x3f0>)
 800a46c:	00ab      	lsls	r3, r5, #2
 800a46e:	4a35      	ldr	r2, [pc, #212]	; (800a544 <PxMessagingTask+0x3ac>)
 800a470:	1992      	adds	r2, r2, r6
 800a472:	1910      	adds	r0, r2, r4
 800a474:	7881      	ldrb	r1, [r0, #2]
 800a476:	468c      	mov	ip, r1
 800a478:	9904      	ldr	r1, [sp, #16]
 800a47a:	0209      	lsls	r1, r1, #8
 800a47c:	4461      	add	r1, ip
 800a47e:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a480:	18fb      	adds	r3, r7, r3
 800a482:	5d11      	ldrb	r1, [r2, r4]
 800a484:	0209      	lsls	r1, r1, #8
 800a486:	7842      	ldrb	r2, [r0, #1]
 800a488:	1852      	adds	r2, r2, r1
 800a48a:	805a      	strh	r2, [r3, #2]
							messageParams[1] =(uint8_t )myPN;
 800a48c:	4b3f      	ldr	r3, [pc, #252]	; (800a58c <PxMessagingTask+0x3f4>)
 800a48e:	881b      	ldrh	r3, [r3, #0]
 800a490:	4a3f      	ldr	r2, [pc, #252]	; (800a590 <PxMessagingTask+0x3f8>)
 800a492:	7053      	strb	r3, [r2, #1]
							messageParams[0] =(uint8_t )(myPN >> 8);
 800a494:	0a1b      	lsrs	r3, r3, #8
 800a496:	7013      	strb	r3, [r2, #0]
							messageParams[2] =port;
 800a498:	9c08      	ldr	r4, [sp, #32]
 800a49a:	7094      	strb	r4, [r2, #2]
							osDelay(2);
 800a49c:	2002      	movs	r0, #2
 800a49e:	f004 fb32 	bl	800eb06 <osDelay>
							SendMessageFromPort(port,0,0,CODE_HI_RESPONSE,3);
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	3308      	adds	r3, #8
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	2100      	movs	r1, #0
 800a4ac:	0020      	movs	r0, r4
 800a4ae:	f7ff f8d3 	bl	8009658 <SendMessageFromPort>
							break;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4699      	mov	r9, r3
 800a4b6:	e6db      	b.n	800a270 <PxMessagingTask+0xd8>
							neighbors[port - 1][0] =((uint16_t )src << 8) + cMessage[port - 1][2 + shift]; /* Neighbor ID + Neighbor own port */
 800a4b8:	4f33      	ldr	r7, [pc, #204]	; (800a588 <PxMessagingTask+0x3f0>)
 800a4ba:	00ab      	lsls	r3, r5, #2
 800a4bc:	4a21      	ldr	r2, [pc, #132]	; (800a544 <PxMessagingTask+0x3ac>)
 800a4be:	1992      	adds	r2, r2, r6
 800a4c0:	1910      	adds	r0, r2, r4
 800a4c2:	7881      	ldrb	r1, [r0, #2]
 800a4c4:	468c      	mov	ip, r1
 800a4c6:	9904      	ldr	r1, [sp, #16]
 800a4c8:	0209      	lsls	r1, r1, #8
 800a4ca:	4461      	add	r1, ip
 800a4cc:	53d9      	strh	r1, [r3, r7]
							neighbors[port - 1][1] =((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]; /* Neighbor PN */
 800a4ce:	18fb      	adds	r3, r7, r3
 800a4d0:	5d11      	ldrb	r1, [r2, r4]
 800a4d2:	0209      	lsls	r1, r1, #8
 800a4d4:	7842      	ldrb	r2, [r0, #1]
 800a4d6:	1852      	adds	r2, r2, r1
 800a4d8:	805a      	strh	r2, [r3, #2]
							responseStatus =BOS_OK;
 800a4da:	4b25      	ldr	r3, [pc, #148]	; (800a570 <PxMessagingTask+0x3d8>)
 800a4dc:	2200      	movs	r2, #0
 800a4de:	701a      	strb	r2, [r3, #0]
							break;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	4699      	mov	r9, r3
 800a4e4:	e6c4      	b.n	800a270 <PxMessagingTask+0xd8>
							ExploreNeighbors(port);
 800a4e6:	9808      	ldr	r0, [sp, #32]
 800a4e8:	f7f9 f99a 	bl	8003820 <ExploreNeighbors>
							indMode =IND_TOPOLOGY;
 800a4ec:	4b1e      	ldr	r3, [pc, #120]	; (800a568 <PxMessagingTask+0x3d0>)
 800a4ee:	2202      	movs	r2, #2
 800a4f0:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a4f2:	200a      	movs	r0, #10
 800a4f4:	f004 fb07 	bl	800eb06 <osDelay>
 800a4f8:	4f23      	ldr	r7, [pc, #140]	; (800a588 <PxMessagingTask+0x3f0>)
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a4fa:	2401      	movs	r4, #1
							temp =0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	9305      	str	r3, [sp, #20]
 800a500:	e004      	b.n	800a50c <PxMessagingTask+0x374>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a502:	3401      	adds	r4, #1
 800a504:	b2e4      	uxtb	r4, r4
 800a506:	3704      	adds	r7, #4
 800a508:	2c07      	cmp	r4, #7
 800a50a:	d011      	beq.n	800a530 <PxMessagingTask+0x398>
								if(neighbors[p - 1][0]){
 800a50c:	883b      	ldrh	r3, [r7, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d0f7      	beq.n	800a502 <PxMessagingTask+0x36a>
									messageParams[temp] =p;
 800a512:	4a1f      	ldr	r2, [pc, #124]	; (800a590 <PxMessagingTask+0x3f8>)
 800a514:	9b05      	ldr	r3, [sp, #20]
 800a516:	54d4      	strb	r4, [r2, r3]
									memcpy(messageParams + temp + 1,neighbors[p - 1],(size_t )(4));
 800a518:	1c58      	adds	r0, r3, #1
 800a51a:	4694      	mov	ip, r2
 800a51c:	4460      	add	r0, ip
 800a51e:	2204      	movs	r2, #4
 800a520:	0039      	movs	r1, r7
 800a522:	f00a fa40 	bl	80149a6 <memcpy>
									temp +=5;
 800a526:	9b05      	ldr	r3, [sp, #20]
 800a528:	3305      	adds	r3, #5
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	9305      	str	r3, [sp, #20]
 800a52e:	e7e8      	b.n	800a502 <PxMessagingTask+0x36a>
							SendMessageToModule(src,CODE_EXPLORE_ADJ_RESPONSE,temp);
 800a530:	466b      	mov	r3, sp
 800a532:	8a9a      	ldrh	r2, [r3, #20]
 800a534:	210d      	movs	r1, #13
 800a536:	9804      	ldr	r0, [sp, #16]
 800a538:	f7ff fb14 	bl	8009b64 <SendMessageToModule>
							break;
 800a53c:	2300      	movs	r3, #0
 800a53e:	4699      	mov	r9, r3
 800a540:	e696      	b.n	800a270 <PxMessagingTask+0xd8>
 800a542:	46c0      	nop			; (mov r8, r8)
 800a544:	20000d7c 	.word	0x20000d7c
 800a548:	20000f69 	.word	0x20000f69
 800a54c:	20006dd4 	.word	0x20006dd4
 800a550:	20000fa4 	.word	0x20000fa4
 800a554:	20001a4a 	.word	0x20001a4a
 800a558:	20000d28 	.word	0x20000d28
 800a55c:	0801bc8c 	.word	0x0801bc8c
 800a560:	2000116c 	.word	0x2000116c
 800a564:	200010ea 	.word	0x200010ea
 800a568:	20000f68 	.word	0x20000f68
 800a56c:	2000735c 	.word	0x2000735c
 800a570:	20001188 	.word	0x20001188
 800a574:	20000fdc 	.word	0x20000fdc
 800a578:	0801a548 	.word	0x0801a548
 800a57c:	20001bb0 	.word	0x20001bb0
 800a580:	20000ae8 	.word	0x20000ae8
 800a584:	0801a55c 	.word	0x0801a55c
 800a588:	200010ec 	.word	0x200010ec
 800a58c:	20000078 	.word	0x20000078
 800a590:	20000fac 	.word	0x20000fac
							temp =numOfParams / 5;
 800a594:	2105      	movs	r1, #5
 800a596:	9806      	ldr	r0, [sp, #24]
 800a598:	f7f5 fdda 	bl	8000150 <__udivsi3>
 800a59c:	b2c2      	uxtb	r2, r0
 800a59e:	9205      	str	r2, [sp, #20]
							for(uint8_t k =0; k < temp; k++){
 800a5a0:	2a00      	cmp	r2, #0
 800a5a2:	d018      	beq.n	800a5d6 <PxMessagingTask+0x43e>
 800a5a4:	4653      	mov	r3, sl
 800a5a6:	191f      	adds	r7, r3, r4
 800a5a8:	4bdb      	ldr	r3, [pc, #876]	; (800a918 <PxMessagingTask+0x780>)
 800a5aa:	18ff      	adds	r7, r7, r3
 800a5ac:	3305      	adds	r3, #5
 800a5ae:	4453      	add	r3, sl
 800a5b0:	191c      	adds	r4, r3, r4
 800a5b2:	1e53      	subs	r3, r2, #1
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	009a      	lsls	r2, r3, #2
 800a5b8:	18d3      	adds	r3, r2, r3
 800a5ba:	18e4      	adds	r4, r4, r3
								memcpy(&neighbors2[(cMessage[port - 1][shift + k * 5]) - 1][0],&cMessage[port - 1][1 + shift + k * 5],(size_t )(4));
 800a5bc:	4bd7      	ldr	r3, [pc, #860]	; (800a91c <PxMessagingTask+0x784>)
 800a5be:	4699      	mov	r9, r3
 800a5c0:	7838      	ldrb	r0, [r7, #0]
 800a5c2:	3801      	subs	r0, #1
 800a5c4:	0080      	lsls	r0, r0, #2
 800a5c6:	4448      	add	r0, r9
 800a5c8:	1c79      	adds	r1, r7, #1
 800a5ca:	2204      	movs	r2, #4
 800a5cc:	f00a f9eb 	bl	80149a6 <memcpy>
 800a5d0:	3705      	adds	r7, #5
							for(uint8_t k =0; k < temp; k++){
 800a5d2:	42bc      	cmp	r4, r7
 800a5d4:	d1f4      	bne.n	800a5c0 <PxMessagingTask+0x428>
							responseStatus =BOS_OK;
 800a5d6:	4bd2      	ldr	r3, [pc, #840]	; (800a920 <PxMessagingTask+0x788>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	701a      	strb	r2, [r3, #0]
							break;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	4699      	mov	r9, r3
 800a5e0:	e646      	b.n	800a270 <PxMessagingTask+0xd8>
 800a5e2:	4653      	mov	r3, sl
 800a5e4:	18e3      	adds	r3, r4, r3
 800a5e6:	4acc      	ldr	r2, [pc, #816]	; (800a918 <PxMessagingTask+0x780>)
 800a5e8:	4699      	mov	r9, r3
 800a5ea:	4491      	add	r9, r2
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a5ec:	2701      	movs	r7, #1
								if(p != port)
 800a5ee:	9b08      	ldr	r3, [sp, #32]
 800a5f0:	42bb      	cmp	r3, r7
 800a5f2:	d006      	beq.n	800a602 <PxMessagingTask+0x46a>
									SwapUartPins(GetUart(p),cMessage[port - 1][shift + p - 1]);
 800a5f4:	0038      	movs	r0, r7
 800a5f6:	f004 f937 	bl	800e868 <GetUart>
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	7819      	ldrb	r1, [r3, #0]
 800a5fe:	f004 f9cd 	bl	800e99c <SwapUartPins>
							for(uint8_t p =1; p <= NumOfPorts; p++){
 800a602:	3701      	adds	r7, #1
 800a604:	b2ff      	uxtb	r7, r7
 800a606:	2301      	movs	r3, #1
 800a608:	469c      	mov	ip, r3
 800a60a:	44e1      	add	r9, ip
 800a60c:	2f07      	cmp	r7, #7
 800a60e:	d1ee      	bne.n	800a5ee <PxMessagingTask+0x456>
							SwapUartPins(GetUart(port),cMessage[port - 1][shift + MaxNumOfPorts]);
 800a610:	9808      	ldr	r0, [sp, #32]
 800a612:	f004 f929 	bl	800e868 <GetUart>
 800a616:	4bc0      	ldr	r3, [pc, #768]	; (800a918 <PxMessagingTask+0x780>)
 800a618:	199b      	adds	r3, r3, r6
 800a61a:	191c      	adds	r4, r3, r4
 800a61c:	7aa1      	ldrb	r1, [r4, #10]
 800a61e:	f004 f9bd 	bl	800e99c <SwapUartPins>
							break;
 800a622:	2300      	movs	r3, #0
 800a624:	4699      	mov	r9, r3
 800a626:	e623      	b.n	800a270 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == 0) /* Change my own ID */
 800a628:	0020      	movs	r0, r4
 800a62a:	4bbb      	ldr	r3, [pc, #748]	; (800a918 <PxMessagingTask+0x780>)
 800a62c:	199b      	adds	r3, r3, r6
 800a62e:	5d1b      	ldrb	r3, [r3, r4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10a      	bne.n	800a64a <PxMessagingTask+0x4b2>
								myID =cMessage[port - 1][1 + shift];
 800a634:	2238      	movs	r2, #56	; 0x38
 800a636:	436a      	muls	r2, r5
 800a638:	4bb7      	ldr	r3, [pc, #732]	; (800a918 <PxMessagingTask+0x780>)
 800a63a:	189b      	adds	r3, r3, r2
 800a63c:	191c      	adds	r4, r3, r4
 800a63e:	7862      	ldrb	r2, [r4, #1]
 800a640:	4bb8      	ldr	r3, [pc, #736]	; (800a924 <PxMessagingTask+0x78c>)
 800a642:	701a      	strb	r2, [r3, #0]
 800a644:	2300      	movs	r3, #0
 800a646:	4699      	mov	r9, r3
 800a648:	e612      	b.n	800a270 <PxMessagingTask+0xd8>
 800a64a:	2200      	movs	r2, #0
 800a64c:	4691      	mov	r9, r2
							else if(cMessage[port - 1][shift] == 1){ /* Change my neighbor's ID */
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d000      	beq.n	800a654 <PxMessagingTask+0x4bc>
 800a652:	e60d      	b.n	800a270 <PxMessagingTask+0xd8>
								messageParams[0] =0; /* change own ID */
 800a654:	49b4      	ldr	r1, [pc, #720]	; (800a928 <PxMessagingTask+0x790>)
 800a656:	700a      	strb	r2, [r1, #0]
								messageParams[1] =cMessage[port - 1][1 + shift]; /* The new ID */
 800a658:	3238      	adds	r2, #56	; 0x38
 800a65a:	436a      	muls	r2, r5
 800a65c:	4bae      	ldr	r3, [pc, #696]	; (800a918 <PxMessagingTask+0x780>)
 800a65e:	189b      	adds	r3, r3, r2
 800a660:	181b      	adds	r3, r3, r0
 800a662:	785a      	ldrb	r2, [r3, #1]
 800a664:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port - 1][2 + shift],0,0,CODE_MODULE_ID,3);
 800a666:	7898      	ldrb	r0, [r3, #2]
 800a668:	2303      	movs	r3, #3
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	330d      	adds	r3, #13
 800a66e:	464a      	mov	r2, r9
 800a670:	4649      	mov	r1, r9
 800a672:	f7fe fff1 	bl	8009658 <SendMessageFromPort>
 800a676:	e5fb      	b.n	800a270 <PxMessagingTask+0xd8>
							if(longMessage){
 800a678:	4bac      	ldr	r3, [pc, #688]	; (800a92c <PxMessagingTask+0x794>)
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d012      	beq.n	800a6a6 <PxMessagingTask+0x50e>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a680:	4bab      	ldr	r3, [pc, #684]	; (800a930 <PxMessagingTask+0x798>)
 800a682:	4699      	mov	r9, r3
 800a684:	881f      	ldrh	r7, [r3, #0]
 800a686:	48ab      	ldr	r0, [pc, #684]	; (800a934 <PxMessagingTask+0x79c>)
 800a688:	1838      	adds	r0, r7, r0
 800a68a:	4454      	add	r4, sl
 800a68c:	49a2      	ldr	r1, [pc, #648]	; (800a918 <PxMessagingTask+0x780>)
 800a68e:	1861      	adds	r1, r4, r1
 800a690:	9c06      	ldr	r4, [sp, #24]
 800a692:	0022      	movs	r2, r4
 800a694:	f00a f987 	bl	80149a6 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a698:	46a4      	mov	ip, r4
 800a69a:	4467      	add	r7, ip
 800a69c:	464b      	mov	r3, r9
 800a69e:	801f      	strh	r7, [r3, #0]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4699      	mov	r9, r3
 800a6a4:	e5e4      	b.n	800a270 <PxMessagingTask+0xd8>
								memcpy(&longMessageScratchpad[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a6a6:	4ba2      	ldr	r3, [pc, #648]	; (800a930 <PxMessagingTask+0x798>)
 800a6a8:	469b      	mov	fp, r3
 800a6aa:	881f      	ldrh	r7, [r3, #0]
 800a6ac:	4ba1      	ldr	r3, [pc, #644]	; (800a934 <PxMessagingTask+0x79c>)
 800a6ae:	4699      	mov	r9, r3
 800a6b0:	18f8      	adds	r0, r7, r3
 800a6b2:	4454      	add	r4, sl
 800a6b4:	4998      	ldr	r1, [pc, #608]	; (800a918 <PxMessagingTask+0x780>)
 800a6b6:	1861      	adds	r1, r4, r1
 800a6b8:	9c06      	ldr	r4, [sp, #24]
 800a6ba:	0022      	movs	r2, r4
 800a6bc:	f00a f973 	bl	80149a6 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a6c0:	193c      	adds	r4, r7, r4
 800a6c2:	b2a4      	uxth	r4, r4
								N =(longMessageLastPtr / (MaxNumOfPorts + 1)) / 2;
 800a6c4:	2116      	movs	r1, #22
 800a6c6:	0020      	movs	r0, r4
 800a6c8:	f7f5 fd42 	bl	8000150 <__udivsi3>
 800a6cc:	4b9a      	ldr	r3, [pc, #616]	; (800a938 <PxMessagingTask+0x7a0>)
 800a6ce:	7018      	strb	r0, [r3, #0]
								memcpy(&array,&longMessageScratchpad,longMessageLastPtr);
 800a6d0:	0022      	movs	r2, r4
 800a6d2:	4649      	mov	r1, r9
 800a6d4:	4899      	ldr	r0, [pc, #612]	; (800a93c <PxMessagingTask+0x7a4>)
 800a6d6:	f00a f966 	bl	80149a6 <memcpy>
								longMessageLastPtr =0;
 800a6da:	2400      	movs	r4, #0
 800a6dc:	465b      	mov	r3, fp
 800a6de:	801c      	strh	r4, [r3, #0]
 800a6e0:	46a1      	mov	r9, r4
 800a6e2:	e5c5      	b.n	800a270 <PxMessagingTask+0xd8>
							for(p =1; p <= NumOfPorts; p++){
 800a6e4:	2401      	movs	r4, #1
							temp =0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	9305      	str	r3, [sp, #20]
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a6ea:	2780      	movs	r7, #128	; 0x80
 800a6ec:	023f      	lsls	r7, r7, #8
 800a6ee:	e003      	b.n	800a6f8 <PxMessagingTask+0x560>
							for(p =1; p <= NumOfPorts; p++){
 800a6f0:	3401      	adds	r4, #1
 800a6f2:	b2e4      	uxtb	r4, r4
 800a6f4:	2c07      	cmp	r4, #7
 800a6f6:	d00c      	beq.n	800a712 <PxMessagingTask+0x57a>
								if(GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE){
 800a6f8:	0020      	movs	r0, r4
 800a6fa:	f004 f8b5 	bl	800e868 <GetUart>
 800a6fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a700:	42bb      	cmp	r3, r7
 800a702:	d1f5      	bne.n	800a6f0 <PxMessagingTask+0x558>
									messageParams[temp++] =p;
 800a704:	9a05      	ldr	r2, [sp, #20]
 800a706:	1c53      	adds	r3, r2, #1
 800a708:	4987      	ldr	r1, [pc, #540]	; (800a928 <PxMessagingTask+0x790>)
 800a70a:	548c      	strb	r4, [r1, r2]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	9305      	str	r3, [sp, #20]
 800a710:	e7ee      	b.n	800a6f0 <PxMessagingTask+0x558>
							SendMessageToModule(src,CODE_READ_PORT_DIR_RESPONSE,temp);
 800a712:	466b      	mov	r3, sp
 800a714:	8a9a      	ldrh	r2, [r3, #20]
 800a716:	2114      	movs	r1, #20
 800a718:	9804      	ldr	r0, [sp, #16]
 800a71a:	f7ff fa23 	bl	8009b64 <SendMessageToModule>
							break;
 800a71e:	2300      	movs	r3, #0
 800a720:	4699      	mov	r9, r3
 800a722:	e5a5      	b.n	800a270 <PxMessagingTask+0xd8>
							temp32 =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a724:	4b7c      	ldr	r3, [pc, #496]	; (800a918 <PxMessagingTask+0x780>)
 800a726:	199b      	adds	r3, r3, r6
 800a728:	5d1a      	ldrb	r2, [r3, r4]
 800a72a:	0612      	lsls	r2, r2, #24
 800a72c:	191b      	adds	r3, r3, r4
 800a72e:	78d9      	ldrb	r1, [r3, #3]
 800a730:	1852      	adds	r2, r2, r1
 800a732:	7859      	ldrb	r1, [r3, #1]
 800a734:	0409      	lsls	r1, r1, #16
 800a736:	1852      	adds	r2, r2, r1
 800a738:	7899      	ldrb	r1, [r3, #2]
 800a73a:	0209      	lsls	r1, r1, #8
 800a73c:	1852      	adds	r2, r2, r1
 800a73e:	920b      	str	r2, [sp, #44]	; 0x2c
							if(cMessage[port - 1][4 + shift] == 0xFF) // All ports
 800a740:	791b      	ldrb	r3, [r3, #4]
 800a742:	2bff      	cmp	r3, #255	; 0xff
 800a744:	d01c      	beq.n	800a780 <PxMessagingTask+0x5e8>
								for(p =0; p < numOfParams; p++){
 800a746:	9b06      	ldr	r3, [sp, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d016      	beq.n	800a77a <PxMessagingTask+0x5e2>
 800a74c:	4653      	mov	r3, sl
 800a74e:	1d1f      	adds	r7, r3, #4
 800a750:	193f      	adds	r7, r7, r4
 800a752:	4b71      	ldr	r3, [pc, #452]	; (800a918 <PxMessagingTask+0x780>)
 800a754:	18ff      	adds	r7, r7, r3
 800a756:	3305      	adds	r3, #5
 800a758:	4453      	add	r3, sl
 800a75a:	191c      	adds	r4, r3, r4
 800a75c:	9b06      	ldr	r3, [sp, #24]
 800a75e:	3b01      	subs	r3, #1
 800a760:	b2db      	uxtb	r3, r3
 800a762:	18e4      	adds	r4, r4, r3
									temp =cMessage[port - 1][4 + shift + p];
 800a764:	783b      	ldrb	r3, [r7, #0]
 800a766:	9305      	str	r3, [sp, #20]
									if(temp > 0 && temp <= NumOfPorts){
 800a768:	3b01      	subs	r3, #1
 800a76a:	2b05      	cmp	r3, #5
 800a76c:	d915      	bls.n	800a79a <PxMessagingTask+0x602>
 800a76e:	3701      	adds	r7, #1
								for(p =0; p < numOfParams; p++){
 800a770:	42a7      	cmp	r7, r4
 800a772:	d1f7      	bne.n	800a764 <PxMessagingTask+0x5cc>
 800a774:	2300      	movs	r3, #0
 800a776:	4699      	mov	r9, r3
 800a778:	e57a      	b.n	800a270 <PxMessagingTask+0xd8>
							temp =temp32 =0;
 800a77a:	9305      	str	r3, [sp, #20]
								for(p =0; p < numOfParams; p++){
 800a77c:	4699      	mov	r9, r3
 800a77e:	e577      	b.n	800a270 <PxMessagingTask+0xd8>
								for(p =1; p <= NumOfPorts; p++){
 800a780:	2401      	movs	r4, #1
									UpdateBaudrate(p,temp32);
 800a782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a784:	0020      	movs	r0, r4
 800a786:	f004 f8ff 	bl	800e988 <UpdateBaudrate>
								for(p =1; p <= NumOfPorts; p++){
 800a78a:	3401      	adds	r4, #1
 800a78c:	b2e4      	uxtb	r4, r4
 800a78e:	2c07      	cmp	r4, #7
 800a790:	d1f7      	bne.n	800a782 <PxMessagingTask+0x5ea>
							temp =temp32 =0;
 800a792:	2300      	movs	r3, #0
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	4699      	mov	r9, r3
 800a798:	e56a      	b.n	800a270 <PxMessagingTask+0xd8>
										UpdateBaudrate(temp,temp32);
 800a79a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a79c:	9805      	ldr	r0, [sp, #20]
 800a79e:	f004 f8f3 	bl	800e988 <UpdateBaudrate>
 800a7a2:	e7e4      	b.n	800a76e <PxMessagingTask+0x5d6>
							SaveToRO();
 800a7a4:	f002 f800 	bl	800c7a8 <SaveToRO>
							SaveEEportsDir();
 800a7a8:	f7f8 fe42 	bl	8003430 <SaveEEportsDir>
							indMode =IND_PING;
 800a7ac:	4b64      	ldr	r3, [pc, #400]	; (800a940 <PxMessagingTask+0x7a8>)
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	701a      	strb	r2, [r3, #0]
							break;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	4699      	mov	r9, r3
 800a7b6:	e55b      	b.n	800a270 <PxMessagingTask+0xd8>
							ClearEEportsDir();
 800a7b8:	f7f8 ff30 	bl	800361c <ClearEEportsDir>
							ClearROtopology();
 800a7bc:	f002 f8fc 	bl	800c9b8 <ClearROtopology>
							osDelay(100);
 800a7c0:	2064      	movs	r0, #100	; 0x64
 800a7c2:	f004 f9a0 	bl	800eb06 <osDelay>
							indMode =IND_TOPOLOGY;
 800a7c6:	4b5e      	ldr	r3, [pc, #376]	; (800a940 <PxMessagingTask+0x7a8>)
 800a7c8:	2202      	movs	r2, #2
 800a7ca:	701a      	strb	r2, [r3, #0]
							break;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4699      	mov	r9, r3
 800a7d0:	e54e      	b.n	800a270 <PxMessagingTask+0xd8>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a7d2:	f004 faad 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 800a7d6:	900b      	str	r0, [sp, #44]	; 0x2c
							if(dst == BOS_BROADCAST)
 800a7d8:	465b      	mov	r3, fp
 800a7da:	2bff      	cmp	r3, #255	; 0xff
 800a7dc:	d028      	beq.n	800a830 <PxMessagingTask+0x698>
							else if(dst == BOS_MULTICAST)
 800a7de:	2bfe      	cmp	r3, #254	; 0xfe
 800a7e0:	d02f      	beq.n	800a842 <PxMessagingTask+0x6aa>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a7e2:	4454      	add	r4, sl
 800a7e4:	494c      	ldr	r1, [pc, #304]	; (800a918 <PxMessagingTask+0x780>)
 800a7e6:	1861      	adds	r1, r4, r1
 800a7e8:	9a06      	ldr	r2, [sp, #24]
 800a7ea:	4856      	ldr	r0, [pc, #344]	; (800a944 <PxMessagingTask+0x7ac>)
 800a7ec:	f00a f8db 	bl	80149a6 <memcpy>
								temp =PcPort;
 800a7f0:	4c55      	ldr	r4, [pc, #340]	; (800a948 <PxMessagingTask+0x7b0>)
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a7f2:	4b54      	ldr	r3, [pc, #336]	; (800a944 <PxMessagingTask+0x7ac>)
 800a7f4:	469b      	mov	fp, r3
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a7f6:	4b55      	ldr	r3, [pc, #340]	; (800a94c <PxMessagingTask+0x7b4>)
 800a7f8:	4699      	mov	r9, r3
								temp =PcPort;
 800a7fa:	7823      	ldrb	r3, [r4, #0]
 800a7fc:	9305      	str	r3, [sp, #20]
								PcPort =port;
 800a7fe:	9a08      	ldr	r2, [sp, #32]
 800a800:	7022      	strb	r2, [r4, #0]
								xReturned =FreeRTOS_CLIProcessCommand(cCLIString,pcOutputString,configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800a802:	2299      	movs	r2, #153	; 0x99
 800a804:	0092      	lsls	r2, r2, #2
 800a806:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a808:	4658      	mov	r0, fp
 800a80a:	f004 fa13 	bl	800ec34 <FreeRTOS_CLIProcessCommand>
 800a80e:	0007      	movs	r7, r0
								PcPort =temp;
 800a810:	9b05      	ldr	r3, [sp, #20]
 800a812:	7023      	strb	r3, [r4, #0]
								if(BOSMessaging.response == BOS_RESPONSE_ALL){
 800a814:	464b      	mov	r3, r9
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2b60      	cmp	r3, #96	; 0x60
 800a81a:	d01d      	beq.n	800a858 <PxMessagingTask+0x6c0>
							} while(xReturned != pdFALSE);
 800a81c:	2f00      	cmp	r7, #0
 800a81e:	d1ec      	bne.n	800a7fa <PxMessagingTask+0x662>
							memset(cCLIString,0x00,cmdMAX_INPUT_SIZE);
 800a820:	2232      	movs	r2, #50	; 0x32
 800a822:	2100      	movs	r1, #0
 800a824:	4847      	ldr	r0, [pc, #284]	; (800a944 <PxMessagingTask+0x7ac>)
 800a826:	f00a f8c7 	bl	80149b8 <memset>
							break;
 800a82a:	2300      	movs	r3, #0
 800a82c:	4699      	mov	r9, r3
 800a82e:	e51f      	b.n	800a270 <PxMessagingTask+0xd8>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - 1)); // remove bcastID
 800a830:	9a06      	ldr	r2, [sp, #24]
 800a832:	3a01      	subs	r2, #1
 800a834:	4454      	add	r4, sl
 800a836:	4938      	ldr	r1, [pc, #224]	; (800a918 <PxMessagingTask+0x780>)
 800a838:	1861      	adds	r1, r4, r1
 800a83a:	4842      	ldr	r0, [pc, #264]	; (800a944 <PxMessagingTask+0x7ac>)
 800a83c:	f00a f8b3 	bl	80149a6 <memcpy>
 800a840:	e7d6      	b.n	800a7f0 <PxMessagingTask+0x658>
								memcpy(cCLIString,&cMessage[port - 1][shift],(size_t )(numOfParams - temp - 2)); // remove bcastID + groupm members + group count
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	9a05      	ldr	r2, [sp, #20]
 800a846:	1a9a      	subs	r2, r3, r2
 800a848:	3a02      	subs	r2, #2
 800a84a:	4454      	add	r4, sl
 800a84c:	4932      	ldr	r1, [pc, #200]	; (800a918 <PxMessagingTask+0x780>)
 800a84e:	1861      	adds	r1, r4, r1
 800a850:	483c      	ldr	r0, [pc, #240]	; (800a944 <PxMessagingTask+0x7ac>)
 800a852:	f00a f8a8 	bl	80149a6 <memcpy>
 800a856:	e7cb      	b.n	800a7f0 <PxMessagingTask+0x658>
									memcpy(messageParams,pcOutputString,strlen((char* )pcOutputString));
 800a858:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a85a:	f7f5 fc5d 	bl	8000118 <strlen>
 800a85e:	0002      	movs	r2, r0
 800a860:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a862:	4831      	ldr	r0, [pc, #196]	; (800a928 <PxMessagingTask+0x790>)
 800a864:	f00a f89f 	bl	80149a6 <memcpy>
									SendMessageToModule(src,CODE_CLI_RESPONSE,strlen((char* )pcOutputString));
 800a868:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800a86a:	f7f5 fc55 	bl	8000118 <strlen>
 800a86e:	b282      	uxth	r2, r0
 800a870:	2118      	movs	r1, #24
 800a872:	9804      	ldr	r0, [sp, #16]
 800a874:	f7ff f976 	bl	8009b64 <SendMessageToModule>
									osDelay(10);
 800a878:	200a      	movs	r0, #10
 800a87a:	f004 f944 	bl	800eb06 <osDelay>
 800a87e:	e7cd      	b.n	800a81c <PxMessagingTask+0x684>
							pcOutputString =FreeRTOS_CLIGetOutputBuffer();
 800a880:	f004 fa56 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 800a884:	0007      	movs	r7, r0
							memset(pcOutputString,0x00,strlen((char* )pcOutputString));
 800a886:	f7f5 fc47 	bl	8000118 <strlen>
 800a88a:	0002      	movs	r2, r0
 800a88c:	2100      	movs	r1, #0
 800a88e:	0038      	movs	r0, r7
 800a890:	f00a f892 	bl	80149b8 <memset>
							if(longMessage){
 800a894:	4b25      	ldr	r3, [pc, #148]	; (800a92c <PxMessagingTask+0x794>)
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d013      	beq.n	800a8c4 <PxMessagingTask+0x72c>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a89c:	4b24      	ldr	r3, [pc, #144]	; (800a930 <PxMessagingTask+0x798>)
 800a89e:	4699      	mov	r9, r3
 800a8a0:	8818      	ldrh	r0, [r3, #0]
 800a8a2:	1838      	adds	r0, r7, r0
 800a8a4:	4454      	add	r4, sl
 800a8a6:	491c      	ldr	r1, [pc, #112]	; (800a918 <PxMessagingTask+0x780>)
 800a8a8:	1861      	adds	r1, r4, r1
 800a8aa:	9c06      	ldr	r4, [sp, #24]
 800a8ac:	0022      	movs	r2, r4
 800a8ae:	f00a f87a 	bl	80149a6 <memcpy>
								longMessageLastPtr +=numOfParams;
 800a8b2:	464b      	mov	r3, r9
 800a8b4:	881a      	ldrh	r2, [r3, #0]
 800a8b6:	46a4      	mov	ip, r4
 800a8b8:	4462      	add	r2, ip
 800a8ba:	464b      	mov	r3, r9
 800a8bc:	801a      	strh	r2, [r3, #0]
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4699      	mov	r9, r3
 800a8c2:	e4d5      	b.n	800a270 <PxMessagingTask+0xd8>
								memcpy(&pcOutputString[0] + longMessageLastPtr,&cMessage[port - 1][shift],(size_t )numOfParams);
 800a8c4:	4b1a      	ldr	r3, [pc, #104]	; (800a930 <PxMessagingTask+0x798>)
 800a8c6:	4699      	mov	r9, r3
 800a8c8:	8818      	ldrh	r0, [r3, #0]
 800a8ca:	1838      	adds	r0, r7, r0
 800a8cc:	4454      	add	r4, sl
 800a8ce:	4912      	ldr	r1, [pc, #72]	; (800a918 <PxMessagingTask+0x780>)
 800a8d0:	1861      	adds	r1, r4, r1
 800a8d2:	9a06      	ldr	r2, [sp, #24]
 800a8d4:	f00a f867 	bl	80149a6 <memcpy>
								longMessageLastPtr =0;
 800a8d8:	2400      	movs	r4, #0
 800a8da:	464b      	mov	r3, r9
 800a8dc:	801c      	strh	r4, [r3, #0]
								responseStatus =BOS_OK;
 800a8de:	4b10      	ldr	r3, [pc, #64]	; (800a920 <PxMessagingTask+0x788>)
 800a8e0:	701c      	strb	r4, [r3, #0]
								xTaskNotify((xCommandConsoleTaskHandle),0,eNoAction); // Notify the task without modifying its notification value
 800a8e2:	0023      	movs	r3, r4
 800a8e4:	0022      	movs	r2, r4
 800a8e6:	0021      	movs	r1, r4
 800a8e8:	4819      	ldr	r0, [pc, #100]	; (800a950 <PxMessagingTask+0x7b8>)
 800a8ea:	6800      	ldr	r0, [r0, #0]
 800a8ec:	f005 fd2a 	bl	8010344 <xTaskGenericNotify>
 800a8f0:	46a1      	mov	r9, r4
 800a8f2:	e4bd      	b.n	800a270 <PxMessagingTask+0xd8>
							*((unsigned long* )0x20007FF0) =0xDEADBEEF;
 800a8f4:	4b17      	ldr	r3, [pc, #92]	; (800a954 <PxMessagingTask+0x7bc>)
 800a8f6:	4a18      	ldr	r2, [pc, #96]	; (800a958 <PxMessagingTask+0x7c0>)
 800a8f8:	601a      	str	r2, [r3, #0]
							indMode =IND_PING;
 800a8fa:	4b11      	ldr	r3, [pc, #68]	; (800a940 <PxMessagingTask+0x7a8>)
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	701a      	strb	r2, [r3, #0]
							osDelay(10);
 800a900:	200a      	movs	r0, #10
 800a902:	f004 f900 	bl	800eb06 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	4b14      	ldr	r3, [pc, #80]	; (800a95c <PxMessagingTask+0x7c4>)
 800a90c:	4a14      	ldr	r2, [pc, #80]	; (800a960 <PxMessagingTask+0x7c8>)
 800a90e:	60da      	str	r2, [r3, #12]
 800a910:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a914:	46c0      	nop			; (mov r8, r8)
 800a916:	e7fd      	b.n	800a914 <PxMessagingTask+0x77c>
 800a918:	20000d7c 	.word	0x20000d7c
 800a91c:	20001104 	.word	0x20001104
 800a920:	20001188 	.word	0x20001188
 800a924:	200010ea 	.word	0x200010ea
 800a928:	20000fac 	.word	0x20000fac
 800a92c:	20000f69 	.word	0x20000f69
 800a930:	20000f6a 	.word	0x20000f6a
 800a934:	20001a80 	.word	0x20001a80
 800a938:	20000044 	.word	0x20000044
 800a93c:	20000aec 	.word	0x20000aec
 800a940:	20000f68 	.word	0x20000f68
 800a944:	20001a4c 	.word	0x20001a4c
 800a948:	20000ae8 	.word	0x20000ae8
 800a94c:	20006dd4 	.word	0x20006dd4
 800a950:	2000195c 	.word	0x2000195c
 800a954:	20007ff0 	.word	0x20007ff0
 800a958:	deadbeef 	.word	0xdeadbeef
 800a95c:	e000ed00 	.word	0xe000ed00
 800a960:	05fa0004 	.word	0x05fa0004
							SendMessageFromPort(cMessage[port - 1][shift],0,0,CODE_UPDATE,0);
 800a964:	4fec      	ldr	r7, [pc, #944]	; (800ad18 <PxMessagingTask+0xb80>)
 800a966:	19bf      	adds	r7, r7, r6
 800a968:	5d38      	ldrb	r0, [r7, r4]
 800a96a:	2300      	movs	r3, #0
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	3319      	adds	r3, #25
 800a970:	2200      	movs	r2, #0
 800a972:	2100      	movs	r1, #0
 800a974:	f7fe fe70 	bl	8009658 <SendMessageFromPort>
							osDelay(100);
 800a978:	2064      	movs	r0, #100	; 0x64
 800a97a:	f004 f8c4 	bl	800eb06 <osDelay>
							remoteBootloaderUpdate(src,myID,port,cMessage[port - 1][shift]);
 800a97e:	5d3b      	ldrb	r3, [r7, r4]
 800a980:	4ae6      	ldr	r2, [pc, #920]	; (800ad1c <PxMessagingTask+0xb84>)
 800a982:	7811      	ldrb	r1, [r2, #0]
 800a984:	9a08      	ldr	r2, [sp, #32]
 800a986:	9804      	ldr	r0, [sp, #16]
 800a988:	f7f9 f912 	bl	8003bb0 <remoteBootloaderUpdate>
							break;
 800a98c:	2300      	movs	r3, #0
 800a98e:	4699      	mov	r9, r3
 800a990:	e46e      	b.n	800a270 <PxMessagingTask+0xd8>
							temp =cMessage[port - 1][11 + shift];
 800a992:	46a3      	mov	fp, r4
 800a994:	230b      	movs	r3, #11
 800a996:	4699      	mov	r9, r3
 800a998:	44a1      	add	r9, r4
 800a99a:	4bdf      	ldr	r3, [pc, #892]	; (800ad18 <PxMessagingTask+0xb80>)
 800a99c:	199b      	adds	r3, r3, r6
 800a99e:	464a      	mov	r2, r9
 800a9a0:	5c9b      	ldrb	r3, [r3, r2]
 800a9a2:	930b      	str	r3, [sp, #44]	; 0x2c
							if(numOfParams == 15)
 800a9a4:	9b06      	ldr	r3, [sp, #24]
 800a9a6:	2b0f      	cmp	r3, #15
 800a9a8:	d100      	bne.n	800a9ac <PxMessagingTask+0x814>
 800a9aa:	e088      	b.n	800aabe <PxMessagingTask+0x926>
							if(numOfParams == 17)
 800a9ac:	9b06      	ldr	r3, [sp, #24]
 800a9ae:	2b11      	cmp	r3, #17
 800a9b0:	d100      	bne.n	800a9b4 <PxMessagingTask+0x81c>
 800a9b2:	e08c      	b.n	800aace <PxMessagingTask+0x936>
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800a9b4:	465b      	mov	r3, fp
 800a9b6:	1c59      	adds	r1, r3, #1
 800a9b8:	910c      	str	r1, [sp, #48]	; 0x30
 800a9ba:	1c98      	adds	r0, r3, #2
 800a9bc:	900d      	str	r0, [sp, #52]	; 0x34
 800a9be:	1cda      	adds	r2, r3, #3
 800a9c0:	920e      	str	r2, [sp, #56]	; 0x38
 800a9c2:	4bd5      	ldr	r3, [pc, #852]	; (800ad18 <PxMessagingTask+0xb80>)
 800a9c4:	199b      	adds	r3, r3, r6
 800a9c6:	465c      	mov	r4, fp
 800a9c8:	5d1c      	ldrb	r4, [r3, r4]
 800a9ca:	0624      	lsls	r4, r4, #24
 800a9cc:	5c9a      	ldrb	r2, [r3, r2]
 800a9ce:	18a4      	adds	r4, r4, r2
 800a9d0:	5c5a      	ldrb	r2, [r3, r1]
 800a9d2:	0412      	lsls	r2, r2, #16
 800a9d4:	18a4      	adds	r4, r4, r2
 800a9d6:	5c1a      	ldrb	r2, [r3, r0]
 800a9d8:	0212      	lsls	r2, r2, #8
 800a9da:	18a4      	adds	r4, r4, r2
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800a9dc:	465a      	mov	r2, fp
 800a9de:	3204      	adds	r2, #4
 800a9e0:	920f      	str	r2, [sp, #60]	; 0x3c
 800a9e2:	4659      	mov	r1, fp
 800a9e4:	3105      	adds	r1, #5
 800a9e6:	9110      	str	r1, [sp, #64]	; 0x40
 800a9e8:	4658      	mov	r0, fp
 800a9ea:	3006      	adds	r0, #6
 800a9ec:	9011      	str	r0, [sp, #68]	; 0x44
 800a9ee:	465f      	mov	r7, fp
 800a9f0:	3707      	adds	r7, #7
 800a9f2:	9705      	str	r7, [sp, #20]
 800a9f4:	5c9f      	ldrb	r7, [r3, r2]
 800a9f6:	063f      	lsls	r7, r7, #24
 800a9f8:	5c5a      	ldrb	r2, [r3, r1]
 800a9fa:	0412      	lsls	r2, r2, #16
 800a9fc:	18bf      	adds	r7, r7, r2
 800a9fe:	9a05      	ldr	r2, [sp, #20]
 800aa00:	5c9a      	ldrb	r2, [r3, r2]
 800aa02:	18bf      	adds	r7, r7, r2
 800aa04:	5c1b      	ldrb	r3, [r3, r0]
 800aa06:	021b      	lsls	r3, r3, #8
 800aa08:	18ff      	adds	r7, r7, r3
							if(temp == false){
 800aa0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d166      	bne.n	800aade <PxMessagingTask+0x946>
								if(cMessage[port - 1][9 + shift] && cMessage[port - 1][10 + shift])
 800aa10:	4bc1      	ldr	r3, [pc, #772]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa12:	199b      	adds	r3, r3, r6
 800aa14:	445b      	add	r3, fp
 800aa16:	7a5b      	ldrb	r3, [r3, #9]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d012      	beq.n	800aa42 <PxMessagingTask+0x8aa>
 800aa1c:	2138      	movs	r1, #56	; 0x38
 800aa1e:	4369      	muls	r1, r5
 800aa20:	4abd      	ldr	r2, [pc, #756]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa22:	1852      	adds	r2, r2, r1
 800aa24:	445a      	add	r2, fp
 800aa26:	7a91      	ldrb	r1, [r2, #10]
 800aa28:	2900      	cmp	r1, #0
 800aa2a:	d00a      	beq.n	800aa42 <PxMessagingTask+0x8aa>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][9 + shift],cMessage[port - 1][10 + shift]);
 800aa2c:	2038      	movs	r0, #56	; 0x38
 800aa2e:	4368      	muls	r0, r5
 800aa30:	4ab9      	ldr	r2, [pc, #740]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa32:	1812      	adds	r2, r2, r0
 800aa34:	445a      	add	r2, fp
 800aa36:	7a10      	ldrb	r0, [r2, #8]
 800aa38:	9100      	str	r1, [sp, #0]
 800aa3a:	003a      	movs	r2, r7
 800aa3c:	0021      	movs	r1, r4
 800aa3e:	f7fe fce9 	bl	8009414 <SetupDMAStreams>
								if(cMessage[port - 1][11 + shift] && cMessage[port - 1][12 + shift])
 800aa42:	4bb5      	ldr	r3, [pc, #724]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa44:	199b      	adds	r3, r3, r6
 800aa46:	464a      	mov	r2, r9
 800aa48:	5c9b      	ldrb	r3, [r3, r2]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d012      	beq.n	800aa74 <PxMessagingTask+0x8dc>
 800aa4e:	2138      	movs	r1, #56	; 0x38
 800aa50:	4369      	muls	r1, r5
 800aa52:	4ab1      	ldr	r2, [pc, #708]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa54:	1852      	adds	r2, r2, r1
 800aa56:	445a      	add	r2, fp
 800aa58:	7b11      	ldrb	r1, [r2, #12]
 800aa5a:	2900      	cmp	r1, #0
 800aa5c:	d00a      	beq.n	800aa74 <PxMessagingTask+0x8dc>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][11 + shift],cMessage[port - 1][12 + shift]);
 800aa5e:	2038      	movs	r0, #56	; 0x38
 800aa60:	4368      	muls	r0, r5
 800aa62:	4aad      	ldr	r2, [pc, #692]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa64:	1812      	adds	r2, r2, r0
 800aa66:	445a      	add	r2, fp
 800aa68:	7a10      	ldrb	r0, [r2, #8]
 800aa6a:	9100      	str	r1, [sp, #0]
 800aa6c:	003a      	movs	r2, r7
 800aa6e:	0021      	movs	r1, r4
 800aa70:	f7fe fcd0 	bl	8009414 <SetupDMAStreams>
								if(cMessage[port - 1][13 + shift] && cMessage[port - 1][14 + shift])
 800aa74:	4ba8      	ldr	r3, [pc, #672]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa76:	199b      	adds	r3, r3, r6
 800aa78:	445b      	add	r3, fp
 800aa7a:	7b5b      	ldrb	r3, [r3, #13]
 800aa7c:	9305      	str	r3, [sp, #20]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	4691      	mov	r9, r2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d101      	bne.n	800aa8a <PxMessagingTask+0x8f2>
 800aa86:	f7ff fbf3 	bl	800a270 <PxMessagingTask+0xd8>
 800aa8a:	3238      	adds	r2, #56	; 0x38
 800aa8c:	436a      	muls	r2, r5
 800aa8e:	4ba2      	ldr	r3, [pc, #648]	; (800ad18 <PxMessagingTask+0xb80>)
 800aa90:	189b      	adds	r3, r3, r2
 800aa92:	445b      	add	r3, fp
 800aa94:	7b9a      	ldrb	r2, [r3, #14]
 800aa96:	454a      	cmp	r2, r9
 800aa98:	d101      	bne.n	800aa9e <PxMessagingTask+0x906>
 800aa9a:	f000 fec3 	bl	800b824 <PxMessagingTask+0x168c>
									SetupDMAStreams(cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][13 + shift],cMessage[port - 1][14 + shift]);
 800aa9e:	2138      	movs	r1, #56	; 0x38
 800aaa0:	4369      	muls	r1, r5
 800aaa2:	4b9d      	ldr	r3, [pc, #628]	; (800ad18 <PxMessagingTask+0xb80>)
 800aaa4:	185b      	adds	r3, r3, r1
 800aaa6:	445b      	add	r3, fp
 800aaa8:	7a18      	ldrb	r0, [r3, #8]
 800aaaa:	9200      	str	r2, [sp, #0]
 800aaac:	9b05      	ldr	r3, [sp, #20]
 800aaae:	003a      	movs	r2, r7
 800aab0:	0021      	movs	r1, r4
 800aab2:	f7fe fcaf 	bl	8009414 <SetupDMAStreams>
 800aab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aab8:	9305      	str	r3, [sp, #20]
 800aaba:	f7ff fbd9 	bl	800a270 <PxMessagingTask+0xd8>
								temp =cMessage[port - 1][13 + shift];
 800aabe:	2238      	movs	r2, #56	; 0x38
 800aac0:	436a      	muls	r2, r5
 800aac2:	4b95      	ldr	r3, [pc, #596]	; (800ad18 <PxMessagingTask+0xb80>)
 800aac4:	189b      	adds	r3, r3, r2
 800aac6:	191c      	adds	r4, r3, r4
 800aac8:	7b63      	ldrb	r3, [r4, #13]
 800aaca:	930b      	str	r3, [sp, #44]	; 0x2c
 800aacc:	e772      	b.n	800a9b4 <PxMessagingTask+0x81c>
								temp =cMessage[port - 1][15 + shift];
 800aace:	2238      	movs	r2, #56	; 0x38
 800aad0:	436a      	muls	r2, r5
 800aad2:	4b91      	ldr	r3, [pc, #580]	; (800ad18 <PxMessagingTask+0xb80>)
 800aad4:	189b      	adds	r3, r3, r2
 800aad6:	445b      	add	r3, fp
 800aad8:	7bdb      	ldrb	r3, [r3, #15]
 800aada:	930b      	str	r3, [sp, #44]	; 0x2c
 800aadc:	e76a      	b.n	800a9b4 <PxMessagingTask+0x81c>
								EE_WriteVariable(_EE_DMA_STREAM_BASE,cMessage[port - 1][8 + shift]); /* Direction */
 800aade:	2338      	movs	r3, #56	; 0x38
 800aae0:	436b      	muls	r3, r5
 800aae2:	4c8d      	ldr	r4, [pc, #564]	; (800ad18 <PxMessagingTask+0xb80>)
 800aae4:	18e4      	adds	r4, r4, r3
 800aae6:	465b      	mov	r3, fp
 800aae8:	18e6      	adds	r6, r4, r3
 800aaea:	7a31      	ldrb	r1, [r6, #8]
 800aaec:	20e4      	movs	r0, #228	; 0xe4
 800aaee:	f7fc fea1 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 1,((uint16_t )cMessage[port - 1][shift] << 8) + cMessage[port - 1][1 + shift]); /* Count high half-word */
 800aaf2:	465b      	mov	r3, fp
 800aaf4:	5ce3      	ldrb	r3, [r4, r3]
 800aaf6:	021b      	lsls	r3, r3, #8
 800aaf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aafa:	5ca1      	ldrb	r1, [r4, r2]
 800aafc:	18c9      	adds	r1, r1, r3
 800aafe:	b289      	uxth	r1, r1
 800ab00:	20e5      	movs	r0, #229	; 0xe5
 800ab02:	f7fc fe97 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 2,((uint16_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift]); /* Count low half-word */
 800ab06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab08:	5ce3      	ldrb	r3, [r4, r3]
 800ab0a:	021b      	lsls	r3, r3, #8
 800ab0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab0e:	5ca1      	ldrb	r1, [r4, r2]
 800ab10:	18c9      	adds	r1, r1, r3
 800ab12:	b289      	uxth	r1, r1
 800ab14:	20e6      	movs	r0, #230	; 0xe6
 800ab16:	f7fc fe8d 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 3,((uint16_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift]); /* Timeout high half-word */
 800ab1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab1c:	5ce3      	ldrb	r3, [r4, r3]
 800ab1e:	021b      	lsls	r3, r3, #8
 800ab20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab22:	5ca1      	ldrb	r1, [r4, r2]
 800ab24:	18c9      	adds	r1, r1, r3
 800ab26:	b289      	uxth	r1, r1
 800ab28:	20e7      	movs	r0, #231	; 0xe7
 800ab2a:	f7fc fe83 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 4,((uint16_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift]); /* Timeout low half-word */
 800ab2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab30:	5ce3      	ldrb	r3, [r4, r3]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	9a05      	ldr	r2, [sp, #20]
 800ab36:	5ca1      	ldrb	r1, [r4, r2]
 800ab38:	18c9      	adds	r1, r1, r3
 800ab3a:	b289      	uxth	r1, r1
 800ab3c:	20e8      	movs	r0, #232	; 0xe8
 800ab3e:	f7fc fe79 	bl	8007834 <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE + 5,((uint16_t )cMessage[port - 1][9 + shift] << 8) + cMessage[port - 1][10 + shift]); /* src1 | dst1 */
 800ab42:	7a73      	ldrb	r3, [r6, #9]
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	7ab1      	ldrb	r1, [r6, #10]
 800ab48:	18c9      	adds	r1, r1, r3
 800ab4a:	b289      	uxth	r1, r1
 800ab4c:	20e9      	movs	r0, #233	; 0xe9
 800ab4e:	f7fc fe71 	bl	8007834 <EE_WriteVariable>
								if(numOfParams == 19)
 800ab52:	9b06      	ldr	r3, [sp, #24]
 800ab54:	2b13      	cmp	r3, #19
 800ab56:	d116      	bne.n	800ab86 <PxMessagingTask+0x9ee>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 6,((uint16_t )cMessage[port - 1][11 + shift] << 8) + cMessage[port - 1][12 + shift]); /* src2 | dst2 */
 800ab58:	3325      	adds	r3, #37	; 0x25
 800ab5a:	436b      	muls	r3, r5
 800ab5c:	4d6e      	ldr	r5, [pc, #440]	; (800ad18 <PxMessagingTask+0xb80>)
 800ab5e:	18ed      	adds	r5, r5, r3
 800ab60:	464b      	mov	r3, r9
 800ab62:	5ceb      	ldrb	r3, [r5, r3]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	445d      	add	r5, fp
 800ab68:	7b29      	ldrb	r1, [r5, #12]
 800ab6a:	18c9      	adds	r1, r1, r3
 800ab6c:	b289      	uxth	r1, r1
 800ab6e:	20ea      	movs	r0, #234	; 0xea
 800ab70:	f7fc fe60 	bl	8007834 <EE_WriteVariable>
  __ASM volatile ("dsb 0xF":::"memory");
 800ab74:	f3bf 8f4f 	dsb	sy
 800ab78:	4b69      	ldr	r3, [pc, #420]	; (800ad20 <PxMessagingTask+0xb88>)
 800ab7a:	4a6a      	ldr	r2, [pc, #424]	; (800ad24 <PxMessagingTask+0xb8c>)
 800ab7c:	60da      	str	r2, [r3, #12]
 800ab7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800ab82:	46c0      	nop			; (mov r8, r8)
 800ab84:	e7fd      	b.n	800ab82 <PxMessagingTask+0x9ea>
								if(numOfParams == 21)
 800ab86:	9b06      	ldr	r3, [sp, #24]
 800ab88:	2b15      	cmp	r3, #21
 800ab8a:	d1f3      	bne.n	800ab74 <PxMessagingTask+0x9dc>
									EE_WriteVariable(_EE_DMA_STREAM_BASE + 7,((uint16_t )cMessage[port - 1][13 + shift] << 8) + cMessage[port - 1][14 + shift]); /* src3 | dst3 */
 800ab8c:	3323      	adds	r3, #35	; 0x23
 800ab8e:	435d      	muls	r5, r3
 800ab90:	4b61      	ldr	r3, [pc, #388]	; (800ad18 <PxMessagingTask+0xb80>)
 800ab92:	195b      	adds	r3, r3, r5
 800ab94:	445b      	add	r3, fp
 800ab96:	7b5a      	ldrb	r2, [r3, #13]
 800ab98:	0212      	lsls	r2, r2, #8
 800ab9a:	7b99      	ldrb	r1, [r3, #14]
 800ab9c:	1889      	adds	r1, r1, r2
 800ab9e:	b289      	uxth	r1, r1
 800aba0:	20eb      	movs	r0, #235	; 0xeb
 800aba2:	f7fc fe47 	bl	8007834 <EE_WriteVariable>
 800aba6:	e7e5      	b.n	800ab74 <PxMessagingTask+0x9dc>
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800aba8:	4f5b      	ldr	r7, [pc, #364]	; (800ad18 <PxMessagingTask+0xb80>)
 800abaa:	19bf      	adds	r7, r7, r6
 800abac:	1939      	adds	r1, r7, r4
 800abae:	7a8b      	ldrb	r3, [r1, #10]
 800abb0:	9306      	str	r3, [sp, #24]
 800abb2:	7aca      	ldrb	r2, [r1, #11]
 800abb4:	4859      	ldr	r0, [pc, #356]	; (800ad1c <PxMessagingTask+0xb84>)
 800abb6:	7803      	ldrb	r3, [r0, #0]
 800abb8:	4699      	mov	r9, r3
 800abba:	7a4b      	ldrb	r3, [r1, #9]
 800abbc:	469b      	mov	fp, r3
 800abbe:	7b08      	ldrb	r0, [r1, #12]
 800abc0:	0003      	movs	r3, r0
 800abc2:	1e58      	subs	r0, r3, #1
 800abc4:	4183      	sbcs	r3, r0
 800abc6:	9303      	str	r3, [sp, #12]
							timeout =((uint32_t )cMessage[port - 1][4 + shift] << 24) + ((uint32_t )cMessage[port - 1][5 + shift] << 16) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + cMessage[port - 1][7 + shift];
 800abc8:	7908      	ldrb	r0, [r1, #4]
 800abca:	0603      	lsls	r3, r0, #24
 800abcc:	469c      	mov	ip, r3
 800abce:	7948      	ldrb	r0, [r1, #5]
 800abd0:	0400      	lsls	r0, r0, #16
 800abd2:	4460      	add	r0, ip
 800abd4:	79cb      	ldrb	r3, [r1, #7]
 800abd6:	469c      	mov	ip, r3
 800abd8:	4460      	add	r0, ip
 800abda:	798b      	ldrb	r3, [r1, #6]
 800abdc:	021b      	lsls	r3, r3, #8
 800abde:	469c      	mov	ip, r3
 800abe0:	4460      	add	r0, ip
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800abe2:	9002      	str	r0, [sp, #8]
							count =((uint32_t )cMessage[port - 1][shift] << 24) + ((uint32_t )cMessage[port - 1][1 + shift] << 16) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + cMessage[port - 1][3 + shift];
 800abe4:	5d38      	ldrb	r0, [r7, r4]
 800abe6:	0600      	lsls	r0, r0, #24
 800abe8:	78cc      	ldrb	r4, [r1, #3]
 800abea:	1900      	adds	r0, r0, r4
 800abec:	784c      	ldrb	r4, [r1, #1]
 800abee:	0424      	lsls	r4, r4, #16
 800abf0:	1900      	adds	r0, r0, r4
 800abf2:	788c      	ldrb	r4, [r1, #2]
 800abf4:	0224      	lsls	r4, r4, #8
 800abf6:	1900      	adds	r0, r0, r4
							StartScastDMAStream(cMessage[port - 1][9 + shift],myID,cMessage[port - 1][11 + shift],cMessage[port - 1][10 + shift],cMessage[port - 1][8 + shift],count,timeout,cMessage[port - 1][12 + shift]);
 800abf8:	9001      	str	r0, [sp, #4]
 800abfa:	7a09      	ldrb	r1, [r1, #8]
 800abfc:	9100      	str	r1, [sp, #0]
 800abfe:	9b06      	ldr	r3, [sp, #24]
 800ac00:	4649      	mov	r1, r9
 800ac02:	4658      	mov	r0, fp
 800ac04:	f7fe ffd4 	bl	8009bb0 <StartScastDMAStream>
							break;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4699      	mov	r9, r3
 800ac0c:	f7ff fb30 	bl	800a270 <PxMessagingTask+0xd8>
							if(cMessage[port - 1][shift] == REMOTE_MEMORY_ADD) // request for a memory address
 800ac10:	0023      	movs	r3, r4
 800ac12:	4a41      	ldr	r2, [pc, #260]	; (800ad18 <PxMessagingTask+0xb80>)
 800ac14:	1992      	adds	r2, r2, r6
 800ac16:	5d12      	ldrb	r2, [r2, r4]
 800ac18:	2a00      	cmp	r2, #0
 800ac1a:	d000      	beq.n	800ac1e <PxMessagingTask+0xa86>
 800ac1c:	e09a      	b.n	800ad54 <PxMessagingTask+0xbbc>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800ac1e:	3238      	adds	r2, #56	; 0x38
 800ac20:	436a      	muls	r2, r5
 800ac22:	4b3d      	ldr	r3, [pc, #244]	; (800ad18 <PxMessagingTask+0xb80>)
 800ac24:	189b      	adds	r3, r3, r2
 800ac26:	191c      	adds	r4, r3, r4
 800ac28:	78a3      	ldrb	r3, [r4, #2]
 800ac2a:	061b      	lsls	r3, r3, #24
 800ac2c:	78e2      	ldrb	r2, [r4, #3]
 800ac2e:	0412      	lsls	r2, r2, #16
 800ac30:	189b      	adds	r3, r3, r2
 800ac32:	7962      	ldrb	r2, [r4, #5]
 800ac34:	189b      	adds	r3, r3, r2
 800ac36:	7922      	ldrb	r2, [r4, #4]
 800ac38:	0212      	lsls	r2, r2, #8
 800ac3a:	189b      	adds	r3, r3, r2
								switch(cMessage[port - 1][1 + shift]) // requested format
 800ac3c:	7862      	ldrb	r2, [r4, #1]
 800ac3e:	3a01      	subs	r2, #1
 800ac40:	b2d1      	uxtb	r1, r2
 800ac42:	2907      	cmp	r1, #7
 800ac44:	d901      	bls.n	800ac4a <PxMessagingTask+0xab2>
 800ac46:	f000 fdd4 	bl	800b7f2 <PxMessagingTask+0x165a>
 800ac4a:	b2d2      	uxtb	r2, r2
 800ac4c:	0092      	lsls	r2, r2, #2
 800ac4e:	4936      	ldr	r1, [pc, #216]	; (800ad28 <PxMessagingTask+0xb90>)
 800ac50:	588a      	ldr	r2, [r1, r2]
 800ac52:	4697      	mov	pc, r2
										messageParams[0] =*(__IO uint8_t* )temp32;
 800ac54:	781a      	ldrb	r2, [r3, #0]
 800ac56:	4b35      	ldr	r3, [pc, #212]	; (800ad2c <PxMessagingTask+0xb94>)
 800ac58:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	211f      	movs	r1, #31
 800ac5e:	9804      	ldr	r0, [sp, #16]
 800ac60:	f7fe ff80 	bl	8009b64 <SendMessageToModule>
										break;
 800ac64:	2300      	movs	r3, #0
 800ac66:	4699      	mov	r9, r3
 800ac68:	f7ff fb02 	bl	800a270 <PxMessagingTask+0xd8>
										messageParams[0] =*(__IO int8_t* )temp32;
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	4b2f      	ldr	r3, [pc, #188]	; (800ad2c <PxMessagingTask+0xb94>)
 800ac70:	701a      	strb	r2, [r3, #0]
										SendMessageToModule(src,
 800ac72:	2201      	movs	r2, #1
 800ac74:	211f      	movs	r1, #31
 800ac76:	9804      	ldr	r0, [sp, #16]
 800ac78:	f7fe ff74 	bl	8009b64 <SendMessageToModule>
										break;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4699      	mov	r9, r3
 800ac80:	f7ff faf6 	bl	800a270 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ac84:	8819      	ldrh	r1, [r3, #0]
 800ac86:	4a29      	ldr	r2, [pc, #164]	; (800ad2c <PxMessagingTask+0xb94>)
 800ac88:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	0a1b      	lsrs	r3, r3, #8
 800ac8e:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800ac90:	2202      	movs	r2, #2
 800ac92:	211f      	movs	r1, #31
 800ac94:	9804      	ldr	r0, [sp, #16]
 800ac96:	f7fe ff65 	bl	8009b64 <SendMessageToModule>
										break;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	4699      	mov	r9, r3
 800ac9e:	f7ff fae7 	bl	800a270 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800aca2:	8819      	ldrh	r1, [r3, #0]
 800aca4:	4a21      	ldr	r2, [pc, #132]	; (800ad2c <PxMessagingTask+0xb94>)
 800aca6:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	b21b      	sxth	r3, r3
 800acac:	121b      	asrs	r3, r3, #8
 800acae:	7053      	strb	r3, [r2, #1]
										SendMessageToModule(src,
 800acb0:	2202      	movs	r2, #2
 800acb2:	211f      	movs	r1, #31
 800acb4:	9804      	ldr	r0, [sp, #16]
 800acb6:	f7fe ff55 	bl	8009b64 <SendMessageToModule>
										break;
 800acba:	2300      	movs	r3, #0
 800acbc:	4699      	mov	r9, r3
 800acbe:	f7ff fad7 	bl	800a270 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800acc2:	6819      	ldr	r1, [r3, #0]
 800acc4:	4a19      	ldr	r2, [pc, #100]	; (800ad2c <PxMessagingTask+0xb94>)
 800acc6:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800acc8:	6819      	ldr	r1, [r3, #0]
 800acca:	0a09      	lsrs	r1, r1, #8
 800accc:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800acce:	6819      	ldr	r1, [r3, #0]
 800acd0:	0c09      	lsrs	r1, r1, #16
 800acd2:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	0e1b      	lsrs	r3, r3, #24
 800acd8:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800acda:	2204      	movs	r2, #4
 800acdc:	211f      	movs	r1, #31
 800acde:	9804      	ldr	r0, [sp, #16]
 800ace0:	f7fe ff40 	bl	8009b64 <SendMessageToModule>
										break;
 800ace4:	2300      	movs	r3, #0
 800ace6:	4699      	mov	r9, r3
 800ace8:	f7ff fac2 	bl	800a270 <PxMessagingTask+0xd8>
										messageParams[0] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800acec:	6819      	ldr	r1, [r3, #0]
 800acee:	4a0f      	ldr	r2, [pc, #60]	; (800ad2c <PxMessagingTask+0xb94>)
 800acf0:	7011      	strb	r1, [r2, #0]
										messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800acf2:	6819      	ldr	r1, [r3, #0]
 800acf4:	1209      	asrs	r1, r1, #8
 800acf6:	7051      	strb	r1, [r2, #1]
										messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800acf8:	6819      	ldr	r1, [r3, #0]
 800acfa:	1409      	asrs	r1, r1, #16
 800acfc:	7091      	strb	r1, [r2, #2]
										messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	161b      	asrs	r3, r3, #24
 800ad02:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad04:	2204      	movs	r2, #4
 800ad06:	211f      	movs	r1, #31
 800ad08:	9804      	ldr	r0, [sp, #16]
 800ad0a:	f7fe ff2b 	bl	8009b64 <SendMessageToModule>
										break;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	4699      	mov	r9, r3
 800ad12:	f7ff faad 	bl	800a270 <PxMessagingTask+0xd8>
 800ad16:	46c0      	nop			; (mov r8, r8)
 800ad18:	20000d7c 	.word	0x20000d7c
 800ad1c:	200010ea 	.word	0x200010ea
 800ad20:	e000ed00 	.word	0xe000ed00
 800ad24:	05fa0004 	.word	0x05fa0004
 800ad28:	0801bd44 	.word	0x0801bd44
 800ad2c:	20000fac 	.word	0x20000fac
										messageParams[0] =*(__IO uint8_t* )(temp32 + 0);
 800ad30:	7819      	ldrb	r1, [r3, #0]
 800ad32:	4aef      	ldr	r2, [pc, #956]	; (800b0f0 <PxMessagingTask+0xf58>)
 800ad34:	7011      	strb	r1, [r2, #0]
										messageParams[1] =*(__IO uint8_t* )(temp32 + 1);
 800ad36:	7859      	ldrb	r1, [r3, #1]
 800ad38:	7051      	strb	r1, [r2, #1]
										messageParams[2] =*(__IO uint8_t* )(temp32 + 2);
 800ad3a:	7899      	ldrb	r1, [r3, #2]
 800ad3c:	7091      	strb	r1, [r2, #2]
										messageParams[3] =*(__IO uint8_t* )(temp32 + 3);
 800ad3e:	78db      	ldrb	r3, [r3, #3]
 800ad40:	70d3      	strb	r3, [r2, #3]
										SendMessageToModule(src,
 800ad42:	2208      	movs	r2, #8
 800ad44:	211f      	movs	r1, #31
 800ad46:	9804      	ldr	r0, [sp, #16]
 800ad48:	f7fe ff0c 	bl	8009b64 <SendMessageToModule>
										break; // You cannot bitwise floats
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	4699      	mov	r9, r3
 800ad50:	f7ff fa8e 	bl	800a270 <PxMessagingTask+0xd8>
							else if(cMessage[port - 1][shift] == REMOTE_MODULE_PARAM) // request for a Module param
 800ad54:	2a02      	cmp	r2, #2
 800ad56:	d000      	beq.n	800ad5a <PxMessagingTask+0xbc2>
 800ad58:	e09f      	b.n	800ae9a <PxMessagingTask+0xd02>
								cMessage[port - 1][messageLength[port - 1] - 1] =0; // adding string termination
 800ad5a:	48e6      	ldr	r0, [pc, #920]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800ad5c:	3236      	adds	r2, #54	; 0x36
 800ad5e:	436a      	muls	r2, r5
 800ad60:	1882      	adds	r2, r0, r2
 800ad62:	1851      	adds	r1, r2, r1
 800ad64:	3901      	subs	r1, #1
 800ad66:	2200      	movs	r2, #0
 800ad68:	700a      	strb	r2, [r1, #0]
								temp =IsModuleParameter((char* )&cMessage[port - 1][1 + shift]); // extrating module parameter
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	4453      	add	r3, sl
 800ad6e:	1818      	adds	r0, r3, r0
 800ad70:	f7f8 fcfa 	bl	8003768 <IsModuleParameter>
 800ad74:	9005      	str	r0, [sp, #20]
								if(temp == 0){ // Parameter does not exist
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d108      	bne.n	800ad8c <PxMessagingTask+0xbf4>
									SendMessageToModule(src,
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	211f      	movs	r1, #31
 800ad7e:	9804      	ldr	r0, [sp, #16]
 800ad80:	f7fe fef0 	bl	8009b64 <SendMessageToModule>
 800ad84:	2300      	movs	r3, #0
 800ad86:	4699      	mov	r9, r3
 800ad88:	f7ff fa72 	bl	800a270 <PxMessagingTask+0xd8>
									temp32 =(uint32_t )modParam[temp - 1].paramPtr;
 800ad8c:	3801      	subs	r0, #1
 800ad8e:	4ada      	ldr	r2, [pc, #872]	; (800b0f8 <PxMessagingTask+0xf60>)
 800ad90:	210c      	movs	r1, #12
 800ad92:	4341      	muls	r1, r0
 800ad94:	588b      	ldr	r3, [r1, r2]
									messageParams[0] =modParam[temp - 1].paramFormat;
 800ad96:	1852      	adds	r2, r2, r1
 800ad98:	7912      	ldrb	r2, [r2, #4]
 800ad9a:	49d5      	ldr	r1, [pc, #852]	; (800b0f0 <PxMessagingTask+0xf58>)
 800ad9c:	700a      	strb	r2, [r1, #0]
									switch(messageParams[0]) // requested format
 800ad9e:	3a01      	subs	r2, #1
 800ada0:	b2d1      	uxtb	r1, r2
 800ada2:	2907      	cmp	r1, #7
 800ada4:	d901      	bls.n	800adaa <PxMessagingTask+0xc12>
 800ada6:	f000 fd28 	bl	800b7fa <PxMessagingTask+0x1662>
 800adaa:	b2d2      	uxtb	r2, r2
 800adac:	0092      	lsls	r2, r2, #2
 800adae:	49d3      	ldr	r1, [pc, #844]	; (800b0fc <PxMessagingTask+0xf64>)
 800adb0:	588a      	ldr	r2, [r1, r2]
 800adb2:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	4bce      	ldr	r3, [pc, #824]	; (800b0f0 <PxMessagingTask+0xf58>)
 800adb8:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800adba:	2202      	movs	r2, #2
 800adbc:	211f      	movs	r1, #31
 800adbe:	9804      	ldr	r0, [sp, #16]
 800adc0:	f7fe fed0 	bl	8009b64 <SendMessageToModule>
											break;
 800adc4:	2300      	movs	r3, #0
 800adc6:	4699      	mov	r9, r3
 800adc8:	f7ff fa52 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800adcc:	781a      	ldrb	r2, [r3, #0]
 800adce:	4bc8      	ldr	r3, [pc, #800]	; (800b0f0 <PxMessagingTask+0xf58>)
 800add0:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800add2:	2202      	movs	r2, #2
 800add4:	211f      	movs	r1, #31
 800add6:	9804      	ldr	r0, [sp, #16]
 800add8:	f7fe fec4 	bl	8009b64 <SendMessageToModule>
											break;
 800addc:	2300      	movs	r3, #0
 800adde:	4699      	mov	r9, r3
 800ade0:	f7ff fa46 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800ade4:	8819      	ldrh	r1, [r3, #0]
 800ade6:	4ac2      	ldr	r2, [pc, #776]	; (800b0f0 <PxMessagingTask+0xf58>)
 800ade8:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800adea:	881b      	ldrh	r3, [r3, #0]
 800adec:	0a1b      	lsrs	r3, r3, #8
 800adee:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800adf0:	2203      	movs	r2, #3
 800adf2:	211f      	movs	r1, #31
 800adf4:	9804      	ldr	r0, [sp, #16]
 800adf6:	f7fe feb5 	bl	8009b64 <SendMessageToModule>
											break;
 800adfa:	2300      	movs	r3, #0
 800adfc:	4699      	mov	r9, r3
 800adfe:	f7ff fa37 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800ae02:	8819      	ldrh	r1, [r3, #0]
 800ae04:	4aba      	ldr	r2, [pc, #744]	; (800b0f0 <PxMessagingTask+0xf58>)
 800ae06:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	b21b      	sxth	r3, r3
 800ae0c:	121b      	asrs	r3, r3, #8
 800ae0e:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800ae10:	2203      	movs	r2, #3
 800ae12:	211f      	movs	r1, #31
 800ae14:	9804      	ldr	r0, [sp, #16]
 800ae16:	f7fe fea5 	bl	8009b64 <SendMessageToModule>
											break;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	4699      	mov	r9, r3
 800ae1e:	f7ff fa27 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800ae22:	6819      	ldr	r1, [r3, #0]
 800ae24:	4ab2      	ldr	r2, [pc, #712]	; (800b0f0 <PxMessagingTask+0xf58>)
 800ae26:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800ae28:	6819      	ldr	r1, [r3, #0]
 800ae2a:	0a09      	lsrs	r1, r1, #8
 800ae2c:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800ae2e:	6819      	ldr	r1, [r3, #0]
 800ae30:	0c09      	lsrs	r1, r1, #16
 800ae32:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	0e1b      	lsrs	r3, r3, #24
 800ae38:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae3a:	2205      	movs	r2, #5
 800ae3c:	211f      	movs	r1, #31
 800ae3e:	9804      	ldr	r0, [sp, #16]
 800ae40:	f7fe fe90 	bl	8009b64 <SendMessageToModule>
											break;
 800ae44:	2300      	movs	r3, #0
 800ae46:	4699      	mov	r9, r3
 800ae48:	f7ff fa12 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800ae4c:	6819      	ldr	r1, [r3, #0]
 800ae4e:	4aa8      	ldr	r2, [pc, #672]	; (800b0f0 <PxMessagingTask+0xf58>)
 800ae50:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800ae52:	6819      	ldr	r1, [r3, #0]
 800ae54:	1209      	asrs	r1, r1, #8
 800ae56:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800ae58:	6819      	ldr	r1, [r3, #0]
 800ae5a:	1409      	asrs	r1, r1, #16
 800ae5c:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	161b      	asrs	r3, r3, #24
 800ae62:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae64:	2205      	movs	r2, #5
 800ae66:	211f      	movs	r1, #31
 800ae68:	9804      	ldr	r0, [sp, #16]
 800ae6a:	f7fe fe7b 	bl	8009b64 <SendMessageToModule>
											break;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	4699      	mov	r9, r3
 800ae72:	f7ff f9fd 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800ae76:	7819      	ldrb	r1, [r3, #0]
 800ae78:	4a9d      	ldr	r2, [pc, #628]	; (800b0f0 <PxMessagingTask+0xf58>)
 800ae7a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800ae7c:	7859      	ldrb	r1, [r3, #1]
 800ae7e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800ae80:	7899      	ldrb	r1, [r3, #2]
 800ae82:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800ae84:	78db      	ldrb	r3, [r3, #3]
 800ae86:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800ae88:	2209      	movs	r2, #9
 800ae8a:	211f      	movs	r1, #31
 800ae8c:	9804      	ldr	r0, [sp, #16]
 800ae8e:	f7fe fe69 	bl	8009b64 <SendMessageToModule>
											break;
 800ae92:	2300      	movs	r3, #0
 800ae94:	4699      	mov	r9, r3
 800ae96:	f7ff f9eb 	bl	800a270 <PxMessagingTask+0xd8>
								}
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4699      	mov	r9, r3
							else if(cMessage[port - 1][shift] >= REMOTE_BOS_VAR) // request for a BOS var
 800ae9e:	2a02      	cmp	r2, #2
 800aea0:	d801      	bhi.n	800aea6 <PxMessagingTask+0xd0e>
 800aea2:	f7ff f9e5 	bl	800a270 <PxMessagingTask+0xd8>
								messageParams[0] =BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] & 0x000F; // send variable format (lower 4 bits)
 800aea6:	3a04      	subs	r2, #4
 800aea8:	0092      	lsls	r2, r2, #2
 800aeaa:	4b95      	ldr	r3, [pc, #596]	; (800b100 <PxMessagingTask+0xf68>)
 800aeac:	58d1      	ldr	r1, [r2, r3]
 800aeae:	220f      	movs	r2, #15
 800aeb0:	400a      	ands	r2, r1
 800aeb2:	4b8f      	ldr	r3, [pc, #572]	; (800b0f0 <PxMessagingTask+0xf58>)
 800aeb4:	701a      	strb	r2, [r3, #0]
								if(messageParams[0] == 0){ // Variable does not exist
 800aeb6:	454a      	cmp	r2, r9
 800aeb8:	d106      	bne.n	800aec8 <PxMessagingTask+0xd30>
									SendMessageToModule(src,
 800aeba:	2201      	movs	r2, #1
 800aebc:	211f      	movs	r1, #31
 800aebe:	9804      	ldr	r0, [sp, #16]
 800aec0:	f7fe fe50 	bl	8009b64 <SendMessageToModule>
 800aec4:	f7ff f9d4 	bl	800a270 <PxMessagingTask+0xd8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - REMOTE_BOS_VAR - 1] >> 16) + SRAM_BASE;
 800aec8:	0c09      	lsrs	r1, r1, #16
 800aeca:	2380      	movs	r3, #128	; 0x80
 800aecc:	059b      	lsls	r3, r3, #22
 800aece:	18cb      	adds	r3, r1, r3
									switch(messageParams[0]) // requested format
 800aed0:	3a01      	subs	r2, #1
 800aed2:	b2d0      	uxtb	r0, r2
 800aed4:	2807      	cmp	r0, #7
 800aed6:	d901      	bls.n	800aedc <PxMessagingTask+0xd44>
 800aed8:	f000 fc93 	bl	800b802 <PxMessagingTask+0x166a>
 800aedc:	b2d2      	uxtb	r2, r2
 800aede:	0092      	lsls	r2, r2, #2
 800aee0:	4888      	ldr	r0, [pc, #544]	; (800b104 <PxMessagingTask+0xf6c>)
 800aee2:	5882      	ldr	r2, [r0, r2]
 800aee4:	4697      	mov	pc, r2
											messageParams[1] =*(__IO uint8_t* )temp32;
 800aee6:	781a      	ldrb	r2, [r3, #0]
 800aee8:	4b81      	ldr	r3, [pc, #516]	; (800b0f0 <PxMessagingTask+0xf58>)
 800aeea:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800aeec:	2202      	movs	r2, #2
 800aeee:	211f      	movs	r1, #31
 800aef0:	9804      	ldr	r0, [sp, #16]
 800aef2:	f7fe fe37 	bl	8009b64 <SendMessageToModule>
											break;
 800aef6:	2300      	movs	r3, #0
 800aef8:	4699      	mov	r9, r3
 800aefa:	f7ff f9b9 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO int8_t* )temp32;
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	4b7b      	ldr	r3, [pc, #492]	; (800b0f0 <PxMessagingTask+0xf58>)
 800af02:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src,
 800af04:	2202      	movs	r2, #2
 800af06:	211f      	movs	r1, #31
 800af08:	9804      	ldr	r0, [sp, #16]
 800af0a:	f7fe fe2b 	bl	8009b64 <SendMessageToModule>
											break;
 800af0e:	2300      	movs	r3, #0
 800af10:	4699      	mov	r9, r3
 800af12:	f7ff f9ad 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint16_t* )temp32) >> 0);
 800af16:	8819      	ldrh	r1, [r3, #0]
 800af18:	4a75      	ldr	r2, [pc, #468]	; (800b0f0 <PxMessagingTask+0xf58>)
 800af1a:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint16_t* )temp32) >> 8);
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	0a1b      	lsrs	r3, r3, #8
 800af20:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800af22:	2203      	movs	r2, #3
 800af24:	211f      	movs	r1, #31
 800af26:	9804      	ldr	r0, [sp, #16]
 800af28:	f7fe fe1c 	bl	8009b64 <SendMessageToModule>
											break;
 800af2c:	2300      	movs	r3, #0
 800af2e:	4699      	mov	r9, r3
 800af30:	f7ff f99e 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int16_t* )temp32) >> 0);
 800af34:	8819      	ldrh	r1, [r3, #0]
 800af36:	4a6e      	ldr	r2, [pc, #440]	; (800b0f0 <PxMessagingTask+0xf58>)
 800af38:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int16_t* )temp32) >> 8);
 800af3a:	881b      	ldrh	r3, [r3, #0]
 800af3c:	b21b      	sxth	r3, r3
 800af3e:	121b      	asrs	r3, r3, #8
 800af40:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src,
 800af42:	2203      	movs	r2, #3
 800af44:	211f      	movs	r1, #31
 800af46:	9804      	ldr	r0, [sp, #16]
 800af48:	f7fe fe0c 	bl	8009b64 <SendMessageToModule>
											break;
 800af4c:	2300      	movs	r3, #0
 800af4e:	4699      	mov	r9, r3
 800af50:	f7ff f98e 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO uint32_t* )temp32) >> 0);
 800af54:	6819      	ldr	r1, [r3, #0]
 800af56:	4a66      	ldr	r2, [pc, #408]	; (800b0f0 <PxMessagingTask+0xf58>)
 800af58:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO uint32_t* )temp32) >> 8);
 800af5a:	6819      	ldr	r1, [r3, #0]
 800af5c:	0a09      	lsrs	r1, r1, #8
 800af5e:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO uint32_t* )temp32) >> 16);
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	0c09      	lsrs	r1, r1, #16
 800af64:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO uint32_t* )temp32) >> 24);
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	0e1b      	lsrs	r3, r3, #24
 800af6a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800af6c:	2205      	movs	r2, #5
 800af6e:	211f      	movs	r1, #31
 800af70:	9804      	ldr	r0, [sp, #16]
 800af72:	f7fe fdf7 	bl	8009b64 <SendMessageToModule>
											break;
 800af76:	2300      	movs	r3, #0
 800af78:	4699      	mov	r9, r3
 800af7a:	f7ff f979 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =(uint8_t )((*(__IO int32_t* )temp32) >> 0);
 800af7e:	6819      	ldr	r1, [r3, #0]
 800af80:	4a5b      	ldr	r2, [pc, #364]	; (800b0f0 <PxMessagingTask+0xf58>)
 800af82:	7051      	strb	r1, [r2, #1]
											messageParams[2] =(uint8_t )((*(__IO int32_t* )temp32) >> 8);
 800af84:	6819      	ldr	r1, [r3, #0]
 800af86:	1209      	asrs	r1, r1, #8
 800af88:	7091      	strb	r1, [r2, #2]
											messageParams[3] =(uint8_t )((*(__IO int32_t* )temp32) >> 16);
 800af8a:	6819      	ldr	r1, [r3, #0]
 800af8c:	1409      	asrs	r1, r1, #16
 800af8e:	70d1      	strb	r1, [r2, #3]
											messageParams[4] =(uint8_t )((*(__IO int32_t* )temp32) >> 24);
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	161b      	asrs	r3, r3, #24
 800af94:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src,
 800af96:	2205      	movs	r2, #5
 800af98:	211f      	movs	r1, #31
 800af9a:	9804      	ldr	r0, [sp, #16]
 800af9c:	f7fe fde2 	bl	8009b64 <SendMessageToModule>
											break;
 800afa0:	2300      	movs	r3, #0
 800afa2:	4699      	mov	r9, r3
 800afa4:	f7ff f964 	bl	800a270 <PxMessagingTask+0xd8>
											messageParams[1] =*(__IO uint8_t* )(temp32 + 0);
 800afa8:	781a      	ldrb	r2, [r3, #0]
 800afaa:	4b51      	ldr	r3, [pc, #324]	; (800b0f0 <PxMessagingTask+0xf58>)
 800afac:	705a      	strb	r2, [r3, #1]
											messageParams[2] =*(__IO uint8_t* )(temp32 + 1);
 800afae:	4a56      	ldr	r2, [pc, #344]	; (800b108 <PxMessagingTask+0xf70>)
 800afb0:	188a      	adds	r2, r1, r2
 800afb2:	7812      	ldrb	r2, [r2, #0]
 800afb4:	709a      	strb	r2, [r3, #2]
											messageParams[3] =*(__IO uint8_t* )(temp32 + 2);
 800afb6:	4a55      	ldr	r2, [pc, #340]	; (800b10c <PxMessagingTask+0xf74>)
 800afb8:	188a      	adds	r2, r1, r2
 800afba:	7812      	ldrb	r2, [r2, #0]
 800afbc:	70da      	strb	r2, [r3, #3]
											messageParams[4] =*(__IO uint8_t* )(temp32 + 3); // You cannot bitwise floats
 800afbe:	4a54      	ldr	r2, [pc, #336]	; (800b110 <PxMessagingTask+0xf78>)
 800afc0:	4694      	mov	ip, r2
 800afc2:	4461      	add	r1, ip
 800afc4:	780a      	ldrb	r2, [r1, #0]
 800afc6:	711a      	strb	r2, [r3, #4]
											SendMessageToModule(src,
 800afc8:	2209      	movs	r2, #9
 800afca:	211f      	movs	r1, #31
 800afcc:	9804      	ldr	r0, [sp, #16]
 800afce:	f7fe fdc9 	bl	8009b64 <SendMessageToModule>
											break;
 800afd2:	2300      	movs	r3, #0
 800afd4:	4699      	mov	r9, r3
 800afd6:	f7ff f94b 	bl	800a270 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800afda:	4b4e      	ldr	r3, [pc, #312]	; (800b114 <PxMessagingTask+0xf7c>)
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	2002      	movs	r0, #2
 800afe2:	4240      	negs	r0, r0
 800afe4:	17c1      	asrs	r1, r0, #31
 800afe6:	1812      	adds	r2, r2, r0
 800afe8:	414b      	adcs	r3, r1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00c      	beq.n	800b008 <PxMessagingTask+0xe70>
							if(responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)
 800afee:	4b4a      	ldr	r3, [pc, #296]	; (800b118 <PxMessagingTask+0xf80>)
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	2b10      	cmp	r3, #16
 800aff4:	d101      	bne.n	800affa <PxMessagingTask+0xe62>
 800aff6:	f000 fc1a 	bl	800b82e <PxMessagingTask+0x1696>
								responseStatus =BOS_OK;
 800affa:	4b47      	ldr	r3, [pc, #284]	; (800b118 <PxMessagingTask+0xf80>)
 800affc:	2200      	movs	r2, #0
 800affe:	701a      	strb	r2, [r3, #0]
 800b000:	2300      	movs	r3, #0
 800b002:	4699      	mov	r9, r3
 800b004:	f7ff f934 	bl	800a270 <PxMessagingTask+0xd8>
							if(remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM) // We requested a BOS variable or module param
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d101      	bne.n	800b010 <PxMessagingTask+0xe78>
 800b00c:	2a01      	cmp	r2, #1
 800b00e:	d8ee      	bhi.n	800afee <PxMessagingTask+0xe56>
								remoteVarFormat =(varFormat_t )cMessage[port - 1][shift];
 800b010:	2138      	movs	r1, #56	; 0x38
 800b012:	4369      	muls	r1, r5
 800b014:	4a37      	ldr	r2, [pc, #220]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800b016:	1852      	adds	r2, r2, r1
 800b018:	5d12      	ldrb	r2, [r2, r4]
 800b01a:	4940      	ldr	r1, [pc, #256]	; (800b11c <PxMessagingTask+0xf84>)
 800b01c:	700a      	strb	r2, [r1, #0]
								switch(cMessage[port - 1][shift]) // Remote format
 800b01e:	2a08      	cmp	r2, #8
 800b020:	d8e5      	bhi.n	800afee <PxMessagingTask+0xe56>
 800b022:	0092      	lsls	r2, r2, #2
 800b024:	493e      	ldr	r1, [pc, #248]	; (800b120 <PxMessagingTask+0xf88>)
 800b026:	588a      	ldr	r2, [r1, r2]
 800b028:	4697      	mov	pc, r2
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b02a:	4b3b      	ldr	r3, [pc, #236]	; (800b118 <PxMessagingTask+0xf80>)
 800b02c:	2210      	movs	r2, #16
 800b02e:	701a      	strb	r2, [r3, #0]
 800b030:	2300      	movs	r3, #0
 800b032:	4699      	mov	r9, r3
 800b034:	f7ff f91c 	bl	800a270 <PxMessagingTask+0xd8>
										remoteBuffer =cMessage[port - 1][1 + shift];
 800b038:	4a36      	ldr	r2, [pc, #216]	; (800b114 <PxMessagingTask+0xf7c>)
 800b03a:	2038      	movs	r0, #56	; 0x38
 800b03c:	4368      	muls	r0, r5
 800b03e:	492d      	ldr	r1, [pc, #180]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800b040:	1809      	adds	r1, r1, r0
 800b042:	1909      	adds	r1, r1, r4
 800b044:	784b      	ldrb	r3, [r1, #1]
 800b046:	6013      	str	r3, [r2, #0]
 800b048:	2300      	movs	r3, #0
 800b04a:	6053      	str	r3, [r2, #4]
										break;
 800b04c:	e7cf      	b.n	800afee <PxMessagingTask+0xe56>
										remoteBuffer =(int8_t )cMessage[port - 1][1 + shift];
 800b04e:	4a31      	ldr	r2, [pc, #196]	; (800b114 <PxMessagingTask+0xf7c>)
 800b050:	2038      	movs	r0, #56	; 0x38
 800b052:	4368      	muls	r0, r5
 800b054:	4927      	ldr	r1, [pc, #156]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800b056:	1809      	adds	r1, r1, r0
 800b058:	1909      	adds	r1, r1, r4
 800b05a:	2301      	movs	r3, #1
 800b05c:	56cb      	ldrsb	r3, [r1, r3]
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	17db      	asrs	r3, r3, #31
 800b062:	6053      	str	r3, [r2, #4]
										break;
 800b064:	e7c3      	b.n	800afee <PxMessagingTask+0xe56>
										remoteBuffer =((uint16_t )cMessage[port - 1][1 + shift] << 0) + ((uint16_t )cMessage[port - 1][2 + shift] << 8);
 800b066:	4a2b      	ldr	r2, [pc, #172]	; (800b114 <PxMessagingTask+0xf7c>)
 800b068:	2038      	movs	r0, #56	; 0x38
 800b06a:	4368      	muls	r0, r5
 800b06c:	4921      	ldr	r1, [pc, #132]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800b06e:	1809      	adds	r1, r1, r0
 800b070:	1909      	adds	r1, r1, r4
 800b072:	788b      	ldrb	r3, [r1, #2]
 800b074:	021b      	lsls	r3, r3, #8
 800b076:	7849      	ldrb	r1, [r1, #1]
 800b078:	185b      	adds	r3, r3, r1
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	17db      	asrs	r3, r3, #31
 800b07e:	6053      	str	r3, [r2, #4]
										break;
 800b080:	e7b5      	b.n	800afee <PxMessagingTask+0xe56>
										remoteBuffer =((int16_t )cMessage[port - 1][1 + shift] << 0) + ((int16_t )cMessage[port - 1][2 + shift] << 8);
 800b082:	4a24      	ldr	r2, [pc, #144]	; (800b114 <PxMessagingTask+0xf7c>)
 800b084:	2038      	movs	r0, #56	; 0x38
 800b086:	4368      	muls	r0, r5
 800b088:	491a      	ldr	r1, [pc, #104]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800b08a:	1809      	adds	r1, r1, r0
 800b08c:	1909      	adds	r1, r1, r4
 800b08e:	788b      	ldrb	r3, [r1, #2]
 800b090:	021b      	lsls	r3, r3, #8
 800b092:	7849      	ldrb	r1, [r1, #1]
 800b094:	185b      	adds	r3, r3, r1
 800b096:	6013      	str	r3, [r2, #0]
 800b098:	17db      	asrs	r3, r3, #31
 800b09a:	6053      	str	r3, [r2, #4]
										break;
 800b09c:	e7a7      	b.n	800afee <PxMessagingTask+0xe56>
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b09e:	4a1d      	ldr	r2, [pc, #116]	; (800b114 <PxMessagingTask+0xf7c>)
 800b0a0:	2038      	movs	r0, #56	; 0x38
 800b0a2:	4368      	muls	r0, r5
 800b0a4:	4913      	ldr	r1, [pc, #76]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800b0a6:	1809      	adds	r1, r1, r0
 800b0a8:	1909      	adds	r1, r1, r4
 800b0aa:	788b      	ldrb	r3, [r1, #2]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	78c8      	ldrb	r0, [r1, #3]
 800b0b0:	0400      	lsls	r0, r0, #16
 800b0b2:	181b      	adds	r3, r3, r0
 800b0b4:	7848      	ldrb	r0, [r1, #1]
 800b0b6:	181b      	adds	r3, r3, r0
 800b0b8:	7909      	ldrb	r1, [r1, #4]
 800b0ba:	0609      	lsls	r1, r1, #24
 800b0bc:	185b      	adds	r3, r3, r1
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	6053      	str	r3, [r2, #4]
										break;
 800b0c4:	e793      	b.n	800afee <PxMessagingTask+0xe56>
										remoteBuffer =((int32_t )cMessage[port - 1][1 + shift] << 0) + ((int32_t )cMessage[port - 1][2 + shift] << 8) + ((int32_t )cMessage[port - 1][3 + shift] << 16) + ((int32_t )cMessage[port - 1][4 + shift] << 24);
 800b0c6:	4a13      	ldr	r2, [pc, #76]	; (800b114 <PxMessagingTask+0xf7c>)
 800b0c8:	2038      	movs	r0, #56	; 0x38
 800b0ca:	4368      	muls	r0, r5
 800b0cc:	4909      	ldr	r1, [pc, #36]	; (800b0f4 <PxMessagingTask+0xf5c>)
 800b0ce:	1809      	adds	r1, r1, r0
 800b0d0:	1909      	adds	r1, r1, r4
 800b0d2:	788b      	ldrb	r3, [r1, #2]
 800b0d4:	021b      	lsls	r3, r3, #8
 800b0d6:	7848      	ldrb	r0, [r1, #1]
 800b0d8:	181b      	adds	r3, r3, r0
 800b0da:	78c8      	ldrb	r0, [r1, #3]
 800b0dc:	0400      	lsls	r0, r0, #16
 800b0de:	181b      	adds	r3, r3, r0
 800b0e0:	7909      	ldrb	r1, [r1, #4]
 800b0e2:	0609      	lsls	r1, r1, #24
 800b0e4:	185b      	adds	r3, r3, r1
 800b0e6:	6013      	str	r3, [r2, #0]
 800b0e8:	17db      	asrs	r3, r3, #31
 800b0ea:	6053      	str	r3, [r2, #4]
										break;
 800b0ec:	e77f      	b.n	800afee <PxMessagingTask+0xe56>
 800b0ee:	46c0      	nop			; (mov r8, r8)
 800b0f0:	20000fac 	.word	0x20000fac
 800b0f4:	20000d7c 	.word	0x20000d7c
 800b0f8:	200000ac 	.word	0x200000ac
 800b0fc:	0801bd64 	.word	0x0801bd64
 800b100:	20006ddc 	.word	0x20006ddc
 800b104:	0801bd84 	.word	0x0801bd84
 800b108:	20000001 	.word	0x20000001
 800b10c:	20000002 	.word	0x20000002
 800b110:	20000003 	.word	0x20000003
 800b114:	20001180 	.word	0x20001180
 800b118:	20001188 	.word	0x20001188
 800b11c:	20000098 	.word	0x20000098
 800b120:	0801bda4 	.word	0x0801bda4
										remoteBuffer =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b124:	4ad7      	ldr	r2, [pc, #860]	; (800b484 <PxMessagingTask+0x12ec>)
 800b126:	2038      	movs	r0, #56	; 0x38
 800b128:	4368      	muls	r0, r5
 800b12a:	49d7      	ldr	r1, [pc, #860]	; (800b488 <PxMessagingTask+0x12f0>)
 800b12c:	1809      	adds	r1, r1, r0
 800b12e:	1909      	adds	r1, r1, r4
 800b130:	788b      	ldrb	r3, [r1, #2]
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	78c8      	ldrb	r0, [r1, #3]
 800b136:	0400      	lsls	r0, r0, #16
 800b138:	181b      	adds	r3, r3, r0
 800b13a:	7848      	ldrb	r0, [r1, #1]
 800b13c:	181b      	adds	r3, r3, r0
 800b13e:	7909      	ldrb	r1, [r1, #4]
 800b140:	0609      	lsls	r1, r1, #24
 800b142:	185b      	adds	r3, r3, r1
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	2300      	movs	r3, #0
 800b148:	6053      	str	r3, [r2, #4]
										break;
 800b14a:	e750      	b.n	800afee <PxMessagingTask+0xe56>
							responseStatus =BOS_OK; // Initialize response
 800b14c:	4bcf      	ldr	r3, [pc, #828]	; (800b48c <PxMessagingTask+0x12f4>)
 800b14e:	2200      	movs	r2, #0
 800b150:	701a      	strb	r2, [r3, #0]
							if(cMessage[port - 1][shift]) // request for a BOS var
 800b152:	46a1      	mov	r9, r4
 800b154:	4bcc      	ldr	r3, [pc, #816]	; (800b488 <PxMessagingTask+0x12f0>)
 800b156:	199b      	adds	r3, r3, r6
 800b158:	5d1b      	ldrb	r3, [r3, r4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d100      	bne.n	800b160 <PxMessagingTask+0xfc8>
 800b15e:	e10b      	b.n	800b378 <PxMessagingTask+0x11e0>
								if(cMessage[port - 1][shift] <= MAX_BOS_VARS){
 800b160:	2b1e      	cmp	r3, #30
 800b162:	d900      	bls.n	800b166 <PxMessagingTask+0xfce>
 800b164:	e104      	b.n	800b370 <PxMessagingTask+0x11d8>
									temp32 =(BOS_var_reg[cMessage[port - 1][shift] - 1] >> 16) + SRAM_BASE; // Get var memory addres
 800b166:	1e5c      	subs	r4, r3, #1
 800b168:	00a2      	lsls	r2, r4, #2
 800b16a:	4bc9      	ldr	r3, [pc, #804]	; (800b490 <PxMessagingTask+0x12f8>)
 800b16c:	58d1      	ldr	r1, [r2, r3]
 800b16e:	0c0b      	lsrs	r3, r1, #16
 800b170:	2280      	movs	r2, #128	; 0x80
 800b172:	0592      	lsls	r2, r2, #22
 800b174:	4694      	mov	ip, r2
 800b176:	4463      	add	r3, ip
									switch(cMessage[port - 1][1 + shift]) // requested format
 800b178:	464a      	mov	r2, r9
 800b17a:	1c57      	adds	r7, r2, #1
 800b17c:	2038      	movs	r0, #56	; 0x38
 800b17e:	4368      	muls	r0, r5
 800b180:	4ac1      	ldr	r2, [pc, #772]	; (800b488 <PxMessagingTask+0x12f0>)
 800b182:	1812      	adds	r2, r2, r0
 800b184:	5dd2      	ldrb	r2, [r2, r7]
 800b186:	4693      	mov	fp, r2
 800b188:	3a01      	subs	r2, #1
 800b18a:	b2d0      	uxtb	r0, r2
 800b18c:	2807      	cmp	r0, #7
 800b18e:	d81b      	bhi.n	800b1c8 <PxMessagingTask+0x1030>
 800b190:	b2d2      	uxtb	r2, r2
 800b192:	0092      	lsls	r2, r2, #2
 800b194:	48bf      	ldr	r0, [pc, #764]	; (800b494 <PxMessagingTask+0x12fc>)
 800b196:	5882      	ldr	r2, [r0, r2]
 800b198:	4697      	mov	pc, r2
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b19a:	070a      	lsls	r2, r1, #28
 800b19c:	d109      	bne.n	800b1b2 <PxMessagingTask+0x101a>
												temp32 =(uint32_t )malloc(sizeof(uint8_t)); // Create a new one
 800b19e:	2001      	movs	r0, #1
 800b1a0:	f009 f9b4 	bl	801450c <malloc>
 800b1a4:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b1a6:	d00c      	beq.n	800b1c2 <PxMessagingTask+0x102a>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b1a8:	00a4      	lsls	r4, r4, #2
 800b1aa:	0400      	lsls	r0, r0, #16
 800b1ac:	4458      	add	r0, fp
 800b1ae:	4ab8      	ldr	r2, [pc, #736]	; (800b490 <PxMessagingTask+0x12f8>)
 800b1b0:	50a0      	str	r0, [r4, r2]
												*(__IO uint8_t* )temp32 =cMessage[port - 1][2 + shift];
 800b1b2:	2138      	movs	r1, #56	; 0x38
 800b1b4:	4369      	muls	r1, r5
 800b1b6:	4ab4      	ldr	r2, [pc, #720]	; (800b488 <PxMessagingTask+0x12f0>)
 800b1b8:	1852      	adds	r2, r2, r1
 800b1ba:	444a      	add	r2, r9
 800b1bc:	7892      	ldrb	r2, [r2, #2]
 800b1be:	701a      	strb	r2, [r3, #0]
 800b1c0:	e002      	b.n	800b1c8 <PxMessagingTask+0x1030>
													responseStatus =BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800b1c2:	4bb2      	ldr	r3, [pc, #712]	; (800b48c <PxMessagingTask+0x12f4>)
 800b1c4:	2212      	movs	r2, #18
 800b1c6:	701a      	strb	r2, [r3, #0]
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b1c8:	2338      	movs	r3, #56	; 0x38
 800b1ca:	436b      	muls	r3, r5
 800b1cc:	4aae      	ldr	r2, [pc, #696]	; (800b488 <PxMessagingTask+0x12f0>)
 800b1ce:	18d2      	adds	r2, r2, r3
 800b1d0:	464b      	mov	r3, r9
 800b1d2:	5cd3      	ldrb	r3, [r2, r3]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	0098      	lsls	r0, r3, #2
 800b1d8:	49ad      	ldr	r1, [pc, #692]	; (800b490 <PxMessagingTask+0x12f8>)
 800b1da:	5841      	ldr	r1, [r0, r1]
 800b1dc:	5dd2      	ldrb	r2, [r2, r7]
 800b1de:	200f      	movs	r0, #15
 800b1e0:	4008      	ands	r0, r1
 800b1e2:	4290      	cmp	r0, r2
 800b1e4:	d009      	beq.n	800b1fa <PxMessagingTask+0x1062>
										BOS_var_reg[cMessage[port - 1][shift] - 1] &=(0xFFF0 + cMessage[port - 1][1 + shift]);
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	48ab      	ldr	r0, [pc, #684]	; (800b498 <PxMessagingTask+0x1300>)
 800b1ea:	4684      	mov	ip, r0
 800b1ec:	4462      	add	r2, ip
 800b1ee:	400a      	ands	r2, r1
 800b1f0:	49a7      	ldr	r1, [pc, #668]	; (800b490 <PxMessagingTask+0x12f8>)
 800b1f2:	505a      	str	r2, [r3, r1]
										responseStatus =BOS_ERR_LOCAL_FORMAT_UPDATED;
 800b1f4:	4ba5      	ldr	r3, [pc, #660]	; (800b48c <PxMessagingTask+0x12f4>)
 800b1f6:	2214      	movs	r2, #20
 800b1f8:	701a      	strb	r2, [r3, #0]
							if(BOSMessaging.response == BOS_RESPONSE_ALL || BOSMessaging.response == BOS_RESPONSE_MSG){
 800b1fa:	4ba8      	ldr	r3, [pc, #672]	; (800b49c <PxMessagingTask+0x1304>)
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	2240      	movs	r2, #64	; 0x40
 800b200:	4393      	bics	r3, r2
 800b202:	2200      	movs	r2, #0
 800b204:	4691      	mov	r9, r2
 800b206:	2b20      	cmp	r3, #32
 800b208:	d001      	beq.n	800b20e <PxMessagingTask+0x1076>
 800b20a:	f7ff f831 	bl	800a270 <PxMessagingTask+0xd8>
								messageParams[0] =responseStatus;
 800b20e:	4b9f      	ldr	r3, [pc, #636]	; (800b48c <PxMessagingTask+0x12f4>)
 800b210:	781a      	ldrb	r2, [r3, #0]
 800b212:	4ba3      	ldr	r3, [pc, #652]	; (800b4a0 <PxMessagingTask+0x1308>)
 800b214:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src,CODE_WRITE_REMOTE_RESPONSE,1);
 800b216:	2201      	movs	r2, #1
 800b218:	2121      	movs	r1, #33	; 0x21
 800b21a:	9804      	ldr	r0, [sp, #16]
 800b21c:	f7fe fca2 	bl	8009b64 <SendMessageToModule>
 800b220:	f7ff f826 	bl	800a270 <PxMessagingTask+0xd8>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b224:	070a      	lsls	r2, r1, #28
 800b226:	d10a      	bne.n	800b23e <PxMessagingTask+0x10a6>
												temp32 =(uint32_t )malloc(sizeof(int8_t)); // Create a new one
 800b228:	2001      	movs	r0, #1
 800b22a:	f009 f96f 	bl	801450c <malloc>
 800b22e:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b230:	d100      	bne.n	800b234 <PxMessagingTask+0x109c>
 800b232:	e37b      	b.n	800b92c <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b234:	00a4      	lsls	r4, r4, #2
 800b236:	0400      	lsls	r0, r0, #16
 800b238:	3002      	adds	r0, #2
 800b23a:	4a95      	ldr	r2, [pc, #596]	; (800b490 <PxMessagingTask+0x12f8>)
 800b23c:	50a0      	str	r0, [r4, r2]
												*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][2 + shift];
 800b23e:	2138      	movs	r1, #56	; 0x38
 800b240:	4369      	muls	r1, r5
 800b242:	4a91      	ldr	r2, [pc, #580]	; (800b488 <PxMessagingTask+0x12f0>)
 800b244:	1852      	adds	r2, r2, r1
 800b246:	444a      	add	r2, r9
 800b248:	7892      	ldrb	r2, [r2, #2]
 800b24a:	b252      	sxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]
 800b24e:	e7bb      	b.n	800b1c8 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b250:	070a      	lsls	r2, r1, #28
 800b252:	d10a      	bne.n	800b26a <PxMessagingTask+0x10d2>
												temp32 =(uint32_t )malloc(sizeof(uint16_t)); // Create a new one
 800b254:	2002      	movs	r0, #2
 800b256:	f009 f959 	bl	801450c <malloc>
 800b25a:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b25c:	d100      	bne.n	800b260 <PxMessagingTask+0x10c8>
 800b25e:	e365      	b.n	800b92c <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b260:	00a4      	lsls	r4, r4, #2
 800b262:	0400      	lsls	r0, r0, #16
 800b264:	3003      	adds	r0, #3
 800b266:	4a8a      	ldr	r2, [pc, #552]	; (800b490 <PxMessagingTask+0x12f8>)
 800b268:	50a0      	str	r0, [r4, r2]
												*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][2 + shift] << 0) + ((uint16_t )cMessage[port - 1][3 + shift] << 8);
 800b26a:	2138      	movs	r1, #56	; 0x38
 800b26c:	4369      	muls	r1, r5
 800b26e:	4a86      	ldr	r2, [pc, #536]	; (800b488 <PxMessagingTask+0x12f0>)
 800b270:	1852      	adds	r2, r2, r1
 800b272:	444a      	add	r2, r9
 800b274:	78d1      	ldrb	r1, [r2, #3]
 800b276:	0209      	lsls	r1, r1, #8
 800b278:	7892      	ldrb	r2, [r2, #2]
 800b27a:	1852      	adds	r2, r2, r1
 800b27c:	b292      	uxth	r2, r2
 800b27e:	801a      	strh	r2, [r3, #0]
 800b280:	e7a2      	b.n	800b1c8 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b282:	070a      	lsls	r2, r1, #28
 800b284:	d10a      	bne.n	800b29c <PxMessagingTask+0x1104>
												temp32 =(uint32_t )malloc(sizeof(int16_t)); // Create a new one
 800b286:	2002      	movs	r0, #2
 800b288:	f009 f940 	bl	801450c <malloc>
 800b28c:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b28e:	d100      	bne.n	800b292 <PxMessagingTask+0x10fa>
 800b290:	e34c      	b.n	800b92c <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b292:	00a4      	lsls	r4, r4, #2
 800b294:	0400      	lsls	r0, r0, #16
 800b296:	3004      	adds	r0, #4
 800b298:	4a7d      	ldr	r2, [pc, #500]	; (800b490 <PxMessagingTask+0x12f8>)
 800b29a:	50a0      	str	r0, [r4, r2]
												*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][2 + shift] << 0) + ((int16_t )cMessage[port - 1][3 + shift] << 8);
 800b29c:	2138      	movs	r1, #56	; 0x38
 800b29e:	4369      	muls	r1, r5
 800b2a0:	4a79      	ldr	r2, [pc, #484]	; (800b488 <PxMessagingTask+0x12f0>)
 800b2a2:	1852      	adds	r2, r2, r1
 800b2a4:	444a      	add	r2, r9
 800b2a6:	78d1      	ldrb	r1, [r2, #3]
 800b2a8:	0209      	lsls	r1, r1, #8
 800b2aa:	7892      	ldrb	r2, [r2, #2]
 800b2ac:	1852      	adds	r2, r2, r1
 800b2ae:	b212      	sxth	r2, r2
 800b2b0:	801a      	strh	r2, [r3, #0]
 800b2b2:	e789      	b.n	800b1c8 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2b4:	070a      	lsls	r2, r1, #28
 800b2b6:	d10a      	bne.n	800b2ce <PxMessagingTask+0x1136>
												temp32 =(uint32_t )malloc(sizeof(uint32_t)); // Create a new one
 800b2b8:	2004      	movs	r0, #4
 800b2ba:	f009 f927 	bl	801450c <malloc>
 800b2be:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2c0:	d100      	bne.n	800b2c4 <PxMessagingTask+0x112c>
 800b2c2:	e333      	b.n	800b92c <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b2c4:	00a4      	lsls	r4, r4, #2
 800b2c6:	0400      	lsls	r0, r0, #16
 800b2c8:	3005      	adds	r0, #5
 800b2ca:	4a71      	ldr	r2, [pc, #452]	; (800b490 <PxMessagingTask+0x12f8>)
 800b2cc:	50a0      	str	r0, [r4, r2]
												*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b2ce:	2238      	movs	r2, #56	; 0x38
 800b2d0:	436a      	muls	r2, r5
 800b2d2:	496d      	ldr	r1, [pc, #436]	; (800b488 <PxMessagingTask+0x12f0>)
 800b2d4:	1889      	adds	r1, r1, r2
 800b2d6:	4449      	add	r1, r9
 800b2d8:	78ca      	ldrb	r2, [r1, #3]
 800b2da:	0212      	lsls	r2, r2, #8
 800b2dc:	7908      	ldrb	r0, [r1, #4]
 800b2de:	0400      	lsls	r0, r0, #16
 800b2e0:	1812      	adds	r2, r2, r0
 800b2e2:	7888      	ldrb	r0, [r1, #2]
 800b2e4:	1812      	adds	r2, r2, r0
 800b2e6:	7949      	ldrb	r1, [r1, #5]
 800b2e8:	0609      	lsls	r1, r1, #24
 800b2ea:	1852      	adds	r2, r2, r1
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	e76b      	b.n	800b1c8 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b2f0:	070a      	lsls	r2, r1, #28
 800b2f2:	d10a      	bne.n	800b30a <PxMessagingTask+0x1172>
												temp32 =(uint32_t )malloc(sizeof(int32_t)); // Create a new one
 800b2f4:	2004      	movs	r0, #4
 800b2f6:	f009 f909 	bl	801450c <malloc>
 800b2fa:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b2fc:	d100      	bne.n	800b300 <PxMessagingTask+0x1168>
 800b2fe:	e315      	b.n	800b92c <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b300:	00a4      	lsls	r4, r4, #2
 800b302:	0400      	lsls	r0, r0, #16
 800b304:	3006      	adds	r0, #6
 800b306:	4a62      	ldr	r2, [pc, #392]	; (800b490 <PxMessagingTask+0x12f8>)
 800b308:	50a0      	str	r0, [r4, r2]
												*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][2 + shift] << 0) + ((int32_t )cMessage[port - 1][3 + shift] << 8) + ((int32_t )cMessage[port - 1][4 + shift] << 16) + ((int32_t )cMessage[port - 1][5 + shift] << 24);
 800b30a:	2238      	movs	r2, #56	; 0x38
 800b30c:	436a      	muls	r2, r5
 800b30e:	495e      	ldr	r1, [pc, #376]	; (800b488 <PxMessagingTask+0x12f0>)
 800b310:	1889      	adds	r1, r1, r2
 800b312:	4449      	add	r1, r9
 800b314:	78ca      	ldrb	r2, [r1, #3]
 800b316:	0212      	lsls	r2, r2, #8
 800b318:	7888      	ldrb	r0, [r1, #2]
 800b31a:	1812      	adds	r2, r2, r0
 800b31c:	7908      	ldrb	r0, [r1, #4]
 800b31e:	0400      	lsls	r0, r0, #16
 800b320:	1812      	adds	r2, r2, r0
 800b322:	7949      	ldrb	r1, [r1, #5]
 800b324:	0609      	lsls	r1, r1, #24
 800b326:	1852      	adds	r2, r2, r1
 800b328:	601a      	str	r2, [r3, #0]
 800b32a:	e74d      	b.n	800b1c8 <PxMessagingTask+0x1030>
											if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) == 0){ // Variable does not exist
 800b32c:	070a      	lsls	r2, r1, #28
 800b32e:	d10a      	bne.n	800b346 <PxMessagingTask+0x11ae>
												temp32 =(uint32_t )malloc(sizeof(float)); // Create a new one
 800b330:	2004      	movs	r0, #4
 800b332:	f009 f8eb 	bl	801450c <malloc>
 800b336:	1e03      	subs	r3, r0, #0
												if(temp32 != 0){
 800b338:	d100      	bne.n	800b33c <PxMessagingTask+0x11a4>
 800b33a:	e2f7      	b.n	800b92c <PxMessagingTask+0x1794>
													BOS_var_reg[cMessage[port - 1][shift] - 1] =((temp32 - SRAM_BASE) << 16) + cMessage[port - 1][1 + shift];
 800b33c:	00a4      	lsls	r4, r4, #2
 800b33e:	0400      	lsls	r0, r0, #16
 800b340:	3007      	adds	r0, #7
 800b342:	4a53      	ldr	r2, [pc, #332]	; (800b490 <PxMessagingTask+0x12f8>)
 800b344:	50a0      	str	r0, [r4, r2]
												remoteBuffer =((uint32_t )cMessage[port - 1][2 + shift] << 0) + ((uint32_t )cMessage[port - 1][3 + shift] << 8) + ((uint32_t )cMessage[port - 1][4 + shift] << 16) + ((uint32_t )cMessage[port - 1][5 + shift] << 24);
 800b346:	2238      	movs	r2, #56	; 0x38
 800b348:	436a      	muls	r2, r5
 800b34a:	494f      	ldr	r1, [pc, #316]	; (800b488 <PxMessagingTask+0x12f0>)
 800b34c:	1889      	adds	r1, r1, r2
 800b34e:	4449      	add	r1, r9
 800b350:	78ca      	ldrb	r2, [r1, #3]
 800b352:	0212      	lsls	r2, r2, #8
 800b354:	7908      	ldrb	r0, [r1, #4]
 800b356:	0400      	lsls	r0, r0, #16
 800b358:	1812      	adds	r2, r2, r0
 800b35a:	7888      	ldrb	r0, [r1, #2]
 800b35c:	1812      	adds	r2, r2, r0
 800b35e:	7949      	ldrb	r1, [r1, #5]
 800b360:	0609      	lsls	r1, r1, #24
 800b362:	1852      	adds	r2, r2, r1
 800b364:	4947      	ldr	r1, [pc, #284]	; (800b484 <PxMessagingTask+0x12ec>)
 800b366:	600a      	str	r2, [r1, #0]
 800b368:	2000      	movs	r0, #0
 800b36a:	6048      	str	r0, [r1, #4]
												*(float* )temp32 =*(float* )&remoteBuffer;
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	e72b      	b.n	800b1c8 <PxMessagingTask+0x1030>
									responseStatus =BOS_ERR_REMOTE_WRITE_INDEX; // BOS var index out of range
 800b370:	4b46      	ldr	r3, [pc, #280]	; (800b48c <PxMessagingTask+0x12f4>)
 800b372:	2213      	movs	r2, #19
 800b374:	701a      	strb	r2, [r3, #0]
 800b376:	e740      	b.n	800b1fa <PxMessagingTask+0x1062>
								temp32 =((uint32_t )cMessage[port - 1][2 + shift] << 24) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800b378:	2238      	movs	r2, #56	; 0x38
 800b37a:	436a      	muls	r2, r5
 800b37c:	4b42      	ldr	r3, [pc, #264]	; (800b488 <PxMessagingTask+0x12f0>)
 800b37e:	189b      	adds	r3, r3, r2
 800b380:	191b      	adds	r3, r3, r4
 800b382:	789c      	ldrb	r4, [r3, #2]
 800b384:	0624      	lsls	r4, r4, #24
 800b386:	78da      	ldrb	r2, [r3, #3]
 800b388:	0412      	lsls	r2, r2, #16
 800b38a:	18a4      	adds	r4, r4, r2
 800b38c:	795a      	ldrb	r2, [r3, #5]
 800b38e:	18a4      	adds	r4, r4, r2
 800b390:	791b      	ldrb	r3, [r3, #4]
 800b392:	021b      	lsls	r3, r3, #8
 800b394:	18e4      	adds	r4, r4, r3
								if(temp32 >= SRAM_BASE && temp32 < (SRAM_BASE + SRAM_SIZE)) // SRAM
 800b396:	23e0      	movs	r3, #224	; 0xe0
 800b398:	061b      	lsls	r3, r3, #24
 800b39a:	18e2      	adds	r2, r4, r3
 800b39c:	4b41      	ldr	r3, [pc, #260]	; (800b4a4 <PxMessagingTask+0x130c>)
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d900      	bls.n	800b3a4 <PxMessagingTask+0x120c>
 800b3a2:	e083      	b.n	800b4ac <PxMessagingTask+0x1314>
									switch(cMessage[port - 1][1 + shift]) // Requested format
 800b3a4:	2238      	movs	r2, #56	; 0x38
 800b3a6:	436a      	muls	r2, r5
 800b3a8:	4b37      	ldr	r3, [pc, #220]	; (800b488 <PxMessagingTask+0x12f0>)
 800b3aa:	189b      	adds	r3, r3, r2
 800b3ac:	444b      	add	r3, r9
 800b3ae:	785b      	ldrb	r3, [r3, #1]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	b2da      	uxtb	r2, r3
 800b3b4:	2a07      	cmp	r2, #7
 800b3b6:	d900      	bls.n	800b3ba <PxMessagingTask+0x1222>
 800b3b8:	e71f      	b.n	800b1fa <PxMessagingTask+0x1062>
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4a3a      	ldr	r2, [pc, #232]	; (800b4a8 <PxMessagingTask+0x1310>)
 800b3c0:	58d3      	ldr	r3, [r2, r3]
 800b3c2:	469f      	mov	pc, r3
											*(__IO uint8_t* )temp32 =cMessage[port - 1][6 + shift];
 800b3c4:	2238      	movs	r2, #56	; 0x38
 800b3c6:	436a      	muls	r2, r5
 800b3c8:	4b2f      	ldr	r3, [pc, #188]	; (800b488 <PxMessagingTask+0x12f0>)
 800b3ca:	189b      	adds	r3, r3, r2
 800b3cc:	444b      	add	r3, r9
 800b3ce:	799b      	ldrb	r3, [r3, #6]
 800b3d0:	7023      	strb	r3, [r4, #0]
											break;
 800b3d2:	e712      	b.n	800b1fa <PxMessagingTask+0x1062>
											*(__IO int8_t* )temp32 =(int8_t )cMessage[port - 1][6 + shift];
 800b3d4:	2238      	movs	r2, #56	; 0x38
 800b3d6:	436a      	muls	r2, r5
 800b3d8:	4b2b      	ldr	r3, [pc, #172]	; (800b488 <PxMessagingTask+0x12f0>)
 800b3da:	189b      	adds	r3, r3, r2
 800b3dc:	444b      	add	r3, r9
 800b3de:	799b      	ldrb	r3, [r3, #6]
 800b3e0:	b25b      	sxtb	r3, r3
 800b3e2:	7023      	strb	r3, [r4, #0]
											break;
 800b3e4:	e709      	b.n	800b1fa <PxMessagingTask+0x1062>
											*(__IO uint16_t* )temp32 =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b3e6:	2238      	movs	r2, #56	; 0x38
 800b3e8:	436a      	muls	r2, r5
 800b3ea:	4b27      	ldr	r3, [pc, #156]	; (800b488 <PxMessagingTask+0x12f0>)
 800b3ec:	189b      	adds	r3, r3, r2
 800b3ee:	444b      	add	r3, r9
 800b3f0:	79da      	ldrb	r2, [r3, #7]
 800b3f2:	0212      	lsls	r2, r2, #8
 800b3f4:	799b      	ldrb	r3, [r3, #6]
 800b3f6:	189b      	adds	r3, r3, r2
 800b3f8:	b29b      	uxth	r3, r3
 800b3fa:	8023      	strh	r3, [r4, #0]
											break;
 800b3fc:	e6fd      	b.n	800b1fa <PxMessagingTask+0x1062>
											*(__IO int16_t* )temp32 =((int16_t )cMessage[port - 1][6 + shift] << 0) + ((int16_t )cMessage[port - 1][7 + shift] << 8);
 800b3fe:	2238      	movs	r2, #56	; 0x38
 800b400:	436a      	muls	r2, r5
 800b402:	4b21      	ldr	r3, [pc, #132]	; (800b488 <PxMessagingTask+0x12f0>)
 800b404:	189b      	adds	r3, r3, r2
 800b406:	444b      	add	r3, r9
 800b408:	79da      	ldrb	r2, [r3, #7]
 800b40a:	0212      	lsls	r2, r2, #8
 800b40c:	799b      	ldrb	r3, [r3, #6]
 800b40e:	189b      	adds	r3, r3, r2
 800b410:	b21b      	sxth	r3, r3
 800b412:	8023      	strh	r3, [r4, #0]
											break;
 800b414:	e6f1      	b.n	800b1fa <PxMessagingTask+0x1062>
											*(__IO uint32_t* )temp32 =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b416:	2338      	movs	r3, #56	; 0x38
 800b418:	436b      	muls	r3, r5
 800b41a:	4a1b      	ldr	r2, [pc, #108]	; (800b488 <PxMessagingTask+0x12f0>)
 800b41c:	18d2      	adds	r2, r2, r3
 800b41e:	444a      	add	r2, r9
 800b420:	79d3      	ldrb	r3, [r2, #7]
 800b422:	021b      	lsls	r3, r3, #8
 800b424:	7a11      	ldrb	r1, [r2, #8]
 800b426:	0409      	lsls	r1, r1, #16
 800b428:	185b      	adds	r3, r3, r1
 800b42a:	7991      	ldrb	r1, [r2, #6]
 800b42c:	185b      	adds	r3, r3, r1
 800b42e:	7a52      	ldrb	r2, [r2, #9]
 800b430:	0612      	lsls	r2, r2, #24
 800b432:	189b      	adds	r3, r3, r2
 800b434:	6023      	str	r3, [r4, #0]
											break;
 800b436:	e6e0      	b.n	800b1fa <PxMessagingTask+0x1062>
											*(__IO int32_t* )temp32 =((int32_t )cMessage[port - 1][6 + shift] << 0) + ((int32_t )cMessage[port - 1][7 + shift] << 8) + ((int32_t )cMessage[port - 1][8 + shift] << 16) + ((int32_t )cMessage[port - 1][9 + shift] << 24);
 800b438:	2338      	movs	r3, #56	; 0x38
 800b43a:	436b      	muls	r3, r5
 800b43c:	4a12      	ldr	r2, [pc, #72]	; (800b488 <PxMessagingTask+0x12f0>)
 800b43e:	18d2      	adds	r2, r2, r3
 800b440:	444a      	add	r2, r9
 800b442:	79d3      	ldrb	r3, [r2, #7]
 800b444:	021b      	lsls	r3, r3, #8
 800b446:	7991      	ldrb	r1, [r2, #6]
 800b448:	185b      	adds	r3, r3, r1
 800b44a:	7a11      	ldrb	r1, [r2, #8]
 800b44c:	0409      	lsls	r1, r1, #16
 800b44e:	185b      	adds	r3, r3, r1
 800b450:	7a52      	ldrb	r2, [r2, #9]
 800b452:	0612      	lsls	r2, r2, #24
 800b454:	189b      	adds	r3, r3, r2
 800b456:	6023      	str	r3, [r4, #0]
											break;
 800b458:	e6cf      	b.n	800b1fa <PxMessagingTask+0x1062>
											remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b45a:	2338      	movs	r3, #56	; 0x38
 800b45c:	436b      	muls	r3, r5
 800b45e:	4a0a      	ldr	r2, [pc, #40]	; (800b488 <PxMessagingTask+0x12f0>)
 800b460:	18d2      	adds	r2, r2, r3
 800b462:	444a      	add	r2, r9
 800b464:	79d3      	ldrb	r3, [r2, #7]
 800b466:	021b      	lsls	r3, r3, #8
 800b468:	7a11      	ldrb	r1, [r2, #8]
 800b46a:	0409      	lsls	r1, r1, #16
 800b46c:	185b      	adds	r3, r3, r1
 800b46e:	7991      	ldrb	r1, [r2, #6]
 800b470:	185b      	adds	r3, r3, r1
 800b472:	7a52      	ldrb	r2, [r2, #9]
 800b474:	0612      	lsls	r2, r2, #24
 800b476:	189b      	adds	r3, r3, r2
 800b478:	4a02      	ldr	r2, [pc, #8]	; (800b484 <PxMessagingTask+0x12ec>)
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	2100      	movs	r1, #0
 800b47e:	6051      	str	r1, [r2, #4]
											*(float* )temp32 =*(float* )&remoteBuffer;
 800b480:	6023      	str	r3, [r4, #0]
											break;
 800b482:	e6ba      	b.n	800b1fa <PxMessagingTask+0x1062>
 800b484:	20001180 	.word	0x20001180
 800b488:	20000d7c 	.word	0x20000d7c
 800b48c:	20001188 	.word	0x20001188
 800b490:	20006ddc 	.word	0x20006ddc
 800b494:	0801bdc8 	.word	0x0801bdc8
 800b498:	0000fff0 	.word	0x0000fff0
 800b49c:	20006dd4 	.word	0x20006dd4
 800b4a0:	20000fac 	.word	0x20000fac
 800b4a4:	00007fff 	.word	0x00007fff
 800b4a8:	0801bde8 	.word	0x0801bde8
								else if(temp32 >= FLASH_BASE && temp32 < (FLASH_BASE + FLASH_SIZE)) // Flash
 800b4ac:	4ae2      	ldr	r2, [pc, #904]	; (800b838 <PxMessagingTask+0x16a0>)
 800b4ae:	23f8      	movs	r3, #248	; 0xf8
 800b4b0:	061b      	lsls	r3, r3, #24
 800b4b2:	18e3      	adds	r3, r4, r3
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d900      	bls.n	800b4ba <PxMessagingTask+0x1322>
 800b4b8:	e0a6      	b.n	800b608 <PxMessagingTask+0x1470>
									HAL_FLASH_Unlock();
 800b4ba:	f006 fd11 	bl	8011ee0 <HAL_FLASH_Unlock>
									if(code == CODE_WRITE_REMOTE_FORCE){
 800b4be:	2f22      	cmp	r7, #34	; 0x22
 800b4c0:	d111      	bne.n	800b4e6 <PxMessagingTask+0x134e>
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9313      	str	r3, [sp, #76]	; 0x4c
										erase.PageAddress =temp32;
 800b4c6:	9414      	str	r4, [sp, #80]	; 0x50
										erase.NbPages =1;
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	9315      	str	r3, [sp, #84]	; 0x54
										status =HAL_FLASHEx_Erase(&erase,&eraseError);
 800b4cc:	a912      	add	r1, sp, #72	; 0x48
 800b4ce:	a813      	add	r0, sp, #76	; 0x4c
 800b4d0:	f006 fdda 	bl	8012088 <HAL_FLASHEx_Erase>
 800b4d4:	900a      	str	r0, [sp, #40]	; 0x28
										if(status != HAL_OK || eraseError != 0xFFFFFFFF)
 800b4d6:	2800      	cmp	r0, #0
 800b4d8:	d102      	bne.n	800b4e0 <PxMessagingTask+0x1348>
 800b4da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4dc:	3301      	adds	r3, #1
 800b4de:	d002      	beq.n	800b4e6 <PxMessagingTask+0x134e>
											responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b4e0:	4bd6      	ldr	r3, [pc, #856]	; (800b83c <PxMessagingTask+0x16a4>)
 800b4e2:	2216      	movs	r2, #22
 800b4e4:	701a      	strb	r2, [r3, #0]
									if(responseStatus == BOS_OK){
 800b4e6:	4bd5      	ldr	r3, [pc, #852]	; (800b83c <PxMessagingTask+0x16a4>)
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d116      	bne.n	800b51c <PxMessagingTask+0x1384>
										switch(cMessage[port - 1][1 + shift]) // Requested format
 800b4ee:	2238      	movs	r2, #56	; 0x38
 800b4f0:	436a      	muls	r2, r5
 800b4f2:	4bd3      	ldr	r3, [pc, #844]	; (800b840 <PxMessagingTask+0x16a8>)
 800b4f4:	189b      	adds	r3, r3, r2
 800b4f6:	444b      	add	r3, r9
 800b4f8:	785b      	ldrb	r3, [r3, #1]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	b2da      	uxtb	r2, r3
 800b4fe:	2a07      	cmp	r2, #7
 800b500:	d80c      	bhi.n	800b51c <PxMessagingTask+0x1384>
 800b502:	b2db      	uxtb	r3, r3
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4acf      	ldr	r2, [pc, #828]	; (800b844 <PxMessagingTask+0x16ac>)
 800b508:	58d3      	ldr	r3, [r2, r3]
 800b50a:	469f      	mov	pc, r3
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b50c:	8823      	ldrh	r3, [r4, #0]
 800b50e:	b29b      	uxth	r3, r3
 800b510:	4acd      	ldr	r2, [pc, #820]	; (800b848 <PxMessagingTask+0x16b0>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00c      	beq.n	800b530 <PxMessagingTask+0x1398>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b516:	4bc9      	ldr	r3, [pc, #804]	; (800b83c <PxMessagingTask+0x16a4>)
 800b518:	2216      	movs	r2, #22
 800b51a:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800b51c:	f006 fcf2 	bl	8011f04 <HAL_FLASH_Lock>
									if(status != HAL_OK)
 800b520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b522:	2b00      	cmp	r3, #0
 800b524:	d100      	bne.n	800b528 <PxMessagingTask+0x1390>
 800b526:	e668      	b.n	800b1fa <PxMessagingTask+0x1062>
										responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b528:	4bc4      	ldr	r3, [pc, #784]	; (800b83c <PxMessagingTask+0x16a4>)
 800b52a:	2216      	movs	r2, #22
 800b52c:	701a      	strb	r2, [r3, #0]
 800b52e:	e664      	b.n	800b1fa <PxMessagingTask+0x1062>
													remoteBuffer =cMessage[port - 1][6 + shift];
 800b530:	2238      	movs	r2, #56	; 0x38
 800b532:	436a      	muls	r2, r5
 800b534:	4bc2      	ldr	r3, [pc, #776]	; (800b840 <PxMessagingTask+0x16a8>)
 800b536:	189b      	adds	r3, r3, r2
 800b538:	444b      	add	r3, r9
 800b53a:	799a      	ldrb	r2, [r3, #6]
 800b53c:	2300      	movs	r3, #0
 800b53e:	49c3      	ldr	r1, [pc, #780]	; (800b84c <PxMessagingTask+0x16b4>)
 800b540:	600a      	str	r2, [r1, #0]
 800b542:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b544:	0021      	movs	r1, r4
 800b546:	2001      	movs	r0, #1
 800b548:	f006 fd14 	bl	8011f74 <HAL_FLASH_Program>
 800b54c:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b54e:	e7e5      	b.n	800b51c <PxMessagingTask+0x1384>
												if(*(__IO uint16_t* )temp32 != 0xFFFF){
 800b550:	8823      	ldrh	r3, [r4, #0]
 800b552:	b29b      	uxth	r3, r3
 800b554:	4abc      	ldr	r2, [pc, #752]	; (800b848 <PxMessagingTask+0x16b0>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d003      	beq.n	800b562 <PxMessagingTask+0x13ca>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b55a:	4bb8      	ldr	r3, [pc, #736]	; (800b83c <PxMessagingTask+0x16a4>)
 800b55c:	2216      	movs	r2, #22
 800b55e:	701a      	strb	r2, [r3, #0]
													break;
 800b560:	e7dc      	b.n	800b51c <PxMessagingTask+0x1384>
													remoteBuffer =((uint16_t )cMessage[port - 1][6 + shift] << 0) + ((uint16_t )cMessage[port - 1][7 + shift] << 8);
 800b562:	2238      	movs	r2, #56	; 0x38
 800b564:	436a      	muls	r2, r5
 800b566:	4bb6      	ldr	r3, [pc, #728]	; (800b840 <PxMessagingTask+0x16a8>)
 800b568:	189b      	adds	r3, r3, r2
 800b56a:	444b      	add	r3, r9
 800b56c:	79da      	ldrb	r2, [r3, #7]
 800b56e:	0212      	lsls	r2, r2, #8
 800b570:	799b      	ldrb	r3, [r3, #6]
 800b572:	18d2      	adds	r2, r2, r3
 800b574:	17d3      	asrs	r3, r2, #31
 800b576:	49b5      	ldr	r1, [pc, #724]	; (800b84c <PxMessagingTask+0x16b4>)
 800b578:	600a      	str	r2, [r1, #0]
 800b57a:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b57c:	0021      	movs	r1, r4
 800b57e:	2001      	movs	r0, #1
 800b580:	f006 fcf8 	bl	8011f74 <HAL_FLASH_Program>
 800b584:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b586:	e7c9      	b.n	800b51c <PxMessagingTask+0x1384>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	3301      	adds	r3, #1
 800b58c:	d003      	beq.n	800b596 <PxMessagingTask+0x13fe>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b58e:	4bab      	ldr	r3, [pc, #684]	; (800b83c <PxMessagingTask+0x16a4>)
 800b590:	2216      	movs	r2, #22
 800b592:	701a      	strb	r2, [r3, #0]
													break;
 800b594:	e7c2      	b.n	800b51c <PxMessagingTask+0x1384>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b596:	2238      	movs	r2, #56	; 0x38
 800b598:	436a      	muls	r2, r5
 800b59a:	4ba9      	ldr	r3, [pc, #676]	; (800b840 <PxMessagingTask+0x16a8>)
 800b59c:	189b      	adds	r3, r3, r2
 800b59e:	444b      	add	r3, r9
 800b5a0:	79da      	ldrb	r2, [r3, #7]
 800b5a2:	0212      	lsls	r2, r2, #8
 800b5a4:	7a19      	ldrb	r1, [r3, #8]
 800b5a6:	0409      	lsls	r1, r1, #16
 800b5a8:	1852      	adds	r2, r2, r1
 800b5aa:	7999      	ldrb	r1, [r3, #6]
 800b5ac:	1852      	adds	r2, r2, r1
 800b5ae:	7a5b      	ldrb	r3, [r3, #9]
 800b5b0:	061b      	lsls	r3, r3, #24
 800b5b2:	18d2      	adds	r2, r2, r3
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	49a5      	ldr	r1, [pc, #660]	; (800b84c <PxMessagingTask+0x16b4>)
 800b5b8:	600a      	str	r2, [r1, #0]
 800b5ba:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b5bc:	0021      	movs	r1, r4
 800b5be:	2002      	movs	r0, #2
 800b5c0:	f006 fcd8 	bl	8011f74 <HAL_FLASH_Program>
 800b5c4:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b5c6:	e7a9      	b.n	800b51c <PxMessagingTask+0x1384>
												if(*(__IO uint32_t* )temp32 != 0xFFFFFFFF){
 800b5c8:	6823      	ldr	r3, [r4, #0]
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	d003      	beq.n	800b5d6 <PxMessagingTask+0x143e>
													responseStatus =BOS_ERR_REMOTE_WRITE_FLASH;
 800b5ce:	4b9b      	ldr	r3, [pc, #620]	; (800b83c <PxMessagingTask+0x16a4>)
 800b5d0:	2216      	movs	r2, #22
 800b5d2:	701a      	strb	r2, [r3, #0]
													break;
 800b5d4:	e7a2      	b.n	800b51c <PxMessagingTask+0x1384>
													remoteBuffer =((uint32_t )cMessage[port - 1][6 + shift] << 0) + ((uint32_t )cMessage[port - 1][7 + shift] << 8) + ((uint32_t )cMessage[port - 1][8 + shift] << 16) + ((uint32_t )cMessage[port - 1][9 + shift] << 24);
 800b5d6:	2238      	movs	r2, #56	; 0x38
 800b5d8:	436a      	muls	r2, r5
 800b5da:	4b99      	ldr	r3, [pc, #612]	; (800b840 <PxMessagingTask+0x16a8>)
 800b5dc:	189b      	adds	r3, r3, r2
 800b5de:	444b      	add	r3, r9
 800b5e0:	79da      	ldrb	r2, [r3, #7]
 800b5e2:	0212      	lsls	r2, r2, #8
 800b5e4:	7a19      	ldrb	r1, [r3, #8]
 800b5e6:	0409      	lsls	r1, r1, #16
 800b5e8:	1852      	adds	r2, r2, r1
 800b5ea:	7999      	ldrb	r1, [r3, #6]
 800b5ec:	1852      	adds	r2, r2, r1
 800b5ee:	7a5b      	ldrb	r3, [r3, #9]
 800b5f0:	061b      	lsls	r3, r3, #24
 800b5f2:	18d2      	adds	r2, r2, r3
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	4995      	ldr	r1, [pc, #596]	; (800b84c <PxMessagingTask+0x16b4>)
 800b5f8:	600a      	str	r2, [r1, #0]
 800b5fa:	604b      	str	r3, [r1, #4]
													status =HAL_FLASH_Program(
 800b5fc:	0021      	movs	r1, r4
 800b5fe:	2003      	movs	r0, #3
 800b600:	f006 fcb8 	bl	8011f74 <HAL_FLASH_Program>
 800b604:	900a      	str	r0, [sp, #40]	; 0x28
													break;
 800b606:	e789      	b.n	800b51c <PxMessagingTask+0x1384>
									responseStatus =BOS_ERR_REMOTE_WRITE_ADDRESS;
 800b608:	4b8c      	ldr	r3, [pc, #560]	; (800b83c <PxMessagingTask+0x16a4>)
 800b60a:	2215      	movs	r2, #21
 800b60c:	701a      	strb	r2, [r3, #0]
 800b60e:	e5f4      	b.n	800b1fa <PxMessagingTask+0x1062>
							responseStatus =(BOS_Status )cMessage[port - 1][shift];
 800b610:	4b8b      	ldr	r3, [pc, #556]	; (800b840 <PxMessagingTask+0x16a8>)
 800b612:	199b      	adds	r3, r3, r6
 800b614:	5d1a      	ldrb	r2, [r3, r4]
 800b616:	4b89      	ldr	r3, [pc, #548]	; (800b83c <PxMessagingTask+0x16a4>)
 800b618:	701a      	strb	r2, [r3, #0]
							break;
 800b61a:	2300      	movs	r3, #0
 800b61c:	4699      	mov	r9, r3
 800b61e:	f7fe fe27 	bl	800a270 <PxMessagingTask+0xd8>
							writePxMutex(cMessage[port - 1][shift],(char* )&cMessage[port - 1][shift + 1],numOfParams - 1,10,10);
 800b622:	9a06      	ldr	r2, [sp, #24]
 800b624:	3a01      	subs	r2, #1
 800b626:	b292      	uxth	r2, r2
 800b628:	1c61      	adds	r1, r4, #1
 800b62a:	4451      	add	r1, sl
 800b62c:	4b84      	ldr	r3, [pc, #528]	; (800b840 <PxMessagingTask+0x16a8>)
 800b62e:	18c9      	adds	r1, r1, r3
 800b630:	199b      	adds	r3, r3, r6
 800b632:	5d18      	ldrb	r0, [r3, r4]
 800b634:	230a      	movs	r3, #10
 800b636:	9300      	str	r3, [sp, #0]
 800b638:	f003 f938 	bl	800e8ac <writePxMutex>
							break;
 800b63c:	2300      	movs	r3, #0
 800b63e:	4699      	mov	r9, r3
 800b640:	f7fe fe16 	bl	800a270 <PxMessagingTask+0xd8>
							switch(cMessage[port - 1][0 + shift]){
 800b644:	0027      	movs	r7, r4
 800b646:	4b7e      	ldr	r3, [pc, #504]	; (800b840 <PxMessagingTask+0x16a8>)
 800b648:	199b      	adds	r3, r3, r6
 800b64a:	5d18      	ldrb	r0, [r3, r4]
 800b64c:	282b      	cmp	r0, #43	; 0x2b
 800b64e:	d900      	bls.n	800b652 <PxMessagingTask+0x14ba>
 800b650:	e09e      	b.n	800b790 <PxMessagingTask+0x15f8>
 800b652:	0083      	lsls	r3, r0, #2
 800b654:	4a7e      	ldr	r2, [pc, #504]	; (800b850 <PxMessagingTask+0x16b8>)
 800b656:	58d3      	ldr	r3, [r2, r3]
 800b658:	469f      	mov	pc, r3
									MBmessageParams[0] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b65a:	2238      	movs	r2, #56	; 0x38
 800b65c:	436a      	muls	r2, r5
 800b65e:	4b78      	ldr	r3, [pc, #480]	; (800b840 <PxMessagingTask+0x16a8>)
 800b660:	189b      	adds	r3, r3, r2
 800b662:	191f      	adds	r7, r3, r4
 800b664:	78bb      	ldrb	r3, [r7, #2]
 800b666:	021b      	lsls	r3, r3, #8
 800b668:	78fa      	ldrb	r2, [r7, #3]
 800b66a:	0412      	lsls	r2, r2, #16
 800b66c:	189b      	adds	r3, r3, r2
 800b66e:	787a      	ldrb	r2, [r7, #1]
 800b670:	189b      	adds	r3, r3, r2
 800b672:	793a      	ldrb	r2, [r7, #4]
 800b674:	0612      	lsls	r2, r2, #24
 800b676:	189b      	adds	r3, r3, r2
 800b678:	4a76      	ldr	r2, [pc, #472]	; (800b854 <PxMessagingTask+0x16bc>)
 800b67a:	6013      	str	r3, [r2, #0]
									MBmessageParams[1] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b67c:	79bb      	ldrb	r3, [r7, #6]
 800b67e:	021b      	lsls	r3, r3, #8
 800b680:	79f9      	ldrb	r1, [r7, #7]
 800b682:	0409      	lsls	r1, r1, #16
 800b684:	185b      	adds	r3, r3, r1
 800b686:	7979      	ldrb	r1, [r7, #5]
 800b688:	185b      	adds	r3, r3, r1
 800b68a:	7a39      	ldrb	r1, [r7, #8]
 800b68c:	0609      	lsls	r1, r1, #24
 800b68e:	185b      	adds	r3, r3, r1
 800b690:	6053      	str	r3, [r2, #4]
									MBmessageParams[2] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b692:	7abb      	ldrb	r3, [r7, #10]
 800b694:	021b      	lsls	r3, r3, #8
 800b696:	7af9      	ldrb	r1, [r7, #11]
 800b698:	0409      	lsls	r1, r1, #16
 800b69a:	185b      	adds	r3, r3, r1
 800b69c:	7a79      	ldrb	r1, [r7, #9]
 800b69e:	185b      	adds	r3, r3, r1
 800b6a0:	7b39      	ldrb	r1, [r7, #12]
 800b6a2:	0609      	lsls	r1, r1, #24
 800b6a4:	185b      	adds	r3, r3, r1
 800b6a6:	6093      	str	r3, [r2, #8]
									break;
 800b6a8:	e072      	b.n	800b790 <PxMessagingTask+0x15f8>
									MBmessageParams[3] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b6aa:	2238      	movs	r2, #56	; 0x38
 800b6ac:	436a      	muls	r2, r5
 800b6ae:	4b64      	ldr	r3, [pc, #400]	; (800b840 <PxMessagingTask+0x16a8>)
 800b6b0:	189b      	adds	r3, r3, r2
 800b6b2:	191f      	adds	r7, r3, r4
 800b6b4:	78bb      	ldrb	r3, [r7, #2]
 800b6b6:	021b      	lsls	r3, r3, #8
 800b6b8:	78fa      	ldrb	r2, [r7, #3]
 800b6ba:	0412      	lsls	r2, r2, #16
 800b6bc:	189b      	adds	r3, r3, r2
 800b6be:	787a      	ldrb	r2, [r7, #1]
 800b6c0:	189b      	adds	r3, r3, r2
 800b6c2:	793a      	ldrb	r2, [r7, #4]
 800b6c4:	0612      	lsls	r2, r2, #24
 800b6c6:	189b      	adds	r3, r3, r2
 800b6c8:	4a62      	ldr	r2, [pc, #392]	; (800b854 <PxMessagingTask+0x16bc>)
 800b6ca:	60d3      	str	r3, [r2, #12]
									MBmessageParams[4] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b6cc:	79bb      	ldrb	r3, [r7, #6]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	79f9      	ldrb	r1, [r7, #7]
 800b6d2:	0409      	lsls	r1, r1, #16
 800b6d4:	185b      	adds	r3, r3, r1
 800b6d6:	7979      	ldrb	r1, [r7, #5]
 800b6d8:	185b      	adds	r3, r3, r1
 800b6da:	7a39      	ldrb	r1, [r7, #8]
 800b6dc:	0609      	lsls	r1, r1, #24
 800b6de:	185b      	adds	r3, r3, r1
 800b6e0:	6113      	str	r3, [r2, #16]
									MBmessageParams[5] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b6e2:	7abb      	ldrb	r3, [r7, #10]
 800b6e4:	021b      	lsls	r3, r3, #8
 800b6e6:	7af9      	ldrb	r1, [r7, #11]
 800b6e8:	0409      	lsls	r1, r1, #16
 800b6ea:	185b      	adds	r3, r3, r1
 800b6ec:	7a79      	ldrb	r1, [r7, #9]
 800b6ee:	185b      	adds	r3, r3, r1
 800b6f0:	7b39      	ldrb	r1, [r7, #12]
 800b6f2:	0609      	lsls	r1, r1, #24
 800b6f4:	185b      	adds	r3, r3, r1
 800b6f6:	6153      	str	r3, [r2, #20]
									break;
 800b6f8:	e04a      	b.n	800b790 <PxMessagingTask+0x15f8>
									MBmessageParams[6] =((uint32_t )cMessage[port - 1][1 + shift] << 0) + ((uint32_t )cMessage[port - 1][2 + shift] << 8) + ((uint32_t )cMessage[port - 1][3 + shift] << 16) + ((uint32_t )cMessage[port - 1][4 + shift] << 24);
 800b6fa:	2338      	movs	r3, #56	; 0x38
 800b6fc:	436b      	muls	r3, r5
 800b6fe:	4a50      	ldr	r2, [pc, #320]	; (800b840 <PxMessagingTask+0x16a8>)
 800b700:	18d2      	adds	r2, r2, r3
 800b702:	1912      	adds	r2, r2, r4
 800b704:	7893      	ldrb	r3, [r2, #2]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	78d1      	ldrb	r1, [r2, #3]
 800b70a:	0409      	lsls	r1, r1, #16
 800b70c:	185b      	adds	r3, r3, r1
 800b70e:	7851      	ldrb	r1, [r2, #1]
 800b710:	185b      	adds	r3, r3, r1
 800b712:	7912      	ldrb	r2, [r2, #4]
 800b714:	0612      	lsls	r2, r2, #24
 800b716:	189b      	adds	r3, r3, r2
 800b718:	4a4e      	ldr	r2, [pc, #312]	; (800b854 <PxMessagingTask+0x16bc>)
 800b71a:	6193      	str	r3, [r2, #24]
									ADCPort =cMessage[port - 1][shift];
 800b71c:	4b4e      	ldr	r3, [pc, #312]	; (800b858 <PxMessagingTask+0x16c0>)
 800b71e:	8018      	strh	r0, [r3, #0]
									ADCSide =cMessage[port - 1][shift + 1];
 800b720:	2238      	movs	r2, #56	; 0x38
 800b722:	436a      	muls	r2, r5
 800b724:	4b46      	ldr	r3, [pc, #280]	; (800b840 <PxMessagingTask+0x16a8>)
 800b726:	189b      	adds	r3, r3, r2
 800b728:	19db      	adds	r3, r3, r7
 800b72a:	785b      	ldrb	r3, [r3, #1]
 800b72c:	4a4b      	ldr	r2, [pc, #300]	; (800b85c <PxMessagingTask+0x16c4>)
 800b72e:	8013      	strh	r3, [r2, #0]
									if(0 == ADCSide){
 800b730:	2b00      	cmp	r3, #0
 800b732:	d134      	bne.n	800b79e <PxMessagingTask+0x1606>
										ADCSelectChannel(ADCPort,"top");
 800b734:	4c4a      	ldr	r4, [pc, #296]	; (800b860 <PxMessagingTask+0x16c8>)
 800b736:	0021      	movs	r1, r4
 800b738:	f7fd fbaa 	bl	8008e90 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"top",&ADCValue);
 800b73c:	4b46      	ldr	r3, [pc, #280]	; (800b858 <PxMessagingTask+0x16c0>)
 800b73e:	7818      	ldrb	r0, [r3, #0]
 800b740:	4a48      	ldr	r2, [pc, #288]	; (800b864 <PxMessagingTask+0x16cc>)
 800b742:	0021      	movs	r1, r4
 800b744:	f7fd fbd2 	bl	8008eec <ReadADCChannel>
									ReadTempAndVref(&InternalTemperature,&InternalVoltageReferance);
 800b748:	4947      	ldr	r1, [pc, #284]	; (800b868 <PxMessagingTask+0x16d0>)
 800b74a:	4848      	ldr	r0, [pc, #288]	; (800b86c <PxMessagingTask+0x16d4>)
 800b74c:	f7fd fa18 	bl	8008b80 <ReadTempAndVref>
									ADCPort =cMessage[port - 1][shift];
 800b750:	4c3b      	ldr	r4, [pc, #236]	; (800b840 <PxMessagingTask+0x16a8>)
 800b752:	19a4      	adds	r4, r4, r6
 800b754:	5de0      	ldrb	r0, [r4, r7]
 800b756:	4b40      	ldr	r3, [pc, #256]	; (800b858 <PxMessagingTask+0x16c0>)
 800b758:	8018      	strh	r0, [r3, #0]
									GetReadPrecentage(ADCPort,&ADCPercentage);
 800b75a:	4945      	ldr	r1, [pc, #276]	; (800b870 <PxMessagingTask+0x16d8>)
 800b75c:	f7fd face 	bl	8008cfc <GetReadPrecentage>
									MBmessageParams[7] =((uint32_t )cMessage[port - 1][5 + shift] << 0) + ((uint32_t )cMessage[port - 1][6 + shift] << 8) + ((uint32_t )cMessage[port - 1][7 + shift] << 16) + ((uint32_t )cMessage[port - 1][8 + shift] << 24);
 800b760:	19e7      	adds	r7, r4, r7
 800b762:	79bb      	ldrb	r3, [r7, #6]
 800b764:	021b      	lsls	r3, r3, #8
 800b766:	79fa      	ldrb	r2, [r7, #7]
 800b768:	0412      	lsls	r2, r2, #16
 800b76a:	189b      	adds	r3, r3, r2
 800b76c:	797a      	ldrb	r2, [r7, #5]
 800b76e:	189b      	adds	r3, r3, r2
 800b770:	7a3a      	ldrb	r2, [r7, #8]
 800b772:	0612      	lsls	r2, r2, #24
 800b774:	189b      	adds	r3, r3, r2
 800b776:	4a37      	ldr	r2, [pc, #220]	; (800b854 <PxMessagingTask+0x16bc>)
 800b778:	61d3      	str	r3, [r2, #28]
									MBmessageParams[8] =((uint32_t )cMessage[port - 1][9 + shift] << 0) + ((uint32_t )cMessage[port - 1][10 + shift] << 8) + ((uint32_t )cMessage[port - 1][11 + shift] << 16) + ((uint32_t )cMessage[port - 1][12 + shift] << 24);
 800b77a:	7abb      	ldrb	r3, [r7, #10]
 800b77c:	021b      	lsls	r3, r3, #8
 800b77e:	7af9      	ldrb	r1, [r7, #11]
 800b780:	0409      	lsls	r1, r1, #16
 800b782:	185b      	adds	r3, r3, r1
 800b784:	7a79      	ldrb	r1, [r7, #9]
 800b786:	185b      	adds	r3, r3, r1
 800b788:	7b39      	ldrb	r1, [r7, #12]
 800b78a:	0609      	lsls	r1, r1, #24
 800b78c:	185b      	adds	r3, r3, r1
 800b78e:	6213      	str	r3, [r2, #32]
							ACK_FLAG =1;
 800b790:	4b38      	ldr	r3, [pc, #224]	; (800b874 <PxMessagingTask+0x16dc>)
 800b792:	2201      	movs	r2, #1
 800b794:	701a      	strb	r2, [r3, #0]
							break;
 800b796:	2300      	movs	r3, #0
 800b798:	4699      	mov	r9, r3
 800b79a:	f7fe fd69 	bl	800a270 <PxMessagingTask+0xd8>
									else if(1 == ADCSide){
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d1d2      	bne.n	800b748 <PxMessagingTask+0x15b0>
										ADCSelectChannel(ADCPort,"bottom");
 800b7a2:	4c35      	ldr	r4, [pc, #212]	; (800b878 <PxMessagingTask+0x16e0>)
 800b7a4:	0021      	movs	r1, r4
 800b7a6:	f7fd fb73 	bl	8008e90 <ADCSelectChannel>
										ReadADCChannel(ADCPort,"bottom",&ADCValue);
 800b7aa:	4b2b      	ldr	r3, [pc, #172]	; (800b858 <PxMessagingTask+0x16c0>)
 800b7ac:	7818      	ldrb	r0, [r3, #0]
 800b7ae:	4a2d      	ldr	r2, [pc, #180]	; (800b864 <PxMessagingTask+0x16cc>)
 800b7b0:	0021      	movs	r1, r4
 800b7b2:	f7fd fb9b 	bl	8008eec <ReadADCChannel>
 800b7b6:	e7c7      	b.n	800b748 <PxMessagingTask+0x15b0>
							rejected_FLAG =1;
 800b7b8:	4b30      	ldr	r3, [pc, #192]	; (800b87c <PxMessagingTask+0x16e4>)
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	701a      	strb	r2, [r3, #0]
							break;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	4699      	mov	r9, r3
 800b7c2:	f7fe fd55 	bl	800a270 <PxMessagingTask+0xd8>
							result =(BOS_Status )User_MessagingParser(code,port,src,dst,shift);
 800b7c6:	9400      	str	r4, [sp, #0]
 800b7c8:	465b      	mov	r3, fp
 800b7ca:	9a04      	ldr	r2, [sp, #16]
 800b7cc:	9908      	ldr	r1, [sp, #32]
 800b7ce:	0038      	movs	r0, r7
 800b7d0:	f7fe fce0 	bl	800a194 <User_MessagingParser>
 800b7d4:	4681      	mov	r9, r0
							if(result == BOS_ERR_UnknownMessage){
 800b7d6:	2801      	cmp	r0, #1
 800b7d8:	d001      	beq.n	800b7de <PxMessagingTask+0x1646>
 800b7da:	f7fe fd49 	bl	800a270 <PxMessagingTask+0xd8>
								result =(BOS_Status )Module_MessagingTask(code,port,src,dst,shift);
 800b7de:	9400      	str	r4, [sp, #0]
 800b7e0:	465b      	mov	r3, fp
 800b7e2:	9a04      	ldr	r2, [sp, #16]
 800b7e4:	9908      	ldr	r1, [sp, #32]
 800b7e6:	0038      	movs	r0, r7
 800b7e8:	f000 fd9c 	bl	800c324 <Module_MessagingTask>
 800b7ec:	4681      	mov	r9, r0
 800b7ee:	f7fe fd3a 	bl	800a266 <PxMessagingTask+0xce>
								switch(cMessage[port - 1][1 + shift]) // requested format
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	4699      	mov	r9, r3
 800b7f6:	f7fe fd36 	bl	800a266 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	4699      	mov	r9, r3
 800b7fe:	f7fe fd32 	bl	800a266 <PxMessagingTask+0xce>
									switch(messageParams[0]) // requested format
 800b802:	2300      	movs	r3, #0
 800b804:	4699      	mov	r9, r3
 800b806:	f7fe fd2e 	bl	800a266 <PxMessagingTask+0xce>
			SendMessageToModule(src,CODE_UNKNOWN_MESSAGE,0);
 800b80a:	2200      	movs	r2, #0
 800b80c:	2100      	movs	r1, #0
 800b80e:	9804      	ldr	r0, [sp, #16]
 800b810:	f7fe f9a8 	bl	8009b64 <SendMessageToModule>
			result =BOS_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	4699      	mov	r9, r3
 800b818:	f7fe fd2a 	bl	800a270 <PxMessagingTask+0xd8>
					switch(code){
 800b81c:	2300      	movs	r3, #0
 800b81e:	4699      	mov	r9, r3
 800b820:	f7fe fd26 	bl	800a270 <PxMessagingTask+0xd8>
 800b824:	9205      	str	r2, [sp, #20]
 800b826:	2300      	movs	r3, #0
 800b828:	4699      	mov	r9, r3
 800b82a:	f7fe fd21 	bl	800a270 <PxMessagingTask+0xd8>
 800b82e:	2300      	movs	r3, #0
 800b830:	4699      	mov	r9, r3
 800b832:	f7fe fd1d 	bl	800a270 <PxMessagingTask+0xd8>
 800b836:	46c0      	nop			; (mov r8, r8)
 800b838:	0001ffff 	.word	0x0001ffff
 800b83c:	20001188 	.word	0x20001188
 800b840:	20000d7c 	.word	0x20000d7c
 800b844:	0801be08 	.word	0x0801be08
 800b848:	0000ffff 	.word	0x0000ffff
 800b84c:	20001180 	.word	0x20001180
 800b850:	0801be28 	.word	0x0801be28
 800b854:	20001a24 	.word	0x20001a24
 800b858:	20001a14 	.word	0x20001a14
 800b85c:	20001a16 	.word	0x20001a16
 800b860:	08019dbc 	.word	0x08019dbc
 800b864:	20001a18 	.word	0x20001a18
 800b868:	20001a20 	.word	0x20001a20
 800b86c:	20001a1c 	.word	0x20001a1c
 800b870:	20001a10 	.word	0x20001a10
 800b874:	20000ae4 	.word	0x20000ae4
 800b878:	08019dc0 	.word	0x08019dc0
 800b87c:	2000117c 	.word	0x2000117c
			if((dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1)) || (dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID))){
 800b880:	455b      	cmp	r3, fp
 800b882:	d003      	beq.n	800b88c <PxMessagingTask+0x16f4>
 800b884:	2f10      	cmp	r7, #16
 800b886:	d001      	beq.n	800b88c <PxMessagingTask+0x16f4>
 800b888:	f7fe fd4f 	bl	800a32a <PxMessagingTask+0x192>
				if(dst == BOS_BROADCAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b88c:	465b      	mov	r3, fp
 800b88e:	2bff      	cmp	r3, #255	; 0xff
 800b890:	d101      	bne.n	800b896 <PxMessagingTask+0x16fe>
 800b892:	f7fe fcb9 	bl	800a208 <PxMessagingTask+0x70>
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b896:	2bfe      	cmp	r3, #254	; 0xfe
 800b898:	d001      	beq.n	800b89e <PxMessagingTask+0x1706>
 800b89a:	f7fe fce1 	bl	800a260 <PxMessagingTask+0xc8>
 800b89e:	4b2b      	ldr	r3, [pc, #172]	; (800b94c <PxMessagingTask+0x17b4>)
 800b8a0:	5d5a      	ldrb	r2, [r3, r5]
 800b8a2:	4b2b      	ldr	r3, [pc, #172]	; (800b950 <PxMessagingTask+0x17b8>)
 800b8a4:	199b      	adds	r3, r3, r6
 800b8a6:	189b      	adds	r3, r3, r2
 800b8a8:	3b01      	subs	r3, #1
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	4a29      	ldr	r2, [pc, #164]	; (800b954 <PxMessagingTask+0x17bc>)
 800b8ae:	7812      	ldrb	r2, [r2, #0]
					result =BOS_ERR_MSG_Reflection;
 800b8b0:	2103      	movs	r1, #3
 800b8b2:	4689      	mov	r9, r1
				if(dst == BOS_MULTICAST && cMessage[port - 1][messageLength[port - 1] - 1] != bcastLastID){
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d101      	bne.n	800b8bc <PxMessagingTask+0x1724>
 800b8b8:	f7fe fcd5 	bl	800a266 <PxMessagingTask+0xce>
					bcastID =bcastLastID =cMessage[port - 1][messageLength[port - 1] - 1]; // Store bcastID
 800b8bc:	4a25      	ldr	r2, [pc, #148]	; (800b954 <PxMessagingTask+0x17bc>)
 800b8be:	7013      	strb	r3, [r2, #0]
 800b8c0:	4a25      	ldr	r2, [pc, #148]	; (800b958 <PxMessagingTask+0x17c0>)
 800b8c2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST,port);
 800b8c4:	9908      	ldr	r1, [sp, #32]
 800b8c6:	20fe      	movs	r0, #254	; 0xfe
 800b8c8:	f7fe f904 	bl	8009ad4 <BroadcastReceivedMessage>
					cMessage[port - 1][messageLength[port - 1] - 1] =0; // Reset bcastID location
 800b8cc:	4b1f      	ldr	r3, [pc, #124]	; (800b94c <PxMessagingTask+0x17b4>)
 800b8ce:	5d59      	ldrb	r1, [r3, r5]
 800b8d0:	4b1f      	ldr	r3, [pc, #124]	; (800b950 <PxMessagingTask+0x17b8>)
 800b8d2:	199b      	adds	r3, r3, r6
 800b8d4:	185a      	adds	r2, r3, r1
 800b8d6:	3a01      	subs	r2, #1
 800b8d8:	2000      	movs	r0, #0
 800b8da:	7010      	strb	r0, [r2, #0]
					temp =cMessage[port - 1][messageLength[port - 1] - 2]; // Number of members in this multicast group - TODO breaks when message is 14 length and padded
 800b8dc:	1e8a      	subs	r2, r1, #2
 800b8de:	5c9c      	ldrb	r4, [r3, r2]
 800b8e0:	9405      	str	r4, [sp, #20]
					for(i =0; i < temp; i++){
 800b8e2:	2c00      	cmp	r4, #0
 800b8e4:	d02e      	beq.n	800b944 <PxMessagingTask+0x17ac>
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b8e6:	1b13      	subs	r3, r2, r4
 800b8e8:	469c      	mov	ip, r3
 800b8ea:	4b1c      	ldr	r3, [pc, #112]	; (800b95c <PxMessagingTask+0x17c4>)
 800b8ec:	7818      	ldrb	r0, [r3, #0]
 800b8ee:	4b18      	ldr	r3, [pc, #96]	; (800b950 <PxMessagingTask+0x17b8>)
 800b8f0:	199b      	adds	r3, r3, r6
 800b8f2:	4662      	mov	r2, ip
 800b8f4:	5c9b      	ldrb	r3, [r3, r2]
 800b8f6:	4283      	cmp	r3, r0
 800b8f8:	d011      	beq.n	800b91e <PxMessagingTask+0x1786>
 800b8fa:	4653      	mov	r3, sl
 800b8fc:	3301      	adds	r3, #1
 800b8fe:	4463      	add	r3, ip
 800b900:	4a13      	ldr	r2, [pc, #76]	; (800b950 <PxMessagingTask+0x17b8>)
 800b902:	189b      	adds	r3, r3, r2
 800b904:	3201      	adds	r2, #1
 800b906:	4452      	add	r2, sl
 800b908:	3c01      	subs	r4, #1
 800b90a:	b2e4      	uxtb	r4, r4
 800b90c:	1912      	adds	r2, r2, r4
 800b90e:	4462      	add	r2, ip
					for(i =0; i < temp; i++){
 800b910:	4293      	cmp	r3, r2
 800b912:	d017      	beq.n	800b944 <PxMessagingTask+0x17ac>
 800b914:	3301      	adds	r3, #1
						if(myID == cMessage[port - 1][messageLength[port - 1] - 2 - temp + i]){
 800b916:	1e5c      	subs	r4, r3, #1
 800b918:	7824      	ldrb	r4, [r4, #0]
 800b91a:	4284      	cmp	r4, r0
 800b91c:	d1f8      	bne.n	800b910 <PxMessagingTask+0x1778>
				shift +=4;
 800b91e:	9c06      	ldr	r4, [sp, #24]
 800b920:	3404      	adds	r4, #4
				numOfParams =messageLength[port - 1] - shift;
 800b922:	1b0a      	subs	r2, r1, r4
 800b924:	b2d3      	uxtb	r3, r2
 800b926:	9306      	str	r3, [sp, #24]
 800b928:	f7fe fc92 	bl	800a250 <PxMessagingTask+0xb8>
									if((BOS_var_reg[cMessage[port - 1][shift] - 1] & 0x000F) != cMessage[port - 1][1 + shift]){
 800b92c:	2338      	movs	r3, #56	; 0x38
 800b92e:	436b      	muls	r3, r5
 800b930:	4a07      	ldr	r2, [pc, #28]	; (800b950 <PxMessagingTask+0x17b8>)
 800b932:	18d2      	adds	r2, r2, r3
 800b934:	464b      	mov	r3, r9
 800b936:	5cd3      	ldrb	r3, [r2, r3]
 800b938:	3b01      	subs	r3, #1
 800b93a:	0098      	lsls	r0, r3, #2
 800b93c:	4908      	ldr	r1, [pc, #32]	; (800b960 <PxMessagingTask+0x17c8>)
 800b93e:	5841      	ldr	r1, [r0, r1]
 800b940:	5dd2      	ldrb	r2, [r2, r7]
 800b942:	e450      	b.n	800b1e6 <PxMessagingTask+0x104e>
										responseStatus =BOS_ERR_REMOTE_READ_NO_VAR;
 800b944:	2366      	movs	r3, #102	; 0x66
 800b946:	4699      	mov	r9, r3
 800b948:	f7fe fc92 	bl	800a270 <PxMessagingTask+0xd8>
 800b94c:	20000fa4 	.word	0x20000fa4
 800b950:	20000d7c 	.word	0x20000d7c
 800b954:	20001a4a 	.word	0x20001a4a
 800b958:	20000d28 	.word	0x20000d28
 800b95c:	200010ea 	.word	0x200010ea
 800b960:	20006ddc 	.word	0x20006ddc

0800b964 <StreamMemsToPort>:
	}
	return status;
}

static Module_Status StreamMemsToPort(uint8_t port, uint8_t module, uint32_t period, uint32_t timeout, SampleMemsToPort function)
{
 800b964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b966:	b085      	sub	sp, #20
 800b968:	9001      	str	r0, [sp, #4]
 800b96a:	9102      	str	r1, [sp, #8]
 800b96c:	0016      	movs	r6, r2
 800b96e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	Module_Status status = H0AR9_OK;


	if (period < MIN_MEMS_PERIOD_MS)
 800b970:	2a63      	cmp	r2, #99	; 0x63
 800b972:	d930      	bls.n	800b9d6 <StreamMemsToPort+0x72>
		return H0AR9_ERR_WrongParams;
	if (port == 0)
 800b974:	2800      	cmp	r0, #0
 800b976:	d030      	beq.n	800b9da <StreamMemsToPort+0x76>
		return H0AR9_ERR_WrongParams;
	if (port == PcPort) // Check if CLI is not enabled at that port!
 800b978:	4a1a      	ldr	r2, [pc, #104]	; (800b9e4 <StreamMemsToPort+0x80>)
 800b97a:	7812      	ldrb	r2, [r2, #0]
 800b97c:	4282      	cmp	r2, r0
 800b97e:	d02e      	beq.n	800b9de <StreamMemsToPort+0x7a>
 800b980:	9603      	str	r6, [sp, #12]
 800b982:	429e      	cmp	r6, r3
 800b984:	d200      	bcs.n	800b988 <StreamMemsToPort+0x24>
 800b986:	9303      	str	r3, [sp, #12]
		return H0AR9_ERR_BUSY;

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 800b988:	0031      	movs	r1, r6
 800b98a:	9803      	ldr	r0, [sp, #12]
 800b98c:	f7f4 fbe0 	bl	8000150 <__udivsi3>
 800b990:	0005      	movs	r5, r0
	stopStream = false;
 800b992:	4b15      	ldr	r3, [pc, #84]	; (800b9e8 <StreamMemsToPort+0x84>)
 800b994:	2200      	movs	r2, #0
 800b996:	701a      	strb	r2, [r3, #0]

	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		function(port, module);

		vTaskDelay(pdMS_TO_TICKS(period));
 800b998:	0170      	lsls	r0, r6, #5
 800b99a:	1b80      	subs	r0, r0, r6
 800b99c:	0080      	lsls	r0, r0, #2
 800b99e:	1980      	adds	r0, r0, r6
 800b9a0:	00c0      	lsls	r0, r0, #3
 800b9a2:	21fa      	movs	r1, #250	; 0xfa
 800b9a4:	0089      	lsls	r1, r1, #2
 800b9a6:	f7f4 fbd3 	bl	8000150 <__udivsi3>
 800b9aa:	0006      	movs	r6, r0
		if (stopStream) {
 800b9ac:	4f0e      	ldr	r7, [pc, #56]	; (800b9e8 <StreamMemsToPort+0x84>)
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b9ae:	2d00      	cmp	r5, #0
 800b9b0:	dd0c      	ble.n	800b9cc <StreamMemsToPort+0x68>
		function(port, module);
 800b9b2:	9902      	ldr	r1, [sp, #8]
 800b9b4:	9801      	ldr	r0, [sp, #4]
 800b9b6:	47a0      	blx	r4
		vTaskDelay(pdMS_TO_TICKS(period));
 800b9b8:	0030      	movs	r0, r6
 800b9ba:	f004 f933 	bl	800fc24 <vTaskDelay>
 800b9be:	3d01      	subs	r5, #1
		if (stopStream) {
 800b9c0:	783b      	ldrb	r3, [r7, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0f3      	beq.n	800b9ae <StreamMemsToPort+0x4a>
			status = H0AR9_ERR_TERMINATED;
 800b9c6:	200a      	movs	r0, #10
			break;
		}
	}
	return status;
}
 800b9c8:	b005      	add	sp, #20
 800b9ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b9cc:	9b03      	ldr	r3, [sp, #12]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	d0ef      	beq.n	800b9b2 <StreamMemsToPort+0x4e>
	Module_Status status = H0AR9_OK;
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	e7f8      	b.n	800b9c8 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 800b9d6:	200b      	movs	r0, #11
 800b9d8:	e7f6      	b.n	800b9c8 <StreamMemsToPort+0x64>
		return H0AR9_ERR_WrongParams;
 800b9da:	200b      	movs	r0, #11
 800b9dc:	e7f4      	b.n	800b9c8 <StreamMemsToPort+0x64>
		return H0AR9_ERR_BUSY;
 800b9de:	2007      	movs	r0, #7
 800b9e0:	e7f2      	b.n	800b9c8 <StreamMemsToPort+0x64>
 800b9e2:	46c0      	nop			; (mov r8, r8)
 800b9e4:	20000ae8 	.word	0x20000ae8
 800b9e8:	20001c08 	.word	0x20001c08

0800b9ec <StreamMemsToCLI>:

static Module_Status StreamMemsToCLI(uint32_t period, uint32_t timeout, SampleMemsToString function)
{
 800b9ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ee:	46de      	mov	lr, fp
 800b9f0:	4657      	mov	r7, sl
 800b9f2:	464e      	mov	r6, r9
 800b9f4:	4645      	mov	r5, r8
 800b9f6:	b5e0      	push	{r5, r6, r7, lr}
 800b9f8:	b087      	sub	sp, #28
 800b9fa:	0004      	movs	r4, r0
 800b9fc:	4691      	mov	r9, r2
	Module_Status status = H0AR9_OK;
	int8_t *pcOutputString = NULL;

	if (period < MIN_MEMS_PERIOD_MS)
 800b9fe:	2863      	cmp	r0, #99	; 0x63
 800ba00:	d800      	bhi.n	800ba04 <StreamMemsToCLI+0x18>
 800ba02:	e081      	b.n	800bb08 <StreamMemsToCLI+0x11c>
 800ba04:	9004      	str	r0, [sp, #16]
 800ba06:	4288      	cmp	r0, r1
 800ba08:	d200      	bcs.n	800ba0c <StreamMemsToCLI+0x20>
 800ba0a:	9104      	str	r1, [sp, #16]
	// TODO: Check if CLI is enable or not

	if (period > timeout)
		timeout = period;

	long numTimes = timeout / period;
 800ba0c:	0021      	movs	r1, r4
 800ba0e:	9804      	ldr	r0, [sp, #16]
 800ba10:	f7f4 fb9e 	bl	8000150 <__udivsi3>
 800ba14:	0006      	movs	r6, r0
	stopStream = false;
 800ba16:	4b3d      	ldr	r3, [pc, #244]	; (800bb0c <StreamMemsToCLI+0x120>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	701a      	strb	r2, [r3, #0]
	long numDeltaDelay =  period / DELTA_SLEEP_MS;
 800ba1c:	2164      	movs	r1, #100	; 0x64
 800ba1e:	0020      	movs	r0, r4
 800ba20:	f7f4 fb96 	bl	8000150 <__udivsi3>
 800ba24:	9003      	str	r0, [sp, #12]
	unsigned lastDelayMS = period % DELTA_SLEEP_MS;
 800ba26:	2164      	movs	r1, #100	; 0x64
 800ba28:	0020      	movs	r0, r4
 800ba2a:	f7f4 fc17 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800ba2e:	0148      	lsls	r0, r1, #5
 800ba30:	1a40      	subs	r0, r0, r1
 800ba32:	0080      	lsls	r0, r0, #2
 800ba34:	1840      	adds	r0, r0, r1
 800ba36:	00c0      	lsls	r0, r0, #3
 800ba38:	21fa      	movs	r1, #250	; 0xfa
 800ba3a:	0089      	lsls	r1, r1, #2
 800ba3c:	f7f4 fb88 	bl	8000150 <__udivsi3>
 800ba40:	9005      	str	r0, [sp, #20]
	int8_t *pcOutputString = NULL;
 800ba42:	2300      	movs	r3, #0
 800ba44:	9302      	str	r3, [sp, #8]
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
		function((char *)pcOutputString, 100);


		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ba46:	4b32      	ldr	r3, [pc, #200]	; (800bb10 <StreamMemsToCLI+0x124>)
 800ba48:	469a      	mov	sl, r3
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800ba4a:	4698      	mov	r8, r3
 800ba4c:	4f31      	ldr	r7, [pc, #196]	; (800bb14 <StreamMemsToCLI+0x128>)
 800ba4e:	46bb      	mov	fp, r7
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800ba50:	2e00      	cmp	r6, #0
 800ba52:	dd55      	ble.n	800bb00 <StreamMemsToCLI+0x114>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800ba54:	f003 f96c 	bl	800ed30 <FreeRTOS_CLIGetOutputBuffer>
 800ba58:	0004      	movs	r4, r0
 800ba5a:	9002      	str	r0, [sp, #8]
		function((char *)pcOutputString, 100);
 800ba5c:	2164      	movs	r1, #100	; 0x64
 800ba5e:	47c8      	blx	r9
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800ba60:	0020      	movs	r0, r4
 800ba62:	f7f4 fb59 	bl	8000118 <strlen>
 800ba66:	23fa      	movs	r3, #250	; 0xfa
 800ba68:	b282      	uxth	r2, r0
 800ba6a:	4651      	mov	r1, sl
 800ba6c:	7808      	ldrb	r0, [r1, #0]
 800ba6e:	2101      	movs	r1, #1
 800ba70:	4249      	negs	r1, r1
 800ba72:	9100      	str	r1, [sp, #0]
 800ba74:	005b      	lsls	r3, r3, #1
 800ba76:	0021      	movs	r1, r4
 800ba78:	f002 ff18 	bl	800e8ac <writePxMutex>
 800ba7c:	9d03      	ldr	r5, [sp, #12]
	while (numDeltaDelay-- > 0) {
 800ba7e:	2d00      	cmp	r5, #0
 800ba80:	dd39      	ble.n	800baf6 <StreamMemsToCLI+0x10a>
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 800ba82:	2064      	movs	r0, #100	; 0x64
 800ba84:	f004 f8ce 	bl	800fc24 <vTaskDelay>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800ba88:	4643      	mov	r3, r8
 800ba8a:	781c      	ldrb	r4, [r3, #0]
 800ba8c:	3c01      	subs	r4, #1
 800ba8e:	0063      	lsls	r3, r4, #1
 800ba90:	191b      	adds	r3, r3, r4
 800ba92:	019b      	lsls	r3, r3, #6
 800ba94:	5ddb      	ldrb	r3, [r3, r7]
 800ba96:	2b0d      	cmp	r3, #13
 800ba98:	d011      	beq.n	800babe <StreamMemsToCLI+0xd2>
 800ba9a:	0061      	lsls	r1, r4, #1
 800ba9c:	1909      	adds	r1, r1, r4
 800ba9e:	0189      	lsls	r1, r1, #6
 800baa0:	4459      	add	r1, fp
 800baa2:	2301      	movs	r3, #1
 800baa4:	0018      	movs	r0, r3
 800baa6:	5cca      	ldrb	r2, [r1, r3]
 800baa8:	2a0d      	cmp	r2, #13
 800baaa:	d009      	beq.n	800bac0 <StreamMemsToCLI+0xd4>
 800baac:	3301      	adds	r3, #1
		for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800baae:	2bc0      	cmp	r3, #192	; 0xc0
 800bab0:	d1f8      	bne.n	800baa4 <StreamMemsToCLI+0xb8>
 800bab2:	3d01      	subs	r5, #1
		if (stopStream)
 800bab4:	4b15      	ldr	r3, [pc, #84]	; (800bb0c <StreamMemsToCLI+0x120>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0e0      	beq.n	800ba7e <StreamMemsToCLI+0x92>
 800babc:	e007      	b.n	800bace <StreamMemsToCLI+0xe2>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800babe:	2000      	movs	r0, #0
				UARTRxBuf[PcPort-1][chr] = 0;
 800bac0:	0063      	lsls	r3, r4, #1
 800bac2:	191b      	adds	r3, r3, r4
 800bac4:	019b      	lsls	r3, r3, #6
 800bac6:	4a13      	ldr	r2, [pc, #76]	; (800bb14 <StreamMemsToCLI+0x128>)
 800bac8:	18d3      	adds	r3, r2, r3
 800baca:	2200      	movs	r2, #0
 800bacc:	541a      	strb	r2, [r3, r0]
		if (PollingSleepCLISafe(period) != H0AR9_OK)
			break;
	}

	memset((char *) pcOutputString, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800bace:	2299      	movs	r2, #153	; 0x99
 800bad0:	0092      	lsls	r2, r2, #2
 800bad2:	2100      	movs	r1, #0
 800bad4:	9c02      	ldr	r4, [sp, #8]
 800bad6:	0020      	movs	r0, r4
 800bad8:	f008 ff6e 	bl	80149b8 <memset>
  sprintf((char *)pcOutputString, "\r\n");
 800badc:	2203      	movs	r2, #3
 800bade:	490e      	ldr	r1, [pc, #56]	; (800bb18 <StreamMemsToCLI+0x12c>)
 800bae0:	0020      	movs	r0, r4
 800bae2:	f008 ff60 	bl	80149a6 <memcpy>
	return status;
 800bae6:	2000      	movs	r0, #0
}
 800bae8:	b007      	add	sp, #28
 800baea:	bc3c      	pop	{r2, r3, r4, r5}
 800baec:	4690      	mov	r8, r2
 800baee:	4699      	mov	r9, r3
 800baf0:	46a2      	mov	sl, r4
 800baf2:	46ab      	mov	fp, r5
 800baf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800baf6:	3e01      	subs	r6, #1
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800baf8:	9805      	ldr	r0, [sp, #20]
 800bafa:	f004 f893 	bl	800fc24 <vTaskDelay>
 800bafe:	e7a7      	b.n	800ba50 <StreamMemsToCLI+0x64>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800bb00:	9b04      	ldr	r3, [sp, #16]
 800bb02:	3301      	adds	r3, #1
 800bb04:	d0a6      	beq.n	800ba54 <StreamMemsToCLI+0x68>
 800bb06:	e7e2      	b.n	800bace <StreamMemsToCLI+0xe2>
		return H0AR9_ERR_WrongParams;
 800bb08:	200b      	movs	r0, #11
 800bb0a:	e7ed      	b.n	800bae8 <StreamMemsToCLI+0xfc>
 800bb0c:	20001c08 	.word	0x20001c08
 800bb10:	20000ae8 	.word	0x20000ae8
 800bb14:	20001348 	.word	0x20001348
 800bb18:	0801b398 	.word	0x0801b398

0800bb1c <StopStreamCommand>:
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800bb1c:	b510      	push	{r4, lr}
	// Make sure we return something
	pcWriteBuffer[0] = '\0';
 800bb1e:	2300      	movs	r3, #0
 800bb20:	7003      	strb	r3, [r0, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Stopping Streaming MEMS...\r\n");
 800bb22:	4a04      	ldr	r2, [pc, #16]	; (800bb34 <StopStreamCommand+0x18>)
 800bb24:	f009 f942 	bl	8014dac <snprintf>
	stopStream = true;
 800bb28:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <StopStreamCommand+0x1c>)
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	701a      	strb	r2, [r3, #0]

	stopStreamMems();
	return pdFALSE;
}
 800bb2e:	2000      	movs	r0, #0
 800bb30:	bd10      	pop	{r4, pc}
 800bb32:	46c0      	nop			; (mov r8, r8)
 800bb34:	0801bfc8 	.word	0x0801bfc8
 800bb38:	20001c08 	.word	0x20001c08

0800bb3c <SystemClock_Config>:
{
 800bb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb3e:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800bb40:	2401      	movs	r4, #1
 800bb42:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800bb44:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800bb46:	9410      	str	r4, [sp, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue =16;
 800bb48:	2310      	movs	r3, #16
 800bb4a:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800bb4c:	2702      	movs	r7, #2
 800bb4e:	9716      	str	r7, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800bb50:	2680      	movs	r6, #128	; 0x80
 800bb52:	0276      	lsls	r6, r6, #9
 800bb54:	9617      	str	r6, [sp, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800bb56:	2380      	movs	r3, #128	; 0x80
 800bb58:	035b      	lsls	r3, r3, #13
 800bb5a:	9318      	str	r3, [sp, #96]	; 0x60
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800bb5c:	2500      	movs	r5, #0
 800bb5e:	9519      	str	r5, [sp, #100]	; 0x64
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800bb60:	a80d      	add	r0, sp, #52	; 0x34
 800bb62:	f006 ff11 	bl	8012988 <HAL_RCC_OscConfig>
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800bb66:	2307      	movs	r3, #7
 800bb68:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800bb6a:	970a      	str	r7, [sp, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800bb6c:	950b      	str	r5, [sp, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800bb6e:	950c      	str	r5, [sp, #48]	; 0x30
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct,FLASH_LATENCY_1);
 800bb70:	2101      	movs	r1, #1
 800bb72:	a809      	add	r0, sp, #36	; 0x24
 800bb74:	f007 f9ca 	bl	8012f0c <HAL_RCC_ClockConfig>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3;
 800bb78:	4b1a      	ldr	r3, [pc, #104]	; (800bbe4 <SystemClock_Config+0xa8>)
 800bb7a:	9302      	str	r3, [sp, #8]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800bb7c:	9504      	str	r5, [sp, #16]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800bb7e:	9505      	str	r5, [sp, #20]
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800bb80:	9506      	str	r5, [sp, #24]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bb82:	a802      	add	r0, sp, #8
 800bb84:	f007 fb70 	bl	8013268 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800bb88:	4d17      	ldr	r5, [pc, #92]	; (800bbe8 <SystemClock_Config+0xac>)
 800bb8a:	69ea      	ldr	r2, [r5, #28]
 800bb8c:	2180      	movs	r1, #128	; 0x80
 800bb8e:	0549      	lsls	r1, r1, #21
 800bb90:	430a      	orrs	r2, r1
 800bb92:	61ea      	str	r2, [r5, #28]
 800bb94:	69eb      	ldr	r3, [r5, #28]
 800bb96:	400b      	ands	r3, r1
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
	HAL_PWR_EnableBkUpAccess();
 800bb9c:	f006 feea 	bl	8012974 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800bba0:	9602      	str	r6, [sp, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800bba2:	23c0      	movs	r3, #192	; 0xc0
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800bba8:	a802      	add	r0, sp, #8
 800bbaa:	f007 fb5d 	bl	8013268 <HAL_RCCEx_PeriphCLKConfig>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800bbae:	f007 fb37 	bl	8013220 <HAL_RCC_GetHCLKFreq>
 800bbb2:	21fa      	movs	r1, #250	; 0xfa
 800bbb4:	0089      	lsls	r1, r1, #2
 800bbb6:	f7f4 facb 	bl	8000150 <__udivsi3>
 800bbba:	f005 fb43 	bl	8011244 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800bbbe:	2004      	movs	r0, #4
 800bbc0:	f005 fb5c 	bl	801127c <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800bbc4:	69ab      	ldr	r3, [r5, #24]
 800bbc6:	4323      	orrs	r3, r4
 800bbc8:	61ab      	str	r3, [r5, #24]
 800bbca:	69ab      	ldr	r3, [r5, #24]
 800bbcc:	401c      	ands	r4, r3
 800bbce:	9401      	str	r4, [sp, #4]
 800bbd0:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(SysTick_IRQn,0,0);
 800bbd2:	2001      	movs	r0, #1
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	4240      	negs	r0, r0
 800bbda:	f005 faeb 	bl	80111b4 <HAL_NVIC_SetPriority>
}
 800bbde:	b01b      	add	sp, #108	; 0x6c
 800bbe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbe2:	46c0      	nop			; (mov r8, r8)
 800bbe4:	00040003 	.word	0x00040003
 800bbe8:	40021000 	.word	0x40021000

0800bbec <RegisterModuleCLICommands>:
{
 800bbec:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &SampleCommandDefinition );
 800bbee:	4805      	ldr	r0, [pc, #20]	; (800bc04 <RegisterModuleCLICommands+0x18>)
 800bbf0:	f003 f804 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StreamCommandDefinition );
 800bbf4:	4804      	ldr	r0, [pc, #16]	; (800bc08 <RegisterModuleCLICommands+0x1c>)
 800bbf6:	f003 f801 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &StopCommandDefinition);
 800bbfa:	4804      	ldr	r0, [pc, #16]	; (800bc0c <RegisterModuleCLICommands+0x20>)
 800bbfc:	f002 fffe 	bl	800ebfc <FreeRTOS_CLIRegisterCommand>
}
 800bc00:	bd10      	pop	{r4, pc}
 800bc02:	46c0      	nop			; (mov r8, r8)
 800bc04:	0801bf24 	.word	0x0801bf24
 800bc08:	0801bfe8 	.word	0x0801bfe8
 800bc0c:	0801bfb8 	.word	0x0801bfb8

0800bc10 <APDS9950_init>:
{
 800bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc12:	46c6      	mov	lr, r8
 800bc14:	b500      	push	{lr}
	CONTROL = 0x0F;
 800bc16:	4d1c      	ldr	r5, [pc, #112]	; (800bc88 <APDS9950_init+0x78>)
 800bc18:	230f      	movs	r3, #15
 800bc1a:	702b      	strb	r3, [r5, #0]
	Enable = 0x00;
 800bc1c:	4c1b      	ldr	r4, [pc, #108]	; (800bc8c <APDS9950_init+0x7c>)
 800bc1e:	2300      	movs	r3, #0
 800bc20:	7023      	strb	r3, [r4, #0]
	ATIME  = 0x01;
 800bc22:	4b1b      	ldr	r3, [pc, #108]	; (800bc90 <APDS9950_init+0x80>)
 800bc24:	4698      	mov	r8, r3
 800bc26:	2301      	movs	r3, #1
 800bc28:	4642      	mov	r2, r8
 800bc2a:	7013      	strb	r3, [r2, #0]
	WTIME  = 0x03;
 800bc2c:	4f19      	ldr	r7, [pc, #100]	; (800bc94 <APDS9950_init+0x84>)
 800bc2e:	3302      	adds	r3, #2
 800bc30:	703b      	strb	r3, [r7, #0]
	PPULSE = 0x0E;
 800bc32:	4e19      	ldr	r6, [pc, #100]	; (800bc98 <APDS9950_init+0x88>)
 800bc34:	330b      	adds	r3, #11
 800bc36:	7033      	strb	r3, [r6, #0]
	redReg = 0x16;
 800bc38:	4b18      	ldr	r3, [pc, #96]	; (800bc9c <APDS9950_init+0x8c>)
 800bc3a:	2216      	movs	r2, #22
 800bc3c:	701a      	strb	r2, [r3, #0]
	greenReg = 0x18;
 800bc3e:	4b18      	ldr	r3, [pc, #96]	; (800bca0 <APDS9950_init+0x90>)
 800bc40:	3202      	adds	r2, #2
 800bc42:	701a      	strb	r2, [r3, #0]
    blueReg = 0x1A;
 800bc44:	4b17      	ldr	r3, [pc, #92]	; (800bca4 <APDS9950_init+0x94>)
 800bc46:	3202      	adds	r2, #2
 800bc48:	701a      	strb	r2, [r3, #0]
    distanceReg = 0x1C;
 800bc4a:	4b17      	ldr	r3, [pc, #92]	; (800bca8 <APDS9950_init+0x98>)
 800bc4c:	3202      	adds	r2, #2
 800bc4e:	701a      	strb	r2, [r3, #0]
    WriteRegData (Enable,0x00);
 800bc50:	2100      	movs	r1, #0
 800bc52:	2000      	movs	r0, #0
 800bc54:	f002 f934 	bl	800dec0 <WriteRegData>
    WriteRegData (ATIME,0x00);
 800bc58:	4643      	mov	r3, r8
 800bc5a:	7818      	ldrb	r0, [r3, #0]
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	f002 f92f 	bl	800dec0 <WriteRegData>
    WriteRegData (WTIME,0xff);
 800bc62:	7838      	ldrb	r0, [r7, #0]
 800bc64:	21ff      	movs	r1, #255	; 0xff
 800bc66:	f002 f92b 	bl	800dec0 <WriteRegData>
    WriteRegData (PPULSE,0x01);
 800bc6a:	7830      	ldrb	r0, [r6, #0]
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	f002 f927 	bl	800dec0 <WriteRegData>
    WriteRegData (CONTROL, 0x20);
 800bc72:	7828      	ldrb	r0, [r5, #0]
 800bc74:	2120      	movs	r1, #32
 800bc76:	f002 f923 	bl	800dec0 <WriteRegData>
    WriteRegData (Enable, 0x0F);
 800bc7a:	7820      	ldrb	r0, [r4, #0]
 800bc7c:	210f      	movs	r1, #15
 800bc7e:	f002 f91f 	bl	800dec0 <WriteRegData>
}
 800bc82:	bc04      	pop	{r2}
 800bc84:	4690      	mov	r8, r2
 800bc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc88:	2000716e 	.word	0x2000716e
 800bc8c:	200070ee 	.word	0x200070ee
 800bc90:	20007075 	.word	0x20007075
 800bc94:	20007074 	.word	0x20007074
 800bc98:	200070ec 	.word	0x200070ec
 800bc9c:	200070ed 	.word	0x200070ed
 800bca0:	20007076 	.word	0x20007076
 800bca4:	20007078 	.word	0x20007078
 800bca8:	20007258 	.word	0x20007258

0800bcac <Module_Peripheral_Init>:
{
 800bcac:	b510      	push	{r4, lr}
	MX_USART2_UART_Init();
 800bcae:	f002 fc2b 	bl	800e508 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800bcb2:	f002 fc41 	bl	800e538 <MX_USART3_UART_Init>
	MX_USART4_UART_Init();
 800bcb6:	f002 fc57 	bl	800e568 <MX_USART4_UART_Init>
	MX_USART5_UART_Init();
 800bcba:	f002 fc6d 	bl	800e598 <MX_USART5_UART_Init>
	MX_USART6_UART_Init();
 800bcbe:	f002 fc83 	bl	800e5c8 <MX_USART6_UART_Init>
	SENSORS_GPIO_Init();
 800bcc2:	f001 ff97 	bl	800dbf4 <SENSORS_GPIO_Init>
	MX_I2C_Init();
 800bcc6:	f002 f8c5 	bl	800de54 <MX_I2C_Init>
	APDS9950_init();
 800bcca:	f7ff ffa1 	bl	800bc10 <APDS9950_init>
}
 800bcce:	bd10      	pop	{r4, pc}

0800bcd0 <SampleColor>:
{
 800bcd0:	b570      	push	{r4, r5, r6, lr}
 800bcd2:	0006      	movs	r6, r0
 800bcd4:	000d      	movs	r5, r1
 800bcd6:	0014      	movs	r4, r2
	*Red = Read_Word(redReg);
 800bcd8:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <SampleColor+0x28>)
 800bcda:	7818      	ldrb	r0, [r3, #0]
 800bcdc:	f002 f906 	bl	800deec <Read_Word>
 800bce0:	8030      	strh	r0, [r6, #0]
	*Green = Read_Word(greenReg);
 800bce2:	4b06      	ldr	r3, [pc, #24]	; (800bcfc <SampleColor+0x2c>)
 800bce4:	7818      	ldrb	r0, [r3, #0]
 800bce6:	f002 f901 	bl	800deec <Read_Word>
 800bcea:	8028      	strh	r0, [r5, #0]
	*Blue = Read_Word(blueReg);
 800bcec:	4b04      	ldr	r3, [pc, #16]	; (800bd00 <SampleColor+0x30>)
 800bcee:	7818      	ldrb	r0, [r3, #0]
 800bcf0:	f002 f8fc 	bl	800deec <Read_Word>
 800bcf4:	8020      	strh	r0, [r4, #0]
}
 800bcf6:	bd70      	pop	{r4, r5, r6, pc}
 800bcf8:	200070ed 	.word	0x200070ed
 800bcfc:	20007076 	.word	0x20007076
 800bd00:	20007078 	.word	0x20007078

0800bd04 <SampleColorBuf>:
{
 800bd04:	b510      	push	{r4, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	0004      	movs	r4, r0
	SampleColor(rgb,rgb+1,rgb+2);
 800bd0a:	aa01      	add	r2, sp, #4
 800bd0c:	466b      	mov	r3, sp
 800bd0e:	1c99      	adds	r1, r3, #2
 800bd10:	4668      	mov	r0, sp
 800bd12:	f7ff ffdd 	bl	800bcd0 <SampleColor>
	buffer[0]=rgb[0];
 800bd16:	466b      	mov	r3, sp
 800bd18:	8818      	ldrh	r0, [r3, #0]
 800bd1a:	f7f5 f925 	bl	8000f68 <__aeabi_ui2f>
 800bd1e:	6020      	str	r0, [r4, #0]
	buffer[1]=rgb[1];
 800bd20:	466b      	mov	r3, sp
 800bd22:	8858      	ldrh	r0, [r3, #2]
 800bd24:	f7f5 f920 	bl	8000f68 <__aeabi_ui2f>
 800bd28:	6060      	str	r0, [r4, #4]
	buffer[2]=rgb[2];
 800bd2a:	466b      	mov	r3, sp
 800bd2c:	8898      	ldrh	r0, [r3, #4]
 800bd2e:	f7f5 f91b 	bl	8000f68 <__aeabi_ui2f>
 800bd32:	60a0      	str	r0, [r4, #8]
}
 800bd34:	b002      	add	sp, #8
 800bd36:	bd10      	pop	{r4, pc}

0800bd38 <SampleColorToPort>:
{
 800bd38:	b530      	push	{r4, r5, lr}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	0004      	movs	r4, r0
 800bd3e:	000d      	movs	r5, r1
	SampleColorBuf(buffer);
 800bd40:	a801      	add	r0, sp, #4
 800bd42:	f7ff ffdf 	bl	800bd04 <SampleColorBuf>
	if(module == myID){
 800bd46:	4b23      	ldr	r3, [pc, #140]	; (800bdd4 <SampleColorToPort+0x9c>)
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	42ab      	cmp	r3, r5
 800bd4c:	d021      	beq.n	800bd92 <SampleColorToPort+0x5a>
		messageParams[0] =port;
 800bd4e:	4b22      	ldr	r3, [pc, #136]	; (800bdd8 <SampleColorToPort+0xa0>)
 800bd50:	701c      	strb	r4, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800bd52:	aa01      	add	r2, sp, #4
 800bd54:	78d1      	ldrb	r1, [r2, #3]
 800bd56:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800bd58:	7891      	ldrb	r1, [r2, #2]
 800bd5a:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bd5c:	7851      	ldrb	r1, [r2, #1]
 800bd5e:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bd60:	7811      	ldrb	r1, [r2, #0]
 800bd62:	7119      	strb	r1, [r3, #4]
		messageParams[5] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800bd64:	79d1      	ldrb	r1, [r2, #7]
 800bd66:	7159      	strb	r1, [r3, #5]
		messageParams[6] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800bd68:	7991      	ldrb	r1, [r2, #6]
 800bd6a:	7199      	strb	r1, [r3, #6]
		messageParams[7] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800bd6c:	7951      	ldrb	r1, [r2, #5]
 800bd6e:	71d9      	strb	r1, [r3, #7]
		messageParams[8] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800bd70:	7911      	ldrb	r1, [r2, #4]
 800bd72:	7219      	strb	r1, [r3, #8]
		messageParams[9] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800bd74:	7ad1      	ldrb	r1, [r2, #11]
 800bd76:	7259      	strb	r1, [r3, #9]
		messageParams[10] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800bd78:	7a91      	ldrb	r1, [r2, #10]
 800bd7a:	7299      	strb	r1, [r3, #10]
		messageParams[11] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800bd7c:	7a51      	ldrb	r1, [r2, #9]
 800bd7e:	72d9      	strb	r1, [r3, #11]
		messageParams[12] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800bd80:	7a12      	ldrb	r2, [r2, #8]
 800bd82:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(module,CODE_PORT_FORWARD,(sizeof(float) * 3) + 1);
 800bd84:	220d      	movs	r2, #13
 800bd86:	2123      	movs	r1, #35	; 0x23
 800bd88:	0028      	movs	r0, r5
 800bd8a:	f7fd feeb 	bl	8009b64 <SendMessageToModule>
}
 800bd8e:	b005      	add	sp, #20
 800bd90:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800bd92:	ab01      	add	r3, sp, #4
 800bd94:	78da      	ldrb	r2, [r3, #3]
 800bd96:	4911      	ldr	r1, [pc, #68]	; (800bddc <SampleColorToPort+0xa4>)
 800bd98:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800bd9a:	789a      	ldrb	r2, [r3, #2]
 800bd9c:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bd9e:	785a      	ldrb	r2, [r3, #1]
 800bda0:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bda2:	781a      	ldrb	r2, [r3, #0]
 800bda4:	70ca      	strb	r2, [r1, #3]
		temp[4] =*((__IO uint8_t* )(&buffer[1]) + 3);
 800bda6:	79da      	ldrb	r2, [r3, #7]
 800bda8:	710a      	strb	r2, [r1, #4]
		temp[5] =*((__IO uint8_t* )(&buffer[1]) + 2);
 800bdaa:	799a      	ldrb	r2, [r3, #6]
 800bdac:	714a      	strb	r2, [r1, #5]
		temp[6] =*((__IO uint8_t* )(&buffer[1]) + 1);
 800bdae:	795a      	ldrb	r2, [r3, #5]
 800bdb0:	718a      	strb	r2, [r1, #6]
		temp[7] =*((__IO uint8_t* )(&buffer[1]) + 0);
 800bdb2:	791a      	ldrb	r2, [r3, #4]
 800bdb4:	71ca      	strb	r2, [r1, #7]
		temp[8] =*((__IO uint8_t* )(&buffer[2]) + 3);
 800bdb6:	7ada      	ldrb	r2, [r3, #11]
 800bdb8:	720a      	strb	r2, [r1, #8]
		temp[9] =*((__IO uint8_t* )(&buffer[2]) + 2);
 800bdba:	7a9a      	ldrb	r2, [r3, #10]
 800bdbc:	724a      	strb	r2, [r1, #9]
		temp[10] =*((__IO uint8_t* )(&buffer[2]) + 1);
 800bdbe:	7a5a      	ldrb	r2, [r3, #9]
 800bdc0:	728a      	strb	r2, [r1, #10]
		temp[11] =*((__IO uint8_t* )(&buffer[2]) + 0);
 800bdc2:	7a1b      	ldrb	r3, [r3, #8]
 800bdc4:	72cb      	strb	r3, [r1, #11]
		writePxITMutex(port,(char* )&temp[0],12 * sizeof(uint8_t),10);
 800bdc6:	230a      	movs	r3, #10
 800bdc8:	220c      	movs	r2, #12
 800bdca:	0020      	movs	r0, r4
 800bdcc:	f002 fd96 	bl	800e8fc <writePxITMutex>
 800bdd0:	e7dd      	b.n	800bd8e <SampleColorToPort+0x56>
 800bdd2:	46c0      	nop			; (mov r8, r8)
 800bdd4:	200010ea 	.word	0x200010ea
 800bdd8:	20000fac 	.word	0x20000fac
 800bddc:	20001c0c 	.word	0x20001c0c

0800bde0 <SampleColorToString>:
{
 800bde0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bde2:	b087      	sub	sp, #28
 800bde4:	9003      	str	r0, [sp, #12]
 800bde6:	000f      	movs	r7, r1
	uint16_t red = 0, green = 0, blue = 0;
 800bde8:	260e      	movs	r6, #14
 800bdea:	ab02      	add	r3, sp, #8
 800bdec:	469c      	mov	ip, r3
 800bdee:	4466      	add	r6, ip
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	8033      	strh	r3, [r6, #0]
 800bdf4:	ad05      	add	r5, sp, #20
 800bdf6:	802b      	strh	r3, [r5, #0]
 800bdf8:	240a      	movs	r4, #10
 800bdfa:	4464      	add	r4, ip
 800bdfc:	8023      	strh	r3, [r4, #0]
	SampleColor(&red, &green, &blue);
 800bdfe:	0022      	movs	r2, r4
 800be00:	0029      	movs	r1, r5
 800be02:	0030      	movs	r0, r6
 800be04:	f7ff ff64 	bl	800bcd0 <SampleColor>
	Red=red;
 800be08:	8833      	ldrh	r3, [r6, #0]
 800be0a:	4a07      	ldr	r2, [pc, #28]	; (800be28 <SampleColorToString+0x48>)
 800be0c:	8013      	strh	r3, [r2, #0]
	Green=green;
 800be0e:	8829      	ldrh	r1, [r5, #0]
 800be10:	8051      	strh	r1, [r2, #2]
	Blue=blue;
 800be12:	8820      	ldrh	r0, [r4, #0]
 800be14:	8090      	strh	r0, [r2, #4]
	snprintf(cstring, maxLen, "Red: %d, Green: %d, Blue: %d\r\n", red, green, blue);
 800be16:	9001      	str	r0, [sp, #4]
 800be18:	9100      	str	r1, [sp, #0]
 800be1a:	4a04      	ldr	r2, [pc, #16]	; (800be2c <SampleColorToString+0x4c>)
 800be1c:	0039      	movs	r1, r7
 800be1e:	9803      	ldr	r0, [sp, #12]
 800be20:	f008 ffc4 	bl	8014dac <snprintf>
}
 800be24:	b007      	add	sp, #28
 800be26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be28:	20000008 	.word	0x20000008
 800be2c:	0801bf04 	.word	0x0801bf04

0800be30 <SampleDistance>:
{
 800be30:	b510      	push	{r4, lr}
 800be32:	0004      	movs	r4, r0
	*distance = Read_Word(distanceReg)/6.39;
 800be34:	4b06      	ldr	r3, [pc, #24]	; (800be50 <SampleDistance+0x20>)
 800be36:	7818      	ldrb	r0, [r3, #0]
 800be38:	f002 f858 	bl	800deec <Read_Word>
 800be3c:	f7f6 fe06 	bl	8002a4c <__aeabi_i2d>
 800be40:	4a04      	ldr	r2, [pc, #16]	; (800be54 <SampleDistance+0x24>)
 800be42:	4b05      	ldr	r3, [pc, #20]	; (800be58 <SampleDistance+0x28>)
 800be44:	f7f5 fbec 	bl	8001620 <__aeabi_ddiv>
 800be48:	f7f4 fbd2 	bl	80005f0 <__aeabi_d2uiz>
 800be4c:	8020      	strh	r0, [r4, #0]
}
 800be4e:	bd10      	pop	{r4, pc}
 800be50:	20007258 	.word	0x20007258
 800be54:	28f5c28f 	.word	0x28f5c28f
 800be58:	40198f5c 	.word	0x40198f5c

0800be5c <SampleDistanceBuff>:
{
 800be5c:	b530      	push	{r4, r5, lr}
 800be5e:	b083      	sub	sp, #12
 800be60:	0005      	movs	r5, r0
	SampleDistance(&distance);
 800be62:	466b      	mov	r3, sp
 800be64:	1d9c      	adds	r4, r3, #6
 800be66:	0020      	movs	r0, r4
 800be68:	f7ff ffe2 	bl	800be30 <SampleDistance>
	*buffer = distance;
 800be6c:	8820      	ldrh	r0, [r4, #0]
 800be6e:	f7f5 f87b 	bl	8000f68 <__aeabi_ui2f>
 800be72:	6028      	str	r0, [r5, #0]
}
 800be74:	b003      	add	sp, #12
 800be76:	bd30      	pop	{r4, r5, pc}

0800be78 <SampleDistanceToPort>:
{
 800be78:	b530      	push	{r4, r5, lr}
 800be7a:	b083      	sub	sp, #12
 800be7c:	0005      	movs	r5, r0
 800be7e:	000c      	movs	r4, r1
	SampleDistanceBuff(buffer);
 800be80:	a801      	add	r0, sp, #4
 800be82:	f7ff ffeb 	bl	800be5c <SampleDistanceBuff>
	if(module == myID){
 800be86:	4b13      	ldr	r3, [pc, #76]	; (800bed4 <SampleDistanceToPort+0x5c>)
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	42a3      	cmp	r3, r4
 800be8c:	d011      	beq.n	800beb2 <SampleDistanceToPort+0x3a>
		messageParams[0] =port;
 800be8e:	4b12      	ldr	r3, [pc, #72]	; (800bed8 <SampleDistanceToPort+0x60>)
 800be90:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800be92:	aa01      	add	r2, sp, #4
 800be94:	78d1      	ldrb	r1, [r2, #3]
 800be96:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800be98:	7891      	ldrb	r1, [r2, #2]
 800be9a:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800be9c:	7851      	ldrb	r1, [r2, #1]
 800be9e:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bea0:	7812      	ldrb	r2, [r2, #0]
 800bea2:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800bea4:	2205      	movs	r2, #5
 800bea6:	2123      	movs	r1, #35	; 0x23
 800bea8:	0020      	movs	r0, r4
 800beaa:	f7fd fe5b 	bl	8009b64 <SendMessageToModule>
}
 800beae:	b003      	add	sp, #12
 800beb0:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800beb2:	ab01      	add	r3, sp, #4
 800beb4:	78da      	ldrb	r2, [r3, #3]
 800beb6:	4909      	ldr	r1, [pc, #36]	; (800bedc <SampleDistanceToPort+0x64>)
 800beb8:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800beba:	789a      	ldrb	r2, [r3, #2]
 800bebc:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bebe:	785a      	ldrb	r2, [r3, #1]
 800bec0:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800bec6:	230a      	movs	r3, #10
 800bec8:	2204      	movs	r2, #4
 800beca:	0028      	movs	r0, r5
 800becc:	f002 fd16 	bl	800e8fc <writePxITMutex>
 800bed0:	e7ed      	b.n	800beae <SampleDistanceToPort+0x36>
 800bed2:	46c0      	nop			; (mov r8, r8)
 800bed4:	200010ea 	.word	0x200010ea
 800bed8:	20000fac 	.word	0x20000fac
 800bedc:	20001c18 	.word	0x20001c18

0800bee0 <SampleDistanceToString>:
{
 800bee0:	b570      	push	{r4, r5, r6, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	0005      	movs	r5, r0
 800bee6:	000e      	movs	r6, r1
	uint16_t distance = 0;
 800bee8:	466b      	mov	r3, sp
 800beea:	1d9c      	adds	r4, r3, #6
 800beec:	2300      	movs	r3, #0
 800beee:	8023      	strh	r3, [r4, #0]
	SampleDistance(&distance);
 800bef0:	0020      	movs	r0, r4
 800bef2:	f7ff ff9d 	bl	800be30 <SampleDistance>
	distance1=distance;
 800bef6:	8823      	ldrh	r3, [r4, #0]
 800bef8:	4a04      	ldr	r2, [pc, #16]	; (800bf0c <SampleDistanceToString+0x2c>)
 800befa:	80d3      	strh	r3, [r2, #6]
	snprintf(cstring, maxLen, "Distance: %d\r\n", distance);
 800befc:	4a04      	ldr	r2, [pc, #16]	; (800bf10 <SampleDistanceToString+0x30>)
 800befe:	0031      	movs	r1, r6
 800bf00:	0028      	movs	r0, r5
 800bf02:	f008 ff53 	bl	8014dac <snprintf>
}
 800bf06:	b002      	add	sp, #8
 800bf08:	bd70      	pop	{r4, r5, r6, pc}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	20000008 	.word	0x20000008
 800bf10:	0801bf34 	.word	0x0801bf34

0800bf14 <SampleTemperature>:
{
 800bf14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf16:	b083      	sub	sp, #12
 800bf18:	0007      	movs	r7, r0
	buf[0] = tempReg;
 800bf1a:	4c19      	ldr	r4, [pc, #100]	; (800bf80 <SampleTemperature+0x6c>)
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800bf20:	4d18      	ldr	r5, [pc, #96]	; (800bf84 <SampleTemperature+0x70>)
 800bf22:	2601      	movs	r6, #1
 800bf24:	4276      	negs	r6, r6
 800bf26:	9600      	str	r6, [sp, #0]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	0022      	movs	r2, r4
 800bf2c:	2180      	movs	r1, #128	; 0x80
 800bf2e:	0028      	movs	r0, r5
 800bf30:	f006 fbdc 	bl	80126ec <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800bf34:	2014      	movs	r0, #20
 800bf36:	f004 fe11 	bl	8010b5c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800bf3a:	9600      	str	r6, [sp, #0]
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	0022      	movs	r2, r4
 800bf40:	2180      	movs	r1, #128	; 0x80
 800bf42:	0028      	movs	r0, r5
 800bf44:	f006 fc76 	bl	8012834 <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800bf48:	7823      	ldrb	r3, [r4, #0]
 800bf4a:	021b      	lsls	r3, r3, #8
 800bf4c:	7860      	ldrb	r0, [r4, #1]
 800bf4e:	4318      	orrs	r0, r3
 800bf50:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <SampleTemperature+0x74>)
 800bf52:	8018      	strh	r0, [r3, #0]
	*temperature=((float)val/65536)*165.0-40.0;
 800bf54:	f7f5 f808 	bl	8000f68 <__aeabi_ui2f>
 800bf58:	21de      	movs	r1, #222	; 0xde
 800bf5a:	0589      	lsls	r1, r1, #22
 800bf5c:	f7f4 fcee 	bl	800093c <__aeabi_fmul>
 800bf60:	f7f6 fde0 	bl	8002b24 <__aeabi_f2d>
 800bf64:	2200      	movs	r2, #0
 800bf66:	4b09      	ldr	r3, [pc, #36]	; (800bf8c <SampleTemperature+0x78>)
 800bf68:	f7f5 ff64 	bl	8001e34 <__aeabi_dmul>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	4b08      	ldr	r3, [pc, #32]	; (800bf90 <SampleTemperature+0x7c>)
 800bf70:	f7f6 f9d2 	bl	8002318 <__aeabi_dsub>
 800bf74:	f7f6 fe28 	bl	8002bc8 <__aeabi_d2f>
 800bf78:	6038      	str	r0, [r7, #0]
}
 800bf7a:	b003      	add	sp, #12
 800bf7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf7e:	46c0      	nop			; (mov r8, r8)
 800bf80:	20007164 	.word	0x20007164
 800bf84:	20007280 	.word	0x20007280
 800bf88:	2000707a 	.word	0x2000707a
 800bf8c:	4064a000 	.word	0x4064a000
 800bf90:	40440000 	.word	0x40440000

0800bf94 <SampleTemperatureToString>:
{
 800bf94:	b530      	push	{r4, r5, lr}
 800bf96:	b085      	sub	sp, #20
 800bf98:	0004      	movs	r4, r0
 800bf9a:	000d      	movs	r5, r1
	float temprature = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9303      	str	r3, [sp, #12]
	SampleTemperature(&temprature);
 800bfa0:	a803      	add	r0, sp, #12
 800bfa2:	f7ff ffb7 	bl	800bf14 <SampleTemperature>
	temp=temprature;
 800bfa6:	4b07      	ldr	r3, [pc, #28]	; (800bfc4 <SampleTemperatureToString+0x30>)
 800bfa8:	9a03      	ldr	r2, [sp, #12]
 800bfaa:	609a      	str	r2, [r3, #8]
	snprintf(cstring, maxLen, "Temperature: %.2f\r\n", temprature);
 800bfac:	1c10      	adds	r0, r2, #0
 800bfae:	f7f6 fdb9 	bl	8002b24 <__aeabi_f2d>
 800bfb2:	9000      	str	r0, [sp, #0]
 800bfb4:	9101      	str	r1, [sp, #4]
 800bfb6:	4a04      	ldr	r2, [pc, #16]	; (800bfc8 <SampleTemperatureToString+0x34>)
 800bfb8:	0029      	movs	r1, r5
 800bfba:	0020      	movs	r0, r4
 800bfbc:	f008 fef6 	bl	8014dac <snprintf>
}
 800bfc0:	b005      	add	sp, #20
 800bfc2:	bd30      	pop	{r4, r5, pc}
 800bfc4:	20000008 	.word	0x20000008
 800bfc8:	0801bfa4 	.word	0x0801bfa4

0800bfcc <SampleTemperatureToPort>:
{
 800bfcc:	b530      	push	{r4, r5, lr}
 800bfce:	b083      	sub	sp, #12
 800bfd0:	0005      	movs	r5, r0
 800bfd2:	000c      	movs	r4, r1
	SampleTemperature(buffer);
 800bfd4:	a801      	add	r0, sp, #4
 800bfd6:	f7ff ff9d 	bl	800bf14 <SampleTemperature>
	if(module == myID){
 800bfda:	4b13      	ldr	r3, [pc, #76]	; (800c028 <SampleTemperatureToPort+0x5c>)
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	42a3      	cmp	r3, r4
 800bfe0:	d011      	beq.n	800c006 <SampleTemperatureToPort+0x3a>
		messageParams[0] =port;
 800bfe2:	4b12      	ldr	r3, [pc, #72]	; (800c02c <SampleTemperatureToPort+0x60>)
 800bfe4:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800bfe6:	aa01      	add	r2, sp, #4
 800bfe8:	78d1      	ldrb	r1, [r2, #3]
 800bfea:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800bfec:	7891      	ldrb	r1, [r2, #2]
 800bfee:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800bff0:	7851      	ldrb	r1, [r2, #1]
 800bff2:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800bff4:	7812      	ldrb	r2, [r2, #0]
 800bff6:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800bff8:	2205      	movs	r2, #5
 800bffa:	2123      	movs	r1, #35	; 0x23
 800bffc:	0020      	movs	r0, r4
 800bffe:	f7fd fdb1 	bl	8009b64 <SendMessageToModule>
}
 800c002:	b003      	add	sp, #12
 800c004:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c006:	ab01      	add	r3, sp, #4
 800c008:	78da      	ldrb	r2, [r3, #3]
 800c00a:	4909      	ldr	r1, [pc, #36]	; (800c030 <SampleTemperatureToPort+0x64>)
 800c00c:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c00e:	789a      	ldrb	r2, [r3, #2]
 800c010:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c012:	785a      	ldrb	r2, [r3, #1]
 800c014:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800c01a:	230a      	movs	r3, #10
 800c01c:	2204      	movs	r2, #4
 800c01e:	0028      	movs	r0, r5
 800c020:	f002 fc6c 	bl	800e8fc <writePxITMutex>
 800c024:	e7ed      	b.n	800c002 <SampleTemperatureToPort+0x36>
 800c026:	46c0      	nop			; (mov r8, r8)
 800c028:	200010ea 	.word	0x200010ea
 800c02c:	20000fac 	.word	0x20000fac
 800c030:	20001c1c 	.word	0x20001c1c

0800c034 <SampleHumidity>:
{
 800c034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c036:	b083      	sub	sp, #12
 800c038:	0007      	movs	r7, r0
	buf[0] = humidityReg;
 800c03a:	4c14      	ldr	r4, [pc, #80]	; (800c08c <SampleHumidity+0x58>)
 800c03c:	2301      	movs	r3, #1
 800c03e:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1, tempHumAdd, buf, 1, HAL_MAX_DELAY);
 800c040:	4d13      	ldr	r5, [pc, #76]	; (800c090 <SampleHumidity+0x5c>)
 800c042:	2601      	movs	r6, #1
 800c044:	4276      	negs	r6, r6
 800c046:	9600      	str	r6, [sp, #0]
 800c048:	0022      	movs	r2, r4
 800c04a:	2180      	movs	r1, #128	; 0x80
 800c04c:	0028      	movs	r0, r5
 800c04e:	f006 fb4d 	bl	80126ec <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800c052:	2014      	movs	r0, #20
 800c054:	f004 fd82 	bl	8010b5c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, tempHumAdd, buf, 2, HAL_MAX_DELAY);
 800c058:	9600      	str	r6, [sp, #0]
 800c05a:	2302      	movs	r3, #2
 800c05c:	0022      	movs	r2, r4
 800c05e:	2180      	movs	r1, #128	; 0x80
 800c060:	0028      	movs	r0, r5
 800c062:	f006 fbe7 	bl	8012834 <HAL_I2C_Master_Receive>
	val = buf[0] << 8 | buf[1];
 800c066:	7823      	ldrb	r3, [r4, #0]
 800c068:	021b      	lsls	r3, r3, #8
 800c06a:	7860      	ldrb	r0, [r4, #1]
 800c06c:	4318      	orrs	r0, r3
 800c06e:	4b09      	ldr	r3, [pc, #36]	; (800c094 <SampleHumidity+0x60>)
 800c070:	8018      	strh	r0, [r3, #0]
	*humidity = (((float)val*100)/65536);
 800c072:	f7f4 ff79 	bl	8000f68 <__aeabi_ui2f>
 800c076:	4908      	ldr	r1, [pc, #32]	; (800c098 <SampleHumidity+0x64>)
 800c078:	f7f4 fc60 	bl	800093c <__aeabi_fmul>
 800c07c:	21de      	movs	r1, #222	; 0xde
 800c07e:	0589      	lsls	r1, r1, #22
 800c080:	f7f4 fc5c 	bl	800093c <__aeabi_fmul>
 800c084:	6038      	str	r0, [r7, #0]
}
 800c086:	b003      	add	sp, #12
 800c088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c08a:	46c0      	nop			; (mov r8, r8)
 800c08c:	20007164 	.word	0x20007164
 800c090:	20007280 	.word	0x20007280
 800c094:	2000707a 	.word	0x2000707a
 800c098:	42c80000 	.word	0x42c80000

0800c09c <SampleHumidityToString>:
{
 800c09c:	b530      	push	{r4, r5, lr}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	0004      	movs	r4, r0
 800c0a2:	000d      	movs	r5, r1
	float humidity = 0;
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9303      	str	r3, [sp, #12]
	SampleHumidity(&humidity);
 800c0a8:	a803      	add	r0, sp, #12
 800c0aa:	f7ff ffc3 	bl	800c034 <SampleHumidity>
	hum=humidity;
 800c0ae:	4b07      	ldr	r3, [pc, #28]	; (800c0cc <SampleHumidityToString+0x30>)
 800c0b0:	9a03      	ldr	r2, [sp, #12]
 800c0b2:	60da      	str	r2, [r3, #12]
	snprintf(cstring, maxLen, "Humidity: %.2f\r\n", humidity);
 800c0b4:	1c10      	adds	r0, r2, #0
 800c0b6:	f7f6 fd35 	bl	8002b24 <__aeabi_f2d>
 800c0ba:	9000      	str	r0, [sp, #0]
 800c0bc:	9101      	str	r1, [sp, #4]
 800c0be:	4a04      	ldr	r2, [pc, #16]	; (800c0d0 <SampleHumidityToString+0x34>)
 800c0c0:	0029      	movs	r1, r5
 800c0c2:	0020      	movs	r0, r4
 800c0c4:	f008 fe72 	bl	8014dac <snprintf>
}
 800c0c8:	b005      	add	sp, #20
 800c0ca:	bd30      	pop	{r4, r5, pc}
 800c0cc:	20000008 	.word	0x20000008
 800c0d0:	0801bf44 	.word	0x0801bf44

0800c0d4 <SampleHumidityToPort>:
{
 800c0d4:	b530      	push	{r4, r5, lr}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	0005      	movs	r5, r0
 800c0da:	000c      	movs	r4, r1
	SampleHumidity(buffer);
 800c0dc:	a801      	add	r0, sp, #4
 800c0de:	f7ff ffa9 	bl	800c034 <SampleHumidity>
	if(module == myID){
 800c0e2:	4b13      	ldr	r3, [pc, #76]	; (800c130 <SampleHumidityToPort+0x5c>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	42a3      	cmp	r3, r4
 800c0e8:	d011      	beq.n	800c10e <SampleHumidityToPort+0x3a>
		messageParams[0] =port;
 800c0ea:	4b12      	ldr	r3, [pc, #72]	; (800c134 <SampleHumidityToPort+0x60>)
 800c0ec:	701d      	strb	r5, [r3, #0]
		messageParams[1] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c0ee:	aa01      	add	r2, sp, #4
 800c0f0:	78d1      	ldrb	r1, [r2, #3]
 800c0f2:	7059      	strb	r1, [r3, #1]
		messageParams[2] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c0f4:	7891      	ldrb	r1, [r2, #2]
 800c0f6:	7099      	strb	r1, [r3, #2]
		messageParams[3] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c0f8:	7851      	ldrb	r1, [r2, #1]
 800c0fa:	70d9      	strb	r1, [r3, #3]
		messageParams[4] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c0fc:	7812      	ldrb	r2, [r2, #0]
 800c0fe:	711a      	strb	r2, [r3, #4]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(float)+1);
 800c100:	2205      	movs	r2, #5
 800c102:	2123      	movs	r1, #35	; 0x23
 800c104:	0020      	movs	r0, r4
 800c106:	f7fd fd2d 	bl	8009b64 <SendMessageToModule>
}
 800c10a:	b003      	add	sp, #12
 800c10c:	bd30      	pop	{r4, r5, pc}
		temp[0] =*((__IO uint8_t* )(&buffer[0]) + 3);
 800c10e:	ab01      	add	r3, sp, #4
 800c110:	78da      	ldrb	r2, [r3, #3]
 800c112:	4909      	ldr	r1, [pc, #36]	; (800c138 <SampleHumidityToPort+0x64>)
 800c114:	700a      	strb	r2, [r1, #0]
		temp[1] =*((__IO uint8_t* )(&buffer[0]) + 2);
 800c116:	789a      	ldrb	r2, [r3, #2]
 800c118:	704a      	strb	r2, [r1, #1]
		temp[2] =*((__IO uint8_t* )(&buffer[0]) + 1);
 800c11a:	785a      	ldrb	r2, [r3, #1]
 800c11c:	708a      	strb	r2, [r1, #2]
		temp[3] =*((__IO uint8_t* )(&buffer[0]) + 0);
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	70cb      	strb	r3, [r1, #3]
		writePxITMutex(port,(char* )&temp[0],4 * sizeof(uint8_t),10);
 800c122:	230a      	movs	r3, #10
 800c124:	2204      	movs	r2, #4
 800c126:	0028      	movs	r0, r5
 800c128:	f002 fbe8 	bl	800e8fc <writePxITMutex>
 800c12c:	e7ed      	b.n	800c10a <SampleHumidityToPort+0x36>
 800c12e:	46c0      	nop			; (mov r8, r8)
 800c130:	200010ea 	.word	0x200010ea
 800c134:	20000fac 	.word	0x20000fac
 800c138:	20001c20 	.word	0x20001c20

0800c13c <SamplePIR>:
{
 800c13c:	b510      	push	{r4, lr}
 800c13e:	0004      	movs	r4, r0
	*pir=HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);/* USER CODE END WHILE */
 800c140:	2180      	movs	r1, #128	; 0x80
 800c142:	4803      	ldr	r0, [pc, #12]	; (800c150 <SamplePIR+0x14>)
 800c144:	f006 f96e 	bl	8012424 <HAL_GPIO_ReadPin>
 800c148:	1e43      	subs	r3, r0, #1
 800c14a:	4198      	sbcs	r0, r3
 800c14c:	7020      	strb	r0, [r4, #0]
}
 800c14e:	bd10      	pop	{r4, pc}
 800c150:	48000400 	.word	0x48000400

0800c154 <SamplePIRBuf>:
{
 800c154:	b530      	push	{r4, r5, lr}
 800c156:	b083      	sub	sp, #12
 800c158:	0005      	movs	r5, r0
    SamplePIR(&pir);
 800c15a:	466b      	mov	r3, sp
 800c15c:	1ddc      	adds	r4, r3, #7
 800c15e:	0020      	movs	r0, r4
 800c160:	f7ff ffec 	bl	800c13c <SamplePIR>
    *buffer = pir;
 800c164:	7820      	ldrb	r0, [r4, #0]
 800c166:	f7f4 feff 	bl	8000f68 <__aeabi_ui2f>
 800c16a:	6028      	str	r0, [r5, #0]
}
 800c16c:	b003      	add	sp, #12
 800c16e:	bd30      	pop	{r4, r5, pc}

0800c170 <SamplePIRToPort>:
{
 800c170:	b570      	push	{r4, r5, r6, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	0006      	movs	r6, r0
 800c176:	000c      	movs	r4, r1
	SamplePIRBuf(&buffer);
 800c178:	a801      	add	r0, sp, #4
 800c17a:	f7ff ffeb 	bl	800c154 <SamplePIRBuf>
	if(module == myID){
 800c17e:	4b10      	ldr	r3, [pc, #64]	; (800c1c0 <SamplePIRToPort+0x50>)
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	42a3      	cmp	r3, r4
 800c184:	d00c      	beq.n	800c1a0 <SamplePIRToPort+0x30>
		messageParams[0] =port;
 800c186:	4d0f      	ldr	r5, [pc, #60]	; (800c1c4 <SamplePIRToPort+0x54>)
 800c188:	702e      	strb	r6, [r5, #0]
		messageParams[1] =buffer;
 800c18a:	9801      	ldr	r0, [sp, #4]
 800c18c:	f7f4 fa18 	bl	80005c0 <__aeabi_f2uiz>
 800c190:	7068      	strb	r0, [r5, #1]
		SendMessageToModule(module,CODE_PORT_FORWARD,sizeof(char)+1);
 800c192:	2202      	movs	r2, #2
 800c194:	2123      	movs	r1, #35	; 0x23
 800c196:	0020      	movs	r0, r4
 800c198:	f7fd fce4 	bl	8009b64 <SendMessageToModule>
}
 800c19c:	b002      	add	sp, #8
 800c19e:	bd70      	pop	{r4, r5, r6, pc}
		temp = buffer;
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	9801      	ldr	r0, [sp, #4]
 800c1a4:	f7f4 f994 	bl	80004d0 <__aeabi_fcmpeq>
 800c1a8:	4243      	negs	r3, r0
 800c1aa:	4158      	adcs	r0, r3
 800c1ac:	466b      	mov	r3, sp
 800c1ae:	70d8      	strb	r0, [r3, #3]
		writePxITMutex(port,(char* )&temp,sizeof(bool),10);
 800c1b0:	230a      	movs	r3, #10
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	4669      	mov	r1, sp
 800c1b6:	3103      	adds	r1, #3
 800c1b8:	0030      	movs	r0, r6
 800c1ba:	f002 fb9f 	bl	800e8fc <writePxITMutex>
 800c1be:	e7ed      	b.n	800c19c <SamplePIRToPort+0x2c>
 800c1c0:	200010ea 	.word	0x200010ea
 800c1c4:	20000fac 	.word	0x20000fac

0800c1c8 <SamplePIRToString>:
{
 800c1c8:	b570      	push	{r4, r5, r6, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	0005      	movs	r5, r0
 800c1ce:	000e      	movs	r6, r1
	SamplePIR(&sample);
 800c1d0:	466b      	mov	r3, sp
 800c1d2:	1ddc      	adds	r4, r3, #7
 800c1d4:	0020      	movs	r0, r4
 800c1d6:	f7ff ffb1 	bl	800c13c <SamplePIR>
	Sample=sample;
 800c1da:	7823      	ldrb	r3, [r4, #0]
 800c1dc:	4a04      	ldr	r2, [pc, #16]	; (800c1f0 <SamplePIRToString+0x28>)
 800c1de:	7413      	strb	r3, [r2, #16]
	snprintf(cstring, maxLen, "PIR: %d\r\n", sample);
 800c1e0:	4a04      	ldr	r2, [pc, #16]	; (800c1f4 <SamplePIRToString+0x2c>)
 800c1e2:	0031      	movs	r1, r6
 800c1e4:	0028      	movs	r0, r5
 800c1e6:	f008 fde1 	bl	8014dac <snprintf>
}
 800c1ea:	b002      	add	sp, #8
 800c1ec:	bd70      	pop	{r4, r5, r6, pc}
 800c1ee:	46c0      	nop			; (mov r8, r8)
 800c1f0:	20000008 	.word	0x20000008
 800c1f4:	0801bf58 	.word	0x0801bf58

0800c1f8 <SampleSensorCommand>:
{
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	0005      	movs	r5, r0
 800c1fe:	000e      	movs	r6, r1
 800c200:	0010      	movs	r0, r2
	portBASE_TYPE sensNameLen = 0;
 800c202:	2300      	movs	r3, #0
 800c204:	9301      	str	r3, [sp, #4]
	*pcWriteBuffer = '\0';
 800c206:	702b      	strb	r3, [r5, #0]
	pSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &sensNameLen);
 800c208:	aa01      	add	r2, sp, #4
 800c20a:	2101      	movs	r1, #1
 800c20c:	f002 fd94 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800c210:	1e04      	subs	r4, r0, #0
	if (pSensName == NULL) {
 800c212:	d027      	beq.n	800c264 <SampleSensorCommand+0x6c>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c214:	2205      	movs	r2, #5
 800c216:	4924      	ldr	r1, [pc, #144]	; (800c2a8 <SampleSensorCommand+0xb0>)
 800c218:	f008 fe3e 	bl	8014e98 <strncmp>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	d027      	beq.n	800c270 <SampleSensorCommand+0x78>
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800c220:	2208      	movs	r2, #8
 800c222:	4922      	ldr	r1, [pc, #136]	; (800c2ac <SampleSensorCommand+0xb4>)
 800c224:	0020      	movs	r0, r4
 800c226:	f008 fe37 	bl	8014e98 <strncmp>
 800c22a:	2800      	cmp	r0, #0
 800c22c:	d027      	beq.n	800c27e <SampleSensorCommand+0x86>
		} else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800c22e:	2204      	movs	r2, #4
 800c230:	491f      	ldr	r1, [pc, #124]	; (800c2b0 <SampleSensorCommand+0xb8>)
 800c232:	0020      	movs	r0, r4
 800c234:	f008 fe30 	bl	8014e98 <strncmp>
 800c238:	2800      	cmp	r0, #0
 800c23a:	d025      	beq.n	800c288 <SampleSensorCommand+0x90>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800c23c:	2208      	movs	r2, #8
 800c23e:	491d      	ldr	r1, [pc, #116]	; (800c2b4 <SampleSensorCommand+0xbc>)
 800c240:	0020      	movs	r0, r4
 800c242:	f008 fe29 	bl	8014e98 <strncmp>
 800c246:	2800      	cmp	r0, #0
 800c248:	d023      	beq.n	800c292 <SampleSensorCommand+0x9a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800c24a:	2203      	movs	r2, #3
 800c24c:	491a      	ldr	r1, [pc, #104]	; (800c2b8 <SampleSensorCommand+0xc0>)
 800c24e:	0020      	movs	r0, r4
 800c250:	f008 fe22 	bl	8014e98 <strncmp>
 800c254:	2800      	cmp	r0, #0
 800c256:	d021      	beq.n	800c29c <SampleSensorCommand+0xa4>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c258:	4a18      	ldr	r2, [pc, #96]	; (800c2bc <SampleSensorCommand+0xc4>)
 800c25a:	0031      	movs	r1, r6
 800c25c:	0028      	movs	r0, r5
 800c25e:	f008 fda5 	bl	8014dac <snprintf>
 800c262:	e009      	b.n	800c278 <SampleSensorCommand+0x80>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c264:	4a15      	ldr	r2, [pc, #84]	; (800c2bc <SampleSensorCommand+0xc4>)
 800c266:	0031      	movs	r1, r6
 800c268:	0028      	movs	r0, r5
 800c26a:	f008 fd9f 	bl	8014dac <snprintf>
		return pdFALSE;
 800c26e:	e003      	b.n	800c278 <SampleSensorCommand+0x80>
			SampleColorToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c270:	0031      	movs	r1, r6
 800c272:	0028      	movs	r0, r5
 800c274:	f7ff fdb4 	bl	800bde0 <SampleColorToString>
}
 800c278:	2000      	movs	r0, #0
 800c27a:	b002      	add	sp, #8
 800c27c:	bd70      	pop	{r4, r5, r6, pc}
			SampleDistanceToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c27e:	0031      	movs	r1, r6
 800c280:	0028      	movs	r0, r5
 800c282:	f7ff fe2d 	bl	800bee0 <SampleDistanceToString>
 800c286:	e7f7      	b.n	800c278 <SampleSensorCommand+0x80>
			SampleTemperatureToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c288:	0031      	movs	r1, r6
 800c28a:	0028      	movs	r0, r5
 800c28c:	f7ff fe82 	bl	800bf94 <SampleTemperatureToString>
 800c290:	e7f2      	b.n	800c278 <SampleSensorCommand+0x80>
			SampleHumidityToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c292:	0031      	movs	r1, r6
 800c294:	0028      	movs	r0, r5
 800c296:	f7ff ff01 	bl	800c09c <SampleHumidityToString>
 800c29a:	e7ed      	b.n	800c278 <SampleSensorCommand+0x80>
			SamplePIRToString((char *)pcWriteBuffer, xWriteBufferLen);
 800c29c:	0031      	movs	r1, r6
 800c29e:	0028      	movs	r0, r5
 800c2a0:	f7ff ff92 	bl	800c1c8 <SamplePIRToString>
 800c2a4:	e7e8      	b.n	800c278 <SampleSensorCommand+0x80>
 800c2a6:	46c0      	nop			; (mov r8, r8)
 800c2a8:	0801bf78 	.word	0x0801bf78
 800c2ac:	0801bf80 	.word	0x0801bf80
 800c2b0:	0801bf8c 	.word	0x0801bf8c
 800c2b4:	0801bf94 	.word	0x0801bf94
 800c2b8:	0801bfa0 	.word	0x0801bfa0
 800c2bc:	0801bf64 	.word	0x0801bf64

0800c2c0 <StreamColorToPort>:
{
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleColorToPort);
 800c2c4:	4c02      	ldr	r4, [pc, #8]	; (800c2d0 <StreamColorToPort+0x10>)
 800c2c6:	9400      	str	r4, [sp, #0]
 800c2c8:	f7ff fb4c 	bl	800b964 <StreamMemsToPort>
}
 800c2cc:	b002      	add	sp, #8
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	0800bd39 	.word	0x0800bd39

0800c2d4 <StreamDistanceToPort>:
{
 800c2d4:	b510      	push	{r4, lr}
 800c2d6:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleDistanceToPort);
 800c2d8:	4c02      	ldr	r4, [pc, #8]	; (800c2e4 <StreamDistanceToPort+0x10>)
 800c2da:	9400      	str	r4, [sp, #0]
 800c2dc:	f7ff fb42 	bl	800b964 <StreamMemsToPort>
}
 800c2e0:	b002      	add	sp, #8
 800c2e2:	bd10      	pop	{r4, pc}
 800c2e4:	0800be79 	.word	0x0800be79

0800c2e8 <StreamTemperatureToPort>:
{
 800c2e8:	b510      	push	{r4, lr}
 800c2ea:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleTemperatureToPort);
 800c2ec:	4c02      	ldr	r4, [pc, #8]	; (800c2f8 <StreamTemperatureToPort+0x10>)
 800c2ee:	9400      	str	r4, [sp, #0]
 800c2f0:	f7ff fb38 	bl	800b964 <StreamMemsToPort>
}
 800c2f4:	b002      	add	sp, #8
 800c2f6:	bd10      	pop	{r4, pc}
 800c2f8:	0800bfcd 	.word	0x0800bfcd

0800c2fc <StreamHumidityToPort>:
{
 800c2fc:	b510      	push	{r4, lr}
 800c2fe:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleHumidityToPort);
 800c300:	4c02      	ldr	r4, [pc, #8]	; (800c30c <StreamHumidityToPort+0x10>)
 800c302:	9400      	str	r4, [sp, #0]
 800c304:	f7ff fb2e 	bl	800b964 <StreamMemsToPort>
}
 800c308:	b002      	add	sp, #8
 800c30a:	bd10      	pop	{r4, pc}
 800c30c:	0800c0d5 	.word	0x0800c0d5

0800c310 <StreamPIRToPort>:
{
 800c310:	b510      	push	{r4, lr}
 800c312:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SamplePIRToPort);
 800c314:	4c02      	ldr	r4, [pc, #8]	; (800c320 <StreamPIRToPort+0x10>)
 800c316:	9400      	str	r4, [sp, #0]
 800c318:	f7ff fb24 	bl	800b964 <StreamMemsToPort>
}
 800c31c:	b002      	add	sp, #8
 800c31e:	bd10      	pop	{r4, pc}
 800c320:	0800c171 	.word	0x0800c171

0800c324 <Module_MessagingTask>:
{
 800c324:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c326:	46c6      	mov	lr, r8
 800c328:	b500      	push	{lr}
 800c32a:	ab06      	add	r3, sp, #24
 800c32c:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800c32e:	38f5      	subs	r0, #245	; 0xf5
 800c330:	38ff      	subs	r0, #255	; 0xff
 800c332:	b283      	uxth	r3, r0
 800c334:	2b0a      	cmp	r3, #10
 800c336:	d900      	bls.n	800c33a <Module_MessagingTask+0x16>
 800c338:	e127      	b.n	800c58a <Module_MessagingTask+0x266>
 800c33a:	0098      	lsls	r0, r3, #2
 800c33c:	4b94      	ldr	r3, [pc, #592]	; (800c590 <Module_MessagingTask+0x26c>)
 800c33e:	581b      	ldr	r3, [r3, r0]
 800c340:	469f      	mov	pc, r3
			SampleColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c342:	1e4b      	subs	r3, r1, #1
 800c344:	4a93      	ldr	r2, [pc, #588]	; (800c594 <Module_MessagingTask+0x270>)
 800c346:	00d8      	lsls	r0, r3, #3
 800c348:	1ac1      	subs	r1, r0, r3
 800c34a:	00c9      	lsls	r1, r1, #3
 800c34c:	1851      	adds	r1, r2, r1
 800c34e:	5d09      	ldrb	r1, [r1, r4]
 800c350:	1ac3      	subs	r3, r0, r3
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	18d2      	adds	r2, r2, r3
 800c356:	1914      	adds	r4, r2, r4
 800c358:	7860      	ldrb	r0, [r4, #1]
 800c35a:	f7ff fced 	bl	800bd38 <SampleColorToPort>
	Module_Status result = H0AR9_OK;
 800c35e:	2000      	movs	r0, #0
}
 800c360:	bc04      	pop	{r2}
 800c362:	4690      	mov	r8, r2
 800c364:	bdf0      	pop	{r4, r5, r6, r7, pc}
			SampleDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c366:	1e4b      	subs	r3, r1, #1
 800c368:	4a8a      	ldr	r2, [pc, #552]	; (800c594 <Module_MessagingTask+0x270>)
 800c36a:	00d8      	lsls	r0, r3, #3
 800c36c:	1ac1      	subs	r1, r0, r3
 800c36e:	00c9      	lsls	r1, r1, #3
 800c370:	1851      	adds	r1, r2, r1
 800c372:	5d09      	ldrb	r1, [r1, r4]
 800c374:	1ac3      	subs	r3, r0, r3
 800c376:	00db      	lsls	r3, r3, #3
 800c378:	18d2      	adds	r2, r2, r3
 800c37a:	1914      	adds	r4, r2, r4
 800c37c:	7860      	ldrb	r0, [r4, #1]
 800c37e:	f7ff fd7b 	bl	800be78 <SampleDistanceToPort>
	Module_Status result = H0AR9_OK;
 800c382:	2000      	movs	r0, #0
			break;
 800c384:	e7ec      	b.n	800c360 <Module_MessagingTask+0x3c>
			SampleTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c386:	1e4b      	subs	r3, r1, #1
 800c388:	4a82      	ldr	r2, [pc, #520]	; (800c594 <Module_MessagingTask+0x270>)
 800c38a:	00d8      	lsls	r0, r3, #3
 800c38c:	1ac1      	subs	r1, r0, r3
 800c38e:	00c9      	lsls	r1, r1, #3
 800c390:	1851      	adds	r1, r2, r1
 800c392:	5d09      	ldrb	r1, [r1, r4]
 800c394:	1ac3      	subs	r3, r0, r3
 800c396:	00db      	lsls	r3, r3, #3
 800c398:	18d2      	adds	r2, r2, r3
 800c39a:	1914      	adds	r4, r2, r4
 800c39c:	7860      	ldrb	r0, [r4, #1]
 800c39e:	f7ff fe15 	bl	800bfcc <SampleTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800c3a2:	2000      	movs	r0, #0
			break;
 800c3a4:	e7dc      	b.n	800c360 <Module_MessagingTask+0x3c>
			SampleHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c3a6:	1e4b      	subs	r3, r1, #1
 800c3a8:	4a7a      	ldr	r2, [pc, #488]	; (800c594 <Module_MessagingTask+0x270>)
 800c3aa:	00d8      	lsls	r0, r3, #3
 800c3ac:	1ac1      	subs	r1, r0, r3
 800c3ae:	00c9      	lsls	r1, r1, #3
 800c3b0:	1851      	adds	r1, r2, r1
 800c3b2:	5d09      	ldrb	r1, [r1, r4]
 800c3b4:	1ac3      	subs	r3, r0, r3
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	18d2      	adds	r2, r2, r3
 800c3ba:	1914      	adds	r4, r2, r4
 800c3bc:	7860      	ldrb	r0, [r4, #1]
 800c3be:	f7ff fe89 	bl	800c0d4 <SampleHumidityToPort>
	Module_Status result = H0AR9_OK;
 800c3c2:	2000      	movs	r0, #0
			break;
 800c3c4:	e7cc      	b.n	800c360 <Module_MessagingTask+0x3c>
			SamplePIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift]);
 800c3c6:	1e4b      	subs	r3, r1, #1
 800c3c8:	4a72      	ldr	r2, [pc, #456]	; (800c594 <Module_MessagingTask+0x270>)
 800c3ca:	00d8      	lsls	r0, r3, #3
 800c3cc:	1ac1      	subs	r1, r0, r3
 800c3ce:	00c9      	lsls	r1, r1, #3
 800c3d0:	1851      	adds	r1, r2, r1
 800c3d2:	5d09      	ldrb	r1, [r1, r4]
 800c3d4:	1ac3      	subs	r3, r0, r3
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	18d2      	adds	r2, r2, r3
 800c3da:	1914      	adds	r4, r2, r4
 800c3dc:	7860      	ldrb	r0, [r4, #1]
 800c3de:	f7ff fec7 	bl	800c170 <SamplePIRToPort>
	Module_Status result = H0AR9_OK;
 800c3e2:	2000      	movs	r0, #0
			break;
 800c3e4:	e7bc      	b.n	800c360 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c3e6:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c3e8:	4d6a      	ldr	r5, [pc, #424]	; (800c594 <Module_MessagingTask+0x270>)
 800c3ea:	00c6      	lsls	r6, r0, #3
 800c3ec:	1a31      	subs	r1, r6, r0
 800c3ee:	00c9      	lsls	r1, r1, #3
 800c3f0:	1869      	adds	r1, r5, r1
 800c3f2:	190f      	adds	r7, r1, r4
 800c3f4:	79bb      	ldrb	r3, [r7, #6]
 800c3f6:	061b      	lsls	r3, r3, #24
 800c3f8:	79fa      	ldrb	r2, [r7, #7]
 800c3fa:	0412      	lsls	r2, r2, #16
 800c3fc:	189b      	adds	r3, r3, r2
 800c3fe:	7a7a      	ldrb	r2, [r7, #9]
 800c400:	189b      	adds	r3, r3, r2
 800c402:	7a3a      	ldrb	r2, [r7, #8]
 800c404:	0212      	lsls	r2, r2, #8
 800c406:	4698      	mov	r8, r3
 800c408:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c40a:	78ba      	ldrb	r2, [r7, #2]
 800c40c:	0612      	lsls	r2, r2, #24
 800c40e:	78fb      	ldrb	r3, [r7, #3]
 800c410:	041b      	lsls	r3, r3, #16
 800c412:	469c      	mov	ip, r3
 800c414:	4462      	add	r2, ip
 800c416:	797b      	ldrb	r3, [r7, #5]
 800c418:	469c      	mov	ip, r3
 800c41a:	4462      	add	r2, ip
 800c41c:	793f      	ldrb	r7, [r7, #4]
 800c41e:	023f      	lsls	r7, r7, #8
 800c420:	19d2      	adds	r2, r2, r7
			StreamColorToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c422:	5d09      	ldrb	r1, [r1, r4]
 800c424:	1a30      	subs	r0, r6, r0
 800c426:	00c0      	lsls	r0, r0, #3
 800c428:	182d      	adds	r5, r5, r0
 800c42a:	192c      	adds	r4, r5, r4
 800c42c:	7860      	ldrb	r0, [r4, #1]
 800c42e:	4643      	mov	r3, r8
 800c430:	f7ff ff46 	bl	800c2c0 <StreamColorToPort>
	Module_Status result = H0AR9_OK;
 800c434:	2000      	movs	r0, #0
			break;
 800c436:	e793      	b.n	800c360 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c438:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c43a:	4d56      	ldr	r5, [pc, #344]	; (800c594 <Module_MessagingTask+0x270>)
 800c43c:	00c6      	lsls	r6, r0, #3
 800c43e:	1a31      	subs	r1, r6, r0
 800c440:	00c9      	lsls	r1, r1, #3
 800c442:	1869      	adds	r1, r5, r1
 800c444:	190f      	adds	r7, r1, r4
 800c446:	79bb      	ldrb	r3, [r7, #6]
 800c448:	061b      	lsls	r3, r3, #24
 800c44a:	79fa      	ldrb	r2, [r7, #7]
 800c44c:	0412      	lsls	r2, r2, #16
 800c44e:	189b      	adds	r3, r3, r2
 800c450:	7a7a      	ldrb	r2, [r7, #9]
 800c452:	189b      	adds	r3, r3, r2
 800c454:	7a3a      	ldrb	r2, [r7, #8]
 800c456:	0212      	lsls	r2, r2, #8
 800c458:	4698      	mov	r8, r3
 800c45a:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c45c:	78ba      	ldrb	r2, [r7, #2]
 800c45e:	0612      	lsls	r2, r2, #24
 800c460:	78fb      	ldrb	r3, [r7, #3]
 800c462:	041b      	lsls	r3, r3, #16
 800c464:	469c      	mov	ip, r3
 800c466:	4462      	add	r2, ip
 800c468:	797b      	ldrb	r3, [r7, #5]
 800c46a:	469c      	mov	ip, r3
 800c46c:	4462      	add	r2, ip
 800c46e:	793f      	ldrb	r7, [r7, #4]
 800c470:	023f      	lsls	r7, r7, #8
 800c472:	19d2      	adds	r2, r2, r7
			StreamDistanceToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c474:	5d09      	ldrb	r1, [r1, r4]
 800c476:	1a30      	subs	r0, r6, r0
 800c478:	00c0      	lsls	r0, r0, #3
 800c47a:	182d      	adds	r5, r5, r0
 800c47c:	192c      	adds	r4, r5, r4
 800c47e:	7860      	ldrb	r0, [r4, #1]
 800c480:	4643      	mov	r3, r8
 800c482:	f7ff ff27 	bl	800c2d4 <StreamDistanceToPort>
	Module_Status result = H0AR9_OK;
 800c486:	2000      	movs	r0, #0
			break;
 800c488:	e76a      	b.n	800c360 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c48a:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c48c:	4d41      	ldr	r5, [pc, #260]	; (800c594 <Module_MessagingTask+0x270>)
 800c48e:	00c6      	lsls	r6, r0, #3
 800c490:	1a31      	subs	r1, r6, r0
 800c492:	00c9      	lsls	r1, r1, #3
 800c494:	1869      	adds	r1, r5, r1
 800c496:	190f      	adds	r7, r1, r4
 800c498:	79bb      	ldrb	r3, [r7, #6]
 800c49a:	061b      	lsls	r3, r3, #24
 800c49c:	79fa      	ldrb	r2, [r7, #7]
 800c49e:	0412      	lsls	r2, r2, #16
 800c4a0:	189b      	adds	r3, r3, r2
 800c4a2:	7a7a      	ldrb	r2, [r7, #9]
 800c4a4:	189b      	adds	r3, r3, r2
 800c4a6:	7a3a      	ldrb	r2, [r7, #8]
 800c4a8:	0212      	lsls	r2, r2, #8
 800c4aa:	4698      	mov	r8, r3
 800c4ac:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c4ae:	78ba      	ldrb	r2, [r7, #2]
 800c4b0:	0612      	lsls	r2, r2, #24
 800c4b2:	78fb      	ldrb	r3, [r7, #3]
 800c4b4:	041b      	lsls	r3, r3, #16
 800c4b6:	469c      	mov	ip, r3
 800c4b8:	4462      	add	r2, ip
 800c4ba:	797b      	ldrb	r3, [r7, #5]
 800c4bc:	469c      	mov	ip, r3
 800c4be:	4462      	add	r2, ip
 800c4c0:	793f      	ldrb	r7, [r7, #4]
 800c4c2:	023f      	lsls	r7, r7, #8
 800c4c4:	19d2      	adds	r2, r2, r7
			StreamTemperatureToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c4c6:	5d09      	ldrb	r1, [r1, r4]
 800c4c8:	1a30      	subs	r0, r6, r0
 800c4ca:	00c0      	lsls	r0, r0, #3
 800c4cc:	182d      	adds	r5, r5, r0
 800c4ce:	192c      	adds	r4, r5, r4
 800c4d0:	7860      	ldrb	r0, [r4, #1]
 800c4d2:	4643      	mov	r3, r8
 800c4d4:	f7ff ff08 	bl	800c2e8 <StreamTemperatureToPort>
	Module_Status result = H0AR9_OK;
 800c4d8:	2000      	movs	r0, #0
			break;
 800c4da:	e741      	b.n	800c360 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c4dc:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c4de:	4d2d      	ldr	r5, [pc, #180]	; (800c594 <Module_MessagingTask+0x270>)
 800c4e0:	00c6      	lsls	r6, r0, #3
 800c4e2:	1a31      	subs	r1, r6, r0
 800c4e4:	00c9      	lsls	r1, r1, #3
 800c4e6:	1869      	adds	r1, r5, r1
 800c4e8:	190f      	adds	r7, r1, r4
 800c4ea:	79bb      	ldrb	r3, [r7, #6]
 800c4ec:	061b      	lsls	r3, r3, #24
 800c4ee:	79fa      	ldrb	r2, [r7, #7]
 800c4f0:	0412      	lsls	r2, r2, #16
 800c4f2:	189b      	adds	r3, r3, r2
 800c4f4:	7a7a      	ldrb	r2, [r7, #9]
 800c4f6:	189b      	adds	r3, r3, r2
 800c4f8:	7a3a      	ldrb	r2, [r7, #8]
 800c4fa:	0212      	lsls	r2, r2, #8
 800c4fc:	4698      	mov	r8, r3
 800c4fe:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c500:	78ba      	ldrb	r2, [r7, #2]
 800c502:	0612      	lsls	r2, r2, #24
 800c504:	78fb      	ldrb	r3, [r7, #3]
 800c506:	041b      	lsls	r3, r3, #16
 800c508:	469c      	mov	ip, r3
 800c50a:	4462      	add	r2, ip
 800c50c:	797b      	ldrb	r3, [r7, #5]
 800c50e:	469c      	mov	ip, r3
 800c510:	4462      	add	r2, ip
 800c512:	793f      	ldrb	r7, [r7, #4]
 800c514:	023f      	lsls	r7, r7, #8
 800c516:	19d2      	adds	r2, r2, r7
			StreamHumidityToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c518:	5d09      	ldrb	r1, [r1, r4]
 800c51a:	1a30      	subs	r0, r6, r0
 800c51c:	00c0      	lsls	r0, r0, #3
 800c51e:	182d      	adds	r5, r5, r0
 800c520:	192c      	adds	r4, r5, r4
 800c522:	7860      	ldrb	r0, [r4, #1]
 800c524:	4643      	mov	r3, r8
 800c526:	f7ff fee9 	bl	800c2fc <StreamHumidityToPort>
	Module_Status result = H0AR9_OK;
 800c52a:	2000      	movs	r0, #0
			break;
 800c52c:	e718      	b.n	800c360 <Module_MessagingTask+0x3c>
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c52e:	1e48      	subs	r0, r1, #1
			timeout = ((uint32_t) cMessage[port - 1][6 + shift] << 24) + ((uint32_t) cMessage[port - 1][7 + shift] << 16) + ((uint32_t) cMessage[port - 1][8 + shift] << 8) + cMessage[port - 1][9 + shift];
 800c530:	4d18      	ldr	r5, [pc, #96]	; (800c594 <Module_MessagingTask+0x270>)
 800c532:	00c6      	lsls	r6, r0, #3
 800c534:	1a31      	subs	r1, r6, r0
 800c536:	00c9      	lsls	r1, r1, #3
 800c538:	1869      	adds	r1, r5, r1
 800c53a:	190f      	adds	r7, r1, r4
 800c53c:	79bb      	ldrb	r3, [r7, #6]
 800c53e:	061b      	lsls	r3, r3, #24
 800c540:	79fa      	ldrb	r2, [r7, #7]
 800c542:	0412      	lsls	r2, r2, #16
 800c544:	189b      	adds	r3, r3, r2
 800c546:	7a7a      	ldrb	r2, [r7, #9]
 800c548:	189b      	adds	r3, r3, r2
 800c54a:	7a3a      	ldrb	r2, [r7, #8]
 800c54c:	0212      	lsls	r2, r2, #8
 800c54e:	4698      	mov	r8, r3
 800c550:	4490      	add	r8, r2
			period = ((uint32_t) cMessage[port - 1][2 + shift] << 24) + ((uint32_t) cMessage[port - 1][3 + shift] << 16) + ((uint32_t) cMessage[port - 1][4 + shift] << 8) + cMessage[port - 1][5 + shift];
 800c552:	78ba      	ldrb	r2, [r7, #2]
 800c554:	0612      	lsls	r2, r2, #24
 800c556:	78fb      	ldrb	r3, [r7, #3]
 800c558:	041b      	lsls	r3, r3, #16
 800c55a:	469c      	mov	ip, r3
 800c55c:	4462      	add	r2, ip
 800c55e:	797b      	ldrb	r3, [r7, #5]
 800c560:	469c      	mov	ip, r3
 800c562:	4462      	add	r2, ip
 800c564:	793f      	ldrb	r7, [r7, #4]
 800c566:	023f      	lsls	r7, r7, #8
 800c568:	19d2      	adds	r2, r2, r7
			StreamPIRToPort(cMessage[port-1][1+shift] ,cMessage[port-1][shift], period, timeout);
 800c56a:	5d09      	ldrb	r1, [r1, r4]
 800c56c:	1a30      	subs	r0, r6, r0
 800c56e:	00c0      	lsls	r0, r0, #3
 800c570:	182d      	adds	r5, r5, r0
 800c572:	192c      	adds	r4, r5, r4
 800c574:	7860      	ldrb	r0, [r4, #1]
 800c576:	4643      	mov	r3, r8
 800c578:	f7ff feca 	bl	800c310 <StreamPIRToPort>
	Module_Status result = H0AR9_OK;
 800c57c:	2000      	movs	r0, #0
			break;
 800c57e:	e6ef      	b.n	800c360 <Module_MessagingTask+0x3c>
	stopStream = true;
 800c580:	4b05      	ldr	r3, [pc, #20]	; (800c598 <Module_MessagingTask+0x274>)
 800c582:	2201      	movs	r2, #1
 800c584:	701a      	strb	r2, [r3, #0]
			result = H0AR9_OK;
 800c586:	2000      	movs	r0, #0
 800c588:	e6ea      	b.n	800c360 <Module_MessagingTask+0x3c>
			result = H0AR9_ERR_UnknownMessage;
 800c58a:	2001      	movs	r0, #1
 800c58c:	e6e8      	b.n	800c360 <Module_MessagingTask+0x3c>
 800c58e:	46c0      	nop			; (mov r8, r8)
 800c590:	0801bed8 	.word	0x0801bed8
 800c594:	20000d7c 	.word	0x20000d7c
 800c598:	20001c08 	.word	0x20001c08

0800c59c <StreamColorToCLI>:
{
 800c59c:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleColorToString);
 800c59e:	4a02      	ldr	r2, [pc, #8]	; (800c5a8 <StreamColorToCLI+0xc>)
 800c5a0:	f7ff fa24 	bl	800b9ec <StreamMemsToCLI>
}
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	46c0      	nop			; (mov r8, r8)
 800c5a8:	0800bde1 	.word	0x0800bde1

0800c5ac <StreamDistanceToCLI>:
{
 800c5ac:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleDistanceToString);
 800c5ae:	4a02      	ldr	r2, [pc, #8]	; (800c5b8 <StreamDistanceToCLI+0xc>)
 800c5b0:	f7ff fa1c 	bl	800b9ec <StreamMemsToCLI>
}
 800c5b4:	bd10      	pop	{r4, pc}
 800c5b6:	46c0      	nop			; (mov r8, r8)
 800c5b8:	0800bee1 	.word	0x0800bee1

0800c5bc <StreamTemperatureToCLI>:
{
 800c5bc:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleTemperatureToString);
 800c5be:	4a02      	ldr	r2, [pc, #8]	; (800c5c8 <StreamTemperatureToCLI+0xc>)
 800c5c0:	f7ff fa14 	bl	800b9ec <StreamMemsToCLI>
}
 800c5c4:	bd10      	pop	{r4, pc}
 800c5c6:	46c0      	nop			; (mov r8, r8)
 800c5c8:	0800bf95 	.word	0x0800bf95

0800c5cc <StreamHumidityToCLI>:
{
 800c5cc:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleHumidityToString);
 800c5ce:	4a02      	ldr	r2, [pc, #8]	; (800c5d8 <StreamHumidityToCLI+0xc>)
 800c5d0:	f7ff fa0c 	bl	800b9ec <StreamMemsToCLI>
}
 800c5d4:	bd10      	pop	{r4, pc}
 800c5d6:	46c0      	nop			; (mov r8, r8)
 800c5d8:	0800c09d 	.word	0x0800c09d

0800c5dc <StreamPIRToCLI>:
{
 800c5dc:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SamplePIRToString);
 800c5de:	4a02      	ldr	r2, [pc, #8]	; (800c5e8 <StreamPIRToCLI+0xc>)
 800c5e0:	f7ff fa04 	bl	800b9ec <StreamMemsToCLI>
}
 800c5e4:	bd10      	pop	{r4, pc}
 800c5e6:	46c0      	nop			; (mov r8, r8)
 800c5e8:	0800c1c9 	.word	0x0800c1c9

0800c5ec <StreamSensorCommand>:
{
 800c5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5ee:	b08b      	sub	sp, #44	; 0x2c
 800c5f0:	0005      	movs	r5, r0
 800c5f2:	9100      	str	r1, [sp, #0]
 800c5f4:	0014      	movs	r4, r2
	portBASE_TYPE sensNameLen = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	9309      	str	r3, [sp, #36]	; 0x24
	*pcWriteBuffer = '\0';
 800c5fa:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800c5fc:	9305      	str	r3, [sp, #20]
	portBASE_TYPE timeoutStrLen = 0;
 800c5fe:	9306      	str	r3, [sp, #24]
	portBASE_TYPE portStrLen = 0;
 800c600:	9307      	str	r3, [sp, #28]
	portBASE_TYPE modStrLen = 0;
 800c602:	9308      	str	r3, [sp, #32]
	*ppSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, pSensNameLen);
 800c604:	aa09      	add	r2, sp, #36	; 0x24
 800c606:	2101      	movs	r1, #1
 800c608:	0020      	movs	r0, r4
 800c60a:	f002 fb95 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800c60e:	0006      	movs	r6, r0
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &periodStrLen);
 800c610:	aa05      	add	r2, sp, #20
 800c612:	2102      	movs	r1, #2
 800c614:	0020      	movs	r0, r4
 800c616:	f002 fb8f 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800c61a:	0007      	movs	r7, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &timeoutStrLen);
 800c61c:	aa06      	add	r2, sp, #24
 800c61e:	2103      	movs	r1, #3
 800c620:	9401      	str	r4, [sp, #4]
 800c622:	0020      	movs	r0, r4
 800c624:	f002 fb88 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800c628:	0004      	movs	r4, r0
	if ((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800c62a:	2e00      	cmp	r6, #0
 800c62c:	d036      	beq.n	800c69c <StreamSensorCommand+0xb0>
 800c62e:	2f00      	cmp	r7, #0
 800c630:	d034      	beq.n	800c69c <StreamSensorCommand+0xb0>
 800c632:	2800      	cmp	r0, #0
 800c634:	d032      	beq.n	800c69c <StreamSensorCommand+0xb0>
	*pPeriod = atoi(pPeriodMSStr);
 800c636:	0038      	movs	r0, r7
 800c638:	f007 ff25 	bl	8014486 <atoi>
 800c63c:	9002      	str	r0, [sp, #8]
	*pTimeout = atoi(pTimeoutMSStr);
 800c63e:	0020      	movs	r0, r4
 800c640:	f007 ff21 	bl	8014486 <atoi>
 800c644:	9003      	str	r0, [sp, #12]
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &portStrLen);
 800c646:	aa07      	add	r2, sp, #28
 800c648:	2104      	movs	r1, #4
 800c64a:	9c01      	ldr	r4, [sp, #4]
 800c64c:	0020      	movs	r0, r4
 800c64e:	f002 fb73 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800c652:	0007      	movs	r7, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 5, &modStrLen);
 800c654:	aa08      	add	r2, sp, #32
 800c656:	2105      	movs	r1, #5
 800c658:	0020      	movs	r0, r4
 800c65a:	f002 fb6d 	bl	800ed38 <FreeRTOS_CLIGetParameter>
 800c65e:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c660:	d01a      	beq.n	800c698 <StreamSensorCommand+0xac>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800c662:	2f00      	cmp	r7, #0
 800c664:	d01a      	beq.n	800c69c <StreamSensorCommand+0xb0>
	*pPort = atoi(pPortStr);
 800c666:	0038      	movs	r0, r7
 800c668:	f007 ff0d 	bl	8014486 <atoi>
 800c66c:	b2c3      	uxtb	r3, r0
 800c66e:	9301      	str	r3, [sp, #4]
	*pModule = atoi(pModStr);
 800c670:	0020      	movs	r0, r4
 800c672:	f007 ff08 	bl	8014486 <atoi>
 800c676:	b2c4      	uxtb	r4, r0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c678:	2205      	movs	r2, #5
 800c67a:	4944      	ldr	r1, [pc, #272]	; (800c78c <StreamSensorCommand+0x1a0>)
 800c67c:	0030      	movs	r0, r6
 800c67e:	f008 fc0b 	bl	8014e98 <strncmp>
	*pPortOrCLI = false;
 800c682:	2700      	movs	r7, #0
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c684:	2800      	cmp	r0, #0
 800c686:	d000      	beq.n	800c68a <StreamSensorCommand+0x9e>
 800c688:	e070      	b.n	800c76c <StreamSensorCommand+0x180>
				StreamColorToPort(port, module, period, timeout);
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	9a02      	ldr	r2, [sp, #8]
 800c68e:	0021      	movs	r1, r4
 800c690:	9801      	ldr	r0, [sp, #4]
 800c692:	f7ff fe15 	bl	800c2c0 <StreamColorToPort>
 800c696:	e05e      	b.n	800c756 <StreamSensorCommand+0x16a>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800c698:	2f00      	cmp	r7, #0
 800c69a:	d051      	beq.n	800c740 <StreamSensorCommand+0x154>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c69c:	4a3c      	ldr	r2, [pc, #240]	; (800c790 <StreamSensorCommand+0x1a4>)
 800c69e:	9900      	ldr	r1, [sp, #0]
 800c6a0:	0028      	movs	r0, r5
 800c6a2:	f008 fb83 	bl	8014dac <snprintf>
		return pdFALSE;
 800c6a6:	e05b      	b.n	800c760 <StreamSensorCommand+0x174>
				StreamDistanceToPort(port, module, period, timeout);
 800c6a8:	9b03      	ldr	r3, [sp, #12]
 800c6aa:	9a02      	ldr	r2, [sp, #8]
 800c6ac:	0021      	movs	r1, r4
 800c6ae:	9801      	ldr	r0, [sp, #4]
 800c6b0:	f7ff fe10 	bl	800c2d4 <StreamDistanceToPort>
 800c6b4:	e04f      	b.n	800c756 <StreamSensorCommand+0x16a>
		else if (!strncmp(pSensName, temperatureCmdName, strlen(temperatureCmdName))) {
 800c6b6:	2204      	movs	r2, #4
 800c6b8:	4936      	ldr	r1, [pc, #216]	; (800c794 <StreamSensorCommand+0x1a8>)
 800c6ba:	0030      	movs	r0, r6
 800c6bc:	f008 fbec 	bl	8014e98 <strncmp>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	d10d      	bne.n	800c6e0 <StreamSensorCommand+0xf4>
			if (portOrCLI) {
 800c6c4:	2f00      	cmp	r7, #0
 800c6c6:	d004      	beq.n	800c6d2 <StreamSensorCommand+0xe6>
				StreamTemperatureToCLI(period, timeout);
 800c6c8:	9903      	ldr	r1, [sp, #12]
 800c6ca:	9802      	ldr	r0, [sp, #8]
 800c6cc:	f7ff ff76 	bl	800c5bc <StreamTemperatureToCLI>
 800c6d0:	e041      	b.n	800c756 <StreamSensorCommand+0x16a>
				StreamTemperatureToPort(port, module, period, timeout);
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	9a02      	ldr	r2, [sp, #8]
 800c6d6:	0021      	movs	r1, r4
 800c6d8:	9801      	ldr	r0, [sp, #4]
 800c6da:	f7ff fe05 	bl	800c2e8 <StreamTemperatureToPort>
 800c6de:	e03a      	b.n	800c756 <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, humidityCmdName, strlen(humidityCmdName))) {
 800c6e0:	2208      	movs	r2, #8
 800c6e2:	492d      	ldr	r1, [pc, #180]	; (800c798 <StreamSensorCommand+0x1ac>)
 800c6e4:	0030      	movs	r0, r6
 800c6e6:	f008 fbd7 	bl	8014e98 <strncmp>
 800c6ea:	2800      	cmp	r0, #0
 800c6ec:	d10d      	bne.n	800c70a <StreamSensorCommand+0x11e>
			if (portOrCLI) {
 800c6ee:	2f00      	cmp	r7, #0
 800c6f0:	d004      	beq.n	800c6fc <StreamSensorCommand+0x110>
				StreamHumidityToCLI(period, timeout);
 800c6f2:	9903      	ldr	r1, [sp, #12]
 800c6f4:	9802      	ldr	r0, [sp, #8]
 800c6f6:	f7ff ff69 	bl	800c5cc <StreamHumidityToCLI>
 800c6fa:	e02c      	b.n	800c756 <StreamSensorCommand+0x16a>
				StreamHumidityToPort(port, module, period, timeout);
 800c6fc:	9b03      	ldr	r3, [sp, #12]
 800c6fe:	9a02      	ldr	r2, [sp, #8]
 800c700:	0021      	movs	r1, r4
 800c702:	9801      	ldr	r0, [sp, #4]
 800c704:	f7ff fdfa 	bl	800c2fc <StreamHumidityToPort>
 800c708:	e025      	b.n	800c756 <StreamSensorCommand+0x16a>
		} else if (!strncmp(pSensName, pirCmdName, strlen(pirCmdName))) {
 800c70a:	2203      	movs	r2, #3
 800c70c:	4923      	ldr	r1, [pc, #140]	; (800c79c <StreamSensorCommand+0x1b0>)
 800c70e:	0030      	movs	r0, r6
 800c710:	f008 fbc2 	bl	8014e98 <strncmp>
 800c714:	2800      	cmp	r0, #0
 800c716:	d10d      	bne.n	800c734 <StreamSensorCommand+0x148>
			if (portOrCLI) {
 800c718:	2f00      	cmp	r7, #0
 800c71a:	d004      	beq.n	800c726 <StreamSensorCommand+0x13a>
				StreamPIRToCLI(period, timeout);
 800c71c:	9903      	ldr	r1, [sp, #12]
 800c71e:	9802      	ldr	r0, [sp, #8]
 800c720:	f7ff ff5c 	bl	800c5dc <StreamPIRToCLI>
 800c724:	e017      	b.n	800c756 <StreamSensorCommand+0x16a>
				StreamPIRToPort(port, module, period, timeout);
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	9a02      	ldr	r2, [sp, #8]
 800c72a:	0021      	movs	r1, r4
 800c72c:	9801      	ldr	r0, [sp, #4]
 800c72e:	f7ff fdef 	bl	800c310 <StreamPIRToPort>
 800c732:	e010      	b.n	800c756 <StreamSensorCommand+0x16a>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800c734:	4a16      	ldr	r2, [pc, #88]	; (800c790 <StreamSensorCommand+0x1a4>)
 800c736:	9900      	ldr	r1, [sp, #0]
 800c738:	0028      	movs	r0, r5
 800c73a:	f008 fb37 	bl	8014dac <snprintf>
 800c73e:	e00a      	b.n	800c756 <StreamSensorCommand+0x16a>
		if (!strncmp(pSensName, colorCmdName, strlen(colorCmdName))) {
 800c740:	2205      	movs	r2, #5
 800c742:	4912      	ldr	r1, [pc, #72]	; (800c78c <StreamSensorCommand+0x1a0>)
 800c744:	0030      	movs	r0, r6
 800c746:	f008 fba7 	bl	8014e98 <strncmp>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	d10b      	bne.n	800c766 <StreamSensorCommand+0x17a>
				StreamColorToCLI(period, timeout);
 800c74e:	9903      	ldr	r1, [sp, #12]
 800c750:	9802      	ldr	r0, [sp, #8]
 800c752:	f7ff ff23 	bl	800c59c <StreamColorToCLI>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800c756:	4a12      	ldr	r2, [pc, #72]	; (800c7a0 <StreamSensorCommand+0x1b4>)
 800c758:	9900      	ldr	r1, [sp, #0]
 800c75a:	0028      	movs	r0, r5
 800c75c:	f008 fb26 	bl	8014dac <snprintf>
}
 800c760:	2000      	movs	r0, #0
 800c762:	b00b      	add	sp, #44	; 0x2c
 800c764:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pPortOrCLI = true;
 800c766:	2701      	movs	r7, #1
	uint8_t module = 0;
 800c768:	2400      	movs	r4, #0
	uint8_t port = 0;
 800c76a:	9401      	str	r4, [sp, #4]
		} else if (!strncmp(pSensName, distanceCmdName, strlen(distanceCmdName))) {
 800c76c:	2208      	movs	r2, #8
 800c76e:	490d      	ldr	r1, [pc, #52]	; (800c7a4 <StreamSensorCommand+0x1b8>)
 800c770:	0030      	movs	r0, r6
 800c772:	f008 fb91 	bl	8014e98 <strncmp>
 800c776:	2800      	cmp	r0, #0
 800c778:	d19d      	bne.n	800c6b6 <StreamSensorCommand+0xca>
			if (portOrCLI) {
 800c77a:	2f00      	cmp	r7, #0
 800c77c:	d100      	bne.n	800c780 <StreamSensorCommand+0x194>
 800c77e:	e793      	b.n	800c6a8 <StreamSensorCommand+0xbc>
				StreamDistanceToCLI(period, timeout);
 800c780:	9903      	ldr	r1, [sp, #12]
 800c782:	9802      	ldr	r0, [sp, #8]
 800c784:	f7ff ff12 	bl	800c5ac <StreamDistanceToCLI>
 800c788:	e7e5      	b.n	800c756 <StreamSensorCommand+0x16a>
 800c78a:	46c0      	nop			; (mov r8, r8)
 800c78c:	0801bf78 	.word	0x0801bf78
 800c790:	0801bf64 	.word	0x0801bf64
 800c794:	0801bf8c 	.word	0x0801bf8c
 800c798:	0801bf94 	.word	0x0801bf94
 800c79c:	0801bfa0 	.word	0x0801bfa0
 800c7a0:	0801b398 	.word	0x0801b398
 800c7a4:	0801bf80 	.word	0x0801bf80

0800c7a8 <SaveToRO>:

uint8_t SaveToRO(void)
{
 800c7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7aa:	46de      	mov	lr, fp
 800c7ac:	4657      	mov	r7, sl
 800c7ae:	464e      	mov	r6, r9
 800c7b0:	4645      	mov	r5, r8
 800c7b2:	b5e0      	push	{r5, r6, r7, lr}
 800c7b4:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK;
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800c7b6:	2215      	movs	r2, #21
 800c7b8:	2100      	movs	r1, #0
 800c7ba:	a802      	add	r0, sp, #8
 800c7bc:	f008 f8fc 	bl	80149b8 <memset>

	HAL_FLASH_Unlock();
 800c7c0:	f005 fb8e 	bl	8011ee0 <HAL_FLASH_Unlock>

	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800c7c4:	4872      	ldr	r0, [pc, #456]	; (800c990 <SaveToRO+0x1e8>)
 800c7c6:	f005 fc4d 	bl	8012064 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c7ca:	4872      	ldr	r0, [pc, #456]	; (800c994 <SaveToRO+0x1ec>)
 800c7cc:	f005 fba4 	bl	8011f18 <FLASH_WaitForLastOperation>
	if(FlashStatus != HAL_OK) {
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d112      	bne.n	800c7fa <SaveToRO+0x52>
		return pFlash.ErrorCode;
	} else {
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800c7d4:	4a70      	ldr	r2, [pc, #448]	; (800c998 <SaveToRO+0x1f0>)
 800c7d6:	6913      	ldr	r3, [r2, #16]
 800c7d8:	2102      	movs	r1, #2
 800c7da:	438b      	bics	r3, r1
 800c7dc:	6113      	str	r3, [r2, #16]
	}

	/* Save number of modules and myID */
	if (myID)
 800c7de:	4b6f      	ldr	r3, [pc, #444]	; (800c99c <SaveToRO+0x1f4>)
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d113      	bne.n	800c80e <SaveToRO+0x66>
		}
	}

	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800c7e6:	4b6e      	ldr	r3, [pc, #440]	; (800c9a0 <SaveToRO+0x1f8>)
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d100      	bne.n	800c7f0 <SaveToRO+0x48>
 800c7ee:	e0ca      	b.n	800c986 <SaveToRO+0x1de>
 800c7f0:	2500      	movs	r5, #0
 800c7f2:	4c6c      	ldr	r4, [pc, #432]	; (800c9a4 <SaveToRO+0x1fc>)
	{
		if (snippets[s].cond.conditionType)
 800c7f4:	4b6c      	ldr	r3, [pc, #432]	; (800c9a8 <SaveToRO+0x200>)
 800c7f6:	4698      	mov	r8, r3
 800c7f8:	e06e      	b.n	800c8d8 <SaveToRO+0x130>
		return pFlash.ErrorCode;
 800c7fa:	4b6c      	ldr	r3, [pc, #432]	; (800c9ac <SaveToRO+0x204>)
 800c7fc:	69d8      	ldr	r0, [r3, #28]
 800c7fe:	b2c0      	uxtb	r0, r0
	}

	HAL_FLASH_Lock();

	return result;
}
 800c800:	b009      	add	sp, #36	; 0x24
 800c802:	bc3c      	pop	{r2, r3, r4, r5}
 800c804:	4690      	mov	r8, r2
 800c806:	4699      	mov	r9, r3
 800c808:	46a2      	mov	sl, r4
 800c80a:	46ab      	mov	fp, r5
 800c80c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800c80e:	4a68      	ldr	r2, [pc, #416]	; (800c9b0 <SaveToRO+0x208>)
 800c810:	7812      	ldrb	r2, [r2, #0]
 800c812:	0212      	lsls	r2, r2, #8
 800c814:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800c816:	b292      	uxth	r2, r2
 800c818:	2300      	movs	r3, #0
 800c81a:	495d      	ldr	r1, [pc, #372]	; (800c990 <SaveToRO+0x1e8>)
 800c81c:	2001      	movs	r0, #1
 800c81e:	f005 fba9 	bl	8011f74 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c822:	485c      	ldr	r0, [pc, #368]	; (800c994 <SaveToRO+0x1ec>)
 800c824:	f005 fb78 	bl	8011f18 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800c828:	2800      	cmp	r0, #0
 800c82a:	d111      	bne.n	800c850 <SaveToRO+0xa8>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c82c:	4a5a      	ldr	r2, [pc, #360]	; (800c998 <SaveToRO+0x1f0>)
 800c82e:	6913      	ldr	r3, [r2, #16]
 800c830:	2101      	movs	r1, #1
 800c832:	438b      	bics	r3, r1
 800c834:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800c836:	4b5e      	ldr	r3, [pc, #376]	; (800c9b0 <SaveToRO+0x208>)
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	2201      	movs	r2, #1
 800c83c:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800c83e:	2502      	movs	r5, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800c840:	2b00      	cmp	r3, #0
 800c842:	d0d0      	beq.n	800c7e6 <SaveToRO+0x3e>
 800c844:	2316      	movs	r3, #22
 800c846:	469b      	mov	fp, r3
 800c848:	4b5a      	ldr	r3, [pc, #360]	; (800c9b4 <SaveToRO+0x20c>)
 800c84a:	469a      	mov	sl, r3
				if (array[i-1][0]) {
 800c84c:	4698      	mov	r8, r3
 800c84e:	e02a      	b.n	800c8a6 <SaveToRO+0xfe>
			return pFlash.ErrorCode;
 800c850:	4b56      	ldr	r3, [pc, #344]	; (800c9ac <SaveToRO+0x204>)
 800c852:	69d8      	ldr	r0, [r3, #28]
 800c854:	b2c0      	uxtb	r0, r0
 800c856:	e7d3      	b.n	800c800 <SaveToRO+0x58>
						return pFlash.ErrorCode;
 800c858:	4b54      	ldr	r3, [pc, #336]	; (800c9ac <SaveToRO+0x204>)
 800c85a:	69d8      	ldr	r0, [r3, #28]
 800c85c:	b2c0      	uxtb	r0, r0
 800c85e:	e7cf      	b.n	800c800 <SaveToRO+0x58>
 800c860:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800c862:	42b4      	cmp	r4, r6
 800c864:	d017      	beq.n	800c896 <SaveToRO+0xee>
				if (array[i-1][0]) {
 800c866:	4643      	mov	r3, r8
 800c868:	5afb      	ldrh	r3, [r7, r3]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d0f8      	beq.n	800c860 <SaveToRO+0xb8>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800c86e:	8822      	ldrh	r2, [r4, #0]
 800c870:	4b47      	ldr	r3, [pc, #284]	; (800c990 <SaveToRO+0x1e8>)
 800c872:	18e9      	adds	r1, r5, r3
 800c874:	2300      	movs	r3, #0
 800c876:	2001      	movs	r0, #1
 800c878:	f005 fb7c 	bl	8011f74 <HAL_FLASH_Program>
					add += 2;
 800c87c:	3502      	adds	r5, #2
 800c87e:	b2ad      	uxth	r5, r5
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c880:	4844      	ldr	r0, [pc, #272]	; (800c994 <SaveToRO+0x1ec>)
 800c882:	f005 fb49 	bl	8011f18 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800c886:	2800      	cmp	r0, #0
 800c888:	d1e6      	bne.n	800c858 <SaveToRO+0xb0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c88a:	4a43      	ldr	r2, [pc, #268]	; (800c998 <SaveToRO+0x1f0>)
 800c88c:	6913      	ldr	r3, [r2, #16]
 800c88e:	2101      	movs	r1, #1
 800c890:	438b      	bics	r3, r1
 800c892:	6113      	str	r3, [r2, #16]
 800c894:	e7e4      	b.n	800c860 <SaveToRO+0xb8>
		for(uint8_t i=1 ; i<=N ; i++)
 800c896:	464b      	mov	r3, r9
 800c898:	3301      	adds	r3, #1
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	4699      	mov	r9, r3
 800c89e:	4b44      	ldr	r3, [pc, #272]	; (800c9b0 <SaveToRO+0x208>)
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	454b      	cmp	r3, r9
 800c8a4:	d39f      	bcc.n	800c7e6 <SaveToRO+0x3e>
 800c8a6:	465e      	mov	r6, fp
 800c8a8:	464b      	mov	r3, r9
 800c8aa:	435e      	muls	r6, r3
 800c8ac:	0034      	movs	r4, r6
 800c8ae:	3c16      	subs	r4, #22
 800c8b0:	4454      	add	r4, sl
 800c8b2:	4456      	add	r6, sl
				if (array[i-1][0]) {
 800c8b4:	1e5f      	subs	r7, r3, #1
 800c8b6:	465b      	mov	r3, fp
 800c8b8:	435f      	muls	r7, r3
 800c8ba:	e7d4      	b.n	800c866 <SaveToRO+0xbe>
					return pFlash.ErrorCode;
 800c8bc:	4b3b      	ldr	r3, [pc, #236]	; (800c9ac <SaveToRO+0x204>)
 800c8be:	69d8      	ldr	r0, [r3, #28]
 800c8c0:	b2c0      	uxtb	r0, r0
 800c8c2:	e79d      	b.n	800c800 <SaveToRO+0x58>
					return pFlash.ErrorCode;
 800c8c4:	4b39      	ldr	r3, [pc, #228]	; (800c9ac <SaveToRO+0x204>)
 800c8c6:	69d8      	ldr	r0, [r3, #28]
 800c8c8:	b2c0      	uxtb	r0, r0
 800c8ca:	e799      	b.n	800c800 <SaveToRO+0x58>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 800c8cc:	3501      	adds	r5, #1
 800c8ce:	b2ed      	uxtb	r5, r5
 800c8d0:	4b33      	ldr	r3, [pc, #204]	; (800c9a0 <SaveToRO+0x1f8>)
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	42ab      	cmp	r3, r5
 800c8d6:	d956      	bls.n	800c986 <SaveToRO+0x1de>
		if (snippets[s].cond.conditionType)
 800c8d8:	9501      	str	r5, [sp, #4]
 800c8da:	00ab      	lsls	r3, r5, #2
 800c8dc:	195b      	adds	r3, r3, r5
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	4642      	mov	r2, r8
 800c8e2:	5c9b      	ldrb	r3, [r3, r2]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d0f1      	beq.n	800c8cc <SaveToRO+0x124>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800c8e8:	23fe      	movs	r3, #254	; 0xfe
 800c8ea:	aa02      	add	r2, sp, #8
 800c8ec:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800c8ee:	00a9      	lsls	r1, r5, #2
 800c8f0:	1949      	adds	r1, r1, r5
 800c8f2:	0089      	lsls	r1, r1, #2
 800c8f4:	4b2c      	ldr	r3, [pc, #176]	; (800c9a8 <SaveToRO+0x200>)
 800c8f6:	469c      	mov	ip, r3
 800c8f8:	4461      	add	r1, ip
 800c8fa:	2214      	movs	r2, #20
 800c8fc:	ab02      	add	r3, sp, #8
 800c8fe:	1c58      	adds	r0, r3, #1
 800c900:	f008 f851 	bl	80149a6 <memcpy>
 800c904:	2314      	movs	r3, #20
 800c906:	469b      	mov	fp, r3
 800c908:	44a3      	add	fp, r4
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800c90a:	ae02      	add	r6, sp, #8
 800c90c:	1b36      	subs	r6, r6, r4
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c90e:	4f22      	ldr	r7, [pc, #136]	; (800c998 <SaveToRO+0x1f0>)
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800c910:	5b32      	ldrh	r2, [r6, r4]
 800c912:	2300      	movs	r3, #0
 800c914:	0021      	movs	r1, r4
 800c916:	2001      	movs	r0, #1
 800c918:	f005 fb2c 	bl	8011f74 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c91c:	481d      	ldr	r0, [pc, #116]	; (800c994 <SaveToRO+0x1ec>)
 800c91e:	f005 fafb 	bl	8011f18 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c922:	2800      	cmp	r0, #0
 800c924:	d1ca      	bne.n	800c8bc <SaveToRO+0x114>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	2201      	movs	r2, #1
 800c92a:	4393      	bics	r3, r2
 800c92c:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800c92e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800c930:	455c      	cmp	r4, fp
 800c932:	d1ed      	bne.n	800c910 <SaveToRO+0x168>
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c934:	2700      	movs	r7, #0
 800c936:	9a01      	ldr	r2, [sp, #4]
 800c938:	0093      	lsls	r3, r2, #2
 800c93a:	189e      	adds	r6, r3, r2
 800c93c:	00b6      	lsls	r6, r6, #2
 800c93e:	4b1a      	ldr	r3, [pc, #104]	; (800c9a8 <SaveToRO+0x200>)
 800c940:	469a      	mov	sl, r3
 800c942:	44b2      	add	sl, r6
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c944:	4b14      	ldr	r3, [pc, #80]	; (800c998 <SaveToRO+0x1f0>)
 800c946:	469b      	mov	fp, r3
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c948:	4653      	mov	r3, sl
 800c94a:	68de      	ldr	r6, [r3, #12]
 800c94c:	0030      	movs	r0, r6
 800c94e:	f7f3 fbe3 	bl	8000118 <strlen>
 800c952:	3001      	adds	r0, #1
 800c954:	0840      	lsrs	r0, r0, #1
 800c956:	4287      	cmp	r7, r0
 800c958:	d2b8      	bcs.n	800c8cc <SaveToRO+0x124>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800c95a:	007b      	lsls	r3, r7, #1
 800c95c:	5af2      	ldrh	r2, [r6, r3]
 800c95e:	2300      	movs	r3, #0
 800c960:	0021      	movs	r1, r4
 800c962:	2001      	movs	r0, #1
 800c964:	f005 fb06 	bl	8011f74 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE);
 800c968:	480a      	ldr	r0, [pc, #40]	; (800c994 <SaveToRO+0x1ec>)
 800c96a:	f005 fad5 	bl	8011f18 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c96e:	2800      	cmp	r0, #0
 800c970:	d1a8      	bne.n	800c8c4 <SaveToRO+0x11c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c972:	465b      	mov	r3, fp
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	2201      	movs	r2, #1
 800c978:	4393      	bics	r3, r2
 800c97a:	465a      	mov	r2, fp
 800c97c:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800c97e:	3402      	adds	r4, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c980:	3701      	adds	r7, #1
 800c982:	b2ff      	uxtb	r7, r7
 800c984:	e7e0      	b.n	800c948 <SaveToRO+0x1a0>
	HAL_FLASH_Lock();
 800c986:	f005 fabd 	bl	8011f04 <HAL_FLASH_Lock>
	return result;
 800c98a:	2000      	movs	r0, #0
 800c98c:	e738      	b.n	800c800 <SaveToRO+0x58>
 800c98e:	46c0      	nop			; (mov r8, r8)
 800c990:	0801d800 	.word	0x0801d800
 800c994:	0000c350 	.word	0x0000c350
 800c998:	40022000 	.word	0x40022000
 800c99c:	200010ea 	.word	0x200010ea
 800c9a0:	20001297 	.word	0x20001297
 800c9a4:	0801dc00 	.word	0x0801dc00
 800c9a8:	20006e70 	.word	0x20006e70
 800c9ac:	200073d0 	.word	0x200073d0
 800c9b0:	20000044 	.word	0x20000044
 800c9b4:	20000aec 	.word	0x20000aec

0800c9b8 <ClearROtopology>:

/* --- Clear array topology in SRAM and Flash RO ---
*/
uint8_t ClearROtopology(void)
{
 800c9b8:	b510      	push	{r4, lr}
	// Clear the array
	memset(array, 0, sizeof(array));
 800c9ba:	228f      	movs	r2, #143	; 0x8f
 800c9bc:	0092      	lsls	r2, r2, #2
 800c9be:	2100      	movs	r1, #0
 800c9c0:	4805      	ldr	r0, [pc, #20]	; (800c9d8 <ClearROtopology+0x20>)
 800c9c2:	f007 fff9 	bl	80149b8 <memset>
	N = 1; myID = 0;
 800c9c6:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <ClearROtopology+0x24>)
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	701a      	strb	r2, [r3, #0]
 800c9cc:	4b04      	ldr	r3, [pc, #16]	; (800c9e0 <ClearROtopology+0x28>)
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	701a      	strb	r2, [r3, #0]

	return SaveToRO();
 800c9d2:	f7ff fee9 	bl	800c7a8 <SaveToRO>
}
 800c9d6:	bd10      	pop	{r4, pc}
 800c9d8:	20000aec 	.word	0x20000aec
 800c9dc:	20000044 	.word	0x20000044
 800c9e0:	200010ea 	.word	0x200010ea

0800c9e4 <GetPort>:

/* --- Get the port for a given UART.
*/
uint8_t GetPort(UART_HandleTypeDef *huart)
{
	if (huart->Instance == USART4)
 800c9e4:	6800      	ldr	r0, [r0, #0]
 800c9e6:	4b11      	ldr	r3, [pc, #68]	; (800ca2c <GetPort+0x48>)
 800c9e8:	4298      	cmp	r0, r3
 800c9ea:	d014      	beq.n	800ca16 <GetPort+0x32>
			return P1;
	else if (huart->Instance == USART2)
 800c9ec:	4b10      	ldr	r3, [pc, #64]	; (800ca30 <GetPort+0x4c>)
 800c9ee:	4298      	cmp	r0, r3
 800c9f0:	d013      	beq.n	800ca1a <GetPort+0x36>
			return P2;
	else if (huart->Instance == USART6)
 800c9f2:	4b10      	ldr	r3, [pc, #64]	; (800ca34 <GetPort+0x50>)
 800c9f4:	4298      	cmp	r0, r3
 800c9f6:	d012      	beq.n	800ca1e <GetPort+0x3a>
			return P3;
	else if (huart->Instance == USART3)
 800c9f8:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <GetPort+0x54>)
 800c9fa:	4298      	cmp	r0, r3
 800c9fc:	d011      	beq.n	800ca22 <GetPort+0x3e>
			return P4;
	else if (huart->Instance == USART1)
 800c9fe:	4b0f      	ldr	r3, [pc, #60]	; (800ca3c <GetPort+0x58>)
 800ca00:	4298      	cmp	r0, r3
 800ca02:	d010      	beq.n	800ca26 <GetPort+0x42>
			return P5;
	else if (huart->Instance == USART5)
			return P6;
	return 0;
 800ca04:	4b0e      	ldr	r3, [pc, #56]	; (800ca40 <GetPort+0x5c>)
 800ca06:	469c      	mov	ip, r3
 800ca08:	4460      	add	r0, ip
 800ca0a:	4243      	negs	r3, r0
 800ca0c:	4158      	adcs	r0, r3
 800ca0e:	4240      	negs	r0, r0
 800ca10:	2306      	movs	r3, #6
 800ca12:	4018      	ands	r0, r3
}
 800ca14:	4770      	bx	lr
			return P1;
 800ca16:	2001      	movs	r0, #1
 800ca18:	e7fc      	b.n	800ca14 <GetPort+0x30>
			return P2;
 800ca1a:	2002      	movs	r0, #2
 800ca1c:	e7fa      	b.n	800ca14 <GetPort+0x30>
			return P3;
 800ca1e:	2003      	movs	r0, #3
 800ca20:	e7f8      	b.n	800ca14 <GetPort+0x30>
			return P4;
 800ca22:	2004      	movs	r0, #4
 800ca24:	e7f6      	b.n	800ca14 <GetPort+0x30>
			return P5;
 800ca26:	2005      	movs	r0, #5
 800ca28:	e7f4      	b.n	800ca14 <GetPort+0x30>
 800ca2a:	46c0      	nop			; (mov r8, r8)
 800ca2c:	40004c00 	.word	0x40004c00
 800ca30:	40004400 	.word	0x40004400
 800ca34:	40011400 	.word	0x40011400
 800ca38:	40004800 	.word	0x40004800
 800ca3c:	40013800 	.word	0x40013800
 800ca40:	bfffb000 	.word	0xbfffb000

0800ca44 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ca44:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ca46:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ca4c:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ca4e:	2280      	movs	r2, #128	; 0x80
 800ca50:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca52:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca54:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800ca56:	3320      	adds	r3, #32
 800ca58:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ca5a:	2380      	movs	r3, #128	; 0x80
 800ca5c:	019b      	lsls	r3, r3, #6
 800ca5e:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ca60:	f004 fd46 	bl	80114f0 <HAL_DMA_Init>
}
 800ca64:	bd10      	pop	{r4, pc}

0800ca66 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800ca66:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800ca68:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ca6a:	2310      	movs	r3, #16
 800ca6c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800ca72:	2280      	movs	r2, #128	; 0x80
 800ca74:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca76:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca78:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800ca7a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800ca7c:	2380      	movs	r3, #128	; 0x80
 800ca7e:	019b      	lsls	r3, r3, #6
 800ca80:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800ca82:	f004 fd35 	bl	80114f0 <HAL_DMA_Init>
}
 800ca86:	bd10      	pop	{r4, pc}

0800ca88 <DMA_Init>:
{
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800ca8c:	4b20      	ldr	r3, [pc, #128]	; (800cb10 <DMA_Init+0x88>)
 800ca8e:	6959      	ldr	r1, [r3, #20]
 800ca90:	2201      	movs	r2, #1
 800ca92:	4311      	orrs	r1, r2
 800ca94:	6159      	str	r1, [r3, #20]
 800ca96:	6959      	ldr	r1, [r3, #20]
 800ca98:	400a      	ands	r2, r1
 800ca9a:	9200      	str	r2, [sp, #0]
 800ca9c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800ca9e:	6959      	ldr	r1, [r3, #20]
 800caa0:	2202      	movs	r2, #2
 800caa2:	4311      	orrs	r1, r2
 800caa4:	6159      	str	r1, [r3, #20]
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	401a      	ands	r2, r3
 800caaa:	9201      	str	r2, [sp, #4]
 800caac:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800caae:	4c19      	ldr	r4, [pc, #100]	; (800cb14 <DMA_Init+0x8c>)
 800cab0:	4919      	ldr	r1, [pc, #100]	; (800cb18 <DMA_Init+0x90>)
 800cab2:	0020      	movs	r0, r4
 800cab4:	f7ff ffc6 	bl	800ca44 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800cab8:	0020      	movs	r0, r4
 800caba:	3038      	adds	r0, #56	; 0x38
 800cabc:	4917      	ldr	r1, [pc, #92]	; (800cb1c <DMA_Init+0x94>)
 800cabe:	f7ff ffc1 	bl	800ca44 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800cac2:	0020      	movs	r0, r4
 800cac4:	3070      	adds	r0, #112	; 0x70
 800cac6:	4916      	ldr	r1, [pc, #88]	; (800cb20 <DMA_Init+0x98>)
 800cac8:	f7ff ffbc 	bl	800ca44 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800cacc:	0020      	movs	r0, r4
 800cace:	30a8      	adds	r0, #168	; 0xa8
 800cad0:	4914      	ldr	r1, [pc, #80]	; (800cb24 <DMA_Init+0x9c>)
 800cad2:	f7ff ffb7 	bl	800ca44 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800cad6:	0020      	movs	r0, r4
 800cad8:	30e0      	adds	r0, #224	; 0xe0
 800cada:	4913      	ldr	r1, [pc, #76]	; (800cb28 <DMA_Init+0xa0>)
 800cadc:	f7ff ffb2 	bl	800ca44 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800cae0:	0020      	movs	r0, r4
 800cae2:	3019      	adds	r0, #25
 800cae4:	30ff      	adds	r0, #255	; 0xff
 800cae6:	4911      	ldr	r1, [pc, #68]	; (800cb2c <DMA_Init+0xa4>)
 800cae8:	f7ff ffac 	bl	800ca44 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800caec:	4c10      	ldr	r4, [pc, #64]	; (800cb30 <DMA_Init+0xa8>)
 800caee:	4911      	ldr	r1, [pc, #68]	; (800cb34 <DMA_Init+0xac>)
 800caf0:	0020      	movs	r0, r4
 800caf2:	f7ff ffb8 	bl	800ca66 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800caf6:	0020      	movs	r0, r4
 800caf8:	3038      	adds	r0, #56	; 0x38
 800cafa:	490f      	ldr	r1, [pc, #60]	; (800cb38 <DMA_Init+0xb0>)
 800cafc:	f7ff ffb3 	bl	800ca66 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800cb00:	0020      	movs	r0, r4
 800cb02:	3070      	adds	r0, #112	; 0x70
 800cb04:	490d      	ldr	r1, [pc, #52]	; (800cb3c <DMA_Init+0xb4>)
 800cb06:	f7ff ffae 	bl	800ca66 <DMA_MSG_TX_CH_Init>
}
 800cb0a:	b002      	add	sp, #8
 800cb0c:	bd10      	pop	{r4, pc}
 800cb0e:	46c0      	nop			; (mov r8, r8)
 800cb10:	40021000 	.word	0x40021000
 800cb14:	20001c24 	.word	0x20001c24
 800cb18:	40020008 	.word	0x40020008
 800cb1c:	40020030 	.word	0x40020030
 800cb20:	40020058 	.word	0x40020058
 800cb24:	4002006c 	.word	0x4002006c
 800cb28:	4002041c 	.word	0x4002041c
 800cb2c:	40020430 	.word	0x40020430
 800cb30:	20001d74 	.word	0x20001d74
 800cb34:	4002001c 	.word	0x4002001c
 800cb38:	40020044 	.word	0x40020044
 800cb3c:	40020080 	.word	0x40020080

0800cb40 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800cb40:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800cb42:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb44:	2300      	movs	r3, #0
 800cb46:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800cb48:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800cb4a:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cb4c:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cb4e:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800cb50:	3320      	adds	r3, #32
 800cb52:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800cb54:	2380      	movs	r3, #128	; 0x80
 800cb56:	015b      	lsls	r3, r3, #5
 800cb58:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800cb5a:	f004 fcc9 	bl	80114f0 <HAL_DMA_Init>
}
 800cb5e:	bd10      	pop	{r4, pc}

0800cb60 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800cb60:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cb62:	6803      	ldr	r3, [r0, #0]
 800cb64:	4a20      	ldr	r2, [pc, #128]	; (800cbe8 <SetupDMAInterrupts+0x88>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d020      	beq.n	800cbac <SetupDMAInterrupts+0x4c>
 800cb6a:	d827      	bhi.n	800cbbc <SetupDMAInterrupts+0x5c>
 800cb6c:	4a1f      	ldr	r2, [pc, #124]	; (800cbec <SetupDMAInterrupts+0x8c>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d00e      	beq.n	800cb90 <SetupDMAInterrupts+0x30>
 800cb72:	d815      	bhi.n	800cba0 <SetupDMAInterrupts+0x40>
 800cb74:	4a1e      	ldr	r2, [pc, #120]	; (800cbf0 <SetupDMAInterrupts+0x90>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d107      	bne.n	800cb8a <SetupDMAInterrupts+0x2a>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	2009      	movs	r0, #9
 800cb7e:	f004 fb19 	bl	80111b4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800cb82:	2009      	movs	r0, #9
 800cb84:	f004 fb4a 	bl	801121c <HAL_NVIC_EnableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cb88:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cb8a:	4a1a      	ldr	r2, [pc, #104]	; (800cbf4 <SetupDMAInterrupts+0x94>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d1fb      	bne.n	800cb88 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800cb90:	2200      	movs	r2, #0
 800cb92:	200a      	movs	r0, #10
 800cb94:	f004 fb0e 	bl	80111b4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cb98:	200a      	movs	r0, #10
 800cb9a:	f004 fb3f 	bl	801121c <HAL_NVIC_EnableIRQ>
			break;
 800cb9e:	e7f3      	b.n	800cb88 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cba0:	4a15      	ldr	r2, [pc, #84]	; (800cbf8 <SetupDMAInterrupts+0x98>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d002      	beq.n	800cbac <SetupDMAInterrupts+0x4c>
 800cba6:	4a15      	ldr	r2, [pc, #84]	; (800cbfc <SetupDMAInterrupts+0x9c>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d1ed      	bne.n	800cb88 <SetupDMAInterrupts+0x28>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800cbac:	2200      	movs	r2, #0
 800cbae:	200b      	movs	r0, #11
 800cbb0:	f004 fb00 	bl	80111b4 <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cbb4:	200b      	movs	r0, #11
 800cbb6:	f004 fb31 	bl	801121c <HAL_NVIC_EnableIRQ>
}
 800cbba:	e7e5      	b.n	800cb88 <SetupDMAInterrupts+0x28>
	switch ((uint32_t)hDMA->Instance)
 800cbbc:	4a10      	ldr	r2, [pc, #64]	; (800cc00 <SetupDMAInterrupts+0xa0>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d0e6      	beq.n	800cb90 <SetupDMAInterrupts+0x30>
 800cbc2:	d909      	bls.n	800cbd8 <SetupDMAInterrupts+0x78>
 800cbc4:	4a0f      	ldr	r2, [pc, #60]	; (800cc04 <SetupDMAInterrupts+0xa4>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d0f0      	beq.n	800cbac <SetupDMAInterrupts+0x4c>
 800cbca:	4a0f      	ldr	r2, [pc, #60]	; (800cc08 <SetupDMAInterrupts+0xa8>)
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	d0ed      	beq.n	800cbac <SetupDMAInterrupts+0x4c>
 800cbd0:	4a0e      	ldr	r2, [pc, #56]	; (800cc0c <SetupDMAInterrupts+0xac>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d1d8      	bne.n	800cb88 <SetupDMAInterrupts+0x28>
 800cbd6:	e7e9      	b.n	800cbac <SetupDMAInterrupts+0x4c>
 800cbd8:	4a0d      	ldr	r2, [pc, #52]	; (800cc10 <SetupDMAInterrupts+0xb0>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d0e6      	beq.n	800cbac <SetupDMAInterrupts+0x4c>
 800cbde:	4a0d      	ldr	r2, [pc, #52]	; (800cc14 <SetupDMAInterrupts+0xb4>)
 800cbe0:	4293      	cmp	r3, r2
 800cbe2:	d0d5      	beq.n	800cb90 <SetupDMAInterrupts+0x30>
 800cbe4:	e7d0      	b.n	800cb88 <SetupDMAInterrupts+0x28>
 800cbe6:	46c0      	nop			; (mov r8, r8)
 800cbe8:	4002006c 	.word	0x4002006c
 800cbec:	40020030 	.word	0x40020030
 800cbf0:	40020008 	.word	0x40020008
 800cbf4:	4002001c 	.word	0x4002001c
 800cbf8:	40020044 	.word	0x40020044
 800cbfc:	40020058 	.word	0x40020058
 800cc00:	4002041c 	.word	0x4002041c
 800cc04:	40020444 	.word	0x40020444
 800cc08:	40020458 	.word	0x40020458
 800cc0c:	40020430 	.word	0x40020430
 800cc10:	40020080 	.word	0x40020080
 800cc14:	40020408 	.word	0x40020408

0800cc18 <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800cc18:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800cc1a:	6803      	ldr	r3, [r0, #0]
 800cc1c:	4a1a      	ldr	r2, [pc, #104]	; (800cc88 <UnSetupDMAInterrupts+0x70>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d018      	beq.n	800cc54 <UnSetupDMAInterrupts+0x3c>
 800cc22:	d81b      	bhi.n	800cc5c <UnSetupDMAInterrupts+0x44>
 800cc24:	4a19      	ldr	r2, [pc, #100]	; (800cc8c <UnSetupDMAInterrupts+0x74>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d00a      	beq.n	800cc40 <UnSetupDMAInterrupts+0x28>
 800cc2a:	d80d      	bhi.n	800cc48 <UnSetupDMAInterrupts+0x30>
 800cc2c:	4a18      	ldr	r2, [pc, #96]	; (800cc90 <UnSetupDMAInterrupts+0x78>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d103      	bne.n	800cc3a <UnSetupDMAInterrupts+0x22>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800cc32:	2009      	movs	r0, #9
 800cc34:	f004 fafc 	bl	8011230 <HAL_NVIC_DisableIRQ>
			break;
		
		default:
			break;
	}			
}
 800cc38:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800cc3a:	4a16      	ldr	r2, [pc, #88]	; (800cc94 <UnSetupDMAInterrupts+0x7c>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d1fb      	bne.n	800cc38 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800cc40:	200a      	movs	r0, #10
 800cc42:	f004 faf5 	bl	8011230 <HAL_NVIC_DisableIRQ>
			break;
 800cc46:	e7f7      	b.n	800cc38 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cc48:	4a13      	ldr	r2, [pc, #76]	; (800cc98 <UnSetupDMAInterrupts+0x80>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d002      	beq.n	800cc54 <UnSetupDMAInterrupts+0x3c>
 800cc4e:	4a13      	ldr	r2, [pc, #76]	; (800cc9c <UnSetupDMAInterrupts+0x84>)
 800cc50:	4293      	cmp	r3, r2
 800cc52:	d1f1      	bne.n	800cc38 <UnSetupDMAInterrupts+0x20>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800cc54:	200b      	movs	r0, #11
 800cc56:	f004 faeb 	bl	8011230 <HAL_NVIC_DisableIRQ>
}
 800cc5a:	e7ed      	b.n	800cc38 <UnSetupDMAInterrupts+0x20>
	switch ((uint32_t)hDMA->Instance)
 800cc5c:	4a10      	ldr	r2, [pc, #64]	; (800cca0 <UnSetupDMAInterrupts+0x88>)
 800cc5e:	4293      	cmp	r3, r2
 800cc60:	d0ee      	beq.n	800cc40 <UnSetupDMAInterrupts+0x28>
 800cc62:	d909      	bls.n	800cc78 <UnSetupDMAInterrupts+0x60>
 800cc64:	4a0f      	ldr	r2, [pc, #60]	; (800cca4 <UnSetupDMAInterrupts+0x8c>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d0f4      	beq.n	800cc54 <UnSetupDMAInterrupts+0x3c>
 800cc6a:	4a0f      	ldr	r2, [pc, #60]	; (800cca8 <UnSetupDMAInterrupts+0x90>)
 800cc6c:	4293      	cmp	r3, r2
 800cc6e:	d0f1      	beq.n	800cc54 <UnSetupDMAInterrupts+0x3c>
 800cc70:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <UnSetupDMAInterrupts+0x94>)
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d1e0      	bne.n	800cc38 <UnSetupDMAInterrupts+0x20>
 800cc76:	e7ed      	b.n	800cc54 <UnSetupDMAInterrupts+0x3c>
 800cc78:	4a0d      	ldr	r2, [pc, #52]	; (800ccb0 <UnSetupDMAInterrupts+0x98>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d0ea      	beq.n	800cc54 <UnSetupDMAInterrupts+0x3c>
 800cc7e:	4a0d      	ldr	r2, [pc, #52]	; (800ccb4 <UnSetupDMAInterrupts+0x9c>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d0dd      	beq.n	800cc40 <UnSetupDMAInterrupts+0x28>
 800cc84:	e7d8      	b.n	800cc38 <UnSetupDMAInterrupts+0x20>
 800cc86:	46c0      	nop			; (mov r8, r8)
 800cc88:	4002006c 	.word	0x4002006c
 800cc8c:	40020030 	.word	0x40020030
 800cc90:	40020008 	.word	0x40020008
 800cc94:	4002001c 	.word	0x4002001c
 800cc98:	40020044 	.word	0x40020044
 800cc9c:	40020058 	.word	0x40020058
 800cca0:	4002041c 	.word	0x4002041c
 800cca4:	40020444 	.word	0x40020444
 800cca8:	40020458 	.word	0x40020458
 800ccac:	40020430 	.word	0x40020430
 800ccb0:	40020080 	.word	0x40020080
 800ccb4:	40020408 	.word	0x40020408

0800ccb8 <DMA_MSG_TX_UnSetup>:
{	
 800ccb8:	b510      	push	{r4, lr}
 800ccba:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800ccbc:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800ccbe:	f7ff ffab 	bl	800cc18 <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800ccc2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800ccc8:	6623      	str	r3, [r4, #96]	; 0x60
}
 800ccca:	bd10      	pop	{r4, pc}

0800cccc <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cccc:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800ccce:	6803      	ldr	r3, [r0, #0]
 800ccd0:	4abd      	ldr	r2, [pc, #756]	; (800cfc8 <RemapAndLinkDMAtoUARTRx+0x2fc>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d02f      	beq.n	800cd36 <RemapAndLinkDMAtoUARTRx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800ccd6:	4abd      	ldr	r2, [pc, #756]	; (800cfcc <RemapAndLinkDMAtoUARTRx+0x300>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d100      	bne.n	800ccde <RemapAndLinkDMAtoUARTRx+0x12>
 800ccdc:	e087      	b.n	800cdee <RemapAndLinkDMAtoUARTRx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800ccde:	4abc      	ldr	r2, [pc, #752]	; (800cfd0 <RemapAndLinkDMAtoUARTRx+0x304>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d100      	bne.n	800cce6 <RemapAndLinkDMAtoUARTRx+0x1a>
 800cce4:	e0dc      	b.n	800cea0 <RemapAndLinkDMAtoUARTRx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800cce6:	4abb      	ldr	r2, [pc, #748]	; (800cfd4 <RemapAndLinkDMAtoUARTRx+0x308>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d000      	beq.n	800ccee <RemapAndLinkDMAtoUARTRx+0x22>
 800ccec:	e18a      	b.n	800d004 <RemapAndLinkDMAtoUARTRx+0x338>
 800ccee:	680b      	ldr	r3, [r1, #0]
 800ccf0:	4ab9      	ldr	r2, [pc, #740]	; (800cfd8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800ccf2:	4293      	cmp	r3, r2
 800ccf4:	d100      	bne.n	800ccf8 <RemapAndLinkDMAtoUARTRx+0x2c>
 800ccf6:	e12d      	b.n	800cf54 <RemapAndLinkDMAtoUARTRx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800ccf8:	4ab8      	ldr	r2, [pc, #736]	; (800cfdc <RemapAndLinkDMAtoUARTRx+0x310>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d100      	bne.n	800cd00 <RemapAndLinkDMAtoUARTRx+0x34>
 800ccfe:	e134      	b.n	800cf6a <RemapAndLinkDMAtoUARTRx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800cd00:	4ab7      	ldr	r2, [pc, #732]	; (800cfe0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d100      	bne.n	800cd08 <RemapAndLinkDMAtoUARTRx+0x3c>
 800cd06:	e13c      	b.n	800cf82 <RemapAndLinkDMAtoUARTRx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800cd08:	4ab6      	ldr	r2, [pc, #728]	; (800cfe4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d100      	bne.n	800cd10 <RemapAndLinkDMAtoUARTRx+0x44>
 800cd0e:	e144      	b.n	800cf9a <RemapAndLinkDMAtoUARTRx+0x2ce>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800cd10:	4ab5      	ldr	r2, [pc, #724]	; (800cfe8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d100      	bne.n	800cd18 <RemapAndLinkDMAtoUARTRx+0x4c>
 800cd16:	e14c      	b.n	800cfb2 <RemapAndLinkDMAtoUARTRx+0x2e6>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800cd18:	4ab4      	ldr	r2, [pc, #720]	; (800cfec <RemapAndLinkDMAtoUARTRx+0x320>)
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d11e      	bne.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800cd1e:	4ab4      	ldr	r2, [pc, #720]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cd20:	23a8      	movs	r3, #168	; 0xa8
 800cd22:	58d4      	ldr	r4, [r2, r3]
 800cd24:	4db3      	ldr	r5, [pc, #716]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cd26:	402c      	ands	r4, r5
 800cd28:	50d4      	str	r4, [r2, r3]
 800cd2a:	58d5      	ldr	r5, [r2, r3]
 800cd2c:	24b0      	movs	r4, #176	; 0xb0
 800cd2e:	0124      	lsls	r4, r4, #4
 800cd30:	432c      	orrs	r4, r5
 800cd32:	50d4      	str	r4, [r2, r3]
 800cd34:	e012      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800cd36:	680b      	ldr	r3, [r1, #0]
 800cd38:	4aa7      	ldr	r2, [pc, #668]	; (800cfd8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d011      	beq.n	800cd62 <RemapAndLinkDMAtoUARTRx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800cd3e:	4aa7      	ldr	r2, [pc, #668]	; (800cfdc <RemapAndLinkDMAtoUARTRx+0x310>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d019      	beq.n	800cd78 <RemapAndLinkDMAtoUARTRx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800cd44:	4aa6      	ldr	r2, [pc, #664]	; (800cfe0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d022      	beq.n	800cd90 <RemapAndLinkDMAtoUARTRx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800cd4a:	4aa6      	ldr	r2, [pc, #664]	; (800cfe4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d02b      	beq.n	800cda8 <RemapAndLinkDMAtoUARTRx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800cd50:	4aa5      	ldr	r2, [pc, #660]	; (800cfe8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d034      	beq.n	800cdc0 <RemapAndLinkDMAtoUARTRx+0xf4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800cd56:	4aa5      	ldr	r2, [pc, #660]	; (800cfec <RemapAndLinkDMAtoUARTRx+0x320>)
 800cd58:	4293      	cmp	r3, r2
 800cd5a:	d03c      	beq.n	800cdd6 <RemapAndLinkDMAtoUARTRx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800cd5c:	6641      	str	r1, [r0, #100]	; 0x64
 800cd5e:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cd60:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800cd62:	4aa5      	ldr	r2, [pc, #660]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd64:	23a8      	movs	r3, #168	; 0xa8
 800cd66:	58d4      	ldr	r4, [r2, r3]
 800cd68:	250f      	movs	r5, #15
 800cd6a:	43ac      	bics	r4, r5
 800cd6c:	50d4      	str	r4, [r2, r3]
 800cd6e:	58d4      	ldr	r4, [r2, r3]
 800cd70:	3d07      	subs	r5, #7
 800cd72:	432c      	orrs	r4, r5
 800cd74:	50d4      	str	r4, [r2, r3]
 800cd76:	e7f1      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800cd78:	4a9f      	ldr	r2, [pc, #636]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd7a:	23a8      	movs	r3, #168	; 0xa8
 800cd7c:	58d4      	ldr	r4, [r2, r3]
 800cd7e:	4d9d      	ldr	r5, [pc, #628]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cd80:	402c      	ands	r4, r5
 800cd82:	50d4      	str	r4, [r2, r3]
 800cd84:	58d5      	ldr	r5, [r2, r3]
 800cd86:	2480      	movs	r4, #128	; 0x80
 800cd88:	0124      	lsls	r4, r4, #4
 800cd8a:	432c      	orrs	r4, r5
 800cd8c:	50d4      	str	r4, [r2, r3]
 800cd8e:	e7e5      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800cd90:	4a99      	ldr	r2, [pc, #612]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cd92:	23a8      	movs	r3, #168	; 0xa8
 800cd94:	58d4      	ldr	r4, [r2, r3]
 800cd96:	4d99      	ldr	r5, [pc, #612]	; (800cffc <RemapAndLinkDMAtoUARTRx+0x330>)
 800cd98:	402c      	ands	r4, r5
 800cd9a:	50d4      	str	r4, [r2, r3]
 800cd9c:	58d5      	ldr	r5, [r2, r3]
 800cd9e:	2480      	movs	r4, #128	; 0x80
 800cda0:	0324      	lsls	r4, r4, #12
 800cda2:	432c      	orrs	r4, r5
 800cda4:	50d4      	str	r4, [r2, r3]
 800cda6:	e7d9      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800cda8:	4a93      	ldr	r2, [pc, #588]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cdaa:	23a8      	movs	r3, #168	; 0xa8
 800cdac:	58d4      	ldr	r4, [r2, r3]
 800cdae:	4d94      	ldr	r5, [pc, #592]	; (800d000 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cdb0:	402c      	ands	r4, r5
 800cdb2:	50d4      	str	r4, [r2, r3]
 800cdb4:	58d5      	ldr	r5, [r2, r3]
 800cdb6:	2480      	movs	r4, #128	; 0x80
 800cdb8:	0424      	lsls	r4, r4, #16
 800cdba:	432c      	orrs	r4, r5
 800cdbc:	50d4      	str	r4, [r2, r3]
 800cdbe:	e7cd      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800cdc0:	4a8b      	ldr	r2, [pc, #556]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cdc2:	23a8      	movs	r3, #168	; 0xa8
 800cdc4:	58d4      	ldr	r4, [r2, r3]
 800cdc6:	25f0      	movs	r5, #240	; 0xf0
 800cdc8:	43ac      	bics	r4, r5
 800cdca:	50d4      	str	r4, [r2, r3]
 800cdcc:	58d4      	ldr	r4, [r2, r3]
 800cdce:	3d70      	subs	r5, #112	; 0x70
 800cdd0:	432c      	orrs	r4, r5
 800cdd2:	50d4      	str	r4, [r2, r3]
 800cdd4:	e7c2      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800cdd6:	4a86      	ldr	r2, [pc, #536]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cdd8:	23a8      	movs	r3, #168	; 0xa8
 800cdda:	58d4      	ldr	r4, [r2, r3]
 800cddc:	4d85      	ldr	r5, [pc, #532]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cdde:	402c      	ands	r4, r5
 800cde0:	50d4      	str	r4, [r2, r3]
 800cde2:	58d5      	ldr	r5, [r2, r3]
 800cde4:	2480      	movs	r4, #128	; 0x80
 800cde6:	0124      	lsls	r4, r4, #4
 800cde8:	432c      	orrs	r4, r5
 800cdea:	50d4      	str	r4, [r2, r3]
 800cdec:	e7b6      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800cdee:	680b      	ldr	r3, [r1, #0]
 800cdf0:	4a79      	ldr	r2, [pc, #484]	; (800cfd8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d01a      	beq.n	800ce2c <RemapAndLinkDMAtoUARTRx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800cdf6:	4a79      	ldr	r2, [pc, #484]	; (800cfdc <RemapAndLinkDMAtoUARTRx+0x310>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d022      	beq.n	800ce42 <RemapAndLinkDMAtoUARTRx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800cdfc:	4a78      	ldr	r2, [pc, #480]	; (800cfe0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d02b      	beq.n	800ce5a <RemapAndLinkDMAtoUARTRx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800ce02:	4a78      	ldr	r2, [pc, #480]	; (800cfe4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d034      	beq.n	800ce72 <RemapAndLinkDMAtoUARTRx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800ce08:	4a77      	ldr	r2, [pc, #476]	; (800cfe8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d03d      	beq.n	800ce8a <RemapAndLinkDMAtoUARTRx+0x1be>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800ce0e:	4a77      	ldr	r2, [pc, #476]	; (800cfec <RemapAndLinkDMAtoUARTRx+0x320>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d1a3      	bne.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800ce14:	4a76      	ldr	r2, [pc, #472]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce16:	23a8      	movs	r3, #168	; 0xa8
 800ce18:	58d4      	ldr	r4, [r2, r3]
 800ce1a:	4d76      	ldr	r5, [pc, #472]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce1c:	402c      	ands	r4, r5
 800ce1e:	50d4      	str	r4, [r2, r3]
 800ce20:	58d5      	ldr	r5, [r2, r3]
 800ce22:	2490      	movs	r4, #144	; 0x90
 800ce24:	0124      	lsls	r4, r4, #4
 800ce26:	432c      	orrs	r4, r5
 800ce28:	50d4      	str	r4, [r2, r3]
 800ce2a:	e797      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800ce2c:	4a72      	ldr	r2, [pc, #456]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce2e:	23a8      	movs	r3, #168	; 0xa8
 800ce30:	58d4      	ldr	r4, [r2, r3]
 800ce32:	250f      	movs	r5, #15
 800ce34:	43ac      	bics	r4, r5
 800ce36:	50d4      	str	r4, [r2, r3]
 800ce38:	58d4      	ldr	r4, [r2, r3]
 800ce3a:	3d06      	subs	r5, #6
 800ce3c:	432c      	orrs	r4, r5
 800ce3e:	50d4      	str	r4, [r2, r3]
 800ce40:	e78c      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800ce42:	4a6d      	ldr	r2, [pc, #436]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce44:	23a8      	movs	r3, #168	; 0xa8
 800ce46:	58d4      	ldr	r4, [r2, r3]
 800ce48:	4d6a      	ldr	r5, [pc, #424]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ce4a:	402c      	ands	r4, r5
 800ce4c:	50d4      	str	r4, [r2, r3]
 800ce4e:	58d5      	ldr	r5, [r2, r3]
 800ce50:	2490      	movs	r4, #144	; 0x90
 800ce52:	0124      	lsls	r4, r4, #4
 800ce54:	432c      	orrs	r4, r5
 800ce56:	50d4      	str	r4, [r2, r3]
 800ce58:	e780      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800ce5a:	4a67      	ldr	r2, [pc, #412]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce5c:	23a8      	movs	r3, #168	; 0xa8
 800ce5e:	58d4      	ldr	r4, [r2, r3]
 800ce60:	4d66      	ldr	r5, [pc, #408]	; (800cffc <RemapAndLinkDMAtoUARTRx+0x330>)
 800ce62:	402c      	ands	r4, r5
 800ce64:	50d4      	str	r4, [r2, r3]
 800ce66:	58d5      	ldr	r5, [r2, r3]
 800ce68:	2490      	movs	r4, #144	; 0x90
 800ce6a:	0324      	lsls	r4, r4, #12
 800ce6c:	432c      	orrs	r4, r5
 800ce6e:	50d4      	str	r4, [r2, r3]
 800ce70:	e774      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800ce72:	4a61      	ldr	r2, [pc, #388]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800ce74:	23a8      	movs	r3, #168	; 0xa8
 800ce76:	58d4      	ldr	r4, [r2, r3]
 800ce78:	4d61      	ldr	r5, [pc, #388]	; (800d000 <RemapAndLinkDMAtoUARTRx+0x334>)
 800ce7a:	402c      	ands	r4, r5
 800ce7c:	50d4      	str	r4, [r2, r3]
 800ce7e:	58d5      	ldr	r5, [r2, r3]
 800ce80:	2490      	movs	r4, #144	; 0x90
 800ce82:	0424      	lsls	r4, r4, #16
 800ce84:	432c      	orrs	r4, r5
 800ce86:	50d4      	str	r4, [r2, r3]
 800ce88:	e768      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800ce8a:	4a59      	ldr	r2, [pc, #356]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ce8c:	23a8      	movs	r3, #168	; 0xa8
 800ce8e:	58d4      	ldr	r4, [r2, r3]
 800ce90:	25f0      	movs	r5, #240	; 0xf0
 800ce92:	43ac      	bics	r4, r5
 800ce94:	50d4      	str	r4, [r2, r3]
 800ce96:	58d4      	ldr	r4, [r2, r3]
 800ce98:	3d60      	subs	r5, #96	; 0x60
 800ce9a:	432c      	orrs	r4, r5
 800ce9c:	50d4      	str	r4, [r2, r3]
 800ce9e:	e75d      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800cea0:	680b      	ldr	r3, [r1, #0]
 800cea2:	4a4d      	ldr	r2, [pc, #308]	; (800cfd8 <RemapAndLinkDMAtoUARTRx+0x30c>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d01b      	beq.n	800cee0 <RemapAndLinkDMAtoUARTRx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800cea8:	4a4c      	ldr	r2, [pc, #304]	; (800cfdc <RemapAndLinkDMAtoUARTRx+0x310>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d023      	beq.n	800cef6 <RemapAndLinkDMAtoUARTRx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800ceae:	4a4c      	ldr	r2, [pc, #304]	; (800cfe0 <RemapAndLinkDMAtoUARTRx+0x314>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d02c      	beq.n	800cf0e <RemapAndLinkDMAtoUARTRx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800ceb4:	4a4b      	ldr	r2, [pc, #300]	; (800cfe4 <RemapAndLinkDMAtoUARTRx+0x318>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d035      	beq.n	800cf26 <RemapAndLinkDMAtoUARTRx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800ceba:	4a4b      	ldr	r2, [pc, #300]	; (800cfe8 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800cebc:	4293      	cmp	r3, r2
 800cebe:	d03e      	beq.n	800cf3e <RemapAndLinkDMAtoUARTRx+0x272>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800cec0:	4a4a      	ldr	r2, [pc, #296]	; (800cfec <RemapAndLinkDMAtoUARTRx+0x320>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d000      	beq.n	800cec8 <RemapAndLinkDMAtoUARTRx+0x1fc>
 800cec6:	e749      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800cec8:	4a49      	ldr	r2, [pc, #292]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800ceca:	23a8      	movs	r3, #168	; 0xa8
 800cecc:	58d4      	ldr	r4, [r2, r3]
 800cece:	4d49      	ldr	r5, [pc, #292]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800ced0:	402c      	ands	r4, r5
 800ced2:	50d4      	str	r4, [r2, r3]
 800ced4:	58d5      	ldr	r5, [r2, r3]
 800ced6:	24a0      	movs	r4, #160	; 0xa0
 800ced8:	0124      	lsls	r4, r4, #4
 800ceda:	432c      	orrs	r4, r5
 800cedc:	50d4      	str	r4, [r2, r3]
 800cede:	e73d      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800cee0:	4a45      	ldr	r2, [pc, #276]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cee2:	23a8      	movs	r3, #168	; 0xa8
 800cee4:	58d4      	ldr	r4, [r2, r3]
 800cee6:	250f      	movs	r5, #15
 800cee8:	43ac      	bics	r4, r5
 800ceea:	50d4      	str	r4, [r2, r3]
 800ceec:	58d4      	ldr	r4, [r2, r3]
 800ceee:	3d05      	subs	r5, #5
 800cef0:	432c      	orrs	r4, r5
 800cef2:	50d4      	str	r4, [r2, r3]
 800cef4:	e732      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800cef6:	4a40      	ldr	r2, [pc, #256]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cef8:	23a8      	movs	r3, #168	; 0xa8
 800cefa:	58d4      	ldr	r4, [r2, r3]
 800cefc:	4d3d      	ldr	r5, [pc, #244]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cefe:	402c      	ands	r4, r5
 800cf00:	50d4      	str	r4, [r2, r3]
 800cf02:	58d5      	ldr	r5, [r2, r3]
 800cf04:	24a0      	movs	r4, #160	; 0xa0
 800cf06:	0124      	lsls	r4, r4, #4
 800cf08:	432c      	orrs	r4, r5
 800cf0a:	50d4      	str	r4, [r2, r3]
 800cf0c:	e726      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800cf0e:	4a3a      	ldr	r2, [pc, #232]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf10:	23a8      	movs	r3, #168	; 0xa8
 800cf12:	58d4      	ldr	r4, [r2, r3]
 800cf14:	4d39      	ldr	r5, [pc, #228]	; (800cffc <RemapAndLinkDMAtoUARTRx+0x330>)
 800cf16:	402c      	ands	r4, r5
 800cf18:	50d4      	str	r4, [r2, r3]
 800cf1a:	58d5      	ldr	r5, [r2, r3]
 800cf1c:	24a0      	movs	r4, #160	; 0xa0
 800cf1e:	0324      	lsls	r4, r4, #12
 800cf20:	432c      	orrs	r4, r5
 800cf22:	50d4      	str	r4, [r2, r3]
 800cf24:	e71a      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800cf26:	4a34      	ldr	r2, [pc, #208]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf28:	23a8      	movs	r3, #168	; 0xa8
 800cf2a:	58d4      	ldr	r4, [r2, r3]
 800cf2c:	4d34      	ldr	r5, [pc, #208]	; (800d000 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cf2e:	402c      	ands	r4, r5
 800cf30:	50d4      	str	r4, [r2, r3]
 800cf32:	58d5      	ldr	r5, [r2, r3]
 800cf34:	24a0      	movs	r4, #160	; 0xa0
 800cf36:	0424      	lsls	r4, r4, #16
 800cf38:	432c      	orrs	r4, r5
 800cf3a:	50d4      	str	r4, [r2, r3]
 800cf3c:	e70e      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800cf3e:	4a2c      	ldr	r2, [pc, #176]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cf40:	23a8      	movs	r3, #168	; 0xa8
 800cf42:	58d4      	ldr	r4, [r2, r3]
 800cf44:	25f0      	movs	r5, #240	; 0xf0
 800cf46:	43ac      	bics	r4, r5
 800cf48:	50d4      	str	r4, [r2, r3]
 800cf4a:	58d4      	ldr	r4, [r2, r3]
 800cf4c:	3d50      	subs	r5, #80	; 0x50
 800cf4e:	432c      	orrs	r4, r5
 800cf50:	50d4      	str	r4, [r2, r3]
 800cf52:	e703      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800cf54:	4a28      	ldr	r2, [pc, #160]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf56:	23a8      	movs	r3, #168	; 0xa8
 800cf58:	58d4      	ldr	r4, [r2, r3]
 800cf5a:	250f      	movs	r5, #15
 800cf5c:	43ac      	bics	r4, r5
 800cf5e:	50d4      	str	r4, [r2, r3]
 800cf60:	58d4      	ldr	r4, [r2, r3]
 800cf62:	3d04      	subs	r5, #4
 800cf64:	432c      	orrs	r4, r5
 800cf66:	50d4      	str	r4, [r2, r3]
 800cf68:	e6f8      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800cf6a:	4a23      	ldr	r2, [pc, #140]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf6c:	23a8      	movs	r3, #168	; 0xa8
 800cf6e:	58d4      	ldr	r4, [r2, r3]
 800cf70:	4d20      	ldr	r5, [pc, #128]	; (800cff4 <RemapAndLinkDMAtoUARTRx+0x328>)
 800cf72:	402c      	ands	r4, r5
 800cf74:	50d4      	str	r4, [r2, r3]
 800cf76:	58d5      	ldr	r5, [r2, r3]
 800cf78:	24b0      	movs	r4, #176	; 0xb0
 800cf7a:	0124      	lsls	r4, r4, #4
 800cf7c:	432c      	orrs	r4, r5
 800cf7e:	50d4      	str	r4, [r2, r3]
 800cf80:	e6ec      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800cf82:	4a1d      	ldr	r2, [pc, #116]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf84:	23a8      	movs	r3, #168	; 0xa8
 800cf86:	58d4      	ldr	r4, [r2, r3]
 800cf88:	4d1c      	ldr	r5, [pc, #112]	; (800cffc <RemapAndLinkDMAtoUARTRx+0x330>)
 800cf8a:	402c      	ands	r4, r5
 800cf8c:	50d4      	str	r4, [r2, r3]
 800cf8e:	58d5      	ldr	r5, [r2, r3]
 800cf90:	24b0      	movs	r4, #176	; 0xb0
 800cf92:	0324      	lsls	r4, r4, #12
 800cf94:	432c      	orrs	r4, r5
 800cf96:	50d4      	str	r4, [r2, r3]
 800cf98:	e6e0      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800cf9a:	4a17      	ldr	r2, [pc, #92]	; (800cff8 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800cf9c:	23a8      	movs	r3, #168	; 0xa8
 800cf9e:	58d4      	ldr	r4, [r2, r3]
 800cfa0:	4d17      	ldr	r5, [pc, #92]	; (800d000 <RemapAndLinkDMAtoUARTRx+0x334>)
 800cfa2:	402c      	ands	r4, r5
 800cfa4:	50d4      	str	r4, [r2, r3]
 800cfa6:	58d5      	ldr	r5, [r2, r3]
 800cfa8:	24b0      	movs	r4, #176	; 0xb0
 800cfaa:	0424      	lsls	r4, r4, #16
 800cfac:	432c      	orrs	r4, r5
 800cfae:	50d4      	str	r4, [r2, r3]
 800cfb0:	e6d4      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800cfb2:	4a0f      	ldr	r2, [pc, #60]	; (800cff0 <RemapAndLinkDMAtoUARTRx+0x324>)
 800cfb4:	23a8      	movs	r3, #168	; 0xa8
 800cfb6:	58d4      	ldr	r4, [r2, r3]
 800cfb8:	25f0      	movs	r5, #240	; 0xf0
 800cfba:	43ac      	bics	r4, r5
 800cfbc:	50d4      	str	r4, [r2, r3]
 800cfbe:	58d4      	ldr	r4, [r2, r3]
 800cfc0:	3d40      	subs	r5, #64	; 0x40
 800cfc2:	432c      	orrs	r4, r5
 800cfc4:	50d4      	str	r4, [r2, r3]
 800cfc6:	e6c9      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
 800cfc8:	40013800 	.word	0x40013800
 800cfcc:	40004400 	.word	0x40004400
 800cfd0:	40004800 	.word	0x40004800
 800cfd4:	40004c00 	.word	0x40004c00
 800cfd8:	40020008 	.word	0x40020008
 800cfdc:	40020030 	.word	0x40020030
 800cfe0:	40020058 	.word	0x40020058
 800cfe4:	4002006c 	.word	0x4002006c
 800cfe8:	4002041c 	.word	0x4002041c
 800cfec:	40020430 	.word	0x40020430
 800cff0:	40020400 	.word	0x40020400
 800cff4:	fffff0ff 	.word	0xfffff0ff
 800cff8:	40020000 	.word	0x40020000
 800cffc:	fff0ffff 	.word	0xfff0ffff
 800d000:	ff0fffff 	.word	0xff0fffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800d004:	4ab9      	ldr	r2, [pc, #740]	; (800d2ec <RemapAndLinkDMAtoUARTRx+0x620>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d159      	bne.n	800d0be <RemapAndLinkDMAtoUARTRx+0x3f2>
 800d00a:	680b      	ldr	r3, [r1, #0]
 800d00c:	4ab8      	ldr	r2, [pc, #736]	; (800d2f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d01b      	beq.n	800d04a <RemapAndLinkDMAtoUARTRx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800d012:	4ab8      	ldr	r2, [pc, #736]	; (800d2f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d023      	beq.n	800d060 <RemapAndLinkDMAtoUARTRx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800d018:	4ab7      	ldr	r2, [pc, #732]	; (800d2f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d02c      	beq.n	800d078 <RemapAndLinkDMAtoUARTRx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800d01e:	4ab7      	ldr	r2, [pc, #732]	; (800d2fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d020:	4293      	cmp	r3, r2
 800d022:	d035      	beq.n	800d090 <RemapAndLinkDMAtoUARTRx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800d024:	4ab6      	ldr	r2, [pc, #728]	; (800d300 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d03e      	beq.n	800d0a8 <RemapAndLinkDMAtoUARTRx+0x3dc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800d02a:	4ab6      	ldr	r2, [pc, #728]	; (800d304 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d02c:	4293      	cmp	r3, r2
 800d02e:	d000      	beq.n	800d032 <RemapAndLinkDMAtoUARTRx+0x366>
 800d030:	e694      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800d032:	4ab5      	ldr	r2, [pc, #724]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d034:	23a8      	movs	r3, #168	; 0xa8
 800d036:	58d4      	ldr	r4, [r2, r3]
 800d038:	4db4      	ldr	r5, [pc, #720]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d03a:	402c      	ands	r4, r5
 800d03c:	50d4      	str	r4, [r2, r3]
 800d03e:	58d5      	ldr	r5, [r2, r3]
 800d040:	24c0      	movs	r4, #192	; 0xc0
 800d042:	0124      	lsls	r4, r4, #4
 800d044:	432c      	orrs	r4, r5
 800d046:	50d4      	str	r4, [r2, r3]
 800d048:	e688      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800d04a:	4ab1      	ldr	r2, [pc, #708]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d04c:	23a8      	movs	r3, #168	; 0xa8
 800d04e:	58d4      	ldr	r4, [r2, r3]
 800d050:	250f      	movs	r5, #15
 800d052:	43ac      	bics	r4, r5
 800d054:	50d4      	str	r4, [r2, r3]
 800d056:	58d4      	ldr	r4, [r2, r3]
 800d058:	3d03      	subs	r5, #3
 800d05a:	432c      	orrs	r4, r5
 800d05c:	50d4      	str	r4, [r2, r3]
 800d05e:	e67d      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800d060:	4aab      	ldr	r2, [pc, #684]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d062:	23a8      	movs	r3, #168	; 0xa8
 800d064:	58d4      	ldr	r4, [r2, r3]
 800d066:	4da9      	ldr	r5, [pc, #676]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d068:	402c      	ands	r4, r5
 800d06a:	50d4      	str	r4, [r2, r3]
 800d06c:	58d5      	ldr	r5, [r2, r3]
 800d06e:	24c0      	movs	r4, #192	; 0xc0
 800d070:	0124      	lsls	r4, r4, #4
 800d072:	432c      	orrs	r4, r5
 800d074:	50d4      	str	r4, [r2, r3]
 800d076:	e671      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800d078:	4aa5      	ldr	r2, [pc, #660]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d07a:	23a8      	movs	r3, #168	; 0xa8
 800d07c:	58d4      	ldr	r4, [r2, r3]
 800d07e:	4da5      	ldr	r5, [pc, #660]	; (800d314 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d080:	402c      	ands	r4, r5
 800d082:	50d4      	str	r4, [r2, r3]
 800d084:	58d5      	ldr	r5, [r2, r3]
 800d086:	24c0      	movs	r4, #192	; 0xc0
 800d088:	0324      	lsls	r4, r4, #12
 800d08a:	432c      	orrs	r4, r5
 800d08c:	50d4      	str	r4, [r2, r3]
 800d08e:	e665      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800d090:	4a9f      	ldr	r2, [pc, #636]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d092:	23a8      	movs	r3, #168	; 0xa8
 800d094:	58d4      	ldr	r4, [r2, r3]
 800d096:	4da0      	ldr	r5, [pc, #640]	; (800d318 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d098:	402c      	ands	r4, r5
 800d09a:	50d4      	str	r4, [r2, r3]
 800d09c:	58d5      	ldr	r5, [r2, r3]
 800d09e:	24c0      	movs	r4, #192	; 0xc0
 800d0a0:	0424      	lsls	r4, r4, #16
 800d0a2:	432c      	orrs	r4, r5
 800d0a4:	50d4      	str	r4, [r2, r3]
 800d0a6:	e659      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800d0a8:	4a97      	ldr	r2, [pc, #604]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d0aa:	23a8      	movs	r3, #168	; 0xa8
 800d0ac:	58d4      	ldr	r4, [r2, r3]
 800d0ae:	25f0      	movs	r5, #240	; 0xf0
 800d0b0:	43ac      	bics	r4, r5
 800d0b2:	50d4      	str	r4, [r2, r3]
 800d0b4:	58d4      	ldr	r4, [r2, r3]
 800d0b6:	3d30      	subs	r5, #48	; 0x30
 800d0b8:	432c      	orrs	r4, r5
 800d0ba:	50d4      	str	r4, [r2, r3]
 800d0bc:	e64e      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800d0be:	4a97      	ldr	r2, [pc, #604]	; (800d31c <RemapAndLinkDMAtoUARTRx+0x650>)
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d159      	bne.n	800d178 <RemapAndLinkDMAtoUARTRx+0x4ac>
 800d0c4:	680b      	ldr	r3, [r1, #0]
 800d0c6:	4a8a      	ldr	r2, [pc, #552]	; (800d2f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	d01b      	beq.n	800d104 <RemapAndLinkDMAtoUARTRx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800d0cc:	4a89      	ldr	r2, [pc, #548]	; (800d2f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d023      	beq.n	800d11a <RemapAndLinkDMAtoUARTRx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800d0d2:	4a89      	ldr	r2, [pc, #548]	; (800d2f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d02c      	beq.n	800d132 <RemapAndLinkDMAtoUARTRx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800d0d8:	4a88      	ldr	r2, [pc, #544]	; (800d2fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d035      	beq.n	800d14a <RemapAndLinkDMAtoUARTRx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800d0de:	4a88      	ldr	r2, [pc, #544]	; (800d300 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d0e0:	4293      	cmp	r3, r2
 800d0e2:	d03e      	beq.n	800d162 <RemapAndLinkDMAtoUARTRx+0x496>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800d0e4:	4a87      	ldr	r2, [pc, #540]	; (800d304 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d000      	beq.n	800d0ec <RemapAndLinkDMAtoUARTRx+0x420>
 800d0ea:	e637      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800d0ec:	4a86      	ldr	r2, [pc, #536]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d0ee:	23a8      	movs	r3, #168	; 0xa8
 800d0f0:	58d4      	ldr	r4, [r2, r3]
 800d0f2:	4d86      	ldr	r5, [pc, #536]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d0f4:	402c      	ands	r4, r5
 800d0f6:	50d4      	str	r4, [r2, r3]
 800d0f8:	58d5      	ldr	r5, [r2, r3]
 800d0fa:	24d0      	movs	r4, #208	; 0xd0
 800d0fc:	0124      	lsls	r4, r4, #4
 800d0fe:	432c      	orrs	r4, r5
 800d100:	50d4      	str	r4, [r2, r3]
 800d102:	e62b      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800d104:	4a82      	ldr	r2, [pc, #520]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d106:	23a8      	movs	r3, #168	; 0xa8
 800d108:	58d4      	ldr	r4, [r2, r3]
 800d10a:	250f      	movs	r5, #15
 800d10c:	43ac      	bics	r4, r5
 800d10e:	50d4      	str	r4, [r2, r3]
 800d110:	58d4      	ldr	r4, [r2, r3]
 800d112:	3d02      	subs	r5, #2
 800d114:	432c      	orrs	r4, r5
 800d116:	50d4      	str	r4, [r2, r3]
 800d118:	e620      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800d11a:	4a7d      	ldr	r2, [pc, #500]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d11c:	23a8      	movs	r3, #168	; 0xa8
 800d11e:	58d4      	ldr	r4, [r2, r3]
 800d120:	4d7a      	ldr	r5, [pc, #488]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d122:	402c      	ands	r4, r5
 800d124:	50d4      	str	r4, [r2, r3]
 800d126:	58d5      	ldr	r5, [r2, r3]
 800d128:	24d0      	movs	r4, #208	; 0xd0
 800d12a:	0124      	lsls	r4, r4, #4
 800d12c:	432c      	orrs	r4, r5
 800d12e:	50d4      	str	r4, [r2, r3]
 800d130:	e614      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800d132:	4a77      	ldr	r2, [pc, #476]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d134:	23a8      	movs	r3, #168	; 0xa8
 800d136:	58d4      	ldr	r4, [r2, r3]
 800d138:	4d76      	ldr	r5, [pc, #472]	; (800d314 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d13a:	402c      	ands	r4, r5
 800d13c:	50d4      	str	r4, [r2, r3]
 800d13e:	58d5      	ldr	r5, [r2, r3]
 800d140:	24d0      	movs	r4, #208	; 0xd0
 800d142:	0324      	lsls	r4, r4, #12
 800d144:	432c      	orrs	r4, r5
 800d146:	50d4      	str	r4, [r2, r3]
 800d148:	e608      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800d14a:	4a71      	ldr	r2, [pc, #452]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d14c:	23a8      	movs	r3, #168	; 0xa8
 800d14e:	58d4      	ldr	r4, [r2, r3]
 800d150:	4d71      	ldr	r5, [pc, #452]	; (800d318 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d152:	402c      	ands	r4, r5
 800d154:	50d4      	str	r4, [r2, r3]
 800d156:	58d5      	ldr	r5, [r2, r3]
 800d158:	24d0      	movs	r4, #208	; 0xd0
 800d15a:	0424      	lsls	r4, r4, #16
 800d15c:	432c      	orrs	r4, r5
 800d15e:	50d4      	str	r4, [r2, r3]
 800d160:	e5fc      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800d162:	4a69      	ldr	r2, [pc, #420]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d164:	23a8      	movs	r3, #168	; 0xa8
 800d166:	58d4      	ldr	r4, [r2, r3]
 800d168:	25f0      	movs	r5, #240	; 0xf0
 800d16a:	43ac      	bics	r4, r5
 800d16c:	50d4      	str	r4, [r2, r3]
 800d16e:	58d4      	ldr	r4, [r2, r3]
 800d170:	3d20      	subs	r5, #32
 800d172:	432c      	orrs	r4, r5
 800d174:	50d4      	str	r4, [r2, r3]
 800d176:	e5f1      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800d178:	4a69      	ldr	r2, [pc, #420]	; (800d320 <RemapAndLinkDMAtoUARTRx+0x654>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d159      	bne.n	800d232 <RemapAndLinkDMAtoUARTRx+0x566>
 800d17e:	680b      	ldr	r3, [r1, #0]
 800d180:	4a5b      	ldr	r2, [pc, #364]	; (800d2f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d182:	4293      	cmp	r3, r2
 800d184:	d01b      	beq.n	800d1be <RemapAndLinkDMAtoUARTRx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800d186:	4a5b      	ldr	r2, [pc, #364]	; (800d2f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d023      	beq.n	800d1d4 <RemapAndLinkDMAtoUARTRx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800d18c:	4a5a      	ldr	r2, [pc, #360]	; (800d2f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d02c      	beq.n	800d1ec <RemapAndLinkDMAtoUARTRx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800d192:	4a5a      	ldr	r2, [pc, #360]	; (800d2fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d035      	beq.n	800d204 <RemapAndLinkDMAtoUARTRx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800d198:	4a59      	ldr	r2, [pc, #356]	; (800d300 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d03e      	beq.n	800d21c <RemapAndLinkDMAtoUARTRx+0x550>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800d19e:	4a59      	ldr	r2, [pc, #356]	; (800d304 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d000      	beq.n	800d1a6 <RemapAndLinkDMAtoUARTRx+0x4da>
 800d1a4:	e5da      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800d1a6:	4a58      	ldr	r2, [pc, #352]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d1a8:	23a8      	movs	r3, #168	; 0xa8
 800d1aa:	58d4      	ldr	r4, [r2, r3]
 800d1ac:	4d57      	ldr	r5, [pc, #348]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d1ae:	402c      	ands	r4, r5
 800d1b0:	50d4      	str	r4, [r2, r3]
 800d1b2:	58d5      	ldr	r5, [r2, r3]
 800d1b4:	24e0      	movs	r4, #224	; 0xe0
 800d1b6:	0124      	lsls	r4, r4, #4
 800d1b8:	432c      	orrs	r4, r5
 800d1ba:	50d4      	str	r4, [r2, r3]
 800d1bc:	e5ce      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800d1be:	4a54      	ldr	r2, [pc, #336]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d1c0:	23a8      	movs	r3, #168	; 0xa8
 800d1c2:	58d4      	ldr	r4, [r2, r3]
 800d1c4:	250f      	movs	r5, #15
 800d1c6:	43ac      	bics	r4, r5
 800d1c8:	50d4      	str	r4, [r2, r3]
 800d1ca:	58d4      	ldr	r4, [r2, r3]
 800d1cc:	3d01      	subs	r5, #1
 800d1ce:	432c      	orrs	r4, r5
 800d1d0:	50d4      	str	r4, [r2, r3]
 800d1d2:	e5c3      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800d1d4:	4a4e      	ldr	r2, [pc, #312]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d1d6:	23a8      	movs	r3, #168	; 0xa8
 800d1d8:	58d4      	ldr	r4, [r2, r3]
 800d1da:	4d4c      	ldr	r5, [pc, #304]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d1dc:	402c      	ands	r4, r5
 800d1de:	50d4      	str	r4, [r2, r3]
 800d1e0:	58d5      	ldr	r5, [r2, r3]
 800d1e2:	24e0      	movs	r4, #224	; 0xe0
 800d1e4:	0124      	lsls	r4, r4, #4
 800d1e6:	432c      	orrs	r4, r5
 800d1e8:	50d4      	str	r4, [r2, r3]
 800d1ea:	e5b7      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800d1ec:	4a48      	ldr	r2, [pc, #288]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d1ee:	23a8      	movs	r3, #168	; 0xa8
 800d1f0:	58d4      	ldr	r4, [r2, r3]
 800d1f2:	4d48      	ldr	r5, [pc, #288]	; (800d314 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d1f4:	402c      	ands	r4, r5
 800d1f6:	50d4      	str	r4, [r2, r3]
 800d1f8:	58d5      	ldr	r5, [r2, r3]
 800d1fa:	24e0      	movs	r4, #224	; 0xe0
 800d1fc:	0324      	lsls	r4, r4, #12
 800d1fe:	432c      	orrs	r4, r5
 800d200:	50d4      	str	r4, [r2, r3]
 800d202:	e5ab      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800d204:	4a42      	ldr	r2, [pc, #264]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d206:	23a8      	movs	r3, #168	; 0xa8
 800d208:	58d4      	ldr	r4, [r2, r3]
 800d20a:	4d43      	ldr	r5, [pc, #268]	; (800d318 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d20c:	402c      	ands	r4, r5
 800d20e:	50d4      	str	r4, [r2, r3]
 800d210:	58d5      	ldr	r5, [r2, r3]
 800d212:	24e0      	movs	r4, #224	; 0xe0
 800d214:	0424      	lsls	r4, r4, #16
 800d216:	432c      	orrs	r4, r5
 800d218:	50d4      	str	r4, [r2, r3]
 800d21a:	e59f      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800d21c:	4a3a      	ldr	r2, [pc, #232]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d21e:	23a8      	movs	r3, #168	; 0xa8
 800d220:	58d4      	ldr	r4, [r2, r3]
 800d222:	25f0      	movs	r5, #240	; 0xf0
 800d224:	43ac      	bics	r4, r5
 800d226:	50d4      	str	r4, [r2, r3]
 800d228:	58d4      	ldr	r4, [r2, r3]
 800d22a:	3d10      	subs	r5, #16
 800d22c:	432c      	orrs	r4, r5
 800d22e:	50d4      	str	r4, [r2, r3]
 800d230:	e594      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800d232:	4a3c      	ldr	r2, [pc, #240]	; (800d324 <RemapAndLinkDMAtoUARTRx+0x658>)
 800d234:	4293      	cmp	r3, r2
 800d236:	d000      	beq.n	800d23a <RemapAndLinkDMAtoUARTRx+0x56e>
 800d238:	e590      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
 800d23a:	680b      	ldr	r3, [r1, #0]
 800d23c:	4a2c      	ldr	r2, [pc, #176]	; (800d2f0 <RemapAndLinkDMAtoUARTRx+0x624>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d01b      	beq.n	800d27a <RemapAndLinkDMAtoUARTRx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800d242:	4a2c      	ldr	r2, [pc, #176]	; (800d2f4 <RemapAndLinkDMAtoUARTRx+0x628>)
 800d244:	4293      	cmp	r3, r2
 800d246:	d022      	beq.n	800d28e <RemapAndLinkDMAtoUARTRx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800d248:	4a2b      	ldr	r2, [pc, #172]	; (800d2f8 <RemapAndLinkDMAtoUARTRx+0x62c>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d02b      	beq.n	800d2a6 <RemapAndLinkDMAtoUARTRx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800d24e:	4a2b      	ldr	r2, [pc, #172]	; (800d2fc <RemapAndLinkDMAtoUARTRx+0x630>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d034      	beq.n	800d2be <RemapAndLinkDMAtoUARTRx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800d254:	4a2a      	ldr	r2, [pc, #168]	; (800d300 <RemapAndLinkDMAtoUARTRx+0x634>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d03d      	beq.n	800d2d6 <RemapAndLinkDMAtoUARTRx+0x60a>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800d25a:	4a2a      	ldr	r2, [pc, #168]	; (800d304 <RemapAndLinkDMAtoUARTRx+0x638>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d000      	beq.n	800d262 <RemapAndLinkDMAtoUARTRx+0x596>
 800d260:	e57c      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800d262:	4a29      	ldr	r2, [pc, #164]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d264:	23a8      	movs	r3, #168	; 0xa8
 800d266:	58d4      	ldr	r4, [r2, r3]
 800d268:	4d28      	ldr	r5, [pc, #160]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d26a:	402c      	ands	r4, r5
 800d26c:	50d4      	str	r4, [r2, r3]
 800d26e:	58d5      	ldr	r5, [r2, r3]
 800d270:	24f0      	movs	r4, #240	; 0xf0
 800d272:	0124      	lsls	r4, r4, #4
 800d274:	432c      	orrs	r4, r5
 800d276:	50d4      	str	r4, [r2, r3]
 800d278:	e570      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800d27a:	4a25      	ldr	r2, [pc, #148]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d27c:	23a8      	movs	r3, #168	; 0xa8
 800d27e:	58d5      	ldr	r5, [r2, r3]
 800d280:	260f      	movs	r6, #15
 800d282:	43b5      	bics	r5, r6
 800d284:	50d5      	str	r5, [r2, r3]
 800d286:	58d4      	ldr	r4, [r2, r3]
 800d288:	4334      	orrs	r4, r6
 800d28a:	50d4      	str	r4, [r2, r3]
 800d28c:	e566      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800d28e:	4a20      	ldr	r2, [pc, #128]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d290:	23a8      	movs	r3, #168	; 0xa8
 800d292:	58d4      	ldr	r4, [r2, r3]
 800d294:	4d1d      	ldr	r5, [pc, #116]	; (800d30c <RemapAndLinkDMAtoUARTRx+0x640>)
 800d296:	402c      	ands	r4, r5
 800d298:	50d4      	str	r4, [r2, r3]
 800d29a:	58d5      	ldr	r5, [r2, r3]
 800d29c:	24f0      	movs	r4, #240	; 0xf0
 800d29e:	0124      	lsls	r4, r4, #4
 800d2a0:	432c      	orrs	r4, r5
 800d2a2:	50d4      	str	r4, [r2, r3]
 800d2a4:	e55a      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800d2a6:	4a1a      	ldr	r2, [pc, #104]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2a8:	23a8      	movs	r3, #168	; 0xa8
 800d2aa:	58d4      	ldr	r4, [r2, r3]
 800d2ac:	4d19      	ldr	r5, [pc, #100]	; (800d314 <RemapAndLinkDMAtoUARTRx+0x648>)
 800d2ae:	402c      	ands	r4, r5
 800d2b0:	50d4      	str	r4, [r2, r3]
 800d2b2:	58d5      	ldr	r5, [r2, r3]
 800d2b4:	24f0      	movs	r4, #240	; 0xf0
 800d2b6:	0324      	lsls	r4, r4, #12
 800d2b8:	432c      	orrs	r4, r5
 800d2ba:	50d4      	str	r4, [r2, r3]
 800d2bc:	e54e      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800d2be:	4a14      	ldr	r2, [pc, #80]	; (800d310 <RemapAndLinkDMAtoUARTRx+0x644>)
 800d2c0:	23a8      	movs	r3, #168	; 0xa8
 800d2c2:	58d4      	ldr	r4, [r2, r3]
 800d2c4:	4d14      	ldr	r5, [pc, #80]	; (800d318 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800d2c6:	402c      	ands	r4, r5
 800d2c8:	50d4      	str	r4, [r2, r3]
 800d2ca:	58d5      	ldr	r5, [r2, r3]
 800d2cc:	24f0      	movs	r4, #240	; 0xf0
 800d2ce:	0424      	lsls	r4, r4, #16
 800d2d0:	432c      	orrs	r4, r5
 800d2d2:	50d4      	str	r4, [r2, r3]
 800d2d4:	e542      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800d2d6:	4a0c      	ldr	r2, [pc, #48]	; (800d308 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800d2d8:	23a8      	movs	r3, #168	; 0xa8
 800d2da:	58d5      	ldr	r5, [r2, r3]
 800d2dc:	26f0      	movs	r6, #240	; 0xf0
 800d2de:	43b5      	bics	r5, r6
 800d2e0:	50d5      	str	r5, [r2, r3]
 800d2e2:	58d4      	ldr	r4, [r2, r3]
 800d2e4:	4334      	orrs	r4, r6
 800d2e6:	50d4      	str	r4, [r2, r3]
 800d2e8:	e538      	b.n	800cd5c <RemapAndLinkDMAtoUARTRx+0x90>
 800d2ea:	46c0      	nop			; (mov r8, r8)
 800d2ec:	40005000 	.word	0x40005000
 800d2f0:	40020008 	.word	0x40020008
 800d2f4:	40020030 	.word	0x40020030
 800d2f8:	40020058 	.word	0x40020058
 800d2fc:	4002006c 	.word	0x4002006c
 800d300:	4002041c 	.word	0x4002041c
 800d304:	40020430 	.word	0x40020430
 800d308:	40020400 	.word	0x40020400
 800d30c:	fffff0ff 	.word	0xfffff0ff
 800d310:	40020000 	.word	0x40020000
 800d314:	fff0ffff 	.word	0xfff0ffff
 800d318:	ff0fffff 	.word	0xff0fffff
 800d31c:	40011400 	.word	0x40011400
 800d320:	40011800 	.word	0x40011800
 800d324:	40011c00 	.word	0x40011c00

0800d328 <DMA_MSG_RX_Setup>:
{	
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	0004      	movs	r4, r0
 800d32c:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800d32e:	f7ff fccd 	bl	800cccc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d332:	2100      	movs	r1, #0
 800d334:	0028      	movs	r0, r5
 800d336:	f7ff fc13 	bl	800cb60 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800d33a:	0020      	movs	r0, r4
 800d33c:	f7ff fb52 	bl	800c9e4 <GetPort>
 800d340:	3801      	subs	r0, #1
 800d342:	0041      	lsls	r1, r0, #1
 800d344:	1809      	adds	r1, r1, r0
 800d346:	0189      	lsls	r1, r1, #6
 800d348:	4803      	ldr	r0, [pc, #12]	; (800d358 <DMA_MSG_RX_Setup+0x30>)
 800d34a:	1809      	adds	r1, r1, r0
 800d34c:	22c0      	movs	r2, #192	; 0xc0
 800d34e:	0020      	movs	r0, r4
 800d350:	f006 fbfa 	bl	8013b48 <HAL_UART_Receive_DMA>
}
 800d354:	bd70      	pop	{r4, r5, r6, pc}
 800d356:	46c0      	nop			; (mov r8, r8)
 800d358:	20001348 	.word	0x20001348

0800d35c <SetupMessagingRxDMAs>:
{	
 800d35c:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800d35e:	4b1b      	ldr	r3, [pc, #108]	; (800d3cc <SetupMessagingRxDMAs+0x70>)
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d014      	beq.n	800d390 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800d366:	4b19      	ldr	r3, [pc, #100]	; (800d3cc <SetupMessagingRxDMAs+0x70>)
 800d368:	789b      	ldrb	r3, [r3, #2]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d015      	beq.n	800d39a <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800d36e:	4b17      	ldr	r3, [pc, #92]	; (800d3cc <SetupMessagingRxDMAs+0x70>)
 800d370:	78db      	ldrb	r3, [r3, #3]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d016      	beq.n	800d3a4 <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800d376:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <SetupMessagingRxDMAs+0x70>)
 800d378:	791b      	ldrb	r3, [r3, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d017      	beq.n	800d3ae <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800d37e:	4b13      	ldr	r3, [pc, #76]	; (800d3cc <SetupMessagingRxDMAs+0x70>)
 800d380:	795b      	ldrb	r3, [r3, #5]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d018      	beq.n	800d3b8 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800d386:	4b11      	ldr	r3, [pc, #68]	; (800d3cc <SetupMessagingRxDMAs+0x70>)
 800d388:	799b      	ldrb	r3, [r3, #6]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d019      	beq.n	800d3c2 <SetupMessagingRxDMAs+0x66>
}
 800d38e:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800d390:	490f      	ldr	r1, [pc, #60]	; (800d3d0 <SetupMessagingRxDMAs+0x74>)
 800d392:	4810      	ldr	r0, [pc, #64]	; (800d3d4 <SetupMessagingRxDMAs+0x78>)
 800d394:	f7ff ffc8 	bl	800d328 <DMA_MSG_RX_Setup>
 800d398:	e7e5      	b.n	800d366 <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800d39a:	490f      	ldr	r1, [pc, #60]	; (800d3d8 <SetupMessagingRxDMAs+0x7c>)
 800d39c:	480f      	ldr	r0, [pc, #60]	; (800d3dc <SetupMessagingRxDMAs+0x80>)
 800d39e:	f7ff ffc3 	bl	800d328 <DMA_MSG_RX_Setup>
 800d3a2:	e7e4      	b.n	800d36e <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800d3a4:	490e      	ldr	r1, [pc, #56]	; (800d3e0 <SetupMessagingRxDMAs+0x84>)
 800d3a6:	480f      	ldr	r0, [pc, #60]	; (800d3e4 <SetupMessagingRxDMAs+0x88>)
 800d3a8:	f7ff ffbe 	bl	800d328 <DMA_MSG_RX_Setup>
 800d3ac:	e7e3      	b.n	800d376 <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800d3ae:	490e      	ldr	r1, [pc, #56]	; (800d3e8 <SetupMessagingRxDMAs+0x8c>)
 800d3b0:	480e      	ldr	r0, [pc, #56]	; (800d3ec <SetupMessagingRxDMAs+0x90>)
 800d3b2:	f7ff ffb9 	bl	800d328 <DMA_MSG_RX_Setup>
 800d3b6:	e7e2      	b.n	800d37e <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800d3b8:	490d      	ldr	r1, [pc, #52]	; (800d3f0 <SetupMessagingRxDMAs+0x94>)
 800d3ba:	480e      	ldr	r0, [pc, #56]	; (800d3f4 <SetupMessagingRxDMAs+0x98>)
 800d3bc:	f7ff ffb4 	bl	800d328 <DMA_MSG_RX_Setup>
 800d3c0:	e7e1      	b.n	800d386 <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800d3c2:	490d      	ldr	r1, [pc, #52]	; (800d3f8 <SetupMessagingRxDMAs+0x9c>)
 800d3c4:	480d      	ldr	r0, [pc, #52]	; (800d3fc <SetupMessagingRxDMAs+0xa0>)
 800d3c6:	f7ff ffaf 	bl	800d328 <DMA_MSG_RX_Setup>
}
 800d3ca:	e7e0      	b.n	800d38e <SetupMessagingRxDMAs+0x32>
 800d3cc:	2000116c 	.word	0x2000116c
 800d3d0:	20001c24 	.word	0x20001c24
 800d3d4:	20007170 	.word	0x20007170
 800d3d8:	20001c5c 	.word	0x20001c5c
 800d3dc:	200071e4 	.word	0x200071e4
 800d3e0:	20001c94 	.word	0x20001c94
 800d3e4:	200070f4 	.word	0x200070f4
 800d3e8:	20001ccc 	.word	0x20001ccc
 800d3ec:	20006f8c 	.word	0x20006f8c
 800d3f0:	20001d04 	.word	0x20001d04
 800d3f4:	2000707c 	.word	0x2000707c
 800d3f8:	20001d3c 	.word	0x20001d3c
 800d3fc:	20007004 	.word	0x20007004

0800d400 <DMA_STREAM_Setup>:
{	
 800d400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d402:	0005      	movs	r5, r0
 800d404:	000f      	movs	r7, r1
 800d406:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800d408:	f7ff faec 	bl	800c9e4 <GetPort>
	hDMA = &streamDMA[port-1];
 800d40c:	3801      	subs	r0, #1
 800d40e:	00c4      	lsls	r4, r0, #3
 800d410:	1a24      	subs	r4, r4, r0
 800d412:	00e4      	lsls	r4, r4, #3
 800d414:	4809      	ldr	r0, [pc, #36]	; (800d43c <DMA_STREAM_Setup+0x3c>)
 800d416:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800d418:	0021      	movs	r1, r4
 800d41a:	0028      	movs	r0, r5
 800d41c:	f7ff fc56 	bl	800cccc <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800d420:	2101      	movs	r1, #1
 800d422:	0020      	movs	r0, r4
 800d424:	f7ff fb9c 	bl	800cb60 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800d428:	2369      	movs	r3, #105	; 0x69
 800d42a:	2201      	movs	r2, #1
 800d42c:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800d42e:	6839      	ldr	r1, [r7, #0]
 800d430:	3128      	adds	r1, #40	; 0x28
 800d432:	0032      	movs	r2, r6
 800d434:	0028      	movs	r0, r5
 800d436:	f006 fb87 	bl	8013b48 <HAL_UART_Receive_DMA>
}
 800d43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d43c:	20001e1c 	.word	0x20001e1c

0800d440 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800d440:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d442:	6803      	ldr	r3, [r0, #0]
 800d444:	4abd      	ldr	r2, [pc, #756]	; (800d73c <RemapAndLinkDMAtoUARTTx+0x2fc>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d02f      	beq.n	800d4aa <RemapAndLinkDMAtoUARTTx+0x6a>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d44a:	4abd      	ldr	r2, [pc, #756]	; (800d740 <RemapAndLinkDMAtoUARTTx+0x300>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d100      	bne.n	800d452 <RemapAndLinkDMAtoUARTTx+0x12>
 800d450:	e087      	b.n	800d562 <RemapAndLinkDMAtoUARTTx+0x122>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d452:	4abc      	ldr	r2, [pc, #752]	; (800d744 <RemapAndLinkDMAtoUARTTx+0x304>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d100      	bne.n	800d45a <RemapAndLinkDMAtoUARTTx+0x1a>
 800d458:	e0dc      	b.n	800d614 <RemapAndLinkDMAtoUARTTx+0x1d4>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800d45a:	4abb      	ldr	r2, [pc, #748]	; (800d748 <RemapAndLinkDMAtoUARTTx+0x308>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d000      	beq.n	800d462 <RemapAndLinkDMAtoUARTTx+0x22>
 800d460:	e18a      	b.n	800d778 <RemapAndLinkDMAtoUARTTx+0x338>
 800d462:	680b      	ldr	r3, [r1, #0]
 800d464:	4ab9      	ldr	r2, [pc, #740]	; (800d74c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d100      	bne.n	800d46c <RemapAndLinkDMAtoUARTTx+0x2c>
 800d46a:	e12d      	b.n	800d6c8 <RemapAndLinkDMAtoUARTTx+0x288>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800d46c:	4ab8      	ldr	r2, [pc, #736]	; (800d750 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d100      	bne.n	800d474 <RemapAndLinkDMAtoUARTTx+0x34>
 800d472:	e134      	b.n	800d6de <RemapAndLinkDMAtoUARTTx+0x29e>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800d474:	4ab7      	ldr	r2, [pc, #732]	; (800d754 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d100      	bne.n	800d47c <RemapAndLinkDMAtoUARTTx+0x3c>
 800d47a:	e13c      	b.n	800d6f6 <RemapAndLinkDMAtoUARTTx+0x2b6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800d47c:	4ab6      	ldr	r2, [pc, #728]	; (800d758 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d100      	bne.n	800d484 <RemapAndLinkDMAtoUARTTx+0x44>
 800d482:	e144      	b.n	800d70e <RemapAndLinkDMAtoUARTTx+0x2ce>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800d484:	4ab5      	ldr	r2, [pc, #724]	; (800d75c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d486:	4293      	cmp	r3, r2
 800d488:	d100      	bne.n	800d48c <RemapAndLinkDMAtoUARTTx+0x4c>
 800d48a:	e14b      	b.n	800d724 <RemapAndLinkDMAtoUARTTx+0x2e4>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800d48c:	4ab4      	ldr	r2, [pc, #720]	; (800d760 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d11e      	bne.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800d492:	4ab4      	ldr	r2, [pc, #720]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d494:	23a8      	movs	r3, #168	; 0xa8
 800d496:	58d4      	ldr	r4, [r2, r3]
 800d498:	4db3      	ldr	r5, [pc, #716]	; (800d768 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d49a:	402c      	ands	r4, r5
 800d49c:	50d4      	str	r4, [r2, r3]
 800d49e:	58d5      	ldr	r5, [r2, r3]
 800d4a0:	24b0      	movs	r4, #176	; 0xb0
 800d4a2:	0324      	lsls	r4, r4, #12
 800d4a4:	432c      	orrs	r4, r5
 800d4a6:	50d4      	str	r4, [r2, r3]
 800d4a8:	e012      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800d4aa:	680b      	ldr	r3, [r1, #0]
 800d4ac:	4aa7      	ldr	r2, [pc, #668]	; (800d74c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d011      	beq.n	800d4d6 <RemapAndLinkDMAtoUARTTx+0x96>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800d4b2:	4aa7      	ldr	r2, [pc, #668]	; (800d750 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d019      	beq.n	800d4ec <RemapAndLinkDMAtoUARTTx+0xac>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800d4b8:	4aa6      	ldr	r2, [pc, #664]	; (800d754 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d022      	beq.n	800d504 <RemapAndLinkDMAtoUARTTx+0xc4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800d4be:	4aa6      	ldr	r2, [pc, #664]	; (800d758 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d4c0:	4293      	cmp	r3, r2
 800d4c2:	d02b      	beq.n	800d51c <RemapAndLinkDMAtoUARTTx+0xdc>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800d4c4:	4aa5      	ldr	r2, [pc, #660]	; (800d75c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d033      	beq.n	800d532 <RemapAndLinkDMAtoUARTTx+0xf2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800d4ca:	4aa5      	ldr	r2, [pc, #660]	; (800d760 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d03c      	beq.n	800d54a <RemapAndLinkDMAtoUARTTx+0x10a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800d4d0:	6601      	str	r1, [r0, #96]	; 0x60
 800d4d2:	6248      	str	r0, [r1, #36]	; 0x24
}
 800d4d4:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800d4d6:	4aa5      	ldr	r2, [pc, #660]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d4d8:	23a8      	movs	r3, #168	; 0xa8
 800d4da:	58d4      	ldr	r4, [r2, r3]
 800d4dc:	25f0      	movs	r5, #240	; 0xf0
 800d4de:	43ac      	bics	r4, r5
 800d4e0:	50d4      	str	r4, [r2, r3]
 800d4e2:	58d4      	ldr	r4, [r2, r3]
 800d4e4:	3d70      	subs	r5, #112	; 0x70
 800d4e6:	432c      	orrs	r4, r5
 800d4e8:	50d4      	str	r4, [r2, r3]
 800d4ea:	e7f1      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800d4ec:	4a9f      	ldr	r2, [pc, #636]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d4ee:	23a8      	movs	r3, #168	; 0xa8
 800d4f0:	58d4      	ldr	r4, [r2, r3]
 800d4f2:	4d9f      	ldr	r5, [pc, #636]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d4f4:	402c      	ands	r4, r5
 800d4f6:	50d4      	str	r4, [r2, r3]
 800d4f8:	58d5      	ldr	r5, [r2, r3]
 800d4fa:	2480      	movs	r4, #128	; 0x80
 800d4fc:	0224      	lsls	r4, r4, #8
 800d4fe:	432c      	orrs	r4, r5
 800d500:	50d4      	str	r4, [r2, r3]
 800d502:	e7e5      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800d504:	4a99      	ldr	r2, [pc, #612]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d506:	23a8      	movs	r3, #168	; 0xa8
 800d508:	58d4      	ldr	r4, [r2, r3]
 800d50a:	4d9a      	ldr	r5, [pc, #616]	; (800d774 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d50c:	402c      	ands	r4, r5
 800d50e:	50d4      	str	r4, [r2, r3]
 800d510:	58d5      	ldr	r5, [r2, r3]
 800d512:	2480      	movs	r4, #128	; 0x80
 800d514:	0524      	lsls	r4, r4, #20
 800d516:	432c      	orrs	r4, r5
 800d518:	50d4      	str	r4, [r2, r3]
 800d51a:	e7d9      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800d51c:	4a91      	ldr	r2, [pc, #580]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d51e:	23a8      	movs	r3, #168	; 0xa8
 800d520:	58d4      	ldr	r4, [r2, r3]
 800d522:	250f      	movs	r5, #15
 800d524:	43ac      	bics	r4, r5
 800d526:	50d4      	str	r4, [r2, r3]
 800d528:	58d4      	ldr	r4, [r2, r3]
 800d52a:	3d07      	subs	r5, #7
 800d52c:	432c      	orrs	r4, r5
 800d52e:	50d4      	str	r4, [r2, r3]
 800d530:	e7ce      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800d532:	4a8c      	ldr	r2, [pc, #560]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d534:	23a8      	movs	r3, #168	; 0xa8
 800d536:	58d4      	ldr	r4, [r2, r3]
 800d538:	4d8d      	ldr	r5, [pc, #564]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d53a:	402c      	ands	r4, r5
 800d53c:	50d4      	str	r4, [r2, r3]
 800d53e:	58d5      	ldr	r5, [r2, r3]
 800d540:	2480      	movs	r4, #128	; 0x80
 800d542:	0224      	lsls	r4, r4, #8
 800d544:	432c      	orrs	r4, r5
 800d546:	50d4      	str	r4, [r2, r3]
 800d548:	e7c2      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800d54a:	4a86      	ldr	r2, [pc, #536]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d54c:	23a8      	movs	r3, #168	; 0xa8
 800d54e:	58d4      	ldr	r4, [r2, r3]
 800d550:	4d85      	ldr	r5, [pc, #532]	; (800d768 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d552:	402c      	ands	r4, r5
 800d554:	50d4      	str	r4, [r2, r3]
 800d556:	58d5      	ldr	r5, [r2, r3]
 800d558:	2480      	movs	r4, #128	; 0x80
 800d55a:	0324      	lsls	r4, r4, #12
 800d55c:	432c      	orrs	r4, r5
 800d55e:	50d4      	str	r4, [r2, r3]
 800d560:	e7b6      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800d562:	680b      	ldr	r3, [r1, #0]
 800d564:	4a79      	ldr	r2, [pc, #484]	; (800d74c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d01a      	beq.n	800d5a0 <RemapAndLinkDMAtoUARTTx+0x160>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800d56a:	4a79      	ldr	r2, [pc, #484]	; (800d750 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d56c:	4293      	cmp	r3, r2
 800d56e:	d022      	beq.n	800d5b6 <RemapAndLinkDMAtoUARTTx+0x176>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800d570:	4a78      	ldr	r2, [pc, #480]	; (800d754 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d02b      	beq.n	800d5ce <RemapAndLinkDMAtoUARTTx+0x18e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800d576:	4a78      	ldr	r2, [pc, #480]	; (800d758 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d034      	beq.n	800d5e6 <RemapAndLinkDMAtoUARTTx+0x1a6>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800d57c:	4a77      	ldr	r2, [pc, #476]	; (800d75c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d57e:	4293      	cmp	r3, r2
 800d580:	d03c      	beq.n	800d5fc <RemapAndLinkDMAtoUARTTx+0x1bc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800d582:	4a77      	ldr	r2, [pc, #476]	; (800d760 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d1a3      	bne.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800d588:	4a76      	ldr	r2, [pc, #472]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d58a:	23a8      	movs	r3, #168	; 0xa8
 800d58c:	58d4      	ldr	r4, [r2, r3]
 800d58e:	4d76      	ldr	r5, [pc, #472]	; (800d768 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d590:	402c      	ands	r4, r5
 800d592:	50d4      	str	r4, [r2, r3]
 800d594:	58d5      	ldr	r5, [r2, r3]
 800d596:	2490      	movs	r4, #144	; 0x90
 800d598:	0324      	lsls	r4, r4, #12
 800d59a:	432c      	orrs	r4, r5
 800d59c:	50d4      	str	r4, [r2, r3]
 800d59e:	e797      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800d5a0:	4a72      	ldr	r2, [pc, #456]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5a2:	23a8      	movs	r3, #168	; 0xa8
 800d5a4:	58d4      	ldr	r4, [r2, r3]
 800d5a6:	25f0      	movs	r5, #240	; 0xf0
 800d5a8:	43ac      	bics	r4, r5
 800d5aa:	50d4      	str	r4, [r2, r3]
 800d5ac:	58d4      	ldr	r4, [r2, r3]
 800d5ae:	3d60      	subs	r5, #96	; 0x60
 800d5b0:	432c      	orrs	r4, r5
 800d5b2:	50d4      	str	r4, [r2, r3]
 800d5b4:	e78c      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800d5b6:	4a6d      	ldr	r2, [pc, #436]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5b8:	23a8      	movs	r3, #168	; 0xa8
 800d5ba:	58d4      	ldr	r4, [r2, r3]
 800d5bc:	4d6c      	ldr	r5, [pc, #432]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d5be:	402c      	ands	r4, r5
 800d5c0:	50d4      	str	r4, [r2, r3]
 800d5c2:	58d5      	ldr	r5, [r2, r3]
 800d5c4:	2490      	movs	r4, #144	; 0x90
 800d5c6:	0224      	lsls	r4, r4, #8
 800d5c8:	432c      	orrs	r4, r5
 800d5ca:	50d4      	str	r4, [r2, r3]
 800d5cc:	e780      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800d5ce:	4a67      	ldr	r2, [pc, #412]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d5d0:	23a8      	movs	r3, #168	; 0xa8
 800d5d2:	58d4      	ldr	r4, [r2, r3]
 800d5d4:	4d67      	ldr	r5, [pc, #412]	; (800d774 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d5d6:	402c      	ands	r4, r5
 800d5d8:	50d4      	str	r4, [r2, r3]
 800d5da:	58d5      	ldr	r5, [r2, r3]
 800d5dc:	2490      	movs	r4, #144	; 0x90
 800d5de:	0524      	lsls	r4, r4, #20
 800d5e0:	432c      	orrs	r4, r5
 800d5e2:	50d4      	str	r4, [r2, r3]
 800d5e4:	e774      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800d5e6:	4a5f      	ldr	r2, [pc, #380]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d5e8:	23a8      	movs	r3, #168	; 0xa8
 800d5ea:	58d4      	ldr	r4, [r2, r3]
 800d5ec:	250f      	movs	r5, #15
 800d5ee:	43ac      	bics	r4, r5
 800d5f0:	50d4      	str	r4, [r2, r3]
 800d5f2:	58d4      	ldr	r4, [r2, r3]
 800d5f4:	3d06      	subs	r5, #6
 800d5f6:	432c      	orrs	r4, r5
 800d5f8:	50d4      	str	r4, [r2, r3]
 800d5fa:	e769      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800d5fc:	4a59      	ldr	r2, [pc, #356]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d5fe:	23a8      	movs	r3, #168	; 0xa8
 800d600:	58d4      	ldr	r4, [r2, r3]
 800d602:	4d5b      	ldr	r5, [pc, #364]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d604:	402c      	ands	r4, r5
 800d606:	50d4      	str	r4, [r2, r3]
 800d608:	58d5      	ldr	r5, [r2, r3]
 800d60a:	2490      	movs	r4, #144	; 0x90
 800d60c:	0224      	lsls	r4, r4, #8
 800d60e:	432c      	orrs	r4, r5
 800d610:	50d4      	str	r4, [r2, r3]
 800d612:	e75d      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800d614:	680b      	ldr	r3, [r1, #0]
 800d616:	4a4d      	ldr	r2, [pc, #308]	; (800d74c <RemapAndLinkDMAtoUARTTx+0x30c>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d01b      	beq.n	800d654 <RemapAndLinkDMAtoUARTTx+0x214>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800d61c:	4a4c      	ldr	r2, [pc, #304]	; (800d750 <RemapAndLinkDMAtoUARTTx+0x310>)
 800d61e:	4293      	cmp	r3, r2
 800d620:	d023      	beq.n	800d66a <RemapAndLinkDMAtoUARTTx+0x22a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800d622:	4a4c      	ldr	r2, [pc, #304]	; (800d754 <RemapAndLinkDMAtoUARTTx+0x314>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d02c      	beq.n	800d682 <RemapAndLinkDMAtoUARTTx+0x242>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800d628:	4a4b      	ldr	r2, [pc, #300]	; (800d758 <RemapAndLinkDMAtoUARTTx+0x318>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d035      	beq.n	800d69a <RemapAndLinkDMAtoUARTTx+0x25a>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800d62e:	4a4b      	ldr	r2, [pc, #300]	; (800d75c <RemapAndLinkDMAtoUARTTx+0x31c>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d03d      	beq.n	800d6b0 <RemapAndLinkDMAtoUARTTx+0x270>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800d634:	4a4a      	ldr	r2, [pc, #296]	; (800d760 <RemapAndLinkDMAtoUARTTx+0x320>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d000      	beq.n	800d63c <RemapAndLinkDMAtoUARTTx+0x1fc>
 800d63a:	e749      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800d63c:	4a49      	ldr	r2, [pc, #292]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d63e:	23a8      	movs	r3, #168	; 0xa8
 800d640:	58d4      	ldr	r4, [r2, r3]
 800d642:	4d49      	ldr	r5, [pc, #292]	; (800d768 <RemapAndLinkDMAtoUARTTx+0x328>)
 800d644:	402c      	ands	r4, r5
 800d646:	50d4      	str	r4, [r2, r3]
 800d648:	58d5      	ldr	r5, [r2, r3]
 800d64a:	24a0      	movs	r4, #160	; 0xa0
 800d64c:	0324      	lsls	r4, r4, #12
 800d64e:	432c      	orrs	r4, r5
 800d650:	50d4      	str	r4, [r2, r3]
 800d652:	e73d      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800d654:	4a45      	ldr	r2, [pc, #276]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d656:	23a8      	movs	r3, #168	; 0xa8
 800d658:	58d4      	ldr	r4, [r2, r3]
 800d65a:	25f0      	movs	r5, #240	; 0xf0
 800d65c:	43ac      	bics	r4, r5
 800d65e:	50d4      	str	r4, [r2, r3]
 800d660:	58d4      	ldr	r4, [r2, r3]
 800d662:	3d50      	subs	r5, #80	; 0x50
 800d664:	432c      	orrs	r4, r5
 800d666:	50d4      	str	r4, [r2, r3]
 800d668:	e732      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800d66a:	4a40      	ldr	r2, [pc, #256]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d66c:	23a8      	movs	r3, #168	; 0xa8
 800d66e:	58d4      	ldr	r4, [r2, r3]
 800d670:	4d3f      	ldr	r5, [pc, #252]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d672:	402c      	ands	r4, r5
 800d674:	50d4      	str	r4, [r2, r3]
 800d676:	58d5      	ldr	r5, [r2, r3]
 800d678:	24a0      	movs	r4, #160	; 0xa0
 800d67a:	0224      	lsls	r4, r4, #8
 800d67c:	432c      	orrs	r4, r5
 800d67e:	50d4      	str	r4, [r2, r3]
 800d680:	e726      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800d682:	4a3a      	ldr	r2, [pc, #232]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d684:	23a8      	movs	r3, #168	; 0xa8
 800d686:	58d4      	ldr	r4, [r2, r3]
 800d688:	4d3a      	ldr	r5, [pc, #232]	; (800d774 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d68a:	402c      	ands	r4, r5
 800d68c:	50d4      	str	r4, [r2, r3]
 800d68e:	58d5      	ldr	r5, [r2, r3]
 800d690:	24a0      	movs	r4, #160	; 0xa0
 800d692:	0524      	lsls	r4, r4, #20
 800d694:	432c      	orrs	r4, r5
 800d696:	50d4      	str	r4, [r2, r3]
 800d698:	e71a      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800d69a:	4a32      	ldr	r2, [pc, #200]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d69c:	23a8      	movs	r3, #168	; 0xa8
 800d69e:	58d4      	ldr	r4, [r2, r3]
 800d6a0:	250f      	movs	r5, #15
 800d6a2:	43ac      	bics	r4, r5
 800d6a4:	50d4      	str	r4, [r2, r3]
 800d6a6:	58d4      	ldr	r4, [r2, r3]
 800d6a8:	3d05      	subs	r5, #5
 800d6aa:	432c      	orrs	r4, r5
 800d6ac:	50d4      	str	r4, [r2, r3]
 800d6ae:	e70f      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800d6b0:	4a2c      	ldr	r2, [pc, #176]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d6b2:	23a8      	movs	r3, #168	; 0xa8
 800d6b4:	58d4      	ldr	r4, [r2, r3]
 800d6b6:	4d2e      	ldr	r5, [pc, #184]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d6b8:	402c      	ands	r4, r5
 800d6ba:	50d4      	str	r4, [r2, r3]
 800d6bc:	58d5      	ldr	r5, [r2, r3]
 800d6be:	24a0      	movs	r4, #160	; 0xa0
 800d6c0:	0224      	lsls	r4, r4, #8
 800d6c2:	432c      	orrs	r4, r5
 800d6c4:	50d4      	str	r4, [r2, r3]
 800d6c6:	e703      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800d6c8:	4a28      	ldr	r2, [pc, #160]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6ca:	23a8      	movs	r3, #168	; 0xa8
 800d6cc:	58d4      	ldr	r4, [r2, r3]
 800d6ce:	25f0      	movs	r5, #240	; 0xf0
 800d6d0:	43ac      	bics	r4, r5
 800d6d2:	50d4      	str	r4, [r2, r3]
 800d6d4:	58d4      	ldr	r4, [r2, r3]
 800d6d6:	3d40      	subs	r5, #64	; 0x40
 800d6d8:	432c      	orrs	r4, r5
 800d6da:	50d4      	str	r4, [r2, r3]
 800d6dc:	e6f8      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800d6de:	4a23      	ldr	r2, [pc, #140]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6e0:	23a8      	movs	r3, #168	; 0xa8
 800d6e2:	58d4      	ldr	r4, [r2, r3]
 800d6e4:	4d22      	ldr	r5, [pc, #136]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d6e6:	402c      	ands	r4, r5
 800d6e8:	50d4      	str	r4, [r2, r3]
 800d6ea:	58d5      	ldr	r5, [r2, r3]
 800d6ec:	24b0      	movs	r4, #176	; 0xb0
 800d6ee:	0224      	lsls	r4, r4, #8
 800d6f0:	432c      	orrs	r4, r5
 800d6f2:	50d4      	str	r4, [r2, r3]
 800d6f4:	e6ec      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800d6f6:	4a1d      	ldr	r2, [pc, #116]	; (800d76c <RemapAndLinkDMAtoUARTTx+0x32c>)
 800d6f8:	23a8      	movs	r3, #168	; 0xa8
 800d6fa:	58d4      	ldr	r4, [r2, r3]
 800d6fc:	4d1d      	ldr	r5, [pc, #116]	; (800d774 <RemapAndLinkDMAtoUARTTx+0x334>)
 800d6fe:	402c      	ands	r4, r5
 800d700:	50d4      	str	r4, [r2, r3]
 800d702:	58d5      	ldr	r5, [r2, r3]
 800d704:	24b0      	movs	r4, #176	; 0xb0
 800d706:	0524      	lsls	r4, r4, #20
 800d708:	432c      	orrs	r4, r5
 800d70a:	50d4      	str	r4, [r2, r3]
 800d70c:	e6e0      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800d70e:	4a15      	ldr	r2, [pc, #84]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d710:	23a8      	movs	r3, #168	; 0xa8
 800d712:	58d4      	ldr	r4, [r2, r3]
 800d714:	250f      	movs	r5, #15
 800d716:	43ac      	bics	r4, r5
 800d718:	50d4      	str	r4, [r2, r3]
 800d71a:	58d4      	ldr	r4, [r2, r3]
 800d71c:	3d04      	subs	r5, #4
 800d71e:	432c      	orrs	r4, r5
 800d720:	50d4      	str	r4, [r2, r3]
 800d722:	e6d5      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800d724:	4a0f      	ldr	r2, [pc, #60]	; (800d764 <RemapAndLinkDMAtoUARTTx+0x324>)
 800d726:	23a8      	movs	r3, #168	; 0xa8
 800d728:	58d4      	ldr	r4, [r2, r3]
 800d72a:	4d11      	ldr	r5, [pc, #68]	; (800d770 <RemapAndLinkDMAtoUARTTx+0x330>)
 800d72c:	402c      	ands	r4, r5
 800d72e:	50d4      	str	r4, [r2, r3]
 800d730:	58d5      	ldr	r5, [r2, r3]
 800d732:	24b0      	movs	r4, #176	; 0xb0
 800d734:	0224      	lsls	r4, r4, #8
 800d736:	432c      	orrs	r4, r5
 800d738:	50d4      	str	r4, [r2, r3]
 800d73a:	e6c9      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
 800d73c:	40013800 	.word	0x40013800
 800d740:	40004400 	.word	0x40004400
 800d744:	40004800 	.word	0x40004800
 800d748:	40004c00 	.word	0x40004c00
 800d74c:	4002001c 	.word	0x4002001c
 800d750:	40020044 	.word	0x40020044
 800d754:	40020080 	.word	0x40020080
 800d758:	40020408 	.word	0x40020408
 800d75c:	40020444 	.word	0x40020444
 800d760:	40020458 	.word	0x40020458
 800d764:	40020400 	.word	0x40020400
 800d768:	fff0ffff 	.word	0xfff0ffff
 800d76c:	40020000 	.word	0x40020000
 800d770:	ffff0fff 	.word	0xffff0fff
 800d774:	f0ffffff 	.word	0xf0ffffff
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800d778:	4ab9      	ldr	r2, [pc, #740]	; (800da60 <RemapAndLinkDMAtoUARTTx+0x620>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d159      	bne.n	800d832 <RemapAndLinkDMAtoUARTTx+0x3f2>
 800d77e:	680b      	ldr	r3, [r1, #0]
 800d780:	4ab8      	ldr	r2, [pc, #736]	; (800da64 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d01b      	beq.n	800d7be <RemapAndLinkDMAtoUARTTx+0x37e>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800d786:	4ab8      	ldr	r2, [pc, #736]	; (800da68 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d023      	beq.n	800d7d4 <RemapAndLinkDMAtoUARTTx+0x394>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800d78c:	4ab7      	ldr	r2, [pc, #732]	; (800da6c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d02c      	beq.n	800d7ec <RemapAndLinkDMAtoUARTTx+0x3ac>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800d792:	4ab7      	ldr	r2, [pc, #732]	; (800da70 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d035      	beq.n	800d804 <RemapAndLinkDMAtoUARTTx+0x3c4>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800d798:	4ab6      	ldr	r2, [pc, #728]	; (800da74 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d03d      	beq.n	800d81a <RemapAndLinkDMAtoUARTTx+0x3da>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800d79e:	4ab6      	ldr	r2, [pc, #728]	; (800da78 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d7a0:	4293      	cmp	r3, r2
 800d7a2:	d000      	beq.n	800d7a6 <RemapAndLinkDMAtoUARTTx+0x366>
 800d7a4:	e694      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800d7a6:	4ab5      	ldr	r2, [pc, #724]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d7a8:	23a8      	movs	r3, #168	; 0xa8
 800d7aa:	58d4      	ldr	r4, [r2, r3]
 800d7ac:	4db4      	ldr	r5, [pc, #720]	; (800da80 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d7ae:	402c      	ands	r4, r5
 800d7b0:	50d4      	str	r4, [r2, r3]
 800d7b2:	58d5      	ldr	r5, [r2, r3]
 800d7b4:	24c0      	movs	r4, #192	; 0xc0
 800d7b6:	0324      	lsls	r4, r4, #12
 800d7b8:	432c      	orrs	r4, r5
 800d7ba:	50d4      	str	r4, [r2, r3]
 800d7bc:	e688      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800d7be:	4ab1      	ldr	r2, [pc, #708]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d7c0:	23a8      	movs	r3, #168	; 0xa8
 800d7c2:	58d4      	ldr	r4, [r2, r3]
 800d7c4:	25f0      	movs	r5, #240	; 0xf0
 800d7c6:	43ac      	bics	r4, r5
 800d7c8:	50d4      	str	r4, [r2, r3]
 800d7ca:	58d4      	ldr	r4, [r2, r3]
 800d7cc:	3d30      	subs	r5, #48	; 0x30
 800d7ce:	432c      	orrs	r4, r5
 800d7d0:	50d4      	str	r4, [r2, r3]
 800d7d2:	e67d      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800d7d4:	4aab      	ldr	r2, [pc, #684]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d7d6:	23a8      	movs	r3, #168	; 0xa8
 800d7d8:	58d4      	ldr	r4, [r2, r3]
 800d7da:	4dab      	ldr	r5, [pc, #684]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d7dc:	402c      	ands	r4, r5
 800d7de:	50d4      	str	r4, [r2, r3]
 800d7e0:	58d5      	ldr	r5, [r2, r3]
 800d7e2:	24c0      	movs	r4, #192	; 0xc0
 800d7e4:	0224      	lsls	r4, r4, #8
 800d7e6:	432c      	orrs	r4, r5
 800d7e8:	50d4      	str	r4, [r2, r3]
 800d7ea:	e671      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800d7ec:	4aa5      	ldr	r2, [pc, #660]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d7ee:	23a8      	movs	r3, #168	; 0xa8
 800d7f0:	58d4      	ldr	r4, [r2, r3]
 800d7f2:	4da6      	ldr	r5, [pc, #664]	; (800da8c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d7f4:	402c      	ands	r4, r5
 800d7f6:	50d4      	str	r4, [r2, r3]
 800d7f8:	58d5      	ldr	r5, [r2, r3]
 800d7fa:	24c0      	movs	r4, #192	; 0xc0
 800d7fc:	0524      	lsls	r4, r4, #20
 800d7fe:	432c      	orrs	r4, r5
 800d800:	50d4      	str	r4, [r2, r3]
 800d802:	e665      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d804:	4a9d      	ldr	r2, [pc, #628]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d806:	23a8      	movs	r3, #168	; 0xa8
 800d808:	58d4      	ldr	r4, [r2, r3]
 800d80a:	250f      	movs	r5, #15
 800d80c:	43ac      	bics	r4, r5
 800d80e:	50d4      	str	r4, [r2, r3]
 800d810:	58d4      	ldr	r4, [r2, r3]
 800d812:	3d03      	subs	r5, #3
 800d814:	432c      	orrs	r4, r5
 800d816:	50d4      	str	r4, [r2, r3]
 800d818:	e65a      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d81a:	4a98      	ldr	r2, [pc, #608]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d81c:	23a8      	movs	r3, #168	; 0xa8
 800d81e:	58d4      	ldr	r4, [r2, r3]
 800d820:	4d99      	ldr	r5, [pc, #612]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d822:	402c      	ands	r4, r5
 800d824:	50d4      	str	r4, [r2, r3]
 800d826:	58d5      	ldr	r5, [r2, r3]
 800d828:	24c0      	movs	r4, #192	; 0xc0
 800d82a:	0224      	lsls	r4, r4, #8
 800d82c:	432c      	orrs	r4, r5
 800d82e:	50d4      	str	r4, [r2, r3]
 800d830:	e64e      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d832:	4a97      	ldr	r2, [pc, #604]	; (800da90 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d159      	bne.n	800d8ec <RemapAndLinkDMAtoUARTTx+0x4ac>
 800d838:	680b      	ldr	r3, [r1, #0]
 800d83a:	4a8a      	ldr	r2, [pc, #552]	; (800da64 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d01b      	beq.n	800d878 <RemapAndLinkDMAtoUARTTx+0x438>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d840:	4a89      	ldr	r2, [pc, #548]	; (800da68 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d023      	beq.n	800d88e <RemapAndLinkDMAtoUARTTx+0x44e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d846:	4a89      	ldr	r2, [pc, #548]	; (800da6c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d02c      	beq.n	800d8a6 <RemapAndLinkDMAtoUARTTx+0x466>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d84c:	4a88      	ldr	r2, [pc, #544]	; (800da70 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d035      	beq.n	800d8be <RemapAndLinkDMAtoUARTTx+0x47e>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d852:	4a88      	ldr	r2, [pc, #544]	; (800da74 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d854:	4293      	cmp	r3, r2
 800d856:	d03d      	beq.n	800d8d4 <RemapAndLinkDMAtoUARTTx+0x494>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d858:	4a87      	ldr	r2, [pc, #540]	; (800da78 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d000      	beq.n	800d860 <RemapAndLinkDMAtoUARTTx+0x420>
 800d85e:	e637      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d860:	4a86      	ldr	r2, [pc, #536]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d862:	23a8      	movs	r3, #168	; 0xa8
 800d864:	58d4      	ldr	r4, [r2, r3]
 800d866:	4d86      	ldr	r5, [pc, #536]	; (800da80 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d868:	402c      	ands	r4, r5
 800d86a:	50d4      	str	r4, [r2, r3]
 800d86c:	58d5      	ldr	r5, [r2, r3]
 800d86e:	24d0      	movs	r4, #208	; 0xd0
 800d870:	0324      	lsls	r4, r4, #12
 800d872:	432c      	orrs	r4, r5
 800d874:	50d4      	str	r4, [r2, r3]
 800d876:	e62b      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d878:	4a82      	ldr	r2, [pc, #520]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d87a:	23a8      	movs	r3, #168	; 0xa8
 800d87c:	58d4      	ldr	r4, [r2, r3]
 800d87e:	25f0      	movs	r5, #240	; 0xf0
 800d880:	43ac      	bics	r4, r5
 800d882:	50d4      	str	r4, [r2, r3]
 800d884:	58d4      	ldr	r4, [r2, r3]
 800d886:	3d20      	subs	r5, #32
 800d888:	432c      	orrs	r4, r5
 800d88a:	50d4      	str	r4, [r2, r3]
 800d88c:	e620      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d88e:	4a7d      	ldr	r2, [pc, #500]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d890:	23a8      	movs	r3, #168	; 0xa8
 800d892:	58d4      	ldr	r4, [r2, r3]
 800d894:	4d7c      	ldr	r5, [pc, #496]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d896:	402c      	ands	r4, r5
 800d898:	50d4      	str	r4, [r2, r3]
 800d89a:	58d5      	ldr	r5, [r2, r3]
 800d89c:	24d0      	movs	r4, #208	; 0xd0
 800d89e:	0224      	lsls	r4, r4, #8
 800d8a0:	432c      	orrs	r4, r5
 800d8a2:	50d4      	str	r4, [r2, r3]
 800d8a4:	e614      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d8a6:	4a77      	ldr	r2, [pc, #476]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d8a8:	23a8      	movs	r3, #168	; 0xa8
 800d8aa:	58d4      	ldr	r4, [r2, r3]
 800d8ac:	4d77      	ldr	r5, [pc, #476]	; (800da8c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d8ae:	402c      	ands	r4, r5
 800d8b0:	50d4      	str	r4, [r2, r3]
 800d8b2:	58d5      	ldr	r5, [r2, r3]
 800d8b4:	24d0      	movs	r4, #208	; 0xd0
 800d8b6:	0524      	lsls	r4, r4, #20
 800d8b8:	432c      	orrs	r4, r5
 800d8ba:	50d4      	str	r4, [r2, r3]
 800d8bc:	e608      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d8be:	4a6f      	ldr	r2, [pc, #444]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d8c0:	23a8      	movs	r3, #168	; 0xa8
 800d8c2:	58d4      	ldr	r4, [r2, r3]
 800d8c4:	250f      	movs	r5, #15
 800d8c6:	43ac      	bics	r4, r5
 800d8c8:	50d4      	str	r4, [r2, r3]
 800d8ca:	58d4      	ldr	r4, [r2, r3]
 800d8cc:	3d02      	subs	r5, #2
 800d8ce:	432c      	orrs	r4, r5
 800d8d0:	50d4      	str	r4, [r2, r3]
 800d8d2:	e5fd      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d8d4:	4a69      	ldr	r2, [pc, #420]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d8d6:	23a8      	movs	r3, #168	; 0xa8
 800d8d8:	58d4      	ldr	r4, [r2, r3]
 800d8da:	4d6b      	ldr	r5, [pc, #428]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d8dc:	402c      	ands	r4, r5
 800d8de:	50d4      	str	r4, [r2, r3]
 800d8e0:	58d5      	ldr	r5, [r2, r3]
 800d8e2:	24d0      	movs	r4, #208	; 0xd0
 800d8e4:	0224      	lsls	r4, r4, #8
 800d8e6:	432c      	orrs	r4, r5
 800d8e8:	50d4      	str	r4, [r2, r3]
 800d8ea:	e5f1      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d8ec:	4a69      	ldr	r2, [pc, #420]	; (800da94 <RemapAndLinkDMAtoUARTTx+0x654>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d159      	bne.n	800d9a6 <RemapAndLinkDMAtoUARTTx+0x566>
 800d8f2:	680b      	ldr	r3, [r1, #0]
 800d8f4:	4a5b      	ldr	r2, [pc, #364]	; (800da64 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d01b      	beq.n	800d932 <RemapAndLinkDMAtoUARTTx+0x4f2>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d8fa:	4a5b      	ldr	r2, [pc, #364]	; (800da68 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	d023      	beq.n	800d948 <RemapAndLinkDMAtoUARTTx+0x508>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d900:	4a5a      	ldr	r2, [pc, #360]	; (800da6c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d02c      	beq.n	800d960 <RemapAndLinkDMAtoUARTTx+0x520>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d906:	4a5a      	ldr	r2, [pc, #360]	; (800da70 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d908:	4293      	cmp	r3, r2
 800d90a:	d035      	beq.n	800d978 <RemapAndLinkDMAtoUARTTx+0x538>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d90c:	4a59      	ldr	r2, [pc, #356]	; (800da74 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d03d      	beq.n	800d98e <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d912:	4a59      	ldr	r2, [pc, #356]	; (800da78 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d914:	4293      	cmp	r3, r2
 800d916:	d000      	beq.n	800d91a <RemapAndLinkDMAtoUARTTx+0x4da>
 800d918:	e5da      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d91a:	4a58      	ldr	r2, [pc, #352]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d91c:	23a8      	movs	r3, #168	; 0xa8
 800d91e:	58d4      	ldr	r4, [r2, r3]
 800d920:	4d57      	ldr	r5, [pc, #348]	; (800da80 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d922:	402c      	ands	r4, r5
 800d924:	50d4      	str	r4, [r2, r3]
 800d926:	58d5      	ldr	r5, [r2, r3]
 800d928:	24e0      	movs	r4, #224	; 0xe0
 800d92a:	0324      	lsls	r4, r4, #12
 800d92c:	432c      	orrs	r4, r5
 800d92e:	50d4      	str	r4, [r2, r3]
 800d930:	e5ce      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d932:	4a54      	ldr	r2, [pc, #336]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d934:	23a8      	movs	r3, #168	; 0xa8
 800d936:	58d4      	ldr	r4, [r2, r3]
 800d938:	25f0      	movs	r5, #240	; 0xf0
 800d93a:	43ac      	bics	r4, r5
 800d93c:	50d4      	str	r4, [r2, r3]
 800d93e:	58d4      	ldr	r4, [r2, r3]
 800d940:	3d10      	subs	r5, #16
 800d942:	432c      	orrs	r4, r5
 800d944:	50d4      	str	r4, [r2, r3]
 800d946:	e5c3      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d948:	4a4e      	ldr	r2, [pc, #312]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d94a:	23a8      	movs	r3, #168	; 0xa8
 800d94c:	58d4      	ldr	r4, [r2, r3]
 800d94e:	4d4e      	ldr	r5, [pc, #312]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d950:	402c      	ands	r4, r5
 800d952:	50d4      	str	r4, [r2, r3]
 800d954:	58d5      	ldr	r5, [r2, r3]
 800d956:	24e0      	movs	r4, #224	; 0xe0
 800d958:	0224      	lsls	r4, r4, #8
 800d95a:	432c      	orrs	r4, r5
 800d95c:	50d4      	str	r4, [r2, r3]
 800d95e:	e5b7      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d960:	4a48      	ldr	r2, [pc, #288]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d962:	23a8      	movs	r3, #168	; 0xa8
 800d964:	58d4      	ldr	r4, [r2, r3]
 800d966:	4d49      	ldr	r5, [pc, #292]	; (800da8c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d968:	402c      	ands	r4, r5
 800d96a:	50d4      	str	r4, [r2, r3]
 800d96c:	58d5      	ldr	r5, [r2, r3]
 800d96e:	24e0      	movs	r4, #224	; 0xe0
 800d970:	0524      	lsls	r4, r4, #20
 800d972:	432c      	orrs	r4, r5
 800d974:	50d4      	str	r4, [r2, r3]
 800d976:	e5ab      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d978:	4a40      	ldr	r2, [pc, #256]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d97a:	23a8      	movs	r3, #168	; 0xa8
 800d97c:	58d4      	ldr	r4, [r2, r3]
 800d97e:	250f      	movs	r5, #15
 800d980:	43ac      	bics	r4, r5
 800d982:	50d4      	str	r4, [r2, r3]
 800d984:	58d4      	ldr	r4, [r2, r3]
 800d986:	3d01      	subs	r5, #1
 800d988:	432c      	orrs	r4, r5
 800d98a:	50d4      	str	r4, [r2, r3]
 800d98c:	e5a0      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d98e:	4a3b      	ldr	r2, [pc, #236]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d990:	23a8      	movs	r3, #168	; 0xa8
 800d992:	58d4      	ldr	r4, [r2, r3]
 800d994:	4d3c      	ldr	r5, [pc, #240]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d996:	402c      	ands	r4, r5
 800d998:	50d4      	str	r4, [r2, r3]
 800d99a:	58d5      	ldr	r5, [r2, r3]
 800d99c:	24e0      	movs	r4, #224	; 0xe0
 800d99e:	0224      	lsls	r4, r4, #8
 800d9a0:	432c      	orrs	r4, r5
 800d9a2:	50d4      	str	r4, [r2, r3]
 800d9a4:	e594      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800d9a6:	4a3c      	ldr	r2, [pc, #240]	; (800da98 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d000      	beq.n	800d9ae <RemapAndLinkDMAtoUARTTx+0x56e>
 800d9ac:	e590      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
 800d9ae:	680b      	ldr	r3, [r1, #0]
 800d9b0:	4a2c      	ldr	r2, [pc, #176]	; (800da64 <RemapAndLinkDMAtoUARTTx+0x624>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d01b      	beq.n	800d9ee <RemapAndLinkDMAtoUARTTx+0x5ae>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800d9b6:	4a2c      	ldr	r2, [pc, #176]	; (800da68 <RemapAndLinkDMAtoUARTTx+0x628>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d022      	beq.n	800da02 <RemapAndLinkDMAtoUARTTx+0x5c2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800d9bc:	4a2b      	ldr	r2, [pc, #172]	; (800da6c <RemapAndLinkDMAtoUARTTx+0x62c>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d02b      	beq.n	800da1a <RemapAndLinkDMAtoUARTTx+0x5da>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800d9c2:	4a2b      	ldr	r2, [pc, #172]	; (800da70 <RemapAndLinkDMAtoUARTTx+0x630>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	d034      	beq.n	800da32 <RemapAndLinkDMAtoUARTTx+0x5f2>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800d9c8:	4a2a      	ldr	r2, [pc, #168]	; (800da74 <RemapAndLinkDMAtoUARTTx+0x634>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d03b      	beq.n	800da46 <RemapAndLinkDMAtoUARTTx+0x606>
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800d9ce:	4a2a      	ldr	r2, [pc, #168]	; (800da78 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d000      	beq.n	800d9d6 <RemapAndLinkDMAtoUARTTx+0x596>
 800d9d4:	e57c      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800d9d6:	4a29      	ldr	r2, [pc, #164]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d9d8:	23a8      	movs	r3, #168	; 0xa8
 800d9da:	58d4      	ldr	r4, [r2, r3]
 800d9dc:	4d28      	ldr	r5, [pc, #160]	; (800da80 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d9de:	402c      	ands	r4, r5
 800d9e0:	50d4      	str	r4, [r2, r3]
 800d9e2:	58d5      	ldr	r5, [r2, r3]
 800d9e4:	24f0      	movs	r4, #240	; 0xf0
 800d9e6:	0324      	lsls	r4, r4, #12
 800d9e8:	432c      	orrs	r4, r5
 800d9ea:	50d4      	str	r4, [r2, r3]
 800d9ec:	e570      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d9ee:	4a25      	ldr	r2, [pc, #148]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800d9f0:	23a8      	movs	r3, #168	; 0xa8
 800d9f2:	58d5      	ldr	r5, [r2, r3]
 800d9f4:	26f0      	movs	r6, #240	; 0xf0
 800d9f6:	43b5      	bics	r5, r6
 800d9f8:	50d5      	str	r5, [r2, r3]
 800d9fa:	58d4      	ldr	r4, [r2, r3]
 800d9fc:	4334      	orrs	r4, r6
 800d9fe:	50d4      	str	r4, [r2, r3]
 800da00:	e566      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800da02:	4a20      	ldr	r2, [pc, #128]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800da04:	23a8      	movs	r3, #168	; 0xa8
 800da06:	58d4      	ldr	r4, [r2, r3]
 800da08:	4d1f      	ldr	r5, [pc, #124]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800da0a:	402c      	ands	r4, r5
 800da0c:	50d4      	str	r4, [r2, r3]
 800da0e:	58d5      	ldr	r5, [r2, r3]
 800da10:	24f0      	movs	r4, #240	; 0xf0
 800da12:	0224      	lsls	r4, r4, #8
 800da14:	432c      	orrs	r4, r5
 800da16:	50d4      	str	r4, [r2, r3]
 800da18:	e55a      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800da1a:	4a1a      	ldr	r2, [pc, #104]	; (800da84 <RemapAndLinkDMAtoUARTTx+0x644>)
 800da1c:	23a8      	movs	r3, #168	; 0xa8
 800da1e:	58d4      	ldr	r4, [r2, r3]
 800da20:	4d1a      	ldr	r5, [pc, #104]	; (800da8c <RemapAndLinkDMAtoUARTTx+0x64c>)
 800da22:	402c      	ands	r4, r5
 800da24:	50d4      	str	r4, [r2, r3]
 800da26:	58d5      	ldr	r5, [r2, r3]
 800da28:	24f0      	movs	r4, #240	; 0xf0
 800da2a:	0524      	lsls	r4, r4, #20
 800da2c:	432c      	orrs	r4, r5
 800da2e:	50d4      	str	r4, [r2, r3]
 800da30:	e54e      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800da32:	4a12      	ldr	r2, [pc, #72]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da34:	23a8      	movs	r3, #168	; 0xa8
 800da36:	58d5      	ldr	r5, [r2, r3]
 800da38:	260f      	movs	r6, #15
 800da3a:	43b5      	bics	r5, r6
 800da3c:	50d5      	str	r5, [r2, r3]
 800da3e:	58d4      	ldr	r4, [r2, r3]
 800da40:	4334      	orrs	r4, r6
 800da42:	50d4      	str	r4, [r2, r3]
 800da44:	e544      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800da46:	4a0d      	ldr	r2, [pc, #52]	; (800da7c <RemapAndLinkDMAtoUARTTx+0x63c>)
 800da48:	23a8      	movs	r3, #168	; 0xa8
 800da4a:	58d4      	ldr	r4, [r2, r3]
 800da4c:	4d0e      	ldr	r5, [pc, #56]	; (800da88 <RemapAndLinkDMAtoUARTTx+0x648>)
 800da4e:	402c      	ands	r4, r5
 800da50:	50d4      	str	r4, [r2, r3]
 800da52:	58d5      	ldr	r5, [r2, r3]
 800da54:	24f0      	movs	r4, #240	; 0xf0
 800da56:	0224      	lsls	r4, r4, #8
 800da58:	432c      	orrs	r4, r5
 800da5a:	50d4      	str	r4, [r2, r3]
 800da5c:	e538      	b.n	800d4d0 <RemapAndLinkDMAtoUARTTx+0x90>
 800da5e:	46c0      	nop			; (mov r8, r8)
 800da60:	40005000 	.word	0x40005000
 800da64:	4002001c 	.word	0x4002001c
 800da68:	40020044 	.word	0x40020044
 800da6c:	40020080 	.word	0x40020080
 800da70:	40020408 	.word	0x40020408
 800da74:	40020444 	.word	0x40020444
 800da78:	40020458 	.word	0x40020458
 800da7c:	40020400 	.word	0x40020400
 800da80:	fff0ffff 	.word	0xfff0ffff
 800da84:	40020000 	.word	0x40020000
 800da88:	ffff0fff 	.word	0xffff0fff
 800da8c:	f0ffffff 	.word	0xf0ffffff
 800da90:	40011400 	.word	0x40011400
 800da94:	40011800 	.word	0x40011800
 800da98:	40011c00 	.word	0x40011c00

0800da9c <DMA_MSG_TX_Setup>:
{	
 800da9c:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800da9e:	4b0d      	ldr	r3, [pc, #52]	; (800dad4 <DMA_MSG_TX_Setup+0x38>)
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d012      	beq.n	800dacc <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800daa6:	4b0b      	ldr	r3, [pc, #44]	; (800dad4 <DMA_MSG_TX_Setup+0x38>)
 800daa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d010      	beq.n	800dad0 <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800daae:	4a09      	ldr	r2, [pc, #36]	; (800dad4 <DMA_MSG_TX_Setup+0x38>)
 800dab0:	2394      	movs	r3, #148	; 0x94
 800dab2:	58d3      	ldr	r3, [r2, r3]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d007      	beq.n	800dac8 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800dab8:	0021      	movs	r1, r4
 800daba:	f7ff fcc1 	bl	800d440 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800dabe:	2100      	movs	r1, #0
 800dac0:	0020      	movs	r0, r4
 800dac2:	f7ff f84d 	bl	800cb60 <SetupDMAInterrupts>
}
 800dac6:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800dac8:	4c03      	ldr	r4, [pc, #12]	; (800dad8 <DMA_MSG_TX_Setup+0x3c>)
 800daca:	e7f5      	b.n	800dab8 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800dacc:	4c01      	ldr	r4, [pc, #4]	; (800dad4 <DMA_MSG_TX_Setup+0x38>)
 800dace:	e7f3      	b.n	800dab8 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800dad0:	4c02      	ldr	r4, [pc, #8]	; (800dadc <DMA_MSG_TX_Setup+0x40>)
 800dad2:	e7f1      	b.n	800dab8 <DMA_MSG_TX_Setup+0x1c>
 800dad4:	20001d74 	.word	0x20001d74
 800dad8:	20001de4 	.word	0x20001de4
 800dadc:	20001dac 	.word	0x20001dac

0800dae0 <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800dae0:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800dae2:	4807      	ldr	r0, [pc, #28]	; (800db00 <CRC_Init+0x20>)
 800dae4:	4b07      	ldr	r3, [pc, #28]	; (800db04 <CRC_Init+0x24>)
 800dae6:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800dae8:	2310      	movs	r3, #16
 800daea:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800daec:	2300      	movs	r3, #0
 800daee:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800daf0:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    //CRC_INPUTDATA_INVERSION_NONE
 800daf2:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    //CRC_OUTPUTDATA_INVERSION_DISABLE;
 800daf4:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800daf6:	3303      	adds	r3, #3
 800daf8:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800dafa:	f003 fc25 	bl	8011348 <HAL_CRC_Init>
}
 800dafe:	bd10      	pop	{r4, pc}
 800db00:	2000725c 	.word	0x2000725c
 800db04:	40023000 	.word	0x40023000

0800db08 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800db08:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800db0a:	4a05      	ldr	r2, [pc, #20]	; (800db20 <HAL_CRC_MspInit+0x18>)
 800db0c:	6951      	ldr	r1, [r2, #20]
 800db0e:	2340      	movs	r3, #64	; 0x40
 800db10:	4319      	orrs	r1, r3
 800db12:	6151      	str	r1, [r2, #20]
 800db14:	6952      	ldr	r2, [r2, #20]
 800db16:	4013      	ands	r3, r2
 800db18:	9301      	str	r3, [sp, #4]
 800db1a:	9b01      	ldr	r3, [sp, #4]
}
 800db1c:	b002      	add	sp, #8
 800db1e:	4770      	bx	lr
 800db20:	40021000 	.word	0x40021000

0800db24 <CalculateCRC8>:

/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint8_t pBuffer[], uint16_t size)
{
 800db24:	b570      	push	{r4, r5, r6, lr}
 800db26:	0004      	movs	r4, r0
 800db28:	000d      	movs	r5, r1
  uint8_t pTemp;
  /* check if the passed variables are null */
  if (NULL!=pBuffer && 0!=size)
 800db2a:	2800      	cmp	r0, #0
 800db2c:	d015      	beq.n	800db5a <CalculateCRC8+0x36>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
    }
    return pTemp;
  }
  else
  return 0;
 800db2e:	2000      	movs	r0, #0
  if (NULL!=pBuffer && 0!=size)
 800db30:	2900      	cmp	r1, #0
 800db32:	d100      	bne.n	800db36 <CalculateCRC8+0x12>
}
 800db34:	bd70      	pop	{r4, r5, r6, pc}
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800db36:	088e      	lsrs	r6, r1, #2
 800db38:	0032      	movs	r2, r6
 800db3a:	0021      	movs	r1, r4
 800db3c:	4808      	ldr	r0, [pc, #32]	; (800db60 <CalculateCRC8+0x3c>)
 800db3e:	f003 fc60 	bl	8011402 <HAL_CRC_Calculate>
    if ((size%4)!=0)
 800db42:	07ab      	lsls	r3, r5, #30
 800db44:	d101      	bne.n	800db4a <CalculateCRC8+0x26>
    pTemp=HAL_CRC_Calculate(&hcrc, (uint32_t*)pBuffer, size/4);
 800db46:	b2c0      	uxtb	r0, r0
 800db48:	e7f4      	b.n	800db34 <CalculateCRC8+0x10>
      pTemp=HAL_CRC_Accumulate(&hcrc, (uint32_t*)&pBuffer[(size/4)*4], 1);
 800db4a:	00b1      	lsls	r1, r6, #2
 800db4c:	1861      	adds	r1, r4, r1
 800db4e:	2201      	movs	r2, #1
 800db50:	4803      	ldr	r0, [pc, #12]	; (800db60 <CalculateCRC8+0x3c>)
 800db52:	f003 fc2a 	bl	80113aa <HAL_CRC_Accumulate>
 800db56:	b2c0      	uxtb	r0, r0
 800db58:	e7ec      	b.n	800db34 <CalculateCRC8+0x10>
  return 0;
 800db5a:	2000      	movs	r0, #0
 800db5c:	e7ea      	b.n	800db34 <CalculateCRC8+0x10>
 800db5e:	46c0      	nop			; (mov r8, r8)
 800db60:	2000725c 	.word	0x2000725c

0800db64 <IND_LED_Init>:
	IND_LED_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800db64:	b500      	push	{lr}
 800db66:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800db68:	2380      	movs	r3, #128	; 0x80
 800db6a:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800db6c:	3b7f      	subs	r3, #127	; 0x7f
 800db6e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db70:	2300      	movs	r3, #0
 800db72:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800db74:	3303      	adds	r3, #3
 800db76:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800db78:	2090      	movs	r0, #144	; 0x90
 800db7a:	a901      	add	r1, sp, #4
 800db7c:	05c0      	lsls	r0, r0, #23
 800db7e:	f004 fae3 	bl	8012148 <HAL_GPIO_Init>
}
 800db82:	b007      	add	sp, #28
 800db84:	bd00      	pop	{pc}
	...

0800db88 <GPIO_Init>:
{
 800db88:	b500      	push	{lr}
 800db8a:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800db8c:	4b18      	ldr	r3, [pc, #96]	; (800dbf0 <GPIO_Init+0x68>)
 800db8e:	6959      	ldr	r1, [r3, #20]
 800db90:	2080      	movs	r0, #128	; 0x80
 800db92:	0300      	lsls	r0, r0, #12
 800db94:	4301      	orrs	r1, r0
 800db96:	6159      	str	r1, [r3, #20]
 800db98:	695a      	ldr	r2, [r3, #20]
 800db9a:	4002      	ands	r2, r0
 800db9c:	9201      	str	r2, [sp, #4]
 800db9e:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800dba0:	6959      	ldr	r1, [r3, #20]
 800dba2:	2080      	movs	r0, #128	; 0x80
 800dba4:	0280      	lsls	r0, r0, #10
 800dba6:	4301      	orrs	r1, r0
 800dba8:	6159      	str	r1, [r3, #20]
 800dbaa:	695a      	ldr	r2, [r3, #20]
 800dbac:	4002      	ands	r2, r0
 800dbae:	9202      	str	r2, [sp, #8]
 800dbb0:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800dbb2:	6959      	ldr	r1, [r3, #20]
 800dbb4:	2080      	movs	r0, #128	; 0x80
 800dbb6:	0340      	lsls	r0, r0, #13
 800dbb8:	4301      	orrs	r1, r0
 800dbba:	6159      	str	r1, [r3, #20]
 800dbbc:	695a      	ldr	r2, [r3, #20]
 800dbbe:	4002      	ands	r2, r0
 800dbc0:	9203      	str	r2, [sp, #12]
 800dbc2:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800dbc4:	6959      	ldr	r1, [r3, #20]
 800dbc6:	2080      	movs	r0, #128	; 0x80
 800dbc8:	02c0      	lsls	r0, r0, #11
 800dbca:	4301      	orrs	r1, r0
 800dbcc:	6159      	str	r1, [r3, #20]
 800dbce:	695a      	ldr	r2, [r3, #20]
 800dbd0:	4002      	ands	r2, r0
 800dbd2:	9204      	str	r2, [sp, #16]
 800dbd4:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800dbd6:	695a      	ldr	r2, [r3, #20]
 800dbd8:	2180      	movs	r1, #128	; 0x80
 800dbda:	03c9      	lsls	r1, r1, #15
 800dbdc:	430a      	orrs	r2, r1
 800dbde:	615a      	str	r2, [r3, #20]
 800dbe0:	695b      	ldr	r3, [r3, #20]
 800dbe2:	400b      	ands	r3, r1
 800dbe4:	9305      	str	r3, [sp, #20]
 800dbe6:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800dbe8:	f7ff ffbc 	bl	800db64 <IND_LED_Init>
}
 800dbec:	b007      	add	sp, #28
 800dbee:	bd00      	pop	{pc}
 800dbf0:	40021000 	.word	0x40021000

0800dbf4 <SENSORS_GPIO_Init>:

//-- Configure indicator LED
void SENSORS_GPIO_Init(void)
{
 800dbf4:	b500      	push	{lr}
 800dbf6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	/*Configure GPIO pin : PB11 & PB12 as output*/
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dbf8:	23c0      	movs	r3, #192	; 0xc0
 800dbfa:	015b      	lsls	r3, r3, #5
 800dbfc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800dbfe:	2312      	movs	r3, #18
 800dc00:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dc02:	3b11      	subs	r3, #17
 800dc04:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dc06:	3302      	adds	r3, #2
 800dc08:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800dc0a:	3302      	adds	r3, #2
 800dc0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dc0e:	2090      	movs	r0, #144	; 0x90
 800dc10:	a901      	add	r1, sp, #4
 800dc12:	05c0      	lsls	r0, r0, #23
 800dc14:	f004 fa98 	bl	8012148 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800dc18:	4a0a      	ldr	r2, [pc, #40]	; (800dc44 <SENSORS_GPIO_Init+0x50>)
 800dc1a:	69d1      	ldr	r1, [r2, #28]
 800dc1c:	2080      	movs	r0, #128	; 0x80
 800dc1e:	03c0      	lsls	r0, r0, #15
 800dc20:	4301      	orrs	r1, r0
 800dc22:	61d1      	str	r1, [r2, #28]
 800dc24:	69d3      	ldr	r3, [r2, #28]
 800dc26:	4003      	ands	r3, r0
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	9b00      	ldr	r3, [sp, #0]

    /*Configure GPIO pin : PB7 as input*/
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800dc2c:	2380      	movs	r3, #128	; 0x80
 800dc2e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800dc30:	2300      	movs	r3, #0
 800dc32:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800dc34:	3302      	adds	r3, #2
 800dc36:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dc38:	a901      	add	r1, sp, #4
 800dc3a:	4803      	ldr	r0, [pc, #12]	; (800dc48 <SENSORS_GPIO_Init+0x54>)
 800dc3c:	f004 fa84 	bl	8012148 <HAL_GPIO_Init>
}
 800dc40:	b007      	add	sp, #28
 800dc42:	bd00      	pop	{pc}
 800dc44:	40021000 	.word	0x40021000
 800dc48:	48000400 	.word	0x48000400

0800dc4c <GetPortGPIOs>:
/*-----------------------------------------------------------*/	

/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800dc4c:	b570      	push	{r4, r5, r6, lr}
 800dc4e:	000e      	movs	r6, r1
 800dc50:	0015      	movs	r5, r2
 800dc52:	001c      	movs	r4, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800dc54:	f000 fe08 	bl	800e868 <GetUart>
	
	if (huart == &huart1) 
 800dc58:	4b2b      	ldr	r3, [pc, #172]	; (800dd08 <GetPortGPIOs+0xbc>)
 800dc5a:	4298      	cmp	r0, r3
 800dc5c:	d01a      	beq.n	800dc94 <GetPortGPIOs+0x48>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800dc5e:	4b2b      	ldr	r3, [pc, #172]	; (800dd0c <GetPortGPIOs+0xc0>)
 800dc60:	4298      	cmp	r0, r3
 800dc62:	d025      	beq.n	800dcb0 <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800dc64:	4b2a      	ldr	r3, [pc, #168]	; (800dd10 <GetPortGPIOs+0xc4>)
 800dc66:	4298      	cmp	r0, r3
 800dc68:	d02d      	beq.n	800dcc6 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800dc6a:	4b2a      	ldr	r3, [pc, #168]	; (800dd14 <GetPortGPIOs+0xc8>)
 800dc6c:	4298      	cmp	r0, r3
 800dc6e:	d036      	beq.n	800dcde <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800dc70:	4b29      	ldr	r3, [pc, #164]	; (800dd18 <GetPortGPIOs+0xcc>)
 800dc72:	4298      	cmp	r0, r3
 800dc74:	d03e      	beq.n	800dcf4 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800dc76:	4a29      	ldr	r2, [pc, #164]	; (800dd1c <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800dc78:	23ff      	movs	r3, #255	; 0xff
	else if (huart == &huart6) 
 800dc7a:	4290      	cmp	r0, r2
 800dc7c:	d116      	bne.n	800dcac <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800dc7e:	2390      	movs	r3, #144	; 0x90
 800dc80:	05db      	lsls	r3, r3, #23
 800dc82:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800dc84:	2210      	movs	r2, #16
 800dc86:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800dc88:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART6_RX_PIN;
 800dc8a:	2320      	movs	r3, #32
 800dc8c:	9a04      	ldr	r2, [sp, #16]
 800dc8e:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	e00b      	b.n	800dcac <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800dc94:	2390      	movs	r3, #144	; 0x90
 800dc96:	05db      	lsls	r3, r3, #23
 800dc98:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800dc9a:	2280      	movs	r2, #128	; 0x80
 800dc9c:	0092      	lsls	r2, r2, #2
 800dc9e:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800dca0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART1_RX_PIN;
 800dca2:	2380      	movs	r3, #128	; 0x80
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	9a04      	ldr	r2, [sp, #16]
 800dca8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dcaa:	2300      	movs	r3, #0
	
	return result;	
}
 800dcac:	0018      	movs	r0, r3
 800dcae:	bd70      	pop	{r4, r5, r6, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800dcb0:	2390      	movs	r3, #144	; 0x90
 800dcb2:	05db      	lsls	r3, r3, #23
 800dcb4:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800dcb6:	2204      	movs	r2, #4
 800dcb8:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800dcba:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART2_RX_PIN;
 800dcbc:	2308      	movs	r3, #8
 800dcbe:	9a04      	ldr	r2, [sp, #16]
 800dcc0:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e7f2      	b.n	800dcac <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800dcc6:	4b16      	ldr	r3, [pc, #88]	; (800dd20 <GetPortGPIOs+0xd4>)
 800dcc8:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800dcca:	2280      	movs	r2, #128	; 0x80
 800dccc:	00d2      	lsls	r2, r2, #3
 800dcce:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800dcd0:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART3_RX_PIN;
 800dcd2:	2380      	movs	r3, #128	; 0x80
 800dcd4:	011b      	lsls	r3, r3, #4
 800dcd6:	9a04      	ldr	r2, [sp, #16]
 800dcd8:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	e7e6      	b.n	800dcac <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800dcde:	2390      	movs	r3, #144	; 0x90
 800dce0:	05db      	lsls	r3, r3, #23
 800dce2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800dce4:	2201      	movs	r2, #1
 800dce6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800dce8:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART4_RX_PIN;
 800dcea:	2302      	movs	r3, #2
 800dcec:	9a04      	ldr	r2, [sp, #16]
 800dcee:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	e7db      	b.n	800dcac <GetPortGPIOs+0x60>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800dcf4:	4b0a      	ldr	r3, [pc, #40]	; (800dd20 <GetPortGPIOs+0xd4>)
 800dcf6:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800dcf8:	2208      	movs	r2, #8
 800dcfa:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800dcfc:	6023      	str	r3, [r4, #0]
		*RX_Pin = USART5_RX_PIN;
 800dcfe:	2310      	movs	r3, #16
 800dd00:	9a04      	ldr	r2, [sp, #16]
 800dd02:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	e7d1      	b.n	800dcac <GetPortGPIOs+0x60>
 800dd08:	2000707c 	.word	0x2000707c
 800dd0c:	200071e4 	.word	0x200071e4
 800dd10:	20006f8c 	.word	0x20006f8c
 800dd14:	20007170 	.word	0x20007170
 800dd18:	20007004 	.word	0x20007004
 800dd1c:	200070f4 	.word	0x200070f4
 800dd20:	48000400 	.word	0x48000400

0800dd24 <IsFactoryReset>:
{
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	b092      	sub	sp, #72	; 0x48
  __GPIOA_CLK_ENABLE();
 800dd28:	4b39      	ldr	r3, [pc, #228]	; (800de10 <IsFactoryReset+0xec>)
 800dd2a:	6959      	ldr	r1, [r3, #20]
 800dd2c:	2080      	movs	r0, #128	; 0x80
 800dd2e:	0280      	lsls	r0, r0, #10
 800dd30:	4301      	orrs	r1, r0
 800dd32:	6159      	str	r1, [r3, #20]
 800dd34:	695a      	ldr	r2, [r3, #20]
 800dd36:	4002      	ands	r2, r0
 800dd38:	9203      	str	r2, [sp, #12]
 800dd3a:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800dd3c:	6959      	ldr	r1, [r3, #20]
 800dd3e:	2080      	movs	r0, #128	; 0x80
 800dd40:	02c0      	lsls	r0, r0, #11
 800dd42:	4301      	orrs	r1, r0
 800dd44:	6159      	str	r1, [r3, #20]
 800dd46:	695a      	ldr	r2, [r3, #20]
 800dd48:	4002      	ands	r2, r0
 800dd4a:	9204      	str	r2, [sp, #16]
 800dd4c:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800dd4e:	6959      	ldr	r1, [r3, #20]
 800dd50:	2080      	movs	r0, #128	; 0x80
 800dd52:	0300      	lsls	r0, r0, #12
 800dd54:	4301      	orrs	r1, r0
 800dd56:	6159      	str	r1, [r3, #20]
 800dd58:	695a      	ldr	r2, [r3, #20]
 800dd5a:	4002      	ands	r2, r0
 800dd5c:	9205      	str	r2, [sp, #20]
 800dd5e:	9a05      	ldr	r2, [sp, #20]
  __GPIOD_CLK_ENABLE();
 800dd60:	695a      	ldr	r2, [r3, #20]
 800dd62:	2180      	movs	r1, #128	; 0x80
 800dd64:	0349      	lsls	r1, r1, #13
 800dd66:	430a      	orrs	r2, r1
 800dd68:	615a      	str	r2, [r3, #20]
 800dd6a:	695b      	ldr	r3, [r3, #20]
 800dd6c:	400b      	ands	r3, r1
 800dd6e:	9306      	str	r3, [sp, #24]
 800dd70:	9b06      	ldr	r3, [sp, #24]
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800dd72:	2522      	movs	r5, #34	; 0x22
 800dd74:	446d      	add	r5, sp
 800dd76:	ab08      	add	r3, sp, #32
 800dd78:	9300      	str	r3, [sp, #0]
 800dd7a:	ab0b      	add	r3, sp, #44	; 0x2c
 800dd7c:	002a      	movs	r2, r5
 800dd7e:	a90c      	add	r1, sp, #48	; 0x30
 800dd80:	2001      	movs	r0, #1
 800dd82:	f7ff ff63 	bl	800dc4c <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800dd86:	ac07      	add	r4, sp, #28
 800dd88:	9400      	str	r4, [sp, #0]
 800dd8a:	ab09      	add	r3, sp, #36	; 0x24
 800dd8c:	221e      	movs	r2, #30
 800dd8e:	446a      	add	r2, sp
 800dd90:	a90a      	add	r1, sp, #40	; 0x28
 800dd92:	2006      	movs	r0, #6
 800dd94:	f7ff ff5a 	bl	800dc4c <GetPortGPIOs>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dd9c:	2600      	movs	r6, #0
 800dd9e:	960f      	str	r6, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800dda0:	882b      	ldrh	r3, [r5, #0]
 800dda2:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800dda4:	a90d      	add	r1, sp, #52	; 0x34
 800dda6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dda8:	f004 f9ce 	bl	8012148 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ddac:	960e      	str	r6, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800ddae:	2302      	movs	r3, #2
 800ddb0:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800ddb2:	8823      	ldrh	r3, [r4, #0]
 800ddb4:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800ddb6:	a90d      	add	r1, sp, #52	; 0x34
 800ddb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddba:	f004 f9c5 	bl	8012148 <HAL_GPIO_Init>
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800ddbe:	8829      	ldrh	r1, [r5, #0]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ddc4:	f004 fb34 	bl	8012430 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800ddc8:	2005      	movs	r0, #5
 800ddca:	f000 fb73 	bl	800e4b4 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800ddce:	8821      	ldrh	r1, [r4, #0]
 800ddd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddd2:	f004 fb27 	bl	8012424 <HAL_GPIO_ReadPin>
 800ddd6:	2800      	cmp	r0, #0
 800ddd8:	d006      	beq.n	800dde8 <IsFactoryReset+0xc4>
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800ddda:	4b0e      	ldr	r3, [pc, #56]	; (800de14 <IsFactoryReset+0xf0>)
 800dddc:	2201      	movs	r2, #1
 800ddde:	4252      	negs	r2, r2
 800dde0:	601a      	str	r2, [r3, #0]
	return 0;
 800dde2:	2000      	movs	r0, #0
}
 800dde4:	b012      	add	sp, #72	; 0x48
 800dde6:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800dde8:	2322      	movs	r3, #34	; 0x22
 800ddea:	446b      	add	r3, sp
 800ddec:	8819      	ldrh	r1, [r3, #0]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ddf2:	f004 fb1d 	bl	8012430 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800ddf6:	2005      	movs	r0, #5
 800ddf8:	f000 fb5c 	bl	800e4b4 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800ddfc:	ab07      	add	r3, sp, #28
 800ddfe:	8819      	ldrh	r1, [r3, #0]
 800de00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de02:	f004 fb0f 	bl	8012424 <HAL_GPIO_ReadPin>
 800de06:	2801      	cmp	r0, #1
 800de08:	d1e7      	bne.n	800ddda <IsFactoryReset+0xb6>
			return 1;
 800de0a:	2001      	movs	r0, #1
 800de0c:	e7ea      	b.n	800dde4 <IsFactoryReset+0xc0>
 800de0e:	46c0      	nop			; (mov r8, r8)
 800de10:	40021000 	.word	0x40021000
 800de14:	20007ff0 	.word	0x20007ff0

0800de18 <MX_I2C1_Init>:
}



void MX_I2C1_Init(void)
{
 800de18:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c1.Instance = I2C2;
 800de1a:	480b      	ldr	r0, [pc, #44]	; (800de48 <MX_I2C1_Init+0x30>)
 800de1c:	4b0b      	ldr	r3, [pc, #44]	; (800de4c <MX_I2C1_Init+0x34>)
 800de1e:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x2000090E/*Standard mode*/;
 800de20:	4b0b      	ldr	r3, [pc, #44]	; (800de50 <MX_I2C1_Init+0x38>)
 800de22:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800de24:	2300      	movs	r3, #0
 800de26:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800de28:	2201      	movs	r2, #1
 800de2a:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800de2c:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800de2e:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800de30:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800de32:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800de34:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800de36:	f004 fbfb 	bl	8012630 <HAL_I2C_Init>
 800de3a:	2800      	cmp	r0, #0
 800de3c:	d100      	bne.n	800de40 <MX_I2C1_Init+0x28>
  {
    Error_Handler();
  }


}
 800de3e:	bd10      	pop	{r4, pc}
    Error_Handler();
 800de40:	f7fa fe6e 	bl	8008b20 <Error_Handler>
}
 800de44:	e7fb      	b.n	800de3e <MX_I2C1_Init+0x26>
 800de46:	46c0      	nop			; (mov r8, r8)
 800de48:	20007280 	.word	0x20007280
 800de4c:	40005800 	.word	0x40005800
 800de50:	2000090e 	.word	0x2000090e

0800de54 <MX_I2C_Init>:
{
 800de54:	b500      	push	{lr}
 800de56:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800de58:	4b18      	ldr	r3, [pc, #96]	; (800debc <MX_I2C_Init+0x68>)
 800de5a:	6959      	ldr	r1, [r3, #20]
 800de5c:	2080      	movs	r0, #128	; 0x80
 800de5e:	0300      	lsls	r0, r0, #12
 800de60:	4301      	orrs	r1, r0
 800de62:	6159      	str	r1, [r3, #20]
 800de64:	695a      	ldr	r2, [r3, #20]
 800de66:	4002      	ands	r2, r0
 800de68:	9201      	str	r2, [sp, #4]
 800de6a:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800de6c:	6959      	ldr	r1, [r3, #20]
 800de6e:	2080      	movs	r0, #128	; 0x80
 800de70:	0280      	lsls	r0, r0, #10
 800de72:	4301      	orrs	r1, r0
 800de74:	6159      	str	r1, [r3, #20]
 800de76:	695a      	ldr	r2, [r3, #20]
 800de78:	4002      	ands	r2, r0
 800de7a:	9202      	str	r2, [sp, #8]
 800de7c:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800de7e:	6959      	ldr	r1, [r3, #20]
 800de80:	2080      	movs	r0, #128	; 0x80
 800de82:	0340      	lsls	r0, r0, #13
 800de84:	4301      	orrs	r1, r0
 800de86:	6159      	str	r1, [r3, #20]
 800de88:	695a      	ldr	r2, [r3, #20]
 800de8a:	4002      	ands	r2, r0
 800de8c:	9203      	str	r2, [sp, #12]
 800de8e:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800de90:	6959      	ldr	r1, [r3, #20]
 800de92:	2080      	movs	r0, #128	; 0x80
 800de94:	02c0      	lsls	r0, r0, #11
 800de96:	4301      	orrs	r1, r0
 800de98:	6159      	str	r1, [r3, #20]
 800de9a:	695a      	ldr	r2, [r3, #20]
 800de9c:	4002      	ands	r2, r0
 800de9e:	9204      	str	r2, [sp, #16]
 800dea0:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800dea2:	695a      	ldr	r2, [r3, #20]
 800dea4:	2180      	movs	r1, #128	; 0x80
 800dea6:	03c9      	lsls	r1, r1, #15
 800dea8:	430a      	orrs	r2, r1
 800deaa:	615a      	str	r2, [r3, #20]
 800deac:	695b      	ldr	r3, [r3, #20]
 800deae:	400b      	ands	r3, r1
 800deb0:	9305      	str	r3, [sp, #20]
 800deb2:	9b05      	ldr	r3, [sp, #20]
  MX_I2C1_Init();
 800deb4:	f7ff ffb0 	bl	800de18 <MX_I2C1_Init>
}
 800deb8:	b007      	add	sp, #28
 800deba:	bd00      	pop	{pc}
 800debc:	40021000 	.word	0x40021000

0800dec0 <WriteRegData>:

void WriteRegData(uint8_t reg, uint8_t data)
{
 800dec0:	b500      	push	{lr}
 800dec2:	b083      	sub	sp, #12
	send[0]= 0x80 | reg;
 800dec4:	4a07      	ldr	r2, [pc, #28]	; (800dee4 <WriteRegData+0x24>)
 800dec6:	2380      	movs	r3, #128	; 0x80
 800dec8:	425b      	negs	r3, r3
 800deca:	4318      	orrs	r0, r3
 800decc:	7010      	strb	r0, [r2, #0]
	send[1]= data;
 800dece:	7051      	strb	r1, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 2, HAL_MAX_DELAY);
 800ded0:	337f      	adds	r3, #127	; 0x7f
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	3303      	adds	r3, #3
 800ded6:	2172      	movs	r1, #114	; 0x72
 800ded8:	4803      	ldr	r0, [pc, #12]	; (800dee8 <WriteRegData+0x28>)
 800deda:	f004 fc07 	bl	80126ec <HAL_I2C_Master_Transmit>

}
 800dede:	b003      	add	sp, #12
 800dee0:	bd00      	pop	{pc}
 800dee2:	46c0      	nop			; (mov r8, r8)
 800dee4:	200072bc 	.word	0x200072bc
 800dee8:	20007280 	.word	0x20007280

0800deec <Read_Word>:


uint16_t Read_Word(uint8_t reg)
{
 800deec:	b570      	push	{r4, r5, r6, lr}
 800deee:	b082      	sub	sp, #8
   send[0]= 0xA0 | reg;
 800def0:	4a0e      	ldr	r2, [pc, #56]	; (800df2c <Read_Word+0x40>)
 800def2:	2360      	movs	r3, #96	; 0x60
 800def4:	425b      	negs	r3, r3
 800def6:	4318      	orrs	r0, r3
 800def8:	7010      	strb	r0, [r2, #0]
   HAL_I2C_Master_Transmit(&hi2c1, colorProximityAdd, send, 1, HAL_MAX_DELAY);
 800defa:	4d0d      	ldr	r5, [pc, #52]	; (800df30 <Read_Word+0x44>)
 800defc:	2601      	movs	r6, #1
 800defe:	4276      	negs	r6, r6
 800df00:	9600      	str	r6, [sp, #0]
 800df02:	3361      	adds	r3, #97	; 0x61
 800df04:	2172      	movs	r1, #114	; 0x72
 800df06:	0028      	movs	r0, r5
 800df08:	f004 fbf0 	bl	80126ec <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Receive(&hi2c1, colorProximityAdd, receive, 2, HAL_MAX_DELAY);
 800df0c:	4c09      	ldr	r4, [pc, #36]	; (800df34 <Read_Word+0x48>)
 800df0e:	9600      	str	r6, [sp, #0]
 800df10:	2302      	movs	r3, #2
 800df12:	0022      	movs	r2, r4
 800df14:	2172      	movs	r1, #114	; 0x72
 800df16:	0028      	movs	r0, r5
 800df18:	f004 fc8c 	bl	8012834 <HAL_I2C_Master_Receive>
    return (uint16_t)(receive[0] + (256 * receive[1]));
 800df1c:	7863      	ldrb	r3, [r4, #1]
 800df1e:	021b      	lsls	r3, r3, #8
 800df20:	7820      	ldrb	r0, [r4, #0]
 800df22:	18c0      	adds	r0, r0, r3
 800df24:	b280      	uxth	r0, r0

}
 800df26:	b002      	add	sp, #8
 800df28:	bd70      	pop	{r4, r5, r6, pc}
 800df2a:	46c0      	nop			; (mov r8, r8)
 800df2c:	200072bc 	.word	0x200072bc
 800df30:	20007280 	.word	0x20007280
 800df34:	200072c0 	.word	0x200072c0

0800df38 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800df38:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800df3a:	f002 fe01 	bl	8010b40 <HAL_IncTick>
  osSystickHandler();  
 800df3e:	f000 fe55 	bl	800ebec <osSystickHandler>

}
 800df42:	bd10      	pop	{r4, pc}

0800df44 <HardFault_Handler>:

/**
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
 800df44:	e7fe      	b.n	800df44 <HardFault_Handler>
	...

0800df48 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800df48:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800df4a:	4802      	ldr	r0, [pc, #8]	; (800df54 <USART1_IRQHandler+0xc>)
 800df4c:	f006 fa13 	bl	8014376 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800df50:	bd10      	pop	{r4, pc}
 800df52:	46c0      	nop			; (mov r8, r8)
 800df54:	2000707c 	.word	0x2000707c

0800df58 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800df58:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800df5a:	4802      	ldr	r0, [pc, #8]	; (800df64 <USART2_IRQHandler+0xc>)
 800df5c:	f006 fa0b 	bl	8014376 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800df60:	bd10      	pop	{r4, pc}
 800df62:	46c0      	nop			; (mov r8, r8)
 800df64:	200071e4 	.word	0x200071e4

0800df68 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800df68:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800df6a:	4806      	ldr	r0, [pc, #24]	; (800df84 <USART3_8_IRQHandler+0x1c>)
 800df6c:	f006 fa03 	bl	8014376 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800df70:	4805      	ldr	r0, [pc, #20]	; (800df88 <USART3_8_IRQHandler+0x20>)
 800df72:	f006 fa00 	bl	8014376 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800df76:	4805      	ldr	r0, [pc, #20]	; (800df8c <USART3_8_IRQHandler+0x24>)
 800df78:	f006 f9fd 	bl	8014376 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800df7c:	4804      	ldr	r0, [pc, #16]	; (800df90 <USART3_8_IRQHandler+0x28>)
 800df7e:	f006 f9fa 	bl	8014376 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800df82:	bd10      	pop	{r4, pc}
 800df84:	20006f8c 	.word	0x20006f8c
 800df88:	20007170 	.word	0x20007170
 800df8c:	20007004 	.word	0x20007004
 800df90:	200070f4 	.word	0x200070f4

0800df94 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800df94:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800df96:	2001      	movs	r0, #1
 800df98:	f7f9 fb62 	bl	8007660 <DMA_IRQHandler>
	
}
 800df9c:	bd10      	pop	{r4, pc}
	...

0800dfa0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800dfa0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800dfa2:	4b0c      	ldr	r3, [pc, #48]	; (800dfd4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	06db      	lsls	r3, r3, #27
 800dfa8:	d408      	bmi.n	800dfbc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800dfaa:	4b0b      	ldr	r3, [pc, #44]	; (800dfd8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	05db      	lsls	r3, r3, #23
 800dfb0:	d408      	bmi.n	800dfc4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x24>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800dfb2:	4b09      	ldr	r3, [pc, #36]	; (800dfd8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	06db      	lsls	r3, r3, #27
 800dfb8:	d408      	bmi.n	800dfcc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2c>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
	}
}
 800dfba:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P5);
 800dfbc:	2005      	movs	r0, #5
 800dfbe:	f7f9 fb4f 	bl	8007660 <DMA_IRQHandler>
 800dfc2:	e7fa      	b.n	800dfba <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		DMA_IRQHandler(P2);
 800dfc4:	2002      	movs	r0, #2
 800dfc6:	f7f9 fb4b 	bl	8007660 <DMA_IRQHandler>
 800dfca:	e7f6      	b.n	800dfba <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800dfcc:	4803      	ldr	r0, [pc, #12]	; (800dfdc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800dfce:	f003 fb17 	bl	8011600 <HAL_DMA_IRQHandler>
}
 800dfd2:	e7f2      	b.n	800dfba <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1a>
 800dfd4:	40020400 	.word	0x40020400
 800dfd8:	40020000 	.word	0x40020000
 800dfdc:	20001d74 	.word	0x20001d74

0800dfe0 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800dfe0:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800dfe2:	4b14      	ldr	r3, [pc, #80]	; (800e034 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	03db      	lsls	r3, r3, #15
 800dfe8:	d413      	bmi.n	800e012 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800dfea:	4b12      	ldr	r3, [pc, #72]	; (800e034 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	02db      	lsls	r3, r3, #11
 800dff0:	d413      	bmi.n	800e01a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800dff2:	4b11      	ldr	r3, [pc, #68]	; (800e038 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	05db      	lsls	r3, r3, #23
 800dff8:	d413      	bmi.n	800e022 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800dffa:	4b0e      	ldr	r3, [pc, #56]	; (800e034 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	04db      	lsls	r3, r3, #19
 800e000:	d413      	bmi.n	800e02a <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800e002:	4b0c      	ldr	r3, [pc, #48]	; (800e034 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	01db      	lsls	r3, r3, #7
 800e008:	d506      	bpl.n	800e018 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800e00a:	480c      	ldr	r0, [pc, #48]	; (800e03c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800e00c:	f003 faf8 	bl	8011600 <HAL_DMA_IRQHandler>
	}
}
 800e010:	e002      	b.n	800e018 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800e012:	2003      	movs	r0, #3
 800e014:	f7f9 fb24 	bl	8007660 <DMA_IRQHandler>
}
 800e018:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800e01a:	2004      	movs	r0, #4
 800e01c:	f7f9 fb20 	bl	8007660 <DMA_IRQHandler>
 800e020:	e7fa      	b.n	800e018 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800e022:	2006      	movs	r0, #6
 800e024:	f7f9 fb1c 	bl	8007660 <DMA_IRQHandler>
 800e028:	e7f6      	b.n	800e018 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800e02a:	4805      	ldr	r0, [pc, #20]	; (800e040 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800e02c:	f003 fae8 	bl	8011600 <HAL_DMA_IRQHandler>
 800e030:	e7f2      	b.n	800e018 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800e032:	46c0      	nop			; (mov r8, r8)
 800e034:	40020000 	.word	0x40020000
 800e038:	40020400 	.word	0x40020400
 800e03c:	20001de4 	.word	0x20001de4
 800e040:	20001dac 	.word	0x20001dac

0800e044 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e044:	b510      	push	{r4, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800e04a:	2300      	movs	r3, #0
 800e04c:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800e04e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800e054:	f7fe fe30 	bl	800ccb8 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800e058:	0020      	movs	r0, r4
 800e05a:	f7fe fcc3 	bl	800c9e4 <GetPort>
 800e05e:	0080      	lsls	r0, r0, #2
 800e060:	4b03      	ldr	r3, [pc, #12]	; (800e070 <HAL_UART_TxCpltCallback+0x2c>)
 800e062:	58c0      	ldr	r0, [r0, r3]
 800e064:	a901      	add	r1, sp, #4
 800e066:	f001 f945 	bl	800f2f4 <xQueueGiveFromISR>
}
 800e06a:	b002      	add	sp, #8
 800e06c:	bd10      	pop	{r4, pc}
 800e06e:	46c0      	nop			; (mov r8, r8)
 800e070:	20006ed8 	.word	0x20006ed8

0800e074 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e074:	b510      	push	{r4, lr}
 800e076:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800e078:	2369      	movs	r3, #105	; 0x69
 800e07a:	2201      	movs	r2, #1
 800e07c:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800e07e:	f7fe fcb1 	bl	800c9e4 <GetPort>
	if (portStatus[port] == STREAM) {
 800e082:	4b0c      	ldr	r3, [pc, #48]	; (800e0b4 <HAL_UART_ErrorCallback+0x40>)
 800e084:	5c1b      	ldrb	r3, [r3, r0]
 800e086:	2b02      	cmp	r3, #2
 800e088:	d005      	beq.n	800e096 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800e08a:	4b0b      	ldr	r3, [pc, #44]	; (800e0b8 <HAL_UART_ErrorCallback+0x44>)
 800e08c:	1818      	adds	r0, r3, r0
 800e08e:	3801      	subs	r0, #1
 800e090:	2301      	movs	r3, #1
 800e092:	7003      	strb	r3, [r0, #0]
	}	
}
 800e094:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800e096:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	685a      	ldr	r2, [r3, #4]
 800e09c:	b292      	uxth	r2, r2
 800e09e:	3801      	subs	r0, #1
 800e0a0:	0080      	lsls	r0, r0, #2
 800e0a2:	4b06      	ldr	r3, [pc, #24]	; (800e0bc <HAL_UART_ErrorCallback+0x48>)
 800e0a4:	58c3      	ldr	r3, [r0, r3]
 800e0a6:	6819      	ldr	r1, [r3, #0]
 800e0a8:	3128      	adds	r1, #40	; 0x28
 800e0aa:	0020      	movs	r0, r4
 800e0ac:	f005 fd4c 	bl	8013b48 <HAL_UART_Receive_DMA>
 800e0b0:	e7f0      	b.n	800e094 <HAL_UART_ErrorCallback+0x20>
 800e0b2:	46c0      	nop			; (mov r8, r8)
 800e0b4:	2000116c 	.word	0x2000116c
 800e0b8:	20001340 	.word	0x20001340
 800e0bc:	20001820 	.word	0x20001820

0800e0c0 <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e0c0:	b510      	push	{r4, lr}
 800e0c2:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800e0c4:	f7fe fc8e 	bl	800c9e4 <GetPort>
 800e0c8:	4b13      	ldr	r3, [pc, #76]	; (800e118 <HAL_UART_RxCpltCallback+0x58>)
 800e0ca:	5c1b      	ldrb	r3, [r3, r0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d006      	beq.n	800e0de <HAL_UART_RxCpltCallback+0x1e>
 800e0d0:	0020      	movs	r0, r4
 800e0d2:	f7fe fc87 	bl	800c9e4 <GetPort>
 800e0d6:	4b10      	ldr	r3, [pc, #64]	; (800e118 <HAL_UART_RxCpltCallback+0x58>)
 800e0d8:	5c1b      	ldrb	r3, [r3, r0]
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	d11a      	bne.n	800e114 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOSMessaging.overrun = GetPort(huart);
 800e0de:	0020      	movs	r0, r4
 800e0e0:	f7fe fc80 	bl	800c9e4 <GetPort>
 800e0e4:	4b0d      	ldr	r3, [pc, #52]	; (800e11c <HAL_UART_RxCpltCallback+0x5c>)
 800e0e6:	7098      	strb	r0, [r3, #2]
		portStatus[GetPort(huart)] = OVERRUN;
 800e0e8:	0020      	movs	r0, r4
 800e0ea:	f7fe fc7b 	bl	800c9e4 <GetPort>
 800e0ee:	4b0a      	ldr	r3, [pc, #40]	; (800e118 <HAL_UART_RxCpltCallback+0x58>)
 800e0f0:	2205      	movs	r2, #5
 800e0f2:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800e0f4:	0020      	movs	r0, r4
 800e0f6:	f7fe fc75 	bl	800c9e4 <GetPort>
 800e0fa:	4b09      	ldr	r3, [pc, #36]	; (800e120 <HAL_UART_RxCpltCallback+0x60>)
 800e0fc:	1818      	adds	r0, r3, r0
 800e0fe:	3801      	subs	r0, #1
 800e100:	2300      	movs	r3, #0
 800e102:	7003      	strb	r3, [r0, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800e104:	0020      	movs	r0, r4
 800e106:	f7fe fc6d 	bl	800c9e4 <GetPort>
 800e10a:	4b06      	ldr	r3, [pc, #24]	; (800e124 <HAL_UART_RxCpltCallback+0x64>)
 800e10c:	1818      	adds	r0, r3, r0
 800e10e:	3801      	subs	r0, #1
 800e110:	2301      	movs	r3, #1
 800e112:	7003      	strb	r3, [r0, #0]
	}

}
 800e114:	bd10      	pop	{r4, pc}
 800e116:	46c0      	nop			; (mov r8, r8)
 800e118:	2000116c 	.word	0x2000116c
 800e11c:	20006dd4 	.word	0x20006dd4
 800e120:	200017c8 	.word	0x200017c8
 800e124:	20001340 	.word	0x20001340

0800e128 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800e128:	b672      	cpsid	i
 800e12a:	e7fe      	b.n	800e12a <vApplicationStackOverflowHook+0x2>

0800e12c <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800e12c:	b672      	cpsid	i
 800e12e:	e7fe      	b.n	800e12e <vApplicationMallocFailedHook+0x2>

0800e130 <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800e130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e132:	46ce      	mov	lr, r9
 800e134:	b500      	push	{lr}
 800e136:	b08e      	sub	sp, #56	; 0x38
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800e138:	ac05      	add	r4, sp, #20
 800e13a:	4b34      	ldr	r3, [pc, #208]	; (800e20c <RTC_CalendarConfig+0xdc>)
 800e13c:	0022      	movs	r2, r4
 800e13e:	cb43      	ldmia	r3!, {r0, r1, r6}
 800e140:	c243      	stmia	r2!, {r0, r1, r6}
 800e142:	aa02      	add	r2, sp, #8
 800e144:	4b32      	ldr	r3, [pc, #200]	; (800e210 <RTC_CalendarConfig+0xe0>)
 800e146:	cb03      	ldmia	r3!, {r0, r1}
 800e148:	c203      	stmia	r2!, {r0, r1}
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800e14e:	2015      	movs	r0, #21
 800e150:	ab02      	add	r3, sp, #8
 800e152:	469c      	mov	ip, r3
 800e154:	4460      	add	r0, ip
 800e156:	f006 f996 	bl	8014486 <atoi>
 800e15a:	b2c3      	uxtb	r3, r0
 800e15c:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800e15e:	2600      	movs	r6, #0
 800e160:	71a6      	strb	r6, [r4, #6]
  day = atoi(comDate + 4);
 800e162:	a806      	add	r0, sp, #24
 800e164:	f006 f98f 	bl	8014486 <atoi>
 800e168:	b2c7      	uxtb	r7, r0
  *(comDate + 3) = 0;
 800e16a:	70e6      	strb	r6, [r4, #3]
 800e16c:	2401      	movs	r4, #1
  for (uint8_t i = 0; i < 12; i++)
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e16e:	4e29      	ldr	r6, [pc, #164]	; (800e214 <RTC_CalendarConfig+0xe4>)
 800e170:	e002      	b.n	800e178 <RTC_CalendarConfig+0x48>
 800e172:	3401      	adds	r4, #1
  for (uint8_t i = 0; i < 12; i++)
 800e174:	2c0d      	cmp	r4, #13
 800e176:	d009      	beq.n	800e18c <RTC_CalendarConfig+0x5c>
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800e178:	00a3      	lsls	r3, r4, #2
 800e17a:	3b04      	subs	r3, #4
 800e17c:	58f1      	ldr	r1, [r6, r3]
 800e17e:	a805      	add	r0, sp, #20
 800e180:	f7f1 ffc0 	bl	8000104 <strcmp>
 800e184:	2800      	cmp	r0, #0
 800e186:	d1f4      	bne.n	800e172 <RTC_CalendarConfig+0x42>
			month = i + 1;
 800e188:	b2e5      	uxtb	r5, r4
 800e18a:	e7f2      	b.n	800e172 <RTC_CalendarConfig+0x42>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800e18c:	ab02      	add	r3, sp, #8
 800e18e:	1d98      	adds	r0, r3, #6
 800e190:	f006 f979 	bl	8014486 <atoi>
 800e194:	9000      	str	r0, [sp, #0]
	*(comDate + 5) = 0;
 800e196:	ac05      	add	r4, sp, #20
 800e198:	2600      	movs	r6, #0
 800e19a:	7166      	strb	r6, [r4, #5]
	minutes = atoi(comTime + 3);
 800e19c:	ab02      	add	r3, sp, #8
 800e19e:	1cd8      	adds	r0, r3, #3
 800e1a0:	f006 f971 	bl	8014486 <atoi>
 800e1a4:	9001      	str	r0, [sp, #4]
	*(comDate + 2) = 0;
 800e1a6:	70a6      	strb	r6, [r4, #2]
	hours = atoi(comTime);
 800e1a8:	a802      	add	r0, sp, #8
 800e1aa:	f006 f96c 	bl	8014486 <atoi>
 800e1ae:	0004      	movs	r4, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800e1b0:	a90d      	add	r1, sp, #52	; 0x34
 800e1b2:	464b      	mov	r3, r9
 800e1b4:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800e1b6:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800e1b8:	708f      	strb	r7, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e1be:	2200      	movs	r2, #0
 800e1c0:	4815      	ldr	r0, [pc, #84]	; (800e218 <RTC_CalendarConfig+0xe8>)
 800e1c2:	f005 fa0d 	bl	80135e0 <HAL_RTC_SetDate>
		return BOS_ERROR;
 800e1c6:	23ff      	movs	r3, #255	; 0xff
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e1c8:	2800      	cmp	r0, #0
 800e1ca:	d119      	bne.n	800e200 <RTC_CalendarConfig+0xd0>

  /* Set Time */
  stimestructure.Hours = hours;
 800e1cc:	a908      	add	r1, sp, #32
 800e1ce:	700c      	strb	r4, [r1, #0]
  stimestructure.Minutes = minutes;
 800e1d0:	9b01      	ldr	r3, [sp, #4]
 800e1d2:	704b      	strb	r3, [r1, #1]
  stimestructure.Seconds = seconds;
 800e1d4:	9b00      	ldr	r3, [sp, #0]
 800e1d6:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	720b      	strb	r3, [r1, #8]
 800e1dc:	4a0f      	ldr	r2, [pc, #60]	; (800e21c <RTC_CalendarConfig+0xec>)
 800e1de:	3018      	adds	r0, #24
 800e1e0:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800e1e2:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800e1e4:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	480b      	ldr	r0, [pc, #44]	; (800e218 <RTC_CalendarConfig+0xe8>)
 800e1ea:	f005 f973 	bl	80134d4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e1ee:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d105      	bne.n	800e200 <RTC_CalendarConfig+0xd0>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e1f4:	4a0a      	ldr	r2, [pc, #40]	; (800e220 <RTC_CalendarConfig+0xf0>)
 800e1f6:	2101      	movs	r1, #1
 800e1f8:	4807      	ldr	r0, [pc, #28]	; (800e218 <RTC_CalendarConfig+0xe8>)
 800e1fa:	f005 fab5 	bl	8013768 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e1fe:	2300      	movs	r3, #0
}
 800e200:	0018      	movs	r0, r3
 800e202:	b00e      	add	sp, #56	; 0x38
 800e204:	bc04      	pop	{r2}
 800e206:	4691      	mov	r9, r2
 800e208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e20a:	46c0      	nop			; (mov r8, r8)
 800e20c:	08019380 	.word	0x08019380
 800e210:	080193a4 	.word	0x080193a4
 800e214:	20000048 	.word	0x20000048
 800e218:	200072c4 	.word	0x200072c4
 800e21c:	20006e54 	.word	0x20006e54
 800e220:	000032f2 	.word	0x000032f2

0800e224 <RTC_Init>:
{
 800e224:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800e226:	4a1c      	ldr	r2, [pc, #112]	; (800e298 <RTC_Init+0x74>)
 800e228:	6a11      	ldr	r1, [r2, #32]
 800e22a:	2380      	movs	r3, #128	; 0x80
 800e22c:	021b      	lsls	r3, r3, #8
 800e22e:	430b      	orrs	r3, r1
 800e230:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800e232:	481a      	ldr	r0, [pc, #104]	; (800e29c <RTC_Init+0x78>)
 800e234:	4b1a      	ldr	r3, [pc, #104]	; (800e2a0 <RTC_Init+0x7c>)
 800e236:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800e238:	2300      	movs	r3, #0
 800e23a:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800e23c:	227c      	movs	r2, #124	; 0x7c
 800e23e:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800e240:	4a18      	ldr	r2, [pc, #96]	; (800e2a4 <RTC_Init+0x80>)
 800e242:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800e244:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800e246:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800e248:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800e24a:	f005 f8e5 	bl	8013418 <HAL_RTC_Init>
 800e24e:	23ff      	movs	r3, #255	; 0xff
 800e250:	2800      	cmp	r0, #0
 800e252:	d11e      	bne.n	800e292 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800e254:	2101      	movs	r1, #1
 800e256:	4811      	ldr	r0, [pc, #68]	; (800e29c <RTC_Init+0x78>)
 800e258:	f005 fa8c 	bl	8013774 <HAL_RTCEx_BKUPRead>
 800e25c:	4b12      	ldr	r3, [pc, #72]	; (800e2a8 <RTC_Init+0x84>)
 800e25e:	4298      	cmp	r0, r3
 800e260:	d10e      	bne.n	800e280 <RTC_Init+0x5c>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800e262:	4b0d      	ldr	r3, [pc, #52]	; (800e298 <RTC_Init+0x74>)
 800e264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e266:	011b      	lsls	r3, r3, #4
 800e268:	d502      	bpl.n	800e270 <RTC_Init+0x4c>
			bootStatus = POWER_ON_BOOT;
 800e26a:	4b10      	ldr	r3, [pc, #64]	; (800e2ac <RTC_Init+0x88>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800e270:	4b09      	ldr	r3, [pc, #36]	; (800e298 <RTC_Init+0x74>)
 800e272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e274:	015b      	lsls	r3, r3, #5
 800e276:	d505      	bpl.n	800e284 <RTC_Init+0x60>
			bootStatus = RESET_BOOT;
 800e278:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <RTC_Init+0x88>)
 800e27a:	2201      	movs	r2, #1
 800e27c:	701a      	strb	r2, [r3, #0]
 800e27e:	e001      	b.n	800e284 <RTC_Init+0x60>
    RTC_CalendarConfig();
 800e280:	f7ff ff56 	bl	800e130 <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800e284:	4a04      	ldr	r2, [pc, #16]	; (800e298 <RTC_Init+0x74>)
 800e286:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800e288:	2380      	movs	r3, #128	; 0x80
 800e28a:	045b      	lsls	r3, r3, #17
 800e28c:	430b      	orrs	r3, r1
 800e28e:	6253      	str	r3, [r2, #36]	; 0x24
	return BOS_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	0018      	movs	r0, r3
 800e294:	bd10      	pop	{r4, pc}
 800e296:	46c0      	nop			; (mov r8, r8)
 800e298:	40021000 	.word	0x40021000
 800e29c:	200072c4 	.word	0x200072c4
 800e2a0:	40002800 	.word	0x40002800
 800e2a4:	000007cf 	.word	0x000007cf
 800e2a8:	000032f2 	.word	0x000032f2
 800e2ac:	20001f6c 	.word	0x20001f6c

0800e2b0 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800e2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2b2:	46c6      	mov	lr, r8
 800e2b4:	b500      	push	{lr}
 800e2b6:	b086      	sub	sp, #24
 800e2b8:	ac0c      	add	r4, sp, #48	; 0x30
 800e2ba:	7827      	ldrb	r7, [r4, #0]
 800e2bc:	ac0d      	add	r4, sp, #52	; 0x34
 800e2be:	7824      	ldrb	r4, [r4, #0]
 800e2c0:	46a0      	mov	r8, r4
 800e2c2:	ac0e      	add	r4, sp, #56	; 0x38
 800e2c4:	7825      	ldrb	r5, [r4, #0]
 800e2c6:	ac0f      	add	r4, sp, #60	; 0x3c
 800e2c8:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800e2ca:	ac05      	add	r4, sp, #20
 800e2cc:	3230      	adds	r2, #48	; 0x30
 800e2ce:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800e2d0:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800e2d2:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800e2d4:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	0021      	movs	r1, r4
 800e2da:	481f      	ldr	r0, [pc, #124]	; (800e358 <BOS_CalendarConfig+0xa8>)
 800e2dc:	f005 f980 	bl	80135e0 <HAL_RTC_SetDate>
 800e2e0:	2800      	cmp	r0, #0
 800e2e2:	d136      	bne.n	800e352 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800e2e4:	466b      	mov	r3, sp
 800e2e6:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800e2e8:	4642      	mov	r2, r8
 800e2ea:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800e2ec:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800e2f2:	2e01      	cmp	r6, #1
 800e2f4:	d020      	beq.n	800e338 <BOS_CalendarConfig+0x88>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800e2f6:	2e02      	cmp	r6, #2
 800e2f8:	d024      	beq.n	800e344 <BOS_CalendarConfig+0x94>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800e2fa:	4b18      	ldr	r3, [pc, #96]	; (800e35c <BOS_CalendarConfig+0xac>)
 800e2fc:	2218      	movs	r2, #24
 800e2fe:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e300:	2200      	movs	r2, #0
 800e302:	4669      	mov	r1, sp
 800e304:	4814      	ldr	r0, [pc, #80]	; (800e358 <BOS_CalendarConfig+0xa8>)
 800e306:	f005 f8e5 	bl	80134d4 <HAL_RTC_SetTime>
		return BOS_ERROR;
 800e30a:	23ff      	movs	r3, #255	; 0xff
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d10e      	bne.n	800e32e <BOS_CalendarConfig+0x7e>
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800e310:	4a12      	ldr	r2, [pc, #72]	; (800e35c <BOS_CalendarConfig+0xac>)
 800e312:	7b53      	ldrb	r3, [r2, #13]
 800e314:	021b      	lsls	r3, r3, #8
 800e316:	7911      	ldrb	r1, [r2, #4]
 800e318:	4319      	orrs	r1, r3
 800e31a:	308d      	adds	r0, #141	; 0x8d
 800e31c:	0040      	lsls	r0, r0, #1
 800e31e:	f7f9 fa89 	bl	8007834 <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800e322:	4a0f      	ldr	r2, [pc, #60]	; (800e360 <BOS_CalendarConfig+0xb0>)
 800e324:	2101      	movs	r1, #1
 800e326:	480c      	ldr	r0, [pc, #48]	; (800e358 <BOS_CalendarConfig+0xa8>)
 800e328:	f005 fa1e 	bl	8013768 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	0018      	movs	r0, r3
 800e330:	b006      	add	sp, #24
 800e332:	bc04      	pop	{r2}
 800e334:	4690      	mov	r8, r2
 800e336:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800e338:	466a      	mov	r2, sp
 800e33a:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e33c:	4b07      	ldr	r3, [pc, #28]	; (800e35c <BOS_CalendarConfig+0xac>)
 800e33e:	220c      	movs	r2, #12
 800e340:	735a      	strb	r2, [r3, #13]
 800e342:	e7dd      	b.n	800e300 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800e344:	2340      	movs	r3, #64	; 0x40
 800e346:	466a      	mov	r2, sp
 800e348:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800e34a:	4b04      	ldr	r3, [pc, #16]	; (800e35c <BOS_CalendarConfig+0xac>)
 800e34c:	220c      	movs	r2, #12
 800e34e:	735a      	strb	r2, [r3, #13]
 800e350:	e7d6      	b.n	800e300 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800e352:	23ff      	movs	r3, #255	; 0xff
 800e354:	e7eb      	b.n	800e32e <BOS_CalendarConfig+0x7e>
 800e356:	46c0      	nop			; (mov r8, r8)
 800e358:	200072c4 	.word	0x200072c4
 800e35c:	20006e54 	.word	0x20006e54
 800e360:	000032f2 	.word	0x000032f2

0800e364 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800e364:	b530      	push	{r4, r5, lr}
 800e366:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800e368:	4d16      	ldr	r5, [pc, #88]	; (800e3c4 <GetTimeDate+0x60>)
 800e36a:	2200      	movs	r2, #0
 800e36c:	a902      	add	r1, sp, #8
 800e36e:	0028      	movs	r0, r5
 800e370:	f005 f9b2 	bl	80136d8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800e374:	ac07      	add	r4, sp, #28
 800e376:	2200      	movs	r2, #0
 800e378:	0021      	movs	r1, r4
 800e37a:	0028      	movs	r0, r5
 800e37c:	f005 f9d2 	bl	8013724 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800e380:	4b11      	ldr	r3, [pc, #68]	; (800e3c8 <GetTimeDate+0x64>)
 800e382:	aa02      	add	r2, sp, #8
 800e384:	7a12      	ldrb	r2, [r2, #8]
 800e386:	09d2      	lsrs	r2, r2, #7
 800e388:	3201      	adds	r2, #1
 800e38a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800e38c:	9a03      	ldr	r2, [sp, #12]
 800e38e:	9201      	str	r2, [sp, #4]
 800e390:	0852      	lsrs	r2, r2, #1
 800e392:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800e394:	aa02      	add	r2, sp, #8
 800e396:	7892      	ldrb	r2, [r2, #2]
 800e398:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800e39a:	aa02      	add	r2, sp, #8
 800e39c:	7852      	ldrb	r2, [r2, #1]
 800e39e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800e3a0:	aa02      	add	r2, sp, #8
 800e3a2:	7812      	ldrb	r2, [r2, #0]
 800e3a4:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800e3a6:	78a2      	ldrb	r2, [r4, #2]
 800e3a8:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800e3aa:	7862      	ldrb	r2, [r4, #1]
 800e3ac:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800e3ae:	7822      	ldrb	r2, [r4, #0]
 800e3b0:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800e3b2:	78e2      	ldrb	r2, [r4, #3]
 800e3b4:	21fa      	movs	r1, #250	; 0xfa
 800e3b6:	00c9      	lsls	r1, r1, #3
 800e3b8:	468c      	mov	ip, r1
 800e3ba:	4462      	add	r2, ip
 800e3bc:	831a      	strh	r2, [r3, #24]
}
 800e3be:	b009      	add	sp, #36	; 0x24
 800e3c0:	bd30      	pop	{r4, r5, pc}
 800e3c2:	46c0      	nop			; (mov r8, r8)
 800e3c4:	200072c4 	.word	0x200072c4
 800e3c8:	20006e54 	.word	0x20006e54

0800e3cc <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800e3cc:	b530      	push	{r4, r5, lr}
 800e3ce:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800e3d0:	4a12      	ldr	r2, [pc, #72]	; (800e41c <TIM_USEC_Init+0x50>)
 800e3d2:	69d1      	ldr	r1, [r2, #28]
 800e3d4:	2080      	movs	r0, #128	; 0x80
 800e3d6:	0040      	lsls	r0, r0, #1
 800e3d8:	4301      	orrs	r1, r0
 800e3da:	61d1      	str	r1, [r2, #28]
 800e3dc:	69d3      	ldr	r3, [r2, #28]
 800e3de:	4003      	ands	r3, r0
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800e3e4:	4c0e      	ldr	r4, [pc, #56]	; (800e420 <TIM_USEC_Init+0x54>)
 800e3e6:	4b0f      	ldr	r3, [pc, #60]	; (800e424 <TIM_USEC_Init+0x58>)
 800e3e8:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800e3ea:	f004 ff2d 	bl	8013248 <HAL_RCC_GetPCLK1Freq>
 800e3ee:	490e      	ldr	r1, [pc, #56]	; (800e428 <TIM_USEC_Init+0x5c>)
 800e3f0:	f7f1 feae 	bl	8000150 <__udivsi3>
 800e3f4:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3f6:	2500      	movs	r5, #0
 800e3f8:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800e3fa:	4b0c      	ldr	r3, [pc, #48]	; (800e42c <TIM_USEC_Init+0x60>)
 800e3fc:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800e3fe:	0020      	movs	r0, r4
 800e400:	f005 fa48 	bl	8013894 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e404:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e406:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800e408:	a902      	add	r1, sp, #8
 800e40a:	0020      	movs	r0, r4
 800e40c:	f005 fa5c 	bl	80138c8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800e410:	0020      	movs	r0, r4
 800e412:	f005 f9b6 	bl	8013782 <HAL_TIM_Base_Start>
}
 800e416:	b005      	add	sp, #20
 800e418:	bd30      	pop	{r4, r5, pc}
 800e41a:	46c0      	nop			; (mov r8, r8)
 800e41c:	40021000 	.word	0x40021000
 800e420:	20007320 	.word	0x20007320
 800e424:	40002000 	.word	0x40002000
 800e428:	000f4240 	.word	0x000f4240
 800e42c:	0000ffff 	.word	0x0000ffff

0800e430 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800e430:	b530      	push	{r4, r5, lr}
 800e432:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800e434:	4a12      	ldr	r2, [pc, #72]	; (800e480 <TIM_MSEC_Init+0x50>)
 800e436:	6991      	ldr	r1, [r2, #24]
 800e438:	2080      	movs	r0, #128	; 0x80
 800e43a:	0240      	lsls	r0, r0, #9
 800e43c:	4301      	orrs	r1, r0
 800e43e:	6191      	str	r1, [r2, #24]
 800e440:	6993      	ldr	r3, [r2, #24]
 800e442:	4003      	ands	r3, r0
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800e448:	4c0e      	ldr	r4, [pc, #56]	; (800e484 <TIM_MSEC_Init+0x54>)
 800e44a:	4b0f      	ldr	r3, [pc, #60]	; (800e488 <TIM_MSEC_Init+0x58>)
 800e44c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800e44e:	f004 fefb 	bl	8013248 <HAL_RCC_GetPCLK1Freq>
 800e452:	21fa      	movs	r1, #250	; 0xfa
 800e454:	0089      	lsls	r1, r1, #2
 800e456:	f7f1 fe7b 	bl	8000150 <__udivsi3>
 800e45a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e45c:	2500      	movs	r5, #0
 800e45e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800e460:	4b0a      	ldr	r3, [pc, #40]	; (800e48c <TIM_MSEC_Init+0x5c>)
 800e462:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800e464:	0020      	movs	r0, r4
 800e466:	f005 fa15 	bl	8013894 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e46a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e46c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800e46e:	a902      	add	r1, sp, #8
 800e470:	0020      	movs	r0, r4
 800e472:	f005 fa29 	bl	80138c8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800e476:	0020      	movs	r0, r4
 800e478:	f005 f983 	bl	8013782 <HAL_TIM_Base_Start>
}
 800e47c:	b005      	add	sp, #20
 800e47e:	bd30      	pop	{r4, r5, pc}
 800e480:	40021000 	.word	0x40021000
 800e484:	200072e4 	.word	0x200072e4
 800e488:	40014000 	.word	0x40014000
 800e48c:	0000ffff 	.word	0x0000ffff

0800e490 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800e490:	b510      	push	{r4, lr}
 800e492:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800e494:	f002 f9f0 	bl	8010878 <vPortEnterCritical>
	
	if (Delay)
 800e498:	2c00      	cmp	r4, #0
 800e49a:	d006      	beq.n	800e4aa <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800e49c:	4b04      	ldr	r3, [pc, #16]	; (800e4b0 <StartMicroDelay+0x20>)
 800e49e:	681a      	ldr	r2, [r3, #0]
 800e4a0:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800e4a2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e4a4:	1a5b      	subs	r3, r3, r1
 800e4a6:	42a3      	cmp	r3, r4
 800e4a8:	d9fb      	bls.n	800e4a2 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e4aa:	f002 f9f1 	bl	8010890 <vPortExitCritical>
}
 800e4ae:	bd10      	pop	{r4, pc}
 800e4b0:	20007320 	.word	0x20007320

0800e4b4 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800e4b4:	b510      	push	{r4, lr}
 800e4b6:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800e4b8:	f002 f9de 	bl	8010878 <vPortEnterCritical>
	
	if (Delay)
 800e4bc:	2c00      	cmp	r4, #0
 800e4be:	d006      	beq.n	800e4ce <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800e4c0:	4b04      	ldr	r3, [pc, #16]	; (800e4d4 <StartMilliDelay+0x20>)
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800e4c6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e4c8:	1a5b      	subs	r3, r3, r1
 800e4ca:	42a3      	cmp	r3, r4
 800e4cc:	d9fb      	bls.n	800e4c6 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800e4ce:	f002 f9df 	bl	8010890 <vPortExitCritical>
}
 800e4d2:	bd10      	pop	{r4, pc}
 800e4d4:	200072e4 	.word	0x200072e4

0800e4d8 <MX_USART1_UART_Init>:
#endif 

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800e4d8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800e4da:	4809      	ldr	r0, [pc, #36]	; (800e500 <MX_USART1_UART_Init+0x28>)
 800e4dc:	4b09      	ldr	r3, [pc, #36]	; (800e504 <MX_USART1_UART_Init+0x2c>)
 800e4de:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e4e0:	23e1      	movs	r3, #225	; 0xe1
 800e4e2:	031b      	lsls	r3, r3, #12
 800e4e4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800e4ea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800e4ec:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800e4ee:	220c      	movs	r2, #12
 800e4f0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e4f2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800e4f4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e4f6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e4f8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800e4fa:	f005 fe65 	bl	80141c8 <HAL_UART_Init>
	#if _P4pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800e4fe:	bd10      	pop	{r4, pc}
 800e500:	2000707c 	.word	0x2000707c
 800e504:	40013800 	.word	0x40013800

0800e508 <MX_USART2_UART_Init>:
#endif

/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800e508:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800e50a:	4809      	ldr	r0, [pc, #36]	; (800e530 <MX_USART2_UART_Init+0x28>)
 800e50c:	4b09      	ldr	r3, [pc, #36]	; (800e534 <MX_USART2_UART_Init+0x2c>)
 800e50e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e510:	23e1      	movs	r3, #225	; 0xe1
 800e512:	031b      	lsls	r3, r3, #12
 800e514:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800e516:	2300      	movs	r3, #0
 800e518:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800e51a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800e51c:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800e51e:	220c      	movs	r2, #12
 800e520:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e522:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800e524:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e526:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e528:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800e52a:	f005 fe4d 	bl	80141c8 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart2);
	#endif	
}
 800e52e:	bd10      	pop	{r4, pc}
 800e530:	200071e4 	.word	0x200071e4
 800e534:	40004400 	.word	0x40004400

0800e538 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800e538:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800e53a:	4809      	ldr	r0, [pc, #36]	; (800e560 <MX_USART3_UART_Init+0x28>)
 800e53c:	4b09      	ldr	r3, [pc, #36]	; (800e564 <MX_USART3_UART_Init+0x2c>)
 800e53e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e540:	23e1      	movs	r3, #225	; 0xe1
 800e542:	031b      	lsls	r3, r3, #12
 800e544:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800e546:	2300      	movs	r3, #0
 800e548:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800e54a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800e54c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800e54e:	220c      	movs	r2, #12
 800e550:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e552:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800e554:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e556:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e558:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800e55a:	f005 fe35 	bl	80141c8 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800e55e:	bd10      	pop	{r4, pc}
 800e560:	20006f8c 	.word	0x20006f8c
 800e564:	40004800 	.word	0x40004800

0800e568 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800e568:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800e56a:	4809      	ldr	r0, [pc, #36]	; (800e590 <MX_USART4_UART_Init+0x28>)
 800e56c:	4b09      	ldr	r3, [pc, #36]	; (800e594 <MX_USART4_UART_Init+0x2c>)
 800e56e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e570:	23e1      	movs	r3, #225	; 0xe1
 800e572:	031b      	lsls	r3, r3, #12
 800e574:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800e576:	2300      	movs	r3, #0
 800e578:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800e57a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800e57c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800e57e:	220c      	movs	r2, #12
 800e580:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e582:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800e584:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e586:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e588:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800e58a:	f005 fe1d 	bl	80141c8 <HAL_UART_Init>
	#if _P1pol_reversed	
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800e58e:	bd10      	pop	{r4, pc}
 800e590:	20007170 	.word	0x20007170
 800e594:	40004c00 	.word	0x40004c00

0800e598 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800e598:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800e59a:	4809      	ldr	r0, [pc, #36]	; (800e5c0 <MX_USART5_UART_Init+0x28>)
 800e59c:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <MX_USART5_UART_Init+0x2c>)
 800e59e:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e5a0:	23e1      	movs	r3, #225	; 0xe1
 800e5a2:	031b      	lsls	r3, r3, #12
 800e5a4:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e5aa:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e5ac:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e5ae:	220c      	movs	r2, #12
 800e5b0:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5b2:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5b4:	61c3      	str	r3, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e5b6:	6203      	str	r3, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5b8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800e5ba:	f005 fe05 	bl	80141c8 <HAL_UART_Init>
	#if _P5pol_reversed
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart5);
	#endif	
}
 800e5be:	bd10      	pop	{r4, pc}
 800e5c0:	20007004 	.word	0x20007004
 800e5c4:	40005000 	.word	0x40005000

0800e5c8 <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800e5c8:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800e5ca:	4809      	ldr	r0, [pc, #36]	; (800e5f0 <MX_USART6_UART_Init+0x28>)
 800e5cc:	4b09      	ldr	r3, [pc, #36]	; (800e5f4 <MX_USART6_UART_Init+0x2c>)
 800e5ce:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800e5d0:	23e1      	movs	r3, #225	; 0xe1
 800e5d2:	031b      	lsls	r3, r3, #12
 800e5d4:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800e5da:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800e5dc:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800e5de:	220c      	movs	r2, #12
 800e5e0:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e5e2:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800e5e4:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800e5e6:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800e5e8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800e5ea:	f005 fded 	bl	80141c8 <HAL_UART_Init>
	#if _P3pol_reversed
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800e5ee:	bd10      	pop	{r4, pc}
 800e5f0:	200070f4 	.word	0x200070f4
 800e5f4:	40011400 	.word	0x40011400

0800e5f8 <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5fa:	46ce      	mov	lr, r9
 800e5fc:	b500      	push	{lr}
 800e5fe:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800e600:	6803      	ldr	r3, [r0, #0]
 800e602:	4a91      	ldr	r2, [pc, #580]	; (800e848 <HAL_UART_MspInit+0x250>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d015      	beq.n	800e634 <HAL_UART_MspInit+0x3c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800e608:	4a90      	ldr	r2, [pc, #576]	; (800e84c <HAL_UART_MspInit+0x254>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d040      	beq.n	800e690 <HAL_UART_MspInit+0x98>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800e60e:	4a90      	ldr	r2, [pc, #576]	; (800e850 <HAL_UART_MspInit+0x258>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d069      	beq.n	800e6e8 <HAL_UART_MspInit+0xf0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800e614:	4a8f      	ldr	r2, [pc, #572]	; (800e854 <HAL_UART_MspInit+0x25c>)
 800e616:	4293      	cmp	r3, r2
 800e618:	d100      	bne.n	800e61c <HAL_UART_MspInit+0x24>
 800e61a:	e092      	b.n	800e742 <HAL_UART_MspInit+0x14a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800e61c:	4a8e      	ldr	r2, [pc, #568]	; (800e858 <HAL_UART_MspInit+0x260>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d100      	bne.n	800e624 <HAL_UART_MspInit+0x2c>
 800e622:	e0b9      	b.n	800e798 <HAL_UART_MspInit+0x1a0>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800e624:	4a8d      	ldr	r2, [pc, #564]	; (800e85c <HAL_UART_MspInit+0x264>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d100      	bne.n	800e62c <HAL_UART_MspInit+0x34>
 800e62a:	e0e0      	b.n	800e7ee <HAL_UART_MspInit+0x1f6>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800e62c:	b00c      	add	sp, #48	; 0x30
 800e62e:	bc04      	pop	{r2}
 800e630:	4691      	mov	r9, r2
 800e632:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800e634:	4a8a      	ldr	r2, [pc, #552]	; (800e860 <HAL_UART_MspInit+0x268>)
 800e636:	6991      	ldr	r1, [r2, #24]
 800e638:	2080      	movs	r0, #128	; 0x80
 800e63a:	01c0      	lsls	r0, r0, #7
 800e63c:	4301      	orrs	r1, r0
 800e63e:	6191      	str	r1, [r2, #24]
 800e640:	6993      	ldr	r3, [r2, #24]
 800e642:	4003      	ands	r3, r0
 800e644:	9301      	str	r3, [sp, #4]
 800e646:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800e648:	2380      	movs	r3, #128	; 0x80
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e64e:	2702      	movs	r7, #2
 800e650:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e652:	2401      	movs	r4, #1
 800e654:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e656:	2603      	movs	r6, #3
 800e658:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800e65a:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800e65c:	2590      	movs	r5, #144	; 0x90
 800e65e:	05ed      	lsls	r5, r5, #23
 800e660:	a907      	add	r1, sp, #28
 800e662:	0028      	movs	r0, r5
 800e664:	f003 fd70 	bl	8012148 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800e668:	2380      	movs	r3, #128	; 0x80
 800e66a:	00db      	lsls	r3, r3, #3
 800e66c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e66e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e670:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e672:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800e674:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800e676:	a907      	add	r1, sp, #28
 800e678:	0028      	movs	r0, r5
 800e67a:	f003 fd65 	bl	8012148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800e67e:	2200      	movs	r2, #0
 800e680:	2101      	movs	r1, #1
 800e682:	201b      	movs	r0, #27
 800e684:	f002 fd96 	bl	80111b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e688:	201b      	movs	r0, #27
 800e68a:	f002 fdc7 	bl	801121c <HAL_NVIC_EnableIRQ>
 800e68e:	e7cd      	b.n	800e62c <HAL_UART_MspInit+0x34>
    __USART2_CLK_ENABLE();
 800e690:	4a73      	ldr	r2, [pc, #460]	; (800e860 <HAL_UART_MspInit+0x268>)
 800e692:	69d1      	ldr	r1, [r2, #28]
 800e694:	2080      	movs	r0, #128	; 0x80
 800e696:	0280      	lsls	r0, r0, #10
 800e698:	4301      	orrs	r1, r0
 800e69a:	61d1      	str	r1, [r2, #28]
 800e69c:	69d3      	ldr	r3, [r2, #28]
 800e69e:	4003      	ands	r3, r0
 800e6a0:	9302      	str	r3, [sp, #8]
 800e6a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800e6a4:	2304      	movs	r3, #4
 800e6a6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6a8:	2702      	movs	r7, #2
 800e6aa:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6ac:	2401      	movs	r4, #1
 800e6ae:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6b0:	2603      	movs	r6, #3
 800e6b2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800e6b4:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800e6b6:	2590      	movs	r5, #144	; 0x90
 800e6b8:	05ed      	lsls	r5, r5, #23
 800e6ba:	a907      	add	r1, sp, #28
 800e6bc:	0028      	movs	r0, r5
 800e6be:	f003 fd43 	bl	8012148 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800e6c2:	2308      	movs	r3, #8
 800e6c4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e6c6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e6c8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e6ca:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800e6cc:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800e6ce:	a907      	add	r1, sp, #28
 800e6d0:	0028      	movs	r0, r5
 800e6d2:	f003 fd39 	bl	8012148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	2101      	movs	r1, #1
 800e6da:	201c      	movs	r0, #28
 800e6dc:	f002 fd6a 	bl	80111b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800e6e0:	201c      	movs	r0, #28
 800e6e2:	f002 fd9b 	bl	801121c <HAL_NVIC_EnableIRQ>
 800e6e6:	e7a1      	b.n	800e62c <HAL_UART_MspInit+0x34>
    __USART3_CLK_ENABLE();
 800e6e8:	4a5d      	ldr	r2, [pc, #372]	; (800e860 <HAL_UART_MspInit+0x268>)
 800e6ea:	69d1      	ldr	r1, [r2, #28]
 800e6ec:	2080      	movs	r0, #128	; 0x80
 800e6ee:	02c0      	lsls	r0, r0, #11
 800e6f0:	4301      	orrs	r1, r0
 800e6f2:	61d1      	str	r1, [r2, #28]
 800e6f4:	69d3      	ldr	r3, [r2, #28]
 800e6f6:	4003      	ands	r3, r0
 800e6f8:	9303      	str	r3, [sp, #12]
 800e6fa:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800e6fc:	2380      	movs	r3, #128	; 0x80
 800e6fe:	00db      	lsls	r3, r3, #3
 800e700:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e702:	2402      	movs	r4, #2
 800e704:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e706:	2701      	movs	r7, #1
 800e708:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e70a:	2603      	movs	r6, #3
 800e70c:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800e70e:	2504      	movs	r5, #4
 800e710:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800e712:	a907      	add	r1, sp, #28
 800e714:	4853      	ldr	r0, [pc, #332]	; (800e864 <HAL_UART_MspInit+0x26c>)
 800e716:	f003 fd17 	bl	8012148 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800e71a:	2380      	movs	r3, #128	; 0x80
 800e71c:	011b      	lsls	r3, r3, #4
 800e71e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e720:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e722:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e724:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800e726:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800e728:	a907      	add	r1, sp, #28
 800e72a:	484e      	ldr	r0, [pc, #312]	; (800e864 <HAL_UART_MspInit+0x26c>)
 800e72c:	f003 fd0c 	bl	8012148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e730:	2200      	movs	r2, #0
 800e732:	2101      	movs	r1, #1
 800e734:	201d      	movs	r0, #29
 800e736:	f002 fd3d 	bl	80111b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e73a:	201d      	movs	r0, #29
 800e73c:	f002 fd6e 	bl	801121c <HAL_NVIC_EnableIRQ>
 800e740:	e774      	b.n	800e62c <HAL_UART_MspInit+0x34>
    __USART4_CLK_ENABLE();
 800e742:	4a47      	ldr	r2, [pc, #284]	; (800e860 <HAL_UART_MspInit+0x268>)
 800e744:	69d1      	ldr	r1, [r2, #28]
 800e746:	2080      	movs	r0, #128	; 0x80
 800e748:	0300      	lsls	r0, r0, #12
 800e74a:	4301      	orrs	r1, r0
 800e74c:	61d1      	str	r1, [r2, #28]
 800e74e:	69d3      	ldr	r3, [r2, #28]
 800e750:	4003      	ands	r3, r0
 800e752:	9304      	str	r3, [sp, #16]
 800e754:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800e756:	2401      	movs	r4, #1
 800e758:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e75a:	2502      	movs	r5, #2
 800e75c:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e75e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e760:	2603      	movs	r6, #3
 800e762:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800e764:	2704      	movs	r7, #4
 800e766:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800e768:	a907      	add	r1, sp, #28
 800e76a:	2090      	movs	r0, #144	; 0x90
 800e76c:	05c0      	lsls	r0, r0, #23
 800e76e:	f003 fceb 	bl	8012148 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800e772:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e774:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e776:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e778:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800e77a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800e77c:	a907      	add	r1, sp, #28
 800e77e:	2090      	movs	r0, #144	; 0x90
 800e780:	05c0      	lsls	r0, r0, #23
 800e782:	f003 fce1 	bl	8012148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e786:	2200      	movs	r2, #0
 800e788:	2101      	movs	r1, #1
 800e78a:	201d      	movs	r0, #29
 800e78c:	f002 fd12 	bl	80111b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e790:	201d      	movs	r0, #29
 800e792:	f002 fd43 	bl	801121c <HAL_NVIC_EnableIRQ>
 800e796:	e749      	b.n	800e62c <HAL_UART_MspInit+0x34>
    __USART5_CLK_ENABLE();
 800e798:	4a31      	ldr	r2, [pc, #196]	; (800e860 <HAL_UART_MspInit+0x268>)
 800e79a:	69d1      	ldr	r1, [r2, #28]
 800e79c:	2080      	movs	r0, #128	; 0x80
 800e79e:	0340      	lsls	r0, r0, #13
 800e7a0:	4301      	orrs	r1, r0
 800e7a2:	61d1      	str	r1, [r2, #28]
 800e7a4:	69d3      	ldr	r3, [r2, #28]
 800e7a6:	4003      	ands	r3, r0
 800e7a8:	9305      	str	r3, [sp, #20]
 800e7aa:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800e7ac:	2308      	movs	r3, #8
 800e7ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7b0:	2402      	movs	r4, #2
 800e7b2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e7b4:	2701      	movs	r7, #1
 800e7b6:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e7b8:	2603      	movs	r6, #3
 800e7ba:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800e7bc:	2504      	movs	r5, #4
 800e7be:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800e7c0:	a907      	add	r1, sp, #28
 800e7c2:	4828      	ldr	r0, [pc, #160]	; (800e864 <HAL_UART_MspInit+0x26c>)
 800e7c4:	f003 fcc0 	bl	8012148 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800e7c8:	2310      	movs	r3, #16
 800e7ca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7cc:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e7ce:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e7d0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800e7d2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800e7d4:	a907      	add	r1, sp, #28
 800e7d6:	4823      	ldr	r0, [pc, #140]	; (800e864 <HAL_UART_MspInit+0x26c>)
 800e7d8:	f003 fcb6 	bl	8012148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e7dc:	2200      	movs	r2, #0
 800e7de:	2101      	movs	r1, #1
 800e7e0:	201d      	movs	r0, #29
 800e7e2:	f002 fce7 	bl	80111b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e7e6:	201d      	movs	r0, #29
 800e7e8:	f002 fd18 	bl	801121c <HAL_NVIC_EnableIRQ>
 800e7ec:	e71e      	b.n	800e62c <HAL_UART_MspInit+0x34>
    __USART6_CLK_ENABLE();
 800e7ee:	4b1c      	ldr	r3, [pc, #112]	; (800e860 <HAL_UART_MspInit+0x268>)
 800e7f0:	699a      	ldr	r2, [r3, #24]
 800e7f2:	2420      	movs	r4, #32
 800e7f4:	4322      	orrs	r2, r4
 800e7f6:	619a      	str	r2, [r3, #24]
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	4023      	ands	r3, r4
 800e7fc:	9306      	str	r3, [sp, #24]
 800e7fe:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800e800:	2310      	movs	r3, #16
 800e802:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e804:	3b0e      	subs	r3, #14
 800e806:	4699      	mov	r9, r3
 800e808:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e80a:	2501      	movs	r5, #1
 800e80c:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e80e:	2703      	movs	r7, #3
 800e810:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e812:	2605      	movs	r6, #5
 800e814:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e816:	a907      	add	r1, sp, #28
 800e818:	2090      	movs	r0, #144	; 0x90
 800e81a:	05c0      	lsls	r0, r0, #23
 800e81c:	f003 fc94 	bl	8012148 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e820:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e822:	464b      	mov	r3, r9
 800e824:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e826:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e828:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800e82a:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e82c:	a907      	add	r1, sp, #28
 800e82e:	2090      	movs	r0, #144	; 0x90
 800e830:	05c0      	lsls	r0, r0, #23
 800e832:	f003 fc89 	bl	8012148 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e836:	2200      	movs	r2, #0
 800e838:	2101      	movs	r1, #1
 800e83a:	201d      	movs	r0, #29
 800e83c:	f002 fcba 	bl	80111b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e840:	201d      	movs	r0, #29
 800e842:	f002 fceb 	bl	801121c <HAL_NVIC_EnableIRQ>
}
 800e846:	e6f1      	b.n	800e62c <HAL_UART_MspInit+0x34>
 800e848:	40013800 	.word	0x40013800
 800e84c:	40004400 	.word	0x40004400
 800e850:	40004800 	.word	0x40004800
 800e854:	40004c00 	.word	0x40004c00
 800e858:	40005000 	.word	0x40005000
 800e85c:	40011400 	.word	0x40011400
 800e860:	40021000 	.word	0x40021000
 800e864:	48000400 	.word	0x48000400

0800e868 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e868:	2806      	cmp	r0, #6
 800e86a:	d80d      	bhi.n	800e888 <GetUart+0x20>
 800e86c:	0080      	lsls	r0, r0, #2
 800e86e:	4b08      	ldr	r3, [pc, #32]	; (800e890 <GetUart+0x28>)
 800e870:	581b      	ldr	r3, [r3, r0]
 800e872:	469f      	mov	pc, r3
		case P1 : 
			return P1uart;	
	#endif
	#ifdef _P2
		case P2 :
			return P2uart;
 800e874:	4807      	ldr	r0, [pc, #28]	; (800e894 <GetUart+0x2c>)
 800e876:	e00a      	b.n	800e88e <GetUart+0x26>
	#endif
	#ifdef _P3
		case P3 :
			return P3uart;
 800e878:	4807      	ldr	r0, [pc, #28]	; (800e898 <GetUart+0x30>)
 800e87a:	e008      	b.n	800e88e <GetUart+0x26>
	#endif
	#ifdef _P4
		case P4 :
			return P4uart;
 800e87c:	4807      	ldr	r0, [pc, #28]	; (800e89c <GetUart+0x34>)
 800e87e:	e006      	b.n	800e88e <GetUart+0x26>
	#endif
	#ifdef _P5
		case P5 :
			return P5uart;
 800e880:	4807      	ldr	r0, [pc, #28]	; (800e8a0 <GetUart+0x38>)
 800e882:	e004      	b.n	800e88e <GetUart+0x26>
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800e884:	4807      	ldr	r0, [pc, #28]	; (800e8a4 <GetUart+0x3c>)
 800e886:	e002      	b.n	800e88e <GetUart+0x26>
	#ifdef _P10
		case P10 :
			return P10uart;
	#endif
		default:
			return 0;
 800e888:	2000      	movs	r0, #0
 800e88a:	e000      	b.n	800e88e <GetUart+0x26>
			return P1uart;	
 800e88c:	4806      	ldr	r0, [pc, #24]	; (800e8a8 <GetUart+0x40>)
	}		
}
 800e88e:	4770      	bx	lr
 800e890:	0801c154 	.word	0x0801c154
 800e894:	200071e4 	.word	0x200071e4
 800e898:	200070f4 	.word	0x200070f4
 800e89c:	20006f8c 	.word	0x20006f8c
 800e8a0:	2000707c 	.word	0x2000707c
 800e8a4:	20007004 	.word	0x20007004
 800e8a8:	20007170 	.word	0x20007170

0800e8ac <writePxMutex>:
{
 800e8ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	0005      	movs	r5, r0
 800e8b2:	9100      	str	r1, [sp, #0]
 800e8b4:	0017      	movs	r7, r2
 800e8b6:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e8b8:	f7ff ffd6 	bl	800e868 <GetUart>
 800e8bc:	0004      	movs	r4, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e8be:	2601      	movs	r6, #1
	if (GetUart(port) != NULL) {
 800e8c0:	2800      	cmp	r0, #0
 800e8c2:	d016      	beq.n	800e8f2 <writePxMutex+0x46>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e8c4:	00ab      	lsls	r3, r5, #2
 800e8c6:	4a0c      	ldr	r2, [pc, #48]	; (800e8f8 <writePxMutex+0x4c>)
 800e8c8:	5898      	ldr	r0, [r3, r2]
 800e8ca:	9901      	ldr	r1, [sp, #4]
 800e8cc:	f000 f93a 	bl	800eb44 <osSemaphoreWait>
 800e8d0:	2800      	cmp	r0, #0
 800e8d2:	d10e      	bne.n	800e8f2 <writePxMutex+0x46>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e8d4:	9b08      	ldr	r3, [sp, #32]
 800e8d6:	003a      	movs	r2, r7
 800e8d8:	9900      	ldr	r1, [sp, #0]
 800e8da:	0020      	movs	r0, r4
 800e8dc:	f005 fbce 	bl	801407c <HAL_UART_Transmit>
 800e8e0:	1e06      	subs	r6, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e8e2:	d001      	beq.n	800e8e8 <writePxMutex+0x3c>
 800e8e4:	2803      	cmp	r0, #3
 800e8e6:	d1f5      	bne.n	800e8d4 <writePxMutex+0x28>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e8e8:	00ad      	lsls	r5, r5, #2
 800e8ea:	4b03      	ldr	r3, [pc, #12]	; (800e8f8 <writePxMutex+0x4c>)
 800e8ec:	58e8      	ldr	r0, [r5, r3]
 800e8ee:	f000 f955 	bl	800eb9c <osSemaphoreRelease>
}
 800e8f2:	0030      	movs	r0, r6
 800e8f4:	b003      	add	sp, #12
 800e8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f8:	20006ed8 	.word	0x20006ed8

0800e8fc <writePxITMutex>:
{
 800e8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8fe:	b083      	sub	sp, #12
 800e900:	0004      	movs	r4, r0
 800e902:	9101      	str	r1, [sp, #4]
 800e904:	0017      	movs	r7, r2
 800e906:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e908:	f7ff ffae 	bl	800e868 <GetUart>
 800e90c:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e90e:	2301      	movs	r3, #1
	if (GetUart(port) != NULL) {	
 800e910:	2800      	cmp	r0, #0
 800e912:	d008      	beq.n	800e926 <writePxITMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e914:	00a4      	lsls	r4, r4, #2
 800e916:	4b09      	ldr	r3, [pc, #36]	; (800e93c <writePxITMutex+0x40>)
 800e918:	58e0      	ldr	r0, [r4, r3]
 800e91a:	0029      	movs	r1, r5
 800e91c:	f000 f912 	bl	800eb44 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e920:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e922:	2800      	cmp	r0, #0
 800e924:	d002      	beq.n	800e92c <writePxITMutex+0x30>
}
 800e926:	0018      	movs	r0, r3
 800e928:	b003      	add	sp, #12
 800e92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e92c:	003a      	movs	r2, r7
 800e92e:	9901      	ldr	r1, [sp, #4]
 800e930:	0030      	movs	r0, r6
 800e932:	f005 f80d 	bl	8013950 <HAL_UART_Transmit_IT>
 800e936:	0003      	movs	r3, r0
 800e938:	e7f5      	b.n	800e926 <writePxITMutex+0x2a>
 800e93a:	46c0      	nop			; (mov r8, r8)
 800e93c:	20006ed8 	.word	0x20006ed8

0800e940 <writePxDMAMutex>:
{
 800e940:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e942:	b083      	sub	sp, #12
 800e944:	0004      	movs	r4, r0
 800e946:	000f      	movs	r7, r1
 800e948:	9201      	str	r2, [sp, #4]
 800e94a:	001e      	movs	r6, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e94c:	f7ff ff8c 	bl	800e868 <GetUart>
 800e950:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e952:	2301      	movs	r3, #1
	if (hUart != NULL) {	
 800e954:	2800      	cmp	r0, #0
 800e956:	d008      	beq.n	800e96a <writePxDMAMutex+0x2a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e958:	00a4      	lsls	r4, r4, #2
 800e95a:	4b0a      	ldr	r3, [pc, #40]	; (800e984 <writePxDMAMutex+0x44>)
 800e95c:	58e0      	ldr	r0, [r4, r3]
 800e95e:	0031      	movs	r1, r6
 800e960:	f000 f8f0 	bl	800eb44 <osSemaphoreWait>
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e964:	2301      	movs	r3, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e966:	2800      	cmp	r0, #0
 800e968:	d002      	beq.n	800e970 <writePxDMAMutex+0x30>
}
 800e96a:	0018      	movs	r0, r3
 800e96c:	b003      	add	sp, #12
 800e96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e970:	0028      	movs	r0, r5
 800e972:	f7ff f893 	bl	800da9c <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e976:	9a01      	ldr	r2, [sp, #4]
 800e978:	0039      	movs	r1, r7
 800e97a:	0028      	movs	r0, r5
 800e97c:	f005 f894 	bl	8013aa8 <HAL_UART_Transmit_DMA>
 800e980:	0003      	movs	r3, r0
 800e982:	e7f2      	b.n	800e96a <writePxDMAMutex+0x2a>
 800e984:	20006ed8 	.word	0x20006ed8

0800e988 <UpdateBaudrate>:
{
 800e988:	b510      	push	{r4, lr}
 800e98a:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e98c:	f7ff ff6c 	bl	800e868 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e990:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e992:	f005 fc19 	bl	80141c8 <HAL_UART_Init>
}
 800e996:	2000      	movs	r0, #0
 800e998:	bd10      	pop	{r4, pc}
	...

0800e99c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e99c:	b570      	push	{r4, r5, r6, lr}
 800e99e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e9a0:	d003      	beq.n	800e9aa <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e9a2:	2901      	cmp	r1, #1
 800e9a4:	d002      	beq.n	800e9ac <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e9a6:	2900      	cmp	r1, #0
 800e9a8:	d016      	beq.n	800e9d8 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e9aa:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e9ac:	f7fe f81a 	bl	800c9e4 <GetPort>
 800e9b0:	4b14      	ldr	r3, [pc, #80]	; (800ea04 <SwapUartPins+0x68>)
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	3b01      	subs	r3, #1
 800e9b6:	4d14      	ldr	r5, [pc, #80]	; (800ea08 <SwapUartPins+0x6c>)
 800e9b8:	005b      	lsls	r3, r3, #1
 800e9ba:	3801      	subs	r0, #1
 800e9bc:	2180      	movs	r1, #128	; 0x80
 800e9be:	0209      	lsls	r1, r1, #8
 800e9c0:	000a      	movs	r2, r1
 800e9c2:	4102      	asrs	r2, r0
 800e9c4:	5b58      	ldrh	r0, [r3, r5]
 800e9c6:	4302      	orrs	r2, r0
 800e9c8:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e9ca:	2308      	movs	r3, #8
 800e9cc:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e9ce:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e9d0:	0020      	movs	r0, r4
 800e9d2:	f005 fbf9 	bl	80141c8 <HAL_UART_Init>
 800e9d6:	e7e8      	b.n	800e9aa <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e9d8:	f7fe f804 	bl	800c9e4 <GetPort>
 800e9dc:	4b09      	ldr	r3, [pc, #36]	; (800ea04 <SwapUartPins+0x68>)
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	4d09      	ldr	r5, [pc, #36]	; (800ea08 <SwapUartPins+0x6c>)
 800e9e4:	005b      	lsls	r3, r3, #1
 800e9e6:	3801      	subs	r0, #1
 800e9e8:	2180      	movs	r1, #128	; 0x80
 800e9ea:	0209      	lsls	r1, r1, #8
 800e9ec:	4101      	asrs	r1, r0
 800e9ee:	5b5a      	ldrh	r2, [r3, r5]
 800e9f0:	438a      	bics	r2, r1
 800e9f2:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e9f4:	2308      	movs	r3, #8
 800e9f6:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e9fc:	0020      	movs	r0, r4
 800e9fe:	f005 fbe3 	bl	80141c8 <HAL_UART_Init>
}
 800ea02:	e7d2      	b.n	800e9aa <SwapUartPins+0xe>
 800ea04:	200010ea 	.word	0x200010ea
 800ea08:	2000735c 	.word	0x2000735c

0800ea0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 800ea0c:	4816      	ldr	r0, [pc, #88]	; (800ea68 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800ea0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800ea10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800ea12:	e003      	b.n	800ea1c <LoopCopyDataInit>

0800ea14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800ea14:	4b15      	ldr	r3, [pc, #84]	; (800ea6c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800ea16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800ea18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800ea1a:	3104      	adds	r1, #4

0800ea1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800ea1c:	4814      	ldr	r0, [pc, #80]	; (800ea70 <LoopForever+0xc>)
  ldr r3, =_edata
 800ea1e:	4b15      	ldr	r3, [pc, #84]	; (800ea74 <LoopForever+0x10>)
  adds r2, r0, r1
 800ea20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800ea22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800ea24:	d3f6      	bcc.n	800ea14 <CopyDataInit>
  ldr r2, =_sbss
 800ea26:	4a14      	ldr	r2, [pc, #80]	; (800ea78 <LoopForever+0x14>)
  b LoopFillZerobss
 800ea28:	e002      	b.n	800ea30 <LoopFillZerobss>

0800ea2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800ea2a:	2300      	movs	r3, #0
  str  r3, [r2]
 800ea2c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ea2e:	3204      	adds	r2, #4

0800ea30 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800ea30:	4b12      	ldr	r3, [pc, #72]	; (800ea7c <LoopForever+0x18>)
  cmp r2, r3
 800ea32:	429a      	cmp	r2, r3
  bcc FillZerobss
 800ea34:	d3f9      	bcc.n	800ea2a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800ea36:	4812      	ldr	r0, [pc, #72]	; (800ea80 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800ea38:	4912      	ldr	r1, [pc, #72]	; (800ea84 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800ea3a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800ea3c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800ea3e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800ea40:	d005      	beq.n	800ea4e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800ea42:	f000 f82b 	bl	800ea9c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800ea46:	f005 fd2b 	bl	80144a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800ea4a:	f005 fd12 	bl	8014472 <main>

0800ea4e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ea4e:	480e      	ldr	r0, [pc, #56]	; (800ea88 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ea50:	490e      	ldr	r1, [pc, #56]	; (800ea8c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ea52:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ea54:	480e      	ldr	r0, [pc, #56]	; (800ea90 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800ea56:	490d      	ldr	r1, [pc, #52]	; (800ea8c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800ea58:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ea5a:	480e      	ldr	r0, [pc, #56]	; (800ea94 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800ea5c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800ea5e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800ea60:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800ea62:	4700      	bx	r0

0800ea64 <LoopForever>:


LoopForever:
    b LoopForever
 800ea64:	e7fe      	b.n	800ea64 <LoopForever>
 800ea66:	0000      	.short	0x0000
	  ldr   r0, =_estack
 800ea68:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800ea6c:	0801c62c 	.word	0x0801c62c
  ldr r0, =_sdata
 800ea70:	20000020 	.word	0x20000020
  ldr r3, =_edata
 800ea74:	20000ac8 	.word	0x20000ac8
  ldr r2, =_sbss
 800ea78:	20000ac8 	.word	0x20000ac8
  ldr r3, = _ebss
 800ea7c:	20007400 	.word	0x20007400
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800ea80:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800ea84:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800ea88:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800ea8c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800ea90:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800ea94:	1fffd800 	.word	0x1fffd800

0800ea98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800ea98:	e7fe      	b.n	800ea98 <ADC1_COMP_IRQHandler>
	...

0800ea9c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800ea9c:	4b11      	ldr	r3, [pc, #68]	; (800eae4 <SystemInit+0x48>)
 800ea9e:	681a      	ldr	r2, [r3, #0]
 800eaa0:	2101      	movs	r1, #1
 800eaa2:	430a      	orrs	r2, r1
 800eaa4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800eaa6:	685a      	ldr	r2, [r3, #4]
 800eaa8:	480f      	ldr	r0, [pc, #60]	; (800eae8 <SystemInit+0x4c>)
 800eaaa:	4002      	ands	r2, r0
 800eaac:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800eaae:	681a      	ldr	r2, [r3, #0]
 800eab0:	480e      	ldr	r0, [pc, #56]	; (800eaec <SystemInit+0x50>)
 800eab2:	4002      	ands	r2, r0
 800eab4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	480d      	ldr	r0, [pc, #52]	; (800eaf0 <SystemInit+0x54>)
 800eaba:	4002      	ands	r2, r0
 800eabc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800eabe:	685a      	ldr	r2, [r3, #4]
 800eac0:	480c      	ldr	r0, [pc, #48]	; (800eaf4 <SystemInit+0x58>)
 800eac2:	4002      	ands	r2, r0
 800eac4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800eac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eac8:	200f      	movs	r0, #15
 800eaca:	4382      	bics	r2, r0
 800eacc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800eace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ead0:	4809      	ldr	r0, [pc, #36]	; (800eaf8 <SystemInit+0x5c>)
 800ead2:	4002      	ands	r2, r0
 800ead4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800ead6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ead8:	438a      	bics	r2, r1
 800eada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800eadc:	2200      	movs	r2, #0
 800eade:	609a      	str	r2, [r3, #8]

}
 800eae0:	4770      	bx	lr
 800eae2:	46c0      	nop			; (mov r8, r8)
 800eae4:	40021000 	.word	0x40021000
 800eae8:	08ffb80c 	.word	0x08ffb80c
 800eaec:	fef6ffff 	.word	0xfef6ffff
 800eaf0:	fffbffff 	.word	0xfffbffff
 800eaf4:	ffc0ffff 	.word	0xffc0ffff
 800eaf8:	fff0feac 	.word	0xfff0feac

0800eafc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eafc:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800eafe:	f000 ff55 	bl	800f9ac <vTaskStartScheduler>
  
  return osOK;
}
 800eb02:	2000      	movs	r0, #0
 800eb04:	bd10      	pop	{r4, pc}

0800eb06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eb06:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb08:	2800      	cmp	r0, #0
 800eb0a:	d100      	bne.n	800eb0e <osDelay+0x8>
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	f001 f889 	bl	800fc24 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eb12:	2000      	movs	r0, #0
 800eb14:	bd10      	pop	{r4, pc}

0800eb16 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800eb16:	b510      	push	{r4, lr}
 800eb18:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800eb1a:	2901      	cmp	r1, #1
 800eb1c:	d005      	beq.n	800eb2a <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800eb1e:	2100      	movs	r1, #0
 800eb20:	f000 faf6 	bl	800f110 <xQueueCreateCountingSemaphore>
 800eb24:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800eb26:	0020      	movs	r0, r4
 800eb28:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800eb2a:	2203      	movs	r2, #3
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	f000 fac8 	bl	800f0c2 <xQueueGenericCreate>
 800eb32:	1e04      	subs	r4, r0, #0
 800eb34:	d0f7      	beq.n	800eb26 <osSemaphoreCreate+0x10>
 800eb36:	2300      	movs	r3, #0
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	f000 fafc 	bl	800f138 <xQueueGenericSend>
 800eb40:	e7f1      	b.n	800eb26 <osSemaphoreCreate+0x10>
	...

0800eb44 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800eb44:	b500      	push	{lr}
 800eb46:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800eb48:	2300      	movs	r3, #0
 800eb4a:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d021      	beq.n	800eb94 <osSemaphoreWait+0x50>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb50:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d010      	beq.n	800eb7a <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eb58:	aa01      	add	r2, sp, #4
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	f000 fcae 	bl	800f4bc <xQueueReceiveFromISR>
 800eb60:	0003      	movs	r3, r0
      return osErrorOS;
 800eb62:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d113      	bne.n	800eb90 <osSemaphoreWait+0x4c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800eb68:	2000      	movs	r0, #0
	portEND_SWITCHING_ISR(taskWoken);
 800eb6a:	9b01      	ldr	r3, [sp, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00f      	beq.n	800eb90 <osSemaphoreWait+0x4c>
 800eb70:	4b09      	ldr	r3, [pc, #36]	; (800eb98 <osSemaphoreWait+0x54>)
 800eb72:	2280      	movs	r2, #128	; 0x80
 800eb74:	0552      	lsls	r2, r2, #21
 800eb76:	601a      	str	r2, [r3, #0]
 800eb78:	e00a      	b.n	800eb90 <osSemaphoreWait+0x4c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	000a      	movs	r2, r1
 800eb7e:	2100      	movs	r1, #0
 800eb80:	f000 fbf3 	bl	800f36a <xQueueGenericReceive>
  return osOK;
 800eb84:	3801      	subs	r0, #1
 800eb86:	1e43      	subs	r3, r0, #1
 800eb88:	4198      	sbcs	r0, r3
 800eb8a:	4240      	negs	r0, r0
 800eb8c:	23ff      	movs	r3, #255	; 0xff
 800eb8e:	4018      	ands	r0, r3
}
 800eb90:	b003      	add	sp, #12
 800eb92:	bd00      	pop	{pc}
    return osErrorParameter;
 800eb94:	2080      	movs	r0, #128	; 0x80
 800eb96:	e7fb      	b.n	800eb90 <osSemaphoreWait+0x4c>
 800eb98:	e000ed04 	.word	0xe000ed04

0800eb9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800eb9c:	b500      	push	{lr}
 800eb9e:	b083      	sub	sp, #12
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800eba0:	2300      	movs	r3, #0
 800eba2:	9301      	str	r3, [sp, #4]
 800eba4:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00f      	beq.n	800ebcc <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ebac:	a901      	add	r1, sp, #4
 800ebae:	f000 fba1 	bl	800f2f4 <xQueueGiveFromISR>
 800ebb2:	0003      	movs	r3, r0
      return osErrorOS;
 800ebb4:	20ff      	movs	r0, #255	; 0xff
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ebb6:	2b01      	cmp	r3, #1
 800ebb8:	d114      	bne.n	800ebe4 <osSemaphoreRelease+0x48>
  osStatus result = osOK;
 800ebba:	2000      	movs	r0, #0
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebbc:	9b01      	ldr	r3, [sp, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d010      	beq.n	800ebe4 <osSemaphoreRelease+0x48>
 800ebc2:	4b09      	ldr	r3, [pc, #36]	; (800ebe8 <osSemaphoreRelease+0x4c>)
 800ebc4:	2280      	movs	r2, #128	; 0x80
 800ebc6:	0552      	lsls	r2, r2, #21
 800ebc8:	601a      	str	r2, [r3, #0]
 800ebca:	e00b      	b.n	800ebe4 <osSemaphoreRelease+0x48>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ebcc:	2300      	movs	r3, #0
 800ebce:	2200      	movs	r2, #0
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	f000 fab1 	bl	800f138 <xQueueGenericSend>
      result = osErrorOS;
 800ebd6:	3801      	subs	r0, #1
 800ebd8:	4243      	negs	r3, r0
 800ebda:	4158      	adcs	r0, r3
 800ebdc:	4240      	negs	r0, r0
 800ebde:	23fe      	movs	r3, #254	; 0xfe
 800ebe0:	4398      	bics	r0, r3
 800ebe2:	30ff      	adds	r0, #255	; 0xff
    }
  }
  
  return result;
}
 800ebe4:	b003      	add	sp, #12
 800ebe6:	bd00      	pop	{pc}
 800ebe8:	e000ed04 	.word	0xe000ed04

0800ebec <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800ebec:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ebee:	f001 fa0f 	bl	8010010 <xTaskGetSchedulerState>
 800ebf2:	2801      	cmp	r0, #1
 800ebf4:	d001      	beq.n	800ebfa <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800ebf6:	f001 fe85 	bl	8010904 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800ebfa:	bd10      	pop	{r4, pc}

0800ebfc <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800ebfc:	b570      	push	{r4, r5, r6, lr}
 800ebfe:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800ec00:	d101      	bne.n	800ec06 <FreeRTOS_CLIRegisterCommand+0xa>
 800ec02:	b672      	cpsid	i
 800ec04:	e7fe      	b.n	800ec04 <FreeRTOS_CLIRegisterCommand+0x8>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800ec06:	2008      	movs	r0, #8
 800ec08:	f001 feb8 	bl	801097c <pvPortMalloc>
 800ec0c:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800ec0e:	d101      	bne.n	800ec14 <FreeRTOS_CLIRegisterCommand+0x18>
 800ec10:	b672      	cpsid	i
 800ec12:	e7fe      	b.n	800ec12 <FreeRTOS_CLIRegisterCommand+0x16>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800ec14:	f001 fe30 	bl	8010878 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800ec18:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800ec1e:	4b04      	ldr	r3, [pc, #16]	; (800ec30 <FreeRTOS_CLIRegisterCommand+0x34>)
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800ec24:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800ec26:	f001 fe33 	bl	8010890 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800ec2a:	2001      	movs	r0, #1
 800ec2c:	bd70      	pop	{r4, r5, r6, pc}
 800ec2e:	46c0      	nop			; (mov r8, r8)
 800ec30:	20000104 	.word	0x20000104

0800ec34 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800ec34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec36:	46d6      	mov	lr, sl
 800ec38:	b500      	push	{lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	9001      	str	r0, [sp, #4]
 800ec3e:	9102      	str	r1, [sp, #8]
 800ec40:	9203      	str	r2, [sp, #12]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800ec42:	4b37      	ldr	r3, [pc, #220]	; (800ed20 <FreeRTOS_CLIProcessCommand+0xec>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d00e      	beq.n	800ec68 <FreeRTOS_CLIProcessCommand+0x34>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	689b      	ldr	r3, [r3, #8]
 800ec4e:	9a01      	ldr	r2, [sp, #4]
 800ec50:	9903      	ldr	r1, [sp, #12]
 800ec52:	9802      	ldr	r0, [sp, #8]
 800ec54:	4798      	blx	r3

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800ec56:	2800      	cmp	r0, #0
 800ec58:	d102      	bne.n	800ec60 <FreeRTOS_CLIProcessCommand+0x2c>
		{
			pxCommand = NULL;
 800ec5a:	4b31      	ldr	r3, [pc, #196]	; (800ed20 <FreeRTOS_CLIProcessCommand+0xec>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800ec60:	b004      	add	sp, #16
 800ec62:	bc04      	pop	{r2}
 800ec64:	4692      	mov	sl, r2
 800ec66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ec68:	4d2e      	ldr	r5, [pc, #184]	; (800ed24 <FreeRTOS_CLIProcessCommand+0xf0>)
 800ec6a:	4a2d      	ldr	r2, [pc, #180]	; (800ed20 <FreeRTOS_CLIProcessCommand+0xec>)
 800ec6c:	6015      	str	r5, [r2, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ec6e:	3320      	adds	r3, #32
 800ec70:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ec72:	0017      	movs	r7, r2
 800ec74:	e00a      	b.n	800ec8c <FreeRTOS_CLIProcessCommand+0x58>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ec76:	0002      	movs	r2, r0
 800ec78:	0021      	movs	r1, r4
 800ec7a:	9801      	ldr	r0, [sp, #4]
 800ec7c:	f006 f90c 	bl	8014e98 <strncmp>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d00e      	beq.n	800eca2 <FreeRTOS_CLIProcessCommand+0x6e>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ec84:	686d      	ldr	r5, [r5, #4]
 800ec86:	603d      	str	r5, [r7, #0]
 800ec88:	2d00      	cmp	r5, #0
 800ec8a:	d012      	beq.n	800ecb2 <FreeRTOS_CLIProcessCommand+0x7e>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ec8c:	682e      	ldr	r6, [r5, #0]
 800ec8e:	6834      	ldr	r4, [r6, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ec90:	0020      	movs	r0, r4
 800ec92:	f7f1 fa41 	bl	8000118 <strlen>
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ec96:	9b01      	ldr	r3, [sp, #4]
 800ec98:	5c1b      	ldrb	r3, [r3, r0]
 800ec9a:	4652      	mov	r2, sl
 800ec9c:	4393      	bics	r3, r2
 800ec9e:	d1f1      	bne.n	800ec84 <FreeRTOS_CLIProcessCommand+0x50>
 800eca0:	e7e9      	b.n	800ec76 <FreeRTOS_CLIProcessCommand+0x42>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800eca2:	200c      	movs	r0, #12
 800eca4:	5630      	ldrsb	r0, [r6, r0]
 800eca6:	2800      	cmp	r0, #0
 800eca8:	da0a      	bge.n	800ecc0 <FreeRTOS_CLIProcessCommand+0x8c>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ecaa:	4b1d      	ldr	r3, [pc, #116]	; (800ed20 <FreeRTOS_CLIProcessCommand+0xec>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1cb      	bne.n	800ec4a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ecb2:	9a03      	ldr	r2, [sp, #12]
 800ecb4:	491c      	ldr	r1, [pc, #112]	; (800ed28 <FreeRTOS_CLIProcessCommand+0xf4>)
 800ecb6:	9802      	ldr	r0, [sp, #8]
 800ecb8:	f006 f8ff 	bl	8014eba <strncpy>
		xReturn = pdFALSE;
 800ecbc:	2000      	movs	r0, #0
	return xReturn;
 800ecbe:	e7cf      	b.n	800ec60 <FreeRTOS_CLIProcessCommand+0x2c>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ecc0:	9a01      	ldr	r2, [sp, #4]
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	56d3      	ldrsb	r3, [r2, r3]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d027      	beq.n	800ed1a <FreeRTOS_CLIProcessCommand+0xe6>
int8_t cParameters = 0;
 800ecca:	2400      	movs	r4, #0
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800eccc:	2100      	movs	r1, #0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ecce:	2600      	movs	r6, #0
				xLastCharacterWasSpace = pdTRUE;
 800ecd0:	2501      	movs	r5, #1
 800ecd2:	e009      	b.n	800ece8 <FreeRTOS_CLIProcessCommand+0xb4>
			if( xLastCharacterWasSpace != pdTRUE )
 800ecd4:	2901      	cmp	r1, #1
 800ecd6:	d002      	beq.n	800ecde <FreeRTOS_CLIProcessCommand+0xaa>
				cParameters++;
 800ecd8:	3401      	adds	r4, #1
 800ecda:	b264      	sxtb	r4, r4
				xLastCharacterWasSpace = pdTRUE;
 800ecdc:	0029      	movs	r1, r5
		}

		pcCommandString++;
 800ecde:	3201      	adds	r2, #1
	while( *pcCommandString != 0x00 )
 800ece0:	2300      	movs	r3, #0
 800ece2:	56d3      	ldrsb	r3, [r2, r3]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d003      	beq.n	800ecf0 <FreeRTOS_CLIProcessCommand+0xbc>
		if( ( *pcCommandString ) == ' ' )
 800ece8:	2b20      	cmp	r3, #32
 800ecea:	d0f3      	beq.n	800ecd4 <FreeRTOS_CLIProcessCommand+0xa0>
			xLastCharacterWasSpace = pdFALSE;
 800ecec:	0031      	movs	r1, r6
 800ecee:	e7f6      	b.n	800ecde <FreeRTOS_CLIProcessCommand+0xaa>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ecf0:	2901      	cmp	r1, #1
 800ecf2:	d00f      	beq.n	800ed14 <FreeRTOS_CLIProcessCommand+0xe0>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ecf4:	4b0a      	ldr	r3, [pc, #40]	; (800ed20 <FreeRTOS_CLIProcessCommand+0xec>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d0da      	beq.n	800ecb2 <FreeRTOS_CLIProcessCommand+0x7e>
 800ecfc:	42a0      	cmp	r0, r4
 800ecfe:	d0a4      	beq.n	800ec4a <FreeRTOS_CLIProcessCommand+0x16>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ed00:	9a03      	ldr	r2, [sp, #12]
 800ed02:	490a      	ldr	r1, [pc, #40]	; (800ed2c <FreeRTOS_CLIProcessCommand+0xf8>)
 800ed04:	9802      	ldr	r0, [sp, #8]
 800ed06:	f006 f8d8 	bl	8014eba <strncpy>
		pxCommand = NULL;
 800ed0a:	4b05      	ldr	r3, [pc, #20]	; (800ed20 <FreeRTOS_CLIProcessCommand+0xec>)
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	601a      	str	r2, [r3, #0]
 800ed10:	2000      	movs	r0, #0
 800ed12:	e7a5      	b.n	800ec60 <FreeRTOS_CLIProcessCommand+0x2c>
	{
		cParameters--;
 800ed14:	3c01      	subs	r4, #1
 800ed16:	b264      	sxtb	r4, r4
 800ed18:	e7ec      	b.n	800ecf4 <FreeRTOS_CLIProcessCommand+0xc0>
int8_t cParameters = 0;
 800ed1a:	2400      	movs	r4, #0
 800ed1c:	e7ea      	b.n	800ecf4 <FreeRTOS_CLIProcessCommand+0xc0>
 800ed1e:	46c0      	nop			; (mov r8, r8)
 800ed20:	200021d8 	.word	0x200021d8
 800ed24:	20000108 	.word	0x20000108
 800ed28:	0801c1c8 	.word	0x0801c1c8
 800ed2c:	0801c170 	.word	0x0801c170

0800ed30 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ed30:	4800      	ldr	r0, [pc, #0]	; (800ed34 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ed32:	4770      	bx	lr
 800ed34:	20001f70 	.word	0x20001f70

0800ed38 <FreeRTOS_CLIGetParameter>:
{
 800ed38:	b530      	push	{r4, r5, lr}
	*pxParameterStringLength = 0;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ed3e:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ed40:	2900      	cmp	r1, #0
 800ed42:	d10b      	bne.n	800ed5c <FreeRTOS_CLIGetParameter+0x24>
const int8_t *pcReturn = NULL;
 800ed44:	2000      	movs	r0, #0
 800ed46:	e02a      	b.n	800ed9e <FreeRTOS_CLIGetParameter+0x66>
			pcCommandString++;
 800ed48:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	56c3      	ldrsb	r3, [r0, r3]
 800ed4e:	2b20      	cmp	r3, #32
 800ed50:	d0fa      	beq.n	800ed48 <FreeRTOS_CLIGetParameter+0x10>
		if( *pcCommandString != 0x00 )
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d022      	beq.n	800ed9c <FreeRTOS_CLIGetParameter+0x64>
			uxParametersFound++;
 800ed56:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800ed58:	42a1      	cmp	r1, r4
 800ed5a:	d00d      	beq.n	800ed78 <FreeRTOS_CLIGetParameter+0x40>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	56c3      	ldrsb	r3, [r0, r3]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d01f      	beq.n	800eda4 <FreeRTOS_CLIGetParameter+0x6c>
 800ed64:	2b20      	cmp	r3, #32
 800ed66:	d0ef      	beq.n	800ed48 <FreeRTOS_CLIGetParameter+0x10>
			pcCommandString++;
 800ed68:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	56c3      	ldrsb	r3, [r0, r3]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d018      	beq.n	800eda4 <FreeRTOS_CLIGetParameter+0x6c>
 800ed72:	2b20      	cmp	r3, #32
 800ed74:	d1f8      	bne.n	800ed68 <FreeRTOS_CLIGetParameter+0x30>
 800ed76:	e7e7      	b.n	800ed48 <FreeRTOS_CLIGetParameter+0x10>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed78:	7803      	ldrb	r3, [r0, #0]
 800ed7a:	2120      	movs	r1, #32
 800ed7c:	438b      	bics	r3, r1
 800ed7e:	d00f      	beq.n	800eda0 <FreeRTOS_CLIGetParameter+0x68>
 800ed80:	0004      	movs	r4, r0
 800ed82:	2520      	movs	r5, #32
					( *pxParameterStringLength )++;
 800ed84:	6813      	ldr	r3, [r2, #0]
 800ed86:	3301      	adds	r3, #1
 800ed88:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800ed8a:	3401      	adds	r4, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed8c:	7821      	ldrb	r1, [r4, #0]
 800ed8e:	43a9      	bics	r1, r5
 800ed90:	d1f8      	bne.n	800ed84 <FreeRTOS_CLIGetParameter+0x4c>
					pcReturn = NULL;
 800ed92:	1e5a      	subs	r2, r3, #1
 800ed94:	4193      	sbcs	r3, r2
 800ed96:	425b      	negs	r3, r3
 800ed98:	4018      	ands	r0, r3
 800ed9a:	e000      	b.n	800ed9e <FreeRTOS_CLIGetParameter+0x66>
const int8_t *pcReturn = NULL;
 800ed9c:	2000      	movs	r0, #0
}
 800ed9e:	bd30      	pop	{r4, r5, pc}
					pcReturn = NULL;
 800eda0:	2000      	movs	r0, #0
 800eda2:	e7fc      	b.n	800ed9e <FreeRTOS_CLIGetParameter+0x66>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800eda4:	2300      	movs	r3, #0
 800eda6:	56c3      	ldrsb	r3, [r0, r3]
 800eda8:	e7d3      	b.n	800ed52 <FreeRTOS_CLIGetParameter+0x1a>
	...

0800edac <prvHelpCommand>:
{
 800edac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edae:	b083      	sub	sp, #12
 800edb0:	0004      	movs	r4, r0
 800edb2:	000d      	movs	r5, r1
 800edb4:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800edb6:	2300      	movs	r3, #0
 800edb8:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800edba:	aa01      	add	r2, sp, #4
 800edbc:	2101      	movs	r1, #1
 800edbe:	f7ff ffbb 	bl	800ed38 <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d027      	beq.n	800ee16 <prvHelpCommand+0x6a>
 800edc6:	2206      	movs	r2, #6
 800edc8:	4930      	ldr	r1, [pc, #192]	; (800ee8c <prvHelpCommand+0xe0>)
 800edca:	f006 f865 	bl	8014e98 <strncmp>
 800edce:	2800      	cmp	r0, #0
 800edd0:	d149      	bne.n	800ee66 <prvHelpCommand+0xba>
		if( str == NumOfParamsHelpStrings )
 800edd2:	4b2f      	ldr	r3, [pc, #188]	; (800ee90 <prvHelpCommand+0xe4>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	2b07      	cmp	r3, #7
 800edd8:	d012      	beq.n	800ee00 <prvHelpCommand+0x54>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800edda:	1c5f      	adds	r7, r3, #1
 800eddc:	b2ff      	uxtb	r7, r7
 800edde:	4a2c      	ldr	r2, [pc, #176]	; (800ee90 <prvHelpCommand+0xe4>)
 800ede0:	7017      	strb	r7, [r2, #0]
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	4a2b      	ldr	r2, [pc, #172]	; (800ee94 <prvHelpCommand+0xe8>)
 800ede6:	5899      	ldr	r1, [r3, r2]
 800ede8:	002a      	movs	r2, r5
 800edea:	0020      	movs	r0, r4
 800edec:	f006 f865 	bl	8014eba <strncpy>
			xReturn = pdTRUE;
 800edf0:	2601      	movs	r6, #1
		if( str == NumOfParamsHelpStrings )
 800edf2:	2f07      	cmp	r7, #7
 800edf4:	d137      	bne.n	800ee66 <prvHelpCommand+0xba>
			xReturn = pdFALSE; str = 0;
 800edf6:	4b26      	ldr	r3, [pc, #152]	; (800ee90 <prvHelpCommand+0xe4>)
 800edf8:	2200      	movs	r2, #0
 800edfa:	701a      	strb	r2, [r3, #0]
 800edfc:	2600      	movs	r6, #0
 800edfe:	e032      	b.n	800ee66 <prvHelpCommand+0xba>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ee00:	4b23      	ldr	r3, [pc, #140]	; (800ee90 <prvHelpCommand+0xe4>)
 800ee02:	2201      	movs	r2, #1
 800ee04:	701a      	strb	r2, [r3, #0]
 800ee06:	4b23      	ldr	r3, [pc, #140]	; (800ee94 <prvHelpCommand+0xe8>)
 800ee08:	6819      	ldr	r1, [r3, #0]
 800ee0a:	002a      	movs	r2, r5
 800ee0c:	0020      	movs	r0, r4
 800ee0e:	f006 f854 	bl	8014eba <strncpy>
			xReturn = pdTRUE;
 800ee12:	2601      	movs	r6, #1
 800ee14:	e027      	b.n	800ee66 <prvHelpCommand+0xba>
		if( pxCommand == NULL )
 800ee16:	4b20      	ldr	r3, [pc, #128]	; (800ee98 <prvHelpCommand+0xec>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d026      	beq.n	800ee6c <prvHelpCommand+0xc0>
		if (counter > numOfBosCommands) {
 800ee1e:	4b1f      	ldr	r3, [pc, #124]	; (800ee9c <prvHelpCommand+0xf0>)
 800ee20:	781a      	ldrb	r2, [r3, #0]
 800ee22:	4b1f      	ldr	r3, [pc, #124]	; (800eea0 <prvHelpCommand+0xf4>)
 800ee24:	781b      	ldrb	r3, [r3, #0]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	d927      	bls.n	800ee7a <prvHelpCommand+0xce>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ee2a:	002a      	movs	r2, r5
 800ee2c:	3a08      	subs	r2, #8
 800ee2e:	4b1a      	ldr	r3, [pc, #104]	; (800ee98 <prvHelpCommand+0xec>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	6859      	ldr	r1, [r3, #4]
 800ee36:	0020      	movs	r0, r4
 800ee38:	3008      	adds	r0, #8
 800ee3a:	f006 f83e 	bl	8014eba <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ee3e:	1c60      	adds	r0, r4, #1
 800ee40:	4918      	ldr	r1, [pc, #96]	; (800eea4 <prvHelpCommand+0xf8>)
 800ee42:	f006 f821 	bl	8014e88 <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ee46:	2328      	movs	r3, #40	; 0x28
 800ee48:	7023      	strb	r3, [r4, #0]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	71a3      	strb	r3, [r4, #6]
 800ee4e:	3b09      	subs	r3, #9
 800ee50:	71e3      	strb	r3, [r4, #7]
		pxCommand = pxCommand->pxNext;
 800ee52:	4b11      	ldr	r3, [pc, #68]	; (800ee98 <prvHelpCommand+0xec>)
 800ee54:	681a      	ldr	r2, [r3, #0]
 800ee56:	6856      	ldr	r6, [r2, #4]
 800ee58:	601e      	str	r6, [r3, #0]
		counter++;
 800ee5a:	4a10      	ldr	r2, [pc, #64]	; (800ee9c <prvHelpCommand+0xf0>)
 800ee5c:	7813      	ldrb	r3, [r2, #0]
 800ee5e:	3301      	adds	r3, #1
 800ee60:	7013      	strb	r3, [r2, #0]
			xReturn = pdTRUE;
 800ee62:	1e73      	subs	r3, r6, #1
 800ee64:	419e      	sbcs	r6, r3
}
 800ee66:	0030      	movs	r0, r6
 800ee68:	b003      	add	sp, #12
 800ee6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ee6c:	4b0a      	ldr	r3, [pc, #40]	; (800ee98 <prvHelpCommand+0xec>)
 800ee6e:	4a0e      	ldr	r2, [pc, #56]	; (800eea8 <prvHelpCommand+0xfc>)
 800ee70:	601a      	str	r2, [r3, #0]
			counter = 1;
 800ee72:	4b0a      	ldr	r3, [pc, #40]	; (800ee9c <prvHelpCommand+0xf0>)
 800ee74:	2201      	movs	r2, #1
 800ee76:	701a      	strb	r2, [r3, #0]
 800ee78:	e7d1      	b.n	800ee1e <prvHelpCommand+0x72>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800ee7a:	4b07      	ldr	r3, [pc, #28]	; (800ee98 <prvHelpCommand+0xec>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	6859      	ldr	r1, [r3, #4]
 800ee82:	002a      	movs	r2, r5
 800ee84:	0020      	movs	r0, r4
 800ee86:	f006 f818 	bl	8014eba <strncpy>
 800ee8a:	e7e2      	b.n	800ee52 <prvHelpCommand+0xa6>
 800ee8c:	0801a020 	.word	0x0801a020
 800ee90:	200021e0 	.word	0x200021e0
 800ee94:	2000007c 	.word	0x2000007c
 800ee98:	200021dc 	.word	0x200021dc
 800ee9c:	200021d4 	.word	0x200021d4
 800eea0:	20006dd0 	.word	0x20006dd0
 800eea4:	08019602 	.word	0x08019602
 800eea8:	20000108 	.word	0x20000108

0800eeac <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeac:	0003      	movs	r3, r0
 800eeae:	3308      	adds	r3, #8
 800eeb0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eeb2:	2201      	movs	r2, #1
 800eeb4:	4252      	negs	r2, r2
 800eeb6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeb8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeba:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eebc:	2300      	movs	r3, #0
 800eebe:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eec0:	4770      	bx	lr

0800eec2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800eec2:	2300      	movs	r3, #0
 800eec4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eec6:	4770      	bx	lr

0800eec8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800eec8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eeca:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eecc:	689a      	ldr	r2, [r3, #8]
 800eece:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eed0:	689a      	ldr	r2, [r3, #8]
 800eed2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eed4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800eed6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800eed8:	6803      	ldr	r3, [r0, #0]
 800eeda:	3301      	adds	r3, #1
 800eedc:	6003      	str	r3, [r0, #0]
}
 800eede:	4770      	bx	lr

0800eee0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eee0:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800eee2:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eee4:	0002      	movs	r2, r0
 800eee6:	3208      	adds	r2, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800eee8:	1c63      	adds	r3, r4, #1
 800eeea:	d102      	bne.n	800eef2 <vListInsert+0x12>
		pxIterator = pxList->xListEnd.pxPrevious;
 800eeec:	6902      	ldr	r2, [r0, #16]
 800eeee:	e004      	b.n	800eefa <vListInsert+0x1a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eef0:	001a      	movs	r2, r3
 800eef2:	6853      	ldr	r3, [r2, #4]
 800eef4:	681d      	ldr	r5, [r3, #0]
 800eef6:	42a5      	cmp	r5, r4
 800eef8:	d9fa      	bls.n	800eef0 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800eefa:	6853      	ldr	r3, [r2, #4]
 800eefc:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800eefe:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef00:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef02:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ef04:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ef06:	6803      	ldr	r3, [r0, #0]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	6003      	str	r3, [r0, #0]
}
 800ef0c:	bd30      	pop	{r4, r5, pc}

0800ef0e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ef0e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef10:	6842      	ldr	r2, [r0, #4]
 800ef12:	6881      	ldr	r1, [r0, #8]
 800ef14:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef16:	6882      	ldr	r2, [r0, #8]
 800ef18:	6841      	ldr	r1, [r0, #4]
 800ef1a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef1c:	685a      	ldr	r2, [r3, #4]
 800ef1e:	4282      	cmp	r2, r0
 800ef20:	d005      	beq.n	800ef2e <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ef22:	2200      	movs	r2, #0
 800ef24:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	1e50      	subs	r0, r2, #1
 800ef2a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ef2c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef2e:	6882      	ldr	r2, [r0, #8]
 800ef30:	605a      	str	r2, [r3, #4]
 800ef32:	e7f6      	b.n	800ef22 <uxListRemove+0x14>

0800ef34 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef34:	b570      	push	{r4, r5, r6, lr}
 800ef36:	0004      	movs	r4, r0
 800ef38:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ef3c:	2a00      	cmp	r2, #0
 800ef3e:	d10d      	bne.n	800ef5c <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ef40:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef42:	6823      	ldr	r3, [r4, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d003      	beq.n	800ef50 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ef48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef4a:	3301      	adds	r3, #1
 800ef4c:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ef4e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ef50:	6860      	ldr	r0, [r4, #4]
 800ef52:	f001 f8ab 	bl	80100ac <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ef56:	2300      	movs	r3, #0
 800ef58:	6063      	str	r3, [r4, #4]
 800ef5a:	e7f5      	b.n	800ef48 <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ef5c:	2d00      	cmp	r5, #0
 800ef5e:	d10e      	bne.n	800ef7e <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ef60:	6880      	ldr	r0, [r0, #8]
 800ef62:	f005 fd20 	bl	80149a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ef66:	68a3      	ldr	r3, [r4, #8]
 800ef68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ef6a:	4694      	mov	ip, r2
 800ef6c:	4463      	add	r3, ip
 800ef6e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ef70:	2000      	movs	r0, #0
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef72:	6862      	ldr	r2, [r4, #4]
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d3e7      	bcc.n	800ef48 <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef78:	6823      	ldr	r3, [r4, #0]
 800ef7a:	60a3      	str	r3, [r4, #8]
 800ef7c:	e7e4      	b.n	800ef48 <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef7e:	68c0      	ldr	r0, [r0, #12]
 800ef80:	f005 fd11 	bl	80149a6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800ef84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ef86:	425a      	negs	r2, r3
 800ef88:	68e3      	ldr	r3, [r4, #12]
 800ef8a:	189b      	adds	r3, r3, r2
 800ef8c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef8e:	6821      	ldr	r1, [r4, #0]
 800ef90:	428b      	cmp	r3, r1
 800ef92:	d203      	bcs.n	800ef9c <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800ef94:	6863      	ldr	r3, [r4, #4]
 800ef96:	469c      	mov	ip, r3
 800ef98:	4462      	add	r2, ip
 800ef9a:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800ef9c:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800ef9e:	2d02      	cmp	r5, #2
 800efa0:	d1d2      	bne.n	800ef48 <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d0cf      	beq.n	800ef48 <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800efa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efaa:	3b01      	subs	r3, #1
 800efac:	63a3      	str	r3, [r4, #56]	; 0x38
 800efae:	e7cb      	b.n	800ef48 <prvCopyDataToQueue+0x14>

0800efb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800efb0:	b510      	push	{r4, lr}
 800efb2:	000c      	movs	r4, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800efb4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800efb6:	2a00      	cmp	r2, #0
 800efb8:	d00b      	beq.n	800efd2 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800efba:	68c3      	ldr	r3, [r0, #12]
 800efbc:	189b      	adds	r3, r3, r2
 800efbe:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800efc0:	6841      	ldr	r1, [r0, #4]
 800efc2:	428b      	cmp	r3, r1
 800efc4:	d301      	bcc.n	800efca <prvCopyDataFromQueue+0x1a>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800efc6:	6803      	ldr	r3, [r0, #0]
 800efc8:	60c3      	str	r3, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800efca:	68c1      	ldr	r1, [r0, #12]
 800efcc:	0020      	movs	r0, r4
 800efce:	f005 fcea 	bl	80149a6 <memcpy>
	}
}
 800efd2:	bd10      	pop	{r4, pc}

0800efd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800efd4:	b570      	push	{r4, r5, r6, lr}
 800efd6:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800efd8:	f001 fc4e 	bl	8010878 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800efdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800efde:	2b00      	cmp	r3, #0
 800efe0:	dd04      	ble.n	800efec <prvUnlockQueue+0x18>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efe2:	0025      	movs	r5, r4
 800efe4:	3524      	adds	r5, #36	; 0x24
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d11f      	bne.n	800f02c <prvUnlockQueue+0x58>
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800efec:	2301      	movs	r3, #1
 800efee:	425b      	negs	r3, r3
 800eff0:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800eff2:	f001 fc4d 	bl	8010890 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800eff6:	f001 fc3f 	bl	8010878 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800effa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800effc:	2b00      	cmp	r3, #0
 800effe:	dd04      	ble.n	800f00a <prvUnlockQueue+0x36>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f000:	0025      	movs	r5, r4
 800f002:	3510      	adds	r5, #16
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f004:	6923      	ldr	r3, [r4, #16]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d121      	bne.n	800f04e <prvUnlockQueue+0x7a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800f00a:	2301      	movs	r3, #1
 800f00c:	425b      	negs	r3, r3
 800f00e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f010:	f001 fc3e 	bl	8010890 <vPortExitCritical>
}
 800f014:	bd70      	pop	{r4, r5, r6, pc}
						vTaskMissedYield();
 800f016:	f000 fff5 	bl	8010004 <vTaskMissedYield>
			--( pxQueue->xTxLock );
 800f01a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f01c:	3b01      	subs	r3, #1
 800f01e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f020:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f022:	2b00      	cmp	r3, #0
 800f024:	dde2      	ble.n	800efec <prvUnlockQueue+0x18>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d0df      	beq.n	800efec <prvUnlockQueue+0x18>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f02c:	0028      	movs	r0, r5
 800f02e:	f000 ff67 	bl	800ff00 <xTaskRemoveFromEventList>
 800f032:	2800      	cmp	r0, #0
 800f034:	d0f1      	beq.n	800f01a <prvUnlockQueue+0x46>
 800f036:	e7ee      	b.n	800f016 <prvUnlockQueue+0x42>
					vTaskMissedYield();
 800f038:	f000 ffe4 	bl	8010004 <vTaskMissedYield>
				--( pxQueue->xRxLock );
 800f03c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f03e:	3b01      	subs	r3, #1
 800f040:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f042:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f044:	2b00      	cmp	r3, #0
 800f046:	dde0      	ble.n	800f00a <prvUnlockQueue+0x36>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f048:	6923      	ldr	r3, [r4, #16]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0dd      	beq.n	800f00a <prvUnlockQueue+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f04e:	0028      	movs	r0, r5
 800f050:	f000 ff56 	bl	800ff00 <xTaskRemoveFromEventList>
 800f054:	2800      	cmp	r0, #0
 800f056:	d0f1      	beq.n	800f03c <prvUnlockQueue+0x68>
 800f058:	e7ee      	b.n	800f038 <prvUnlockQueue+0x64>

0800f05a <xQueueGenericReset>:
{
 800f05a:	b570      	push	{r4, r5, r6, lr}
 800f05c:	0004      	movs	r4, r0
 800f05e:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800f060:	2800      	cmp	r0, #0
 800f062:	d101      	bne.n	800f068 <xQueueGenericReset+0xe>
 800f064:	b672      	cpsid	i
 800f066:	e7fe      	b.n	800f066 <xQueueGenericReset+0xc>
	taskENTER_CRITICAL();
 800f068:	f001 fc06 	bl	8010878 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f06c:	6822      	ldr	r2, [r4, #0]
 800f06e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f070:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f072:	434b      	muls	r3, r1
 800f074:	18d0      	adds	r0, r2, r3
 800f076:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f078:	2000      	movs	r0, #0
 800f07a:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f07c:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f07e:	1a5b      	subs	r3, r3, r1
 800f080:	18d3      	adds	r3, r2, r3
 800f082:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800f084:	2301      	movs	r3, #1
 800f086:	425b      	negs	r3, r3
 800f088:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800f08a:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800f08c:	2d00      	cmp	r5, #0
 800f08e:	d10f      	bne.n	800f0b0 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f090:	6923      	ldr	r3, [r4, #16]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d103      	bne.n	800f09e <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800f096:	f001 fbfb 	bl	8010890 <vPortExitCritical>
}
 800f09a:	2001      	movs	r0, #1
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f09e:	0020      	movs	r0, r4
 800f0a0:	3010      	adds	r0, #16
 800f0a2:	f000 ff2d 	bl	800ff00 <xTaskRemoveFromEventList>
 800f0a6:	2801      	cmp	r0, #1
 800f0a8:	d1f5      	bne.n	800f096 <xQueueGenericReset+0x3c>
					queueYIELD_IF_USING_PREEMPTION();
 800f0aa:	f001 fbd9 	bl	8010860 <vPortYield>
 800f0ae:	e7f2      	b.n	800f096 <xQueueGenericReset+0x3c>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0b0:	0020      	movs	r0, r4
 800f0b2:	3010      	adds	r0, #16
 800f0b4:	f7ff fefa 	bl	800eeac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0b8:	0020      	movs	r0, r4
 800f0ba:	3024      	adds	r0, #36	; 0x24
 800f0bc:	f7ff fef6 	bl	800eeac <vListInitialise>
 800f0c0:	e7e9      	b.n	800f096 <xQueueGenericReset+0x3c>

0800f0c2 <xQueueGenericCreate>:
{
 800f0c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0c4:	0005      	movs	r5, r0
 800f0c6:	000e      	movs	r6, r1
 800f0c8:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	d101      	bne.n	800f0d2 <xQueueGenericCreate+0x10>
 800f0ce:	b672      	cpsid	i
 800f0d0:	e7fe      	b.n	800f0d0 <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f0d2:	2900      	cmp	r1, #0
 800f0d4:	d00c      	beq.n	800f0f0 <xQueueGenericCreate+0x2e>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0d6:	0008      	movs	r0, r1
 800f0d8:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f0da:	3055      	adds	r0, #85	; 0x55
 800f0dc:	f001 fc4e 	bl	801097c <pvPortMalloc>
 800f0e0:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f0e2:	d101      	bne.n	800f0e8 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800f0e4:	b672      	cpsid	i
 800f0e6:	e7fe      	b.n	800f0e6 <xQueueGenericCreate+0x24>
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800f0e8:	0003      	movs	r3, r0
 800f0ea:	3354      	adds	r3, #84	; 0x54
 800f0ec:	6003      	str	r3, [r0, #0]
 800f0ee:	e005      	b.n	800f0fc <xQueueGenericCreate+0x3a>
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f0f0:	2054      	movs	r0, #84	; 0x54
 800f0f2:	f001 fc43 	bl	801097c <pvPortMalloc>
 800f0f6:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f0f8:	d0f4      	beq.n	800f0e4 <xQueueGenericCreate+0x22>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f0fa:	6024      	str	r4, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800f0fc:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800f0fe:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f100:	2101      	movs	r1, #1
 800f102:	0020      	movs	r0, r4
 800f104:	f7ff ffa9 	bl	800f05a <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800f108:	2350      	movs	r3, #80	; 0x50
 800f10a:	54e7      	strb	r7, [r4, r3]
}
 800f10c:	0020      	movs	r0, r4
 800f10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f110 <xQueueCreateCountingSemaphore>:
	{
 800f110:	b510      	push	{r4, lr}
 800f112:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f114:	2800      	cmp	r0, #0
 800f116:	d101      	bne.n	800f11c <xQueueCreateCountingSemaphore+0xc>
 800f118:	b672      	cpsid	i
 800f11a:	e7fe      	b.n	800f11a <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f11c:	4288      	cmp	r0, r1
 800f11e:	d201      	bcs.n	800f124 <xQueueCreateCountingSemaphore+0x14>
 800f120:	b672      	cpsid	i
 800f122:	e7fe      	b.n	800f122 <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f124:	2202      	movs	r2, #2
 800f126:	2100      	movs	r1, #0
 800f128:	f7ff ffcb 	bl	800f0c2 <xQueueGenericCreate>
		if( xHandle != NULL )
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d001      	beq.n	800f134 <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f130:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f132:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800f134:	b672      	cpsid	i
 800f136:	e7fe      	b.n	800f136 <xQueueCreateCountingSemaphore+0x26>

0800f138 <xQueueGenericSend>:
{
 800f138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f13a:	46ce      	mov	lr, r9
 800f13c:	b500      	push	{lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	0004      	movs	r4, r0
 800f142:	9100      	str	r1, [sp, #0]
 800f144:	9201      	str	r2, [sp, #4]
 800f146:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800f148:	2800      	cmp	r0, #0
 800f14a:	d007      	beq.n	800f15c <xQueueGenericSend+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f14c:	9b00      	ldr	r3, [sp, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d106      	bne.n	800f160 <xQueueGenericSend+0x28>
 800f152:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f154:	2b00      	cmp	r3, #0
 800f156:	d003      	beq.n	800f160 <xQueueGenericSend+0x28>
 800f158:	b672      	cpsid	i
 800f15a:	e7fe      	b.n	800f15a <xQueueGenericSend+0x22>
	configASSERT( pxQueue );
 800f15c:	b672      	cpsid	i
 800f15e:	e7fe      	b.n	800f15e <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f160:	2d02      	cmp	r5, #2
 800f162:	d104      	bne.n	800f16e <xQueueGenericSend+0x36>
 800f164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f166:	2b01      	cmp	r3, #1
 800f168:	d001      	beq.n	800f16e <xQueueGenericSend+0x36>
 800f16a:	b672      	cpsid	i
 800f16c:	e7fe      	b.n	800f16c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f16e:	f000 ff4f 	bl	8010010 <xTaskGetSchedulerState>
 800f172:	2800      	cmp	r0, #0
 800f174:	d104      	bne.n	800f180 <xQueueGenericSend+0x48>
 800f176:	9b01      	ldr	r3, [sp, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d004      	beq.n	800f186 <xQueueGenericSend+0x4e>
 800f17c:	b672      	cpsid	i
 800f17e:	e7fe      	b.n	800f17e <xQueueGenericSend+0x46>
 800f180:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800f182:	2700      	movs	r7, #0
 800f184:	e02f      	b.n	800f1e6 <xQueueGenericSend+0xae>
 800f186:	2600      	movs	r6, #0
 800f188:	e7fb      	b.n	800f182 <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f18a:	002a      	movs	r2, r5
 800f18c:	9900      	ldr	r1, [sp, #0]
 800f18e:	0020      	movs	r0, r4
 800f190:	f7ff fed0 	bl	800ef34 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f196:	2b00      	cmp	r3, #0
 800f198:	d104      	bne.n	800f1a4 <xQueueGenericSend+0x6c>
					else if( xYieldRequired != pdFALSE )
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d00a      	beq.n	800f1b4 <xQueueGenericSend+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 800f19e:	f001 fb5f 	bl	8010860 <vPortYield>
 800f1a2:	e007      	b.n	800f1b4 <xQueueGenericSend+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f1a4:	0020      	movs	r0, r4
 800f1a6:	3024      	adds	r0, #36	; 0x24
 800f1a8:	f000 feaa 	bl	800ff00 <xTaskRemoveFromEventList>
 800f1ac:	2801      	cmp	r0, #1
 800f1ae:	d101      	bne.n	800f1b4 <xQueueGenericSend+0x7c>
							queueYIELD_IF_USING_PREEMPTION();
 800f1b0:	f001 fb56 	bl	8010860 <vPortYield>
				taskEXIT_CRITICAL();
 800f1b4:	f001 fb6c 	bl	8010890 <vPortExitCritical>
				return pdPASS;
 800f1b8:	2001      	movs	r0, #1
}
 800f1ba:	b004      	add	sp, #16
 800f1bc:	bc04      	pop	{r2}
 800f1be:	4691      	mov	r9, r2
 800f1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800f1c2:	f001 fb65 	bl	8010890 <vPortExitCritical>
					return errQUEUE_FULL;
 800f1c6:	2000      	movs	r0, #0
 800f1c8:	e7f7      	b.n	800f1ba <xQueueGenericSend+0x82>
					vTaskSetTimeOutState( &xTimeOut );
 800f1ca:	a802      	add	r0, sp, #8
 800f1cc:	f000 fed8 	bl	800ff80 <vTaskSetTimeOutState>
 800f1d0:	e016      	b.n	800f200 <xQueueGenericSend+0xc8>
		prvLockQueue( pxQueue );
 800f1d2:	6467      	str	r7, [r4, #68]	; 0x44
 800f1d4:	e01d      	b.n	800f212 <xQueueGenericSend+0xda>
 800f1d6:	64a7      	str	r7, [r4, #72]	; 0x48
 800f1d8:	e01e      	b.n	800f218 <xQueueGenericSend+0xe0>
				prvUnlockQueue( pxQueue );
 800f1da:	0020      	movs	r0, r4
 800f1dc:	f7ff fefa 	bl	800efd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f1e0:	f000 fcb0 	bl	800fb44 <xTaskResumeAll>
 800f1e4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800f1e6:	f001 fb47 	bl	8010878 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f1ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d3cb      	bcc.n	800f18a <xQueueGenericSend+0x52>
 800f1f2:	2d02      	cmp	r5, #2
 800f1f4:	d0c9      	beq.n	800f18a <xQueueGenericSend+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f1f6:	9b01      	ldr	r3, [sp, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d0e2      	beq.n	800f1c2 <xQueueGenericSend+0x8a>
				else if( xEntryTimeSet == pdFALSE )
 800f1fc:	2e00      	cmp	r6, #0
 800f1fe:	d0e4      	beq.n	800f1ca <xQueueGenericSend+0x92>
		taskEXIT_CRITICAL();
 800f200:	f001 fb46 	bl	8010890 <vPortExitCritical>
		vTaskSuspendAll();
 800f204:	f000 fbfe 	bl	800fa04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f208:	f001 fb36 	bl	8010878 <vPortEnterCritical>
 800f20c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f20e:	3301      	adds	r3, #1
 800f210:	d0df      	beq.n	800f1d2 <xQueueGenericSend+0x9a>
 800f212:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f214:	3301      	adds	r3, #1
 800f216:	d0de      	beq.n	800f1d6 <xQueueGenericSend+0x9e>
 800f218:	f001 fb3a 	bl	8010890 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f21c:	a901      	add	r1, sp, #4
 800f21e:	a802      	add	r0, sp, #8
 800f220:	f000 febe 	bl	800ffa0 <xTaskCheckForTimeOut>
 800f224:	2800      	cmp	r0, #0
 800f226:	d117      	bne.n	800f258 <xQueueGenericSend+0x120>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f228:	f001 fb26 	bl	8010878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f22c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f22e:	4699      	mov	r9, r3
 800f230:	6be6      	ldr	r6, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f232:	f001 fb2d 	bl	8010890 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f236:	45b1      	cmp	r9, r6
 800f238:	d1cf      	bne.n	800f1da <xQueueGenericSend+0xa2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f23a:	0020      	movs	r0, r4
 800f23c:	3010      	adds	r0, #16
 800f23e:	9901      	ldr	r1, [sp, #4]
 800f240:	f000 fe20 	bl	800fe84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f244:	0020      	movs	r0, r4
 800f246:	f7ff fec5 	bl	800efd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f24a:	f000 fc7b 	bl	800fb44 <xTaskResumeAll>
 800f24e:	2800      	cmp	r0, #0
 800f250:	d1c8      	bne.n	800f1e4 <xQueueGenericSend+0xac>
					portYIELD_WITHIN_API();
 800f252:	f001 fb05 	bl	8010860 <vPortYield>
 800f256:	e7c5      	b.n	800f1e4 <xQueueGenericSend+0xac>
			prvUnlockQueue( pxQueue );
 800f258:	0020      	movs	r0, r4
 800f25a:	f7ff febb 	bl	800efd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f25e:	f000 fc71 	bl	800fb44 <xTaskResumeAll>
			return errQUEUE_FULL;
 800f262:	2000      	movs	r0, #0
 800f264:	e7a9      	b.n	800f1ba <xQueueGenericSend+0x82>

0800f266 <xQueueGenericSendFromISR>:
{
 800f266:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f268:	b083      	sub	sp, #12
 800f26a:	0004      	movs	r4, r0
 800f26c:	000d      	movs	r5, r1
 800f26e:	0016      	movs	r6, r2
 800f270:	001f      	movs	r7, r3
	configASSERT( pxQueue );
 800f272:	2800      	cmp	r0, #0
 800f274:	d006      	beq.n	800f284 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f276:	2900      	cmp	r1, #0
 800f278:	d106      	bne.n	800f288 <xQueueGenericSendFromISR+0x22>
 800f27a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d003      	beq.n	800f288 <xQueueGenericSendFromISR+0x22>
 800f280:	b672      	cpsid	i
 800f282:	e7fe      	b.n	800f282 <xQueueGenericSendFromISR+0x1c>
	configASSERT( pxQueue );
 800f284:	b672      	cpsid	i
 800f286:	e7fe      	b.n	800f286 <xQueueGenericSendFromISR+0x20>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f288:	2f02      	cmp	r7, #2
 800f28a:	d12a      	bne.n	800f2e2 <xQueueGenericSendFromISR+0x7c>
 800f28c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f28e:	2b01      	cmp	r3, #1
 800f290:	d011      	beq.n	800f2b6 <xQueueGenericSendFromISR+0x50>
 800f292:	b672      	cpsid	i
 800f294:	e7fe      	b.n	800f294 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800f296:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d01b      	beq.n	800f2d6 <xQueueGenericSendFromISR+0x70>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f29e:	0020      	movs	r0, r4
 800f2a0:	3024      	adds	r0, #36	; 0x24
 800f2a2:	f000 fe2d 	bl	800ff00 <xTaskRemoveFromEventList>
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	d015      	beq.n	800f2d6 <xQueueGenericSendFromISR+0x70>
							if( pxHigherPriorityTaskWoken != NULL )
 800f2aa:	2e00      	cmp	r6, #0
 800f2ac:	d001      	beq.n	800f2b2 <xQueueGenericSendFromISR+0x4c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f2ae:	6035      	str	r5, [r6, #0]
 800f2b0:	e011      	b.n	800f2d6 <xQueueGenericSendFromISR+0x70>
			xReturn = pdPASS;
 800f2b2:	2501      	movs	r5, #1
 800f2b4:	e00f      	b.n	800f2d6 <xQueueGenericSendFromISR+0x70>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2b6:	f001 fafb 	bl	80108b0 <ulSetInterruptMaskFromISR>
 800f2ba:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2be:	003a      	movs	r2, r7
 800f2c0:	0029      	movs	r1, r5
 800f2c2:	0020      	movs	r0, r4
 800f2c4:	f7ff fe36 	bl	800ef34 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f2c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	d0e3      	beq.n	800f296 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800f2ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f2d4:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f2d6:	9801      	ldr	r0, [sp, #4]
 800f2d8:	f001 faef 	bl	80108ba <vClearInterruptMaskFromISR>
}
 800f2dc:	0028      	movs	r0, r5
 800f2de:	b003      	add	sp, #12
 800f2e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2e2:	f001 fae5 	bl	80108b0 <ulSetInterruptMaskFromISR>
 800f2e6:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f2ea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d3e6      	bcc.n	800f2be <xQueueGenericSendFromISR+0x58>
			xReturn = errQUEUE_FULL;
 800f2f0:	2500      	movs	r5, #0
 800f2f2:	e7f0      	b.n	800f2d6 <xQueueGenericSendFromISR+0x70>

0800f2f4 <xQueueGiveFromISR>:
{
 800f2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f6:	0004      	movs	r4, r0
 800f2f8:	000f      	movs	r7, r1
	configASSERT( pxQueue );
 800f2fa:	2800      	cmp	r0, #0
 800f2fc:	d004      	beq.n	800f308 <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f2fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f300:	2b00      	cmp	r3, #0
 800f302:	d003      	beq.n	800f30c <xQueueGiveFromISR+0x18>
 800f304:	b672      	cpsid	i
 800f306:	e7fe      	b.n	800f306 <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f308:	b672      	cpsid	i
 800f30a:	e7fe      	b.n	800f30a <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f30c:	6803      	ldr	r3, [r0, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d01f      	beq.n	800f352 <xQueueGiveFromISR+0x5e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f312:	f001 facd 	bl	80108b0 <ulSetInterruptMaskFromISR>
 800f316:	0006      	movs	r6, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f318:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f31a:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f31c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f31e:	4293      	cmp	r3, r2
 800f320:	d212      	bcs.n	800f348 <xQueueGiveFromISR+0x54>
			++( pxQueue->uxMessagesWaiting );
 800f322:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f324:	3301      	adds	r3, #1
 800f326:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f328:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f32a:	3301      	adds	r3, #1
 800f32c:	d116      	bne.n	800f35c <xQueueGiveFromISR+0x68>
			xReturn = pdPASS;
 800f32e:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f332:	2b00      	cmp	r3, #0
 800f334:	d008      	beq.n	800f348 <xQueueGiveFromISR+0x54>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f336:	0020      	movs	r0, r4
 800f338:	3024      	adds	r0, #36	; 0x24
 800f33a:	f000 fde1 	bl	800ff00 <xTaskRemoveFromEventList>
 800f33e:	2800      	cmp	r0, #0
 800f340:	d002      	beq.n	800f348 <xQueueGiveFromISR+0x54>
							if( pxHigherPriorityTaskWoken != NULL )
 800f342:	2f00      	cmp	r7, #0
 800f344:	d00f      	beq.n	800f366 <xQueueGiveFromISR+0x72>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f346:	603d      	str	r5, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f348:	0030      	movs	r0, r6
 800f34a:	f001 fab6 	bl	80108ba <vClearInterruptMaskFromISR>
}
 800f34e:	0028      	movs	r0, r5
 800f350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f352:	6843      	ldr	r3, [r0, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d0dc      	beq.n	800f312 <xQueueGiveFromISR+0x1e>
 800f358:	b672      	cpsid	i
 800f35a:	e7fe      	b.n	800f35a <xQueueGiveFromISR+0x66>
				++( pxQueue->xTxLock );
 800f35c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f35e:	3301      	adds	r3, #1
 800f360:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f362:	2501      	movs	r5, #1
 800f364:	e7f0      	b.n	800f348 <xQueueGiveFromISR+0x54>
 800f366:	2501      	movs	r5, #1
 800f368:	e7ee      	b.n	800f348 <xQueueGiveFromISR+0x54>

0800f36a <xQueueGenericReceive>:
{
 800f36a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f36c:	46c6      	mov	lr, r8
 800f36e:	b500      	push	{lr}
 800f370:	b084      	sub	sp, #16
 800f372:	0004      	movs	r4, r0
 800f374:	000e      	movs	r6, r1
 800f376:	9201      	str	r2, [sp, #4]
 800f378:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d006      	beq.n	800f38c <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f37e:	2900      	cmp	r1, #0
 800f380:	d106      	bne.n	800f390 <xQueueGenericReceive+0x26>
 800f382:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f384:	2b00      	cmp	r3, #0
 800f386:	d003      	beq.n	800f390 <xQueueGenericReceive+0x26>
 800f388:	b672      	cpsid	i
 800f38a:	e7fe      	b.n	800f38a <xQueueGenericReceive+0x20>
	configASSERT( pxQueue );
 800f38c:	b672      	cpsid	i
 800f38e:	e7fe      	b.n	800f38e <xQueueGenericReceive+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f390:	f000 fe3e 	bl	8010010 <xTaskGetSchedulerState>
 800f394:	2800      	cmp	r0, #0
 800f396:	d104      	bne.n	800f3a2 <xQueueGenericReceive+0x38>
 800f398:	9b01      	ldr	r3, [sp, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d004      	beq.n	800f3a8 <xQueueGenericReceive+0x3e>
 800f39e:	b672      	cpsid	i
 800f3a0:	e7fe      	b.n	800f3a0 <xQueueGenericReceive+0x36>
 800f3a2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800f3a4:	2700      	movs	r7, #0
 800f3a6:	e04b      	b.n	800f440 <xQueueGenericReceive+0xd6>
 800f3a8:	2500      	movs	r5, #0
 800f3aa:	e7fb      	b.n	800f3a4 <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f3ac:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3ae:	0031      	movs	r1, r6
 800f3b0:	0020      	movs	r0, r4
 800f3b2:	f7ff fdfd 	bl	800efb0 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f3b6:	4643      	mov	r3, r8
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d11a      	bne.n	800f3f2 <xQueueGenericReceive+0x88>
					--( pxQueue->uxMessagesWaiting );
 800f3bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3c2:	6823      	ldr	r3, [r4, #0]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d102      	bne.n	800f3ce <xQueueGenericReceive+0x64>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f3c8:	f000 ff62 	bl	8010290 <pvTaskIncrementMutexHeldCount>
 800f3cc:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3ce:	6923      	ldr	r3, [r4, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d007      	beq.n	800f3e4 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f3d4:	0020      	movs	r0, r4
 800f3d6:	3010      	adds	r0, #16
 800f3d8:	f000 fd92 	bl	800ff00 <xTaskRemoveFromEventList>
 800f3dc:	2801      	cmp	r0, #1
 800f3de:	d101      	bne.n	800f3e4 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f3e0:	f001 fa3e 	bl	8010860 <vPortYield>
				taskEXIT_CRITICAL();
 800f3e4:	f001 fa54 	bl	8010890 <vPortExitCritical>
				return pdPASS;
 800f3e8:	2001      	movs	r0, #1
}
 800f3ea:	b004      	add	sp, #16
 800f3ec:	bc04      	pop	{r2}
 800f3ee:	4690      	mov	r8, r2
 800f3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f3f2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f3f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d0f4      	beq.n	800f3e4 <xQueueGenericReceive+0x7a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3fa:	0020      	movs	r0, r4
 800f3fc:	3024      	adds	r0, #36	; 0x24
 800f3fe:	f000 fd7f 	bl	800ff00 <xTaskRemoveFromEventList>
 800f402:	2800      	cmp	r0, #0
 800f404:	d0ee      	beq.n	800f3e4 <xQueueGenericReceive+0x7a>
							queueYIELD_IF_USING_PREEMPTION();
 800f406:	f001 fa2b 	bl	8010860 <vPortYield>
 800f40a:	e7eb      	b.n	800f3e4 <xQueueGenericReceive+0x7a>
					taskEXIT_CRITICAL();
 800f40c:	f001 fa40 	bl	8010890 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f410:	2000      	movs	r0, #0
 800f412:	e7ea      	b.n	800f3ea <xQueueGenericReceive+0x80>
					vTaskSetTimeOutState( &xTimeOut );
 800f414:	a802      	add	r0, sp, #8
 800f416:	f000 fdb3 	bl	800ff80 <vTaskSetTimeOutState>
 800f41a:	e01b      	b.n	800f454 <xQueueGenericReceive+0xea>
		prvLockQueue( pxQueue );
 800f41c:	6467      	str	r7, [r4, #68]	; 0x44
 800f41e:	e022      	b.n	800f466 <xQueueGenericReceive+0xfc>
 800f420:	64a7      	str	r7, [r4, #72]	; 0x48
 800f422:	e023      	b.n	800f46c <xQueueGenericReceive+0x102>
						taskENTER_CRITICAL();
 800f424:	f001 fa28 	bl	8010878 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f428:	6860      	ldr	r0, [r4, #4]
 800f42a:	f000 fe01 	bl	8010030 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f42e:	f001 fa2f 	bl	8010890 <vPortExitCritical>
 800f432:	e02d      	b.n	800f490 <xQueueGenericReceive+0x126>
				prvUnlockQueue( pxQueue );
 800f434:	0020      	movs	r0, r4
 800f436:	f7ff fdcd 	bl	800efd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f43a:	f000 fb83 	bl	800fb44 <xTaskResumeAll>
 800f43e:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 800f440:	f001 fa1a 	bl	8010878 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f444:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f446:	2b00      	cmp	r3, #0
 800f448:	d1b0      	bne.n	800f3ac <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f44a:	9b01      	ldr	r3, [sp, #4]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d0dd      	beq.n	800f40c <xQueueGenericReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800f450:	2d00      	cmp	r5, #0
 800f452:	d0df      	beq.n	800f414 <xQueueGenericReceive+0xaa>
		taskEXIT_CRITICAL();
 800f454:	f001 fa1c 	bl	8010890 <vPortExitCritical>
		vTaskSuspendAll();
 800f458:	f000 fad4 	bl	800fa04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f45c:	f001 fa0c 	bl	8010878 <vPortEnterCritical>
 800f460:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f462:	3301      	adds	r3, #1
 800f464:	d0da      	beq.n	800f41c <xQueueGenericReceive+0xb2>
 800f466:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f468:	3301      	adds	r3, #1
 800f46a:	d0d9      	beq.n	800f420 <xQueueGenericReceive+0xb6>
 800f46c:	f001 fa10 	bl	8010890 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f470:	a901      	add	r1, sp, #4
 800f472:	a802      	add	r0, sp, #8
 800f474:	f000 fd94 	bl	800ffa0 <xTaskCheckForTimeOut>
 800f478:	2800      	cmp	r0, #0
 800f47a:	d118      	bne.n	800f4ae <xQueueGenericReceive+0x144>
	taskENTER_CRITICAL();
 800f47c:	f001 f9fc 	bl	8010878 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f480:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f482:	f001 fa05 	bl	8010890 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f486:	2d00      	cmp	r5, #0
 800f488:	d1d4      	bne.n	800f434 <xQueueGenericReceive+0xca>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f48a:	6823      	ldr	r3, [r4, #0]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d0c9      	beq.n	800f424 <xQueueGenericReceive+0xba>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f490:	0020      	movs	r0, r4
 800f492:	3024      	adds	r0, #36	; 0x24
 800f494:	9901      	ldr	r1, [sp, #4]
 800f496:	f000 fcf5 	bl	800fe84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f49a:	0020      	movs	r0, r4
 800f49c:	f7ff fd9a 	bl	800efd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4a0:	f000 fb50 	bl	800fb44 <xTaskResumeAll>
 800f4a4:	2800      	cmp	r0, #0
 800f4a6:	d1ca      	bne.n	800f43e <xQueueGenericReceive+0xd4>
					portYIELD_WITHIN_API();
 800f4a8:	f001 f9da 	bl	8010860 <vPortYield>
 800f4ac:	e7c7      	b.n	800f43e <xQueueGenericReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800f4ae:	0020      	movs	r0, r4
 800f4b0:	f7ff fd90 	bl	800efd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4b4:	f000 fb46 	bl	800fb44 <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f4b8:	2000      	movs	r0, #0
 800f4ba:	e796      	b.n	800f3ea <xQueueGenericReceive+0x80>

0800f4bc <xQueueReceiveFromISR>:
{
 800f4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	0004      	movs	r4, r0
 800f4c2:	000f      	movs	r7, r1
 800f4c4:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	d006      	beq.n	800f4d8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4ca:	2900      	cmp	r1, #0
 800f4cc:	d106      	bne.n	800f4dc <xQueueReceiveFromISR+0x20>
 800f4ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d003      	beq.n	800f4dc <xQueueReceiveFromISR+0x20>
 800f4d4:	b672      	cpsid	i
 800f4d6:	e7fe      	b.n	800f4d6 <xQueueReceiveFromISR+0x1a>
	configASSERT( pxQueue );
 800f4d8:	b672      	cpsid	i
 800f4da:	e7fe      	b.n	800f4da <xQueueReceiveFromISR+0x1e>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4dc:	f001 f9e8 	bl	80108b0 <ulSetInterruptMaskFromISR>
 800f4e0:	9001      	str	r0, [sp, #4]
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f4e4:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d01b      	beq.n	800f522 <xQueueReceiveFromISR+0x66>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f4ea:	0039      	movs	r1, r7
 800f4ec:	0020      	movs	r0, r4
 800f4ee:	f7ff fd5f 	bl	800efb0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f4f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f4f4:	3b01      	subs	r3, #1
 800f4f6:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f4f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f4fa:	3301      	adds	r3, #1
 800f4fc:	d004      	beq.n	800f508 <xQueueReceiveFromISR+0x4c>
				++( pxQueue->xRxLock );
 800f4fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f500:	3301      	adds	r3, #1
 800f502:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f504:	2501      	movs	r5, #1
 800f506:	e00c      	b.n	800f522 <xQueueReceiveFromISR+0x66>
 800f508:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f50a:	6923      	ldr	r3, [r4, #16]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d008      	beq.n	800f522 <xQueueReceiveFromISR+0x66>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f510:	0020      	movs	r0, r4
 800f512:	3010      	adds	r0, #16
 800f514:	f000 fcf4 	bl	800ff00 <xTaskRemoveFromEventList>
 800f518:	2800      	cmp	r0, #0
 800f51a:	d002      	beq.n	800f522 <xQueueReceiveFromISR+0x66>
						if( pxHigherPriorityTaskWoken != NULL )
 800f51c:	2e00      	cmp	r6, #0
 800f51e:	d006      	beq.n	800f52e <xQueueReceiveFromISR+0x72>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f520:	6035      	str	r5, [r6, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f522:	9801      	ldr	r0, [sp, #4]
 800f524:	f001 f9c9 	bl	80108ba <vClearInterruptMaskFromISR>
}
 800f528:	0028      	movs	r0, r5
 800f52a:	b003      	add	sp, #12
 800f52c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			xReturn = pdPASS;
 800f52e:	2501      	movs	r5, #1
 800f530:	e7f7      	b.n	800f522 <xQueueReceiveFromISR+0x66>
	...

0800f534 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f534:	b510      	push	{r4, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f536:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <vQueueAddToRegistry+0x2c>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d009      	beq.n	800f552 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f53e:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f540:	4c07      	ldr	r4, [pc, #28]	; (800f560 <vQueueAddToRegistry+0x2c>)
 800f542:	00da      	lsls	r2, r3, #3
 800f544:	58a2      	ldr	r2, [r4, r2]
 800f546:	2a00      	cmp	r2, #0
 800f548:	d004      	beq.n	800f554 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f54a:	3301      	adds	r3, #1
 800f54c:	2b08      	cmp	r3, #8
 800f54e:	d1f8      	bne.n	800f542 <vQueueAddToRegistry+0xe>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f550:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f552:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f554:	4a02      	ldr	r2, [pc, #8]	; (800f560 <vQueueAddToRegistry+0x2c>)
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f55a:	18d3      	adds	r3, r2, r3
 800f55c:	6058      	str	r0, [r3, #4]
				break;
 800f55e:	e7f7      	b.n	800f550 <vQueueAddToRegistry+0x1c>
 800f560:	20007390 	.word	0x20007390

0800f564 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	0004      	movs	r4, r0
 800f568:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f56a:	f001 f985 	bl	8010878 <vPortEnterCritical>
 800f56e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f570:	3301      	adds	r3, #1
 800f572:	d00b      	beq.n	800f58c <vQueueWaitForMessageRestricted+0x28>
 800f574:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f576:	3301      	adds	r3, #1
 800f578:	d00b      	beq.n	800f592 <vQueueWaitForMessageRestricted+0x2e>
 800f57a:	f001 f989 	bl	8010890 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f57e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f580:	2b00      	cmp	r3, #0
 800f582:	d009      	beq.n	800f598 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f584:	0020      	movs	r0, r4
 800f586:	f7ff fd25 	bl	800efd4 <prvUnlockQueue>
	}
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f58c:	2300      	movs	r3, #0
 800f58e:	6463      	str	r3, [r4, #68]	; 0x44
 800f590:	e7f0      	b.n	800f574 <vQueueWaitForMessageRestricted+0x10>
 800f592:	2300      	movs	r3, #0
 800f594:	64a3      	str	r3, [r4, #72]	; 0x48
 800f596:	e7f0      	b.n	800f57a <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f598:	0020      	movs	r0, r4
 800f59a:	3024      	adds	r0, #36	; 0x24
 800f59c:	0029      	movs	r1, r5
 800f59e:	f000 fc95 	bl	800fecc <vTaskPlaceOnEventListRestricted>
 800f5a2:	e7ef      	b.n	800f584 <vQueueWaitForMessageRestricted+0x20>

0800f5a4 <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5a6:	46d6      	mov	lr, sl
 800f5a8:	464f      	mov	r7, r9
 800f5aa:	4646      	mov	r6, r8
 800f5ac:	b5c0      	push	{r6, r7, lr}
 800f5ae:	0006      	movs	r6, r0
 800f5b0:	4694      	mov	ip, r2
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f5b2:	6808      	ldr	r0, [r1, #0]
 800f5b4:	2800      	cmp	r0, #0
 800f5b6:	d044      	beq.n	800f642 <prvListTaskWithinSingleList+0x9e>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f5b8:	684b      	ldr	r3, [r1, #4]
 800f5ba:	685b      	ldr	r3, [r3, #4]
 800f5bc:	604b      	str	r3, [r1, #4]
 800f5be:	2208      	movs	r2, #8
 800f5c0:	4690      	mov	r8, r2
 800f5c2:	4488      	add	r8, r1
 800f5c4:	4543      	cmp	r3, r8
 800f5c6:	d006      	beq.n	800f5d6 <prvListTaskWithinSingleList+0x32>
 800f5c8:	684b      	ldr	r3, [r1, #4]
 800f5ca:	68db      	ldr	r3, [r3, #12]
 800f5cc:	4699      	mov	r9, r3
	UBaseType_t uxTask = 0;
 800f5ce:	2000      	movs	r0, #0
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f5d0:	2302      	movs	r3, #2
 800f5d2:	469a      	mov	sl, r3
 800f5d4:	e018      	b.n	800f608 <prvListTaskWithinSingleList+0x64>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f5d6:	68cb      	ldr	r3, [r1, #12]
 800f5d8:	604b      	str	r3, [r1, #4]
 800f5da:	e7f5      	b.n	800f5c8 <prvListTaskWithinSingleList+0x24>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f5dc:	68cb      	ldr	r3, [r1, #12]
 800f5de:	604b      	str	r3, [r1, #4]
 800f5e0:	e017      	b.n	800f612 <prvListTaskWithinSingleList+0x6e>
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f5e2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800f5e4:	6153      	str	r3, [r2, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f5e6:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800f5e8:	6193      	str	r3, [r2, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f5ea:	6b2f      	ldr	r7, [r5, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f5ec:	783b      	ldrb	r3, [r7, #0]
 800f5ee:	2ba5      	cmp	r3, #165	; 0xa5
 800f5f0:	d125      	bne.n	800f63e <prvListTaskWithinSingleList+0x9a>
	uint32_t ulCount = 0U;
 800f5f2:	2300      	movs	r3, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f5f4:	3301      	adds	r3, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f5f6:	5cfc      	ldrb	r4, [r7, r3]
 800f5f8:	2ca5      	cmp	r4, #165	; 0xa5
 800f5fa:	d0fb      	beq.n	800f5f4 <prvListTaskWithinSingleList+0x50>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f5fc:	089b      	lsrs	r3, r3, #2

		return ( uint16_t ) ulCount;
 800f5fe:	8393      	strh	r3, [r2, #28]
				uxTask++;
 800f600:	3001      	adds	r0, #1
 800f602:	3620      	adds	r6, #32
			} while( pxNextTCB != pxFirstTCB );
 800f604:	45a9      	cmp	r9, r5
 800f606:	d01c      	beq.n	800f642 <prvListTaskWithinSingleList+0x9e>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f608:	684b      	ldr	r3, [r1, #4]
 800f60a:	685b      	ldr	r3, [r3, #4]
 800f60c:	604b      	str	r3, [r1, #4]
 800f60e:	4598      	cmp	r8, r3
 800f610:	d0e4      	beq.n	800f5dc <prvListTaskWithinSingleList+0x38>
 800f612:	684b      	ldr	r3, [r1, #4]
 800f614:	68dd      	ldr	r5, [r3, #12]
 800f616:	0032      	movs	r2, r6
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f618:	6035      	str	r5, [r6, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f61a:	002b      	movs	r3, r5
 800f61c:	3334      	adds	r3, #52	; 0x34
 800f61e:	6073      	str	r3, [r6, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f620:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f622:	60b3      	str	r3, [r6, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f624:	4663      	mov	r3, ip
 800f626:	7333      	strb	r3, [r6, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f628:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800f62a:	6133      	str	r3, [r6, #16]
					if( eState == eSuspended )
 800f62c:	4663      	mov	r3, ip
 800f62e:	2b03      	cmp	r3, #3
 800f630:	d1d7      	bne.n	800f5e2 <prvListTaskWithinSingleList+0x3e>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f632:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f634:	2b00      	cmp	r3, #0
 800f636:	d0d4      	beq.n	800f5e2 <prvListTaskWithinSingleList+0x3e>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f638:	4653      	mov	r3, sl
 800f63a:	7333      	strb	r3, [r6, #12]
 800f63c:	e7d1      	b.n	800f5e2 <prvListTaskWithinSingleList+0x3e>
	uint32_t ulCount = 0U;
 800f63e:	2300      	movs	r3, #0
 800f640:	e7dc      	b.n	800f5fc <prvListTaskWithinSingleList+0x58>
	}
 800f642:	bc1c      	pop	{r2, r3, r4}
 800f644:	4690      	mov	r8, r2
 800f646:	4699      	mov	r9, r3
 800f648:	46a2      	mov	sl, r4
 800f64a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f64c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f64c:	4b08      	ldr	r3, [pc, #32]	; (800f670 <prvResetNextTaskUnblockTime+0x24>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d007      	beq.n	800f666 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f656:	4b06      	ldr	r3, [pc, #24]	; (800f670 <prvResetNextTaskUnblockTime+0x24>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f65c:	68db      	ldr	r3, [r3, #12]
 800f65e:	685a      	ldr	r2, [r3, #4]
 800f660:	4b04      	ldr	r3, [pc, #16]	; (800f674 <prvResetNextTaskUnblockTime+0x28>)
 800f662:	601a      	str	r2, [r3, #0]
	}
}
 800f664:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800f666:	4b03      	ldr	r3, [pc, #12]	; (800f674 <prvResetNextTaskUnblockTime+0x28>)
 800f668:	2201      	movs	r2, #1
 800f66a:	4252      	negs	r2, r2
 800f66c:	601a      	str	r2, [r3, #0]
 800f66e:	e7f9      	b.n	800f664 <prvResetNextTaskUnblockTime+0x18>
 800f670:	200021e8 	.word	0x200021e8
 800f674:	20000110 	.word	0x20000110

0800f678 <prvAddCurrentTaskToDelayedList>:
{
 800f678:	b510      	push	{r4, lr}
 800f67a:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f67c:	4b0e      	ldr	r3, [pc, #56]	; (800f6b8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f682:	4b0e      	ldr	r3, [pc, #56]	; (800f6bc <prvAddCurrentTaskToDelayedList+0x44>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	4283      	cmp	r3, r0
 800f688:	d80d      	bhi.n	800f6a6 <prvAddCurrentTaskToDelayedList+0x2e>
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f68a:	4b0d      	ldr	r3, [pc, #52]	; (800f6c0 <prvAddCurrentTaskToDelayedList+0x48>)
 800f68c:	6818      	ldr	r0, [r3, #0]
 800f68e:	4b0a      	ldr	r3, [pc, #40]	; (800f6b8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f690:	6819      	ldr	r1, [r3, #0]
 800f692:	3104      	adds	r1, #4
 800f694:	f7ff fc24 	bl	800eee0 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f698:	4b0a      	ldr	r3, [pc, #40]	; (800f6c4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	42a3      	cmp	r3, r4
 800f69e:	d909      	bls.n	800f6b4 <prvAddCurrentTaskToDelayedList+0x3c>
			xNextTaskUnblockTime = xTimeToWake;
 800f6a0:	4b08      	ldr	r3, [pc, #32]	; (800f6c4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f6a2:	601c      	str	r4, [r3, #0]
}
 800f6a4:	e006      	b.n	800f6b4 <prvAddCurrentTaskToDelayedList+0x3c>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6a6:	4b08      	ldr	r3, [pc, #32]	; (800f6c8 <prvAddCurrentTaskToDelayedList+0x50>)
 800f6a8:	6818      	ldr	r0, [r3, #0]
 800f6aa:	4b03      	ldr	r3, [pc, #12]	; (800f6b8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f6ac:	6819      	ldr	r1, [r3, #0]
 800f6ae:	3104      	adds	r1, #4
 800f6b0:	f7ff fc16 	bl	800eee0 <vListInsert>
}
 800f6b4:	bd10      	pop	{r4, pc}
 800f6b6:	46c0      	nop			; (mov r8, r8)
 800f6b8:	200021e4 	.word	0x200021e4
 800f6bc:	20002304 	.word	0x20002304
 800f6c0:	200021e8 	.word	0x200021e8
 800f6c4:	20000110 	.word	0x20000110
 800f6c8:	200021ec 	.word	0x200021ec

0800f6cc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f6cc:	b510      	push	{r4, lr}
 800f6ce:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f6d0:	f005 fbda 	bl	8014e88 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f6d4:	0020      	movs	r0, r4
 800f6d6:	f7f0 fd1f 	bl	8000118 <strlen>
 800f6da:	0003      	movs	r3, r0
 800f6dc:	280b      	cmp	r0, #11
 800f6de:	dc08      	bgt.n	800f6f2 <prvWriteNameToBuffer+0x26>
 800f6e0:	1820      	adds	r0, r4, r0
 800f6e2:	0022      	movs	r2, r4
 800f6e4:	320c      	adds	r2, #12
		{
			pcBuffer[ x ] = ' ';
 800f6e6:	2320      	movs	r3, #32
 800f6e8:	7003      	strb	r3, [r0, #0]
 800f6ea:	3001      	adds	r0, #1
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f6ec:	4290      	cmp	r0, r2
 800f6ee:	d1fb      	bne.n	800f6e8 <prvWriteNameToBuffer+0x1c>
 800f6f0:	230c      	movs	r3, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f6f2:	18e0      	adds	r0, r4, r3
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f6f8:	bd10      	pop	{r4, pc}
	...

0800f6fc <xTaskGenericCreate>:
{
 800f6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6fe:	46d6      	mov	lr, sl
 800f700:	4647      	mov	r7, r8
 800f702:	b580      	push	{r7, lr}
 800f704:	b085      	sub	sp, #20
 800f706:	9002      	str	r0, [sp, #8]
 800f708:	000d      	movs	r5, r1
 800f70a:	0016      	movs	r6, r2
 800f70c:	9303      	str	r3, [sp, #12]
 800f70e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
 800f710:	2800      	cmp	r0, #0
 800f712:	d101      	bne.n	800f718 <xTaskGenericCreate+0x1c>
 800f714:	b672      	cpsid	i
 800f716:	e7fe      	b.n	800f716 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f718:	2f06      	cmp	r7, #6
 800f71a:	d901      	bls.n	800f720 <xTaskGenericCreate+0x24>
 800f71c:	b672      	cpsid	i
 800f71e:	e7fe      	b.n	800f71e <xTaskGenericCreate+0x22>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f720:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f722:	2b00      	cmp	r3, #0
 800f724:	d106      	bne.n	800f734 <xTaskGenericCreate+0x38>
 800f726:	0090      	lsls	r0, r2, #2
 800f728:	f001 f928 	bl	801097c <pvPortMalloc>
 800f72c:	900e      	str	r0, [sp, #56]	; 0x38
		if( pxStack != NULL )
 800f72e:	2800      	cmp	r0, #0
 800f730:	d100      	bne.n	800f734 <xTaskGenericCreate+0x38>
 800f732:	e0b7      	b.n	800f8a4 <xTaskGenericCreate+0x1a8>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f734:	2060      	movs	r0, #96	; 0x60
 800f736:	f001 f921 	bl	801097c <pvPortMalloc>
 800f73a:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f73c:	d100      	bne.n	800f740 <xTaskGenericCreate+0x44>
 800f73e:	e08b      	b.n	800f858 <xTaskGenericCreate+0x15c>
				pxNewTCB->pxStack = pxStack;
 800f740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f742:	6303      	str	r3, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f744:	00b2      	lsls	r2, r6, #2
 800f746:	21a5      	movs	r1, #165	; 0xa5
 800f748:	0018      	movs	r0, r3
 800f74a:	f005 f935 	bl	80149b8 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f74e:	4b57      	ldr	r3, [pc, #348]	; (800f8ac <xTaskGenericCreate+0x1b0>)
 800f750:	18f3      	adds	r3, r6, r3
 800f752:	009b      	lsls	r3, r3, #2
 800f754:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f756:	4694      	mov	ip, r2
 800f758:	4463      	add	r3, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f75a:	2207      	movs	r2, #7
 800f75c:	4393      	bics	r3, r2
 800f75e:	469a      	mov	sl, r3
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f760:	782a      	ldrb	r2, [r5, #0]
 800f762:	2334      	movs	r3, #52	; 0x34
 800f764:	54e2      	strb	r2, [r4, r3]
		if( pcName[ x ] == 0x00 )
 800f766:	782b      	ldrb	r3, [r5, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d000      	beq.n	800f76e <xTaskGenericCreate+0x72>
 800f76c:	e07e      	b.n	800f86c <xTaskGenericCreate+0x170>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f76e:	2500      	movs	r5, #0
 800f770:	2340      	movs	r3, #64	; 0x40
 800f772:	54e5      	strb	r5, [r4, r3]
	pxTCB->uxPriority = uxPriority;
 800f774:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f776:	64e7      	str	r7, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f778:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f77a:	1d23      	adds	r3, r4, #4
 800f77c:	9301      	str	r3, [sp, #4]
 800f77e:	0018      	movs	r0, r3
 800f780:	f7ff fb9f 	bl	800eec2 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f784:	0020      	movs	r0, r4
 800f786:	3018      	adds	r0, #24
 800f788:	f7ff fb9b 	bl	800eec2 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f78c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f78e:	2307      	movs	r3, #7
 800f790:	1bdb      	subs	r3, r3, r7
 800f792:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f794:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f796:	6565      	str	r5, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f798:	65a5      	str	r5, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f79a:	235c      	movs	r3, #92	; 0x5c
 800f79c:	54e5      	strb	r5, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f79e:	9a03      	ldr	r2, [sp, #12]
 800f7a0:	9902      	ldr	r1, [sp, #8]
 800f7a2:	4650      	mov	r0, sl
 800f7a4:	f001 f820 	bl	80107e8 <pxPortInitialiseStack>
 800f7a8:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7ac:	42ab      	cmp	r3, r5
 800f7ae:	d000      	beq.n	800f7b2 <xTaskGenericCreate+0xb6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7b0:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f7b2:	f001 f861 	bl	8010878 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f7b6:	4a3e      	ldr	r2, [pc, #248]	; (800f8b0 <xTaskGenericCreate+0x1b4>)
 800f7b8:	6813      	ldr	r3, [r2, #0]
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f7be:	4b3d      	ldr	r3, [pc, #244]	; (800f8b4 <xTaskGenericCreate+0x1b8>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d162      	bne.n	800f88c <xTaskGenericCreate+0x190>
				pxCurrentTCB =  pxNewTCB;
 800f7c6:	4b3b      	ldr	r3, [pc, #236]	; (800f8b4 <xTaskGenericCreate+0x1b8>)
 800f7c8:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f7ca:	6813      	ldr	r3, [r2, #0]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d120      	bne.n	800f812 <xTaskGenericCreate+0x116>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7d0:	2500      	movs	r5, #0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f7d2:	3313      	adds	r3, #19
 800f7d4:	4698      	mov	r8, r3
 800f7d6:	4e38      	ldr	r6, [pc, #224]	; (800f8b8 <xTaskGenericCreate+0x1bc>)
 800f7d8:	4640      	mov	r0, r8
 800f7da:	4368      	muls	r0, r5
 800f7dc:	1980      	adds	r0, r0, r6
 800f7de:	f7ff fb65 	bl	800eeac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f7e2:	3501      	adds	r5, #1
 800f7e4:	2d07      	cmp	r5, #7
 800f7e6:	d1f7      	bne.n	800f7d8 <xTaskGenericCreate+0xdc>
	vListInitialise( &xDelayedTaskList1 );
 800f7e8:	4e34      	ldr	r6, [pc, #208]	; (800f8bc <xTaskGenericCreate+0x1c0>)
 800f7ea:	0030      	movs	r0, r6
 800f7ec:	f7ff fb5e 	bl	800eeac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f7f0:	4d33      	ldr	r5, [pc, #204]	; (800f8c0 <xTaskGenericCreate+0x1c4>)
 800f7f2:	0028      	movs	r0, r5
 800f7f4:	f7ff fb5a 	bl	800eeac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f7f8:	4832      	ldr	r0, [pc, #200]	; (800f8c4 <xTaskGenericCreate+0x1c8>)
 800f7fa:	f7ff fb57 	bl	800eeac <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f7fe:	4832      	ldr	r0, [pc, #200]	; (800f8c8 <xTaskGenericCreate+0x1cc>)
 800f800:	f7ff fb54 	bl	800eeac <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f804:	4831      	ldr	r0, [pc, #196]	; (800f8cc <xTaskGenericCreate+0x1d0>)
 800f806:	f7ff fb51 	bl	800eeac <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f80a:	4b31      	ldr	r3, [pc, #196]	; (800f8d0 <xTaskGenericCreate+0x1d4>)
 800f80c:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f80e:	4b31      	ldr	r3, [pc, #196]	; (800f8d4 <xTaskGenericCreate+0x1d8>)
 800f810:	601d      	str	r5, [r3, #0]
			uxTaskNumber++;
 800f812:	4a31      	ldr	r2, [pc, #196]	; (800f8d8 <xTaskGenericCreate+0x1dc>)
 800f814:	6813      	ldr	r3, [r2, #0]
 800f816:	3301      	adds	r3, #1
 800f818:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f81a:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f81c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f81e:	4a2f      	ldr	r2, [pc, #188]	; (800f8dc <xTaskGenericCreate+0x1e0>)
 800f820:	6812      	ldr	r2, [r2, #0]
 800f822:	4293      	cmp	r3, r2
 800f824:	d901      	bls.n	800f82a <xTaskGenericCreate+0x12e>
 800f826:	4a2d      	ldr	r2, [pc, #180]	; (800f8dc <xTaskGenericCreate+0x1e0>)
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	2014      	movs	r0, #20
 800f82c:	4358      	muls	r0, r3
 800f82e:	4b22      	ldr	r3, [pc, #136]	; (800f8b8 <xTaskGenericCreate+0x1bc>)
 800f830:	18c0      	adds	r0, r0, r3
 800f832:	9901      	ldr	r1, [sp, #4]
 800f834:	f7ff fb48 	bl	800eec8 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f838:	f001 f82a 	bl	8010890 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f83c:	4b28      	ldr	r3, [pc, #160]	; (800f8e0 <xTaskGenericCreate+0x1e4>)
 800f83e:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f840:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00d      	beq.n	800f862 <xTaskGenericCreate+0x166>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f846:	4b1b      	ldr	r3, [pc, #108]	; (800f8b4 <xTaskGenericCreate+0x1b8>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f84c:	42bb      	cmp	r3, r7
 800f84e:	d208      	bcs.n	800f862 <xTaskGenericCreate+0x166>
				taskYIELD_IF_USING_PREEMPTION();
 800f850:	f001 f806 	bl	8010860 <vPortYield>
			xReturn = pdPASS;
 800f854:	2001      	movs	r0, #1
 800f856:	e004      	b.n	800f862 <xTaskGenericCreate+0x166>
				vPortFree( pxStack );
 800f858:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f85a:	f001 f925 	bl	8010aa8 <vPortFree>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f85e:	2001      	movs	r0, #1
 800f860:	4240      	negs	r0, r0
}
 800f862:	b005      	add	sp, #20
 800f864:	bc0c      	pop	{r2, r3}
 800f866:	4690      	mov	r8, r2
 800f868:	469a      	mov	sl, r3
 800f86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f86c:	1c6b      	adds	r3, r5, #1
 800f86e:	0022      	movs	r2, r4
 800f870:	3235      	adds	r2, #53	; 0x35
 800f872:	0021      	movs	r1, r4
 800f874:	3141      	adds	r1, #65	; 0x41
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f876:	7818      	ldrb	r0, [r3, #0]
 800f878:	7010      	strb	r0, [r2, #0]
		if( pcName[ x ] == 0x00 )
 800f87a:	7818      	ldrb	r0, [r3, #0]
 800f87c:	2800      	cmp	r0, #0
 800f87e:	d100      	bne.n	800f882 <xTaskGenericCreate+0x186>
 800f880:	e775      	b.n	800f76e <xTaskGenericCreate+0x72>
 800f882:	3301      	adds	r3, #1
 800f884:	3201      	adds	r2, #1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f886:	4291      	cmp	r1, r2
 800f888:	d1f5      	bne.n	800f876 <xTaskGenericCreate+0x17a>
 800f88a:	e770      	b.n	800f76e <xTaskGenericCreate+0x72>
				if( xSchedulerRunning == pdFALSE )
 800f88c:	4b14      	ldr	r3, [pc, #80]	; (800f8e0 <xTaskGenericCreate+0x1e4>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d1be      	bne.n	800f812 <xTaskGenericCreate+0x116>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f894:	4b07      	ldr	r3, [pc, #28]	; (800f8b4 <xTaskGenericCreate+0x1b8>)
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89a:	42bb      	cmp	r3, r7
 800f89c:	d8b9      	bhi.n	800f812 <xTaskGenericCreate+0x116>
						pxCurrentTCB = pxNewTCB;
 800f89e:	4b05      	ldr	r3, [pc, #20]	; (800f8b4 <xTaskGenericCreate+0x1b8>)
 800f8a0:	601c      	str	r4, [r3, #0]
 800f8a2:	e7b6      	b.n	800f812 <xTaskGenericCreate+0x116>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f8a4:	2001      	movs	r0, #1
 800f8a6:	4240      	negs	r0, r0
 800f8a8:	e7db      	b.n	800f862 <xTaskGenericCreate+0x166>
 800f8aa:	46c0      	nop			; (mov r8, r8)
 800f8ac:	3fffffff 	.word	0x3fffffff
 800f8b0:	20002280 	.word	0x20002280
 800f8b4:	200021e4 	.word	0x200021e4
 800f8b8:	200021f0 	.word	0x200021f0
 800f8bc:	20002298 	.word	0x20002298
 800f8c0:	200022ac 	.word	0x200022ac
 800f8c4:	200022c4 	.word	0x200022c4
 800f8c8:	200022f0 	.word	0x200022f0
 800f8cc:	200022dc 	.word	0x200022dc
 800f8d0:	200021e8 	.word	0x200021e8
 800f8d4:	200021ec 	.word	0x200021ec
 800f8d8:	2000228c 	.word	0x2000228c
 800f8dc:	20002294 	.word	0x20002294
 800f8e0:	200022d8 	.word	0x200022d8

0800f8e4 <uxTaskPriorityGet>:
	{
 800f8e4:	b510      	push	{r4, lr}
 800f8e6:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f8e8:	f000 ffc6 	bl	8010878 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f8ec:	2c00      	cmp	r4, #0
 800f8ee:	d004      	beq.n	800f8fa <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f8f0:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f8f2:	f000 ffcd 	bl	8010890 <vPortExitCritical>
	}
 800f8f6:	0020      	movs	r0, r4
 800f8f8:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f8fa:	4b01      	ldr	r3, [pc, #4]	; (800f900 <uxTaskPriorityGet+0x1c>)
 800f8fc:	681c      	ldr	r4, [r3, #0]
 800f8fe:	e7f7      	b.n	800f8f0 <uxTaskPriorityGet+0xc>
 800f900:	200021e4 	.word	0x200021e4

0800f904 <vTaskPrioritySet>:
	{
 800f904:	b570      	push	{r4, r5, r6, lr}
 800f906:	0004      	movs	r4, r0
 800f908:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f90a:	2906      	cmp	r1, #6
 800f90c:	d901      	bls.n	800f912 <vTaskPrioritySet+0xe>
 800f90e:	b672      	cpsid	i
 800f910:	e7fe      	b.n	800f910 <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f912:	f000 ffb1 	bl	8010878 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f916:	2c00      	cmp	r4, #0
 800f918:	d101      	bne.n	800f91e <vTaskPrioritySet+0x1a>
 800f91a:	4b21      	ldr	r3, [pc, #132]	; (800f9a0 <vTaskPrioritySet+0x9c>)
 800f91c:	681c      	ldr	r4, [r3, #0]
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f91e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f920:	4295      	cmp	r5, r2
 800f922:	d032      	beq.n	800f98a <vTaskPrioritySet+0x86>
				if( uxNewPriority > uxCurrentBasePriority )
 800f924:	d934      	bls.n	800f990 <vTaskPrioritySet+0x8c>
					if( pxTCB != pxCurrentTCB )
 800f926:	4b1e      	ldr	r3, [pc, #120]	; (800f9a0 <vTaskPrioritySet+0x9c>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	42a3      	cmp	r3, r4
 800f92c:	d036      	beq.n	800f99c <vTaskPrioritySet+0x98>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f92e:	4b1c      	ldr	r3, [pc, #112]	; (800f9a0 <vTaskPrioritySet+0x9c>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f934:	2600      	movs	r6, #0
 800f936:	429d      	cmp	r5, r3
 800f938:	4176      	adcs	r6, r6
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f93a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f93c:	428a      	cmp	r2, r1
 800f93e:	d100      	bne.n	800f942 <vTaskPrioritySet+0x3e>
						pxTCB->uxPriority = uxNewPriority;
 800f940:	62e5      	str	r5, [r4, #44]	; 0x2c
					pxTCB->uxBasePriority = uxNewPriority;
 800f942:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f944:	69a3      	ldr	r3, [r4, #24]
 800f946:	2b00      	cmp	r3, #0
 800f948:	db02      	blt.n	800f950 <vTaskPrioritySet+0x4c>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f94a:	2207      	movs	r2, #7
 800f94c:	1b55      	subs	r5, r2, r5
 800f94e:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f950:	2314      	movs	r3, #20
 800f952:	434b      	muls	r3, r1
 800f954:	4a13      	ldr	r2, [pc, #76]	; (800f9a4 <vTaskPrioritySet+0xa0>)
 800f956:	189b      	adds	r3, r3, r2
 800f958:	6962      	ldr	r2, [r4, #20]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d111      	bne.n	800f982 <vTaskPrioritySet+0x7e>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f95e:	1d25      	adds	r5, r4, #4
 800f960:	0028      	movs	r0, r5
 800f962:	f7ff fad4 	bl	800ef0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f966:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f968:	4a0f      	ldr	r2, [pc, #60]	; (800f9a8 <vTaskPrioritySet+0xa4>)
 800f96a:	6812      	ldr	r2, [r2, #0]
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d901      	bls.n	800f974 <vTaskPrioritySet+0x70>
 800f970:	4a0d      	ldr	r2, [pc, #52]	; (800f9a8 <vTaskPrioritySet+0xa4>)
 800f972:	6013      	str	r3, [r2, #0]
 800f974:	2014      	movs	r0, #20
 800f976:	4358      	muls	r0, r3
 800f978:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <vTaskPrioritySet+0xa0>)
 800f97a:	18c0      	adds	r0, r0, r3
 800f97c:	0029      	movs	r1, r5
 800f97e:	f7ff faa3 	bl	800eec8 <vListInsertEnd>
				if( xYieldRequired == pdTRUE )
 800f982:	2e01      	cmp	r6, #1
 800f984:	d101      	bne.n	800f98a <vTaskPrioritySet+0x86>
					taskYIELD_IF_USING_PREEMPTION();
 800f986:	f000 ff6b 	bl	8010860 <vPortYield>
		taskEXIT_CRITICAL();
 800f98a:	f000 ff81 	bl	8010890 <vPortExitCritical>
	}
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
				else if( pxTCB == pxCurrentTCB )
 800f990:	4b03      	ldr	r3, [pc, #12]	; (800f9a0 <vTaskPrioritySet+0x9c>)
 800f992:	681e      	ldr	r6, [r3, #0]
 800f994:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f996:	4273      	negs	r3, r6
 800f998:	415e      	adcs	r6, r3
 800f99a:	e7ce      	b.n	800f93a <vTaskPrioritySet+0x36>
	BaseType_t xYieldRequired = pdFALSE;
 800f99c:	2600      	movs	r6, #0
 800f99e:	e7cc      	b.n	800f93a <vTaskPrioritySet+0x36>
 800f9a0:	200021e4 	.word	0x200021e4
 800f9a4:	200021f0 	.word	0x200021f0
 800f9a8:	20002294 	.word	0x20002294

0800f9ac <vTaskStartScheduler>:
{
 800f9ac:	b500      	push	{lr}
 800f9ae:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	9303      	str	r3, [sp, #12]
 800f9b4:	9302      	str	r3, [sp, #8]
 800f9b6:	9301      	str	r3, [sp, #4]
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	22a0      	movs	r2, #160	; 0xa0
 800f9bc:	490d      	ldr	r1, [pc, #52]	; (800f9f4 <vTaskStartScheduler+0x48>)
 800f9be:	480e      	ldr	r0, [pc, #56]	; (800f9f8 <vTaskStartScheduler+0x4c>)
 800f9c0:	f7ff fe9c 	bl	800f6fc <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800f9c4:	2801      	cmp	r0, #1
 800f9c6:	d003      	beq.n	800f9d0 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d110      	bne.n	800f9ee <vTaskStartScheduler+0x42>
 800f9cc:	b672      	cpsid	i
 800f9ce:	e7fe      	b.n	800f9ce <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800f9d0:	f000 fd68 	bl	80104a4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f9d4:	2801      	cmp	r0, #1
 800f9d6:	d1f7      	bne.n	800f9c8 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800f9d8:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800f9da:	4b08      	ldr	r3, [pc, #32]	; (800f9fc <vTaskStartScheduler+0x50>)
 800f9dc:	2201      	movs	r2, #1
 800f9de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800f9e0:	4b07      	ldr	r3, [pc, #28]	; (800fa00 <vTaskStartScheduler+0x54>)
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800f9e6:	f7f8 fd1d 	bl	8008424 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800f9ea:	f000 ff0f 	bl	801080c <xPortStartScheduler>
}
 800f9ee:	b005      	add	sp, #20
 800f9f0:	bd00      	pop	{pc}
 800f9f2:	46c0      	nop			; (mov r8, r8)
 800f9f4:	0801c2e8 	.word	0x0801c2e8
 800f9f8:	0800fc6d 	.word	0x0800fc6d
 800f9fc:	200022d8 	.word	0x200022d8
 800fa00:	20002304 	.word	0x20002304

0800fa04 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fa04:	4a02      	ldr	r2, [pc, #8]	; (800fa10 <vTaskSuspendAll+0xc>)
 800fa06:	6813      	ldr	r3, [r2, #0]
 800fa08:	3301      	adds	r3, #1
 800fa0a:	6013      	str	r3, [r2, #0]
}
 800fa0c:	4770      	bx	lr
 800fa0e:	46c0      	nop			; (mov r8, r8)
 800fa10:	20002288 	.word	0x20002288

0800fa14 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fa14:	4b01      	ldr	r3, [pc, #4]	; (800fa1c <xTaskGetTickCount+0x8>)
 800fa16:	6818      	ldr	r0, [r3, #0]
}
 800fa18:	4770      	bx	lr
 800fa1a:	46c0      	nop			; (mov r8, r8)
 800fa1c:	20002304 	.word	0x20002304

0800fa20 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800fa20:	4b01      	ldr	r3, [pc, #4]	; (800fa28 <xTaskGetTickCountFromISR+0x8>)
 800fa22:	6818      	ldr	r0, [r3, #0]
}
 800fa24:	4770      	bx	lr
 800fa26:	46c0      	nop			; (mov r8, r8)
 800fa28:	20002304 	.word	0x20002304

0800fa2c <xTaskIncrementTick>:
{
 800fa2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa2e:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa30:	4b39      	ldr	r3, [pc, #228]	; (800fb18 <xTaskIncrementTick+0xec>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d161      	bne.n	800fafc <xTaskIncrementTick+0xd0>
		++xTickCount;
 800fa38:	4b38      	ldr	r3, [pc, #224]	; (800fb1c <xTaskIncrementTick+0xf0>)
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	3201      	adds	r2, #1
 800fa3e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800fa40:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800fa42:	2e00      	cmp	r6, #0
 800fa44:	d112      	bne.n	800fa6c <xTaskIncrementTick+0x40>
				taskSWITCH_DELAYED_LISTS();
 800fa46:	4b36      	ldr	r3, [pc, #216]	; (800fb20 <xTaskIncrementTick+0xf4>)
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d001      	beq.n	800fa54 <xTaskIncrementTick+0x28>
 800fa50:	b672      	cpsid	i
 800fa52:	e7fe      	b.n	800fa52 <xTaskIncrementTick+0x26>
 800fa54:	4a32      	ldr	r2, [pc, #200]	; (800fb20 <xTaskIncrementTick+0xf4>)
 800fa56:	6811      	ldr	r1, [r2, #0]
 800fa58:	4b32      	ldr	r3, [pc, #200]	; (800fb24 <xTaskIncrementTick+0xf8>)
 800fa5a:	6818      	ldr	r0, [r3, #0]
 800fa5c:	6010      	str	r0, [r2, #0]
 800fa5e:	6019      	str	r1, [r3, #0]
 800fa60:	4a31      	ldr	r2, [pc, #196]	; (800fb28 <xTaskIncrementTick+0xfc>)
 800fa62:	6813      	ldr	r3, [r2, #0]
 800fa64:	3301      	adds	r3, #1
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	f7ff fdf0 	bl	800f64c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800fa6c:	4b2f      	ldr	r3, [pc, #188]	; (800fb2c <xTaskIncrementTick+0x100>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800fa70:	2700      	movs	r7, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800fa72:	42b3      	cmp	r3, r6
 800fa74:	d833      	bhi.n	800fade <xTaskIncrementTick+0xb2>
BaseType_t xSwitchRequired = pdFALSE;
 800fa76:	2700      	movs	r7, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa78:	4d29      	ldr	r5, [pc, #164]	; (800fb20 <xTaskIncrementTick+0xf4>)
 800fa7a:	682b      	ldr	r3, [r5, #0]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d029      	beq.n	800fad6 <xTaskIncrementTick+0xaa>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fa82:	4b27      	ldr	r3, [pc, #156]	; (800fb20 <xTaskIncrementTick+0xf4>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	68dc      	ldr	r4, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800fa8a:	6863      	ldr	r3, [r4, #4]
						if( xConstTickCount < xItemValue )
 800fa8c:	429e      	cmp	r6, r3
 800fa8e:	d332      	bcc.n	800faf6 <xTaskIncrementTick+0xca>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fa90:	1d23      	adds	r3, r4, #4
 800fa92:	9301      	str	r3, [sp, #4]
 800fa94:	0018      	movs	r0, r3
 800fa96:	f7ff fa3a 	bl	800ef0e <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fa9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d003      	beq.n	800faa8 <xTaskIncrementTick+0x7c>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800faa0:	0020      	movs	r0, r4
 800faa2:	3018      	adds	r0, #24
 800faa4:	f7ff fa33 	bl	800ef0e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800faa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800faaa:	4a21      	ldr	r2, [pc, #132]	; (800fb30 <xTaskIncrementTick+0x104>)
 800faac:	6812      	ldr	r2, [r2, #0]
 800faae:	4293      	cmp	r3, r2
 800fab0:	d901      	bls.n	800fab6 <xTaskIncrementTick+0x8a>
 800fab2:	4a1f      	ldr	r2, [pc, #124]	; (800fb30 <xTaskIncrementTick+0x104>)
 800fab4:	6013      	str	r3, [r2, #0]
 800fab6:	0098      	lsls	r0, r3, #2
 800fab8:	18c0      	adds	r0, r0, r3
 800faba:	0080      	lsls	r0, r0, #2
 800fabc:	4b1d      	ldr	r3, [pc, #116]	; (800fb34 <xTaskIncrementTick+0x108>)
 800fabe:	18c0      	adds	r0, r0, r3
 800fac0:	9901      	ldr	r1, [sp, #4]
 800fac2:	f7ff fa01 	bl	800eec8 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fac6:	4b1c      	ldr	r3, [pc, #112]	; (800fb38 <xTaskIncrementTick+0x10c>)
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800facc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800face:	429a      	cmp	r2, r3
 800fad0:	d3d3      	bcc.n	800fa7a <xTaskIncrementTick+0x4e>
								xSwitchRequired = pdTRUE;
 800fad2:	2701      	movs	r7, #1
 800fad4:	e7d1      	b.n	800fa7a <xTaskIncrementTick+0x4e>
						xNextTaskUnblockTime = portMAX_DELAY;
 800fad6:	4b15      	ldr	r3, [pc, #84]	; (800fb2c <xTaskIncrementTick+0x100>)
 800fad8:	2201      	movs	r2, #1
 800fada:	4252      	negs	r2, r2
 800fadc:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fade:	4b16      	ldr	r3, [pc, #88]	; (800fb38 <xTaskIncrementTick+0x10c>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fae4:	0093      	lsls	r3, r2, #2
 800fae6:	189b      	adds	r3, r3, r2
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	4a12      	ldr	r2, [pc, #72]	; (800fb34 <xTaskIncrementTick+0x108>)
 800faec:	589b      	ldr	r3, [r3, r2]
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d909      	bls.n	800fb06 <xTaskIncrementTick+0xda>
				xSwitchRequired = pdTRUE;
 800faf2:	2701      	movs	r7, #1
 800faf4:	e007      	b.n	800fb06 <xTaskIncrementTick+0xda>
							xNextTaskUnblockTime = xItemValue;
 800faf6:	4a0d      	ldr	r2, [pc, #52]	; (800fb2c <xTaskIncrementTick+0x100>)
 800faf8:	6013      	str	r3, [r2, #0]
							break;
 800fafa:	e7f0      	b.n	800fade <xTaskIncrementTick+0xb2>
		++uxPendedTicks;
 800fafc:	4a0f      	ldr	r2, [pc, #60]	; (800fb3c <xTaskIncrementTick+0x110>)
 800fafe:	6813      	ldr	r3, [r2, #0]
 800fb00:	3301      	adds	r3, #1
 800fb02:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800fb04:	2700      	movs	r7, #0
		if( xYieldPending != pdFALSE )
 800fb06:	4b0e      	ldr	r3, [pc, #56]	; (800fb40 <xTaskIncrementTick+0x114>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d000      	beq.n	800fb10 <xTaskIncrementTick+0xe4>
			xSwitchRequired = pdTRUE;
 800fb0e:	2701      	movs	r7, #1
}
 800fb10:	0038      	movs	r0, r7
 800fb12:	b003      	add	sp, #12
 800fb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb16:	46c0      	nop			; (mov r8, r8)
 800fb18:	20002288 	.word	0x20002288
 800fb1c:	20002304 	.word	0x20002304
 800fb20:	200021e8 	.word	0x200021e8
 800fb24:	200021ec 	.word	0x200021ec
 800fb28:	200022c0 	.word	0x200022c0
 800fb2c:	20000110 	.word	0x20000110
 800fb30:	20002294 	.word	0x20002294
 800fb34:	200021f0 	.word	0x200021f0
 800fb38:	200021e4 	.word	0x200021e4
 800fb3c:	20002284 	.word	0x20002284
 800fb40:	20002308 	.word	0x20002308

0800fb44 <xTaskResumeAll>:
{
 800fb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800fb46:	4b2f      	ldr	r3, [pc, #188]	; (800fc04 <xTaskResumeAll+0xc0>)
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <xTaskResumeAll+0xe>
 800fb4e:	b672      	cpsid	i
 800fb50:	e7fe      	b.n	800fb50 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800fb52:	f000 fe91 	bl	8010878 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fb56:	4b2b      	ldr	r3, [pc, #172]	; (800fc04 <xTaskResumeAll+0xc0>)
 800fb58:	681a      	ldr	r2, [r3, #0]
 800fb5a:	3a01      	subs	r2, #1
 800fb5c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb5e:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb60:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb62:	42a3      	cmp	r3, r4
 800fb64:	d105      	bne.n	800fb72 <xTaskResumeAll+0x2e>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb66:	4b28      	ldr	r3, [pc, #160]	; (800fc08 <xTaskResumeAll+0xc4>)
 800fb68:	681b      	ldr	r3, [r3, #0]
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fb6a:	4d28      	ldr	r5, [pc, #160]	; (800fc0c <xTaskResumeAll+0xc8>)
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb6c:	42a3      	cmp	r3, r4
 800fb6e:	d12a      	bne.n	800fbc6 <xTaskResumeAll+0x82>
BaseType_t xAlreadyYielded = pdFALSE;
 800fb70:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fb72:	f000 fe8d 	bl	8010890 <vPortExitCritical>
}
 800fb76:	0020      	movs	r0, r4
 800fb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxTCB );
 800fb7a:	0098      	lsls	r0, r3, #2
 800fb7c:	18c0      	adds	r0, r0, r3
 800fb7e:	0080      	lsls	r0, r0, #2
 800fb80:	4b23      	ldr	r3, [pc, #140]	; (800fc10 <xTaskResumeAll+0xcc>)
 800fb82:	18c0      	adds	r0, r0, r3
 800fb84:	0021      	movs	r1, r4
 800fb86:	f7ff f99f 	bl	800eec8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb8a:	4b22      	ldr	r3, [pc, #136]	; (800fc14 <xTaskResumeAll+0xd0>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d214      	bcs.n	800fbc0 <xTaskResumeAll+0x7c>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb96:	6833      	ldr	r3, [r6, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d016      	beq.n	800fbca <xTaskResumeAll+0x86>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fb9c:	68eb      	ldr	r3, [r5, #12]
 800fb9e:	68df      	ldr	r7, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fba0:	0038      	movs	r0, r7
 800fba2:	3018      	adds	r0, #24
 800fba4:	f7ff f9b3 	bl	800ef0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fba8:	1d3c      	adds	r4, r7, #4
 800fbaa:	0020      	movs	r0, r4
 800fbac:	f7ff f9af 	bl	800ef0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb2:	4a19      	ldr	r2, [pc, #100]	; (800fc18 <xTaskResumeAll+0xd4>)
 800fbb4:	6812      	ldr	r2, [r2, #0]
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d9df      	bls.n	800fb7a <xTaskResumeAll+0x36>
 800fbba:	4a17      	ldr	r2, [pc, #92]	; (800fc18 <xTaskResumeAll+0xd4>)
 800fbbc:	6013      	str	r3, [r2, #0]
 800fbbe:	e7dc      	b.n	800fb7a <xTaskResumeAll+0x36>
						xYieldPending = pdTRUE;
 800fbc0:	4b16      	ldr	r3, [pc, #88]	; (800fc1c <xTaskResumeAll+0xd8>)
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbc6:	4e11      	ldr	r6, [pc, #68]	; (800fc0c <xTaskResumeAll+0xc8>)
 800fbc8:	e7e5      	b.n	800fb96 <xTaskResumeAll+0x52>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800fbca:	4b15      	ldr	r3, [pc, #84]	; (800fc20 <xTaskResumeAll+0xdc>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d005      	beq.n	800fbde <xTaskResumeAll+0x9a>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fbd2:	4e13      	ldr	r6, [pc, #76]	; (800fc20 <xTaskResumeAll+0xdc>)
							xYieldPending = pdTRUE;
 800fbd4:	4c11      	ldr	r4, [pc, #68]	; (800fc1c <xTaskResumeAll+0xd8>)
 800fbd6:	2501      	movs	r5, #1
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fbd8:	6833      	ldr	r3, [r6, #0]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d108      	bne.n	800fbf0 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
 800fbde:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <xTaskResumeAll+0xd8>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbe2:	2400      	movs	r4, #0
				if( xYieldPending == pdTRUE )
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d1c4      	bne.n	800fb72 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800fbe8:	f000 fe3a 	bl	8010860 <vPortYield>
						xAlreadyYielded = pdTRUE;
 800fbec:	3401      	adds	r4, #1
 800fbee:	e7c0      	b.n	800fb72 <xTaskResumeAll+0x2e>
						if( xTaskIncrementTick() != pdFALSE )
 800fbf0:	f7ff ff1c 	bl	800fa2c <xTaskIncrementTick>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	d000      	beq.n	800fbfa <xTaskResumeAll+0xb6>
							xYieldPending = pdTRUE;
 800fbf8:	6025      	str	r5, [r4, #0]
						--uxPendedTicks;
 800fbfa:	4a09      	ldr	r2, [pc, #36]	; (800fc20 <xTaskResumeAll+0xdc>)
 800fbfc:	6813      	ldr	r3, [r2, #0]
 800fbfe:	3b01      	subs	r3, #1
 800fc00:	6013      	str	r3, [r2, #0]
 800fc02:	e7e9      	b.n	800fbd8 <xTaskResumeAll+0x94>
 800fc04:	20002288 	.word	0x20002288
 800fc08:	20002280 	.word	0x20002280
 800fc0c:	200022c4 	.word	0x200022c4
 800fc10:	200021f0 	.word	0x200021f0
 800fc14:	200021e4 	.word	0x200021e4
 800fc18:	20002294 	.word	0x20002294
 800fc1c:	20002308 	.word	0x20002308
 800fc20:	20002284 	.word	0x20002284

0800fc24 <vTaskDelay>:
	{
 800fc24:	b570      	push	{r4, r5, r6, lr}
 800fc26:	1e05      	subs	r5, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fc28:	d016      	beq.n	800fc58 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800fc2a:	4b0d      	ldr	r3, [pc, #52]	; (800fc60 <vTaskDelay+0x3c>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <vTaskDelay+0x12>
 800fc32:	b672      	cpsid	i
 800fc34:	e7fe      	b.n	800fc34 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800fc36:	f7ff fee5 	bl	800fa04 <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800fc3a:	4b0a      	ldr	r3, [pc, #40]	; (800fc64 <vTaskDelay+0x40>)
 800fc3c:	681c      	ldr	r4, [r3, #0]
 800fc3e:	1964      	adds	r4, r4, r5
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fc40:	4b09      	ldr	r3, [pc, #36]	; (800fc68 <vTaskDelay+0x44>)
 800fc42:	6818      	ldr	r0, [r3, #0]
 800fc44:	3004      	adds	r0, #4
 800fc46:	f7ff f962 	bl	800ef0e <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fc4a:	0020      	movs	r0, r4
 800fc4c:	f7ff fd14 	bl	800f678 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fc50:	f7ff ff78 	bl	800fb44 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fc54:	2800      	cmp	r0, #0
 800fc56:	d101      	bne.n	800fc5c <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800fc58:	f000 fe02 	bl	8010860 <vPortYield>
	}
 800fc5c:	bd70      	pop	{r4, r5, r6, pc}
 800fc5e:	46c0      	nop			; (mov r8, r8)
 800fc60:	20002288 	.word	0x20002288
 800fc64:	20002304 	.word	0x20002304
 800fc68:	200021e4 	.word	0x200021e4

0800fc6c <prvIdleTask>:
{
 800fc6c:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fc6e:	4d16      	ldr	r5, [pc, #88]	; (800fcc8 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fc70:	4e16      	ldr	r6, [pc, #88]	; (800fccc <prvIdleTask+0x60>)
 800fc72:	e003      	b.n	800fc7c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc74:	4b16      	ldr	r3, [pc, #88]	; (800fcd0 <prvIdleTask+0x64>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2b01      	cmp	r3, #1
 800fc7a:	d822      	bhi.n	800fcc2 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fc7c:	682b      	ldr	r3, [r5, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d0f8      	beq.n	800fc74 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800fc82:	f7ff febf 	bl	800fa04 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fc86:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
 800fc88:	f7ff ff5c 	bl	800fb44 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800fc8c:	2c00      	cmp	r4, #0
 800fc8e:	d0f5      	beq.n	800fc7c <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800fc90:	f000 fdf2 	bl	8010878 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fc94:	4b0d      	ldr	r3, [pc, #52]	; (800fccc <prvIdleTask+0x60>)
 800fc96:	68db      	ldr	r3, [r3, #12]
 800fc98:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fc9a:	1d20      	adds	r0, r4, #4
 800fc9c:	f7ff f937 	bl	800ef0e <uxListRemove>
					--uxCurrentNumberOfTasks;
 800fca0:	4a0c      	ldr	r2, [pc, #48]	; (800fcd4 <prvIdleTask+0x68>)
 800fca2:	6813      	ldr	r3, [r2, #0]
 800fca4:	3b01      	subs	r3, #1
 800fca6:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800fca8:	4a07      	ldr	r2, [pc, #28]	; (800fcc8 <prvIdleTask+0x5c>)
 800fcaa:	6813      	ldr	r3, [r2, #0]
 800fcac:	3b01      	subs	r3, #1
 800fcae:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800fcb0:	f000 fdee 	bl	8010890 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800fcb4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fcb6:	f000 fef7 	bl	8010aa8 <vPortFree>
		vPortFree( pxTCB );
 800fcba:	0020      	movs	r0, r4
 800fcbc:	f000 fef4 	bl	8010aa8 <vPortFree>
 800fcc0:	e7dc      	b.n	800fc7c <prvIdleTask+0x10>
				taskYIELD();
 800fcc2:	f000 fdcd 	bl	8010860 <vPortYield>
 800fcc6:	e7d9      	b.n	800fc7c <prvIdleTask+0x10>
 800fcc8:	20002290 	.word	0x20002290
 800fccc:	200022f0 	.word	0x200022f0
 800fcd0:	200021f0 	.word	0x200021f0
 800fcd4:	20002280 	.word	0x20002280

0800fcd8 <uxTaskGetSystemState>:
	{
 800fcd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcda:	46c6      	mov	lr, r8
 800fcdc:	b500      	push	{lr}
 800fcde:	0006      	movs	r6, r0
 800fce0:	000d      	movs	r5, r1
 800fce2:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800fce4:	f7ff fe8e 	bl	800fa04 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fce8:	4b1e      	ldr	r3, [pc, #120]	; (800fd64 <uxTaskGetSystemState+0x8c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800fcec:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fcee:	42ab      	cmp	r3, r5
 800fcf0:	d831      	bhi.n	800fd56 <uxTaskGetSystemState+0x7e>
 800fcf2:	4d1d      	ldr	r5, [pc, #116]	; (800fd68 <uxTaskGetSystemState+0x90>)
 800fcf4:	002f      	movs	r7, r5
 800fcf6:	3f8c      	subs	r7, #140	; 0x8c
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800fcf8:	0160      	lsls	r0, r4, #5
 800fcfa:	1830      	adds	r0, r6, r0
 800fcfc:	2201      	movs	r2, #1
 800fcfe:	0029      	movs	r1, r5
 800fd00:	f7ff fc50 	bl	800f5a4 <prvListTaskWithinSingleList>
 800fd04:	1824      	adds	r4, r4, r0
 800fd06:	3d14      	subs	r5, #20
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd08:	42bd      	cmp	r5, r7
 800fd0a:	d1f5      	bne.n	800fcf8 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800fd0c:	4b17      	ldr	r3, [pc, #92]	; (800fd6c <uxTaskGetSystemState+0x94>)
 800fd0e:	6819      	ldr	r1, [r3, #0]
 800fd10:	0160      	lsls	r0, r4, #5
 800fd12:	1830      	adds	r0, r6, r0
 800fd14:	2202      	movs	r2, #2
 800fd16:	f7ff fc45 	bl	800f5a4 <prvListTaskWithinSingleList>
 800fd1a:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800fd1c:	4b14      	ldr	r3, [pc, #80]	; (800fd70 <uxTaskGetSystemState+0x98>)
 800fd1e:	6819      	ldr	r1, [r3, #0]
 800fd20:	0160      	lsls	r0, r4, #5
 800fd22:	1830      	adds	r0, r6, r0
 800fd24:	2202      	movs	r2, #2
 800fd26:	f7ff fc3d 	bl	800f5a4 <prvListTaskWithinSingleList>
 800fd2a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800fd2c:	0160      	lsls	r0, r4, #5
 800fd2e:	1830      	adds	r0, r6, r0
 800fd30:	2204      	movs	r2, #4
 800fd32:	4910      	ldr	r1, [pc, #64]	; (800fd74 <uxTaskGetSystemState+0x9c>)
 800fd34:	f7ff fc36 	bl	800f5a4 <prvListTaskWithinSingleList>
 800fd38:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800fd3a:	0160      	lsls	r0, r4, #5
 800fd3c:	1830      	adds	r0, r6, r0
 800fd3e:	2203      	movs	r2, #3
 800fd40:	490d      	ldr	r1, [pc, #52]	; (800fd78 <uxTaskGetSystemState+0xa0>)
 800fd42:	f7ff fc2f 	bl	800f5a4 <prvListTaskWithinSingleList>
 800fd46:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800fd48:	4643      	mov	r3, r8
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d003      	beq.n	800fd56 <uxTaskGetSystemState+0x7e>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fd4e:	f7f8 fb79 	bl	8008444 <ulMainGetRunTimeCounterValue>
 800fd52:	4643      	mov	r3, r8
 800fd54:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800fd56:	f7ff fef5 	bl	800fb44 <xTaskResumeAll>
	}
 800fd5a:	0020      	movs	r0, r4
 800fd5c:	bc04      	pop	{r2}
 800fd5e:	4690      	mov	r8, r2
 800fd60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd62:	46c0      	nop			; (mov r8, r8)
 800fd64:	20002280 	.word	0x20002280
 800fd68:	20002268 	.word	0x20002268
 800fd6c:	200021e8 	.word	0x200021e8
 800fd70:	200021ec 	.word	0x200021ec
 800fd74:	200022f0 	.word	0x200022f0
 800fd78:	200022dc 	.word	0x200022dc

0800fd7c <vTaskSwitchContext>:
{
 800fd7c:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd7e:	4b3a      	ldr	r3, [pc, #232]	; (800fe68 <vTaskSwitchContext+0xec>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d003      	beq.n	800fd8e <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fd86:	4b39      	ldr	r3, [pc, #228]	; (800fe6c <vTaskSwitchContext+0xf0>)
 800fd88:	2201      	movs	r2, #1
 800fd8a:	601a      	str	r2, [r3, #0]
}
 800fd8c:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fd8e:	4b37      	ldr	r3, [pc, #220]	; (800fe6c <vTaskSwitchContext+0xf0>)
 800fd90:	2200      	movs	r2, #0
 800fd92:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fd94:	f7f8 fb56 	bl	8008444 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fd98:	4b35      	ldr	r3, [pc, #212]	; (800fe70 <vTaskSwitchContext+0xf4>)
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	4298      	cmp	r0, r3
 800fd9e:	d905      	bls.n	800fdac <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fda0:	4a34      	ldr	r2, [pc, #208]	; (800fe74 <vTaskSwitchContext+0xf8>)
 800fda2:	6812      	ldr	r2, [r2, #0]
 800fda4:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fda6:	1acb      	subs	r3, r1, r3
 800fda8:	181b      	adds	r3, r3, r0
 800fdaa:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fdac:	4b30      	ldr	r3, [pc, #192]	; (800fe70 <vTaskSwitchContext+0xf4>)
 800fdae:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fdb0:	4b30      	ldr	r3, [pc, #192]	; (800fe74 <vTaskSwitchContext+0xf8>)
 800fdb2:	681a      	ldr	r2, [r3, #0]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6812      	ldr	r2, [r2, #0]
 800fdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d805      	bhi.n	800fdca <vTaskSwitchContext+0x4e>
 800fdbe:	4b2d      	ldr	r3, [pc, #180]	; (800fe74 <vTaskSwitchContext+0xf8>)
 800fdc0:	6818      	ldr	r0, [r3, #0]
 800fdc2:	6819      	ldr	r1, [r3, #0]
 800fdc4:	3134      	adds	r1, #52	; 0x34
 800fdc6:	f7fe f9af 	bl	800e128 <vApplicationStackOverflowHook>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fdca:	4b2a      	ldr	r3, [pc, #168]	; (800fe74 <vTaskSwitchContext+0xf8>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fdd0:	2214      	movs	r2, #20
 800fdd2:	4929      	ldr	r1, [pc, #164]	; (800fe78 <vTaskSwitchContext+0xfc>)
 800fdd4:	f004 fdd8 	bl	8014988 <memcmp>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	d005      	beq.n	800fde8 <vTaskSwitchContext+0x6c>
 800fddc:	4b25      	ldr	r3, [pc, #148]	; (800fe74 <vTaskSwitchContext+0xf8>)
 800fdde:	6818      	ldr	r0, [r3, #0]
 800fde0:	6819      	ldr	r1, [r3, #0]
 800fde2:	3134      	adds	r1, #52	; 0x34
 800fde4:	f7fe f9a0 	bl	800e128 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fde8:	4b24      	ldr	r3, [pc, #144]	; (800fe7c <vTaskSwitchContext+0x100>)
 800fdea:	681a      	ldr	r2, [r3, #0]
 800fdec:	0093      	lsls	r3, r2, #2
 800fdee:	189b      	adds	r3, r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	4a23      	ldr	r2, [pc, #140]	; (800fe80 <vTaskSwitchContext+0x104>)
 800fdf4:	589b      	ldr	r3, [r3, r2]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d115      	bne.n	800fe26 <vTaskSwitchContext+0xaa>
 800fdfa:	4b20      	ldr	r3, [pc, #128]	; (800fe7c <vTaskSwitchContext+0x100>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00f      	beq.n	800fe22 <vTaskSwitchContext+0xa6>
 800fe02:	4a1e      	ldr	r2, [pc, #120]	; (800fe7c <vTaskSwitchContext+0x100>)
 800fe04:	4c1e      	ldr	r4, [pc, #120]	; (800fe80 <vTaskSwitchContext+0x104>)
 800fe06:	0010      	movs	r0, r2
 800fe08:	6813      	ldr	r3, [r2, #0]
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	6013      	str	r3, [r2, #0]
 800fe0e:	6811      	ldr	r1, [r2, #0]
 800fe10:	008b      	lsls	r3, r1, #2
 800fe12:	185b      	adds	r3, r3, r1
 800fe14:	009b      	lsls	r3, r3, #2
 800fe16:	591b      	ldr	r3, [r3, r4]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d104      	bne.n	800fe26 <vTaskSwitchContext+0xaa>
 800fe1c:	6803      	ldr	r3, [r0, #0]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d1f2      	bne.n	800fe08 <vTaskSwitchContext+0x8c>
 800fe22:	b672      	cpsid	i
 800fe24:	e7fe      	b.n	800fe24 <vTaskSwitchContext+0xa8>
 800fe26:	4b15      	ldr	r3, [pc, #84]	; (800fe7c <vTaskSwitchContext+0x100>)
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	4c15      	ldr	r4, [pc, #84]	; (800fe80 <vTaskSwitchContext+0x104>)
 800fe2c:	0093      	lsls	r3, r2, #2
 800fe2e:	1899      	adds	r1, r3, r2
 800fe30:	0089      	lsls	r1, r1, #2
 800fe32:	1861      	adds	r1, r4, r1
 800fe34:	6848      	ldr	r0, [r1, #4]
 800fe36:	6840      	ldr	r0, [r0, #4]
 800fe38:	6048      	str	r0, [r1, #4]
 800fe3a:	189b      	adds	r3, r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	3308      	adds	r3, #8
 800fe40:	191b      	adds	r3, r3, r4
 800fe42:	4298      	cmp	r0, r3
 800fe44:	d009      	beq.n	800fe5a <vTaskSwitchContext+0xde>
 800fe46:	0093      	lsls	r3, r2, #2
 800fe48:	189a      	adds	r2, r3, r2
 800fe4a:	0092      	lsls	r2, r2, #2
 800fe4c:	4b0c      	ldr	r3, [pc, #48]	; (800fe80 <vTaskSwitchContext+0x104>)
 800fe4e:	189a      	adds	r2, r3, r2
 800fe50:	6853      	ldr	r3, [r2, #4]
 800fe52:	68da      	ldr	r2, [r3, #12]
 800fe54:	4b07      	ldr	r3, [pc, #28]	; (800fe74 <vTaskSwitchContext+0xf8>)
 800fe56:	601a      	str	r2, [r3, #0]
}
 800fe58:	e798      	b.n	800fd8c <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fe5a:	6840      	ldr	r0, [r0, #4]
 800fe5c:	2114      	movs	r1, #20
 800fe5e:	4351      	muls	r1, r2
 800fe60:	1863      	adds	r3, r4, r1
 800fe62:	6058      	str	r0, [r3, #4]
 800fe64:	e7ef      	b.n	800fe46 <vTaskSwitchContext+0xca>
 800fe66:	46c0      	nop			; (mov r8, r8)
 800fe68:	20002288 	.word	0x20002288
 800fe6c:	20002308 	.word	0x20002308
 800fe70:	2000227c 	.word	0x2000227c
 800fe74:	200021e4 	.word	0x200021e4
 800fe78:	0801c2ac 	.word	0x0801c2ac
 800fe7c:	20002294 	.word	0x20002294
 800fe80:	200021f0 	.word	0x200021f0

0800fe84 <vTaskPlaceOnEventList>:
{
 800fe84:	b570      	push	{r4, r5, r6, lr}
 800fe86:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d101      	bne.n	800fe90 <vTaskPlaceOnEventList+0xc>
 800fe8c:	b672      	cpsid	i
 800fe8e:	e7fe      	b.n	800fe8e <vTaskPlaceOnEventList+0xa>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe90:	4d0b      	ldr	r5, [pc, #44]	; (800fec0 <vTaskPlaceOnEventList+0x3c>)
 800fe92:	6829      	ldr	r1, [r5, #0]
 800fe94:	3118      	adds	r1, #24
 800fe96:	f7ff f823 	bl	800eee0 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fe9a:	6828      	ldr	r0, [r5, #0]
 800fe9c:	3004      	adds	r0, #4
 800fe9e:	f7ff f836 	bl	800ef0e <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fea2:	1c63      	adds	r3, r4, #1
 800fea4:	d005      	beq.n	800feb2 <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800fea6:	4b07      	ldr	r3, [pc, #28]	; (800fec4 <vTaskPlaceOnEventList+0x40>)
 800fea8:	6818      	ldr	r0, [r3, #0]
 800feaa:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800feac:	f7ff fbe4 	bl	800f678 <prvAddCurrentTaskToDelayedList>
}
 800feb0:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800feb2:	4b03      	ldr	r3, [pc, #12]	; (800fec0 <vTaskPlaceOnEventList+0x3c>)
 800feb4:	6819      	ldr	r1, [r3, #0]
 800feb6:	3104      	adds	r1, #4
 800feb8:	4803      	ldr	r0, [pc, #12]	; (800fec8 <vTaskPlaceOnEventList+0x44>)
 800feba:	f7ff f805 	bl	800eec8 <vListInsertEnd>
 800febe:	e7f7      	b.n	800feb0 <vTaskPlaceOnEventList+0x2c>
 800fec0:	200021e4 	.word	0x200021e4
 800fec4:	20002304 	.word	0x20002304
 800fec8:	200022dc 	.word	0x200022dc

0800fecc <vTaskPlaceOnEventListRestricted>:
	{
 800fecc:	b570      	push	{r4, r5, r6, lr}
 800fece:	000d      	movs	r5, r1
		configASSERT( pxEventList );
 800fed0:	2800      	cmp	r0, #0
 800fed2:	d101      	bne.n	800fed8 <vTaskPlaceOnEventListRestricted+0xc>
 800fed4:	b672      	cpsid	i
 800fed6:	e7fe      	b.n	800fed6 <vTaskPlaceOnEventListRestricted+0xa>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fed8:	4c07      	ldr	r4, [pc, #28]	; (800fef8 <vTaskPlaceOnEventListRestricted+0x2c>)
 800feda:	6821      	ldr	r1, [r4, #0]
 800fedc:	3118      	adds	r1, #24
 800fede:	f7fe fff3 	bl	800eec8 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fee2:	6820      	ldr	r0, [r4, #0]
 800fee4:	3004      	adds	r0, #4
 800fee6:	f7ff f812 	bl	800ef0e <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800feea:	4b04      	ldr	r3, [pc, #16]	; (800fefc <vTaskPlaceOnEventListRestricted+0x30>)
 800feec:	6818      	ldr	r0, [r3, #0]
 800feee:	1940      	adds	r0, r0, r5
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fef0:	f7ff fbc2 	bl	800f678 <prvAddCurrentTaskToDelayedList>
	}
 800fef4:	bd70      	pop	{r4, r5, r6, pc}
 800fef6:	46c0      	nop			; (mov r8, r8)
 800fef8:	200021e4 	.word	0x200021e4
 800fefc:	20002304 	.word	0x20002304

0800ff00 <xTaskRemoveFromEventList>:
{
 800ff00:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ff02:	68c3      	ldr	r3, [r0, #12]
 800ff04:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ff06:	2d00      	cmp	r5, #0
 800ff08:	d101      	bne.n	800ff0e <xTaskRemoveFromEventList+0xe>
 800ff0a:	b672      	cpsid	i
 800ff0c:	e7fe      	b.n	800ff0c <xTaskRemoveFromEventList+0xc>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff0e:	002c      	movs	r4, r5
 800ff10:	3418      	adds	r4, #24
 800ff12:	0020      	movs	r0, r4
 800ff14:	f7fe fffb 	bl	800ef0e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff18:	4b13      	ldr	r3, [pc, #76]	; (800ff68 <xTaskRemoveFromEventList+0x68>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d11e      	bne.n	800ff5e <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ff20:	1d2c      	adds	r4, r5, #4
 800ff22:	0020      	movs	r0, r4
 800ff24:	f7fe fff3 	bl	800ef0e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff28:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800ff2a:	4a10      	ldr	r2, [pc, #64]	; (800ff6c <xTaskRemoveFromEventList+0x6c>)
 800ff2c:	6812      	ldr	r2, [r2, #0]
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	d901      	bls.n	800ff36 <xTaskRemoveFromEventList+0x36>
 800ff32:	4a0e      	ldr	r2, [pc, #56]	; (800ff6c <xTaskRemoveFromEventList+0x6c>)
 800ff34:	6013      	str	r3, [r2, #0]
 800ff36:	0098      	lsls	r0, r3, #2
 800ff38:	18c0      	adds	r0, r0, r3
 800ff3a:	0080      	lsls	r0, r0, #2
 800ff3c:	4b0c      	ldr	r3, [pc, #48]	; (800ff70 <xTaskRemoveFromEventList+0x70>)
 800ff3e:	18c0      	adds	r0, r0, r3
 800ff40:	0021      	movs	r1, r4
 800ff42:	f7fe ffc1 	bl	800eec8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff46:	4b0b      	ldr	r3, [pc, #44]	; (800ff74 <xTaskRemoveFromEventList+0x74>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ff4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ff4e:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d903      	bls.n	800ff5c <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800ff54:	4b08      	ldr	r3, [pc, #32]	; (800ff78 <xTaskRemoveFromEventList+0x78>)
 800ff56:	2201      	movs	r2, #1
 800ff58:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ff5a:	3001      	adds	r0, #1
}
 800ff5c:	bd70      	pop	{r4, r5, r6, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ff5e:	0021      	movs	r1, r4
 800ff60:	4806      	ldr	r0, [pc, #24]	; (800ff7c <xTaskRemoveFromEventList+0x7c>)
 800ff62:	f7fe ffb1 	bl	800eec8 <vListInsertEnd>
 800ff66:	e7ee      	b.n	800ff46 <xTaskRemoveFromEventList+0x46>
 800ff68:	20002288 	.word	0x20002288
 800ff6c:	20002294 	.word	0x20002294
 800ff70:	200021f0 	.word	0x200021f0
 800ff74:	200021e4 	.word	0x200021e4
 800ff78:	20002308 	.word	0x20002308
 800ff7c:	200022c4 	.word	0x200022c4

0800ff80 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d006      	beq.n	800ff92 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff84:	4b04      	ldr	r3, [pc, #16]	; (800ff98 <vTaskSetTimeOutState+0x18>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff8a:	4b04      	ldr	r3, [pc, #16]	; (800ff9c <vTaskSetTimeOutState+0x1c>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	6043      	str	r3, [r0, #4]
}
 800ff90:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ff92:	b672      	cpsid	i
 800ff94:	e7fe      	b.n	800ff94 <vTaskSetTimeOutState+0x14>
 800ff96:	46c0      	nop			; (mov r8, r8)
 800ff98:	200022c0 	.word	0x200022c0
 800ff9c:	20002304 	.word	0x20002304

0800ffa0 <xTaskCheckForTimeOut>:
{
 800ffa0:	b570      	push	{r4, r5, r6, lr}
 800ffa2:	0004      	movs	r4, r0
 800ffa4:	000e      	movs	r6, r1
	configASSERT( pxTimeOut );
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	d003      	beq.n	800ffb2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800ffaa:	2900      	cmp	r1, #0
 800ffac:	d103      	bne.n	800ffb6 <xTaskCheckForTimeOut+0x16>
 800ffae:	b672      	cpsid	i
 800ffb0:	e7fe      	b.n	800ffb0 <xTaskCheckForTimeOut+0x10>
	configASSERT( pxTimeOut );
 800ffb2:	b672      	cpsid	i
 800ffb4:	e7fe      	b.n	800ffb4 <xTaskCheckForTimeOut+0x14>
	taskENTER_CRITICAL();
 800ffb6:	f000 fc5f 	bl	8010878 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800ffba:	4b10      	ldr	r3, [pc, #64]	; (800fffc <xTaskCheckForTimeOut+0x5c>)
 800ffbc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800ffbe:	6833      	ldr	r3, [r6, #0]
 800ffc0:	1c59      	adds	r1, r3, #1
 800ffc2:	d019      	beq.n	800fff8 <xTaskCheckForTimeOut+0x58>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ffc4:	490e      	ldr	r1, [pc, #56]	; (8010000 <xTaskCheckForTimeOut+0x60>)
 800ffc6:	6809      	ldr	r1, [r1, #0]
 800ffc8:	6820      	ldr	r0, [r4, #0]
 800ffca:	4288      	cmp	r0, r1
 800ffcc:	d003      	beq.n	800ffd6 <xTaskCheckForTimeOut+0x36>
			xReturn = pdTRUE;
 800ffce:	2501      	movs	r5, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ffd0:	6861      	ldr	r1, [r4, #4]
 800ffd2:	4291      	cmp	r1, r2
 800ffd4:	d904      	bls.n	800ffe0 <xTaskCheckForTimeOut+0x40>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ffd6:	6861      	ldr	r1, [r4, #4]
 800ffd8:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 800ffda:	2501      	movs	r5, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 800ffdc:	4283      	cmp	r3, r0
 800ffde:	d803      	bhi.n	800ffe8 <xTaskCheckForTimeOut+0x48>
	taskEXIT_CRITICAL();
 800ffe0:	f000 fc56 	bl	8010890 <vPortExitCritical>
}
 800ffe4:	0028      	movs	r0, r5
 800ffe6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 800ffe8:	1a9b      	subs	r3, r3, r2
 800ffea:	185b      	adds	r3, r3, r1
 800ffec:	6033      	str	r3, [r6, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800ffee:	0020      	movs	r0, r4
 800fff0:	f7ff ffc6 	bl	800ff80 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800fff4:	2500      	movs	r5, #0
 800fff6:	e7f3      	b.n	800ffe0 <xTaskCheckForTimeOut+0x40>
				xReturn = pdFALSE;
 800fff8:	2500      	movs	r5, #0
 800fffa:	e7f1      	b.n	800ffe0 <xTaskCheckForTimeOut+0x40>
 800fffc:	20002304 	.word	0x20002304
 8010000:	200022c0 	.word	0x200022c0

08010004 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010004:	4b01      	ldr	r3, [pc, #4]	; (801000c <vTaskMissedYield+0x8>)
 8010006:	2201      	movs	r2, #1
 8010008:	601a      	str	r2, [r3, #0]
}
 801000a:	4770      	bx	lr
 801000c:	20002308 	.word	0x20002308

08010010 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8010010:	4b05      	ldr	r3, [pc, #20]	; (8010028 <xTaskGetSchedulerState+0x18>)
 8010012:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010014:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8010016:	2b00      	cmp	r3, #0
 8010018:	d004      	beq.n	8010024 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801001a:	4b04      	ldr	r3, [pc, #16]	; (801002c <xTaskGetSchedulerState+0x1c>)
 801001c:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 801001e:	4243      	negs	r3, r0
 8010020:	4158      	adcs	r0, r3
 8010022:	0040      	lsls	r0, r0, #1
	}
 8010024:	4770      	bx	lr
 8010026:	46c0      	nop			; (mov r8, r8)
 8010028:	200022d8 	.word	0x200022d8
 801002c:	20002288 	.word	0x20002288

08010030 <vTaskPriorityInherit>:
	{
 8010030:	b570      	push	{r4, r5, r6, lr}
 8010032:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8010034:	d01a      	beq.n	801006c <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010036:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010038:	4b19      	ldr	r3, [pc, #100]	; (80100a0 <vTaskPriorityInherit+0x70>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003e:	429a      	cmp	r2, r3
 8010040:	d214      	bcs.n	801006c <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010042:	6983      	ldr	r3, [r0, #24]
 8010044:	2b00      	cmp	r3, #0
 8010046:	db05      	blt.n	8010054 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010048:	4b15      	ldr	r3, [pc, #84]	; (80100a0 <vTaskPriorityInherit+0x70>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801004e:	2307      	movs	r3, #7
 8010050:	1a5b      	subs	r3, r3, r1
 8010052:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8010054:	0093      	lsls	r3, r2, #2
 8010056:	189b      	adds	r3, r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4a12      	ldr	r2, [pc, #72]	; (80100a4 <vTaskPriorityInherit+0x74>)
 801005c:	189b      	adds	r3, r3, r2
 801005e:	6962      	ldr	r2, [r4, #20]
 8010060:	429a      	cmp	r2, r3
 8010062:	d004      	beq.n	801006e <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010064:	4b0e      	ldr	r3, [pc, #56]	; (80100a0 <vTaskPriorityInherit+0x70>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801006a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 801006c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 801006e:	1d25      	adds	r5, r4, #4
 8010070:	0028      	movs	r0, r5
 8010072:	f7fe ff4c 	bl	800ef0e <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010076:	4b0a      	ldr	r3, [pc, #40]	; (80100a0 <vTaskPriorityInherit+0x70>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007c:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 801007e:	4a0a      	ldr	r2, [pc, #40]	; (80100a8 <vTaskPriorityInherit+0x78>)
 8010080:	6812      	ldr	r2, [r2, #0]
 8010082:	4293      	cmp	r3, r2
 8010084:	d808      	bhi.n	8010098 <vTaskPriorityInherit+0x68>
 8010086:	0098      	lsls	r0, r3, #2
 8010088:	18c0      	adds	r0, r0, r3
 801008a:	0080      	lsls	r0, r0, #2
 801008c:	4b05      	ldr	r3, [pc, #20]	; (80100a4 <vTaskPriorityInherit+0x74>)
 801008e:	18c0      	adds	r0, r0, r3
 8010090:	0029      	movs	r1, r5
 8010092:	f7fe ff19 	bl	800eec8 <vListInsertEnd>
	}
 8010096:	e7e9      	b.n	801006c <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 8010098:	4a03      	ldr	r2, [pc, #12]	; (80100a8 <vTaskPriorityInherit+0x78>)
 801009a:	6013      	str	r3, [r2, #0]
 801009c:	e7f3      	b.n	8010086 <vTaskPriorityInherit+0x56>
 801009e:	46c0      	nop			; (mov r8, r8)
 80100a0:	200021e4 	.word	0x200021e4
 80100a4:	200021f0 	.word	0x200021f0
 80100a8:	20002294 	.word	0x20002294

080100ac <xTaskPriorityDisinherit>:
	{
 80100ac:	b570      	push	{r4, r5, r6, lr}
 80100ae:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 80100b0:	d02b      	beq.n	801010a <xTaskPriorityDisinherit+0x5e>
			configASSERT( pxTCB == pxCurrentTCB );
 80100b2:	4b18      	ldr	r3, [pc, #96]	; (8010114 <xTaskPriorityDisinherit+0x68>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	4283      	cmp	r3, r0
 80100b8:	d001      	beq.n	80100be <xTaskPriorityDisinherit+0x12>
 80100ba:	b672      	cpsid	i
 80100bc:	e7fe      	b.n	80100bc <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 80100be:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d101      	bne.n	80100c8 <xTaskPriorityDisinherit+0x1c>
 80100c4:	b672      	cpsid	i
 80100c6:	e7fe      	b.n	80100c6 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 80100c8:	3b01      	subs	r3, #1
 80100ca:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80100cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80100ce:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80100d0:	428a      	cmp	r2, r1
 80100d2:	d01c      	beq.n	801010e <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 80100d4:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80100d6:	4283      	cmp	r3, r0
 80100d8:	d118      	bne.n	801010c <xTaskPriorityDisinherit+0x60>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80100da:	1d25      	adds	r5, r4, #4
 80100dc:	0028      	movs	r0, r5
 80100de:	f7fe ff16 	bl	800ef0e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80100e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80100e4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100e6:	2207      	movs	r2, #7
 80100e8:	1ad2      	subs	r2, r2, r3
 80100ea:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80100ec:	4a0a      	ldr	r2, [pc, #40]	; (8010118 <xTaskPriorityDisinherit+0x6c>)
 80100ee:	6812      	ldr	r2, [r2, #0]
 80100f0:	4293      	cmp	r3, r2
 80100f2:	d901      	bls.n	80100f8 <xTaskPriorityDisinherit+0x4c>
 80100f4:	4a08      	ldr	r2, [pc, #32]	; (8010118 <xTaskPriorityDisinherit+0x6c>)
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	2014      	movs	r0, #20
 80100fa:	4358      	muls	r0, r3
 80100fc:	4b07      	ldr	r3, [pc, #28]	; (801011c <xTaskPriorityDisinherit+0x70>)
 80100fe:	18c0      	adds	r0, r0, r3
 8010100:	0029      	movs	r1, r5
 8010102:	f7fe fee1 	bl	800eec8 <vListInsertEnd>
					xReturn = pdTRUE;
 8010106:	2001      	movs	r0, #1
 8010108:	e000      	b.n	801010c <xTaskPriorityDisinherit+0x60>
	BaseType_t xReturn = pdFALSE;
 801010a:	2000      	movs	r0, #0
	}
 801010c:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 801010e:	2000      	movs	r0, #0
 8010110:	e7fc      	b.n	801010c <xTaskPriorityDisinherit+0x60>
 8010112:	46c0      	nop			; (mov r8, r8)
 8010114:	200021e4 	.word	0x200021e4
 8010118:	20002294 	.word	0x20002294
 801011c:	200021f0 	.word	0x200021f0

08010120 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8010120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010122:	b085      	sub	sp, #20
 8010124:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8010126:	2300      	movs	r3, #0
 8010128:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801012a:	4b2b      	ldr	r3, [pc, #172]	; (80101d8 <vTaskList+0xb8>)
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010130:	6818      	ldr	r0, [r3, #0]
 8010132:	0140      	lsls	r0, r0, #5
 8010134:	f000 fc22 	bl	801097c <pvPortMalloc>
 8010138:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 801013a:	d04a      	beq.n	80101d2 <vTaskList+0xb2>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 801013c:	9903      	ldr	r1, [sp, #12]
 801013e:	2200      	movs	r2, #0
 8010140:	f7ff fdca 	bl	800fcd8 <uxTaskGetSystemState>
 8010144:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8010146:	2300      	movs	r3, #0
 8010148:	9302      	str	r3, [sp, #8]
 801014a:	9a02      	ldr	r2, [sp, #8]
 801014c:	9b03      	ldr	r3, [sp, #12]
 801014e:	429a      	cmp	r2, r3
 8010150:	d23c      	bcs.n	80101cc <vTaskList+0xac>
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 8010152:	4e22      	ldr	r6, [pc, #136]	; (80101dc <vTaskList+0xbc>)
 8010154:	e027      	b.n	80101a6 <vTaskList+0x86>
					case eReady:		cStatus = tskREADY_CHAR;
 8010156:	2552      	movs	r5, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010158:	2b01      	cmp	r3, #1
 801015a:	d133      	bne.n	80101c4 <vTaskList+0xa4>
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801015c:	9b02      	ldr	r3, [sp, #8]
 801015e:	015b      	lsls	r3, r3, #5
 8010160:	18fb      	adds	r3, r7, r3
 8010162:	6859      	ldr	r1, [r3, #4]
 8010164:	0020      	movs	r0, r4
 8010166:	f7ff fab1 	bl	800f6cc <prvWriteNameToBuffer>
 801016a:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 801016c:	9b02      	ldr	r3, [sp, #8]
 801016e:	9a02      	ldr	r2, [sp, #8]
 8010170:	9902      	ldr	r1, [sp, #8]
 8010172:	015b      	lsls	r3, r3, #5
 8010174:	18fb      	adds	r3, r7, r3
 8010176:	691b      	ldr	r3, [r3, #16]
 8010178:	0149      	lsls	r1, r1, #5
 801017a:	1879      	adds	r1, r7, r1
 801017c:	6889      	ldr	r1, [r1, #8]
 801017e:	9101      	str	r1, [sp, #4]
 8010180:	0152      	lsls	r2, r2, #5
 8010182:	18ba      	adds	r2, r7, r2
 8010184:	8b92      	ldrh	r2, [r2, #28]
 8010186:	9200      	str	r2, [sp, #0]
 8010188:	002a      	movs	r2, r5
 801018a:	0031      	movs	r1, r6
 801018c:	f004 fe40 	bl	8014e10 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8010190:	0020      	movs	r0, r4
 8010192:	f7ef ffc1 	bl	8000118 <strlen>
 8010196:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 8010198:	9b02      	ldr	r3, [sp, #8]
 801019a:	3301      	adds	r3, #1
 801019c:	9302      	str	r3, [sp, #8]
 801019e:	9a02      	ldr	r2, [sp, #8]
 80101a0:	9b03      	ldr	r3, [sp, #12]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d212      	bcs.n	80101cc <vTaskList+0xac>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101a6:	9b02      	ldr	r3, [sp, #8]
 80101a8:	015b      	lsls	r3, r3, #5
 80101aa:	18fb      	adds	r3, r7, r3
 80101ac:	7b1b      	ldrb	r3, [r3, #12]
 80101ae:	2b02      	cmp	r3, #2
 80101b0:	d00a      	beq.n	80101c8 <vTaskList+0xa8>
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	2a02      	cmp	r2, #2
 80101b6:	d9ce      	bls.n	8010156 <vTaskList+0x36>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80101b8:	2553      	movs	r5, #83	; 0x53
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101ba:	2b03      	cmp	r3, #3
 80101bc:	d0ce      	beq.n	801015c <vTaskList+0x3c>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 80101be:	3d0f      	subs	r5, #15
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101c0:	2b04      	cmp	r3, #4
 80101c2:	d0cb      	beq.n	801015c <vTaskList+0x3c>
										cStatus = 0x00;
 80101c4:	2500      	movs	r5, #0
										break;
 80101c6:	e7c9      	b.n	801015c <vTaskList+0x3c>
					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80101c8:	2542      	movs	r5, #66	; 0x42
 80101ca:	e7c7      	b.n	801015c <vTaskList+0x3c>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 80101cc:	0038      	movs	r0, r7
 80101ce:	f000 fc6b 	bl	8010aa8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80101d2:	b005      	add	sp, #20
 80101d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101d6:	46c0      	nop			; (mov r8, r8)
 80101d8:	20002280 	.word	0x20002280
 80101dc:	0801c2d8 	.word	0x0801c2d8

080101e0 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80101e0:	b570      	push	{r4, r5, r6, lr}
 80101e2:	b084      	sub	sp, #16
 80101e4:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 80101e6:	2300      	movs	r3, #0
 80101e8:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80101ea:	4b26      	ldr	r3, [pc, #152]	; (8010284 <vTaskGetRunTimeStats+0xa4>)
 80101ec:	681a      	ldr	r2, [r3, #0]
 80101ee:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 80101f0:	6818      	ldr	r0, [r3, #0]
 80101f2:	0140      	lsls	r0, r0, #5
 80101f4:	f000 fbc2 	bl	801097c <pvPortMalloc>
 80101f8:	1e06      	subs	r6, r0, #0

		if( pxTaskStatusArray != NULL )
 80101fa:	d014      	beq.n	8010226 <vTaskGetRunTimeStats+0x46>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80101fc:	9903      	ldr	r1, [sp, #12]
 80101fe:	aa01      	add	r2, sp, #4
 8010200:	f7ff fd6a 	bl	800fcd8 <uxTaskGetSystemState>
 8010204:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8010206:	2164      	movs	r1, #100	; 0x64
 8010208:	9801      	ldr	r0, [sp, #4]
 801020a:	f7ef ffa1 	bl	8000150 <__udivsi3>
 801020e:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 8010210:	2800      	cmp	r0, #0
 8010212:	d005      	beq.n	8010220 <vTaskGetRunTimeStats+0x40>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8010214:	2300      	movs	r3, #0
 8010216:	9302      	str	r3, [sp, #8]
 8010218:	9a02      	ldr	r2, [sp, #8]
 801021a:	9b03      	ldr	r3, [sp, #12]
 801021c:	429a      	cmp	r2, r3
 801021e:	d316      	bcc.n	801024e <vTaskGetRunTimeStats+0x6e>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010220:	0030      	movs	r0, r6
 8010222:	f000 fc41 	bl	8010aa8 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010226:	b004      	add	sp, #16
 8010228:	bd70      	pop	{r4, r5, r6, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 801022a:	9b02      	ldr	r3, [sp, #8]
 801022c:	015b      	lsls	r3, r3, #5
 801022e:	18f3      	adds	r3, r6, r3
 8010230:	699a      	ldr	r2, [r3, #24]
 8010232:	4915      	ldr	r1, [pc, #84]	; (8010288 <vTaskGetRunTimeStats+0xa8>)
 8010234:	f004 fdec 	bl	8014e10 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 8010238:	0020      	movs	r0, r4
 801023a:	f7ef ff6d 	bl	8000118 <strlen>
 801023e:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 8010240:	9b02      	ldr	r3, [sp, #8]
 8010242:	3301      	adds	r3, #1
 8010244:	9302      	str	r3, [sp, #8]
 8010246:	9a02      	ldr	r2, [sp, #8]
 8010248:	9b03      	ldr	r3, [sp, #12]
 801024a:	429a      	cmp	r2, r3
 801024c:	d2e8      	bcs.n	8010220 <vTaskGetRunTimeStats+0x40>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 801024e:	9b02      	ldr	r3, [sp, #8]
 8010250:	015b      	lsls	r3, r3, #5
 8010252:	18f3      	adds	r3, r6, r3
 8010254:	9901      	ldr	r1, [sp, #4]
 8010256:	6998      	ldr	r0, [r3, #24]
 8010258:	f7ef ff7a 	bl	8000150 <__udivsi3>
 801025c:	0005      	movs	r5, r0
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801025e:	9b02      	ldr	r3, [sp, #8]
 8010260:	015b      	lsls	r3, r3, #5
 8010262:	18f3      	adds	r3, r6, r3
 8010264:	6859      	ldr	r1, [r3, #4]
 8010266:	0020      	movs	r0, r4
 8010268:	f7ff fa30 	bl	800f6cc <prvWriteNameToBuffer>
 801026c:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 801026e:	2d00      	cmp	r5, #0
 8010270:	d0db      	beq.n	801022a <vTaskGetRunTimeStats+0x4a>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 8010272:	9b02      	ldr	r3, [sp, #8]
 8010274:	015b      	lsls	r3, r3, #5
 8010276:	18f3      	adds	r3, r6, r3
 8010278:	699a      	ldr	r2, [r3, #24]
 801027a:	002b      	movs	r3, r5
 801027c:	4903      	ldr	r1, [pc, #12]	; (801028c <vTaskGetRunTimeStats+0xac>)
 801027e:	f004 fdc7 	bl	8014e10 <sprintf>
 8010282:	e7d9      	b.n	8010238 <vTaskGetRunTimeStats+0x58>
 8010284:	20002280 	.word	0x20002280
 8010288:	0801c2cc 	.word	0x0801c2cc
 801028c:	0801c2c0 	.word	0x0801c2c0

08010290 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010290:	4b05      	ldr	r3, [pc, #20]	; (80102a8 <pvTaskIncrementMutexHeldCount+0x18>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d004      	beq.n	80102a2 <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010298:	4b03      	ldr	r3, [pc, #12]	; (80102a8 <pvTaskIncrementMutexHeldCount+0x18>)
 801029a:	681a      	ldr	r2, [r3, #0]
 801029c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801029e:	3301      	adds	r3, #1
 80102a0:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 80102a2:	4b01      	ldr	r3, [pc, #4]	; (80102a8 <pvTaskIncrementMutexHeldCount+0x18>)
 80102a4:	6818      	ldr	r0, [r3, #0]
	}
 80102a6:	4770      	bx	lr
 80102a8:	200021e4 	.word	0x200021e4

080102ac <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80102ac:	b570      	push	{r4, r5, r6, lr}
 80102ae:	0005      	movs	r5, r0
 80102b0:	000c      	movs	r4, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80102b2:	f000 fae1 	bl	8010878 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80102b6:	4b20      	ldr	r3, [pc, #128]	; (8010338 <ulTaskNotifyTake+0x8c>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d106      	bne.n	80102ce <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 80102c0:	4b1d      	ldr	r3, [pc, #116]	; (8010338 <ulTaskNotifyTake+0x8c>)
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	235c      	movs	r3, #92	; 0x5c
 80102c6:	2101      	movs	r1, #1
 80102c8:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 80102ca:	2c00      	cmp	r4, #0
 80102cc:	d118      	bne.n	8010300 <ulTaskNotifyTake+0x54>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80102ce:	f000 fadf 	bl	8010890 <vPortExitCritical>

		taskENTER_CRITICAL();
 80102d2:	f000 fad1 	bl	8010878 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80102d6:	4b18      	ldr	r3, [pc, #96]	; (8010338 <ulTaskNotifyTake+0x8c>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	6d9c      	ldr	r4, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 80102dc:	2c00      	cmp	r4, #0
 80102de:	d006      	beq.n	80102ee <ulTaskNotifyTake+0x42>
			{
				if( xClearCountOnExit != pdFALSE )
 80102e0:	2d00      	cmp	r5, #0
 80102e2:	d123      	bne.n	801032c <ulTaskNotifyTake+0x80>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
				}
				else
				{
					( pxCurrentTCB->ulNotifiedValue )--;
 80102e4:	4b14      	ldr	r3, [pc, #80]	; (8010338 <ulTaskNotifyTake+0x8c>)
 80102e6:	681a      	ldr	r2, [r3, #0]
 80102e8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80102ea:	3b01      	subs	r3, #1
 80102ec:	6593      	str	r3, [r2, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 80102ee:	4b12      	ldr	r3, [pc, #72]	; (8010338 <ulTaskNotifyTake+0x8c>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	235c      	movs	r3, #92	; 0x5c
 80102f4:	2100      	movs	r1, #0
 80102f6:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 80102f8:	f000 faca 	bl	8010890 <vPortExitCritical>

		return ulReturn;
	}
 80102fc:	0020      	movs	r0, r4
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010300:	4b0d      	ldr	r3, [pc, #52]	; (8010338 <ulTaskNotifyTake+0x8c>)
 8010302:	6818      	ldr	r0, [r3, #0]
 8010304:	3004      	adds	r0, #4
 8010306:	f7fe fe02 	bl	800ef0e <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 801030a:	1c63      	adds	r3, r4, #1
 801030c:	d007      	beq.n	801031e <ulTaskNotifyTake+0x72>
							xTimeToWake = xTickCount + xTicksToWait;
 801030e:	4b0b      	ldr	r3, [pc, #44]	; (801033c <ulTaskNotifyTake+0x90>)
 8010310:	6818      	ldr	r0, [r3, #0]
 8010312:	1900      	adds	r0, r0, r4
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 8010314:	f7ff f9b0 	bl	800f678 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8010318:	f000 faa2 	bl	8010860 <vPortYield>
 801031c:	e7d7      	b.n	80102ce <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 801031e:	4b06      	ldr	r3, [pc, #24]	; (8010338 <ulTaskNotifyTake+0x8c>)
 8010320:	6819      	ldr	r1, [r3, #0]
 8010322:	3104      	adds	r1, #4
 8010324:	4806      	ldr	r0, [pc, #24]	; (8010340 <ulTaskNotifyTake+0x94>)
 8010326:	f7fe fdcf 	bl	800eec8 <vListInsertEnd>
 801032a:	e7f5      	b.n	8010318 <ulTaskNotifyTake+0x6c>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 801032c:	4b02      	ldr	r3, [pc, #8]	; (8010338 <ulTaskNotifyTake+0x8c>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	2200      	movs	r2, #0
 8010332:	659a      	str	r2, [r3, #88]	; 0x58
 8010334:	e7db      	b.n	80102ee <ulTaskNotifyTake+0x42>
 8010336:	46c0      	nop			; (mov r8, r8)
 8010338:	200021e4 	.word	0x200021e4
 801033c:	20002304 	.word	0x20002304
 8010340:	200022dc 	.word	0x200022dc

08010344 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8010344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010346:	0004      	movs	r4, r0
 8010348:	000e      	movs	r6, r1
 801034a:	0015      	movs	r5, r2
 801034c:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 801034e:	2800      	cmp	r0, #0
 8010350:	d101      	bne.n	8010356 <xTaskGenericNotify+0x12>
 8010352:	b672      	cpsid	i
 8010354:	e7fe      	b.n	8010354 <xTaskGenericNotify+0x10>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 8010356:	f000 fa8f 	bl	8010878 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801035a:	2f00      	cmp	r7, #0
 801035c:	d001      	beq.n	8010362 <xTaskGenericNotify+0x1e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801035e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010360:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 8010362:	225c      	movs	r2, #92	; 0x5c
 8010364:	5ca3      	ldrb	r3, [r4, r2]
 8010366:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 8010368:	2102      	movs	r1, #2
 801036a:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 801036c:	2d02      	cmp	r5, #2
 801036e:	d015      	beq.n	801039c <xTaskGenericNotify+0x58>
 8010370:	d907      	bls.n	8010382 <xTaskGenericNotify+0x3e>
 8010372:	2d03      	cmp	r5, #3
 8010374:	d016      	beq.n	80103a4 <xTaskGenericNotify+0x60>
 8010376:	2d04      	cmp	r5, #4
 8010378:	d105      	bne.n	8010386 <xTaskGenericNotify+0x42>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 801037a:	2b02      	cmp	r3, #2
 801037c:	d035      	beq.n	80103ea <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801037e:	65a6      	str	r6, [r4, #88]	; 0x58
 8010380:	e001      	b.n	8010386 <xTaskGenericNotify+0x42>
			switch( eAction )
 8010382:	2d01      	cmp	r5, #1
 8010384:	d006      	beq.n	8010394 <xTaskGenericNotify+0x50>
 8010386:	2501      	movs	r5, #1
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010388:	2b01      	cmp	r3, #1
 801038a:	d00d      	beq.n	80103a8 <xTaskGenericNotify+0x64>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801038c:	f000 fa80 	bl	8010890 <vPortExitCritical>

		return xReturn;
	}
 8010390:	0028      	movs	r0, r5
 8010392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue |= ulValue;
 8010394:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010396:	4316      	orrs	r6, r2
 8010398:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 801039a:	e7f4      	b.n	8010386 <xTaskGenericNotify+0x42>
					( pxTCB->ulNotifiedValue )++;
 801039c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801039e:	3201      	adds	r2, #1
 80103a0:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 80103a2:	e7f0      	b.n	8010386 <xTaskGenericNotify+0x42>
					pxTCB->ulNotifiedValue = ulValue;
 80103a4:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 80103a6:	e7ee      	b.n	8010386 <xTaskGenericNotify+0x42>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80103a8:	1d25      	adds	r5, r4, #4
 80103aa:	0028      	movs	r0, r5
 80103ac:	f7fe fdaf 	bl	800ef0e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80103b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80103b2:	4a0f      	ldr	r2, [pc, #60]	; (80103f0 <xTaskGenericNotify+0xac>)
 80103b4:	6812      	ldr	r2, [r2, #0]
 80103b6:	4293      	cmp	r3, r2
 80103b8:	d901      	bls.n	80103be <xTaskGenericNotify+0x7a>
 80103ba:	4a0d      	ldr	r2, [pc, #52]	; (80103f0 <xTaskGenericNotify+0xac>)
 80103bc:	6013      	str	r3, [r2, #0]
 80103be:	2014      	movs	r0, #20
 80103c0:	4358      	muls	r0, r3
 80103c2:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <xTaskGenericNotify+0xb0>)
 80103c4:	18c0      	adds	r0, r0, r3
 80103c6:	0029      	movs	r1, r5
 80103c8:	f7fe fd7e 	bl	800eec8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80103cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <xTaskGenericNotify+0x92>
 80103d2:	b672      	cpsid	i
 80103d4:	e7fe      	b.n	80103d4 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80103d6:	4b08      	ldr	r3, [pc, #32]	; (80103f8 <xTaskGenericNotify+0xb4>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80103dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103de:	2501      	movs	r5, #1
 80103e0:	429a      	cmp	r2, r3
 80103e2:	d9d3      	bls.n	801038c <xTaskGenericNotify+0x48>
					taskYIELD_IF_USING_PREEMPTION();
 80103e4:	f000 fa3c 	bl	8010860 <vPortYield>
 80103e8:	e7d0      	b.n	801038c <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 80103ea:	2500      	movs	r5, #0
 80103ec:	e7ce      	b.n	801038c <xTaskGenericNotify+0x48>
 80103ee:	46c0      	nop			; (mov r8, r8)
 80103f0:	20002294 	.word	0x20002294
 80103f4:	200021f0 	.word	0x200021f0
 80103f8:	200021e4 	.word	0x200021e4

080103fc <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80103fc:	b510      	push	{r4, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80103fe:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010400:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010402:	4291      	cmp	r1, r2
 8010404:	d80b      	bhi.n	801041e <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010406:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010408:	2401      	movs	r4, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 801040a:	6983      	ldr	r3, [r0, #24]
 801040c:	429a      	cmp	r2, r3
 801040e:	d211      	bcs.n	8010434 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010410:	1d01      	adds	r1, r0, #4
 8010412:	4b09      	ldr	r3, [pc, #36]	; (8010438 <prvInsertTimerInActiveList+0x3c>)
 8010414:	6818      	ldr	r0, [r3, #0]
 8010416:	f7fe fd63 	bl	800eee0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 801041a:	2400      	movs	r4, #0
 801041c:	e00a      	b.n	8010434 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801041e:	429a      	cmp	r2, r3
 8010420:	d202      	bcs.n	8010428 <prvInsertTimerInActiveList+0x2c>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010422:	2401      	movs	r4, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010424:	4299      	cmp	r1, r3
 8010426:	d205      	bcs.n	8010434 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010428:	1d01      	adds	r1, r0, #4
 801042a:	4b04      	ldr	r3, [pc, #16]	; (801043c <prvInsertTimerInActiveList+0x40>)
 801042c:	6818      	ldr	r0, [r3, #0]
 801042e:	f7fe fd57 	bl	800eee0 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8010432:	2400      	movs	r4, #0
		}
	}

	return xProcessTimerNow;
}
 8010434:	0020      	movs	r0, r4
 8010436:	bd10      	pop	{r4, pc}
 8010438:	20002310 	.word	0x20002310
 801043c:	2000230c 	.word	0x2000230c

08010440 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010440:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010442:	f000 fa19 	bl	8010878 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010446:	4b11      	ldr	r3, [pc, #68]	; (801048c <prvCheckForValidListAndQueue+0x4c>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d002      	beq.n	8010454 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801044e:	f000 fa1f 	bl	8010890 <vPortExitCritical>
}
 8010452:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 8010454:	4d0e      	ldr	r5, [pc, #56]	; (8010490 <prvCheckForValidListAndQueue+0x50>)
 8010456:	0028      	movs	r0, r5
 8010458:	f7fe fd28 	bl	800eeac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801045c:	4c0d      	ldr	r4, [pc, #52]	; (8010494 <prvCheckForValidListAndQueue+0x54>)
 801045e:	0020      	movs	r0, r4
 8010460:	f7fe fd24 	bl	800eeac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010464:	4b0c      	ldr	r3, [pc, #48]	; (8010498 <prvCheckForValidListAndQueue+0x58>)
 8010466:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010468:	4b0c      	ldr	r3, [pc, #48]	; (801049c <prvCheckForValidListAndQueue+0x5c>)
 801046a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 801046c:	2200      	movs	r2, #0
 801046e:	2110      	movs	r1, #16
 8010470:	2004      	movs	r0, #4
 8010472:	f7fe fe26 	bl	800f0c2 <xQueueGenericCreate>
 8010476:	4b05      	ldr	r3, [pc, #20]	; (801048c <prvCheckForValidListAndQueue+0x4c>)
 8010478:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 801047a:	2800      	cmp	r0, #0
 801047c:	d101      	bne.n	8010482 <prvCheckForValidListAndQueue+0x42>
 801047e:	b672      	cpsid	i
 8010480:	e7fe      	b.n	8010480 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010482:	4907      	ldr	r1, [pc, #28]	; (80104a0 <prvCheckForValidListAndQueue+0x60>)
 8010484:	f7ff f856 	bl	800f534 <vQueueAddToRegistry>
 8010488:	e7e1      	b.n	801044e <prvCheckForValidListAndQueue+0xe>
 801048a:	46c0      	nop			; (mov r8, r8)
 801048c:	20002340 	.word	0x20002340
 8010490:	20002314 	.word	0x20002314
 8010494:	20002328 	.word	0x20002328
 8010498:	2000230c 	.word	0x2000230c
 801049c:	20002310 	.word	0x20002310
 80104a0:	0801c318 	.word	0x0801c318

080104a4 <xTimerCreateTimerTask>:
{
 80104a4:	b500      	push	{lr}
 80104a6:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 80104a8:	f7ff ffca 	bl	8010440 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 80104ac:	4b0a      	ldr	r3, [pc, #40]	; (80104d8 <xTimerCreateTimerTask+0x34>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d00d      	beq.n	80104d0 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 80104b4:	2300      	movs	r3, #0
 80104b6:	9303      	str	r3, [sp, #12]
 80104b8:	9302      	str	r3, [sp, #8]
 80104ba:	9301      	str	r3, [sp, #4]
 80104bc:	3303      	adds	r3, #3
 80104be:	9300      	str	r3, [sp, #0]
 80104c0:	2300      	movs	r3, #0
 80104c2:	22a0      	movs	r2, #160	; 0xa0
 80104c4:	4905      	ldr	r1, [pc, #20]	; (80104dc <xTimerCreateTimerTask+0x38>)
 80104c6:	4806      	ldr	r0, [pc, #24]	; (80104e0 <xTimerCreateTimerTask+0x3c>)
 80104c8:	f7ff f918 	bl	800f6fc <xTaskGenericCreate>
	configASSERT( xReturn );
 80104cc:	2800      	cmp	r0, #0
 80104ce:	d101      	bne.n	80104d4 <xTimerCreateTimerTask+0x30>
 80104d0:	b672      	cpsid	i
 80104d2:	e7fe      	b.n	80104d2 <xTimerCreateTimerTask+0x2e>
}
 80104d4:	b005      	add	sp, #20
 80104d6:	bd00      	pop	{pc}
 80104d8:	20002340 	.word	0x20002340
 80104dc:	0801c320 	.word	0x0801c320
 80104e0:	0801062d 	.word	0x0801062d

080104e4 <xTimerCreate>:
{
 80104e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80104e6:	46c6      	mov	lr, r8
 80104e8:	b500      	push	{lr}
 80104ea:	4680      	mov	r8, r0
 80104ec:	000d      	movs	r5, r1
 80104ee:	0017      	movs	r7, r2
 80104f0:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 80104f2:	2900      	cmp	r1, #0
 80104f4:	d014      	beq.n	8010520 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80104f6:	202c      	movs	r0, #44	; 0x2c
 80104f8:	f000 fa40 	bl	801097c <pvPortMalloc>
 80104fc:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 80104fe:	d00b      	beq.n	8010518 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8010500:	f7ff ff9e 	bl	8010440 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8010504:	4643      	mov	r3, r8
 8010506:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010508:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 801050a:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 801050c:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801050e:	9b06      	ldr	r3, [sp, #24]
 8010510:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8010512:	1d20      	adds	r0, r4, #4
 8010514:	f7fe fcd5 	bl	800eec2 <vListInitialiseItem>
}
 8010518:	0020      	movs	r0, r4
 801051a:	bc04      	pop	{r2}
 801051c:	4690      	mov	r8, r2
 801051e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8010520:	b672      	cpsid	i
 8010522:	e7fe      	b.n	8010522 <xTimerCreate+0x3e>

08010524 <xTimerGenericCommand>:
{
 8010524:	b530      	push	{r4, r5, lr}
 8010526:	b085      	sub	sp, #20
 8010528:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 801052a:	4b13      	ldr	r3, [pc, #76]	; (8010578 <xTimerGenericCommand+0x54>)
 801052c:	681c      	ldr	r4, [r3, #0]
 801052e:	2c00      	cmp	r4, #0
 8010530:	d020      	beq.n	8010574 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 8010532:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010534:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8010536:	9002      	str	r0, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010538:	2905      	cmp	r1, #5
 801053a:	dc13      	bgt.n	8010564 <xTimerGenericCommand+0x40>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801053c:	f7ff fd68 	bl	8010010 <xTaskGetSchedulerState>
 8010540:	2802      	cmp	r0, #2
 8010542:	d007      	beq.n	8010554 <xTimerGenericCommand+0x30>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010544:	4b0c      	ldr	r3, [pc, #48]	; (8010578 <xTimerGenericCommand+0x54>)
 8010546:	6818      	ldr	r0, [r3, #0]
 8010548:	2300      	movs	r3, #0
 801054a:	2200      	movs	r2, #0
 801054c:	4669      	mov	r1, sp
 801054e:	f7fe fdf3 	bl	800f138 <xQueueGenericSend>
 8010552:	e00d      	b.n	8010570 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010554:	4b08      	ldr	r3, [pc, #32]	; (8010578 <xTimerGenericCommand+0x54>)
 8010556:	6818      	ldr	r0, [r3, #0]
 8010558:	2300      	movs	r3, #0
 801055a:	9a08      	ldr	r2, [sp, #32]
 801055c:	4669      	mov	r1, sp
 801055e:	f7fe fdeb 	bl	800f138 <xQueueGenericSend>
 8010562:	e005      	b.n	8010570 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010564:	2300      	movs	r3, #0
 8010566:	002a      	movs	r2, r5
 8010568:	4669      	mov	r1, sp
 801056a:	0020      	movs	r0, r4
 801056c:	f7fe fe7b 	bl	800f266 <xQueueGenericSendFromISR>
}
 8010570:	b005      	add	sp, #20
 8010572:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8010574:	2000      	movs	r0, #0
	return xReturn;
 8010576:	e7fb      	b.n	8010570 <xTimerGenericCommand+0x4c>
 8010578:	20002340 	.word	0x20002340

0801057c <prvSampleTimeNow>:
{
 801057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801057e:	46d6      	mov	lr, sl
 8010580:	464f      	mov	r7, r9
 8010582:	4646      	mov	r6, r8
 8010584:	b5c0      	push	{r6, r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
 801058a:	f7ff fa43 	bl	800fa14 <xTaskGetTickCount>
 801058e:	0007      	movs	r7, r0
	if( xTimeNow < xLastTime )
 8010590:	4b23      	ldr	r3, [pc, #140]	; (8010620 <prvSampleTimeNow+0xa4>)
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	4283      	cmp	r3, r0
 8010596:	d80b      	bhi.n	80105b0 <prvSampleTimeNow+0x34>
		*pxTimerListsWereSwitched = pdFALSE;
 8010598:	2300      	movs	r3, #0
 801059a:	4642      	mov	r2, r8
 801059c:	6013      	str	r3, [r2, #0]
	xLastTime = xTimeNow;
 801059e:	4b20      	ldr	r3, [pc, #128]	; (8010620 <prvSampleTimeNow+0xa4>)
 80105a0:	601f      	str	r7, [r3, #0]
}
 80105a2:	0038      	movs	r0, r7
 80105a4:	b004      	add	sp, #16
 80105a6:	bc1c      	pop	{r2, r3, r4}
 80105a8:	4690      	mov	r8, r2
 80105aa:	4699      	mov	r9, r3
 80105ac:	46a2      	mov	sl, r4
 80105ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105b0:	4e1c      	ldr	r6, [pc, #112]	; (8010624 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105b2:	2300      	movs	r3, #0
 80105b4:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80105b6:	6833      	ldr	r3, [r6, #0]
 80105b8:	681a      	ldr	r2, [r3, #0]
 80105ba:	2a00      	cmp	r2, #0
 80105bc:	d026      	beq.n	801060c <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	681a      	ldr	r2, [r3, #0]
 80105c2:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80105c4:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80105c6:	1d25      	adds	r5, r4, #4
 80105c8:	0028      	movs	r0, r5
 80105ca:	f7fe fca0 	bl	800ef0e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105ce:	0020      	movs	r0, r4
 80105d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80105d2:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80105d4:	69e3      	ldr	r3, [r4, #28]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d1ed      	bne.n	80105b6 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80105da:	69a3      	ldr	r3, [r4, #24]
 80105dc:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 80105de:	459a      	cmp	sl, r3
 80105e0:	d209      	bcs.n	80105f6 <prvSampleTimeNow+0x7a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80105e2:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80105e4:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80105e6:	4b0f      	ldr	r3, [pc, #60]	; (8010624 <prvSampleTimeNow+0xa8>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	9303      	str	r3, [sp, #12]
 80105ec:	0029      	movs	r1, r5
 80105ee:	0018      	movs	r0, r3
 80105f0:	f7fe fc76 	bl	800eee0 <vListInsert>
 80105f4:	e7df      	b.n	80105b6 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80105f6:	464b      	mov	r3, r9
 80105f8:	9300      	str	r3, [sp, #0]
 80105fa:	4652      	mov	r2, sl
 80105fc:	4649      	mov	r1, r9
 80105fe:	0020      	movs	r0, r4
 8010600:	f7ff ff90 	bl	8010524 <xTimerGenericCommand>
				configASSERT( xResult );
 8010604:	2800      	cmp	r0, #0
 8010606:	d1d6      	bne.n	80105b6 <prvSampleTimeNow+0x3a>
 8010608:	b672      	cpsid	i
 801060a:	e7fe      	b.n	801060a <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 801060c:	4a06      	ldr	r2, [pc, #24]	; (8010628 <prvSampleTimeNow+0xac>)
 801060e:	4905      	ldr	r1, [pc, #20]	; (8010624 <prvSampleTimeNow+0xa8>)
 8010610:	6810      	ldr	r0, [r2, #0]
 8010612:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8010614:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8010616:	2301      	movs	r3, #1
 8010618:	4642      	mov	r2, r8
 801061a:	6013      	str	r3, [r2, #0]
 801061c:	e7bf      	b.n	801059e <prvSampleTimeNow+0x22>
 801061e:	46c0      	nop			; (mov r8, r8)
 8010620:	2000233c 	.word	0x2000233c
 8010624:	2000230c 	.word	0x2000230c
 8010628:	20002310 	.word	0x20002310

0801062c <prvTimerTask>:
{
 801062c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801062e:	b08d      	sub	sp, #52	; 0x34
			switch( xMessage.xMessageID )
 8010630:	4e57      	ldr	r6, [pc, #348]	; (8010790 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010632:	4b58      	ldr	r3, [pc, #352]	; (8010794 <prvTimerTask+0x168>)
 8010634:	681b      	ldr	r3, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	2a00      	cmp	r2, #0
 801063a:	d100      	bne.n	801063e <prvTimerTask+0x12>
 801063c:	e09c      	b.n	8010778 <prvTimerTask+0x14c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801063e:	68db      	ldr	r3, [r3, #12]
 8010640:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8010642:	f7ff f9df 	bl	800fa04 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010646:	a808      	add	r0, sp, #32
 8010648:	f7ff ff98 	bl	801057c <prvSampleTimeNow>
 801064c:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 801064e:	9b08      	ldr	r3, [sp, #32]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d000      	beq.n	8010656 <prvTimerTask+0x2a>
 8010654:	e099      	b.n	801078a <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010656:	42a0      	cmp	r0, r4
 8010658:	d233      	bcs.n	80106c2 <prvTimerTask+0x96>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 801065a:	1b61      	subs	r1, r4, r5
 801065c:	4b4e      	ldr	r3, [pc, #312]	; (8010798 <prvTimerTask+0x16c>)
 801065e:	6818      	ldr	r0, [r3, #0]
 8010660:	f7fe ff80 	bl	800f564 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010664:	f7ff fa6e 	bl	800fb44 <xTaskResumeAll>
 8010668:	2800      	cmp	r0, #0
 801066a:	d050      	beq.n	801070e <prvTimerTask+0xe2>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801066c:	4c4a      	ldr	r4, [pc, #296]	; (8010798 <prvTimerTask+0x16c>)
 801066e:	2300      	movs	r3, #0
 8010670:	2200      	movs	r2, #0
 8010672:	a908      	add	r1, sp, #32
 8010674:	6820      	ldr	r0, [r4, #0]
 8010676:	f7fe fe78 	bl	800f36a <xQueueGenericReceive>
 801067a:	2800      	cmp	r0, #0
 801067c:	d0d9      	beq.n	8010632 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801067e:	9b08      	ldr	r3, [sp, #32]
 8010680:	9303      	str	r3, [sp, #12]
 8010682:	2b00      	cmp	r3, #0
 8010684:	da0c      	bge.n	80106a0 <prvTimerTask+0x74>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010688:	9303      	str	r3, [sp, #12]
 801068a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801068c:	9304      	str	r3, [sp, #16]
 801068e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010690:	9305      	str	r3, [sp, #20]
 8010692:	9903      	ldr	r1, [sp, #12]
 8010694:	9804      	ldr	r0, [sp, #16]
 8010696:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010698:	9b08      	ldr	r3, [sp, #32]
 801069a:	9303      	str	r3, [sp, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	dbe6      	blt.n	801066e <prvTimerTask+0x42>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80106a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80106a2:	696b      	ldr	r3, [r5, #20]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d002      	beq.n	80106ae <prvTimerTask+0x82>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106a8:	1d28      	adds	r0, r5, #4
 80106aa:	f7fe fc30 	bl	800ef0e <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106ae:	a807      	add	r0, sp, #28
 80106b0:	f7ff ff64 	bl	801057c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80106b4:	9b08      	ldr	r3, [sp, #32]
 80106b6:	9303      	str	r3, [sp, #12]
 80106b8:	2b09      	cmp	r3, #9
 80106ba:	d8d8      	bhi.n	801066e <prvTimerTask+0x42>
 80106bc:	009b      	lsls	r3, r3, #2
 80106be:	58f3      	ldr	r3, [r6, r3]
 80106c0:	469f      	mov	pc, r3
				( void ) xTaskResumeAll();
 80106c2:	f7ff fa3f 	bl	800fb44 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106c6:	4b33      	ldr	r3, [pc, #204]	; (8010794 <prvTimerTask+0x168>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	68db      	ldr	r3, [r3, #12]
 80106cc:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106ce:	1d38      	adds	r0, r7, #4
 80106d0:	f7fe fc1d 	bl	800ef0e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	2b01      	cmp	r3, #1
 80106d8:	d003      	beq.n	80106e2 <prvTimerTask+0xb6>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106dc:	0038      	movs	r0, r7
 80106de:	4798      	blx	r3
 80106e0:	e7c4      	b.n	801066c <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	18e1      	adds	r1, r4, r3
 80106e6:	0023      	movs	r3, r4
 80106e8:	002a      	movs	r2, r5
 80106ea:	0038      	movs	r0, r7
 80106ec:	f7ff fe86 	bl	80103fc <prvInsertTimerInActiveList>
 80106f0:	2801      	cmp	r0, #1
 80106f2:	d1f2      	bne.n	80106da <prvTimerTask+0xae>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80106f4:	2100      	movs	r1, #0
 80106f6:	9100      	str	r1, [sp, #0]
 80106f8:	000b      	movs	r3, r1
 80106fa:	0022      	movs	r2, r4
 80106fc:	0038      	movs	r0, r7
 80106fe:	f7ff ff11 	bl	8010524 <xTimerGenericCommand>
			configASSERT( xResult );
 8010702:	2800      	cmp	r0, #0
 8010704:	d1e9      	bne.n	80106da <prvTimerTask+0xae>
 8010706:	b672      	cpsid	i
 8010708:	e7fe      	b.n	8010708 <prvTimerTask+0xdc>
		xNextExpireTime = ( TickType_t ) 0U;
 801070a:	2400      	movs	r4, #0
 801070c:	e7a5      	b.n	801065a <prvTimerTask+0x2e>
					portYIELD_WITHIN_API();
 801070e:	f000 f8a7 	bl	8010860 <vPortYield>
 8010712:	e7ab      	b.n	801066c <prvTimerTask+0x40>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 8010714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010716:	69aa      	ldr	r2, [r5, #24]
 8010718:	4694      	mov	ip, r2
 801071a:	4463      	add	r3, ip
 801071c:	0019      	movs	r1, r3
 801071e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010720:	0002      	movs	r2, r0
 8010722:	0028      	movs	r0, r5
 8010724:	f7ff fe6a 	bl	80103fc <prvInsertTimerInActiveList>
 8010728:	2801      	cmp	r0, #1
 801072a:	d1a0      	bne.n	801066e <prvTimerTask+0x42>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801072c:	0028      	movs	r0, r5
 801072e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010730:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010732:	69eb      	ldr	r3, [r5, #28]
 8010734:	2b01      	cmp	r3, #1
 8010736:	d19a      	bne.n	801066e <prvTimerTask+0x42>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801073a:	69a9      	ldr	r1, [r5, #24]
 801073c:	468c      	mov	ip, r1
 801073e:	4463      	add	r3, ip
 8010740:	001a      	movs	r2, r3
 8010742:	2300      	movs	r3, #0
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	2100      	movs	r1, #0
 8010748:	0028      	movs	r0, r5
 801074a:	f7ff feeb 	bl	8010524 <xTimerGenericCommand>
							configASSERT( xResult );
 801074e:	2800      	cmp	r0, #0
 8010750:	d18d      	bne.n	801066e <prvTimerTask+0x42>
 8010752:	b672      	cpsid	i
 8010754:	e7fe      	b.n	8010754 <prvTimerTask+0x128>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010756:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010758:	61a9      	str	r1, [r5, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801075a:	2900      	cmp	r1, #0
 801075c:	d006      	beq.n	801076c <prvTimerTask+0x140>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801075e:	1841      	adds	r1, r0, r1
 8010760:	0003      	movs	r3, r0
 8010762:	0002      	movs	r2, r0
 8010764:	0028      	movs	r0, r5
 8010766:	f7ff fe49 	bl	80103fc <prvInsertTimerInActiveList>
 801076a:	e780      	b.n	801066e <prvTimerTask+0x42>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801076c:	b672      	cpsid	i
 801076e:	e7fe      	b.n	801076e <prvTimerTask+0x142>
					vPortFree( pxTimer );
 8010770:	0028      	movs	r0, r5
 8010772:	f000 f999 	bl	8010aa8 <vPortFree>
 8010776:	e77a      	b.n	801066e <prvTimerTask+0x42>
	vTaskSuspendAll();
 8010778:	f7ff f944 	bl	800fa04 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801077c:	a808      	add	r0, sp, #32
 801077e:	f7ff fefd 	bl	801057c <prvSampleTimeNow>
 8010782:	0005      	movs	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010784:	9b08      	ldr	r3, [sp, #32]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d0bf      	beq.n	801070a <prvTimerTask+0xde>
			( void ) xTaskResumeAll();
 801078a:	f7ff f9db 	bl	800fb44 <xTaskResumeAll>
 801078e:	e76d      	b.n	801066c <prvTimerTask+0x40>
 8010790:	0801c2f0 	.word	0x0801c2f0
 8010794:	2000230c 	.word	0x2000230c
 8010798:	20002340 	.word	0x20002340

0801079c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801079c:	b510      	push	{r4, lr}
 801079e:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 80107a0:	d101      	bne.n	80107a6 <pvTimerGetTimerID+0xa>
 80107a2:	b672      	cpsid	i
 80107a4:	e7fe      	b.n	80107a4 <pvTimerGetTimerID+0x8>

	taskENTER_CRITICAL();
 80107a6:	f000 f867 	bl	8010878 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80107aa:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 80107ac:	f000 f870 	bl	8010890 <vPortExitCritical>

	return pvReturn;
}
 80107b0:	0020      	movs	r0, r4
 80107b2:	bd10      	pop	{r4, pc}

080107b4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80107b4:	4b03      	ldr	r3, [pc, #12]	; (80107c4 <prvTaskExitError+0x10>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	3301      	adds	r3, #1
 80107ba:	d001      	beq.n	80107c0 <prvTaskExitError+0xc>
 80107bc:	b672      	cpsid	i
 80107be:	e7fe      	b.n	80107be <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 80107c0:	b672      	cpsid	i
 80107c2:	e7fe      	b.n	80107c2 <prvTaskExitError+0xe>
 80107c4:	20000114 	.word	0x20000114

080107c8 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80107c8:	4a06      	ldr	r2, [pc, #24]	; (80107e4 <pxCurrentTCBConst2>)
 80107ca:	6813      	ldr	r3, [r2, #0]
 80107cc:	6818      	ldr	r0, [r3, #0]
 80107ce:	3020      	adds	r0, #32
 80107d0:	f380 8809 	msr	PSP, r0
 80107d4:	2002      	movs	r0, #2
 80107d6:	f380 8814 	msr	CONTROL, r0
 80107da:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80107dc:	46ae      	mov	lr, r5
 80107de:	b662      	cpsie	i
 80107e0:	bd00      	pop	{pc}
 80107e2:	46c0      	nop			; (mov r8, r8)

080107e4 <pxCurrentTCBConst2>:
 80107e4:	200021e4 	.word	0x200021e4

080107e8 <pxPortInitialiseStack>:
{
 80107e8:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80107ea:	1f03      	subs	r3, r0, #4
 80107ec:	2480      	movs	r4, #128	; 0x80
 80107ee:	0464      	lsls	r4, r4, #17
 80107f0:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80107f2:	3b04      	subs	r3, #4
 80107f4:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80107f6:	3b04      	subs	r3, #4
 80107f8:	4902      	ldr	r1, [pc, #8]	; (8010804 <pxPortInitialiseStack+0x1c>)
 80107fa:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80107fc:	3b14      	subs	r3, #20
 80107fe:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010800:	3840      	subs	r0, #64	; 0x40
}
 8010802:	bd10      	pop	{r4, pc}
 8010804:	080107b5 	.word	0x080107b5

08010808 <SVC_Handler>:
}
 8010808:	4770      	bx	lr
	...

0801080c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801080c:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 801080e:	4b0f      	ldr	r3, [pc, #60]	; (801084c <xPortStartScheduler+0x40>)
 8010810:	6819      	ldr	r1, [r3, #0]
 8010812:	22ff      	movs	r2, #255	; 0xff
 8010814:	0412      	lsls	r2, r2, #16
 8010816:	430a      	orrs	r2, r1
 8010818:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 801081a:	6819      	ldr	r1, [r3, #0]
 801081c:	22ff      	movs	r2, #255	; 0xff
 801081e:	0612      	lsls	r2, r2, #24
 8010820:	430a      	orrs	r2, r1
 8010822:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010824:	4b0a      	ldr	r3, [pc, #40]	; (8010850 <xPortStartScheduler+0x44>)
 8010826:	6818      	ldr	r0, [r3, #0]
 8010828:	21fa      	movs	r1, #250	; 0xfa
 801082a:	0089      	lsls	r1, r1, #2
 801082c:	f7ef fc90 	bl	8000150 <__udivsi3>
 8010830:	3801      	subs	r0, #1
 8010832:	4b08      	ldr	r3, [pc, #32]	; (8010854 <xPortStartScheduler+0x48>)
 8010834:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8010836:	4b08      	ldr	r3, [pc, #32]	; (8010858 <xPortStartScheduler+0x4c>)
 8010838:	2207      	movs	r2, #7
 801083a:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 801083c:	4b07      	ldr	r3, [pc, #28]	; (801085c <xPortStartScheduler+0x50>)
 801083e:	2200      	movs	r2, #0
 8010840:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 8010842:	f7ff ffc1 	bl	80107c8 <vPortStartFirstTask>
	prvTaskExitError();
 8010846:	f7ff ffb5 	bl	80107b4 <prvTaskExitError>
 801084a:	46c0      	nop			; (mov r8, r8)
 801084c:	e000ed20 	.word	0xe000ed20
 8010850:	20000100 	.word	0x20000100
 8010854:	e000e014 	.word	0xe000e014
 8010858:	e000e010 	.word	0xe000e010
 801085c:	20000114 	.word	0x20000114

08010860 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8010860:	4b04      	ldr	r3, [pc, #16]	; (8010874 <vPortYield+0x14>)
 8010862:	2280      	movs	r2, #128	; 0x80
 8010864:	0552      	lsls	r2, r2, #21
 8010866:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 8010868:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 801086c:	f3bf 8f6f 	isb	sy
}
 8010870:	4770      	bx	lr
 8010872:	46c0      	nop			; (mov r8, r8)
 8010874:	e000ed04 	.word	0xe000ed04

08010878 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010878:	b672      	cpsid	i
    uxCriticalNesting++;
 801087a:	4a04      	ldr	r2, [pc, #16]	; (801088c <vPortEnterCritical+0x14>)
 801087c:	6813      	ldr	r3, [r2, #0]
 801087e:	3301      	adds	r3, #1
 8010880:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8010882:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010886:	f3bf 8f6f 	isb	sy
}
 801088a:	4770      	bx	lr
 801088c:	20000114 	.word	0x20000114

08010890 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010890:	4b06      	ldr	r3, [pc, #24]	; (80108ac <vPortExitCritical+0x1c>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d101      	bne.n	801089c <vPortExitCritical+0xc>
 8010898:	b672      	cpsid	i
 801089a:	e7fe      	b.n	801089a <vPortExitCritical+0xa>
    uxCriticalNesting--;
 801089c:	3b01      	subs	r3, #1
 801089e:	4a03      	ldr	r2, [pc, #12]	; (80108ac <vPortExitCritical+0x1c>)
 80108a0:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d100      	bne.n	80108a8 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 80108a6:	b662      	cpsie	i
}
 80108a8:	4770      	bx	lr
 80108aa:	46c0      	nop			; (mov r8, r8)
 80108ac:	20000114 	.word	0x20000114

080108b0 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 80108b0:	f3ef 8010 	mrs	r0, PRIMASK
 80108b4:	b672      	cpsid	i
 80108b6:	4770      	bx	lr
}
 80108b8:	2000      	movs	r0, #0

080108ba <vClearInterruptMaskFromISR>:
	__asm volatile(
 80108ba:	f380 8810 	msr	PRIMASK, r0
 80108be:	4770      	bx	lr

080108c0 <PendSV_Handler>:
	__asm volatile
 80108c0:	f3ef 8009 	mrs	r0, PSP
 80108c4:	4b0e      	ldr	r3, [pc, #56]	; (8010900 <pxCurrentTCBConst>)
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	3820      	subs	r0, #32
 80108ca:	6010      	str	r0, [r2, #0]
 80108cc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80108ce:	4644      	mov	r4, r8
 80108d0:	464d      	mov	r5, r9
 80108d2:	4656      	mov	r6, sl
 80108d4:	465f      	mov	r7, fp
 80108d6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80108d8:	b508      	push	{r3, lr}
 80108da:	b672      	cpsid	i
 80108dc:	f7ff fa4e 	bl	800fd7c <vTaskSwitchContext>
 80108e0:	b662      	cpsie	i
 80108e2:	bc0c      	pop	{r2, r3}
 80108e4:	6811      	ldr	r1, [r2, #0]
 80108e6:	6808      	ldr	r0, [r1, #0]
 80108e8:	3010      	adds	r0, #16
 80108ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80108ec:	46a0      	mov	r8, r4
 80108ee:	46a9      	mov	r9, r5
 80108f0:	46b2      	mov	sl, r6
 80108f2:	46bb      	mov	fp, r7
 80108f4:	f380 8809 	msr	PSP, r0
 80108f8:	3820      	subs	r0, #32
 80108fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80108fc:	4718      	bx	r3
 80108fe:	46c0      	nop			; (mov r8, r8)

08010900 <pxCurrentTCBConst>:
 8010900:	200021e4 	.word	0x200021e4

08010904 <xPortSysTickHandler>:
{
 8010904:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010906:	f7ff ffd3 	bl	80108b0 <ulSetInterruptMaskFromISR>
 801090a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 801090c:	f7ff f88e 	bl	800fa2c <xTaskIncrementTick>
 8010910:	2800      	cmp	r0, #0
 8010912:	d003      	beq.n	801091c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8010914:	4b03      	ldr	r3, [pc, #12]	; (8010924 <xPortSysTickHandler+0x20>)
 8010916:	2280      	movs	r2, #128	; 0x80
 8010918:	0552      	lsls	r2, r2, #21
 801091a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 801091c:	0020      	movs	r0, r4
 801091e:	f7ff ffcc 	bl	80108ba <vClearInterruptMaskFromISR>
}
 8010922:	bd10      	pop	{r4, pc}
 8010924:	e000ed04 	.word	0xe000ed04

08010928 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010928:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801092a:	4b12      	ldr	r3, [pc, #72]	; (8010974 <prvInsertBlockIntoFreeList+0x4c>)
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	4282      	cmp	r2, r0
 8010930:	d319      	bcc.n	8010966 <prvInsertBlockIntoFreeList+0x3e>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010932:	685c      	ldr	r4, [r3, #4]
 8010934:	1919      	adds	r1, r3, r4
 8010936:	4288      	cmp	r0, r1
 8010938:	d103      	bne.n	8010942 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801093a:	6841      	ldr	r1, [r0, #4]
 801093c:	1909      	adds	r1, r1, r4
 801093e:	6059      	str	r1, [r3, #4]
 8010940:	0018      	movs	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010942:	6841      	ldr	r1, [r0, #4]
 8010944:	1844      	adds	r4, r0, r1
 8010946:	42a2      	cmp	r2, r4
 8010948:	d111      	bne.n	801096e <prvInsertBlockIntoFreeList+0x46>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801094a:	4c0b      	ldr	r4, [pc, #44]	; (8010978 <prvInsertBlockIntoFreeList+0x50>)
 801094c:	6824      	ldr	r4, [r4, #0]
 801094e:	42a2      	cmp	r2, r4
 8010950:	d00b      	beq.n	801096a <prvInsertBlockIntoFreeList+0x42>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010952:	6852      	ldr	r2, [r2, #4]
 8010954:	1852      	adds	r2, r2, r1
 8010956:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010958:	681a      	ldr	r2, [r3, #0]
 801095a:	6812      	ldr	r2, [r2, #0]
 801095c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801095e:	4298      	cmp	r0, r3
 8010960:	d000      	beq.n	8010964 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010962:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010964:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010966:	0013      	movs	r3, r2
 8010968:	e7e0      	b.n	801092c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801096a:	6002      	str	r2, [r0, #0]
 801096c:	e7f7      	b.n	801095e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801096e:	6002      	str	r2, [r0, #0]
 8010970:	e7f5      	b.n	801095e <prvInsertBlockIntoFreeList+0x36>
 8010972:	46c0      	nop			; (mov r8, r8)
 8010974:	20006d8c 	.word	0x20006d8c
 8010978:	20002344 	.word	0x20002344

0801097c <pvPortMalloc>:
{
 801097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010980:	f7ff f840 	bl	800fa04 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010984:	4b41      	ldr	r3, [pc, #260]	; (8010a8c <pvPortMalloc+0x110>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d00a      	beq.n	80109a2 <pvPortMalloc+0x26>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801098c:	4b40      	ldr	r3, [pc, #256]	; (8010a90 <pvPortMalloc+0x114>)
 801098e:	681f      	ldr	r7, [r3, #0]
 8010990:	423c      	tst	r4, r7
 8010992:	d02a      	beq.n	80109ea <pvPortMalloc+0x6e>
	( void ) xTaskResumeAll();
 8010994:	f7ff f8d6 	bl	800fb44 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8010998:	f7fd fbc8 	bl	800e12c <vApplicationMallocFailedHook>
 801099c:	2500      	movs	r5, #0
}
 801099e:	0028      	movs	r0, r5
 80109a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ulAddress = ( uint32_t ) ucHeap;
 80109a2:	4a3c      	ldr	r2, [pc, #240]	; (8010a94 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80109a4:	0753      	lsls	r3, r2, #29
 80109a6:	d01e      	beq.n	80109e6 <pvPortMalloc+0x6a>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 80109a8:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80109aa:	2307      	movs	r3, #7
 80109ac:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 80109ae:	4b3a      	ldr	r3, [pc, #232]	; (8010a98 <pvPortMalloc+0x11c>)
 80109b0:	18d3      	adds	r3, r2, r3
 80109b2:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80109b4:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80109b6:	4839      	ldr	r0, [pc, #228]	; (8010a9c <pvPortMalloc+0x120>)
 80109b8:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80109ba:	2100      	movs	r1, #0
 80109bc:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 80109be:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 80109c0:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 80109c2:	2007      	movs	r0, #7
 80109c4:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 80109c6:	4831      	ldr	r0, [pc, #196]	; (8010a8c <pvPortMalloc+0x110>)
 80109c8:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80109ca:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80109cc:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 80109ce:	1a99      	subs	r1, r3, r2
 80109d0:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80109d2:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109d4:	4b32      	ldr	r3, [pc, #200]	; (8010aa0 <pvPortMalloc+0x124>)
 80109d6:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80109d8:	4b32      	ldr	r3, [pc, #200]	; (8010aa4 <pvPortMalloc+0x128>)
 80109da:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80109dc:	4b2c      	ldr	r3, [pc, #176]	; (8010a90 <pvPortMalloc+0x114>)
 80109de:	2280      	movs	r2, #128	; 0x80
 80109e0:	0612      	lsls	r2, r2, #24
 80109e2:	601a      	str	r2, [r3, #0]
 80109e4:	e7d2      	b.n	801098c <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80109e6:	4b2c      	ldr	r3, [pc, #176]	; (8010a98 <pvPortMalloc+0x11c>)
 80109e8:	e7e5      	b.n	80109b6 <pvPortMalloc+0x3a>
			if( xWantedSize > 0 )
 80109ea:	2c00      	cmp	r4, #0
 80109ec:	d008      	beq.n	8010a00 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80109ee:	0023      	movs	r3, r4
 80109f0:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109f2:	075a      	lsls	r2, r3, #29
 80109f4:	d002      	beq.n	80109fc <pvPortMalloc+0x80>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80109f6:	2207      	movs	r2, #7
 80109f8:	4393      	bics	r3, r2
 80109fa:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d102      	bne.n	8010a06 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 8010a00:	f7ff f8a0 	bl	800fb44 <xTaskResumeAll>
 8010a04:	e7c8      	b.n	8010998 <pvPortMalloc+0x1c>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a06:	4a27      	ldr	r2, [pc, #156]	; (8010aa4 <pvPortMalloc+0x128>)
 8010a08:	6816      	ldr	r6, [r2, #0]
 8010a0a:	429e      	cmp	r6, r3
 8010a0c:	d302      	bcc.n	8010a14 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8010a0e:	4a23      	ldr	r2, [pc, #140]	; (8010a9c <pvPortMalloc+0x120>)
 8010a10:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a12:	e004      	b.n	8010a1e <pvPortMalloc+0xa2>
	( void ) xTaskResumeAll();
 8010a14:	f7ff f896 	bl	800fb44 <xTaskResumeAll>
 8010a18:	e7be      	b.n	8010998 <pvPortMalloc+0x1c>
 8010a1a:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a1c:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a1e:	6861      	ldr	r1, [r4, #4]
 8010a20:	4299      	cmp	r1, r3
 8010a22:	d202      	bcs.n	8010a2a <pvPortMalloc+0xae>
 8010a24:	6821      	ldr	r1, [r4, #0]
 8010a26:	2900      	cmp	r1, #0
 8010a28:	d1f7      	bne.n	8010a1a <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8010a2a:	4918      	ldr	r1, [pc, #96]	; (8010a8c <pvPortMalloc+0x110>)
 8010a2c:	6809      	ldr	r1, [r1, #0]
 8010a2e:	42a1      	cmp	r1, r4
 8010a30:	d00b      	beq.n	8010a4a <pvPortMalloc+0xce>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a32:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a34:	6821      	ldr	r1, [r4, #0]
 8010a36:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a38:	6862      	ldr	r2, [r4, #4]
 8010a3a:	1ad2      	subs	r2, r2, r3
 8010a3c:	2a10      	cmp	r2, #16
 8010a3e:	d90b      	bls.n	8010a58 <pvPortMalloc+0xdc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a40:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a42:	0741      	lsls	r1, r0, #29
 8010a44:	d004      	beq.n	8010a50 <pvPortMalloc+0xd4>
 8010a46:	b672      	cpsid	i
 8010a48:	e7fe      	b.n	8010a48 <pvPortMalloc+0xcc>
	( void ) xTaskResumeAll();
 8010a4a:	f7ff f87b 	bl	800fb44 <xTaskResumeAll>
 8010a4e:	e7a3      	b.n	8010998 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a50:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010a52:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010a54:	f7ff ff68 	bl	8010928 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010a58:	6862      	ldr	r2, [r4, #4]
 8010a5a:	1ab6      	subs	r6, r6, r2
 8010a5c:	4911      	ldr	r1, [pc, #68]	; (8010aa4 <pvPortMalloc+0x128>)
 8010a5e:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010a60:	490f      	ldr	r1, [pc, #60]	; (8010aa0 <pvPortMalloc+0x124>)
 8010a62:	6809      	ldr	r1, [r1, #0]
 8010a64:	428e      	cmp	r6, r1
 8010a66:	d201      	bcs.n	8010a6c <pvPortMalloc+0xf0>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010a68:	490d      	ldr	r1, [pc, #52]	; (8010aa0 <pvPortMalloc+0x124>)
 8010a6a:	600e      	str	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a6c:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010a6e:	4317      	orrs	r7, r2
 8010a70:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010a72:	2300      	movs	r3, #0
 8010a74:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8010a76:	f7ff f865 	bl	800fb44 <xTaskResumeAll>
		if( pvReturn == NULL )
 8010a7a:	2d00      	cmp	r5, #0
 8010a7c:	d100      	bne.n	8010a80 <pvPortMalloc+0x104>
 8010a7e:	e78b      	b.n	8010998 <pvPortMalloc+0x1c>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a80:	076b      	lsls	r3, r5, #29
 8010a82:	d100      	bne.n	8010a86 <pvPortMalloc+0x10a>
 8010a84:	e78b      	b.n	801099e <pvPortMalloc+0x22>
 8010a86:	b672      	cpsid	i
 8010a88:	e7fe      	b.n	8010a88 <pvPortMalloc+0x10c>
 8010a8a:	46c0      	nop			; (mov r8, r8)
 8010a8c:	20002344 	.word	0x20002344
 8010a90:	20006d80 	.word	0x20006d80
 8010a94:	20002348 	.word	0x20002348
 8010a98:	00004a38 	.word	0x00004a38
 8010a9c:	20006d8c 	.word	0x20006d8c
 8010aa0:	20006d88 	.word	0x20006d88
 8010aa4:	20006d84 	.word	0x20006d84

08010aa8 <vPortFree>:
{
 8010aa8:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010aaa:	2800      	cmp	r0, #0
 8010aac:	d020      	beq.n	8010af0 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010aae:	0003      	movs	r3, r0
 8010ab0:	3b08      	subs	r3, #8
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	4a0f      	ldr	r2, [pc, #60]	; (8010af4 <vPortFree+0x4c>)
 8010ab6:	6812      	ldr	r2, [r2, #0]
 8010ab8:	421a      	tst	r2, r3
 8010aba:	d101      	bne.n	8010ac0 <vPortFree+0x18>
 8010abc:	b672      	cpsid	i
 8010abe:	e7fe      	b.n	8010abe <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010ac0:	0001      	movs	r1, r0
 8010ac2:	3908      	subs	r1, #8
 8010ac4:	6809      	ldr	r1, [r1, #0]
 8010ac6:	2900      	cmp	r1, #0
 8010ac8:	d001      	beq.n	8010ace <vPortFree+0x26>
 8010aca:	b672      	cpsid	i
 8010acc:	e7fe      	b.n	8010acc <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ace:	3808      	subs	r0, #8
 8010ad0:	0004      	movs	r4, r0
 8010ad2:	4393      	bics	r3, r2
 8010ad4:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8010ad6:	f7fe ff95 	bl	800fa04 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ada:	4a07      	ldr	r2, [pc, #28]	; (8010af8 <vPortFree+0x50>)
 8010adc:	6863      	ldr	r3, [r4, #4]
 8010ade:	6811      	ldr	r1, [r2, #0]
 8010ae0:	468c      	mov	ip, r1
 8010ae2:	4463      	add	r3, ip
 8010ae4:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ae6:	0020      	movs	r0, r4
 8010ae8:	f7ff ff1e 	bl	8010928 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010aec:	f7ff f82a 	bl	800fb44 <xTaskResumeAll>
}
 8010af0:	bd10      	pop	{r4, pc}
 8010af2:	46c0      	nop			; (mov r8, r8)
 8010af4:	20006d80 	.word	0x20006d80
 8010af8:	20006d84 	.word	0x20006d84

08010afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010afc:	b510      	push	{r4, lr}
 8010afe:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010b00:	f002 fb8e 	bl	8013220 <HAL_RCC_GetHCLKFreq>
 8010b04:	21fa      	movs	r1, #250	; 0xfa
 8010b06:	0089      	lsls	r1, r1, #2
 8010b08:	f7ef fb22 	bl	8000150 <__udivsi3>
 8010b0c:	f000 fb9a 	bl	8011244 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010b10:	2001      	movs	r0, #1
 8010b12:	2200      	movs	r2, #0
 8010b14:	0021      	movs	r1, r4
 8010b16:	4240      	negs	r0, r0
 8010b18:	f000 fb4c 	bl	80111b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010b1c:	2000      	movs	r0, #0
 8010b1e:	bd10      	pop	{r4, pc}

08010b20 <HAL_Init>:
{
 8010b20:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010b22:	4a06      	ldr	r2, [pc, #24]	; (8010b3c <HAL_Init+0x1c>)
 8010b24:	6813      	ldr	r3, [r2, #0]
 8010b26:	2110      	movs	r1, #16
 8010b28:	430b      	orrs	r3, r1
 8010b2a:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	f7ff ffe5 	bl	8010afc <HAL_InitTick>
  HAL_MspInit();
 8010b32:	f001 ff1d 	bl	8012970 <HAL_MspInit>
}
 8010b36:	2000      	movs	r0, #0
 8010b38:	bd10      	pop	{r4, pc}
 8010b3a:	46c0      	nop			; (mov r8, r8)
 8010b3c:	40022000 	.word	0x40022000

08010b40 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010b40:	4a02      	ldr	r2, [pc, #8]	; (8010b4c <HAL_IncTick+0xc>)
 8010b42:	6813      	ldr	r3, [r2, #0]
 8010b44:	3301      	adds	r3, #1
 8010b46:	6013      	str	r3, [r2, #0]
}
 8010b48:	4770      	bx	lr
 8010b4a:	46c0      	nop			; (mov r8, r8)
 8010b4c:	20006d94 	.word	0x20006d94

08010b50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010b50:	4b01      	ldr	r3, [pc, #4]	; (8010b58 <HAL_GetTick+0x8>)
 8010b52:	6818      	ldr	r0, [r3, #0]
}
 8010b54:	4770      	bx	lr
 8010b56:	46c0      	nop			; (mov r8, r8)
 8010b58:	20006d94 	.word	0x20006d94

08010b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010b5c:	b510      	push	{r4, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010b62:	f7ff fff5 	bl	8010b50 <HAL_GetTick>
 8010b66:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010b68:	f7ff fff2 	bl	8010b50 <HAL_GetTick>
 8010b6c:	9b01      	ldr	r3, [sp, #4]
 8010b6e:	1b00      	subs	r0, r0, r4
 8010b70:	4298      	cmp	r0, r3
 8010b72:	d3f9      	bcc.n	8010b68 <HAL_Delay+0xc>
  {
  }
}
 8010b74:	b002      	add	sp, #8
 8010b76:	bd10      	pop	{r4, pc}

08010b78 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010b78:	4b01      	ldr	r3, [pc, #4]	; (8010b80 <HAL_GetREVID+0x8>)
 8010b7a:	6818      	ldr	r0, [r3, #0]
 8010b7c:	0c00      	lsrs	r0, r0, #16
}
 8010b7e:	4770      	bx	lr
 8010b80:	40015800 	.word	0x40015800

08010b84 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010b84:	4b02      	ldr	r3, [pc, #8]	; (8010b90 <HAL_GetDEVID+0xc>)
 8010b86:	6818      	ldr	r0, [r3, #0]
 8010b88:	0500      	lsls	r0, r0, #20
 8010b8a:	0d00      	lsrs	r0, r0, #20
}
 8010b8c:	4770      	bx	lr
 8010b8e:	46c0      	nop			; (mov r8, r8)
 8010b90:	40015800 	.word	0x40015800

08010b94 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8010b94:	b570      	push	{r4, r5, r6, lr}
 8010b96:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010b98:	6803      	ldr	r3, [r0, #0]
 8010b9a:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8010b9c:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8010b9e:	0752      	lsls	r2, r2, #29
 8010ba0:	d521      	bpl.n	8010be6 <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010ba2:	689a      	ldr	r2, [r3, #8]
 8010ba4:	0752      	lsls	r2, r2, #29
 8010ba6:	d506      	bpl.n	8010bb6 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8010ba8:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8010baa:	0792      	lsls	r2, r2, #30
 8010bac:	d403      	bmi.n	8010bb6 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8010bae:	689a      	ldr	r2, [r3, #8]
 8010bb0:	2110      	movs	r1, #16
 8010bb2:	430a      	orrs	r2, r1
 8010bb4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8010bb6:	f7ff ffcb 	bl	8010b50 <HAL_GetTick>
 8010bba:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8010bbc:	2504      	movs	r5, #4
 8010bbe:	6823      	ldr	r3, [r4, #0]
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	421d      	tst	r5, r3
 8010bc4:	d00e      	beq.n	8010be4 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8010bc6:	f7ff ffc3 	bl	8010b50 <HAL_GetTick>
 8010bca:	1b80      	subs	r0, r0, r6
 8010bcc:	2802      	cmp	r0, #2
 8010bce:	d9f6      	bls.n	8010bbe <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010bd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010bd2:	2210      	movs	r2, #16
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010bd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010bda:	3a0f      	subs	r2, #15
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010be0:	2001      	movs	r0, #1
 8010be2:	e000      	b.n	8010be6 <ADC_ConversionStop+0x52>
  return HAL_OK;
 8010be4:	2000      	movs	r0, #0
}
 8010be6:	bd70      	pop	{r4, r5, r6, pc}

08010be8 <ADC_Disable>:
{
 8010be8:	b570      	push	{r4, r5, r6, lr}
 8010bea:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010bec:	6802      	ldr	r2, [r0, #0]
 8010bee:	6891      	ldr	r1, [r2, #8]
 8010bf0:	2303      	movs	r3, #3
 8010bf2:	400b      	ands	r3, r1
  return HAL_OK;
 8010bf4:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010bf6:	2b01      	cmp	r3, #1
 8010bf8:	d000      	beq.n	8010bfc <ADC_Disable+0x14>
}
 8010bfa:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8010bfc:	6813      	ldr	r3, [r2, #0]
 8010bfe:	07db      	lsls	r3, r3, #31
 8010c00:	d402      	bmi.n	8010c08 <ADC_Disable+0x20>
 8010c02:	68d3      	ldr	r3, [r2, #12]
 8010c04:	041b      	lsls	r3, r3, #16
 8010c06:	d5f8      	bpl.n	8010bfa <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8010c08:	6891      	ldr	r1, [r2, #8]
 8010c0a:	2305      	movs	r3, #5
 8010c0c:	400b      	ands	r3, r1
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d009      	beq.n	8010c26 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c14:	2210      	movs	r2, #16
 8010c16:	4313      	orrs	r3, r2
 8010c18:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010c1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010c1c:	3a0f      	subs	r2, #15
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010c22:	2001      	movs	r0, #1
 8010c24:	e7e9      	b.n	8010bfa <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8010c26:	6893      	ldr	r3, [r2, #8]
 8010c28:	2102      	movs	r1, #2
 8010c2a:	430b      	orrs	r3, r1
 8010c2c:	6093      	str	r3, [r2, #8]
 8010c2e:	6823      	ldr	r3, [r4, #0]
 8010c30:	2203      	movs	r2, #3
 8010c32:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8010c34:	f7ff ff8c 	bl	8010b50 <HAL_GetTick>
 8010c38:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8010c3a:	2501      	movs	r5, #1
 8010c3c:	6823      	ldr	r3, [r4, #0]
 8010c3e:	689b      	ldr	r3, [r3, #8]
 8010c40:	421d      	tst	r5, r3
 8010c42:	d00e      	beq.n	8010c62 <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8010c44:	f7ff ff84 	bl	8010b50 <HAL_GetTick>
 8010c48:	1b80      	subs	r0, r0, r6
 8010c4a:	2802      	cmp	r0, #2
 8010c4c:	d9f6      	bls.n	8010c3c <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010c50:	2210      	movs	r2, #16
 8010c52:	4313      	orrs	r3, r2
 8010c54:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010c56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010c58:	3a0f      	subs	r2, #15
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010c5e:	2001      	movs	r0, #1
 8010c60:	e7cb      	b.n	8010bfa <ADC_Disable+0x12>
  return HAL_OK;
 8010c62:	2000      	movs	r0, #0
 8010c64:	e7c9      	b.n	8010bfa <ADC_Disable+0x12>
	...

08010c68 <ADC_Enable>:
{
 8010c68:	b570      	push	{r4, r5, r6, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010c72:	6803      	ldr	r3, [r0, #0]
 8010c74:	6899      	ldr	r1, [r3, #8]
 8010c76:	2203      	movs	r2, #3
 8010c78:	400a      	ands	r2, r1
 8010c7a:	2a01      	cmp	r2, #1
 8010c7c:	d02d      	beq.n	8010cda <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8010c7e:	6899      	ldr	r1, [r3, #8]
 8010c80:	4a20      	ldr	r2, [pc, #128]	; (8010d04 <ADC_Enable+0x9c>)
 8010c82:	4211      	tst	r1, r2
 8010c84:	d131      	bne.n	8010cea <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 8010c86:	689a      	ldr	r2, [r3, #8]
 8010c88:	2101      	movs	r1, #1
 8010c8a:	430a      	orrs	r2, r1
 8010c8c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8010c8e:	4b1e      	ldr	r3, [pc, #120]	; (8010d08 <ADC_Enable+0xa0>)
 8010c90:	6818      	ldr	r0, [r3, #0]
 8010c92:	491e      	ldr	r1, [pc, #120]	; (8010d0c <ADC_Enable+0xa4>)
 8010c94:	f7ef fa5c 	bl	8000150 <__udivsi3>
 8010c98:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0)
 8010c9a:	9b01      	ldr	r3, [sp, #4]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d005      	beq.n	8010cac <ADC_Enable+0x44>
      wait_loop_index--;
 8010ca0:	9b01      	ldr	r3, [sp, #4]
 8010ca2:	3b01      	subs	r3, #1
 8010ca4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8010ca6:	9b01      	ldr	r3, [sp, #4]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d1f9      	bne.n	8010ca0 <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 8010cac:	f7ff ff50 	bl	8010b50 <HAL_GetTick>
 8010cb0:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8010cb2:	2501      	movs	r5, #1
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	421d      	tst	r5, r3
 8010cba:	d121      	bne.n	8010d00 <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8010cbc:	f7ff ff48 	bl	8010b50 <HAL_GetTick>
 8010cc0:	1b80      	subs	r0, r0, r6
 8010cc2:	2802      	cmp	r0, #2
 8010cc4:	d9f6      	bls.n	8010cb4 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010cc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cc8:	2210      	movs	r2, #16
 8010cca:	4313      	orrs	r3, r2
 8010ccc:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010cce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010cd0:	3a0f      	subs	r2, #15
 8010cd2:	4313      	orrs	r3, r2
 8010cd4:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8010cd6:	2001      	movs	r0, #1
 8010cd8:	e010      	b.n	8010cfc <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010cda:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8010cdc:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8010cde:	07d2      	lsls	r2, r2, #31
 8010ce0:	d40c      	bmi.n	8010cfc <ADC_Enable+0x94>
 8010ce2:	68da      	ldr	r2, [r3, #12]
 8010ce4:	0412      	lsls	r2, r2, #16
 8010ce6:	d5ca      	bpl.n	8010c7e <ADC_Enable+0x16>
 8010ce8:	e008      	b.n	8010cfc <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010cea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010cec:	2210      	movs	r2, #16
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010cf2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010cf4:	3a0f      	subs	r2, #15
 8010cf6:	4313      	orrs	r3, r2
 8010cf8:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8010cfa:	2001      	movs	r0, #1
}
 8010cfc:	b002      	add	sp, #8
 8010cfe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8010d00:	2000      	movs	r0, #0
 8010d02:	e7fb      	b.n	8010cfc <ADC_Enable+0x94>
 8010d04:	80000017 	.word	0x80000017
 8010d08:	20000100 	.word	0x20000100
 8010d0c:	000f4240 	.word	0x000f4240

08010d10 <HAL_ADC_Init>:
{
 8010d10:	b570      	push	{r4, r5, r6, lr}
 8010d12:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8010d14:	d100      	bne.n	8010d18 <HAL_ADC_Init+0x8>
 8010d16:	e09b      	b.n	8010e50 <HAL_ADC_Init+0x140>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8010d18:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d073      	beq.n	8010e06 <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8010d1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d20:	06db      	lsls	r3, r3, #27
 8010d22:	d500      	bpl.n	8010d26 <HAL_ADC_Init+0x16>
 8010d24:	e08e      	b.n	8010e44 <HAL_ADC_Init+0x134>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8010d26:	6822      	ldr	r2, [r4, #0]
 8010d28:	6893      	ldr	r3, [r2, #8]
 8010d2a:	2104      	movs	r1, #4
 8010d2c:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8010d2e:	d000      	beq.n	8010d32 <HAL_ADC_Init+0x22>
 8010d30:	e088      	b.n	8010e44 <HAL_ADC_Init+0x134>
    ADC_STATE_CLR_SET(hadc->State,
 8010d32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010d34:	4847      	ldr	r0, [pc, #284]	; (8010e54 <HAL_ADC_Init+0x144>)
 8010d36:	4003      	ands	r3, r0
 8010d38:	3006      	adds	r0, #6
 8010d3a:	30ff      	adds	r0, #255	; 0xff
 8010d3c:	4303      	orrs	r3, r0
 8010d3e:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010d40:	6890      	ldr	r0, [r2, #8]
 8010d42:	2303      	movs	r3, #3
 8010d44:	4003      	ands	r3, r0
 8010d46:	2b01      	cmp	r3, #1
 8010d48:	d063      	beq.n	8010e12 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8010d4a:	68d3      	ldr	r3, [r2, #12]
 8010d4c:	2018      	movs	r0, #24
 8010d4e:	4383      	bics	r3, r0
 8010d50:	68a0      	ldr	r0, [r4, #8]
 8010d52:	4303      	orrs	r3, r0
 8010d54:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8010d56:	6822      	ldr	r2, [r4, #0]
 8010d58:	6913      	ldr	r3, [r2, #16]
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	089b      	lsrs	r3, r3, #2
 8010d5e:	6860      	ldr	r0, [r4, #4]
 8010d60:	4303      	orrs	r3, r0
 8010d62:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8010d64:	6822      	ldr	r2, [r4, #0]
 8010d66:	68d3      	ldr	r3, [r2, #12]
 8010d68:	483b      	ldr	r0, [pc, #236]	; (8010e58 <HAL_ADC_Init+0x148>)
 8010d6a:	4003      	ands	r3, r0
 8010d6c:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010d6e:	69a3      	ldr	r3, [r4, #24]
 8010d70:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8010d72:	69e3      	ldr	r3, [r4, #28]
 8010d74:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8010d76:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8010d78:	6a20      	ldr	r0, [r4, #32]
 8010d7a:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8010d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d7e:	000e      	movs	r6, r1
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d001      	beq.n	8010d88 <HAL_ADC_Init+0x78>
 8010d84:	2680      	movs	r6, #128	; 0x80
 8010d86:	0176      	lsls	r6, r6, #5
 8010d88:	68e3      	ldr	r3, [r4, #12]
 8010d8a:	431a      	orrs	r2, r3
 8010d8c:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010d8e:	6923      	ldr	r3, [r4, #16]
 8010d90:	2b02      	cmp	r3, #2
 8010d92:	d045      	beq.n	8010e20 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8010d94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d96:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	4333      	orrs	r3, r6
 8010d9c:	430b      	orrs	r3, r1
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010d9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010da0:	2a01      	cmp	r2, #1
 8010da2:	d03f      	beq.n	8010e24 <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010da4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8010da6:	21c2      	movs	r1, #194	; 0xc2
 8010da8:	31ff      	adds	r1, #255	; 0xff
 8010daa:	428a      	cmp	r2, r1
 8010dac:	d002      	beq.n	8010db4 <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8010dae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010db0:	430a      	orrs	r2, r1
 8010db2:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8010db4:	6821      	ldr	r1, [r4, #0]
 8010db6:	68ca      	ldr	r2, [r1, #12]
 8010db8:	431a      	orrs	r2, r3
 8010dba:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8010dbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010dbe:	2180      	movs	r1, #128	; 0x80
 8010dc0:	0549      	lsls	r1, r1, #21
 8010dc2:	428a      	cmp	r2, r1
 8010dc4:	d002      	beq.n	8010dcc <HAL_ADC_Init+0xbc>
 8010dc6:	3a01      	subs	r2, #1
 8010dc8:	2a06      	cmp	r2, #6
 8010dca:	d80a      	bhi.n	8010de2 <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	6941      	ldr	r1, [r0, #20]
 8010dd0:	2207      	movs	r2, #7
 8010dd2:	4391      	bics	r1, r2
 8010dd4:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8010dd6:	6821      	ldr	r1, [r4, #0]
 8010dd8:	6948      	ldr	r0, [r1, #20]
 8010dda:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8010ddc:	402a      	ands	r2, r5
 8010dde:	4302      	orrs	r2, r0
 8010de0:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8010de2:	6822      	ldr	r2, [r4, #0]
 8010de4:	68d2      	ldr	r2, [r2, #12]
 8010de6:	491d      	ldr	r1, [pc, #116]	; (8010e5c <HAL_ADC_Init+0x14c>)
 8010de8:	400a      	ands	r2, r1
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d020      	beq.n	8010e30 <HAL_ADC_Init+0x120>
      ADC_STATE_CLR_SET(hadc->State,
 8010dee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010df0:	2212      	movs	r2, #18
 8010df2:	4393      	bics	r3, r2
 8010df4:	3a02      	subs	r2, #2
 8010df6:	4313      	orrs	r3, r2
 8010df8:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010dfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010dfc:	3a0f      	subs	r2, #15
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8010e02:	2001      	movs	r0, #1
 8010e04:	e023      	b.n	8010e4e <HAL_ADC_Init+0x13e>
    ADC_CLEAR_ERRORCODE(hadc);
 8010e06:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8010e08:	2240      	movs	r2, #64	; 0x40
 8010e0a:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8010e0c:	f7f7 fe34 	bl	8008a78 <HAL_ADC_MspInit>
 8010e10:	e785      	b.n	8010d1e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8010e12:	6813      	ldr	r3, [r2, #0]
 8010e14:	07db      	lsls	r3, r3, #31
 8010e16:	d4a5      	bmi.n	8010d64 <HAL_ADC_Init+0x54>
 8010e18:	68d3      	ldr	r3, [r2, #12]
 8010e1a:	041b      	lsls	r3, r3, #16
 8010e1c:	d4a2      	bmi.n	8010d64 <HAL_ADC_Init+0x54>
 8010e1e:	e794      	b.n	8010d4a <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8010e20:	2104      	movs	r1, #4
 8010e22:	e7b7      	b.n	8010d94 <HAL_ADC_Init+0x84>
    if ((hadc->Init.DiscontinuousConvMode == ENABLE) &&
 8010e24:	2800      	cmp	r0, #0
 8010e26:	d1bd      	bne.n	8010da4 <HAL_ADC_Init+0x94>
      tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8010e28:	2280      	movs	r2, #128	; 0x80
 8010e2a:	0252      	lsls	r2, r2, #9
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	e7b9      	b.n	8010da4 <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 8010e30:	2300      	movs	r3, #0
 8010e32:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8010e34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010e36:	2203      	movs	r2, #3
 8010e38:	4393      	bics	r3, r2
 8010e3a:	3a02      	subs	r2, #2
 8010e3c:	4313      	orrs	r3, r2
 8010e3e:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8010e40:	2000      	movs	r0, #0
 8010e42:	e004      	b.n	8010e4e <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8010e44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010e46:	2210      	movs	r2, #16
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8010e4c:	2001      	movs	r0, #1
}
 8010e4e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8010e50:	2001      	movs	r0, #1
 8010e52:	e7fc      	b.n	8010e4e <HAL_ADC_Init+0x13e>
 8010e54:	fffffefd 	.word	0xfffffefd
 8010e58:	fffe0219 	.word	0xfffe0219
 8010e5c:	833fffe7 	.word	0x833fffe7

08010e60 <HAL_ADC_Start>:
{
 8010e60:	b510      	push	{r4, lr}
 8010e62:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010e64:	6803      	ldr	r3, [r0, #0]
 8010e66:	689b      	ldr	r3, [r3, #8]
 8010e68:	075b      	lsls	r3, r3, #29
 8010e6a:	d423      	bmi.n	8010eb4 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 8010e6c:	2340      	movs	r3, #64	; 0x40
 8010e6e:	5cc3      	ldrb	r3, [r0, r3]
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	d021      	beq.n	8010eb8 <HAL_ADC_Start+0x58>
 8010e74:	2340      	movs	r3, #64	; 0x40
 8010e76:	2201      	movs	r2, #1
 8010e78:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8010e7a:	69c3      	ldr	r3, [r0, #28]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d114      	bne.n	8010eaa <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 8010e80:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010e82:	4a0e      	ldr	r2, [pc, #56]	; (8010ebc <HAL_ADC_Start+0x5c>)
 8010e84:	401a      	ands	r2, r3
 8010e86:	2380      	movs	r3, #128	; 0x80
 8010e88:	005b      	lsls	r3, r3, #1
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8010e8e:	2300      	movs	r3, #0
 8010e90:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8010e92:	2240      	movs	r2, #64	; 0x40
 8010e94:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8010e96:	6823      	ldr	r3, [r4, #0]
 8010e98:	3a24      	subs	r2, #36	; 0x24
 8010e9a:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8010e9c:	6822      	ldr	r2, [r4, #0]
 8010e9e:	6893      	ldr	r3, [r2, #8]
 8010ea0:	2104      	movs	r1, #4
 8010ea2:	430b      	orrs	r3, r1
 8010ea4:	6093      	str	r3, [r2, #8]
 8010ea6:	2000      	movs	r0, #0
}
 8010ea8:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8010eaa:	f7ff fedd 	bl	8010c68 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8010eae:	2800      	cmp	r0, #0
 8010eb0:	d0e6      	beq.n	8010e80 <HAL_ADC_Start+0x20>
 8010eb2:	e7f9      	b.n	8010ea8 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 8010eb4:	2002      	movs	r0, #2
 8010eb6:	e7f7      	b.n	8010ea8 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 8010eb8:	2002      	movs	r0, #2
 8010eba:	e7f5      	b.n	8010ea8 <HAL_ADC_Start+0x48>
 8010ebc:	fffff0fe 	.word	0xfffff0fe

08010ec0 <HAL_ADC_Stop>:
{ 
 8010ec0:	b510      	push	{r4, lr}
 8010ec2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8010ec4:	2340      	movs	r3, #64	; 0x40
 8010ec6:	5cc3      	ldrb	r3, [r0, r3]
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d017      	beq.n	8010efc <HAL_ADC_Stop+0x3c>
 8010ecc:	2340      	movs	r3, #64	; 0x40
 8010ece:	2201      	movs	r2, #1
 8010ed0:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8010ed2:	f7ff fe5f 	bl	8010b94 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8010ed6:	2800      	cmp	r0, #0
 8010ed8:	d003      	beq.n	8010ee2 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8010eda:	2340      	movs	r3, #64	; 0x40
 8010edc:	2200      	movs	r2, #0
 8010ede:	54e2      	strb	r2, [r4, r3]
}
 8010ee0:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8010ee2:	0020      	movs	r0, r4
 8010ee4:	f7ff fe80 	bl	8010be8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8010ee8:	2800      	cmp	r0, #0
 8010eea:	d1f6      	bne.n	8010eda <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8010eec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8010eee:	4a04      	ldr	r2, [pc, #16]	; (8010f00 <HAL_ADC_Stop+0x40>)
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	3204      	adds	r2, #4
 8010ef4:	32ff      	adds	r2, #255	; 0xff
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	6463      	str	r3, [r4, #68]	; 0x44
 8010efa:	e7ee      	b.n	8010eda <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 8010efc:	2002      	movs	r0, #2
 8010efe:	e7ef      	b.n	8010ee0 <HAL_ADC_Stop+0x20>
 8010f00:	fffffefe 	.word	0xfffffefe

08010f04 <HAL_ADC_PollForConversion>:
{
 8010f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f06:	0006      	movs	r6, r0
 8010f08:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8010f0a:	6943      	ldr	r3, [r0, #20]
 8010f0c:	2b08      	cmp	r3, #8
 8010f0e:	d026      	beq.n	8010f5e <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010f10:	6803      	ldr	r3, [r0, #0]
 8010f12:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8010f14:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8010f16:	07db      	lsls	r3, r3, #31
 8010f18:	d418      	bmi.n	8010f4c <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 8010f1a:	f7ff fe19 	bl	8010b50 <HAL_GetTick>
 8010f1e:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8010f20:	6832      	ldr	r2, [r6, #0]
 8010f22:	6813      	ldr	r3, [r2, #0]
 8010f24:	421d      	tst	r5, r3
 8010f26:	d11c      	bne.n	8010f62 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8010f28:	1c63      	adds	r3, r4, #1
 8010f2a:	d0fa      	beq.n	8010f22 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8010f2c:	2c00      	cmp	r4, #0
 8010f2e:	d004      	beq.n	8010f3a <HAL_ADC_PollForConversion+0x36>
 8010f30:	f7ff fe0e 	bl	8010b50 <HAL_GetTick>
 8010f34:	1bc0      	subs	r0, r0, r7
 8010f36:	42a0      	cmp	r0, r4
 8010f38:	d9f2      	bls.n	8010f20 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8010f3a:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010f3c:	2204      	movs	r2, #4
 8010f3e:	4313      	orrs	r3, r2
 8010f40:	6473      	str	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8010f42:	2340      	movs	r3, #64	; 0x40
 8010f44:	2200      	movs	r2, #0
 8010f46:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8010f48:	2003      	movs	r0, #3
 8010f4a:	e007      	b.n	8010f5c <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010f4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8010f4e:	2220      	movs	r2, #32
 8010f50:	4313      	orrs	r3, r2
 8010f52:	6443      	str	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8010f54:	2340      	movs	r3, #64	; 0x40
 8010f56:	2200      	movs	r2, #0
 8010f58:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 8010f5a:	2001      	movs	r0, #1
}
 8010f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8010f5e:	2508      	movs	r5, #8
 8010f60:	e7db      	b.n	8010f1a <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010f62:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8010f64:	2380      	movs	r3, #128	; 0x80
 8010f66:	009b      	lsls	r3, r3, #2
 8010f68:	430b      	orrs	r3, r1
 8010f6a:	6473      	str	r3, [r6, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8010f6c:	68d1      	ldr	r1, [r2, #12]
 8010f6e:	23c0      	movs	r3, #192	; 0xc0
 8010f70:	011b      	lsls	r3, r3, #4
 8010f72:	4219      	tst	r1, r3
 8010f74:	d113      	bne.n	8010f9e <HAL_ADC_PollForConversion+0x9a>
 8010f76:	6a33      	ldr	r3, [r6, #32]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d110      	bne.n	8010f9e <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8010f7c:	6813      	ldr	r3, [r2, #0]
 8010f7e:	071b      	lsls	r3, r3, #28
 8010f80:	d50d      	bpl.n	8010f9e <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010f82:	6893      	ldr	r3, [r2, #8]
 8010f84:	075b      	lsls	r3, r3, #29
 8010f86:	d412      	bmi.n	8010fae <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8010f88:	6853      	ldr	r3, [r2, #4]
 8010f8a:	210c      	movs	r1, #12
 8010f8c:	438b      	bics	r3, r1
 8010f8e:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8010f90:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010f92:	4a0b      	ldr	r2, [pc, #44]	; (8010fc0 <HAL_ADC_PollForConversion+0xbc>)
 8010f94:	4013      	ands	r3, r2
 8010f96:	3204      	adds	r2, #4
 8010f98:	32ff      	adds	r2, #255	; 0xff
 8010f9a:	4313      	orrs	r3, r2
 8010f9c:	6473      	str	r3, [r6, #68]	; 0x44
  return HAL_OK;
 8010f9e:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8010fa0:	69b3      	ldr	r3, [r6, #24]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d1da      	bne.n	8010f5c <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8010fa6:	6833      	ldr	r3, [r6, #0]
 8010fa8:	220c      	movs	r2, #12
 8010faa:	601a      	str	r2, [r3, #0]
 8010fac:	e7d6      	b.n	8010f5c <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8010fae:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010fb0:	2220      	movs	r2, #32
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	6473      	str	r3, [r6, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010fb6:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8010fb8:	3a1f      	subs	r2, #31
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	64b3      	str	r3, [r6, #72]	; 0x48
 8010fbe:	e7ee      	b.n	8010f9e <HAL_ADC_PollForConversion+0x9a>
 8010fc0:	fffffefe 	.word	0xfffffefe

08010fc4 <HAL_ADC_GetValue>:
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8010fc4:	6803      	ldr	r3, [r0, #0]
 8010fc6:	2208      	movs	r2, #8
 8010fc8:	601a      	str	r2, [r3, #0]
  return hadc->Instance->DR;
 8010fca:	6803      	ldr	r3, [r0, #0]
 8010fcc:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8010fce:	4770      	bx	lr

08010fd0 <HAL_ADC_ConfigChannel>:
{
 8010fd0:	b530      	push	{r4, r5, lr}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0;
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8010fda:	3340      	adds	r3, #64	; 0x40
 8010fdc:	5cc3      	ldrb	r3, [r0, r3]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d100      	bne.n	8010fe4 <HAL_ADC_ConfigChannel+0x14>
 8010fe2:	e088      	b.n	80110f6 <HAL_ADC_ConfigChannel+0x126>
 8010fe4:	2340      	movs	r3, #64	; 0x40
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8010fea:	6803      	ldr	r3, [r0, #0]
 8010fec:	689a      	ldr	r2, [r3, #8]
 8010fee:	0752      	lsls	r2, r2, #29
 8010ff0:	d475      	bmi.n	80110de <HAL_ADC_ConfigChannel+0x10e>
    if (sConfig->Rank != ADC_RANK_NONE)
 8010ff2:	4a42      	ldr	r2, [pc, #264]	; (80110fc <HAL_ADC_ConfigChannel+0x12c>)
 8010ff4:	6848      	ldr	r0, [r1, #4]
 8010ff6:	4290      	cmp	r0, r2
 8010ff8:	d050      	beq.n	801109c <HAL_ADC_ConfigChannel+0xcc>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8010ffa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	680d      	ldr	r5, [r1, #0]
 8011000:	40aa      	lsls	r2, r5
 8011002:	4302      	orrs	r2, r0
 8011004:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8011006:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011008:	2280      	movs	r2, #128	; 0x80
 801100a:	0552      	lsls	r2, r2, #21
 801100c:	4293      	cmp	r3, r2
 801100e:	d013      	beq.n	8011038 <HAL_ADC_ConfigChannel+0x68>
 8011010:	3b01      	subs	r3, #1
 8011012:	2b06      	cmp	r3, #6
 8011014:	d910      	bls.n	8011038 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8011016:	6822      	ldr	r2, [r4, #0]
 8011018:	6950      	ldr	r0, [r2, #20]
 801101a:	2307      	movs	r3, #7
 801101c:	4003      	ands	r3, r0
 801101e:	6888      	ldr	r0, [r1, #8]
 8011020:	4298      	cmp	r0, r3
 8011022:	d009      	beq.n	8011038 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8011024:	6950      	ldr	r0, [r2, #20]
 8011026:	2307      	movs	r3, #7
 8011028:	4398      	bics	r0, r3
 801102a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 801102c:	6822      	ldr	r2, [r4, #0]
 801102e:	6950      	ldr	r0, [r2, #20]
 8011030:	688d      	ldr	r5, [r1, #8]
 8011032:	402b      	ands	r3, r5
 8011034:	4303      	orrs	r3, r0
 8011036:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011038:	680b      	ldr	r3, [r1, #0]
 801103a:	001a      	movs	r2, r3
 801103c:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801103e:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8011040:	2a02      	cmp	r2, #2
 8011042:	d851      	bhi.n	80110e8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011044:	4a2e      	ldr	r2, [pc, #184]	; (8011100 <HAL_ADC_ConfigChannel+0x130>)
 8011046:	6810      	ldr	r0, [r2, #0]
 8011048:	2b10      	cmp	r3, #16
 801104a:	d024      	beq.n	8011096 <HAL_ADC_ConfigChannel+0xc6>
 801104c:	3b11      	subs	r3, #17
 801104e:	425a      	negs	r2, r3
 8011050:	415a      	adcs	r2, r3
 8011052:	4253      	negs	r3, r2
 8011054:	4a2b      	ldr	r2, [pc, #172]	; (8011104 <HAL_ADC_ConfigChannel+0x134>)
 8011056:	4013      	ands	r3, r2
 8011058:	2280      	movs	r2, #128	; 0x80
 801105a:	0452      	lsls	r2, r2, #17
 801105c:	4694      	mov	ip, r2
 801105e:	4463      	add	r3, ip
 8011060:	4303      	orrs	r3, r0
 8011062:	4a27      	ldr	r2, [pc, #156]	; (8011100 <HAL_ADC_ConfigChannel+0x130>)
 8011064:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8011066:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011068:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801106a:	2b10      	cmp	r3, #16
 801106c:	d13c      	bne.n	80110e8 <HAL_ADC_ConfigChannel+0x118>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 801106e:	4b26      	ldr	r3, [pc, #152]	; (8011108 <HAL_ADC_ConfigChannel+0x138>)
 8011070:	6818      	ldr	r0, [r3, #0]
 8011072:	4926      	ldr	r1, [pc, #152]	; (801110c <HAL_ADC_ConfigChannel+0x13c>)
 8011074:	f7ef f86c 	bl	8000150 <__udivsi3>
 8011078:	0083      	lsls	r3, r0, #2
 801107a:	1818      	adds	r0, r3, r0
 801107c:	0040      	lsls	r0, r0, #1
 801107e:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0)
 8011080:	9b01      	ldr	r3, [sp, #4]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d035      	beq.n	80110f2 <HAL_ADC_ConfigChannel+0x122>
            wait_loop_index--;
 8011086:	9b01      	ldr	r3, [sp, #4]
 8011088:	3b01      	subs	r3, #1
 801108a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 801108c:	9b01      	ldr	r3, [sp, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d1f9      	bne.n	8011086 <HAL_ADC_ConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011092:	2000      	movs	r0, #0
 8011094:	e028      	b.n	80110e8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8011096:	2380      	movs	r3, #128	; 0x80
 8011098:	041b      	lsls	r3, r3, #16
 801109a:	e7e1      	b.n	8011060 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 801109c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801109e:	2001      	movs	r0, #1
 80110a0:	680d      	ldr	r5, [r1, #0]
 80110a2:	40a8      	lsls	r0, r5
 80110a4:	4382      	bics	r2, r0
 80110a6:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80110a8:	680b      	ldr	r3, [r1, #0]
 80110aa:	001a      	movs	r2, r3
 80110ac:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110ae:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80110b0:	2a02      	cmp	r2, #2
 80110b2:	d819      	bhi.n	80110e8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80110b4:	4a12      	ldr	r2, [pc, #72]	; (8011100 <HAL_ADC_ConfigChannel+0x130>)
 80110b6:	6811      	ldr	r1, [r2, #0]
 80110b8:	2b10      	cmp	r3, #16
 80110ba:	d00e      	beq.n	80110da <HAL_ADC_ConfigChannel+0x10a>
 80110bc:	3b11      	subs	r3, #17
 80110be:	425a      	negs	r2, r3
 80110c0:	415a      	adcs	r2, r3
 80110c2:	4252      	negs	r2, r2
 80110c4:	23c0      	movs	r3, #192	; 0xc0
 80110c6:	041b      	lsls	r3, r3, #16
 80110c8:	4013      	ands	r3, r2
 80110ca:	4a11      	ldr	r2, [pc, #68]	; (8011110 <HAL_ADC_ConfigChannel+0x140>)
 80110cc:	4694      	mov	ip, r2
 80110ce:	4463      	add	r3, ip
 80110d0:	400b      	ands	r3, r1
 80110d2:	4a0b      	ldr	r2, [pc, #44]	; (8011100 <HAL_ADC_ConfigChannel+0x130>)
 80110d4:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110d6:	2000      	movs	r0, #0
 80110d8:	e006      	b.n	80110e8 <HAL_ADC_ConfigChannel+0x118>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80110da:	4b0e      	ldr	r3, [pc, #56]	; (8011114 <HAL_ADC_ConfigChannel+0x144>)
 80110dc:	e7f8      	b.n	80110d0 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80110de:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80110e0:	2220      	movs	r2, #32
 80110e2:	4313      	orrs	r3, r2
 80110e4:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80110e6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80110e8:	2340      	movs	r3, #64	; 0x40
 80110ea:	2200      	movs	r2, #0
 80110ec:	54e2      	strb	r2, [r4, r3]
}
 80110ee:	b003      	add	sp, #12
 80110f0:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80110f2:	2000      	movs	r0, #0
 80110f4:	e7f8      	b.n	80110e8 <HAL_ADC_ConfigChannel+0x118>
  __HAL_LOCK(hadc);
 80110f6:	2002      	movs	r0, #2
 80110f8:	e7f9      	b.n	80110ee <HAL_ADC_ConfigChannel+0x11e>
 80110fa:	46c0      	nop			; (mov r8, r8)
 80110fc:	00001001 	.word	0x00001001
 8011100:	40012708 	.word	0x40012708
 8011104:	ff400000 	.word	0xff400000
 8011108:	20000100 	.word	0x20000100
 801110c:	000f4240 	.word	0x000f4240
 8011110:	feffffff 	.word	0xfeffffff
 8011114:	ff7fffff 	.word	0xff7fffff

08011118 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8011118:	b570      	push	{r4, r5, r6, lr}
 801111a:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801111c:	2340      	movs	r3, #64	; 0x40
 801111e:	5cc3      	ldrb	r3, [r0, r3]
 8011120:	2b01      	cmp	r3, #1
 8011122:	d042      	beq.n	80111aa <HAL_ADCEx_Calibration_Start+0x92>
 8011124:	2340      	movs	r3, #64	; 0x40
 8011126:	2201      	movs	r2, #1
 8011128:	54c2      	strb	r2, [r0, r3]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 801112a:	6802      	ldr	r2, [r0, #0]
 801112c:	6891      	ldr	r1, [r2, #8]
 801112e:	3b3d      	subs	r3, #61	; 0x3d
 8011130:	400b      	ands	r3, r1
 8011132:	2b01      	cmp	r3, #1
 8011134:	d105      	bne.n	8011142 <HAL_ADCEx_Calibration_Start+0x2a>
 8011136:	6813      	ldr	r3, [r2, #0]
 8011138:	07db      	lsls	r3, r3, #31
 801113a:	d42d      	bmi.n	8011198 <HAL_ADCEx_Calibration_Start+0x80>
 801113c:	68d3      	ldr	r3, [r2, #12]
 801113e:	041b      	lsls	r3, r3, #16
 8011140:	d42a      	bmi.n	8011198 <HAL_ADCEx_Calibration_Start+0x80>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8011142:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011144:	491a      	ldr	r1, [pc, #104]	; (80111b0 <HAL_ADCEx_Calibration_Start+0x98>)
 8011146:	400b      	ands	r3, r1
 8011148:	3106      	adds	r1, #6
 801114a:	31ff      	adds	r1, #255	; 0xff
 801114c:	430b      	orrs	r3, r1
 801114e:	6463      	str	r3, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8011150:	6891      	ldr	r1, [r2, #8]
 8011152:	2380      	movs	r3, #128	; 0x80
 8011154:	061b      	lsls	r3, r3, #24
 8011156:	430b      	orrs	r3, r1
 8011158:	6093      	str	r3, [r2, #8]

    tickstart = HAL_GetTick();  
 801115a:	f7ff fcf9 	bl	8010b50 <HAL_GetTick>
 801115e:	0005      	movs	r5, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8011160:	6823      	ldr	r3, [r4, #0]
 8011162:	689b      	ldr	r3, [r3, #8]
 8011164:	2b00      	cmp	r3, #0
 8011166:	da0f      	bge.n	8011188 <HAL_ADCEx_Calibration_Start+0x70>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8011168:	f7ff fcf2 	bl	8010b50 <HAL_GetTick>
 801116c:	1b40      	subs	r0, r0, r5
 801116e:	2802      	cmp	r0, #2
 8011170:	d9f6      	bls.n	8011160 <HAL_ADCEx_Calibration_Start+0x48>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8011172:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011174:	2212      	movs	r2, #18
 8011176:	4393      	bics	r3, r2
 8011178:	3a02      	subs	r2, #2
 801117a:	4313      	orrs	r3, r2
 801117c:	6463      	str	r3, [r4, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801117e:	2340      	movs	r3, #64	; 0x40
 8011180:	2200      	movs	r2, #0
 8011182:	54e2      	strb	r2, [r4, r3]
        
        return HAL_ERROR;
 8011184:	2001      	movs	r0, #1
 8011186:	e00f      	b.n	80111a8 <HAL_ADCEx_Calibration_Start+0x90>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8011188:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801118a:	2203      	movs	r2, #3
 801118c:	4393      	bics	r3, r2
 801118e:	3a02      	subs	r2, #2
 8011190:	4313      	orrs	r3, r2
 8011192:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8011194:	2000      	movs	r0, #0
 8011196:	e004      	b.n	80111a2 <HAL_ADCEx_Calibration_Start+0x8a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8011198:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801119a:	2220      	movs	r2, #32
 801119c:	4313      	orrs	r3, r2
 801119e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 80111a0:	2001      	movs	r0, #1
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80111a2:	2340      	movs	r3, #64	; 0x40
 80111a4:	2200      	movs	r2, #0
 80111a6:	54e2      	strb	r2, [r4, r3]
  
  /* Return function status */
  return tmp_hal_status;
}
 80111a8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 80111aa:	2002      	movs	r0, #2
 80111ac:	e7fc      	b.n	80111a8 <HAL_ADCEx_Calibration_Start+0x90>
 80111ae:	46c0      	nop			; (mov r8, r8)
 80111b0:	fffffefd 	.word	0xfffffefd

080111b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80111b4:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 80111b6:	2800      	cmp	r0, #0
 80111b8:	db14      	blt.n	80111e4 <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111ba:	0883      	lsrs	r3, r0, #2
 80111bc:	009b      	lsls	r3, r3, #2
 80111be:	4a15      	ldr	r2, [pc, #84]	; (8011214 <HAL_NVIC_SetPriority+0x60>)
 80111c0:	4694      	mov	ip, r2
 80111c2:	4463      	add	r3, ip
 80111c4:	26c0      	movs	r6, #192	; 0xc0
 80111c6:	00b6      	lsls	r6, r6, #2
 80111c8:	599d      	ldr	r5, [r3, r6]
 80111ca:	2403      	movs	r4, #3
 80111cc:	4020      	ands	r0, r4
 80111ce:	00c0      	lsls	r0, r0, #3
 80111d0:	22ff      	movs	r2, #255	; 0xff
 80111d2:	0014      	movs	r4, r2
 80111d4:	4084      	lsls	r4, r0
 80111d6:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80111d8:	0189      	lsls	r1, r1, #6
 80111da:	400a      	ands	r2, r1
 80111dc:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111de:	432a      	orrs	r2, r5
 80111e0:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80111e2:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80111e4:	b2c0      	uxtb	r0, r0
 80111e6:	230f      	movs	r3, #15
 80111e8:	4003      	ands	r3, r0
 80111ea:	3b08      	subs	r3, #8
 80111ec:	089b      	lsrs	r3, r3, #2
 80111ee:	009b      	lsls	r3, r3, #2
 80111f0:	4a09      	ldr	r2, [pc, #36]	; (8011218 <HAL_NVIC_SetPriority+0x64>)
 80111f2:	4694      	mov	ip, r2
 80111f4:	4463      	add	r3, ip
 80111f6:	69dd      	ldr	r5, [r3, #28]
 80111f8:	2203      	movs	r2, #3
 80111fa:	4010      	ands	r0, r2
 80111fc:	00c0      	lsls	r0, r0, #3
 80111fe:	24ff      	movs	r4, #255	; 0xff
 8011200:	0022      	movs	r2, r4
 8011202:	4082      	lsls	r2, r0
 8011204:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8011206:	0189      	lsls	r1, r1, #6
 8011208:	400c      	ands	r4, r1
 801120a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 801120c:	432c      	orrs	r4, r5
 801120e:	61dc      	str	r4, [r3, #28]
 8011210:	e7e7      	b.n	80111e2 <HAL_NVIC_SetPriority+0x2e>
 8011212:	46c0      	nop			; (mov r8, r8)
 8011214:	e000e100 	.word	0xe000e100
 8011218:	e000ed00 	.word	0xe000ed00

0801121c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 801121c:	231f      	movs	r3, #31
 801121e:	4018      	ands	r0, r3
 8011220:	3b1e      	subs	r3, #30
 8011222:	4083      	lsls	r3, r0
 8011224:	4a01      	ldr	r2, [pc, #4]	; (801122c <HAL_NVIC_EnableIRQ+0x10>)
 8011226:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8011228:	4770      	bx	lr
 801122a:	46c0      	nop			; (mov r8, r8)
 801122c:	e000e100 	.word	0xe000e100

08011230 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8011230:	231f      	movs	r3, #31
 8011232:	4018      	ands	r0, r3
 8011234:	3b1e      	subs	r3, #30
 8011236:	4083      	lsls	r3, r0
 8011238:	4901      	ldr	r1, [pc, #4]	; (8011240 <HAL_NVIC_DisableIRQ+0x10>)
 801123a:	2280      	movs	r2, #128	; 0x80
 801123c:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 801123e:	4770      	bx	lr
 8011240:	e000e100 	.word	0xe000e100

08011244 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8011244:	1e43      	subs	r3, r0, #1
 8011246:	4a0a      	ldr	r2, [pc, #40]	; (8011270 <HAL_SYSTICK_Config+0x2c>)
 8011248:	2001      	movs	r0, #1
 801124a:	4293      	cmp	r3, r2
 801124c:	d80e      	bhi.n	801126c <HAL_SYSTICK_Config+0x28>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801124e:	4a09      	ldr	r2, [pc, #36]	; (8011274 <HAL_SYSTICK_Config+0x30>)
 8011250:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8011252:	4809      	ldr	r0, [pc, #36]	; (8011278 <HAL_SYSTICK_Config+0x34>)
 8011254:	6a03      	ldr	r3, [r0, #32]
 8011256:	021b      	lsls	r3, r3, #8
 8011258:	0a1b      	lsrs	r3, r3, #8
 801125a:	21c0      	movs	r1, #192	; 0xc0
 801125c:	0609      	lsls	r1, r1, #24
 801125e:	430b      	orrs	r3, r1
 8011260:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8011262:	2300      	movs	r3, #0
 8011264:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8011266:	3307      	adds	r3, #7
 8011268:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801126a:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 801126c:	4770      	bx	lr
 801126e:	46c0      	nop			; (mov r8, r8)
 8011270:	00ffffff 	.word	0x00ffffff
 8011274:	e000e010 	.word	0xe000e010
 8011278:	e000ed00 	.word	0xe000ed00

0801127c <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 801127c:	2804      	cmp	r0, #4
 801127e:	d005      	beq.n	801128c <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8011280:	4a05      	ldr	r2, [pc, #20]	; (8011298 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8011282:	6813      	ldr	r3, [r2, #0]
 8011284:	2104      	movs	r1, #4
 8011286:	438b      	bics	r3, r1
 8011288:	6013      	str	r3, [r2, #0]
  }
}
 801128a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 801128c:	4a02      	ldr	r2, [pc, #8]	; (8011298 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 801128e:	6813      	ldr	r3, [r2, #0]
 8011290:	2104      	movs	r1, #4
 8011292:	430b      	orrs	r3, r1
 8011294:	6013      	str	r3, [r2, #0]
 8011296:	e7f8      	b.n	801128a <HAL_SYSTICK_CLKSourceConfig+0xe>
 8011298:	e000e010 	.word	0xe000e010

0801129c <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 801129c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801129e:	000e      	movs	r6, r1
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 80112a0:	0891      	lsrs	r1, r2, #2
 80112a2:	d013      	beq.n	80112cc <CRC_Handle_8+0x30>
 80112a4:	0034      	movs	r4, r6
 80112a6:	2303      	movs	r3, #3
 80112a8:	0017      	movs	r7, r2
 80112aa:	439f      	bics	r7, r3
 80112ac:	19bf      	adds	r7, r7, r6
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 80112ae:	7823      	ldrb	r3, [r4, #0]
 80112b0:	061b      	lsls	r3, r3, #24
 80112b2:	7865      	ldrb	r5, [r4, #1]
 80112b4:	042d      	lsls	r5, r5, #16
 80112b6:	432b      	orrs	r3, r5
 80112b8:	78e5      	ldrb	r5, [r4, #3]
 80112ba:	432b      	orrs	r3, r5
 80112bc:	78a5      	ldrb	r5, [r4, #2]
 80112be:	022d      	lsls	r5, r5, #8
 80112c0:	432b      	orrs	r3, r5
 80112c2:	6805      	ldr	r5, [r0, #0]
 80112c4:	602b      	str	r3, [r5, #0]
 80112c6:	3404      	adds	r4, #4
   for(i = 0; i < (BufferLength/4); i++)
 80112c8:	42bc      	cmp	r4, r7
 80112ca:	d1f0      	bne.n	80112ae <CRC_Handle_8+0x12>
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 80112cc:	2303      	movs	r3, #3
 80112ce:	401a      	ands	r2, r3
 80112d0:	d01e      	beq.n	8011310 <CRC_Handle_8+0x74>
   {
     if  (BufferLength%4 == 1)
 80112d2:	2a01      	cmp	r2, #1
 80112d4:	d00a      	beq.n	80112ec <CRC_Handle_8+0x50>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 80112d6:	2a02      	cmp	r2, #2
 80112d8:	d10d      	bne.n	80112f6 <CRC_Handle_8+0x5a>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80112da:	0089      	lsls	r1, r1, #2
 80112dc:	5c72      	ldrb	r2, [r6, r1]
 80112de:	0212      	lsls	r2, r2, #8
 80112e0:	1871      	adds	r1, r6, r1
 80112e2:	784b      	ldrb	r3, [r1, #1]
 80112e4:	4313      	orrs	r3, r2
 80112e6:	6802      	ldr	r2, [r0, #0]
 80112e8:	8013      	strh	r3, [r2, #0]
 80112ea:	e011      	b.n	8011310 <CRC_Handle_8+0x74>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 80112ec:	0089      	lsls	r1, r1, #2
 80112ee:	5d8b      	ldrb	r3, [r1, r6]
 80112f0:	6802      	ldr	r2, [r0, #0]
 80112f2:	7013      	strb	r3, [r2, #0]
 80112f4:	e00c      	b.n	8011310 <CRC_Handle_8+0x74>
     }
     if  (BufferLength%4 == 3)
 80112f6:	2a03      	cmp	r2, #3
 80112f8:	d10a      	bne.n	8011310 <CRC_Handle_8+0x74>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 80112fa:	0089      	lsls	r1, r1, #2
 80112fc:	5c72      	ldrb	r2, [r6, r1]
 80112fe:	0212      	lsls	r2, r2, #8
 8011300:	1871      	adds	r1, r6, r1
 8011302:	784b      	ldrb	r3, [r1, #1]
 8011304:	4313      	orrs	r3, r2
 8011306:	6802      	ldr	r2, [r0, #0]
 8011308:	8013      	strh	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 801130a:	788b      	ldrb	r3, [r1, #2]
 801130c:	6802      	ldr	r2, [r0, #0]
 801130e:	7013      	strb	r3, [r2, #0]
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8011310:	6803      	ldr	r3, [r0, #0]
 8011312:	6818      	ldr	r0, [r3, #0]
}
 8011314:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011316 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8011316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011318:	0015      	movs	r5, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 801131a:	0852      	lsrs	r2, r2, #1
 801131c:	d00b      	beq.n	8011336 <CRC_Handle_16+0x20>
 801131e:	000c      	movs	r4, r1
 8011320:	0097      	lsls	r7, r2, #2
 8011322:	187f      	adds	r7, r7, r1
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8011324:	8823      	ldrh	r3, [r4, #0]
 8011326:	041b      	lsls	r3, r3, #16
 8011328:	8866      	ldrh	r6, [r4, #2]
 801132a:	4333      	orrs	r3, r6
 801132c:	6806      	ldr	r6, [r0, #0]
 801132e:	6033      	str	r3, [r6, #0]
 8011330:	3404      	adds	r4, #4
  for(i = 0; i < (BufferLength/2); i++)
 8011332:	42bc      	cmp	r4, r7
 8011334:	d1f6      	bne.n	8011324 <CRC_Handle_16+0xe>
  }
  if ((BufferLength%2) != 0)
 8011336:	07eb      	lsls	r3, r5, #31
 8011338:	d503      	bpl.n	8011342 <CRC_Handle_16+0x2c>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 801133a:	0092      	lsls	r2, r2, #2
 801133c:	5a53      	ldrh	r3, [r2, r1]
 801133e:	6802      	ldr	r2, [r0, #0]
 8011340:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8011342:	6803      	ldr	r3, [r0, #0]
 8011344:	6818      	ldr	r0, [r3, #0]
}
 8011346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011348 <HAL_CRC_Init>:
{
 8011348:	b510      	push	{r4, lr}
 801134a:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 801134c:	d029      	beq.n	80113a2 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 801134e:	7f43      	ldrb	r3, [r0, #29]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d01e      	beq.n	8011392 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8011354:	2302      	movs	r3, #2
 8011356:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8011358:	0020      	movs	r0, r4
 801135a:	f000 f8b1 	bl	80114c0 <HAL_CRCEx_Init>
 801135e:	2800      	cmp	r0, #0
 8011360:	d121      	bne.n	80113a6 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8011362:	7963      	ldrb	r3, [r4, #5]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d118      	bne.n	801139a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8011368:	6823      	ldr	r3, [r4, #0]
 801136a:	2201      	movs	r2, #1
 801136c:	4252      	negs	r2, r2
 801136e:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8011370:	6822      	ldr	r2, [r4, #0]
 8011372:	6893      	ldr	r3, [r2, #8]
 8011374:	2160      	movs	r1, #96	; 0x60
 8011376:	438b      	bics	r3, r1
 8011378:	6961      	ldr	r1, [r4, #20]
 801137a:	430b      	orrs	r3, r1
 801137c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 801137e:	6822      	ldr	r2, [r4, #0]
 8011380:	6893      	ldr	r3, [r2, #8]
 8011382:	2180      	movs	r1, #128	; 0x80
 8011384:	438b      	bics	r3, r1
 8011386:	69a1      	ldr	r1, [r4, #24]
 8011388:	430b      	orrs	r3, r1
 801138a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 801138c:	2301      	movs	r3, #1
 801138e:	7763      	strb	r3, [r4, #29]
}
 8011390:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8011392:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8011394:	f7fc fbb8 	bl	800db08 <HAL_CRC_MspInit>
 8011398:	e7dc      	b.n	8011354 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 801139a:	6823      	ldr	r3, [r4, #0]
 801139c:	6922      	ldr	r2, [r4, #16]
 801139e:	611a      	str	r2, [r3, #16]
 80113a0:	e7e6      	b.n	8011370 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 80113a2:	2001      	movs	r0, #1
 80113a4:	e7f4      	b.n	8011390 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 80113a6:	2001      	movs	r0, #1
 80113a8:	e7f2      	b.n	8011390 <HAL_CRC_Init+0x48>

080113aa <HAL_CRC_Accumulate>:
{
 80113aa:	b510      	push	{r4, lr}
 80113ac:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 80113ae:	7f03      	ldrb	r3, [r0, #28]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d024      	beq.n	80113fe <HAL_CRC_Accumulate+0x54>
 80113b4:	2301      	movs	r3, #1
 80113b6:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80113b8:	3301      	adds	r3, #1
 80113ba:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 80113bc:	6a03      	ldr	r3, [r0, #32]
 80113be:	2b02      	cmp	r3, #2
 80113c0:	d01a      	beq.n	80113f8 <HAL_CRC_Accumulate+0x4e>
 80113c2:	2b03      	cmp	r3, #3
 80113c4:	d007      	beq.n	80113d6 <HAL_CRC_Accumulate+0x2c>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 80113c6:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d011      	beq.n	80113f0 <HAL_CRC_Accumulate+0x46>
  hcrc->State = HAL_CRC_STATE_READY; 
 80113cc:	2301      	movs	r3, #1
 80113ce:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 80113d0:	2300      	movs	r3, #0
 80113d2:	7723      	strb	r3, [r4, #28]
}
 80113d4:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 80113d6:	2a00      	cmp	r2, #0
 80113d8:	d007      	beq.n	80113ea <HAL_CRC_Accumulate+0x40>
 80113da:	000b      	movs	r3, r1
 80113dc:	0092      	lsls	r2, r2, #2
 80113de:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 80113e0:	6822      	ldr	r2, [r4, #0]
 80113e2:	cb01      	ldmia	r3!, {r0}
 80113e4:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 80113e6:	428b      	cmp	r3, r1
 80113e8:	d1fa      	bne.n	80113e0 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 80113ea:	6823      	ldr	r3, [r4, #0]
 80113ec:	6818      	ldr	r0, [r3, #0]
      break;
 80113ee:	e7ed      	b.n	80113cc <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 80113f0:	0020      	movs	r0, r4
 80113f2:	f7ff ff53 	bl	801129c <CRC_Handle_8>
      break;
 80113f6:	e7e9      	b.n	80113cc <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 80113f8:	f7ff ff8d 	bl	8011316 <CRC_Handle_16>
      break;
 80113fc:	e7e6      	b.n	80113cc <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 80113fe:	2002      	movs	r0, #2
 8011400:	e7e8      	b.n	80113d4 <HAL_CRC_Accumulate+0x2a>

08011402 <HAL_CRC_Calculate>:
{
 8011402:	b570      	push	{r4, r5, r6, lr}
 8011404:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8011406:	7f03      	ldrb	r3, [r0, #28]
 8011408:	2b01      	cmp	r3, #1
 801140a:	d029      	beq.n	8011460 <HAL_CRC_Calculate+0x5e>
 801140c:	2501      	movs	r5, #1
 801140e:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8011410:	2302      	movs	r3, #2
 8011412:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8011414:	6800      	ldr	r0, [r0, #0]
 8011416:	6883      	ldr	r3, [r0, #8]
 8011418:	432b      	orrs	r3, r5
 801141a:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 801141c:	6a23      	ldr	r3, [r4, #32]
 801141e:	2b02      	cmp	r3, #2
 8011420:	d01a      	beq.n	8011458 <HAL_CRC_Calculate+0x56>
 8011422:	2b03      	cmp	r3, #3
 8011424:	d007      	beq.n	8011436 <HAL_CRC_Calculate+0x34>
  uint32_t temp = 0;  /* CRC output (read from hcrc->Instance->DR register) */
 8011426:	2000      	movs	r0, #0
  switch (hcrc->InputDataFormat)
 8011428:	2b01      	cmp	r3, #1
 801142a:	d011      	beq.n	8011450 <HAL_CRC_Calculate+0x4e>
  hcrc->State = HAL_CRC_STATE_READY; 
 801142c:	2301      	movs	r3, #1
 801142e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8011430:	2300      	movs	r3, #0
 8011432:	7723      	strb	r3, [r4, #28]
}
 8011434:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8011436:	2a00      	cmp	r2, #0
 8011438:	d007      	beq.n	801144a <HAL_CRC_Calculate+0x48>
 801143a:	000b      	movs	r3, r1
 801143c:	0092      	lsls	r2, r2, #2
 801143e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8011440:	6820      	ldr	r0, [r4, #0]
 8011442:	cb20      	ldmia	r3!, {r5}
 8011444:	6005      	str	r5, [r0, #0]
      for(index = 0; index < BufferLength; index++)
 8011446:	428b      	cmp	r3, r1
 8011448:	d1fa      	bne.n	8011440 <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 801144a:	6823      	ldr	r3, [r4, #0]
 801144c:	6818      	ldr	r0, [r3, #0]
      break;
 801144e:	e7ed      	b.n	801142c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8011450:	0020      	movs	r0, r4
 8011452:	f7ff ff23 	bl	801129c <CRC_Handle_8>
      break;
 8011456:	e7e9      	b.n	801142c <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8011458:	0020      	movs	r0, r4
 801145a:	f7ff ff5c 	bl	8011316 <CRC_Handle_16>
      break;
 801145e:	e7e5      	b.n	801142c <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8011460:	2002      	movs	r0, #2
 8011462:	e7e7      	b.n	8011434 <HAL_CRC_Calculate+0x32>

08011464 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8011464:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8011466:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8011468:	2501      	movs	r5, #1
 801146a:	002c      	movs	r4, r5
 801146c:	409c      	lsls	r4, r3
 801146e:	4221      	tst	r1, r4
 8011470:	d10b      	bne.n	801148a <HAL_CRCEx_Polynomial_Set+0x26>
 8011472:	3b01      	subs	r3, #1
 8011474:	d2f9      	bcs.n	801146a <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8011476:	2a10      	cmp	r2, #16
 8011478:	d01c      	beq.n	80114b4 <HAL_CRCEx_Polynomial_Set+0x50>
 801147a:	2a18      	cmp	r2, #24
 801147c:	d01e      	beq.n	80114bc <HAL_CRCEx_Polynomial_Set+0x58>
 801147e:	2a08      	cmp	r2, #8
 8011480:	d109      	bne.n	8011496 <HAL_CRCEx_Polynomial_Set+0x32>
      }
      break;
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
      {
        return  HAL_ERROR;
 8011482:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_16B)
 8011484:	2b0f      	cmp	r3, #15
 8011486:	d906      	bls.n	8011496 <HAL_CRCEx_Polynomial_Set+0x32>
 8011488:	e00e      	b.n	80114a8 <HAL_CRCEx_Polynomial_Set+0x44>
  switch (PolyLength)
 801148a:	2a10      	cmp	r2, #16
 801148c:	d012      	beq.n	80114b4 <HAL_CRCEx_Polynomial_Set+0x50>
 801148e:	2a18      	cmp	r2, #24
 8011490:	d00c      	beq.n	80114ac <HAL_CRCEx_Polynomial_Set+0x48>
 8011492:	2a08      	cmp	r2, #8
 8011494:	d0f5      	beq.n	8011482 <HAL_CRCEx_Polynomial_Set+0x1e>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8011496:	6803      	ldr	r3, [r0, #0]
 8011498:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 801149a:	6801      	ldr	r1, [r0, #0]
 801149c:	688b      	ldr	r3, [r1, #8]
 801149e:	2018      	movs	r0, #24
 80114a0:	4383      	bics	r3, r0
 80114a2:	431a      	orrs	r2, r3
 80114a4:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 80114a6:	2400      	movs	r4, #0
}
 80114a8:	0020      	movs	r0, r4
 80114aa:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 80114ac:	2b06      	cmp	r3, #6
 80114ae:	d9f2      	bls.n	8011496 <HAL_CRCEx_Polynomial_Set+0x32>
        return  HAL_ERROR;
 80114b0:	2401      	movs	r4, #1
 80114b2:	e7f9      	b.n	80114a8 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 80114b4:	2401      	movs	r4, #1
      if (msb >= HAL_CRC_LENGTH_8B)
 80114b6:	2b07      	cmp	r3, #7
 80114b8:	d9ed      	bls.n	8011496 <HAL_CRCEx_Polynomial_Set+0x32>
 80114ba:	e7f5      	b.n	80114a8 <HAL_CRCEx_Polynomial_Set+0x44>
        return  HAL_ERROR;
 80114bc:	2401      	movs	r4, #1
 80114be:	e7f3      	b.n	80114a8 <HAL_CRCEx_Polynomial_Set+0x44>

080114c0 <HAL_CRCEx_Init>:
{
 80114c0:	b510      	push	{r4, lr}
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80114c2:	7903      	ldrb	r3, [r0, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d109      	bne.n	80114dc <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 80114c8:	6803      	ldr	r3, [r0, #0]
 80114ca:	4a08      	ldr	r2, [pc, #32]	; (80114ec <HAL_CRCEx_Init+0x2c>)
 80114cc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80114ce:	6802      	ldr	r2, [r0, #0]
 80114d0:	6893      	ldr	r3, [r2, #8]
 80114d2:	2118      	movs	r1, #24
 80114d4:	438b      	bics	r3, r1
 80114d6:	6093      	str	r3, [r2, #8]
   return HAL_OK;
 80114d8:	2000      	movs	r0, #0
}
 80114da:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80114dc:	68c2      	ldr	r2, [r0, #12]
 80114de:	6881      	ldr	r1, [r0, #8]
 80114e0:	f7ff ffc0 	bl	8011464 <HAL_CRCEx_Polynomial_Set>
 80114e4:	1e43      	subs	r3, r0, #1
 80114e6:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 80114e8:	b2c0      	uxtb	r0, r0
 80114ea:	e7f6      	b.n	80114da <HAL_CRCEx_Init+0x1a>
 80114ec:	04c11db7 	.word	0x04c11db7

080114f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80114f0:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80114f2:	2800      	cmp	r0, #0
 80114f4:	d022      	beq.n	801153c <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 80114f6:	2321      	movs	r3, #33	; 0x21
 80114f8:	5cc3      	ldrb	r3, [r0, r3]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d102      	bne.n	8011504 <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80114fe:	3320      	adds	r3, #32
 8011500:	2200      	movs	r2, #0
 8011502:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011504:	2121      	movs	r1, #33	; 0x21
 8011506:	2302      	movs	r3, #2
 8011508:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801150a:	6804      	ldr	r4, [r0, #0]
 801150c:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 801150e:	4a0c      	ldr	r2, [pc, #48]	; (8011540 <HAL_DMA_Init+0x50>)
 8011510:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8011512:	6843      	ldr	r3, [r0, #4]
 8011514:	6885      	ldr	r5, [r0, #8]
 8011516:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011518:	68c5      	ldr	r5, [r0, #12]
 801151a:	432b      	orrs	r3, r5
 801151c:	6905      	ldr	r5, [r0, #16]
 801151e:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011520:	6945      	ldr	r5, [r0, #20]
 8011522:	432b      	orrs	r3, r5
 8011524:	6985      	ldr	r5, [r0, #24]
 8011526:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8011528:	69c5      	ldr	r5, [r0, #28]
 801152a:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 801152c:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 801152e:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011530:	2300      	movs	r3, #0
 8011532:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8011534:	3301      	adds	r3, #1
 8011536:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8011538:	2000      	movs	r0, #0
}  
 801153a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 801153c:	2001      	movs	r0, #1
 801153e:	e7fc      	b.n	801153a <HAL_DMA_Init+0x4a>
 8011540:	ffffc00f 	.word	0xffffc00f

08011544 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011544:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8011546:	2420      	movs	r4, #32
 8011548:	5d04      	ldrb	r4, [r0, r4]
 801154a:	2c01      	cmp	r4, #1
 801154c:	d02d      	beq.n	80115aa <HAL_DMA_Start_IT+0x66>
 801154e:	2601      	movs	r6, #1
 8011550:	2420      	movs	r4, #32
 8011552:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8011554:	3401      	adds	r4, #1
 8011556:	2502      	movs	r5, #2
 8011558:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801155a:	6805      	ldr	r5, [r0, #0]
 801155c:	682c      	ldr	r4, [r5, #0]
 801155e:	43b4      	bics	r4, r6
 8011560:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8011562:	6804      	ldr	r4, [r0, #0]
 8011564:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8011566:	6843      	ldr	r3, [r0, #4]
 8011568:	2b10      	cmp	r3, #16
 801156a:	d019      	beq.n	80115a0 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 801156c:	6803      	ldr	r3, [r0, #0]
 801156e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8011570:	6803      	ldr	r3, [r0, #0]
 8011572:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8011574:	6802      	ldr	r2, [r0, #0]
 8011576:	6813      	ldr	r3, [r2, #0]
 8011578:	2102      	movs	r1, #2
 801157a:	430b      	orrs	r3, r1
 801157c:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 801157e:	6802      	ldr	r2, [r0, #0]
 8011580:	6813      	ldr	r3, [r2, #0]
 8011582:	3102      	adds	r1, #2
 8011584:	430b      	orrs	r3, r1
 8011586:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011588:	6802      	ldr	r2, [r0, #0]
 801158a:	6813      	ldr	r3, [r2, #0]
 801158c:	3104      	adds	r1, #4
 801158e:	430b      	orrs	r3, r1
 8011590:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 8011592:	6802      	ldr	r2, [r0, #0]
 8011594:	6813      	ldr	r3, [r2, #0]
 8011596:	3907      	subs	r1, #7
 8011598:	430b      	orrs	r3, r1
 801159a:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 801159c:	2000      	movs	r0, #0
} 
 801159e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 80115a0:	6803      	ldr	r3, [r0, #0]
 80115a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80115a4:	6803      	ldr	r3, [r0, #0]
 80115a6:	60d9      	str	r1, [r3, #12]
 80115a8:	e7e4      	b.n	8011574 <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 80115aa:	2002      	movs	r0, #2
 80115ac:	e7f7      	b.n	801159e <HAL_DMA_Start_IT+0x5a>

080115ae <HAL_DMA_Abort>:
{
 80115ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115b0:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80115b2:	6802      	ldr	r2, [r0, #0]
 80115b4:	6813      	ldr	r3, [r2, #0]
 80115b6:	2101      	movs	r1, #1
 80115b8:	438b      	bics	r3, r1
 80115ba:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80115bc:	f7ff fac8 	bl	8010b50 <HAL_GetTick>
 80115c0:	0007      	movs	r7, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80115c2:	2501      	movs	r5, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80115c4:	26fa      	movs	r6, #250	; 0xfa
 80115c6:	00b6      	lsls	r6, r6, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 80115c8:	6823      	ldr	r3, [r4, #0]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	421d      	tst	r5, r3
 80115ce:	d00f      	beq.n	80115f0 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80115d0:	f7ff fabe 	bl	8010b50 <HAL_GetTick>
 80115d4:	1bc0      	subs	r0, r0, r7
 80115d6:	42b0      	cmp	r0, r6
 80115d8:	d9f6      	bls.n	80115c8 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80115da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115dc:	2220      	movs	r2, #32
 80115de:	4313      	orrs	r3, r2
 80115e0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80115e2:	2321      	movs	r3, #33	; 0x21
 80115e4:	2103      	movs	r1, #3
 80115e6:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 80115e8:	2300      	movs	r3, #0
 80115ea:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 80115ec:	2003      	movs	r0, #3
 80115ee:	e006      	b.n	80115fe <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 80115f0:	2321      	movs	r3, #33	; 0x21
 80115f2:	2201      	movs	r2, #1
 80115f4:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 80115f6:	3b01      	subs	r3, #1
 80115f8:	2200      	movs	r2, #0
 80115fa:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 80115fc:	2000      	movs	r0, #0
}
 80115fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011600 <HAL_DMA_IRQHandler>:
{        
 8011600:	b510      	push	{r4, lr}
 8011602:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011604:	6803      	ldr	r3, [r0, #0]
 8011606:	4ab4      	ldr	r2, [pc, #720]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d94d      	bls.n	80116a8 <HAL_DMA_IRQHandler+0xa8>
 801160c:	4ab3      	ldr	r2, [pc, #716]	; (80118dc <HAL_DMA_IRQHandler+0x2dc>)
 801160e:	6811      	ldr	r1, [r2, #0]
 8011610:	4ab3      	ldr	r2, [pc, #716]	; (80118e0 <HAL_DMA_IRQHandler+0x2e0>)
 8011612:	4293      	cmp	r3, r2
 8011614:	d026      	beq.n	8011664 <HAL_DMA_IRQHandler+0x64>
 8011616:	4ab3      	ldr	r2, [pc, #716]	; (80118e4 <HAL_DMA_IRQHandler+0x2e4>)
 8011618:	4293      	cmp	r3, r2
 801161a:	d02d      	beq.n	8011678 <HAL_DMA_IRQHandler+0x78>
 801161c:	4ab2      	ldr	r2, [pc, #712]	; (80118e8 <HAL_DMA_IRQHandler+0x2e8>)
 801161e:	4293      	cmp	r3, r2
 8011620:	d02c      	beq.n	801167c <HAL_DMA_IRQHandler+0x7c>
 8011622:	4ab2      	ldr	r2, [pc, #712]	; (80118ec <HAL_DMA_IRQHandler+0x2ec>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d02c      	beq.n	8011682 <HAL_DMA_IRQHandler+0x82>
 8011628:	4ab1      	ldr	r2, [pc, #708]	; (80118f0 <HAL_DMA_IRQHandler+0x2f0>)
 801162a:	4293      	cmp	r3, r2
 801162c:	d02c      	beq.n	8011688 <HAL_DMA_IRQHandler+0x88>
 801162e:	4ab1      	ldr	r2, [pc, #708]	; (80118f4 <HAL_DMA_IRQHandler+0x2f4>)
 8011630:	4293      	cmp	r3, r2
 8011632:	d02c      	beq.n	801168e <HAL_DMA_IRQHandler+0x8e>
 8011634:	4aa8      	ldr	r2, [pc, #672]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 8011636:	4293      	cmp	r3, r2
 8011638:	d02c      	beq.n	8011694 <HAL_DMA_IRQHandler+0x94>
 801163a:	4aaf      	ldr	r2, [pc, #700]	; (80118f8 <HAL_DMA_IRQHandler+0x2f8>)
 801163c:	4293      	cmp	r3, r2
 801163e:	d02c      	beq.n	801169a <HAL_DMA_IRQHandler+0x9a>
 8011640:	4aae      	ldr	r2, [pc, #696]	; (80118fc <HAL_DMA_IRQHandler+0x2fc>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d02b      	beq.n	801169e <HAL_DMA_IRQHandler+0x9e>
 8011646:	4aae      	ldr	r2, [pc, #696]	; (8011900 <HAL_DMA_IRQHandler+0x300>)
 8011648:	4293      	cmp	r3, r2
 801164a:	d02a      	beq.n	80116a2 <HAL_DMA_IRQHandler+0xa2>
 801164c:	4aad      	ldr	r2, [pc, #692]	; (8011904 <HAL_DMA_IRQHandler+0x304>)
 801164e:	189a      	adds	r2, r3, r2
 8011650:	4250      	negs	r0, r2
 8011652:	4142      	adcs	r2, r0
 8011654:	4252      	negs	r2, r2
 8011656:	48ac      	ldr	r0, [pc, #688]	; (8011908 <HAL_DMA_IRQHandler+0x308>)
 8011658:	4002      	ands	r2, r0
 801165a:	2080      	movs	r0, #128	; 0x80
 801165c:	0300      	lsls	r0, r0, #12
 801165e:	4684      	mov	ip, r0
 8011660:	4462      	add	r2, ip
 8011662:	e000      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 8011664:	2208      	movs	r2, #8
 8011666:	420a      	tst	r2, r1
 8011668:	d100      	bne.n	801166c <HAL_DMA_IRQHandler+0x6c>
 801166a:	e0e6      	b.n	801183a <HAL_DMA_IRQHandler+0x23a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 801166c:	681a      	ldr	r2, [r3, #0]
 801166e:	0712      	lsls	r2, r2, #28
 8011670:	d500      	bpl.n	8011674 <HAL_DMA_IRQHandler+0x74>
 8011672:	e097      	b.n	80117a4 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011674:	6823      	ldr	r3, [r4, #0]
 8011676:	e0e0      	b.n	801183a <HAL_DMA_IRQHandler+0x23a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011678:	2280      	movs	r2, #128	; 0x80
 801167a:	e7f4      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 801167c:	2280      	movs	r2, #128	; 0x80
 801167e:	0112      	lsls	r2, r2, #4
 8011680:	e7f1      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 8011682:	2280      	movs	r2, #128	; 0x80
 8011684:	0212      	lsls	r2, r2, #8
 8011686:	e7ee      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 8011688:	2280      	movs	r2, #128	; 0x80
 801168a:	0312      	lsls	r2, r2, #12
 801168c:	e7eb      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 801168e:	2280      	movs	r2, #128	; 0x80
 8011690:	0412      	lsls	r2, r2, #16
 8011692:	e7e8      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 8011694:	2280      	movs	r2, #128	; 0x80
 8011696:	0512      	lsls	r2, r2, #20
 8011698:	e7e5      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 801169a:	2208      	movs	r2, #8
 801169c:	e7e3      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 801169e:	2280      	movs	r2, #128	; 0x80
 80116a0:	e7e1      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 80116a2:	2280      	movs	r2, #128	; 0x80
 80116a4:	0112      	lsls	r2, r2, #4
 80116a6:	e7de      	b.n	8011666 <HAL_DMA_IRQHandler+0x66>
 80116a8:	4a98      	ldr	r2, [pc, #608]	; (801190c <HAL_DMA_IRQHandler+0x30c>)
 80116aa:	6811      	ldr	r1, [r2, #0]
 80116ac:	4a8c      	ldr	r2, [pc, #560]	; (80118e0 <HAL_DMA_IRQHandler+0x2e0>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d026      	beq.n	8011700 <HAL_DMA_IRQHandler+0x100>
 80116b2:	4a8c      	ldr	r2, [pc, #560]	; (80118e4 <HAL_DMA_IRQHandler+0x2e4>)
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d05d      	beq.n	8011774 <HAL_DMA_IRQHandler+0x174>
 80116b8:	4a8b      	ldr	r2, [pc, #556]	; (80118e8 <HAL_DMA_IRQHandler+0x2e8>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d05c      	beq.n	8011778 <HAL_DMA_IRQHandler+0x178>
 80116be:	4a8b      	ldr	r2, [pc, #556]	; (80118ec <HAL_DMA_IRQHandler+0x2ec>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d05c      	beq.n	801177e <HAL_DMA_IRQHandler+0x17e>
 80116c4:	4a8a      	ldr	r2, [pc, #552]	; (80118f0 <HAL_DMA_IRQHandler+0x2f0>)
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d05c      	beq.n	8011784 <HAL_DMA_IRQHandler+0x184>
 80116ca:	4a8a      	ldr	r2, [pc, #552]	; (80118f4 <HAL_DMA_IRQHandler+0x2f4>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d05c      	beq.n	801178a <HAL_DMA_IRQHandler+0x18a>
 80116d0:	4a81      	ldr	r2, [pc, #516]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 80116d2:	4293      	cmp	r3, r2
 80116d4:	d05c      	beq.n	8011790 <HAL_DMA_IRQHandler+0x190>
 80116d6:	4a88      	ldr	r2, [pc, #544]	; (80118f8 <HAL_DMA_IRQHandler+0x2f8>)
 80116d8:	4293      	cmp	r3, r2
 80116da:	d05c      	beq.n	8011796 <HAL_DMA_IRQHandler+0x196>
 80116dc:	4a87      	ldr	r2, [pc, #540]	; (80118fc <HAL_DMA_IRQHandler+0x2fc>)
 80116de:	4293      	cmp	r3, r2
 80116e0:	d05b      	beq.n	801179a <HAL_DMA_IRQHandler+0x19a>
 80116e2:	4a87      	ldr	r2, [pc, #540]	; (8011900 <HAL_DMA_IRQHandler+0x300>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d05a      	beq.n	801179e <HAL_DMA_IRQHandler+0x19e>
 80116e8:	4a86      	ldr	r2, [pc, #536]	; (8011904 <HAL_DMA_IRQHandler+0x304>)
 80116ea:	189a      	adds	r2, r3, r2
 80116ec:	4250      	negs	r0, r2
 80116ee:	4142      	adcs	r2, r0
 80116f0:	4252      	negs	r2, r2
 80116f2:	4885      	ldr	r0, [pc, #532]	; (8011908 <HAL_DMA_IRQHandler+0x308>)
 80116f4:	4002      	ands	r2, r0
 80116f6:	2080      	movs	r0, #128	; 0x80
 80116f8:	0300      	lsls	r0, r0, #12
 80116fa:	4684      	mov	ip, r0
 80116fc:	4462      	add	r2, ip
 80116fe:	e000      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 8011700:	2208      	movs	r2, #8
 8011702:	420a      	tst	r2, r1
 8011704:	d000      	beq.n	8011708 <HAL_DMA_IRQHandler+0x108>
 8011706:	e3ad      	b.n	8011e64 <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011708:	4a80      	ldr	r2, [pc, #512]	; (801190c <HAL_DMA_IRQHandler+0x30c>)
 801170a:	6811      	ldr	r1, [r2, #0]
 801170c:	4a74      	ldr	r2, [pc, #464]	; (80118e0 <HAL_DMA_IRQHandler+0x2e0>)
 801170e:	4293      	cmp	r3, r2
 8011710:	d100      	bne.n	8011714 <HAL_DMA_IRQHandler+0x114>
 8011712:	e198      	b.n	8011a46 <HAL_DMA_IRQHandler+0x446>
 8011714:	4a73      	ldr	r2, [pc, #460]	; (80118e4 <HAL_DMA_IRQHandler+0x2e4>)
 8011716:	4293      	cmp	r3, r2
 8011718:	d100      	bne.n	801171c <HAL_DMA_IRQHandler+0x11c>
 801171a:	e1da      	b.n	8011ad2 <HAL_DMA_IRQHandler+0x4d2>
 801171c:	4a72      	ldr	r2, [pc, #456]	; (80118e8 <HAL_DMA_IRQHandler+0x2e8>)
 801171e:	4293      	cmp	r3, r2
 8011720:	d100      	bne.n	8011724 <HAL_DMA_IRQHandler+0x124>
 8011722:	e1d8      	b.n	8011ad6 <HAL_DMA_IRQHandler+0x4d6>
 8011724:	4a71      	ldr	r2, [pc, #452]	; (80118ec <HAL_DMA_IRQHandler+0x2ec>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d100      	bne.n	801172c <HAL_DMA_IRQHandler+0x12c>
 801172a:	e1d7      	b.n	8011adc <HAL_DMA_IRQHandler+0x4dc>
 801172c:	4a70      	ldr	r2, [pc, #448]	; (80118f0 <HAL_DMA_IRQHandler+0x2f0>)
 801172e:	4293      	cmp	r3, r2
 8011730:	d100      	bne.n	8011734 <HAL_DMA_IRQHandler+0x134>
 8011732:	e1d6      	b.n	8011ae2 <HAL_DMA_IRQHandler+0x4e2>
 8011734:	4a6f      	ldr	r2, [pc, #444]	; (80118f4 <HAL_DMA_IRQHandler+0x2f4>)
 8011736:	4293      	cmp	r3, r2
 8011738:	d100      	bne.n	801173c <HAL_DMA_IRQHandler+0x13c>
 801173a:	e1d5      	b.n	8011ae8 <HAL_DMA_IRQHandler+0x4e8>
 801173c:	4a66      	ldr	r2, [pc, #408]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 801173e:	4293      	cmp	r3, r2
 8011740:	d100      	bne.n	8011744 <HAL_DMA_IRQHandler+0x144>
 8011742:	e1d4      	b.n	8011aee <HAL_DMA_IRQHandler+0x4ee>
 8011744:	4a6c      	ldr	r2, [pc, #432]	; (80118f8 <HAL_DMA_IRQHandler+0x2f8>)
 8011746:	4293      	cmp	r3, r2
 8011748:	d100      	bne.n	801174c <HAL_DMA_IRQHandler+0x14c>
 801174a:	e1d3      	b.n	8011af4 <HAL_DMA_IRQHandler+0x4f4>
 801174c:	4a6b      	ldr	r2, [pc, #428]	; (80118fc <HAL_DMA_IRQHandler+0x2fc>)
 801174e:	4293      	cmp	r3, r2
 8011750:	d100      	bne.n	8011754 <HAL_DMA_IRQHandler+0x154>
 8011752:	e1d1      	b.n	8011af8 <HAL_DMA_IRQHandler+0x4f8>
 8011754:	4a6a      	ldr	r2, [pc, #424]	; (8011900 <HAL_DMA_IRQHandler+0x300>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d100      	bne.n	801175c <HAL_DMA_IRQHandler+0x15c>
 801175a:	e1cf      	b.n	8011afc <HAL_DMA_IRQHandler+0x4fc>
 801175c:	4a69      	ldr	r2, [pc, #420]	; (8011904 <HAL_DMA_IRQHandler+0x304>)
 801175e:	189a      	adds	r2, r3, r2
 8011760:	4250      	negs	r0, r2
 8011762:	4142      	adcs	r2, r0
 8011764:	4252      	negs	r2, r2
 8011766:	486a      	ldr	r0, [pc, #424]	; (8011910 <HAL_DMA_IRQHandler+0x310>)
 8011768:	4002      	ands	r2, r0
 801176a:	2080      	movs	r0, #128	; 0x80
 801176c:	02c0      	lsls	r0, r0, #11
 801176e:	4684      	mov	ip, r0
 8011770:	4462      	add	r2, ip
 8011772:	e169      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011774:	2280      	movs	r2, #128	; 0x80
 8011776:	e7c4      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 8011778:	2280      	movs	r2, #128	; 0x80
 801177a:	0112      	lsls	r2, r2, #4
 801177c:	e7c1      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 801177e:	2280      	movs	r2, #128	; 0x80
 8011780:	0212      	lsls	r2, r2, #8
 8011782:	e7be      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 8011784:	2280      	movs	r2, #128	; 0x80
 8011786:	0312      	lsls	r2, r2, #12
 8011788:	e7bb      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 801178a:	2280      	movs	r2, #128	; 0x80
 801178c:	0412      	lsls	r2, r2, #16
 801178e:	e7b8      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 8011790:	2280      	movs	r2, #128	; 0x80
 8011792:	0512      	lsls	r2, r2, #20
 8011794:	e7b5      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 8011796:	2208      	movs	r2, #8
 8011798:	e7b3      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 801179a:	2280      	movs	r2, #128	; 0x80
 801179c:	e7b1      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
 801179e:	2280      	movs	r2, #128	; 0x80
 80117a0:	0112      	lsls	r2, r2, #4
 80117a2:	e7ae      	b.n	8011702 <HAL_DMA_IRQHandler+0x102>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	2108      	movs	r1, #8
 80117a8:	438a      	bics	r2, r1
 80117aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80117ac:	6823      	ldr	r3, [r4, #0]
 80117ae:	4a4a      	ldr	r2, [pc, #296]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d800      	bhi.n	80117b6 <HAL_DMA_IRQHandler+0x1b6>
 80117b4:	e0ae      	b.n	8011914 <HAL_DMA_IRQHandler+0x314>
 80117b6:	4a4a      	ldr	r2, [pc, #296]	; (80118e0 <HAL_DMA_IRQHandler+0x2e0>)
 80117b8:	4293      	cmp	r3, r2
 80117ba:	d027      	beq.n	801180c <HAL_DMA_IRQHandler+0x20c>
 80117bc:	4a49      	ldr	r2, [pc, #292]	; (80118e4 <HAL_DMA_IRQHandler+0x2e4>)
 80117be:	4293      	cmp	r3, r2
 80117c0:	d071      	beq.n	80118a6 <HAL_DMA_IRQHandler+0x2a6>
 80117c2:	4a49      	ldr	r2, [pc, #292]	; (80118e8 <HAL_DMA_IRQHandler+0x2e8>)
 80117c4:	4293      	cmp	r3, r2
 80117c6:	d070      	beq.n	80118aa <HAL_DMA_IRQHandler+0x2aa>
 80117c8:	4a48      	ldr	r2, [pc, #288]	; (80118ec <HAL_DMA_IRQHandler+0x2ec>)
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d070      	beq.n	80118b0 <HAL_DMA_IRQHandler+0x2b0>
 80117ce:	4a48      	ldr	r2, [pc, #288]	; (80118f0 <HAL_DMA_IRQHandler+0x2f0>)
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d070      	beq.n	80118b6 <HAL_DMA_IRQHandler+0x2b6>
 80117d4:	4a47      	ldr	r2, [pc, #284]	; (80118f4 <HAL_DMA_IRQHandler+0x2f4>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d070      	beq.n	80118bc <HAL_DMA_IRQHandler+0x2bc>
 80117da:	4a3f      	ldr	r2, [pc, #252]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d070      	beq.n	80118c2 <HAL_DMA_IRQHandler+0x2c2>
 80117e0:	4a45      	ldr	r2, [pc, #276]	; (80118f8 <HAL_DMA_IRQHandler+0x2f8>)
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d070      	beq.n	80118c8 <HAL_DMA_IRQHandler+0x2c8>
 80117e6:	4a45      	ldr	r2, [pc, #276]	; (80118fc <HAL_DMA_IRQHandler+0x2fc>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d06f      	beq.n	80118cc <HAL_DMA_IRQHandler+0x2cc>
 80117ec:	4a44      	ldr	r2, [pc, #272]	; (8011900 <HAL_DMA_IRQHandler+0x300>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d06e      	beq.n	80118d0 <HAL_DMA_IRQHandler+0x2d0>
 80117f2:	4a44      	ldr	r2, [pc, #272]	; (8011904 <HAL_DMA_IRQHandler+0x304>)
 80117f4:	4694      	mov	ip, r2
 80117f6:	4463      	add	r3, ip
 80117f8:	425a      	negs	r2, r3
 80117fa:	4153      	adcs	r3, r2
 80117fc:	425b      	negs	r3, r3
 80117fe:	4a42      	ldr	r2, [pc, #264]	; (8011908 <HAL_DMA_IRQHandler+0x308>)
 8011800:	4013      	ands	r3, r2
 8011802:	2280      	movs	r2, #128	; 0x80
 8011804:	0312      	lsls	r2, r2, #12
 8011806:	4694      	mov	ip, r2
 8011808:	4463      	add	r3, ip
 801180a:	e000      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 801180c:	2308      	movs	r3, #8
 801180e:	4a33      	ldr	r2, [pc, #204]	; (80118dc <HAL_DMA_IRQHandler+0x2dc>)
 8011810:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8011812:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011814:	2201      	movs	r2, #1
 8011816:	4313      	orrs	r3, r2
 8011818:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 801181a:	2321      	movs	r3, #33	; 0x21
 801181c:	3203      	adds	r2, #3
 801181e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 8011820:	3b01      	subs	r3, #1
 8011822:	2200      	movs	r2, #0
 8011824:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011826:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011828:	2b00      	cmp	r3, #0
 801182a:	d001      	beq.n	8011830 <HAL_DMA_IRQHandler+0x230>
        hdma->XferErrorCallback(hdma);
 801182c:	0020      	movs	r0, r4
 801182e:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011830:	6823      	ldr	r3, [r4, #0]
 8011832:	4a29      	ldr	r2, [pc, #164]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 8011834:	4293      	cmp	r3, r2
 8011836:	d800      	bhi.n	801183a <HAL_DMA_IRQHandler+0x23a>
 8011838:	e766      	b.n	8011708 <HAL_DMA_IRQHandler+0x108>
 801183a:	4a28      	ldr	r2, [pc, #160]	; (80118dc <HAL_DMA_IRQHandler+0x2dc>)
 801183c:	6811      	ldr	r1, [r2, #0]
 801183e:	4a28      	ldr	r2, [pc, #160]	; (80118e0 <HAL_DMA_IRQHandler+0x2e0>)
 8011840:	4293      	cmp	r3, r2
 8011842:	d100      	bne.n	8011846 <HAL_DMA_IRQHandler+0x246>
 8011844:	e0ad      	b.n	80119a2 <HAL_DMA_IRQHandler+0x3a2>
 8011846:	4a27      	ldr	r2, [pc, #156]	; (80118e4 <HAL_DMA_IRQHandler+0x2e4>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d100      	bne.n	801184e <HAL_DMA_IRQHandler+0x24e>
 801184c:	e0e3      	b.n	8011a16 <HAL_DMA_IRQHandler+0x416>
 801184e:	4a26      	ldr	r2, [pc, #152]	; (80118e8 <HAL_DMA_IRQHandler+0x2e8>)
 8011850:	4293      	cmp	r3, r2
 8011852:	d100      	bne.n	8011856 <HAL_DMA_IRQHandler+0x256>
 8011854:	e0e1      	b.n	8011a1a <HAL_DMA_IRQHandler+0x41a>
 8011856:	4a25      	ldr	r2, [pc, #148]	; (80118ec <HAL_DMA_IRQHandler+0x2ec>)
 8011858:	4293      	cmp	r3, r2
 801185a:	d100      	bne.n	801185e <HAL_DMA_IRQHandler+0x25e>
 801185c:	e0e0      	b.n	8011a20 <HAL_DMA_IRQHandler+0x420>
 801185e:	4a24      	ldr	r2, [pc, #144]	; (80118f0 <HAL_DMA_IRQHandler+0x2f0>)
 8011860:	4293      	cmp	r3, r2
 8011862:	d100      	bne.n	8011866 <HAL_DMA_IRQHandler+0x266>
 8011864:	e0df      	b.n	8011a26 <HAL_DMA_IRQHandler+0x426>
 8011866:	4a23      	ldr	r2, [pc, #140]	; (80118f4 <HAL_DMA_IRQHandler+0x2f4>)
 8011868:	4293      	cmp	r3, r2
 801186a:	d100      	bne.n	801186e <HAL_DMA_IRQHandler+0x26e>
 801186c:	e0de      	b.n	8011a2c <HAL_DMA_IRQHandler+0x42c>
 801186e:	4a1a      	ldr	r2, [pc, #104]	; (80118d8 <HAL_DMA_IRQHandler+0x2d8>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d100      	bne.n	8011876 <HAL_DMA_IRQHandler+0x276>
 8011874:	e0dd      	b.n	8011a32 <HAL_DMA_IRQHandler+0x432>
 8011876:	4a20      	ldr	r2, [pc, #128]	; (80118f8 <HAL_DMA_IRQHandler+0x2f8>)
 8011878:	4293      	cmp	r3, r2
 801187a:	d100      	bne.n	801187e <HAL_DMA_IRQHandler+0x27e>
 801187c:	e0dc      	b.n	8011a38 <HAL_DMA_IRQHandler+0x438>
 801187e:	4a1f      	ldr	r2, [pc, #124]	; (80118fc <HAL_DMA_IRQHandler+0x2fc>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d100      	bne.n	8011886 <HAL_DMA_IRQHandler+0x286>
 8011884:	e0da      	b.n	8011a3c <HAL_DMA_IRQHandler+0x43c>
 8011886:	4a1e      	ldr	r2, [pc, #120]	; (8011900 <HAL_DMA_IRQHandler+0x300>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d100      	bne.n	801188e <HAL_DMA_IRQHandler+0x28e>
 801188c:	e0d8      	b.n	8011a40 <HAL_DMA_IRQHandler+0x440>
 801188e:	4a1d      	ldr	r2, [pc, #116]	; (8011904 <HAL_DMA_IRQHandler+0x304>)
 8011890:	189a      	adds	r2, r3, r2
 8011892:	4250      	negs	r0, r2
 8011894:	4142      	adcs	r2, r0
 8011896:	4252      	negs	r2, r2
 8011898:	481d      	ldr	r0, [pc, #116]	; (8011910 <HAL_DMA_IRQHandler+0x310>)
 801189a:	4002      	ands	r2, r0
 801189c:	2080      	movs	r0, #128	; 0x80
 801189e:	02c0      	lsls	r0, r0, #11
 80118a0:	4684      	mov	ip, r0
 80118a2:	4462      	add	r2, ip
 80118a4:	e07e      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80118a6:	2380      	movs	r3, #128	; 0x80
 80118a8:	e7b1      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118aa:	2380      	movs	r3, #128	; 0x80
 80118ac:	011b      	lsls	r3, r3, #4
 80118ae:	e7ae      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118b0:	2380      	movs	r3, #128	; 0x80
 80118b2:	021b      	lsls	r3, r3, #8
 80118b4:	e7ab      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118b6:	2380      	movs	r3, #128	; 0x80
 80118b8:	031b      	lsls	r3, r3, #12
 80118ba:	e7a8      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118bc:	2380      	movs	r3, #128	; 0x80
 80118be:	041b      	lsls	r3, r3, #16
 80118c0:	e7a5      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118c2:	2380      	movs	r3, #128	; 0x80
 80118c4:	051b      	lsls	r3, r3, #20
 80118c6:	e7a2      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118c8:	2308      	movs	r3, #8
 80118ca:	e7a0      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118cc:	2380      	movs	r3, #128	; 0x80
 80118ce:	e79e      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118d0:	2380      	movs	r3, #128	; 0x80
 80118d2:	011b      	lsls	r3, r3, #4
 80118d4:	e79b      	b.n	801180e <HAL_DMA_IRQHandler+0x20e>
 80118d6:	46c0      	nop			; (mov r8, r8)
 80118d8:	40020080 	.word	0x40020080
 80118dc:	40020400 	.word	0x40020400
 80118e0:	40020008 	.word	0x40020008
 80118e4:	4002001c 	.word	0x4002001c
 80118e8:	40020030 	.word	0x40020030
 80118ec:	40020044 	.word	0x40020044
 80118f0:	40020058 	.word	0x40020058
 80118f4:	4002006c 	.word	0x4002006c
 80118f8:	40020408 	.word	0x40020408
 80118fc:	4002041c 	.word	0x4002041c
 8011900:	40020430 	.word	0x40020430
 8011904:	bffdfbbc 	.word	0xbffdfbbc
 8011908:	fff88000 	.word	0xfff88000
 801190c:	40020000 	.word	0x40020000
 8011910:	fffc4000 	.word	0xfffc4000
 8011914:	4aaa      	ldr	r2, [pc, #680]	; (8011bc0 <HAL_DMA_IRQHandler+0x5c0>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d027      	beq.n	801196a <HAL_DMA_IRQHandler+0x36a>
 801191a:	4aaa      	ldr	r2, [pc, #680]	; (8011bc4 <HAL_DMA_IRQHandler+0x5c4>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d028      	beq.n	8011972 <HAL_DMA_IRQHandler+0x372>
 8011920:	4aa9      	ldr	r2, [pc, #676]	; (8011bc8 <HAL_DMA_IRQHandler+0x5c8>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d027      	beq.n	8011976 <HAL_DMA_IRQHandler+0x376>
 8011926:	4aa9      	ldr	r2, [pc, #676]	; (8011bcc <HAL_DMA_IRQHandler+0x5cc>)
 8011928:	4293      	cmp	r3, r2
 801192a:	d027      	beq.n	801197c <HAL_DMA_IRQHandler+0x37c>
 801192c:	4aa8      	ldr	r2, [pc, #672]	; (8011bd0 <HAL_DMA_IRQHandler+0x5d0>)
 801192e:	4293      	cmp	r3, r2
 8011930:	d027      	beq.n	8011982 <HAL_DMA_IRQHandler+0x382>
 8011932:	4aa8      	ldr	r2, [pc, #672]	; (8011bd4 <HAL_DMA_IRQHandler+0x5d4>)
 8011934:	4293      	cmp	r3, r2
 8011936:	d027      	beq.n	8011988 <HAL_DMA_IRQHandler+0x388>
 8011938:	4aa7      	ldr	r2, [pc, #668]	; (8011bd8 <HAL_DMA_IRQHandler+0x5d8>)
 801193a:	4293      	cmp	r3, r2
 801193c:	d027      	beq.n	801198e <HAL_DMA_IRQHandler+0x38e>
 801193e:	4aa7      	ldr	r2, [pc, #668]	; (8011bdc <HAL_DMA_IRQHandler+0x5dc>)
 8011940:	4293      	cmp	r3, r2
 8011942:	d027      	beq.n	8011994 <HAL_DMA_IRQHandler+0x394>
 8011944:	4aa6      	ldr	r2, [pc, #664]	; (8011be0 <HAL_DMA_IRQHandler+0x5e0>)
 8011946:	4293      	cmp	r3, r2
 8011948:	d026      	beq.n	8011998 <HAL_DMA_IRQHandler+0x398>
 801194a:	4aa6      	ldr	r2, [pc, #664]	; (8011be4 <HAL_DMA_IRQHandler+0x5e4>)
 801194c:	4293      	cmp	r3, r2
 801194e:	d025      	beq.n	801199c <HAL_DMA_IRQHandler+0x39c>
 8011950:	4aa5      	ldr	r2, [pc, #660]	; (8011be8 <HAL_DMA_IRQHandler+0x5e8>)
 8011952:	4694      	mov	ip, r2
 8011954:	4463      	add	r3, ip
 8011956:	425a      	negs	r2, r3
 8011958:	4153      	adcs	r3, r2
 801195a:	425b      	negs	r3, r3
 801195c:	4aa3      	ldr	r2, [pc, #652]	; (8011bec <HAL_DMA_IRQHandler+0x5ec>)
 801195e:	4013      	ands	r3, r2
 8011960:	2280      	movs	r2, #128	; 0x80
 8011962:	0312      	lsls	r2, r2, #12
 8011964:	4694      	mov	ip, r2
 8011966:	4463      	add	r3, ip
 8011968:	e000      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 801196a:	2308      	movs	r3, #8
 801196c:	4aa0      	ldr	r2, [pc, #640]	; (8011bf0 <HAL_DMA_IRQHandler+0x5f0>)
 801196e:	6053      	str	r3, [r2, #4]
 8011970:	e74f      	b.n	8011812 <HAL_DMA_IRQHandler+0x212>
 8011972:	2380      	movs	r3, #128	; 0x80
 8011974:	e7fa      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 8011976:	2380      	movs	r3, #128	; 0x80
 8011978:	011b      	lsls	r3, r3, #4
 801197a:	e7f7      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 801197c:	2380      	movs	r3, #128	; 0x80
 801197e:	021b      	lsls	r3, r3, #8
 8011980:	e7f4      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 8011982:	2380      	movs	r3, #128	; 0x80
 8011984:	031b      	lsls	r3, r3, #12
 8011986:	e7f1      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 8011988:	2380      	movs	r3, #128	; 0x80
 801198a:	041b      	lsls	r3, r3, #16
 801198c:	e7ee      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 801198e:	2380      	movs	r3, #128	; 0x80
 8011990:	051b      	lsls	r3, r3, #20
 8011992:	e7eb      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 8011994:	2308      	movs	r3, #8
 8011996:	e7e9      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 8011998:	2380      	movs	r3, #128	; 0x80
 801199a:	e7e7      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
 801199c:	2380      	movs	r3, #128	; 0x80
 801199e:	011b      	lsls	r3, r3, #4
 80119a0:	e7e4      	b.n	801196c <HAL_DMA_IRQHandler+0x36c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80119a2:	2204      	movs	r2, #4
 80119a4:	420a      	tst	r2, r1
 80119a6:	d152      	bne.n	8011a4e <HAL_DMA_IRQHandler+0x44e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 80119a8:	6821      	ldr	r1, [r4, #0]
 80119aa:	4b92      	ldr	r3, [pc, #584]	; (8011bf4 <HAL_DMA_IRQHandler+0x5f4>)
 80119ac:	6818      	ldr	r0, [r3, #0]
 80119ae:	4a84      	ldr	r2, [pc, #528]	; (8011bc0 <HAL_DMA_IRQHandler+0x5c0>)
 80119b0:	4291      	cmp	r1, r2
 80119b2:	d100      	bne.n	80119b6 <HAL_DMA_IRQHandler+0x3b6>
 80119b4:	e16b      	b.n	8011c8e <HAL_DMA_IRQHandler+0x68e>
 80119b6:	4a83      	ldr	r2, [pc, #524]	; (8011bc4 <HAL_DMA_IRQHandler+0x5c4>)
 80119b8:	4291      	cmp	r1, r2
 80119ba:	d100      	bne.n	80119be <HAL_DMA_IRQHandler+0x3be>
 80119bc:	e1aa      	b.n	8011d14 <HAL_DMA_IRQHandler+0x714>
 80119be:	4a82      	ldr	r2, [pc, #520]	; (8011bc8 <HAL_DMA_IRQHandler+0x5c8>)
 80119c0:	4291      	cmp	r1, r2
 80119c2:	d100      	bne.n	80119c6 <HAL_DMA_IRQHandler+0x3c6>
 80119c4:	e1a8      	b.n	8011d18 <HAL_DMA_IRQHandler+0x718>
 80119c6:	4a81      	ldr	r2, [pc, #516]	; (8011bcc <HAL_DMA_IRQHandler+0x5cc>)
 80119c8:	4291      	cmp	r1, r2
 80119ca:	d100      	bne.n	80119ce <HAL_DMA_IRQHandler+0x3ce>
 80119cc:	e1a7      	b.n	8011d1e <HAL_DMA_IRQHandler+0x71e>
 80119ce:	4b80      	ldr	r3, [pc, #512]	; (8011bd0 <HAL_DMA_IRQHandler+0x5d0>)
 80119d0:	4299      	cmp	r1, r3
 80119d2:	d100      	bne.n	80119d6 <HAL_DMA_IRQHandler+0x3d6>
 80119d4:	e1a6      	b.n	8011d24 <HAL_DMA_IRQHandler+0x724>
 80119d6:	4b7f      	ldr	r3, [pc, #508]	; (8011bd4 <HAL_DMA_IRQHandler+0x5d4>)
 80119d8:	4299      	cmp	r1, r3
 80119da:	d100      	bne.n	80119de <HAL_DMA_IRQHandler+0x3de>
 80119dc:	e1a5      	b.n	8011d2a <HAL_DMA_IRQHandler+0x72a>
 80119de:	4b7e      	ldr	r3, [pc, #504]	; (8011bd8 <HAL_DMA_IRQHandler+0x5d8>)
 80119e0:	4299      	cmp	r1, r3
 80119e2:	d100      	bne.n	80119e6 <HAL_DMA_IRQHandler+0x3e6>
 80119e4:	e1a4      	b.n	8011d30 <HAL_DMA_IRQHandler+0x730>
 80119e6:	4b7d      	ldr	r3, [pc, #500]	; (8011bdc <HAL_DMA_IRQHandler+0x5dc>)
 80119e8:	4299      	cmp	r1, r3
 80119ea:	d100      	bne.n	80119ee <HAL_DMA_IRQHandler+0x3ee>
 80119ec:	e1a3      	b.n	8011d36 <HAL_DMA_IRQHandler+0x736>
 80119ee:	4b7c      	ldr	r3, [pc, #496]	; (8011be0 <HAL_DMA_IRQHandler+0x5e0>)
 80119f0:	4299      	cmp	r1, r3
 80119f2:	d100      	bne.n	80119f6 <HAL_DMA_IRQHandler+0x3f6>
 80119f4:	e1a1      	b.n	8011d3a <HAL_DMA_IRQHandler+0x73a>
 80119f6:	4b7b      	ldr	r3, [pc, #492]	; (8011be4 <HAL_DMA_IRQHandler+0x5e4>)
 80119f8:	4299      	cmp	r1, r3
 80119fa:	d100      	bne.n	80119fe <HAL_DMA_IRQHandler+0x3fe>
 80119fc:	e19f      	b.n	8011d3e <HAL_DMA_IRQHandler+0x73e>
 80119fe:	4b7a      	ldr	r3, [pc, #488]	; (8011be8 <HAL_DMA_IRQHandler+0x5e8>)
 8011a00:	18ca      	adds	r2, r1, r3
 8011a02:	4253      	negs	r3, r2
 8011a04:	415a      	adcs	r2, r3
 8011a06:	4252      	negs	r2, r2
 8011a08:	4b7b      	ldr	r3, [pc, #492]	; (8011bf8 <HAL_DMA_IRQHandler+0x5f8>)
 8011a0a:	4013      	ands	r3, r2
 8011a0c:	2280      	movs	r2, #128	; 0x80
 8011a0e:	0292      	lsls	r2, r2, #10
 8011a10:	4694      	mov	ip, r2
 8011a12:	4463      	add	r3, ip
 8011a14:	e13c      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011a16:	2240      	movs	r2, #64	; 0x40
 8011a18:	e7c4      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a1a:	2280      	movs	r2, #128	; 0x80
 8011a1c:	00d2      	lsls	r2, r2, #3
 8011a1e:	e7c1      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a20:	2280      	movs	r2, #128	; 0x80
 8011a22:	01d2      	lsls	r2, r2, #7
 8011a24:	e7be      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a26:	2280      	movs	r2, #128	; 0x80
 8011a28:	02d2      	lsls	r2, r2, #11
 8011a2a:	e7bb      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a2c:	2280      	movs	r2, #128	; 0x80
 8011a2e:	03d2      	lsls	r2, r2, #15
 8011a30:	e7b8      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a32:	2280      	movs	r2, #128	; 0x80
 8011a34:	04d2      	lsls	r2, r2, #19
 8011a36:	e7b5      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a38:	2204      	movs	r2, #4
 8011a3a:	e7b3      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a3c:	2240      	movs	r2, #64	; 0x40
 8011a3e:	e7b1      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a40:	2280      	movs	r2, #128	; 0x80
 8011a42:	00d2      	lsls	r2, r2, #3
 8011a44:	e7ae      	b.n	80119a4 <HAL_DMA_IRQHandler+0x3a4>
 8011a46:	2204      	movs	r2, #4
 8011a48:	420a      	tst	r2, r1
 8011a4a:	d100      	bne.n	8011a4e <HAL_DMA_IRQHandler+0x44e>
 8011a4c:	e208      	b.n	8011e60 <HAL_DMA_IRQHandler+0x860>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	0752      	lsls	r2, r2, #29
 8011a52:	d561      	bpl.n	8011b18 <HAL_DMA_IRQHandler+0x518>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	0692      	lsls	r2, r2, #26
 8011a58:	d403      	bmi.n	8011a62 <HAL_DMA_IRQHandler+0x462>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8011a5a:	681a      	ldr	r2, [r3, #0]
 8011a5c:	2104      	movs	r1, #4
 8011a5e:	438a      	bics	r2, r1
 8011a60:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011a62:	6823      	ldr	r3, [r4, #0]
 8011a64:	4a5c      	ldr	r2, [pc, #368]	; (8011bd8 <HAL_DMA_IRQHandler+0x5d8>)
 8011a66:	4293      	cmp	r3, r2
 8011a68:	d800      	bhi.n	8011a6c <HAL_DMA_IRQHandler+0x46c>
 8011a6a:	e0c9      	b.n	8011c00 <HAL_DMA_IRQHandler+0x600>
 8011a6c:	4a54      	ldr	r2, [pc, #336]	; (8011bc0 <HAL_DMA_IRQHandler+0x5c0>)
 8011a6e:	4293      	cmp	r3, r2
 8011a70:	d047      	beq.n	8011b02 <HAL_DMA_IRQHandler+0x502>
 8011a72:	4a54      	ldr	r2, [pc, #336]	; (8011bc4 <HAL_DMA_IRQHandler+0x5c4>)
 8011a74:	4293      	cmp	r3, r2
 8011a76:	d100      	bne.n	8011a7a <HAL_DMA_IRQHandler+0x47a>
 8011a78:	e089      	b.n	8011b8e <HAL_DMA_IRQHandler+0x58e>
 8011a7a:	4a53      	ldr	r2, [pc, #332]	; (8011bc8 <HAL_DMA_IRQHandler+0x5c8>)
 8011a7c:	4293      	cmp	r3, r2
 8011a7e:	d100      	bne.n	8011a82 <HAL_DMA_IRQHandler+0x482>
 8011a80:	e087      	b.n	8011b92 <HAL_DMA_IRQHandler+0x592>
 8011a82:	4a52      	ldr	r2, [pc, #328]	; (8011bcc <HAL_DMA_IRQHandler+0x5cc>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d100      	bne.n	8011a8a <HAL_DMA_IRQHandler+0x48a>
 8011a88:	e086      	b.n	8011b98 <HAL_DMA_IRQHandler+0x598>
 8011a8a:	4a51      	ldr	r2, [pc, #324]	; (8011bd0 <HAL_DMA_IRQHandler+0x5d0>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d100      	bne.n	8011a92 <HAL_DMA_IRQHandler+0x492>
 8011a90:	e085      	b.n	8011b9e <HAL_DMA_IRQHandler+0x59e>
 8011a92:	4a50      	ldr	r2, [pc, #320]	; (8011bd4 <HAL_DMA_IRQHandler+0x5d4>)
 8011a94:	4293      	cmp	r3, r2
 8011a96:	d100      	bne.n	8011a9a <HAL_DMA_IRQHandler+0x49a>
 8011a98:	e084      	b.n	8011ba4 <HAL_DMA_IRQHandler+0x5a4>
 8011a9a:	4a4f      	ldr	r2, [pc, #316]	; (8011bd8 <HAL_DMA_IRQHandler+0x5d8>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d100      	bne.n	8011aa2 <HAL_DMA_IRQHandler+0x4a2>
 8011aa0:	e083      	b.n	8011baa <HAL_DMA_IRQHandler+0x5aa>
 8011aa2:	4a4e      	ldr	r2, [pc, #312]	; (8011bdc <HAL_DMA_IRQHandler+0x5dc>)
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d100      	bne.n	8011aaa <HAL_DMA_IRQHandler+0x4aa>
 8011aa8:	e082      	b.n	8011bb0 <HAL_DMA_IRQHandler+0x5b0>
 8011aaa:	4a4d      	ldr	r2, [pc, #308]	; (8011be0 <HAL_DMA_IRQHandler+0x5e0>)
 8011aac:	4293      	cmp	r3, r2
 8011aae:	d100      	bne.n	8011ab2 <HAL_DMA_IRQHandler+0x4b2>
 8011ab0:	e080      	b.n	8011bb4 <HAL_DMA_IRQHandler+0x5b4>
 8011ab2:	4a4c      	ldr	r2, [pc, #304]	; (8011be4 <HAL_DMA_IRQHandler+0x5e4>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d07f      	beq.n	8011bb8 <HAL_DMA_IRQHandler+0x5b8>
 8011ab8:	4a4b      	ldr	r2, [pc, #300]	; (8011be8 <HAL_DMA_IRQHandler+0x5e8>)
 8011aba:	4694      	mov	ip, r2
 8011abc:	4463      	add	r3, ip
 8011abe:	425a      	negs	r2, r3
 8011ac0:	4153      	adcs	r3, r2
 8011ac2:	425b      	negs	r3, r3
 8011ac4:	4a4d      	ldr	r2, [pc, #308]	; (8011bfc <HAL_DMA_IRQHandler+0x5fc>)
 8011ac6:	4013      	ands	r3, r2
 8011ac8:	2280      	movs	r2, #128	; 0x80
 8011aca:	02d2      	lsls	r2, r2, #11
 8011acc:	4694      	mov	ip, r2
 8011ace:	4463      	add	r3, ip
 8011ad0:	e018      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011ad2:	2240      	movs	r2, #64	; 0x40
 8011ad4:	e7b8      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011ad6:	2280      	movs	r2, #128	; 0x80
 8011ad8:	00d2      	lsls	r2, r2, #3
 8011ada:	e7b5      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011adc:	2280      	movs	r2, #128	; 0x80
 8011ade:	01d2      	lsls	r2, r2, #7
 8011ae0:	e7b2      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011ae2:	2280      	movs	r2, #128	; 0x80
 8011ae4:	02d2      	lsls	r2, r2, #11
 8011ae6:	e7af      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011ae8:	2280      	movs	r2, #128	; 0x80
 8011aea:	03d2      	lsls	r2, r2, #15
 8011aec:	e7ac      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011aee:	2280      	movs	r2, #128	; 0x80
 8011af0:	04d2      	lsls	r2, r2, #19
 8011af2:	e7a9      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011af4:	2204      	movs	r2, #4
 8011af6:	e7a7      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011af8:	2240      	movs	r2, #64	; 0x40
 8011afa:	e7a5      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
 8011afc:	2280      	movs	r2, #128	; 0x80
 8011afe:	00d2      	lsls	r2, r2, #3
 8011b00:	e7a2      	b.n	8011a48 <HAL_DMA_IRQHandler+0x448>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011b02:	2304      	movs	r3, #4
 8011b04:	4a3b      	ldr	r2, [pc, #236]	; (8011bf4 <HAL_DMA_IRQHandler+0x5f4>)
 8011b06:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8011b08:	2321      	movs	r3, #33	; 0x21
 8011b0a:	2211      	movs	r2, #17
 8011b0c:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011b0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d001      	beq.n	8011b18 <HAL_DMA_IRQHandler+0x518>
        hdma->XferHalfCpltCallback(hdma);
 8011b14:	0020      	movs	r0, r4
 8011b16:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011b18:	6821      	ldr	r1, [r4, #0]
 8011b1a:	4b2f      	ldr	r3, [pc, #188]	; (8011bd8 <HAL_DMA_IRQHandler+0x5d8>)
 8011b1c:	4299      	cmp	r1, r3
 8011b1e:	d900      	bls.n	8011b22 <HAL_DMA_IRQHandler+0x522>
 8011b20:	e743      	b.n	80119aa <HAL_DMA_IRQHandler+0x3aa>
 8011b22:	4b33      	ldr	r3, [pc, #204]	; (8011bf0 <HAL_DMA_IRQHandler+0x5f0>)
 8011b24:	6818      	ldr	r0, [r3, #0]
 8011b26:	4a26      	ldr	r2, [pc, #152]	; (8011bc0 <HAL_DMA_IRQHandler+0x5c0>)
 8011b28:	4291      	cmp	r1, r2
 8011b2a:	d100      	bne.n	8011b2e <HAL_DMA_IRQHandler+0x52e>
 8011b2c:	e10a      	b.n	8011d44 <HAL_DMA_IRQHandler+0x744>
 8011b2e:	4a25      	ldr	r2, [pc, #148]	; (8011bc4 <HAL_DMA_IRQHandler+0x5c4>)
 8011b30:	4291      	cmp	r1, r2
 8011b32:	d100      	bne.n	8011b36 <HAL_DMA_IRQHandler+0x536>
 8011b34:	e10c      	b.n	8011d50 <HAL_DMA_IRQHandler+0x750>
 8011b36:	4a24      	ldr	r2, [pc, #144]	; (8011bc8 <HAL_DMA_IRQHandler+0x5c8>)
 8011b38:	4291      	cmp	r1, r2
 8011b3a:	d100      	bne.n	8011b3e <HAL_DMA_IRQHandler+0x53e>
 8011b3c:	e10a      	b.n	8011d54 <HAL_DMA_IRQHandler+0x754>
 8011b3e:	4a23      	ldr	r2, [pc, #140]	; (8011bcc <HAL_DMA_IRQHandler+0x5cc>)
 8011b40:	4291      	cmp	r1, r2
 8011b42:	d100      	bne.n	8011b46 <HAL_DMA_IRQHandler+0x546>
 8011b44:	e109      	b.n	8011d5a <HAL_DMA_IRQHandler+0x75a>
 8011b46:	4b22      	ldr	r3, [pc, #136]	; (8011bd0 <HAL_DMA_IRQHandler+0x5d0>)
 8011b48:	4299      	cmp	r1, r3
 8011b4a:	d100      	bne.n	8011b4e <HAL_DMA_IRQHandler+0x54e>
 8011b4c:	e108      	b.n	8011d60 <HAL_DMA_IRQHandler+0x760>
 8011b4e:	4b21      	ldr	r3, [pc, #132]	; (8011bd4 <HAL_DMA_IRQHandler+0x5d4>)
 8011b50:	4299      	cmp	r1, r3
 8011b52:	d100      	bne.n	8011b56 <HAL_DMA_IRQHandler+0x556>
 8011b54:	e107      	b.n	8011d66 <HAL_DMA_IRQHandler+0x766>
 8011b56:	4b20      	ldr	r3, [pc, #128]	; (8011bd8 <HAL_DMA_IRQHandler+0x5d8>)
 8011b58:	4299      	cmp	r1, r3
 8011b5a:	d100      	bne.n	8011b5e <HAL_DMA_IRQHandler+0x55e>
 8011b5c:	e106      	b.n	8011d6c <HAL_DMA_IRQHandler+0x76c>
 8011b5e:	4b1f      	ldr	r3, [pc, #124]	; (8011bdc <HAL_DMA_IRQHandler+0x5dc>)
 8011b60:	4299      	cmp	r1, r3
 8011b62:	d100      	bne.n	8011b66 <HAL_DMA_IRQHandler+0x566>
 8011b64:	e105      	b.n	8011d72 <HAL_DMA_IRQHandler+0x772>
 8011b66:	4b1e      	ldr	r3, [pc, #120]	; (8011be0 <HAL_DMA_IRQHandler+0x5e0>)
 8011b68:	4299      	cmp	r1, r3
 8011b6a:	d100      	bne.n	8011b6e <HAL_DMA_IRQHandler+0x56e>
 8011b6c:	e103      	b.n	8011d76 <HAL_DMA_IRQHandler+0x776>
 8011b6e:	4b1d      	ldr	r3, [pc, #116]	; (8011be4 <HAL_DMA_IRQHandler+0x5e4>)
 8011b70:	4299      	cmp	r1, r3
 8011b72:	d100      	bne.n	8011b76 <HAL_DMA_IRQHandler+0x576>
 8011b74:	e101      	b.n	8011d7a <HAL_DMA_IRQHandler+0x77a>
 8011b76:	4b1c      	ldr	r3, [pc, #112]	; (8011be8 <HAL_DMA_IRQHandler+0x5e8>)
 8011b78:	18ca      	adds	r2, r1, r3
 8011b7a:	4253      	negs	r3, r2
 8011b7c:	415a      	adcs	r2, r3
 8011b7e:	4252      	negs	r2, r2
 8011b80:	4b1d      	ldr	r3, [pc, #116]	; (8011bf8 <HAL_DMA_IRQHandler+0x5f8>)
 8011b82:	4013      	ands	r3, r2
 8011b84:	2280      	movs	r2, #128	; 0x80
 8011b86:	0292      	lsls	r2, r2, #10
 8011b88:	4694      	mov	ip, r2
 8011b8a:	4463      	add	r3, ip
 8011b8c:	e0db      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011b8e:	2340      	movs	r3, #64	; 0x40
 8011b90:	e7b8      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011b92:	2380      	movs	r3, #128	; 0x80
 8011b94:	00db      	lsls	r3, r3, #3
 8011b96:	e7b5      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011b98:	2380      	movs	r3, #128	; 0x80
 8011b9a:	01db      	lsls	r3, r3, #7
 8011b9c:	e7b2      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011b9e:	2380      	movs	r3, #128	; 0x80
 8011ba0:	02db      	lsls	r3, r3, #11
 8011ba2:	e7af      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011ba4:	2380      	movs	r3, #128	; 0x80
 8011ba6:	03db      	lsls	r3, r3, #15
 8011ba8:	e7ac      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011baa:	2380      	movs	r3, #128	; 0x80
 8011bac:	04db      	lsls	r3, r3, #19
 8011bae:	e7a9      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011bb0:	2304      	movs	r3, #4
 8011bb2:	e7a7      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011bb4:	2340      	movs	r3, #64	; 0x40
 8011bb6:	e7a5      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011bb8:	2380      	movs	r3, #128	; 0x80
 8011bba:	00db      	lsls	r3, r3, #3
 8011bbc:	e7a2      	b.n	8011b04 <HAL_DMA_IRQHandler+0x504>
 8011bbe:	46c0      	nop			; (mov r8, r8)
 8011bc0:	40020008 	.word	0x40020008
 8011bc4:	4002001c 	.word	0x4002001c
 8011bc8:	40020030 	.word	0x40020030
 8011bcc:	40020044 	.word	0x40020044
 8011bd0:	40020058 	.word	0x40020058
 8011bd4:	4002006c 	.word	0x4002006c
 8011bd8:	40020080 	.word	0x40020080
 8011bdc:	40020408 	.word	0x40020408
 8011be0:	4002041c 	.word	0x4002041c
 8011be4:	40020430 	.word	0x40020430
 8011be8:	bffdfbbc 	.word	0xbffdfbbc
 8011bec:	fff88000 	.word	0xfff88000
 8011bf0:	40020000 	.word	0x40020000
 8011bf4:	40020400 	.word	0x40020400
 8011bf8:	fffe2000 	.word	0xfffe2000
 8011bfc:	fffc4000 	.word	0xfffc4000
 8011c00:	4a9b      	ldr	r2, [pc, #620]	; (8011e70 <HAL_DMA_IRQHandler+0x870>)
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d027      	beq.n	8011c56 <HAL_DMA_IRQHandler+0x656>
 8011c06:	4a9b      	ldr	r2, [pc, #620]	; (8011e74 <HAL_DMA_IRQHandler+0x874>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d028      	beq.n	8011c5e <HAL_DMA_IRQHandler+0x65e>
 8011c0c:	4a9a      	ldr	r2, [pc, #616]	; (8011e78 <HAL_DMA_IRQHandler+0x878>)
 8011c0e:	4293      	cmp	r3, r2
 8011c10:	d027      	beq.n	8011c62 <HAL_DMA_IRQHandler+0x662>
 8011c12:	4a9a      	ldr	r2, [pc, #616]	; (8011e7c <HAL_DMA_IRQHandler+0x87c>)
 8011c14:	4293      	cmp	r3, r2
 8011c16:	d027      	beq.n	8011c68 <HAL_DMA_IRQHandler+0x668>
 8011c18:	4a99      	ldr	r2, [pc, #612]	; (8011e80 <HAL_DMA_IRQHandler+0x880>)
 8011c1a:	4293      	cmp	r3, r2
 8011c1c:	d027      	beq.n	8011c6e <HAL_DMA_IRQHandler+0x66e>
 8011c1e:	4a99      	ldr	r2, [pc, #612]	; (8011e84 <HAL_DMA_IRQHandler+0x884>)
 8011c20:	4293      	cmp	r3, r2
 8011c22:	d027      	beq.n	8011c74 <HAL_DMA_IRQHandler+0x674>
 8011c24:	4a98      	ldr	r2, [pc, #608]	; (8011e88 <HAL_DMA_IRQHandler+0x888>)
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d027      	beq.n	8011c7a <HAL_DMA_IRQHandler+0x67a>
 8011c2a:	4a98      	ldr	r2, [pc, #608]	; (8011e8c <HAL_DMA_IRQHandler+0x88c>)
 8011c2c:	4293      	cmp	r3, r2
 8011c2e:	d027      	beq.n	8011c80 <HAL_DMA_IRQHandler+0x680>
 8011c30:	4a97      	ldr	r2, [pc, #604]	; (8011e90 <HAL_DMA_IRQHandler+0x890>)
 8011c32:	4293      	cmp	r3, r2
 8011c34:	d026      	beq.n	8011c84 <HAL_DMA_IRQHandler+0x684>
 8011c36:	4a97      	ldr	r2, [pc, #604]	; (8011e94 <HAL_DMA_IRQHandler+0x894>)
 8011c38:	4293      	cmp	r3, r2
 8011c3a:	d025      	beq.n	8011c88 <HAL_DMA_IRQHandler+0x688>
 8011c3c:	4a96      	ldr	r2, [pc, #600]	; (8011e98 <HAL_DMA_IRQHandler+0x898>)
 8011c3e:	4694      	mov	ip, r2
 8011c40:	4463      	add	r3, ip
 8011c42:	425a      	negs	r2, r3
 8011c44:	4153      	adcs	r3, r2
 8011c46:	425b      	negs	r3, r3
 8011c48:	4a94      	ldr	r2, [pc, #592]	; (8011e9c <HAL_DMA_IRQHandler+0x89c>)
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	2280      	movs	r2, #128	; 0x80
 8011c4e:	02d2      	lsls	r2, r2, #11
 8011c50:	4694      	mov	ip, r2
 8011c52:	4463      	add	r3, ip
 8011c54:	e000      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c56:	2304      	movs	r3, #4
 8011c58:	4a91      	ldr	r2, [pc, #580]	; (8011ea0 <HAL_DMA_IRQHandler+0x8a0>)
 8011c5a:	6053      	str	r3, [r2, #4]
 8011c5c:	e754      	b.n	8011b08 <HAL_DMA_IRQHandler+0x508>
 8011c5e:	2340      	movs	r3, #64	; 0x40
 8011c60:	e7fa      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c62:	2380      	movs	r3, #128	; 0x80
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	e7f7      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c68:	2380      	movs	r3, #128	; 0x80
 8011c6a:	01db      	lsls	r3, r3, #7
 8011c6c:	e7f4      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c6e:	2380      	movs	r3, #128	; 0x80
 8011c70:	02db      	lsls	r3, r3, #11
 8011c72:	e7f1      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c74:	2380      	movs	r3, #128	; 0x80
 8011c76:	03db      	lsls	r3, r3, #15
 8011c78:	e7ee      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c7a:	2380      	movs	r3, #128	; 0x80
 8011c7c:	04db      	lsls	r3, r3, #19
 8011c7e:	e7eb      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c80:	2304      	movs	r3, #4
 8011c82:	e7e9      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c84:	2340      	movs	r3, #64	; 0x40
 8011c86:	e7e7      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
 8011c88:	2380      	movs	r3, #128	; 0x80
 8011c8a:	00db      	lsls	r3, r3, #3
 8011c8c:	e7e4      	b.n	8011c58 <HAL_DMA_IRQHandler+0x658>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011c8e:	2302      	movs	r3, #2
 8011c90:	4003      	ands	r3, r0
 8011c92:	1e5a      	subs	r2, r3, #1
 8011c94:	4193      	sbcs	r3, r2
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d100      	bne.n	8011c9e <HAL_DMA_IRQHandler+0x69e>
 8011c9c:	e080      	b.n	8011da0 <HAL_DMA_IRQHandler+0x7a0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011c9e:	680b      	ldr	r3, [r1, #0]
 8011ca0:	079b      	lsls	r3, r3, #30
 8011ca2:	d57d      	bpl.n	8011da0 <HAL_DMA_IRQHandler+0x7a0>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011ca4:	680b      	ldr	r3, [r1, #0]
 8011ca6:	069b      	lsls	r3, r3, #26
 8011ca8:	d403      	bmi.n	8011cb2 <HAL_DMA_IRQHandler+0x6b2>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 8011caa:	680b      	ldr	r3, [r1, #0]
 8011cac:	2202      	movs	r2, #2
 8011cae:	4393      	bics	r3, r2
 8011cb0:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011cb2:	6823      	ldr	r3, [r4, #0]
 8011cb4:	4a74      	ldr	r2, [pc, #464]	; (8011e88 <HAL_DMA_IRQHandler+0x888>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d800      	bhi.n	8011cbc <HAL_DMA_IRQHandler+0x6bc>
 8011cba:	e08a      	b.n	8011dd2 <HAL_DMA_IRQHandler+0x7d2>
 8011cbc:	4a6c      	ldr	r2, [pc, #432]	; (8011e70 <HAL_DMA_IRQHandler+0x870>)
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	d05e      	beq.n	8011d80 <HAL_DMA_IRQHandler+0x780>
 8011cc2:	4a6c      	ldr	r2, [pc, #432]	; (8011e74 <HAL_DMA_IRQHandler+0x874>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d100      	bne.n	8011cca <HAL_DMA_IRQHandler+0x6ca>
 8011cc8:	e06b      	b.n	8011da2 <HAL_DMA_IRQHandler+0x7a2>
 8011cca:	4a6b      	ldr	r2, [pc, #428]	; (8011e78 <HAL_DMA_IRQHandler+0x878>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d06a      	beq.n	8011da6 <HAL_DMA_IRQHandler+0x7a6>
 8011cd0:	4a6a      	ldr	r2, [pc, #424]	; (8011e7c <HAL_DMA_IRQHandler+0x87c>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d06a      	beq.n	8011dac <HAL_DMA_IRQHandler+0x7ac>
 8011cd6:	4a6a      	ldr	r2, [pc, #424]	; (8011e80 <HAL_DMA_IRQHandler+0x880>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d06a      	beq.n	8011db2 <HAL_DMA_IRQHandler+0x7b2>
 8011cdc:	4a69      	ldr	r2, [pc, #420]	; (8011e84 <HAL_DMA_IRQHandler+0x884>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d06a      	beq.n	8011db8 <HAL_DMA_IRQHandler+0x7b8>
 8011ce2:	4a69      	ldr	r2, [pc, #420]	; (8011e88 <HAL_DMA_IRQHandler+0x888>)
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d06a      	beq.n	8011dbe <HAL_DMA_IRQHandler+0x7be>
 8011ce8:	4a68      	ldr	r2, [pc, #416]	; (8011e8c <HAL_DMA_IRQHandler+0x88c>)
 8011cea:	4293      	cmp	r3, r2
 8011cec:	d06a      	beq.n	8011dc4 <HAL_DMA_IRQHandler+0x7c4>
 8011cee:	4a68      	ldr	r2, [pc, #416]	; (8011e90 <HAL_DMA_IRQHandler+0x890>)
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d069      	beq.n	8011dc8 <HAL_DMA_IRQHandler+0x7c8>
 8011cf4:	4a67      	ldr	r2, [pc, #412]	; (8011e94 <HAL_DMA_IRQHandler+0x894>)
 8011cf6:	4293      	cmp	r3, r2
 8011cf8:	d068      	beq.n	8011dcc <HAL_DMA_IRQHandler+0x7cc>
 8011cfa:	4a67      	ldr	r2, [pc, #412]	; (8011e98 <HAL_DMA_IRQHandler+0x898>)
 8011cfc:	4694      	mov	ip, r2
 8011cfe:	4463      	add	r3, ip
 8011d00:	425a      	negs	r2, r3
 8011d02:	4153      	adcs	r3, r2
 8011d04:	425b      	negs	r3, r3
 8011d06:	4a67      	ldr	r2, [pc, #412]	; (8011ea4 <HAL_DMA_IRQHandler+0x8a4>)
 8011d08:	4013      	ands	r3, r2
 8011d0a:	2280      	movs	r2, #128	; 0x80
 8011d0c:	0292      	lsls	r2, r2, #10
 8011d0e:	4694      	mov	ip, r2
 8011d10:	4463      	add	r3, ip
 8011d12:	e036      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011d14:	2320      	movs	r3, #32
 8011d16:	e7bb      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d18:	2380      	movs	r3, #128	; 0x80
 8011d1a:	009b      	lsls	r3, r3, #2
 8011d1c:	e7b8      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d1e:	2380      	movs	r3, #128	; 0x80
 8011d20:	019b      	lsls	r3, r3, #6
 8011d22:	e7b5      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d24:	2380      	movs	r3, #128	; 0x80
 8011d26:	029b      	lsls	r3, r3, #10
 8011d28:	e7b2      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d2a:	2380      	movs	r3, #128	; 0x80
 8011d2c:	039b      	lsls	r3, r3, #14
 8011d2e:	e7af      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d30:	2380      	movs	r3, #128	; 0x80
 8011d32:	049b      	lsls	r3, r3, #18
 8011d34:	e7ac      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d36:	2302      	movs	r3, #2
 8011d38:	e7aa      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d3a:	2320      	movs	r3, #32
 8011d3c:	e7a8      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d3e:	2380      	movs	r3, #128	; 0x80
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	e7a5      	b.n	8011c90 <HAL_DMA_IRQHandler+0x690>
 8011d44:	2302      	movs	r3, #2
 8011d46:	4003      	ands	r3, r0
 8011d48:	1e5a      	subs	r2, r3, #1
 8011d4a:	4193      	sbcs	r3, r2
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	e7a3      	b.n	8011c98 <HAL_DMA_IRQHandler+0x698>
 8011d50:	2320      	movs	r3, #32
 8011d52:	e7f8      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d54:	2380      	movs	r3, #128	; 0x80
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	e7f5      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d5a:	2380      	movs	r3, #128	; 0x80
 8011d5c:	019b      	lsls	r3, r3, #6
 8011d5e:	e7f2      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d60:	2380      	movs	r3, #128	; 0x80
 8011d62:	029b      	lsls	r3, r3, #10
 8011d64:	e7ef      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d66:	2380      	movs	r3, #128	; 0x80
 8011d68:	039b      	lsls	r3, r3, #14
 8011d6a:	e7ec      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d6c:	2380      	movs	r3, #128	; 0x80
 8011d6e:	049b      	lsls	r3, r3, #18
 8011d70:	e7e9      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d72:	2302      	movs	r3, #2
 8011d74:	e7e7      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d76:	2320      	movs	r3, #32
 8011d78:	e7e5      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
 8011d7a:	2380      	movs	r3, #128	; 0x80
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	e7e2      	b.n	8011d46 <HAL_DMA_IRQHandler+0x746>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011d80:	2302      	movs	r3, #2
 8011d82:	4a49      	ldr	r2, [pc, #292]	; (8011ea8 <HAL_DMA_IRQHandler+0x8a8>)
 8011d84:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d88:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 8011d8a:	2321      	movs	r3, #33	; 0x21
 8011d8c:	2201      	movs	r2, #1
 8011d8e:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011d90:	3b01      	subs	r3, #1
 8011d92:	2200      	movs	r2, #0
 8011d94:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011d96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d001      	beq.n	8011da0 <HAL_DMA_IRQHandler+0x7a0>
        hdma->XferCpltCallback(hdma);
 8011d9c:	0020      	movs	r0, r4
 8011d9e:	4798      	blx	r3
}  
 8011da0:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011da2:	2320      	movs	r3, #32
 8011da4:	e7ed      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011da6:	2380      	movs	r3, #128	; 0x80
 8011da8:	009b      	lsls	r3, r3, #2
 8011daa:	e7ea      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011dac:	2380      	movs	r3, #128	; 0x80
 8011dae:	019b      	lsls	r3, r3, #6
 8011db0:	e7e7      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011db2:	2380      	movs	r3, #128	; 0x80
 8011db4:	029b      	lsls	r3, r3, #10
 8011db6:	e7e4      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011db8:	2380      	movs	r3, #128	; 0x80
 8011dba:	039b      	lsls	r3, r3, #14
 8011dbc:	e7e1      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011dbe:	2380      	movs	r3, #128	; 0x80
 8011dc0:	049b      	lsls	r3, r3, #18
 8011dc2:	e7de      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	e7dc      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011dc8:	2320      	movs	r3, #32
 8011dca:	e7da      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011dcc:	2380      	movs	r3, #128	; 0x80
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	e7d7      	b.n	8011d82 <HAL_DMA_IRQHandler+0x782>
 8011dd2:	4a27      	ldr	r2, [pc, #156]	; (8011e70 <HAL_DMA_IRQHandler+0x870>)
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d027      	beq.n	8011e28 <HAL_DMA_IRQHandler+0x828>
 8011dd8:	4a26      	ldr	r2, [pc, #152]	; (8011e74 <HAL_DMA_IRQHandler+0x874>)
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	d028      	beq.n	8011e30 <HAL_DMA_IRQHandler+0x830>
 8011dde:	4a26      	ldr	r2, [pc, #152]	; (8011e78 <HAL_DMA_IRQHandler+0x878>)
 8011de0:	4293      	cmp	r3, r2
 8011de2:	d027      	beq.n	8011e34 <HAL_DMA_IRQHandler+0x834>
 8011de4:	4a25      	ldr	r2, [pc, #148]	; (8011e7c <HAL_DMA_IRQHandler+0x87c>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d027      	beq.n	8011e3a <HAL_DMA_IRQHandler+0x83a>
 8011dea:	4a25      	ldr	r2, [pc, #148]	; (8011e80 <HAL_DMA_IRQHandler+0x880>)
 8011dec:	4293      	cmp	r3, r2
 8011dee:	d027      	beq.n	8011e40 <HAL_DMA_IRQHandler+0x840>
 8011df0:	4a24      	ldr	r2, [pc, #144]	; (8011e84 <HAL_DMA_IRQHandler+0x884>)
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d027      	beq.n	8011e46 <HAL_DMA_IRQHandler+0x846>
 8011df6:	4a24      	ldr	r2, [pc, #144]	; (8011e88 <HAL_DMA_IRQHandler+0x888>)
 8011df8:	4293      	cmp	r3, r2
 8011dfa:	d027      	beq.n	8011e4c <HAL_DMA_IRQHandler+0x84c>
 8011dfc:	4a23      	ldr	r2, [pc, #140]	; (8011e8c <HAL_DMA_IRQHandler+0x88c>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d027      	beq.n	8011e52 <HAL_DMA_IRQHandler+0x852>
 8011e02:	4a23      	ldr	r2, [pc, #140]	; (8011e90 <HAL_DMA_IRQHandler+0x890>)
 8011e04:	4293      	cmp	r3, r2
 8011e06:	d026      	beq.n	8011e56 <HAL_DMA_IRQHandler+0x856>
 8011e08:	4a22      	ldr	r2, [pc, #136]	; (8011e94 <HAL_DMA_IRQHandler+0x894>)
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d025      	beq.n	8011e5a <HAL_DMA_IRQHandler+0x85a>
 8011e0e:	4a22      	ldr	r2, [pc, #136]	; (8011e98 <HAL_DMA_IRQHandler+0x898>)
 8011e10:	4694      	mov	ip, r2
 8011e12:	4463      	add	r3, ip
 8011e14:	425a      	negs	r2, r3
 8011e16:	4153      	adcs	r3, r2
 8011e18:	425b      	negs	r3, r3
 8011e1a:	4a22      	ldr	r2, [pc, #136]	; (8011ea4 <HAL_DMA_IRQHandler+0x8a4>)
 8011e1c:	4013      	ands	r3, r2
 8011e1e:	2280      	movs	r2, #128	; 0x80
 8011e20:	0292      	lsls	r2, r2, #10
 8011e22:	4694      	mov	ip, r2
 8011e24:	4463      	add	r3, ip
 8011e26:	e000      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e28:	2302      	movs	r3, #2
 8011e2a:	4a1d      	ldr	r2, [pc, #116]	; (8011ea0 <HAL_DMA_IRQHandler+0x8a0>)
 8011e2c:	6053      	str	r3, [r2, #4]
 8011e2e:	e7aa      	b.n	8011d86 <HAL_DMA_IRQHandler+0x786>
 8011e30:	2320      	movs	r3, #32
 8011e32:	e7fa      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e34:	2380      	movs	r3, #128	; 0x80
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	e7f7      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e3a:	2380      	movs	r3, #128	; 0x80
 8011e3c:	019b      	lsls	r3, r3, #6
 8011e3e:	e7f4      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e40:	2380      	movs	r3, #128	; 0x80
 8011e42:	029b      	lsls	r3, r3, #10
 8011e44:	e7f1      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e46:	2380      	movs	r3, #128	; 0x80
 8011e48:	039b      	lsls	r3, r3, #14
 8011e4a:	e7ee      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e4c:	2380      	movs	r3, #128	; 0x80
 8011e4e:	049b      	lsls	r3, r3, #18
 8011e50:	e7eb      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e52:	2302      	movs	r3, #2
 8011e54:	e7e9      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e56:	2320      	movs	r3, #32
 8011e58:	e7e7      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
 8011e5a:	2380      	movs	r3, #128	; 0x80
 8011e5c:	009b      	lsls	r3, r3, #2
 8011e5e:	e7e4      	b.n	8011e2a <HAL_DMA_IRQHandler+0x82a>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011e60:	6821      	ldr	r1, [r4, #0]
 8011e62:	e65e      	b.n	8011b22 <HAL_DMA_IRQHandler+0x522>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011e64:	681a      	ldr	r2, [r3, #0]
 8011e66:	0712      	lsls	r2, r2, #28
 8011e68:	d500      	bpl.n	8011e6c <HAL_DMA_IRQHandler+0x86c>
 8011e6a:	e49b      	b.n	80117a4 <HAL_DMA_IRQHandler+0x1a4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011e6c:	6823      	ldr	r3, [r4, #0]
 8011e6e:	e44b      	b.n	8011708 <HAL_DMA_IRQHandler+0x108>
 8011e70:	40020008 	.word	0x40020008
 8011e74:	4002001c 	.word	0x4002001c
 8011e78:	40020030 	.word	0x40020030
 8011e7c:	40020044 	.word	0x40020044
 8011e80:	40020058 	.word	0x40020058
 8011e84:	4002006c 	.word	0x4002006c
 8011e88:	40020080 	.word	0x40020080
 8011e8c:	40020408 	.word	0x40020408
 8011e90:	4002041c 	.word	0x4002041c
 8011e94:	40020430 	.word	0x40020430
 8011e98:	bffdfbbc 	.word	0xbffdfbbc
 8011e9c:	fffc4000 	.word	0xfffc4000
 8011ea0:	40020000 	.word	0x40020000
 8011ea4:	fffe2000 	.word	0xfffe2000
 8011ea8:	40020400 	.word	0x40020400

08011eac <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011eac:	4b0a      	ldr	r3, [pc, #40]	; (8011ed8 <FLASH_SetErrorCode+0x2c>)
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	06db      	lsls	r3, r3, #27
 8011eb2:	d504      	bpl.n	8011ebe <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011eb4:	4a09      	ldr	r2, [pc, #36]	; (8011edc <FLASH_SetErrorCode+0x30>)
 8011eb6:	69d3      	ldr	r3, [r2, #28]
 8011eb8:	2102      	movs	r1, #2
 8011eba:	430b      	orrs	r3, r1
 8011ebc:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011ebe:	4b06      	ldr	r3, [pc, #24]	; (8011ed8 <FLASH_SetErrorCode+0x2c>)
 8011ec0:	68db      	ldr	r3, [r3, #12]
 8011ec2:	075b      	lsls	r3, r3, #29
 8011ec4:	d504      	bpl.n	8011ed0 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8011ec6:	4a05      	ldr	r2, [pc, #20]	; (8011edc <FLASH_SetErrorCode+0x30>)
 8011ec8:	69d3      	ldr	r3, [r2, #28]
 8011eca:	2101      	movs	r1, #1
 8011ecc:	430b      	orrs	r3, r1
 8011ece:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011ed0:	4b01      	ldr	r3, [pc, #4]	; (8011ed8 <FLASH_SetErrorCode+0x2c>)
 8011ed2:	2214      	movs	r2, #20
 8011ed4:	60da      	str	r2, [r3, #12]
}  
 8011ed6:	4770      	bx	lr
 8011ed8:	40022000 	.word	0x40022000
 8011edc:	200073d0 	.word	0x200073d0

08011ee0 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011ee0:	4b05      	ldr	r3, [pc, #20]	; (8011ef8 <HAL_FLASH_Unlock+0x18>)
 8011ee2:	691b      	ldr	r3, [r3, #16]
    return HAL_ERROR;
 8011ee4:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011ee6:	061b      	lsls	r3, r3, #24
 8011ee8:	d505      	bpl.n	8011ef6 <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011eea:	4b03      	ldr	r3, [pc, #12]	; (8011ef8 <HAL_FLASH_Unlock+0x18>)
 8011eec:	4a03      	ldr	r2, [pc, #12]	; (8011efc <HAL_FLASH_Unlock+0x1c>)
 8011eee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011ef0:	4a03      	ldr	r2, [pc, #12]	; (8011f00 <HAL_FLASH_Unlock+0x20>)
 8011ef2:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 8011ef4:	2000      	movs	r0, #0
}
 8011ef6:	4770      	bx	lr
 8011ef8:	40022000 	.word	0x40022000
 8011efc:	45670123 	.word	0x45670123
 8011f00:	cdef89ab 	.word	0xcdef89ab

08011f04 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011f04:	4a03      	ldr	r2, [pc, #12]	; (8011f14 <HAL_FLASH_Lock+0x10>)
 8011f06:	6913      	ldr	r3, [r2, #16]
 8011f08:	2180      	movs	r1, #128	; 0x80
 8011f0a:	430b      	orrs	r3, r1
 8011f0c:	6113      	str	r3, [r2, #16]
}
 8011f0e:	2000      	movs	r0, #0
 8011f10:	4770      	bx	lr
 8011f12:	46c0      	nop			; (mov r8, r8)
 8011f14:	40022000 	.word	0x40022000

08011f18 <FLASH_WaitForLastOperation>:
{
 8011f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f1a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011f1c:	f7fe fe18 	bl	8010b50 <HAL_GetTick>
 8011f20:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8011f22:	4e13      	ldr	r6, [pc, #76]	; (8011f70 <FLASH_WaitForLastOperation+0x58>)
 8011f24:	2501      	movs	r5, #1
 8011f26:	68f3      	ldr	r3, [r6, #12]
 8011f28:	421d      	tst	r5, r3
 8011f2a:	d00a      	beq.n	8011f42 <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 8011f2c:	1c63      	adds	r3, r4, #1
 8011f2e:	d0fa      	beq.n	8011f26 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8011f30:	2c00      	cmp	r4, #0
 8011f32:	d01a      	beq.n	8011f6a <FLASH_WaitForLastOperation+0x52>
 8011f34:	f7fe fe0c 	bl	8010b50 <HAL_GetTick>
 8011f38:	1bc0      	subs	r0, r0, r7
 8011f3a:	42a0      	cmp	r0, r4
 8011f3c:	d9f3      	bls.n	8011f26 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 8011f3e:	2003      	movs	r0, #3
 8011f40:	e012      	b.n	8011f68 <FLASH_WaitForLastOperation+0x50>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8011f42:	4b0b      	ldr	r3, [pc, #44]	; (8011f70 <FLASH_WaitForLastOperation+0x58>)
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	069b      	lsls	r3, r3, #26
 8011f48:	d502      	bpl.n	8011f50 <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8011f4a:	4b09      	ldr	r3, [pc, #36]	; (8011f70 <FLASH_WaitForLastOperation+0x58>)
 8011f4c:	2220      	movs	r2, #32
 8011f4e:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011f50:	4b07      	ldr	r3, [pc, #28]	; (8011f70 <FLASH_WaitForLastOperation+0x58>)
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	06db      	lsls	r3, r3, #27
 8011f56:	d404      	bmi.n	8011f62 <FLASH_WaitForLastOperation+0x4a>
 8011f58:	4b05      	ldr	r3, [pc, #20]	; (8011f70 <FLASH_WaitForLastOperation+0x58>)
 8011f5a:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 8011f5c:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011f5e:	075b      	lsls	r3, r3, #29
 8011f60:	d502      	bpl.n	8011f68 <FLASH_WaitForLastOperation+0x50>
    FLASH_SetErrorCode();
 8011f62:	f7ff ffa3 	bl	8011eac <FLASH_SetErrorCode>
    return HAL_ERROR;
 8011f66:	2001      	movs	r0, #1
}
 8011f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8011f6a:	2003      	movs	r0, #3
 8011f6c:	e7fc      	b.n	8011f68 <FLASH_WaitForLastOperation+0x50>
 8011f6e:	46c0      	nop			; (mov r8, r8)
 8011f70:	40022000 	.word	0x40022000

08011f74 <HAL_FLASH_Program>:
{
 8011f74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f76:	46de      	mov	lr, fp
 8011f78:	4657      	mov	r7, sl
 8011f7a:	464e      	mov	r6, r9
 8011f7c:	4645      	mov	r5, r8
 8011f7e:	b5e0      	push	{r5, r6, r7, lr}
 8011f80:	b083      	sub	sp, #12
 8011f82:	0004      	movs	r4, r0
 8011f84:	000e      	movs	r6, r1
 8011f86:	9201      	str	r2, [sp, #4]
 8011f88:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011f8a:	4b2a      	ldr	r3, [pc, #168]	; (8012034 <HAL_FLASH_Program+0xc0>)
 8011f8c:	7e1b      	ldrb	r3, [r3, #24]
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d04b      	beq.n	801202a <HAL_FLASH_Program+0xb6>
 8011f92:	4b28      	ldr	r3, [pc, #160]	; (8012034 <HAL_FLASH_Program+0xc0>)
 8011f94:	2201      	movs	r2, #1
 8011f96:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011f98:	4827      	ldr	r0, [pc, #156]	; (8012038 <HAL_FLASH_Program+0xc4>)
 8011f9a:	f7ff ffbd 	bl	8011f18 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d139      	bne.n	8012016 <HAL_FLASH_Program+0xa2>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011fa2:	2c01      	cmp	r4, #1
 8011fa4:	d043      	beq.n	801202e <HAL_FLASH_Program+0xba>
      nbiterations = 4;
 8011fa6:	3c02      	subs	r4, #2
 8011fa8:	4263      	negs	r3, r4
 8011faa:	415c      	adcs	r4, r3
 8011fac:	4264      	negs	r4, r4
 8011fae:	2301      	movs	r3, #1
 8011fb0:	439c      	bics	r4, r3
 8011fb2:	46a0      	mov	r8, r4
 8011fb4:	3303      	adds	r3, #3
 8011fb6:	469c      	mov	ip, r3
 8011fb8:	44e0      	add	r8, ip
{
 8011fba:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011fbc:	4b1d      	ldr	r3, [pc, #116]	; (8012034 <HAL_FLASH_Program+0xc0>)
 8011fbe:	469b      	mov	fp, r3
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011fc4:	4c1d      	ldr	r4, [pc, #116]	; (801203c <HAL_FLASH_Program+0xc8>)
 8011fc6:	e01e      	b.n	8012006 <HAL_FLASH_Program+0x92>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011fc8:	2220      	movs	r2, #32
 8011fca:	1ad2      	subs	r2, r2, r3
 8011fcc:	4649      	mov	r1, r9
 8011fce:	4091      	lsls	r1, r2
 8011fd0:	000a      	movs	r2, r1
 8011fd2:	9901      	ldr	r1, [sp, #4]
 8011fd4:	40d9      	lsrs	r1, r3
 8011fd6:	000b      	movs	r3, r1
 8011fd8:	4313      	orrs	r3, r2
 8011fda:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011fdc:	465a      	mov	r2, fp
 8011fde:	4651      	mov	r1, sl
 8011fe0:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011fe2:	6922      	ldr	r2, [r4, #16]
 8011fe4:	2701      	movs	r7, #1
 8011fe6:	433a      	orrs	r2, r7
 8011fe8:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011fea:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011fec:	4812      	ldr	r0, [pc, #72]	; (8012038 <HAL_FLASH_Program+0xc4>)
 8011fee:	f7ff ff93 	bl	8011f18 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011ff2:	6923      	ldr	r3, [r4, #16]
 8011ff4:	43bb      	bics	r3, r7
 8011ff6:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	d10c      	bne.n	8012016 <HAL_FLASH_Program+0xa2>
 8011ffc:	3501      	adds	r5, #1
 8011ffe:	3602      	adds	r6, #2
    for (index = 0; index < nbiterations; index++)
 8012000:	b2eb      	uxtb	r3, r5
 8012002:	4598      	cmp	r8, r3
 8012004:	d907      	bls.n	8012016 <HAL_FLASH_Program+0xa2>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8012006:	012b      	lsls	r3, r5, #4
 8012008:	2220      	movs	r2, #32
 801200a:	4252      	negs	r2, r2
 801200c:	189a      	adds	r2, r3, r2
 801200e:	d4db      	bmi.n	8011fc8 <HAL_FLASH_Program+0x54>
 8012010:	464b      	mov	r3, r9
 8012012:	40d3      	lsrs	r3, r2
 8012014:	e7e1      	b.n	8011fda <HAL_FLASH_Program+0x66>
  __HAL_UNLOCK(&pFlash);
 8012016:	4b07      	ldr	r3, [pc, #28]	; (8012034 <HAL_FLASH_Program+0xc0>)
 8012018:	2200      	movs	r2, #0
 801201a:	761a      	strb	r2, [r3, #24]
}
 801201c:	b003      	add	sp, #12
 801201e:	bc3c      	pop	{r2, r3, r4, r5}
 8012020:	4690      	mov	r8, r2
 8012022:	4699      	mov	r9, r3
 8012024:	46a2      	mov	sl, r4
 8012026:	46ab      	mov	fp, r5
 8012028:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 801202a:	2002      	movs	r0, #2
 801202c:	e7f6      	b.n	801201c <HAL_FLASH_Program+0xa8>
      nbiterations = 1;
 801202e:	2301      	movs	r3, #1
 8012030:	4698      	mov	r8, r3
 8012032:	e7c2      	b.n	8011fba <HAL_FLASH_Program+0x46>
 8012034:	200073d0 	.word	0x200073d0
 8012038:	0000c350 	.word	0x0000c350
 801203c:	40022000 	.word	0x40022000

08012040 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012040:	4b06      	ldr	r3, [pc, #24]	; (801205c <FLASH_MassErase+0x1c>)
 8012042:	2200      	movs	r2, #0
 8012044:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8012046:	4b06      	ldr	r3, [pc, #24]	; (8012060 <FLASH_MassErase+0x20>)
 8012048:	691a      	ldr	r2, [r3, #16]
 801204a:	2104      	movs	r1, #4
 801204c:	430a      	orrs	r2, r1
 801204e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012050:	691a      	ldr	r2, [r3, #16]
 8012052:	313c      	adds	r1, #60	; 0x3c
 8012054:	430a      	orrs	r2, r1
 8012056:	611a      	str	r2, [r3, #16]
}
 8012058:	4770      	bx	lr
 801205a:	46c0      	nop			; (mov r8, r8)
 801205c:	200073d0 	.word	0x200073d0
 8012060:	40022000 	.word	0x40022000

08012064 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8012064:	4b06      	ldr	r3, [pc, #24]	; (8012080 <FLASH_PageErase+0x1c>)
 8012066:	2200      	movs	r2, #0
 8012068:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 801206a:	4b06      	ldr	r3, [pc, #24]	; (8012084 <FLASH_PageErase+0x20>)
 801206c:	691a      	ldr	r2, [r3, #16]
 801206e:	2102      	movs	r1, #2
 8012070:	430a      	orrs	r2, r1
 8012072:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8012074:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8012076:	691a      	ldr	r2, [r3, #16]
 8012078:	313e      	adds	r1, #62	; 0x3e
 801207a:	430a      	orrs	r2, r1
 801207c:	611a      	str	r2, [r3, #16]
}
 801207e:	4770      	bx	lr
 8012080:	200073d0 	.word	0x200073d0
 8012084:	40022000 	.word	0x40022000

08012088 <HAL_FLASHEx_Erase>:
{
 8012088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801208a:	46c6      	mov	lr, r8
 801208c:	b500      	push	{lr}
 801208e:	0006      	movs	r6, r0
 8012090:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8012092:	4b2a      	ldr	r3, [pc, #168]	; (801213c <HAL_FLASHEx_Erase+0xb4>)
 8012094:	7e1b      	ldrb	r3, [r3, #24]
 8012096:	2b01      	cmp	r3, #1
 8012098:	d04d      	beq.n	8012136 <HAL_FLASHEx_Erase+0xae>
 801209a:	4b28      	ldr	r3, [pc, #160]	; (801213c <HAL_FLASHEx_Erase+0xb4>)
 801209c:	2201      	movs	r2, #1
 801209e:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80120a0:	6803      	ldr	r3, [r0, #0]
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d029      	beq.n	80120fa <HAL_FLASHEx_Erase+0x72>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120a6:	4826      	ldr	r0, [pc, #152]	; (8012140 <HAL_FLASHEx_Erase+0xb8>)
 80120a8:	f7ff ff36 	bl	8011f18 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 80120ac:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d129      	bne.n	8012106 <HAL_FLASHEx_Erase+0x7e>
        *PageError = 0xFFFFFFFF;
 80120b2:	2301      	movs	r3, #1
 80120b4:	425b      	negs	r3, r3
 80120b6:	4642      	mov	r2, r8
 80120b8:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 80120ba:	6874      	ldr	r4, [r6, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80120bc:	68b3      	ldr	r3, [r6, #8]
 80120be:	02db      	lsls	r3, r3, #11
 80120c0:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 80120c2:	429c      	cmp	r4, r3
 80120c4:	d235      	bcs.n	8012132 <HAL_FLASHEx_Erase+0xaa>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80120c6:	4f1f      	ldr	r7, [pc, #124]	; (8012144 <HAL_FLASHEx_Erase+0xbc>)
 80120c8:	2502      	movs	r5, #2
          FLASH_PageErase(address);
 80120ca:	0020      	movs	r0, r4
 80120cc:	f7ff ffca 	bl	8012064 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80120d0:	481b      	ldr	r0, [pc, #108]	; (8012140 <HAL_FLASHEx_Erase+0xb8>)
 80120d2:	f7ff ff21 	bl	8011f18 <FLASH_WaitForLastOperation>
 80120d6:	0002      	movs	r2, r0
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	43ab      	bics	r3, r5
 80120dc:	613b      	str	r3, [r7, #16]
          if (status != HAL_OK)
 80120de:	2800      	cmp	r0, #0
 80120e0:	d124      	bne.n	801212c <HAL_FLASHEx_Erase+0xa4>
            address += FLASH_PAGE_SIZE)
 80120e2:	2380      	movs	r3, #128	; 0x80
 80120e4:	011b      	lsls	r3, r3, #4
 80120e6:	469c      	mov	ip, r3
 80120e8:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80120ea:	68b3      	ldr	r3, [r6, #8]
 80120ec:	02db      	lsls	r3, r3, #11
 80120ee:	6871      	ldr	r1, [r6, #4]
 80120f0:	468c      	mov	ip, r1
 80120f2:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 80120f4:	42a3      	cmp	r3, r4
 80120f6:	d8e8      	bhi.n	80120ca <HAL_FLASHEx_Erase+0x42>
 80120f8:	e005      	b.n	8012106 <HAL_FLASHEx_Erase+0x7e>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80120fa:	4811      	ldr	r0, [pc, #68]	; (8012140 <HAL_FLASHEx_Erase+0xb8>)
 80120fc:	f7ff ff0c 	bl	8011f18 <FLASH_WaitForLastOperation>
  HAL_StatusTypeDef status = HAL_ERROR;
 8012100:	2201      	movs	r2, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8012102:	2800      	cmp	r0, #0
 8012104:	d006      	beq.n	8012114 <HAL_FLASHEx_Erase+0x8c>
  __HAL_UNLOCK(&pFlash);
 8012106:	4b0d      	ldr	r3, [pc, #52]	; (801213c <HAL_FLASHEx_Erase+0xb4>)
 8012108:	2100      	movs	r1, #0
 801210a:	7619      	strb	r1, [r3, #24]
}
 801210c:	0010      	movs	r0, r2
 801210e:	bc04      	pop	{r2}
 8012110:	4690      	mov	r8, r2
 8012112:	bdf0      	pop	{r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8012114:	f7ff ff94 	bl	8012040 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8012118:	4809      	ldr	r0, [pc, #36]	; (8012140 <HAL_FLASHEx_Erase+0xb8>)
 801211a:	f7ff fefd 	bl	8011f18 <FLASH_WaitForLastOperation>
 801211e:	0002      	movs	r2, r0
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8012120:	4908      	ldr	r1, [pc, #32]	; (8012144 <HAL_FLASHEx_Erase+0xbc>)
 8012122:	690b      	ldr	r3, [r1, #16]
 8012124:	2004      	movs	r0, #4
 8012126:	4383      	bics	r3, r0
 8012128:	610b      	str	r3, [r1, #16]
 801212a:	e7ec      	b.n	8012106 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 801212c:	4643      	mov	r3, r8
 801212e:	601c      	str	r4, [r3, #0]
            break;
 8012130:	e7e9      	b.n	8012106 <HAL_FLASHEx_Erase+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8012132:	2201      	movs	r2, #1
 8012134:	e7e7      	b.n	8012106 <HAL_FLASHEx_Erase+0x7e>
  __HAL_LOCK(&pFlash);
 8012136:	2202      	movs	r2, #2
 8012138:	e7e8      	b.n	801210c <HAL_FLASHEx_Erase+0x84>
 801213a:	46c0      	nop			; (mov r8, r8)
 801213c:	200073d0 	.word	0x200073d0
 8012140:	0000c350 	.word	0x0000c350
 8012144:	40022000 	.word	0x40022000

08012148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8012148:	b5f0      	push	{r4, r5, r6, r7, lr}
 801214a:	46de      	mov	lr, fp
 801214c:	4657      	mov	r7, sl
 801214e:	464e      	mov	r6, r9
 8012150:	4645      	mov	r5, r8
 8012152:	b5e0      	push	{r5, r6, r7, lr}
 8012154:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8012156:	680a      	ldr	r2, [r1, #0]
 8012158:	2a00      	cmp	r2, #0
 801215a:	d100      	bne.n	801215e <HAL_GPIO_Init+0x16>
 801215c:	e0bf      	b.n	80122de <HAL_GPIO_Init+0x196>
  uint32_t position = 0x00;
 801215e:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8012160:	2601      	movs	r6, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8012162:	2410      	movs	r4, #16
 8012164:	46a0      	mov	r8, r4
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8012166:	3c0d      	subs	r4, #13
 8012168:	46a4      	mov	ip, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 801216a:	2480      	movs	r4, #128	; 0x80
 801216c:	0564      	lsls	r4, r4, #21
 801216e:	46a2      	mov	sl, r4
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8012170:	4c5e      	ldr	r4, [pc, #376]	; (80122ec <HAL_GPIO_Init+0x1a4>)
 8012172:	1904      	adds	r4, r0, r4
 8012174:	1e65      	subs	r5, r4, #1
 8012176:	41ac      	sbcs	r4, r5
 8012178:	3404      	adds	r4, #4
 801217a:	46a1      	mov	r9, r4
 801217c:	e03b      	b.n	80121f6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->AFR[position >> 3];
 801217e:	08dc      	lsrs	r4, r3, #3
 8012180:	00a4      	lsls	r4, r4, #2
 8012182:	1904      	adds	r4, r0, r4
 8012184:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8012186:	2507      	movs	r5, #7
 8012188:	401d      	ands	r5, r3
 801218a:	00ad      	lsls	r5, r5, #2
 801218c:	220f      	movs	r2, #15
 801218e:	40aa      	lsls	r2, r5
 8012190:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8012192:	690a      	ldr	r2, [r1, #16]
 8012194:	40aa      	lsls	r2, r5
 8012196:	0015      	movs	r5, r2
 8012198:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3] = temp;
 801219a:	6225      	str	r5, [r4, #32]
 801219c:	e035      	b.n	801220a <HAL_GPIO_Init+0xc2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801219e:	2500      	movs	r5, #0
 80121a0:	465a      	mov	r2, fp
 80121a2:	4095      	lsls	r5, r2
 80121a4:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80121a6:	60a5      	str	r5, [r4, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80121a8:	4c51      	ldr	r4, [pc, #324]	; (80122f0 <HAL_GPIO_Init+0x1a8>)
 80121aa:	6824      	ldr	r4, [r4, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80121ac:	9a01      	ldr	r2, [sp, #4]
 80121ae:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80121b0:	684a      	ldr	r2, [r1, #4]
 80121b2:	03d2      	lsls	r2, r2, #15
 80121b4:	d500      	bpl.n	80121b8 <HAL_GPIO_Init+0x70>
 80121b6:	e086      	b.n	80122c6 <HAL_GPIO_Init+0x17e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80121b8:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80121ba:	4f4d      	ldr	r7, [pc, #308]	; (80122f0 <HAL_GPIO_Init+0x1a8>)
 80121bc:	603c      	str	r4, [r7, #0]

        temp = EXTI->EMR;
 80121be:	687c      	ldr	r4, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80121c0:	684a      	ldr	r2, [r1, #4]
 80121c2:	0392      	lsls	r2, r2, #14
 80121c4:	d500      	bpl.n	80121c8 <HAL_GPIO_Init+0x80>
 80121c6:	e081      	b.n	80122cc <HAL_GPIO_Init+0x184>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80121c8:	402c      	ands	r4, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 80121ca:	4f49      	ldr	r7, [pc, #292]	; (80122f0 <HAL_GPIO_Init+0x1a8>)
 80121cc:	607c      	str	r4, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80121ce:	68bc      	ldr	r4, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80121d0:	684a      	ldr	r2, [r1, #4]
 80121d2:	02d2      	lsls	r2, r2, #11
 80121d4:	d47d      	bmi.n	80122d2 <HAL_GPIO_Init+0x18a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80121d6:	402c      	ands	r4, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 80121d8:	4f45      	ldr	r7, [pc, #276]	; (80122f0 <HAL_GPIO_Init+0x1a8>)
 80121da:	60bc      	str	r4, [r7, #8]

        temp = EXTI->FTSR;
 80121dc:	68fc      	ldr	r4, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80121de:	684a      	ldr	r2, [r1, #4]
 80121e0:	0292      	lsls	r2, r2, #10
 80121e2:	d479      	bmi.n	80122d8 <HAL_GPIO_Init+0x190>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80121e4:	0022      	movs	r2, r4
 80121e6:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 80121e8:	4c41      	ldr	r4, [pc, #260]	; (80122f0 <HAL_GPIO_Init+0x1a8>)
 80121ea:	60e2      	str	r2, [r4, #12]
      }
    }
    
    position++;
 80121ec:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 80121ee:	680a      	ldr	r2, [r1, #0]
 80121f0:	0014      	movs	r4, r2
 80121f2:	40dc      	lsrs	r4, r3
 80121f4:	d073      	beq.n	80122de <HAL_GPIO_Init+0x196>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 80121f6:	0034      	movs	r4, r6
 80121f8:	409c      	lsls	r4, r3
 80121fa:	4022      	ands	r2, r4
 80121fc:	9201      	str	r2, [sp, #4]
    if(iocurrent)
 80121fe:	d0f5      	beq.n	80121ec <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8012200:	684c      	ldr	r4, [r1, #4]
 8012202:	4642      	mov	r2, r8
 8012204:	4394      	bics	r4, r2
 8012206:	2c02      	cmp	r4, #2
 8012208:	d0b9      	beq.n	801217e <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 801220a:	6804      	ldr	r4, [r0, #0]
 801220c:	005f      	lsls	r7, r3, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 801220e:	4665      	mov	r5, ip
 8012210:	40bd      	lsls	r5, r7
 8012212:	43ed      	mvns	r5, r5
 8012214:	402c      	ands	r4, r5
 8012216:	46a3      	mov	fp, r4
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8012218:	684c      	ldr	r4, [r1, #4]
 801221a:	4662      	mov	r2, ip
 801221c:	4014      	ands	r4, r2
 801221e:	40bc      	lsls	r4, r7
 8012220:	465a      	mov	r2, fp
 8012222:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8012224:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012226:	684c      	ldr	r4, [r1, #4]
 8012228:	4642      	mov	r2, r8
 801222a:	4394      	bics	r4, r2
 801222c:	3c01      	subs	r4, #1
 801222e:	2c01      	cmp	r4, #1
 8012230:	d813      	bhi.n	801225a <HAL_GPIO_Init+0x112>
        temp = GPIOx->OSPEEDR; 
 8012232:	6884      	ldr	r4, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012234:	402c      	ands	r4, r5
 8012236:	46a3      	mov	fp, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8012238:	68cc      	ldr	r4, [r1, #12]
 801223a:	40bc      	lsls	r4, r7
 801223c:	465a      	mov	r2, fp
 801223e:	4314      	orrs	r4, r2
        GPIOx->OSPEEDR = temp;
 8012240:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8012242:	6844      	ldr	r4, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8012244:	0032      	movs	r2, r6
 8012246:	409a      	lsls	r2, r3
 8012248:	4394      	bics	r4, r2
 801224a:	46a3      	mov	fp, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 801224c:	684a      	ldr	r2, [r1, #4]
 801224e:	0914      	lsrs	r4, r2, #4
 8012250:	4034      	ands	r4, r6
 8012252:	409c      	lsls	r4, r3
 8012254:	465a      	mov	r2, fp
 8012256:	4314      	orrs	r4, r2
        GPIOx->OTYPER = temp;
 8012258:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 801225a:	68c4      	ldr	r4, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 801225c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 801225e:	688d      	ldr	r5, [r1, #8]
 8012260:	40bd      	lsls	r5, r7
 8012262:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8012264:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8012266:	684a      	ldr	r2, [r1, #4]
 8012268:	4654      	mov	r4, sl
 801226a:	4222      	tst	r2, r4
 801226c:	d0be      	beq.n	80121ec <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801226e:	4c21      	ldr	r4, [pc, #132]	; (80122f4 <HAL_GPIO_Init+0x1ac>)
 8012270:	69a5      	ldr	r5, [r4, #24]
 8012272:	4335      	orrs	r5, r6
 8012274:	61a5      	str	r5, [r4, #24]
 8012276:	69a4      	ldr	r4, [r4, #24]
 8012278:	4034      	ands	r4, r6
 801227a:	9403      	str	r4, [sp, #12]
 801227c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 801227e:	089c      	lsrs	r4, r3, #2
 8012280:	00a4      	lsls	r4, r4, #2
 8012282:	4a1d      	ldr	r2, [pc, #116]	; (80122f8 <HAL_GPIO_Init+0x1b0>)
 8012284:	4693      	mov	fp, r2
 8012286:	445c      	add	r4, fp
 8012288:	68a5      	ldr	r5, [r4, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 801228a:	4667      	mov	r7, ip
 801228c:	401f      	ands	r7, r3
 801228e:	00ba      	lsls	r2, r7, #2
 8012290:	4693      	mov	fp, r2
 8012292:	270f      	movs	r7, #15
 8012294:	4097      	lsls	r7, r2
 8012296:	43bd      	bics	r5, r7
 8012298:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801229a:	2590      	movs	r5, #144	; 0x90
 801229c:	05ed      	lsls	r5, r5, #23
 801229e:	42a8      	cmp	r0, r5
 80122a0:	d100      	bne.n	80122a4 <HAL_GPIO_Init+0x15c>
 80122a2:	e77c      	b.n	801219e <HAL_GPIO_Init+0x56>
 80122a4:	4d15      	ldr	r5, [pc, #84]	; (80122fc <HAL_GPIO_Init+0x1b4>)
 80122a6:	42a8      	cmp	r0, r5
 80122a8:	d007      	beq.n	80122ba <HAL_GPIO_Init+0x172>
 80122aa:	4d15      	ldr	r5, [pc, #84]	; (8012300 <HAL_GPIO_Init+0x1b8>)
 80122ac:	42a8      	cmp	r0, r5
 80122ae:	d006      	beq.n	80122be <HAL_GPIO_Init+0x176>
 80122b0:	4d14      	ldr	r5, [pc, #80]	; (8012304 <HAL_GPIO_Init+0x1bc>)
 80122b2:	42a8      	cmp	r0, r5
 80122b4:	d005      	beq.n	80122c2 <HAL_GPIO_Init+0x17a>
 80122b6:	464d      	mov	r5, r9
 80122b8:	e772      	b.n	80121a0 <HAL_GPIO_Init+0x58>
 80122ba:	0035      	movs	r5, r6
 80122bc:	e770      	b.n	80121a0 <HAL_GPIO_Init+0x58>
 80122be:	2502      	movs	r5, #2
 80122c0:	e76e      	b.n	80121a0 <HAL_GPIO_Init+0x58>
 80122c2:	4665      	mov	r5, ip
 80122c4:	e76c      	b.n	80121a0 <HAL_GPIO_Init+0x58>
          SET_BIT(temp, iocurrent); 
 80122c6:	9a01      	ldr	r2, [sp, #4]
 80122c8:	4314      	orrs	r4, r2
 80122ca:	e776      	b.n	80121ba <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 80122cc:	9a01      	ldr	r2, [sp, #4]
 80122ce:	4314      	orrs	r4, r2
 80122d0:	e77b      	b.n	80121ca <HAL_GPIO_Init+0x82>
          SET_BIT(temp, iocurrent); 
 80122d2:	9a01      	ldr	r2, [sp, #4]
 80122d4:	4314      	orrs	r4, r2
 80122d6:	e77f      	b.n	80121d8 <HAL_GPIO_Init+0x90>
          SET_BIT(temp, iocurrent); 
 80122d8:	9a01      	ldr	r2, [sp, #4]
 80122da:	4322      	orrs	r2, r4
 80122dc:	e784      	b.n	80121e8 <HAL_GPIO_Init+0xa0>
  } 
}
 80122de:	b005      	add	sp, #20
 80122e0:	bc3c      	pop	{r2, r3, r4, r5}
 80122e2:	4690      	mov	r8, r2
 80122e4:	4699      	mov	r9, r3
 80122e6:	46a2      	mov	sl, r4
 80122e8:	46ab      	mov	fp, r5
 80122ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122ec:	b7fff000 	.word	0xb7fff000
 80122f0:	40010400 	.word	0x40010400
 80122f4:	40021000 	.word	0x40021000
 80122f8:	40010000 	.word	0x40010000
 80122fc:	48000400 	.word	0x48000400
 8012300:	48000800 	.word	0x48000800
 8012304:	48000c00 	.word	0x48000c00

08012308 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8012308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801230a:	46de      	mov	lr, fp
 801230c:	4657      	mov	r7, sl
 801230e:	464e      	mov	r6, r9
 8012310:	4645      	mov	r5, r8
 8012312:	b5e0      	push	{r5, r6, r7, lr}
 8012314:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while (GPIO_Pin >> position)
 8012316:	2900      	cmp	r1, #0
 8012318:	d071      	beq.n	80123fe <HAL_GPIO_DeInit+0xf6>
  uint32_t position = 0x00;
 801231a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1 << position);
 801231c:	2201      	movs	r2, #1
 801231e:	4694      	mov	ip, r2

    if (iocurrent)
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 8012320:	3202      	adds	r2, #2
 8012322:	4690      	mov	r8, r2
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012324:	3204      	adds	r2, #4
 8012326:	4693      	mov	fp, r2
 8012328:	3208      	adds	r2, #8
 801232a:	4692      	mov	sl, r2
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 801232c:	4a37      	ldr	r2, [pc, #220]	; (801240c <HAL_GPIO_DeInit+0x104>)
 801232e:	1882      	adds	r2, r0, r2
 8012330:	1e54      	subs	r4, r2, #1
 8012332:	41a2      	sbcs	r2, r4
 8012334:	3204      	adds	r2, #4
 8012336:	9201      	str	r2, [sp, #4]
 8012338:	9100      	str	r1, [sp, #0]
 801233a:	e009      	b.n	8012350 <HAL_GPIO_DeInit+0x48>
 801233c:	2100      	movs	r1, #0
 801233e:	4689      	mov	r9, r1
 8012340:	4649      	mov	r1, r9
 8012342:	40a9      	lsls	r1, r5
 8012344:	42b1      	cmp	r1, r6
 8012346:	d048      	beq.n	80123da <HAL_GPIO_DeInit+0xd2>
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
      }
    }
    
    position++;
 8012348:	3301      	adds	r3, #1
  while (GPIO_Pin >> position)
 801234a:	9a00      	ldr	r2, [sp, #0]
 801234c:	40da      	lsrs	r2, r3
 801234e:	d056      	beq.n	80123fe <HAL_GPIO_DeInit+0xf6>
    iocurrent = (GPIO_Pin) & (1 << position);
 8012350:	4662      	mov	r2, ip
 8012352:	409a      	lsls	r2, r3
 8012354:	9900      	ldr	r1, [sp, #0]
 8012356:	400a      	ands	r2, r1
    if (iocurrent)
 8012358:	d0f6      	beq.n	8012348 <HAL_GPIO_DeInit+0x40>
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2)); 
 801235a:	6804      	ldr	r4, [r0, #0]
 801235c:	005d      	lsls	r5, r3, #1
 801235e:	4646      	mov	r6, r8
 8012360:	40ae      	lsls	r6, r5
 8012362:	43f5      	mvns	r5, r6
 8012364:	402c      	ands	r4, r5
 8012366:	6004      	str	r4, [r0, #0]
      CLEAR_BIT(GPIOx->AFR[position >> 3], (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012368:	08dc      	lsrs	r4, r3, #3
 801236a:	00a4      	lsls	r4, r4, #2
 801236c:	1904      	adds	r4, r0, r4
 801236e:	6a26      	ldr	r6, [r4, #32]
 8012370:	465f      	mov	r7, fp
 8012372:	401f      	ands	r7, r3
 8012374:	00bf      	lsls	r7, r7, #2
 8012376:	4651      	mov	r1, sl
 8012378:	40b9      	lsls	r1, r7
 801237a:	438e      	bics	r6, r1
 801237c:	6226      	str	r6, [r4, #32]
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801237e:	6884      	ldr	r4, [r0, #8]
 8012380:	402c      	ands	r4, r5
 8012382:	6084      	str	r4, [r0, #8]
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8012384:	6844      	ldr	r4, [r0, #4]
 8012386:	4666      	mov	r6, ip
 8012388:	409e      	lsls	r6, r3
 801238a:	43b4      	bics	r4, r6
 801238c:	6044      	str	r4, [r0, #4]
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2));
 801238e:	68c4      	ldr	r4, [r0, #12]
 8012390:	4025      	ands	r5, r4
 8012392:	60c5      	str	r5, [r0, #12]
      tmp = SYSCFG->EXTICR[position >> 2];
 8012394:	089c      	lsrs	r4, r3, #2
 8012396:	00a4      	lsls	r4, r4, #2
 8012398:	491d      	ldr	r1, [pc, #116]	; (8012410 <HAL_GPIO_DeInit+0x108>)
 801239a:	4689      	mov	r9, r1
 801239c:	444c      	add	r4, r9
 801239e:	68a6      	ldr	r6, [r4, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80123a0:	4645      	mov	r5, r8
 80123a2:	401d      	ands	r5, r3
 80123a4:	00ad      	lsls	r5, r5, #2
 80123a6:	4657      	mov	r7, sl
 80123a8:	40af      	lsls	r7, r5
 80123aa:	403e      	ands	r6, r7
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03))))
 80123ac:	2190      	movs	r1, #144	; 0x90
 80123ae:	05c9      	lsls	r1, r1, #23
 80123b0:	4288      	cmp	r0, r1
 80123b2:	d0c3      	beq.n	801233c <HAL_GPIO_DeInit+0x34>
 80123b4:	4917      	ldr	r1, [pc, #92]	; (8012414 <HAL_GPIO_DeInit+0x10c>)
 80123b6:	4288      	cmp	r0, r1
 80123b8:	d008      	beq.n	80123cc <HAL_GPIO_DeInit+0xc4>
 80123ba:	4917      	ldr	r1, [pc, #92]	; (8012418 <HAL_GPIO_DeInit+0x110>)
 80123bc:	4288      	cmp	r0, r1
 80123be:	d007      	beq.n	80123d0 <HAL_GPIO_DeInit+0xc8>
 80123c0:	4916      	ldr	r1, [pc, #88]	; (801241c <HAL_GPIO_DeInit+0x114>)
 80123c2:	4288      	cmp	r0, r1
 80123c4:	d007      	beq.n	80123d6 <HAL_GPIO_DeInit+0xce>
 80123c6:	9901      	ldr	r1, [sp, #4]
 80123c8:	4689      	mov	r9, r1
 80123ca:	e7b9      	b.n	8012340 <HAL_GPIO_DeInit+0x38>
 80123cc:	46e1      	mov	r9, ip
 80123ce:	e7b7      	b.n	8012340 <HAL_GPIO_DeInit+0x38>
 80123d0:	2102      	movs	r1, #2
 80123d2:	4689      	mov	r9, r1
 80123d4:	e7b4      	b.n	8012340 <HAL_GPIO_DeInit+0x38>
 80123d6:	46c1      	mov	r9, r8
 80123d8:	e7b2      	b.n	8012340 <HAL_GPIO_DeInit+0x38>
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2], tmp);
 80123da:	68a5      	ldr	r5, [r4, #8]
 80123dc:	43bd      	bics	r5, r7
 80123de:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80123e0:	4c0f      	ldr	r4, [pc, #60]	; (8012420 <HAL_GPIO_DeInit+0x118>)
 80123e2:	6825      	ldr	r5, [r4, #0]
 80123e4:	43d2      	mvns	r2, r2
 80123e6:	4015      	ands	r5, r2
 80123e8:	6025      	str	r5, [r4, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80123ea:	6865      	ldr	r5, [r4, #4]
 80123ec:	4015      	ands	r5, r2
 80123ee:	6065      	str	r5, [r4, #4]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80123f0:	68a5      	ldr	r5, [r4, #8]
 80123f2:	4015      	ands	r5, r2
 80123f4:	60a5      	str	r5, [r4, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80123f6:	68e5      	ldr	r5, [r4, #12]
 80123f8:	402a      	ands	r2, r5
 80123fa:	60e2      	str	r2, [r4, #12]
 80123fc:	e7a4      	b.n	8012348 <HAL_GPIO_DeInit+0x40>
  }
}
 80123fe:	b003      	add	sp, #12
 8012400:	bc3c      	pop	{r2, r3, r4, r5}
 8012402:	4690      	mov	r8, r2
 8012404:	4699      	mov	r9, r3
 8012406:	46a2      	mov	sl, r4
 8012408:	46ab      	mov	fp, r5
 801240a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801240c:	b7fff000 	.word	0xb7fff000
 8012410:	40010000 	.word	0x40010000
 8012414:	48000400 	.word	0x48000400
 8012418:	48000800 	.word	0x48000800
 801241c:	48000c00 	.word	0x48000c00
 8012420:	40010400 	.word	0x40010400

08012424 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012424:	6900      	ldr	r0, [r0, #16]
 8012426:	4008      	ands	r0, r1
 8012428:	1e41      	subs	r1, r0, #1
 801242a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 801242c:	b2c0      	uxtb	r0, r0
  }
 801242e:	4770      	bx	lr

08012430 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8012430:	2a00      	cmp	r2, #0
 8012432:	d101      	bne.n	8012438 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8012434:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8012436:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8012438:	6181      	str	r1, [r0, #24]
 801243a:	e7fc      	b.n	8012436 <HAL_GPIO_WritePin+0x6>

0801243c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 801243c:	6943      	ldr	r3, [r0, #20]
 801243e:	4059      	eors	r1, r3
 8012440:	6141      	str	r1, [r0, #20]
}
 8012442:	4770      	bx	lr

08012444 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8012444:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8012446:	6804      	ldr	r4, [r0, #0]
 8012448:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 801244a:	4d06      	ldr	r5, [pc, #24]	; (8012464 <I2C_TransferConfig+0x20>)
 801244c:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 801244e:	0412      	lsls	r2, r2, #16
 8012450:	9d03      	ldr	r5, [sp, #12]
 8012452:	432b      	orrs	r3, r5
 8012454:	431a      	orrs	r2, r3
 8012456:	0589      	lsls	r1, r1, #22
 8012458:	0d89      	lsrs	r1, r1, #22
 801245a:	430a      	orrs	r2, r1
 801245c:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 801245e:	6062      	str	r2, [r4, #4]
}  
 8012460:	bd30      	pop	{r4, r5, pc}
 8012462:	46c0      	nop			; (mov r8, r8)
 8012464:	fc009800 	.word	0xfc009800

08012468 <I2C_IsAcknowledgeFailed>:
{
 8012468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246a:	0007      	movs	r7, r0
 801246c:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 801246e:	f7fe fb6f 	bl	8010b50 <HAL_GetTick>
 8012472:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8012478:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 801247a:	06d2      	lsls	r2, r2, #27
 801247c:	d53c      	bpl.n	80124f8 <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 801247e:	2235      	movs	r2, #53	; 0x35
 8012480:	5cba      	ldrb	r2, [r7, r2]
 8012482:	2a12      	cmp	r2, #18
 8012484:	d007      	beq.n	8012496 <I2C_IsAcknowledgeFailed+0x2e>
 8012486:	2235      	movs	r2, #53	; 0x35
 8012488:	5cba      	ldrb	r2, [r7, r2]
 801248a:	2a52      	cmp	r2, #82	; 0x52
 801248c:	d003      	beq.n	8012496 <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 801248e:	2235      	movs	r2, #53	; 0x35
 8012490:	5cba      	ldrb	r2, [r7, r2]
 8012492:	2a62      	cmp	r2, #98	; 0x62
 8012494:	d107      	bne.n	80124a6 <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8012496:	685a      	ldr	r2, [r3, #4]
 8012498:	0192      	lsls	r2, r2, #6
 801249a:	d404      	bmi.n	80124a6 <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801249c:	6859      	ldr	r1, [r3, #4]
 801249e:	2280      	movs	r2, #128	; 0x80
 80124a0:	01d2      	lsls	r2, r2, #7
 80124a2:	430a      	orrs	r2, r1
 80124a4:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80124a6:	2620      	movs	r6, #32
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	6993      	ldr	r3, [r2, #24]
 80124ac:	421e      	tst	r6, r3
 80124ae:	d110      	bne.n	80124d2 <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 80124b0:	1c63      	adds	r3, r4, #1
 80124b2:	d0fa      	beq.n	80124aa <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80124b4:	2c00      	cmp	r4, #0
 80124b6:	d004      	beq.n	80124c2 <I2C_IsAcknowledgeFailed+0x5a>
 80124b8:	f7fe fb4a 	bl	8010b50 <HAL_GetTick>
 80124bc:	1b40      	subs	r0, r0, r5
 80124be:	42a0      	cmp	r0, r4
 80124c0:	d9f2      	bls.n	80124a8 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 80124c2:	2335      	movs	r3, #53	; 0x35
 80124c4:	2201      	movs	r2, #1
 80124c6:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 80124c8:	3b01      	subs	r3, #1
 80124ca:	2200      	movs	r2, #0
 80124cc:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 80124ce:	2003      	movs	r0, #3
 80124d0:	e012      	b.n	80124f8 <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80124d2:	2310      	movs	r3, #16
 80124d4:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2220      	movs	r2, #32
 80124da:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80124dc:	683a      	ldr	r2, [r7, #0]
 80124de:	6853      	ldr	r3, [r2, #4]
 80124e0:	4906      	ldr	r1, [pc, #24]	; (80124fc <I2C_IsAcknowledgeFailed+0x94>)
 80124e2:	400b      	ands	r3, r1
 80124e4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80124e6:	2304      	movs	r3, #4
 80124e8:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 80124ea:	3331      	adds	r3, #49	; 0x31
 80124ec:	2201      	movs	r2, #1
 80124ee:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 80124f0:	3b01      	subs	r3, #1
 80124f2:	2200      	movs	r2, #0
 80124f4:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 80124f6:	2001      	movs	r0, #1
}
 80124f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124fa:	46c0      	nop			; (mov r8, r8)
 80124fc:	fe00e800 	.word	0xfe00e800

08012500 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8012500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012502:	0004      	movs	r4, r0
 8012504:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8012506:	f7fe fb23 	bl	8010b50 <HAL_GetTick>
 801250a:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801250c:	2702      	movs	r7, #2
 801250e:	6823      	ldr	r3, [r4, #0]
 8012510:	699b      	ldr	r3, [r3, #24]
 8012512:	421f      	tst	r7, r3
 8012514:	d11a      	bne.n	801254c <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8012516:	0029      	movs	r1, r5
 8012518:	0020      	movs	r0, r4
 801251a:	f7ff ffa5 	bl	8012468 <I2C_IsAcknowledgeFailed>
 801251e:	2800      	cmp	r0, #0
 8012520:	d116      	bne.n	8012550 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8012522:	1c6b      	adds	r3, r5, #1
 8012524:	d0f3      	beq.n	801250e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012526:	2d00      	cmp	r5, #0
 8012528:	d004      	beq.n	8012534 <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 801252a:	f7fe fb11 	bl	8010b50 <HAL_GetTick>
 801252e:	1b80      	subs	r0, r0, r6
 8012530:	42a8      	cmp	r0, r5
 8012532:	d9ec      	bls.n	801250e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8012534:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8012536:	2220      	movs	r2, #32
 8012538:	4313      	orrs	r3, r2
 801253a:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 801253c:	2335      	movs	r3, #53	; 0x35
 801253e:	3a1f      	subs	r2, #31
 8012540:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8012542:	3b01      	subs	r3, #1
 8012544:	2200      	movs	r2, #0
 8012546:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8012548:	2003      	movs	r0, #3
 801254a:	e000      	b.n	801254e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 801254c:	2000      	movs	r0, #0
}
 801254e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8012550:	2001      	movs	r0, #1
 8012552:	e7fc      	b.n	801254e <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08012554 <I2C_WaitOnFlagUntilTimeout>:
{  
 8012554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012556:	46c6      	mov	lr, r8
 8012558:	b500      	push	{lr}
 801255a:	0006      	movs	r6, r0
 801255c:	000c      	movs	r4, r1
 801255e:	0017      	movs	r7, r2
 8012560:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8012562:	f7fe faf5 	bl	8010b50 <HAL_GetTick>
 8012566:	4680      	mov	r8, r0
  if(Status == RESET)
 8012568:	2f00      	cmp	r7, #0
 801256a:	d118      	bne.n	801259e <I2C_WaitOnFlagUntilTimeout+0x4a>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 801256c:	03e4      	lsls	r4, r4, #15
 801256e:	0be4      	lsrs	r4, r4, #15
 8012570:	6832      	ldr	r2, [r6, #0]
 8012572:	6993      	ldr	r3, [r2, #24]
 8012574:	0021      	movs	r1, r4
 8012576:	4399      	bics	r1, r3
 8012578:	d02a      	beq.n	80125d0 <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 801257a:	1c6b      	adds	r3, r5, #1
 801257c:	d0f9      	beq.n	8012572 <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 801257e:	2d00      	cmp	r5, #0
 8012580:	d005      	beq.n	801258e <I2C_WaitOnFlagUntilTimeout+0x3a>
 8012582:	f7fe fae5 	bl	8010b50 <HAL_GetTick>
 8012586:	4643      	mov	r3, r8
 8012588:	1ac0      	subs	r0, r0, r3
 801258a:	42a8      	cmp	r0, r5
 801258c:	d9f0      	bls.n	8012570 <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 801258e:	2335      	movs	r3, #53	; 0x35
 8012590:	2201      	movs	r2, #1
 8012592:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 8012594:	3b01      	subs	r3, #1
 8012596:	2200      	movs	r2, #0
 8012598:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 801259a:	2003      	movs	r0, #3
 801259c:	e019      	b.n	80125d2 <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 801259e:	03e4      	lsls	r4, r4, #15
 80125a0:	0be4      	lsrs	r4, r4, #15
 80125a2:	6832      	ldr	r2, [r6, #0]
 80125a4:	6993      	ldr	r3, [r2, #24]
 80125a6:	0021      	movs	r1, r4
 80125a8:	4399      	bics	r1, r3
 80125aa:	d115      	bne.n	80125d8 <I2C_WaitOnFlagUntilTimeout+0x84>
      if(Timeout != HAL_MAX_DELAY)
 80125ac:	1c6b      	adds	r3, r5, #1
 80125ae:	d0f9      	beq.n	80125a4 <I2C_WaitOnFlagUntilTimeout+0x50>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80125b0:	2d00      	cmp	r5, #0
 80125b2:	d005      	beq.n	80125c0 <I2C_WaitOnFlagUntilTimeout+0x6c>
 80125b4:	f7fe facc 	bl	8010b50 <HAL_GetTick>
 80125b8:	4643      	mov	r3, r8
 80125ba:	1ac0      	subs	r0, r0, r3
 80125bc:	42a8      	cmp	r0, r5
 80125be:	d9f0      	bls.n	80125a2 <I2C_WaitOnFlagUntilTimeout+0x4e>
          hi2c->State= HAL_I2C_STATE_READY;
 80125c0:	2335      	movs	r3, #53	; 0x35
 80125c2:	2201      	movs	r2, #1
 80125c4:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(hi2c);
 80125c6:	3b01      	subs	r3, #1
 80125c8:	2200      	movs	r2, #0
 80125ca:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 80125cc:	2003      	movs	r0, #3
 80125ce:	e000      	b.n	80125d2 <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 80125d0:	2000      	movs	r0, #0
}
 80125d2:	bc04      	pop	{r2}
 80125d4:	4690      	mov	r8, r2
 80125d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 80125d8:	2000      	movs	r0, #0
 80125da:	e7fa      	b.n	80125d2 <I2C_WaitOnFlagUntilTimeout+0x7e>

080125dc <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 80125dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125de:	0005      	movs	r5, r0
 80125e0:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 80125e2:	f7fe fab5 	bl	8010b50 <HAL_GetTick>
 80125e6:	0007      	movs	r7, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80125e8:	2620      	movs	r6, #32
 80125ea:	682b      	ldr	r3, [r5, #0]
 80125ec:	699b      	ldr	r3, [r3, #24]
 80125ee:	421e      	tst	r6, r3
 80125f0:	d118      	bne.n	8012624 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 80125f2:	0021      	movs	r1, r4
 80125f4:	0028      	movs	r0, r5
 80125f6:	f7ff ff37 	bl	8012468 <I2C_IsAcknowledgeFailed>
 80125fa:	2800      	cmp	r0, #0
 80125fc:	d114      	bne.n	8012628 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80125fe:	2c00      	cmp	r4, #0
 8012600:	d004      	beq.n	801260c <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 8012602:	f7fe faa5 	bl	8010b50 <HAL_GetTick>
 8012606:	1bc0      	subs	r0, r0, r7
 8012608:	42a0      	cmp	r0, r4
 801260a:	d9ee      	bls.n	80125ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801260c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801260e:	2220      	movs	r2, #32
 8012610:	4313      	orrs	r3, r2
 8012612:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8012614:	2335      	movs	r3, #53	; 0x35
 8012616:	3a1f      	subs	r2, #31
 8012618:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 801261a:	3b01      	subs	r3, #1
 801261c:	2200      	movs	r2, #0
 801261e:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 8012620:	2003      	movs	r0, #3
}
 8012622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8012624:	2000      	movs	r0, #0
 8012626:	e7fc      	b.n	8012622 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8012628:	2001      	movs	r0, #1
 801262a:	e7fa      	b.n	8012622 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0801262c <HAL_I2C_MspInit>:
}
 801262c:	4770      	bx	lr
	...

08012630 <HAL_I2C_Init>:
{ 
 8012630:	b510      	push	{r4, lr}
 8012632:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 8012634:	d051      	beq.n	80126da <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8012636:	2335      	movs	r3, #53	; 0x35
 8012638:	5cc3      	ldrb	r3, [r0, r3]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d03c      	beq.n	80126b8 <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801263e:	2335      	movs	r3, #53	; 0x35
 8012640:	2202      	movs	r2, #2
 8012642:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8012644:	6822      	ldr	r2, [r4, #0]
 8012646:	6813      	ldr	r3, [r2, #0]
 8012648:	2101      	movs	r1, #1
 801264a:	438b      	bics	r3, r1
 801264c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801264e:	6822      	ldr	r2, [r4, #0]
 8012650:	4b23      	ldr	r3, [pc, #140]	; (80126e0 <HAL_I2C_Init+0xb0>)
 8012652:	6861      	ldr	r1, [r4, #4]
 8012654:	400b      	ands	r3, r1
 8012656:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8012658:	6822      	ldr	r2, [r4, #0]
 801265a:	6893      	ldr	r3, [r2, #8]
 801265c:	4921      	ldr	r1, [pc, #132]	; (80126e4 <HAL_I2C_Init+0xb4>)
 801265e:	400b      	ands	r3, r1
 8012660:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 8012662:	68a3      	ldr	r3, [r4, #8]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d007      	beq.n	8012678 <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8012668:	68e2      	ldr	r2, [r4, #12]
 801266a:	2a01      	cmp	r2, #1
 801266c:	d02a      	beq.n	80126c4 <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801266e:	6821      	ldr	r1, [r4, #0]
 8012670:	2284      	movs	r2, #132	; 0x84
 8012672:	0212      	lsls	r2, r2, #8
 8012674:	4313      	orrs	r3, r2
 8012676:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8012678:	68e3      	ldr	r3, [r4, #12]
 801267a:	2b02      	cmp	r3, #2
 801267c:	d028      	beq.n	80126d0 <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801267e:	6822      	ldr	r2, [r4, #0]
 8012680:	6851      	ldr	r1, [r2, #4]
 8012682:	4b19      	ldr	r3, [pc, #100]	; (80126e8 <HAL_I2C_Init+0xb8>)
 8012684:	430b      	orrs	r3, r1
 8012686:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012688:	6821      	ldr	r1, [r4, #0]
 801268a:	6923      	ldr	r3, [r4, #16]
 801268c:	6962      	ldr	r2, [r4, #20]
 801268e:	4313      	orrs	r3, r2
 8012690:	69a2      	ldr	r2, [r4, #24]
 8012692:	0212      	lsls	r2, r2, #8
 8012694:	4313      	orrs	r3, r2
 8012696:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012698:	6822      	ldr	r2, [r4, #0]
 801269a:	69e3      	ldr	r3, [r4, #28]
 801269c:	6a21      	ldr	r1, [r4, #32]
 801269e:	430b      	orrs	r3, r1
 80126a0:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80126a2:	6821      	ldr	r1, [r4, #0]
 80126a4:	680b      	ldr	r3, [r1, #0]
 80126a6:	2201      	movs	r2, #1
 80126a8:	4313      	orrs	r3, r2
 80126aa:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80126ac:	2300      	movs	r3, #0
 80126ae:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 80126b0:	3335      	adds	r3, #53	; 0x35
 80126b2:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 80126b4:	2000      	movs	r0, #0
}
 80126b6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80126b8:	3334      	adds	r3, #52	; 0x34
 80126ba:	2200      	movs	r2, #0
 80126bc:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80126be:	f7ff ffb5 	bl	801262c <HAL_I2C_MspInit>
 80126c2:	e7bc      	b.n	801263e <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80126c4:	6821      	ldr	r1, [r4, #0]
 80126c6:	2280      	movs	r2, #128	; 0x80
 80126c8:	0212      	lsls	r2, r2, #8
 80126ca:	4313      	orrs	r3, r2
 80126cc:	608b      	str	r3, [r1, #8]
 80126ce:	e7d3      	b.n	8012678 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80126d0:	6823      	ldr	r3, [r4, #0]
 80126d2:	2280      	movs	r2, #128	; 0x80
 80126d4:	0112      	lsls	r2, r2, #4
 80126d6:	605a      	str	r2, [r3, #4]
 80126d8:	e7d1      	b.n	801267e <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 80126da:	2001      	movs	r0, #1
 80126dc:	e7eb      	b.n	80126b6 <HAL_I2C_Init+0x86>
 80126de:	46c0      	nop			; (mov r8, r8)
 80126e0:	f0ffffff 	.word	0xf0ffffff
 80126e4:	ffff7fff 	.word	0xffff7fff
 80126e8:	02008000 	.word	0x02008000

080126ec <HAL_I2C_Master_Transmit>:
{
 80126ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126ee:	b085      	sub	sp, #20
 80126f0:	0007      	movs	r7, r0
 80126f2:	9103      	str	r1, [sp, #12]
 80126f4:	0016      	movs	r6, r2
 80126f6:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 80126f8:	2335      	movs	r3, #53	; 0x35
 80126fa:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 80126fc:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80126fe:	2b01      	cmp	r3, #1
 8012700:	d000      	beq.n	8012704 <HAL_I2C_Master_Transmit+0x18>
 8012702:	e08c      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
    if((pData == NULL ) || (Size == 0)) 
 8012704:	2a00      	cmp	r2, #0
 8012706:	d100      	bne.n	801270a <HAL_I2C_Master_Transmit+0x1e>
 8012708:	e088      	b.n	801281c <HAL_I2C_Master_Transmit+0x130>
      return  HAL_ERROR;                                    
 801270a:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 801270c:	2c00      	cmp	r4, #0
 801270e:	d100      	bne.n	8012712 <HAL_I2C_Master_Transmit+0x26>
 8012710:	e085      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	699b      	ldr	r3, [r3, #24]
 8012716:	041b      	lsls	r3, r3, #16
 8012718:	d500      	bpl.n	801271c <HAL_I2C_Master_Transmit+0x30>
 801271a:	e082      	b.n	8012822 <HAL_I2C_Master_Transmit+0x136>
    __HAL_LOCK(hi2c);
 801271c:	2334      	movs	r3, #52	; 0x34
 801271e:	5cfb      	ldrb	r3, [r7, r3]
 8012720:	2b01      	cmp	r3, #1
 8012722:	d100      	bne.n	8012726 <HAL_I2C_Master_Transmit+0x3a>
 8012724:	e07f      	b.n	8012826 <HAL_I2C_Master_Transmit+0x13a>
 8012726:	2334      	movs	r3, #52	; 0x34
 8012728:	2201      	movs	r2, #1
 801272a:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_TX;
 801272c:	3301      	adds	r3, #1
 801272e:	3211      	adds	r2, #17
 8012730:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012732:	2300      	movs	r3, #0
 8012734:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 8012736:	2cff      	cmp	r4, #255	; 0xff
 8012738:	d90a      	bls.n	8012750 <HAL_I2C_Master_Transmit+0x64>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801273a:	3380      	adds	r3, #128	; 0x80
 801273c:	2280      	movs	r2, #128	; 0x80
 801273e:	0192      	lsls	r2, r2, #6
 8012740:	9200      	str	r2, [sp, #0]
 8012742:	045b      	lsls	r3, r3, #17
 8012744:	22ff      	movs	r2, #255	; 0xff
 8012746:	0038      	movs	r0, r7
 8012748:	f7ff fe7c 	bl	8012444 <I2C_TransferConfig>
      sizetmp = 255;
 801274c:	25ff      	movs	r5, #255	; 0xff
 801274e:	e037      	b.n	80127c0 <HAL_I2C_Master_Transmit+0xd4>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8012750:	2380      	movs	r3, #128	; 0x80
 8012752:	b2e2      	uxtb	r2, r4
 8012754:	2180      	movs	r1, #128	; 0x80
 8012756:	0189      	lsls	r1, r1, #6
 8012758:	9100      	str	r1, [sp, #0]
 801275a:	049b      	lsls	r3, r3, #18
 801275c:	9903      	ldr	r1, [sp, #12]
 801275e:	0038      	movs	r0, r7
 8012760:	f7ff fe70 	bl	8012444 <I2C_TransferConfig>
      sizetmp = Size;
 8012764:	0025      	movs	r5, r4
 8012766:	e02b      	b.n	80127c0 <HAL_I2C_Master_Transmit+0xd4>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012768:	6bb8      	ldr	r0, [r7, #56]	; 0x38
          return HAL_TIMEOUT;
 801276a:	3804      	subs	r0, #4
 801276c:	4243      	negs	r3, r0
 801276e:	4158      	adcs	r0, r3
 8012770:	4240      	negs	r0, r0
 8012772:	2301      	movs	r3, #1
 8012774:	4398      	bics	r0, r3
 8012776:	3003      	adds	r0, #3
 8012778:	e051      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 801277a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801277c:	2200      	movs	r2, #0
 801277e:	2180      	movs	r1, #128	; 0x80
 8012780:	0038      	movs	r0, r7
 8012782:	f7ff fee7 	bl	8012554 <I2C_WaitOnFlagUntilTimeout>
 8012786:	2800      	cmp	r0, #0
 8012788:	d14f      	bne.n	801282a <HAL_I2C_Master_Transmit+0x13e>
        if(Size > 255)
 801278a:	2cff      	cmp	r4, #255	; 0xff
 801278c:	d90a      	bls.n	80127a4 <HAL_I2C_Master_Transmit+0xb8>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801278e:	2300      	movs	r3, #0
 8012790:	9300      	str	r3, [sp, #0]
 8012792:	2380      	movs	r3, #128	; 0x80
 8012794:	045b      	lsls	r3, r3, #17
 8012796:	22ff      	movs	r2, #255	; 0xff
 8012798:	9903      	ldr	r1, [sp, #12]
 801279a:	0038      	movs	r0, r7
 801279c:	f7ff fe52 	bl	8012444 <I2C_TransferConfig>
          sizetmp = 255;
 80127a0:	35ff      	adds	r5, #255	; 0xff
 80127a2:	e00c      	b.n	80127be <HAL_I2C_Master_Transmit+0xd2>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80127a4:	b2e2      	uxtb	r2, r4
 80127a6:	2300      	movs	r3, #0
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	2380      	movs	r3, #128	; 0x80
 80127ac:	049b      	lsls	r3, r3, #18
 80127ae:	9903      	ldr	r1, [sp, #12]
 80127b0:	0038      	movs	r0, r7
 80127b2:	f7ff fe47 	bl	8012444 <I2C_TransferConfig>
          sizetmp = Size;
 80127b6:	0025      	movs	r5, r4
 80127b8:	e001      	b.n	80127be <HAL_I2C_Master_Transmit+0xd2>
    }while(Size > 0);
 80127ba:	2c00      	cmp	r4, #0
 80127bc:	d010      	beq.n	80127e0 <HAL_I2C_Master_Transmit+0xf4>
 80127be:	3601      	adds	r6, #1
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80127c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80127c2:	0038      	movs	r0, r7
 80127c4:	f7ff fe9c 	bl	8012500 <I2C_WaitOnTXISFlagUntilTimeout>
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d1cd      	bne.n	8012768 <HAL_I2C_Master_Transmit+0x7c>
      hi2c->Instance->TXDR = (*pData++);
 80127cc:	683b      	ldr	r3, [r7, #0]
 80127ce:	7832      	ldrb	r2, [r6, #0]
 80127d0:	629a      	str	r2, [r3, #40]	; 0x28
      sizetmp--;
 80127d2:	3d01      	subs	r5, #1
      Size--;
 80127d4:	3c01      	subs	r4, #1
 80127d6:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 80127d8:	2d00      	cmp	r5, #0
 80127da:	d1ee      	bne.n	80127ba <HAL_I2C_Master_Transmit+0xce>
 80127dc:	2c00      	cmp	r4, #0
 80127de:	d1cc      	bne.n	801277a <HAL_I2C_Master_Transmit+0x8e>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80127e0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80127e2:	0038      	movs	r0, r7
 80127e4:	f7ff fefa 	bl	80125dc <I2C_WaitOnSTOPFlagUntilTimeout>
 80127e8:	2800      	cmp	r0, #0
 80127ea:	d008      	beq.n	80127fe <HAL_I2C_Master_Transmit+0x112>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80127ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 80127ee:	3804      	subs	r0, #4
 80127f0:	4243      	negs	r3, r0
 80127f2:	4158      	adcs	r0, r3
 80127f4:	4240      	negs	r0, r0
 80127f6:	2301      	movs	r3, #1
 80127f8:	4398      	bics	r0, r3
 80127fa:	3003      	adds	r0, #3
 80127fc:	e00f      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	2220      	movs	r2, #32
 8012802:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012804:	683a      	ldr	r2, [r7, #0]
 8012806:	6853      	ldr	r3, [r2, #4]
 8012808:	4909      	ldr	r1, [pc, #36]	; (8012830 <HAL_I2C_Master_Transmit+0x144>)
 801280a:	400b      	ands	r3, r1
 801280c:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 801280e:	2335      	movs	r3, #53	; 0x35
 8012810:	2201      	movs	r2, #1
 8012812:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8012814:	3b01      	subs	r3, #1
 8012816:	2200      	movs	r2, #0
 8012818:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 801281a:	e000      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
      return  HAL_ERROR;                                    
 801281c:	2001      	movs	r0, #1
}
 801281e:	b005      	add	sp, #20
 8012820:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8012822:	2002      	movs	r0, #2
 8012824:	e7fb      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
    __HAL_LOCK(hi2c);
 8012826:	2002      	movs	r0, #2
 8012828:	e7f9      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
          return HAL_TIMEOUT;
 801282a:	2003      	movs	r0, #3
 801282c:	e7f7      	b.n	801281e <HAL_I2C_Master_Transmit+0x132>
 801282e:	46c0      	nop			; (mov r8, r8)
 8012830:	fe00e800 	.word	0xfe00e800

08012834 <HAL_I2C_Master_Receive>:
{
 8012834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012836:	b085      	sub	sp, #20
 8012838:	0007      	movs	r7, r0
 801283a:	9103      	str	r1, [sp, #12]
 801283c:	0016      	movs	r6, r2
 801283e:	001c      	movs	r4, r3
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012840:	2335      	movs	r3, #53	; 0x35
 8012842:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY; 
 8012844:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012846:	2b01      	cmp	r3, #1
 8012848:	d000      	beq.n	801284c <HAL_I2C_Master_Receive+0x18>
 801284a:	e084      	b.n	8012956 <HAL_I2C_Master_Receive+0x122>
    if((pData == NULL ) || (Size == 0)) 
 801284c:	2a00      	cmp	r2, #0
 801284e:	d100      	bne.n	8012852 <HAL_I2C_Master_Receive+0x1e>
 8012850:	e080      	b.n	8012954 <HAL_I2C_Master_Receive+0x120>
      return  HAL_ERROR;                                    
 8012852:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0)) 
 8012854:	2c00      	cmp	r4, #0
 8012856:	d07e      	beq.n	8012956 <HAL_I2C_Master_Receive+0x122>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	699b      	ldr	r3, [r3, #24]
 801285c:	041b      	lsls	r3, r3, #16
 801285e:	d500      	bpl.n	8012862 <HAL_I2C_Master_Receive+0x2e>
 8012860:	e07b      	b.n	801295a <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 8012862:	2334      	movs	r3, #52	; 0x34
 8012864:	5cfb      	ldrb	r3, [r7, r3]
 8012866:	2b01      	cmp	r3, #1
 8012868:	d100      	bne.n	801286c <HAL_I2C_Master_Receive+0x38>
 801286a:	e078      	b.n	801295e <HAL_I2C_Master_Receive+0x12a>
 801286c:	2334      	movs	r3, #52	; 0x34
 801286e:	2201      	movs	r2, #1
 8012870:	54fa      	strb	r2, [r7, r3]
    hi2c->State = HAL_I2C_STATE_MASTER_BUSY_RX;
 8012872:	3301      	adds	r3, #1
 8012874:	3221      	adds	r2, #33	; 0x21
 8012876:	54fa      	strb	r2, [r7, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8012878:	2300      	movs	r3, #0
 801287a:	63bb      	str	r3, [r7, #56]	; 0x38
    if(Size > 255)
 801287c:	2cff      	cmp	r4, #255	; 0xff
 801287e:	d90a      	bls.n	8012896 <HAL_I2C_Master_Receive+0x62>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8012880:	3380      	adds	r3, #128	; 0x80
 8012882:	2290      	movs	r2, #144	; 0x90
 8012884:	0192      	lsls	r2, r2, #6
 8012886:	9200      	str	r2, [sp, #0]
 8012888:	045b      	lsls	r3, r3, #17
 801288a:	22ff      	movs	r2, #255	; 0xff
 801288c:	0038      	movs	r0, r7
 801288e:	f7ff fdd9 	bl	8012444 <I2C_TransferConfig>
      sizetmp = 255;
 8012892:	25ff      	movs	r5, #255	; 0xff
 8012894:	e02e      	b.n	80128f4 <HAL_I2C_Master_Receive+0xc0>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8012896:	2380      	movs	r3, #128	; 0x80
 8012898:	b2e2      	uxtb	r2, r4
 801289a:	2190      	movs	r1, #144	; 0x90
 801289c:	0189      	lsls	r1, r1, #6
 801289e:	9100      	str	r1, [sp, #0]
 80128a0:	049b      	lsls	r3, r3, #18
 80128a2:	9903      	ldr	r1, [sp, #12]
 80128a4:	0038      	movs	r0, r7
 80128a6:	f7ff fdcd 	bl	8012444 <I2C_TransferConfig>
      sizetmp = Size;
 80128aa:	0025      	movs	r5, r4
 80128ac:	e022      	b.n	80128f4 <HAL_I2C_Master_Receive+0xc0>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80128ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128b0:	2200      	movs	r2, #0
 80128b2:	2180      	movs	r1, #128	; 0x80
 80128b4:	0038      	movs	r0, r7
 80128b6:	f7ff fe4d 	bl	8012554 <I2C_WaitOnFlagUntilTimeout>
 80128ba:	2800      	cmp	r0, #0
 80128bc:	d153      	bne.n	8012966 <HAL_I2C_Master_Receive+0x132>
        if(Size > 255)
 80128be:	2cff      	cmp	r4, #255	; 0xff
 80128c0:	d90a      	bls.n	80128d8 <HAL_I2C_Master_Receive+0xa4>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80128c2:	2300      	movs	r3, #0
 80128c4:	9300      	str	r3, [sp, #0]
 80128c6:	2380      	movs	r3, #128	; 0x80
 80128c8:	045b      	lsls	r3, r3, #17
 80128ca:	22ff      	movs	r2, #255	; 0xff
 80128cc:	9903      	ldr	r1, [sp, #12]
 80128ce:	0038      	movs	r0, r7
 80128d0:	f7ff fdb8 	bl	8012444 <I2C_TransferConfig>
          sizetmp = 255;
 80128d4:	35ff      	adds	r5, #255	; 0xff
 80128d6:	e00c      	b.n	80128f2 <HAL_I2C_Master_Receive+0xbe>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80128d8:	b2e2      	uxtb	r2, r4
 80128da:	2300      	movs	r3, #0
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	2380      	movs	r3, #128	; 0x80
 80128e0:	049b      	lsls	r3, r3, #18
 80128e2:	9903      	ldr	r1, [sp, #12]
 80128e4:	0038      	movs	r0, r7
 80128e6:	f7ff fdad 	bl	8012444 <I2C_TransferConfig>
          sizetmp = Size;
 80128ea:	0025      	movs	r5, r4
 80128ec:	e001      	b.n	80128f2 <HAL_I2C_Master_Receive+0xbe>
    }while(Size > 0);
 80128ee:	2c00      	cmp	r4, #0
 80128f0:	d012      	beq.n	8012918 <HAL_I2C_Master_Receive+0xe4>
 80128f2:	3601      	adds	r6, #1
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80128f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128f6:	2200      	movs	r2, #0
 80128f8:	2104      	movs	r1, #4
 80128fa:	0038      	movs	r0, r7
 80128fc:	f7ff fe2a 	bl	8012554 <I2C_WaitOnFlagUntilTimeout>
 8012900:	2800      	cmp	r0, #0
 8012902:	d12e      	bne.n	8012962 <HAL_I2C_Master_Receive+0x12e>
      (*pData++) =hi2c->Instance->RXDR;
 8012904:	683b      	ldr	r3, [r7, #0]
 8012906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012908:	7033      	strb	r3, [r6, #0]
      sizetmp--;
 801290a:	3d01      	subs	r5, #1
      Size--;
 801290c:	3c01      	subs	r4, #1
 801290e:	b2a4      	uxth	r4, r4
      if((sizetmp == 0)&&(Size!=0))
 8012910:	2d00      	cmp	r5, #0
 8012912:	d1ec      	bne.n	80128ee <HAL_I2C_Master_Receive+0xba>
 8012914:	2c00      	cmp	r4, #0
 8012916:	d1ca      	bne.n	80128ae <HAL_I2C_Master_Receive+0x7a>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8012918:	2119      	movs	r1, #25
 801291a:	0038      	movs	r0, r7
 801291c:	f7ff fe5e 	bl	80125dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8012920:	2800      	cmp	r0, #0
 8012922:	d008      	beq.n	8012936 <HAL_I2C_Master_Receive+0x102>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
        return HAL_TIMEOUT;
 8012926:	3804      	subs	r0, #4
 8012928:	4243      	negs	r3, r0
 801292a:	4158      	adcs	r0, r3
 801292c:	4240      	negs	r0, r0
 801292e:	2301      	movs	r3, #1
 8012930:	4398      	bics	r0, r3
 8012932:	3003      	adds	r0, #3
 8012934:	e00f      	b.n	8012956 <HAL_I2C_Master_Receive+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012936:	683b      	ldr	r3, [r7, #0]
 8012938:	2220      	movs	r2, #32
 801293a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 801293c:	683a      	ldr	r2, [r7, #0]
 801293e:	6853      	ldr	r3, [r2, #4]
 8012940:	490a      	ldr	r1, [pc, #40]	; (801296c <HAL_I2C_Master_Receive+0x138>)
 8012942:	400b      	ands	r3, r1
 8012944:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 8012946:	2335      	movs	r3, #53	; 0x35
 8012948:	2201      	movs	r2, #1
 801294a:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 801294c:	3b01      	subs	r3, #1
 801294e:	2200      	movs	r2, #0
 8012950:	54fa      	strb	r2, [r7, r3]
    return HAL_OK;
 8012952:	e000      	b.n	8012956 <HAL_I2C_Master_Receive+0x122>
      return  HAL_ERROR;                                    
 8012954:	2001      	movs	r0, #1
}
 8012956:	b005      	add	sp, #20
 8012958:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 801295a:	2002      	movs	r0, #2
 801295c:	e7fb      	b.n	8012956 <HAL_I2C_Master_Receive+0x122>
    __HAL_LOCK(hi2c);
 801295e:	2002      	movs	r0, #2
 8012960:	e7f9      	b.n	8012956 <HAL_I2C_Master_Receive+0x122>
        return HAL_TIMEOUT;
 8012962:	2003      	movs	r0, #3
 8012964:	e7f7      	b.n	8012956 <HAL_I2C_Master_Receive+0x122>
          return HAL_TIMEOUT;
 8012966:	2003      	movs	r0, #3
 8012968:	e7f5      	b.n	8012956 <HAL_I2C_Master_Receive+0x122>
 801296a:	46c0      	nop			; (mov r8, r8)
 801296c:	fe00e800 	.word	0xfe00e800

08012970 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012970:	4770      	bx	lr
	...

08012974 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8012974:	4a03      	ldr	r2, [pc, #12]	; (8012984 <HAL_PWR_EnableBkUpAccess+0x10>)
 8012976:	6811      	ldr	r1, [r2, #0]
 8012978:	2380      	movs	r3, #128	; 0x80
 801297a:	005b      	lsls	r3, r3, #1
 801297c:	430b      	orrs	r3, r1
 801297e:	6013      	str	r3, [r2, #0]
}
 8012980:	4770      	bx	lr
 8012982:	46c0      	nop			; (mov r8, r8)
 8012984:	40007000 	.word	0x40007000

08012988 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801298a:	46c6      	mov	lr, r8
 801298c:	b500      	push	{lr}
 801298e:	b082      	sub	sp, #8
 8012990:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012992:	6803      	ldr	r3, [r0, #0]
 8012994:	07db      	lsls	r3, r3, #31
 8012996:	d538      	bpl.n	8012a0a <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8012998:	4bbd      	ldr	r3, [pc, #756]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	230c      	movs	r3, #12
 801299e:	4013      	ands	r3, r2
 80129a0:	2b04      	cmp	r3, #4
 80129a2:	d02a      	beq.n	80129fa <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80129a4:	4bba      	ldr	r3, [pc, #744]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 80129a6:	685a      	ldr	r2, [r3, #4]
 80129a8:	230c      	movs	r3, #12
 80129aa:	4013      	ands	r3, r2
 80129ac:	2b08      	cmp	r3, #8
 80129ae:	d108      	bne.n	80129c2 <HAL_RCC_OscConfig+0x3a>
 80129b0:	4bb7      	ldr	r3, [pc, #732]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	22c0      	movs	r2, #192	; 0xc0
 80129b6:	0252      	lsls	r2, r2, #9
 80129b8:	4013      	ands	r3, r2
 80129ba:	2280      	movs	r2, #128	; 0x80
 80129bc:	0252      	lsls	r2, r2, #9
 80129be:	4293      	cmp	r3, r2
 80129c0:	d01b      	beq.n	80129fa <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80129c2:	4bb3      	ldr	r3, [pc, #716]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 80129c4:	681a      	ldr	r2, [r3, #0]
 80129c6:	49b3      	ldr	r1, [pc, #716]	; (8012c94 <HAL_RCC_OscConfig+0x30c>)
 80129c8:	400a      	ands	r2, r1
 80129ca:	601a      	str	r2, [r3, #0]
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	49b2      	ldr	r1, [pc, #712]	; (8012c98 <HAL_RCC_OscConfig+0x310>)
 80129d0:	400a      	ands	r2, r1
 80129d2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80129d4:	f7fe f8bc 	bl	8010b50 <HAL_GetTick>
 80129d8:	0007      	movs	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80129da:	4ead      	ldr	r6, [pc, #692]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 80129dc:	2580      	movs	r5, #128	; 0x80
 80129de:	02ad      	lsls	r5, r5, #10
 80129e0:	6833      	ldr	r3, [r6, #0]
 80129e2:	422b      	tst	r3, r5
 80129e4:	d039      	beq.n	8012a5a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80129e6:	f7fe f8b3 	bl	8010b50 <HAL_GetTick>
 80129ea:	1bc0      	subs	r0, r0, r7
 80129ec:	2864      	cmp	r0, #100	; 0x64
 80129ee:	d9f7      	bls.n	80129e0 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 80129f0:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80129f2:	b002      	add	sp, #8
 80129f4:	bc04      	pop	{r2}
 80129f6:	4690      	mov	r8, r2
 80129f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80129fa:	4ba5      	ldr	r3, [pc, #660]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	039b      	lsls	r3, r3, #14
 8012a00:	d503      	bpl.n	8012a0a <HAL_RCC_OscConfig+0x82>
        return HAL_ERROR;
 8012a02:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a04:	6863      	ldr	r3, [r4, #4]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d0f3      	beq.n	80129f2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012a0a:	6823      	ldr	r3, [r4, #0]
 8012a0c:	079b      	lsls	r3, r3, #30
 8012a0e:	d400      	bmi.n	8012a12 <HAL_RCC_OscConfig+0x8a>
 8012a10:	e08d      	b.n	8012b2e <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8012a12:	4b9f      	ldr	r3, [pc, #636]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	220c      	movs	r2, #12
 8012a18:	421a      	tst	r2, r3
 8012a1a:	d077      	beq.n	8012b0c <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012a1c:	4b9c      	ldr	r3, [pc, #624]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012a1e:	685a      	ldr	r2, [r3, #4]
 8012a20:	230c      	movs	r3, #12
 8012a22:	4013      	ands	r3, r2
 8012a24:	2b08      	cmp	r3, #8
 8012a26:	d068      	beq.n	8012afa <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012a28:	68e3      	ldr	r3, [r4, #12]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d100      	bne.n	8012a30 <HAL_RCC_OscConfig+0xa8>
 8012a2e:	e0a1      	b.n	8012b74 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012a30:	4a97      	ldr	r2, [pc, #604]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012a32:	6813      	ldr	r3, [r2, #0]
 8012a34:	2101      	movs	r1, #1
 8012a36:	430b      	orrs	r3, r1
 8012a38:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012a3a:	f7fe f889 	bl	8010b50 <HAL_GetTick>
 8012a3e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012a40:	4e93      	ldr	r6, [pc, #588]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012a42:	2502      	movs	r5, #2
 8012a44:	6833      	ldr	r3, [r6, #0]
 8012a46:	421d      	tst	r5, r3
 8012a48:	d000      	beq.n	8012a4c <HAL_RCC_OscConfig+0xc4>
 8012a4a:	e08a      	b.n	8012b62 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012a4c:	f7fe f880 	bl	8010b50 <HAL_GetTick>
 8012a50:	1bc0      	subs	r0, r0, r7
 8012a52:	2864      	cmp	r0, #100	; 0x64
 8012a54:	d9f6      	bls.n	8012a44 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8012a56:	2003      	movs	r0, #3
 8012a58:	e7cb      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012a5a:	6863      	ldr	r3, [r4, #4]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d00b      	beq.n	8012a78 <HAL_RCC_OscConfig+0xf0>
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d122      	bne.n	8012aaa <HAL_RCC_OscConfig+0x122>
 8012a64:	4b8a      	ldr	r3, [pc, #552]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012a66:	681a      	ldr	r2, [r3, #0]
 8012a68:	498a      	ldr	r1, [pc, #552]	; (8012c94 <HAL_RCC_OscConfig+0x30c>)
 8012a6a:	400a      	ands	r2, r1
 8012a6c:	601a      	str	r2, [r3, #0]
 8012a6e:	681a      	ldr	r2, [r3, #0]
 8012a70:	4989      	ldr	r1, [pc, #548]	; (8012c98 <HAL_RCC_OscConfig+0x310>)
 8012a72:	400a      	ands	r2, r1
 8012a74:	601a      	str	r2, [r3, #0]
 8012a76:	e005      	b.n	8012a84 <HAL_RCC_OscConfig+0xfc>
 8012a78:	4a85      	ldr	r2, [pc, #532]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012a7a:	6811      	ldr	r1, [r2, #0]
 8012a7c:	2380      	movs	r3, #128	; 0x80
 8012a7e:	025b      	lsls	r3, r3, #9
 8012a80:	430b      	orrs	r3, r1
 8012a82:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012a84:	6863      	ldr	r3, [r4, #4]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d027      	beq.n	8012ada <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 8012a8a:	f7fe f861 	bl	8010b50 <HAL_GetTick>
 8012a8e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a90:	4e7f      	ldr	r6, [pc, #508]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012a92:	2580      	movs	r5, #128	; 0x80
 8012a94:	02ad      	lsls	r5, r5, #10
 8012a96:	6833      	ldr	r3, [r6, #0]
 8012a98:	422b      	tst	r3, r5
 8012a9a:	d1b6      	bne.n	8012a0a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a9c:	f7fe f858 	bl	8010b50 <HAL_GetTick>
 8012aa0:	1bc0      	subs	r0, r0, r7
 8012aa2:	2864      	cmp	r0, #100	; 0x64
 8012aa4:	d9f7      	bls.n	8012a96 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8012aa6:	2003      	movs	r0, #3
 8012aa8:	e7a3      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8012aaa:	2b05      	cmp	r3, #5
 8012aac:	d009      	beq.n	8012ac2 <HAL_RCC_OscConfig+0x13a>
 8012aae:	4b78      	ldr	r3, [pc, #480]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	4978      	ldr	r1, [pc, #480]	; (8012c94 <HAL_RCC_OscConfig+0x30c>)
 8012ab4:	400a      	ands	r2, r1
 8012ab6:	601a      	str	r2, [r3, #0]
 8012ab8:	681a      	ldr	r2, [r3, #0]
 8012aba:	4977      	ldr	r1, [pc, #476]	; (8012c98 <HAL_RCC_OscConfig+0x310>)
 8012abc:	400a      	ands	r2, r1
 8012abe:	601a      	str	r2, [r3, #0]
 8012ac0:	e7e0      	b.n	8012a84 <HAL_RCC_OscConfig+0xfc>
 8012ac2:	4b73      	ldr	r3, [pc, #460]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012ac4:	6819      	ldr	r1, [r3, #0]
 8012ac6:	2280      	movs	r2, #128	; 0x80
 8012ac8:	02d2      	lsls	r2, r2, #11
 8012aca:	430a      	orrs	r2, r1
 8012acc:	601a      	str	r2, [r3, #0]
 8012ace:	6819      	ldr	r1, [r3, #0]
 8012ad0:	2280      	movs	r2, #128	; 0x80
 8012ad2:	0252      	lsls	r2, r2, #9
 8012ad4:	430a      	orrs	r2, r1
 8012ad6:	601a      	str	r2, [r3, #0]
 8012ad8:	e7d4      	b.n	8012a84 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 8012ada:	f7fe f839 	bl	8010b50 <HAL_GetTick>
 8012ade:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012ae0:	4e6b      	ldr	r6, [pc, #428]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012ae2:	2580      	movs	r5, #128	; 0x80
 8012ae4:	02ad      	lsls	r5, r5, #10
 8012ae6:	6833      	ldr	r3, [r6, #0]
 8012ae8:	422b      	tst	r3, r5
 8012aea:	d08e      	beq.n	8012a0a <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012aec:	f7fe f830 	bl	8010b50 <HAL_GetTick>
 8012af0:	1bc0      	subs	r0, r0, r7
 8012af2:	2864      	cmp	r0, #100	; 0x64
 8012af4:	d9f7      	bls.n	8012ae6 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8012af6:	2003      	movs	r0, #3
 8012af8:	e77b      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8012afa:	4b65      	ldr	r3, [pc, #404]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	22c0      	movs	r2, #192	; 0xc0
 8012b00:	0252      	lsls	r2, r2, #9
 8012b02:	4013      	ands	r3, r2
 8012b04:	2280      	movs	r2, #128	; 0x80
 8012b06:	0212      	lsls	r2, r2, #8
 8012b08:	4293      	cmp	r3, r2
 8012b0a:	d18d      	bne.n	8012a28 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012b0c:	4b60      	ldr	r3, [pc, #384]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	079b      	lsls	r3, r3, #30
 8012b12:	d504      	bpl.n	8012b1e <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8012b14:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012b16:	68e3      	ldr	r3, [r4, #12]
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d000      	beq.n	8012b1e <HAL_RCC_OscConfig+0x196>
 8012b1c:	e769      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012b1e:	495c      	ldr	r1, [pc, #368]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b20:	680a      	ldr	r2, [r1, #0]
 8012b22:	6923      	ldr	r3, [r4, #16]
 8012b24:	00db      	lsls	r3, r3, #3
 8012b26:	20f8      	movs	r0, #248	; 0xf8
 8012b28:	4382      	bics	r2, r0
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012b2e:	6823      	ldr	r3, [r4, #0]
 8012b30:	071b      	lsls	r3, r3, #28
 8012b32:	d547      	bpl.n	8012bc4 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012b34:	6a23      	ldr	r3, [r4, #32]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d030      	beq.n	8012b9c <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8012b3a:	4a55      	ldr	r2, [pc, #340]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b3c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012b3e:	2101      	movs	r1, #1
 8012b40:	430b      	orrs	r3, r1
 8012b42:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012b44:	f7fe f804 	bl	8010b50 <HAL_GetTick>
 8012b48:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b4a:	4e51      	ldr	r6, [pc, #324]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b4c:	2502      	movs	r5, #2
 8012b4e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012b50:	421d      	tst	r5, r3
 8012b52:	d137      	bne.n	8012bc4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b54:	f7fd fffc 	bl	8010b50 <HAL_GetTick>
 8012b58:	1bc0      	subs	r0, r0, r7
 8012b5a:	2864      	cmp	r0, #100	; 0x64
 8012b5c:	d9f7      	bls.n	8012b4e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 8012b5e:	2003      	movs	r0, #3
 8012b60:	e747      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012b62:	494b      	ldr	r1, [pc, #300]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b64:	680a      	ldr	r2, [r1, #0]
 8012b66:	6923      	ldr	r3, [r4, #16]
 8012b68:	00db      	lsls	r3, r3, #3
 8012b6a:	20f8      	movs	r0, #248	; 0xf8
 8012b6c:	4382      	bics	r2, r0
 8012b6e:	4313      	orrs	r3, r2
 8012b70:	600b      	str	r3, [r1, #0]
 8012b72:	e7dc      	b.n	8012b2e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012b74:	4a46      	ldr	r2, [pc, #280]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b76:	6813      	ldr	r3, [r2, #0]
 8012b78:	2101      	movs	r1, #1
 8012b7a:	438b      	bics	r3, r1
 8012b7c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012b7e:	f7fd ffe7 	bl	8010b50 <HAL_GetTick>
 8012b82:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012b84:	4e42      	ldr	r6, [pc, #264]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b86:	2502      	movs	r5, #2
 8012b88:	6833      	ldr	r3, [r6, #0]
 8012b8a:	421d      	tst	r5, r3
 8012b8c:	d0cf      	beq.n	8012b2e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012b8e:	f7fd ffdf 	bl	8010b50 <HAL_GetTick>
 8012b92:	1bc0      	subs	r0, r0, r7
 8012b94:	2864      	cmp	r0, #100	; 0x64
 8012b96:	d9f7      	bls.n	8012b88 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 8012b98:	2003      	movs	r0, #3
 8012b9a:	e72a      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 8012b9c:	4a3c      	ldr	r2, [pc, #240]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012b9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8012ba0:	2101      	movs	r1, #1
 8012ba2:	438b      	bics	r3, r1
 8012ba4:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012ba6:	f7fd ffd3 	bl	8010b50 <HAL_GetTick>
 8012baa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012bac:	4e38      	ldr	r6, [pc, #224]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012bae:	2502      	movs	r5, #2
 8012bb0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012bb2:	421d      	tst	r5, r3
 8012bb4:	d006      	beq.n	8012bc4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012bb6:	f7fd ffcb 	bl	8010b50 <HAL_GetTick>
 8012bba:	1bc0      	subs	r0, r0, r7
 8012bbc:	2864      	cmp	r0, #100	; 0x64
 8012bbe:	d9f7      	bls.n	8012bb0 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 8012bc0:	2003      	movs	r0, #3
 8012bc2:	e716      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012bc4:	6823      	ldr	r3, [r4, #0]
 8012bc6:	075b      	lsls	r3, r3, #29
 8012bc8:	d442      	bmi.n	8012c50 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8012bca:	6823      	ldr	r3, [r4, #0]
 8012bcc:	06db      	lsls	r3, r3, #27
 8012bce:	d512      	bpl.n	8012bf6 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8012bd0:	6963      	ldr	r3, [r4, #20]
 8012bd2:	2b01      	cmp	r3, #1
 8012bd4:	d100      	bne.n	8012bd8 <HAL_RCC_OscConfig+0x250>
 8012bd6:	e0ce      	b.n	8012d76 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8012bd8:	3305      	adds	r3, #5
 8012bda:	d000      	beq.n	8012bde <HAL_RCC_OscConfig+0x256>
 8012bdc:	e0ec      	b.n	8012db8 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 8012bde:	4a2c      	ldr	r2, [pc, #176]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012be0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012be2:	2104      	movs	r1, #4
 8012be4:	438b      	bics	r3, r1
 8012be6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012be8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012bea:	69a3      	ldr	r3, [r4, #24]
 8012bec:	00db      	lsls	r3, r3, #3
 8012bee:	20f8      	movs	r0, #248	; 0xf8
 8012bf0:	4381      	bics	r1, r0
 8012bf2:	430b      	orrs	r3, r1
 8012bf4:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012bf6:	6823      	ldr	r3, [r4, #0]
 8012bf8:	069b      	lsls	r3, r3, #26
 8012bfa:	d400      	bmi.n	8012bfe <HAL_RCC_OscConfig+0x276>
 8012bfc:	e106      	b.n	8012e0c <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012bfe:	4b24      	ldr	r3, [pc, #144]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012c00:	685a      	ldr	r2, [r3, #4]
 8012c02:	230c      	movs	r3, #12
 8012c04:	4013      	ands	r3, r2
 8012c06:	2b0c      	cmp	r3, #12
 8012c08:	d100      	bne.n	8012c0c <HAL_RCC_OscConfig+0x284>
 8012c0a:	e0f6      	b.n	8012dfa <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012c0c:	4b20      	ldr	r3, [pc, #128]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012c0e:	685a      	ldr	r2, [r3, #4]
 8012c10:	230c      	movs	r3, #12
 8012c12:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012c14:	2b08      	cmp	r3, #8
 8012c16:	d100      	bne.n	8012c1a <HAL_RCC_OscConfig+0x292>
 8012c18:	e0e7      	b.n	8012dea <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8012c1a:	69e3      	ldr	r3, [r4, #28]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d100      	bne.n	8012c22 <HAL_RCC_OscConfig+0x29a>
 8012c20:	e116      	b.n	8012e50 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8012c22:	4a1b      	ldr	r2, [pc, #108]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012c24:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012c26:	2380      	movs	r3, #128	; 0x80
 8012c28:	025b      	lsls	r3, r3, #9
 8012c2a:	430b      	orrs	r3, r1
 8012c2c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012c2e:	f7fd ff8f 	bl	8010b50 <HAL_GetTick>
 8012c32:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012c34:	4e16      	ldr	r6, [pc, #88]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012c36:	2580      	movs	r5, #128	; 0x80
 8012c38:	026d      	lsls	r5, r5, #9
 8012c3a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012c3c:	422b      	tst	r3, r5
 8012c3e:	d000      	beq.n	8012c42 <HAL_RCC_OscConfig+0x2ba>
 8012c40:	e0e4      	b.n	8012e0c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012c42:	f7fd ff85 	bl	8010b50 <HAL_GetTick>
 8012c46:	1bc0      	subs	r0, r0, r7
 8012c48:	2864      	cmp	r0, #100	; 0x64
 8012c4a:	d9f6      	bls.n	8012c3a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 8012c4c:	2003      	movs	r0, #3
 8012c4e:	e6d0      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012c50:	4a0f      	ldr	r2, [pc, #60]	; (8012c90 <HAL_RCC_OscConfig+0x308>)
 8012c52:	69d1      	ldr	r1, [r2, #28]
 8012c54:	2080      	movs	r0, #128	; 0x80
 8012c56:	0540      	lsls	r0, r0, #21
 8012c58:	4301      	orrs	r1, r0
 8012c5a:	61d1      	str	r1, [r2, #28]
 8012c5c:	69d3      	ldr	r3, [r2, #28]
 8012c5e:	4003      	ands	r3, r0
 8012c60:	9301      	str	r3, [sp, #4]
 8012c62:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012c64:	4a0d      	ldr	r2, [pc, #52]	; (8012c9c <HAL_RCC_OscConfig+0x314>)
 8012c66:	6811      	ldr	r1, [r2, #0]
 8012c68:	2380      	movs	r3, #128	; 0x80
 8012c6a:	005b      	lsls	r3, r3, #1
 8012c6c:	430b      	orrs	r3, r1
 8012c6e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012c70:	f7fd ff6e 	bl	8010b50 <HAL_GetTick>
 8012c74:	0007      	movs	r7, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012c76:	4e09      	ldr	r6, [pc, #36]	; (8012c9c <HAL_RCC_OscConfig+0x314>)
 8012c78:	2580      	movs	r5, #128	; 0x80
 8012c7a:	006d      	lsls	r5, r5, #1
 8012c7c:	6833      	ldr	r3, [r6, #0]
 8012c7e:	422b      	tst	r3, r5
 8012c80:	d10e      	bne.n	8012ca0 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012c82:	f7fd ff65 	bl	8010b50 <HAL_GetTick>
 8012c86:	1bc0      	subs	r0, r0, r7
 8012c88:	2864      	cmp	r0, #100	; 0x64
 8012c8a:	d9f7      	bls.n	8012c7c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 8012c8c:	2003      	movs	r0, #3
 8012c8e:	e6b0      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
 8012c90:	40021000 	.word	0x40021000
 8012c94:	fffeffff 	.word	0xfffeffff
 8012c98:	fffbffff 	.word	0xfffbffff
 8012c9c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8012ca0:	4b95      	ldr	r3, [pc, #596]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012ca2:	6a1a      	ldr	r2, [r3, #32]
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	438a      	bics	r2, r1
 8012ca8:	621a      	str	r2, [r3, #32]
 8012caa:	6a1a      	ldr	r2, [r3, #32]
 8012cac:	3103      	adds	r1, #3
 8012cae:	438a      	bics	r2, r1
 8012cb0:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 8012cb2:	f7fd ff4d 	bl	8010b50 <HAL_GetTick>
 8012cb6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cb8:	4e8f      	ldr	r6, [pc, #572]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012cba:	2502      	movs	r5, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012cbc:	4f8f      	ldr	r7, [pc, #572]	; (8012efc <HAL_RCC_OscConfig+0x574>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cbe:	6a33      	ldr	r3, [r6, #32]
 8012cc0:	421d      	tst	r5, r3
 8012cc2:	d007      	beq.n	8012cd4 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012cc4:	f7fd ff44 	bl	8010b50 <HAL_GetTick>
 8012cc8:	4643      	mov	r3, r8
 8012cca:	1ac0      	subs	r0, r0, r3
 8012ccc:	42b8      	cmp	r0, r7
 8012cce:	d9f6      	bls.n	8012cbe <HAL_RCC_OscConfig+0x336>
        return HAL_TIMEOUT;
 8012cd0:	2003      	movs	r0, #3
 8012cd2:	e68e      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012cd4:	68a3      	ldr	r3, [r4, #8]
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d00b      	beq.n	8012cf2 <HAL_RCC_OscConfig+0x36a>
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d123      	bne.n	8012d26 <HAL_RCC_OscConfig+0x39e>
 8012cde:	4b86      	ldr	r3, [pc, #536]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012ce0:	6a1a      	ldr	r2, [r3, #32]
 8012ce2:	2101      	movs	r1, #1
 8012ce4:	438a      	bics	r2, r1
 8012ce6:	621a      	str	r2, [r3, #32]
 8012ce8:	6a1a      	ldr	r2, [r3, #32]
 8012cea:	3103      	adds	r1, #3
 8012cec:	438a      	bics	r2, r1
 8012cee:	621a      	str	r2, [r3, #32]
 8012cf0:	e004      	b.n	8012cfc <HAL_RCC_OscConfig+0x374>
 8012cf2:	4a81      	ldr	r2, [pc, #516]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012cf4:	6a13      	ldr	r3, [r2, #32]
 8012cf6:	2101      	movs	r1, #1
 8012cf8:	430b      	orrs	r3, r1
 8012cfa:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8012cfc:	68a3      	ldr	r3, [r4, #8]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d027      	beq.n	8012d52 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8012d02:	f7fd ff25 	bl	8010b50 <HAL_GetTick>
 8012d06:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d08:	4e7b      	ldr	r6, [pc, #492]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012d0a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d0c:	4f7b      	ldr	r7, [pc, #492]	; (8012efc <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012d0e:	6a33      	ldr	r3, [r6, #32]
 8012d10:	421d      	tst	r5, r3
 8012d12:	d000      	beq.n	8012d16 <HAL_RCC_OscConfig+0x38e>
 8012d14:	e759      	b.n	8012bca <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d16:	f7fd ff1b 	bl	8010b50 <HAL_GetTick>
 8012d1a:	4643      	mov	r3, r8
 8012d1c:	1ac0      	subs	r0, r0, r3
 8012d1e:	42b8      	cmp	r0, r7
 8012d20:	d9f5      	bls.n	8012d0e <HAL_RCC_OscConfig+0x386>
          return HAL_TIMEOUT;
 8012d22:	2003      	movs	r0, #3
 8012d24:	e665      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012d26:	2b05      	cmp	r3, #5
 8012d28:	d009      	beq.n	8012d3e <HAL_RCC_OscConfig+0x3b6>
 8012d2a:	4b73      	ldr	r3, [pc, #460]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012d2c:	6a1a      	ldr	r2, [r3, #32]
 8012d2e:	2101      	movs	r1, #1
 8012d30:	438a      	bics	r2, r1
 8012d32:	621a      	str	r2, [r3, #32]
 8012d34:	6a1a      	ldr	r2, [r3, #32]
 8012d36:	3103      	adds	r1, #3
 8012d38:	438a      	bics	r2, r1
 8012d3a:	621a      	str	r2, [r3, #32]
 8012d3c:	e7de      	b.n	8012cfc <HAL_RCC_OscConfig+0x374>
 8012d3e:	4b6e      	ldr	r3, [pc, #440]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012d40:	6a1a      	ldr	r2, [r3, #32]
 8012d42:	2104      	movs	r1, #4
 8012d44:	430a      	orrs	r2, r1
 8012d46:	621a      	str	r2, [r3, #32]
 8012d48:	6a1a      	ldr	r2, [r3, #32]
 8012d4a:	3903      	subs	r1, #3
 8012d4c:	430a      	orrs	r2, r1
 8012d4e:	621a      	str	r2, [r3, #32]
 8012d50:	e7d4      	b.n	8012cfc <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012d52:	f7fd fefd 	bl	8010b50 <HAL_GetTick>
 8012d56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012d58:	4e67      	ldr	r6, [pc, #412]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012d5a:	2502      	movs	r5, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d5c:	4f67      	ldr	r7, [pc, #412]	; (8012efc <HAL_RCC_OscConfig+0x574>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012d5e:	6a33      	ldr	r3, [r6, #32]
 8012d60:	421d      	tst	r5, r3
 8012d62:	d100      	bne.n	8012d66 <HAL_RCC_OscConfig+0x3de>
 8012d64:	e731      	b.n	8012bca <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012d66:	f7fd fef3 	bl	8010b50 <HAL_GetTick>
 8012d6a:	4643      	mov	r3, r8
 8012d6c:	1ac0      	subs	r0, r0, r3
 8012d6e:	42b8      	cmp	r0, r7
 8012d70:	d9f5      	bls.n	8012d5e <HAL_RCC_OscConfig+0x3d6>
          return HAL_TIMEOUT;
 8012d72:	2003      	movs	r0, #3
 8012d74:	e63d      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012d76:	4b60      	ldr	r3, [pc, #384]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d7a:	2104      	movs	r1, #4
 8012d7c:	430a      	orrs	r2, r1
 8012d7e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d82:	3903      	subs	r1, #3
 8012d84:	430a      	orrs	r2, r1
 8012d86:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012d88:	f7fd fee2 	bl	8010b50 <HAL_GetTick>
 8012d8c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8012d8e:	4e5a      	ldr	r6, [pc, #360]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012d90:	2502      	movs	r5, #2
 8012d92:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012d94:	421d      	tst	r5, r3
 8012d96:	d106      	bne.n	8012da6 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012d98:	f7fd feda 	bl	8010b50 <HAL_GetTick>
 8012d9c:	1bc0      	subs	r0, r0, r7
 8012d9e:	2864      	cmp	r0, #100	; 0x64
 8012da0:	d9f7      	bls.n	8012d92 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 8012da2:	2003      	movs	r0, #3
 8012da4:	e625      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8012da6:	4954      	ldr	r1, [pc, #336]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012da8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8012daa:	69a3      	ldr	r3, [r4, #24]
 8012dac:	00db      	lsls	r3, r3, #3
 8012dae:	20f8      	movs	r0, #248	; 0xf8
 8012db0:	4382      	bics	r2, r0
 8012db2:	4313      	orrs	r3, r2
 8012db4:	634b      	str	r3, [r1, #52]	; 0x34
 8012db6:	e71e      	b.n	8012bf6 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012db8:	4b4f      	ldr	r3, [pc, #316]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012dbc:	2104      	movs	r1, #4
 8012dbe:	430a      	orrs	r2, r1
 8012dc0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8012dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012dc4:	3903      	subs	r1, #3
 8012dc6:	438a      	bics	r2, r1
 8012dc8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012dca:	f7fd fec1 	bl	8010b50 <HAL_GetTick>
 8012dce:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8012dd0:	4e49      	ldr	r6, [pc, #292]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012dd2:	2502      	movs	r5, #2
 8012dd4:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012dd6:	421d      	tst	r5, r3
 8012dd8:	d100      	bne.n	8012ddc <HAL_RCC_OscConfig+0x454>
 8012dda:	e70c      	b.n	8012bf6 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8012ddc:	f7fd feb8 	bl	8010b50 <HAL_GetTick>
 8012de0:	1bc0      	subs	r0, r0, r7
 8012de2:	2864      	cmp	r0, #100	; 0x64
 8012de4:	d9f6      	bls.n	8012dd4 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 8012de6:	2003      	movs	r0, #3
 8012de8:	e603      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8012dea:	4b43      	ldr	r3, [pc, #268]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	22c0      	movs	r2, #192	; 0xc0
 8012df0:	0252      	lsls	r2, r2, #9
 8012df2:	4013      	ands	r3, r2
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d000      	beq.n	8012dfa <HAL_RCC_OscConfig+0x472>
 8012df8:	e70f      	b.n	8012c1a <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012dfa:	4b3f      	ldr	r3, [pc, #252]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dfe:	03db      	lsls	r3, r3, #15
 8012e00:	d504      	bpl.n	8012e0c <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8012e02:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012e04:	69e3      	ldr	r3, [r4, #28]
 8012e06:	2b01      	cmp	r3, #1
 8012e08:	d000      	beq.n	8012e0c <HAL_RCC_OscConfig+0x484>
 8012e0a:	e5f2      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012e0e:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d100      	bne.n	8012e16 <HAL_RCC_OscConfig+0x48e>
 8012e14:	e5ed      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012e16:	4a38      	ldr	r2, [pc, #224]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012e18:	6851      	ldr	r1, [r2, #4]
 8012e1a:	220c      	movs	r2, #12
 8012e1c:	400a      	ands	r2, r1
 8012e1e:	2a08      	cmp	r2, #8
 8012e20:	d068      	beq.n	8012ef4 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012e22:	2b02      	cmp	r3, #2
 8012e24:	d029      	beq.n	8012e7a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8012e26:	4a34      	ldr	r2, [pc, #208]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012e28:	6813      	ldr	r3, [r2, #0]
 8012e2a:	4935      	ldr	r1, [pc, #212]	; (8012f00 <HAL_RCC_OscConfig+0x578>)
 8012e2c:	400b      	ands	r3, r1
 8012e2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012e30:	f7fd fe8e 	bl	8010b50 <HAL_GetTick>
 8012e34:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012e36:	4d30      	ldr	r5, [pc, #192]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012e38:	2480      	movs	r4, #128	; 0x80
 8012e3a:	04a4      	lsls	r4, r4, #18
 8012e3c:	682b      	ldr	r3, [r5, #0]
 8012e3e:	4223      	tst	r3, r4
 8012e40:	d056      	beq.n	8012ef0 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012e42:	f7fd fe85 	bl	8010b50 <HAL_GetTick>
 8012e46:	1b80      	subs	r0, r0, r6
 8012e48:	2864      	cmp	r0, #100	; 0x64
 8012e4a:	d9f7      	bls.n	8012e3c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012e4c:	2003      	movs	r0, #3
 8012e4e:	e5d0      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012e50:	4a29      	ldr	r2, [pc, #164]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012e52:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012e54:	492b      	ldr	r1, [pc, #172]	; (8012f04 <HAL_RCC_OscConfig+0x57c>)
 8012e56:	400b      	ands	r3, r1
 8012e58:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012e5a:	f7fd fe79 	bl	8010b50 <HAL_GetTick>
 8012e5e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012e60:	4e25      	ldr	r6, [pc, #148]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012e62:	2580      	movs	r5, #128	; 0x80
 8012e64:	026d      	lsls	r5, r5, #9
 8012e66:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8012e68:	422b      	tst	r3, r5
 8012e6a:	d0cf      	beq.n	8012e0c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012e6c:	f7fd fe70 	bl	8010b50 <HAL_GetTick>
 8012e70:	1bc0      	subs	r0, r0, r7
 8012e72:	2864      	cmp	r0, #100	; 0x64
 8012e74:	d9f7      	bls.n	8012e66 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012e76:	2003      	movs	r0, #3
 8012e78:	e5bb      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8012e7a:	4a1f      	ldr	r2, [pc, #124]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012e7c:	6813      	ldr	r3, [r2, #0]
 8012e7e:	4920      	ldr	r1, [pc, #128]	; (8012f00 <HAL_RCC_OscConfig+0x578>)
 8012e80:	400b      	ands	r3, r1
 8012e82:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012e84:	f7fd fe64 	bl	8010b50 <HAL_GetTick>
 8012e88:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012e8a:	4e1b      	ldr	r6, [pc, #108]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012e8c:	2580      	movs	r5, #128	; 0x80
 8012e8e:	04ad      	lsls	r5, r5, #18
 8012e90:	6833      	ldr	r3, [r6, #0]
 8012e92:	422b      	tst	r3, r5
 8012e94:	d006      	beq.n	8012ea4 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012e96:	f7fd fe5b 	bl	8010b50 <HAL_GetTick>
 8012e9a:	1bc0      	subs	r0, r0, r7
 8012e9c:	2864      	cmp	r0, #100	; 0x64
 8012e9e:	d9f7      	bls.n	8012e90 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012ea0:	2003      	movs	r0, #3
 8012ea2:	e5a6      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012ea4:	4b14      	ldr	r3, [pc, #80]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea8:	210f      	movs	r1, #15
 8012eaa:	438a      	bics	r2, r1
 8012eac:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012eae:	430a      	orrs	r2, r1
 8012eb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8012eb2:	6859      	ldr	r1, [r3, #4]
 8012eb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012eb6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012eb8:	4302      	orrs	r2, r0
 8012eba:	4813      	ldr	r0, [pc, #76]	; (8012f08 <HAL_RCC_OscConfig+0x580>)
 8012ebc:	4001      	ands	r1, r0
 8012ebe:	430a      	orrs	r2, r1
 8012ec0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012ec2:	6819      	ldr	r1, [r3, #0]
 8012ec4:	2280      	movs	r2, #128	; 0x80
 8012ec6:	0452      	lsls	r2, r2, #17
 8012ec8:	430a      	orrs	r2, r1
 8012eca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012ecc:	f7fd fe40 	bl	8010b50 <HAL_GetTick>
 8012ed0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012ed2:	4d09      	ldr	r5, [pc, #36]	; (8012ef8 <HAL_RCC_OscConfig+0x570>)
 8012ed4:	2480      	movs	r4, #128	; 0x80
 8012ed6:	04a4      	lsls	r4, r4, #18
 8012ed8:	682b      	ldr	r3, [r5, #0]
 8012eda:	4223      	tst	r3, r4
 8012edc:	d106      	bne.n	8012eec <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012ede:	f7fd fe37 	bl	8010b50 <HAL_GetTick>
 8012ee2:	1b80      	subs	r0, r0, r6
 8012ee4:	2864      	cmp	r0, #100	; 0x64
 8012ee6:	d9f7      	bls.n	8012ed8 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012ee8:	2003      	movs	r0, #3
 8012eea:	e582      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012eec:	2000      	movs	r0, #0
 8012eee:	e580      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	e57e      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8012ef4:	2001      	movs	r0, #1
 8012ef6:	e57c      	b.n	80129f2 <HAL_RCC_OscConfig+0x6a>
 8012ef8:	40021000 	.word	0x40021000
 8012efc:	00001388 	.word	0x00001388
 8012f00:	feffffff 	.word	0xfeffffff
 8012f04:	fffeffff 	.word	0xfffeffff
 8012f08:	ffc27fff 	.word	0xffc27fff

08012f0c <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f0e:	46ce      	mov	lr, r9
 8012f10:	4647      	mov	r7, r8
 8012f12:	b580      	push	{r7, lr}
 8012f14:	0005      	movs	r5, r0
 8012f16:	000c      	movs	r4, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012f18:	4b95      	ldr	r3, [pc, #596]	; (8013170 <HAL_RCC_ClockConfig+0x264>)
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	2301      	movs	r3, #1
 8012f1e:	4013      	ands	r3, r2
 8012f20:	428b      	cmp	r3, r1
 8012f22:	d300      	bcc.n	8012f26 <HAL_RCC_ClockConfig+0x1a>
 8012f24:	e089      	b.n	801303a <HAL_RCC_ClockConfig+0x12e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012f26:	4992      	ldr	r1, [pc, #584]	; (8013170 <HAL_RCC_ClockConfig+0x264>)
 8012f28:	680b      	ldr	r3, [r1, #0]
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	4393      	bics	r3, r2
 8012f2e:	4323      	orrs	r3, r4
 8012f30:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012f32:	680b      	ldr	r3, [r1, #0]
 8012f34:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012f36:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012f38:	42a2      	cmp	r2, r4
 8012f3a:	d003      	beq.n	8012f44 <HAL_RCC_ClockConfig+0x38>
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 8012f3c:	bc0c      	pop	{r2, r3}
 8012f3e:	4690      	mov	r8, r2
 8012f40:	4699      	mov	r9, r3
 8012f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012f44:	682b      	ldr	r3, [r5, #0]
 8012f46:	079b      	lsls	r3, r3, #30
 8012f48:	d506      	bpl.n	8012f58 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012f4a:	4a8a      	ldr	r2, [pc, #552]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012f4c:	6853      	ldr	r3, [r2, #4]
 8012f4e:	21f0      	movs	r1, #240	; 0xf0
 8012f50:	438b      	bics	r3, r1
 8012f52:	68a9      	ldr	r1, [r5, #8]
 8012f54:	430b      	orrs	r3, r1
 8012f56:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012f58:	682b      	ldr	r3, [r5, #0]
 8012f5a:	07db      	lsls	r3, r3, #31
 8012f5c:	d400      	bmi.n	8012f60 <HAL_RCC_ClockConfig+0x54>
 8012f5e:	e0f7      	b.n	8013150 <HAL_RCC_ClockConfig+0x244>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012f60:	686b      	ldr	r3, [r5, #4]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d009      	beq.n	8012f7a <HAL_RCC_ClockConfig+0x6e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012f66:	2b02      	cmp	r3, #2
 8012f68:	d02b      	beq.n	8012fc2 <HAL_RCC_ClockConfig+0xb6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012f6a:	2b03      	cmp	r3, #3
 8012f6c:	d02f      	beq.n	8012fce <HAL_RCC_ClockConfig+0xc2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f6e:	4a81      	ldr	r2, [pc, #516]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012f70:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012f72:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f74:	0792      	lsls	r2, r2, #30
 8012f76:	d405      	bmi.n	8012f84 <HAL_RCC_ClockConfig+0x78>
 8012f78:	e7e0      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012f7a:	4a7e      	ldr	r2, [pc, #504]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012f7c:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012f7e:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012f80:	0392      	lsls	r2, r2, #14
 8012f82:	d5db      	bpl.n	8012f3c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012f84:	497b      	ldr	r1, [pc, #492]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012f86:	684a      	ldr	r2, [r1, #4]
 8012f88:	2003      	movs	r0, #3
 8012f8a:	4382      	bics	r2, r0
 8012f8c:	4313      	orrs	r3, r2
 8012f8e:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8012f90:	f7fd fdde 	bl	8010b50 <HAL_GetTick>
 8012f94:	0004      	movs	r4, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012f96:	686b      	ldr	r3, [r5, #4]
 8012f98:	2b01      	cmp	r3, #1
 8012f9a:	d01e      	beq.n	8012fda <HAL_RCC_ClockConfig+0xce>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012f9c:	2b02      	cmp	r3, #2
 8012f9e:	d02c      	beq.n	8012ffa <HAL_RCC_ClockConfig+0xee>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012fa0:	2b03      	cmp	r3, #3
 8012fa2:	d03a      	beq.n	801301a <HAL_RCC_ClockConfig+0x10e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012fa4:	4f73      	ldr	r7, [pc, #460]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012fa6:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fa8:	4b73      	ldr	r3, [pc, #460]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 8012faa:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	421e      	tst	r6, r3
 8012fb0:	d100      	bne.n	8012fb4 <HAL_RCC_ClockConfig+0xa8>
 8012fb2:	e0cd      	b.n	8013150 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fb4:	f7fd fdcc 	bl	8010b50 <HAL_GetTick>
 8012fb8:	1b00      	subs	r0, r0, r4
 8012fba:	4540      	cmp	r0, r8
 8012fbc:	d9f6      	bls.n	8012fac <HAL_RCC_ClockConfig+0xa0>
            return HAL_TIMEOUT;
 8012fbe:	2003      	movs	r0, #3
 8012fc0:	e7bc      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012fc2:	4a6c      	ldr	r2, [pc, #432]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012fc4:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8012fc6:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012fc8:	0192      	lsls	r2, r2, #6
 8012fca:	d4db      	bmi.n	8012f84 <HAL_RCC_ClockConfig+0x78>
 8012fcc:	e7b6      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012fce:	4a69      	ldr	r2, [pc, #420]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012fd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 8012fd2:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012fd4:	03d2      	lsls	r2, r2, #15
 8012fd6:	d4d5      	bmi.n	8012f84 <HAL_RCC_ClockConfig+0x78>
 8012fd8:	e7b0      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012fda:	4f66      	ldr	r7, [pc, #408]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012fdc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fde:	4b66      	ldr	r3, [pc, #408]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 8012fe0:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	4033      	ands	r3, r6
 8012fe6:	2b04      	cmp	r3, #4
 8012fe8:	d100      	bne.n	8012fec <HAL_RCC_ClockConfig+0xe0>
 8012fea:	e0b1      	b.n	8013150 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012fec:	f7fd fdb0 	bl	8010b50 <HAL_GetTick>
 8012ff0:	1b00      	subs	r0, r0, r4
 8012ff2:	4540      	cmp	r0, r8
 8012ff4:	d9f5      	bls.n	8012fe2 <HAL_RCC_ClockConfig+0xd6>
            return HAL_TIMEOUT;
 8012ff6:	2003      	movs	r0, #3
 8012ff8:	e7a0      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012ffa:	4f5e      	ldr	r7, [pc, #376]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8012ffc:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ffe:	4b5e      	ldr	r3, [pc, #376]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 8013000:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	4033      	ands	r3, r6
 8013006:	2b08      	cmp	r3, #8
 8013008:	d100      	bne.n	801300c <HAL_RCC_ClockConfig+0x100>
 801300a:	e0a1      	b.n	8013150 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801300c:	f7fd fda0 	bl	8010b50 <HAL_GetTick>
 8013010:	1b00      	subs	r0, r0, r4
 8013012:	4540      	cmp	r0, r8
 8013014:	d9f5      	bls.n	8013002 <HAL_RCC_ClockConfig+0xf6>
            return HAL_TIMEOUT;
 8013016:	2003      	movs	r0, #3
 8013018:	e790      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 801301a:	4f56      	ldr	r7, [pc, #344]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 801301c:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801301e:	4b56      	ldr	r3, [pc, #344]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 8013020:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	4033      	ands	r3, r6
 8013026:	2b0c      	cmp	r3, #12
 8013028:	d100      	bne.n	801302c <HAL_RCC_ClockConfig+0x120>
 801302a:	e091      	b.n	8013150 <HAL_RCC_ClockConfig+0x244>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801302c:	f7fd fd90 	bl	8010b50 <HAL_GetTick>
 8013030:	1b00      	subs	r0, r0, r4
 8013032:	4540      	cmp	r0, r8
 8013034:	d9f5      	bls.n	8013022 <HAL_RCC_ClockConfig+0x116>
            return HAL_TIMEOUT;
 8013036:	2003      	movs	r0, #3
 8013038:	e780      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801303a:	6803      	ldr	r3, [r0, #0]
 801303c:	079b      	lsls	r3, r3, #30
 801303e:	d506      	bpl.n	801304e <HAL_RCC_ClockConfig+0x142>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8013040:	4a4c      	ldr	r2, [pc, #304]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8013042:	6853      	ldr	r3, [r2, #4]
 8013044:	21f0      	movs	r1, #240	; 0xf0
 8013046:	438b      	bics	r3, r1
 8013048:	6881      	ldr	r1, [r0, #8]
 801304a:	430b      	orrs	r3, r1
 801304c:	6053      	str	r3, [r2, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801304e:	682b      	ldr	r3, [r5, #0]
 8013050:	07db      	lsls	r3, r3, #31
 8013052:	d571      	bpl.n	8013138 <HAL_RCC_ClockConfig+0x22c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8013054:	686b      	ldr	r3, [r5, #4]
 8013056:	2b01      	cmp	r3, #1
 8013058:	d009      	beq.n	801306e <HAL_RCC_ClockConfig+0x162>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801305a:	2b02      	cmp	r3, #2
 801305c:	d02d      	beq.n	80130ba <HAL_RCC_ClockConfig+0x1ae>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 801305e:	2b03      	cmp	r3, #3
 8013060:	d031      	beq.n	80130c6 <HAL_RCC_ClockConfig+0x1ba>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013062:	4a44      	ldr	r2, [pc, #272]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8013064:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8013066:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013068:	0792      	lsls	r2, r2, #30
 801306a:	d406      	bmi.n	801307a <HAL_RCC_ClockConfig+0x16e>
 801306c:	e766      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801306e:	4a41      	ldr	r2, [pc, #260]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8013070:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 8013072:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013074:	0392      	lsls	r2, r2, #14
 8013076:	d400      	bmi.n	801307a <HAL_RCC_ClockConfig+0x16e>
 8013078:	e760      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801307a:	493e      	ldr	r1, [pc, #248]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 801307c:	684a      	ldr	r2, [r1, #4]
 801307e:	2003      	movs	r0, #3
 8013080:	4382      	bics	r2, r0
 8013082:	4313      	orrs	r3, r2
 8013084:	604b      	str	r3, [r1, #4]
      tickstart = HAL_GetTick();
 8013086:	f7fd fd63 	bl	8010b50 <HAL_GetTick>
 801308a:	0006      	movs	r6, r0
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801308c:	686b      	ldr	r3, [r5, #4]
 801308e:	2b01      	cmp	r3, #1
 8013090:	d01f      	beq.n	80130d2 <HAL_RCC_ClockConfig+0x1c6>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8013092:	2b02      	cmp	r3, #2
 8013094:	d02e      	beq.n	80130f4 <HAL_RCC_ClockConfig+0x1e8>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8013096:	2b03      	cmp	r3, #3
 8013098:	d03d      	beq.n	8013116 <HAL_RCC_ClockConfig+0x20a>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 801309a:	4b36      	ldr	r3, [pc, #216]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 801309c:	4698      	mov	r8, r3
 801309e:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130a0:	4b35      	ldr	r3, [pc, #212]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 80130a2:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80130a4:	4643      	mov	r3, r8
 80130a6:	685b      	ldr	r3, [r3, #4]
 80130a8:	421f      	tst	r7, r3
 80130aa:	d045      	beq.n	8013138 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130ac:	f7fd fd50 	bl	8010b50 <HAL_GetTick>
 80130b0:	1b80      	subs	r0, r0, r6
 80130b2:	4548      	cmp	r0, r9
 80130b4:	d9f6      	bls.n	80130a4 <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 80130b6:	2003      	movs	r0, #3
 80130b8:	e740      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130ba:	4a2e      	ldr	r2, [pc, #184]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 80130bc:	6812      	ldr	r2, [r2, #0]
          return HAL_ERROR;
 80130be:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80130c0:	0192      	lsls	r2, r2, #6
 80130c2:	d4da      	bmi.n	801307a <HAL_RCC_ClockConfig+0x16e>
 80130c4:	e73a      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80130c6:	4a2b      	ldr	r2, [pc, #172]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 80130c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
          return HAL_ERROR;
 80130ca:	2001      	movs	r0, #1
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80130cc:	03d2      	lsls	r2, r2, #15
 80130ce:	d4d4      	bmi.n	801307a <HAL_RCC_ClockConfig+0x16e>
 80130d0:	e734      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80130d2:	4b28      	ldr	r3, [pc, #160]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 80130d4:	4698      	mov	r8, r3
 80130d6:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130d8:	4b27      	ldr	r3, [pc, #156]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 80130da:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80130dc:	4643      	mov	r3, r8
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	403b      	ands	r3, r7
 80130e2:	2b04      	cmp	r3, #4
 80130e4:	d028      	beq.n	8013138 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130e6:	f7fd fd33 	bl	8010b50 <HAL_GetTick>
 80130ea:	1b80      	subs	r0, r0, r6
 80130ec:	4548      	cmp	r0, r9
 80130ee:	d9f5      	bls.n	80130dc <HAL_RCC_ClockConfig+0x1d0>
            return HAL_TIMEOUT;
 80130f0:	2003      	movs	r0, #3
 80130f2:	e723      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80130f4:	4b1f      	ldr	r3, [pc, #124]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 80130f6:	4698      	mov	r8, r3
 80130f8:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80130fa:	4b1f      	ldr	r3, [pc, #124]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 80130fc:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80130fe:	4643      	mov	r3, r8
 8013100:	685b      	ldr	r3, [r3, #4]
 8013102:	403b      	ands	r3, r7
 8013104:	2b08      	cmp	r3, #8
 8013106:	d017      	beq.n	8013138 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8013108:	f7fd fd22 	bl	8010b50 <HAL_GetTick>
 801310c:	1b80      	subs	r0, r0, r6
 801310e:	4548      	cmp	r0, r9
 8013110:	d9f5      	bls.n	80130fe <HAL_RCC_ClockConfig+0x1f2>
            return HAL_TIMEOUT;
 8013112:	2003      	movs	r0, #3
 8013114:	e712      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013116:	4b17      	ldr	r3, [pc, #92]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8013118:	4698      	mov	r8, r3
 801311a:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801311c:	4b16      	ldr	r3, [pc, #88]	; (8013178 <HAL_RCC_ClockConfig+0x26c>)
 801311e:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8013120:	4643      	mov	r3, r8
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	403b      	ands	r3, r7
 8013126:	2b0c      	cmp	r3, #12
 8013128:	d006      	beq.n	8013138 <HAL_RCC_ClockConfig+0x22c>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801312a:	f7fd fd11 	bl	8010b50 <HAL_GetTick>
 801312e:	1b80      	subs	r0, r0, r6
 8013130:	4548      	cmp	r0, r9
 8013132:	d9f5      	bls.n	8013120 <HAL_RCC_ClockConfig+0x214>
            return HAL_TIMEOUT;
 8013134:	2003      	movs	r0, #3
 8013136:	e701      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013138:	490d      	ldr	r1, [pc, #52]	; (8013170 <HAL_RCC_ClockConfig+0x264>)
 801313a:	680b      	ldr	r3, [r1, #0]
 801313c:	2201      	movs	r2, #1
 801313e:	4393      	bics	r3, r2
 8013140:	4323      	orrs	r3, r4
 8013142:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8013144:	680b      	ldr	r3, [r1, #0]
 8013146:	401a      	ands	r2, r3
      return HAL_ERROR;
 8013148:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 801314a:	42a2      	cmp	r2, r4
 801314c:	d000      	beq.n	8013150 <HAL_RCC_ClockConfig+0x244>
 801314e:	e6f5      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8013150:	682b      	ldr	r3, [r5, #0]
 8013152:	075b      	lsls	r3, r3, #29
 8013154:	d506      	bpl.n	8013164 <HAL_RCC_ClockConfig+0x258>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8013156:	4a07      	ldr	r2, [pc, #28]	; (8013174 <HAL_RCC_ClockConfig+0x268>)
 8013158:	6853      	ldr	r3, [r2, #4]
 801315a:	4908      	ldr	r1, [pc, #32]	; (801317c <HAL_RCC_ClockConfig+0x270>)
 801315c:	400b      	ands	r3, r1
 801315e:	68e9      	ldr	r1, [r5, #12]
 8013160:	430b      	orrs	r3, r1
 8013162:	6053      	str	r3, [r2, #4]
  HAL_InitTick (TICK_INT_PRIORITY);
 8013164:	2000      	movs	r0, #0
 8013166:	f7fd fcc9 	bl	8010afc <HAL_InitTick>
  return HAL_OK;
 801316a:	2000      	movs	r0, #0
 801316c:	e6e6      	b.n	8012f3c <HAL_RCC_ClockConfig+0x30>
 801316e:	46c0      	nop			; (mov r8, r8)
 8013170:	40022000 	.word	0x40022000
 8013174:	40021000 	.word	0x40021000
 8013178:	00001388 	.word	0x00001388
 801317c:	fffff8ff 	.word	0xfffff8ff

08013180 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8013180:	b530      	push	{r4, r5, lr}
 8013182:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8013184:	aa04      	add	r2, sp, #16
 8013186:	4b21      	ldr	r3, [pc, #132]	; (801320c <HAL_RCC_GetSysClockFreq+0x8c>)
 8013188:	0018      	movs	r0, r3
 801318a:	c832      	ldmia	r0!, {r1, r4, r5}
 801318c:	c232      	stmia	r2!, {r1, r4, r5}
 801318e:	0011      	movs	r1, r2
 8013190:	6802      	ldr	r2, [r0, #0]
 8013192:	600a      	str	r2, [r1, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8013194:	466a      	mov	r2, sp
 8013196:	3310      	adds	r3, #16
 8013198:	cb13      	ldmia	r3!, {r0, r1, r4}
 801319a:	c213      	stmia	r2!, {r0, r1, r4}
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 80131a0:	4b1b      	ldr	r3, [pc, #108]	; (8013210 <HAL_RCC_GetSysClockFreq+0x90>)
 80131a2:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80131a4:	200c      	movs	r0, #12
 80131a6:	4018      	ands	r0, r3
 80131a8:	2808      	cmp	r0, #8
 80131aa:	d00a      	beq.n	80131c2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80131ac:	380c      	subs	r0, #12
 80131ae:	4243      	negs	r3, r0
 80131b0:	4158      	adcs	r0, r3
 80131b2:	4240      	negs	r0, r0
 80131b4:	4b17      	ldr	r3, [pc, #92]	; (8013214 <HAL_RCC_GetSysClockFreq+0x94>)
 80131b6:	4018      	ands	r0, r3
 80131b8:	4b17      	ldr	r3, [pc, #92]	; (8013218 <HAL_RCC_GetSysClockFreq+0x98>)
 80131ba:	469c      	mov	ip, r3
 80131bc:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80131be:	b009      	add	sp, #36	; 0x24
 80131c0:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80131c2:	0c99      	lsrs	r1, r3, #18
 80131c4:	220f      	movs	r2, #15
 80131c6:	4011      	ands	r1, r2
 80131c8:	a804      	add	r0, sp, #16
 80131ca:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80131cc:	4910      	ldr	r1, [pc, #64]	; (8013210 <HAL_RCC_GetSysClockFreq+0x90>)
 80131ce:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80131d0:	400a      	ands	r2, r1
 80131d2:	4669      	mov	r1, sp
 80131d4:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80131d6:	22c0      	movs	r2, #192	; 0xc0
 80131d8:	0252      	lsls	r2, r2, #9
 80131da:	4013      	ands	r3, r2
 80131dc:	2280      	movs	r2, #128	; 0x80
 80131de:	0252      	lsls	r2, r2, #9
 80131e0:	4293      	cmp	r3, r2
 80131e2:	d008      	beq.n	80131f6 <HAL_RCC_GetSysClockFreq+0x76>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80131e4:	22c0      	movs	r2, #192	; 0xc0
 80131e6:	0252      	lsls	r2, r2, #9
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d009      	beq.n	8013200 <HAL_RCC_GetSysClockFreq+0x80>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 80131ec:	480a      	ldr	r0, [pc, #40]	; (8013218 <HAL_RCC_GetSysClockFreq+0x98>)
 80131ee:	f7ec ffaf 	bl	8000150 <__udivsi3>
 80131f2:	4360      	muls	r0, r4
 80131f4:	e7e3      	b.n	80131be <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 80131f6:	4808      	ldr	r0, [pc, #32]	; (8013218 <HAL_RCC_GetSysClockFreq+0x98>)
 80131f8:	f7ec ffaa 	bl	8000150 <__udivsi3>
 80131fc:	4360      	muls	r0, r4
 80131fe:	e7de      	b.n	80131be <HAL_RCC_GetSysClockFreq+0x3e>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8013200:	4806      	ldr	r0, [pc, #24]	; (801321c <HAL_RCC_GetSysClockFreq+0x9c>)
 8013202:	f7ec ffa5 	bl	8000150 <__udivsi3>
 8013206:	4360      	muls	r0, r4
 8013208:	e7d9      	b.n	80131be <HAL_RCC_GetSysClockFreq+0x3e>
 801320a:	46c0      	nop			; (mov r8, r8)
 801320c:	08019224 	.word	0x08019224
 8013210:	40021000 	.word	0x40021000
 8013214:	02625a00 	.word	0x02625a00
 8013218:	007a1200 	.word	0x007a1200
 801321c:	02dc6c00 	.word	0x02dc6c00

08013220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013220:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8013222:	f7ff ffad 	bl	8013180 <HAL_RCC_GetSysClockFreq>
 8013226:	4b05      	ldr	r3, [pc, #20]	; (801323c <HAL_RCC_GetHCLKFreq+0x1c>)
 8013228:	685b      	ldr	r3, [r3, #4]
 801322a:	061b      	lsls	r3, r3, #24
 801322c:	0f1b      	lsrs	r3, r3, #28
 801322e:	4a04      	ldr	r2, [pc, #16]	; (8013240 <HAL_RCC_GetHCLKFreq+0x20>)
 8013230:	5cd3      	ldrb	r3, [r2, r3]
 8013232:	40d8      	lsrs	r0, r3
 8013234:	4b03      	ldr	r3, [pc, #12]	; (8013244 <HAL_RCC_GetHCLKFreq+0x24>)
 8013236:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8013238:	bd10      	pop	{r4, pc}
 801323a:	46c0      	nop			; (mov r8, r8)
 801323c:	40021000 	.word	0x40021000
 8013240:	0801c328 	.word	0x0801c328
 8013244:	20000100 	.word	0x20000100

08013248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013248:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 801324a:	f7ff ffe9 	bl	8013220 <HAL_RCC_GetHCLKFreq>
 801324e:	4b04      	ldr	r3, [pc, #16]	; (8013260 <HAL_RCC_GetPCLK1Freq+0x18>)
 8013250:	685b      	ldr	r3, [r3, #4]
 8013252:	055b      	lsls	r3, r3, #21
 8013254:	0f5b      	lsrs	r3, r3, #29
 8013256:	4a03      	ldr	r2, [pc, #12]	; (8013264 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8013258:	5cd3      	ldrb	r3, [r2, r3]
 801325a:	40d8      	lsrs	r0, r3
}    
 801325c:	bd10      	pop	{r4, pc}
 801325e:	46c0      	nop			; (mov r8, r8)
 8013260:	40021000 	.word	0x40021000
 8013264:	0801c328 	.word	0x0801c328

08013268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8013268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801326a:	46c6      	mov	lr, r8
 801326c:	b500      	push	{lr}
 801326e:	b082      	sub	sp, #8
 8013270:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8013272:	6803      	ldr	r3, [r0, #0]
 8013274:	03db      	lsls	r3, r3, #15
 8013276:	d507      	bpl.n	8013288 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8013278:	4b43      	ldr	r3, [pc, #268]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801327a:	6a1b      	ldr	r3, [r3, #32]
 801327c:	6842      	ldr	r2, [r0, #4]
 801327e:	4053      	eors	r3, r2
 8013280:	22c0      	movs	r2, #192	; 0xc0
 8013282:	0092      	lsls	r2, r2, #2
 8013284:	4213      	tst	r3, r2
 8013286:	d136      	bne.n	80132f6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8013288:	6823      	ldr	r3, [r4, #0]
 801328a:	07db      	lsls	r3, r3, #31
 801328c:	d506      	bpl.n	801329c <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801328e:	4a3e      	ldr	r2, [pc, #248]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013290:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013292:	2103      	movs	r1, #3
 8013294:	438b      	bics	r3, r1
 8013296:	68a1      	ldr	r1, [r4, #8]
 8013298:	430b      	orrs	r3, r1
 801329a:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801329c:	6823      	ldr	r3, [r4, #0]
 801329e:	079b      	lsls	r3, r3, #30
 80132a0:	d506      	bpl.n	80132b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80132a2:	4a39      	ldr	r2, [pc, #228]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80132a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80132a6:	4939      	ldr	r1, [pc, #228]	; (801338c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80132a8:	400b      	ands	r3, r1
 80132aa:	68e1      	ldr	r1, [r4, #12]
 80132ac:	430b      	orrs	r3, r1
 80132ae:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80132b0:	6823      	ldr	r3, [r4, #0]
 80132b2:	035b      	lsls	r3, r3, #13
 80132b4:	d506      	bpl.n	80132c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80132b6:	4a34      	ldr	r2, [pc, #208]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80132b8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80132ba:	4935      	ldr	r1, [pc, #212]	; (8013390 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 80132bc:	400b      	ands	r3, r1
 80132be:	6921      	ldr	r1, [r4, #16]
 80132c0:	430b      	orrs	r3, r1
 80132c2:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80132c4:	6823      	ldr	r3, [r4, #0]
 80132c6:	069b      	lsls	r3, r3, #26
 80132c8:	d506      	bpl.n	80132d8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80132ca:	4a2f      	ldr	r2, [pc, #188]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80132cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80132ce:	2110      	movs	r1, #16
 80132d0:	438b      	bics	r3, r1
 80132d2:	6961      	ldr	r1, [r4, #20]
 80132d4:	430b      	orrs	r3, r1
 80132d6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80132d8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	055b      	lsls	r3, r3, #21
 80132de:	d506      	bpl.n	80132ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80132e0:	4a29      	ldr	r2, [pc, #164]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80132e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80132e4:	2140      	movs	r1, #64	; 0x40
 80132e6:	438b      	bics	r3, r1
 80132e8:	69a1      	ldr	r1, [r4, #24]
 80132ea:	430b      	orrs	r3, r1
 80132ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80132ee:	b002      	add	sp, #8
 80132f0:	bc04      	pop	{r2}
 80132f2:	4690      	mov	r8, r2
 80132f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80132f6:	4a24      	ldr	r2, [pc, #144]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80132f8:	69d1      	ldr	r1, [r2, #28]
 80132fa:	2080      	movs	r0, #128	; 0x80
 80132fc:	0540      	lsls	r0, r0, #21
 80132fe:	4301      	orrs	r1, r0
 8013300:	61d1      	str	r1, [r2, #28]
 8013302:	69d3      	ldr	r3, [r2, #28]
 8013304:	4003      	ands	r3, r0
 8013306:	9301      	str	r3, [sp, #4]
 8013308:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801330a:	4a22      	ldr	r2, [pc, #136]	; (8013394 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801330c:	6811      	ldr	r1, [r2, #0]
 801330e:	2380      	movs	r3, #128	; 0x80
 8013310:	005b      	lsls	r3, r3, #1
 8013312:	430b      	orrs	r3, r1
 8013314:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8013316:	f7fd fc1b 	bl	8010b50 <HAL_GetTick>
 801331a:	0007      	movs	r7, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 801331c:	4e1d      	ldr	r6, [pc, #116]	; (8013394 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 801331e:	2580      	movs	r5, #128	; 0x80
 8013320:	006d      	lsls	r5, r5, #1
 8013322:	6833      	ldr	r3, [r6, #0]
 8013324:	422b      	tst	r3, r5
 8013326:	d106      	bne.n	8013336 <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8013328:	f7fd fc12 	bl	8010b50 <HAL_GetTick>
 801332c:	1bc0      	subs	r0, r0, r7
 801332e:	2864      	cmp	r0, #100	; 0x64
 8013330:	d9f7      	bls.n	8013322 <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8013332:	2003      	movs	r0, #3
 8013334:	e7db      	b.n	80132ee <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8013336:	4b14      	ldr	r3, [pc, #80]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013338:	6a18      	ldr	r0, [r3, #32]
 801333a:	4a17      	ldr	r2, [pc, #92]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801333c:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 801333e:	6a1d      	ldr	r5, [r3, #32]
 8013340:	2180      	movs	r1, #128	; 0x80
 8013342:	0249      	lsls	r1, r1, #9
 8013344:	4329      	orrs	r1, r5
 8013346:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8013348:	6a19      	ldr	r1, [r3, #32]
 801334a:	4d14      	ldr	r5, [pc, #80]	; (801339c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801334c:	4029      	ands	r1, r5
 801334e:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8013350:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8013352:	0783      	lsls	r3, r0, #30
 8013354:	d407      	bmi.n	8013366 <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8013356:	4a0c      	ldr	r2, [pc, #48]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8013358:	6a13      	ldr	r3, [r2, #32]
 801335a:	490f      	ldr	r1, [pc, #60]	; (8013398 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801335c:	400b      	ands	r3, r1
 801335e:	6861      	ldr	r1, [r4, #4]
 8013360:	430b      	orrs	r3, r1
 8013362:	6213      	str	r3, [r2, #32]
 8013364:	e790      	b.n	8013288 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8013366:	f7fd fbf3 	bl	8010b50 <HAL_GetTick>
 801336a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801336c:	4e06      	ldr	r6, [pc, #24]	; (8013388 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 801336e:	2502      	movs	r5, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013370:	4f0b      	ldr	r7, [pc, #44]	; (80133a0 <HAL_RCCEx_PeriphCLKConfig+0x138>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8013372:	6a33      	ldr	r3, [r6, #32]
 8013374:	421d      	tst	r5, r3
 8013376:	d1ee      	bne.n	8013356 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013378:	f7fd fbea 	bl	8010b50 <HAL_GetTick>
 801337c:	4643      	mov	r3, r8
 801337e:	1ac0      	subs	r0, r0, r3
 8013380:	42b8      	cmp	r0, r7
 8013382:	d9f6      	bls.n	8013372 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            return HAL_TIMEOUT;
 8013384:	2003      	movs	r0, #3
 8013386:	e7b2      	b.n	80132ee <HAL_RCCEx_PeriphCLKConfig+0x86>
 8013388:	40021000 	.word	0x40021000
 801338c:	fffcffff 	.word	0xfffcffff
 8013390:	fff3ffff 	.word	0xfff3ffff
 8013394:	40007000 	.word	0x40007000
 8013398:	fffffcff 	.word	0xfffffcff
 801339c:	fffeffff 	.word	0xfffeffff
 80133a0:	00001388 	.word	0x00001388

080133a4 <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 80133a4:	4770      	bx	lr

080133a6 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80133a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133a8:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80133aa:	6802      	ldr	r2, [r0, #0]
 80133ac:	68d3      	ldr	r3, [r2, #12]
 80133ae:	21a0      	movs	r1, #160	; 0xa0
 80133b0:	438b      	bics	r3, r1
 80133b2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80133b4:	f7fd fbcc 	bl	8010b50 <HAL_GetTick>
 80133b8:	0007      	movs	r7, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80133ba:	2520      	movs	r5, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80133bc:	26fa      	movs	r6, #250	; 0xfa
 80133be:	00b6      	lsls	r6, r6, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80133c0:	6823      	ldr	r3, [r4, #0]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	421d      	tst	r5, r3
 80133c6:	d106      	bne.n	80133d6 <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80133c8:	f7fd fbc2 	bl	8010b50 <HAL_GetTick>
 80133cc:	1bc0      	subs	r0, r0, r7
 80133ce:	42b0      	cmp	r0, r6
 80133d0:	d9f6      	bls.n	80133c0 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 80133d2:	2003      	movs	r0, #3
 80133d4:	e000      	b.n	80133d8 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 80133d6:	2000      	movs	r0, #0
}
 80133d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080133da <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80133da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133dc:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80133de:	6803      	ldr	r3, [r0, #0]
 80133e0:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 80133e2:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80133e4:	0652      	lsls	r2, r2, #25
 80133e6:	d500      	bpl.n	80133ea <RTC_EnterInitMode+0x10>
}
 80133e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80133ea:	2201      	movs	r2, #1
 80133ec:	4252      	negs	r2, r2
 80133ee:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80133f0:	f7fd fbae 	bl	8010b50 <HAL_GetTick>
 80133f4:	0007      	movs	r7, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80133f6:	2540      	movs	r5, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 80133f8:	26fa      	movs	r6, #250	; 0xfa
 80133fa:	00b6      	lsls	r6, r6, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80133fc:	6823      	ldr	r3, [r4, #0]
 80133fe:	68db      	ldr	r3, [r3, #12]
 8013400:	421d      	tst	r5, r3
 8013402:	d106      	bne.n	8013412 <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013404:	f7fd fba4 	bl	8010b50 <HAL_GetTick>
 8013408:	1bc0      	subs	r0, r0, r7
 801340a:	42b0      	cmp	r0, r6
 801340c:	d9f6      	bls.n	80133fc <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 801340e:	2003      	movs	r0, #3
 8013410:	e7ea      	b.n	80133e8 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 8013412:	2000      	movs	r0, #0
 8013414:	e7e8      	b.n	80133e8 <RTC_EnterInitMode+0xe>
	...

08013418 <HAL_RTC_Init>:
{
 8013418:	b570      	push	{r4, r5, r6, lr}
 801341a:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 801341c:	d046      	beq.n	80134ac <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 801341e:	7f43      	ldrb	r3, [r0, #29]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d038      	beq.n	8013496 <HAL_RTC_Init+0x7e>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8013424:	2302      	movs	r3, #2
 8013426:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013428:	6823      	ldr	r3, [r4, #0]
 801342a:	22ca      	movs	r2, #202	; 0xca
 801342c:	625a      	str	r2, [r3, #36]	; 0x24
 801342e:	6823      	ldr	r3, [r4, #0]
 8013430:	3a77      	subs	r2, #119	; 0x77
 8013432:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013434:	0020      	movs	r0, r4
 8013436:	f7ff ffd0 	bl	80133da <RTC_EnterInitMode>
 801343a:	2800      	cmp	r0, #0
 801343c:	d12f      	bne.n	801349e <HAL_RTC_Init+0x86>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801343e:	6822      	ldr	r2, [r4, #0]
 8013440:	6893      	ldr	r3, [r2, #8]
 8013442:	491b      	ldr	r1, [pc, #108]	; (80134b0 <HAL_RTC_Init+0x98>)
 8013444:	400b      	ands	r3, r1
 8013446:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013448:	6822      	ldr	r2, [r4, #0]
 801344a:	6891      	ldr	r1, [r2, #8]
 801344c:	6863      	ldr	r3, [r4, #4]
 801344e:	6925      	ldr	r5, [r4, #16]
 8013450:	432b      	orrs	r3, r5
 8013452:	6965      	ldr	r5, [r4, #20]
 8013454:	432b      	orrs	r3, r5
 8013456:	430b      	orrs	r3, r1
 8013458:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801345a:	6823      	ldr	r3, [r4, #0]
 801345c:	68e2      	ldr	r2, [r4, #12]
 801345e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8013460:	6822      	ldr	r2, [r4, #0]
 8013462:	6911      	ldr	r1, [r2, #16]
 8013464:	68a3      	ldr	r3, [r4, #8]
 8013466:	041b      	lsls	r3, r3, #16
 8013468:	430b      	orrs	r3, r1
 801346a:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801346c:	6822      	ldr	r2, [r4, #0]
 801346e:	68d3      	ldr	r3, [r2, #12]
 8013470:	2180      	movs	r1, #128	; 0x80
 8013472:	438b      	bics	r3, r1
 8013474:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8013476:	6822      	ldr	r2, [r4, #0]
 8013478:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801347a:	490e      	ldr	r1, [pc, #56]	; (80134b4 <HAL_RTC_Init+0x9c>)
 801347c:	400b      	ands	r3, r1
 801347e:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8013480:	6822      	ldr	r2, [r4, #0]
 8013482:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8013484:	69a1      	ldr	r1, [r4, #24]
 8013486:	430b      	orrs	r3, r1
 8013488:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801348a:	6823      	ldr	r3, [r4, #0]
 801348c:	22ff      	movs	r2, #255	; 0xff
 801348e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8013490:	2301      	movs	r3, #1
 8013492:	7763      	strb	r3, [r4, #29]
}
 8013494:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8013496:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8013498:	f7ff ff84 	bl	80133a4 <HAL_RTC_MspInit>
 801349c:	e7c2      	b.n	8013424 <HAL_RTC_Init+0xc>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801349e:	6823      	ldr	r3, [r4, #0]
 80134a0:	22ff      	movs	r2, #255	; 0xff
 80134a2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80134a4:	2304      	movs	r3, #4
 80134a6:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 80134a8:	2001      	movs	r0, #1
 80134aa:	e7f3      	b.n	8013494 <HAL_RTC_Init+0x7c>
     return HAL_ERROR;
 80134ac:	2001      	movs	r0, #1
 80134ae:	e7f1      	b.n	8013494 <HAL_RTC_Init+0x7c>
 80134b0:	ff8fffbf 	.word	0xff8fffbf
 80134b4:	fffbffff 	.word	0xfffbffff

080134b8 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80134b8:	2809      	cmp	r0, #9
 80134ba:	d909      	bls.n	80134d0 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80134bc:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80134be:	3301      	adds	r3, #1
    Value -= 10;
 80134c0:	380a      	subs	r0, #10
 80134c2:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80134c4:	2809      	cmp	r0, #9
 80134c6:	d8fa      	bhi.n	80134be <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80134c8:	011b      	lsls	r3, r3, #4
 80134ca:	4318      	orrs	r0, r3
 80134cc:	b2c0      	uxtb	r0, r0
}
 80134ce:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	e7f9      	b.n	80134c8 <RTC_ByteToBcd2+0x10>

080134d4 <HAL_RTC_SetTime>:
{
 80134d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134d6:	46c6      	mov	lr, r8
 80134d8:	b500      	push	{lr}
 80134da:	0004      	movs	r4, r0
 80134dc:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80134de:	7f03      	ldrb	r3, [r0, #28]
 80134e0:	2b01      	cmp	r3, #1
 80134e2:	d100      	bne.n	80134e6 <HAL_RTC_SetTime+0x12>
 80134e4:	e075      	b.n	80135d2 <HAL_RTC_SetTime+0xfe>
 80134e6:	2301      	movs	r3, #1
 80134e8:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80134ea:	3301      	adds	r3, #1
 80134ec:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 80134ee:	2a00      	cmp	r2, #0
 80134f0:	d144      	bne.n	801357c <HAL_RTC_SetTime+0xa8>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80134f2:	6803      	ldr	r3, [r0, #0]
 80134f4:	689b      	ldr	r3, [r3, #8]
 80134f6:	065b      	lsls	r3, r3, #25
 80134f8:	d401      	bmi.n	80134fe <HAL_RTC_SetTime+0x2a>
      sTime->TimeFormat = 0x00;
 80134fa:	2300      	movs	r3, #0
 80134fc:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80134fe:	7830      	ldrb	r0, [r6, #0]
 8013500:	f7ff ffda 	bl	80134b8 <RTC_ByteToBcd2>
 8013504:	4680      	mov	r8, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013506:	7870      	ldrb	r0, [r6, #1]
 8013508:	f7ff ffd6 	bl	80134b8 <RTC_ByteToBcd2>
 801350c:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801350e:	78b0      	ldrb	r0, [r6, #2]
 8013510:	f7ff ffd2 	bl	80134b8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8013514:	7a35      	ldrb	r5, [r6, #8]
 8013516:	042d      	lsls	r5, r5, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013518:	4305      	orrs	r5, r0
 801351a:	4643      	mov	r3, r8
 801351c:	0418      	lsls	r0, r3, #16
 801351e:	4305      	orrs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013520:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013522:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013524:	6823      	ldr	r3, [r4, #0]
 8013526:	22ca      	movs	r2, #202	; 0xca
 8013528:	625a      	str	r2, [r3, #36]	; 0x24
 801352a:	6823      	ldr	r3, [r4, #0]
 801352c:	3a77      	subs	r2, #119	; 0x77
 801352e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013530:	0020      	movs	r0, r4
 8013532:	f7ff ff52 	bl	80133da <RTC_EnterInitMode>
 8013536:	1e07      	subs	r7, r0, #0
 8013538:	d131      	bne.n	801359e <HAL_RTC_SetTime+0xca>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801353a:	6823      	ldr	r3, [r4, #0]
 801353c:	4826      	ldr	r0, [pc, #152]	; (80135d8 <HAL_RTC_SetTime+0x104>)
 801353e:	4005      	ands	r5, r0
 8013540:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8013542:	6822      	ldr	r2, [r4, #0]
 8013544:	6893      	ldr	r3, [r2, #8]
 8013546:	4925      	ldr	r1, [pc, #148]	; (80135dc <HAL_RTC_SetTime+0x108>)
 8013548:	400b      	ands	r3, r1
 801354a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801354c:	6822      	ldr	r2, [r4, #0]
 801354e:	6891      	ldr	r1, [r2, #8]
 8013550:	68f3      	ldr	r3, [r6, #12]
 8013552:	6930      	ldr	r0, [r6, #16]
 8013554:	4303      	orrs	r3, r0
 8013556:	430b      	orrs	r3, r1
 8013558:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801355a:	6822      	ldr	r2, [r4, #0]
 801355c:	68d3      	ldr	r3, [r2, #12]
 801355e:	2180      	movs	r1, #128	; 0x80
 8013560:	438b      	bics	r3, r1
 8013562:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013564:	6823      	ldr	r3, [r4, #0]
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	069b      	lsls	r3, r3, #26
 801356a:	d524      	bpl.n	80135b6 <HAL_RTC_SetTime+0xe2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801356c:	6823      	ldr	r3, [r4, #0]
 801356e:	22ff      	movs	r2, #255	; 0xff
 8013570:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8013572:	2301      	movs	r3, #1
 8013574:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8013576:	2300      	movs	r3, #0
 8013578:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 801357a:	e018      	b.n	80135ae <HAL_RTC_SetTime+0xda>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 801357c:	6803      	ldr	r3, [r0, #0]
 801357e:	689b      	ldr	r3, [r3, #8]
 8013580:	065b      	lsls	r3, r3, #25
 8013582:	d401      	bmi.n	8013588 <HAL_RTC_SetTime+0xb4>
      sTime->TimeFormat = 0x00;
 8013584:	2300      	movs	r3, #0
 8013586:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013588:	7835      	ldrb	r5, [r6, #0]
 801358a:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 801358c:	7870      	ldrb	r0, [r6, #1]
 801358e:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8013590:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 8013592:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8013594:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 8013596:	7a30      	ldrb	r0, [r6, #8]
 8013598:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801359a:	4305      	orrs	r5, r0
 801359c:	e7c2      	b.n	8013524 <HAL_RTC_SetTime+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	22ff      	movs	r2, #255	; 0xff
 80135a2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80135a4:	2304      	movs	r3, #4
 80135a6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80135a8:	2300      	movs	r3, #0
 80135aa:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80135ac:	2701      	movs	r7, #1
}
 80135ae:	0038      	movs	r0, r7
 80135b0:	bc04      	pop	{r2}
 80135b2:	4690      	mov	r8, r2
 80135b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80135b6:	0020      	movs	r0, r4
 80135b8:	f7ff fef5 	bl	80133a6 <HAL_RTC_WaitForSynchro>
 80135bc:	2800      	cmp	r0, #0
 80135be:	d0d5      	beq.n	801356c <HAL_RTC_SetTime+0x98>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80135c0:	6823      	ldr	r3, [r4, #0]
 80135c2:	22ff      	movs	r2, #255	; 0xff
 80135c4:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80135c6:	2304      	movs	r3, #4
 80135c8:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80135ca:	2300      	movs	r3, #0
 80135cc:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80135ce:	2701      	movs	r7, #1
 80135d0:	e7ed      	b.n	80135ae <HAL_RTC_SetTime+0xda>
  __HAL_LOCK(hrtc);
 80135d2:	2702      	movs	r7, #2
 80135d4:	e7eb      	b.n	80135ae <HAL_RTC_SetTime+0xda>
 80135d6:	46c0      	nop			; (mov r8, r8)
 80135d8:	007f7f7f 	.word	0x007f7f7f
 80135dc:	fffbffff 	.word	0xfffbffff

080135e0 <HAL_RTC_SetDate>:
{
 80135e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135e2:	46c6      	mov	lr, r8
 80135e4:	b500      	push	{lr}
 80135e6:	0004      	movs	r4, r0
 80135e8:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80135ea:	7f03      	ldrb	r3, [r0, #28]
 80135ec:	2b01      	cmp	r3, #1
 80135ee:	d03a      	beq.n	8013666 <HAL_RTC_SetDate+0x86>
 80135f0:	2301      	movs	r3, #1
 80135f2:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 80135f4:	3301      	adds	r3, #1
 80135f6:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 80135f8:	2a00      	cmp	r2, #0
 80135fa:	d136      	bne.n	801366a <HAL_RTC_SetDate+0x8a>
 80135fc:	784b      	ldrb	r3, [r1, #1]
 80135fe:	06da      	lsls	r2, r3, #27
 8013600:	d503      	bpl.n	801360a <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 8013602:	2210      	movs	r2, #16
 8013604:	4393      	bics	r3, r2
 8013606:	330a      	adds	r3, #10
 8013608:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801360a:	78f0      	ldrb	r0, [r6, #3]
 801360c:	f7ff ff54 	bl	80134b8 <RTC_ByteToBcd2>
 8013610:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013612:	7870      	ldrb	r0, [r6, #1]
 8013614:	f7ff ff50 	bl	80134b8 <RTC_ByteToBcd2>
 8013618:	0007      	movs	r7, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801361a:	78b0      	ldrb	r0, [r6, #2]
 801361c:	f7ff ff4c 	bl	80134b8 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 8013620:	7835      	ldrb	r5, [r6, #0]
 8013622:	036d      	lsls	r5, r5, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013624:	4305      	orrs	r5, r0
 8013626:	4643      	mov	r3, r8
 8013628:	0418      	lsls	r0, r3, #16
 801362a:	4305      	orrs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801362c:	023f      	lsls	r7, r7, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801362e:	433d      	orrs	r5, r7
 8013630:	e025      	b.n	801367e <HAL_RTC_SetDate+0x9e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013632:	6823      	ldr	r3, [r4, #0]
 8013634:	22ff      	movs	r2, #255	; 0xff
 8013636:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013638:	2304      	movs	r3, #4
 801363a:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 801363c:	2300      	movs	r3, #0
 801363e:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 8013640:	2601      	movs	r6, #1
}
 8013642:	0030      	movs	r0, r6
 8013644:	bc04      	pop	{r2}
 8013646:	4690      	mov	r8, r2
 8013648:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801364a:	0020      	movs	r0, r4
 801364c:	f7ff feab 	bl	80133a6 <HAL_RTC_WaitForSynchro>
 8013650:	2800      	cmp	r0, #0
 8013652:	d02c      	beq.n	80136ae <HAL_RTC_SetDate+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8013654:	6823      	ldr	r3, [r4, #0]
 8013656:	22ff      	movs	r2, #255	; 0xff
 8013658:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 801365a:	2304      	movs	r3, #4
 801365c:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 801365e:	2300      	movs	r3, #0
 8013660:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8013662:	2601      	movs	r6, #1
 8013664:	e7ed      	b.n	8013642 <HAL_RTC_SetDate+0x62>
 __HAL_LOCK(hrtc);
 8013666:	2602      	movs	r6, #2
 8013668:	e7eb      	b.n	8013642 <HAL_RTC_SetDate+0x62>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801366a:	78cd      	ldrb	r5, [r1, #3]
 801366c:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 801366e:	7848      	ldrb	r0, [r1, #1]
 8013670:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013672:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 8013674:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8013676:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 8013678:	7808      	ldrb	r0, [r1, #0]
 801367a:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 801367c:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801367e:	6823      	ldr	r3, [r4, #0]
 8013680:	22ca      	movs	r2, #202	; 0xca
 8013682:	625a      	str	r2, [r3, #36]	; 0x24
 8013684:	6823      	ldr	r3, [r4, #0]
 8013686:	3a77      	subs	r2, #119	; 0x77
 8013688:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801368a:	0020      	movs	r0, r4
 801368c:	f7ff fea5 	bl	80133da <RTC_EnterInitMode>
 8013690:	1e06      	subs	r6, r0, #0
 8013692:	d1ce      	bne.n	8013632 <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8013694:	6823      	ldr	r3, [r4, #0]
 8013696:	480a      	ldr	r0, [pc, #40]	; (80136c0 <HAL_RTC_SetDate+0xe0>)
 8013698:	4005      	ands	r5, r0
 801369a:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801369c:	6822      	ldr	r2, [r4, #0]
 801369e:	68d3      	ldr	r3, [r2, #12]
 80136a0:	2180      	movs	r1, #128	; 0x80
 80136a2:	438b      	bics	r3, r1
 80136a4:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80136a6:	6823      	ldr	r3, [r4, #0]
 80136a8:	689b      	ldr	r3, [r3, #8]
 80136aa:	069b      	lsls	r3, r3, #26
 80136ac:	d5cd      	bpl.n	801364a <HAL_RTC_SetDate+0x6a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80136ae:	6823      	ldr	r3, [r4, #0]
 80136b0:	22ff      	movs	r2, #255	; 0xff
 80136b2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80136b4:	2301      	movs	r3, #1
 80136b6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80136b8:	2300      	movs	r3, #0
 80136ba:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 80136bc:	e7c1      	b.n	8013642 <HAL_RTC_SetDate+0x62>
 80136be:	46c0      	nop			; (mov r8, r8)
 80136c0:	00ffff3f 	.word	0x00ffff3f

080136c4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80136c4:	0002      	movs	r2, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80136c6:	0900      	lsrs	r0, r0, #4
 80136c8:	0083      	lsls	r3, r0, #2
 80136ca:	181b      	adds	r3, r3, r0
 80136cc:	005b      	lsls	r3, r3, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80136ce:	200f      	movs	r0, #15
 80136d0:	4010      	ands	r0, r2
 80136d2:	1818      	adds	r0, r3, r0
 80136d4:	b2c0      	uxtb	r0, r0
}
 80136d6:	4770      	bx	lr

080136d8 <HAL_RTC_GetTime>:
{
 80136d8:	b570      	push	{r4, r5, r6, lr}
 80136da:	000d      	movs	r5, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80136dc:	6803      	ldr	r3, [r0, #0]
 80136de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136e0:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80136e2:	6803      	ldr	r3, [r0, #0]
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	490e      	ldr	r1, [pc, #56]	; (8013720 <HAL_RTC_GetTime+0x48>)
 80136e8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80136ea:	0c19      	lsrs	r1, r3, #16
 80136ec:	203f      	movs	r0, #63	; 0x3f
 80136ee:	4008      	ands	r0, r1
 80136f0:	7028      	strb	r0, [r5, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80136f2:	0a1e      	lsrs	r6, r3, #8
 80136f4:	b2f6      	uxtb	r6, r6
 80136f6:	706e      	strb	r6, [r5, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80136f8:	b2dc      	uxtb	r4, r3
 80136fa:	70ac      	strb	r4, [r5, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 80136fc:	2340      	movs	r3, #64	; 0x40
 80136fe:	400b      	ands	r3, r1
 8013700:	722b      	strb	r3, [r5, #8]
  if(Format == RTC_FORMAT_BIN)
 8013702:	2a00      	cmp	r2, #0
 8013704:	d10a      	bne.n	801371c <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8013706:	f7ff ffdd 	bl	80136c4 <RTC_Bcd2ToByte>
 801370a:	7028      	strb	r0, [r5, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801370c:	0030      	movs	r0, r6
 801370e:	f7ff ffd9 	bl	80136c4 <RTC_Bcd2ToByte>
 8013712:	7068      	strb	r0, [r5, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8013714:	0020      	movs	r0, r4
 8013716:	f7ff ffd5 	bl	80136c4 <RTC_Bcd2ToByte>
 801371a:	70a8      	strb	r0, [r5, #2]
}
 801371c:	2000      	movs	r0, #0
 801371e:	bd70      	pop	{r4, r5, r6, pc}
 8013720:	007f7f7f 	.word	0x007f7f7f

08013724 <HAL_RTC_GetDate>:
{
 8013724:	b570      	push	{r4, r5, r6, lr}
 8013726:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8013728:	6803      	ldr	r3, [r0, #0]
 801372a:	685b      	ldr	r3, [r3, #4]
 801372c:	490d      	ldr	r1, [pc, #52]	; (8013764 <HAL_RTC_GetDate+0x40>)
 801372e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8013730:	0c18      	lsrs	r0, r3, #16
 8013732:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013734:	04dd      	lsls	r5, r3, #19
 8013736:	0eed      	lsrs	r5, r5, #27
 8013738:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801373a:	b2de      	uxtb	r6, r3
 801373c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801373e:	041b      	lsls	r3, r3, #16
 8013740:	0f5b      	lsrs	r3, r3, #29
 8013742:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8013744:	2a00      	cmp	r2, #0
 8013746:	d10a      	bne.n	801375e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013748:	f7ff ffbc 	bl	80136c4 <RTC_Bcd2ToByte>
 801374c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801374e:	0028      	movs	r0, r5
 8013750:	f7ff ffb8 	bl	80136c4 <RTC_Bcd2ToByte>
 8013754:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8013756:	0030      	movs	r0, r6
 8013758:	f7ff ffb4 	bl	80136c4 <RTC_Bcd2ToByte>
 801375c:	70a0      	strb	r0, [r4, #2]
}
 801375e:	2000      	movs	r0, #0
 8013760:	bd70      	pop	{r4, r5, r6, pc}
 8013762:	46c0      	nop			; (mov r8, r8)
 8013764:	00ffff3f 	.word	0x00ffff3f

08013768 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013768:	6803      	ldr	r3, [r0, #0]
 801376a:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 801376c:	0089      	lsls	r1, r1, #2
 801376e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8013770:	600a      	str	r2, [r1, #0]
}
 8013772:	4770      	bx	lr

08013774 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013774:	6803      	ldr	r3, [r0, #0]
 8013776:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013778:	0089      	lsls	r1, r1, #2
 801377a:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 801377c:	6808      	ldr	r0, [r1, #0]
}
 801377e:	4770      	bx	lr

08013780 <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8013780:	4770      	bx	lr

08013782 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8013782:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8013784:	2239      	movs	r2, #57	; 0x39
 8013786:	2302      	movs	r3, #2
 8013788:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801378a:	6804      	ldr	r4, [r0, #0]
 801378c:	6823      	ldr	r3, [r4, #0]
 801378e:	2101      	movs	r1, #1
 8013790:	430b      	orrs	r3, r1
 8013792:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8013794:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 8013796:	2000      	movs	r0, #0
 8013798:	bd10      	pop	{r4, pc}
	...

0801379c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 801379c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801379e:	4a36      	ldr	r2, [pc, #216]	; (8013878 <TIM_Base_SetConfig+0xdc>)
 80137a0:	4290      	cmp	r0, r2
 80137a2:	d022      	beq.n	80137ea <TIM_Base_SetConfig+0x4e>
 80137a4:	2280      	movs	r2, #128	; 0x80
 80137a6:	05d2      	lsls	r2, r2, #23
 80137a8:	4290      	cmp	r0, r2
 80137aa:	d014      	beq.n	80137d6 <TIM_Base_SetConfig+0x3a>
 80137ac:	4a33      	ldr	r2, [pc, #204]	; (801387c <TIM_Base_SetConfig+0xe0>)
 80137ae:	4290      	cmp	r0, r2
 80137b0:	d016      	beq.n	80137e0 <TIM_Base_SetConfig+0x44>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80137b2:	4a33      	ldr	r2, [pc, #204]	; (8013880 <TIM_Base_SetConfig+0xe4>)
 80137b4:	4290      	cmp	r0, r2
 80137b6:	d040      	beq.n	801383a <TIM_Base_SetConfig+0x9e>
 80137b8:	4a32      	ldr	r2, [pc, #200]	; (8013884 <TIM_Base_SetConfig+0xe8>)
 80137ba:	4290      	cmp	r0, r2
 80137bc:	d047      	beq.n	801384e <TIM_Base_SetConfig+0xb2>
 80137be:	4a32      	ldr	r2, [pc, #200]	; (8013888 <TIM_Base_SetConfig+0xec>)
 80137c0:	4290      	cmp	r0, r2
 80137c2:	d04e      	beq.n	8013862 <TIM_Base_SetConfig+0xc6>
 80137c4:	4a31      	ldr	r2, [pc, #196]	; (801388c <TIM_Base_SetConfig+0xf0>)
 80137c6:	4290      	cmp	r0, r2
 80137c8:	d02d      	beq.n	8013826 <TIM_Base_SetConfig+0x8a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80137ca:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80137cc:	688b      	ldr	r3, [r1, #8]
 80137ce:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80137d0:	680b      	ldr	r3, [r1, #0]
 80137d2:	6283      	str	r3, [r0, #40]	; 0x28
 80137d4:	e024      	b.n	8013820 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80137d6:	2270      	movs	r2, #112	; 0x70
 80137d8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80137da:	684a      	ldr	r2, [r1, #4]
 80137dc:	4313      	orrs	r3, r2
 80137de:	e008      	b.n	80137f2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80137e0:	2270      	movs	r2, #112	; 0x70
 80137e2:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80137e4:	684a      	ldr	r2, [r1, #4]
 80137e6:	4313      	orrs	r3, r2
 80137e8:	e003      	b.n	80137f2 <TIM_Base_SetConfig+0x56>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80137ea:	2270      	movs	r2, #112	; 0x70
 80137ec:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80137ee:	684a      	ldr	r2, [r1, #4]
 80137f0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80137f2:	4a27      	ldr	r2, [pc, #156]	; (8013890 <TIM_Base_SetConfig+0xf4>)
 80137f4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80137f6:	68ca      	ldr	r2, [r1, #12]
 80137f8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80137fa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80137fc:	688b      	ldr	r3, [r1, #8]
 80137fe:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013800:	680b      	ldr	r3, [r1, #0]
 8013802:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013804:	4b1c      	ldr	r3, [pc, #112]	; (8013878 <TIM_Base_SetConfig+0xdc>)
 8013806:	4298      	cmp	r0, r3
 8013808:	d008      	beq.n	801381c <TIM_Base_SetConfig+0x80>
 801380a:	4b1e      	ldr	r3, [pc, #120]	; (8013884 <TIM_Base_SetConfig+0xe8>)
 801380c:	4298      	cmp	r0, r3
 801380e:	d005      	beq.n	801381c <TIM_Base_SetConfig+0x80>
 8013810:	4b1d      	ldr	r3, [pc, #116]	; (8013888 <TIM_Base_SetConfig+0xec>)
 8013812:	4298      	cmp	r0, r3
 8013814:	d002      	beq.n	801381c <TIM_Base_SetConfig+0x80>
 8013816:	4b1d      	ldr	r3, [pc, #116]	; (801388c <TIM_Base_SetConfig+0xf0>)
 8013818:	4298      	cmp	r0, r3
 801381a:	d101      	bne.n	8013820 <TIM_Base_SetConfig+0x84>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801381c:	690b      	ldr	r3, [r1, #16]
 801381e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013820:	2301      	movs	r3, #1
 8013822:	6143      	str	r3, [r0, #20]
}
 8013824:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8013826:	4a1a      	ldr	r2, [pc, #104]	; (8013890 <TIM_Base_SetConfig+0xf4>)
 8013828:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801382a:	68ca      	ldr	r2, [r1, #12]
 801382c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801382e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013830:	688b      	ldr	r3, [r1, #8]
 8013832:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013834:	680b      	ldr	r3, [r1, #0]
 8013836:	6283      	str	r3, [r0, #40]	; 0x28
 8013838:	e7f0      	b.n	801381c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 801383a:	4a15      	ldr	r2, [pc, #84]	; (8013890 <TIM_Base_SetConfig+0xf4>)
 801383c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801383e:	68ca      	ldr	r2, [r1, #12]
 8013840:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013842:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013844:	688b      	ldr	r3, [r1, #8]
 8013846:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013848:	680b      	ldr	r3, [r1, #0]
 801384a:	6283      	str	r3, [r0, #40]	; 0x28
 801384c:	e7e8      	b.n	8013820 <TIM_Base_SetConfig+0x84>
    tmpcr1 &= ~TIM_CR1_CKD;
 801384e:	4a10      	ldr	r2, [pc, #64]	; (8013890 <TIM_Base_SetConfig+0xf4>)
 8013850:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013852:	68ca      	ldr	r2, [r1, #12]
 8013854:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013856:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013858:	688b      	ldr	r3, [r1, #8]
 801385a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 801385c:	680b      	ldr	r3, [r1, #0]
 801385e:	6283      	str	r3, [r0, #40]	; 0x28
 8013860:	e7dc      	b.n	801381c <TIM_Base_SetConfig+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8013862:	4a0b      	ldr	r2, [pc, #44]	; (8013890 <TIM_Base_SetConfig+0xf4>)
 8013864:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013866:	68ca      	ldr	r2, [r1, #12]
 8013868:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801386a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801386c:	688b      	ldr	r3, [r1, #8]
 801386e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013870:	680b      	ldr	r3, [r1, #0]
 8013872:	6283      	str	r3, [r0, #40]	; 0x28
 8013874:	e7d2      	b.n	801381c <TIM_Base_SetConfig+0x80>
 8013876:	46c0      	nop			; (mov r8, r8)
 8013878:	40012c00 	.word	0x40012c00
 801387c:	40000400 	.word	0x40000400
 8013880:	40002000 	.word	0x40002000
 8013884:	40014000 	.word	0x40014000
 8013888:	40014400 	.word	0x40014400
 801388c:	40014800 	.word	0x40014800
 8013890:	fffffcff 	.word	0xfffffcff

08013894 <HAL_TIM_Base_Init>:
{
 8013894:	b570      	push	{r4, r5, r6, lr}
 8013896:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013898:	d014      	beq.n	80138c4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801389a:	2339      	movs	r3, #57	; 0x39
 801389c:	5cc3      	ldrb	r3, [r0, r3]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d00a      	beq.n	80138b8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 80138a2:	2539      	movs	r5, #57	; 0x39
 80138a4:	2302      	movs	r3, #2
 80138a6:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80138a8:	1d21      	adds	r1, r4, #4
 80138aa:	6820      	ldr	r0, [r4, #0]
 80138ac:	f7ff ff76 	bl	801379c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80138b0:	2301      	movs	r3, #1
 80138b2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80138b4:	2000      	movs	r0, #0
}
 80138b6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80138b8:	3338      	adds	r3, #56	; 0x38
 80138ba:	2200      	movs	r2, #0
 80138bc:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80138be:	f7ff ff5f 	bl	8013780 <HAL_TIM_Base_MspInit>
 80138c2:	e7ee      	b.n	80138a2 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80138c4:	2001      	movs	r0, #1
 80138c6:	e7f6      	b.n	80138b6 <HAL_TIM_Base_Init+0x22>

080138c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80138c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80138ca:	2338      	movs	r3, #56	; 0x38
 80138cc:	5cc3      	ldrb	r3, [r0, r3]
 80138ce:	2b01      	cmp	r3, #1
 80138d0:	d01e      	beq.n	8013910 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80138d2:	2238      	movs	r2, #56	; 0x38
 80138d4:	2501      	movs	r5, #1
 80138d6:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80138d8:	2439      	movs	r4, #57	; 0x39
 80138da:	2302      	movs	r3, #2
 80138dc:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80138de:	6806      	ldr	r6, [r0, #0]
 80138e0:	6873      	ldr	r3, [r6, #4]
 80138e2:	2770      	movs	r7, #112	; 0x70
 80138e4:	43bb      	bics	r3, r7
 80138e6:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80138e8:	6806      	ldr	r6, [r0, #0]
 80138ea:	6873      	ldr	r3, [r6, #4]
 80138ec:	680f      	ldr	r7, [r1, #0]
 80138ee:	433b      	orrs	r3, r7
 80138f0:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80138f2:	6806      	ldr	r6, [r0, #0]
 80138f4:	68b3      	ldr	r3, [r6, #8]
 80138f6:	2780      	movs	r7, #128	; 0x80
 80138f8:	43bb      	bics	r3, r7
 80138fa:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80138fc:	6806      	ldr	r6, [r0, #0]
 80138fe:	68b3      	ldr	r3, [r6, #8]
 8013900:	6849      	ldr	r1, [r1, #4]
 8013902:	430b      	orrs	r3, r1
 8013904:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 8013906:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 8013908:	2300      	movs	r3, #0
 801390a:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 801390c:	2000      	movs	r0, #0
}
 801390e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8013910:	2002      	movs	r0, #2
 8013912:	e7fc      	b.n	801390e <HAL_TIMEx_MasterConfigSynchronization+0x46>

08013914 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8013914:	4770      	bx	lr

08013916 <HAL_UART_DeInit>:
{
 8013916:	b570      	push	{r4, r5, r6, lr}
 8013918:	0004      	movs	r4, r0
    return HAL_ERROR;
 801391a:	2001      	movs	r0, #1
  if(huart == NULL)
 801391c:	2c00      	cmp	r4, #0
 801391e:	d016      	beq.n	801394e <HAL_UART_DeInit+0x38>
  huart->State = HAL_UART_STATE_BUSY;
 8013920:	2669      	movs	r6, #105	; 0x69
 8013922:	2302      	movs	r3, #2
 8013924:	55a3      	strb	r3, [r4, r6]
  __HAL_UART_DISABLE(huart);
 8013926:	6822      	ldr	r2, [r4, #0]
 8013928:	6813      	ldr	r3, [r2, #0]
 801392a:	2101      	movs	r1, #1
 801392c:	438b      	bics	r3, r1
 801392e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 8013930:	6823      	ldr	r3, [r4, #0]
 8013932:	2500      	movs	r5, #0
 8013934:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8013936:	6823      	ldr	r3, [r4, #0]
 8013938:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 801393a:	6823      	ldr	r3, [r4, #0]
 801393c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801393e:	0020      	movs	r0, r4
 8013940:	f7ff ffe8 	bl	8013914 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013944:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8013946:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8013948:	2368      	movs	r3, #104	; 0x68
 801394a:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 801394c:	2000      	movs	r0, #0
}
 801394e:	bd70      	pop	{r4, r5, r6, pc}

08013950 <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013950:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013952:	2369      	movs	r3, #105	; 0x69
 8013954:	5cc3      	ldrb	r3, [r0, r3]
 8013956:	2b01      	cmp	r3, #1
 8013958:	d004      	beq.n	8013964 <HAL_UART_Transmit_IT+0x14>
 801395a:	2369      	movs	r3, #105	; 0x69
 801395c:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 801395e:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013960:	2c22      	cmp	r4, #34	; 0x22
 8013962:	d127      	bne.n	80139b4 <HAL_UART_Transmit_IT+0x64>
    if((pData == NULL ) || (Size == 0))
 8013964:	2900      	cmp	r1, #0
 8013966:	d02b      	beq.n	80139c0 <HAL_UART_Transmit_IT+0x70>
      return HAL_ERROR;
 8013968:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 801396a:	2a00      	cmp	r2, #0
 801396c:	d022      	beq.n	80139b4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 801396e:	3367      	adds	r3, #103	; 0x67
 8013970:	5cc3      	ldrb	r3, [r0, r3]
 8013972:	2b01      	cmp	r3, #1
 8013974:	d026      	beq.n	80139c4 <HAL_UART_Transmit_IT+0x74>
 8013976:	2368      	movs	r3, #104	; 0x68
 8013978:	2401      	movs	r4, #1
 801397a:	54c4      	strb	r4, [r0, r3]
    huart->pTxBuffPtr = pData;
 801397c:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 801397e:	3b18      	subs	r3, #24
 8013980:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8013982:	3302      	adds	r3, #2
 8013984:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013986:	2300      	movs	r3, #0
 8013988:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 801398a:	3369      	adds	r3, #105	; 0x69
 801398c:	5cc3      	ldrb	r3, [r0, r3]
 801398e:	2b22      	cmp	r3, #34	; 0x22
 8013990:	d012      	beq.n	80139b8 <HAL_UART_Transmit_IT+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013992:	2369      	movs	r3, #105	; 0x69
 8013994:	2212      	movs	r2, #18
 8013996:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013998:	6802      	ldr	r2, [r0, #0]
 801399a:	6893      	ldr	r3, [r2, #8]
 801399c:	2101      	movs	r1, #1
 801399e:	430b      	orrs	r3, r1
 80139a0:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 80139a2:	2368      	movs	r3, #104	; 0x68
 80139a4:	2200      	movs	r2, #0
 80139a6:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80139a8:	6802      	ldr	r2, [r0, #0]
 80139aa:	6813      	ldr	r3, [r2, #0]
 80139ac:	317f      	adds	r1, #127	; 0x7f
 80139ae:	430b      	orrs	r3, r1
 80139b0:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80139b2:	2300      	movs	r3, #0
  }
}
 80139b4:	0018      	movs	r0, r3
 80139b6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80139b8:	3347      	adds	r3, #71	; 0x47
 80139ba:	2232      	movs	r2, #50	; 0x32
 80139bc:	54c2      	strb	r2, [r0, r3]
 80139be:	e7eb      	b.n	8013998 <HAL_UART_Transmit_IT+0x48>
      return HAL_ERROR;
 80139c0:	2301      	movs	r3, #1
 80139c2:	e7f7      	b.n	80139b4 <HAL_UART_Transmit_IT+0x64>
    __HAL_LOCK(huart);
 80139c4:	2302      	movs	r3, #2
 80139c6:	e7f5      	b.n	80139b4 <HAL_UART_Transmit_IT+0x64>

080139c8 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80139c8:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80139ca:	2369      	movs	r3, #105	; 0x69
 80139cc:	5cc3      	ldrb	r3, [r0, r3]
 80139ce:	2b01      	cmp	r3, #1
 80139d0:	d004      	beq.n	80139dc <HAL_UART_Receive_IT+0x14>
 80139d2:	2369      	movs	r3, #105	; 0x69
 80139d4:	5cc4      	ldrb	r4, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80139d6:	3b67      	subs	r3, #103	; 0x67
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80139d8:	2c12      	cmp	r4, #18
 80139da:	d14e      	bne.n	8013a7a <HAL_UART_Receive_IT+0xb2>
    if((pData == NULL ) || (Size == 0))
 80139dc:	2900      	cmp	r1, #0
 80139de:	d05d      	beq.n	8013a9c <HAL_UART_Receive_IT+0xd4>
      return HAL_ERROR;
 80139e0:	2301      	movs	r3, #1
    if((pData == NULL ) || (Size == 0))
 80139e2:	2a00      	cmp	r2, #0
 80139e4:	d049      	beq.n	8013a7a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 80139e6:	3367      	adds	r3, #103	; 0x67
 80139e8:	5cc3      	ldrb	r3, [r0, r3]
 80139ea:	2b01      	cmp	r3, #1
 80139ec:	d058      	beq.n	8013aa0 <HAL_UART_Receive_IT+0xd8>
 80139ee:	2368      	movs	r3, #104	; 0x68
 80139f0:	2401      	movs	r4, #1
 80139f2:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr = pData;
 80139f4:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80139f6:	3b10      	subs	r3, #16
 80139f8:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80139fa:	3302      	adds	r3, #2
 80139fc:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 80139fe:	6883      	ldr	r3, [r0, #8]
 8013a00:	2280      	movs	r2, #128	; 0x80
 8013a02:	0152      	lsls	r2, r2, #5
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d008      	beq.n	8013a1a <HAL_UART_Receive_IT+0x52>
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d115      	bne.n	8013a38 <HAL_UART_Receive_IT+0x70>
 8013a0c:	6903      	ldr	r3, [r0, #16]
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d10e      	bne.n	8013a30 <HAL_UART_Receive_IT+0x68>
 8013a12:	335c      	adds	r3, #92	; 0x5c
 8013a14:	22ff      	movs	r2, #255	; 0xff
 8013a16:	52c2      	strh	r2, [r0, r3]
 8013a18:	e012      	b.n	8013a40 <HAL_UART_Receive_IT+0x78>
 8013a1a:	6903      	ldr	r3, [r0, #16]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d103      	bne.n	8013a28 <HAL_UART_Receive_IT+0x60>
 8013a20:	335c      	adds	r3, #92	; 0x5c
 8013a22:	4a20      	ldr	r2, [pc, #128]	; (8013aa4 <HAL_UART_Receive_IT+0xdc>)
 8013a24:	52c2      	strh	r2, [r0, r3]
 8013a26:	e00b      	b.n	8013a40 <HAL_UART_Receive_IT+0x78>
 8013a28:	235c      	movs	r3, #92	; 0x5c
 8013a2a:	22ff      	movs	r2, #255	; 0xff
 8013a2c:	52c2      	strh	r2, [r0, r3]
 8013a2e:	e007      	b.n	8013a40 <HAL_UART_Receive_IT+0x78>
 8013a30:	235c      	movs	r3, #92	; 0x5c
 8013a32:	227f      	movs	r2, #127	; 0x7f
 8013a34:	52c2      	strh	r2, [r0, r3]
 8013a36:	e003      	b.n	8013a40 <HAL_UART_Receive_IT+0x78>
 8013a38:	2280      	movs	r2, #128	; 0x80
 8013a3a:	0552      	lsls	r2, r2, #21
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d01e      	beq.n	8013a7e <HAL_UART_Receive_IT+0xb6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a40:	2300      	movs	r3, #0
 8013a42:	66c3      	str	r3, [r0, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013a44:	3369      	adds	r3, #105	; 0x69
 8013a46:	5cc3      	ldrb	r3, [r0, r3]
 8013a48:	2b12      	cmp	r3, #18
 8013a4a:	d023      	beq.n	8013a94 <HAL_UART_Receive_IT+0xcc>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013a4c:	2369      	movs	r3, #105	; 0x69
 8013a4e:	2222      	movs	r2, #34	; 0x22
 8013a50:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013a52:	6802      	ldr	r2, [r0, #0]
 8013a54:	6811      	ldr	r1, [r2, #0]
 8013a56:	2380      	movs	r3, #128	; 0x80
 8013a58:	005b      	lsls	r3, r3, #1
 8013a5a:	430b      	orrs	r3, r1
 8013a5c:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013a5e:	6802      	ldr	r2, [r0, #0]
 8013a60:	6893      	ldr	r3, [r2, #8]
 8013a62:	2101      	movs	r1, #1
 8013a64:	430b      	orrs	r3, r1
 8013a66:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013a68:	2368      	movs	r3, #104	; 0x68
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	54c2      	strb	r2, [r0, r3]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013a6e:	6802      	ldr	r2, [r0, #0]
 8013a70:	6813      	ldr	r3, [r2, #0]
 8013a72:	311f      	adds	r1, #31
 8013a74:	430b      	orrs	r3, r1
 8013a76:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8013a78:	2300      	movs	r3, #0
  }
}
 8013a7a:	0018      	movs	r0, r3
 8013a7c:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013a7e:	6903      	ldr	r3, [r0, #16]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d103      	bne.n	8013a8c <HAL_UART_Receive_IT+0xc4>
 8013a84:	335c      	adds	r3, #92	; 0x5c
 8013a86:	227f      	movs	r2, #127	; 0x7f
 8013a88:	52c2      	strh	r2, [r0, r3]
 8013a8a:	e7d9      	b.n	8013a40 <HAL_UART_Receive_IT+0x78>
 8013a8c:	235c      	movs	r3, #92	; 0x5c
 8013a8e:	223f      	movs	r2, #63	; 0x3f
 8013a90:	52c2      	strh	r2, [r0, r3]
 8013a92:	e7d5      	b.n	8013a40 <HAL_UART_Receive_IT+0x78>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013a94:	3357      	adds	r3, #87	; 0x57
 8013a96:	2232      	movs	r2, #50	; 0x32
 8013a98:	54c2      	strb	r2, [r0, r3]
 8013a9a:	e7da      	b.n	8013a52 <HAL_UART_Receive_IT+0x8a>
      return HAL_ERROR;
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	e7ec      	b.n	8013a7a <HAL_UART_Receive_IT+0xb2>
    __HAL_LOCK(huart);
 8013aa0:	2302      	movs	r3, #2
 8013aa2:	e7ea      	b.n	8013a7a <HAL_UART_Receive_IT+0xb2>
 8013aa4:	000001ff 	.word	0x000001ff

08013aa8 <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013aa8:	b510      	push	{r4, lr}
 8013aaa:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013aac:	2369      	movs	r3, #105	; 0x69
 8013aae:	5cc3      	ldrb	r3, [r0, r3]
 8013ab0:	2b01      	cmp	r3, #1
 8013ab2:	d004      	beq.n	8013abe <HAL_UART_Transmit_DMA+0x16>
 8013ab4:	2369      	movs	r3, #105	; 0x69
 8013ab6:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013ab8:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013aba:	2b22      	cmp	r3, #34	; 0x22
 8013abc:	d134      	bne.n	8013b28 <HAL_UART_Transmit_DMA+0x80>
    if((pData == NULL ) || (Size == 0))
 8013abe:	2900      	cmp	r1, #0
 8013ac0:	d037      	beq.n	8013b32 <HAL_UART_Transmit_DMA+0x8a>
      return HAL_ERROR;
 8013ac2:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013ac4:	2a00      	cmp	r2, #0
 8013ac6:	d02f      	beq.n	8013b28 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013ac8:	2368      	movs	r3, #104	; 0x68
 8013aca:	5ce3      	ldrb	r3, [r4, r3]
 8013acc:	2b01      	cmp	r3, #1
 8013ace:	d032      	beq.n	8013b36 <HAL_UART_Transmit_DMA+0x8e>
 8013ad0:	2368      	movs	r3, #104	; 0x68
 8013ad2:	54e0      	strb	r0, [r4, r3]
    huart->pTxBuffPtr = pData;
 8013ad4:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013ad6:	3b18      	subs	r3, #24
 8013ad8:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8013ada:	3302      	adds	r3, #2
 8013adc:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013ae2:	3369      	adds	r3, #105	; 0x69
 8013ae4:	5ce3      	ldrb	r3, [r4, r3]
 8013ae6:	2b22      	cmp	r3, #34	; 0x22
 8013ae8:	d01f      	beq.n	8013b2a <HAL_UART_Transmit_DMA+0x82>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013aea:	2369      	movs	r3, #105	; 0x69
 8013aec:	2012      	movs	r0, #18
 8013aee:	54e0      	strb	r0, [r4, r3]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8013af0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013af2:	4812      	ldr	r0, [pc, #72]	; (8013b3c <HAL_UART_Transmit_DMA+0x94>)
 8013af4:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8013af6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013af8:	4811      	ldr	r0, [pc, #68]	; (8013b40 <HAL_UART_Transmit_DMA+0x98>)
 8013afa:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8013afc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8013afe:	4811      	ldr	r0, [pc, #68]	; (8013b44 <HAL_UART_Transmit_DMA+0x9c>)
 8013b00:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 8013b02:	6820      	ldr	r0, [r4, #0]
 8013b04:	3028      	adds	r0, #40	; 0x28
 8013b06:	0013      	movs	r3, r2
 8013b08:	0002      	movs	r2, r0
 8013b0a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8013b0c:	f7fd fd1a 	bl	8011544 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013b10:	6823      	ldr	r3, [r4, #0]
 8013b12:	2240      	movs	r2, #64	; 0x40
 8013b14:	621a      	str	r2, [r3, #32]
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8013b16:	6822      	ldr	r2, [r4, #0]
 8013b18:	6893      	ldr	r3, [r2, #8]
 8013b1a:	2180      	movs	r1, #128	; 0x80
 8013b1c:	430b      	orrs	r3, r1
 8013b1e:	6093      	str	r3, [r2, #8]
    __HAL_UNLOCK(huart);
 8013b20:	2368      	movs	r3, #104	; 0x68
 8013b22:	2200      	movs	r2, #0
 8013b24:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013b26:	2000      	movs	r0, #0
  }
}
 8013b28:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013b2a:	3347      	adds	r3, #71	; 0x47
 8013b2c:	3031      	adds	r0, #49	; 0x31
 8013b2e:	54e0      	strb	r0, [r4, r3]
 8013b30:	e7de      	b.n	8013af0 <HAL_UART_Transmit_DMA+0x48>
      return HAL_ERROR;
 8013b32:	2001      	movs	r0, #1
 8013b34:	e7f8      	b.n	8013b28 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 8013b36:	2002      	movs	r0, #2
 8013b38:	e7f6      	b.n	8013b28 <HAL_UART_Transmit_DMA+0x80>
 8013b3a:	46c0      	nop			; (mov r8, r8)
 8013b3c:	08013be1 	.word	0x08013be1
 8013b40:	08013c13 	.word	0x08013c13
 8013b44:	08013c63 	.word	0x08013c63

08013b48 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	0004      	movs	r4, r0
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013b4c:	2069      	movs	r0, #105	; 0x69
 8013b4e:	5c20      	ldrb	r0, [r4, r0]
 8013b50:	2801      	cmp	r0, #1
 8013b52:	d004      	beq.n	8013b5e <HAL_UART_Receive_DMA+0x16>
 8013b54:	2369      	movs	r3, #105	; 0x69
 8013b56:	5ce3      	ldrb	r3, [r4, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8013b58:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013b5a:	2b12      	cmp	r3, #18
 8013b5c:	d130      	bne.n	8013bc0 <HAL_UART_Receive_DMA+0x78>
    if((pData == NULL ) || (Size == 0))
 8013b5e:	2900      	cmp	r1, #0
 8013b60:	d033      	beq.n	8013bca <HAL_UART_Receive_DMA+0x82>
      return HAL_ERROR;
 8013b62:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 8013b64:	2a00      	cmp	r2, #0
 8013b66:	d02b      	beq.n	8013bc0 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013b68:	2368      	movs	r3, #104	; 0x68
 8013b6a:	5ce3      	ldrb	r3, [r4, r3]
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	d02e      	beq.n	8013bce <HAL_UART_Receive_DMA+0x86>
 8013b70:	2368      	movs	r3, #104	; 0x68
 8013b72:	54e0      	strb	r0, [r4, r3]
    huart->pRxBuffPtr = pData;
 8013b74:	6561      	str	r1, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013b76:	3b10      	subs	r3, #16
 8013b78:	52e2      	strh	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013b7a:	2300      	movs	r3, #0
 8013b7c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013b7e:	3369      	adds	r3, #105	; 0x69
 8013b80:	5ce3      	ldrb	r3, [r4, r3]
 8013b82:	2b12      	cmp	r3, #18
 8013b84:	d01d      	beq.n	8013bc2 <HAL_UART_Receive_DMA+0x7a>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013b86:	2369      	movs	r3, #105	; 0x69
 8013b88:	2022      	movs	r0, #34	; 0x22
 8013b8a:	54e0      	strb	r0, [r4, r3]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b8e:	4811      	ldr	r0, [pc, #68]	; (8013bd4 <HAL_UART_Receive_DMA+0x8c>)
 8013b90:	6298      	str	r0, [r3, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b94:	4810      	ldr	r0, [pc, #64]	; (8013bd8 <HAL_UART_Receive_DMA+0x90>)
 8013b96:	62d8      	str	r0, [r3, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b9a:	4810      	ldr	r0, [pc, #64]	; (8013bdc <HAL_UART_Receive_DMA+0x94>)
 8013b9c:	6318      	str	r0, [r3, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013b9e:	6820      	ldr	r0, [r4, #0]
 8013ba0:	3024      	adds	r0, #36	; 0x24
 8013ba2:	0013      	movs	r3, r2
 8013ba4:	000a      	movs	r2, r1
 8013ba6:	0001      	movs	r1, r0
 8013ba8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8013baa:	f7fd fccb 	bl	8011544 <HAL_DMA_Start_IT>
     huart->Instance->CR3 |= USART_CR3_DMAR;
 8013bae:	6822      	ldr	r2, [r4, #0]
 8013bb0:	6893      	ldr	r3, [r2, #8]
 8013bb2:	2140      	movs	r1, #64	; 0x40
 8013bb4:	430b      	orrs	r3, r1
 8013bb6:	6093      	str	r3, [r2, #8]
     __HAL_UNLOCK(huart);
 8013bb8:	2368      	movs	r3, #104	; 0x68
 8013bba:	2200      	movs	r2, #0
 8013bbc:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013bbe:	2000      	movs	r0, #0
  }
}
 8013bc0:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013bc2:	3357      	adds	r3, #87	; 0x57
 8013bc4:	3031      	adds	r0, #49	; 0x31
 8013bc6:	54e0      	strb	r0, [r4, r3]
 8013bc8:	e7e0      	b.n	8013b8c <HAL_UART_Receive_DMA+0x44>
      return HAL_ERROR;
 8013bca:	2001      	movs	r0, #1
 8013bcc:	e7f8      	b.n	8013bc0 <HAL_UART_Receive_DMA+0x78>
    __HAL_LOCK(huart);
 8013bce:	2002      	movs	r0, #2
 8013bd0:	e7f6      	b.n	8013bc0 <HAL_UART_Receive_DMA+0x78>
 8013bd2:	46c0      	nop			; (mov r8, r8)
 8013bd4:	08013c1d 	.word	0x08013c1d
 8013bd8:	08013c59 	.word	0x08013c59
 8013bdc:	08013c63 	.word	0x08013c63

08013be0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013be0:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013be2:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013be4:	6802      	ldr	r2, [r0, #0]
 8013be6:	6812      	ldr	r2, [r2, #0]
 8013be8:	0692      	lsls	r2, r2, #26
 8013bea:	d40d      	bmi.n	8013c08 <UART_DMATransmitCplt+0x28>
  {  
    huart->TxXferCount = 0;
 8013bec:	2252      	movs	r2, #82	; 0x52
 8013bee:	2100      	movs	r1, #0
 8013bf0:	5299      	strh	r1, [r3, r2]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 8013bf2:	6819      	ldr	r1, [r3, #0]
 8013bf4:	688a      	ldr	r2, [r1, #8]
 8013bf6:	2080      	movs	r0, #128	; 0x80
 8013bf8:	4382      	bics	r2, r0
 8013bfa:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013bfc:	681a      	ldr	r2, [r3, #0]
 8013bfe:	6813      	ldr	r3, [r2, #0]
 8013c00:	2140      	movs	r1, #64	; 0x40
 8013c02:	430b      	orrs	r3, r1
 8013c04:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8013c06:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8013c08:	0018      	movs	r0, r3
 8013c0a:	f7fa fa1b 	bl	800e044 <HAL_UART_TxCpltCallback>
}
 8013c0e:	e7fa      	b.n	8013c06 <UART_DMATransmitCplt+0x26>

08013c10 <HAL_UART_TxHalfCpltCallback>:
}
 8013c10:	4770      	bx	lr

08013c12 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013c12:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8013c14:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013c16:	f7ff fffb 	bl	8013c10 <HAL_UART_TxHalfCpltCallback>
}
 8013c1a:	bd10      	pop	{r4, pc}

08013c1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013c1c:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013c1e:	6a43      	ldr	r3, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8013c20:	6802      	ldr	r2, [r0, #0]
 8013c22:	6812      	ldr	r2, [r2, #0]
 8013c24:	0692      	lsls	r2, r2, #26
 8013c26:	d40e      	bmi.n	8013c46 <UART_DMAReceiveCplt+0x2a>
  {
    huart->RxXferCount = 0;
 8013c28:	225a      	movs	r2, #90	; 0x5a
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 8013c2e:	6819      	ldr	r1, [r3, #0]
 8013c30:	688a      	ldr	r2, [r1, #8]
 8013c32:	2040      	movs	r0, #64	; 0x40
 8013c34:	4382      	bics	r2, r0
 8013c36:	608a      	str	r2, [r1, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013c38:	2269      	movs	r2, #105	; 0x69
 8013c3a:	5c9a      	ldrb	r2, [r3, r2]
 8013c3c:	2a32      	cmp	r2, #50	; 0x32
 8013c3e:	d006      	beq.n	8013c4e <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 8013c40:	2269      	movs	r2, #105	; 0x69
 8013c42:	2101      	movs	r1, #1
 8013c44:	5499      	strb	r1, [r3, r2]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013c46:	0018      	movs	r0, r3
 8013c48:	f7fa fa3a 	bl	800e0c0 <HAL_UART_RxCpltCallback>
}
 8013c4c:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013c4e:	3237      	adds	r2, #55	; 0x37
 8013c50:	2112      	movs	r1, #18
 8013c52:	5499      	strb	r1, [r3, r2]
 8013c54:	e7f7      	b.n	8013c46 <UART_DMAReceiveCplt+0x2a>

08013c56 <HAL_UART_RxHalfCpltCallback>:
}
 8013c56:	4770      	bx	lr

08013c58 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013c58:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013c5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013c5c:	f7ff fffb 	bl	8013c56 <HAL_UART_RxHalfCpltCallback>
}
 8013c60:	bd10      	pop	{r4, pc}

08013c62 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013c62:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013c64:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013c66:	2300      	movs	r3, #0
 8013c68:	225a      	movs	r2, #90	; 0x5a
 8013c6a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013c6c:	3a08      	subs	r2, #8
 8013c6e:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 8013c70:	3369      	adds	r3, #105	; 0x69
 8013c72:	3a51      	subs	r2, #81	; 0x51
 8013c74:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013c76:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013c78:	320f      	adds	r2, #15
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 8013c7e:	f7fa f9f9 	bl	800e074 <HAL_UART_ErrorCallback>
}
 8013c82:	bd10      	pop	{r4, pc}

08013c84 <UART_SetConfig>:
{
 8013c84:	b570      	push	{r4, r5, r6, lr}
 8013c86:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013c88:	6801      	ldr	r1, [r0, #0]
 8013c8a:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013c8c:	6883      	ldr	r3, [r0, #8]
 8013c8e:	6900      	ldr	r0, [r0, #16]
 8013c90:	4303      	orrs	r3, r0
 8013c92:	6960      	ldr	r0, [r4, #20]
 8013c94:	4303      	orrs	r3, r0
 8013c96:	69e0      	ldr	r0, [r4, #28]
 8013c98:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013c9a:	487e      	ldr	r0, [pc, #504]	; (8013e94 <UART_SetConfig+0x210>)
 8013c9c:	4002      	ands	r2, r0
 8013c9e:	4313      	orrs	r3, r2
 8013ca0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013ca2:	6822      	ldr	r2, [r4, #0]
 8013ca4:	6853      	ldr	r3, [r2, #4]
 8013ca6:	497c      	ldr	r1, [pc, #496]	; (8013e98 <UART_SetConfig+0x214>)
 8013ca8:	400b      	ands	r3, r1
 8013caa:	68e1      	ldr	r1, [r4, #12]
 8013cac:	430b      	orrs	r3, r1
 8013cae:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013cb0:	6821      	ldr	r1, [r4, #0]
 8013cb2:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8013cb4:	69a3      	ldr	r3, [r4, #24]
 8013cb6:	6a20      	ldr	r0, [r4, #32]
 8013cb8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8013cba:	4878      	ldr	r0, [pc, #480]	; (8013e9c <UART_SetConfig+0x218>)
 8013cbc:	4002      	ands	r2, r0
 8013cbe:	4313      	orrs	r3, r2
 8013cc0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013cc2:	6825      	ldr	r5, [r4, #0]
 8013cc4:	4b76      	ldr	r3, [pc, #472]	; (8013ea0 <UART_SetConfig+0x21c>)
 8013cc6:	429d      	cmp	r5, r3
 8013cc8:	d022      	beq.n	8013d10 <UART_SetConfig+0x8c>
 8013cca:	4b76      	ldr	r3, [pc, #472]	; (8013ea4 <UART_SetConfig+0x220>)
 8013ccc:	429d      	cmp	r5, r3
 8013cce:	d034      	beq.n	8013d3a <UART_SetConfig+0xb6>
 8013cd0:	4b75      	ldr	r3, [pc, #468]	; (8013ea8 <UART_SetConfig+0x224>)
 8013cd2:	429d      	cmp	r5, r3
 8013cd4:	d100      	bne.n	8013cd8 <UART_SetConfig+0x54>
 8013cd6:	e06b      	b.n	8013db0 <UART_SetConfig+0x12c>
 8013cd8:	4b74      	ldr	r3, [pc, #464]	; (8013eac <UART_SetConfig+0x228>)
 8013cda:	429d      	cmp	r5, r3
 8013cdc:	d100      	bne.n	8013ce0 <UART_SetConfig+0x5c>
 8013cde:	e08e      	b.n	8013dfe <UART_SetConfig+0x17a>
 8013ce0:	4b73      	ldr	r3, [pc, #460]	; (8013eb0 <UART_SetConfig+0x22c>)
 8013ce2:	429d      	cmp	r5, r3
 8013ce4:	d100      	bne.n	8013ce8 <UART_SetConfig+0x64>
 8013ce6:	e08a      	b.n	8013dfe <UART_SetConfig+0x17a>
 8013ce8:	4b72      	ldr	r3, [pc, #456]	; (8013eb4 <UART_SetConfig+0x230>)
 8013cea:	429d      	cmp	r5, r3
 8013cec:	d100      	bne.n	8013cf0 <UART_SetConfig+0x6c>
 8013cee:	e086      	b.n	8013dfe <UART_SetConfig+0x17a>
 8013cf0:	4b71      	ldr	r3, [pc, #452]	; (8013eb8 <UART_SetConfig+0x234>)
 8013cf2:	429d      	cmp	r5, r3
 8013cf4:	d100      	bne.n	8013cf8 <UART_SetConfig+0x74>
 8013cf6:	e082      	b.n	8013dfe <UART_SetConfig+0x17a>
 8013cf8:	4b70      	ldr	r3, [pc, #448]	; (8013ebc <UART_SetConfig+0x238>)
 8013cfa:	429d      	cmp	r5, r3
 8013cfc:	d100      	bne.n	8013d00 <UART_SetConfig+0x7c>
 8013cfe:	e07e      	b.n	8013dfe <UART_SetConfig+0x17a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d00:	2380      	movs	r3, #128	; 0x80
 8013d02:	021b      	lsls	r3, r3, #8
 8013d04:	69e2      	ldr	r2, [r4, #28]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d100      	bne.n	8013d0c <UART_SetConfig+0x88>
 8013d0a:	e072      	b.n	8013df2 <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8013d0c:	2001      	movs	r0, #1
 8013d0e:	e04e      	b.n	8013dae <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d10:	4b6b      	ldr	r3, [pc, #428]	; (8013ec0 <UART_SetConfig+0x23c>)
 8013d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013d14:	2303      	movs	r3, #3
 8013d16:	4013      	ands	r3, r2
 8013d18:	2b01      	cmp	r3, #1
 8013d1a:	d100      	bne.n	8013d1e <UART_SetConfig+0x9a>
 8013d1c:	e09a      	b.n	8013e54 <UART_SetConfig+0x1d0>
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d02f      	beq.n	8013d82 <UART_SetConfig+0xfe>
 8013d22:	2b02      	cmp	r3, #2
 8013d24:	d100      	bne.n	8013d28 <UART_SetConfig+0xa4>
 8013d26:	e0a5      	b.n	8013e74 <UART_SetConfig+0x1f0>
 8013d28:	2b03      	cmp	r3, #3
 8013d2a:	d01a      	beq.n	8013d62 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d2c:	2380      	movs	r3, #128	; 0x80
 8013d2e:	021b      	lsls	r3, r3, #8
 8013d30:	69e2      	ldr	r2, [r4, #28]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d060      	beq.n	8013df8 <UART_SetConfig+0x174>
        ret = HAL_ERROR;
 8013d36:	2001      	movs	r0, #1
 8013d38:	e039      	b.n	8013dae <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d3a:	4b61      	ldr	r3, [pc, #388]	; (8013ec0 <UART_SetConfig+0x23c>)
 8013d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d3e:	22c0      	movs	r2, #192	; 0xc0
 8013d40:	0292      	lsls	r2, r2, #10
 8013d42:	4013      	ands	r3, r2
 8013d44:	2280      	movs	r2, #128	; 0x80
 8013d46:	0252      	lsls	r2, r2, #9
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d100      	bne.n	8013d4e <UART_SetConfig+0xca>
 8013d4c:	e082      	b.n	8013e54 <UART_SetConfig+0x1d0>
 8013d4e:	d916      	bls.n	8013d7e <UART_SetConfig+0xfa>
 8013d50:	2280      	movs	r2, #128	; 0x80
 8013d52:	0292      	lsls	r2, r2, #10
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d100      	bne.n	8013d5a <UART_SetConfig+0xd6>
 8013d58:	e08c      	b.n	8013e74 <UART_SetConfig+0x1f0>
 8013d5a:	22c0      	movs	r2, #192	; 0xc0
 8013d5c:	0292      	lsls	r2, r2, #10
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	d1e4      	bne.n	8013d2c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d62:	2380      	movs	r3, #128	; 0x80
 8013d64:	021b      	lsls	r3, r3, #8
 8013d66:	69e2      	ldr	r2, [r4, #28]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	d038      	beq.n	8013dde <UART_SetConfig+0x15a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013d6c:	6861      	ldr	r1, [r4, #4]
 8013d6e:	4855      	ldr	r0, [pc, #340]	; (8013ec4 <UART_SetConfig+0x240>)
 8013d70:	f7ec f9ee 	bl	8000150 <__udivsi3>
 8013d74:	0400      	lsls	r0, r0, #16
 8013d76:	0c00      	lsrs	r0, r0, #16
 8013d78:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013d7a:	2000      	movs	r0, #0
        break;
 8013d7c:	e017      	b.n	8013dae <UART_SetConfig+0x12a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d1d4      	bne.n	8013d2c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013d82:	2380      	movs	r3, #128	; 0x80
 8013d84:	021b      	lsls	r3, r3, #8
 8013d86:	69e2      	ldr	r2, [r4, #28]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d13d      	bne.n	8013e08 <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013d8c:	f7ff fa5c 	bl	8013248 <HAL_RCC_GetPCLK1Freq>
 8013d90:	0040      	lsls	r0, r0, #1
 8013d92:	6861      	ldr	r1, [r4, #4]
 8013d94:	f7ec f9dc 	bl	8000150 <__udivsi3>
 8013d98:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013d9a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013d9c:	220f      	movs	r2, #15
 8013d9e:	0019      	movs	r1, r3
 8013da0:	4391      	bics	r1, r2
 8013da2:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013da4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013da6:	071b      	lsls	r3, r3, #28
 8013da8:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8013daa:	4313      	orrs	r3, r2
 8013dac:	60cb      	str	r3, [r1, #12]
}
 8013dae:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013db0:	4b43      	ldr	r3, [pc, #268]	; (8013ec0 <UART_SetConfig+0x23c>)
 8013db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013db4:	22c0      	movs	r2, #192	; 0xc0
 8013db6:	0312      	lsls	r2, r2, #12
 8013db8:	4013      	ands	r3, r2
 8013dba:	2280      	movs	r2, #128	; 0x80
 8013dbc:	02d2      	lsls	r2, r2, #11
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d02d      	beq.n	8013e1e <UART_SetConfig+0x19a>
 8013dc2:	d913      	bls.n	8013dec <UART_SetConfig+0x168>
 8013dc4:	2280      	movs	r2, #128	; 0x80
 8013dc6:	0312      	lsls	r2, r2, #12
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	d036      	beq.n	8013e3a <UART_SetConfig+0x1b6>
 8013dcc:	22c0      	movs	r2, #192	; 0xc0
 8013dce:	0312      	lsls	r2, r2, #12
 8013dd0:	4293      	cmp	r3, r2
 8013dd2:	d1ab      	bne.n	8013d2c <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013dd4:	2380      	movs	r3, #128	; 0x80
 8013dd6:	021b      	lsls	r3, r3, #8
 8013dd8:	69e2      	ldr	r2, [r4, #28]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d1c6      	bne.n	8013d6c <UART_SetConfig+0xe8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8013dde:	6861      	ldr	r1, [r4, #4]
 8013de0:	4839      	ldr	r0, [pc, #228]	; (8013ec8 <UART_SetConfig+0x244>)
 8013de2:	f7ec f9b5 	bl	8000150 <__udivsi3>
 8013de6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013de8:	2000      	movs	r0, #0
        break;
 8013dea:	e7d7      	b.n	8013d9c <UART_SetConfig+0x118>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d0c8      	beq.n	8013d82 <UART_SetConfig+0xfe>
 8013df0:	e79c      	b.n	8013d2c <UART_SetConfig+0xa8>
        ret = HAL_ERROR;
 8013df2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013df4:	2300      	movs	r3, #0
 8013df6:	e7d1      	b.n	8013d9c <UART_SetConfig+0x118>
        ret = HAL_ERROR;
 8013df8:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	e7ce      	b.n	8013d9c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013dfe:	2380      	movs	r3, #128	; 0x80
 8013e00:	021b      	lsls	r3, r3, #8
 8013e02:	69e2      	ldr	r2, [r4, #28]
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d0c1      	beq.n	8013d8c <UART_SetConfig+0x108>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013e08:	f7ff fa1e 	bl	8013248 <HAL_RCC_GetPCLK1Freq>
 8013e0c:	6825      	ldr	r5, [r4, #0]
 8013e0e:	6861      	ldr	r1, [r4, #4]
 8013e10:	f7ec f99e 	bl	8000150 <__udivsi3>
 8013e14:	0400      	lsls	r0, r0, #16
 8013e16:	0c00      	lsrs	r0, r0, #16
 8013e18:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e1a:	2000      	movs	r0, #0
  return ret;
 8013e1c:	e7c7      	b.n	8013dae <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e1e:	2380      	movs	r3, #128	; 0x80
 8013e20:	021b      	lsls	r3, r3, #8
 8013e22:	69e2      	ldr	r2, [r4, #28]
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d11a      	bne.n	8013e5e <UART_SetConfig+0x1da>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013e28:	f7ff f9aa 	bl	8013180 <HAL_RCC_GetSysClockFreq>
 8013e2c:	0040      	lsls	r0, r0, #1
 8013e2e:	6861      	ldr	r1, [r4, #4]
 8013e30:	f7ec f98e 	bl	8000150 <__udivsi3>
 8013e34:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e36:	2000      	movs	r0, #0
        break;
 8013e38:	e7b0      	b.n	8013d9c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e3a:	2380      	movs	r3, #128	; 0x80
 8013e3c:	021b      	lsls	r3, r3, #8
 8013e3e:	69e2      	ldr	r2, [r4, #28]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d11c      	bne.n	8013e7e <UART_SetConfig+0x1fa>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013e44:	6861      	ldr	r1, [r4, #4]
 8013e46:	2080      	movs	r0, #128	; 0x80
 8013e48:	0240      	lsls	r0, r0, #9
 8013e4a:	f7ec f981 	bl	8000150 <__udivsi3>
 8013e4e:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e50:	2000      	movs	r0, #0
        break;
 8013e52:	e7a3      	b.n	8013d9c <UART_SetConfig+0x118>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e54:	2380      	movs	r3, #128	; 0x80
 8013e56:	021b      	lsls	r3, r3, #8
 8013e58:	69e2      	ldr	r2, [r4, #28]
 8013e5a:	429a      	cmp	r2, r3
 8013e5c:	d0e4      	beq.n	8013e28 <UART_SetConfig+0x1a4>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8013e5e:	f7ff f98f 	bl	8013180 <HAL_RCC_GetSysClockFreq>
 8013e62:	6825      	ldr	r5, [r4, #0]
 8013e64:	6861      	ldr	r1, [r4, #4]
 8013e66:	f7ec f973 	bl	8000150 <__udivsi3>
 8013e6a:	0400      	lsls	r0, r0, #16
 8013e6c:	0c00      	lsrs	r0, r0, #16
 8013e6e:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e70:	2000      	movs	r0, #0
        break;
 8013e72:	e79c      	b.n	8013dae <UART_SetConfig+0x12a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013e74:	2380      	movs	r3, #128	; 0x80
 8013e76:	021b      	lsls	r3, r3, #8
 8013e78:	69e2      	ldr	r2, [r4, #28]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d0e2      	beq.n	8013e44 <UART_SetConfig+0x1c0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013e7e:	6861      	ldr	r1, [r4, #4]
 8013e80:	2080      	movs	r0, #128	; 0x80
 8013e82:	0200      	lsls	r0, r0, #8
 8013e84:	f7ec f964 	bl	8000150 <__udivsi3>
 8013e88:	0400      	lsls	r0, r0, #16
 8013e8a:	0c00      	lsrs	r0, r0, #16
 8013e8c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013e8e:	2000      	movs	r0, #0
        break;
 8013e90:	e78d      	b.n	8013dae <UART_SetConfig+0x12a>
 8013e92:	46c0      	nop			; (mov r8, r8)
 8013e94:	efff69f3 	.word	0xefff69f3
 8013e98:	ffffcfff 	.word	0xffffcfff
 8013e9c:	fffff4ff 	.word	0xfffff4ff
 8013ea0:	40013800 	.word	0x40013800
 8013ea4:	40004400 	.word	0x40004400
 8013ea8:	40004800 	.word	0x40004800
 8013eac:	40004c00 	.word	0x40004c00
 8013eb0:	40005000 	.word	0x40005000
 8013eb4:	40011400 	.word	0x40011400
 8013eb8:	40011800 	.word	0x40011800
 8013ebc:	40011c00 	.word	0x40011c00
 8013ec0:	40021000 	.word	0x40021000
 8013ec4:	007a1200 	.word	0x007a1200
 8013ec8:	00f42400 	.word	0x00f42400

08013ecc <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013ecc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ece:	07db      	lsls	r3, r3, #31
 8013ed0:	d506      	bpl.n	8013ee0 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013ed2:	6802      	ldr	r2, [r0, #0]
 8013ed4:	6853      	ldr	r3, [r2, #4]
 8013ed6:	492c      	ldr	r1, [pc, #176]	; (8013f88 <UART_AdvFeatureConfig+0xbc>)
 8013ed8:	400b      	ands	r3, r1
 8013eda:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013edc:	430b      	orrs	r3, r1
 8013ede:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013ee0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ee2:	079b      	lsls	r3, r3, #30
 8013ee4:	d506      	bpl.n	8013ef4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013ee6:	6802      	ldr	r2, [r0, #0]
 8013ee8:	6853      	ldr	r3, [r2, #4]
 8013eea:	4928      	ldr	r1, [pc, #160]	; (8013f8c <UART_AdvFeatureConfig+0xc0>)
 8013eec:	400b      	ands	r3, r1
 8013eee:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013ef0:	430b      	orrs	r3, r1
 8013ef2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013ef4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ef6:	075b      	lsls	r3, r3, #29
 8013ef8:	d506      	bpl.n	8013f08 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013efa:	6802      	ldr	r2, [r0, #0]
 8013efc:	6853      	ldr	r3, [r2, #4]
 8013efe:	4924      	ldr	r1, [pc, #144]	; (8013f90 <UART_AdvFeatureConfig+0xc4>)
 8013f00:	400b      	ands	r3, r1
 8013f02:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013f04:	430b      	orrs	r3, r1
 8013f06:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013f08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f0a:	071b      	lsls	r3, r3, #28
 8013f0c:	d506      	bpl.n	8013f1c <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013f0e:	6802      	ldr	r2, [r0, #0]
 8013f10:	6853      	ldr	r3, [r2, #4]
 8013f12:	4920      	ldr	r1, [pc, #128]	; (8013f94 <UART_AdvFeatureConfig+0xc8>)
 8013f14:	400b      	ands	r3, r1
 8013f16:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013f18:	430b      	orrs	r3, r1
 8013f1a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013f1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f1e:	06db      	lsls	r3, r3, #27
 8013f20:	d506      	bpl.n	8013f30 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013f22:	6802      	ldr	r2, [r0, #0]
 8013f24:	6893      	ldr	r3, [r2, #8]
 8013f26:	491c      	ldr	r1, [pc, #112]	; (8013f98 <UART_AdvFeatureConfig+0xcc>)
 8013f28:	400b      	ands	r3, r1
 8013f2a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013f2c:	430b      	orrs	r3, r1
 8013f2e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013f30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f32:	069b      	lsls	r3, r3, #26
 8013f34:	d506      	bpl.n	8013f44 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013f36:	6802      	ldr	r2, [r0, #0]
 8013f38:	6893      	ldr	r3, [r2, #8]
 8013f3a:	4918      	ldr	r1, [pc, #96]	; (8013f9c <UART_AdvFeatureConfig+0xd0>)
 8013f3c:	400b      	ands	r3, r1
 8013f3e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013f40:	430b      	orrs	r3, r1
 8013f42:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013f44:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f46:	065b      	lsls	r3, r3, #25
 8013f48:	d50b      	bpl.n	8013f62 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013f4a:	6802      	ldr	r2, [r0, #0]
 8013f4c:	6853      	ldr	r3, [r2, #4]
 8013f4e:	4914      	ldr	r1, [pc, #80]	; (8013fa0 <UART_AdvFeatureConfig+0xd4>)
 8013f50:	400b      	ands	r3, r1
 8013f52:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013f54:	430b      	orrs	r3, r1
 8013f56:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013f58:	2380      	movs	r3, #128	; 0x80
 8013f5a:	035b      	lsls	r3, r3, #13
 8013f5c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d00a      	beq.n	8013f78 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013f62:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f64:	061b      	lsls	r3, r3, #24
 8013f66:	d506      	bpl.n	8013f76 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013f68:	6802      	ldr	r2, [r0, #0]
 8013f6a:	6853      	ldr	r3, [r2, #4]
 8013f6c:	490d      	ldr	r1, [pc, #52]	; (8013fa4 <UART_AdvFeatureConfig+0xd8>)
 8013f6e:	400b      	ands	r3, r1
 8013f70:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013f72:	430b      	orrs	r3, r1
 8013f74:	6053      	str	r3, [r2, #4]
}
 8013f76:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013f78:	6802      	ldr	r2, [r0, #0]
 8013f7a:	6853      	ldr	r3, [r2, #4]
 8013f7c:	490a      	ldr	r1, [pc, #40]	; (8013fa8 <UART_AdvFeatureConfig+0xdc>)
 8013f7e:	400b      	ands	r3, r1
 8013f80:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013f82:	430b      	orrs	r3, r1
 8013f84:	6053      	str	r3, [r2, #4]
 8013f86:	e7ec      	b.n	8013f62 <UART_AdvFeatureConfig+0x96>
 8013f88:	fffdffff 	.word	0xfffdffff
 8013f8c:	fffeffff 	.word	0xfffeffff
 8013f90:	fffbffff 	.word	0xfffbffff
 8013f94:	ffff7fff 	.word	0xffff7fff
 8013f98:	ffffefff 	.word	0xffffefff
 8013f9c:	ffffdfff 	.word	0xffffdfff
 8013fa0:	ffefffff 	.word	0xffefffff
 8013fa4:	fff7ffff 	.word	0xfff7ffff
 8013fa8:	ff9fffff 	.word	0xff9fffff

08013fac <UART_WaitOnFlagUntilTimeout>:
{
 8013fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fae:	46c6      	mov	lr, r8
 8013fb0:	b500      	push	{lr}
 8013fb2:	0006      	movs	r6, r0
 8013fb4:	000c      	movs	r4, r1
 8013fb6:	0017      	movs	r7, r2
 8013fb8:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013fba:	f7fc fdc9 	bl	8010b50 <HAL_GetTick>
 8013fbe:	4680      	mov	r8, r0
  if(Status == RESET)
 8013fc0:	2f00      	cmp	r7, #0
 8013fc2:	d029      	beq.n	8014018 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013fc4:	6832      	ldr	r2, [r6, #0]
 8013fc6:	69d3      	ldr	r3, [r2, #28]
 8013fc8:	4023      	ands	r3, r4
 8013fca:	42a3      	cmp	r3, r4
 8013fcc:	d152      	bne.n	8014074 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013fce:	1c6b      	adds	r3, r5, #1
 8013fd0:	d0f9      	beq.n	8013fc6 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013fd2:	2d00      	cmp	r5, #0
 8013fd4:	d005      	beq.n	8013fe2 <UART_WaitOnFlagUntilTimeout+0x36>
 8013fd6:	f7fc fdbb 	bl	8010b50 <HAL_GetTick>
 8013fda:	4643      	mov	r3, r8
 8013fdc:	1ac0      	subs	r0, r0, r3
 8013fde:	42a8      	cmp	r0, r5
 8013fe0:	d9f0      	bls.n	8013fc4 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013fe2:	6832      	ldr	r2, [r6, #0]
 8013fe4:	6813      	ldr	r3, [r2, #0]
 8013fe6:	2180      	movs	r1, #128	; 0x80
 8013fe8:	438b      	bics	r3, r1
 8013fea:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013fec:	6832      	ldr	r2, [r6, #0]
 8013fee:	6813      	ldr	r3, [r2, #0]
 8013ff0:	3960      	subs	r1, #96	; 0x60
 8013ff2:	438b      	bics	r3, r1
 8013ff4:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013ff6:	6832      	ldr	r2, [r6, #0]
 8013ff8:	6813      	ldr	r3, [r2, #0]
 8013ffa:	491f      	ldr	r1, [pc, #124]	; (8014078 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013ffc:	400b      	ands	r3, r1
 8013ffe:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014000:	6831      	ldr	r1, [r6, #0]
 8014002:	688b      	ldr	r3, [r1, #8]
 8014004:	2201      	movs	r2, #1
 8014006:	4393      	bics	r3, r2
 8014008:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801400a:	2369      	movs	r3, #105	; 0x69
 801400c:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 801400e:	3b01      	subs	r3, #1
 8014010:	2200      	movs	r2, #0
 8014012:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8014014:	2003      	movs	r0, #3
 8014016:	e02a      	b.n	801406e <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8014018:	6832      	ldr	r2, [r6, #0]
 801401a:	69d3      	ldr	r3, [r2, #28]
 801401c:	4023      	ands	r3, r4
 801401e:	42a3      	cmp	r3, r4
 8014020:	d024      	beq.n	801406c <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8014022:	1c6b      	adds	r3, r5, #1
 8014024:	d0f9      	beq.n	801401a <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8014026:	2d00      	cmp	r5, #0
 8014028:	d005      	beq.n	8014036 <UART_WaitOnFlagUntilTimeout+0x8a>
 801402a:	f7fc fd91 	bl	8010b50 <HAL_GetTick>
 801402e:	4643      	mov	r3, r8
 8014030:	1ac0      	subs	r0, r0, r3
 8014032:	42a8      	cmp	r0, r5
 8014034:	d9f0      	bls.n	8014018 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014036:	6832      	ldr	r2, [r6, #0]
 8014038:	6813      	ldr	r3, [r2, #0]
 801403a:	2180      	movs	r1, #128	; 0x80
 801403c:	438b      	bics	r3, r1
 801403e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014040:	6832      	ldr	r2, [r6, #0]
 8014042:	6813      	ldr	r3, [r2, #0]
 8014044:	3960      	subs	r1, #96	; 0x60
 8014046:	438b      	bics	r3, r1
 8014048:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801404a:	6832      	ldr	r2, [r6, #0]
 801404c:	6813      	ldr	r3, [r2, #0]
 801404e:	490a      	ldr	r1, [pc, #40]	; (8014078 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8014050:	400b      	ands	r3, r1
 8014052:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014054:	6831      	ldr	r1, [r6, #0]
 8014056:	688b      	ldr	r3, [r1, #8]
 8014058:	2201      	movs	r2, #1
 801405a:	4393      	bics	r3, r2
 801405c:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 801405e:	2369      	movs	r3, #105	; 0x69
 8014060:	54f2      	strb	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8014062:	3b01      	subs	r3, #1
 8014064:	2200      	movs	r2, #0
 8014066:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8014068:	2003      	movs	r0, #3
 801406a:	e000      	b.n	801406e <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 801406c:	2000      	movs	r0, #0
}
 801406e:	bc04      	pop	{r2}
 8014070:	4690      	mov	r8, r2
 8014072:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8014074:	2000      	movs	r0, #0
 8014076:	e7fa      	b.n	801406e <UART_WaitOnFlagUntilTimeout+0xc2>
 8014078:	fffffeff 	.word	0xfffffeff

0801407c <HAL_UART_Transmit>:
{
 801407c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801407e:	b083      	sub	sp, #12
 8014080:	0004      	movs	r4, r0
 8014082:	000e      	movs	r6, r1
 8014084:	9301      	str	r3, [sp, #4]
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014086:	2369      	movs	r3, #105	; 0x69
 8014088:	5cc3      	ldrb	r3, [r0, r3]
 801408a:	2b01      	cmp	r3, #1
 801408c:	d004      	beq.n	8014098 <HAL_UART_Transmit+0x1c>
 801408e:	2369      	movs	r3, #105	; 0x69
 8014090:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8014092:	2002      	movs	r0, #2
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8014094:	2b22      	cmp	r3, #34	; 0x22
 8014096:	d153      	bne.n	8014140 <HAL_UART_Transmit+0xc4>
    if((pData == NULL ) || (Size == 0))
 8014098:	2e00      	cmp	r6, #0
 801409a:	d050      	beq.n	801413e <HAL_UART_Transmit+0xc2>
      return  HAL_ERROR;
 801409c:	2001      	movs	r0, #1
    if((pData == NULL ) || (Size == 0))
 801409e:	2a00      	cmp	r2, #0
 80140a0:	d04e      	beq.n	8014140 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 80140a2:	2368      	movs	r3, #104	; 0x68
 80140a4:	5ce3      	ldrb	r3, [r4, r3]
 80140a6:	2b01      	cmp	r3, #1
 80140a8:	d04c      	beq.n	8014144 <HAL_UART_Transmit+0xc8>
 80140aa:	2368      	movs	r3, #104	; 0x68
 80140ac:	2101      	movs	r1, #1
 80140ae:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80140b0:	2300      	movs	r3, #0
 80140b2:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80140b4:	3369      	adds	r3, #105	; 0x69
 80140b6:	5ce3      	ldrb	r3, [r4, r3]
 80140b8:	2b22      	cmp	r3, #34	; 0x22
 80140ba:	d008      	beq.n	80140ce <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 80140bc:	2369      	movs	r3, #105	; 0x69
 80140be:	2112      	movs	r1, #18
 80140c0:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 80140c2:	2350      	movs	r3, #80	; 0x50
 80140c4:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 80140c6:	2752      	movs	r7, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140c8:	2580      	movs	r5, #128	; 0x80
 80140ca:	016d      	lsls	r5, r5, #5
 80140cc:	e00a      	b.n	80140e4 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80140ce:	3347      	adds	r3, #71	; 0x47
 80140d0:	3131      	adds	r1, #49	; 0x31
 80140d2:	54e1      	strb	r1, [r4, r3]
 80140d4:	e7f5      	b.n	80140c2 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 80140d6:	7833      	ldrb	r3, [r6, #0]
 80140d8:	6822      	ldr	r2, [r4, #0]
 80140da:	8513      	strh	r3, [r2, #40]	; 0x28
 80140dc:	3601      	adds	r6, #1
    while(huart->TxXferCount > 0)
 80140de:	5be2      	ldrh	r2, [r4, r7]
 80140e0:	2a00      	cmp	r2, #0
 80140e2:	d016      	beq.n	8014112 <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 80140e4:	3a01      	subs	r2, #1
 80140e6:	53e2      	strh	r2, [r4, r7]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80140e8:	9b01      	ldr	r3, [sp, #4]
 80140ea:	2200      	movs	r2, #0
 80140ec:	2180      	movs	r1, #128	; 0x80
 80140ee:	0020      	movs	r0, r4
 80140f0:	f7ff ff5c 	bl	8013fac <UART_WaitOnFlagUntilTimeout>
 80140f4:	2800      	cmp	r0, #0
 80140f6:	d127      	bne.n	8014148 <HAL_UART_Transmit+0xcc>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80140f8:	68a3      	ldr	r3, [r4, #8]
 80140fa:	42ab      	cmp	r3, r5
 80140fc:	d1eb      	bne.n	80140d6 <HAL_UART_Transmit+0x5a>
 80140fe:	6923      	ldr	r3, [r4, #16]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d1e8      	bne.n	80140d6 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014104:	8833      	ldrh	r3, [r6, #0]
 8014106:	05db      	lsls	r3, r3, #23
 8014108:	0ddb      	lsrs	r3, r3, #23
 801410a:	6822      	ldr	r2, [r4, #0]
 801410c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 801410e:	3602      	adds	r6, #2
 8014110:	e7e5      	b.n	80140de <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8014112:	9b01      	ldr	r3, [sp, #4]
 8014114:	2140      	movs	r1, #64	; 0x40
 8014116:	0020      	movs	r0, r4
 8014118:	f7ff ff48 	bl	8013fac <UART_WaitOnFlagUntilTimeout>
 801411c:	2800      	cmp	r0, #0
 801411e:	d115      	bne.n	801414c <HAL_UART_Transmit+0xd0>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014120:	2369      	movs	r3, #105	; 0x69
 8014122:	5ce3      	ldrb	r3, [r4, r3]
 8014124:	2b32      	cmp	r3, #50	; 0x32
 8014126:	d006      	beq.n	8014136 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8014128:	2369      	movs	r3, #105	; 0x69
 801412a:	2201      	movs	r2, #1
 801412c:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 801412e:	2368      	movs	r3, #104	; 0x68
 8014130:	2200      	movs	r2, #0
 8014132:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8014134:	e004      	b.n	8014140 <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8014136:	3337      	adds	r3, #55	; 0x37
 8014138:	2222      	movs	r2, #34	; 0x22
 801413a:	54e2      	strb	r2, [r4, r3]
 801413c:	e7f7      	b.n	801412e <HAL_UART_Transmit+0xb2>
      return  HAL_ERROR;
 801413e:	2001      	movs	r0, #1
}
 8014140:	b003      	add	sp, #12
 8014142:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(huart);
 8014144:	2002      	movs	r0, #2
 8014146:	e7fb      	b.n	8014140 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8014148:	2003      	movs	r0, #3
 801414a:	e7f9      	b.n	8014140 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 801414c:	2003      	movs	r0, #3
 801414e:	e7f7      	b.n	8014140 <HAL_UART_Transmit+0xc4>

08014150 <UART_CheckIdleState>:
{
 8014150:	b510      	push	{r4, lr}
 8014152:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014154:	2300      	movs	r3, #0
 8014156:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8014158:	6803      	ldr	r3, [r0, #0]
 801415a:	4a18      	ldr	r2, [pc, #96]	; (80141bc <UART_CheckIdleState+0x6c>)
 801415c:	4293      	cmp	r3, r2
 801415e:	d005      	beq.n	801416c <UART_CheckIdleState+0x1c>
 8014160:	4a17      	ldr	r2, [pc, #92]	; (80141c0 <UART_CheckIdleState+0x70>)
 8014162:	4293      	cmp	r3, r2
 8014164:	d002      	beq.n	801416c <UART_CheckIdleState+0x1c>
 8014166:	4a17      	ldr	r2, [pc, #92]	; (80141c4 <UART_CheckIdleState+0x74>)
 8014168:	4293      	cmp	r3, r2
 801416a:	d106      	bne.n	801417a <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	071b      	lsls	r3, r3, #28
 8014170:	d40b      	bmi.n	801418a <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014172:	6823      	ldr	r3, [r4, #0]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	075b      	lsls	r3, r3, #29
 8014178:	d413      	bmi.n	80141a2 <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 801417a:	2369      	movs	r3, #105	; 0x69
 801417c:	2201      	movs	r2, #1
 801417e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8014180:	3b01      	subs	r3, #1
 8014182:	2200      	movs	r2, #0
 8014184:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8014186:	2000      	movs	r0, #0
}
 8014188:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 801418a:	23fa      	movs	r3, #250	; 0xfa
 801418c:	2180      	movs	r1, #128	; 0x80
 801418e:	009b      	lsls	r3, r3, #2
 8014190:	2200      	movs	r2, #0
 8014192:	0389      	lsls	r1, r1, #14
 8014194:	0020      	movs	r0, r4
 8014196:	f7ff ff09 	bl	8013fac <UART_WaitOnFlagUntilTimeout>
 801419a:	2800      	cmp	r0, #0
 801419c:	d0e9      	beq.n	8014172 <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 801419e:	2003      	movs	r0, #3
 80141a0:	e7f2      	b.n	8014188 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 80141a2:	23fa      	movs	r3, #250	; 0xfa
 80141a4:	2180      	movs	r1, #128	; 0x80
 80141a6:	009b      	lsls	r3, r3, #2
 80141a8:	2200      	movs	r2, #0
 80141aa:	03c9      	lsls	r1, r1, #15
 80141ac:	0020      	movs	r0, r4
 80141ae:	f7ff fefd 	bl	8013fac <UART_WaitOnFlagUntilTimeout>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	d0e1      	beq.n	801417a <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 80141b6:	2003      	movs	r0, #3
 80141b8:	e7e6      	b.n	8014188 <UART_CheckIdleState+0x38>
 80141ba:	46c0      	nop			; (mov r8, r8)
 80141bc:	40013800 	.word	0x40013800
 80141c0:	40004400 	.word	0x40004400
 80141c4:	40004800 	.word	0x40004800

080141c8 <HAL_UART_Init>:
{
 80141c8:	b510      	push	{r4, lr}
 80141ca:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80141cc:	d030      	beq.n	8014230 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 80141ce:	2369      	movs	r3, #105	; 0x69
 80141d0:	5cc3      	ldrb	r3, [r0, r3]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d022      	beq.n	801421c <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 80141d6:	2369      	movs	r3, #105	; 0x69
 80141d8:	2202      	movs	r2, #2
 80141da:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80141dc:	6822      	ldr	r2, [r4, #0]
 80141de:	6813      	ldr	r3, [r2, #0]
 80141e0:	2101      	movs	r1, #1
 80141e2:	438b      	bics	r3, r1
 80141e4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80141e6:	0020      	movs	r0, r4
 80141e8:	f7ff fd4c 	bl	8013c84 <UART_SetConfig>
 80141ec:	2801      	cmp	r0, #1
 80141ee:	d014      	beq.n	801421a <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80141f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d118      	bne.n	8014228 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 80141f6:	6822      	ldr	r2, [r4, #0]
 80141f8:	6853      	ldr	r3, [r2, #4]
 80141fa:	490e      	ldr	r1, [pc, #56]	; (8014234 <HAL_UART_Init+0x6c>)
 80141fc:	400b      	ands	r3, r1
 80141fe:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8014200:	6822      	ldr	r2, [r4, #0]
 8014202:	6893      	ldr	r3, [r2, #8]
 8014204:	212a      	movs	r1, #42	; 0x2a
 8014206:	438b      	bics	r3, r1
 8014208:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 801420a:	6822      	ldr	r2, [r4, #0]
 801420c:	6813      	ldr	r3, [r2, #0]
 801420e:	3929      	subs	r1, #41	; 0x29
 8014210:	430b      	orrs	r3, r1
 8014212:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8014214:	0020      	movs	r0, r4
 8014216:	f7ff ff9b 	bl	8014150 <UART_CheckIdleState>
}
 801421a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 801421c:	3368      	adds	r3, #104	; 0x68
 801421e:	2200      	movs	r2, #0
 8014220:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8014222:	f7fa f9e9 	bl	800e5f8 <HAL_UART_MspInit>
 8014226:	e7d6      	b.n	80141d6 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8014228:	0020      	movs	r0, r4
 801422a:	f7ff fe4f 	bl	8013ecc <UART_AdvFeatureConfig>
 801422e:	e7e2      	b.n	80141f6 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8014230:	2001      	movs	r0, #1
 8014232:	e7f2      	b.n	801421a <HAL_UART_Init+0x52>
 8014234:	ffffb7ff 	.word	0xffffb7ff

08014238 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014238:	2369      	movs	r3, #105	; 0x69
 801423a:	5cc3      	ldrb	r3, [r0, r3]
 801423c:	2b12      	cmp	r3, #18
 801423e:	d004      	beq.n	801424a <UART_Transmit_IT+0x12>
 8014240:	2369      	movs	r3, #105	; 0x69
 8014242:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8014244:	3b67      	subs	r3, #103	; 0x67
  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8014246:	2a32      	cmp	r2, #50	; 0x32
 8014248:	d113      	bne.n	8014272 <UART_Transmit_IT+0x3a>
    if(huart->TxXferCount == 0)
 801424a:	2352      	movs	r3, #82	; 0x52
 801424c:	5ac3      	ldrh	r3, [r0, r3]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d011      	beq.n	8014276 <UART_Transmit_IT+0x3e>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014252:	2380      	movs	r3, #128	; 0x80
 8014254:	015b      	lsls	r3, r3, #5
 8014256:	6882      	ldr	r2, [r0, #8]
 8014258:	429a      	cmp	r2, r3
 801425a:	d018      	beq.n	801428e <UART_Transmit_IT+0x56>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 801425c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801425e:	1c5a      	adds	r2, r3, #1
 8014260:	64c2      	str	r2, [r0, #76]	; 0x4c
 8014262:	781b      	ldrb	r3, [r3, #0]
 8014264:	6802      	ldr	r2, [r0, #0]
 8014266:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8014268:	2252      	movs	r2, #82	; 0x52
 801426a:	5a83      	ldrh	r3, [r0, r2]
 801426c:	3b01      	subs	r3, #1
 801426e:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8014270:	2300      	movs	r3, #0
  }
}
 8014272:	0018      	movs	r0, r3
 8014274:	4770      	bx	lr
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8014276:	6802      	ldr	r2, [r0, #0]
 8014278:	6813      	ldr	r3, [r2, #0]
 801427a:	2180      	movs	r1, #128	; 0x80
 801427c:	438b      	bics	r3, r1
 801427e:	6013      	str	r3, [r2, #0]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8014280:	6802      	ldr	r2, [r0, #0]
 8014282:	6813      	ldr	r3, [r2, #0]
 8014284:	3940      	subs	r1, #64	; 0x40
 8014286:	430b      	orrs	r3, r1
 8014288:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 801428a:	2300      	movs	r3, #0
 801428c:	e7f1      	b.n	8014272 <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801428e:	6903      	ldr	r3, [r0, #16]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d1e3      	bne.n	801425c <UART_Transmit_IT+0x24>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8014294:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8014296:	881b      	ldrh	r3, [r3, #0]
 8014298:	05db      	lsls	r3, r3, #23
 801429a:	0ddb      	lsrs	r3, r3, #23
 801429c:	6802      	ldr	r2, [r0, #0]
 801429e:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 80142a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80142a2:	3302      	adds	r3, #2
 80142a4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80142a6:	e7df      	b.n	8014268 <UART_Transmit_IT+0x30>

080142a8 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80142a8:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80142aa:	6802      	ldr	r2, [r0, #0]
 80142ac:	6813      	ldr	r3, [r2, #0]
 80142ae:	2140      	movs	r1, #64	; 0x40
 80142b0:	438b      	bics	r3, r1
 80142b2:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 80142b4:	2369      	movs	r3, #105	; 0x69
 80142b6:	5cc3      	ldrb	r3, [r0, r3]
 80142b8:	2b32      	cmp	r3, #50	; 0x32
 80142ba:	d00a      	beq.n	80142d2 <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80142bc:	6801      	ldr	r1, [r0, #0]
 80142be:	688b      	ldr	r3, [r1, #8]
 80142c0:	2201      	movs	r2, #1
 80142c2:	4393      	bics	r3, r2
 80142c4:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 80142c6:	2369      	movs	r3, #105	; 0x69
 80142c8:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 80142ca:	f7f9 febb 	bl	800e044 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80142ce:	2000      	movs	r0, #0
 80142d0:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 80142d2:	3337      	adds	r3, #55	; 0x37
 80142d4:	2222      	movs	r2, #34	; 0x22
 80142d6:	54c2      	strb	r2, [r0, r3]
 80142d8:	e7f7      	b.n	80142ca <UART_EndTransmit_IT+0x22>
	...

080142dc <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80142dc:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80142de:	2369      	movs	r3, #105	; 0x69
 80142e0:	5cc3      	ldrb	r3, [r0, r3]
 80142e2:	2b22      	cmp	r3, #34	; 0x22
 80142e4:	d004      	beq.n	80142f0 <UART_Receive_IT+0x14>
 80142e6:	2369      	movs	r3, #105	; 0x69
 80142e8:	5cc3      	ldrb	r3, [r0, r3]

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80142ea:	2202      	movs	r2, #2
  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 80142ec:	2b32      	cmp	r3, #50	; 0x32
 80142ee:	d12d      	bne.n	801434c <UART_Receive_IT+0x70>
  uint16_t uhMask = huart->Mask;
 80142f0:	235c      	movs	r3, #92	; 0x5c
 80142f2:	5ac1      	ldrh	r1, [r0, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80142f4:	2280      	movs	r2, #128	; 0x80
 80142f6:	0152      	lsls	r2, r2, #5
 80142f8:	6883      	ldr	r3, [r0, #8]
 80142fa:	4293      	cmp	r3, r2
 80142fc:	d028      	beq.n	8014350 <UART_Receive_IT+0x74>
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80142fe:	6803      	ldr	r3, [r0, #0]
 8014300:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014302:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8014304:	1c54      	adds	r4, r2, #1
 8014306:	6544      	str	r4, [r0, #84]	; 0x54
 8014308:	400b      	ands	r3, r1
 801430a:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0)
 801430c:	225a      	movs	r2, #90	; 0x5a
 801430e:	5a83      	ldrh	r3, [r0, r2]
 8014310:	3b01      	subs	r3, #1
 8014312:	b29b      	uxth	r3, r3
 8014314:	5283      	strh	r3, [r0, r2]
    return HAL_OK;
 8014316:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0)
 8014318:	2b00      	cmp	r3, #0
 801431a:	d117      	bne.n	801434c <UART_Receive_IT+0x70>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801431c:	6802      	ldr	r2, [r0, #0]
 801431e:	6813      	ldr	r3, [r2, #0]
 8014320:	2120      	movs	r1, #32
 8014322:	438b      	bics	r3, r1
 8014324:	6013      	str	r3, [r2, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8014326:	2369      	movs	r3, #105	; 0x69
 8014328:	5cc3      	ldrb	r3, [r0, r3]
 801432a:	2b32      	cmp	r3, #50	; 0x32
 801432c:	d01c      	beq.n	8014368 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801432e:	6802      	ldr	r2, [r0, #0]
 8014330:	6813      	ldr	r3, [r2, #0]
 8014332:	490f      	ldr	r1, [pc, #60]	; (8014370 <UART_Receive_IT+0x94>)
 8014334:	400b      	ands	r3, r1
 8014336:	6013      	str	r3, [r2, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014338:	6801      	ldr	r1, [r0, #0]
 801433a:	688b      	ldr	r3, [r1, #8]
 801433c:	2201      	movs	r2, #1
 801433e:	4393      	bics	r3, r2
 8014340:	608b      	str	r3, [r1, #8]
        huart->State = HAL_UART_STATE_READY;
 8014342:	2369      	movs	r3, #105	; 0x69
 8014344:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8014346:	f7f9 febb 	bl	800e0c0 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 801434a:	2200      	movs	r2, #0
  }
}
 801434c:	0010      	movs	r0, r2
 801434e:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014350:	6903      	ldr	r3, [r0, #16]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1d3      	bne.n	80142fe <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8014356:	6803      	ldr	r3, [r0, #0]
 8014358:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801435a:	400b      	ands	r3, r1
 801435c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 801435e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2;
 8014360:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8014362:	3302      	adds	r3, #2
 8014364:	6543      	str	r3, [r0, #84]	; 0x54
 8014366:	e7d1      	b.n	801430c <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8014368:	3337      	adds	r3, #55	; 0x37
 801436a:	2212      	movs	r2, #18
 801436c:	54c2      	strb	r2, [r0, r3]
 801436e:	e7ea      	b.n	8014346 <UART_Receive_IT+0x6a>
 8014370:	fffffeff 	.word	0xfffffeff

08014374 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8014374:	4770      	bx	lr

08014376 <HAL_UART_IRQHandler>:
{
 8014376:	b510      	push	{r4, lr}
 8014378:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 801437a:	6803      	ldr	r3, [r0, #0]
 801437c:	69da      	ldr	r2, [r3, #28]
 801437e:	07d2      	lsls	r2, r2, #31
 8014380:	d509      	bpl.n	8014396 <HAL_UART_IRQHandler+0x20>
 8014382:	681a      	ldr	r2, [r3, #0]
 8014384:	05d2      	lsls	r2, r2, #23
 8014386:	d506      	bpl.n	8014396 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8014388:	2201      	movs	r2, #1
 801438a:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 801438c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801438e:	4313      	orrs	r3, r2
 8014390:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8014392:	2369      	movs	r3, #105	; 0x69
 8014394:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8014396:	6823      	ldr	r3, [r4, #0]
 8014398:	69da      	ldr	r2, [r3, #28]
 801439a:	0792      	lsls	r2, r2, #30
 801439c:	d50b      	bpl.n	80143b6 <HAL_UART_IRQHandler+0x40>
 801439e:	689a      	ldr	r2, [r3, #8]
 80143a0:	07d2      	lsls	r2, r2, #31
 80143a2:	d508      	bpl.n	80143b6 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80143a4:	2202      	movs	r2, #2
 80143a6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80143a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80143aa:	3202      	adds	r2, #2
 80143ac:	4313      	orrs	r3, r2
 80143ae:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80143b0:	2369      	movs	r3, #105	; 0x69
 80143b2:	3a03      	subs	r2, #3
 80143b4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80143b6:	6823      	ldr	r3, [r4, #0]
 80143b8:	69da      	ldr	r2, [r3, #28]
 80143ba:	0752      	lsls	r2, r2, #29
 80143bc:	d50b      	bpl.n	80143d6 <HAL_UART_IRQHandler+0x60>
 80143be:	689a      	ldr	r2, [r3, #8]
 80143c0:	07d2      	lsls	r2, r2, #31
 80143c2:	d508      	bpl.n	80143d6 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80143c4:	2204      	movs	r2, #4
 80143c6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80143c8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80143ca:	3a02      	subs	r2, #2
 80143cc:	4313      	orrs	r3, r2
 80143ce:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80143d0:	2369      	movs	r3, #105	; 0x69
 80143d2:	3a01      	subs	r2, #1
 80143d4:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80143d6:	6823      	ldr	r3, [r4, #0]
 80143d8:	69da      	ldr	r2, [r3, #28]
 80143da:	0712      	lsls	r2, r2, #28
 80143dc:	d50a      	bpl.n	80143f4 <HAL_UART_IRQHandler+0x7e>
 80143de:	689a      	ldr	r2, [r3, #8]
 80143e0:	07d2      	lsls	r2, r2, #31
 80143e2:	d507      	bpl.n	80143f4 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 80143e4:	2208      	movs	r2, #8
 80143e6:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80143e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80143ea:	4313      	orrs	r3, r2
 80143ec:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 80143ee:	2369      	movs	r3, #105	; 0x69
 80143f0:	3a07      	subs	r2, #7
 80143f2:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80143f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d11c      	bne.n	8014434 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 80143fa:	6823      	ldr	r3, [r4, #0]
 80143fc:	69da      	ldr	r2, [r3, #28]
 80143fe:	02d2      	lsls	r2, r2, #11
 8014400:	d502      	bpl.n	8014408 <HAL_UART_IRQHandler+0x92>
 8014402:	689a      	ldr	r2, [r3, #8]
 8014404:	0252      	lsls	r2, r2, #9
 8014406:	d419      	bmi.n	801443c <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8014408:	6823      	ldr	r3, [r4, #0]
 801440a:	69da      	ldr	r2, [r3, #28]
 801440c:	0692      	lsls	r2, r2, #26
 801440e:	d502      	bpl.n	8014416 <HAL_UART_IRQHandler+0xa0>
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	069b      	lsls	r3, r3, #26
 8014414:	d41c      	bmi.n	8014450 <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8014416:	6823      	ldr	r3, [r4, #0]
 8014418:	69da      	ldr	r2, [r3, #28]
 801441a:	0612      	lsls	r2, r2, #24
 801441c:	d502      	bpl.n	8014424 <HAL_UART_IRQHandler+0xae>
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	061b      	lsls	r3, r3, #24
 8014422:	d41e      	bmi.n	8014462 <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8014424:	6823      	ldr	r3, [r4, #0]
 8014426:	69da      	ldr	r2, [r3, #28]
 8014428:	0652      	lsls	r2, r2, #25
 801442a:	d502      	bpl.n	8014432 <HAL_UART_IRQHandler+0xbc>
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	065b      	lsls	r3, r3, #25
 8014430:	d41b      	bmi.n	801446a <HAL_UART_IRQHandler+0xf4>
}
 8014432:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8014434:	0020      	movs	r0, r4
 8014436:	f7f9 fe1d 	bl	800e074 <HAL_UART_ErrorCallback>
 801443a:	e7de      	b.n	80143fa <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 801443c:	2280      	movs	r2, #128	; 0x80
 801443e:	0352      	lsls	r2, r2, #13
 8014440:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 8014442:	2369      	movs	r3, #105	; 0x69
 8014444:	2201      	movs	r2, #1
 8014446:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014448:	0020      	movs	r0, r4
 801444a:	f7ff ff93 	bl	8014374 <HAL_UARTEx_WakeupCallback>
 801444e:	e7db      	b.n	8014408 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 8014450:	0020      	movs	r0, r4
 8014452:	f7ff ff43 	bl	80142dc <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014456:	6822      	ldr	r2, [r4, #0]
 8014458:	6993      	ldr	r3, [r2, #24]
 801445a:	2108      	movs	r1, #8
 801445c:	430b      	orrs	r3, r1
 801445e:	6193      	str	r3, [r2, #24]
 8014460:	e7d9      	b.n	8014416 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 8014462:	0020      	movs	r0, r4
 8014464:	f7ff fee8 	bl	8014238 <UART_Transmit_IT>
 8014468:	e7dc      	b.n	8014424 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 801446a:	0020      	movs	r0, r4
 801446c:	f7ff ff1c 	bl	80142a8 <UART_EndTransmit_IT>
}
 8014470:	e7df      	b.n	8014432 <HAL_UART_IRQHandler+0xbc>

08014472 <main>:

/* Private function prototypes -----------------------------------------------*/

/* Main function ------------------------------------------------------------*/

int main(void){
 8014472:	b510      	push	{r4, lr}

	Module_Init();		//Initialize Module &  BitzOS
 8014474:	f7f0 f928 	bl	80046c8 <Module_Init>
 8014478:	e7fe      	b.n	8014478 <main+0x6>

0801447a <UserTask>:
}

/*-----------------------------------------------------------*/

/* User Task */
void UserTask(void *argument){
 801447a:	e7fe      	b.n	801447a <UserTask>

0801447c <atof>:
 801447c:	b510      	push	{r4, lr}
 801447e:	2100      	movs	r1, #0
 8014480:	f001 fb70 	bl	8015b64 <strtod>
 8014484:	bd10      	pop	{r4, pc}

08014486 <atoi>:
 8014486:	b510      	push	{r4, lr}
 8014488:	220a      	movs	r2, #10
 801448a:	2100      	movs	r1, #0
 801448c:	f001 fc36 	bl	8015cfc <strtol>
 8014490:	bd10      	pop	{r4, pc}

08014492 <atol>:
 8014492:	b510      	push	{r4, lr}
 8014494:	220a      	movs	r2, #10
 8014496:	2100      	movs	r1, #0
 8014498:	f001 fc30 	bl	8015cfc <strtol>
 801449c:	bd10      	pop	{r4, pc}
	...

080144a0 <__libc_init_array>:
 80144a0:	b570      	push	{r4, r5, r6, lr}
 80144a2:	2600      	movs	r6, #0
 80144a4:	4d0c      	ldr	r5, [pc, #48]	; (80144d8 <__libc_init_array+0x38>)
 80144a6:	4c0d      	ldr	r4, [pc, #52]	; (80144dc <__libc_init_array+0x3c>)
 80144a8:	1b64      	subs	r4, r4, r5
 80144aa:	10a4      	asrs	r4, r4, #2
 80144ac:	42a6      	cmp	r6, r4
 80144ae:	d109      	bne.n	80144c4 <__libc_init_array+0x24>
 80144b0:	2600      	movs	r6, #0
 80144b2:	f004 fe9f 	bl	80191f4 <_init>
 80144b6:	4d0a      	ldr	r5, [pc, #40]	; (80144e0 <__libc_init_array+0x40>)
 80144b8:	4c0a      	ldr	r4, [pc, #40]	; (80144e4 <__libc_init_array+0x44>)
 80144ba:	1b64      	subs	r4, r4, r5
 80144bc:	10a4      	asrs	r4, r4, #2
 80144be:	42a6      	cmp	r6, r4
 80144c0:	d105      	bne.n	80144ce <__libc_init_array+0x2e>
 80144c2:	bd70      	pop	{r4, r5, r6, pc}
 80144c4:	00b3      	lsls	r3, r6, #2
 80144c6:	58eb      	ldr	r3, [r5, r3]
 80144c8:	4798      	blx	r3
 80144ca:	3601      	adds	r6, #1
 80144cc:	e7ee      	b.n	80144ac <__libc_init_array+0xc>
 80144ce:	00b3      	lsls	r3, r6, #2
 80144d0:	58eb      	ldr	r3, [r5, r3]
 80144d2:	4798      	blx	r3
 80144d4:	3601      	adds	r6, #1
 80144d6:	e7f2      	b.n	80144be <__libc_init_array+0x1e>
 80144d8:	0801c604 	.word	0x0801c604
 80144dc:	0801c604 	.word	0x0801c604
 80144e0:	0801c604 	.word	0x0801c604
 80144e4:	0801c60c 	.word	0x0801c60c

080144e8 <__locale_ctype_ptr_l>:
 80144e8:	30ec      	adds	r0, #236	; 0xec
 80144ea:	6800      	ldr	r0, [r0, #0]
 80144ec:	4770      	bx	lr
	...

080144f0 <__locale_ctype_ptr>:
 80144f0:	4b04      	ldr	r3, [pc, #16]	; (8014504 <__locale_ctype_ptr+0x14>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d100      	bne.n	80144fc <__locale_ctype_ptr+0xc>
 80144fa:	4b03      	ldr	r3, [pc, #12]	; (8014508 <__locale_ctype_ptr+0x18>)
 80144fc:	33ec      	adds	r3, #236	; 0xec
 80144fe:	6818      	ldr	r0, [r3, #0]
 8014500:	4770      	bx	lr
 8014502:	46c0      	nop			; (mov r8, r8)
 8014504:	20000118 	.word	0x20000118
 8014508:	20000548 	.word	0x20000548

0801450c <malloc>:
 801450c:	b510      	push	{r4, lr}
 801450e:	4b03      	ldr	r3, [pc, #12]	; (801451c <malloc+0x10>)
 8014510:	0001      	movs	r1, r0
 8014512:	6818      	ldr	r0, [r3, #0]
 8014514:	f000 f80e 	bl	8014534 <_malloc_r>
 8014518:	bd10      	pop	{r4, pc}
 801451a:	46c0      	nop			; (mov r8, r8)
 801451c:	20000118 	.word	0x20000118

08014520 <free>:
 8014520:	b510      	push	{r4, lr}
 8014522:	4b03      	ldr	r3, [pc, #12]	; (8014530 <free+0x10>)
 8014524:	0001      	movs	r1, r0
 8014526:	6818      	ldr	r0, [r3, #0]
 8014528:	f003 fd42 	bl	8017fb0 <_free_r>
 801452c:	bd10      	pop	{r4, pc}
 801452e:	46c0      	nop			; (mov r8, r8)
 8014530:	20000118 	.word	0x20000118

08014534 <_malloc_r>:
 8014534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014536:	000d      	movs	r5, r1
 8014538:	b085      	sub	sp, #20
 801453a:	350b      	adds	r5, #11
 801453c:	9001      	str	r0, [sp, #4]
 801453e:	2d16      	cmp	r5, #22
 8014540:	d908      	bls.n	8014554 <_malloc_r+0x20>
 8014542:	2307      	movs	r3, #7
 8014544:	439d      	bics	r5, r3
 8014546:	d506      	bpl.n	8014556 <_malloc_r+0x22>
 8014548:	230c      	movs	r3, #12
 801454a:	9a01      	ldr	r2, [sp, #4]
 801454c:	6013      	str	r3, [r2, #0]
 801454e:	2000      	movs	r0, #0
 8014550:	b005      	add	sp, #20
 8014552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014554:	2510      	movs	r5, #16
 8014556:	428d      	cmp	r5, r1
 8014558:	d3f6      	bcc.n	8014548 <_malloc_r+0x14>
 801455a:	9801      	ldr	r0, [sp, #4]
 801455c:	f000 fa34 	bl	80149c8 <__malloc_lock>
 8014560:	23f8      	movs	r3, #248	; 0xf8
 8014562:	33ff      	adds	r3, #255	; 0xff
 8014564:	4ac4      	ldr	r2, [pc, #784]	; (8014878 <_malloc_r+0x344>)
 8014566:	429d      	cmp	r5, r3
 8014568:	d820      	bhi.n	80145ac <_malloc_r+0x78>
 801456a:	0029      	movs	r1, r5
 801456c:	3108      	adds	r1, #8
 801456e:	1851      	adds	r1, r2, r1
 8014570:	0008      	movs	r0, r1
 8014572:	684c      	ldr	r4, [r1, #4]
 8014574:	3808      	subs	r0, #8
 8014576:	08eb      	lsrs	r3, r5, #3
 8014578:	4284      	cmp	r4, r0
 801457a:	d104      	bne.n	8014586 <_malloc_r+0x52>
 801457c:	68cc      	ldr	r4, [r1, #12]
 801457e:	3302      	adds	r3, #2
 8014580:	469c      	mov	ip, r3
 8014582:	42a1      	cmp	r1, r4
 8014584:	d02a      	beq.n	80145dc <_malloc_r+0xa8>
 8014586:	2303      	movs	r3, #3
 8014588:	6862      	ldr	r2, [r4, #4]
 801458a:	68a1      	ldr	r1, [r4, #8]
 801458c:	439a      	bics	r2, r3
 801458e:	0013      	movs	r3, r2
 8014590:	68e2      	ldr	r2, [r4, #12]
 8014592:	18e3      	adds	r3, r4, r3
 8014594:	60ca      	str	r2, [r1, #12]
 8014596:	6091      	str	r1, [r2, #8]
 8014598:	2201      	movs	r2, #1
 801459a:	6859      	ldr	r1, [r3, #4]
 801459c:	430a      	orrs	r2, r1
 801459e:	605a      	str	r2, [r3, #4]
 80145a0:	9801      	ldr	r0, [sp, #4]
 80145a2:	f000 fa19 	bl	80149d8 <__malloc_unlock>
 80145a6:	0020      	movs	r0, r4
 80145a8:	3008      	adds	r0, #8
 80145aa:	e7d1      	b.n	8014550 <_malloc_r+0x1c>
 80145ac:	0a69      	lsrs	r1, r5, #9
 80145ae:	233f      	movs	r3, #63	; 0x3f
 80145b0:	2900      	cmp	r1, #0
 80145b2:	d003      	beq.n	80145bc <_malloc_r+0x88>
 80145b4:	2904      	cmp	r1, #4
 80145b6:	d828      	bhi.n	801460a <_malloc_r+0xd6>
 80145b8:	09ab      	lsrs	r3, r5, #6
 80145ba:	3338      	adds	r3, #56	; 0x38
 80145bc:	2103      	movs	r1, #3
 80145be:	468c      	mov	ip, r1
 80145c0:	00d8      	lsls	r0, r3, #3
 80145c2:	1880      	adds	r0, r0, r2
 80145c4:	68c4      	ldr	r4, [r0, #12]
 80145c6:	4284      	cmp	r4, r0
 80145c8:	d006      	beq.n	80145d8 <_malloc_r+0xa4>
 80145ca:	4666      	mov	r6, ip
 80145cc:	6861      	ldr	r1, [r4, #4]
 80145ce:	43b1      	bics	r1, r6
 80145d0:	1b4f      	subs	r7, r1, r5
 80145d2:	2f0f      	cmp	r7, #15
 80145d4:	dd31      	ble.n	801463a <_malloc_r+0x106>
 80145d6:	3b01      	subs	r3, #1
 80145d8:	3301      	adds	r3, #1
 80145da:	469c      	mov	ip, r3
 80145dc:	6914      	ldr	r4, [r2, #16]
 80145de:	49a7      	ldr	r1, [pc, #668]	; (801487c <_malloc_r+0x348>)
 80145e0:	428c      	cmp	r4, r1
 80145e2:	d055      	beq.n	8014690 <_malloc_r+0x15c>
 80145e4:	2303      	movs	r3, #3
 80145e6:	6860      	ldr	r0, [r4, #4]
 80145e8:	4398      	bics	r0, r3
 80145ea:	0003      	movs	r3, r0
 80145ec:	1b46      	subs	r6, r0, r5
 80145ee:	2e0f      	cmp	r6, #15
 80145f0:	dd31      	ble.n	8014656 <_malloc_r+0x122>
 80145f2:	2701      	movs	r7, #1
 80145f4:	1960      	adds	r0, r4, r5
 80145f6:	433d      	orrs	r5, r7
 80145f8:	4337      	orrs	r7, r6
 80145fa:	6065      	str	r5, [r4, #4]
 80145fc:	6150      	str	r0, [r2, #20]
 80145fe:	6110      	str	r0, [r2, #16]
 8014600:	60c1      	str	r1, [r0, #12]
 8014602:	6081      	str	r1, [r0, #8]
 8014604:	6047      	str	r7, [r0, #4]
 8014606:	50e6      	str	r6, [r4, r3]
 8014608:	e7ca      	b.n	80145a0 <_malloc_r+0x6c>
 801460a:	2914      	cmp	r1, #20
 801460c:	d802      	bhi.n	8014614 <_malloc_r+0xe0>
 801460e:	000b      	movs	r3, r1
 8014610:	335b      	adds	r3, #91	; 0x5b
 8014612:	e7d3      	b.n	80145bc <_malloc_r+0x88>
 8014614:	2954      	cmp	r1, #84	; 0x54
 8014616:	d802      	bhi.n	801461e <_malloc_r+0xea>
 8014618:	0b2b      	lsrs	r3, r5, #12
 801461a:	336e      	adds	r3, #110	; 0x6e
 801461c:	e7ce      	b.n	80145bc <_malloc_r+0x88>
 801461e:	23aa      	movs	r3, #170	; 0xaa
 8014620:	005b      	lsls	r3, r3, #1
 8014622:	4299      	cmp	r1, r3
 8014624:	d802      	bhi.n	801462c <_malloc_r+0xf8>
 8014626:	0beb      	lsrs	r3, r5, #15
 8014628:	3377      	adds	r3, #119	; 0x77
 801462a:	e7c7      	b.n	80145bc <_malloc_r+0x88>
 801462c:	4894      	ldr	r0, [pc, #592]	; (8014880 <_malloc_r+0x34c>)
 801462e:	237e      	movs	r3, #126	; 0x7e
 8014630:	4281      	cmp	r1, r0
 8014632:	d8c3      	bhi.n	80145bc <_malloc_r+0x88>
 8014634:	0cab      	lsrs	r3, r5, #18
 8014636:	337c      	adds	r3, #124	; 0x7c
 8014638:	e7c0      	b.n	80145bc <_malloc_r+0x88>
 801463a:	68e6      	ldr	r6, [r4, #12]
 801463c:	2f00      	cmp	r7, #0
 801463e:	db08      	blt.n	8014652 <_malloc_r+0x11e>
 8014640:	68a3      	ldr	r3, [r4, #8]
 8014642:	1861      	adds	r1, r4, r1
 8014644:	60de      	str	r6, [r3, #12]
 8014646:	60b3      	str	r3, [r6, #8]
 8014648:	2301      	movs	r3, #1
 801464a:	684a      	ldr	r2, [r1, #4]
 801464c:	4313      	orrs	r3, r2
 801464e:	604b      	str	r3, [r1, #4]
 8014650:	e7a6      	b.n	80145a0 <_malloc_r+0x6c>
 8014652:	0034      	movs	r4, r6
 8014654:	e7b7      	b.n	80145c6 <_malloc_r+0x92>
 8014656:	6151      	str	r1, [r2, #20]
 8014658:	6111      	str	r1, [r2, #16]
 801465a:	2e00      	cmp	r6, #0
 801465c:	db05      	blt.n	801466a <_malloc_r+0x136>
 801465e:	2101      	movs	r1, #1
 8014660:	1823      	adds	r3, r4, r0
 8014662:	685a      	ldr	r2, [r3, #4]
 8014664:	4311      	orrs	r1, r2
 8014666:	6059      	str	r1, [r3, #4]
 8014668:	e79a      	b.n	80145a0 <_malloc_r+0x6c>
 801466a:	4986      	ldr	r1, [pc, #536]	; (8014884 <_malloc_r+0x350>)
 801466c:	6857      	ldr	r7, [r2, #4]
 801466e:	4288      	cmp	r0, r1
 8014670:	d900      	bls.n	8014674 <_malloc_r+0x140>
 8014672:	e090      	b.n	8014796 <_malloc_r+0x262>
 8014674:	08c3      	lsrs	r3, r0, #3
 8014676:	39ff      	subs	r1, #255	; 0xff
 8014678:	1098      	asrs	r0, r3, #2
 801467a:	39ff      	subs	r1, #255	; 0xff
 801467c:	4081      	lsls	r1, r0
 801467e:	00db      	lsls	r3, r3, #3
 8014680:	4339      	orrs	r1, r7
 8014682:	6051      	str	r1, [r2, #4]
 8014684:	189a      	adds	r2, r3, r2
 8014686:	6893      	ldr	r3, [r2, #8]
 8014688:	60e2      	str	r2, [r4, #12]
 801468a:	60a3      	str	r3, [r4, #8]
 801468c:	6094      	str	r4, [r2, #8]
 801468e:	60dc      	str	r4, [r3, #12]
 8014690:	4663      	mov	r3, ip
 8014692:	2201      	movs	r2, #1
 8014694:	4978      	ldr	r1, [pc, #480]	; (8014878 <_malloc_r+0x344>)
 8014696:	109b      	asrs	r3, r3, #2
 8014698:	6848      	ldr	r0, [r1, #4]
 801469a:	409a      	lsls	r2, r3
 801469c:	4290      	cmp	r0, r2
 801469e:	d32d      	bcc.n	80146fc <_malloc_r+0x1c8>
 80146a0:	4202      	tst	r2, r0
 80146a2:	d109      	bne.n	80146b8 <_malloc_r+0x184>
 80146a4:	2303      	movs	r3, #3
 80146a6:	4664      	mov	r4, ip
 80146a8:	439c      	bics	r4, r3
 80146aa:	0023      	movs	r3, r4
 80146ac:	3304      	adds	r3, #4
 80146ae:	469c      	mov	ip, r3
 80146b0:	0052      	lsls	r2, r2, #1
 80146b2:	4202      	tst	r2, r0
 80146b4:	d100      	bne.n	80146b8 <_malloc_r+0x184>
 80146b6:	e0a4      	b.n	8014802 <_malloc_r+0x2ce>
 80146b8:	4663      	mov	r3, ip
 80146ba:	00db      	lsls	r3, r3, #3
 80146bc:	18cb      	adds	r3, r1, r3
 80146be:	9303      	str	r3, [sp, #12]
 80146c0:	001f      	movs	r7, r3
 80146c2:	4663      	mov	r3, ip
 80146c4:	9302      	str	r3, [sp, #8]
 80146c6:	68fc      	ldr	r4, [r7, #12]
 80146c8:	42bc      	cmp	r4, r7
 80146ca:	d000      	beq.n	80146ce <_malloc_r+0x19a>
 80146cc:	e09c      	b.n	8014808 <_malloc_r+0x2d4>
 80146ce:	2003      	movs	r0, #3
 80146d0:	9b02      	ldr	r3, [sp, #8]
 80146d2:	3708      	adds	r7, #8
 80146d4:	3301      	adds	r3, #1
 80146d6:	9302      	str	r3, [sp, #8]
 80146d8:	4203      	tst	r3, r0
 80146da:	d1f4      	bne.n	80146c6 <_malloc_r+0x192>
 80146dc:	4663      	mov	r3, ip
 80146de:	2003      	movs	r0, #3
 80146e0:	4203      	tst	r3, r0
 80146e2:	d000      	beq.n	80146e6 <_malloc_r+0x1b2>
 80146e4:	e0b3      	b.n	801484e <_malloc_r+0x31a>
 80146e6:	684b      	ldr	r3, [r1, #4]
 80146e8:	4393      	bics	r3, r2
 80146ea:	604b      	str	r3, [r1, #4]
 80146ec:	4b62      	ldr	r3, [pc, #392]	; (8014878 <_malloc_r+0x344>)
 80146ee:	0052      	lsls	r2, r2, #1
 80146f0:	685b      	ldr	r3, [r3, #4]
 80146f2:	4293      	cmp	r3, r2
 80146f4:	d302      	bcc.n	80146fc <_malloc_r+0x1c8>
 80146f6:	2a00      	cmp	r2, #0
 80146f8:	d000      	beq.n	80146fc <_malloc_r+0x1c8>
 80146fa:	e0b9      	b.n	8014870 <_malloc_r+0x33c>
 80146fc:	2303      	movs	r3, #3
 80146fe:	688f      	ldr	r7, [r1, #8]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	439a      	bics	r2, r3
 8014704:	9202      	str	r2, [sp, #8]
 8014706:	42aa      	cmp	r2, r5
 8014708:	d303      	bcc.n	8014712 <_malloc_r+0x1de>
 801470a:	1b52      	subs	r2, r2, r5
 801470c:	2a0f      	cmp	r2, #15
 801470e:	dd00      	ble.n	8014712 <_malloc_r+0x1de>
 8014710:	e116      	b.n	8014940 <_malloc_r+0x40c>
 8014712:	4b5d      	ldr	r3, [pc, #372]	; (8014888 <_malloc_r+0x354>)
 8014714:	2008      	movs	r0, #8
 8014716:	681e      	ldr	r6, [r3, #0]
 8014718:	f002 fd58 	bl	80171cc <sysconf>
 801471c:	4b5b      	ldr	r3, [pc, #364]	; (801488c <_malloc_r+0x358>)
 801471e:	3610      	adds	r6, #16
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	1976      	adds	r6, r6, r5
 8014724:	9003      	str	r0, [sp, #12]
 8014726:	3301      	adds	r3, #1
 8014728:	d003      	beq.n	8014732 <_malloc_r+0x1fe>
 801472a:	3e01      	subs	r6, #1
 801472c:	1836      	adds	r6, r6, r0
 801472e:	4243      	negs	r3, r0
 8014730:	401e      	ands	r6, r3
 8014732:	0031      	movs	r1, r6
 8014734:	9801      	ldr	r0, [sp, #4]
 8014736:	f000 fb27 	bl	8014d88 <_sbrk_r>
 801473a:	0004      	movs	r4, r0
 801473c:	1c43      	adds	r3, r0, #1
 801473e:	d100      	bne.n	8014742 <_malloc_r+0x20e>
 8014740:	e0d6      	b.n	80148f0 <_malloc_r+0x3bc>
 8014742:	9b02      	ldr	r3, [sp, #8]
 8014744:	18fb      	adds	r3, r7, r3
 8014746:	4283      	cmp	r3, r0
 8014748:	d903      	bls.n	8014752 <_malloc_r+0x21e>
 801474a:	4a4b      	ldr	r2, [pc, #300]	; (8014878 <_malloc_r+0x344>)
 801474c:	4297      	cmp	r7, r2
 801474e:	d000      	beq.n	8014752 <_malloc_r+0x21e>
 8014750:	e0ce      	b.n	80148f0 <_malloc_r+0x3bc>
 8014752:	494f      	ldr	r1, [pc, #316]	; (8014890 <_malloc_r+0x35c>)
 8014754:	680a      	ldr	r2, [r1, #0]
 8014756:	18b2      	adds	r2, r6, r2
 8014758:	600a      	str	r2, [r1, #0]
 801475a:	9903      	ldr	r1, [sp, #12]
 801475c:	4694      	mov	ip, r2
 801475e:	1e48      	subs	r0, r1, #1
 8014760:	42a3      	cmp	r3, r4
 8014762:	d000      	beq.n	8014766 <_malloc_r+0x232>
 8014764:	e09a      	b.n	801489c <_malloc_r+0x368>
 8014766:	4203      	tst	r3, r0
 8014768:	d000      	beq.n	801476c <_malloc_r+0x238>
 801476a:	e097      	b.n	801489c <_malloc_r+0x368>
 801476c:	9a02      	ldr	r2, [sp, #8]
 801476e:	4b42      	ldr	r3, [pc, #264]	; (8014878 <_malloc_r+0x344>)
 8014770:	1992      	adds	r2, r2, r6
 8014772:	2601      	movs	r6, #1
 8014774:	689b      	ldr	r3, [r3, #8]
 8014776:	4316      	orrs	r6, r2
 8014778:	605e      	str	r6, [r3, #4]
 801477a:	4b45      	ldr	r3, [pc, #276]	; (8014890 <_malloc_r+0x35c>)
 801477c:	4a45      	ldr	r2, [pc, #276]	; (8014894 <_malloc_r+0x360>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	6811      	ldr	r1, [r2, #0]
 8014782:	428b      	cmp	r3, r1
 8014784:	d900      	bls.n	8014788 <_malloc_r+0x254>
 8014786:	6013      	str	r3, [r2, #0]
 8014788:	4a43      	ldr	r2, [pc, #268]	; (8014898 <_malloc_r+0x364>)
 801478a:	6811      	ldr	r1, [r2, #0]
 801478c:	428b      	cmp	r3, r1
 801478e:	d800      	bhi.n	8014792 <_malloc_r+0x25e>
 8014790:	e0ae      	b.n	80148f0 <_malloc_r+0x3bc>
 8014792:	6013      	str	r3, [r2, #0]
 8014794:	e0ac      	b.n	80148f0 <_malloc_r+0x3bc>
 8014796:	0a40      	lsrs	r0, r0, #9
 8014798:	2804      	cmp	r0, #4
 801479a:	d810      	bhi.n	80147be <_malloc_r+0x28a>
 801479c:	0999      	lsrs	r1, r3, #6
 801479e:	3138      	adds	r1, #56	; 0x38
 80147a0:	00ce      	lsls	r6, r1, #3
 80147a2:	18b6      	adds	r6, r6, r2
 80147a4:	68b0      	ldr	r0, [r6, #8]
 80147a6:	4286      	cmp	r6, r0
 80147a8:	d124      	bne.n	80147f4 <_malloc_r+0x2c0>
 80147aa:	2301      	movs	r3, #1
 80147ac:	1089      	asrs	r1, r1, #2
 80147ae:	408b      	lsls	r3, r1
 80147b0:	433b      	orrs	r3, r7
 80147b2:	6053      	str	r3, [r2, #4]
 80147b4:	60e6      	str	r6, [r4, #12]
 80147b6:	60a0      	str	r0, [r4, #8]
 80147b8:	60b4      	str	r4, [r6, #8]
 80147ba:	60c4      	str	r4, [r0, #12]
 80147bc:	e768      	b.n	8014690 <_malloc_r+0x15c>
 80147be:	2814      	cmp	r0, #20
 80147c0:	d802      	bhi.n	80147c8 <_malloc_r+0x294>
 80147c2:	0001      	movs	r1, r0
 80147c4:	315b      	adds	r1, #91	; 0x5b
 80147c6:	e7eb      	b.n	80147a0 <_malloc_r+0x26c>
 80147c8:	2854      	cmp	r0, #84	; 0x54
 80147ca:	d802      	bhi.n	80147d2 <_malloc_r+0x29e>
 80147cc:	0b19      	lsrs	r1, r3, #12
 80147ce:	316e      	adds	r1, #110	; 0x6e
 80147d0:	e7e6      	b.n	80147a0 <_malloc_r+0x26c>
 80147d2:	21aa      	movs	r1, #170	; 0xaa
 80147d4:	0049      	lsls	r1, r1, #1
 80147d6:	4288      	cmp	r0, r1
 80147d8:	d802      	bhi.n	80147e0 <_malloc_r+0x2ac>
 80147da:	0bd9      	lsrs	r1, r3, #15
 80147dc:	3177      	adds	r1, #119	; 0x77
 80147de:	e7df      	b.n	80147a0 <_malloc_r+0x26c>
 80147e0:	4e27      	ldr	r6, [pc, #156]	; (8014880 <_malloc_r+0x34c>)
 80147e2:	217e      	movs	r1, #126	; 0x7e
 80147e4:	42b0      	cmp	r0, r6
 80147e6:	d8db      	bhi.n	80147a0 <_malloc_r+0x26c>
 80147e8:	0c99      	lsrs	r1, r3, #18
 80147ea:	317c      	adds	r1, #124	; 0x7c
 80147ec:	e7d8      	b.n	80147a0 <_malloc_r+0x26c>
 80147ee:	6880      	ldr	r0, [r0, #8]
 80147f0:	4286      	cmp	r6, r0
 80147f2:	d004      	beq.n	80147fe <_malloc_r+0x2ca>
 80147f4:	2103      	movs	r1, #3
 80147f6:	6842      	ldr	r2, [r0, #4]
 80147f8:	438a      	bics	r2, r1
 80147fa:	429a      	cmp	r2, r3
 80147fc:	d8f7      	bhi.n	80147ee <_malloc_r+0x2ba>
 80147fe:	68c6      	ldr	r6, [r0, #12]
 8014800:	e7d8      	b.n	80147b4 <_malloc_r+0x280>
 8014802:	2304      	movs	r3, #4
 8014804:	449c      	add	ip, r3
 8014806:	e753      	b.n	80146b0 <_malloc_r+0x17c>
 8014808:	2003      	movs	r0, #3
 801480a:	6863      	ldr	r3, [r4, #4]
 801480c:	4383      	bics	r3, r0
 801480e:	1b5e      	subs	r6, r3, r5
 8014810:	68e0      	ldr	r0, [r4, #12]
 8014812:	2e0f      	cmp	r6, #15
 8014814:	dd0e      	ble.n	8014834 <_malloc_r+0x300>
 8014816:	2701      	movs	r7, #1
 8014818:	1962      	adds	r2, r4, r5
 801481a:	433d      	orrs	r5, r7
 801481c:	6065      	str	r5, [r4, #4]
 801481e:	68a5      	ldr	r5, [r4, #8]
 8014820:	4337      	orrs	r7, r6
 8014822:	60e8      	str	r0, [r5, #12]
 8014824:	6085      	str	r5, [r0, #8]
 8014826:	614a      	str	r2, [r1, #20]
 8014828:	610a      	str	r2, [r1, #16]
 801482a:	4914      	ldr	r1, [pc, #80]	; (801487c <_malloc_r+0x348>)
 801482c:	6057      	str	r7, [r2, #4]
 801482e:	60d1      	str	r1, [r2, #12]
 8014830:	6091      	str	r1, [r2, #8]
 8014832:	e6e8      	b.n	8014606 <_malloc_r+0xd2>
 8014834:	2e00      	cmp	r6, #0
 8014836:	db08      	blt.n	801484a <_malloc_r+0x316>
 8014838:	2201      	movs	r2, #1
 801483a:	18e3      	adds	r3, r4, r3
 801483c:	6859      	ldr	r1, [r3, #4]
 801483e:	430a      	orrs	r2, r1
 8014840:	605a      	str	r2, [r3, #4]
 8014842:	68a3      	ldr	r3, [r4, #8]
 8014844:	60d8      	str	r0, [r3, #12]
 8014846:	6083      	str	r3, [r0, #8]
 8014848:	e6aa      	b.n	80145a0 <_malloc_r+0x6c>
 801484a:	0004      	movs	r4, r0
 801484c:	e73c      	b.n	80146c8 <_malloc_r+0x194>
 801484e:	2301      	movs	r3, #1
 8014850:	425b      	negs	r3, r3
 8014852:	449c      	add	ip, r3
 8014854:	9b03      	ldr	r3, [sp, #12]
 8014856:	6818      	ldr	r0, [r3, #0]
 8014858:	3b08      	subs	r3, #8
 801485a:	9003      	str	r0, [sp, #12]
 801485c:	4298      	cmp	r0, r3
 801485e:	d100      	bne.n	8014862 <_malloc_r+0x32e>
 8014860:	e73c      	b.n	80146dc <_malloc_r+0x1a8>
 8014862:	e743      	b.n	80146ec <_malloc_r+0x1b8>
 8014864:	2004      	movs	r0, #4
 8014866:	0052      	lsls	r2, r2, #1
 8014868:	4484      	add	ip, r0
 801486a:	421a      	tst	r2, r3
 801486c:	d0fa      	beq.n	8014864 <_malloc_r+0x330>
 801486e:	e723      	b.n	80146b8 <_malloc_r+0x184>
 8014870:	9802      	ldr	r0, [sp, #8]
 8014872:	4684      	mov	ip, r0
 8014874:	e7f9      	b.n	801486a <_malloc_r+0x336>
 8014876:	46c0      	nop			; (mov r8, r8)
 8014878:	200006b4 	.word	0x200006b4
 801487c:	200006bc 	.word	0x200006bc
 8014880:	00000554 	.word	0x00000554
 8014884:	000001ff 	.word	0x000001ff
 8014888:	20006dc8 	.word	0x20006dc8
 801488c:	20000abc 	.word	0x20000abc
 8014890:	20006d98 	.word	0x20006d98
 8014894:	20006dc0 	.word	0x20006dc0
 8014898:	20006dc4 	.word	0x20006dc4
 801489c:	492e      	ldr	r1, [pc, #184]	; (8014958 <_malloc_r+0x424>)
 801489e:	680a      	ldr	r2, [r1, #0]
 80148a0:	3201      	adds	r2, #1
 80148a2:	d133      	bne.n	801490c <_malloc_r+0x3d8>
 80148a4:	600c      	str	r4, [r1, #0]
 80148a6:	2307      	movs	r3, #7
 80148a8:	4023      	ands	r3, r4
 80148aa:	d002      	beq.n	80148b2 <_malloc_r+0x37e>
 80148ac:	2208      	movs	r2, #8
 80148ae:	1ad3      	subs	r3, r2, r3
 80148b0:	18e4      	adds	r4, r4, r3
 80148b2:	9a03      	ldr	r2, [sp, #12]
 80148b4:	19a6      	adds	r6, r4, r6
 80148b6:	18d3      	adds	r3, r2, r3
 80148b8:	4006      	ands	r6, r0
 80148ba:	1b9e      	subs	r6, r3, r6
 80148bc:	0031      	movs	r1, r6
 80148be:	9801      	ldr	r0, [sp, #4]
 80148c0:	f000 fa62 	bl	8014d88 <_sbrk_r>
 80148c4:	1c43      	adds	r3, r0, #1
 80148c6:	d101      	bne.n	80148cc <_malloc_r+0x398>
 80148c8:	0020      	movs	r0, r4
 80148ca:	2600      	movs	r6, #0
 80148cc:	4a23      	ldr	r2, [pc, #140]	; (801495c <_malloc_r+0x428>)
 80148ce:	1b00      	subs	r0, r0, r4
 80148d0:	6813      	ldr	r3, [r2, #0]
 80148d2:	199b      	adds	r3, r3, r6
 80148d4:	6013      	str	r3, [r2, #0]
 80148d6:	2301      	movs	r3, #1
 80148d8:	4a21      	ldr	r2, [pc, #132]	; (8014960 <_malloc_r+0x42c>)
 80148da:	1986      	adds	r6, r0, r6
 80148dc:	431e      	orrs	r6, r3
 80148de:	6094      	str	r4, [r2, #8]
 80148e0:	6066      	str	r6, [r4, #4]
 80148e2:	4297      	cmp	r7, r2
 80148e4:	d100      	bne.n	80148e8 <_malloc_r+0x3b4>
 80148e6:	e748      	b.n	801477a <_malloc_r+0x246>
 80148e8:	9a02      	ldr	r2, [sp, #8]
 80148ea:	2a0f      	cmp	r2, #15
 80148ec:	d813      	bhi.n	8014916 <_malloc_r+0x3e2>
 80148ee:	6063      	str	r3, [r4, #4]
 80148f0:	2203      	movs	r2, #3
 80148f2:	4b1b      	ldr	r3, [pc, #108]	; (8014960 <_malloc_r+0x42c>)
 80148f4:	689b      	ldr	r3, [r3, #8]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	4393      	bics	r3, r2
 80148fa:	1b5a      	subs	r2, r3, r5
 80148fc:	42ab      	cmp	r3, r5
 80148fe:	d301      	bcc.n	8014904 <_malloc_r+0x3d0>
 8014900:	2a0f      	cmp	r2, #15
 8014902:	dc1d      	bgt.n	8014940 <_malloc_r+0x40c>
 8014904:	9801      	ldr	r0, [sp, #4]
 8014906:	f000 f867 	bl	80149d8 <__malloc_unlock>
 801490a:	e620      	b.n	801454e <_malloc_r+0x1a>
 801490c:	1ae3      	subs	r3, r4, r3
 801490e:	4a13      	ldr	r2, [pc, #76]	; (801495c <_malloc_r+0x428>)
 8014910:	4463      	add	r3, ip
 8014912:	6013      	str	r3, [r2, #0]
 8014914:	e7c7      	b.n	80148a6 <_malloc_r+0x372>
 8014916:	2207      	movs	r2, #7
 8014918:	9e02      	ldr	r6, [sp, #8]
 801491a:	3e0c      	subs	r6, #12
 801491c:	4396      	bics	r6, r2
 801491e:	687a      	ldr	r2, [r7, #4]
 8014920:	4013      	ands	r3, r2
 8014922:	2205      	movs	r2, #5
 8014924:	4333      	orrs	r3, r6
 8014926:	607b      	str	r3, [r7, #4]
 8014928:	19bb      	adds	r3, r7, r6
 801492a:	605a      	str	r2, [r3, #4]
 801492c:	609a      	str	r2, [r3, #8]
 801492e:	2e0f      	cmp	r6, #15
 8014930:	d800      	bhi.n	8014934 <_malloc_r+0x400>
 8014932:	e722      	b.n	801477a <_malloc_r+0x246>
 8014934:	0039      	movs	r1, r7
 8014936:	9801      	ldr	r0, [sp, #4]
 8014938:	3108      	adds	r1, #8
 801493a:	f003 fb39 	bl	8017fb0 <_free_r>
 801493e:	e71c      	b.n	801477a <_malloc_r+0x246>
 8014940:	2301      	movs	r3, #1
 8014942:	0018      	movs	r0, r3
 8014944:	4906      	ldr	r1, [pc, #24]	; (8014960 <_malloc_r+0x42c>)
 8014946:	4328      	orrs	r0, r5
 8014948:	688c      	ldr	r4, [r1, #8]
 801494a:	4313      	orrs	r3, r2
 801494c:	1965      	adds	r5, r4, r5
 801494e:	6060      	str	r0, [r4, #4]
 8014950:	608d      	str	r5, [r1, #8]
 8014952:	606b      	str	r3, [r5, #4]
 8014954:	e624      	b.n	80145a0 <_malloc_r+0x6c>
 8014956:	46c0      	nop			; (mov r8, r8)
 8014958:	20000abc 	.word	0x20000abc
 801495c:	20006d98 	.word	0x20006d98
 8014960:	200006b4 	.word	0x200006b4

08014964 <__ascii_mbtowc>:
 8014964:	b082      	sub	sp, #8
 8014966:	2900      	cmp	r1, #0
 8014968:	d100      	bne.n	801496c <__ascii_mbtowc+0x8>
 801496a:	a901      	add	r1, sp, #4
 801496c:	1e10      	subs	r0, r2, #0
 801496e:	d006      	beq.n	801497e <__ascii_mbtowc+0x1a>
 8014970:	2b00      	cmp	r3, #0
 8014972:	d006      	beq.n	8014982 <__ascii_mbtowc+0x1e>
 8014974:	7813      	ldrb	r3, [r2, #0]
 8014976:	600b      	str	r3, [r1, #0]
 8014978:	7810      	ldrb	r0, [r2, #0]
 801497a:	1e43      	subs	r3, r0, #1
 801497c:	4198      	sbcs	r0, r3
 801497e:	b002      	add	sp, #8
 8014980:	4770      	bx	lr
 8014982:	2002      	movs	r0, #2
 8014984:	4240      	negs	r0, r0
 8014986:	e7fa      	b.n	801497e <__ascii_mbtowc+0x1a>

08014988 <memcmp>:
 8014988:	b530      	push	{r4, r5, lr}
 801498a:	2400      	movs	r4, #0
 801498c:	42a2      	cmp	r2, r4
 801498e:	d101      	bne.n	8014994 <memcmp+0xc>
 8014990:	2000      	movs	r0, #0
 8014992:	e005      	b.n	80149a0 <memcmp+0x18>
 8014994:	5d03      	ldrb	r3, [r0, r4]
 8014996:	1c65      	adds	r5, r4, #1
 8014998:	5d0c      	ldrb	r4, [r1, r4]
 801499a:	42a3      	cmp	r3, r4
 801499c:	d001      	beq.n	80149a2 <memcmp+0x1a>
 801499e:	1b18      	subs	r0, r3, r4
 80149a0:	bd30      	pop	{r4, r5, pc}
 80149a2:	002c      	movs	r4, r5
 80149a4:	e7f2      	b.n	801498c <memcmp+0x4>

080149a6 <memcpy>:
 80149a6:	2300      	movs	r3, #0
 80149a8:	b510      	push	{r4, lr}
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d100      	bne.n	80149b0 <memcpy+0xa>
 80149ae:	bd10      	pop	{r4, pc}
 80149b0:	5ccc      	ldrb	r4, [r1, r3]
 80149b2:	54c4      	strb	r4, [r0, r3]
 80149b4:	3301      	adds	r3, #1
 80149b6:	e7f8      	b.n	80149aa <memcpy+0x4>

080149b8 <memset>:
 80149b8:	0003      	movs	r3, r0
 80149ba:	1812      	adds	r2, r2, r0
 80149bc:	4293      	cmp	r3, r2
 80149be:	d100      	bne.n	80149c2 <memset+0xa>
 80149c0:	4770      	bx	lr
 80149c2:	7019      	strb	r1, [r3, #0]
 80149c4:	3301      	adds	r3, #1
 80149c6:	e7f9      	b.n	80149bc <memset+0x4>

080149c8 <__malloc_lock>:
 80149c8:	b510      	push	{r4, lr}
 80149ca:	4802      	ldr	r0, [pc, #8]	; (80149d4 <__malloc_lock+0xc>)
 80149cc:	f003 fee4 	bl	8018798 <__retarget_lock_acquire_recursive>
 80149d0:	bd10      	pop	{r4, pc}
 80149d2:	46c0      	nop			; (mov r8, r8)
 80149d4:	200073f4 	.word	0x200073f4

080149d8 <__malloc_unlock>:
 80149d8:	b510      	push	{r4, lr}
 80149da:	4802      	ldr	r0, [pc, #8]	; (80149e4 <__malloc_unlock+0xc>)
 80149dc:	f003 fedd 	bl	801879a <__retarget_lock_release_recursive>
 80149e0:	bd10      	pop	{r4, pc}
 80149e2:	46c0      	nop			; (mov r8, r8)
 80149e4:	200073f4 	.word	0x200073f4

080149e8 <rand>:
 80149e8:	4b09      	ldr	r3, [pc, #36]	; (8014a10 <rand+0x28>)
 80149ea:	b510      	push	{r4, lr}
 80149ec:	681c      	ldr	r4, [r3, #0]
 80149ee:	4a09      	ldr	r2, [pc, #36]	; (8014a14 <rand+0x2c>)
 80149f0:	34a8      	adds	r4, #168	; 0xa8
 80149f2:	6820      	ldr	r0, [r4, #0]
 80149f4:	6861      	ldr	r1, [r4, #4]
 80149f6:	4b08      	ldr	r3, [pc, #32]	; (8014a18 <rand+0x30>)
 80149f8:	f7eb fdb8 	bl	800056c <__aeabi_lmul>
 80149fc:	2201      	movs	r2, #1
 80149fe:	2300      	movs	r3, #0
 8014a00:	1880      	adds	r0, r0, r2
 8014a02:	4159      	adcs	r1, r3
 8014a04:	6020      	str	r0, [r4, #0]
 8014a06:	6061      	str	r1, [r4, #4]
 8014a08:	0048      	lsls	r0, r1, #1
 8014a0a:	0840      	lsrs	r0, r0, #1
 8014a0c:	bd10      	pop	{r4, pc}
 8014a0e:	46c0      	nop			; (mov r8, r8)
 8014a10:	20000118 	.word	0x20000118
 8014a14:	4c957f2d 	.word	0x4c957f2d
 8014a18:	5851f42d 	.word	0x5851f42d

08014a1c <realloc>:
 8014a1c:	b510      	push	{r4, lr}
 8014a1e:	4b03      	ldr	r3, [pc, #12]	; (8014a2c <realloc+0x10>)
 8014a20:	000a      	movs	r2, r1
 8014a22:	0001      	movs	r1, r0
 8014a24:	6818      	ldr	r0, [r3, #0]
 8014a26:	f000 f803 	bl	8014a30 <_realloc_r>
 8014a2a:	bd10      	pop	{r4, pc}
 8014a2c:	20000118 	.word	0x20000118

08014a30 <_realloc_r>:
 8014a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014a32:	b087      	sub	sp, #28
 8014a34:	9003      	str	r0, [sp, #12]
 8014a36:	1e0c      	subs	r4, r1, #0
 8014a38:	9205      	str	r2, [sp, #20]
 8014a3a:	d106      	bne.n	8014a4a <_realloc_r+0x1a>
 8014a3c:	0011      	movs	r1, r2
 8014a3e:	f7ff fd79 	bl	8014534 <_malloc_r>
 8014a42:	0007      	movs	r7, r0
 8014a44:	0038      	movs	r0, r7
 8014a46:	b007      	add	sp, #28
 8014a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a4a:	9803      	ldr	r0, [sp, #12]
 8014a4c:	f7ff ffbc 	bl	80149c8 <__malloc_lock>
 8014a50:	0023      	movs	r3, r4
 8014a52:	3b08      	subs	r3, #8
 8014a54:	685f      	ldr	r7, [r3, #4]
 8014a56:	9302      	str	r3, [sp, #8]
 8014a58:	003a      	movs	r2, r7
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	9e05      	ldr	r6, [sp, #20]
 8014a5e:	439a      	bics	r2, r3
 8014a60:	360b      	adds	r6, #11
 8014a62:	9204      	str	r2, [sp, #16]
 8014a64:	2e16      	cmp	r6, #22
 8014a66:	d908      	bls.n	8014a7a <_realloc_r+0x4a>
 8014a68:	3304      	adds	r3, #4
 8014a6a:	439e      	bics	r6, r3
 8014a6c:	9601      	str	r6, [sp, #4]
 8014a6e:	d506      	bpl.n	8014a7e <_realloc_r+0x4e>
 8014a70:	230c      	movs	r3, #12
 8014a72:	9a03      	ldr	r2, [sp, #12]
 8014a74:	2700      	movs	r7, #0
 8014a76:	6013      	str	r3, [r2, #0]
 8014a78:	e7e4      	b.n	8014a44 <_realloc_r+0x14>
 8014a7a:	2310      	movs	r3, #16
 8014a7c:	9301      	str	r3, [sp, #4]
 8014a7e:	9b01      	ldr	r3, [sp, #4]
 8014a80:	9a05      	ldr	r2, [sp, #20]
 8014a82:	4293      	cmp	r3, r2
 8014a84:	d3f4      	bcc.n	8014a70 <_realloc_r+0x40>
 8014a86:	9b01      	ldr	r3, [sp, #4]
 8014a88:	9a04      	ldr	r2, [sp, #16]
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	dc00      	bgt.n	8014a90 <_realloc_r+0x60>
 8014a8e:	e16f      	b.n	8014d70 <_realloc_r+0x340>
 8014a90:	9b02      	ldr	r3, [sp, #8]
 8014a92:	48bc      	ldr	r0, [pc, #752]	; (8014d84 <_realloc_r+0x354>)
 8014a94:	189b      	adds	r3, r3, r2
 8014a96:	6882      	ldr	r2, [r0, #8]
 8014a98:	4694      	mov	ip, r2
 8014a9a:	685a      	ldr	r2, [r3, #4]
 8014a9c:	459c      	cmp	ip, r3
 8014a9e:	d006      	beq.n	8014aae <_realloc_r+0x7e>
 8014aa0:	2501      	movs	r5, #1
 8014aa2:	0011      	movs	r1, r2
 8014aa4:	43a9      	bics	r1, r5
 8014aa6:	1859      	adds	r1, r3, r1
 8014aa8:	6849      	ldr	r1, [r1, #4]
 8014aaa:	4229      	tst	r1, r5
 8014aac:	d146      	bne.n	8014b3c <_realloc_r+0x10c>
 8014aae:	2103      	movs	r1, #3
 8014ab0:	438a      	bics	r2, r1
 8014ab2:	9904      	ldr	r1, [sp, #16]
 8014ab4:	188e      	adds	r6, r1, r2
 8014ab6:	9901      	ldr	r1, [sp, #4]
 8014ab8:	459c      	cmp	ip, r3
 8014aba:	d117      	bne.n	8014aec <_realloc_r+0xbc>
 8014abc:	3110      	adds	r1, #16
 8014abe:	42b1      	cmp	r1, r6
 8014ac0:	dc3e      	bgt.n	8014b40 <_realloc_r+0x110>
 8014ac2:	9901      	ldr	r1, [sp, #4]
 8014ac4:	9b02      	ldr	r3, [sp, #8]
 8014ac6:	468c      	mov	ip, r1
 8014ac8:	4463      	add	r3, ip
 8014aca:	6083      	str	r3, [r0, #8]
 8014acc:	001a      	movs	r2, r3
 8014ace:	1a73      	subs	r3, r6, r1
 8014ad0:	2601      	movs	r6, #1
 8014ad2:	4333      	orrs	r3, r6
 8014ad4:	6053      	str	r3, [r2, #4]
 8014ad6:	0023      	movs	r3, r4
 8014ad8:	3b08      	subs	r3, #8
 8014ada:	685a      	ldr	r2, [r3, #4]
 8014adc:	9803      	ldr	r0, [sp, #12]
 8014ade:	4016      	ands	r6, r2
 8014ae0:	430e      	orrs	r6, r1
 8014ae2:	605e      	str	r6, [r3, #4]
 8014ae4:	f7ff ff78 	bl	80149d8 <__malloc_unlock>
 8014ae8:	0027      	movs	r7, r4
 8014aea:	e7ab      	b.n	8014a44 <_realloc_r+0x14>
 8014aec:	42b1      	cmp	r1, r6
 8014aee:	dc27      	bgt.n	8014b40 <_realloc_r+0x110>
 8014af0:	68da      	ldr	r2, [r3, #12]
 8014af2:	689b      	ldr	r3, [r3, #8]
 8014af4:	60da      	str	r2, [r3, #12]
 8014af6:	6093      	str	r3, [r2, #8]
 8014af8:	9b01      	ldr	r3, [sp, #4]
 8014afa:	9a02      	ldr	r2, [sp, #8]
 8014afc:	1af4      	subs	r4, r6, r3
 8014afe:	9b02      	ldr	r3, [sp, #8]
 8014b00:	1992      	adds	r2, r2, r6
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	9304      	str	r3, [sp, #16]
 8014b06:	2301      	movs	r3, #1
 8014b08:	9804      	ldr	r0, [sp, #16]
 8014b0a:	4018      	ands	r0, r3
 8014b0c:	2c0f      	cmp	r4, #15
 8014b0e:	d800      	bhi.n	8014b12 <_realloc_r+0xe2>
 8014b10:	e130      	b.n	8014d74 <_realloc_r+0x344>
 8014b12:	9d01      	ldr	r5, [sp, #4]
 8014b14:	9902      	ldr	r1, [sp, #8]
 8014b16:	4328      	orrs	r0, r5
 8014b18:	1949      	adds	r1, r1, r5
 8014b1a:	9d02      	ldr	r5, [sp, #8]
 8014b1c:	431c      	orrs	r4, r3
 8014b1e:	6068      	str	r0, [r5, #4]
 8014b20:	604c      	str	r4, [r1, #4]
 8014b22:	6850      	ldr	r0, [r2, #4]
 8014b24:	3108      	adds	r1, #8
 8014b26:	4303      	orrs	r3, r0
 8014b28:	6053      	str	r3, [r2, #4]
 8014b2a:	9803      	ldr	r0, [sp, #12]
 8014b2c:	f003 fa40 	bl	8017fb0 <_free_r>
 8014b30:	9803      	ldr	r0, [sp, #12]
 8014b32:	f7ff ff51 	bl	80149d8 <__malloc_unlock>
 8014b36:	9f02      	ldr	r7, [sp, #8]
 8014b38:	3708      	adds	r7, #8
 8014b3a:	e783      	b.n	8014a44 <_realloc_r+0x14>
 8014b3c:	2200      	movs	r2, #0
 8014b3e:	0013      	movs	r3, r2
 8014b40:	07f9      	lsls	r1, r7, #31
 8014b42:	d500      	bpl.n	8014b46 <_realloc_r+0x116>
 8014b44:	e0c6      	b.n	8014cd4 <_realloc_r+0x2a4>
 8014b46:	0021      	movs	r1, r4
 8014b48:	3908      	subs	r1, #8
 8014b4a:	680d      	ldr	r5, [r1, #0]
 8014b4c:	9902      	ldr	r1, [sp, #8]
 8014b4e:	1b4d      	subs	r5, r1, r5
 8014b50:	2103      	movs	r1, #3
 8014b52:	686f      	ldr	r7, [r5, #4]
 8014b54:	438f      	bics	r7, r1
 8014b56:	9904      	ldr	r1, [sp, #16]
 8014b58:	187f      	adds	r7, r7, r1
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d100      	bne.n	8014b60 <_realloc_r+0x130>
 8014b5e:	e084      	b.n	8014c6a <_realloc_r+0x23a>
 8014b60:	19d6      	adds	r6, r2, r7
 8014b62:	459c      	cmp	ip, r3
 8014b64:	d148      	bne.n	8014bf8 <_realloc_r+0x1c8>
 8014b66:	9b01      	ldr	r3, [sp, #4]
 8014b68:	3310      	adds	r3, #16
 8014b6a:	42b3      	cmp	r3, r6
 8014b6c:	dc7d      	bgt.n	8014c6a <_realloc_r+0x23a>
 8014b6e:	68aa      	ldr	r2, [r5, #8]
 8014b70:	68eb      	ldr	r3, [r5, #12]
 8014b72:	002f      	movs	r7, r5
 8014b74:	60d3      	str	r3, [r2, #12]
 8014b76:	609a      	str	r2, [r3, #8]
 8014b78:	000a      	movs	r2, r1
 8014b7a:	3a04      	subs	r2, #4
 8014b7c:	3708      	adds	r7, #8
 8014b7e:	2a24      	cmp	r2, #36	; 0x24
 8014b80:	d835      	bhi.n	8014bee <_realloc_r+0x1be>
 8014b82:	003b      	movs	r3, r7
 8014b84:	2a13      	cmp	r2, #19
 8014b86:	d908      	bls.n	8014b9a <_realloc_r+0x16a>
 8014b88:	6823      	ldr	r3, [r4, #0]
 8014b8a:	60ab      	str	r3, [r5, #8]
 8014b8c:	6863      	ldr	r3, [r4, #4]
 8014b8e:	60eb      	str	r3, [r5, #12]
 8014b90:	2a1b      	cmp	r2, #27
 8014b92:	d81a      	bhi.n	8014bca <_realloc_r+0x19a>
 8014b94:	002b      	movs	r3, r5
 8014b96:	3408      	adds	r4, #8
 8014b98:	3310      	adds	r3, #16
 8014b9a:	6822      	ldr	r2, [r4, #0]
 8014b9c:	601a      	str	r2, [r3, #0]
 8014b9e:	6862      	ldr	r2, [r4, #4]
 8014ba0:	605a      	str	r2, [r3, #4]
 8014ba2:	68a2      	ldr	r2, [r4, #8]
 8014ba4:	609a      	str	r2, [r3, #8]
 8014ba6:	9b01      	ldr	r3, [sp, #4]
 8014ba8:	18ea      	adds	r2, r5, r3
 8014baa:	4b76      	ldr	r3, [pc, #472]	; (8014d84 <_realloc_r+0x354>)
 8014bac:	609a      	str	r2, [r3, #8]
 8014bae:	9b01      	ldr	r3, [sp, #4]
 8014bb0:	1af3      	subs	r3, r6, r3
 8014bb2:	2601      	movs	r6, #1
 8014bb4:	4333      	orrs	r3, r6
 8014bb6:	6053      	str	r3, [r2, #4]
 8014bb8:	686b      	ldr	r3, [r5, #4]
 8014bba:	401e      	ands	r6, r3
 8014bbc:	9b01      	ldr	r3, [sp, #4]
 8014bbe:	431e      	orrs	r6, r3
 8014bc0:	606e      	str	r6, [r5, #4]
 8014bc2:	9803      	ldr	r0, [sp, #12]
 8014bc4:	f7ff ff08 	bl	80149d8 <__malloc_unlock>
 8014bc8:	e73c      	b.n	8014a44 <_realloc_r+0x14>
 8014bca:	68a3      	ldr	r3, [r4, #8]
 8014bcc:	612b      	str	r3, [r5, #16]
 8014bce:	68e3      	ldr	r3, [r4, #12]
 8014bd0:	616b      	str	r3, [r5, #20]
 8014bd2:	2a24      	cmp	r2, #36	; 0x24
 8014bd4:	d003      	beq.n	8014bde <_realloc_r+0x1ae>
 8014bd6:	002b      	movs	r3, r5
 8014bd8:	3410      	adds	r4, #16
 8014bda:	3318      	adds	r3, #24
 8014bdc:	e7dd      	b.n	8014b9a <_realloc_r+0x16a>
 8014bde:	6923      	ldr	r3, [r4, #16]
 8014be0:	61ab      	str	r3, [r5, #24]
 8014be2:	002b      	movs	r3, r5
 8014be4:	6962      	ldr	r2, [r4, #20]
 8014be6:	3320      	adds	r3, #32
 8014be8:	61ea      	str	r2, [r5, #28]
 8014bea:	3418      	adds	r4, #24
 8014bec:	e7d5      	b.n	8014b9a <_realloc_r+0x16a>
 8014bee:	0021      	movs	r1, r4
 8014bf0:	0038      	movs	r0, r7
 8014bf2:	f003 fdde 	bl	80187b2 <memmove>
 8014bf6:	e7d6      	b.n	8014ba6 <_realloc_r+0x176>
 8014bf8:	9a01      	ldr	r2, [sp, #4]
 8014bfa:	42b2      	cmp	r2, r6
 8014bfc:	dc35      	bgt.n	8014c6a <_realloc_r+0x23a>
 8014bfe:	0028      	movs	r0, r5
 8014c00:	68da      	ldr	r2, [r3, #12]
 8014c02:	689b      	ldr	r3, [r3, #8]
 8014c04:	3008      	adds	r0, #8
 8014c06:	60da      	str	r2, [r3, #12]
 8014c08:	6093      	str	r3, [r2, #8]
 8014c0a:	68aa      	ldr	r2, [r5, #8]
 8014c0c:	68eb      	ldr	r3, [r5, #12]
 8014c0e:	60d3      	str	r3, [r2, #12]
 8014c10:	609a      	str	r2, [r3, #8]
 8014c12:	9a04      	ldr	r2, [sp, #16]
 8014c14:	3a04      	subs	r2, #4
 8014c16:	2a24      	cmp	r2, #36	; 0x24
 8014c18:	d823      	bhi.n	8014c62 <_realloc_r+0x232>
 8014c1a:	2a13      	cmp	r2, #19
 8014c1c:	d907      	bls.n	8014c2e <_realloc_r+0x1fe>
 8014c1e:	6823      	ldr	r3, [r4, #0]
 8014c20:	60ab      	str	r3, [r5, #8]
 8014c22:	6863      	ldr	r3, [r4, #4]
 8014c24:	60eb      	str	r3, [r5, #12]
 8014c26:	2a1b      	cmp	r2, #27
 8014c28:	d809      	bhi.n	8014c3e <_realloc_r+0x20e>
 8014c2a:	3408      	adds	r4, #8
 8014c2c:	3008      	adds	r0, #8
 8014c2e:	6823      	ldr	r3, [r4, #0]
 8014c30:	6003      	str	r3, [r0, #0]
 8014c32:	6863      	ldr	r3, [r4, #4]
 8014c34:	6043      	str	r3, [r0, #4]
 8014c36:	68a3      	ldr	r3, [r4, #8]
 8014c38:	6083      	str	r3, [r0, #8]
 8014c3a:	9502      	str	r5, [sp, #8]
 8014c3c:	e75c      	b.n	8014af8 <_realloc_r+0xc8>
 8014c3e:	68a3      	ldr	r3, [r4, #8]
 8014c40:	612b      	str	r3, [r5, #16]
 8014c42:	68e3      	ldr	r3, [r4, #12]
 8014c44:	616b      	str	r3, [r5, #20]
 8014c46:	2a24      	cmp	r2, #36	; 0x24
 8014c48:	d003      	beq.n	8014c52 <_realloc_r+0x222>
 8014c4a:	0028      	movs	r0, r5
 8014c4c:	3410      	adds	r4, #16
 8014c4e:	3018      	adds	r0, #24
 8014c50:	e7ed      	b.n	8014c2e <_realloc_r+0x1fe>
 8014c52:	0028      	movs	r0, r5
 8014c54:	6923      	ldr	r3, [r4, #16]
 8014c56:	3020      	adds	r0, #32
 8014c58:	61ab      	str	r3, [r5, #24]
 8014c5a:	6963      	ldr	r3, [r4, #20]
 8014c5c:	3418      	adds	r4, #24
 8014c5e:	61eb      	str	r3, [r5, #28]
 8014c60:	e7e5      	b.n	8014c2e <_realloc_r+0x1fe>
 8014c62:	0021      	movs	r1, r4
 8014c64:	f003 fda5 	bl	80187b2 <memmove>
 8014c68:	e7e7      	b.n	8014c3a <_realloc_r+0x20a>
 8014c6a:	9b01      	ldr	r3, [sp, #4]
 8014c6c:	42bb      	cmp	r3, r7
 8014c6e:	dc31      	bgt.n	8014cd4 <_realloc_r+0x2a4>
 8014c70:	0028      	movs	r0, r5
 8014c72:	68aa      	ldr	r2, [r5, #8]
 8014c74:	68eb      	ldr	r3, [r5, #12]
 8014c76:	3008      	adds	r0, #8
 8014c78:	60d3      	str	r3, [r2, #12]
 8014c7a:	609a      	str	r2, [r3, #8]
 8014c7c:	9a04      	ldr	r2, [sp, #16]
 8014c7e:	3a04      	subs	r2, #4
 8014c80:	2a24      	cmp	r2, #36	; 0x24
 8014c82:	d823      	bhi.n	8014ccc <_realloc_r+0x29c>
 8014c84:	2a13      	cmp	r2, #19
 8014c86:	d907      	bls.n	8014c98 <_realloc_r+0x268>
 8014c88:	6823      	ldr	r3, [r4, #0]
 8014c8a:	60ab      	str	r3, [r5, #8]
 8014c8c:	6863      	ldr	r3, [r4, #4]
 8014c8e:	60eb      	str	r3, [r5, #12]
 8014c90:	2a1b      	cmp	r2, #27
 8014c92:	d809      	bhi.n	8014ca8 <_realloc_r+0x278>
 8014c94:	3408      	adds	r4, #8
 8014c96:	3008      	adds	r0, #8
 8014c98:	6823      	ldr	r3, [r4, #0]
 8014c9a:	6003      	str	r3, [r0, #0]
 8014c9c:	6863      	ldr	r3, [r4, #4]
 8014c9e:	6043      	str	r3, [r0, #4]
 8014ca0:	68a3      	ldr	r3, [r4, #8]
 8014ca2:	6083      	str	r3, [r0, #8]
 8014ca4:	003e      	movs	r6, r7
 8014ca6:	e7c8      	b.n	8014c3a <_realloc_r+0x20a>
 8014ca8:	68a3      	ldr	r3, [r4, #8]
 8014caa:	612b      	str	r3, [r5, #16]
 8014cac:	68e3      	ldr	r3, [r4, #12]
 8014cae:	616b      	str	r3, [r5, #20]
 8014cb0:	2a24      	cmp	r2, #36	; 0x24
 8014cb2:	d003      	beq.n	8014cbc <_realloc_r+0x28c>
 8014cb4:	0028      	movs	r0, r5
 8014cb6:	3410      	adds	r4, #16
 8014cb8:	3018      	adds	r0, #24
 8014cba:	e7ed      	b.n	8014c98 <_realloc_r+0x268>
 8014cbc:	0028      	movs	r0, r5
 8014cbe:	6923      	ldr	r3, [r4, #16]
 8014cc0:	3020      	adds	r0, #32
 8014cc2:	61ab      	str	r3, [r5, #24]
 8014cc4:	6963      	ldr	r3, [r4, #20]
 8014cc6:	3418      	adds	r4, #24
 8014cc8:	61eb      	str	r3, [r5, #28]
 8014cca:	e7e5      	b.n	8014c98 <_realloc_r+0x268>
 8014ccc:	0021      	movs	r1, r4
 8014cce:	f003 fd70 	bl	80187b2 <memmove>
 8014cd2:	e7e7      	b.n	8014ca4 <_realloc_r+0x274>
 8014cd4:	9905      	ldr	r1, [sp, #20]
 8014cd6:	9803      	ldr	r0, [sp, #12]
 8014cd8:	f7ff fc2c 	bl	8014534 <_malloc_r>
 8014cdc:	1e07      	subs	r7, r0, #0
 8014cde:	d100      	bne.n	8014ce2 <_realloc_r+0x2b2>
 8014ce0:	e76f      	b.n	8014bc2 <_realloc_r+0x192>
 8014ce2:	0023      	movs	r3, r4
 8014ce4:	2201      	movs	r2, #1
 8014ce6:	3b08      	subs	r3, #8
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	4393      	bics	r3, r2
 8014cec:	9a02      	ldr	r2, [sp, #8]
 8014cee:	18d3      	adds	r3, r2, r3
 8014cf0:	0002      	movs	r2, r0
 8014cf2:	3a08      	subs	r2, #8
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	d105      	bne.n	8014d04 <_realloc_r+0x2d4>
 8014cf8:	685e      	ldr	r6, [r3, #4]
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	439e      	bics	r6, r3
 8014cfe:	9b04      	ldr	r3, [sp, #16]
 8014d00:	18f6      	adds	r6, r6, r3
 8014d02:	e6f9      	b.n	8014af8 <_realloc_r+0xc8>
 8014d04:	9a04      	ldr	r2, [sp, #16]
 8014d06:	3a04      	subs	r2, #4
 8014d08:	2a24      	cmp	r2, #36	; 0x24
 8014d0a:	d82d      	bhi.n	8014d68 <_realloc_r+0x338>
 8014d0c:	2a13      	cmp	r2, #19
 8014d0e:	d928      	bls.n	8014d62 <_realloc_r+0x332>
 8014d10:	6823      	ldr	r3, [r4, #0]
 8014d12:	6003      	str	r3, [r0, #0]
 8014d14:	6863      	ldr	r3, [r4, #4]
 8014d16:	6043      	str	r3, [r0, #4]
 8014d18:	2a1b      	cmp	r2, #27
 8014d1a:	d80e      	bhi.n	8014d3a <_realloc_r+0x30a>
 8014d1c:	0022      	movs	r2, r4
 8014d1e:	0003      	movs	r3, r0
 8014d20:	3208      	adds	r2, #8
 8014d22:	3308      	adds	r3, #8
 8014d24:	6811      	ldr	r1, [r2, #0]
 8014d26:	6019      	str	r1, [r3, #0]
 8014d28:	6851      	ldr	r1, [r2, #4]
 8014d2a:	6059      	str	r1, [r3, #4]
 8014d2c:	6892      	ldr	r2, [r2, #8]
 8014d2e:	609a      	str	r2, [r3, #8]
 8014d30:	0021      	movs	r1, r4
 8014d32:	9803      	ldr	r0, [sp, #12]
 8014d34:	f003 f93c 	bl	8017fb0 <_free_r>
 8014d38:	e743      	b.n	8014bc2 <_realloc_r+0x192>
 8014d3a:	68a3      	ldr	r3, [r4, #8]
 8014d3c:	6083      	str	r3, [r0, #8]
 8014d3e:	68e3      	ldr	r3, [r4, #12]
 8014d40:	60c3      	str	r3, [r0, #12]
 8014d42:	2a24      	cmp	r2, #36	; 0x24
 8014d44:	d004      	beq.n	8014d50 <_realloc_r+0x320>
 8014d46:	0022      	movs	r2, r4
 8014d48:	0003      	movs	r3, r0
 8014d4a:	3210      	adds	r2, #16
 8014d4c:	3310      	adds	r3, #16
 8014d4e:	e7e9      	b.n	8014d24 <_realloc_r+0x2f4>
 8014d50:	6923      	ldr	r3, [r4, #16]
 8014d52:	0022      	movs	r2, r4
 8014d54:	6103      	str	r3, [r0, #16]
 8014d56:	0003      	movs	r3, r0
 8014d58:	6961      	ldr	r1, [r4, #20]
 8014d5a:	3218      	adds	r2, #24
 8014d5c:	3318      	adds	r3, #24
 8014d5e:	6141      	str	r1, [r0, #20]
 8014d60:	e7e0      	b.n	8014d24 <_realloc_r+0x2f4>
 8014d62:	0003      	movs	r3, r0
 8014d64:	0022      	movs	r2, r4
 8014d66:	e7dd      	b.n	8014d24 <_realloc_r+0x2f4>
 8014d68:	0021      	movs	r1, r4
 8014d6a:	f003 fd22 	bl	80187b2 <memmove>
 8014d6e:	e7df      	b.n	8014d30 <_realloc_r+0x300>
 8014d70:	9e04      	ldr	r6, [sp, #16]
 8014d72:	e6c1      	b.n	8014af8 <_realloc_r+0xc8>
 8014d74:	9902      	ldr	r1, [sp, #8]
 8014d76:	4306      	orrs	r6, r0
 8014d78:	604e      	str	r6, [r1, #4]
 8014d7a:	6851      	ldr	r1, [r2, #4]
 8014d7c:	430b      	orrs	r3, r1
 8014d7e:	6053      	str	r3, [r2, #4]
 8014d80:	e6d6      	b.n	8014b30 <_realloc_r+0x100>
 8014d82:	46c0      	nop			; (mov r8, r8)
 8014d84:	200006b4 	.word	0x200006b4

08014d88 <_sbrk_r>:
 8014d88:	2300      	movs	r3, #0
 8014d8a:	b570      	push	{r4, r5, r6, lr}
 8014d8c:	4c06      	ldr	r4, [pc, #24]	; (8014da8 <_sbrk_r+0x20>)
 8014d8e:	0005      	movs	r5, r0
 8014d90:	0008      	movs	r0, r1
 8014d92:	6023      	str	r3, [r4, #0]
 8014d94:	f004 fa1e 	bl	80191d4 <_sbrk>
 8014d98:	1c43      	adds	r3, r0, #1
 8014d9a:	d103      	bne.n	8014da4 <_sbrk_r+0x1c>
 8014d9c:	6823      	ldr	r3, [r4, #0]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d000      	beq.n	8014da4 <_sbrk_r+0x1c>
 8014da2:	602b      	str	r3, [r5, #0]
 8014da4:	bd70      	pop	{r4, r5, r6, pc}
 8014da6:	46c0      	nop			; (mov r8, r8)
 8014da8:	200073fc 	.word	0x200073fc

08014dac <snprintf>:
 8014dac:	b40c      	push	{r2, r3}
 8014dae:	b530      	push	{r4, r5, lr}
 8014db0:	4b16      	ldr	r3, [pc, #88]	; (8014e0c <snprintf+0x60>)
 8014db2:	b09d      	sub	sp, #116	; 0x74
 8014db4:	1e0c      	subs	r4, r1, #0
 8014db6:	681d      	ldr	r5, [r3, #0]
 8014db8:	da08      	bge.n	8014dcc <snprintf+0x20>
 8014dba:	238b      	movs	r3, #139	; 0x8b
 8014dbc:	2001      	movs	r0, #1
 8014dbe:	602b      	str	r3, [r5, #0]
 8014dc0:	4240      	negs	r0, r0
 8014dc2:	b01d      	add	sp, #116	; 0x74
 8014dc4:	bc30      	pop	{r4, r5}
 8014dc6:	bc08      	pop	{r3}
 8014dc8:	b002      	add	sp, #8
 8014dca:	4718      	bx	r3
 8014dcc:	2382      	movs	r3, #130	; 0x82
 8014dce:	a902      	add	r1, sp, #8
 8014dd0:	009b      	lsls	r3, r3, #2
 8014dd2:	818b      	strh	r3, [r1, #12]
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	9002      	str	r0, [sp, #8]
 8014dd8:	6108      	str	r0, [r1, #16]
 8014dda:	429c      	cmp	r4, r3
 8014ddc:	d000      	beq.n	8014de0 <snprintf+0x34>
 8014dde:	1e63      	subs	r3, r4, #1
 8014de0:	608b      	str	r3, [r1, #8]
 8014de2:	614b      	str	r3, [r1, #20]
 8014de4:	2301      	movs	r3, #1
 8014de6:	425b      	negs	r3, r3
 8014de8:	81cb      	strh	r3, [r1, #14]
 8014dea:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014dec:	ab21      	add	r3, sp, #132	; 0x84
 8014dee:	0028      	movs	r0, r5
 8014df0:	9301      	str	r3, [sp, #4]
 8014df2:	f000 ff97 	bl	8015d24 <_svfprintf_r>
 8014df6:	1c43      	adds	r3, r0, #1
 8014df8:	da01      	bge.n	8014dfe <snprintf+0x52>
 8014dfa:	238b      	movs	r3, #139	; 0x8b
 8014dfc:	602b      	str	r3, [r5, #0]
 8014dfe:	2c00      	cmp	r4, #0
 8014e00:	d0df      	beq.n	8014dc2 <snprintf+0x16>
 8014e02:	2300      	movs	r3, #0
 8014e04:	9a02      	ldr	r2, [sp, #8]
 8014e06:	7013      	strb	r3, [r2, #0]
 8014e08:	e7db      	b.n	8014dc2 <snprintf+0x16>
 8014e0a:	46c0      	nop			; (mov r8, r8)
 8014e0c:	20000118 	.word	0x20000118

08014e10 <sprintf>:
 8014e10:	b40e      	push	{r1, r2, r3}
 8014e12:	b500      	push	{lr}
 8014e14:	490b      	ldr	r1, [pc, #44]	; (8014e44 <sprintf+0x34>)
 8014e16:	b09c      	sub	sp, #112	; 0x70
 8014e18:	ab1d      	add	r3, sp, #116	; 0x74
 8014e1a:	9002      	str	r0, [sp, #8]
 8014e1c:	9006      	str	r0, [sp, #24]
 8014e1e:	9107      	str	r1, [sp, #28]
 8014e20:	9104      	str	r1, [sp, #16]
 8014e22:	4809      	ldr	r0, [pc, #36]	; (8014e48 <sprintf+0x38>)
 8014e24:	4909      	ldr	r1, [pc, #36]	; (8014e4c <sprintf+0x3c>)
 8014e26:	cb04      	ldmia	r3!, {r2}
 8014e28:	9105      	str	r1, [sp, #20]
 8014e2a:	6800      	ldr	r0, [r0, #0]
 8014e2c:	a902      	add	r1, sp, #8
 8014e2e:	9301      	str	r3, [sp, #4]
 8014e30:	f000 ff78 	bl	8015d24 <_svfprintf_r>
 8014e34:	2300      	movs	r3, #0
 8014e36:	9a02      	ldr	r2, [sp, #8]
 8014e38:	7013      	strb	r3, [r2, #0]
 8014e3a:	b01c      	add	sp, #112	; 0x70
 8014e3c:	bc08      	pop	{r3}
 8014e3e:	b003      	add	sp, #12
 8014e40:	4718      	bx	r3
 8014e42:	46c0      	nop			; (mov r8, r8)
 8014e44:	7fffffff 	.word	0x7fffffff
 8014e48:	20000118 	.word	0x20000118
 8014e4c:	ffff0208 	.word	0xffff0208

08014e50 <strcat>:
 8014e50:	0002      	movs	r2, r0
 8014e52:	b510      	push	{r4, lr}
 8014e54:	7813      	ldrb	r3, [r2, #0]
 8014e56:	1c54      	adds	r4, r2, #1
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d105      	bne.n	8014e68 <strcat+0x18>
 8014e5c:	5ccc      	ldrb	r4, [r1, r3]
 8014e5e:	54d4      	strb	r4, [r2, r3]
 8014e60:	3301      	adds	r3, #1
 8014e62:	2c00      	cmp	r4, #0
 8014e64:	d1fa      	bne.n	8014e5c <strcat+0xc>
 8014e66:	bd10      	pop	{r4, pc}
 8014e68:	0022      	movs	r2, r4
 8014e6a:	e7f3      	b.n	8014e54 <strcat+0x4>

08014e6c <strchr>:
 8014e6c:	b2c9      	uxtb	r1, r1
 8014e6e:	7803      	ldrb	r3, [r0, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d004      	beq.n	8014e7e <strchr+0x12>
 8014e74:	428b      	cmp	r3, r1
 8014e76:	d100      	bne.n	8014e7a <strchr+0xe>
 8014e78:	4770      	bx	lr
 8014e7a:	3001      	adds	r0, #1
 8014e7c:	e7f7      	b.n	8014e6e <strchr+0x2>
 8014e7e:	424b      	negs	r3, r1
 8014e80:	4159      	adcs	r1, r3
 8014e82:	4249      	negs	r1, r1
 8014e84:	4008      	ands	r0, r1
 8014e86:	e7f7      	b.n	8014e78 <strchr+0xc>

08014e88 <strcpy>:
 8014e88:	0003      	movs	r3, r0
 8014e8a:	780a      	ldrb	r2, [r1, #0]
 8014e8c:	3101      	adds	r1, #1
 8014e8e:	701a      	strb	r2, [r3, #0]
 8014e90:	3301      	adds	r3, #1
 8014e92:	2a00      	cmp	r2, #0
 8014e94:	d1f9      	bne.n	8014e8a <strcpy+0x2>
 8014e96:	4770      	bx	lr

08014e98 <strncmp>:
 8014e98:	2300      	movs	r3, #0
 8014e9a:	b530      	push	{r4, r5, lr}
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d00a      	beq.n	8014eb6 <strncmp+0x1e>
 8014ea0:	3a01      	subs	r2, #1
 8014ea2:	5cc4      	ldrb	r4, [r0, r3]
 8014ea4:	5ccd      	ldrb	r5, [r1, r3]
 8014ea6:	42ac      	cmp	r4, r5
 8014ea8:	d104      	bne.n	8014eb4 <strncmp+0x1c>
 8014eaa:	4293      	cmp	r3, r2
 8014eac:	d002      	beq.n	8014eb4 <strncmp+0x1c>
 8014eae:	3301      	adds	r3, #1
 8014eb0:	2c00      	cmp	r4, #0
 8014eb2:	d1f6      	bne.n	8014ea2 <strncmp+0xa>
 8014eb4:	1b63      	subs	r3, r4, r5
 8014eb6:	0018      	movs	r0, r3
 8014eb8:	bd30      	pop	{r4, r5, pc}

08014eba <strncpy>:
 8014eba:	b530      	push	{r4, r5, lr}
 8014ebc:	0005      	movs	r5, r0
 8014ebe:	2a00      	cmp	r2, #0
 8014ec0:	d100      	bne.n	8014ec4 <strncpy+0xa>
 8014ec2:	bd30      	pop	{r4, r5, pc}
 8014ec4:	780c      	ldrb	r4, [r1, #0]
 8014ec6:	3a01      	subs	r2, #1
 8014ec8:	1c6b      	adds	r3, r5, #1
 8014eca:	702c      	strb	r4, [r5, #0]
 8014ecc:	3101      	adds	r1, #1
 8014ece:	2c00      	cmp	r4, #0
 8014ed0:	d105      	bne.n	8014ede <strncpy+0x24>
 8014ed2:	189a      	adds	r2, r3, r2
 8014ed4:	429a      	cmp	r2, r3
 8014ed6:	d0f4      	beq.n	8014ec2 <strncpy+0x8>
 8014ed8:	701c      	strb	r4, [r3, #0]
 8014eda:	3301      	adds	r3, #1
 8014edc:	e7fa      	b.n	8014ed4 <strncpy+0x1a>
 8014ede:	001d      	movs	r5, r3
 8014ee0:	e7ed      	b.n	8014ebe <strncpy+0x4>
	...

08014ee4 <sulp>:
 8014ee4:	b570      	push	{r4, r5, r6, lr}
 8014ee6:	0016      	movs	r6, r2
 8014ee8:	000d      	movs	r5, r1
 8014eea:	f003 ff17 	bl	8018d1c <__ulp>
 8014eee:	2e00      	cmp	r6, #0
 8014ef0:	d00d      	beq.n	8014f0e <sulp+0x2a>
 8014ef2:	236b      	movs	r3, #107	; 0x6b
 8014ef4:	006a      	lsls	r2, r5, #1
 8014ef6:	0d52      	lsrs	r2, r2, #21
 8014ef8:	1a9b      	subs	r3, r3, r2
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	dd07      	ble.n	8014f0e <sulp+0x2a>
 8014efe:	2400      	movs	r4, #0
 8014f00:	4a03      	ldr	r2, [pc, #12]	; (8014f10 <sulp+0x2c>)
 8014f02:	051b      	lsls	r3, r3, #20
 8014f04:	189d      	adds	r5, r3, r2
 8014f06:	002b      	movs	r3, r5
 8014f08:	0022      	movs	r2, r4
 8014f0a:	f7ec ff93 	bl	8001e34 <__aeabi_dmul>
 8014f0e:	bd70      	pop	{r4, r5, r6, pc}
 8014f10:	3ff00000 	.word	0x3ff00000

08014f14 <_strtod_l>:
 8014f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f16:	b0a7      	sub	sp, #156	; 0x9c
 8014f18:	9307      	str	r3, [sp, #28]
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	9004      	str	r0, [sp, #16]
 8014f1e:	9807      	ldr	r0, [sp, #28]
 8014f20:	9322      	str	r3, [sp, #136]	; 0x88
 8014f22:	9106      	str	r1, [sp, #24]
 8014f24:	921d      	str	r2, [sp, #116]	; 0x74
 8014f26:	f003 fc28 	bl	801877a <__localeconv_l>
 8014f2a:	0005      	movs	r5, r0
 8014f2c:	6800      	ldr	r0, [r0, #0]
 8014f2e:	f7eb f8f3 	bl	8000118 <strlen>
 8014f32:	2600      	movs	r6, #0
 8014f34:	2700      	movs	r7, #0
 8014f36:	9b06      	ldr	r3, [sp, #24]
 8014f38:	9005      	str	r0, [sp, #20]
 8014f3a:	9321      	str	r3, [sp, #132]	; 0x84
 8014f3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f3e:	781a      	ldrb	r2, [r3, #0]
 8014f40:	2a0d      	cmp	r2, #13
 8014f42:	d839      	bhi.n	8014fb8 <_strtod_l+0xa4>
 8014f44:	2a09      	cmp	r2, #9
 8014f46:	d23d      	bcs.n	8014fc4 <_strtod_l+0xb0>
 8014f48:	2a00      	cmp	r2, #0
 8014f4a:	d044      	beq.n	8014fd6 <_strtod_l+0xc2>
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f50:	2200      	movs	r2, #0
 8014f52:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8014f54:	920c      	str	r2, [sp, #48]	; 0x30
 8014f56:	7823      	ldrb	r3, [r4, #0]
 8014f58:	2b30      	cmp	r3, #48	; 0x30
 8014f5a:	d000      	beq.n	8014f5e <_strtod_l+0x4a>
 8014f5c:	e07e      	b.n	801505c <_strtod_l+0x148>
 8014f5e:	7863      	ldrb	r3, [r4, #1]
 8014f60:	2b58      	cmp	r3, #88	; 0x58
 8014f62:	d002      	beq.n	8014f6a <_strtod_l+0x56>
 8014f64:	2b78      	cmp	r3, #120	; 0x78
 8014f66:	d000      	beq.n	8014f6a <_strtod_l+0x56>
 8014f68:	e06e      	b.n	8015048 <_strtod_l+0x134>
 8014f6a:	9b07      	ldr	r3, [sp, #28]
 8014f6c:	4a96      	ldr	r2, [pc, #600]	; (80151c8 <_strtod_l+0x2b4>)
 8014f6e:	9302      	str	r3, [sp, #8]
 8014f70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014f72:	a921      	add	r1, sp, #132	; 0x84
 8014f74:	9301      	str	r3, [sp, #4]
 8014f76:	ab22      	add	r3, sp, #136	; 0x88
 8014f78:	9300      	str	r3, [sp, #0]
 8014f7a:	9804      	ldr	r0, [sp, #16]
 8014f7c:	ab23      	add	r3, sp, #140	; 0x8c
 8014f7e:	f003 f914 	bl	80181aa <__gethex>
 8014f82:	2507      	movs	r5, #7
 8014f84:	9005      	str	r0, [sp, #20]
 8014f86:	4005      	ands	r5, r0
 8014f88:	d005      	beq.n	8014f96 <_strtod_l+0x82>
 8014f8a:	2d06      	cmp	r5, #6
 8014f8c:	d12f      	bne.n	8014fee <_strtod_l+0xda>
 8014f8e:	2300      	movs	r3, #0
 8014f90:	3401      	adds	r4, #1
 8014f92:	9421      	str	r4, [sp, #132]	; 0x84
 8014f94:	9313      	str	r3, [sp, #76]	; 0x4c
 8014f96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d002      	beq.n	8014fa2 <_strtod_l+0x8e>
 8014f9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f9e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014fa0:	601a      	str	r2, [r3, #0]
 8014fa2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d01d      	beq.n	8014fe4 <_strtod_l+0xd0>
 8014fa8:	2380      	movs	r3, #128	; 0x80
 8014faa:	0032      	movs	r2, r6
 8014fac:	061b      	lsls	r3, r3, #24
 8014fae:	18fb      	adds	r3, r7, r3
 8014fb0:	0010      	movs	r0, r2
 8014fb2:	0019      	movs	r1, r3
 8014fb4:	b027      	add	sp, #156	; 0x9c
 8014fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fb8:	2a2b      	cmp	r2, #43	; 0x2b
 8014fba:	d016      	beq.n	8014fea <_strtod_l+0xd6>
 8014fbc:	2a2d      	cmp	r2, #45	; 0x2d
 8014fbe:	d003      	beq.n	8014fc8 <_strtod_l+0xb4>
 8014fc0:	2a20      	cmp	r2, #32
 8014fc2:	d1c3      	bne.n	8014f4c <_strtod_l+0x38>
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	e7b8      	b.n	8014f3a <_strtod_l+0x26>
 8014fc8:	2201      	movs	r2, #1
 8014fca:	9213      	str	r2, [sp, #76]	; 0x4c
 8014fcc:	1c5a      	adds	r2, r3, #1
 8014fce:	9221      	str	r2, [sp, #132]	; 0x84
 8014fd0:	785b      	ldrb	r3, [r3, #1]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d1bc      	bne.n	8014f50 <_strtod_l+0x3c>
 8014fd6:	9b06      	ldr	r3, [sp, #24]
 8014fd8:	9321      	str	r3, [sp, #132]	; 0x84
 8014fda:	2300      	movs	r3, #0
 8014fdc:	9313      	str	r3, [sp, #76]	; 0x4c
 8014fde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d1db      	bne.n	8014f9c <_strtod_l+0x88>
 8014fe4:	0032      	movs	r2, r6
 8014fe6:	003b      	movs	r3, r7
 8014fe8:	e7e2      	b.n	8014fb0 <_strtod_l+0x9c>
 8014fea:	2200      	movs	r2, #0
 8014fec:	e7ed      	b.n	8014fca <_strtod_l+0xb6>
 8014fee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014ff0:	2a00      	cmp	r2, #0
 8014ff2:	d007      	beq.n	8015004 <_strtod_l+0xf0>
 8014ff4:	2135      	movs	r1, #53	; 0x35
 8014ff6:	a824      	add	r0, sp, #144	; 0x90
 8014ff8:	f003 ff7d 	bl	8018ef6 <__copybits>
 8014ffc:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014ffe:	9804      	ldr	r0, [sp, #16]
 8015000:	f003 fc12 	bl	8018828 <_Bfree>
 8015004:	1e68      	subs	r0, r5, #1
 8015006:	2804      	cmp	r0, #4
 8015008:	d806      	bhi.n	8015018 <_strtod_l+0x104>
 801500a:	f7eb f88d 	bl	8000128 <__gnu_thumb1_case_uqi>
 801500e:	030c      	.short	0x030c
 8015010:	1917      	.short	0x1917
 8015012:	0c          	.byte	0x0c
 8015013:	00          	.byte	0x00
 8015014:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015016:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8015018:	9b05      	ldr	r3, [sp, #20]
 801501a:	071b      	lsls	r3, r3, #28
 801501c:	d5bb      	bpl.n	8014f96 <_strtod_l+0x82>
 801501e:	2380      	movs	r3, #128	; 0x80
 8015020:	061b      	lsls	r3, r3, #24
 8015022:	431f      	orrs	r7, r3
 8015024:	e7b7      	b.n	8014f96 <_strtod_l+0x82>
 8015026:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8015028:	4a68      	ldr	r2, [pc, #416]	; (80151cc <_strtod_l+0x2b8>)
 801502a:	4969      	ldr	r1, [pc, #420]	; (80151d0 <_strtod_l+0x2bc>)
 801502c:	401a      	ands	r2, r3
 801502e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015030:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8015032:	185b      	adds	r3, r3, r1
 8015034:	051b      	lsls	r3, r3, #20
 8015036:	431a      	orrs	r2, r3
 8015038:	0017      	movs	r7, r2
 801503a:	e7ed      	b.n	8015018 <_strtod_l+0x104>
 801503c:	4f65      	ldr	r7, [pc, #404]	; (80151d4 <_strtod_l+0x2c0>)
 801503e:	e7eb      	b.n	8015018 <_strtod_l+0x104>
 8015040:	2601      	movs	r6, #1
 8015042:	4f65      	ldr	r7, [pc, #404]	; (80151d8 <_strtod_l+0x2c4>)
 8015044:	4276      	negs	r6, r6
 8015046:	e7e7      	b.n	8015018 <_strtod_l+0x104>
 8015048:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801504a:	1c5a      	adds	r2, r3, #1
 801504c:	9221      	str	r2, [sp, #132]	; 0x84
 801504e:	785b      	ldrb	r3, [r3, #1]
 8015050:	2b30      	cmp	r3, #48	; 0x30
 8015052:	d0f9      	beq.n	8015048 <_strtod_l+0x134>
 8015054:	2b00      	cmp	r3, #0
 8015056:	d09e      	beq.n	8014f96 <_strtod_l+0x82>
 8015058:	2301      	movs	r3, #1
 801505a:	930c      	str	r3, [sp, #48]	; 0x30
 801505c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801505e:	220a      	movs	r2, #10
 8015060:	9312      	str	r3, [sp, #72]	; 0x48
 8015062:	2300      	movs	r3, #0
 8015064:	930b      	str	r3, [sp, #44]	; 0x2c
 8015066:	9308      	str	r3, [sp, #32]
 8015068:	930a      	str	r3, [sp, #40]	; 0x28
 801506a:	9821      	ldr	r0, [sp, #132]	; 0x84
 801506c:	7804      	ldrb	r4, [r0, #0]
 801506e:	0023      	movs	r3, r4
 8015070:	3b30      	subs	r3, #48	; 0x30
 8015072:	b2d9      	uxtb	r1, r3
 8015074:	2909      	cmp	r1, #9
 8015076:	d934      	bls.n	80150e2 <_strtod_l+0x1ce>
 8015078:	9a05      	ldr	r2, [sp, #20]
 801507a:	6829      	ldr	r1, [r5, #0]
 801507c:	f7ff ff0c 	bl	8014e98 <strncmp>
 8015080:	2800      	cmp	r0, #0
 8015082:	d040      	beq.n	8015106 <_strtod_l+0x1f2>
 8015084:	2000      	movs	r0, #0
 8015086:	0023      	movs	r3, r4
 8015088:	4684      	mov	ip, r0
 801508a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801508c:	9007      	str	r0, [sp, #28]
 801508e:	9205      	str	r2, [sp, #20]
 8015090:	2220      	movs	r2, #32
 8015092:	0019      	movs	r1, r3
 8015094:	4391      	bics	r1, r2
 8015096:	000a      	movs	r2, r1
 8015098:	2100      	movs	r1, #0
 801509a:	2a45      	cmp	r2, #69	; 0x45
 801509c:	d000      	beq.n	80150a0 <_strtod_l+0x18c>
 801509e:	e0bf      	b.n	8015220 <_strtod_l+0x30c>
 80150a0:	9b05      	ldr	r3, [sp, #20]
 80150a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150a4:	4303      	orrs	r3, r0
 80150a6:	4313      	orrs	r3, r2
 80150a8:	428b      	cmp	r3, r1
 80150aa:	d094      	beq.n	8014fd6 <_strtod_l+0xc2>
 80150ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150ae:	9306      	str	r3, [sp, #24]
 80150b0:	3301      	adds	r3, #1
 80150b2:	9321      	str	r3, [sp, #132]	; 0x84
 80150b4:	9b06      	ldr	r3, [sp, #24]
 80150b6:	785b      	ldrb	r3, [r3, #1]
 80150b8:	2b2b      	cmp	r3, #43	; 0x2b
 80150ba:	d100      	bne.n	80150be <_strtod_l+0x1aa>
 80150bc:	e082      	b.n	80151c4 <_strtod_l+0x2b0>
 80150be:	000c      	movs	r4, r1
 80150c0:	2b2d      	cmp	r3, #45	; 0x2d
 80150c2:	d105      	bne.n	80150d0 <_strtod_l+0x1bc>
 80150c4:	2401      	movs	r4, #1
 80150c6:	9b06      	ldr	r3, [sp, #24]
 80150c8:	3302      	adds	r3, #2
 80150ca:	9321      	str	r3, [sp, #132]	; 0x84
 80150cc:	9b06      	ldr	r3, [sp, #24]
 80150ce:	789b      	ldrb	r3, [r3, #2]
 80150d0:	001a      	movs	r2, r3
 80150d2:	3a30      	subs	r2, #48	; 0x30
 80150d4:	2a09      	cmp	r2, #9
 80150d6:	d800      	bhi.n	80150da <_strtod_l+0x1c6>
 80150d8:	e084      	b.n	80151e4 <_strtod_l+0x2d0>
 80150da:	9a06      	ldr	r2, [sp, #24]
 80150dc:	2100      	movs	r1, #0
 80150de:	9221      	str	r2, [sp, #132]	; 0x84
 80150e0:	e09e      	b.n	8015220 <_strtod_l+0x30c>
 80150e2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80150e4:	2908      	cmp	r1, #8
 80150e6:	dc09      	bgt.n	80150fc <_strtod_l+0x1e8>
 80150e8:	9908      	ldr	r1, [sp, #32]
 80150ea:	4351      	muls	r1, r2
 80150ec:	18cb      	adds	r3, r1, r3
 80150ee:	9308      	str	r3, [sp, #32]
 80150f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80150f2:	3001      	adds	r0, #1
 80150f4:	3301      	adds	r3, #1
 80150f6:	930a      	str	r3, [sp, #40]	; 0x28
 80150f8:	9021      	str	r0, [sp, #132]	; 0x84
 80150fa:	e7b6      	b.n	801506a <_strtod_l+0x156>
 80150fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80150fe:	4351      	muls	r1, r2
 8015100:	18cb      	adds	r3, r1, r3
 8015102:	930b      	str	r3, [sp, #44]	; 0x2c
 8015104:	e7f4      	b.n	80150f0 <_strtod_l+0x1dc>
 8015106:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015108:	9b05      	ldr	r3, [sp, #20]
 801510a:	4694      	mov	ip, r2
 801510c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801510e:	4463      	add	r3, ip
 8015110:	9321      	str	r3, [sp, #132]	; 0x84
 8015112:	781b      	ldrb	r3, [r3, #0]
 8015114:	2a00      	cmp	r2, #0
 8015116:	d036      	beq.n	8015186 <_strtod_l+0x272>
 8015118:	4684      	mov	ip, r0
 801511a:	9205      	str	r2, [sp, #20]
 801511c:	001a      	movs	r2, r3
 801511e:	3a30      	subs	r2, #48	; 0x30
 8015120:	2a09      	cmp	r2, #9
 8015122:	d912      	bls.n	801514a <_strtod_l+0x236>
 8015124:	2201      	movs	r2, #1
 8015126:	9207      	str	r2, [sp, #28]
 8015128:	e7b2      	b.n	8015090 <_strtod_l+0x17c>
 801512a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801512c:	3001      	adds	r0, #1
 801512e:	1c5a      	adds	r2, r3, #1
 8015130:	9221      	str	r2, [sp, #132]	; 0x84
 8015132:	785b      	ldrb	r3, [r3, #1]
 8015134:	2b30      	cmp	r3, #48	; 0x30
 8015136:	d0f8      	beq.n	801512a <_strtod_l+0x216>
 8015138:	001a      	movs	r2, r3
 801513a:	3a31      	subs	r2, #49	; 0x31
 801513c:	2a08      	cmp	r2, #8
 801513e:	d83c      	bhi.n	80151ba <_strtod_l+0x2a6>
 8015140:	4684      	mov	ip, r0
 8015142:	2000      	movs	r0, #0
 8015144:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015146:	9005      	str	r0, [sp, #20]
 8015148:	9212      	str	r2, [sp, #72]	; 0x48
 801514a:	3b30      	subs	r3, #48	; 0x30
 801514c:	1c42      	adds	r2, r0, #1
 801514e:	2b00      	cmp	r3, #0
 8015150:	d013      	beq.n	801517a <_strtod_l+0x266>
 8015152:	210a      	movs	r1, #10
 8015154:	4494      	add	ip, r2
 8015156:	9a05      	ldr	r2, [sp, #20]
 8015158:	1885      	adds	r5, r0, r2
 801515a:	42aa      	cmp	r2, r5
 801515c:	d115      	bne.n	801518a <_strtod_l+0x276>
 801515e:	9905      	ldr	r1, [sp, #20]
 8015160:	9a05      	ldr	r2, [sp, #20]
 8015162:	3101      	adds	r1, #1
 8015164:	1809      	adds	r1, r1, r0
 8015166:	1812      	adds	r2, r2, r0
 8015168:	9105      	str	r1, [sp, #20]
 801516a:	2a08      	cmp	r2, #8
 801516c:	dc1b      	bgt.n	80151a6 <_strtod_l+0x292>
 801516e:	220a      	movs	r2, #10
 8015170:	9908      	ldr	r1, [sp, #32]
 8015172:	434a      	muls	r2, r1
 8015174:	189b      	adds	r3, r3, r2
 8015176:	2200      	movs	r2, #0
 8015178:	9308      	str	r3, [sp, #32]
 801517a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801517c:	0010      	movs	r0, r2
 801517e:	1c59      	adds	r1, r3, #1
 8015180:	9121      	str	r1, [sp, #132]	; 0x84
 8015182:	785b      	ldrb	r3, [r3, #1]
 8015184:	e7ca      	b.n	801511c <_strtod_l+0x208>
 8015186:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015188:	e7d4      	b.n	8015134 <_strtod_l+0x220>
 801518a:	1c54      	adds	r4, r2, #1
 801518c:	2a08      	cmp	r2, #8
 801518e:	dc04      	bgt.n	801519a <_strtod_l+0x286>
 8015190:	9a08      	ldr	r2, [sp, #32]
 8015192:	434a      	muls	r2, r1
 8015194:	9208      	str	r2, [sp, #32]
 8015196:	0022      	movs	r2, r4
 8015198:	e7df      	b.n	801515a <_strtod_l+0x246>
 801519a:	2c10      	cmp	r4, #16
 801519c:	dcfb      	bgt.n	8015196 <_strtod_l+0x282>
 801519e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80151a0:	434a      	muls	r2, r1
 80151a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80151a4:	e7f7      	b.n	8015196 <_strtod_l+0x282>
 80151a6:	9905      	ldr	r1, [sp, #20]
 80151a8:	2200      	movs	r2, #0
 80151aa:	2910      	cmp	r1, #16
 80151ac:	dce5      	bgt.n	801517a <_strtod_l+0x266>
 80151ae:	210a      	movs	r1, #10
 80151b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80151b2:	4341      	muls	r1, r0
 80151b4:	185b      	adds	r3, r3, r1
 80151b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80151b8:	e7df      	b.n	801517a <_strtod_l+0x266>
 80151ba:	2200      	movs	r2, #0
 80151bc:	4694      	mov	ip, r2
 80151be:	9205      	str	r2, [sp, #20]
 80151c0:	3201      	adds	r2, #1
 80151c2:	e7b0      	b.n	8015126 <_strtod_l+0x212>
 80151c4:	000c      	movs	r4, r1
 80151c6:	e77e      	b.n	80150c6 <_strtod_l+0x1b2>
 80151c8:	0801c348 	.word	0x0801c348
 80151cc:	ffefffff 	.word	0xffefffff
 80151d0:	00000433 	.word	0x00000433
 80151d4:	7ff00000 	.word	0x7ff00000
 80151d8:	7fffffff 	.word	0x7fffffff
 80151dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151de:	1c5a      	adds	r2, r3, #1
 80151e0:	9221      	str	r2, [sp, #132]	; 0x84
 80151e2:	785b      	ldrb	r3, [r3, #1]
 80151e4:	2b30      	cmp	r3, #48	; 0x30
 80151e6:	d0f9      	beq.n	80151dc <_strtod_l+0x2c8>
 80151e8:	001a      	movs	r2, r3
 80151ea:	3a31      	subs	r2, #49	; 0x31
 80151ec:	2100      	movs	r1, #0
 80151ee:	2a08      	cmp	r2, #8
 80151f0:	d816      	bhi.n	8015220 <_strtod_l+0x30c>
 80151f2:	3b30      	subs	r3, #48	; 0x30
 80151f4:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80151f6:	930e      	str	r3, [sp, #56]	; 0x38
 80151f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151fa:	1c59      	adds	r1, r3, #1
 80151fc:	9121      	str	r1, [sp, #132]	; 0x84
 80151fe:	785b      	ldrb	r3, [r3, #1]
 8015200:	001a      	movs	r2, r3
 8015202:	3a30      	subs	r2, #48	; 0x30
 8015204:	2a09      	cmp	r2, #9
 8015206:	d932      	bls.n	801526e <_strtod_l+0x35a>
 8015208:	1b4a      	subs	r2, r1, r5
 801520a:	4dad      	ldr	r5, [pc, #692]	; (80154c0 <_strtod_l+0x5ac>)
 801520c:	0029      	movs	r1, r5
 801520e:	2a08      	cmp	r2, #8
 8015210:	dc03      	bgt.n	801521a <_strtod_l+0x306>
 8015212:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015214:	42a9      	cmp	r1, r5
 8015216:	dd00      	ble.n	801521a <_strtod_l+0x306>
 8015218:	0029      	movs	r1, r5
 801521a:	2c00      	cmp	r4, #0
 801521c:	d000      	beq.n	8015220 <_strtod_l+0x30c>
 801521e:	4249      	negs	r1, r1
 8015220:	9a05      	ldr	r2, [sp, #20]
 8015222:	2a00      	cmp	r2, #0
 8015224:	d149      	bne.n	80152ba <_strtod_l+0x3a6>
 8015226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015228:	4310      	orrs	r0, r2
 801522a:	d000      	beq.n	801522e <_strtod_l+0x31a>
 801522c:	e6b3      	b.n	8014f96 <_strtod_l+0x82>
 801522e:	9a07      	ldr	r2, [sp, #28]
 8015230:	2a00      	cmp	r2, #0
 8015232:	d000      	beq.n	8015236 <_strtod_l+0x322>
 8015234:	e6cf      	b.n	8014fd6 <_strtod_l+0xc2>
 8015236:	2b4e      	cmp	r3, #78	; 0x4e
 8015238:	d025      	beq.n	8015286 <_strtod_l+0x372>
 801523a:	dc1f      	bgt.n	801527c <_strtod_l+0x368>
 801523c:	2b49      	cmp	r3, #73	; 0x49
 801523e:	d000      	beq.n	8015242 <_strtod_l+0x32e>
 8015240:	e6c9      	b.n	8014fd6 <_strtod_l+0xc2>
 8015242:	49a0      	ldr	r1, [pc, #640]	; (80154c4 <_strtod_l+0x5b0>)
 8015244:	a821      	add	r0, sp, #132	; 0x84
 8015246:	f003 f9ed 	bl	8018624 <__match>
 801524a:	2800      	cmp	r0, #0
 801524c:	d100      	bne.n	8015250 <_strtod_l+0x33c>
 801524e:	e6c2      	b.n	8014fd6 <_strtod_l+0xc2>
 8015250:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015252:	499d      	ldr	r1, [pc, #628]	; (80154c8 <_strtod_l+0x5b4>)
 8015254:	3b01      	subs	r3, #1
 8015256:	a821      	add	r0, sp, #132	; 0x84
 8015258:	9321      	str	r3, [sp, #132]	; 0x84
 801525a:	f003 f9e3 	bl	8018624 <__match>
 801525e:	2800      	cmp	r0, #0
 8015260:	d102      	bne.n	8015268 <_strtod_l+0x354>
 8015262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015264:	3301      	adds	r3, #1
 8015266:	9321      	str	r3, [sp, #132]	; 0x84
 8015268:	4f98      	ldr	r7, [pc, #608]	; (80154cc <_strtod_l+0x5b8>)
 801526a:	2600      	movs	r6, #0
 801526c:	e693      	b.n	8014f96 <_strtod_l+0x82>
 801526e:	220a      	movs	r2, #10
 8015270:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015272:	434a      	muls	r2, r1
 8015274:	18d2      	adds	r2, r2, r3
 8015276:	3a30      	subs	r2, #48	; 0x30
 8015278:	920e      	str	r2, [sp, #56]	; 0x38
 801527a:	e7bd      	b.n	80151f8 <_strtod_l+0x2e4>
 801527c:	2b69      	cmp	r3, #105	; 0x69
 801527e:	d0e0      	beq.n	8015242 <_strtod_l+0x32e>
 8015280:	2b6e      	cmp	r3, #110	; 0x6e
 8015282:	d000      	beq.n	8015286 <_strtod_l+0x372>
 8015284:	e6a7      	b.n	8014fd6 <_strtod_l+0xc2>
 8015286:	4992      	ldr	r1, [pc, #584]	; (80154d0 <_strtod_l+0x5bc>)
 8015288:	a821      	add	r0, sp, #132	; 0x84
 801528a:	f003 f9cb 	bl	8018624 <__match>
 801528e:	2800      	cmp	r0, #0
 8015290:	d100      	bne.n	8015294 <_strtod_l+0x380>
 8015292:	e6a0      	b.n	8014fd6 <_strtod_l+0xc2>
 8015294:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	2b28      	cmp	r3, #40	; 0x28
 801529a:	d10c      	bne.n	80152b6 <_strtod_l+0x3a2>
 801529c:	aa24      	add	r2, sp, #144	; 0x90
 801529e:	498d      	ldr	r1, [pc, #564]	; (80154d4 <_strtod_l+0x5c0>)
 80152a0:	a821      	add	r0, sp, #132	; 0x84
 80152a2:	f003 f9d3 	bl	801864c <__hexnan>
 80152a6:	2805      	cmp	r0, #5
 80152a8:	d105      	bne.n	80152b6 <_strtod_l+0x3a2>
 80152aa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80152ac:	4a87      	ldr	r2, [pc, #540]	; (80154cc <_strtod_l+0x5b8>)
 80152ae:	9e24      	ldr	r6, [sp, #144]	; 0x90
 80152b0:	431a      	orrs	r2, r3
 80152b2:	0017      	movs	r7, r2
 80152b4:	e66f      	b.n	8014f96 <_strtod_l+0x82>
 80152b6:	4f88      	ldr	r7, [pc, #544]	; (80154d8 <_strtod_l+0x5c4>)
 80152b8:	e7d7      	b.n	801526a <_strtod_l+0x356>
 80152ba:	4663      	mov	r3, ip
 80152bc:	1acb      	subs	r3, r1, r3
 80152be:	9307      	str	r3, [sp, #28]
 80152c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d101      	bne.n	80152ca <_strtod_l+0x3b6>
 80152c6:	9b05      	ldr	r3, [sp, #20]
 80152c8:	930a      	str	r3, [sp, #40]	; 0x28
 80152ca:	9c05      	ldr	r4, [sp, #20]
 80152cc:	2c10      	cmp	r4, #16
 80152ce:	dd00      	ble.n	80152d2 <_strtod_l+0x3be>
 80152d0:	2410      	movs	r4, #16
 80152d2:	9808      	ldr	r0, [sp, #32]
 80152d4:	f7ed fbf4 	bl	8002ac0 <__aeabi_ui2d>
 80152d8:	9b05      	ldr	r3, [sp, #20]
 80152da:	0006      	movs	r6, r0
 80152dc:	000f      	movs	r7, r1
 80152de:	2b09      	cmp	r3, #9
 80152e0:	dc15      	bgt.n	801530e <_strtod_l+0x3fa>
 80152e2:	9b07      	ldr	r3, [sp, #28]
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d100      	bne.n	80152ea <_strtod_l+0x3d6>
 80152e8:	e655      	b.n	8014f96 <_strtod_l+0x82>
 80152ea:	9b07      	ldr	r3, [sp, #28]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	dc00      	bgt.n	80152f2 <_strtod_l+0x3de>
 80152f0:	e07d      	b.n	80153ee <_strtod_l+0x4da>
 80152f2:	2b16      	cmp	r3, #22
 80152f4:	dc62      	bgt.n	80153bc <_strtod_l+0x4a8>
 80152f6:	00dc      	lsls	r4, r3, #3
 80152f8:	4b78      	ldr	r3, [pc, #480]	; (80154dc <_strtod_l+0x5c8>)
 80152fa:	0032      	movs	r2, r6
 80152fc:	1919      	adds	r1, r3, r4
 80152fe:	003b      	movs	r3, r7
 8015300:	6808      	ldr	r0, [r1, #0]
 8015302:	6849      	ldr	r1, [r1, #4]
 8015304:	f7ec fd96 	bl	8001e34 <__aeabi_dmul>
 8015308:	0006      	movs	r6, r0
 801530a:	000f      	movs	r7, r1
 801530c:	e643      	b.n	8014f96 <_strtod_l+0x82>
 801530e:	0022      	movs	r2, r4
 8015310:	4b72      	ldr	r3, [pc, #456]	; (80154dc <_strtod_l+0x5c8>)
 8015312:	3a09      	subs	r2, #9
 8015314:	00d2      	lsls	r2, r2, #3
 8015316:	189b      	adds	r3, r3, r2
 8015318:	681a      	ldr	r2, [r3, #0]
 801531a:	685b      	ldr	r3, [r3, #4]
 801531c:	f7ec fd8a 	bl	8001e34 <__aeabi_dmul>
 8015320:	0006      	movs	r6, r0
 8015322:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015324:	000f      	movs	r7, r1
 8015326:	f7ed fbcb 	bl	8002ac0 <__aeabi_ui2d>
 801532a:	000b      	movs	r3, r1
 801532c:	0002      	movs	r2, r0
 801532e:	0039      	movs	r1, r7
 8015330:	0030      	movs	r0, r6
 8015332:	f7eb fe59 	bl	8000fe8 <__aeabi_dadd>
 8015336:	9b05      	ldr	r3, [sp, #20]
 8015338:	0006      	movs	r6, r0
 801533a:	000f      	movs	r7, r1
 801533c:	2b0f      	cmp	r3, #15
 801533e:	ddd0      	ble.n	80152e2 <_strtod_l+0x3ce>
 8015340:	9b05      	ldr	r3, [sp, #20]
 8015342:	1b1c      	subs	r4, r3, r4
 8015344:	9b07      	ldr	r3, [sp, #28]
 8015346:	18e4      	adds	r4, r4, r3
 8015348:	2c00      	cmp	r4, #0
 801534a:	dc00      	bgt.n	801534e <_strtod_l+0x43a>
 801534c:	e094      	b.n	8015478 <_strtod_l+0x564>
 801534e:	230f      	movs	r3, #15
 8015350:	4023      	ands	r3, r4
 8015352:	d00a      	beq.n	801536a <_strtod_l+0x456>
 8015354:	4961      	ldr	r1, [pc, #388]	; (80154dc <_strtod_l+0x5c8>)
 8015356:	00db      	lsls	r3, r3, #3
 8015358:	18c9      	adds	r1, r1, r3
 801535a:	0032      	movs	r2, r6
 801535c:	6808      	ldr	r0, [r1, #0]
 801535e:	6849      	ldr	r1, [r1, #4]
 8015360:	003b      	movs	r3, r7
 8015362:	f7ec fd67 	bl	8001e34 <__aeabi_dmul>
 8015366:	0006      	movs	r6, r0
 8015368:	000f      	movs	r7, r1
 801536a:	230f      	movs	r3, #15
 801536c:	439c      	bics	r4, r3
 801536e:	d06e      	beq.n	801544e <_strtod_l+0x53a>
 8015370:	3326      	adds	r3, #38	; 0x26
 8015372:	33ff      	adds	r3, #255	; 0xff
 8015374:	429c      	cmp	r4, r3
 8015376:	dd48      	ble.n	801540a <_strtod_l+0x4f6>
 8015378:	2400      	movs	r4, #0
 801537a:	9405      	str	r4, [sp, #20]
 801537c:	940b      	str	r4, [sp, #44]	; 0x2c
 801537e:	940a      	str	r4, [sp, #40]	; 0x28
 8015380:	2322      	movs	r3, #34	; 0x22
 8015382:	2600      	movs	r6, #0
 8015384:	9a04      	ldr	r2, [sp, #16]
 8015386:	4f51      	ldr	r7, [pc, #324]	; (80154cc <_strtod_l+0x5b8>)
 8015388:	6013      	str	r3, [r2, #0]
 801538a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801538c:	42b3      	cmp	r3, r6
 801538e:	d100      	bne.n	8015392 <_strtod_l+0x47e>
 8015390:	e601      	b.n	8014f96 <_strtod_l+0x82>
 8015392:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015394:	9804      	ldr	r0, [sp, #16]
 8015396:	f003 fa47 	bl	8018828 <_Bfree>
 801539a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801539c:	9804      	ldr	r0, [sp, #16]
 801539e:	f003 fa43 	bl	8018828 <_Bfree>
 80153a2:	9905      	ldr	r1, [sp, #20]
 80153a4:	9804      	ldr	r0, [sp, #16]
 80153a6:	f003 fa3f 	bl	8018828 <_Bfree>
 80153aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80153ac:	9804      	ldr	r0, [sp, #16]
 80153ae:	f003 fa3b 	bl	8018828 <_Bfree>
 80153b2:	0021      	movs	r1, r4
 80153b4:	9804      	ldr	r0, [sp, #16]
 80153b6:	f003 fa37 	bl	8018828 <_Bfree>
 80153ba:	e5ec      	b.n	8014f96 <_strtod_l+0x82>
 80153bc:	2325      	movs	r3, #37	; 0x25
 80153be:	9a05      	ldr	r2, [sp, #20]
 80153c0:	1a9b      	subs	r3, r3, r2
 80153c2:	9a07      	ldr	r2, [sp, #28]
 80153c4:	4293      	cmp	r3, r2
 80153c6:	dbbb      	blt.n	8015340 <_strtod_l+0x42c>
 80153c8:	230f      	movs	r3, #15
 80153ca:	9a05      	ldr	r2, [sp, #20]
 80153cc:	4c43      	ldr	r4, [pc, #268]	; (80154dc <_strtod_l+0x5c8>)
 80153ce:	1a9d      	subs	r5, r3, r2
 80153d0:	00e9      	lsls	r1, r5, #3
 80153d2:	1861      	adds	r1, r4, r1
 80153d4:	0032      	movs	r2, r6
 80153d6:	6808      	ldr	r0, [r1, #0]
 80153d8:	6849      	ldr	r1, [r1, #4]
 80153da:	003b      	movs	r3, r7
 80153dc:	f7ec fd2a 	bl	8001e34 <__aeabi_dmul>
 80153e0:	9b07      	ldr	r3, [sp, #28]
 80153e2:	1b5e      	subs	r6, r3, r5
 80153e4:	00f6      	lsls	r6, r6, #3
 80153e6:	19a6      	adds	r6, r4, r6
 80153e8:	6832      	ldr	r2, [r6, #0]
 80153ea:	6873      	ldr	r3, [r6, #4]
 80153ec:	e78a      	b.n	8015304 <_strtod_l+0x3f0>
 80153ee:	9b07      	ldr	r3, [sp, #28]
 80153f0:	3316      	adds	r3, #22
 80153f2:	dba5      	blt.n	8015340 <_strtod_l+0x42c>
 80153f4:	9b07      	ldr	r3, [sp, #28]
 80153f6:	0030      	movs	r0, r6
 80153f8:	00da      	lsls	r2, r3, #3
 80153fa:	4b38      	ldr	r3, [pc, #224]	; (80154dc <_strtod_l+0x5c8>)
 80153fc:	0039      	movs	r1, r7
 80153fe:	1a9b      	subs	r3, r3, r2
 8015400:	681a      	ldr	r2, [r3, #0]
 8015402:	685b      	ldr	r3, [r3, #4]
 8015404:	f7ec f90c 	bl	8001620 <__aeabi_ddiv>
 8015408:	e77e      	b.n	8015308 <_strtod_l+0x3f4>
 801540a:	2300      	movs	r3, #0
 801540c:	0030      	movs	r0, r6
 801540e:	0039      	movs	r1, r7
 8015410:	001d      	movs	r5, r3
 8015412:	1124      	asrs	r4, r4, #4
 8015414:	2c01      	cmp	r4, #1
 8015416:	dc1d      	bgt.n	8015454 <_strtod_l+0x540>
 8015418:	2b00      	cmp	r3, #0
 801541a:	d001      	beq.n	8015420 <_strtod_l+0x50c>
 801541c:	0006      	movs	r6, r0
 801541e:	000f      	movs	r7, r1
 8015420:	4b2f      	ldr	r3, [pc, #188]	; (80154e0 <_strtod_l+0x5cc>)
 8015422:	00ed      	lsls	r5, r5, #3
 8015424:	18ff      	adds	r7, r7, r3
 8015426:	4b2f      	ldr	r3, [pc, #188]	; (80154e4 <_strtod_l+0x5d0>)
 8015428:	0032      	movs	r2, r6
 801542a:	195d      	adds	r5, r3, r5
 801542c:	6828      	ldr	r0, [r5, #0]
 801542e:	6869      	ldr	r1, [r5, #4]
 8015430:	003b      	movs	r3, r7
 8015432:	f7ec fcff 	bl	8001e34 <__aeabi_dmul>
 8015436:	4b25      	ldr	r3, [pc, #148]	; (80154cc <_strtod_l+0x5b8>)
 8015438:	4a2b      	ldr	r2, [pc, #172]	; (80154e8 <_strtod_l+0x5d4>)
 801543a:	0006      	movs	r6, r0
 801543c:	400b      	ands	r3, r1
 801543e:	4293      	cmp	r3, r2
 8015440:	d89a      	bhi.n	8015378 <_strtod_l+0x464>
 8015442:	4a2a      	ldr	r2, [pc, #168]	; (80154ec <_strtod_l+0x5d8>)
 8015444:	4293      	cmp	r3, r2
 8015446:	d913      	bls.n	8015470 <_strtod_l+0x55c>
 8015448:	2601      	movs	r6, #1
 801544a:	4f29      	ldr	r7, [pc, #164]	; (80154f0 <_strtod_l+0x5dc>)
 801544c:	4276      	negs	r6, r6
 801544e:	2300      	movs	r3, #0
 8015450:	9306      	str	r3, [sp, #24]
 8015452:	e07b      	b.n	801554c <_strtod_l+0x638>
 8015454:	2201      	movs	r2, #1
 8015456:	4214      	tst	r4, r2
 8015458:	d007      	beq.n	801546a <_strtod_l+0x556>
 801545a:	4a22      	ldr	r2, [pc, #136]	; (80154e4 <_strtod_l+0x5d0>)
 801545c:	00eb      	lsls	r3, r5, #3
 801545e:	189b      	adds	r3, r3, r2
 8015460:	681a      	ldr	r2, [r3, #0]
 8015462:	685b      	ldr	r3, [r3, #4]
 8015464:	f7ec fce6 	bl	8001e34 <__aeabi_dmul>
 8015468:	2301      	movs	r3, #1
 801546a:	3501      	adds	r5, #1
 801546c:	1064      	asrs	r4, r4, #1
 801546e:	e7d1      	b.n	8015414 <_strtod_l+0x500>
 8015470:	23d4      	movs	r3, #212	; 0xd4
 8015472:	049b      	lsls	r3, r3, #18
 8015474:	18cf      	adds	r7, r1, r3
 8015476:	e7ea      	b.n	801544e <_strtod_l+0x53a>
 8015478:	2c00      	cmp	r4, #0
 801547a:	d0e8      	beq.n	801544e <_strtod_l+0x53a>
 801547c:	230f      	movs	r3, #15
 801547e:	4264      	negs	r4, r4
 8015480:	4023      	ands	r3, r4
 8015482:	d00a      	beq.n	801549a <_strtod_l+0x586>
 8015484:	4a15      	ldr	r2, [pc, #84]	; (80154dc <_strtod_l+0x5c8>)
 8015486:	00db      	lsls	r3, r3, #3
 8015488:	18d3      	adds	r3, r2, r3
 801548a:	0030      	movs	r0, r6
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	685b      	ldr	r3, [r3, #4]
 8015490:	0039      	movs	r1, r7
 8015492:	f7ec f8c5 	bl	8001620 <__aeabi_ddiv>
 8015496:	0006      	movs	r6, r0
 8015498:	000f      	movs	r7, r1
 801549a:	1124      	asrs	r4, r4, #4
 801549c:	d0d7      	beq.n	801544e <_strtod_l+0x53a>
 801549e:	2c1f      	cmp	r4, #31
 80154a0:	dd28      	ble.n	80154f4 <_strtod_l+0x5e0>
 80154a2:	2400      	movs	r4, #0
 80154a4:	9405      	str	r4, [sp, #20]
 80154a6:	940b      	str	r4, [sp, #44]	; 0x2c
 80154a8:	940a      	str	r4, [sp, #40]	; 0x28
 80154aa:	2322      	movs	r3, #34	; 0x22
 80154ac:	9a04      	ldr	r2, [sp, #16]
 80154ae:	2600      	movs	r6, #0
 80154b0:	6013      	str	r3, [r2, #0]
 80154b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154b4:	2700      	movs	r7, #0
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d000      	beq.n	80154bc <_strtod_l+0x5a8>
 80154ba:	e76a      	b.n	8015392 <_strtod_l+0x47e>
 80154bc:	e56b      	b.n	8014f96 <_strtod_l+0x82>
 80154be:	46c0      	nop			; (mov r8, r8)
 80154c0:	00004e1f 	.word	0x00004e1f
 80154c4:	0801c39d 	.word	0x0801c39d
 80154c8:	0801c4f0 	.word	0x0801c4f0
 80154cc:	7ff00000 	.word	0x7ff00000
 80154d0:	0801c3a5 	.word	0x0801c3a5
 80154d4:	0801c35c 	.word	0x0801c35c
 80154d8:	fff80000 	.word	0xfff80000
 80154dc:	0801c528 	.word	0x0801c528
 80154e0:	fcb00000 	.word	0xfcb00000
 80154e4:	0801c500 	.word	0x0801c500
 80154e8:	7ca00000 	.word	0x7ca00000
 80154ec:	7c900000 	.word	0x7c900000
 80154f0:	7fefffff 	.word	0x7fefffff
 80154f4:	2310      	movs	r3, #16
 80154f6:	4023      	ands	r3, r4
 80154f8:	9306      	str	r3, [sp, #24]
 80154fa:	d001      	beq.n	8015500 <_strtod_l+0x5ec>
 80154fc:	236a      	movs	r3, #106	; 0x6a
 80154fe:	9306      	str	r3, [sp, #24]
 8015500:	2300      	movs	r3, #0
 8015502:	0030      	movs	r0, r6
 8015504:	0039      	movs	r1, r7
 8015506:	001d      	movs	r5, r3
 8015508:	2c00      	cmp	r4, #0
 801550a:	dd00      	ble.n	801550e <_strtod_l+0x5fa>
 801550c:	e10e      	b.n	801572c <_strtod_l+0x818>
 801550e:	2b00      	cmp	r3, #0
 8015510:	d001      	beq.n	8015516 <_strtod_l+0x602>
 8015512:	0006      	movs	r6, r0
 8015514:	000f      	movs	r7, r1
 8015516:	9b06      	ldr	r3, [sp, #24]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d00f      	beq.n	801553c <_strtod_l+0x628>
 801551c:	236b      	movs	r3, #107	; 0x6b
 801551e:	0079      	lsls	r1, r7, #1
 8015520:	0d49      	lsrs	r1, r1, #21
 8015522:	003a      	movs	r2, r7
 8015524:	1a5b      	subs	r3, r3, r1
 8015526:	2b00      	cmp	r3, #0
 8015528:	dd08      	ble.n	801553c <_strtod_l+0x628>
 801552a:	2b1f      	cmp	r3, #31
 801552c:	dc00      	bgt.n	8015530 <_strtod_l+0x61c>
 801552e:	e112      	b.n	8015756 <_strtod_l+0x842>
 8015530:	2600      	movs	r6, #0
 8015532:	2b34      	cmp	r3, #52	; 0x34
 8015534:	dc00      	bgt.n	8015538 <_strtod_l+0x624>
 8015536:	e107      	b.n	8015748 <_strtod_l+0x834>
 8015538:	27dc      	movs	r7, #220	; 0xdc
 801553a:	04bf      	lsls	r7, r7, #18
 801553c:	2200      	movs	r2, #0
 801553e:	2300      	movs	r3, #0
 8015540:	0030      	movs	r0, r6
 8015542:	0039      	movs	r1, r7
 8015544:	f7ea ff8a 	bl	800045c <__aeabi_dcmpeq>
 8015548:	2800      	cmp	r0, #0
 801554a:	d1aa      	bne.n	80154a2 <_strtod_l+0x58e>
 801554c:	9b08      	ldr	r3, [sp, #32]
 801554e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015550:	9300      	str	r3, [sp, #0]
 8015552:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015554:	9b05      	ldr	r3, [sp, #20]
 8015556:	9804      	ldr	r0, [sp, #16]
 8015558:	f003 f9ae 	bl	80188b8 <__s2b>
 801555c:	900b      	str	r0, [sp, #44]	; 0x2c
 801555e:	2800      	cmp	r0, #0
 8015560:	d100      	bne.n	8015564 <_strtod_l+0x650>
 8015562:	e709      	b.n	8015378 <_strtod_l+0x464>
 8015564:	9b07      	ldr	r3, [sp, #28]
 8015566:	9a07      	ldr	r2, [sp, #28]
 8015568:	17db      	asrs	r3, r3, #31
 801556a:	4252      	negs	r2, r2
 801556c:	4013      	ands	r3, r2
 801556e:	9315      	str	r3, [sp, #84]	; 0x54
 8015570:	9b07      	ldr	r3, [sp, #28]
 8015572:	2400      	movs	r4, #0
 8015574:	43db      	mvns	r3, r3
 8015576:	9a07      	ldr	r2, [sp, #28]
 8015578:	17db      	asrs	r3, r3, #31
 801557a:	401a      	ands	r2, r3
 801557c:	921c      	str	r2, [sp, #112]	; 0x70
 801557e:	9405      	str	r4, [sp, #20]
 8015580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015582:	9804      	ldr	r0, [sp, #16]
 8015584:	6859      	ldr	r1, [r3, #4]
 8015586:	f003 f927 	bl	80187d8 <_Balloc>
 801558a:	900a      	str	r0, [sp, #40]	; 0x28
 801558c:	2800      	cmp	r0, #0
 801558e:	d100      	bne.n	8015592 <_strtod_l+0x67e>
 8015590:	e6f6      	b.n	8015380 <_strtod_l+0x46c>
 8015592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015596:	691b      	ldr	r3, [r3, #16]
 8015598:	310c      	adds	r1, #12
 801559a:	1c9a      	adds	r2, r3, #2
 801559c:	0092      	lsls	r2, r2, #2
 801559e:	300c      	adds	r0, #12
 80155a0:	9308      	str	r3, [sp, #32]
 80155a2:	f7ff fa00 	bl	80149a6 <memcpy>
 80155a6:	ab24      	add	r3, sp, #144	; 0x90
 80155a8:	9301      	str	r3, [sp, #4]
 80155aa:	ab23      	add	r3, sp, #140	; 0x8c
 80155ac:	9300      	str	r3, [sp, #0]
 80155ae:	0032      	movs	r2, r6
 80155b0:	003b      	movs	r3, r7
 80155b2:	9804      	ldr	r0, [sp, #16]
 80155b4:	960e      	str	r6, [sp, #56]	; 0x38
 80155b6:	970f      	str	r7, [sp, #60]	; 0x3c
 80155b8:	f003 fc22 	bl	8018e00 <__d2b>
 80155bc:	9022      	str	r0, [sp, #136]	; 0x88
 80155be:	2800      	cmp	r0, #0
 80155c0:	d100      	bne.n	80155c4 <_strtod_l+0x6b0>
 80155c2:	e6dd      	b.n	8015380 <_strtod_l+0x46c>
 80155c4:	2101      	movs	r1, #1
 80155c6:	9804      	ldr	r0, [sp, #16]
 80155c8:	f003 f9fd 	bl	80189c6 <__i2b>
 80155cc:	9005      	str	r0, [sp, #20]
 80155ce:	2800      	cmp	r0, #0
 80155d0:	d100      	bne.n	80155d4 <_strtod_l+0x6c0>
 80155d2:	e6d5      	b.n	8015380 <_strtod_l+0x46c>
 80155d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	da00      	bge.n	80155dc <_strtod_l+0x6c8>
 80155da:	e0c1      	b.n	8015760 <_strtod_l+0x84c>
 80155dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80155de:	189d      	adds	r5, r3, r2
 80155e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80155e2:	4694      	mov	ip, r2
 80155e4:	9906      	ldr	r1, [sp, #24]
 80155e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80155e8:	1a5b      	subs	r3, r3, r1
 80155ea:	2136      	movs	r1, #54	; 0x36
 80155ec:	189b      	adds	r3, r3, r2
 80155ee:	1a8a      	subs	r2, r1, r2
 80155f0:	49b2      	ldr	r1, [pc, #712]	; (80158bc <_strtod_l+0x9a8>)
 80155f2:	3b01      	subs	r3, #1
 80155f4:	2001      	movs	r0, #1
 80155f6:	428b      	cmp	r3, r1
 80155f8:	db00      	blt.n	80155fc <_strtod_l+0x6e8>
 80155fa:	e0bd      	b.n	8015778 <_strtod_l+0x864>
 80155fc:	1ac9      	subs	r1, r1, r3
 80155fe:	1a52      	subs	r2, r2, r1
 8015600:	291f      	cmp	r1, #31
 8015602:	dd00      	ble.n	8015606 <_strtod_l+0x6f2>
 8015604:	e0b1      	b.n	801576a <_strtod_l+0x856>
 8015606:	4088      	lsls	r0, r1
 8015608:	2300      	movs	r3, #0
 801560a:	9014      	str	r0, [sp, #80]	; 0x50
 801560c:	9310      	str	r3, [sp, #64]	; 0x40
 801560e:	18ab      	adds	r3, r5, r2
 8015610:	9308      	str	r3, [sp, #32]
 8015612:	0013      	movs	r3, r2
 8015614:	9a06      	ldr	r2, [sp, #24]
 8015616:	4463      	add	r3, ip
 8015618:	18d3      	adds	r3, r2, r3
 801561a:	9a08      	ldr	r2, [sp, #32]
 801561c:	930c      	str	r3, [sp, #48]	; 0x30
 801561e:	002b      	movs	r3, r5
 8015620:	4295      	cmp	r5, r2
 8015622:	dd00      	ble.n	8015626 <_strtod_l+0x712>
 8015624:	0013      	movs	r3, r2
 8015626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015628:	4293      	cmp	r3, r2
 801562a:	dd00      	ble.n	801562e <_strtod_l+0x71a>
 801562c:	0013      	movs	r3, r2
 801562e:	2b00      	cmp	r3, #0
 8015630:	dd06      	ble.n	8015640 <_strtod_l+0x72c>
 8015632:	9a08      	ldr	r2, [sp, #32]
 8015634:	1aed      	subs	r5, r5, r3
 8015636:	1ad2      	subs	r2, r2, r3
 8015638:	9208      	str	r2, [sp, #32]
 801563a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801563c:	1ad2      	subs	r2, r2, r3
 801563e:	920c      	str	r2, [sp, #48]	; 0x30
 8015640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015642:	2b00      	cmp	r3, #0
 8015644:	d017      	beq.n	8015676 <_strtod_l+0x762>
 8015646:	001a      	movs	r2, r3
 8015648:	9905      	ldr	r1, [sp, #20]
 801564a:	9804      	ldr	r0, [sp, #16]
 801564c:	f003 fa54 	bl	8018af8 <__pow5mult>
 8015650:	9005      	str	r0, [sp, #20]
 8015652:	2800      	cmp	r0, #0
 8015654:	d100      	bne.n	8015658 <_strtod_l+0x744>
 8015656:	e693      	b.n	8015380 <_strtod_l+0x46c>
 8015658:	0001      	movs	r1, r0
 801565a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801565c:	9804      	ldr	r0, [sp, #16]
 801565e:	f003 f9bb 	bl	80189d8 <__multiply>
 8015662:	9012      	str	r0, [sp, #72]	; 0x48
 8015664:	2800      	cmp	r0, #0
 8015666:	d100      	bne.n	801566a <_strtod_l+0x756>
 8015668:	e68a      	b.n	8015380 <_strtod_l+0x46c>
 801566a:	9922      	ldr	r1, [sp, #136]	; 0x88
 801566c:	9804      	ldr	r0, [sp, #16]
 801566e:	f003 f8db 	bl	8018828 <_Bfree>
 8015672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015674:	9322      	str	r3, [sp, #136]	; 0x88
 8015676:	9b08      	ldr	r3, [sp, #32]
 8015678:	2b00      	cmp	r3, #0
 801567a:	dd00      	ble.n	801567e <_strtod_l+0x76a>
 801567c:	e07f      	b.n	801577e <_strtod_l+0x86a>
 801567e:	9b07      	ldr	r3, [sp, #28]
 8015680:	2b00      	cmp	r3, #0
 8015682:	dd08      	ble.n	8015696 <_strtod_l+0x782>
 8015684:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015686:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015688:	9804      	ldr	r0, [sp, #16]
 801568a:	f003 fa35 	bl	8018af8 <__pow5mult>
 801568e:	900a      	str	r0, [sp, #40]	; 0x28
 8015690:	2800      	cmp	r0, #0
 8015692:	d100      	bne.n	8015696 <_strtod_l+0x782>
 8015694:	e674      	b.n	8015380 <_strtod_l+0x46c>
 8015696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015698:	2b00      	cmp	r3, #0
 801569a:	dd08      	ble.n	80156ae <_strtod_l+0x79a>
 801569c:	001a      	movs	r2, r3
 801569e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80156a0:	9804      	ldr	r0, [sp, #16]
 80156a2:	f003 fa6b 	bl	8018b7c <__lshift>
 80156a6:	900a      	str	r0, [sp, #40]	; 0x28
 80156a8:	2800      	cmp	r0, #0
 80156aa:	d100      	bne.n	80156ae <_strtod_l+0x79a>
 80156ac:	e668      	b.n	8015380 <_strtod_l+0x46c>
 80156ae:	2d00      	cmp	r5, #0
 80156b0:	dd08      	ble.n	80156c4 <_strtod_l+0x7b0>
 80156b2:	002a      	movs	r2, r5
 80156b4:	9905      	ldr	r1, [sp, #20]
 80156b6:	9804      	ldr	r0, [sp, #16]
 80156b8:	f003 fa60 	bl	8018b7c <__lshift>
 80156bc:	9005      	str	r0, [sp, #20]
 80156be:	2800      	cmp	r0, #0
 80156c0:	d100      	bne.n	80156c4 <_strtod_l+0x7b0>
 80156c2:	e65d      	b.n	8015380 <_strtod_l+0x46c>
 80156c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80156c6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80156c8:	9804      	ldr	r0, [sp, #16]
 80156ca:	f003 fac3 	bl	8018c54 <__mdiff>
 80156ce:	1e04      	subs	r4, r0, #0
 80156d0:	d100      	bne.n	80156d4 <_strtod_l+0x7c0>
 80156d2:	e655      	b.n	8015380 <_strtod_l+0x46c>
 80156d4:	2500      	movs	r5, #0
 80156d6:	68c3      	ldr	r3, [r0, #12]
 80156d8:	9905      	ldr	r1, [sp, #20]
 80156da:	60c5      	str	r5, [r0, #12]
 80156dc:	9312      	str	r3, [sp, #72]	; 0x48
 80156de:	f003 fa9f 	bl	8018c20 <__mcmp>
 80156e2:	42a8      	cmp	r0, r5
 80156e4:	da55      	bge.n	8015792 <_strtod_l+0x87e>
 80156e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80156e8:	42ab      	cmp	r3, r5
 80156ea:	d11b      	bne.n	8015724 <_strtod_l+0x810>
 80156ec:	42ae      	cmp	r6, r5
 80156ee:	d119      	bne.n	8015724 <_strtod_l+0x810>
 80156f0:	033b      	lsls	r3, r7, #12
 80156f2:	42ab      	cmp	r3, r5
 80156f4:	d116      	bne.n	8015724 <_strtod_l+0x810>
 80156f6:	22d6      	movs	r2, #214	; 0xd6
 80156f8:	4b71      	ldr	r3, [pc, #452]	; (80158c0 <_strtod_l+0x9ac>)
 80156fa:	04d2      	lsls	r2, r2, #19
 80156fc:	403b      	ands	r3, r7
 80156fe:	4293      	cmp	r3, r2
 8015700:	d910      	bls.n	8015724 <_strtod_l+0x810>
 8015702:	6963      	ldr	r3, [r4, #20]
 8015704:	42ab      	cmp	r3, r5
 8015706:	d102      	bne.n	801570e <_strtod_l+0x7fa>
 8015708:	6923      	ldr	r3, [r4, #16]
 801570a:	2b01      	cmp	r3, #1
 801570c:	dd0a      	ble.n	8015724 <_strtod_l+0x810>
 801570e:	0021      	movs	r1, r4
 8015710:	2201      	movs	r2, #1
 8015712:	9804      	ldr	r0, [sp, #16]
 8015714:	f003 fa32 	bl	8018b7c <__lshift>
 8015718:	9905      	ldr	r1, [sp, #20]
 801571a:	0004      	movs	r4, r0
 801571c:	f003 fa80 	bl	8018c20 <__mcmp>
 8015720:	2800      	cmp	r0, #0
 8015722:	dc6b      	bgt.n	80157fc <_strtod_l+0x8e8>
 8015724:	9b06      	ldr	r3, [sp, #24]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d178      	bne.n	801581c <_strtod_l+0x908>
 801572a:	e632      	b.n	8015392 <_strtod_l+0x47e>
 801572c:	2201      	movs	r2, #1
 801572e:	4214      	tst	r4, r2
 8015730:	d007      	beq.n	8015742 <_strtod_l+0x82e>
 8015732:	4a64      	ldr	r2, [pc, #400]	; (80158c4 <_strtod_l+0x9b0>)
 8015734:	00eb      	lsls	r3, r5, #3
 8015736:	18d3      	adds	r3, r2, r3
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	685b      	ldr	r3, [r3, #4]
 801573c:	f7ec fb7a 	bl	8001e34 <__aeabi_dmul>
 8015740:	2301      	movs	r3, #1
 8015742:	3501      	adds	r5, #1
 8015744:	1064      	asrs	r4, r4, #1
 8015746:	e6df      	b.n	8015508 <_strtod_l+0x5f4>
 8015748:	2101      	movs	r1, #1
 801574a:	3b20      	subs	r3, #32
 801574c:	4249      	negs	r1, r1
 801574e:	4099      	lsls	r1, r3
 8015750:	400a      	ands	r2, r1
 8015752:	0017      	movs	r7, r2
 8015754:	e6f2      	b.n	801553c <_strtod_l+0x628>
 8015756:	2201      	movs	r2, #1
 8015758:	4252      	negs	r2, r2
 801575a:	409a      	lsls	r2, r3
 801575c:	4016      	ands	r6, r2
 801575e:	e6ed      	b.n	801553c <_strtod_l+0x628>
 8015760:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015762:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015764:	1ad2      	subs	r2, r2, r3
 8015766:	4694      	mov	ip, r2
 8015768:	e73c      	b.n	80155e4 <_strtod_l+0x6d0>
 801576a:	4957      	ldr	r1, [pc, #348]	; (80158c8 <_strtod_l+0x9b4>)
 801576c:	1acb      	subs	r3, r1, r3
 801576e:	0001      	movs	r1, r0
 8015770:	4099      	lsls	r1, r3
 8015772:	9110      	str	r1, [sp, #64]	; 0x40
 8015774:	9014      	str	r0, [sp, #80]	; 0x50
 8015776:	e74a      	b.n	801560e <_strtod_l+0x6fa>
 8015778:	2300      	movs	r3, #0
 801577a:	9310      	str	r3, [sp, #64]	; 0x40
 801577c:	e7fa      	b.n	8015774 <_strtod_l+0x860>
 801577e:	9a08      	ldr	r2, [sp, #32]
 8015780:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015782:	9804      	ldr	r0, [sp, #16]
 8015784:	f003 f9fa 	bl	8018b7c <__lshift>
 8015788:	9022      	str	r0, [sp, #136]	; 0x88
 801578a:	2800      	cmp	r0, #0
 801578c:	d000      	beq.n	8015790 <_strtod_l+0x87c>
 801578e:	e776      	b.n	801567e <_strtod_l+0x76a>
 8015790:	e5f6      	b.n	8015380 <_strtod_l+0x46c>
 8015792:	970c      	str	r7, [sp, #48]	; 0x30
 8015794:	2800      	cmp	r0, #0
 8015796:	d000      	beq.n	801579a <_strtod_l+0x886>
 8015798:	e0a0      	b.n	80158dc <_strtod_l+0x9c8>
 801579a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801579c:	033b      	lsls	r3, r7, #12
 801579e:	0b1b      	lsrs	r3, r3, #12
 80157a0:	2a00      	cmp	r2, #0
 80157a2:	d027      	beq.n	80157f4 <_strtod_l+0x8e0>
 80157a4:	4a49      	ldr	r2, [pc, #292]	; (80158cc <_strtod_l+0x9b8>)
 80157a6:	4293      	cmp	r3, r2
 80157a8:	d157      	bne.n	801585a <_strtod_l+0x946>
 80157aa:	2201      	movs	r2, #1
 80157ac:	9b06      	ldr	r3, [sp, #24]
 80157ae:	4252      	negs	r2, r2
 80157b0:	0031      	movs	r1, r6
 80157b2:	0010      	movs	r0, r2
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d00b      	beq.n	80157d0 <_strtod_l+0x8bc>
 80157b8:	25d4      	movs	r5, #212	; 0xd4
 80157ba:	4b41      	ldr	r3, [pc, #260]	; (80158c0 <_strtod_l+0x9ac>)
 80157bc:	04ed      	lsls	r5, r5, #19
 80157be:	403b      	ands	r3, r7
 80157c0:	0010      	movs	r0, r2
 80157c2:	42ab      	cmp	r3, r5
 80157c4:	d804      	bhi.n	80157d0 <_strtod_l+0x8bc>
 80157c6:	306c      	adds	r0, #108	; 0x6c
 80157c8:	0d1b      	lsrs	r3, r3, #20
 80157ca:	1ac3      	subs	r3, r0, r3
 80157cc:	409a      	lsls	r2, r3
 80157ce:	0010      	movs	r0, r2
 80157d0:	4281      	cmp	r1, r0
 80157d2:	d142      	bne.n	801585a <_strtod_l+0x946>
 80157d4:	4b3e      	ldr	r3, [pc, #248]	; (80158d0 <_strtod_l+0x9bc>)
 80157d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80157d8:	429a      	cmp	r2, r3
 80157da:	d102      	bne.n	80157e2 <_strtod_l+0x8ce>
 80157dc:	1c4b      	adds	r3, r1, #1
 80157de:	d100      	bne.n	80157e2 <_strtod_l+0x8ce>
 80157e0:	e5ce      	b.n	8015380 <_strtod_l+0x46c>
 80157e2:	4b37      	ldr	r3, [pc, #220]	; (80158c0 <_strtod_l+0x9ac>)
 80157e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80157e6:	2600      	movs	r6, #0
 80157e8:	401a      	ands	r2, r3
 80157ea:	0013      	movs	r3, r2
 80157ec:	2280      	movs	r2, #128	; 0x80
 80157ee:	0352      	lsls	r2, r2, #13
 80157f0:	189f      	adds	r7, r3, r2
 80157f2:	e797      	b.n	8015724 <_strtod_l+0x810>
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d130      	bne.n	801585a <_strtod_l+0x946>
 80157f8:	2e00      	cmp	r6, #0
 80157fa:	d12e      	bne.n	801585a <_strtod_l+0x946>
 80157fc:	9906      	ldr	r1, [sp, #24]
 80157fe:	003b      	movs	r3, r7
 8015800:	4a2f      	ldr	r2, [pc, #188]	; (80158c0 <_strtod_l+0x9ac>)
 8015802:	2900      	cmp	r1, #0
 8015804:	d020      	beq.n	8015848 <_strtod_l+0x934>
 8015806:	0011      	movs	r1, r2
 8015808:	20d6      	movs	r0, #214	; 0xd6
 801580a:	4039      	ands	r1, r7
 801580c:	04c0      	lsls	r0, r0, #19
 801580e:	4281      	cmp	r1, r0
 8015810:	dc1a      	bgt.n	8015848 <_strtod_l+0x934>
 8015812:	23dc      	movs	r3, #220	; 0xdc
 8015814:	049b      	lsls	r3, r3, #18
 8015816:	4299      	cmp	r1, r3
 8015818:	dc00      	bgt.n	801581c <_strtod_l+0x908>
 801581a:	e646      	b.n	80154aa <_strtod_l+0x596>
 801581c:	4b2d      	ldr	r3, [pc, #180]	; (80158d4 <_strtod_l+0x9c0>)
 801581e:	0030      	movs	r0, r6
 8015820:	931b      	str	r3, [sp, #108]	; 0x6c
 8015822:	2300      	movs	r3, #0
 8015824:	931a      	str	r3, [sp, #104]	; 0x68
 8015826:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015828:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801582a:	0039      	movs	r1, r7
 801582c:	f7ec fb02 	bl	8001e34 <__aeabi_dmul>
 8015830:	0006      	movs	r6, r0
 8015832:	000f      	movs	r7, r1
 8015834:	1e0b      	subs	r3, r1, #0
 8015836:	d000      	beq.n	801583a <_strtod_l+0x926>
 8015838:	e5ab      	b.n	8015392 <_strtod_l+0x47e>
 801583a:	2800      	cmp	r0, #0
 801583c:	d000      	beq.n	8015840 <_strtod_l+0x92c>
 801583e:	e5a8      	b.n	8015392 <_strtod_l+0x47e>
 8015840:	9a04      	ldr	r2, [sp, #16]
 8015842:	3322      	adds	r3, #34	; 0x22
 8015844:	6013      	str	r3, [r2, #0]
 8015846:	e5a4      	b.n	8015392 <_strtod_l+0x47e>
 8015848:	2601      	movs	r6, #1
 801584a:	4013      	ands	r3, r2
 801584c:	4a22      	ldr	r2, [pc, #136]	; (80158d8 <_strtod_l+0x9c4>)
 801584e:	4276      	negs	r6, r6
 8015850:	189b      	adds	r3, r3, r2
 8015852:	4a1e      	ldr	r2, [pc, #120]	; (80158cc <_strtod_l+0x9b8>)
 8015854:	431a      	orrs	r2, r3
 8015856:	0017      	movs	r7, r2
 8015858:	e764      	b.n	8015724 <_strtod_l+0x810>
 801585a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801585c:	2b00      	cmp	r3, #0
 801585e:	d015      	beq.n	801588c <_strtod_l+0x978>
 8015860:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015862:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015864:	4213      	tst	r3, r2
 8015866:	d100      	bne.n	801586a <_strtod_l+0x956>
 8015868:	e75c      	b.n	8015724 <_strtod_l+0x810>
 801586a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801586c:	9a06      	ldr	r2, [sp, #24]
 801586e:	0030      	movs	r0, r6
 8015870:	0039      	movs	r1, r7
 8015872:	2b00      	cmp	r3, #0
 8015874:	d00f      	beq.n	8015896 <_strtod_l+0x982>
 8015876:	f7ff fb35 	bl	8014ee4 <sulp>
 801587a:	0002      	movs	r2, r0
 801587c:	000b      	movs	r3, r1
 801587e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015880:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015882:	f7eb fbb1 	bl	8000fe8 <__aeabi_dadd>
 8015886:	0006      	movs	r6, r0
 8015888:	000f      	movs	r7, r1
 801588a:	e74b      	b.n	8015724 <_strtod_l+0x810>
 801588c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801588e:	4233      	tst	r3, r6
 8015890:	d100      	bne.n	8015894 <_strtod_l+0x980>
 8015892:	e747      	b.n	8015724 <_strtod_l+0x810>
 8015894:	e7e9      	b.n	801586a <_strtod_l+0x956>
 8015896:	f7ff fb25 	bl	8014ee4 <sulp>
 801589a:	0002      	movs	r2, r0
 801589c:	000b      	movs	r3, r1
 801589e:	980e      	ldr	r0, [sp, #56]	; 0x38
 80158a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80158a2:	f7ec fd39 	bl	8002318 <__aeabi_dsub>
 80158a6:	2200      	movs	r2, #0
 80158a8:	2300      	movs	r3, #0
 80158aa:	0006      	movs	r6, r0
 80158ac:	000f      	movs	r7, r1
 80158ae:	f7ea fdd5 	bl	800045c <__aeabi_dcmpeq>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d000      	beq.n	80158b8 <_strtod_l+0x9a4>
 80158b6:	e5f8      	b.n	80154aa <_strtod_l+0x596>
 80158b8:	e734      	b.n	8015724 <_strtod_l+0x810>
 80158ba:	46c0      	nop			; (mov r8, r8)
 80158bc:	fffffc02 	.word	0xfffffc02
 80158c0:	7ff00000 	.word	0x7ff00000
 80158c4:	0801c370 	.word	0x0801c370
 80158c8:	fffffbe2 	.word	0xfffffbe2
 80158cc:	000fffff 	.word	0x000fffff
 80158d0:	7fefffff 	.word	0x7fefffff
 80158d4:	39500000 	.word	0x39500000
 80158d8:	fff00000 	.word	0xfff00000
 80158dc:	9905      	ldr	r1, [sp, #20]
 80158de:	0020      	movs	r0, r4
 80158e0:	f003 fae2 	bl	8018ea8 <__ratio>
 80158e4:	2380      	movs	r3, #128	; 0x80
 80158e6:	2200      	movs	r2, #0
 80158e8:	05db      	lsls	r3, r3, #23
 80158ea:	9008      	str	r0, [sp, #32]
 80158ec:	9109      	str	r1, [sp, #36]	; 0x24
 80158ee:	f7ea fdc5 	bl	800047c <__aeabi_dcmple>
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d100      	bne.n	80158f8 <_strtod_l+0x9e4>
 80158f6:	e07f      	b.n	80159f8 <_strtod_l+0xae4>
 80158f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d04b      	beq.n	8015996 <_strtod_l+0xa82>
 80158fe:	2200      	movs	r2, #0
 8015900:	4b8a      	ldr	r3, [pc, #552]	; (8015b2c <_strtod_l+0xc18>)
 8015902:	9210      	str	r2, [sp, #64]	; 0x40
 8015904:	9311      	str	r3, [sp, #68]	; 0x44
 8015906:	4b89      	ldr	r3, [pc, #548]	; (8015b2c <_strtod_l+0xc18>)
 8015908:	9308      	str	r3, [sp, #32]
 801590a:	4a89      	ldr	r2, [pc, #548]	; (8015b30 <_strtod_l+0xc1c>)
 801590c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801590e:	4013      	ands	r3, r2
 8015910:	9314      	str	r3, [sp, #80]	; 0x50
 8015912:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015914:	4b87      	ldr	r3, [pc, #540]	; (8015b34 <_strtod_l+0xc20>)
 8015916:	429a      	cmp	r2, r3
 8015918:	d000      	beq.n	801591c <_strtod_l+0xa08>
 801591a:	e0ba      	b.n	8015a92 <_strtod_l+0xb7e>
 801591c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801591e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015920:	921a      	str	r2, [sp, #104]	; 0x68
 8015922:	931b      	str	r3, [sp, #108]	; 0x6c
 8015924:	4a84      	ldr	r2, [pc, #528]	; (8015b38 <_strtod_l+0xc24>)
 8015926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015928:	4694      	mov	ip, r2
 801592a:	4463      	add	r3, ip
 801592c:	001f      	movs	r7, r3
 801592e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015932:	0030      	movs	r0, r6
 8015934:	0039      	movs	r1, r7
 8015936:	920c      	str	r2, [sp, #48]	; 0x30
 8015938:	930d      	str	r3, [sp, #52]	; 0x34
 801593a:	f003 f9ef 	bl	8018d1c <__ulp>
 801593e:	0002      	movs	r2, r0
 8015940:	000b      	movs	r3, r1
 8015942:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015944:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015946:	f7ec fa75 	bl	8001e34 <__aeabi_dmul>
 801594a:	0032      	movs	r2, r6
 801594c:	003b      	movs	r3, r7
 801594e:	f7eb fb4b 	bl	8000fe8 <__aeabi_dadd>
 8015952:	4a77      	ldr	r2, [pc, #476]	; (8015b30 <_strtod_l+0xc1c>)
 8015954:	4b79      	ldr	r3, [pc, #484]	; (8015b3c <_strtod_l+0xc28>)
 8015956:	0006      	movs	r6, r0
 8015958:	400a      	ands	r2, r1
 801595a:	429a      	cmp	r2, r3
 801595c:	d964      	bls.n	8015a28 <_strtod_l+0xb14>
 801595e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015960:	4a77      	ldr	r2, [pc, #476]	; (8015b40 <_strtod_l+0xc2c>)
 8015962:	4293      	cmp	r3, r2
 8015964:	d103      	bne.n	801596e <_strtod_l+0xa5a>
 8015966:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015968:	3301      	adds	r3, #1
 801596a:	d100      	bne.n	801596e <_strtod_l+0xa5a>
 801596c:	e508      	b.n	8015380 <_strtod_l+0x46c>
 801596e:	2601      	movs	r6, #1
 8015970:	4f73      	ldr	r7, [pc, #460]	; (8015b40 <_strtod_l+0xc2c>)
 8015972:	4276      	negs	r6, r6
 8015974:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015976:	9804      	ldr	r0, [sp, #16]
 8015978:	f002 ff56 	bl	8018828 <_Bfree>
 801597c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801597e:	9804      	ldr	r0, [sp, #16]
 8015980:	f002 ff52 	bl	8018828 <_Bfree>
 8015984:	9905      	ldr	r1, [sp, #20]
 8015986:	9804      	ldr	r0, [sp, #16]
 8015988:	f002 ff4e 	bl	8018828 <_Bfree>
 801598c:	0021      	movs	r1, r4
 801598e:	9804      	ldr	r0, [sp, #16]
 8015990:	f002 ff4a 	bl	8018828 <_Bfree>
 8015994:	e5f4      	b.n	8015580 <_strtod_l+0x66c>
 8015996:	2e00      	cmp	r6, #0
 8015998:	d11e      	bne.n	80159d8 <_strtod_l+0xac4>
 801599a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801599c:	031b      	lsls	r3, r3, #12
 801599e:	d121      	bne.n	80159e4 <_strtod_l+0xad0>
 80159a0:	9808      	ldr	r0, [sp, #32]
 80159a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159a4:	2200      	movs	r2, #0
 80159a6:	4b61      	ldr	r3, [pc, #388]	; (8015b2c <_strtod_l+0xc18>)
 80159a8:	f7ea fd5e 	bl	8000468 <__aeabi_dcmplt>
 80159ac:	2800      	cmp	r0, #0
 80159ae:	d11f      	bne.n	80159f0 <_strtod_l+0xadc>
 80159b0:	9808      	ldr	r0, [sp, #32]
 80159b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159b4:	2200      	movs	r2, #0
 80159b6:	4b63      	ldr	r3, [pc, #396]	; (8015b44 <_strtod_l+0xc30>)
 80159b8:	f7ec fa3c 	bl	8001e34 <__aeabi_dmul>
 80159bc:	0005      	movs	r5, r0
 80159be:	9108      	str	r1, [sp, #32]
 80159c0:	2280      	movs	r2, #128	; 0x80
 80159c2:	0612      	lsls	r2, r2, #24
 80159c4:	4694      	mov	ip, r2
 80159c6:	9b08      	ldr	r3, [sp, #32]
 80159c8:	951e      	str	r5, [sp, #120]	; 0x78
 80159ca:	4463      	add	r3, ip
 80159cc:	931f      	str	r3, [sp, #124]	; 0x7c
 80159ce:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80159d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80159d2:	9210      	str	r2, [sp, #64]	; 0x40
 80159d4:	9311      	str	r3, [sp, #68]	; 0x44
 80159d6:	e798      	b.n	801590a <_strtod_l+0x9f6>
 80159d8:	2e01      	cmp	r6, #1
 80159da:	d103      	bne.n	80159e4 <_strtod_l+0xad0>
 80159dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d100      	bne.n	80159e4 <_strtod_l+0xad0>
 80159e2:	e562      	b.n	80154aa <_strtod_l+0x596>
 80159e4:	2200      	movs	r2, #0
 80159e6:	4b58      	ldr	r3, [pc, #352]	; (8015b48 <_strtod_l+0xc34>)
 80159e8:	2500      	movs	r5, #0
 80159ea:	9210      	str	r2, [sp, #64]	; 0x40
 80159ec:	9311      	str	r3, [sp, #68]	; 0x44
 80159ee:	e78a      	b.n	8015906 <_strtod_l+0x9f2>
 80159f0:	4b54      	ldr	r3, [pc, #336]	; (8015b44 <_strtod_l+0xc30>)
 80159f2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80159f4:	9308      	str	r3, [sp, #32]
 80159f6:	e7e3      	b.n	80159c0 <_strtod_l+0xaac>
 80159f8:	4b52      	ldr	r3, [pc, #328]	; (8015b44 <_strtod_l+0xc30>)
 80159fa:	9808      	ldr	r0, [sp, #32]
 80159fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80159fe:	2200      	movs	r2, #0
 8015a00:	f7ec fa18 	bl	8001e34 <__aeabi_dmul>
 8015a04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a06:	0005      	movs	r5, r0
 8015a08:	9108      	str	r1, [sp, #32]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d107      	bne.n	8015a1e <_strtod_l+0xb0a>
 8015a0e:	2380      	movs	r3, #128	; 0x80
 8015a10:	061b      	lsls	r3, r3, #24
 8015a12:	18cb      	adds	r3, r1, r3
 8015a14:	9016      	str	r0, [sp, #88]	; 0x58
 8015a16:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015a1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015a1c:	e7d9      	b.n	80159d2 <_strtod_l+0xabe>
 8015a1e:	0002      	movs	r2, r0
 8015a20:	9b08      	ldr	r3, [sp, #32]
 8015a22:	9216      	str	r2, [sp, #88]	; 0x58
 8015a24:	9317      	str	r3, [sp, #92]	; 0x5c
 8015a26:	e7f7      	b.n	8015a18 <_strtod_l+0xb04>
 8015a28:	23d4      	movs	r3, #212	; 0xd4
 8015a2a:	049b      	lsls	r3, r3, #18
 8015a2c:	18cf      	adds	r7, r1, r3
 8015a2e:	9b06      	ldr	r3, [sp, #24]
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d19f      	bne.n	8015974 <_strtod_l+0xa60>
 8015a34:	4b3e      	ldr	r3, [pc, #248]	; (8015b30 <_strtod_l+0xc1c>)
 8015a36:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a38:	970c      	str	r7, [sp, #48]	; 0x30
 8015a3a:	403b      	ands	r3, r7
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	d199      	bne.n	8015974 <_strtod_l+0xa60>
 8015a40:	9908      	ldr	r1, [sp, #32]
 8015a42:	0028      	movs	r0, r5
 8015a44:	f7ec ffcc 	bl	80029e0 <__aeabi_d2iz>
 8015a48:	f7ed f800 	bl	8002a4c <__aeabi_i2d>
 8015a4c:	000b      	movs	r3, r1
 8015a4e:	0002      	movs	r2, r0
 8015a50:	9908      	ldr	r1, [sp, #32]
 8015a52:	0028      	movs	r0, r5
 8015a54:	f7ec fc60 	bl	8002318 <__aeabi_dsub>
 8015a58:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015a5a:	9008      	str	r0, [sp, #32]
 8015a5c:	9109      	str	r1, [sp, #36]	; 0x24
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d104      	bne.n	8015a6c <_strtod_l+0xb58>
 8015a62:	2e00      	cmp	r6, #0
 8015a64:	d102      	bne.n	8015a6c <_strtod_l+0xb58>
 8015a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015a68:	031b      	lsls	r3, r3, #12
 8015a6a:	d058      	beq.n	8015b1e <_strtod_l+0xc0a>
 8015a6c:	9808      	ldr	r0, [sp, #32]
 8015a6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a70:	4a36      	ldr	r2, [pc, #216]	; (8015b4c <_strtod_l+0xc38>)
 8015a72:	4b37      	ldr	r3, [pc, #220]	; (8015b50 <_strtod_l+0xc3c>)
 8015a74:	f7ea fcf8 	bl	8000468 <__aeabi_dcmplt>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	d000      	beq.n	8015a7e <_strtod_l+0xb6a>
 8015a7c:	e489      	b.n	8015392 <_strtod_l+0x47e>
 8015a7e:	9808      	ldr	r0, [sp, #32]
 8015a80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a82:	4a34      	ldr	r2, [pc, #208]	; (8015b54 <_strtod_l+0xc40>)
 8015a84:	4b2f      	ldr	r3, [pc, #188]	; (8015b44 <_strtod_l+0xc30>)
 8015a86:	f7ea fd03 	bl	8000490 <__aeabi_dcmpgt>
 8015a8a:	2800      	cmp	r0, #0
 8015a8c:	d100      	bne.n	8015a90 <_strtod_l+0xb7c>
 8015a8e:	e771      	b.n	8015974 <_strtod_l+0xa60>
 8015a90:	e47f      	b.n	8015392 <_strtod_l+0x47e>
 8015a92:	9b06      	ldr	r3, [sp, #24]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d02a      	beq.n	8015aee <_strtod_l+0xbda>
 8015a98:	23d4      	movs	r3, #212	; 0xd4
 8015a9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015a9c:	04db      	lsls	r3, r3, #19
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d825      	bhi.n	8015aee <_strtod_l+0xbda>
 8015aa2:	4a2d      	ldr	r2, [pc, #180]	; (8015b58 <_strtod_l+0xc44>)
 8015aa4:	4b2d      	ldr	r3, [pc, #180]	; (8015b5c <_strtod_l+0xc48>)
 8015aa6:	0028      	movs	r0, r5
 8015aa8:	9908      	ldr	r1, [sp, #32]
 8015aaa:	f7ea fce7 	bl	800047c <__aeabi_dcmple>
 8015aae:	2800      	cmp	r0, #0
 8015ab0:	d016      	beq.n	8015ae0 <_strtod_l+0xbcc>
 8015ab2:	0028      	movs	r0, r5
 8015ab4:	9908      	ldr	r1, [sp, #32]
 8015ab6:	f7ea fd9b 	bl	80005f0 <__aeabi_d2uiz>
 8015aba:	2800      	cmp	r0, #0
 8015abc:	d100      	bne.n	8015ac0 <_strtod_l+0xbac>
 8015abe:	3001      	adds	r0, #1
 8015ac0:	f7ec fffe 	bl	8002ac0 <__aeabi_ui2d>
 8015ac4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015ac6:	0005      	movs	r5, r0
 8015ac8:	9108      	str	r1, [sp, #32]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d122      	bne.n	8015b14 <_strtod_l+0xc00>
 8015ace:	2380      	movs	r3, #128	; 0x80
 8015ad0:	061b      	lsls	r3, r3, #24
 8015ad2:	18cb      	adds	r3, r1, r3
 8015ad4:	9018      	str	r0, [sp, #96]	; 0x60
 8015ad6:	9319      	str	r3, [sp, #100]	; 0x64
 8015ad8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015ada:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015adc:	9210      	str	r2, [sp, #64]	; 0x40
 8015ade:	9311      	str	r3, [sp, #68]	; 0x44
 8015ae0:	22d6      	movs	r2, #214	; 0xd6
 8015ae2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ae4:	04d2      	lsls	r2, r2, #19
 8015ae6:	189b      	adds	r3, r3, r2
 8015ae8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015aea:	1a9b      	subs	r3, r3, r2
 8015aec:	9311      	str	r3, [sp, #68]	; 0x44
 8015aee:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015af0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015af2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015af4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015af6:	f003 f911 	bl	8018d1c <__ulp>
 8015afa:	0002      	movs	r2, r0
 8015afc:	000b      	movs	r3, r1
 8015afe:	0030      	movs	r0, r6
 8015b00:	0039      	movs	r1, r7
 8015b02:	f7ec f997 	bl	8001e34 <__aeabi_dmul>
 8015b06:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015b08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b0a:	f7eb fa6d 	bl	8000fe8 <__aeabi_dadd>
 8015b0e:	0006      	movs	r6, r0
 8015b10:	000f      	movs	r7, r1
 8015b12:	e78c      	b.n	8015a2e <_strtod_l+0xb1a>
 8015b14:	0002      	movs	r2, r0
 8015b16:	9b08      	ldr	r3, [sp, #32]
 8015b18:	9218      	str	r2, [sp, #96]	; 0x60
 8015b1a:	9319      	str	r3, [sp, #100]	; 0x64
 8015b1c:	e7dc      	b.n	8015ad8 <_strtod_l+0xbc4>
 8015b1e:	4a0b      	ldr	r2, [pc, #44]	; (8015b4c <_strtod_l+0xc38>)
 8015b20:	4b0f      	ldr	r3, [pc, #60]	; (8015b60 <_strtod_l+0xc4c>)
 8015b22:	9808      	ldr	r0, [sp, #32]
 8015b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b26:	f7ea fc9f 	bl	8000468 <__aeabi_dcmplt>
 8015b2a:	e7ae      	b.n	8015a8a <_strtod_l+0xb76>
 8015b2c:	3ff00000 	.word	0x3ff00000
 8015b30:	7ff00000 	.word	0x7ff00000
 8015b34:	7fe00000 	.word	0x7fe00000
 8015b38:	fcb00000 	.word	0xfcb00000
 8015b3c:	7c9fffff 	.word	0x7c9fffff
 8015b40:	7fefffff 	.word	0x7fefffff
 8015b44:	3fe00000 	.word	0x3fe00000
 8015b48:	bff00000 	.word	0xbff00000
 8015b4c:	94a03595 	.word	0x94a03595
 8015b50:	3fdfffff 	.word	0x3fdfffff
 8015b54:	35afe535 	.word	0x35afe535
 8015b58:	ffc00000 	.word	0xffc00000
 8015b5c:	41dfffff 	.word	0x41dfffff
 8015b60:	3fcfffff 	.word	0x3fcfffff

08015b64 <strtod>:
 8015b64:	4b06      	ldr	r3, [pc, #24]	; (8015b80 <strtod+0x1c>)
 8015b66:	b510      	push	{r4, lr}
 8015b68:	0004      	movs	r4, r0
 8015b6a:	6818      	ldr	r0, [r3, #0]
 8015b6c:	000a      	movs	r2, r1
 8015b6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d100      	bne.n	8015b76 <strtod+0x12>
 8015b74:	4b03      	ldr	r3, [pc, #12]	; (8015b84 <strtod+0x20>)
 8015b76:	0021      	movs	r1, r4
 8015b78:	f7ff f9cc 	bl	8014f14 <_strtod_l>
 8015b7c:	bd10      	pop	{r4, pc}
 8015b7e:	46c0      	nop			; (mov r8, r8)
 8015b80:	20000118 	.word	0x20000118
 8015b84:	20000548 	.word	0x20000548

08015b88 <strtok>:
 8015b88:	4b03      	ldr	r3, [pc, #12]	; (8015b98 <strtok+0x10>)
 8015b8a:	b510      	push	{r4, lr}
 8015b8c:	681a      	ldr	r2, [r3, #0]
 8015b8e:	2301      	movs	r3, #1
 8015b90:	325c      	adds	r2, #92	; 0x5c
 8015b92:	f000 f803 	bl	8015b9c <__strtok_r>
 8015b96:	bd10      	pop	{r4, pc}
 8015b98:	20000118 	.word	0x20000118

08015b9c <__strtok_r>:
 8015b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	d104      	bne.n	8015bac <__strtok_r+0x10>
 8015ba2:	6810      	ldr	r0, [r2, #0]
 8015ba4:	2800      	cmp	r0, #0
 8015ba6:	d101      	bne.n	8015bac <__strtok_r+0x10>
 8015ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015baa:	0020      	movs	r0, r4
 8015bac:	000e      	movs	r6, r1
 8015bae:	7805      	ldrb	r5, [r0, #0]
 8015bb0:	1c44      	adds	r4, r0, #1
 8015bb2:	7837      	ldrb	r7, [r6, #0]
 8015bb4:	2f00      	cmp	r7, #0
 8015bb6:	d104      	bne.n	8015bc2 <__strtok_r+0x26>
 8015bb8:	2d00      	cmp	r5, #0
 8015bba:	d110      	bne.n	8015bde <__strtok_r+0x42>
 8015bbc:	6015      	str	r5, [r2, #0]
 8015bbe:	0028      	movs	r0, r5
 8015bc0:	e7f2      	b.n	8015ba8 <__strtok_r+0xc>
 8015bc2:	3601      	adds	r6, #1
 8015bc4:	42bd      	cmp	r5, r7
 8015bc6:	d1f4      	bne.n	8015bb2 <__strtok_r+0x16>
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d1ee      	bne.n	8015baa <__strtok_r+0xe>
 8015bcc:	6014      	str	r4, [r2, #0]
 8015bce:	7003      	strb	r3, [r0, #0]
 8015bd0:	e7ea      	b.n	8015ba8 <__strtok_r+0xc>
 8015bd2:	0033      	movs	r3, r6
 8015bd4:	e00d      	b.n	8015bf2 <__strtok_r+0x56>
 8015bd6:	3501      	adds	r5, #1
 8015bd8:	2f00      	cmp	r7, #0
 8015bda:	d103      	bne.n	8015be4 <__strtok_r+0x48>
 8015bdc:	001c      	movs	r4, r3
 8015bde:	000d      	movs	r5, r1
 8015be0:	7826      	ldrb	r6, [r4, #0]
 8015be2:	1c63      	adds	r3, r4, #1
 8015be4:	782f      	ldrb	r7, [r5, #0]
 8015be6:	42be      	cmp	r6, r7
 8015be8:	d1f5      	bne.n	8015bd6 <__strtok_r+0x3a>
 8015bea:	2e00      	cmp	r6, #0
 8015bec:	d0f1      	beq.n	8015bd2 <__strtok_r+0x36>
 8015bee:	2100      	movs	r1, #0
 8015bf0:	7021      	strb	r1, [r4, #0]
 8015bf2:	6013      	str	r3, [r2, #0]
 8015bf4:	e7d8      	b.n	8015ba8 <__strtok_r+0xc>
	...

08015bf8 <_strtol_l.isra.0>:
 8015bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bfa:	001f      	movs	r7, r3
 8015bfc:	000e      	movs	r6, r1
 8015bfe:	b087      	sub	sp, #28
 8015c00:	9005      	str	r0, [sp, #20]
 8015c02:	9101      	str	r1, [sp, #4]
 8015c04:	9202      	str	r2, [sp, #8]
 8015c06:	980c      	ldr	r0, [sp, #48]	; 0x30
 8015c08:	7834      	ldrb	r4, [r6, #0]
 8015c0a:	f7fe fc6d 	bl	80144e8 <__locale_ctype_ptr_l>
 8015c0e:	2208      	movs	r2, #8
 8015c10:	1900      	adds	r0, r0, r4
 8015c12:	7843      	ldrb	r3, [r0, #1]
 8015c14:	1c75      	adds	r5, r6, #1
 8015c16:	4013      	ands	r3, r2
 8015c18:	d136      	bne.n	8015c88 <_strtol_l.isra.0+0x90>
 8015c1a:	2c2d      	cmp	r4, #45	; 0x2d
 8015c1c:	d136      	bne.n	8015c8c <_strtol_l.isra.0+0x94>
 8015c1e:	1cb5      	adds	r5, r6, #2
 8015c20:	7874      	ldrb	r4, [r6, #1]
 8015c22:	2601      	movs	r6, #1
 8015c24:	2f00      	cmp	r7, #0
 8015c26:	d062      	beq.n	8015cee <_strtol_l.isra.0+0xf6>
 8015c28:	2f10      	cmp	r7, #16
 8015c2a:	d109      	bne.n	8015c40 <_strtol_l.isra.0+0x48>
 8015c2c:	2c30      	cmp	r4, #48	; 0x30
 8015c2e:	d107      	bne.n	8015c40 <_strtol_l.isra.0+0x48>
 8015c30:	2220      	movs	r2, #32
 8015c32:	782b      	ldrb	r3, [r5, #0]
 8015c34:	4393      	bics	r3, r2
 8015c36:	2b58      	cmp	r3, #88	; 0x58
 8015c38:	d154      	bne.n	8015ce4 <_strtol_l.isra.0+0xec>
 8015c3a:	2710      	movs	r7, #16
 8015c3c:	786c      	ldrb	r4, [r5, #1]
 8015c3e:	3502      	adds	r5, #2
 8015c40:	4b2d      	ldr	r3, [pc, #180]	; (8015cf8 <_strtol_l.isra.0+0x100>)
 8015c42:	0039      	movs	r1, r7
 8015c44:	18f3      	adds	r3, r6, r3
 8015c46:	0018      	movs	r0, r3
 8015c48:	9303      	str	r3, [sp, #12]
 8015c4a:	f7ea fb07 	bl	800025c <__aeabi_uidivmod>
 8015c4e:	9104      	str	r1, [sp, #16]
 8015c50:	2101      	movs	r1, #1
 8015c52:	2300      	movs	r3, #0
 8015c54:	4249      	negs	r1, r1
 8015c56:	0002      	movs	r2, r0
 8015c58:	468c      	mov	ip, r1
 8015c5a:	0018      	movs	r0, r3
 8015c5c:	0021      	movs	r1, r4
 8015c5e:	3930      	subs	r1, #48	; 0x30
 8015c60:	2909      	cmp	r1, #9
 8015c62:	d81a      	bhi.n	8015c9a <_strtol_l.isra.0+0xa2>
 8015c64:	000c      	movs	r4, r1
 8015c66:	42a7      	cmp	r7, r4
 8015c68:	dd23      	ble.n	8015cb2 <_strtol_l.isra.0+0xba>
 8015c6a:	1c59      	adds	r1, r3, #1
 8015c6c:	d009      	beq.n	8015c82 <_strtol_l.isra.0+0x8a>
 8015c6e:	4663      	mov	r3, ip
 8015c70:	4282      	cmp	r2, r0
 8015c72:	d306      	bcc.n	8015c82 <_strtol_l.isra.0+0x8a>
 8015c74:	d102      	bne.n	8015c7c <_strtol_l.isra.0+0x84>
 8015c76:	9904      	ldr	r1, [sp, #16]
 8015c78:	42a1      	cmp	r1, r4
 8015c7a:	db02      	blt.n	8015c82 <_strtol_l.isra.0+0x8a>
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	4378      	muls	r0, r7
 8015c80:	1820      	adds	r0, r4, r0
 8015c82:	782c      	ldrb	r4, [r5, #0]
 8015c84:	3501      	adds	r5, #1
 8015c86:	e7e9      	b.n	8015c5c <_strtol_l.isra.0+0x64>
 8015c88:	002e      	movs	r6, r5
 8015c8a:	e7bc      	b.n	8015c06 <_strtol_l.isra.0+0xe>
 8015c8c:	2c2b      	cmp	r4, #43	; 0x2b
 8015c8e:	d001      	beq.n	8015c94 <_strtol_l.isra.0+0x9c>
 8015c90:	001e      	movs	r6, r3
 8015c92:	e7c7      	b.n	8015c24 <_strtol_l.isra.0+0x2c>
 8015c94:	1cb5      	adds	r5, r6, #2
 8015c96:	7874      	ldrb	r4, [r6, #1]
 8015c98:	e7fa      	b.n	8015c90 <_strtol_l.isra.0+0x98>
 8015c9a:	0021      	movs	r1, r4
 8015c9c:	3941      	subs	r1, #65	; 0x41
 8015c9e:	2919      	cmp	r1, #25
 8015ca0:	d801      	bhi.n	8015ca6 <_strtol_l.isra.0+0xae>
 8015ca2:	3c37      	subs	r4, #55	; 0x37
 8015ca4:	e7df      	b.n	8015c66 <_strtol_l.isra.0+0x6e>
 8015ca6:	0021      	movs	r1, r4
 8015ca8:	3961      	subs	r1, #97	; 0x61
 8015caa:	2919      	cmp	r1, #25
 8015cac:	d801      	bhi.n	8015cb2 <_strtol_l.isra.0+0xba>
 8015cae:	3c57      	subs	r4, #87	; 0x57
 8015cb0:	e7d9      	b.n	8015c66 <_strtol_l.isra.0+0x6e>
 8015cb2:	1c5a      	adds	r2, r3, #1
 8015cb4:	d108      	bne.n	8015cc8 <_strtol_l.isra.0+0xd0>
 8015cb6:	9a05      	ldr	r2, [sp, #20]
 8015cb8:	3323      	adds	r3, #35	; 0x23
 8015cba:	6013      	str	r3, [r2, #0]
 8015cbc:	9b02      	ldr	r3, [sp, #8]
 8015cbe:	9803      	ldr	r0, [sp, #12]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d109      	bne.n	8015cd8 <_strtol_l.isra.0+0xe0>
 8015cc4:	b007      	add	sp, #28
 8015cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015cc8:	2e00      	cmp	r6, #0
 8015cca:	d000      	beq.n	8015cce <_strtol_l.isra.0+0xd6>
 8015ccc:	4240      	negs	r0, r0
 8015cce:	9a02      	ldr	r2, [sp, #8]
 8015cd0:	2a00      	cmp	r2, #0
 8015cd2:	d0f7      	beq.n	8015cc4 <_strtol_l.isra.0+0xcc>
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d001      	beq.n	8015cdc <_strtol_l.isra.0+0xe4>
 8015cd8:	1e6b      	subs	r3, r5, #1
 8015cda:	9301      	str	r3, [sp, #4]
 8015cdc:	9b02      	ldr	r3, [sp, #8]
 8015cde:	9a01      	ldr	r2, [sp, #4]
 8015ce0:	601a      	str	r2, [r3, #0]
 8015ce2:	e7ef      	b.n	8015cc4 <_strtol_l.isra.0+0xcc>
 8015ce4:	2430      	movs	r4, #48	; 0x30
 8015ce6:	2f00      	cmp	r7, #0
 8015ce8:	d1aa      	bne.n	8015c40 <_strtol_l.isra.0+0x48>
 8015cea:	2708      	movs	r7, #8
 8015cec:	e7a8      	b.n	8015c40 <_strtol_l.isra.0+0x48>
 8015cee:	2c30      	cmp	r4, #48	; 0x30
 8015cf0:	d09e      	beq.n	8015c30 <_strtol_l.isra.0+0x38>
 8015cf2:	270a      	movs	r7, #10
 8015cf4:	e7a4      	b.n	8015c40 <_strtol_l.isra.0+0x48>
 8015cf6:	46c0      	nop			; (mov r8, r8)
 8015cf8:	7fffffff 	.word	0x7fffffff

08015cfc <strtol>:
 8015cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015cfe:	0013      	movs	r3, r2
 8015d00:	4a06      	ldr	r2, [pc, #24]	; (8015d1c <strtol+0x20>)
 8015d02:	0005      	movs	r5, r0
 8015d04:	6810      	ldr	r0, [r2, #0]
 8015d06:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8015d08:	2c00      	cmp	r4, #0
 8015d0a:	d100      	bne.n	8015d0e <strtol+0x12>
 8015d0c:	4c04      	ldr	r4, [pc, #16]	; (8015d20 <strtol+0x24>)
 8015d0e:	000a      	movs	r2, r1
 8015d10:	9400      	str	r4, [sp, #0]
 8015d12:	0029      	movs	r1, r5
 8015d14:	f7ff ff70 	bl	8015bf8 <_strtol_l.isra.0>
 8015d18:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8015d1a:	46c0      	nop			; (mov r8, r8)
 8015d1c:	20000118 	.word	0x20000118
 8015d20:	20000548 	.word	0x20000548

08015d24 <_svfprintf_r>:
 8015d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d26:	b0d9      	sub	sp, #356	; 0x164
 8015d28:	910b      	str	r1, [sp, #44]	; 0x2c
 8015d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8015d2c:	001c      	movs	r4, r3
 8015d2e:	900a      	str	r0, [sp, #40]	; 0x28
 8015d30:	f002 fd26 	bl	8018780 <_localeconv_r>
 8015d34:	6803      	ldr	r3, [r0, #0]
 8015d36:	0018      	movs	r0, r3
 8015d38:	931c      	str	r3, [sp, #112]	; 0x70
 8015d3a:	f7ea f9ed 	bl	8000118 <strlen>
 8015d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d40:	9014      	str	r0, [sp, #80]	; 0x50
 8015d42:	899b      	ldrh	r3, [r3, #12]
 8015d44:	061b      	lsls	r3, r3, #24
 8015d46:	d518      	bpl.n	8015d7a <_svfprintf_r+0x56>
 8015d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d4a:	691b      	ldr	r3, [r3, #16]
 8015d4c:	9308      	str	r3, [sp, #32]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d113      	bne.n	8015d7a <_svfprintf_r+0x56>
 8015d52:	2140      	movs	r1, #64	; 0x40
 8015d54:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d56:	f7fe fbed 	bl	8014534 <_malloc_r>
 8015d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d5c:	6018      	str	r0, [r3, #0]
 8015d5e:	6118      	str	r0, [r3, #16]
 8015d60:	2800      	cmp	r0, #0
 8015d62:	d107      	bne.n	8015d74 <_svfprintf_r+0x50>
 8015d64:	230c      	movs	r3, #12
 8015d66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d68:	6013      	str	r3, [r2, #0]
 8015d6a:	3b0d      	subs	r3, #13
 8015d6c:	9315      	str	r3, [sp, #84]	; 0x54
 8015d6e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015d70:	b059      	add	sp, #356	; 0x164
 8015d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d74:	2340      	movs	r3, #64	; 0x40
 8015d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d78:	6153      	str	r3, [r2, #20]
 8015d7a:	2600      	movs	r6, #0
 8015d7c:	af2f      	add	r7, sp, #188	; 0xbc
 8015d7e:	972c      	str	r7, [sp, #176]	; 0xb0
 8015d80:	962e      	str	r6, [sp, #184]	; 0xb8
 8015d82:	962d      	str	r6, [sp, #180]	; 0xb4
 8015d84:	960d      	str	r6, [sp, #52]	; 0x34
 8015d86:	961a      	str	r6, [sp, #104]	; 0x68
 8015d88:	9619      	str	r6, [sp, #100]	; 0x64
 8015d8a:	961e      	str	r6, [sp, #120]	; 0x78
 8015d8c:	961d      	str	r6, [sp, #116]	; 0x74
 8015d8e:	9613      	str	r6, [sp, #76]	; 0x4c
 8015d90:	961b      	str	r6, [sp, #108]	; 0x6c
 8015d92:	961f      	str	r6, [sp, #124]	; 0x7c
 8015d94:	9615      	str	r6, [sp, #84]	; 0x54
 8015d96:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8015d98:	782b      	ldrb	r3, [r5, #0]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d002      	beq.n	8015da4 <_svfprintf_r+0x80>
 8015d9e:	2b25      	cmp	r3, #37	; 0x25
 8015da0:	d000      	beq.n	8015da4 <_svfprintf_r+0x80>
 8015da2:	e095      	b.n	8015ed0 <_svfprintf_r+0x1ac>
 8015da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015da6:	1aee      	subs	r6, r5, r3
 8015da8:	d017      	beq.n	8015dda <_svfprintf_r+0xb6>
 8015daa:	603b      	str	r3, [r7, #0]
 8015dac:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015dae:	607e      	str	r6, [r7, #4]
 8015db0:	199b      	adds	r3, r3, r6
 8015db2:	932e      	str	r3, [sp, #184]	; 0xb8
 8015db4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015db6:	3708      	adds	r7, #8
 8015db8:	9308      	str	r3, [sp, #32]
 8015dba:	3301      	adds	r3, #1
 8015dbc:	932d      	str	r3, [sp, #180]	; 0xb4
 8015dbe:	2b07      	cmp	r3, #7
 8015dc0:	dd08      	ble.n	8015dd4 <_svfprintf_r+0xb0>
 8015dc2:	aa2c      	add	r2, sp, #176	; 0xb0
 8015dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015dc6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015dc8:	f003 f900 	bl	8018fcc <__ssprint_r>
 8015dcc:	2800      	cmp	r0, #0
 8015dce:	d000      	beq.n	8015dd2 <_svfprintf_r+0xae>
 8015dd0:	e2d9      	b.n	8016386 <_svfprintf_r+0x662>
 8015dd2:	af2f      	add	r7, sp, #188	; 0xbc
 8015dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dd6:	199b      	adds	r3, r3, r6
 8015dd8:	9315      	str	r3, [sp, #84]	; 0x54
 8015dda:	782b      	ldrb	r3, [r5, #0]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d101      	bne.n	8015de4 <_svfprintf_r+0xc0>
 8015de0:	f001 f9e5 	bl	80171ae <_svfprintf_r+0x148a>
 8015de4:	1c6b      	adds	r3, r5, #1
 8015de6:	221b      	movs	r2, #27
 8015de8:	9311      	str	r3, [sp, #68]	; 0x44
 8015dea:	2300      	movs	r3, #0
 8015dec:	a91e      	add	r1, sp, #120	; 0x78
 8015dee:	1852      	adds	r2, r2, r1
 8015df0:	7013      	strb	r3, [r2, #0]
 8015df2:	2201      	movs	r2, #1
 8015df4:	001e      	movs	r6, r3
 8015df6:	2520      	movs	r5, #32
 8015df8:	4252      	negs	r2, r2
 8015dfa:	9208      	str	r2, [sp, #32]
 8015dfc:	9316      	str	r3, [sp, #88]	; 0x58
 8015dfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e00:	781b      	ldrb	r3, [r3, #0]
 8015e02:	930e      	str	r3, [sp, #56]	; 0x38
 8015e04:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e06:	3301      	adds	r3, #1
 8015e08:	9311      	str	r3, [sp, #68]	; 0x44
 8015e0a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015e0c:	3820      	subs	r0, #32
 8015e0e:	285a      	cmp	r0, #90	; 0x5a
 8015e10:	d901      	bls.n	8015e16 <_svfprintf_r+0xf2>
 8015e12:	f000 fe3d 	bl	8016a90 <_svfprintf_r+0xd6c>
 8015e16:	f7ea f991 	bl	800013c <__gnu_thumb1_case_shi>
 8015e1a:	009e      	.short	0x009e
 8015e1c:	063b063b 	.word	0x063b063b
 8015e20:	063b00a7 	.word	0x063b00a7
 8015e24:	063b063b 	.word	0x063b063b
 8015e28:	063b0080 	.word	0x063b0080
 8015e2c:	00a9063b 	.word	0x00a9063b
 8015e30:	063b00b3 	.word	0x063b00b3
 8015e34:	00b900b1 	.word	0x00b900b1
 8015e38:	00dd063b 	.word	0x00dd063b
 8015e3c:	00df00df 	.word	0x00df00df
 8015e40:	00df00df 	.word	0x00df00df
 8015e44:	00df00df 	.word	0x00df00df
 8015e48:	00df00df 	.word	0x00df00df
 8015e4c:	063b00df 	.word	0x063b00df
 8015e50:	063b063b 	.word	0x063b063b
 8015e54:	063b063b 	.word	0x063b063b
 8015e58:	063b063b 	.word	0x063b063b
 8015e5c:	063b0240 	.word	0x063b0240
 8015e60:	01fd010a 	.word	0x01fd010a
 8015e64:	02400240 	.word	0x02400240
 8015e68:	063b0240 	.word	0x063b0240
 8015e6c:	063b063b 	.word	0x063b063b
 8015e70:	00f1063b 	.word	0x00f1063b
 8015e74:	063b063b 	.word	0x063b063b
 8015e78:	063b04e2 	.word	0x063b04e2
 8015e7c:	063b063b 	.word	0x063b063b
 8015e80:	063b0537 	.word	0x063b0537
 8015e84:	063b0557 	.word	0x063b0557
 8015e88:	005d063b 	.word	0x005d063b
 8015e8c:	063b063b 	.word	0x063b063b
 8015e90:	063b063b 	.word	0x063b063b
 8015e94:	063b063b 	.word	0x063b063b
 8015e98:	063b063b 	.word	0x063b063b
 8015e9c:	063b0240 	.word	0x063b0240
 8015ea0:	01ff010a 	.word	0x01ff010a
 8015ea4:	02400240 	.word	0x02400240
 8015ea8:	00f30240 	.word	0x00f30240
 8015eac:	010601ff 	.word	0x010601ff
 8015eb0:	00ff063b 	.word	0x00ff063b
 8015eb4:	04c5063b 	.word	0x04c5063b
 8015eb8:	052704e4 	.word	0x052704e4
 8015ebc:	063b0106 	.word	0x063b0106
 8015ec0:	fff20537 	.word	0xfff20537
 8015ec4:	063b0559 	.word	0x063b0559
 8015ec8:	0582063b 	.word	0x0582063b
 8015ecc:	fff2063b 	.word	0xfff2063b
 8015ed0:	3501      	adds	r5, #1
 8015ed2:	e761      	b.n	8015d98 <_svfprintf_r+0x74>
 8015ed4:	4bcb      	ldr	r3, [pc, #812]	; (8016204 <_svfprintf_r+0x4e0>)
 8015ed6:	2220      	movs	r2, #32
 8015ed8:	931e      	str	r3, [sp, #120]	; 0x78
 8015eda:	4032      	ands	r2, r6
 8015edc:	d101      	bne.n	8015ee2 <_svfprintf_r+0x1be>
 8015ede:	f000 fd21 	bl	8016924 <_svfprintf_r+0xc00>
 8015ee2:	2307      	movs	r3, #7
 8015ee4:	3407      	adds	r4, #7
 8015ee6:	439c      	bics	r4, r3
 8015ee8:	0023      	movs	r3, r4
 8015eea:	3308      	adds	r3, #8
 8015eec:	9312      	str	r3, [sp, #72]	; 0x48
 8015eee:	6823      	ldr	r3, [r4, #0]
 8015ef0:	6864      	ldr	r4, [r4, #4]
 8015ef2:	9306      	str	r3, [sp, #24]
 8015ef4:	9407      	str	r4, [sp, #28]
 8015ef6:	07f3      	lsls	r3, r6, #31
 8015ef8:	d50a      	bpl.n	8015f10 <_svfprintf_r+0x1ec>
 8015efa:	9b06      	ldr	r3, [sp, #24]
 8015efc:	9a07      	ldr	r2, [sp, #28]
 8015efe:	4313      	orrs	r3, r2
 8015f00:	d006      	beq.n	8015f10 <_svfprintf_r+0x1ec>
 8015f02:	2230      	movs	r2, #48	; 0x30
 8015f04:	ab25      	add	r3, sp, #148	; 0x94
 8015f06:	701a      	strb	r2, [r3, #0]
 8015f08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015f0a:	705a      	strb	r2, [r3, #1]
 8015f0c:	2302      	movs	r3, #2
 8015f0e:	431e      	orrs	r6, r3
 8015f10:	4bbd      	ldr	r3, [pc, #756]	; (8016208 <_svfprintf_r+0x4e4>)
 8015f12:	401e      	ands	r6, r3
 8015f14:	2302      	movs	r3, #2
 8015f16:	f000 fc74 	bl	8016802 <_svfprintf_r+0xade>
 8015f1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f1c:	f002 fc30 	bl	8018780 <_localeconv_r>
 8015f20:	6843      	ldr	r3, [r0, #4]
 8015f22:	0018      	movs	r0, r3
 8015f24:	931f      	str	r3, [sp, #124]	; 0x7c
 8015f26:	f7ea f8f7 	bl	8000118 <strlen>
 8015f2a:	901b      	str	r0, [sp, #108]	; 0x6c
 8015f2c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015f2e:	f002 fc27 	bl	8018780 <_localeconv_r>
 8015f32:	6883      	ldr	r3, [r0, #8]
 8015f34:	9313      	str	r3, [sp, #76]	; 0x4c
 8015f36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d100      	bne.n	8015f3e <_svfprintf_r+0x21a>
 8015f3c:	e75f      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d100      	bne.n	8015f46 <_svfprintf_r+0x222>
 8015f44:	e75b      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d100      	bne.n	8015f4e <_svfprintf_r+0x22a>
 8015f4c:	e757      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f4e:	2380      	movs	r3, #128	; 0x80
 8015f50:	00db      	lsls	r3, r3, #3
 8015f52:	431e      	orrs	r6, r3
 8015f54:	e753      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f56:	231b      	movs	r3, #27
 8015f58:	aa1e      	add	r2, sp, #120	; 0x78
 8015f5a:	189b      	adds	r3, r3, r2
 8015f5c:	781a      	ldrb	r2, [r3, #0]
 8015f5e:	2a00      	cmp	r2, #0
 8015f60:	d000      	beq.n	8015f64 <_svfprintf_r+0x240>
 8015f62:	e74c      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f64:	701d      	strb	r5, [r3, #0]
 8015f66:	e74a      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f68:	2301      	movs	r3, #1
 8015f6a:	e7f2      	b.n	8015f52 <_svfprintf_r+0x22e>
 8015f6c:	6823      	ldr	r3, [r4, #0]
 8015f6e:	3404      	adds	r4, #4
 8015f70:	9316      	str	r3, [sp, #88]	; 0x58
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	db00      	blt.n	8015f78 <_svfprintf_r+0x254>
 8015f76:	e742      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f78:	425b      	negs	r3, r3
 8015f7a:	9316      	str	r3, [sp, #88]	; 0x58
 8015f7c:	2304      	movs	r3, #4
 8015f7e:	e7e8      	b.n	8015f52 <_svfprintf_r+0x22e>
 8015f80:	231b      	movs	r3, #27
 8015f82:	aa1e      	add	r2, sp, #120	; 0x78
 8015f84:	189b      	adds	r3, r3, r2
 8015f86:	222b      	movs	r2, #43	; 0x2b
 8015f88:	701a      	strb	r2, [r3, #0]
 8015f8a:	e738      	b.n	8015dfe <_svfprintf_r+0xda>
 8015f8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f90:	7812      	ldrb	r2, [r2, #0]
 8015f92:	3301      	adds	r3, #1
 8015f94:	920e      	str	r2, [sp, #56]	; 0x38
 8015f96:	2a2a      	cmp	r2, #42	; 0x2a
 8015f98:	d008      	beq.n	8015fac <_svfprintf_r+0x288>
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	9208      	str	r2, [sp, #32]
 8015f9e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015fa0:	001a      	movs	r2, r3
 8015fa2:	3930      	subs	r1, #48	; 0x30
 8015fa4:	2909      	cmp	r1, #9
 8015fa6:	d90c      	bls.n	8015fc2 <_svfprintf_r+0x29e>
 8015fa8:	9211      	str	r2, [sp, #68]	; 0x44
 8015faa:	e72e      	b.n	8015e0a <_svfprintf_r+0xe6>
 8015fac:	6821      	ldr	r1, [r4, #0]
 8015fae:	1d22      	adds	r2, r4, #4
 8015fb0:	9108      	str	r1, [sp, #32]
 8015fb2:	2900      	cmp	r1, #0
 8015fb4:	da02      	bge.n	8015fbc <_svfprintf_r+0x298>
 8015fb6:	2101      	movs	r1, #1
 8015fb8:	4249      	negs	r1, r1
 8015fba:	9108      	str	r1, [sp, #32]
 8015fbc:	0014      	movs	r4, r2
 8015fbe:	9311      	str	r3, [sp, #68]	; 0x44
 8015fc0:	e71d      	b.n	8015dfe <_svfprintf_r+0xda>
 8015fc2:	200a      	movs	r0, #10
 8015fc4:	9a08      	ldr	r2, [sp, #32]
 8015fc6:	4342      	muls	r2, r0
 8015fc8:	1852      	adds	r2, r2, r1
 8015fca:	9208      	str	r2, [sp, #32]
 8015fcc:	781a      	ldrb	r2, [r3, #0]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	920e      	str	r2, [sp, #56]	; 0x38
 8015fd2:	e7e4      	b.n	8015f9e <_svfprintf_r+0x27a>
 8015fd4:	2380      	movs	r3, #128	; 0x80
 8015fd6:	e7bc      	b.n	8015f52 <_svfprintf_r+0x22e>
 8015fd8:	2300      	movs	r3, #0
 8015fda:	9316      	str	r3, [sp, #88]	; 0x58
 8015fdc:	220a      	movs	r2, #10
 8015fde:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015fe0:	4353      	muls	r3, r2
 8015fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015fe4:	3a30      	subs	r2, #48	; 0x30
 8015fe6:	18d3      	adds	r3, r2, r3
 8015fe8:	9316      	str	r3, [sp, #88]	; 0x58
 8015fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fec:	1c5a      	adds	r2, r3, #1
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	9211      	str	r2, [sp, #68]	; 0x44
 8015ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8015ff4:	3b30      	subs	r3, #48	; 0x30
 8015ff6:	2b09      	cmp	r3, #9
 8015ff8:	d9f0      	bls.n	8015fdc <_svfprintf_r+0x2b8>
 8015ffa:	e7d5      	b.n	8015fa8 <_svfprintf_r+0x284>
 8015ffc:	2308      	movs	r3, #8
 8015ffe:	e7a8      	b.n	8015f52 <_svfprintf_r+0x22e>
 8016000:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016002:	781b      	ldrb	r3, [r3, #0]
 8016004:	2b68      	cmp	r3, #104	; 0x68
 8016006:	d105      	bne.n	8016014 <_svfprintf_r+0x2f0>
 8016008:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801600a:	3301      	adds	r3, #1
 801600c:	9311      	str	r3, [sp, #68]	; 0x44
 801600e:	2380      	movs	r3, #128	; 0x80
 8016010:	009b      	lsls	r3, r3, #2
 8016012:	e79e      	b.n	8015f52 <_svfprintf_r+0x22e>
 8016014:	2340      	movs	r3, #64	; 0x40
 8016016:	e79c      	b.n	8015f52 <_svfprintf_r+0x22e>
 8016018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801601a:	781b      	ldrb	r3, [r3, #0]
 801601c:	2b6c      	cmp	r3, #108	; 0x6c
 801601e:	d104      	bne.n	801602a <_svfprintf_r+0x306>
 8016020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016022:	3301      	adds	r3, #1
 8016024:	9311      	str	r3, [sp, #68]	; 0x44
 8016026:	432e      	orrs	r6, r5
 8016028:	e6e9      	b.n	8015dfe <_svfprintf_r+0xda>
 801602a:	2310      	movs	r3, #16
 801602c:	e791      	b.n	8015f52 <_svfprintf_r+0x22e>
 801602e:	1d23      	adds	r3, r4, #4
 8016030:	6822      	ldr	r2, [r4, #0]
 8016032:	9312      	str	r3, [sp, #72]	; 0x48
 8016034:	ab3f      	add	r3, sp, #252	; 0xfc
 8016036:	701a      	strb	r2, [r3, #0]
 8016038:	221b      	movs	r2, #27
 801603a:	2000      	movs	r0, #0
 801603c:	a91e      	add	r1, sp, #120	; 0x78
 801603e:	1852      	adds	r2, r2, r1
 8016040:	7010      	strb	r0, [r2, #0]
 8016042:	2201      	movs	r2, #1
 8016044:	0005      	movs	r5, r0
 8016046:	900c      	str	r0, [sp, #48]	; 0x30
 8016048:	9208      	str	r2, [sp, #32]
 801604a:	9017      	str	r0, [sp, #92]	; 0x5c
 801604c:	9010      	str	r0, [sp, #64]	; 0x40
 801604e:	900f      	str	r0, [sp, #60]	; 0x3c
 8016050:	9309      	str	r3, [sp, #36]	; 0x24
 8016052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016054:	9a08      	ldr	r2, [sp, #32]
 8016056:	9318      	str	r3, [sp, #96]	; 0x60
 8016058:	4293      	cmp	r3, r2
 801605a:	da00      	bge.n	801605e <_svfprintf_r+0x33a>
 801605c:	9218      	str	r2, [sp, #96]	; 0x60
 801605e:	231b      	movs	r3, #27
 8016060:	aa1e      	add	r2, sp, #120	; 0x78
 8016062:	189b      	adds	r3, r3, r2
 8016064:	781b      	ldrb	r3, [r3, #0]
 8016066:	1e5a      	subs	r2, r3, #1
 8016068:	4193      	sbcs	r3, r2
 801606a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801606c:	18d3      	adds	r3, r2, r3
 801606e:	9318      	str	r3, [sp, #96]	; 0x60
 8016070:	2302      	movs	r3, #2
 8016072:	4033      	ands	r3, r6
 8016074:	9320      	str	r3, [sp, #128]	; 0x80
 8016076:	d002      	beq.n	801607e <_svfprintf_r+0x35a>
 8016078:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801607a:	3302      	adds	r3, #2
 801607c:	9318      	str	r3, [sp, #96]	; 0x60
 801607e:	2384      	movs	r3, #132	; 0x84
 8016080:	4033      	ands	r3, r6
 8016082:	9321      	str	r3, [sp, #132]	; 0x84
 8016084:	d121      	bne.n	80160ca <_svfprintf_r+0x3a6>
 8016086:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016088:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801608a:	1a9c      	subs	r4, r3, r2
 801608c:	2c00      	cmp	r4, #0
 801608e:	dd1c      	ble.n	80160ca <_svfprintf_r+0x3a6>
 8016090:	0039      	movs	r1, r7
 8016092:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016094:	485d      	ldr	r0, [pc, #372]	; (801620c <_svfprintf_r+0x4e8>)
 8016096:	9322      	str	r3, [sp, #136]	; 0x88
 8016098:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801609a:	3301      	adds	r3, #1
 801609c:	3108      	adds	r1, #8
 801609e:	6038      	str	r0, [r7, #0]
 80160a0:	2c10      	cmp	r4, #16
 80160a2:	dd01      	ble.n	80160a8 <_svfprintf_r+0x384>
 80160a4:	f000 fd08 	bl	8016ab8 <_svfprintf_r+0xd94>
 80160a8:	607c      	str	r4, [r7, #4]
 80160aa:	18a4      	adds	r4, r4, r2
 80160ac:	942e      	str	r4, [sp, #184]	; 0xb8
 80160ae:	932d      	str	r3, [sp, #180]	; 0xb4
 80160b0:	000f      	movs	r7, r1
 80160b2:	2b07      	cmp	r3, #7
 80160b4:	dd09      	ble.n	80160ca <_svfprintf_r+0x3a6>
 80160b6:	aa2c      	add	r2, sp, #176	; 0xb0
 80160b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160bc:	f002 ff86 	bl	8018fcc <__ssprint_r>
 80160c0:	2800      	cmp	r0, #0
 80160c2:	d001      	beq.n	80160c8 <_svfprintf_r+0x3a4>
 80160c4:	f001 f852 	bl	801716c <_svfprintf_r+0x1448>
 80160c8:	af2f      	add	r7, sp, #188	; 0xbc
 80160ca:	231b      	movs	r3, #27
 80160cc:	aa1e      	add	r2, sp, #120	; 0x78
 80160ce:	189b      	adds	r3, r3, r2
 80160d0:	781a      	ldrb	r2, [r3, #0]
 80160d2:	2a00      	cmp	r2, #0
 80160d4:	d017      	beq.n	8016106 <_svfprintf_r+0x3e2>
 80160d6:	603b      	str	r3, [r7, #0]
 80160d8:	2301      	movs	r3, #1
 80160da:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80160dc:	607b      	str	r3, [r7, #4]
 80160de:	0013      	movs	r3, r2
 80160e0:	3301      	adds	r3, #1
 80160e2:	932e      	str	r3, [sp, #184]	; 0xb8
 80160e4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80160e6:	3708      	adds	r7, #8
 80160e8:	9322      	str	r3, [sp, #136]	; 0x88
 80160ea:	3301      	adds	r3, #1
 80160ec:	932d      	str	r3, [sp, #180]	; 0xb4
 80160ee:	2b07      	cmp	r3, #7
 80160f0:	dd09      	ble.n	8016106 <_svfprintf_r+0x3e2>
 80160f2:	aa2c      	add	r2, sp, #176	; 0xb0
 80160f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80160f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80160f8:	f002 ff68 	bl	8018fcc <__ssprint_r>
 80160fc:	2800      	cmp	r0, #0
 80160fe:	d001      	beq.n	8016104 <_svfprintf_r+0x3e0>
 8016100:	f001 f834 	bl	801716c <_svfprintf_r+0x1448>
 8016104:	af2f      	add	r7, sp, #188	; 0xbc
 8016106:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8016108:	2b00      	cmp	r3, #0
 801610a:	d019      	beq.n	8016140 <_svfprintf_r+0x41c>
 801610c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801610e:	9320      	str	r3, [sp, #128]	; 0x80
 8016110:	ab25      	add	r3, sp, #148	; 0x94
 8016112:	603b      	str	r3, [r7, #0]
 8016114:	2302      	movs	r3, #2
 8016116:	607b      	str	r3, [r7, #4]
 8016118:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801611a:	3708      	adds	r7, #8
 801611c:	3302      	adds	r3, #2
 801611e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016120:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016122:	9320      	str	r3, [sp, #128]	; 0x80
 8016124:	3301      	adds	r3, #1
 8016126:	932d      	str	r3, [sp, #180]	; 0xb4
 8016128:	2b07      	cmp	r3, #7
 801612a:	dd09      	ble.n	8016140 <_svfprintf_r+0x41c>
 801612c:	aa2c      	add	r2, sp, #176	; 0xb0
 801612e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016130:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016132:	f002 ff4b 	bl	8018fcc <__ssprint_r>
 8016136:	2800      	cmp	r0, #0
 8016138:	d001      	beq.n	801613e <_svfprintf_r+0x41a>
 801613a:	f001 f817 	bl	801716c <_svfprintf_r+0x1448>
 801613e:	af2f      	add	r7, sp, #188	; 0xbc
 8016140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016142:	2b80      	cmp	r3, #128	; 0x80
 8016144:	d121      	bne.n	801618a <_svfprintf_r+0x466>
 8016146:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016148:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801614a:	1a9c      	subs	r4, r3, r2
 801614c:	2c00      	cmp	r4, #0
 801614e:	dd1c      	ble.n	801618a <_svfprintf_r+0x466>
 8016150:	0039      	movs	r1, r7
 8016152:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016154:	482e      	ldr	r0, [pc, #184]	; (8016210 <_svfprintf_r+0x4ec>)
 8016156:	9320      	str	r3, [sp, #128]	; 0x80
 8016158:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801615a:	3301      	adds	r3, #1
 801615c:	3108      	adds	r1, #8
 801615e:	6038      	str	r0, [r7, #0]
 8016160:	2c10      	cmp	r4, #16
 8016162:	dd01      	ble.n	8016168 <_svfprintf_r+0x444>
 8016164:	f000 fcbc 	bl	8016ae0 <_svfprintf_r+0xdbc>
 8016168:	607c      	str	r4, [r7, #4]
 801616a:	18a4      	adds	r4, r4, r2
 801616c:	942e      	str	r4, [sp, #184]	; 0xb8
 801616e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016170:	000f      	movs	r7, r1
 8016172:	2b07      	cmp	r3, #7
 8016174:	dd09      	ble.n	801618a <_svfprintf_r+0x466>
 8016176:	aa2c      	add	r2, sp, #176	; 0xb0
 8016178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801617a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801617c:	f002 ff26 	bl	8018fcc <__ssprint_r>
 8016180:	2800      	cmp	r0, #0
 8016182:	d001      	beq.n	8016188 <_svfprintf_r+0x464>
 8016184:	f000 fff2 	bl	801716c <_svfprintf_r+0x1448>
 8016188:	af2f      	add	r7, sp, #188	; 0xbc
 801618a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801618c:	9a08      	ldr	r2, [sp, #32]
 801618e:	1a9c      	subs	r4, r3, r2
 8016190:	2c00      	cmp	r4, #0
 8016192:	dd1c      	ble.n	80161ce <_svfprintf_r+0x4aa>
 8016194:	0039      	movs	r1, r7
 8016196:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016198:	481d      	ldr	r0, [pc, #116]	; (8016210 <_svfprintf_r+0x4ec>)
 801619a:	9317      	str	r3, [sp, #92]	; 0x5c
 801619c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801619e:	3301      	adds	r3, #1
 80161a0:	3108      	adds	r1, #8
 80161a2:	6038      	str	r0, [r7, #0]
 80161a4:	2c10      	cmp	r4, #16
 80161a6:	dd01      	ble.n	80161ac <_svfprintf_r+0x488>
 80161a8:	f000 fcb4 	bl	8016b14 <_svfprintf_r+0xdf0>
 80161ac:	18a2      	adds	r2, r4, r2
 80161ae:	607c      	str	r4, [r7, #4]
 80161b0:	922e      	str	r2, [sp, #184]	; 0xb8
 80161b2:	932d      	str	r3, [sp, #180]	; 0xb4
 80161b4:	000f      	movs	r7, r1
 80161b6:	2b07      	cmp	r3, #7
 80161b8:	dd09      	ble.n	80161ce <_svfprintf_r+0x4aa>
 80161ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80161bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80161be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161c0:	f002 ff04 	bl	8018fcc <__ssprint_r>
 80161c4:	2800      	cmp	r0, #0
 80161c6:	d001      	beq.n	80161cc <_svfprintf_r+0x4a8>
 80161c8:	f000 ffd0 	bl	801716c <_svfprintf_r+0x1448>
 80161cc:	af2f      	add	r7, sp, #188	; 0xbc
 80161ce:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80161d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80161d2:	05f3      	lsls	r3, r6, #23
 80161d4:	d501      	bpl.n	80161da <_svfprintf_r+0x4b6>
 80161d6:	f000 fcb1 	bl	8016b3c <_svfprintf_r+0xe18>
 80161da:	9a08      	ldr	r2, [sp, #32]
 80161dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161de:	4694      	mov	ip, r2
 80161e0:	603b      	str	r3, [r7, #0]
 80161e2:	9b08      	ldr	r3, [sp, #32]
 80161e4:	607b      	str	r3, [r7, #4]
 80161e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80161e8:	4463      	add	r3, ip
 80161ea:	932e      	str	r3, [sp, #184]	; 0xb8
 80161ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80161ee:	9308      	str	r3, [sp, #32]
 80161f0:	3301      	adds	r3, #1
 80161f2:	932d      	str	r3, [sp, #180]	; 0xb4
 80161f4:	2b07      	cmp	r3, #7
 80161f6:	dd01      	ble.n	80161fc <_svfprintf_r+0x4d8>
 80161f8:	f000 fd94 	bl	8016d24 <_svfprintf_r+0x1000>
 80161fc:	3708      	adds	r7, #8
 80161fe:	f000 fce4 	bl	8016bca <_svfprintf_r+0xea6>
 8016202:	46c0      	nop			; (mov r8, r8)
 8016204:	0801c3b9 	.word	0x0801c3b9
 8016208:	fffffbff 	.word	0xfffffbff
 801620c:	0801c3cc 	.word	0x0801c3cc
 8016210:	0801c3dc 	.word	0x0801c3dc
 8016214:	2310      	movs	r3, #16
 8016216:	431e      	orrs	r6, r3
 8016218:	06b3      	lsls	r3, r6, #26
 801621a:	d52c      	bpl.n	8016276 <_svfprintf_r+0x552>
 801621c:	2307      	movs	r3, #7
 801621e:	3407      	adds	r4, #7
 8016220:	439c      	bics	r4, r3
 8016222:	0023      	movs	r3, r4
 8016224:	3308      	adds	r3, #8
 8016226:	9312      	str	r3, [sp, #72]	; 0x48
 8016228:	6823      	ldr	r3, [r4, #0]
 801622a:	6864      	ldr	r4, [r4, #4]
 801622c:	9306      	str	r3, [sp, #24]
 801622e:	9407      	str	r4, [sp, #28]
 8016230:	9b07      	ldr	r3, [sp, #28]
 8016232:	2b00      	cmp	r3, #0
 8016234:	da0b      	bge.n	801624e <_svfprintf_r+0x52a>
 8016236:	9906      	ldr	r1, [sp, #24]
 8016238:	9a07      	ldr	r2, [sp, #28]
 801623a:	2400      	movs	r4, #0
 801623c:	424b      	negs	r3, r1
 801623e:	4194      	sbcs	r4, r2
 8016240:	9306      	str	r3, [sp, #24]
 8016242:	9407      	str	r4, [sp, #28]
 8016244:	231b      	movs	r3, #27
 8016246:	aa1e      	add	r2, sp, #120	; 0x78
 8016248:	189b      	adds	r3, r3, r2
 801624a:	222d      	movs	r2, #45	; 0x2d
 801624c:	701a      	strb	r2, [r3, #0]
 801624e:	9b08      	ldr	r3, [sp, #32]
 8016250:	3301      	adds	r3, #1
 8016252:	d000      	beq.n	8016256 <_svfprintf_r+0x532>
 8016254:	e382      	b.n	801695c <_svfprintf_r+0xc38>
 8016256:	9b07      	ldr	r3, [sp, #28]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d000      	beq.n	801625e <_svfprintf_r+0x53a>
 801625c:	e3b0      	b.n	80169c0 <_svfprintf_r+0xc9c>
 801625e:	9b06      	ldr	r3, [sp, #24]
 8016260:	2b09      	cmp	r3, #9
 8016262:	d900      	bls.n	8016266 <_svfprintf_r+0x542>
 8016264:	e3ac      	b.n	80169c0 <_svfprintf_r+0xc9c>
 8016266:	23e7      	movs	r3, #231	; 0xe7
 8016268:	aa1e      	add	r2, sp, #120	; 0x78
 801626a:	189b      	adds	r3, r3, r2
 801626c:	9a06      	ldr	r2, [sp, #24]
 801626e:	3230      	adds	r2, #48	; 0x30
 8016270:	701a      	strb	r2, [r3, #0]
 8016272:	9309      	str	r3, [sp, #36]	; 0x24
 8016274:	e395      	b.n	80169a2 <_svfprintf_r+0xc7e>
 8016276:	1d23      	adds	r3, r4, #4
 8016278:	9312      	str	r3, [sp, #72]	; 0x48
 801627a:	06f3      	lsls	r3, r6, #27
 801627c:	d504      	bpl.n	8016288 <_svfprintf_r+0x564>
 801627e:	6823      	ldr	r3, [r4, #0]
 8016280:	9306      	str	r3, [sp, #24]
 8016282:	17db      	asrs	r3, r3, #31
 8016284:	9307      	str	r3, [sp, #28]
 8016286:	e7d3      	b.n	8016230 <_svfprintf_r+0x50c>
 8016288:	6823      	ldr	r3, [r4, #0]
 801628a:	0672      	lsls	r2, r6, #25
 801628c:	d501      	bpl.n	8016292 <_svfprintf_r+0x56e>
 801628e:	b21b      	sxth	r3, r3
 8016290:	e7f6      	b.n	8016280 <_svfprintf_r+0x55c>
 8016292:	05b2      	lsls	r2, r6, #22
 8016294:	d5f4      	bpl.n	8016280 <_svfprintf_r+0x55c>
 8016296:	b25b      	sxtb	r3, r3
 8016298:	e7f2      	b.n	8016280 <_svfprintf_r+0x55c>
 801629a:	2307      	movs	r3, #7
 801629c:	3407      	adds	r4, #7
 801629e:	439c      	bics	r4, r3
 80162a0:	0023      	movs	r3, r4
 80162a2:	2201      	movs	r2, #1
 80162a4:	3308      	adds	r3, #8
 80162a6:	9312      	str	r3, [sp, #72]	; 0x48
 80162a8:	6823      	ldr	r3, [r4, #0]
 80162aa:	4252      	negs	r2, r2
 80162ac:	931a      	str	r3, [sp, #104]	; 0x68
 80162ae:	6863      	ldr	r3, [r4, #4]
 80162b0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80162b2:	005c      	lsls	r4, r3, #1
 80162b4:	0864      	lsrs	r4, r4, #1
 80162b6:	9319      	str	r3, [sp, #100]	; 0x64
 80162b8:	0028      	movs	r0, r5
 80162ba:	4bcf      	ldr	r3, [pc, #828]	; (80165f8 <_svfprintf_r+0x8d4>)
 80162bc:	0021      	movs	r1, r4
 80162be:	f7ec fb73 	bl	80029a8 <__aeabi_dcmpun>
 80162c2:	2800      	cmp	r0, #0
 80162c4:	d125      	bne.n	8016312 <_svfprintf_r+0x5ee>
 80162c6:	2201      	movs	r2, #1
 80162c8:	4bcb      	ldr	r3, [pc, #812]	; (80165f8 <_svfprintf_r+0x8d4>)
 80162ca:	4252      	negs	r2, r2
 80162cc:	0028      	movs	r0, r5
 80162ce:	0021      	movs	r1, r4
 80162d0:	f7ea f8d4 	bl	800047c <__aeabi_dcmple>
 80162d4:	2800      	cmp	r0, #0
 80162d6:	d11c      	bne.n	8016312 <_svfprintf_r+0x5ee>
 80162d8:	2200      	movs	r2, #0
 80162da:	2300      	movs	r3, #0
 80162dc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80162de:	9919      	ldr	r1, [sp, #100]	; 0x64
 80162e0:	f7ea f8c2 	bl	8000468 <__aeabi_dcmplt>
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d004      	beq.n	80162f2 <_svfprintf_r+0x5ce>
 80162e8:	231b      	movs	r3, #27
 80162ea:	aa1e      	add	r2, sp, #120	; 0x78
 80162ec:	189b      	adds	r3, r3, r2
 80162ee:	222d      	movs	r2, #45	; 0x2d
 80162f0:	701a      	strb	r2, [r3, #0]
 80162f2:	4bc2      	ldr	r3, [pc, #776]	; (80165fc <_svfprintf_r+0x8d8>)
 80162f4:	9309      	str	r3, [sp, #36]	; 0x24
 80162f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162f8:	2b47      	cmp	r3, #71	; 0x47
 80162fa:	dc01      	bgt.n	8016300 <_svfprintf_r+0x5dc>
 80162fc:	4bc0      	ldr	r3, [pc, #768]	; (8016600 <_svfprintf_r+0x8dc>)
 80162fe:	9309      	str	r3, [sp, #36]	; 0x24
 8016300:	2380      	movs	r3, #128	; 0x80
 8016302:	439e      	bics	r6, r3
 8016304:	2300      	movs	r3, #0
 8016306:	930c      	str	r3, [sp, #48]	; 0x30
 8016308:	3303      	adds	r3, #3
 801630a:	9308      	str	r3, [sp, #32]
 801630c:	2300      	movs	r3, #0
 801630e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016310:	e34f      	b.n	80169b2 <_svfprintf_r+0xc8e>
 8016312:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016314:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016316:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016318:	9919      	ldr	r1, [sp, #100]	; 0x64
 801631a:	f7ec fb45 	bl	80029a8 <__aeabi_dcmpun>
 801631e:	2800      	cmp	r0, #0
 8016320:	d00e      	beq.n	8016340 <_svfprintf_r+0x61c>
 8016322:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016324:	2b00      	cmp	r3, #0
 8016326:	da04      	bge.n	8016332 <_svfprintf_r+0x60e>
 8016328:	231b      	movs	r3, #27
 801632a:	aa1e      	add	r2, sp, #120	; 0x78
 801632c:	189b      	adds	r3, r3, r2
 801632e:	222d      	movs	r2, #45	; 0x2d
 8016330:	701a      	strb	r2, [r3, #0]
 8016332:	4bb4      	ldr	r3, [pc, #720]	; (8016604 <_svfprintf_r+0x8e0>)
 8016334:	9309      	str	r3, [sp, #36]	; 0x24
 8016336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016338:	2b47      	cmp	r3, #71	; 0x47
 801633a:	dce1      	bgt.n	8016300 <_svfprintf_r+0x5dc>
 801633c:	4bb2      	ldr	r3, [pc, #712]	; (8016608 <_svfprintf_r+0x8e4>)
 801633e:	e7de      	b.n	80162fe <_svfprintf_r+0x5da>
 8016340:	2320      	movs	r3, #32
 8016342:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016344:	439a      	bics	r2, r3
 8016346:	920f      	str	r2, [sp, #60]	; 0x3c
 8016348:	2a41      	cmp	r2, #65	; 0x41
 801634a:	d124      	bne.n	8016396 <_svfprintf_r+0x672>
 801634c:	2230      	movs	r2, #48	; 0x30
 801634e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8016350:	ab25      	add	r3, sp, #148	; 0x94
 8016352:	701a      	strb	r2, [r3, #0]
 8016354:	3228      	adds	r2, #40	; 0x28
 8016356:	2961      	cmp	r1, #97	; 0x61
 8016358:	d100      	bne.n	801635c <_svfprintf_r+0x638>
 801635a:	3220      	adds	r2, #32
 801635c:	705a      	strb	r2, [r3, #1]
 801635e:	2302      	movs	r3, #2
 8016360:	431e      	orrs	r6, r3
 8016362:	9b08      	ldr	r3, [sp, #32]
 8016364:	2b63      	cmp	r3, #99	; 0x63
 8016366:	dc00      	bgt.n	801636a <_svfprintf_r+0x646>
 8016368:	e09e      	b.n	80164a8 <_svfprintf_r+0x784>
 801636a:	1c59      	adds	r1, r3, #1
 801636c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801636e:	f7fe f8e1 	bl	8014534 <_malloc_r>
 8016372:	9009      	str	r0, [sp, #36]	; 0x24
 8016374:	2800      	cmp	r0, #0
 8016376:	d000      	beq.n	801637a <_svfprintf_r+0x656>
 8016378:	e09b      	b.n	80164b2 <_svfprintf_r+0x78e>
 801637a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801637c:	899a      	ldrh	r2, [r3, #12]
 801637e:	2340      	movs	r3, #64	; 0x40
 8016380:	4313      	orrs	r3, r2
 8016382:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016384:	8193      	strh	r3, [r2, #12]
 8016386:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016388:	899b      	ldrh	r3, [r3, #12]
 801638a:	065b      	lsls	r3, r3, #25
 801638c:	d400      	bmi.n	8016390 <_svfprintf_r+0x66c>
 801638e:	e4ee      	b.n	8015d6e <_svfprintf_r+0x4a>
 8016390:	2301      	movs	r3, #1
 8016392:	425b      	negs	r3, r3
 8016394:	e4ea      	b.n	8015d6c <_svfprintf_r+0x48>
 8016396:	9b08      	ldr	r3, [sp, #32]
 8016398:	900c      	str	r0, [sp, #48]	; 0x30
 801639a:	3301      	adds	r3, #1
 801639c:	d100      	bne.n	80163a0 <_svfprintf_r+0x67c>
 801639e:	e08b      	b.n	80164b8 <_svfprintf_r+0x794>
 80163a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163a2:	2b47      	cmp	r3, #71	; 0x47
 80163a4:	d103      	bne.n	80163ae <_svfprintf_r+0x68a>
 80163a6:	9b08      	ldr	r3, [sp, #32]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d100      	bne.n	80163ae <_svfprintf_r+0x68a>
 80163ac:	e087      	b.n	80164be <_svfprintf_r+0x79a>
 80163ae:	2380      	movs	r3, #128	; 0x80
 80163b0:	005b      	lsls	r3, r3, #1
 80163b2:	4333      	orrs	r3, r6
 80163b4:	9320      	str	r3, [sp, #128]	; 0x80
 80163b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80163b8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	db00      	blt.n	80163c0 <_svfprintf_r+0x69c>
 80163be:	e082      	b.n	80164c6 <_svfprintf_r+0x7a2>
 80163c0:	2280      	movs	r2, #128	; 0x80
 80163c2:	0612      	lsls	r2, r2, #24
 80163c4:	4694      	mov	ip, r2
 80163c6:	4463      	add	r3, ip
 80163c8:	930d      	str	r3, [sp, #52]	; 0x34
 80163ca:	232d      	movs	r3, #45	; 0x2d
 80163cc:	9322      	str	r3, [sp, #136]	; 0x88
 80163ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80163d0:	2b41      	cmp	r3, #65	; 0x41
 80163d2:	d000      	beq.n	80163d6 <_svfprintf_r+0x6b2>
 80163d4:	e105      	b.n	80165e2 <_svfprintf_r+0x8be>
 80163d6:	aa26      	add	r2, sp, #152	; 0x98
 80163d8:	0020      	movs	r0, r4
 80163da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80163dc:	f002 fdc4 	bl	8018f68 <frexp>
 80163e0:	23ff      	movs	r3, #255	; 0xff
 80163e2:	2200      	movs	r2, #0
 80163e4:	059b      	lsls	r3, r3, #22
 80163e6:	f7eb fd25 	bl	8001e34 <__aeabi_dmul>
 80163ea:	2200      	movs	r2, #0
 80163ec:	2300      	movs	r3, #0
 80163ee:	0004      	movs	r4, r0
 80163f0:	000d      	movs	r5, r1
 80163f2:	f7ea f833 	bl	800045c <__aeabi_dcmpeq>
 80163f6:	2800      	cmp	r0, #0
 80163f8:	d001      	beq.n	80163fe <_svfprintf_r+0x6da>
 80163fa:	2301      	movs	r3, #1
 80163fc:	9326      	str	r3, [sp, #152]	; 0x98
 80163fe:	4b83      	ldr	r3, [pc, #524]	; (801660c <_svfprintf_r+0x8e8>)
 8016400:	9317      	str	r3, [sp, #92]	; 0x5c
 8016402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016404:	2b61      	cmp	r3, #97	; 0x61
 8016406:	d101      	bne.n	801640c <_svfprintf_r+0x6e8>
 8016408:	4b81      	ldr	r3, [pc, #516]	; (8016610 <_svfprintf_r+0x8ec>)
 801640a:	9317      	str	r3, [sp, #92]	; 0x5c
 801640c:	9b08      	ldr	r3, [sp, #32]
 801640e:	3b01      	subs	r3, #1
 8016410:	9310      	str	r3, [sp, #64]	; 0x40
 8016412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016414:	9318      	str	r3, [sp, #96]	; 0x60
 8016416:	2200      	movs	r2, #0
 8016418:	4b7e      	ldr	r3, [pc, #504]	; (8016614 <_svfprintf_r+0x8f0>)
 801641a:	0020      	movs	r0, r4
 801641c:	0029      	movs	r1, r5
 801641e:	f7eb fd09 	bl	8001e34 <__aeabi_dmul>
 8016422:	000d      	movs	r5, r1
 8016424:	0004      	movs	r4, r0
 8016426:	f7ec fadb 	bl	80029e0 <__aeabi_d2iz>
 801642a:	9021      	str	r0, [sp, #132]	; 0x84
 801642c:	f7ec fb0e 	bl	8002a4c <__aeabi_i2d>
 8016430:	0002      	movs	r2, r0
 8016432:	000b      	movs	r3, r1
 8016434:	0020      	movs	r0, r4
 8016436:	0029      	movs	r1, r5
 8016438:	f7eb ff6e 	bl	8002318 <__aeabi_dsub>
 801643c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801643e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016440:	3301      	adds	r3, #1
 8016442:	930d      	str	r3, [sp, #52]	; 0x34
 8016444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016446:	0004      	movs	r4, r0
 8016448:	5c9b      	ldrb	r3, [r3, r2]
 801644a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801644c:	000d      	movs	r5, r1
 801644e:	7013      	strb	r3, [r2, #0]
 8016450:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016452:	9323      	str	r3, [sp, #140]	; 0x8c
 8016454:	3301      	adds	r3, #1
 8016456:	d00a      	beq.n	801646e <_svfprintf_r+0x74a>
 8016458:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801645a:	2200      	movs	r2, #0
 801645c:	3b01      	subs	r3, #1
 801645e:	9310      	str	r3, [sp, #64]	; 0x40
 8016460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016462:	9318      	str	r3, [sp, #96]	; 0x60
 8016464:	2300      	movs	r3, #0
 8016466:	f7e9 fff9 	bl	800045c <__aeabi_dcmpeq>
 801646a:	2800      	cmp	r0, #0
 801646c:	d0d3      	beq.n	8016416 <_svfprintf_r+0x6f2>
 801646e:	2200      	movs	r2, #0
 8016470:	4b69      	ldr	r3, [pc, #420]	; (8016618 <_svfprintf_r+0x8f4>)
 8016472:	0020      	movs	r0, r4
 8016474:	0029      	movs	r1, r5
 8016476:	f7ea f80b 	bl	8000490 <__aeabi_dcmpgt>
 801647a:	2800      	cmp	r0, #0
 801647c:	d126      	bne.n	80164cc <_svfprintf_r+0x7a8>
 801647e:	2200      	movs	r2, #0
 8016480:	4b65      	ldr	r3, [pc, #404]	; (8016618 <_svfprintf_r+0x8f4>)
 8016482:	0020      	movs	r0, r4
 8016484:	0029      	movs	r1, r5
 8016486:	f7e9 ffe9 	bl	800045c <__aeabi_dcmpeq>
 801648a:	2800      	cmp	r0, #0
 801648c:	d002      	beq.n	8016494 <_svfprintf_r+0x770>
 801648e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016490:	07db      	lsls	r3, r3, #31
 8016492:	d41b      	bmi.n	80164cc <_svfprintf_r+0x7a8>
 8016494:	2130      	movs	r1, #48	; 0x30
 8016496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016498:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801649a:	1898      	adds	r0, r3, r2
 801649c:	930d      	str	r3, [sp, #52]	; 0x34
 801649e:	1ac2      	subs	r2, r0, r3
 80164a0:	d426      	bmi.n	80164f0 <_svfprintf_r+0x7cc>
 80164a2:	7019      	strb	r1, [r3, #0]
 80164a4:	3301      	adds	r3, #1
 80164a6:	e7f9      	b.n	801649c <_svfprintf_r+0x778>
 80164a8:	2300      	movs	r3, #0
 80164aa:	930c      	str	r3, [sp, #48]	; 0x30
 80164ac:	ab3f      	add	r3, sp, #252	; 0xfc
 80164ae:	9309      	str	r3, [sp, #36]	; 0x24
 80164b0:	e77d      	b.n	80163ae <_svfprintf_r+0x68a>
 80164b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164b4:	930c      	str	r3, [sp, #48]	; 0x30
 80164b6:	e77a      	b.n	80163ae <_svfprintf_r+0x68a>
 80164b8:	2306      	movs	r3, #6
 80164ba:	9308      	str	r3, [sp, #32]
 80164bc:	e777      	b.n	80163ae <_svfprintf_r+0x68a>
 80164be:	9b08      	ldr	r3, [sp, #32]
 80164c0:	930c      	str	r3, [sp, #48]	; 0x30
 80164c2:	2301      	movs	r3, #1
 80164c4:	e7f9      	b.n	80164ba <_svfprintf_r+0x796>
 80164c6:	930d      	str	r3, [sp, #52]	; 0x34
 80164c8:	2300      	movs	r3, #0
 80164ca:	e77f      	b.n	80163cc <_svfprintf_r+0x6a8>
 80164cc:	2030      	movs	r0, #48	; 0x30
 80164ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164d0:	932a      	str	r3, [sp, #168]	; 0xa8
 80164d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80164d4:	7bda      	ldrb	r2, [r3, #15]
 80164d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80164d8:	3b01      	subs	r3, #1
 80164da:	932a      	str	r3, [sp, #168]	; 0xa8
 80164dc:	7819      	ldrb	r1, [r3, #0]
 80164de:	4291      	cmp	r1, r2
 80164e0:	d07d      	beq.n	80165de <_svfprintf_r+0x8ba>
 80164e2:	1c4a      	adds	r2, r1, #1
 80164e4:	b2d2      	uxtb	r2, r2
 80164e6:	2939      	cmp	r1, #57	; 0x39
 80164e8:	d101      	bne.n	80164ee <_svfprintf_r+0x7ca>
 80164ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80164ec:	7a92      	ldrb	r2, [r2, #10]
 80164ee:	701a      	strb	r2, [r3, #0]
 80164f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164f4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80164f6:	1a9b      	subs	r3, r3, r2
 80164f8:	930d      	str	r3, [sp, #52]	; 0x34
 80164fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80164fc:	2b47      	cmp	r3, #71	; 0x47
 80164fe:	d000      	beq.n	8016502 <_svfprintf_r+0x7de>
 8016500:	e0d2      	b.n	80166a8 <_svfprintf_r+0x984>
 8016502:	1ceb      	adds	r3, r5, #3
 8016504:	db03      	blt.n	801650e <_svfprintf_r+0x7ea>
 8016506:	9b08      	ldr	r3, [sp, #32]
 8016508:	42ab      	cmp	r3, r5
 801650a:	db00      	blt.n	801650e <_svfprintf_r+0x7ea>
 801650c:	e0fd      	b.n	801670a <_svfprintf_r+0x9e6>
 801650e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016510:	3b02      	subs	r3, #2
 8016512:	930e      	str	r3, [sp, #56]	; 0x38
 8016514:	2238      	movs	r2, #56	; 0x38
 8016516:	466b      	mov	r3, sp
 8016518:	990e      	ldr	r1, [sp, #56]	; 0x38
 801651a:	189b      	adds	r3, r3, r2
 801651c:	3a18      	subs	r2, #24
 801651e:	4391      	bics	r1, r2
 8016520:	1e6c      	subs	r4, r5, #1
 8016522:	000a      	movs	r2, r1
 8016524:	9426      	str	r4, [sp, #152]	; 0x98
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	2100      	movs	r1, #0
 801652a:	2a41      	cmp	r2, #65	; 0x41
 801652c:	d102      	bne.n	8016534 <_svfprintf_r+0x810>
 801652e:	330f      	adds	r3, #15
 8016530:	b2db      	uxtb	r3, r3
 8016532:	3101      	adds	r1, #1
 8016534:	aa28      	add	r2, sp, #160	; 0xa0
 8016536:	7013      	strb	r3, [r2, #0]
 8016538:	232b      	movs	r3, #43	; 0x2b
 801653a:	2c00      	cmp	r4, #0
 801653c:	da02      	bge.n	8016544 <_svfprintf_r+0x820>
 801653e:	2401      	movs	r4, #1
 8016540:	232d      	movs	r3, #45	; 0x2d
 8016542:	1b64      	subs	r4, r4, r5
 8016544:	7053      	strb	r3, [r2, #1]
 8016546:	2c09      	cmp	r4, #9
 8016548:	dc00      	bgt.n	801654c <_svfprintf_r+0x828>
 801654a:	e0c7      	b.n	80166dc <_svfprintf_r+0x9b8>
 801654c:	2537      	movs	r5, #55	; 0x37
 801654e:	ab1e      	add	r3, sp, #120	; 0x78
 8016550:	18ed      	adds	r5, r5, r3
 8016552:	1e6b      	subs	r3, r5, #1
 8016554:	0020      	movs	r0, r4
 8016556:	210a      	movs	r1, #10
 8016558:	9308      	str	r3, [sp, #32]
 801655a:	f7e9 ff69 	bl	8000430 <__aeabi_idivmod>
 801655e:	1e6b      	subs	r3, r5, #1
 8016560:	3130      	adds	r1, #48	; 0x30
 8016562:	7019      	strb	r1, [r3, #0]
 8016564:	0020      	movs	r0, r4
 8016566:	210a      	movs	r1, #10
 8016568:	f7e9 fe7c 	bl	8000264 <__divsi3>
 801656c:	0004      	movs	r4, r0
 801656e:	2809      	cmp	r0, #9
 8016570:	dd00      	ble.n	8016574 <_svfprintf_r+0x850>
 8016572:	e0ac      	b.n	80166ce <_svfprintf_r+0x9aa>
 8016574:	232a      	movs	r3, #42	; 0x2a
 8016576:	2137      	movs	r1, #55	; 0x37
 8016578:	aa1e      	add	r2, sp, #120	; 0x78
 801657a:	3d02      	subs	r5, #2
 801657c:	3430      	adds	r4, #48	; 0x30
 801657e:	702c      	strb	r4, [r5, #0]
 8016580:	189b      	adds	r3, r3, r2
 8016582:	1889      	adds	r1, r1, r2
 8016584:	001a      	movs	r2, r3
 8016586:	428d      	cmp	r5, r1
 8016588:	d200      	bcs.n	801658c <_svfprintf_r+0x868>
 801658a:	e0a2      	b.n	80166d2 <_svfprintf_r+0x9ae>
 801658c:	ab28      	add	r3, sp, #160	; 0xa0
 801658e:	1ad3      	subs	r3, r2, r3
 8016590:	931d      	str	r3, [sp, #116]	; 0x74
 8016592:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016596:	4694      	mov	ip, r2
 8016598:	4463      	add	r3, ip
 801659a:	9308      	str	r3, [sp, #32]
 801659c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801659e:	2b01      	cmp	r3, #1
 80165a0:	dc01      	bgt.n	80165a6 <_svfprintf_r+0x882>
 80165a2:	07f3      	lsls	r3, r6, #31
 80165a4:	d504      	bpl.n	80165b0 <_svfprintf_r+0x88c>
 80165a6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80165a8:	9b08      	ldr	r3, [sp, #32]
 80165aa:	4694      	mov	ip, r2
 80165ac:	4463      	add	r3, ip
 80165ae:	9308      	str	r3, [sp, #32]
 80165b0:	2280      	movs	r2, #128	; 0x80
 80165b2:	4b1a      	ldr	r3, [pc, #104]	; (801661c <_svfprintf_r+0x8f8>)
 80165b4:	0052      	lsls	r2, r2, #1
 80165b6:	4033      	ands	r3, r6
 80165b8:	431a      	orrs	r2, r3
 80165ba:	2300      	movs	r3, #0
 80165bc:	001d      	movs	r5, r3
 80165be:	9220      	str	r2, [sp, #128]	; 0x80
 80165c0:	9310      	str	r3, [sp, #64]	; 0x40
 80165c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80165c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d100      	bne.n	80165cc <_svfprintf_r+0x8a8>
 80165ca:	e270      	b.n	8016aae <_svfprintf_r+0xd8a>
 80165cc:	231b      	movs	r3, #27
 80165ce:	aa1e      	add	r2, sp, #120	; 0x78
 80165d0:	189b      	adds	r3, r3, r2
 80165d2:	222d      	movs	r2, #45	; 0x2d
 80165d4:	701a      	strb	r2, [r3, #0]
 80165d6:	2300      	movs	r3, #0
 80165d8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80165da:	9317      	str	r3, [sp, #92]	; 0x5c
 80165dc:	e539      	b.n	8016052 <_svfprintf_r+0x32e>
 80165de:	7018      	strb	r0, [r3, #0]
 80165e0:	e779      	b.n	80164d6 <_svfprintf_r+0x7b2>
 80165e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80165e4:	2b46      	cmp	r3, #70	; 0x46
 80165e6:	d01b      	beq.n	8016620 <_svfprintf_r+0x8fc>
 80165e8:	9d08      	ldr	r5, [sp, #32]
 80165ea:	2b45      	cmp	r3, #69	; 0x45
 80165ec:	d101      	bne.n	80165f2 <_svfprintf_r+0x8ce>
 80165ee:	9b08      	ldr	r3, [sp, #32]
 80165f0:	1c5d      	adds	r5, r3, #1
 80165f2:	2302      	movs	r3, #2
 80165f4:	e016      	b.n	8016624 <_svfprintf_r+0x900>
 80165f6:	46c0      	nop			; (mov r8, r8)
 80165f8:	7fefffff 	.word	0x7fefffff
 80165fc:	0801c39c 	.word	0x0801c39c
 8016600:	0801c398 	.word	0x0801c398
 8016604:	0801c3a4 	.word	0x0801c3a4
 8016608:	0801c3a0 	.word	0x0801c3a0
 801660c:	0801c3b9 	.word	0x0801c3b9
 8016610:	0801c3a8 	.word	0x0801c3a8
 8016614:	40300000 	.word	0x40300000
 8016618:	3fe00000 	.word	0x3fe00000
 801661c:	fffffbff 	.word	0xfffffbff
 8016620:	2303      	movs	r3, #3
 8016622:	9d08      	ldr	r5, [sp, #32]
 8016624:	aa2a      	add	r2, sp, #168	; 0xa8
 8016626:	9204      	str	r2, [sp, #16]
 8016628:	aa27      	add	r2, sp, #156	; 0x9c
 801662a:	9203      	str	r2, [sp, #12]
 801662c:	aa26      	add	r2, sp, #152	; 0x98
 801662e:	9202      	str	r2, [sp, #8]
 8016630:	9300      	str	r3, [sp, #0]
 8016632:	9501      	str	r5, [sp, #4]
 8016634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016636:	0022      	movs	r2, r4
 8016638:	980a      	ldr	r0, [sp, #40]	; 0x28
 801663a:	f000 fe79 	bl	8017330 <_dtoa_r>
 801663e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016640:	9009      	str	r0, [sp, #36]	; 0x24
 8016642:	2b47      	cmp	r3, #71	; 0x47
 8016644:	d101      	bne.n	801664a <_svfprintf_r+0x926>
 8016646:	07f3      	lsls	r3, r6, #31
 8016648:	d524      	bpl.n	8016694 <_svfprintf_r+0x970>
 801664a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801664c:	195b      	adds	r3, r3, r5
 801664e:	9310      	str	r3, [sp, #64]	; 0x40
 8016650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016652:	2b46      	cmp	r3, #70	; 0x46
 8016654:	d113      	bne.n	801667e <_svfprintf_r+0x95a>
 8016656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016658:	781b      	ldrb	r3, [r3, #0]
 801665a:	2b30      	cmp	r3, #48	; 0x30
 801665c:	d10a      	bne.n	8016674 <_svfprintf_r+0x950>
 801665e:	2200      	movs	r2, #0
 8016660:	2300      	movs	r3, #0
 8016662:	0020      	movs	r0, r4
 8016664:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016666:	f7e9 fef9 	bl	800045c <__aeabi_dcmpeq>
 801666a:	2800      	cmp	r0, #0
 801666c:	d102      	bne.n	8016674 <_svfprintf_r+0x950>
 801666e:	2301      	movs	r3, #1
 8016670:	1b5d      	subs	r5, r3, r5
 8016672:	9526      	str	r5, [sp, #152]	; 0x98
 8016674:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016676:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016678:	4694      	mov	ip, r2
 801667a:	4463      	add	r3, ip
 801667c:	9310      	str	r3, [sp, #64]	; 0x40
 801667e:	2200      	movs	r2, #0
 8016680:	2300      	movs	r3, #0
 8016682:	0020      	movs	r0, r4
 8016684:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016686:	f7e9 fee9 	bl	800045c <__aeabi_dcmpeq>
 801668a:	2230      	movs	r2, #48	; 0x30
 801668c:	2800      	cmp	r0, #0
 801668e:	d006      	beq.n	801669e <_svfprintf_r+0x97a>
 8016690:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016692:	932a      	str	r3, [sp, #168]	; 0xa8
 8016694:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8016696:	e72c      	b.n	80164f2 <_svfprintf_r+0x7ce>
 8016698:	1c59      	adds	r1, r3, #1
 801669a:	912a      	str	r1, [sp, #168]	; 0xa8
 801669c:	701a      	strb	r2, [r3, #0]
 801669e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80166a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80166a2:	4299      	cmp	r1, r3
 80166a4:	d8f8      	bhi.n	8016698 <_svfprintf_r+0x974>
 80166a6:	e7f5      	b.n	8016694 <_svfprintf_r+0x970>
 80166a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166aa:	2b46      	cmp	r3, #70	; 0x46
 80166ac:	d000      	beq.n	80166b0 <_svfprintf_r+0x98c>
 80166ae:	e731      	b.n	8016514 <_svfprintf_r+0x7f0>
 80166b0:	9b08      	ldr	r3, [sp, #32]
 80166b2:	2d00      	cmp	r5, #0
 80166b4:	dd21      	ble.n	80166fa <_svfprintf_r+0x9d6>
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d101      	bne.n	80166be <_svfprintf_r+0x99a>
 80166ba:	07f3      	lsls	r3, r6, #31
 80166bc:	d54a      	bpl.n	8016754 <_svfprintf_r+0xa30>
 80166be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80166c0:	18eb      	adds	r3, r5, r3
 80166c2:	9a08      	ldr	r2, [sp, #32]
 80166c4:	18d3      	adds	r3, r2, r3
 80166c6:	9308      	str	r3, [sp, #32]
 80166c8:	2366      	movs	r3, #102	; 0x66
 80166ca:	930e      	str	r3, [sp, #56]	; 0x38
 80166cc:	e034      	b.n	8016738 <_svfprintf_r+0xa14>
 80166ce:	9d08      	ldr	r5, [sp, #32]
 80166d0:	e73f      	b.n	8016552 <_svfprintf_r+0x82e>
 80166d2:	782a      	ldrb	r2, [r5, #0]
 80166d4:	3501      	adds	r5, #1
 80166d6:	701a      	strb	r2, [r3, #0]
 80166d8:	3301      	adds	r3, #1
 80166da:	e753      	b.n	8016584 <_svfprintf_r+0x860>
 80166dc:	232a      	movs	r3, #42	; 0x2a
 80166de:	aa1e      	add	r2, sp, #120	; 0x78
 80166e0:	189b      	adds	r3, r3, r2
 80166e2:	2900      	cmp	r1, #0
 80166e4:	d105      	bne.n	80166f2 <_svfprintf_r+0x9ce>
 80166e6:	2230      	movs	r2, #48	; 0x30
 80166e8:	ab28      	add	r3, sp, #160	; 0xa0
 80166ea:	709a      	strb	r2, [r3, #2]
 80166ec:	232b      	movs	r3, #43	; 0x2b
 80166ee:	aa1e      	add	r2, sp, #120	; 0x78
 80166f0:	189b      	adds	r3, r3, r2
 80166f2:	3430      	adds	r4, #48	; 0x30
 80166f4:	1c5a      	adds	r2, r3, #1
 80166f6:	701c      	strb	r4, [r3, #0]
 80166f8:	e748      	b.n	801658c <_svfprintf_r+0x868>
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d102      	bne.n	8016704 <_svfprintf_r+0x9e0>
 80166fe:	3301      	adds	r3, #1
 8016700:	421e      	tst	r6, r3
 8016702:	d029      	beq.n	8016758 <_svfprintf_r+0xa34>
 8016704:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016706:	3301      	adds	r3, #1
 8016708:	e7db      	b.n	80166c2 <_svfprintf_r+0x99e>
 801670a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801670c:	42ab      	cmp	r3, r5
 801670e:	dc06      	bgt.n	801671e <_svfprintf_r+0x9fa>
 8016710:	07f3      	lsls	r3, r6, #31
 8016712:	d524      	bpl.n	801675e <_svfprintf_r+0xa3a>
 8016714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016716:	18eb      	adds	r3, r5, r3
 8016718:	9308      	str	r3, [sp, #32]
 801671a:	2367      	movs	r3, #103	; 0x67
 801671c:	e7d5      	b.n	80166ca <_svfprintf_r+0x9a6>
 801671e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016722:	4694      	mov	ip, r2
 8016724:	4463      	add	r3, ip
 8016726:	9308      	str	r3, [sp, #32]
 8016728:	2367      	movs	r3, #103	; 0x67
 801672a:	930e      	str	r3, [sp, #56]	; 0x38
 801672c:	2d00      	cmp	r5, #0
 801672e:	dc03      	bgt.n	8016738 <_svfprintf_r+0xa14>
 8016730:	9b08      	ldr	r3, [sp, #32]
 8016732:	1b5b      	subs	r3, r3, r5
 8016734:	3301      	adds	r3, #1
 8016736:	9308      	str	r3, [sp, #32]
 8016738:	2380      	movs	r3, #128	; 0x80
 801673a:	00db      	lsls	r3, r3, #3
 801673c:	401e      	ands	r6, r3
 801673e:	2300      	movs	r3, #0
 8016740:	960f      	str	r6, [sp, #60]	; 0x3c
 8016742:	9310      	str	r3, [sp, #64]	; 0x40
 8016744:	2e00      	cmp	r6, #0
 8016746:	d100      	bne.n	801674a <_svfprintf_r+0xa26>
 8016748:	e73c      	b.n	80165c4 <_svfprintf_r+0x8a0>
 801674a:	2d00      	cmp	r5, #0
 801674c:	dc27      	bgt.n	801679e <_svfprintf_r+0xa7a>
 801674e:	2300      	movs	r3, #0
 8016750:	930f      	str	r3, [sp, #60]	; 0x3c
 8016752:	e737      	b.n	80165c4 <_svfprintf_r+0x8a0>
 8016754:	9508      	str	r5, [sp, #32]
 8016756:	e7b7      	b.n	80166c8 <_svfprintf_r+0x9a4>
 8016758:	2266      	movs	r2, #102	; 0x66
 801675a:	920e      	str	r2, [sp, #56]	; 0x38
 801675c:	e7eb      	b.n	8016736 <_svfprintf_r+0xa12>
 801675e:	9508      	str	r5, [sp, #32]
 8016760:	e7db      	b.n	801671a <_svfprintf_r+0x9f6>
 8016762:	42ab      	cmp	r3, r5
 8016764:	da0e      	bge.n	8016784 <_svfprintf_r+0xa60>
 8016766:	1aed      	subs	r5, r5, r3
 8016768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801676a:	785b      	ldrb	r3, [r3, #1]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d012      	beq.n	8016796 <_svfprintf_r+0xa72>
 8016770:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016772:	3301      	adds	r3, #1
 8016774:	930f      	str	r3, [sp, #60]	; 0x3c
 8016776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016778:	3301      	adds	r3, #1
 801677a:	9313      	str	r3, [sp, #76]	; 0x4c
 801677c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801677e:	781b      	ldrb	r3, [r3, #0]
 8016780:	2bff      	cmp	r3, #255	; 0xff
 8016782:	d1ee      	bne.n	8016762 <_svfprintf_r+0xa3e>
 8016784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016786:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016788:	189b      	adds	r3, r3, r2
 801678a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801678c:	4353      	muls	r3, r2
 801678e:	9a08      	ldr	r2, [sp, #32]
 8016790:	189b      	adds	r3, r3, r2
 8016792:	9308      	str	r3, [sp, #32]
 8016794:	e716      	b.n	80165c4 <_svfprintf_r+0x8a0>
 8016796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016798:	3301      	adds	r3, #1
 801679a:	9310      	str	r3, [sp, #64]	; 0x40
 801679c:	e7ee      	b.n	801677c <_svfprintf_r+0xa58>
 801679e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80167a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80167a2:	e7eb      	b.n	801677c <_svfprintf_r+0xa58>
 80167a4:	0022      	movs	r2, r4
 80167a6:	ca08      	ldmia	r2!, {r3}
 80167a8:	9212      	str	r2, [sp, #72]	; 0x48
 80167aa:	06b2      	lsls	r2, r6, #26
 80167ac:	d508      	bpl.n	80167c0 <_svfprintf_r+0xa9c>
 80167ae:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80167b0:	601a      	str	r2, [r3, #0]
 80167b2:	17d2      	asrs	r2, r2, #31
 80167b4:	605a      	str	r2, [r3, #4]
 80167b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80167b8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80167ba:	9309      	str	r3, [sp, #36]	; 0x24
 80167bc:	f7ff faeb 	bl	8015d96 <_svfprintf_r+0x72>
 80167c0:	06f2      	lsls	r2, r6, #27
 80167c2:	d502      	bpl.n	80167ca <_svfprintf_r+0xaa6>
 80167c4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80167c6:	601a      	str	r2, [r3, #0]
 80167c8:	e7f5      	b.n	80167b6 <_svfprintf_r+0xa92>
 80167ca:	0672      	lsls	r2, r6, #25
 80167cc:	d502      	bpl.n	80167d4 <_svfprintf_r+0xab0>
 80167ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80167d0:	801a      	strh	r2, [r3, #0]
 80167d2:	e7f0      	b.n	80167b6 <_svfprintf_r+0xa92>
 80167d4:	05b2      	lsls	r2, r6, #22
 80167d6:	d5f5      	bpl.n	80167c4 <_svfprintf_r+0xaa0>
 80167d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80167da:	701a      	strb	r2, [r3, #0]
 80167dc:	e7eb      	b.n	80167b6 <_svfprintf_r+0xa92>
 80167de:	2310      	movs	r3, #16
 80167e0:	431e      	orrs	r6, r3
 80167e2:	2220      	movs	r2, #32
 80167e4:	4032      	ands	r2, r6
 80167e6:	d025      	beq.n	8016834 <_svfprintf_r+0xb10>
 80167e8:	2307      	movs	r3, #7
 80167ea:	3407      	adds	r4, #7
 80167ec:	439c      	bics	r4, r3
 80167ee:	0023      	movs	r3, r4
 80167f0:	3308      	adds	r3, #8
 80167f2:	9312      	str	r3, [sp, #72]	; 0x48
 80167f4:	6823      	ldr	r3, [r4, #0]
 80167f6:	6864      	ldr	r4, [r4, #4]
 80167f8:	9306      	str	r3, [sp, #24]
 80167fa:	9407      	str	r4, [sp, #28]
 80167fc:	4bc2      	ldr	r3, [pc, #776]	; (8016b08 <_svfprintf_r+0xde4>)
 80167fe:	401e      	ands	r6, r3
 8016800:	2300      	movs	r3, #0
 8016802:	221b      	movs	r2, #27
 8016804:	a91e      	add	r1, sp, #120	; 0x78
 8016806:	1852      	adds	r2, r2, r1
 8016808:	2100      	movs	r1, #0
 801680a:	7011      	strb	r1, [r2, #0]
 801680c:	9a08      	ldr	r2, [sp, #32]
 801680e:	3201      	adds	r2, #1
 8016810:	d100      	bne.n	8016814 <_svfprintf_r+0xaf0>
 8016812:	e0a6      	b.n	8016962 <_svfprintf_r+0xc3e>
 8016814:	0032      	movs	r2, r6
 8016816:	2180      	movs	r1, #128	; 0x80
 8016818:	9807      	ldr	r0, [sp, #28]
 801681a:	438e      	bics	r6, r1
 801681c:	9906      	ldr	r1, [sp, #24]
 801681e:	4301      	orrs	r1, r0
 8016820:	d000      	beq.n	8016824 <_svfprintf_r+0xb00>
 8016822:	e09e      	b.n	8016962 <_svfprintf_r+0xc3e>
 8016824:	9908      	ldr	r1, [sp, #32]
 8016826:	2900      	cmp	r1, #0
 8016828:	d100      	bne.n	801682c <_svfprintf_r+0xb08>
 801682a:	e125      	b.n	8016a78 <_svfprintf_r+0xd54>
 801682c:	2b01      	cmp	r3, #1
 801682e:	d000      	beq.n	8016832 <_svfprintf_r+0xb0e>
 8016830:	e09a      	b.n	8016968 <_svfprintf_r+0xc44>
 8016832:	e518      	b.n	8016266 <_svfprintf_r+0x542>
 8016834:	1d23      	adds	r3, r4, #4
 8016836:	9312      	str	r3, [sp, #72]	; 0x48
 8016838:	2310      	movs	r3, #16
 801683a:	4033      	ands	r3, r6
 801683c:	d003      	beq.n	8016846 <_svfprintf_r+0xb22>
 801683e:	6823      	ldr	r3, [r4, #0]
 8016840:	9306      	str	r3, [sp, #24]
 8016842:	9207      	str	r2, [sp, #28]
 8016844:	e7da      	b.n	80167fc <_svfprintf_r+0xad8>
 8016846:	2240      	movs	r2, #64	; 0x40
 8016848:	4032      	ands	r2, r6
 801684a:	d004      	beq.n	8016856 <_svfprintf_r+0xb32>
 801684c:	6822      	ldr	r2, [r4, #0]
 801684e:	b292      	uxth	r2, r2
 8016850:	9206      	str	r2, [sp, #24]
 8016852:	9307      	str	r3, [sp, #28]
 8016854:	e7d2      	b.n	80167fc <_svfprintf_r+0xad8>
 8016856:	2380      	movs	r3, #128	; 0x80
 8016858:	009b      	lsls	r3, r3, #2
 801685a:	4033      	ands	r3, r6
 801685c:	d002      	beq.n	8016864 <_svfprintf_r+0xb40>
 801685e:	6823      	ldr	r3, [r4, #0]
 8016860:	b2db      	uxtb	r3, r3
 8016862:	e7ed      	b.n	8016840 <_svfprintf_r+0xb1c>
 8016864:	6822      	ldr	r2, [r4, #0]
 8016866:	e7f3      	b.n	8016850 <_svfprintf_r+0xb2c>
 8016868:	1d23      	adds	r3, r4, #4
 801686a:	49a8      	ldr	r1, [pc, #672]	; (8016b0c <_svfprintf_r+0xde8>)
 801686c:	aa25      	add	r2, sp, #148	; 0x94
 801686e:	9312      	str	r3, [sp, #72]	; 0x48
 8016870:	6823      	ldr	r3, [r4, #0]
 8016872:	8011      	strh	r1, [r2, #0]
 8016874:	4aa6      	ldr	r2, [pc, #664]	; (8016b10 <_svfprintf_r+0xdec>)
 8016876:	9306      	str	r3, [sp, #24]
 8016878:	2300      	movs	r3, #0
 801687a:	921e      	str	r2, [sp, #120]	; 0x78
 801687c:	2278      	movs	r2, #120	; 0x78
 801687e:	9307      	str	r3, [sp, #28]
 8016880:	3302      	adds	r3, #2
 8016882:	431e      	orrs	r6, r3
 8016884:	920e      	str	r2, [sp, #56]	; 0x38
 8016886:	e7bc      	b.n	8016802 <_svfprintf_r+0xade>
 8016888:	1d23      	adds	r3, r4, #4
 801688a:	9312      	str	r3, [sp, #72]	; 0x48
 801688c:	6823      	ldr	r3, [r4, #0]
 801688e:	2400      	movs	r4, #0
 8016890:	9309      	str	r3, [sp, #36]	; 0x24
 8016892:	231b      	movs	r3, #27
 8016894:	aa1e      	add	r2, sp, #120	; 0x78
 8016896:	189b      	adds	r3, r3, r2
 8016898:	701c      	strb	r4, [r3, #0]
 801689a:	9b08      	ldr	r3, [sp, #32]
 801689c:	3301      	adds	r3, #1
 801689e:	d00e      	beq.n	80168be <_svfprintf_r+0xb9a>
 80168a0:	9a08      	ldr	r2, [sp, #32]
 80168a2:	0021      	movs	r1, r4
 80168a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168a6:	f001 ff79 	bl	801879c <memchr>
 80168aa:	900c      	str	r0, [sp, #48]	; 0x30
 80168ac:	42a0      	cmp	r0, r4
 80168ae:	d100      	bne.n	80168b2 <_svfprintf_r+0xb8e>
 80168b0:	e100      	b.n	8016ab4 <_svfprintf_r+0xd90>
 80168b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80168b4:	1a83      	subs	r3, r0, r2
 80168b6:	9308      	str	r3, [sp, #32]
 80168b8:	940c      	str	r4, [sp, #48]	; 0x30
 80168ba:	0023      	movs	r3, r4
 80168bc:	e527      	b.n	801630e <_svfprintf_r+0x5ea>
 80168be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168c0:	f7e9 fc2a 	bl	8000118 <strlen>
 80168c4:	9008      	str	r0, [sp, #32]
 80168c6:	e7f7      	b.n	80168b8 <_svfprintf_r+0xb94>
 80168c8:	2310      	movs	r3, #16
 80168ca:	431e      	orrs	r6, r3
 80168cc:	2220      	movs	r2, #32
 80168ce:	4032      	ands	r2, r6
 80168d0:	d00b      	beq.n	80168ea <_svfprintf_r+0xbc6>
 80168d2:	2307      	movs	r3, #7
 80168d4:	3407      	adds	r4, #7
 80168d6:	439c      	bics	r4, r3
 80168d8:	0023      	movs	r3, r4
 80168da:	3308      	adds	r3, #8
 80168dc:	9312      	str	r3, [sp, #72]	; 0x48
 80168de:	6823      	ldr	r3, [r4, #0]
 80168e0:	6864      	ldr	r4, [r4, #4]
 80168e2:	9306      	str	r3, [sp, #24]
 80168e4:	9407      	str	r4, [sp, #28]
 80168e6:	2301      	movs	r3, #1
 80168e8:	e78b      	b.n	8016802 <_svfprintf_r+0xade>
 80168ea:	1d23      	adds	r3, r4, #4
 80168ec:	9312      	str	r3, [sp, #72]	; 0x48
 80168ee:	2310      	movs	r3, #16
 80168f0:	4033      	ands	r3, r6
 80168f2:	d003      	beq.n	80168fc <_svfprintf_r+0xbd8>
 80168f4:	6823      	ldr	r3, [r4, #0]
 80168f6:	9306      	str	r3, [sp, #24]
 80168f8:	9207      	str	r2, [sp, #28]
 80168fa:	e7f4      	b.n	80168e6 <_svfprintf_r+0xbc2>
 80168fc:	2240      	movs	r2, #64	; 0x40
 80168fe:	4032      	ands	r2, r6
 8016900:	d004      	beq.n	801690c <_svfprintf_r+0xbe8>
 8016902:	6822      	ldr	r2, [r4, #0]
 8016904:	b292      	uxth	r2, r2
 8016906:	9206      	str	r2, [sp, #24]
 8016908:	9307      	str	r3, [sp, #28]
 801690a:	e7ec      	b.n	80168e6 <_svfprintf_r+0xbc2>
 801690c:	2380      	movs	r3, #128	; 0x80
 801690e:	009b      	lsls	r3, r3, #2
 8016910:	4033      	ands	r3, r6
 8016912:	d002      	beq.n	801691a <_svfprintf_r+0xbf6>
 8016914:	6823      	ldr	r3, [r4, #0]
 8016916:	b2db      	uxtb	r3, r3
 8016918:	e7ed      	b.n	80168f6 <_svfprintf_r+0xbd2>
 801691a:	6822      	ldr	r2, [r4, #0]
 801691c:	e7f3      	b.n	8016906 <_svfprintf_r+0xbe2>
 801691e:	4b7c      	ldr	r3, [pc, #496]	; (8016b10 <_svfprintf_r+0xdec>)
 8016920:	f7ff fad9 	bl	8015ed6 <_svfprintf_r+0x1b2>
 8016924:	1d23      	adds	r3, r4, #4
 8016926:	9312      	str	r3, [sp, #72]	; 0x48
 8016928:	2310      	movs	r3, #16
 801692a:	4033      	ands	r3, r6
 801692c:	d004      	beq.n	8016938 <_svfprintf_r+0xc14>
 801692e:	6823      	ldr	r3, [r4, #0]
 8016930:	9306      	str	r3, [sp, #24]
 8016932:	9207      	str	r2, [sp, #28]
 8016934:	f7ff fadf 	bl	8015ef6 <_svfprintf_r+0x1d2>
 8016938:	2240      	movs	r2, #64	; 0x40
 801693a:	4032      	ands	r2, r6
 801693c:	d005      	beq.n	801694a <_svfprintf_r+0xc26>
 801693e:	6822      	ldr	r2, [r4, #0]
 8016940:	b292      	uxth	r2, r2
 8016942:	9206      	str	r2, [sp, #24]
 8016944:	9307      	str	r3, [sp, #28]
 8016946:	f7ff fad6 	bl	8015ef6 <_svfprintf_r+0x1d2>
 801694a:	2380      	movs	r3, #128	; 0x80
 801694c:	009b      	lsls	r3, r3, #2
 801694e:	4033      	ands	r3, r6
 8016950:	d002      	beq.n	8016958 <_svfprintf_r+0xc34>
 8016952:	6823      	ldr	r3, [r4, #0]
 8016954:	b2db      	uxtb	r3, r3
 8016956:	e7eb      	b.n	8016930 <_svfprintf_r+0xc0c>
 8016958:	6822      	ldr	r2, [r4, #0]
 801695a:	e7f2      	b.n	8016942 <_svfprintf_r+0xc1e>
 801695c:	0032      	movs	r2, r6
 801695e:	2301      	movs	r3, #1
 8016960:	e759      	b.n	8016816 <_svfprintf_r+0xaf2>
 8016962:	2b01      	cmp	r3, #1
 8016964:	d100      	bne.n	8016968 <_svfprintf_r+0xc44>
 8016966:	e476      	b.n	8016256 <_svfprintf_r+0x532>
 8016968:	2b02      	cmp	r3, #2
 801696a:	d06b      	beq.n	8016a44 <_svfprintf_r+0xd20>
 801696c:	2507      	movs	r5, #7
 801696e:	ab58      	add	r3, sp, #352	; 0x160
 8016970:	1e5a      	subs	r2, r3, #1
 8016972:	9209      	str	r2, [sp, #36]	; 0x24
 8016974:	9a06      	ldr	r2, [sp, #24]
 8016976:	1e59      	subs	r1, r3, #1
 8016978:	402a      	ands	r2, r5
 801697a:	3230      	adds	r2, #48	; 0x30
 801697c:	700a      	strb	r2, [r1, #0]
 801697e:	9907      	ldr	r1, [sp, #28]
 8016980:	074c      	lsls	r4, r1, #29
 8016982:	9906      	ldr	r1, [sp, #24]
 8016984:	08c8      	lsrs	r0, r1, #3
 8016986:	9907      	ldr	r1, [sp, #28]
 8016988:	4304      	orrs	r4, r0
 801698a:	08c9      	lsrs	r1, r1, #3
 801698c:	9107      	str	r1, [sp, #28]
 801698e:	0021      	movs	r1, r4
 8016990:	9807      	ldr	r0, [sp, #28]
 8016992:	9406      	str	r4, [sp, #24]
 8016994:	4301      	orrs	r1, r0
 8016996:	d111      	bne.n	80169bc <_svfprintf_r+0xc98>
 8016998:	07f1      	lsls	r1, r6, #31
 801699a:	d502      	bpl.n	80169a2 <_svfprintf_r+0xc7e>
 801699c:	3b02      	subs	r3, #2
 801699e:	2a30      	cmp	r2, #48	; 0x30
 80169a0:	d173      	bne.n	8016a8a <_svfprintf_r+0xd66>
 80169a2:	9b08      	ldr	r3, [sp, #32]
 80169a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169a6:	9317      	str	r3, [sp, #92]	; 0x5c
 80169a8:	ab58      	add	r3, sp, #352	; 0x160
 80169aa:	1a9b      	subs	r3, r3, r2
 80169ac:	9308      	str	r3, [sp, #32]
 80169ae:	2300      	movs	r3, #0
 80169b0:	930c      	str	r3, [sp, #48]	; 0x30
 80169b2:	9310      	str	r3, [sp, #64]	; 0x40
 80169b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80169b6:	001d      	movs	r5, r3
 80169b8:	f7ff fb4b 	bl	8016052 <_svfprintf_r+0x32e>
 80169bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169be:	e7d7      	b.n	8016970 <_svfprintf_r+0xc4c>
 80169c0:	2480      	movs	r4, #128	; 0x80
 80169c2:	2300      	movs	r3, #0
 80169c4:	00e4      	lsls	r4, r4, #3
 80169c6:	930d      	str	r3, [sp, #52]	; 0x34
 80169c8:	4034      	ands	r4, r6
 80169ca:	ab58      	add	r3, sp, #352	; 0x160
 80169cc:	3b01      	subs	r3, #1
 80169ce:	9309      	str	r3, [sp, #36]	; 0x24
 80169d0:	220a      	movs	r2, #10
 80169d2:	9806      	ldr	r0, [sp, #24]
 80169d4:	9907      	ldr	r1, [sp, #28]
 80169d6:	2300      	movs	r3, #0
 80169d8:	f7e9 fda8 	bl	800052c <__aeabi_uldivmod>
 80169dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169de:	3230      	adds	r2, #48	; 0x30
 80169e0:	701a      	strb	r2, [r3, #0]
 80169e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80169e4:	3301      	adds	r3, #1
 80169e6:	930d      	str	r3, [sp, #52]	; 0x34
 80169e8:	2c00      	cmp	r4, #0
 80169ea:	d01d      	beq.n	8016a28 <_svfprintf_r+0xd04>
 80169ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d118      	bne.n	8016a28 <_svfprintf_r+0xd04>
 80169f6:	2aff      	cmp	r2, #255	; 0xff
 80169f8:	d016      	beq.n	8016a28 <_svfprintf_r+0xd04>
 80169fa:	9b07      	ldr	r3, [sp, #28]
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d102      	bne.n	8016a06 <_svfprintf_r+0xce2>
 8016a00:	9b06      	ldr	r3, [sp, #24]
 8016a02:	2b09      	cmp	r3, #9
 8016a04:	d910      	bls.n	8016a28 <_svfprintf_r+0xd04>
 8016a06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a08:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a0a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8016a0c:	1a9b      	subs	r3, r3, r2
 8016a0e:	0018      	movs	r0, r3
 8016a10:	9309      	str	r3, [sp, #36]	; 0x24
 8016a12:	f7fe fa52 	bl	8014eba <strncpy>
 8016a16:	2200      	movs	r2, #0
 8016a18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016a1a:	920d      	str	r2, [sp, #52]	; 0x34
 8016a1c:	785b      	ldrb	r3, [r3, #1]
 8016a1e:	1e5a      	subs	r2, r3, #1
 8016a20:	4193      	sbcs	r3, r2
 8016a22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016a24:	18d3      	adds	r3, r2, r3
 8016a26:	9313      	str	r3, [sp, #76]	; 0x4c
 8016a28:	220a      	movs	r2, #10
 8016a2a:	9806      	ldr	r0, [sp, #24]
 8016a2c:	9907      	ldr	r1, [sp, #28]
 8016a2e:	2300      	movs	r3, #0
 8016a30:	f7e9 fd7c 	bl	800052c <__aeabi_uldivmod>
 8016a34:	9006      	str	r0, [sp, #24]
 8016a36:	9107      	str	r1, [sp, #28]
 8016a38:	9b06      	ldr	r3, [sp, #24]
 8016a3a:	9a07      	ldr	r2, [sp, #28]
 8016a3c:	4313      	orrs	r3, r2
 8016a3e:	d0b0      	beq.n	80169a2 <_svfprintf_r+0xc7e>
 8016a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a42:	e7c3      	b.n	80169cc <_svfprintf_r+0xca8>
 8016a44:	200f      	movs	r0, #15
 8016a46:	ab58      	add	r3, sp, #352	; 0x160
 8016a48:	9309      	str	r3, [sp, #36]	; 0x24
 8016a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a4c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016a4e:	3b01      	subs	r3, #1
 8016a50:	9309      	str	r3, [sp, #36]	; 0x24
 8016a52:	9b06      	ldr	r3, [sp, #24]
 8016a54:	4003      	ands	r3, r0
 8016a56:	5cd3      	ldrb	r3, [r2, r3]
 8016a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a5a:	7013      	strb	r3, [r2, #0]
 8016a5c:	9b07      	ldr	r3, [sp, #28]
 8016a5e:	0719      	lsls	r1, r3, #28
 8016a60:	9b06      	ldr	r3, [sp, #24]
 8016a62:	091a      	lsrs	r2, r3, #4
 8016a64:	9b07      	ldr	r3, [sp, #28]
 8016a66:	4311      	orrs	r1, r2
 8016a68:	091b      	lsrs	r3, r3, #4
 8016a6a:	9307      	str	r3, [sp, #28]
 8016a6c:	000b      	movs	r3, r1
 8016a6e:	9a07      	ldr	r2, [sp, #28]
 8016a70:	9106      	str	r1, [sp, #24]
 8016a72:	4313      	orrs	r3, r2
 8016a74:	d1e9      	bne.n	8016a4a <_svfprintf_r+0xd26>
 8016a76:	e794      	b.n	80169a2 <_svfprintf_r+0xc7e>
 8016a78:	a958      	add	r1, sp, #352	; 0x160
 8016a7a:	9109      	str	r1, [sp, #36]	; 0x24
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d190      	bne.n	80169a2 <_svfprintf_r+0xc7e>
 8016a80:	07d3      	lsls	r3, r2, #31
 8016a82:	d58e      	bpl.n	80169a2 <_svfprintf_r+0xc7e>
 8016a84:	23e7      	movs	r3, #231	; 0xe7
 8016a86:	aa1e      	add	r2, sp, #120	; 0x78
 8016a88:	189b      	adds	r3, r3, r2
 8016a8a:	2230      	movs	r2, #48	; 0x30
 8016a8c:	f7ff fbf0 	bl	8016270 <_svfprintf_r+0x54c>
 8016a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d100      	bne.n	8016a98 <_svfprintf_r+0xd74>
 8016a96:	e38a      	b.n	80171ae <_svfprintf_r+0x148a>
 8016a98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a9a:	ab3f      	add	r3, sp, #252	; 0xfc
 8016a9c:	701a      	strb	r2, [r3, #0]
 8016a9e:	221b      	movs	r2, #27
 8016aa0:	2000      	movs	r0, #0
 8016aa2:	a91e      	add	r1, sp, #120	; 0x78
 8016aa4:	1852      	adds	r2, r2, r1
 8016aa6:	7010      	strb	r0, [r2, #0]
 8016aa8:	9412      	str	r4, [sp, #72]	; 0x48
 8016aaa:	f7ff faca 	bl	8016042 <_svfprintf_r+0x31e>
 8016aae:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016ab0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8016ab2:	e592      	b.n	80165da <_svfprintf_r+0x8b6>
 8016ab4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ab6:	e42a      	b.n	801630e <_svfprintf_r+0x5ea>
 8016ab8:	2010      	movs	r0, #16
 8016aba:	1812      	adds	r2, r2, r0
 8016abc:	6078      	str	r0, [r7, #4]
 8016abe:	922e      	str	r2, [sp, #184]	; 0xb8
 8016ac0:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ac2:	2b07      	cmp	r3, #7
 8016ac4:	dd08      	ble.n	8016ad8 <_svfprintf_r+0xdb4>
 8016ac6:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ac8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016aca:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016acc:	f002 fa7e 	bl	8018fcc <__ssprint_r>
 8016ad0:	2800      	cmp	r0, #0
 8016ad2:	d000      	beq.n	8016ad6 <_svfprintf_r+0xdb2>
 8016ad4:	e34a      	b.n	801716c <_svfprintf_r+0x1448>
 8016ad6:	a92f      	add	r1, sp, #188	; 0xbc
 8016ad8:	3c10      	subs	r4, #16
 8016ada:	000f      	movs	r7, r1
 8016adc:	f7ff fad8 	bl	8016090 <_svfprintf_r+0x36c>
 8016ae0:	2010      	movs	r0, #16
 8016ae2:	1812      	adds	r2, r2, r0
 8016ae4:	6078      	str	r0, [r7, #4]
 8016ae6:	922e      	str	r2, [sp, #184]	; 0xb8
 8016ae8:	932d      	str	r3, [sp, #180]	; 0xb4
 8016aea:	2b07      	cmp	r3, #7
 8016aec:	dd08      	ble.n	8016b00 <_svfprintf_r+0xddc>
 8016aee:	aa2c      	add	r2, sp, #176	; 0xb0
 8016af0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016af2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016af4:	f002 fa6a 	bl	8018fcc <__ssprint_r>
 8016af8:	2800      	cmp	r0, #0
 8016afa:	d000      	beq.n	8016afe <_svfprintf_r+0xdda>
 8016afc:	e336      	b.n	801716c <_svfprintf_r+0x1448>
 8016afe:	a92f      	add	r1, sp, #188	; 0xbc
 8016b00:	3c10      	subs	r4, #16
 8016b02:	000f      	movs	r7, r1
 8016b04:	f7ff fb24 	bl	8016150 <_svfprintf_r+0x42c>
 8016b08:	fffffbff 	.word	0xfffffbff
 8016b0c:	00007830 	.word	0x00007830
 8016b10:	0801c3a8 	.word	0x0801c3a8
 8016b14:	2010      	movs	r0, #16
 8016b16:	1812      	adds	r2, r2, r0
 8016b18:	6078      	str	r0, [r7, #4]
 8016b1a:	922e      	str	r2, [sp, #184]	; 0xb8
 8016b1c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b1e:	2b07      	cmp	r3, #7
 8016b20:	dd08      	ble.n	8016b34 <_svfprintf_r+0xe10>
 8016b22:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b26:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b28:	f002 fa50 	bl	8018fcc <__ssprint_r>
 8016b2c:	2800      	cmp	r0, #0
 8016b2e:	d000      	beq.n	8016b32 <_svfprintf_r+0xe0e>
 8016b30:	e31c      	b.n	801716c <_svfprintf_r+0x1448>
 8016b32:	a92f      	add	r1, sp, #188	; 0xbc
 8016b34:	3c10      	subs	r4, #16
 8016b36:	000f      	movs	r7, r1
 8016b38:	f7ff fb2c 	bl	8016194 <_svfprintf_r+0x470>
 8016b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b3e:	2b65      	cmp	r3, #101	; 0x65
 8016b40:	dc00      	bgt.n	8016b44 <_svfprintf_r+0xe20>
 8016b42:	e259      	b.n	8016ff8 <_svfprintf_r+0x12d4>
 8016b44:	2200      	movs	r2, #0
 8016b46:	2300      	movs	r3, #0
 8016b48:	981a      	ldr	r0, [sp, #104]	; 0x68
 8016b4a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016b4c:	f7e9 fc86 	bl	800045c <__aeabi_dcmpeq>
 8016b50:	2800      	cmp	r0, #0
 8016b52:	d07c      	beq.n	8016c4e <_svfprintf_r+0xf2a>
 8016b54:	4b81      	ldr	r3, [pc, #516]	; (8016d5c <_svfprintf_r+0x1038>)
 8016b56:	603b      	str	r3, [r7, #0]
 8016b58:	2301      	movs	r3, #1
 8016b5a:	607b      	str	r3, [r7, #4]
 8016b5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016b5e:	3708      	adds	r7, #8
 8016b60:	3301      	adds	r3, #1
 8016b62:	932e      	str	r3, [sp, #184]	; 0xb8
 8016b64:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b66:	9308      	str	r3, [sp, #32]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b6c:	2b07      	cmp	r3, #7
 8016b6e:	dd08      	ble.n	8016b82 <_svfprintf_r+0xe5e>
 8016b70:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b74:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b76:	f002 fa29 	bl	8018fcc <__ssprint_r>
 8016b7a:	2800      	cmp	r0, #0
 8016b7c:	d000      	beq.n	8016b80 <_svfprintf_r+0xe5c>
 8016b7e:	e2f5      	b.n	801716c <_svfprintf_r+0x1448>
 8016b80:	af2f      	add	r7, sp, #188	; 0xbc
 8016b82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016b84:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b86:	4293      	cmp	r3, r2
 8016b88:	db01      	blt.n	8016b8e <_svfprintf_r+0xe6a>
 8016b8a:	07f3      	lsls	r3, r6, #31
 8016b8c:	d51d      	bpl.n	8016bca <_svfprintf_r+0xea6>
 8016b8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016b90:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016b92:	4694      	mov	ip, r2
 8016b94:	603b      	str	r3, [r7, #0]
 8016b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b98:	607b      	str	r3, [r7, #4]
 8016b9a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016b9c:	3708      	adds	r7, #8
 8016b9e:	4463      	add	r3, ip
 8016ba0:	932e      	str	r3, [sp, #184]	; 0xb8
 8016ba2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ba4:	9308      	str	r3, [sp, #32]
 8016ba6:	3301      	adds	r3, #1
 8016ba8:	932d      	str	r3, [sp, #180]	; 0xb4
 8016baa:	2b07      	cmp	r3, #7
 8016bac:	dd08      	ble.n	8016bc0 <_svfprintf_r+0xe9c>
 8016bae:	aa2c      	add	r2, sp, #176	; 0xb0
 8016bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bb2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bb4:	f002 fa0a 	bl	8018fcc <__ssprint_r>
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	d000      	beq.n	8016bbe <_svfprintf_r+0xe9a>
 8016bbc:	e2d6      	b.n	801716c <_svfprintf_r+0x1448>
 8016bbe:	af2f      	add	r7, sp, #188	; 0xbc
 8016bc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bc2:	2510      	movs	r5, #16
 8016bc4:	1e5c      	subs	r4, r3, #1
 8016bc6:	2c00      	cmp	r4, #0
 8016bc8:	dc2f      	bgt.n	8016c2a <_svfprintf_r+0xf06>
 8016bca:	0773      	lsls	r3, r6, #29
 8016bcc:	d500      	bpl.n	8016bd0 <_svfprintf_r+0xeac>
 8016bce:	e2af      	b.n	8017130 <_svfprintf_r+0x140c>
 8016bd0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016bd2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	da00      	bge.n	8016bda <_svfprintf_r+0xeb6>
 8016bd8:	0013      	movs	r3, r2
 8016bda:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016bdc:	18d3      	adds	r3, r2, r3
 8016bde:	9315      	str	r3, [sp, #84]	; 0x54
 8016be0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016be2:	9308      	str	r3, [sp, #32]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d007      	beq.n	8016bf8 <_svfprintf_r+0xed4>
 8016be8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bee:	f002 f9ed 	bl	8018fcc <__ssprint_r>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d000      	beq.n	8016bf8 <_svfprintf_r+0xed4>
 8016bf6:	e2b9      	b.n	801716c <_svfprintf_r+0x1448>
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	932d      	str	r3, [sp, #180]	; 0xb4
 8016bfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d000      	beq.n	8016c04 <_svfprintf_r+0xee0>
 8016c02:	e2cf      	b.n	80171a4 <_svfprintf_r+0x1480>
 8016c04:	af2f      	add	r7, sp, #188	; 0xbc
 8016c06:	e5d6      	b.n	80167b6 <_svfprintf_r+0xa92>
 8016c08:	3210      	adds	r2, #16
 8016c0a:	607d      	str	r5, [r7, #4]
 8016c0c:	922e      	str	r2, [sp, #184]	; 0xb8
 8016c0e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c10:	2b07      	cmp	r3, #7
 8016c12:	dd08      	ble.n	8016c26 <_svfprintf_r+0xf02>
 8016c14:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c16:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c18:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c1a:	f002 f9d7 	bl	8018fcc <__ssprint_r>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d000      	beq.n	8016c24 <_svfprintf_r+0xf00>
 8016c22:	e2a3      	b.n	801716c <_svfprintf_r+0x1448>
 8016c24:	a92f      	add	r1, sp, #188	; 0xbc
 8016c26:	000f      	movs	r7, r1
 8016c28:	3c10      	subs	r4, #16
 8016c2a:	0039      	movs	r1, r7
 8016c2c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c2e:	484c      	ldr	r0, [pc, #304]	; (8016d60 <_svfprintf_r+0x103c>)
 8016c30:	9308      	str	r3, [sp, #32]
 8016c32:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016c34:	3301      	adds	r3, #1
 8016c36:	3108      	adds	r1, #8
 8016c38:	6038      	str	r0, [r7, #0]
 8016c3a:	2c10      	cmp	r4, #16
 8016c3c:	dce4      	bgt.n	8016c08 <_svfprintf_r+0xee4>
 8016c3e:	607c      	str	r4, [r7, #4]
 8016c40:	18a4      	adds	r4, r4, r2
 8016c42:	942e      	str	r4, [sp, #184]	; 0xb8
 8016c44:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c46:	000f      	movs	r7, r1
 8016c48:	2b07      	cmp	r3, #7
 8016c4a:	ddbe      	ble.n	8016bca <_svfprintf_r+0xea6>
 8016c4c:	e06a      	b.n	8016d24 <_svfprintf_r+0x1000>
 8016c4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	dd00      	ble.n	8016c56 <_svfprintf_r+0xf32>
 8016c54:	e086      	b.n	8016d64 <_svfprintf_r+0x1040>
 8016c56:	4b41      	ldr	r3, [pc, #260]	; (8016d5c <_svfprintf_r+0x1038>)
 8016c58:	603b      	str	r3, [r7, #0]
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	607b      	str	r3, [r7, #4]
 8016c5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016c60:	3708      	adds	r7, #8
 8016c62:	3301      	adds	r3, #1
 8016c64:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c66:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c68:	9308      	str	r3, [sp, #32]
 8016c6a:	3301      	adds	r3, #1
 8016c6c:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c6e:	2b07      	cmp	r3, #7
 8016c70:	dd08      	ble.n	8016c84 <_svfprintf_r+0xf60>
 8016c72:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c78:	f002 f9a8 	bl	8018fcc <__ssprint_r>
 8016c7c:	2800      	cmp	r0, #0
 8016c7e:	d000      	beq.n	8016c82 <_svfprintf_r+0xf5e>
 8016c80:	e274      	b.n	801716c <_svfprintf_r+0x1448>
 8016c82:	af2f      	add	r7, sp, #188	; 0xbc
 8016c84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d104      	bne.n	8016c94 <_svfprintf_r+0xf70>
 8016c8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d101      	bne.n	8016c94 <_svfprintf_r+0xf70>
 8016c90:	07f3      	lsls	r3, r6, #31
 8016c92:	d59a      	bpl.n	8016bca <_svfprintf_r+0xea6>
 8016c94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016c96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016c98:	4694      	mov	ip, r2
 8016c9a:	603b      	str	r3, [r7, #0]
 8016c9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016c9e:	607b      	str	r3, [r7, #4]
 8016ca0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016ca2:	3708      	adds	r7, #8
 8016ca4:	4463      	add	r3, ip
 8016ca6:	932e      	str	r3, [sp, #184]	; 0xb8
 8016ca8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016caa:	9308      	str	r3, [sp, #32]
 8016cac:	3301      	adds	r3, #1
 8016cae:	932d      	str	r3, [sp, #180]	; 0xb4
 8016cb0:	2b07      	cmp	r3, #7
 8016cb2:	dd08      	ble.n	8016cc6 <_svfprintf_r+0xfa2>
 8016cb4:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cb8:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cba:	f002 f987 	bl	8018fcc <__ssprint_r>
 8016cbe:	2800      	cmp	r0, #0
 8016cc0:	d000      	beq.n	8016cc4 <_svfprintf_r+0xfa0>
 8016cc2:	e253      	b.n	801716c <_svfprintf_r+0x1448>
 8016cc4:	af2f      	add	r7, sp, #188	; 0xbc
 8016cc6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016cc8:	2c00      	cmp	r4, #0
 8016cca:	da1a      	bge.n	8016d02 <_svfprintf_r+0xfde>
 8016ccc:	0039      	movs	r1, r7
 8016cce:	2510      	movs	r5, #16
 8016cd0:	4264      	negs	r4, r4
 8016cd2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016cd4:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8016cd6:	9308      	str	r3, [sp, #32]
 8016cd8:	1c5a      	adds	r2, r3, #1
 8016cda:	4b21      	ldr	r3, [pc, #132]	; (8016d60 <_svfprintf_r+0x103c>)
 8016cdc:	3708      	adds	r7, #8
 8016cde:	600b      	str	r3, [r1, #0]
 8016ce0:	2c10      	cmp	r4, #16
 8016ce2:	dc29      	bgt.n	8016d38 <_svfprintf_r+0x1014>
 8016ce4:	604c      	str	r4, [r1, #4]
 8016ce6:	1824      	adds	r4, r4, r0
 8016ce8:	942e      	str	r4, [sp, #184]	; 0xb8
 8016cea:	922d      	str	r2, [sp, #180]	; 0xb4
 8016cec:	2a07      	cmp	r2, #7
 8016cee:	dd08      	ble.n	8016d02 <_svfprintf_r+0xfde>
 8016cf0:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cf4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cf6:	f002 f969 	bl	8018fcc <__ssprint_r>
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d000      	beq.n	8016d00 <_svfprintf_r+0xfdc>
 8016cfe:	e235      	b.n	801716c <_svfprintf_r+0x1448>
 8016d00:	af2f      	add	r7, sp, #188	; 0xbc
 8016d02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d06:	468c      	mov	ip, r1
 8016d08:	603b      	str	r3, [r7, #0]
 8016d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d0c:	607b      	str	r3, [r7, #4]
 8016d0e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016d10:	4463      	add	r3, ip
 8016d12:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d14:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d16:	1c5a      	adds	r2, r3, #1
 8016d18:	9308      	str	r3, [sp, #32]
 8016d1a:	922d      	str	r2, [sp, #180]	; 0xb4
 8016d1c:	2a07      	cmp	r2, #7
 8016d1e:	dc01      	bgt.n	8016d24 <_svfprintf_r+0x1000>
 8016d20:	f7ff fa6c 	bl	80161fc <_svfprintf_r+0x4d8>
 8016d24:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d26:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d28:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d2a:	f002 f94f 	bl	8018fcc <__ssprint_r>
 8016d2e:	2800      	cmp	r0, #0
 8016d30:	d000      	beq.n	8016d34 <_svfprintf_r+0x1010>
 8016d32:	e21b      	b.n	801716c <_svfprintf_r+0x1448>
 8016d34:	af2f      	add	r7, sp, #188	; 0xbc
 8016d36:	e748      	b.n	8016bca <_svfprintf_r+0xea6>
 8016d38:	3010      	adds	r0, #16
 8016d3a:	604d      	str	r5, [r1, #4]
 8016d3c:	902e      	str	r0, [sp, #184]	; 0xb8
 8016d3e:	922d      	str	r2, [sp, #180]	; 0xb4
 8016d40:	2a07      	cmp	r2, #7
 8016d42:	dd08      	ble.n	8016d56 <_svfprintf_r+0x1032>
 8016d44:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d46:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d48:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d4a:	f002 f93f 	bl	8018fcc <__ssprint_r>
 8016d4e:	2800      	cmp	r0, #0
 8016d50:	d000      	beq.n	8016d54 <_svfprintf_r+0x1030>
 8016d52:	e20b      	b.n	801716c <_svfprintf_r+0x1448>
 8016d54:	af2f      	add	r7, sp, #188	; 0xbc
 8016d56:	3c10      	subs	r4, #16
 8016d58:	0039      	movs	r1, r7
 8016d5a:	e7ba      	b.n	8016cd2 <_svfprintf_r+0xfae>
 8016d5c:	0801c3ca 	.word	0x0801c3ca
 8016d60:	0801c3dc 	.word	0x0801c3dc
 8016d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d66:	002c      	movs	r4, r5
 8016d68:	429d      	cmp	r5, r3
 8016d6a:	dd00      	ble.n	8016d6e <_svfprintf_r+0x104a>
 8016d6c:	001c      	movs	r4, r3
 8016d6e:	2c00      	cmp	r4, #0
 8016d70:	dd15      	ble.n	8016d9e <_svfprintf_r+0x107a>
 8016d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d74:	607c      	str	r4, [r7, #4]
 8016d76:	603b      	str	r3, [r7, #0]
 8016d78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016d7a:	3708      	adds	r7, #8
 8016d7c:	18e3      	adds	r3, r4, r3
 8016d7e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016d80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016d82:	9308      	str	r3, [sp, #32]
 8016d84:	3301      	adds	r3, #1
 8016d86:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d88:	2b07      	cmp	r3, #7
 8016d8a:	dd08      	ble.n	8016d9e <_svfprintf_r+0x107a>
 8016d8c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d92:	f002 f91b 	bl	8018fcc <__ssprint_r>
 8016d96:	2800      	cmp	r0, #0
 8016d98:	d000      	beq.n	8016d9c <_svfprintf_r+0x1078>
 8016d9a:	e1e7      	b.n	801716c <_svfprintf_r+0x1448>
 8016d9c:	af2f      	add	r7, sp, #188	; 0xbc
 8016d9e:	43e3      	mvns	r3, r4
 8016da0:	17db      	asrs	r3, r3, #31
 8016da2:	401c      	ands	r4, r3
 8016da4:	1b2c      	subs	r4, r5, r4
 8016da6:	2c00      	cmp	r4, #0
 8016da8:	dd1a      	ble.n	8016de0 <_svfprintf_r+0x10bc>
 8016daa:	0039      	movs	r1, r7
 8016dac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016dae:	48d4      	ldr	r0, [pc, #848]	; (8017100 <_svfprintf_r+0x13dc>)
 8016db0:	9308      	str	r3, [sp, #32]
 8016db2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016db4:	3301      	adds	r3, #1
 8016db6:	3108      	adds	r1, #8
 8016db8:	6038      	str	r0, [r7, #0]
 8016dba:	2c10      	cmp	r4, #16
 8016dbc:	dd00      	ble.n	8016dc0 <_svfprintf_r+0x109c>
 8016dbe:	e089      	b.n	8016ed4 <_svfprintf_r+0x11b0>
 8016dc0:	607c      	str	r4, [r7, #4]
 8016dc2:	18a4      	adds	r4, r4, r2
 8016dc4:	942e      	str	r4, [sp, #184]	; 0xb8
 8016dc6:	932d      	str	r3, [sp, #180]	; 0xb4
 8016dc8:	000f      	movs	r7, r1
 8016dca:	2b07      	cmp	r3, #7
 8016dcc:	dd08      	ble.n	8016de0 <_svfprintf_r+0x10bc>
 8016dce:	aa2c      	add	r2, sp, #176	; 0xb0
 8016dd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dd2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016dd4:	f002 f8fa 	bl	8018fcc <__ssprint_r>
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d000      	beq.n	8016dde <_svfprintf_r+0x10ba>
 8016ddc:	e1c6      	b.n	801716c <_svfprintf_r+0x1448>
 8016dde:	af2f      	add	r7, sp, #188	; 0xbc
 8016de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016de2:	195d      	adds	r5, r3, r5
 8016de4:	0573      	lsls	r3, r6, #21
 8016de6:	d50d      	bpl.n	8016e04 <_svfprintf_r+0x10e0>
 8016de8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d000      	beq.n	8016df0 <_svfprintf_r+0x10cc>
 8016dee:	e084      	b.n	8016efa <_svfprintf_r+0x11d6>
 8016df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d000      	beq.n	8016df8 <_svfprintf_r+0x10d4>
 8016df6:	e083      	b.n	8016f00 <_svfprintf_r+0x11dc>
 8016df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016dfc:	189b      	adds	r3, r3, r2
 8016dfe:	429d      	cmp	r5, r3
 8016e00:	d900      	bls.n	8016e04 <_svfprintf_r+0x10e0>
 8016e02:	001d      	movs	r5, r3
 8016e04:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016e06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e08:	4293      	cmp	r3, r2
 8016e0a:	db01      	blt.n	8016e10 <_svfprintf_r+0x10ec>
 8016e0c:	07f3      	lsls	r3, r6, #31
 8016e0e:	d518      	bpl.n	8016e42 <_svfprintf_r+0x111e>
 8016e10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016e12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016e14:	4694      	mov	ip, r2
 8016e16:	603b      	str	r3, [r7, #0]
 8016e18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016e1a:	607b      	str	r3, [r7, #4]
 8016e1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e1e:	3708      	adds	r7, #8
 8016e20:	4463      	add	r3, ip
 8016e22:	932e      	str	r3, [sp, #184]	; 0xb8
 8016e24:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e26:	9308      	str	r3, [sp, #32]
 8016e28:	3301      	adds	r3, #1
 8016e2a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e2c:	2b07      	cmp	r3, #7
 8016e2e:	dd08      	ble.n	8016e42 <_svfprintf_r+0x111e>
 8016e30:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e36:	f002 f8c9 	bl	8018fcc <__ssprint_r>
 8016e3a:	2800      	cmp	r0, #0
 8016e3c:	d000      	beq.n	8016e40 <_svfprintf_r+0x111c>
 8016e3e:	e195      	b.n	801716c <_svfprintf_r+0x1448>
 8016e40:	af2f      	add	r7, sp, #188	; 0xbc
 8016e42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e46:	4694      	mov	ip, r2
 8016e48:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016e4a:	4463      	add	r3, ip
 8016e4c:	1b5b      	subs	r3, r3, r5
 8016e4e:	1a54      	subs	r4, r2, r1
 8016e50:	429c      	cmp	r4, r3
 8016e52:	dd00      	ble.n	8016e56 <_svfprintf_r+0x1132>
 8016e54:	001c      	movs	r4, r3
 8016e56:	2c00      	cmp	r4, #0
 8016e58:	dd14      	ble.n	8016e84 <_svfprintf_r+0x1160>
 8016e5a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016e5c:	603d      	str	r5, [r7, #0]
 8016e5e:	18e3      	adds	r3, r4, r3
 8016e60:	932e      	str	r3, [sp, #184]	; 0xb8
 8016e62:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e64:	607c      	str	r4, [r7, #4]
 8016e66:	9308      	str	r3, [sp, #32]
 8016e68:	3301      	adds	r3, #1
 8016e6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016e6c:	3708      	adds	r7, #8
 8016e6e:	2b07      	cmp	r3, #7
 8016e70:	dd08      	ble.n	8016e84 <_svfprintf_r+0x1160>
 8016e72:	aa2c      	add	r2, sp, #176	; 0xb0
 8016e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016e76:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016e78:	f002 f8a8 	bl	8018fcc <__ssprint_r>
 8016e7c:	2800      	cmp	r0, #0
 8016e7e:	d000      	beq.n	8016e82 <_svfprintf_r+0x115e>
 8016e80:	e174      	b.n	801716c <_svfprintf_r+0x1448>
 8016e82:	af2f      	add	r7, sp, #188	; 0xbc
 8016e84:	43e3      	mvns	r3, r4
 8016e86:	17db      	asrs	r3, r3, #31
 8016e88:	401c      	ands	r4, r3
 8016e8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016e8e:	2510      	movs	r5, #16
 8016e90:	1a9b      	subs	r3, r3, r2
 8016e92:	1b1c      	subs	r4, r3, r4
 8016e94:	2c00      	cmp	r4, #0
 8016e96:	dc00      	bgt.n	8016e9a <_svfprintf_r+0x1176>
 8016e98:	e697      	b.n	8016bca <_svfprintf_r+0xea6>
 8016e9a:	0039      	movs	r1, r7
 8016e9c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016e9e:	4898      	ldr	r0, [pc, #608]	; (8017100 <_svfprintf_r+0x13dc>)
 8016ea0:	9308      	str	r3, [sp, #32]
 8016ea2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	3108      	adds	r1, #8
 8016ea8:	6038      	str	r0, [r7, #0]
 8016eaa:	2c10      	cmp	r4, #16
 8016eac:	dc00      	bgt.n	8016eb0 <_svfprintf_r+0x118c>
 8016eae:	e6c6      	b.n	8016c3e <_svfprintf_r+0xf1a>
 8016eb0:	3210      	adds	r2, #16
 8016eb2:	607d      	str	r5, [r7, #4]
 8016eb4:	922e      	str	r2, [sp, #184]	; 0xb8
 8016eb6:	932d      	str	r3, [sp, #180]	; 0xb4
 8016eb8:	2b07      	cmp	r3, #7
 8016eba:	dd08      	ble.n	8016ece <_svfprintf_r+0x11aa>
 8016ebc:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ebe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ec0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ec2:	f002 f883 	bl	8018fcc <__ssprint_r>
 8016ec6:	2800      	cmp	r0, #0
 8016ec8:	d000      	beq.n	8016ecc <_svfprintf_r+0x11a8>
 8016eca:	e14f      	b.n	801716c <_svfprintf_r+0x1448>
 8016ecc:	a92f      	add	r1, sp, #188	; 0xbc
 8016ece:	3c10      	subs	r4, #16
 8016ed0:	000f      	movs	r7, r1
 8016ed2:	e7e2      	b.n	8016e9a <_svfprintf_r+0x1176>
 8016ed4:	2010      	movs	r0, #16
 8016ed6:	1812      	adds	r2, r2, r0
 8016ed8:	6078      	str	r0, [r7, #4]
 8016eda:	922e      	str	r2, [sp, #184]	; 0xb8
 8016edc:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ede:	2b07      	cmp	r3, #7
 8016ee0:	dd08      	ble.n	8016ef4 <_svfprintf_r+0x11d0>
 8016ee2:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ee6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ee8:	f002 f870 	bl	8018fcc <__ssprint_r>
 8016eec:	2800      	cmp	r0, #0
 8016eee:	d000      	beq.n	8016ef2 <_svfprintf_r+0x11ce>
 8016ef0:	e13c      	b.n	801716c <_svfprintf_r+0x1448>
 8016ef2:	a92f      	add	r1, sp, #188	; 0xbc
 8016ef4:	3c10      	subs	r4, #16
 8016ef6:	000f      	movs	r7, r1
 8016ef8:	e757      	b.n	8016daa <_svfprintf_r+0x1086>
 8016efa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d061      	beq.n	8016fc4 <_svfprintf_r+0x12a0>
 8016f00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016f02:	3b01      	subs	r3, #1
 8016f04:	9310      	str	r3, [sp, #64]	; 0x40
 8016f06:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016f08:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016f0a:	4694      	mov	ip, r2
 8016f0c:	603b      	str	r3, [r7, #0]
 8016f0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016f10:	607b      	str	r3, [r7, #4]
 8016f12:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016f14:	3708      	adds	r7, #8
 8016f16:	4463      	add	r3, ip
 8016f18:	932e      	str	r3, [sp, #184]	; 0xb8
 8016f1a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f1c:	9308      	str	r3, [sp, #32]
 8016f1e:	3301      	adds	r3, #1
 8016f20:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f22:	2b07      	cmp	r3, #7
 8016f24:	dd08      	ble.n	8016f38 <_svfprintf_r+0x1214>
 8016f26:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f2c:	f002 f84e 	bl	8018fcc <__ssprint_r>
 8016f30:	2800      	cmp	r0, #0
 8016f32:	d000      	beq.n	8016f36 <_svfprintf_r+0x1212>
 8016f34:	e11a      	b.n	801716c <_svfprintf_r+0x1448>
 8016f36:	af2f      	add	r7, sp, #188	; 0xbc
 8016f38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f3c:	189b      	adds	r3, r3, r2
 8016f3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016f40:	1b5b      	subs	r3, r3, r5
 8016f42:	7814      	ldrb	r4, [r2, #0]
 8016f44:	429c      	cmp	r4, r3
 8016f46:	dd00      	ble.n	8016f4a <_svfprintf_r+0x1226>
 8016f48:	001c      	movs	r4, r3
 8016f4a:	2c00      	cmp	r4, #0
 8016f4c:	dd14      	ble.n	8016f78 <_svfprintf_r+0x1254>
 8016f4e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016f50:	603d      	str	r5, [r7, #0]
 8016f52:	18e3      	adds	r3, r4, r3
 8016f54:	932e      	str	r3, [sp, #184]	; 0xb8
 8016f56:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f58:	607c      	str	r4, [r7, #4]
 8016f5a:	9308      	str	r3, [sp, #32]
 8016f5c:	3301      	adds	r3, #1
 8016f5e:	932d      	str	r3, [sp, #180]	; 0xb4
 8016f60:	3708      	adds	r7, #8
 8016f62:	2b07      	cmp	r3, #7
 8016f64:	dd08      	ble.n	8016f78 <_svfprintf_r+0x1254>
 8016f66:	aa2c      	add	r2, sp, #176	; 0xb0
 8016f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016f6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016f6c:	f002 f82e 	bl	8018fcc <__ssprint_r>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	d000      	beq.n	8016f76 <_svfprintf_r+0x1252>
 8016f74:	e0fa      	b.n	801716c <_svfprintf_r+0x1448>
 8016f76:	af2f      	add	r7, sp, #188	; 0xbc
 8016f78:	43e3      	mvns	r3, r4
 8016f7a:	17db      	asrs	r3, r3, #31
 8016f7c:	401c      	ands	r4, r3
 8016f7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016f80:	781b      	ldrb	r3, [r3, #0]
 8016f82:	1b1c      	subs	r4, r3, r4
 8016f84:	2c00      	cmp	r4, #0
 8016f86:	dd19      	ble.n	8016fbc <_svfprintf_r+0x1298>
 8016f88:	0039      	movs	r1, r7
 8016f8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016f8c:	485c      	ldr	r0, [pc, #368]	; (8017100 <_svfprintf_r+0x13dc>)
 8016f8e:	9308      	str	r3, [sp, #32]
 8016f90:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016f92:	3301      	adds	r3, #1
 8016f94:	3108      	adds	r1, #8
 8016f96:	6038      	str	r0, [r7, #0]
 8016f98:	2c10      	cmp	r4, #16
 8016f9a:	dc1a      	bgt.n	8016fd2 <_svfprintf_r+0x12ae>
 8016f9c:	607c      	str	r4, [r7, #4]
 8016f9e:	18a4      	adds	r4, r4, r2
 8016fa0:	942e      	str	r4, [sp, #184]	; 0xb8
 8016fa2:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fa4:	000f      	movs	r7, r1
 8016fa6:	2b07      	cmp	r3, #7
 8016fa8:	dd08      	ble.n	8016fbc <_svfprintf_r+0x1298>
 8016faa:	aa2c      	add	r2, sp, #176	; 0xb0
 8016fac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fae:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016fb0:	f002 f80c 	bl	8018fcc <__ssprint_r>
 8016fb4:	2800      	cmp	r0, #0
 8016fb6:	d000      	beq.n	8016fba <_svfprintf_r+0x1296>
 8016fb8:	e0d8      	b.n	801716c <_svfprintf_r+0x1448>
 8016fba:	af2f      	add	r7, sp, #188	; 0xbc
 8016fbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	18ed      	adds	r5, r5, r3
 8016fc2:	e711      	b.n	8016de8 <_svfprintf_r+0x10c4>
 8016fc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016fc6:	3b01      	subs	r3, #1
 8016fc8:	9313      	str	r3, [sp, #76]	; 0x4c
 8016fca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fcc:	3b01      	subs	r3, #1
 8016fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8016fd0:	e799      	b.n	8016f06 <_svfprintf_r+0x11e2>
 8016fd2:	2010      	movs	r0, #16
 8016fd4:	1812      	adds	r2, r2, r0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	922e      	str	r2, [sp, #184]	; 0xb8
 8016fda:	932d      	str	r3, [sp, #180]	; 0xb4
 8016fdc:	2b07      	cmp	r3, #7
 8016fde:	dd08      	ble.n	8016ff2 <_svfprintf_r+0x12ce>
 8016fe0:	aa2c      	add	r2, sp, #176	; 0xb0
 8016fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016fe4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016fe6:	f001 fff1 	bl	8018fcc <__ssprint_r>
 8016fea:	2800      	cmp	r0, #0
 8016fec:	d000      	beq.n	8016ff0 <_svfprintf_r+0x12cc>
 8016fee:	e0bd      	b.n	801716c <_svfprintf_r+0x1448>
 8016ff0:	a92f      	add	r1, sp, #188	; 0xbc
 8016ff2:	3c10      	subs	r4, #16
 8016ff4:	000f      	movs	r7, r1
 8016ff6:	e7c7      	b.n	8016f88 <_svfprintf_r+0x1264>
 8016ff8:	003c      	movs	r4, r7
 8016ffa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ffc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8016ffe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017000:	9308      	str	r3, [sp, #32]
 8017002:	3101      	adds	r1, #1
 8017004:	3301      	adds	r3, #1
 8017006:	3408      	adds	r4, #8
 8017008:	2a01      	cmp	r2, #1
 801700a:	dc03      	bgt.n	8017014 <_svfprintf_r+0x12f0>
 801700c:	2201      	movs	r2, #1
 801700e:	4216      	tst	r6, r2
 8017010:	d100      	bne.n	8017014 <_svfprintf_r+0x12f0>
 8017012:	e088      	b.n	8017126 <_svfprintf_r+0x1402>
 8017014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017016:	912e      	str	r1, [sp, #184]	; 0xb8
 8017018:	603a      	str	r2, [r7, #0]
 801701a:	2201      	movs	r2, #1
 801701c:	932d      	str	r3, [sp, #180]	; 0xb4
 801701e:	607a      	str	r2, [r7, #4]
 8017020:	2b07      	cmp	r3, #7
 8017022:	dd08      	ble.n	8017036 <_svfprintf_r+0x1312>
 8017024:	aa2c      	add	r2, sp, #176	; 0xb0
 8017026:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017028:	980a      	ldr	r0, [sp, #40]	; 0x28
 801702a:	f001 ffcf 	bl	8018fcc <__ssprint_r>
 801702e:	2800      	cmp	r0, #0
 8017030:	d000      	beq.n	8017034 <_svfprintf_r+0x1310>
 8017032:	e09b      	b.n	801716c <_svfprintf_r+0x1448>
 8017034:	ac2f      	add	r4, sp, #188	; 0xbc
 8017036:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017038:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801703a:	4694      	mov	ip, r2
 801703c:	6023      	str	r3, [r4, #0]
 801703e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017040:	6063      	str	r3, [r4, #4]
 8017042:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8017044:	3408      	adds	r4, #8
 8017046:	4463      	add	r3, ip
 8017048:	932e      	str	r3, [sp, #184]	; 0xb8
 801704a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801704c:	9308      	str	r3, [sp, #32]
 801704e:	3301      	adds	r3, #1
 8017050:	932d      	str	r3, [sp, #180]	; 0xb4
 8017052:	2b07      	cmp	r3, #7
 8017054:	dd08      	ble.n	8017068 <_svfprintf_r+0x1344>
 8017056:	aa2c      	add	r2, sp, #176	; 0xb0
 8017058:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801705a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801705c:	f001 ffb6 	bl	8018fcc <__ssprint_r>
 8017060:	2800      	cmp	r0, #0
 8017062:	d000      	beq.n	8017066 <_svfprintf_r+0x1342>
 8017064:	e082      	b.n	801716c <_svfprintf_r+0x1448>
 8017066:	ac2f      	add	r4, sp, #188	; 0xbc
 8017068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801706a:	2200      	movs	r2, #0
 801706c:	1e5d      	subs	r5, r3, #1
 801706e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8017070:	2300      	movs	r3, #0
 8017072:	9919      	ldr	r1, [sp, #100]	; 0x64
 8017074:	f7e9 f9f2 	bl	800045c <__aeabi_dcmpeq>
 8017078:	2800      	cmp	r0, #0
 801707a:	d12c      	bne.n	80170d6 <_svfprintf_r+0x13b2>
 801707c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801707e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8017080:	9308      	str	r3, [sp, #32]
 8017082:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017084:	6065      	str	r5, [r4, #4]
 8017086:	1c5a      	adds	r2, r3, #1
 8017088:	930e      	str	r3, [sp, #56]	; 0x38
 801708a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801708c:	922d      	str	r2, [sp, #180]	; 0xb4
 801708e:	3301      	adds	r3, #1
 8017090:	6023      	str	r3, [r4, #0]
 8017092:	9b08      	ldr	r3, [sp, #32]
 8017094:	3408      	adds	r4, #8
 8017096:	3b01      	subs	r3, #1
 8017098:	185b      	adds	r3, r3, r1
 801709a:	932e      	str	r3, [sp, #184]	; 0xb8
 801709c:	2a07      	cmp	r2, #7
 801709e:	dd07      	ble.n	80170b0 <_svfprintf_r+0x138c>
 80170a0:	aa2c      	add	r2, sp, #176	; 0xb0
 80170a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80170a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80170a6:	f001 ff91 	bl	8018fcc <__ssprint_r>
 80170aa:	2800      	cmp	r0, #0
 80170ac:	d15e      	bne.n	801716c <_svfprintf_r+0x1448>
 80170ae:	ac2f      	add	r4, sp, #188	; 0xbc
 80170b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80170b2:	ab28      	add	r3, sp, #160	; 0xa0
 80170b4:	4694      	mov	ip, r2
 80170b6:	6023      	str	r3, [r4, #0]
 80170b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80170ba:	6063      	str	r3, [r4, #4]
 80170bc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80170be:	4463      	add	r3, ip
 80170c0:	932e      	str	r3, [sp, #184]	; 0xb8
 80170c2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80170c4:	9308      	str	r3, [sp, #32]
 80170c6:	3301      	adds	r3, #1
 80170c8:	932d      	str	r3, [sp, #180]	; 0xb4
 80170ca:	2b07      	cmp	r3, #7
 80170cc:	dd00      	ble.n	80170d0 <_svfprintf_r+0x13ac>
 80170ce:	e629      	b.n	8016d24 <_svfprintf_r+0x1000>
 80170d0:	3408      	adds	r4, #8
 80170d2:	0027      	movs	r7, r4
 80170d4:	e579      	b.n	8016bca <_svfprintf_r+0xea6>
 80170d6:	2710      	movs	r7, #16
 80170d8:	2d00      	cmp	r5, #0
 80170da:	dde9      	ble.n	80170b0 <_svfprintf_r+0x138c>
 80170dc:	0021      	movs	r1, r4
 80170de:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80170e0:	4807      	ldr	r0, [pc, #28]	; (8017100 <_svfprintf_r+0x13dc>)
 80170e2:	9308      	str	r3, [sp, #32]
 80170e4:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80170e6:	3301      	adds	r3, #1
 80170e8:	3108      	adds	r1, #8
 80170ea:	6020      	str	r0, [r4, #0]
 80170ec:	2d10      	cmp	r5, #16
 80170ee:	dc09      	bgt.n	8017104 <_svfprintf_r+0x13e0>
 80170f0:	6065      	str	r5, [r4, #4]
 80170f2:	000c      	movs	r4, r1
 80170f4:	18ad      	adds	r5, r5, r2
 80170f6:	952e      	str	r5, [sp, #184]	; 0xb8
 80170f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80170fa:	2b07      	cmp	r3, #7
 80170fc:	ddd8      	ble.n	80170b0 <_svfprintf_r+0x138c>
 80170fe:	e7cf      	b.n	80170a0 <_svfprintf_r+0x137c>
 8017100:	0801c3dc 	.word	0x0801c3dc
 8017104:	3210      	adds	r2, #16
 8017106:	6067      	str	r7, [r4, #4]
 8017108:	922e      	str	r2, [sp, #184]	; 0xb8
 801710a:	932d      	str	r3, [sp, #180]	; 0xb4
 801710c:	2b07      	cmp	r3, #7
 801710e:	dd07      	ble.n	8017120 <_svfprintf_r+0x13fc>
 8017110:	aa2c      	add	r2, sp, #176	; 0xb0
 8017112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017114:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017116:	f001 ff59 	bl	8018fcc <__ssprint_r>
 801711a:	2800      	cmp	r0, #0
 801711c:	d126      	bne.n	801716c <_svfprintf_r+0x1448>
 801711e:	a92f      	add	r1, sp, #188	; 0xbc
 8017120:	3d10      	subs	r5, #16
 8017122:	000c      	movs	r4, r1
 8017124:	e7da      	b.n	80170dc <_svfprintf_r+0x13b8>
 8017126:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017128:	912e      	str	r1, [sp, #184]	; 0xb8
 801712a:	c705      	stmia	r7!, {r0, r2}
 801712c:	932d      	str	r3, [sp, #180]	; 0xb4
 801712e:	e7e4      	b.n	80170fa <_svfprintf_r+0x13d6>
 8017130:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017132:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017134:	2510      	movs	r5, #16
 8017136:	1a9c      	subs	r4, r3, r2
 8017138:	2c00      	cmp	r4, #0
 801713a:	dc00      	bgt.n	801713e <_svfprintf_r+0x141a>
 801713c:	e548      	b.n	8016bd0 <_svfprintf_r+0xeac>
 801713e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8017140:	4921      	ldr	r1, [pc, #132]	; (80171c8 <_svfprintf_r+0x14a4>)
 8017142:	9308      	str	r3, [sp, #32]
 8017144:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8017146:	3301      	adds	r3, #1
 8017148:	6039      	str	r1, [r7, #0]
 801714a:	2c10      	cmp	r4, #16
 801714c:	dc19      	bgt.n	8017182 <_svfprintf_r+0x145e>
 801714e:	607c      	str	r4, [r7, #4]
 8017150:	18a4      	adds	r4, r4, r2
 8017152:	942e      	str	r4, [sp, #184]	; 0xb8
 8017154:	932d      	str	r3, [sp, #180]	; 0xb4
 8017156:	2b07      	cmp	r3, #7
 8017158:	dc00      	bgt.n	801715c <_svfprintf_r+0x1438>
 801715a:	e539      	b.n	8016bd0 <_svfprintf_r+0xeac>
 801715c:	aa2c      	add	r2, sp, #176	; 0xb0
 801715e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017160:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017162:	f001 ff33 	bl	8018fcc <__ssprint_r>
 8017166:	2800      	cmp	r0, #0
 8017168:	d100      	bne.n	801716c <_svfprintf_r+0x1448>
 801716a:	e531      	b.n	8016bd0 <_svfprintf_r+0xeac>
 801716c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801716e:	2b00      	cmp	r3, #0
 8017170:	d101      	bne.n	8017176 <_svfprintf_r+0x1452>
 8017172:	f7ff f908 	bl	8016386 <_svfprintf_r+0x662>
 8017176:	0019      	movs	r1, r3
 8017178:	980a      	ldr	r0, [sp, #40]	; 0x28
 801717a:	f000 ff19 	bl	8017fb0 <_free_r>
 801717e:	f7ff f902 	bl	8016386 <_svfprintf_r+0x662>
 8017182:	3210      	adds	r2, #16
 8017184:	607d      	str	r5, [r7, #4]
 8017186:	922e      	str	r2, [sp, #184]	; 0xb8
 8017188:	932d      	str	r3, [sp, #180]	; 0xb4
 801718a:	3708      	adds	r7, #8
 801718c:	2b07      	cmp	r3, #7
 801718e:	dd07      	ble.n	80171a0 <_svfprintf_r+0x147c>
 8017190:	aa2c      	add	r2, sp, #176	; 0xb0
 8017192:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017194:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017196:	f001 ff19 	bl	8018fcc <__ssprint_r>
 801719a:	2800      	cmp	r0, #0
 801719c:	d1e6      	bne.n	801716c <_svfprintf_r+0x1448>
 801719e:	af2f      	add	r7, sp, #188	; 0xbc
 80171a0:	3c10      	subs	r4, #16
 80171a2:	e7cc      	b.n	801713e <_svfprintf_r+0x141a>
 80171a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80171a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80171a8:	f000 ff02 	bl	8017fb0 <_free_r>
 80171ac:	e52a      	b.n	8016c04 <_svfprintf_r+0xee0>
 80171ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80171b0:	9306      	str	r3, [sp, #24]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d101      	bne.n	80171ba <_svfprintf_r+0x1496>
 80171b6:	f7ff f8e6 	bl	8016386 <_svfprintf_r+0x662>
 80171ba:	aa2c      	add	r2, sp, #176	; 0xb0
 80171bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80171be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80171c0:	f001 ff04 	bl	8018fcc <__ssprint_r>
 80171c4:	f7ff f8df 	bl	8016386 <_svfprintf_r+0x662>
 80171c8:	0801c3cc 	.word	0x0801c3cc

080171cc <sysconf>:
 80171cc:	2380      	movs	r3, #128	; 0x80
 80171ce:	b510      	push	{r4, lr}
 80171d0:	015b      	lsls	r3, r3, #5
 80171d2:	2808      	cmp	r0, #8
 80171d4:	d004      	beq.n	80171e0 <sysconf+0x14>
 80171d6:	f000 fe7d 	bl	8017ed4 <__errno>
 80171da:	2316      	movs	r3, #22
 80171dc:	6003      	str	r3, [r0, #0]
 80171de:	3b17      	subs	r3, #23
 80171e0:	0018      	movs	r0, r3
 80171e2:	bd10      	pop	{r4, pc}

080171e4 <__ascii_wctomb>:
 80171e4:	1e0b      	subs	r3, r1, #0
 80171e6:	d004      	beq.n	80171f2 <__ascii_wctomb+0xe>
 80171e8:	2aff      	cmp	r2, #255	; 0xff
 80171ea:	d904      	bls.n	80171f6 <__ascii_wctomb+0x12>
 80171ec:	238a      	movs	r3, #138	; 0x8a
 80171ee:	6003      	str	r3, [r0, #0]
 80171f0:	3b8b      	subs	r3, #139	; 0x8b
 80171f2:	0018      	movs	r0, r3
 80171f4:	4770      	bx	lr
 80171f6:	700a      	strb	r2, [r1, #0]
 80171f8:	2301      	movs	r3, #1
 80171fa:	e7fa      	b.n	80171f2 <__ascii_wctomb+0xe>

080171fc <register_fini>:
 80171fc:	4b03      	ldr	r3, [pc, #12]	; (801720c <register_fini+0x10>)
 80171fe:	b510      	push	{r4, lr}
 8017200:	2b00      	cmp	r3, #0
 8017202:	d002      	beq.n	801720a <register_fini+0xe>
 8017204:	4802      	ldr	r0, [pc, #8]	; (8017210 <register_fini+0x14>)
 8017206:	f000 f805 	bl	8017214 <atexit>
 801720a:	bd10      	pop	{r4, pc}
 801720c:	00000000 	.word	0x00000000
 8017210:	08017ee1 	.word	0x08017ee1

08017214 <atexit>:
 8017214:	2300      	movs	r3, #0
 8017216:	b510      	push	{r4, lr}
 8017218:	0001      	movs	r1, r0
 801721a:	001a      	movs	r2, r3
 801721c:	0018      	movs	r0, r3
 801721e:	f001 ff53 	bl	80190c8 <__register_exitproc>
 8017222:	bd10      	pop	{r4, pc}

08017224 <quorem>:
 8017224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017226:	6903      	ldr	r3, [r0, #16]
 8017228:	690c      	ldr	r4, [r1, #16]
 801722a:	b089      	sub	sp, #36	; 0x24
 801722c:	0007      	movs	r7, r0
 801722e:	9105      	str	r1, [sp, #20]
 8017230:	2600      	movs	r6, #0
 8017232:	42a3      	cmp	r3, r4
 8017234:	db65      	blt.n	8017302 <quorem+0xde>
 8017236:	000b      	movs	r3, r1
 8017238:	3c01      	subs	r4, #1
 801723a:	3314      	adds	r3, #20
 801723c:	00a5      	lsls	r5, r4, #2
 801723e:	9303      	str	r3, [sp, #12]
 8017240:	195b      	adds	r3, r3, r5
 8017242:	9304      	str	r3, [sp, #16]
 8017244:	0003      	movs	r3, r0
 8017246:	3314      	adds	r3, #20
 8017248:	9302      	str	r3, [sp, #8]
 801724a:	195d      	adds	r5, r3, r5
 801724c:	9b04      	ldr	r3, [sp, #16]
 801724e:	6828      	ldr	r0, [r5, #0]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	1c59      	adds	r1, r3, #1
 8017254:	9301      	str	r3, [sp, #4]
 8017256:	f7e8 ff7b 	bl	8000150 <__udivsi3>
 801725a:	9001      	str	r0, [sp, #4]
 801725c:	42b0      	cmp	r0, r6
 801725e:	d029      	beq.n	80172b4 <quorem+0x90>
 8017260:	9b03      	ldr	r3, [sp, #12]
 8017262:	9802      	ldr	r0, [sp, #8]
 8017264:	469c      	mov	ip, r3
 8017266:	9606      	str	r6, [sp, #24]
 8017268:	4662      	mov	r2, ip
 801726a:	ca08      	ldmia	r2!, {r3}
 801726c:	4694      	mov	ip, r2
 801726e:	9a01      	ldr	r2, [sp, #4]
 8017270:	b299      	uxth	r1, r3
 8017272:	4351      	muls	r1, r2
 8017274:	0c1b      	lsrs	r3, r3, #16
 8017276:	4353      	muls	r3, r2
 8017278:	1989      	adds	r1, r1, r6
 801727a:	0c0a      	lsrs	r2, r1, #16
 801727c:	189b      	adds	r3, r3, r2
 801727e:	9307      	str	r3, [sp, #28]
 8017280:	0c1e      	lsrs	r6, r3, #16
 8017282:	6803      	ldr	r3, [r0, #0]
 8017284:	b289      	uxth	r1, r1
 8017286:	b29a      	uxth	r2, r3
 8017288:	9b06      	ldr	r3, [sp, #24]
 801728a:	18d2      	adds	r2, r2, r3
 801728c:	6803      	ldr	r3, [r0, #0]
 801728e:	1a52      	subs	r2, r2, r1
 8017290:	0c19      	lsrs	r1, r3, #16
 8017292:	466b      	mov	r3, sp
 8017294:	8b9b      	ldrh	r3, [r3, #28]
 8017296:	1acb      	subs	r3, r1, r3
 8017298:	1411      	asrs	r1, r2, #16
 801729a:	185b      	adds	r3, r3, r1
 801729c:	1419      	asrs	r1, r3, #16
 801729e:	b292      	uxth	r2, r2
 80172a0:	041b      	lsls	r3, r3, #16
 80172a2:	431a      	orrs	r2, r3
 80172a4:	9b04      	ldr	r3, [sp, #16]
 80172a6:	9106      	str	r1, [sp, #24]
 80172a8:	c004      	stmia	r0!, {r2}
 80172aa:	4563      	cmp	r3, ip
 80172ac:	d2dc      	bcs.n	8017268 <quorem+0x44>
 80172ae:	682b      	ldr	r3, [r5, #0]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d02d      	beq.n	8017310 <quorem+0xec>
 80172b4:	9905      	ldr	r1, [sp, #20]
 80172b6:	0038      	movs	r0, r7
 80172b8:	f001 fcb2 	bl	8018c20 <__mcmp>
 80172bc:	2800      	cmp	r0, #0
 80172be:	db1f      	blt.n	8017300 <quorem+0xdc>
 80172c0:	2500      	movs	r5, #0
 80172c2:	9b01      	ldr	r3, [sp, #4]
 80172c4:	9802      	ldr	r0, [sp, #8]
 80172c6:	3301      	adds	r3, #1
 80172c8:	9903      	ldr	r1, [sp, #12]
 80172ca:	9301      	str	r3, [sp, #4]
 80172cc:	6802      	ldr	r2, [r0, #0]
 80172ce:	c908      	ldmia	r1!, {r3}
 80172d0:	b292      	uxth	r2, r2
 80172d2:	1955      	adds	r5, r2, r5
 80172d4:	b29a      	uxth	r2, r3
 80172d6:	1aaa      	subs	r2, r5, r2
 80172d8:	6805      	ldr	r5, [r0, #0]
 80172da:	0c1b      	lsrs	r3, r3, #16
 80172dc:	0c2d      	lsrs	r5, r5, #16
 80172de:	1aeb      	subs	r3, r5, r3
 80172e0:	1415      	asrs	r5, r2, #16
 80172e2:	195b      	adds	r3, r3, r5
 80172e4:	141d      	asrs	r5, r3, #16
 80172e6:	b292      	uxth	r2, r2
 80172e8:	041b      	lsls	r3, r3, #16
 80172ea:	4313      	orrs	r3, r2
 80172ec:	c008      	stmia	r0!, {r3}
 80172ee:	9b04      	ldr	r3, [sp, #16]
 80172f0:	428b      	cmp	r3, r1
 80172f2:	d2eb      	bcs.n	80172cc <quorem+0xa8>
 80172f4:	9a02      	ldr	r2, [sp, #8]
 80172f6:	00a3      	lsls	r3, r4, #2
 80172f8:	18d3      	adds	r3, r2, r3
 80172fa:	681a      	ldr	r2, [r3, #0]
 80172fc:	2a00      	cmp	r2, #0
 80172fe:	d011      	beq.n	8017324 <quorem+0x100>
 8017300:	9e01      	ldr	r6, [sp, #4]
 8017302:	0030      	movs	r0, r6
 8017304:	b009      	add	sp, #36	; 0x24
 8017306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017308:	682b      	ldr	r3, [r5, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d104      	bne.n	8017318 <quorem+0xf4>
 801730e:	3c01      	subs	r4, #1
 8017310:	9b02      	ldr	r3, [sp, #8]
 8017312:	3d04      	subs	r5, #4
 8017314:	42ab      	cmp	r3, r5
 8017316:	d3f7      	bcc.n	8017308 <quorem+0xe4>
 8017318:	613c      	str	r4, [r7, #16]
 801731a:	e7cb      	b.n	80172b4 <quorem+0x90>
 801731c:	681a      	ldr	r2, [r3, #0]
 801731e:	2a00      	cmp	r2, #0
 8017320:	d104      	bne.n	801732c <quorem+0x108>
 8017322:	3c01      	subs	r4, #1
 8017324:	9a02      	ldr	r2, [sp, #8]
 8017326:	3b04      	subs	r3, #4
 8017328:	429a      	cmp	r2, r3
 801732a:	d3f7      	bcc.n	801731c <quorem+0xf8>
 801732c:	613c      	str	r4, [r7, #16]
 801732e:	e7e7      	b.n	8017300 <quorem+0xdc>

08017330 <_dtoa_r>:
 8017330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017332:	0014      	movs	r4, r2
 8017334:	001d      	movs	r5, r3
 8017336:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8017338:	b09b      	sub	sp, #108	; 0x6c
 801733a:	9002      	str	r0, [sp, #8]
 801733c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801733e:	9406      	str	r4, [sp, #24]
 8017340:	9507      	str	r5, [sp, #28]
 8017342:	2900      	cmp	r1, #0
 8017344:	d009      	beq.n	801735a <_dtoa_r+0x2a>
 8017346:	2301      	movs	r3, #1
 8017348:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801734a:	4093      	lsls	r3, r2
 801734c:	604a      	str	r2, [r1, #4]
 801734e:	608b      	str	r3, [r1, #8]
 8017350:	f001 fa6a 	bl	8018828 <_Bfree>
 8017354:	2300      	movs	r3, #0
 8017356:	9a02      	ldr	r2, [sp, #8]
 8017358:	6413      	str	r3, [r2, #64]	; 0x40
 801735a:	2d00      	cmp	r5, #0
 801735c:	da20      	bge.n	80173a0 <_dtoa_r+0x70>
 801735e:	2301      	movs	r3, #1
 8017360:	6033      	str	r3, [r6, #0]
 8017362:	006b      	lsls	r3, r5, #1
 8017364:	085b      	lsrs	r3, r3, #1
 8017366:	9307      	str	r3, [sp, #28]
 8017368:	9c07      	ldr	r4, [sp, #28]
 801736a:	4bb2      	ldr	r3, [pc, #712]	; (8017634 <_dtoa_r+0x304>)
 801736c:	0022      	movs	r2, r4
 801736e:	9317      	str	r3, [sp, #92]	; 0x5c
 8017370:	401a      	ands	r2, r3
 8017372:	429a      	cmp	r2, r3
 8017374:	d117      	bne.n	80173a6 <_dtoa_r+0x76>
 8017376:	4bb0      	ldr	r3, [pc, #704]	; (8017638 <_dtoa_r+0x308>)
 8017378:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801737a:	6013      	str	r3, [r2, #0]
 801737c:	9b06      	ldr	r3, [sp, #24]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d103      	bne.n	801738a <_dtoa_r+0x5a>
 8017382:	0324      	lsls	r4, r4, #12
 8017384:	d101      	bne.n	801738a <_dtoa_r+0x5a>
 8017386:	f000 fd89 	bl	8017e9c <_dtoa_r+0xb6c>
 801738a:	4bac      	ldr	r3, [pc, #688]	; (801763c <_dtoa_r+0x30c>)
 801738c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801738e:	9308      	str	r3, [sp, #32]
 8017390:	2a00      	cmp	r2, #0
 8017392:	d002      	beq.n	801739a <_dtoa_r+0x6a>
 8017394:	4baa      	ldr	r3, [pc, #680]	; (8017640 <_dtoa_r+0x310>)
 8017396:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017398:	6013      	str	r3, [r2, #0]
 801739a:	9808      	ldr	r0, [sp, #32]
 801739c:	b01b      	add	sp, #108	; 0x6c
 801739e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173a0:	2300      	movs	r3, #0
 80173a2:	6033      	str	r3, [r6, #0]
 80173a4:	e7e0      	b.n	8017368 <_dtoa_r+0x38>
 80173a6:	9e06      	ldr	r6, [sp, #24]
 80173a8:	9f07      	ldr	r7, [sp, #28]
 80173aa:	2200      	movs	r2, #0
 80173ac:	2300      	movs	r3, #0
 80173ae:	0030      	movs	r0, r6
 80173b0:	0039      	movs	r1, r7
 80173b2:	f7e9 f853 	bl	800045c <__aeabi_dcmpeq>
 80173b6:	1e05      	subs	r5, r0, #0
 80173b8:	d00b      	beq.n	80173d2 <_dtoa_r+0xa2>
 80173ba:	2301      	movs	r3, #1
 80173bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80173be:	6013      	str	r3, [r2, #0]
 80173c0:	4ba0      	ldr	r3, [pc, #640]	; (8017644 <_dtoa_r+0x314>)
 80173c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80173c4:	9308      	str	r3, [sp, #32]
 80173c6:	2a00      	cmp	r2, #0
 80173c8:	d0e7      	beq.n	801739a <_dtoa_r+0x6a>
 80173ca:	4a9f      	ldr	r2, [pc, #636]	; (8017648 <_dtoa_r+0x318>)
 80173cc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80173ce:	600a      	str	r2, [r1, #0]
 80173d0:	e7e3      	b.n	801739a <_dtoa_r+0x6a>
 80173d2:	ab18      	add	r3, sp, #96	; 0x60
 80173d4:	9301      	str	r3, [sp, #4]
 80173d6:	ab19      	add	r3, sp, #100	; 0x64
 80173d8:	9300      	str	r3, [sp, #0]
 80173da:	0032      	movs	r2, r6
 80173dc:	003b      	movs	r3, r7
 80173de:	9802      	ldr	r0, [sp, #8]
 80173e0:	f001 fd0e 	bl	8018e00 <__d2b>
 80173e4:	0063      	lsls	r3, r4, #1
 80173e6:	9003      	str	r0, [sp, #12]
 80173e8:	0d5b      	lsrs	r3, r3, #21
 80173ea:	d074      	beq.n	80174d6 <_dtoa_r+0x1a6>
 80173ec:	033a      	lsls	r2, r7, #12
 80173ee:	4c97      	ldr	r4, [pc, #604]	; (801764c <_dtoa_r+0x31c>)
 80173f0:	0b12      	lsrs	r2, r2, #12
 80173f2:	4314      	orrs	r4, r2
 80173f4:	0021      	movs	r1, r4
 80173f6:	4a96      	ldr	r2, [pc, #600]	; (8017650 <_dtoa_r+0x320>)
 80173f8:	0030      	movs	r0, r6
 80173fa:	9516      	str	r5, [sp, #88]	; 0x58
 80173fc:	189e      	adds	r6, r3, r2
 80173fe:	2200      	movs	r2, #0
 8017400:	4b94      	ldr	r3, [pc, #592]	; (8017654 <_dtoa_r+0x324>)
 8017402:	f7ea ff89 	bl	8002318 <__aeabi_dsub>
 8017406:	4a94      	ldr	r2, [pc, #592]	; (8017658 <_dtoa_r+0x328>)
 8017408:	4b94      	ldr	r3, [pc, #592]	; (801765c <_dtoa_r+0x32c>)
 801740a:	f7ea fd13 	bl	8001e34 <__aeabi_dmul>
 801740e:	4a94      	ldr	r2, [pc, #592]	; (8017660 <_dtoa_r+0x330>)
 8017410:	4b94      	ldr	r3, [pc, #592]	; (8017664 <_dtoa_r+0x334>)
 8017412:	f7e9 fde9 	bl	8000fe8 <__aeabi_dadd>
 8017416:	0004      	movs	r4, r0
 8017418:	0030      	movs	r0, r6
 801741a:	000d      	movs	r5, r1
 801741c:	f7eb fb16 	bl	8002a4c <__aeabi_i2d>
 8017420:	4a91      	ldr	r2, [pc, #580]	; (8017668 <_dtoa_r+0x338>)
 8017422:	4b92      	ldr	r3, [pc, #584]	; (801766c <_dtoa_r+0x33c>)
 8017424:	f7ea fd06 	bl	8001e34 <__aeabi_dmul>
 8017428:	0002      	movs	r2, r0
 801742a:	000b      	movs	r3, r1
 801742c:	0020      	movs	r0, r4
 801742e:	0029      	movs	r1, r5
 8017430:	f7e9 fdda 	bl	8000fe8 <__aeabi_dadd>
 8017434:	0004      	movs	r4, r0
 8017436:	000d      	movs	r5, r1
 8017438:	f7eb fad2 	bl	80029e0 <__aeabi_d2iz>
 801743c:	2200      	movs	r2, #0
 801743e:	0007      	movs	r7, r0
 8017440:	2300      	movs	r3, #0
 8017442:	0020      	movs	r0, r4
 8017444:	0029      	movs	r1, r5
 8017446:	f7e9 f80f 	bl	8000468 <__aeabi_dcmplt>
 801744a:	2800      	cmp	r0, #0
 801744c:	d009      	beq.n	8017462 <_dtoa_r+0x132>
 801744e:	0038      	movs	r0, r7
 8017450:	f7eb fafc 	bl	8002a4c <__aeabi_i2d>
 8017454:	002b      	movs	r3, r5
 8017456:	0022      	movs	r2, r4
 8017458:	f7e9 f800 	bl	800045c <__aeabi_dcmpeq>
 801745c:	4243      	negs	r3, r0
 801745e:	4158      	adcs	r0, r3
 8017460:	1a3f      	subs	r7, r7, r0
 8017462:	2301      	movs	r3, #1
 8017464:	9314      	str	r3, [sp, #80]	; 0x50
 8017466:	2f16      	cmp	r7, #22
 8017468:	d80d      	bhi.n	8017486 <_dtoa_r+0x156>
 801746a:	4981      	ldr	r1, [pc, #516]	; (8017670 <_dtoa_r+0x340>)
 801746c:	00fb      	lsls	r3, r7, #3
 801746e:	18c9      	adds	r1, r1, r3
 8017470:	6808      	ldr	r0, [r1, #0]
 8017472:	6849      	ldr	r1, [r1, #4]
 8017474:	9a06      	ldr	r2, [sp, #24]
 8017476:	9b07      	ldr	r3, [sp, #28]
 8017478:	f7e9 f80a 	bl	8000490 <__aeabi_dcmpgt>
 801747c:	2800      	cmp	r0, #0
 801747e:	d046      	beq.n	801750e <_dtoa_r+0x1de>
 8017480:	2300      	movs	r3, #0
 8017482:	3f01      	subs	r7, #1
 8017484:	9314      	str	r3, [sp, #80]	; 0x50
 8017486:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017488:	1b9e      	subs	r6, r3, r6
 801748a:	2300      	movs	r3, #0
 801748c:	930a      	str	r3, [sp, #40]	; 0x28
 801748e:	0033      	movs	r3, r6
 8017490:	3b01      	subs	r3, #1
 8017492:	930b      	str	r3, [sp, #44]	; 0x2c
 8017494:	d504      	bpl.n	80174a0 <_dtoa_r+0x170>
 8017496:	2301      	movs	r3, #1
 8017498:	1b9b      	subs	r3, r3, r6
 801749a:	930a      	str	r3, [sp, #40]	; 0x28
 801749c:	2300      	movs	r3, #0
 801749e:	930b      	str	r3, [sp, #44]	; 0x2c
 80174a0:	2f00      	cmp	r7, #0
 80174a2:	db36      	blt.n	8017512 <_dtoa_r+0x1e2>
 80174a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174a6:	9711      	str	r7, [sp, #68]	; 0x44
 80174a8:	19db      	adds	r3, r3, r7
 80174aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80174ac:	2300      	movs	r3, #0
 80174ae:	9304      	str	r3, [sp, #16]
 80174b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174b2:	2401      	movs	r4, #1
 80174b4:	2b09      	cmp	r3, #9
 80174b6:	d900      	bls.n	80174ba <_dtoa_r+0x18a>
 80174b8:	e082      	b.n	80175c0 <_dtoa_r+0x290>
 80174ba:	2b05      	cmp	r3, #5
 80174bc:	dd02      	ble.n	80174c4 <_dtoa_r+0x194>
 80174be:	2400      	movs	r4, #0
 80174c0:	3b04      	subs	r3, #4
 80174c2:	9320      	str	r3, [sp, #128]	; 0x80
 80174c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80174c6:	1e98      	subs	r0, r3, #2
 80174c8:	2803      	cmp	r0, #3
 80174ca:	d900      	bls.n	80174ce <_dtoa_r+0x19e>
 80174cc:	e082      	b.n	80175d4 <_dtoa_r+0x2a4>
 80174ce:	f7e8 fe2b 	bl	8000128 <__gnu_thumb1_case_uqi>
 80174d2:	7573      	.short	0x7573
 80174d4:	6828      	.short	0x6828
 80174d6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80174d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80174da:	189e      	adds	r6, r3, r2
 80174dc:	4b65      	ldr	r3, [pc, #404]	; (8017674 <_dtoa_r+0x344>)
 80174de:	18f2      	adds	r2, r6, r3
 80174e0:	2a20      	cmp	r2, #32
 80174e2:	dd0f      	ble.n	8017504 <_dtoa_r+0x1d4>
 80174e4:	2340      	movs	r3, #64	; 0x40
 80174e6:	1a9b      	subs	r3, r3, r2
 80174e8:	409c      	lsls	r4, r3
 80174ea:	4b63      	ldr	r3, [pc, #396]	; (8017678 <_dtoa_r+0x348>)
 80174ec:	9806      	ldr	r0, [sp, #24]
 80174ee:	18f3      	adds	r3, r6, r3
 80174f0:	40d8      	lsrs	r0, r3
 80174f2:	4320      	orrs	r0, r4
 80174f4:	f7eb fae4 	bl	8002ac0 <__aeabi_ui2d>
 80174f8:	2301      	movs	r3, #1
 80174fa:	4c60      	ldr	r4, [pc, #384]	; (801767c <_dtoa_r+0x34c>)
 80174fc:	3e01      	subs	r6, #1
 80174fe:	1909      	adds	r1, r1, r4
 8017500:	9316      	str	r3, [sp, #88]	; 0x58
 8017502:	e77c      	b.n	80173fe <_dtoa_r+0xce>
 8017504:	2320      	movs	r3, #32
 8017506:	9806      	ldr	r0, [sp, #24]
 8017508:	1a9b      	subs	r3, r3, r2
 801750a:	4098      	lsls	r0, r3
 801750c:	e7f2      	b.n	80174f4 <_dtoa_r+0x1c4>
 801750e:	9014      	str	r0, [sp, #80]	; 0x50
 8017510:	e7b9      	b.n	8017486 <_dtoa_r+0x156>
 8017512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017514:	1bdb      	subs	r3, r3, r7
 8017516:	930a      	str	r3, [sp, #40]	; 0x28
 8017518:	427b      	negs	r3, r7
 801751a:	9304      	str	r3, [sp, #16]
 801751c:	2300      	movs	r3, #0
 801751e:	9311      	str	r3, [sp, #68]	; 0x44
 8017520:	e7c6      	b.n	80174b0 <_dtoa_r+0x180>
 8017522:	2301      	movs	r3, #1
 8017524:	930d      	str	r3, [sp, #52]	; 0x34
 8017526:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017528:	2b00      	cmp	r3, #0
 801752a:	dd57      	ble.n	80175dc <_dtoa_r+0x2ac>
 801752c:	930c      	str	r3, [sp, #48]	; 0x30
 801752e:	9309      	str	r3, [sp, #36]	; 0x24
 8017530:	2200      	movs	r2, #0
 8017532:	9902      	ldr	r1, [sp, #8]
 8017534:	644a      	str	r2, [r1, #68]	; 0x44
 8017536:	3204      	adds	r2, #4
 8017538:	0010      	movs	r0, r2
 801753a:	9902      	ldr	r1, [sp, #8]
 801753c:	3014      	adds	r0, #20
 801753e:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8017540:	4298      	cmp	r0, r3
 8017542:	d950      	bls.n	80175e6 <_dtoa_r+0x2b6>
 8017544:	9802      	ldr	r0, [sp, #8]
 8017546:	f001 f947 	bl	80187d8 <_Balloc>
 801754a:	9b02      	ldr	r3, [sp, #8]
 801754c:	9008      	str	r0, [sp, #32]
 801754e:	6418      	str	r0, [r3, #64]	; 0x40
 8017550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017552:	2b0e      	cmp	r3, #14
 8017554:	d900      	bls.n	8017558 <_dtoa_r+0x228>
 8017556:	e10c      	b.n	8017772 <_dtoa_r+0x442>
 8017558:	2c00      	cmp	r4, #0
 801755a:	d100      	bne.n	801755e <_dtoa_r+0x22e>
 801755c:	e109      	b.n	8017772 <_dtoa_r+0x442>
 801755e:	9b06      	ldr	r3, [sp, #24]
 8017560:	9c07      	ldr	r4, [sp, #28]
 8017562:	9312      	str	r3, [sp, #72]	; 0x48
 8017564:	9413      	str	r4, [sp, #76]	; 0x4c
 8017566:	2f00      	cmp	r7, #0
 8017568:	dc00      	bgt.n	801756c <_dtoa_r+0x23c>
 801756a:	e08b      	b.n	8017684 <_dtoa_r+0x354>
 801756c:	210f      	movs	r1, #15
 801756e:	003a      	movs	r2, r7
 8017570:	4b3f      	ldr	r3, [pc, #252]	; (8017670 <_dtoa_r+0x340>)
 8017572:	400a      	ands	r2, r1
 8017574:	00d2      	lsls	r2, r2, #3
 8017576:	189b      	adds	r3, r3, r2
 8017578:	681d      	ldr	r5, [r3, #0]
 801757a:	685e      	ldr	r6, [r3, #4]
 801757c:	2302      	movs	r3, #2
 801757e:	113c      	asrs	r4, r7, #4
 8017580:	930e      	str	r3, [sp, #56]	; 0x38
 8017582:	06e3      	lsls	r3, r4, #27
 8017584:	d50b      	bpl.n	801759e <_dtoa_r+0x26e>
 8017586:	4b3e      	ldr	r3, [pc, #248]	; (8017680 <_dtoa_r+0x350>)
 8017588:	400c      	ands	r4, r1
 801758a:	6a1a      	ldr	r2, [r3, #32]
 801758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801758e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017590:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017592:	f7ea f845 	bl	8001620 <__aeabi_ddiv>
 8017596:	2303      	movs	r3, #3
 8017598:	9006      	str	r0, [sp, #24]
 801759a:	9107      	str	r1, [sp, #28]
 801759c:	930e      	str	r3, [sp, #56]	; 0x38
 801759e:	2300      	movs	r3, #0
 80175a0:	e03b      	b.n	801761a <_dtoa_r+0x2ea>
 80175a2:	2301      	movs	r3, #1
 80175a4:	930d      	str	r3, [sp, #52]	; 0x34
 80175a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175a8:	18fb      	adds	r3, r7, r3
 80175aa:	930c      	str	r3, [sp, #48]	; 0x30
 80175ac:	3301      	adds	r3, #1
 80175ae:	9309      	str	r3, [sp, #36]	; 0x24
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	dcbd      	bgt.n	8017530 <_dtoa_r+0x200>
 80175b4:	2301      	movs	r3, #1
 80175b6:	e7bb      	b.n	8017530 <_dtoa_r+0x200>
 80175b8:	2300      	movs	r3, #0
 80175ba:	e7b3      	b.n	8017524 <_dtoa_r+0x1f4>
 80175bc:	2300      	movs	r3, #0
 80175be:	e7f1      	b.n	80175a4 <_dtoa_r+0x274>
 80175c0:	2300      	movs	r3, #0
 80175c2:	940d      	str	r4, [sp, #52]	; 0x34
 80175c4:	9320      	str	r3, [sp, #128]	; 0x80
 80175c6:	3b01      	subs	r3, #1
 80175c8:	2200      	movs	r2, #0
 80175ca:	930c      	str	r3, [sp, #48]	; 0x30
 80175cc:	9309      	str	r3, [sp, #36]	; 0x24
 80175ce:	3313      	adds	r3, #19
 80175d0:	9221      	str	r2, [sp, #132]	; 0x84
 80175d2:	e7ad      	b.n	8017530 <_dtoa_r+0x200>
 80175d4:	2301      	movs	r3, #1
 80175d6:	930d      	str	r3, [sp, #52]	; 0x34
 80175d8:	3b02      	subs	r3, #2
 80175da:	e7f5      	b.n	80175c8 <_dtoa_r+0x298>
 80175dc:	2301      	movs	r3, #1
 80175de:	930c      	str	r3, [sp, #48]	; 0x30
 80175e0:	9309      	str	r3, [sp, #36]	; 0x24
 80175e2:	001a      	movs	r2, r3
 80175e4:	e7f4      	b.n	80175d0 <_dtoa_r+0x2a0>
 80175e6:	9802      	ldr	r0, [sp, #8]
 80175e8:	3101      	adds	r1, #1
 80175ea:	6441      	str	r1, [r0, #68]	; 0x44
 80175ec:	0052      	lsls	r2, r2, #1
 80175ee:	e7a3      	b.n	8017538 <_dtoa_r+0x208>
 80175f0:	2301      	movs	r3, #1
 80175f2:	421c      	tst	r4, r3
 80175f4:	d00e      	beq.n	8017614 <_dtoa_r+0x2e4>
 80175f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175f8:	4a21      	ldr	r2, [pc, #132]	; (8017680 <_dtoa_r+0x350>)
 80175fa:	3301      	adds	r3, #1
 80175fc:	930e      	str	r3, [sp, #56]	; 0x38
 80175fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017600:	0028      	movs	r0, r5
 8017602:	00db      	lsls	r3, r3, #3
 8017604:	189b      	adds	r3, r3, r2
 8017606:	0031      	movs	r1, r6
 8017608:	681a      	ldr	r2, [r3, #0]
 801760a:	685b      	ldr	r3, [r3, #4]
 801760c:	f7ea fc12 	bl	8001e34 <__aeabi_dmul>
 8017610:	0005      	movs	r5, r0
 8017612:	000e      	movs	r6, r1
 8017614:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017616:	1064      	asrs	r4, r4, #1
 8017618:	3301      	adds	r3, #1
 801761a:	9310      	str	r3, [sp, #64]	; 0x40
 801761c:	2c00      	cmp	r4, #0
 801761e:	d1e7      	bne.n	80175f0 <_dtoa_r+0x2c0>
 8017620:	9806      	ldr	r0, [sp, #24]
 8017622:	9907      	ldr	r1, [sp, #28]
 8017624:	002a      	movs	r2, r5
 8017626:	0033      	movs	r3, r6
 8017628:	f7e9 fffa 	bl	8001620 <__aeabi_ddiv>
 801762c:	9006      	str	r0, [sp, #24]
 801762e:	9107      	str	r1, [sp, #28]
 8017630:	e043      	b.n	80176ba <_dtoa_r+0x38a>
 8017632:	46c0      	nop			; (mov r8, r8)
 8017634:	7ff00000 	.word	0x7ff00000
 8017638:	0000270f 	.word	0x0000270f
 801763c:	0801c4f6 	.word	0x0801c4f6
 8017640:	0801c4f9 	.word	0x0801c4f9
 8017644:	0801c3ca 	.word	0x0801c3ca
 8017648:	0801c3cb 	.word	0x0801c3cb
 801764c:	3ff00000 	.word	0x3ff00000
 8017650:	fffffc01 	.word	0xfffffc01
 8017654:	3ff80000 	.word	0x3ff80000
 8017658:	636f4361 	.word	0x636f4361
 801765c:	3fd287a7 	.word	0x3fd287a7
 8017660:	8b60c8b3 	.word	0x8b60c8b3
 8017664:	3fc68a28 	.word	0x3fc68a28
 8017668:	509f79fb 	.word	0x509f79fb
 801766c:	3fd34413 	.word	0x3fd34413
 8017670:	0801c528 	.word	0x0801c528
 8017674:	00000432 	.word	0x00000432
 8017678:	00000412 	.word	0x00000412
 801767c:	fe100000 	.word	0xfe100000
 8017680:	0801c500 	.word	0x0801c500
 8017684:	2302      	movs	r3, #2
 8017686:	930e      	str	r3, [sp, #56]	; 0x38
 8017688:	2f00      	cmp	r7, #0
 801768a:	d016      	beq.n	80176ba <_dtoa_r+0x38a>
 801768c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801768e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8017690:	427c      	negs	r4, r7
 8017692:	330d      	adds	r3, #13
 8017694:	4023      	ands	r3, r4
 8017696:	4acf      	ldr	r2, [pc, #828]	; (80179d4 <_dtoa_r+0x6a4>)
 8017698:	00db      	lsls	r3, r3, #3
 801769a:	18d3      	adds	r3, r2, r3
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	f7ea fbc8 	bl	8001e34 <__aeabi_dmul>
 80176a4:	2300      	movs	r3, #0
 80176a6:	2601      	movs	r6, #1
 80176a8:	001d      	movs	r5, r3
 80176aa:	9006      	str	r0, [sp, #24]
 80176ac:	9107      	str	r1, [sp, #28]
 80176ae:	1124      	asrs	r4, r4, #4
 80176b0:	2c00      	cmp	r4, #0
 80176b2:	d000      	beq.n	80176b6 <_dtoa_r+0x386>
 80176b4:	e08c      	b.n	80177d0 <_dtoa_r+0x4a0>
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d1b8      	bne.n	801762c <_dtoa_r+0x2fc>
 80176ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d100      	bne.n	80176c2 <_dtoa_r+0x392>
 80176c0:	e096      	b.n	80177f0 <_dtoa_r+0x4c0>
 80176c2:	9c06      	ldr	r4, [sp, #24]
 80176c4:	9d07      	ldr	r5, [sp, #28]
 80176c6:	2200      	movs	r2, #0
 80176c8:	4bc3      	ldr	r3, [pc, #780]	; (80179d8 <_dtoa_r+0x6a8>)
 80176ca:	0020      	movs	r0, r4
 80176cc:	0029      	movs	r1, r5
 80176ce:	f7e8 fecb 	bl	8000468 <__aeabi_dcmplt>
 80176d2:	2800      	cmp	r0, #0
 80176d4:	d100      	bne.n	80176d8 <_dtoa_r+0x3a8>
 80176d6:	e08b      	b.n	80177f0 <_dtoa_r+0x4c0>
 80176d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d100      	bne.n	80176e0 <_dtoa_r+0x3b0>
 80176de:	e087      	b.n	80177f0 <_dtoa_r+0x4c0>
 80176e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	dd41      	ble.n	801776a <_dtoa_r+0x43a>
 80176e6:	4bbd      	ldr	r3, [pc, #756]	; (80179dc <_dtoa_r+0x6ac>)
 80176e8:	2200      	movs	r2, #0
 80176ea:	0020      	movs	r0, r4
 80176ec:	0029      	movs	r1, r5
 80176ee:	f7ea fba1 	bl	8001e34 <__aeabi_dmul>
 80176f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176f4:	9006      	str	r0, [sp, #24]
 80176f6:	9107      	str	r1, [sp, #28]
 80176f8:	3301      	adds	r3, #1
 80176fa:	930e      	str	r3, [sp, #56]	; 0x38
 80176fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80176fe:	1e7e      	subs	r6, r7, #1
 8017700:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017702:	9310      	str	r3, [sp, #64]	; 0x40
 8017704:	f7eb f9a2 	bl	8002a4c <__aeabi_i2d>
 8017708:	9a06      	ldr	r2, [sp, #24]
 801770a:	9b07      	ldr	r3, [sp, #28]
 801770c:	f7ea fb92 	bl	8001e34 <__aeabi_dmul>
 8017710:	2200      	movs	r2, #0
 8017712:	4bb3      	ldr	r3, [pc, #716]	; (80179e0 <_dtoa_r+0x6b0>)
 8017714:	f7e9 fc68 	bl	8000fe8 <__aeabi_dadd>
 8017718:	4ab2      	ldr	r2, [pc, #712]	; (80179e4 <_dtoa_r+0x6b4>)
 801771a:	900e      	str	r0, [sp, #56]	; 0x38
 801771c:	910f      	str	r1, [sp, #60]	; 0x3c
 801771e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017720:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017722:	4694      	mov	ip, r2
 8017724:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017726:	4463      	add	r3, ip
 8017728:	9315      	str	r3, [sp, #84]	; 0x54
 801772a:	001d      	movs	r5, r3
 801772c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801772e:	2b00      	cmp	r3, #0
 8017730:	d161      	bne.n	80177f6 <_dtoa_r+0x4c6>
 8017732:	9806      	ldr	r0, [sp, #24]
 8017734:	9907      	ldr	r1, [sp, #28]
 8017736:	2200      	movs	r2, #0
 8017738:	4bab      	ldr	r3, [pc, #684]	; (80179e8 <_dtoa_r+0x6b8>)
 801773a:	f7ea fded 	bl	8002318 <__aeabi_dsub>
 801773e:	0022      	movs	r2, r4
 8017740:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017742:	9006      	str	r0, [sp, #24]
 8017744:	9107      	str	r1, [sp, #28]
 8017746:	f7e8 fea3 	bl	8000490 <__aeabi_dcmpgt>
 801774a:	2800      	cmp	r0, #0
 801774c:	d000      	beq.n	8017750 <_dtoa_r+0x420>
 801774e:	e2aa      	b.n	8017ca6 <_dtoa_r+0x976>
 8017750:	48a6      	ldr	r0, [pc, #664]	; (80179ec <_dtoa_r+0x6bc>)
 8017752:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017754:	4684      	mov	ip, r0
 8017756:	4461      	add	r1, ip
 8017758:	000b      	movs	r3, r1
 801775a:	9806      	ldr	r0, [sp, #24]
 801775c:	9907      	ldr	r1, [sp, #28]
 801775e:	0022      	movs	r2, r4
 8017760:	f7e8 fe82 	bl	8000468 <__aeabi_dcmplt>
 8017764:	2800      	cmp	r0, #0
 8017766:	d000      	beq.n	801776a <_dtoa_r+0x43a>
 8017768:	e297      	b.n	8017c9a <_dtoa_r+0x96a>
 801776a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801776c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801776e:	9306      	str	r3, [sp, #24]
 8017770:	9407      	str	r4, [sp, #28]
 8017772:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017774:	2b00      	cmp	r3, #0
 8017776:	da00      	bge.n	801777a <_dtoa_r+0x44a>
 8017778:	e15e      	b.n	8017a38 <_dtoa_r+0x708>
 801777a:	2f0e      	cmp	r7, #14
 801777c:	dd00      	ble.n	8017780 <_dtoa_r+0x450>
 801777e:	e15b      	b.n	8017a38 <_dtoa_r+0x708>
 8017780:	4b94      	ldr	r3, [pc, #592]	; (80179d4 <_dtoa_r+0x6a4>)
 8017782:	00fa      	lsls	r2, r7, #3
 8017784:	189b      	adds	r3, r3, r2
 8017786:	685c      	ldr	r4, [r3, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	9304      	str	r3, [sp, #16]
 801778c:	9405      	str	r4, [sp, #20]
 801778e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017790:	2b00      	cmp	r3, #0
 8017792:	db00      	blt.n	8017796 <_dtoa_r+0x466>
 8017794:	e0da      	b.n	801794c <_dtoa_r+0x61c>
 8017796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017798:	2b00      	cmp	r3, #0
 801779a:	dd00      	ble.n	801779e <_dtoa_r+0x46e>
 801779c:	e0d6      	b.n	801794c <_dtoa_r+0x61c>
 801779e:	d000      	beq.n	80177a2 <_dtoa_r+0x472>
 80177a0:	e27f      	b.n	8017ca2 <_dtoa_r+0x972>
 80177a2:	9804      	ldr	r0, [sp, #16]
 80177a4:	9905      	ldr	r1, [sp, #20]
 80177a6:	2200      	movs	r2, #0
 80177a8:	4b8f      	ldr	r3, [pc, #572]	; (80179e8 <_dtoa_r+0x6b8>)
 80177aa:	f7ea fb43 	bl	8001e34 <__aeabi_dmul>
 80177ae:	9a06      	ldr	r2, [sp, #24]
 80177b0:	9b07      	ldr	r3, [sp, #28]
 80177b2:	f7e8 fe77 	bl	80004a4 <__aeabi_dcmpge>
 80177b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177b8:	9304      	str	r3, [sp, #16]
 80177ba:	001e      	movs	r6, r3
 80177bc:	2800      	cmp	r0, #0
 80177be:	d000      	beq.n	80177c2 <_dtoa_r+0x492>
 80177c0:	e251      	b.n	8017c66 <_dtoa_r+0x936>
 80177c2:	9b08      	ldr	r3, [sp, #32]
 80177c4:	9a08      	ldr	r2, [sp, #32]
 80177c6:	1c5d      	adds	r5, r3, #1
 80177c8:	2331      	movs	r3, #49	; 0x31
 80177ca:	3701      	adds	r7, #1
 80177cc:	7013      	strb	r3, [r2, #0]
 80177ce:	e24d      	b.n	8017c6c <_dtoa_r+0x93c>
 80177d0:	4234      	tst	r4, r6
 80177d2:	d00a      	beq.n	80177ea <_dtoa_r+0x4ba>
 80177d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177d6:	4a86      	ldr	r2, [pc, #536]	; (80179f0 <_dtoa_r+0x6c0>)
 80177d8:	3301      	adds	r3, #1
 80177da:	930e      	str	r3, [sp, #56]	; 0x38
 80177dc:	00eb      	lsls	r3, r5, #3
 80177de:	189b      	adds	r3, r3, r2
 80177e0:	681a      	ldr	r2, [r3, #0]
 80177e2:	685b      	ldr	r3, [r3, #4]
 80177e4:	f7ea fb26 	bl	8001e34 <__aeabi_dmul>
 80177e8:	0033      	movs	r3, r6
 80177ea:	1064      	asrs	r4, r4, #1
 80177ec:	3501      	adds	r5, #1
 80177ee:	e75f      	b.n	80176b0 <_dtoa_r+0x380>
 80177f0:	003e      	movs	r6, r7
 80177f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177f4:	e784      	b.n	8017700 <_dtoa_r+0x3d0>
 80177f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80177f8:	1e5a      	subs	r2, r3, #1
 80177fa:	4b76      	ldr	r3, [pc, #472]	; (80179d4 <_dtoa_r+0x6a4>)
 80177fc:	00d2      	lsls	r2, r2, #3
 80177fe:	189b      	adds	r3, r3, r2
 8017800:	6818      	ldr	r0, [r3, #0]
 8017802:	6859      	ldr	r1, [r3, #4]
 8017804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017806:	2b00      	cmp	r3, #0
 8017808:	d04b      	beq.n	80178a2 <_dtoa_r+0x572>
 801780a:	0002      	movs	r2, r0
 801780c:	000b      	movs	r3, r1
 801780e:	2000      	movs	r0, #0
 8017810:	4978      	ldr	r1, [pc, #480]	; (80179f4 <_dtoa_r+0x6c4>)
 8017812:	f7e9 ff05 	bl	8001620 <__aeabi_ddiv>
 8017816:	002b      	movs	r3, r5
 8017818:	0022      	movs	r2, r4
 801781a:	f7ea fd7d 	bl	8002318 <__aeabi_dsub>
 801781e:	9b08      	ldr	r3, [sp, #32]
 8017820:	900e      	str	r0, [sp, #56]	; 0x38
 8017822:	910f      	str	r1, [sp, #60]	; 0x3c
 8017824:	9315      	str	r3, [sp, #84]	; 0x54
 8017826:	9806      	ldr	r0, [sp, #24]
 8017828:	9907      	ldr	r1, [sp, #28]
 801782a:	f7eb f8d9 	bl	80029e0 <__aeabi_d2iz>
 801782e:	0004      	movs	r4, r0
 8017830:	f7eb f90c 	bl	8002a4c <__aeabi_i2d>
 8017834:	0002      	movs	r2, r0
 8017836:	000b      	movs	r3, r1
 8017838:	9806      	ldr	r0, [sp, #24]
 801783a:	9907      	ldr	r1, [sp, #28]
 801783c:	f7ea fd6c 	bl	8002318 <__aeabi_dsub>
 8017840:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017842:	3430      	adds	r4, #48	; 0x30
 8017844:	1c5d      	adds	r5, r3, #1
 8017846:	701c      	strb	r4, [r3, #0]
 8017848:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801784a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801784c:	9006      	str	r0, [sp, #24]
 801784e:	9107      	str	r1, [sp, #28]
 8017850:	f7e8 fe0a 	bl	8000468 <__aeabi_dcmplt>
 8017854:	2800      	cmp	r0, #0
 8017856:	d16c      	bne.n	8017932 <_dtoa_r+0x602>
 8017858:	9a06      	ldr	r2, [sp, #24]
 801785a:	9b07      	ldr	r3, [sp, #28]
 801785c:	2000      	movs	r0, #0
 801785e:	495e      	ldr	r1, [pc, #376]	; (80179d8 <_dtoa_r+0x6a8>)
 8017860:	f7ea fd5a 	bl	8002318 <__aeabi_dsub>
 8017864:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017868:	f7e8 fdfe 	bl	8000468 <__aeabi_dcmplt>
 801786c:	2800      	cmp	r0, #0
 801786e:	d000      	beq.n	8017872 <_dtoa_r+0x542>
 8017870:	e0c3      	b.n	80179fa <_dtoa_r+0x6ca>
 8017872:	9b08      	ldr	r3, [sp, #32]
 8017874:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017876:	1aeb      	subs	r3, r5, r3
 8017878:	429a      	cmp	r2, r3
 801787a:	dc00      	bgt.n	801787e <_dtoa_r+0x54e>
 801787c:	e775      	b.n	801776a <_dtoa_r+0x43a>
 801787e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017880:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017882:	2200      	movs	r2, #0
 8017884:	4b55      	ldr	r3, [pc, #340]	; (80179dc <_dtoa_r+0x6ac>)
 8017886:	f7ea fad5 	bl	8001e34 <__aeabi_dmul>
 801788a:	2200      	movs	r2, #0
 801788c:	900e      	str	r0, [sp, #56]	; 0x38
 801788e:	910f      	str	r1, [sp, #60]	; 0x3c
 8017890:	9806      	ldr	r0, [sp, #24]
 8017892:	9907      	ldr	r1, [sp, #28]
 8017894:	4b51      	ldr	r3, [pc, #324]	; (80179dc <_dtoa_r+0x6ac>)
 8017896:	f7ea facd 	bl	8001e34 <__aeabi_dmul>
 801789a:	9515      	str	r5, [sp, #84]	; 0x54
 801789c:	9006      	str	r0, [sp, #24]
 801789e:	9107      	str	r1, [sp, #28]
 80178a0:	e7c1      	b.n	8017826 <_dtoa_r+0x4f6>
 80178a2:	0022      	movs	r2, r4
 80178a4:	002b      	movs	r3, r5
 80178a6:	f7ea fac5 	bl	8001e34 <__aeabi_dmul>
 80178aa:	9c08      	ldr	r4, [sp, #32]
 80178ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80178ae:	0023      	movs	r3, r4
 80178b0:	4694      	mov	ip, r2
 80178b2:	900e      	str	r0, [sp, #56]	; 0x38
 80178b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80178b6:	4463      	add	r3, ip
 80178b8:	9315      	str	r3, [sp, #84]	; 0x54
 80178ba:	9806      	ldr	r0, [sp, #24]
 80178bc:	9907      	ldr	r1, [sp, #28]
 80178be:	f7eb f88f 	bl	80029e0 <__aeabi_d2iz>
 80178c2:	0005      	movs	r5, r0
 80178c4:	f7eb f8c2 	bl	8002a4c <__aeabi_i2d>
 80178c8:	000b      	movs	r3, r1
 80178ca:	0002      	movs	r2, r0
 80178cc:	9806      	ldr	r0, [sp, #24]
 80178ce:	9907      	ldr	r1, [sp, #28]
 80178d0:	f7ea fd22 	bl	8002318 <__aeabi_dsub>
 80178d4:	3530      	adds	r5, #48	; 0x30
 80178d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80178d8:	7025      	strb	r5, [r4, #0]
 80178da:	3401      	adds	r4, #1
 80178dc:	9006      	str	r0, [sp, #24]
 80178de:	9107      	str	r1, [sp, #28]
 80178e0:	42a3      	cmp	r3, r4
 80178e2:	d12a      	bne.n	801793a <_dtoa_r+0x60a>
 80178e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80178e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80178e8:	9a08      	ldr	r2, [sp, #32]
 80178ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80178ec:	4694      	mov	ip, r2
 80178ee:	4463      	add	r3, ip
 80178f0:	2200      	movs	r2, #0
 80178f2:	001d      	movs	r5, r3
 80178f4:	4b3f      	ldr	r3, [pc, #252]	; (80179f4 <_dtoa_r+0x6c4>)
 80178f6:	f7e9 fb77 	bl	8000fe8 <__aeabi_dadd>
 80178fa:	0002      	movs	r2, r0
 80178fc:	000b      	movs	r3, r1
 80178fe:	9806      	ldr	r0, [sp, #24]
 8017900:	9907      	ldr	r1, [sp, #28]
 8017902:	f7e8 fdc5 	bl	8000490 <__aeabi_dcmpgt>
 8017906:	2800      	cmp	r0, #0
 8017908:	d000      	beq.n	801790c <_dtoa_r+0x5dc>
 801790a:	e076      	b.n	80179fa <_dtoa_r+0x6ca>
 801790c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801790e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017910:	2000      	movs	r0, #0
 8017912:	4938      	ldr	r1, [pc, #224]	; (80179f4 <_dtoa_r+0x6c4>)
 8017914:	f7ea fd00 	bl	8002318 <__aeabi_dsub>
 8017918:	0002      	movs	r2, r0
 801791a:	000b      	movs	r3, r1
 801791c:	9806      	ldr	r0, [sp, #24]
 801791e:	9907      	ldr	r1, [sp, #28]
 8017920:	f7e8 fda2 	bl	8000468 <__aeabi_dcmplt>
 8017924:	2800      	cmp	r0, #0
 8017926:	d100      	bne.n	801792a <_dtoa_r+0x5fa>
 8017928:	e71f      	b.n	801776a <_dtoa_r+0x43a>
 801792a:	1e6b      	subs	r3, r5, #1
 801792c:	781a      	ldrb	r2, [r3, #0]
 801792e:	2a30      	cmp	r2, #48	; 0x30
 8017930:	d001      	beq.n	8017936 <_dtoa_r+0x606>
 8017932:	0037      	movs	r7, r6
 8017934:	e03f      	b.n	80179b6 <_dtoa_r+0x686>
 8017936:	001d      	movs	r5, r3
 8017938:	e7f7      	b.n	801792a <_dtoa_r+0x5fa>
 801793a:	9806      	ldr	r0, [sp, #24]
 801793c:	9907      	ldr	r1, [sp, #28]
 801793e:	2200      	movs	r2, #0
 8017940:	4b26      	ldr	r3, [pc, #152]	; (80179dc <_dtoa_r+0x6ac>)
 8017942:	f7ea fa77 	bl	8001e34 <__aeabi_dmul>
 8017946:	9006      	str	r0, [sp, #24]
 8017948:	9107      	str	r1, [sp, #28]
 801794a:	e7b6      	b.n	80178ba <_dtoa_r+0x58a>
 801794c:	9e08      	ldr	r6, [sp, #32]
 801794e:	9a04      	ldr	r2, [sp, #16]
 8017950:	9b05      	ldr	r3, [sp, #20]
 8017952:	9806      	ldr	r0, [sp, #24]
 8017954:	9907      	ldr	r1, [sp, #28]
 8017956:	f7e9 fe63 	bl	8001620 <__aeabi_ddiv>
 801795a:	f7eb f841 	bl	80029e0 <__aeabi_d2iz>
 801795e:	0004      	movs	r4, r0
 8017960:	f7eb f874 	bl	8002a4c <__aeabi_i2d>
 8017964:	9a04      	ldr	r2, [sp, #16]
 8017966:	9b05      	ldr	r3, [sp, #20]
 8017968:	f7ea fa64 	bl	8001e34 <__aeabi_dmul>
 801796c:	0002      	movs	r2, r0
 801796e:	000b      	movs	r3, r1
 8017970:	9806      	ldr	r0, [sp, #24]
 8017972:	9907      	ldr	r1, [sp, #28]
 8017974:	f7ea fcd0 	bl	8002318 <__aeabi_dsub>
 8017978:	0023      	movs	r3, r4
 801797a:	3330      	adds	r3, #48	; 0x30
 801797c:	7033      	strb	r3, [r6, #0]
 801797e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017980:	9b08      	ldr	r3, [sp, #32]
 8017982:	1c75      	adds	r5, r6, #1
 8017984:	1aeb      	subs	r3, r5, r3
 8017986:	429a      	cmp	r2, r3
 8017988:	d148      	bne.n	8017a1c <_dtoa_r+0x6ec>
 801798a:	0002      	movs	r2, r0
 801798c:	000b      	movs	r3, r1
 801798e:	f7e9 fb2b 	bl	8000fe8 <__aeabi_dadd>
 8017992:	9a04      	ldr	r2, [sp, #16]
 8017994:	9b05      	ldr	r3, [sp, #20]
 8017996:	9006      	str	r0, [sp, #24]
 8017998:	9107      	str	r1, [sp, #28]
 801799a:	f7e8 fd79 	bl	8000490 <__aeabi_dcmpgt>
 801799e:	2800      	cmp	r0, #0
 80179a0:	d12a      	bne.n	80179f8 <_dtoa_r+0x6c8>
 80179a2:	9a04      	ldr	r2, [sp, #16]
 80179a4:	9b05      	ldr	r3, [sp, #20]
 80179a6:	9806      	ldr	r0, [sp, #24]
 80179a8:	9907      	ldr	r1, [sp, #28]
 80179aa:	f7e8 fd57 	bl	800045c <__aeabi_dcmpeq>
 80179ae:	2800      	cmp	r0, #0
 80179b0:	d001      	beq.n	80179b6 <_dtoa_r+0x686>
 80179b2:	07e3      	lsls	r3, r4, #31
 80179b4:	d420      	bmi.n	80179f8 <_dtoa_r+0x6c8>
 80179b6:	9903      	ldr	r1, [sp, #12]
 80179b8:	9802      	ldr	r0, [sp, #8]
 80179ba:	f000 ff35 	bl	8018828 <_Bfree>
 80179be:	2300      	movs	r3, #0
 80179c0:	702b      	strb	r3, [r5, #0]
 80179c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80179c4:	3701      	adds	r7, #1
 80179c6:	601f      	str	r7, [r3, #0]
 80179c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d100      	bne.n	80179d0 <_dtoa_r+0x6a0>
 80179ce:	e4e4      	b.n	801739a <_dtoa_r+0x6a>
 80179d0:	601d      	str	r5, [r3, #0]
 80179d2:	e4e2      	b.n	801739a <_dtoa_r+0x6a>
 80179d4:	0801c528 	.word	0x0801c528
 80179d8:	3ff00000 	.word	0x3ff00000
 80179dc:	40240000 	.word	0x40240000
 80179e0:	401c0000 	.word	0x401c0000
 80179e4:	fcc00000 	.word	0xfcc00000
 80179e8:	40140000 	.word	0x40140000
 80179ec:	7cc00000 	.word	0x7cc00000
 80179f0:	0801c500 	.word	0x0801c500
 80179f4:	3fe00000 	.word	0x3fe00000
 80179f8:	003e      	movs	r6, r7
 80179fa:	1e6b      	subs	r3, r5, #1
 80179fc:	781a      	ldrb	r2, [r3, #0]
 80179fe:	2a39      	cmp	r2, #57	; 0x39
 8017a00:	d106      	bne.n	8017a10 <_dtoa_r+0x6e0>
 8017a02:	9a08      	ldr	r2, [sp, #32]
 8017a04:	429a      	cmp	r2, r3
 8017a06:	d107      	bne.n	8017a18 <_dtoa_r+0x6e8>
 8017a08:	2330      	movs	r3, #48	; 0x30
 8017a0a:	7013      	strb	r3, [r2, #0]
 8017a0c:	0013      	movs	r3, r2
 8017a0e:	3601      	adds	r6, #1
 8017a10:	781a      	ldrb	r2, [r3, #0]
 8017a12:	3201      	adds	r2, #1
 8017a14:	701a      	strb	r2, [r3, #0]
 8017a16:	e78c      	b.n	8017932 <_dtoa_r+0x602>
 8017a18:	001d      	movs	r5, r3
 8017a1a:	e7ee      	b.n	80179fa <_dtoa_r+0x6ca>
 8017a1c:	2200      	movs	r2, #0
 8017a1e:	4ba4      	ldr	r3, [pc, #656]	; (8017cb0 <_dtoa_r+0x980>)
 8017a20:	f7ea fa08 	bl	8001e34 <__aeabi_dmul>
 8017a24:	2200      	movs	r2, #0
 8017a26:	2300      	movs	r3, #0
 8017a28:	9006      	str	r0, [sp, #24]
 8017a2a:	9107      	str	r1, [sp, #28]
 8017a2c:	002e      	movs	r6, r5
 8017a2e:	f7e8 fd15 	bl	800045c <__aeabi_dcmpeq>
 8017a32:	2800      	cmp	r0, #0
 8017a34:	d08b      	beq.n	801794e <_dtoa_r+0x61e>
 8017a36:	e7be      	b.n	80179b6 <_dtoa_r+0x686>
 8017a38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a3a:	2a00      	cmp	r2, #0
 8017a3c:	d100      	bne.n	8017a40 <_dtoa_r+0x710>
 8017a3e:	e0da      	b.n	8017bf6 <_dtoa_r+0x8c6>
 8017a40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017a42:	2a01      	cmp	r2, #1
 8017a44:	dd00      	ble.n	8017a48 <_dtoa_r+0x718>
 8017a46:	e0bd      	b.n	8017bc4 <_dtoa_r+0x894>
 8017a48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017a4a:	2a00      	cmp	r2, #0
 8017a4c:	d100      	bne.n	8017a50 <_dtoa_r+0x720>
 8017a4e:	e0b5      	b.n	8017bbc <_dtoa_r+0x88c>
 8017a50:	4a98      	ldr	r2, [pc, #608]	; (8017cb4 <_dtoa_r+0x984>)
 8017a52:	189b      	adds	r3, r3, r2
 8017a54:	9d04      	ldr	r5, [sp, #16]
 8017a56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017a58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a5a:	2101      	movs	r1, #1
 8017a5c:	18d2      	adds	r2, r2, r3
 8017a5e:	920a      	str	r2, [sp, #40]	; 0x28
 8017a60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a62:	9802      	ldr	r0, [sp, #8]
 8017a64:	18d3      	adds	r3, r2, r3
 8017a66:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a68:	f000 ffad 	bl	80189c6 <__i2b>
 8017a6c:	0006      	movs	r6, r0
 8017a6e:	2c00      	cmp	r4, #0
 8017a70:	dd0e      	ble.n	8017a90 <_dtoa_r+0x760>
 8017a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	dd0b      	ble.n	8017a90 <_dtoa_r+0x760>
 8017a78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a7a:	0023      	movs	r3, r4
 8017a7c:	4294      	cmp	r4, r2
 8017a7e:	dd00      	ble.n	8017a82 <_dtoa_r+0x752>
 8017a80:	0013      	movs	r3, r2
 8017a82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017a84:	1ae4      	subs	r4, r4, r3
 8017a86:	1ad2      	subs	r2, r2, r3
 8017a88:	920a      	str	r2, [sp, #40]	; 0x28
 8017a8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017a8c:	1ad3      	subs	r3, r2, r3
 8017a8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017a90:	9b04      	ldr	r3, [sp, #16]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d01f      	beq.n	8017ad6 <_dtoa_r+0x7a6>
 8017a96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	d100      	bne.n	8017a9e <_dtoa_r+0x76e>
 8017a9c:	e0af      	b.n	8017bfe <_dtoa_r+0x8ce>
 8017a9e:	2d00      	cmp	r5, #0
 8017aa0:	d011      	beq.n	8017ac6 <_dtoa_r+0x796>
 8017aa2:	0031      	movs	r1, r6
 8017aa4:	002a      	movs	r2, r5
 8017aa6:	9802      	ldr	r0, [sp, #8]
 8017aa8:	f001 f826 	bl	8018af8 <__pow5mult>
 8017aac:	9a03      	ldr	r2, [sp, #12]
 8017aae:	0001      	movs	r1, r0
 8017ab0:	0006      	movs	r6, r0
 8017ab2:	9802      	ldr	r0, [sp, #8]
 8017ab4:	f000 ff90 	bl	80189d8 <__multiply>
 8017ab8:	9903      	ldr	r1, [sp, #12]
 8017aba:	9010      	str	r0, [sp, #64]	; 0x40
 8017abc:	9802      	ldr	r0, [sp, #8]
 8017abe:	f000 feb3 	bl	8018828 <_Bfree>
 8017ac2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ac4:	9303      	str	r3, [sp, #12]
 8017ac6:	9b04      	ldr	r3, [sp, #16]
 8017ac8:	1b5a      	subs	r2, r3, r5
 8017aca:	d004      	beq.n	8017ad6 <_dtoa_r+0x7a6>
 8017acc:	9903      	ldr	r1, [sp, #12]
 8017ace:	9802      	ldr	r0, [sp, #8]
 8017ad0:	f001 f812 	bl	8018af8 <__pow5mult>
 8017ad4:	9003      	str	r0, [sp, #12]
 8017ad6:	2101      	movs	r1, #1
 8017ad8:	9802      	ldr	r0, [sp, #8]
 8017ada:	f000 ff74 	bl	80189c6 <__i2b>
 8017ade:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ae0:	9004      	str	r0, [sp, #16]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d100      	bne.n	8017ae8 <_dtoa_r+0x7b8>
 8017ae6:	e1e3      	b.n	8017eb0 <_dtoa_r+0xb80>
 8017ae8:	001a      	movs	r2, r3
 8017aea:	0001      	movs	r1, r0
 8017aec:	9802      	ldr	r0, [sp, #8]
 8017aee:	f001 f803 	bl	8018af8 <__pow5mult>
 8017af2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017af4:	9004      	str	r0, [sp, #16]
 8017af6:	2b01      	cmp	r3, #1
 8017af8:	dd00      	ble.n	8017afc <_dtoa_r+0x7cc>
 8017afa:	e082      	b.n	8017c02 <_dtoa_r+0x8d2>
 8017afc:	2500      	movs	r5, #0
 8017afe:	9b06      	ldr	r3, [sp, #24]
 8017b00:	42ab      	cmp	r3, r5
 8017b02:	d10e      	bne.n	8017b22 <_dtoa_r+0x7f2>
 8017b04:	9b07      	ldr	r3, [sp, #28]
 8017b06:	031b      	lsls	r3, r3, #12
 8017b08:	42ab      	cmp	r3, r5
 8017b0a:	d10a      	bne.n	8017b22 <_dtoa_r+0x7f2>
 8017b0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017b0e:	9a07      	ldr	r2, [sp, #28]
 8017b10:	4213      	tst	r3, r2
 8017b12:	d006      	beq.n	8017b22 <_dtoa_r+0x7f2>
 8017b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b16:	3501      	adds	r5, #1
 8017b18:	3301      	adds	r3, #1
 8017b1a:	930a      	str	r3, [sp, #40]	; 0x28
 8017b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b1e:	3301      	adds	r3, #1
 8017b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017b24:	2001      	movs	r0, #1
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d16c      	bne.n	8017c04 <_dtoa_r+0x8d4>
 8017b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b2c:	1818      	adds	r0, r3, r0
 8017b2e:	231f      	movs	r3, #31
 8017b30:	4018      	ands	r0, r3
 8017b32:	d07e      	beq.n	8017c32 <_dtoa_r+0x902>
 8017b34:	3301      	adds	r3, #1
 8017b36:	1a1b      	subs	r3, r3, r0
 8017b38:	2b04      	cmp	r3, #4
 8017b3a:	dd70      	ble.n	8017c1e <_dtoa_r+0x8ee>
 8017b3c:	231c      	movs	r3, #28
 8017b3e:	1a18      	subs	r0, r3, r0
 8017b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b42:	1824      	adds	r4, r4, r0
 8017b44:	181b      	adds	r3, r3, r0
 8017b46:	930a      	str	r3, [sp, #40]	; 0x28
 8017b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b4a:	181b      	adds	r3, r3, r0
 8017b4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	dd05      	ble.n	8017b60 <_dtoa_r+0x830>
 8017b54:	001a      	movs	r2, r3
 8017b56:	9903      	ldr	r1, [sp, #12]
 8017b58:	9802      	ldr	r0, [sp, #8]
 8017b5a:	f001 f80f 	bl	8018b7c <__lshift>
 8017b5e:	9003      	str	r0, [sp, #12]
 8017b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	dd05      	ble.n	8017b72 <_dtoa_r+0x842>
 8017b66:	001a      	movs	r2, r3
 8017b68:	9904      	ldr	r1, [sp, #16]
 8017b6a:	9802      	ldr	r0, [sp, #8]
 8017b6c:	f001 f806 	bl	8018b7c <__lshift>
 8017b70:	9004      	str	r0, [sp, #16]
 8017b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d05e      	beq.n	8017c36 <_dtoa_r+0x906>
 8017b78:	9904      	ldr	r1, [sp, #16]
 8017b7a:	9803      	ldr	r0, [sp, #12]
 8017b7c:	f001 f850 	bl	8018c20 <__mcmp>
 8017b80:	2800      	cmp	r0, #0
 8017b82:	da58      	bge.n	8017c36 <_dtoa_r+0x906>
 8017b84:	2300      	movs	r3, #0
 8017b86:	220a      	movs	r2, #10
 8017b88:	9903      	ldr	r1, [sp, #12]
 8017b8a:	9802      	ldr	r0, [sp, #8]
 8017b8c:	f000 fe56 	bl	801883c <__multadd>
 8017b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b92:	3f01      	subs	r7, #1
 8017b94:	9003      	str	r0, [sp, #12]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d100      	bne.n	8017b9c <_dtoa_r+0x86c>
 8017b9a:	e190      	b.n	8017ebe <_dtoa_r+0xb8e>
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	0031      	movs	r1, r6
 8017ba0:	220a      	movs	r2, #10
 8017ba2:	9802      	ldr	r0, [sp, #8]
 8017ba4:	f000 fe4a 	bl	801883c <__multadd>
 8017ba8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017baa:	0006      	movs	r6, r0
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	dd00      	ble.n	8017bb2 <_dtoa_r+0x882>
 8017bb0:	e088      	b.n	8017cc4 <_dtoa_r+0x994>
 8017bb2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017bb4:	2b02      	cmp	r3, #2
 8017bb6:	dc00      	bgt.n	8017bba <_dtoa_r+0x88a>
 8017bb8:	e084      	b.n	8017cc4 <_dtoa_r+0x994>
 8017bba:	e044      	b.n	8017c46 <_dtoa_r+0x916>
 8017bbc:	2336      	movs	r3, #54	; 0x36
 8017bbe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8017bc0:	1a9b      	subs	r3, r3, r2
 8017bc2:	e747      	b.n	8017a54 <_dtoa_r+0x724>
 8017bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bc6:	1e5d      	subs	r5, r3, #1
 8017bc8:	9b04      	ldr	r3, [sp, #16]
 8017bca:	42ab      	cmp	r3, r5
 8017bcc:	db08      	blt.n	8017be0 <_dtoa_r+0x8b0>
 8017bce:	1b5d      	subs	r5, r3, r5
 8017bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	da0c      	bge.n	8017bf0 <_dtoa_r+0x8c0>
 8017bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017bda:	1a9c      	subs	r4, r3, r2
 8017bdc:	2300      	movs	r3, #0
 8017bde:	e73b      	b.n	8017a58 <_dtoa_r+0x728>
 8017be0:	9b04      	ldr	r3, [sp, #16]
 8017be2:	9504      	str	r5, [sp, #16]
 8017be4:	1aea      	subs	r2, r5, r3
 8017be6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017be8:	2500      	movs	r5, #0
 8017bea:	189b      	adds	r3, r3, r2
 8017bec:	9311      	str	r3, [sp, #68]	; 0x44
 8017bee:	e7ef      	b.n	8017bd0 <_dtoa_r+0x8a0>
 8017bf0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017bf4:	e730      	b.n	8017a58 <_dtoa_r+0x728>
 8017bf6:	9d04      	ldr	r5, [sp, #16]
 8017bf8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017bfa:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8017bfc:	e737      	b.n	8017a6e <_dtoa_r+0x73e>
 8017bfe:	9a04      	ldr	r2, [sp, #16]
 8017c00:	e764      	b.n	8017acc <_dtoa_r+0x79c>
 8017c02:	2500      	movs	r5, #0
 8017c04:	9b04      	ldr	r3, [sp, #16]
 8017c06:	9a04      	ldr	r2, [sp, #16]
 8017c08:	691b      	ldr	r3, [r3, #16]
 8017c0a:	9310      	str	r3, [sp, #64]	; 0x40
 8017c0c:	3303      	adds	r3, #3
 8017c0e:	009b      	lsls	r3, r3, #2
 8017c10:	18d3      	adds	r3, r2, r3
 8017c12:	6858      	ldr	r0, [r3, #4]
 8017c14:	f000 fe8e 	bl	8018934 <__hi0bits>
 8017c18:	2320      	movs	r3, #32
 8017c1a:	1a18      	subs	r0, r3, r0
 8017c1c:	e785      	b.n	8017b2a <_dtoa_r+0x7fa>
 8017c1e:	2b04      	cmp	r3, #4
 8017c20:	d095      	beq.n	8017b4e <_dtoa_r+0x81e>
 8017c22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c24:	331c      	adds	r3, #28
 8017c26:	18d2      	adds	r2, r2, r3
 8017c28:	920a      	str	r2, [sp, #40]	; 0x28
 8017c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017c2c:	18e4      	adds	r4, r4, r3
 8017c2e:	18d3      	adds	r3, r2, r3
 8017c30:	e78c      	b.n	8017b4c <_dtoa_r+0x81c>
 8017c32:	0003      	movs	r3, r0
 8017c34:	e7f5      	b.n	8017c22 <_dtoa_r+0x8f2>
 8017c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	dc3d      	bgt.n	8017cb8 <_dtoa_r+0x988>
 8017c3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017c3e:	2b02      	cmp	r3, #2
 8017c40:	dd3a      	ble.n	8017cb8 <_dtoa_r+0x988>
 8017c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c44:	930c      	str	r3, [sp, #48]	; 0x30
 8017c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d10c      	bne.n	8017c66 <_dtoa_r+0x936>
 8017c4c:	9904      	ldr	r1, [sp, #16]
 8017c4e:	2205      	movs	r2, #5
 8017c50:	9802      	ldr	r0, [sp, #8]
 8017c52:	f000 fdf3 	bl	801883c <__multadd>
 8017c56:	9004      	str	r0, [sp, #16]
 8017c58:	0001      	movs	r1, r0
 8017c5a:	9803      	ldr	r0, [sp, #12]
 8017c5c:	f000 ffe0 	bl	8018c20 <__mcmp>
 8017c60:	2800      	cmp	r0, #0
 8017c62:	dd00      	ble.n	8017c66 <_dtoa_r+0x936>
 8017c64:	e5ad      	b.n	80177c2 <_dtoa_r+0x492>
 8017c66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c68:	9d08      	ldr	r5, [sp, #32]
 8017c6a:	43df      	mvns	r7, r3
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8017c70:	9904      	ldr	r1, [sp, #16]
 8017c72:	9802      	ldr	r0, [sp, #8]
 8017c74:	f000 fdd8 	bl	8018828 <_Bfree>
 8017c78:	2e00      	cmp	r6, #0
 8017c7a:	d100      	bne.n	8017c7e <_dtoa_r+0x94e>
 8017c7c:	e69b      	b.n	80179b6 <_dtoa_r+0x686>
 8017c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d005      	beq.n	8017c90 <_dtoa_r+0x960>
 8017c84:	42b3      	cmp	r3, r6
 8017c86:	d003      	beq.n	8017c90 <_dtoa_r+0x960>
 8017c88:	0019      	movs	r1, r3
 8017c8a:	9802      	ldr	r0, [sp, #8]
 8017c8c:	f000 fdcc 	bl	8018828 <_Bfree>
 8017c90:	0031      	movs	r1, r6
 8017c92:	9802      	ldr	r0, [sp, #8]
 8017c94:	f000 fdc8 	bl	8018828 <_Bfree>
 8017c98:	e68d      	b.n	80179b6 <_dtoa_r+0x686>
 8017c9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017c9c:	9304      	str	r3, [sp, #16]
 8017c9e:	001e      	movs	r6, r3
 8017ca0:	e7e1      	b.n	8017c66 <_dtoa_r+0x936>
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	e7fa      	b.n	8017c9c <_dtoa_r+0x96c>
 8017ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017ca8:	0037      	movs	r7, r6
 8017caa:	9304      	str	r3, [sp, #16]
 8017cac:	001e      	movs	r6, r3
 8017cae:	e588      	b.n	80177c2 <_dtoa_r+0x492>
 8017cb0:	40240000 	.word	0x40240000
 8017cb4:	00000433 	.word	0x00000433
 8017cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d100      	bne.n	8017cc0 <_dtoa_r+0x990>
 8017cbe:	e0b2      	b.n	8017e26 <_dtoa_r+0xaf6>
 8017cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8017cc4:	2c00      	cmp	r4, #0
 8017cc6:	dd05      	ble.n	8017cd4 <_dtoa_r+0x9a4>
 8017cc8:	0031      	movs	r1, r6
 8017cca:	0022      	movs	r2, r4
 8017ccc:	9802      	ldr	r0, [sp, #8]
 8017cce:	f000 ff55 	bl	8018b7c <__lshift>
 8017cd2:	0006      	movs	r6, r0
 8017cd4:	0030      	movs	r0, r6
 8017cd6:	2d00      	cmp	r5, #0
 8017cd8:	d011      	beq.n	8017cfe <_dtoa_r+0x9ce>
 8017cda:	6871      	ldr	r1, [r6, #4]
 8017cdc:	9802      	ldr	r0, [sp, #8]
 8017cde:	f000 fd7b 	bl	80187d8 <_Balloc>
 8017ce2:	0031      	movs	r1, r6
 8017ce4:	0004      	movs	r4, r0
 8017ce6:	6933      	ldr	r3, [r6, #16]
 8017ce8:	310c      	adds	r1, #12
 8017cea:	1c9a      	adds	r2, r3, #2
 8017cec:	0092      	lsls	r2, r2, #2
 8017cee:	300c      	adds	r0, #12
 8017cf0:	f7fc fe59 	bl	80149a6 <memcpy>
 8017cf4:	2201      	movs	r2, #1
 8017cf6:	0021      	movs	r1, r4
 8017cf8:	9802      	ldr	r0, [sp, #8]
 8017cfa:	f000 ff3f 	bl	8018b7c <__lshift>
 8017cfe:	9609      	str	r6, [sp, #36]	; 0x24
 8017d00:	0006      	movs	r6, r0
 8017d02:	9b08      	ldr	r3, [sp, #32]
 8017d04:	930a      	str	r3, [sp, #40]	; 0x28
 8017d06:	9904      	ldr	r1, [sp, #16]
 8017d08:	9803      	ldr	r0, [sp, #12]
 8017d0a:	f7ff fa8b 	bl	8017224 <quorem>
 8017d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d10:	900d      	str	r0, [sp, #52]	; 0x34
 8017d12:	0004      	movs	r4, r0
 8017d14:	9803      	ldr	r0, [sp, #12]
 8017d16:	f000 ff83 	bl	8018c20 <__mcmp>
 8017d1a:	0032      	movs	r2, r6
 8017d1c:	9010      	str	r0, [sp, #64]	; 0x40
 8017d1e:	9904      	ldr	r1, [sp, #16]
 8017d20:	9802      	ldr	r0, [sp, #8]
 8017d22:	f000 ff97 	bl	8018c54 <__mdiff>
 8017d26:	2301      	movs	r3, #1
 8017d28:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d2a:	68c3      	ldr	r3, [r0, #12]
 8017d2c:	3430      	adds	r4, #48	; 0x30
 8017d2e:	0005      	movs	r5, r0
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d104      	bne.n	8017d3e <_dtoa_r+0xa0e>
 8017d34:	0001      	movs	r1, r0
 8017d36:	9803      	ldr	r0, [sp, #12]
 8017d38:	f000 ff72 	bl	8018c20 <__mcmp>
 8017d3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8017d3e:	0029      	movs	r1, r5
 8017d40:	9802      	ldr	r0, [sp, #8]
 8017d42:	f000 fd71 	bl	8018828 <_Bfree>
 8017d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8017d4a:	4313      	orrs	r3, r2
 8017d4c:	d10e      	bne.n	8017d6c <_dtoa_r+0xa3c>
 8017d4e:	9a06      	ldr	r2, [sp, #24]
 8017d50:	3301      	adds	r3, #1
 8017d52:	4213      	tst	r3, r2
 8017d54:	d10a      	bne.n	8017d6c <_dtoa_r+0xa3c>
 8017d56:	2c39      	cmp	r4, #57	; 0x39
 8017d58:	d026      	beq.n	8017da8 <_dtoa_r+0xa78>
 8017d5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	dd01      	ble.n	8017d64 <_dtoa_r+0xa34>
 8017d60:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8017d62:	3431      	adds	r4, #49	; 0x31
 8017d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d66:	1c5d      	adds	r5, r3, #1
 8017d68:	701c      	strb	r4, [r3, #0]
 8017d6a:	e781      	b.n	8017c70 <_dtoa_r+0x940>
 8017d6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	db07      	blt.n	8017d82 <_dtoa_r+0xa52>
 8017d72:	001d      	movs	r5, r3
 8017d74:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017d76:	431d      	orrs	r5, r3
 8017d78:	d122      	bne.n	8017dc0 <_dtoa_r+0xa90>
 8017d7a:	2301      	movs	r3, #1
 8017d7c:	9a06      	ldr	r2, [sp, #24]
 8017d7e:	4213      	tst	r3, r2
 8017d80:	d11e      	bne.n	8017dc0 <_dtoa_r+0xa90>
 8017d82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	dded      	ble.n	8017d64 <_dtoa_r+0xa34>
 8017d88:	9903      	ldr	r1, [sp, #12]
 8017d8a:	2201      	movs	r2, #1
 8017d8c:	9802      	ldr	r0, [sp, #8]
 8017d8e:	f000 fef5 	bl	8018b7c <__lshift>
 8017d92:	9904      	ldr	r1, [sp, #16]
 8017d94:	9003      	str	r0, [sp, #12]
 8017d96:	f000 ff43 	bl	8018c20 <__mcmp>
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	dc02      	bgt.n	8017da4 <_dtoa_r+0xa74>
 8017d9e:	d1e1      	bne.n	8017d64 <_dtoa_r+0xa34>
 8017da0:	07e3      	lsls	r3, r4, #31
 8017da2:	d5df      	bpl.n	8017d64 <_dtoa_r+0xa34>
 8017da4:	2c39      	cmp	r4, #57	; 0x39
 8017da6:	d1db      	bne.n	8017d60 <_dtoa_r+0xa30>
 8017da8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017daa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017dac:	1c5d      	adds	r5, r3, #1
 8017dae:	2339      	movs	r3, #57	; 0x39
 8017db0:	7013      	strb	r3, [r2, #0]
 8017db2:	1e6b      	subs	r3, r5, #1
 8017db4:	781a      	ldrb	r2, [r3, #0]
 8017db6:	2a39      	cmp	r2, #57	; 0x39
 8017db8:	d067      	beq.n	8017e8a <_dtoa_r+0xb5a>
 8017dba:	3201      	adds	r2, #1
 8017dbc:	701a      	strb	r2, [r3, #0]
 8017dbe:	e757      	b.n	8017c70 <_dtoa_r+0x940>
 8017dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dc2:	1c5d      	adds	r5, r3, #1
 8017dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	dd04      	ble.n	8017dd4 <_dtoa_r+0xaa4>
 8017dca:	2c39      	cmp	r4, #57	; 0x39
 8017dcc:	d0ec      	beq.n	8017da8 <_dtoa_r+0xa78>
 8017dce:	3401      	adds	r4, #1
 8017dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dd2:	e7c9      	b.n	8017d68 <_dtoa_r+0xa38>
 8017dd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017dd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017dd8:	701c      	strb	r4, [r3, #0]
 8017dda:	9b08      	ldr	r3, [sp, #32]
 8017ddc:	1aeb      	subs	r3, r5, r3
 8017dde:	4293      	cmp	r3, r2
 8017de0:	d03e      	beq.n	8017e60 <_dtoa_r+0xb30>
 8017de2:	2300      	movs	r3, #0
 8017de4:	220a      	movs	r2, #10
 8017de6:	9903      	ldr	r1, [sp, #12]
 8017de8:	9802      	ldr	r0, [sp, #8]
 8017dea:	f000 fd27 	bl	801883c <__multadd>
 8017dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017df0:	9003      	str	r0, [sp, #12]
 8017df2:	42b3      	cmp	r3, r6
 8017df4:	d109      	bne.n	8017e0a <_dtoa_r+0xada>
 8017df6:	2300      	movs	r3, #0
 8017df8:	220a      	movs	r2, #10
 8017dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017dfc:	9802      	ldr	r0, [sp, #8]
 8017dfe:	f000 fd1d 	bl	801883c <__multadd>
 8017e02:	9009      	str	r0, [sp, #36]	; 0x24
 8017e04:	0006      	movs	r6, r0
 8017e06:	950a      	str	r5, [sp, #40]	; 0x28
 8017e08:	e77d      	b.n	8017d06 <_dtoa_r+0x9d6>
 8017e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017e0c:	2300      	movs	r3, #0
 8017e0e:	220a      	movs	r2, #10
 8017e10:	9802      	ldr	r0, [sp, #8]
 8017e12:	f000 fd13 	bl	801883c <__multadd>
 8017e16:	2300      	movs	r3, #0
 8017e18:	9009      	str	r0, [sp, #36]	; 0x24
 8017e1a:	220a      	movs	r2, #10
 8017e1c:	0031      	movs	r1, r6
 8017e1e:	9802      	ldr	r0, [sp, #8]
 8017e20:	f000 fd0c 	bl	801883c <__multadd>
 8017e24:	e7ee      	b.n	8017e04 <_dtoa_r+0xad4>
 8017e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e28:	930c      	str	r3, [sp, #48]	; 0x30
 8017e2a:	9b08      	ldr	r3, [sp, #32]
 8017e2c:	9306      	str	r3, [sp, #24]
 8017e2e:	9904      	ldr	r1, [sp, #16]
 8017e30:	9803      	ldr	r0, [sp, #12]
 8017e32:	f7ff f9f7 	bl	8017224 <quorem>
 8017e36:	9b06      	ldr	r3, [sp, #24]
 8017e38:	3030      	adds	r0, #48	; 0x30
 8017e3a:	1c5d      	adds	r5, r3, #1
 8017e3c:	7018      	strb	r0, [r3, #0]
 8017e3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017e40:	9b08      	ldr	r3, [sp, #32]
 8017e42:	0004      	movs	r4, r0
 8017e44:	1aeb      	subs	r3, r5, r3
 8017e46:	429a      	cmp	r2, r3
 8017e48:	dd08      	ble.n	8017e5c <_dtoa_r+0xb2c>
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	220a      	movs	r2, #10
 8017e4e:	9903      	ldr	r1, [sp, #12]
 8017e50:	9802      	ldr	r0, [sp, #8]
 8017e52:	f000 fcf3 	bl	801883c <__multadd>
 8017e56:	9506      	str	r5, [sp, #24]
 8017e58:	9003      	str	r0, [sp, #12]
 8017e5a:	e7e8      	b.n	8017e2e <_dtoa_r+0xafe>
 8017e5c:	2300      	movs	r3, #0
 8017e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8017e60:	9903      	ldr	r1, [sp, #12]
 8017e62:	2201      	movs	r2, #1
 8017e64:	9802      	ldr	r0, [sp, #8]
 8017e66:	f000 fe89 	bl	8018b7c <__lshift>
 8017e6a:	9904      	ldr	r1, [sp, #16]
 8017e6c:	9003      	str	r0, [sp, #12]
 8017e6e:	f000 fed7 	bl	8018c20 <__mcmp>
 8017e72:	2800      	cmp	r0, #0
 8017e74:	dc9d      	bgt.n	8017db2 <_dtoa_r+0xa82>
 8017e76:	d101      	bne.n	8017e7c <_dtoa_r+0xb4c>
 8017e78:	07e3      	lsls	r3, r4, #31
 8017e7a:	d49a      	bmi.n	8017db2 <_dtoa_r+0xa82>
 8017e7c:	1e6b      	subs	r3, r5, #1
 8017e7e:	781a      	ldrb	r2, [r3, #0]
 8017e80:	2a30      	cmp	r2, #48	; 0x30
 8017e82:	d000      	beq.n	8017e86 <_dtoa_r+0xb56>
 8017e84:	e6f4      	b.n	8017c70 <_dtoa_r+0x940>
 8017e86:	001d      	movs	r5, r3
 8017e88:	e7f8      	b.n	8017e7c <_dtoa_r+0xb4c>
 8017e8a:	9a08      	ldr	r2, [sp, #32]
 8017e8c:	429a      	cmp	r2, r3
 8017e8e:	d103      	bne.n	8017e98 <_dtoa_r+0xb68>
 8017e90:	2331      	movs	r3, #49	; 0x31
 8017e92:	3701      	adds	r7, #1
 8017e94:	7013      	strb	r3, [r2, #0]
 8017e96:	e6eb      	b.n	8017c70 <_dtoa_r+0x940>
 8017e98:	001d      	movs	r5, r3
 8017e9a:	e78a      	b.n	8017db2 <_dtoa_r+0xa82>
 8017e9c:	4b0b      	ldr	r3, [pc, #44]	; (8017ecc <_dtoa_r+0xb9c>)
 8017e9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8017ea0:	9308      	str	r3, [sp, #32]
 8017ea2:	4b0b      	ldr	r3, [pc, #44]	; (8017ed0 <_dtoa_r+0xba0>)
 8017ea4:	2a00      	cmp	r2, #0
 8017ea6:	d001      	beq.n	8017eac <_dtoa_r+0xb7c>
 8017ea8:	f7ff fa75 	bl	8017396 <_dtoa_r+0x66>
 8017eac:	f7ff fa75 	bl	801739a <_dtoa_r+0x6a>
 8017eb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017eb2:	2b01      	cmp	r3, #1
 8017eb4:	dc00      	bgt.n	8017eb8 <_dtoa_r+0xb88>
 8017eb6:	e621      	b.n	8017afc <_dtoa_r+0x7cc>
 8017eb8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017eba:	2001      	movs	r0, #1
 8017ebc:	e635      	b.n	8017b2a <_dtoa_r+0x7fa>
 8017ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	dcb2      	bgt.n	8017e2a <_dtoa_r+0xafa>
 8017ec4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8017ec6:	2b02      	cmp	r3, #2
 8017ec8:	ddaf      	ble.n	8017e2a <_dtoa_r+0xafa>
 8017eca:	e6bc      	b.n	8017c46 <_dtoa_r+0x916>
 8017ecc:	0801c4ed 	.word	0x0801c4ed
 8017ed0:	0801c4f5 	.word	0x0801c4f5

08017ed4 <__errno>:
 8017ed4:	4b01      	ldr	r3, [pc, #4]	; (8017edc <__errno+0x8>)
 8017ed6:	6818      	ldr	r0, [r3, #0]
 8017ed8:	4770      	bx	lr
 8017eda:	46c0      	nop			; (mov r8, r8)
 8017edc:	20000118 	.word	0x20000118

08017ee0 <__libc_fini_array>:
 8017ee0:	b570      	push	{r4, r5, r6, lr}
 8017ee2:	4d07      	ldr	r5, [pc, #28]	; (8017f00 <__libc_fini_array+0x20>)
 8017ee4:	4c07      	ldr	r4, [pc, #28]	; (8017f04 <__libc_fini_array+0x24>)
 8017ee6:	1b64      	subs	r4, r4, r5
 8017ee8:	10a4      	asrs	r4, r4, #2
 8017eea:	2c00      	cmp	r4, #0
 8017eec:	d102      	bne.n	8017ef4 <__libc_fini_array+0x14>
 8017eee:	f001 f987 	bl	8019200 <_fini>
 8017ef2:	bd70      	pop	{r4, r5, r6, pc}
 8017ef4:	3c01      	subs	r4, #1
 8017ef6:	00a3      	lsls	r3, r4, #2
 8017ef8:	58eb      	ldr	r3, [r5, r3]
 8017efa:	4798      	blx	r3
 8017efc:	e7f5      	b.n	8017eea <__libc_fini_array+0xa>
 8017efe:	46c0      	nop			; (mov r8, r8)
 8017f00:	0801c60c 	.word	0x0801c60c
 8017f04:	0801c610 	.word	0x0801c610

08017f08 <_malloc_trim_r>:
 8017f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017f0a:	0005      	movs	r5, r0
 8017f0c:	2008      	movs	r0, #8
 8017f0e:	000c      	movs	r4, r1
 8017f10:	f7ff f95c 	bl	80171cc <sysconf>
 8017f14:	0007      	movs	r7, r0
 8017f16:	0028      	movs	r0, r5
 8017f18:	f7fc fd56 	bl	80149c8 <__malloc_lock>
 8017f1c:	2203      	movs	r2, #3
 8017f1e:	4e21      	ldr	r6, [pc, #132]	; (8017fa4 <_malloc_trim_r+0x9c>)
 8017f20:	0039      	movs	r1, r7
 8017f22:	68b3      	ldr	r3, [r6, #8]
 8017f24:	685b      	ldr	r3, [r3, #4]
 8017f26:	4393      	bics	r3, r2
 8017f28:	1b18      	subs	r0, r3, r4
 8017f2a:	3811      	subs	r0, #17
 8017f2c:	19c0      	adds	r0, r0, r7
 8017f2e:	9301      	str	r3, [sp, #4]
 8017f30:	f7e8 f90e 	bl	8000150 <__udivsi3>
 8017f34:	1e44      	subs	r4, r0, #1
 8017f36:	437c      	muls	r4, r7
 8017f38:	42a7      	cmp	r7, r4
 8017f3a:	dd04      	ble.n	8017f46 <_malloc_trim_r+0x3e>
 8017f3c:	0028      	movs	r0, r5
 8017f3e:	f7fc fd4b 	bl	80149d8 <__malloc_unlock>
 8017f42:	2000      	movs	r0, #0
 8017f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017f46:	2100      	movs	r1, #0
 8017f48:	0028      	movs	r0, r5
 8017f4a:	f7fc ff1d 	bl	8014d88 <_sbrk_r>
 8017f4e:	68b3      	ldr	r3, [r6, #8]
 8017f50:	9a01      	ldr	r2, [sp, #4]
 8017f52:	189b      	adds	r3, r3, r2
 8017f54:	4298      	cmp	r0, r3
 8017f56:	d1f1      	bne.n	8017f3c <_malloc_trim_r+0x34>
 8017f58:	4261      	negs	r1, r4
 8017f5a:	0028      	movs	r0, r5
 8017f5c:	f7fc ff14 	bl	8014d88 <_sbrk_r>
 8017f60:	1c43      	adds	r3, r0, #1
 8017f62:	d110      	bne.n	8017f86 <_malloc_trim_r+0x7e>
 8017f64:	2100      	movs	r1, #0
 8017f66:	0028      	movs	r0, r5
 8017f68:	f7fc ff0e 	bl	8014d88 <_sbrk_r>
 8017f6c:	68b2      	ldr	r2, [r6, #8]
 8017f6e:	1a81      	subs	r1, r0, r2
 8017f70:	290f      	cmp	r1, #15
 8017f72:	dde3      	ble.n	8017f3c <_malloc_trim_r+0x34>
 8017f74:	4b0c      	ldr	r3, [pc, #48]	; (8017fa8 <_malloc_trim_r+0xa0>)
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	1ac0      	subs	r0, r0, r3
 8017f7a:	4b0c      	ldr	r3, [pc, #48]	; (8017fac <_malloc_trim_r+0xa4>)
 8017f7c:	6018      	str	r0, [r3, #0]
 8017f7e:	2301      	movs	r3, #1
 8017f80:	430b      	orrs	r3, r1
 8017f82:	6053      	str	r3, [r2, #4]
 8017f84:	e7da      	b.n	8017f3c <_malloc_trim_r+0x34>
 8017f86:	68b2      	ldr	r2, [r6, #8]
 8017f88:	2601      	movs	r6, #1
 8017f8a:	9b01      	ldr	r3, [sp, #4]
 8017f8c:	0028      	movs	r0, r5
 8017f8e:	1b1b      	subs	r3, r3, r4
 8017f90:	4333      	orrs	r3, r6
 8017f92:	6053      	str	r3, [r2, #4]
 8017f94:	4b05      	ldr	r3, [pc, #20]	; (8017fac <_malloc_trim_r+0xa4>)
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	1b14      	subs	r4, r2, r4
 8017f9a:	601c      	str	r4, [r3, #0]
 8017f9c:	f7fc fd1c 	bl	80149d8 <__malloc_unlock>
 8017fa0:	0030      	movs	r0, r6
 8017fa2:	e7cf      	b.n	8017f44 <_malloc_trim_r+0x3c>
 8017fa4:	200006b4 	.word	0x200006b4
 8017fa8:	20000abc 	.word	0x20000abc
 8017fac:	20006d98 	.word	0x20006d98

08017fb0 <_free_r>:
 8017fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017fb2:	1e0d      	subs	r5, r1, #0
 8017fb4:	9001      	str	r0, [sp, #4]
 8017fb6:	d02d      	beq.n	8018014 <_free_r+0x64>
 8017fb8:	f7fc fd06 	bl	80149c8 <__malloc_lock>
 8017fbc:	2301      	movs	r3, #1
 8017fbe:	0029      	movs	r1, r5
 8017fc0:	469c      	mov	ip, r3
 8017fc2:	3908      	subs	r1, #8
 8017fc4:	684f      	ldr	r7, [r1, #4]
 8017fc6:	4662      	mov	r2, ip
 8017fc8:	003b      	movs	r3, r7
 8017fca:	4666      	mov	r6, ip
 8017fcc:	4393      	bics	r3, r2
 8017fce:	18c8      	adds	r0, r1, r3
 8017fd0:	6845      	ldr	r5, [r0, #4]
 8017fd2:	3202      	adds	r2, #2
 8017fd4:	4395      	bics	r5, r2
 8017fd6:	4a4a      	ldr	r2, [pc, #296]	; (8018100 <_free_r+0x150>)
 8017fd8:	4037      	ands	r7, r6
 8017fda:	6896      	ldr	r6, [r2, #8]
 8017fdc:	4286      	cmp	r6, r0
 8017fde:	d11a      	bne.n	8018016 <_free_r+0x66>
 8017fe0:	195b      	adds	r3, r3, r5
 8017fe2:	2f00      	cmp	r7, #0
 8017fe4:	d106      	bne.n	8017ff4 <_free_r+0x44>
 8017fe6:	6808      	ldr	r0, [r1, #0]
 8017fe8:	1a09      	subs	r1, r1, r0
 8017fea:	688d      	ldr	r5, [r1, #8]
 8017fec:	181b      	adds	r3, r3, r0
 8017fee:	68c8      	ldr	r0, [r1, #12]
 8017ff0:	60e8      	str	r0, [r5, #12]
 8017ff2:	6085      	str	r5, [r0, #8]
 8017ff4:	2001      	movs	r0, #1
 8017ff6:	4318      	orrs	r0, r3
 8017ff8:	6048      	str	r0, [r1, #4]
 8017ffa:	6091      	str	r1, [r2, #8]
 8017ffc:	4a41      	ldr	r2, [pc, #260]	; (8018104 <_free_r+0x154>)
 8017ffe:	6812      	ldr	r2, [r2, #0]
 8018000:	429a      	cmp	r2, r3
 8018002:	d804      	bhi.n	801800e <_free_r+0x5e>
 8018004:	4b40      	ldr	r3, [pc, #256]	; (8018108 <_free_r+0x158>)
 8018006:	9801      	ldr	r0, [sp, #4]
 8018008:	6819      	ldr	r1, [r3, #0]
 801800a:	f7ff ff7d 	bl	8017f08 <_malloc_trim_r>
 801800e:	9801      	ldr	r0, [sp, #4]
 8018010:	f7fc fce2 	bl	80149d8 <__malloc_unlock>
 8018014:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8018016:	2600      	movs	r6, #0
 8018018:	6045      	str	r5, [r0, #4]
 801801a:	42b7      	cmp	r7, r6
 801801c:	d109      	bne.n	8018032 <_free_r+0x82>
 801801e:	680f      	ldr	r7, [r1, #0]
 8018020:	4c3a      	ldr	r4, [pc, #232]	; (801810c <_free_r+0x15c>)
 8018022:	1bc9      	subs	r1, r1, r7
 8018024:	19db      	adds	r3, r3, r7
 8018026:	688f      	ldr	r7, [r1, #8]
 8018028:	42a7      	cmp	r7, r4
 801802a:	d02b      	beq.n	8018084 <_free_r+0xd4>
 801802c:	68cc      	ldr	r4, [r1, #12]
 801802e:	60fc      	str	r4, [r7, #12]
 8018030:	60a7      	str	r7, [r4, #8]
 8018032:	1947      	adds	r7, r0, r5
 8018034:	687c      	ldr	r4, [r7, #4]
 8018036:	2701      	movs	r7, #1
 8018038:	423c      	tst	r4, r7
 801803a:	d10b      	bne.n	8018054 <_free_r+0xa4>
 801803c:	195b      	adds	r3, r3, r5
 801803e:	6885      	ldr	r5, [r0, #8]
 8018040:	2e00      	cmp	r6, #0
 8018042:	d121      	bne.n	8018088 <_free_r+0xd8>
 8018044:	4c31      	ldr	r4, [pc, #196]	; (801810c <_free_r+0x15c>)
 8018046:	42a5      	cmp	r5, r4
 8018048:	d11e      	bne.n	8018088 <_free_r+0xd8>
 801804a:	003e      	movs	r6, r7
 801804c:	6151      	str	r1, [r2, #20]
 801804e:	6111      	str	r1, [r2, #16]
 8018050:	60cd      	str	r5, [r1, #12]
 8018052:	608d      	str	r5, [r1, #8]
 8018054:	2001      	movs	r0, #1
 8018056:	0005      	movs	r5, r0
 8018058:	431d      	orrs	r5, r3
 801805a:	604d      	str	r5, [r1, #4]
 801805c:	50cb      	str	r3, [r1, r3]
 801805e:	2e00      	cmp	r6, #0
 8018060:	d1d5      	bne.n	801800e <_free_r+0x5e>
 8018062:	4d2b      	ldr	r5, [pc, #172]	; (8018110 <_free_r+0x160>)
 8018064:	42ab      	cmp	r3, r5
 8018066:	d813      	bhi.n	8018090 <_free_r+0xe0>
 8018068:	08db      	lsrs	r3, r3, #3
 801806a:	109d      	asrs	r5, r3, #2
 801806c:	40a8      	lsls	r0, r5
 801806e:	6854      	ldr	r4, [r2, #4]
 8018070:	00db      	lsls	r3, r3, #3
 8018072:	4320      	orrs	r0, r4
 8018074:	6050      	str	r0, [r2, #4]
 8018076:	189a      	adds	r2, r3, r2
 8018078:	6893      	ldr	r3, [r2, #8]
 801807a:	60ca      	str	r2, [r1, #12]
 801807c:	608b      	str	r3, [r1, #8]
 801807e:	6091      	str	r1, [r2, #8]
 8018080:	60d9      	str	r1, [r3, #12]
 8018082:	e7c4      	b.n	801800e <_free_r+0x5e>
 8018084:	4666      	mov	r6, ip
 8018086:	e7d4      	b.n	8018032 <_free_r+0x82>
 8018088:	68c0      	ldr	r0, [r0, #12]
 801808a:	60e8      	str	r0, [r5, #12]
 801808c:	6085      	str	r5, [r0, #8]
 801808e:	e7e1      	b.n	8018054 <_free_r+0xa4>
 8018090:	0a5d      	lsrs	r5, r3, #9
 8018092:	2d04      	cmp	r5, #4
 8018094:	d812      	bhi.n	80180bc <_free_r+0x10c>
 8018096:	0998      	lsrs	r0, r3, #6
 8018098:	3038      	adds	r0, #56	; 0x38
 801809a:	00c6      	lsls	r6, r0, #3
 801809c:	18b6      	adds	r6, r6, r2
 801809e:	68b5      	ldr	r5, [r6, #8]
 80180a0:	2703      	movs	r7, #3
 80180a2:	42ae      	cmp	r6, r5
 80180a4:	d125      	bne.n	80180f2 <_free_r+0x142>
 80180a6:	2301      	movs	r3, #1
 80180a8:	1080      	asrs	r0, r0, #2
 80180aa:	4083      	lsls	r3, r0
 80180ac:	6850      	ldr	r0, [r2, #4]
 80180ae:	4303      	orrs	r3, r0
 80180b0:	6053      	str	r3, [r2, #4]
 80180b2:	60ce      	str	r6, [r1, #12]
 80180b4:	608d      	str	r5, [r1, #8]
 80180b6:	60b1      	str	r1, [r6, #8]
 80180b8:	60e9      	str	r1, [r5, #12]
 80180ba:	e7a8      	b.n	801800e <_free_r+0x5e>
 80180bc:	2d14      	cmp	r5, #20
 80180be:	d802      	bhi.n	80180c6 <_free_r+0x116>
 80180c0:	0028      	movs	r0, r5
 80180c2:	305b      	adds	r0, #91	; 0x5b
 80180c4:	e7e9      	b.n	801809a <_free_r+0xea>
 80180c6:	2d54      	cmp	r5, #84	; 0x54
 80180c8:	d802      	bhi.n	80180d0 <_free_r+0x120>
 80180ca:	0b18      	lsrs	r0, r3, #12
 80180cc:	306e      	adds	r0, #110	; 0x6e
 80180ce:	e7e4      	b.n	801809a <_free_r+0xea>
 80180d0:	20aa      	movs	r0, #170	; 0xaa
 80180d2:	0040      	lsls	r0, r0, #1
 80180d4:	4285      	cmp	r5, r0
 80180d6:	d802      	bhi.n	80180de <_free_r+0x12e>
 80180d8:	0bd8      	lsrs	r0, r3, #15
 80180da:	3077      	adds	r0, #119	; 0x77
 80180dc:	e7dd      	b.n	801809a <_free_r+0xea>
 80180de:	4e0d      	ldr	r6, [pc, #52]	; (8018114 <_free_r+0x164>)
 80180e0:	207e      	movs	r0, #126	; 0x7e
 80180e2:	42b5      	cmp	r5, r6
 80180e4:	d8d9      	bhi.n	801809a <_free_r+0xea>
 80180e6:	0c98      	lsrs	r0, r3, #18
 80180e8:	307c      	adds	r0, #124	; 0x7c
 80180ea:	e7d6      	b.n	801809a <_free_r+0xea>
 80180ec:	68ad      	ldr	r5, [r5, #8]
 80180ee:	42ae      	cmp	r6, r5
 80180f0:	d003      	beq.n	80180fa <_free_r+0x14a>
 80180f2:	686a      	ldr	r2, [r5, #4]
 80180f4:	43ba      	bics	r2, r7
 80180f6:	429a      	cmp	r2, r3
 80180f8:	d8f8      	bhi.n	80180ec <_free_r+0x13c>
 80180fa:	68ee      	ldr	r6, [r5, #12]
 80180fc:	e7d9      	b.n	80180b2 <_free_r+0x102>
 80180fe:	46c0      	nop			; (mov r8, r8)
 8018100:	200006b4 	.word	0x200006b4
 8018104:	20000ac0 	.word	0x20000ac0
 8018108:	20006dc8 	.word	0x20006dc8
 801810c:	200006bc 	.word	0x200006bc
 8018110:	000001ff 	.word	0x000001ff
 8018114:	00000554 	.word	0x00000554

08018118 <rshift>:
 8018118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801811a:	0004      	movs	r4, r0
 801811c:	6905      	ldr	r5, [r0, #16]
 801811e:	3414      	adds	r4, #20
 8018120:	114b      	asrs	r3, r1, #5
 8018122:	0026      	movs	r6, r4
 8018124:	429d      	cmp	r5, r3
 8018126:	dd14      	ble.n	8018152 <rshift+0x3a>
 8018128:	221f      	movs	r2, #31
 801812a:	00ad      	lsls	r5, r5, #2
 801812c:	009b      	lsls	r3, r3, #2
 801812e:	4011      	ands	r1, r2
 8018130:	1965      	adds	r5, r4, r5
 8018132:	18e3      	adds	r3, r4, r3
 8018134:	0022      	movs	r2, r4
 8018136:	2900      	cmp	r1, #0
 8018138:	d01e      	beq.n	8018178 <rshift+0x60>
 801813a:	cb04      	ldmia	r3!, {r2}
 801813c:	2720      	movs	r7, #32
 801813e:	40ca      	lsrs	r2, r1
 8018140:	46a4      	mov	ip, r4
 8018142:	1a7f      	subs	r7, r7, r1
 8018144:	4666      	mov	r6, ip
 8018146:	429d      	cmp	r5, r3
 8018148:	d80b      	bhi.n	8018162 <rshift+0x4a>
 801814a:	6032      	str	r2, [r6, #0]
 801814c:	2a00      	cmp	r2, #0
 801814e:	d000      	beq.n	8018152 <rshift+0x3a>
 8018150:	3604      	adds	r6, #4
 8018152:	1b33      	subs	r3, r6, r4
 8018154:	109b      	asrs	r3, r3, #2
 8018156:	6103      	str	r3, [r0, #16]
 8018158:	42a6      	cmp	r6, r4
 801815a:	d101      	bne.n	8018160 <rshift+0x48>
 801815c:	2300      	movs	r3, #0
 801815e:	6143      	str	r3, [r0, #20]
 8018160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018162:	681e      	ldr	r6, [r3, #0]
 8018164:	40be      	lsls	r6, r7
 8018166:	4332      	orrs	r2, r6
 8018168:	4666      	mov	r6, ip
 801816a:	c604      	stmia	r6!, {r2}
 801816c:	cb04      	ldmia	r3!, {r2}
 801816e:	46b4      	mov	ip, r6
 8018170:	40ca      	lsrs	r2, r1
 8018172:	e7e7      	b.n	8018144 <rshift+0x2c>
 8018174:	cb02      	ldmia	r3!, {r1}
 8018176:	c202      	stmia	r2!, {r1}
 8018178:	0016      	movs	r6, r2
 801817a:	429d      	cmp	r5, r3
 801817c:	d8fa      	bhi.n	8018174 <rshift+0x5c>
 801817e:	e7e8      	b.n	8018152 <rshift+0x3a>

08018180 <__hexdig_fun>:
 8018180:	0003      	movs	r3, r0
 8018182:	3b30      	subs	r3, #48	; 0x30
 8018184:	2b09      	cmp	r3, #9
 8018186:	d803      	bhi.n	8018190 <__hexdig_fun+0x10>
 8018188:	3820      	subs	r0, #32
 801818a:	b2c3      	uxtb	r3, r0
 801818c:	0018      	movs	r0, r3
 801818e:	4770      	bx	lr
 8018190:	0003      	movs	r3, r0
 8018192:	3b61      	subs	r3, #97	; 0x61
 8018194:	2b05      	cmp	r3, #5
 8018196:	d801      	bhi.n	801819c <__hexdig_fun+0x1c>
 8018198:	3847      	subs	r0, #71	; 0x47
 801819a:	e7f6      	b.n	801818a <__hexdig_fun+0xa>
 801819c:	0002      	movs	r2, r0
 801819e:	3a41      	subs	r2, #65	; 0x41
 80181a0:	2300      	movs	r3, #0
 80181a2:	2a05      	cmp	r2, #5
 80181a4:	d8f2      	bhi.n	801818c <__hexdig_fun+0xc>
 80181a6:	3827      	subs	r0, #39	; 0x27
 80181a8:	e7ef      	b.n	801818a <__hexdig_fun+0xa>

080181aa <__gethex>:
 80181aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80181ac:	b08d      	sub	sp, #52	; 0x34
 80181ae:	9005      	str	r0, [sp, #20]
 80181b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80181b2:	9109      	str	r1, [sp, #36]	; 0x24
 80181b4:	9202      	str	r2, [sp, #8]
 80181b6:	930a      	str	r3, [sp, #40]	; 0x28
 80181b8:	f000 fadf 	bl	801877a <__localeconv_l>
 80181bc:	6803      	ldr	r3, [r0, #0]
 80181be:	0018      	movs	r0, r3
 80181c0:	9307      	str	r3, [sp, #28]
 80181c2:	f7e7 ffa9 	bl	8000118 <strlen>
 80181c6:	2202      	movs	r2, #2
 80181c8:	9b07      	ldr	r3, [sp, #28]
 80181ca:	4252      	negs	r2, r2
 80181cc:	181b      	adds	r3, r3, r0
 80181ce:	3b01      	subs	r3, #1
 80181d0:	781b      	ldrb	r3, [r3, #0]
 80181d2:	9004      	str	r0, [sp, #16]
 80181d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80181d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181d8:	6819      	ldr	r1, [r3, #0]
 80181da:	1c8b      	adds	r3, r1, #2
 80181dc:	1a52      	subs	r2, r2, r1
 80181de:	18d1      	adds	r1, r2, r3
 80181e0:	9301      	str	r3, [sp, #4]
 80181e2:	9108      	str	r1, [sp, #32]
 80181e4:	9901      	ldr	r1, [sp, #4]
 80181e6:	3301      	adds	r3, #1
 80181e8:	7808      	ldrb	r0, [r1, #0]
 80181ea:	2830      	cmp	r0, #48	; 0x30
 80181ec:	d0f7      	beq.n	80181de <__gethex+0x34>
 80181ee:	f7ff ffc7 	bl	8018180 <__hexdig_fun>
 80181f2:	1e07      	subs	r7, r0, #0
 80181f4:	d000      	beq.n	80181f8 <__gethex+0x4e>
 80181f6:	e06f      	b.n	80182d8 <__gethex+0x12e>
 80181f8:	9a04      	ldr	r2, [sp, #16]
 80181fa:	9907      	ldr	r1, [sp, #28]
 80181fc:	9801      	ldr	r0, [sp, #4]
 80181fe:	f7fc fe4b 	bl	8014e98 <strncmp>
 8018202:	2800      	cmp	r0, #0
 8018204:	d000      	beq.n	8018208 <__gethex+0x5e>
 8018206:	e06d      	b.n	80182e4 <__gethex+0x13a>
 8018208:	9b01      	ldr	r3, [sp, #4]
 801820a:	9a04      	ldr	r2, [sp, #16]
 801820c:	189c      	adds	r4, r3, r2
 801820e:	7820      	ldrb	r0, [r4, #0]
 8018210:	f7ff ffb6 	bl	8018180 <__hexdig_fun>
 8018214:	2800      	cmp	r0, #0
 8018216:	d069      	beq.n	80182ec <__gethex+0x142>
 8018218:	9401      	str	r4, [sp, #4]
 801821a:	9b01      	ldr	r3, [sp, #4]
 801821c:	7818      	ldrb	r0, [r3, #0]
 801821e:	2830      	cmp	r0, #48	; 0x30
 8018220:	d009      	beq.n	8018236 <__gethex+0x8c>
 8018222:	f7ff ffad 	bl	8018180 <__hexdig_fun>
 8018226:	4243      	negs	r3, r0
 8018228:	4143      	adcs	r3, r0
 801822a:	9303      	str	r3, [sp, #12]
 801822c:	2301      	movs	r3, #1
 801822e:	0026      	movs	r6, r4
 8018230:	9308      	str	r3, [sp, #32]
 8018232:	9c01      	ldr	r4, [sp, #4]
 8018234:	e004      	b.n	8018240 <__gethex+0x96>
 8018236:	9b01      	ldr	r3, [sp, #4]
 8018238:	3301      	adds	r3, #1
 801823a:	9301      	str	r3, [sp, #4]
 801823c:	e7ed      	b.n	801821a <__gethex+0x70>
 801823e:	3401      	adds	r4, #1
 8018240:	7820      	ldrb	r0, [r4, #0]
 8018242:	f7ff ff9d 	bl	8018180 <__hexdig_fun>
 8018246:	2800      	cmp	r0, #0
 8018248:	d1f9      	bne.n	801823e <__gethex+0x94>
 801824a:	9a04      	ldr	r2, [sp, #16]
 801824c:	9907      	ldr	r1, [sp, #28]
 801824e:	0020      	movs	r0, r4
 8018250:	f7fc fe22 	bl	8014e98 <strncmp>
 8018254:	2800      	cmp	r0, #0
 8018256:	d109      	bne.n	801826c <__gethex+0xc2>
 8018258:	2e00      	cmp	r6, #0
 801825a:	d10a      	bne.n	8018272 <__gethex+0xc8>
 801825c:	9b04      	ldr	r3, [sp, #16]
 801825e:	18e4      	adds	r4, r4, r3
 8018260:	0026      	movs	r6, r4
 8018262:	7820      	ldrb	r0, [r4, #0]
 8018264:	f7ff ff8c 	bl	8018180 <__hexdig_fun>
 8018268:	2800      	cmp	r0, #0
 801826a:	d139      	bne.n	80182e0 <__gethex+0x136>
 801826c:	2700      	movs	r7, #0
 801826e:	42be      	cmp	r6, r7
 8018270:	d001      	beq.n	8018276 <__gethex+0xcc>
 8018272:	1b37      	subs	r7, r6, r4
 8018274:	00bf      	lsls	r7, r7, #2
 8018276:	7823      	ldrb	r3, [r4, #0]
 8018278:	2b50      	cmp	r3, #80	; 0x50
 801827a:	d001      	beq.n	8018280 <__gethex+0xd6>
 801827c:	2b70      	cmp	r3, #112	; 0x70
 801827e:	d142      	bne.n	8018306 <__gethex+0x15c>
 8018280:	7863      	ldrb	r3, [r4, #1]
 8018282:	2b2b      	cmp	r3, #43	; 0x2b
 8018284:	d034      	beq.n	80182f0 <__gethex+0x146>
 8018286:	2b2d      	cmp	r3, #45	; 0x2d
 8018288:	d036      	beq.n	80182f8 <__gethex+0x14e>
 801828a:	2300      	movs	r3, #0
 801828c:	1c66      	adds	r6, r4, #1
 801828e:	9306      	str	r3, [sp, #24]
 8018290:	7830      	ldrb	r0, [r6, #0]
 8018292:	f7ff ff75 	bl	8018180 <__hexdig_fun>
 8018296:	1e43      	subs	r3, r0, #1
 8018298:	b2db      	uxtb	r3, r3
 801829a:	2b18      	cmp	r3, #24
 801829c:	d833      	bhi.n	8018306 <__gethex+0x15c>
 801829e:	3810      	subs	r0, #16
 80182a0:	0005      	movs	r5, r0
 80182a2:	3601      	adds	r6, #1
 80182a4:	7830      	ldrb	r0, [r6, #0]
 80182a6:	f7ff ff6b 	bl	8018180 <__hexdig_fun>
 80182aa:	1e43      	subs	r3, r0, #1
 80182ac:	b2db      	uxtb	r3, r3
 80182ae:	2b18      	cmp	r3, #24
 80182b0:	d924      	bls.n	80182fc <__gethex+0x152>
 80182b2:	9b06      	ldr	r3, [sp, #24]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d000      	beq.n	80182ba <__gethex+0x110>
 80182b8:	426d      	negs	r5, r5
 80182ba:	197f      	adds	r7, r7, r5
 80182bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182be:	601e      	str	r6, [r3, #0]
 80182c0:	9b03      	ldr	r3, [sp, #12]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d021      	beq.n	801830a <__gethex+0x160>
 80182c6:	9b08      	ldr	r3, [sp, #32]
 80182c8:	2606      	movs	r6, #6
 80182ca:	425a      	negs	r2, r3
 80182cc:	4153      	adcs	r3, r2
 80182ce:	425b      	negs	r3, r3
 80182d0:	401e      	ands	r6, r3
 80182d2:	0030      	movs	r0, r6
 80182d4:	b00d      	add	sp, #52	; 0x34
 80182d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80182d8:	2300      	movs	r3, #0
 80182da:	9303      	str	r3, [sp, #12]
 80182dc:	001e      	movs	r6, r3
 80182de:	e7a8      	b.n	8018232 <__gethex+0x88>
 80182e0:	3401      	adds	r4, #1
 80182e2:	e7be      	b.n	8018262 <__gethex+0xb8>
 80182e4:	9c01      	ldr	r4, [sp, #4]
 80182e6:	2301      	movs	r3, #1
 80182e8:	9303      	str	r3, [sp, #12]
 80182ea:	e7c4      	b.n	8018276 <__gethex+0xcc>
 80182ec:	0007      	movs	r7, r0
 80182ee:	e7fa      	b.n	80182e6 <__gethex+0x13c>
 80182f0:	2300      	movs	r3, #0
 80182f2:	9306      	str	r3, [sp, #24]
 80182f4:	1ca6      	adds	r6, r4, #2
 80182f6:	e7cb      	b.n	8018290 <__gethex+0xe6>
 80182f8:	2301      	movs	r3, #1
 80182fa:	e7fa      	b.n	80182f2 <__gethex+0x148>
 80182fc:	230a      	movs	r3, #10
 80182fe:	435d      	muls	r5, r3
 8018300:	182d      	adds	r5, r5, r0
 8018302:	3d10      	subs	r5, #16
 8018304:	e7cd      	b.n	80182a2 <__gethex+0xf8>
 8018306:	0026      	movs	r6, r4
 8018308:	e7d8      	b.n	80182bc <__gethex+0x112>
 801830a:	9b01      	ldr	r3, [sp, #4]
 801830c:	9903      	ldr	r1, [sp, #12]
 801830e:	1ae3      	subs	r3, r4, r3
 8018310:	3b01      	subs	r3, #1
 8018312:	2b07      	cmp	r3, #7
 8018314:	dc47      	bgt.n	80183a6 <__gethex+0x1fc>
 8018316:	9805      	ldr	r0, [sp, #20]
 8018318:	f000 fa5e 	bl	80187d8 <_Balloc>
 801831c:	0003      	movs	r3, r0
 801831e:	3314      	adds	r3, #20
 8018320:	9303      	str	r3, [sp, #12]
 8018322:	9308      	str	r3, [sp, #32]
 8018324:	2300      	movs	r3, #0
 8018326:	0005      	movs	r5, r0
 8018328:	001e      	movs	r6, r3
 801832a:	9306      	str	r3, [sp, #24]
 801832c:	9b01      	ldr	r3, [sp, #4]
 801832e:	42a3      	cmp	r3, r4
 8018330:	d33c      	bcc.n	80183ac <__gethex+0x202>
 8018332:	9c08      	ldr	r4, [sp, #32]
 8018334:	9b03      	ldr	r3, [sp, #12]
 8018336:	c440      	stmia	r4!, {r6}
 8018338:	1ae4      	subs	r4, r4, r3
 801833a:	10a4      	asrs	r4, r4, #2
 801833c:	612c      	str	r4, [r5, #16]
 801833e:	0030      	movs	r0, r6
 8018340:	f000 faf8 	bl	8018934 <__hi0bits>
 8018344:	9b02      	ldr	r3, [sp, #8]
 8018346:	0164      	lsls	r4, r4, #5
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	1a26      	subs	r6, r4, r0
 801834c:	9301      	str	r3, [sp, #4]
 801834e:	429e      	cmp	r6, r3
 8018350:	dd5f      	ble.n	8018412 <__gethex+0x268>
 8018352:	1af6      	subs	r6, r6, r3
 8018354:	0031      	movs	r1, r6
 8018356:	0028      	movs	r0, r5
 8018358:	f000 fde3 	bl	8018f22 <__any_on>
 801835c:	1e04      	subs	r4, r0, #0
 801835e:	d00f      	beq.n	8018380 <__gethex+0x1d6>
 8018360:	2401      	movs	r4, #1
 8018362:	211f      	movs	r1, #31
 8018364:	0020      	movs	r0, r4
 8018366:	1e73      	subs	r3, r6, #1
 8018368:	4019      	ands	r1, r3
 801836a:	4088      	lsls	r0, r1
 801836c:	0001      	movs	r1, r0
 801836e:	115a      	asrs	r2, r3, #5
 8018370:	9803      	ldr	r0, [sp, #12]
 8018372:	0092      	lsls	r2, r2, #2
 8018374:	5812      	ldr	r2, [r2, r0]
 8018376:	420a      	tst	r2, r1
 8018378:	d002      	beq.n	8018380 <__gethex+0x1d6>
 801837a:	42a3      	cmp	r3, r4
 801837c:	dc41      	bgt.n	8018402 <__gethex+0x258>
 801837e:	2402      	movs	r4, #2
 8018380:	0031      	movs	r1, r6
 8018382:	0028      	movs	r0, r5
 8018384:	f7ff fec8 	bl	8018118 <rshift>
 8018388:	19bf      	adds	r7, r7, r6
 801838a:	9b02      	ldr	r3, [sp, #8]
 801838c:	689b      	ldr	r3, [r3, #8]
 801838e:	9304      	str	r3, [sp, #16]
 8018390:	42bb      	cmp	r3, r7
 8018392:	da4e      	bge.n	8018432 <__gethex+0x288>
 8018394:	0029      	movs	r1, r5
 8018396:	9805      	ldr	r0, [sp, #20]
 8018398:	f000 fa46 	bl	8018828 <_Bfree>
 801839c:	2300      	movs	r3, #0
 801839e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80183a0:	26a3      	movs	r6, #163	; 0xa3
 80183a2:	6013      	str	r3, [r2, #0]
 80183a4:	e795      	b.n	80182d2 <__gethex+0x128>
 80183a6:	3101      	adds	r1, #1
 80183a8:	105b      	asrs	r3, r3, #1
 80183aa:	e7b2      	b.n	8018312 <__gethex+0x168>
 80183ac:	1e63      	subs	r3, r4, #1
 80183ae:	9309      	str	r3, [sp, #36]	; 0x24
 80183b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80183b2:	781b      	ldrb	r3, [r3, #0]
 80183b4:	4293      	cmp	r3, r2
 80183b6:	d015      	beq.n	80183e4 <__gethex+0x23a>
 80183b8:	9b06      	ldr	r3, [sp, #24]
 80183ba:	2b20      	cmp	r3, #32
 80183bc:	d105      	bne.n	80183ca <__gethex+0x220>
 80183be:	9b08      	ldr	r3, [sp, #32]
 80183c0:	601e      	str	r6, [r3, #0]
 80183c2:	2600      	movs	r6, #0
 80183c4:	3304      	adds	r3, #4
 80183c6:	9308      	str	r3, [sp, #32]
 80183c8:	9606      	str	r6, [sp, #24]
 80183ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183cc:	7818      	ldrb	r0, [r3, #0]
 80183ce:	f7ff fed7 	bl	8018180 <__hexdig_fun>
 80183d2:	230f      	movs	r3, #15
 80183d4:	4018      	ands	r0, r3
 80183d6:	9b06      	ldr	r3, [sp, #24]
 80183d8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80183da:	4098      	lsls	r0, r3
 80183dc:	3304      	adds	r3, #4
 80183de:	4306      	orrs	r6, r0
 80183e0:	9306      	str	r3, [sp, #24]
 80183e2:	e7a3      	b.n	801832c <__gethex+0x182>
 80183e4:	2301      	movs	r3, #1
 80183e6:	9a04      	ldr	r2, [sp, #16]
 80183e8:	1a9c      	subs	r4, r3, r2
 80183ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183ec:	191c      	adds	r4, r3, r4
 80183ee:	9b01      	ldr	r3, [sp, #4]
 80183f0:	429c      	cmp	r4, r3
 80183f2:	d3e1      	bcc.n	80183b8 <__gethex+0x20e>
 80183f4:	9907      	ldr	r1, [sp, #28]
 80183f6:	0020      	movs	r0, r4
 80183f8:	f7fc fd4e 	bl	8014e98 <strncmp>
 80183fc:	2800      	cmp	r0, #0
 80183fe:	d1db      	bne.n	80183b8 <__gethex+0x20e>
 8018400:	e794      	b.n	801832c <__gethex+0x182>
 8018402:	1eb1      	subs	r1, r6, #2
 8018404:	0028      	movs	r0, r5
 8018406:	f000 fd8c 	bl	8018f22 <__any_on>
 801840a:	2800      	cmp	r0, #0
 801840c:	d0b7      	beq.n	801837e <__gethex+0x1d4>
 801840e:	2403      	movs	r4, #3
 8018410:	e7b6      	b.n	8018380 <__gethex+0x1d6>
 8018412:	9b01      	ldr	r3, [sp, #4]
 8018414:	2400      	movs	r4, #0
 8018416:	429e      	cmp	r6, r3
 8018418:	dab7      	bge.n	801838a <__gethex+0x1e0>
 801841a:	1b9e      	subs	r6, r3, r6
 801841c:	0029      	movs	r1, r5
 801841e:	0032      	movs	r2, r6
 8018420:	9805      	ldr	r0, [sp, #20]
 8018422:	f000 fbab 	bl	8018b7c <__lshift>
 8018426:	0003      	movs	r3, r0
 8018428:	3314      	adds	r3, #20
 801842a:	0005      	movs	r5, r0
 801842c:	1bbf      	subs	r7, r7, r6
 801842e:	9303      	str	r3, [sp, #12]
 8018430:	e7ab      	b.n	801838a <__gethex+0x1e0>
 8018432:	9b02      	ldr	r3, [sp, #8]
 8018434:	685e      	ldr	r6, [r3, #4]
 8018436:	42be      	cmp	r6, r7
 8018438:	dd6b      	ble.n	8018512 <__gethex+0x368>
 801843a:	9b01      	ldr	r3, [sp, #4]
 801843c:	1bf6      	subs	r6, r6, r7
 801843e:	42b3      	cmp	r3, r6
 8018440:	dc32      	bgt.n	80184a8 <__gethex+0x2fe>
 8018442:	9b02      	ldr	r3, [sp, #8]
 8018444:	68db      	ldr	r3, [r3, #12]
 8018446:	2b02      	cmp	r3, #2
 8018448:	d026      	beq.n	8018498 <__gethex+0x2ee>
 801844a:	2b03      	cmp	r3, #3
 801844c:	d028      	beq.n	80184a0 <__gethex+0x2f6>
 801844e:	2b01      	cmp	r3, #1
 8018450:	d119      	bne.n	8018486 <__gethex+0x2dc>
 8018452:	9b01      	ldr	r3, [sp, #4]
 8018454:	42b3      	cmp	r3, r6
 8018456:	d116      	bne.n	8018486 <__gethex+0x2dc>
 8018458:	2b01      	cmp	r3, #1
 801845a:	dc0d      	bgt.n	8018478 <__gethex+0x2ce>
 801845c:	9b02      	ldr	r3, [sp, #8]
 801845e:	2662      	movs	r6, #98	; 0x62
 8018460:	685b      	ldr	r3, [r3, #4]
 8018462:	9301      	str	r3, [sp, #4]
 8018464:	9a01      	ldr	r2, [sp, #4]
 8018466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018468:	601a      	str	r2, [r3, #0]
 801846a:	2301      	movs	r3, #1
 801846c:	9a03      	ldr	r2, [sp, #12]
 801846e:	612b      	str	r3, [r5, #16]
 8018470:	6013      	str	r3, [r2, #0]
 8018472:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018474:	601d      	str	r5, [r3, #0]
 8018476:	e72c      	b.n	80182d2 <__gethex+0x128>
 8018478:	9901      	ldr	r1, [sp, #4]
 801847a:	0028      	movs	r0, r5
 801847c:	3901      	subs	r1, #1
 801847e:	f000 fd50 	bl	8018f22 <__any_on>
 8018482:	2800      	cmp	r0, #0
 8018484:	d1ea      	bne.n	801845c <__gethex+0x2b2>
 8018486:	0029      	movs	r1, r5
 8018488:	9805      	ldr	r0, [sp, #20]
 801848a:	f000 f9cd 	bl	8018828 <_Bfree>
 801848e:	2300      	movs	r3, #0
 8018490:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018492:	2650      	movs	r6, #80	; 0x50
 8018494:	6013      	str	r3, [r2, #0]
 8018496:	e71c      	b.n	80182d2 <__gethex+0x128>
 8018498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801849a:	2b00      	cmp	r3, #0
 801849c:	d0de      	beq.n	801845c <__gethex+0x2b2>
 801849e:	e7f2      	b.n	8018486 <__gethex+0x2dc>
 80184a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d1da      	bne.n	801845c <__gethex+0x2b2>
 80184a6:	e7ee      	b.n	8018486 <__gethex+0x2dc>
 80184a8:	1e77      	subs	r7, r6, #1
 80184aa:	2c00      	cmp	r4, #0
 80184ac:	d12f      	bne.n	801850e <__gethex+0x364>
 80184ae:	2f00      	cmp	r7, #0
 80184b0:	d004      	beq.n	80184bc <__gethex+0x312>
 80184b2:	0039      	movs	r1, r7
 80184b4:	0028      	movs	r0, r5
 80184b6:	f000 fd34 	bl	8018f22 <__any_on>
 80184ba:	0004      	movs	r4, r0
 80184bc:	231f      	movs	r3, #31
 80184be:	117a      	asrs	r2, r7, #5
 80184c0:	401f      	ands	r7, r3
 80184c2:	3b1e      	subs	r3, #30
 80184c4:	40bb      	lsls	r3, r7
 80184c6:	9903      	ldr	r1, [sp, #12]
 80184c8:	0092      	lsls	r2, r2, #2
 80184ca:	5852      	ldr	r2, [r2, r1]
 80184cc:	421a      	tst	r2, r3
 80184ce:	d001      	beq.n	80184d4 <__gethex+0x32a>
 80184d0:	2302      	movs	r3, #2
 80184d2:	431c      	orrs	r4, r3
 80184d4:	9b01      	ldr	r3, [sp, #4]
 80184d6:	0031      	movs	r1, r6
 80184d8:	1b9b      	subs	r3, r3, r6
 80184da:	2602      	movs	r6, #2
 80184dc:	0028      	movs	r0, r5
 80184de:	9301      	str	r3, [sp, #4]
 80184e0:	f7ff fe1a 	bl	8018118 <rshift>
 80184e4:	9b02      	ldr	r3, [sp, #8]
 80184e6:	685f      	ldr	r7, [r3, #4]
 80184e8:	2c00      	cmp	r4, #0
 80184ea:	d040      	beq.n	801856e <__gethex+0x3c4>
 80184ec:	9b02      	ldr	r3, [sp, #8]
 80184ee:	68db      	ldr	r3, [r3, #12]
 80184f0:	2b02      	cmp	r3, #2
 80184f2:	d010      	beq.n	8018516 <__gethex+0x36c>
 80184f4:	2b03      	cmp	r3, #3
 80184f6:	d012      	beq.n	801851e <__gethex+0x374>
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	d106      	bne.n	801850a <__gethex+0x360>
 80184fc:	07a2      	lsls	r2, r4, #30
 80184fe:	d504      	bpl.n	801850a <__gethex+0x360>
 8018500:	9a03      	ldr	r2, [sp, #12]
 8018502:	6812      	ldr	r2, [r2, #0]
 8018504:	4314      	orrs	r4, r2
 8018506:	421c      	tst	r4, r3
 8018508:	d10c      	bne.n	8018524 <__gethex+0x37a>
 801850a:	2310      	movs	r3, #16
 801850c:	e02e      	b.n	801856c <__gethex+0x3c2>
 801850e:	2401      	movs	r4, #1
 8018510:	e7d4      	b.n	80184bc <__gethex+0x312>
 8018512:	2601      	movs	r6, #1
 8018514:	e7e8      	b.n	80184e8 <__gethex+0x33e>
 8018516:	2301      	movs	r3, #1
 8018518:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801851a:	1a9b      	subs	r3, r3, r2
 801851c:	9313      	str	r3, [sp, #76]	; 0x4c
 801851e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018520:	2b00      	cmp	r3, #0
 8018522:	d0f2      	beq.n	801850a <__gethex+0x360>
 8018524:	692c      	ldr	r4, [r5, #16]
 8018526:	00a3      	lsls	r3, r4, #2
 8018528:	9304      	str	r3, [sp, #16]
 801852a:	002b      	movs	r3, r5
 801852c:	00a2      	lsls	r2, r4, #2
 801852e:	3314      	adds	r3, #20
 8018530:	1899      	adds	r1, r3, r2
 8018532:	2200      	movs	r2, #0
 8018534:	4694      	mov	ip, r2
 8018536:	681a      	ldr	r2, [r3, #0]
 8018538:	1c50      	adds	r0, r2, #1
 801853a:	d01d      	beq.n	8018578 <__gethex+0x3ce>
 801853c:	3201      	adds	r2, #1
 801853e:	601a      	str	r2, [r3, #0]
 8018540:	002b      	movs	r3, r5
 8018542:	3314      	adds	r3, #20
 8018544:	2e02      	cmp	r6, #2
 8018546:	d13a      	bne.n	80185be <__gethex+0x414>
 8018548:	9a02      	ldr	r2, [sp, #8]
 801854a:	9901      	ldr	r1, [sp, #4]
 801854c:	6812      	ldr	r2, [r2, #0]
 801854e:	3a01      	subs	r2, #1
 8018550:	428a      	cmp	r2, r1
 8018552:	d10a      	bne.n	801856a <__gethex+0x3c0>
 8018554:	114a      	asrs	r2, r1, #5
 8018556:	211f      	movs	r1, #31
 8018558:	9801      	ldr	r0, [sp, #4]
 801855a:	0092      	lsls	r2, r2, #2
 801855c:	4001      	ands	r1, r0
 801855e:	2001      	movs	r0, #1
 8018560:	0004      	movs	r4, r0
 8018562:	408c      	lsls	r4, r1
 8018564:	58d3      	ldr	r3, [r2, r3]
 8018566:	4223      	tst	r3, r4
 8018568:	d148      	bne.n	80185fc <__gethex+0x452>
 801856a:	2320      	movs	r3, #32
 801856c:	431e      	orrs	r6, r3
 801856e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018570:	601d      	str	r5, [r3, #0]
 8018572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018574:	601f      	str	r7, [r3, #0]
 8018576:	e6ac      	b.n	80182d2 <__gethex+0x128>
 8018578:	4662      	mov	r2, ip
 801857a:	c304      	stmia	r3!, {r2}
 801857c:	4299      	cmp	r1, r3
 801857e:	d8da      	bhi.n	8018536 <__gethex+0x38c>
 8018580:	68ab      	ldr	r3, [r5, #8]
 8018582:	429c      	cmp	r4, r3
 8018584:	db12      	blt.n	80185ac <__gethex+0x402>
 8018586:	686b      	ldr	r3, [r5, #4]
 8018588:	9805      	ldr	r0, [sp, #20]
 801858a:	1c59      	adds	r1, r3, #1
 801858c:	f000 f924 	bl	80187d8 <_Balloc>
 8018590:	0029      	movs	r1, r5
 8018592:	692b      	ldr	r3, [r5, #16]
 8018594:	9003      	str	r0, [sp, #12]
 8018596:	1c9a      	adds	r2, r3, #2
 8018598:	0092      	lsls	r2, r2, #2
 801859a:	310c      	adds	r1, #12
 801859c:	300c      	adds	r0, #12
 801859e:	f7fc fa02 	bl	80149a6 <memcpy>
 80185a2:	0029      	movs	r1, r5
 80185a4:	9805      	ldr	r0, [sp, #20]
 80185a6:	f000 f93f 	bl	8018828 <_Bfree>
 80185aa:	9d03      	ldr	r5, [sp, #12]
 80185ac:	692b      	ldr	r3, [r5, #16]
 80185ae:	1c5a      	adds	r2, r3, #1
 80185b0:	612a      	str	r2, [r5, #16]
 80185b2:	2201      	movs	r2, #1
 80185b4:	3304      	adds	r3, #4
 80185b6:	009b      	lsls	r3, r3, #2
 80185b8:	18eb      	adds	r3, r5, r3
 80185ba:	605a      	str	r2, [r3, #4]
 80185bc:	e7c0      	b.n	8018540 <__gethex+0x396>
 80185be:	692a      	ldr	r2, [r5, #16]
 80185c0:	42a2      	cmp	r2, r4
 80185c2:	dd0a      	ble.n	80185da <__gethex+0x430>
 80185c4:	2101      	movs	r1, #1
 80185c6:	0028      	movs	r0, r5
 80185c8:	f7ff fda6 	bl	8018118 <rshift>
 80185cc:	9b02      	ldr	r3, [sp, #8]
 80185ce:	3701      	adds	r7, #1
 80185d0:	689b      	ldr	r3, [r3, #8]
 80185d2:	2601      	movs	r6, #1
 80185d4:	42bb      	cmp	r3, r7
 80185d6:	dac8      	bge.n	801856a <__gethex+0x3c0>
 80185d8:	e6dc      	b.n	8018394 <__gethex+0x1ea>
 80185da:	241f      	movs	r4, #31
 80185dc:	9a01      	ldr	r2, [sp, #4]
 80185de:	2601      	movs	r6, #1
 80185e0:	4022      	ands	r2, r4
 80185e2:	1e14      	subs	r4, r2, #0
 80185e4:	d0c1      	beq.n	801856a <__gethex+0x3c0>
 80185e6:	9a04      	ldr	r2, [sp, #16]
 80185e8:	189b      	adds	r3, r3, r2
 80185ea:	3b04      	subs	r3, #4
 80185ec:	6818      	ldr	r0, [r3, #0]
 80185ee:	f000 f9a1 	bl	8018934 <__hi0bits>
 80185f2:	2120      	movs	r1, #32
 80185f4:	1b0c      	subs	r4, r1, r4
 80185f6:	42a0      	cmp	r0, r4
 80185f8:	dbe4      	blt.n	80185c4 <__gethex+0x41a>
 80185fa:	e7b6      	b.n	801856a <__gethex+0x3c0>
 80185fc:	0006      	movs	r6, r0
 80185fe:	e7b4      	b.n	801856a <__gethex+0x3c0>

08018600 <L_shift>:
 8018600:	2308      	movs	r3, #8
 8018602:	b570      	push	{r4, r5, r6, lr}
 8018604:	2520      	movs	r5, #32
 8018606:	1a9a      	subs	r2, r3, r2
 8018608:	0092      	lsls	r2, r2, #2
 801860a:	1aad      	subs	r5, r5, r2
 801860c:	6843      	ldr	r3, [r0, #4]
 801860e:	6806      	ldr	r6, [r0, #0]
 8018610:	001c      	movs	r4, r3
 8018612:	40ac      	lsls	r4, r5
 8018614:	40d3      	lsrs	r3, r2
 8018616:	4334      	orrs	r4, r6
 8018618:	6004      	str	r4, [r0, #0]
 801861a:	6043      	str	r3, [r0, #4]
 801861c:	3004      	adds	r0, #4
 801861e:	4288      	cmp	r0, r1
 8018620:	d3f4      	bcc.n	801860c <L_shift+0xc>
 8018622:	bd70      	pop	{r4, r5, r6, pc}

08018624 <__match>:
 8018624:	b530      	push	{r4, r5, lr}
 8018626:	6803      	ldr	r3, [r0, #0]
 8018628:	780c      	ldrb	r4, [r1, #0]
 801862a:	3301      	adds	r3, #1
 801862c:	2c00      	cmp	r4, #0
 801862e:	d102      	bne.n	8018636 <__match+0x12>
 8018630:	6003      	str	r3, [r0, #0]
 8018632:	2001      	movs	r0, #1
 8018634:	bd30      	pop	{r4, r5, pc}
 8018636:	781a      	ldrb	r2, [r3, #0]
 8018638:	0015      	movs	r5, r2
 801863a:	3d41      	subs	r5, #65	; 0x41
 801863c:	2d19      	cmp	r5, #25
 801863e:	d800      	bhi.n	8018642 <__match+0x1e>
 8018640:	3220      	adds	r2, #32
 8018642:	3101      	adds	r1, #1
 8018644:	42a2      	cmp	r2, r4
 8018646:	d0ef      	beq.n	8018628 <__match+0x4>
 8018648:	2000      	movs	r0, #0
 801864a:	e7f3      	b.n	8018634 <__match+0x10>

0801864c <__hexnan>:
 801864c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801864e:	b08b      	sub	sp, #44	; 0x2c
 8018650:	9201      	str	r2, [sp, #4]
 8018652:	680a      	ldr	r2, [r1, #0]
 8018654:	9901      	ldr	r1, [sp, #4]
 8018656:	1153      	asrs	r3, r2, #5
 8018658:	009b      	lsls	r3, r3, #2
 801865a:	18cb      	adds	r3, r1, r3
 801865c:	9304      	str	r3, [sp, #16]
 801865e:	231f      	movs	r3, #31
 8018660:	401a      	ands	r2, r3
 8018662:	9008      	str	r0, [sp, #32]
 8018664:	9206      	str	r2, [sp, #24]
 8018666:	d002      	beq.n	801866e <__hexnan+0x22>
 8018668:	9b04      	ldr	r3, [sp, #16]
 801866a:	3304      	adds	r3, #4
 801866c:	9304      	str	r3, [sp, #16]
 801866e:	9b04      	ldr	r3, [sp, #16]
 8018670:	2500      	movs	r5, #0
 8018672:	1f1e      	subs	r6, r3, #4
 8018674:	0037      	movs	r7, r6
 8018676:	0034      	movs	r4, r6
 8018678:	9b08      	ldr	r3, [sp, #32]
 801867a:	6035      	str	r5, [r6, #0]
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	9507      	str	r5, [sp, #28]
 8018680:	9305      	str	r3, [sp, #20]
 8018682:	9502      	str	r5, [sp, #8]
 8018684:	9b05      	ldr	r3, [sp, #20]
 8018686:	3301      	adds	r3, #1
 8018688:	9309      	str	r3, [sp, #36]	; 0x24
 801868a:	9b05      	ldr	r3, [sp, #20]
 801868c:	785b      	ldrb	r3, [r3, #1]
 801868e:	9303      	str	r3, [sp, #12]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d028      	beq.n	80186e6 <__hexnan+0x9a>
 8018694:	9803      	ldr	r0, [sp, #12]
 8018696:	f7ff fd73 	bl	8018180 <__hexdig_fun>
 801869a:	2800      	cmp	r0, #0
 801869c:	d145      	bne.n	801872a <__hexnan+0xde>
 801869e:	9b03      	ldr	r3, [sp, #12]
 80186a0:	2b20      	cmp	r3, #32
 80186a2:	d819      	bhi.n	80186d8 <__hexnan+0x8c>
 80186a4:	9b02      	ldr	r3, [sp, #8]
 80186a6:	9a07      	ldr	r2, [sp, #28]
 80186a8:	4293      	cmp	r3, r2
 80186aa:	dd12      	ble.n	80186d2 <__hexnan+0x86>
 80186ac:	42bc      	cmp	r4, r7
 80186ae:	d206      	bcs.n	80186be <__hexnan+0x72>
 80186b0:	2d07      	cmp	r5, #7
 80186b2:	dc04      	bgt.n	80186be <__hexnan+0x72>
 80186b4:	002a      	movs	r2, r5
 80186b6:	0039      	movs	r1, r7
 80186b8:	0020      	movs	r0, r4
 80186ba:	f7ff ffa1 	bl	8018600 <L_shift>
 80186be:	9b01      	ldr	r3, [sp, #4]
 80186c0:	2508      	movs	r5, #8
 80186c2:	429c      	cmp	r4, r3
 80186c4:	d905      	bls.n	80186d2 <__hexnan+0x86>
 80186c6:	1f27      	subs	r7, r4, #4
 80186c8:	2500      	movs	r5, #0
 80186ca:	003c      	movs	r4, r7
 80186cc:	9b02      	ldr	r3, [sp, #8]
 80186ce:	603d      	str	r5, [r7, #0]
 80186d0:	9307      	str	r3, [sp, #28]
 80186d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186d4:	9305      	str	r3, [sp, #20]
 80186d6:	e7d5      	b.n	8018684 <__hexnan+0x38>
 80186d8:	9b03      	ldr	r3, [sp, #12]
 80186da:	2b29      	cmp	r3, #41	; 0x29
 80186dc:	d14a      	bne.n	8018774 <__hexnan+0x128>
 80186de:	9b05      	ldr	r3, [sp, #20]
 80186e0:	9a08      	ldr	r2, [sp, #32]
 80186e2:	3302      	adds	r3, #2
 80186e4:	6013      	str	r3, [r2, #0]
 80186e6:	9b02      	ldr	r3, [sp, #8]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d043      	beq.n	8018774 <__hexnan+0x128>
 80186ec:	42bc      	cmp	r4, r7
 80186ee:	d206      	bcs.n	80186fe <__hexnan+0xb2>
 80186f0:	2d07      	cmp	r5, #7
 80186f2:	dc04      	bgt.n	80186fe <__hexnan+0xb2>
 80186f4:	002a      	movs	r2, r5
 80186f6:	0039      	movs	r1, r7
 80186f8:	0020      	movs	r0, r4
 80186fa:	f7ff ff81 	bl	8018600 <L_shift>
 80186fe:	9b01      	ldr	r3, [sp, #4]
 8018700:	429c      	cmp	r4, r3
 8018702:	d926      	bls.n	8018752 <__hexnan+0x106>
 8018704:	cc04      	ldmia	r4!, {r2}
 8018706:	601a      	str	r2, [r3, #0]
 8018708:	3304      	adds	r3, #4
 801870a:	42a6      	cmp	r6, r4
 801870c:	d2fa      	bcs.n	8018704 <__hexnan+0xb8>
 801870e:	2200      	movs	r2, #0
 8018710:	c304      	stmia	r3!, {r2}
 8018712:	429e      	cmp	r6, r3
 8018714:	d2fc      	bcs.n	8018710 <__hexnan+0xc4>
 8018716:	6833      	ldr	r3, [r6, #0]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d104      	bne.n	8018726 <__hexnan+0xda>
 801871c:	9b01      	ldr	r3, [sp, #4]
 801871e:	429e      	cmp	r6, r3
 8018720:	d126      	bne.n	8018770 <__hexnan+0x124>
 8018722:	2301      	movs	r3, #1
 8018724:	6033      	str	r3, [r6, #0]
 8018726:	2005      	movs	r0, #5
 8018728:	e025      	b.n	8018776 <__hexnan+0x12a>
 801872a:	9b02      	ldr	r3, [sp, #8]
 801872c:	3501      	adds	r5, #1
 801872e:	3301      	adds	r3, #1
 8018730:	9302      	str	r3, [sp, #8]
 8018732:	2d08      	cmp	r5, #8
 8018734:	dd06      	ble.n	8018744 <__hexnan+0xf8>
 8018736:	9b01      	ldr	r3, [sp, #4]
 8018738:	429c      	cmp	r4, r3
 801873a:	d9ca      	bls.n	80186d2 <__hexnan+0x86>
 801873c:	2300      	movs	r3, #0
 801873e:	2501      	movs	r5, #1
 8018740:	3c04      	subs	r4, #4
 8018742:	6023      	str	r3, [r4, #0]
 8018744:	220f      	movs	r2, #15
 8018746:	6823      	ldr	r3, [r4, #0]
 8018748:	4010      	ands	r0, r2
 801874a:	011b      	lsls	r3, r3, #4
 801874c:	4318      	orrs	r0, r3
 801874e:	6020      	str	r0, [r4, #0]
 8018750:	e7bf      	b.n	80186d2 <__hexnan+0x86>
 8018752:	9b06      	ldr	r3, [sp, #24]
 8018754:	2b00      	cmp	r3, #0
 8018756:	d0de      	beq.n	8018716 <__hexnan+0xca>
 8018758:	2120      	movs	r1, #32
 801875a:	9a06      	ldr	r2, [sp, #24]
 801875c:	9b04      	ldr	r3, [sp, #16]
 801875e:	1a89      	subs	r1, r1, r2
 8018760:	2201      	movs	r2, #1
 8018762:	4252      	negs	r2, r2
 8018764:	40ca      	lsrs	r2, r1
 8018766:	3b04      	subs	r3, #4
 8018768:	6819      	ldr	r1, [r3, #0]
 801876a:	400a      	ands	r2, r1
 801876c:	601a      	str	r2, [r3, #0]
 801876e:	e7d2      	b.n	8018716 <__hexnan+0xca>
 8018770:	3e04      	subs	r6, #4
 8018772:	e7d0      	b.n	8018716 <__hexnan+0xca>
 8018774:	2004      	movs	r0, #4
 8018776:	b00b      	add	sp, #44	; 0x2c
 8018778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801877a <__localeconv_l>:
 801877a:	30f0      	adds	r0, #240	; 0xf0
 801877c:	4770      	bx	lr
	...

08018780 <_localeconv_r>:
 8018780:	4b03      	ldr	r3, [pc, #12]	; (8018790 <_localeconv_r+0x10>)
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8018786:	2800      	cmp	r0, #0
 8018788:	d100      	bne.n	801878c <_localeconv_r+0xc>
 801878a:	4802      	ldr	r0, [pc, #8]	; (8018794 <_localeconv_r+0x14>)
 801878c:	30f0      	adds	r0, #240	; 0xf0
 801878e:	4770      	bx	lr
 8018790:	20000118 	.word	0x20000118
 8018794:	20000548 	.word	0x20000548

08018798 <__retarget_lock_acquire_recursive>:
 8018798:	4770      	bx	lr

0801879a <__retarget_lock_release_recursive>:
 801879a:	4770      	bx	lr

0801879c <memchr>:
 801879c:	b2c9      	uxtb	r1, r1
 801879e:	1882      	adds	r2, r0, r2
 80187a0:	4290      	cmp	r0, r2
 80187a2:	d101      	bne.n	80187a8 <memchr+0xc>
 80187a4:	2000      	movs	r0, #0
 80187a6:	4770      	bx	lr
 80187a8:	7803      	ldrb	r3, [r0, #0]
 80187aa:	428b      	cmp	r3, r1
 80187ac:	d0fb      	beq.n	80187a6 <memchr+0xa>
 80187ae:	3001      	adds	r0, #1
 80187b0:	e7f6      	b.n	80187a0 <memchr+0x4>

080187b2 <memmove>:
 80187b2:	b510      	push	{r4, lr}
 80187b4:	4288      	cmp	r0, r1
 80187b6:	d902      	bls.n	80187be <memmove+0xc>
 80187b8:	188b      	adds	r3, r1, r2
 80187ba:	4298      	cmp	r0, r3
 80187bc:	d303      	bcc.n	80187c6 <memmove+0x14>
 80187be:	2300      	movs	r3, #0
 80187c0:	e007      	b.n	80187d2 <memmove+0x20>
 80187c2:	5c8b      	ldrb	r3, [r1, r2]
 80187c4:	5483      	strb	r3, [r0, r2]
 80187c6:	3a01      	subs	r2, #1
 80187c8:	d2fb      	bcs.n	80187c2 <memmove+0x10>
 80187ca:	bd10      	pop	{r4, pc}
 80187cc:	5ccc      	ldrb	r4, [r1, r3]
 80187ce:	54c4      	strb	r4, [r0, r3]
 80187d0:	3301      	adds	r3, #1
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d1fa      	bne.n	80187cc <memmove+0x1a>
 80187d6:	e7f8      	b.n	80187ca <memmove+0x18>

080187d8 <_Balloc>:
 80187d8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80187da:	b570      	push	{r4, r5, r6, lr}
 80187dc:	0004      	movs	r4, r0
 80187de:	000d      	movs	r5, r1
 80187e0:	2b00      	cmp	r3, #0
 80187e2:	d012      	beq.n	801880a <_Balloc+0x32>
 80187e4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80187e6:	00ab      	lsls	r3, r5, #2
 80187e8:	18d3      	adds	r3, r2, r3
 80187ea:	6818      	ldr	r0, [r3, #0]
 80187ec:	2800      	cmp	r0, #0
 80187ee:	d115      	bne.n	801881c <_Balloc+0x44>
 80187f0:	2101      	movs	r1, #1
 80187f2:	000e      	movs	r6, r1
 80187f4:	40ae      	lsls	r6, r5
 80187f6:	1d72      	adds	r2, r6, #5
 80187f8:	0092      	lsls	r2, r2, #2
 80187fa:	0020      	movs	r0, r4
 80187fc:	f000 fcbe 	bl	801917c <_calloc_r>
 8018800:	2800      	cmp	r0, #0
 8018802:	d009      	beq.n	8018818 <_Balloc+0x40>
 8018804:	6045      	str	r5, [r0, #4]
 8018806:	6086      	str	r6, [r0, #8]
 8018808:	e00a      	b.n	8018820 <_Balloc+0x48>
 801880a:	2221      	movs	r2, #33	; 0x21
 801880c:	2104      	movs	r1, #4
 801880e:	f000 fcb5 	bl	801917c <_calloc_r>
 8018812:	64e0      	str	r0, [r4, #76]	; 0x4c
 8018814:	2800      	cmp	r0, #0
 8018816:	d1e5      	bne.n	80187e4 <_Balloc+0xc>
 8018818:	2000      	movs	r0, #0
 801881a:	bd70      	pop	{r4, r5, r6, pc}
 801881c:	6802      	ldr	r2, [r0, #0]
 801881e:	601a      	str	r2, [r3, #0]
 8018820:	2300      	movs	r3, #0
 8018822:	6103      	str	r3, [r0, #16]
 8018824:	60c3      	str	r3, [r0, #12]
 8018826:	e7f8      	b.n	801881a <_Balloc+0x42>

08018828 <_Bfree>:
 8018828:	2900      	cmp	r1, #0
 801882a:	d006      	beq.n	801883a <_Bfree+0x12>
 801882c:	684b      	ldr	r3, [r1, #4]
 801882e:	009a      	lsls	r2, r3, #2
 8018830:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018832:	189b      	adds	r3, r3, r2
 8018834:	681a      	ldr	r2, [r3, #0]
 8018836:	600a      	str	r2, [r1, #0]
 8018838:	6019      	str	r1, [r3, #0]
 801883a:	4770      	bx	lr

0801883c <__multadd>:
 801883c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801883e:	001e      	movs	r6, r3
 8018840:	2314      	movs	r3, #20
 8018842:	469c      	mov	ip, r3
 8018844:	0007      	movs	r7, r0
 8018846:	000c      	movs	r4, r1
 8018848:	2000      	movs	r0, #0
 801884a:	690d      	ldr	r5, [r1, #16]
 801884c:	448c      	add	ip, r1
 801884e:	4663      	mov	r3, ip
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	3001      	adds	r0, #1
 8018854:	b299      	uxth	r1, r3
 8018856:	4663      	mov	r3, ip
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	4351      	muls	r1, r2
 801885c:	0c1b      	lsrs	r3, r3, #16
 801885e:	4353      	muls	r3, r2
 8018860:	1989      	adds	r1, r1, r6
 8018862:	0c0e      	lsrs	r6, r1, #16
 8018864:	199b      	adds	r3, r3, r6
 8018866:	b289      	uxth	r1, r1
 8018868:	0c1e      	lsrs	r6, r3, #16
 801886a:	041b      	lsls	r3, r3, #16
 801886c:	185b      	adds	r3, r3, r1
 801886e:	4661      	mov	r1, ip
 8018870:	c108      	stmia	r1!, {r3}
 8018872:	468c      	mov	ip, r1
 8018874:	4285      	cmp	r5, r0
 8018876:	dcea      	bgt.n	801884e <__multadd+0x12>
 8018878:	2e00      	cmp	r6, #0
 801887a:	d01b      	beq.n	80188b4 <__multadd+0x78>
 801887c:	68a3      	ldr	r3, [r4, #8]
 801887e:	42ab      	cmp	r3, r5
 8018880:	dc12      	bgt.n	80188a8 <__multadd+0x6c>
 8018882:	6863      	ldr	r3, [r4, #4]
 8018884:	0038      	movs	r0, r7
 8018886:	1c59      	adds	r1, r3, #1
 8018888:	f7ff ffa6 	bl	80187d8 <_Balloc>
 801888c:	0021      	movs	r1, r4
 801888e:	6923      	ldr	r3, [r4, #16]
 8018890:	9001      	str	r0, [sp, #4]
 8018892:	1c9a      	adds	r2, r3, #2
 8018894:	0092      	lsls	r2, r2, #2
 8018896:	310c      	adds	r1, #12
 8018898:	300c      	adds	r0, #12
 801889a:	f7fc f884 	bl	80149a6 <memcpy>
 801889e:	0021      	movs	r1, r4
 80188a0:	0038      	movs	r0, r7
 80188a2:	f7ff ffc1 	bl	8018828 <_Bfree>
 80188a6:	9c01      	ldr	r4, [sp, #4]
 80188a8:	1d2b      	adds	r3, r5, #4
 80188aa:	009b      	lsls	r3, r3, #2
 80188ac:	18e3      	adds	r3, r4, r3
 80188ae:	3501      	adds	r5, #1
 80188b0:	605e      	str	r6, [r3, #4]
 80188b2:	6125      	str	r5, [r4, #16]
 80188b4:	0020      	movs	r0, r4
 80188b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080188b8 <__s2b>:
 80188b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80188ba:	0006      	movs	r6, r0
 80188bc:	0018      	movs	r0, r3
 80188be:	000c      	movs	r4, r1
 80188c0:	3008      	adds	r0, #8
 80188c2:	2109      	movs	r1, #9
 80188c4:	9301      	str	r3, [sp, #4]
 80188c6:	0015      	movs	r5, r2
 80188c8:	f7e7 fccc 	bl	8000264 <__divsi3>
 80188cc:	2301      	movs	r3, #1
 80188ce:	2100      	movs	r1, #0
 80188d0:	4283      	cmp	r3, r0
 80188d2:	db1f      	blt.n	8018914 <__s2b+0x5c>
 80188d4:	0030      	movs	r0, r6
 80188d6:	f7ff ff7f 	bl	80187d8 <_Balloc>
 80188da:	9b08      	ldr	r3, [sp, #32]
 80188dc:	6143      	str	r3, [r0, #20]
 80188de:	2301      	movs	r3, #1
 80188e0:	6103      	str	r3, [r0, #16]
 80188e2:	2d09      	cmp	r5, #9
 80188e4:	dd19      	ble.n	801891a <__s2b+0x62>
 80188e6:	0023      	movs	r3, r4
 80188e8:	3309      	adds	r3, #9
 80188ea:	001f      	movs	r7, r3
 80188ec:	9300      	str	r3, [sp, #0]
 80188ee:	1964      	adds	r4, r4, r5
 80188f0:	783b      	ldrb	r3, [r7, #0]
 80188f2:	0001      	movs	r1, r0
 80188f4:	3b30      	subs	r3, #48	; 0x30
 80188f6:	220a      	movs	r2, #10
 80188f8:	0030      	movs	r0, r6
 80188fa:	3701      	adds	r7, #1
 80188fc:	f7ff ff9e 	bl	801883c <__multadd>
 8018900:	42a7      	cmp	r7, r4
 8018902:	d1f5      	bne.n	80188f0 <__s2b+0x38>
 8018904:	9b00      	ldr	r3, [sp, #0]
 8018906:	195c      	adds	r4, r3, r5
 8018908:	3c08      	subs	r4, #8
 801890a:	002f      	movs	r7, r5
 801890c:	9b01      	ldr	r3, [sp, #4]
 801890e:	429f      	cmp	r7, r3
 8018910:	db06      	blt.n	8018920 <__s2b+0x68>
 8018912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018914:	005b      	lsls	r3, r3, #1
 8018916:	3101      	adds	r1, #1
 8018918:	e7da      	b.n	80188d0 <__s2b+0x18>
 801891a:	340a      	adds	r4, #10
 801891c:	2509      	movs	r5, #9
 801891e:	e7f4      	b.n	801890a <__s2b+0x52>
 8018920:	1b63      	subs	r3, r4, r5
 8018922:	5ddb      	ldrb	r3, [r3, r7]
 8018924:	0001      	movs	r1, r0
 8018926:	3b30      	subs	r3, #48	; 0x30
 8018928:	220a      	movs	r2, #10
 801892a:	0030      	movs	r0, r6
 801892c:	f7ff ff86 	bl	801883c <__multadd>
 8018930:	3701      	adds	r7, #1
 8018932:	e7eb      	b.n	801890c <__s2b+0x54>

08018934 <__hi0bits>:
 8018934:	0003      	movs	r3, r0
 8018936:	0c02      	lsrs	r2, r0, #16
 8018938:	2000      	movs	r0, #0
 801893a:	4282      	cmp	r2, r0
 801893c:	d101      	bne.n	8018942 <__hi0bits+0xe>
 801893e:	041b      	lsls	r3, r3, #16
 8018940:	3010      	adds	r0, #16
 8018942:	0e1a      	lsrs	r2, r3, #24
 8018944:	d101      	bne.n	801894a <__hi0bits+0x16>
 8018946:	3008      	adds	r0, #8
 8018948:	021b      	lsls	r3, r3, #8
 801894a:	0f1a      	lsrs	r2, r3, #28
 801894c:	d101      	bne.n	8018952 <__hi0bits+0x1e>
 801894e:	3004      	adds	r0, #4
 8018950:	011b      	lsls	r3, r3, #4
 8018952:	0f9a      	lsrs	r2, r3, #30
 8018954:	d101      	bne.n	801895a <__hi0bits+0x26>
 8018956:	3002      	adds	r0, #2
 8018958:	009b      	lsls	r3, r3, #2
 801895a:	2b00      	cmp	r3, #0
 801895c:	db03      	blt.n	8018966 <__hi0bits+0x32>
 801895e:	3001      	adds	r0, #1
 8018960:	005b      	lsls	r3, r3, #1
 8018962:	d400      	bmi.n	8018966 <__hi0bits+0x32>
 8018964:	2020      	movs	r0, #32
 8018966:	4770      	bx	lr

08018968 <__lo0bits>:
 8018968:	2207      	movs	r2, #7
 801896a:	6803      	ldr	r3, [r0, #0]
 801896c:	b510      	push	{r4, lr}
 801896e:	0001      	movs	r1, r0
 8018970:	401a      	ands	r2, r3
 8018972:	d00d      	beq.n	8018990 <__lo0bits+0x28>
 8018974:	2401      	movs	r4, #1
 8018976:	2000      	movs	r0, #0
 8018978:	4223      	tst	r3, r4
 801897a:	d105      	bne.n	8018988 <__lo0bits+0x20>
 801897c:	3002      	adds	r0, #2
 801897e:	4203      	tst	r3, r0
 8018980:	d003      	beq.n	801898a <__lo0bits+0x22>
 8018982:	40e3      	lsrs	r3, r4
 8018984:	0020      	movs	r0, r4
 8018986:	600b      	str	r3, [r1, #0]
 8018988:	bd10      	pop	{r4, pc}
 801898a:	089b      	lsrs	r3, r3, #2
 801898c:	600b      	str	r3, [r1, #0]
 801898e:	e7fb      	b.n	8018988 <__lo0bits+0x20>
 8018990:	b29c      	uxth	r4, r3
 8018992:	0010      	movs	r0, r2
 8018994:	2c00      	cmp	r4, #0
 8018996:	d101      	bne.n	801899c <__lo0bits+0x34>
 8018998:	2010      	movs	r0, #16
 801899a:	0c1b      	lsrs	r3, r3, #16
 801899c:	b2da      	uxtb	r2, r3
 801899e:	2a00      	cmp	r2, #0
 80189a0:	d101      	bne.n	80189a6 <__lo0bits+0x3e>
 80189a2:	3008      	adds	r0, #8
 80189a4:	0a1b      	lsrs	r3, r3, #8
 80189a6:	071a      	lsls	r2, r3, #28
 80189a8:	d101      	bne.n	80189ae <__lo0bits+0x46>
 80189aa:	3004      	adds	r0, #4
 80189ac:	091b      	lsrs	r3, r3, #4
 80189ae:	079a      	lsls	r2, r3, #30
 80189b0:	d101      	bne.n	80189b6 <__lo0bits+0x4e>
 80189b2:	3002      	adds	r0, #2
 80189b4:	089b      	lsrs	r3, r3, #2
 80189b6:	07da      	lsls	r2, r3, #31
 80189b8:	d4e8      	bmi.n	801898c <__lo0bits+0x24>
 80189ba:	085b      	lsrs	r3, r3, #1
 80189bc:	d001      	beq.n	80189c2 <__lo0bits+0x5a>
 80189be:	3001      	adds	r0, #1
 80189c0:	e7e4      	b.n	801898c <__lo0bits+0x24>
 80189c2:	2020      	movs	r0, #32
 80189c4:	e7e0      	b.n	8018988 <__lo0bits+0x20>

080189c6 <__i2b>:
 80189c6:	b510      	push	{r4, lr}
 80189c8:	000c      	movs	r4, r1
 80189ca:	2101      	movs	r1, #1
 80189cc:	f7ff ff04 	bl	80187d8 <_Balloc>
 80189d0:	2301      	movs	r3, #1
 80189d2:	6144      	str	r4, [r0, #20]
 80189d4:	6103      	str	r3, [r0, #16]
 80189d6:	bd10      	pop	{r4, pc}

080189d8 <__multiply>:
 80189d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189da:	690b      	ldr	r3, [r1, #16]
 80189dc:	0014      	movs	r4, r2
 80189de:	6912      	ldr	r2, [r2, #16]
 80189e0:	b089      	sub	sp, #36	; 0x24
 80189e2:	000d      	movs	r5, r1
 80189e4:	4293      	cmp	r3, r2
 80189e6:	da01      	bge.n	80189ec <__multiply+0x14>
 80189e8:	0025      	movs	r5, r4
 80189ea:	000c      	movs	r4, r1
 80189ec:	692f      	ldr	r7, [r5, #16]
 80189ee:	6926      	ldr	r6, [r4, #16]
 80189f0:	6869      	ldr	r1, [r5, #4]
 80189f2:	19bb      	adds	r3, r7, r6
 80189f4:	9302      	str	r3, [sp, #8]
 80189f6:	68ab      	ldr	r3, [r5, #8]
 80189f8:	19ba      	adds	r2, r7, r6
 80189fa:	4293      	cmp	r3, r2
 80189fc:	da00      	bge.n	8018a00 <__multiply+0x28>
 80189fe:	3101      	adds	r1, #1
 8018a00:	f7ff feea 	bl	80187d8 <_Balloc>
 8018a04:	0002      	movs	r2, r0
 8018a06:	19bb      	adds	r3, r7, r6
 8018a08:	3214      	adds	r2, #20
 8018a0a:	009b      	lsls	r3, r3, #2
 8018a0c:	18d3      	adds	r3, r2, r3
 8018a0e:	469c      	mov	ip, r3
 8018a10:	2100      	movs	r1, #0
 8018a12:	0013      	movs	r3, r2
 8018a14:	9004      	str	r0, [sp, #16]
 8018a16:	4563      	cmp	r3, ip
 8018a18:	d31d      	bcc.n	8018a56 <__multiply+0x7e>
 8018a1a:	3514      	adds	r5, #20
 8018a1c:	00bf      	lsls	r7, r7, #2
 8018a1e:	19eb      	adds	r3, r5, r7
 8018a20:	3414      	adds	r4, #20
 8018a22:	00b6      	lsls	r6, r6, #2
 8018a24:	9305      	str	r3, [sp, #20]
 8018a26:	19a3      	adds	r3, r4, r6
 8018a28:	9503      	str	r5, [sp, #12]
 8018a2a:	9401      	str	r4, [sp, #4]
 8018a2c:	9307      	str	r3, [sp, #28]
 8018a2e:	9b07      	ldr	r3, [sp, #28]
 8018a30:	9901      	ldr	r1, [sp, #4]
 8018a32:	4299      	cmp	r1, r3
 8018a34:	d311      	bcc.n	8018a5a <__multiply+0x82>
 8018a36:	9b02      	ldr	r3, [sp, #8]
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	dd06      	ble.n	8018a4a <__multiply+0x72>
 8018a3c:	2304      	movs	r3, #4
 8018a3e:	425b      	negs	r3, r3
 8018a40:	449c      	add	ip, r3
 8018a42:	4663      	mov	r3, ip
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	2b00      	cmp	r3, #0
 8018a48:	d051      	beq.n	8018aee <__multiply+0x116>
 8018a4a:	9b04      	ldr	r3, [sp, #16]
 8018a4c:	9a02      	ldr	r2, [sp, #8]
 8018a4e:	0018      	movs	r0, r3
 8018a50:	611a      	str	r2, [r3, #16]
 8018a52:	b009      	add	sp, #36	; 0x24
 8018a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a56:	c302      	stmia	r3!, {r1}
 8018a58:	e7dd      	b.n	8018a16 <__multiply+0x3e>
 8018a5a:	9b01      	ldr	r3, [sp, #4]
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	b298      	uxth	r0, r3
 8018a60:	2800      	cmp	r0, #0
 8018a62:	d01c      	beq.n	8018a9e <__multiply+0xc6>
 8018a64:	0015      	movs	r5, r2
 8018a66:	2600      	movs	r6, #0
 8018a68:	9f03      	ldr	r7, [sp, #12]
 8018a6a:	cf02      	ldmia	r7!, {r1}
 8018a6c:	682c      	ldr	r4, [r5, #0]
 8018a6e:	b28b      	uxth	r3, r1
 8018a70:	4343      	muls	r3, r0
 8018a72:	0c09      	lsrs	r1, r1, #16
 8018a74:	4341      	muls	r1, r0
 8018a76:	b2a4      	uxth	r4, r4
 8018a78:	191b      	adds	r3, r3, r4
 8018a7a:	199b      	adds	r3, r3, r6
 8018a7c:	000e      	movs	r6, r1
 8018a7e:	6829      	ldr	r1, [r5, #0]
 8018a80:	9506      	str	r5, [sp, #24]
 8018a82:	0c09      	lsrs	r1, r1, #16
 8018a84:	1871      	adds	r1, r6, r1
 8018a86:	0c1e      	lsrs	r6, r3, #16
 8018a88:	1989      	adds	r1, r1, r6
 8018a8a:	0c0e      	lsrs	r6, r1, #16
 8018a8c:	b29b      	uxth	r3, r3
 8018a8e:	0409      	lsls	r1, r1, #16
 8018a90:	430b      	orrs	r3, r1
 8018a92:	c508      	stmia	r5!, {r3}
 8018a94:	9b05      	ldr	r3, [sp, #20]
 8018a96:	42bb      	cmp	r3, r7
 8018a98:	d8e7      	bhi.n	8018a6a <__multiply+0x92>
 8018a9a:	9b06      	ldr	r3, [sp, #24]
 8018a9c:	605e      	str	r6, [r3, #4]
 8018a9e:	9b01      	ldr	r3, [sp, #4]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	0c1d      	lsrs	r5, r3, #16
 8018aa4:	d01e      	beq.n	8018ae4 <__multiply+0x10c>
 8018aa6:	0010      	movs	r0, r2
 8018aa8:	2700      	movs	r7, #0
 8018aaa:	6813      	ldr	r3, [r2, #0]
 8018aac:	9e03      	ldr	r6, [sp, #12]
 8018aae:	6831      	ldr	r1, [r6, #0]
 8018ab0:	6804      	ldr	r4, [r0, #0]
 8018ab2:	b289      	uxth	r1, r1
 8018ab4:	4369      	muls	r1, r5
 8018ab6:	0c24      	lsrs	r4, r4, #16
 8018ab8:	1909      	adds	r1, r1, r4
 8018aba:	19c9      	adds	r1, r1, r7
 8018abc:	040f      	lsls	r7, r1, #16
 8018abe:	b29b      	uxth	r3, r3
 8018ac0:	433b      	orrs	r3, r7
 8018ac2:	6003      	str	r3, [r0, #0]
 8018ac4:	ce80      	ldmia	r6!, {r7}
 8018ac6:	6843      	ldr	r3, [r0, #4]
 8018ac8:	0c3f      	lsrs	r7, r7, #16
 8018aca:	436f      	muls	r7, r5
 8018acc:	b29b      	uxth	r3, r3
 8018ace:	18fb      	adds	r3, r7, r3
 8018ad0:	0c09      	lsrs	r1, r1, #16
 8018ad2:	185b      	adds	r3, r3, r1
 8018ad4:	9905      	ldr	r1, [sp, #20]
 8018ad6:	9006      	str	r0, [sp, #24]
 8018ad8:	0c1f      	lsrs	r7, r3, #16
 8018ada:	3004      	adds	r0, #4
 8018adc:	42b1      	cmp	r1, r6
 8018ade:	d8e6      	bhi.n	8018aae <__multiply+0xd6>
 8018ae0:	9906      	ldr	r1, [sp, #24]
 8018ae2:	604b      	str	r3, [r1, #4]
 8018ae4:	9b01      	ldr	r3, [sp, #4]
 8018ae6:	3204      	adds	r2, #4
 8018ae8:	3304      	adds	r3, #4
 8018aea:	9301      	str	r3, [sp, #4]
 8018aec:	e79f      	b.n	8018a2e <__multiply+0x56>
 8018aee:	9b02      	ldr	r3, [sp, #8]
 8018af0:	3b01      	subs	r3, #1
 8018af2:	9302      	str	r3, [sp, #8]
 8018af4:	e79f      	b.n	8018a36 <__multiply+0x5e>
	...

08018af8 <__pow5mult>:
 8018af8:	2303      	movs	r3, #3
 8018afa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018afc:	4013      	ands	r3, r2
 8018afe:	0006      	movs	r6, r0
 8018b00:	000f      	movs	r7, r1
 8018b02:	0015      	movs	r5, r2
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d008      	beq.n	8018b1a <__pow5mult+0x22>
 8018b08:	491a      	ldr	r1, [pc, #104]	; (8018b74 <__pow5mult+0x7c>)
 8018b0a:	3b01      	subs	r3, #1
 8018b0c:	009a      	lsls	r2, r3, #2
 8018b0e:	5852      	ldr	r2, [r2, r1]
 8018b10:	2300      	movs	r3, #0
 8018b12:	0039      	movs	r1, r7
 8018b14:	f7ff fe92 	bl	801883c <__multadd>
 8018b18:	0007      	movs	r7, r0
 8018b1a:	10ad      	asrs	r5, r5, #2
 8018b1c:	d027      	beq.n	8018b6e <__pow5mult+0x76>
 8018b1e:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8018b20:	2c00      	cmp	r4, #0
 8018b22:	d107      	bne.n	8018b34 <__pow5mult+0x3c>
 8018b24:	4914      	ldr	r1, [pc, #80]	; (8018b78 <__pow5mult+0x80>)
 8018b26:	0030      	movs	r0, r6
 8018b28:	f7ff ff4d 	bl	80189c6 <__i2b>
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	0004      	movs	r4, r0
 8018b30:	64b0      	str	r0, [r6, #72]	; 0x48
 8018b32:	6003      	str	r3, [r0, #0]
 8018b34:	2301      	movs	r3, #1
 8018b36:	421d      	tst	r5, r3
 8018b38:	d00a      	beq.n	8018b50 <__pow5mult+0x58>
 8018b3a:	0039      	movs	r1, r7
 8018b3c:	0022      	movs	r2, r4
 8018b3e:	0030      	movs	r0, r6
 8018b40:	f7ff ff4a 	bl	80189d8 <__multiply>
 8018b44:	0039      	movs	r1, r7
 8018b46:	9001      	str	r0, [sp, #4]
 8018b48:	0030      	movs	r0, r6
 8018b4a:	f7ff fe6d 	bl	8018828 <_Bfree>
 8018b4e:	9f01      	ldr	r7, [sp, #4]
 8018b50:	106d      	asrs	r5, r5, #1
 8018b52:	d00c      	beq.n	8018b6e <__pow5mult+0x76>
 8018b54:	6820      	ldr	r0, [r4, #0]
 8018b56:	2800      	cmp	r0, #0
 8018b58:	d107      	bne.n	8018b6a <__pow5mult+0x72>
 8018b5a:	0022      	movs	r2, r4
 8018b5c:	0021      	movs	r1, r4
 8018b5e:	0030      	movs	r0, r6
 8018b60:	f7ff ff3a 	bl	80189d8 <__multiply>
 8018b64:	2300      	movs	r3, #0
 8018b66:	6020      	str	r0, [r4, #0]
 8018b68:	6003      	str	r3, [r0, #0]
 8018b6a:	0004      	movs	r4, r0
 8018b6c:	e7e2      	b.n	8018b34 <__pow5mult+0x3c>
 8018b6e:	0038      	movs	r0, r7
 8018b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018b72:	46c0      	nop			; (mov r8, r8)
 8018b74:	0801c5f0 	.word	0x0801c5f0
 8018b78:	00000271 	.word	0x00000271

08018b7c <__lshift>:
 8018b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b7e:	000d      	movs	r5, r1
 8018b80:	0017      	movs	r7, r2
 8018b82:	692b      	ldr	r3, [r5, #16]
 8018b84:	1154      	asrs	r4, r2, #5
 8018b86:	b085      	sub	sp, #20
 8018b88:	18e3      	adds	r3, r4, r3
 8018b8a:	9301      	str	r3, [sp, #4]
 8018b8c:	3301      	adds	r3, #1
 8018b8e:	9300      	str	r3, [sp, #0]
 8018b90:	6849      	ldr	r1, [r1, #4]
 8018b92:	68ab      	ldr	r3, [r5, #8]
 8018b94:	9002      	str	r0, [sp, #8]
 8018b96:	9a00      	ldr	r2, [sp, #0]
 8018b98:	4293      	cmp	r3, r2
 8018b9a:	db35      	blt.n	8018c08 <__lshift+0x8c>
 8018b9c:	9802      	ldr	r0, [sp, #8]
 8018b9e:	f7ff fe1b 	bl	80187d8 <_Balloc>
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	0002      	movs	r2, r0
 8018ba6:	0006      	movs	r6, r0
 8018ba8:	0019      	movs	r1, r3
 8018baa:	3214      	adds	r2, #20
 8018bac:	42a3      	cmp	r3, r4
 8018bae:	db2e      	blt.n	8018c0e <__lshift+0x92>
 8018bb0:	43e3      	mvns	r3, r4
 8018bb2:	17db      	asrs	r3, r3, #31
 8018bb4:	401c      	ands	r4, r3
 8018bb6:	002b      	movs	r3, r5
 8018bb8:	00a4      	lsls	r4, r4, #2
 8018bba:	1914      	adds	r4, r2, r4
 8018bbc:	692a      	ldr	r2, [r5, #16]
 8018bbe:	3314      	adds	r3, #20
 8018bc0:	0092      	lsls	r2, r2, #2
 8018bc2:	189a      	adds	r2, r3, r2
 8018bc4:	4694      	mov	ip, r2
 8018bc6:	221f      	movs	r2, #31
 8018bc8:	4017      	ands	r7, r2
 8018bca:	d024      	beq.n	8018c16 <__lshift+0x9a>
 8018bcc:	3201      	adds	r2, #1
 8018bce:	1bd2      	subs	r2, r2, r7
 8018bd0:	9203      	str	r2, [sp, #12]
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	6819      	ldr	r1, [r3, #0]
 8018bd6:	0020      	movs	r0, r4
 8018bd8:	40b9      	lsls	r1, r7
 8018bda:	430a      	orrs	r2, r1
 8018bdc:	c404      	stmia	r4!, {r2}
 8018bde:	cb04      	ldmia	r3!, {r2}
 8018be0:	9903      	ldr	r1, [sp, #12]
 8018be2:	40ca      	lsrs	r2, r1
 8018be4:	459c      	cmp	ip, r3
 8018be6:	d8f5      	bhi.n	8018bd4 <__lshift+0x58>
 8018be8:	6042      	str	r2, [r0, #4]
 8018bea:	2a00      	cmp	r2, #0
 8018bec:	d002      	beq.n	8018bf4 <__lshift+0x78>
 8018bee:	9b01      	ldr	r3, [sp, #4]
 8018bf0:	3302      	adds	r3, #2
 8018bf2:	9300      	str	r3, [sp, #0]
 8018bf4:	9b00      	ldr	r3, [sp, #0]
 8018bf6:	9802      	ldr	r0, [sp, #8]
 8018bf8:	3b01      	subs	r3, #1
 8018bfa:	6133      	str	r3, [r6, #16]
 8018bfc:	0029      	movs	r1, r5
 8018bfe:	f7ff fe13 	bl	8018828 <_Bfree>
 8018c02:	0030      	movs	r0, r6
 8018c04:	b005      	add	sp, #20
 8018c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c08:	3101      	adds	r1, #1
 8018c0a:	005b      	lsls	r3, r3, #1
 8018c0c:	e7c3      	b.n	8018b96 <__lshift+0x1a>
 8018c0e:	0098      	lsls	r0, r3, #2
 8018c10:	5011      	str	r1, [r2, r0]
 8018c12:	3301      	adds	r3, #1
 8018c14:	e7ca      	b.n	8018bac <__lshift+0x30>
 8018c16:	cb04      	ldmia	r3!, {r2}
 8018c18:	c404      	stmia	r4!, {r2}
 8018c1a:	459c      	cmp	ip, r3
 8018c1c:	d8fb      	bhi.n	8018c16 <__lshift+0x9a>
 8018c1e:	e7e9      	b.n	8018bf4 <__lshift+0x78>

08018c20 <__mcmp>:
 8018c20:	690a      	ldr	r2, [r1, #16]
 8018c22:	6903      	ldr	r3, [r0, #16]
 8018c24:	b530      	push	{r4, r5, lr}
 8018c26:	1a9b      	subs	r3, r3, r2
 8018c28:	d10d      	bne.n	8018c46 <__mcmp+0x26>
 8018c2a:	0092      	lsls	r2, r2, #2
 8018c2c:	3014      	adds	r0, #20
 8018c2e:	3114      	adds	r1, #20
 8018c30:	1884      	adds	r4, r0, r2
 8018c32:	1889      	adds	r1, r1, r2
 8018c34:	3c04      	subs	r4, #4
 8018c36:	3904      	subs	r1, #4
 8018c38:	6825      	ldr	r5, [r4, #0]
 8018c3a:	680a      	ldr	r2, [r1, #0]
 8018c3c:	4295      	cmp	r5, r2
 8018c3e:	d004      	beq.n	8018c4a <__mcmp+0x2a>
 8018c40:	2301      	movs	r3, #1
 8018c42:	4295      	cmp	r5, r2
 8018c44:	d304      	bcc.n	8018c50 <__mcmp+0x30>
 8018c46:	0018      	movs	r0, r3
 8018c48:	bd30      	pop	{r4, r5, pc}
 8018c4a:	42a0      	cmp	r0, r4
 8018c4c:	d3f2      	bcc.n	8018c34 <__mcmp+0x14>
 8018c4e:	e7fa      	b.n	8018c46 <__mcmp+0x26>
 8018c50:	425b      	negs	r3, r3
 8018c52:	e7f8      	b.n	8018c46 <__mcmp+0x26>

08018c54 <__mdiff>:
 8018c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c56:	000d      	movs	r5, r1
 8018c58:	b085      	sub	sp, #20
 8018c5a:	0007      	movs	r7, r0
 8018c5c:	0011      	movs	r1, r2
 8018c5e:	0028      	movs	r0, r5
 8018c60:	0014      	movs	r4, r2
 8018c62:	f7ff ffdd 	bl	8018c20 <__mcmp>
 8018c66:	1e06      	subs	r6, r0, #0
 8018c68:	d108      	bne.n	8018c7c <__mdiff+0x28>
 8018c6a:	0001      	movs	r1, r0
 8018c6c:	0038      	movs	r0, r7
 8018c6e:	f7ff fdb3 	bl	80187d8 <_Balloc>
 8018c72:	2301      	movs	r3, #1
 8018c74:	6146      	str	r6, [r0, #20]
 8018c76:	6103      	str	r3, [r0, #16]
 8018c78:	b005      	add	sp, #20
 8018c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	9301      	str	r3, [sp, #4]
 8018c80:	2800      	cmp	r0, #0
 8018c82:	db04      	blt.n	8018c8e <__mdiff+0x3a>
 8018c84:	0023      	movs	r3, r4
 8018c86:	002c      	movs	r4, r5
 8018c88:	001d      	movs	r5, r3
 8018c8a:	2300      	movs	r3, #0
 8018c8c:	9301      	str	r3, [sp, #4]
 8018c8e:	6861      	ldr	r1, [r4, #4]
 8018c90:	0038      	movs	r0, r7
 8018c92:	f7ff fda1 	bl	80187d8 <_Balloc>
 8018c96:	002f      	movs	r7, r5
 8018c98:	2200      	movs	r2, #0
 8018c9a:	9b01      	ldr	r3, [sp, #4]
 8018c9c:	6926      	ldr	r6, [r4, #16]
 8018c9e:	60c3      	str	r3, [r0, #12]
 8018ca0:	3414      	adds	r4, #20
 8018ca2:	00b3      	lsls	r3, r6, #2
 8018ca4:	18e3      	adds	r3, r4, r3
 8018ca6:	9302      	str	r3, [sp, #8]
 8018ca8:	692b      	ldr	r3, [r5, #16]
 8018caa:	3714      	adds	r7, #20
 8018cac:	009b      	lsls	r3, r3, #2
 8018cae:	18fb      	adds	r3, r7, r3
 8018cb0:	9303      	str	r3, [sp, #12]
 8018cb2:	0003      	movs	r3, r0
 8018cb4:	4694      	mov	ip, r2
 8018cb6:	3314      	adds	r3, #20
 8018cb8:	cc20      	ldmia	r4!, {r5}
 8018cba:	cf04      	ldmia	r7!, {r2}
 8018cbc:	9201      	str	r2, [sp, #4]
 8018cbe:	b2aa      	uxth	r2, r5
 8018cc0:	4494      	add	ip, r2
 8018cc2:	466a      	mov	r2, sp
 8018cc4:	4661      	mov	r1, ip
 8018cc6:	8892      	ldrh	r2, [r2, #4]
 8018cc8:	0c2d      	lsrs	r5, r5, #16
 8018cca:	1a8a      	subs	r2, r1, r2
 8018ccc:	9901      	ldr	r1, [sp, #4]
 8018cce:	0c09      	lsrs	r1, r1, #16
 8018cd0:	1a69      	subs	r1, r5, r1
 8018cd2:	1415      	asrs	r5, r2, #16
 8018cd4:	1949      	adds	r1, r1, r5
 8018cd6:	140d      	asrs	r5, r1, #16
 8018cd8:	b292      	uxth	r2, r2
 8018cda:	0409      	lsls	r1, r1, #16
 8018cdc:	430a      	orrs	r2, r1
 8018cde:	601a      	str	r2, [r3, #0]
 8018ce0:	9a03      	ldr	r2, [sp, #12]
 8018ce2:	46ac      	mov	ip, r5
 8018ce4:	3304      	adds	r3, #4
 8018ce6:	42ba      	cmp	r2, r7
 8018ce8:	d8e6      	bhi.n	8018cb8 <__mdiff+0x64>
 8018cea:	9902      	ldr	r1, [sp, #8]
 8018cec:	001a      	movs	r2, r3
 8018cee:	428c      	cmp	r4, r1
 8018cf0:	d305      	bcc.n	8018cfe <__mdiff+0xaa>
 8018cf2:	3a04      	subs	r2, #4
 8018cf4:	6813      	ldr	r3, [r2, #0]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d00e      	beq.n	8018d18 <__mdiff+0xc4>
 8018cfa:	6106      	str	r6, [r0, #16]
 8018cfc:	e7bc      	b.n	8018c78 <__mdiff+0x24>
 8018cfe:	cc04      	ldmia	r4!, {r2}
 8018d00:	b291      	uxth	r1, r2
 8018d02:	4461      	add	r1, ip
 8018d04:	140d      	asrs	r5, r1, #16
 8018d06:	0c12      	lsrs	r2, r2, #16
 8018d08:	1952      	adds	r2, r2, r5
 8018d0a:	1415      	asrs	r5, r2, #16
 8018d0c:	b289      	uxth	r1, r1
 8018d0e:	0412      	lsls	r2, r2, #16
 8018d10:	430a      	orrs	r2, r1
 8018d12:	46ac      	mov	ip, r5
 8018d14:	c304      	stmia	r3!, {r2}
 8018d16:	e7e8      	b.n	8018cea <__mdiff+0x96>
 8018d18:	3e01      	subs	r6, #1
 8018d1a:	e7ea      	b.n	8018cf2 <__mdiff+0x9e>

08018d1c <__ulp>:
 8018d1c:	000b      	movs	r3, r1
 8018d1e:	4910      	ldr	r1, [pc, #64]	; (8018d60 <__ulp+0x44>)
 8018d20:	b510      	push	{r4, lr}
 8018d22:	4019      	ands	r1, r3
 8018d24:	4b0f      	ldr	r3, [pc, #60]	; (8018d64 <__ulp+0x48>)
 8018d26:	18c9      	adds	r1, r1, r3
 8018d28:	2900      	cmp	r1, #0
 8018d2a:	dd04      	ble.n	8018d36 <__ulp+0x1a>
 8018d2c:	2200      	movs	r2, #0
 8018d2e:	000b      	movs	r3, r1
 8018d30:	0010      	movs	r0, r2
 8018d32:	0019      	movs	r1, r3
 8018d34:	bd10      	pop	{r4, pc}
 8018d36:	4249      	negs	r1, r1
 8018d38:	1509      	asrs	r1, r1, #20
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	2913      	cmp	r1, #19
 8018d40:	dc04      	bgt.n	8018d4c <__ulp+0x30>
 8018d42:	2080      	movs	r0, #128	; 0x80
 8018d44:	0300      	lsls	r0, r0, #12
 8018d46:	4108      	asrs	r0, r1
 8018d48:	0003      	movs	r3, r0
 8018d4a:	e7f1      	b.n	8018d30 <__ulp+0x14>
 8018d4c:	3914      	subs	r1, #20
 8018d4e:	2001      	movs	r0, #1
 8018d50:	291e      	cmp	r1, #30
 8018d52:	dc02      	bgt.n	8018d5a <__ulp+0x3e>
 8018d54:	241f      	movs	r4, #31
 8018d56:	1a61      	subs	r1, r4, r1
 8018d58:	4088      	lsls	r0, r1
 8018d5a:	0002      	movs	r2, r0
 8018d5c:	e7e8      	b.n	8018d30 <__ulp+0x14>
 8018d5e:	46c0      	nop			; (mov r8, r8)
 8018d60:	7ff00000 	.word	0x7ff00000
 8018d64:	fcc00000 	.word	0xfcc00000

08018d68 <__b2d>:
 8018d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018d6a:	0006      	movs	r6, r0
 8018d6c:	6903      	ldr	r3, [r0, #16]
 8018d6e:	3614      	adds	r6, #20
 8018d70:	009b      	lsls	r3, r3, #2
 8018d72:	18f3      	adds	r3, r6, r3
 8018d74:	1f1d      	subs	r5, r3, #4
 8018d76:	682c      	ldr	r4, [r5, #0]
 8018d78:	000f      	movs	r7, r1
 8018d7a:	0020      	movs	r0, r4
 8018d7c:	9301      	str	r3, [sp, #4]
 8018d7e:	f7ff fdd9 	bl	8018934 <__hi0bits>
 8018d82:	2320      	movs	r3, #32
 8018d84:	1a1b      	subs	r3, r3, r0
 8018d86:	603b      	str	r3, [r7, #0]
 8018d88:	491c      	ldr	r1, [pc, #112]	; (8018dfc <__b2d+0x94>)
 8018d8a:	280a      	cmp	r0, #10
 8018d8c:	dc16      	bgt.n	8018dbc <__b2d+0x54>
 8018d8e:	230b      	movs	r3, #11
 8018d90:	0027      	movs	r7, r4
 8018d92:	1a1b      	subs	r3, r3, r0
 8018d94:	40df      	lsrs	r7, r3
 8018d96:	4339      	orrs	r1, r7
 8018d98:	469c      	mov	ip, r3
 8018d9a:	000b      	movs	r3, r1
 8018d9c:	2100      	movs	r1, #0
 8018d9e:	42ae      	cmp	r6, r5
 8018da0:	d202      	bcs.n	8018da8 <__b2d+0x40>
 8018da2:	9901      	ldr	r1, [sp, #4]
 8018da4:	3908      	subs	r1, #8
 8018da6:	6809      	ldr	r1, [r1, #0]
 8018da8:	3015      	adds	r0, #21
 8018daa:	4084      	lsls	r4, r0
 8018dac:	4660      	mov	r0, ip
 8018dae:	40c1      	lsrs	r1, r0
 8018db0:	430c      	orrs	r4, r1
 8018db2:	0022      	movs	r2, r4
 8018db4:	0010      	movs	r0, r2
 8018db6:	0019      	movs	r1, r3
 8018db8:	b003      	add	sp, #12
 8018dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018dbc:	2700      	movs	r7, #0
 8018dbe:	42ae      	cmp	r6, r5
 8018dc0:	d202      	bcs.n	8018dc8 <__b2d+0x60>
 8018dc2:	9d01      	ldr	r5, [sp, #4]
 8018dc4:	3d08      	subs	r5, #8
 8018dc6:	682f      	ldr	r7, [r5, #0]
 8018dc8:	380b      	subs	r0, #11
 8018dca:	4684      	mov	ip, r0
 8018dcc:	1e03      	subs	r3, r0, #0
 8018dce:	d012      	beq.n	8018df6 <__b2d+0x8e>
 8018dd0:	409c      	lsls	r4, r3
 8018dd2:	2020      	movs	r0, #32
 8018dd4:	4321      	orrs	r1, r4
 8018dd6:	003c      	movs	r4, r7
 8018dd8:	1ac0      	subs	r0, r0, r3
 8018dda:	40c4      	lsrs	r4, r0
 8018ddc:	4321      	orrs	r1, r4
 8018dde:	000b      	movs	r3, r1
 8018de0:	2100      	movs	r1, #0
 8018de2:	42b5      	cmp	r5, r6
 8018de4:	d901      	bls.n	8018dea <__b2d+0x82>
 8018de6:	3d04      	subs	r5, #4
 8018de8:	6829      	ldr	r1, [r5, #0]
 8018dea:	4664      	mov	r4, ip
 8018dec:	40c1      	lsrs	r1, r0
 8018dee:	40a7      	lsls	r7, r4
 8018df0:	430f      	orrs	r7, r1
 8018df2:	003a      	movs	r2, r7
 8018df4:	e7de      	b.n	8018db4 <__b2d+0x4c>
 8018df6:	4321      	orrs	r1, r4
 8018df8:	000b      	movs	r3, r1
 8018dfa:	e7fa      	b.n	8018df2 <__b2d+0x8a>
 8018dfc:	3ff00000 	.word	0x3ff00000

08018e00 <__d2b>:
 8018e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e02:	001d      	movs	r5, r3
 8018e04:	2101      	movs	r1, #1
 8018e06:	0014      	movs	r4, r2
 8018e08:	9f08      	ldr	r7, [sp, #32]
 8018e0a:	f7ff fce5 	bl	80187d8 <_Balloc>
 8018e0e:	032b      	lsls	r3, r5, #12
 8018e10:	006d      	lsls	r5, r5, #1
 8018e12:	0006      	movs	r6, r0
 8018e14:	0b1b      	lsrs	r3, r3, #12
 8018e16:	0d6d      	lsrs	r5, r5, #21
 8018e18:	d124      	bne.n	8018e64 <__d2b+0x64>
 8018e1a:	9301      	str	r3, [sp, #4]
 8018e1c:	2c00      	cmp	r4, #0
 8018e1e:	d027      	beq.n	8018e70 <__d2b+0x70>
 8018e20:	4668      	mov	r0, sp
 8018e22:	9400      	str	r4, [sp, #0]
 8018e24:	f7ff fda0 	bl	8018968 <__lo0bits>
 8018e28:	9c00      	ldr	r4, [sp, #0]
 8018e2a:	2800      	cmp	r0, #0
 8018e2c:	d01e      	beq.n	8018e6c <__d2b+0x6c>
 8018e2e:	9b01      	ldr	r3, [sp, #4]
 8018e30:	2120      	movs	r1, #32
 8018e32:	001a      	movs	r2, r3
 8018e34:	1a09      	subs	r1, r1, r0
 8018e36:	408a      	lsls	r2, r1
 8018e38:	40c3      	lsrs	r3, r0
 8018e3a:	4322      	orrs	r2, r4
 8018e3c:	6172      	str	r2, [r6, #20]
 8018e3e:	9301      	str	r3, [sp, #4]
 8018e40:	9c01      	ldr	r4, [sp, #4]
 8018e42:	61b4      	str	r4, [r6, #24]
 8018e44:	1e63      	subs	r3, r4, #1
 8018e46:	419c      	sbcs	r4, r3
 8018e48:	3401      	adds	r4, #1
 8018e4a:	6134      	str	r4, [r6, #16]
 8018e4c:	2d00      	cmp	r5, #0
 8018e4e:	d018      	beq.n	8018e82 <__d2b+0x82>
 8018e50:	4b12      	ldr	r3, [pc, #72]	; (8018e9c <__d2b+0x9c>)
 8018e52:	18ed      	adds	r5, r5, r3
 8018e54:	2335      	movs	r3, #53	; 0x35
 8018e56:	182d      	adds	r5, r5, r0
 8018e58:	603d      	str	r5, [r7, #0]
 8018e5a:	1a18      	subs	r0, r3, r0
 8018e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e5e:	6018      	str	r0, [r3, #0]
 8018e60:	0030      	movs	r0, r6
 8018e62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018e64:	2280      	movs	r2, #128	; 0x80
 8018e66:	0352      	lsls	r2, r2, #13
 8018e68:	4313      	orrs	r3, r2
 8018e6a:	e7d6      	b.n	8018e1a <__d2b+0x1a>
 8018e6c:	6174      	str	r4, [r6, #20]
 8018e6e:	e7e7      	b.n	8018e40 <__d2b+0x40>
 8018e70:	a801      	add	r0, sp, #4
 8018e72:	f7ff fd79 	bl	8018968 <__lo0bits>
 8018e76:	2401      	movs	r4, #1
 8018e78:	9b01      	ldr	r3, [sp, #4]
 8018e7a:	6134      	str	r4, [r6, #16]
 8018e7c:	6173      	str	r3, [r6, #20]
 8018e7e:	3020      	adds	r0, #32
 8018e80:	e7e4      	b.n	8018e4c <__d2b+0x4c>
 8018e82:	4b07      	ldr	r3, [pc, #28]	; (8018ea0 <__d2b+0xa0>)
 8018e84:	18c0      	adds	r0, r0, r3
 8018e86:	4b07      	ldr	r3, [pc, #28]	; (8018ea4 <__d2b+0xa4>)
 8018e88:	6038      	str	r0, [r7, #0]
 8018e8a:	18e3      	adds	r3, r4, r3
 8018e8c:	009b      	lsls	r3, r3, #2
 8018e8e:	18f3      	adds	r3, r6, r3
 8018e90:	6958      	ldr	r0, [r3, #20]
 8018e92:	f7ff fd4f 	bl	8018934 <__hi0bits>
 8018e96:	0164      	lsls	r4, r4, #5
 8018e98:	1a20      	subs	r0, r4, r0
 8018e9a:	e7df      	b.n	8018e5c <__d2b+0x5c>
 8018e9c:	fffffbcd 	.word	0xfffffbcd
 8018ea0:	fffffbce 	.word	0xfffffbce
 8018ea4:	3fffffff 	.word	0x3fffffff

08018ea8 <__ratio>:
 8018ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eaa:	b085      	sub	sp, #20
 8018eac:	000f      	movs	r7, r1
 8018eae:	a902      	add	r1, sp, #8
 8018eb0:	0006      	movs	r6, r0
 8018eb2:	f7ff ff59 	bl	8018d68 <__b2d>
 8018eb6:	0004      	movs	r4, r0
 8018eb8:	000d      	movs	r5, r1
 8018eba:	0038      	movs	r0, r7
 8018ebc:	a903      	add	r1, sp, #12
 8018ebe:	9400      	str	r4, [sp, #0]
 8018ec0:	9501      	str	r5, [sp, #4]
 8018ec2:	f7ff ff51 	bl	8018d68 <__b2d>
 8018ec6:	6936      	ldr	r6, [r6, #16]
 8018ec8:	693f      	ldr	r7, [r7, #16]
 8018eca:	0002      	movs	r2, r0
 8018ecc:	1bf7      	subs	r7, r6, r7
 8018ece:	017e      	lsls	r6, r7, #5
 8018ed0:	46b4      	mov	ip, r6
 8018ed2:	9f03      	ldr	r7, [sp, #12]
 8018ed4:	9e02      	ldr	r6, [sp, #8]
 8018ed6:	000b      	movs	r3, r1
 8018ed8:	1bf6      	subs	r6, r6, r7
 8018eda:	4466      	add	r6, ip
 8018edc:	0537      	lsls	r7, r6, #20
 8018ede:	2e00      	cmp	r6, #0
 8018ee0:	dd07      	ble.n	8018ef2 <__ratio+0x4a>
 8018ee2:	1979      	adds	r1, r7, r5
 8018ee4:	9101      	str	r1, [sp, #4]
 8018ee6:	9800      	ldr	r0, [sp, #0]
 8018ee8:	9901      	ldr	r1, [sp, #4]
 8018eea:	f7e8 fb99 	bl	8001620 <__aeabi_ddiv>
 8018eee:	b005      	add	sp, #20
 8018ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ef2:	1bcb      	subs	r3, r1, r7
 8018ef4:	e7f7      	b.n	8018ee6 <__ratio+0x3e>

08018ef6 <__copybits>:
 8018ef6:	0013      	movs	r3, r2
 8018ef8:	3901      	subs	r1, #1
 8018efa:	b510      	push	{r4, lr}
 8018efc:	1149      	asrs	r1, r1, #5
 8018efe:	6912      	ldr	r2, [r2, #16]
 8018f00:	3101      	adds	r1, #1
 8018f02:	0089      	lsls	r1, r1, #2
 8018f04:	3314      	adds	r3, #20
 8018f06:	0092      	lsls	r2, r2, #2
 8018f08:	1841      	adds	r1, r0, r1
 8018f0a:	189a      	adds	r2, r3, r2
 8018f0c:	429a      	cmp	r2, r3
 8018f0e:	d803      	bhi.n	8018f18 <__copybits+0x22>
 8018f10:	2300      	movs	r3, #0
 8018f12:	4281      	cmp	r1, r0
 8018f14:	d803      	bhi.n	8018f1e <__copybits+0x28>
 8018f16:	bd10      	pop	{r4, pc}
 8018f18:	cb10      	ldmia	r3!, {r4}
 8018f1a:	c010      	stmia	r0!, {r4}
 8018f1c:	e7f6      	b.n	8018f0c <__copybits+0x16>
 8018f1e:	c008      	stmia	r0!, {r3}
 8018f20:	e7f7      	b.n	8018f12 <__copybits+0x1c>

08018f22 <__any_on>:
 8018f22:	0002      	movs	r2, r0
 8018f24:	6900      	ldr	r0, [r0, #16]
 8018f26:	b510      	push	{r4, lr}
 8018f28:	3214      	adds	r2, #20
 8018f2a:	114b      	asrs	r3, r1, #5
 8018f2c:	4298      	cmp	r0, r3
 8018f2e:	db12      	blt.n	8018f56 <__any_on+0x34>
 8018f30:	dd0b      	ble.n	8018f4a <__any_on+0x28>
 8018f32:	201f      	movs	r0, #31
 8018f34:	4001      	ands	r1, r0
 8018f36:	d008      	beq.n	8018f4a <__any_on+0x28>
 8018f38:	0098      	lsls	r0, r3, #2
 8018f3a:	5884      	ldr	r4, [r0, r2]
 8018f3c:	0020      	movs	r0, r4
 8018f3e:	40c8      	lsrs	r0, r1
 8018f40:	4088      	lsls	r0, r1
 8018f42:	0001      	movs	r1, r0
 8018f44:	2001      	movs	r0, #1
 8018f46:	428c      	cmp	r4, r1
 8018f48:	d104      	bne.n	8018f54 <__any_on+0x32>
 8018f4a:	009b      	lsls	r3, r3, #2
 8018f4c:	18d3      	adds	r3, r2, r3
 8018f4e:	4293      	cmp	r3, r2
 8018f50:	d803      	bhi.n	8018f5a <__any_on+0x38>
 8018f52:	2000      	movs	r0, #0
 8018f54:	bd10      	pop	{r4, pc}
 8018f56:	0003      	movs	r3, r0
 8018f58:	e7f7      	b.n	8018f4a <__any_on+0x28>
 8018f5a:	3b04      	subs	r3, #4
 8018f5c:	6819      	ldr	r1, [r3, #0]
 8018f5e:	2900      	cmp	r1, #0
 8018f60:	d0f5      	beq.n	8018f4e <__any_on+0x2c>
 8018f62:	2001      	movs	r0, #1
 8018f64:	e7f6      	b.n	8018f54 <__any_on+0x32>
	...

08018f68 <frexp>:
 8018f68:	b570      	push	{r4, r5, r6, lr}
 8018f6a:	0014      	movs	r4, r2
 8018f6c:	2500      	movs	r5, #0
 8018f6e:	6025      	str	r5, [r4, #0]
 8018f70:	4d10      	ldr	r5, [pc, #64]	; (8018fb4 <frexp+0x4c>)
 8018f72:	004b      	lsls	r3, r1, #1
 8018f74:	000a      	movs	r2, r1
 8018f76:	085b      	lsrs	r3, r3, #1
 8018f78:	42ab      	cmp	r3, r5
 8018f7a:	dc1a      	bgt.n	8018fb2 <frexp+0x4a>
 8018f7c:	001d      	movs	r5, r3
 8018f7e:	4305      	orrs	r5, r0
 8018f80:	d017      	beq.n	8018fb2 <frexp+0x4a>
 8018f82:	4d0d      	ldr	r5, [pc, #52]	; (8018fb8 <frexp+0x50>)
 8018f84:	42ab      	cmp	r3, r5
 8018f86:	dc09      	bgt.n	8018f9c <frexp+0x34>
 8018f88:	2200      	movs	r2, #0
 8018f8a:	4b0c      	ldr	r3, [pc, #48]	; (8018fbc <frexp+0x54>)
 8018f8c:	f7e8 ff52 	bl	8001e34 <__aeabi_dmul>
 8018f90:	2536      	movs	r5, #54	; 0x36
 8018f92:	000a      	movs	r2, r1
 8018f94:	004b      	lsls	r3, r1, #1
 8018f96:	426d      	negs	r5, r5
 8018f98:	085b      	lsrs	r3, r3, #1
 8018f9a:	6025      	str	r5, [r4, #0]
 8018f9c:	4d08      	ldr	r5, [pc, #32]	; (8018fc0 <frexp+0x58>)
 8018f9e:	151b      	asrs	r3, r3, #20
 8018fa0:	195b      	adds	r3, r3, r5
 8018fa2:	6825      	ldr	r5, [r4, #0]
 8018fa4:	18eb      	adds	r3, r5, r3
 8018fa6:	6023      	str	r3, [r4, #0]
 8018fa8:	4b06      	ldr	r3, [pc, #24]	; (8018fc4 <frexp+0x5c>)
 8018faa:	401a      	ands	r2, r3
 8018fac:	4b06      	ldr	r3, [pc, #24]	; (8018fc8 <frexp+0x60>)
 8018fae:	4313      	orrs	r3, r2
 8018fb0:	0019      	movs	r1, r3
 8018fb2:	bd70      	pop	{r4, r5, r6, pc}
 8018fb4:	7fefffff 	.word	0x7fefffff
 8018fb8:	000fffff 	.word	0x000fffff
 8018fbc:	43500000 	.word	0x43500000
 8018fc0:	fffffc02 	.word	0xfffffc02
 8018fc4:	800fffff 	.word	0x800fffff
 8018fc8:	3fe00000 	.word	0x3fe00000

08018fcc <__ssprint_r>:
 8018fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fce:	6893      	ldr	r3, [r2, #8]
 8018fd0:	b087      	sub	sp, #28
 8018fd2:	9002      	str	r0, [sp, #8]
 8018fd4:	000c      	movs	r4, r1
 8018fd6:	0016      	movs	r6, r2
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d063      	beq.n	80190a4 <__ssprint_r+0xd8>
 8018fdc:	6813      	ldr	r3, [r2, #0]
 8018fde:	9303      	str	r3, [sp, #12]
 8018fe0:	2300      	movs	r3, #0
 8018fe2:	001f      	movs	r7, r3
 8018fe4:	9305      	str	r3, [sp, #20]
 8018fe6:	2f00      	cmp	r7, #0
 8018fe8:	d02e      	beq.n	8019048 <__ssprint_r+0x7c>
 8018fea:	68a5      	ldr	r5, [r4, #8]
 8018fec:	42af      	cmp	r7, r5
 8018fee:	d347      	bcc.n	8019080 <__ssprint_r+0xb4>
 8018ff0:	2390      	movs	r3, #144	; 0x90
 8018ff2:	89a2      	ldrh	r2, [r4, #12]
 8018ff4:	00db      	lsls	r3, r3, #3
 8018ff6:	421a      	tst	r2, r3
 8018ff8:	d042      	beq.n	8019080 <__ssprint_r+0xb4>
 8018ffa:	2003      	movs	r0, #3
 8018ffc:	6921      	ldr	r1, [r4, #16]
 8018ffe:	6823      	ldr	r3, [r4, #0]
 8019000:	1a5b      	subs	r3, r3, r1
 8019002:	9304      	str	r3, [sp, #16]
 8019004:	6963      	ldr	r3, [r4, #20]
 8019006:	4343      	muls	r3, r0
 8019008:	0fd8      	lsrs	r0, r3, #31
 801900a:	18c3      	adds	r3, r0, r3
 801900c:	105b      	asrs	r3, r3, #1
 801900e:	9301      	str	r3, [sp, #4]
 8019010:	9b04      	ldr	r3, [sp, #16]
 8019012:	9801      	ldr	r0, [sp, #4]
 8019014:	3301      	adds	r3, #1
 8019016:	19db      	adds	r3, r3, r7
 8019018:	4283      	cmp	r3, r0
 801901a:	d900      	bls.n	801901e <__ssprint_r+0x52>
 801901c:	9301      	str	r3, [sp, #4]
 801901e:	0553      	lsls	r3, r2, #21
 8019020:	d544      	bpl.n	80190ac <__ssprint_r+0xe0>
 8019022:	9901      	ldr	r1, [sp, #4]
 8019024:	9802      	ldr	r0, [sp, #8]
 8019026:	f7fb fa85 	bl	8014534 <_malloc_r>
 801902a:	1e05      	subs	r5, r0, #0
 801902c:	d114      	bne.n	8019058 <__ssprint_r+0x8c>
 801902e:	230c      	movs	r3, #12
 8019030:	9a02      	ldr	r2, [sp, #8]
 8019032:	2001      	movs	r0, #1
 8019034:	6013      	str	r3, [r2, #0]
 8019036:	2340      	movs	r3, #64	; 0x40
 8019038:	89a2      	ldrh	r2, [r4, #12]
 801903a:	4240      	negs	r0, r0
 801903c:	4313      	orrs	r3, r2
 801903e:	81a3      	strh	r3, [r4, #12]
 8019040:	2300      	movs	r3, #0
 8019042:	60b3      	str	r3, [r6, #8]
 8019044:	6073      	str	r3, [r6, #4]
 8019046:	e02f      	b.n	80190a8 <__ssprint_r+0xdc>
 8019048:	9b03      	ldr	r3, [sp, #12]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	9305      	str	r3, [sp, #20]
 801904e:	9b03      	ldr	r3, [sp, #12]
 8019050:	685f      	ldr	r7, [r3, #4]
 8019052:	3308      	adds	r3, #8
 8019054:	9303      	str	r3, [sp, #12]
 8019056:	e7c6      	b.n	8018fe6 <__ssprint_r+0x1a>
 8019058:	9a04      	ldr	r2, [sp, #16]
 801905a:	6921      	ldr	r1, [r4, #16]
 801905c:	f7fb fca3 	bl	80149a6 <memcpy>
 8019060:	89a3      	ldrh	r3, [r4, #12]
 8019062:	4a18      	ldr	r2, [pc, #96]	; (80190c4 <__ssprint_r+0xf8>)
 8019064:	401a      	ands	r2, r3
 8019066:	2380      	movs	r3, #128	; 0x80
 8019068:	4313      	orrs	r3, r2
 801906a:	81a3      	strh	r3, [r4, #12]
 801906c:	9b04      	ldr	r3, [sp, #16]
 801906e:	6125      	str	r5, [r4, #16]
 8019070:	18ed      	adds	r5, r5, r3
 8019072:	6025      	str	r5, [r4, #0]
 8019074:	003d      	movs	r5, r7
 8019076:	9b01      	ldr	r3, [sp, #4]
 8019078:	9a04      	ldr	r2, [sp, #16]
 801907a:	6163      	str	r3, [r4, #20]
 801907c:	1a9b      	subs	r3, r3, r2
 801907e:	60a3      	str	r3, [r4, #8]
 8019080:	42bd      	cmp	r5, r7
 8019082:	d900      	bls.n	8019086 <__ssprint_r+0xba>
 8019084:	003d      	movs	r5, r7
 8019086:	002a      	movs	r2, r5
 8019088:	9905      	ldr	r1, [sp, #20]
 801908a:	6820      	ldr	r0, [r4, #0]
 801908c:	f7ff fb91 	bl	80187b2 <memmove>
 8019090:	68a3      	ldr	r3, [r4, #8]
 8019092:	1b5b      	subs	r3, r3, r5
 8019094:	60a3      	str	r3, [r4, #8]
 8019096:	6823      	ldr	r3, [r4, #0]
 8019098:	195d      	adds	r5, r3, r5
 801909a:	68b3      	ldr	r3, [r6, #8]
 801909c:	6025      	str	r5, [r4, #0]
 801909e:	1bdb      	subs	r3, r3, r7
 80190a0:	60b3      	str	r3, [r6, #8]
 80190a2:	d1d1      	bne.n	8019048 <__ssprint_r+0x7c>
 80190a4:	2000      	movs	r0, #0
 80190a6:	6070      	str	r0, [r6, #4]
 80190a8:	b007      	add	sp, #28
 80190aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190ac:	9a01      	ldr	r2, [sp, #4]
 80190ae:	9802      	ldr	r0, [sp, #8]
 80190b0:	f7fb fcbe 	bl	8014a30 <_realloc_r>
 80190b4:	1e05      	subs	r5, r0, #0
 80190b6:	d1d9      	bne.n	801906c <__ssprint_r+0xa0>
 80190b8:	6921      	ldr	r1, [r4, #16]
 80190ba:	9802      	ldr	r0, [sp, #8]
 80190bc:	f7fe ff78 	bl	8017fb0 <_free_r>
 80190c0:	e7b5      	b.n	801902e <__ssprint_r+0x62>
 80190c2:	46c0      	nop			; (mov r8, r8)
 80190c4:	fffffb7f 	.word	0xfffffb7f

080190c8 <__register_exitproc>:
 80190c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80190ca:	4d29      	ldr	r5, [pc, #164]	; (8019170 <__register_exitproc+0xa8>)
 80190cc:	0006      	movs	r6, r0
 80190ce:	6828      	ldr	r0, [r5, #0]
 80190d0:	9301      	str	r3, [sp, #4]
 80190d2:	9100      	str	r1, [sp, #0]
 80190d4:	0017      	movs	r7, r2
 80190d6:	f7ff fb5f 	bl	8018798 <__retarget_lock_acquire_recursive>
 80190da:	4b26      	ldr	r3, [pc, #152]	; (8019174 <__register_exitproc+0xac>)
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	001c      	movs	r4, r3
 80190e0:	34fc      	adds	r4, #252	; 0xfc
 80190e2:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80190e4:	2800      	cmp	r0, #0
 80190e6:	d103      	bne.n	80190f0 <__register_exitproc+0x28>
 80190e8:	334d      	adds	r3, #77	; 0x4d
 80190ea:	33ff      	adds	r3, #255	; 0xff
 80190ec:	0018      	movs	r0, r3
 80190ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80190f0:	6843      	ldr	r3, [r0, #4]
 80190f2:	2b1f      	cmp	r3, #31
 80190f4:	dd18      	ble.n	8019128 <__register_exitproc+0x60>
 80190f6:	4b20      	ldr	r3, [pc, #128]	; (8019178 <__register_exitproc+0xb0>)
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d105      	bne.n	8019108 <__register_exitproc+0x40>
 80190fc:	6828      	ldr	r0, [r5, #0]
 80190fe:	f7ff fb4c 	bl	801879a <__retarget_lock_release_recursive>
 8019102:	2001      	movs	r0, #1
 8019104:	4240      	negs	r0, r0
 8019106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019108:	20c8      	movs	r0, #200	; 0xc8
 801910a:	0040      	lsls	r0, r0, #1
 801910c:	f7fb f9fe 	bl	801450c <malloc>
 8019110:	2800      	cmp	r0, #0
 8019112:	d0f3      	beq.n	80190fc <__register_exitproc+0x34>
 8019114:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8019116:	2300      	movs	r3, #0
 8019118:	6002      	str	r2, [r0, #0]
 801911a:	22c4      	movs	r2, #196	; 0xc4
 801911c:	0052      	lsls	r2, r2, #1
 801911e:	6043      	str	r3, [r0, #4]
 8019120:	64e0      	str	r0, [r4, #76]	; 0x4c
 8019122:	5083      	str	r3, [r0, r2]
 8019124:	3204      	adds	r2, #4
 8019126:	5083      	str	r3, [r0, r2]
 8019128:	6843      	ldr	r3, [r0, #4]
 801912a:	2e00      	cmp	r6, #0
 801912c:	d014      	beq.n	8019158 <__register_exitproc+0x90>
 801912e:	009a      	lsls	r2, r3, #2
 8019130:	1882      	adds	r2, r0, r2
 8019132:	0011      	movs	r1, r2
 8019134:	3188      	adds	r1, #136	; 0x88
 8019136:	600f      	str	r7, [r1, #0]
 8019138:	2101      	movs	r1, #1
 801913a:	0004      	movs	r4, r0
 801913c:	4099      	lsls	r1, r3
 801913e:	3485      	adds	r4, #133	; 0x85
 8019140:	34ff      	adds	r4, #255	; 0xff
 8019142:	6865      	ldr	r5, [r4, #4]
 8019144:	32fc      	adds	r2, #252	; 0xfc
 8019146:	430d      	orrs	r5, r1
 8019148:	6065      	str	r5, [r4, #4]
 801914a:	9d01      	ldr	r5, [sp, #4]
 801914c:	60d5      	str	r5, [r2, #12]
 801914e:	2e02      	cmp	r6, #2
 8019150:	d102      	bne.n	8019158 <__register_exitproc+0x90>
 8019152:	68a2      	ldr	r2, [r4, #8]
 8019154:	4311      	orrs	r1, r2
 8019156:	60a1      	str	r1, [r4, #8]
 8019158:	1c5a      	adds	r2, r3, #1
 801915a:	6042      	str	r2, [r0, #4]
 801915c:	3302      	adds	r3, #2
 801915e:	9a00      	ldr	r2, [sp, #0]
 8019160:	009b      	lsls	r3, r3, #2
 8019162:	501a      	str	r2, [r3, r0]
 8019164:	4b02      	ldr	r3, [pc, #8]	; (8019170 <__register_exitproc+0xa8>)
 8019166:	6818      	ldr	r0, [r3, #0]
 8019168:	f7ff fb17 	bl	801879a <__retarget_lock_release_recursive>
 801916c:	2000      	movs	r0, #0
 801916e:	e7ca      	b.n	8019106 <__register_exitproc+0x3e>
 8019170:	20000ac4 	.word	0x20000ac4
 8019174:	0801c338 	.word	0x0801c338
 8019178:	0801450d 	.word	0x0801450d

0801917c <_calloc_r>:
 801917c:	b510      	push	{r4, lr}
 801917e:	4351      	muls	r1, r2
 8019180:	f7fb f9d8 	bl	8014534 <_malloc_r>
 8019184:	1e04      	subs	r4, r0, #0
 8019186:	d01a      	beq.n	80191be <_calloc_r+0x42>
 8019188:	0003      	movs	r3, r0
 801918a:	3b08      	subs	r3, #8
 801918c:	685a      	ldr	r2, [r3, #4]
 801918e:	2303      	movs	r3, #3
 8019190:	439a      	bics	r2, r3
 8019192:	3a04      	subs	r2, #4
 8019194:	2a24      	cmp	r2, #36	; 0x24
 8019196:	d819      	bhi.n	80191cc <_calloc_r+0x50>
 8019198:	0003      	movs	r3, r0
 801919a:	2a13      	cmp	r2, #19
 801919c:	d90b      	bls.n	80191b6 <_calloc_r+0x3a>
 801919e:	2100      	movs	r1, #0
 80191a0:	3308      	adds	r3, #8
 80191a2:	6001      	str	r1, [r0, #0]
 80191a4:	6041      	str	r1, [r0, #4]
 80191a6:	2a1b      	cmp	r2, #27
 80191a8:	d905      	bls.n	80191b6 <_calloc_r+0x3a>
 80191aa:	6081      	str	r1, [r0, #8]
 80191ac:	60c1      	str	r1, [r0, #12]
 80191ae:	2a24      	cmp	r2, #36	; 0x24
 80191b0:	d007      	beq.n	80191c2 <_calloc_r+0x46>
 80191b2:	0003      	movs	r3, r0
 80191b4:	3310      	adds	r3, #16
 80191b6:	2200      	movs	r2, #0
 80191b8:	601a      	str	r2, [r3, #0]
 80191ba:	605a      	str	r2, [r3, #4]
 80191bc:	609a      	str	r2, [r3, #8]
 80191be:	0020      	movs	r0, r4
 80191c0:	bd10      	pop	{r4, pc}
 80191c2:	0003      	movs	r3, r0
 80191c4:	6101      	str	r1, [r0, #16]
 80191c6:	3318      	adds	r3, #24
 80191c8:	6141      	str	r1, [r0, #20]
 80191ca:	e7f4      	b.n	80191b6 <_calloc_r+0x3a>
 80191cc:	2100      	movs	r1, #0
 80191ce:	f7fb fbf3 	bl	80149b8 <memset>
 80191d2:	e7f4      	b.n	80191be <_calloc_r+0x42>

080191d4 <_sbrk>:
 80191d4:	4b05      	ldr	r3, [pc, #20]	; (80191ec <_sbrk+0x18>)
 80191d6:	0002      	movs	r2, r0
 80191d8:	6819      	ldr	r1, [r3, #0]
 80191da:	2900      	cmp	r1, #0
 80191dc:	d101      	bne.n	80191e2 <_sbrk+0xe>
 80191de:	4904      	ldr	r1, [pc, #16]	; (80191f0 <_sbrk+0x1c>)
 80191e0:	6019      	str	r1, [r3, #0]
 80191e2:	6818      	ldr	r0, [r3, #0]
 80191e4:	1882      	adds	r2, r0, r2
 80191e6:	601a      	str	r2, [r3, #0]
 80191e8:	4770      	bx	lr
 80191ea:	46c0      	nop			; (mov r8, r8)
 80191ec:	20006dcc 	.word	0x20006dcc
 80191f0:	20007400 	.word	0x20007400

080191f4 <_init>:
 80191f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191f6:	46c0      	nop			; (mov r8, r8)
 80191f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80191fa:	bc08      	pop	{r3}
 80191fc:	469e      	mov	lr, r3
 80191fe:	4770      	bx	lr

08019200 <_fini>:
 8019200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019202:	46c0      	nop			; (mov r8, r8)
 8019204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019206:	bc08      	pop	{r3}
 8019208:	469e      	mov	lr, r3
 801920a:	4770      	bx	lr
